
MaintenanceInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000143a0  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000143a0  000143a0  000243a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  000143a8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003063c  2**0
                  CONTENTS
  5 .bss          00009a3c  2000063c  000149e4  0003063c  2**2
                  ALLOC
  6 .stack        00010000  2000a078  0001e420  0003063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000a57c5  00000000  00000000  000306c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e0d5  00000000  00000000  000d5e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00021cbb  00000000  00000000  000e3f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003b68  00000000  00000000  00105c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003758  00000000  00000000  00109780  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00059d98  00000000  00000000  0010ced8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004dd27  00000000  00000000  00166c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00147eeb  00000000  00000000  001b4997  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000f150  00000000  00000000  002fc884  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 a0 01 20 cd 06 00 00 c9 06 00 00 c9 06 00 00     x.. ............
      10:	c9 06 00 00 c9 06 00 00 c9 06 00 00 00 00 00 00     ................
	...
      2c:	c9 06 00 00 c9 06 00 00 00 00 00 00 c9 06 00 00     ................
      3c:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
      4c:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
      5c:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
      6c:	d5 65 00 00 d9 53 00 00 e9 53 00 00 c9 06 00 00     .e...S...S......
      7c:	f9 53 00 00 09 54 00 00 19 54 00 00 29 54 00 00     .S...T...T..)T..
      8c:	39 54 00 00 49 54 00 00 59 54 00 00 c9 06 00 00     9T..IT..YT......
      9c:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
      ac:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
      bc:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
      cc:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
      dc:	c9 06 00 00 c9 06 00 00 c9 06 00 00 00 00 00 00     ................
	...
      f4:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     104:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     114:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     124:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     134:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     144:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     154:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     164:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     174:	c9 06 00 00 c9 06 00 00 21 48 00 00 41 b6 00 00     ........!H..A...
     184:	51 b6 00 00 61 b6 00 00 71 b6 00 00 c9 06 00 00     Q...a...q.......
     194:	81 80 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     1a4:	c9 06 00 00 c9 06 00 00 c9 06 00 00 9d 80 00 00     ................
     1b4:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     1c4:	b9 80 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     1d4:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     1e4:	c9 06 00 00 c9 06 00 00 3d 8d 00 00 c9 06 00 00     ........=.......
     1f4:	59 8d 00 00 c9 06 00 00 75 8d 00 00 91 8d 00 00     Y.......u.......
     204:	ad 8d 00 00 c9 8d 00 00 c9 06 00 00 c9 06 00 00     ................
     214:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     224:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     234:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     244:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................
     254:	c9 06 00 00 c9 06 00 00 c9 06 00 00 c9 06 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	000143a8 	.word	0x000143a8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000143a8 	.word	0x000143a8
     2c4:	20000640 	.word	0x20000640
     2c8:	000143a8 	.word	0x000143a8
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN16Commands_HandlerC2Ev>:
#include "EvaporatorAndCondesatorFans_Class.h"
#include "CDC_Class.h"
#include "Dual_Flapper_Valve_Controller.h"

// default constructor
Commands_Handler::Commands_Handler()
     2d0:	b470      	push	{r4, r5, r6}
     2d2:	680a      	ldr	r2, [r1, #0]
     2d4:	6002      	str	r2, [r0, #0]
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     2d6:	2200      	movs	r2, #0
     2d8:	2664      	movs	r6, #100	; 0x64
     2da:	7106      	strb	r6, [r0, #4]
     2dc:	2563      	movs	r5, #99	; 0x63
     2de:	7145      	strb	r5, [r0, #5]
     2e0:	2462      	movs	r4, #98	; 0x62
     2e2:	7184      	strb	r4, [r0, #6]
     2e4:	2161      	movs	r1, #97	; 0x61
     2e6:	71c1      	strb	r1, [r0, #7]
     2e8:	7242      	strb	r2, [r0, #9]
     2ea:	7406      	strb	r6, [r0, #16]
     2ec:	7445      	strb	r5, [r0, #17]
     2ee:	7484      	strb	r4, [r0, #18]
     2f0:	74c1      	strb	r1, [r0, #19]
     2f2:	7542      	strb	r2, [r0, #21]
{
	
} //Commands_Handler
     2f4:	bc70      	pop	{r4, r5, r6}
     2f6:	4770      	bx	lr

000002f8 <_ZN16Commands_HandlerD2Ev>:

// default destructor
Commands_Handler::~Commands_Handler()
     2f8:	680b      	ldr	r3, [r1, #0]
     2fa:	6003      	str	r3, [r0, #0]
{
} //~Commands_Handler
     2fc:	4770      	bx	lr

000002fe <_ZN16Commands_Handler18InitCommandHandlerEPh>:

void Commands_Handler::InitCommandHandler(uint8_t * buffer){
	usbMessageBuffer=buffer;
     2fe:	60c1      	str	r1, [r0, #12]
     300:	4770      	bx	lr
	...

00000304 <_ZN16Commands_Handler13SetEnableFan1Eh>:
	}
	return SetEnableFan1(data);
	
}

uint8_t Commands_Handler::SetEnableFan1(uint8_t data){
     304:	b510      	push	{r4, lr}
     306:	460c      	mov	r4, r1
	if ((data&(0x01))>0)
     308:	f011 0f01 	tst.w	r1, #1
	{
		fans.evaporator[0]->SetEnable(true);
     30c:	bf14      	ite	ne
     30e:	2101      	movne	r1, #1
	}
	else
	{
		fans.evaporator[0]->SetEnable(false);
     310:	2100      	moveq	r1, #0
     312:	4b03      	ldr	r3, [pc, #12]	; (320 <_ZN16Commands_Handler13SetEnableFan1Eh+0x1c>)
     314:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     316:	4b03      	ldr	r3, [pc, #12]	; (324 <_ZN16Commands_Handler13SetEnableFan1Eh+0x20>)
     318:	4798      	blx	r3
	}
	return data;
}
     31a:	4620      	mov	r0, r4
     31c:	bd10      	pop	{r4, pc}
     31e:	bf00      	nop
     320:	200019cc 	.word	0x200019cc
     324:	0000f165 	.word	0x0000f165

00000328 <_ZN16Commands_Handler13SetEnableFan2Eh>:
uint8_t	Commands_Handler::SetEnableFan2(uint8_t data){
     328:	b538      	push	{r3, r4, r5, lr}
     32a:	4605      	mov	r5, r0
     32c:	460c      	mov	r4, r1
	if ((data&(0x02))>0){
     32e:	f011 0f02 	tst.w	r1, #2
		fans.evaporator[1]->SetEnable(true);
     332:	bf14      	ite	ne
     334:	2101      	movne	r1, #1
		fans.evaporator[1]->SetEnable(false);
     336:	2100      	moveq	r1, #0
     338:	4b04      	ldr	r3, [pc, #16]	; (34c <_ZN16Commands_Handler13SetEnableFan2Eh+0x24>)
     33a:	6e18      	ldr	r0, [r3, #96]	; 0x60
     33c:	4b04      	ldr	r3, [pc, #16]	; (350 <_ZN16Commands_Handler13SetEnableFan2Eh+0x28>)
     33e:	4798      	blx	r3
	return SetEnableFan1(data);
     340:	4621      	mov	r1, r4
     342:	4628      	mov	r0, r5
     344:	4b03      	ldr	r3, [pc, #12]	; (354 <_ZN16Commands_Handler13SetEnableFan2Eh+0x2c>)
     346:	4798      	blx	r3
}
     348:	bd38      	pop	{r3, r4, r5, pc}
     34a:	bf00      	nop
     34c:	200019cc 	.word	0x200019cc
     350:	0000f165 	.word	0x0000f165
     354:	00000305 	.word	0x00000305

00000358 <_ZN16Commands_Handler19SetEnableCondesatorEh>:
uint8_t Commands_Handler::SetEnableCondesator(uint8_t data){
     358:	b538      	push	{r3, r4, r5, lr}
     35a:	4605      	mov	r5, r0
     35c:	460c      	mov	r4, r1
	if ((data&(0x04))>0)
     35e:	f011 0f04 	tst.w	r1, #4
		fans.condesator->SetEnable(true);
     362:	bf14      	ite	ne
     364:	2101      	movne	r1, #1
		fans.condesator->SetEnable(false);
     366:	2100      	moveq	r1, #0
     368:	4b04      	ldr	r3, [pc, #16]	; (37c <_ZN16Commands_Handler19SetEnableCondesatorEh+0x24>)
     36a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     36c:	4b04      	ldr	r3, [pc, #16]	; (380 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x28>)
     36e:	4798      	blx	r3
	return SetEnableFan2(data);
     370:	4621      	mov	r1, r4
     372:	4628      	mov	r0, r5
     374:	4b03      	ldr	r3, [pc, #12]	; (384 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x2c>)
     376:	4798      	blx	r3
}
     378:	bd38      	pop	{r3, r4, r5, pc}
     37a:	bf00      	nop
     37c:	200019cc 	.word	0x200019cc
     380:	0000edf5 	.word	0x0000edf5
     384:	00000329 	.word	0x00000329

00000388 <_ZN16Commands_Handler20CommandSetEnableFansEv>:
bool Commands_Handler::CommandSetEnableFans(void){
     388:	b510      	push	{r4, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     38a:	68c3      	ldr	r3, [r0, #12]
     38c:	6819      	ldr	r1, [r3, #0]
     38e:	6041      	str	r1, [r0, #4]
     390:	8899      	ldrh	r1, [r3, #4]
     392:	799b      	ldrb	r3, [r3, #6]
     394:	8101      	strh	r1, [r0, #8]
     396:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandSetEnableFans);
     398:	7a43      	ldrb	r3, [r0, #9]
     39a:	2b4b      	cmp	r3, #75	; 0x4b
     39c:	bf0c      	ite	eq
     39e:	2401      	moveq	r4, #1
     3a0:	2400      	movne	r4, #0
	if (result){
     3a2:	d001      	beq.n	3a8 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x20>
}
     3a4:	4620      	mov	r0, r4
     3a6:	bd10      	pop	{r4, pc}
		SetEnableCondesator(data);
     3a8:	7a81      	ldrb	r1, [r0, #10]
     3aa:	4b01      	ldr	r3, [pc, #4]	; (3b0 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x28>)
     3ac:	4798      	blx	r3
     3ae:	e7f9      	b.n	3a4 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x1c>
     3b0:	00000359 	.word	0x00000359

000003b4 <_ZN16Commands_Handler17CommandSetPWMFansEv>:

bool Commands_Handler::CommandSetPWMFans(void){
     3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	uint8_t		*data=data_fans_array;
	
	
	//memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
	memcpy(&message64,usbMessageBuffer,64);
     3b6:	68c3      	ldr	r3, [r0, #12]
     3b8:	f100 0210 	add.w	r2, r0, #16
     3bc:	f103 0140 	add.w	r1, r3, #64	; 0x40
     3c0:	681f      	ldr	r7, [r3, #0]
     3c2:	685e      	ldr	r6, [r3, #4]
     3c4:	689d      	ldr	r5, [r3, #8]
     3c6:	68dc      	ldr	r4, [r3, #12]
     3c8:	6017      	str	r7, [r2, #0]
     3ca:	6056      	str	r6, [r2, #4]
     3cc:	6095      	str	r5, [r2, #8]
     3ce:	60d4      	str	r4, [r2, #12]
     3d0:	3310      	adds	r3, #16
     3d2:	3210      	adds	r2, #16
     3d4:	428b      	cmp	r3, r1
     3d6:	d1f3      	bne.n	3c0 <_ZN16Commands_Handler17CommandSetPWMFansEv+0xc>
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task ==	kHVACCommandSetPWMFans);
     3d8:	7d43      	ldrb	r3, [r0, #21]
     3da:	2b4c      	cmp	r3, #76	; 0x4c
     3dc:	bf0c      	ite	eq
     3de:	2501      	moveq	r5, #1
     3e0:	2500      	movne	r5, #0
	if (result){
     3e2:	d112      	bne.n	40a <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
     3e4:	4604      	mov	r4, r0
		data=message64.content;
		if (data[0]>0)
     3e6:	7d81      	ldrb	r1, [r0, #22]
     3e8:	b119      	cbz	r1, 3f2 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x3e>
		{
			fans.evaporator[0]->SetPWM(data[0]);
     3ea:	4b09      	ldr	r3, [pc, #36]	; (410 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     3ec:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     3ee:	4b09      	ldr	r3, [pc, #36]	; (414 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     3f0:	4798      	blx	r3
			
		}

		if (data[1]>0){
     3f2:	7de1      	ldrb	r1, [r4, #23]
     3f4:	b119      	cbz	r1, 3fe <_ZN16Commands_Handler17CommandSetPWMFansEv+0x4a>
			fans.evaporator[1]->SetPWM(data[1]);
     3f6:	4b06      	ldr	r3, [pc, #24]	; (410 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     3f8:	6e18      	ldr	r0, [r3, #96]	; 0x60
     3fa:	4b06      	ldr	r3, [pc, #24]	; (414 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     3fc:	4798      	blx	r3
		}
		if (data[2]>0){
     3fe:	7e21      	ldrb	r1, [r4, #24]
     400:	b119      	cbz	r1, 40a <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
			fans.condesator->SetPWM(data[2]);
     402:	4b03      	ldr	r3, [pc, #12]	; (410 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     404:	6e58      	ldr	r0, [r3, #100]	; 0x64
     406:	4b04      	ldr	r3, [pc, #16]	; (418 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x64>)
     408:	4798      	blx	r3
		

	}
	
	return result;
}
     40a:	4628      	mov	r0, r5
     40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     40e:	bf00      	nop
     410:	200019cc 	.word	0x200019cc
     414:	0000f189 	.word	0x0000f189
     418:	0000ee0d 	.word	0x0000ee0d

0000041c <_ZN16Commands_Handler22CommandSetFlapperValveEv>:
	}
	
	return result;
}

bool  Commands_Handler::CommandSetFlapperValve(void){
     41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     41e:	68c3      	ldr	r3, [r0, #12]
     420:	f100 0210 	add.w	r2, r0, #16
     424:	f103 0140 	add.w	r1, r3, #64	; 0x40
     428:	681f      	ldr	r7, [r3, #0]
     42a:	685e      	ldr	r6, [r3, #4]
     42c:	689d      	ldr	r5, [r3, #8]
     42e:	68dc      	ldr	r4, [r3, #12]
     430:	6017      	str	r7, [r2, #0]
     432:	6056      	str	r6, [r2, #4]
     434:	6095      	str	r5, [r2, #8]
     436:	60d4      	str	r4, [r2, #12]
     438:	3310      	adds	r3, #16
     43a:	3210      	adds	r2, #16
     43c:	428b      	cmp	r3, r1
     43e:	d1f3      	bne.n	428 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0xc>
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task == kHVACCommandFlapperValve);
     440:	7d43      	ldrb	r3, [r0, #21]
     442:	2b4f      	cmp	r3, #79	; 0x4f
     444:	bf0c      	ite	eq
     446:	2501      	moveq	r5, #1
     448:	2500      	movne	r5, #0
	if (result){
     44a:	d114      	bne.n	476 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x5a>
     44c:	4604      	mov	r4, r0
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
		{
			data=message64.content[i];
			if ((data&(0x01))>0)
     44e:	7d83      	ldrb	r3, [r0, #22]
     450:	f013 0f01 	tst.w	r3, #1
				fv.fvx[i]->StartControlling() ;
			}
			else
			{
				//fvc.fv->SetEnable(false);
				fv.fvx[i]->StopControlling();
     454:	4b09      	ldr	r3, [pc, #36]	; (47c <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x60>)
     456:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
     45a:	bf0c      	ite	eq
     45c:	4b08      	ldreq	r3, [pc, #32]	; (480 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x64>)
				fv.fvx[i]->StartControlling() ;
     45e:	4b09      	ldrne	r3, [pc, #36]	; (484 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x68>)
     460:	4798      	blx	r3
			if ((data&(0x01))>0)
     462:	7de3      	ldrb	r3, [r4, #23]
     464:	f013 0f01 	tst.w	r3, #1
				fv.fvx[i]->StartControlling() ;
     468:	4b04      	ldr	r3, [pc, #16]	; (47c <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x60>)
     46a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
     46e:	bf14      	ite	ne
     470:	4b04      	ldrne	r3, [pc, #16]	; (484 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x68>)
				fv.fvx[i]->StopControlling();
     472:	4b03      	ldreq	r3, [pc, #12]	; (480 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x64>)
     474:	4798      	blx	r3
	}else{

	}
	
	return result;
}
     476:	4628      	mov	r0, r5
     478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     47a:	bf00      	nop
     47c:	20001c04 	.word	0x20001c04
     480:	0001022d 	.word	0x0001022d
     484:	00010411 	.word	0x00010411

00000488 <_ZN16Commands_Handler25CommandSetFlapperPositionEv>:

bool  Commands_Handler::CommandSetFlapperPosition(void){
     488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     48a:	68c3      	ldr	r3, [r0, #12]
     48c:	f100 0210 	add.w	r2, r0, #16
     490:	f103 0140 	add.w	r1, r3, #64	; 0x40
     494:	681f      	ldr	r7, [r3, #0]
     496:	685e      	ldr	r6, [r3, #4]
     498:	689d      	ldr	r5, [r3, #8]
     49a:	68dc      	ldr	r4, [r3, #12]
     49c:	6017      	str	r7, [r2, #0]
     49e:	6056      	str	r6, [r2, #4]
     4a0:	6095      	str	r5, [r2, #8]
     4a2:	60d4      	str	r4, [r2, #12]
     4a4:	3310      	adds	r3, #16
     4a6:	3210      	adds	r2, #16
     4a8:	428b      	cmp	r3, r1
     4aa:	d1f3      	bne.n	494 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0xc>
	

	bool	result(message64.header.task == kHVACWriteSetpointFlapperValve);
     4ac:	7d43      	ldrb	r3, [r0, #21]
     4ae:	2b50      	cmp	r3, #80	; 0x50
     4b0:	bf0c      	ite	eq
     4b2:	2501      	moveq	r5, #1
     4b4:	2500      	movne	r5, #0
	if (result){
     4b6:	d117      	bne.n	4e8 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x60>
     4b8:	4604      	mov	r4, r0
		for ( int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
		{
			data=message64.content[i];

			if (fv.fvx[i]->controllerEnabled)
     4ba:	4b10      	ldr	r3, [pc, #64]	; (4fc <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x74>)
     4bc:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
     4c0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
     4c4:	b993      	cbnz	r3, 4ec <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x64>
			{
				fv.fvx[i]->StartControlling(data);
			}
			
			
			fv.fvx[i]->doPeriodicTask=false;
     4c6:	4b0d      	ldr	r3, [pc, #52]	; (4fc <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x74>)
     4c8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
     4cc:	2100      	movs	r1, #0
     4ce:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
			if (fv.fvx[i]->controllerEnabled)
     4d2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
     4d6:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
     4da:	b95b      	cbnz	r3, 4f4 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x6c>
			fv.fvx[i]->doPeriodicTask=false;
     4dc:	4b07      	ldr	r3, [pc, #28]	; (4fc <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x74>)
     4de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
     4e2:	2200      	movs	r2, #0
     4e4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	}else{

	}
	
	return result;
}
     4e8:	4628      	mov	r0, r5
     4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fv.fvx[i]->StartControlling(data);
     4ec:	7da1      	ldrb	r1, [r4, #22]
     4ee:	4b04      	ldr	r3, [pc, #16]	; (500 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x78>)
     4f0:	4798      	blx	r3
     4f2:	e7e8      	b.n	4c6 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x3e>
     4f4:	7de1      	ldrb	r1, [r4, #23]
     4f6:	4b02      	ldr	r3, [pc, #8]	; (500 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x78>)
     4f8:	4798      	blx	r3
     4fa:	e7ef      	b.n	4dc <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x54>
     4fc:	20001c04 	.word	0x20001c04
     500:	00010271 	.word	0x00010271

00000504 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev>:

		
	}
	
	return result;
     504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     508:	4c26      	ldr	r4, [pc, #152]	; (5a4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xa0>)
     50a:	4927      	ldr	r1, [pc, #156]	; (5a8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xa4>)
     50c:	4620      	mov	r0, r4
     50e:	4e27      	ldr	r6, [pc, #156]	; (5ac <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xa8>)
     510:	47b0      	blx	r6
     512:	4f27      	ldr	r7, [pc, #156]	; (5b0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xac>)
     514:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 5d4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xd0>
     518:	463a      	mov	r2, r7
     51a:	4641      	mov	r1, r8
     51c:	4620      	mov	r0, r4
     51e:	4d25      	ldr	r5, [pc, #148]	; (5b4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb0>)
     520:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     522:	f104 0920 	add.w	r9, r4, #32
     526:	4924      	ldr	r1, [pc, #144]	; (5b8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb4>)
     528:	4648      	mov	r0, r9
     52a:	47b0      	blx	r6
     52c:	463a      	mov	r2, r7
     52e:	4641      	mov	r1, r8
     530:	4648      	mov	r0, r9
     532:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     534:	f104 0940 	add.w	r9, r4, #64	; 0x40
     538:	4920      	ldr	r1, [pc, #128]	; (5bc <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb8>)
     53a:	4648      	mov	r0, r9
     53c:	47b0      	blx	r6
     53e:	463a      	mov	r2, r7
     540:	4641      	mov	r1, r8
     542:	4648      	mov	r0, r9
     544:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     546:	f104 0960 	add.w	r9, r4, #96	; 0x60
     54a:	491d      	ldr	r1, [pc, #116]	; (5c0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xbc>)
     54c:	4648      	mov	r0, r9
     54e:	47b0      	blx	r6
     550:	463a      	mov	r2, r7
     552:	4641      	mov	r1, r8
     554:	4648      	mov	r0, r9
     556:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     558:	f104 0980 	add.w	r9, r4, #128	; 0x80
     55c:	4919      	ldr	r1, [pc, #100]	; (5c4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc0>)
     55e:	4648      	mov	r0, r9
     560:	47b0      	blx	r6
     562:	463a      	mov	r2, r7
     564:	4641      	mov	r1, r8
     566:	4648      	mov	r0, r9
     568:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     56a:	f104 09a0 	add.w	r9, r4, #160	; 0xa0
     56e:	4916      	ldr	r1, [pc, #88]	; (5c8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc4>)
     570:	4648      	mov	r0, r9
     572:	47b0      	blx	r6
     574:	463a      	mov	r2, r7
     576:	4641      	mov	r1, r8
     578:	4648      	mov	r0, r9
     57a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     57c:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
     580:	4912      	ldr	r1, [pc, #72]	; (5cc <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc8>)
     582:	4648      	mov	r0, r9
     584:	47b0      	blx	r6
     586:	463a      	mov	r2, r7
     588:	4641      	mov	r1, r8
     58a:	4648      	mov	r0, r9
     58c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     58e:	34e0      	adds	r4, #224	; 0xe0
     590:	490f      	ldr	r1, [pc, #60]	; (5d0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xcc>)
     592:	4620      	mov	r0, r4
     594:	47b0      	blx	r6
     596:	463a      	mov	r2, r7
     598:	4641      	mov	r1, r8
     59a:	4620      	mov	r0, r4
     59c:	47a8      	blx	r5
     59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     5a2:	bf00      	nop
     5a4:	20000658 	.word	0x20000658
     5a8:	20009dc0 	.word	0x20009dc0
     5ac:	0000dd75 	.word	0x0000dd75
     5b0:	20000000 	.word	0x20000000
     5b4:	000134a5 	.word	0x000134a5
     5b8:	20009e54 	.word	0x20009e54
     5bc:	20009f78 	.word	0x20009f78
     5c0:	20009e74 	.word	0x20009e74
     5c4:	20009f38 	.word	0x20009f38
     5c8:	20009f58 	.word	0x20009f58
     5cc:	20009e30 	.word	0x20009e30
     5d0:	20009ed0 	.word	0x20009ed0
     5d4:	0000ddad 	.word	0x0000ddad

000005d8 <_ZN16Commands_Handler17CommandFansStatusEv>:
bool Commands_Handler::CommandFansStatus(){
     5d8:	b530      	push	{r4, r5, lr}
     5da:	b083      	sub	sp, #12
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     5dc:	68c3      	ldr	r3, [r0, #12]
     5de:	6819      	ldr	r1, [r3, #0]
     5e0:	6041      	str	r1, [r0, #4]
     5e2:	8899      	ldrh	r1, [r3, #4]
     5e4:	799b      	ldrb	r3, [r3, #6]
     5e6:	8101      	strh	r1, [r0, #8]
     5e8:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandRedStatusFans);
     5ea:	7a43      	ldrb	r3, [r0, #9]
     5ec:	2b51      	cmp	r3, #81	; 0x51
     5ee:	bf0c      	ite	eq
     5f0:	2501      	moveq	r5, #1
     5f2:	2500      	movne	r5, #0
	if (result){
     5f4:	d002      	beq.n	5fc <_ZN16Commands_Handler17CommandFansStatusEv+0x24>
}
     5f6:	4628      	mov	r0, r5
     5f8:	b003      	add	sp, #12
     5fa:	bd30      	pop	{r4, r5, pc}
     5fc:	4604      	mov	r4, r0
		fans.GetGPIOSValues(gpios);
     5fe:	4669      	mov	r1, sp
     600:	4808      	ldr	r0, [pc, #32]	; (624 <_ZN16Commands_Handler17CommandFansStatusEv+0x4c>)
     602:	4b09      	ldr	r3, [pc, #36]	; (628 <_ZN16Commands_Handler17CommandFansStatusEv+0x50>)
     604:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,gpios);
     606:	6823      	ldr	r3, [r4, #0]
     608:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     60c:	466a      	mov	r2, sp
     60e:	68e1      	ldr	r1, [r4, #12]
     610:	4420      	add	r0, r4
     612:	4b06      	ldr	r3, [pc, #24]	; (62c <_ZN16Commands_Handler17CommandFansStatusEv+0x54>)
     614:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     616:	2240      	movs	r2, #64	; 0x40
     618:	68e1      	ldr	r1, [r4, #12]
     61a:	4805      	ldr	r0, [pc, #20]	; (630 <_ZN16Commands_Handler17CommandFansStatusEv+0x58>)
     61c:	4b05      	ldr	r3, [pc, #20]	; (634 <_ZN16Commands_Handler17CommandFansStatusEv+0x5c>)
     61e:	4798      	blx	r3
     620:	e7e9      	b.n	5f6 <_ZN16Commands_Handler17CommandFansStatusEv+0x1e>
     622:	bf00      	nop
     624:	200019cc 	.word	0x200019cc
     628:	0000f001 	.word	0x0000f001
     62c:	00000a0d 	.word	0x00000a0d
     630:	20001704 	.word	0x20001704
     634:	0000e759 	.word	0x0000e759

00000638 <_ZN16Commands_Handler22CommandReadFlapperDataEv>:
bool Commands_Handler::CommandReadFlapperData(void){
     638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     63c:	b08a      	sub	sp, #40	; 0x28
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     63e:	68c3      	ldr	r3, [r0, #12]
     640:	6819      	ldr	r1, [r3, #0]
     642:	6041      	str	r1, [r0, #4]
     644:	8899      	ldrh	r1, [r3, #4]
     646:	799b      	ldrb	r3, [r3, #6]
     648:	8101      	strh	r1, [r0, #8]
     64a:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACReadPositionFlapperValve);
     64c:	7a43      	ldrb	r3, [r0, #9]
     64e:	2b4e      	cmp	r3, #78	; 0x4e
     650:	bf0c      	ite	eq
     652:	f04f 0901 	moveq.w	r9, #1
     656:	f04f 0900 	movne.w	r9, #0
	if (result){
     65a:	d003      	beq.n	664 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x2c>
     65c:	4648      	mov	r0, r9
     65e:	b00a      	add	sp, #40	; 0x28
     660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     664:	4605      	mov	r5, r0
     666:	f8df 8058 	ldr.w	r8, [pc, #88]	; 6c0 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x88>
	if (result){
     66a:	2600      	movs	r6, #0
				fv.fvx[i]->UpdateFlapperValveData();	
     66c:	f8df a054 	ldr.w	sl, [pc, #84]	; 6c4 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x8c>
     670:	4644      	mov	r4, r8
     672:	f858 0b04 	ldr.w	r0, [r8], #4
     676:	47d0      	blx	sl
				fvds[i]= fv.fvx[i]->dataStruct;
     678:	6824      	ldr	r4, [r4, #0]
     67a:	eb0d 0706 	add.w	r7, sp, r6
     67e:	3480      	adds	r4, #128	; 0x80
     680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     682:	f84d 0006 	str.w	r0, [sp, r6]
     686:	6079      	str	r1, [r7, #4]
     688:	60ba      	str	r2, [r7, #8]
     68a:	60fb      	str	r3, [r7, #12]
     68c:	6820      	ldr	r0, [r4, #0]
     68e:	6138      	str	r0, [r7, #16]
     690:	3614      	adds	r6, #20
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     692:	2e28      	cmp	r6, #40	; 0x28
     694:	d1ec      	bne.n	670 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x38>
		CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&fvds[0]);
     696:	682b      	ldr	r3, [r5, #0]
     698:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     69c:	466a      	mov	r2, sp
     69e:	68e9      	ldr	r1, [r5, #12]
     6a0:	4428      	add	r0, r5
     6a2:	4b04      	ldr	r3, [pc, #16]	; (6b4 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x7c>)
     6a4:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     6a6:	2240      	movs	r2, #64	; 0x40
     6a8:	68e9      	ldr	r1, [r5, #12]
     6aa:	4803      	ldr	r0, [pc, #12]	; (6b8 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x80>)
     6ac:	4b03      	ldr	r3, [pc, #12]	; (6bc <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x84>)
     6ae:	4798      	blx	r3
     6b0:	e7d4      	b.n	65c <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x24>
     6b2:	bf00      	nop
     6b4:	00000a0d 	.word	0x00000a0d
     6b8:	20001704 	.word	0x20001704
     6bc:	0000e759 	.word	0x0000e759
     6c0:	20001ce0 	.word	0x20001ce0
     6c4:	0001046d 	.word	0x0001046d

000006c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     6c8:	e7fe      	b.n	6c8 <Dummy_Handler>
	...

000006cc <Reset_Handler>:
{
     6cc:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     6ce:	4b17      	ldr	r3, [pc, #92]	; (72c <Reset_Handler+0x60>)
     6d0:	4a17      	ldr	r2, [pc, #92]	; (730 <Reset_Handler+0x64>)
     6d2:	429a      	cmp	r2, r3
     6d4:	d010      	beq.n	6f8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     6d6:	4b17      	ldr	r3, [pc, #92]	; (734 <Reset_Handler+0x68>)
     6d8:	4a14      	ldr	r2, [pc, #80]	; (72c <Reset_Handler+0x60>)
     6da:	429a      	cmp	r2, r3
     6dc:	d20c      	bcs.n	6f8 <Reset_Handler+0x2c>
     6de:	3b01      	subs	r3, #1
     6e0:	1a9b      	subs	r3, r3, r2
     6e2:	f023 0303 	bic.w	r3, r3, #3
     6e6:	3304      	adds	r3, #4
     6e8:	4413      	add	r3, r2
     6ea:	4911      	ldr	r1, [pc, #68]	; (730 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     6ec:	f851 0b04 	ldr.w	r0, [r1], #4
     6f0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     6f4:	429a      	cmp	r2, r3
     6f6:	d1f9      	bne.n	6ec <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     6f8:	4b0f      	ldr	r3, [pc, #60]	; (738 <Reset_Handler+0x6c>)
     6fa:	4a10      	ldr	r2, [pc, #64]	; (73c <Reset_Handler+0x70>)
     6fc:	429a      	cmp	r2, r3
     6fe:	d20a      	bcs.n	716 <Reset_Handler+0x4a>
     700:	3b01      	subs	r3, #1
     702:	1a9b      	subs	r3, r3, r2
     704:	f023 0303 	bic.w	r3, r3, #3
     708:	3304      	adds	r3, #4
     70a:	4413      	add	r3, r2
                *pDest++ = 0;
     70c:	2100      	movs	r1, #0
     70e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     712:	4293      	cmp	r3, r2
     714:	d1fb      	bne.n	70e <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     716:	4a0a      	ldr	r2, [pc, #40]	; (740 <Reset_Handler+0x74>)
     718:	4b0a      	ldr	r3, [pc, #40]	; (744 <Reset_Handler+0x78>)
     71a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     71e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     720:	4b09      	ldr	r3, [pc, #36]	; (748 <Reset_Handler+0x7c>)
     722:	4798      	blx	r3
        main();
     724:	4b09      	ldr	r3, [pc, #36]	; (74c <Reset_Handler+0x80>)
     726:	4798      	blx	r3
     728:	e7fe      	b.n	728 <Reset_Handler+0x5c>
     72a:	bf00      	nop
     72c:	20000000 	.word	0x20000000
     730:	000143a8 	.word	0x000143a8
     734:	2000063c 	.word	0x2000063c
     738:	2000a078 	.word	0x2000a078
     73c:	2000063c 	.word	0x2000063c
     740:	e000ed00 	.word	0xe000ed00
     744:	00000000 	.word	0x00000000
     748:	000139d5 	.word	0x000139d5
     74c:	00000751 	.word	0x00000751

00000750 <main>:




int main(void)		
{
     750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool gotNewTemperature=false;
	atmel_start_init();
     754:	4b4c      	ldr	r3, [pc, #304]	; (888 <main+0x138>)
     756:	4798      	blx	r3
	usb.Init();
     758:	484c      	ldr	r0, [pc, #304]	; (88c <main+0x13c>)
     75a:	4b4d      	ldr	r3, [pc, #308]	; (890 <main+0x140>)
     75c:	4798      	blx	r3
	//StartLivePulse();
	delay_ms(200);
     75e:	20c8      	movs	r0, #200	; 0xc8
     760:	4b4c      	ldr	r3, [pc, #304]	; (894 <main+0x144>)
     762:	4798      	blx	r3
	memory.Init();
     764:	4c4c      	ldr	r4, [pc, #304]	; (898 <main+0x148>)
     766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     76a:	4620      	mov	r0, r4
     76c:	4b4b      	ldr	r3, [pc, #300]	; (89c <main+0x14c>)
     76e:	4798      	blx	r3
	memory.WriteDefaultParameters();
     770:	4620      	mov	r0, r4
     772:	4b4b      	ldr	r3, [pc, #300]	; (8a0 <main+0x150>)
     774:	4798      	blx	r3
	bool isOK=temperatures.Init();
     776:	484b      	ldr	r0, [pc, #300]	; (8a4 <main+0x154>)
     778:	4b4b      	ldr	r3, [pc, #300]	; (8a8 <main+0x158>)
     77a:	4798      	blx	r3
	if (isOK)
     77c:	b110      	cbz	r0, 784 <main+0x34>
	{
		temperatures.StartOneConversion();
     77e:	4849      	ldr	r0, [pc, #292]	; (8a4 <main+0x154>)
     780:	4b4a      	ldr	r3, [pc, #296]	; (8ac <main+0x15c>)
     782:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     784:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     788:	4b49      	ldr	r3, [pc, #292]	; (8b0 <main+0x160>)
     78a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	gpio_set_pin_level(LED0,true);
	while (!fv.Init())
     78e:	4e49      	ldr	r6, [pc, #292]	; (8b4 <main+0x164>)
     790:	4d49      	ldr	r5, [pc, #292]	; (8b8 <main+0x168>)
	{
		delay_ms(200);
     792:	4c40      	ldr	r4, [pc, #256]	; (894 <main+0x144>)
	while (!fv.Init())
     794:	4630      	mov	r0, r6
     796:	47a8      	blx	r5
     798:	b938      	cbnz	r0, 7aa <main+0x5a>
		delay_ms(200);
     79a:	20c8      	movs	r0, #200	; 0xc8
     79c:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     79e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     7a2:	4b43      	ldr	r3, [pc, #268]	; (8b0 <main+0x160>)
     7a4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     7a8:	e7f4      	b.n	794 <main+0x44>
		gpio_toggle_pin_level(LED0);
	}
	while(!fans.Init()){
     7aa:	4e44      	ldr	r6, [pc, #272]	; (8bc <main+0x16c>)
     7ac:	4d44      	ldr	r5, [pc, #272]	; (8c0 <main+0x170>)
		delay_ms(200);
     7ae:	4c39      	ldr	r4, [pc, #228]	; (894 <main+0x144>)
	while(!fans.Init()){
     7b0:	4630      	mov	r0, r6
     7b2:	47a8      	blx	r5
     7b4:	b938      	cbnz	r0, 7c6 <main+0x76>
		delay_ms(200);
     7b6:	20c8      	movs	r0, #200	; 0xc8
     7b8:	47a0      	blx	r4
     7ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     7be:	4b3c      	ldr	r3, [pc, #240]	; (8b0 <main+0x160>)
     7c0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     7c4:	e7f4      	b.n	7b0 <main+0x60>
		gpio_toggle_pin_level(LED0);
		
	}
	fans.condesator->SetEnable(false);
     7c6:	4c3d      	ldr	r4, [pc, #244]	; (8bc <main+0x16c>)
     7c8:	2100      	movs	r1, #0
     7ca:	6e60      	ldr	r0, [r4, #100]	; 0x64
     7cc:	4b3d      	ldr	r3, [pc, #244]	; (8c4 <main+0x174>)
     7ce:	4798      	blx	r3
	fans.evaporator[0]->SetEnable(false);
     7d0:	2100      	movs	r1, #0
     7d2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     7d4:	4d3c      	ldr	r5, [pc, #240]	; (8c8 <main+0x178>)
     7d6:	47a8      	blx	r5
	fans.evaporator[1]->SetEnable(false);
     7d8:	2100      	movs	r1, #0
     7da:	6e20      	ldr	r0, [r4, #96]	; 0x60
     7dc:	47a8      	blx	r5
// 	heater.DisableIndex(3);

	//hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareIsAlive),2500);
	uint8_t localSetpoint=210;
	uint8_t localPosition;
 	fv.fv1->StartControlling(220);
     7de:	4d35      	ldr	r5, [pc, #212]	; (8b4 <main+0x164>)
     7e0:	21dc      	movs	r1, #220	; 0xdc
     7e2:	f8d5 00d4 	ldr.w	r0, [r5, #212]	; 0xd4
     7e6:	4c39      	ldr	r4, [pc, #228]	; (8cc <main+0x17c>)
     7e8:	47a0      	blx	r4

 	fv.fv2->StartControlling(220);
     7ea:	21dc      	movs	r1, #220	; 0xdc
     7ec:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
     7f0:	47a0      	blx	r4
	
	toolApp.Init();
     7f2:	4837      	ldr	r0, [pc, #220]	; (8d0 <main+0x180>)
     7f4:	4b37      	ldr	r3, [pc, #220]	; (8d4 <main+0x184>)
     7f6:	4798      	blx	r3



	while (1)
	{
		if (toolApp.IsAppConnected())
     7f8:	4e35      	ldr	r6, [pc, #212]	; (8d0 <main+0x180>)
			toolApp.handleCommunication();			
			
		}
		else
		{
			toolApp.setConnected(false);
     7fa:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8f0 <main+0x1a0>
     7fe:	e03c      	b.n	87a <main+0x12a>
     800:	2100      	movs	r1, #0
     802:	4630      	mov	r0, r6
     804:	47c0      	blx	r8
     806:	e01d      	b.n	844 <main+0xf4>
		}
	//	delay_ms(10);
		
		while ((!fv.fv1->gotSetpoint)|(!fv.fv2->gotSetpoint))
		{
			fv.fv1->Control_NBC_StandAlone_Reset();
     808:	4d33      	ldr	r5, [pc, #204]	; (8d8 <main+0x188>)
			fv.fv2->Control_NBC_StandAlone_Reset();
     80a:	4c2a      	ldr	r4, [pc, #168]	; (8b4 <main+0x164>)
			fv.fv1->Control_NBC_StandAlone_Reset();
     80c:	47a8      	blx	r5
			fv.fv2->Control_NBC_StandAlone_Reset();
     80e:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
     812:	47a8      	blx	r5
		while ((!fv.fv1->gotSetpoint)|(!fv.fv2->gotSetpoint))
     814:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
     818:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
     81c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
     820:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
     824:	b2db      	uxtb	r3, r3
     826:	2a00      	cmp	r2, #0
     828:	d0f0      	beq.n	80c <main+0xbc>
     82a:	2b00      	cmp	r3, #0
     82c:	d0ee      	beq.n	80c <main+0xbc>
		}
		if (temperatures.IsConversionFinished())
     82e:	481d      	ldr	r0, [pc, #116]	; (8a4 <main+0x154>)
     830:	4b2a      	ldr	r3, [pc, #168]	; (8dc <main+0x18c>)
     832:	4798      	blx	r3
     834:	b9a8      	cbnz	r0, 862 <main+0x112>
		if (toolApp.IsAppConnected())
     836:	4630      	mov	r0, r6
     838:	47b8      	blx	r7
     83a:	2800      	cmp	r0, #0
     83c:	d0e0      	beq.n	800 <main+0xb0>
			toolApp.handleCommunication();			
     83e:	4630      	mov	r0, r6
     840:	4b27      	ldr	r3, [pc, #156]	; (8e0 <main+0x190>)
     842:	4798      	blx	r3
		while ((!fv.fv1->gotSetpoint)|(!fv.fv2->gotSetpoint))
     844:	4b1b      	ldr	r3, [pc, #108]	; (8b4 <main+0x164>)
     846:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
     84a:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
     84e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
     852:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
     856:	b2db      	uxtb	r3, r3
     858:	2a00      	cmp	r2, #0
     85a:	d0d5      	beq.n	808 <main+0xb8>
     85c:	2b00      	cmp	r3, #0
     85e:	d0d3      	beq.n	808 <main+0xb8>
     860:	e7e5      	b.n	82e <main+0xde>
		{
			
			temperatures.GetConversionResult();
     862:	4c10      	ldr	r4, [pc, #64]	; (8a4 <main+0x154>)
     864:	4620      	mov	r0, r4
     866:	4b1f      	ldr	r3, [pc, #124]	; (8e4 <main+0x194>)
     868:	4798      	blx	r3
			if (temperatures.faultData==VALID_TEMPERATURE)
     86a:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
     86e:	2b01      	cmp	r3, #1
     870:	d005      	beq.n	87e <main+0x12e>
					gotNewTemperature=true;
					
				}
				
			}
			temperatures.StartOneConversion();
     872:	480c      	ldr	r0, [pc, #48]	; (8a4 <main+0x154>)
     874:	4b0d      	ldr	r3, [pc, #52]	; (8ac <main+0x15c>)
     876:	4798      	blx	r3
			asm("nop");
     878:	bf00      	nop
		if (toolApp.IsAppConnected())
     87a:	4f1b      	ldr	r7, [pc, #108]	; (8e8 <main+0x198>)
     87c:	e7db      	b.n	836 <main+0xe6>
				currentTemperature=temperatures.lastValue;
     87e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
     882:	4b1a      	ldr	r3, [pc, #104]	; (8ec <main+0x19c>)
     884:	601a      	str	r2, [r3, #0]
     886:	e7f4      	b.n	872 <main+0x122>
     888:	000012b5 	.word	0x000012b5
     88c:	20001704 	.word	0x20001704
     890:	0000e489 	.word	0x0000e489
     894:	00002a81 	.word	0x00002a81
     898:	20003348 	.word	0x20003348
     89c:	000112e1 	.word	0x000112e1
     8a0:	00011229 	.word	0x00011229
     8a4:	2000981c 	.word	0x2000981c
     8a8:	0001159d 	.word	0x0001159d
     8ac:	00011625 	.word	0x00011625
     8b0:	41008000 	.word	0x41008000
     8b4:	20001c04 	.word	0x20001c04
     8b8:	0000f295 	.word	0x0000f295
     8bc:	200019cc 	.word	0x200019cc
     8c0:	0000ef89 	.word	0x0000ef89
     8c4:	0000edf5 	.word	0x0000edf5
     8c8:	0000f165 	.word	0x0000f165
     8cc:	00010271 	.word	0x00010271
     8d0:	200009d8 	.word	0x200009d8
     8d4:	00000d35 	.word	0x00000d35
     8d8:	0000f965 	.word	0x0000f965
     8dc:	00011701 	.word	0x00011701
     8e0:	000011d5 	.word	0x000011d5
     8e4:	0001166d 	.word	0x0001166d
     8e8:	00000b59 	.word	0x00000b59
     8ec:	20000758 	.word	0x20000758
     8f0:	00000b29 	.word	0x00000b29

000008f4 <_GLOBAL__sub_I_localtimeout>:
// 		delay_ms(500	
//		}
	}

	
}
     8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     8f8:	4c2c      	ldr	r4, [pc, #176]	; (9ac <_GLOBAL__sub_I_localtimeout+0xb8>)
     8fa:	1d25      	adds	r5, r4, #4
     8fc:	492c      	ldr	r1, [pc, #176]	; (9b0 <_GLOBAL__sub_I_localtimeout+0xbc>)
     8fe:	4628      	mov	r0, r5
     900:	4f2c      	ldr	r7, [pc, #176]	; (9b4 <_GLOBAL__sub_I_localtimeout+0xc0>)
     902:	47b8      	blx	r7
     904:	4e2c      	ldr	r6, [pc, #176]	; (9b8 <_GLOBAL__sub_I_localtimeout+0xc4>)
     906:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 9e8 <_GLOBAL__sub_I_localtimeout+0xf4>
     90a:	4632      	mov	r2, r6
     90c:	4641      	mov	r1, r8
     90e:	4628      	mov	r0, r5
     910:	4d2a      	ldr	r5, [pc, #168]	; (9bc <_GLOBAL__sub_I_localtimeout+0xc8>)
     912:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     914:	f104 0924 	add.w	r9, r4, #36	; 0x24
     918:	4929      	ldr	r1, [pc, #164]	; (9c0 <_GLOBAL__sub_I_localtimeout+0xcc>)
     91a:	4648      	mov	r0, r9
     91c:	47b8      	blx	r7
     91e:	4632      	mov	r2, r6
     920:	4641      	mov	r1, r8
     922:	4648      	mov	r0, r9
     924:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     926:	f104 0944 	add.w	r9, r4, #68	; 0x44
     92a:	4926      	ldr	r1, [pc, #152]	; (9c4 <_GLOBAL__sub_I_localtimeout+0xd0>)
     92c:	4648      	mov	r0, r9
     92e:	47b8      	blx	r7
     930:	4632      	mov	r2, r6
     932:	4641      	mov	r1, r8
     934:	4648      	mov	r0, r9
     936:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     938:	f104 0964 	add.w	r9, r4, #100	; 0x64
     93c:	4922      	ldr	r1, [pc, #136]	; (9c8 <_GLOBAL__sub_I_localtimeout+0xd4>)
     93e:	4648      	mov	r0, r9
     940:	47b8      	blx	r7
     942:	4632      	mov	r2, r6
     944:	4641      	mov	r1, r8
     946:	4648      	mov	r0, r9
     948:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     94a:	f104 0984 	add.w	r9, r4, #132	; 0x84
     94e:	491f      	ldr	r1, [pc, #124]	; (9cc <_GLOBAL__sub_I_localtimeout+0xd8>)
     950:	4648      	mov	r0, r9
     952:	47b8      	blx	r7
     954:	4632      	mov	r2, r6
     956:	4641      	mov	r1, r8
     958:	4648      	mov	r0, r9
     95a:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     95c:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
     960:	491b      	ldr	r1, [pc, #108]	; (9d0 <_GLOBAL__sub_I_localtimeout+0xdc>)
     962:	4648      	mov	r0, r9
     964:	47b8      	blx	r7
     966:	4632      	mov	r2, r6
     968:	4641      	mov	r1, r8
     96a:	4648      	mov	r0, r9
     96c:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     96e:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
     972:	4918      	ldr	r1, [pc, #96]	; (9d4 <_GLOBAL__sub_I_localtimeout+0xe0>)
     974:	4648      	mov	r0, r9
     976:	47b8      	blx	r7
     978:	4632      	mov	r2, r6
     97a:	4641      	mov	r1, r8
     97c:	4648      	mov	r0, r9
     97e:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     980:	f104 09e4 	add.w	r9, r4, #228	; 0xe4
     984:	4914      	ldr	r1, [pc, #80]	; (9d8 <_GLOBAL__sub_I_localtimeout+0xe4>)
     986:	4648      	mov	r0, r9
     988:	47b8      	blx	r7
     98a:	4632      	mov	r2, r6
     98c:	4641      	mov	r1, r8
     98e:	4648      	mov	r0, r9
     990:	47a8      	blx	r5
	SingleHeater_Class( const SingleHeater_Class &c );
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     992:	f504 7482 	add.w	r4, r4, #260	; 0x104
     996:	4911      	ldr	r1, [pc, #68]	; (9dc <_GLOBAL__sub_I_localtimeout+0xe8>)
     998:	4620      	mov	r0, r4
     99a:	4b11      	ldr	r3, [pc, #68]	; (9e0 <_GLOBAL__sub_I_localtimeout+0xec>)
     99c:	4798      	blx	r3
     99e:	4632      	mov	r2, r6
     9a0:	4910      	ldr	r1, [pc, #64]	; (9e4 <_GLOBAL__sub_I_localtimeout+0xf0>)
     9a2:	4620      	mov	r0, r4
     9a4:	47a8      	blx	r5
     9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     9aa:	bf00      	nop
     9ac:	20000758 	.word	0x20000758
     9b0:	20009dc0 	.word	0x20009dc0
     9b4:	0000dd75 	.word	0x0000dd75
     9b8:	20000000 	.word	0x20000000
     9bc:	000134a5 	.word	0x000134a5
     9c0:	20009e54 	.word	0x20009e54
     9c4:	20009f78 	.word	0x20009f78
     9c8:	20009e74 	.word	0x20009e74
     9cc:	20009f38 	.word	0x20009f38
     9d0:	20009f58 	.word	0x20009f58
     9d4:	20009e30 	.word	0x20009e30
     9d8:	20009ed0 	.word	0x20009ed0
     9dc:	20009ef0 	.word	0x20009ef0
     9e0:	0000dc19 	.word	0x0000dc19
     9e4:	0000dc35 	.word	0x0000dc35
     9e8:	0000ddad 	.word	0x0000ddad

000009ec <_ZN22MaintenanceDataHandlerC1Ev>:
     9ec:	2264      	movs	r2, #100	; 0x64
     9ee:	7002      	strb	r2, [r0, #0]
     9f0:	2263      	movs	r2, #99	; 0x63
     9f2:	7042      	strb	r2, [r0, #1]
     9f4:	2262      	movs	r2, #98	; 0x62
     9f6:	7082      	strb	r2, [r0, #2]
     9f8:	2261      	movs	r2, #97	; 0x61
     9fa:	70c2      	strb	r2, [r0, #3]
     9fc:	2200      	movs	r2, #0
     9fe:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
     a00:	223a      	movs	r2, #58	; 0x3a
     a02:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
     a06:	4770      	bx	lr

00000a08 <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
     a08:	4770      	bx	lr
	...

00000a0c <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
     a0c:	b570      	push	{r4, r5, r6, lr}
     a0e:	4605      	mov	r5, r0
     a10:	460c      	mov	r4, r1
     a12:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
     a14:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
     a18:	3006      	adds	r0, #6
     a1a:	4b09      	ldr	r3, [pc, #36]	; (a40 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
     a1c:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
     a1e:	462b      	mov	r3, r5
     a20:	4621      	mov	r1, r4
     a22:	3540      	adds	r5, #64	; 0x40
     a24:	681e      	ldr	r6, [r3, #0]
     a26:	685c      	ldr	r4, [r3, #4]
     a28:	6898      	ldr	r0, [r3, #8]
     a2a:	68da      	ldr	r2, [r3, #12]
     a2c:	600e      	str	r6, [r1, #0]
     a2e:	604c      	str	r4, [r1, #4]
     a30:	6088      	str	r0, [r1, #8]
     a32:	60ca      	str	r2, [r1, #12]
     a34:	3310      	adds	r3, #16
     a36:	3110      	adds	r1, #16
     a38:	42ab      	cmp	r3, r5
     a3a:	d1f3      	bne.n	a24 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
     a3c:	2000      	movs	r0, #0
     a3e:	bd70      	pop	{r4, r5, r6, pc}
     a40:	00013a25 	.word	0x00013a25

00000a44 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     a44:	4b02      	ldr	r3, [pc, #8]	; (a50 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     a46:	681a      	ldr	r2, [r3, #0]
     a48:	6d53      	ldr	r3, [r2, #84]	; 0x54
     a4a:	3301      	adds	r3, #1
     a4c:	6553      	str	r3, [r2, #84]	; 0x54
     a4e:	4770      	bx	lr
     a50:	2000087c 	.word	0x2000087c

00000a54 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     a54:	4b02      	ldr	r3, [pc, #8]	; (a60 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     a56:	681b      	ldr	r3, [r3, #0]
     a58:	2200      	movs	r2, #0
     a5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
     a5e:	4770      	bx	lr
     a60:	2000087c 	.word	0x2000087c

00000a64 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	localBuffer=staticBuffer;
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
     a64:	b538      	push	{r3, r4, r5, lr}
     a66:	4604      	mov	r4, r0
     a68:	4b0a      	ldr	r3, [pc, #40]	; (a94 <_ZN16Maintenance_ToolD1Ev+0x30>)
     a6a:	6003      	str	r3, [r0, #0]
{
	ticks=0;
     a6c:	2300      	movs	r3, #0
     a6e:	6543      	str	r3, [r0, #84]	; 0x54
	interfaceTimer.Stop();
     a70:	4d09      	ldr	r5, [pc, #36]	; (a98 <_ZN16Maintenance_ToolD1Ev+0x34>)
     a72:	4628      	mov	r0, r5
     a74:	4b09      	ldr	r3, [pc, #36]	; (a9c <_ZN16Maintenance_ToolD1Ev+0x38>)
     a76:	4798      	blx	r3
	interfaceTimer.Remove_task();
     a78:	4628      	mov	r0, r5
     a7a:	4b09      	ldr	r3, [pc, #36]	; (aa0 <_ZN16Maintenance_ToolD1Ev+0x3c>)
     a7c:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
     a7e:	4909      	ldr	r1, [pc, #36]	; (aa4 <_ZN16Maintenance_ToolD1Ev+0x40>)
     a80:	4620      	mov	r0, r4
     a82:	4b09      	ldr	r3, [pc, #36]	; (aa8 <_ZN16Maintenance_ToolD1Ev+0x44>)
     a84:	4798      	blx	r3
     a86:	f504 70a2 	add.w	r0, r4, #324	; 0x144
     a8a:	4b08      	ldr	r3, [pc, #32]	; (aac <_ZN16Maintenance_ToolD1Ev+0x48>)
     a8c:	4798      	blx	r3
	
} //~Maintenance_Tool
     a8e:	4620      	mov	r0, r4
     a90:	bd38      	pop	{r3, r4, r5, pc}
     a92:	bf00      	nop
     a94:	00013e1c 	.word	0x00013e1c
     a98:	20000880 	.word	0x20000880
     a9c:	0000ded5 	.word	0x0000ded5
     aa0:	0000df79 	.word	0x0000df79
     aa4:	00013e0c 	.word	0x00013e0c
     aa8:	000002f9 	.word	0x000002f9
     aac:	00000a09 	.word	0x00000a09

00000ab0 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
     ab0:	b538      	push	{r3, r4, r5, lr}
     ab2:	4604      	mov	r4, r0
     ab4:	f500 70a2 	add.w	r0, r0, #324	; 0x144
     ab8:	4b16      	ldr	r3, [pc, #88]	; (b14 <_ZN16Maintenance_ToolC1Ev+0x64>)
     aba:	4798      	blx	r3
     abc:	4916      	ldr	r1, [pc, #88]	; (b18 <_ZN16Maintenance_ToolC1Ev+0x68>)
     abe:	4620      	mov	r0, r4
     ac0:	4b16      	ldr	r3, [pc, #88]	; (b1c <_ZN16Maintenance_ToolC1Ev+0x6c>)
     ac2:	4798      	blx	r3
     ac4:	4b16      	ldr	r3, [pc, #88]	; (b20 <_ZN16Maintenance_ToolC1Ev+0x70>)
     ac6:	6023      	str	r3, [r4, #0]
     ac8:	2300      	movs	r3, #0
     aca:	2564      	movs	r5, #100	; 0x64
     acc:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
     ad0:	2063      	movs	r0, #99	; 0x63
     ad2:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
     ad6:	2162      	movs	r1, #98	; 0x62
     ad8:	f884 10ae 	strb.w	r1, [r4, #174]	; 0xae
     adc:	2261      	movs	r2, #97	; 0x61
     ade:	f884 20af 	strb.w	r2, [r4, #175]	; 0xaf
     ae2:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
     ae6:	f884 5136 	strb.w	r5, [r4, #310]	; 0x136
     aea:	f884 0137 	strb.w	r0, [r4, #311]	; 0x137
     aee:	f884 1138 	strb.w	r1, [r4, #312]	; 0x138
     af2:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
     af6:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	ptrMaintenanceTool=this;
     afa:	4a0a      	ldr	r2, [pc, #40]	; (b24 <_ZN16Maintenance_ToolC1Ev+0x74>)
     afc:	f842 4b24 	str.w	r4, [r2], #36
	maintenanceIsConnected = false;
     b00:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	nextMaintenanceSyncTime = 0;
     b04:	65e3      	str	r3, [r4, #92]	; 0x5c
	nextMaintenanceUsageTimerSyncTime = 0;
     b06:	6623      	str	r3, [r4, #96]	; 0x60
	ticks=0;
     b08:	6563      	str	r3, [r4, #84]	; 0x54
	localBuffer=staticBuffer;
     b0a:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
} //Maintenance_Tool
     b0e:	4620      	mov	r0, r4
     b10:	bd38      	pop	{r3, r4, r5, pc}
     b12:	bf00      	nop
     b14:	000009ed 	.word	0x000009ed
     b18:	00013e0c 	.word	0x00013e0c
     b1c:	000002d1 	.word	0x000002d1
     b20:	00013e1c 	.word	0x00013e1c
     b24:	2000087c 	.word	0x2000087c

00000b28 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     b28:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     b2a:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
		if (isConnected)
     b2e:	b919      	cbnz	r1, b38 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     b30:	4805      	ldr	r0, [pc, #20]	; (b48 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     b32:	4b06      	ldr	r3, [pc, #24]	; (b4c <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     b34:	4798      	blx	r3
     b36:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     b38:	f64e 2260 	movw	r2, #60000	; 0xea60
     b3c:	4904      	ldr	r1, [pc, #16]	; (b50 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     b3e:	4802      	ldr	r0, [pc, #8]	; (b48 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     b40:	4b04      	ldr	r3, [pc, #16]	; (b54 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     b42:	4798      	blx	r3
     b44:	bd08      	pop	{r3, pc}
     b46:	bf00      	nop
     b48:	20000880 	.word	0x20000880
     b4c:	0000ded5 	.word	0x0000ded5
     b50:	00000a55 	.word	0x00000a55
     b54:	0000dffd 	.word	0x0000dffd

00000b58 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     b58:	b510      	push	{r4, lr}
     b5a:	4604      	mov	r4, r0
	result=false;
     b5c:	2300      	movs	r3, #0
     b5e:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
	magic=0;
     b62:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
	if (gotAccess==true)
     b66:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
     b6a:	b12b      	cbz	r3, b78 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     b6c:	2301      	movs	r3, #1
     b6e:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
	return	result;
     b72:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
}
     b76:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     b78:	4b16      	ldr	r3, [pc, #88]	; (bd4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     b7a:	7d5b      	ldrb	r3, [r3, #21]
     b7c:	b1b3      	cbz	r3, bac <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
				magic|= localBuffer[i];
     b7e:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
     b82:	1e41      	subs	r1, r0, #1
     b84:	3003      	adds	r0, #3
				magic=magic<<8;
     b86:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
     b8a:	021b      	lsls	r3, r3, #8
     b8c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
				magic|= localBuffer[i];
     b90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     b94:	4313      	orrs	r3, r2
     b96:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
			for (int i = 0; i < 4; i++)
     b9a:	4281      	cmp	r1, r0
     b9c:	d1f3      	bne.n	b86 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2e>
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     b9e:	4a0e      	ldr	r2, [pc, #56]	; (bd8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
     ba0:	ea83 0102 	eor.w	r1, r3, r2
     ba4:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
			if (xorResult==0)
     ba8:	4293      	cmp	r3, r2
     baa:	d006      	beq.n	bba <_ZN16Maintenance_Tool14IsAppConnectedEv+0x62>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     bac:	2240      	movs	r2, #64	; 0x40
     bae:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
     bb2:	4808      	ldr	r0, [pc, #32]	; (bd4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     bb4:	4b09      	ldr	r3, [pc, #36]	; (bdc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
     bb6:	4798      	blx	r3
     bb8:	e7db      	b.n	b72 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     bba:	2101      	movs	r1, #1
     bbc:	f884 1111 	strb.w	r1, [r4, #273]	; 0x111
				result=true;
     bc0:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
				is_MTPC_Beaming=true;
     bc4:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
				setConnected(true);
     bc8:	4620      	mov	r0, r4
     bca:	4b05      	ldr	r3, [pc, #20]	; (be0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x88>)
     bcc:	4798      	blx	r3
				return	result;
     bce:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
     bd2:	bd10      	pop	{r4, pc}
     bd4:	20001704 	.word	0x20001704
     bd8:	61626364 	.word	0x61626364
     bdc:	0000e5d5 	.word	0x0000e5d5
     be0:	00000b29 	.word	0x00000b29

00000be4 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     be4:	b410      	push	{r4}
     be6:	4604      	mov	r4, r0
     be8:	2300      	movs	r3, #0
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     bea:	4619      	mov	r1, r3
     bec:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
     bf0:	54d1      	strb	r1, [r2, r3]
     bf2:	1c58      	adds	r0, r3, #1
     bf4:	b2c0      	uxtb	r0, r0
     bf6:	3301      	adds	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     bf8:	2b40      	cmp	r3, #64	; 0x40
     bfa:	d1f7      	bne.n	bec <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
     bfc:	bc10      	pop	{r4}
     bfe:	4770      	bx	lr

00000c00 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     c00:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
     c04:	b92b      	cbnz	r3, c12 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     c06:	65c3      	str	r3, [r0, #92]	; 0x5c
		maintenanceIsConnected = true;
     c08:	2301      	movs	r3, #1
     c0a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
		bSendNotifications = true;
     c0e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     c12:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
     c16:	4770      	bx	lr

00000c18 <_ZN16Maintenance_Tool22CommandWriteParametersEv>:
	}
	
	return result;
}

bool Maintenance_Tool::CommandWriteParameters(void)	{
     c18:	b508      	push	{r3, lr}
	uint32_t	w,r;
		int n=sizeof(HVACMessageHeader);
		HVACMessageHeader hm;
	
	bool	result(header.task == kGAINCommandWriteParameters);
	if (result){
     c1a:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
     c1e:	2b47      	cmp	r3, #71	; 0x47
     c20:	d001      	beq.n	c26 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0xe>
	bool	result(header.task == kGAINCommandWriteParameters);
     c22:	2000      	movs	r0, #0
	}else{

	}
	
	return result;
}
     c24:	bd08      	pop	{r3, pc}
		memcpy((uint8_t*)&parameters,&localBuffer[n],sizeof(UserParameters));
     c26:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
     c2a:	88db      	ldrh	r3, [r3, #6]
     c2c:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
		r=memory.SaveParameters(parameters);
     c30:	f500 718c 	add.w	r1, r0, #280	; 0x118
     c34:	4803      	ldr	r0, [pc, #12]	; (c44 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x2c>)
     c36:	4b04      	ldr	r3, [pc, #16]	; (c48 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x30>)
     c38:	4798      	blx	r3
			result=(bool)(r==0);
     c3a:	fab0 f080 	clz	r0, r0
     c3e:	0940      	lsrs	r0, r0, #5
     c40:	bd08      	pop	{r3, pc}
     c42:	bf00      	nop
     c44:	20003348 	.word	0x20003348
     c48:	0001132d 	.word	0x0001132d

00000c4c <_ZN16Maintenance_Tool17CommandSetHeatersEv>:

bool Maintenance_Tool::CommandSetHeaters(void)	{
     c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	bool powerOn;
	
		memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     c50:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
     c54:	6819      	ldr	r1, [r3, #0]
     c56:	f8c0 1136 	str.w	r1, [r0, #310]	; 0x136
     c5a:	8899      	ldrh	r1, [r3, #4]
     c5c:	799b      	ldrb	r3, [r3, #6]
     c5e:	f8a0 113a 	strh.w	r1, [r0, #314]	; 0x13a
     c62:	f880 313c 	strb.w	r3, [r0, #316]	; 0x13c
		
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetHeaters);
     c66:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
     c6a:	2b49      	cmp	r3, #73	; 0x49
     c6c:	bf0c      	ite	eq
     c6e:	f04f 0801 	moveq.w	r8, #1
     c72:	f04f 0800 	movne.w	r8, #0
	if (result){
     c76:	d002      	beq.n	c7e <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x32>
			}
		}
	}
	
	return result;
}
     c78:	4640      	mov	r0, r8
     c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lastEnableHeaters=enableHeaters;
     c7e:	f890 2135 	ldrb.w	r2, [r0, #309]	; 0x135
     c82:	f880 2134 	strb.w	r2, [r0, #308]	; 0x134
		enableHeaters=singleTaskMessage.description;
     c86:	f890 313c 	ldrb.w	r3, [r0, #316]	; 0x13c
     c8a:	f880 3135 	strb.w	r3, [r0, #309]	; 0x135
		if (enableHeaters!=lastEnableHeaters)
     c8e:	429a      	cmp	r2, r3
     c90:	d0f2      	beq.n	c78 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     c92:	4605      	mov	r5, r0
     c94:	2400      	movs	r4, #0
				heater.SetRelay(i,powerOn);
     c96:	4f07      	ldr	r7, [pc, #28]	; (cb4 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x68>)
     c98:	4e07      	ldr	r6, [pc, #28]	; (cb8 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x6c>)
				powerOn=enableHeaters&(0x01<<i);
     c9a:	f895 2135 	ldrb.w	r2, [r5, #309]	; 0x135
     c9e:	4122      	asrs	r2, r4
				heater.SetRelay(i,powerOn);
     ca0:	f002 0201 	and.w	r2, r2, #1
     ca4:	b2e1      	uxtb	r1, r4
     ca6:	4638      	mov	r0, r7
     ca8:	47b0      	blx	r6
     caa:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < 4; i++)
     cac:	2c04      	cmp	r4, #4
     cae:	d1f4      	bne.n	c9a <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x4e>
     cb0:	e7e2      	b.n	c78 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     cb2:	bf00      	nop
     cb4:	20002220 	.word	0x20002220
     cb8:	000110d5 	.word	0x000110d5

00000cbc <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     cbc:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     cbe:	0855      	lsrs	r5, r2, #1
     cc0:	d007      	beq.n	cd2 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     cc2:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     cc4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     cc8:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     cca:	3401      	adds	r4, #1
     ccc:	b2a4      	uxth	r4, r4
     cce:	42ac      	cmp	r4, r5
     cd0:	dbf8      	blt.n	cc4 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     cd2:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     cd6:	bf1d      	ittte	ne
     cd8:	189b      	addne	r3, r3, r2
     cda:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     cde:	4048      	eorne	r0, r1
     ce0:	4608      	moveq	r0, r1

	return checksum;
	}
     ce2:	bc30      	pop	{r4, r5}
     ce4:	4770      	bx	lr
	...

00000ce8 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     ce8:	b538      	push	{r3, r4, r5, lr}
     cea:	4604      	mov	r4, r0
	checksum=0;
     cec:	2500      	movs	r5, #0
     cee:	f8a0 5114 	strh.w	r5, [r0, #276]	; 0x114
	checksum = calculateChecksum(0, sizeof(header), &header);
     cf2:	460b      	mov	r3, r1
     cf4:	2206      	movs	r2, #6
     cf6:	4629      	mov	r1, r5
     cf8:	4d02      	ldr	r5, [pc, #8]	; (d04 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     cfa:	47a8      	blx	r5
     cfc:	f8a4 0114 	strh.w	r0, [r4, #276]	; 0x114
	}
     d00:	bd38      	pop	{r3, r4, r5, pc}
     d02:	bf00      	nop
     d04:	00000cbd 	.word	0x00000cbd

00000d08 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     d08:	4b06      	ldr	r3, [pc, #24]	; (d24 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
     d0a:	681b      	ldr	r3, [r3, #0]
     d0c:	600b      	str	r3, [r1, #0]
     d0e:	4b06      	ldr	r3, [pc, #24]	; (d28 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
     d10:	681b      	ldr	r3, [r3, #0]
     d12:	604b      	str	r3, [r1, #4]
     d14:	4b05      	ldr	r3, [pc, #20]	; (d2c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
     d16:	681b      	ldr	r3, [r3, #0]
     d18:	608b      	str	r3, [r1, #8]
     d1a:	4b05      	ldr	r3, [pc, #20]	; (d30 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     d1c:	681b      	ldr	r3, [r3, #0]
     d1e:	60cb      	str	r3, [r1, #12]
     d20:	4770      	bx	lr
     d22:	bf00      	nop
     d24:	41002018 	.word	0x41002018
     d28:	4100201c 	.word	0x4100201c
     d2c:	41002020 	.word	0x41002020
     d30:	41002024 	.word	0x41002024

00000d34 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d36:	4604      	mov	r4, r0
	ticks=0;
     d38:	2600      	movs	r6, #0
     d3a:	6546      	str	r6, [r0, #84]	; 0x54
	interfaceTimer.Init();
     d3c:	4d13      	ldr	r5, [pc, #76]	; (d8c <_ZN16Maintenance_Tool4InitEv+0x58>)
     d3e:	4628      	mov	r0, r5
     d40:	4b13      	ldr	r3, [pc, #76]	; (d90 <_ZN16Maintenance_Tool4InitEv+0x5c>)
     d42:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     d44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     d48:	4912      	ldr	r1, [pc, #72]	; (d94 <_ZN16Maintenance_Tool4InitEv+0x60>)
     d4a:	4628      	mov	r0, r5
     d4c:	4b12      	ldr	r3, [pc, #72]	; (d98 <_ZN16Maintenance_Tool4InitEv+0x64>)
     d4e:	4798      	blx	r3
	InitCommandHandler(localBuffer);
     d50:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
     d54:	4620      	mov	r0, r4
     d56:	4b11      	ldr	r3, [pc, #68]	; (d9c <_ZN16Maintenance_Tool4InitEv+0x68>)
     d58:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     d5a:	f204 151b 	addw	r5, r4, #283	; 0x11b
     d5e:	4629      	mov	r1, r5
     d60:	4620      	mov	r0, r4
     d62:	4b0f      	ldr	r3, [pc, #60]	; (da0 <_ZN16Maintenance_Tool4InitEv+0x6c>)
     d64:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     d66:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     d6a:	f8d4 711b 	ldr.w	r7, [r4, #283]	; 0x11b
     d6e:	f8d4 011f 	ldr.w	r0, [r4, #287]	; 0x11f
     d72:	f8d4 1123 	ldr.w	r1, [r4, #291]	; 0x123
     d76:	f8d4 2127 	ldr.w	r2, [r4, #295]	; 0x127
     d7a:	601f      	str	r7, [r3, #0]
     d7c:	6058      	str	r0, [r3, #4]
     d7e:	6099      	str	r1, [r3, #8]
     d80:	60da      	str	r2, [r3, #12]
	gotAccess=false;
     d82:	f884 6111 	strb.w	r6, [r4, #273]	; 0x111
}
     d86:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
     d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d8c:	20000880 	.word	0x20000880
     d90:	0000de61 	.word	0x0000de61
     d94:	00000a45 	.word	0x00000a45
     d98:	0000df51 	.word	0x0000df51
     d9c:	000002ff 	.word	0x000002ff
     da0:	00000d09 	.word	0x00000d09

00000da4 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
     da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     da8:	4c31      	ldr	r4, [pc, #196]	; (e70 <_GLOBAL__sub_I_ptrMaintenanceTool+0xcc>)
     daa:	f104 0564 	add.w	r5, r4, #100	; 0x64
     dae:	4931      	ldr	r1, [pc, #196]	; (e74 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd0>)
     db0:	4628      	mov	r0, r5
     db2:	4f31      	ldr	r7, [pc, #196]	; (e78 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd4>)
     db4:	47b8      	blx	r7
     db6:	4e31      	ldr	r6, [pc, #196]	; (e7c <_GLOBAL__sub_I_ptrMaintenanceTool+0xd8>)
     db8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; eb4 <_GLOBAL__sub_I_ptrMaintenanceTool+0x110>
     dbc:	4632      	mov	r2, r6
     dbe:	4641      	mov	r1, r8
     dc0:	4628      	mov	r0, r5
     dc2:	4d2f      	ldr	r5, [pc, #188]	; (e80 <_GLOBAL__sub_I_ptrMaintenanceTool+0xdc>)
     dc4:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     dc6:	f104 0984 	add.w	r9, r4, #132	; 0x84
     dca:	492e      	ldr	r1, [pc, #184]	; (e84 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe0>)
     dcc:	4648      	mov	r0, r9
     dce:	47b8      	blx	r7
     dd0:	4632      	mov	r2, r6
     dd2:	4641      	mov	r1, r8
     dd4:	4648      	mov	r0, r9
     dd6:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     dd8:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
     ddc:	492a      	ldr	r1, [pc, #168]	; (e88 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe4>)
     dde:	4648      	mov	r0, r9
     de0:	47b8      	blx	r7
     de2:	4632      	mov	r2, r6
     de4:	4641      	mov	r1, r8
     de6:	4648      	mov	r0, r9
     de8:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     dea:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
     dee:	4927      	ldr	r1, [pc, #156]	; (e8c <_GLOBAL__sub_I_ptrMaintenanceTool+0xe8>)
     df0:	4648      	mov	r0, r9
     df2:	47b8      	blx	r7
     df4:	4632      	mov	r2, r6
     df6:	4641      	mov	r1, r8
     df8:	4648      	mov	r0, r9
     dfa:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     dfc:	f104 09e4 	add.w	r9, r4, #228	; 0xe4
     e00:	4923      	ldr	r1, [pc, #140]	; (e90 <_GLOBAL__sub_I_ptrMaintenanceTool+0xec>)
     e02:	4648      	mov	r0, r9
     e04:	47b8      	blx	r7
     e06:	4632      	mov	r2, r6
     e08:	4641      	mov	r1, r8
     e0a:	4648      	mov	r0, r9
     e0c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     e0e:	f504 7982 	add.w	r9, r4, #260	; 0x104
     e12:	4920      	ldr	r1, [pc, #128]	; (e94 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf0>)
     e14:	4648      	mov	r0, r9
     e16:	47b8      	blx	r7
     e18:	4632      	mov	r2, r6
     e1a:	4641      	mov	r1, r8
     e1c:	4648      	mov	r0, r9
     e1e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     e20:	f104 0904 	add.w	r9, r4, #4
     e24:	491c      	ldr	r1, [pc, #112]	; (e98 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf4>)
     e26:	4648      	mov	r0, r9
     e28:	47b8      	blx	r7
     e2a:	4632      	mov	r2, r6
     e2c:	4641      	mov	r1, r8
     e2e:	4648      	mov	r0, r9
     e30:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     e32:	f504 7992 	add.w	r9, r4, #292	; 0x124
     e36:	4919      	ldr	r1, [pc, #100]	; (e9c <_GLOBAL__sub_I_ptrMaintenanceTool+0xf8>)
     e38:	4648      	mov	r0, r9
     e3a:	47b8      	blx	r7
     e3c:	4632      	mov	r2, r6
     e3e:	4641      	mov	r1, r8
     e40:	4648      	mov	r0, r9
     e42:	47a8      	blx	r5
     e44:	f504 77a2 	add.w	r7, r4, #324	; 0x144
     e48:	4915      	ldr	r1, [pc, #84]	; (ea0 <_GLOBAL__sub_I_ptrMaintenanceTool+0xfc>)
     e4a:	4638      	mov	r0, r7
     e4c:	4b15      	ldr	r3, [pc, #84]	; (ea4 <_GLOBAL__sub_I_ptrMaintenanceTool+0x100>)
     e4e:	4798      	blx	r3
     e50:	4632      	mov	r2, r6
     e52:	4915      	ldr	r1, [pc, #84]	; (ea8 <_GLOBAL__sub_I_ptrMaintenanceTool+0x104>)
     e54:	4638      	mov	r0, r7
     e56:	47a8      	blx	r5
     e58:	f504 74ae 	add.w	r4, r4, #348	; 0x15c
     e5c:	4620      	mov	r0, r4
     e5e:	4b13      	ldr	r3, [pc, #76]	; (eac <_GLOBAL__sub_I_ptrMaintenanceTool+0x108>)
     e60:	4798      	blx	r3
     e62:	4632      	mov	r2, r6
     e64:	4912      	ldr	r1, [pc, #72]	; (eb0 <_GLOBAL__sub_I_ptrMaintenanceTool+0x10c>)
     e66:	4620      	mov	r0, r4
     e68:	47a8      	blx	r5
     e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     e6e:	bf00      	nop
     e70:	2000087c 	.word	0x2000087c
     e74:	20009dc0 	.word	0x20009dc0
     e78:	0000dd75 	.word	0x0000dd75
     e7c:	20000000 	.word	0x20000000
     e80:	000134a5 	.word	0x000134a5
     e84:	20009e54 	.word	0x20009e54
     e88:	20009f78 	.word	0x20009f78
     e8c:	20009e74 	.word	0x20009e74
     e90:	20009f38 	.word	0x20009f38
     e94:	20009f58 	.word	0x20009f58
     e98:	20009e30 	.word	0x20009e30
     e9c:	20009ed0 	.word	0x20009ed0
     ea0:	20009ef0 	.word	0x20009ef0
     ea4:	0000dc19 	.word	0x0000dc19
     ea8:	0000dc35 	.word	0x0000dc35
     eac:	00000ab1 	.word	0x00000ab1
     eb0:	00000a65 	.word	0x00000a65
     eb4:	0000ddad 	.word	0x0000ddad

00000eb8 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
     eb8:	b538      	push	{r3, r4, r5, lr}
     eba:	4605      	mov	r5, r0
     ebc:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
     ebe:	4b05      	ldr	r3, [pc, #20]	; (ed4 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
     ec0:	4798      	blx	r3
     ec2:	f8a5 0114 	strh.w	r0, [r5, #276]	; 0x114
	usb.writeData(&header, sizeof(header));
     ec6:	2206      	movs	r2, #6
     ec8:	4621      	mov	r1, r4
     eca:	4803      	ldr	r0, [pc, #12]	; (ed8 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
     ecc:	4b03      	ldr	r3, [pc, #12]	; (edc <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
     ece:	4798      	blx	r3
     ed0:	bd38      	pop	{r3, r4, r5, pc}
     ed2:	bf00      	nop
     ed4:	00000ce9 	.word	0x00000ce9
     ed8:	20001704 	.word	0x20001704
     edc:	0000e6c1 	.word	0x0000e6c1

00000ee0 <_ZN16Maintenance_Tool21CommandReadParametersEv>:
bool Maintenance_Tool::CommandReadParameters(){
     ee0:	b538      	push	{r3, r4, r5, lr}
	 	bool	result(header.task == kGAINCommandReadParameters);
     ee2:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
     ee6:	2b48      	cmp	r3, #72	; 0x48
     ee8:	bf0c      	ite	eq
     eea:	2501      	moveq	r5, #1
     eec:	2500      	movne	r5, #0
		if (result){
     eee:	d001      	beq.n	ef4 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x14>
}
     ef0:	4628      	mov	r0, r5
     ef2:	bd38      	pop	{r3, r4, r5, pc}
     ef4:	4604      	mov	r4, r0
			r=memory.ReadParameters(parameters);
     ef6:	f500 718c 	add.w	r1, r0, #280	; 0x118
     efa:	4812      	ldr	r0, [pc, #72]	; (f44 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x64>)
     efc:	4b12      	ldr	r3, [pc, #72]	; (f48 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x68>)
     efe:	4798      	blx	r3
			 memcpy(localBuffer,(void*)&hm,n);
     f00:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     f04:	4a11      	ldr	r2, [pc, #68]	; (f4c <_ZN16Maintenance_Tool21CommandReadParametersEv+0x6c>)
     f06:	601a      	str	r2, [r3, #0]
     f08:	2200      	movs	r2, #0
     f0a:	711a      	strb	r2, [r3, #4]
     f0c:	715a      	strb	r2, [r3, #5]
			memcpy((uint8_t*)&localBuffer[n],(void*)&parameters,sizeof(UserParameters));
     f0e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     f12:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
     f16:	80da      	strh	r2, [r3, #6]
			if (fvc.dataStruct.controlOutputs.iAlcFvStandAloneOut)
     f18:	4b0d      	ldr	r3, [pc, #52]	; (f50 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x70>)
     f1a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
     f1e:	b15b      	cbz	r3, f38 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x58>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveStandAloneMinimumPosition;
     f20:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     f24:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
     f28:	721a      	strb	r2, [r3, #8]
			w=usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     f2a:	2240      	movs	r2, #64	; 0x40
     f2c:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
     f30:	4808      	ldr	r0, [pc, #32]	; (f54 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x74>)
     f32:	4b09      	ldr	r3, [pc, #36]	; (f58 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x78>)
     f34:	4798      	blx	r3
     f36:	e7db      	b.n	ef0 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x10>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveMinimumPosition;
     f38:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     f3c:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
     f40:	721a      	strb	r2, [r3, #8]
     f42:	e7f2      	b.n	f2a <_ZN16Maintenance_Tool21CommandReadParametersEv+0x4a>
     f44:	20003348 	.word	0x20003348
     f48:	000111fd 	.word	0x000111fd
     f4c:	61626364 	.word	0x61626364
     f50:	20001efc 	.word	0x20001efc
     f54:	20001704 	.word	0x20001704
     f58:	0000e759 	.word	0x0000e759

00000f5c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
     f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadHeaterStatus);
     f5e:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
     f62:	2b4a      	cmp	r3, #74	; 0x4a
     f64:	bf0c      	ite	eq
     f66:	2501      	moveq	r5, #1
     f68:	2500      	movne	r5, #0
	if (result){
     f6a:	d001      	beq.n	f70 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
     f6c:	4628      	mov	r0, r5
     f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f70:	4604      	mov	r4, r0
			singleTask.description=heater.ReadStatus();
     f72:	4e14      	ldr	r6, [pc, #80]	; (fc4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
     f74:	4630      	mov	r0, r6
     f76:	4b14      	ldr	r3, [pc, #80]	; (fc8 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x6c>)
     f78:	4798      	blx	r3
     f7a:	4607      	mov	r7, r0
			memcpy(localBuffer,(void*)&singleTask,n);
     f7c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     f80:	4a12      	ldr	r2, [pc, #72]	; (fcc <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x70>)
     f82:	601a      	str	r2, [r3, #0]
     f84:	2200      	movs	r2, #0
     f86:	711a      	strb	r2, [r3, #4]
     f88:	224a      	movs	r2, #74	; 0x4a
     f8a:	715a      	strb	r2, [r3, #5]
     f8c:	7198      	strb	r0, [r3, #6]
			heatersEnabled=heater.ReadEnableGIPO();
     f8e:	4630      	mov	r0, r6
     f90:	4b0f      	ldr	r3, [pc, #60]	; (fd0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x74>)
     f92:	4798      	blx	r3
			localBuffer[n]=heatersEnabled;
     f94:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     f98:	71d8      	strb	r0, [r3, #7]
			if (!heater.heaterStatusChanged)
     f9a:	7873      	ldrb	r3, [r6, #1]
     f9c:	b15b      	cbz	r3, fb6 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x5a>
			singleTaskMessage=singleTask;
     f9e:	4b0b      	ldr	r3, [pc, #44]	; (fcc <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x70>)
     fa0:	f8c4 3136 	str.w	r3, [r4, #310]	; 0x136
     fa4:	2200      	movs	r2, #0
     fa6:	f884 213a 	strb.w	r2, [r4, #314]	; 0x13a
     faa:	234a      	movs	r3, #74	; 0x4a
     fac:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
     fb0:	f884 713c 	strb.w	r7, [r4, #316]	; 0x13c
     fb4:	e7da      	b.n	f6c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
				usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     fb6:	2240      	movs	r2, #64	; 0x40
     fb8:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
     fbc:	4805      	ldr	r0, [pc, #20]	; (fd4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x78>)
     fbe:	4b06      	ldr	r3, [pc, #24]	; (fd8 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x7c>)
     fc0:	4798      	blx	r3
     fc2:	e7ec      	b.n	f9e <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x42>
     fc4:	20002220 	.word	0x20002220
     fc8:	00011011 	.word	0x00011011
     fcc:	61626364 	.word	0x61626364
     fd0:	0001107d 	.word	0x0001107d
     fd4:	20001704 	.word	0x20001704
     fd8:	0000e759 	.word	0x0000e759

00000fdc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
     fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
     fe0:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
     fe4:	2b4d      	cmp	r3, #77	; 0x4d
     fe6:	bf0c      	ite	eq
     fe8:	2501      	moveq	r5, #1
     fea:	2500      	movne	r5, #0
	if (result){
     fec:	d002      	beq.n	ff4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x18>
}
     fee:	4628      	mov	r0, r5
     ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		singleTask.description=temperatures.faultData;
     ff4:	4b18      	ldr	r3, [pc, #96]	; (1058 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
     ff6:	f893 809c 	ldrb.w	r8, [r3, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
     ffa:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
     ffe:	4a17      	ldr	r2, [pc, #92]	; (105c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
    1000:	601a      	str	r2, [r3, #0]
    1002:	2200      	movs	r2, #0
    1004:	711a      	strb	r2, [r3, #4]
    1006:	224d      	movs	r2, #77	; 0x4d
    1008:	715a      	strb	r2, [r3, #5]
    100a:	f883 8006 	strb.w	r8, [r3, #6]
    100e:	2307      	movs	r3, #7
    1010:	4911      	ldr	r1, [pc, #68]	; (1058 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
    1012:	f103 0261 	add.w	r2, r3, #97	; 0x61
    1016:	440a      	add	r2, r1
    1018:	f103 0710 	add.w	r7, r3, #16
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
    101c:	f852 4f04 	ldr.w	r4, [r2, #4]!
    1020:	f8d0 6140 	ldr.w	r6, [r0, #320]	; 0x140
    1024:	50f4      	str	r4, [r6, r3]
    1026:	3304      	adds	r3, #4
			for (int j = 0; j < 4; j++)
    1028:	42bb      	cmp	r3, r7
    102a:	d1f7      	bne.n	101c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
		for (int i = 0; i < 3; i++)
    102c:	2b37      	cmp	r3, #55	; 0x37
    102e:	d1f0      	bne.n	1012 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x36>
    1030:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    1032:	2240      	movs	r2, #64	; 0x40
    1034:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    1038:	4809      	ldr	r0, [pc, #36]	; (1060 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
    103a:	4b0a      	ldr	r3, [pc, #40]	; (1064 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
    103c:	4798      	blx	r3
		singleTaskMessage=singleTask;
    103e:	4b07      	ldr	r3, [pc, #28]	; (105c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
    1040:	f8c4 3136 	str.w	r3, [r4, #310]	; 0x136
    1044:	2200      	movs	r2, #0
    1046:	f884 213a 	strb.w	r2, [r4, #314]	; 0x13a
    104a:	234d      	movs	r3, #77	; 0x4d
    104c:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
    1050:	f884 813c 	strb.w	r8, [r4, #316]	; 0x13c
    1054:	e7cb      	b.n	fee <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x12>
    1056:	bf00      	nop
    1058:	2000981c 	.word	0x2000981c
    105c:	61626364 	.word	0x61626364
    1060:	20001704 	.word	0x20001704
    1064:	0000e759 	.word	0x0000e759

00001068 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
    1068:	b570      	push	{r4, r5, r6, lr}
    106a:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
    106c:	f100 05ac 	add.w	r5, r0, #172	; 0xac
    1070:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    1074:	681a      	ldr	r2, [r3, #0]
    1076:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
    107a:	889b      	ldrh	r3, [r3, #4]
    107c:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
    107e:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
    1082:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
    1084:	b2db      	uxtb	r3, r3
    1086:	2b16      	cmp	r3, #22
    1088:	d817      	bhi.n	10ba <_ZN16Maintenance_Tool14handleHVACTaskEv+0x52>
		gotTask=true;
    108a:	2301      	movs	r3, #1
    108c:	f880 3113 	strb.w	r3, [r0, #275]	; 0x113
		result=gotTask;
    1090:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
		switch (header.task)
    1094:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    1098:	3b41      	subs	r3, #65	; 0x41
    109a:	2b16      	cmp	r3, #22
    109c:	d878      	bhi.n	1190 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x128>
    109e:	e8df f003 	tbb	[pc, r3]
    10a2:	261f      	.short	0x261f
    10a4:	1c1c2c1c 	.word	0x1c1c2c1c
    10a8:	47413b35 	.word	0x47413b35
    10ac:	655f534d 	.word	0x655f534d
    10b0:	1c59716b 	.word	0x1c59716b
    10b4:	77771c1c 	.word	0x77771c1c
    10b8:	1c          	.byte	0x1c
    10b9:	00          	.byte	0x00
		gotTask=false;
    10ba:	2300      	movs	r3, #0
    10bc:	f880 3113 	strb.w	r3, [r0, #275]	; 0x113
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
    10c0:	4e35      	ldr	r6, [pc, #212]	; (1198 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x130>)
    10c2:	2240      	movs	r2, #64	; 0x40
    10c4:	f500 71a0 	add.w	r1, r0, #320	; 0x140
    10c8:	4630      	mov	r0, r6
    10ca:	4b34      	ldr	r3, [pc, #208]	; (119c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x134>)
    10cc:	4798      	blx	r3
		result=usb.rxReady;
    10ce:	7d73      	ldrb	r3, [r6, #21]
    10d0:	b2db      	uxtb	r3, r3
    10d2:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
	if (result)
    10d6:	2b00      	cmp	r3, #0
    10d8:	d1dc      	bne.n	1094 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
    10da:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    10de:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
    10e0:	4629      	mov	r1, r5
    10e2:	4620      	mov	r0, r4
    10e4:	4b2e      	ldr	r3, [pc, #184]	; (11a0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x138>)
    10e6:	4798      	blx	r3
    10e8:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    10ec:	e7f5      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
	maintenanceIsConnected = false;
    10ee:	2300      	movs	r3, #0
    10f0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	bSendNotifications = false;
    10f4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
				break;
    10f8:	e7ef      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				notifyGAINCommandReceived( header, result);
    10fa:	2201      	movs	r2, #1
    10fc:	4629      	mov	r1, r5
    10fe:	4620      	mov	r0, r4
    1100:	4b28      	ldr	r3, [pc, #160]	; (11a4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x13c>)
    1102:	4798      	blx	r3
				result = handleGAINCommandReset(header);
    1104:	2301      	movs	r3, #1
    1106:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				break;
    110a:	e7e6      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandWriteParameters();
    110c:	4620      	mov	r0, r4
    110e:	4b26      	ldr	r3, [pc, #152]	; (11a8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x140>)
    1110:	4798      	blx	r3
    1112:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    1116:	e7e0      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandReadParameters();
    1118:	4620      	mov	r0, r4
    111a:	4b24      	ldr	r3, [pc, #144]	; (11ac <_ZN16Maintenance_Tool14handleHVACTaskEv+0x144>)
    111c:	4798      	blx	r3
    111e:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    1122:	e7da      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetHeaters();
    1124:	4620      	mov	r0, r4
    1126:	4b22      	ldr	r3, [pc, #136]	; (11b0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x148>)
    1128:	4798      	blx	r3
    112a:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    112e:	e7d4      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandReadHeaterStatus();
    1130:	4620      	mov	r0, r4
    1132:	4b20      	ldr	r3, [pc, #128]	; (11b4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x14c>)
    1134:	4798      	blx	r3
    1136:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    113a:	e7ce      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetEnableFans();
    113c:	4620      	mov	r0, r4
    113e:	4b1e      	ldr	r3, [pc, #120]	; (11b8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x150>)
    1140:	4798      	blx	r3
    1142:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    1146:	e7c8      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetPWMFans();
    1148:	4620      	mov	r0, r4
    114a:	4b1c      	ldr	r3, [pc, #112]	; (11bc <_ZN16Maintenance_Tool14handleHVACTaskEv+0x154>)
    114c:	4798      	blx	r3
    114e:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    1152:	e7c2      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandFansStatus();
    1154:	4620      	mov	r0, r4
    1156:	4b1a      	ldr	r3, [pc, #104]	; (11c0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x158>)
    1158:	4798      	blx	r3
    115a:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    115e:	e7bc      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandReadTemmperatures();
    1160:	4620      	mov	r0, r4
    1162:	4b18      	ldr	r3, [pc, #96]	; (11c4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x15c>)
    1164:	4798      	blx	r3
    1166:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    116a:	e7b6      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandReadFlapperData();
    116c:	4620      	mov	r0, r4
    116e:	4b16      	ldr	r3, [pc, #88]	; (11c8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x160>)
    1170:	4798      	blx	r3
    1172:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    1176:	e7b0      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetFlapperValve();
    1178:	4620      	mov	r0, r4
    117a:	4b14      	ldr	r3, [pc, #80]	; (11cc <_ZN16Maintenance_Tool14handleHVACTaskEv+0x164>)
    117c:	4798      	blx	r3
    117e:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    1182:	e7aa      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetFlapperPosition();
    1184:	4620      	mov	r0, r4
    1186:	4b12      	ldr	r3, [pc, #72]	; (11d0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x168>)
    1188:	4798      	blx	r3
    118a:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    118e:	e7a4      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = false;
    1190:	2300      	movs	r3, #0
    1192:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				break;
    1196:	e7a0      	b.n	10da <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
    1198:	20001704 	.word	0x20001704
    119c:	0000e5d5 	.word	0x0000e5d5
    11a0:	00000c01 	.word	0x00000c01
    11a4:	00000eb9 	.word	0x00000eb9
    11a8:	00000c19 	.word	0x00000c19
    11ac:	00000ee1 	.word	0x00000ee1
    11b0:	00000c4d 	.word	0x00000c4d
    11b4:	00000f5d 	.word	0x00000f5d
    11b8:	00000389 	.word	0x00000389
    11bc:	000003b5 	.word	0x000003b5
    11c0:	000005d9 	.word	0x000005d9
    11c4:	00000fdd 	.word	0x00000fdd
    11c8:	00000639 	.word	0x00000639
    11cc:	0000041d 	.word	0x0000041d
    11d0:	00000489 	.word	0x00000489

000011d4 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
    11d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11d6:	4604      	mov	r4, r0
	result=false;
    11d8:	2300      	movs	r3, #0
    11da:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
	if (gotAccess)
    11de:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
    11e2:	2b00      	cmp	r3, #0
    11e4:	d04f      	beq.n	1286 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb2>
		if (usb.rxReady)
    11e6:	4b2a      	ldr	r3, [pc, #168]	; (1290 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    11e8:	7d5b      	ldrb	r3, [r3, #21]
    11ea:	b95b      	cbnz	r3, 1204 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
			gotCommand=false;
    11ec:	2300      	movs	r3, #0
    11ee:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    11f2:	2240      	movs	r2, #64	; 0x40
    11f4:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    11f8:	4825      	ldr	r0, [pc, #148]	; (1290 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    11fa:	4b26      	ldr	r3, [pc, #152]	; (1294 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
    11fc:	4798      	blx	r3
	}
    11fe:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    1202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
    1204:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    1208:	681a      	ldr	r2, [r3, #0]
    120a:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
    120e:	889b      	ldrh	r3, [r3, #4]
    1210:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
			switch (input){
    1214:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
    1218:	2b3d      	cmp	r3, #61	; 0x3d
    121a:	d017      	beq.n	124c <_ZN16Maintenance_Tool19handleCommunicationEv+0x78>
    121c:	2b3e      	cmp	r3, #62	; 0x3e
    121e:	d010      	beq.n	1242 <_ZN16Maintenance_Tool19handleCommunicationEv+0x6e>
    1220:	2b3c      	cmp	r3, #60	; 0x3c
    1222:	d003      	beq.n	122c <_ZN16Maintenance_Tool19handleCommunicationEv+0x58>
					gotCommand=false;
    1224:	2300      	movs	r3, #0
    1226:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
				break;
    122a:	e006      	b.n	123a <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					gotCommand=true;
    122c:	2301      	movs	r3, #1
    122e:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
					result = handleHVACTask();
    1232:	4b19      	ldr	r3, [pc, #100]	; (1298 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    1234:	4798      	blx	r3
    1236:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
			ClearLocalBuffer();
    123a:	4620      	mov	r0, r4
    123c:	4b17      	ldr	r3, [pc, #92]	; (129c <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
    123e:	4798      	blx	r3
    1240:	e7d7      	b.n	11f2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
    1242:	4b15      	ldr	r3, [pc, #84]	; (1298 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    1244:	4798      	blx	r3
    1246:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
				break;
    124a:	e7f6      	b.n	123a <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					is_MTPC_Beaming=true;
    124c:	2501      	movs	r5, #1
    124e:	f880 5058 	strb.w	r5, [r0, #88]	; 0x58
					interfaceTimer.Stop();
    1252:	4e13      	ldr	r6, [pc, #76]	; (12a0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
    1254:	4630      	mov	r0, r6
    1256:	4b13      	ldr	r3, [pc, #76]	; (12a4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
    1258:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
    125a:	4f13      	ldr	r7, [pc, #76]	; (12a8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
    125c:	4639      	mov	r1, r7
    125e:	4630      	mov	r0, r6
    1260:	4b12      	ldr	r3, [pc, #72]	; (12ac <_ZN16Maintenance_Tool19handleCommunicationEv+0xd8>)
    1262:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
    1264:	f242 7210 	movw	r2, #10000	; 0x2710
    1268:	4639      	mov	r1, r7
    126a:	4630      	mov	r0, r6
    126c:	4b10      	ldr	r3, [pc, #64]	; (12b0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xdc>)
    126e:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
    1270:	2300      	movs	r3, #0
    1272:	65e3      	str	r3, [r4, #92]	; 0x5c
					maintenanceIsConnected = true;
    1274:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
					bSendNotifications = true;
    1278:	f884 5069 	strb.w	r5, [r4, #105]	; 0x69
					result=is_MTPC_Beaming;
    127c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    1280:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				break;
    1284:	e7d9      	b.n	123a <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
		gotCommand=false;
    1286:	2300      	movs	r3, #0
    1288:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
    128c:	e7b7      	b.n	11fe <_ZN16Maintenance_Tool19handleCommunicationEv+0x2a>
    128e:	bf00      	nop
    1290:	20001704 	.word	0x20001704
    1294:	0000e5d5 	.word	0x0000e5d5
    1298:	00001069 	.word	0x00001069
    129c:	00000be5 	.word	0x00000be5
    12a0:	20000880 	.word	0x20000880
    12a4:	0000ded5 	.word	0x0000ded5
    12a8:	00000a55 	.word	0x00000a55
    12ac:	0000dfa5 	.word	0x0000dfa5
    12b0:	0000dffd 	.word	0x0000dffd

000012b4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    12b4:	b580      	push	{r7, lr}
    12b6:	af00      	add	r7, sp, #0
	system_init();
    12b8:	4b03      	ldr	r3, [pc, #12]	; (12c8 <atmel_start_init+0x14>)
    12ba:	4798      	blx	r3
	usb_init();
    12bc:	4b03      	ldr	r3, [pc, #12]	; (12cc <atmel_start_init+0x18>)
    12be:	4798      	blx	r3
	spi_nor_flash_init();
    12c0:	4b03      	ldr	r3, [pc, #12]	; (12d0 <atmel_start_init+0x1c>)
    12c2:	4798      	blx	r3
}
    12c4:	bf00      	nop
    12c6:	bd80      	pop	{r7, pc}
    12c8:	000026b5 	.word	0x000026b5
    12cc:	0000bd45 	.word	0x0000bd45
    12d0:	0000bcd9 	.word	0x0000bcd9

000012d4 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    12d4:	b480      	push	{r7}
    12d6:	b085      	sub	sp, #20
    12d8:	af00      	add	r7, sp, #0
    12da:	60f8      	str	r0, [r7, #12]
    12dc:	460b      	mov	r3, r1
    12de:	607a      	str	r2, [r7, #4]
    12e0:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    12e2:	7afa      	ldrb	r2, [r7, #11]
    12e4:	68fb      	ldr	r3, [r7, #12]
    12e6:	3220      	adds	r2, #32
    12e8:	6879      	ldr	r1, [r7, #4]
    12ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    12ee:	bf00      	nop
    12f0:	3714      	adds	r7, #20
    12f2:	46bd      	mov	sp, r7
    12f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    12f8:	4770      	bx	lr

000012fa <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    12fa:	b480      	push	{r7}
    12fc:	b083      	sub	sp, #12
    12fe:	af00      	add	r7, sp, #0
    1300:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    1302:	687b      	ldr	r3, [r7, #4]
    1304:	691b      	ldr	r3, [r3, #16]
    1306:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    130a:	687b      	ldr	r3, [r7, #4]
    130c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    130e:	bf00      	nop
    1310:	370c      	adds	r7, #12
    1312:	46bd      	mov	sp, r7
    1314:	f85d 7b04 	ldr.w	r7, [sp], #4
    1318:	4770      	bx	lr

0000131a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    131a:	b480      	push	{r7}
    131c:	b083      	sub	sp, #12
    131e:	af00      	add	r7, sp, #0
    1320:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    1322:	687b      	ldr	r3, [r7, #4]
    1324:	691b      	ldr	r3, [r3, #16]
    1326:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    132a:	687b      	ldr	r3, [r7, #4]
    132c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    132e:	bf00      	nop
    1330:	370c      	adds	r7, #12
    1332:	46bd      	mov	sp, r7
    1334:	f85d 7b04 	ldr.w	r7, [sp], #4
    1338:	4770      	bx	lr

0000133a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    133a:	b480      	push	{r7}
    133c:	b083      	sub	sp, #12
    133e:	af00      	add	r7, sp, #0
    1340:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    1342:	687b      	ldr	r3, [r7, #4]
    1344:	691b      	ldr	r3, [r3, #16]
    1346:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    134a:	687b      	ldr	r3, [r7, #4]
    134c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    134e:	bf00      	nop
    1350:	370c      	adds	r7, #12
    1352:	46bd      	mov	sp, r7
    1354:	f85d 7b04 	ldr.w	r7, [sp], #4
    1358:	4770      	bx	lr

0000135a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    135a:	b480      	push	{r7}
    135c:	b083      	sub	sp, #12
    135e:	af00      	add	r7, sp, #0
    1360:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    1362:	687b      	ldr	r3, [r7, #4]
    1364:	691b      	ldr	r3, [r3, #16]
    1366:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    136a:	687b      	ldr	r3, [r7, #4]
    136c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    136e:	bf00      	nop
    1370:	370c      	adds	r7, #12
    1372:	46bd      	mov	sp, r7
    1374:	f85d 7b04 	ldr.w	r7, [sp], #4
    1378:	4770      	bx	lr

0000137a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    137a:	b480      	push	{r7}
    137c:	b083      	sub	sp, #12
    137e:	af00      	add	r7, sp, #0
    1380:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	695b      	ldr	r3, [r3, #20]
    1386:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    138a:	687b      	ldr	r3, [r7, #4]
    138c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    138e:	bf00      	nop
    1390:	370c      	adds	r7, #12
    1392:	46bd      	mov	sp, r7
    1394:	f85d 7b04 	ldr.w	r7, [sp], #4
    1398:	4770      	bx	lr

0000139a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    139a:	b480      	push	{r7}
    139c:	b083      	sub	sp, #12
    139e:	af00      	add	r7, sp, #0
    13a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    13a2:	687b      	ldr	r3, [r7, #4]
    13a4:	695b      	ldr	r3, [r3, #20]
    13a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    13aa:	687b      	ldr	r3, [r7, #4]
    13ac:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    13ae:	bf00      	nop
    13b0:	370c      	adds	r7, #12
    13b2:	46bd      	mov	sp, r7
    13b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    13b8:	4770      	bx	lr

000013ba <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    13ba:	b480      	push	{r7}
    13bc:	b083      	sub	sp, #12
    13be:	af00      	add	r7, sp, #0
    13c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    13c2:	687b      	ldr	r3, [r7, #4]
    13c4:	695b      	ldr	r3, [r3, #20]
    13c6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    13ca:	687b      	ldr	r3, [r7, #4]
    13cc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    13ce:	bf00      	nop
    13d0:	370c      	adds	r7, #12
    13d2:	46bd      	mov	sp, r7
    13d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    13d8:	4770      	bx	lr

000013da <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    13da:	b480      	push	{r7}
    13dc:	b083      	sub	sp, #12
    13de:	af00      	add	r7, sp, #0
    13e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	695b      	ldr	r3, [r3, #20]
    13e6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    13ea:	687b      	ldr	r3, [r7, #4]
    13ec:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    13ee:	bf00      	nop
    13f0:	370c      	adds	r7, #12
    13f2:	46bd      	mov	sp, r7
    13f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    13f8:	4770      	bx	lr

000013fa <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    13fa:	b480      	push	{r7}
    13fc:	b083      	sub	sp, #12
    13fe:	af00      	add	r7, sp, #0
    1400:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1402:	687b      	ldr	r3, [r7, #4]
    1404:	695b      	ldr	r3, [r3, #20]
    1406:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    140a:	687b      	ldr	r3, [r7, #4]
    140c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    140e:	bf00      	nop
    1410:	370c      	adds	r7, #12
    1412:	46bd      	mov	sp, r7
    1414:	f85d 7b04 	ldr.w	r7, [sp], #4
    1418:	4770      	bx	lr

0000141a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    141a:	b480      	push	{r7}
    141c:	b083      	sub	sp, #12
    141e:	af00      	add	r7, sp, #0
    1420:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	699b      	ldr	r3, [r3, #24]
    1426:	f043 0201 	orr.w	r2, r3, #1
    142a:	687b      	ldr	r3, [r7, #4]
    142c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    142e:	bf00      	nop
    1430:	370c      	adds	r7, #12
    1432:	46bd      	mov	sp, r7
    1434:	f85d 7b04 	ldr.w	r7, [sp], #4
    1438:	4770      	bx	lr

0000143a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    143a:	b480      	push	{r7}
    143c:	b083      	sub	sp, #12
    143e:	af00      	add	r7, sp, #0
    1440:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	699b      	ldr	r3, [r3, #24]
    1446:	f043 0202 	orr.w	r2, r3, #2
    144a:	687b      	ldr	r3, [r7, #4]
    144c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    144e:	bf00      	nop
    1450:	370c      	adds	r7, #12
    1452:	46bd      	mov	sp, r7
    1454:	f85d 7b04 	ldr.w	r7, [sp], #4
    1458:	4770      	bx	lr

0000145a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    145a:	b480      	push	{r7}
    145c:	b083      	sub	sp, #12
    145e:	af00      	add	r7, sp, #0
    1460:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	699b      	ldr	r3, [r3, #24]
    1466:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    146a:	687b      	ldr	r3, [r7, #4]
    146c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    146e:	bf00      	nop
    1470:	370c      	adds	r7, #12
    1472:	46bd      	mov	sp, r7
    1474:	f85d 7b04 	ldr.w	r7, [sp], #4
    1478:	4770      	bx	lr

0000147a <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    147a:	b480      	push	{r7}
    147c:	b083      	sub	sp, #12
    147e:	af00      	add	r7, sp, #0
    1480:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	699b      	ldr	r3, [r3, #24]
    1486:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    148a:	687b      	ldr	r3, [r7, #4]
    148c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    148e:	bf00      	nop
    1490:	370c      	adds	r7, #12
    1492:	46bd      	mov	sp, r7
    1494:	f85d 7b04 	ldr.w	r7, [sp], #4
    1498:	4770      	bx	lr

0000149a <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    149a:	b480      	push	{r7}
    149c:	b083      	sub	sp, #12
    149e:	af00      	add	r7, sp, #0
    14a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    14a2:	687b      	ldr	r3, [r7, #4]
    14a4:	699b      	ldr	r3, [r3, #24]
    14a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    14aa:	687b      	ldr	r3, [r7, #4]
    14ac:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14ae:	bf00      	nop
    14b0:	370c      	adds	r7, #12
    14b2:	46bd      	mov	sp, r7
    14b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14b8:	4770      	bx	lr

000014ba <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    14ba:	b480      	push	{r7}
    14bc:	b083      	sub	sp, #12
    14be:	af00      	add	r7, sp, #0
    14c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	699b      	ldr	r3, [r3, #24]
    14c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    14ca:	687b      	ldr	r3, [r7, #4]
    14cc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14ce:	bf00      	nop
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr

000014da <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    14da:	b480      	push	{r7}
    14dc:	b083      	sub	sp, #12
    14de:	af00      	add	r7, sp, #0
    14e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	69db      	ldr	r3, [r3, #28]
    14e6:	f043 0208 	orr.w	r2, r3, #8
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14ee:	bf00      	nop
    14f0:	370c      	adds	r7, #12
    14f2:	46bd      	mov	sp, r7
    14f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14f8:	4770      	bx	lr

000014fa <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    14fa:	b480      	push	{r7}
    14fc:	b083      	sub	sp, #12
    14fe:	af00      	add	r7, sp, #0
    1500:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1502:	687b      	ldr	r3, [r7, #4]
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	f043 0220 	orr.w	r2, r3, #32
    150a:	687b      	ldr	r3, [r7, #4]
    150c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    150e:	bf00      	nop
    1510:	370c      	adds	r7, #12
    1512:	46bd      	mov	sp, r7
    1514:	f85d 7b04 	ldr.w	r7, [sp], #4
    1518:	4770      	bx	lr

0000151a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    151a:	b480      	push	{r7}
    151c:	b083      	sub	sp, #12
    151e:	af00      	add	r7, sp, #0
    1520:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1522:	687b      	ldr	r3, [r7, #4]
    1524:	69db      	ldr	r3, [r3, #28]
    1526:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    152a:	687b      	ldr	r3, [r7, #4]
    152c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    152e:	bf00      	nop
    1530:	370c      	adds	r7, #12
    1532:	46bd      	mov	sp, r7
    1534:	f85d 7b04 	ldr.w	r7, [sp], #4
    1538:	4770      	bx	lr

0000153a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    153a:	b480      	push	{r7}
    153c:	b083      	sub	sp, #12
    153e:	af00      	add	r7, sp, #0
    1540:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    1542:	687b      	ldr	r3, [r7, #4]
    1544:	69db      	ldr	r3, [r3, #28]
    1546:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    154e:	bf00      	nop
    1550:	370c      	adds	r7, #12
    1552:	46bd      	mov	sp, r7
    1554:	f85d 7b04 	ldr.w	r7, [sp], #4
    1558:	4770      	bx	lr

0000155a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    155a:	b480      	push	{r7}
    155c:	b083      	sub	sp, #12
    155e:	af00      	add	r7, sp, #0
    1560:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    1562:	687b      	ldr	r3, [r7, #4]
    1564:	6a1b      	ldr	r3, [r3, #32]
    1566:	f043 0201 	orr.w	r2, r3, #1
    156a:	687b      	ldr	r3, [r7, #4]
    156c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    156e:	bf00      	nop
    1570:	370c      	adds	r7, #12
    1572:	46bd      	mov	sp, r7
    1574:	f85d 7b04 	ldr.w	r7, [sp], #4
    1578:	4770      	bx	lr

0000157a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    157a:	b480      	push	{r7}
    157c:	b083      	sub	sp, #12
    157e:	af00      	add	r7, sp, #0
    1580:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	6a1b      	ldr	r3, [r3, #32]
    1586:	f043 0202 	orr.w	r2, r3, #2
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    158e:	bf00      	nop
    1590:	370c      	adds	r7, #12
    1592:	46bd      	mov	sp, r7
    1594:	f85d 7b04 	ldr.w	r7, [sp], #4
    1598:	4770      	bx	lr

0000159a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    159a:	b480      	push	{r7}
    159c:	b083      	sub	sp, #12
    159e:	af00      	add	r7, sp, #0
    15a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    15a2:	687b      	ldr	r3, [r7, #4]
    15a4:	6a1b      	ldr	r3, [r3, #32]
    15a6:	f043 0204 	orr.w	r2, r3, #4
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15ae:	bf00      	nop
    15b0:	370c      	adds	r7, #12
    15b2:	46bd      	mov	sp, r7
    15b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    15b8:	4770      	bx	lr

000015ba <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    15ba:	b480      	push	{r7}
    15bc:	b083      	sub	sp, #12
    15be:	af00      	add	r7, sp, #0
    15c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	6a1b      	ldr	r3, [r3, #32]
    15c6:	f043 0208 	orr.w	r2, r3, #8
    15ca:	687b      	ldr	r3, [r7, #4]
    15cc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15ce:	bf00      	nop
    15d0:	370c      	adds	r7, #12
    15d2:	46bd      	mov	sp, r7
    15d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    15d8:	4770      	bx	lr

000015da <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    15da:	b480      	push	{r7}
    15dc:	b083      	sub	sp, #12
    15de:	af00      	add	r7, sp, #0
    15e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	6a1b      	ldr	r3, [r3, #32]
    15e6:	f043 0220 	orr.w	r2, r3, #32
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15ee:	bf00      	nop
    15f0:	370c      	adds	r7, #12
    15f2:	46bd      	mov	sp, r7
    15f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    15f8:	4770      	bx	lr

000015fa <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    15fa:	b480      	push	{r7}
    15fc:	b083      	sub	sp, #12
    15fe:	af00      	add	r7, sp, #0
    1600:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	6a1b      	ldr	r3, [r3, #32]
    1606:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    160a:	687b      	ldr	r3, [r7, #4]
    160c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    160e:	bf00      	nop
    1610:	370c      	adds	r7, #12
    1612:	46bd      	mov	sp, r7
    1614:	f85d 7b04 	ldr.w	r7, [sp], #4
    1618:	4770      	bx	lr

0000161a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    161a:	b480      	push	{r7}
    161c:	b085      	sub	sp, #20
    161e:	af00      	add	r7, sp, #0
    1620:	60f8      	str	r0, [r7, #12]
    1622:	460b      	mov	r3, r1
    1624:	607a      	str	r2, [r7, #4]
    1626:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1628:	7afb      	ldrb	r3, [r7, #11]
    162a:	68fa      	ldr	r2, [r7, #12]
    162c:	01db      	lsls	r3, r3, #7
    162e:	4413      	add	r3, r2
    1630:	3308      	adds	r3, #8
    1632:	687a      	ldr	r2, [r7, #4]
    1634:	601a      	str	r2, [r3, #0]
}
    1636:	bf00      	nop
    1638:	3714      	adds	r7, #20
    163a:	46bd      	mov	sp, r7
    163c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1640:	4770      	bx	lr

00001642 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1642:	b480      	push	{r7}
    1644:	b085      	sub	sp, #20
    1646:	af00      	add	r7, sp, #0
    1648:	60f8      	str	r0, [r7, #12]
    164a:	460b      	mov	r3, r1
    164c:	607a      	str	r2, [r7, #4]
    164e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1650:	7afb      	ldrb	r3, [r7, #11]
    1652:	68fa      	ldr	r2, [r7, #12]
    1654:	01db      	lsls	r3, r3, #7
    1656:	4413      	add	r3, r2
    1658:	3304      	adds	r3, #4
    165a:	687a      	ldr	r2, [r7, #4]
    165c:	601a      	str	r2, [r3, #0]
}
    165e:	bf00      	nop
    1660:	3714      	adds	r7, #20
    1662:	46bd      	mov	sp, r7
    1664:	f85d 7b04 	ldr.w	r7, [sp], #4
    1668:	4770      	bx	lr

0000166a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    166a:	b480      	push	{r7}
    166c:	b085      	sub	sp, #20
    166e:	af00      	add	r7, sp, #0
    1670:	60f8      	str	r0, [r7, #12]
    1672:	460b      	mov	r3, r1
    1674:	607a      	str	r2, [r7, #4]
    1676:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1678:	7afb      	ldrb	r3, [r7, #11]
    167a:	68fa      	ldr	r2, [r7, #12]
    167c:	01db      	lsls	r3, r3, #7
    167e:	4413      	add	r3, r2
    1680:	3318      	adds	r3, #24
    1682:	687a      	ldr	r2, [r7, #4]
    1684:	601a      	str	r2, [r3, #0]
}
    1686:	bf00      	nop
    1688:	3714      	adds	r7, #20
    168a:	46bd      	mov	sp, r7
    168c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1690:	4770      	bx	lr

00001692 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1692:	b480      	push	{r7}
    1694:	b085      	sub	sp, #20
    1696:	af00      	add	r7, sp, #0
    1698:	60f8      	str	r0, [r7, #12]
    169a:	460b      	mov	r3, r1
    169c:	607a      	str	r2, [r7, #4]
    169e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    16a0:	7afb      	ldrb	r3, [r7, #11]
    16a2:	68fa      	ldr	r2, [r7, #12]
    16a4:	01db      	lsls	r3, r3, #7
    16a6:	4413      	add	r3, r2
    16a8:	3314      	adds	r3, #20
    16aa:	687a      	ldr	r2, [r7, #4]
    16ac:	601a      	str	r2, [r3, #0]
}
    16ae:	bf00      	nop
    16b0:	3714      	adds	r7, #20
    16b2:	46bd      	mov	sp, r7
    16b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    16b8:	4770      	bx	lr

000016ba <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    16ba:	b480      	push	{r7}
    16bc:	b085      	sub	sp, #20
    16be:	af00      	add	r7, sp, #0
    16c0:	6078      	str	r0, [r7, #4]
    16c2:	4608      	mov	r0, r1
    16c4:	4611      	mov	r1, r2
    16c6:	461a      	mov	r2, r3
    16c8:	4603      	mov	r3, r0
    16ca:	70fb      	strb	r3, [r7, #3]
    16cc:	460b      	mov	r3, r1
    16ce:	70bb      	strb	r3, [r7, #2]
    16d0:	4613      	mov	r3, r2
    16d2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    16d4:	78fa      	ldrb	r2, [r7, #3]
    16d6:	78bb      	ldrb	r3, [r7, #2]
    16d8:	6879      	ldr	r1, [r7, #4]
    16da:	01d2      	lsls	r2, r2, #7
    16dc:	440a      	add	r2, r1
    16de:	4413      	add	r3, r2
    16e0:	3330      	adds	r3, #48	; 0x30
    16e2:	781b      	ldrb	r3, [r3, #0]
    16e4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    16e6:	7bfb      	ldrb	r3, [r7, #15]
    16e8:	f023 030f 	bic.w	r3, r3, #15
    16ec:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    16ee:	787b      	ldrb	r3, [r7, #1]
    16f0:	f003 030f 	and.w	r3, r3, #15
    16f4:	b2da      	uxtb	r2, r3
    16f6:	7bfb      	ldrb	r3, [r7, #15]
    16f8:	4313      	orrs	r3, r2
    16fa:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    16fc:	78fa      	ldrb	r2, [r7, #3]
    16fe:	78bb      	ldrb	r3, [r7, #2]
    1700:	6879      	ldr	r1, [r7, #4]
    1702:	01d2      	lsls	r2, r2, #7
    1704:	440a      	add	r2, r1
    1706:	4413      	add	r3, r2
    1708:	3330      	adds	r3, #48	; 0x30
    170a:	7bfa      	ldrb	r2, [r7, #15]
    170c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    170e:	bf00      	nop
    1710:	3714      	adds	r7, #20
    1712:	46bd      	mov	sp, r7
    1714:	f85d 7b04 	ldr.w	r7, [sp], #4
    1718:	4770      	bx	lr

0000171a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    171a:	b480      	push	{r7}
    171c:	b085      	sub	sp, #20
    171e:	af00      	add	r7, sp, #0
    1720:	6078      	str	r0, [r7, #4]
    1722:	4608      	mov	r0, r1
    1724:	4611      	mov	r1, r2
    1726:	461a      	mov	r2, r3
    1728:	4603      	mov	r3, r0
    172a:	70fb      	strb	r3, [r7, #3]
    172c:	460b      	mov	r3, r1
    172e:	70bb      	strb	r3, [r7, #2]
    1730:	4613      	mov	r3, r2
    1732:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1734:	78fa      	ldrb	r2, [r7, #3]
    1736:	78bb      	ldrb	r3, [r7, #2]
    1738:	6879      	ldr	r1, [r7, #4]
    173a:	01d2      	lsls	r2, r2, #7
    173c:	440a      	add	r2, r1
    173e:	4413      	add	r3, r2
    1740:	3330      	adds	r3, #48	; 0x30
    1742:	781b      	ldrb	r3, [r3, #0]
    1744:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1746:	7bfb      	ldrb	r3, [r7, #15]
    1748:	f003 030f 	and.w	r3, r3, #15
    174c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    174e:	787b      	ldrb	r3, [r7, #1]
    1750:	011b      	lsls	r3, r3, #4
    1752:	b2da      	uxtb	r2, r3
    1754:	7bfb      	ldrb	r3, [r7, #15]
    1756:	4313      	orrs	r3, r2
    1758:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    175a:	78fa      	ldrb	r2, [r7, #3]
    175c:	78bb      	ldrb	r3, [r7, #2]
    175e:	6879      	ldr	r1, [r7, #4]
    1760:	01d2      	lsls	r2, r2, #7
    1762:	440a      	add	r2, r1
    1764:	4413      	add	r3, r2
    1766:	3330      	adds	r3, #48	; 0x30
    1768:	7bfa      	ldrb	r2, [r7, #15]
    176a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    176c:	bf00      	nop
    176e:	3714      	adds	r7, #20
    1770:	46bd      	mov	sp, r7
    1772:	f85d 7b04 	ldr.w	r7, [sp], #4
    1776:	4770      	bx	lr

00001778 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1778:	b480      	push	{r7}
    177a:	b085      	sub	sp, #20
    177c:	af00      	add	r7, sp, #0
    177e:	6078      	str	r0, [r7, #4]
    1780:	4608      	mov	r0, r1
    1782:	4611      	mov	r1, r2
    1784:	461a      	mov	r2, r3
    1786:	4603      	mov	r3, r0
    1788:	70fb      	strb	r3, [r7, #3]
    178a:	460b      	mov	r3, r1
    178c:	70bb      	strb	r3, [r7, #2]
    178e:	4613      	mov	r3, r2
    1790:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1792:	78fa      	ldrb	r2, [r7, #3]
    1794:	78bb      	ldrb	r3, [r7, #2]
    1796:	6879      	ldr	r1, [r7, #4]
    1798:	01d2      	lsls	r2, r2, #7
    179a:	440a      	add	r2, r1
    179c:	4413      	add	r3, r2
    179e:	3340      	adds	r3, #64	; 0x40
    17a0:	781b      	ldrb	r3, [r3, #0]
    17a2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    17a4:	7bfb      	ldrb	r3, [r7, #15]
    17a6:	f023 0301 	bic.w	r3, r3, #1
    17aa:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    17ac:	787a      	ldrb	r2, [r7, #1]
    17ae:	7bfb      	ldrb	r3, [r7, #15]
    17b0:	4313      	orrs	r3, r2
    17b2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    17b4:	78fa      	ldrb	r2, [r7, #3]
    17b6:	78bb      	ldrb	r3, [r7, #2]
    17b8:	6879      	ldr	r1, [r7, #4]
    17ba:	01d2      	lsls	r2, r2, #7
    17bc:	440a      	add	r2, r1
    17be:	4413      	add	r3, r2
    17c0:	3340      	adds	r3, #64	; 0x40
    17c2:	7bfa      	ldrb	r2, [r7, #15]
    17c4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    17c6:	bf00      	nop
    17c8:	3714      	adds	r7, #20
    17ca:	46bd      	mov	sp, r7
    17cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    17d0:	4770      	bx	lr

000017d2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    17d2:	b490      	push	{r4, r7}
    17d4:	b082      	sub	sp, #8
    17d6:	af00      	add	r7, sp, #0
    17d8:	6078      	str	r0, [r7, #4]
    17da:	460b      	mov	r3, r1
    17dc:	70fb      	strb	r3, [r7, #3]
    17de:	4613      	mov	r3, r2
    17e0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    17e2:	78fa      	ldrb	r2, [r7, #3]
    17e4:	78bb      	ldrb	r3, [r7, #2]
    17e6:	78f8      	ldrb	r0, [r7, #3]
    17e8:	78b9      	ldrb	r1, [r7, #2]
    17ea:	687c      	ldr	r4, [r7, #4]
    17ec:	01c0      	lsls	r0, r0, #7
    17ee:	4420      	add	r0, r4
    17f0:	4401      	add	r1, r0
    17f2:	3140      	adds	r1, #64	; 0x40
    17f4:	7809      	ldrb	r1, [r1, #0]
    17f6:	b2c9      	uxtb	r1, r1
    17f8:	f041 0104 	orr.w	r1, r1, #4
    17fc:	b2c8      	uxtb	r0, r1
    17fe:	6879      	ldr	r1, [r7, #4]
    1800:	01d2      	lsls	r2, r2, #7
    1802:	440a      	add	r2, r1
    1804:	4413      	add	r3, r2
    1806:	3340      	adds	r3, #64	; 0x40
    1808:	4602      	mov	r2, r0
    180a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    180c:	bf00      	nop
    180e:	3708      	adds	r7, #8
    1810:	46bd      	mov	sp, r7
    1812:	bc90      	pop	{r4, r7}
    1814:	4770      	bx	lr

00001816 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1816:	b490      	push	{r4, r7}
    1818:	b082      	sub	sp, #8
    181a:	af00      	add	r7, sp, #0
    181c:	6078      	str	r0, [r7, #4]
    181e:	460b      	mov	r3, r1
    1820:	70fb      	strb	r3, [r7, #3]
    1822:	4613      	mov	r3, r2
    1824:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1826:	78fa      	ldrb	r2, [r7, #3]
    1828:	78bb      	ldrb	r3, [r7, #2]
    182a:	78f8      	ldrb	r0, [r7, #3]
    182c:	78b9      	ldrb	r1, [r7, #2]
    182e:	687c      	ldr	r4, [r7, #4]
    1830:	01c0      	lsls	r0, r0, #7
    1832:	4420      	add	r0, r4
    1834:	4401      	add	r1, r0
    1836:	3140      	adds	r1, #64	; 0x40
    1838:	7809      	ldrb	r1, [r1, #0]
    183a:	b2c9      	uxtb	r1, r1
    183c:	f021 0104 	bic.w	r1, r1, #4
    1840:	b2c8      	uxtb	r0, r1
    1842:	6879      	ldr	r1, [r7, #4]
    1844:	01d2      	lsls	r2, r2, #7
    1846:	440a      	add	r2, r1
    1848:	4413      	add	r3, r2
    184a:	3340      	adds	r3, #64	; 0x40
    184c:	4602      	mov	r2, r0
    184e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1850:	bf00      	nop
    1852:	3708      	adds	r7, #8
    1854:	46bd      	mov	sp, r7
    1856:	bc90      	pop	{r4, r7}
    1858:	4770      	bx	lr

0000185a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    185a:	b480      	push	{r7}
    185c:	b085      	sub	sp, #20
    185e:	af00      	add	r7, sp, #0
    1860:	60f8      	str	r0, [r7, #12]
    1862:	460b      	mov	r3, r1
    1864:	607a      	str	r2, [r7, #4]
    1866:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1868:	7afb      	ldrb	r3, [r7, #11]
    186a:	68fa      	ldr	r2, [r7, #12]
    186c:	01db      	lsls	r3, r3, #7
    186e:	4413      	add	r3, r2
    1870:	3328      	adds	r3, #40	; 0x28
    1872:	687a      	ldr	r2, [r7, #4]
    1874:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1876:	bf00      	nop
    1878:	3714      	adds	r7, #20
    187a:	46bd      	mov	sp, r7
    187c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1880:	4770      	bx	lr
	...

00001884 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1884:	b580      	push	{r7, lr}
    1886:	b082      	sub	sp, #8
    1888:	af00      	add	r7, sp, #0
    188a:	4603      	mov	r3, r0
    188c:	6039      	str	r1, [r7, #0]
    188e:	71fb      	strb	r3, [r7, #7]
    1890:	4613      	mov	r3, r2
    1892:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1894:	79bb      	ldrb	r3, [r7, #6]
    1896:	2b01      	cmp	r3, #1
    1898:	d01c      	beq.n	18d4 <_gpio_set_direction+0x50>
    189a:	2b02      	cmp	r3, #2
    189c:	d037      	beq.n	190e <_gpio_set_direction+0x8a>
    189e:	2b00      	cmp	r3, #0
    18a0:	d14e      	bne.n	1940 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    18a2:	79fb      	ldrb	r3, [r7, #7]
    18a4:	683a      	ldr	r2, [r7, #0]
    18a6:	4619      	mov	r1, r3
    18a8:	482a      	ldr	r0, [pc, #168]	; (1954 <_gpio_set_direction+0xd0>)
    18aa:	4b2b      	ldr	r3, [pc, #172]	; (1958 <_gpio_set_direction+0xd4>)
    18ac:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    18ae:	683b      	ldr	r3, [r7, #0]
    18b0:	b29b      	uxth	r3, r3
    18b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    18b6:	79fb      	ldrb	r3, [r7, #7]
    18b8:	4619      	mov	r1, r3
    18ba:	4826      	ldr	r0, [pc, #152]	; (1954 <_gpio_set_direction+0xd0>)
    18bc:	4b27      	ldr	r3, [pc, #156]	; (195c <_gpio_set_direction+0xd8>)
    18be:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    18c0:	683b      	ldr	r3, [r7, #0]
    18c2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    18c4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    18c8:	79fb      	ldrb	r3, [r7, #7]
    18ca:	4619      	mov	r1, r3
    18cc:	4821      	ldr	r0, [pc, #132]	; (1954 <_gpio_set_direction+0xd0>)
    18ce:	4b23      	ldr	r3, [pc, #140]	; (195c <_gpio_set_direction+0xd8>)
    18d0:	4798      	blx	r3
		break;
    18d2:	e03a      	b.n	194a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    18d4:	79fb      	ldrb	r3, [r7, #7]
    18d6:	683a      	ldr	r2, [r7, #0]
    18d8:	4619      	mov	r1, r3
    18da:	481e      	ldr	r0, [pc, #120]	; (1954 <_gpio_set_direction+0xd0>)
    18dc:	4b1e      	ldr	r3, [pc, #120]	; (1958 <_gpio_set_direction+0xd4>)
    18de:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    18e0:	683b      	ldr	r3, [r7, #0]
    18e2:	b29b      	uxth	r3, r3
    18e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    18e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    18ec:	79f9      	ldrb	r1, [r7, #7]
    18ee:	461a      	mov	r2, r3
    18f0:	4818      	ldr	r0, [pc, #96]	; (1954 <_gpio_set_direction+0xd0>)
    18f2:	4b1a      	ldr	r3, [pc, #104]	; (195c <_gpio_set_direction+0xd8>)
    18f4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    18f6:	683b      	ldr	r3, [r7, #0]
    18f8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    18fa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    18fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1902:	79f9      	ldrb	r1, [r7, #7]
    1904:	461a      	mov	r2, r3
    1906:	4813      	ldr	r0, [pc, #76]	; (1954 <_gpio_set_direction+0xd0>)
    1908:	4b14      	ldr	r3, [pc, #80]	; (195c <_gpio_set_direction+0xd8>)
    190a:	4798      	blx	r3
		break;
    190c:	e01d      	b.n	194a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    190e:	79fb      	ldrb	r3, [r7, #7]
    1910:	683a      	ldr	r2, [r7, #0]
    1912:	4619      	mov	r1, r3
    1914:	480f      	ldr	r0, [pc, #60]	; (1954 <_gpio_set_direction+0xd0>)
    1916:	4b12      	ldr	r3, [pc, #72]	; (1960 <_gpio_set_direction+0xdc>)
    1918:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    191a:	683b      	ldr	r3, [r7, #0]
    191c:	b29b      	uxth	r3, r3
    191e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1922:	79fb      	ldrb	r3, [r7, #7]
    1924:	4619      	mov	r1, r3
    1926:	480b      	ldr	r0, [pc, #44]	; (1954 <_gpio_set_direction+0xd0>)
    1928:	4b0c      	ldr	r3, [pc, #48]	; (195c <_gpio_set_direction+0xd8>)
    192a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    192c:	683b      	ldr	r3, [r7, #0]
    192e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1930:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1934:	79fb      	ldrb	r3, [r7, #7]
    1936:	4619      	mov	r1, r3
    1938:	4806      	ldr	r0, [pc, #24]	; (1954 <_gpio_set_direction+0xd0>)
    193a:	4b08      	ldr	r3, [pc, #32]	; (195c <_gpio_set_direction+0xd8>)
    193c:	4798      	blx	r3
		break;
    193e:	e004      	b.n	194a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1940:	2246      	movs	r2, #70	; 0x46
    1942:	4908      	ldr	r1, [pc, #32]	; (1964 <_gpio_set_direction+0xe0>)
    1944:	2000      	movs	r0, #0
    1946:	4b08      	ldr	r3, [pc, #32]	; (1968 <_gpio_set_direction+0xe4>)
    1948:	4798      	blx	r3
	}
}
    194a:	bf00      	nop
    194c:	3708      	adds	r7, #8
    194e:	46bd      	mov	sp, r7
    1950:	bd80      	pop	{r7, pc}
    1952:	bf00      	nop
    1954:	41008000 	.word	0x41008000
    1958:	00001643 	.word	0x00001643
    195c:	0000185b 	.word	0x0000185b
    1960:	0000161b 	.word	0x0000161b
    1964:	00013e1c 	.word	0x00013e1c
    1968:	000040dd 	.word	0x000040dd

0000196c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    196c:	b580      	push	{r7, lr}
    196e:	b082      	sub	sp, #8
    1970:	af00      	add	r7, sp, #0
    1972:	4603      	mov	r3, r0
    1974:	6039      	str	r1, [r7, #0]
    1976:	71fb      	strb	r3, [r7, #7]
    1978:	4613      	mov	r3, r2
    197a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    197c:	79bb      	ldrb	r3, [r7, #6]
    197e:	2b00      	cmp	r3, #0
    1980:	d006      	beq.n	1990 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1982:	79fb      	ldrb	r3, [r7, #7]
    1984:	683a      	ldr	r2, [r7, #0]
    1986:	4619      	mov	r1, r3
    1988:	4806      	ldr	r0, [pc, #24]	; (19a4 <_gpio_set_level+0x38>)
    198a:	4b07      	ldr	r3, [pc, #28]	; (19a8 <_gpio_set_level+0x3c>)
    198c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    198e:	e005      	b.n	199c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1990:	79fb      	ldrb	r3, [r7, #7]
    1992:	683a      	ldr	r2, [r7, #0]
    1994:	4619      	mov	r1, r3
    1996:	4803      	ldr	r0, [pc, #12]	; (19a4 <_gpio_set_level+0x38>)
    1998:	4b04      	ldr	r3, [pc, #16]	; (19ac <_gpio_set_level+0x40>)
    199a:	4798      	blx	r3
}
    199c:	bf00      	nop
    199e:	3708      	adds	r7, #8
    19a0:	46bd      	mov	sp, r7
    19a2:	bd80      	pop	{r7, pc}
    19a4:	41008000 	.word	0x41008000
    19a8:	0000166b 	.word	0x0000166b
    19ac:	00001693 	.word	0x00001693

000019b0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    19b0:	b580      	push	{r7, lr}
    19b2:	b082      	sub	sp, #8
    19b4:	af00      	add	r7, sp, #0
    19b6:	4603      	mov	r3, r0
    19b8:	71fb      	strb	r3, [r7, #7]
    19ba:	460b      	mov	r3, r1
    19bc:	71bb      	strb	r3, [r7, #6]
    19be:	4613      	mov	r3, r2
    19c0:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    19c2:	797b      	ldrb	r3, [r7, #5]
    19c4:	2b01      	cmp	r3, #1
    19c6:	d00a      	beq.n	19de <_gpio_set_pin_pull_mode+0x2e>
    19c8:	2b02      	cmp	r3, #2
    19ca:	d01f      	beq.n	1a0c <_gpio_set_pin_pull_mode+0x5c>
    19cc:	2b00      	cmp	r3, #0
    19ce:	d134      	bne.n	1a3a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    19d0:	79ba      	ldrb	r2, [r7, #6]
    19d2:	79fb      	ldrb	r3, [r7, #7]
    19d4:	4619      	mov	r1, r3
    19d6:	481e      	ldr	r0, [pc, #120]	; (1a50 <_gpio_set_pin_pull_mode+0xa0>)
    19d8:	4b1e      	ldr	r3, [pc, #120]	; (1a54 <_gpio_set_pin_pull_mode+0xa4>)
    19da:	4798      	blx	r3
		break;
    19dc:	e033      	b.n	1a46 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    19de:	79bb      	ldrb	r3, [r7, #6]
    19e0:	2201      	movs	r2, #1
    19e2:	409a      	lsls	r2, r3
    19e4:	79fb      	ldrb	r3, [r7, #7]
    19e6:	4619      	mov	r1, r3
    19e8:	4819      	ldr	r0, [pc, #100]	; (1a50 <_gpio_set_pin_pull_mode+0xa0>)
    19ea:	4b1b      	ldr	r3, [pc, #108]	; (1a58 <_gpio_set_pin_pull_mode+0xa8>)
    19ec:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    19ee:	79ba      	ldrb	r2, [r7, #6]
    19f0:	79fb      	ldrb	r3, [r7, #7]
    19f2:	4619      	mov	r1, r3
    19f4:	4816      	ldr	r0, [pc, #88]	; (1a50 <_gpio_set_pin_pull_mode+0xa0>)
    19f6:	4b19      	ldr	r3, [pc, #100]	; (1a5c <_gpio_set_pin_pull_mode+0xac>)
    19f8:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    19fa:	79bb      	ldrb	r3, [r7, #6]
    19fc:	2201      	movs	r2, #1
    19fe:	409a      	lsls	r2, r3
    1a00:	79fb      	ldrb	r3, [r7, #7]
    1a02:	4619      	mov	r1, r3
    1a04:	4812      	ldr	r0, [pc, #72]	; (1a50 <_gpio_set_pin_pull_mode+0xa0>)
    1a06:	4b16      	ldr	r3, [pc, #88]	; (1a60 <_gpio_set_pin_pull_mode+0xb0>)
    1a08:	4798      	blx	r3
		break;
    1a0a:	e01c      	b.n	1a46 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1a0c:	79bb      	ldrb	r3, [r7, #6]
    1a0e:	2201      	movs	r2, #1
    1a10:	409a      	lsls	r2, r3
    1a12:	79fb      	ldrb	r3, [r7, #7]
    1a14:	4619      	mov	r1, r3
    1a16:	480e      	ldr	r0, [pc, #56]	; (1a50 <_gpio_set_pin_pull_mode+0xa0>)
    1a18:	4b0f      	ldr	r3, [pc, #60]	; (1a58 <_gpio_set_pin_pull_mode+0xa8>)
    1a1a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1a1c:	79ba      	ldrb	r2, [r7, #6]
    1a1e:	79fb      	ldrb	r3, [r7, #7]
    1a20:	4619      	mov	r1, r3
    1a22:	480b      	ldr	r0, [pc, #44]	; (1a50 <_gpio_set_pin_pull_mode+0xa0>)
    1a24:	4b0d      	ldr	r3, [pc, #52]	; (1a5c <_gpio_set_pin_pull_mode+0xac>)
    1a26:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1a28:	79bb      	ldrb	r3, [r7, #6]
    1a2a:	2201      	movs	r2, #1
    1a2c:	409a      	lsls	r2, r3
    1a2e:	79fb      	ldrb	r3, [r7, #7]
    1a30:	4619      	mov	r1, r3
    1a32:	4807      	ldr	r0, [pc, #28]	; (1a50 <_gpio_set_pin_pull_mode+0xa0>)
    1a34:	4b0b      	ldr	r3, [pc, #44]	; (1a64 <_gpio_set_pin_pull_mode+0xb4>)
    1a36:	4798      	blx	r3
		break;
    1a38:	e005      	b.n	1a46 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1a3a:	2289      	movs	r2, #137	; 0x89
    1a3c:	490a      	ldr	r1, [pc, #40]	; (1a68 <_gpio_set_pin_pull_mode+0xb8>)
    1a3e:	2000      	movs	r0, #0
    1a40:	4b0a      	ldr	r3, [pc, #40]	; (1a6c <_gpio_set_pin_pull_mode+0xbc>)
    1a42:	4798      	blx	r3
		break;
    1a44:	bf00      	nop
	}
}
    1a46:	bf00      	nop
    1a48:	3708      	adds	r7, #8
    1a4a:	46bd      	mov	sp, r7
    1a4c:	bd80      	pop	{r7, pc}
    1a4e:	bf00      	nop
    1a50:	41008000 	.word	0x41008000
    1a54:	00001817 	.word	0x00001817
    1a58:	00001643 	.word	0x00001643
    1a5c:	000017d3 	.word	0x000017d3
    1a60:	0000166b 	.word	0x0000166b
    1a64:	00001693 	.word	0x00001693
    1a68:	00013e1c 	.word	0x00013e1c
    1a6c:	000040dd 	.word	0x000040dd

00001a70 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1a70:	b590      	push	{r4, r7, lr}
    1a72:	b085      	sub	sp, #20
    1a74:	af00      	add	r7, sp, #0
    1a76:	6078      	str	r0, [r7, #4]
    1a78:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1a7a:	687b      	ldr	r3, [r7, #4]
    1a7c:	095b      	lsrs	r3, r3, #5
    1a7e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1a80:	687b      	ldr	r3, [r7, #4]
    1a82:	b2db      	uxtb	r3, r3
    1a84:	f003 031f 	and.w	r3, r3, #31
    1a88:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1a8a:	683b      	ldr	r3, [r7, #0]
    1a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1a90:	d106      	bne.n	1aa0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1a92:	7bba      	ldrb	r2, [r7, #14]
    1a94:	7bf9      	ldrb	r1, [r7, #15]
    1a96:	2300      	movs	r3, #0
    1a98:	4812      	ldr	r0, [pc, #72]	; (1ae4 <_gpio_set_pin_function+0x74>)
    1a9a:	4c13      	ldr	r4, [pc, #76]	; (1ae8 <_gpio_set_pin_function+0x78>)
    1a9c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1a9e:	e01d      	b.n	1adc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1aa0:	7bba      	ldrb	r2, [r7, #14]
    1aa2:	7bf9      	ldrb	r1, [r7, #15]
    1aa4:	2301      	movs	r3, #1
    1aa6:	480f      	ldr	r0, [pc, #60]	; (1ae4 <_gpio_set_pin_function+0x74>)
    1aa8:	4c0f      	ldr	r4, [pc, #60]	; (1ae8 <_gpio_set_pin_function+0x78>)
    1aaa:	47a0      	blx	r4
		if (pin & 1) {
    1aac:	7bbb      	ldrb	r3, [r7, #14]
    1aae:	f003 0301 	and.w	r3, r3, #1
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	d009      	beq.n	1aca <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1ab6:	7bbb      	ldrb	r3, [r7, #14]
    1ab8:	085b      	lsrs	r3, r3, #1
    1aba:	b2da      	uxtb	r2, r3
    1abc:	683b      	ldr	r3, [r7, #0]
    1abe:	b2db      	uxtb	r3, r3
    1ac0:	7bf9      	ldrb	r1, [r7, #15]
    1ac2:	4808      	ldr	r0, [pc, #32]	; (1ae4 <_gpio_set_pin_function+0x74>)
    1ac4:	4c09      	ldr	r4, [pc, #36]	; (1aec <_gpio_set_pin_function+0x7c>)
    1ac6:	47a0      	blx	r4
}
    1ac8:	e008      	b.n	1adc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1aca:	7bbb      	ldrb	r3, [r7, #14]
    1acc:	085b      	lsrs	r3, r3, #1
    1ace:	b2da      	uxtb	r2, r3
    1ad0:	683b      	ldr	r3, [r7, #0]
    1ad2:	b2db      	uxtb	r3, r3
    1ad4:	7bf9      	ldrb	r1, [r7, #15]
    1ad6:	4803      	ldr	r0, [pc, #12]	; (1ae4 <_gpio_set_pin_function+0x74>)
    1ad8:	4c05      	ldr	r4, [pc, #20]	; (1af0 <_gpio_set_pin_function+0x80>)
    1ada:	47a0      	blx	r4
}
    1adc:	bf00      	nop
    1ade:	3714      	adds	r7, #20
    1ae0:	46bd      	mov	sp, r7
    1ae2:	bd90      	pop	{r4, r7, pc}
    1ae4:	41008000 	.word	0x41008000
    1ae8:	00001779 	.word	0x00001779
    1aec:	0000171b 	.word	0x0000171b
    1af0:	000016bb 	.word	0x000016bb

00001af4 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1af4:	b580      	push	{r7, lr}
    1af6:	b082      	sub	sp, #8
    1af8:	af00      	add	r7, sp, #0
    1afa:	4603      	mov	r3, r0
    1afc:	460a      	mov	r2, r1
    1afe:	71fb      	strb	r3, [r7, #7]
    1b00:	4613      	mov	r3, r2
    1b02:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1b04:	79fb      	ldrb	r3, [r7, #7]
    1b06:	095b      	lsrs	r3, r3, #5
    1b08:	b2d8      	uxtb	r0, r3
    1b0a:	79fb      	ldrb	r3, [r7, #7]
    1b0c:	f003 031f 	and.w	r3, r3, #31
    1b10:	b2db      	uxtb	r3, r3
    1b12:	79ba      	ldrb	r2, [r7, #6]
    1b14:	4619      	mov	r1, r3
    1b16:	4b03      	ldr	r3, [pc, #12]	; (1b24 <gpio_set_pin_pull_mode+0x30>)
    1b18:	4798      	blx	r3
}
    1b1a:	bf00      	nop
    1b1c:	3708      	adds	r7, #8
    1b1e:	46bd      	mov	sp, r7
    1b20:	bd80      	pop	{r7, pc}
    1b22:	bf00      	nop
    1b24:	000019b1 	.word	0x000019b1

00001b28 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	b082      	sub	sp, #8
    1b2c:	af00      	add	r7, sp, #0
    1b2e:	6078      	str	r0, [r7, #4]
    1b30:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1b32:	6839      	ldr	r1, [r7, #0]
    1b34:	6878      	ldr	r0, [r7, #4]
    1b36:	4b03      	ldr	r3, [pc, #12]	; (1b44 <gpio_set_pin_function+0x1c>)
    1b38:	4798      	blx	r3
}
    1b3a:	bf00      	nop
    1b3c:	3708      	adds	r7, #8
    1b3e:	46bd      	mov	sp, r7
    1b40:	bd80      	pop	{r7, pc}
    1b42:	bf00      	nop
    1b44:	00001a71 	.word	0x00001a71

00001b48 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1b48:	b580      	push	{r7, lr}
    1b4a:	b082      	sub	sp, #8
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	4603      	mov	r3, r0
    1b50:	460a      	mov	r2, r1
    1b52:	71fb      	strb	r3, [r7, #7]
    1b54:	4613      	mov	r3, r2
    1b56:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1b58:	79fb      	ldrb	r3, [r7, #7]
    1b5a:	095b      	lsrs	r3, r3, #5
    1b5c:	b2d8      	uxtb	r0, r3
    1b5e:	79fb      	ldrb	r3, [r7, #7]
    1b60:	f003 031f 	and.w	r3, r3, #31
    1b64:	2201      	movs	r2, #1
    1b66:	fa02 f303 	lsl.w	r3, r2, r3
    1b6a:	79ba      	ldrb	r2, [r7, #6]
    1b6c:	4619      	mov	r1, r3
    1b6e:	4b03      	ldr	r3, [pc, #12]	; (1b7c <gpio_set_pin_direction+0x34>)
    1b70:	4798      	blx	r3
}
    1b72:	bf00      	nop
    1b74:	3708      	adds	r7, #8
    1b76:	46bd      	mov	sp, r7
    1b78:	bd80      	pop	{r7, pc}
    1b7a:	bf00      	nop
    1b7c:	00001885 	.word	0x00001885

00001b80 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1b80:	b580      	push	{r7, lr}
    1b82:	b082      	sub	sp, #8
    1b84:	af00      	add	r7, sp, #0
    1b86:	4603      	mov	r3, r0
    1b88:	460a      	mov	r2, r1
    1b8a:	71fb      	strb	r3, [r7, #7]
    1b8c:	4613      	mov	r3, r2
    1b8e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1b90:	79fb      	ldrb	r3, [r7, #7]
    1b92:	095b      	lsrs	r3, r3, #5
    1b94:	b2d8      	uxtb	r0, r3
    1b96:	79fb      	ldrb	r3, [r7, #7]
    1b98:	f003 031f 	and.w	r3, r3, #31
    1b9c:	2201      	movs	r2, #1
    1b9e:	fa02 f303 	lsl.w	r3, r2, r3
    1ba2:	79ba      	ldrb	r2, [r7, #6]
    1ba4:	4619      	mov	r1, r3
    1ba6:	4b03      	ldr	r3, [pc, #12]	; (1bb4 <gpio_set_pin_level+0x34>)
    1ba8:	4798      	blx	r3
}
    1baa:	bf00      	nop
    1bac:	3708      	adds	r7, #8
    1bae:	46bd      	mov	sp, r7
    1bb0:	bd80      	pop	{r7, pc}
    1bb2:	bf00      	nop
    1bb4:	0000196d 	.word	0x0000196d

00001bb8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1bb8:	b580      	push	{r7, lr}
    1bba:	af00      	add	r7, sp, #0
	_init_chip();
    1bbc:	4b01      	ldr	r3, [pc, #4]	; (1bc4 <init_mcu+0xc>)
    1bbe:	4798      	blx	r3
}
    1bc0:	bf00      	nop
    1bc2:	bd80      	pop	{r7, pc}
    1bc4:	00004ce5 	.word	0x00004ce5

00001bc8 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	b082      	sub	sp, #8
    1bcc:	af00      	add	r7, sp, #0
    1bce:	6078      	str	r0, [r7, #4]
    1bd0:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1bd2:	687b      	ldr	r3, [r7, #4]
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d004      	beq.n	1be2 <wdt_init+0x1a>
    1bd8:	683b      	ldr	r3, [r7, #0]
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d001      	beq.n	1be2 <wdt_init+0x1a>
    1bde:	2301      	movs	r3, #1
    1be0:	e000      	b.n	1be4 <wdt_init+0x1c>
    1be2:	2300      	movs	r3, #0
    1be4:	f003 0301 	and.w	r3, r3, #1
    1be8:	b2db      	uxtb	r3, r3
    1bea:	2248      	movs	r2, #72	; 0x48
    1bec:	4907      	ldr	r1, [pc, #28]	; (1c0c <wdt_init+0x44>)
    1bee:	4618      	mov	r0, r3
    1bf0:	4b07      	ldr	r3, [pc, #28]	; (1c10 <wdt_init+0x48>)
    1bf2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1bf4:	687b      	ldr	r3, [r7, #4]
    1bf6:	683a      	ldr	r2, [r7, #0]
    1bf8:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1bfa:	687b      	ldr	r3, [r7, #4]
    1bfc:	4618      	mov	r0, r3
    1bfe:	4b05      	ldr	r3, [pc, #20]	; (1c14 <wdt_init+0x4c>)
    1c00:	4798      	blx	r3
    1c02:	4603      	mov	r3, r0
}
    1c04:	4618      	mov	r0, r3
    1c06:	3708      	adds	r7, #8
    1c08:	46bd      	mov	sp, r7
    1c0a:	bd80      	pop	{r7, pc}
    1c0c:	00013e38 	.word	0x00013e38
    1c10:	000040dd 	.word	0x000040dd
    1c14:	0000b77d 	.word	0x0000b77d

00001c18 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1c18:	b580      	push	{r7, lr}
    1c1a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1c1c:	4804      	ldr	r0, [pc, #16]	; (1c30 <CRC_CALC_init+0x18>)
    1c1e:	4b05      	ldr	r3, [pc, #20]	; (1c34 <CRC_CALC_init+0x1c>)
    1c20:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1c22:	4905      	ldr	r1, [pc, #20]	; (1c38 <CRC_CALC_init+0x20>)
    1c24:	4805      	ldr	r0, [pc, #20]	; (1c3c <CRC_CALC_init+0x24>)
    1c26:	4b06      	ldr	r3, [pc, #24]	; (1c40 <CRC_CALC_init+0x28>)
    1c28:	4798      	blx	r3
}
    1c2a:	bf00      	nop
    1c2c:	bd80      	pop	{r7, pc}
    1c2e:	bf00      	nop
    1c30:	40000800 	.word	0x40000800
    1c34:	0000143b 	.word	0x0000143b
    1c38:	41002000 	.word	0x41002000
    1c3c:	20009fbc 	.word	0x20009fbc
    1c40:	00002a01 	.word	0x00002a01

00001c44 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1c44:	b580      	push	{r7, lr}
    1c46:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c48:	2244      	movs	r2, #68	; 0x44
    1c4a:	2104      	movs	r1, #4
    1c4c:	483f      	ldr	r0, [pc, #252]	; (1d4c <EXTERNAL_IRQ_0_init+0x108>)
    1c4e:	4b40      	ldr	r3, [pc, #256]	; (1d50 <EXTERNAL_IRQ_0_init+0x10c>)
    1c50:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1c52:	4840      	ldr	r0, [pc, #256]	; (1d54 <EXTERNAL_IRQ_0_init+0x110>)
    1c54:	4b40      	ldr	r3, [pc, #256]	; (1d58 <EXTERNAL_IRQ_0_init+0x114>)
    1c56:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1c58:	2101      	movs	r1, #1
    1c5a:	2040      	movs	r0, #64	; 0x40
    1c5c:	4b3f      	ldr	r3, [pc, #252]	; (1d5c <EXTERNAL_IRQ_0_init+0x118>)
    1c5e:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1c60:	2100      	movs	r1, #0
    1c62:	2040      	movs	r0, #64	; 0x40
    1c64:	4b3e      	ldr	r3, [pc, #248]	; (1d60 <EXTERNAL_IRQ_0_init+0x11c>)
    1c66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1c68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1c6c:	2040      	movs	r0, #64	; 0x40
    1c6e:	4b3d      	ldr	r3, [pc, #244]	; (1d64 <EXTERNAL_IRQ_0_init+0x120>)
    1c70:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    1c72:	2101      	movs	r1, #1
    1c74:	2021      	movs	r0, #33	; 0x21
    1c76:	4b39      	ldr	r3, [pc, #228]	; (1d5c <EXTERNAL_IRQ_0_init+0x118>)
    1c78:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1c7a:	2100      	movs	r1, #0
    1c7c:	2021      	movs	r0, #33	; 0x21
    1c7e:	4b38      	ldr	r3, [pc, #224]	; (1d60 <EXTERNAL_IRQ_0_init+0x11c>)
    1c80:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    1c82:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1c86:	2021      	movs	r0, #33	; 0x21
    1c88:	4b36      	ldr	r3, [pc, #216]	; (1d64 <EXTERNAL_IRQ_0_init+0x120>)
    1c8a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1c8c:	2101      	movs	r1, #1
    1c8e:	2003      	movs	r0, #3
    1c90:	4b32      	ldr	r3, [pc, #200]	; (1d5c <EXTERNAL_IRQ_0_init+0x118>)
    1c92:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1c94:	2102      	movs	r1, #2
    1c96:	2003      	movs	r0, #3
    1c98:	4b31      	ldr	r3, [pc, #196]	; (1d60 <EXTERNAL_IRQ_0_init+0x11c>)
    1c9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1c9c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1ca0:	2003      	movs	r0, #3
    1ca2:	4b30      	ldr	r3, [pc, #192]	; (1d64 <EXTERNAL_IRQ_0_init+0x120>)
    1ca4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1ca6:	2101      	movs	r1, #1
    1ca8:	2004      	movs	r0, #4
    1caa:	4b2c      	ldr	r3, [pc, #176]	; (1d5c <EXTERNAL_IRQ_0_init+0x118>)
    1cac:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1cae:	2102      	movs	r1, #2
    1cb0:	2004      	movs	r0, #4
    1cb2:	4b2b      	ldr	r3, [pc, #172]	; (1d60 <EXTERNAL_IRQ_0_init+0x11c>)
    1cb4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1cb6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1cba:	2004      	movs	r0, #4
    1cbc:	4b29      	ldr	r3, [pc, #164]	; (1d64 <EXTERNAL_IRQ_0_init+0x120>)
    1cbe:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1cc0:	2101      	movs	r1, #1
    1cc2:	2005      	movs	r0, #5
    1cc4:	4b25      	ldr	r3, [pc, #148]	; (1d5c <EXTERNAL_IRQ_0_init+0x118>)
    1cc6:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1cc8:	2102      	movs	r1, #2
    1cca:	2005      	movs	r0, #5
    1ccc:	4b24      	ldr	r3, [pc, #144]	; (1d60 <EXTERNAL_IRQ_0_init+0x11c>)
    1cce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1cd0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1cd4:	2005      	movs	r0, #5
    1cd6:	4b23      	ldr	r3, [pc, #140]	; (1d64 <EXTERNAL_IRQ_0_init+0x120>)
    1cd8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1cda:	2101      	movs	r1, #1
    1cdc:	2056      	movs	r0, #86	; 0x56
    1cde:	4b1f      	ldr	r3, [pc, #124]	; (1d5c <EXTERNAL_IRQ_0_init+0x118>)
    1ce0:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1ce2:	2102      	movs	r1, #2
    1ce4:	2056      	movs	r0, #86	; 0x56
    1ce6:	4b1e      	ldr	r3, [pc, #120]	; (1d60 <EXTERNAL_IRQ_0_init+0x11c>)
    1ce8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1cea:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1cee:	2056      	movs	r0, #86	; 0x56
    1cf0:	4b1c      	ldr	r3, [pc, #112]	; (1d64 <EXTERNAL_IRQ_0_init+0x120>)
    1cf2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1cf4:	2101      	movs	r1, #1
    1cf6:	2057      	movs	r0, #87	; 0x57
    1cf8:	4b18      	ldr	r3, [pc, #96]	; (1d5c <EXTERNAL_IRQ_0_init+0x118>)
    1cfa:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1cfc:	2102      	movs	r1, #2
    1cfe:	2057      	movs	r0, #87	; 0x57
    1d00:	4b17      	ldr	r3, [pc, #92]	; (1d60 <EXTERNAL_IRQ_0_init+0x11c>)
    1d02:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1d04:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1d08:	2057      	movs	r0, #87	; 0x57
    1d0a:	4b16      	ldr	r3, [pc, #88]	; (1d64 <EXTERNAL_IRQ_0_init+0x120>)
    1d0c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1d0e:	2101      	movs	r1, #1
    1d10:	2028      	movs	r0, #40	; 0x28
    1d12:	4b12      	ldr	r3, [pc, #72]	; (1d5c <EXTERNAL_IRQ_0_init+0x118>)
    1d14:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1d16:	2100      	movs	r1, #0
    1d18:	2028      	movs	r0, #40	; 0x28
    1d1a:	4b11      	ldr	r3, [pc, #68]	; (1d60 <EXTERNAL_IRQ_0_init+0x11c>)
    1d1c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1d1e:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1d22:	2028      	movs	r0, #40	; 0x28
    1d24:	4b0f      	ldr	r3, [pc, #60]	; (1d64 <EXTERNAL_IRQ_0_init+0x120>)
    1d26:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1d28:	2101      	movs	r1, #1
    1d2a:	2029      	movs	r0, #41	; 0x29
    1d2c:	4b0b      	ldr	r3, [pc, #44]	; (1d5c <EXTERNAL_IRQ_0_init+0x118>)
    1d2e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1d30:	2100      	movs	r1, #0
    1d32:	2029      	movs	r0, #41	; 0x29
    1d34:	4b0a      	ldr	r3, [pc, #40]	; (1d60 <EXTERNAL_IRQ_0_init+0x11c>)
    1d36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1d38:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1d3c:	2029      	movs	r0, #41	; 0x29
    1d3e:	4b09      	ldr	r3, [pc, #36]	; (1d64 <EXTERNAL_IRQ_0_init+0x120>)
    1d40:	4798      	blx	r3

	ext_irq_init();
    1d42:	4b09      	ldr	r3, [pc, #36]	; (1d68 <EXTERNAL_IRQ_0_init+0x124>)
    1d44:	4798      	blx	r3
}
    1d46:	bf00      	nop
    1d48:	bd80      	pop	{r7, pc}
    1d4a:	bf00      	nop
    1d4c:	40001c00 	.word	0x40001c00
    1d50:	000012d5 	.word	0x000012d5
    1d54:	40000800 	.word	0x40000800
    1d58:	000013bb 	.word	0x000013bb
    1d5c:	00001b49 	.word	0x00001b49
    1d60:	00001af5 	.word	0x00001af5
    1d64:	00001b29 	.word	0x00001b29
    1d68:	00002ac9 	.word	0x00002ac9

00001d6c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1d6c:	b580      	push	{r7, lr}
    1d6e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d70:	2244      	movs	r2, #68	; 0x44
    1d72:	210b      	movs	r1, #11
    1d74:	4807      	ldr	r0, [pc, #28]	; (1d94 <EVENT_SYSTEM_0_init+0x28>)
    1d76:	4b08      	ldr	r3, [pc, #32]	; (1d98 <EVENT_SYSTEM_0_init+0x2c>)
    1d78:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d7a:	2244      	movs	r2, #68	; 0x44
    1d7c:	210c      	movs	r1, #12
    1d7e:	4805      	ldr	r0, [pc, #20]	; (1d94 <EVENT_SYSTEM_0_init+0x28>)
    1d80:	4b05      	ldr	r3, [pc, #20]	; (1d98 <EVENT_SYSTEM_0_init+0x2c>)
    1d82:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1d84:	4805      	ldr	r0, [pc, #20]	; (1d9c <EVENT_SYSTEM_0_init+0x30>)
    1d86:	4b06      	ldr	r3, [pc, #24]	; (1da0 <EVENT_SYSTEM_0_init+0x34>)
    1d88:	4798      	blx	r3

	event_system_init();
    1d8a:	4b06      	ldr	r3, [pc, #24]	; (1da4 <EVENT_SYSTEM_0_init+0x38>)
    1d8c:	4798      	blx	r3
}
    1d8e:	bf00      	nop
    1d90:	bd80      	pop	{r7, pc}
    1d92:	bf00      	nop
    1d94:	40001c00 	.word	0x40001c00
    1d98:	000012d5 	.word	0x000012d5
    1d9c:	40000800 	.word	0x40000800
    1da0:	0000145b 	.word	0x0000145b
    1da4:	00002ab5 	.word	0x00002ab5

00001da8 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1da8:	b580      	push	{r7, lr}
    1daa:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1dac:	2101      	movs	r1, #1
    1dae:	202b      	movs	r0, #43	; 0x2b
    1db0:	4b2b      	ldr	r3, [pc, #172]	; (1e60 <QSPI_N25Q256_PORT_init+0xb8>)
    1db2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1db4:	2100      	movs	r1, #0
    1db6:	202b      	movs	r0, #43	; 0x2b
    1db8:	4b2a      	ldr	r3, [pc, #168]	; (1e64 <QSPI_N25Q256_PORT_init+0xbc>)
    1dba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1dbc:	492a      	ldr	r1, [pc, #168]	; (1e68 <QSPI_N25Q256_PORT_init+0xc0>)
    1dbe:	202b      	movs	r0, #43	; 0x2b
    1dc0:	4b2a      	ldr	r3, [pc, #168]	; (1e6c <QSPI_N25Q256_PORT_init+0xc4>)
    1dc2:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1dc4:	2102      	movs	r1, #2
    1dc6:	2008      	movs	r0, #8
    1dc8:	4b25      	ldr	r3, [pc, #148]	; (1e60 <QSPI_N25Q256_PORT_init+0xb8>)
    1dca:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1dcc:	2100      	movs	r1, #0
    1dce:	2008      	movs	r0, #8
    1dd0:	4b27      	ldr	r3, [pc, #156]	; (1e70 <QSPI_N25Q256_PORT_init+0xc8>)
    1dd2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1dd4:	2100      	movs	r1, #0
    1dd6:	2008      	movs	r0, #8
    1dd8:	4b22      	ldr	r3, [pc, #136]	; (1e64 <QSPI_N25Q256_PORT_init+0xbc>)
    1dda:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1ddc:	4925      	ldr	r1, [pc, #148]	; (1e74 <QSPI_N25Q256_PORT_init+0xcc>)
    1dde:	2008      	movs	r0, #8
    1de0:	4b22      	ldr	r3, [pc, #136]	; (1e6c <QSPI_N25Q256_PORT_init+0xc4>)
    1de2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1de4:	2102      	movs	r1, #2
    1de6:	2009      	movs	r0, #9
    1de8:	4b1d      	ldr	r3, [pc, #116]	; (1e60 <QSPI_N25Q256_PORT_init+0xb8>)
    1dea:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1dec:	2100      	movs	r1, #0
    1dee:	2009      	movs	r0, #9
    1df0:	4b1f      	ldr	r3, [pc, #124]	; (1e70 <QSPI_N25Q256_PORT_init+0xc8>)
    1df2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1df4:	2100      	movs	r1, #0
    1df6:	2009      	movs	r0, #9
    1df8:	4b1a      	ldr	r3, [pc, #104]	; (1e64 <QSPI_N25Q256_PORT_init+0xbc>)
    1dfa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1dfc:	491e      	ldr	r1, [pc, #120]	; (1e78 <QSPI_N25Q256_PORT_init+0xd0>)
    1dfe:	2009      	movs	r0, #9
    1e00:	4b1a      	ldr	r3, [pc, #104]	; (1e6c <QSPI_N25Q256_PORT_init+0xc4>)
    1e02:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1e04:	2102      	movs	r1, #2
    1e06:	200a      	movs	r0, #10
    1e08:	4b15      	ldr	r3, [pc, #84]	; (1e60 <QSPI_N25Q256_PORT_init+0xb8>)
    1e0a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1e0c:	2100      	movs	r1, #0
    1e0e:	200a      	movs	r0, #10
    1e10:	4b17      	ldr	r3, [pc, #92]	; (1e70 <QSPI_N25Q256_PORT_init+0xc8>)
    1e12:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1e14:	2100      	movs	r1, #0
    1e16:	200a      	movs	r0, #10
    1e18:	4b12      	ldr	r3, [pc, #72]	; (1e64 <QSPI_N25Q256_PORT_init+0xbc>)
    1e1a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1e1c:	4917      	ldr	r1, [pc, #92]	; (1e7c <QSPI_N25Q256_PORT_init+0xd4>)
    1e1e:	200a      	movs	r0, #10
    1e20:	4b12      	ldr	r3, [pc, #72]	; (1e6c <QSPI_N25Q256_PORT_init+0xc4>)
    1e22:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1e24:	2102      	movs	r1, #2
    1e26:	200b      	movs	r0, #11
    1e28:	4b0d      	ldr	r3, [pc, #52]	; (1e60 <QSPI_N25Q256_PORT_init+0xb8>)
    1e2a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1e2c:	2100      	movs	r1, #0
    1e2e:	200b      	movs	r0, #11
    1e30:	4b0f      	ldr	r3, [pc, #60]	; (1e70 <QSPI_N25Q256_PORT_init+0xc8>)
    1e32:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1e34:	2100      	movs	r1, #0
    1e36:	200b      	movs	r0, #11
    1e38:	4b0a      	ldr	r3, [pc, #40]	; (1e64 <QSPI_N25Q256_PORT_init+0xbc>)
    1e3a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1e3c:	4910      	ldr	r1, [pc, #64]	; (1e80 <QSPI_N25Q256_PORT_init+0xd8>)
    1e3e:	200b      	movs	r0, #11
    1e40:	4b0a      	ldr	r3, [pc, #40]	; (1e6c <QSPI_N25Q256_PORT_init+0xc4>)
    1e42:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1e44:	2101      	movs	r1, #1
    1e46:	202a      	movs	r0, #42	; 0x2a
    1e48:	4b05      	ldr	r3, [pc, #20]	; (1e60 <QSPI_N25Q256_PORT_init+0xb8>)
    1e4a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1e4c:	2100      	movs	r1, #0
    1e4e:	202a      	movs	r0, #42	; 0x2a
    1e50:	4b04      	ldr	r3, [pc, #16]	; (1e64 <QSPI_N25Q256_PORT_init+0xbc>)
    1e52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1e54:	490b      	ldr	r1, [pc, #44]	; (1e84 <QSPI_N25Q256_PORT_init+0xdc>)
    1e56:	202a      	movs	r0, #42	; 0x2a
    1e58:	4b04      	ldr	r3, [pc, #16]	; (1e6c <QSPI_N25Q256_PORT_init+0xc4>)
    1e5a:	4798      	blx	r3
}
    1e5c:	bf00      	nop
    1e5e:	bd80      	pop	{r7, pc}
    1e60:	00001b49 	.word	0x00001b49
    1e64:	00001af5 	.word	0x00001af5
    1e68:	002b0007 	.word	0x002b0007
    1e6c:	00001b29 	.word	0x00001b29
    1e70:	00001b81 	.word	0x00001b81
    1e74:	00080007 	.word	0x00080007
    1e78:	00090007 	.word	0x00090007
    1e7c:	000a0007 	.word	0x000a0007
    1e80:	000b0007 	.word	0x000b0007
    1e84:	002a0007 	.word	0x002a0007

00001e88 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1e88:	b580      	push	{r7, lr}
    1e8a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1e8c:	4805      	ldr	r0, [pc, #20]	; (1ea4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1e8e:	4b06      	ldr	r3, [pc, #24]	; (1ea8 <QSPI_N25Q256_CLOCK_init+0x20>)
    1e90:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1e92:	4804      	ldr	r0, [pc, #16]	; (1ea4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1e94:	4b05      	ldr	r3, [pc, #20]	; (1eac <QSPI_N25Q256_CLOCK_init+0x24>)
    1e96:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1e98:	4802      	ldr	r0, [pc, #8]	; (1ea4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1e9a:	4b05      	ldr	r3, [pc, #20]	; (1eb0 <QSPI_N25Q256_CLOCK_init+0x28>)
    1e9c:	4798      	blx	r3
}
    1e9e:	bf00      	nop
    1ea0:	bd80      	pop	{r7, pc}
    1ea2:	bf00      	nop
    1ea4:	40000800 	.word	0x40000800
    1ea8:	0000131b 	.word	0x0000131b
    1eac:	0000135b 	.word	0x0000135b
    1eb0:	0000153b 	.word	0x0000153b

00001eb4 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1eb4:	b580      	push	{r7, lr}
    1eb6:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1eb8:	4b04      	ldr	r3, [pc, #16]	; (1ecc <QSPI_N25Q256_init+0x18>)
    1eba:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1ebc:	4904      	ldr	r1, [pc, #16]	; (1ed0 <QSPI_N25Q256_init+0x1c>)
    1ebe:	4805      	ldr	r0, [pc, #20]	; (1ed4 <QSPI_N25Q256_init+0x20>)
    1ec0:	4b05      	ldr	r3, [pc, #20]	; (1ed8 <QSPI_N25Q256_init+0x24>)
    1ec2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1ec4:	4b05      	ldr	r3, [pc, #20]	; (1edc <QSPI_N25Q256_init+0x28>)
    1ec6:	4798      	blx	r3
}
    1ec8:	bf00      	nop
    1eca:	bd80      	pop	{r7, pc}
    1ecc:	00001e89 	.word	0x00001e89
    1ed0:	42003400 	.word	0x42003400
    1ed4:	20009e50 	.word	0x20009e50
    1ed8:	00002f39 	.word	0x00002f39
    1edc:	00001da9 	.word	0x00001da9

00001ee0 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1ee4:	4802      	ldr	r0, [pc, #8]	; (1ef0 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1ee6:	4b03      	ldr	r3, [pc, #12]	; (1ef4 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1ee8:	4798      	blx	r3
}
    1eea:	bf00      	nop
    1eec:	bd80      	pop	{r7, pc}
    1eee:	bf00      	nop
    1ef0:	40000800 	.word	0x40000800
    1ef4:	0000139b 	.word	0x0000139b

00001ef8 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1efc:	4b03      	ldr	r3, [pc, #12]	; (1f0c <DATETIME_CLOCK_init+0x14>)
    1efe:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1f00:	4903      	ldr	r1, [pc, #12]	; (1f10 <DATETIME_CLOCK_init+0x18>)
    1f02:	4804      	ldr	r0, [pc, #16]	; (1f14 <DATETIME_CLOCK_init+0x1c>)
    1f04:	4b04      	ldr	r3, [pc, #16]	; (1f18 <DATETIME_CLOCK_init+0x20>)
    1f06:	4798      	blx	r3
}
    1f08:	bf00      	nop
    1f0a:	bd80      	pop	{r7, pc}
    1f0c:	00001ee1 	.word	0x00001ee1
    1f10:	40002400 	.word	0x40002400
    1f14:	20009f98 	.word	0x20009f98
    1f18:	000028a5 	.word	0x000028a5

00001f1c <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1f1c:	b580      	push	{r7, lr}
    1f1e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1f20:	2101      	movs	r1, #1
    1f22:	2010      	movs	r0, #16
    1f24:	4b07      	ldr	r3, [pc, #28]	; (1f44 <I2C_HEATERS_PORT_init+0x28>)
    1f26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1f28:	4907      	ldr	r1, [pc, #28]	; (1f48 <I2C_HEATERS_PORT_init+0x2c>)
    1f2a:	2010      	movs	r0, #16
    1f2c:	4b07      	ldr	r3, [pc, #28]	; (1f4c <I2C_HEATERS_PORT_init+0x30>)
    1f2e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1f30:	2101      	movs	r1, #1
    1f32:	2011      	movs	r0, #17
    1f34:	4b03      	ldr	r3, [pc, #12]	; (1f44 <I2C_HEATERS_PORT_init+0x28>)
    1f36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1f38:	4905      	ldr	r1, [pc, #20]	; (1f50 <I2C_HEATERS_PORT_init+0x34>)
    1f3a:	2011      	movs	r0, #17
    1f3c:	4b03      	ldr	r3, [pc, #12]	; (1f4c <I2C_HEATERS_PORT_init+0x30>)
    1f3e:	4798      	blx	r3
}
    1f40:	bf00      	nop
    1f42:	bd80      	pop	{r7, pc}
    1f44:	00001af5 	.word	0x00001af5
    1f48:	00100002 	.word	0x00100002
    1f4c:	00001b29 	.word	0x00001b29
    1f50:	00110002 	.word	0x00110002

00001f54 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1f54:	b580      	push	{r7, lr}
    1f56:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f58:	2242      	movs	r2, #66	; 0x42
    1f5a:	2108      	movs	r1, #8
    1f5c:	4806      	ldr	r0, [pc, #24]	; (1f78 <I2C_HEATERS_CLOCK_init+0x24>)
    1f5e:	4b07      	ldr	r3, [pc, #28]	; (1f7c <I2C_HEATERS_CLOCK_init+0x28>)
    1f60:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f62:	224a      	movs	r2, #74	; 0x4a
    1f64:	2103      	movs	r1, #3
    1f66:	4804      	ldr	r0, [pc, #16]	; (1f78 <I2C_HEATERS_CLOCK_init+0x24>)
    1f68:	4b04      	ldr	r3, [pc, #16]	; (1f7c <I2C_HEATERS_CLOCK_init+0x28>)
    1f6a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1f6c:	4804      	ldr	r0, [pc, #16]	; (1f80 <I2C_HEATERS_CLOCK_init+0x2c>)
    1f6e:	4b05      	ldr	r3, [pc, #20]	; (1f84 <I2C_HEATERS_CLOCK_init+0x30>)
    1f70:	4798      	blx	r3
}
    1f72:	bf00      	nop
    1f74:	bd80      	pop	{r7, pc}
    1f76:	bf00      	nop
    1f78:	40001c00 	.word	0x40001c00
    1f7c:	000012d5 	.word	0x000012d5
    1f80:	40000800 	.word	0x40000800
    1f84:	000013db 	.word	0x000013db

00001f88 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1f88:	b580      	push	{r7, lr}
    1f8a:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    1f8c:	4b04      	ldr	r3, [pc, #16]	; (1fa0 <I2C_HEATERS_init+0x18>)
    1f8e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    1f90:	4904      	ldr	r1, [pc, #16]	; (1fa4 <I2C_HEATERS_init+0x1c>)
    1f92:	4805      	ldr	r0, [pc, #20]	; (1fa8 <I2C_HEATERS_init+0x20>)
    1f94:	4b05      	ldr	r3, [pc, #20]	; (1fac <I2C_HEATERS_init+0x24>)
    1f96:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1f98:	4b05      	ldr	r3, [pc, #20]	; (1fb0 <I2C_HEATERS_init+0x28>)
    1f9a:	4798      	blx	r3
}
    1f9c:	bf00      	nop
    1f9e:	bd80      	pop	{r7, pc}
    1fa0:	00001f55 	.word	0x00001f55
    1fa4:	40003400 	.word	0x40003400
    1fa8:	20009ef0 	.word	0x20009ef0
    1fac:	00002d91 	.word	0x00002d91
    1fb0:	00001f1d 	.word	0x00001f1d

00001fb4 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1fb4:	b580      	push	{r7, lr}
    1fb6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1fb8:	2100      	movs	r1, #0
    1fba:	203b      	movs	r0, #59	; 0x3b
    1fbc:	4b11      	ldr	r3, [pc, #68]	; (2004 <SPI_TEMP_PORT_init+0x50>)
    1fbe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1fc0:	2102      	movs	r1, #2
    1fc2:	203b      	movs	r0, #59	; 0x3b
    1fc4:	4b10      	ldr	r3, [pc, #64]	; (2008 <SPI_TEMP_PORT_init+0x54>)
    1fc6:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1fc8:	4910      	ldr	r1, [pc, #64]	; (200c <SPI_TEMP_PORT_init+0x58>)
    1fca:	203b      	movs	r0, #59	; 0x3b
    1fcc:	4b10      	ldr	r3, [pc, #64]	; (2010 <SPI_TEMP_PORT_init+0x5c>)
    1fce:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1fd0:	2100      	movs	r1, #0
    1fd2:	203a      	movs	r0, #58	; 0x3a
    1fd4:	4b0b      	ldr	r3, [pc, #44]	; (2004 <SPI_TEMP_PORT_init+0x50>)
    1fd6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1fd8:	2102      	movs	r1, #2
    1fda:	203a      	movs	r0, #58	; 0x3a
    1fdc:	4b0a      	ldr	r3, [pc, #40]	; (2008 <SPI_TEMP_PORT_init+0x54>)
    1fde:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1fe0:	490c      	ldr	r1, [pc, #48]	; (2014 <SPI_TEMP_PORT_init+0x60>)
    1fe2:	203a      	movs	r0, #58	; 0x3a
    1fe4:	4b0a      	ldr	r3, [pc, #40]	; (2010 <SPI_TEMP_PORT_init+0x5c>)
    1fe6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1fe8:	2101      	movs	r1, #1
    1fea:	203c      	movs	r0, #60	; 0x3c
    1fec:	4b06      	ldr	r3, [pc, #24]	; (2008 <SPI_TEMP_PORT_init+0x54>)
    1fee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1ff0:	2100      	movs	r1, #0
    1ff2:	203c      	movs	r0, #60	; 0x3c
    1ff4:	4b08      	ldr	r3, [pc, #32]	; (2018 <SPI_TEMP_PORT_init+0x64>)
    1ff6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1ff8:	4908      	ldr	r1, [pc, #32]	; (201c <SPI_TEMP_PORT_init+0x68>)
    1ffa:	203c      	movs	r0, #60	; 0x3c
    1ffc:	4b04      	ldr	r3, [pc, #16]	; (2010 <SPI_TEMP_PORT_init+0x5c>)
    1ffe:	4798      	blx	r3
}
    2000:	bf00      	nop
    2002:	bd80      	pop	{r7, pc}
    2004:	00001b81 	.word	0x00001b81
    2008:	00001b49 	.word	0x00001b49
    200c:	003b0003 	.word	0x003b0003
    2010:	00001b29 	.word	0x00001b29
    2014:	003a0003 	.word	0x003a0003
    2018:	00001af5 	.word	0x00001af5
    201c:	003c0003 	.word	0x003c0003

00002020 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    2020:	b580      	push	{r7, lr}
    2022:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2024:	2245      	movs	r2, #69	; 0x45
    2026:	2122      	movs	r1, #34	; 0x22
    2028:	4806      	ldr	r0, [pc, #24]	; (2044 <SPI_TEMP_CLOCK_init+0x24>)
    202a:	4b07      	ldr	r3, [pc, #28]	; (2048 <SPI_TEMP_CLOCK_init+0x28>)
    202c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    202e:	224a      	movs	r2, #74	; 0x4a
    2030:	2103      	movs	r1, #3
    2032:	4804      	ldr	r0, [pc, #16]	; (2044 <SPI_TEMP_CLOCK_init+0x24>)
    2034:	4b04      	ldr	r3, [pc, #16]	; (2048 <SPI_TEMP_CLOCK_init+0x28>)
    2036:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    2038:	4804      	ldr	r0, [pc, #16]	; (204c <SPI_TEMP_CLOCK_init+0x2c>)
    203a:	4b05      	ldr	r3, [pc, #20]	; (2050 <SPI_TEMP_CLOCK_init+0x30>)
    203c:	4798      	blx	r3
}
    203e:	bf00      	nop
    2040:	bd80      	pop	{r7, pc}
    2042:	bf00      	nop
    2044:	40001c00 	.word	0x40001c00
    2048:	000012d5 	.word	0x000012d5
    204c:	40000800 	.word	0x40000800
    2050:	0000155b 	.word	0x0000155b

00002054 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    2054:	b580      	push	{r7, lr}
    2056:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    2058:	4b05      	ldr	r3, [pc, #20]	; (2070 <SPI_TEMP_init+0x1c>)
    205a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    205c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2060:	4804      	ldr	r0, [pc, #16]	; (2074 <SPI_TEMP_init+0x20>)
    2062:	4b05      	ldr	r3, [pc, #20]	; (2078 <SPI_TEMP_init+0x24>)
    2064:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    2066:	4b05      	ldr	r3, [pc, #20]	; (207c <SPI_TEMP_init+0x28>)
    2068:	4798      	blx	r3
}
    206a:	bf00      	nop
    206c:	bd80      	pop	{r7, pc}
    206e:	bf00      	nop
    2070:	00002021 	.word	0x00002021
    2074:	20009df8 	.word	0x20009df8
    2078:	00003049 	.word	0x00003049
    207c:	00001fb5 	.word	0x00001fb5

00002080 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    2080:	b580      	push	{r7, lr}
    2082:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    2084:	2100      	movs	r1, #0
    2086:	2017      	movs	r0, #23
    2088:	4b07      	ldr	r3, [pc, #28]	; (20a8 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    208a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    208c:	4907      	ldr	r1, [pc, #28]	; (20ac <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    208e:	2017      	movs	r0, #23
    2090:	4b07      	ldr	r3, [pc, #28]	; (20b0 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    2092:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    2094:	2100      	movs	r1, #0
    2096:	2016      	movs	r0, #22
    2098:	4b03      	ldr	r3, [pc, #12]	; (20a8 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    209a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    209c:	4905      	ldr	r1, [pc, #20]	; (20b4 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    209e:	2016      	movs	r0, #22
    20a0:	4b03      	ldr	r3, [pc, #12]	; (20b0 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    20a2:	4798      	blx	r3
}
    20a4:	bf00      	nop
    20a6:	bd80      	pop	{r7, pc}
    20a8:	00001af5 	.word	0x00001af5
    20ac:	00170003 	.word	0x00170003
    20b0:	00001b29 	.word	0x00001b29
    20b4:	00160003 	.word	0x00160003

000020b8 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    20b8:	b580      	push	{r7, lr}
    20ba:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    20bc:	2244      	movs	r2, #68	; 0x44
    20be:	2123      	movs	r1, #35	; 0x23
    20c0:	4806      	ldr	r0, [pc, #24]	; (20dc <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    20c2:	4b07      	ldr	r3, [pc, #28]	; (20e0 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    20c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    20c6:	224a      	movs	r2, #74	; 0x4a
    20c8:	2103      	movs	r1, #3
    20ca:	4804      	ldr	r0, [pc, #16]	; (20dc <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    20cc:	4b04      	ldr	r3, [pc, #16]	; (20e0 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    20ce:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    20d0:	4804      	ldr	r0, [pc, #16]	; (20e4 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    20d2:	4b05      	ldr	r3, [pc, #20]	; (20e8 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    20d4:	4798      	blx	r3
}
    20d6:	bf00      	nop
    20d8:	bd80      	pop	{r7, pc}
    20da:	bf00      	nop
    20dc:	40001c00 	.word	0x40001c00
    20e0:	000012d5 	.word	0x000012d5
    20e4:	40000800 	.word	0x40000800
    20e8:	0000157b 	.word	0x0000157b

000020ec <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    20ec:	b580      	push	{r7, lr}
    20ee:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    20f0:	4b04      	ldr	r3, [pc, #16]	; (2104 <I2C_FLAPPER_VALVE_init+0x18>)
    20f2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    20f4:	4904      	ldr	r1, [pc, #16]	; (2108 <I2C_FLAPPER_VALVE_init+0x1c>)
    20f6:	4805      	ldr	r0, [pc, #20]	; (210c <I2C_FLAPPER_VALVE_init+0x20>)
    20f8:	4b05      	ldr	r3, [pc, #20]	; (2110 <I2C_FLAPPER_VALVE_init+0x24>)
    20fa:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    20fc:	4b05      	ldr	r3, [pc, #20]	; (2114 <I2C_FLAPPER_VALVE_init+0x28>)
    20fe:	4798      	blx	r3
}
    2100:	bf00      	nop
    2102:	bd80      	pop	{r7, pc}
    2104:	000020b9 	.word	0x000020b9
    2108:	43000400 	.word	0x43000400
    210c:	20009e94 	.word	0x20009e94
    2110:	00002d91 	.word	0x00002d91
    2114:	00002081 	.word	0x00002081

00002118 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    2118:	b580      	push	{r7, lr}
    211a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    211c:	2100      	movs	r1, #0
    211e:	2044      	movs	r0, #68	; 0x44
    2120:	4b11      	ldr	r3, [pc, #68]	; (2168 <SPI_HI3593_PORT_init+0x50>)
    2122:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    2124:	2102      	movs	r1, #2
    2126:	2044      	movs	r0, #68	; 0x44
    2128:	4b10      	ldr	r3, [pc, #64]	; (216c <SPI_HI3593_PORT_init+0x54>)
    212a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    212c:	4910      	ldr	r1, [pc, #64]	; (2170 <SPI_HI3593_PORT_init+0x58>)
    212e:	2044      	movs	r0, #68	; 0x44
    2130:	4b10      	ldr	r3, [pc, #64]	; (2174 <SPI_HI3593_PORT_init+0x5c>)
    2132:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    2134:	2100      	movs	r1, #0
    2136:	2045      	movs	r0, #69	; 0x45
    2138:	4b0b      	ldr	r3, [pc, #44]	; (2168 <SPI_HI3593_PORT_init+0x50>)
    213a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    213c:	2102      	movs	r1, #2
    213e:	2045      	movs	r0, #69	; 0x45
    2140:	4b0a      	ldr	r3, [pc, #40]	; (216c <SPI_HI3593_PORT_init+0x54>)
    2142:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    2144:	490c      	ldr	r1, [pc, #48]	; (2178 <SPI_HI3593_PORT_init+0x60>)
    2146:	2045      	movs	r0, #69	; 0x45
    2148:	4b0a      	ldr	r3, [pc, #40]	; (2174 <SPI_HI3593_PORT_init+0x5c>)
    214a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    214c:	2101      	movs	r1, #1
    214e:	2047      	movs	r0, #71	; 0x47
    2150:	4b06      	ldr	r3, [pc, #24]	; (216c <SPI_HI3593_PORT_init+0x54>)
    2152:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    2154:	2100      	movs	r1, #0
    2156:	2047      	movs	r0, #71	; 0x47
    2158:	4b08      	ldr	r3, [pc, #32]	; (217c <SPI_HI3593_PORT_init+0x64>)
    215a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    215c:	4908      	ldr	r1, [pc, #32]	; (2180 <SPI_HI3593_PORT_init+0x68>)
    215e:	2047      	movs	r0, #71	; 0x47
    2160:	4b04      	ldr	r3, [pc, #16]	; (2174 <SPI_HI3593_PORT_init+0x5c>)
    2162:	4798      	blx	r3
}
    2164:	bf00      	nop
    2166:	bd80      	pop	{r7, pc}
    2168:	00001b81 	.word	0x00001b81
    216c:	00001b49 	.word	0x00001b49
    2170:	00440002 	.word	0x00440002
    2174:	00001b29 	.word	0x00001b29
    2178:	00450002 	.word	0x00450002
    217c:	00001af5 	.word	0x00001af5
    2180:	00470002 	.word	0x00470002

00002184 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    2184:	b580      	push	{r7, lr}
    2186:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2188:	2242      	movs	r2, #66	; 0x42
    218a:	2124      	movs	r1, #36	; 0x24
    218c:	4806      	ldr	r0, [pc, #24]	; (21a8 <SPI_HI3593_CLOCK_init+0x24>)
    218e:	4b07      	ldr	r3, [pc, #28]	; (21ac <SPI_HI3593_CLOCK_init+0x28>)
    2190:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2192:	224a      	movs	r2, #74	; 0x4a
    2194:	2103      	movs	r1, #3
    2196:	4804      	ldr	r0, [pc, #16]	; (21a8 <SPI_HI3593_CLOCK_init+0x24>)
    2198:	4b04      	ldr	r3, [pc, #16]	; (21ac <SPI_HI3593_CLOCK_init+0x28>)
    219a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    219c:	4804      	ldr	r0, [pc, #16]	; (21b0 <SPI_HI3593_CLOCK_init+0x2c>)
    219e:	4b05      	ldr	r3, [pc, #20]	; (21b4 <SPI_HI3593_CLOCK_init+0x30>)
    21a0:	4798      	blx	r3
}
    21a2:	bf00      	nop
    21a4:	bd80      	pop	{r7, pc}
    21a6:	bf00      	nop
    21a8:	40001c00 	.word	0x40001c00
    21ac:	000012d5 	.word	0x000012d5
    21b0:	40000800 	.word	0x40000800
    21b4:	0000159b 	.word	0x0000159b

000021b8 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    21b8:	b580      	push	{r7, lr}
    21ba:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    21bc:	4b04      	ldr	r3, [pc, #16]	; (21d0 <SPI_HI3593_init+0x18>)
    21be:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    21c0:	4904      	ldr	r1, [pc, #16]	; (21d4 <SPI_HI3593_init+0x1c>)
    21c2:	4805      	ldr	r0, [pc, #20]	; (21d8 <SPI_HI3593_init+0x20>)
    21c4:	4b05      	ldr	r3, [pc, #20]	; (21dc <SPI_HI3593_init+0x24>)
    21c6:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    21c8:	4b05      	ldr	r3, [pc, #20]	; (21e0 <SPI_HI3593_init+0x28>)
    21ca:	4798      	blx	r3
}
    21cc:	bf00      	nop
    21ce:	bd80      	pop	{r7, pc}
    21d0:	00002185 	.word	0x00002185
    21d4:	43000800 	.word	0x43000800
    21d8:	20009de0 	.word	0x20009de0
    21dc:	00003049 	.word	0x00003049
    21e0:	00002119 	.word	0x00002119

000021e4 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    21e4:	b580      	push	{r7, lr}
    21e6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    21e8:	2100      	movs	r1, #0
    21ea:	2068      	movs	r0, #104	; 0x68
    21ec:	4b07      	ldr	r3, [pc, #28]	; (220c <I2C_FANS_PORT_init+0x28>)
    21ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    21f0:	4907      	ldr	r1, [pc, #28]	; (2210 <I2C_FANS_PORT_init+0x2c>)
    21f2:	2068      	movs	r0, #104	; 0x68
    21f4:	4b07      	ldr	r3, [pc, #28]	; (2214 <I2C_FANS_PORT_init+0x30>)
    21f6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    21f8:	2100      	movs	r1, #0
    21fa:	2069      	movs	r0, #105	; 0x69
    21fc:	4b03      	ldr	r3, [pc, #12]	; (220c <I2C_FANS_PORT_init+0x28>)
    21fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    2200:	4905      	ldr	r1, [pc, #20]	; (2218 <I2C_FANS_PORT_init+0x34>)
    2202:	2069      	movs	r0, #105	; 0x69
    2204:	4b03      	ldr	r3, [pc, #12]	; (2214 <I2C_FANS_PORT_init+0x30>)
    2206:	4798      	blx	r3
}
    2208:	bf00      	nop
    220a:	bd80      	pop	{r7, pc}
    220c:	00001af5 	.word	0x00001af5
    2210:	00680002 	.word	0x00680002
    2214:	00001b29 	.word	0x00001b29
    2218:	00690002 	.word	0x00690002

0000221c <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    221c:	b580      	push	{r7, lr}
    221e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2220:	2244      	movs	r2, #68	; 0x44
    2222:	2125      	movs	r1, #37	; 0x25
    2224:	4806      	ldr	r0, [pc, #24]	; (2240 <I2C_FANS_CLOCK_init+0x24>)
    2226:	4b07      	ldr	r3, [pc, #28]	; (2244 <I2C_FANS_CLOCK_init+0x28>)
    2228:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    222a:	224a      	movs	r2, #74	; 0x4a
    222c:	2103      	movs	r1, #3
    222e:	4804      	ldr	r0, [pc, #16]	; (2240 <I2C_FANS_CLOCK_init+0x24>)
    2230:	4b04      	ldr	r3, [pc, #16]	; (2244 <I2C_FANS_CLOCK_init+0x28>)
    2232:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    2234:	4804      	ldr	r0, [pc, #16]	; (2248 <I2C_FANS_CLOCK_init+0x2c>)
    2236:	4b05      	ldr	r3, [pc, #20]	; (224c <I2C_FANS_CLOCK_init+0x30>)
    2238:	4798      	blx	r3
}
    223a:	bf00      	nop
    223c:	bd80      	pop	{r7, pc}
    223e:	bf00      	nop
    2240:	40001c00 	.word	0x40001c00
    2244:	000012d5 	.word	0x000012d5
    2248:	40000800 	.word	0x40000800
    224c:	000015bb 	.word	0x000015bb

00002250 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    2250:	b580      	push	{r7, lr}
    2252:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    2254:	4b04      	ldr	r3, [pc, #16]	; (2268 <I2C_FANS_init+0x18>)
    2256:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    2258:	4904      	ldr	r1, [pc, #16]	; (226c <I2C_FANS_init+0x1c>)
    225a:	4805      	ldr	r0, [pc, #20]	; (2270 <I2C_FANS_init+0x20>)
    225c:	4b05      	ldr	r3, [pc, #20]	; (2274 <I2C_FANS_init+0x24>)
    225e:	4798      	blx	r3
	I2C_FANS_PORT_init();
    2260:	4b05      	ldr	r3, [pc, #20]	; (2278 <I2C_FANS_init+0x28>)
    2262:	4798      	blx	r3
}
    2264:	bf00      	nop
    2266:	bd80      	pop	{r7, pc}
    2268:	0000221d 	.word	0x0000221d
    226c:	43000c00 	.word	0x43000c00
    2270:	20009e10 	.word	0x20009e10
    2274:	00002d91 	.word	0x00002d91
    2278:	000021e5 	.word	0x000021e5

0000227c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    227c:	b580      	push	{r7, lr}
    227e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    2280:	4808      	ldr	r0, [pc, #32]	; (22a4 <TIMER_USB_init+0x28>)
    2282:	4b09      	ldr	r3, [pc, #36]	; (22a8 <TIMER_USB_init+0x2c>)
    2284:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2286:	2243      	movs	r2, #67	; 0x43
    2288:	2109      	movs	r1, #9
    228a:	4808      	ldr	r0, [pc, #32]	; (22ac <TIMER_USB_init+0x30>)
    228c:	4b08      	ldr	r3, [pc, #32]	; (22b0 <TIMER_USB_init+0x34>)
    228e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    2290:	4b08      	ldr	r3, [pc, #32]	; (22b4 <TIMER_USB_init+0x38>)
    2292:	4798      	blx	r3
    2294:	4603      	mov	r3, r0
    2296:	461a      	mov	r2, r3
    2298:	4907      	ldr	r1, [pc, #28]	; (22b8 <TIMER_USB_init+0x3c>)
    229a:	4808      	ldr	r0, [pc, #32]	; (22bc <TIMER_USB_init+0x40>)
    229c:	4b08      	ldr	r3, [pc, #32]	; (22c0 <TIMER_USB_init+0x44>)
    229e:	4798      	blx	r3
}
    22a0:	bf00      	nop
    22a2:	bd80      	pop	{r7, pc}
    22a4:	40000800 	.word	0x40000800
    22a8:	000013fb 	.word	0x000013fb
    22ac:	40001c00 	.word	0x40001c00
    22b0:	000012d5 	.word	0x000012d5
    22b4:	00008c15 	.word	0x00008c15
    22b8:	40003800 	.word	0x40003800
    22bc:	20009f58 	.word	0x20009f58
    22c0:	000032d9 	.word	0x000032d9

000022c4 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    22c8:	4808      	ldr	r0, [pc, #32]	; (22ec <TIMER_ARINC_init+0x28>)
    22ca:	4b09      	ldr	r3, [pc, #36]	; (22f0 <TIMER_ARINC_init+0x2c>)
    22cc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    22ce:	2244      	movs	r2, #68	; 0x44
    22d0:	211a      	movs	r1, #26
    22d2:	4808      	ldr	r0, [pc, #32]	; (22f4 <TIMER_ARINC_init+0x30>)
    22d4:	4b08      	ldr	r3, [pc, #32]	; (22f8 <TIMER_ARINC_init+0x34>)
    22d6:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    22d8:	4b08      	ldr	r3, [pc, #32]	; (22fc <TIMER_ARINC_init+0x38>)
    22da:	4798      	blx	r3
    22dc:	4603      	mov	r3, r0
    22de:	461a      	mov	r2, r3
    22e0:	4907      	ldr	r1, [pc, #28]	; (2300 <TIMER_ARINC_init+0x3c>)
    22e2:	4808      	ldr	r0, [pc, #32]	; (2304 <TIMER_ARINC_init+0x40>)
    22e4:	4b08      	ldr	r3, [pc, #32]	; (2308 <TIMER_ARINC_init+0x44>)
    22e6:	4798      	blx	r3
}
    22e8:	bf00      	nop
    22ea:	bd80      	pop	{r7, pc}
    22ec:	40000800 	.word	0x40000800
    22f0:	000014bb 	.word	0x000014bb
    22f4:	40001c00 	.word	0x40001c00
    22f8:	000012d5 	.word	0x000012d5
    22fc:	00008c15 	.word	0x00008c15
    2300:	4101a000 	.word	0x4101a000
    2304:	20009f38 	.word	0x20009f38
    2308:	000032d9 	.word	0x000032d9

0000230c <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    230c:	b580      	push	{r7, lr}
    230e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    2310:	4808      	ldr	r0, [pc, #32]	; (2334 <TIMER_MAINTENANCE_init+0x28>)
    2312:	4b09      	ldr	r3, [pc, #36]	; (2338 <TIMER_MAINTENANCE_init+0x2c>)
    2314:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2316:	2246      	movs	r2, #70	; 0x46
    2318:	211e      	movs	r1, #30
    231a:	4808      	ldr	r0, [pc, #32]	; (233c <TIMER_MAINTENANCE_init+0x30>)
    231c:	4b08      	ldr	r3, [pc, #32]	; (2340 <TIMER_MAINTENANCE_init+0x34>)
    231e:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    2320:	4b08      	ldr	r3, [pc, #32]	; (2344 <TIMER_MAINTENANCE_init+0x38>)
    2322:	4798      	blx	r3
    2324:	4603      	mov	r3, r0
    2326:	461a      	mov	r2, r3
    2328:	4907      	ldr	r1, [pc, #28]	; (2348 <TIMER_MAINTENANCE_init+0x3c>)
    232a:	4808      	ldr	r0, [pc, #32]	; (234c <TIMER_MAINTENANCE_init+0x40>)
    232c:	4b08      	ldr	r3, [pc, #32]	; (2350 <TIMER_MAINTENANCE_init+0x44>)
    232e:	4798      	blx	r3
}
    2330:	bf00      	nop
    2332:	bd80      	pop	{r7, pc}
    2334:	40000800 	.word	0x40000800
    2338:	000014fb 	.word	0x000014fb
    233c:	40001c00 	.word	0x40001c00
    2340:	000012d5 	.word	0x000012d5
    2344:	00008c15 	.word	0x00008c15
    2348:	42001400 	.word	0x42001400
    234c:	20009e30 	.word	0x20009e30
    2350:	000032d9 	.word	0x000032d9

00002354 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    2354:	b580      	push	{r7, lr}
    2356:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    2358:	4808      	ldr	r0, [pc, #32]	; (237c <TIMER_INTERFACE_init+0x28>)
    235a:	4b09      	ldr	r3, [pc, #36]	; (2380 <TIMER_INTERFACE_init+0x2c>)
    235c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    235e:	2246      	movs	r2, #70	; 0x46
    2360:	211e      	movs	r1, #30
    2362:	4808      	ldr	r0, [pc, #32]	; (2384 <TIMER_INTERFACE_init+0x30>)
    2364:	4b08      	ldr	r3, [pc, #32]	; (2388 <TIMER_INTERFACE_init+0x34>)
    2366:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    2368:	4b08      	ldr	r3, [pc, #32]	; (238c <TIMER_INTERFACE_init+0x38>)
    236a:	4798      	blx	r3
    236c:	4603      	mov	r3, r0
    236e:	461a      	mov	r2, r3
    2370:	4907      	ldr	r1, [pc, #28]	; (2390 <TIMER_INTERFACE_init+0x3c>)
    2372:	4808      	ldr	r0, [pc, #32]	; (2394 <TIMER_INTERFACE_init+0x40>)
    2374:	4b08      	ldr	r3, [pc, #32]	; (2398 <TIMER_INTERFACE_init+0x44>)
    2376:	4798      	blx	r3
}
    2378:	bf00      	nop
    237a:	bd80      	pop	{r7, pc}
    237c:	40000800 	.word	0x40000800
    2380:	0000151b 	.word	0x0000151b
    2384:	40001c00 	.word	0x40001c00
    2388:	000012d5 	.word	0x000012d5
    238c:	00008c15 	.word	0x00008c15
    2390:	42001800 	.word	0x42001800
    2394:	20009e74 	.word	0x20009e74
    2398:	000032d9 	.word	0x000032d9

0000239c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    239c:	b580      	push	{r7, lr}
    239e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    23a0:	4808      	ldr	r0, [pc, #32]	; (23c4 <TIMER_EVENT_init+0x28>)
    23a2:	4b09      	ldr	r3, [pc, #36]	; (23c8 <TIMER_EVENT_init+0x2c>)
    23a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    23a6:	2246      	movs	r2, #70	; 0x46
    23a8:	2127      	movs	r1, #39	; 0x27
    23aa:	4808      	ldr	r0, [pc, #32]	; (23cc <TIMER_EVENT_init+0x30>)
    23ac:	4b08      	ldr	r3, [pc, #32]	; (23d0 <TIMER_EVENT_init+0x34>)
    23ae:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    23b0:	4b08      	ldr	r3, [pc, #32]	; (23d4 <TIMER_EVENT_init+0x38>)
    23b2:	4798      	blx	r3
    23b4:	4603      	mov	r3, r0
    23b6:	461a      	mov	r2, r3
    23b8:	4907      	ldr	r1, [pc, #28]	; (23d8 <TIMER_EVENT_init+0x3c>)
    23ba:	4808      	ldr	r0, [pc, #32]	; (23dc <TIMER_EVENT_init+0x40>)
    23bc:	4b08      	ldr	r3, [pc, #32]	; (23e0 <TIMER_EVENT_init+0x44>)
    23be:	4798      	blx	r3
}
    23c0:	bf00      	nop
    23c2:	bd80      	pop	{r7, pc}
    23c4:	40000800 	.word	0x40000800
    23c8:	000015db 	.word	0x000015db
    23cc:	40001c00 	.word	0x40001c00
    23d0:	000012d5 	.word	0x000012d5
    23d4:	00008c15 	.word	0x00008c15
    23d8:	43001400 	.word	0x43001400
    23dc:	20009e54 	.word	0x20009e54
    23e0:	000032d9 	.word	0x000032d9

000023e4 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    23e4:	b480      	push	{r7}
    23e6:	af00      	add	r7, sp, #0
}
    23e8:	bf00      	nop
    23ea:	46bd      	mov	sp, r7
    23ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    23f0:	4770      	bx	lr
	...

000023f4 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    23f4:	b580      	push	{r7, lr}
    23f6:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    23f8:	4804      	ldr	r0, [pc, #16]	; (240c <LIVE_PULSE_CLOCK_init+0x18>)
    23fa:	4b05      	ldr	r3, [pc, #20]	; (2410 <LIVE_PULSE_CLOCK_init+0x1c>)
    23fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    23fe:	2240      	movs	r2, #64	; 0x40
    2400:	2127      	movs	r1, #39	; 0x27
    2402:	4804      	ldr	r0, [pc, #16]	; (2414 <LIVE_PULSE_CLOCK_init+0x20>)
    2404:	4b04      	ldr	r3, [pc, #16]	; (2418 <LIVE_PULSE_CLOCK_init+0x24>)
    2406:	4798      	blx	r3
}
    2408:	bf00      	nop
    240a:	bd80      	pop	{r7, pc}
    240c:	40000800 	.word	0x40000800
    2410:	000015fb 	.word	0x000015fb
    2414:	40001c00 	.word	0x40001c00
    2418:	000012d5 	.word	0x000012d5

0000241c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    241c:	b580      	push	{r7, lr}
    241e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    2420:	4b06      	ldr	r3, [pc, #24]	; (243c <LIVE_PULSE_init+0x20>)
    2422:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    2424:	4b06      	ldr	r3, [pc, #24]	; (2440 <LIVE_PULSE_init+0x24>)
    2426:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    2428:	4b06      	ldr	r3, [pc, #24]	; (2444 <LIVE_PULSE_init+0x28>)
    242a:	4798      	blx	r3
    242c:	4603      	mov	r3, r0
    242e:	461a      	mov	r2, r3
    2430:	4905      	ldr	r1, [pc, #20]	; (2448 <LIVE_PULSE_init+0x2c>)
    2432:	4806      	ldr	r0, [pc, #24]	; (244c <LIVE_PULSE_init+0x30>)
    2434:	4b06      	ldr	r3, [pc, #24]	; (2450 <LIVE_PULSE_init+0x34>)
    2436:	4798      	blx	r3
}
    2438:	bf00      	nop
    243a:	bd80      	pop	{r7, pc}
    243c:	000023f5 	.word	0x000023f5
    2440:	000023e5 	.word	0x000023e5
    2444:	00008c29 	.word	0x00008c29
    2448:	43001800 	.word	0x43001800
    244c:	20009eb4 	.word	0x20009eb4
    2450:	00002e8d 	.word	0x00002e8d

00002454 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    2454:	b580      	push	{r7, lr}
    2456:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    2458:	4804      	ldr	r0, [pc, #16]	; (246c <TIMER_HVAC_CLOCK_init+0x18>)
    245a:	4b05      	ldr	r3, [pc, #20]	; (2470 <TIMER_HVAC_CLOCK_init+0x1c>)
    245c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    245e:	2244      	movs	r2, #68	; 0x44
    2460:	2119      	movs	r1, #25
    2462:	4804      	ldr	r0, [pc, #16]	; (2474 <TIMER_HVAC_CLOCK_init+0x20>)
    2464:	4b04      	ldr	r3, [pc, #16]	; (2478 <TIMER_HVAC_CLOCK_init+0x24>)
    2466:	4798      	blx	r3
}
    2468:	bf00      	nop
    246a:	bd80      	pop	{r7, pc}
    246c:	40000800 	.word	0x40000800
    2470:	0000147b 	.word	0x0000147b
    2474:	40001c00 	.word	0x40001c00
    2478:	000012d5 	.word	0x000012d5

0000247c <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    247c:	b580      	push	{r7, lr}
    247e:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    2480:	4b05      	ldr	r3, [pc, #20]	; (2498 <TIMER_HVAC_init+0x1c>)
    2482:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    2484:	4b05      	ldr	r3, [pc, #20]	; (249c <TIMER_HVAC_init+0x20>)
    2486:	4798      	blx	r3
    2488:	4603      	mov	r3, r0
    248a:	461a      	mov	r2, r3
    248c:	4904      	ldr	r1, [pc, #16]	; (24a0 <TIMER_HVAC_init+0x24>)
    248e:	4805      	ldr	r0, [pc, #20]	; (24a4 <TIMER_HVAC_init+0x28>)
    2490:	4b05      	ldr	r3, [pc, #20]	; (24a8 <TIMER_HVAC_init+0x2c>)
    2492:	4798      	blx	r3
}
    2494:	bf00      	nop
    2496:	bd80      	pop	{r7, pc}
    2498:	00002455 	.word	0x00002455
    249c:	00007ff9 	.word	0x00007ff9
    24a0:	41016000 	.word	0x41016000
    24a4:	20009f78 	.word	0x20009f78
    24a8:	000032d9 	.word	0x000032d9

000024ac <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    24ac:	b580      	push	{r7, lr}
    24ae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    24b0:	4804      	ldr	r0, [pc, #16]	; (24c4 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    24b2:	4b05      	ldr	r3, [pc, #20]	; (24c8 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    24b4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    24b6:	2244      	movs	r2, #68	; 0x44
    24b8:	2119      	movs	r1, #25
    24ba:	4804      	ldr	r0, [pc, #16]	; (24cc <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    24bc:	4b04      	ldr	r3, [pc, #16]	; (24d0 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    24be:	4798      	blx	r3
}
    24c0:	bf00      	nop
    24c2:	bd80      	pop	{r7, pc}
    24c4:	40000800 	.word	0x40000800
    24c8:	0000149b 	.word	0x0000149b
    24cc:	40001c00 	.word	0x40001c00
    24d0:	000012d5 	.word	0x000012d5

000024d4 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    24d4:	b580      	push	{r7, lr}
    24d6:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    24d8:	4b05      	ldr	r3, [pc, #20]	; (24f0 <TIMER_TEMPERATURES_init+0x1c>)
    24da:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    24dc:	4b05      	ldr	r3, [pc, #20]	; (24f4 <TIMER_TEMPERATURES_init+0x20>)
    24de:	4798      	blx	r3
    24e0:	4603      	mov	r3, r0
    24e2:	461a      	mov	r2, r3
    24e4:	4904      	ldr	r1, [pc, #16]	; (24f8 <TIMER_TEMPERATURES_init+0x24>)
    24e6:	4805      	ldr	r0, [pc, #20]	; (24fc <TIMER_TEMPERATURES_init+0x28>)
    24e8:	4b05      	ldr	r3, [pc, #20]	; (2500 <TIMER_TEMPERATURES_init+0x2c>)
    24ea:	4798      	blx	r3
}
    24ec:	bf00      	nop
    24ee:	bd80      	pop	{r7, pc}
    24f0:	000024ad 	.word	0x000024ad
    24f4:	00007ff9 	.word	0x00007ff9
    24f8:	41018000 	.word	0x41018000
    24fc:	20009dc0 	.word	0x20009dc0
    2500:	000032d9 	.word	0x000032d9

00002504 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    2504:	b580      	push	{r7, lr}
    2506:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    2508:	4804      	ldr	r0, [pc, #16]	; (251c <TIMER_CCU_CLOCK_init+0x18>)
    250a:	4b05      	ldr	r3, [pc, #20]	; (2520 <TIMER_CCU_CLOCK_init+0x1c>)
    250c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    250e:	2240      	movs	r2, #64	; 0x40
    2510:	211d      	movs	r1, #29
    2512:	4804      	ldr	r0, [pc, #16]	; (2524 <TIMER_CCU_CLOCK_init+0x20>)
    2514:	4b04      	ldr	r3, [pc, #16]	; (2528 <TIMER_CCU_CLOCK_init+0x24>)
    2516:	4798      	blx	r3
}
    2518:	bf00      	nop
    251a:	bd80      	pop	{r7, pc}
    251c:	40000800 	.word	0x40000800
    2520:	000014db 	.word	0x000014db
    2524:	40001c00 	.word	0x40001c00
    2528:	000012d5 	.word	0x000012d5

0000252c <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    252c:	b580      	push	{r7, lr}
    252e:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    2530:	4b05      	ldr	r3, [pc, #20]	; (2548 <TIMER_CCU_init+0x1c>)
    2532:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    2534:	4b05      	ldr	r3, [pc, #20]	; (254c <TIMER_CCU_init+0x20>)
    2536:	4798      	blx	r3
    2538:	4603      	mov	r3, r0
    253a:	461a      	mov	r2, r3
    253c:	4904      	ldr	r1, [pc, #16]	; (2550 <TIMER_CCU_init+0x24>)
    253e:	4805      	ldr	r0, [pc, #20]	; (2554 <TIMER_CCU_init+0x28>)
    2540:	4b05      	ldr	r3, [pc, #20]	; (2558 <TIMER_CCU_init+0x2c>)
    2542:	4798      	blx	r3
}
    2544:	bf00      	nop
    2546:	bd80      	pop	{r7, pc}
    2548:	00002505 	.word	0x00002505
    254c:	00007ff9 	.word	0x00007ff9
    2550:	42000c00 	.word	0x42000c00
    2554:	20009ed0 	.word	0x20009ed0
    2558:	000032d9 	.word	0x000032d9

0000255c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    255c:	b580      	push	{r7, lr}
    255e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    2560:	2102      	movs	r1, #2
    2562:	2018      	movs	r0, #24
    2564:	4b0f      	ldr	r3, [pc, #60]	; (25a4 <CDCUSB_PORT_init+0x48>)
    2566:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    2568:	2100      	movs	r1, #0
    256a:	2018      	movs	r0, #24
    256c:	4b0e      	ldr	r3, [pc, #56]	; (25a8 <CDCUSB_PORT_init+0x4c>)
    256e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    2570:	2100      	movs	r1, #0
    2572:	2018      	movs	r0, #24
    2574:	4b0d      	ldr	r3, [pc, #52]	; (25ac <CDCUSB_PORT_init+0x50>)
    2576:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2578:	490d      	ldr	r1, [pc, #52]	; (25b0 <CDCUSB_PORT_init+0x54>)
    257a:	2018      	movs	r0, #24
    257c:	4b0d      	ldr	r3, [pc, #52]	; (25b4 <CDCUSB_PORT_init+0x58>)
    257e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2580:	2102      	movs	r1, #2
    2582:	2019      	movs	r0, #25
    2584:	4b07      	ldr	r3, [pc, #28]	; (25a4 <CDCUSB_PORT_init+0x48>)
    2586:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2588:	2100      	movs	r1, #0
    258a:	2019      	movs	r0, #25
    258c:	4b06      	ldr	r3, [pc, #24]	; (25a8 <CDCUSB_PORT_init+0x4c>)
    258e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2590:	2100      	movs	r1, #0
    2592:	2019      	movs	r0, #25
    2594:	4b05      	ldr	r3, [pc, #20]	; (25ac <CDCUSB_PORT_init+0x50>)
    2596:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2598:	4907      	ldr	r1, [pc, #28]	; (25b8 <CDCUSB_PORT_init+0x5c>)
    259a:	2019      	movs	r0, #25
    259c:	4b05      	ldr	r3, [pc, #20]	; (25b4 <CDCUSB_PORT_init+0x58>)
    259e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    25a0:	bf00      	nop
    25a2:	bd80      	pop	{r7, pc}
    25a4:	00001b49 	.word	0x00001b49
    25a8:	00001b81 	.word	0x00001b81
    25ac:	00001af5 	.word	0x00001af5
    25b0:	00180007 	.word	0x00180007
    25b4:	00001b29 	.word	0x00001b29
    25b8:	00190007 	.word	0x00190007

000025bc <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    25bc:	b580      	push	{r7, lr}
    25be:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    25c0:	2242      	movs	r2, #66	; 0x42
    25c2:	210a      	movs	r1, #10
    25c4:	4805      	ldr	r0, [pc, #20]	; (25dc <CDCUSB_CLOCK_init+0x20>)
    25c6:	4b06      	ldr	r3, [pc, #24]	; (25e0 <CDCUSB_CLOCK_init+0x24>)
    25c8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    25ca:	4806      	ldr	r0, [pc, #24]	; (25e4 <CDCUSB_CLOCK_init+0x28>)
    25cc:	4b06      	ldr	r3, [pc, #24]	; (25e8 <CDCUSB_CLOCK_init+0x2c>)
    25ce:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    25d0:	4804      	ldr	r0, [pc, #16]	; (25e4 <CDCUSB_CLOCK_init+0x28>)
    25d2:	4b06      	ldr	r3, [pc, #24]	; (25ec <CDCUSB_CLOCK_init+0x30>)
    25d4:	4798      	blx	r3
}
    25d6:	bf00      	nop
    25d8:	bd80      	pop	{r7, pc}
    25da:	bf00      	nop
    25dc:	40001c00 	.word	0x40001c00
    25e0:	000012d5 	.word	0x000012d5
    25e4:	40000800 	.word	0x40000800
    25e8:	000012fb 	.word	0x000012fb
    25ec:	0000141b 	.word	0x0000141b

000025f0 <CDCUSB_init>:

void CDCUSB_init(void)
{
    25f0:	b580      	push	{r7, lr}
    25f2:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    25f4:	4b03      	ldr	r3, [pc, #12]	; (2604 <CDCUSB_init+0x14>)
    25f6:	4798      	blx	r3
	usb_d_init();
    25f8:	4b03      	ldr	r3, [pc, #12]	; (2608 <CDCUSB_init+0x18>)
    25fa:	4798      	blx	r3
	CDCUSB_PORT_init();
    25fc:	4b03      	ldr	r3, [pc, #12]	; (260c <CDCUSB_init+0x1c>)
    25fe:	4798      	blx	r3
}
    2600:	bf00      	nop
    2602:	bd80      	pop	{r7, pc}
    2604:	000025bd 	.word	0x000025bd
    2608:	00003b35 	.word	0x00003b35
    260c:	0000255d 	.word	0x0000255d

00002610 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    2610:	b580      	push	{r7, lr}
    2612:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    2614:	4802      	ldr	r0, [pc, #8]	; (2620 <WATCHDOG_CLOCK_init+0x10>)
    2616:	4b03      	ldr	r3, [pc, #12]	; (2624 <WATCHDOG_CLOCK_init+0x14>)
    2618:	4798      	blx	r3
}
    261a:	bf00      	nop
    261c:	bd80      	pop	{r7, pc}
    261e:	bf00      	nop
    2620:	40000800 	.word	0x40000800
    2624:	0000137b 	.word	0x0000137b

00002628 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2628:	b580      	push	{r7, lr}
    262a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    262c:	4b03      	ldr	r3, [pc, #12]	; (263c <WATCHDOG_init+0x14>)
    262e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2630:	4903      	ldr	r1, [pc, #12]	; (2640 <WATCHDOG_init+0x18>)
    2632:	4804      	ldr	r0, [pc, #16]	; (2644 <WATCHDOG_init+0x1c>)
    2634:	4b04      	ldr	r3, [pc, #16]	; (2648 <WATCHDOG_init+0x20>)
    2636:	4798      	blx	r3
}
    2638:	bf00      	nop
    263a:	bd80      	pop	{r7, pc}
    263c:	00002611 	.word	0x00002611
    2640:	40002000 	.word	0x40002000
    2644:	20009fb8 	.word	0x20009fb8
    2648:	00001bc9 	.word	0x00001bc9

0000264c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    264c:	b580      	push	{r7, lr}
    264e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    2650:	4904      	ldr	r1, [pc, #16]	; (2664 <CAN_CCU_PORT_init+0x18>)
    2652:	202d      	movs	r0, #45	; 0x2d
    2654:	4b04      	ldr	r3, [pc, #16]	; (2668 <CAN_CCU_PORT_init+0x1c>)
    2656:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    2658:	4904      	ldr	r1, [pc, #16]	; (266c <CAN_CCU_PORT_init+0x20>)
    265a:	202c      	movs	r0, #44	; 0x2c
    265c:	4b02      	ldr	r3, [pc, #8]	; (2668 <CAN_CCU_PORT_init+0x1c>)
    265e:	4798      	blx	r3
}
    2660:	bf00      	nop
    2662:	bd80      	pop	{r7, pc}
    2664:	002d0007 	.word	0x002d0007
    2668:	00001b29 	.word	0x00001b29
    266c:	002c0007 	.word	0x002c0007

00002670 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    2670:	b580      	push	{r7, lr}
    2672:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    2674:	4807      	ldr	r0, [pc, #28]	; (2694 <CAN_CCU_init+0x24>)
    2676:	4b08      	ldr	r3, [pc, #32]	; (2698 <CAN_CCU_init+0x28>)
    2678:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    267a:	2249      	movs	r2, #73	; 0x49
    267c:	211c      	movs	r1, #28
    267e:	4807      	ldr	r0, [pc, #28]	; (269c <CAN_CCU_init+0x2c>)
    2680:	4b07      	ldr	r3, [pc, #28]	; (26a0 <CAN_CCU_init+0x30>)
    2682:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    2684:	4907      	ldr	r1, [pc, #28]	; (26a4 <CAN_CCU_init+0x34>)
    2686:	4808      	ldr	r0, [pc, #32]	; (26a8 <CAN_CCU_init+0x38>)
    2688:	4b08      	ldr	r3, [pc, #32]	; (26ac <CAN_CCU_init+0x3c>)
    268a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    268c:	4b08      	ldr	r3, [pc, #32]	; (26b0 <CAN_CCU_init+0x40>)
    268e:	4798      	blx	r3
}
    2690:	bf00      	nop
    2692:	bd80      	pop	{r7, pc}
    2694:	40000800 	.word	0x40000800
    2698:	0000133b 	.word	0x0000133b
    269c:	40001c00 	.word	0x40001c00
    26a0:	000012d5 	.word	0x000012d5
    26a4:	42000400 	.word	0x42000400
    26a8:	20009f10 	.word	0x20009f10
    26ac:	00002915 	.word	0x00002915
    26b0:	0000264d 	.word	0x0000264d

000026b4 <system_init>:

void system_init(void)
{
    26b4:	b580      	push	{r7, lr}
    26b6:	af00      	add	r7, sp, #0
	init_mcu();
    26b8:	4b5f      	ldr	r3, [pc, #380]	; (2838 <system_init+0x184>)
    26ba:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    26bc:	2100      	movs	r1, #0
    26be:	2007      	movs	r0, #7
    26c0:	4b5e      	ldr	r3, [pc, #376]	; (283c <system_init+0x188>)
    26c2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    26c4:	2102      	movs	r1, #2
    26c6:	2007      	movs	r0, #7
    26c8:	4b5d      	ldr	r3, [pc, #372]	; (2840 <system_init+0x18c>)
    26ca:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    26cc:	f04f 31ff 	mov.w	r1, #4294967295
    26d0:	2007      	movs	r0, #7
    26d2:	4b5c      	ldr	r3, [pc, #368]	; (2844 <system_init+0x190>)
    26d4:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    26d6:	2101      	movs	r1, #1
    26d8:	200f      	movs	r0, #15
    26da:	4b58      	ldr	r3, [pc, #352]	; (283c <system_init+0x188>)
    26dc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    26de:	2102      	movs	r1, #2
    26e0:	200f      	movs	r0, #15
    26e2:	4b57      	ldr	r3, [pc, #348]	; (2840 <system_init+0x18c>)
    26e4:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    26e6:	f04f 31ff 	mov.w	r1, #4294967295
    26ea:	200f      	movs	r0, #15
    26ec:	4b55      	ldr	r3, [pc, #340]	; (2844 <system_init+0x190>)
    26ee:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    26f0:	2101      	movs	r1, #1
    26f2:	2013      	movs	r0, #19
    26f4:	4b51      	ldr	r3, [pc, #324]	; (283c <system_init+0x188>)
    26f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    26f8:	2102      	movs	r1, #2
    26fa:	2013      	movs	r0, #19
    26fc:	4b50      	ldr	r3, [pc, #320]	; (2840 <system_init+0x18c>)
    26fe:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2700:	f04f 31ff 	mov.w	r1, #4294967295
    2704:	2013      	movs	r0, #19
    2706:	4b4f      	ldr	r3, [pc, #316]	; (2844 <system_init+0x190>)
    2708:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    270a:	2101      	movs	r1, #1
    270c:	201b      	movs	r0, #27
    270e:	4b4b      	ldr	r3, [pc, #300]	; (283c <system_init+0x188>)
    2710:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    2712:	2102      	movs	r1, #2
    2714:	201b      	movs	r0, #27
    2716:	4b4a      	ldr	r3, [pc, #296]	; (2840 <system_init+0x18c>)
    2718:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    271a:	f04f 31ff 	mov.w	r1, #4294967295
    271e:	201b      	movs	r0, #27
    2720:	4b48      	ldr	r3, [pc, #288]	; (2844 <system_init+0x190>)
    2722:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2724:	2101      	movs	r1, #1
    2726:	2027      	movs	r0, #39	; 0x27
    2728:	4b44      	ldr	r3, [pc, #272]	; (283c <system_init+0x188>)
    272a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    272c:	2102      	movs	r1, #2
    272e:	2027      	movs	r0, #39	; 0x27
    2730:	4b43      	ldr	r3, [pc, #268]	; (2840 <system_init+0x18c>)
    2732:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2734:	f04f 31ff 	mov.w	r1, #4294967295
    2738:	2027      	movs	r0, #39	; 0x27
    273a:	4b42      	ldr	r3, [pc, #264]	; (2844 <system_init+0x190>)
    273c:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    273e:	2101      	movs	r1, #1
    2740:	203d      	movs	r0, #61	; 0x3d
    2742:	4b3e      	ldr	r3, [pc, #248]	; (283c <system_init+0x188>)
    2744:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    2746:	2102      	movs	r1, #2
    2748:	203d      	movs	r0, #61	; 0x3d
    274a:	4b3d      	ldr	r3, [pc, #244]	; (2840 <system_init+0x18c>)
    274c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    274e:	f04f 31ff 	mov.w	r1, #4294967295
    2752:	203d      	movs	r0, #61	; 0x3d
    2754:	4b3b      	ldr	r3, [pc, #236]	; (2844 <system_init+0x190>)
    2756:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2758:	2101      	movs	r1, #1
    275a:	203f      	movs	r0, #63	; 0x3f
    275c:	4b38      	ldr	r3, [pc, #224]	; (2840 <system_init+0x18c>)
    275e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    2760:	2101      	movs	r1, #1
    2762:	203f      	movs	r0, #63	; 0x3f
    2764:	4b38      	ldr	r3, [pc, #224]	; (2848 <system_init+0x194>)
    2766:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2768:	f04f 31ff 	mov.w	r1, #4294967295
    276c:	203f      	movs	r0, #63	; 0x3f
    276e:	4b35      	ldr	r3, [pc, #212]	; (2844 <system_init+0x190>)
    2770:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    2772:	2100      	movs	r1, #0
    2774:	204d      	movs	r0, #77	; 0x4d
    2776:	4b31      	ldr	r3, [pc, #196]	; (283c <system_init+0x188>)
    2778:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    277a:	2102      	movs	r1, #2
    277c:	204d      	movs	r0, #77	; 0x4d
    277e:	4b30      	ldr	r3, [pc, #192]	; (2840 <system_init+0x18c>)
    2780:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    2782:	f04f 31ff 	mov.w	r1, #4294967295
    2786:	204d      	movs	r0, #77	; 0x4d
    2788:	4b2e      	ldr	r3, [pc, #184]	; (2844 <system_init+0x190>)
    278a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    278c:	2101      	movs	r1, #1
    278e:	204e      	movs	r0, #78	; 0x4e
    2790:	4b2a      	ldr	r3, [pc, #168]	; (283c <system_init+0x188>)
    2792:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    2794:	2102      	movs	r1, #2
    2796:	204e      	movs	r0, #78	; 0x4e
    2798:	4b29      	ldr	r3, [pc, #164]	; (2840 <system_init+0x18c>)
    279a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    279c:	f04f 31ff 	mov.w	r1, #4294967295
    27a0:	204e      	movs	r0, #78	; 0x4e
    27a2:	4b28      	ldr	r3, [pc, #160]	; (2844 <system_init+0x190>)
    27a4:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    27a6:	2100      	movs	r1, #0
    27a8:	204f      	movs	r0, #79	; 0x4f
    27aa:	4b24      	ldr	r3, [pc, #144]	; (283c <system_init+0x188>)
    27ac:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    27ae:	2102      	movs	r1, #2
    27b0:	204f      	movs	r0, #79	; 0x4f
    27b2:	4b23      	ldr	r3, [pc, #140]	; (2840 <system_init+0x18c>)
    27b4:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    27b6:	f04f 31ff 	mov.w	r1, #4294967295
    27ba:	204f      	movs	r0, #79	; 0x4f
    27bc:	4b21      	ldr	r3, [pc, #132]	; (2844 <system_init+0x190>)
    27be:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    27c0:	2100      	movs	r1, #0
    27c2:	2052      	movs	r0, #82	; 0x52
    27c4:	4b1d      	ldr	r3, [pc, #116]	; (283c <system_init+0x188>)
    27c6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    27c8:	2102      	movs	r1, #2
    27ca:	2052      	movs	r0, #82	; 0x52
    27cc:	4b1c      	ldr	r3, [pc, #112]	; (2840 <system_init+0x18c>)
    27ce:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    27d0:	f04f 31ff 	mov.w	r1, #4294967295
    27d4:	2052      	movs	r0, #82	; 0x52
    27d6:	4b1b      	ldr	r3, [pc, #108]	; (2844 <system_init+0x190>)
    27d8:	4798      	blx	r3

	CRC_CALC_init();
    27da:	4b1c      	ldr	r3, [pc, #112]	; (284c <system_init+0x198>)
    27dc:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    27de:	4b1c      	ldr	r3, [pc, #112]	; (2850 <system_init+0x19c>)
    27e0:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    27e2:	4b1c      	ldr	r3, [pc, #112]	; (2854 <system_init+0x1a0>)
    27e4:	4798      	blx	r3

	QSPI_N25Q256_init();
    27e6:	4b1c      	ldr	r3, [pc, #112]	; (2858 <system_init+0x1a4>)
    27e8:	4798      	blx	r3

	DATETIME_CLOCK_init();
    27ea:	4b1c      	ldr	r3, [pc, #112]	; (285c <system_init+0x1a8>)
    27ec:	4798      	blx	r3

	I2C_HEATERS_init();
    27ee:	4b1c      	ldr	r3, [pc, #112]	; (2860 <system_init+0x1ac>)
    27f0:	4798      	blx	r3

	SPI_TEMP_init();
    27f2:	4b1c      	ldr	r3, [pc, #112]	; (2864 <system_init+0x1b0>)
    27f4:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    27f6:	4b1c      	ldr	r3, [pc, #112]	; (2868 <system_init+0x1b4>)
    27f8:	4798      	blx	r3

	SPI_HI3593_init();
    27fa:	4b1c      	ldr	r3, [pc, #112]	; (286c <system_init+0x1b8>)
    27fc:	4798      	blx	r3

	I2C_FANS_init();
    27fe:	4b1c      	ldr	r3, [pc, #112]	; (2870 <system_init+0x1bc>)
    2800:	4798      	blx	r3

	TIMER_USB_init();
    2802:	4b1c      	ldr	r3, [pc, #112]	; (2874 <system_init+0x1c0>)
    2804:	4798      	blx	r3
	TIMER_ARINC_init();
    2806:	4b1c      	ldr	r3, [pc, #112]	; (2878 <system_init+0x1c4>)
    2808:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    280a:	4b1c      	ldr	r3, [pc, #112]	; (287c <system_init+0x1c8>)
    280c:	4798      	blx	r3
	TIMER_INTERFACE_init();
    280e:	4b1c      	ldr	r3, [pc, #112]	; (2880 <system_init+0x1cc>)
    2810:	4798      	blx	r3
	TIMER_EVENT_init();
    2812:	4b1c      	ldr	r3, [pc, #112]	; (2884 <system_init+0x1d0>)
    2814:	4798      	blx	r3
	LIVE_PULSE_init();
    2816:	4b1c      	ldr	r3, [pc, #112]	; (2888 <system_init+0x1d4>)
    2818:	4798      	blx	r3

	TIMER_HVAC_init();
    281a:	4b1c      	ldr	r3, [pc, #112]	; (288c <system_init+0x1d8>)
    281c:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    281e:	4b1c      	ldr	r3, [pc, #112]	; (2890 <system_init+0x1dc>)
    2820:	4798      	blx	r3

	TIMER_CCU_init();
    2822:	4b1c      	ldr	r3, [pc, #112]	; (2894 <system_init+0x1e0>)
    2824:	4798      	blx	r3

	CDCUSB_init();
    2826:	4b1c      	ldr	r3, [pc, #112]	; (2898 <system_init+0x1e4>)
    2828:	4798      	blx	r3

	WATCHDOG_init();
    282a:	4b1c      	ldr	r3, [pc, #112]	; (289c <system_init+0x1e8>)
    282c:	4798      	blx	r3
	CAN_CCU_init();
    282e:	4b1c      	ldr	r3, [pc, #112]	; (28a0 <system_init+0x1ec>)
    2830:	4798      	blx	r3
}
    2832:	bf00      	nop
    2834:	bd80      	pop	{r7, pc}
    2836:	bf00      	nop
    2838:	00001bb9 	.word	0x00001bb9
    283c:	00001b81 	.word	0x00001b81
    2840:	00001b49 	.word	0x00001b49
    2844:	00001b29 	.word	0x00001b29
    2848:	00001af5 	.word	0x00001af5
    284c:	00001c19 	.word	0x00001c19
    2850:	00001c45 	.word	0x00001c45
    2854:	00001d6d 	.word	0x00001d6d
    2858:	00001eb5 	.word	0x00001eb5
    285c:	00001ef9 	.word	0x00001ef9
    2860:	00001f89 	.word	0x00001f89
    2864:	00002055 	.word	0x00002055
    2868:	000020ed 	.word	0x000020ed
    286c:	000021b9 	.word	0x000021b9
    2870:	00002251 	.word	0x00002251
    2874:	0000227d 	.word	0x0000227d
    2878:	000022c5 	.word	0x000022c5
    287c:	0000230d 	.word	0x0000230d
    2880:	00002355 	.word	0x00002355
    2884:	0000239d 	.word	0x0000239d
    2888:	0000241d 	.word	0x0000241d
    288c:	0000247d 	.word	0x0000247d
    2890:	000024d5 	.word	0x000024d5
    2894:	0000252d 	.word	0x0000252d
    2898:	000025f1 	.word	0x000025f1
    289c:	00002629 	.word	0x00002629
    28a0:	00002671 	.word	0x00002671

000028a4 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    28a4:	b580      	push	{r7, lr}
    28a6:	b084      	sub	sp, #16
    28a8:	af00      	add	r7, sp, #0
    28aa:	6078      	str	r0, [r7, #4]
    28ac:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    28ae:	2300      	movs	r3, #0
    28b0:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    28b2:	687b      	ldr	r3, [r7, #4]
    28b4:	2b00      	cmp	r3, #0
    28b6:	bf14      	ite	ne
    28b8:	2301      	movne	r3, #1
    28ba:	2300      	moveq	r3, #0
    28bc:	b2db      	uxtb	r3, r3
    28be:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    28c2:	4911      	ldr	r1, [pc, #68]	; (2908 <calendar_init+0x64>)
    28c4:	4618      	mov	r0, r3
    28c6:	4b11      	ldr	r3, [pc, #68]	; (290c <calendar_init+0x68>)
    28c8:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    28ca:	687b      	ldr	r3, [r7, #4]
    28cc:	681a      	ldr	r2, [r3, #0]
    28ce:	683b      	ldr	r3, [r7, #0]
    28d0:	429a      	cmp	r2, r3
    28d2:	d101      	bne.n	28d8 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    28d4:	2300      	movs	r3, #0
    28d6:	e013      	b.n	2900 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    28d8:	687b      	ldr	r3, [r7, #4]
    28da:	681b      	ldr	r3, [r3, #0]
    28dc:	2b00      	cmp	r3, #0
    28de:	d002      	beq.n	28e6 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    28e0:	f06f 0311 	mvn.w	r3, #17
    28e4:	e00c      	b.n	2900 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    28e6:	687b      	ldr	r3, [r7, #4]
    28e8:	683a      	ldr	r2, [r7, #0]
    28ea:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    28ec:	687b      	ldr	r3, [r7, #4]
    28ee:	4618      	mov	r0, r3
    28f0:	4b07      	ldr	r3, [pc, #28]	; (2910 <calendar_init+0x6c>)
    28f2:	4798      	blx	r3
    28f4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    28f6:	687b      	ldr	r3, [r7, #4]
    28f8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    28fc:	619a      	str	r2, [r3, #24]

	return ret;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}
    2908:	00013e54 	.word	0x00013e54
    290c:	000040dd 	.word	0x000040dd
    2910:	00006499 	.word	0x00006499

00002914 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    2914:	b580      	push	{r7, lr}
    2916:	b084      	sub	sp, #16
    2918:	af00      	add	r7, sp, #0
    291a:	6078      	str	r0, [r7, #4]
    291c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    291e:	687b      	ldr	r3, [r7, #4]
    2920:	2b00      	cmp	r3, #0
    2922:	d004      	beq.n	292e <can_async_init+0x1a>
    2924:	683b      	ldr	r3, [r7, #0]
    2926:	2b00      	cmp	r3, #0
    2928:	d001      	beq.n	292e <can_async_init+0x1a>
    292a:	2301      	movs	r3, #1
    292c:	e000      	b.n	2930 <can_async_init+0x1c>
    292e:	2300      	movs	r3, #0
    2930:	f003 0301 	and.w	r3, r3, #1
    2934:	b2db      	uxtb	r3, r3
    2936:	2241      	movs	r2, #65	; 0x41
    2938:	490e      	ldr	r1, [pc, #56]	; (2974 <can_async_init+0x60>)
    293a:	4618      	mov	r0, r3
    293c:	4b0e      	ldr	r3, [pc, #56]	; (2978 <can_async_init+0x64>)
    293e:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	6839      	ldr	r1, [r7, #0]
    2944:	4618      	mov	r0, r3
    2946:	4b0d      	ldr	r3, [pc, #52]	; (297c <can_async_init+0x68>)
    2948:	4798      	blx	r3
    294a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    294c:	68fb      	ldr	r3, [r7, #12]
    294e:	2b00      	cmp	r3, #0
    2950:	d001      	beq.n	2956 <can_async_init+0x42>
		return rc;
    2952:	68fb      	ldr	r3, [r7, #12]
    2954:	e009      	b.n	296a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    2956:	687b      	ldr	r3, [r7, #4]
    2958:	4a09      	ldr	r2, [pc, #36]	; (2980 <can_async_init+0x6c>)
    295a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	4a09      	ldr	r2, [pc, #36]	; (2984 <can_async_init+0x70>)
    2960:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    2962:	687b      	ldr	r3, [r7, #4]
    2964:	4a08      	ldr	r2, [pc, #32]	; (2988 <can_async_init+0x74>)
    2966:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2968:	2300      	movs	r3, #0
}
    296a:	4618      	mov	r0, r3
    296c:	3710      	adds	r7, #16
    296e:	46bd      	mov	sp, r7
    2970:	bd80      	pop	{r7, pc}
    2972:	bf00      	nop
    2974:	00013e70 	.word	0x00013e70
    2978:	000040dd 	.word	0x000040dd
    297c:	00004639 	.word	0x00004639
    2980:	0000298d 	.word	0x0000298d
    2984:	000029b1 	.word	0x000029b1
    2988:	000029d5 	.word	0x000029d5

0000298c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    298c:	b580      	push	{r7, lr}
    298e:	b084      	sub	sp, #16
    2990:	af00      	add	r7, sp, #0
    2992:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2998:	68fb      	ldr	r3, [r7, #12]
    299a:	69db      	ldr	r3, [r3, #28]
    299c:	2b00      	cmp	r3, #0
    299e:	d003      	beq.n	29a8 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    29a0:	68fb      	ldr	r3, [r7, #12]
    29a2:	69db      	ldr	r3, [r3, #28]
    29a4:	68f8      	ldr	r0, [r7, #12]
    29a6:	4798      	blx	r3
	}
}
    29a8:	bf00      	nop
    29aa:	3710      	adds	r7, #16
    29ac:	46bd      	mov	sp, r7
    29ae:	bd80      	pop	{r7, pc}

000029b0 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    29b0:	b580      	push	{r7, lr}
    29b2:	b084      	sub	sp, #16
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    29bc:	68fb      	ldr	r3, [r7, #12]
    29be:	6a1b      	ldr	r3, [r3, #32]
    29c0:	2b00      	cmp	r3, #0
    29c2:	d003      	beq.n	29cc <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    29c4:	68fb      	ldr	r3, [r7, #12]
    29c6:	6a1b      	ldr	r3, [r3, #32]
    29c8:	68f8      	ldr	r0, [r7, #12]
    29ca:	4798      	blx	r3
	}
}
    29cc:	bf00      	nop
    29ce:	3710      	adds	r7, #16
    29d0:	46bd      	mov	sp, r7
    29d2:	bd80      	pop	{r7, pc}

000029d4 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    29d4:	b580      	push	{r7, lr}
    29d6:	b084      	sub	sp, #16
    29d8:	af00      	add	r7, sp, #0
    29da:	6078      	str	r0, [r7, #4]
    29dc:	460b      	mov	r3, r1
    29de:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    29e4:	68fb      	ldr	r3, [r7, #12]
    29e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    29e8:	2b00      	cmp	r3, #0
    29ea:	d005      	beq.n	29f8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    29ec:	68fb      	ldr	r3, [r7, #12]
    29ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    29f0:	78fa      	ldrb	r2, [r7, #3]
    29f2:	4611      	mov	r1, r2
    29f4:	68f8      	ldr	r0, [r7, #12]
    29f6:	4798      	blx	r3
	}
}
    29f8:	bf00      	nop
    29fa:	3710      	adds	r7, #16
    29fc:	46bd      	mov	sp, r7
    29fe:	bd80      	pop	{r7, pc}

00002a00 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2a00:	b580      	push	{r7, lr}
    2a02:	b082      	sub	sp, #8
    2a04:	af00      	add	r7, sp, #0
    2a06:	6078      	str	r0, [r7, #4]
    2a08:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2a0a:	687b      	ldr	r3, [r7, #4]
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d004      	beq.n	2a1a <crc_sync_init+0x1a>
    2a10:	683b      	ldr	r3, [r7, #0]
    2a12:	2b00      	cmp	r3, #0
    2a14:	d001      	beq.n	2a1a <crc_sync_init+0x1a>
    2a16:	2301      	movs	r3, #1
    2a18:	e000      	b.n	2a1c <crc_sync_init+0x1c>
    2a1a:	2300      	movs	r3, #0
    2a1c:	f003 0301 	and.w	r3, r3, #1
    2a20:	b2db      	uxtb	r3, r3
    2a22:	222b      	movs	r2, #43	; 0x2b
    2a24:	4906      	ldr	r1, [pc, #24]	; (2a40 <crc_sync_init+0x40>)
    2a26:	4618      	mov	r0, r3
    2a28:	4b06      	ldr	r3, [pc, #24]	; (2a44 <crc_sync_init+0x44>)
    2a2a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2a2c:	687b      	ldr	r3, [r7, #4]
    2a2e:	6839      	ldr	r1, [r7, #0]
    2a30:	4618      	mov	r0, r3
    2a32:	4b05      	ldr	r3, [pc, #20]	; (2a48 <crc_sync_init+0x48>)
    2a34:	4798      	blx	r3
    2a36:	4603      	mov	r3, r0
}
    2a38:	4618      	mov	r0, r3
    2a3a:	3708      	adds	r7, #8
    2a3c:	46bd      	mov	sp, r7
    2a3e:	bd80      	pop	{r7, pc}
    2a40:	00013e8c 	.word	0x00013e8c
    2a44:	000040dd 	.word	0x000040dd
    2a48:	00004d39 	.word	0x00004d39

00002a4c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2a4c:	b590      	push	{r4, r7, lr}
    2a4e:	b083      	sub	sp, #12
    2a50:	af00      	add	r7, sp, #0
    2a52:	4603      	mov	r3, r0
    2a54:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2a56:	4b07      	ldr	r3, [pc, #28]	; (2a74 <delay_us+0x28>)
    2a58:	681c      	ldr	r4, [r3, #0]
    2a5a:	88fb      	ldrh	r3, [r7, #6]
    2a5c:	4618      	mov	r0, r3
    2a5e:	4b06      	ldr	r3, [pc, #24]	; (2a78 <delay_us+0x2c>)
    2a60:	4798      	blx	r3
    2a62:	4603      	mov	r3, r0
    2a64:	4619      	mov	r1, r3
    2a66:	4620      	mov	r0, r4
    2a68:	4b04      	ldr	r3, [pc, #16]	; (2a7c <delay_us+0x30>)
    2a6a:	4798      	blx	r3
}
    2a6c:	bf00      	nop
    2a6e:	370c      	adds	r7, #12
    2a70:	46bd      	mov	sp, r7
    2a72:	bd90      	pop	{r4, r7, pc}
    2a74:	20000b60 	.word	0x20000b60
    2a78:	00004a8d 	.word	0x00004a8d
    2a7c:	00004c21 	.word	0x00004c21

00002a80 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2a80:	b590      	push	{r4, r7, lr}
    2a82:	b083      	sub	sp, #12
    2a84:	af00      	add	r7, sp, #0
    2a86:	4603      	mov	r3, r0
    2a88:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2a8a:	4b07      	ldr	r3, [pc, #28]	; (2aa8 <delay_ms+0x28>)
    2a8c:	681c      	ldr	r4, [r3, #0]
    2a8e:	88fb      	ldrh	r3, [r7, #6]
    2a90:	4618      	mov	r0, r3
    2a92:	4b06      	ldr	r3, [pc, #24]	; (2aac <delay_ms+0x2c>)
    2a94:	4798      	blx	r3
    2a96:	4603      	mov	r3, r0
    2a98:	4619      	mov	r1, r3
    2a9a:	4620      	mov	r0, r4
    2a9c:	4b04      	ldr	r3, [pc, #16]	; (2ab0 <delay_ms+0x30>)
    2a9e:	4798      	blx	r3
}
    2aa0:	bf00      	nop
    2aa2:	370c      	adds	r7, #12
    2aa4:	46bd      	mov	sp, r7
    2aa6:	bd90      	pop	{r4, r7, pc}
    2aa8:	20000b60 	.word	0x20000b60
    2aac:	00004bf9 	.word	0x00004bf9
    2ab0:	00004c21 	.word	0x00004c21

00002ab4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2ab4:	b580      	push	{r7, lr}
    2ab6:	af00      	add	r7, sp, #0
	return _event_system_init();
    2ab8:	4b02      	ldr	r3, [pc, #8]	; (2ac4 <event_system_init+0x10>)
    2aba:	4798      	blx	r3
    2abc:	4603      	mov	r3, r0
}
    2abe:	4618      	mov	r0, r3
    2ac0:	bd80      	pop	{r7, pc}
    2ac2:	bf00      	nop
    2ac4:	000054f5 	.word	0x000054f5

00002ac8 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2ac8:	b580      	push	{r7, lr}
    2aca:	b082      	sub	sp, #8
    2acc:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2ace:	2300      	movs	r3, #0
    2ad0:	80fb      	strh	r3, [r7, #6]
    2ad2:	e00e      	b.n	2af2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2ad4:	88fb      	ldrh	r3, [r7, #6]
    2ad6:	4a0c      	ldr	r2, [pc, #48]	; (2b08 <ext_irq_init+0x40>)
    2ad8:	00db      	lsls	r3, r3, #3
    2ada:	4413      	add	r3, r2
    2adc:	f04f 32ff 	mov.w	r2, #4294967295
    2ae0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2ae2:	88fb      	ldrh	r3, [r7, #6]
    2ae4:	4a08      	ldr	r2, [pc, #32]	; (2b08 <ext_irq_init+0x40>)
    2ae6:	2100      	movs	r1, #0
    2ae8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2aec:	88fb      	ldrh	r3, [r7, #6]
    2aee:	3301      	adds	r3, #1
    2af0:	80fb      	strh	r3, [r7, #6]
    2af2:	88fb      	ldrh	r3, [r7, #6]
    2af4:	2b08      	cmp	r3, #8
    2af6:	d9ed      	bls.n	2ad4 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2af8:	4804      	ldr	r0, [pc, #16]	; (2b0c <ext_irq_init+0x44>)
    2afa:	4b05      	ldr	r3, [pc, #20]	; (2b10 <ext_irq_init+0x48>)
    2afc:	4798      	blx	r3
    2afe:	4603      	mov	r3, r0
}
    2b00:	4618      	mov	r0, r3
    2b02:	3708      	adds	r7, #8
    2b04:	46bd      	mov	sp, r7
    2b06:	bd80      	pop	{r7, pc}
    2b08:	20000b64 	.word	0x20000b64
    2b0c:	00002c6d 	.word	0x00002c6d
    2b10:	00005079 	.word	0x00005079

00002b14 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2b14:	b580      	push	{r7, lr}
    2b16:	b086      	sub	sp, #24
    2b18:	af00      	add	r7, sp, #0
    2b1a:	6078      	str	r0, [r7, #4]
    2b1c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2b1e:	2300      	movs	r3, #0
    2b20:	75fb      	strb	r3, [r7, #23]
    2b22:	2300      	movs	r3, #0
    2b24:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    2b26:	2300      	movs	r3, #0
    2b28:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    2b2a:	e012      	b.n	2b52 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2b2c:	7dfb      	ldrb	r3, [r7, #23]
    2b2e:	4a4d      	ldr	r2, [pc, #308]	; (2c64 <ext_irq_register+0x150>)
    2b30:	00db      	lsls	r3, r3, #3
    2b32:	4413      	add	r3, r2
    2b34:	685a      	ldr	r2, [r3, #4]
    2b36:	687b      	ldr	r3, [r7, #4]
    2b38:	429a      	cmp	r2, r3
    2b3a:	d107      	bne.n	2b4c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2b3c:	7dfb      	ldrb	r3, [r7, #23]
    2b3e:	4949      	ldr	r1, [pc, #292]	; (2c64 <ext_irq_register+0x150>)
    2b40:	683a      	ldr	r2, [r7, #0]
    2b42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    2b46:	2301      	movs	r3, #1
    2b48:	757b      	strb	r3, [r7, #21]
			break;
    2b4a:	e005      	b.n	2b58 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2b4c:	7dfb      	ldrb	r3, [r7, #23]
    2b4e:	3301      	adds	r3, #1
    2b50:	75fb      	strb	r3, [r7, #23]
    2b52:	7dfb      	ldrb	r3, [r7, #23]
    2b54:	2b08      	cmp	r3, #8
    2b56:	d9e9      	bls.n	2b2c <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2b58:	683b      	ldr	r3, [r7, #0]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d10e      	bne.n	2b7c <ext_irq_register+0x68>
		if (!found) {
    2b5e:	7d7b      	ldrb	r3, [r7, #21]
    2b60:	f083 0301 	eor.w	r3, r3, #1
    2b64:	b2db      	uxtb	r3, r3
    2b66:	2b00      	cmp	r3, #0
    2b68:	d002      	beq.n	2b70 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    2b6a:	f06f 030c 	mvn.w	r3, #12
    2b6e:	e074      	b.n	2c5a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2b70:	2100      	movs	r1, #0
    2b72:	6878      	ldr	r0, [r7, #4]
    2b74:	4b3c      	ldr	r3, [pc, #240]	; (2c68 <ext_irq_register+0x154>)
    2b76:	4798      	blx	r3
    2b78:	4603      	mov	r3, r0
    2b7a:	e06e      	b.n	2c5a <ext_irq_register+0x146>
	}

	if (!found) {
    2b7c:	7d7b      	ldrb	r3, [r7, #21]
    2b7e:	f083 0301 	eor.w	r3, r3, #1
    2b82:	b2db      	uxtb	r3, r3
    2b84:	2b00      	cmp	r3, #0
    2b86:	d05a      	beq.n	2c3e <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2b88:	2300      	movs	r3, #0
    2b8a:	75fb      	strb	r3, [r7, #23]
    2b8c:	e016      	b.n	2bbc <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2b8e:	7dfb      	ldrb	r3, [r7, #23]
    2b90:	4a34      	ldr	r2, [pc, #208]	; (2c64 <ext_irq_register+0x150>)
    2b92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2b96:	2b00      	cmp	r3, #0
    2b98:	d10d      	bne.n	2bb6 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2b9a:	7dfb      	ldrb	r3, [r7, #23]
    2b9c:	4931      	ldr	r1, [pc, #196]	; (2c64 <ext_irq_register+0x150>)
    2b9e:	683a      	ldr	r2, [r7, #0]
    2ba0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2ba4:	7dfb      	ldrb	r3, [r7, #23]
    2ba6:	4a2f      	ldr	r2, [pc, #188]	; (2c64 <ext_irq_register+0x150>)
    2ba8:	00db      	lsls	r3, r3, #3
    2baa:	4413      	add	r3, r2
    2bac:	687a      	ldr	r2, [r7, #4]
    2bae:	605a      	str	r2, [r3, #4]
				found           = true;
    2bb0:	2301      	movs	r3, #1
    2bb2:	757b      	strb	r3, [r7, #21]
				break;
    2bb4:	e005      	b.n	2bc2 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2bb6:	7dfb      	ldrb	r3, [r7, #23]
    2bb8:	3301      	adds	r3, #1
    2bba:	75fb      	strb	r3, [r7, #23]
    2bbc:	7dfb      	ldrb	r3, [r7, #23]
    2bbe:	2b08      	cmp	r3, #8
    2bc0:	d9e5      	bls.n	2b8e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2bc2:	e036      	b.n	2c32 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2bc4:	7dfb      	ldrb	r3, [r7, #23]
    2bc6:	4a27      	ldr	r2, [pc, #156]	; (2c64 <ext_irq_register+0x150>)
    2bc8:	00db      	lsls	r3, r3, #3
    2bca:	4413      	add	r3, r2
    2bcc:	685a      	ldr	r2, [r3, #4]
    2bce:	7dbb      	ldrb	r3, [r7, #22]
    2bd0:	4924      	ldr	r1, [pc, #144]	; (2c64 <ext_irq_register+0x150>)
    2bd2:	00db      	lsls	r3, r3, #3
    2bd4:	440b      	add	r3, r1
    2bd6:	685b      	ldr	r3, [r3, #4]
    2bd8:	429a      	cmp	r2, r3
    2bda:	d227      	bcs.n	2c2c <ext_irq_register+0x118>
    2bdc:	7dbb      	ldrb	r3, [r7, #22]
    2bde:	4a21      	ldr	r2, [pc, #132]	; (2c64 <ext_irq_register+0x150>)
    2be0:	00db      	lsls	r3, r3, #3
    2be2:	4413      	add	r3, r2
    2be4:	685b      	ldr	r3, [r3, #4]
    2be6:	f1b3 3fff 	cmp.w	r3, #4294967295
    2bea:	d01f      	beq.n	2c2c <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2bec:	7dbb      	ldrb	r3, [r7, #22]
    2bee:	491d      	ldr	r1, [pc, #116]	; (2c64 <ext_irq_register+0x150>)
    2bf0:	f107 020c 	add.w	r2, r7, #12
    2bf4:	00db      	lsls	r3, r3, #3
    2bf6:	440b      	add	r3, r1
    2bf8:	e893 0003 	ldmia.w	r3, {r0, r1}
    2bfc:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2c00:	7dbb      	ldrb	r3, [r7, #22]
    2c02:	7dfa      	ldrb	r2, [r7, #23]
    2c04:	4817      	ldr	r0, [pc, #92]	; (2c64 <ext_irq_register+0x150>)
    2c06:	4917      	ldr	r1, [pc, #92]	; (2c64 <ext_irq_register+0x150>)
    2c08:	00db      	lsls	r3, r3, #3
    2c0a:	4403      	add	r3, r0
    2c0c:	00d2      	lsls	r2, r2, #3
    2c0e:	440a      	add	r2, r1
    2c10:	e892 0003 	ldmia.w	r2, {r0, r1}
    2c14:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2c18:	7dfb      	ldrb	r3, [r7, #23]
    2c1a:	4a12      	ldr	r2, [pc, #72]	; (2c64 <ext_irq_register+0x150>)
    2c1c:	00db      	lsls	r3, r3, #3
    2c1e:	4413      	add	r3, r2
    2c20:	f107 020c 	add.w	r2, r7, #12
    2c24:	e892 0003 	ldmia.w	r2, {r0, r1}
    2c28:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2c2c:	7dbb      	ldrb	r3, [r7, #22]
    2c2e:	3301      	adds	r3, #1
    2c30:	75bb      	strb	r3, [r7, #22]
    2c32:	7dbb      	ldrb	r3, [r7, #22]
    2c34:	2b08      	cmp	r3, #8
    2c36:	d802      	bhi.n	2c3e <ext_irq_register+0x12a>
    2c38:	7dfb      	ldrb	r3, [r7, #23]
    2c3a:	2b08      	cmp	r3, #8
    2c3c:	d9c2      	bls.n	2bc4 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    2c3e:	7d7b      	ldrb	r3, [r7, #21]
    2c40:	f083 0301 	eor.w	r3, r3, #1
    2c44:	b2db      	uxtb	r3, r3
    2c46:	2b00      	cmp	r3, #0
    2c48:	d002      	beq.n	2c50 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    2c4a:	f06f 030c 	mvn.w	r3, #12
    2c4e:	e004      	b.n	2c5a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2c50:	2101      	movs	r1, #1
    2c52:	6878      	ldr	r0, [r7, #4]
    2c54:	4b04      	ldr	r3, [pc, #16]	; (2c68 <ext_irq_register+0x154>)
    2c56:	4798      	blx	r3
    2c58:	4603      	mov	r3, r0
}
    2c5a:	4618      	mov	r0, r3
    2c5c:	3718      	adds	r7, #24
    2c5e:	46bd      	mov	sp, r7
    2c60:	bd80      	pop	{r7, pc}
    2c62:	bf00      	nop
    2c64:	20000b64 	.word	0x20000b64
    2c68:	0000520d 	.word	0x0000520d

00002c6c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	b084      	sub	sp, #16
    2c70:	af00      	add	r7, sp, #0
    2c72:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2c74:	2300      	movs	r3, #0
    2c76:	73fb      	strb	r3, [r7, #15]
    2c78:	2309      	movs	r3, #9
    2c7a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2c7c:	e02a      	b.n	2cd4 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2c7e:	7bba      	ldrb	r2, [r7, #14]
    2c80:	7bfb      	ldrb	r3, [r7, #15]
    2c82:	4413      	add	r3, r2
    2c84:	105b      	asrs	r3, r3, #1
    2c86:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2c88:	7b7b      	ldrb	r3, [r7, #13]
    2c8a:	2b08      	cmp	r3, #8
    2c8c:	d827      	bhi.n	2cde <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2c8e:	7b7b      	ldrb	r3, [r7, #13]
    2c90:	4a16      	ldr	r2, [pc, #88]	; (2cec <process_ext_irq+0x80>)
    2c92:	00db      	lsls	r3, r3, #3
    2c94:	4413      	add	r3, r2
    2c96:	685a      	ldr	r2, [r3, #4]
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	429a      	cmp	r2, r3
    2c9c:	d10b      	bne.n	2cb6 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2c9e:	7b7b      	ldrb	r3, [r7, #13]
    2ca0:	4a12      	ldr	r2, [pc, #72]	; (2cec <process_ext_irq+0x80>)
    2ca2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d01b      	beq.n	2ce2 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    2caa:	7b7b      	ldrb	r3, [r7, #13]
    2cac:	4a0f      	ldr	r2, [pc, #60]	; (2cec <process_ext_irq+0x80>)
    2cae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2cb2:	4798      	blx	r3
			}
			return;
    2cb4:	e015      	b.n	2ce2 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2cb6:	7b7b      	ldrb	r3, [r7, #13]
    2cb8:	4a0c      	ldr	r2, [pc, #48]	; (2cec <process_ext_irq+0x80>)
    2cba:	00db      	lsls	r3, r3, #3
    2cbc:	4413      	add	r3, r2
    2cbe:	685a      	ldr	r2, [r3, #4]
    2cc0:	687b      	ldr	r3, [r7, #4]
    2cc2:	429a      	cmp	r2, r3
    2cc4:	d203      	bcs.n	2cce <process_ext_irq+0x62>
			lower = middle + 1;
    2cc6:	7b7b      	ldrb	r3, [r7, #13]
    2cc8:	3301      	adds	r3, #1
    2cca:	73fb      	strb	r3, [r7, #15]
    2ccc:	e002      	b.n	2cd4 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    2cce:	7b7b      	ldrb	r3, [r7, #13]
    2cd0:	3b01      	subs	r3, #1
    2cd2:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2cd4:	7bba      	ldrb	r2, [r7, #14]
    2cd6:	7bfb      	ldrb	r3, [r7, #15]
    2cd8:	429a      	cmp	r2, r3
    2cda:	d2d0      	bcs.n	2c7e <process_ext_irq+0x12>
    2cdc:	e002      	b.n	2ce4 <process_ext_irq+0x78>
			return;
    2cde:	bf00      	nop
    2ce0:	e000      	b.n	2ce4 <process_ext_irq+0x78>
			return;
    2ce2:	bf00      	nop
		}
	}
}
    2ce4:	3710      	adds	r7, #16
    2ce6:	46bd      	mov	sp, r7
    2ce8:	bd80      	pop	{r7, pc}
    2cea:	bf00      	nop
    2cec:	20000b64 	.word	0x20000b64

00002cf0 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2cf0:	b580      	push	{r7, lr}
    2cf2:	b08a      	sub	sp, #40	; 0x28
    2cf4:	af00      	add	r7, sp, #0
    2cf6:	60f8      	str	r0, [r7, #12]
    2cf8:	60b9      	str	r1, [r7, #8]
    2cfa:	4613      	mov	r3, r2
    2cfc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2cfe:	68fb      	ldr	r3, [r7, #12]
    2d00:	3b14      	subs	r3, #20
    2d02:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d06:	8b9b      	ldrh	r3, [r3, #28]
    2d08:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2d0a:	88fb      	ldrh	r3, [r7, #6]
    2d0c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2d0e:	f248 0301 	movw	r3, #32769	; 0x8001
    2d12:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2d14:	68bb      	ldr	r3, [r7, #8]
    2d16:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d1a:	f107 0214 	add.w	r2, r7, #20
    2d1e:	4611      	mov	r1, r2
    2d20:	4618      	mov	r0, r3
    2d22:	4b06      	ldr	r3, [pc, #24]	; (2d3c <i2c_m_sync_read+0x4c>)
    2d24:	4798      	blx	r3
    2d26:	6238      	str	r0, [r7, #32]

	if (ret) {
    2d28:	6a3b      	ldr	r3, [r7, #32]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d001      	beq.n	2d32 <i2c_m_sync_read+0x42>
		return ret;
    2d2e:	6a3b      	ldr	r3, [r7, #32]
    2d30:	e000      	b.n	2d34 <i2c_m_sync_read+0x44>
	}

	return n;
    2d32:	88fb      	ldrh	r3, [r7, #6]
}
    2d34:	4618      	mov	r0, r3
    2d36:	3728      	adds	r7, #40	; 0x28
    2d38:	46bd      	mov	sp, r7
    2d3a:	bd80      	pop	{r7, pc}
    2d3c:	0000717d 	.word	0x0000717d

00002d40 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2d40:	b580      	push	{r7, lr}
    2d42:	b08a      	sub	sp, #40	; 0x28
    2d44:	af00      	add	r7, sp, #0
    2d46:	60f8      	str	r0, [r7, #12]
    2d48:	60b9      	str	r1, [r7, #8]
    2d4a:	4613      	mov	r3, r2
    2d4c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2d4e:	68fb      	ldr	r3, [r7, #12]
    2d50:	3b14      	subs	r3, #20
    2d52:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d56:	8b9b      	ldrh	r3, [r3, #28]
    2d58:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2d5a:	88fb      	ldrh	r3, [r7, #6]
    2d5c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2d62:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2d64:	68bb      	ldr	r3, [r7, #8]
    2d66:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d6a:	f107 0214 	add.w	r2, r7, #20
    2d6e:	4611      	mov	r1, r2
    2d70:	4618      	mov	r0, r3
    2d72:	4b06      	ldr	r3, [pc, #24]	; (2d8c <i2c_m_sync_write+0x4c>)
    2d74:	4798      	blx	r3
    2d76:	6238      	str	r0, [r7, #32]

	if (ret) {
    2d78:	6a3b      	ldr	r3, [r7, #32]
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d001      	beq.n	2d82 <i2c_m_sync_write+0x42>
		return ret;
    2d7e:	6a3b      	ldr	r3, [r7, #32]
    2d80:	e000      	b.n	2d84 <i2c_m_sync_write+0x44>
	}

	return n;
    2d82:	88fb      	ldrh	r3, [r7, #6]
}
    2d84:	4618      	mov	r0, r3
    2d86:	3728      	adds	r7, #40	; 0x28
    2d88:	46bd      	mov	sp, r7
    2d8a:	bd80      	pop	{r7, pc}
    2d8c:	0000717d 	.word	0x0000717d

00002d90 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2d90:	b580      	push	{r7, lr}
    2d92:	b084      	sub	sp, #16
    2d94:	af00      	add	r7, sp, #0
    2d96:	6078      	str	r0, [r7, #4]
    2d98:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2d9a:	687b      	ldr	r3, [r7, #4]
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	bf14      	ite	ne
    2da0:	2301      	movne	r3, #1
    2da2:	2300      	moveq	r3, #0
    2da4:	b2db      	uxtb	r3, r3
    2da6:	225e      	movs	r2, #94	; 0x5e
    2da8:	490c      	ldr	r1, [pc, #48]	; (2ddc <i2c_m_sync_init+0x4c>)
    2daa:	4618      	mov	r0, r3
    2dac:	4b0c      	ldr	r3, [pc, #48]	; (2de0 <i2c_m_sync_init+0x50>)
    2dae:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2db0:	687b      	ldr	r3, [r7, #4]
    2db2:	6839      	ldr	r1, [r7, #0]
    2db4:	4618      	mov	r0, r3
    2db6:	4b0b      	ldr	r3, [pc, #44]	; (2de4 <i2c_m_sync_init+0x54>)
    2db8:	4798      	blx	r3
    2dba:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2dbc:	68fb      	ldr	r3, [r7, #12]
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d001      	beq.n	2dc6 <i2c_m_sync_init+0x36>
		return init_status;
    2dc2:	68fb      	ldr	r3, [r7, #12]
    2dc4:	e006      	b.n	2dd4 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	4a07      	ldr	r2, [pc, #28]	; (2de8 <i2c_m_sync_init+0x58>)
    2dca:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2dcc:	687b      	ldr	r3, [r7, #4]
    2dce:	4a07      	ldr	r2, [pc, #28]	; (2dec <i2c_m_sync_init+0x5c>)
    2dd0:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2dd2:	2300      	movs	r3, #0
}
    2dd4:	4618      	mov	r0, r3
    2dd6:	3710      	adds	r7, #16
    2dd8:	46bd      	mov	sp, r7
    2dda:	bd80      	pop	{r7, pc}
    2ddc:	00013ea8 	.word	0x00013ea8
    2de0:	000040dd 	.word	0x000040dd
    2de4:	00006f1d 	.word	0x00006f1d
    2de8:	00002cf1 	.word	0x00002cf1
    2dec:	00002d41 	.word	0x00002d41

00002df0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2df0:	b580      	push	{r7, lr}
    2df2:	b082      	sub	sp, #8
    2df4:	af00      	add	r7, sp, #0
    2df6:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2df8:	687b      	ldr	r3, [r7, #4]
    2dfa:	4618      	mov	r0, r3
    2dfc:	4b03      	ldr	r3, [pc, #12]	; (2e0c <i2c_m_sync_enable+0x1c>)
    2dfe:	4798      	blx	r3
    2e00:	4603      	mov	r3, r0
}
    2e02:	4618      	mov	r0, r3
    2e04:	3708      	adds	r7, #8
    2e06:	46bd      	mov	sp, r7
    2e08:	bd80      	pop	{r7, pc}
    2e0a:	bf00      	nop
    2e0c:	00006f65 	.word	0x00006f65

00002e10 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b082      	sub	sp, #8
    2e14:	af00      	add	r7, sp, #0
    2e16:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	4618      	mov	r0, r3
    2e1c:	4b03      	ldr	r3, [pc, #12]	; (2e2c <i2c_m_sync_disable+0x1c>)
    2e1e:	4798      	blx	r3
    2e20:	4603      	mov	r3, r0
}
    2e22:	4618      	mov	r0, r3
    2e24:	3708      	adds	r7, #8
    2e26:	46bd      	mov	sp, r7
    2e28:	bd80      	pop	{r7, pc}
    2e2a:	bf00      	nop
    2e2c:	00006fa5 	.word	0x00006fa5

00002e30 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2e30:	b480      	push	{r7}
    2e32:	b085      	sub	sp, #20
    2e34:	af00      	add	r7, sp, #0
    2e36:	60f8      	str	r0, [r7, #12]
    2e38:	460b      	mov	r3, r1
    2e3a:	607a      	str	r2, [r7, #4]
    2e3c:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2e3e:	897b      	ldrh	r3, [r7, #10]
    2e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2e44:	b21a      	sxth	r2, r3
    2e46:	687b      	ldr	r3, [r7, #4]
    2e48:	b21b      	sxth	r3, r3
    2e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2e4e:	b21b      	sxth	r3, r3
    2e50:	4313      	orrs	r3, r2
    2e52:	b21b      	sxth	r3, r3
    2e54:	b29a      	uxth	r2, r3
    2e56:	68fb      	ldr	r3, [r7, #12]
    2e58:	839a      	strh	r2, [r3, #28]
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	8b9b      	ldrh	r3, [r3, #28]
}
    2e5e:	4618      	mov	r0, r3
    2e60:	3714      	adds	r7, #20
    2e62:	46bd      	mov	sp, r7
    2e64:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e68:	4770      	bx	lr

00002e6a <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2e6a:	b480      	push	{r7}
    2e6c:	b083      	sub	sp, #12
    2e6e:	af00      	add	r7, sp, #0
    2e70:	6078      	str	r0, [r7, #4]
    2e72:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	f103 0214 	add.w	r2, r3, #20
    2e7a:	683b      	ldr	r3, [r7, #0]
    2e7c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2e7e:	2300      	movs	r3, #0
}
    2e80:	4618      	mov	r0, r3
    2e82:	370c      	adds	r7, #12
    2e84:	46bd      	mov	sp, r7
    2e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e8a:	4770      	bx	lr

00002e8c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2e8c:	b580      	push	{r7, lr}
    2e8e:	b084      	sub	sp, #16
    2e90:	af00      	add	r7, sp, #0
    2e92:	60f8      	str	r0, [r7, #12]
    2e94:	60b9      	str	r1, [r7, #8]
    2e96:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2e98:	68fb      	ldr	r3, [r7, #12]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d004      	beq.n	2ea8 <pwm_init+0x1c>
    2e9e:	68bb      	ldr	r3, [r7, #8]
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d001      	beq.n	2ea8 <pwm_init+0x1c>
    2ea4:	2301      	movs	r3, #1
    2ea6:	e000      	b.n	2eaa <pwm_init+0x1e>
    2ea8:	2300      	movs	r3, #0
    2eaa:	f003 0301 	and.w	r3, r3, #1
    2eae:	b2db      	uxtb	r3, r3
    2eb0:	2233      	movs	r2, #51	; 0x33
    2eb2:	490a      	ldr	r1, [pc, #40]	; (2edc <pwm_init+0x50>)
    2eb4:	4618      	mov	r0, r3
    2eb6:	4b0a      	ldr	r3, [pc, #40]	; (2ee0 <pwm_init+0x54>)
    2eb8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2eba:	68fb      	ldr	r3, [r7, #12]
    2ebc:	68b9      	ldr	r1, [r7, #8]
    2ebe:	4618      	mov	r0, r3
    2ec0:	4b08      	ldr	r3, [pc, #32]	; (2ee4 <pwm_init+0x58>)
    2ec2:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2ec4:	68fb      	ldr	r3, [r7, #12]
    2ec6:	4a08      	ldr	r2, [pc, #32]	; (2ee8 <pwm_init+0x5c>)
    2ec8:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2eca:	68fb      	ldr	r3, [r7, #12]
    2ecc:	4a07      	ldr	r2, [pc, #28]	; (2eec <pwm_init+0x60>)
    2ece:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2ed0:	2300      	movs	r3, #0
}
    2ed2:	4618      	mov	r0, r3
    2ed4:	3710      	adds	r7, #16
    2ed6:	46bd      	mov	sp, r7
    2ed8:	bd80      	pop	{r7, pc}
    2eda:	bf00      	nop
    2edc:	00013ec4 	.word	0x00013ec4
    2ee0:	000040dd 	.word	0x000040dd
    2ee4:	00008845 	.word	0x00008845
    2ee8:	00002ef1 	.word	0x00002ef1
    2eec:	00002f15 	.word	0x00002f15

00002ef0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2ef0:	b580      	push	{r7, lr}
    2ef2:	b084      	sub	sp, #16
    2ef4:	af00      	add	r7, sp, #0
    2ef6:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2ef8:	687b      	ldr	r3, [r7, #4]
    2efa:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2efc:	68fb      	ldr	r3, [r7, #12]
    2efe:	695b      	ldr	r3, [r3, #20]
    2f00:	2b00      	cmp	r3, #0
    2f02:	d003      	beq.n	2f0c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2f04:	68fb      	ldr	r3, [r7, #12]
    2f06:	695b      	ldr	r3, [r3, #20]
    2f08:	68f8      	ldr	r0, [r7, #12]
    2f0a:	4798      	blx	r3
	}
}
    2f0c:	bf00      	nop
    2f0e:	3710      	adds	r7, #16
    2f10:	46bd      	mov	sp, r7
    2f12:	bd80      	pop	{r7, pc}

00002f14 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2f14:	b580      	push	{r7, lr}
    2f16:	b084      	sub	sp, #16
    2f18:	af00      	add	r7, sp, #0
    2f1a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2f1c:	687b      	ldr	r3, [r7, #4]
    2f1e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2f20:	68fb      	ldr	r3, [r7, #12]
    2f22:	699b      	ldr	r3, [r3, #24]
    2f24:	2b00      	cmp	r3, #0
    2f26:	d003      	beq.n	2f30 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2f28:	68fb      	ldr	r3, [r7, #12]
    2f2a:	699b      	ldr	r3, [r3, #24]
    2f2c:	68f8      	ldr	r0, [r7, #12]
    2f2e:	4798      	blx	r3
	}
}
    2f30:	bf00      	nop
    2f32:	3710      	adds	r7, #16
    2f34:	46bd      	mov	sp, r7
    2f36:	bd80      	pop	{r7, pc}

00002f38 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2f38:	b580      	push	{r7, lr}
    2f3a:	b082      	sub	sp, #8
    2f3c:	af00      	add	r7, sp, #0
    2f3e:	6078      	str	r0, [r7, #4]
    2f40:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2f42:	687b      	ldr	r3, [r7, #4]
    2f44:	2b00      	cmp	r3, #0
    2f46:	d004      	beq.n	2f52 <qspi_sync_init+0x1a>
    2f48:	683b      	ldr	r3, [r7, #0]
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	d001      	beq.n	2f52 <qspi_sync_init+0x1a>
    2f4e:	2301      	movs	r3, #1
    2f50:	e000      	b.n	2f54 <qspi_sync_init+0x1c>
    2f52:	2300      	movs	r3, #0
    2f54:	f003 0301 	and.w	r3, r3, #1
    2f58:	b2db      	uxtb	r3, r3
    2f5a:	2231      	movs	r2, #49	; 0x31
    2f5c:	4906      	ldr	r1, [pc, #24]	; (2f78 <qspi_sync_init+0x40>)
    2f5e:	4618      	mov	r0, r3
    2f60:	4b06      	ldr	r3, [pc, #24]	; (2f7c <qspi_sync_init+0x44>)
    2f62:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2f64:	687b      	ldr	r3, [r7, #4]
    2f66:	6839      	ldr	r1, [r7, #0]
    2f68:	4618      	mov	r0, r3
    2f6a:	4b05      	ldr	r3, [pc, #20]	; (2f80 <qspi_sync_init+0x48>)
    2f6c:	4798      	blx	r3
    2f6e:	4603      	mov	r3, r0
}
    2f70:	4618      	mov	r0, r3
    2f72:	3708      	adds	r7, #8
    2f74:	46bd      	mov	sp, r7
    2f76:	bd80      	pop	{r7, pc}
    2f78:	00013edc 	.word	0x00013edc
    2f7c:	000040dd 	.word	0x000040dd
    2f80:	000060d5 	.word	0x000060d5

00002f84 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2f84:	b580      	push	{r7, lr}
    2f86:	b082      	sub	sp, #8
    2f88:	af00      	add	r7, sp, #0
    2f8a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2f8c:	687b      	ldr	r3, [r7, #4]
    2f8e:	2b00      	cmp	r3, #0
    2f90:	bf14      	ite	ne
    2f92:	2301      	movne	r3, #1
    2f94:	2300      	moveq	r3, #0
    2f96:	b2db      	uxtb	r3, r3
    2f98:	223f      	movs	r2, #63	; 0x3f
    2f9a:	4906      	ldr	r1, [pc, #24]	; (2fb4 <qspi_sync_enable+0x30>)
    2f9c:	4618      	mov	r0, r3
    2f9e:	4b06      	ldr	r3, [pc, #24]	; (2fb8 <qspi_sync_enable+0x34>)
    2fa0:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	4618      	mov	r0, r3
    2fa6:	4b05      	ldr	r3, [pc, #20]	; (2fbc <qspi_sync_enable+0x38>)
    2fa8:	4798      	blx	r3
    2faa:	4603      	mov	r3, r0
}
    2fac:	4618      	mov	r0, r3
    2fae:	3708      	adds	r7, #8
    2fb0:	46bd      	mov	sp, r7
    2fb2:	bd80      	pop	{r7, pc}
    2fb4:	00013edc 	.word	0x00013edc
    2fb8:	000040dd 	.word	0x000040dd
    2fbc:	00006149 	.word	0x00006149

00002fc0 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2fc0:	b580      	push	{r7, lr}
    2fc2:	b082      	sub	sp, #8
    2fc4:	af00      	add	r7, sp, #0
    2fc6:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2fc8:	687b      	ldr	r3, [r7, #4]
    2fca:	2b00      	cmp	r3, #0
    2fcc:	bf14      	ite	ne
    2fce:	2301      	movne	r3, #1
    2fd0:	2300      	moveq	r3, #0
    2fd2:	b2db      	uxtb	r3, r3
    2fd4:	2246      	movs	r2, #70	; 0x46
    2fd6:	4906      	ldr	r1, [pc, #24]	; (2ff0 <qspi_sync_disable+0x30>)
    2fd8:	4618      	mov	r0, r3
    2fda:	4b06      	ldr	r3, [pc, #24]	; (2ff4 <qspi_sync_disable+0x34>)
    2fdc:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2fde:	687b      	ldr	r3, [r7, #4]
    2fe0:	4618      	mov	r0, r3
    2fe2:	4b05      	ldr	r3, [pc, #20]	; (2ff8 <qspi_sync_disable+0x38>)
    2fe4:	4798      	blx	r3
    2fe6:	4603      	mov	r3, r0
}
    2fe8:	4618      	mov	r0, r3
    2fea:	3708      	adds	r7, #8
    2fec:	46bd      	mov	sp, r7
    2fee:	bd80      	pop	{r7, pc}
    2ff0:	00013edc 	.word	0x00013edc
    2ff4:	000040dd 	.word	0x000040dd
    2ff8:	0000616d 	.word	0x0000616d

00002ffc <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2ffc:	b580      	push	{r7, lr}
    2ffe:	b082      	sub	sp, #8
    3000:	af00      	add	r7, sp, #0
    3002:	6078      	str	r0, [r7, #4]
    3004:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    3006:	687b      	ldr	r3, [r7, #4]
    3008:	2b00      	cmp	r3, #0
    300a:	d004      	beq.n	3016 <qspi_sync_serial_run_command+0x1a>
    300c:	683b      	ldr	r3, [r7, #0]
    300e:	2b00      	cmp	r3, #0
    3010:	d001      	beq.n	3016 <qspi_sync_serial_run_command+0x1a>
    3012:	2301      	movs	r3, #1
    3014:	e000      	b.n	3018 <qspi_sync_serial_run_command+0x1c>
    3016:	2300      	movs	r3, #0
    3018:	f003 0301 	and.w	r3, r3, #1
    301c:	b2db      	uxtb	r3, r3
    301e:	224d      	movs	r2, #77	; 0x4d
    3020:	4906      	ldr	r1, [pc, #24]	; (303c <qspi_sync_serial_run_command+0x40>)
    3022:	4618      	mov	r0, r3
    3024:	4b06      	ldr	r3, [pc, #24]	; (3040 <qspi_sync_serial_run_command+0x44>)
    3026:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    3028:	687b      	ldr	r3, [r7, #4]
    302a:	6839      	ldr	r1, [r7, #0]
    302c:	4618      	mov	r0, r3
    302e:	4b05      	ldr	r3, [pc, #20]	; (3044 <qspi_sync_serial_run_command+0x48>)
    3030:	4798      	blx	r3
    3032:	4603      	mov	r3, r0
}
    3034:	4618      	mov	r0, r3
    3036:	3708      	adds	r7, #8
    3038:	46bd      	mov	sp, r7
    303a:	bd80      	pop	{r7, pc}
    303c:	00013edc 	.word	0x00013edc
    3040:	000040dd 	.word	0x000040dd
    3044:	000062b9 	.word	0x000062b9

00003048 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    3048:	b580      	push	{r7, lr}
    304a:	b084      	sub	sp, #16
    304c:	af00      	add	r7, sp, #0
    304e:	6078      	str	r0, [r7, #4]
    3050:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    3052:	2300      	movs	r3, #0
    3054:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    3056:	687b      	ldr	r3, [r7, #4]
    3058:	2b00      	cmp	r3, #0
    305a:	d004      	beq.n	3066 <spi_m_sync_init+0x1e>
    305c:	683b      	ldr	r3, [r7, #0]
    305e:	2b00      	cmp	r3, #0
    3060:	d001      	beq.n	3066 <spi_m_sync_init+0x1e>
    3062:	2301      	movs	r3, #1
    3064:	e000      	b.n	3068 <spi_m_sync_init+0x20>
    3066:	2300      	movs	r3, #0
    3068:	f003 0301 	and.w	r3, r3, #1
    306c:	b2db      	uxtb	r3, r3
    306e:	2240      	movs	r2, #64	; 0x40
    3070:	4910      	ldr	r1, [pc, #64]	; (30b4 <spi_m_sync_init+0x6c>)
    3072:	4618      	mov	r0, r3
    3074:	4b10      	ldr	r3, [pc, #64]	; (30b8 <spi_m_sync_init+0x70>)
    3076:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    3078:	687b      	ldr	r3, [r7, #4]
    307a:	683a      	ldr	r2, [r7, #0]
    307c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    307e:	687b      	ldr	r3, [r7, #4]
    3080:	3304      	adds	r3, #4
    3082:	6839      	ldr	r1, [r7, #0]
    3084:	4618      	mov	r0, r3
    3086:	4b0d      	ldr	r3, [pc, #52]	; (30bc <spi_m_sync_init+0x74>)
    3088:	4798      	blx	r3
    308a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    308c:	68fb      	ldr	r3, [r7, #12]
    308e:	2b00      	cmp	r3, #0
    3090:	da01      	bge.n	3096 <spi_m_sync_init+0x4e>
		return rc;
    3092:	68fb      	ldr	r3, [r7, #12]
    3094:	e00a      	b.n	30ac <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    3096:	687b      	ldr	r3, [r7, #4]
    3098:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    309c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	4a07      	ldr	r2, [pc, #28]	; (30c0 <spi_m_sync_init+0x78>)
    30a2:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	4a07      	ldr	r2, [pc, #28]	; (30c4 <spi_m_sync_init+0x7c>)
    30a8:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    30aa:	2300      	movs	r3, #0
}
    30ac:	4618      	mov	r0, r3
    30ae:	3710      	adds	r7, #16
    30b0:	46bd      	mov	sp, r7
    30b2:	bd80      	pop	{r7, pc}
    30b4:	00013ef8 	.word	0x00013ef8
    30b8:	000040dd 	.word	0x000040dd
    30bc:	00007679 	.word	0x00007679
    30c0:	00003141 	.word	0x00003141
    30c4:	00003199 	.word	0x00003199

000030c8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    30c8:	b580      	push	{r7, lr}
    30ca:	b082      	sub	sp, #8
    30cc:	af00      	add	r7, sp, #0
    30ce:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    30d0:	687b      	ldr	r3, [r7, #4]
    30d2:	2b00      	cmp	r3, #0
    30d4:	bf14      	ite	ne
    30d6:	2301      	movne	r3, #1
    30d8:	2300      	moveq	r3, #0
    30da:	b2db      	uxtb	r3, r3
    30dc:	2257      	movs	r2, #87	; 0x57
    30de:	4906      	ldr	r1, [pc, #24]	; (30f8 <spi_m_sync_enable+0x30>)
    30e0:	4618      	mov	r0, r3
    30e2:	4b06      	ldr	r3, [pc, #24]	; (30fc <spi_m_sync_enable+0x34>)
    30e4:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    30e6:	687b      	ldr	r3, [r7, #4]
    30e8:	3304      	adds	r3, #4
    30ea:	4618      	mov	r0, r3
    30ec:	4b04      	ldr	r3, [pc, #16]	; (3100 <spi_m_sync_enable+0x38>)
    30ee:	4798      	blx	r3
}
    30f0:	bf00      	nop
    30f2:	3708      	adds	r7, #8
    30f4:	46bd      	mov	sp, r7
    30f6:	bd80      	pop	{r7, pc}
    30f8:	00013ef8 	.word	0x00013ef8
    30fc:	000040dd 	.word	0x000040dd
    3100:	00007785 	.word	0x00007785

00003104 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    3104:	b580      	push	{r7, lr}
    3106:	b082      	sub	sp, #8
    3108:	af00      	add	r7, sp, #0
    310a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	2b00      	cmp	r3, #0
    3110:	bf14      	ite	ne
    3112:	2301      	movne	r3, #1
    3114:	2300      	moveq	r3, #0
    3116:	b2db      	uxtb	r3, r3
    3118:	225d      	movs	r2, #93	; 0x5d
    311a:	4906      	ldr	r1, [pc, #24]	; (3134 <spi_m_sync_disable+0x30>)
    311c:	4618      	mov	r0, r3
    311e:	4b06      	ldr	r3, [pc, #24]	; (3138 <spi_m_sync_disable+0x34>)
    3120:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    3122:	687b      	ldr	r3, [r7, #4]
    3124:	3304      	adds	r3, #4
    3126:	4618      	mov	r0, r3
    3128:	4b04      	ldr	r3, [pc, #16]	; (313c <spi_m_sync_disable+0x38>)
    312a:	4798      	blx	r3
}
    312c:	bf00      	nop
    312e:	3708      	adds	r7, #8
    3130:	46bd      	mov	sp, r7
    3132:	bd80      	pop	{r7, pc}
    3134:	00013ef8 	.word	0x00013ef8
    3138:	000040dd 	.word	0x000040dd
    313c:	000077d5 	.word	0x000077d5

00003140 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    3140:	b580      	push	{r7, lr}
    3142:	b088      	sub	sp, #32
    3144:	af00      	add	r7, sp, #0
    3146:	60f8      	str	r0, [r7, #12]
    3148:	60b9      	str	r1, [r7, #8]
    314a:	4613      	mov	r3, r2
    314c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    314e:	68fb      	ldr	r3, [r7, #12]
    3150:	2b00      	cmp	r3, #0
    3152:	bf14      	ite	ne
    3154:	2301      	movne	r3, #1
    3156:	2300      	moveq	r3, #0
    3158:	b2db      	uxtb	r3, r3
    315a:	2287      	movs	r2, #135	; 0x87
    315c:	490b      	ldr	r1, [pc, #44]	; (318c <_spi_m_sync_io_read+0x4c>)
    315e:	4618      	mov	r0, r3
    3160:	4b0b      	ldr	r3, [pc, #44]	; (3190 <_spi_m_sync_io_read+0x50>)
    3162:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	3b0c      	subs	r3, #12
    3168:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    316a:	68bb      	ldr	r3, [r7, #8]
    316c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    316e:	2300      	movs	r3, #0
    3170:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    3172:	88fb      	ldrh	r3, [r7, #6]
    3174:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3176:	f107 0310 	add.w	r3, r7, #16
    317a:	4619      	mov	r1, r3
    317c:	69f8      	ldr	r0, [r7, #28]
    317e:	4b05      	ldr	r3, [pc, #20]	; (3194 <_spi_m_sync_io_read+0x54>)
    3180:	4798      	blx	r3
    3182:	4603      	mov	r3, r0
}
    3184:	4618      	mov	r0, r3
    3186:	3720      	adds	r7, #32
    3188:	46bd      	mov	sp, r7
    318a:	bd80      	pop	{r7, pc}
    318c:	00013ef8 	.word	0x00013ef8
    3190:	000040dd 	.word	0x000040dd
    3194:	000031f1 	.word	0x000031f1

00003198 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    3198:	b580      	push	{r7, lr}
    319a:	b088      	sub	sp, #32
    319c:	af00      	add	r7, sp, #0
    319e:	60f8      	str	r0, [r7, #12]
    31a0:	60b9      	str	r1, [r7, #8]
    31a2:	4613      	mov	r3, r2
    31a4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    31a6:	68fb      	ldr	r3, [r7, #12]
    31a8:	2b00      	cmp	r3, #0
    31aa:	bf14      	ite	ne
    31ac:	2301      	movne	r3, #1
    31ae:	2300      	moveq	r3, #0
    31b0:	b2db      	uxtb	r3, r3
    31b2:	22a3      	movs	r2, #163	; 0xa3
    31b4:	490b      	ldr	r1, [pc, #44]	; (31e4 <_spi_m_sync_io_write+0x4c>)
    31b6:	4618      	mov	r0, r3
    31b8:	4b0b      	ldr	r3, [pc, #44]	; (31e8 <_spi_m_sync_io_write+0x50>)
    31ba:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    31bc:	68fb      	ldr	r3, [r7, #12]
    31be:	3b0c      	subs	r3, #12
    31c0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    31c2:	2300      	movs	r3, #0
    31c4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    31c6:	68bb      	ldr	r3, [r7, #8]
    31c8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    31ca:	88fb      	ldrh	r3, [r7, #6]
    31cc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    31ce:	f107 0310 	add.w	r3, r7, #16
    31d2:	4619      	mov	r1, r3
    31d4:	69f8      	ldr	r0, [r7, #28]
    31d6:	4b05      	ldr	r3, [pc, #20]	; (31ec <_spi_m_sync_io_write+0x54>)
    31d8:	4798      	blx	r3
    31da:	4603      	mov	r3, r0
}
    31dc:	4618      	mov	r0, r3
    31de:	3720      	adds	r7, #32
    31e0:	46bd      	mov	sp, r7
    31e2:	bd80      	pop	{r7, pc}
    31e4:	00013ef8 	.word	0x00013ef8
    31e8:	000040dd 	.word	0x000040dd
    31ec:	000031f1 	.word	0x000031f1

000031f0 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    31f0:	b580      	push	{r7, lr}
    31f2:	b086      	sub	sp, #24
    31f4:	af00      	add	r7, sp, #0
    31f6:	6078      	str	r0, [r7, #4]
    31f8:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    31fa:	687b      	ldr	r3, [r7, #4]
    31fc:	2b00      	cmp	r3, #0
    31fe:	d004      	beq.n	320a <spi_m_sync_transfer+0x1a>
    3200:	683b      	ldr	r3, [r7, #0]
    3202:	2b00      	cmp	r3, #0
    3204:	d001      	beq.n	320a <spi_m_sync_transfer+0x1a>
    3206:	2301      	movs	r3, #1
    3208:	e000      	b.n	320c <spi_m_sync_transfer+0x1c>
    320a:	2300      	movs	r3, #0
    320c:	f003 0301 	and.w	r3, r3, #1
    3210:	b2db      	uxtb	r3, r3
    3212:	22b3      	movs	r2, #179	; 0xb3
    3214:	490c      	ldr	r1, [pc, #48]	; (3248 <spi_m_sync_transfer+0x58>)
    3216:	4618      	mov	r0, r3
    3218:	4b0c      	ldr	r3, [pc, #48]	; (324c <spi_m_sync_transfer+0x5c>)
    321a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    321c:	683b      	ldr	r3, [r7, #0]
    321e:	681b      	ldr	r3, [r3, #0]
    3220:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    3222:	683b      	ldr	r3, [r7, #0]
    3224:	685b      	ldr	r3, [r3, #4]
    3226:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    3228:	683b      	ldr	r3, [r7, #0]
    322a:	689b      	ldr	r3, [r3, #8]
    322c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    322e:	687b      	ldr	r3, [r7, #4]
    3230:	3304      	adds	r3, #4
    3232:	f107 020c 	add.w	r2, r7, #12
    3236:	4611      	mov	r1, r2
    3238:	4618      	mov	r0, r3
    323a:	4b05      	ldr	r3, [pc, #20]	; (3250 <spi_m_sync_transfer+0x60>)
    323c:	4798      	blx	r3
    323e:	4603      	mov	r3, r0
}
    3240:	4618      	mov	r0, r3
    3242:	3718      	adds	r7, #24
    3244:	46bd      	mov	sp, r7
    3246:	bd80      	pop	{r7, pc}
    3248:	00013ef8 	.word	0x00013ef8
    324c:	000040dd 	.word	0x000040dd
    3250:	00007979 	.word	0x00007979

00003254 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    3254:	b580      	push	{r7, lr}
    3256:	b082      	sub	sp, #8
    3258:	af00      	add	r7, sp, #0
    325a:	6078      	str	r0, [r7, #4]
    325c:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    325e:	687b      	ldr	r3, [r7, #4]
    3260:	2b00      	cmp	r3, #0
    3262:	d004      	beq.n	326e <spi_m_sync_get_io_descriptor+0x1a>
    3264:	683b      	ldr	r3, [r7, #0]
    3266:	2b00      	cmp	r3, #0
    3268:	d001      	beq.n	326e <spi_m_sync_get_io_descriptor+0x1a>
    326a:	2301      	movs	r3, #1
    326c:	e000      	b.n	3270 <spi_m_sync_get_io_descriptor+0x1c>
    326e:	2300      	movs	r3, #0
    3270:	f003 0301 	and.w	r3, r3, #1
    3274:	b2db      	uxtb	r3, r3
    3276:	22bd      	movs	r2, #189	; 0xbd
    3278:	4906      	ldr	r1, [pc, #24]	; (3294 <spi_m_sync_get_io_descriptor+0x40>)
    327a:	4618      	mov	r0, r3
    327c:	4b06      	ldr	r3, [pc, #24]	; (3298 <spi_m_sync_get_io_descriptor+0x44>)
    327e:	4798      	blx	r3
	*io = &spi->io;
    3280:	687b      	ldr	r3, [r7, #4]
    3282:	f103 020c 	add.w	r2, r3, #12
    3286:	683b      	ldr	r3, [r7, #0]
    3288:	601a      	str	r2, [r3, #0]
	return 0;
    328a:	2300      	movs	r3, #0
}
    328c:	4618      	mov	r0, r3
    328e:	3708      	adds	r7, #8
    3290:	46bd      	mov	sp, r7
    3292:	bd80      	pop	{r7, pc}
    3294:	00013ef8 	.word	0x00013ef8
    3298:	000040dd 	.word	0x000040dd

0000329c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    329c:	b480      	push	{r7}
    329e:	b083      	sub	sp, #12
    32a0:	af00      	add	r7, sp, #0
    32a2:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    32a4:	687b      	ldr	r3, [r7, #4]
    32a6:	681b      	ldr	r3, [r3, #0]
}
    32a8:	4618      	mov	r0, r3
    32aa:	370c      	adds	r7, #12
    32ac:	46bd      	mov	sp, r7
    32ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    32b2:	4770      	bx	lr

000032b4 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    32b4:	b480      	push	{r7}
    32b6:	b083      	sub	sp, #12
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    32bc:	687b      	ldr	r3, [r7, #4]
    32be:	2b00      	cmp	r3, #0
    32c0:	d002      	beq.n	32c8 <list_get_next_element+0x14>
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	681b      	ldr	r3, [r3, #0]
    32c6:	e000      	b.n	32ca <list_get_next_element+0x16>
    32c8:	2300      	movs	r3, #0
}
    32ca:	4618      	mov	r0, r3
    32cc:	370c      	adds	r7, #12
    32ce:	46bd      	mov	sp, r7
    32d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32d4:	4770      	bx	lr
	...

000032d8 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    32d8:	b580      	push	{r7, lr}
    32da:	b084      	sub	sp, #16
    32dc:	af00      	add	r7, sp, #0
    32de:	60f8      	str	r0, [r7, #12]
    32e0:	60b9      	str	r1, [r7, #8]
    32e2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    32e4:	68fb      	ldr	r3, [r7, #12]
    32e6:	2b00      	cmp	r3, #0
    32e8:	d007      	beq.n	32fa <timer_init+0x22>
    32ea:	68bb      	ldr	r3, [r7, #8]
    32ec:	2b00      	cmp	r3, #0
    32ee:	d004      	beq.n	32fa <timer_init+0x22>
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	2b00      	cmp	r3, #0
    32f4:	d001      	beq.n	32fa <timer_init+0x22>
    32f6:	2301      	movs	r3, #1
    32f8:	e000      	b.n	32fc <timer_init+0x24>
    32fa:	2300      	movs	r3, #0
    32fc:	f003 0301 	and.w	r3, r3, #1
    3300:	b2db      	uxtb	r3, r3
    3302:	223b      	movs	r2, #59	; 0x3b
    3304:	490c      	ldr	r1, [pc, #48]	; (3338 <timer_init+0x60>)
    3306:	4618      	mov	r0, r3
    3308:	4b0c      	ldr	r3, [pc, #48]	; (333c <timer_init+0x64>)
    330a:	4798      	blx	r3
	descr->func = func;
    330c:	68fb      	ldr	r3, [r7, #12]
    330e:	687a      	ldr	r2, [r7, #4]
    3310:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    3312:	68fb      	ldr	r3, [r7, #12]
    3314:	681b      	ldr	r3, [r3, #0]
    3316:	681b      	ldr	r3, [r3, #0]
    3318:	68fa      	ldr	r2, [r7, #12]
    331a:	3204      	adds	r2, #4
    331c:	68b9      	ldr	r1, [r7, #8]
    331e:	4610      	mov	r0, r2
    3320:	4798      	blx	r3
	descr->time                           = 0;
    3322:	68fb      	ldr	r3, [r7, #12]
    3324:	2200      	movs	r2, #0
    3326:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    3328:	68fb      	ldr	r3, [r7, #12]
    332a:	4a05      	ldr	r2, [pc, #20]	; (3340 <timer_init+0x68>)
    332c:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    332e:	2300      	movs	r3, #0
}
    3330:	4618      	mov	r0, r3
    3332:	3710      	adds	r7, #16
    3334:	46bd      	mov	sp, r7
    3336:	bd80      	pop	{r7, pc}
    3338:	00013f14 	.word	0x00013f14
    333c:	000040dd 	.word	0x000040dd
    3340:	000036c9 	.word	0x000036c9

00003344 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    3344:	b580      	push	{r7, lr}
    3346:	b082      	sub	sp, #8
    3348:	af00      	add	r7, sp, #0
    334a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    334c:	687b      	ldr	r3, [r7, #4]
    334e:	2b00      	cmp	r3, #0
    3350:	d005      	beq.n	335e <timer_start+0x1a>
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	681b      	ldr	r3, [r3, #0]
    3356:	2b00      	cmp	r3, #0
    3358:	d001      	beq.n	335e <timer_start+0x1a>
    335a:	2301      	movs	r3, #1
    335c:	e000      	b.n	3360 <timer_start+0x1c>
    335e:	2300      	movs	r3, #0
    3360:	f003 0301 	and.w	r3, r3, #1
    3364:	b2db      	uxtb	r3, r3
    3366:	2254      	movs	r2, #84	; 0x54
    3368:	490e      	ldr	r1, [pc, #56]	; (33a4 <timer_start+0x60>)
    336a:	4618      	mov	r0, r3
    336c:	4b0e      	ldr	r3, [pc, #56]	; (33a8 <timer_start+0x64>)
    336e:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    3370:	687b      	ldr	r3, [r7, #4]
    3372:	681b      	ldr	r3, [r3, #0]
    3374:	699b      	ldr	r3, [r3, #24]
    3376:	687a      	ldr	r2, [r7, #4]
    3378:	3204      	adds	r2, #4
    337a:	4610      	mov	r0, r2
    337c:	4798      	blx	r3
    337e:	4603      	mov	r3, r0
    3380:	2b00      	cmp	r3, #0
    3382:	d002      	beq.n	338a <timer_start+0x46>
		return ERR_DENIED;
    3384:	f06f 0310 	mvn.w	r3, #16
    3388:	e007      	b.n	339a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    338a:	687b      	ldr	r3, [r7, #4]
    338c:	681b      	ldr	r3, [r3, #0]
    338e:	689b      	ldr	r3, [r3, #8]
    3390:	687a      	ldr	r2, [r7, #4]
    3392:	3204      	adds	r2, #4
    3394:	4610      	mov	r0, r2
    3396:	4798      	blx	r3

	return ERR_NONE;
    3398:	2300      	movs	r3, #0
}
    339a:	4618      	mov	r0, r3
    339c:	3708      	adds	r7, #8
    339e:	46bd      	mov	sp, r7
    33a0:	bd80      	pop	{r7, pc}
    33a2:	bf00      	nop
    33a4:	00013f14 	.word	0x00013f14
    33a8:	000040dd 	.word	0x000040dd

000033ac <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    33ac:	b580      	push	{r7, lr}
    33ae:	b082      	sub	sp, #8
    33b0:	af00      	add	r7, sp, #0
    33b2:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    33b4:	687b      	ldr	r3, [r7, #4]
    33b6:	2b00      	cmp	r3, #0
    33b8:	d005      	beq.n	33c6 <timer_stop+0x1a>
    33ba:	687b      	ldr	r3, [r7, #4]
    33bc:	681b      	ldr	r3, [r3, #0]
    33be:	2b00      	cmp	r3, #0
    33c0:	d001      	beq.n	33c6 <timer_stop+0x1a>
    33c2:	2301      	movs	r3, #1
    33c4:	e000      	b.n	33c8 <timer_stop+0x1c>
    33c6:	2300      	movs	r3, #0
    33c8:	f003 0301 	and.w	r3, r3, #1
    33cc:	b2db      	uxtb	r3, r3
    33ce:	2262      	movs	r2, #98	; 0x62
    33d0:	490f      	ldr	r1, [pc, #60]	; (3410 <timer_stop+0x64>)
    33d2:	4618      	mov	r0, r3
    33d4:	4b0f      	ldr	r3, [pc, #60]	; (3414 <timer_stop+0x68>)
    33d6:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	681b      	ldr	r3, [r3, #0]
    33dc:	699b      	ldr	r3, [r3, #24]
    33de:	687a      	ldr	r2, [r7, #4]
    33e0:	3204      	adds	r2, #4
    33e2:	4610      	mov	r0, r2
    33e4:	4798      	blx	r3
    33e6:	4603      	mov	r3, r0
    33e8:	f083 0301 	eor.w	r3, r3, #1
    33ec:	b2db      	uxtb	r3, r3
    33ee:	2b00      	cmp	r3, #0
    33f0:	d002      	beq.n	33f8 <timer_stop+0x4c>
		return ERR_DENIED;
    33f2:	f06f 0310 	mvn.w	r3, #16
    33f6:	e007      	b.n	3408 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	681b      	ldr	r3, [r3, #0]
    33fc:	68db      	ldr	r3, [r3, #12]
    33fe:	687a      	ldr	r2, [r7, #4]
    3400:	3204      	adds	r2, #4
    3402:	4610      	mov	r0, r2
    3404:	4798      	blx	r3

	return ERR_NONE;
    3406:	2300      	movs	r3, #0
}
    3408:	4618      	mov	r0, r3
    340a:	3708      	adds	r7, #8
    340c:	46bd      	mov	sp, r7
    340e:	bd80      	pop	{r7, pc}
    3410:	00013f14 	.word	0x00013f14
    3414:	000040dd 	.word	0x000040dd

00003418 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    3418:	b580      	push	{r7, lr}
    341a:	b084      	sub	sp, #16
    341c:	af00      	add	r7, sp, #0
    341e:	6078      	str	r0, [r7, #4]
    3420:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    3422:	687b      	ldr	r3, [r7, #4]
    3424:	2b00      	cmp	r3, #0
    3426:	d008      	beq.n	343a <timer_add_task+0x22>
    3428:	683b      	ldr	r3, [r7, #0]
    342a:	2b00      	cmp	r3, #0
    342c:	d005      	beq.n	343a <timer_add_task+0x22>
    342e:	687b      	ldr	r3, [r7, #4]
    3430:	681b      	ldr	r3, [r3, #0]
    3432:	2b00      	cmp	r3, #0
    3434:	d001      	beq.n	343a <timer_add_task+0x22>
    3436:	2301      	movs	r3, #1
    3438:	e000      	b.n	343c <timer_add_task+0x24>
    343a:	2300      	movs	r3, #0
    343c:	f003 0301 	and.w	r3, r3, #1
    3440:	b2db      	uxtb	r3, r3
    3442:	227b      	movs	r2, #123	; 0x7b
    3444:	492f      	ldr	r1, [pc, #188]	; (3504 <timer_add_task+0xec>)
    3446:	4618      	mov	r0, r3
    3448:	4b2f      	ldr	r3, [pc, #188]	; (3508 <timer_add_task+0xf0>)
    344a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    344c:	687b      	ldr	r3, [r7, #4]
    344e:	7f1b      	ldrb	r3, [r3, #28]
    3450:	b2db      	uxtb	r3, r3
    3452:	f043 0301 	orr.w	r3, r3, #1
    3456:	b2da      	uxtb	r2, r3
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	3318      	adds	r3, #24
    3460:	6839      	ldr	r1, [r7, #0]
    3462:	4618      	mov	r0, r3
    3464:	4b29      	ldr	r3, [pc, #164]	; (350c <timer_add_task+0xf4>)
    3466:	4798      	blx	r3
    3468:	4603      	mov	r3, r0
    346a:	2b00      	cmp	r3, #0
    346c:	d00f      	beq.n	348e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    346e:	687b      	ldr	r3, [r7, #4]
    3470:	7f1b      	ldrb	r3, [r3, #28]
    3472:	b2db      	uxtb	r3, r3
    3474:	f023 0301 	bic.w	r3, r3, #1
    3478:	b2da      	uxtb	r2, r3
    347a:	687b      	ldr	r3, [r7, #4]
    347c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    347e:	2280      	movs	r2, #128	; 0x80
    3480:	4920      	ldr	r1, [pc, #128]	; (3504 <timer_add_task+0xec>)
    3482:	2000      	movs	r0, #0
    3484:	4b20      	ldr	r3, [pc, #128]	; (3508 <timer_add_task+0xf0>)
    3486:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3488:	f06f 0311 	mvn.w	r3, #17
    348c:	e035      	b.n	34fa <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	695a      	ldr	r2, [r3, #20]
    3492:	683b      	ldr	r3, [r7, #0]
    3494:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    3496:	687b      	ldr	r3, [r7, #4]
    3498:	f103 0018 	add.w	r0, r3, #24
    349c:	687b      	ldr	r3, [r7, #4]
    349e:	695b      	ldr	r3, [r3, #20]
    34a0:	461a      	mov	r2, r3
    34a2:	6839      	ldr	r1, [r7, #0]
    34a4:	4b1a      	ldr	r3, [pc, #104]	; (3510 <timer_add_task+0xf8>)
    34a6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	7f1b      	ldrb	r3, [r3, #28]
    34ac:	b2db      	uxtb	r3, r3
    34ae:	f023 0301 	bic.w	r3, r3, #1
    34b2:	b2da      	uxtb	r2, r3
    34b4:	687b      	ldr	r3, [r7, #4]
    34b6:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    34b8:	687b      	ldr	r3, [r7, #4]
    34ba:	7f1b      	ldrb	r3, [r3, #28]
    34bc:	b2db      	uxtb	r3, r3
    34be:	f003 0302 	and.w	r3, r3, #2
    34c2:	2b00      	cmp	r3, #0
    34c4:	d018      	beq.n	34f8 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    34c6:	f107 030c 	add.w	r3, r7, #12
    34ca:	4618      	mov	r0, r3
    34cc:	4b11      	ldr	r3, [pc, #68]	; (3514 <timer_add_task+0xfc>)
    34ce:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	7f1b      	ldrb	r3, [r3, #28]
    34d4:	b2db      	uxtb	r3, r3
    34d6:	f023 0302 	bic.w	r3, r3, #2
    34da:	b2da      	uxtb	r2, r3
    34dc:	687b      	ldr	r3, [r7, #4]
    34de:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    34e0:	687b      	ldr	r3, [r7, #4]
    34e2:	681b      	ldr	r3, [r3, #0]
    34e4:	69db      	ldr	r3, [r3, #28]
    34e6:	687a      	ldr	r2, [r7, #4]
    34e8:	3204      	adds	r2, #4
    34ea:	4610      	mov	r0, r2
    34ec:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    34ee:	f107 030c 	add.w	r3, r7, #12
    34f2:	4618      	mov	r0, r3
    34f4:	4b08      	ldr	r3, [pc, #32]	; (3518 <timer_add_task+0x100>)
    34f6:	4798      	blx	r3
	}

	return ERR_NONE;
    34f8:	2300      	movs	r3, #0
}
    34fa:	4618      	mov	r0, r3
    34fc:	3710      	adds	r7, #16
    34fe:	46bd      	mov	sp, r7
    3500:	bd80      	pop	{r7, pc}
    3502:	bf00      	nop
    3504:	00013f14 	.word	0x00013f14
    3508:	000040dd 	.word	0x000040dd
    350c:	00004105 	.word	0x00004105
    3510:	00003619 	.word	0x00003619
    3514:	0000bd55 	.word	0x0000bd55
    3518:	0000bd7b 	.word	0x0000bd7b

0000351c <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    351c:	b580      	push	{r7, lr}
    351e:	b084      	sub	sp, #16
    3520:	af00      	add	r7, sp, #0
    3522:	6078      	str	r0, [r7, #4]
    3524:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    3526:	687b      	ldr	r3, [r7, #4]
    3528:	2b00      	cmp	r3, #0
    352a:	d008      	beq.n	353e <timer_remove_task+0x22>
    352c:	683b      	ldr	r3, [r7, #0]
    352e:	2b00      	cmp	r3, #0
    3530:	d005      	beq.n	353e <timer_remove_task+0x22>
    3532:	687b      	ldr	r3, [r7, #4]
    3534:	681b      	ldr	r3, [r3, #0]
    3536:	2b00      	cmp	r3, #0
    3538:	d001      	beq.n	353e <timer_remove_task+0x22>
    353a:	2301      	movs	r3, #1
    353c:	e000      	b.n	3540 <timer_remove_task+0x24>
    353e:	2300      	movs	r3, #0
    3540:	f003 0301 	and.w	r3, r3, #1
    3544:	b2db      	uxtb	r3, r3
    3546:	2296      	movs	r2, #150	; 0x96
    3548:	492d      	ldr	r1, [pc, #180]	; (3600 <timer_remove_task+0xe4>)
    354a:	4618      	mov	r0, r3
    354c:	4b2d      	ldr	r3, [pc, #180]	; (3604 <timer_remove_task+0xe8>)
    354e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3550:	687b      	ldr	r3, [r7, #4]
    3552:	7f1b      	ldrb	r3, [r3, #28]
    3554:	b2db      	uxtb	r3, r3
    3556:	f043 0301 	orr.w	r3, r3, #1
    355a:	b2da      	uxtb	r2, r3
    355c:	687b      	ldr	r3, [r7, #4]
    355e:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    3560:	687b      	ldr	r3, [r7, #4]
    3562:	3318      	adds	r3, #24
    3564:	6839      	ldr	r1, [r7, #0]
    3566:	4618      	mov	r0, r3
    3568:	4b27      	ldr	r3, [pc, #156]	; (3608 <timer_remove_task+0xec>)
    356a:	4798      	blx	r3
    356c:	4603      	mov	r3, r0
    356e:	f083 0301 	eor.w	r3, r3, #1
    3572:	b2db      	uxtb	r3, r3
    3574:	2b00      	cmp	r3, #0
    3576:	d00f      	beq.n	3598 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	7f1b      	ldrb	r3, [r3, #28]
    357c:	b2db      	uxtb	r3, r3
    357e:	f023 0301 	bic.w	r3, r3, #1
    3582:	b2da      	uxtb	r2, r3
    3584:	687b      	ldr	r3, [r7, #4]
    3586:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3588:	229b      	movs	r2, #155	; 0x9b
    358a:	491d      	ldr	r1, [pc, #116]	; (3600 <timer_remove_task+0xe4>)
    358c:	2000      	movs	r0, #0
    358e:	4b1d      	ldr	r3, [pc, #116]	; (3604 <timer_remove_task+0xe8>)
    3590:	4798      	blx	r3
		return ERR_NOT_FOUND;
    3592:	f06f 0309 	mvn.w	r3, #9
    3596:	e02e      	b.n	35f6 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    3598:	687b      	ldr	r3, [r7, #4]
    359a:	3318      	adds	r3, #24
    359c:	6839      	ldr	r1, [r7, #0]
    359e:	4618      	mov	r0, r3
    35a0:	4b1a      	ldr	r3, [pc, #104]	; (360c <timer_remove_task+0xf0>)
    35a2:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    35a4:	687b      	ldr	r3, [r7, #4]
    35a6:	7f1b      	ldrb	r3, [r3, #28]
    35a8:	b2db      	uxtb	r3, r3
    35aa:	f023 0301 	bic.w	r3, r3, #1
    35ae:	b2da      	uxtb	r2, r3
    35b0:	687b      	ldr	r3, [r7, #4]
    35b2:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    35b4:	687b      	ldr	r3, [r7, #4]
    35b6:	7f1b      	ldrb	r3, [r3, #28]
    35b8:	b2db      	uxtb	r3, r3
    35ba:	f003 0302 	and.w	r3, r3, #2
    35be:	2b00      	cmp	r3, #0
    35c0:	d018      	beq.n	35f4 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    35c2:	f107 030c 	add.w	r3, r7, #12
    35c6:	4618      	mov	r0, r3
    35c8:	4b11      	ldr	r3, [pc, #68]	; (3610 <timer_remove_task+0xf4>)
    35ca:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    35cc:	687b      	ldr	r3, [r7, #4]
    35ce:	7f1b      	ldrb	r3, [r3, #28]
    35d0:	b2db      	uxtb	r3, r3
    35d2:	f023 0302 	bic.w	r3, r3, #2
    35d6:	b2da      	uxtb	r2, r3
    35d8:	687b      	ldr	r3, [r7, #4]
    35da:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    35dc:	687b      	ldr	r3, [r7, #4]
    35de:	681b      	ldr	r3, [r3, #0]
    35e0:	69db      	ldr	r3, [r3, #28]
    35e2:	687a      	ldr	r2, [r7, #4]
    35e4:	3204      	adds	r2, #4
    35e6:	4610      	mov	r0, r2
    35e8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    35ea:	f107 030c 	add.w	r3, r7, #12
    35ee:	4618      	mov	r0, r3
    35f0:	4b08      	ldr	r3, [pc, #32]	; (3614 <timer_remove_task+0xf8>)
    35f2:	4798      	blx	r3
	}

	return ERR_NONE;
    35f4:	2300      	movs	r3, #0
}
    35f6:	4618      	mov	r0, r3
    35f8:	3710      	adds	r7, #16
    35fa:	46bd      	mov	sp, r7
    35fc:	bd80      	pop	{r7, pc}
    35fe:	bf00      	nop
    3600:	00013f14 	.word	0x00013f14
    3604:	000040dd 	.word	0x000040dd
    3608:	00004105 	.word	0x00004105
    360c:	00004267 	.word	0x00004267
    3610:	0000bd55 	.word	0x0000bd55
    3614:	0000bd7b 	.word	0x0000bd7b

00003618 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    3618:	b580      	push	{r7, lr}
    361a:	b088      	sub	sp, #32
    361c:	af00      	add	r7, sp, #0
    361e:	60f8      	str	r0, [r7, #12]
    3620:	60b9      	str	r1, [r7, #8]
    3622:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    3624:	2300      	movs	r3, #0
    3626:	61bb      	str	r3, [r7, #24]
    3628:	68f8      	ldr	r0, [r7, #12]
    362a:	4b23      	ldr	r3, [pc, #140]	; (36b8 <timer_add_timer_task+0xa0>)
    362c:	4798      	blx	r3
    362e:	6138      	str	r0, [r7, #16]

	if (!head) {
    3630:	693b      	ldr	r3, [r7, #16]
    3632:	2b00      	cmp	r3, #0
    3634:	d104      	bne.n	3640 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    3636:	68b9      	ldr	r1, [r7, #8]
    3638:	68f8      	ldr	r0, [r7, #12]
    363a:	4b20      	ldr	r3, [pc, #128]	; (36bc <timer_add_timer_task+0xa4>)
    363c:	4798      	blx	r3
		return;
    363e:	e037      	b.n	36b0 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3640:	693b      	ldr	r3, [r7, #16]
    3642:	61fb      	str	r3, [r7, #28]
    3644:	e022      	b.n	368c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    3646:	69fb      	ldr	r3, [r7, #28]
    3648:	685a      	ldr	r2, [r3, #4]
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	429a      	cmp	r2, r3
    364e:	d808      	bhi.n	3662 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    3650:	69fb      	ldr	r3, [r7, #28]
    3652:	689a      	ldr	r2, [r3, #8]
    3654:	69fb      	ldr	r3, [r7, #28]
    3656:	6859      	ldr	r1, [r3, #4]
    3658:	687b      	ldr	r3, [r7, #4]
    365a:	1acb      	subs	r3, r1, r3
    365c:	4413      	add	r3, r2
    365e:	617b      	str	r3, [r7, #20]
    3660:	e009      	b.n	3676 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    3662:	69fb      	ldr	r3, [r7, #28]
    3664:	689a      	ldr	r2, [r3, #8]
    3666:	69fb      	ldr	r3, [r7, #28]
    3668:	685b      	ldr	r3, [r3, #4]
    366a:	441a      	add	r2, r3
    366c:	687b      	ldr	r3, [r7, #4]
    366e:	425b      	negs	r3, r3
    3670:	4413      	add	r3, r2
    3672:	3301      	adds	r3, #1
    3674:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    3676:	68bb      	ldr	r3, [r7, #8]
    3678:	689a      	ldr	r2, [r3, #8]
    367a:	697b      	ldr	r3, [r7, #20]
    367c:	429a      	cmp	r2, r3
    367e:	d909      	bls.n	3694 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3680:	69fb      	ldr	r3, [r7, #28]
    3682:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3684:	69f8      	ldr	r0, [r7, #28]
    3686:	4b0e      	ldr	r3, [pc, #56]	; (36c0 <timer_add_timer_task+0xa8>)
    3688:	4798      	blx	r3
    368a:	61f8      	str	r0, [r7, #28]
    368c:	69fb      	ldr	r3, [r7, #28]
    368e:	2b00      	cmp	r3, #0
    3690:	d1d9      	bne.n	3646 <timer_add_timer_task+0x2e>
    3692:	e000      	b.n	3696 <timer_add_timer_task+0x7e>
			break;
    3694:	bf00      	nop
	}

	if (it == head) {
    3696:	69fa      	ldr	r2, [r7, #28]
    3698:	693b      	ldr	r3, [r7, #16]
    369a:	429a      	cmp	r2, r3
    369c:	d104      	bne.n	36a8 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    369e:	68b9      	ldr	r1, [r7, #8]
    36a0:	68f8      	ldr	r0, [r7, #12]
    36a2:	4b06      	ldr	r3, [pc, #24]	; (36bc <timer_add_timer_task+0xa4>)
    36a4:	4798      	blx	r3
    36a6:	e003      	b.n	36b0 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    36a8:	68b9      	ldr	r1, [r7, #8]
    36aa:	69b8      	ldr	r0, [r7, #24]
    36ac:	4b05      	ldr	r3, [pc, #20]	; (36c4 <timer_add_timer_task+0xac>)
    36ae:	4798      	blx	r3
	}
}
    36b0:	3720      	adds	r7, #32
    36b2:	46bd      	mov	sp, r7
    36b4:	bd80      	pop	{r7, pc}
    36b6:	bf00      	nop
    36b8:	0000329d 	.word	0x0000329d
    36bc:	0000413d 	.word	0x0000413d
    36c0:	000032b5 	.word	0x000032b5
    36c4:	00004195 	.word	0x00004195

000036c8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    36c8:	b580      	push	{r7, lr}
    36ca:	b086      	sub	sp, #24
    36cc:	af00      	add	r7, sp, #0
    36ce:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    36d0:	687b      	ldr	r3, [r7, #4]
    36d2:	3b04      	subs	r3, #4
    36d4:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    36d6:	693b      	ldr	r3, [r7, #16]
    36d8:	3318      	adds	r3, #24
    36da:	4618      	mov	r0, r3
    36dc:	4b27      	ldr	r3, [pc, #156]	; (377c <timer_process_counted+0xb4>)
    36de:	4798      	blx	r3
    36e0:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    36e2:	693b      	ldr	r3, [r7, #16]
    36e4:	695b      	ldr	r3, [r3, #20]
    36e6:	1c5a      	adds	r2, r3, #1
    36e8:	693b      	ldr	r3, [r7, #16]
    36ea:	615a      	str	r2, [r3, #20]
    36ec:	693b      	ldr	r3, [r7, #16]
    36ee:	695b      	ldr	r3, [r3, #20]
    36f0:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    36f2:	693b      	ldr	r3, [r7, #16]
    36f4:	7f1b      	ldrb	r3, [r3, #28]
    36f6:	b2db      	uxtb	r3, r3
    36f8:	f003 0301 	and.w	r3, r3, #1
    36fc:	2b00      	cmp	r3, #0
    36fe:	d106      	bne.n	370e <timer_process_counted+0x46>
    3700:	693b      	ldr	r3, [r7, #16]
    3702:	7f1b      	ldrb	r3, [r3, #28]
    3704:	b2db      	uxtb	r3, r3
    3706:	f003 0302 	and.w	r3, r3, #2
    370a:	2b00      	cmp	r3, #0
    370c:	d027      	beq.n	375e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    370e:	693b      	ldr	r3, [r7, #16]
    3710:	7f1b      	ldrb	r3, [r3, #28]
    3712:	b2db      	uxtb	r3, r3
    3714:	f043 0302 	orr.w	r3, r3, #2
    3718:	b2da      	uxtb	r2, r3
    371a:	693b      	ldr	r3, [r7, #16]
    371c:	771a      	strb	r2, [r3, #28]
		return;
    371e:	e029      	b.n	3774 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    3720:	697b      	ldr	r3, [r7, #20]
    3722:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    3724:	693b      	ldr	r3, [r7, #16]
    3726:	3318      	adds	r3, #24
    3728:	4618      	mov	r0, r3
    372a:	4b15      	ldr	r3, [pc, #84]	; (3780 <timer_process_counted+0xb8>)
    372c:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    372e:	68bb      	ldr	r3, [r7, #8]
    3730:	7c1b      	ldrb	r3, [r3, #16]
    3732:	2b01      	cmp	r3, #1
    3734:	d109      	bne.n	374a <timer_process_counted+0x82>
			tmp->time_label = time;
    3736:	68bb      	ldr	r3, [r7, #8]
    3738:	68fa      	ldr	r2, [r7, #12]
    373a:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    373c:	693b      	ldr	r3, [r7, #16]
    373e:	3318      	adds	r3, #24
    3740:	68fa      	ldr	r2, [r7, #12]
    3742:	68b9      	ldr	r1, [r7, #8]
    3744:	4618      	mov	r0, r3
    3746:	4b0f      	ldr	r3, [pc, #60]	; (3784 <timer_process_counted+0xbc>)
    3748:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    374a:	693b      	ldr	r3, [r7, #16]
    374c:	3318      	adds	r3, #24
    374e:	4618      	mov	r0, r3
    3750:	4b0a      	ldr	r3, [pc, #40]	; (377c <timer_process_counted+0xb4>)
    3752:	4798      	blx	r3
    3754:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    3756:	68bb      	ldr	r3, [r7, #8]
    3758:	68db      	ldr	r3, [r3, #12]
    375a:	68b8      	ldr	r0, [r7, #8]
    375c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    375e:	697b      	ldr	r3, [r7, #20]
    3760:	2b00      	cmp	r3, #0
    3762:	d007      	beq.n	3774 <timer_process_counted+0xac>
    3764:	697b      	ldr	r3, [r7, #20]
    3766:	685b      	ldr	r3, [r3, #4]
    3768:	68fa      	ldr	r2, [r7, #12]
    376a:	1ad2      	subs	r2, r2, r3
    376c:	697b      	ldr	r3, [r7, #20]
    376e:	689b      	ldr	r3, [r3, #8]
    3770:	429a      	cmp	r2, r3
    3772:	d2d5      	bcs.n	3720 <timer_process_counted+0x58>
	}
}
    3774:	3718      	adds	r7, #24
    3776:	46bd      	mov	sp, r7
    3778:	bd80      	pop	{r7, pc}
    377a:	bf00      	nop
    377c:	0000329d 	.word	0x0000329d
    3780:	00004235 	.word	0x00004235
    3784:	00003619 	.word	0x00003619

00003788 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    3788:	b480      	push	{r7}
    378a:	b085      	sub	sp, #20
    378c:	af00      	add	r7, sp, #0
    378e:	4603      	mov	r3, r0
    3790:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3792:	2300      	movs	r3, #0
    3794:	73fb      	strb	r3, [r7, #15]
    3796:	e029      	b.n	37ec <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3798:	f997 300f 	ldrsb.w	r3, [r7, #15]
    379c:	4a19      	ldr	r2, [pc, #100]	; (3804 <_usb_d_find_ep+0x7c>)
    379e:	015b      	lsls	r3, r3, #5
    37a0:	4413      	add	r3, r2
    37a2:	3301      	adds	r3, #1
    37a4:	781b      	ldrb	r3, [r3, #0]
    37a6:	79fa      	ldrb	r2, [r7, #7]
    37a8:	429a      	cmp	r2, r3
    37aa:	d102      	bne.n	37b2 <_usb_d_find_ep+0x2a>
			return i;
    37ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37b0:	e022      	b.n	37f8 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    37b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37b6:	4a13      	ldr	r2, [pc, #76]	; (3804 <_usb_d_find_ep+0x7c>)
    37b8:	015b      	lsls	r3, r3, #5
    37ba:	4413      	add	r3, r2
    37bc:	781b      	ldrb	r3, [r3, #0]
    37be:	2b00      	cmp	r3, #0
    37c0:	d10e      	bne.n	37e0 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    37c2:	79fb      	ldrb	r3, [r7, #7]
    37c4:	f003 030f 	and.w	r3, r3, #15
    37c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    37cc:	490d      	ldr	r1, [pc, #52]	; (3804 <_usb_d_find_ep+0x7c>)
    37ce:	0152      	lsls	r2, r2, #5
    37d0:	440a      	add	r2, r1
    37d2:	3201      	adds	r2, #1
    37d4:	7812      	ldrb	r2, [r2, #0]
    37d6:	4293      	cmp	r3, r2
    37d8:	d102      	bne.n	37e0 <_usb_d_find_ep+0x58>
			return i;
    37da:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37de:	e00b      	b.n	37f8 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    37e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37e4:	b2db      	uxtb	r3, r3
    37e6:	3301      	adds	r3, #1
    37e8:	b2db      	uxtb	r3, r3
    37ea:	73fb      	strb	r3, [r7, #15]
    37ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37f0:	2b03      	cmp	r3, #3
    37f2:	ddd1      	ble.n	3798 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    37f4:	f04f 33ff 	mov.w	r3, #4294967295
}
    37f8:	4618      	mov	r0, r3
    37fa:	3714      	adds	r7, #20
    37fc:	46bd      	mov	sp, r7
    37fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3802:	4770      	bx	lr
    3804:	20000bac 	.word	0x20000bac

00003808 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    3808:	b580      	push	{r7, lr}
    380a:	b088      	sub	sp, #32
    380c:	af00      	add	r7, sp, #0
    380e:	60ba      	str	r2, [r7, #8]
    3810:	607b      	str	r3, [r7, #4]
    3812:	4603      	mov	r3, r0
    3814:	73fb      	strb	r3, [r7, #15]
    3816:	460b      	mov	r3, r1
    3818:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    381a:	68bb      	ldr	r3, [r7, #8]
    381c:	617b      	str	r3, [r7, #20]
    381e:	687b      	ldr	r3, [r7, #4]
    3820:	61bb      	str	r3, [r7, #24]
    3822:	7bbb      	ldrb	r3, [r7, #14]
    3824:	2b00      	cmp	r3, #0
    3826:	d004      	beq.n	3832 <_usb_d_trans+0x2a>
    3828:	7bfb      	ldrb	r3, [r7, #15]
    382a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    382e:	b2db      	uxtb	r3, r3
    3830:	e003      	b.n	383a <_usb_d_trans+0x32>
    3832:	7bfb      	ldrb	r3, [r7, #15]
    3834:	f003 030f 	and.w	r3, r3, #15
    3838:	b2db      	uxtb	r3, r3
    383a:	773b      	strb	r3, [r7, #28]
    383c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3840:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3842:	f107 0314 	add.w	r3, r7, #20
    3846:	4618      	mov	r0, r3
    3848:	4b03      	ldr	r3, [pc, #12]	; (3858 <_usb_d_trans+0x50>)
    384a:	4798      	blx	r3
    384c:	4603      	mov	r3, r0
}
    384e:	4618      	mov	r0, r3
    3850:	3720      	adds	r7, #32
    3852:	46bd      	mov	sp, r7
    3854:	bd80      	pop	{r7, pc}
    3856:	bf00      	nop
    3858:	0000b389 	.word	0x0000b389

0000385c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    385c:	b480      	push	{r7}
    385e:	b085      	sub	sp, #20
    3860:	af00      	add	r7, sp, #0
    3862:	60f8      	str	r0, [r7, #12]
    3864:	60b9      	str	r1, [r7, #8]
    3866:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3868:	2300      	movs	r3, #0
}
    386a:	4618      	mov	r0, r3
    386c:	3714      	adds	r7, #20
    386e:	46bd      	mov	sp, r7
    3870:	f85d 7b04 	ldr.w	r7, [sp], #4
    3874:	4770      	bx	lr
	...

00003878 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3878:	b580      	push	{r7, lr}
    387a:	b086      	sub	sp, #24
    387c:	af00      	add	r7, sp, #0
    387e:	4603      	mov	r3, r0
    3880:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3882:	79fb      	ldrb	r3, [r7, #7]
    3884:	4618      	mov	r0, r3
    3886:	4b2a      	ldr	r3, [pc, #168]	; (3930 <usb_d_cb_trans_setup+0xb8>)
    3888:	4798      	blx	r3
    388a:	4603      	mov	r3, r0
    388c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    388e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3892:	015b      	lsls	r3, r3, #5
    3894:	4a27      	ldr	r2, [pc, #156]	; (3934 <usb_d_cb_trans_setup+0xbc>)
    3896:	4413      	add	r3, r2
    3898:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    389a:	693b      	ldr	r3, [r7, #16]
    389c:	330c      	adds	r3, #12
    389e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    38a0:	79fb      	ldrb	r3, [r7, #7]
    38a2:	68f9      	ldr	r1, [r7, #12]
    38a4:	4618      	mov	r0, r3
    38a6:	4b24      	ldr	r3, [pc, #144]	; (3938 <usb_d_cb_trans_setup+0xc0>)
    38a8:	4798      	blx	r3
    38aa:	4603      	mov	r3, r0
    38ac:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    38ae:	7afb      	ldrb	r3, [r7, #11]
    38b0:	2b08      	cmp	r3, #8
    38b2:	d00d      	beq.n	38d0 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    38b4:	79fb      	ldrb	r3, [r7, #7]
    38b6:	2101      	movs	r1, #1
    38b8:	4618      	mov	r0, r3
    38ba:	4b20      	ldr	r3, [pc, #128]	; (393c <usb_d_cb_trans_setup+0xc4>)
    38bc:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    38be:	79fb      	ldrb	r3, [r7, #7]
    38c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    38c4:	b2db      	uxtb	r3, r3
    38c6:	2101      	movs	r1, #1
    38c8:	4618      	mov	r0, r3
    38ca:	4b1c      	ldr	r3, [pc, #112]	; (393c <usb_d_cb_trans_setup+0xc4>)
    38cc:	4798      	blx	r3
		return;
    38ce:	e02b      	b.n	3928 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    38d0:	79fb      	ldrb	r3, [r7, #7]
    38d2:	2100      	movs	r1, #0
    38d4:	4618      	mov	r0, r3
    38d6:	4b19      	ldr	r3, [pc, #100]	; (393c <usb_d_cb_trans_setup+0xc4>)
    38d8:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    38da:	79fb      	ldrb	r3, [r7, #7]
    38dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    38e0:	b2db      	uxtb	r3, r3
    38e2:	2100      	movs	r1, #0
    38e4:	4618      	mov	r0, r3
    38e6:	4b15      	ldr	r3, [pc, #84]	; (393c <usb_d_cb_trans_setup+0xc4>)
    38e8:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    38ea:	693b      	ldr	r3, [r7, #16]
    38ec:	2201      	movs	r2, #1
    38ee:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    38f0:	693b      	ldr	r3, [r7, #16]
    38f2:	695b      	ldr	r3, [r3, #20]
    38f4:	79fa      	ldrb	r2, [r7, #7]
    38f6:	68f9      	ldr	r1, [r7, #12]
    38f8:	4610      	mov	r0, r2
    38fa:	4798      	blx	r3
    38fc:	4603      	mov	r3, r0
    38fe:	f083 0301 	eor.w	r3, r3, #1
    3902:	b2db      	uxtb	r3, r3
    3904:	2b00      	cmp	r3, #0
    3906:	d00f      	beq.n	3928 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3908:	693b      	ldr	r3, [r7, #16]
    390a:	2205      	movs	r2, #5
    390c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    390e:	79fb      	ldrb	r3, [r7, #7]
    3910:	2101      	movs	r1, #1
    3912:	4618      	mov	r0, r3
    3914:	4b09      	ldr	r3, [pc, #36]	; (393c <usb_d_cb_trans_setup+0xc4>)
    3916:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3918:	79fb      	ldrb	r3, [r7, #7]
    391a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    391e:	b2db      	uxtb	r3, r3
    3920:	2101      	movs	r1, #1
    3922:	4618      	mov	r0, r3
    3924:	4b05      	ldr	r3, [pc, #20]	; (393c <usb_d_cb_trans_setup+0xc4>)
    3926:	4798      	blx	r3
	}
}
    3928:	3718      	adds	r7, #24
    392a:	46bd      	mov	sp, r7
    392c:	bd80      	pop	{r7, pc}
    392e:	bf00      	nop
    3930:	00003789 	.word	0x00003789
    3934:	20000bac 	.word	0x20000bac
    3938:	0000b2e1 	.word	0x0000b2e1
    393c:	0000b159 	.word	0x0000b159

00003940 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3940:	b580      	push	{r7, lr}
    3942:	b084      	sub	sp, #16
    3944:	af00      	add	r7, sp, #0
    3946:	4603      	mov	r3, r0
    3948:	6039      	str	r1, [r7, #0]
    394a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    394c:	79fb      	ldrb	r3, [r7, #7]
    394e:	4618      	mov	r0, r3
    3950:	4b0d      	ldr	r3, [pc, #52]	; (3988 <usb_d_cb_trans_more+0x48>)
    3952:	4798      	blx	r3
    3954:	4603      	mov	r3, r0
    3956:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3958:	f997 300f 	ldrsb.w	r3, [r7, #15]
    395c:	015b      	lsls	r3, r3, #5
    395e:	4a0b      	ldr	r2, [pc, #44]	; (398c <usb_d_cb_trans_more+0x4c>)
    3960:	4413      	add	r3, r2
    3962:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3964:	68bb      	ldr	r3, [r7, #8]
    3966:	789b      	ldrb	r3, [r3, #2]
    3968:	2b03      	cmp	r3, #3
    396a:	d107      	bne.n	397c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    396c:	68bb      	ldr	r3, [r7, #8]
    396e:	699b      	ldr	r3, [r3, #24]
    3970:	79fa      	ldrb	r2, [r7, #7]
    3972:	6839      	ldr	r1, [r7, #0]
    3974:	4610      	mov	r0, r2
    3976:	4798      	blx	r3
    3978:	4603      	mov	r3, r0
    397a:	e000      	b.n	397e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    397c:	2300      	movs	r3, #0
}
    397e:	4618      	mov	r0, r3
    3980:	3710      	adds	r7, #16
    3982:	46bd      	mov	sp, r7
    3984:	bd80      	pop	{r7, pc}
    3986:	bf00      	nop
    3988:	00003789 	.word	0x00003789
    398c:	20000bac 	.word	0x20000bac

00003990 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3990:	b590      	push	{r4, r7, lr}
    3992:	b087      	sub	sp, #28
    3994:	af02      	add	r7, sp, #8
    3996:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	789b      	ldrb	r3, [r3, #2]
    399c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    399e:	687b      	ldr	r3, [r7, #4]
    39a0:	7b1b      	ldrb	r3, [r3, #12]
    39a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    39a6:	2b00      	cmp	r3, #0
    39a8:	bf14      	ite	ne
    39aa:	2301      	movne	r3, #1
    39ac:	2300      	moveq	r3, #0
    39ae:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    39b0:	7bfb      	ldrb	r3, [r7, #15]
    39b2:	2b03      	cmp	r3, #3
    39b4:	d13a      	bne.n	3a2c <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    39b6:	687b      	ldr	r3, [r7, #4]
    39b8:	69db      	ldr	r3, [r3, #28]
    39ba:	687a      	ldr	r2, [r7, #4]
    39bc:	7850      	ldrb	r0, [r2, #1]
    39be:	687a      	ldr	r2, [r7, #4]
    39c0:	320c      	adds	r2, #12
    39c2:	2101      	movs	r1, #1
    39c4:	4798      	blx	r3
    39c6:	4603      	mov	r3, r0
    39c8:	737b      	strb	r3, [r7, #13]
		if (err) {
    39ca:	7b7b      	ldrb	r3, [r7, #13]
    39cc:	2b00      	cmp	r3, #0
    39ce:	d015      	beq.n	39fc <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    39d0:	687b      	ldr	r3, [r7, #4]
    39d2:	2205      	movs	r2, #5
    39d4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    39d6:	687b      	ldr	r3, [r7, #4]
    39d8:	2202      	movs	r2, #2
    39da:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    39dc:	7bbb      	ldrb	r3, [r7, #14]
    39de:	2b00      	cmp	r3, #0
    39e0:	d002      	beq.n	39e8 <usb_d_ctrl_trans_done+0x58>
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	785b      	ldrb	r3, [r3, #1]
    39e6:	e004      	b.n	39f2 <usb_d_ctrl_trans_done+0x62>
    39e8:	687b      	ldr	r3, [r7, #4]
    39ea:	785b      	ldrb	r3, [r3, #1]
    39ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    39f0:	b2db      	uxtb	r3, r3
    39f2:	2101      	movs	r1, #1
    39f4:	4618      	mov	r0, r3
    39f6:	4b15      	ldr	r3, [pc, #84]	; (3a4c <usb_d_ctrl_trans_done+0xbc>)
    39f8:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    39fa:	e022      	b.n	3a42 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	2204      	movs	r2, #4
    3a00:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3a02:	687b      	ldr	r3, [r7, #4]
    3a04:	7858      	ldrb	r0, [r3, #1]
    3a06:	7bbb      	ldrb	r3, [r7, #14]
    3a08:	2b00      	cmp	r3, #0
    3a0a:	bf14      	ite	ne
    3a0c:	2301      	movne	r3, #1
    3a0e:	2300      	moveq	r3, #0
    3a10:	b2db      	uxtb	r3, r3
    3a12:	f083 0301 	eor.w	r3, r3, #1
    3a16:	b2db      	uxtb	r3, r3
    3a18:	f003 0301 	and.w	r3, r3, #1
    3a1c:	b2d9      	uxtb	r1, r3
    3a1e:	2301      	movs	r3, #1
    3a20:	9300      	str	r3, [sp, #0]
    3a22:	2300      	movs	r3, #0
    3a24:	2200      	movs	r2, #0
    3a26:	4c0a      	ldr	r4, [pc, #40]	; (3a50 <usb_d_ctrl_trans_done+0xc0>)
    3a28:	47a0      	blx	r4
}
    3a2a:	e00a      	b.n	3a42 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3a2c:	687b      	ldr	r3, [r7, #4]
    3a2e:	69db      	ldr	r3, [r3, #28]
    3a30:	687a      	ldr	r2, [r7, #4]
    3a32:	7850      	ldrb	r0, [r2, #1]
    3a34:	687a      	ldr	r2, [r7, #4]
    3a36:	320c      	adds	r2, #12
    3a38:	2100      	movs	r1, #0
    3a3a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3a3c:	687b      	ldr	r3, [r7, #4]
    3a3e:	2202      	movs	r2, #2
    3a40:	709a      	strb	r2, [r3, #2]
}
    3a42:	bf00      	nop
    3a44:	3714      	adds	r7, #20
    3a46:	46bd      	mov	sp, r7
    3a48:	bd90      	pop	{r4, r7, pc}
    3a4a:	bf00      	nop
    3a4c:	0000b159 	.word	0x0000b159
    3a50:	00003809 	.word	0x00003809

00003a54 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3a54:	b580      	push	{r7, lr}
    3a56:	b086      	sub	sp, #24
    3a58:	af00      	add	r7, sp, #0
    3a5a:	4603      	mov	r3, r0
    3a5c:	60b9      	str	r1, [r7, #8]
    3a5e:	607a      	str	r2, [r7, #4]
    3a60:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3a62:	7bfb      	ldrb	r3, [r7, #15]
    3a64:	4618      	mov	r0, r3
    3a66:	4b2f      	ldr	r3, [pc, #188]	; (3b24 <_usb_d_cb_trans_done+0xd0>)
    3a68:	4798      	blx	r3
    3a6a:	4603      	mov	r3, r0
    3a6c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a72:	015b      	lsls	r3, r3, #5
    3a74:	4a2c      	ldr	r2, [pc, #176]	; (3b28 <_usb_d_cb_trans_done+0xd4>)
    3a76:	4413      	add	r3, r2
    3a78:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    3a7a:	68bb      	ldr	r3, [r7, #8]
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d10e      	bne.n	3a9e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3a80:	693b      	ldr	r3, [r7, #16]
    3a82:	2200      	movs	r2, #0
    3a84:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3a86:	693b      	ldr	r3, [r7, #16]
    3a88:	781b      	ldrb	r3, [r3, #0]
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	d103      	bne.n	3a96 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3a8e:	6938      	ldr	r0, [r7, #16]
    3a90:	4b26      	ldr	r3, [pc, #152]	; (3b2c <_usb_d_cb_trans_done+0xd8>)
    3a92:	4798      	blx	r3
			return;
    3a94:	e043      	b.n	3b1e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3a96:	693b      	ldr	r3, [r7, #16]
    3a98:	2201      	movs	r2, #1
    3a9a:	709a      	strb	r2, [r3, #2]
    3a9c:	e038      	b.n	3b10 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3a9e:	68bb      	ldr	r3, [r7, #8]
    3aa0:	2b01      	cmp	r3, #1
    3aa2:	d113      	bne.n	3acc <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3aa4:	693b      	ldr	r3, [r7, #16]
    3aa6:	2202      	movs	r2, #2
    3aa8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3aaa:	693b      	ldr	r3, [r7, #16]
    3aac:	781b      	ldrb	r3, [r3, #0]
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d108      	bne.n	3ac4 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3ab2:	693b      	ldr	r3, [r7, #16]
    3ab4:	2202      	movs	r2, #2
    3ab6:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3ab8:	7bfb      	ldrb	r3, [r7, #15]
    3aba:	2100      	movs	r1, #0
    3abc:	4618      	mov	r0, r3
    3abe:	4b1c      	ldr	r3, [pc, #112]	; (3b30 <_usb_d_cb_trans_done+0xdc>)
    3ac0:	4798      	blx	r3
    3ac2:	e025      	b.n	3b10 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3ac4:	693b      	ldr	r3, [r7, #16]
    3ac6:	2205      	movs	r2, #5
    3ac8:	709a      	strb	r2, [r3, #2]
    3aca:	e021      	b.n	3b10 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3acc:	68bb      	ldr	r3, [r7, #8]
    3ace:	2b02      	cmp	r3, #2
    3ad0:	d10e      	bne.n	3af0 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3ad2:	693b      	ldr	r3, [r7, #16]
    3ad4:	2204      	movs	r2, #4
    3ad6:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3ad8:	693b      	ldr	r3, [r7, #16]
    3ada:	781b      	ldrb	r3, [r3, #0]
    3adc:	2b00      	cmp	r3, #0
    3ade:	d103      	bne.n	3ae8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3ae0:	693b      	ldr	r3, [r7, #16]
    3ae2:	2202      	movs	r2, #2
    3ae4:	709a      	strb	r2, [r3, #2]
			return;
    3ae6:	e01a      	b.n	3b1e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3ae8:	693b      	ldr	r3, [r7, #16]
    3aea:	2201      	movs	r2, #1
    3aec:	709a      	strb	r2, [r3, #2]
    3aee:	e00f      	b.n	3b10 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3af0:	68bb      	ldr	r3, [r7, #8]
    3af2:	2b03      	cmp	r3, #3
    3af4:	d106      	bne.n	3b04 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3af6:	693b      	ldr	r3, [r7, #16]
    3af8:	2200      	movs	r2, #0
    3afa:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3afc:	693b      	ldr	r3, [r7, #16]
    3afe:	2205      	movs	r2, #5
    3b00:	70da      	strb	r2, [r3, #3]
    3b02:	e005      	b.n	3b10 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3b04:	693b      	ldr	r3, [r7, #16]
    3b06:	2206      	movs	r2, #6
    3b08:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3b0a:	693b      	ldr	r3, [r7, #16]
    3b0c:	2206      	movs	r2, #6
    3b0e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3b10:	693b      	ldr	r3, [r7, #16]
    3b12:	69db      	ldr	r3, [r3, #28]
    3b14:	693a      	ldr	r2, [r7, #16]
    3b16:	78d1      	ldrb	r1, [r2, #3]
    3b18:	687a      	ldr	r2, [r7, #4]
    3b1a:	7bf8      	ldrb	r0, [r7, #15]
    3b1c:	4798      	blx	r3
}
    3b1e:	3718      	adds	r7, #24
    3b20:	46bd      	mov	sp, r7
    3b22:	bd80      	pop	{r7, pc}
    3b24:	00003789 	.word	0x00003789
    3b28:	20000bac 	.word	0x20000bac
    3b2c:	00003991 	.word	0x00003991
    3b30:	0000b159 	.word	0x0000b159

00003b34 <usb_d_init>:

int32_t usb_d_init(void)
{
    3b34:	b580      	push	{r7, lr}
    3b36:	b082      	sub	sp, #8
    3b38:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3b3a:	4b21      	ldr	r3, [pc, #132]	; (3bc0 <usb_d_init+0x8c>)
    3b3c:	4798      	blx	r3
    3b3e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3b40:	683b      	ldr	r3, [r7, #0]
    3b42:	2b00      	cmp	r3, #0
    3b44:	da01      	bge.n	3b4a <usb_d_init+0x16>
		return rc;
    3b46:	683b      	ldr	r3, [r7, #0]
    3b48:	e036      	b.n	3bb8 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3b4a:	2280      	movs	r2, #128	; 0x80
    3b4c:	2100      	movs	r1, #0
    3b4e:	481d      	ldr	r0, [pc, #116]	; (3bc4 <usb_d_init+0x90>)
    3b50:	4b1d      	ldr	r3, [pc, #116]	; (3bc8 <usb_d_init+0x94>)
    3b52:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3b54:	2300      	movs	r3, #0
    3b56:	71fb      	strb	r3, [r7, #7]
    3b58:	e01e      	b.n	3b98 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3b5a:	79fb      	ldrb	r3, [r7, #7]
    3b5c:	4a19      	ldr	r2, [pc, #100]	; (3bc4 <usb_d_init+0x90>)
    3b5e:	015b      	lsls	r3, r3, #5
    3b60:	4413      	add	r3, r2
    3b62:	3301      	adds	r3, #1
    3b64:	22ff      	movs	r2, #255	; 0xff
    3b66:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3b68:	79fb      	ldrb	r3, [r7, #7]
    3b6a:	4a16      	ldr	r2, [pc, #88]	; (3bc4 <usb_d_init+0x90>)
    3b6c:	015b      	lsls	r3, r3, #5
    3b6e:	4413      	add	r3, r2
    3b70:	3314      	adds	r3, #20
    3b72:	4a16      	ldr	r2, [pc, #88]	; (3bcc <usb_d_init+0x98>)
    3b74:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3b76:	79fb      	ldrb	r3, [r7, #7]
    3b78:	4a12      	ldr	r2, [pc, #72]	; (3bc4 <usb_d_init+0x90>)
    3b7a:	015b      	lsls	r3, r3, #5
    3b7c:	4413      	add	r3, r2
    3b7e:	3318      	adds	r3, #24
    3b80:	4a12      	ldr	r2, [pc, #72]	; (3bcc <usb_d_init+0x98>)
    3b82:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3b84:	79fb      	ldrb	r3, [r7, #7]
    3b86:	4a0f      	ldr	r2, [pc, #60]	; (3bc4 <usb_d_init+0x90>)
    3b88:	015b      	lsls	r3, r3, #5
    3b8a:	4413      	add	r3, r2
    3b8c:	331c      	adds	r3, #28
    3b8e:	4a0f      	ldr	r2, [pc, #60]	; (3bcc <usb_d_init+0x98>)
    3b90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3b92:	79fb      	ldrb	r3, [r7, #7]
    3b94:	3301      	adds	r3, #1
    3b96:	71fb      	strb	r3, [r7, #7]
    3b98:	79fb      	ldrb	r3, [r7, #7]
    3b9a:	2b03      	cmp	r3, #3
    3b9c:	d9dd      	bls.n	3b5a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3b9e:	490c      	ldr	r1, [pc, #48]	; (3bd0 <usb_d_init+0x9c>)
    3ba0:	2000      	movs	r0, #0
    3ba2:	4b0c      	ldr	r3, [pc, #48]	; (3bd4 <usb_d_init+0xa0>)
    3ba4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3ba6:	490c      	ldr	r1, [pc, #48]	; (3bd8 <usb_d_init+0xa4>)
    3ba8:	2001      	movs	r0, #1
    3baa:	4b0a      	ldr	r3, [pc, #40]	; (3bd4 <usb_d_init+0xa0>)
    3bac:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3bae:	490b      	ldr	r1, [pc, #44]	; (3bdc <usb_d_init+0xa8>)
    3bb0:	2002      	movs	r0, #2
    3bb2:	4b08      	ldr	r3, [pc, #32]	; (3bd4 <usb_d_init+0xa0>)
    3bb4:	4798      	blx	r3
	return ERR_NONE;
    3bb6:	2300      	movs	r3, #0
}
    3bb8:	4618      	mov	r0, r3
    3bba:	3708      	adds	r7, #8
    3bbc:	46bd      	mov	sp, r7
    3bbe:	bd80      	pop	{r7, pc}
    3bc0:	0000a9a1 	.word	0x0000a9a1
    3bc4:	20000bac 	.word	0x20000bac
    3bc8:	00013b59 	.word	0x00013b59
    3bcc:	0000385d 	.word	0x0000385d
    3bd0:	00003879 	.word	0x00003879
    3bd4:	0000b5e9 	.word	0x0000b5e9
    3bd8:	00003941 	.word	0x00003941
    3bdc:	00003a55 	.word	0x00003a55

00003be0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3be0:	b580      	push	{r7, lr}
    3be2:	b082      	sub	sp, #8
    3be4:	af00      	add	r7, sp, #0
    3be6:	4603      	mov	r3, r0
    3be8:	6039      	str	r1, [r7, #0]
    3bea:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3bec:	79fb      	ldrb	r3, [r7, #7]
    3bee:	6839      	ldr	r1, [r7, #0]
    3bf0:	4618      	mov	r0, r3
    3bf2:	4b03      	ldr	r3, [pc, #12]	; (3c00 <usb_d_register_callback+0x20>)
    3bf4:	4798      	blx	r3
}
    3bf6:	bf00      	nop
    3bf8:	3708      	adds	r7, #8
    3bfa:	46bd      	mov	sp, r7
    3bfc:	bd80      	pop	{r7, pc}
    3bfe:	bf00      	nop
    3c00:	0000b5a1 	.word	0x0000b5a1

00003c04 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3c04:	b580      	push	{r7, lr}
    3c06:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3c08:	4b02      	ldr	r3, [pc, #8]	; (3c14 <usb_d_enable+0x10>)
    3c0a:	4798      	blx	r3
    3c0c:	4603      	mov	r3, r0
}
    3c0e:	4618      	mov	r0, r3
    3c10:	bd80      	pop	{r7, pc}
    3c12:	bf00      	nop
    3c14:	0000aa91 	.word	0x0000aa91

00003c18 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3c18:	b580      	push	{r7, lr}
    3c1a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3c1c:	4b01      	ldr	r3, [pc, #4]	; (3c24 <usb_d_attach+0xc>)
    3c1e:	4798      	blx	r3
}
    3c20:	bf00      	nop
    3c22:	bd80      	pop	{r7, pc}
    3c24:	0000ab15 	.word	0x0000ab15

00003c28 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3c28:	b580      	push	{r7, lr}
    3c2a:	b082      	sub	sp, #8
    3c2c:	af00      	add	r7, sp, #0
    3c2e:	4603      	mov	r3, r0
    3c30:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3c32:	79fb      	ldrb	r3, [r7, #7]
    3c34:	4618      	mov	r0, r3
    3c36:	4b03      	ldr	r3, [pc, #12]	; (3c44 <usb_d_set_address+0x1c>)
    3c38:	4798      	blx	r3
}
    3c3a:	bf00      	nop
    3c3c:	3708      	adds	r7, #8
    3c3e:	46bd      	mov	sp, r7
    3c40:	bd80      	pop	{r7, pc}
    3c42:	bf00      	nop
    3c44:	0000ab29 	.word	0x0000ab29

00003c48 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3c48:	b580      	push	{r7, lr}
    3c4a:	b082      	sub	sp, #8
    3c4c:	af00      	add	r7, sp, #0
    3c4e:	4603      	mov	r3, r0
    3c50:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3c52:	79fb      	ldrb	r3, [r7, #7]
    3c54:	b29b      	uxth	r3, r3
    3c56:	461a      	mov	r2, r3
    3c58:	2100      	movs	r1, #0
    3c5a:	2000      	movs	r0, #0
    3c5c:	4b03      	ldr	r3, [pc, #12]	; (3c6c <usb_d_ep0_init+0x24>)
    3c5e:	4798      	blx	r3
    3c60:	4603      	mov	r3, r0
}
    3c62:	4618      	mov	r0, r3
    3c64:	3708      	adds	r7, #8
    3c66:	46bd      	mov	sp, r7
    3c68:	bd80      	pop	{r7, pc}
    3c6a:	bf00      	nop
    3c6c:	00003c71 	.word	0x00003c71

00003c70 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3c70:	b580      	push	{r7, lr}
    3c72:	b086      	sub	sp, #24
    3c74:	af00      	add	r7, sp, #0
    3c76:	4603      	mov	r3, r0
    3c78:	71fb      	strb	r3, [r7, #7]
    3c7a:	460b      	mov	r3, r1
    3c7c:	71bb      	strb	r3, [r7, #6]
    3c7e:	4613      	mov	r3, r2
    3c80:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c82:	79fb      	ldrb	r3, [r7, #7]
    3c84:	4618      	mov	r0, r3
    3c86:	4b1e      	ldr	r3, [pc, #120]	; (3d00 <usb_d_ep_init+0x90>)
    3c88:	4798      	blx	r3
    3c8a:	4603      	mov	r3, r0
    3c8c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c92:	015b      	lsls	r3, r3, #5
    3c94:	4a1b      	ldr	r2, [pc, #108]	; (3d04 <usb_d_ep_init+0x94>)
    3c96:	4413      	add	r3, r2
    3c98:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    3c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	db02      	blt.n	3ca8 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3ca2:	f06f 0313 	mvn.w	r3, #19
    3ca6:	e027      	b.n	3cf8 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3ca8:	20ff      	movs	r0, #255	; 0xff
    3caa:	4b15      	ldr	r3, [pc, #84]	; (3d00 <usb_d_ep_init+0x90>)
    3cac:	4798      	blx	r3
    3cae:	4603      	mov	r3, r0
    3cb0:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	da02      	bge.n	3cc0 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    3cba:	f06f 0314 	mvn.w	r3, #20
    3cbe:	e01b      	b.n	3cf8 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3cc4:	015b      	lsls	r3, r3, #5
    3cc6:	4a0f      	ldr	r2, [pc, #60]	; (3d04 <usb_d_ep_init+0x94>)
    3cc8:	4413      	add	r3, r2
    3cca:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3ccc:	88ba      	ldrh	r2, [r7, #4]
    3cce:	79b9      	ldrb	r1, [r7, #6]
    3cd0:	79fb      	ldrb	r3, [r7, #7]
    3cd2:	4618      	mov	r0, r3
    3cd4:	4b0c      	ldr	r3, [pc, #48]	; (3d08 <usb_d_ep_init+0x98>)
    3cd6:	4798      	blx	r3
    3cd8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3cda:	68fb      	ldr	r3, [r7, #12]
    3cdc:	2b00      	cmp	r3, #0
    3cde:	da01      	bge.n	3ce4 <usb_d_ep_init+0x74>
		return rc;
    3ce0:	68fb      	ldr	r3, [r7, #12]
    3ce2:	e009      	b.n	3cf8 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3ce4:	693b      	ldr	r3, [r7, #16]
    3ce6:	79fa      	ldrb	r2, [r7, #7]
    3ce8:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3cea:	79bb      	ldrb	r3, [r7, #6]
    3cec:	f003 0303 	and.w	r3, r3, #3
    3cf0:	b2da      	uxtb	r2, r3
    3cf2:	693b      	ldr	r3, [r7, #16]
    3cf4:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3cf6:	2300      	movs	r3, #0
}
    3cf8:	4618      	mov	r0, r3
    3cfa:	3718      	adds	r7, #24
    3cfc:	46bd      	mov	sp, r7
    3cfe:	bd80      	pop	{r7, pc}
    3d00:	00003789 	.word	0x00003789
    3d04:	20000bac 	.word	0x20000bac
    3d08:	0000abc9 	.word	0x0000abc9

00003d0c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3d0c:	b580      	push	{r7, lr}
    3d0e:	b084      	sub	sp, #16
    3d10:	af00      	add	r7, sp, #0
    3d12:	4603      	mov	r3, r0
    3d14:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3d16:	79fb      	ldrb	r3, [r7, #7]
    3d18:	4618      	mov	r0, r3
    3d1a:	4b0d      	ldr	r3, [pc, #52]	; (3d50 <usb_d_ep_deinit+0x44>)
    3d1c:	4798      	blx	r3
    3d1e:	4603      	mov	r3, r0
    3d20:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3d26:	015b      	lsls	r3, r3, #5
    3d28:	4a0a      	ldr	r2, [pc, #40]	; (3d54 <usb_d_ep_deinit+0x48>)
    3d2a:	4413      	add	r3, r2
    3d2c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3d32:	2b00      	cmp	r3, #0
    3d34:	db07      	blt.n	3d46 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3d36:	79fb      	ldrb	r3, [r7, #7]
    3d38:	4618      	mov	r0, r3
    3d3a:	4b07      	ldr	r3, [pc, #28]	; (3d58 <usb_d_ep_deinit+0x4c>)
    3d3c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3d3e:	68bb      	ldr	r3, [r7, #8]
    3d40:	22ff      	movs	r2, #255	; 0xff
    3d42:	705a      	strb	r2, [r3, #1]
    3d44:	e000      	b.n	3d48 <usb_d_ep_deinit+0x3c>
		return;
    3d46:	bf00      	nop
}
    3d48:	3710      	adds	r7, #16
    3d4a:	46bd      	mov	sp, r7
    3d4c:	bd80      	pop	{r7, pc}
    3d4e:	bf00      	nop
    3d50:	00003789 	.word	0x00003789
    3d54:	20000bac 	.word	0x20000bac
    3d58:	0000acfd 	.word	0x0000acfd

00003d5c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3d5c:	b580      	push	{r7, lr}
    3d5e:	b086      	sub	sp, #24
    3d60:	af00      	add	r7, sp, #0
    3d62:	4603      	mov	r3, r0
    3d64:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3d66:	79fb      	ldrb	r3, [r7, #7]
    3d68:	4618      	mov	r0, r3
    3d6a:	4b15      	ldr	r3, [pc, #84]	; (3dc0 <usb_d_ep_enable+0x64>)
    3d6c:	4798      	blx	r3
    3d6e:	4603      	mov	r3, r0
    3d70:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3d72:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3d76:	015b      	lsls	r3, r3, #5
    3d78:	4a12      	ldr	r2, [pc, #72]	; (3dc4 <usb_d_ep_enable+0x68>)
    3d7a:	4413      	add	r3, r2
    3d7c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3d7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3d82:	2b00      	cmp	r3, #0
    3d84:	da02      	bge.n	3d8c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3d86:	f06f 0311 	mvn.w	r3, #17
    3d8a:	e014      	b.n	3db6 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3d8c:	693b      	ldr	r3, [r7, #16]
    3d8e:	781b      	ldrb	r3, [r3, #0]
    3d90:	2b00      	cmp	r3, #0
    3d92:	d101      	bne.n	3d98 <usb_d_ep_enable+0x3c>
    3d94:	2202      	movs	r2, #2
    3d96:	e000      	b.n	3d9a <usb_d_ep_enable+0x3e>
    3d98:	2201      	movs	r2, #1
    3d9a:	693b      	ldr	r3, [r7, #16]
    3d9c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3d9e:	79fb      	ldrb	r3, [r7, #7]
    3da0:	4618      	mov	r0, r3
    3da2:	4b09      	ldr	r3, [pc, #36]	; (3dc8 <usb_d_ep_enable+0x6c>)
    3da4:	4798      	blx	r3
    3da6:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3da8:	68fb      	ldr	r3, [r7, #12]
    3daa:	2b00      	cmp	r3, #0
    3dac:	da02      	bge.n	3db4 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3dae:	693b      	ldr	r3, [r7, #16]
    3db0:	2200      	movs	r2, #0
    3db2:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3db4:	68fb      	ldr	r3, [r7, #12]
}
    3db6:	4618      	mov	r0, r3
    3db8:	3718      	adds	r7, #24
    3dba:	46bd      	mov	sp, r7
    3dbc:	bd80      	pop	{r7, pc}
    3dbe:	bf00      	nop
    3dc0:	00003789 	.word	0x00003789
    3dc4:	20000bac 	.word	0x20000bac
    3dc8:	0000ade1 	.word	0x0000ade1

00003dcc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3dcc:	b590      	push	{r4, r7, lr}
    3dce:	b08d      	sub	sp, #52	; 0x34
    3dd0:	af02      	add	r7, sp, #8
    3dd2:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	7a1b      	ldrb	r3, [r3, #8]
    3dd8:	4618      	mov	r0, r3
    3dda:	4b51      	ldr	r3, [pc, #324]	; (3f20 <usb_d_ep_transfer+0x154>)
    3ddc:	4798      	blx	r3
    3dde:	4603      	mov	r3, r0
    3de0:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3de2:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3de6:	015b      	lsls	r3, r3, #5
    3de8:	4a4e      	ldr	r2, [pc, #312]	; (3f24 <usb_d_ep_transfer+0x158>)
    3dea:	4413      	add	r3, r2
    3dec:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3dee:	687b      	ldr	r3, [r7, #4]
    3df0:	7a1b      	ldrb	r3, [r3, #8]
    3df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3df6:	2b00      	cmp	r3, #0
    3df8:	bf14      	ite	ne
    3dfa:	2301      	movne	r3, #1
    3dfc:	2300      	moveq	r3, #0
    3dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	7a5b      	ldrb	r3, [r3, #9]
    3e06:	2b00      	cmp	r3, #0
    3e08:	bf14      	ite	ne
    3e0a:	2301      	movne	r3, #1
    3e0c:	2300      	moveq	r3, #0
    3e0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3e12:	687b      	ldr	r3, [r7, #4]
    3e14:	685b      	ldr	r3, [r3, #4]
    3e16:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3e18:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3e1c:	2b00      	cmp	r3, #0
    3e1e:	da02      	bge.n	3e26 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3e20:	f06f 0311 	mvn.w	r3, #17
    3e24:	e077      	b.n	3f16 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3e26:	f107 0308 	add.w	r3, r7, #8
    3e2a:	4618      	mov	r0, r3
    3e2c:	4b3e      	ldr	r3, [pc, #248]	; (3f28 <usb_d_ep_transfer+0x15c>)
    3e2e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3e30:	69bb      	ldr	r3, [r7, #24]
    3e32:	789b      	ldrb	r3, [r3, #2]
    3e34:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3e36:	7bfb      	ldrb	r3, [r7, #15]
    3e38:	b2db      	uxtb	r3, r3
    3e3a:	2b01      	cmp	r3, #1
    3e3c:	d10c      	bne.n	3e58 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3e3e:	69bb      	ldr	r3, [r7, #24]
    3e40:	2203      	movs	r2, #3
    3e42:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3e44:	f107 0308 	add.w	r3, r7, #8
    3e48:	4618      	mov	r0, r3
    3e4a:	4b38      	ldr	r3, [pc, #224]	; (3f2c <usb_d_ep_transfer+0x160>)
    3e4c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3e4e:	69bb      	ldr	r3, [r7, #24]
    3e50:	781b      	ldrb	r3, [r3, #0]
    3e52:	2b00      	cmp	r3, #0
    3e54:	d151      	bne.n	3efa <usb_d_ep_transfer+0x12e>
    3e56:	e017      	b.n	3e88 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3e58:	f107 0308 	add.w	r3, r7, #8
    3e5c:	4618      	mov	r0, r3
    3e5e:	4b33      	ldr	r3, [pc, #204]	; (3f2c <usb_d_ep_transfer+0x160>)
    3e60:	4798      	blx	r3
		switch (state) {
    3e62:	7bfb      	ldrb	r3, [r7, #15]
    3e64:	b2db      	uxtb	r3, r3
    3e66:	2b05      	cmp	r3, #5
    3e68:	d004      	beq.n	3e74 <usb_d_ep_transfer+0xa8>
    3e6a:	2b06      	cmp	r3, #6
    3e6c:	d004      	beq.n	3e78 <usb_d_ep_transfer+0xac>
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d005      	beq.n	3e7e <usb_d_ep_transfer+0xb2>
    3e72:	e007      	b.n	3e84 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3e74:	2302      	movs	r3, #2
    3e76:	e04e      	b.n	3f16 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3e78:	f06f 030f 	mvn.w	r3, #15
    3e7c:	e04b      	b.n	3f16 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3e7e:	f06f 0312 	mvn.w	r3, #18
    3e82:	e048      	b.n	3f16 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3e84:	2301      	movs	r3, #1
    3e86:	e046      	b.n	3f16 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3e88:	69bb      	ldr	r3, [r7, #24]
    3e8a:	7c9b      	ldrb	r3, [r3, #18]
    3e8c:	b29a      	uxth	r2, r3
    3e8e:	69bb      	ldr	r3, [r7, #24]
    3e90:	7cdb      	ldrb	r3, [r3, #19]
    3e92:	b29b      	uxth	r3, r3
    3e94:	021b      	lsls	r3, r3, #8
    3e96:	b29b      	uxth	r3, r3
    3e98:	4413      	add	r3, r2
    3e9a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3e9c:	8afb      	ldrh	r3, [r7, #22]
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	d10b      	bne.n	3eba <usb_d_ep_transfer+0xee>
			dir                 = true;
    3ea2:	2301      	movs	r3, #1
    3ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3ea8:	2300      	movs	r3, #0
    3eaa:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3eac:	2301      	movs	r3, #1
    3eae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3eb2:	69bb      	ldr	r3, [r7, #24]
    3eb4:	2204      	movs	r2, #4
    3eb6:	709a      	strb	r2, [r3, #2]
    3eb8:	e01f      	b.n	3efa <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3eba:	69bb      	ldr	r3, [r7, #24]
    3ebc:	7b1b      	ldrb	r3, [r3, #12]
    3ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	bf14      	ite	ne
    3ec6:	2301      	movne	r3, #1
    3ec8:	2300      	moveq	r3, #0
    3eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3ece:	8afa      	ldrh	r2, [r7, #22]
    3ed0:	6a3b      	ldr	r3, [r7, #32]
    3ed2:	429a      	cmp	r2, r3
    3ed4:	d201      	bcs.n	3eda <usb_d_ep_transfer+0x10e>
				len = req_len;
    3ed6:	8afb      	ldrh	r3, [r7, #22]
    3ed8:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3ede:	2b00      	cmp	r3, #0
    3ee0:	d008      	beq.n	3ef4 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3ee2:	8afa      	ldrh	r2, [r7, #22]
    3ee4:	6a3b      	ldr	r3, [r7, #32]
    3ee6:	429a      	cmp	r2, r3
    3ee8:	bf8c      	ite	hi
    3eea:	2301      	movhi	r3, #1
    3eec:	2300      	movls	r3, #0
    3eee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3ef2:	e002      	b.n	3efa <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3ef4:	2300      	movs	r3, #0
    3ef6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3efa:	687b      	ldr	r3, [r7, #4]
    3efc:	7a18      	ldrb	r0, [r3, #8]
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	681a      	ldr	r2, [r3, #0]
    3f02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3f06:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3f0a:	9300      	str	r3, [sp, #0]
    3f0c:	6a3b      	ldr	r3, [r7, #32]
    3f0e:	4c08      	ldr	r4, [pc, #32]	; (3f30 <usb_d_ep_transfer+0x164>)
    3f10:	47a0      	blx	r4
    3f12:	6138      	str	r0, [r7, #16]
	return rc;
    3f14:	693b      	ldr	r3, [r7, #16]
}
    3f16:	4618      	mov	r0, r3
    3f18:	372c      	adds	r7, #44	; 0x2c
    3f1a:	46bd      	mov	sp, r7
    3f1c:	bd90      	pop	{r4, r7, pc}
    3f1e:	bf00      	nop
    3f20:	00003789 	.word	0x00003789
    3f24:	20000bac 	.word	0x20000bac
    3f28:	0000bd55 	.word	0x0000bd55
    3f2c:	0000bd7b 	.word	0x0000bd7b
    3f30:	00003809 	.word	0x00003809

00003f34 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3f34:	b580      	push	{r7, lr}
    3f36:	b084      	sub	sp, #16
    3f38:	af00      	add	r7, sp, #0
    3f3a:	4603      	mov	r3, r0
    3f3c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3f3e:	79fb      	ldrb	r3, [r7, #7]
    3f40:	4618      	mov	r0, r3
    3f42:	4b0e      	ldr	r3, [pc, #56]	; (3f7c <usb_d_ep_abort+0x48>)
    3f44:	4798      	blx	r3
    3f46:	4603      	mov	r3, r0
    3f48:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3f4e:	015b      	lsls	r3, r3, #5
    3f50:	4a0b      	ldr	r2, [pc, #44]	; (3f80 <usb_d_ep_abort+0x4c>)
    3f52:	4413      	add	r3, r2
    3f54:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3f5a:	2b00      	cmp	r3, #0
    3f5c:	db0a      	blt.n	3f74 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3f5e:	79fb      	ldrb	r3, [r7, #7]
    3f60:	4618      	mov	r0, r3
    3f62:	4b08      	ldr	r3, [pc, #32]	; (3f84 <usb_d_ep_abort+0x50>)
    3f64:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3f66:	68bb      	ldr	r3, [r7, #8]
    3f68:	2201      	movs	r2, #1
    3f6a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3f6c:	68bb      	ldr	r3, [r7, #8]
    3f6e:	2204      	movs	r2, #4
    3f70:	70da      	strb	r2, [r3, #3]
    3f72:	e000      	b.n	3f76 <usb_d_ep_abort+0x42>
		return;
    3f74:	bf00      	nop
}
    3f76:	3710      	adds	r7, #16
    3f78:	46bd      	mov	sp, r7
    3f7a:	bd80      	pop	{r7, pc}
    3f7c:	00003789 	.word	0x00003789
    3f80:	20000bac 	.word	0x20000bac
    3f84:	0000b54d 	.word	0x0000b54d

00003f88 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3f88:	b580      	push	{r7, lr}
    3f8a:	b086      	sub	sp, #24
    3f8c:	af00      	add	r7, sp, #0
    3f8e:	4603      	mov	r3, r0
    3f90:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3f92:	79fb      	ldrb	r3, [r7, #7]
    3f94:	4618      	mov	r0, r3
    3f96:	4b1a      	ldr	r3, [pc, #104]	; (4000 <_usb_d_ep_halt_clr+0x78>)
    3f98:	4798      	blx	r3
    3f9a:	4603      	mov	r3, r0
    3f9c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3fa2:	015b      	lsls	r3, r3, #5
    3fa4:	4a17      	ldr	r2, [pc, #92]	; (4004 <_usb_d_ep_halt_clr+0x7c>)
    3fa6:	4413      	add	r3, r2
    3fa8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3fae:	2b00      	cmp	r3, #0
    3fb0:	da02      	bge.n	3fb8 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3fb2:	f06f 0311 	mvn.w	r3, #17
    3fb6:	e01f      	b.n	3ff8 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3fb8:	79fb      	ldrb	r3, [r7, #7]
    3fba:	2102      	movs	r1, #2
    3fbc:	4618      	mov	r0, r3
    3fbe:	4b12      	ldr	r3, [pc, #72]	; (4008 <_usb_d_ep_halt_clr+0x80>)
    3fc0:	4798      	blx	r3
    3fc2:	4603      	mov	r3, r0
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	d016      	beq.n	3ff6 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3fc8:	79fb      	ldrb	r3, [r7, #7]
    3fca:	2100      	movs	r1, #0
    3fcc:	4618      	mov	r0, r3
    3fce:	4b0e      	ldr	r3, [pc, #56]	; (4008 <_usb_d_ep_halt_clr+0x80>)
    3fd0:	4798      	blx	r3
    3fd2:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3fd4:	68fb      	ldr	r3, [r7, #12]
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	da01      	bge.n	3fde <_usb_d_ep_halt_clr+0x56>
			return rc;
    3fda:	68fb      	ldr	r3, [r7, #12]
    3fdc:	e00c      	b.n	3ff8 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3fde:	693b      	ldr	r3, [r7, #16]
    3fe0:	2201      	movs	r2, #1
    3fe2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3fe4:	693b      	ldr	r3, [r7, #16]
    3fe6:	2203      	movs	r2, #3
    3fe8:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3fea:	693b      	ldr	r3, [r7, #16]
    3fec:	69db      	ldr	r3, [r3, #28]
    3fee:	79f8      	ldrb	r0, [r7, #7]
    3ff0:	2200      	movs	r2, #0
    3ff2:	2103      	movs	r1, #3
    3ff4:	4798      	blx	r3
	}
	return ERR_NONE;
    3ff6:	2300      	movs	r3, #0
}
    3ff8:	4618      	mov	r0, r3
    3ffa:	3718      	adds	r7, #24
    3ffc:	46bd      	mov	sp, r7
    3ffe:	bd80      	pop	{r7, pc}
    4000:	00003789 	.word	0x00003789
    4004:	20000bac 	.word	0x20000bac
    4008:	0000b159 	.word	0x0000b159

0000400c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    400c:	b580      	push	{r7, lr}
    400e:	b082      	sub	sp, #8
    4010:	af00      	add	r7, sp, #0
    4012:	4603      	mov	r3, r0
    4014:	460a      	mov	r2, r1
    4016:	71fb      	strb	r3, [r7, #7]
    4018:	4613      	mov	r3, r2
    401a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    401c:	79bb      	ldrb	r3, [r7, #6]
    401e:	2b00      	cmp	r3, #0
    4020:	d105      	bne.n	402e <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    4022:	79fb      	ldrb	r3, [r7, #7]
    4024:	4618      	mov	r0, r3
    4026:	4b0c      	ldr	r3, [pc, #48]	; (4058 <usb_d_ep_halt+0x4c>)
    4028:	4798      	blx	r3
    402a:	4603      	mov	r3, r0
    402c:	e00f      	b.n	404e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    402e:	79bb      	ldrb	r3, [r7, #6]
    4030:	2b01      	cmp	r3, #1
    4032:	d106      	bne.n	4042 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4034:	79fb      	ldrb	r3, [r7, #7]
    4036:	2101      	movs	r1, #1
    4038:	4618      	mov	r0, r3
    403a:	4b08      	ldr	r3, [pc, #32]	; (405c <usb_d_ep_halt+0x50>)
    403c:	4798      	blx	r3
    403e:	4603      	mov	r3, r0
    4040:	e005      	b.n	404e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    4042:	79fb      	ldrb	r3, [r7, #7]
    4044:	2102      	movs	r1, #2
    4046:	4618      	mov	r0, r3
    4048:	4b04      	ldr	r3, [pc, #16]	; (405c <usb_d_ep_halt+0x50>)
    404a:	4798      	blx	r3
    404c:	4603      	mov	r3, r0
	}
}
    404e:	4618      	mov	r0, r3
    4050:	3708      	adds	r7, #8
    4052:	46bd      	mov	sp, r7
    4054:	bd80      	pop	{r7, pc}
    4056:	bf00      	nop
    4058:	00003f89 	.word	0x00003f89
    405c:	0000b159 	.word	0x0000b159

00004060 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    4060:	b580      	push	{r7, lr}
    4062:	b086      	sub	sp, #24
    4064:	af00      	add	r7, sp, #0
    4066:	4603      	mov	r3, r0
    4068:	603a      	str	r2, [r7, #0]
    406a:	71fb      	strb	r3, [r7, #7]
    406c:	460b      	mov	r3, r1
    406e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4070:	79fb      	ldrb	r3, [r7, #7]
    4072:	4618      	mov	r0, r3
    4074:	4b16      	ldr	r3, [pc, #88]	; (40d0 <usb_d_ep_register_callback+0x70>)
    4076:	4798      	blx	r3
    4078:	4603      	mov	r3, r0
    407a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    407c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4080:	015b      	lsls	r3, r3, #5
    4082:	4a14      	ldr	r2, [pc, #80]	; (40d4 <usb_d_ep_register_callback+0x74>)
    4084:	4413      	add	r3, r2
    4086:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    4088:	683b      	ldr	r3, [r7, #0]
    408a:	2b00      	cmp	r3, #0
    408c:	d001      	beq.n	4092 <usb_d_ep_register_callback+0x32>
    408e:	683b      	ldr	r3, [r7, #0]
    4090:	e000      	b.n	4094 <usb_d_ep_register_callback+0x34>
    4092:	4b11      	ldr	r3, [pc, #68]	; (40d8 <usb_d_ep_register_callback+0x78>)
    4094:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    4096:	f997 3017 	ldrsb.w	r3, [r7, #23]
    409a:	2b00      	cmp	r3, #0
    409c:	db13      	blt.n	40c6 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    409e:	79bb      	ldrb	r3, [r7, #6]
    40a0:	2b01      	cmp	r3, #1
    40a2:	d008      	beq.n	40b6 <usb_d_ep_register_callback+0x56>
    40a4:	2b02      	cmp	r3, #2
    40a6:	d00a      	beq.n	40be <usb_d_ep_register_callback+0x5e>
    40a8:	2b00      	cmp	r3, #0
    40aa:	d000      	beq.n	40ae <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    40ac:	e00c      	b.n	40c8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    40ae:	693b      	ldr	r3, [r7, #16]
    40b0:	68fa      	ldr	r2, [r7, #12]
    40b2:	615a      	str	r2, [r3, #20]
		break;
    40b4:	e008      	b.n	40c8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    40b6:	693b      	ldr	r3, [r7, #16]
    40b8:	68fa      	ldr	r2, [r7, #12]
    40ba:	619a      	str	r2, [r3, #24]
		break;
    40bc:	e004      	b.n	40c8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    40be:	693b      	ldr	r3, [r7, #16]
    40c0:	68fa      	ldr	r2, [r7, #12]
    40c2:	61da      	str	r2, [r3, #28]
		break;
    40c4:	e000      	b.n	40c8 <usb_d_ep_register_callback+0x68>
		return;
    40c6:	bf00      	nop
	}
}
    40c8:	3718      	adds	r7, #24
    40ca:	46bd      	mov	sp, r7
    40cc:	bd80      	pop	{r7, pc}
    40ce:	bf00      	nop
    40d0:	00003789 	.word	0x00003789
    40d4:	20000bac 	.word	0x20000bac
    40d8:	0000385d 	.word	0x0000385d

000040dc <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    40dc:	b480      	push	{r7}
    40de:	b085      	sub	sp, #20
    40e0:	af00      	add	r7, sp, #0
    40e2:	4603      	mov	r3, r0
    40e4:	60b9      	str	r1, [r7, #8]
    40e6:	607a      	str	r2, [r7, #4]
    40e8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    40ea:	7bfb      	ldrb	r3, [r7, #15]
    40ec:	f083 0301 	eor.w	r3, r3, #1
    40f0:	b2db      	uxtb	r3, r3
    40f2:	2b00      	cmp	r3, #0
    40f4:	d000      	beq.n	40f8 <assert+0x1c>
		__asm("BKPT #0");
    40f6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    40f8:	bf00      	nop
    40fa:	3714      	adds	r7, #20
    40fc:	46bd      	mov	sp, r7
    40fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4102:	4770      	bx	lr

00004104 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    4104:	b480      	push	{r7}
    4106:	b085      	sub	sp, #20
    4108:	af00      	add	r7, sp, #0
    410a:	6078      	str	r0, [r7, #4]
    410c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	681b      	ldr	r3, [r3, #0]
    4112:	60fb      	str	r3, [r7, #12]
    4114:	e008      	b.n	4128 <is_list_element+0x24>
		if (it == element) {
    4116:	68fa      	ldr	r2, [r7, #12]
    4118:	683b      	ldr	r3, [r7, #0]
    411a:	429a      	cmp	r2, r3
    411c:	d101      	bne.n	4122 <is_list_element+0x1e>
			return true;
    411e:	2301      	movs	r3, #1
    4120:	e006      	b.n	4130 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    4122:	68fb      	ldr	r3, [r7, #12]
    4124:	681b      	ldr	r3, [r3, #0]
    4126:	60fb      	str	r3, [r7, #12]
    4128:	68fb      	ldr	r3, [r7, #12]
    412a:	2b00      	cmp	r3, #0
    412c:	d1f3      	bne.n	4116 <is_list_element+0x12>
		}
	}

	return false;
    412e:	2300      	movs	r3, #0
}
    4130:	4618      	mov	r0, r3
    4132:	3714      	adds	r7, #20
    4134:	46bd      	mov	sp, r7
    4136:	f85d 7b04 	ldr.w	r7, [sp], #4
    413a:	4770      	bx	lr

0000413c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    413c:	b580      	push	{r7, lr}
    413e:	b082      	sub	sp, #8
    4140:	af00      	add	r7, sp, #0
    4142:	6078      	str	r0, [r7, #4]
    4144:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    4146:	6839      	ldr	r1, [r7, #0]
    4148:	6878      	ldr	r0, [r7, #4]
    414a:	4b0f      	ldr	r3, [pc, #60]	; (4188 <list_insert_as_head+0x4c>)
    414c:	4798      	blx	r3
    414e:	4603      	mov	r3, r0
    4150:	2b00      	cmp	r3, #0
    4152:	bf14      	ite	ne
    4154:	2301      	movne	r3, #1
    4156:	2300      	moveq	r3, #0
    4158:	b2db      	uxtb	r3, r3
    415a:	f083 0301 	eor.w	r3, r3, #1
    415e:	b2db      	uxtb	r3, r3
    4160:	f003 0301 	and.w	r3, r3, #1
    4164:	b2db      	uxtb	r3, r3
    4166:	2239      	movs	r2, #57	; 0x39
    4168:	4908      	ldr	r1, [pc, #32]	; (418c <list_insert_as_head+0x50>)
    416a:	4618      	mov	r0, r3
    416c:	4b08      	ldr	r3, [pc, #32]	; (4190 <list_insert_as_head+0x54>)
    416e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	681a      	ldr	r2, [r3, #0]
    4174:	683b      	ldr	r3, [r7, #0]
    4176:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    4178:	687b      	ldr	r3, [r7, #4]
    417a:	683a      	ldr	r2, [r7, #0]
    417c:	601a      	str	r2, [r3, #0]
}
    417e:	bf00      	nop
    4180:	3708      	adds	r7, #8
    4182:	46bd      	mov	sp, r7
    4184:	bd80      	pop	{r7, pc}
    4186:	bf00      	nop
    4188:	00004105 	.word	0x00004105
    418c:	00013f2c 	.word	0x00013f2c
    4190:	000040dd 	.word	0x000040dd

00004194 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    4194:	b480      	push	{r7}
    4196:	b083      	sub	sp, #12
    4198:	af00      	add	r7, sp, #0
    419a:	6078      	str	r0, [r7, #4]
    419c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    419e:	687b      	ldr	r3, [r7, #4]
    41a0:	681a      	ldr	r2, [r3, #0]
    41a2:	683b      	ldr	r3, [r7, #0]
    41a4:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	683a      	ldr	r2, [r7, #0]
    41aa:	601a      	str	r2, [r3, #0]
}
    41ac:	bf00      	nop
    41ae:	370c      	adds	r7, #12
    41b0:	46bd      	mov	sp, r7
    41b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    41b6:	4770      	bx	lr

000041b8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    41b8:	b580      	push	{r7, lr}
    41ba:	b084      	sub	sp, #16
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
    41c0:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    41c2:	687b      	ldr	r3, [r7, #4]
    41c4:	681b      	ldr	r3, [r3, #0]
    41c6:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    41c8:	6839      	ldr	r1, [r7, #0]
    41ca:	6878      	ldr	r0, [r7, #4]
    41cc:	4b16      	ldr	r3, [pc, #88]	; (4228 <list_insert_at_end+0x70>)
    41ce:	4798      	blx	r3
    41d0:	4603      	mov	r3, r0
    41d2:	2b00      	cmp	r3, #0
    41d4:	bf14      	ite	ne
    41d6:	2301      	movne	r3, #1
    41d8:	2300      	moveq	r3, #0
    41da:	b2db      	uxtb	r3, r3
    41dc:	f083 0301 	eor.w	r3, r3, #1
    41e0:	b2db      	uxtb	r3, r3
    41e2:	f003 0301 	and.w	r3, r3, #1
    41e6:	b2db      	uxtb	r3, r3
    41e8:	224f      	movs	r2, #79	; 0x4f
    41ea:	4910      	ldr	r1, [pc, #64]	; (422c <list_insert_at_end+0x74>)
    41ec:	4618      	mov	r0, r3
    41ee:	4b10      	ldr	r3, [pc, #64]	; (4230 <list_insert_at_end+0x78>)
    41f0:	4798      	blx	r3

	if (!list->head) {
    41f2:	687b      	ldr	r3, [r7, #4]
    41f4:	681b      	ldr	r3, [r3, #0]
    41f6:	2b00      	cmp	r3, #0
    41f8:	d109      	bne.n	420e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    41fa:	687b      	ldr	r3, [r7, #4]
    41fc:	683a      	ldr	r2, [r7, #0]
    41fe:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    4200:	683b      	ldr	r3, [r7, #0]
    4202:	2200      	movs	r2, #0
    4204:	601a      	str	r2, [r3, #0]
		return;
    4206:	e00c      	b.n	4222 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    4208:	68fb      	ldr	r3, [r7, #12]
    420a:	681b      	ldr	r3, [r3, #0]
    420c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    420e:	68fb      	ldr	r3, [r7, #12]
    4210:	681b      	ldr	r3, [r3, #0]
    4212:	2b00      	cmp	r3, #0
    4214:	d1f8      	bne.n	4208 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    4216:	68fb      	ldr	r3, [r7, #12]
    4218:	683a      	ldr	r2, [r7, #0]
    421a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    421c:	683b      	ldr	r3, [r7, #0]
    421e:	2200      	movs	r2, #0
    4220:	601a      	str	r2, [r3, #0]
}
    4222:	3710      	adds	r7, #16
    4224:	46bd      	mov	sp, r7
    4226:	bd80      	pop	{r7, pc}
    4228:	00004105 	.word	0x00004105
    422c:	00013f2c 	.word	0x00013f2c
    4230:	000040dd 	.word	0x000040dd

00004234 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    4234:	b480      	push	{r7}
    4236:	b085      	sub	sp, #20
    4238:	af00      	add	r7, sp, #0
    423a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	681b      	ldr	r3, [r3, #0]
    4240:	2b00      	cmp	r3, #0
    4242:	d009      	beq.n	4258 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    4244:	687b      	ldr	r3, [r7, #4]
    4246:	681b      	ldr	r3, [r3, #0]
    4248:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    424a:	687b      	ldr	r3, [r7, #4]
    424c:	681b      	ldr	r3, [r3, #0]
    424e:	681a      	ldr	r2, [r3, #0]
    4250:	687b      	ldr	r3, [r7, #4]
    4252:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    4254:	68fb      	ldr	r3, [r7, #12]
    4256:	e000      	b.n	425a <list_remove_head+0x26>
	}

	return NULL;
    4258:	2300      	movs	r3, #0
}
    425a:	4618      	mov	r0, r3
    425c:	3714      	adds	r7, #20
    425e:	46bd      	mov	sp, r7
    4260:	f85d 7b04 	ldr.w	r7, [sp], #4
    4264:	4770      	bx	lr

00004266 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    4266:	b480      	push	{r7}
    4268:	b085      	sub	sp, #20
    426a:	af00      	add	r7, sp, #0
    426c:	6078      	str	r0, [r7, #4]
    426e:	6039      	str	r1, [r7, #0]
	if (!element) {
    4270:	683b      	ldr	r3, [r7, #0]
    4272:	2b00      	cmp	r3, #0
    4274:	d101      	bne.n	427a <list_delete_element+0x14>
		return false;
    4276:	2300      	movs	r3, #0
    4278:	e024      	b.n	42c4 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    427a:	687b      	ldr	r3, [r7, #4]
    427c:	681a      	ldr	r2, [r3, #0]
    427e:	683b      	ldr	r3, [r7, #0]
    4280:	429a      	cmp	r2, r3
    4282:	d106      	bne.n	4292 <list_delete_element+0x2c>
		list->head = list->head->next;
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	681b      	ldr	r3, [r3, #0]
    4288:	681a      	ldr	r2, [r3, #0]
    428a:	687b      	ldr	r3, [r7, #4]
    428c:	601a      	str	r2, [r3, #0]
		return true;
    428e:	2301      	movs	r3, #1
    4290:	e018      	b.n	42c4 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    4292:	687b      	ldr	r3, [r7, #4]
    4294:	681b      	ldr	r3, [r3, #0]
    4296:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    4298:	e002      	b.n	42a0 <list_delete_element+0x3a>
			it = it->next;
    429a:	68fb      	ldr	r3, [r7, #12]
    429c:	681b      	ldr	r3, [r3, #0]
    429e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    42a0:	68fb      	ldr	r3, [r7, #12]
    42a2:	2b00      	cmp	r3, #0
    42a4:	d004      	beq.n	42b0 <list_delete_element+0x4a>
    42a6:	68fb      	ldr	r3, [r7, #12]
    42a8:	681a      	ldr	r2, [r3, #0]
    42aa:	683b      	ldr	r3, [r7, #0]
    42ac:	429a      	cmp	r2, r3
    42ae:	d1f4      	bne.n	429a <list_delete_element+0x34>
		}
		if (it) {
    42b0:	68fb      	ldr	r3, [r7, #12]
    42b2:	2b00      	cmp	r3, #0
    42b4:	d005      	beq.n	42c2 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    42b6:	683b      	ldr	r3, [r7, #0]
    42b8:	681a      	ldr	r2, [r3, #0]
    42ba:	68fb      	ldr	r3, [r7, #12]
    42bc:	601a      	str	r2, [r3, #0]
			return true;
    42be:	2301      	movs	r3, #1
    42c0:	e000      	b.n	42c4 <list_delete_element+0x5e>
		}
	}

	return false;
    42c2:	2300      	movs	r3, #0
}
    42c4:	4618      	mov	r0, r3
    42c6:	3714      	adds	r7, #20
    42c8:	46bd      	mov	sp, r7
    42ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ce:	4770      	bx	lr

000042d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    42d0:	b480      	push	{r7}
    42d2:	b083      	sub	sp, #12
    42d4:	af00      	add	r7, sp, #0
    42d6:	4603      	mov	r3, r0
    42d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    42da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    42de:	2b00      	cmp	r3, #0
    42e0:	db0b      	blt.n	42fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42e2:	4909      	ldr	r1, [pc, #36]	; (4308 <__NVIC_EnableIRQ+0x38>)
    42e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    42e8:	095b      	lsrs	r3, r3, #5
    42ea:	88fa      	ldrh	r2, [r7, #6]
    42ec:	f002 021f 	and.w	r2, r2, #31
    42f0:	2001      	movs	r0, #1
    42f2:	fa00 f202 	lsl.w	r2, r0, r2
    42f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    42fa:	bf00      	nop
    42fc:	370c      	adds	r7, #12
    42fe:	46bd      	mov	sp, r7
    4300:	f85d 7b04 	ldr.w	r7, [sp], #4
    4304:	4770      	bx	lr
    4306:	bf00      	nop
    4308:	e000e100 	.word	0xe000e100

0000430c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    430c:	b480      	push	{r7}
    430e:	b083      	sub	sp, #12
    4310:	af00      	add	r7, sp, #0
    4312:	4603      	mov	r3, r0
    4314:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    431a:	2b00      	cmp	r3, #0
    431c:	db10      	blt.n	4340 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    431e:	490b      	ldr	r1, [pc, #44]	; (434c <__NVIC_DisableIRQ+0x40>)
    4320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4324:	095b      	lsrs	r3, r3, #5
    4326:	88fa      	ldrh	r2, [r7, #6]
    4328:	f002 021f 	and.w	r2, r2, #31
    432c:	2001      	movs	r0, #1
    432e:	fa00 f202 	lsl.w	r2, r0, r2
    4332:	3320      	adds	r3, #32
    4334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4338:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    433c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4340:	bf00      	nop
    4342:	370c      	adds	r7, #12
    4344:	46bd      	mov	sp, r7
    4346:	f85d 7b04 	ldr.w	r7, [sp], #4
    434a:	4770      	bx	lr
    434c:	e000e100 	.word	0xe000e100

00004350 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4350:	b480      	push	{r7}
    4352:	b083      	sub	sp, #12
    4354:	af00      	add	r7, sp, #0
    4356:	4603      	mov	r3, r0
    4358:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    435a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    435e:	2b00      	cmp	r3, #0
    4360:	db0c      	blt.n	437c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4362:	4909      	ldr	r1, [pc, #36]	; (4388 <__NVIC_ClearPendingIRQ+0x38>)
    4364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4368:	095b      	lsrs	r3, r3, #5
    436a:	88fa      	ldrh	r2, [r7, #6]
    436c:	f002 021f 	and.w	r2, r2, #31
    4370:	2001      	movs	r0, #1
    4372:	fa00 f202 	lsl.w	r2, r0, r2
    4376:	3360      	adds	r3, #96	; 0x60
    4378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    437c:	bf00      	nop
    437e:	370c      	adds	r7, #12
    4380:	46bd      	mov	sp, r7
    4382:	f85d 7b04 	ldr.w	r7, [sp], #4
    4386:	4770      	bx	lr
    4388:	e000e100 	.word	0xe000e100

0000438c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    438c:	b480      	push	{r7}
    438e:	b083      	sub	sp, #12
    4390:	af00      	add	r7, sp, #0
    4392:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4398:	095b      	lsrs	r3, r3, #5
    439a:	f003 0301 	and.w	r3, r3, #1
    439e:	2b00      	cmp	r3, #0
    43a0:	bf14      	ite	ne
    43a2:	2301      	movne	r3, #1
    43a4:	2300      	moveq	r3, #0
    43a6:	b2db      	uxtb	r3, r3
}
    43a8:	4618      	mov	r0, r3
    43aa:	370c      	adds	r7, #12
    43ac:	46bd      	mov	sp, r7
    43ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    43b2:	4770      	bx	lr

000043b4 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    43b4:	b480      	push	{r7}
    43b6:	b083      	sub	sp, #12
    43b8:	af00      	add	r7, sp, #0
    43ba:	6078      	str	r0, [r7, #4]
    43bc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    43be:	687b      	ldr	r3, [r7, #4]
    43c0:	683a      	ldr	r2, [r7, #0]
    43c2:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    43c4:	bf00      	nop
    43c6:	370c      	adds	r7, #12
    43c8:	46bd      	mov	sp, r7
    43ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    43ce:	4770      	bx	lr

000043d0 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    43d0:	b480      	push	{r7}
    43d2:	b083      	sub	sp, #12
    43d4:	af00      	add	r7, sp, #0
    43d6:	6078      	str	r0, [r7, #4]
    43d8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    43da:	687b      	ldr	r3, [r7, #4]
    43dc:	683a      	ldr	r2, [r7, #0]
    43de:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    43e0:	bf00      	nop
    43e2:	370c      	adds	r7, #12
    43e4:	46bd      	mov	sp, r7
    43e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    43ea:	4770      	bx	lr

000043ec <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    43ec:	b480      	push	{r7}
    43ee:	b083      	sub	sp, #12
    43f0:	af00      	add	r7, sp, #0
    43f2:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    43f4:	687b      	ldr	r3, [r7, #4]
    43f6:	699b      	ldr	r3, [r3, #24]
    43f8:	f043 0201 	orr.w	r2, r3, #1
    43fc:	687b      	ldr	r3, [r7, #4]
    43fe:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4400:	bf00      	nop
    4402:	370c      	adds	r7, #12
    4404:	46bd      	mov	sp, r7
    4406:	f85d 7b04 	ldr.w	r7, [sp], #4
    440a:	4770      	bx	lr

0000440c <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    440c:	b480      	push	{r7}
    440e:	b085      	sub	sp, #20
    4410:	af00      	add	r7, sp, #0
    4412:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	699b      	ldr	r3, [r3, #24]
    4418:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    441a:	68fb      	ldr	r3, [r7, #12]
    441c:	f003 0301 	and.w	r3, r3, #1
    4420:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    4422:	68fb      	ldr	r3, [r7, #12]
    4424:	2b00      	cmp	r3, #0
    4426:	bf14      	ite	ne
    4428:	2301      	movne	r3, #1
    442a:	2300      	moveq	r3, #0
    442c:	b2db      	uxtb	r3, r3
}
    442e:	4618      	mov	r0, r3
    4430:	3714      	adds	r7, #20
    4432:	46bd      	mov	sp, r7
    4434:	f85d 7b04 	ldr.w	r7, [sp], #4
    4438:	4770      	bx	lr

0000443a <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    443a:	b480      	push	{r7}
    443c:	b083      	sub	sp, #12
    443e:	af00      	add	r7, sp, #0
    4440:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	699b      	ldr	r3, [r3, #24]
    4446:	f023 0201 	bic.w	r2, r3, #1
    444a:	687b      	ldr	r3, [r7, #4]
    444c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    444e:	bf00      	nop
    4450:	370c      	adds	r7, #12
    4452:	46bd      	mov	sp, r7
    4454:	f85d 7b04 	ldr.w	r7, [sp], #4
    4458:	4770      	bx	lr

0000445a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    445a:	b480      	push	{r7}
    445c:	b083      	sub	sp, #12
    445e:	af00      	add	r7, sp, #0
    4460:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    4462:	687b      	ldr	r3, [r7, #4]
    4464:	699b      	ldr	r3, [r3, #24]
    4466:	f043 0202 	orr.w	r2, r3, #2
    446a:	687b      	ldr	r3, [r7, #4]
    446c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    446e:	bf00      	nop
    4470:	370c      	adds	r7, #12
    4472:	46bd      	mov	sp, r7
    4474:	f85d 7b04 	ldr.w	r7, [sp], #4
    4478:	4770      	bx	lr

0000447a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    447a:	b480      	push	{r7}
    447c:	b083      	sub	sp, #12
    447e:	af00      	add	r7, sp, #0
    4480:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    4482:	687b      	ldr	r3, [r7, #4]
    4484:	699b      	ldr	r3, [r3, #24]
    4486:	f023 0202 	bic.w	r2, r3, #2
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    448e:	bf00      	nop
    4490:	370c      	adds	r7, #12
    4492:	46bd      	mov	sp, r7
    4494:	f85d 7b04 	ldr.w	r7, [sp], #4
    4498:	4770      	bx	lr

0000449a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    449a:	b480      	push	{r7}
    449c:	b083      	sub	sp, #12
    449e:	af00      	add	r7, sp, #0
    44a0:	6078      	str	r0, [r7, #4]
    44a2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    44a4:	687b      	ldr	r3, [r7, #4]
    44a6:	699a      	ldr	r2, [r3, #24]
    44a8:	683b      	ldr	r3, [r7, #0]
    44aa:	431a      	orrs	r2, r3
    44ac:	687b      	ldr	r3, [r7, #4]
    44ae:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    44b0:	bf00      	nop
    44b2:	370c      	adds	r7, #12
    44b4:	46bd      	mov	sp, r7
    44b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ba:	4770      	bx	lr

000044bc <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    44bc:	b480      	push	{r7}
    44be:	b083      	sub	sp, #12
    44c0:	af00      	add	r7, sp, #0
    44c2:	6078      	str	r0, [r7, #4]
    44c4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    44c6:	687b      	ldr	r3, [r7, #4]
    44c8:	683a      	ldr	r2, [r7, #0]
    44ca:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    44cc:	bf00      	nop
    44ce:	370c      	adds	r7, #12
    44d0:	46bd      	mov	sp, r7
    44d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    44d6:	4770      	bx	lr

000044d8 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    44d8:	b480      	push	{r7}
    44da:	b083      	sub	sp, #12
    44dc:	af00      	add	r7, sp, #0
    44de:	6078      	str	r0, [r7, #4]
    44e0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    44e2:	687b      	ldr	r3, [r7, #4]
    44e4:	683a      	ldr	r2, [r7, #0]
    44e6:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    44e8:	bf00      	nop
    44ea:	370c      	adds	r7, #12
    44ec:	46bd      	mov	sp, r7
    44ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    44f2:	4770      	bx	lr

000044f4 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    44f4:	b480      	push	{r7}
    44f6:	b083      	sub	sp, #12
    44f8:	af00      	add	r7, sp, #0
    44fa:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    44fc:	687b      	ldr	r3, [r7, #4]
    44fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    4500:	4618      	mov	r0, r3
    4502:	370c      	adds	r7, #12
    4504:	46bd      	mov	sp, r7
    4506:	f85d 7b04 	ldr.w	r7, [sp], #4
    450a:	4770      	bx	lr

0000450c <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    450c:	b480      	push	{r7}
    450e:	b083      	sub	sp, #12
    4510:	af00      	add	r7, sp, #0
    4512:	6078      	str	r0, [r7, #4]
    4514:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    4516:	687b      	ldr	r3, [r7, #4]
    4518:	683a      	ldr	r2, [r7, #0]
    451a:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    451c:	bf00      	nop
    451e:	370c      	adds	r7, #12
    4520:	46bd      	mov	sp, r7
    4522:	f85d 7b04 	ldr.w	r7, [sp], #4
    4526:	4770      	bx	lr

00004528 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    4528:	b480      	push	{r7}
    452a:	b083      	sub	sp, #12
    452c:	af00      	add	r7, sp, #0
    452e:	6078      	str	r0, [r7, #4]
    4530:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    4532:	687b      	ldr	r3, [r7, #4]
    4534:	683a      	ldr	r2, [r7, #0]
    4536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    453a:	bf00      	nop
    453c:	370c      	adds	r7, #12
    453e:	46bd      	mov	sp, r7
    4540:	f85d 7b04 	ldr.w	r7, [sp], #4
    4544:	4770      	bx	lr

00004546 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    4546:	b480      	push	{r7}
    4548:	b083      	sub	sp, #12
    454a:	af00      	add	r7, sp, #0
    454c:	6078      	str	r0, [r7, #4]
    454e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    4550:	687b      	ldr	r3, [r7, #4]
    4552:	683a      	ldr	r2, [r7, #0]
    4554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    4558:	bf00      	nop
    455a:	370c      	adds	r7, #12
    455c:	46bd      	mov	sp, r7
    455e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4562:	4770      	bx	lr

00004564 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    4564:	b480      	push	{r7}
    4566:	b083      	sub	sp, #12
    4568:	af00      	add	r7, sp, #0
    456a:	6078      	str	r0, [r7, #4]
    456c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    456e:	687b      	ldr	r3, [r7, #4]
    4570:	683a      	ldr	r2, [r7, #0]
    4572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    4576:	bf00      	nop
    4578:	370c      	adds	r7, #12
    457a:	46bd      	mov	sp, r7
    457c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4580:	4770      	bx	lr

00004582 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    4582:	b480      	push	{r7}
    4584:	b083      	sub	sp, #12
    4586:	af00      	add	r7, sp, #0
    4588:	6078      	str	r0, [r7, #4]
    458a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    458c:	687b      	ldr	r3, [r7, #4]
    458e:	683a      	ldr	r2, [r7, #0]
    4590:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    4594:	bf00      	nop
    4596:	370c      	adds	r7, #12
    4598:	46bd      	mov	sp, r7
    459a:	f85d 7b04 	ldr.w	r7, [sp], #4
    459e:	4770      	bx	lr

000045a0 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    45a0:	b480      	push	{r7}
    45a2:	b083      	sub	sp, #12
    45a4:	af00      	add	r7, sp, #0
    45a6:	6078      	str	r0, [r7, #4]
    45a8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    45aa:	687b      	ldr	r3, [r7, #4]
    45ac:	683a      	ldr	r2, [r7, #0]
    45ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    45b2:	bf00      	nop
    45b4:	370c      	adds	r7, #12
    45b6:	46bd      	mov	sp, r7
    45b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    45bc:	4770      	bx	lr

000045be <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    45be:	b480      	push	{r7}
    45c0:	b083      	sub	sp, #12
    45c2:	af00      	add	r7, sp, #0
    45c4:	6078      	str	r0, [r7, #4]
    45c6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    45c8:	687b      	ldr	r3, [r7, #4]
    45ca:	683a      	ldr	r2, [r7, #0]
    45cc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    45d0:	bf00      	nop
    45d2:	370c      	adds	r7, #12
    45d4:	46bd      	mov	sp, r7
    45d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    45da:	4770      	bx	lr

000045dc <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    45dc:	b480      	push	{r7}
    45de:	b083      	sub	sp, #12
    45e0:	af00      	add	r7, sp, #0
    45e2:	6078      	str	r0, [r7, #4]
    45e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    45e6:	687b      	ldr	r3, [r7, #4]
    45e8:	683a      	ldr	r2, [r7, #0]
    45ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    45ee:	bf00      	nop
    45f0:	370c      	adds	r7, #12
    45f2:	46bd      	mov	sp, r7
    45f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    45f8:	4770      	bx	lr

000045fa <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    45fa:	b480      	push	{r7}
    45fc:	b083      	sub	sp, #12
    45fe:	af00      	add	r7, sp, #0
    4600:	6078      	str	r0, [r7, #4]
    4602:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    4604:	687b      	ldr	r3, [r7, #4]
    4606:	683a      	ldr	r2, [r7, #0]
    4608:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    460c:	bf00      	nop
    460e:	370c      	adds	r7, #12
    4610:	46bd      	mov	sp, r7
    4612:	f85d 7b04 	ldr.w	r7, [sp], #4
    4616:	4770      	bx	lr

00004618 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    4618:	b480      	push	{r7}
    461a:	b083      	sub	sp, #12
    461c:	af00      	add	r7, sp, #0
    461e:	6078      	str	r0, [r7, #4]
    4620:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    4622:	687b      	ldr	r3, [r7, #4]
    4624:	683a      	ldr	r2, [r7, #0]
    4626:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    462a:	bf00      	nop
    462c:	370c      	adds	r7, #12
    462e:	46bd      	mov	sp, r7
    4630:	f85d 7b04 	ldr.w	r7, [sp], #4
    4634:	4770      	bx	lr
	...

00004638 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    4638:	b580      	push	{r7, lr}
    463a:	b082      	sub	sp, #8
    463c:	af00      	add	r7, sp, #0
    463e:	6078      	str	r0, [r7, #4]
    4640:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    4642:	687b      	ldr	r3, [r7, #4]
    4644:	683a      	ldr	r2, [r7, #0]
    4646:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	681b      	ldr	r3, [r3, #0]
    464c:	4618      	mov	r0, r3
    464e:	4b56      	ldr	r3, [pc, #344]	; (47a8 <_can_async_init+0x170>)
    4650:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    4652:	bf00      	nop
    4654:	687b      	ldr	r3, [r7, #4]
    4656:	681b      	ldr	r3, [r3, #0]
    4658:	4618      	mov	r0, r3
    465a:	4b54      	ldr	r3, [pc, #336]	; (47ac <_can_async_init+0x174>)
    465c:	4798      	blx	r3
    465e:	4603      	mov	r3, r0
    4660:	f083 0301 	eor.w	r3, r3, #1
    4664:	b2db      	uxtb	r3, r3
    4666:	2b00      	cmp	r3, #0
    4668:	d1f4      	bne.n	4654 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    466a:	687b      	ldr	r3, [r7, #4]
    466c:	681b      	ldr	r3, [r3, #0]
    466e:	4618      	mov	r0, r3
    4670:	4b4f      	ldr	r3, [pc, #316]	; (47b0 <_can_async_init+0x178>)
    4672:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    4674:	683b      	ldr	r3, [r7, #0]
    4676:	4a4f      	ldr	r2, [pc, #316]	; (47b4 <_can_async_init+0x17c>)
    4678:	4293      	cmp	r3, r2
    467a:	d17c      	bne.n	4776 <_can_async_init+0x13e>
		_can1_dev    = dev;
    467c:	4a4e      	ldr	r2, [pc, #312]	; (47b8 <_can_async_init+0x180>)
    467e:	687b      	ldr	r3, [r7, #4]
    4680:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	4a4d      	ldr	r2, [pc, #308]	; (47bc <_can_async_init+0x184>)
    4686:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    4688:	687b      	ldr	r3, [r7, #4]
    468a:	681b      	ldr	r3, [r3, #0]
    468c:	f44f 7100 	mov.w	r1, #512	; 0x200
    4690:	4618      	mov	r0, r3
    4692:	4b4b      	ldr	r3, [pc, #300]	; (47c0 <_can_async_init+0x188>)
    4694:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	681b      	ldr	r3, [r3, #0]
    469a:	2102      	movs	r1, #2
    469c:	4618      	mov	r0, r3
    469e:	4b49      	ldr	r3, [pc, #292]	; (47c4 <_can_async_init+0x18c>)
    46a0:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    46a2:	687b      	ldr	r3, [r7, #4]
    46a4:	681b      	ldr	r3, [r3, #0]
    46a6:	f640 2103 	movw	r1, #2563	; 0xa03
    46aa:	4618      	mov	r0, r3
    46ac:	4b46      	ldr	r3, [pc, #280]	; (47c8 <_can_async_init+0x190>)
    46ae:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    46b0:	687b      	ldr	r3, [r7, #4]
    46b2:	681b      	ldr	r3, [r3, #0]
    46b4:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    46b8:	4618      	mov	r0, r3
    46ba:	4b44      	ldr	r3, [pc, #272]	; (47cc <_can_async_init+0x194>)
    46bc:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    46be:	687b      	ldr	r3, [r7, #4]
    46c0:	681a      	ldr	r2, [r3, #0]
    46c2:	4b43      	ldr	r3, [pc, #268]	; (47d0 <_can_async_init+0x198>)
    46c4:	b29b      	uxth	r3, r3
    46c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    46ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    46ce:	4619      	mov	r1, r3
    46d0:	4610      	mov	r0, r2
    46d2:	4b40      	ldr	r3, [pc, #256]	; (47d4 <_can_async_init+0x19c>)
    46d4:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    46d6:	687b      	ldr	r3, [r7, #4]
    46d8:	681b      	ldr	r3, [r3, #0]
    46da:	2107      	movs	r1, #7
    46dc:	4618      	mov	r0, r3
    46de:	4b3e      	ldr	r3, [pc, #248]	; (47d8 <_can_async_init+0x1a0>)
    46e0:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	681b      	ldr	r3, [r3, #0]
    46e6:	2107      	movs	r1, #7
    46e8:	4618      	mov	r0, r3
    46ea:	4b3c      	ldr	r3, [pc, #240]	; (47dc <_can_async_init+0x1a4>)
    46ec:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    46ee:	687b      	ldr	r3, [r7, #4]
    46f0:	681a      	ldr	r2, [r3, #0]
    46f2:	4b3b      	ldr	r3, [pc, #236]	; (47e0 <_can_async_init+0x1a8>)
    46f4:	b29b      	uxth	r3, r3
    46f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    46fa:	4619      	mov	r1, r3
    46fc:	4610      	mov	r0, r2
    46fe:	4b39      	ldr	r3, [pc, #228]	; (47e4 <_can_async_init+0x1ac>)
    4700:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    4702:	687b      	ldr	r3, [r7, #4]
    4704:	681a      	ldr	r2, [r3, #0]
    4706:	4b38      	ldr	r3, [pc, #224]	; (47e8 <_can_async_init+0x1b0>)
    4708:	b29b      	uxth	r3, r3
    470a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    470e:	4619      	mov	r1, r3
    4710:	4610      	mov	r0, r2
    4712:	4b36      	ldr	r3, [pc, #216]	; (47ec <_can_async_init+0x1b4>)
    4714:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    4716:	687b      	ldr	r3, [r7, #4]
    4718:	681b      	ldr	r3, [r3, #0]
    471a:	2108      	movs	r1, #8
    471c:	4618      	mov	r0, r3
    471e:	4b34      	ldr	r3, [pc, #208]	; (47f0 <_can_async_init+0x1b8>)
    4720:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    4722:	687b      	ldr	r3, [r7, #4]
    4724:	681a      	ldr	r2, [r3, #0]
    4726:	4b33      	ldr	r3, [pc, #204]	; (47f4 <_can_async_init+0x1bc>)
    4728:	b29b      	uxth	r3, r3
    472a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    472e:	4619      	mov	r1, r3
    4730:	4610      	mov	r0, r2
    4732:	4b31      	ldr	r3, [pc, #196]	; (47f8 <_can_async_init+0x1c0>)
    4734:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    4736:	687b      	ldr	r3, [r7, #4]
    4738:	681a      	ldr	r2, [r3, #0]
    473a:	4b30      	ldr	r3, [pc, #192]	; (47fc <_can_async_init+0x1c4>)
    473c:	b29b      	uxth	r3, r3
    473e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4742:	4619      	mov	r1, r3
    4744:	4610      	mov	r0, r2
    4746:	4b2e      	ldr	r3, [pc, #184]	; (4800 <_can_async_init+0x1c8>)
    4748:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    474a:	687b      	ldr	r3, [r7, #4]
    474c:	681b      	ldr	r3, [r3, #0]
    474e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    4752:	4618      	mov	r0, r3
    4754:	4b2b      	ldr	r3, [pc, #172]	; (4804 <_can_async_init+0x1cc>)
    4756:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    4758:	204f      	movs	r0, #79	; 0x4f
    475a:	4b2b      	ldr	r3, [pc, #172]	; (4808 <_can_async_init+0x1d0>)
    475c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    475e:	204f      	movs	r0, #79	; 0x4f
    4760:	4b2a      	ldr	r3, [pc, #168]	; (480c <_can_async_init+0x1d4>)
    4762:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4764:	204f      	movs	r0, #79	; 0x4f
    4766:	4b2a      	ldr	r3, [pc, #168]	; (4810 <_can_async_init+0x1d8>)
    4768:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    476a:	687b      	ldr	r3, [r7, #4]
    476c:	681b      	ldr	r3, [r3, #0]
    476e:	2101      	movs	r1, #1
    4770:	4618      	mov	r0, r3
    4772:	4b28      	ldr	r3, [pc, #160]	; (4814 <_can_async_init+0x1dc>)
    4774:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    4776:	687b      	ldr	r3, [r7, #4]
    4778:	681b      	ldr	r3, [r3, #0]
    477a:	4618      	mov	r0, r3
    477c:	4b26      	ldr	r3, [pc, #152]	; (4818 <_can_async_init+0x1e0>)
    477e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4780:	687b      	ldr	r3, [r7, #4]
    4782:	681b      	ldr	r3, [r3, #0]
    4784:	4618      	mov	r0, r3
    4786:	4b25      	ldr	r3, [pc, #148]	; (481c <_can_async_init+0x1e4>)
    4788:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    478a:	bf00      	nop
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	681b      	ldr	r3, [r3, #0]
    4790:	4618      	mov	r0, r3
    4792:	4b06      	ldr	r3, [pc, #24]	; (47ac <_can_async_init+0x174>)
    4794:	4798      	blx	r3
    4796:	4603      	mov	r3, r0
    4798:	2b00      	cmp	r3, #0
    479a:	d1f7      	bne.n	478c <_can_async_init+0x154>
	};

	return ERR_NONE;
    479c:	2300      	movs	r3, #0
}
    479e:	4618      	mov	r0, r3
    47a0:	3708      	adds	r7, #8
    47a2:	46bd      	mov	sp, r7
    47a4:	bd80      	pop	{r7, pc}
    47a6:	bf00      	nop
    47a8:	000043ed 	.word	0x000043ed
    47ac:	0000440d 	.word	0x0000440d
    47b0:	0000445b 	.word	0x0000445b
    47b4:	42000400 	.word	0x42000400
    47b8:	20000ccc 	.word	0x20000ccc
    47bc:	20000004 	.word	0x20000004
    47c0:	0000449b 	.word	0x0000449b
    47c4:	000043b5 	.word	0x000043b5
    47c8:	000044bd 	.word	0x000044bd
    47cc:	000043d1 	.word	0x000043d1
    47d0:	2000a008 	.word	0x2000a008
    47d4:	000045a1 	.word	0x000045a1
    47d8:	000045bf 	.word	0x000045bf
    47dc:	000045fb 	.word	0x000045fb
    47e0:	20009fc0 	.word	0x20009fc0
    47e4:	000045dd 	.word	0x000045dd
    47e8:	20000c2c 	.word	0x20000c2c
    47ec:	00004619 	.word	0x00004619
    47f0:	00004529 	.word	0x00004529
    47f4:	20000c3c 	.word	0x20000c3c
    47f8:	00004547 	.word	0x00004547
    47fc:	20000cbc 	.word	0x20000cbc
    4800:	00004565 	.word	0x00004565
    4804:	00004583 	.word	0x00004583
    4808:	0000430d 	.word	0x0000430d
    480c:	00004351 	.word	0x00004351
    4810:	000042d1 	.word	0x000042d1
    4814:	0000450d 	.word	0x0000450d
    4818:	0000447b 	.word	0x0000447b
    481c:	0000443b 	.word	0x0000443b

00004820 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    4820:	b590      	push	{r4, r7, lr}
    4822:	b083      	sub	sp, #12
    4824:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    4826:	4b2c      	ldr	r3, [pc, #176]	; (48d8 <CAN1_Handler+0xb8>)
    4828:	681b      	ldr	r3, [r3, #0]
    482a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    482c:	687b      	ldr	r3, [r7, #4]
    482e:	681b      	ldr	r3, [r3, #0]
    4830:	4618      	mov	r0, r3
    4832:	4b2a      	ldr	r3, [pc, #168]	; (48dc <CAN1_Handler+0xbc>)
    4834:	4798      	blx	r3
    4836:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4838:	683b      	ldr	r3, [r7, #0]
    483a:	f003 0301 	and.w	r3, r3, #1
    483e:	2b00      	cmp	r3, #0
    4840:	d003      	beq.n	484a <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    4842:	687b      	ldr	r3, [r7, #4]
    4844:	689b      	ldr	r3, [r3, #8]
    4846:	6878      	ldr	r0, [r7, #4]
    4848:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    484a:	683b      	ldr	r3, [r7, #0]
    484c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4850:	2b00      	cmp	r3, #0
    4852:	d003      	beq.n	485c <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4854:	687b      	ldr	r3, [r7, #4]
    4856:	685b      	ldr	r3, [r3, #4]
    4858:	6878      	ldr	r0, [r7, #4]
    485a:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    485c:	683b      	ldr	r3, [r7, #0]
    485e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4862:	2b00      	cmp	r3, #0
    4864:	d004      	beq.n	4870 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    4866:	687b      	ldr	r3, [r7, #4]
    4868:	68db      	ldr	r3, [r3, #12]
    486a:	2103      	movs	r1, #3
    486c:	6878      	ldr	r0, [r7, #4]
    486e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4870:	683b      	ldr	r3, [r7, #0]
    4872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    4876:	2b00      	cmp	r3, #0
    4878:	d004      	beq.n	4884 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    487a:	687b      	ldr	r3, [r7, #4]
    487c:	68db      	ldr	r3, [r3, #12]
    487e:	2100      	movs	r1, #0
    4880:	6878      	ldr	r0, [r7, #4]
    4882:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4884:	683b      	ldr	r3, [r7, #0]
    4886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    488a:	2b00      	cmp	r3, #0
    488c:	d00f      	beq.n	48ae <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    488e:	687b      	ldr	r3, [r7, #4]
    4890:	68dc      	ldr	r4, [r3, #12]
    4892:	687b      	ldr	r3, [r7, #4]
    4894:	681b      	ldr	r3, [r3, #0]
    4896:	4618      	mov	r0, r3
    4898:	4b11      	ldr	r3, [pc, #68]	; (48e0 <CAN1_Handler+0xc0>)
    489a:	4798      	blx	r3
    489c:	4603      	mov	r3, r0
    489e:	2b00      	cmp	r3, #0
    48a0:	d001      	beq.n	48a6 <CAN1_Handler+0x86>
    48a2:	2302      	movs	r3, #2
    48a4:	e000      	b.n	48a8 <CAN1_Handler+0x88>
    48a6:	2301      	movs	r3, #1
    48a8:	4619      	mov	r1, r3
    48aa:	6878      	ldr	r0, [r7, #4]
    48ac:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    48ae:	683b      	ldr	r3, [r7, #0]
    48b0:	f003 0308 	and.w	r3, r3, #8
    48b4:	2b00      	cmp	r3, #0
    48b6:	d004      	beq.n	48c2 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	68db      	ldr	r3, [r3, #12]
    48bc:	2104      	movs	r1, #4
    48be:	6878      	ldr	r0, [r7, #4]
    48c0:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    48c2:	687b      	ldr	r3, [r7, #4]
    48c4:	681b      	ldr	r3, [r3, #0]
    48c6:	6839      	ldr	r1, [r7, #0]
    48c8:	4618      	mov	r0, r3
    48ca:	4b06      	ldr	r3, [pc, #24]	; (48e4 <CAN1_Handler+0xc4>)
    48cc:	4798      	blx	r3
}
    48ce:	bf00      	nop
    48d0:	370c      	adds	r7, #12
    48d2:	46bd      	mov	sp, r7
    48d4:	bd90      	pop	{r4, r7, pc}
    48d6:	bf00      	nop
    48d8:	20000ccc 	.word	0x20000ccc
    48dc:	000044f5 	.word	0x000044f5
    48e0:	0000438d 	.word	0x0000438d
    48e4:	000044d9 	.word	0x000044d9

000048e8 <__NVIC_SetPendingIRQ>:
{
    48e8:	b480      	push	{r7}
    48ea:	b083      	sub	sp, #12
    48ec:	af00      	add	r7, sp, #0
    48ee:	4603      	mov	r3, r0
    48f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    48f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    48f6:	2b00      	cmp	r3, #0
    48f8:	db0c      	blt.n	4914 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48fa:	4909      	ldr	r1, [pc, #36]	; (4920 <__NVIC_SetPendingIRQ+0x38>)
    48fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4900:	095b      	lsrs	r3, r3, #5
    4902:	88fa      	ldrh	r2, [r7, #6]
    4904:	f002 021f 	and.w	r2, r2, #31
    4908:	2001      	movs	r0, #1
    490a:	fa00 f202 	lsl.w	r2, r0, r2
    490e:	3340      	adds	r3, #64	; 0x40
    4910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4914:	bf00      	nop
    4916:	370c      	adds	r7, #12
    4918:	46bd      	mov	sp, r7
    491a:	f85d 7b04 	ldr.w	r7, [sp], #4
    491e:	4770      	bx	lr
    4920:	e000e100 	.word	0xe000e100

00004924 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    4924:	b580      	push	{r7, lr}
    4926:	b082      	sub	sp, #8
    4928:	af00      	add	r7, sp, #0
    492a:	4603      	mov	r3, r0
    492c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    492e:	79fb      	ldrb	r3, [r7, #7]
    4930:	b21b      	sxth	r3, r3
    4932:	4618      	mov	r0, r3
    4934:	4b02      	ldr	r3, [pc, #8]	; (4940 <_irq_set+0x1c>)
    4936:	4798      	blx	r3
}
    4938:	bf00      	nop
    493a:	3708      	adds	r7, #8
    493c:	46bd      	mov	sp, r7
    493e:	bd80      	pop	{r7, pc}
    4940:	000048e9 	.word	0x000048e9

00004944 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4944:	b480      	push	{r7}
    4946:	b083      	sub	sp, #12
    4948:	af00      	add	r7, sp, #0
    494a:	4603      	mov	r3, r0
    494c:	6039      	str	r1, [r7, #0]
    494e:	80fb      	strh	r3, [r7, #6]
    4950:	4613      	mov	r3, r2
    4952:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4954:	797b      	ldrb	r3, [r7, #5]
    4956:	3b04      	subs	r3, #4
    4958:	2b05      	cmp	r3, #5
    495a:	d86b      	bhi.n	4a34 <_get_cycles_for_us_internal+0xf0>
    495c:	a201      	add	r2, pc, #4	; (adr r2, 4964 <_get_cycles_for_us_internal+0x20>)
    495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4962:	bf00      	nop
    4964:	00004a13 	.word	0x00004a13
    4968:	000049f3 	.word	0x000049f3
    496c:	000049d5 	.word	0x000049d5
    4970:	000049b7 	.word	0x000049b7
    4974:	00004999 	.word	0x00004999
    4978:	0000497d 	.word	0x0000497d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    497c:	88fb      	ldrh	r3, [r7, #6]
    497e:	683a      	ldr	r2, [r7, #0]
    4980:	4935      	ldr	r1, [pc, #212]	; (4a58 <_get_cycles_for_us_internal+0x114>)
    4982:	fba1 1202 	umull	r1, r2, r1, r2
    4986:	0c92      	lsrs	r2, r2, #18
    4988:	fb02 f303 	mul.w	r3, r2, r3
    498c:	3302      	adds	r3, #2
    498e:	4a33      	ldr	r2, [pc, #204]	; (4a5c <_get_cycles_for_us_internal+0x118>)
    4990:	fba2 2303 	umull	r2, r3, r2, r3
    4994:	085b      	lsrs	r3, r3, #1
    4996:	e059      	b.n	4a4c <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4998:	88fb      	ldrh	r3, [r7, #6]
    499a:	683a      	ldr	r2, [r7, #0]
    499c:	0952      	lsrs	r2, r2, #5
    499e:	4930      	ldr	r1, [pc, #192]	; (4a60 <_get_cycles_for_us_internal+0x11c>)
    49a0:	fba1 1202 	umull	r1, r2, r1, r2
    49a4:	09d2      	lsrs	r2, r2, #7
    49a6:	fb02 f303 	mul.w	r3, r2, r3
    49aa:	331d      	adds	r3, #29
    49ac:	4a2d      	ldr	r2, [pc, #180]	; (4a64 <_get_cycles_for_us_internal+0x120>)
    49ae:	fba2 2303 	umull	r2, r3, r2, r3
    49b2:	091b      	lsrs	r3, r3, #4
    49b4:	e04a      	b.n	4a4c <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    49b6:	88fb      	ldrh	r3, [r7, #6]
    49b8:	683a      	ldr	r2, [r7, #0]
    49ba:	492b      	ldr	r1, [pc, #172]	; (4a68 <_get_cycles_for_us_internal+0x124>)
    49bc:	fba1 1202 	umull	r1, r2, r1, r2
    49c0:	0b52      	lsrs	r2, r2, #13
    49c2:	fb02 f303 	mul.w	r3, r2, r3
    49c6:	f203 132b 	addw	r3, r3, #299	; 0x12b
    49ca:	4a28      	ldr	r2, [pc, #160]	; (4a6c <_get_cycles_for_us_internal+0x128>)
    49cc:	fba2 2303 	umull	r2, r3, r2, r3
    49d0:	095b      	lsrs	r3, r3, #5
    49d2:	e03b      	b.n	4a4c <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    49d4:	88fb      	ldrh	r3, [r7, #6]
    49d6:	683a      	ldr	r2, [r7, #0]
    49d8:	4925      	ldr	r1, [pc, #148]	; (4a70 <_get_cycles_for_us_internal+0x12c>)
    49da:	fba1 1202 	umull	r1, r2, r1, r2
    49de:	0992      	lsrs	r2, r2, #6
    49e0:	fb02 f303 	mul.w	r3, r2, r3
    49e4:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    49e8:	4a22      	ldr	r2, [pc, #136]	; (4a74 <_get_cycles_for_us_internal+0x130>)
    49ea:	fba2 2303 	umull	r2, r3, r2, r3
    49ee:	099b      	lsrs	r3, r3, #6
    49f0:	e02c      	b.n	4a4c <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    49f2:	88fb      	ldrh	r3, [r7, #6]
    49f4:	683a      	ldr	r2, [r7, #0]
    49f6:	4920      	ldr	r1, [pc, #128]	; (4a78 <_get_cycles_for_us_internal+0x134>)
    49f8:	fba1 1202 	umull	r1, r2, r1, r2
    49fc:	0952      	lsrs	r2, r2, #5
    49fe:	fb02 f303 	mul.w	r3, r2, r3
    4a02:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4a06:	332f      	adds	r3, #47	; 0x2f
    4a08:	4a1c      	ldr	r2, [pc, #112]	; (4a7c <_get_cycles_for_us_internal+0x138>)
    4a0a:	fba2 2303 	umull	r2, r3, r2, r3
    4a0e:	0b5b      	lsrs	r3, r3, #13
    4a10:	e01c      	b.n	4a4c <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    4a12:	88fb      	ldrh	r3, [r7, #6]
    4a14:	683a      	ldr	r2, [r7, #0]
    4a16:	491a      	ldr	r1, [pc, #104]	; (4a80 <_get_cycles_for_us_internal+0x13c>)
    4a18:	fba1 1202 	umull	r1, r2, r1, r2
    4a1c:	08d2      	lsrs	r2, r2, #3
    4a1e:	fb02 f303 	mul.w	r3, r2, r3
    4a22:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4a26:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4a2a:	4a16      	ldr	r2, [pc, #88]	; (4a84 <_get_cycles_for_us_internal+0x140>)
    4a2c:	fba2 2303 	umull	r2, r3, r2, r3
    4a30:	0c5b      	lsrs	r3, r3, #17
    4a32:	e00b      	b.n	4a4c <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4a34:	88fb      	ldrh	r3, [r7, #6]
    4a36:	683a      	ldr	r2, [r7, #0]
    4a38:	fb02 f303 	mul.w	r3, r2, r3
    4a3c:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4a40:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4a44:	4a10      	ldr	r2, [pc, #64]	; (4a88 <_get_cycles_for_us_internal+0x144>)
    4a46:	fba2 2303 	umull	r2, r3, r2, r3
    4a4a:	0c9b      	lsrs	r3, r3, #18
	}
}
    4a4c:	4618      	mov	r0, r3
    4a4e:	370c      	adds	r7, #12
    4a50:	46bd      	mov	sp, r7
    4a52:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a56:	4770      	bx	lr
    4a58:	431bde83 	.word	0x431bde83
    4a5c:	aaaaaaab 	.word	0xaaaaaaab
    4a60:	0a7c5ac5 	.word	0x0a7c5ac5
    4a64:	88888889 	.word	0x88888889
    4a68:	d1b71759 	.word	0xd1b71759
    4a6c:	1b4e81b5 	.word	0x1b4e81b5
    4a70:	10624dd3 	.word	0x10624dd3
    4a74:	057619f1 	.word	0x057619f1
    4a78:	51eb851f 	.word	0x51eb851f
    4a7c:	45e7b273 	.word	0x45e7b273
    4a80:	cccccccd 	.word	0xcccccccd
    4a84:	6fd91d85 	.word	0x6fd91d85
    4a88:	165e9f81 	.word	0x165e9f81

00004a8c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4a8c:	b580      	push	{r7, lr}
    4a8e:	b082      	sub	sp, #8
    4a90:	af00      	add	r7, sp, #0
    4a92:	4603      	mov	r3, r0
    4a94:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4a96:	88fb      	ldrh	r3, [r7, #6]
    4a98:	2209      	movs	r2, #9
    4a9a:	4904      	ldr	r1, [pc, #16]	; (4aac <_get_cycles_for_us+0x20>)
    4a9c:	4618      	mov	r0, r3
    4a9e:	4b04      	ldr	r3, [pc, #16]	; (4ab0 <_get_cycles_for_us+0x24>)
    4aa0:	4798      	blx	r3
    4aa2:	4603      	mov	r3, r0
}
    4aa4:	4618      	mov	r0, r3
    4aa6:	3708      	adds	r7, #8
    4aa8:	46bd      	mov	sp, r7
    4aaa:	bd80      	pop	{r7, pc}
    4aac:	07270e00 	.word	0x07270e00
    4ab0:	00004945 	.word	0x00004945

00004ab4 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4ab4:	b480      	push	{r7}
    4ab6:	b083      	sub	sp, #12
    4ab8:	af00      	add	r7, sp, #0
    4aba:	4603      	mov	r3, r0
    4abc:	6039      	str	r1, [r7, #0]
    4abe:	80fb      	strh	r3, [r7, #6]
    4ac0:	4613      	mov	r3, r2
    4ac2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4ac4:	797b      	ldrb	r3, [r7, #5]
    4ac6:	3b04      	subs	r3, #4
    4ac8:	2b05      	cmp	r3, #5
    4aca:	d870      	bhi.n	4bae <_get_cycles_for_ms_internal+0xfa>
    4acc:	a201      	add	r2, pc, #4	; (adr r2, 4ad4 <_get_cycles_for_ms_internal+0x20>)
    4ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4ad2:	bf00      	nop
    4ad4:	00004b91 	.word	0x00004b91
    4ad8:	00004b75 	.word	0x00004b75
    4adc:	00004b59 	.word	0x00004b59
    4ae0:	00004b35 	.word	0x00004b35
    4ae4:	00004b11 	.word	0x00004b11
    4ae8:	00004aed 	.word	0x00004aed
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4aec:	88fb      	ldrh	r3, [r7, #6]
    4aee:	683a      	ldr	r2, [r7, #0]
    4af0:	4937      	ldr	r1, [pc, #220]	; (4bd0 <_get_cycles_for_ms_internal+0x11c>)
    4af2:	fba1 1202 	umull	r1, r2, r1, r2
    4af6:	0c92      	lsrs	r2, r2, #18
    4af8:	fb02 f303 	mul.w	r3, r2, r3
    4afc:	3302      	adds	r3, #2
    4afe:	4a35      	ldr	r2, [pc, #212]	; (4bd4 <_get_cycles_for_ms_internal+0x120>)
    4b00:	fba2 2303 	umull	r2, r3, r2, r3
    4b04:	085b      	lsrs	r3, r3, #1
    4b06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4b0a:	fb02 f303 	mul.w	r3, r2, r3
    4b0e:	e058      	b.n	4bc2 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4b10:	88fb      	ldrh	r3, [r7, #6]
    4b12:	683a      	ldr	r2, [r7, #0]
    4b14:	0952      	lsrs	r2, r2, #5
    4b16:	4930      	ldr	r1, [pc, #192]	; (4bd8 <_get_cycles_for_ms_internal+0x124>)
    4b18:	fba1 1202 	umull	r1, r2, r1, r2
    4b1c:	09d2      	lsrs	r2, r2, #7
    4b1e:	fb02 f303 	mul.w	r3, r2, r3
    4b22:	3302      	adds	r3, #2
    4b24:	4a2b      	ldr	r2, [pc, #172]	; (4bd4 <_get_cycles_for_ms_internal+0x120>)
    4b26:	fba2 2303 	umull	r2, r3, r2, r3
    4b2a:	085b      	lsrs	r3, r3, #1
    4b2c:	2264      	movs	r2, #100	; 0x64
    4b2e:	fb02 f303 	mul.w	r3, r2, r3
    4b32:	e046      	b.n	4bc2 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4b34:	88fb      	ldrh	r3, [r7, #6]
    4b36:	683a      	ldr	r2, [r7, #0]
    4b38:	4928      	ldr	r1, [pc, #160]	; (4bdc <_get_cycles_for_ms_internal+0x128>)
    4b3a:	fba1 1202 	umull	r1, r2, r1, r2
    4b3e:	0b52      	lsrs	r2, r2, #13
    4b40:	fb02 f303 	mul.w	r3, r2, r3
    4b44:	3302      	adds	r3, #2
    4b46:	4a23      	ldr	r2, [pc, #140]	; (4bd4 <_get_cycles_for_ms_internal+0x120>)
    4b48:	fba2 2303 	umull	r2, r3, r2, r3
    4b4c:	085a      	lsrs	r2, r3, #1
    4b4e:	4613      	mov	r3, r2
    4b50:	009b      	lsls	r3, r3, #2
    4b52:	4413      	add	r3, r2
    4b54:	005b      	lsls	r3, r3, #1
    4b56:	e034      	b.n	4bc2 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4b58:	88fb      	ldrh	r3, [r7, #6]
    4b5a:	683a      	ldr	r2, [r7, #0]
    4b5c:	4920      	ldr	r1, [pc, #128]	; (4be0 <_get_cycles_for_ms_internal+0x12c>)
    4b5e:	fba1 1202 	umull	r1, r2, r1, r2
    4b62:	0992      	lsrs	r2, r2, #6
    4b64:	fb02 f303 	mul.w	r3, r2, r3
    4b68:	3302      	adds	r3, #2
    4b6a:	4a1a      	ldr	r2, [pc, #104]	; (4bd4 <_get_cycles_for_ms_internal+0x120>)
    4b6c:	fba2 2303 	umull	r2, r3, r2, r3
    4b70:	085b      	lsrs	r3, r3, #1
    4b72:	e026      	b.n	4bc2 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4b74:	88fb      	ldrh	r3, [r7, #6]
    4b76:	683a      	ldr	r2, [r7, #0]
    4b78:	491a      	ldr	r1, [pc, #104]	; (4be4 <_get_cycles_for_ms_internal+0x130>)
    4b7a:	fba1 1202 	umull	r1, r2, r1, r2
    4b7e:	0952      	lsrs	r2, r2, #5
    4b80:	fb02 f303 	mul.w	r3, r2, r3
    4b84:	331d      	adds	r3, #29
    4b86:	4a18      	ldr	r2, [pc, #96]	; (4be8 <_get_cycles_for_ms_internal+0x134>)
    4b88:	fba2 2303 	umull	r2, r3, r2, r3
    4b8c:	091b      	lsrs	r3, r3, #4
    4b8e:	e018      	b.n	4bc2 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4b90:	88fb      	ldrh	r3, [r7, #6]
    4b92:	683a      	ldr	r2, [r7, #0]
    4b94:	4915      	ldr	r1, [pc, #84]	; (4bec <_get_cycles_for_ms_internal+0x138>)
    4b96:	fba1 1202 	umull	r1, r2, r1, r2
    4b9a:	08d2      	lsrs	r2, r2, #3
    4b9c:	fb02 f303 	mul.w	r3, r2, r3
    4ba0:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4ba4:	4a12      	ldr	r2, [pc, #72]	; (4bf0 <_get_cycles_for_ms_internal+0x13c>)
    4ba6:	fba2 2303 	umull	r2, r3, r2, r3
    4baa:	095b      	lsrs	r3, r3, #5
    4bac:	e009      	b.n	4bc2 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4bae:	88fb      	ldrh	r3, [r7, #6]
    4bb0:	683a      	ldr	r2, [r7, #0]
    4bb2:	fb02 f303 	mul.w	r3, r2, r3
    4bb6:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4bba:	4a0e      	ldr	r2, [pc, #56]	; (4bf4 <_get_cycles_for_ms_internal+0x140>)
    4bbc:	fba2 2303 	umull	r2, r3, r2, r3
    4bc0:	099b      	lsrs	r3, r3, #6
	}
}
    4bc2:	4618      	mov	r0, r3
    4bc4:	370c      	adds	r7, #12
    4bc6:	46bd      	mov	sp, r7
    4bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bcc:	4770      	bx	lr
    4bce:	bf00      	nop
    4bd0:	431bde83 	.word	0x431bde83
    4bd4:	aaaaaaab 	.word	0xaaaaaaab
    4bd8:	0a7c5ac5 	.word	0x0a7c5ac5
    4bdc:	d1b71759 	.word	0xd1b71759
    4be0:	10624dd3 	.word	0x10624dd3
    4be4:	51eb851f 	.word	0x51eb851f
    4be8:	88888889 	.word	0x88888889
    4bec:	cccccccd 	.word	0xcccccccd
    4bf0:	1b4e81b5 	.word	0x1b4e81b5
    4bf4:	057619f1 	.word	0x057619f1

00004bf8 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4bf8:	b580      	push	{r7, lr}
    4bfa:	b082      	sub	sp, #8
    4bfc:	af00      	add	r7, sp, #0
    4bfe:	4603      	mov	r3, r0
    4c00:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4c02:	88fb      	ldrh	r3, [r7, #6]
    4c04:	2209      	movs	r2, #9
    4c06:	4904      	ldr	r1, [pc, #16]	; (4c18 <_get_cycles_for_ms+0x20>)
    4c08:	4618      	mov	r0, r3
    4c0a:	4b04      	ldr	r3, [pc, #16]	; (4c1c <_get_cycles_for_ms+0x24>)
    4c0c:	4798      	blx	r3
    4c0e:	4603      	mov	r3, r0
}
    4c10:	4618      	mov	r0, r3
    4c12:	3708      	adds	r7, #8
    4c14:	46bd      	mov	sp, r7
    4c16:	bd80      	pop	{r7, pc}
    4c18:	07270e00 	.word	0x07270e00
    4c1c:	00004ab5 	.word	0x00004ab5

00004c20 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4c20:	b480      	push	{r7}
    4c22:	b083      	sub	sp, #12
    4c24:	af00      	add	r7, sp, #0
    4c26:	6078      	str	r0, [r7, #4]
    4c28:	6039      	str	r1, [r7, #0]
    4c2a:	bf00      	nop
    4c2c:	f3af 8000 	nop.w

00004c30 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4c30:	3901      	subs	r1, #1
    4c32:	d8fd      	bhi.n	4c30 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4c34:	bf00      	nop
    4c36:	370c      	adds	r7, #12
    4c38:	46bd      	mov	sp, r7
    4c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c3e:	4770      	bx	lr

00004c40 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4c40:	b480      	push	{r7}
    4c42:	b083      	sub	sp, #12
    4c44:	af00      	add	r7, sp, #0
    4c46:	6078      	str	r0, [r7, #4]
    4c48:	460b      	mov	r3, r1
    4c4a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4c4c:	687b      	ldr	r3, [r7, #4]
    4c4e:	881b      	ldrh	r3, [r3, #0]
    4c50:	b29a      	uxth	r2, r3
    4c52:	887b      	ldrh	r3, [r7, #2]
    4c54:	021b      	lsls	r3, r3, #8
    4c56:	b29b      	uxth	r3, r3
    4c58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4c5c:	b29b      	uxth	r3, r3
    4c5e:	4313      	orrs	r3, r2
    4c60:	b29a      	uxth	r2, r3
    4c62:	687b      	ldr	r3, [r7, #4]
    4c64:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4c66:	bf00      	nop
    4c68:	370c      	adds	r7, #12
    4c6a:	46bd      	mov	sp, r7
    4c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c70:	4770      	bx	lr

00004c72 <hri_port_set_EVCTRL_reg>:
{
    4c72:	b480      	push	{r7}
    4c74:	b085      	sub	sp, #20
    4c76:	af00      	add	r7, sp, #0
    4c78:	60f8      	str	r0, [r7, #12]
    4c7a:	460b      	mov	r3, r1
    4c7c:	607a      	str	r2, [r7, #4]
    4c7e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4c80:	7afb      	ldrb	r3, [r7, #11]
    4c82:	7afa      	ldrb	r2, [r7, #11]
    4c84:	68f9      	ldr	r1, [r7, #12]
    4c86:	01d2      	lsls	r2, r2, #7
    4c88:	440a      	add	r2, r1
    4c8a:	322c      	adds	r2, #44	; 0x2c
    4c8c:	6811      	ldr	r1, [r2, #0]
    4c8e:	687a      	ldr	r2, [r7, #4]
    4c90:	430a      	orrs	r2, r1
    4c92:	68f9      	ldr	r1, [r7, #12]
    4c94:	01db      	lsls	r3, r3, #7
    4c96:	440b      	add	r3, r1
    4c98:	332c      	adds	r3, #44	; 0x2c
    4c9a:	601a      	str	r2, [r3, #0]
}
    4c9c:	bf00      	nop
    4c9e:	3714      	adds	r7, #20
    4ca0:	46bd      	mov	sp, r7
    4ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ca6:	4770      	bx	lr

00004ca8 <_port_event_init>:

static inline void _port_event_init()
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4cac:	2200      	movs	r2, #0
    4cae:	2100      	movs	r1, #0
    4cb0:	480a      	ldr	r0, [pc, #40]	; (4cdc <_port_event_init+0x34>)
    4cb2:	4b0b      	ldr	r3, [pc, #44]	; (4ce0 <_port_event_init+0x38>)
    4cb4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4cb6:	2200      	movs	r2, #0
    4cb8:	2101      	movs	r1, #1
    4cba:	4808      	ldr	r0, [pc, #32]	; (4cdc <_port_event_init+0x34>)
    4cbc:	4b08      	ldr	r3, [pc, #32]	; (4ce0 <_port_event_init+0x38>)
    4cbe:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4cc0:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4cc4:	2102      	movs	r1, #2
    4cc6:	4805      	ldr	r0, [pc, #20]	; (4cdc <_port_event_init+0x34>)
    4cc8:	4b05      	ldr	r3, [pc, #20]	; (4ce0 <_port_event_init+0x38>)
    4cca:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4ccc:	2200      	movs	r2, #0
    4cce:	2103      	movs	r1, #3
    4cd0:	4802      	ldr	r0, [pc, #8]	; (4cdc <_port_event_init+0x34>)
    4cd2:	4b03      	ldr	r3, [pc, #12]	; (4ce0 <_port_event_init+0x38>)
    4cd4:	4798      	blx	r3
}
    4cd6:	bf00      	nop
    4cd8:	bd80      	pop	{r7, pc}
    4cda:	bf00      	nop
    4cdc:	41008000 	.word	0x41008000
    4ce0:	00004c73 	.word	0x00004c73

00004ce4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4ce4:	b580      	push	{r7, lr}
    4ce6:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4ce8:	2104      	movs	r1, #4
    4cea:	480b      	ldr	r0, [pc, #44]	; (4d18 <_init_chip+0x34>)
    4cec:	4b0b      	ldr	r3, [pc, #44]	; (4d1c <_init_chip+0x38>)
    4cee:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4cf0:	4b0b      	ldr	r3, [pc, #44]	; (4d20 <_init_chip+0x3c>)
    4cf2:	4798      	blx	r3
	_oscctrl_init_sources();
    4cf4:	4b0b      	ldr	r3, [pc, #44]	; (4d24 <_init_chip+0x40>)
    4cf6:	4798      	blx	r3
	_mclk_init();
    4cf8:	4b0b      	ldr	r3, [pc, #44]	; (4d28 <_init_chip+0x44>)
    4cfa:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4cfc:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4d00:	4b0a      	ldr	r3, [pc, #40]	; (4d2c <_init_chip+0x48>)
    4d02:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4d04:	4b0a      	ldr	r3, [pc, #40]	; (4d30 <_init_chip+0x4c>)
    4d06:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4d08:	f640 30df 	movw	r0, #3039	; 0xbdf
    4d0c:	4b07      	ldr	r3, [pc, #28]	; (4d2c <_init_chip+0x48>)
    4d0e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4d10:	4b08      	ldr	r3, [pc, #32]	; (4d34 <_init_chip+0x50>)
    4d12:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4d14:	bf00      	nop
    4d16:	bd80      	pop	{r7, pc}
    4d18:	41004000 	.word	0x41004000
    4d1c:	00004c41 	.word	0x00004c41
    4d20:	0000580d 	.word	0x0000580d
    4d24:	00005cd5 	.word	0x00005cd5
    4d28:	0000572d 	.word	0x0000572d
    4d2c:	000055d5 	.word	0x000055d5
    4d30:	00005d15 	.word	0x00005d15
    4d34:	00004ca9 	.word	0x00004ca9

00004d38 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4d38:	b480      	push	{r7}
    4d3a:	b083      	sub	sp, #12
    4d3c:	af00      	add	r7, sp, #0
    4d3e:	6078      	str	r0, [r7, #4]
    4d40:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	683a      	ldr	r2, [r7, #0]
    4d46:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4d48:	2300      	movs	r3, #0
}
    4d4a:	4618      	mov	r0, r3
    4d4c:	370c      	adds	r7, #12
    4d4e:	46bd      	mov	sp, r7
    4d50:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d54:	4770      	bx	lr
	...

00004d58 <__NVIC_EnableIRQ>:
{
    4d58:	b480      	push	{r7}
    4d5a:	b083      	sub	sp, #12
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	4603      	mov	r3, r0
    4d60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4d66:	2b00      	cmp	r3, #0
    4d68:	db0b      	blt.n	4d82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d6a:	4909      	ldr	r1, [pc, #36]	; (4d90 <__NVIC_EnableIRQ+0x38>)
    4d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4d70:	095b      	lsrs	r3, r3, #5
    4d72:	88fa      	ldrh	r2, [r7, #6]
    4d74:	f002 021f 	and.w	r2, r2, #31
    4d78:	2001      	movs	r0, #1
    4d7a:	fa00 f202 	lsl.w	r2, r0, r2
    4d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4d82:	bf00      	nop
    4d84:	370c      	adds	r7, #12
    4d86:	46bd      	mov	sp, r7
    4d88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d8c:	4770      	bx	lr
    4d8e:	bf00      	nop
    4d90:	e000e100 	.word	0xe000e100

00004d94 <__NVIC_DisableIRQ>:
{
    4d94:	b480      	push	{r7}
    4d96:	b083      	sub	sp, #12
    4d98:	af00      	add	r7, sp, #0
    4d9a:	4603      	mov	r3, r0
    4d9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4da2:	2b00      	cmp	r3, #0
    4da4:	db10      	blt.n	4dc8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4da6:	490b      	ldr	r1, [pc, #44]	; (4dd4 <__NVIC_DisableIRQ+0x40>)
    4da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4dac:	095b      	lsrs	r3, r3, #5
    4dae:	88fa      	ldrh	r2, [r7, #6]
    4db0:	f002 021f 	and.w	r2, r2, #31
    4db4:	2001      	movs	r0, #1
    4db6:	fa00 f202 	lsl.w	r2, r0, r2
    4dba:	3320      	adds	r3, #32
    4dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4dc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4dc4:	f3bf 8f6f 	isb	sy
}
    4dc8:	bf00      	nop
    4dca:	370c      	adds	r7, #12
    4dcc:	46bd      	mov	sp, r7
    4dce:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dd2:	4770      	bx	lr
    4dd4:	e000e100 	.word	0xe000e100

00004dd8 <__NVIC_ClearPendingIRQ>:
{
    4dd8:	b480      	push	{r7}
    4dda:	b083      	sub	sp, #12
    4ddc:	af00      	add	r7, sp, #0
    4dde:	4603      	mov	r3, r0
    4de0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4de6:	2b00      	cmp	r3, #0
    4de8:	db0c      	blt.n	4e04 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4dea:	4909      	ldr	r1, [pc, #36]	; (4e10 <__NVIC_ClearPendingIRQ+0x38>)
    4dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4df0:	095b      	lsrs	r3, r3, #5
    4df2:	88fa      	ldrh	r2, [r7, #6]
    4df4:	f002 021f 	and.w	r2, r2, #31
    4df8:	2001      	movs	r0, #1
    4dfa:	fa00 f202 	lsl.w	r2, r0, r2
    4dfe:	3360      	adds	r3, #96	; 0x60
    4e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4e04:	bf00      	nop
    4e06:	370c      	adds	r7, #12
    4e08:	46bd      	mov	sp, r7
    4e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e0e:	4770      	bx	lr
    4e10:	e000e100 	.word	0xe000e100

00004e14 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4e14:	b480      	push	{r7}
    4e16:	b083      	sub	sp, #12
    4e18:	af00      	add	r7, sp, #0
    4e1a:	6078      	str	r0, [r7, #4]
    4e1c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4e1e:	bf00      	nop
    4e20:	687b      	ldr	r3, [r7, #4]
    4e22:	685a      	ldr	r2, [r3, #4]
    4e24:	683b      	ldr	r3, [r7, #0]
    4e26:	4013      	ands	r3, r2
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d1f9      	bne.n	4e20 <hri_eic_wait_for_sync+0xc>
	};
}
    4e2c:	bf00      	nop
    4e2e:	370c      	adds	r7, #12
    4e30:	46bd      	mov	sp, r7
    4e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e36:	4770      	bx	lr

00004e38 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4e38:	b480      	push	{r7}
    4e3a:	b083      	sub	sp, #12
    4e3c:	af00      	add	r7, sp, #0
    4e3e:	6078      	str	r0, [r7, #4]
    4e40:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4e42:	687b      	ldr	r3, [r7, #4]
    4e44:	685a      	ldr	r2, [r3, #4]
    4e46:	683b      	ldr	r3, [r7, #0]
    4e48:	4013      	ands	r3, r2
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	bf14      	ite	ne
    4e4e:	2301      	movne	r3, #1
    4e50:	2300      	moveq	r3, #0
    4e52:	b2db      	uxtb	r3, r3
}
    4e54:	4618      	mov	r0, r3
    4e56:	370c      	adds	r7, #12
    4e58:	46bd      	mov	sp, r7
    4e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e5e:	4770      	bx	lr

00004e60 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4e60:	b480      	push	{r7}
    4e62:	b083      	sub	sp, #12
    4e64:	af00      	add	r7, sp, #0
    4e66:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4e68:	687b      	ldr	r3, [r7, #4]
    4e6a:	695b      	ldr	r3, [r3, #20]
}
    4e6c:	4618      	mov	r0, r3
    4e6e:	370c      	adds	r7, #12
    4e70:	46bd      	mov	sp, r7
    4e72:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e76:	4770      	bx	lr

00004e78 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4e78:	b480      	push	{r7}
    4e7a:	b083      	sub	sp, #12
    4e7c:	af00      	add	r7, sp, #0
    4e7e:	6078      	str	r0, [r7, #4]
    4e80:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4e82:	687b      	ldr	r3, [r7, #4]
    4e84:	683a      	ldr	r2, [r7, #0]
    4e86:	615a      	str	r2, [r3, #20]
}
    4e88:	bf00      	nop
    4e8a:	370c      	adds	r7, #12
    4e8c:	46bd      	mov	sp, r7
    4e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e92:	4770      	bx	lr

00004e94 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4e94:	b480      	push	{r7}
    4e96:	b083      	sub	sp, #12
    4e98:	af00      	add	r7, sp, #0
    4e9a:	6078      	str	r0, [r7, #4]
    4e9c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4e9e:	687b      	ldr	r3, [r7, #4]
    4ea0:	683a      	ldr	r2, [r7, #0]
    4ea2:	611a      	str	r2, [r3, #16]
}
    4ea4:	bf00      	nop
    4ea6:	370c      	adds	r7, #12
    4ea8:	46bd      	mov	sp, r7
    4eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eae:	4770      	bx	lr

00004eb0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4eb0:	b480      	push	{r7}
    4eb2:	b083      	sub	sp, #12
    4eb4:	af00      	add	r7, sp, #0
    4eb6:	6078      	str	r0, [r7, #4]
    4eb8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	683a      	ldr	r2, [r7, #0]
    4ebe:	60da      	str	r2, [r3, #12]
}
    4ec0:	bf00      	nop
    4ec2:	370c      	adds	r7, #12
    4ec4:	46bd      	mov	sp, r7
    4ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eca:	4770      	bx	lr

00004ecc <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4ecc:	b580      	push	{r7, lr}
    4ece:	b082      	sub	sp, #8
    4ed0:	af00      	add	r7, sp, #0
    4ed2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4ed4:	687b      	ldr	r3, [r7, #4]
    4ed6:	781b      	ldrb	r3, [r3, #0]
    4ed8:	b2db      	uxtb	r3, r3
    4eda:	f043 0302 	orr.w	r3, r3, #2
    4ede:	b2da      	uxtb	r2, r3
    4ee0:	687b      	ldr	r3, [r7, #4]
    4ee2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4ee4:	2103      	movs	r1, #3
    4ee6:	6878      	ldr	r0, [r7, #4]
    4ee8:	4b02      	ldr	r3, [pc, #8]	; (4ef4 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4eea:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4eec:	bf00      	nop
    4eee:	3708      	adds	r7, #8
    4ef0:	46bd      	mov	sp, r7
    4ef2:	bd80      	pop	{r7, pc}
    4ef4:	00004e15 	.word	0x00004e15

00004ef8 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4ef8:	b580      	push	{r7, lr}
    4efa:	b082      	sub	sp, #8
    4efc:	af00      	add	r7, sp, #0
    4efe:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4f00:	687b      	ldr	r3, [r7, #4]
    4f02:	781b      	ldrb	r3, [r3, #0]
    4f04:	b2db      	uxtb	r3, r3
    4f06:	f023 0302 	bic.w	r3, r3, #2
    4f0a:	b2da      	uxtb	r2, r3
    4f0c:	687b      	ldr	r3, [r7, #4]
    4f0e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4f10:	2103      	movs	r1, #3
    4f12:	6878      	ldr	r0, [r7, #4]
    4f14:	4b02      	ldr	r3, [pc, #8]	; (4f20 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4f16:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f18:	bf00      	nop
    4f1a:	3708      	adds	r7, #8
    4f1c:	46bd      	mov	sp, r7
    4f1e:	bd80      	pop	{r7, pc}
    4f20:	00004e15 	.word	0x00004e15

00004f24 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4f24:	b580      	push	{r7, lr}
    4f26:	b084      	sub	sp, #16
    4f28:	af00      	add	r7, sp, #0
    4f2a:	6078      	str	r0, [r7, #4]
    4f2c:	460b      	mov	r3, r1
    4f2e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4f30:	687b      	ldr	r3, [r7, #4]
    4f32:	781b      	ldrb	r3, [r3, #0]
    4f34:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4f36:	7bfb      	ldrb	r3, [r7, #15]
    4f38:	f023 0310 	bic.w	r3, r3, #16
    4f3c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4f3e:	78fb      	ldrb	r3, [r7, #3]
    4f40:	011b      	lsls	r3, r3, #4
    4f42:	b25a      	sxtb	r2, r3
    4f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4f48:	4313      	orrs	r3, r2
    4f4a:	b25b      	sxtb	r3, r3
    4f4c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4f4e:	687b      	ldr	r3, [r7, #4]
    4f50:	7bfa      	ldrb	r2, [r7, #15]
    4f52:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4f54:	2103      	movs	r1, #3
    4f56:	6878      	ldr	r0, [r7, #4]
    4f58:	4b02      	ldr	r3, [pc, #8]	; (4f64 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4f5a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f5c:	bf00      	nop
    4f5e:	3710      	adds	r7, #16
    4f60:	46bd      	mov	sp, r7
    4f62:	bd80      	pop	{r7, pc}
    4f64:	00004e15 	.word	0x00004e15

00004f68 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4f68:	b580      	push	{r7, lr}
    4f6a:	b084      	sub	sp, #16
    4f6c:	af00      	add	r7, sp, #0
    4f6e:	6078      	str	r0, [r7, #4]
    4f70:	460b      	mov	r3, r1
    4f72:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4f74:	2103      	movs	r1, #3
    4f76:	6878      	ldr	r0, [r7, #4]
    4f78:	4b06      	ldr	r3, [pc, #24]	; (4f94 <hri_eic_get_CTRLA_reg+0x2c>)
    4f7a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4f7c:	687b      	ldr	r3, [r7, #4]
    4f7e:	781b      	ldrb	r3, [r3, #0]
    4f80:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4f82:	7bfa      	ldrb	r2, [r7, #15]
    4f84:	78fb      	ldrb	r3, [r7, #3]
    4f86:	4013      	ands	r3, r2
    4f88:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4f8a:	7bfb      	ldrb	r3, [r7, #15]
}
    4f8c:	4618      	mov	r0, r3
    4f8e:	3710      	adds	r7, #16
    4f90:	46bd      	mov	sp, r7
    4f92:	bd80      	pop	{r7, pc}
    4f94:	00004e15 	.word	0x00004e15

00004f98 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4f98:	b580      	push	{r7, lr}
    4f9a:	b082      	sub	sp, #8
    4f9c:	af00      	add	r7, sp, #0
    4f9e:	6078      	str	r0, [r7, #4]
    4fa0:	460b      	mov	r3, r1
    4fa2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4fa4:	687b      	ldr	r3, [r7, #4]
    4fa6:	78fa      	ldrb	r2, [r7, #3]
    4fa8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4faa:	2103      	movs	r1, #3
    4fac:	6878      	ldr	r0, [r7, #4]
    4fae:	4b03      	ldr	r3, [pc, #12]	; (4fbc <hri_eic_write_CTRLA_reg+0x24>)
    4fb0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4fb2:	bf00      	nop
    4fb4:	3708      	adds	r7, #8
    4fb6:	46bd      	mov	sp, r7
    4fb8:	bd80      	pop	{r7, pc}
    4fba:	bf00      	nop
    4fbc:	00004e15 	.word	0x00004e15

00004fc0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4fc0:	b480      	push	{r7}
    4fc2:	b083      	sub	sp, #12
    4fc4:	af00      	add	r7, sp, #0
    4fc6:	6078      	str	r0, [r7, #4]
    4fc8:	460b      	mov	r3, r1
    4fca:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4fcc:	687b      	ldr	r3, [r7, #4]
    4fce:	78fa      	ldrb	r2, [r7, #3]
    4fd0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4fd2:	bf00      	nop
    4fd4:	370c      	adds	r7, #12
    4fd6:	46bd      	mov	sp, r7
    4fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fdc:	4770      	bx	lr

00004fde <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4fde:	b480      	push	{r7}
    4fe0:	b083      	sub	sp, #12
    4fe2:	af00      	add	r7, sp, #0
    4fe4:	6078      	str	r0, [r7, #4]
    4fe6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4fe8:	687b      	ldr	r3, [r7, #4]
    4fea:	683a      	ldr	r2, [r7, #0]
    4fec:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4fee:	bf00      	nop
    4ff0:	370c      	adds	r7, #12
    4ff2:	46bd      	mov	sp, r7
    4ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ff8:	4770      	bx	lr

00004ffa <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4ffa:	b480      	push	{r7}
    4ffc:	b083      	sub	sp, #12
    4ffe:	af00      	add	r7, sp, #0
    5000:	6078      	str	r0, [r7, #4]
    5002:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    5004:	687b      	ldr	r3, [r7, #4]
    5006:	683a      	ldr	r2, [r7, #0]
    5008:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    500a:	bf00      	nop
    500c:	370c      	adds	r7, #12
    500e:	46bd      	mov	sp, r7
    5010:	f85d 7b04 	ldr.w	r7, [sp], #4
    5014:	4770      	bx	lr

00005016 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    5016:	b480      	push	{r7}
    5018:	b085      	sub	sp, #20
    501a:	af00      	add	r7, sp, #0
    501c:	60f8      	str	r0, [r7, #12]
    501e:	460b      	mov	r3, r1
    5020:	607a      	str	r2, [r7, #4]
    5022:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    5024:	7afb      	ldrb	r3, [r7, #11]
    5026:	68fa      	ldr	r2, [r7, #12]
    5028:	3306      	adds	r3, #6
    502a:	009b      	lsls	r3, r3, #2
    502c:	4413      	add	r3, r2
    502e:	687a      	ldr	r2, [r7, #4]
    5030:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5032:	bf00      	nop
    5034:	3714      	adds	r7, #20
    5036:	46bd      	mov	sp, r7
    5038:	f85d 7b04 	ldr.w	r7, [sp], #4
    503c:	4770      	bx	lr

0000503e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    503e:	b480      	push	{r7}
    5040:	b083      	sub	sp, #12
    5042:	af00      	add	r7, sp, #0
    5044:	6078      	str	r0, [r7, #4]
    5046:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    5048:	687b      	ldr	r3, [r7, #4]
    504a:	683a      	ldr	r2, [r7, #0]
    504c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    504e:	bf00      	nop
    5050:	370c      	adds	r7, #12
    5052:	46bd      	mov	sp, r7
    5054:	f85d 7b04 	ldr.w	r7, [sp], #4
    5058:	4770      	bx	lr

0000505a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    505a:	b480      	push	{r7}
    505c:	b083      	sub	sp, #12
    505e:	af00      	add	r7, sp, #0
    5060:	6078      	str	r0, [r7, #4]
    5062:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    5064:	687b      	ldr	r3, [r7, #4]
    5066:	683a      	ldr	r2, [r7, #0]
    5068:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    506a:	bf00      	nop
    506c:	370c      	adds	r7, #12
    506e:	46bd      	mov	sp, r7
    5070:	f85d 7b04 	ldr.w	r7, [sp], #4
    5074:	4770      	bx	lr
	...

00005078 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    5078:	b580      	push	{r7, lr}
    507a:	b082      	sub	sp, #8
    507c:	af00      	add	r7, sp, #0
    507e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    5080:	2101      	movs	r1, #1
    5082:	484f      	ldr	r0, [pc, #316]	; (51c0 <_ext_irq_init+0x148>)
    5084:	4b4f      	ldr	r3, [pc, #316]	; (51c4 <_ext_irq_init+0x14c>)
    5086:	4798      	blx	r3
    5088:	4603      	mov	r3, r0
    508a:	f083 0301 	eor.w	r3, r3, #1
    508e:	b2db      	uxtb	r3, r3
    5090:	2b00      	cmp	r3, #0
    5092:	d011      	beq.n	50b8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    5094:	2102      	movs	r1, #2
    5096:	484a      	ldr	r0, [pc, #296]	; (51c0 <_ext_irq_init+0x148>)
    5098:	4b4b      	ldr	r3, [pc, #300]	; (51c8 <_ext_irq_init+0x150>)
    509a:	4798      	blx	r3
    509c:	4603      	mov	r3, r0
    509e:	2b00      	cmp	r3, #0
    50a0:	d006      	beq.n	50b0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    50a2:	4847      	ldr	r0, [pc, #284]	; (51c0 <_ext_irq_init+0x148>)
    50a4:	4b49      	ldr	r3, [pc, #292]	; (51cc <_ext_irq_init+0x154>)
    50a6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    50a8:	2102      	movs	r1, #2
    50aa:	4845      	ldr	r0, [pc, #276]	; (51c0 <_ext_irq_init+0x148>)
    50ac:	4b48      	ldr	r3, [pc, #288]	; (51d0 <_ext_irq_init+0x158>)
    50ae:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    50b0:	2101      	movs	r1, #1
    50b2:	4843      	ldr	r0, [pc, #268]	; (51c0 <_ext_irq_init+0x148>)
    50b4:	4b47      	ldr	r3, [pc, #284]	; (51d4 <_ext_irq_init+0x15c>)
    50b6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    50b8:	2101      	movs	r1, #1
    50ba:	4841      	ldr	r0, [pc, #260]	; (51c0 <_ext_irq_init+0x148>)
    50bc:	4b44      	ldr	r3, [pc, #272]	; (51d0 <_ext_irq_init+0x158>)
    50be:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    50c0:	2100      	movs	r1, #0
    50c2:	483f      	ldr	r0, [pc, #252]	; (51c0 <_ext_irq_init+0x148>)
    50c4:	4b44      	ldr	r3, [pc, #272]	; (51d8 <_ext_irq_init+0x160>)
    50c6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    50c8:	2100      	movs	r1, #0
    50ca:	483d      	ldr	r0, [pc, #244]	; (51c0 <_ext_irq_init+0x148>)
    50cc:	4b43      	ldr	r3, [pc, #268]	; (51dc <_ext_irq_init+0x164>)
    50ce:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    50d0:	2100      	movs	r1, #0
    50d2:	483b      	ldr	r0, [pc, #236]	; (51c0 <_ext_irq_init+0x148>)
    50d4:	4b42      	ldr	r3, [pc, #264]	; (51e0 <_ext_irq_init+0x168>)
    50d6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    50d8:	f240 31bb 	movw	r1, #955	; 0x3bb
    50dc:	4838      	ldr	r0, [pc, #224]	; (51c0 <_ext_irq_init+0x148>)
    50de:	4b41      	ldr	r3, [pc, #260]	; (51e4 <_ext_irq_init+0x16c>)
    50e0:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    50e2:	f240 313b 	movw	r1, #827	; 0x33b
    50e6:	4836      	ldr	r0, [pc, #216]	; (51c0 <_ext_irq_init+0x148>)
    50e8:	4b3f      	ldr	r3, [pc, #252]	; (51e8 <_ext_irq_init+0x170>)
    50ea:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    50ec:	2100      	movs	r1, #0
    50ee:	4834      	ldr	r0, [pc, #208]	; (51c0 <_ext_irq_init+0x148>)
    50f0:	4b3e      	ldr	r3, [pc, #248]	; (51ec <_ext_irq_init+0x174>)
    50f2:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    50f4:	4a3e      	ldr	r2, [pc, #248]	; (51f0 <_ext_irq_init+0x178>)
    50f6:	2100      	movs	r1, #0
    50f8:	4831      	ldr	r0, [pc, #196]	; (51c0 <_ext_irq_init+0x148>)
    50fa:	4b3e      	ldr	r3, [pc, #248]	; (51f4 <_ext_irq_init+0x17c>)
    50fc:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    50fe:	2211      	movs	r2, #17
    5100:	2101      	movs	r1, #1
    5102:	482f      	ldr	r0, [pc, #188]	; (51c0 <_ext_irq_init+0x148>)
    5104:	4b3b      	ldr	r3, [pc, #236]	; (51f4 <_ext_irq_init+0x17c>)
    5106:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    5108:	482d      	ldr	r0, [pc, #180]	; (51c0 <_ext_irq_init+0x148>)
    510a:	4b3b      	ldr	r3, [pc, #236]	; (51f8 <_ext_irq_init+0x180>)
    510c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    510e:	200c      	movs	r0, #12
    5110:	4b3a      	ldr	r3, [pc, #232]	; (51fc <_ext_irq_init+0x184>)
    5112:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    5114:	200c      	movs	r0, #12
    5116:	4b3a      	ldr	r3, [pc, #232]	; (5200 <_ext_irq_init+0x188>)
    5118:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    511a:	200c      	movs	r0, #12
    511c:	4b39      	ldr	r3, [pc, #228]	; (5204 <_ext_irq_init+0x18c>)
    511e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    5120:	200d      	movs	r0, #13
    5122:	4b36      	ldr	r3, [pc, #216]	; (51fc <_ext_irq_init+0x184>)
    5124:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    5126:	200d      	movs	r0, #13
    5128:	4b35      	ldr	r3, [pc, #212]	; (5200 <_ext_irq_init+0x188>)
    512a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    512c:	200d      	movs	r0, #13
    512e:	4b35      	ldr	r3, [pc, #212]	; (5204 <_ext_irq_init+0x18c>)
    5130:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    5132:	200f      	movs	r0, #15
    5134:	4b31      	ldr	r3, [pc, #196]	; (51fc <_ext_irq_init+0x184>)
    5136:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    5138:	200f      	movs	r0, #15
    513a:	4b31      	ldr	r3, [pc, #196]	; (5200 <_ext_irq_init+0x188>)
    513c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    513e:	200f      	movs	r0, #15
    5140:	4b30      	ldr	r3, [pc, #192]	; (5204 <_ext_irq_init+0x18c>)
    5142:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    5144:	2010      	movs	r0, #16
    5146:	4b2d      	ldr	r3, [pc, #180]	; (51fc <_ext_irq_init+0x184>)
    5148:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    514a:	2010      	movs	r0, #16
    514c:	4b2c      	ldr	r3, [pc, #176]	; (5200 <_ext_irq_init+0x188>)
    514e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    5150:	2010      	movs	r0, #16
    5152:	4b2c      	ldr	r3, [pc, #176]	; (5204 <_ext_irq_init+0x18c>)
    5154:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    5156:	2011      	movs	r0, #17
    5158:	4b28      	ldr	r3, [pc, #160]	; (51fc <_ext_irq_init+0x184>)
    515a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    515c:	2011      	movs	r0, #17
    515e:	4b28      	ldr	r3, [pc, #160]	; (5200 <_ext_irq_init+0x188>)
    5160:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    5162:	2011      	movs	r0, #17
    5164:	4b27      	ldr	r3, [pc, #156]	; (5204 <_ext_irq_init+0x18c>)
    5166:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    5168:	2012      	movs	r0, #18
    516a:	4b24      	ldr	r3, [pc, #144]	; (51fc <_ext_irq_init+0x184>)
    516c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    516e:	2012      	movs	r0, #18
    5170:	4b23      	ldr	r3, [pc, #140]	; (5200 <_ext_irq_init+0x188>)
    5172:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    5174:	2012      	movs	r0, #18
    5176:	4b23      	ldr	r3, [pc, #140]	; (5204 <_ext_irq_init+0x18c>)
    5178:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    517a:	2013      	movs	r0, #19
    517c:	4b1f      	ldr	r3, [pc, #124]	; (51fc <_ext_irq_init+0x184>)
    517e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    5180:	2013      	movs	r0, #19
    5182:	4b1f      	ldr	r3, [pc, #124]	; (5200 <_ext_irq_init+0x188>)
    5184:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    5186:	2013      	movs	r0, #19
    5188:	4b1e      	ldr	r3, [pc, #120]	; (5204 <_ext_irq_init+0x18c>)
    518a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    518c:	2014      	movs	r0, #20
    518e:	4b1b      	ldr	r3, [pc, #108]	; (51fc <_ext_irq_init+0x184>)
    5190:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    5192:	2014      	movs	r0, #20
    5194:	4b1a      	ldr	r3, [pc, #104]	; (5200 <_ext_irq_init+0x188>)
    5196:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    5198:	2014      	movs	r0, #20
    519a:	4b1a      	ldr	r3, [pc, #104]	; (5204 <_ext_irq_init+0x18c>)
    519c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    519e:	2015      	movs	r0, #21
    51a0:	4b16      	ldr	r3, [pc, #88]	; (51fc <_ext_irq_init+0x184>)
    51a2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    51a4:	2015      	movs	r0, #21
    51a6:	4b16      	ldr	r3, [pc, #88]	; (5200 <_ext_irq_init+0x188>)
    51a8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    51aa:	2015      	movs	r0, #21
    51ac:	4b15      	ldr	r3, [pc, #84]	; (5204 <_ext_irq_init+0x18c>)
    51ae:	4798      	blx	r3

	callback = cb;
    51b0:	4a15      	ldr	r2, [pc, #84]	; (5208 <_ext_irq_init+0x190>)
    51b2:	687b      	ldr	r3, [r7, #4]
    51b4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    51b6:	2300      	movs	r3, #0
}
    51b8:	4618      	mov	r0, r3
    51ba:	3708      	adds	r7, #8
    51bc:	46bd      	mov	sp, r7
    51be:	bd80      	pop	{r7, pc}
    51c0:	40002800 	.word	0x40002800
    51c4:	00004e39 	.word	0x00004e39
    51c8:	00004f69 	.word	0x00004f69
    51cc:	00004ef9 	.word	0x00004ef9
    51d0:	00004e15 	.word	0x00004e15
    51d4:	00004f99 	.word	0x00004f99
    51d8:	00004f25 	.word	0x00004f25
    51dc:	00004fc1 	.word	0x00004fc1
    51e0:	00004fdf 	.word	0x00004fdf
    51e4:	00004ffb 	.word	0x00004ffb
    51e8:	0000503f 	.word	0x0000503f
    51ec:	0000505b 	.word	0x0000505b
    51f0:	90999013 	.word	0x90999013
    51f4:	00005017 	.word	0x00005017
    51f8:	00004ecd 	.word	0x00004ecd
    51fc:	00004d95 	.word	0x00004d95
    5200:	00004dd9 	.word	0x00004dd9
    5204:	00004d59 	.word	0x00004d59
    5208:	20000cd0 	.word	0x20000cd0

0000520c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    520c:	b580      	push	{r7, lr}
    520e:	b084      	sub	sp, #16
    5210:	af00      	add	r7, sp, #0
    5212:	6078      	str	r0, [r7, #4]
    5214:	460b      	mov	r3, r1
    5216:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    5218:	23ff      	movs	r3, #255	; 0xff
    521a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    521c:	2300      	movs	r3, #0
    521e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    5220:	e010      	b.n	5244 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    5222:	7bbb      	ldrb	r3, [r7, #14]
    5224:	4a1c      	ldr	r2, [pc, #112]	; (5298 <_ext_irq_enable+0x8c>)
    5226:	00db      	lsls	r3, r3, #3
    5228:	4413      	add	r3, r2
    522a:	685a      	ldr	r2, [r3, #4]
    522c:	687b      	ldr	r3, [r7, #4]
    522e:	429a      	cmp	r2, r3
    5230:	d105      	bne.n	523e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    5232:	7bbb      	ldrb	r3, [r7, #14]
    5234:	4a18      	ldr	r2, [pc, #96]	; (5298 <_ext_irq_enable+0x8c>)
    5236:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    523a:	73fb      	strb	r3, [r7, #15]
			break;
    523c:	e005      	b.n	524a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    523e:	7bbb      	ldrb	r3, [r7, #14]
    5240:	3301      	adds	r3, #1
    5242:	73bb      	strb	r3, [r7, #14]
    5244:	7bbb      	ldrb	r3, [r7, #14]
    5246:	2b08      	cmp	r3, #8
    5248:	d9eb      	bls.n	5222 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    524a:	7bfb      	ldrb	r3, [r7, #15]
    524c:	2bff      	cmp	r3, #255	; 0xff
    524e:	d102      	bne.n	5256 <_ext_irq_enable+0x4a>
		return -1;
    5250:	f04f 33ff 	mov.w	r3, #4294967295
    5254:	e01c      	b.n	5290 <_ext_irq_enable+0x84>
	}

	if (enable) {
    5256:	78fb      	ldrb	r3, [r7, #3]
    5258:	2b00      	cmp	r3, #0
    525a:	d008      	beq.n	526e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    525c:	7bfb      	ldrb	r3, [r7, #15]
    525e:	2201      	movs	r2, #1
    5260:	fa02 f303 	lsl.w	r3, r2, r3
    5264:	4619      	mov	r1, r3
    5266:	480d      	ldr	r0, [pc, #52]	; (529c <_ext_irq_enable+0x90>)
    5268:	4b0d      	ldr	r3, [pc, #52]	; (52a0 <_ext_irq_enable+0x94>)
    526a:	4798      	blx	r3
    526c:	e00f      	b.n	528e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    526e:	7bfb      	ldrb	r3, [r7, #15]
    5270:	2201      	movs	r2, #1
    5272:	fa02 f303 	lsl.w	r3, r2, r3
    5276:	4619      	mov	r1, r3
    5278:	4808      	ldr	r0, [pc, #32]	; (529c <_ext_irq_enable+0x90>)
    527a:	4b0a      	ldr	r3, [pc, #40]	; (52a4 <_ext_irq_enable+0x98>)
    527c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    527e:	7bfb      	ldrb	r3, [r7, #15]
    5280:	2201      	movs	r2, #1
    5282:	fa02 f303 	lsl.w	r3, r2, r3
    5286:	4619      	mov	r1, r3
    5288:	4804      	ldr	r0, [pc, #16]	; (529c <_ext_irq_enable+0x90>)
    528a:	4b07      	ldr	r3, [pc, #28]	; (52a8 <_ext_irq_enable+0x9c>)
    528c:	4798      	blx	r3
	}

	return ERR_NONE;
    528e:	2300      	movs	r3, #0
}
    5290:	4618      	mov	r0, r3
    5292:	3710      	adds	r7, #16
    5294:	46bd      	mov	sp, r7
    5296:	bd80      	pop	{r7, pc}
    5298:	00013f4c 	.word	0x00013f4c
    529c:	40002800 	.word	0x40002800
    52a0:	00004e95 	.word	0x00004e95
    52a4:	00004eb1 	.word	0x00004eb1
    52a8:	00004e79 	.word	0x00004e79

000052ac <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    52ac:	b580      	push	{r7, lr}
    52ae:	b084      	sub	sp, #16
    52b0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    52b2:	4841      	ldr	r0, [pc, #260]	; (53b8 <_ext_irq_handler+0x10c>)
    52b4:	4b41      	ldr	r3, [pc, #260]	; (53bc <_ext_irq_handler+0x110>)
    52b6:	4798      	blx	r3
    52b8:	4603      	mov	r3, r0
    52ba:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    52bc:	f04f 33ff 	mov.w	r3, #4294967295
    52c0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    52c2:	683b      	ldr	r3, [r7, #0]
    52c4:	4619      	mov	r1, r3
    52c6:	483c      	ldr	r0, [pc, #240]	; (53b8 <_ext_irq_handler+0x10c>)
    52c8:	4b3d      	ldr	r3, [pc, #244]	; (53c0 <_ext_irq_handler+0x114>)
    52ca:	4798      	blx	r3

	ASSERT(callback);
    52cc:	4b3d      	ldr	r3, [pc, #244]	; (53c4 <_ext_irq_handler+0x118>)
    52ce:	681b      	ldr	r3, [r3, #0]
    52d0:	2b00      	cmp	r3, #0
    52d2:	bf14      	ite	ne
    52d4:	2301      	movne	r3, #1
    52d6:	2300      	moveq	r3, #0
    52d8:	b2db      	uxtb	r3, r3
    52da:	f44f 7284 	mov.w	r2, #264	; 0x108
    52de:	493a      	ldr	r1, [pc, #232]	; (53c8 <_ext_irq_handler+0x11c>)
    52e0:	4618      	mov	r0, r3
    52e2:	4b3a      	ldr	r3, [pc, #232]	; (53cc <_ext_irq_handler+0x120>)
    52e4:	4798      	blx	r3

	while (flags) {
    52e6:	e060      	b.n	53aa <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    52e8:	683b      	ldr	r3, [r7, #0]
    52ea:	4618      	mov	r0, r3
    52ec:	4b38      	ldr	r3, [pc, #224]	; (53d0 <_ext_irq_handler+0x124>)
    52ee:	4798      	blx	r3
    52f0:	4603      	mov	r3, r0
    52f2:	b2db      	uxtb	r3, r3
    52f4:	3b01      	subs	r3, #1
    52f6:	b2db      	uxtb	r3, r3
    52f8:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    52fa:	e047      	b.n	538c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    52fc:	2300      	movs	r3, #0
    52fe:	71fb      	strb	r3, [r7, #7]
    5300:	2309      	movs	r3, #9
    5302:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    5304:	e024      	b.n	5350 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    5306:	79ba      	ldrb	r2, [r7, #6]
    5308:	79fb      	ldrb	r3, [r7, #7]
    530a:	4413      	add	r3, r2
    530c:	105b      	asrs	r3, r3, #1
    530e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    5310:	797b      	ldrb	r3, [r7, #5]
    5312:	4a30      	ldr	r2, [pc, #192]	; (53d4 <_ext_irq_handler+0x128>)
    5314:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5318:	461a      	mov	r2, r3
    531a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    531e:	429a      	cmp	r2, r3
    5320:	d106      	bne.n	5330 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    5322:	797b      	ldrb	r3, [r7, #5]
    5324:	4a2b      	ldr	r2, [pc, #172]	; (53d4 <_ext_irq_handler+0x128>)
    5326:	00db      	lsls	r3, r3, #3
    5328:	4413      	add	r3, r2
    532a:	685b      	ldr	r3, [r3, #4]
    532c:	60bb      	str	r3, [r7, #8]
					break;
    532e:	e013      	b.n	5358 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    5330:	797b      	ldrb	r3, [r7, #5]
    5332:	4a28      	ldr	r2, [pc, #160]	; (53d4 <_ext_irq_handler+0x128>)
    5334:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5338:	461a      	mov	r2, r3
    533a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    533e:	429a      	cmp	r2, r3
    5340:	da03      	bge.n	534a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    5342:	797b      	ldrb	r3, [r7, #5]
    5344:	3301      	adds	r3, #1
    5346:	71fb      	strb	r3, [r7, #7]
    5348:	e002      	b.n	5350 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    534a:	797b      	ldrb	r3, [r7, #5]
    534c:	3b01      	subs	r3, #1
    534e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    5350:	79ba      	ldrb	r2, [r7, #6]
    5352:	79fb      	ldrb	r3, [r7, #7]
    5354:	429a      	cmp	r2, r3
    5356:	d2d6      	bcs.n	5306 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    5358:	68bb      	ldr	r3, [r7, #8]
    535a:	f1b3 3fff 	cmp.w	r3, #4294967295
    535e:	d003      	beq.n	5368 <_ext_irq_handler+0xbc>
				callback(pin);
    5360:	4b18      	ldr	r3, [pc, #96]	; (53c4 <_ext_irq_handler+0x118>)
    5362:	681b      	ldr	r3, [r3, #0]
    5364:	68b8      	ldr	r0, [r7, #8]
    5366:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    5368:	f997 300f 	ldrsb.w	r3, [r7, #15]
    536c:	2201      	movs	r2, #1
    536e:	fa02 f303 	lsl.w	r3, r2, r3
    5372:	43da      	mvns	r2, r3
    5374:	683b      	ldr	r3, [r7, #0]
    5376:	4013      	ands	r3, r2
    5378:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    537a:	683b      	ldr	r3, [r7, #0]
    537c:	4618      	mov	r0, r3
    537e:	4b14      	ldr	r3, [pc, #80]	; (53d0 <_ext_irq_handler+0x124>)
    5380:	4798      	blx	r3
    5382:	4603      	mov	r3, r0
    5384:	b2db      	uxtb	r3, r3
    5386:	3b01      	subs	r3, #1
    5388:	b2db      	uxtb	r3, r3
    538a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    538c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5390:	f1b3 3fff 	cmp.w	r3, #4294967295
    5394:	d1b2      	bne.n	52fc <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    5396:	4808      	ldr	r0, [pc, #32]	; (53b8 <_ext_irq_handler+0x10c>)
    5398:	4b08      	ldr	r3, [pc, #32]	; (53bc <_ext_irq_handler+0x110>)
    539a:	4798      	blx	r3
    539c:	4603      	mov	r3, r0
    539e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    53a0:	683b      	ldr	r3, [r7, #0]
    53a2:	4619      	mov	r1, r3
    53a4:	4804      	ldr	r0, [pc, #16]	; (53b8 <_ext_irq_handler+0x10c>)
    53a6:	4b06      	ldr	r3, [pc, #24]	; (53c0 <_ext_irq_handler+0x114>)
    53a8:	4798      	blx	r3
	while (flags) {
    53aa:	683b      	ldr	r3, [r7, #0]
    53ac:	2b00      	cmp	r3, #0
    53ae:	d19b      	bne.n	52e8 <_ext_irq_handler+0x3c>
	}
}
    53b0:	bf00      	nop
    53b2:	3710      	adds	r7, #16
    53b4:	46bd      	mov	sp, r7
    53b6:	bd80      	pop	{r7, pc}
    53b8:	40002800 	.word	0x40002800
    53bc:	00004e61 	.word	0x00004e61
    53c0:	00004e79 	.word	0x00004e79
    53c4:	20000cd0 	.word	0x20000cd0
    53c8:	00013f94 	.word	0x00013f94
    53cc:	000040dd 	.word	0x000040dd
    53d0:	000139b9 	.word	0x000139b9
    53d4:	00013f4c 	.word	0x00013f4c

000053d8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    53d8:	b580      	push	{r7, lr}
    53da:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    53dc:	4b01      	ldr	r3, [pc, #4]	; (53e4 <EIC_0_Handler+0xc>)
    53de:	4798      	blx	r3
} /**
    53e0:	bf00      	nop
    53e2:	bd80      	pop	{r7, pc}
    53e4:	000052ad 	.word	0x000052ad

000053e8 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    53e8:	b580      	push	{r7, lr}
    53ea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    53ec:	4b01      	ldr	r3, [pc, #4]	; (53f4 <EIC_1_Handler+0xc>)
    53ee:	4798      	blx	r3
} /**
    53f0:	bf00      	nop
    53f2:	bd80      	pop	{r7, pc}
    53f4:	000052ad 	.word	0x000052ad

000053f8 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    53f8:	b580      	push	{r7, lr}
    53fa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    53fc:	4b01      	ldr	r3, [pc, #4]	; (5404 <EIC_3_Handler+0xc>)
    53fe:	4798      	blx	r3
} /**
    5400:	bf00      	nop
    5402:	bd80      	pop	{r7, pc}
    5404:	000052ad 	.word	0x000052ad

00005408 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5408:	b580      	push	{r7, lr}
    540a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    540c:	4b01      	ldr	r3, [pc, #4]	; (5414 <EIC_4_Handler+0xc>)
    540e:	4798      	blx	r3
} /**
    5410:	bf00      	nop
    5412:	bd80      	pop	{r7, pc}
    5414:	000052ad 	.word	0x000052ad

00005418 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5418:	b580      	push	{r7, lr}
    541a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    541c:	4b01      	ldr	r3, [pc, #4]	; (5424 <EIC_5_Handler+0xc>)
    541e:	4798      	blx	r3
} /**
    5420:	bf00      	nop
    5422:	bd80      	pop	{r7, pc}
    5424:	000052ad 	.word	0x000052ad

00005428 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5428:	b580      	push	{r7, lr}
    542a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    542c:	4b01      	ldr	r3, [pc, #4]	; (5434 <EIC_6_Handler+0xc>)
    542e:	4798      	blx	r3
} /**
    5430:	bf00      	nop
    5432:	bd80      	pop	{r7, pc}
    5434:	000052ad 	.word	0x000052ad

00005438 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    5438:	b580      	push	{r7, lr}
    543a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    543c:	4b01      	ldr	r3, [pc, #4]	; (5444 <EIC_7_Handler+0xc>)
    543e:	4798      	blx	r3
} /**
    5440:	bf00      	nop
    5442:	bd80      	pop	{r7, pc}
    5444:	000052ad 	.word	0x000052ad

00005448 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    5448:	b580      	push	{r7, lr}
    544a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    544c:	4b01      	ldr	r3, [pc, #4]	; (5454 <EIC_8_Handler+0xc>)
    544e:	4798      	blx	r3
} /**
    5450:	bf00      	nop
    5452:	bd80      	pop	{r7, pc}
    5454:	000052ad 	.word	0x000052ad

00005458 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    5458:	b580      	push	{r7, lr}
    545a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    545c:	4b01      	ldr	r3, [pc, #4]	; (5464 <EIC_9_Handler+0xc>)
    545e:	4798      	blx	r3
}
    5460:	bf00      	nop
    5462:	bd80      	pop	{r7, pc}
    5464:	000052ad 	.word	0x000052ad

00005468 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    5468:	b480      	push	{r7}
    546a:	b085      	sub	sp, #20
    546c:	af00      	add	r7, sp, #0
    546e:	60f8      	str	r0, [r7, #12]
    5470:	460b      	mov	r3, r1
    5472:	607a      	str	r2, [r7, #4]
    5474:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    5476:	7afa      	ldrb	r2, [r7, #11]
    5478:	68fb      	ldr	r3, [r7, #12]
    547a:	3248      	adds	r2, #72	; 0x48
    547c:	6879      	ldr	r1, [r7, #4]
    547e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5482:	bf00      	nop
    5484:	3714      	adds	r7, #20
    5486:	46bd      	mov	sp, r7
    5488:	f85d 7b04 	ldr.w	r7, [sp], #4
    548c:	4770      	bx	lr

0000548e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    548e:	b480      	push	{r7}
    5490:	b083      	sub	sp, #12
    5492:	af00      	add	r7, sp, #0
    5494:	6078      	str	r0, [r7, #4]
    5496:	460b      	mov	r3, r1
    5498:	70fb      	strb	r3, [r7, #3]
    549a:	4613      	mov	r3, r2
    549c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    549e:	78fb      	ldrb	r3, [r7, #3]
    54a0:	687a      	ldr	r2, [r7, #4]
    54a2:	3304      	adds	r3, #4
    54a4:	00db      	lsls	r3, r3, #3
    54a6:	4413      	add	r3, r2
    54a8:	78ba      	ldrb	r2, [r7, #2]
    54aa:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    54ac:	78fb      	ldrb	r3, [r7, #3]
    54ae:	78ba      	ldrb	r2, [r7, #2]
    54b0:	43d2      	mvns	r2, r2
    54b2:	b2d1      	uxtb	r1, r2
    54b4:	687a      	ldr	r2, [r7, #4]
    54b6:	3304      	adds	r3, #4
    54b8:	00db      	lsls	r3, r3, #3
    54ba:	4413      	add	r3, r2
    54bc:	460a      	mov	r2, r1
    54be:	711a      	strb	r2, [r3, #4]
}
    54c0:	bf00      	nop
    54c2:	370c      	adds	r7, #12
    54c4:	46bd      	mov	sp, r7
    54c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ca:	4770      	bx	lr

000054cc <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    54cc:	b480      	push	{r7}
    54ce:	b085      	sub	sp, #20
    54d0:	af00      	add	r7, sp, #0
    54d2:	60f8      	str	r0, [r7, #12]
    54d4:	460b      	mov	r3, r1
    54d6:	607a      	str	r2, [r7, #4]
    54d8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    54da:	7afa      	ldrb	r2, [r7, #11]
    54dc:	68fb      	ldr	r3, [r7, #12]
    54de:	3204      	adds	r2, #4
    54e0:	6879      	ldr	r1, [r7, #4]
    54e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    54e6:	bf00      	nop
    54e8:	3714      	adds	r7, #20
    54ea:	46bd      	mov	sp, r7
    54ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    54f0:	4770      	bx	lr
	...

000054f4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    54f4:	b580      	push	{r7, lr}
    54f6:	b082      	sub	sp, #8
    54f8:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    54fa:	2300      	movs	r3, #0
    54fc:	71fb      	strb	r3, [r7, #7]
    54fe:	e00b      	b.n	5518 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5500:	79fb      	ldrb	r3, [r7, #7]
    5502:	4a18      	ldr	r2, [pc, #96]	; (5564 <_event_system_init+0x70>)
    5504:	5cd3      	ldrb	r3, [r2, r3]
    5506:	461a      	mov	r2, r3
    5508:	79fb      	ldrb	r3, [r7, #7]
    550a:	4619      	mov	r1, r3
    550c:	4816      	ldr	r0, [pc, #88]	; (5568 <_event_system_init+0x74>)
    550e:	4b17      	ldr	r3, [pc, #92]	; (556c <_event_system_init+0x78>)
    5510:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    5512:	79fb      	ldrb	r3, [r7, #7]
    5514:	3301      	adds	r3, #1
    5516:	71fb      	strb	r3, [r7, #7]
    5518:	79fb      	ldrb	r3, [r7, #7]
    551a:	2b42      	cmp	r3, #66	; 0x42
    551c:	d9f0      	bls.n	5500 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    551e:	2300      	movs	r3, #0
    5520:	71fb      	strb	r3, [r7, #7]
    5522:	e016      	b.n	5552 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5524:	79fb      	ldrb	r3, [r7, #7]
    5526:	4a12      	ldr	r2, [pc, #72]	; (5570 <_event_system_init+0x7c>)
    5528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    552c:	461a      	mov	r2, r3
    552e:	79fb      	ldrb	r3, [r7, #7]
    5530:	4619      	mov	r1, r3
    5532:	480d      	ldr	r0, [pc, #52]	; (5568 <_event_system_init+0x74>)
    5534:	4b0f      	ldr	r3, [pc, #60]	; (5574 <_event_system_init+0x80>)
    5536:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5538:	79fb      	ldrb	r3, [r7, #7]
    553a:	4a0f      	ldr	r2, [pc, #60]	; (5578 <_event_system_init+0x84>)
    553c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5540:	b2da      	uxtb	r2, r3
    5542:	79fb      	ldrb	r3, [r7, #7]
    5544:	4619      	mov	r1, r3
    5546:	4808      	ldr	r0, [pc, #32]	; (5568 <_event_system_init+0x74>)
    5548:	4b0c      	ldr	r3, [pc, #48]	; (557c <_event_system_init+0x88>)
    554a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    554c:	79fb      	ldrb	r3, [r7, #7]
    554e:	3301      	adds	r3, #1
    5550:	71fb      	strb	r3, [r7, #7]
    5552:	79fb      	ldrb	r3, [r7, #7]
    5554:	2b1f      	cmp	r3, #31
    5556:	d9e5      	bls.n	5524 <_event_system_init+0x30>
	}

	return ERR_NONE;
    5558:	2300      	movs	r3, #0
}
    555a:	4618      	mov	r0, r3
    555c:	3708      	adds	r7, #8
    555e:	46bd      	mov	sp, r7
    5560:	bd80      	pop	{r7, pc}
    5562:	bf00      	nop
    5564:	00013fac 	.word	0x00013fac
    5568:	4100e000 	.word	0x4100e000
    556c:	00005469 	.word	0x00005469
    5570:	00013ff0 	.word	0x00013ff0
    5574:	000054cd 	.word	0x000054cd
    5578:	00014030 	.word	0x00014030
    557c:	0000548f 	.word	0x0000548f

00005580 <hri_gclk_wait_for_sync>:
{
    5580:	b480      	push	{r7}
    5582:	b083      	sub	sp, #12
    5584:	af00      	add	r7, sp, #0
    5586:	6078      	str	r0, [r7, #4]
    5588:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    558a:	bf00      	nop
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	685a      	ldr	r2, [r3, #4]
    5590:	683b      	ldr	r3, [r7, #0]
    5592:	4013      	ands	r3, r2
    5594:	2b00      	cmp	r3, #0
    5596:	d1f9      	bne.n	558c <hri_gclk_wait_for_sync+0xc>
}
    5598:	bf00      	nop
    559a:	370c      	adds	r7, #12
    559c:	46bd      	mov	sp, r7
    559e:	f85d 7b04 	ldr.w	r7, [sp], #4
    55a2:	4770      	bx	lr

000055a4 <hri_gclk_write_GENCTRL_reg>:
{
    55a4:	b580      	push	{r7, lr}
    55a6:	b084      	sub	sp, #16
    55a8:	af00      	add	r7, sp, #0
    55aa:	60f8      	str	r0, [r7, #12]
    55ac:	460b      	mov	r3, r1
    55ae:	607a      	str	r2, [r7, #4]
    55b0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    55b2:	7afa      	ldrb	r2, [r7, #11]
    55b4:	68fb      	ldr	r3, [r7, #12]
    55b6:	3208      	adds	r2, #8
    55b8:	6879      	ldr	r1, [r7, #4]
    55ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    55be:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    55c2:	68f8      	ldr	r0, [r7, #12]
    55c4:	4b02      	ldr	r3, [pc, #8]	; (55d0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    55c6:	4798      	blx	r3
}
    55c8:	bf00      	nop
    55ca:	3710      	adds	r7, #16
    55cc:	46bd      	mov	sp, r7
    55ce:	bd80      	pop	{r7, pc}
    55d0:	00005581 	.word	0x00005581

000055d4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    55d4:	b580      	push	{r7, lr}
    55d6:	b082      	sub	sp, #8
    55d8:	af00      	add	r7, sp, #0
    55da:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	f003 0301 	and.w	r3, r3, #1
    55e2:	2b00      	cmp	r3, #0
    55e4:	d004      	beq.n	55f0 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    55e6:	4a3b      	ldr	r2, [pc, #236]	; (56d4 <_gclk_init_generators_by_fref+0x100>)
    55e8:	2100      	movs	r1, #0
    55ea:	483b      	ldr	r0, [pc, #236]	; (56d8 <_gclk_init_generators_by_fref+0x104>)
    55ec:	4b3b      	ldr	r3, [pc, #236]	; (56dc <_gclk_init_generators_by_fref+0x108>)
    55ee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    55f0:	687b      	ldr	r3, [r7, #4]
    55f2:	f003 0302 	and.w	r3, r3, #2
    55f6:	2b00      	cmp	r3, #0
    55f8:	d004      	beq.n	5604 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    55fa:	4a39      	ldr	r2, [pc, #228]	; (56e0 <_gclk_init_generators_by_fref+0x10c>)
    55fc:	2101      	movs	r1, #1
    55fe:	4836      	ldr	r0, [pc, #216]	; (56d8 <_gclk_init_generators_by_fref+0x104>)
    5600:	4b36      	ldr	r3, [pc, #216]	; (56dc <_gclk_init_generators_by_fref+0x108>)
    5602:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	f003 0304 	and.w	r3, r3, #4
    560a:	2b00      	cmp	r3, #0
    560c:	d004      	beq.n	5618 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    560e:	4a35      	ldr	r2, [pc, #212]	; (56e4 <_gclk_init_generators_by_fref+0x110>)
    5610:	2102      	movs	r1, #2
    5612:	4831      	ldr	r0, [pc, #196]	; (56d8 <_gclk_init_generators_by_fref+0x104>)
    5614:	4b31      	ldr	r3, [pc, #196]	; (56dc <_gclk_init_generators_by_fref+0x108>)
    5616:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	f003 0308 	and.w	r3, r3, #8
    561e:	2b00      	cmp	r3, #0
    5620:	d004      	beq.n	562c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    5622:	4a31      	ldr	r2, [pc, #196]	; (56e8 <_gclk_init_generators_by_fref+0x114>)
    5624:	2103      	movs	r1, #3
    5626:	482c      	ldr	r0, [pc, #176]	; (56d8 <_gclk_init_generators_by_fref+0x104>)
    5628:	4b2c      	ldr	r3, [pc, #176]	; (56dc <_gclk_init_generators_by_fref+0x108>)
    562a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    562c:	687b      	ldr	r3, [r7, #4]
    562e:	f003 0310 	and.w	r3, r3, #16
    5632:	2b00      	cmp	r3, #0
    5634:	d004      	beq.n	5640 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    5636:	4a2d      	ldr	r2, [pc, #180]	; (56ec <_gclk_init_generators_by_fref+0x118>)
    5638:	2104      	movs	r1, #4
    563a:	4827      	ldr	r0, [pc, #156]	; (56d8 <_gclk_init_generators_by_fref+0x104>)
    563c:	4b27      	ldr	r3, [pc, #156]	; (56dc <_gclk_init_generators_by_fref+0x108>)
    563e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    5640:	687b      	ldr	r3, [r7, #4]
    5642:	f003 0320 	and.w	r3, r3, #32
    5646:	2b00      	cmp	r3, #0
    5648:	d004      	beq.n	5654 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    564a:	4a29      	ldr	r2, [pc, #164]	; (56f0 <_gclk_init_generators_by_fref+0x11c>)
    564c:	2105      	movs	r1, #5
    564e:	4822      	ldr	r0, [pc, #136]	; (56d8 <_gclk_init_generators_by_fref+0x104>)
    5650:	4b22      	ldr	r3, [pc, #136]	; (56dc <_gclk_init_generators_by_fref+0x108>)
    5652:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	f003 0340 	and.w	r3, r3, #64	; 0x40
    565a:	2b00      	cmp	r3, #0
    565c:	d004      	beq.n	5668 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    565e:	4a25      	ldr	r2, [pc, #148]	; (56f4 <_gclk_init_generators_by_fref+0x120>)
    5660:	2106      	movs	r1, #6
    5662:	481d      	ldr	r0, [pc, #116]	; (56d8 <_gclk_init_generators_by_fref+0x104>)
    5664:	4b1d      	ldr	r3, [pc, #116]	; (56dc <_gclk_init_generators_by_fref+0x108>)
    5666:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    5668:	687b      	ldr	r3, [r7, #4]
    566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    566e:	2b00      	cmp	r3, #0
    5670:	d004      	beq.n	567c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    5672:	4a21      	ldr	r2, [pc, #132]	; (56f8 <_gclk_init_generators_by_fref+0x124>)
    5674:	2107      	movs	r1, #7
    5676:	4818      	ldr	r0, [pc, #96]	; (56d8 <_gclk_init_generators_by_fref+0x104>)
    5678:	4b18      	ldr	r3, [pc, #96]	; (56dc <_gclk_init_generators_by_fref+0x108>)
    567a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    567c:	687b      	ldr	r3, [r7, #4]
    567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5682:	2b00      	cmp	r3, #0
    5684:	d004      	beq.n	5690 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    5686:	4a1d      	ldr	r2, [pc, #116]	; (56fc <_gclk_init_generators_by_fref+0x128>)
    5688:	2108      	movs	r1, #8
    568a:	4813      	ldr	r0, [pc, #76]	; (56d8 <_gclk_init_generators_by_fref+0x104>)
    568c:	4b13      	ldr	r3, [pc, #76]	; (56dc <_gclk_init_generators_by_fref+0x108>)
    568e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    5690:	687b      	ldr	r3, [r7, #4]
    5692:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5696:	2b00      	cmp	r3, #0
    5698:	d004      	beq.n	56a4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    569a:	4a19      	ldr	r2, [pc, #100]	; (5700 <_gclk_init_generators_by_fref+0x12c>)
    569c:	2109      	movs	r1, #9
    569e:	480e      	ldr	r0, [pc, #56]	; (56d8 <_gclk_init_generators_by_fref+0x104>)
    56a0:	4b0e      	ldr	r3, [pc, #56]	; (56dc <_gclk_init_generators_by_fref+0x108>)
    56a2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    56a4:	687b      	ldr	r3, [r7, #4]
    56a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    56aa:	2b00      	cmp	r3, #0
    56ac:	d004      	beq.n	56b8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    56ae:	4a15      	ldr	r2, [pc, #84]	; (5704 <_gclk_init_generators_by_fref+0x130>)
    56b0:	210a      	movs	r1, #10
    56b2:	4809      	ldr	r0, [pc, #36]	; (56d8 <_gclk_init_generators_by_fref+0x104>)
    56b4:	4b09      	ldr	r3, [pc, #36]	; (56dc <_gclk_init_generators_by_fref+0x108>)
    56b6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    56b8:	687b      	ldr	r3, [r7, #4]
    56ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    56be:	2b00      	cmp	r3, #0
    56c0:	d004      	beq.n	56cc <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    56c2:	4a11      	ldr	r2, [pc, #68]	; (5708 <_gclk_init_generators_by_fref+0x134>)
    56c4:	210b      	movs	r1, #11
    56c6:	4804      	ldr	r0, [pc, #16]	; (56d8 <_gclk_init_generators_by_fref+0x104>)
    56c8:	4b04      	ldr	r3, [pc, #16]	; (56dc <_gclk_init_generators_by_fref+0x108>)
    56ca:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    56cc:	bf00      	nop
    56ce:	3708      	adds	r7, #8
    56d0:	46bd      	mov	sp, r7
    56d2:	bd80      	pop	{r7, pc}
    56d4:	00010107 	.word	0x00010107
    56d8:	40001c00 	.word	0x40001c00
    56dc:	000055a5 	.word	0x000055a5
    56e0:	00010907 	.word	0x00010907
    56e4:	00010906 	.word	0x00010906
    56e8:	00020908 	.word	0x00020908
    56ec:	00010901 	.word	0x00010901
    56f0:	00062901 	.word	0x00062901
    56f4:	000c2901 	.word	0x000c2901
    56f8:	00082908 	.word	0x00082908
    56fc:	00032901 	.word	0x00032901
    5700:	00011908 	.word	0x00011908
    5704:	00010905 	.word	0x00010905
    5708:	00041905 	.word	0x00041905

0000570c <hri_mclk_write_CPUDIV_reg>:
{
    570c:	b480      	push	{r7}
    570e:	b083      	sub	sp, #12
    5710:	af00      	add	r7, sp, #0
    5712:	6078      	str	r0, [r7, #4]
    5714:	460b      	mov	r3, r1
    5716:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5718:	687b      	ldr	r3, [r7, #4]
    571a:	78fa      	ldrb	r2, [r7, #3]
    571c:	715a      	strb	r2, [r3, #5]
}
    571e:	bf00      	nop
    5720:	370c      	adds	r7, #12
    5722:	46bd      	mov	sp, r7
    5724:	f85d 7b04 	ldr.w	r7, [sp], #4
    5728:	4770      	bx	lr
	...

0000572c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    572c:	b580      	push	{r7, lr}
    572e:	b082      	sub	sp, #8
    5730:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    5732:	4b05      	ldr	r3, [pc, #20]	; (5748 <_mclk_init+0x1c>)
    5734:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    5736:	2101      	movs	r1, #1
    5738:	6878      	ldr	r0, [r7, #4]
    573a:	4b04      	ldr	r3, [pc, #16]	; (574c <_mclk_init+0x20>)
    573c:	4798      	blx	r3
}
    573e:	bf00      	nop
    5740:	3708      	adds	r7, #8
    5742:	46bd      	mov	sp, r7
    5744:	bd80      	pop	{r7, pc}
    5746:	bf00      	nop
    5748:	40000800 	.word	0x40000800
    574c:	0000570d 	.word	0x0000570d

00005750 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    5750:	b480      	push	{r7}
    5752:	b083      	sub	sp, #12
    5754:	af00      	add	r7, sp, #0
    5756:	6078      	str	r0, [r7, #4]
    5758:	460b      	mov	r3, r1
    575a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    575c:	687b      	ldr	r3, [r7, #4]
    575e:	78fa      	ldrb	r2, [r7, #3]
    5760:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5762:	bf00      	nop
    5764:	370c      	adds	r7, #12
    5766:	46bd      	mov	sp, r7
    5768:	f85d 7b04 	ldr.w	r7, [sp], #4
    576c:	4770      	bx	lr

0000576e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    576e:	b480      	push	{r7}
    5770:	b083      	sub	sp, #12
    5772:	af00      	add	r7, sp, #0
    5774:	6078      	str	r0, [r7, #4]
    5776:	460b      	mov	r3, r1
    5778:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    577a:	687b      	ldr	r3, [r7, #4]
    577c:	887a      	ldrh	r2, [r7, #2]
    577e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5780:	bf00      	nop
    5782:	370c      	adds	r7, #12
    5784:	46bd      	mov	sp, r7
    5786:	f85d 7b04 	ldr.w	r7, [sp], #4
    578a:	4770      	bx	lr

0000578c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    578c:	b480      	push	{r7}
    578e:	b083      	sub	sp, #12
    5790:	af00      	add	r7, sp, #0
    5792:	6078      	str	r0, [r7, #4]
    5794:	460b      	mov	r3, r1
    5796:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5798:	687b      	ldr	r3, [r7, #4]
    579a:	78fa      	ldrb	r2, [r7, #3]
    579c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    579e:	bf00      	nop
    57a0:	370c      	adds	r7, #12
    57a2:	46bd      	mov	sp, r7
    57a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    57a8:	4770      	bx	lr

000057aa <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    57aa:	b480      	push	{r7}
    57ac:	b083      	sub	sp, #12
    57ae:	af00      	add	r7, sp, #0
    57b0:	6078      	str	r0, [r7, #4]
    57b2:	460b      	mov	r3, r1
    57b4:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    57b6:	687b      	ldr	r3, [r7, #4]
    57b8:	78fa      	ldrb	r2, [r7, #3]
    57ba:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    57bc:	bf00      	nop
    57be:	370c      	adds	r7, #12
    57c0:	46bd      	mov	sp, r7
    57c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57c6:	4770      	bx	lr

000057c8 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    57c8:	b480      	push	{r7}
    57ca:	b085      	sub	sp, #20
    57cc:	af00      	add	r7, sp, #0
    57ce:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    57d0:	687b      	ldr	r3, [r7, #4]
    57d2:	69db      	ldr	r3, [r3, #28]
    57d4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    57d6:	68fb      	ldr	r3, [r7, #12]
    57d8:	0a1b      	lsrs	r3, r3, #8
    57da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    57de:	60fb      	str	r3, [r7, #12]
	return tmp;
    57e0:	68fb      	ldr	r3, [r7, #12]
}
    57e2:	4618      	mov	r0, r3
    57e4:	3714      	adds	r7, #20
    57e6:	46bd      	mov	sp, r7
    57e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ec:	4770      	bx	lr

000057ee <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    57ee:	b480      	push	{r7}
    57f0:	b083      	sub	sp, #12
    57f2:	af00      	add	r7, sp, #0
    57f4:	6078      	str	r0, [r7, #4]
    57f6:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    57f8:	687b      	ldr	r3, [r7, #4]
    57fa:	683a      	ldr	r2, [r7, #0]
    57fc:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    57fe:	bf00      	nop
    5800:	370c      	adds	r7, #12
    5802:	46bd      	mov	sp, r7
    5804:	f85d 7b04 	ldr.w	r7, [sp], #4
    5808:	4770      	bx	lr
	...

0000580c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    580c:	b580      	push	{r7, lr}
    580e:	b082      	sub	sp, #8
    5810:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    5812:	4b13      	ldr	r3, [pc, #76]	; (5860 <_osc32kctrl_init_sources+0x54>)
    5814:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    5816:	2300      	movs	r3, #0
    5818:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    581a:	f242 018e 	movw	r1, #8334	; 0x208e
    581e:	6878      	ldr	r0, [r7, #4]
    5820:	4b10      	ldr	r3, [pc, #64]	; (5864 <_osc32kctrl_init_sources+0x58>)
    5822:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    5824:	2100      	movs	r1, #0
    5826:	6878      	ldr	r0, [r7, #4]
    5828:	4b0f      	ldr	r3, [pc, #60]	; (5868 <_osc32kctrl_init_sources+0x5c>)
    582a:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    582c:	2100      	movs	r1, #0
    582e:	6878      	ldr	r0, [r7, #4]
    5830:	4b0e      	ldr	r3, [pc, #56]	; (586c <_osc32kctrl_init_sources+0x60>)
    5832:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    5834:	6878      	ldr	r0, [r7, #4]
    5836:	4b0e      	ldr	r3, [pc, #56]	; (5870 <_osc32kctrl_init_sources+0x64>)
    5838:	4798      	blx	r3
    583a:	4603      	mov	r3, r0
    583c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    583e:	887b      	ldrh	r3, [r7, #2]
    5840:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    5842:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    5846:	4619      	mov	r1, r3
    5848:	6878      	ldr	r0, [r7, #4]
    584a:	4b0a      	ldr	r3, [pc, #40]	; (5874 <_osc32kctrl_init_sources+0x68>)
    584c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    584e:	2100      	movs	r1, #0
    5850:	6878      	ldr	r0, [r7, #4]
    5852:	4b09      	ldr	r3, [pc, #36]	; (5878 <_osc32kctrl_init_sources+0x6c>)
    5854:	4798      	blx	r3
	(void)calib;
}
    5856:	bf00      	nop
    5858:	3708      	adds	r7, #8
    585a:	46bd      	mov	sp, r7
    585c:	bd80      	pop	{r7, pc}
    585e:	bf00      	nop
    5860:	40001400 	.word	0x40001400
    5864:	0000576f 	.word	0x0000576f
    5868:	0000578d 	.word	0x0000578d
    586c:	000057ab 	.word	0x000057ab
    5870:	000057c9 	.word	0x000057c9
    5874:	000057ef 	.word	0x000057ef
    5878:	00005751 	.word	0x00005751

0000587c <hri_gclk_wait_for_sync>:
{
    587c:	b480      	push	{r7}
    587e:	b083      	sub	sp, #12
    5880:	af00      	add	r7, sp, #0
    5882:	6078      	str	r0, [r7, #4]
    5884:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5886:	bf00      	nop
    5888:	687b      	ldr	r3, [r7, #4]
    588a:	685a      	ldr	r2, [r3, #4]
    588c:	683b      	ldr	r3, [r7, #0]
    588e:	4013      	ands	r3, r2
    5890:	2b00      	cmp	r3, #0
    5892:	d1f9      	bne.n	5888 <hri_gclk_wait_for_sync+0xc>
}
    5894:	bf00      	nop
    5896:	370c      	adds	r7, #12
    5898:	46bd      	mov	sp, r7
    589a:	f85d 7b04 	ldr.w	r7, [sp], #4
    589e:	4770      	bx	lr

000058a0 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    58a0:	b480      	push	{r7}
    58a2:	b083      	sub	sp, #12
    58a4:	af00      	add	r7, sp, #0
    58a6:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    58a8:	687b      	ldr	r3, [r7, #4]
    58aa:	685b      	ldr	r3, [r3, #4]
    58ac:	089b      	lsrs	r3, r3, #2
    58ae:	f003 0301 	and.w	r3, r3, #1
    58b2:	2b00      	cmp	r3, #0
    58b4:	bf14      	ite	ne
    58b6:	2301      	movne	r3, #1
    58b8:	2300      	moveq	r3, #0
    58ba:	b2db      	uxtb	r3, r3
}
    58bc:	4618      	mov	r0, r3
    58be:	370c      	adds	r7, #12
    58c0:	46bd      	mov	sp, r7
    58c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    58c6:	4770      	bx	lr

000058c8 <hri_gclk_read_SYNCBUSY_reg>:
{
    58c8:	b480      	push	{r7}
    58ca:	b083      	sub	sp, #12
    58cc:	af00      	add	r7, sp, #0
    58ce:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	685b      	ldr	r3, [r3, #4]
}
    58d4:	4618      	mov	r0, r3
    58d6:	370c      	adds	r7, #12
    58d8:	46bd      	mov	sp, r7
    58da:	f85d 7b04 	ldr.w	r7, [sp], #4
    58de:	4770      	bx	lr

000058e0 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    58e0:	b580      	push	{r7, lr}
    58e2:	b086      	sub	sp, #24
    58e4:	af00      	add	r7, sp, #0
    58e6:	60f8      	str	r0, [r7, #12]
    58e8:	460b      	mov	r3, r1
    58ea:	607a      	str	r2, [r7, #4]
    58ec:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    58ee:	7afa      	ldrb	r2, [r7, #11]
    58f0:	68fb      	ldr	r3, [r7, #12]
    58f2:	3208      	adds	r2, #8
    58f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    58f8:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    58fa:	697b      	ldr	r3, [r7, #20]
    58fc:	f023 030f 	bic.w	r3, r3, #15
    5900:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    5902:	687b      	ldr	r3, [r7, #4]
    5904:	f003 030f 	and.w	r3, r3, #15
    5908:	697a      	ldr	r2, [r7, #20]
    590a:	4313      	orrs	r3, r2
    590c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    590e:	7afa      	ldrb	r2, [r7, #11]
    5910:	68fb      	ldr	r3, [r7, #12]
    5912:	3208      	adds	r2, #8
    5914:	6979      	ldr	r1, [r7, #20]
    5916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    591a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    591e:	68f8      	ldr	r0, [r7, #12]
    5920:	4b02      	ldr	r3, [pc, #8]	; (592c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    5922:	4798      	blx	r3
}
    5924:	bf00      	nop
    5926:	3718      	adds	r7, #24
    5928:	46bd      	mov	sp, r7
    592a:	bd80      	pop	{r7, pc}
    592c:	0000587d 	.word	0x0000587d

00005930 <hri_gclk_write_PCHCTRL_reg>:
{
    5930:	b480      	push	{r7}
    5932:	b085      	sub	sp, #20
    5934:	af00      	add	r7, sp, #0
    5936:	60f8      	str	r0, [r7, #12]
    5938:	460b      	mov	r3, r1
    593a:	607a      	str	r2, [r7, #4]
    593c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    593e:	7afa      	ldrb	r2, [r7, #11]
    5940:	68fb      	ldr	r3, [r7, #12]
    5942:	3220      	adds	r2, #32
    5944:	6879      	ldr	r1, [r7, #4]
    5946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    594a:	bf00      	nop
    594c:	3714      	adds	r7, #20
    594e:	46bd      	mov	sp, r7
    5950:	f85d 7b04 	ldr.w	r7, [sp], #4
    5954:	4770      	bx	lr

00005956 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    5956:	b480      	push	{r7}
    5958:	b085      	sub	sp, #20
    595a:	af00      	add	r7, sp, #0
    595c:	60f8      	str	r0, [r7, #12]
    595e:	460b      	mov	r3, r1
    5960:	607a      	str	r2, [r7, #4]
    5962:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5964:	bf00      	nop
    5966:	7afa      	ldrb	r2, [r7, #11]
    5968:	68f9      	ldr	r1, [r7, #12]
    596a:	4613      	mov	r3, r2
    596c:	009b      	lsls	r3, r3, #2
    596e:	4413      	add	r3, r2
    5970:	009b      	lsls	r3, r3, #2
    5972:	440b      	add	r3, r1
    5974:	333c      	adds	r3, #60	; 0x3c
    5976:	681a      	ldr	r2, [r3, #0]
    5978:	687b      	ldr	r3, [r7, #4]
    597a:	4013      	ands	r3, r2
    597c:	2b00      	cmp	r3, #0
    597e:	d1f2      	bne.n	5966 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5980:	bf00      	nop
    5982:	3714      	adds	r7, #20
    5984:	46bd      	mov	sp, r7
    5986:	f85d 7b04 	ldr.w	r7, [sp], #4
    598a:	4770      	bx	lr

0000598c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    598c:	b480      	push	{r7}
    598e:	b083      	sub	sp, #12
    5990:	af00      	add	r7, sp, #0
    5992:	6078      	str	r0, [r7, #4]
    5994:	460b      	mov	r3, r1
    5996:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5998:	78fa      	ldrb	r2, [r7, #3]
    599a:	6879      	ldr	r1, [r7, #4]
    599c:	4613      	mov	r3, r2
    599e:	009b      	lsls	r3, r3, #2
    59a0:	4413      	add	r3, r2
    59a2:	009b      	lsls	r3, r3, #2
    59a4:	440b      	add	r3, r1
    59a6:	3340      	adds	r3, #64	; 0x40
    59a8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    59aa:	f003 0301 	and.w	r3, r3, #1
    59ae:	2b00      	cmp	r3, #0
    59b0:	bf14      	ite	ne
    59b2:	2301      	movne	r3, #1
    59b4:	2300      	moveq	r3, #0
    59b6:	b2db      	uxtb	r3, r3
}
    59b8:	4618      	mov	r0, r3
    59ba:	370c      	adds	r7, #12
    59bc:	46bd      	mov	sp, r7
    59be:	f85d 7b04 	ldr.w	r7, [sp], #4
    59c2:	4770      	bx	lr

000059c4 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    59c4:	b480      	push	{r7}
    59c6:	b083      	sub	sp, #12
    59c8:	af00      	add	r7, sp, #0
    59ca:	6078      	str	r0, [r7, #4]
    59cc:	460b      	mov	r3, r1
    59ce:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    59d0:	78fa      	ldrb	r2, [r7, #3]
    59d2:	6879      	ldr	r1, [r7, #4]
    59d4:	4613      	mov	r3, r2
    59d6:	009b      	lsls	r3, r3, #2
    59d8:	4413      	add	r3, r2
    59da:	009b      	lsls	r3, r3, #2
    59dc:	440b      	add	r3, r1
    59de:	3340      	adds	r3, #64	; 0x40
    59e0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    59e2:	085b      	lsrs	r3, r3, #1
    59e4:	f003 0301 	and.w	r3, r3, #1
    59e8:	2b00      	cmp	r3, #0
    59ea:	bf14      	ite	ne
    59ec:	2301      	movne	r3, #1
    59ee:	2300      	moveq	r3, #0
    59f0:	b2db      	uxtb	r3, r3
}
    59f2:	4618      	mov	r0, r3
    59f4:	370c      	adds	r7, #12
    59f6:	46bd      	mov	sp, r7
    59f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    59fc:	4770      	bx	lr
	...

00005a00 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5a00:	b580      	push	{r7, lr}
    5a02:	b082      	sub	sp, #8
    5a04:	af00      	add	r7, sp, #0
    5a06:	6078      	str	r0, [r7, #4]
    5a08:	460b      	mov	r3, r1
    5a0a:	70fb      	strb	r3, [r7, #3]
    5a0c:	4613      	mov	r3, r2
    5a0e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5a10:	78fa      	ldrb	r2, [r7, #3]
    5a12:	6879      	ldr	r1, [r7, #4]
    5a14:	4613      	mov	r3, r2
    5a16:	009b      	lsls	r3, r3, #2
    5a18:	4413      	add	r3, r2
    5a1a:	009b      	lsls	r3, r3, #2
    5a1c:	440b      	add	r3, r1
    5a1e:	3330      	adds	r3, #48	; 0x30
    5a20:	78ba      	ldrb	r2, [r7, #2]
    5a22:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    5a24:	78fb      	ldrb	r3, [r7, #3]
    5a26:	2202      	movs	r2, #2
    5a28:	4619      	mov	r1, r3
    5a2a:	6878      	ldr	r0, [r7, #4]
    5a2c:	4b02      	ldr	r3, [pc, #8]	; (5a38 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5a2e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5a30:	bf00      	nop
    5a32:	3708      	adds	r7, #8
    5a34:	46bd      	mov	sp, r7
    5a36:	bd80      	pop	{r7, pc}
    5a38:	00005957 	.word	0x00005957

00005a3c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5a3c:	b580      	push	{r7, lr}
    5a3e:	b084      	sub	sp, #16
    5a40:	af00      	add	r7, sp, #0
    5a42:	60f8      	str	r0, [r7, #12]
    5a44:	460b      	mov	r3, r1
    5a46:	607a      	str	r2, [r7, #4]
    5a48:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5a4a:	7afa      	ldrb	r2, [r7, #11]
    5a4c:	68f9      	ldr	r1, [r7, #12]
    5a4e:	4613      	mov	r3, r2
    5a50:	009b      	lsls	r3, r3, #2
    5a52:	4413      	add	r3, r2
    5a54:	009b      	lsls	r3, r3, #2
    5a56:	440b      	add	r3, r1
    5a58:	3334      	adds	r3, #52	; 0x34
    5a5a:	687a      	ldr	r2, [r7, #4]
    5a5c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5a5e:	7afb      	ldrb	r3, [r7, #11]
    5a60:	2206      	movs	r2, #6
    5a62:	4619      	mov	r1, r3
    5a64:	68f8      	ldr	r0, [r7, #12]
    5a66:	4b03      	ldr	r3, [pc, #12]	; (5a74 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5a68:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5a6a:	bf00      	nop
    5a6c:	3710      	adds	r7, #16
    5a6e:	46bd      	mov	sp, r7
    5a70:	bd80      	pop	{r7, pc}
    5a72:	bf00      	nop
    5a74:	00005957 	.word	0x00005957

00005a78 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5a78:	b480      	push	{r7}
    5a7a:	b085      	sub	sp, #20
    5a7c:	af00      	add	r7, sp, #0
    5a7e:	60f8      	str	r0, [r7, #12]
    5a80:	460b      	mov	r3, r1
    5a82:	607a      	str	r2, [r7, #4]
    5a84:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5a86:	7afa      	ldrb	r2, [r7, #11]
    5a88:	68f9      	ldr	r1, [r7, #12]
    5a8a:	4613      	mov	r3, r2
    5a8c:	009b      	lsls	r3, r3, #2
    5a8e:	4413      	add	r3, r2
    5a90:	009b      	lsls	r3, r3, #2
    5a92:	440b      	add	r3, r1
    5a94:	3338      	adds	r3, #56	; 0x38
    5a96:	687a      	ldr	r2, [r7, #4]
    5a98:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5a9a:	bf00      	nop
    5a9c:	3714      	adds	r7, #20
    5a9e:	46bd      	mov	sp, r7
    5aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aa4:	4770      	bx	lr

00005aa6 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5aa6:	b480      	push	{r7}
    5aa8:	b083      	sub	sp, #12
    5aaa:	af00      	add	r7, sp, #0
    5aac:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5aae:	687b      	ldr	r3, [r7, #4]
    5ab0:	691b      	ldr	r3, [r3, #16]
    5ab2:	085b      	lsrs	r3, r3, #1
    5ab4:	f003 0301 	and.w	r3, r3, #1
    5ab8:	2b00      	cmp	r3, #0
    5aba:	bf14      	ite	ne
    5abc:	2301      	movne	r3, #1
    5abe:	2300      	moveq	r3, #0
    5ac0:	b2db      	uxtb	r3, r3
}
    5ac2:	4618      	mov	r0, r3
    5ac4:	370c      	adds	r7, #12
    5ac6:	46bd      	mov	sp, r7
    5ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5acc:	4770      	bx	lr

00005ace <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5ace:	b480      	push	{r7}
    5ad0:	b083      	sub	sp, #12
    5ad2:	af00      	add	r7, sp, #0
    5ad4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5ad6:	687b      	ldr	r3, [r7, #4]
    5ad8:	691b      	ldr	r3, [r3, #16]
    5ada:	0a1b      	lsrs	r3, r3, #8
    5adc:	f003 0301 	and.w	r3, r3, #1
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	bf14      	ite	ne
    5ae4:	2301      	movne	r3, #1
    5ae6:	2300      	moveq	r3, #0
    5ae8:	b2db      	uxtb	r3, r3
}
    5aea:	4618      	mov	r0, r3
    5aec:	370c      	adds	r7, #12
    5aee:	46bd      	mov	sp, r7
    5af0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5af4:	4770      	bx	lr

00005af6 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5af6:	b480      	push	{r7}
    5af8:	b085      	sub	sp, #20
    5afa:	af00      	add	r7, sp, #0
    5afc:	6078      	str	r0, [r7, #4]
    5afe:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5b00:	687b      	ldr	r3, [r7, #4]
    5b02:	691b      	ldr	r3, [r3, #16]
    5b04:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5b06:	68fa      	ldr	r2, [r7, #12]
    5b08:	683b      	ldr	r3, [r7, #0]
    5b0a:	4013      	ands	r3, r2
    5b0c:	60fb      	str	r3, [r7, #12]
	return tmp;
    5b0e:	68fb      	ldr	r3, [r7, #12]
}
    5b10:	4618      	mov	r0, r3
    5b12:	3714      	adds	r7, #20
    5b14:	46bd      	mov	sp, r7
    5b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b1a:	4770      	bx	lr

00005b1c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5b1c:	b480      	push	{r7}
    5b1e:	b085      	sub	sp, #20
    5b20:	af00      	add	r7, sp, #0
    5b22:	60f8      	str	r0, [r7, #12]
    5b24:	460b      	mov	r3, r1
    5b26:	607a      	str	r2, [r7, #4]
    5b28:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5b2a:	7afb      	ldrb	r3, [r7, #11]
    5b2c:	68fa      	ldr	r2, [r7, #12]
    5b2e:	3304      	adds	r3, #4
    5b30:	009b      	lsls	r3, r3, #2
    5b32:	4413      	add	r3, r2
    5b34:	687a      	ldr	r2, [r7, #4]
    5b36:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5b38:	bf00      	nop
    5b3a:	3714      	adds	r7, #20
    5b3c:	46bd      	mov	sp, r7
    5b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b42:	4770      	bx	lr

00005b44 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    5b44:	b480      	push	{r7}
    5b46:	b083      	sub	sp, #12
    5b48:	af00      	add	r7, sp, #0
    5b4a:	6078      	str	r0, [r7, #4]
    5b4c:	460b      	mov	r3, r1
    5b4e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5b50:	687b      	ldr	r3, [r7, #4]
    5b52:	78fa      	ldrb	r2, [r7, #3]
    5b54:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5b56:	bf00      	nop
    5b58:	370c      	adds	r7, #12
    5b5a:	46bd      	mov	sp, r7
    5b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b60:	4770      	bx	lr

00005b62 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    5b62:	b480      	push	{r7}
    5b64:	b085      	sub	sp, #20
    5b66:	af00      	add	r7, sp, #0
    5b68:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5b6a:	687b      	ldr	r3, [r7, #4]
    5b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
    5b70:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5b72:	7bfb      	ldrb	r3, [r7, #15]
    5b74:	f003 0301 	and.w	r3, r3, #1
    5b78:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5b7a:	7bfb      	ldrb	r3, [r7, #15]
    5b7c:	2b00      	cmp	r3, #0
    5b7e:	bf14      	ite	ne
    5b80:	2301      	movne	r3, #1
    5b82:	2300      	moveq	r3, #0
    5b84:	b2db      	uxtb	r3, r3
}
    5b86:	4618      	mov	r0, r3
    5b88:	3714      	adds	r7, #20
    5b8a:	46bd      	mov	sp, r7
    5b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b90:	4770      	bx	lr

00005b92 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5b92:	b480      	push	{r7}
    5b94:	b083      	sub	sp, #12
    5b96:	af00      	add	r7, sp, #0
    5b98:	6078      	str	r0, [r7, #4]
    5b9a:	460b      	mov	r3, r1
    5b9c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5b9e:	687b      	ldr	r3, [r7, #4]
    5ba0:	78fa      	ldrb	r2, [r7, #3]
    5ba2:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5ba6:	bf00      	nop
    5ba8:	370c      	adds	r7, #12
    5baa:	46bd      	mov	sp, r7
    5bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb0:	4770      	bx	lr

00005bb2 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5bb2:	b480      	push	{r7}
    5bb4:	b083      	sub	sp, #12
    5bb6:	af00      	add	r7, sp, #0
    5bb8:	6078      	str	r0, [r7, #4]
    5bba:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5bbc:	687b      	ldr	r3, [r7, #4]
    5bbe:	683a      	ldr	r2, [r7, #0]
    5bc0:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5bc2:	bf00      	nop
    5bc4:	370c      	adds	r7, #12
    5bc6:	46bd      	mov	sp, r7
    5bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bcc:	4770      	bx	lr

00005bce <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5bce:	b480      	push	{r7}
    5bd0:	b083      	sub	sp, #12
    5bd2:	af00      	add	r7, sp, #0
    5bd4:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5bd6:	687b      	ldr	r3, [r7, #4]
    5bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5bda:	4618      	mov	r0, r3
    5bdc:	370c      	adds	r7, #12
    5bde:	46bd      	mov	sp, r7
    5be0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5be4:	4770      	bx	lr

00005be6 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5be6:	b480      	push	{r7}
    5be8:	b083      	sub	sp, #12
    5bea:	af00      	add	r7, sp, #0
    5bec:	6078      	str	r0, [r7, #4]
    5bee:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5bf0:	687b      	ldr	r3, [r7, #4]
    5bf2:	683a      	ldr	r2, [r7, #0]
    5bf4:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5bf6:	bf00      	nop
    5bf8:	370c      	adds	r7, #12
    5bfa:	46bd      	mov	sp, r7
    5bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c00:	4770      	bx	lr

00005c02 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5c02:	b480      	push	{r7}
    5c04:	b085      	sub	sp, #20
    5c06:	af00      	add	r7, sp, #0
    5c08:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5c0a:	687b      	ldr	r3, [r7, #4]
    5c0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5c10:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5c12:	7bfb      	ldrb	r3, [r7, #15]
    5c14:	085b      	lsrs	r3, r3, #1
    5c16:	b2db      	uxtb	r3, r3
    5c18:	f003 0301 	and.w	r3, r3, #1
    5c1c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5c1e:	7bfb      	ldrb	r3, [r7, #15]
    5c20:	2b00      	cmp	r3, #0
    5c22:	bf14      	ite	ne
    5c24:	2301      	movne	r3, #1
    5c26:	2300      	moveq	r3, #0
    5c28:	b2db      	uxtb	r3, r3
}
    5c2a:	4618      	mov	r0, r3
    5c2c:	3714      	adds	r7, #20
    5c2e:	46bd      	mov	sp, r7
    5c30:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c34:	4770      	bx	lr

00005c36 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    5c36:	b480      	push	{r7}
    5c38:	b085      	sub	sp, #20
    5c3a:	af00      	add	r7, sp, #0
    5c3c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5c3e:	687b      	ldr	r3, [r7, #4]
    5c40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5c44:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5c46:	7bfb      	ldrb	r3, [r7, #15]
    5c48:	089b      	lsrs	r3, r3, #2
    5c4a:	b2db      	uxtb	r3, r3
    5c4c:	f003 0301 	and.w	r3, r3, #1
    5c50:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5c52:	7bfb      	ldrb	r3, [r7, #15]
    5c54:	2b00      	cmp	r3, #0
    5c56:	bf14      	ite	ne
    5c58:	2301      	movne	r3, #1
    5c5a:	2300      	moveq	r3, #0
    5c5c:	b2db      	uxtb	r3, r3
}
    5c5e:	4618      	mov	r0, r3
    5c60:	3714      	adds	r7, #20
    5c62:	46bd      	mov	sp, r7
    5c64:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c68:	4770      	bx	lr

00005c6a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5c6a:	b480      	push	{r7}
    5c6c:	b085      	sub	sp, #20
    5c6e:	af00      	add	r7, sp, #0
    5c70:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5c72:	687b      	ldr	r3, [r7, #4]
    5c74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5c78:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5c7a:	7bfb      	ldrb	r3, [r7, #15]
    5c7c:	08db      	lsrs	r3, r3, #3
    5c7e:	b2db      	uxtb	r3, r3
    5c80:	f003 0301 	and.w	r3, r3, #1
    5c84:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5c86:	7bfb      	ldrb	r3, [r7, #15]
    5c88:	2b00      	cmp	r3, #0
    5c8a:	bf14      	ite	ne
    5c8c:	2301      	movne	r3, #1
    5c8e:	2300      	moveq	r3, #0
    5c90:	b2db      	uxtb	r3, r3
}
    5c92:	4618      	mov	r0, r3
    5c94:	3714      	adds	r7, #20
    5c96:	46bd      	mov	sp, r7
    5c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c9c:	4770      	bx	lr

00005c9e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5c9e:	b480      	push	{r7}
    5ca0:	b085      	sub	sp, #20
    5ca2:	af00      	add	r7, sp, #0
    5ca4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5ca6:	687b      	ldr	r3, [r7, #4]
    5ca8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5cac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5cae:	7bfb      	ldrb	r3, [r7, #15]
    5cb0:	091b      	lsrs	r3, r3, #4
    5cb2:	b2db      	uxtb	r3, r3
    5cb4:	f003 0301 	and.w	r3, r3, #1
    5cb8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5cba:	7bfb      	ldrb	r3, [r7, #15]
    5cbc:	2b00      	cmp	r3, #0
    5cbe:	bf14      	ite	ne
    5cc0:	2301      	movne	r3, #1
    5cc2:	2300      	moveq	r3, #0
    5cc4:	b2db      	uxtb	r3, r3
}
    5cc6:	4618      	mov	r0, r3
    5cc8:	3714      	adds	r7, #20
    5cca:	46bd      	mov	sp, r7
    5ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cd0:	4770      	bx	lr
	...

00005cd4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5cd4:	b580      	push	{r7, lr}
    5cd6:	b082      	sub	sp, #8
    5cd8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5cda:	4b0a      	ldr	r3, [pc, #40]	; (5d04 <_oscctrl_init_sources+0x30>)
    5cdc:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5cde:	4a0a      	ldr	r2, [pc, #40]	; (5d08 <_oscctrl_init_sources+0x34>)
    5ce0:	2101      	movs	r1, #1
    5ce2:	6878      	ldr	r0, [r7, #4]
    5ce4:	4b09      	ldr	r3, [pc, #36]	; (5d0c <_oscctrl_init_sources+0x38>)
    5ce6:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5ce8:	bf00      	nop
    5cea:	6878      	ldr	r0, [r7, #4]
    5cec:	4b08      	ldr	r3, [pc, #32]	; (5d10 <_oscctrl_init_sources+0x3c>)
    5cee:	4798      	blx	r3
    5cf0:	4603      	mov	r3, r0
    5cf2:	f083 0301 	eor.w	r3, r3, #1
    5cf6:	b2db      	uxtb	r3, r3
    5cf8:	2b00      	cmp	r3, #0
    5cfa:	d1f6      	bne.n	5cea <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5cfc:	bf00      	nop
    5cfe:	3708      	adds	r7, #8
    5d00:	46bd      	mov	sp, r7
    5d02:	bd80      	pop	{r7, pc}
    5d04:	40001000 	.word	0x40001000
    5d08:	03002646 	.word	0x03002646
    5d0c:	00005b1d 	.word	0x00005b1d
    5d10:	00005aa7 	.word	0x00005aa7

00005d14 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5d14:	b580      	push	{r7, lr}
    5d16:	b084      	sub	sp, #16
    5d18:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5d1a:	4b6b      	ldr	r3, [pc, #428]	; (5ec8 <_oscctrl_init_referenced_generators+0x1b4>)
    5d1c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5d1e:	2204      	movs	r2, #4
    5d20:	2100      	movs	r1, #0
    5d22:	486a      	ldr	r0, [pc, #424]	; (5ecc <_oscctrl_init_referenced_generators+0x1b8>)
    5d24:	4b6a      	ldr	r3, [pc, #424]	; (5ed0 <_oscctrl_init_referenced_generators+0x1bc>)
    5d26:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5d28:	bf00      	nop
    5d2a:	4868      	ldr	r0, [pc, #416]	; (5ecc <_oscctrl_init_referenced_generators+0x1b8>)
    5d2c:	4b69      	ldr	r3, [pc, #420]	; (5ed4 <_oscctrl_init_referenced_generators+0x1c0>)
    5d2e:	4798      	blx	r3
    5d30:	4603      	mov	r3, r0
    5d32:	2b00      	cmp	r3, #0
    5d34:	d1f9      	bne.n	5d2a <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5d36:	2100      	movs	r1, #0
    5d38:	68f8      	ldr	r0, [r7, #12]
    5d3a:	4b67      	ldr	r3, [pc, #412]	; (5ed8 <_oscctrl_init_referenced_generators+0x1c4>)
    5d3c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5d3e:	4967      	ldr	r1, [pc, #412]	; (5edc <_oscctrl_init_referenced_generators+0x1c8>)
    5d40:	68f8      	ldr	r0, [r7, #12]
    5d42:	4b67      	ldr	r3, [pc, #412]	; (5ee0 <_oscctrl_init_referenced_generators+0x1cc>)
    5d44:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5d46:	bf00      	nop
    5d48:	68f8      	ldr	r0, [r7, #12]
    5d4a:	4b66      	ldr	r3, [pc, #408]	; (5ee4 <_oscctrl_init_referenced_generators+0x1d0>)
    5d4c:	4798      	blx	r3
    5d4e:	4603      	mov	r3, r0
    5d50:	2b00      	cmp	r3, #0
    5d52:	d1f9      	bne.n	5d48 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5d54:	2100      	movs	r1, #0
    5d56:	68f8      	ldr	r0, [r7, #12]
    5d58:	4b63      	ldr	r3, [pc, #396]	; (5ee8 <_oscctrl_init_referenced_generators+0x1d4>)
    5d5a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5d5c:	bf00      	nop
    5d5e:	68f8      	ldr	r0, [r7, #12]
    5d60:	4b62      	ldr	r3, [pc, #392]	; (5eec <_oscctrl_init_referenced_generators+0x1d8>)
    5d62:	4798      	blx	r3
    5d64:	4603      	mov	r3, r0
    5d66:	2b00      	cmp	r3, #0
    5d68:	d1f9      	bne.n	5d5e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5d6a:	2302      	movs	r3, #2
    5d6c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5d6e:	7afb      	ldrb	r3, [r7, #11]
    5d70:	4619      	mov	r1, r3
    5d72:	68f8      	ldr	r0, [r7, #12]
    5d74:	4b58      	ldr	r3, [pc, #352]	; (5ed8 <_oscctrl_init_referenced_generators+0x1c4>)
    5d76:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5d78:	bf00      	nop
    5d7a:	68f8      	ldr	r0, [r7, #12]
    5d7c:	4b5c      	ldr	r3, [pc, #368]	; (5ef0 <_oscctrl_init_referenced_generators+0x1dc>)
    5d7e:	4798      	blx	r3
    5d80:	4603      	mov	r3, r0
    5d82:	2b00      	cmp	r3, #0
    5d84:	d1f9      	bne.n	5d7a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5d86:	68f8      	ldr	r0, [r7, #12]
    5d88:	4b5a      	ldr	r3, [pc, #360]	; (5ef4 <_oscctrl_init_referenced_generators+0x1e0>)
    5d8a:	4798      	blx	r3
    5d8c:	4603      	mov	r3, r0
    5d8e:	4619      	mov	r1, r3
    5d90:	68f8      	ldr	r0, [r7, #12]
    5d92:	4b59      	ldr	r3, [pc, #356]	; (5ef8 <_oscctrl_init_referenced_generators+0x1e4>)
    5d94:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5d96:	bf00      	nop
    5d98:	68f8      	ldr	r0, [r7, #12]
    5d9a:	4b58      	ldr	r3, [pc, #352]	; (5efc <_oscctrl_init_referenced_generators+0x1e8>)
    5d9c:	4798      	blx	r3
    5d9e:	4603      	mov	r3, r0
    5da0:	2b00      	cmp	r3, #0
    5da2:	d1f9      	bne.n	5d98 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5da4:	2319      	movs	r3, #25
    5da6:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5da8:	7afb      	ldrb	r3, [r7, #11]
    5daa:	4619      	mov	r1, r3
    5dac:	68f8      	ldr	r0, [r7, #12]
    5dae:	4b4e      	ldr	r3, [pc, #312]	; (5ee8 <_oscctrl_init_referenced_generators+0x1d4>)
    5db0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5db2:	bf00      	nop
    5db4:	68f8      	ldr	r0, [r7, #12]
    5db6:	4b4d      	ldr	r3, [pc, #308]	; (5eec <_oscctrl_init_referenced_generators+0x1d8>)
    5db8:	4798      	blx	r3
    5dba:	4603      	mov	r3, r0
    5dbc:	2b00      	cmp	r3, #0
    5dbe:	d1f9      	bne.n	5db4 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5dc0:	2245      	movs	r2, #69	; 0x45
    5dc2:	2101      	movs	r1, #1
    5dc4:	4841      	ldr	r0, [pc, #260]	; (5ecc <_oscctrl_init_referenced_generators+0x1b8>)
    5dc6:	4b4e      	ldr	r3, [pc, #312]	; (5f00 <_oscctrl_init_referenced_generators+0x1ec>)
    5dc8:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5dca:	223b      	movs	r2, #59	; 0x3b
    5dcc:	2100      	movs	r1, #0
    5dce:	68f8      	ldr	r0, [r7, #12]
    5dd0:	4b4c      	ldr	r3, [pc, #304]	; (5f04 <_oscctrl_init_referenced_generators+0x1f0>)
    5dd2:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5dd4:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5dd8:	2100      	movs	r1, #0
    5dda:	68f8      	ldr	r0, [r7, #12]
    5ddc:	4b4a      	ldr	r3, [pc, #296]	; (5f08 <_oscctrl_init_referenced_generators+0x1f4>)
    5dde:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5de0:	2242      	movs	r2, #66	; 0x42
    5de2:	2100      	movs	r1, #0
    5de4:	68f8      	ldr	r0, [r7, #12]
    5de6:	4b49      	ldr	r3, [pc, #292]	; (5f0c <_oscctrl_init_referenced_generators+0x1f8>)
    5de8:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5dea:	4a49      	ldr	r2, [pc, #292]	; (5f10 <_oscctrl_init_referenced_generators+0x1fc>)
    5dec:	2101      	movs	r1, #1
    5dee:	68f8      	ldr	r0, [r7, #12]
    5df0:	4b44      	ldr	r3, [pc, #272]	; (5f04 <_oscctrl_init_referenced_generators+0x1f0>)
    5df2:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5df4:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5df8:	2101      	movs	r1, #1
    5dfa:	68f8      	ldr	r0, [r7, #12]
    5dfc:	4b42      	ldr	r3, [pc, #264]	; (5f08 <_oscctrl_init_referenced_generators+0x1f4>)
    5dfe:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5e00:	2202      	movs	r2, #2
    5e02:	2101      	movs	r1, #1
    5e04:	68f8      	ldr	r0, [r7, #12]
    5e06:	4b41      	ldr	r3, [pc, #260]	; (5f0c <_oscctrl_init_referenced_generators+0x1f8>)
    5e08:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5e0a:	68f8      	ldr	r0, [r7, #12]
    5e0c:	4b41      	ldr	r3, [pc, #260]	; (5f14 <_oscctrl_init_referenced_generators+0x200>)
    5e0e:	4798      	blx	r3
    5e10:	4603      	mov	r3, r0
    5e12:	2b00      	cmp	r3, #0
    5e14:	d00c      	beq.n	5e30 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5e16:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5e1a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5e1c:	bf00      	nop
    5e1e:	6879      	ldr	r1, [r7, #4]
    5e20:	68f8      	ldr	r0, [r7, #12]
    5e22:	4b3d      	ldr	r3, [pc, #244]	; (5f18 <_oscctrl_init_referenced_generators+0x204>)
    5e24:	4798      	blx	r3
    5e26:	4602      	mov	r2, r0
    5e28:	687b      	ldr	r3, [r7, #4]
    5e2a:	429a      	cmp	r2, r3
    5e2c:	d1f7      	bne.n	5e1e <_oscctrl_init_referenced_generators+0x10a>
    5e2e:	e009      	b.n	5e44 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5e30:	bf00      	nop
    5e32:	68f8      	ldr	r0, [r7, #12]
    5e34:	4b39      	ldr	r3, [pc, #228]	; (5f1c <_oscctrl_init_referenced_generators+0x208>)
    5e36:	4798      	blx	r3
    5e38:	4603      	mov	r3, r0
    5e3a:	f083 0301 	eor.w	r3, r3, #1
    5e3e:	b2db      	uxtb	r3, r3
    5e40:	2b00      	cmp	r3, #0
    5e42:	d1f6      	bne.n	5e32 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5e44:	bf00      	nop
    5e46:	2100      	movs	r1, #0
    5e48:	68f8      	ldr	r0, [r7, #12]
    5e4a:	4b35      	ldr	r3, [pc, #212]	; (5f20 <_oscctrl_init_referenced_generators+0x20c>)
    5e4c:	4798      	blx	r3
    5e4e:	4603      	mov	r3, r0
    5e50:	f083 0301 	eor.w	r3, r3, #1
    5e54:	b2db      	uxtb	r3, r3
    5e56:	2b00      	cmp	r3, #0
    5e58:	d009      	beq.n	5e6e <_oscctrl_init_referenced_generators+0x15a>
    5e5a:	2100      	movs	r1, #0
    5e5c:	68f8      	ldr	r0, [r7, #12]
    5e5e:	4b31      	ldr	r3, [pc, #196]	; (5f24 <_oscctrl_init_referenced_generators+0x210>)
    5e60:	4798      	blx	r3
    5e62:	4603      	mov	r3, r0
    5e64:	f083 0301 	eor.w	r3, r3, #1
    5e68:	b2db      	uxtb	r3, r3
    5e6a:	2b00      	cmp	r3, #0
    5e6c:	d1eb      	bne.n	5e46 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5e6e:	bf00      	nop
    5e70:	2101      	movs	r1, #1
    5e72:	68f8      	ldr	r0, [r7, #12]
    5e74:	4b2a      	ldr	r3, [pc, #168]	; (5f20 <_oscctrl_init_referenced_generators+0x20c>)
    5e76:	4798      	blx	r3
    5e78:	4603      	mov	r3, r0
    5e7a:	f083 0301 	eor.w	r3, r3, #1
    5e7e:	b2db      	uxtb	r3, r3
    5e80:	2b00      	cmp	r3, #0
    5e82:	d009      	beq.n	5e98 <_oscctrl_init_referenced_generators+0x184>
    5e84:	2101      	movs	r1, #1
    5e86:	68f8      	ldr	r0, [r7, #12]
    5e88:	4b26      	ldr	r3, [pc, #152]	; (5f24 <_oscctrl_init_referenced_generators+0x210>)
    5e8a:	4798      	blx	r3
    5e8c:	4603      	mov	r3, r0
    5e8e:	f083 0301 	eor.w	r3, r3, #1
    5e92:	b2db      	uxtb	r3, r3
    5e94:	2b00      	cmp	r3, #0
    5e96:	d1eb      	bne.n	5e70 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5e98:	bf00      	nop
    5e9a:	480c      	ldr	r0, [pc, #48]	; (5ecc <_oscctrl_init_referenced_generators+0x1b8>)
    5e9c:	4b22      	ldr	r3, [pc, #136]	; (5f28 <_oscctrl_init_referenced_generators+0x214>)
    5e9e:	4798      	blx	r3
    5ea0:	4603      	mov	r3, r0
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d1f9      	bne.n	5e9a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5ea6:	2207      	movs	r2, #7
    5ea8:	2100      	movs	r1, #0
    5eaa:	4808      	ldr	r0, [pc, #32]	; (5ecc <_oscctrl_init_referenced_generators+0x1b8>)
    5eac:	4b08      	ldr	r3, [pc, #32]	; (5ed0 <_oscctrl_init_referenced_generators+0x1bc>)
    5eae:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5eb0:	bf00      	nop
    5eb2:	4806      	ldr	r0, [pc, #24]	; (5ecc <_oscctrl_init_referenced_generators+0x1b8>)
    5eb4:	4b07      	ldr	r3, [pc, #28]	; (5ed4 <_oscctrl_init_referenced_generators+0x1c0>)
    5eb6:	4798      	blx	r3
    5eb8:	4603      	mov	r3, r0
    5eba:	2b00      	cmp	r3, #0
    5ebc:	d1f9      	bne.n	5eb2 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5ebe:	bf00      	nop
    5ec0:	3710      	adds	r7, #16
    5ec2:	46bd      	mov	sp, r7
    5ec4:	bd80      	pop	{r7, pc}
    5ec6:	bf00      	nop
    5ec8:	40001000 	.word	0x40001000
    5ecc:	40001c00 	.word	0x40001c00
    5ed0:	000058e1 	.word	0x000058e1
    5ed4:	000058a1 	.word	0x000058a1
    5ed8:	00005b45 	.word	0x00005b45
    5edc:	0401bb80 	.word	0x0401bb80
    5ee0:	00005be7 	.word	0x00005be7
    5ee4:	00005c9f 	.word	0x00005c9f
    5ee8:	00005b93 	.word	0x00005b93
    5eec:	00005c37 	.word	0x00005c37
    5ef0:	00005c03 	.word	0x00005c03
    5ef4:	00005bcf 	.word	0x00005bcf
    5ef8:	00005bb3 	.word	0x00005bb3
    5efc:	00005c6b 	.word	0x00005c6b
    5f00:	00005931 	.word	0x00005931
    5f04:	00005a3d 	.word	0x00005a3d
    5f08:	00005a79 	.word	0x00005a79
    5f0c:	00005a01 	.word	0x00005a01
    5f10:	000407a0 	.word	0x000407a0
    5f14:	00005b63 	.word	0x00005b63
    5f18:	00005af7 	.word	0x00005af7
    5f1c:	00005acf 	.word	0x00005acf
    5f20:	0000598d 	.word	0x0000598d
    5f24:	000059c5 	.word	0x000059c5
    5f28:	000058c9 	.word	0x000058c9

00005f2c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5f2c:	b480      	push	{r7}
    5f2e:	b083      	sub	sp, #12
    5f30:	af00      	add	r7, sp, #0
    5f32:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5f34:	687b      	ldr	r3, [r7, #4]
    5f36:	69db      	ldr	r3, [r3, #28]
    5f38:	0a9b      	lsrs	r3, r3, #10
    5f3a:	f003 0301 	and.w	r3, r3, #1
    5f3e:	2b00      	cmp	r3, #0
    5f40:	bf14      	ite	ne
    5f42:	2301      	movne	r3, #1
    5f44:	2300      	moveq	r3, #0
    5f46:	b2db      	uxtb	r3, r3
}
    5f48:	4618      	mov	r0, r3
    5f4a:	370c      	adds	r7, #12
    5f4c:	46bd      	mov	sp, r7
    5f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f52:	4770      	bx	lr

00005f54 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5f54:	b480      	push	{r7}
    5f56:	b083      	sub	sp, #12
    5f58:	af00      	add	r7, sp, #0
    5f5a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5f5c:	687b      	ldr	r3, [r7, #4]
    5f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5f62:	61da      	str	r2, [r3, #28]
}
    5f64:	bf00      	nop
    5f66:	370c      	adds	r7, #12
    5f68:	46bd      	mov	sp, r7
    5f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f6e:	4770      	bx	lr

00005f70 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5f70:	b480      	push	{r7}
    5f72:	b083      	sub	sp, #12
    5f74:	af00      	add	r7, sp, #0
    5f76:	6078      	str	r0, [r7, #4]
    5f78:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5f7a:	687b      	ldr	r3, [r7, #4]
    5f7c:	683a      	ldr	r2, [r7, #0]
    5f7e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5f80:	bf00      	nop
    5f82:	370c      	adds	r7, #12
    5f84:	46bd      	mov	sp, r7
    5f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f8a:	4770      	bx	lr

00005f8c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5f8c:	b480      	push	{r7}
    5f8e:	b083      	sub	sp, #12
    5f90:	af00      	add	r7, sp, #0
    5f92:	6078      	str	r0, [r7, #4]
    5f94:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5f96:	687b      	ldr	r3, [r7, #4]
    5f98:	683a      	ldr	r2, [r7, #0]
    5f9a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5f9c:	bf00      	nop
    5f9e:	370c      	adds	r7, #12
    5fa0:	46bd      	mov	sp, r7
    5fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fa6:	4770      	bx	lr

00005fa8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5fa8:	b480      	push	{r7}
    5faa:	b083      	sub	sp, #12
    5fac:	af00      	add	r7, sp, #0
    5fae:	6078      	str	r0, [r7, #4]
    5fb0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5fb2:	687b      	ldr	r3, [r7, #4]
    5fb4:	683a      	ldr	r2, [r7, #0]
    5fb6:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5fb8:	bf00      	nop
    5fba:	370c      	adds	r7, #12
    5fbc:	46bd      	mov	sp, r7
    5fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fc2:	4770      	bx	lr

00005fc4 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5fc4:	b480      	push	{r7}
    5fc6:	b083      	sub	sp, #12
    5fc8:	af00      	add	r7, sp, #0
    5fca:	6078      	str	r0, [r7, #4]
    5fcc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5fce:	687b      	ldr	r3, [r7, #4]
    5fd0:	683a      	ldr	r2, [r7, #0]
    5fd2:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5fd4:	bf00      	nop
    5fd6:	370c      	adds	r7, #12
    5fd8:	46bd      	mov	sp, r7
    5fda:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fde:	4770      	bx	lr

00005fe0 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5fe0:	b480      	push	{r7}
    5fe2:	b085      	sub	sp, #20
    5fe4:	af00      	add	r7, sp, #0
    5fe6:	6078      	str	r0, [r7, #4]
    5fe8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5fea:	687b      	ldr	r3, [r7, #4]
    5fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5fee:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5ff0:	68fb      	ldr	r3, [r7, #12]
    5ff2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5ff6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5ff8:	683b      	ldr	r3, [r7, #0]
    5ffa:	b2db      	uxtb	r3, r3
    5ffc:	68fa      	ldr	r2, [r7, #12]
    5ffe:	4313      	orrs	r3, r2
    6000:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    6002:	687b      	ldr	r3, [r7, #4]
    6004:	68fa      	ldr	r2, [r7, #12]
    6006:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6008:	bf00      	nop
    600a:	3714      	adds	r7, #20
    600c:	46bd      	mov	sp, r7
    600e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6012:	4770      	bx	lr

00006014 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    6014:	b480      	push	{r7}
    6016:	b085      	sub	sp, #20
    6018:	af00      	add	r7, sp, #0
    601a:	6078      	str	r0, [r7, #4]
    601c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    601e:	687b      	ldr	r3, [r7, #4]
    6020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6022:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    6024:	68fb      	ldr	r3, [r7, #12]
    6026:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    602a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    602c:	683b      	ldr	r3, [r7, #0]
    602e:	041b      	lsls	r3, r3, #16
    6030:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    6034:	68fa      	ldr	r2, [r7, #12]
    6036:	4313      	orrs	r3, r2
    6038:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    603a:	687b      	ldr	r3, [r7, #4]
    603c:	68fa      	ldr	r2, [r7, #12]
    603e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6040:	bf00      	nop
    6042:	3714      	adds	r7, #20
    6044:	46bd      	mov	sp, r7
    6046:	f85d 7b04 	ldr.w	r7, [sp], #4
    604a:	4770      	bx	lr

0000604c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    604c:	b480      	push	{r7}
    604e:	b083      	sub	sp, #12
    6050:	af00      	add	r7, sp, #0
    6052:	6078      	str	r0, [r7, #4]
    6054:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    6056:	687b      	ldr	r3, [r7, #4]
    6058:	683a      	ldr	r2, [r7, #0]
    605a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    605c:	bf00      	nop
    605e:	370c      	adds	r7, #12
    6060:	46bd      	mov	sp, r7
    6062:	f85d 7b04 	ldr.w	r7, [sp], #4
    6066:	4770      	bx	lr

00006068 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    6068:	b480      	push	{r7}
    606a:	b083      	sub	sp, #12
    606c:	af00      	add	r7, sp, #0
    606e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    6074:	4618      	mov	r0, r3
    6076:	370c      	adds	r7, #12
    6078:	46bd      	mov	sp, r7
    607a:	f85d 7b04 	ldr.w	r7, [sp], #4
    607e:	4770      	bx	lr

00006080 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    6080:	b480      	push	{r7}
    6082:	b085      	sub	sp, #20
    6084:	af00      	add	r7, sp, #0
    6086:	60f8      	str	r0, [r7, #12]
    6088:	60b9      	str	r1, [r7, #8]
    608a:	607a      	str	r2, [r7, #4]
	while (count--) {
    608c:	e007      	b.n	609e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    608e:	68fb      	ldr	r3, [r7, #12]
    6090:	1c5a      	adds	r2, r3, #1
    6092:	60fa      	str	r2, [r7, #12]
    6094:	68ba      	ldr	r2, [r7, #8]
    6096:	1c51      	adds	r1, r2, #1
    6098:	60b9      	str	r1, [r7, #8]
    609a:	7812      	ldrb	r2, [r2, #0]
    609c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    609e:	687b      	ldr	r3, [r7, #4]
    60a0:	1e5a      	subs	r2, r3, #1
    60a2:	607a      	str	r2, [r7, #4]
    60a4:	2b00      	cmp	r3, #0
    60a6:	d1f2      	bne.n	608e <_qspi_memcpy+0xe>
	}
}
    60a8:	bf00      	nop
    60aa:	3714      	adds	r7, #20
    60ac:	46bd      	mov	sp, r7
    60ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    60b2:	4770      	bx	lr

000060b4 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    60b4:	b580      	push	{r7, lr}
    60b6:	b082      	sub	sp, #8
    60b8:	af00      	add	r7, sp, #0
    60ba:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    60bc:	4903      	ldr	r1, [pc, #12]	; (60cc <_qspi_end_transfer+0x18>)
    60be:	6878      	ldr	r0, [r7, #4]
    60c0:	4b03      	ldr	r3, [pc, #12]	; (60d0 <_qspi_end_transfer+0x1c>)
    60c2:	4798      	blx	r3
}
    60c4:	bf00      	nop
    60c6:	3708      	adds	r7, #8
    60c8:	46bd      	mov	sp, r7
    60ca:	bd80      	pop	{r7, pc}
    60cc:	01000002 	.word	0x01000002
    60d0:	00005f71 	.word	0x00005f71

000060d4 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    60d4:	b580      	push	{r7, lr}
    60d6:	b082      	sub	sp, #8
    60d8:	af00      	add	r7, sp, #0
    60da:	6078      	str	r0, [r7, #4]
    60dc:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    60de:	687b      	ldr	r3, [r7, #4]
    60e0:	2b00      	cmp	r3, #0
    60e2:	d004      	beq.n	60ee <_qspi_sync_init+0x1a>
    60e4:	683b      	ldr	r3, [r7, #0]
    60e6:	2b00      	cmp	r3, #0
    60e8:	d001      	beq.n	60ee <_qspi_sync_init+0x1a>
    60ea:	2301      	movs	r3, #1
    60ec:	e000      	b.n	60f0 <_qspi_sync_init+0x1c>
    60ee:	2300      	movs	r3, #0
    60f0:	f003 0301 	and.w	r3, r3, #1
    60f4:	b2db      	uxtb	r3, r3
    60f6:	2240      	movs	r2, #64	; 0x40
    60f8:	490c      	ldr	r1, [pc, #48]	; (612c <_qspi_sync_init+0x58>)
    60fa:	4618      	mov	r0, r3
    60fc:	4b0c      	ldr	r3, [pc, #48]	; (6130 <_qspi_sync_init+0x5c>)
    60fe:	4798      	blx	r3
	dev->prvt = hw;
    6100:	687b      	ldr	r3, [r7, #4]
    6102:	683a      	ldr	r2, [r7, #0]
    6104:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    6106:	687b      	ldr	r3, [r7, #4]
    6108:	681b      	ldr	r3, [r3, #0]
    610a:	2101      	movs	r1, #1
    610c:	4618      	mov	r0, r3
    610e:	4b09      	ldr	r3, [pc, #36]	; (6134 <_qspi_sync_init+0x60>)
    6110:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    6112:	4909      	ldr	r1, [pc, #36]	; (6138 <_qspi_sync_init+0x64>)
    6114:	6838      	ldr	r0, [r7, #0]
    6116:	4b09      	ldr	r3, [pc, #36]	; (613c <_qspi_sync_init+0x68>)
    6118:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    611a:	4909      	ldr	r1, [pc, #36]	; (6140 <_qspi_sync_init+0x6c>)
    611c:	6838      	ldr	r0, [r7, #0]
    611e:	4b09      	ldr	r3, [pc, #36]	; (6144 <_qspi_sync_init+0x70>)
    6120:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    6122:	2300      	movs	r3, #0
}
    6124:	4618      	mov	r0, r3
    6126:	3708      	adds	r7, #8
    6128:	46bd      	mov	sp, r7
    612a:	bd80      	pop	{r7, pc}
    612c:	000140b0 	.word	0x000140b0
    6130:	000040dd 	.word	0x000040dd
    6134:	00005f71 	.word	0x00005f71
    6138:	06000011 	.word	0x06000011
    613c:	00005f8d 	.word	0x00005f8d
    6140:	00241300 	.word	0x00241300
    6144:	00005fa9 	.word	0x00005fa9

00006148 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    6148:	b580      	push	{r7, lr}
    614a:	b082      	sub	sp, #8
    614c:	af00      	add	r7, sp, #0
    614e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    6150:	687b      	ldr	r3, [r7, #4]
    6152:	681b      	ldr	r3, [r3, #0]
    6154:	2102      	movs	r1, #2
    6156:	4618      	mov	r0, r3
    6158:	4b03      	ldr	r3, [pc, #12]	; (6168 <_qspi_sync_enable+0x20>)
    615a:	4798      	blx	r3
	return ERR_NONE;
    615c:	2300      	movs	r3, #0
}
    615e:	4618      	mov	r0, r3
    6160:	3708      	adds	r7, #8
    6162:	46bd      	mov	sp, r7
    6164:	bd80      	pop	{r7, pc}
    6166:	bf00      	nop
    6168:	00005f71 	.word	0x00005f71

0000616c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    616c:	b580      	push	{r7, lr}
    616e:	b082      	sub	sp, #8
    6170:	af00      	add	r7, sp, #0
    6172:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    6174:	687b      	ldr	r3, [r7, #4]
    6176:	681b      	ldr	r3, [r3, #0]
    6178:	2100      	movs	r1, #0
    617a:	4618      	mov	r0, r3
    617c:	4b03      	ldr	r3, [pc, #12]	; (618c <_qspi_sync_disable+0x20>)
    617e:	4798      	blx	r3
	return ERR_NONE;
    6180:	2300      	movs	r3, #0
}
    6182:	4618      	mov	r0, r3
    6184:	3708      	adds	r7, #8
    6186:	46bd      	mov	sp, r7
    6188:	bd80      	pop	{r7, pc}
    618a:	bf00      	nop
    618c:	00005f71 	.word	0x00005f71

00006190 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6190:	b580      	push	{r7, lr}
    6192:	b084      	sub	sp, #16
    6194:	af00      	add	r7, sp, #0
    6196:	6078      	str	r0, [r7, #4]
    6198:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	681b      	ldr	r3, [r3, #0]
    619e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    61a0:	683b      	ldr	r3, [r7, #0]
    61a2:	781b      	ldrb	r3, [r3, #0]
    61a4:	f003 0320 	and.w	r3, r3, #32
    61a8:	b2db      	uxtb	r3, r3
    61aa:	2b00      	cmp	r3, #0
    61ac:	d005      	beq.n	61ba <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    61ae:	683b      	ldr	r3, [r7, #0]
    61b0:	689b      	ldr	r3, [r3, #8]
    61b2:	4619      	mov	r1, r3
    61b4:	68f8      	ldr	r0, [r7, #12]
    61b6:	4b13      	ldr	r3, [pc, #76]	; (6204 <_qspi_sync_command_set_ifr+0x74>)
    61b8:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    61ba:	683b      	ldr	r3, [r7, #0]
    61bc:	781b      	ldrb	r3, [r3, #0]
    61be:	f003 0310 	and.w	r3, r3, #16
    61c2:	b2db      	uxtb	r3, r3
    61c4:	2b00      	cmp	r3, #0
    61c6:	d005      	beq.n	61d4 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    61c8:	683b      	ldr	r3, [r7, #0]
    61ca:	791b      	ldrb	r3, [r3, #4]
    61cc:	4619      	mov	r1, r3
    61ce:	68f8      	ldr	r0, [r7, #12]
    61d0:	4b0d      	ldr	r3, [pc, #52]	; (6208 <_qspi_sync_command_set_ifr+0x78>)
    61d2:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    61d4:	683b      	ldr	r3, [r7, #0]
    61d6:	781b      	ldrb	r3, [r3, #0]
    61d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    61dc:	b2db      	uxtb	r3, r3
    61de:	2b00      	cmp	r3, #0
    61e0:	d005      	beq.n	61ee <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    61e2:	683b      	ldr	r3, [r7, #0]
    61e4:	795b      	ldrb	r3, [r3, #5]
    61e6:	4619      	mov	r1, r3
    61e8:	68f8      	ldr	r0, [r7, #12]
    61ea:	4b08      	ldr	r3, [pc, #32]	; (620c <_qspi_sync_command_set_ifr+0x7c>)
    61ec:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    61ee:	683b      	ldr	r3, [r7, #0]
    61f0:	681b      	ldr	r3, [r3, #0]
    61f2:	4619      	mov	r1, r3
    61f4:	68f8      	ldr	r0, [r7, #12]
    61f6:	4b06      	ldr	r3, [pc, #24]	; (6210 <_qspi_sync_command_set_ifr+0x80>)
    61f8:	4798      	blx	r3
}
    61fa:	bf00      	nop
    61fc:	3710      	adds	r7, #16
    61fe:	46bd      	mov	sp, r7
    6200:	bd80      	pop	{r7, pc}
    6202:	bf00      	nop
    6204:	00005fc5 	.word	0x00005fc5
    6208:	00005fe1 	.word	0x00005fe1
    620c:	00006015 	.word	0x00006015
    6210:	0000604d 	.word	0x0000604d

00006214 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6214:	b580      	push	{r7, lr}
    6216:	b084      	sub	sp, #16
    6218:	af00      	add	r7, sp, #0
    621a:	6078      	str	r0, [r7, #4]
    621c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    621e:	687b      	ldr	r3, [r7, #4]
    6220:	681b      	ldr	r3, [r3, #0]
    6222:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    6224:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6228:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    622a:	683b      	ldr	r3, [r7, #0]
    622c:	781b      	ldrb	r3, [r3, #0]
    622e:	f003 0320 	and.w	r3, r3, #32
    6232:	b2db      	uxtb	r3, r3
    6234:	2b00      	cmp	r3, #0
    6236:	d004      	beq.n	6242 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    6238:	683b      	ldr	r3, [r7, #0]
    623a:	689b      	ldr	r3, [r3, #8]
    623c:	68fa      	ldr	r2, [r7, #12]
    623e:	4413      	add	r3, r2
    6240:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    6242:	68b8      	ldr	r0, [r7, #8]
    6244:	4b18      	ldr	r3, [pc, #96]	; (62a8 <_qspi_sync_run_transfer+0x94>)
    6246:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    6248:	683b      	ldr	r3, [r7, #0]
    624a:	691b      	ldr	r3, [r3, #16]
    624c:	2b00      	cmp	r3, #0
    624e:	d103      	bne.n	6258 <_qspi_sync_run_transfer+0x44>
    6250:	683b      	ldr	r3, [r7, #0]
    6252:	695b      	ldr	r3, [r3, #20]
    6254:	2b00      	cmp	r3, #0
    6256:	d001      	beq.n	625c <_qspi_sync_run_transfer+0x48>
    6258:	2301      	movs	r3, #1
    625a:	e000      	b.n	625e <_qspi_sync_run_transfer+0x4a>
    625c:	2300      	movs	r3, #0
    625e:	f003 0301 	and.w	r3, r3, #1
    6262:	b2db      	uxtb	r3, r3
    6264:	2282      	movs	r2, #130	; 0x82
    6266:	4911      	ldr	r1, [pc, #68]	; (62ac <_qspi_sync_run_transfer+0x98>)
    6268:	4618      	mov	r0, r3
    626a:	4b11      	ldr	r3, [pc, #68]	; (62b0 <_qspi_sync_run_transfer+0x9c>)
    626c:	4798      	blx	r3

	if (cmd->tx_buf) {
    626e:	683b      	ldr	r3, [r7, #0]
    6270:	691b      	ldr	r3, [r3, #16]
    6272:	2b00      	cmp	r3, #0
    6274:	d008      	beq.n	6288 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    6276:	683b      	ldr	r3, [r7, #0]
    6278:	6919      	ldr	r1, [r3, #16]
    627a:	683b      	ldr	r3, [r7, #0]
    627c:	68db      	ldr	r3, [r3, #12]
    627e:	461a      	mov	r2, r3
    6280:	68f8      	ldr	r0, [r7, #12]
    6282:	4b0c      	ldr	r3, [pc, #48]	; (62b4 <_qspi_sync_run_transfer+0xa0>)
    6284:	4798      	blx	r3
    6286:	e007      	b.n	6298 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    6288:	683b      	ldr	r3, [r7, #0]
    628a:	6958      	ldr	r0, [r3, #20]
    628c:	683b      	ldr	r3, [r7, #0]
    628e:	68db      	ldr	r3, [r3, #12]
    6290:	461a      	mov	r2, r3
    6292:	68f9      	ldr	r1, [r7, #12]
    6294:	4b07      	ldr	r3, [pc, #28]	; (62b4 <_qspi_sync_run_transfer+0xa0>)
    6296:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    6298:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    629c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    62a0:	bf00      	nop
    62a2:	3710      	adds	r7, #16
    62a4:	46bd      	mov	sp, r7
    62a6:	bd80      	pop	{r7, pc}
    62a8:	00006069 	.word	0x00006069
    62ac:	000140b0 	.word	0x000140b0
    62b0:	000040dd 	.word	0x000040dd
    62b4:	00006081 	.word	0x00006081

000062b8 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    62b8:	b580      	push	{r7, lr}
    62ba:	b082      	sub	sp, #8
    62bc:	af00      	add	r7, sp, #0
    62be:	6078      	str	r0, [r7, #4]
    62c0:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    62c2:	6839      	ldr	r1, [r7, #0]
    62c4:	6878      	ldr	r0, [r7, #4]
    62c6:	4b14      	ldr	r3, [pc, #80]	; (6318 <_qspi_sync_serial_run_command+0x60>)
    62c8:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    62ca:	683b      	ldr	r3, [r7, #0]
    62cc:	781b      	ldrb	r3, [r3, #0]
    62ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    62d2:	b2db      	uxtb	r3, r3
    62d4:	2b00      	cmp	r3, #0
    62d6:	d003      	beq.n	62e0 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    62d8:	6839      	ldr	r1, [r7, #0]
    62da:	6878      	ldr	r0, [r7, #4]
    62dc:	4b0f      	ldr	r3, [pc, #60]	; (631c <_qspi_sync_serial_run_command+0x64>)
    62de:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    62e0:	687b      	ldr	r3, [r7, #4]
    62e2:	681b      	ldr	r3, [r3, #0]
    62e4:	4618      	mov	r0, r3
    62e6:	4b0e      	ldr	r3, [pc, #56]	; (6320 <_qspi_sync_serial_run_command+0x68>)
    62e8:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    62ea:	bf00      	nop
    62ec:	687b      	ldr	r3, [r7, #4]
    62ee:	681b      	ldr	r3, [r3, #0]
    62f0:	4618      	mov	r0, r3
    62f2:	4b0c      	ldr	r3, [pc, #48]	; (6324 <_qspi_sync_serial_run_command+0x6c>)
    62f4:	4798      	blx	r3
    62f6:	4603      	mov	r3, r0
    62f8:	f083 0301 	eor.w	r3, r3, #1
    62fc:	b2db      	uxtb	r3, r3
    62fe:	2b00      	cmp	r3, #0
    6300:	d1f4      	bne.n	62ec <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    6302:	687b      	ldr	r3, [r7, #4]
    6304:	681b      	ldr	r3, [r3, #0]
    6306:	4618      	mov	r0, r3
    6308:	4b07      	ldr	r3, [pc, #28]	; (6328 <_qspi_sync_serial_run_command+0x70>)
    630a:	4798      	blx	r3
	return ERR_NONE;
    630c:	2300      	movs	r3, #0
}
    630e:	4618      	mov	r0, r3
    6310:	3708      	adds	r7, #8
    6312:	46bd      	mov	sp, r7
    6314:	bd80      	pop	{r7, pc}
    6316:	bf00      	nop
    6318:	00006191 	.word	0x00006191
    631c:	00006215 	.word	0x00006215
    6320:	000060b5 	.word	0x000060b5
    6324:	00005f2d 	.word	0x00005f2d
    6328:	00005f55 	.word	0x00005f55

0000632c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    632c:	b480      	push	{r7}
    632e:	b083      	sub	sp, #12
    6330:	af00      	add	r7, sp, #0
    6332:	6078      	str	r0, [r7, #4]
    6334:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6336:	bf00      	nop
    6338:	687b      	ldr	r3, [r7, #4]
    633a:	691a      	ldr	r2, [r3, #16]
    633c:	683b      	ldr	r3, [r7, #0]
    633e:	4013      	ands	r3, r2
    6340:	2b00      	cmp	r3, #0
    6342:	d1f9      	bne.n	6338 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    6344:	bf00      	nop
    6346:	370c      	adds	r7, #12
    6348:	46bd      	mov	sp, r7
    634a:	f85d 7b04 	ldr.w	r7, [sp], #4
    634e:	4770      	bx	lr

00006350 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    6350:	b480      	push	{r7}
    6352:	b083      	sub	sp, #12
    6354:	af00      	add	r7, sp, #0
    6356:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6358:	687b      	ldr	r3, [r7, #4]
    635a:	f44f 7280 	mov.w	r2, #256	; 0x100
    635e:	819a      	strh	r2, [r3, #12]
}
    6360:	bf00      	nop
    6362:	370c      	adds	r7, #12
    6364:	46bd      	mov	sp, r7
    6366:	f85d 7b04 	ldr.w	r7, [sp], #4
    636a:	4770      	bx	lr

0000636c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    636c:	b480      	push	{r7}
    636e:	b083      	sub	sp, #12
    6370:	af00      	add	r7, sp, #0
    6372:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    6374:	687b      	ldr	r3, [r7, #4]
    6376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    637a:	819a      	strh	r2, [r3, #12]
}
    637c:	bf00      	nop
    637e:	370c      	adds	r7, #12
    6380:	46bd      	mov	sp, r7
    6382:	f85d 7b04 	ldr.w	r7, [sp], #4
    6386:	4770      	bx	lr

00006388 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    6388:	b480      	push	{r7}
    638a:	b083      	sub	sp, #12
    638c:	af00      	add	r7, sp, #0
    638e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6390:	687b      	ldr	r3, [r7, #4]
    6392:	899b      	ldrh	r3, [r3, #12]
    6394:	b29b      	uxth	r3, r3
}
    6396:	4618      	mov	r0, r3
    6398:	370c      	adds	r7, #12
    639a:	46bd      	mov	sp, r7
    639c:	f85d 7b04 	ldr.w	r7, [sp], #4
    63a0:	4770      	bx	lr

000063a2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    63a2:	b480      	push	{r7}
    63a4:	b083      	sub	sp, #12
    63a6:	af00      	add	r7, sp, #0
    63a8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    63aa:	687b      	ldr	r3, [r7, #4]
    63ac:	895b      	ldrh	r3, [r3, #10]
    63ae:	b29b      	uxth	r3, r3
}
    63b0:	4618      	mov	r0, r3
    63b2:	370c      	adds	r7, #12
    63b4:	46bd      	mov	sp, r7
    63b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ba:	4770      	bx	lr

000063bc <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    63bc:	b580      	push	{r7, lr}
    63be:	b082      	sub	sp, #8
    63c0:	af00      	add	r7, sp, #0
    63c2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    63c4:	687b      	ldr	r3, [r7, #4]
    63c6:	881b      	ldrh	r3, [r3, #0]
    63c8:	b29b      	uxth	r3, r3
    63ca:	f043 0301 	orr.w	r3, r3, #1
    63ce:	b29a      	uxth	r2, r3
    63d0:	687b      	ldr	r3, [r7, #4]
    63d2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    63d4:	2101      	movs	r1, #1
    63d6:	6878      	ldr	r0, [r7, #4]
    63d8:	4b02      	ldr	r3, [pc, #8]	; (63e4 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    63da:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    63dc:	bf00      	nop
    63de:	3708      	adds	r7, #8
    63e0:	46bd      	mov	sp, r7
    63e2:	bd80      	pop	{r7, pc}
    63e4:	0000632d 	.word	0x0000632d

000063e8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    63e8:	b580      	push	{r7, lr}
    63ea:	b084      	sub	sp, #16
    63ec:	af00      	add	r7, sp, #0
    63ee:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    63f0:	f248 0103 	movw	r1, #32771	; 0x8003
    63f4:	6878      	ldr	r0, [r7, #4]
    63f6:	4b0a      	ldr	r3, [pc, #40]	; (6420 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    63f8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    63fa:	687b      	ldr	r3, [r7, #4]
    63fc:	881b      	ldrh	r3, [r3, #0]
    63fe:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    6400:	89fb      	ldrh	r3, [r7, #14]
    6402:	085b      	lsrs	r3, r3, #1
    6404:	b29b      	uxth	r3, r3
    6406:	f003 0301 	and.w	r3, r3, #1
    640a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    640c:	89fb      	ldrh	r3, [r7, #14]
    640e:	2b00      	cmp	r3, #0
    6410:	bf14      	ite	ne
    6412:	2301      	movne	r3, #1
    6414:	2300      	moveq	r3, #0
    6416:	b2db      	uxtb	r3, r3
}
    6418:	4618      	mov	r0, r3
    641a:	3710      	adds	r7, #16
    641c:	46bd      	mov	sp, r7
    641e:	bd80      	pop	{r7, pc}
    6420:	0000632d 	.word	0x0000632d

00006424 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6424:	b580      	push	{r7, lr}
    6426:	b082      	sub	sp, #8
    6428:	af00      	add	r7, sp, #0
    642a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	881b      	ldrh	r3, [r3, #0]
    6430:	b29b      	uxth	r3, r3
    6432:	f023 0302 	bic.w	r3, r3, #2
    6436:	b29a      	uxth	r2, r3
    6438:	687b      	ldr	r3, [r7, #4]
    643a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    643c:	f248 0103 	movw	r1, #32771	; 0x8003
    6440:	6878      	ldr	r0, [r7, #4]
    6442:	4b03      	ldr	r3, [pc, #12]	; (6450 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    6444:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6446:	bf00      	nop
    6448:	3708      	adds	r7, #8
    644a:	46bd      	mov	sp, r7
    644c:	bd80      	pop	{r7, pc}
    644e:	bf00      	nop
    6450:	0000632d 	.word	0x0000632d

00006454 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    6454:	b580      	push	{r7, lr}
    6456:	b082      	sub	sp, #8
    6458:	af00      	add	r7, sp, #0
    645a:	6078      	str	r0, [r7, #4]
    645c:	460b      	mov	r3, r1
    645e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6460:	687b      	ldr	r3, [r7, #4]
    6462:	887a      	ldrh	r2, [r7, #2]
    6464:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6466:	f248 0103 	movw	r1, #32771	; 0x8003
    646a:	6878      	ldr	r0, [r7, #4]
    646c:	4b02      	ldr	r3, [pc, #8]	; (6478 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    646e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6470:	bf00      	nop
    6472:	3708      	adds	r7, #8
    6474:	46bd      	mov	sp, r7
    6476:	bd80      	pop	{r7, pc}
    6478:	0000632d 	.word	0x0000632d

0000647c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    647c:	b480      	push	{r7}
    647e:	b083      	sub	sp, #12
    6480:	af00      	add	r7, sp, #0
    6482:	6078      	str	r0, [r7, #4]
    6484:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    6486:	687b      	ldr	r3, [r7, #4]
    6488:	683a      	ldr	r2, [r7, #0]
    648a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    648c:	bf00      	nop
    648e:	370c      	adds	r7, #12
    6490:	46bd      	mov	sp, r7
    6492:	f85d 7b04 	ldr.w	r7, [sp], #4
    6496:	4770      	bx	lr

00006498 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    6498:	b580      	push	{r7, lr}
    649a:	b082      	sub	sp, #8
    649c:	af00      	add	r7, sp, #0
    649e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    64a0:	687b      	ldr	r3, [r7, #4]
    64a2:	2b00      	cmp	r3, #0
    64a4:	d005      	beq.n	64b2 <_calendar_init+0x1a>
    64a6:	687b      	ldr	r3, [r7, #4]
    64a8:	681b      	ldr	r3, [r3, #0]
    64aa:	2b00      	cmp	r3, #0
    64ac:	d001      	beq.n	64b2 <_calendar_init+0x1a>
    64ae:	2301      	movs	r3, #1
    64b0:	e000      	b.n	64b4 <_calendar_init+0x1c>
    64b2:	2300      	movs	r3, #0
    64b4:	f003 0301 	and.w	r3, r3, #1
    64b8:	b2db      	uxtb	r3, r3
    64ba:	222f      	movs	r2, #47	; 0x2f
    64bc:	491b      	ldr	r1, [pc, #108]	; (652c <_calendar_init+0x94>)
    64be:	4618      	mov	r0, r3
    64c0:	4b1b      	ldr	r3, [pc, #108]	; (6530 <_calendar_init+0x98>)
    64c2:	4798      	blx	r3

	_rtc_dev = dev;
    64c4:	4a1b      	ldr	r2, [pc, #108]	; (6534 <_calendar_init+0x9c>)
    64c6:	687b      	ldr	r3, [r7, #4]
    64c8:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    64ca:	687b      	ldr	r3, [r7, #4]
    64cc:	681b      	ldr	r3, [r3, #0]
    64ce:	4618      	mov	r0, r3
    64d0:	4b19      	ldr	r3, [pc, #100]	; (6538 <_calendar_init+0xa0>)
    64d2:	4798      	blx	r3
    64d4:	4603      	mov	r3, r0
    64d6:	2b00      	cmp	r3, #0
    64d8:	d00a      	beq.n	64f0 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    64da:	687b      	ldr	r3, [r7, #4]
    64dc:	681b      	ldr	r3, [r3, #0]
    64de:	4618      	mov	r0, r3
    64e0:	4b16      	ldr	r3, [pc, #88]	; (653c <_calendar_init+0xa4>)
    64e2:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    64e4:	687b      	ldr	r3, [r7, #4]
    64e6:	681b      	ldr	r3, [r3, #0]
    64e8:	2102      	movs	r1, #2
    64ea:	4618      	mov	r0, r3
    64ec:	4b14      	ldr	r3, [pc, #80]	; (6540 <_calendar_init+0xa8>)
    64ee:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    64f0:	687b      	ldr	r3, [r7, #4]
    64f2:	681b      	ldr	r3, [r3, #0]
    64f4:	4618      	mov	r0, r3
    64f6:	4b13      	ldr	r3, [pc, #76]	; (6544 <_calendar_init+0xac>)
    64f8:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    64fa:	687b      	ldr	r3, [r7, #4]
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	2101      	movs	r1, #1
    6500:	4618      	mov	r0, r3
    6502:	4b0f      	ldr	r3, [pc, #60]	; (6540 <_calendar_init+0xa8>)
    6504:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    6506:	687b      	ldr	r3, [r7, #4]
    6508:	681b      	ldr	r3, [r3, #0]
    650a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    650e:	4618      	mov	r0, r3
    6510:	4b0d      	ldr	r3, [pc, #52]	; (6548 <_calendar_init+0xb0>)
    6512:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    6514:	687b      	ldr	r3, [r7, #4]
    6516:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6518:	2100      	movs	r1, #0
    651a:	4618      	mov	r0, r3
    651c:	4b0b      	ldr	r3, [pc, #44]	; (654c <_calendar_init+0xb4>)
    651e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6520:	2300      	movs	r3, #0
}
    6522:	4618      	mov	r0, r3
    6524:	3708      	adds	r7, #8
    6526:	46bd      	mov	sp, r7
    6528:	bd80      	pop	{r7, pc}
    652a:	bf00      	nop
    652c:	000140c8 	.word	0x000140c8
    6530:	000040dd 	.word	0x000040dd
    6534:	20000cd4 	.word	0x20000cd4
    6538:	000063e9 	.word	0x000063e9
    653c:	00006425 	.word	0x00006425
    6540:	0000632d 	.word	0x0000632d
    6544:	000063bd 	.word	0x000063bd
    6548:	00006455 	.word	0x00006455
    654c:	0000647d 	.word	0x0000647d

00006550 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    6550:	b580      	push	{r7, lr}
    6552:	b084      	sub	sp, #16
    6554:	af00      	add	r7, sp, #0
    6556:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6558:	687b      	ldr	r3, [r7, #4]
    655a:	681b      	ldr	r3, [r3, #0]
    655c:	4618      	mov	r0, r3
    655e:	4b19      	ldr	r3, [pc, #100]	; (65c4 <_rtc_interrupt_handler+0x74>)
    6560:	4798      	blx	r3
    6562:	4603      	mov	r3, r0
    6564:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    6566:	687b      	ldr	r3, [r7, #4]
    6568:	681b      	ldr	r3, [r3, #0]
    656a:	4618      	mov	r0, r3
    656c:	4b16      	ldr	r3, [pc, #88]	; (65c8 <_rtc_interrupt_handler+0x78>)
    656e:	4798      	blx	r3
    6570:	4603      	mov	r3, r0
    6572:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    6574:	89fa      	ldrh	r2, [r7, #14]
    6576:	89bb      	ldrh	r3, [r7, #12]
    6578:	4013      	ands	r3, r2
    657a:	b29b      	uxth	r3, r3
    657c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6580:	2b00      	cmp	r3, #0
    6582:	d009      	beq.n	6598 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    6584:	687b      	ldr	r3, [r7, #4]
    6586:	685b      	ldr	r3, [r3, #4]
    6588:	6878      	ldr	r0, [r7, #4]
    658a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    658c:	687b      	ldr	r3, [r7, #4]
    658e:	681b      	ldr	r3, [r3, #0]
    6590:	4618      	mov	r0, r3
    6592:	4b0e      	ldr	r3, [pc, #56]	; (65cc <_rtc_interrupt_handler+0x7c>)
    6594:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    6596:	e010      	b.n	65ba <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    6598:	89fa      	ldrh	r2, [r7, #14]
    659a:	89bb      	ldrh	r3, [r7, #12]
    659c:	4013      	ands	r3, r2
    659e:	b29b      	uxth	r3, r3
    65a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    65a4:	2b00      	cmp	r3, #0
    65a6:	d008      	beq.n	65ba <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    65a8:	687b      	ldr	r3, [r7, #4]
    65aa:	689b      	ldr	r3, [r3, #8]
    65ac:	6878      	ldr	r0, [r7, #4]
    65ae:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	681b      	ldr	r3, [r3, #0]
    65b4:	4618      	mov	r0, r3
    65b6:	4b06      	ldr	r3, [pc, #24]	; (65d0 <_rtc_interrupt_handler+0x80>)
    65b8:	4798      	blx	r3
}
    65ba:	bf00      	nop
    65bc:	3710      	adds	r7, #16
    65be:	46bd      	mov	sp, r7
    65c0:	bd80      	pop	{r7, pc}
    65c2:	bf00      	nop
    65c4:	00006389 	.word	0x00006389
    65c8:	000063a3 	.word	0x000063a3
    65cc:	00006351 	.word	0x00006351
    65d0:	0000636d 	.word	0x0000636d

000065d4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    65d4:	b580      	push	{r7, lr}
    65d6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    65d8:	4b03      	ldr	r3, [pc, #12]	; (65e8 <RTC_Handler+0x14>)
    65da:	681b      	ldr	r3, [r3, #0]
    65dc:	4618      	mov	r0, r3
    65de:	4b03      	ldr	r3, [pc, #12]	; (65ec <RTC_Handler+0x18>)
    65e0:	4798      	blx	r3
}
    65e2:	bf00      	nop
    65e4:	bd80      	pop	{r7, pc}
    65e6:	bf00      	nop
    65e8:	20000cd4 	.word	0x20000cd4
    65ec:	00006551 	.word	0x00006551

000065f0 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    65f0:	b480      	push	{r7}
    65f2:	b083      	sub	sp, #12
    65f4:	af00      	add	r7, sp, #0
    65f6:	6078      	str	r0, [r7, #4]
    65f8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    65fa:	bf00      	nop
    65fc:	687b      	ldr	r3, [r7, #4]
    65fe:	69da      	ldr	r2, [r3, #28]
    6600:	683b      	ldr	r3, [r7, #0]
    6602:	4013      	ands	r3, r2
    6604:	2b00      	cmp	r3, #0
    6606:	d1f9      	bne.n	65fc <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6608:	bf00      	nop
    660a:	370c      	adds	r7, #12
    660c:	46bd      	mov	sp, r7
    660e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6612:	4770      	bx	lr

00006614 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6614:	b480      	push	{r7}
    6616:	b083      	sub	sp, #12
    6618:	af00      	add	r7, sp, #0
    661a:	6078      	str	r0, [r7, #4]
    661c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    661e:	687b      	ldr	r3, [r7, #4]
    6620:	69da      	ldr	r2, [r3, #28]
    6622:	683b      	ldr	r3, [r7, #0]
    6624:	4013      	ands	r3, r2
    6626:	2b00      	cmp	r3, #0
    6628:	bf14      	ite	ne
    662a:	2301      	movne	r3, #1
    662c:	2300      	moveq	r3, #0
    662e:	b2db      	uxtb	r3, r3
}
    6630:	4618      	mov	r0, r3
    6632:	370c      	adds	r7, #12
    6634:	46bd      	mov	sp, r7
    6636:	f85d 7b04 	ldr.w	r7, [sp], #4
    663a:	4770      	bx	lr

0000663c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    663c:	b480      	push	{r7}
    663e:	b083      	sub	sp, #12
    6640:	af00      	add	r7, sp, #0
    6642:	6078      	str	r0, [r7, #4]
    6644:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6646:	bf00      	nop
    6648:	687b      	ldr	r3, [r7, #4]
    664a:	69da      	ldr	r2, [r3, #28]
    664c:	683b      	ldr	r3, [r7, #0]
    664e:	4013      	ands	r3, r2
    6650:	2b00      	cmp	r3, #0
    6652:	d1f9      	bne.n	6648 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    6654:	bf00      	nop
    6656:	370c      	adds	r7, #12
    6658:	46bd      	mov	sp, r7
    665a:	f85d 7b04 	ldr.w	r7, [sp], #4
    665e:	4770      	bx	lr

00006660 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6660:	b480      	push	{r7}
    6662:	b083      	sub	sp, #12
    6664:	af00      	add	r7, sp, #0
    6666:	6078      	str	r0, [r7, #4]
    6668:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    666a:	687b      	ldr	r3, [r7, #4]
    666c:	69da      	ldr	r2, [r3, #28]
    666e:	683b      	ldr	r3, [r7, #0]
    6670:	4013      	ands	r3, r2
    6672:	2b00      	cmp	r3, #0
    6674:	bf14      	ite	ne
    6676:	2301      	movne	r3, #1
    6678:	2300      	moveq	r3, #0
    667a:	b2db      	uxtb	r3, r3
}
    667c:	4618      	mov	r0, r3
    667e:	370c      	adds	r7, #12
    6680:	46bd      	mov	sp, r7
    6682:	f85d 7b04 	ldr.w	r7, [sp], #4
    6686:	4770      	bx	lr

00006688 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    6688:	b480      	push	{r7}
    668a:	b083      	sub	sp, #12
    668c:	af00      	add	r7, sp, #0
    668e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6690:	687b      	ldr	r3, [r7, #4]
    6692:	2201      	movs	r2, #1
    6694:	761a      	strb	r2, [r3, #24]
}
    6696:	bf00      	nop
    6698:	370c      	adds	r7, #12
    669a:	46bd      	mov	sp, r7
    669c:	f85d 7b04 	ldr.w	r7, [sp], #4
    66a0:	4770      	bx	lr

000066a2 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    66a2:	b480      	push	{r7}
    66a4:	b083      	sub	sp, #12
    66a6:	af00      	add	r7, sp, #0
    66a8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    66aa:	687b      	ldr	r3, [r7, #4]
    66ac:	2202      	movs	r2, #2
    66ae:	761a      	strb	r2, [r3, #24]
}
    66b0:	bf00      	nop
    66b2:	370c      	adds	r7, #12
    66b4:	46bd      	mov	sp, r7
    66b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    66ba:	4770      	bx	lr

000066bc <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    66bc:	b480      	push	{r7}
    66be:	b083      	sub	sp, #12
    66c0:	af00      	add	r7, sp, #0
    66c2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    66c4:	687b      	ldr	r3, [r7, #4]
    66c6:	7e1b      	ldrb	r3, [r3, #24]
    66c8:	b2db      	uxtb	r3, r3
}
    66ca:	4618      	mov	r0, r3
    66cc:	370c      	adds	r7, #12
    66ce:	46bd      	mov	sp, r7
    66d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    66d4:	4770      	bx	lr

000066d6 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    66d6:	b480      	push	{r7}
    66d8:	b085      	sub	sp, #20
    66da:	af00      	add	r7, sp, #0
    66dc:	6078      	str	r0, [r7, #4]
    66de:	460b      	mov	r3, r1
    66e0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    66e2:	687b      	ldr	r3, [r7, #4]
    66e4:	7e1b      	ldrb	r3, [r3, #24]
    66e6:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    66e8:	7bfa      	ldrb	r2, [r7, #15]
    66ea:	78fb      	ldrb	r3, [r7, #3]
    66ec:	4013      	ands	r3, r2
    66ee:	73fb      	strb	r3, [r7, #15]
	return tmp;
    66f0:	7bfb      	ldrb	r3, [r7, #15]
}
    66f2:	4618      	mov	r0, r3
    66f4:	3714      	adds	r7, #20
    66f6:	46bd      	mov	sp, r7
    66f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    66fc:	4770      	bx	lr

000066fe <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    66fe:	b480      	push	{r7}
    6700:	b083      	sub	sp, #12
    6702:	af00      	add	r7, sp, #0
    6704:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6706:	687b      	ldr	r3, [r7, #4]
    6708:	7e1b      	ldrb	r3, [r3, #24]
    670a:	b2db      	uxtb	r3, r3
}
    670c:	4618      	mov	r0, r3
    670e:	370c      	adds	r7, #12
    6710:	46bd      	mov	sp, r7
    6712:	f85d 7b04 	ldr.w	r7, [sp], #4
    6716:	4770      	bx	lr

00006718 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6718:	b480      	push	{r7}
    671a:	b083      	sub	sp, #12
    671c:	af00      	add	r7, sp, #0
    671e:	6078      	str	r0, [r7, #4]
    6720:	460b      	mov	r3, r1
    6722:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6724:	687b      	ldr	r3, [r7, #4]
    6726:	78fa      	ldrb	r2, [r7, #3]
    6728:	761a      	strb	r2, [r3, #24]
}
    672a:	bf00      	nop
    672c:	370c      	adds	r7, #12
    672e:	46bd      	mov	sp, r7
    6730:	f85d 7b04 	ldr.w	r7, [sp], #4
    6734:	4770      	bx	lr
	...

00006738 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6738:	b580      	push	{r7, lr}
    673a:	b082      	sub	sp, #8
    673c:	af00      	add	r7, sp, #0
    673e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6740:	687b      	ldr	r3, [r7, #4]
    6742:	681b      	ldr	r3, [r3, #0]
    6744:	f043 0202 	orr.w	r2, r3, #2
    6748:	687b      	ldr	r3, [r7, #4]
    674a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    674c:	2103      	movs	r1, #3
    674e:	6878      	ldr	r0, [r7, #4]
    6750:	4b02      	ldr	r3, [pc, #8]	; (675c <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    6752:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6754:	bf00      	nop
    6756:	3708      	adds	r7, #8
    6758:	46bd      	mov	sp, r7
    675a:	bd80      	pop	{r7, pc}
    675c:	000065f1 	.word	0x000065f1

00006760 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6760:	b580      	push	{r7, lr}
    6762:	b082      	sub	sp, #8
    6764:	af00      	add	r7, sp, #0
    6766:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6768:	687b      	ldr	r3, [r7, #4]
    676a:	681b      	ldr	r3, [r3, #0]
    676c:	f023 0202 	bic.w	r2, r3, #2
    6770:	687b      	ldr	r3, [r7, #4]
    6772:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6774:	2103      	movs	r1, #3
    6776:	6878      	ldr	r0, [r7, #4]
    6778:	4b02      	ldr	r3, [pc, #8]	; (6784 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    677a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    677c:	bf00      	nop
    677e:	3708      	adds	r7, #8
    6780:	46bd      	mov	sp, r7
    6782:	bd80      	pop	{r7, pc}
    6784:	000065f1 	.word	0x000065f1

00006788 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6788:	b480      	push	{r7}
    678a:	b085      	sub	sp, #20
    678c:	af00      	add	r7, sp, #0
    678e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6790:	687b      	ldr	r3, [r7, #4]
    6792:	681b      	ldr	r3, [r3, #0]
    6794:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6796:	68fb      	ldr	r3, [r7, #12]
    6798:	0edb      	lsrs	r3, r3, #27
    679a:	f003 0301 	and.w	r3, r3, #1
    679e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    67a0:	68fb      	ldr	r3, [r7, #12]
    67a2:	2b00      	cmp	r3, #0
    67a4:	bf14      	ite	ne
    67a6:	2301      	movne	r3, #1
    67a8:	2300      	moveq	r3, #0
    67aa:	b2db      	uxtb	r3, r3
}
    67ac:	4618      	mov	r0, r3
    67ae:	3714      	adds	r7, #20
    67b0:	46bd      	mov	sp, r7
    67b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    67b6:	4770      	bx	lr

000067b8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    67b8:	b580      	push	{r7, lr}
    67ba:	b084      	sub	sp, #16
    67bc:	af00      	add	r7, sp, #0
    67be:	6078      	str	r0, [r7, #4]
    67c0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    67c2:	2103      	movs	r1, #3
    67c4:	6878      	ldr	r0, [r7, #4]
    67c6:	4b07      	ldr	r3, [pc, #28]	; (67e4 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    67c8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    67ca:	687b      	ldr	r3, [r7, #4]
    67cc:	681b      	ldr	r3, [r3, #0]
    67ce:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    67d0:	68fa      	ldr	r2, [r7, #12]
    67d2:	683b      	ldr	r3, [r7, #0]
    67d4:	4013      	ands	r3, r2
    67d6:	60fb      	str	r3, [r7, #12]
	return tmp;
    67d8:	68fb      	ldr	r3, [r7, #12]
}
    67da:	4618      	mov	r0, r3
    67dc:	3710      	adds	r7, #16
    67de:	46bd      	mov	sp, r7
    67e0:	bd80      	pop	{r7, pc}
    67e2:	bf00      	nop
    67e4:	000065f1 	.word	0x000065f1

000067e8 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    67e8:	b580      	push	{r7, lr}
    67ea:	b082      	sub	sp, #8
    67ec:	af00      	add	r7, sp, #0
    67ee:	6078      	str	r0, [r7, #4]
    67f0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    67f2:	687b      	ldr	r3, [r7, #4]
    67f4:	683a      	ldr	r2, [r7, #0]
    67f6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    67f8:	2103      	movs	r1, #3
    67fa:	6878      	ldr	r0, [r7, #4]
    67fc:	4b02      	ldr	r3, [pc, #8]	; (6808 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    67fe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6800:	bf00      	nop
    6802:	3708      	adds	r7, #8
    6804:	46bd      	mov	sp, r7
    6806:	bd80      	pop	{r7, pc}
    6808:	000065f1 	.word	0x000065f1

0000680c <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    680c:	b580      	push	{r7, lr}
    680e:	b082      	sub	sp, #8
    6810:	af00      	add	r7, sp, #0
    6812:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6814:	687b      	ldr	r3, [r7, #4]
    6816:	681b      	ldr	r3, [r3, #0]
    6818:	f043 0202 	orr.w	r2, r3, #2
    681c:	687b      	ldr	r3, [r7, #4]
    681e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6820:	2103      	movs	r1, #3
    6822:	6878      	ldr	r0, [r7, #4]
    6824:	4b02      	ldr	r3, [pc, #8]	; (6830 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    6826:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6828:	bf00      	nop
    682a:	3708      	adds	r7, #8
    682c:	46bd      	mov	sp, r7
    682e:	bd80      	pop	{r7, pc}
    6830:	0000663d 	.word	0x0000663d

00006834 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6834:	b580      	push	{r7, lr}
    6836:	b084      	sub	sp, #16
    6838:	af00      	add	r7, sp, #0
    683a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    683c:	2103      	movs	r1, #3
    683e:	6878      	ldr	r0, [r7, #4]
    6840:	4b09      	ldr	r3, [pc, #36]	; (6868 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    6842:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6844:	687b      	ldr	r3, [r7, #4]
    6846:	681b      	ldr	r3, [r3, #0]
    6848:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    684a:	68fb      	ldr	r3, [r7, #12]
    684c:	085b      	lsrs	r3, r3, #1
    684e:	f003 0301 	and.w	r3, r3, #1
    6852:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6854:	68fb      	ldr	r3, [r7, #12]
    6856:	2b00      	cmp	r3, #0
    6858:	bf14      	ite	ne
    685a:	2301      	movne	r3, #1
    685c:	2300      	moveq	r3, #0
    685e:	b2db      	uxtb	r3, r3
}
    6860:	4618      	mov	r0, r3
    6862:	3710      	adds	r7, #16
    6864:	46bd      	mov	sp, r7
    6866:	bd80      	pop	{r7, pc}
    6868:	0000663d 	.word	0x0000663d

0000686c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    686c:	b580      	push	{r7, lr}
    686e:	b082      	sub	sp, #8
    6870:	af00      	add	r7, sp, #0
    6872:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6874:	687b      	ldr	r3, [r7, #4]
    6876:	681b      	ldr	r3, [r3, #0]
    6878:	f023 0202 	bic.w	r2, r3, #2
    687c:	687b      	ldr	r3, [r7, #4]
    687e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6880:	2103      	movs	r1, #3
    6882:	6878      	ldr	r0, [r7, #4]
    6884:	4b02      	ldr	r3, [pc, #8]	; (6890 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    6886:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6888:	bf00      	nop
    688a:	3708      	adds	r7, #8
    688c:	46bd      	mov	sp, r7
    688e:	bd80      	pop	{r7, pc}
    6890:	0000663d 	.word	0x0000663d

00006894 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    6894:	b580      	push	{r7, lr}
    6896:	b084      	sub	sp, #16
    6898:	af00      	add	r7, sp, #0
    689a:	6078      	str	r0, [r7, #4]
    689c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    689e:	2103      	movs	r1, #3
    68a0:	6878      	ldr	r0, [r7, #4]
    68a2:	4b07      	ldr	r3, [pc, #28]	; (68c0 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    68a4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    68a6:	687b      	ldr	r3, [r7, #4]
    68a8:	681b      	ldr	r3, [r3, #0]
    68aa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    68ac:	68fa      	ldr	r2, [r7, #12]
    68ae:	683b      	ldr	r3, [r7, #0]
    68b0:	4013      	ands	r3, r2
    68b2:	60fb      	str	r3, [r7, #12]
	return tmp;
    68b4:	68fb      	ldr	r3, [r7, #12]
}
    68b6:	4618      	mov	r0, r3
    68b8:	3710      	adds	r7, #16
    68ba:	46bd      	mov	sp, r7
    68bc:	bd80      	pop	{r7, pc}
    68be:	bf00      	nop
    68c0:	0000663d 	.word	0x0000663d

000068c4 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    68c4:	b580      	push	{r7, lr}
    68c6:	b082      	sub	sp, #8
    68c8:	af00      	add	r7, sp, #0
    68ca:	6078      	str	r0, [r7, #4]
    68cc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    68ce:	687b      	ldr	r3, [r7, #4]
    68d0:	683a      	ldr	r2, [r7, #0]
    68d2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    68d4:	2103      	movs	r1, #3
    68d6:	6878      	ldr	r0, [r7, #4]
    68d8:	4b02      	ldr	r3, [pc, #8]	; (68e4 <hri_sercomspi_write_CTRLA_reg+0x20>)
    68da:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68dc:	bf00      	nop
    68de:	3708      	adds	r7, #8
    68e0:	46bd      	mov	sp, r7
    68e2:	bd80      	pop	{r7, pc}
    68e4:	0000663d 	.word	0x0000663d

000068e8 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    68e8:	b580      	push	{r7, lr}
    68ea:	b082      	sub	sp, #8
    68ec:	af00      	add	r7, sp, #0
    68ee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    68f0:	687b      	ldr	r3, [r7, #4]
    68f2:	685b      	ldr	r3, [r3, #4]
    68f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    68f8:	687b      	ldr	r3, [r7, #4]
    68fa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68fc:	2104      	movs	r1, #4
    68fe:	6878      	ldr	r0, [r7, #4]
    6900:	4b02      	ldr	r3, [pc, #8]	; (690c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    6902:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6904:	bf00      	nop
    6906:	3708      	adds	r7, #8
    6908:	46bd      	mov	sp, r7
    690a:	bd80      	pop	{r7, pc}
    690c:	000065f1 	.word	0x000065f1

00006910 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6910:	b580      	push	{r7, lr}
    6912:	b082      	sub	sp, #8
    6914:	af00      	add	r7, sp, #0
    6916:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6918:	687b      	ldr	r3, [r7, #4]
    691a:	685b      	ldr	r3, [r3, #4]
    691c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6920:	687b      	ldr	r3, [r7, #4]
    6922:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6924:	2104      	movs	r1, #4
    6926:	6878      	ldr	r0, [r7, #4]
    6928:	4b02      	ldr	r3, [pc, #8]	; (6934 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    692a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    692c:	bf00      	nop
    692e:	3708      	adds	r7, #8
    6930:	46bd      	mov	sp, r7
    6932:	bd80      	pop	{r7, pc}
    6934:	000065f1 	.word	0x000065f1

00006938 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6938:	b580      	push	{r7, lr}
    693a:	b082      	sub	sp, #8
    693c:	af00      	add	r7, sp, #0
    693e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6940:	687b      	ldr	r3, [r7, #4]
    6942:	685b      	ldr	r3, [r3, #4]
    6944:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6948:	687b      	ldr	r3, [r7, #4]
    694a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    694c:	2104      	movs	r1, #4
    694e:	6878      	ldr	r0, [r7, #4]
    6950:	4b02      	ldr	r3, [pc, #8]	; (695c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    6952:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6954:	bf00      	nop
    6956:	3708      	adds	r7, #8
    6958:	46bd      	mov	sp, r7
    695a:	bd80      	pop	{r7, pc}
    695c:	000065f1 	.word	0x000065f1

00006960 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6960:	b580      	push	{r7, lr}
    6962:	b082      	sub	sp, #8
    6964:	af00      	add	r7, sp, #0
    6966:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6968:	687b      	ldr	r3, [r7, #4]
    696a:	685b      	ldr	r3, [r3, #4]
    696c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6970:	687b      	ldr	r3, [r7, #4]
    6972:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6974:	2104      	movs	r1, #4
    6976:	6878      	ldr	r0, [r7, #4]
    6978:	4b02      	ldr	r3, [pc, #8]	; (6984 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    697a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    697c:	bf00      	nop
    697e:	3708      	adds	r7, #8
    6980:	46bd      	mov	sp, r7
    6982:	bd80      	pop	{r7, pc}
    6984:	000065f1 	.word	0x000065f1

00006988 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6988:	b580      	push	{r7, lr}
    698a:	b082      	sub	sp, #8
    698c:	af00      	add	r7, sp, #0
    698e:	6078      	str	r0, [r7, #4]
    6990:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6992:	687b      	ldr	r3, [r7, #4]
    6994:	685a      	ldr	r2, [r3, #4]
    6996:	683b      	ldr	r3, [r7, #0]
    6998:	041b      	lsls	r3, r3, #16
    699a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    699e:	431a      	orrs	r2, r3
    69a0:	687b      	ldr	r3, [r7, #4]
    69a2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    69a4:	2104      	movs	r1, #4
    69a6:	6878      	ldr	r0, [r7, #4]
    69a8:	4b02      	ldr	r3, [pc, #8]	; (69b4 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    69aa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69ac:	bf00      	nop
    69ae:	3708      	adds	r7, #8
    69b0:	46bd      	mov	sp, r7
    69b2:	bd80      	pop	{r7, pc}
    69b4:	000065f1 	.word	0x000065f1

000069b8 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    69b8:	b580      	push	{r7, lr}
    69ba:	b082      	sub	sp, #8
    69bc:	af00      	add	r7, sp, #0
    69be:	6078      	str	r0, [r7, #4]
    69c0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    69c2:	687b      	ldr	r3, [r7, #4]
    69c4:	683a      	ldr	r2, [r7, #0]
    69c6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    69c8:	2104      	movs	r1, #4
    69ca:	6878      	ldr	r0, [r7, #4]
    69cc:	4b02      	ldr	r3, [pc, #8]	; (69d8 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    69ce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69d0:	bf00      	nop
    69d2:	3708      	adds	r7, #8
    69d4:	46bd      	mov	sp, r7
    69d6:	bd80      	pop	{r7, pc}
    69d8:	000065f1 	.word	0x000065f1

000069dc <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    69dc:	b580      	push	{r7, lr}
    69de:	b082      	sub	sp, #8
    69e0:	af00      	add	r7, sp, #0
    69e2:	6078      	str	r0, [r7, #4]
    69e4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    69e6:	687b      	ldr	r3, [r7, #4]
    69e8:	683a      	ldr	r2, [r7, #0]
    69ea:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    69ec:	2117      	movs	r1, #23
    69ee:	6878      	ldr	r0, [r7, #4]
    69f0:	4b02      	ldr	r3, [pc, #8]	; (69fc <hri_sercomspi_write_CTRLB_reg+0x20>)
    69f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69f4:	bf00      	nop
    69f6:	3708      	adds	r7, #8
    69f8:	46bd      	mov	sp, r7
    69fa:	bd80      	pop	{r7, pc}
    69fc:	0000663d 	.word	0x0000663d

00006a00 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6a00:	b480      	push	{r7}
    6a02:	b083      	sub	sp, #12
    6a04:	af00      	add	r7, sp, #0
    6a06:	6078      	str	r0, [r7, #4]
    6a08:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6a0a:	687b      	ldr	r3, [r7, #4]
    6a0c:	683a      	ldr	r2, [r7, #0]
    6a0e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a10:	bf00      	nop
    6a12:	370c      	adds	r7, #12
    6a14:	46bd      	mov	sp, r7
    6a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a1a:	4770      	bx	lr

00006a1c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6a1c:	b480      	push	{r7}
    6a1e:	b083      	sub	sp, #12
    6a20:	af00      	add	r7, sp, #0
    6a22:	6078      	str	r0, [r7, #4]
    6a24:	460b      	mov	r3, r1
    6a26:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6a28:	687b      	ldr	r3, [r7, #4]
    6a2a:	78fa      	ldrb	r2, [r7, #3]
    6a2c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a2e:	bf00      	nop
    6a30:	370c      	adds	r7, #12
    6a32:	46bd      	mov	sp, r7
    6a34:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a38:	4770      	bx	lr
	...

00006a3c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6a3c:	b580      	push	{r7, lr}
    6a3e:	b084      	sub	sp, #16
    6a40:	af00      	add	r7, sp, #0
    6a42:	6078      	str	r0, [r7, #4]
    6a44:	460b      	mov	r3, r1
    6a46:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6a48:	687b      	ldr	r3, [r7, #4]
    6a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a4c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6a4e:	68fb      	ldr	r3, [r7, #12]
    6a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6a54:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6a56:	78fb      	ldrb	r3, [r7, #3]
    6a58:	039b      	lsls	r3, r3, #14
    6a5a:	461a      	mov	r2, r3
    6a5c:	68fb      	ldr	r3, [r7, #12]
    6a5e:	4313      	orrs	r3, r2
    6a60:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6a62:	687b      	ldr	r3, [r7, #4]
    6a64:	68fa      	ldr	r2, [r7, #12]
    6a66:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a68:	2104      	movs	r1, #4
    6a6a:	6878      	ldr	r0, [r7, #4]
    6a6c:	4b02      	ldr	r3, [pc, #8]	; (6a78 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    6a6e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a70:	bf00      	nop
    6a72:	3710      	adds	r7, #16
    6a74:	46bd      	mov	sp, r7
    6a76:	bd80      	pop	{r7, pc}
    6a78:	000065f1 	.word	0x000065f1

00006a7c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6a7c:	b580      	push	{r7, lr}
    6a7e:	b082      	sub	sp, #8
    6a80:	af00      	add	r7, sp, #0
    6a82:	6078      	str	r0, [r7, #4]
    6a84:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6a86:	687b      	ldr	r3, [r7, #4]
    6a88:	683a      	ldr	r2, [r7, #0]
    6a8a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a8c:	2104      	movs	r1, #4
    6a8e:	6878      	ldr	r0, [r7, #4]
    6a90:	4b02      	ldr	r3, [pc, #8]	; (6a9c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    6a92:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a94:	bf00      	nop
    6a96:	3708      	adds	r7, #8
    6a98:	46bd      	mov	sp, r7
    6a9a:	bd80      	pop	{r7, pc}
    6a9c:	000065f1 	.word	0x000065f1

00006aa0 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6aa0:	b580      	push	{r7, lr}
    6aa2:	b082      	sub	sp, #8
    6aa4:	af00      	add	r7, sp, #0
    6aa6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6aa8:	2104      	movs	r1, #4
    6aaa:	6878      	ldr	r0, [r7, #4]
    6aac:	4b03      	ldr	r3, [pc, #12]	; (6abc <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6aae:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6ab0:	687b      	ldr	r3, [r7, #4]
    6ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6ab4:	4618      	mov	r0, r3
    6ab6:	3708      	adds	r7, #8
    6ab8:	46bd      	mov	sp, r7
    6aba:	bd80      	pop	{r7, pc}
    6abc:	000065f1 	.word	0x000065f1

00006ac0 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6ac0:	b480      	push	{r7}
    6ac2:	b083      	sub	sp, #12
    6ac4:	af00      	add	r7, sp, #0
    6ac6:	6078      	str	r0, [r7, #4]
    6ac8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6aca:	687b      	ldr	r3, [r7, #4]
    6acc:	683a      	ldr	r2, [r7, #0]
    6ace:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ad0:	bf00      	nop
    6ad2:	370c      	adds	r7, #12
    6ad4:	46bd      	mov	sp, r7
    6ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ada:	4770      	bx	lr

00006adc <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6adc:	b580      	push	{r7, lr}
    6ade:	b082      	sub	sp, #8
    6ae0:	af00      	add	r7, sp, #0
    6ae2:	6078      	str	r0, [r7, #4]
    6ae4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6ae6:	687b      	ldr	r3, [r7, #4]
    6ae8:	683a      	ldr	r2, [r7, #0]
    6aea:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6aec:	2104      	movs	r1, #4
    6aee:	6878      	ldr	r0, [r7, #4]
    6af0:	4b02      	ldr	r3, [pc, #8]	; (6afc <hri_sercomi2cm_write_DATA_reg+0x20>)
    6af2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6af4:	bf00      	nop
    6af6:	3708      	adds	r7, #8
    6af8:	46bd      	mov	sp, r7
    6afa:	bd80      	pop	{r7, pc}
    6afc:	000065f1 	.word	0x000065f1

00006b00 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6b00:	b580      	push	{r7, lr}
    6b02:	b082      	sub	sp, #8
    6b04:	af00      	add	r7, sp, #0
    6b06:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6b08:	2104      	movs	r1, #4
    6b0a:	6878      	ldr	r0, [r7, #4]
    6b0c:	4b03      	ldr	r3, [pc, #12]	; (6b1c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6b0e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6b10:	687b      	ldr	r3, [r7, #4]
    6b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6b14:	4618      	mov	r0, r3
    6b16:	3708      	adds	r7, #8
    6b18:	46bd      	mov	sp, r7
    6b1a:	bd80      	pop	{r7, pc}
    6b1c:	000065f1 	.word	0x000065f1

00006b20 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6b20:	b480      	push	{r7}
    6b22:	b083      	sub	sp, #12
    6b24:	af00      	add	r7, sp, #0
    6b26:	6078      	str	r0, [r7, #4]
    6b28:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6b2a:	687b      	ldr	r3, [r7, #4]
    6b2c:	683a      	ldr	r2, [r7, #0]
    6b2e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b30:	bf00      	nop
    6b32:	370c      	adds	r7, #12
    6b34:	46bd      	mov	sp, r7
    6b36:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b3a:	4770      	bx	lr

00006b3c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6b3c:	b480      	push	{r7}
    6b3e:	b083      	sub	sp, #12
    6b40:	af00      	add	r7, sp, #0
    6b42:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6b48:	4618      	mov	r0, r3
    6b4a:	370c      	adds	r7, #12
    6b4c:	46bd      	mov	sp, r7
    6b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b52:	4770      	bx	lr

00006b54 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6b54:	b480      	push	{r7}
    6b56:	b083      	sub	sp, #12
    6b58:	af00      	add	r7, sp, #0
    6b5a:	6078      	str	r0, [r7, #4]
    6b5c:	460b      	mov	r3, r1
    6b5e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6b60:	687b      	ldr	r3, [r7, #4]
    6b62:	78fa      	ldrb	r2, [r7, #3]
    6b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b68:	bf00      	nop
    6b6a:	370c      	adds	r7, #12
    6b6c:	46bd      	mov	sp, r7
    6b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b72:	4770      	bx	lr

00006b74 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6b74:	b480      	push	{r7}
    6b76:	b083      	sub	sp, #12
    6b78:	af00      	add	r7, sp, #0
    6b7a:	6078      	str	r0, [r7, #4]
    6b7c:	460b      	mov	r3, r1
    6b7e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6b80:	687b      	ldr	r3, [r7, #4]
    6b82:	887a      	ldrh	r2, [r7, #2]
    6b84:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b86:	bf00      	nop
    6b88:	370c      	adds	r7, #12
    6b8a:	46bd      	mov	sp, r7
    6b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b90:	4770      	bx	lr
	...

00006b94 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    6b94:	b580      	push	{r7, lr}
    6b96:	b082      	sub	sp, #8
    6b98:	af00      	add	r7, sp, #0
    6b9a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6b9c:	2104      	movs	r1, #4
    6b9e:	6878      	ldr	r0, [r7, #4]
    6ba0:	4b06      	ldr	r3, [pc, #24]	; (6bbc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    6ba2:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6ba4:	687b      	ldr	r3, [r7, #4]
    6ba6:	8b5b      	ldrh	r3, [r3, #26]
    6ba8:	b29b      	uxth	r3, r3
    6baa:	091b      	lsrs	r3, r3, #4
    6bac:	b29b      	uxth	r3, r3
    6bae:	f003 0303 	and.w	r3, r3, #3
    6bb2:	b29b      	uxth	r3, r3
}
    6bb4:	4618      	mov	r0, r3
    6bb6:	3708      	adds	r7, #8
    6bb8:	46bd      	mov	sp, r7
    6bba:	bd80      	pop	{r7, pc}
    6bbc:	000065f1 	.word	0x000065f1

00006bc0 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6bc0:	b580      	push	{r7, lr}
    6bc2:	b082      	sub	sp, #8
    6bc4:	af00      	add	r7, sp, #0
    6bc6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6bc8:	2104      	movs	r1, #4
    6bca:	6878      	ldr	r0, [r7, #4]
    6bcc:	4b04      	ldr	r3, [pc, #16]	; (6be0 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6bce:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6bd0:	687b      	ldr	r3, [r7, #4]
    6bd2:	8b5b      	ldrh	r3, [r3, #26]
    6bd4:	b29b      	uxth	r3, r3
}
    6bd6:	4618      	mov	r0, r3
    6bd8:	3708      	adds	r7, #8
    6bda:	46bd      	mov	sp, r7
    6bdc:	bd80      	pop	{r7, pc}
    6bde:	bf00      	nop
    6be0:	000065f1 	.word	0x000065f1

00006be4 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6be4:	b580      	push	{r7, lr}
    6be6:	b082      	sub	sp, #8
    6be8:	af00      	add	r7, sp, #0
    6bea:	6078      	str	r0, [r7, #4]
    6bec:	460b      	mov	r3, r1
    6bee:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6bf0:	687b      	ldr	r3, [r7, #4]
    6bf2:	887a      	ldrh	r2, [r7, #2]
    6bf4:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6bf6:	2104      	movs	r1, #4
    6bf8:	6878      	ldr	r0, [r7, #4]
    6bfa:	4b03      	ldr	r3, [pc, #12]	; (6c08 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6bfc:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6bfe:	bf00      	nop
    6c00:	3708      	adds	r7, #8
    6c02:	46bd      	mov	sp, r7
    6c04:	bd80      	pop	{r7, pc}
    6c06:	bf00      	nop
    6c08:	000065f1 	.word	0x000065f1

00006c0c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6c0c:	b4b0      	push	{r4, r5, r7}
    6c0e:	b08d      	sub	sp, #52	; 0x34
    6c10:	af00      	add	r7, sp, #0
    6c12:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6c14:	4b13      	ldr	r3, [pc, #76]	; (6c64 <_sercom_get_hardware_index+0x58>)
    6c16:	f107 040c 	add.w	r4, r7, #12
    6c1a:	461d      	mov	r5, r3
    6c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6c20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c28:	2300      	movs	r3, #0
    6c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    6c2c:	e010      	b.n	6c50 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c30:	009b      	lsls	r3, r3, #2
    6c32:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6c36:	4413      	add	r3, r2
    6c38:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6c3c:	461a      	mov	r2, r3
    6c3e:	687b      	ldr	r3, [r7, #4]
    6c40:	429a      	cmp	r2, r3
    6c42:	d102      	bne.n	6c4a <_sercom_get_hardware_index+0x3e>
			return i;
    6c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c46:	b2db      	uxtb	r3, r3
    6c48:	e006      	b.n	6c58 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c4c:	3301      	adds	r3, #1
    6c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c52:	2b07      	cmp	r3, #7
    6c54:	d9eb      	bls.n	6c2e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6c56:	2300      	movs	r3, #0
}
    6c58:	4618      	mov	r0, r3
    6c5a:	3734      	adds	r7, #52	; 0x34
    6c5c:	46bd      	mov	sp, r7
    6c5e:	bcb0      	pop	{r4, r5, r7}
    6c60:	4770      	bx	lr
    6c62:	bf00      	nop
    6c64:	000140fc 	.word	0x000140fc

00006c68 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6c68:	b580      	push	{r7, lr}
    6c6a:	b084      	sub	sp, #16
    6c6c:	af00      	add	r7, sp, #0
    6c6e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6c70:	6878      	ldr	r0, [r7, #4]
    6c72:	4b13      	ldr	r3, [pc, #76]	; (6cc0 <_get_i2cm_index+0x58>)
    6c74:	4798      	blx	r3
    6c76:	4603      	mov	r3, r0
    6c78:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6c7a:	2300      	movs	r3, #0
    6c7c:	73fb      	strb	r3, [r7, #15]
    6c7e:	e010      	b.n	6ca2 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6c80:	7bfa      	ldrb	r2, [r7, #15]
    6c82:	4910      	ldr	r1, [pc, #64]	; (6cc4 <_get_i2cm_index+0x5c>)
    6c84:	4613      	mov	r3, r2
    6c86:	005b      	lsls	r3, r3, #1
    6c88:	4413      	add	r3, r2
    6c8a:	00db      	lsls	r3, r3, #3
    6c8c:	440b      	add	r3, r1
    6c8e:	781b      	ldrb	r3, [r3, #0]
    6c90:	7bba      	ldrb	r2, [r7, #14]
    6c92:	429a      	cmp	r2, r3
    6c94:	d102      	bne.n	6c9c <_get_i2cm_index+0x34>
			return i;
    6c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6c9a:	e00d      	b.n	6cb8 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6c9c:	7bfb      	ldrb	r3, [r7, #15]
    6c9e:	3301      	adds	r3, #1
    6ca0:	73fb      	strb	r3, [r7, #15]
    6ca2:	7bfb      	ldrb	r3, [r7, #15]
    6ca4:	2b02      	cmp	r3, #2
    6ca6:	d9eb      	bls.n	6c80 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6ca8:	f240 32a6 	movw	r2, #934	; 0x3a6
    6cac:	4906      	ldr	r1, [pc, #24]	; (6cc8 <_get_i2cm_index+0x60>)
    6cae:	2000      	movs	r0, #0
    6cb0:	4b06      	ldr	r3, [pc, #24]	; (6ccc <_get_i2cm_index+0x64>)
    6cb2:	4798      	blx	r3
	return -1;
    6cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
    6cb8:	4618      	mov	r0, r3
    6cba:	3710      	adds	r7, #16
    6cbc:	46bd      	mov	sp, r7
    6cbe:	bd80      	pop	{r7, pc}
    6cc0:	00006c0d 	.word	0x00006c0d
    6cc4:	20000018 	.word	0x20000018
    6cc8:	000140e0 	.word	0x000140e0
    6ccc:	000040dd 	.word	0x000040dd

00006cd0 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6cd0:	b580      	push	{r7, lr}
    6cd2:	b082      	sub	sp, #8
    6cd4:	af00      	add	r7, sp, #0
    6cd6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6cd8:	2103      	movs	r1, #3
    6cda:	6878      	ldr	r0, [r7, #4]
    6cdc:	4b02      	ldr	r3, [pc, #8]	; (6ce8 <_sercom_i2c_send_stop+0x18>)
    6cde:	4798      	blx	r3
}
    6ce0:	bf00      	nop
    6ce2:	3708      	adds	r7, #8
    6ce4:	46bd      	mov	sp, r7
    6ce6:	bd80      	pop	{r7, pc}
    6ce8:	00006989 	.word	0x00006989

00006cec <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6cec:	b590      	push	{r4, r7, lr}
    6cee:	b087      	sub	sp, #28
    6cf0:	af00      	add	r7, sp, #0
    6cf2:	60f8      	str	r0, [r7, #12]
    6cf4:	60b9      	str	r1, [r7, #8]
    6cf6:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6cf8:	68f8      	ldr	r0, [r7, #12]
    6cfa:	4b7d      	ldr	r3, [pc, #500]	; (6ef0 <_sercom_i2c_sync_analyse_flags+0x204>)
    6cfc:	4798      	blx	r3
    6cfe:	4603      	mov	r3, r0
    6d00:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6d02:	68f8      	ldr	r0, [r7, #12]
    6d04:	4b7b      	ldr	r3, [pc, #492]	; (6ef4 <_sercom_i2c_sync_analyse_flags+0x208>)
    6d06:	4798      	blx	r3
    6d08:	4603      	mov	r3, r0
    6d0a:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6d0c:	68bb      	ldr	r3, [r7, #8]
    6d0e:	f003 0301 	and.w	r3, r3, #1
    6d12:	2b00      	cmp	r3, #0
    6d14:	f000 8095 	beq.w	6e42 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6d18:	8a7b      	ldrh	r3, [r7, #18]
    6d1a:	f003 0302 	and.w	r3, r3, #2
    6d1e:	2b00      	cmp	r3, #0
    6d20:	d01d      	beq.n	6d5e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6d22:	68f8      	ldr	r0, [r7, #12]
    6d24:	4b74      	ldr	r3, [pc, #464]	; (6ef8 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6d26:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6d28:	687b      	ldr	r3, [r7, #4]
    6d2a:	885b      	ldrh	r3, [r3, #2]
    6d2c:	b29b      	uxth	r3, r3
    6d2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6d32:	b29a      	uxth	r2, r3
    6d34:	687b      	ldr	r3, [r7, #4]
    6d36:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6d38:	687b      	ldr	r3, [r7, #4]
    6d3a:	885b      	ldrh	r3, [r3, #2]
    6d3c:	b29b      	uxth	r3, r3
    6d3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d42:	b29a      	uxth	r2, r3
    6d44:	687b      	ldr	r3, [r7, #4]
    6d46:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6d48:	8a7b      	ldrh	r3, [r7, #18]
    6d4a:	f003 0301 	and.w	r3, r3, #1
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d002      	beq.n	6d58 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6d52:	f06f 0304 	mvn.w	r3, #4
    6d56:	e0c6      	b.n	6ee6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6d58:	f06f 0303 	mvn.w	r3, #3
    6d5c:	e0c3      	b.n	6ee6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6d5e:	8a7b      	ldrh	r3, [r7, #18]
    6d60:	f003 0304 	and.w	r3, r3, #4
    6d64:	2b00      	cmp	r3, #0
    6d66:	d01f      	beq.n	6da8 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6d68:	687b      	ldr	r3, [r7, #4]
    6d6a:	685b      	ldr	r3, [r3, #4]
    6d6c:	2b00      	cmp	r3, #0
    6d6e:	dd07      	ble.n	6d80 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6d70:	687b      	ldr	r3, [r7, #4]
    6d72:	885b      	ldrh	r3, [r3, #2]
    6d74:	b29b      	uxth	r3, r3
    6d76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6d7a:	b29a      	uxth	r2, r3
    6d7c:	687b      	ldr	r3, [r7, #4]
    6d7e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	885b      	ldrh	r3, [r3, #2]
    6d84:	b29b      	uxth	r3, r3
    6d86:	b21b      	sxth	r3, r3
    6d88:	2b00      	cmp	r3, #0
    6d8a:	da02      	bge.n	6d92 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6d8c:	68f8      	ldr	r0, [r7, #12]
    6d8e:	4b5b      	ldr	r3, [pc, #364]	; (6efc <_sercom_i2c_sync_analyse_flags+0x210>)
    6d90:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6d92:	687b      	ldr	r3, [r7, #4]
    6d94:	885b      	ldrh	r3, [r3, #2]
    6d96:	b29b      	uxth	r3, r3
    6d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d9c:	b29a      	uxth	r2, r3
    6d9e:	687b      	ldr	r3, [r7, #4]
    6da0:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6da2:	f06f 0301 	mvn.w	r3, #1
    6da6:	e09e      	b.n	6ee6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6da8:	687b      	ldr	r3, [r7, #4]
    6daa:	885b      	ldrh	r3, [r3, #2]
    6dac:	b29b      	uxth	r3, r3
    6dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6db2:	2b00      	cmp	r3, #0
    6db4:	d01c      	beq.n	6df0 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6db6:	687b      	ldr	r3, [r7, #4]
    6db8:	881b      	ldrh	r3, [r3, #0]
    6dba:	121b      	asrs	r3, r3, #8
    6dbc:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6dbe:	f003 0406 	and.w	r4, r3, #6
    6dc2:	68f8      	ldr	r0, [r7, #12]
    6dc4:	4b4e      	ldr	r3, [pc, #312]	; (6f00 <_sercom_i2c_sync_analyse_flags+0x214>)
    6dc6:	4798      	blx	r3
    6dc8:	4603      	mov	r3, r0
    6dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6dce:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6dd0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6dd4:	4619      	mov	r1, r3
    6dd6:	68f8      	ldr	r0, [r7, #12]
    6dd8:	4b4a      	ldr	r3, [pc, #296]	; (6f04 <_sercom_i2c_sync_analyse_flags+0x218>)
    6dda:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6ddc:	687b      	ldr	r3, [r7, #4]
    6dde:	885b      	ldrh	r3, [r3, #2]
    6de0:	b29b      	uxth	r3, r3
    6de2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6de6:	b29a      	uxth	r2, r3
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6dec:	2300      	movs	r3, #0
    6dee:	e07a      	b.n	6ee6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6df0:	687b      	ldr	r3, [r7, #4]
    6df2:	685b      	ldr	r3, [r3, #4]
    6df4:	2b00      	cmp	r3, #0
    6df6:	d111      	bne.n	6e1c <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6df8:	687b      	ldr	r3, [r7, #4]
    6dfa:	885b      	ldrh	r3, [r3, #2]
    6dfc:	b29b      	uxth	r3, r3
    6dfe:	b21b      	sxth	r3, r3
    6e00:	2b00      	cmp	r3, #0
    6e02:	da02      	bge.n	6e0a <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6e04:	68f8      	ldr	r0, [r7, #12]
    6e06:	4b3d      	ldr	r3, [pc, #244]	; (6efc <_sercom_i2c_sync_analyse_flags+0x210>)
    6e08:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6e0a:	687b      	ldr	r3, [r7, #4]
    6e0c:	885b      	ldrh	r3, [r3, #2]
    6e0e:	b29b      	uxth	r3, r3
    6e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e14:	b29a      	uxth	r2, r3
    6e16:	687b      	ldr	r3, [r7, #4]
    6e18:	805a      	strh	r2, [r3, #2]
    6e1a:	e010      	b.n	6e3e <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6e1c:	687b      	ldr	r3, [r7, #4]
    6e1e:	689b      	ldr	r3, [r3, #8]
    6e20:	781b      	ldrb	r3, [r3, #0]
    6e22:	4619      	mov	r1, r3
    6e24:	68f8      	ldr	r0, [r7, #12]
    6e26:	4b38      	ldr	r3, [pc, #224]	; (6f08 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6e28:	4798      	blx	r3
				msg->buffer++;
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	689b      	ldr	r3, [r3, #8]
    6e2e:	1c5a      	adds	r2, r3, #1
    6e30:	687b      	ldr	r3, [r7, #4]
    6e32:	609a      	str	r2, [r3, #8]
				msg->len--;
    6e34:	687b      	ldr	r3, [r7, #4]
    6e36:	685b      	ldr	r3, [r3, #4]
    6e38:	1e5a      	subs	r2, r3, #1
    6e3a:	687b      	ldr	r3, [r7, #4]
    6e3c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6e3e:	2300      	movs	r3, #0
    6e40:	e051      	b.n	6ee6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6e42:	68bb      	ldr	r3, [r7, #8]
    6e44:	f003 0302 	and.w	r3, r3, #2
    6e48:	2b00      	cmp	r3, #0
    6e4a:	d04b      	beq.n	6ee4 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	685b      	ldr	r3, [r3, #4]
    6e50:	2b00      	cmp	r3, #0
    6e52:	d041      	beq.n	6ed8 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6e54:	8a7b      	ldrh	r3, [r7, #18]
    6e56:	f003 0304 	and.w	r3, r3, #4
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d13c      	bne.n	6ed8 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6e5e:	687b      	ldr	r3, [r7, #4]
    6e60:	685b      	ldr	r3, [r3, #4]
    6e62:	1e5a      	subs	r2, r3, #1
    6e64:	687b      	ldr	r3, [r7, #4]
    6e66:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6e68:	687b      	ldr	r3, [r7, #4]
    6e6a:	685b      	ldr	r3, [r3, #4]
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d102      	bne.n	6e76 <_sercom_i2c_sync_analyse_flags+0x18a>
    6e70:	697b      	ldr	r3, [r7, #20]
    6e72:	2b00      	cmp	r3, #0
    6e74:	d006      	beq.n	6e84 <_sercom_i2c_sync_analyse_flags+0x198>
    6e76:	687b      	ldr	r3, [r7, #4]
    6e78:	685b      	ldr	r3, [r3, #4]
    6e7a:	2b01      	cmp	r3, #1
    6e7c:	d105      	bne.n	6e8a <_sercom_i2c_sync_analyse_flags+0x19e>
    6e7e:	697b      	ldr	r3, [r7, #20]
    6e80:	2b00      	cmp	r3, #0
    6e82:	d002      	beq.n	6e8a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6e84:	68f8      	ldr	r0, [r7, #12]
    6e86:	4b21      	ldr	r3, [pc, #132]	; (6f0c <_sercom_i2c_sync_analyse_flags+0x220>)
    6e88:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6e8a:	687b      	ldr	r3, [r7, #4]
    6e8c:	685b      	ldr	r3, [r3, #4]
    6e8e:	2b00      	cmp	r3, #0
    6e90:	d113      	bne.n	6eba <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6e92:	687b      	ldr	r3, [r7, #4]
    6e94:	885b      	ldrh	r3, [r3, #2]
    6e96:	b29b      	uxth	r3, r3
    6e98:	b21b      	sxth	r3, r3
    6e9a:	2b00      	cmp	r3, #0
    6e9c:	da05      	bge.n	6eaa <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6e9e:	68f8      	ldr	r0, [r7, #12]
    6ea0:	4b1b      	ldr	r3, [pc, #108]	; (6f10 <_sercom_i2c_sync_analyse_flags+0x224>)
    6ea2:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6ea4:	68f8      	ldr	r0, [r7, #12]
    6ea6:	4b15      	ldr	r3, [pc, #84]	; (6efc <_sercom_i2c_sync_analyse_flags+0x210>)
    6ea8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6eaa:	687b      	ldr	r3, [r7, #4]
    6eac:	885b      	ldrh	r3, [r3, #2]
    6eae:	b29b      	uxth	r3, r3
    6eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6eb4:	b29a      	uxth	r2, r3
    6eb6:	687b      	ldr	r3, [r7, #4]
    6eb8:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	689c      	ldr	r4, [r3, #8]
    6ebe:	1c62      	adds	r2, r4, #1
    6ec0:	687b      	ldr	r3, [r7, #4]
    6ec2:	609a      	str	r2, [r3, #8]
    6ec4:	68f8      	ldr	r0, [r7, #12]
    6ec6:	4b13      	ldr	r3, [pc, #76]	; (6f14 <_sercom_i2c_sync_analyse_flags+0x228>)
    6ec8:	4798      	blx	r3
    6eca:	4603      	mov	r3, r0
    6ecc:	b2db      	uxtb	r3, r3
    6ece:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6ed0:	68f8      	ldr	r0, [r7, #12]
    6ed2:	4b11      	ldr	r3, [pc, #68]	; (6f18 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6ed4:	4798      	blx	r3
    6ed6:	e005      	b.n	6ee4 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6ed8:	68f8      	ldr	r0, [r7, #12]
    6eda:	4b0f      	ldr	r3, [pc, #60]	; (6f18 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6edc:	4798      	blx	r3
			return I2C_NACK;
    6ede:	f06f 0301 	mvn.w	r3, #1
    6ee2:	e000      	b.n	6ee6 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6ee4:	2300      	movs	r3, #0
}
    6ee6:	4618      	mov	r0, r3
    6ee8:	371c      	adds	r7, #28
    6eea:	46bd      	mov	sp, r7
    6eec:	bd90      	pop	{r4, r7, pc}
    6eee:	bf00      	nop
    6ef0:	00006789 	.word	0x00006789
    6ef4:	00006bc1 	.word	0x00006bc1
    6ef8:	00006689 	.word	0x00006689
    6efc:	00006cd1 	.word	0x00006cd1
    6f00:	00006aa1 	.word	0x00006aa1
    6f04:	00006a7d 	.word	0x00006a7d
    6f08:	00006add 	.word	0x00006add
    6f0c:	00006939 	.word	0x00006939
    6f10:	00006911 	.word	0x00006911
    6f14:	00006b01 	.word	0x00006b01
    6f18:	000066a3 	.word	0x000066a3

00006f1c <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6f1c:	b580      	push	{r7, lr}
    6f1e:	b082      	sub	sp, #8
    6f20:	af00      	add	r7, sp, #0
    6f22:	6078      	str	r0, [r7, #4]
    6f24:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6f26:	687b      	ldr	r3, [r7, #4]
    6f28:	2b00      	cmp	r3, #0
    6f2a:	bf14      	ite	ne
    6f2c:	2301      	movne	r3, #1
    6f2e:	2300      	moveq	r3, #0
    6f30:	b2db      	uxtb	r3, r3
    6f32:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6f36:	4908      	ldr	r1, [pc, #32]	; (6f58 <_i2c_m_sync_init+0x3c>)
    6f38:	4618      	mov	r0, r3
    6f3a:	4b08      	ldr	r3, [pc, #32]	; (6f5c <_i2c_m_sync_init+0x40>)
    6f3c:	4798      	blx	r3

	i2c_dev->hw = hw;
    6f3e:	687b      	ldr	r3, [r7, #4]
    6f40:	683a      	ldr	r2, [r7, #0]
    6f42:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6f44:	687b      	ldr	r3, [r7, #4]
    6f46:	6839      	ldr	r1, [r7, #0]
    6f48:	4618      	mov	r0, r3
    6f4a:	4b05      	ldr	r3, [pc, #20]	; (6f60 <_i2c_m_sync_init+0x44>)
    6f4c:	4798      	blx	r3
    6f4e:	4603      	mov	r3, r0
}
    6f50:	4618      	mov	r0, r3
    6f52:	3708      	adds	r7, #8
    6f54:	46bd      	mov	sp, r7
    6f56:	bd80      	pop	{r7, pc}
    6f58:	000140e0 	.word	0x000140e0
    6f5c:	000040dd 	.word	0x000040dd
    6f60:	00007335 	.word	0x00007335

00006f64 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6f64:	b580      	push	{r7, lr}
    6f66:	b082      	sub	sp, #8
    6f68:	af00      	add	r7, sp, #0
    6f6a:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6f6c:	687b      	ldr	r3, [r7, #4]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	bf14      	ite	ne
    6f72:	2301      	movne	r3, #1
    6f74:	2300      	moveq	r3, #0
    6f76:	b2db      	uxtb	r3, r3
    6f78:	f240 5235 	movw	r2, #1333	; 0x535
    6f7c:	4906      	ldr	r1, [pc, #24]	; (6f98 <_i2c_m_sync_enable+0x34>)
    6f7e:	4618      	mov	r0, r3
    6f80:	4b06      	ldr	r3, [pc, #24]	; (6f9c <_i2c_m_sync_enable+0x38>)
    6f82:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6f84:	687b      	ldr	r3, [r7, #4]
    6f86:	691b      	ldr	r3, [r3, #16]
    6f88:	4618      	mov	r0, r3
    6f8a:	4b05      	ldr	r3, [pc, #20]	; (6fa0 <_i2c_m_sync_enable+0x3c>)
    6f8c:	4798      	blx	r3
    6f8e:	4603      	mov	r3, r0
}
    6f90:	4618      	mov	r0, r3
    6f92:	3708      	adds	r7, #8
    6f94:	46bd      	mov	sp, r7
    6f96:	bd80      	pop	{r7, pc}
    6f98:	000140e0 	.word	0x000140e0
    6f9c:	000040dd 	.word	0x000040dd
    6fa0:	000072a9 	.word	0x000072a9

00006fa4 <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    6fa4:	b580      	push	{r7, lr}
    6fa6:	b084      	sub	sp, #16
    6fa8:	af00      	add	r7, sp, #0
    6faa:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    6fac:	687b      	ldr	r3, [r7, #4]
    6fae:	691b      	ldr	r3, [r3, #16]
    6fb0:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6fb2:	687b      	ldr	r3, [r7, #4]
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	bf14      	ite	ne
    6fb8:	2301      	movne	r3, #1
    6fba:	2300      	moveq	r3, #0
    6fbc:	b2db      	uxtb	r3, r3
    6fbe:	f240 5243 	movw	r2, #1347	; 0x543
    6fc2:	490c      	ldr	r1, [pc, #48]	; (6ff4 <_i2c_m_sync_disable+0x50>)
    6fc4:	4618      	mov	r0, r3
    6fc6:	4b0c      	ldr	r3, [pc, #48]	; (6ff8 <_i2c_m_sync_disable+0x54>)
    6fc8:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6fca:	687b      	ldr	r3, [r7, #4]
    6fcc:	691b      	ldr	r3, [r3, #16]
    6fce:	2b00      	cmp	r3, #0
    6fd0:	bf14      	ite	ne
    6fd2:	2301      	movne	r3, #1
    6fd4:	2300      	moveq	r3, #0
    6fd6:	b2db      	uxtb	r3, r3
    6fd8:	f240 5244 	movw	r2, #1348	; 0x544
    6fdc:	4905      	ldr	r1, [pc, #20]	; (6ff4 <_i2c_m_sync_disable+0x50>)
    6fde:	4618      	mov	r0, r3
    6fe0:	4b05      	ldr	r3, [pc, #20]	; (6ff8 <_i2c_m_sync_disable+0x54>)
    6fe2:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6fe4:	68f8      	ldr	r0, [r7, #12]
    6fe6:	4b05      	ldr	r3, [pc, #20]	; (6ffc <_i2c_m_sync_disable+0x58>)
    6fe8:	4798      	blx	r3

	return ERR_NONE;
    6fea:	2300      	movs	r3, #0
}
    6fec:	4618      	mov	r0, r3
    6fee:	3710      	adds	r7, #16
    6ff0:	46bd      	mov	sp, r7
    6ff2:	bd80      	pop	{r7, pc}
    6ff4:	000140e0 	.word	0x000140e0
    6ff8:	000040dd 	.word	0x000040dd
    6ffc:	00006761 	.word	0x00006761

00007000 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    7000:	b580      	push	{r7, lr}
    7002:	b084      	sub	sp, #16
    7004:	af00      	add	r7, sp, #0
    7006:	6078      	str	r0, [r7, #4]
    7008:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    700a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    700e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    7010:	687b      	ldr	r3, [r7, #4]
    7012:	691b      	ldr	r3, [r3, #16]
    7014:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    7016:	68b8      	ldr	r0, [r7, #8]
    7018:	4b0f      	ldr	r3, [pc, #60]	; (7058 <_sercom_i2c_sync_wait_bus+0x58>)
    701a:	4798      	blx	r3
    701c:	4603      	mov	r3, r0
    701e:	461a      	mov	r2, r3
    7020:	683b      	ldr	r3, [r7, #0]
    7022:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    7024:	68fb      	ldr	r3, [r7, #12]
    7026:	1e5a      	subs	r2, r3, #1
    7028:	60fa      	str	r2, [r7, #12]
    702a:	2b00      	cmp	r3, #0
    702c:	d102      	bne.n	7034 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    702e:	f06f 0304 	mvn.w	r3, #4
    7032:	e00c      	b.n	704e <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    7034:	683b      	ldr	r3, [r7, #0]
    7036:	681b      	ldr	r3, [r3, #0]
    7038:	f003 0301 	and.w	r3, r3, #1
    703c:	2b00      	cmp	r3, #0
    703e:	d105      	bne.n	704c <_sercom_i2c_sync_wait_bus+0x4c>
    7040:	683b      	ldr	r3, [r7, #0]
    7042:	681b      	ldr	r3, [r3, #0]
    7044:	f003 0302 	and.w	r3, r3, #2
    7048:	2b00      	cmp	r3, #0
    704a:	d0e4      	beq.n	7016 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    704c:	2300      	movs	r3, #0
}
    704e:	4618      	mov	r0, r3
    7050:	3710      	adds	r7, #16
    7052:	46bd      	mov	sp, r7
    7054:	bd80      	pop	{r7, pc}
    7056:	bf00      	nop
    7058:	000066bd 	.word	0x000066bd

0000705c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    705c:	b590      	push	{r4, r7, lr}
    705e:	b087      	sub	sp, #28
    7060:	af00      	add	r7, sp, #0
    7062:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    7064:	687b      	ldr	r3, [r7, #4]
    7066:	691b      	ldr	r3, [r3, #16]
    7068:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    706a:	687b      	ldr	r3, [r7, #4]
    706c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    706e:	6978      	ldr	r0, [r7, #20]
    7070:	4b39      	ldr	r3, [pc, #228]	; (7158 <_sercom_i2c_sync_send_address+0xfc>)
    7072:	4798      	blx	r3
    7074:	4603      	mov	r3, r0
    7076:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    7078:	687b      	ldr	r3, [r7, #4]
    707a:	2b00      	cmp	r3, #0
    707c:	bf14      	ite	ne
    707e:	2301      	movne	r3, #1
    7080:	2300      	moveq	r3, #0
    7082:	b2db      	uxtb	r3, r3
    7084:	f240 52a5 	movw	r2, #1445	; 0x5a5
    7088:	4934      	ldr	r1, [pc, #208]	; (715c <_sercom_i2c_sync_send_address+0x100>)
    708a:	4618      	mov	r0, r3
    708c:	4b34      	ldr	r3, [pc, #208]	; (7160 <_sercom_i2c_sync_send_address+0x104>)
    708e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    7090:	693b      	ldr	r3, [r7, #16]
    7092:	685b      	ldr	r3, [r3, #4]
    7094:	2b01      	cmp	r3, #1
    7096:	d106      	bne.n	70a6 <_sercom_i2c_sync_send_address+0x4a>
    7098:	68fb      	ldr	r3, [r7, #12]
    709a:	2b00      	cmp	r3, #0
    709c:	d003      	beq.n	70a6 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    709e:	6978      	ldr	r0, [r7, #20]
    70a0:	4b30      	ldr	r3, [pc, #192]	; (7164 <_sercom_i2c_sync_send_address+0x108>)
    70a2:	4798      	blx	r3
    70a4:	e002      	b.n	70ac <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    70a6:	6978      	ldr	r0, [r7, #20]
    70a8:	4b2f      	ldr	r3, [pc, #188]	; (7168 <_sercom_i2c_sync_send_address+0x10c>)
    70aa:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    70ac:	693b      	ldr	r3, [r7, #16]
    70ae:	881b      	ldrh	r3, [r3, #0]
    70b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    70b4:	2b00      	cmp	r3, #0
    70b6:	d022      	beq.n	70fe <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    70b8:	693b      	ldr	r3, [r7, #16]
    70ba:	885b      	ldrh	r3, [r3, #2]
    70bc:	b29b      	uxth	r3, r3
    70be:	f003 0301 	and.w	r3, r3, #1
    70c2:	2b00      	cmp	r3, #0
    70c4:	d007      	beq.n	70d6 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    70c6:	693b      	ldr	r3, [r7, #16]
    70c8:	885b      	ldrh	r3, [r3, #2]
    70ca:	b29b      	uxth	r3, r3
    70cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    70d0:	b29a      	uxth	r2, r3
    70d2:	693b      	ldr	r3, [r7, #16]
    70d4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    70d6:	693b      	ldr	r3, [r7, #16]
    70d8:	881b      	ldrh	r3, [r3, #0]
    70da:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    70dc:	f240 74fe 	movw	r4, #2046	; 0x7fe
    70e0:	401c      	ands	r4, r3
    70e2:	6978      	ldr	r0, [r7, #20]
    70e4:	4b21      	ldr	r3, [pc, #132]	; (716c <_sercom_i2c_sync_send_address+0x110>)
    70e6:	4798      	blx	r3
    70e8:	4603      	mov	r3, r0
    70ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    70ee:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    70f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    70f4:	4619      	mov	r1, r3
    70f6:	6978      	ldr	r0, [r7, #20]
    70f8:	4b1d      	ldr	r3, [pc, #116]	; (7170 <_sercom_i2c_sync_send_address+0x114>)
    70fa:	4798      	blx	r3
    70fc:	e01a      	b.n	7134 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    70fe:	693b      	ldr	r3, [r7, #16]
    7100:	881b      	ldrh	r3, [r3, #0]
    7102:	005b      	lsls	r3, r3, #1
    7104:	b2db      	uxtb	r3, r3
    7106:	693a      	ldr	r2, [r7, #16]
    7108:	8852      	ldrh	r2, [r2, #2]
    710a:	b292      	uxth	r2, r2
    710c:	f002 0201 	and.w	r2, r2, #1
    7110:	2a00      	cmp	r2, #0
    7112:	bf14      	ite	ne
    7114:	2201      	movne	r2, #1
    7116:	2200      	moveq	r2, #0
    7118:	b2d2      	uxtb	r2, r2
    711a:	4313      	orrs	r3, r2
    711c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    711e:	6978      	ldr	r0, [r7, #20]
    7120:	4b12      	ldr	r3, [pc, #72]	; (716c <_sercom_i2c_sync_send_address+0x110>)
    7122:	4798      	blx	r3
    7124:	4603      	mov	r3, r0
    7126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    712a:	4323      	orrs	r3, r4
    712c:	4619      	mov	r1, r3
    712e:	6978      	ldr	r0, [r7, #20]
    7130:	4b0f      	ldr	r3, [pc, #60]	; (7170 <_sercom_i2c_sync_send_address+0x114>)
    7132:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    7134:	f107 0308 	add.w	r3, r7, #8
    7138:	4619      	mov	r1, r3
    713a:	6878      	ldr	r0, [r7, #4]
    713c:	4b0d      	ldr	r3, [pc, #52]	; (7174 <_sercom_i2c_sync_send_address+0x118>)
    713e:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    7140:	68bb      	ldr	r3, [r7, #8]
    7142:	693a      	ldr	r2, [r7, #16]
    7144:	4619      	mov	r1, r3
    7146:	6978      	ldr	r0, [r7, #20]
    7148:	4b0b      	ldr	r3, [pc, #44]	; (7178 <_sercom_i2c_sync_send_address+0x11c>)
    714a:	4798      	blx	r3
    714c:	4603      	mov	r3, r0
}
    714e:	4618      	mov	r0, r3
    7150:	371c      	adds	r7, #28
    7152:	46bd      	mov	sp, r7
    7154:	bd90      	pop	{r4, r7, pc}
    7156:	bf00      	nop
    7158:	00006789 	.word	0x00006789
    715c:	000140e0 	.word	0x000140e0
    7160:	000040dd 	.word	0x000040dd
    7164:	00006939 	.word	0x00006939
    7168:	00006961 	.word	0x00006961
    716c:	00006aa1 	.word	0x00006aa1
    7170:	00006a7d 	.word	0x00006a7d
    7174:	00007001 	.word	0x00007001
    7178:	00006ced 	.word	0x00006ced

0000717c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    717c:	b580      	push	{r7, lr}
    717e:	b086      	sub	sp, #24
    7180:	af00      	add	r7, sp, #0
    7182:	6078      	str	r0, [r7, #4]
    7184:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    7186:	687b      	ldr	r3, [r7, #4]
    7188:	691b      	ldr	r3, [r3, #16]
    718a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    718c:	687b      	ldr	r3, [r7, #4]
    718e:	2b00      	cmp	r3, #0
    7190:	bf14      	ite	ne
    7192:	2301      	movne	r3, #1
    7194:	2300      	moveq	r3, #0
    7196:	b2db      	uxtb	r3, r3
    7198:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    719c:	493b      	ldr	r1, [pc, #236]	; (728c <_i2c_m_sync_transfer+0x110>)
    719e:	4618      	mov	r0, r3
    71a0:	4b3b      	ldr	r3, [pc, #236]	; (7290 <_i2c_m_sync_transfer+0x114>)
    71a2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    71a4:	687b      	ldr	r3, [r7, #4]
    71a6:	691b      	ldr	r3, [r3, #16]
    71a8:	2b00      	cmp	r3, #0
    71aa:	bf14      	ite	ne
    71ac:	2301      	movne	r3, #1
    71ae:	2300      	moveq	r3, #0
    71b0:	b2db      	uxtb	r3, r3
    71b2:	f240 52d1 	movw	r2, #1489	; 0x5d1
    71b6:	4935      	ldr	r1, [pc, #212]	; (728c <_i2c_m_sync_transfer+0x110>)
    71b8:	4618      	mov	r0, r3
    71ba:	4b35      	ldr	r3, [pc, #212]	; (7290 <_i2c_m_sync_transfer+0x114>)
    71bc:	4798      	blx	r3
	ASSERT(msg);
    71be:	683b      	ldr	r3, [r7, #0]
    71c0:	2b00      	cmp	r3, #0
    71c2:	bf14      	ite	ne
    71c4:	2301      	movne	r3, #1
    71c6:	2300      	moveq	r3, #0
    71c8:	b2db      	uxtb	r3, r3
    71ca:	f240 52d2 	movw	r2, #1490	; 0x5d2
    71ce:	492f      	ldr	r1, [pc, #188]	; (728c <_i2c_m_sync_transfer+0x110>)
    71d0:	4618      	mov	r0, r3
    71d2:	4b2f      	ldr	r3, [pc, #188]	; (7290 <_i2c_m_sync_transfer+0x114>)
    71d4:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    71d6:	687b      	ldr	r3, [r7, #4]
    71d8:	885b      	ldrh	r3, [r3, #2]
    71da:	b29b      	uxth	r3, r3
    71dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    71e0:	2b00      	cmp	r3, #0
    71e2:	d002      	beq.n	71ea <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    71e4:	f06f 0305 	mvn.w	r3, #5
    71e8:	e04c      	b.n	7284 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    71ea:	683b      	ldr	r3, [r7, #0]
    71ec:	885b      	ldrh	r3, [r3, #2]
    71ee:	b29b      	uxth	r3, r3
    71f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    71f4:	b29a      	uxth	r2, r3
    71f6:	683b      	ldr	r3, [r7, #0]
    71f8:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    71fa:	687b      	ldr	r3, [r7, #4]
    71fc:	683a      	ldr	r2, [r7, #0]
    71fe:	ca07      	ldmia	r2, {r0, r1, r2}
    7200:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    7204:	6938      	ldr	r0, [r7, #16]
    7206:	4b23      	ldr	r3, [pc, #140]	; (7294 <_i2c_m_sync_transfer+0x118>)
    7208:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    720a:	6878      	ldr	r0, [r7, #4]
    720c:	4b22      	ldr	r3, [pc, #136]	; (7298 <_i2c_m_sync_transfer+0x11c>)
    720e:	4798      	blx	r3
    7210:	6178      	str	r0, [r7, #20]

	if (ret) {
    7212:	697b      	ldr	r3, [r7, #20]
    7214:	2b00      	cmp	r3, #0
    7216:	d02d      	beq.n	7274 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7218:	687b      	ldr	r3, [r7, #4]
    721a:	885b      	ldrh	r3, [r3, #2]
    721c:	b29b      	uxth	r3, r3
    721e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7222:	b29a      	uxth	r2, r3
    7224:	687b      	ldr	r3, [r7, #4]
    7226:	805a      	strh	r2, [r3, #2]

		return ret;
    7228:	697b      	ldr	r3, [r7, #20]
    722a:	e02b      	b.n	7284 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    722c:	f107 030c 	add.w	r3, r7, #12
    7230:	4619      	mov	r1, r3
    7232:	6878      	ldr	r0, [r7, #4]
    7234:	4b19      	ldr	r3, [pc, #100]	; (729c <_i2c_m_sync_transfer+0x120>)
    7236:	4798      	blx	r3
    7238:	6178      	str	r0, [r7, #20]

		if (ret) {
    723a:	697b      	ldr	r3, [r7, #20]
    723c:	2b00      	cmp	r3, #0
    723e:	d012      	beq.n	7266 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    7240:	683b      	ldr	r3, [r7, #0]
    7242:	885b      	ldrh	r3, [r3, #2]
    7244:	b29b      	uxth	r3, r3
    7246:	b21b      	sxth	r3, r3
    7248:	2b00      	cmp	r3, #0
    724a:	da02      	bge.n	7252 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    724c:	6938      	ldr	r0, [r7, #16]
    724e:	4b14      	ldr	r3, [pc, #80]	; (72a0 <_i2c_m_sync_transfer+0x124>)
    7250:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7252:	687b      	ldr	r3, [r7, #4]
    7254:	885b      	ldrh	r3, [r3, #2]
    7256:	b29b      	uxth	r3, r3
    7258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    725c:	b29a      	uxth	r2, r3
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	805a      	strh	r2, [r3, #2]

			return ret;
    7262:	697b      	ldr	r3, [r7, #20]
    7264:	e00e      	b.n	7284 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    7266:	68fb      	ldr	r3, [r7, #12]
    7268:	687a      	ldr	r2, [r7, #4]
    726a:	4619      	mov	r1, r3
    726c:	6938      	ldr	r0, [r7, #16]
    726e:	4b0d      	ldr	r3, [pc, #52]	; (72a4 <_i2c_m_sync_transfer+0x128>)
    7270:	4798      	blx	r3
    7272:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7274:	687b      	ldr	r3, [r7, #4]
    7276:	885b      	ldrh	r3, [r3, #2]
    7278:	b29b      	uxth	r3, r3
    727a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    727e:	2b00      	cmp	r3, #0
    7280:	d1d4      	bne.n	722c <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    7282:	697b      	ldr	r3, [r7, #20]
}
    7284:	4618      	mov	r0, r3
    7286:	3718      	adds	r7, #24
    7288:	46bd      	mov	sp, r7
    728a:	bd80      	pop	{r7, pc}
    728c:	000140e0 	.word	0x000140e0
    7290:	000040dd 	.word	0x000040dd
    7294:	000068e9 	.word	0x000068e9
    7298:	0000705d 	.word	0x0000705d
    729c:	00007001 	.word	0x00007001
    72a0:	00006cd1 	.word	0x00006cd1
    72a4:	00006ced 	.word	0x00006ced

000072a8 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    72a8:	b580      	push	{r7, lr}
    72aa:	b084      	sub	sp, #16
    72ac:	af00      	add	r7, sp, #0
    72ae:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    72b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    72b4:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    72b6:	2304      	movs	r3, #4
    72b8:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    72ba:	687b      	ldr	r3, [r7, #4]
    72bc:	2b00      	cmp	r3, #0
    72be:	bf14      	ite	ne
    72c0:	2301      	movne	r3, #1
    72c2:	2300      	moveq	r3, #0
    72c4:	b2db      	uxtb	r3, r3
    72c6:	f240 6205 	movw	r2, #1541	; 0x605
    72ca:	4915      	ldr	r1, [pc, #84]	; (7320 <_i2c_m_enable_implementation+0x78>)
    72cc:	4618      	mov	r0, r3
    72ce:	4b15      	ldr	r3, [pc, #84]	; (7324 <_i2c_m_enable_implementation+0x7c>)
    72d0:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    72d2:	6878      	ldr	r0, [r7, #4]
    72d4:	4b14      	ldr	r3, [pc, #80]	; (7328 <_i2c_m_enable_implementation+0x80>)
    72d6:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    72d8:	e016      	b.n	7308 <_i2c_m_enable_implementation+0x60>
		timeout--;
    72da:	68fb      	ldr	r3, [r7, #12]
    72dc:	3b01      	subs	r3, #1
    72de:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    72e0:	68fb      	ldr	r3, [r7, #12]
    72e2:	2b00      	cmp	r3, #0
    72e4:	dc10      	bgt.n	7308 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    72e6:	68bb      	ldr	r3, [r7, #8]
    72e8:	3b01      	subs	r3, #1
    72ea:	60bb      	str	r3, [r7, #8]
    72ec:	68bb      	ldr	r3, [r7, #8]
    72ee:	2b00      	cmp	r3, #0
    72f0:	d007      	beq.n	7302 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    72f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    72f6:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    72f8:	2110      	movs	r1, #16
    72fa:	6878      	ldr	r0, [r7, #4]
    72fc:	4b0b      	ldr	r3, [pc, #44]	; (732c <_i2c_m_enable_implementation+0x84>)
    72fe:	4798      	blx	r3
    7300:	e002      	b.n	7308 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    7302:	f06f 0305 	mvn.w	r3, #5
    7306:	e006      	b.n	7316 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7308:	6878      	ldr	r0, [r7, #4]
    730a:	4b09      	ldr	r3, [pc, #36]	; (7330 <_i2c_m_enable_implementation+0x88>)
    730c:	4798      	blx	r3
    730e:	4603      	mov	r3, r0
    7310:	2b01      	cmp	r3, #1
    7312:	d1e2      	bne.n	72da <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    7314:	2300      	movs	r3, #0
}
    7316:	4618      	mov	r0, r3
    7318:	3710      	adds	r7, #16
    731a:	46bd      	mov	sp, r7
    731c:	bd80      	pop	{r7, pc}
    731e:	bf00      	nop
    7320:	000140e0 	.word	0x000140e0
    7324:	000040dd 	.word	0x000040dd
    7328:	00006739 	.word	0x00006739
    732c:	00006be5 	.word	0x00006be5
    7330:	00006b95 	.word	0x00006b95

00007334 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    7334:	b580      	push	{r7, lr}
    7336:	b084      	sub	sp, #16
    7338:	af00      	add	r7, sp, #0
    733a:	6078      	str	r0, [r7, #4]
    733c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    733e:	6838      	ldr	r0, [r7, #0]
    7340:	4b42      	ldr	r3, [pc, #264]	; (744c <_i2c_m_sync_init_impl+0x118>)
    7342:	4798      	blx	r3
    7344:	4603      	mov	r3, r0
    7346:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7348:	2101      	movs	r1, #1
    734a:	6838      	ldr	r0, [r7, #0]
    734c:	4b40      	ldr	r3, [pc, #256]	; (7450 <_i2c_m_sync_init_impl+0x11c>)
    734e:	4798      	blx	r3
    7350:	4603      	mov	r3, r0
    7352:	f083 0301 	eor.w	r3, r3, #1
    7356:	b2db      	uxtb	r3, r3
    7358:	2b00      	cmp	r3, #0
    735a:	d020      	beq.n	739e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    735c:	7bfa      	ldrb	r2, [r7, #15]
    735e:	493d      	ldr	r1, [pc, #244]	; (7454 <_i2c_m_sync_init_impl+0x120>)
    7360:	4613      	mov	r3, r2
    7362:	005b      	lsls	r3, r3, #1
    7364:	4413      	add	r3, r2
    7366:	00db      	lsls	r3, r3, #3
    7368:	440b      	add	r3, r1
    736a:	3304      	adds	r3, #4
    736c:	681b      	ldr	r3, [r3, #0]
    736e:	f003 031c 	and.w	r3, r3, #28
    7372:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    7374:	2102      	movs	r1, #2
    7376:	6838      	ldr	r0, [r7, #0]
    7378:	4b37      	ldr	r3, [pc, #220]	; (7458 <_i2c_m_sync_init_impl+0x124>)
    737a:	4798      	blx	r3
    737c:	4603      	mov	r3, r0
    737e:	2b00      	cmp	r3, #0
    7380:	d006      	beq.n	7390 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    7382:	6838      	ldr	r0, [r7, #0]
    7384:	4b35      	ldr	r3, [pc, #212]	; (745c <_i2c_m_sync_init_impl+0x128>)
    7386:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    7388:	2102      	movs	r1, #2
    738a:	6838      	ldr	r0, [r7, #0]
    738c:	4b34      	ldr	r3, [pc, #208]	; (7460 <_i2c_m_sync_init_impl+0x12c>)
    738e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    7390:	68bb      	ldr	r3, [r7, #8]
    7392:	f043 0301 	orr.w	r3, r3, #1
    7396:	4619      	mov	r1, r3
    7398:	6838      	ldr	r0, [r7, #0]
    739a:	4b32      	ldr	r3, [pc, #200]	; (7464 <_i2c_m_sync_init_impl+0x130>)
    739c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    739e:	2101      	movs	r1, #1
    73a0:	6838      	ldr	r0, [r7, #0]
    73a2:	4b2f      	ldr	r3, [pc, #188]	; (7460 <_i2c_m_sync_init_impl+0x12c>)
    73a4:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    73a6:	7bfa      	ldrb	r2, [r7, #15]
    73a8:	492a      	ldr	r1, [pc, #168]	; (7454 <_i2c_m_sync_init_impl+0x120>)
    73aa:	4613      	mov	r3, r2
    73ac:	005b      	lsls	r3, r3, #1
    73ae:	4413      	add	r3, r2
    73b0:	00db      	lsls	r3, r3, #3
    73b2:	440b      	add	r3, r1
    73b4:	3304      	adds	r3, #4
    73b6:	681b      	ldr	r3, [r3, #0]
    73b8:	4619      	mov	r1, r3
    73ba:	6838      	ldr	r0, [r7, #0]
    73bc:	4b29      	ldr	r3, [pc, #164]	; (7464 <_i2c_m_sync_init_impl+0x130>)
    73be:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    73c0:	7bfa      	ldrb	r2, [r7, #15]
    73c2:	4924      	ldr	r1, [pc, #144]	; (7454 <_i2c_m_sync_init_impl+0x120>)
    73c4:	4613      	mov	r3, r2
    73c6:	005b      	lsls	r3, r3, #1
    73c8:	4413      	add	r3, r2
    73ca:	00db      	lsls	r3, r3, #3
    73cc:	440b      	add	r3, r1
    73ce:	3308      	adds	r3, #8
    73d0:	681b      	ldr	r3, [r3, #0]
    73d2:	4619      	mov	r1, r3
    73d4:	6838      	ldr	r0, [r7, #0]
    73d6:	4b24      	ldr	r3, [pc, #144]	; (7468 <_i2c_m_sync_init_impl+0x134>)
    73d8:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    73da:	7bfa      	ldrb	r2, [r7, #15]
    73dc:	491d      	ldr	r1, [pc, #116]	; (7454 <_i2c_m_sync_init_impl+0x120>)
    73de:	4613      	mov	r3, r2
    73e0:	005b      	lsls	r3, r3, #1
    73e2:	4413      	add	r3, r2
    73e4:	00db      	lsls	r3, r3, #3
    73e6:	440b      	add	r3, r1
    73e8:	330c      	adds	r3, #12
    73ea:	681b      	ldr	r3, [r3, #0]
    73ec:	4619      	mov	r1, r3
    73ee:	6838      	ldr	r0, [r7, #0]
    73f0:	4b1e      	ldr	r3, [pc, #120]	; (746c <_i2c_m_sync_init_impl+0x138>)
    73f2:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    73f4:	7bfa      	ldrb	r2, [r7, #15]
    73f6:	4917      	ldr	r1, [pc, #92]	; (7454 <_i2c_m_sync_init_impl+0x120>)
    73f8:	4613      	mov	r3, r2
    73fa:	005b      	lsls	r3, r3, #1
    73fc:	4413      	add	r3, r2
    73fe:	00db      	lsls	r3, r3, #3
    7400:	440b      	add	r3, r1
    7402:	3304      	adds	r3, #4
    7404:	681b      	ldr	r3, [r3, #0]
    7406:	0e1b      	lsrs	r3, r3, #24
    7408:	b29b      	uxth	r3, r3
    740a:	f003 0303 	and.w	r3, r3, #3
    740e:	b29a      	uxth	r2, r3
    7410:	687b      	ldr	r3, [r7, #4]
    7412:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	899b      	ldrh	r3, [r3, #12]
    7418:	2b01      	cmp	r3, #1
    741a:	bf8c      	ite	hi
    741c:	2301      	movhi	r3, #1
    741e:	2300      	movls	r3, #0
    7420:	b2db      	uxtb	r3, r3
    7422:	4619      	mov	r1, r3
    7424:	6838      	ldr	r0, [r7, #0]
    7426:	4b12      	ldr	r3, [pc, #72]	; (7470 <_i2c_m_sync_init_impl+0x13c>)
    7428:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    742a:	7bfa      	ldrb	r2, [r7, #15]
    742c:	4909      	ldr	r1, [pc, #36]	; (7454 <_i2c_m_sync_init_impl+0x120>)
    742e:	4613      	mov	r3, r2
    7430:	005b      	lsls	r3, r3, #1
    7432:	4413      	add	r3, r2
    7434:	00db      	lsls	r3, r3, #3
    7436:	440b      	add	r3, r1
    7438:	3312      	adds	r3, #18
    743a:	881a      	ldrh	r2, [r3, #0]
    743c:	687b      	ldr	r3, [r7, #4]
    743e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7440:	2300      	movs	r3, #0
}
    7442:	4618      	mov	r0, r3
    7444:	3710      	adds	r7, #16
    7446:	46bd      	mov	sp, r7
    7448:	bd80      	pop	{r7, pc}
    744a:	bf00      	nop
    744c:	00006c69 	.word	0x00006c69
    7450:	00006615 	.word	0x00006615
    7454:	20000018 	.word	0x20000018
    7458:	000067b9 	.word	0x000067b9
    745c:	00006761 	.word	0x00006761
    7460:	000065f1 	.word	0x000065f1
    7464:	000067e9 	.word	0x000067e9
    7468:	000069b9 	.word	0x000069b9
    746c:	00006a01 	.word	0x00006a01
    7470:	00006a3d 	.word	0x00006a3d

00007474 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    7474:	b580      	push	{r7, lr}
    7476:	b082      	sub	sp, #8
    7478:	af00      	add	r7, sp, #0
    747a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    747c:	2101      	movs	r1, #1
    747e:	6878      	ldr	r0, [r7, #4]
    7480:	4b07      	ldr	r3, [pc, #28]	; (74a0 <_spi_sync_enable+0x2c>)
    7482:	4798      	blx	r3
    7484:	4603      	mov	r3, r0
    7486:	2b00      	cmp	r3, #0
    7488:	d002      	beq.n	7490 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    748a:	f06f 0303 	mvn.w	r3, #3
    748e:	e003      	b.n	7498 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    7490:	6878      	ldr	r0, [r7, #4]
    7492:	4b04      	ldr	r3, [pc, #16]	; (74a4 <_spi_sync_enable+0x30>)
    7494:	4798      	blx	r3

	return ERR_NONE;
    7496:	2300      	movs	r3, #0
}
    7498:	4618      	mov	r0, r3
    749a:	3708      	adds	r7, #8
    749c:	46bd      	mov	sp, r7
    749e:	bd80      	pop	{r7, pc}
    74a0:	00006661 	.word	0x00006661
    74a4:	0000680d 	.word	0x0000680d

000074a8 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    74a8:	b580      	push	{r7, lr}
    74aa:	b082      	sub	sp, #8
    74ac:	af00      	add	r7, sp, #0
    74ae:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    74b0:	2101      	movs	r1, #1
    74b2:	6878      	ldr	r0, [r7, #4]
    74b4:	4b07      	ldr	r3, [pc, #28]	; (74d4 <_spi_sync_disable+0x2c>)
    74b6:	4798      	blx	r3
    74b8:	4603      	mov	r3, r0
    74ba:	2b00      	cmp	r3, #0
    74bc:	d002      	beq.n	74c4 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    74be:	f06f 0303 	mvn.w	r3, #3
    74c2:	e003      	b.n	74cc <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    74c4:	6878      	ldr	r0, [r7, #4]
    74c6:	4b04      	ldr	r3, [pc, #16]	; (74d8 <_spi_sync_disable+0x30>)
    74c8:	4798      	blx	r3

	return ERR_NONE;
    74ca:	2300      	movs	r3, #0
}
    74cc:	4618      	mov	r0, r3
    74ce:	3708      	adds	r7, #8
    74d0:	46bd      	mov	sp, r7
    74d2:	bd80      	pop	{r7, pc}
    74d4:	00006661 	.word	0x00006661
    74d8:	0000686d 	.word	0x0000686d

000074dc <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    74dc:	b580      	push	{r7, lr}
    74de:	b082      	sub	sp, #8
    74e0:	af00      	add	r7, sp, #0
    74e2:	6078      	str	r0, [r7, #4]
    74e4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    74e6:	687b      	ldr	r3, [r7, #4]
    74e8:	2b00      	cmp	r3, #0
    74ea:	d004      	beq.n	74f6 <_spi_load_regs_master+0x1a>
    74ec:	683b      	ldr	r3, [r7, #0]
    74ee:	2b00      	cmp	r3, #0
    74f0:	d001      	beq.n	74f6 <_spi_load_regs_master+0x1a>
    74f2:	2301      	movs	r3, #1
    74f4:	e000      	b.n	74f8 <_spi_load_regs_master+0x1c>
    74f6:	2300      	movs	r3, #0
    74f8:	f003 0301 	and.w	r3, r3, #1
    74fc:	b2db      	uxtb	r3, r3
    74fe:	f640 1209 	movw	r2, #2313	; 0x909
    7502:	4915      	ldr	r1, [pc, #84]	; (7558 <_spi_load_regs_master+0x7c>)
    7504:	4618      	mov	r0, r3
    7506:	4b15      	ldr	r3, [pc, #84]	; (755c <_spi_load_regs_master+0x80>)
    7508:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    750a:	683b      	ldr	r3, [r7, #0]
    750c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    750e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7512:	f023 0301 	bic.w	r3, r3, #1
    7516:	4619      	mov	r1, r3
    7518:	6878      	ldr	r0, [r7, #4]
    751a:	4b11      	ldr	r3, [pc, #68]	; (7560 <_spi_load_regs_master+0x84>)
    751c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    751e:	683b      	ldr	r3, [r7, #0]
    7520:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    7522:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7526:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    752a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    752e:	4619      	mov	r1, r3
    7530:	6878      	ldr	r0, [r7, #4]
    7532:	4b0c      	ldr	r3, [pc, #48]	; (7564 <_spi_load_regs_master+0x88>)
    7534:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7536:	683b      	ldr	r3, [r7, #0]
    7538:	7b1b      	ldrb	r3, [r3, #12]
    753a:	4619      	mov	r1, r3
    753c:	6878      	ldr	r0, [r7, #4]
    753e:	4b0a      	ldr	r3, [pc, #40]	; (7568 <_spi_load_regs_master+0x8c>)
    7540:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7542:	683b      	ldr	r3, [r7, #0]
    7544:	7b5b      	ldrb	r3, [r3, #13]
    7546:	4619      	mov	r1, r3
    7548:	6878      	ldr	r0, [r7, #4]
    754a:	4b08      	ldr	r3, [pc, #32]	; (756c <_spi_load_regs_master+0x90>)
    754c:	4798      	blx	r3
}
    754e:	bf00      	nop
    7550:	3708      	adds	r7, #8
    7552:	46bd      	mov	sp, r7
    7554:	bd80      	pop	{r7, pc}
    7556:	bf00      	nop
    7558:	000140e0 	.word	0x000140e0
    755c:	000040dd 	.word	0x000040dd
    7560:	000068c5 	.word	0x000068c5
    7564:	000069dd 	.word	0x000069dd
    7568:	00006a1d 	.word	0x00006a1d
    756c:	00006b55 	.word	0x00006b55

00007570 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7570:	b580      	push	{r7, lr}
    7572:	b082      	sub	sp, #8
    7574:	af00      	add	r7, sp, #0
    7576:	6078      	str	r0, [r7, #4]
    7578:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    757a:	687b      	ldr	r3, [r7, #4]
    757c:	2b00      	cmp	r3, #0
    757e:	d004      	beq.n	758a <_spi_load_regs_slave+0x1a>
    7580:	683b      	ldr	r3, [r7, #0]
    7582:	2b00      	cmp	r3, #0
    7584:	d001      	beq.n	758a <_spi_load_regs_slave+0x1a>
    7586:	2301      	movs	r3, #1
    7588:	e000      	b.n	758c <_spi_load_regs_slave+0x1c>
    758a:	2300      	movs	r3, #0
    758c:	f003 0301 	and.w	r3, r3, #1
    7590:	b2db      	uxtb	r3, r3
    7592:	f640 121d 	movw	r2, #2333	; 0x91d
    7596:	491a      	ldr	r1, [pc, #104]	; (7600 <_spi_load_regs_slave+0x90>)
    7598:	4618      	mov	r0, r3
    759a:	4b1a      	ldr	r3, [pc, #104]	; (7604 <_spi_load_regs_slave+0x94>)
    759c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    759e:	683b      	ldr	r3, [r7, #0]
    75a0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    75a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    75a6:	f023 0301 	bic.w	r3, r3, #1
    75aa:	4619      	mov	r1, r3
    75ac:	6878      	ldr	r0, [r7, #4]
    75ae:	4b16      	ldr	r3, [pc, #88]	; (7608 <_spi_load_regs_slave+0x98>)
    75b0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    75b2:	683b      	ldr	r3, [r7, #0]
    75b4:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    75b6:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    75ba:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    75be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    75c2:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    75c6:	4619      	mov	r1, r3
    75c8:	6878      	ldr	r0, [r7, #4]
    75ca:	4b10      	ldr	r3, [pc, #64]	; (760c <_spi_load_regs_slave+0x9c>)
    75cc:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    75ce:	683b      	ldr	r3, [r7, #0]
    75d0:	689b      	ldr	r3, [r3, #8]
    75d2:	4619      	mov	r1, r3
    75d4:	6878      	ldr	r0, [r7, #4]
    75d6:	4b0e      	ldr	r3, [pc, #56]	; (7610 <_spi_load_regs_slave+0xa0>)
    75d8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    75da:	683b      	ldr	r3, [r7, #0]
    75dc:	7b5b      	ldrb	r3, [r3, #13]
    75de:	4619      	mov	r1, r3
    75e0:	6878      	ldr	r0, [r7, #4]
    75e2:	4b0c      	ldr	r3, [pc, #48]	; (7614 <_spi_load_regs_slave+0xa4>)
    75e4:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    75e6:	bf00      	nop
    75e8:	f04f 31ff 	mov.w	r1, #4294967295
    75ec:	6878      	ldr	r0, [r7, #4]
    75ee:	4b0a      	ldr	r3, [pc, #40]	; (7618 <_spi_load_regs_slave+0xa8>)
    75f0:	4798      	blx	r3
    75f2:	4603      	mov	r3, r0
    75f4:	2b00      	cmp	r3, #0
    75f6:	d1f7      	bne.n	75e8 <_spi_load_regs_slave+0x78>
		;
}
    75f8:	bf00      	nop
    75fa:	3708      	adds	r7, #8
    75fc:	46bd      	mov	sp, r7
    75fe:	bd80      	pop	{r7, pc}
    7600:	000140e0 	.word	0x000140e0
    7604:	000040dd 	.word	0x000040dd
    7608:	000068c5 	.word	0x000068c5
    760c:	000069dd 	.word	0x000069dd
    7610:	00006ac1 	.word	0x00006ac1
    7614:	00006b55 	.word	0x00006b55
    7618:	00006661 	.word	0x00006661

0000761c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    761c:	b580      	push	{r7, lr}
    761e:	b084      	sub	sp, #16
    7620:	af00      	add	r7, sp, #0
    7622:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	4618      	mov	r0, r3
    7628:	4b11      	ldr	r3, [pc, #68]	; (7670 <_spi_get_regs+0x54>)
    762a:	4798      	blx	r3
    762c:	4603      	mov	r3, r0
    762e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7630:	2300      	movs	r3, #0
    7632:	73fb      	strb	r3, [r7, #15]
    7634:	e014      	b.n	7660 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    7636:	7bfa      	ldrb	r2, [r7, #15]
    7638:	490e      	ldr	r1, [pc, #56]	; (7674 <_spi_get_regs+0x58>)
    763a:	4613      	mov	r3, r2
    763c:	011b      	lsls	r3, r3, #4
    763e:	4413      	add	r3, r2
    7640:	440b      	add	r3, r1
    7642:	3310      	adds	r3, #16
    7644:	781b      	ldrb	r3, [r3, #0]
    7646:	7bba      	ldrb	r2, [r7, #14]
    7648:	429a      	cmp	r2, r3
    764a:	d106      	bne.n	765a <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    764c:	7bfa      	ldrb	r2, [r7, #15]
    764e:	4613      	mov	r3, r2
    7650:	011b      	lsls	r3, r3, #4
    7652:	4413      	add	r3, r2
    7654:	4a07      	ldr	r2, [pc, #28]	; (7674 <_spi_get_regs+0x58>)
    7656:	4413      	add	r3, r2
    7658:	e006      	b.n	7668 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    765a:	7bfb      	ldrb	r3, [r7, #15]
    765c:	3301      	adds	r3, #1
    765e:	73fb      	strb	r3, [r7, #15]
    7660:	7bfb      	ldrb	r3, [r7, #15]
    7662:	2b01      	cmp	r3, #1
    7664:	d9e7      	bls.n	7636 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    7666:	2300      	movs	r3, #0
}
    7668:	4618      	mov	r0, r3
    766a:	3710      	adds	r7, #16
    766c:	46bd      	mov	sp, r7
    766e:	bd80      	pop	{r7, pc}
    7670:	00006c0d 	.word	0x00006c0d
    7674:	0001411c 	.word	0x0001411c

00007678 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7678:	b580      	push	{r7, lr}
    767a:	b084      	sub	sp, #16
    767c:	af00      	add	r7, sp, #0
    767e:	6078      	str	r0, [r7, #4]
    7680:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    7682:	683b      	ldr	r3, [r7, #0]
    7684:	4618      	mov	r0, r3
    7686:	4b35      	ldr	r3, [pc, #212]	; (775c <_spi_m_sync_init+0xe4>)
    7688:	4798      	blx	r3
    768a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    768c:	687b      	ldr	r3, [r7, #4]
    768e:	2b00      	cmp	r3, #0
    7690:	d004      	beq.n	769c <_spi_m_sync_init+0x24>
    7692:	683b      	ldr	r3, [r7, #0]
    7694:	2b00      	cmp	r3, #0
    7696:	d001      	beq.n	769c <_spi_m_sync_init+0x24>
    7698:	2301      	movs	r3, #1
    769a:	e000      	b.n	769e <_spi_m_sync_init+0x26>
    769c:	2300      	movs	r3, #0
    769e:	f003 0301 	and.w	r3, r3, #1
    76a2:	b2db      	uxtb	r3, r3
    76a4:	f640 123f 	movw	r2, #2367	; 0x93f
    76a8:	492d      	ldr	r1, [pc, #180]	; (7760 <_spi_m_sync_init+0xe8>)
    76aa:	4618      	mov	r0, r3
    76ac:	4b2d      	ldr	r3, [pc, #180]	; (7764 <_spi_m_sync_init+0xec>)
    76ae:	4798      	blx	r3

	if (regs == NULL) {
    76b0:	68fb      	ldr	r3, [r7, #12]
    76b2:	2b00      	cmp	r3, #0
    76b4:	d102      	bne.n	76bc <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    76b6:	f06f 030c 	mvn.w	r3, #12
    76ba:	e04a      	b.n	7752 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    76bc:	2101      	movs	r1, #1
    76be:	6838      	ldr	r0, [r7, #0]
    76c0:	4b29      	ldr	r3, [pc, #164]	; (7768 <_spi_m_sync_init+0xf0>)
    76c2:	4798      	blx	r3
    76c4:	4603      	mov	r3, r0
    76c6:	f083 0301 	eor.w	r3, r3, #1
    76ca:	b2db      	uxtb	r3, r3
    76cc:	2b00      	cmp	r3, #0
    76ce:	d019      	beq.n	7704 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    76d0:	68fb      	ldr	r3, [r7, #12]
    76d2:	681b      	ldr	r3, [r3, #0]
    76d4:	f003 031c 	and.w	r3, r3, #28
    76d8:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    76da:	2102      	movs	r1, #2
    76dc:	6838      	ldr	r0, [r7, #0]
    76de:	4b23      	ldr	r3, [pc, #140]	; (776c <_spi_m_sync_init+0xf4>)
    76e0:	4798      	blx	r3
    76e2:	4603      	mov	r3, r0
    76e4:	2b00      	cmp	r3, #0
    76e6:	d006      	beq.n	76f6 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    76e8:	6838      	ldr	r0, [r7, #0]
    76ea:	4b21      	ldr	r3, [pc, #132]	; (7770 <_spi_m_sync_init+0xf8>)
    76ec:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    76ee:	2102      	movs	r1, #2
    76f0:	6838      	ldr	r0, [r7, #0]
    76f2:	4b20      	ldr	r3, [pc, #128]	; (7774 <_spi_m_sync_init+0xfc>)
    76f4:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    76f6:	68bb      	ldr	r3, [r7, #8]
    76f8:	f043 0301 	orr.w	r3, r3, #1
    76fc:	4619      	mov	r1, r3
    76fe:	6838      	ldr	r0, [r7, #0]
    7700:	4b1d      	ldr	r3, [pc, #116]	; (7778 <_spi_m_sync_init+0x100>)
    7702:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    7704:	2101      	movs	r1, #1
    7706:	6838      	ldr	r0, [r7, #0]
    7708:	4b1a      	ldr	r3, [pc, #104]	; (7774 <_spi_m_sync_init+0xfc>)
    770a:	4798      	blx	r3

	dev->prvt = hw;
    770c:	687b      	ldr	r3, [r7, #4]
    770e:	683a      	ldr	r2, [r7, #0]
    7710:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7712:	68fb      	ldr	r3, [r7, #12]
    7714:	681b      	ldr	r3, [r3, #0]
    7716:	f003 031c 	and.w	r3, r3, #28
    771a:	2b08      	cmp	r3, #8
    771c:	d104      	bne.n	7728 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    771e:	68f9      	ldr	r1, [r7, #12]
    7720:	6838      	ldr	r0, [r7, #0]
    7722:	4b16      	ldr	r3, [pc, #88]	; (777c <_spi_m_sync_init+0x104>)
    7724:	4798      	blx	r3
    7726:	e003      	b.n	7730 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7728:	68f9      	ldr	r1, [r7, #12]
    772a:	6838      	ldr	r0, [r7, #0]
    772c:	4b14      	ldr	r3, [pc, #80]	; (7780 <_spi_m_sync_init+0x108>)
    772e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7730:	68fb      	ldr	r3, [r7, #12]
    7732:	685b      	ldr	r3, [r3, #4]
    7734:	f003 0307 	and.w	r3, r3, #7
    7738:	2b00      	cmp	r3, #0
    773a:	d101      	bne.n	7740 <_spi_m_sync_init+0xc8>
    773c:	2201      	movs	r2, #1
    773e:	e000      	b.n	7742 <_spi_m_sync_init+0xca>
    7740:	2202      	movs	r2, #2
    7742:	687b      	ldr	r3, [r7, #4]
    7744:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    7746:	68fb      	ldr	r3, [r7, #12]
    7748:	89db      	ldrh	r3, [r3, #14]
    774a:	b29a      	uxth	r2, r3
    774c:	687b      	ldr	r3, [r7, #4]
    774e:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    7750:	2300      	movs	r3, #0
}
    7752:	4618      	mov	r0, r3
    7754:	3710      	adds	r7, #16
    7756:	46bd      	mov	sp, r7
    7758:	bd80      	pop	{r7, pc}
    775a:	bf00      	nop
    775c:	0000761d 	.word	0x0000761d
    7760:	000140e0 	.word	0x000140e0
    7764:	000040dd 	.word	0x000040dd
    7768:	00006661 	.word	0x00006661
    776c:	00006895 	.word	0x00006895
    7770:	0000686d 	.word	0x0000686d
    7774:	0000663d 	.word	0x0000663d
    7778:	000068c5 	.word	0x000068c5
    777c:	00007571 	.word	0x00007571
    7780:	000074dd 	.word	0x000074dd

00007784 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    7784:	b580      	push	{r7, lr}
    7786:	b082      	sub	sp, #8
    7788:	af00      	add	r7, sp, #0
    778a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    778c:	687b      	ldr	r3, [r7, #4]
    778e:	2b00      	cmp	r3, #0
    7790:	d005      	beq.n	779e <_spi_m_sync_enable+0x1a>
    7792:	687b      	ldr	r3, [r7, #4]
    7794:	681b      	ldr	r3, [r3, #0]
    7796:	2b00      	cmp	r3, #0
    7798:	d001      	beq.n	779e <_spi_m_sync_enable+0x1a>
    779a:	2301      	movs	r3, #1
    779c:	e000      	b.n	77a0 <_spi_m_sync_enable+0x1c>
    779e:	2300      	movs	r3, #0
    77a0:	f003 0301 	and.w	r3, r3, #1
    77a4:	b2db      	uxtb	r3, r3
    77a6:	f640 129e 	movw	r2, #2462	; 0x99e
    77aa:	4907      	ldr	r1, [pc, #28]	; (77c8 <_spi_m_sync_enable+0x44>)
    77ac:	4618      	mov	r0, r3
    77ae:	4b07      	ldr	r3, [pc, #28]	; (77cc <_spi_m_sync_enable+0x48>)
    77b0:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    77b2:	687b      	ldr	r3, [r7, #4]
    77b4:	681b      	ldr	r3, [r3, #0]
    77b6:	4618      	mov	r0, r3
    77b8:	4b05      	ldr	r3, [pc, #20]	; (77d0 <_spi_m_sync_enable+0x4c>)
    77ba:	4798      	blx	r3
    77bc:	4603      	mov	r3, r0
}
    77be:	4618      	mov	r0, r3
    77c0:	3708      	adds	r7, #8
    77c2:	46bd      	mov	sp, r7
    77c4:	bd80      	pop	{r7, pc}
    77c6:	bf00      	nop
    77c8:	000140e0 	.word	0x000140e0
    77cc:	000040dd 	.word	0x000040dd
    77d0:	00007475 	.word	0x00007475

000077d4 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    77d4:	b580      	push	{r7, lr}
    77d6:	b082      	sub	sp, #8
    77d8:	af00      	add	r7, sp, #0
    77da:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    77dc:	687b      	ldr	r3, [r7, #4]
    77de:	2b00      	cmp	r3, #0
    77e0:	d005      	beq.n	77ee <_spi_m_sync_disable+0x1a>
    77e2:	687b      	ldr	r3, [r7, #4]
    77e4:	681b      	ldr	r3, [r3, #0]
    77e6:	2b00      	cmp	r3, #0
    77e8:	d001      	beq.n	77ee <_spi_m_sync_disable+0x1a>
    77ea:	2301      	movs	r3, #1
    77ec:	e000      	b.n	77f0 <_spi_m_sync_disable+0x1c>
    77ee:	2300      	movs	r3, #0
    77f0:	f003 0301 	and.w	r3, r3, #1
    77f4:	b2db      	uxtb	r3, r3
    77f6:	f640 12ba 	movw	r2, #2490	; 0x9ba
    77fa:	4907      	ldr	r1, [pc, #28]	; (7818 <_spi_m_sync_disable+0x44>)
    77fc:	4618      	mov	r0, r3
    77fe:	4b07      	ldr	r3, [pc, #28]	; (781c <_spi_m_sync_disable+0x48>)
    7800:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    7802:	687b      	ldr	r3, [r7, #4]
    7804:	681b      	ldr	r3, [r3, #0]
    7806:	4618      	mov	r0, r3
    7808:	4b05      	ldr	r3, [pc, #20]	; (7820 <_spi_m_sync_disable+0x4c>)
    780a:	4798      	blx	r3
    780c:	4603      	mov	r3, r0
}
    780e:	4618      	mov	r0, r3
    7810:	3708      	adds	r7, #8
    7812:	46bd      	mov	sp, r7
    7814:	bd80      	pop	{r7, pc}
    7816:	bf00      	nop
    7818:	000140e0 	.word	0x000140e0
    781c:	000040dd 	.word	0x000040dd
    7820:	000074a9 	.word	0x000074a9

00007824 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    7824:	b580      	push	{r7, lr}
    7826:	b082      	sub	sp, #8
    7828:	af00      	add	r7, sp, #0
    782a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    782c:	bf00      	nop
    782e:	2103      	movs	r1, #3
    7830:	6878      	ldr	r0, [r7, #4]
    7832:	4b06      	ldr	r3, [pc, #24]	; (784c <_spi_wait_bus_idle+0x28>)
    7834:	4798      	blx	r3
    7836:	4603      	mov	r3, r0
    7838:	2b00      	cmp	r3, #0
    783a:	d0f8      	beq.n	782e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    783c:	2103      	movs	r1, #3
    783e:	6878      	ldr	r0, [r7, #4]
    7840:	4b03      	ldr	r3, [pc, #12]	; (7850 <_spi_wait_bus_idle+0x2c>)
    7842:	4798      	blx	r3
}
    7844:	bf00      	nop
    7846:	3708      	adds	r7, #8
    7848:	46bd      	mov	sp, r7
    784a:	bd80      	pop	{r7, pc}
    784c:	000066d7 	.word	0x000066d7
    7850:	00006719 	.word	0x00006719

00007854 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    7854:	b580      	push	{r7, lr}
    7856:	b086      	sub	sp, #24
    7858:	af00      	add	r7, sp, #0
    785a:	60f8      	str	r0, [r7, #12]
    785c:	60b9      	str	r1, [r7, #8]
    785e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    7860:	68bb      	ldr	r3, [r7, #8]
    7862:	f003 0304 	and.w	r3, r3, #4
    7866:	2b00      	cmp	r3, #0
    7868:	d101      	bne.n	786e <_spi_rx_check_and_receive+0x1a>
		return false;
    786a:	2300      	movs	r3, #0
    786c:	e022      	b.n	78b4 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    786e:	68f8      	ldr	r0, [r7, #12]
    7870:	4b12      	ldr	r3, [pc, #72]	; (78bc <_spi_rx_check_and_receive+0x68>)
    7872:	4798      	blx	r3
    7874:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    7876:	687b      	ldr	r3, [r7, #4]
    7878:	685b      	ldr	r3, [r3, #4]
    787a:	2b00      	cmp	r3, #0
    787c:	d014      	beq.n	78a8 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    787e:	687b      	ldr	r3, [r7, #4]
    7880:	685b      	ldr	r3, [r3, #4]
    7882:	1c59      	adds	r1, r3, #1
    7884:	687a      	ldr	r2, [r7, #4]
    7886:	6051      	str	r1, [r2, #4]
    7888:	697a      	ldr	r2, [r7, #20]
    788a:	b2d2      	uxtb	r2, r2
    788c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    788e:	687b      	ldr	r3, [r7, #4]
    7890:	7c1b      	ldrb	r3, [r3, #16]
    7892:	2b01      	cmp	r3, #1
    7894:	d908      	bls.n	78a8 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    7896:	687b      	ldr	r3, [r7, #4]
    7898:	685b      	ldr	r3, [r3, #4]
    789a:	1c59      	adds	r1, r3, #1
    789c:	687a      	ldr	r2, [r7, #4]
    789e:	6051      	str	r1, [r2, #4]
    78a0:	697a      	ldr	r2, [r7, #20]
    78a2:	0a12      	lsrs	r2, r2, #8
    78a4:	b2d2      	uxtb	r2, r2
    78a6:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    78a8:	687b      	ldr	r3, [r7, #4]
    78aa:	68db      	ldr	r3, [r3, #12]
    78ac:	1c5a      	adds	r2, r3, #1
    78ae:	687b      	ldr	r3, [r7, #4]
    78b0:	60da      	str	r2, [r3, #12]

	return true;
    78b2:	2301      	movs	r3, #1
}
    78b4:	4618      	mov	r0, r3
    78b6:	3718      	adds	r7, #24
    78b8:	46bd      	mov	sp, r7
    78ba:	bd80      	pop	{r7, pc}
    78bc:	00006b3d 	.word	0x00006b3d

000078c0 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    78c0:	b580      	push	{r7, lr}
    78c2:	b086      	sub	sp, #24
    78c4:	af00      	add	r7, sp, #0
    78c6:	60f8      	str	r0, [r7, #12]
    78c8:	60b9      	str	r1, [r7, #8]
    78ca:	607a      	str	r2, [r7, #4]
    78cc:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    78ce:	68bb      	ldr	r3, [r7, #8]
    78d0:	f003 0301 	and.w	r3, r3, #1
    78d4:	2b00      	cmp	r3, #0
    78d6:	d028      	beq.n	792a <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    78d8:	687b      	ldr	r3, [r7, #4]
    78da:	681b      	ldr	r3, [r3, #0]
    78dc:	2b00      	cmp	r3, #0
    78de:	d018      	beq.n	7912 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    78e0:	687b      	ldr	r3, [r7, #4]
    78e2:	681b      	ldr	r3, [r3, #0]
    78e4:	1c59      	adds	r1, r3, #1
    78e6:	687a      	ldr	r2, [r7, #4]
    78e8:	6011      	str	r1, [r2, #0]
    78ea:	781b      	ldrb	r3, [r3, #0]
    78ec:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    78ee:	687b      	ldr	r3, [r7, #4]
    78f0:	7c1b      	ldrb	r3, [r3, #16]
    78f2:	2b01      	cmp	r3, #1
    78f4:	d90f      	bls.n	7916 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    78f6:	687b      	ldr	r3, [r7, #4]
    78f8:	681b      	ldr	r3, [r3, #0]
    78fa:	781b      	ldrb	r3, [r3, #0]
    78fc:	021b      	lsls	r3, r3, #8
    78fe:	461a      	mov	r2, r3
    7900:	697b      	ldr	r3, [r7, #20]
    7902:	4313      	orrs	r3, r2
    7904:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7906:	687b      	ldr	r3, [r7, #4]
    7908:	681b      	ldr	r3, [r3, #0]
    790a:	1c5a      	adds	r2, r3, #1
    790c:	687b      	ldr	r3, [r7, #4]
    790e:	601a      	str	r2, [r3, #0]
    7910:	e001      	b.n	7916 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    7912:	887b      	ldrh	r3, [r7, #2]
    7914:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    7916:	687b      	ldr	r3, [r7, #4]
    7918:	689b      	ldr	r3, [r3, #8]
    791a:	1c5a      	adds	r2, r3, #1
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7920:	6979      	ldr	r1, [r7, #20]
    7922:	68f8      	ldr	r0, [r7, #12]
    7924:	4b03      	ldr	r3, [pc, #12]	; (7934 <_spi_tx_check_and_send+0x74>)
    7926:	4798      	blx	r3
    7928:	e000      	b.n	792c <_spi_tx_check_and_send+0x6c>
		return;
    792a:	bf00      	nop
}
    792c:	3718      	adds	r7, #24
    792e:	46bd      	mov	sp, r7
    7930:	bd80      	pop	{r7, pc}
    7932:	bf00      	nop
    7934:	00006b21 	.word	0x00006b21

00007938 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7938:	b580      	push	{r7, lr}
    793a:	b082      	sub	sp, #8
    793c:	af00      	add	r7, sp, #0
    793e:	6078      	str	r0, [r7, #4]
    7940:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    7942:	687b      	ldr	r3, [r7, #4]
    7944:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7948:	2b00      	cmp	r3, #0
    794a:	d00b      	beq.n	7964 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    794c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7950:	6838      	ldr	r0, [r7, #0]
    7952:	4b07      	ldr	r3, [pc, #28]	; (7970 <_spi_err_check+0x38>)
    7954:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7956:	2180      	movs	r1, #128	; 0x80
    7958:	6838      	ldr	r0, [r7, #0]
    795a:	4b06      	ldr	r3, [pc, #24]	; (7974 <_spi_err_check+0x3c>)
    795c:	4798      	blx	r3
		return ERR_OVERFLOW;
    795e:	f06f 0312 	mvn.w	r3, #18
    7962:	e000      	b.n	7966 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7964:	2300      	movs	r3, #0
}
    7966:	4618      	mov	r0, r3
    7968:	3708      	adds	r7, #8
    796a:	46bd      	mov	sp, r7
    796c:	bd80      	pop	{r7, pc}
    796e:	bf00      	nop
    7970:	00006b75 	.word	0x00006b75
    7974:	00006719 	.word	0x00006719

00007978 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7978:	b590      	push	{r4, r7, lr}
    797a:	b08b      	sub	sp, #44	; 0x2c
    797c:	af00      	add	r7, sp, #0
    797e:	6078      	str	r0, [r7, #4]
    7980:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    7982:	687b      	ldr	r3, [r7, #4]
    7984:	681b      	ldr	r3, [r3, #0]
    7986:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7988:	2300      	movs	r3, #0
    798a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    798c:	683b      	ldr	r3, [r7, #0]
    798e:	681b      	ldr	r3, [r3, #0]
    7990:	60bb      	str	r3, [r7, #8]
    7992:	683b      	ldr	r3, [r7, #0]
    7994:	685b      	ldr	r3, [r3, #4]
    7996:	60fb      	str	r3, [r7, #12]
    7998:	2300      	movs	r3, #0
    799a:	613b      	str	r3, [r7, #16]
    799c:	2300      	movs	r3, #0
    799e:	617b      	str	r3, [r7, #20]
    79a0:	687b      	ldr	r3, [r7, #4]
    79a2:	791b      	ldrb	r3, [r3, #4]
    79a4:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    79a6:	687b      	ldr	r3, [r7, #4]
    79a8:	2b00      	cmp	r3, #0
    79aa:	d004      	beq.n	79b6 <_spi_m_sync_trans+0x3e>
    79ac:	6a3b      	ldr	r3, [r7, #32]
    79ae:	2b00      	cmp	r3, #0
    79b0:	d001      	beq.n	79b6 <_spi_m_sync_trans+0x3e>
    79b2:	2301      	movs	r3, #1
    79b4:	e000      	b.n	79b8 <_spi_m_sync_trans+0x40>
    79b6:	2300      	movs	r3, #0
    79b8:	f003 0301 	and.w	r3, r3, #1
    79bc:	b2db      	uxtb	r3, r3
    79be:	f640 22a3 	movw	r2, #2723	; 0xaa3
    79c2:	492b      	ldr	r1, [pc, #172]	; (7a70 <_spi_m_sync_trans+0xf8>)
    79c4:	4618      	mov	r0, r3
    79c6:	4b2b      	ldr	r3, [pc, #172]	; (7a74 <_spi_m_sync_trans+0xfc>)
    79c8:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    79ca:	2107      	movs	r1, #7
    79cc:	6a38      	ldr	r0, [r7, #32]
    79ce:	4b2a      	ldr	r3, [pc, #168]	; (7a78 <_spi_m_sync_trans+0x100>)
    79d0:	4798      	blx	r3
    79d2:	4603      	mov	r3, r0
    79d4:	2b00      	cmp	r3, #0
    79d6:	d002      	beq.n	79de <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    79d8:	f06f 0303 	mvn.w	r3, #3
    79dc:	e043      	b.n	7a66 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    79de:	6a38      	ldr	r0, [r7, #32]
    79e0:	4b26      	ldr	r3, [pc, #152]	; (7a7c <_spi_m_sync_trans+0x104>)
    79e2:	4798      	blx	r3
    79e4:	4603      	mov	r3, r0
    79e6:	f083 0301 	eor.w	r3, r3, #1
    79ea:	b2db      	uxtb	r3, r3
    79ec:	2b00      	cmp	r3, #0
    79ee:	d002      	beq.n	79f6 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    79f0:	f06f 0313 	mvn.w	r3, #19
    79f4:	e037      	b.n	7a66 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    79f6:	6a38      	ldr	r0, [r7, #32]
    79f8:	4b21      	ldr	r3, [pc, #132]	; (7a80 <_spi_m_sync_trans+0x108>)
    79fa:	4798      	blx	r3
    79fc:	4603      	mov	r3, r0
    79fe:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7a00:	f107 0308 	add.w	r3, r7, #8
    7a04:	461a      	mov	r2, r3
    7a06:	69f9      	ldr	r1, [r7, #28]
    7a08:	6a38      	ldr	r0, [r7, #32]
    7a0a:	4b1e      	ldr	r3, [pc, #120]	; (7a84 <_spi_m_sync_trans+0x10c>)
    7a0c:	4798      	blx	r3
    7a0e:	4603      	mov	r3, r0
    7a10:	f083 0301 	eor.w	r3, r3, #1
    7a14:	b2db      	uxtb	r3, r3
    7a16:	2b00      	cmp	r3, #0
    7a18:	d00b      	beq.n	7a32 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7a1a:	697a      	ldr	r2, [r7, #20]
    7a1c:	693b      	ldr	r3, [r7, #16]
    7a1e:	429a      	cmp	r2, r3
    7a20:	d307      	bcc.n	7a32 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7a22:	687b      	ldr	r3, [r7, #4]
    7a24:	88db      	ldrh	r3, [r3, #6]
    7a26:	f107 0208 	add.w	r2, r7, #8
    7a2a:	69f9      	ldr	r1, [r7, #28]
    7a2c:	6a38      	ldr	r0, [r7, #32]
    7a2e:	4c16      	ldr	r4, [pc, #88]	; (7a88 <_spi_m_sync_trans+0x110>)
    7a30:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7a32:	6a39      	ldr	r1, [r7, #32]
    7a34:	69f8      	ldr	r0, [r7, #28]
    7a36:	4b15      	ldr	r3, [pc, #84]	; (7a8c <_spi_m_sync_trans+0x114>)
    7a38:	4798      	blx	r3
    7a3a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7a3e:	2b00      	cmp	r3, #0
    7a40:	db0c      	blt.n	7a5c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    7a42:	693a      	ldr	r2, [r7, #16]
    7a44:	683b      	ldr	r3, [r7, #0]
    7a46:	689b      	ldr	r3, [r3, #8]
    7a48:	429a      	cmp	r2, r3
    7a4a:	d3d4      	bcc.n	79f6 <_spi_m_sync_trans+0x7e>
    7a4c:	697a      	ldr	r2, [r7, #20]
    7a4e:	683b      	ldr	r3, [r7, #0]
    7a50:	689b      	ldr	r3, [r3, #8]
    7a52:	429a      	cmp	r2, r3
    7a54:	d3cf      	bcc.n	79f6 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7a56:	693b      	ldr	r3, [r7, #16]
    7a58:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7a5a:	e000      	b.n	7a5e <_spi_m_sync_trans+0xe6>
			break;
    7a5c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7a5e:	6a38      	ldr	r0, [r7, #32]
    7a60:	4b0b      	ldr	r3, [pc, #44]	; (7a90 <_spi_m_sync_trans+0x118>)
    7a62:	4798      	blx	r3

	return rc;
    7a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7a66:	4618      	mov	r0, r3
    7a68:	372c      	adds	r7, #44	; 0x2c
    7a6a:	46bd      	mov	sp, r7
    7a6c:	bd90      	pop	{r4, r7, pc}
    7a6e:	bf00      	nop
    7a70:	000140e0 	.word	0x000140e0
    7a74:	000040dd 	.word	0x000040dd
    7a78:	00006661 	.word	0x00006661
    7a7c:	00006835 	.word	0x00006835
    7a80:	000066ff 	.word	0x000066ff
    7a84:	00007855 	.word	0x00007855
    7a88:	000078c1 	.word	0x000078c1
    7a8c:	00007939 	.word	0x00007939
    7a90:	00007825 	.word	0x00007825

00007a94 <__NVIC_EnableIRQ>:
{
    7a94:	b480      	push	{r7}
    7a96:	b083      	sub	sp, #12
    7a98:	af00      	add	r7, sp, #0
    7a9a:	4603      	mov	r3, r0
    7a9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7aa2:	2b00      	cmp	r3, #0
    7aa4:	db0b      	blt.n	7abe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7aa6:	4909      	ldr	r1, [pc, #36]	; (7acc <__NVIC_EnableIRQ+0x38>)
    7aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7aac:	095b      	lsrs	r3, r3, #5
    7aae:	88fa      	ldrh	r2, [r7, #6]
    7ab0:	f002 021f 	and.w	r2, r2, #31
    7ab4:	2001      	movs	r0, #1
    7ab6:	fa00 f202 	lsl.w	r2, r0, r2
    7aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7abe:	bf00      	nop
    7ac0:	370c      	adds	r7, #12
    7ac2:	46bd      	mov	sp, r7
    7ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ac8:	4770      	bx	lr
    7aca:	bf00      	nop
    7acc:	e000e100 	.word	0xe000e100

00007ad0 <__NVIC_DisableIRQ>:
{
    7ad0:	b480      	push	{r7}
    7ad2:	b083      	sub	sp, #12
    7ad4:	af00      	add	r7, sp, #0
    7ad6:	4603      	mov	r3, r0
    7ad8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7ade:	2b00      	cmp	r3, #0
    7ae0:	db10      	blt.n	7b04 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ae2:	490b      	ldr	r1, [pc, #44]	; (7b10 <__NVIC_DisableIRQ+0x40>)
    7ae4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7ae8:	095b      	lsrs	r3, r3, #5
    7aea:	88fa      	ldrh	r2, [r7, #6]
    7aec:	f002 021f 	and.w	r2, r2, #31
    7af0:	2001      	movs	r0, #1
    7af2:	fa00 f202 	lsl.w	r2, r0, r2
    7af6:	3320      	adds	r3, #32
    7af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7afc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7b00:	f3bf 8f6f 	isb	sy
}
    7b04:	bf00      	nop
    7b06:	370c      	adds	r7, #12
    7b08:	46bd      	mov	sp, r7
    7b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b0e:	4770      	bx	lr
    7b10:	e000e100 	.word	0xe000e100

00007b14 <__NVIC_ClearPendingIRQ>:
{
    7b14:	b480      	push	{r7}
    7b16:	b083      	sub	sp, #12
    7b18:	af00      	add	r7, sp, #0
    7b1a:	4603      	mov	r3, r0
    7b1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b22:	2b00      	cmp	r3, #0
    7b24:	db0c      	blt.n	7b40 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b26:	4909      	ldr	r1, [pc, #36]	; (7b4c <__NVIC_ClearPendingIRQ+0x38>)
    7b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b2c:	095b      	lsrs	r3, r3, #5
    7b2e:	88fa      	ldrh	r2, [r7, #6]
    7b30:	f002 021f 	and.w	r2, r2, #31
    7b34:	2001      	movs	r0, #1
    7b36:	fa00 f202 	lsl.w	r2, r0, r2
    7b3a:	3360      	adds	r3, #96	; 0x60
    7b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7b40:	bf00      	nop
    7b42:	370c      	adds	r7, #12
    7b44:	46bd      	mov	sp, r7
    7b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b4a:	4770      	bx	lr
    7b4c:	e000e100 	.word	0xe000e100

00007b50 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7b50:	b480      	push	{r7}
    7b52:	b083      	sub	sp, #12
    7b54:	af00      	add	r7, sp, #0
    7b56:	6078      	str	r0, [r7, #4]
    7b58:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7b5a:	bf00      	nop
    7b5c:	687b      	ldr	r3, [r7, #4]
    7b5e:	689a      	ldr	r2, [r3, #8]
    7b60:	683b      	ldr	r3, [r7, #0]
    7b62:	4013      	ands	r3, r2
    7b64:	2b00      	cmp	r3, #0
    7b66:	d1f9      	bne.n	7b5c <hri_tcc_wait_for_sync+0xc>
	};
}
    7b68:	bf00      	nop
    7b6a:	370c      	adds	r7, #12
    7b6c:	46bd      	mov	sp, r7
    7b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b72:	4770      	bx	lr

00007b74 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7b74:	b480      	push	{r7}
    7b76:	b083      	sub	sp, #12
    7b78:	af00      	add	r7, sp, #0
    7b7a:	6078      	str	r0, [r7, #4]
    7b7c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7b7e:	687b      	ldr	r3, [r7, #4]
    7b80:	689a      	ldr	r2, [r3, #8]
    7b82:	683b      	ldr	r3, [r7, #0]
    7b84:	4013      	ands	r3, r2
    7b86:	2b00      	cmp	r3, #0
    7b88:	bf14      	ite	ne
    7b8a:	2301      	movne	r3, #1
    7b8c:	2300      	moveq	r3, #0
    7b8e:	b2db      	uxtb	r3, r3
}
    7b90:	4618      	mov	r0, r3
    7b92:	370c      	adds	r7, #12
    7b94:	46bd      	mov	sp, r7
    7b96:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b9a:	4770      	bx	lr

00007b9c <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7b9c:	b480      	push	{r7}
    7b9e:	b083      	sub	sp, #12
    7ba0:	af00      	add	r7, sp, #0
    7ba2:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7ba4:	687b      	ldr	r3, [r7, #4]
    7ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7ba8:	f003 0301 	and.w	r3, r3, #1
    7bac:	2b00      	cmp	r3, #0
    7bae:	bf14      	ite	ne
    7bb0:	2301      	movne	r3, #1
    7bb2:	2300      	moveq	r3, #0
    7bb4:	b2db      	uxtb	r3, r3
}
    7bb6:	4618      	mov	r0, r3
    7bb8:	370c      	adds	r7, #12
    7bba:	46bd      	mov	sp, r7
    7bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bc0:	4770      	bx	lr

00007bc2 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7bc2:	b480      	push	{r7}
    7bc4:	b083      	sub	sp, #12
    7bc6:	af00      	add	r7, sp, #0
    7bc8:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7bca:	687b      	ldr	r3, [r7, #4]
    7bcc:	2201      	movs	r2, #1
    7bce:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7bd0:	bf00      	nop
    7bd2:	370c      	adds	r7, #12
    7bd4:	46bd      	mov	sp, r7
    7bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bda:	4770      	bx	lr

00007bdc <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7bdc:	b480      	push	{r7}
    7bde:	b083      	sub	sp, #12
    7be0:	af00      	add	r7, sp, #0
    7be2:	6078      	str	r0, [r7, #4]
    7be4:	460b      	mov	r3, r1
    7be6:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7be8:	687b      	ldr	r3, [r7, #4]
    7bea:	78fa      	ldrb	r2, [r7, #3]
    7bec:	715a      	strb	r2, [r3, #5]
}
    7bee:	bf00      	nop
    7bf0:	370c      	adds	r7, #12
    7bf2:	46bd      	mov	sp, r7
    7bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bf8:	4770      	bx	lr

00007bfa <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7bfa:	b480      	push	{r7}
    7bfc:	b083      	sub	sp, #12
    7bfe:	af00      	add	r7, sp, #0
    7c00:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7c02:	687b      	ldr	r3, [r7, #4]
    7c04:	2201      	movs	r2, #1
    7c06:	629a      	str	r2, [r3, #40]	; 0x28
}
    7c08:	bf00      	nop
    7c0a:	370c      	adds	r7, #12
    7c0c:	46bd      	mov	sp, r7
    7c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c12:	4770      	bx	lr

00007c14 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7c14:	b580      	push	{r7, lr}
    7c16:	b082      	sub	sp, #8
    7c18:	af00      	add	r7, sp, #0
    7c1a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7c1c:	687b      	ldr	r3, [r7, #4]
    7c1e:	681b      	ldr	r3, [r3, #0]
    7c20:	f043 0201 	orr.w	r2, r3, #1
    7c24:	687b      	ldr	r3, [r7, #4]
    7c26:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7c28:	2101      	movs	r1, #1
    7c2a:	6878      	ldr	r0, [r7, #4]
    7c2c:	4b02      	ldr	r3, [pc, #8]	; (7c38 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7c2e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c30:	bf00      	nop
    7c32:	3708      	adds	r7, #8
    7c34:	46bd      	mov	sp, r7
    7c36:	bd80      	pop	{r7, pc}
    7c38:	00007b51 	.word	0x00007b51

00007c3c <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7c3c:	b580      	push	{r7, lr}
    7c3e:	b082      	sub	sp, #8
    7c40:	af00      	add	r7, sp, #0
    7c42:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7c44:	687b      	ldr	r3, [r7, #4]
    7c46:	681b      	ldr	r3, [r3, #0]
    7c48:	f043 0202 	orr.w	r2, r3, #2
    7c4c:	687b      	ldr	r3, [r7, #4]
    7c4e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c50:	2103      	movs	r1, #3
    7c52:	6878      	ldr	r0, [r7, #4]
    7c54:	4b02      	ldr	r3, [pc, #8]	; (7c60 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7c56:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c58:	bf00      	nop
    7c5a:	3708      	adds	r7, #8
    7c5c:	46bd      	mov	sp, r7
    7c5e:	bd80      	pop	{r7, pc}
    7c60:	00007b51 	.word	0x00007b51

00007c64 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7c64:	b580      	push	{r7, lr}
    7c66:	b084      	sub	sp, #16
    7c68:	af00      	add	r7, sp, #0
    7c6a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c6c:	2103      	movs	r1, #3
    7c6e:	6878      	ldr	r0, [r7, #4]
    7c70:	4b09      	ldr	r3, [pc, #36]	; (7c98 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7c72:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7c74:	687b      	ldr	r3, [r7, #4]
    7c76:	681b      	ldr	r3, [r3, #0]
    7c78:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7c7a:	68fb      	ldr	r3, [r7, #12]
    7c7c:	085b      	lsrs	r3, r3, #1
    7c7e:	f003 0301 	and.w	r3, r3, #1
    7c82:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7c84:	68fb      	ldr	r3, [r7, #12]
    7c86:	2b00      	cmp	r3, #0
    7c88:	bf14      	ite	ne
    7c8a:	2301      	movne	r3, #1
    7c8c:	2300      	moveq	r3, #0
    7c8e:	b2db      	uxtb	r3, r3
}
    7c90:	4618      	mov	r0, r3
    7c92:	3710      	adds	r7, #16
    7c94:	46bd      	mov	sp, r7
    7c96:	bd80      	pop	{r7, pc}
    7c98:	00007b51 	.word	0x00007b51

00007c9c <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7c9c:	b580      	push	{r7, lr}
    7c9e:	b082      	sub	sp, #8
    7ca0:	af00      	add	r7, sp, #0
    7ca2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7ca4:	687b      	ldr	r3, [r7, #4]
    7ca6:	681b      	ldr	r3, [r3, #0]
    7ca8:	f023 0202 	bic.w	r2, r3, #2
    7cac:	687b      	ldr	r3, [r7, #4]
    7cae:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7cb0:	2103      	movs	r1, #3
    7cb2:	6878      	ldr	r0, [r7, #4]
    7cb4:	4b02      	ldr	r3, [pc, #8]	; (7cc0 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7cb6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7cb8:	bf00      	nop
    7cba:	3708      	adds	r7, #8
    7cbc:	46bd      	mov	sp, r7
    7cbe:	bd80      	pop	{r7, pc}
    7cc0:	00007b51 	.word	0x00007b51

00007cc4 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7cc4:	b580      	push	{r7, lr}
    7cc6:	b084      	sub	sp, #16
    7cc8:	af00      	add	r7, sp, #0
    7cca:	6078      	str	r0, [r7, #4]
    7ccc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7cce:	2103      	movs	r1, #3
    7cd0:	6878      	ldr	r0, [r7, #4]
    7cd2:	4b07      	ldr	r3, [pc, #28]	; (7cf0 <hri_tcc_get_CTRLA_reg+0x2c>)
    7cd4:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7cd6:	687b      	ldr	r3, [r7, #4]
    7cd8:	681b      	ldr	r3, [r3, #0]
    7cda:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7cdc:	68fa      	ldr	r2, [r7, #12]
    7cde:	683b      	ldr	r3, [r7, #0]
    7ce0:	4013      	ands	r3, r2
    7ce2:	60fb      	str	r3, [r7, #12]
	return tmp;
    7ce4:	68fb      	ldr	r3, [r7, #12]
}
    7ce6:	4618      	mov	r0, r3
    7ce8:	3710      	adds	r7, #16
    7cea:	46bd      	mov	sp, r7
    7cec:	bd80      	pop	{r7, pc}
    7cee:	bf00      	nop
    7cf0:	00007b51 	.word	0x00007b51

00007cf4 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7cf4:	b580      	push	{r7, lr}
    7cf6:	b082      	sub	sp, #8
    7cf8:	af00      	add	r7, sp, #0
    7cfa:	6078      	str	r0, [r7, #4]
    7cfc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7cfe:	687b      	ldr	r3, [r7, #4]
    7d00:	683a      	ldr	r2, [r7, #0]
    7d02:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7d04:	2103      	movs	r1, #3
    7d06:	6878      	ldr	r0, [r7, #4]
    7d08:	4b02      	ldr	r3, [pc, #8]	; (7d14 <hri_tcc_write_CTRLA_reg+0x20>)
    7d0a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d0c:	bf00      	nop
    7d0e:	3708      	adds	r7, #8
    7d10:	46bd      	mov	sp, r7
    7d12:	bd80      	pop	{r7, pc}
    7d14:	00007b51 	.word	0x00007b51

00007d18 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7d18:	b480      	push	{r7}
    7d1a:	b083      	sub	sp, #12
    7d1c:	af00      	add	r7, sp, #0
    7d1e:	6078      	str	r0, [r7, #4]
    7d20:	460b      	mov	r3, r1
    7d22:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7d24:	687b      	ldr	r3, [r7, #4]
    7d26:	78fa      	ldrb	r2, [r7, #3]
    7d28:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d2a:	bf00      	nop
    7d2c:	370c      	adds	r7, #12
    7d2e:	46bd      	mov	sp, r7
    7d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d34:	4770      	bx	lr

00007d36 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7d36:	b480      	push	{r7}
    7d38:	b083      	sub	sp, #12
    7d3a:	af00      	add	r7, sp, #0
    7d3c:	6078      	str	r0, [r7, #4]
    7d3e:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7d40:	687b      	ldr	r3, [r7, #4]
    7d42:	683a      	ldr	r2, [r7, #0]
    7d44:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d46:	bf00      	nop
    7d48:	370c      	adds	r7, #12
    7d4a:	46bd      	mov	sp, r7
    7d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d50:	4770      	bx	lr
	...

00007d54 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7d54:	b580      	push	{r7, lr}
    7d56:	b082      	sub	sp, #8
    7d58:	af00      	add	r7, sp, #0
    7d5a:	6078      	str	r0, [r7, #4]
    7d5c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7d5e:	687b      	ldr	r3, [r7, #4]
    7d60:	683a      	ldr	r2, [r7, #0]
    7d62:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7d64:	2180      	movs	r1, #128	; 0x80
    7d66:	6878      	ldr	r0, [r7, #4]
    7d68:	4b02      	ldr	r3, [pc, #8]	; (7d74 <hri_tcc_write_PER_reg+0x20>)
    7d6a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d6c:	bf00      	nop
    7d6e:	3708      	adds	r7, #8
    7d70:	46bd      	mov	sp, r7
    7d72:	bd80      	pop	{r7, pc}
    7d74:	00007b51 	.word	0x00007b51

00007d78 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7d78:	b580      	push	{r7, lr}
    7d7a:	b082      	sub	sp, #8
    7d7c:	af00      	add	r7, sp, #0
    7d7e:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7d80:	2180      	movs	r1, #128	; 0x80
    7d82:	6878      	ldr	r0, [r7, #4]
    7d84:	4b03      	ldr	r3, [pc, #12]	; (7d94 <hri_tcc_read_PER_reg+0x1c>)
    7d86:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7d88:	687b      	ldr	r3, [r7, #4]
    7d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7d8c:	4618      	mov	r0, r3
    7d8e:	3708      	adds	r7, #8
    7d90:	46bd      	mov	sp, r7
    7d92:	bd80      	pop	{r7, pc}
    7d94:	00007b51 	.word	0x00007b51

00007d98 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7d98:	b480      	push	{r7}
    7d9a:	b083      	sub	sp, #12
    7d9c:	af00      	add	r7, sp, #0
    7d9e:	6078      	str	r0, [r7, #4]
    7da0:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7da2:	687b      	ldr	r3, [r7, #4]
    7da4:	4a0c      	ldr	r2, [pc, #48]	; (7dd8 <_tcc_init_irq_param+0x40>)
    7da6:	4293      	cmp	r3, r2
    7da8:	d102      	bne.n	7db0 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7daa:	4a0c      	ldr	r2, [pc, #48]	; (7ddc <_tcc_init_irq_param+0x44>)
    7dac:	683b      	ldr	r3, [r7, #0]
    7dae:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7db0:	687b      	ldr	r3, [r7, #4]
    7db2:	4a0b      	ldr	r2, [pc, #44]	; (7de0 <_tcc_init_irq_param+0x48>)
    7db4:	4293      	cmp	r3, r2
    7db6:	d102      	bne.n	7dbe <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7db8:	4a0a      	ldr	r2, [pc, #40]	; (7de4 <_tcc_init_irq_param+0x4c>)
    7dba:	683b      	ldr	r3, [r7, #0]
    7dbc:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    7dbe:	687b      	ldr	r3, [r7, #4]
    7dc0:	4a09      	ldr	r2, [pc, #36]	; (7de8 <_tcc_init_irq_param+0x50>)
    7dc2:	4293      	cmp	r3, r2
    7dc4:	d102      	bne.n	7dcc <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    7dc6:	4a09      	ldr	r2, [pc, #36]	; (7dec <_tcc_init_irq_param+0x54>)
    7dc8:	683b      	ldr	r3, [r7, #0]
    7dca:	6013      	str	r3, [r2, #0]
	}
}
    7dcc:	bf00      	nop
    7dce:	370c      	adds	r7, #12
    7dd0:	46bd      	mov	sp, r7
    7dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dd6:	4770      	bx	lr
    7dd8:	41016000 	.word	0x41016000
    7ddc:	20000cd8 	.word	0x20000cd8
    7de0:	41018000 	.word	0x41018000
    7de4:	20000cdc 	.word	0x20000cdc
    7de8:	42000c00 	.word	0x42000c00
    7dec:	20000ce0 	.word	0x20000ce0

00007df0 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7df0:	b580      	push	{r7, lr}
    7df2:	b084      	sub	sp, #16
    7df4:	af00      	add	r7, sp, #0
    7df6:	6078      	str	r0, [r7, #4]
    7df8:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7dfa:	6838      	ldr	r0, [r7, #0]
    7dfc:	4b33      	ldr	r3, [pc, #204]	; (7ecc <_tcc_timer_init+0xdc>)
    7dfe:	4798      	blx	r3
    7e00:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7e02:	68fb      	ldr	r3, [r7, #12]
    7e04:	2b00      	cmp	r3, #0
    7e06:	d102      	bne.n	7e0e <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7e08:	f06f 0309 	mvn.w	r3, #9
    7e0c:	e05a      	b.n	7ec4 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	683a      	ldr	r2, [r7, #0]
    7e12:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7e14:	2101      	movs	r1, #1
    7e16:	6838      	ldr	r0, [r7, #0]
    7e18:	4b2d      	ldr	r3, [pc, #180]	; (7ed0 <_tcc_timer_init+0xe0>)
    7e1a:	4798      	blx	r3
    7e1c:	4603      	mov	r3, r0
    7e1e:	f083 0301 	eor.w	r3, r3, #1
    7e22:	b2db      	uxtb	r3, r3
    7e24:	2b00      	cmp	r3, #0
    7e26:	d011      	beq.n	7e4c <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7e28:	2102      	movs	r1, #2
    7e2a:	6838      	ldr	r0, [r7, #0]
    7e2c:	4b29      	ldr	r3, [pc, #164]	; (7ed4 <_tcc_timer_init+0xe4>)
    7e2e:	4798      	blx	r3
    7e30:	4603      	mov	r3, r0
    7e32:	2b00      	cmp	r3, #0
    7e34:	d006      	beq.n	7e44 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7e36:	6838      	ldr	r0, [r7, #0]
    7e38:	4b27      	ldr	r3, [pc, #156]	; (7ed8 <_tcc_timer_init+0xe8>)
    7e3a:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7e3c:	2102      	movs	r1, #2
    7e3e:	6838      	ldr	r0, [r7, #0]
    7e40:	4b26      	ldr	r3, [pc, #152]	; (7edc <_tcc_timer_init+0xec>)
    7e42:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7e44:	2101      	movs	r1, #1
    7e46:	6838      	ldr	r0, [r7, #0]
    7e48:	4b25      	ldr	r3, [pc, #148]	; (7ee0 <_tcc_timer_init+0xf0>)
    7e4a:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7e4c:	2101      	movs	r1, #1
    7e4e:	6838      	ldr	r0, [r7, #0]
    7e50:	4b22      	ldr	r3, [pc, #136]	; (7edc <_tcc_timer_init+0xec>)
    7e52:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7e54:	68fb      	ldr	r3, [r7, #12]
    7e56:	689b      	ldr	r3, [r3, #8]
    7e58:	4619      	mov	r1, r3
    7e5a:	6838      	ldr	r0, [r7, #0]
    7e5c:	4b20      	ldr	r3, [pc, #128]	; (7ee0 <_tcc_timer_init+0xf0>)
    7e5e:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7e60:	68fb      	ldr	r3, [r7, #12]
    7e62:	7b1b      	ldrb	r3, [r3, #12]
    7e64:	4619      	mov	r1, r3
    7e66:	6838      	ldr	r0, [r7, #0]
    7e68:	4b1e      	ldr	r3, [pc, #120]	; (7ee4 <_tcc_timer_init+0xf4>)
    7e6a:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7e6c:	68fb      	ldr	r3, [r7, #12]
    7e6e:	7b5b      	ldrb	r3, [r3, #13]
    7e70:	4619      	mov	r1, r3
    7e72:	6838      	ldr	r0, [r7, #0]
    7e74:	4b1c      	ldr	r3, [pc, #112]	; (7ee8 <_tcc_timer_init+0xf8>)
    7e76:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7e78:	68fb      	ldr	r3, [r7, #12]
    7e7a:	691b      	ldr	r3, [r3, #16]
    7e7c:	4619      	mov	r1, r3
    7e7e:	6838      	ldr	r0, [r7, #0]
    7e80:	4b1a      	ldr	r3, [pc, #104]	; (7eec <_tcc_timer_init+0xfc>)
    7e82:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7e84:	68fb      	ldr	r3, [r7, #12]
    7e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7e88:	4619      	mov	r1, r3
    7e8a:	6838      	ldr	r0, [r7, #0]
    7e8c:	4b18      	ldr	r3, [pc, #96]	; (7ef0 <_tcc_timer_init+0x100>)
    7e8e:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7e90:	6838      	ldr	r0, [r7, #0]
    7e92:	4b18      	ldr	r3, [pc, #96]	; (7ef4 <_tcc_timer_init+0x104>)
    7e94:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7e96:	6879      	ldr	r1, [r7, #4]
    7e98:	6838      	ldr	r0, [r7, #0]
    7e9a:	4b17      	ldr	r3, [pc, #92]	; (7ef8 <_tcc_timer_init+0x108>)
    7e9c:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7e9e:	68fb      	ldr	r3, [r7, #12]
    7ea0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7ea4:	4618      	mov	r0, r3
    7ea6:	4b15      	ldr	r3, [pc, #84]	; (7efc <_tcc_timer_init+0x10c>)
    7ea8:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7eaa:	68fb      	ldr	r3, [r7, #12]
    7eac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7eb0:	4618      	mov	r0, r3
    7eb2:	4b13      	ldr	r3, [pc, #76]	; (7f00 <_tcc_timer_init+0x110>)
    7eb4:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7eb6:	68fb      	ldr	r3, [r7, #12]
    7eb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7ebc:	4618      	mov	r0, r3
    7ebe:	4b11      	ldr	r3, [pc, #68]	; (7f04 <_tcc_timer_init+0x114>)
    7ec0:	4798      	blx	r3

	return ERR_NONE;
    7ec2:	2300      	movs	r3, #0
}
    7ec4:	4618      	mov	r0, r3
    7ec6:	3710      	adds	r7, #16
    7ec8:	46bd      	mov	sp, r7
    7eca:	bd80      	pop	{r7, pc}
    7ecc:	000080d5 	.word	0x000080d5
    7ed0:	00007b75 	.word	0x00007b75
    7ed4:	00007cc5 	.word	0x00007cc5
    7ed8:	00007c9d 	.word	0x00007c9d
    7edc:	00007b51 	.word	0x00007b51
    7ee0:	00007cf5 	.word	0x00007cf5
    7ee4:	00007bdd 	.word	0x00007bdd
    7ee8:	00007d19 	.word	0x00007d19
    7eec:	00007d37 	.word	0x00007d37
    7ef0:	00007d55 	.word	0x00007d55
    7ef4:	00007bfb 	.word	0x00007bfb
    7ef8:	00007d99 	.word	0x00007d99
    7efc:	00007ad1 	.word	0x00007ad1
    7f00:	00007b15 	.word	0x00007b15
    7f04:	00007a95 	.word	0x00007a95

00007f08 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7f08:	b580      	push	{r7, lr}
    7f0a:	b084      	sub	sp, #16
    7f0c:	af00      	add	r7, sp, #0
    7f0e:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7f10:	687b      	ldr	r3, [r7, #4]
    7f12:	68db      	ldr	r3, [r3, #12]
    7f14:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7f16:	68f8      	ldr	r0, [r7, #12]
    7f18:	4b0a      	ldr	r3, [pc, #40]	; (7f44 <_tcc_timer_deinit+0x3c>)
    7f1a:	4798      	blx	r3
    7f1c:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7f1e:	68bb      	ldr	r3, [r7, #8]
    7f20:	2b00      	cmp	r3, #0
    7f22:	d00b      	beq.n	7f3c <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7f24:	68bb      	ldr	r3, [r7, #8]
    7f26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7f2a:	4618      	mov	r0, r3
    7f2c:	4b06      	ldr	r3, [pc, #24]	; (7f48 <_tcc_timer_deinit+0x40>)
    7f2e:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7f30:	68f8      	ldr	r0, [r7, #12]
    7f32:	4b06      	ldr	r3, [pc, #24]	; (7f4c <_tcc_timer_deinit+0x44>)
    7f34:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7f36:	68f8      	ldr	r0, [r7, #12]
    7f38:	4b05      	ldr	r3, [pc, #20]	; (7f50 <_tcc_timer_deinit+0x48>)
    7f3a:	4798      	blx	r3
	}
}
    7f3c:	bf00      	nop
    7f3e:	3710      	adds	r7, #16
    7f40:	46bd      	mov	sp, r7
    7f42:	bd80      	pop	{r7, pc}
    7f44:	000080d5 	.word	0x000080d5
    7f48:	00007ad1 	.word	0x00007ad1
    7f4c:	00007c9d 	.word	0x00007c9d
    7f50:	00007c15 	.word	0x00007c15

00007f54 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7f54:	b580      	push	{r7, lr}
    7f56:	b082      	sub	sp, #8
    7f58:	af00      	add	r7, sp, #0
    7f5a:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7f5c:	687b      	ldr	r3, [r7, #4]
    7f5e:	68db      	ldr	r3, [r3, #12]
    7f60:	4618      	mov	r0, r3
    7f62:	4b03      	ldr	r3, [pc, #12]	; (7f70 <_tcc_timer_start+0x1c>)
    7f64:	4798      	blx	r3
}
    7f66:	bf00      	nop
    7f68:	3708      	adds	r7, #8
    7f6a:	46bd      	mov	sp, r7
    7f6c:	bd80      	pop	{r7, pc}
    7f6e:	bf00      	nop
    7f70:	00007c3d 	.word	0x00007c3d

00007f74 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7f74:	b580      	push	{r7, lr}
    7f76:	b082      	sub	sp, #8
    7f78:	af00      	add	r7, sp, #0
    7f7a:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7f7c:	687b      	ldr	r3, [r7, #4]
    7f7e:	68db      	ldr	r3, [r3, #12]
    7f80:	4618      	mov	r0, r3
    7f82:	4b03      	ldr	r3, [pc, #12]	; (7f90 <_tcc_timer_stop+0x1c>)
    7f84:	4798      	blx	r3
}
    7f86:	bf00      	nop
    7f88:	3708      	adds	r7, #8
    7f8a:	46bd      	mov	sp, r7
    7f8c:	bd80      	pop	{r7, pc}
    7f8e:	bf00      	nop
    7f90:	00007c9d 	.word	0x00007c9d

00007f94 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7f94:	b580      	push	{r7, lr}
    7f96:	b082      	sub	sp, #8
    7f98:	af00      	add	r7, sp, #0
    7f9a:	6078      	str	r0, [r7, #4]
    7f9c:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7f9e:	687b      	ldr	r3, [r7, #4]
    7fa0:	68db      	ldr	r3, [r3, #12]
    7fa2:	6839      	ldr	r1, [r7, #0]
    7fa4:	4618      	mov	r0, r3
    7fa6:	4b03      	ldr	r3, [pc, #12]	; (7fb4 <_tcc_timer_set_period+0x20>)
    7fa8:	4798      	blx	r3
}
    7faa:	bf00      	nop
    7fac:	3708      	adds	r7, #8
    7fae:	46bd      	mov	sp, r7
    7fb0:	bd80      	pop	{r7, pc}
    7fb2:	bf00      	nop
    7fb4:	00007d55 	.word	0x00007d55

00007fb8 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7fb8:	b580      	push	{r7, lr}
    7fba:	b082      	sub	sp, #8
    7fbc:	af00      	add	r7, sp, #0
    7fbe:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7fc0:	687b      	ldr	r3, [r7, #4]
    7fc2:	68db      	ldr	r3, [r3, #12]
    7fc4:	4618      	mov	r0, r3
    7fc6:	4b03      	ldr	r3, [pc, #12]	; (7fd4 <_tcc_timer_get_period+0x1c>)
    7fc8:	4798      	blx	r3
    7fca:	4603      	mov	r3, r0
}
    7fcc:	4618      	mov	r0, r3
    7fce:	3708      	adds	r7, #8
    7fd0:	46bd      	mov	sp, r7
    7fd2:	bd80      	pop	{r7, pc}
    7fd4:	00007d79 	.word	0x00007d79

00007fd8 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7fd8:	b580      	push	{r7, lr}
    7fda:	b082      	sub	sp, #8
    7fdc:	af00      	add	r7, sp, #0
    7fde:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7fe0:	687b      	ldr	r3, [r7, #4]
    7fe2:	68db      	ldr	r3, [r3, #12]
    7fe4:	4618      	mov	r0, r3
    7fe6:	4b03      	ldr	r3, [pc, #12]	; (7ff4 <_tcc_timer_is_started+0x1c>)
    7fe8:	4798      	blx	r3
    7fea:	4603      	mov	r3, r0
}
    7fec:	4618      	mov	r0, r3
    7fee:	3708      	adds	r7, #8
    7ff0:	46bd      	mov	sp, r7
    7ff2:	bd80      	pop	{r7, pc}
    7ff4:	00007c65 	.word	0x00007c65

00007ff8 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7ff8:	b480      	push	{r7}
    7ffa:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7ffc:	4b02      	ldr	r3, [pc, #8]	; (8008 <_tcc_get_timer+0x10>)
}
    7ffe:	4618      	mov	r0, r3
    8000:	46bd      	mov	sp, r7
    8002:	f85d 7b04 	ldr.w	r7, [sp], #4
    8006:	4770      	bx	lr
    8008:	200000f0 	.word	0x200000f0

0000800c <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    800c:	b580      	push	{r7, lr}
    800e:	b084      	sub	sp, #16
    8010:	af00      	add	r7, sp, #0
    8012:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    8014:	687b      	ldr	r3, [r7, #4]
    8016:	68db      	ldr	r3, [r3, #12]
    8018:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    801a:	68f8      	ldr	r0, [r7, #12]
    801c:	4b08      	ldr	r3, [pc, #32]	; (8040 <_tcc_timer_set_irq+0x34>)
    801e:	4798      	blx	r3
    8020:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    8022:	68bb      	ldr	r3, [r7, #8]
    8024:	2b00      	cmp	r3, #0
    8026:	d006      	beq.n	8036 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    8028:	68bb      	ldr	r3, [r7, #8]
    802a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    802e:	b2db      	uxtb	r3, r3
    8030:	4618      	mov	r0, r3
    8032:	4b04      	ldr	r3, [pc, #16]	; (8044 <_tcc_timer_set_irq+0x38>)
    8034:	4798      	blx	r3
	}
}
    8036:	bf00      	nop
    8038:	3710      	adds	r7, #16
    803a:	46bd      	mov	sp, r7
    803c:	bd80      	pop	{r7, pc}
    803e:	bf00      	nop
    8040:	000080d5 	.word	0x000080d5
    8044:	00004925 	.word	0x00004925

00008048 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    8048:	b580      	push	{r7, lr}
    804a:	b084      	sub	sp, #16
    804c:	af00      	add	r7, sp, #0
    804e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8050:	687b      	ldr	r3, [r7, #4]
    8052:	68db      	ldr	r3, [r3, #12]
    8054:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    8056:	68f8      	ldr	r0, [r7, #12]
    8058:	4b07      	ldr	r3, [pc, #28]	; (8078 <tcc_interrupt_handler+0x30>)
    805a:	4798      	blx	r3
    805c:	4603      	mov	r3, r0
    805e:	2b00      	cmp	r3, #0
    8060:	d006      	beq.n	8070 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    8062:	68f8      	ldr	r0, [r7, #12]
    8064:	4b05      	ldr	r3, [pc, #20]	; (807c <tcc_interrupt_handler+0x34>)
    8066:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8068:	687b      	ldr	r3, [r7, #4]
    806a:	681b      	ldr	r3, [r3, #0]
    806c:	6878      	ldr	r0, [r7, #4]
    806e:	4798      	blx	r3
	}
}
    8070:	bf00      	nop
    8072:	3710      	adds	r7, #16
    8074:	46bd      	mov	sp, r7
    8076:	bd80      	pop	{r7, pc}
    8078:	00007b9d 	.word	0x00007b9d
    807c:	00007bc3 	.word	0x00007bc3

00008080 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    8080:	b580      	push	{r7, lr}
    8082:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    8084:	4b03      	ldr	r3, [pc, #12]	; (8094 <TCC0_0_Handler+0x14>)
    8086:	681b      	ldr	r3, [r3, #0]
    8088:	4618      	mov	r0, r3
    808a:	4b03      	ldr	r3, [pc, #12]	; (8098 <TCC0_0_Handler+0x18>)
    808c:	4798      	blx	r3
}
    808e:	bf00      	nop
    8090:	bd80      	pop	{r7, pc}
    8092:	bf00      	nop
    8094:	20000cd8 	.word	0x20000cd8
    8098:	00008049 	.word	0x00008049

0000809c <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    809c:	b580      	push	{r7, lr}
    809e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    80a0:	4b03      	ldr	r3, [pc, #12]	; (80b0 <TCC1_0_Handler+0x14>)
    80a2:	681b      	ldr	r3, [r3, #0]
    80a4:	4618      	mov	r0, r3
    80a6:	4b03      	ldr	r3, [pc, #12]	; (80b4 <TCC1_0_Handler+0x18>)
    80a8:	4798      	blx	r3
}
    80aa:	bf00      	nop
    80ac:	bd80      	pop	{r7, pc}
    80ae:	bf00      	nop
    80b0:	20000cdc 	.word	0x20000cdc
    80b4:	00008049 	.word	0x00008049

000080b8 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    80b8:	b580      	push	{r7, lr}
    80ba:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    80bc:	4b03      	ldr	r3, [pc, #12]	; (80cc <TCC2_0_Handler+0x14>)
    80be:	681b      	ldr	r3, [r3, #0]
    80c0:	4618      	mov	r0, r3
    80c2:	4b03      	ldr	r3, [pc, #12]	; (80d0 <TCC2_0_Handler+0x18>)
    80c4:	4798      	blx	r3
}
    80c6:	bf00      	nop
    80c8:	bd80      	pop	{r7, pc}
    80ca:	bf00      	nop
    80cc:	20000ce0 	.word	0x20000ce0
    80d0:	00008049 	.word	0x00008049

000080d4 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    80d4:	b480      	push	{r7}
    80d6:	b085      	sub	sp, #20
    80d8:	af00      	add	r7, sp, #0
    80da:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    80dc:	2300      	movs	r3, #0
    80de:	73fb      	strb	r3, [r7, #15]
    80e0:	e015      	b.n	810e <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    80e2:	7bfa      	ldrb	r2, [r7, #15]
    80e4:	490f      	ldr	r1, [pc, #60]	; (8124 <_get_tcc_cfg+0x50>)
    80e6:	4613      	mov	r3, r2
    80e8:	005b      	lsls	r3, r3, #1
    80ea:	4413      	add	r3, r2
    80ec:	011b      	lsls	r3, r3, #4
    80ee:	440b      	add	r3, r1
    80f0:	681a      	ldr	r2, [r3, #0]
    80f2:	687b      	ldr	r3, [r7, #4]
    80f4:	429a      	cmp	r2, r3
    80f6:	d107      	bne.n	8108 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    80f8:	7bfa      	ldrb	r2, [r7, #15]
    80fa:	4613      	mov	r3, r2
    80fc:	005b      	lsls	r3, r3, #1
    80fe:	4413      	add	r3, r2
    8100:	011b      	lsls	r3, r3, #4
    8102:	4a08      	ldr	r2, [pc, #32]	; (8124 <_get_tcc_cfg+0x50>)
    8104:	4413      	add	r3, r2
    8106:	e006      	b.n	8116 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8108:	7bfb      	ldrb	r3, [r7, #15]
    810a:	3301      	adds	r3, #1
    810c:	73fb      	strb	r3, [r7, #15]
    810e:	7bfb      	ldrb	r3, [r7, #15]
    8110:	2b02      	cmp	r3, #2
    8112:	d9e6      	bls.n	80e2 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    8114:	2300      	movs	r3, #0
}
    8116:	4618      	mov	r0, r3
    8118:	3714      	adds	r7, #20
    811a:	46bd      	mov	sp, r7
    811c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8120:	4770      	bx	lr
    8122:	bf00      	nop
    8124:	20000060 	.word	0x20000060

00008128 <__NVIC_EnableIRQ>:
{
    8128:	b480      	push	{r7}
    812a:	b083      	sub	sp, #12
    812c:	af00      	add	r7, sp, #0
    812e:	4603      	mov	r3, r0
    8130:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8136:	2b00      	cmp	r3, #0
    8138:	db0b      	blt.n	8152 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    813a:	4909      	ldr	r1, [pc, #36]	; (8160 <__NVIC_EnableIRQ+0x38>)
    813c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8140:	095b      	lsrs	r3, r3, #5
    8142:	88fa      	ldrh	r2, [r7, #6]
    8144:	f002 021f 	and.w	r2, r2, #31
    8148:	2001      	movs	r0, #1
    814a:	fa00 f202 	lsl.w	r2, r0, r2
    814e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8152:	bf00      	nop
    8154:	370c      	adds	r7, #12
    8156:	46bd      	mov	sp, r7
    8158:	f85d 7b04 	ldr.w	r7, [sp], #4
    815c:	4770      	bx	lr
    815e:	bf00      	nop
    8160:	e000e100 	.word	0xe000e100

00008164 <__NVIC_DisableIRQ>:
{
    8164:	b480      	push	{r7}
    8166:	b083      	sub	sp, #12
    8168:	af00      	add	r7, sp, #0
    816a:	4603      	mov	r3, r0
    816c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    816e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8172:	2b00      	cmp	r3, #0
    8174:	db10      	blt.n	8198 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8176:	490b      	ldr	r1, [pc, #44]	; (81a4 <__NVIC_DisableIRQ+0x40>)
    8178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    817c:	095b      	lsrs	r3, r3, #5
    817e:	88fa      	ldrh	r2, [r7, #6]
    8180:	f002 021f 	and.w	r2, r2, #31
    8184:	2001      	movs	r0, #1
    8186:	fa00 f202 	lsl.w	r2, r0, r2
    818a:	3320      	adds	r3, #32
    818c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8190:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8194:	f3bf 8f6f 	isb	sy
}
    8198:	bf00      	nop
    819a:	370c      	adds	r7, #12
    819c:	46bd      	mov	sp, r7
    819e:	f85d 7b04 	ldr.w	r7, [sp], #4
    81a2:	4770      	bx	lr
    81a4:	e000e100 	.word	0xe000e100

000081a8 <__NVIC_ClearPendingIRQ>:
{
    81a8:	b480      	push	{r7}
    81aa:	b083      	sub	sp, #12
    81ac:	af00      	add	r7, sp, #0
    81ae:	4603      	mov	r3, r0
    81b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    81b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    81b6:	2b00      	cmp	r3, #0
    81b8:	db0c      	blt.n	81d4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    81ba:	4909      	ldr	r1, [pc, #36]	; (81e0 <__NVIC_ClearPendingIRQ+0x38>)
    81bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    81c0:	095b      	lsrs	r3, r3, #5
    81c2:	88fa      	ldrh	r2, [r7, #6]
    81c4:	f002 021f 	and.w	r2, r2, #31
    81c8:	2001      	movs	r0, #1
    81ca:	fa00 f202 	lsl.w	r2, r0, r2
    81ce:	3360      	adds	r3, #96	; 0x60
    81d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    81d4:	bf00      	nop
    81d6:	370c      	adds	r7, #12
    81d8:	46bd      	mov	sp, r7
    81da:	f85d 7b04 	ldr.w	r7, [sp], #4
    81de:	4770      	bx	lr
    81e0:	e000e100 	.word	0xe000e100

000081e4 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    81e4:	b480      	push	{r7}
    81e6:	b083      	sub	sp, #12
    81e8:	af00      	add	r7, sp, #0
    81ea:	6078      	str	r0, [r7, #4]
    81ec:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    81ee:	bf00      	nop
    81f0:	687b      	ldr	r3, [r7, #4]
    81f2:	691a      	ldr	r2, [r3, #16]
    81f4:	683b      	ldr	r3, [r7, #0]
    81f6:	4013      	ands	r3, r2
    81f8:	2b00      	cmp	r3, #0
    81fa:	d1f9      	bne.n	81f0 <hri_tc_wait_for_sync+0xc>
	};
}
    81fc:	bf00      	nop
    81fe:	370c      	adds	r7, #12
    8200:	46bd      	mov	sp, r7
    8202:	f85d 7b04 	ldr.w	r7, [sp], #4
    8206:	4770      	bx	lr

00008208 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8208:	b480      	push	{r7}
    820a:	b083      	sub	sp, #12
    820c:	af00      	add	r7, sp, #0
    820e:	6078      	str	r0, [r7, #4]
    8210:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    8212:	687b      	ldr	r3, [r7, #4]
    8214:	691a      	ldr	r2, [r3, #16]
    8216:	683b      	ldr	r3, [r7, #0]
    8218:	4013      	ands	r3, r2
    821a:	2b00      	cmp	r3, #0
    821c:	bf14      	ite	ne
    821e:	2301      	movne	r3, #1
    8220:	2300      	moveq	r3, #0
    8222:	b2db      	uxtb	r3, r3
}
    8224:	4618      	mov	r0, r3
    8226:	370c      	adds	r7, #12
    8228:	46bd      	mov	sp, r7
    822a:	f85d 7b04 	ldr.w	r7, [sp], #4
    822e:	4770      	bx	lr

00008230 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    8230:	b480      	push	{r7}
    8232:	b083      	sub	sp, #12
    8234:	af00      	add	r7, sp, #0
    8236:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    8238:	687b      	ldr	r3, [r7, #4]
    823a:	7a9b      	ldrb	r3, [r3, #10]
    823c:	b2db      	uxtb	r3, r3
    823e:	f003 0301 	and.w	r3, r3, #1
    8242:	2b00      	cmp	r3, #0
    8244:	bf14      	ite	ne
    8246:	2301      	movne	r3, #1
    8248:	2300      	moveq	r3, #0
    824a:	b2db      	uxtb	r3, r3
}
    824c:	4618      	mov	r0, r3
    824e:	370c      	adds	r7, #12
    8250:	46bd      	mov	sp, r7
    8252:	f85d 7b04 	ldr.w	r7, [sp], #4
    8256:	4770      	bx	lr

00008258 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    8258:	b480      	push	{r7}
    825a:	b083      	sub	sp, #12
    825c:	af00      	add	r7, sp, #0
    825e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8260:	687b      	ldr	r3, [r7, #4]
    8262:	2201      	movs	r2, #1
    8264:	729a      	strb	r2, [r3, #10]
}
    8266:	bf00      	nop
    8268:	370c      	adds	r7, #12
    826a:	46bd      	mov	sp, r7
    826c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8270:	4770      	bx	lr

00008272 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    8272:	b480      	push	{r7}
    8274:	b083      	sub	sp, #12
    8276:	af00      	add	r7, sp, #0
    8278:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    827a:	687b      	ldr	r3, [r7, #4]
    827c:	2202      	movs	r2, #2
    827e:	729a      	strb	r2, [r3, #10]
}
    8280:	bf00      	nop
    8282:	370c      	adds	r7, #12
    8284:	46bd      	mov	sp, r7
    8286:	f85d 7b04 	ldr.w	r7, [sp], #4
    828a:	4770      	bx	lr

0000828c <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    828c:	b480      	push	{r7}
    828e:	b083      	sub	sp, #12
    8290:	af00      	add	r7, sp, #0
    8292:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    8294:	687b      	ldr	r3, [r7, #4]
    8296:	2201      	movs	r2, #1
    8298:	725a      	strb	r2, [r3, #9]
}
    829a:	bf00      	nop
    829c:	370c      	adds	r7, #12
    829e:	46bd      	mov	sp, r7
    82a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    82a4:	4770      	bx	lr

000082a6 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    82a6:	b480      	push	{r7}
    82a8:	b083      	sub	sp, #12
    82aa:	af00      	add	r7, sp, #0
    82ac:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    82ae:	687b      	ldr	r3, [r7, #4]
    82b0:	7a5b      	ldrb	r3, [r3, #9]
    82b2:	b2db      	uxtb	r3, r3
    82b4:	085b      	lsrs	r3, r3, #1
    82b6:	f003 0301 	and.w	r3, r3, #1
    82ba:	2b00      	cmp	r3, #0
    82bc:	bf14      	ite	ne
    82be:	2301      	movne	r3, #1
    82c0:	2300      	moveq	r3, #0
    82c2:	b2db      	uxtb	r3, r3
}
    82c4:	4618      	mov	r0, r3
    82c6:	370c      	adds	r7, #12
    82c8:	46bd      	mov	sp, r7
    82ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    82ce:	4770      	bx	lr

000082d0 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    82d0:	b580      	push	{r7, lr}
    82d2:	b082      	sub	sp, #8
    82d4:	af00      	add	r7, sp, #0
    82d6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    82d8:	687b      	ldr	r3, [r7, #4]
    82da:	681b      	ldr	r3, [r3, #0]
    82dc:	f043 0201 	orr.w	r2, r3, #1
    82e0:	687b      	ldr	r3, [r7, #4]
    82e2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    82e4:	2101      	movs	r1, #1
    82e6:	6878      	ldr	r0, [r7, #4]
    82e8:	4b02      	ldr	r3, [pc, #8]	; (82f4 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    82ea:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    82ec:	bf00      	nop
    82ee:	3708      	adds	r7, #8
    82f0:	46bd      	mov	sp, r7
    82f2:	bd80      	pop	{r7, pc}
    82f4:	000081e5 	.word	0x000081e5

000082f8 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    82f8:	b580      	push	{r7, lr}
    82fa:	b082      	sub	sp, #8
    82fc:	af00      	add	r7, sp, #0
    82fe:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8300:	687b      	ldr	r3, [r7, #4]
    8302:	681b      	ldr	r3, [r3, #0]
    8304:	f043 0202 	orr.w	r2, r3, #2
    8308:	687b      	ldr	r3, [r7, #4]
    830a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    830c:	2103      	movs	r1, #3
    830e:	6878      	ldr	r0, [r7, #4]
    8310:	4b02      	ldr	r3, [pc, #8]	; (831c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    8312:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8314:	bf00      	nop
    8316:	3708      	adds	r7, #8
    8318:	46bd      	mov	sp, r7
    831a:	bd80      	pop	{r7, pc}
    831c:	000081e5 	.word	0x000081e5

00008320 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8320:	b580      	push	{r7, lr}
    8322:	b084      	sub	sp, #16
    8324:	af00      	add	r7, sp, #0
    8326:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8328:	2103      	movs	r1, #3
    832a:	6878      	ldr	r0, [r7, #4]
    832c:	4b09      	ldr	r3, [pc, #36]	; (8354 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    832e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8330:	687b      	ldr	r3, [r7, #4]
    8332:	681b      	ldr	r3, [r3, #0]
    8334:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    8336:	68fb      	ldr	r3, [r7, #12]
    8338:	085b      	lsrs	r3, r3, #1
    833a:	f003 0301 	and.w	r3, r3, #1
    833e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8340:	68fb      	ldr	r3, [r7, #12]
    8342:	2b00      	cmp	r3, #0
    8344:	bf14      	ite	ne
    8346:	2301      	movne	r3, #1
    8348:	2300      	moveq	r3, #0
    834a:	b2db      	uxtb	r3, r3
}
    834c:	4618      	mov	r0, r3
    834e:	3710      	adds	r7, #16
    8350:	46bd      	mov	sp, r7
    8352:	bd80      	pop	{r7, pc}
    8354:	000081e5 	.word	0x000081e5

00008358 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8358:	b580      	push	{r7, lr}
    835a:	b082      	sub	sp, #8
    835c:	af00      	add	r7, sp, #0
    835e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8360:	687b      	ldr	r3, [r7, #4]
    8362:	681b      	ldr	r3, [r3, #0]
    8364:	f023 0202 	bic.w	r2, r3, #2
    8368:	687b      	ldr	r3, [r7, #4]
    836a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    836c:	2103      	movs	r1, #3
    836e:	6878      	ldr	r0, [r7, #4]
    8370:	4b02      	ldr	r3, [pc, #8]	; (837c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    8372:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8374:	bf00      	nop
    8376:	3708      	adds	r7, #8
    8378:	46bd      	mov	sp, r7
    837a:	bd80      	pop	{r7, pc}
    837c:	000081e5 	.word	0x000081e5

00008380 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    8380:	b480      	push	{r7}
    8382:	b085      	sub	sp, #20
    8384:	af00      	add	r7, sp, #0
    8386:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8388:	687b      	ldr	r3, [r7, #4]
    838a:	681b      	ldr	r3, [r3, #0]
    838c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    838e:	68fb      	ldr	r3, [r7, #12]
    8390:	089b      	lsrs	r3, r3, #2
    8392:	f003 0303 	and.w	r3, r3, #3
    8396:	60fb      	str	r3, [r7, #12]
	return tmp;
    8398:	68fb      	ldr	r3, [r7, #12]
}
    839a:	4618      	mov	r0, r3
    839c:	3714      	adds	r7, #20
    839e:	46bd      	mov	sp, r7
    83a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    83a4:	4770      	bx	lr
	...

000083a8 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    83a8:	b580      	push	{r7, lr}
    83aa:	b084      	sub	sp, #16
    83ac:	af00      	add	r7, sp, #0
    83ae:	6078      	str	r0, [r7, #4]
    83b0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    83b2:	2103      	movs	r1, #3
    83b4:	6878      	ldr	r0, [r7, #4]
    83b6:	4b07      	ldr	r3, [pc, #28]	; (83d4 <hri_tc_get_CTRLA_reg+0x2c>)
    83b8:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    83ba:	687b      	ldr	r3, [r7, #4]
    83bc:	681b      	ldr	r3, [r3, #0]
    83be:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    83c0:	68fa      	ldr	r2, [r7, #12]
    83c2:	683b      	ldr	r3, [r7, #0]
    83c4:	4013      	ands	r3, r2
    83c6:	60fb      	str	r3, [r7, #12]
	return tmp;
    83c8:	68fb      	ldr	r3, [r7, #12]
}
    83ca:	4618      	mov	r0, r3
    83cc:	3710      	adds	r7, #16
    83ce:	46bd      	mov	sp, r7
    83d0:	bd80      	pop	{r7, pc}
    83d2:	bf00      	nop
    83d4:	000081e5 	.word	0x000081e5

000083d8 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    83d8:	b580      	push	{r7, lr}
    83da:	b082      	sub	sp, #8
    83dc:	af00      	add	r7, sp, #0
    83de:	6078      	str	r0, [r7, #4]
    83e0:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    83e2:	687b      	ldr	r3, [r7, #4]
    83e4:	683a      	ldr	r2, [r7, #0]
    83e6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    83e8:	2103      	movs	r1, #3
    83ea:	6878      	ldr	r0, [r7, #4]
    83ec:	4b02      	ldr	r3, [pc, #8]	; (83f8 <hri_tc_write_CTRLA_reg+0x20>)
    83ee:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    83f0:	bf00      	nop
    83f2:	3708      	adds	r7, #8
    83f4:	46bd      	mov	sp, r7
    83f6:	bd80      	pop	{r7, pc}
    83f8:	000081e5 	.word	0x000081e5

000083fc <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    83fc:	b480      	push	{r7}
    83fe:	b083      	sub	sp, #12
    8400:	af00      	add	r7, sp, #0
    8402:	6078      	str	r0, [r7, #4]
    8404:	460b      	mov	r3, r1
    8406:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8408:	687b      	ldr	r3, [r7, #4]
    840a:	887a      	ldrh	r2, [r7, #2]
    840c:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    840e:	bf00      	nop
    8410:	370c      	adds	r7, #12
    8412:	46bd      	mov	sp, r7
    8414:	f85d 7b04 	ldr.w	r7, [sp], #4
    8418:	4770      	bx	lr

0000841a <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    841a:	b480      	push	{r7}
    841c:	b083      	sub	sp, #12
    841e:	af00      	add	r7, sp, #0
    8420:	6078      	str	r0, [r7, #4]
    8422:	460b      	mov	r3, r1
    8424:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    8426:	687b      	ldr	r3, [r7, #4]
    8428:	78fa      	ldrb	r2, [r7, #3]
    842a:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    842c:	bf00      	nop
    842e:	370c      	adds	r7, #12
    8430:	46bd      	mov	sp, r7
    8432:	f85d 7b04 	ldr.w	r7, [sp], #4
    8436:	4770      	bx	lr

00008438 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    8438:	b480      	push	{r7}
    843a:	b083      	sub	sp, #12
    843c:	af00      	add	r7, sp, #0
    843e:	6078      	str	r0, [r7, #4]
    8440:	460b      	mov	r3, r1
    8442:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    8444:	687b      	ldr	r3, [r7, #4]
    8446:	78fa      	ldrb	r2, [r7, #3]
    8448:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    844a:	bf00      	nop
    844c:	370c      	adds	r7, #12
    844e:	46bd      	mov	sp, r7
    8450:	f85d 7b04 	ldr.w	r7, [sp], #4
    8454:	4770      	bx	lr
	...

00008458 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    8458:	b580      	push	{r7, lr}
    845a:	b082      	sub	sp, #8
    845c:	af00      	add	r7, sp, #0
    845e:	6078      	str	r0, [r7, #4]
    8460:	460b      	mov	r3, r1
    8462:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    8464:	687b      	ldr	r3, [r7, #4]
    8466:	78fa      	ldrb	r2, [r7, #3]
    8468:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    846a:	2120      	movs	r1, #32
    846c:	6878      	ldr	r0, [r7, #4]
    846e:	4b03      	ldr	r3, [pc, #12]	; (847c <hri_tccount8_write_PER_reg+0x24>)
    8470:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8472:	bf00      	nop
    8474:	3708      	adds	r7, #8
    8476:	46bd      	mov	sp, r7
    8478:	bd80      	pop	{r7, pc}
    847a:	bf00      	nop
    847c:	000081e5 	.word	0x000081e5

00008480 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    8480:	b580      	push	{r7, lr}
    8482:	b082      	sub	sp, #8
    8484:	af00      	add	r7, sp, #0
    8486:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    8488:	2120      	movs	r1, #32
    848a:	6878      	ldr	r0, [r7, #4]
    848c:	4b04      	ldr	r3, [pc, #16]	; (84a0 <hri_tccount8_read_PER_reg+0x20>)
    848e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    8490:	687b      	ldr	r3, [r7, #4]
    8492:	7edb      	ldrb	r3, [r3, #27]
    8494:	b2db      	uxtb	r3, r3
}
    8496:	4618      	mov	r0, r3
    8498:	3708      	adds	r7, #8
    849a:	46bd      	mov	sp, r7
    849c:	bd80      	pop	{r7, pc}
    849e:	bf00      	nop
    84a0:	000081e5 	.word	0x000081e5

000084a4 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    84a4:	b580      	push	{r7, lr}
    84a6:	b082      	sub	sp, #8
    84a8:	af00      	add	r7, sp, #0
    84aa:	6078      	str	r0, [r7, #4]
    84ac:	460b      	mov	r3, r1
    84ae:	70fb      	strb	r3, [r7, #3]
    84b0:	4613      	mov	r3, r2
    84b2:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    84b4:	78fb      	ldrb	r3, [r7, #3]
    84b6:	687a      	ldr	r2, [r7, #4]
    84b8:	4413      	add	r3, r2
    84ba:	78ba      	ldrb	r2, [r7, #2]
    84bc:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    84be:	21c0      	movs	r1, #192	; 0xc0
    84c0:	6878      	ldr	r0, [r7, #4]
    84c2:	4b03      	ldr	r3, [pc, #12]	; (84d0 <hri_tccount8_write_CC_reg+0x2c>)
    84c4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    84c6:	bf00      	nop
    84c8:	3708      	adds	r7, #8
    84ca:	46bd      	mov	sp, r7
    84cc:	bd80      	pop	{r7, pc}
    84ce:	bf00      	nop
    84d0:	000081e5 	.word	0x000081e5

000084d4 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    84d4:	b580      	push	{r7, lr}
    84d6:	b082      	sub	sp, #8
    84d8:	af00      	add	r7, sp, #0
    84da:	6078      	str	r0, [r7, #4]
    84dc:	460b      	mov	r3, r1
    84de:	70fb      	strb	r3, [r7, #3]
    84e0:	4613      	mov	r3, r2
    84e2:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    84e4:	78fb      	ldrb	r3, [r7, #3]
    84e6:	687a      	ldr	r2, [r7, #4]
    84e8:	330c      	adds	r3, #12
    84ea:	005b      	lsls	r3, r3, #1
    84ec:	4413      	add	r3, r2
    84ee:	883a      	ldrh	r2, [r7, #0]
    84f0:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    84f2:	21c0      	movs	r1, #192	; 0xc0
    84f4:	6878      	ldr	r0, [r7, #4]
    84f6:	4b03      	ldr	r3, [pc, #12]	; (8504 <hri_tccount16_write_CC_reg+0x30>)
    84f8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    84fa:	bf00      	nop
    84fc:	3708      	adds	r7, #8
    84fe:	46bd      	mov	sp, r7
    8500:	bd80      	pop	{r7, pc}
    8502:	bf00      	nop
    8504:	000081e5 	.word	0x000081e5

00008508 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8508:	b580      	push	{r7, lr}
    850a:	b082      	sub	sp, #8
    850c:	af00      	add	r7, sp, #0
    850e:	6078      	str	r0, [r7, #4]
    8510:	460b      	mov	r3, r1
    8512:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8514:	21c0      	movs	r1, #192	; 0xc0
    8516:	6878      	ldr	r0, [r7, #4]
    8518:	4b06      	ldr	r3, [pc, #24]	; (8534 <hri_tccount16_read_CC_reg+0x2c>)
    851a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    851c:	78fb      	ldrb	r3, [r7, #3]
    851e:	687a      	ldr	r2, [r7, #4]
    8520:	330c      	adds	r3, #12
    8522:	005b      	lsls	r3, r3, #1
    8524:	4413      	add	r3, r2
    8526:	889b      	ldrh	r3, [r3, #4]
    8528:	b29b      	uxth	r3, r3
}
    852a:	4618      	mov	r0, r3
    852c:	3708      	adds	r7, #8
    852e:	46bd      	mov	sp, r7
    8530:	bd80      	pop	{r7, pc}
    8532:	bf00      	nop
    8534:	000081e5 	.word	0x000081e5

00008538 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    8538:	b580      	push	{r7, lr}
    853a:	b084      	sub	sp, #16
    853c:	af00      	add	r7, sp, #0
    853e:	60f8      	str	r0, [r7, #12]
    8540:	460b      	mov	r3, r1
    8542:	607a      	str	r2, [r7, #4]
    8544:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8546:	7afb      	ldrb	r3, [r7, #11]
    8548:	68fa      	ldr	r2, [r7, #12]
    854a:	3306      	adds	r3, #6
    854c:	009b      	lsls	r3, r3, #2
    854e:	4413      	add	r3, r2
    8550:	687a      	ldr	r2, [r7, #4]
    8552:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8554:	21c0      	movs	r1, #192	; 0xc0
    8556:	68f8      	ldr	r0, [r7, #12]
    8558:	4b02      	ldr	r3, [pc, #8]	; (8564 <hri_tccount32_write_CC_reg+0x2c>)
    855a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    855c:	bf00      	nop
    855e:	3710      	adds	r7, #16
    8560:	46bd      	mov	sp, r7
    8562:	bd80      	pop	{r7, pc}
    8564:	000081e5 	.word	0x000081e5

00008568 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    8568:	b580      	push	{r7, lr}
    856a:	b082      	sub	sp, #8
    856c:	af00      	add	r7, sp, #0
    856e:	6078      	str	r0, [r7, #4]
    8570:	460b      	mov	r3, r1
    8572:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8574:	21c0      	movs	r1, #192	; 0xc0
    8576:	6878      	ldr	r0, [r7, #4]
    8578:	4b05      	ldr	r3, [pc, #20]	; (8590 <hri_tccount32_read_CC_reg+0x28>)
    857a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    857c:	78fb      	ldrb	r3, [r7, #3]
    857e:	687a      	ldr	r2, [r7, #4]
    8580:	3306      	adds	r3, #6
    8582:	009b      	lsls	r3, r3, #2
    8584:	4413      	add	r3, r2
    8586:	685b      	ldr	r3, [r3, #4]
}
    8588:	4618      	mov	r0, r3
    858a:	3708      	adds	r7, #8
    858c:	46bd      	mov	sp, r7
    858e:	bd80      	pop	{r7, pc}
    8590:	000081e5 	.word	0x000081e5

00008594 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    8594:	b580      	push	{r7, lr}
    8596:	b084      	sub	sp, #16
    8598:	af00      	add	r7, sp, #0
    859a:	6078      	str	r0, [r7, #4]
    859c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    859e:	6838      	ldr	r0, [r7, #0]
    85a0:	4b93      	ldr	r3, [pc, #588]	; (87f0 <_tc_timer_init+0x25c>)
    85a2:	4798      	blx	r3
    85a4:	4603      	mov	r3, r0
    85a6:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    85a8:	687b      	ldr	r3, [r7, #4]
    85aa:	683a      	ldr	r2, [r7, #0]
    85ac:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    85ae:	22a4      	movs	r2, #164	; 0xa4
    85b0:	4990      	ldr	r1, [pc, #576]	; (87f4 <_tc_timer_init+0x260>)
    85b2:	2001      	movs	r0, #1
    85b4:	4b90      	ldr	r3, [pc, #576]	; (87f8 <_tc_timer_init+0x264>)
    85b6:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    85b8:	2101      	movs	r1, #1
    85ba:	6838      	ldr	r0, [r7, #0]
    85bc:	4b8f      	ldr	r3, [pc, #572]	; (87fc <_tc_timer_init+0x268>)
    85be:	4798      	blx	r3
    85c0:	4603      	mov	r3, r0
    85c2:	f083 0301 	eor.w	r3, r3, #1
    85c6:	b2db      	uxtb	r3, r3
    85c8:	2b00      	cmp	r3, #0
    85ca:	d011      	beq.n	85f0 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    85cc:	2102      	movs	r1, #2
    85ce:	6838      	ldr	r0, [r7, #0]
    85d0:	4b8b      	ldr	r3, [pc, #556]	; (8800 <_tc_timer_init+0x26c>)
    85d2:	4798      	blx	r3
    85d4:	4603      	mov	r3, r0
    85d6:	2b00      	cmp	r3, #0
    85d8:	d006      	beq.n	85e8 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    85da:	6838      	ldr	r0, [r7, #0]
    85dc:	4b89      	ldr	r3, [pc, #548]	; (8804 <_tc_timer_init+0x270>)
    85de:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    85e0:	2102      	movs	r1, #2
    85e2:	6838      	ldr	r0, [r7, #0]
    85e4:	4b88      	ldr	r3, [pc, #544]	; (8808 <_tc_timer_init+0x274>)
    85e6:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    85e8:	2101      	movs	r1, #1
    85ea:	6838      	ldr	r0, [r7, #0]
    85ec:	4b87      	ldr	r3, [pc, #540]	; (880c <_tc_timer_init+0x278>)
    85ee:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    85f0:	2101      	movs	r1, #1
    85f2:	6838      	ldr	r0, [r7, #0]
    85f4:	4b84      	ldr	r3, [pc, #528]	; (8808 <_tc_timer_init+0x274>)
    85f6:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    85f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85fc:	4984      	ldr	r1, [pc, #528]	; (8810 <_tc_timer_init+0x27c>)
    85fe:	4613      	mov	r3, r2
    8600:	009b      	lsls	r3, r3, #2
    8602:	4413      	add	r3, r2
    8604:	009b      	lsls	r3, r3, #2
    8606:	440b      	add	r3, r1
    8608:	3304      	adds	r3, #4
    860a:	681b      	ldr	r3, [r3, #0]
    860c:	4619      	mov	r1, r3
    860e:	6838      	ldr	r0, [r7, #0]
    8610:	4b7e      	ldr	r3, [pc, #504]	; (880c <_tc_timer_init+0x278>)
    8612:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8614:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8618:	497d      	ldr	r1, [pc, #500]	; (8810 <_tc_timer_init+0x27c>)
    861a:	4613      	mov	r3, r2
    861c:	009b      	lsls	r3, r3, #2
    861e:	4413      	add	r3, r2
    8620:	009b      	lsls	r3, r3, #2
    8622:	440b      	add	r3, r1
    8624:	330a      	adds	r3, #10
    8626:	781b      	ldrb	r3, [r3, #0]
    8628:	4619      	mov	r1, r3
    862a:	6838      	ldr	r0, [r7, #0]
    862c:	4b79      	ldr	r3, [pc, #484]	; (8814 <_tc_timer_init+0x280>)
    862e:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8630:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8634:	4976      	ldr	r1, [pc, #472]	; (8810 <_tc_timer_init+0x27c>)
    8636:	4613      	mov	r3, r2
    8638:	009b      	lsls	r3, r3, #2
    863a:	4413      	add	r3, r2
    863c:	009b      	lsls	r3, r3, #2
    863e:	440b      	add	r3, r1
    8640:	3308      	adds	r3, #8
    8642:	881b      	ldrh	r3, [r3, #0]
    8644:	4619      	mov	r1, r3
    8646:	6838      	ldr	r0, [r7, #0]
    8648:	4b73      	ldr	r3, [pc, #460]	; (8818 <_tc_timer_init+0x284>)
    864a:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    864c:	2101      	movs	r1, #1
    864e:	6838      	ldr	r0, [r7, #0]
    8650:	4b72      	ldr	r3, [pc, #456]	; (881c <_tc_timer_init+0x288>)
    8652:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8654:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8658:	496d      	ldr	r1, [pc, #436]	; (8810 <_tc_timer_init+0x27c>)
    865a:	4613      	mov	r3, r2
    865c:	009b      	lsls	r3, r3, #2
    865e:	4413      	add	r3, r2
    8660:	009b      	lsls	r3, r3, #2
    8662:	440b      	add	r3, r1
    8664:	3304      	adds	r3, #4
    8666:	681b      	ldr	r3, [r3, #0]
    8668:	f003 030c 	and.w	r3, r3, #12
    866c:	2b08      	cmp	r3, #8
    866e:	d11e      	bne.n	86ae <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8670:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8674:	4966      	ldr	r1, [pc, #408]	; (8810 <_tc_timer_init+0x27c>)
    8676:	4613      	mov	r3, r2
    8678:	009b      	lsls	r3, r3, #2
    867a:	4413      	add	r3, r2
    867c:	009b      	lsls	r3, r3, #2
    867e:	440b      	add	r3, r1
    8680:	330c      	adds	r3, #12
    8682:	681b      	ldr	r3, [r3, #0]
    8684:	461a      	mov	r2, r3
    8686:	2100      	movs	r1, #0
    8688:	6838      	ldr	r0, [r7, #0]
    868a:	4b65      	ldr	r3, [pc, #404]	; (8820 <_tc_timer_init+0x28c>)
    868c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    868e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8692:	495f      	ldr	r1, [pc, #380]	; (8810 <_tc_timer_init+0x27c>)
    8694:	4613      	mov	r3, r2
    8696:	009b      	lsls	r3, r3, #2
    8698:	4413      	add	r3, r2
    869a:	009b      	lsls	r3, r3, #2
    869c:	440b      	add	r3, r1
    869e:	3310      	adds	r3, #16
    86a0:	681b      	ldr	r3, [r3, #0]
    86a2:	461a      	mov	r2, r3
    86a4:	2101      	movs	r1, #1
    86a6:	6838      	ldr	r0, [r7, #0]
    86a8:	4b5d      	ldr	r3, [pc, #372]	; (8820 <_tc_timer_init+0x28c>)
    86aa:	4798      	blx	r3
    86ac:	e06a      	b.n	8784 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    86ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86b2:	4957      	ldr	r1, [pc, #348]	; (8810 <_tc_timer_init+0x27c>)
    86b4:	4613      	mov	r3, r2
    86b6:	009b      	lsls	r3, r3, #2
    86b8:	4413      	add	r3, r2
    86ba:	009b      	lsls	r3, r3, #2
    86bc:	440b      	add	r3, r1
    86be:	3304      	adds	r3, #4
    86c0:	681b      	ldr	r3, [r3, #0]
    86c2:	f003 030c 	and.w	r3, r3, #12
    86c6:	2b00      	cmp	r3, #0
    86c8:	d120      	bne.n	870c <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    86ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86ce:	4950      	ldr	r1, [pc, #320]	; (8810 <_tc_timer_init+0x27c>)
    86d0:	4613      	mov	r3, r2
    86d2:	009b      	lsls	r3, r3, #2
    86d4:	4413      	add	r3, r2
    86d6:	009b      	lsls	r3, r3, #2
    86d8:	440b      	add	r3, r1
    86da:	330c      	adds	r3, #12
    86dc:	681b      	ldr	r3, [r3, #0]
    86de:	b29b      	uxth	r3, r3
    86e0:	461a      	mov	r2, r3
    86e2:	2100      	movs	r1, #0
    86e4:	6838      	ldr	r0, [r7, #0]
    86e6:	4b4f      	ldr	r3, [pc, #316]	; (8824 <_tc_timer_init+0x290>)
    86e8:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    86ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86ee:	4948      	ldr	r1, [pc, #288]	; (8810 <_tc_timer_init+0x27c>)
    86f0:	4613      	mov	r3, r2
    86f2:	009b      	lsls	r3, r3, #2
    86f4:	4413      	add	r3, r2
    86f6:	009b      	lsls	r3, r3, #2
    86f8:	440b      	add	r3, r1
    86fa:	3310      	adds	r3, #16
    86fc:	681b      	ldr	r3, [r3, #0]
    86fe:	b29b      	uxth	r3, r3
    8700:	461a      	mov	r2, r3
    8702:	2101      	movs	r1, #1
    8704:	6838      	ldr	r0, [r7, #0]
    8706:	4b47      	ldr	r3, [pc, #284]	; (8824 <_tc_timer_init+0x290>)
    8708:	4798      	blx	r3
    870a:	e03b      	b.n	8784 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    870c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8710:	493f      	ldr	r1, [pc, #252]	; (8810 <_tc_timer_init+0x27c>)
    8712:	4613      	mov	r3, r2
    8714:	009b      	lsls	r3, r3, #2
    8716:	4413      	add	r3, r2
    8718:	009b      	lsls	r3, r3, #2
    871a:	440b      	add	r3, r1
    871c:	3304      	adds	r3, #4
    871e:	681b      	ldr	r3, [r3, #0]
    8720:	f003 030c 	and.w	r3, r3, #12
    8724:	2b04      	cmp	r3, #4
    8726:	d12d      	bne.n	8784 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8728:	f997 200f 	ldrsb.w	r2, [r7, #15]
    872c:	4938      	ldr	r1, [pc, #224]	; (8810 <_tc_timer_init+0x27c>)
    872e:	4613      	mov	r3, r2
    8730:	009b      	lsls	r3, r3, #2
    8732:	4413      	add	r3, r2
    8734:	009b      	lsls	r3, r3, #2
    8736:	440b      	add	r3, r1
    8738:	330c      	adds	r3, #12
    873a:	681b      	ldr	r3, [r3, #0]
    873c:	b2db      	uxtb	r3, r3
    873e:	461a      	mov	r2, r3
    8740:	2100      	movs	r1, #0
    8742:	6838      	ldr	r0, [r7, #0]
    8744:	4b38      	ldr	r3, [pc, #224]	; (8828 <_tc_timer_init+0x294>)
    8746:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    8748:	f997 200f 	ldrsb.w	r2, [r7, #15]
    874c:	4930      	ldr	r1, [pc, #192]	; (8810 <_tc_timer_init+0x27c>)
    874e:	4613      	mov	r3, r2
    8750:	009b      	lsls	r3, r3, #2
    8752:	4413      	add	r3, r2
    8754:	009b      	lsls	r3, r3, #2
    8756:	440b      	add	r3, r1
    8758:	3310      	adds	r3, #16
    875a:	681b      	ldr	r3, [r3, #0]
    875c:	b2db      	uxtb	r3, r3
    875e:	461a      	mov	r2, r3
    8760:	2101      	movs	r1, #1
    8762:	6838      	ldr	r0, [r7, #0]
    8764:	4b30      	ldr	r3, [pc, #192]	; (8828 <_tc_timer_init+0x294>)
    8766:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    8768:	f997 200f 	ldrsb.w	r2, [r7, #15]
    876c:	4928      	ldr	r1, [pc, #160]	; (8810 <_tc_timer_init+0x27c>)
    876e:	4613      	mov	r3, r2
    8770:	009b      	lsls	r3, r3, #2
    8772:	4413      	add	r3, r2
    8774:	009b      	lsls	r3, r3, #2
    8776:	440b      	add	r3, r1
    8778:	330b      	adds	r3, #11
    877a:	781b      	ldrb	r3, [r3, #0]
    877c:	4619      	mov	r1, r3
    877e:	6838      	ldr	r0, [r7, #0]
    8780:	4b2a      	ldr	r3, [pc, #168]	; (882c <_tc_timer_init+0x298>)
    8782:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    8784:	6838      	ldr	r0, [r7, #0]
    8786:	4b2a      	ldr	r3, [pc, #168]	; (8830 <_tc_timer_init+0x29c>)
    8788:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    878a:	6879      	ldr	r1, [r7, #4]
    878c:	6838      	ldr	r0, [r7, #0]
    878e:	4b29      	ldr	r3, [pc, #164]	; (8834 <_tc_timer_init+0x2a0>)
    8790:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8792:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8796:	491e      	ldr	r1, [pc, #120]	; (8810 <_tc_timer_init+0x27c>)
    8798:	4613      	mov	r3, r2
    879a:	009b      	lsls	r3, r3, #2
    879c:	4413      	add	r3, r2
    879e:	009b      	lsls	r3, r3, #2
    87a0:	440b      	add	r3, r1
    87a2:	3302      	adds	r3, #2
    87a4:	f9b3 3000 	ldrsh.w	r3, [r3]
    87a8:	4618      	mov	r0, r3
    87aa:	4b23      	ldr	r3, [pc, #140]	; (8838 <_tc_timer_init+0x2a4>)
    87ac:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    87ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87b2:	4917      	ldr	r1, [pc, #92]	; (8810 <_tc_timer_init+0x27c>)
    87b4:	4613      	mov	r3, r2
    87b6:	009b      	lsls	r3, r3, #2
    87b8:	4413      	add	r3, r2
    87ba:	009b      	lsls	r3, r3, #2
    87bc:	440b      	add	r3, r1
    87be:	3302      	adds	r3, #2
    87c0:	f9b3 3000 	ldrsh.w	r3, [r3]
    87c4:	4618      	mov	r0, r3
    87c6:	4b1d      	ldr	r3, [pc, #116]	; (883c <_tc_timer_init+0x2a8>)
    87c8:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    87ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87ce:	4910      	ldr	r1, [pc, #64]	; (8810 <_tc_timer_init+0x27c>)
    87d0:	4613      	mov	r3, r2
    87d2:	009b      	lsls	r3, r3, #2
    87d4:	4413      	add	r3, r2
    87d6:	009b      	lsls	r3, r3, #2
    87d8:	440b      	add	r3, r1
    87da:	3302      	adds	r3, #2
    87dc:	f9b3 3000 	ldrsh.w	r3, [r3]
    87e0:	4618      	mov	r0, r3
    87e2:	4b17      	ldr	r3, [pc, #92]	; (8840 <_tc_timer_init+0x2ac>)
    87e4:	4798      	blx	r3

	return ERR_NONE;
    87e6:	2300      	movs	r3, #0
}
    87e8:	4618      	mov	r0, r3
    87ea:	3710      	adds	r7, #16
    87ec:	46bd      	mov	sp, r7
    87ee:	bd80      	pop	{r7, pc}
    87f0:	00008de5 	.word	0x00008de5
    87f4:	00014140 	.word	0x00014140
    87f8:	000040dd 	.word	0x000040dd
    87fc:	00008209 	.word	0x00008209
    8800:	000083a9 	.word	0x000083a9
    8804:	00008359 	.word	0x00008359
    8808:	000081e5 	.word	0x000081e5
    880c:	000083d9 	.word	0x000083d9
    8810:	20000110 	.word	0x20000110
    8814:	00008439 	.word	0x00008439
    8818:	000083fd 	.word	0x000083fd
    881c:	0000841b 	.word	0x0000841b
    8820:	00008539 	.word	0x00008539
    8824:	000084d5 	.word	0x000084d5
    8828:	000084a5 	.word	0x000084a5
    882c:	00008459 	.word	0x00008459
    8830:	0000828d 	.word	0x0000828d
    8834:	00008e4d 	.word	0x00008e4d
    8838:	00008165 	.word	0x00008165
    883c:	000081a9 	.word	0x000081a9
    8840:	00008129 	.word	0x00008129

00008844 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    8844:	b580      	push	{r7, lr}
    8846:	b084      	sub	sp, #16
    8848:	af00      	add	r7, sp, #0
    884a:	6078      	str	r0, [r7, #4]
    884c:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    884e:	6838      	ldr	r0, [r7, #0]
    8850:	4b73      	ldr	r3, [pc, #460]	; (8a20 <_pwm_init+0x1dc>)
    8852:	4798      	blx	r3
    8854:	4603      	mov	r3, r0
    8856:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    8858:	687b      	ldr	r3, [r7, #4]
    885a:	683a      	ldr	r2, [r7, #0]
    885c:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    885e:	2101      	movs	r1, #1
    8860:	6838      	ldr	r0, [r7, #0]
    8862:	4b70      	ldr	r3, [pc, #448]	; (8a24 <_pwm_init+0x1e0>)
    8864:	4798      	blx	r3
    8866:	4603      	mov	r3, r0
    8868:	f083 0301 	eor.w	r3, r3, #1
    886c:	b2db      	uxtb	r3, r3
    886e:	2b00      	cmp	r3, #0
    8870:	d011      	beq.n	8896 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8872:	2102      	movs	r1, #2
    8874:	6838      	ldr	r0, [r7, #0]
    8876:	4b6c      	ldr	r3, [pc, #432]	; (8a28 <_pwm_init+0x1e4>)
    8878:	4798      	blx	r3
    887a:	4603      	mov	r3, r0
    887c:	2b00      	cmp	r3, #0
    887e:	d006      	beq.n	888e <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8880:	6838      	ldr	r0, [r7, #0]
    8882:	4b6a      	ldr	r3, [pc, #424]	; (8a2c <_pwm_init+0x1e8>)
    8884:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8886:	2102      	movs	r1, #2
    8888:	6838      	ldr	r0, [r7, #0]
    888a:	4b69      	ldr	r3, [pc, #420]	; (8a30 <_pwm_init+0x1ec>)
    888c:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    888e:	2101      	movs	r1, #1
    8890:	6838      	ldr	r0, [r7, #0]
    8892:	4b68      	ldr	r3, [pc, #416]	; (8a34 <_pwm_init+0x1f0>)
    8894:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8896:	2101      	movs	r1, #1
    8898:	6838      	ldr	r0, [r7, #0]
    889a:	4b65      	ldr	r3, [pc, #404]	; (8a30 <_pwm_init+0x1ec>)
    889c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    889e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88a2:	4965      	ldr	r1, [pc, #404]	; (8a38 <_pwm_init+0x1f4>)
    88a4:	4613      	mov	r3, r2
    88a6:	009b      	lsls	r3, r3, #2
    88a8:	4413      	add	r3, r2
    88aa:	009b      	lsls	r3, r3, #2
    88ac:	440b      	add	r3, r1
    88ae:	3304      	adds	r3, #4
    88b0:	681b      	ldr	r3, [r3, #0]
    88b2:	4619      	mov	r1, r3
    88b4:	6838      	ldr	r0, [r7, #0]
    88b6:	4b5f      	ldr	r3, [pc, #380]	; (8a34 <_pwm_init+0x1f0>)
    88b8:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    88ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88be:	495e      	ldr	r1, [pc, #376]	; (8a38 <_pwm_init+0x1f4>)
    88c0:	4613      	mov	r3, r2
    88c2:	009b      	lsls	r3, r3, #2
    88c4:	4413      	add	r3, r2
    88c6:	009b      	lsls	r3, r3, #2
    88c8:	440b      	add	r3, r1
    88ca:	330a      	adds	r3, #10
    88cc:	781b      	ldrb	r3, [r3, #0]
    88ce:	4619      	mov	r1, r3
    88d0:	6838      	ldr	r0, [r7, #0]
    88d2:	4b5a      	ldr	r3, [pc, #360]	; (8a3c <_pwm_init+0x1f8>)
    88d4:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    88d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88da:	4957      	ldr	r1, [pc, #348]	; (8a38 <_pwm_init+0x1f4>)
    88dc:	4613      	mov	r3, r2
    88de:	009b      	lsls	r3, r3, #2
    88e0:	4413      	add	r3, r2
    88e2:	009b      	lsls	r3, r3, #2
    88e4:	440b      	add	r3, r1
    88e6:	3308      	adds	r3, #8
    88e8:	881b      	ldrh	r3, [r3, #0]
    88ea:	4619      	mov	r1, r3
    88ec:	6838      	ldr	r0, [r7, #0]
    88ee:	4b54      	ldr	r3, [pc, #336]	; (8a40 <_pwm_init+0x1fc>)
    88f0:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    88f2:	2103      	movs	r1, #3
    88f4:	6838      	ldr	r0, [r7, #0]
    88f6:	4b53      	ldr	r3, [pc, #332]	; (8a44 <_pwm_init+0x200>)
    88f8:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    88fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88fe:	494e      	ldr	r1, [pc, #312]	; (8a38 <_pwm_init+0x1f4>)
    8900:	4613      	mov	r3, r2
    8902:	009b      	lsls	r3, r3, #2
    8904:	4413      	add	r3, r2
    8906:	009b      	lsls	r3, r3, #2
    8908:	440b      	add	r3, r1
    890a:	3304      	adds	r3, #4
    890c:	681b      	ldr	r3, [r3, #0]
    890e:	f003 030c 	and.w	r3, r3, #12
    8912:	2b08      	cmp	r3, #8
    8914:	d11e      	bne.n	8954 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8916:	f997 200f 	ldrsb.w	r2, [r7, #15]
    891a:	4947      	ldr	r1, [pc, #284]	; (8a38 <_pwm_init+0x1f4>)
    891c:	4613      	mov	r3, r2
    891e:	009b      	lsls	r3, r3, #2
    8920:	4413      	add	r3, r2
    8922:	009b      	lsls	r3, r3, #2
    8924:	440b      	add	r3, r1
    8926:	330c      	adds	r3, #12
    8928:	681b      	ldr	r3, [r3, #0]
    892a:	461a      	mov	r2, r3
    892c:	2100      	movs	r1, #0
    892e:	6838      	ldr	r0, [r7, #0]
    8930:	4b45      	ldr	r3, [pc, #276]	; (8a48 <_pwm_init+0x204>)
    8932:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8934:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8938:	493f      	ldr	r1, [pc, #252]	; (8a38 <_pwm_init+0x1f4>)
    893a:	4613      	mov	r3, r2
    893c:	009b      	lsls	r3, r3, #2
    893e:	4413      	add	r3, r2
    8940:	009b      	lsls	r3, r3, #2
    8942:	440b      	add	r3, r1
    8944:	3310      	adds	r3, #16
    8946:	681b      	ldr	r3, [r3, #0]
    8948:	461a      	mov	r2, r3
    894a:	2101      	movs	r1, #1
    894c:	6838      	ldr	r0, [r7, #0]
    894e:	4b3e      	ldr	r3, [pc, #248]	; (8a48 <_pwm_init+0x204>)
    8950:	4798      	blx	r3
    8952:	e031      	b.n	89b8 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8954:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8958:	4937      	ldr	r1, [pc, #220]	; (8a38 <_pwm_init+0x1f4>)
    895a:	4613      	mov	r3, r2
    895c:	009b      	lsls	r3, r3, #2
    895e:	4413      	add	r3, r2
    8960:	009b      	lsls	r3, r3, #2
    8962:	440b      	add	r3, r1
    8964:	3304      	adds	r3, #4
    8966:	681b      	ldr	r3, [r3, #0]
    8968:	f003 030c 	and.w	r3, r3, #12
    896c:	2b00      	cmp	r3, #0
    896e:	d120      	bne.n	89b2 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8970:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8974:	4930      	ldr	r1, [pc, #192]	; (8a38 <_pwm_init+0x1f4>)
    8976:	4613      	mov	r3, r2
    8978:	009b      	lsls	r3, r3, #2
    897a:	4413      	add	r3, r2
    897c:	009b      	lsls	r3, r3, #2
    897e:	440b      	add	r3, r1
    8980:	330c      	adds	r3, #12
    8982:	681b      	ldr	r3, [r3, #0]
    8984:	b29b      	uxth	r3, r3
    8986:	461a      	mov	r2, r3
    8988:	2100      	movs	r1, #0
    898a:	6838      	ldr	r0, [r7, #0]
    898c:	4b2f      	ldr	r3, [pc, #188]	; (8a4c <_pwm_init+0x208>)
    898e:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8990:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8994:	4928      	ldr	r1, [pc, #160]	; (8a38 <_pwm_init+0x1f4>)
    8996:	4613      	mov	r3, r2
    8998:	009b      	lsls	r3, r3, #2
    899a:	4413      	add	r3, r2
    899c:	009b      	lsls	r3, r3, #2
    899e:	440b      	add	r3, r1
    89a0:	3310      	adds	r3, #16
    89a2:	681b      	ldr	r3, [r3, #0]
    89a4:	b29b      	uxth	r3, r3
    89a6:	461a      	mov	r2, r3
    89a8:	2101      	movs	r1, #1
    89aa:	6838      	ldr	r0, [r7, #0]
    89ac:	4b27      	ldr	r3, [pc, #156]	; (8a4c <_pwm_init+0x208>)
    89ae:	4798      	blx	r3
    89b0:	e002      	b.n	89b8 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    89b2:	f04f 33ff 	mov.w	r3, #4294967295
    89b6:	e02e      	b.n	8a16 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    89b8:	6879      	ldr	r1, [r7, #4]
    89ba:	6838      	ldr	r0, [r7, #0]
    89bc:	4b24      	ldr	r3, [pc, #144]	; (8a50 <_pwm_init+0x20c>)
    89be:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    89c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89c4:	491c      	ldr	r1, [pc, #112]	; (8a38 <_pwm_init+0x1f4>)
    89c6:	4613      	mov	r3, r2
    89c8:	009b      	lsls	r3, r3, #2
    89ca:	4413      	add	r3, r2
    89cc:	009b      	lsls	r3, r3, #2
    89ce:	440b      	add	r3, r1
    89d0:	3302      	adds	r3, #2
    89d2:	f9b3 3000 	ldrsh.w	r3, [r3]
    89d6:	4618      	mov	r0, r3
    89d8:	4b1e      	ldr	r3, [pc, #120]	; (8a54 <_pwm_init+0x210>)
    89da:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    89dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89e0:	4915      	ldr	r1, [pc, #84]	; (8a38 <_pwm_init+0x1f4>)
    89e2:	4613      	mov	r3, r2
    89e4:	009b      	lsls	r3, r3, #2
    89e6:	4413      	add	r3, r2
    89e8:	009b      	lsls	r3, r3, #2
    89ea:	440b      	add	r3, r1
    89ec:	3302      	adds	r3, #2
    89ee:	f9b3 3000 	ldrsh.w	r3, [r3]
    89f2:	4618      	mov	r0, r3
    89f4:	4b18      	ldr	r3, [pc, #96]	; (8a58 <_pwm_init+0x214>)
    89f6:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    89f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89fc:	490e      	ldr	r1, [pc, #56]	; (8a38 <_pwm_init+0x1f4>)
    89fe:	4613      	mov	r3, r2
    8a00:	009b      	lsls	r3, r3, #2
    8a02:	4413      	add	r3, r2
    8a04:	009b      	lsls	r3, r3, #2
    8a06:	440b      	add	r3, r1
    8a08:	3302      	adds	r3, #2
    8a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a0e:	4618      	mov	r0, r3
    8a10:	4b12      	ldr	r3, [pc, #72]	; (8a5c <_pwm_init+0x218>)
    8a12:	4798      	blx	r3

	return 0;
    8a14:	2300      	movs	r3, #0
}
    8a16:	4618      	mov	r0, r3
    8a18:	3710      	adds	r7, #16
    8a1a:	46bd      	mov	sp, r7
    8a1c:	bd80      	pop	{r7, pc}
    8a1e:	bf00      	nop
    8a20:	00008de5 	.word	0x00008de5
    8a24:	00008209 	.word	0x00008209
    8a28:	000083a9 	.word	0x000083a9
    8a2c:	00008359 	.word	0x00008359
    8a30:	000081e5 	.word	0x000081e5
    8a34:	000083d9 	.word	0x000083d9
    8a38:	20000110 	.word	0x20000110
    8a3c:	00008439 	.word	0x00008439
    8a40:	000083fd 	.word	0x000083fd
    8a44:	0000841b 	.word	0x0000841b
    8a48:	00008539 	.word	0x00008539
    8a4c:	000084d5 	.word	0x000084d5
    8a50:	00008e4d 	.word	0x00008e4d
    8a54:	00008165 	.word	0x00008165
    8a58:	000081a9 	.word	0x000081a9
    8a5c:	00008129 	.word	0x00008129

00008a60 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8a60:	b580      	push	{r7, lr}
    8a62:	b084      	sub	sp, #16
    8a64:	af00      	add	r7, sp, #0
    8a66:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8a68:	687b      	ldr	r3, [r7, #4]
    8a6a:	68db      	ldr	r3, [r3, #12]
    8a6c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8a6e:	68f8      	ldr	r0, [r7, #12]
    8a70:	4b10      	ldr	r3, [pc, #64]	; (8ab4 <_tc_timer_deinit+0x54>)
    8a72:	4798      	blx	r3
    8a74:	4603      	mov	r3, r0
    8a76:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8a78:	22f9      	movs	r2, #249	; 0xf9
    8a7a:	490f      	ldr	r1, [pc, #60]	; (8ab8 <_tc_timer_deinit+0x58>)
    8a7c:	2001      	movs	r0, #1
    8a7e:	4b0f      	ldr	r3, [pc, #60]	; (8abc <_tc_timer_deinit+0x5c>)
    8a80:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    8a82:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8a86:	490e      	ldr	r1, [pc, #56]	; (8ac0 <_tc_timer_deinit+0x60>)
    8a88:	4613      	mov	r3, r2
    8a8a:	009b      	lsls	r3, r3, #2
    8a8c:	4413      	add	r3, r2
    8a8e:	009b      	lsls	r3, r3, #2
    8a90:	440b      	add	r3, r1
    8a92:	3302      	adds	r3, #2
    8a94:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a98:	4618      	mov	r0, r3
    8a9a:	4b0a      	ldr	r3, [pc, #40]	; (8ac4 <_tc_timer_deinit+0x64>)
    8a9c:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8a9e:	68f8      	ldr	r0, [r7, #12]
    8aa0:	4b09      	ldr	r3, [pc, #36]	; (8ac8 <_tc_timer_deinit+0x68>)
    8aa2:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8aa4:	68f8      	ldr	r0, [r7, #12]
    8aa6:	4b09      	ldr	r3, [pc, #36]	; (8acc <_tc_timer_deinit+0x6c>)
    8aa8:	4798      	blx	r3
}
    8aaa:	bf00      	nop
    8aac:	3710      	adds	r7, #16
    8aae:	46bd      	mov	sp, r7
    8ab0:	bd80      	pop	{r7, pc}
    8ab2:	bf00      	nop
    8ab4:	00008de5 	.word	0x00008de5
    8ab8:	00014140 	.word	0x00014140
    8abc:	000040dd 	.word	0x000040dd
    8ac0:	20000110 	.word	0x20000110
    8ac4:	00008165 	.word	0x00008165
    8ac8:	00008359 	.word	0x00008359
    8acc:	000082d1 	.word	0x000082d1

00008ad0 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8ad0:	b580      	push	{r7, lr}
    8ad2:	b082      	sub	sp, #8
    8ad4:	af00      	add	r7, sp, #0
    8ad6:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8ad8:	687b      	ldr	r3, [r7, #4]
    8ada:	68db      	ldr	r3, [r3, #12]
    8adc:	4618      	mov	r0, r3
    8ade:	4b03      	ldr	r3, [pc, #12]	; (8aec <_tc_timer_start+0x1c>)
    8ae0:	4798      	blx	r3
}
    8ae2:	bf00      	nop
    8ae4:	3708      	adds	r7, #8
    8ae6:	46bd      	mov	sp, r7
    8ae8:	bd80      	pop	{r7, pc}
    8aea:	bf00      	nop
    8aec:	000082f9 	.word	0x000082f9

00008af0 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8af0:	b580      	push	{r7, lr}
    8af2:	b082      	sub	sp, #8
    8af4:	af00      	add	r7, sp, #0
    8af6:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8af8:	687b      	ldr	r3, [r7, #4]
    8afa:	68db      	ldr	r3, [r3, #12]
    8afc:	4618      	mov	r0, r3
    8afe:	4b03      	ldr	r3, [pc, #12]	; (8b0c <_tc_timer_stop+0x1c>)
    8b00:	4798      	blx	r3
}
    8b02:	bf00      	nop
    8b04:	3708      	adds	r7, #8
    8b06:	46bd      	mov	sp, r7
    8b08:	bd80      	pop	{r7, pc}
    8b0a:	bf00      	nop
    8b0c:	00008359 	.word	0x00008359

00008b10 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8b10:	b580      	push	{r7, lr}
    8b12:	b084      	sub	sp, #16
    8b14:	af00      	add	r7, sp, #0
    8b16:	6078      	str	r0, [r7, #4]
    8b18:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8b1a:	687b      	ldr	r3, [r7, #4]
    8b1c:	68db      	ldr	r3, [r3, #12]
    8b1e:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b20:	68f8      	ldr	r0, [r7, #12]
    8b22:	4b14      	ldr	r3, [pc, #80]	; (8b74 <_tc_timer_set_period+0x64>)
    8b24:	4798      	blx	r3
    8b26:	4603      	mov	r3, r0
    8b28:	2b02      	cmp	r3, #2
    8b2a:	d105      	bne.n	8b38 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8b2c:	683a      	ldr	r2, [r7, #0]
    8b2e:	2100      	movs	r1, #0
    8b30:	68f8      	ldr	r0, [r7, #12]
    8b32:	4b11      	ldr	r3, [pc, #68]	; (8b78 <_tc_timer_set_period+0x68>)
    8b34:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8b36:	e019      	b.n	8b6c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b38:	68f8      	ldr	r0, [r7, #12]
    8b3a:	4b0e      	ldr	r3, [pc, #56]	; (8b74 <_tc_timer_set_period+0x64>)
    8b3c:	4798      	blx	r3
    8b3e:	4603      	mov	r3, r0
    8b40:	2b00      	cmp	r3, #0
    8b42:	d107      	bne.n	8b54 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8b44:	683b      	ldr	r3, [r7, #0]
    8b46:	b29b      	uxth	r3, r3
    8b48:	461a      	mov	r2, r3
    8b4a:	2100      	movs	r1, #0
    8b4c:	68f8      	ldr	r0, [r7, #12]
    8b4e:	4b0b      	ldr	r3, [pc, #44]	; (8b7c <_tc_timer_set_period+0x6c>)
    8b50:	4798      	blx	r3
}
    8b52:	e00b      	b.n	8b6c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b54:	68f8      	ldr	r0, [r7, #12]
    8b56:	4b07      	ldr	r3, [pc, #28]	; (8b74 <_tc_timer_set_period+0x64>)
    8b58:	4798      	blx	r3
    8b5a:	4603      	mov	r3, r0
    8b5c:	2b01      	cmp	r3, #1
    8b5e:	d105      	bne.n	8b6c <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8b60:	683b      	ldr	r3, [r7, #0]
    8b62:	b2db      	uxtb	r3, r3
    8b64:	4619      	mov	r1, r3
    8b66:	68f8      	ldr	r0, [r7, #12]
    8b68:	4b05      	ldr	r3, [pc, #20]	; (8b80 <_tc_timer_set_period+0x70>)
    8b6a:	4798      	blx	r3
}
    8b6c:	bf00      	nop
    8b6e:	3710      	adds	r7, #16
    8b70:	46bd      	mov	sp, r7
    8b72:	bd80      	pop	{r7, pc}
    8b74:	00008381 	.word	0x00008381
    8b78:	00008539 	.word	0x00008539
    8b7c:	000084d5 	.word	0x000084d5
    8b80:	00008459 	.word	0x00008459

00008b84 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8b84:	b580      	push	{r7, lr}
    8b86:	b084      	sub	sp, #16
    8b88:	af00      	add	r7, sp, #0
    8b8a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8b8c:	687b      	ldr	r3, [r7, #4]
    8b8e:	68db      	ldr	r3, [r3, #12]
    8b90:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b92:	68f8      	ldr	r0, [r7, #12]
    8b94:	4b13      	ldr	r3, [pc, #76]	; (8be4 <_tc_timer_get_period+0x60>)
    8b96:	4798      	blx	r3
    8b98:	4603      	mov	r3, r0
    8b9a:	2b02      	cmp	r3, #2
    8b9c:	d105      	bne.n	8baa <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8b9e:	2100      	movs	r1, #0
    8ba0:	68f8      	ldr	r0, [r7, #12]
    8ba2:	4b11      	ldr	r3, [pc, #68]	; (8be8 <_tc_timer_get_period+0x64>)
    8ba4:	4798      	blx	r3
    8ba6:	4603      	mov	r3, r0
    8ba8:	e017      	b.n	8bda <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8baa:	68f8      	ldr	r0, [r7, #12]
    8bac:	4b0d      	ldr	r3, [pc, #52]	; (8be4 <_tc_timer_get_period+0x60>)
    8bae:	4798      	blx	r3
    8bb0:	4603      	mov	r3, r0
    8bb2:	2b00      	cmp	r3, #0
    8bb4:	d105      	bne.n	8bc2 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8bb6:	2100      	movs	r1, #0
    8bb8:	68f8      	ldr	r0, [r7, #12]
    8bba:	4b0c      	ldr	r3, [pc, #48]	; (8bec <_tc_timer_get_period+0x68>)
    8bbc:	4798      	blx	r3
    8bbe:	4603      	mov	r3, r0
    8bc0:	e00b      	b.n	8bda <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8bc2:	68f8      	ldr	r0, [r7, #12]
    8bc4:	4b07      	ldr	r3, [pc, #28]	; (8be4 <_tc_timer_get_period+0x60>)
    8bc6:	4798      	blx	r3
    8bc8:	4603      	mov	r3, r0
    8bca:	2b01      	cmp	r3, #1
    8bcc:	d104      	bne.n	8bd8 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8bce:	68f8      	ldr	r0, [r7, #12]
    8bd0:	4b07      	ldr	r3, [pc, #28]	; (8bf0 <_tc_timer_get_period+0x6c>)
    8bd2:	4798      	blx	r3
    8bd4:	4603      	mov	r3, r0
    8bd6:	e000      	b.n	8bda <_tc_timer_get_period+0x56>
	}

	return 0;
    8bd8:	2300      	movs	r3, #0
}
    8bda:	4618      	mov	r0, r3
    8bdc:	3710      	adds	r7, #16
    8bde:	46bd      	mov	sp, r7
    8be0:	bd80      	pop	{r7, pc}
    8be2:	bf00      	nop
    8be4:	00008381 	.word	0x00008381
    8be8:	00008569 	.word	0x00008569
    8bec:	00008509 	.word	0x00008509
    8bf0:	00008481 	.word	0x00008481

00008bf4 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8bf4:	b580      	push	{r7, lr}
    8bf6:	b082      	sub	sp, #8
    8bf8:	af00      	add	r7, sp, #0
    8bfa:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8bfc:	687b      	ldr	r3, [r7, #4]
    8bfe:	68db      	ldr	r3, [r3, #12]
    8c00:	4618      	mov	r0, r3
    8c02:	4b03      	ldr	r3, [pc, #12]	; (8c10 <_tc_timer_is_started+0x1c>)
    8c04:	4798      	blx	r3
    8c06:	4603      	mov	r3, r0
}
    8c08:	4618      	mov	r0, r3
    8c0a:	3708      	adds	r7, #8
    8c0c:	46bd      	mov	sp, r7
    8c0e:	bd80      	pop	{r7, pc}
    8c10:	00008321 	.word	0x00008321

00008c14 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8c14:	b480      	push	{r7}
    8c16:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8c18:	4b02      	ldr	r3, [pc, #8]	; (8c24 <_tc_get_timer+0x10>)
}
    8c1a:	4618      	mov	r0, r3
    8c1c:	46bd      	mov	sp, r7
    8c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c22:	4770      	bx	lr
    8c24:	20000188 	.word	0x20000188

00008c28 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8c28:	b480      	push	{r7}
    8c2a:	af00      	add	r7, sp, #0
	return NULL;
    8c2c:	2300      	movs	r3, #0
}
    8c2e:	4618      	mov	r0, r3
    8c30:	46bd      	mov	sp, r7
    8c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c36:	4770      	bx	lr

00008c38 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8c38:	b580      	push	{r7, lr}
    8c3a:	b084      	sub	sp, #16
    8c3c:	af00      	add	r7, sp, #0
    8c3e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	68db      	ldr	r3, [r3, #12]
    8c44:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8c46:	68f8      	ldr	r0, [r7, #12]
    8c48:	4b0e      	ldr	r3, [pc, #56]	; (8c84 <_tc_timer_set_irq+0x4c>)
    8c4a:	4798      	blx	r3
    8c4c:	4603      	mov	r3, r0
    8c4e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8c50:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8c54:	490c      	ldr	r1, [pc, #48]	; (8c88 <_tc_timer_set_irq+0x50>)
    8c56:	2001      	movs	r0, #1
    8c58:	4b0c      	ldr	r3, [pc, #48]	; (8c8c <_tc_timer_set_irq+0x54>)
    8c5a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8c5c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8c60:	490b      	ldr	r1, [pc, #44]	; (8c90 <_tc_timer_set_irq+0x58>)
    8c62:	4613      	mov	r3, r2
    8c64:	009b      	lsls	r3, r3, #2
    8c66:	4413      	add	r3, r2
    8c68:	009b      	lsls	r3, r3, #2
    8c6a:	440b      	add	r3, r1
    8c6c:	3302      	adds	r3, #2
    8c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8c72:	b2db      	uxtb	r3, r3
    8c74:	4618      	mov	r0, r3
    8c76:	4b07      	ldr	r3, [pc, #28]	; (8c94 <_tc_timer_set_irq+0x5c>)
    8c78:	4798      	blx	r3
}
    8c7a:	bf00      	nop
    8c7c:	3710      	adds	r7, #16
    8c7e:	46bd      	mov	sp, r7
    8c80:	bd80      	pop	{r7, pc}
    8c82:	bf00      	nop
    8c84:	00008de5 	.word	0x00008de5
    8c88:	00014140 	.word	0x00014140
    8c8c:	000040dd 	.word	0x000040dd
    8c90:	20000110 	.word	0x20000110
    8c94:	00004925 	.word	0x00004925

00008c98 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8c98:	b580      	push	{r7, lr}
    8c9a:	b084      	sub	sp, #16
    8c9c:	af00      	add	r7, sp, #0
    8c9e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8ca0:	687b      	ldr	r3, [r7, #4]
    8ca2:	68db      	ldr	r3, [r3, #12]
    8ca4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8ca6:	68f8      	ldr	r0, [r7, #12]
    8ca8:	4b07      	ldr	r3, [pc, #28]	; (8cc8 <tc_interrupt_handler+0x30>)
    8caa:	4798      	blx	r3
    8cac:	4603      	mov	r3, r0
    8cae:	2b00      	cmp	r3, #0
    8cb0:	d006      	beq.n	8cc0 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8cb2:	68f8      	ldr	r0, [r7, #12]
    8cb4:	4b05      	ldr	r3, [pc, #20]	; (8ccc <tc_interrupt_handler+0x34>)
    8cb6:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8cb8:	687b      	ldr	r3, [r7, #4]
    8cba:	681b      	ldr	r3, [r3, #0]
    8cbc:	6878      	ldr	r0, [r7, #4]
    8cbe:	4798      	blx	r3
	}
}
    8cc0:	bf00      	nop
    8cc2:	3710      	adds	r7, #16
    8cc4:	46bd      	mov	sp, r7
    8cc6:	bd80      	pop	{r7, pc}
    8cc8:	00008231 	.word	0x00008231
    8ccc:	00008259 	.word	0x00008259

00008cd0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8cd0:	b580      	push	{r7, lr}
    8cd2:	b084      	sub	sp, #16
    8cd4:	af00      	add	r7, sp, #0
    8cd6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8cd8:	687b      	ldr	r3, [r7, #4]
    8cda:	691b      	ldr	r3, [r3, #16]
    8cdc:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8cde:	68f8      	ldr	r0, [r7, #12]
    8ce0:	4b12      	ldr	r3, [pc, #72]	; (8d2c <tc_pwm_interrupt_handler+0x5c>)
    8ce2:	4798      	blx	r3
    8ce4:	4603      	mov	r3, r0
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	d00a      	beq.n	8d00 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8cea:	68f8      	ldr	r0, [r7, #12]
    8cec:	4b10      	ldr	r3, [pc, #64]	; (8d30 <tc_pwm_interrupt_handler+0x60>)
    8cee:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8cf0:	687b      	ldr	r3, [r7, #4]
    8cf2:	681b      	ldr	r3, [r3, #0]
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	d003      	beq.n	8d00 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8cf8:	687b      	ldr	r3, [r7, #4]
    8cfa:	681b      	ldr	r3, [r3, #0]
    8cfc:	6878      	ldr	r0, [r7, #4]
    8cfe:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8d00:	68f8      	ldr	r0, [r7, #12]
    8d02:	4b0c      	ldr	r3, [pc, #48]	; (8d34 <tc_pwm_interrupt_handler+0x64>)
    8d04:	4798      	blx	r3
    8d06:	4603      	mov	r3, r0
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d00a      	beq.n	8d22 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8d0c:	68f8      	ldr	r0, [r7, #12]
    8d0e:	4b0a      	ldr	r3, [pc, #40]	; (8d38 <tc_pwm_interrupt_handler+0x68>)
    8d10:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8d12:	687b      	ldr	r3, [r7, #4]
    8d14:	685b      	ldr	r3, [r3, #4]
    8d16:	2b00      	cmp	r3, #0
    8d18:	d003      	beq.n	8d22 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8d1a:	687b      	ldr	r3, [r7, #4]
    8d1c:	685b      	ldr	r3, [r3, #4]
    8d1e:	6878      	ldr	r0, [r7, #4]
    8d20:	4798      	blx	r3
		}
	}
}
    8d22:	bf00      	nop
    8d24:	3710      	adds	r7, #16
    8d26:	46bd      	mov	sp, r7
    8d28:	bd80      	pop	{r7, pc}
    8d2a:	bf00      	nop
    8d2c:	00008231 	.word	0x00008231
    8d30:	00008259 	.word	0x00008259
    8d34:	000082a7 	.word	0x000082a7
    8d38:	00008273 	.word	0x00008273

00008d3c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8d3c:	b580      	push	{r7, lr}
    8d3e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8d40:	4b03      	ldr	r3, [pc, #12]	; (8d50 <TC0_Handler+0x14>)
    8d42:	681b      	ldr	r3, [r3, #0]
    8d44:	4618      	mov	r0, r3
    8d46:	4b03      	ldr	r3, [pc, #12]	; (8d54 <TC0_Handler+0x18>)
    8d48:	4798      	blx	r3
}
    8d4a:	bf00      	nop
    8d4c:	bd80      	pop	{r7, pc}
    8d4e:	bf00      	nop
    8d50:	20000ce4 	.word	0x20000ce4
    8d54:	00008c99 	.word	0x00008c99

00008d58 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8d58:	b580      	push	{r7, lr}
    8d5a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8d5c:	4b03      	ldr	r3, [pc, #12]	; (8d6c <TC2_Handler+0x14>)
    8d5e:	681b      	ldr	r3, [r3, #0]
    8d60:	4618      	mov	r0, r3
    8d62:	4b03      	ldr	r3, [pc, #12]	; (8d70 <TC2_Handler+0x18>)
    8d64:	4798      	blx	r3
}
    8d66:	bf00      	nop
    8d68:	bd80      	pop	{r7, pc}
    8d6a:	bf00      	nop
    8d6c:	20000ce8 	.word	0x20000ce8
    8d70:	00008c99 	.word	0x00008c99

00008d74 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8d74:	b580      	push	{r7, lr}
    8d76:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8d78:	4b03      	ldr	r3, [pc, #12]	; (8d88 <TC4_Handler+0x14>)
    8d7a:	681b      	ldr	r3, [r3, #0]
    8d7c:	4618      	mov	r0, r3
    8d7e:	4b03      	ldr	r3, [pc, #12]	; (8d8c <TC4_Handler+0x18>)
    8d80:	4798      	blx	r3
}
    8d82:	bf00      	nop
    8d84:	bd80      	pop	{r7, pc}
    8d86:	bf00      	nop
    8d88:	20000cec 	.word	0x20000cec
    8d8c:	00008c99 	.word	0x00008c99

00008d90 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8d90:	b580      	push	{r7, lr}
    8d92:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8d94:	4b03      	ldr	r3, [pc, #12]	; (8da4 <TC5_Handler+0x14>)
    8d96:	681b      	ldr	r3, [r3, #0]
    8d98:	4618      	mov	r0, r3
    8d9a:	4b03      	ldr	r3, [pc, #12]	; (8da8 <TC5_Handler+0x18>)
    8d9c:	4798      	blx	r3
}
    8d9e:	bf00      	nop
    8da0:	bd80      	pop	{r7, pc}
    8da2:	bf00      	nop
    8da4:	20000cf0 	.word	0x20000cf0
    8da8:	00008c99 	.word	0x00008c99

00008dac <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8dac:	b580      	push	{r7, lr}
    8dae:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8db0:	4b03      	ldr	r3, [pc, #12]	; (8dc0 <TC6_Handler+0x14>)
    8db2:	681b      	ldr	r3, [r3, #0]
    8db4:	4618      	mov	r0, r3
    8db6:	4b03      	ldr	r3, [pc, #12]	; (8dc4 <TC6_Handler+0x18>)
    8db8:	4798      	blx	r3
}
    8dba:	bf00      	nop
    8dbc:	bd80      	pop	{r7, pc}
    8dbe:	bf00      	nop
    8dc0:	20000cf4 	.word	0x20000cf4
    8dc4:	00008c99 	.word	0x00008c99

00008dc8 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8dc8:	b580      	push	{r7, lr}
    8dca:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8dcc:	4b03      	ldr	r3, [pc, #12]	; (8ddc <TC7_Handler+0x14>)
    8dce:	681b      	ldr	r3, [r3, #0]
    8dd0:	4618      	mov	r0, r3
    8dd2:	4b03      	ldr	r3, [pc, #12]	; (8de0 <TC7_Handler+0x18>)
    8dd4:	4798      	blx	r3
}
    8dd6:	bf00      	nop
    8dd8:	bd80      	pop	{r7, pc}
    8dda:	bf00      	nop
    8ddc:	20000cf8 	.word	0x20000cf8
    8de0:	00008cd1 	.word	0x00008cd1

00008de4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8de4:	b580      	push	{r7, lr}
    8de6:	b084      	sub	sp, #16
    8de8:	af00      	add	r7, sp, #0
    8dea:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8dec:	6878      	ldr	r0, [r7, #4]
    8dee:	4b13      	ldr	r3, [pc, #76]	; (8e3c <get_tc_index+0x58>)
    8df0:	4798      	blx	r3
    8df2:	4603      	mov	r3, r0
    8df4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8df6:	2300      	movs	r3, #0
    8df8:	73fb      	strb	r3, [r7, #15]
    8dfa:	e010      	b.n	8e1e <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8dfc:	7bfa      	ldrb	r2, [r7, #15]
    8dfe:	4910      	ldr	r1, [pc, #64]	; (8e40 <get_tc_index+0x5c>)
    8e00:	4613      	mov	r3, r2
    8e02:	009b      	lsls	r3, r3, #2
    8e04:	4413      	add	r3, r2
    8e06:	009b      	lsls	r3, r3, #2
    8e08:	440b      	add	r3, r1
    8e0a:	781b      	ldrb	r3, [r3, #0]
    8e0c:	7bba      	ldrb	r2, [r7, #14]
    8e0e:	429a      	cmp	r2, r3
    8e10:	d102      	bne.n	8e18 <get_tc_index+0x34>
			return i;
    8e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8e16:	e00d      	b.n	8e34 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8e18:	7bfb      	ldrb	r3, [r7, #15]
    8e1a:	3301      	adds	r3, #1
    8e1c:	73fb      	strb	r3, [r7, #15]
    8e1e:	7bfb      	ldrb	r3, [r7, #15]
    8e20:	2b05      	cmp	r3, #5
    8e22:	d9eb      	bls.n	8dfc <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8e24:	f240 221d 	movw	r2, #541	; 0x21d
    8e28:	4906      	ldr	r1, [pc, #24]	; (8e44 <get_tc_index+0x60>)
    8e2a:	2000      	movs	r0, #0
    8e2c:	4b06      	ldr	r3, [pc, #24]	; (8e48 <get_tc_index+0x64>)
    8e2e:	4798      	blx	r3
	return -1;
    8e30:	f04f 33ff 	mov.w	r3, #4294967295
}
    8e34:	4618      	mov	r0, r3
    8e36:	3710      	adds	r7, #16
    8e38:	46bd      	mov	sp, r7
    8e3a:	bd80      	pop	{r7, pc}
    8e3c:	00008ee9 	.word	0x00008ee9
    8e40:	20000110 	.word	0x20000110
    8e44:	00014140 	.word	0x00014140
    8e48:	000040dd 	.word	0x000040dd

00008e4c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8e4c:	b480      	push	{r7}
    8e4e:	b083      	sub	sp, #12
    8e50:	af00      	add	r7, sp, #0
    8e52:	6078      	str	r0, [r7, #4]
    8e54:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8e56:	687b      	ldr	r3, [r7, #4]
    8e58:	4a17      	ldr	r2, [pc, #92]	; (8eb8 <_tc_init_irq_param+0x6c>)
    8e5a:	4293      	cmp	r3, r2
    8e5c:	d102      	bne.n	8e64 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8e5e:	4a17      	ldr	r2, [pc, #92]	; (8ebc <_tc_init_irq_param+0x70>)
    8e60:	683b      	ldr	r3, [r7, #0]
    8e62:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8e64:	687b      	ldr	r3, [r7, #4]
    8e66:	4a16      	ldr	r2, [pc, #88]	; (8ec0 <_tc_init_irq_param+0x74>)
    8e68:	4293      	cmp	r3, r2
    8e6a:	d102      	bne.n	8e72 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8e6c:	4a15      	ldr	r2, [pc, #84]	; (8ec4 <_tc_init_irq_param+0x78>)
    8e6e:	683b      	ldr	r3, [r7, #0]
    8e70:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8e72:	687b      	ldr	r3, [r7, #4]
    8e74:	4a14      	ldr	r2, [pc, #80]	; (8ec8 <_tc_init_irq_param+0x7c>)
    8e76:	4293      	cmp	r3, r2
    8e78:	d102      	bne.n	8e80 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8e7a:	4a14      	ldr	r2, [pc, #80]	; (8ecc <_tc_init_irq_param+0x80>)
    8e7c:	683b      	ldr	r3, [r7, #0]
    8e7e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8e80:	687b      	ldr	r3, [r7, #4]
    8e82:	4a13      	ldr	r2, [pc, #76]	; (8ed0 <_tc_init_irq_param+0x84>)
    8e84:	4293      	cmp	r3, r2
    8e86:	d102      	bne.n	8e8e <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8e88:	4a12      	ldr	r2, [pc, #72]	; (8ed4 <_tc_init_irq_param+0x88>)
    8e8a:	683b      	ldr	r3, [r7, #0]
    8e8c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8e8e:	687b      	ldr	r3, [r7, #4]
    8e90:	4a11      	ldr	r2, [pc, #68]	; (8ed8 <_tc_init_irq_param+0x8c>)
    8e92:	4293      	cmp	r3, r2
    8e94:	d102      	bne.n	8e9c <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8e96:	4a11      	ldr	r2, [pc, #68]	; (8edc <_tc_init_irq_param+0x90>)
    8e98:	683b      	ldr	r3, [r7, #0]
    8e9a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8e9c:	687b      	ldr	r3, [r7, #4]
    8e9e:	4a10      	ldr	r2, [pc, #64]	; (8ee0 <_tc_init_irq_param+0x94>)
    8ea0:	4293      	cmp	r3, r2
    8ea2:	d102      	bne.n	8eaa <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8ea4:	4a0f      	ldr	r2, [pc, #60]	; (8ee4 <_tc_init_irq_param+0x98>)
    8ea6:	683b      	ldr	r3, [r7, #0]
    8ea8:	6013      	str	r3, [r2, #0]
	}
}
    8eaa:	bf00      	nop
    8eac:	370c      	adds	r7, #12
    8eae:	46bd      	mov	sp, r7
    8eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eb4:	4770      	bx	lr
    8eb6:	bf00      	nop
    8eb8:	40003800 	.word	0x40003800
    8ebc:	20000ce4 	.word	0x20000ce4
    8ec0:	4101a000 	.word	0x4101a000
    8ec4:	20000ce8 	.word	0x20000ce8
    8ec8:	42001400 	.word	0x42001400
    8ecc:	20000cec 	.word	0x20000cec
    8ed0:	42001800 	.word	0x42001800
    8ed4:	20000cf0 	.word	0x20000cf0
    8ed8:	43001400 	.word	0x43001400
    8edc:	20000cf4 	.word	0x20000cf4
    8ee0:	43001800 	.word	0x43001800
    8ee4:	20000cf8 	.word	0x20000cf8

00008ee8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8ee8:	b4b0      	push	{r4, r5, r7}
    8eea:	b08d      	sub	sp, #52	; 0x34
    8eec:	af00      	add	r7, sp, #0
    8eee:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8ef0:	4b13      	ldr	r3, [pc, #76]	; (8f40 <_get_hardware_offset+0x58>)
    8ef2:	f107 040c 	add.w	r4, r7, #12
    8ef6:	461d      	mov	r5, r3
    8ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8efc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8f04:	2300      	movs	r3, #0
    8f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    8f08:	e010      	b.n	8f2c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f0c:	009b      	lsls	r3, r3, #2
    8f0e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8f12:	4413      	add	r3, r2
    8f14:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8f18:	461a      	mov	r2, r3
    8f1a:	687b      	ldr	r3, [r7, #4]
    8f1c:	429a      	cmp	r2, r3
    8f1e:	d102      	bne.n	8f26 <_get_hardware_offset+0x3e>
			return i;
    8f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f22:	b2db      	uxtb	r3, r3
    8f24:	e006      	b.n	8f34 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f28:	3301      	adds	r3, #1
    8f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    8f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f2e:	2b07      	cmp	r3, #7
    8f30:	d9eb      	bls.n	8f0a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8f32:	2300      	movs	r3, #0
}
    8f34:	4618      	mov	r0, r3
    8f36:	3734      	adds	r7, #52	; 0x34
    8f38:	46bd      	mov	sp, r7
    8f3a:	bcb0      	pop	{r4, r5, r7}
    8f3c:	4770      	bx	lr
    8f3e:	bf00      	nop
    8f40:	00014154 	.word	0x00014154

00008f44 <__NVIC_EnableIRQ>:
{
    8f44:	b480      	push	{r7}
    8f46:	b083      	sub	sp, #12
    8f48:	af00      	add	r7, sp, #0
    8f4a:	4603      	mov	r3, r0
    8f4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8f52:	2b00      	cmp	r3, #0
    8f54:	db0b      	blt.n	8f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8f56:	4909      	ldr	r1, [pc, #36]	; (8f7c <__NVIC_EnableIRQ+0x38>)
    8f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8f5c:	095b      	lsrs	r3, r3, #5
    8f5e:	88fa      	ldrh	r2, [r7, #6]
    8f60:	f002 021f 	and.w	r2, r2, #31
    8f64:	2001      	movs	r0, #1
    8f66:	fa00 f202 	lsl.w	r2, r0, r2
    8f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f6e:	bf00      	nop
    8f70:	370c      	adds	r7, #12
    8f72:	46bd      	mov	sp, r7
    8f74:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f78:	4770      	bx	lr
    8f7a:	bf00      	nop
    8f7c:	e000e100 	.word	0xe000e100

00008f80 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8f80:	b480      	push	{r7}
    8f82:	b087      	sub	sp, #28
    8f84:	af00      	add	r7, sp, #0
    8f86:	60f8      	str	r0, [r7, #12]
    8f88:	460b      	mov	r3, r1
    8f8a:	607a      	str	r2, [r7, #4]
    8f8c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8f8e:	7afa      	ldrb	r2, [r7, #11]
    8f90:	68f9      	ldr	r1, [r7, #12]
    8f92:	4613      	mov	r3, r2
    8f94:	009b      	lsls	r3, r3, #2
    8f96:	4413      	add	r3, r2
    8f98:	009b      	lsls	r3, r3, #2
    8f9a:	440b      	add	r3, r1
    8f9c:	3340      	adds	r3, #64	; 0x40
    8f9e:	681b      	ldr	r3, [r3, #0]
    8fa0:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8fa2:	697a      	ldr	r2, [r7, #20]
    8fa4:	687b      	ldr	r3, [r7, #4]
    8fa6:	4013      	ands	r3, r2
    8fa8:	617b      	str	r3, [r7, #20]
	return tmp;
    8faa:	697b      	ldr	r3, [r7, #20]
}
    8fac:	4618      	mov	r0, r3
    8fae:	371c      	adds	r7, #28
    8fb0:	46bd      	mov	sp, r7
    8fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fb6:	4770      	bx	lr

00008fb8 <hri_oscctrl_get_STATUS_reg>:
{
    8fb8:	b480      	push	{r7}
    8fba:	b085      	sub	sp, #20
    8fbc:	af00      	add	r7, sp, #0
    8fbe:	6078      	str	r0, [r7, #4]
    8fc0:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8fc2:	687b      	ldr	r3, [r7, #4]
    8fc4:	691b      	ldr	r3, [r3, #16]
    8fc6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8fc8:	68fa      	ldr	r2, [r7, #12]
    8fca:	683b      	ldr	r3, [r7, #0]
    8fcc:	4013      	ands	r3, r2
    8fce:	60fb      	str	r3, [r7, #12]
	return tmp;
    8fd0:	68fb      	ldr	r3, [r7, #12]
}
    8fd2:	4618      	mov	r0, r3
    8fd4:	3714      	adds	r7, #20
    8fd6:	46bd      	mov	sp, r7
    8fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fdc:	4770      	bx	lr

00008fde <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8fde:	b480      	push	{r7}
    8fe0:	b085      	sub	sp, #20
    8fe2:	af00      	add	r7, sp, #0
    8fe4:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8fe6:	687b      	ldr	r3, [r7, #4]
    8fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
    8fec:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8fee:	7bfb      	ldrb	r3, [r7, #15]
    8ff0:	f003 0301 	and.w	r3, r3, #1
    8ff4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8ff6:	7bfb      	ldrb	r3, [r7, #15]
    8ff8:	2b00      	cmp	r3, #0
    8ffa:	bf14      	ite	ne
    8ffc:	2301      	movne	r3, #1
    8ffe:	2300      	moveq	r3, #0
    9000:	b2db      	uxtb	r3, r3
}
    9002:	4618      	mov	r0, r3
    9004:	3714      	adds	r7, #20
    9006:	46bd      	mov	sp, r7
    9008:	f85d 7b04 	ldr.w	r7, [sp], #4
    900c:	4770      	bx	lr

0000900e <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    900e:	b480      	push	{r7}
    9010:	b083      	sub	sp, #12
    9012:	af00      	add	r7, sp, #0
    9014:	6078      	str	r0, [r7, #4]
    9016:	460b      	mov	r3, r1
    9018:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    901a:	bf00      	nop
    901c:	687b      	ldr	r3, [r7, #4]
    901e:	789b      	ldrb	r3, [r3, #2]
    9020:	b2da      	uxtb	r2, r3
    9022:	78fb      	ldrb	r3, [r7, #3]
    9024:	4013      	ands	r3, r2
    9026:	b2db      	uxtb	r3, r3
    9028:	2b00      	cmp	r3, #0
    902a:	d1f7      	bne.n	901c <hri_usb_wait_for_sync+0xe>
	};
}
    902c:	bf00      	nop
    902e:	370c      	adds	r7, #12
    9030:	46bd      	mov	sp, r7
    9032:	f85d 7b04 	ldr.w	r7, [sp], #4
    9036:	4770      	bx	lr

00009038 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9038:	b480      	push	{r7}
    903a:	b083      	sub	sp, #12
    903c:	af00      	add	r7, sp, #0
    903e:	6078      	str	r0, [r7, #4]
    9040:	460b      	mov	r3, r1
    9042:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    9044:	687b      	ldr	r3, [r7, #4]
    9046:	789b      	ldrb	r3, [r3, #2]
    9048:	b2da      	uxtb	r2, r3
    904a:	78fb      	ldrb	r3, [r7, #3]
    904c:	4013      	ands	r3, r2
    904e:	b2db      	uxtb	r3, r3
    9050:	2b00      	cmp	r3, #0
    9052:	bf14      	ite	ne
    9054:	2301      	movne	r3, #1
    9056:	2300      	moveq	r3, #0
    9058:	b2db      	uxtb	r3, r3
}
    905a:	4618      	mov	r0, r3
    905c:	370c      	adds	r7, #12
    905e:	46bd      	mov	sp, r7
    9060:	f85d 7b04 	ldr.w	r7, [sp], #4
    9064:	4770      	bx	lr

00009066 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    9066:	b480      	push	{r7}
    9068:	b085      	sub	sp, #20
    906a:	af00      	add	r7, sp, #0
    906c:	6078      	str	r0, [r7, #4]
    906e:	460b      	mov	r3, r1
    9070:	70fb      	strb	r3, [r7, #3]
    9072:	4613      	mov	r3, r2
    9074:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9076:	78fb      	ldrb	r3, [r7, #3]
    9078:	687a      	ldr	r2, [r7, #4]
    907a:	3308      	adds	r3, #8
    907c:	015b      	lsls	r3, r3, #5
    907e:	4413      	add	r3, r2
    9080:	3307      	adds	r3, #7
    9082:	781b      	ldrb	r3, [r3, #0]
    9084:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9086:	7bfa      	ldrb	r2, [r7, #15]
    9088:	78bb      	ldrb	r3, [r7, #2]
    908a:	4013      	ands	r3, r2
    908c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    908e:	7bfb      	ldrb	r3, [r7, #15]
}
    9090:	4618      	mov	r0, r3
    9092:	3714      	adds	r7, #20
    9094:	46bd      	mov	sp, r7
    9096:	f85d 7b04 	ldr.w	r7, [sp], #4
    909a:	4770      	bx	lr

0000909c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    909c:	b480      	push	{r7}
    909e:	b083      	sub	sp, #12
    90a0:	af00      	add	r7, sp, #0
    90a2:	6078      	str	r0, [r7, #4]
    90a4:	460b      	mov	r3, r1
    90a6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    90a8:	78fb      	ldrb	r3, [r7, #3]
    90aa:	687a      	ldr	r2, [r7, #4]
    90ac:	3308      	adds	r3, #8
    90ae:	015b      	lsls	r3, r3, #5
    90b0:	4413      	add	r3, r2
    90b2:	3307      	adds	r3, #7
    90b4:	781b      	ldrb	r3, [r3, #0]
    90b6:	b2db      	uxtb	r3, r3
}
    90b8:	4618      	mov	r0, r3
    90ba:	370c      	adds	r7, #12
    90bc:	46bd      	mov	sp, r7
    90be:	f85d 7b04 	ldr.w	r7, [sp], #4
    90c2:	4770      	bx	lr

000090c4 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    90c4:	b480      	push	{r7}
    90c6:	b083      	sub	sp, #12
    90c8:	af00      	add	r7, sp, #0
    90ca:	6078      	str	r0, [r7, #4]
    90cc:	460b      	mov	r3, r1
    90ce:	70fb      	strb	r3, [r7, #3]
    90d0:	4613      	mov	r3, r2
    90d2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    90d4:	78fb      	ldrb	r3, [r7, #3]
    90d6:	687a      	ldr	r2, [r7, #4]
    90d8:	3308      	adds	r3, #8
    90da:	015b      	lsls	r3, r3, #5
    90dc:	4413      	add	r3, r2
    90de:	3307      	adds	r3, #7
    90e0:	78ba      	ldrb	r2, [r7, #2]
    90e2:	701a      	strb	r2, [r3, #0]
}
    90e4:	bf00      	nop
    90e6:	370c      	adds	r7, #12
    90e8:	46bd      	mov	sp, r7
    90ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    90ee:	4770      	bx	lr

000090f0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    90f0:	b480      	push	{r7}
    90f2:	b083      	sub	sp, #12
    90f4:	af00      	add	r7, sp, #0
    90f6:	6078      	str	r0, [r7, #4]
    90f8:	460b      	mov	r3, r1
    90fa:	70fb      	strb	r3, [r7, #3]
    90fc:	4613      	mov	r3, r2
    90fe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9100:	78fb      	ldrb	r3, [r7, #3]
    9102:	687a      	ldr	r2, [r7, #4]
    9104:	3308      	adds	r3, #8
    9106:	015b      	lsls	r3, r3, #5
    9108:	4413      	add	r3, r2
    910a:	3305      	adds	r3, #5
    910c:	78ba      	ldrb	r2, [r7, #2]
    910e:	701a      	strb	r2, [r3, #0]
}
    9110:	bf00      	nop
    9112:	370c      	adds	r7, #12
    9114:	46bd      	mov	sp, r7
    9116:	f85d 7b04 	ldr.w	r7, [sp], #4
    911a:	4770      	bx	lr

0000911c <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    911c:	b480      	push	{r7}
    911e:	b083      	sub	sp, #12
    9120:	af00      	add	r7, sp, #0
    9122:	6078      	str	r0, [r7, #4]
    9124:	460b      	mov	r3, r1
    9126:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9128:	78fb      	ldrb	r3, [r7, #3]
    912a:	687a      	ldr	r2, [r7, #4]
    912c:	3308      	adds	r3, #8
    912e:	015b      	lsls	r3, r3, #5
    9130:	4413      	add	r3, r2
    9132:	3306      	adds	r3, #6
    9134:	781b      	ldrb	r3, [r3, #0]
    9136:	b2db      	uxtb	r3, r3
}
    9138:	4618      	mov	r0, r3
    913a:	370c      	adds	r7, #12
    913c:	46bd      	mov	sp, r7
    913e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9142:	4770      	bx	lr

00009144 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    9144:	b480      	push	{r7}
    9146:	b083      	sub	sp, #12
    9148:	af00      	add	r7, sp, #0
    914a:	6078      	str	r0, [r7, #4]
    914c:	460b      	mov	r3, r1
    914e:	70fb      	strb	r3, [r7, #3]
    9150:	4613      	mov	r3, r2
    9152:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9154:	78fb      	ldrb	r3, [r7, #3]
    9156:	687a      	ldr	r2, [r7, #4]
    9158:	3308      	adds	r3, #8
    915a:	015b      	lsls	r3, r3, #5
    915c:	4413      	add	r3, r2
    915e:	3304      	adds	r3, #4
    9160:	78ba      	ldrb	r2, [r7, #2]
    9162:	701a      	strb	r2, [r3, #0]
}
    9164:	bf00      	nop
    9166:	370c      	adds	r7, #12
    9168:	46bd      	mov	sp, r7
    916a:	f85d 7b04 	ldr.w	r7, [sp], #4
    916e:	4770      	bx	lr

00009170 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    9170:	b480      	push	{r7}
    9172:	b083      	sub	sp, #12
    9174:	af00      	add	r7, sp, #0
    9176:	6078      	str	r0, [r7, #4]
    9178:	460b      	mov	r3, r1
    917a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    917c:	78fb      	ldrb	r3, [r7, #3]
    917e:	687a      	ldr	r2, [r7, #4]
    9180:	015b      	lsls	r3, r3, #5
    9182:	4413      	add	r3, r2
    9184:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9188:	2210      	movs	r2, #16
    918a:	701a      	strb	r2, [r3, #0]
}
    918c:	bf00      	nop
    918e:	370c      	adds	r7, #12
    9190:	46bd      	mov	sp, r7
    9192:	f85d 7b04 	ldr.w	r7, [sp], #4
    9196:	4770      	bx	lr

00009198 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    9198:	b480      	push	{r7}
    919a:	b083      	sub	sp, #12
    919c:	af00      	add	r7, sp, #0
    919e:	6078      	str	r0, [r7, #4]
    91a0:	460b      	mov	r3, r1
    91a2:	70fb      	strb	r3, [r7, #3]
    91a4:	4613      	mov	r3, r2
    91a6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    91a8:	78fb      	ldrb	r3, [r7, #3]
    91aa:	687a      	ldr	r2, [r7, #4]
    91ac:	015b      	lsls	r3, r3, #5
    91ae:	4413      	add	r3, r2
    91b0:	f203 1309 	addw	r3, r3, #265	; 0x109
    91b4:	78ba      	ldrb	r2, [r7, #2]
    91b6:	701a      	strb	r2, [r3, #0]
}
    91b8:	bf00      	nop
    91ba:	370c      	adds	r7, #12
    91bc:	46bd      	mov	sp, r7
    91be:	f85d 7b04 	ldr.w	r7, [sp], #4
    91c2:	4770      	bx	lr

000091c4 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    91c4:	b480      	push	{r7}
    91c6:	b083      	sub	sp, #12
    91c8:	af00      	add	r7, sp, #0
    91ca:	6078      	str	r0, [r7, #4]
    91cc:	460b      	mov	r3, r1
    91ce:	70fb      	strb	r3, [r7, #3]
    91d0:	4613      	mov	r3, r2
    91d2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    91d4:	78fb      	ldrb	r3, [r7, #3]
    91d6:	687a      	ldr	r2, [r7, #4]
    91d8:	015b      	lsls	r3, r3, #5
    91da:	4413      	add	r3, r2
    91dc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    91e0:	78ba      	ldrb	r2, [r7, #2]
    91e2:	701a      	strb	r2, [r3, #0]
}
    91e4:	bf00      	nop
    91e6:	370c      	adds	r7, #12
    91e8:	46bd      	mov	sp, r7
    91ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    91ee:	4770      	bx	lr

000091f0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    91f0:	b480      	push	{r7}
    91f2:	b085      	sub	sp, #20
    91f4:	af00      	add	r7, sp, #0
    91f6:	6078      	str	r0, [r7, #4]
    91f8:	460b      	mov	r3, r1
    91fa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    91fc:	78fb      	ldrb	r3, [r7, #3]
    91fe:	687a      	ldr	r2, [r7, #4]
    9200:	3308      	adds	r3, #8
    9202:	015b      	lsls	r3, r3, #5
    9204:	4413      	add	r3, r2
    9206:	781b      	ldrb	r3, [r3, #0]
    9208:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    920a:	7bfb      	ldrb	r3, [r7, #15]
    920c:	f003 0307 	and.w	r3, r3, #7
    9210:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9212:	7bfb      	ldrb	r3, [r7, #15]
}
    9214:	4618      	mov	r0, r3
    9216:	3714      	adds	r7, #20
    9218:	46bd      	mov	sp, r7
    921a:	f85d 7b04 	ldr.w	r7, [sp], #4
    921e:	4770      	bx	lr

00009220 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9220:	b480      	push	{r7}
    9222:	b085      	sub	sp, #20
    9224:	af00      	add	r7, sp, #0
    9226:	6078      	str	r0, [r7, #4]
    9228:	460b      	mov	r3, r1
    922a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    922c:	78fb      	ldrb	r3, [r7, #3]
    922e:	687a      	ldr	r2, [r7, #4]
    9230:	3308      	adds	r3, #8
    9232:	015b      	lsls	r3, r3, #5
    9234:	4413      	add	r3, r2
    9236:	781b      	ldrb	r3, [r3, #0]
    9238:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    923a:	7bfb      	ldrb	r3, [r7, #15]
    923c:	091b      	lsrs	r3, r3, #4
    923e:	b2db      	uxtb	r3, r3
    9240:	f003 0307 	and.w	r3, r3, #7
    9244:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9246:	7bfb      	ldrb	r3, [r7, #15]
}
    9248:	4618      	mov	r0, r3
    924a:	3714      	adds	r7, #20
    924c:	46bd      	mov	sp, r7
    924e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9252:	4770      	bx	lr

00009254 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    9254:	b480      	push	{r7}
    9256:	b083      	sub	sp, #12
    9258:	af00      	add	r7, sp, #0
    925a:	6078      	str	r0, [r7, #4]
    925c:	460b      	mov	r3, r1
    925e:	70fb      	strb	r3, [r7, #3]
    9260:	4613      	mov	r3, r2
    9262:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    9264:	78fb      	ldrb	r3, [r7, #3]
    9266:	687a      	ldr	r2, [r7, #4]
    9268:	3308      	adds	r3, #8
    926a:	015b      	lsls	r3, r3, #5
    926c:	4413      	add	r3, r2
    926e:	78ba      	ldrb	r2, [r7, #2]
    9270:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    9272:	bf00      	nop
    9274:	370c      	adds	r7, #12
    9276:	46bd      	mov	sp, r7
    9278:	f85d 7b04 	ldr.w	r7, [sp], #4
    927c:	4770      	bx	lr

0000927e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    927e:	b480      	push	{r7}
    9280:	b083      	sub	sp, #12
    9282:	af00      	add	r7, sp, #0
    9284:	6078      	str	r0, [r7, #4]
    9286:	460b      	mov	r3, r1
    9288:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    928a:	78fb      	ldrb	r3, [r7, #3]
    928c:	687a      	ldr	r2, [r7, #4]
    928e:	3308      	adds	r3, #8
    9290:	015b      	lsls	r3, r3, #5
    9292:	4413      	add	r3, r2
    9294:	781b      	ldrb	r3, [r3, #0]
    9296:	b2db      	uxtb	r3, r3
}
    9298:	4618      	mov	r0, r3
    929a:	370c      	adds	r7, #12
    929c:	46bd      	mov	sp, r7
    929e:	f85d 7b04 	ldr.w	r7, [sp], #4
    92a2:	4770      	bx	lr

000092a4 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    92a4:	b480      	push	{r7}
    92a6:	b083      	sub	sp, #12
    92a8:	af00      	add	r7, sp, #0
    92aa:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    92ac:	687b      	ldr	r3, [r7, #4]
    92ae:	8b9b      	ldrh	r3, [r3, #28]
    92b0:	b29b      	uxth	r3, r3
}
    92b2:	4618      	mov	r0, r3
    92b4:	370c      	adds	r7, #12
    92b6:	46bd      	mov	sp, r7
    92b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    92bc:	4770      	bx	lr

000092be <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    92be:	b480      	push	{r7}
    92c0:	b083      	sub	sp, #12
    92c2:	af00      	add	r7, sp, #0
    92c4:	6078      	str	r0, [r7, #4]
    92c6:	460b      	mov	r3, r1
    92c8:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    92ca:	687b      	ldr	r3, [r7, #4]
    92cc:	887a      	ldrh	r2, [r7, #2]
    92ce:	839a      	strh	r2, [r3, #28]
}
    92d0:	bf00      	nop
    92d2:	370c      	adds	r7, #12
    92d4:	46bd      	mov	sp, r7
    92d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    92da:	4770      	bx	lr

000092dc <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    92dc:	b480      	push	{r7}
    92de:	b083      	sub	sp, #12
    92e0:	af00      	add	r7, sp, #0
    92e2:	6078      	str	r0, [r7, #4]
    92e4:	460b      	mov	r3, r1
    92e6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    92e8:	687b      	ldr	r3, [r7, #4]
    92ea:	887a      	ldrh	r2, [r7, #2]
    92ec:	831a      	strh	r2, [r3, #24]
}
    92ee:	bf00      	nop
    92f0:	370c      	adds	r7, #12
    92f2:	46bd      	mov	sp, r7
    92f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    92f8:	4770      	bx	lr

000092fa <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    92fa:	b480      	push	{r7}
    92fc:	b083      	sub	sp, #12
    92fe:	af00      	add	r7, sp, #0
    9300:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    9302:	687b      	ldr	r3, [r7, #4]
    9304:	8b1b      	ldrh	r3, [r3, #24]
    9306:	b29b      	uxth	r3, r3
}
    9308:	4618      	mov	r0, r3
    930a:	370c      	adds	r7, #12
    930c:	46bd      	mov	sp, r7
    930e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9312:	4770      	bx	lr

00009314 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9314:	b480      	push	{r7}
    9316:	b083      	sub	sp, #12
    9318:	af00      	add	r7, sp, #0
    931a:	6078      	str	r0, [r7, #4]
    931c:	460b      	mov	r3, r1
    931e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9320:	687b      	ldr	r3, [r7, #4]
    9322:	887a      	ldrh	r2, [r7, #2]
    9324:	829a      	strh	r2, [r3, #20]
}
    9326:	bf00      	nop
    9328:	370c      	adds	r7, #12
    932a:	46bd      	mov	sp, r7
    932c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9330:	4770      	bx	lr

00009332 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    9332:	b480      	push	{r7}
    9334:	b085      	sub	sp, #20
    9336:	af00      	add	r7, sp, #0
    9338:	6078      	str	r0, [r7, #4]
    933a:	460b      	mov	r3, r1
    933c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    933e:	687b      	ldr	r3, [r7, #4]
    9340:	789b      	ldrb	r3, [r3, #2]
    9342:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9344:	7bfa      	ldrb	r2, [r7, #15]
    9346:	78fb      	ldrb	r3, [r7, #3]
    9348:	4013      	ands	r3, r2
    934a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    934c:	7bfb      	ldrb	r3, [r7, #15]
}
    934e:	4618      	mov	r0, r3
    9350:	3714      	adds	r7, #20
    9352:	46bd      	mov	sp, r7
    9354:	f85d 7b04 	ldr.w	r7, [sp], #4
    9358:	4770      	bx	lr
	...

0000935c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    935c:	b580      	push	{r7, lr}
    935e:	b082      	sub	sp, #8
    9360:	af00      	add	r7, sp, #0
    9362:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    9364:	687b      	ldr	r3, [r7, #4]
    9366:	781b      	ldrb	r3, [r3, #0]
    9368:	b2db      	uxtb	r3, r3
    936a:	f023 0302 	bic.w	r3, r3, #2
    936e:	b2da      	uxtb	r2, r3
    9370:	687b      	ldr	r3, [r7, #4]
    9372:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    9374:	2103      	movs	r1, #3
    9376:	6878      	ldr	r0, [r7, #4]
    9378:	4b02      	ldr	r3, [pc, #8]	; (9384 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    937a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    937c:	bf00      	nop
    937e:	3708      	adds	r7, #8
    9380:	46bd      	mov	sp, r7
    9382:	bd80      	pop	{r7, pc}
    9384:	0000900f 	.word	0x0000900f

00009388 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    9388:	b580      	push	{r7, lr}
    938a:	b084      	sub	sp, #16
    938c:	af00      	add	r7, sp, #0
    938e:	6078      	str	r0, [r7, #4]
    9390:	460b      	mov	r3, r1
    9392:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9394:	2103      	movs	r1, #3
    9396:	6878      	ldr	r0, [r7, #4]
    9398:	4b06      	ldr	r3, [pc, #24]	; (93b4 <hri_usb_get_CTRLA_reg+0x2c>)
    939a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    939c:	687b      	ldr	r3, [r7, #4]
    939e:	781b      	ldrb	r3, [r3, #0]
    93a0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    93a2:	7bfa      	ldrb	r2, [r7, #15]
    93a4:	78fb      	ldrb	r3, [r7, #3]
    93a6:	4013      	ands	r3, r2
    93a8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    93aa:	7bfb      	ldrb	r3, [r7, #15]
}
    93ac:	4618      	mov	r0, r3
    93ae:	3710      	adds	r7, #16
    93b0:	46bd      	mov	sp, r7
    93b2:	bd80      	pop	{r7, pc}
    93b4:	0000900f 	.word	0x0000900f

000093b8 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    93b8:	b580      	push	{r7, lr}
    93ba:	b082      	sub	sp, #8
    93bc:	af00      	add	r7, sp, #0
    93be:	6078      	str	r0, [r7, #4]
    93c0:	460b      	mov	r3, r1
    93c2:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    93c4:	687b      	ldr	r3, [r7, #4]
    93c6:	78fa      	ldrb	r2, [r7, #3]
    93c8:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    93ca:	2103      	movs	r1, #3
    93cc:	6878      	ldr	r0, [r7, #4]
    93ce:	4b03      	ldr	r3, [pc, #12]	; (93dc <hri_usb_write_CTRLA_reg+0x24>)
    93d0:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    93d2:	bf00      	nop
    93d4:	3708      	adds	r7, #8
    93d6:	46bd      	mov	sp, r7
    93d8:	bd80      	pop	{r7, pc}
    93da:	bf00      	nop
    93dc:	0000900f 	.word	0x0000900f

000093e0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    93e0:	b580      	push	{r7, lr}
    93e2:	b082      	sub	sp, #8
    93e4:	af00      	add	r7, sp, #0
    93e6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    93e8:	2103      	movs	r1, #3
    93ea:	6878      	ldr	r0, [r7, #4]
    93ec:	4b04      	ldr	r3, [pc, #16]	; (9400 <hri_usb_read_CTRLA_reg+0x20>)
    93ee:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    93f0:	687b      	ldr	r3, [r7, #4]
    93f2:	781b      	ldrb	r3, [r3, #0]
    93f4:	b2db      	uxtb	r3, r3
}
    93f6:	4618      	mov	r0, r3
    93f8:	3708      	adds	r7, #8
    93fa:	46bd      	mov	sp, r7
    93fc:	bd80      	pop	{r7, pc}
    93fe:	bf00      	nop
    9400:	0000900f 	.word	0x0000900f

00009404 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    9404:	b480      	push	{r7}
    9406:	b083      	sub	sp, #12
    9408:	af00      	add	r7, sp, #0
    940a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    940c:	687b      	ldr	r3, [r7, #4]
    940e:	891b      	ldrh	r3, [r3, #8]
    9410:	b29b      	uxth	r3, r3
    9412:	f023 0301 	bic.w	r3, r3, #1
    9416:	b29a      	uxth	r2, r3
    9418:	687b      	ldr	r3, [r7, #4]
    941a:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    941c:	bf00      	nop
    941e:	370c      	adds	r7, #12
    9420:	46bd      	mov	sp, r7
    9422:	f85d 7b04 	ldr.w	r7, [sp], #4
    9426:	4770      	bx	lr

00009428 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    9428:	b480      	push	{r7}
    942a:	b083      	sub	sp, #12
    942c:	af00      	add	r7, sp, #0
    942e:	6078      	str	r0, [r7, #4]
    9430:	460b      	mov	r3, r1
    9432:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    9434:	687b      	ldr	r3, [r7, #4]
    9436:	887a      	ldrh	r2, [r7, #2]
    9438:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    943a:	bf00      	nop
    943c:	370c      	adds	r7, #12
    943e:	46bd      	mov	sp, r7
    9440:	f85d 7b04 	ldr.w	r7, [sp], #4
    9444:	4770      	bx	lr

00009446 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    9446:	b480      	push	{r7}
    9448:	b083      	sub	sp, #12
    944a:	af00      	add	r7, sp, #0
    944c:	6078      	str	r0, [r7, #4]
    944e:	460b      	mov	r3, r1
    9450:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    9452:	687b      	ldr	r3, [r7, #4]
    9454:	78fa      	ldrb	r2, [r7, #3]
    9456:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    9458:	bf00      	nop
    945a:	370c      	adds	r7, #12
    945c:	46bd      	mov	sp, r7
    945e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9462:	4770      	bx	lr

00009464 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    9464:	b480      	push	{r7}
    9466:	b083      	sub	sp, #12
    9468:	af00      	add	r7, sp, #0
    946a:	6078      	str	r0, [r7, #4]
    946c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    946e:	687b      	ldr	r3, [r7, #4]
    9470:	683a      	ldr	r2, [r7, #0]
    9472:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    9474:	bf00      	nop
    9476:	370c      	adds	r7, #12
    9478:	46bd      	mov	sp, r7
    947a:	f85d 7b04 	ldr.w	r7, [sp], #4
    947e:	4770      	bx	lr

00009480 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    9480:	b480      	push	{r7}
    9482:	b083      	sub	sp, #12
    9484:	af00      	add	r7, sp, #0
    9486:	6078      	str	r0, [r7, #4]
    9488:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    948a:	2300      	movs	r3, #0
}
    948c:	4618      	mov	r0, r3
    948e:	370c      	adds	r7, #12
    9490:	46bd      	mov	sp, r7
    9492:	f85d 7b04 	ldr.w	r7, [sp], #4
    9496:	4770      	bx	lr

00009498 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9498:	b480      	push	{r7}
    949a:	b085      	sub	sp, #20
    949c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    949e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    94a2:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    94a4:	4b28      	ldr	r3, [pc, #160]	; (9548 <_usb_load_calib+0xb0>)
    94a6:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    94a8:	f003 031f 	and.w	r3, r3, #31
    94ac:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    94ae:	4b26      	ldr	r3, [pc, #152]	; (9548 <_usb_load_calib+0xb0>)
    94b0:	681b      	ldr	r3, [r3, #0]
    94b2:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    94b4:	f003 031f 	and.w	r3, r3, #31
    94b8:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    94ba:	4b23      	ldr	r3, [pc, #140]	; (9548 <_usb_load_calib+0xb0>)
    94bc:	681b      	ldr	r3, [r3, #0]
    94be:	0a9b      	lsrs	r3, r3, #10
    94c0:	f003 0307 	and.w	r3, r3, #7
    94c4:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    94c6:	68fb      	ldr	r3, [r7, #12]
    94c8:	2b00      	cmp	r3, #0
    94ca:	d002      	beq.n	94d2 <_usb_load_calib+0x3a>
    94cc:	68fb      	ldr	r3, [r7, #12]
    94ce:	2b1f      	cmp	r3, #31
    94d0:	d101      	bne.n	94d6 <_usb_load_calib+0x3e>
		pad_transn = 9;
    94d2:	2309      	movs	r3, #9
    94d4:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    94d6:	68bb      	ldr	r3, [r7, #8]
    94d8:	2b00      	cmp	r3, #0
    94da:	d002      	beq.n	94e2 <_usb_load_calib+0x4a>
    94dc:	68bb      	ldr	r3, [r7, #8]
    94de:	2b1f      	cmp	r3, #31
    94e0:	d101      	bne.n	94e6 <_usb_load_calib+0x4e>
		pad_transp = 25;
    94e2:	2319      	movs	r3, #25
    94e4:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    94e6:	687b      	ldr	r3, [r7, #4]
    94e8:	2b00      	cmp	r3, #0
    94ea:	d002      	beq.n	94f2 <_usb_load_calib+0x5a>
    94ec:	687b      	ldr	r3, [r7, #4]
    94ee:	2b07      	cmp	r3, #7
    94f0:	d101      	bne.n	94f6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    94f2:	2306      	movs	r3, #6
    94f4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    94f6:	68fb      	ldr	r3, [r7, #12]
    94f8:	b29b      	uxth	r3, r3
    94fa:	019b      	lsls	r3, r3, #6
    94fc:	b29b      	uxth	r3, r3
    94fe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    9502:	b29a      	uxth	r2, r3
    9504:	68bb      	ldr	r3, [r7, #8]
    9506:	b29b      	uxth	r3, r3
    9508:	f003 031f 	and.w	r3, r3, #31
    950c:	b29b      	uxth	r3, r3
    950e:	4313      	orrs	r3, r2
    9510:	b29a      	uxth	r2, r3
    9512:	687b      	ldr	r3, [r7, #4]
    9514:	b29b      	uxth	r3, r3
    9516:	031b      	lsls	r3, r3, #12
    9518:	b29b      	uxth	r3, r3
    951a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    951e:	b29b      	uxth	r3, r3
    9520:	4313      	orrs	r3, r2
    9522:	b29a      	uxth	r2, r3
    9524:	683b      	ldr	r3, [r7, #0]
    9526:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    9528:	683a      	ldr	r2, [r7, #0]
    952a:	78d3      	ldrb	r3, [r2, #3]
    952c:	f043 0303 	orr.w	r3, r3, #3
    9530:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    9532:	683a      	ldr	r2, [r7, #0]
    9534:	78d3      	ldrb	r3, [r2, #3]
    9536:	f043 030c 	orr.w	r3, r3, #12
    953a:	70d3      	strb	r3, [r2, #3]
}
    953c:	bf00      	nop
    953e:	3714      	adds	r7, #20
    9540:	46bd      	mov	sp, r7
    9542:	f85d 7b04 	ldr.w	r7, [sp], #4
    9546:	4770      	bx	lr
    9548:	00800084 	.word	0x00800084

0000954c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    954c:	b580      	push	{r7, lr}
    954e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    9550:	bf00      	nop
    9552:	2203      	movs	r2, #3
    9554:	2100      	movs	r1, #0
    9556:	4804      	ldr	r0, [pc, #16]	; (9568 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    9558:	4b04      	ldr	r3, [pc, #16]	; (956c <_usb_d_dev_wait_dpll_rdy+0x20>)
    955a:	4798      	blx	r3
    955c:	4603      	mov	r3, r0
    955e:	2b03      	cmp	r3, #3
    9560:	d1f7      	bne.n	9552 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    9562:	bf00      	nop
    9564:	bd80      	pop	{r7, pc}
    9566:	bf00      	nop
    9568:	40001000 	.word	0x40001000
    956c:	00008f81 	.word	0x00008f81

00009570 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    9570:	b580      	push	{r7, lr}
    9572:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    9574:	480e      	ldr	r0, [pc, #56]	; (95b0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9576:	4b0f      	ldr	r3, [pc, #60]	; (95b4 <_usb_d_dev_wait_dfll_rdy+0x44>)
    9578:	4798      	blx	r3
    957a:	4603      	mov	r3, r0
    957c:	2b00      	cmp	r3, #0
    957e:	d00a      	beq.n	9596 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    9580:	bf00      	nop
    9582:	f44f 6110 	mov.w	r1, #2304	; 0x900
    9586:	480a      	ldr	r0, [pc, #40]	; (95b0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9588:	4b0b      	ldr	r3, [pc, #44]	; (95b8 <_usb_d_dev_wait_dfll_rdy+0x48>)
    958a:	4798      	blx	r3
    958c:	4603      	mov	r3, r0
    958e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    9592:	d1f6      	bne.n	9582 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    9594:	e009      	b.n	95aa <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    9596:	bf00      	nop
    9598:	f44f 7180 	mov.w	r1, #256	; 0x100
    959c:	4804      	ldr	r0, [pc, #16]	; (95b0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    959e:	4b06      	ldr	r3, [pc, #24]	; (95b8 <_usb_d_dev_wait_dfll_rdy+0x48>)
    95a0:	4798      	blx	r3
    95a2:	4603      	mov	r3, r0
    95a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    95a8:	d1f6      	bne.n	9598 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    95aa:	bf00      	nop
    95ac:	bd80      	pop	{r7, pc}
    95ae:	bf00      	nop
    95b0:	40001000 	.word	0x40001000
    95b4:	00008fdf 	.word	0x00008fdf
    95b8:	00008fb9 	.word	0x00008fb9

000095bc <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    95bc:	b580      	push	{r7, lr}
    95be:	b082      	sub	sp, #8
    95c0:	af00      	add	r7, sp, #0
    95c2:	4603      	mov	r3, r0
    95c4:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    95c6:	79fb      	ldrb	r3, [r7, #7]
    95c8:	2b00      	cmp	r3, #0
    95ca:	d102      	bne.n	95d2 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    95cc:	4b05      	ldr	r3, [pc, #20]	; (95e4 <_usb_d_dev_wait_clk_rdy+0x28>)
    95ce:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    95d0:	e004      	b.n	95dc <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    95d2:	79fb      	ldrb	r3, [r7, #7]
    95d4:	2b01      	cmp	r3, #1
    95d6:	d101      	bne.n	95dc <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    95d8:	4b03      	ldr	r3, [pc, #12]	; (95e8 <_usb_d_dev_wait_clk_rdy+0x2c>)
    95da:	4798      	blx	r3
}
    95dc:	bf00      	nop
    95de:	3708      	adds	r7, #8
    95e0:	46bd      	mov	sp, r7
    95e2:	bd80      	pop	{r7, pc}
    95e4:	00009571 	.word	0x00009571
    95e8:	0000954d 	.word	0x0000954d

000095ec <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    95ec:	b580      	push	{r7, lr}
    95ee:	b082      	sub	sp, #8
    95f0:	af00      	add	r7, sp, #0
    95f2:	4603      	mov	r3, r0
    95f4:	6039      	str	r1, [r7, #0]
    95f6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    95f8:	683b      	ldr	r3, [r7, #0]
    95fa:	b2da      	uxtb	r2, r3
    95fc:	79fb      	ldrb	r3, [r7, #7]
    95fe:	4619      	mov	r1, r3
    9600:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9604:	4b02      	ldr	r3, [pc, #8]	; (9610 <_usbd_ep_int_ack+0x24>)
    9606:	4798      	blx	r3
}
    9608:	bf00      	nop
    960a:	3708      	adds	r7, #8
    960c:	46bd      	mov	sp, r7
    960e:	bd80      	pop	{r7, pc}
    9610:	000090c5 	.word	0x000090c5

00009614 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    9614:	b580      	push	{r7, lr}
    9616:	b082      	sub	sp, #8
    9618:	af00      	add	r7, sp, #0
    961a:	4603      	mov	r3, r0
    961c:	6039      	str	r1, [r7, #0]
    961e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9620:	683b      	ldr	r3, [r7, #0]
    9622:	b2da      	uxtb	r2, r3
    9624:	79fb      	ldrb	r3, [r7, #7]
    9626:	4619      	mov	r1, r3
    9628:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    962c:	4b02      	ldr	r3, [pc, #8]	; (9638 <_usbd_ep_int_en+0x24>)
    962e:	4798      	blx	r3
}
    9630:	bf00      	nop
    9632:	3708      	adds	r7, #8
    9634:	46bd      	mov	sp, r7
    9636:	bd80      	pop	{r7, pc}
    9638:	00009199 	.word	0x00009199

0000963c <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    963c:	b580      	push	{r7, lr}
    963e:	b082      	sub	sp, #8
    9640:	af00      	add	r7, sp, #0
    9642:	4603      	mov	r3, r0
    9644:	6039      	str	r1, [r7, #0]
    9646:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    9648:	683b      	ldr	r3, [r7, #0]
    964a:	b2da      	uxtb	r2, r3
    964c:	79fb      	ldrb	r3, [r7, #7]
    964e:	4619      	mov	r1, r3
    9650:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9654:	4b02      	ldr	r3, [pc, #8]	; (9660 <_usbd_ep_int_dis+0x24>)
    9656:	4798      	blx	r3
}
    9658:	bf00      	nop
    965a:	3708      	adds	r7, #8
    965c:	46bd      	mov	sp, r7
    965e:	bd80      	pop	{r7, pc}
    9660:	000091c5 	.word	0x000091c5

00009664 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    9664:	b580      	push	{r7, lr}
    9666:	b082      	sub	sp, #8
    9668:	af00      	add	r7, sp, #0
    966a:	4603      	mov	r3, r0
    966c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    966e:	79fb      	ldrb	r3, [r7, #7]
    9670:	4619      	mov	r1, r3
    9672:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9676:	4b06      	ldr	r3, [pc, #24]	; (9690 <_usbd_ep_is_ctrl+0x2c>)
    9678:	4798      	blx	r3
    967a:	4603      	mov	r3, r0
    967c:	2b11      	cmp	r3, #17
    967e:	bf0c      	ite	eq
    9680:	2301      	moveq	r3, #1
    9682:	2300      	movne	r3, #0
    9684:	b2db      	uxtb	r3, r3
}
    9686:	4618      	mov	r0, r3
    9688:	3708      	adds	r7, #8
    968a:	46bd      	mov	sp, r7
    968c:	bd80      	pop	{r7, pc}
    968e:	bf00      	nop
    9690:	0000927f 	.word	0x0000927f

00009694 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    9694:	b580      	push	{r7, lr}
    9696:	b082      	sub	sp, #8
    9698:	af00      	add	r7, sp, #0
    969a:	4603      	mov	r3, r0
    969c:	71fb      	strb	r3, [r7, #7]
    969e:	460b      	mov	r3, r1
    96a0:	71bb      	strb	r3, [r7, #6]
    96a2:	4613      	mov	r3, r2
    96a4:	717b      	strb	r3, [r7, #5]
	if (st) {
    96a6:	797b      	ldrb	r3, [r7, #5]
    96a8:	2b00      	cmp	r3, #0
    96aa:	d00b      	beq.n	96c4 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    96ac:	79bb      	ldrb	r3, [r7, #6]
    96ae:	2210      	movs	r2, #16
    96b0:	fa02 f303 	lsl.w	r3, r2, r3
    96b4:	b2da      	uxtb	r2, r3
    96b6:	79fb      	ldrb	r3, [r7, #7]
    96b8:	4619      	mov	r1, r3
    96ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96be:	4b09      	ldr	r3, [pc, #36]	; (96e4 <_usbd_ep_set_stall+0x50>)
    96c0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    96c2:	e00a      	b.n	96da <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    96c4:	79bb      	ldrb	r3, [r7, #6]
    96c6:	2210      	movs	r2, #16
    96c8:	fa02 f303 	lsl.w	r3, r2, r3
    96cc:	b2da      	uxtb	r2, r3
    96ce:	79fb      	ldrb	r3, [r7, #7]
    96d0:	4619      	mov	r1, r3
    96d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96d6:	4b04      	ldr	r3, [pc, #16]	; (96e8 <_usbd_ep_set_stall+0x54>)
    96d8:	4798      	blx	r3
}
    96da:	bf00      	nop
    96dc:	3708      	adds	r7, #8
    96de:	46bd      	mov	sp, r7
    96e0:	bd80      	pop	{r7, pc}
    96e2:	bf00      	nop
    96e4:	000090f1 	.word	0x000090f1
    96e8:	00009145 	.word	0x00009145

000096ec <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    96ec:	b580      	push	{r7, lr}
    96ee:	b084      	sub	sp, #16
    96f0:	af00      	add	r7, sp, #0
    96f2:	4603      	mov	r3, r0
    96f4:	460a      	mov	r2, r1
    96f6:	71fb      	strb	r3, [r7, #7]
    96f8:	4613      	mov	r3, r2
    96fa:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    96fc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9700:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9702:	79fb      	ldrb	r3, [r7, #7]
    9704:	4619      	mov	r1, r3
    9706:	68f8      	ldr	r0, [r7, #12]
    9708:	4b08      	ldr	r3, [pc, #32]	; (972c <_usbd_ep_is_stalled+0x40>)
    970a:	4798      	blx	r3
    970c:	4603      	mov	r3, r0
    970e:	4619      	mov	r1, r3
    9710:	79bb      	ldrb	r3, [r7, #6]
    9712:	2210      	movs	r2, #16
    9714:	fa02 f303 	lsl.w	r3, r2, r3
    9718:	400b      	ands	r3, r1
    971a:	2b00      	cmp	r3, #0
    971c:	bf14      	ite	ne
    971e:	2301      	movne	r3, #1
    9720:	2300      	moveq	r3, #0
    9722:	b2db      	uxtb	r3, r3
}
    9724:	4618      	mov	r0, r3
    9726:	3710      	adds	r7, #16
    9728:	46bd      	mov	sp, r7
    972a:	bd80      	pop	{r7, pc}
    972c:	0000911d 	.word	0x0000911d

00009730 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    9730:	b580      	push	{r7, lr}
    9732:	b084      	sub	sp, #16
    9734:	af00      	add	r7, sp, #0
    9736:	4603      	mov	r3, r0
    9738:	460a      	mov	r2, r1
    973a:	71fb      	strb	r3, [r7, #7]
    973c:	4613      	mov	r3, r2
    973e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9740:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9744:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9746:	79fb      	ldrb	r3, [r7, #7]
    9748:	4619      	mov	r1, r3
    974a:	68f8      	ldr	r0, [r7, #12]
    974c:	4b08      	ldr	r3, [pc, #32]	; (9770 <_usbd_ep_is_stall_sent+0x40>)
    974e:	4798      	blx	r3
    9750:	4603      	mov	r3, r0
    9752:	4619      	mov	r1, r3
    9754:	79bb      	ldrb	r3, [r7, #6]
    9756:	2220      	movs	r2, #32
    9758:	fa02 f303 	lsl.w	r3, r2, r3
    975c:	400b      	ands	r3, r1
    975e:	2b00      	cmp	r3, #0
    9760:	bf14      	ite	ne
    9762:	2301      	movne	r3, #1
    9764:	2300      	moveq	r3, #0
    9766:	b2db      	uxtb	r3, r3
}
    9768:	4618      	mov	r0, r3
    976a:	3710      	adds	r7, #16
    976c:	46bd      	mov	sp, r7
    976e:	bd80      	pop	{r7, pc}
    9770:	0000909d 	.word	0x0000909d

00009774 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    9774:	b580      	push	{r7, lr}
    9776:	b082      	sub	sp, #8
    9778:	af00      	add	r7, sp, #0
    977a:	4603      	mov	r3, r0
    977c:	460a      	mov	r2, r1
    977e:	71fb      	strb	r3, [r7, #7]
    9780:	4613      	mov	r3, r2
    9782:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9784:	79bb      	ldrb	r3, [r7, #6]
    9786:	2220      	movs	r2, #32
    9788:	409a      	lsls	r2, r3
    978a:	79fb      	ldrb	r3, [r7, #7]
    978c:	4611      	mov	r1, r2
    978e:	4618      	mov	r0, r3
    9790:	4b02      	ldr	r3, [pc, #8]	; (979c <_usbd_ep_ack_stall+0x28>)
    9792:	4798      	blx	r3
}
    9794:	bf00      	nop
    9796:	3708      	adds	r7, #8
    9798:	46bd      	mov	sp, r7
    979a:	bd80      	pop	{r7, pc}
    979c:	000095ed 	.word	0x000095ed

000097a0 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    97a0:	b580      	push	{r7, lr}
    97a2:	b082      	sub	sp, #8
    97a4:	af00      	add	r7, sp, #0
    97a6:	4603      	mov	r3, r0
    97a8:	71fb      	strb	r3, [r7, #7]
    97aa:	460b      	mov	r3, r1
    97ac:	71bb      	strb	r3, [r7, #6]
    97ae:	4613      	mov	r3, r2
    97b0:	717b      	strb	r3, [r7, #5]
	if (en) {
    97b2:	797b      	ldrb	r3, [r7, #5]
    97b4:	2b00      	cmp	r3, #0
    97b6:	d008      	beq.n	97ca <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    97b8:	79bb      	ldrb	r3, [r7, #6]
    97ba:	2220      	movs	r2, #32
    97bc:	409a      	lsls	r2, r3
    97be:	79fb      	ldrb	r3, [r7, #7]
    97c0:	4611      	mov	r1, r2
    97c2:	4618      	mov	r0, r3
    97c4:	4b07      	ldr	r3, [pc, #28]	; (97e4 <_usbd_ep_int_stall_en+0x44>)
    97c6:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    97c8:	e007      	b.n	97da <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    97ca:	79bb      	ldrb	r3, [r7, #6]
    97cc:	2220      	movs	r2, #32
    97ce:	409a      	lsls	r2, r3
    97d0:	79fb      	ldrb	r3, [r7, #7]
    97d2:	4611      	mov	r1, r2
    97d4:	4618      	mov	r0, r3
    97d6:	4b04      	ldr	r3, [pc, #16]	; (97e8 <_usbd_ep_int_stall_en+0x48>)
    97d8:	4798      	blx	r3
}
    97da:	bf00      	nop
    97dc:	3708      	adds	r7, #8
    97de:	46bd      	mov	sp, r7
    97e0:	bd80      	pop	{r7, pc}
    97e2:	bf00      	nop
    97e4:	00009615 	.word	0x00009615
    97e8:	0000963d 	.word	0x0000963d

000097ec <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    97ec:	b580      	push	{r7, lr}
    97ee:	b082      	sub	sp, #8
    97f0:	af00      	add	r7, sp, #0
    97f2:	4603      	mov	r3, r0
    97f4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    97f6:	79fb      	ldrb	r3, [r7, #7]
    97f8:	4619      	mov	r1, r3
    97fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97fe:	4b03      	ldr	r3, [pc, #12]	; (980c <_usbd_ep_stop_setup+0x20>)
    9800:	4798      	blx	r3
}
    9802:	bf00      	nop
    9804:	3708      	adds	r7, #8
    9806:	46bd      	mov	sp, r7
    9808:	bd80      	pop	{r7, pc}
    980a:	bf00      	nop
    980c:	00009171 	.word	0x00009171

00009810 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9810:	b580      	push	{r7, lr}
    9812:	b082      	sub	sp, #8
    9814:	af00      	add	r7, sp, #0
    9816:	4603      	mov	r3, r0
    9818:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    981a:	79fb      	ldrb	r3, [r7, #7]
    981c:	2210      	movs	r2, #16
    981e:	4619      	mov	r1, r3
    9820:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9824:	4b05      	ldr	r3, [pc, #20]	; (983c <_usbd_ep_is_setup+0x2c>)
    9826:	4798      	blx	r3
    9828:	4603      	mov	r3, r0
    982a:	2b00      	cmp	r3, #0
    982c:	bf14      	ite	ne
    982e:	2301      	movne	r3, #1
    9830:	2300      	moveq	r3, #0
    9832:	b2db      	uxtb	r3, r3
}
    9834:	4618      	mov	r0, r3
    9836:	3708      	adds	r7, #8
    9838:	46bd      	mov	sp, r7
    983a:	bd80      	pop	{r7, pc}
    983c:	00009067 	.word	0x00009067

00009840 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    9840:	b580      	push	{r7, lr}
    9842:	b082      	sub	sp, #8
    9844:	af00      	add	r7, sp, #0
    9846:	4603      	mov	r3, r0
    9848:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    984a:	79fb      	ldrb	r3, [r7, #7]
    984c:	2110      	movs	r1, #16
    984e:	4618      	mov	r0, r3
    9850:	4b02      	ldr	r3, [pc, #8]	; (985c <_usbd_ep_ack_setup+0x1c>)
    9852:	4798      	blx	r3
}
    9854:	bf00      	nop
    9856:	3708      	adds	r7, #8
    9858:	46bd      	mov	sp, r7
    985a:	bd80      	pop	{r7, pc}
    985c:	000095ed 	.word	0x000095ed

00009860 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9860:	b580      	push	{r7, lr}
    9862:	b082      	sub	sp, #8
    9864:	af00      	add	r7, sp, #0
    9866:	4603      	mov	r3, r0
    9868:	71fb      	strb	r3, [r7, #7]
    986a:	460b      	mov	r3, r1
    986c:	71bb      	strb	r3, [r7, #6]
    986e:	4613      	mov	r3, r2
    9870:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    9872:	797b      	ldrb	r3, [r7, #5]
    9874:	2b00      	cmp	r3, #0
    9876:	d00b      	beq.n	9890 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9878:	79bb      	ldrb	r3, [r7, #6]
    987a:	2201      	movs	r2, #1
    987c:	fa02 f303 	lsl.w	r3, r2, r3
    9880:	b2da      	uxtb	r2, r3
    9882:	79fb      	ldrb	r3, [r7, #7]
    9884:	4619      	mov	r1, r3
    9886:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    988a:	4b09      	ldr	r3, [pc, #36]	; (98b0 <_usbd_ep_set_toggle+0x50>)
    988c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    988e:	e00a      	b.n	98a6 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9890:	79bb      	ldrb	r3, [r7, #6]
    9892:	2201      	movs	r2, #1
    9894:	fa02 f303 	lsl.w	r3, r2, r3
    9898:	b2da      	uxtb	r2, r3
    989a:	79fb      	ldrb	r3, [r7, #7]
    989c:	4619      	mov	r1, r3
    989e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98a2:	4b04      	ldr	r3, [pc, #16]	; (98b4 <_usbd_ep_set_toggle+0x54>)
    98a4:	4798      	blx	r3
}
    98a6:	bf00      	nop
    98a8:	3708      	adds	r7, #8
    98aa:	46bd      	mov	sp, r7
    98ac:	bd80      	pop	{r7, pc}
    98ae:	bf00      	nop
    98b0:	000090f1 	.word	0x000090f1
    98b4:	00009145 	.word	0x00009145

000098b8 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    98b8:	b580      	push	{r7, lr}
    98ba:	b082      	sub	sp, #8
    98bc:	af00      	add	r7, sp, #0
    98be:	4603      	mov	r3, r0
    98c0:	460a      	mov	r2, r1
    98c2:	71fb      	strb	r3, [r7, #7]
    98c4:	4613      	mov	r3, r2
    98c6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    98c8:	79bb      	ldrb	r3, [r7, #6]
    98ca:	2201      	movs	r2, #1
    98cc:	409a      	lsls	r2, r3
    98ce:	79fb      	ldrb	r3, [r7, #7]
    98d0:	4611      	mov	r1, r2
    98d2:	4618      	mov	r0, r3
    98d4:	4b02      	ldr	r3, [pc, #8]	; (98e0 <_usbd_ep_ack_io_cpt+0x28>)
    98d6:	4798      	blx	r3
}
    98d8:	bf00      	nop
    98da:	3708      	adds	r7, #8
    98dc:	46bd      	mov	sp, r7
    98de:	bd80      	pop	{r7, pc}
    98e0:	000095ed 	.word	0x000095ed

000098e4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    98e4:	b480      	push	{r7}
    98e6:	b085      	sub	sp, #20
    98e8:	af00      	add	r7, sp, #0
    98ea:	4603      	mov	r3, r0
    98ec:	603a      	str	r2, [r7, #0]
    98ee:	71fb      	strb	r3, [r7, #7]
    98f0:	460b      	mov	r3, r1
    98f2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    98f4:	79fa      	ldrb	r2, [r7, #7]
    98f6:	79bb      	ldrb	r3, [r7, #6]
    98f8:	0052      	lsls	r2, r2, #1
    98fa:	4413      	add	r3, r2
    98fc:	011b      	lsls	r3, r3, #4
    98fe:	4a06      	ldr	r2, [pc, #24]	; (9918 <_usbd_ep_set_buf+0x34>)
    9900:	4413      	add	r3, r2
    9902:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    9904:	68fb      	ldr	r3, [r7, #12]
    9906:	683a      	ldr	r2, [r7, #0]
    9908:	601a      	str	r2, [r3, #0]
}
    990a:	bf00      	nop
    990c:	3714      	adds	r7, #20
    990e:	46bd      	mov	sp, r7
    9910:	f85d 7b04 	ldr.w	r7, [sp], #4
    9914:	4770      	bx	lr
    9916:	bf00      	nop
    9918:	20001004 	.word	0x20001004

0000991c <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    991c:	b480      	push	{r7}
    991e:	b085      	sub	sp, #20
    9920:	af00      	add	r7, sp, #0
    9922:	4603      	mov	r3, r0
    9924:	71fb      	strb	r3, [r7, #7]
    9926:	460b      	mov	r3, r1
    9928:	71bb      	strb	r3, [r7, #6]
    992a:	4613      	mov	r3, r2
    992c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    992e:	79fa      	ldrb	r2, [r7, #7]
    9930:	79bb      	ldrb	r3, [r7, #6]
    9932:	0052      	lsls	r2, r2, #1
    9934:	4413      	add	r3, r2
    9936:	011b      	lsls	r3, r3, #4
    9938:	4a08      	ldr	r2, [pc, #32]	; (995c <_usbd_ep_set_in_count+0x40>)
    993a:	4413      	add	r3, r2
    993c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    993e:	88bb      	ldrh	r3, [r7, #4]
    9940:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9944:	b299      	uxth	r1, r3
    9946:	68fa      	ldr	r2, [r7, #12]
    9948:	6853      	ldr	r3, [r2, #4]
    994a:	f361 339b 	bfi	r3, r1, #14, #14
    994e:	6053      	str	r3, [r2, #4]
}
    9950:	bf00      	nop
    9952:	3714      	adds	r7, #20
    9954:	46bd      	mov	sp, r7
    9956:	f85d 7b04 	ldr.w	r7, [sp], #4
    995a:	4770      	bx	lr
    995c:	20001004 	.word	0x20001004

00009960 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9960:	b480      	push	{r7}
    9962:	b085      	sub	sp, #20
    9964:	af00      	add	r7, sp, #0
    9966:	4603      	mov	r3, r0
    9968:	71fb      	strb	r3, [r7, #7]
    996a:	460b      	mov	r3, r1
    996c:	71bb      	strb	r3, [r7, #6]
    996e:	4613      	mov	r3, r2
    9970:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9972:	79fa      	ldrb	r2, [r7, #7]
    9974:	79bb      	ldrb	r3, [r7, #6]
    9976:	0052      	lsls	r2, r2, #1
    9978:	4413      	add	r3, r2
    997a:	011b      	lsls	r3, r3, #4
    997c:	4a08      	ldr	r2, [pc, #32]	; (99a0 <_usbd_ep_set_in_size+0x40>)
    997e:	4413      	add	r3, r2
    9980:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9982:	88bb      	ldrh	r3, [r7, #4]
    9984:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9988:	b299      	uxth	r1, r3
    998a:	68fa      	ldr	r2, [r7, #12]
    998c:	6853      	ldr	r3, [r2, #4]
    998e:	f361 030d 	bfi	r3, r1, #0, #14
    9992:	6053      	str	r3, [r2, #4]
}
    9994:	bf00      	nop
    9996:	3714      	adds	r7, #20
    9998:	46bd      	mov	sp, r7
    999a:	f85d 7b04 	ldr.w	r7, [sp], #4
    999e:	4770      	bx	lr
    99a0:	20001004 	.word	0x20001004

000099a4 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    99a4:	b480      	push	{r7}
    99a6:	b085      	sub	sp, #20
    99a8:	af00      	add	r7, sp, #0
    99aa:	4603      	mov	r3, r0
    99ac:	71fb      	strb	r3, [r7, #7]
    99ae:	460b      	mov	r3, r1
    99b0:	71bb      	strb	r3, [r7, #6]
    99b2:	4613      	mov	r3, r2
    99b4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    99b6:	79fa      	ldrb	r2, [r7, #7]
    99b8:	79bb      	ldrb	r3, [r7, #6]
    99ba:	0052      	lsls	r2, r2, #1
    99bc:	4413      	add	r3, r2
    99be:	011b      	lsls	r3, r3, #4
    99c0:	4a08      	ldr	r2, [pc, #32]	; (99e4 <_usbd_ep_set_out_count+0x40>)
    99c2:	4413      	add	r3, r2
    99c4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    99c6:	88bb      	ldrh	r3, [r7, #4]
    99c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    99cc:	b299      	uxth	r1, r3
    99ce:	68fa      	ldr	r2, [r7, #12]
    99d0:	6853      	ldr	r3, [r2, #4]
    99d2:	f361 030d 	bfi	r3, r1, #0, #14
    99d6:	6053      	str	r3, [r2, #4]
}
    99d8:	bf00      	nop
    99da:	3714      	adds	r7, #20
    99dc:	46bd      	mov	sp, r7
    99de:	f85d 7b04 	ldr.w	r7, [sp], #4
    99e2:	4770      	bx	lr
    99e4:	20001004 	.word	0x20001004

000099e8 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    99e8:	b480      	push	{r7}
    99ea:	b085      	sub	sp, #20
    99ec:	af00      	add	r7, sp, #0
    99ee:	4603      	mov	r3, r0
    99f0:	71fb      	strb	r3, [r7, #7]
    99f2:	460b      	mov	r3, r1
    99f4:	71bb      	strb	r3, [r7, #6]
    99f6:	4613      	mov	r3, r2
    99f8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    99fa:	79fa      	ldrb	r2, [r7, #7]
    99fc:	79bb      	ldrb	r3, [r7, #6]
    99fe:	0052      	lsls	r2, r2, #1
    9a00:	4413      	add	r3, r2
    9a02:	011b      	lsls	r3, r3, #4
    9a04:	4a08      	ldr	r2, [pc, #32]	; (9a28 <_usbd_ep_set_out_size+0x40>)
    9a06:	4413      	add	r3, r2
    9a08:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9a0a:	88bb      	ldrh	r3, [r7, #4]
    9a0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9a10:	b299      	uxth	r1, r3
    9a12:	68fa      	ldr	r2, [r7, #12]
    9a14:	6853      	ldr	r3, [r2, #4]
    9a16:	f361 339b 	bfi	r3, r1, #14, #14
    9a1a:	6053      	str	r3, [r2, #4]
}
    9a1c:	bf00      	nop
    9a1e:	3714      	adds	r7, #20
    9a20:	46bd      	mov	sp, r7
    9a22:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a26:	4770      	bx	lr
    9a28:	20001004 	.word	0x20001004

00009a2c <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9a2c:	b580      	push	{r7, lr}
    9a2e:	b084      	sub	sp, #16
    9a30:	af00      	add	r7, sp, #0
    9a32:	60ba      	str	r2, [r7, #8]
    9a34:	607b      	str	r3, [r7, #4]
    9a36:	4603      	mov	r3, r0
    9a38:	73fb      	strb	r3, [r7, #15]
    9a3a:	460b      	mov	r3, r1
    9a3c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    9a3e:	68bb      	ldr	r3, [r7, #8]
    9a40:	b29a      	uxth	r2, r3
    9a42:	7bb9      	ldrb	r1, [r7, #14]
    9a44:	7bfb      	ldrb	r3, [r7, #15]
    9a46:	4618      	mov	r0, r3
    9a48:	4b06      	ldr	r3, [pc, #24]	; (9a64 <_usbd_ep_set_in_trans+0x38>)
    9a4a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    9a4c:	687b      	ldr	r3, [r7, #4]
    9a4e:	b29a      	uxth	r2, r3
    9a50:	7bb9      	ldrb	r1, [r7, #14]
    9a52:	7bfb      	ldrb	r3, [r7, #15]
    9a54:	4618      	mov	r0, r3
    9a56:	4b04      	ldr	r3, [pc, #16]	; (9a68 <_usbd_ep_set_in_trans+0x3c>)
    9a58:	4798      	blx	r3
}
    9a5a:	bf00      	nop
    9a5c:	3710      	adds	r7, #16
    9a5e:	46bd      	mov	sp, r7
    9a60:	bd80      	pop	{r7, pc}
    9a62:	bf00      	nop
    9a64:	00009961 	.word	0x00009961
    9a68:	0000991d 	.word	0x0000991d

00009a6c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9a6c:	b580      	push	{r7, lr}
    9a6e:	b084      	sub	sp, #16
    9a70:	af00      	add	r7, sp, #0
    9a72:	60ba      	str	r2, [r7, #8]
    9a74:	607b      	str	r3, [r7, #4]
    9a76:	4603      	mov	r3, r0
    9a78:	73fb      	strb	r3, [r7, #15]
    9a7a:	460b      	mov	r3, r1
    9a7c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    9a7e:	68bb      	ldr	r3, [r7, #8]
    9a80:	b29a      	uxth	r2, r3
    9a82:	7bb9      	ldrb	r1, [r7, #14]
    9a84:	7bfb      	ldrb	r3, [r7, #15]
    9a86:	4618      	mov	r0, r3
    9a88:	4b06      	ldr	r3, [pc, #24]	; (9aa4 <_usbd_ep_set_out_trans+0x38>)
    9a8a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9a8c:	687b      	ldr	r3, [r7, #4]
    9a8e:	b29a      	uxth	r2, r3
    9a90:	7bb9      	ldrb	r1, [r7, #14]
    9a92:	7bfb      	ldrb	r3, [r7, #15]
    9a94:	4618      	mov	r0, r3
    9a96:	4b04      	ldr	r3, [pc, #16]	; (9aa8 <_usbd_ep_set_out_trans+0x3c>)
    9a98:	4798      	blx	r3
}
    9a9a:	bf00      	nop
    9a9c:	3710      	adds	r7, #16
    9a9e:	46bd      	mov	sp, r7
    9aa0:	bd80      	pop	{r7, pc}
    9aa2:	bf00      	nop
    9aa4:	000099e9 	.word	0x000099e9
    9aa8:	000099a5 	.word	0x000099a5

00009aac <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9aac:	b480      	push	{r7}
    9aae:	b085      	sub	sp, #20
    9ab0:	af00      	add	r7, sp, #0
    9ab2:	4603      	mov	r3, r0
    9ab4:	460a      	mov	r2, r1
    9ab6:	71fb      	strb	r3, [r7, #7]
    9ab8:	4613      	mov	r3, r2
    9aba:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9abc:	79fa      	ldrb	r2, [r7, #7]
    9abe:	79bb      	ldrb	r3, [r7, #6]
    9ac0:	0052      	lsls	r2, r2, #1
    9ac2:	4413      	add	r3, r2
    9ac4:	011b      	lsls	r3, r3, #4
    9ac6:	4a06      	ldr	r2, [pc, #24]	; (9ae0 <_usbd_ep_clear_bank_status+0x34>)
    9ac8:	4413      	add	r3, r2
    9aca:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9acc:	68fb      	ldr	r3, [r7, #12]
    9ace:	2200      	movs	r2, #0
    9ad0:	729a      	strb	r2, [r3, #10]
}
    9ad2:	bf00      	nop
    9ad4:	3714      	adds	r7, #20
    9ad6:	46bd      	mov	sp, r7
    9ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9adc:	4770      	bx	lr
    9ade:	bf00      	nop
    9ae0:	20001004 	.word	0x20001004

00009ae4 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9ae4:	b580      	push	{r7, lr}
    9ae6:	b082      	sub	sp, #8
    9ae8:	af00      	add	r7, sp, #0
    9aea:	4603      	mov	r3, r0
    9aec:	71fb      	strb	r3, [r7, #7]
    9aee:	460b      	mov	r3, r1
    9af0:	71bb      	strb	r3, [r7, #6]
    9af2:	4613      	mov	r3, r2
    9af4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9af6:	797b      	ldrb	r3, [r7, #5]
    9af8:	2b00      	cmp	r3, #0
    9afa:	d00b      	beq.n	9b14 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9afc:	79bb      	ldrb	r3, [r7, #6]
    9afe:	2240      	movs	r2, #64	; 0x40
    9b00:	fa02 f303 	lsl.w	r3, r2, r3
    9b04:	b2da      	uxtb	r2, r3
    9b06:	79fb      	ldrb	r3, [r7, #7]
    9b08:	4619      	mov	r1, r3
    9b0a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b0e:	4b09      	ldr	r3, [pc, #36]	; (9b34 <_usbd_ep_set_in_rdy+0x50>)
    9b10:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9b12:	e00a      	b.n	9b2a <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9b14:	79bb      	ldrb	r3, [r7, #6]
    9b16:	2240      	movs	r2, #64	; 0x40
    9b18:	fa02 f303 	lsl.w	r3, r2, r3
    9b1c:	b2da      	uxtb	r2, r3
    9b1e:	79fb      	ldrb	r3, [r7, #7]
    9b20:	4619      	mov	r1, r3
    9b22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b26:	4b04      	ldr	r3, [pc, #16]	; (9b38 <_usbd_ep_set_in_rdy+0x54>)
    9b28:	4798      	blx	r3
}
    9b2a:	bf00      	nop
    9b2c:	3708      	adds	r7, #8
    9b2e:	46bd      	mov	sp, r7
    9b30:	bd80      	pop	{r7, pc}
    9b32:	bf00      	nop
    9b34:	000090f1 	.word	0x000090f1
    9b38:	00009145 	.word	0x00009145

00009b3c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9b3c:	b580      	push	{r7, lr}
    9b3e:	b082      	sub	sp, #8
    9b40:	af00      	add	r7, sp, #0
    9b42:	4603      	mov	r3, r0
    9b44:	71fb      	strb	r3, [r7, #7]
    9b46:	460b      	mov	r3, r1
    9b48:	71bb      	strb	r3, [r7, #6]
    9b4a:	4613      	mov	r3, r2
    9b4c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9b4e:	797b      	ldrb	r3, [r7, #5]
    9b50:	2b00      	cmp	r3, #0
    9b52:	d00b      	beq.n	9b6c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9b54:	79bb      	ldrb	r3, [r7, #6]
    9b56:	2240      	movs	r2, #64	; 0x40
    9b58:	fa02 f303 	lsl.w	r3, r2, r3
    9b5c:	b2da      	uxtb	r2, r3
    9b5e:	79fb      	ldrb	r3, [r7, #7]
    9b60:	4619      	mov	r1, r3
    9b62:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b66:	4b09      	ldr	r3, [pc, #36]	; (9b8c <_usbd_ep_set_out_rdy+0x50>)
    9b68:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9b6a:	e00a      	b.n	9b82 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9b6c:	79bb      	ldrb	r3, [r7, #6]
    9b6e:	2240      	movs	r2, #64	; 0x40
    9b70:	fa02 f303 	lsl.w	r3, r2, r3
    9b74:	b2da      	uxtb	r2, r3
    9b76:	79fb      	ldrb	r3, [r7, #7]
    9b78:	4619      	mov	r1, r3
    9b7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b7e:	4b04      	ldr	r3, [pc, #16]	; (9b90 <_usbd_ep_set_out_rdy+0x54>)
    9b80:	4798      	blx	r3
}
    9b82:	bf00      	nop
    9b84:	3708      	adds	r7, #8
    9b86:	46bd      	mov	sp, r7
    9b88:	bd80      	pop	{r7, pc}
    9b8a:	bf00      	nop
    9b8c:	00009145 	.word	0x00009145
    9b90:	000090f1 	.word	0x000090f1

00009b94 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9b94:	b480      	push	{r7}
    9b96:	b083      	sub	sp, #12
    9b98:	af00      	add	r7, sp, #0
    9b9a:	4603      	mov	r3, r0
    9b9c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9b9e:	88fb      	ldrh	r3, [r7, #6]
    9ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9ba4:	d820      	bhi.n	9be8 <_usbd_ep_pcksize_size+0x54>
    9ba6:	88fb      	ldrh	r3, [r7, #6]
    9ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9bac:	d81a      	bhi.n	9be4 <_usbd_ep_pcksize_size+0x50>
    9bae:	88fb      	ldrh	r3, [r7, #6]
    9bb0:	2b80      	cmp	r3, #128	; 0x80
    9bb2:	d815      	bhi.n	9be0 <_usbd_ep_pcksize_size+0x4c>
    9bb4:	88fb      	ldrh	r3, [r7, #6]
    9bb6:	2b40      	cmp	r3, #64	; 0x40
    9bb8:	d810      	bhi.n	9bdc <_usbd_ep_pcksize_size+0x48>
    9bba:	88fb      	ldrh	r3, [r7, #6]
    9bbc:	2b20      	cmp	r3, #32
    9bbe:	d80b      	bhi.n	9bd8 <_usbd_ep_pcksize_size+0x44>
    9bc0:	88fb      	ldrh	r3, [r7, #6]
    9bc2:	2b10      	cmp	r3, #16
    9bc4:	d806      	bhi.n	9bd4 <_usbd_ep_pcksize_size+0x40>
    9bc6:	88fb      	ldrh	r3, [r7, #6]
    9bc8:	2b08      	cmp	r3, #8
    9bca:	bf8c      	ite	hi
    9bcc:	2301      	movhi	r3, #1
    9bce:	2300      	movls	r3, #0
    9bd0:	b2db      	uxtb	r3, r3
    9bd2:	e00a      	b.n	9bea <_usbd_ep_pcksize_size+0x56>
    9bd4:	2302      	movs	r3, #2
    9bd6:	e008      	b.n	9bea <_usbd_ep_pcksize_size+0x56>
    9bd8:	2303      	movs	r3, #3
    9bda:	e006      	b.n	9bea <_usbd_ep_pcksize_size+0x56>
    9bdc:	2304      	movs	r3, #4
    9bde:	e004      	b.n	9bea <_usbd_ep_pcksize_size+0x56>
    9be0:	2305      	movs	r3, #5
    9be2:	e002      	b.n	9bea <_usbd_ep_pcksize_size+0x56>
    9be4:	2306      	movs	r3, #6
    9be6:	e000      	b.n	9bea <_usbd_ep_pcksize_size+0x56>
    9be8:	2307      	movs	r3, #7
}
    9bea:	4618      	mov	r0, r3
    9bec:	370c      	adds	r7, #12
    9bee:	46bd      	mov	sp, r7
    9bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bf4:	4770      	bx	lr
	...

00009bf8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9bf8:	b480      	push	{r7}
    9bfa:	b085      	sub	sp, #20
    9bfc:	af00      	add	r7, sp, #0
    9bfe:	4603      	mov	r3, r0
    9c00:	460a      	mov	r2, r1
    9c02:	71fb      	strb	r3, [r7, #7]
    9c04:	4613      	mov	r3, r2
    9c06:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9c08:	79fb      	ldrb	r3, [r7, #7]
    9c0a:	2b00      	cmp	r3, #0
    9c0c:	d008      	beq.n	9c20 <_usb_d_dev_ept+0x28>
    9c0e:	79bb      	ldrb	r3, [r7, #6]
    9c10:	2b00      	cmp	r3, #0
    9c12:	d003      	beq.n	9c1c <_usb_d_dev_ept+0x24>
    9c14:	79fb      	ldrb	r3, [r7, #7]
    9c16:	3304      	adds	r3, #4
    9c18:	b2db      	uxtb	r3, r3
    9c1a:	e002      	b.n	9c22 <_usb_d_dev_ept+0x2a>
    9c1c:	79fb      	ldrb	r3, [r7, #7]
    9c1e:	e000      	b.n	9c22 <_usb_d_dev_ept+0x2a>
    9c20:	2300      	movs	r3, #0
    9c22:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9c24:	7bfa      	ldrb	r2, [r7, #15]
    9c26:	4613      	mov	r3, r2
    9c28:	009b      	lsls	r3, r3, #2
    9c2a:	4413      	add	r3, r2
    9c2c:	009b      	lsls	r3, r3, #2
    9c2e:	3310      	adds	r3, #16
    9c30:	4a04      	ldr	r2, [pc, #16]	; (9c44 <_usb_d_dev_ept+0x4c>)
    9c32:	4413      	add	r3, r2
    9c34:	3304      	adds	r3, #4
}
    9c36:	4618      	mov	r0, r3
    9c38:	3714      	adds	r7, #20
    9c3a:	46bd      	mov	sp, r7
    9c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c40:	4770      	bx	lr
    9c42:	bf00      	nop
    9c44:	20000f3c 	.word	0x20000f3c

00009c48 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9c48:	b580      	push	{r7, lr}
    9c4a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9c4c:	2104      	movs	r1, #4
    9c4e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c52:	4b03      	ldr	r3, [pc, #12]	; (9c60 <_usb_d_dev_sof+0x18>)
    9c54:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9c56:	4b03      	ldr	r3, [pc, #12]	; (9c64 <_usb_d_dev_sof+0x1c>)
    9c58:	681b      	ldr	r3, [r3, #0]
    9c5a:	4798      	blx	r3
}
    9c5c:	bf00      	nop
    9c5e:	bd80      	pop	{r7, pc}
    9c60:	000092bf 	.word	0x000092bf
    9c64:	20000f3c 	.word	0x20000f3c

00009c68 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9c68:	b580      	push	{r7, lr}
    9c6a:	b084      	sub	sp, #16
    9c6c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9c6e:	2300      	movs	r3, #0
    9c70:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9c72:	f240 2101 	movw	r1, #513	; 0x201
    9c76:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c7a:	4b1a      	ldr	r3, [pc, #104]	; (9ce4 <_usb_d_dev_lpmsusp+0x7c>)
    9c7c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9c7e:	f240 2101 	movw	r1, #513	; 0x201
    9c82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c86:	4b18      	ldr	r3, [pc, #96]	; (9ce8 <_usb_d_dev_lpmsusp+0x80>)
    9c88:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9c8a:	2170      	movs	r1, #112	; 0x70
    9c8c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c90:	4b16      	ldr	r3, [pc, #88]	; (9cec <_usb_d_dev_lpmsusp+0x84>)
    9c92:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9c94:	2300      	movs	r3, #0
    9c96:	73fb      	strb	r3, [r7, #15]
    9c98:	e018      	b.n	9ccc <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9c9a:	7bfb      	ldrb	r3, [r7, #15]
    9c9c:	015b      	lsls	r3, r3, #5
    9c9e:	4a14      	ldr	r2, [pc, #80]	; (9cf0 <_usb_d_dev_lpmsusp+0x88>)
    9ca0:	4413      	add	r3, r2
    9ca2:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9ca4:	687b      	ldr	r3, [r7, #4]
    9ca6:	891b      	ldrh	r3, [r3, #8]
    9ca8:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9cac:	b2db      	uxtb	r3, r3
    9cae:	2b03      	cmp	r3, #3
    9cb0:	d109      	bne.n	9cc6 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9cb2:	687b      	ldr	r3, [r7, #4]
    9cb4:	891b      	ldrh	r3, [r3, #8]
    9cb6:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9cba:	b29b      	uxth	r3, r3
    9cbc:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9cbe:	687b      	ldr	r3, [r7, #4]
    9cc0:	2200      	movs	r2, #0
    9cc2:	811a      	strh	r2, [r3, #8]
			break;
    9cc4:	e005      	b.n	9cd2 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9cc6:	7bfb      	ldrb	r3, [r7, #15]
    9cc8:	3301      	adds	r3, #1
    9cca:	73fb      	strb	r3, [r7, #15]
    9ccc:	7bfb      	ldrb	r3, [r7, #15]
    9cce:	2b03      	cmp	r3, #3
    9cd0:	d9e3      	bls.n	9c9a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9cd2:	4b08      	ldr	r3, [pc, #32]	; (9cf4 <_usb_d_dev_lpmsusp+0x8c>)
    9cd4:	685b      	ldr	r3, [r3, #4]
    9cd6:	68b9      	ldr	r1, [r7, #8]
    9cd8:	2003      	movs	r0, #3
    9cda:	4798      	blx	r3
}
    9cdc:	bf00      	nop
    9cde:	3710      	adds	r7, #16
    9ce0:	46bd      	mov	sp, r7
    9ce2:	bd80      	pop	{r7, pc}
    9ce4:	000092bf 	.word	0x000092bf
    9ce8:	00009315 	.word	0x00009315
    9cec:	000092dd 	.word	0x000092dd
    9cf0:	20001004 	.word	0x20001004
    9cf4:	20000f3c 	.word	0x20000f3c

00009cf8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9cf8:	b580      	push	{r7, lr}
    9cfa:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9cfc:	2180      	movs	r1, #128	; 0x80
    9cfe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d02:	4b04      	ldr	r3, [pc, #16]	; (9d14 <_usb_d_dev_ramerr+0x1c>)
    9d04:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9d06:	4b04      	ldr	r3, [pc, #16]	; (9d18 <_usb_d_dev_ramerr+0x20>)
    9d08:	685b      	ldr	r3, [r3, #4]
    9d0a:	2100      	movs	r1, #0
    9d0c:	2005      	movs	r0, #5
    9d0e:	4798      	blx	r3
}
    9d10:	bf00      	nop
    9d12:	bd80      	pop	{r7, pc}
    9d14:	000092bf 	.word	0x000092bf
    9d18:	20000f3c 	.word	0x20000f3c

00009d1c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9d1c:	b580      	push	{r7, lr}
    9d1e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9d20:	2170      	movs	r1, #112	; 0x70
    9d22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d26:	4b0b      	ldr	r3, [pc, #44]	; (9d54 <_usb_d_dev_wakeup+0x38>)
    9d28:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9d2a:	2170      	movs	r1, #112	; 0x70
    9d2c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d30:	4b09      	ldr	r3, [pc, #36]	; (9d58 <_usb_d_dev_wakeup+0x3c>)
    9d32:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9d34:	f240 2101 	movw	r1, #513	; 0x201
    9d38:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d3c:	4b07      	ldr	r3, [pc, #28]	; (9d5c <_usb_d_dev_wakeup+0x40>)
    9d3e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9d40:	2000      	movs	r0, #0
    9d42:	4b07      	ldr	r3, [pc, #28]	; (9d60 <_usb_d_dev_wakeup+0x44>)
    9d44:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9d46:	4b07      	ldr	r3, [pc, #28]	; (9d64 <_usb_d_dev_wakeup+0x48>)
    9d48:	685b      	ldr	r3, [r3, #4]
    9d4a:	2100      	movs	r1, #0
    9d4c:	2002      	movs	r0, #2
    9d4e:	4798      	blx	r3
}
    9d50:	bf00      	nop
    9d52:	bd80      	pop	{r7, pc}
    9d54:	000092bf 	.word	0x000092bf
    9d58:	00009315 	.word	0x00009315
    9d5c:	000092dd 	.word	0x000092dd
    9d60:	000095bd 	.word	0x000095bd
    9d64:	20000f3c 	.word	0x20000f3c

00009d68 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9d68:	b580      	push	{r7, lr}
    9d6a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9d6c:	2200      	movs	r2, #0
    9d6e:	2100      	movs	r1, #0
    9d70:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d74:	4b0d      	ldr	r3, [pc, #52]	; (9dac <_usb_d_dev_reset+0x44>)
    9d76:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9d78:	2108      	movs	r1, #8
    9d7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d7e:	4b0c      	ldr	r3, [pc, #48]	; (9db0 <_usb_d_dev_reset+0x48>)
    9d80:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9d82:	2170      	movs	r1, #112	; 0x70
    9d84:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d88:	4b0a      	ldr	r3, [pc, #40]	; (9db4 <_usb_d_dev_reset+0x4c>)
    9d8a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9d8c:	f240 2101 	movw	r1, #513	; 0x201
    9d90:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d94:	4b08      	ldr	r3, [pc, #32]	; (9db8 <_usb_d_dev_reset+0x50>)
    9d96:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9d98:	4b08      	ldr	r3, [pc, #32]	; (9dbc <_usb_d_dev_reset+0x54>)
    9d9a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9d9c:	4b08      	ldr	r3, [pc, #32]	; (9dc0 <_usb_d_dev_reset+0x58>)
    9d9e:	685b      	ldr	r3, [r3, #4]
    9da0:	2100      	movs	r1, #0
    9da2:	2001      	movs	r0, #1
    9da4:	4798      	blx	r3
}
    9da6:	bf00      	nop
    9da8:	bd80      	pop	{r7, pc}
    9daa:	bf00      	nop
    9dac:	00009255 	.word	0x00009255
    9db0:	000092bf 	.word	0x000092bf
    9db4:	00009315 	.word	0x00009315
    9db8:	000092dd 	.word	0x000092dd
    9dbc:	0000a925 	.word	0x0000a925
    9dc0:	20000f3c 	.word	0x20000f3c

00009dc4 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9dc4:	b580      	push	{r7, lr}
    9dc6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9dc8:	f240 2101 	movw	r1, #513	; 0x201
    9dcc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dd0:	4b09      	ldr	r3, [pc, #36]	; (9df8 <_usb_d_dev_suspend+0x34>)
    9dd2:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9dd4:	f240 2101 	movw	r1, #513	; 0x201
    9dd8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ddc:	4b07      	ldr	r3, [pc, #28]	; (9dfc <_usb_d_dev_suspend+0x38>)
    9dde:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9de0:	2170      	movs	r1, #112	; 0x70
    9de2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9de6:	4b06      	ldr	r3, [pc, #24]	; (9e00 <_usb_d_dev_suspend+0x3c>)
    9de8:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9dea:	4b06      	ldr	r3, [pc, #24]	; (9e04 <_usb_d_dev_suspend+0x40>)
    9dec:	685b      	ldr	r3, [r3, #4]
    9dee:	2100      	movs	r1, #0
    9df0:	2004      	movs	r0, #4
    9df2:	4798      	blx	r3
}
    9df4:	bf00      	nop
    9df6:	bd80      	pop	{r7, pc}
    9df8:	000092bf 	.word	0x000092bf
    9dfc:	00009315 	.word	0x00009315
    9e00:	000092dd 	.word	0x000092dd
    9e04:	20000f3c 	.word	0x20000f3c

00009e08 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9e08:	b580      	push	{r7, lr}
    9e0a:	b082      	sub	sp, #8
    9e0c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9e0e:	2301      	movs	r3, #1
    9e10:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9e12:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e16:	4b22      	ldr	r3, [pc, #136]	; (9ea0 <_usb_d_dev_handle_nep+0x98>)
    9e18:	4798      	blx	r3
    9e1a:	4603      	mov	r3, r0
    9e1c:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9e1e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e22:	4b20      	ldr	r3, [pc, #128]	; (9ea4 <_usb_d_dev_handle_nep+0x9c>)
    9e24:	4798      	blx	r3
    9e26:	4603      	mov	r3, r0
    9e28:	461a      	mov	r2, r3
    9e2a:	88bb      	ldrh	r3, [r7, #4]
    9e2c:	4013      	ands	r3, r2
    9e2e:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9e30:	88bb      	ldrh	r3, [r7, #4]
    9e32:	f003 0304 	and.w	r3, r3, #4
    9e36:	2b00      	cmp	r3, #0
    9e38:	d003      	beq.n	9e42 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9e3a:	4b1b      	ldr	r3, [pc, #108]	; (9ea8 <_usb_d_dev_handle_nep+0xa0>)
    9e3c:	4798      	blx	r3
		return true;
    9e3e:	2301      	movs	r3, #1
    9e40:	e02a      	b.n	9e98 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9e42:	88bb      	ldrh	r3, [r7, #4]
    9e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9e48:	2b00      	cmp	r3, #0
    9e4a:	d002      	beq.n	9e52 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9e4c:	4b17      	ldr	r3, [pc, #92]	; (9eac <_usb_d_dev_handle_nep+0xa4>)
    9e4e:	4798      	blx	r3
    9e50:	e021      	b.n	9e96 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9e52:	88bb      	ldrh	r3, [r7, #4]
    9e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9e58:	2b00      	cmp	r3, #0
    9e5a:	d002      	beq.n	9e62 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9e5c:	4b14      	ldr	r3, [pc, #80]	; (9eb0 <_usb_d_dev_handle_nep+0xa8>)
    9e5e:	4798      	blx	r3
    9e60:	e019      	b.n	9e96 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9e62:	88bb      	ldrh	r3, [r7, #4]
    9e64:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9e68:	2b00      	cmp	r3, #0
    9e6a:	d002      	beq.n	9e72 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9e6c:	4b11      	ldr	r3, [pc, #68]	; (9eb4 <_usb_d_dev_handle_nep+0xac>)
    9e6e:	4798      	blx	r3
    9e70:	e011      	b.n	9e96 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9e72:	88bb      	ldrh	r3, [r7, #4]
    9e74:	f003 0308 	and.w	r3, r3, #8
    9e78:	2b00      	cmp	r3, #0
    9e7a:	d002      	beq.n	9e82 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9e7c:	4b0e      	ldr	r3, [pc, #56]	; (9eb8 <_usb_d_dev_handle_nep+0xb0>)
    9e7e:	4798      	blx	r3
    9e80:	e009      	b.n	9e96 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9e82:	88bb      	ldrh	r3, [r7, #4]
    9e84:	f003 0301 	and.w	r3, r3, #1
    9e88:	2b00      	cmp	r3, #0
    9e8a:	d002      	beq.n	9e92 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9e8c:	4b0b      	ldr	r3, [pc, #44]	; (9ebc <_usb_d_dev_handle_nep+0xb4>)
    9e8e:	4798      	blx	r3
    9e90:	e001      	b.n	9e96 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9e92:	2300      	movs	r3, #0
    9e94:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9e96:	79fb      	ldrb	r3, [r7, #7]
}
    9e98:	4618      	mov	r0, r3
    9e9a:	3708      	adds	r7, #8
    9e9c:	46bd      	mov	sp, r7
    9e9e:	bd80      	pop	{r7, pc}
    9ea0:	000092a5 	.word	0x000092a5
    9ea4:	000092fb 	.word	0x000092fb
    9ea8:	00009c49 	.word	0x00009c49
    9eac:	00009c69 	.word	0x00009c69
    9eb0:	00009cf9 	.word	0x00009cf9
    9eb4:	00009d1d 	.word	0x00009d1d
    9eb8:	00009d69 	.word	0x00009d69
    9ebc:	00009dc5 	.word	0x00009dc5

00009ec0 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9ec0:	b590      	push	{r4, r7, lr}
    9ec2:	b089      	sub	sp, #36	; 0x24
    9ec4:	af00      	add	r7, sp, #0
    9ec6:	6078      	str	r0, [r7, #4]
    9ec8:	460b      	mov	r3, r1
    9eca:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9ecc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9ed0:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9ed2:	687b      	ldr	r3, [r7, #4]
    9ed4:	7c9b      	ldrb	r3, [r3, #18]
    9ed6:	f003 030f 	and.w	r3, r3, #15
    9eda:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9edc:	7dfb      	ldrb	r3, [r7, #23]
    9ede:	015b      	lsls	r3, r3, #5
    9ee0:	4a73      	ldr	r2, [pc, #460]	; (a0b0 <_usb_d_dev_in_next+0x1f0>)
    9ee2:	4413      	add	r3, r2
    9ee4:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9ee6:	78fb      	ldrb	r3, [r7, #3]
    9ee8:	2b00      	cmp	r3, #0
    9eea:	d006      	beq.n	9efa <_usb_d_dev_in_next+0x3a>
    9eec:	693b      	ldr	r3, [r7, #16]
    9eee:	3310      	adds	r3, #16
    9ef0:	685b      	ldr	r3, [r3, #4]
    9ef2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9ef6:	b29b      	uxth	r3, r3
    9ef8:	e000      	b.n	9efc <_usb_d_dev_in_next+0x3c>
    9efa:	2300      	movs	r3, #0
    9efc:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9efe:	687b      	ldr	r3, [r7, #4]
    9f00:	8a1b      	ldrh	r3, [r3, #16]
    9f02:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9f06:	4293      	cmp	r3, r2
    9f08:	d103      	bne.n	9f12 <_usb_d_dev_in_next+0x52>
    9f0a:	687b      	ldr	r3, [r7, #4]
    9f0c:	8a1b      	ldrh	r3, [r3, #16]
    9f0e:	b21b      	sxth	r3, r3
    9f10:	e004      	b.n	9f1c <_usb_d_dev_in_next+0x5c>
    9f12:	687b      	ldr	r3, [r7, #4]
    9f14:	8a1b      	ldrh	r3, [r3, #16]
    9f16:	3b01      	subs	r3, #1
    9f18:	b29b      	uxth	r3, r3
    9f1a:	b21b      	sxth	r3, r3
    9f1c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9f20:	4013      	ands	r3, r2
    9f22:	b21b      	sxth	r3, r3
    9f24:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9f26:	2300      	movs	r3, #0
    9f28:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9f2a:	687b      	ldr	r3, [r7, #4]
    9f2c:	7cdb      	ldrb	r3, [r3, #19]
    9f2e:	f003 0307 	and.w	r3, r3, #7
    9f32:	b2db      	uxtb	r3, r3
    9f34:	2b01      	cmp	r3, #1
    9f36:	bf0c      	ite	eq
    9f38:	2301      	moveq	r3, #1
    9f3a:	2300      	movne	r3, #0
    9f3c:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9f3e:	78fb      	ldrb	r3, [r7, #3]
    9f40:	2b00      	cmp	r3, #0
    9f42:	d004      	beq.n	9f4e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9f44:	7dfb      	ldrb	r3, [r7, #23]
    9f46:	2101      	movs	r1, #1
    9f48:	4618      	mov	r0, r3
    9f4a:	4b5a      	ldr	r3, [pc, #360]	; (a0b4 <_usb_d_dev_in_next+0x1f4>)
    9f4c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9f4e:	687b      	ldr	r3, [r7, #4]
    9f50:	689a      	ldr	r2, [r3, #8]
    9f52:	89fb      	ldrh	r3, [r7, #14]
    9f54:	441a      	add	r2, r3
    9f56:	687b      	ldr	r3, [r7, #4]
    9f58:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9f5a:	687b      	ldr	r3, [r7, #4]
    9f5c:	689a      	ldr	r2, [r3, #8]
    9f5e:	687b      	ldr	r3, [r7, #4]
    9f60:	685b      	ldr	r3, [r3, #4]
    9f62:	429a      	cmp	r2, r3
    9f64:	d243      	bcs.n	9fee <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9f66:	687b      	ldr	r3, [r7, #4]
    9f68:	685b      	ldr	r3, [r3, #4]
    9f6a:	b29a      	uxth	r2, r3
    9f6c:	687b      	ldr	r3, [r7, #4]
    9f6e:	689b      	ldr	r3, [r3, #8]
    9f70:	b29b      	uxth	r3, r3
    9f72:	1ad3      	subs	r3, r2, r3
    9f74:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9f76:	687b      	ldr	r3, [r7, #4]
    9f78:	7cdb      	ldrb	r3, [r3, #19]
    9f7a:	f003 0320 	and.w	r3, r3, #32
    9f7e:	b2db      	uxtb	r3, r3
    9f80:	2b00      	cmp	r3, #0
    9f82:	d01b      	beq.n	9fbc <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9f84:	687b      	ldr	r3, [r7, #4]
    9f86:	8a1b      	ldrh	r3, [r3, #16]
    9f88:	8bfa      	ldrh	r2, [r7, #30]
    9f8a:	429a      	cmp	r2, r3
    9f8c:	d902      	bls.n	9f94 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9f8e:	687b      	ldr	r3, [r7, #4]
    9f90:	8a1b      	ldrh	r3, [r3, #16]
    9f92:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9f94:	687b      	ldr	r3, [r7, #4]
    9f96:	68d8      	ldr	r0, [r3, #12]
    9f98:	687b      	ldr	r3, [r7, #4]
    9f9a:	681a      	ldr	r2, [r3, #0]
    9f9c:	687b      	ldr	r3, [r7, #4]
    9f9e:	689b      	ldr	r3, [r3, #8]
    9fa0:	4413      	add	r3, r2
    9fa2:	8bfa      	ldrh	r2, [r7, #30]
    9fa4:	4619      	mov	r1, r3
    9fa6:	4b44      	ldr	r3, [pc, #272]	; (a0b8 <_usb_d_dev_in_next+0x1f8>)
    9fa8:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9faa:	687b      	ldr	r3, [r7, #4]
    9fac:	68db      	ldr	r3, [r3, #12]
    9fae:	461a      	mov	r2, r3
    9fb0:	7dfb      	ldrb	r3, [r7, #23]
    9fb2:	2101      	movs	r1, #1
    9fb4:	4618      	mov	r0, r3
    9fb6:	4b41      	ldr	r3, [pc, #260]	; (a0bc <_usb_d_dev_in_next+0x1fc>)
    9fb8:	4798      	blx	r3
    9fba:	e011      	b.n	9fe0 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9fbc:	8bfb      	ldrh	r3, [r7, #30]
    9fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9fc2:	d902      	bls.n	9fca <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9fc8:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9fca:	687b      	ldr	r3, [r7, #4]
    9fcc:	681a      	ldr	r2, [r3, #0]
    9fce:	687b      	ldr	r3, [r7, #4]
    9fd0:	689b      	ldr	r3, [r3, #8]
    9fd2:	4413      	add	r3, r2
    9fd4:	461a      	mov	r2, r3
    9fd6:	7dfb      	ldrb	r3, [r7, #23]
    9fd8:	2101      	movs	r1, #1
    9fda:	4618      	mov	r0, r3
    9fdc:	4b37      	ldr	r3, [pc, #220]	; (a0bc <_usb_d_dev_in_next+0x1fc>)
    9fde:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9fe0:	8bfa      	ldrh	r2, [r7, #30]
    9fe2:	7df8      	ldrb	r0, [r7, #23]
    9fe4:	2300      	movs	r3, #0
    9fe6:	2101      	movs	r1, #1
    9fe8:	4c35      	ldr	r4, [pc, #212]	; (a0c0 <_usb_d_dev_in_next+0x200>)
    9fea:	47a0      	blx	r4
		goto _in_tx_exec;
    9fec:	e041      	b.n	a072 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9fee:	687b      	ldr	r3, [r7, #4]
    9ff0:	7cdb      	ldrb	r3, [r3, #19]
    9ff2:	f003 0310 	and.w	r3, r3, #16
    9ff6:	b2db      	uxtb	r3, r3
    9ff8:	2b00      	cmp	r3, #0
    9ffa:	d00b      	beq.n	a014 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9ffc:	687a      	ldr	r2, [r7, #4]
    9ffe:	7cd3      	ldrb	r3, [r2, #19]
    a000:	f36f 1304 	bfc	r3, #4, #1
    a004:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    a006:	7df8      	ldrb	r0, [r7, #23]
    a008:	2300      	movs	r3, #0
    a00a:	2200      	movs	r2, #0
    a00c:	2101      	movs	r1, #1
    a00e:	4c2c      	ldr	r4, [pc, #176]	; (a0c0 <_usb_d_dev_in_next+0x200>)
    a010:	47a0      	blx	r4
		goto _in_tx_exec;
    a012:	e02e      	b.n	a072 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    a014:	7afb      	ldrb	r3, [r7, #11]
    a016:	2b00      	cmp	r3, #0
    a018:	d006      	beq.n	a028 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    a01a:	7dfb      	ldrb	r3, [r7, #23]
    a01c:	224b      	movs	r2, #75	; 0x4b
    a01e:	4619      	mov	r1, r3
    a020:	69b8      	ldr	r0, [r7, #24]
    a022:	4b28      	ldr	r3, [pc, #160]	; (a0c4 <_usb_d_dev_in_next+0x204>)
    a024:	4798      	blx	r3
    a026:	e005      	b.n	a034 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    a028:	7dfb      	ldrb	r3, [r7, #23]
    a02a:	224a      	movs	r2, #74	; 0x4a
    a02c:	4619      	mov	r1, r3
    a02e:	69b8      	ldr	r0, [r7, #24]
    a030:	4b24      	ldr	r3, [pc, #144]	; (a0c4 <_usb_d_dev_in_next+0x204>)
    a032:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    a034:	687b      	ldr	r3, [r7, #4]
    a036:	8a1b      	ldrh	r3, [r3, #16]
    a038:	89ba      	ldrh	r2, [r7, #12]
    a03a:	429a      	cmp	r2, r3
    a03c:	d114      	bne.n	a068 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    a03e:	687a      	ldr	r2, [r7, #4]
    a040:	7cd3      	ldrb	r3, [r2, #19]
    a042:	f36f 1386 	bfc	r3, #6, #1
    a046:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    a048:	4b1f      	ldr	r3, [pc, #124]	; (a0c8 <_usb_d_dev_in_next+0x208>)
    a04a:	68db      	ldr	r3, [r3, #12]
    a04c:	687a      	ldr	r2, [r7, #4]
    a04e:	7c90      	ldrb	r0, [r2, #18]
    a050:	687a      	ldr	r2, [r7, #4]
    a052:	6892      	ldr	r2, [r2, #8]
    a054:	4611      	mov	r1, r2
    a056:	4798      	blx	r3
    a058:	4603      	mov	r3, r0
    a05a:	2b00      	cmp	r3, #0
    a05c:	d124      	bne.n	a0a8 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    a05e:	687a      	ldr	r2, [r7, #4]
    a060:	7cd3      	ldrb	r3, [r2, #19]
    a062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a066:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a068:	2100      	movs	r1, #0
    a06a:	6878      	ldr	r0, [r7, #4]
    a06c:	4b17      	ldr	r3, [pc, #92]	; (a0cc <_usb_d_dev_in_next+0x20c>)
    a06e:	4798      	blx	r3
	return;
    a070:	e01b      	b.n	a0aa <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    a072:	78fb      	ldrb	r3, [r7, #3]
    a074:	f083 0301 	eor.w	r3, r3, #1
    a078:	b2db      	uxtb	r3, r3
    a07a:	2b00      	cmp	r3, #0
    a07c:	d00d      	beq.n	a09a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    a07e:	7afb      	ldrb	r3, [r7, #11]
    a080:	2b00      	cmp	r3, #0
    a082:	d002      	beq.n	a08a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    a084:	234e      	movs	r3, #78	; 0x4e
    a086:	777b      	strb	r3, [r7, #29]
    a088:	e001      	b.n	a08e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    a08a:	234a      	movs	r3, #74	; 0x4a
    a08c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a08e:	7f7a      	ldrb	r2, [r7, #29]
    a090:	7dfb      	ldrb	r3, [r7, #23]
    a092:	4619      	mov	r1, r3
    a094:	69b8      	ldr	r0, [r7, #24]
    a096:	4b0e      	ldr	r3, [pc, #56]	; (a0d0 <_usb_d_dev_in_next+0x210>)
    a098:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    a09a:	7dfb      	ldrb	r3, [r7, #23]
    a09c:	2201      	movs	r2, #1
    a09e:	2101      	movs	r1, #1
    a0a0:	4618      	mov	r0, r3
    a0a2:	4b0c      	ldr	r3, [pc, #48]	; (a0d4 <_usb_d_dev_in_next+0x214>)
    a0a4:	4798      	blx	r3
    a0a6:	e000      	b.n	a0aa <_usb_d_dev_in_next+0x1ea>
			return;
    a0a8:	bf00      	nop
}
    a0aa:	3724      	adds	r7, #36	; 0x24
    a0ac:	46bd      	mov	sp, r7
    a0ae:	bd90      	pop	{r4, r7, pc}
    a0b0:	20001004 	.word	0x20001004
    a0b4:	000098b9 	.word	0x000098b9
    a0b8:	00013a25 	.word	0x00013a25
    a0bc:	000098e5 	.word	0x000098e5
    a0c0:	00009a2d 	.word	0x00009a2d
    a0c4:	000091c5 	.word	0x000091c5
    a0c8:	20000f3c 	.word	0x20000f3c
    a0cc:	0000b1e9 	.word	0x0000b1e9
    a0d0:	00009199 	.word	0x00009199
    a0d4:	00009ae5 	.word	0x00009ae5

0000a0d8 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a0d8:	b590      	push	{r4, r7, lr}
    a0da:	b08b      	sub	sp, #44	; 0x2c
    a0dc:	af00      	add	r7, sp, #0
    a0de:	6078      	str	r0, [r7, #4]
    a0e0:	460b      	mov	r3, r1
    a0e2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a0e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a0e8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a0ea:	687b      	ldr	r3, [r7, #4]
    a0ec:	7c9b      	ldrb	r3, [r3, #18]
    a0ee:	f003 030f 	and.w	r3, r3, #15
    a0f2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a0f4:	7ffb      	ldrb	r3, [r7, #31]
    a0f6:	015b      	lsls	r3, r3, #5
    a0f8:	4a94      	ldr	r2, [pc, #592]	; (a34c <_usb_d_dev_out_next+0x274>)
    a0fa:	4413      	add	r3, r2
    a0fc:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a0fe:	78fb      	ldrb	r3, [r7, #3]
    a100:	2b00      	cmp	r3, #0
    a102:	d005      	beq.n	a110 <_usb_d_dev_out_next+0x38>
    a104:	69bb      	ldr	r3, [r7, #24]
    a106:	685b      	ldr	r3, [r3, #4]
    a108:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a10c:	b29b      	uxth	r3, r3
    a10e:	e000      	b.n	a112 <_usb_d_dev_out_next+0x3a>
    a110:	2300      	movs	r3, #0
    a112:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a114:	78fb      	ldrb	r3, [r7, #3]
    a116:	2b00      	cmp	r3, #0
    a118:	d005      	beq.n	a126 <_usb_d_dev_out_next+0x4e>
    a11a:	69bb      	ldr	r3, [r7, #24]
    a11c:	685b      	ldr	r3, [r3, #4]
    a11e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a122:	b29b      	uxth	r3, r3
    a124:	e000      	b.n	a128 <_usb_d_dev_out_next+0x50>
    a126:	2300      	movs	r3, #0
    a128:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a12a:	687b      	ldr	r3, [r7, #4]
    a12c:	8a1b      	ldrh	r3, [r3, #16]
    a12e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a132:	4293      	cmp	r3, r2
    a134:	d004      	beq.n	a140 <_usb_d_dev_out_next+0x68>
    a136:	687b      	ldr	r3, [r7, #4]
    a138:	8a1b      	ldrh	r3, [r3, #16]
    a13a:	3b01      	subs	r3, #1
    a13c:	b29b      	uxth	r3, r3
    a13e:	e001      	b.n	a144 <_usb_d_dev_out_next+0x6c>
    a140:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a144:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a146:	8aba      	ldrh	r2, [r7, #20]
    a148:	8a7b      	ldrh	r3, [r7, #18]
    a14a:	4013      	ands	r3, r2
    a14c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a14e:	687b      	ldr	r3, [r7, #4]
    a150:	7cdb      	ldrb	r3, [r3, #19]
    a152:	f003 0307 	and.w	r3, r3, #7
    a156:	b2db      	uxtb	r3, r3
    a158:	2b01      	cmp	r3, #1
    a15a:	bf0c      	ite	eq
    a15c:	2301      	moveq	r3, #1
    a15e:	2300      	movne	r3, #0
    a160:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a162:	78fb      	ldrb	r3, [r7, #3]
    a164:	2b00      	cmp	r3, #0
    a166:	d004      	beq.n	a172 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a168:	7ffb      	ldrb	r3, [r7, #31]
    a16a:	2100      	movs	r1, #0
    a16c:	4618      	mov	r0, r3
    a16e:	4b78      	ldr	r3, [pc, #480]	; (a350 <_usb_d_dev_out_next+0x278>)
    a170:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a172:	687b      	ldr	r3, [r7, #4]
    a174:	7cdb      	ldrb	r3, [r3, #19]
    a176:	f003 0320 	and.w	r3, r3, #32
    a17a:	b2db      	uxtb	r3, r3
    a17c:	2b00      	cmp	r3, #0
    a17e:	d01c      	beq.n	a1ba <_usb_d_dev_out_next+0xe2>
    a180:	687b      	ldr	r3, [r7, #4]
    a182:	685b      	ldr	r3, [r3, #4]
    a184:	2b00      	cmp	r3, #0
    a186:	d018      	beq.n	a1ba <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a188:	687b      	ldr	r3, [r7, #4]
    a18a:	685b      	ldr	r3, [r3, #4]
    a18c:	b29a      	uxth	r2, r3
    a18e:	687b      	ldr	r3, [r7, #4]
    a190:	689b      	ldr	r3, [r3, #8]
    a192:	b29b      	uxth	r3, r3
    a194:	1ad3      	subs	r3, r2, r3
    a196:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a198:	687b      	ldr	r3, [r7, #4]
    a19a:	681a      	ldr	r2, [r3, #0]
    a19c:	687b      	ldr	r3, [r7, #4]
    a19e:	689b      	ldr	r3, [r3, #8]
    a1a0:	18d0      	adds	r0, r2, r3
    a1a2:	687b      	ldr	r3, [r7, #4]
    a1a4:	68d9      	ldr	r1, [r3, #12]
    a1a6:	89ba      	ldrh	r2, [r7, #12]
    a1a8:	8a3b      	ldrh	r3, [r7, #16]
    a1aa:	429a      	cmp	r2, r3
    a1ac:	d901      	bls.n	a1b2 <_usb_d_dev_out_next+0xda>
    a1ae:	8a3b      	ldrh	r3, [r7, #16]
    a1b0:	e000      	b.n	a1b4 <_usb_d_dev_out_next+0xdc>
    a1b2:	89bb      	ldrh	r3, [r7, #12]
    a1b4:	461a      	mov	r2, r3
    a1b6:	4b67      	ldr	r3, [pc, #412]	; (a354 <_usb_d_dev_out_next+0x27c>)
    a1b8:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a1ba:	687b      	ldr	r3, [r7, #4]
    a1bc:	685b      	ldr	r3, [r3, #4]
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d121      	bne.n	a206 <_usb_d_dev_out_next+0x12e>
    a1c2:	687b      	ldr	r3, [r7, #4]
    a1c4:	7cdb      	ldrb	r3, [r3, #19]
    a1c6:	f003 0310 	and.w	r3, r3, #16
    a1ca:	b2db      	uxtb	r3, r3
    a1cc:	2b00      	cmp	r3, #0
    a1ce:	d01a      	beq.n	a206 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a1d0:	687a      	ldr	r2, [r7, #4]
    a1d2:	7cd3      	ldrb	r3, [r2, #19]
    a1d4:	f36f 1304 	bfc	r3, #4, #1
    a1d8:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a1da:	687a      	ldr	r2, [r7, #4]
    a1dc:	7cd3      	ldrb	r3, [r2, #19]
    a1de:	f043 0320 	orr.w	r3, r3, #32
    a1e2:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a1e4:	687b      	ldr	r3, [r7, #4]
    a1e6:	68db      	ldr	r3, [r3, #12]
    a1e8:	461a      	mov	r2, r3
    a1ea:	7ffb      	ldrb	r3, [r7, #31]
    a1ec:	2100      	movs	r1, #0
    a1ee:	4618      	mov	r0, r3
    a1f0:	4b59      	ldr	r3, [pc, #356]	; (a358 <_usb_d_dev_out_next+0x280>)
    a1f2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a1f4:	687b      	ldr	r3, [r7, #4]
    a1f6:	8a1b      	ldrh	r3, [r3, #16]
    a1f8:	461a      	mov	r2, r3
    a1fa:	7ff8      	ldrb	r0, [r7, #31]
    a1fc:	2300      	movs	r3, #0
    a1fe:	2100      	movs	r1, #0
    a200:	4c56      	ldr	r4, [pc, #344]	; (a35c <_usb_d_dev_out_next+0x284>)
    a202:	47a0      	blx	r4
		goto _out_rx_exec;
    a204:	e090      	b.n	a328 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a206:	78fb      	ldrb	r3, [r7, #3]
    a208:	2b00      	cmp	r3, #0
    a20a:	d010      	beq.n	a22e <_usb_d_dev_out_next+0x156>
    a20c:	687b      	ldr	r3, [r7, #4]
    a20e:	8a1b      	ldrh	r3, [r3, #16]
    a210:	8a3a      	ldrh	r2, [r7, #16]
    a212:	429a      	cmp	r2, r3
    a214:	d20b      	bcs.n	a22e <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a216:	687a      	ldr	r2, [r7, #4]
    a218:	7cd3      	ldrb	r3, [r2, #19]
    a21a:	f36f 1304 	bfc	r3, #4, #1
    a21e:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a220:	687b      	ldr	r3, [r7, #4]
    a222:	689a      	ldr	r2, [r3, #8]
    a224:	8abb      	ldrh	r3, [r7, #20]
    a226:	441a      	add	r2, r3
    a228:	687b      	ldr	r3, [r7, #4]
    a22a:	609a      	str	r2, [r3, #8]
    a22c:	e05c      	b.n	a2e8 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a22e:	687b      	ldr	r3, [r7, #4]
    a230:	689a      	ldr	r2, [r3, #8]
    a232:	8afb      	ldrh	r3, [r7, #22]
    a234:	441a      	add	r2, r3
    a236:	687b      	ldr	r3, [r7, #4]
    a238:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a23a:	687b      	ldr	r3, [r7, #4]
    a23c:	689a      	ldr	r2, [r3, #8]
    a23e:	687b      	ldr	r3, [r7, #4]
    a240:	685b      	ldr	r3, [r3, #4]
    a242:	429a      	cmp	r2, r3
    a244:	d250      	bcs.n	a2e8 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a246:	687b      	ldr	r3, [r7, #4]
    a248:	685b      	ldr	r3, [r3, #4]
    a24a:	b29a      	uxth	r2, r3
    a24c:	687b      	ldr	r3, [r7, #4]
    a24e:	689b      	ldr	r3, [r3, #8]
    a250:	b29b      	uxth	r3, r3
    a252:	1ad3      	subs	r3, r2, r3
    a254:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a256:	687b      	ldr	r3, [r7, #4]
    a258:	7cdb      	ldrb	r3, [r3, #19]
    a25a:	f003 0320 	and.w	r3, r3, #32
    a25e:	b2db      	uxtb	r3, r3
    a260:	2b00      	cmp	r3, #0
    a262:	d010      	beq.n	a286 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a264:	687b      	ldr	r3, [r7, #4]
    a266:	8a1b      	ldrh	r3, [r3, #16]
    a268:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a26a:	429a      	cmp	r2, r3
    a26c:	d902      	bls.n	a274 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a26e:	687b      	ldr	r3, [r7, #4]
    a270:	8a1b      	ldrh	r3, [r3, #16]
    a272:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a274:	687b      	ldr	r3, [r7, #4]
    a276:	68db      	ldr	r3, [r3, #12]
    a278:	461a      	mov	r2, r3
    a27a:	7ffb      	ldrb	r3, [r7, #31]
    a27c:	2100      	movs	r1, #0
    a27e:	4618      	mov	r0, r3
    a280:	4b35      	ldr	r3, [pc, #212]	; (a358 <_usb_d_dev_out_next+0x280>)
    a282:	4798      	blx	r3
    a284:	e029      	b.n	a2da <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a286:	687b      	ldr	r3, [r7, #4]
    a288:	8a1b      	ldrh	r3, [r3, #16]
    a28a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a28c:	429a      	cmp	r2, r3
    a28e:	d90f      	bls.n	a2b0 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a290:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a296:	d903      	bls.n	a2a0 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a29c:	84fb      	strh	r3, [r7, #38]	; 0x26
    a29e:	e011      	b.n	a2c4 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a2a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a2a2:	8a7b      	ldrh	r3, [r7, #18]
    a2a4:	4013      	ands	r3, r2
    a2a6:	b29b      	uxth	r3, r3
    a2a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a2aa:	1ad3      	subs	r3, r2, r3
    a2ac:	84fb      	strh	r3, [r7, #38]	; 0x26
    a2ae:	e009      	b.n	a2c4 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a2b0:	687b      	ldr	r3, [r7, #4]
    a2b2:	8a1b      	ldrh	r3, [r3, #16]
    a2b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a2b6:	429a      	cmp	r2, r3
    a2b8:	d204      	bcs.n	a2c4 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a2ba:	687a      	ldr	r2, [r7, #4]
    a2bc:	7cd3      	ldrb	r3, [r2, #19]
    a2be:	f043 0320 	orr.w	r3, r3, #32
    a2c2:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a2c4:	687b      	ldr	r3, [r7, #4]
    a2c6:	681a      	ldr	r2, [r3, #0]
    a2c8:	687b      	ldr	r3, [r7, #4]
    a2ca:	689b      	ldr	r3, [r3, #8]
    a2cc:	4413      	add	r3, r2
    a2ce:	461a      	mov	r2, r3
    a2d0:	7ffb      	ldrb	r3, [r7, #31]
    a2d2:	2100      	movs	r1, #0
    a2d4:	4618      	mov	r0, r3
    a2d6:	4b20      	ldr	r3, [pc, #128]	; (a358 <_usb_d_dev_out_next+0x280>)
    a2d8:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a2da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a2dc:	7ff8      	ldrb	r0, [r7, #31]
    a2de:	2300      	movs	r3, #0
    a2e0:	2100      	movs	r1, #0
    a2e2:	4c1e      	ldr	r4, [pc, #120]	; (a35c <_usb_d_dev_out_next+0x284>)
    a2e4:	47a0      	blx	r4
			goto _out_rx_exec;
    a2e6:	e01f      	b.n	a328 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a2e8:	7bfb      	ldrb	r3, [r7, #15]
    a2ea:	2b00      	cmp	r3, #0
    a2ec:	d006      	beq.n	a2fc <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a2ee:	7ffb      	ldrb	r3, [r7, #31]
    a2f0:	222d      	movs	r2, #45	; 0x2d
    a2f2:	4619      	mov	r1, r3
    a2f4:	6a38      	ldr	r0, [r7, #32]
    a2f6:	4b1a      	ldr	r3, [pc, #104]	; (a360 <_usb_d_dev_out_next+0x288>)
    a2f8:	4798      	blx	r3
    a2fa:	e005      	b.n	a308 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a2fc:	7ffb      	ldrb	r3, [r7, #31]
    a2fe:	2225      	movs	r2, #37	; 0x25
    a300:	4619      	mov	r1, r3
    a302:	6a38      	ldr	r0, [r7, #32]
    a304:	4b16      	ldr	r3, [pc, #88]	; (a360 <_usb_d_dev_out_next+0x288>)
    a306:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a308:	7ffb      	ldrb	r3, [r7, #31]
    a30a:	2b00      	cmp	r3, #0
    a30c:	d107      	bne.n	a31e <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a30e:	687b      	ldr	r3, [r7, #4]
    a310:	68db      	ldr	r3, [r3, #12]
    a312:	461a      	mov	r2, r3
    a314:	7ffb      	ldrb	r3, [r7, #31]
    a316:	2100      	movs	r1, #0
    a318:	4618      	mov	r0, r3
    a31a:	4b0f      	ldr	r3, [pc, #60]	; (a358 <_usb_d_dev_out_next+0x280>)
    a31c:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a31e:	2100      	movs	r1, #0
    a320:	6878      	ldr	r0, [r7, #4]
    a322:	4b10      	ldr	r3, [pc, #64]	; (a364 <_usb_d_dev_out_next+0x28c>)
    a324:	4798      	blx	r3
	return;
    a326:	e031      	b.n	a38c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a328:	78fb      	ldrb	r3, [r7, #3]
    a32a:	f083 0301 	eor.w	r3, r3, #1
    a32e:	b2db      	uxtb	r3, r3
    a330:	2b00      	cmp	r3, #0
    a332:	d025      	beq.n	a380 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a334:	7bfb      	ldrb	r3, [r7, #15]
    a336:	2b00      	cmp	r3, #0
    a338:	d018      	beq.n	a36c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a33a:	7ffb      	ldrb	r3, [r7, #31]
    a33c:	2101      	movs	r1, #1
    a33e:	4618      	mov	r0, r3
    a340:	4b09      	ldr	r3, [pc, #36]	; (a368 <_usb_d_dev_out_next+0x290>)
    a342:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a344:	232d      	movs	r3, #45	; 0x2d
    a346:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a34a:	e012      	b.n	a372 <_usb_d_dev_out_next+0x29a>
    a34c:	20001004 	.word	0x20001004
    a350:	000098b9 	.word	0x000098b9
    a354:	00013a25 	.word	0x00013a25
    a358:	000098e5 	.word	0x000098e5
    a35c:	00009a6d 	.word	0x00009a6d
    a360:	000091c5 	.word	0x000091c5
    a364:	0000b1e9 	.word	0x0000b1e9
    a368:	00009aad 	.word	0x00009aad
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a36c:	2325      	movs	r3, #37	; 0x25
    a36e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a372:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a376:	7ffb      	ldrb	r3, [r7, #31]
    a378:	4619      	mov	r1, r3
    a37a:	6a38      	ldr	r0, [r7, #32]
    a37c:	4b05      	ldr	r3, [pc, #20]	; (a394 <_usb_d_dev_out_next+0x2bc>)
    a37e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a380:	7ffb      	ldrb	r3, [r7, #31]
    a382:	2201      	movs	r2, #1
    a384:	2100      	movs	r1, #0
    a386:	4618      	mov	r0, r3
    a388:	4b03      	ldr	r3, [pc, #12]	; (a398 <_usb_d_dev_out_next+0x2c0>)
    a38a:	4798      	blx	r3
}
    a38c:	372c      	adds	r7, #44	; 0x2c
    a38e:	46bd      	mov	sp, r7
    a390:	bd90      	pop	{r4, r7, pc}
    a392:	bf00      	nop
    a394:	00009199 	.word	0x00009199
    a398:	00009b3d 	.word	0x00009b3d

0000a39c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a39c:	b580      	push	{r7, lr}
    a39e:	b084      	sub	sp, #16
    a3a0:	af00      	add	r7, sp, #0
    a3a2:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a3a4:	687b      	ldr	r3, [r7, #4]
    a3a6:	7c9b      	ldrb	r3, [r3, #18]
    a3a8:	f003 030f 	and.w	r3, r3, #15
    a3ac:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a3ae:	687b      	ldr	r3, [r7, #4]
    a3b0:	7cdb      	ldrb	r3, [r3, #19]
    a3b2:	f003 0307 	and.w	r3, r3, #7
    a3b6:	b2db      	uxtb	r3, r3
    a3b8:	2b01      	cmp	r3, #1
    a3ba:	bf0c      	ite	eq
    a3bc:	2301      	moveq	r3, #1
    a3be:	2300      	movne	r3, #0
    a3c0:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a3c2:	7bbb      	ldrb	r3, [r7, #14]
    a3c4:	f083 0301 	eor.w	r3, r3, #1
    a3c8:	b2db      	uxtb	r3, r3
    a3ca:	2b00      	cmp	r3, #0
    a3cc:	d008      	beq.n	a3e0 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a3ce:	7bfb      	ldrb	r3, [r7, #15]
    a3d0:	4618      	mov	r0, r3
    a3d2:	4b20      	ldr	r3, [pc, #128]	; (a454 <_usb_d_dev_handle_setup+0xb8>)
    a3d4:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a3d6:	7bfb      	ldrb	r3, [r7, #15]
    a3d8:	4618      	mov	r0, r3
    a3da:	4b1f      	ldr	r3, [pc, #124]	; (a458 <_usb_d_dev_handle_setup+0xbc>)
    a3dc:	4798      	blx	r3
		return;
    a3de:	e036      	b.n	a44e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a3e0:	687b      	ldr	r3, [r7, #4]
    a3e2:	7cdb      	ldrb	r3, [r3, #19]
    a3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a3e8:	b2db      	uxtb	r3, r3
    a3ea:	2b00      	cmp	r3, #0
    a3ec:	d010      	beq.n	a410 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a3ee:	687a      	ldr	r2, [r7, #4]
    a3f0:	7cd3      	ldrb	r3, [r2, #19]
    a3f2:	f36f 1386 	bfc	r3, #6, #1
    a3f6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a3f8:	7bfb      	ldrb	r3, [r7, #15]
    a3fa:	2200      	movs	r2, #0
    a3fc:	2101      	movs	r1, #1
    a3fe:	4618      	mov	r0, r3
    a400:	4b16      	ldr	r3, [pc, #88]	; (a45c <_usb_d_dev_handle_setup+0xc0>)
    a402:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a404:	7bfb      	ldrb	r3, [r7, #15]
    a406:	2200      	movs	r2, #0
    a408:	2100      	movs	r1, #0
    a40a:	4618      	mov	r0, r3
    a40c:	4b14      	ldr	r3, [pc, #80]	; (a460 <_usb_d_dev_handle_setup+0xc4>)
    a40e:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a410:	687a      	ldr	r2, [r7, #4]
    a412:	7cd3      	ldrb	r3, [r2, #19]
    a414:	f36f 03c3 	bfc	r3, #3, #1
    a418:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a41a:	7bfb      	ldrb	r3, [r7, #15]
    a41c:	2100      	movs	r1, #0
    a41e:	4618      	mov	r0, r3
    a420:	4b10      	ldr	r3, [pc, #64]	; (a464 <_usb_d_dev_handle_setup+0xc8>)
    a422:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a424:	7bfb      	ldrb	r3, [r7, #15]
    a426:	2101      	movs	r1, #1
    a428:	4618      	mov	r0, r3
    a42a:	4b0e      	ldr	r3, [pc, #56]	; (a464 <_usb_d_dev_handle_setup+0xc8>)
    a42c:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a42e:	7bfb      	ldrb	r3, [r7, #15]
    a430:	216f      	movs	r1, #111	; 0x6f
    a432:	4618      	mov	r0, r3
    a434:	4b0c      	ldr	r3, [pc, #48]	; (a468 <_usb_d_dev_handle_setup+0xcc>)
    a436:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a438:	7bfb      	ldrb	r3, [r7, #15]
    a43a:	216f      	movs	r1, #111	; 0x6f
    a43c:	4618      	mov	r0, r3
    a43e:	4b0b      	ldr	r3, [pc, #44]	; (a46c <_usb_d_dev_handle_setup+0xd0>)
    a440:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a442:	4b0b      	ldr	r3, [pc, #44]	; (a470 <_usb_d_dev_handle_setup+0xd4>)
    a444:	689b      	ldr	r3, [r3, #8]
    a446:	687a      	ldr	r2, [r7, #4]
    a448:	7c92      	ldrb	r2, [r2, #18]
    a44a:	4610      	mov	r0, r2
    a44c:	4798      	blx	r3
}
    a44e:	3710      	adds	r7, #16
    a450:	46bd      	mov	sp, r7
    a452:	bd80      	pop	{r7, pc}
    a454:	00009841 	.word	0x00009841
    a458:	000097ed 	.word	0x000097ed
    a45c:	00009ae5 	.word	0x00009ae5
    a460:	00009b3d 	.word	0x00009b3d
    a464:	00009aad 	.word	0x00009aad
    a468:	000095ed 	.word	0x000095ed
    a46c:	0000963d 	.word	0x0000963d
    a470:	20000f3c 	.word	0x20000f3c

0000a474 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a474:	b580      	push	{r7, lr}
    a476:	b084      	sub	sp, #16
    a478:	af00      	add	r7, sp, #0
    a47a:	6078      	str	r0, [r7, #4]
    a47c:	460b      	mov	r3, r1
    a47e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a480:	687b      	ldr	r3, [r7, #4]
    a482:	7c9b      	ldrb	r3, [r3, #18]
    a484:	f003 030f 	and.w	r3, r3, #15
    a488:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a48a:	78f9      	ldrb	r1, [r7, #3]
    a48c:	7bfb      	ldrb	r3, [r7, #15]
    a48e:	2200      	movs	r2, #0
    a490:	4618      	mov	r0, r3
    a492:	4b07      	ldr	r3, [pc, #28]	; (a4b0 <_usb_d_dev_handle_stall+0x3c>)
    a494:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a496:	4b07      	ldr	r3, [pc, #28]	; (a4b4 <_usb_d_dev_handle_stall+0x40>)
    a498:	691b      	ldr	r3, [r3, #16]
    a49a:	687a      	ldr	r2, [r7, #4]
    a49c:	7c90      	ldrb	r0, [r2, #18]
    a49e:	687a      	ldr	r2, [r7, #4]
    a4a0:	6892      	ldr	r2, [r2, #8]
    a4a2:	2101      	movs	r1, #1
    a4a4:	4798      	blx	r3
}
    a4a6:	bf00      	nop
    a4a8:	3710      	adds	r7, #16
    a4aa:	46bd      	mov	sp, r7
    a4ac:	bd80      	pop	{r7, pc}
    a4ae:	bf00      	nop
    a4b0:	000097a1 	.word	0x000097a1
    a4b4:	20000f3c 	.word	0x20000f3c

0000a4b8 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a4b8:	b580      	push	{r7, lr}
    a4ba:	b088      	sub	sp, #32
    a4bc:	af00      	add	r7, sp, #0
    a4be:	6078      	str	r0, [r7, #4]
    a4c0:	460b      	mov	r3, r1
    a4c2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a4c4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a4c8:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a4ca:	687b      	ldr	r3, [r7, #4]
    a4cc:	7c9b      	ldrb	r3, [r3, #18]
    a4ce:	f003 030f 	and.w	r3, r3, #15
    a4d2:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a4d4:	4b61      	ldr	r3, [pc, #388]	; (a65c <_usb_d_dev_handle_trfail+0x1a4>)
    a4d6:	881b      	ldrh	r3, [r3, #0]
    a4d8:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a4da:	7efb      	ldrb	r3, [r7, #27]
    a4dc:	015b      	lsls	r3, r3, #5
    a4de:	4a60      	ldr	r2, [pc, #384]	; (a660 <_usb_d_dev_handle_trfail+0x1a8>)
    a4e0:	4413      	add	r3, r2
    a4e2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a4e4:	78fb      	ldrb	r3, [r7, #3]
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	d006      	beq.n	a4f8 <_usb_d_dev_handle_trfail+0x40>
    a4ea:	7efb      	ldrb	r3, [r7, #27]
    a4ec:	4619      	mov	r1, r3
    a4ee:	69f8      	ldr	r0, [r7, #28]
    a4f0:	4b5c      	ldr	r3, [pc, #368]	; (a664 <_usb_d_dev_handle_trfail+0x1ac>)
    a4f2:	4798      	blx	r3
    a4f4:	4603      	mov	r3, r0
    a4f6:	e005      	b.n	a504 <_usb_d_dev_handle_trfail+0x4c>
    a4f8:	7efb      	ldrb	r3, [r7, #27]
    a4fa:	4619      	mov	r1, r3
    a4fc:	69f8      	ldr	r0, [r7, #28]
    a4fe:	4b5a      	ldr	r3, [pc, #360]	; (a668 <_usb_d_dev_handle_trfail+0x1b0>)
    a500:	4798      	blx	r3
    a502:	4603      	mov	r3, r0
    a504:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a506:	687b      	ldr	r3, [r7, #4]
    a508:	7cdb      	ldrb	r3, [r3, #19]
    a50a:	f003 0307 	and.w	r3, r3, #7
    a50e:	b2db      	uxtb	r3, r3
    a510:	2b01      	cmp	r3, #1
    a512:	bf0c      	ite	eq
    a514:	2301      	moveq	r3, #1
    a516:	2300      	movne	r3, #0
    a518:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a51a:	78fb      	ldrb	r3, [r7, #3]
    a51c:	011b      	lsls	r3, r3, #4
    a51e:	697a      	ldr	r2, [r7, #20]
    a520:	4413      	add	r3, r2
    a522:	7a9b      	ldrb	r3, [r3, #10]
    a524:	b2db      	uxtb	r3, r3
    a526:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a528:	7cfb      	ldrb	r3, [r7, #19]
    a52a:	2b02      	cmp	r3, #2
    a52c:	d12f      	bne.n	a58e <_usb_d_dev_handle_trfail+0xd6>
    a52e:	7b3b      	ldrb	r3, [r7, #12]
    a530:	f003 0301 	and.w	r3, r3, #1
    a534:	b2db      	uxtb	r3, r3
    a536:	2b00      	cmp	r3, #0
    a538:	d029      	beq.n	a58e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a53a:	78fb      	ldrb	r3, [r7, #3]
    a53c:	011b      	lsls	r3, r3, #4
    a53e:	697a      	ldr	r2, [r7, #20]
    a540:	441a      	add	r2, r3
    a542:	7a93      	ldrb	r3, [r2, #10]
    a544:	f36f 0300 	bfc	r3, #0, #1
    a548:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a54a:	78fb      	ldrb	r3, [r7, #3]
    a54c:	f107 0220 	add.w	r2, r7, #32
    a550:	4413      	add	r3, r2
    a552:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a556:	7efb      	ldrb	r3, [r7, #27]
    a558:	4619      	mov	r1, r3
    a55a:	69f8      	ldr	r0, [r7, #28]
    a55c:	4b43      	ldr	r3, [pc, #268]	; (a66c <_usb_d_dev_handle_trfail+0x1b4>)
    a55e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a560:	78fb      	ldrb	r3, [r7, #3]
    a562:	f107 0220 	add.w	r2, r7, #32
    a566:	4413      	add	r3, r2
    a568:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a56c:	7efb      	ldrb	r3, [r7, #27]
    a56e:	4619      	mov	r1, r3
    a570:	69f8      	ldr	r0, [r7, #28]
    a572:	4b3f      	ldr	r3, [pc, #252]	; (a670 <_usb_d_dev_handle_trfail+0x1b8>)
    a574:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a576:	78fb      	ldrb	r3, [r7, #3]
    a578:	2b00      	cmp	r3, #0
    a57a:	bf14      	ite	ne
    a57c:	2301      	movne	r3, #1
    a57e:	2300      	moveq	r3, #0
    a580:	b2db      	uxtb	r3, r3
    a582:	2204      	movs	r2, #4
    a584:	4619      	mov	r1, r3
    a586:	6878      	ldr	r0, [r7, #4]
    a588:	4b3a      	ldr	r3, [pc, #232]	; (a674 <_usb_d_dev_handle_trfail+0x1bc>)
    a58a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a58c:	e062      	b.n	a654 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a58e:	7b3b      	ldrb	r3, [r7, #12]
    a590:	f003 0302 	and.w	r3, r3, #2
    a594:	b2db      	uxtb	r3, r3
    a596:	2b00      	cmp	r3, #0
    a598:	d040      	beq.n	a61c <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a59a:	78fb      	ldrb	r3, [r7, #3]
    a59c:	011b      	lsls	r3, r3, #4
    a59e:	697a      	ldr	r2, [r7, #20]
    a5a0:	441a      	add	r2, r3
    a5a2:	7a93      	ldrb	r3, [r2, #10]
    a5a4:	f36f 0341 	bfc	r3, #1, #1
    a5a8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a5aa:	78fb      	ldrb	r3, [r7, #3]
    a5ac:	f107 0220 	add.w	r2, r7, #32
    a5b0:	4413      	add	r3, r2
    a5b2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a5b6:	7efb      	ldrb	r3, [r7, #27]
    a5b8:	4619      	mov	r1, r3
    a5ba:	69f8      	ldr	r0, [r7, #28]
    a5bc:	4b2b      	ldr	r3, [pc, #172]	; (a66c <_usb_d_dev_handle_trfail+0x1b4>)
    a5be:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a5c0:	78fb      	ldrb	r3, [r7, #3]
    a5c2:	f107 0220 	add.w	r2, r7, #32
    a5c6:	4413      	add	r3, r2
    a5c8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a5cc:	7efb      	ldrb	r3, [r7, #27]
    a5ce:	4619      	mov	r1, r3
    a5d0:	69f8      	ldr	r0, [r7, #28]
    a5d2:	4b27      	ldr	r3, [pc, #156]	; (a670 <_usb_d_dev_handle_trfail+0x1b8>)
    a5d4:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a5d6:	7cbb      	ldrb	r3, [r7, #18]
    a5d8:	2b00      	cmp	r3, #0
    a5da:	d03b      	beq.n	a654 <_usb_d_dev_handle_trfail+0x19c>
    a5dc:	687b      	ldr	r3, [r7, #4]
    a5de:	7cdb      	ldrb	r3, [r3, #19]
    a5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a5e4:	b2db      	uxtb	r3, r3
    a5e6:	2b00      	cmp	r3, #0
    a5e8:	d034      	beq.n	a654 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a5ea:	687b      	ldr	r3, [r7, #4]
    a5ec:	7cdb      	ldrb	r3, [r3, #19]
    a5ee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a5f2:	b2db      	uxtb	r3, r3
    a5f4:	461a      	mov	r2, r3
    a5f6:	78fb      	ldrb	r3, [r7, #3]
    a5f8:	4293      	cmp	r3, r2
    a5fa:	d02b      	beq.n	a654 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a5fc:	687b      	ldr	r3, [r7, #4]
    a5fe:	7cdb      	ldrb	r3, [r3, #19]
    a600:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a604:	b2db      	uxtb	r3, r3
    a606:	2b00      	cmp	r3, #0
    a608:	bf14      	ite	ne
    a60a:	2301      	movne	r3, #1
    a60c:	2300      	moveq	r3, #0
    a60e:	b2db      	uxtb	r3, r3
    a610:	2200      	movs	r2, #0
    a612:	4619      	mov	r1, r3
    a614:	6878      	ldr	r0, [r7, #4]
    a616:	4b17      	ldr	r3, [pc, #92]	; (a674 <_usb_d_dev_handle_trfail+0x1bc>)
    a618:	4798      	blx	r3
}
    a61a:	e01b      	b.n	a654 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a61c:	78fa      	ldrb	r2, [r7, #3]
    a61e:	7efb      	ldrb	r3, [r7, #27]
    a620:	4611      	mov	r1, r2
    a622:	4618      	mov	r0, r3
    a624:	4b14      	ldr	r3, [pc, #80]	; (a678 <_usb_d_dev_handle_trfail+0x1c0>)
    a626:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a628:	78fb      	ldrb	r3, [r7, #3]
    a62a:	f107 0220 	add.w	r2, r7, #32
    a62e:	4413      	add	r3, r2
    a630:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a634:	7efb      	ldrb	r3, [r7, #27]
    a636:	4619      	mov	r1, r3
    a638:	69f8      	ldr	r0, [r7, #28]
    a63a:	4b0c      	ldr	r3, [pc, #48]	; (a66c <_usb_d_dev_handle_trfail+0x1b4>)
    a63c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a63e:	78fb      	ldrb	r3, [r7, #3]
    a640:	f107 0220 	add.w	r2, r7, #32
    a644:	4413      	add	r3, r2
    a646:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a64a:	7efb      	ldrb	r3, [r7, #27]
    a64c:	4619      	mov	r1, r3
    a64e:	69f8      	ldr	r0, [r7, #28]
    a650:	4b07      	ldr	r3, [pc, #28]	; (a670 <_usb_d_dev_handle_trfail+0x1b8>)
    a652:	4798      	blx	r3
}
    a654:	bf00      	nop
    a656:	3720      	adds	r7, #32
    a658:	46bd      	mov	sp, r7
    a65a:	bd80      	pop	{r7, pc}
    a65c:	000141b0 	.word	0x000141b0
    a660:	20001004 	.word	0x20001004
    a664:	00009221 	.word	0x00009221
    a668:	000091f1 	.word	0x000091f1
    a66c:	000090c5 	.word	0x000090c5
    a670:	000091c5 	.word	0x000091c5
    a674:	0000b231 	.word	0x0000b231
    a678:	00009aad 	.word	0x00009aad

0000a67c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a67c:	b580      	push	{r7, lr}
    a67e:	b082      	sub	sp, #8
    a680:	af00      	add	r7, sp, #0
    a682:	6078      	str	r0, [r7, #4]
    a684:	460b      	mov	r3, r1
    a686:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a688:	78fb      	ldrb	r3, [r7, #3]
    a68a:	f003 0310 	and.w	r3, r3, #16
    a68e:	2b00      	cmp	r3, #0
    a690:	d003      	beq.n	a69a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a692:	6878      	ldr	r0, [r7, #4]
    a694:	4b0c      	ldr	r3, [pc, #48]	; (a6c8 <_usb_d_dev_trans_setup_isr+0x4c>)
    a696:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a698:	e012      	b.n	a6c0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a69a:	78fb      	ldrb	r3, [r7, #3]
    a69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a6a0:	2b00      	cmp	r3, #0
    a6a2:	d004      	beq.n	a6ae <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a6a4:	2101      	movs	r1, #1
    a6a6:	6878      	ldr	r0, [r7, #4]
    a6a8:	4b08      	ldr	r3, [pc, #32]	; (a6cc <_usb_d_dev_trans_setup_isr+0x50>)
    a6aa:	4798      	blx	r3
}
    a6ac:	e008      	b.n	a6c0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a6ae:	78fb      	ldrb	r3, [r7, #3]
    a6b0:	f003 0320 	and.w	r3, r3, #32
    a6b4:	2b00      	cmp	r3, #0
    a6b6:	d003      	beq.n	a6c0 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a6b8:	2100      	movs	r1, #0
    a6ba:	6878      	ldr	r0, [r7, #4]
    a6bc:	4b03      	ldr	r3, [pc, #12]	; (a6cc <_usb_d_dev_trans_setup_isr+0x50>)
    a6be:	4798      	blx	r3
}
    a6c0:	bf00      	nop
    a6c2:	3708      	adds	r7, #8
    a6c4:	46bd      	mov	sp, r7
    a6c6:	bd80      	pop	{r7, pc}
    a6c8:	0000a39d 	.word	0x0000a39d
    a6cc:	0000a475 	.word	0x0000a475

0000a6d0 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a6d0:	b580      	push	{r7, lr}
    a6d2:	b082      	sub	sp, #8
    a6d4:	af00      	add	r7, sp, #0
    a6d6:	6078      	str	r0, [r7, #4]
    a6d8:	460b      	mov	r3, r1
    a6da:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a6dc:	78fb      	ldrb	r3, [r7, #3]
    a6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a6e2:	2b00      	cmp	r3, #0
    a6e4:	d004      	beq.n	a6f0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a6e6:	2101      	movs	r1, #1
    a6e8:	6878      	ldr	r0, [r7, #4]
    a6ea:	4b1a      	ldr	r3, [pc, #104]	; (a754 <_usb_d_dev_trans_in_isr+0x84>)
    a6ec:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a6ee:	e02c      	b.n	a74a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a6f0:	78fb      	ldrb	r3, [r7, #3]
    a6f2:	f003 0308 	and.w	r3, r3, #8
    a6f6:	2b00      	cmp	r3, #0
    a6f8:	d004      	beq.n	a704 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a6fa:	2101      	movs	r1, #1
    a6fc:	6878      	ldr	r0, [r7, #4]
    a6fe:	4b16      	ldr	r3, [pc, #88]	; (a758 <_usb_d_dev_trans_in_isr+0x88>)
    a700:	4798      	blx	r3
}
    a702:	e022      	b.n	a74a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a704:	78fb      	ldrb	r3, [r7, #3]
    a706:	f003 0302 	and.w	r3, r3, #2
    a70a:	2b00      	cmp	r3, #0
    a70c:	d004      	beq.n	a718 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a70e:	2101      	movs	r1, #1
    a710:	6878      	ldr	r0, [r7, #4]
    a712:	4b12      	ldr	r3, [pc, #72]	; (a75c <_usb_d_dev_trans_in_isr+0x8c>)
    a714:	4798      	blx	r3
}
    a716:	e018      	b.n	a74a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a718:	687b      	ldr	r3, [r7, #4]
    a71a:	7cdb      	ldrb	r3, [r3, #19]
    a71c:	f003 0307 	and.w	r3, r3, #7
    a720:	b2db      	uxtb	r3, r3
    a722:	2b01      	cmp	r3, #1
    a724:	d111      	bne.n	a74a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a726:	78fb      	ldrb	r3, [r7, #3]
    a728:	f003 0304 	and.w	r3, r3, #4
    a72c:	2b00      	cmp	r3, #0
    a72e:	d004      	beq.n	a73a <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a730:	2100      	movs	r1, #0
    a732:	6878      	ldr	r0, [r7, #4]
    a734:	4b08      	ldr	r3, [pc, #32]	; (a758 <_usb_d_dev_trans_in_isr+0x88>)
    a736:	4798      	blx	r3
}
    a738:	e007      	b.n	a74a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a73a:	78fb      	ldrb	r3, [r7, #3]
    a73c:	f003 0310 	and.w	r3, r3, #16
    a740:	2b00      	cmp	r3, #0
    a742:	d002      	beq.n	a74a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a744:	6878      	ldr	r0, [r7, #4]
    a746:	4b06      	ldr	r3, [pc, #24]	; (a760 <_usb_d_dev_trans_in_isr+0x90>)
    a748:	4798      	blx	r3
}
    a74a:	bf00      	nop
    a74c:	3708      	adds	r7, #8
    a74e:	46bd      	mov	sp, r7
    a750:	bd80      	pop	{r7, pc}
    a752:	bf00      	nop
    a754:	0000a475 	.word	0x0000a475
    a758:	0000a4b9 	.word	0x0000a4b9
    a75c:	00009ec1 	.word	0x00009ec1
    a760:	0000a39d 	.word	0x0000a39d

0000a764 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a764:	b580      	push	{r7, lr}
    a766:	b082      	sub	sp, #8
    a768:	af00      	add	r7, sp, #0
    a76a:	6078      	str	r0, [r7, #4]
    a76c:	460b      	mov	r3, r1
    a76e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a770:	78fb      	ldrb	r3, [r7, #3]
    a772:	f003 0320 	and.w	r3, r3, #32
    a776:	2b00      	cmp	r3, #0
    a778:	d004      	beq.n	a784 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a77a:	2100      	movs	r1, #0
    a77c:	6878      	ldr	r0, [r7, #4]
    a77e:	4b1a      	ldr	r3, [pc, #104]	; (a7e8 <_usb_d_dev_trans_out_isr+0x84>)
    a780:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a782:	e02c      	b.n	a7de <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a784:	78fb      	ldrb	r3, [r7, #3]
    a786:	f003 0304 	and.w	r3, r3, #4
    a78a:	2b00      	cmp	r3, #0
    a78c:	d004      	beq.n	a798 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a78e:	2100      	movs	r1, #0
    a790:	6878      	ldr	r0, [r7, #4]
    a792:	4b16      	ldr	r3, [pc, #88]	; (a7ec <_usb_d_dev_trans_out_isr+0x88>)
    a794:	4798      	blx	r3
}
    a796:	e022      	b.n	a7de <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a798:	78fb      	ldrb	r3, [r7, #3]
    a79a:	f003 0301 	and.w	r3, r3, #1
    a79e:	2b00      	cmp	r3, #0
    a7a0:	d004      	beq.n	a7ac <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a7a2:	2101      	movs	r1, #1
    a7a4:	6878      	ldr	r0, [r7, #4]
    a7a6:	4b12      	ldr	r3, [pc, #72]	; (a7f0 <_usb_d_dev_trans_out_isr+0x8c>)
    a7a8:	4798      	blx	r3
}
    a7aa:	e018      	b.n	a7de <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a7ac:	687b      	ldr	r3, [r7, #4]
    a7ae:	7cdb      	ldrb	r3, [r3, #19]
    a7b0:	f003 0307 	and.w	r3, r3, #7
    a7b4:	b2db      	uxtb	r3, r3
    a7b6:	2b01      	cmp	r3, #1
    a7b8:	d111      	bne.n	a7de <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a7ba:	78fb      	ldrb	r3, [r7, #3]
    a7bc:	f003 0308 	and.w	r3, r3, #8
    a7c0:	2b00      	cmp	r3, #0
    a7c2:	d004      	beq.n	a7ce <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a7c4:	2101      	movs	r1, #1
    a7c6:	6878      	ldr	r0, [r7, #4]
    a7c8:	4b08      	ldr	r3, [pc, #32]	; (a7ec <_usb_d_dev_trans_out_isr+0x88>)
    a7ca:	4798      	blx	r3
}
    a7cc:	e007      	b.n	a7de <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a7ce:	78fb      	ldrb	r3, [r7, #3]
    a7d0:	f003 0310 	and.w	r3, r3, #16
    a7d4:	2b00      	cmp	r3, #0
    a7d6:	d002      	beq.n	a7de <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a7d8:	6878      	ldr	r0, [r7, #4]
    a7da:	4b06      	ldr	r3, [pc, #24]	; (a7f4 <_usb_d_dev_trans_out_isr+0x90>)
    a7dc:	4798      	blx	r3
}
    a7de:	bf00      	nop
    a7e0:	3708      	adds	r7, #8
    a7e2:	46bd      	mov	sp, r7
    a7e4:	bd80      	pop	{r7, pc}
    a7e6:	bf00      	nop
    a7e8:	0000a475 	.word	0x0000a475
    a7ec:	0000a4b9 	.word	0x0000a4b9
    a7f0:	0000a0d9 	.word	0x0000a0d9
    a7f4:	0000a39d 	.word	0x0000a39d

0000a7f8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a7f8:	b580      	push	{r7, lr}
    a7fa:	b084      	sub	sp, #16
    a7fc:	af00      	add	r7, sp, #0
    a7fe:	6078      	str	r0, [r7, #4]
    a800:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a802:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a806:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a808:	683b      	ldr	r3, [r7, #0]
    a80a:	7c9b      	ldrb	r3, [r3, #18]
    a80c:	f003 030f 	and.w	r3, r3, #15
    a810:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a812:	7afb      	ldrb	r3, [r7, #11]
    a814:	2201      	movs	r2, #1
    a816:	409a      	lsls	r2, r3
    a818:	687b      	ldr	r3, [r7, #4]
    a81a:	4013      	ands	r3, r2
    a81c:	2b00      	cmp	r3, #0
    a81e:	d03d      	beq.n	a89c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a820:	7afb      	ldrb	r3, [r7, #11]
    a822:	68fa      	ldr	r2, [r7, #12]
    a824:	3308      	adds	r3, #8
    a826:	015b      	lsls	r3, r3, #5
    a828:	4413      	add	r3, r2
    a82a:	3307      	adds	r3, #7
    a82c:	781b      	ldrb	r3, [r3, #0]
    a82e:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a830:	7afb      	ldrb	r3, [r7, #11]
    a832:	68fa      	ldr	r2, [r7, #12]
    a834:	015b      	lsls	r3, r3, #5
    a836:	4413      	add	r3, r2
    a838:	f203 1309 	addw	r3, r3, #265	; 0x109
    a83c:	781b      	ldrb	r3, [r3, #0]
    a83e:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a840:	7aba      	ldrb	r2, [r7, #10]
    a842:	7a7b      	ldrb	r3, [r7, #9]
    a844:	4013      	ands	r3, r2
    a846:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a848:	7abb      	ldrb	r3, [r7, #10]
    a84a:	2b00      	cmp	r3, #0
    a84c:	d027      	beq.n	a89e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a84e:	683b      	ldr	r3, [r7, #0]
    a850:	7cdb      	ldrb	r3, [r3, #19]
    a852:	f003 0307 	and.w	r3, r3, #7
    a856:	b2db      	uxtb	r3, r3
    a858:	2b01      	cmp	r3, #1
    a85a:	d10c      	bne.n	a876 <_usb_d_dev_handle_eps+0x7e>
    a85c:	683b      	ldr	r3, [r7, #0]
    a85e:	7cdb      	ldrb	r3, [r3, #19]
    a860:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a864:	b2db      	uxtb	r3, r3
    a866:	2b00      	cmp	r3, #0
    a868:	d105      	bne.n	a876 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a86a:	7abb      	ldrb	r3, [r7, #10]
    a86c:	4619      	mov	r1, r3
    a86e:	6838      	ldr	r0, [r7, #0]
    a870:	4b0c      	ldr	r3, [pc, #48]	; (a8a4 <_usb_d_dev_handle_eps+0xac>)
    a872:	4798      	blx	r3
    a874:	e013      	b.n	a89e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a876:	683b      	ldr	r3, [r7, #0]
    a878:	7cdb      	ldrb	r3, [r3, #19]
    a87a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a87e:	b2db      	uxtb	r3, r3
    a880:	2b00      	cmp	r3, #0
    a882:	d005      	beq.n	a890 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a884:	7abb      	ldrb	r3, [r7, #10]
    a886:	4619      	mov	r1, r3
    a888:	6838      	ldr	r0, [r7, #0]
    a88a:	4b07      	ldr	r3, [pc, #28]	; (a8a8 <_usb_d_dev_handle_eps+0xb0>)
    a88c:	4798      	blx	r3
    a88e:	e006      	b.n	a89e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a890:	7abb      	ldrb	r3, [r7, #10]
    a892:	4619      	mov	r1, r3
    a894:	6838      	ldr	r0, [r7, #0]
    a896:	4b05      	ldr	r3, [pc, #20]	; (a8ac <_usb_d_dev_handle_eps+0xb4>)
    a898:	4798      	blx	r3
    a89a:	e000      	b.n	a89e <_usb_d_dev_handle_eps+0xa6>
		return;
    a89c:	bf00      	nop
		}
	}
}
    a89e:	3710      	adds	r7, #16
    a8a0:	46bd      	mov	sp, r7
    a8a2:	bd80      	pop	{r7, pc}
    a8a4:	0000a67d 	.word	0x0000a67d
    a8a8:	0000a6d1 	.word	0x0000a6d1
    a8ac:	0000a765 	.word	0x0000a765

0000a8b0 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a8b0:	b580      	push	{r7, lr}
    a8b2:	b084      	sub	sp, #16
    a8b4:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a8b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a8ba:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a8bc:	68bb      	ldr	r3, [r7, #8]
    a8be:	8c1b      	ldrh	r3, [r3, #32]
    a8c0:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a8c2:	88fb      	ldrh	r3, [r7, #6]
    a8c4:	2b00      	cmp	r3, #0
    a8c6:	d104      	bne.n	a8d2 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a8c8:	4b13      	ldr	r3, [pc, #76]	; (a918 <_usb_d_dev_handler+0x68>)
    a8ca:	4798      	blx	r3
    a8cc:	4603      	mov	r3, r0
    a8ce:	2b00      	cmp	r3, #0
    a8d0:	d11e      	bne.n	a910 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a8d2:	2300      	movs	r3, #0
    a8d4:	73fb      	strb	r3, [r7, #15]
    a8d6:	e017      	b.n	a908 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a8d8:	7bfa      	ldrb	r2, [r7, #15]
    a8da:	4613      	mov	r3, r2
    a8dc:	009b      	lsls	r3, r3, #2
    a8de:	4413      	add	r3, r2
    a8e0:	009b      	lsls	r3, r3, #2
    a8e2:	3310      	adds	r3, #16
    a8e4:	4a0d      	ldr	r2, [pc, #52]	; (a91c <_usb_d_dev_handler+0x6c>)
    a8e6:	4413      	add	r3, r2
    a8e8:	3304      	adds	r3, #4
    a8ea:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a8ec:	683b      	ldr	r3, [r7, #0]
    a8ee:	7c9b      	ldrb	r3, [r3, #18]
    a8f0:	2bff      	cmp	r3, #255	; 0xff
    a8f2:	d005      	beq.n	a900 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a8f4:	88fb      	ldrh	r3, [r7, #6]
    a8f6:	6839      	ldr	r1, [r7, #0]
    a8f8:	4618      	mov	r0, r3
    a8fa:	4b09      	ldr	r3, [pc, #36]	; (a920 <_usb_d_dev_handler+0x70>)
    a8fc:	4798      	blx	r3
    a8fe:	e000      	b.n	a902 <_usb_d_dev_handler+0x52>
			continue;
    a900:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a902:	7bfb      	ldrb	r3, [r7, #15]
    a904:	3301      	adds	r3, #1
    a906:	73fb      	strb	r3, [r7, #15]
    a908:	7bfb      	ldrb	r3, [r7, #15]
    a90a:	2b08      	cmp	r3, #8
    a90c:	d9e4      	bls.n	a8d8 <_usb_d_dev_handler+0x28>
    a90e:	e000      	b.n	a912 <_usb_d_dev_handler+0x62>
			return;
    a910:	bf00      	nop
	}
}
    a912:	3710      	adds	r7, #16
    a914:	46bd      	mov	sp, r7
    a916:	bd80      	pop	{r7, pc}
    a918:	00009e09 	.word	0x00009e09
    a91c:	20000f3c 	.word	0x20000f3c
    a920:	0000a7f9 	.word	0x0000a7f9

0000a924 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a924:	b580      	push	{r7, lr}
    a926:	b082      	sub	sp, #8
    a928:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a92a:	2300      	movs	r3, #0
    a92c:	71fb      	strb	r3, [r7, #7]
    a92e:	e023      	b.n	a978 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a930:	79fa      	ldrb	r2, [r7, #7]
    a932:	4613      	mov	r3, r2
    a934:	009b      	lsls	r3, r3, #2
    a936:	4413      	add	r3, r2
    a938:	009b      	lsls	r3, r3, #2
    a93a:	3310      	adds	r3, #16
    a93c:	4a14      	ldr	r2, [pc, #80]	; (a990 <_usb_d_dev_reset_epts+0x6c>)
    a93e:	4413      	add	r3, r2
    a940:	3304      	adds	r3, #4
    a942:	2103      	movs	r1, #3
    a944:	4618      	mov	r0, r3
    a946:	4b13      	ldr	r3, [pc, #76]	; (a994 <_usb_d_dev_reset_epts+0x70>)
    a948:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a94a:	79fa      	ldrb	r2, [r7, #7]
    a94c:	4910      	ldr	r1, [pc, #64]	; (a990 <_usb_d_dev_reset_epts+0x6c>)
    a94e:	4613      	mov	r3, r2
    a950:	009b      	lsls	r3, r3, #2
    a952:	4413      	add	r3, r2
    a954:	009b      	lsls	r3, r3, #2
    a956:	440b      	add	r3, r1
    a958:	3326      	adds	r3, #38	; 0x26
    a95a:	22ff      	movs	r2, #255	; 0xff
    a95c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a95e:	79fa      	ldrb	r2, [r7, #7]
    a960:	490b      	ldr	r1, [pc, #44]	; (a990 <_usb_d_dev_reset_epts+0x6c>)
    a962:	4613      	mov	r3, r2
    a964:	009b      	lsls	r3, r3, #2
    a966:	4413      	add	r3, r2
    a968:	009b      	lsls	r3, r3, #2
    a96a:	440b      	add	r3, r1
    a96c:	3327      	adds	r3, #39	; 0x27
    a96e:	2200      	movs	r2, #0
    a970:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a972:	79fb      	ldrb	r3, [r7, #7]
    a974:	3301      	adds	r3, #1
    a976:	71fb      	strb	r3, [r7, #7]
    a978:	79fb      	ldrb	r3, [r7, #7]
    a97a:	2b08      	cmp	r3, #8
    a97c:	d9d8      	bls.n	a930 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a97e:	22a0      	movs	r2, #160	; 0xa0
    a980:	2100      	movs	r1, #0
    a982:	4805      	ldr	r0, [pc, #20]	; (a998 <_usb_d_dev_reset_epts+0x74>)
    a984:	4b05      	ldr	r3, [pc, #20]	; (a99c <_usb_d_dev_reset_epts+0x78>)
    a986:	4798      	blx	r3
}
    a988:	bf00      	nop
    a98a:	3708      	adds	r7, #8
    a98c:	46bd      	mov	sp, r7
    a98e:	bd80      	pop	{r7, pc}
    a990:	20000f3c 	.word	0x20000f3c
    a994:	0000b1e9 	.word	0x0000b1e9
    a998:	20001004 	.word	0x20001004
    a99c:	00013b59 	.word	0x00013b59

0000a9a0 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a9a0:	b580      	push	{r7, lr}
    a9a2:	b084      	sub	sp, #16
    a9a4:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a9a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a9aa:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a9ac:	2301      	movs	r3, #1
    a9ae:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a9b0:	2304      	movs	r3, #4
    a9b2:	713b      	strb	r3, [r7, #4]
    a9b4:	2300      	movs	r3, #0
    a9b6:	717b      	strb	r3, [r7, #5]
    a9b8:	2300      	movs	r3, #0
    a9ba:	71bb      	strb	r3, [r7, #6]
    a9bc:	2300      	movs	r3, #0
    a9be:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a9c0:	2101      	movs	r1, #1
    a9c2:	68f8      	ldr	r0, [r7, #12]
    a9c4:	4b26      	ldr	r3, [pc, #152]	; (aa60 <_usb_d_dev_init+0xc0>)
    a9c6:	4798      	blx	r3
    a9c8:	4603      	mov	r3, r0
    a9ca:	f083 0301 	eor.w	r3, r3, #1
    a9ce:	b2db      	uxtb	r3, r3
    a9d0:	2b00      	cmp	r3, #0
    a9d2:	d011      	beq.n	a9f8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a9d4:	2102      	movs	r1, #2
    a9d6:	68f8      	ldr	r0, [r7, #12]
    a9d8:	4b22      	ldr	r3, [pc, #136]	; (aa64 <_usb_d_dev_init+0xc4>)
    a9da:	4798      	blx	r3
    a9dc:	4603      	mov	r3, r0
    a9de:	2b00      	cmp	r3, #0
    a9e0:	d006      	beq.n	a9f0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a9e2:	68f8      	ldr	r0, [r7, #12]
    a9e4:	4b20      	ldr	r3, [pc, #128]	; (aa68 <_usb_d_dev_init+0xc8>)
    a9e6:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a9e8:	2102      	movs	r1, #2
    a9ea:	68f8      	ldr	r0, [r7, #12]
    a9ec:	4b1f      	ldr	r3, [pc, #124]	; (aa6c <_usb_d_dev_init+0xcc>)
    a9ee:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a9f0:	2101      	movs	r1, #1
    a9f2:	68f8      	ldr	r0, [r7, #12]
    a9f4:	4b1e      	ldr	r3, [pc, #120]	; (aa70 <_usb_d_dev_init+0xd0>)
    a9f6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a9f8:	2101      	movs	r1, #1
    a9fa:	68f8      	ldr	r0, [r7, #12]
    a9fc:	4b1b      	ldr	r3, [pc, #108]	; (aa6c <_usb_d_dev_init+0xcc>)
    a9fe:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    aa00:	4b1c      	ldr	r3, [pc, #112]	; (aa74 <_usb_d_dev_init+0xd4>)
    aa02:	4a1d      	ldr	r2, [pc, #116]	; (aa78 <_usb_d_dev_init+0xd8>)
    aa04:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    aa06:	4b1b      	ldr	r3, [pc, #108]	; (aa74 <_usb_d_dev_init+0xd4>)
    aa08:	4a1b      	ldr	r2, [pc, #108]	; (aa78 <_usb_d_dev_init+0xd8>)
    aa0a:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    aa0c:	4b19      	ldr	r3, [pc, #100]	; (aa74 <_usb_d_dev_init+0xd4>)
    aa0e:	4a1a      	ldr	r2, [pc, #104]	; (aa78 <_usb_d_dev_init+0xd8>)
    aa10:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    aa12:	4b18      	ldr	r3, [pc, #96]	; (aa74 <_usb_d_dev_init+0xd4>)
    aa14:	4a18      	ldr	r2, [pc, #96]	; (aa78 <_usb_d_dev_init+0xd8>)
    aa16:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    aa18:	4b16      	ldr	r3, [pc, #88]	; (aa74 <_usb_d_dev_init+0xd4>)
    aa1a:	4a17      	ldr	r2, [pc, #92]	; (aa78 <_usb_d_dev_init+0xd8>)
    aa1c:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    aa1e:	4b17      	ldr	r3, [pc, #92]	; (aa7c <_usb_d_dev_init+0xdc>)
    aa20:	4798      	blx	r3

	_usb_load_calib();
    aa22:	4b17      	ldr	r3, [pc, #92]	; (aa80 <_usb_d_dev_init+0xe0>)
    aa24:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    aa26:	2104      	movs	r1, #4
    aa28:	68f8      	ldr	r0, [r7, #12]
    aa2a:	4b11      	ldr	r3, [pc, #68]	; (aa70 <_usb_d_dev_init+0xd0>)
    aa2c:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    aa2e:	4b15      	ldr	r3, [pc, #84]	; (aa84 <_usb_d_dev_init+0xe4>)
    aa30:	4619      	mov	r1, r3
    aa32:	68f8      	ldr	r0, [r7, #12]
    aa34:	4b14      	ldr	r3, [pc, #80]	; (aa88 <_usb_d_dev_init+0xe8>)
    aa36:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    aa38:	7afb      	ldrb	r3, [r7, #11]
    aa3a:	f107 0210 	add.w	r2, r7, #16
    aa3e:	4413      	add	r3, r2
    aa40:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    aa44:	f043 0301 	orr.w	r3, r3, #1
    aa48:	b2db      	uxtb	r3, r3
    aa4a:	b29b      	uxth	r3, r3
    aa4c:	4619      	mov	r1, r3
    aa4e:	68f8      	ldr	r0, [r7, #12]
    aa50:	4b0e      	ldr	r3, [pc, #56]	; (aa8c <_usb_d_dev_init+0xec>)
    aa52:	4798      	blx	r3

	return ERR_NONE;
    aa54:	2300      	movs	r3, #0
}
    aa56:	4618      	mov	r0, r3
    aa58:	3710      	adds	r7, #16
    aa5a:	46bd      	mov	sp, r7
    aa5c:	bd80      	pop	{r7, pc}
    aa5e:	bf00      	nop
    aa60:	00009039 	.word	0x00009039
    aa64:	00009389 	.word	0x00009389
    aa68:	0000935d 	.word	0x0000935d
    aa6c:	0000900f 	.word	0x0000900f
    aa70:	000093b9 	.word	0x000093b9
    aa74:	20000f3c 	.word	0x20000f3c
    aa78:	00009481 	.word	0x00009481
    aa7c:	0000a925 	.word	0x0000a925
    aa80:	00009499 	.word	0x00009499
    aa84:	20001004 	.word	0x20001004
    aa88:	00009465 	.word	0x00009465
    aa8c:	00009429 	.word	0x00009429

0000aa90 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    aa90:	b580      	push	{r7, lr}
    aa92:	b082      	sub	sp, #8
    aa94:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    aa96:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa9a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    aa9c:	2103      	movs	r1, #3
    aa9e:	6878      	ldr	r0, [r7, #4]
    aaa0:	4b17      	ldr	r3, [pc, #92]	; (ab00 <_usb_d_dev_enable+0x70>)
    aaa2:	4798      	blx	r3
    aaa4:	4603      	mov	r3, r0
    aaa6:	2b00      	cmp	r3, #0
    aaa8:	d002      	beq.n	aab0 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    aaaa:	f06f 0310 	mvn.w	r3, #16
    aaae:	e023      	b.n	aaf8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    aab0:	6878      	ldr	r0, [r7, #4]
    aab2:	4b14      	ldr	r3, [pc, #80]	; (ab04 <_usb_d_dev_enable+0x74>)
    aab4:	4798      	blx	r3
    aab6:	4603      	mov	r3, r0
    aab8:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    aaba:	78fb      	ldrb	r3, [r7, #3]
    aabc:	f003 0302 	and.w	r3, r3, #2
    aac0:	2b00      	cmp	r3, #0
    aac2:	d107      	bne.n	aad4 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    aac4:	78fb      	ldrb	r3, [r7, #3]
    aac6:	f043 0302 	orr.w	r3, r3, #2
    aaca:	b2db      	uxtb	r3, r3
    aacc:	4619      	mov	r1, r3
    aace:	6878      	ldr	r0, [r7, #4]
    aad0:	4b0d      	ldr	r3, [pc, #52]	; (ab08 <_usb_d_dev_enable+0x78>)
    aad2:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    aad4:	2050      	movs	r0, #80	; 0x50
    aad6:	4b0d      	ldr	r3, [pc, #52]	; (ab0c <_usb_d_dev_enable+0x7c>)
    aad8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    aada:	2051      	movs	r0, #81	; 0x51
    aadc:	4b0b      	ldr	r3, [pc, #44]	; (ab0c <_usb_d_dev_enable+0x7c>)
    aade:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    aae0:	2052      	movs	r0, #82	; 0x52
    aae2:	4b0a      	ldr	r3, [pc, #40]	; (ab0c <_usb_d_dev_enable+0x7c>)
    aae4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    aae6:	2053      	movs	r0, #83	; 0x53
    aae8:	4b08      	ldr	r3, [pc, #32]	; (ab0c <_usb_d_dev_enable+0x7c>)
    aaea:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    aaec:	f240 218d 	movw	r1, #653	; 0x28d
    aaf0:	6878      	ldr	r0, [r7, #4]
    aaf2:	4b07      	ldr	r3, [pc, #28]	; (ab10 <_usb_d_dev_enable+0x80>)
    aaf4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    aaf6:	2300      	movs	r3, #0
}
    aaf8:	4618      	mov	r0, r3
    aafa:	3708      	adds	r7, #8
    aafc:	46bd      	mov	sp, r7
    aafe:	bd80      	pop	{r7, pc}
    ab00:	00009333 	.word	0x00009333
    ab04:	000093e1 	.word	0x000093e1
    ab08:	000093b9 	.word	0x000093b9
    ab0c:	00008f45 	.word	0x00008f45
    ab10:	000092dd 	.word	0x000092dd

0000ab14 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    ab14:	b580      	push	{r7, lr}
    ab16:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    ab18:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ab1c:	4b01      	ldr	r3, [pc, #4]	; (ab24 <_usb_d_dev_attach+0x10>)
    ab1e:	4798      	blx	r3
}
    ab20:	bf00      	nop
    ab22:	bd80      	pop	{r7, pc}
    ab24:	00009405 	.word	0x00009405

0000ab28 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    ab28:	b580      	push	{r7, lr}
    ab2a:	b082      	sub	sp, #8
    ab2c:	af00      	add	r7, sp, #0
    ab2e:	4603      	mov	r3, r0
    ab30:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    ab32:	79fb      	ldrb	r3, [r7, #7]
    ab34:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ab38:	b2db      	uxtb	r3, r3
    ab3a:	4619      	mov	r1, r3
    ab3c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ab40:	4b02      	ldr	r3, [pc, #8]	; (ab4c <_usb_d_dev_set_address+0x24>)
    ab42:	4798      	blx	r3
}
    ab44:	bf00      	nop
    ab46:	3708      	adds	r7, #8
    ab48:	46bd      	mov	sp, r7
    ab4a:	bd80      	pop	{r7, pc}
    ab4c:	00009447 	.word	0x00009447

0000ab50 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    ab50:	b590      	push	{r4, r7, lr}
    ab52:	b085      	sub	sp, #20
    ab54:	af00      	add	r7, sp, #0
    ab56:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    ab58:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ab5c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ab5e:	687b      	ldr	r3, [r7, #4]
    ab60:	7c9b      	ldrb	r3, [r3, #18]
    ab62:	f003 030f 	and.w	r3, r3, #15
    ab66:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ab68:	687b      	ldr	r3, [r7, #4]
    ab6a:	68db      	ldr	r3, [r3, #12]
    ab6c:	461a      	mov	r2, r3
    ab6e:	7afb      	ldrb	r3, [r7, #11]
    ab70:	2100      	movs	r1, #0
    ab72:	4618      	mov	r0, r3
    ab74:	4b0f      	ldr	r3, [pc, #60]	; (abb4 <_usb_d_dev_trans_setup+0x64>)
    ab76:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    ab78:	687b      	ldr	r3, [r7, #4]
    ab7a:	8a1b      	ldrh	r3, [r3, #16]
    ab7c:	461a      	mov	r2, r3
    ab7e:	7af8      	ldrb	r0, [r7, #11]
    ab80:	2300      	movs	r3, #0
    ab82:	2100      	movs	r1, #0
    ab84:	4c0c      	ldr	r4, [pc, #48]	; (abb8 <_usb_d_dev_trans_setup+0x68>)
    ab86:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    ab88:	7afb      	ldrb	r3, [r7, #11]
    ab8a:	22b0      	movs	r2, #176	; 0xb0
    ab8c:	4619      	mov	r1, r3
    ab8e:	68f8      	ldr	r0, [r7, #12]
    ab90:	4b0a      	ldr	r3, [pc, #40]	; (abbc <_usb_d_dev_trans_setup+0x6c>)
    ab92:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    ab94:	7afb      	ldrb	r3, [r7, #11]
    ab96:	2200      	movs	r2, #0
    ab98:	2100      	movs	r1, #0
    ab9a:	4618      	mov	r0, r3
    ab9c:	4b08      	ldr	r3, [pc, #32]	; (abc0 <_usb_d_dev_trans_setup+0x70>)
    ab9e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    aba0:	7afb      	ldrb	r3, [r7, #11]
    aba2:	2210      	movs	r2, #16
    aba4:	4619      	mov	r1, r3
    aba6:	68f8      	ldr	r0, [r7, #12]
    aba8:	4b06      	ldr	r3, [pc, #24]	; (abc4 <_usb_d_dev_trans_setup+0x74>)
    abaa:	4798      	blx	r3
}
    abac:	bf00      	nop
    abae:	3714      	adds	r7, #20
    abb0:	46bd      	mov	sp, r7
    abb2:	bd90      	pop	{r4, r7, pc}
    abb4:	000098e5 	.word	0x000098e5
    abb8:	00009a6d 	.word	0x00009a6d
    abbc:	00009145 	.word	0x00009145
    abc0:	00009b3d 	.word	0x00009b3d
    abc4:	00009199 	.word	0x00009199

0000abc8 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    abc8:	b580      	push	{r7, lr}
    abca:	b088      	sub	sp, #32
    abcc:	af00      	add	r7, sp, #0
    abce:	4603      	mov	r3, r0
    abd0:	71fb      	strb	r3, [r7, #7]
    abd2:	460b      	mov	r3, r1
    abd4:	71bb      	strb	r3, [r7, #6]
    abd6:	4613      	mov	r3, r2
    abd8:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    abda:	79fb      	ldrb	r3, [r7, #7]
    abdc:	f003 030f 	and.w	r3, r3, #15
    abe0:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    abe2:	79fb      	ldrb	r3, [r7, #7]
    abe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    abe8:	2b00      	cmp	r3, #0
    abea:	bf14      	ite	ne
    abec:	2301      	movne	r3, #1
    abee:	2300      	moveq	r3, #0
    abf0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    abf2:	7fba      	ldrb	r2, [r7, #30]
    abf4:	7ffb      	ldrb	r3, [r7, #31]
    abf6:	4611      	mov	r1, r2
    abf8:	4618      	mov	r0, r3
    abfa:	4b3e      	ldr	r3, [pc, #248]	; (acf4 <_usb_d_dev_ep_init+0x12c>)
    abfc:	4798      	blx	r3
    abfe:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    ac00:	79bb      	ldrb	r3, [r7, #6]
    ac02:	f003 0303 	and.w	r3, r3, #3
    ac06:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    ac08:	7ffa      	ldrb	r2, [r7, #31]
    ac0a:	4613      	mov	r3, r2
    ac0c:	005b      	lsls	r3, r3, #1
    ac0e:	4413      	add	r3, r2
    ac10:	009b      	lsls	r3, r3, #2
    ac12:	4a39      	ldr	r2, [pc, #228]	; (acf8 <_usb_d_dev_ep_init+0x130>)
    ac14:	4413      	add	r3, r2
    ac16:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    ac18:	7ffb      	ldrb	r3, [r7, #31]
    ac1a:	2b04      	cmp	r3, #4
    ac1c:	d902      	bls.n	ac24 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    ac1e:	f06f 0311 	mvn.w	r3, #17
    ac22:	e063      	b.n	acec <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    ac24:	69bb      	ldr	r3, [r7, #24]
    ac26:	7c9b      	ldrb	r3, [r3, #18]
    ac28:	2bff      	cmp	r3, #255	; 0xff
    ac2a:	d002      	beq.n	ac32 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    ac2c:	f06f 0313 	mvn.w	r3, #19
    ac30:	e05c      	b.n	acec <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    ac32:	7dfb      	ldrb	r3, [r7, #23]
    ac34:	2b00      	cmp	r3, #0
    ac36:	d11f      	bne.n	ac78 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    ac38:	7fbb      	ldrb	r3, [r7, #30]
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	bf14      	ite	ne
    ac3e:	2301      	movne	r3, #1
    ac40:	2300      	moveq	r3, #0
    ac42:	b2db      	uxtb	r3, r3
    ac44:	f083 0301 	eor.w	r3, r3, #1
    ac48:	b2db      	uxtb	r3, r3
    ac4a:	f003 0301 	and.w	r3, r3, #1
    ac4e:	b2da      	uxtb	r2, r3
    ac50:	7ffb      	ldrb	r3, [r7, #31]
    ac52:	4611      	mov	r1, r2
    ac54:	4618      	mov	r0, r3
    ac56:	4b27      	ldr	r3, [pc, #156]	; (acf4 <_usb_d_dev_ep_init+0x12c>)
    ac58:	4798      	blx	r3
    ac5a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    ac5c:	68fb      	ldr	r3, [r7, #12]
    ac5e:	7c9b      	ldrb	r3, [r3, #18]
    ac60:	2bff      	cmp	r3, #255	; 0xff
    ac62:	d002      	beq.n	ac6a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    ac64:	f06f 0313 	mvn.w	r3, #19
    ac68:	e040      	b.n	acec <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    ac6a:	693b      	ldr	r3, [r7, #16]
    ac6c:	681b      	ldr	r3, [r3, #0]
    ac6e:	2b00      	cmp	r3, #0
    ac70:	d102      	bne.n	ac78 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    ac72:	f06f 0312 	mvn.w	r3, #18
    ac76:	e039      	b.n	acec <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    ac78:	7fbb      	ldrb	r3, [r7, #30]
    ac7a:	2b00      	cmp	r3, #0
    ac7c:	d007      	beq.n	ac8e <_usb_d_dev_ep_init+0xc6>
    ac7e:	693b      	ldr	r3, [r7, #16]
    ac80:	685b      	ldr	r3, [r3, #4]
    ac82:	2b00      	cmp	r3, #0
    ac84:	bf14      	ite	ne
    ac86:	2301      	movne	r3, #1
    ac88:	2300      	moveq	r3, #0
    ac8a:	b2db      	uxtb	r3, r3
    ac8c:	e006      	b.n	ac9c <_usb_d_dev_ep_init+0xd4>
    ac8e:	693b      	ldr	r3, [r7, #16]
    ac90:	681b      	ldr	r3, [r3, #0]
    ac92:	2b00      	cmp	r3, #0
    ac94:	bf14      	ite	ne
    ac96:	2301      	movne	r3, #1
    ac98:	2300      	moveq	r3, #0
    ac9a:	b2db      	uxtb	r3, r3
    ac9c:	2b00      	cmp	r3, #0
    ac9e:	d00f      	beq.n	acc0 <_usb_d_dev_ep_init+0xf8>
    aca0:	7fbb      	ldrb	r3, [r7, #30]
    aca2:	2b00      	cmp	r3, #0
    aca4:	d003      	beq.n	acae <_usb_d_dev_ep_init+0xe6>
    aca6:	693b      	ldr	r3, [r7, #16]
    aca8:	895b      	ldrh	r3, [r3, #10]
    acaa:	461a      	mov	r2, r3
    acac:	e002      	b.n	acb4 <_usb_d_dev_ep_init+0xec>
    acae:	693b      	ldr	r3, [r7, #16]
    acb0:	891b      	ldrh	r3, [r3, #8]
    acb2:	461a      	mov	r2, r3
    acb4:	88bb      	ldrh	r3, [r7, #4]
    acb6:	429a      	cmp	r2, r3
    acb8:	da02      	bge.n	acc0 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    acba:	f06f 0312 	mvn.w	r3, #18
    acbe:	e015      	b.n	acec <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    acc0:	7fbb      	ldrb	r3, [r7, #30]
    acc2:	2b00      	cmp	r3, #0
    acc4:	d002      	beq.n	accc <_usb_d_dev_ep_init+0x104>
    acc6:	693b      	ldr	r3, [r7, #16]
    acc8:	685b      	ldr	r3, [r3, #4]
    acca:	e001      	b.n	acd0 <_usb_d_dev_ep_init+0x108>
    accc:	693b      	ldr	r3, [r7, #16]
    acce:	681b      	ldr	r3, [r3, #0]
    acd0:	69ba      	ldr	r2, [r7, #24]
    acd2:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    acd4:	69bb      	ldr	r3, [r7, #24]
    acd6:	88ba      	ldrh	r2, [r7, #4]
    acd8:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    acda:	7dfb      	ldrb	r3, [r7, #23]
    acdc:	3301      	adds	r3, #1
    acde:	b2da      	uxtb	r2, r3
    ace0:	69bb      	ldr	r3, [r7, #24]
    ace2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    ace4:	69bb      	ldr	r3, [r7, #24]
    ace6:	79fa      	ldrb	r2, [r7, #7]
    ace8:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    acea:	2300      	movs	r3, #0
}
    acec:	4618      	mov	r0, r3
    acee:	3720      	adds	r7, #32
    acf0:	46bd      	mov	sp, r7
    acf2:	bd80      	pop	{r7, pc}
    acf4:	00009bf9 	.word	0x00009bf9
    acf8:	00014174 	.word	0x00014174

0000acfc <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    acfc:	b580      	push	{r7, lr}
    acfe:	b086      	sub	sp, #24
    ad00:	af00      	add	r7, sp, #0
    ad02:	4603      	mov	r3, r0
    ad04:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    ad06:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ad0a:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    ad0c:	79fb      	ldrb	r3, [r7, #7]
    ad0e:	f003 030f 	and.w	r3, r3, #15
    ad12:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ad14:	79fb      	ldrb	r3, [r7, #7]
    ad16:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad1a:	2b00      	cmp	r3, #0
    ad1c:	bf14      	ite	ne
    ad1e:	2301      	movne	r3, #1
    ad20:	2300      	moveq	r3, #0
    ad22:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ad24:	7cba      	ldrb	r2, [r7, #18]
    ad26:	7cfb      	ldrb	r3, [r7, #19]
    ad28:	4611      	mov	r1, r2
    ad2a:	4618      	mov	r0, r3
    ad2c:	4b2a      	ldr	r3, [pc, #168]	; (add8 <_usb_d_dev_ep_deinit+0xdc>)
    ad2e:	4798      	blx	r3
    ad30:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ad32:	7cfb      	ldrb	r3, [r7, #19]
    ad34:	2b04      	cmp	r3, #4
    ad36:	d84a      	bhi.n	adce <_usb_d_dev_ep_deinit+0xd2>
    ad38:	68fb      	ldr	r3, [r7, #12]
    ad3a:	7c9b      	ldrb	r3, [r3, #18]
    ad3c:	2bff      	cmp	r3, #255	; 0xff
    ad3e:	d046      	beq.n	adce <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    ad40:	7cbb      	ldrb	r3, [r7, #18]
    ad42:	2203      	movs	r2, #3
    ad44:	4619      	mov	r1, r3
    ad46:	68f8      	ldr	r0, [r7, #12]
    ad48:	4b24      	ldr	r3, [pc, #144]	; (addc <_usb_d_dev_ep_deinit+0xe0>)
    ad4a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ad4c:	68fb      	ldr	r3, [r7, #12]
    ad4e:	7cdb      	ldrb	r3, [r3, #19]
    ad50:	f003 0307 	and.w	r3, r3, #7
    ad54:	b2db      	uxtb	r3, r3
    ad56:	2b01      	cmp	r3, #1
    ad58:	d107      	bne.n	ad6a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    ad5a:	79fb      	ldrb	r3, [r7, #7]
    ad5c:	697a      	ldr	r2, [r7, #20]
    ad5e:	3308      	adds	r3, #8
    ad60:	015b      	lsls	r3, r3, #5
    ad62:	4413      	add	r3, r2
    ad64:	2200      	movs	r2, #0
    ad66:	701a      	strb	r2, [r3, #0]
    ad68:	e02a      	b.n	adc0 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    ad6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ad6e:	2b00      	cmp	r3, #0
    ad70:	da15      	bge.n	ad9e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    ad72:	79fb      	ldrb	r3, [r7, #7]
    ad74:	f003 030f 	and.w	r3, r3, #15
    ad78:	79fa      	ldrb	r2, [r7, #7]
    ad7a:	f002 020f 	and.w	r2, r2, #15
    ad7e:	6979      	ldr	r1, [r7, #20]
    ad80:	3208      	adds	r2, #8
    ad82:	0152      	lsls	r2, r2, #5
    ad84:	440a      	add	r2, r1
    ad86:	7812      	ldrb	r2, [r2, #0]
    ad88:	b2d2      	uxtb	r2, r2
    ad8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    ad8e:	b2d1      	uxtb	r1, r2
    ad90:	697a      	ldr	r2, [r7, #20]
    ad92:	3308      	adds	r3, #8
    ad94:	015b      	lsls	r3, r3, #5
    ad96:	4413      	add	r3, r2
    ad98:	460a      	mov	r2, r1
    ad9a:	701a      	strb	r2, [r3, #0]
    ad9c:	e010      	b.n	adc0 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    ad9e:	79fb      	ldrb	r3, [r7, #7]
    ada0:	79fa      	ldrb	r2, [r7, #7]
    ada2:	6979      	ldr	r1, [r7, #20]
    ada4:	3208      	adds	r2, #8
    ada6:	0152      	lsls	r2, r2, #5
    ada8:	440a      	add	r2, r1
    adaa:	7812      	ldrb	r2, [r2, #0]
    adac:	b2d2      	uxtb	r2, r2
    adae:	f022 0207 	bic.w	r2, r2, #7
    adb2:	b2d1      	uxtb	r1, r2
    adb4:	697a      	ldr	r2, [r7, #20]
    adb6:	3308      	adds	r3, #8
    adb8:	015b      	lsls	r3, r3, #5
    adba:	4413      	add	r3, r2
    adbc:	460a      	mov	r2, r1
    adbe:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    adc0:	68fb      	ldr	r3, [r7, #12]
    adc2:	2200      	movs	r2, #0
    adc4:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    adc6:	68fb      	ldr	r3, [r7, #12]
    adc8:	22ff      	movs	r2, #255	; 0xff
    adca:	749a      	strb	r2, [r3, #18]
    adcc:	e000      	b.n	add0 <_usb_d_dev_ep_deinit+0xd4>
		return;
    adce:	bf00      	nop
}
    add0:	3718      	adds	r7, #24
    add2:	46bd      	mov	sp, r7
    add4:	bd80      	pop	{r7, pc}
    add6:	bf00      	nop
    add8:	00009bf9 	.word	0x00009bf9
    addc:	0000b231 	.word	0x0000b231

0000ade0 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    ade0:	b5b0      	push	{r4, r5, r7, lr}
    ade2:	b088      	sub	sp, #32
    ade4:	af00      	add	r7, sp, #0
    ade6:	4603      	mov	r3, r0
    ade8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    adea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    adee:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    adf0:	79fb      	ldrb	r3, [r7, #7]
    adf2:	f003 030f 	and.w	r3, r3, #15
    adf6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    adf8:	79fb      	ldrb	r3, [r7, #7]
    adfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    adfe:	2b00      	cmp	r3, #0
    ae00:	bf14      	ite	ne
    ae02:	2301      	movne	r3, #1
    ae04:	2300      	moveq	r3, #0
    ae06:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    ae08:	7eba      	ldrb	r2, [r7, #26]
    ae0a:	7efb      	ldrb	r3, [r7, #27]
    ae0c:	4611      	mov	r1, r2
    ae0e:	4618      	mov	r0, r3
    ae10:	4b70      	ldr	r3, [pc, #448]	; (afd4 <_usb_d_dev_ep_enable+0x1f4>)
    ae12:	4798      	blx	r3
    ae14:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    ae16:	7efb      	ldrb	r3, [r7, #27]
    ae18:	4619      	mov	r1, r3
    ae1a:	69f8      	ldr	r0, [r7, #28]
    ae1c:	4b6e      	ldr	r3, [pc, #440]	; (afd8 <_usb_d_dev_ep_enable+0x1f8>)
    ae1e:	4798      	blx	r3
    ae20:	4603      	mov	r3, r0
    ae22:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ae24:	7efb      	ldrb	r3, [r7, #27]
    ae26:	2b04      	cmp	r3, #4
    ae28:	d803      	bhi.n	ae32 <_usb_d_dev_ep_enable+0x52>
    ae2a:	697b      	ldr	r3, [r7, #20]
    ae2c:	7c9b      	ldrb	r3, [r3, #18]
    ae2e:	2bff      	cmp	r3, #255	; 0xff
    ae30:	d102      	bne.n	ae38 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    ae32:	f06f 0311 	mvn.w	r3, #17
    ae36:	e0c8      	b.n	afca <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    ae38:	7efb      	ldrb	r3, [r7, #27]
    ae3a:	015b      	lsls	r3, r3, #5
    ae3c:	4a67      	ldr	r2, [pc, #412]	; (afdc <_usb_d_dev_ep_enable+0x1fc>)
    ae3e:	4413      	add	r3, r2
    ae40:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    ae42:	697b      	ldr	r3, [r7, #20]
    ae44:	7cdb      	ldrb	r3, [r3, #19]
    ae46:	f003 0307 	and.w	r3, r3, #7
    ae4a:	b2db      	uxtb	r3, r3
    ae4c:	2b01      	cmp	r3, #1
    ae4e:	d14b      	bne.n	aee8 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    ae50:	7cfb      	ldrb	r3, [r7, #19]
    ae52:	f003 0377 	and.w	r3, r3, #119	; 0x77
    ae56:	2b00      	cmp	r3, #0
    ae58:	d002      	beq.n	ae60 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    ae5a:	f06f 0313 	mvn.w	r3, #19
    ae5e:	e0b4      	b.n	afca <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    ae60:	7efb      	ldrb	r3, [r7, #27]
    ae62:	2211      	movs	r2, #17
    ae64:	4619      	mov	r1, r3
    ae66:	69f8      	ldr	r0, [r7, #28]
    ae68:	4b5d      	ldr	r3, [pc, #372]	; (afe0 <_usb_d_dev_ep_enable+0x200>)
    ae6a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ae6c:	697b      	ldr	r3, [r7, #20]
    ae6e:	8a1b      	ldrh	r3, [r3, #16]
    ae70:	039b      	lsls	r3, r3, #14
    ae72:	4c5c      	ldr	r4, [pc, #368]	; (afe4 <_usb_d_dev_ep_enable+0x204>)
    ae74:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ae76:	697b      	ldr	r3, [r7, #20]
    ae78:	8a1b      	ldrh	r3, [r3, #16]
    ae7a:	4618      	mov	r0, r3
    ae7c:	4b5a      	ldr	r3, [pc, #360]	; (afe8 <_usb_d_dev_ep_enable+0x208>)
    ae7e:	4798      	blx	r3
    ae80:	4603      	mov	r3, r0
    ae82:	071b      	lsls	r3, r3, #28
    ae84:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ae88:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ae8c:	68fb      	ldr	r3, [r7, #12]
    ae8e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    ae90:	68fb      	ldr	r3, [r7, #12]
    ae92:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ae96:	697b      	ldr	r3, [r7, #20]
    ae98:	8a1b      	ldrh	r3, [r3, #16]
    ae9a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ae9e:	697b      	ldr	r3, [r7, #20]
    aea0:	8a1b      	ldrh	r3, [r3, #16]
    aea2:	4618      	mov	r0, r3
    aea4:	4b50      	ldr	r3, [pc, #320]	; (afe8 <_usb_d_dev_ep_enable+0x208>)
    aea6:	4798      	blx	r3
    aea8:	4603      	mov	r3, r0
    aeaa:	071b      	lsls	r3, r3, #28
    aeac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    aeb0:	432b      	orrs	r3, r5
    aeb2:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    aeb4:	7efb      	ldrb	r3, [r7, #27]
    aeb6:	2200      	movs	r2, #0
    aeb8:	2100      	movs	r1, #0
    aeba:	4618      	mov	r0, r3
    aebc:	4b4b      	ldr	r3, [pc, #300]	; (afec <_usb_d_dev_ep_enable+0x20c>)
    aebe:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    aec0:	7efb      	ldrb	r3, [r7, #27]
    aec2:	2200      	movs	r2, #0
    aec4:	2101      	movs	r1, #1
    aec6:	4618      	mov	r0, r3
    aec8:	4b49      	ldr	r3, [pc, #292]	; (aff0 <_usb_d_dev_ep_enable+0x210>)
    aeca:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    aecc:	7efb      	ldrb	r3, [r7, #27]
    aece:	2100      	movs	r1, #0
    aed0:	4618      	mov	r0, r3
    aed2:	4b48      	ldr	r3, [pc, #288]	; (aff4 <_usb_d_dev_ep_enable+0x214>)
    aed4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    aed6:	7efb      	ldrb	r3, [r7, #27]
    aed8:	2101      	movs	r1, #1
    aeda:	4618      	mov	r0, r3
    aedc:	4b45      	ldr	r3, [pc, #276]	; (aff4 <_usb_d_dev_ep_enable+0x214>)
    aede:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    aee0:	6978      	ldr	r0, [r7, #20]
    aee2:	4b45      	ldr	r3, [pc, #276]	; (aff8 <_usb_d_dev_ep_enable+0x218>)
    aee4:	4798      	blx	r3
    aee6:	e06f      	b.n	afc8 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    aee8:	7ebb      	ldrb	r3, [r7, #26]
    aeea:	2b00      	cmp	r3, #0
    aeec:	d038      	beq.n	af60 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    aeee:	7cfb      	ldrb	r3, [r7, #19]
    aef0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    aef4:	2b00      	cmp	r3, #0
    aef6:	d002      	beq.n	aefe <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    aef8:	f06f 0313 	mvn.w	r3, #19
    aefc:	e065      	b.n	afca <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    aefe:	697b      	ldr	r3, [r7, #20]
    af00:	7cdb      	ldrb	r3, [r3, #19]
    af02:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af06:	b2db      	uxtb	r3, r3
    af08:	011b      	lsls	r3, r3, #4
    af0a:	b2db      	uxtb	r3, r3
    af0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    af10:	b2da      	uxtb	r2, r3
    af12:	7cfb      	ldrb	r3, [r7, #19]
    af14:	4313      	orrs	r3, r2
    af16:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    af18:	7cfa      	ldrb	r2, [r7, #19]
    af1a:	7efb      	ldrb	r3, [r7, #27]
    af1c:	4619      	mov	r1, r3
    af1e:	69f8      	ldr	r0, [r7, #28]
    af20:	4b2f      	ldr	r3, [pc, #188]	; (afe0 <_usb_d_dev_ep_enable+0x200>)
    af22:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    af24:	68fb      	ldr	r3, [r7, #12]
    af26:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    af2a:	697b      	ldr	r3, [r7, #20]
    af2c:	8a1b      	ldrh	r3, [r3, #16]
    af2e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    af32:	697b      	ldr	r3, [r7, #20]
    af34:	8a1b      	ldrh	r3, [r3, #16]
    af36:	4618      	mov	r0, r3
    af38:	4b2b      	ldr	r3, [pc, #172]	; (afe8 <_usb_d_dev_ep_enable+0x208>)
    af3a:	4798      	blx	r3
    af3c:	4603      	mov	r3, r0
    af3e:	071b      	lsls	r3, r3, #28
    af40:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    af44:	432b      	orrs	r3, r5
    af46:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    af48:	7efb      	ldrb	r3, [r7, #27]
    af4a:	2200      	movs	r2, #0
    af4c:	2101      	movs	r1, #1
    af4e:	4618      	mov	r0, r3
    af50:	4b27      	ldr	r3, [pc, #156]	; (aff0 <_usb_d_dev_ep_enable+0x210>)
    af52:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    af54:	7efb      	ldrb	r3, [r7, #27]
    af56:	2101      	movs	r1, #1
    af58:	4618      	mov	r0, r3
    af5a:	4b26      	ldr	r3, [pc, #152]	; (aff4 <_usb_d_dev_ep_enable+0x214>)
    af5c:	4798      	blx	r3
    af5e:	e033      	b.n	afc8 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    af60:	7cfb      	ldrb	r3, [r7, #19]
    af62:	f003 0307 	and.w	r3, r3, #7
    af66:	2b00      	cmp	r3, #0
    af68:	d002      	beq.n	af70 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    af6a:	f06f 0313 	mvn.w	r3, #19
    af6e:	e02c      	b.n	afca <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    af70:	697b      	ldr	r3, [r7, #20]
    af72:	7cdb      	ldrb	r3, [r3, #19]
    af74:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af78:	b2db      	uxtb	r3, r3
    af7a:	461a      	mov	r2, r3
    af7c:	7cfb      	ldrb	r3, [r7, #19]
    af7e:	4313      	orrs	r3, r2
    af80:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    af82:	7cfa      	ldrb	r2, [r7, #19]
    af84:	7efb      	ldrb	r3, [r7, #27]
    af86:	4619      	mov	r1, r3
    af88:	69f8      	ldr	r0, [r7, #28]
    af8a:	4b15      	ldr	r3, [pc, #84]	; (afe0 <_usb_d_dev_ep_enable+0x200>)
    af8c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    af8e:	697b      	ldr	r3, [r7, #20]
    af90:	8a1b      	ldrh	r3, [r3, #16]
    af92:	039b      	lsls	r3, r3, #14
    af94:	4c13      	ldr	r4, [pc, #76]	; (afe4 <_usb_d_dev_ep_enable+0x204>)
    af96:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    af98:	697b      	ldr	r3, [r7, #20]
    af9a:	8a1b      	ldrh	r3, [r3, #16]
    af9c:	4618      	mov	r0, r3
    af9e:	4b12      	ldr	r3, [pc, #72]	; (afe8 <_usb_d_dev_ep_enable+0x208>)
    afa0:	4798      	blx	r3
    afa2:	4603      	mov	r3, r0
    afa4:	071b      	lsls	r3, r3, #28
    afa6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    afaa:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    afae:	68fb      	ldr	r3, [r7, #12]
    afb0:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    afb2:	7efb      	ldrb	r3, [r7, #27]
    afb4:	2200      	movs	r2, #0
    afb6:	2100      	movs	r1, #0
    afb8:	4618      	mov	r0, r3
    afba:	4b0c      	ldr	r3, [pc, #48]	; (afec <_usb_d_dev_ep_enable+0x20c>)
    afbc:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    afbe:	7efb      	ldrb	r3, [r7, #27]
    afc0:	2100      	movs	r1, #0
    afc2:	4618      	mov	r0, r3
    afc4:	4b0b      	ldr	r3, [pc, #44]	; (aff4 <_usb_d_dev_ep_enable+0x214>)
    afc6:	4798      	blx	r3
	}

	return USB_OK;
    afc8:	2300      	movs	r3, #0
}
    afca:	4618      	mov	r0, r3
    afcc:	3720      	adds	r7, #32
    afce:	46bd      	mov	sp, r7
    afd0:	bdb0      	pop	{r4, r5, r7, pc}
    afd2:	bf00      	nop
    afd4:	00009bf9 	.word	0x00009bf9
    afd8:	0000927f 	.word	0x0000927f
    afdc:	20001004 	.word	0x20001004
    afe0:	00009255 	.word	0x00009255
    afe4:	0fffc000 	.word	0x0fffc000
    afe8:	00009b95 	.word	0x00009b95
    afec:	00009b3d 	.word	0x00009b3d
    aff0:	00009ae5 	.word	0x00009ae5
    aff4:	00009aad 	.word	0x00009aad
    aff8:	0000ab51 	.word	0x0000ab51

0000affc <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    affc:	b580      	push	{r7, lr}
    affe:	b084      	sub	sp, #16
    b000:	af00      	add	r7, sp, #0
    b002:	6078      	str	r0, [r7, #4]
    b004:	460b      	mov	r3, r1
    b006:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b008:	687b      	ldr	r3, [r7, #4]
    b00a:	7c9b      	ldrb	r3, [r3, #18]
    b00c:	f003 030f 	and.w	r3, r3, #15
    b010:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    b012:	78fa      	ldrb	r2, [r7, #3]
    b014:	7bfb      	ldrb	r3, [r7, #15]
    b016:	4611      	mov	r1, r2
    b018:	4618      	mov	r0, r3
    b01a:	4b03      	ldr	r3, [pc, #12]	; (b028 <_usb_d_dev_ep_stall_get+0x2c>)
    b01c:	4798      	blx	r3
    b01e:	4603      	mov	r3, r0
}
    b020:	4618      	mov	r0, r3
    b022:	3710      	adds	r7, #16
    b024:	46bd      	mov	sp, r7
    b026:	bd80      	pop	{r7, pc}
    b028:	000096ed 	.word	0x000096ed

0000b02c <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    b02c:	b580      	push	{r7, lr}
    b02e:	b084      	sub	sp, #16
    b030:	af00      	add	r7, sp, #0
    b032:	6078      	str	r0, [r7, #4]
    b034:	460b      	mov	r3, r1
    b036:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b038:	687b      	ldr	r3, [r7, #4]
    b03a:	7c9b      	ldrb	r3, [r3, #18]
    b03c:	f003 030f 	and.w	r3, r3, #15
    b040:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    b042:	78f9      	ldrb	r1, [r7, #3]
    b044:	7bfb      	ldrb	r3, [r7, #15]
    b046:	2201      	movs	r2, #1
    b048:	4618      	mov	r0, r3
    b04a:	4b0a      	ldr	r3, [pc, #40]	; (b074 <_usb_d_dev_ep_stall_set+0x48>)
    b04c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b04e:	78fb      	ldrb	r3, [r7, #3]
    b050:	2220      	movs	r2, #32
    b052:	409a      	lsls	r2, r3
    b054:	7bfb      	ldrb	r3, [r7, #15]
    b056:	4611      	mov	r1, r2
    b058:	4618      	mov	r0, r3
    b05a:	4b07      	ldr	r3, [pc, #28]	; (b078 <_usb_d_dev_ep_stall_set+0x4c>)
    b05c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    b05e:	687a      	ldr	r2, [r7, #4]
    b060:	7cd3      	ldrb	r3, [r2, #19]
    b062:	f043 0308 	orr.w	r3, r3, #8
    b066:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    b068:	2300      	movs	r3, #0
}
    b06a:	4618      	mov	r0, r3
    b06c:	3710      	adds	r7, #16
    b06e:	46bd      	mov	sp, r7
    b070:	bd80      	pop	{r7, pc}
    b072:	bf00      	nop
    b074:	00009695 	.word	0x00009695
    b078:	00009615 	.word	0x00009615

0000b07c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    b07c:	b580      	push	{r7, lr}
    b07e:	b084      	sub	sp, #16
    b080:	af00      	add	r7, sp, #0
    b082:	6078      	str	r0, [r7, #4]
    b084:	460b      	mov	r3, r1
    b086:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    b088:	687b      	ldr	r3, [r7, #4]
    b08a:	7c9b      	ldrb	r3, [r3, #18]
    b08c:	f003 030f 	and.w	r3, r3, #15
    b090:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    b092:	78fa      	ldrb	r2, [r7, #3]
    b094:	7bfb      	ldrb	r3, [r7, #15]
    b096:	4611      	mov	r1, r2
    b098:	4618      	mov	r0, r3
    b09a:	4b28      	ldr	r3, [pc, #160]	; (b13c <_usb_d_dev_ep_stall_clr+0xc0>)
    b09c:	4798      	blx	r3
    b09e:	4603      	mov	r3, r0
    b0a0:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    b0a2:	7bbb      	ldrb	r3, [r7, #14]
    b0a4:	f083 0301 	eor.w	r3, r3, #1
    b0a8:	b2db      	uxtb	r3, r3
    b0aa:	2b00      	cmp	r3, #0
    b0ac:	d001      	beq.n	b0b2 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    b0ae:	2300      	movs	r3, #0
    b0b0:	e040      	b.n	b134 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    b0b2:	78f9      	ldrb	r1, [r7, #3]
    b0b4:	7bfb      	ldrb	r3, [r7, #15]
    b0b6:	2200      	movs	r2, #0
    b0b8:	4618      	mov	r0, r3
    b0ba:	4b21      	ldr	r3, [pc, #132]	; (b140 <_usb_d_dev_ep_stall_clr+0xc4>)
    b0bc:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b0be:	78fb      	ldrb	r3, [r7, #3]
    b0c0:	2220      	movs	r2, #32
    b0c2:	409a      	lsls	r2, r3
    b0c4:	7bfb      	ldrb	r3, [r7, #15]
    b0c6:	4611      	mov	r1, r2
    b0c8:	4618      	mov	r0, r3
    b0ca:	4b1e      	ldr	r3, [pc, #120]	; (b144 <_usb_d_dev_ep_stall_clr+0xc8>)
    b0cc:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b0ce:	78fa      	ldrb	r2, [r7, #3]
    b0d0:	7bfb      	ldrb	r3, [r7, #15]
    b0d2:	4611      	mov	r1, r2
    b0d4:	4618      	mov	r0, r3
    b0d6:	4b1c      	ldr	r3, [pc, #112]	; (b148 <_usb_d_dev_ep_stall_clr+0xcc>)
    b0d8:	4798      	blx	r3
    b0da:	4603      	mov	r3, r0
    b0dc:	2b00      	cmp	r3, #0
    b0de:	d00b      	beq.n	b0f8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b0e0:	78fa      	ldrb	r2, [r7, #3]
    b0e2:	7bfb      	ldrb	r3, [r7, #15]
    b0e4:	4611      	mov	r1, r2
    b0e6:	4618      	mov	r0, r3
    b0e8:	4b18      	ldr	r3, [pc, #96]	; (b14c <_usb_d_dev_ep_stall_clr+0xd0>)
    b0ea:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b0ec:	78f9      	ldrb	r1, [r7, #3]
    b0ee:	7bfb      	ldrb	r3, [r7, #15]
    b0f0:	2200      	movs	r2, #0
    b0f2:	4618      	mov	r0, r3
    b0f4:	4b16      	ldr	r3, [pc, #88]	; (b150 <_usb_d_dev_ep_stall_clr+0xd4>)
    b0f6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b0f8:	687b      	ldr	r3, [r7, #4]
    b0fa:	7cdb      	ldrb	r3, [r3, #19]
    b0fc:	f003 0307 	and.w	r3, r3, #7
    b100:	b2db      	uxtb	r3, r3
    b102:	2b01      	cmp	r3, #1
    b104:	d110      	bne.n	b128 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b106:	7bfb      	ldrb	r3, [r7, #15]
    b108:	4619      	mov	r1, r3
    b10a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b10e:	4b11      	ldr	r3, [pc, #68]	; (b154 <_usb_d_dev_ep_stall_clr+0xd8>)
    b110:	4798      	blx	r3
    b112:	4603      	mov	r3, r0
    b114:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b118:	2b00      	cmp	r3, #0
    b11a:	d10a      	bne.n	b132 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b11c:	687a      	ldr	r2, [r7, #4]
    b11e:	7cd3      	ldrb	r3, [r2, #19]
    b120:	f36f 03c3 	bfc	r3, #3, #1
    b124:	74d3      	strb	r3, [r2, #19]
    b126:	e004      	b.n	b132 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b128:	687a      	ldr	r2, [r7, #4]
    b12a:	7cd3      	ldrb	r3, [r2, #19]
    b12c:	f36f 03c3 	bfc	r3, #3, #1
    b130:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b132:	2300      	movs	r3, #0
}
    b134:	4618      	mov	r0, r3
    b136:	3710      	adds	r7, #16
    b138:	46bd      	mov	sp, r7
    b13a:	bd80      	pop	{r7, pc}
    b13c:	000096ed 	.word	0x000096ed
    b140:	00009695 	.word	0x00009695
    b144:	0000963d 	.word	0x0000963d
    b148:	00009731 	.word	0x00009731
    b14c:	00009775 	.word	0x00009775
    b150:	00009861 	.word	0x00009861
    b154:	0000911d 	.word	0x0000911d

0000b158 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b158:	b580      	push	{r7, lr}
    b15a:	b086      	sub	sp, #24
    b15c:	af00      	add	r7, sp, #0
    b15e:	4603      	mov	r3, r0
    b160:	460a      	mov	r2, r1
    b162:	71fb      	strb	r3, [r7, #7]
    b164:	4613      	mov	r3, r2
    b166:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b168:	79fb      	ldrb	r3, [r7, #7]
    b16a:	f003 030f 	and.w	r3, r3, #15
    b16e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b170:	79fb      	ldrb	r3, [r7, #7]
    b172:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b176:	2b00      	cmp	r3, #0
    b178:	bf14      	ite	ne
    b17a:	2301      	movne	r3, #1
    b17c:	2300      	moveq	r3, #0
    b17e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b180:	7cba      	ldrb	r2, [r7, #18]
    b182:	7cfb      	ldrb	r3, [r7, #19]
    b184:	4611      	mov	r1, r2
    b186:	4618      	mov	r0, r3
    b188:	4b13      	ldr	r3, [pc, #76]	; (b1d8 <_usb_d_dev_ep_stall+0x80>)
    b18a:	4798      	blx	r3
    b18c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b18e:	7cfb      	ldrb	r3, [r7, #19]
    b190:	2b04      	cmp	r3, #4
    b192:	d902      	bls.n	b19a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b194:	f06f 0311 	mvn.w	r3, #17
    b198:	e01a      	b.n	b1d0 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b19a:	79bb      	ldrb	r3, [r7, #6]
    b19c:	2b01      	cmp	r3, #1
    b19e:	d106      	bne.n	b1ae <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b1a0:	7cbb      	ldrb	r3, [r7, #18]
    b1a2:	4619      	mov	r1, r3
    b1a4:	68f8      	ldr	r0, [r7, #12]
    b1a6:	4b0d      	ldr	r3, [pc, #52]	; (b1dc <_usb_d_dev_ep_stall+0x84>)
    b1a8:	4798      	blx	r3
    b1aa:	6178      	str	r0, [r7, #20]
    b1ac:	e00f      	b.n	b1ce <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b1ae:	79bb      	ldrb	r3, [r7, #6]
    b1b0:	2b00      	cmp	r3, #0
    b1b2:	d106      	bne.n	b1c2 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b1b4:	7cbb      	ldrb	r3, [r7, #18]
    b1b6:	4619      	mov	r1, r3
    b1b8:	68f8      	ldr	r0, [r7, #12]
    b1ba:	4b09      	ldr	r3, [pc, #36]	; (b1e0 <_usb_d_dev_ep_stall+0x88>)
    b1bc:	4798      	blx	r3
    b1be:	6178      	str	r0, [r7, #20]
    b1c0:	e005      	b.n	b1ce <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b1c2:	7cbb      	ldrb	r3, [r7, #18]
    b1c4:	4619      	mov	r1, r3
    b1c6:	68f8      	ldr	r0, [r7, #12]
    b1c8:	4b06      	ldr	r3, [pc, #24]	; (b1e4 <_usb_d_dev_ep_stall+0x8c>)
    b1ca:	4798      	blx	r3
    b1cc:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b1ce:	697b      	ldr	r3, [r7, #20]
}
    b1d0:	4618      	mov	r0, r3
    b1d2:	3718      	adds	r7, #24
    b1d4:	46bd      	mov	sp, r7
    b1d6:	bd80      	pop	{r7, pc}
    b1d8:	00009bf9 	.word	0x00009bf9
    b1dc:	0000b02d 	.word	0x0000b02d
    b1e0:	0000b07d 	.word	0x0000b07d
    b1e4:	0000affd 	.word	0x0000affd

0000b1e8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b1e8:	b580      	push	{r7, lr}
    b1ea:	b082      	sub	sp, #8
    b1ec:	af00      	add	r7, sp, #0
    b1ee:	6078      	str	r0, [r7, #4]
    b1f0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b1f2:	687b      	ldr	r3, [r7, #4]
    b1f4:	7c9b      	ldrb	r3, [r3, #18]
    b1f6:	2bff      	cmp	r3, #255	; 0xff
    b1f8:	d014      	beq.n	b224 <_usb_d_dev_trans_done+0x3c>
    b1fa:	687b      	ldr	r3, [r7, #4]
    b1fc:	7cdb      	ldrb	r3, [r3, #19]
    b1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b202:	b2db      	uxtb	r3, r3
    b204:	2b00      	cmp	r3, #0
    b206:	d00d      	beq.n	b224 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b208:	687a      	ldr	r2, [r7, #4]
    b20a:	7cd3      	ldrb	r3, [r2, #19]
    b20c:	f36f 1386 	bfc	r3, #6, #1
    b210:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b212:	4b06      	ldr	r3, [pc, #24]	; (b22c <_usb_d_dev_trans_done+0x44>)
    b214:	691b      	ldr	r3, [r3, #16]
    b216:	687a      	ldr	r2, [r7, #4]
    b218:	7c90      	ldrb	r0, [r2, #18]
    b21a:	687a      	ldr	r2, [r7, #4]
    b21c:	6892      	ldr	r2, [r2, #8]
    b21e:	6839      	ldr	r1, [r7, #0]
    b220:	4798      	blx	r3
    b222:	e000      	b.n	b226 <_usb_d_dev_trans_done+0x3e>
		return;
    b224:	bf00      	nop
}
    b226:	3708      	adds	r7, #8
    b228:	46bd      	mov	sp, r7
    b22a:	bd80      	pop	{r7, pc}
    b22c:	20000f3c 	.word	0x20000f3c

0000b230 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b230:	b580      	push	{r7, lr}
    b232:	b086      	sub	sp, #24
    b234:	af00      	add	r7, sp, #0
    b236:	60f8      	str	r0, [r7, #12]
    b238:	460b      	mov	r3, r1
    b23a:	607a      	str	r2, [r7, #4]
    b23c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b23e:	68fb      	ldr	r3, [r7, #12]
    b240:	7c9b      	ldrb	r3, [r3, #18]
    b242:	f003 030f 	and.w	r3, r3, #15
    b246:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b248:	4b1f      	ldr	r3, [pc, #124]	; (b2c8 <_usb_d_dev_trans_stop+0x98>)
    b24a:	881b      	ldrh	r3, [r3, #0]
    b24c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b24e:	68fb      	ldr	r3, [r7, #12]
    b250:	7c9b      	ldrb	r3, [r3, #18]
    b252:	2bff      	cmp	r3, #255	; 0xff
    b254:	d033      	beq.n	b2be <_usb_d_dev_trans_stop+0x8e>
    b256:	68fb      	ldr	r3, [r7, #12]
    b258:	7cdb      	ldrb	r3, [r3, #19]
    b25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b25e:	b2db      	uxtb	r3, r3
    b260:	2b00      	cmp	r3, #0
    b262:	d02c      	beq.n	b2be <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b264:	7afb      	ldrb	r3, [r7, #11]
    b266:	2b00      	cmp	r3, #0
    b268:	d006      	beq.n	b278 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b26a:	7dfb      	ldrb	r3, [r7, #23]
    b26c:	2200      	movs	r2, #0
    b26e:	2101      	movs	r1, #1
    b270:	4618      	mov	r0, r3
    b272:	4b16      	ldr	r3, [pc, #88]	; (b2cc <_usb_d_dev_trans_stop+0x9c>)
    b274:	4798      	blx	r3
    b276:	e005      	b.n	b284 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b278:	7dfb      	ldrb	r3, [r7, #23]
    b27a:	2200      	movs	r2, #0
    b27c:	2100      	movs	r1, #0
    b27e:	4618      	mov	r0, r3
    b280:	4b13      	ldr	r3, [pc, #76]	; (b2d0 <_usb_d_dev_trans_stop+0xa0>)
    b282:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b284:	7afb      	ldrb	r3, [r7, #11]
    b286:	f107 0218 	add.w	r2, r7, #24
    b28a:	4413      	add	r3, r2
    b28c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b290:	461a      	mov	r2, r3
    b292:	7dfb      	ldrb	r3, [r7, #23]
    b294:	4611      	mov	r1, r2
    b296:	4618      	mov	r0, r3
    b298:	4b0e      	ldr	r3, [pc, #56]	; (b2d4 <_usb_d_dev_trans_stop+0xa4>)
    b29a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b29c:	7afb      	ldrb	r3, [r7, #11]
    b29e:	f107 0218 	add.w	r2, r7, #24
    b2a2:	4413      	add	r3, r2
    b2a4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b2a8:	461a      	mov	r2, r3
    b2aa:	7dfb      	ldrb	r3, [r7, #23]
    b2ac:	4611      	mov	r1, r2
    b2ae:	4618      	mov	r0, r3
    b2b0:	4b09      	ldr	r3, [pc, #36]	; (b2d8 <_usb_d_dev_trans_stop+0xa8>)
    b2b2:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b2b4:	6879      	ldr	r1, [r7, #4]
    b2b6:	68f8      	ldr	r0, [r7, #12]
    b2b8:	4b08      	ldr	r3, [pc, #32]	; (b2dc <_usb_d_dev_trans_stop+0xac>)
    b2ba:	4798      	blx	r3
    b2bc:	e000      	b.n	b2c0 <_usb_d_dev_trans_stop+0x90>
		return;
    b2be:	bf00      	nop
}
    b2c0:	3718      	adds	r7, #24
    b2c2:	46bd      	mov	sp, r7
    b2c4:	bd80      	pop	{r7, pc}
    b2c6:	bf00      	nop
    b2c8:	000141b4 	.word	0x000141b4
    b2cc:	00009ae5 	.word	0x00009ae5
    b2d0:	00009b3d 	.word	0x00009b3d
    b2d4:	000095ed 	.word	0x000095ed
    b2d8:	0000963d 	.word	0x0000963d
    b2dc:	0000b1e9 	.word	0x0000b1e9

0000b2e0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b2e0:	b580      	push	{r7, lr}
    b2e2:	b086      	sub	sp, #24
    b2e4:	af00      	add	r7, sp, #0
    b2e6:	4603      	mov	r3, r0
    b2e8:	6039      	str	r1, [r7, #0]
    b2ea:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b2ec:	79fb      	ldrb	r3, [r7, #7]
    b2ee:	f003 030f 	and.w	r3, r3, #15
    b2f2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b2f4:	7dfb      	ldrb	r3, [r7, #23]
    b2f6:	015b      	lsls	r3, r3, #5
    b2f8:	4a1e      	ldr	r2, [pc, #120]	; (b374 <_usb_d_dev_ep_read_req+0x94>)
    b2fa:	4413      	add	r3, r2
    b2fc:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b2fe:	693b      	ldr	r3, [r7, #16]
    b300:	681b      	ldr	r3, [r3, #0]
    b302:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b304:	693b      	ldr	r3, [r7, #16]
    b306:	685b      	ldr	r3, [r3, #4]
    b308:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b30c:	b29b      	uxth	r3, r3
    b30e:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b310:	7dfb      	ldrb	r3, [r7, #23]
    b312:	2b04      	cmp	r3, #4
    b314:	d802      	bhi.n	b31c <_usb_d_dev_ep_read_req+0x3c>
    b316:	683b      	ldr	r3, [r7, #0]
    b318:	2b00      	cmp	r3, #0
    b31a:	d102      	bne.n	b322 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b31c:	f06f 0311 	mvn.w	r3, #17
    b320:	e023      	b.n	b36a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b322:	7dfb      	ldrb	r3, [r7, #23]
    b324:	4618      	mov	r0, r3
    b326:	4b14      	ldr	r3, [pc, #80]	; (b378 <_usb_d_dev_ep_read_req+0x98>)
    b328:	4798      	blx	r3
    b32a:	4603      	mov	r3, r0
    b32c:	f083 0301 	eor.w	r3, r3, #1
    b330:	b2db      	uxtb	r3, r3
    b332:	2b00      	cmp	r3, #0
    b334:	d002      	beq.n	b33c <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b336:	f06f 0312 	mvn.w	r3, #18
    b33a:	e016      	b.n	b36a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b33c:	7dfb      	ldrb	r3, [r7, #23]
    b33e:	4618      	mov	r0, r3
    b340:	4b0e      	ldr	r3, [pc, #56]	; (b37c <_usb_d_dev_ep_read_req+0x9c>)
    b342:	4798      	blx	r3
    b344:	4603      	mov	r3, r0
    b346:	f083 0301 	eor.w	r3, r3, #1
    b34a:	b2db      	uxtb	r3, r3
    b34c:	2b00      	cmp	r3, #0
    b34e:	d001      	beq.n	b354 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b350:	2300      	movs	r3, #0
    b352:	e00a      	b.n	b36a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b354:	68fb      	ldr	r3, [r7, #12]
    b356:	2208      	movs	r2, #8
    b358:	4619      	mov	r1, r3
    b35a:	6838      	ldr	r0, [r7, #0]
    b35c:	4b08      	ldr	r3, [pc, #32]	; (b380 <_usb_d_dev_ep_read_req+0xa0>)
    b35e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b360:	7dfb      	ldrb	r3, [r7, #23]
    b362:	4618      	mov	r0, r3
    b364:	4b07      	ldr	r3, [pc, #28]	; (b384 <_usb_d_dev_ep_read_req+0xa4>)
    b366:	4798      	blx	r3

	return bytes;
    b368:	897b      	ldrh	r3, [r7, #10]
}
    b36a:	4618      	mov	r0, r3
    b36c:	3718      	adds	r7, #24
    b36e:	46bd      	mov	sp, r7
    b370:	bd80      	pop	{r7, pc}
    b372:	bf00      	nop
    b374:	20001004 	.word	0x20001004
    b378:	00009665 	.word	0x00009665
    b37c:	00009811 	.word	0x00009811
    b380:	00013a25 	.word	0x00013a25
    b384:	00009841 	.word	0x00009841

0000b388 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b388:	b580      	push	{r7, lr}
    b38a:	b086      	sub	sp, #24
    b38c:	af00      	add	r7, sp, #0
    b38e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b390:	687b      	ldr	r3, [r7, #4]
    b392:	7a1b      	ldrb	r3, [r3, #8]
    b394:	f003 030f 	and.w	r3, r3, #15
    b398:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b39a:	687b      	ldr	r3, [r7, #4]
    b39c:	7a1b      	ldrb	r3, [r3, #8]
    b39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b3a2:	2b00      	cmp	r3, #0
    b3a4:	bf14      	ite	ne
    b3a6:	2301      	movne	r3, #1
    b3a8:	2300      	moveq	r3, #0
    b3aa:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b3ac:	7d7a      	ldrb	r2, [r7, #21]
    b3ae:	7dbb      	ldrb	r3, [r7, #22]
    b3b0:	4611      	mov	r1, r2
    b3b2:	4618      	mov	r0, r3
    b3b4:	4b5f      	ldr	r3, [pc, #380]	; (b534 <_usb_d_dev_ep_trans+0x1ac>)
    b3b6:	4798      	blx	r3
    b3b8:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b3ba:	693b      	ldr	r3, [r7, #16]
    b3bc:	8a1b      	ldrh	r3, [r3, #16]
    b3be:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b3c2:	4293      	cmp	r3, r2
    b3c4:	d004      	beq.n	b3d0 <_usb_d_dev_ep_trans+0x48>
    b3c6:	693b      	ldr	r3, [r7, #16]
    b3c8:	8a1b      	ldrh	r3, [r3, #16]
    b3ca:	3b01      	subs	r3, #1
    b3cc:	b29b      	uxth	r3, r3
    b3ce:	e001      	b.n	b3d4 <_usb_d_dev_ep_trans+0x4c>
    b3d0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b3d4:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b3d6:	687b      	ldr	r3, [r7, #4]
    b3d8:	685a      	ldr	r2, [r3, #4]
    b3da:	89fb      	ldrh	r3, [r7, #14]
    b3dc:	4013      	ands	r3, r2
    b3de:	2b00      	cmp	r3, #0
    b3e0:	bf14      	ite	ne
    b3e2:	2301      	movne	r3, #1
    b3e4:	2300      	moveq	r3, #0
    b3e6:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b3e8:	2300      	movs	r3, #0
    b3ea:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b3ec:	7dbb      	ldrb	r3, [r7, #22]
    b3ee:	2b04      	cmp	r3, #4
    b3f0:	d902      	bls.n	b3f8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b3f2:	f06f 0311 	mvn.w	r3, #17
    b3f6:	e098      	b.n	b52a <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b3f8:	687b      	ldr	r3, [r7, #4]
    b3fa:	681b      	ldr	r3, [r3, #0]
    b3fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b400:	d31a      	bcc.n	b438 <_usb_d_dev_ep_trans+0xb0>
    b402:	687b      	ldr	r3, [r7, #4]
    b404:	681b      	ldr	r3, [r3, #0]
    b406:	461a      	mov	r2, r3
    b408:	687b      	ldr	r3, [r7, #4]
    b40a:	685b      	ldr	r3, [r3, #4]
    b40c:	4413      	add	r3, r2
    b40e:	4a4a      	ldr	r2, [pc, #296]	; (b538 <_usb_d_dev_ep_trans+0x1b0>)
    b410:	4293      	cmp	r3, r2
    b412:	d811      	bhi.n	b438 <_usb_d_dev_ep_trans+0xb0>
    b414:	687b      	ldr	r3, [r7, #4]
    b416:	681b      	ldr	r3, [r3, #0]
    b418:	f003 0303 	and.w	r3, r3, #3
    b41c:	2b00      	cmp	r3, #0
    b41e:	d10b      	bne.n	b438 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b420:	7d7b      	ldrb	r3, [r7, #21]
    b422:	f083 0301 	eor.w	r3, r3, #1
    b426:	b2db      	uxtb	r3, r3
    b428:	2b00      	cmp	r3, #0
    b42a:	d00e      	beq.n	b44a <_usb_d_dev_ep_trans+0xc2>
    b42c:	687b      	ldr	r3, [r7, #4]
    b42e:	685b      	ldr	r3, [r3, #4]
    b430:	693a      	ldr	r2, [r7, #16]
    b432:	8a12      	ldrh	r2, [r2, #16]
    b434:	4293      	cmp	r3, r2
    b436:	d208      	bcs.n	b44a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b438:	693b      	ldr	r3, [r7, #16]
    b43a:	68db      	ldr	r3, [r3, #12]
    b43c:	2b00      	cmp	r3, #0
    b43e:	d102      	bne.n	b446 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b440:	f06f 0312 	mvn.w	r3, #18
    b444:	e071      	b.n	b52a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b446:	2301      	movs	r3, #1
    b448:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b44a:	7d7b      	ldrb	r3, [r7, #21]
    b44c:	f083 0301 	eor.w	r3, r3, #1
    b450:	b2db      	uxtb	r3, r3
    b452:	2b00      	cmp	r3, #0
    b454:	d009      	beq.n	b46a <_usb_d_dev_ep_trans+0xe2>
    b456:	7b7b      	ldrb	r3, [r7, #13]
    b458:	2b00      	cmp	r3, #0
    b45a:	d006      	beq.n	b46a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b45c:	693b      	ldr	r3, [r7, #16]
    b45e:	68db      	ldr	r3, [r3, #12]
    b460:	2b00      	cmp	r3, #0
    b462:	d102      	bne.n	b46a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b464:	f06f 0311 	mvn.w	r3, #17
    b468:	e05f      	b.n	b52a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b46a:	693b      	ldr	r3, [r7, #16]
    b46c:	7cdb      	ldrb	r3, [r3, #19]
    b46e:	f003 0308 	and.w	r3, r3, #8
    b472:	b2db      	uxtb	r3, r3
    b474:	2b00      	cmp	r3, #0
    b476:	d001      	beq.n	b47c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b478:	2302      	movs	r3, #2
    b47a:	e056      	b.n	b52a <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b47c:	f107 0308 	add.w	r3, r7, #8
    b480:	4618      	mov	r0, r3
    b482:	4b2e      	ldr	r3, [pc, #184]	; (b53c <_usb_d_dev_ep_trans+0x1b4>)
    b484:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b486:	693b      	ldr	r3, [r7, #16]
    b488:	7cdb      	ldrb	r3, [r3, #19]
    b48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b48e:	b2db      	uxtb	r3, r3
    b490:	2b00      	cmp	r3, #0
    b492:	d006      	beq.n	b4a2 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b494:	f107 0308 	add.w	r3, r7, #8
    b498:	4618      	mov	r0, r3
    b49a:	4b29      	ldr	r3, [pc, #164]	; (b540 <_usb_d_dev_ep_trans+0x1b8>)
    b49c:	4798      	blx	r3
		return USB_BUSY;
    b49e:	2301      	movs	r3, #1
    b4a0:	e043      	b.n	b52a <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b4a2:	693a      	ldr	r2, [r7, #16]
    b4a4:	7cd3      	ldrb	r3, [r2, #19]
    b4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b4aa:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b4ac:	f107 0308 	add.w	r3, r7, #8
    b4b0:	4618      	mov	r0, r3
    b4b2:	4b23      	ldr	r3, [pc, #140]	; (b540 <_usb_d_dev_ep_trans+0x1b8>)
    b4b4:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b4b6:	687b      	ldr	r3, [r7, #4]
    b4b8:	681a      	ldr	r2, [r3, #0]
    b4ba:	693b      	ldr	r3, [r7, #16]
    b4bc:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b4be:	687b      	ldr	r3, [r7, #4]
    b4c0:	685a      	ldr	r2, [r3, #4]
    b4c2:	693b      	ldr	r3, [r7, #16]
    b4c4:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b4c6:	693b      	ldr	r3, [r7, #16]
    b4c8:	2200      	movs	r2, #0
    b4ca:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b4cc:	693a      	ldr	r2, [r7, #16]
    b4ce:	7cd3      	ldrb	r3, [r2, #19]
    b4d0:	7d79      	ldrb	r1, [r7, #21]
    b4d2:	f361 13c7 	bfi	r3, r1, #7, #1
    b4d6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b4d8:	693a      	ldr	r2, [r7, #16]
    b4da:	7cd3      	ldrb	r3, [r2, #19]
    b4dc:	7df9      	ldrb	r1, [r7, #23]
    b4de:	f361 1345 	bfi	r3, r1, #5, #1
    b4e2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b4e4:	687b      	ldr	r3, [r7, #4]
    b4e6:	7a5b      	ldrb	r3, [r3, #9]
    b4e8:	2b00      	cmp	r3, #0
    b4ea:	d007      	beq.n	b4fc <_usb_d_dev_ep_trans+0x174>
    b4ec:	7b7b      	ldrb	r3, [r7, #13]
    b4ee:	f083 0301 	eor.w	r3, r3, #1
    b4f2:	b2db      	uxtb	r3, r3
    b4f4:	2b00      	cmp	r3, #0
    b4f6:	d001      	beq.n	b4fc <_usb_d_dev_ep_trans+0x174>
    b4f8:	2301      	movs	r3, #1
    b4fa:	e000      	b.n	b4fe <_usb_d_dev_ep_trans+0x176>
    b4fc:	2300      	movs	r3, #0
    b4fe:	b2db      	uxtb	r3, r3
    b500:	f003 0301 	and.w	r3, r3, #1
    b504:	b2d9      	uxtb	r1, r3
    b506:	693a      	ldr	r2, [r7, #16]
    b508:	7cd3      	ldrb	r3, [r2, #19]
    b50a:	f361 1304 	bfi	r3, r1, #4, #1
    b50e:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b510:	7d7b      	ldrb	r3, [r7, #21]
    b512:	2b00      	cmp	r3, #0
    b514:	d004      	beq.n	b520 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b516:	2100      	movs	r1, #0
    b518:	6938      	ldr	r0, [r7, #16]
    b51a:	4b0a      	ldr	r3, [pc, #40]	; (b544 <_usb_d_dev_ep_trans+0x1bc>)
    b51c:	4798      	blx	r3
    b51e:	e003      	b.n	b528 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b520:	2100      	movs	r1, #0
    b522:	6938      	ldr	r0, [r7, #16]
    b524:	4b08      	ldr	r3, [pc, #32]	; (b548 <_usb_d_dev_ep_trans+0x1c0>)
    b526:	4798      	blx	r3
	}

	return ERR_NONE;
    b528:	2300      	movs	r3, #0
}
    b52a:	4618      	mov	r0, r3
    b52c:	3718      	adds	r7, #24
    b52e:	46bd      	mov	sp, r7
    b530:	bd80      	pop	{r7, pc}
    b532:	bf00      	nop
    b534:	00009bf9 	.word	0x00009bf9
    b538:	20041fff 	.word	0x20041fff
    b53c:	0000bd55 	.word	0x0000bd55
    b540:	0000bd7b 	.word	0x0000bd7b
    b544:	00009ec1 	.word	0x00009ec1
    b548:	0000a0d9 	.word	0x0000a0d9

0000b54c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b54c:	b580      	push	{r7, lr}
    b54e:	b084      	sub	sp, #16
    b550:	af00      	add	r7, sp, #0
    b552:	4603      	mov	r3, r0
    b554:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b556:	79fb      	ldrb	r3, [r7, #7]
    b558:	f003 030f 	and.w	r3, r3, #15
    b55c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b55e:	79fb      	ldrb	r3, [r7, #7]
    b560:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b564:	2b00      	cmp	r3, #0
    b566:	bf14      	ite	ne
    b568:	2301      	movne	r3, #1
    b56a:	2300      	moveq	r3, #0
    b56c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b56e:	7bba      	ldrb	r2, [r7, #14]
    b570:	7bfb      	ldrb	r3, [r7, #15]
    b572:	4611      	mov	r1, r2
    b574:	4618      	mov	r0, r3
    b576:	4b08      	ldr	r3, [pc, #32]	; (b598 <_usb_d_dev_ep_abort+0x4c>)
    b578:	4798      	blx	r3
    b57a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b57c:	7bfb      	ldrb	r3, [r7, #15]
    b57e:	2b04      	cmp	r3, #4
    b580:	d806      	bhi.n	b590 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b582:	7bbb      	ldrb	r3, [r7, #14]
    b584:	2202      	movs	r2, #2
    b586:	4619      	mov	r1, r3
    b588:	68b8      	ldr	r0, [r7, #8]
    b58a:	4b04      	ldr	r3, [pc, #16]	; (b59c <_usb_d_dev_ep_abort+0x50>)
    b58c:	4798      	blx	r3
    b58e:	e000      	b.n	b592 <_usb_d_dev_ep_abort+0x46>
		return;
    b590:	bf00      	nop
}
    b592:	3710      	adds	r7, #16
    b594:	46bd      	mov	sp, r7
    b596:	bd80      	pop	{r7, pc}
    b598:	00009bf9 	.word	0x00009bf9
    b59c:	0000b231 	.word	0x0000b231

0000b5a0 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b5a0:	b480      	push	{r7}
    b5a2:	b085      	sub	sp, #20
    b5a4:	af00      	add	r7, sp, #0
    b5a6:	4603      	mov	r3, r0
    b5a8:	6039      	str	r1, [r7, #0]
    b5aa:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b5ac:	683b      	ldr	r3, [r7, #0]
    b5ae:	2b00      	cmp	r3, #0
    b5b0:	d001      	beq.n	b5b6 <_usb_d_dev_register_callback+0x16>
    b5b2:	683b      	ldr	r3, [r7, #0]
    b5b4:	e000      	b.n	b5b8 <_usb_d_dev_register_callback+0x18>
    b5b6:	4b0a      	ldr	r3, [pc, #40]	; (b5e0 <_usb_d_dev_register_callback+0x40>)
    b5b8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b5ba:	79fb      	ldrb	r3, [r7, #7]
    b5bc:	2b01      	cmp	r3, #1
    b5be:	d103      	bne.n	b5c8 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b5c0:	4a08      	ldr	r2, [pc, #32]	; (b5e4 <_usb_d_dev_register_callback+0x44>)
    b5c2:	68fb      	ldr	r3, [r7, #12]
    b5c4:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b5c6:	e005      	b.n	b5d4 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b5c8:	79fb      	ldrb	r3, [r7, #7]
    b5ca:	2b00      	cmp	r3, #0
    b5cc:	d102      	bne.n	b5d4 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b5ce:	4a05      	ldr	r2, [pc, #20]	; (b5e4 <_usb_d_dev_register_callback+0x44>)
    b5d0:	68fb      	ldr	r3, [r7, #12]
    b5d2:	6013      	str	r3, [r2, #0]
}
    b5d4:	bf00      	nop
    b5d6:	3714      	adds	r7, #20
    b5d8:	46bd      	mov	sp, r7
    b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5de:	4770      	bx	lr
    b5e0:	00009481 	.word	0x00009481
    b5e4:	20000f3c 	.word	0x20000f3c

0000b5e8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b5e8:	b480      	push	{r7}
    b5ea:	b085      	sub	sp, #20
    b5ec:	af00      	add	r7, sp, #0
    b5ee:	4603      	mov	r3, r0
    b5f0:	6039      	str	r1, [r7, #0]
    b5f2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b5f4:	683b      	ldr	r3, [r7, #0]
    b5f6:	2b00      	cmp	r3, #0
    b5f8:	d001      	beq.n	b5fe <_usb_d_dev_register_ep_callback+0x16>
    b5fa:	683b      	ldr	r3, [r7, #0]
    b5fc:	e000      	b.n	b600 <_usb_d_dev_register_ep_callback+0x18>
    b5fe:	4b0e      	ldr	r3, [pc, #56]	; (b638 <_usb_d_dev_register_ep_callback+0x50>)
    b600:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b602:	79fb      	ldrb	r3, [r7, #7]
    b604:	2b00      	cmp	r3, #0
    b606:	d103      	bne.n	b610 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b608:	4a0c      	ldr	r2, [pc, #48]	; (b63c <_usb_d_dev_register_ep_callback+0x54>)
    b60a:	68fb      	ldr	r3, [r7, #12]
    b60c:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b60e:	e00c      	b.n	b62a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b610:	79fb      	ldrb	r3, [r7, #7]
    b612:	2b01      	cmp	r3, #1
    b614:	d103      	bne.n	b61e <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b616:	4a09      	ldr	r2, [pc, #36]	; (b63c <_usb_d_dev_register_ep_callback+0x54>)
    b618:	68fb      	ldr	r3, [r7, #12]
    b61a:	60d3      	str	r3, [r2, #12]
}
    b61c:	e005      	b.n	b62a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b61e:	79fb      	ldrb	r3, [r7, #7]
    b620:	2b02      	cmp	r3, #2
    b622:	d102      	bne.n	b62a <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b624:	4a05      	ldr	r2, [pc, #20]	; (b63c <_usb_d_dev_register_ep_callback+0x54>)
    b626:	68fb      	ldr	r3, [r7, #12]
    b628:	6113      	str	r3, [r2, #16]
}
    b62a:	bf00      	nop
    b62c:	3714      	adds	r7, #20
    b62e:	46bd      	mov	sp, r7
    b630:	f85d 7b04 	ldr.w	r7, [sp], #4
    b634:	4770      	bx	lr
    b636:	bf00      	nop
    b638:	00009481 	.word	0x00009481
    b63c:	20000f3c 	.word	0x20000f3c

0000b640 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b640:	b580      	push	{r7, lr}
    b642:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b644:	4b01      	ldr	r3, [pc, #4]	; (b64c <USB_0_Handler+0xc>)
    b646:	4798      	blx	r3
}
    b648:	bf00      	nop
    b64a:	bd80      	pop	{r7, pc}
    b64c:	0000a8b1 	.word	0x0000a8b1

0000b650 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b650:	b580      	push	{r7, lr}
    b652:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b654:	4b01      	ldr	r3, [pc, #4]	; (b65c <USB_1_Handler+0xc>)
    b656:	4798      	blx	r3
}
    b658:	bf00      	nop
    b65a:	bd80      	pop	{r7, pc}
    b65c:	0000a8b1 	.word	0x0000a8b1

0000b660 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b660:	b580      	push	{r7, lr}
    b662:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b664:	4b01      	ldr	r3, [pc, #4]	; (b66c <USB_2_Handler+0xc>)
    b666:	4798      	blx	r3
}
    b668:	bf00      	nop
    b66a:	bd80      	pop	{r7, pc}
    b66c:	0000a8b1 	.word	0x0000a8b1

0000b670 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b670:	b580      	push	{r7, lr}
    b672:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b674:	4b01      	ldr	r3, [pc, #4]	; (b67c <USB_3_Handler+0xc>)
    b676:	4798      	blx	r3
}
    b678:	bf00      	nop
    b67a:	bd80      	pop	{r7, pc}
    b67c:	0000a8b1 	.word	0x0000a8b1

0000b680 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b680:	b480      	push	{r7}
    b682:	b083      	sub	sp, #12
    b684:	af00      	add	r7, sp, #0
    b686:	6078      	str	r0, [r7, #4]
    b688:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b68a:	bf00      	nop
    b68c:	687b      	ldr	r3, [r7, #4]
    b68e:	689a      	ldr	r2, [r3, #8]
    b690:	683b      	ldr	r3, [r7, #0]
    b692:	4013      	ands	r3, r2
    b694:	2b00      	cmp	r3, #0
    b696:	d1f9      	bne.n	b68c <hri_wdt_wait_for_sync+0xc>
	};
}
    b698:	bf00      	nop
    b69a:	370c      	adds	r7, #12
    b69c:	46bd      	mov	sp, r7
    b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6a2:	4770      	bx	lr

0000b6a4 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b6a4:	b580      	push	{r7, lr}
    b6a6:	b084      	sub	sp, #16
    b6a8:	af00      	add	r7, sp, #0
    b6aa:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b6ac:	210e      	movs	r1, #14
    b6ae:	6878      	ldr	r0, [r7, #4]
    b6b0:	4b0a      	ldr	r3, [pc, #40]	; (b6dc <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b6b2:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b6b4:	687b      	ldr	r3, [r7, #4]
    b6b6:	781b      	ldrb	r3, [r3, #0]
    b6b8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b6ba:	7bfb      	ldrb	r3, [r7, #15]
    b6bc:	085b      	lsrs	r3, r3, #1
    b6be:	b2db      	uxtb	r3, r3
    b6c0:	f003 0301 	and.w	r3, r3, #1
    b6c4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b6c6:	7bfb      	ldrb	r3, [r7, #15]
    b6c8:	2b00      	cmp	r3, #0
    b6ca:	bf14      	ite	ne
    b6cc:	2301      	movne	r3, #1
    b6ce:	2300      	moveq	r3, #0
    b6d0:	b2db      	uxtb	r3, r3
}
    b6d2:	4618      	mov	r0, r3
    b6d4:	3710      	adds	r7, #16
    b6d6:	46bd      	mov	sp, r7
    b6d8:	bd80      	pop	{r7, pc}
    b6da:	bf00      	nop
    b6dc:	0000b681 	.word	0x0000b681

0000b6e0 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b6e0:	b580      	push	{r7, lr}
    b6e2:	b082      	sub	sp, #8
    b6e4:	af00      	add	r7, sp, #0
    b6e6:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b6e8:	687b      	ldr	r3, [r7, #4]
    b6ea:	781b      	ldrb	r3, [r3, #0]
    b6ec:	b2db      	uxtb	r3, r3
    b6ee:	f023 0304 	bic.w	r3, r3, #4
    b6f2:	b2da      	uxtb	r2, r3
    b6f4:	687b      	ldr	r3, [r7, #4]
    b6f6:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b6f8:	210e      	movs	r1, #14
    b6fa:	6878      	ldr	r0, [r7, #4]
    b6fc:	4b02      	ldr	r3, [pc, #8]	; (b708 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b6fe:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b700:	bf00      	nop
    b702:	3708      	adds	r7, #8
    b704:	46bd      	mov	sp, r7
    b706:	bd80      	pop	{r7, pc}
    b708:	0000b681 	.word	0x0000b681

0000b70c <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b70c:	b580      	push	{r7, lr}
    b70e:	b084      	sub	sp, #16
    b710:	af00      	add	r7, sp, #0
    b712:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b714:	210e      	movs	r1, #14
    b716:	6878      	ldr	r0, [r7, #4]
    b718:	4b08      	ldr	r3, [pc, #32]	; (b73c <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b71a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b71c:	687b      	ldr	r3, [r7, #4]
    b71e:	781b      	ldrb	r3, [r3, #0]
    b720:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b722:	7bfb      	ldrb	r3, [r7, #15]
    b724:	09db      	lsrs	r3, r3, #7
    b726:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b728:	7bfb      	ldrb	r3, [r7, #15]
    b72a:	2b00      	cmp	r3, #0
    b72c:	bf14      	ite	ne
    b72e:	2301      	movne	r3, #1
    b730:	2300      	moveq	r3, #0
    b732:	b2db      	uxtb	r3, r3
}
    b734:	4618      	mov	r0, r3
    b736:	3710      	adds	r7, #16
    b738:	46bd      	mov	sp, r7
    b73a:	bd80      	pop	{r7, pc}
    b73c:	0000b681 	.word	0x0000b681

0000b740 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b740:	b480      	push	{r7}
    b742:	b085      	sub	sp, #20
    b744:	af00      	add	r7, sp, #0
    b746:	6078      	str	r0, [r7, #4]
    b748:	460b      	mov	r3, r1
    b74a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b74c:	687b      	ldr	r3, [r7, #4]
    b74e:	785b      	ldrb	r3, [r3, #1]
    b750:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b752:	7bfb      	ldrb	r3, [r7, #15]
    b754:	f023 030f 	bic.w	r3, r3, #15
    b758:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b75a:	78fb      	ldrb	r3, [r7, #3]
    b75c:	f003 030f 	and.w	r3, r3, #15
    b760:	b2da      	uxtb	r2, r3
    b762:	7bfb      	ldrb	r3, [r7, #15]
    b764:	4313      	orrs	r3, r2
    b766:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b768:	687b      	ldr	r3, [r7, #4]
    b76a:	7bfa      	ldrb	r2, [r7, #15]
    b76c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b76e:	bf00      	nop
    b770:	3714      	adds	r7, #20
    b772:	46bd      	mov	sp, r7
    b774:	f85d 7b04 	ldr.w	r7, [sp], #4
    b778:	4770      	bx	lr
	...

0000b77c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b77c:	b580      	push	{r7, lr}
    b77e:	b082      	sub	sp, #8
    b780:	af00      	add	r7, sp, #0
    b782:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b784:	687b      	ldr	r3, [r7, #4]
    b786:	2b00      	cmp	r3, #0
    b788:	d005      	beq.n	b796 <_wdt_init+0x1a>
    b78a:	687b      	ldr	r3, [r7, #4]
    b78c:	681b      	ldr	r3, [r3, #0]
    b78e:	2b00      	cmp	r3, #0
    b790:	d001      	beq.n	b796 <_wdt_init+0x1a>
    b792:	2301      	movs	r3, #1
    b794:	e000      	b.n	b798 <_wdt_init+0x1c>
    b796:	2300      	movs	r3, #0
    b798:	f003 0301 	and.w	r3, r3, #1
    b79c:	b2db      	uxtb	r3, r3
    b79e:	2250      	movs	r2, #80	; 0x50
    b7a0:	4913      	ldr	r1, [pc, #76]	; (b7f0 <_wdt_init+0x74>)
    b7a2:	4618      	mov	r0, r3
    b7a4:	4b13      	ldr	r3, [pc, #76]	; (b7f4 <_wdt_init+0x78>)
    b7a6:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b7a8:	687b      	ldr	r3, [r7, #4]
    b7aa:	681b      	ldr	r3, [r3, #0]
    b7ac:	4618      	mov	r0, r3
    b7ae:	4b12      	ldr	r3, [pc, #72]	; (b7f8 <_wdt_init+0x7c>)
    b7b0:	4798      	blx	r3
    b7b2:	4603      	mov	r3, r0
    b7b4:	2b00      	cmp	r3, #0
    b7b6:	d107      	bne.n	b7c8 <_wdt_init+0x4c>
    b7b8:	687b      	ldr	r3, [r7, #4]
    b7ba:	681b      	ldr	r3, [r3, #0]
    b7bc:	4618      	mov	r0, r3
    b7be:	4b0f      	ldr	r3, [pc, #60]	; (b7fc <_wdt_init+0x80>)
    b7c0:	4798      	blx	r3
    b7c2:	4603      	mov	r3, r0
    b7c4:	2b00      	cmp	r3, #0
    b7c6:	d002      	beq.n	b7ce <_wdt_init+0x52>
		return ERR_DENIED;
    b7c8:	f06f 0310 	mvn.w	r3, #16
    b7cc:	e00b      	b.n	b7e6 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b7ce:	687b      	ldr	r3, [r7, #4]
    b7d0:	681b      	ldr	r3, [r3, #0]
    b7d2:	4618      	mov	r0, r3
    b7d4:	4b0a      	ldr	r3, [pc, #40]	; (b800 <_wdt_init+0x84>)
    b7d6:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b7d8:	687b      	ldr	r3, [r7, #4]
    b7da:	681b      	ldr	r3, [r3, #0]
    b7dc:	210b      	movs	r1, #11
    b7de:	4618      	mov	r0, r3
    b7e0:	4b08      	ldr	r3, [pc, #32]	; (b804 <_wdt_init+0x88>)
    b7e2:	4798      	blx	r3
	}

	return ERR_NONE;
    b7e4:	2300      	movs	r3, #0
}
    b7e6:	4618      	mov	r0, r3
    b7e8:	3708      	adds	r7, #8
    b7ea:	46bd      	mov	sp, r7
    b7ec:	bd80      	pop	{r7, pc}
    b7ee:	bf00      	nop
    b7f0:	000141b8 	.word	0x000141b8
    b7f4:	000040dd 	.word	0x000040dd
    b7f8:	0000b70d 	.word	0x0000b70d
    b7fc:	0000b6a5 	.word	0x0000b6a5
    b800:	0000b6e1 	.word	0x0000b6e1
    b804:	0000b741 	.word	0x0000b741

0000b808 <hri_port_set_DIR_reg>:
{
    b808:	b480      	push	{r7}
    b80a:	b085      	sub	sp, #20
    b80c:	af00      	add	r7, sp, #0
    b80e:	60f8      	str	r0, [r7, #12]
    b810:	460b      	mov	r3, r1
    b812:	607a      	str	r2, [r7, #4]
    b814:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b816:	7afb      	ldrb	r3, [r7, #11]
    b818:	68fa      	ldr	r2, [r7, #12]
    b81a:	01db      	lsls	r3, r3, #7
    b81c:	4413      	add	r3, r2
    b81e:	3308      	adds	r3, #8
    b820:	687a      	ldr	r2, [r7, #4]
    b822:	601a      	str	r2, [r3, #0]
}
    b824:	bf00      	nop
    b826:	3714      	adds	r7, #20
    b828:	46bd      	mov	sp, r7
    b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b82e:	4770      	bx	lr

0000b830 <hri_port_clear_DIR_reg>:
{
    b830:	b480      	push	{r7}
    b832:	b085      	sub	sp, #20
    b834:	af00      	add	r7, sp, #0
    b836:	60f8      	str	r0, [r7, #12]
    b838:	460b      	mov	r3, r1
    b83a:	607a      	str	r2, [r7, #4]
    b83c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b83e:	7afb      	ldrb	r3, [r7, #11]
    b840:	68fa      	ldr	r2, [r7, #12]
    b842:	01db      	lsls	r3, r3, #7
    b844:	4413      	add	r3, r2
    b846:	3304      	adds	r3, #4
    b848:	687a      	ldr	r2, [r7, #4]
    b84a:	601a      	str	r2, [r3, #0]
}
    b84c:	bf00      	nop
    b84e:	3714      	adds	r7, #20
    b850:	46bd      	mov	sp, r7
    b852:	f85d 7b04 	ldr.w	r7, [sp], #4
    b856:	4770      	bx	lr

0000b858 <hri_port_set_OUT_reg>:
{
    b858:	b480      	push	{r7}
    b85a:	b085      	sub	sp, #20
    b85c:	af00      	add	r7, sp, #0
    b85e:	60f8      	str	r0, [r7, #12]
    b860:	460b      	mov	r3, r1
    b862:	607a      	str	r2, [r7, #4]
    b864:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b866:	7afb      	ldrb	r3, [r7, #11]
    b868:	68fa      	ldr	r2, [r7, #12]
    b86a:	01db      	lsls	r3, r3, #7
    b86c:	4413      	add	r3, r2
    b86e:	3318      	adds	r3, #24
    b870:	687a      	ldr	r2, [r7, #4]
    b872:	601a      	str	r2, [r3, #0]
}
    b874:	bf00      	nop
    b876:	3714      	adds	r7, #20
    b878:	46bd      	mov	sp, r7
    b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b87e:	4770      	bx	lr

0000b880 <hri_port_clear_OUT_reg>:
{
    b880:	b480      	push	{r7}
    b882:	b085      	sub	sp, #20
    b884:	af00      	add	r7, sp, #0
    b886:	60f8      	str	r0, [r7, #12]
    b888:	460b      	mov	r3, r1
    b88a:	607a      	str	r2, [r7, #4]
    b88c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b88e:	7afb      	ldrb	r3, [r7, #11]
    b890:	68fa      	ldr	r2, [r7, #12]
    b892:	01db      	lsls	r3, r3, #7
    b894:	4413      	add	r3, r2
    b896:	3314      	adds	r3, #20
    b898:	687a      	ldr	r2, [r7, #4]
    b89a:	601a      	str	r2, [r3, #0]
}
    b89c:	bf00      	nop
    b89e:	3714      	adds	r7, #20
    b8a0:	46bd      	mov	sp, r7
    b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8a6:	4770      	bx	lr

0000b8a8 <hri_port_write_PMUX_PMUXE_bf>:
{
    b8a8:	b480      	push	{r7}
    b8aa:	b085      	sub	sp, #20
    b8ac:	af00      	add	r7, sp, #0
    b8ae:	6078      	str	r0, [r7, #4]
    b8b0:	4608      	mov	r0, r1
    b8b2:	4611      	mov	r1, r2
    b8b4:	461a      	mov	r2, r3
    b8b6:	4603      	mov	r3, r0
    b8b8:	70fb      	strb	r3, [r7, #3]
    b8ba:	460b      	mov	r3, r1
    b8bc:	70bb      	strb	r3, [r7, #2]
    b8be:	4613      	mov	r3, r2
    b8c0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b8c2:	78fa      	ldrb	r2, [r7, #3]
    b8c4:	78bb      	ldrb	r3, [r7, #2]
    b8c6:	6879      	ldr	r1, [r7, #4]
    b8c8:	01d2      	lsls	r2, r2, #7
    b8ca:	440a      	add	r2, r1
    b8cc:	4413      	add	r3, r2
    b8ce:	3330      	adds	r3, #48	; 0x30
    b8d0:	781b      	ldrb	r3, [r3, #0]
    b8d2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b8d4:	7bfb      	ldrb	r3, [r7, #15]
    b8d6:	f023 030f 	bic.w	r3, r3, #15
    b8da:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b8dc:	787b      	ldrb	r3, [r7, #1]
    b8de:	f003 030f 	and.w	r3, r3, #15
    b8e2:	b2da      	uxtb	r2, r3
    b8e4:	7bfb      	ldrb	r3, [r7, #15]
    b8e6:	4313      	orrs	r3, r2
    b8e8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b8ea:	78fa      	ldrb	r2, [r7, #3]
    b8ec:	78bb      	ldrb	r3, [r7, #2]
    b8ee:	6879      	ldr	r1, [r7, #4]
    b8f0:	01d2      	lsls	r2, r2, #7
    b8f2:	440a      	add	r2, r1
    b8f4:	4413      	add	r3, r2
    b8f6:	3330      	adds	r3, #48	; 0x30
    b8f8:	7bfa      	ldrb	r2, [r7, #15]
    b8fa:	701a      	strb	r2, [r3, #0]
}
    b8fc:	bf00      	nop
    b8fe:	3714      	adds	r7, #20
    b900:	46bd      	mov	sp, r7
    b902:	f85d 7b04 	ldr.w	r7, [sp], #4
    b906:	4770      	bx	lr

0000b908 <hri_port_write_PMUX_PMUXO_bf>:
{
    b908:	b480      	push	{r7}
    b90a:	b085      	sub	sp, #20
    b90c:	af00      	add	r7, sp, #0
    b90e:	6078      	str	r0, [r7, #4]
    b910:	4608      	mov	r0, r1
    b912:	4611      	mov	r1, r2
    b914:	461a      	mov	r2, r3
    b916:	4603      	mov	r3, r0
    b918:	70fb      	strb	r3, [r7, #3]
    b91a:	460b      	mov	r3, r1
    b91c:	70bb      	strb	r3, [r7, #2]
    b91e:	4613      	mov	r3, r2
    b920:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b922:	78fa      	ldrb	r2, [r7, #3]
    b924:	78bb      	ldrb	r3, [r7, #2]
    b926:	6879      	ldr	r1, [r7, #4]
    b928:	01d2      	lsls	r2, r2, #7
    b92a:	440a      	add	r2, r1
    b92c:	4413      	add	r3, r2
    b92e:	3330      	adds	r3, #48	; 0x30
    b930:	781b      	ldrb	r3, [r3, #0]
    b932:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b934:	7bfb      	ldrb	r3, [r7, #15]
    b936:	f003 030f 	and.w	r3, r3, #15
    b93a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b93c:	787b      	ldrb	r3, [r7, #1]
    b93e:	011b      	lsls	r3, r3, #4
    b940:	b2da      	uxtb	r2, r3
    b942:	7bfb      	ldrb	r3, [r7, #15]
    b944:	4313      	orrs	r3, r2
    b946:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b948:	78fa      	ldrb	r2, [r7, #3]
    b94a:	78bb      	ldrb	r3, [r7, #2]
    b94c:	6879      	ldr	r1, [r7, #4]
    b94e:	01d2      	lsls	r2, r2, #7
    b950:	440a      	add	r2, r1
    b952:	4413      	add	r3, r2
    b954:	3330      	adds	r3, #48	; 0x30
    b956:	7bfa      	ldrb	r2, [r7, #15]
    b958:	701a      	strb	r2, [r3, #0]
}
    b95a:	bf00      	nop
    b95c:	3714      	adds	r7, #20
    b95e:	46bd      	mov	sp, r7
    b960:	f85d 7b04 	ldr.w	r7, [sp], #4
    b964:	4770      	bx	lr

0000b966 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b966:	b480      	push	{r7}
    b968:	b085      	sub	sp, #20
    b96a:	af00      	add	r7, sp, #0
    b96c:	6078      	str	r0, [r7, #4]
    b96e:	4608      	mov	r0, r1
    b970:	4611      	mov	r1, r2
    b972:	461a      	mov	r2, r3
    b974:	4603      	mov	r3, r0
    b976:	70fb      	strb	r3, [r7, #3]
    b978:	460b      	mov	r3, r1
    b97a:	70bb      	strb	r3, [r7, #2]
    b97c:	4613      	mov	r3, r2
    b97e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b980:	78fa      	ldrb	r2, [r7, #3]
    b982:	78bb      	ldrb	r3, [r7, #2]
    b984:	6879      	ldr	r1, [r7, #4]
    b986:	01d2      	lsls	r2, r2, #7
    b988:	440a      	add	r2, r1
    b98a:	4413      	add	r3, r2
    b98c:	3340      	adds	r3, #64	; 0x40
    b98e:	781b      	ldrb	r3, [r3, #0]
    b990:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b992:	7bfb      	ldrb	r3, [r7, #15]
    b994:	f023 0301 	bic.w	r3, r3, #1
    b998:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b99a:	787a      	ldrb	r2, [r7, #1]
    b99c:	7bfb      	ldrb	r3, [r7, #15]
    b99e:	4313      	orrs	r3, r2
    b9a0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b9a2:	78fa      	ldrb	r2, [r7, #3]
    b9a4:	78bb      	ldrb	r3, [r7, #2]
    b9a6:	6879      	ldr	r1, [r7, #4]
    b9a8:	01d2      	lsls	r2, r2, #7
    b9aa:	440a      	add	r2, r1
    b9ac:	4413      	add	r3, r2
    b9ae:	3340      	adds	r3, #64	; 0x40
    b9b0:	7bfa      	ldrb	r2, [r7, #15]
    b9b2:	701a      	strb	r2, [r3, #0]
}
    b9b4:	bf00      	nop
    b9b6:	3714      	adds	r7, #20
    b9b8:	46bd      	mov	sp, r7
    b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9be:	4770      	bx	lr

0000b9c0 <hri_port_write_WRCONFIG_reg>:
{
    b9c0:	b480      	push	{r7}
    b9c2:	b085      	sub	sp, #20
    b9c4:	af00      	add	r7, sp, #0
    b9c6:	60f8      	str	r0, [r7, #12]
    b9c8:	460b      	mov	r3, r1
    b9ca:	607a      	str	r2, [r7, #4]
    b9cc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b9ce:	7afb      	ldrb	r3, [r7, #11]
    b9d0:	68fa      	ldr	r2, [r7, #12]
    b9d2:	01db      	lsls	r3, r3, #7
    b9d4:	4413      	add	r3, r2
    b9d6:	3328      	adds	r3, #40	; 0x28
    b9d8:	687a      	ldr	r2, [r7, #4]
    b9da:	601a      	str	r2, [r3, #0]
}
    b9dc:	bf00      	nop
    b9de:	3714      	adds	r7, #20
    b9e0:	46bd      	mov	sp, r7
    b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9e6:	4770      	bx	lr

0000b9e8 <_gpio_set_direction>:
{
    b9e8:	b580      	push	{r7, lr}
    b9ea:	b082      	sub	sp, #8
    b9ec:	af00      	add	r7, sp, #0
    b9ee:	4603      	mov	r3, r0
    b9f0:	6039      	str	r1, [r7, #0]
    b9f2:	71fb      	strb	r3, [r7, #7]
    b9f4:	4613      	mov	r3, r2
    b9f6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b9f8:	79bb      	ldrb	r3, [r7, #6]
    b9fa:	2b01      	cmp	r3, #1
    b9fc:	d01c      	beq.n	ba38 <_gpio_set_direction+0x50>
    b9fe:	2b02      	cmp	r3, #2
    ba00:	d037      	beq.n	ba72 <_gpio_set_direction+0x8a>
    ba02:	2b00      	cmp	r3, #0
    ba04:	d14e      	bne.n	baa4 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ba06:	79fb      	ldrb	r3, [r7, #7]
    ba08:	683a      	ldr	r2, [r7, #0]
    ba0a:	4619      	mov	r1, r3
    ba0c:	482a      	ldr	r0, [pc, #168]	; (bab8 <_gpio_set_direction+0xd0>)
    ba0e:	4b2b      	ldr	r3, [pc, #172]	; (babc <_gpio_set_direction+0xd4>)
    ba10:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ba12:	683b      	ldr	r3, [r7, #0]
    ba14:	b29b      	uxth	r3, r3
    ba16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ba1a:	79fb      	ldrb	r3, [r7, #7]
    ba1c:	4619      	mov	r1, r3
    ba1e:	4826      	ldr	r0, [pc, #152]	; (bab8 <_gpio_set_direction+0xd0>)
    ba20:	4b27      	ldr	r3, [pc, #156]	; (bac0 <_gpio_set_direction+0xd8>)
    ba22:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ba24:	683b      	ldr	r3, [r7, #0]
    ba26:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ba28:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ba2c:	79fb      	ldrb	r3, [r7, #7]
    ba2e:	4619      	mov	r1, r3
    ba30:	4821      	ldr	r0, [pc, #132]	; (bab8 <_gpio_set_direction+0xd0>)
    ba32:	4b23      	ldr	r3, [pc, #140]	; (bac0 <_gpio_set_direction+0xd8>)
    ba34:	4798      	blx	r3
		break;
    ba36:	e03a      	b.n	baae <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ba38:	79fb      	ldrb	r3, [r7, #7]
    ba3a:	683a      	ldr	r2, [r7, #0]
    ba3c:	4619      	mov	r1, r3
    ba3e:	481e      	ldr	r0, [pc, #120]	; (bab8 <_gpio_set_direction+0xd0>)
    ba40:	4b1e      	ldr	r3, [pc, #120]	; (babc <_gpio_set_direction+0xd4>)
    ba42:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ba44:	683b      	ldr	r3, [r7, #0]
    ba46:	b29b      	uxth	r3, r3
    ba48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ba4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ba50:	79f9      	ldrb	r1, [r7, #7]
    ba52:	461a      	mov	r2, r3
    ba54:	4818      	ldr	r0, [pc, #96]	; (bab8 <_gpio_set_direction+0xd0>)
    ba56:	4b1a      	ldr	r3, [pc, #104]	; (bac0 <_gpio_set_direction+0xd8>)
    ba58:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    ba5a:	683b      	ldr	r3, [r7, #0]
    ba5c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ba5e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ba62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ba66:	79f9      	ldrb	r1, [r7, #7]
    ba68:	461a      	mov	r2, r3
    ba6a:	4813      	ldr	r0, [pc, #76]	; (bab8 <_gpio_set_direction+0xd0>)
    ba6c:	4b14      	ldr	r3, [pc, #80]	; (bac0 <_gpio_set_direction+0xd8>)
    ba6e:	4798      	blx	r3
		break;
    ba70:	e01d      	b.n	baae <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ba72:	79fb      	ldrb	r3, [r7, #7]
    ba74:	683a      	ldr	r2, [r7, #0]
    ba76:	4619      	mov	r1, r3
    ba78:	480f      	ldr	r0, [pc, #60]	; (bab8 <_gpio_set_direction+0xd0>)
    ba7a:	4b12      	ldr	r3, [pc, #72]	; (bac4 <_gpio_set_direction+0xdc>)
    ba7c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ba7e:	683b      	ldr	r3, [r7, #0]
    ba80:	b29b      	uxth	r3, r3
    ba82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ba86:	79fb      	ldrb	r3, [r7, #7]
    ba88:	4619      	mov	r1, r3
    ba8a:	480b      	ldr	r0, [pc, #44]	; (bab8 <_gpio_set_direction+0xd0>)
    ba8c:	4b0c      	ldr	r3, [pc, #48]	; (bac0 <_gpio_set_direction+0xd8>)
    ba8e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ba90:	683b      	ldr	r3, [r7, #0]
    ba92:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ba94:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ba98:	79fb      	ldrb	r3, [r7, #7]
    ba9a:	4619      	mov	r1, r3
    ba9c:	4806      	ldr	r0, [pc, #24]	; (bab8 <_gpio_set_direction+0xd0>)
    ba9e:	4b08      	ldr	r3, [pc, #32]	; (bac0 <_gpio_set_direction+0xd8>)
    baa0:	4798      	blx	r3
		break;
    baa2:	e004      	b.n	baae <_gpio_set_direction+0xc6>
		ASSERT(false);
    baa4:	2246      	movs	r2, #70	; 0x46
    baa6:	4908      	ldr	r1, [pc, #32]	; (bac8 <_gpio_set_direction+0xe0>)
    baa8:	2000      	movs	r0, #0
    baaa:	4b08      	ldr	r3, [pc, #32]	; (bacc <_gpio_set_direction+0xe4>)
    baac:	4798      	blx	r3
}
    baae:	bf00      	nop
    bab0:	3708      	adds	r7, #8
    bab2:	46bd      	mov	sp, r7
    bab4:	bd80      	pop	{r7, pc}
    bab6:	bf00      	nop
    bab8:	41008000 	.word	0x41008000
    babc:	0000b831 	.word	0x0000b831
    bac0:	0000b9c1 	.word	0x0000b9c1
    bac4:	0000b809 	.word	0x0000b809
    bac8:	000141d0 	.word	0x000141d0
    bacc:	000040dd 	.word	0x000040dd

0000bad0 <_gpio_set_level>:
{
    bad0:	b580      	push	{r7, lr}
    bad2:	b082      	sub	sp, #8
    bad4:	af00      	add	r7, sp, #0
    bad6:	4603      	mov	r3, r0
    bad8:	6039      	str	r1, [r7, #0]
    bada:	71fb      	strb	r3, [r7, #7]
    badc:	4613      	mov	r3, r2
    bade:	71bb      	strb	r3, [r7, #6]
	if (level) {
    bae0:	79bb      	ldrb	r3, [r7, #6]
    bae2:	2b00      	cmp	r3, #0
    bae4:	d006      	beq.n	baf4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    bae6:	79fb      	ldrb	r3, [r7, #7]
    bae8:	683a      	ldr	r2, [r7, #0]
    baea:	4619      	mov	r1, r3
    baec:	4806      	ldr	r0, [pc, #24]	; (bb08 <_gpio_set_level+0x38>)
    baee:	4b07      	ldr	r3, [pc, #28]	; (bb0c <_gpio_set_level+0x3c>)
    baf0:	4798      	blx	r3
}
    baf2:	e005      	b.n	bb00 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    baf4:	79fb      	ldrb	r3, [r7, #7]
    baf6:	683a      	ldr	r2, [r7, #0]
    baf8:	4619      	mov	r1, r3
    bafa:	4803      	ldr	r0, [pc, #12]	; (bb08 <_gpio_set_level+0x38>)
    bafc:	4b04      	ldr	r3, [pc, #16]	; (bb10 <_gpio_set_level+0x40>)
    bafe:	4798      	blx	r3
}
    bb00:	bf00      	nop
    bb02:	3708      	adds	r7, #8
    bb04:	46bd      	mov	sp, r7
    bb06:	bd80      	pop	{r7, pc}
    bb08:	41008000 	.word	0x41008000
    bb0c:	0000b859 	.word	0x0000b859
    bb10:	0000b881 	.word	0x0000b881

0000bb14 <_gpio_set_pin_function>:
{
    bb14:	b590      	push	{r4, r7, lr}
    bb16:	b085      	sub	sp, #20
    bb18:	af00      	add	r7, sp, #0
    bb1a:	6078      	str	r0, [r7, #4]
    bb1c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    bb1e:	687b      	ldr	r3, [r7, #4]
    bb20:	095b      	lsrs	r3, r3, #5
    bb22:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    bb24:	687b      	ldr	r3, [r7, #4]
    bb26:	b2db      	uxtb	r3, r3
    bb28:	f003 031f 	and.w	r3, r3, #31
    bb2c:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    bb2e:	683b      	ldr	r3, [r7, #0]
    bb30:	f1b3 3fff 	cmp.w	r3, #4294967295
    bb34:	d106      	bne.n	bb44 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    bb36:	7bba      	ldrb	r2, [r7, #14]
    bb38:	7bf9      	ldrb	r1, [r7, #15]
    bb3a:	2300      	movs	r3, #0
    bb3c:	4812      	ldr	r0, [pc, #72]	; (bb88 <_gpio_set_pin_function+0x74>)
    bb3e:	4c13      	ldr	r4, [pc, #76]	; (bb8c <_gpio_set_pin_function+0x78>)
    bb40:	47a0      	blx	r4
}
    bb42:	e01d      	b.n	bb80 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    bb44:	7bba      	ldrb	r2, [r7, #14]
    bb46:	7bf9      	ldrb	r1, [r7, #15]
    bb48:	2301      	movs	r3, #1
    bb4a:	480f      	ldr	r0, [pc, #60]	; (bb88 <_gpio_set_pin_function+0x74>)
    bb4c:	4c0f      	ldr	r4, [pc, #60]	; (bb8c <_gpio_set_pin_function+0x78>)
    bb4e:	47a0      	blx	r4
		if (pin & 1) {
    bb50:	7bbb      	ldrb	r3, [r7, #14]
    bb52:	f003 0301 	and.w	r3, r3, #1
    bb56:	2b00      	cmp	r3, #0
    bb58:	d009      	beq.n	bb6e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    bb5a:	7bbb      	ldrb	r3, [r7, #14]
    bb5c:	085b      	lsrs	r3, r3, #1
    bb5e:	b2da      	uxtb	r2, r3
    bb60:	683b      	ldr	r3, [r7, #0]
    bb62:	b2db      	uxtb	r3, r3
    bb64:	7bf9      	ldrb	r1, [r7, #15]
    bb66:	4808      	ldr	r0, [pc, #32]	; (bb88 <_gpio_set_pin_function+0x74>)
    bb68:	4c09      	ldr	r4, [pc, #36]	; (bb90 <_gpio_set_pin_function+0x7c>)
    bb6a:	47a0      	blx	r4
}
    bb6c:	e008      	b.n	bb80 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    bb6e:	7bbb      	ldrb	r3, [r7, #14]
    bb70:	085b      	lsrs	r3, r3, #1
    bb72:	b2da      	uxtb	r2, r3
    bb74:	683b      	ldr	r3, [r7, #0]
    bb76:	b2db      	uxtb	r3, r3
    bb78:	7bf9      	ldrb	r1, [r7, #15]
    bb7a:	4803      	ldr	r0, [pc, #12]	; (bb88 <_gpio_set_pin_function+0x74>)
    bb7c:	4c05      	ldr	r4, [pc, #20]	; (bb94 <_gpio_set_pin_function+0x80>)
    bb7e:	47a0      	blx	r4
}
    bb80:	bf00      	nop
    bb82:	3714      	adds	r7, #20
    bb84:	46bd      	mov	sp, r7
    bb86:	bd90      	pop	{r4, r7, pc}
    bb88:	41008000 	.word	0x41008000
    bb8c:	0000b967 	.word	0x0000b967
    bb90:	0000b909 	.word	0x0000b909
    bb94:	0000b8a9 	.word	0x0000b8a9

0000bb98 <gpio_set_pin_function>:
{
    bb98:	b580      	push	{r7, lr}
    bb9a:	b082      	sub	sp, #8
    bb9c:	af00      	add	r7, sp, #0
    bb9e:	6078      	str	r0, [r7, #4]
    bba0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    bba2:	6839      	ldr	r1, [r7, #0]
    bba4:	6878      	ldr	r0, [r7, #4]
    bba6:	4b03      	ldr	r3, [pc, #12]	; (bbb4 <gpio_set_pin_function+0x1c>)
    bba8:	4798      	blx	r3
}
    bbaa:	bf00      	nop
    bbac:	3708      	adds	r7, #8
    bbae:	46bd      	mov	sp, r7
    bbb0:	bd80      	pop	{r7, pc}
    bbb2:	bf00      	nop
    bbb4:	0000bb15 	.word	0x0000bb15

0000bbb8 <gpio_set_pin_direction>:
{
    bbb8:	b580      	push	{r7, lr}
    bbba:	b082      	sub	sp, #8
    bbbc:	af00      	add	r7, sp, #0
    bbbe:	4603      	mov	r3, r0
    bbc0:	460a      	mov	r2, r1
    bbc2:	71fb      	strb	r3, [r7, #7]
    bbc4:	4613      	mov	r3, r2
    bbc6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    bbc8:	79fb      	ldrb	r3, [r7, #7]
    bbca:	095b      	lsrs	r3, r3, #5
    bbcc:	b2d8      	uxtb	r0, r3
    bbce:	79fb      	ldrb	r3, [r7, #7]
    bbd0:	f003 031f 	and.w	r3, r3, #31
    bbd4:	2201      	movs	r2, #1
    bbd6:	fa02 f303 	lsl.w	r3, r2, r3
    bbda:	79ba      	ldrb	r2, [r7, #6]
    bbdc:	4619      	mov	r1, r3
    bbde:	4b03      	ldr	r3, [pc, #12]	; (bbec <gpio_set_pin_direction+0x34>)
    bbe0:	4798      	blx	r3
}
    bbe2:	bf00      	nop
    bbe4:	3708      	adds	r7, #8
    bbe6:	46bd      	mov	sp, r7
    bbe8:	bd80      	pop	{r7, pc}
    bbea:	bf00      	nop
    bbec:	0000b9e9 	.word	0x0000b9e9

0000bbf0 <gpio_set_pin_level>:
{
    bbf0:	b580      	push	{r7, lr}
    bbf2:	b082      	sub	sp, #8
    bbf4:	af00      	add	r7, sp, #0
    bbf6:	4603      	mov	r3, r0
    bbf8:	460a      	mov	r2, r1
    bbfa:	71fb      	strb	r3, [r7, #7]
    bbfc:	4613      	mov	r3, r2
    bbfe:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    bc00:	79fb      	ldrb	r3, [r7, #7]
    bc02:	095b      	lsrs	r3, r3, #5
    bc04:	b2d8      	uxtb	r0, r3
    bc06:	79fb      	ldrb	r3, [r7, #7]
    bc08:	f003 031f 	and.w	r3, r3, #31
    bc0c:	2201      	movs	r2, #1
    bc0e:	fa02 f303 	lsl.w	r3, r2, r3
    bc12:	79ba      	ldrb	r2, [r7, #6]
    bc14:	4619      	mov	r1, r3
    bc16:	4b03      	ldr	r3, [pc, #12]	; (bc24 <gpio_set_pin_level+0x34>)
    bc18:	4798      	blx	r3
}
    bc1a:	bf00      	nop
    bc1c:	3708      	adds	r7, #8
    bc1e:	46bd      	mov	sp, r7
    bc20:	bd80      	pop	{r7, pc}
    bc22:	bf00      	nop
    bc24:	0000bad1 	.word	0x0000bad1

0000bc28 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    bc28:	b580      	push	{r7, lr}
    bc2a:	b082      	sub	sp, #8
    bc2c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    bc2e:	2100      	movs	r1, #0
    bc30:	2008      	movs	r0, #8
    bc32:	4b24      	ldr	r3, [pc, #144]	; (bcc4 <QSPI_N25Q256_exit_xip+0x9c>)
    bc34:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    bc36:	2100      	movs	r1, #0
    bc38:	202b      	movs	r0, #43	; 0x2b
    bc3a:	4b22      	ldr	r3, [pc, #136]	; (bcc4 <QSPI_N25Q256_exit_xip+0x9c>)
    bc3c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    bc3e:	2100      	movs	r1, #0
    bc40:	202a      	movs	r0, #42	; 0x2a
    bc42:	4b20      	ldr	r3, [pc, #128]	; (bcc4 <QSPI_N25Q256_exit_xip+0x9c>)
    bc44:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    bc46:	2102      	movs	r1, #2
    bc48:	2008      	movs	r0, #8
    bc4a:	4b1f      	ldr	r3, [pc, #124]	; (bcc8 <QSPI_N25Q256_exit_xip+0xa0>)
    bc4c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    bc4e:	2102      	movs	r1, #2
    bc50:	202b      	movs	r0, #43	; 0x2b
    bc52:	4b1d      	ldr	r3, [pc, #116]	; (bcc8 <QSPI_N25Q256_exit_xip+0xa0>)
    bc54:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    bc56:	2102      	movs	r1, #2
    bc58:	202a      	movs	r0, #42	; 0x2a
    bc5a:	4b1b      	ldr	r3, [pc, #108]	; (bcc8 <QSPI_N25Q256_exit_xip+0xa0>)
    bc5c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    bc5e:	2101      	movs	r1, #1
    bc60:	2008      	movs	r0, #8
    bc62:	4b1a      	ldr	r3, [pc, #104]	; (bccc <QSPI_N25Q256_exit_xip+0xa4>)
    bc64:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    bc66:	2100      	movs	r1, #0
    bc68:	202b      	movs	r0, #43	; 0x2b
    bc6a:	4b18      	ldr	r3, [pc, #96]	; (bccc <QSPI_N25Q256_exit_xip+0xa4>)
    bc6c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    bc6e:	2100      	movs	r1, #0
    bc70:	202a      	movs	r0, #42	; 0x2a
    bc72:	4b16      	ldr	r3, [pc, #88]	; (bccc <QSPI_N25Q256_exit_xip+0xa4>)
    bc74:	4798      	blx	r3

	delay_us(1);
    bc76:	2001      	movs	r0, #1
    bc78:	4b15      	ldr	r3, [pc, #84]	; (bcd0 <QSPI_N25Q256_exit_xip+0xa8>)
    bc7a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    bc7c:	2300      	movs	r3, #0
    bc7e:	607b      	str	r3, [r7, #4]
    bc80:	e010      	b.n	bca4 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    bc82:	2101      	movs	r1, #1
    bc84:	202a      	movs	r0, #42	; 0x2a
    bc86:	4b11      	ldr	r3, [pc, #68]	; (bccc <QSPI_N25Q256_exit_xip+0xa4>)
    bc88:	4798      	blx	r3
		delay_us(1);
    bc8a:	2001      	movs	r0, #1
    bc8c:	4b10      	ldr	r3, [pc, #64]	; (bcd0 <QSPI_N25Q256_exit_xip+0xa8>)
    bc8e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    bc90:	2100      	movs	r1, #0
    bc92:	202a      	movs	r0, #42	; 0x2a
    bc94:	4b0d      	ldr	r3, [pc, #52]	; (bccc <QSPI_N25Q256_exit_xip+0xa4>)
    bc96:	4798      	blx	r3
		delay_us(1);
    bc98:	2001      	movs	r0, #1
    bc9a:	4b0d      	ldr	r3, [pc, #52]	; (bcd0 <QSPI_N25Q256_exit_xip+0xa8>)
    bc9c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    bc9e:	687b      	ldr	r3, [r7, #4]
    bca0:	3301      	adds	r3, #1
    bca2:	607b      	str	r3, [r7, #4]
    bca4:	687b      	ldr	r3, [r7, #4]
    bca6:	2b06      	cmp	r3, #6
    bca8:	ddeb      	ble.n	bc82 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    bcaa:	2101      	movs	r1, #1
    bcac:	202b      	movs	r0, #43	; 0x2b
    bcae:	4b07      	ldr	r3, [pc, #28]	; (bccc <QSPI_N25Q256_exit_xip+0xa4>)
    bcb0:	4798      	blx	r3
	delay_us(1);
    bcb2:	2001      	movs	r0, #1
    bcb4:	4b06      	ldr	r3, [pc, #24]	; (bcd0 <QSPI_N25Q256_exit_xip+0xa8>)
    bcb6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    bcb8:	4b06      	ldr	r3, [pc, #24]	; (bcd4 <QSPI_N25Q256_exit_xip+0xac>)
    bcba:	4798      	blx	r3
}
    bcbc:	bf00      	nop
    bcbe:	3708      	adds	r7, #8
    bcc0:	46bd      	mov	sp, r7
    bcc2:	bd80      	pop	{r7, pc}
    bcc4:	0000bb99 	.word	0x0000bb99
    bcc8:	0000bbb9 	.word	0x0000bbb9
    bccc:	0000bbf1 	.word	0x0000bbf1
    bcd0:	00002a4d 	.word	0x00002a4d
    bcd4:	00001da9 	.word	0x00001da9

0000bcd8 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    bcd8:	b598      	push	{r3, r4, r7, lr}
    bcda:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    bcdc:	4806      	ldr	r0, [pc, #24]	; (bcf8 <spi_nor_flash_init+0x20>)
    bcde:	4b07      	ldr	r3, [pc, #28]	; (bcfc <spi_nor_flash_init+0x24>)
    bce0:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    bce2:	2300      	movs	r3, #0
    bce4:	4a06      	ldr	r2, [pc, #24]	; (bd00 <spi_nor_flash_init+0x28>)
    bce6:	4904      	ldr	r1, [pc, #16]	; (bcf8 <spi_nor_flash_init+0x20>)
    bce8:	4806      	ldr	r0, [pc, #24]	; (bd04 <spi_nor_flash_init+0x2c>)
    bcea:	4c07      	ldr	r4, [pc, #28]	; (bd08 <spi_nor_flash_init+0x30>)
    bcec:	47a0      	blx	r4
    bcee:	4602      	mov	r2, r0
    bcf0:	4b06      	ldr	r3, [pc, #24]	; (bd0c <spi_nor_flash_init+0x34>)
    bcf2:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    bcf4:	bf00      	nop
    bcf6:	bd98      	pop	{r3, r4, r7, pc}
    bcf8:	20009e50 	.word	0x20009e50
    bcfc:	00002f85 	.word	0x00002f85
    bd00:	0000bc29 	.word	0x0000bc29
    bd04:	200010a4 	.word	0x200010a4
    bd08:	0000c145 	.word	0x0000c145
    bd0c:	2000a050 	.word	0x2000a050

0000bd10 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    bd10:	b580      	push	{r7, lr}
    bd12:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    bd14:	4805      	ldr	r0, [pc, #20]	; (bd2c <cdc_device_acm_init+0x1c>)
    bd16:	4b06      	ldr	r3, [pc, #24]	; (bd30 <cdc_device_acm_init+0x20>)
    bd18:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    bd1a:	4b06      	ldr	r3, [pc, #24]	; (bd34 <cdc_device_acm_init+0x24>)
    bd1c:	4798      	blx	r3

	usbdc_start(single_desc);
    bd1e:	4806      	ldr	r0, [pc, #24]	; (bd38 <cdc_device_acm_init+0x28>)
    bd20:	4b06      	ldr	r3, [pc, #24]	; (bd3c <cdc_device_acm_init+0x2c>)
    bd22:	4798      	blx	r3
	usbdc_attach();
    bd24:	4b06      	ldr	r3, [pc, #24]	; (bd40 <cdc_device_acm_init+0x30>)
    bd26:	4798      	blx	r3
}
    bd28:	bf00      	nop
    bd2a:	bd80      	pop	{r7, pc}
    bd2c:	200010f4 	.word	0x200010f4
    bd30:	0000d86d 	.word	0x0000d86d
    bd34:	0000cae5 	.word	0x0000cae5
    bd38:	20000200 	.word	0x20000200
    bd3c:	0000d909 	.word	0x0000d909
    bd40:	0000d959 	.word	0x0000d959

0000bd44 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    bd44:	b580      	push	{r7, lr}
    bd46:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    bd48:	4b01      	ldr	r3, [pc, #4]	; (bd50 <usb_init+0xc>)
    bd4a:	4798      	blx	r3
}
    bd4c:	bf00      	nop
    bd4e:	bd80      	pop	{r7, pc}
    bd50:	0000bd11 	.word	0x0000bd11

0000bd54 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    bd54:	b480      	push	{r7}
    bd56:	b085      	sub	sp, #20
    bd58:	af00      	add	r7, sp, #0
    bd5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    bd5c:	f3ef 8310 	mrs	r3, PRIMASK
    bd60:	60fb      	str	r3, [r7, #12]
  return(result);
    bd62:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    bd64:	687b      	ldr	r3, [r7, #4]
    bd66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    bd68:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    bd6a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    bd6e:	bf00      	nop
    bd70:	3714      	adds	r7, #20
    bd72:	46bd      	mov	sp, r7
    bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd78:	4770      	bx	lr

0000bd7a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    bd7a:	b480      	push	{r7}
    bd7c:	b085      	sub	sp, #20
    bd7e:	af00      	add	r7, sp, #0
    bd80:	6078      	str	r0, [r7, #4]
    bd82:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    bd86:	687b      	ldr	r3, [r7, #4]
    bd88:	681b      	ldr	r3, [r3, #0]
    bd8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    bd8c:	68fb      	ldr	r3, [r7, #12]
    bd8e:	f383 8810 	msr	PRIMASK, r3
}
    bd92:	bf00      	nop
    bd94:	3714      	adds	r7, #20
    bd96:	46bd      	mov	sp, r7
    bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd9c:	4770      	bx	lr
	...

0000bda0 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    bda0:	b580      	push	{r7, lr}
    bda2:	b08c      	sub	sp, #48	; 0x30
    bda4:	af00      	add	r7, sp, #0
    bda6:	6078      	str	r0, [r7, #4]
    bda8:	460b      	mov	r3, r1
    bdaa:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bdac:	687b      	ldr	r3, [r7, #4]
    bdae:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bdb0:	687b      	ldr	r3, [r7, #4]
    bdb2:	681b      	ldr	r3, [r3, #0]
    bdb4:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    bdb6:	f107 030c 	add.w	r3, r7, #12
    bdba:	2200      	movs	r2, #0
    bdbc:	601a      	str	r2, [r3, #0]
    bdbe:	605a      	str	r2, [r3, #4]
    bdc0:	609a      	str	r2, [r3, #8]
    bdc2:	60da      	str	r2, [r3, #12]
    bdc4:	611a      	str	r2, [r3, #16]
    bdc6:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bdca:	7b1b      	ldrb	r3, [r3, #12]
    bdcc:	2b00      	cmp	r3, #0
    bdce:	d001      	beq.n	bdd4 <n25q256a_xip_confirm+0x34>
    bdd0:	2206      	movs	r2, #6
    bdd2:	e000      	b.n	bdd6 <n25q256a_xip_confirm+0x36>
    bdd4:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bdd6:	7b3b      	ldrb	r3, [r7, #12]
    bdd8:	f362 0302 	bfi	r3, r2, #0, #3
    bddc:	733b      	strb	r3, [r7, #12]
    bdde:	7b3b      	ldrb	r3, [r7, #12]
    bde0:	f043 0310 	orr.w	r3, r3, #16
    bde4:	733b      	strb	r3, [r7, #12]
    bde6:	7b3b      	ldrb	r3, [r7, #12]
    bde8:	f043 0320 	orr.w	r3, r3, #32
    bdec:	733b      	strb	r3, [r7, #12]
    bdee:	7b3b      	ldrb	r3, [r7, #12]
    bdf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bdf4:	733b      	strb	r3, [r7, #12]
    bdf6:	7b3b      	ldrb	r3, [r7, #12]
    bdf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bdfc:	733b      	strb	r3, [r7, #12]
    bdfe:	7b7b      	ldrb	r3, [r7, #13]
    be00:	f043 0303 	orr.w	r3, r3, #3
    be04:	737b      	strb	r3, [r7, #13]
    be06:	7b7b      	ldrb	r3, [r7, #13]
    be08:	2201      	movs	r2, #1
    be0a:	f362 1305 	bfi	r3, r2, #4, #2
    be0e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    be10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be12:	7b1b      	ldrb	r3, [r3, #12]
    be14:	2b00      	cmp	r3, #0
    be16:	d001      	beq.n	be1c <n25q256a_xip_confirm+0x7c>
    be18:	2208      	movs	r2, #8
    be1a:	e000      	b.n	be1e <n25q256a_xip_confirm+0x7e>
    be1c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    be1e:	7bbb      	ldrb	r3, [r7, #14]
    be20:	f362 0304 	bfi	r3, r2, #0, #5
    be24:	73bb      	strb	r3, [r7, #14]
    be26:	230b      	movs	r3, #11
    be28:	743b      	strb	r3, [r7, #16]
    be2a:	78fb      	ldrb	r3, [r7, #3]
    be2c:	2b00      	cmp	r3, #0
    be2e:	d001      	beq.n	be34 <n25q256a_xip_confirm+0x94>
    be30:	2300      	movs	r3, #0
    be32:	e000      	b.n	be36 <n25q256a_xip_confirm+0x96>
    be34:	23ff      	movs	r3, #255	; 0xff
    be36:	747b      	strb	r3, [r7, #17]
    be38:	2301      	movs	r3, #1
    be3a:	61bb      	str	r3, [r7, #24]
    be3c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    be40:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    be42:	f107 030c 	add.w	r3, r7, #12
    be46:	4619      	mov	r1, r3
    be48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    be4a:	4b07      	ldr	r3, [pc, #28]	; (be68 <n25q256a_xip_confirm+0xc8>)
    be4c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    be4e:	78fb      	ldrb	r3, [r7, #3]
    be50:	2b00      	cmp	r3, #0
    be52:	d001      	beq.n	be58 <n25q256a_xip_confirm+0xb8>
    be54:	2202      	movs	r2, #2
    be56:	e000      	b.n	be5a <n25q256a_xip_confirm+0xba>
    be58:	2201      	movs	r2, #1
    be5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be5c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    be5e:	2300      	movs	r3, #0
}
    be60:	4618      	mov	r0, r3
    be62:	3730      	adds	r7, #48	; 0x30
    be64:	46bd      	mov	sp, r7
    be66:	bd80      	pop	{r7, pc}
    be68:	00002ffd 	.word	0x00002ffd

0000be6c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    be6c:	b580      	push	{r7, lr}
    be6e:	b08c      	sub	sp, #48	; 0x30
    be70:	af00      	add	r7, sp, #0
    be72:	6078      	str	r0, [r7, #4]
    be74:	460b      	mov	r3, r1
    be76:	70fb      	strb	r3, [r7, #3]
    be78:	4613      	mov	r3, r2
    be7a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    be7c:	2300      	movs	r3, #0
    be7e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    be80:	687b      	ldr	r3, [r7, #4]
    be82:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    be84:	687b      	ldr	r3, [r7, #4]
    be86:	681b      	ldr	r3, [r3, #0]
    be88:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    be8a:	f107 030c 	add.w	r3, r7, #12
    be8e:	2200      	movs	r2, #0
    be90:	601a      	str	r2, [r3, #0]
    be92:	605a      	str	r2, [r3, #4]
    be94:	609a      	str	r2, [r3, #8]
    be96:	60da      	str	r2, [r3, #12]
    be98:	611a      	str	r2, [r3, #16]
    be9a:	615a      	str	r2, [r3, #20]
    be9c:	78fb      	ldrb	r3, [r7, #3]
    be9e:	f003 0307 	and.w	r3, r3, #7
    bea2:	b2da      	uxtb	r2, r3
    bea4:	7b3b      	ldrb	r3, [r7, #12]
    bea6:	f362 0302 	bfi	r3, r2, #0, #3
    beaa:	733b      	strb	r3, [r7, #12]
    beac:	7b3b      	ldrb	r3, [r7, #12]
    beae:	f043 0310 	orr.w	r3, r3, #16
    beb2:	733b      	strb	r3, [r7, #12]
    beb4:	7b3b      	ldrb	r3, [r7, #12]
    beb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    beba:	733b      	strb	r3, [r7, #12]
    bebc:	78bb      	ldrb	r3, [r7, #2]
    bebe:	743b      	strb	r3, [r7, #16]
    bec0:	2301      	movs	r3, #1
    bec2:	61bb      	str	r3, [r7, #24]
    bec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    bec8:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    beca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    becc:	7b5b      	ldrb	r3, [r3, #13]
    bece:	2b00      	cmp	r3, #0
    bed0:	d003      	beq.n	beda <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    bed2:	2100      	movs	r1, #0
    bed4:	6878      	ldr	r0, [r7, #4]
    bed6:	4b0a      	ldr	r3, [pc, #40]	; (bf00 <n25q256a_read_reg+0x94>)
    bed8:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    beda:	f107 030c 	add.w	r3, r7, #12
    bede:	4619      	mov	r1, r3
    bee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bee2:	4b08      	ldr	r3, [pc, #32]	; (bf04 <n25q256a_read_reg+0x98>)
    bee4:	4798      	blx	r3
	if (n25q->xip_mode) {
    bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bee8:	7b5b      	ldrb	r3, [r3, #13]
    beea:	2b00      	cmp	r3, #0
    beec:	d003      	beq.n	bef6 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    beee:	2101      	movs	r1, #1
    bef0:	6878      	ldr	r0, [r7, #4]
    bef2:	4b03      	ldr	r3, [pc, #12]	; (bf00 <n25q256a_read_reg+0x94>)
    bef4:	4798      	blx	r3
	}
	return status;
    bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    bef8:	4618      	mov	r0, r3
    befa:	3730      	adds	r7, #48	; 0x30
    befc:	46bd      	mov	sp, r7
    befe:	bd80      	pop	{r7, pc}
    bf00:	0000bda1 	.word	0x0000bda1
    bf04:	00002ffd 	.word	0x00002ffd

0000bf08 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    bf08:	b580      	push	{r7, lr}
    bf0a:	b08c      	sub	sp, #48	; 0x30
    bf0c:	af00      	add	r7, sp, #0
    bf0e:	60f8      	str	r0, [r7, #12]
    bf10:	607b      	str	r3, [r7, #4]
    bf12:	460b      	mov	r3, r1
    bf14:	72fb      	strb	r3, [r7, #11]
    bf16:	4613      	mov	r3, r2
    bf18:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bf1a:	68fb      	ldr	r3, [r7, #12]
    bf1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bf1e:	68fb      	ldr	r3, [r7, #12]
    bf20:	681b      	ldr	r3, [r3, #0]
    bf22:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    bf24:	f107 0310 	add.w	r3, r7, #16
    bf28:	2200      	movs	r2, #0
    bf2a:	601a      	str	r2, [r3, #0]
    bf2c:	605a      	str	r2, [r3, #4]
    bf2e:	609a      	str	r2, [r3, #8]
    bf30:	60da      	str	r2, [r3, #12]
    bf32:	611a      	str	r2, [r3, #16]
    bf34:	615a      	str	r2, [r3, #20]
    bf36:	7afb      	ldrb	r3, [r7, #11]
    bf38:	f003 0307 	and.w	r3, r3, #7
    bf3c:	b2da      	uxtb	r2, r3
    bf3e:	7c3b      	ldrb	r3, [r7, #16]
    bf40:	f362 0302 	bfi	r3, r2, #0, #3
    bf44:	743b      	strb	r3, [r7, #16]
    bf46:	7c3b      	ldrb	r3, [r7, #16]
    bf48:	f043 0310 	orr.w	r3, r3, #16
    bf4c:	743b      	strb	r3, [r7, #16]
    bf4e:	7c3b      	ldrb	r3, [r7, #16]
    bf50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bf54:	743b      	strb	r3, [r7, #16]
    bf56:	7c7b      	ldrb	r3, [r7, #17]
    bf58:	2202      	movs	r2, #2
    bf5a:	f362 1305 	bfi	r3, r2, #4, #2
    bf5e:	747b      	strb	r3, [r7, #17]
    bf60:	7abb      	ldrb	r3, [r7, #10]
    bf62:	753b      	strb	r3, [r7, #20]
    bf64:	2301      	movs	r3, #1
    bf66:	61fb      	str	r3, [r7, #28]
    bf68:	1d3b      	adds	r3, r7, #4
    bf6a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    bf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf6e:	7b5b      	ldrb	r3, [r3, #13]
    bf70:	2b00      	cmp	r3, #0
    bf72:	d003      	beq.n	bf7c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    bf74:	2100      	movs	r1, #0
    bf76:	68f8      	ldr	r0, [r7, #12]
    bf78:	4b09      	ldr	r3, [pc, #36]	; (bfa0 <n25q256a_write_reg+0x98>)
    bf7a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bf7c:	f107 0310 	add.w	r3, r7, #16
    bf80:	4619      	mov	r1, r3
    bf82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bf84:	4b07      	ldr	r3, [pc, #28]	; (bfa4 <n25q256a_write_reg+0x9c>)
    bf86:	4798      	blx	r3
	if (n25q->xip_mode) {
    bf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf8a:	7b5b      	ldrb	r3, [r3, #13]
    bf8c:	2b00      	cmp	r3, #0
    bf8e:	d003      	beq.n	bf98 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    bf90:	2101      	movs	r1, #1
    bf92:	68f8      	ldr	r0, [r7, #12]
    bf94:	4b02      	ldr	r3, [pc, #8]	; (bfa0 <n25q256a_write_reg+0x98>)
    bf96:	4798      	blx	r3
	}
}
    bf98:	bf00      	nop
    bf9a:	3730      	adds	r7, #48	; 0x30
    bf9c:	46bd      	mov	sp, r7
    bf9e:	bd80      	pop	{r7, pc}
    bfa0:	0000bda1 	.word	0x0000bda1
    bfa4:	00002ffd 	.word	0x00002ffd

0000bfa8 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    bfa8:	b580      	push	{r7, lr}
    bfaa:	b090      	sub	sp, #64	; 0x40
    bfac:	af00      	add	r7, sp, #0
    bfae:	6078      	str	r0, [r7, #4]
    bfb0:	460b      	mov	r3, r1
    bfb2:	70fb      	strb	r3, [r7, #3]
    bfb4:	4613      	mov	r3, r2
    bfb6:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bfb8:	687b      	ldr	r3, [r7, #4]
    bfba:	681b      	ldr	r3, [r3, #0]
    bfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    bfbe:	78bb      	ldrb	r3, [r7, #2]
    bfc0:	2b00      	cmp	r3, #0
    bfc2:	d001      	beq.n	bfc8 <n25q256a_write_enable+0x20>
    bfc4:	2306      	movs	r3, #6
    bfc6:	e000      	b.n	bfca <n25q256a_write_enable+0x22>
    bfc8:	2304      	movs	r3, #4
    bfca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    bfce:	f107 0320 	add.w	r3, r7, #32
    bfd2:	2200      	movs	r2, #0
    bfd4:	601a      	str	r2, [r3, #0]
    bfd6:	605a      	str	r2, [r3, #4]
    bfd8:	609a      	str	r2, [r3, #8]
    bfda:	60da      	str	r2, [r3, #12]
    bfdc:	611a      	str	r2, [r3, #16]
    bfde:	615a      	str	r2, [r3, #20]
    bfe0:	78fb      	ldrb	r3, [r7, #3]
    bfe2:	f003 0307 	and.w	r3, r3, #7
    bfe6:	b2da      	uxtb	r2, r3
    bfe8:	f897 3020 	ldrb.w	r3, [r7, #32]
    bfec:	f362 0302 	bfi	r3, r2, #0, #3
    bff0:	f887 3020 	strb.w	r3, [r7, #32]
    bff4:	f897 3020 	ldrb.w	r3, [r7, #32]
    bff8:	f043 0310 	orr.w	r3, r3, #16
    bffc:	f887 3020 	strb.w	r3, [r7, #32]
    c000:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    c004:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    c008:	f107 0308 	add.w	r3, r7, #8
    c00c:	2200      	movs	r2, #0
    c00e:	601a      	str	r2, [r3, #0]
    c010:	605a      	str	r2, [r3, #4]
    c012:	609a      	str	r2, [r3, #8]
    c014:	60da      	str	r2, [r3, #12]
    c016:	611a      	str	r2, [r3, #16]
    c018:	615a      	str	r2, [r3, #20]
    c01a:	78fb      	ldrb	r3, [r7, #3]
    c01c:	f003 0307 	and.w	r3, r3, #7
    c020:	b2da      	uxtb	r2, r3
    c022:	7a3b      	ldrb	r3, [r7, #8]
    c024:	f362 0302 	bfi	r3, r2, #0, #3
    c028:	723b      	strb	r3, [r7, #8]
    c02a:	7a3b      	ldrb	r3, [r7, #8]
    c02c:	f043 0310 	orr.w	r3, r3, #16
    c030:	723b      	strb	r3, [r7, #8]
    c032:	7a3b      	ldrb	r3, [r7, #8]
    c034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c038:	723b      	strb	r3, [r7, #8]
    c03a:	2305      	movs	r3, #5
    c03c:	733b      	strb	r3, [r7, #12]
    c03e:	2301      	movs	r3, #1
    c040:	617b      	str	r3, [r7, #20]
    c042:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    c046:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    c048:	f107 0320 	add.w	r3, r7, #32
    c04c:	4619      	mov	r1, r3
    c04e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c050:	4b08      	ldr	r3, [pc, #32]	; (c074 <n25q256a_write_enable+0xcc>)
    c052:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    c054:	f107 0308 	add.w	r3, r7, #8
    c058:	4619      	mov	r1, r3
    c05a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c05c:	4b05      	ldr	r3, [pc, #20]	; (c074 <n25q256a_write_enable+0xcc>)
    c05e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    c060:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    c064:	f003 0302 	and.w	r3, r3, #2
    c068:	2b00      	cmp	r3, #0
    c06a:	d0ed      	beq.n	c048 <n25q256a_write_enable+0xa0>
}
    c06c:	bf00      	nop
    c06e:	3740      	adds	r7, #64	; 0x40
    c070:	46bd      	mov	sp, r7
    c072:	bd80      	pop	{r7, pc}
    c074:	00002ffd 	.word	0x00002ffd

0000c078 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    c078:	b590      	push	{r4, r7, lr}
    c07a:	b087      	sub	sp, #28
    c07c:	af00      	add	r7, sp, #0
    c07e:	6078      	str	r0, [r7, #4]
    c080:	460b      	mov	r3, r1
    c082:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    c084:	687b      	ldr	r3, [r7, #4]
    c086:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c088:	68fb      	ldr	r3, [r7, #12]
    c08a:	7b1b      	ldrb	r3, [r3, #12]
    c08c:	2b00      	cmp	r3, #0
    c08e:	d001      	beq.n	c094 <n25q256a_switch_mode+0x1c>
    c090:	2306      	movs	r3, #6
    c092:	e000      	b.n	c096 <n25q256a_switch_mode+0x1e>
    c094:	2300      	movs	r3, #0
    c096:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c098:	7afb      	ldrb	r3, [r7, #11]
    c09a:	2265      	movs	r2, #101	; 0x65
    c09c:	4619      	mov	r1, r3
    c09e:	6878      	ldr	r0, [r7, #4]
    c0a0:	4b25      	ldr	r3, [pc, #148]	; (c138 <n25q256a_switch_mode+0xc0>)
    c0a2:	4798      	blx	r3
    c0a4:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c0a6:	2300      	movs	r3, #0
    c0a8:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c0aa:	68fb      	ldr	r3, [r7, #12]
    c0ac:	7b1b      	ldrb	r3, [r3, #12]
    c0ae:	78fa      	ldrb	r2, [r7, #3]
    c0b0:	429a      	cmp	r2, r3
    c0b2:	d03d      	beq.n	c130 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c0b4:	78fb      	ldrb	r3, [r7, #3]
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d00b      	beq.n	c0d2 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c0ba:	697b      	ldr	r3, [r7, #20]
    c0bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c0c0:	2b00      	cmp	r3, #0
    c0c2:	d011      	beq.n	c0e8 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c0c4:	697b      	ldr	r3, [r7, #20]
    c0c6:	f003 031f 	and.w	r3, r3, #31
    c0ca:	617b      	str	r3, [r7, #20]
			modify = 1;
    c0cc:	2301      	movs	r3, #1
    c0ce:	74fb      	strb	r3, [r7, #19]
    c0d0:	e00a      	b.n	c0e8 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c0d2:	697b      	ldr	r3, [r7, #20]
    c0d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c0d8:	2b00      	cmp	r3, #0
    c0da:	d105      	bne.n	c0e8 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c0dc:	697b      	ldr	r3, [r7, #20]
    c0de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c0e2:	617b      	str	r3, [r7, #20]
			modify = 1;
    c0e4:	2301      	movs	r3, #1
    c0e6:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c0e8:	7cfb      	ldrb	r3, [r7, #19]
    c0ea:	2b00      	cmp	r3, #0
    c0ec:	d021      	beq.n	c132 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c0ee:	68fb      	ldr	r3, [r7, #12]
    c0f0:	78fa      	ldrb	r2, [r7, #3]
    c0f2:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c0f4:	7afb      	ldrb	r3, [r7, #11]
    c0f6:	2201      	movs	r2, #1
    c0f8:	4619      	mov	r1, r3
    c0fa:	6878      	ldr	r0, [r7, #4]
    c0fc:	4b0f      	ldr	r3, [pc, #60]	; (c13c <n25q256a_switch_mode+0xc4>)
    c0fe:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c100:	7af9      	ldrb	r1, [r7, #11]
    c102:	697b      	ldr	r3, [r7, #20]
    c104:	2261      	movs	r2, #97	; 0x61
    c106:	6878      	ldr	r0, [r7, #4]
    c108:	4c0d      	ldr	r4, [pc, #52]	; (c140 <n25q256a_switch_mode+0xc8>)
    c10a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c10c:	78fb      	ldrb	r3, [r7, #3]
    c10e:	2b00      	cmp	r3, #0
    c110:	d001      	beq.n	c116 <n25q256a_switch_mode+0x9e>
    c112:	2306      	movs	r3, #6
    c114:	e000      	b.n	c118 <n25q256a_switch_mode+0xa0>
    c116:	2300      	movs	r3, #0
    c118:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c11a:	7afb      	ldrb	r3, [r7, #11]
    c11c:	2265      	movs	r2, #101	; 0x65
    c11e:	4619      	mov	r1, r3
    c120:	6878      	ldr	r0, [r7, #4]
    c122:	4b05      	ldr	r3, [pc, #20]	; (c138 <n25q256a_switch_mode+0xc0>)
    c124:	4798      	blx	r3
    c126:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c128:	68fb      	ldr	r3, [r7, #12]
    c12a:	78fa      	ldrb	r2, [r7, #3]
    c12c:	731a      	strb	r2, [r3, #12]
    c12e:	e000      	b.n	c132 <n25q256a_switch_mode+0xba>
		return;
    c130:	bf00      	nop
	}
}
    c132:	371c      	adds	r7, #28
    c134:	46bd      	mov	sp, r7
    c136:	bd90      	pop	{r4, r7, pc}
    c138:	0000be6d 	.word	0x0000be6d
    c13c:	0000bfa9 	.word	0x0000bfa9
    c140:	0000bf09 	.word	0x0000bf09

0000c144 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c144:	b580      	push	{r7, lr}
    c146:	b086      	sub	sp, #24
    c148:	af00      	add	r7, sp, #0
    c14a:	60f8      	str	r0, [r7, #12]
    c14c:	60b9      	str	r1, [r7, #8]
    c14e:	607a      	str	r2, [r7, #4]
    c150:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c152:	68fb      	ldr	r3, [r7, #12]
    c154:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c156:	4a0c      	ldr	r2, [pc, #48]	; (c188 <n25q256a_construct+0x44>)
    c158:	68b9      	ldr	r1, [r7, #8]
    c15a:	68f8      	ldr	r0, [r7, #12]
    c15c:	4b0b      	ldr	r3, [pc, #44]	; (c18c <n25q256a_construct+0x48>)
    c15e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c160:	697b      	ldr	r3, [r7, #20]
    c162:	2200      	movs	r2, #0
    c164:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c166:	697b      	ldr	r3, [r7, #20]
    c168:	2200      	movs	r2, #0
    c16a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c16c:	697b      	ldr	r3, [r7, #20]
    c16e:	687a      	ldr	r2, [r7, #4]
    c170:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c172:	78fb      	ldrb	r3, [r7, #3]
    c174:	4619      	mov	r1, r3
    c176:	68f8      	ldr	r0, [r7, #12]
    c178:	4b05      	ldr	r3, [pc, #20]	; (c190 <n25q256a_construct+0x4c>)
    c17a:	4798      	blx	r3
	return me;
    c17c:	68fb      	ldr	r3, [r7, #12]
}
    c17e:	4618      	mov	r0, r3
    c180:	3718      	adds	r7, #24
    c182:	46bd      	mov	sp, r7
    c184:	bd80      	pop	{r7, pc}
    c186:	bf00      	nop
    c188:	000141ec 	.word	0x000141ec
    c18c:	0000c621 	.word	0x0000c621
    c190:	0000c079 	.word	0x0000c079

0000c194 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c194:	b580      	push	{r7, lr}
    c196:	b08c      	sub	sp, #48	; 0x30
    c198:	af00      	add	r7, sp, #0
    c19a:	60f8      	str	r0, [r7, #12]
    c19c:	60b9      	str	r1, [r7, #8]
    c19e:	607a      	str	r2, [r7, #4]
    c1a0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c1a2:	68fb      	ldr	r3, [r7, #12]
    c1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c1a6:	68fb      	ldr	r3, [r7, #12]
    c1a8:	681b      	ldr	r3, [r3, #0]
    c1aa:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c1ac:	f107 0310 	add.w	r3, r7, #16
    c1b0:	2200      	movs	r2, #0
    c1b2:	601a      	str	r2, [r3, #0]
    c1b4:	605a      	str	r2, [r3, #4]
    c1b6:	609a      	str	r2, [r3, #8]
    c1b8:	60da      	str	r2, [r3, #12]
    c1ba:	611a      	str	r2, [r3, #16]
    c1bc:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1c0:	7b1b      	ldrb	r3, [r3, #12]
    c1c2:	2b00      	cmp	r3, #0
    c1c4:	d001      	beq.n	c1ca <n25q256a_read+0x36>
    c1c6:	2206      	movs	r2, #6
    c1c8:	e000      	b.n	c1cc <n25q256a_read+0x38>
    c1ca:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c1cc:	7c3b      	ldrb	r3, [r7, #16]
    c1ce:	f362 0302 	bfi	r3, r2, #0, #3
    c1d2:	743b      	strb	r3, [r7, #16]
    c1d4:	7c3b      	ldrb	r3, [r7, #16]
    c1d6:	f043 0310 	orr.w	r3, r3, #16
    c1da:	743b      	strb	r3, [r7, #16]
    c1dc:	7c3b      	ldrb	r3, [r7, #16]
    c1de:	f043 0320 	orr.w	r3, r3, #32
    c1e2:	743b      	strb	r3, [r7, #16]
    c1e4:	7c3b      	ldrb	r3, [r7, #16]
    c1e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c1ea:	743b      	strb	r3, [r7, #16]
    c1ec:	7c7b      	ldrb	r3, [r7, #17]
    c1ee:	2201      	movs	r2, #1
    c1f0:	f362 1305 	bfi	r3, r2, #4, #2
    c1f4:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1f8:	7b1b      	ldrb	r3, [r3, #12]
    c1fa:	2b00      	cmp	r3, #0
    c1fc:	d001      	beq.n	c202 <n25q256a_read+0x6e>
    c1fe:	220a      	movs	r2, #10
    c200:	e000      	b.n	c204 <n25q256a_read+0x70>
    c202:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c204:	7cbb      	ldrb	r3, [r7, #18]
    c206:	f362 0304 	bfi	r3, r2, #0, #5
    c20a:	74bb      	strb	r3, [r7, #18]
    c20c:	230b      	movs	r3, #11
    c20e:	753b      	strb	r3, [r7, #20]
    c210:	687b      	ldr	r3, [r7, #4]
    c212:	61bb      	str	r3, [r7, #24]
    c214:	683b      	ldr	r3, [r7, #0]
    c216:	61fb      	str	r3, [r7, #28]
    c218:	68bb      	ldr	r3, [r7, #8]
    c21a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c21c:	f107 0310 	add.w	r3, r7, #16
    c220:	4619      	mov	r1, r3
    c222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c224:	4b03      	ldr	r3, [pc, #12]	; (c234 <n25q256a_read+0xa0>)
    c226:	4798      	blx	r3
	return ERR_NONE;
    c228:	2300      	movs	r3, #0
}
    c22a:	4618      	mov	r0, r3
    c22c:	3730      	adds	r7, #48	; 0x30
    c22e:	46bd      	mov	sp, r7
    c230:	bd80      	pop	{r7, pc}
    c232:	bf00      	nop
    c234:	00002ffd 	.word	0x00002ffd

0000c238 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c238:	b580      	push	{r7, lr}
    c23a:	b08c      	sub	sp, #48	; 0x30
    c23c:	af00      	add	r7, sp, #0
    c23e:	60f8      	str	r0, [r7, #12]
    c240:	60b9      	str	r1, [r7, #8]
    c242:	607a      	str	r2, [r7, #4]
    c244:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c246:	68fb      	ldr	r3, [r7, #12]
    c248:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c24a:	68fb      	ldr	r3, [r7, #12]
    c24c:	681b      	ldr	r3, [r3, #0]
    c24e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c250:	f107 0310 	add.w	r3, r7, #16
    c254:	2200      	movs	r2, #0
    c256:	601a      	str	r2, [r3, #0]
    c258:	605a      	str	r2, [r3, #4]
    c25a:	609a      	str	r2, [r3, #8]
    c25c:	60da      	str	r2, [r3, #12]
    c25e:	611a      	str	r2, [r3, #16]
    c260:	615a      	str	r2, [r3, #20]
    c262:	7c3b      	ldrb	r3, [r7, #16]
    c264:	f043 0310 	orr.w	r3, r3, #16
    c268:	743b      	strb	r3, [r7, #16]
    c26a:	7c3b      	ldrb	r3, [r7, #16]
    c26c:	f043 0320 	orr.w	r3, r3, #32
    c270:	743b      	strb	r3, [r7, #16]
    c272:	7c3b      	ldrb	r3, [r7, #16]
    c274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c278:	743b      	strb	r3, [r7, #16]
    c27a:	7c7b      	ldrb	r3, [r7, #17]
    c27c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c280:	747b      	strb	r3, [r7, #17]
    c282:	2302      	movs	r3, #2
    c284:	753b      	strb	r3, [r7, #20]
    c286:	687b      	ldr	r3, [r7, #4]
    c288:	61bb      	str	r3, [r7, #24]
    c28a:	683b      	ldr	r3, [r7, #0]
    c28c:	61fb      	str	r3, [r7, #28]
    c28e:	68bb      	ldr	r3, [r7, #8]
    c290:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c294:	7b1b      	ldrb	r3, [r3, #12]
    c296:	2b00      	cmp	r3, #0
    c298:	d001      	beq.n	c29e <n25q256a_write+0x66>
    c29a:	2206      	movs	r2, #6
    c29c:	e000      	b.n	c2a0 <n25q256a_write+0x68>
    c29e:	2200      	movs	r2, #0
    c2a0:	7c3b      	ldrb	r3, [r7, #16]
    c2a2:	f362 0302 	bfi	r3, r2, #0, #3
    c2a6:	743b      	strb	r3, [r7, #16]
	while (length) {
    c2a8:	e035      	b.n	c316 <n25q256a_write+0xde>
		cmd.address = address;
    c2aa:	687b      	ldr	r3, [r7, #4]
    c2ac:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c2ae:	683b      	ldr	r3, [r7, #0]
    c2b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c2b4:	d802      	bhi.n	c2bc <n25q256a_write+0x84>
			cmd.buf_len = length;
    c2b6:	683b      	ldr	r3, [r7, #0]
    c2b8:	61fb      	str	r3, [r7, #28]
    c2ba:	e002      	b.n	c2c2 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c2bc:	f44f 7380 	mov.w	r3, #256	; 0x100
    c2c0:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c2c2:	7c3b      	ldrb	r3, [r7, #16]
    c2c4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c2c8:	b2db      	uxtb	r3, r3
    c2ca:	2201      	movs	r2, #1
    c2cc:	4619      	mov	r1, r3
    c2ce:	68f8      	ldr	r0, [r7, #12]
    c2d0:	4b19      	ldr	r3, [pc, #100]	; (c338 <n25q256a_write+0x100>)
    c2d2:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c2d4:	f107 0310 	add.w	r3, r7, #16
    c2d8:	4619      	mov	r1, r3
    c2da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c2dc:	4b17      	ldr	r3, [pc, #92]	; (c33c <n25q256a_write+0x104>)
    c2de:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c2e0:	bf00      	nop
    c2e2:	7c3b      	ldrb	r3, [r7, #16]
    c2e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c2e8:	b2db      	uxtb	r3, r3
    c2ea:	2270      	movs	r2, #112	; 0x70
    c2ec:	4619      	mov	r1, r3
    c2ee:	68f8      	ldr	r0, [r7, #12]
    c2f0:	4b13      	ldr	r3, [pc, #76]	; (c340 <n25q256a_write+0x108>)
    c2f2:	4798      	blx	r3
    c2f4:	4603      	mov	r3, r0
    c2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c2fa:	2b00      	cmp	r3, #0
    c2fc:	d0f1      	beq.n	c2e2 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c2fe:	6a3a      	ldr	r2, [r7, #32]
    c300:	69fb      	ldr	r3, [r7, #28]
    c302:	4413      	add	r3, r2
    c304:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c306:	69fb      	ldr	r3, [r7, #28]
    c308:	683a      	ldr	r2, [r7, #0]
    c30a:	1ad3      	subs	r3, r2, r3
    c30c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c30e:	69fb      	ldr	r3, [r7, #28]
    c310:	687a      	ldr	r2, [r7, #4]
    c312:	4413      	add	r3, r2
    c314:	607b      	str	r3, [r7, #4]
	while (length) {
    c316:	683b      	ldr	r3, [r7, #0]
    c318:	2b00      	cmp	r3, #0
    c31a:	d1c6      	bne.n	c2aa <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c31e:	7b5b      	ldrb	r3, [r3, #13]
    c320:	2b00      	cmp	r3, #0
    c322:	d003      	beq.n	c32c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c324:	2101      	movs	r1, #1
    c326:	68f8      	ldr	r0, [r7, #12]
    c328:	4b06      	ldr	r3, [pc, #24]	; (c344 <n25q256a_write+0x10c>)
    c32a:	4798      	blx	r3
	}
	return ERR_NONE;
    c32c:	2300      	movs	r3, #0
}
    c32e:	4618      	mov	r0, r3
    c330:	3730      	adds	r7, #48	; 0x30
    c332:	46bd      	mov	sp, r7
    c334:	bd80      	pop	{r7, pc}
    c336:	bf00      	nop
    c338:	0000bfa9 	.word	0x0000bfa9
    c33c:	00002ffd 	.word	0x00002ffd
    c340:	0000be6d 	.word	0x0000be6d
    c344:	0000bda1 	.word	0x0000bda1

0000c348 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c348:	b580      	push	{r7, lr}
    c34a:	b090      	sub	sp, #64	; 0x40
    c34c:	af00      	add	r7, sp, #0
    c34e:	60f8      	str	r0, [r7, #12]
    c350:	60b9      	str	r1, [r7, #8]
    c352:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c354:	68fb      	ldr	r3, [r7, #12]
    c356:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c358:	68fb      	ldr	r3, [r7, #12]
    c35a:	681b      	ldr	r3, [r3, #0]
    c35c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c35e:	f107 0314 	add.w	r3, r7, #20
    c362:	2200      	movs	r2, #0
    c364:	601a      	str	r2, [r3, #0]
    c366:	605a      	str	r2, [r3, #4]
    c368:	609a      	str	r2, [r3, #8]
    c36a:	60da      	str	r2, [r3, #12]
    c36c:	611a      	str	r2, [r3, #16]
    c36e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c372:	7b1b      	ldrb	r3, [r3, #12]
    c374:	2b00      	cmp	r3, #0
    c376:	d001      	beq.n	c37c <n25q256a_erase+0x34>
    c378:	2206      	movs	r2, #6
    c37a:	e000      	b.n	c37e <n25q256a_erase+0x36>
    c37c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c37e:	7d3b      	ldrb	r3, [r7, #20]
    c380:	f362 0302 	bfi	r3, r2, #0, #3
    c384:	753b      	strb	r3, [r7, #20]
    c386:	7d3b      	ldrb	r3, [r7, #20]
    c388:	f043 0310 	orr.w	r3, r3, #16
    c38c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c38e:	687b      	ldr	r3, [r7, #4]
    c390:	4a56      	ldr	r2, [pc, #344]	; (c4ec <n25q256a_erase+0x1a4>)
    c392:	4293      	cmp	r3, r2
    c394:	bf94      	ite	ls
    c396:	2301      	movls	r3, #1
    c398:	2300      	movhi	r3, #0
    c39a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c39c:	7d3b      	ldrb	r3, [r7, #20]
    c39e:	f362 1345 	bfi	r3, r2, #5, #1
    c3a2:	753b      	strb	r3, [r7, #20]
    c3a4:	7d7b      	ldrb	r3, [r7, #21]
    c3a6:	2202      	movs	r2, #2
    c3a8:	f362 1305 	bfi	r3, r2, #4, #2
    c3ac:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c3ae:	68bb      	ldr	r3, [r7, #8]
    c3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c3b2:	687b      	ldr	r3, [r7, #4]
    c3b4:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c3b6:	2300      	movs	r3, #0
    c3b8:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c3ba:	687b      	ldr	r3, [r7, #4]
    c3bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c3c0:	2b00      	cmp	r3, #0
    c3c2:	d104      	bne.n	c3ce <n25q256a_erase+0x86>
    c3c4:	68bb      	ldr	r3, [r7, #8]
    c3c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c3ca:	2b00      	cmp	r3, #0
    c3cc:	d002      	beq.n	c3d4 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c3ce:	f06f 030c 	mvn.w	r3, #12
    c3d2:	e087      	b.n	c4e4 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c3d4:	687b      	ldr	r3, [r7, #4]
    c3d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c3da:	d368      	bcc.n	c4ae <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c3dc:	23c7      	movs	r3, #199	; 0xc7
    c3de:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c3e0:	7d3b      	ldrb	r3, [r7, #20]
    c3e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c3e6:	b2db      	uxtb	r3, r3
    c3e8:	2201      	movs	r2, #1
    c3ea:	4619      	mov	r1, r3
    c3ec:	68f8      	ldr	r0, [r7, #12]
    c3ee:	4b40      	ldr	r3, [pc, #256]	; (c4f0 <n25q256a_erase+0x1a8>)
    c3f0:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c3f2:	f107 0314 	add.w	r3, r7, #20
    c3f6:	4619      	mov	r1, r3
    c3f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c3fa:	4b3e      	ldr	r3, [pc, #248]	; (c4f4 <n25q256a_erase+0x1ac>)
    c3fc:	4798      	blx	r3
    c3fe:	e059      	b.n	c4b4 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c402:	b29b      	uxth	r3, r3
    c404:	2b00      	cmp	r3, #0
    c406:	d11f      	bne.n	c448 <n25q256a_erase+0x100>
    c408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c40a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c40e:	d31b      	bcc.n	c448 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c412:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c414:	23d8      	movs	r3, #216	; 0xd8
    c416:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c418:	7d3b      	ldrb	r3, [r7, #20]
    c41a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c41e:	b2db      	uxtb	r3, r3
    c420:	2201      	movs	r2, #1
    c422:	4619      	mov	r1, r3
    c424:	68f8      	ldr	r0, [r7, #12]
    c426:	4b32      	ldr	r3, [pc, #200]	; (c4f0 <n25q256a_erase+0x1a8>)
    c428:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c42a:	f107 0314 	add.w	r3, r7, #20
    c42e:	4619      	mov	r1, r3
    c430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c432:	4b30      	ldr	r3, [pc, #192]	; (c4f4 <n25q256a_erase+0x1ac>)
    c434:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c438:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c440:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c444:	63bb      	str	r3, [r7, #56]	; 0x38
    c446:	e023      	b.n	c490 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c44e:	d31b      	bcc.n	c488 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c452:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c454:	2320      	movs	r3, #32
    c456:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c458:	7d3b      	ldrb	r3, [r7, #20]
    c45a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c45e:	b2db      	uxtb	r3, r3
    c460:	2201      	movs	r2, #1
    c462:	4619      	mov	r1, r3
    c464:	68f8      	ldr	r0, [r7, #12]
    c466:	4b22      	ldr	r3, [pc, #136]	; (c4f0 <n25q256a_erase+0x1a8>)
    c468:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c46a:	f107 0314 	add.w	r3, r7, #20
    c46e:	4619      	mov	r1, r3
    c470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c472:	4b20      	ldr	r3, [pc, #128]	; (c4f4 <n25q256a_erase+0x1ac>)
    c474:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c47c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c480:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c484:	63bb      	str	r3, [r7, #56]	; 0x38
    c486:	e003      	b.n	c490 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c488:	f06f 030c 	mvn.w	r3, #12
    c48c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c48e:	e011      	b.n	c4b4 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c490:	bf00      	nop
    c492:	7d3b      	ldrb	r3, [r7, #20]
    c494:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c498:	b2db      	uxtb	r3, r3
    c49a:	2270      	movs	r2, #112	; 0x70
    c49c:	4619      	mov	r1, r3
    c49e:	68f8      	ldr	r0, [r7, #12]
    c4a0:	4b15      	ldr	r3, [pc, #84]	; (c4f8 <n25q256a_erase+0x1b0>)
    c4a2:	4798      	blx	r3
    c4a4:	4603      	mov	r3, r0
    c4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c4aa:	2b00      	cmp	r3, #0
    c4ac:	d0f1      	beq.n	c492 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	d1a5      	bne.n	c400 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c4b4:	bf00      	nop
    c4b6:	7d3b      	ldrb	r3, [r7, #20]
    c4b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c4bc:	b2db      	uxtb	r3, r3
    c4be:	2270      	movs	r2, #112	; 0x70
    c4c0:	4619      	mov	r1, r3
    c4c2:	68f8      	ldr	r0, [r7, #12]
    c4c4:	4b0c      	ldr	r3, [pc, #48]	; (c4f8 <n25q256a_erase+0x1b0>)
    c4c6:	4798      	blx	r3
    c4c8:	4603      	mov	r3, r0
    c4ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c4ce:	2b00      	cmp	r3, #0
    c4d0:	d0f1      	beq.n	c4b6 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c4d4:	7b5b      	ldrb	r3, [r3, #13]
    c4d6:	2b00      	cmp	r3, #0
    c4d8:	d003      	beq.n	c4e2 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c4da:	2101      	movs	r1, #1
    c4dc:	68f8      	ldr	r0, [r7, #12]
    c4de:	4b07      	ldr	r3, [pc, #28]	; (c4fc <n25q256a_erase+0x1b4>)
    c4e0:	4798      	blx	r3
	}
	return rc;
    c4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c4e4:	4618      	mov	r0, r3
    c4e6:	3740      	adds	r7, #64	; 0x40
    c4e8:	46bd      	mov	sp, r7
    c4ea:	bd80      	pop	{r7, pc}
    c4ec:	001fffff 	.word	0x001fffff
    c4f0:	0000bfa9 	.word	0x0000bfa9
    c4f4:	00002ffd 	.word	0x00002ffd
    c4f8:	0000be6d 	.word	0x0000be6d
    c4fc:	0000bda1 	.word	0x0000bda1

0000c500 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c500:	b590      	push	{r4, r7, lr}
    c502:	b085      	sub	sp, #20
    c504:	af00      	add	r7, sp, #0
    c506:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c508:	687b      	ldr	r3, [r7, #4]
    c50a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c50c:	68fb      	ldr	r3, [r7, #12]
    c50e:	7b1b      	ldrb	r3, [r3, #12]
    c510:	2b00      	cmp	r3, #0
    c512:	d001      	beq.n	c518 <n25q256a_enable_xip+0x18>
    c514:	2306      	movs	r3, #6
    c516:	e000      	b.n	c51a <n25q256a_enable_xip+0x1a>
    c518:	2300      	movs	r3, #0
    c51a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c51c:	68fb      	ldr	r3, [r7, #12]
    c51e:	7b5b      	ldrb	r3, [r3, #13]
    c520:	2b00      	cmp	r3, #0
    c522:	d129      	bne.n	c578 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c524:	7afb      	ldrb	r3, [r7, #11]
    c526:	2285      	movs	r2, #133	; 0x85
    c528:	4619      	mov	r1, r3
    c52a:	6878      	ldr	r0, [r7, #4]
    c52c:	4b15      	ldr	r3, [pc, #84]	; (c584 <n25q256a_enable_xip+0x84>)
    c52e:	4798      	blx	r3
    c530:	4603      	mov	r3, r0
    c532:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c534:	7abb      	ldrb	r3, [r7, #10]
    c536:	f003 0308 	and.w	r3, r3, #8
    c53a:	2b00      	cmp	r3, #0
    c53c:	d015      	beq.n	c56a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c53e:	7abb      	ldrb	r3, [r7, #10]
    c540:	f023 0308 	bic.w	r3, r3, #8
    c544:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c546:	7abb      	ldrb	r3, [r7, #10]
    c548:	7af9      	ldrb	r1, [r7, #11]
    c54a:	2281      	movs	r2, #129	; 0x81
    c54c:	6878      	ldr	r0, [r7, #4]
    c54e:	4c0e      	ldr	r4, [pc, #56]	; (c588 <n25q256a_enable_xip+0x88>)
    c550:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c552:	bf00      	nop
    c554:	7afb      	ldrb	r3, [r7, #11]
    c556:	2270      	movs	r2, #112	; 0x70
    c558:	4619      	mov	r1, r3
    c55a:	6878      	ldr	r0, [r7, #4]
    c55c:	4b09      	ldr	r3, [pc, #36]	; (c584 <n25q256a_enable_xip+0x84>)
    c55e:	4798      	blx	r3
    c560:	4603      	mov	r3, r0
    c562:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c566:	2b00      	cmp	r3, #0
    c568:	d0f4      	beq.n	c554 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c56a:	68fb      	ldr	r3, [r7, #12]
    c56c:	2201      	movs	r2, #1
    c56e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c570:	2101      	movs	r1, #1
    c572:	6878      	ldr	r0, [r7, #4]
    c574:	4b05      	ldr	r3, [pc, #20]	; (c58c <n25q256a_enable_xip+0x8c>)
    c576:	4798      	blx	r3
	}
	return ERR_NONE;
    c578:	2300      	movs	r3, #0
}
    c57a:	4618      	mov	r0, r3
    c57c:	3714      	adds	r7, #20
    c57e:	46bd      	mov	sp, r7
    c580:	bd90      	pop	{r4, r7, pc}
    c582:	bf00      	nop
    c584:	0000be6d 	.word	0x0000be6d
    c588:	0000bf09 	.word	0x0000bf09
    c58c:	0000bda1 	.word	0x0000bda1

0000c590 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c590:	b580      	push	{r7, lr}
    c592:	b086      	sub	sp, #24
    c594:	af00      	add	r7, sp, #0
    c596:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c598:	687b      	ldr	r3, [r7, #4]
    c59a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c59c:	687b      	ldr	r3, [r7, #4]
    c59e:	681b      	ldr	r3, [r3, #0]
    c5a0:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c5a2:	697b      	ldr	r3, [r7, #20]
    c5a4:	7b1b      	ldrb	r3, [r3, #12]
    c5a6:	2b00      	cmp	r3, #0
    c5a8:	d001      	beq.n	c5ae <n25q256a_disable_xip+0x1e>
    c5aa:	2306      	movs	r3, #6
    c5ac:	e000      	b.n	c5b0 <n25q256a_disable_xip+0x20>
    c5ae:	2300      	movs	r3, #0
    c5b0:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c5b2:	2100      	movs	r1, #0
    c5b4:	6878      	ldr	r0, [r7, #4]
    c5b6:	4b15      	ldr	r3, [pc, #84]	; (c60c <n25q256a_disable_xip+0x7c>)
    c5b8:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c5ba:	7bfb      	ldrb	r3, [r7, #15]
    c5bc:	2285      	movs	r2, #133	; 0x85
    c5be:	4619      	mov	r1, r3
    c5c0:	6878      	ldr	r0, [r7, #4]
    c5c2:	4b13      	ldr	r3, [pc, #76]	; (c610 <n25q256a_disable_xip+0x80>)
    c5c4:	4798      	blx	r3
    c5c6:	4603      	mov	r3, r0
    c5c8:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c5ca:	7bbb      	ldrb	r3, [r7, #14]
    c5cc:	f003 0308 	and.w	r3, r3, #8
    c5d0:	2b00      	cmp	r3, #0
    c5d2:	d113      	bne.n	c5fc <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c5d4:	697b      	ldr	r3, [r7, #20]
    c5d6:	689b      	ldr	r3, [r3, #8]
    c5d8:	2b00      	cmp	r3, #0
    c5da:	d00f      	beq.n	c5fc <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c5dc:	693b      	ldr	r3, [r7, #16]
    c5de:	681b      	ldr	r3, [r3, #0]
    c5e0:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c5e2:	6938      	ldr	r0, [r7, #16]
    c5e4:	4b0b      	ldr	r3, [pc, #44]	; (c614 <n25q256a_disable_xip+0x84>)
    c5e6:	4798      	blx	r3
			n25q->pin_exit_xip();
    c5e8:	697b      	ldr	r3, [r7, #20]
    c5ea:	689b      	ldr	r3, [r3, #8]
    c5ec:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c5ee:	68b9      	ldr	r1, [r7, #8]
    c5f0:	6938      	ldr	r0, [r7, #16]
    c5f2:	4b09      	ldr	r3, [pc, #36]	; (c618 <n25q256a_disable_xip+0x88>)
    c5f4:	4798      	blx	r3
			qspi_sync_enable(descr);
    c5f6:	6938      	ldr	r0, [r7, #16]
    c5f8:	4b08      	ldr	r3, [pc, #32]	; (c61c <n25q256a_disable_xip+0x8c>)
    c5fa:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c5fc:	697b      	ldr	r3, [r7, #20]
    c5fe:	2200      	movs	r2, #0
    c600:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c602:	2300      	movs	r3, #0
}
    c604:	4618      	mov	r0, r3
    c606:	3718      	adds	r7, #24
    c608:	46bd      	mov	sp, r7
    c60a:	bd80      	pop	{r7, pc}
    c60c:	0000bda1 	.word	0x0000bda1
    c610:	0000be6d 	.word	0x0000be6d
    c614:	00002fc1 	.word	0x00002fc1
    c618:	00002f39 	.word	0x00002f39
    c61c:	00002f85 	.word	0x00002f85

0000c620 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c620:	b480      	push	{r7}
    c622:	b085      	sub	sp, #20
    c624:	af00      	add	r7, sp, #0
    c626:	60f8      	str	r0, [r7, #12]
    c628:	60b9      	str	r1, [r7, #8]
    c62a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c62c:	68fb      	ldr	r3, [r7, #12]
    c62e:	68ba      	ldr	r2, [r7, #8]
    c630:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c632:	68fb      	ldr	r3, [r7, #12]
    c634:	687a      	ldr	r2, [r7, #4]
    c636:	605a      	str	r2, [r3, #4]

	return me;
    c638:	68fb      	ldr	r3, [r7, #12]
}
    c63a:	4618      	mov	r0, r3
    c63c:	3714      	adds	r7, #20
    c63e:	46bd      	mov	sp, r7
    c640:	f85d 7b04 	ldr.w	r7, [sp], #4
    c644:	4770      	bx	lr

0000c646 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c646:	b480      	push	{r7}
    c648:	b083      	sub	sp, #12
    c64a:	af00      	add	r7, sp, #0
    c64c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c64e:	687b      	ldr	r3, [r7, #4]
    c650:	781b      	ldrb	r3, [r3, #0]
    c652:	b29a      	uxth	r2, r3
    c654:	687b      	ldr	r3, [r7, #4]
    c656:	3301      	adds	r3, #1
    c658:	781b      	ldrb	r3, [r3, #0]
    c65a:	b29b      	uxth	r3, r3
    c65c:	021b      	lsls	r3, r3, #8
    c65e:	b29b      	uxth	r3, r3
    c660:	4413      	add	r3, r2
    c662:	b29b      	uxth	r3, r3
}
    c664:	4618      	mov	r0, r3
    c666:	370c      	adds	r7, #12
    c668:	46bd      	mov	sp, r7
    c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c66e:	4770      	bx	lr

0000c670 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c670:	b480      	push	{r7}
    c672:	b083      	sub	sp, #12
    c674:	af00      	add	r7, sp, #0
    c676:	6078      	str	r0, [r7, #4]
	return desc[0];
    c678:	687b      	ldr	r3, [r7, #4]
    c67a:	781b      	ldrb	r3, [r3, #0]
}
    c67c:	4618      	mov	r0, r3
    c67e:	370c      	adds	r7, #12
    c680:	46bd      	mov	sp, r7
    c682:	f85d 7b04 	ldr.w	r7, [sp], #4
    c686:	4770      	bx	lr

0000c688 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c688:	b580      	push	{r7, lr}
    c68a:	b082      	sub	sp, #8
    c68c:	af00      	add	r7, sp, #0
    c68e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c690:	6878      	ldr	r0, [r7, #4]
    c692:	4b05      	ldr	r3, [pc, #20]	; (c6a8 <usb_desc_next+0x20>)
    c694:	4798      	blx	r3
    c696:	4603      	mov	r3, r0
    c698:	461a      	mov	r2, r3
    c69a:	687b      	ldr	r3, [r7, #4]
    c69c:	4413      	add	r3, r2
}
    c69e:	4618      	mov	r0, r3
    c6a0:	3708      	adds	r7, #8
    c6a2:	46bd      	mov	sp, r7
    c6a4:	bd80      	pop	{r7, pc}
    c6a6:	bf00      	nop
    c6a8:	0000c671 	.word	0x0000c671

0000c6ac <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c6ac:	b580      	push	{r7, lr}
    c6ae:	b08c      	sub	sp, #48	; 0x30
    c6b0:	af00      	add	r7, sp, #0
    c6b2:	6078      	str	r0, [r7, #4]
    c6b4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c6b6:	687b      	ldr	r3, [r7, #4]
    c6b8:	689b      	ldr	r3, [r3, #8]
    c6ba:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c6bc:	683b      	ldr	r3, [r7, #0]
    c6be:	681b      	ldr	r3, [r3, #0]
    c6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c6c2:	2300      	movs	r3, #0
    c6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c6c8:	e08f      	b.n	c7ea <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c6cc:	2b00      	cmp	r3, #0
    c6ce:	d102      	bne.n	c6d6 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c6d0:	f06f 0309 	mvn.w	r3, #9
    c6d4:	e092      	b.n	c7fc <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c6d8:	789b      	ldrb	r3, [r3, #2]
    c6da:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c6de:	795b      	ldrb	r3, [r3, #5]
    c6e0:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c6e2:	7c7b      	ldrb	r3, [r7, #17]
    c6e4:	2b02      	cmp	r3, #2
    c6e6:	d002      	beq.n	c6ee <cdcdf_acm_enable+0x42>
    c6e8:	7c7b      	ldrb	r3, [r7, #17]
    c6ea:	2b0a      	cmp	r3, #10
    c6ec:	d121      	bne.n	c732 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c6ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c6f2:	6a3a      	ldr	r2, [r7, #32]
    c6f4:	5cd2      	ldrb	r2, [r2, r3]
    c6f6:	7bbb      	ldrb	r3, [r7, #14]
    c6f8:	429a      	cmp	r2, r3
    c6fa:	d102      	bne.n	c702 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c6fc:	f06f 0311 	mvn.w	r3, #17
    c700:	e07c      	b.n	c7fc <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c706:	6a3a      	ldr	r2, [r7, #32]
    c708:	5cd3      	ldrb	r3, [r2, r3]
    c70a:	2bff      	cmp	r3, #255	; 0xff
    c70c:	d002      	beq.n	c714 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c70e:	f06f 031b 	mvn.w	r3, #27
    c712:	e073      	b.n	c7fc <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c718:	7bb9      	ldrb	r1, [r7, #14]
    c71a:	6a3a      	ldr	r2, [r7, #32]
    c71c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c71e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c720:	683b      	ldr	r3, [r7, #0]
    c722:	685b      	ldr	r3, [r3, #4]
    c724:	2205      	movs	r2, #5
    c726:	4619      	mov	r1, r3
    c728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c72a:	4b36      	ldr	r3, [pc, #216]	; (c804 <cdcdf_acm_enable+0x158>)
    c72c:	4798      	blx	r3
    c72e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c730:	e047      	b.n	c7c2 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c732:	f06f 0309 	mvn.w	r3, #9
    c736:	e061      	b.n	c7fc <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c73a:	789b      	ldrb	r3, [r3, #2]
    c73c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c740:	78db      	ldrb	r3, [r3, #3]
    c742:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c744:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c746:	3304      	adds	r3, #4
    c748:	4618      	mov	r0, r3
    c74a:	4b2f      	ldr	r3, [pc, #188]	; (c808 <cdcdf_acm_enable+0x15c>)
    c74c:	4798      	blx	r3
    c74e:	4603      	mov	r3, r0
    c750:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c752:	7ebb      	ldrb	r3, [r7, #26]
    c754:	7ef9      	ldrb	r1, [r7, #27]
    c756:	8bba      	ldrh	r2, [r7, #28]
    c758:	4618      	mov	r0, r3
    c75a:	4b2c      	ldr	r3, [pc, #176]	; (c80c <cdcdf_acm_enable+0x160>)
    c75c:	4798      	blx	r3
    c75e:	4603      	mov	r3, r0
    c760:	2b00      	cmp	r3, #0
    c762:	d002      	beq.n	c76a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c764:	f06f 0313 	mvn.w	r3, #19
    c768:	e048      	b.n	c7fc <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c76a:	7ebb      	ldrb	r3, [r7, #26]
    c76c:	b25b      	sxtb	r3, r3
    c76e:	2b00      	cmp	r3, #0
    c770:	da0f      	bge.n	c792 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c776:	7eb9      	ldrb	r1, [r7, #26]
    c778:	6a3a      	ldr	r2, [r7, #32]
    c77a:	4413      	add	r3, r2
    c77c:	460a      	mov	r2, r1
    c77e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c784:	6a3a      	ldr	r2, [r7, #32]
    c786:	4413      	add	r3, r2
    c788:	789b      	ldrb	r3, [r3, #2]
    c78a:	4618      	mov	r0, r3
    c78c:	4b20      	ldr	r3, [pc, #128]	; (c810 <cdcdf_acm_enable+0x164>)
    c78e:	4798      	blx	r3
    c790:	e007      	b.n	c7a2 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c792:	7eba      	ldrb	r2, [r7, #26]
    c794:	6a3b      	ldr	r3, [r7, #32]
    c796:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c798:	6a3b      	ldr	r3, [r7, #32]
    c79a:	791b      	ldrb	r3, [r3, #4]
    c79c:	4618      	mov	r0, r3
    c79e:	4b1c      	ldr	r3, [pc, #112]	; (c810 <cdcdf_acm_enable+0x164>)
    c7a0:	4798      	blx	r3
			}
			desc->sod = ep;
    c7a2:	683b      	ldr	r3, [r7, #0]
    c7a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c7a6:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c7a8:	683b      	ldr	r3, [r7, #0]
    c7aa:	681b      	ldr	r3, [r3, #0]
    c7ac:	4618      	mov	r0, r3
    c7ae:	4b19      	ldr	r3, [pc, #100]	; (c814 <cdcdf_acm_enable+0x168>)
    c7b0:	4798      	blx	r3
    c7b2:	4602      	mov	r2, r0
    c7b4:	683b      	ldr	r3, [r7, #0]
    c7b6:	685b      	ldr	r3, [r3, #4]
    c7b8:	4619      	mov	r1, r3
    c7ba:	4610      	mov	r0, r2
    c7bc:	4b16      	ldr	r3, [pc, #88]	; (c818 <cdcdf_acm_enable+0x16c>)
    c7be:	4798      	blx	r3
    c7c0:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c7c4:	2b00      	cmp	r3, #0
    c7c6:	d1b7      	bne.n	c738 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c7c8:	683b      	ldr	r3, [r7, #0]
    c7ca:	681b      	ldr	r3, [r3, #0]
    c7cc:	4618      	mov	r0, r3
    c7ce:	4b11      	ldr	r3, [pc, #68]	; (c814 <cdcdf_acm_enable+0x168>)
    c7d0:	4798      	blx	r3
    c7d2:	683b      	ldr	r3, [r7, #0]
    c7d4:	685b      	ldr	r3, [r3, #4]
    c7d6:	2204      	movs	r2, #4
    c7d8:	4619      	mov	r1, r3
    c7da:	4b0a      	ldr	r3, [pc, #40]	; (c804 <cdcdf_acm_enable+0x158>)
    c7dc:	4798      	blx	r3
    c7de:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c7e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c7e4:	3301      	adds	r3, #1
    c7e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c7ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c7ee:	2b01      	cmp	r3, #1
    c7f0:	f67f af6b 	bls.w	c6ca <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c7f4:	4b09      	ldr	r3, [pc, #36]	; (c81c <cdcdf_acm_enable+0x170>)
    c7f6:	2201      	movs	r2, #1
    c7f8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c7fa:	2300      	movs	r3, #0
}
    c7fc:	4618      	mov	r0, r3
    c7fe:	3730      	adds	r7, #48	; 0x30
    c800:	46bd      	mov	sp, r7
    c802:	bd80      	pop	{r7, pc}
    c804:	0000da6d 	.word	0x0000da6d
    c808:	0000c647 	.word	0x0000c647
    c80c:	00003c71 	.word	0x00003c71
    c810:	00003d5d 	.word	0x00003d5d
    c814:	0000c689 	.word	0x0000c689
    c818:	0000dac9 	.word	0x0000dac9
    c81c:	20001140 	.word	0x20001140

0000c820 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c820:	b580      	push	{r7, lr}
    c822:	b088      	sub	sp, #32
    c824:	af00      	add	r7, sp, #0
    c826:	6078      	str	r0, [r7, #4]
    c828:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c82a:	687b      	ldr	r3, [r7, #4]
    c82c:	689b      	ldr	r3, [r3, #8]
    c82e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c830:	683b      	ldr	r3, [r7, #0]
    c832:	2b00      	cmp	r3, #0
    c834:	d00c      	beq.n	c850 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c836:	683b      	ldr	r3, [r7, #0]
    c838:	681b      	ldr	r3, [r3, #0]
    c83a:	795b      	ldrb	r3, [r3, #5]
    c83c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c83e:	7c7b      	ldrb	r3, [r7, #17]
    c840:	2b02      	cmp	r3, #2
    c842:	d005      	beq.n	c850 <cdcdf_acm_disable+0x30>
    c844:	7c7b      	ldrb	r3, [r7, #17]
    c846:	2b0a      	cmp	r3, #10
    c848:	d002      	beq.n	c850 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c84a:	f06f 0309 	mvn.w	r3, #9
    c84e:	e035      	b.n	c8bc <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c850:	2300      	movs	r3, #0
    c852:	77fb      	strb	r3, [r7, #31]
    c854:	e01f      	b.n	c896 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c856:	7ffb      	ldrb	r3, [r7, #31]
    c858:	69ba      	ldr	r2, [r7, #24]
    c85a:	5cd3      	ldrb	r3, [r2, r3]
    c85c:	2bff      	cmp	r3, #255	; 0xff
    c85e:	d016      	beq.n	c88e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c860:	7ffb      	ldrb	r3, [r7, #31]
    c862:	69ba      	ldr	r2, [r7, #24]
    c864:	21ff      	movs	r1, #255	; 0xff
    c866:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c868:	7ffb      	ldrb	r3, [r7, #31]
    c86a:	69ba      	ldr	r2, [r7, #24]
    c86c:	4413      	add	r3, r2
    c86e:	789b      	ldrb	r3, [r3, #2]
    c870:	2bff      	cmp	r3, #255	; 0xff
    c872:	d00d      	beq.n	c890 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c874:	7ffb      	ldrb	r3, [r7, #31]
    c876:	69ba      	ldr	r2, [r7, #24]
    c878:	4413      	add	r3, r2
    c87a:	789b      	ldrb	r3, [r3, #2]
    c87c:	4618      	mov	r0, r3
    c87e:	4b11      	ldr	r3, [pc, #68]	; (c8c4 <cdcdf_acm_disable+0xa4>)
    c880:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c882:	7ffb      	ldrb	r3, [r7, #31]
    c884:	69ba      	ldr	r2, [r7, #24]
    c886:	4413      	add	r3, r2
    c888:	22ff      	movs	r2, #255	; 0xff
    c88a:	709a      	strb	r2, [r3, #2]
    c88c:	e000      	b.n	c890 <cdcdf_acm_disable+0x70>
			continue;
    c88e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c890:	7ffb      	ldrb	r3, [r7, #31]
    c892:	3301      	adds	r3, #1
    c894:	77fb      	strb	r3, [r7, #31]
    c896:	7ffb      	ldrb	r3, [r7, #31]
    c898:	2b01      	cmp	r3, #1
    c89a:	d9dc      	bls.n	c856 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c89c:	69bb      	ldr	r3, [r7, #24]
    c89e:	791b      	ldrb	r3, [r3, #4]
    c8a0:	2bff      	cmp	r3, #255	; 0xff
    c8a2:	d007      	beq.n	c8b4 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c8a4:	69bb      	ldr	r3, [r7, #24]
    c8a6:	791b      	ldrb	r3, [r3, #4]
    c8a8:	4618      	mov	r0, r3
    c8aa:	4b06      	ldr	r3, [pc, #24]	; (c8c4 <cdcdf_acm_disable+0xa4>)
    c8ac:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c8ae:	69bb      	ldr	r3, [r7, #24]
    c8b0:	22ff      	movs	r2, #255	; 0xff
    c8b2:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c8b4:	4b04      	ldr	r3, [pc, #16]	; (c8c8 <cdcdf_acm_disable+0xa8>)
    c8b6:	2200      	movs	r2, #0
    c8b8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c8ba:	2300      	movs	r3, #0
}
    c8bc:	4618      	mov	r0, r3
    c8be:	3720      	adds	r7, #32
    c8c0:	46bd      	mov	sp, r7
    c8c2:	bd80      	pop	{r7, pc}
    c8c4:	00003d0d 	.word	0x00003d0d
    c8c8:	20001140 	.word	0x20001140

0000c8cc <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c8cc:	b580      	push	{r7, lr}
    c8ce:	b084      	sub	sp, #16
    c8d0:	af00      	add	r7, sp, #0
    c8d2:	60f8      	str	r0, [r7, #12]
    c8d4:	460b      	mov	r3, r1
    c8d6:	607a      	str	r2, [r7, #4]
    c8d8:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c8da:	7afb      	ldrb	r3, [r7, #11]
    c8dc:	2b01      	cmp	r3, #1
    c8de:	d009      	beq.n	c8f4 <cdcdf_acm_ctrl+0x28>
    c8e0:	2b02      	cmp	r3, #2
    c8e2:	d00d      	beq.n	c900 <cdcdf_acm_ctrl+0x34>
    c8e4:	2b00      	cmp	r3, #0
    c8e6:	d10e      	bne.n	c906 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c8e8:	6879      	ldr	r1, [r7, #4]
    c8ea:	68f8      	ldr	r0, [r7, #12]
    c8ec:	4b09      	ldr	r3, [pc, #36]	; (c914 <cdcdf_acm_ctrl+0x48>)
    c8ee:	4798      	blx	r3
    c8f0:	4603      	mov	r3, r0
    c8f2:	e00a      	b.n	c90a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c8f4:	6879      	ldr	r1, [r7, #4]
    c8f6:	68f8      	ldr	r0, [r7, #12]
    c8f8:	4b07      	ldr	r3, [pc, #28]	; (c918 <cdcdf_acm_ctrl+0x4c>)
    c8fa:	4798      	blx	r3
    c8fc:	4603      	mov	r3, r0
    c8fe:	e004      	b.n	c90a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c900:	f06f 031a 	mvn.w	r3, #26
    c904:	e001      	b.n	c90a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c906:	f06f 030c 	mvn.w	r3, #12
	}
}
    c90a:	4618      	mov	r0, r3
    c90c:	3710      	adds	r7, #16
    c90e:	46bd      	mov	sp, r7
    c910:	bd80      	pop	{r7, pc}
    c912:	bf00      	nop
    c914:	0000c6ad 	.word	0x0000c6ad
    c918:	0000c821 	.word	0x0000c821

0000c91c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c91c:	b590      	push	{r4, r7, lr}
    c91e:	b087      	sub	sp, #28
    c920:	af00      	add	r7, sp, #0
    c922:	4603      	mov	r3, r0
    c924:	6039      	str	r1, [r7, #0]
    c926:	71fb      	strb	r3, [r7, #7]
    c928:	4613      	mov	r3, r2
    c92a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c92c:	683b      	ldr	r3, [r7, #0]
    c92e:	799a      	ldrb	r2, [r3, #6]
    c930:	79db      	ldrb	r3, [r3, #7]
    c932:	021b      	lsls	r3, r3, #8
    c934:	4313      	orrs	r3, r2
    c936:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c938:	4b2b      	ldr	r3, [pc, #172]	; (c9e8 <cdcdf_acm_set_req+0xcc>)
    c93a:	4798      	blx	r3
    c93c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c93e:	683b      	ldr	r3, [r7, #0]
    c940:	785b      	ldrb	r3, [r3, #1]
    c942:	2b20      	cmp	r3, #32
    c944:	d002      	beq.n	c94c <cdcdf_acm_set_req+0x30>
    c946:	2b22      	cmp	r3, #34	; 0x22
    c948:	d034      	beq.n	c9b4 <cdcdf_acm_set_req+0x98>
    c94a:	e046      	b.n	c9da <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c94c:	8afb      	ldrh	r3, [r7, #22]
    c94e:	2b07      	cmp	r3, #7
    c950:	d002      	beq.n	c958 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c952:	f04f 33ff 	mov.w	r3, #4294967295
    c956:	e042      	b.n	c9de <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c958:	79bb      	ldrb	r3, [r7, #6]
    c95a:	2b00      	cmp	r3, #0
    c95c:	d107      	bne.n	c96e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c95e:	8afa      	ldrh	r2, [r7, #22]
    c960:	79f8      	ldrb	r0, [r7, #7]
    c962:	2300      	movs	r3, #0
    c964:	6939      	ldr	r1, [r7, #16]
    c966:	4c21      	ldr	r4, [pc, #132]	; (c9ec <cdcdf_acm_set_req+0xd0>)
    c968:	47a0      	blx	r4
    c96a:	4603      	mov	r3, r0
    c96c:	e037      	b.n	c9de <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c96e:	693a      	ldr	r2, [r7, #16]
    c970:	f107 0308 	add.w	r3, r7, #8
    c974:	6810      	ldr	r0, [r2, #0]
    c976:	6018      	str	r0, [r3, #0]
    c978:	8891      	ldrh	r1, [r2, #4]
    c97a:	7992      	ldrb	r2, [r2, #6]
    c97c:	8099      	strh	r1, [r3, #4]
    c97e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c980:	4b1b      	ldr	r3, [pc, #108]	; (c9f0 <cdcdf_acm_set_req+0xd4>)
    c982:	681b      	ldr	r3, [r3, #0]
    c984:	2b00      	cmp	r3, #0
    c986:	d008      	beq.n	c99a <cdcdf_acm_set_req+0x7e>
    c988:	4b19      	ldr	r3, [pc, #100]	; (c9f0 <cdcdf_acm_set_req+0xd4>)
    c98a:	681b      	ldr	r3, [r3, #0]
    c98c:	f107 0208 	add.w	r2, r7, #8
    c990:	4610      	mov	r0, r2
    c992:	4798      	blx	r3
    c994:	4603      	mov	r3, r0
    c996:	2b00      	cmp	r3, #0
    c998:	d00a      	beq.n	c9b0 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c99a:	4b16      	ldr	r3, [pc, #88]	; (c9f4 <cdcdf_acm_set_req+0xd8>)
    c99c:	f107 0208 	add.w	r2, r7, #8
    c9a0:	e892 0003 	ldmia.w	r2, {r0, r1}
    c9a4:	6018      	str	r0, [r3, #0]
    c9a6:	3304      	adds	r3, #4
    c9a8:	8019      	strh	r1, [r3, #0]
    c9aa:	3302      	adds	r3, #2
    c9ac:	0c0a      	lsrs	r2, r1, #16
    c9ae:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c9b0:	2300      	movs	r3, #0
    c9b2:	e014      	b.n	c9de <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c9b4:	2300      	movs	r3, #0
    c9b6:	2200      	movs	r2, #0
    c9b8:	2100      	movs	r1, #0
    c9ba:	2000      	movs	r0, #0
    c9bc:	4c0b      	ldr	r4, [pc, #44]	; (c9ec <cdcdf_acm_set_req+0xd0>)
    c9be:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c9c0:	4b0d      	ldr	r3, [pc, #52]	; (c9f8 <cdcdf_acm_set_req+0xdc>)
    c9c2:	681b      	ldr	r3, [r3, #0]
    c9c4:	2b00      	cmp	r3, #0
    c9c6:	d006      	beq.n	c9d6 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c9c8:	4b0b      	ldr	r3, [pc, #44]	; (c9f8 <cdcdf_acm_set_req+0xdc>)
    c9ca:	681b      	ldr	r3, [r3, #0]
    c9cc:	683a      	ldr	r2, [r7, #0]
    c9ce:	8852      	ldrh	r2, [r2, #2]
    c9d0:	b292      	uxth	r2, r2
    c9d2:	4610      	mov	r0, r2
    c9d4:	4798      	blx	r3
		}
		return ERR_NONE;
    c9d6:	2300      	movs	r3, #0
    c9d8:	e001      	b.n	c9de <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c9da:	f06f 030c 	mvn.w	r3, #12
	}
}
    c9de:	4618      	mov	r0, r3
    c9e0:	371c      	adds	r7, #28
    c9e2:	46bd      	mov	sp, r7
    c9e4:	bd90      	pop	{r4, r7, pc}
    c9e6:	bf00      	nop
    c9e8:	0000d969 	.word	0x0000d969
    c9ec:	0000d7dd 	.word	0x0000d7dd
    c9f0:	20001154 	.word	0x20001154
    c9f4:	20001148 	.word	0x20001148
    c9f8:	20001150 	.word	0x20001150

0000c9fc <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c9fc:	b590      	push	{r4, r7, lr}
    c9fe:	b085      	sub	sp, #20
    ca00:	af00      	add	r7, sp, #0
    ca02:	4603      	mov	r3, r0
    ca04:	6039      	str	r1, [r7, #0]
    ca06:	71fb      	strb	r3, [r7, #7]
    ca08:	4613      	mov	r3, r2
    ca0a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    ca0c:	683b      	ldr	r3, [r7, #0]
    ca0e:	799a      	ldrb	r2, [r3, #6]
    ca10:	79db      	ldrb	r3, [r3, #7]
    ca12:	021b      	lsls	r3, r3, #8
    ca14:	4313      	orrs	r3, r2
    ca16:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    ca18:	79bb      	ldrb	r3, [r7, #6]
    ca1a:	2b01      	cmp	r3, #1
    ca1c:	d101      	bne.n	ca22 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    ca1e:	2300      	movs	r3, #0
    ca20:	e013      	b.n	ca4a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    ca22:	683b      	ldr	r3, [r7, #0]
    ca24:	785b      	ldrb	r3, [r3, #1]
    ca26:	2b21      	cmp	r3, #33	; 0x21
    ca28:	d10d      	bne.n	ca46 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ca2a:	89fb      	ldrh	r3, [r7, #14]
    ca2c:	2b07      	cmp	r3, #7
    ca2e:	d002      	beq.n	ca36 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    ca30:	f04f 33ff 	mov.w	r3, #4294967295
    ca34:	e009      	b.n	ca4a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    ca36:	89fa      	ldrh	r2, [r7, #14]
    ca38:	79f8      	ldrb	r0, [r7, #7]
    ca3a:	2300      	movs	r3, #0
    ca3c:	4905      	ldr	r1, [pc, #20]	; (ca54 <cdcdf_acm_get_req+0x58>)
    ca3e:	4c06      	ldr	r4, [pc, #24]	; (ca58 <cdcdf_acm_get_req+0x5c>)
    ca40:	47a0      	blx	r4
    ca42:	4603      	mov	r3, r0
    ca44:	e001      	b.n	ca4a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    ca46:	f06f 030c 	mvn.w	r3, #12
	}
}
    ca4a:	4618      	mov	r0, r3
    ca4c:	3714      	adds	r7, #20
    ca4e:	46bd      	mov	sp, r7
    ca50:	bd90      	pop	{r4, r7, pc}
    ca52:	bf00      	nop
    ca54:	20001148 	.word	0x20001148
    ca58:	0000d7dd 	.word	0x0000d7dd

0000ca5c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ca5c:	b580      	push	{r7, lr}
    ca5e:	b082      	sub	sp, #8
    ca60:	af00      	add	r7, sp, #0
    ca62:	4603      	mov	r3, r0
    ca64:	6039      	str	r1, [r7, #0]
    ca66:	71fb      	strb	r3, [r7, #7]
    ca68:	4613      	mov	r3, r2
    ca6a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ca6c:	683b      	ldr	r3, [r7, #0]
    ca6e:	781b      	ldrb	r3, [r3, #0]
    ca70:	095b      	lsrs	r3, r3, #5
    ca72:	b2db      	uxtb	r3, r3
    ca74:	f003 0303 	and.w	r3, r3, #3
    ca78:	2b01      	cmp	r3, #1
    ca7a:	d002      	beq.n	ca82 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    ca7c:	f06f 0309 	mvn.w	r3, #9
    ca80:	e026      	b.n	cad0 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    ca82:	683b      	ldr	r3, [r7, #0]
    ca84:	889b      	ldrh	r3, [r3, #4]
    ca86:	b29a      	uxth	r2, r3
    ca88:	4b13      	ldr	r3, [pc, #76]	; (cad8 <cdcdf_acm_req+0x7c>)
    ca8a:	781b      	ldrb	r3, [r3, #0]
    ca8c:	b29b      	uxth	r3, r3
    ca8e:	429a      	cmp	r2, r3
    ca90:	d007      	beq.n	caa2 <cdcdf_acm_req+0x46>
    ca92:	683b      	ldr	r3, [r7, #0]
    ca94:	889b      	ldrh	r3, [r3, #4]
    ca96:	b29a      	uxth	r2, r3
    ca98:	4b0f      	ldr	r3, [pc, #60]	; (cad8 <cdcdf_acm_req+0x7c>)
    ca9a:	785b      	ldrb	r3, [r3, #1]
    ca9c:	b29b      	uxth	r3, r3
    ca9e:	429a      	cmp	r2, r3
    caa0:	d114      	bne.n	cacc <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    caa2:	683b      	ldr	r3, [r7, #0]
    caa4:	781b      	ldrb	r3, [r3, #0]
    caa6:	b25b      	sxtb	r3, r3
    caa8:	2b00      	cmp	r3, #0
    caaa:	da07      	bge.n	cabc <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    caac:	79ba      	ldrb	r2, [r7, #6]
    caae:	79fb      	ldrb	r3, [r7, #7]
    cab0:	6839      	ldr	r1, [r7, #0]
    cab2:	4618      	mov	r0, r3
    cab4:	4b09      	ldr	r3, [pc, #36]	; (cadc <cdcdf_acm_req+0x80>)
    cab6:	4798      	blx	r3
    cab8:	4603      	mov	r3, r0
    caba:	e009      	b.n	cad0 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    cabc:	79ba      	ldrb	r2, [r7, #6]
    cabe:	79fb      	ldrb	r3, [r7, #7]
    cac0:	6839      	ldr	r1, [r7, #0]
    cac2:	4618      	mov	r0, r3
    cac4:	4b06      	ldr	r3, [pc, #24]	; (cae0 <cdcdf_acm_req+0x84>)
    cac6:	4798      	blx	r3
    cac8:	4603      	mov	r3, r0
    caca:	e001      	b.n	cad0 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    cacc:	f06f 0309 	mvn.w	r3, #9
	}
}
    cad0:	4618      	mov	r0, r3
    cad2:	3708      	adds	r7, #8
    cad4:	46bd      	mov	sp, r7
    cad6:	bd80      	pop	{r7, pc}
    cad8:	20001140 	.word	0x20001140
    cadc:	0000c9fd 	.word	0x0000c9fd
    cae0:	0000c91d 	.word	0x0000c91d

0000cae4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    cae4:	b580      	push	{r7, lr}
    cae6:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    cae8:	4b0b      	ldr	r3, [pc, #44]	; (cb18 <cdcdf_acm_init+0x34>)
    caea:	4798      	blx	r3
    caec:	4603      	mov	r3, r0
    caee:	2b01      	cmp	r3, #1
    caf0:	d902      	bls.n	caf8 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    caf2:	f06f 0310 	mvn.w	r3, #16
    caf6:	e00d      	b.n	cb14 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    caf8:	4b08      	ldr	r3, [pc, #32]	; (cb1c <cdcdf_acm_init+0x38>)
    cafa:	4a09      	ldr	r2, [pc, #36]	; (cb20 <cdcdf_acm_init+0x3c>)
    cafc:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    cafe:	4b07      	ldr	r3, [pc, #28]	; (cb1c <cdcdf_acm_init+0x38>)
    cb00:	4a08      	ldr	r2, [pc, #32]	; (cb24 <cdcdf_acm_init+0x40>)
    cb02:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    cb04:	4805      	ldr	r0, [pc, #20]	; (cb1c <cdcdf_acm_init+0x38>)
    cb06:	4b08      	ldr	r3, [pc, #32]	; (cb28 <cdcdf_acm_init+0x44>)
    cb08:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    cb0a:	4908      	ldr	r1, [pc, #32]	; (cb2c <cdcdf_acm_init+0x48>)
    cb0c:	2001      	movs	r0, #1
    cb0e:	4b08      	ldr	r3, [pc, #32]	; (cb30 <cdcdf_acm_init+0x4c>)
    cb10:	4798      	blx	r3
	return ERR_NONE;
    cb12:	2300      	movs	r3, #0
}
    cb14:	4618      	mov	r0, r3
    cb16:	bd80      	pop	{r7, pc}
    cb18:	0000d981 	.word	0x0000d981
    cb1c:	20001134 	.word	0x20001134
    cb20:	0000c8cd 	.word	0x0000c8cd
    cb24:	20001140 	.word	0x20001140
    cb28:	0000d8e9 	.word	0x0000d8e9
    cb2c:	20000208 	.word	0x20000208
    cb30:	0000d819 	.word	0x0000d819

0000cb34 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    cb34:	b590      	push	{r4, r7, lr}
    cb36:	b083      	sub	sp, #12
    cb38:	af00      	add	r7, sp, #0
    cb3a:	6078      	str	r0, [r7, #4]
    cb3c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cb3e:	4b0b      	ldr	r3, [pc, #44]	; (cb6c <cdcdf_acm_read+0x38>)
    cb40:	4798      	blx	r3
    cb42:	4603      	mov	r3, r0
    cb44:	f083 0301 	eor.w	r3, r3, #1
    cb48:	b2db      	uxtb	r3, r3
    cb4a:	2b00      	cmp	r3, #0
    cb4c:	d002      	beq.n	cb54 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    cb4e:	f06f 0310 	mvn.w	r3, #16
    cb52:	e007      	b.n	cb64 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    cb54:	4b06      	ldr	r3, [pc, #24]	; (cb70 <cdcdf_acm_read+0x3c>)
    cb56:	7918      	ldrb	r0, [r3, #4]
    cb58:	2300      	movs	r3, #0
    cb5a:	683a      	ldr	r2, [r7, #0]
    cb5c:	6879      	ldr	r1, [r7, #4]
    cb5e:	4c05      	ldr	r4, [pc, #20]	; (cb74 <cdcdf_acm_read+0x40>)
    cb60:	47a0      	blx	r4
    cb62:	4603      	mov	r3, r0
}
    cb64:	4618      	mov	r0, r3
    cb66:	370c      	adds	r7, #12
    cb68:	46bd      	mov	sp, r7
    cb6a:	bd90      	pop	{r4, r7, pc}
    cb6c:	0000cc59 	.word	0x0000cc59
    cb70:	20001140 	.word	0x20001140
    cb74:	0000d7dd 	.word	0x0000d7dd

0000cb78 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    cb78:	b590      	push	{r4, r7, lr}
    cb7a:	b083      	sub	sp, #12
    cb7c:	af00      	add	r7, sp, #0
    cb7e:	6078      	str	r0, [r7, #4]
    cb80:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cb82:	4b0b      	ldr	r3, [pc, #44]	; (cbb0 <cdcdf_acm_write+0x38>)
    cb84:	4798      	blx	r3
    cb86:	4603      	mov	r3, r0
    cb88:	f083 0301 	eor.w	r3, r3, #1
    cb8c:	b2db      	uxtb	r3, r3
    cb8e:	2b00      	cmp	r3, #0
    cb90:	d002      	beq.n	cb98 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    cb92:	f06f 0310 	mvn.w	r3, #16
    cb96:	e007      	b.n	cba8 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    cb98:	4b06      	ldr	r3, [pc, #24]	; (cbb4 <cdcdf_acm_write+0x3c>)
    cb9a:	78d8      	ldrb	r0, [r3, #3]
    cb9c:	2301      	movs	r3, #1
    cb9e:	683a      	ldr	r2, [r7, #0]
    cba0:	6879      	ldr	r1, [r7, #4]
    cba2:	4c05      	ldr	r4, [pc, #20]	; (cbb8 <cdcdf_acm_write+0x40>)
    cba4:	47a0      	blx	r4
    cba6:	4603      	mov	r3, r0
}
    cba8:	4618      	mov	r0, r3
    cbaa:	370c      	adds	r7, #12
    cbac:	46bd      	mov	sp, r7
    cbae:	bd90      	pop	{r4, r7, pc}
    cbb0:	0000cc59 	.word	0x0000cc59
    cbb4:	20001140 	.word	0x20001140
    cbb8:	0000d7dd 	.word	0x0000d7dd

0000cbbc <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    cbbc:	b580      	push	{r7, lr}
    cbbe:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    cbc0:	4b05      	ldr	r3, [pc, #20]	; (cbd8 <cdcdf_acm_stop_xfer+0x1c>)
    cbc2:	78db      	ldrb	r3, [r3, #3]
    cbc4:	4618      	mov	r0, r3
    cbc6:	4b05      	ldr	r3, [pc, #20]	; (cbdc <cdcdf_acm_stop_xfer+0x20>)
    cbc8:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    cbca:	4b03      	ldr	r3, [pc, #12]	; (cbd8 <cdcdf_acm_stop_xfer+0x1c>)
    cbcc:	791b      	ldrb	r3, [r3, #4]
    cbce:	4618      	mov	r0, r3
    cbd0:	4b02      	ldr	r3, [pc, #8]	; (cbdc <cdcdf_acm_stop_xfer+0x20>)
    cbd2:	4798      	blx	r3
}
    cbd4:	bf00      	nop
    cbd6:	bd80      	pop	{r7, pc}
    cbd8:	20001140 	.word	0x20001140
    cbdc:	00003f35 	.word	0x00003f35

0000cbe0 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    cbe0:	b580      	push	{r7, lr}
    cbe2:	b082      	sub	sp, #8
    cbe4:	af00      	add	r7, sp, #0
    cbe6:	4603      	mov	r3, r0
    cbe8:	6039      	str	r1, [r7, #0]
    cbea:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    cbec:	79fb      	ldrb	r3, [r7, #7]
    cbee:	2b03      	cmp	r3, #3
    cbf0:	d822      	bhi.n	cc38 <cdcdf_acm_register_callback+0x58>
    cbf2:	a201      	add	r2, pc, #4	; (adr r2, cbf8 <cdcdf_acm_register_callback+0x18>)
    cbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cbf8:	0000cc09 	.word	0x0000cc09
    cbfc:	0000cc19 	.word	0x0000cc19
    cc00:	0000cc29 	.word	0x0000cc29
    cc04:	0000cc31 	.word	0x0000cc31
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    cc08:	4b0f      	ldr	r3, [pc, #60]	; (cc48 <cdcdf_acm_register_callback+0x68>)
    cc0a:	791b      	ldrb	r3, [r3, #4]
    cc0c:	683a      	ldr	r2, [r7, #0]
    cc0e:	2102      	movs	r1, #2
    cc10:	4618      	mov	r0, r3
    cc12:	4b0e      	ldr	r3, [pc, #56]	; (cc4c <cdcdf_acm_register_callback+0x6c>)
    cc14:	4798      	blx	r3
		break;
    cc16:	e012      	b.n	cc3e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    cc18:	4b0b      	ldr	r3, [pc, #44]	; (cc48 <cdcdf_acm_register_callback+0x68>)
    cc1a:	78db      	ldrb	r3, [r3, #3]
    cc1c:	683a      	ldr	r2, [r7, #0]
    cc1e:	2102      	movs	r1, #2
    cc20:	4618      	mov	r0, r3
    cc22:	4b0a      	ldr	r3, [pc, #40]	; (cc4c <cdcdf_acm_register_callback+0x6c>)
    cc24:	4798      	blx	r3
		break;
    cc26:	e00a      	b.n	cc3e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    cc28:	4a09      	ldr	r2, [pc, #36]	; (cc50 <cdcdf_acm_register_callback+0x70>)
    cc2a:	683b      	ldr	r3, [r7, #0]
    cc2c:	6013      	str	r3, [r2, #0]
		break;
    cc2e:	e006      	b.n	cc3e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    cc30:	4a08      	ldr	r2, [pc, #32]	; (cc54 <cdcdf_acm_register_callback+0x74>)
    cc32:	683b      	ldr	r3, [r7, #0]
    cc34:	6013      	str	r3, [r2, #0]
		break;
    cc36:	e002      	b.n	cc3e <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    cc38:	f06f 030c 	mvn.w	r3, #12
    cc3c:	e000      	b.n	cc40 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    cc3e:	2300      	movs	r3, #0
}
    cc40:	4618      	mov	r0, r3
    cc42:	3708      	adds	r7, #8
    cc44:	46bd      	mov	sp, r7
    cc46:	bd80      	pop	{r7, pc}
    cc48:	20001140 	.word	0x20001140
    cc4c:	00004061 	.word	0x00004061
    cc50:	20001154 	.word	0x20001154
    cc54:	20001150 	.word	0x20001150

0000cc58 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    cc58:	b480      	push	{r7}
    cc5a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    cc5c:	4b03      	ldr	r3, [pc, #12]	; (cc6c <cdcdf_acm_is_enabled+0x14>)
    cc5e:	795b      	ldrb	r3, [r3, #5]
}
    cc60:	4618      	mov	r0, r3
    cc62:	46bd      	mov	sp, r7
    cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc68:	4770      	bx	lr
    cc6a:	bf00      	nop
    cc6c:	20001140 	.word	0x20001140

0000cc70 <usb_get_u16>:
{
    cc70:	b480      	push	{r7}
    cc72:	b083      	sub	sp, #12
    cc74:	af00      	add	r7, sp, #0
    cc76:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cc78:	687b      	ldr	r3, [r7, #4]
    cc7a:	781b      	ldrb	r3, [r3, #0]
    cc7c:	b29a      	uxth	r2, r3
    cc7e:	687b      	ldr	r3, [r7, #4]
    cc80:	3301      	adds	r3, #1
    cc82:	781b      	ldrb	r3, [r3, #0]
    cc84:	b29b      	uxth	r3, r3
    cc86:	021b      	lsls	r3, r3, #8
    cc88:	b29b      	uxth	r3, r3
    cc8a:	4413      	add	r3, r2
    cc8c:	b29b      	uxth	r3, r3
}
    cc8e:	4618      	mov	r0, r3
    cc90:	370c      	adds	r7, #12
    cc92:	46bd      	mov	sp, r7
    cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc98:	4770      	bx	lr

0000cc9a <usb_desc_len>:
{
    cc9a:	b480      	push	{r7}
    cc9c:	b083      	sub	sp, #12
    cc9e:	af00      	add	r7, sp, #0
    cca0:	6078      	str	r0, [r7, #4]
	return desc[0];
    cca2:	687b      	ldr	r3, [r7, #4]
    cca4:	781b      	ldrb	r3, [r3, #0]
}
    cca6:	4618      	mov	r0, r3
    cca8:	370c      	adds	r7, #12
    ccaa:	46bd      	mov	sp, r7
    ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
    ccb0:	4770      	bx	lr
	...

0000ccb4 <usb_desc_next>:
{
    ccb4:	b580      	push	{r7, lr}
    ccb6:	b082      	sub	sp, #8
    ccb8:	af00      	add	r7, sp, #0
    ccba:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ccbc:	6878      	ldr	r0, [r7, #4]
    ccbe:	4b05      	ldr	r3, [pc, #20]	; (ccd4 <usb_desc_next+0x20>)
    ccc0:	4798      	blx	r3
    ccc2:	4603      	mov	r3, r0
    ccc4:	461a      	mov	r2, r3
    ccc6:	687b      	ldr	r3, [r7, #4]
    ccc8:	4413      	add	r3, r2
}
    ccca:	4618      	mov	r0, r3
    cccc:	3708      	adds	r7, #8
    ccce:	46bd      	mov	sp, r7
    ccd0:	bd80      	pop	{r7, pc}
    ccd2:	bf00      	nop
    ccd4:	0000cc9b 	.word	0x0000cc9b

0000ccd8 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    ccd8:	b580      	push	{r7, lr}
    ccda:	b082      	sub	sp, #8
    ccdc:	af00      	add	r7, sp, #0
    ccde:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cce0:	687b      	ldr	r3, [r7, #4]
    cce2:	3302      	adds	r3, #2
    cce4:	4618      	mov	r0, r3
    cce6:	4b03      	ldr	r3, [pc, #12]	; (ccf4 <usb_cfg_desc_total_len+0x1c>)
    cce8:	4798      	blx	r3
    ccea:	4603      	mov	r3, r0
}
    ccec:	4618      	mov	r0, r3
    ccee:	3708      	adds	r7, #8
    ccf0:	46bd      	mov	sp, r7
    ccf2:	bd80      	pop	{r7, pc}
    ccf4:	0000cc71 	.word	0x0000cc71

0000ccf8 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    ccf8:	b590      	push	{r4, r7, lr}
    ccfa:	b085      	sub	sp, #20
    ccfc:	af00      	add	r7, sp, #0
    ccfe:	4603      	mov	r3, r0
    cd00:	6039      	str	r1, [r7, #0]
    cd02:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    cd04:	2300      	movs	r3, #0
    cd06:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    cd08:	683b      	ldr	r3, [r7, #0]
    cd0a:	799a      	ldrb	r2, [r3, #6]
    cd0c:	79db      	ldrb	r3, [r3, #7]
    cd0e:	021b      	lsls	r3, r3, #8
    cd10:	4313      	orrs	r3, r2
    cd12:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    cd14:	897b      	ldrh	r3, [r7, #10]
    cd16:	2b12      	cmp	r3, #18
    cd18:	d901      	bls.n	cd1e <usbdc_get_dev_desc+0x26>
		length = 0x12;
    cd1a:	2312      	movs	r3, #18
    cd1c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    cd1e:	68fb      	ldr	r3, [r7, #12]
    cd20:	2b00      	cmp	r3, #0
    cd22:	d10a      	bne.n	cd3a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    cd24:	4b0f      	ldr	r3, [pc, #60]	; (cd64 <usbdc_get_dev_desc+0x6c>)
    cd26:	681b      	ldr	r3, [r3, #0]
    cd28:	6818      	ldr	r0, [r3, #0]
    cd2a:	4b0e      	ldr	r3, [pc, #56]	; (cd64 <usbdc_get_dev_desc+0x6c>)
    cd2c:	681b      	ldr	r3, [r3, #0]
    cd2e:	685b      	ldr	r3, [r3, #4]
    cd30:	2201      	movs	r2, #1
    cd32:	4619      	mov	r1, r3
    cd34:	4b0c      	ldr	r3, [pc, #48]	; (cd68 <usbdc_get_dev_desc+0x70>)
    cd36:	4798      	blx	r3
    cd38:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    cd3a:	68fb      	ldr	r3, [r7, #12]
    cd3c:	2b00      	cmp	r3, #0
    cd3e:	d101      	bne.n	cd44 <usbdc_get_dev_desc+0x4c>
		return false;
    cd40:	2300      	movs	r3, #0
    cd42:	e00b      	b.n	cd5c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    cd44:	897a      	ldrh	r2, [r7, #10]
    cd46:	79f8      	ldrb	r0, [r7, #7]
    cd48:	2300      	movs	r3, #0
    cd4a:	68f9      	ldr	r1, [r7, #12]
    cd4c:	4c07      	ldr	r4, [pc, #28]	; (cd6c <usbdc_get_dev_desc+0x74>)
    cd4e:	47a0      	blx	r4
    cd50:	4603      	mov	r3, r0
    cd52:	2b00      	cmp	r3, #0
    cd54:	d001      	beq.n	cd5a <usbdc_get_dev_desc+0x62>
		return false;
    cd56:	2300      	movs	r3, #0
    cd58:	e000      	b.n	cd5c <usbdc_get_dev_desc+0x64>
	}
	return true;
    cd5a:	2301      	movs	r3, #1
}
    cd5c:	4618      	mov	r0, r3
    cd5e:	3714      	adds	r7, #20
    cd60:	46bd      	mov	sp, r7
    cd62:	bd90      	pop	{r4, r7, pc}
    cd64:	20001158 	.word	0x20001158
    cd68:	0000da6d 	.word	0x0000da6d
    cd6c:	0000d7dd 	.word	0x0000d7dd

0000cd70 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    cd70:	b590      	push	{r4, r7, lr}
    cd72:	b087      	sub	sp, #28
    cd74:	af00      	add	r7, sp, #0
    cd76:	4603      	mov	r3, r0
    cd78:	6039      	str	r1, [r7, #0]
    cd7a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    cd7c:	2300      	movs	r3, #0
    cd7e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    cd80:	683b      	ldr	r3, [r7, #0]
    cd82:	799a      	ldrb	r2, [r3, #6]
    cd84:	79db      	ldrb	r3, [r3, #7]
    cd86:	021b      	lsls	r3, r3, #8
    cd88:	4313      	orrs	r3, r2
    cd8a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    cd8c:	683b      	ldr	r3, [r7, #0]
    cd8e:	885b      	ldrh	r3, [r3, #2]
    cd90:	b29b      	uxth	r3, r3
    cd92:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cd94:	8a7a      	ldrh	r2, [r7, #18]
    cd96:	4b1e      	ldr	r3, [pc, #120]	; (ce10 <usbdc_get_cfg_desc+0xa0>)
    cd98:	7f1b      	ldrb	r3, [r3, #28]
    cd9a:	3b01      	subs	r3, #1
    cd9c:	4013      	ands	r3, r2
    cd9e:	2b00      	cmp	r3, #0
    cda0:	bf0c      	ite	eq
    cda2:	2301      	moveq	r3, #1
    cda4:	2300      	movne	r3, #0
    cda6:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cda8:	697b      	ldr	r3, [r7, #20]
    cdaa:	2b00      	cmp	r3, #0
    cdac:	d10c      	bne.n	cdc8 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    cdae:	4b18      	ldr	r3, [pc, #96]	; (ce10 <usbdc_get_cfg_desc+0xa0>)
    cdb0:	681b      	ldr	r3, [r3, #0]
    cdb2:	6818      	ldr	r0, [r3, #0]
    cdb4:	4b16      	ldr	r3, [pc, #88]	; (ce10 <usbdc_get_cfg_desc+0xa0>)
    cdb6:	681b      	ldr	r3, [r3, #0]
    cdb8:	6859      	ldr	r1, [r3, #4]
    cdba:	7c3b      	ldrb	r3, [r7, #16]
    cdbc:	3301      	adds	r3, #1
    cdbe:	b2db      	uxtb	r3, r3
    cdc0:	461a      	mov	r2, r3
    cdc2:	4b14      	ldr	r3, [pc, #80]	; (ce14 <usbdc_get_cfg_desc+0xa4>)
    cdc4:	4798      	blx	r3
    cdc6:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    cdc8:	697b      	ldr	r3, [r7, #20]
    cdca:	2b00      	cmp	r3, #0
    cdcc:	d101      	bne.n	cdd2 <usbdc_get_cfg_desc+0x62>
		return false;
    cdce:	2300      	movs	r3, #0
    cdd0:	e019      	b.n	ce06 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    cdd2:	6978      	ldr	r0, [r7, #20]
    cdd4:	4b10      	ldr	r3, [pc, #64]	; (ce18 <usbdc_get_cfg_desc+0xa8>)
    cdd6:	4798      	blx	r3
    cdd8:	4603      	mov	r3, r0
    cdda:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    cddc:	8a7a      	ldrh	r2, [r7, #18]
    cdde:	89fb      	ldrh	r3, [r7, #14]
    cde0:	429a      	cmp	r2, r3
    cde2:	d802      	bhi.n	cdea <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    cde4:	2300      	movs	r3, #0
    cde6:	747b      	strb	r3, [r7, #17]
    cde8:	e001      	b.n	cdee <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    cdea:	89fb      	ldrh	r3, [r7, #14]
    cdec:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    cdee:	8a7a      	ldrh	r2, [r7, #18]
    cdf0:	7c7b      	ldrb	r3, [r7, #17]
    cdf2:	79f8      	ldrb	r0, [r7, #7]
    cdf4:	6979      	ldr	r1, [r7, #20]
    cdf6:	4c09      	ldr	r4, [pc, #36]	; (ce1c <usbdc_get_cfg_desc+0xac>)
    cdf8:	47a0      	blx	r4
    cdfa:	4603      	mov	r3, r0
    cdfc:	2b00      	cmp	r3, #0
    cdfe:	d001      	beq.n	ce04 <usbdc_get_cfg_desc+0x94>
		return false;
    ce00:	2300      	movs	r3, #0
    ce02:	e000      	b.n	ce06 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    ce04:	2301      	movs	r3, #1
}
    ce06:	4618      	mov	r0, r3
    ce08:	371c      	adds	r7, #28
    ce0a:	46bd      	mov	sp, r7
    ce0c:	bd90      	pop	{r4, r7, pc}
    ce0e:	bf00      	nop
    ce10:	20001158 	.word	0x20001158
    ce14:	0000db2d 	.word	0x0000db2d
    ce18:	0000ccd9 	.word	0x0000ccd9
    ce1c:	0000d7dd 	.word	0x0000d7dd

0000ce20 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    ce20:	b590      	push	{r4, r7, lr}
    ce22:	b085      	sub	sp, #20
    ce24:	af00      	add	r7, sp, #0
    ce26:	4603      	mov	r3, r0
    ce28:	6039      	str	r1, [r7, #0]
    ce2a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    ce2c:	683b      	ldr	r3, [r7, #0]
    ce2e:	799a      	ldrb	r2, [r3, #6]
    ce30:	79db      	ldrb	r3, [r3, #7]
    ce32:	021b      	lsls	r3, r3, #8
    ce34:	4313      	orrs	r3, r2
    ce36:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    ce38:	683b      	ldr	r3, [r7, #0]
    ce3a:	885b      	ldrh	r3, [r3, #2]
    ce3c:	b29b      	uxth	r3, r3
    ce3e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ce40:	89fa      	ldrh	r2, [r7, #14]
    ce42:	4b1a      	ldr	r3, [pc, #104]	; (ceac <usbdc_get_str_desc+0x8c>)
    ce44:	7f1b      	ldrb	r3, [r3, #28]
    ce46:	3b01      	subs	r3, #1
    ce48:	4013      	ands	r3, r2
    ce4a:	2b00      	cmp	r3, #0
    ce4c:	bf0c      	ite	eq
    ce4e:	2301      	moveq	r3, #1
    ce50:	2300      	movne	r3, #0
    ce52:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    ce54:	4b15      	ldr	r3, [pc, #84]	; (ceac <usbdc_get_str_desc+0x8c>)
    ce56:	681b      	ldr	r3, [r3, #0]
    ce58:	6818      	ldr	r0, [r3, #0]
    ce5a:	4b14      	ldr	r3, [pc, #80]	; (ceac <usbdc_get_str_desc+0x8c>)
    ce5c:	681b      	ldr	r3, [r3, #0]
    ce5e:	685b      	ldr	r3, [r3, #4]
    ce60:	7b3a      	ldrb	r2, [r7, #12]
    ce62:	4619      	mov	r1, r3
    ce64:	4b12      	ldr	r3, [pc, #72]	; (ceb0 <usbdc_get_str_desc+0x90>)
    ce66:	4798      	blx	r3
    ce68:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    ce6a:	68bb      	ldr	r3, [r7, #8]
    ce6c:	2b00      	cmp	r3, #0
    ce6e:	d101      	bne.n	ce74 <usbdc_get_str_desc+0x54>
		return false;
    ce70:	2300      	movs	r3, #0
    ce72:	e017      	b.n	cea4 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    ce74:	68bb      	ldr	r3, [r7, #8]
    ce76:	781b      	ldrb	r3, [r3, #0]
    ce78:	b29b      	uxth	r3, r3
    ce7a:	89fa      	ldrh	r2, [r7, #14]
    ce7c:	429a      	cmp	r2, r3
    ce7e:	d802      	bhi.n	ce86 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    ce80:	2300      	movs	r3, #0
    ce82:	737b      	strb	r3, [r7, #13]
    ce84:	e002      	b.n	ce8c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    ce86:	68bb      	ldr	r3, [r7, #8]
    ce88:	781b      	ldrb	r3, [r3, #0]
    ce8a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    ce8c:	89fa      	ldrh	r2, [r7, #14]
    ce8e:	7b7b      	ldrb	r3, [r7, #13]
    ce90:	79f8      	ldrb	r0, [r7, #7]
    ce92:	68b9      	ldr	r1, [r7, #8]
    ce94:	4c07      	ldr	r4, [pc, #28]	; (ceb4 <usbdc_get_str_desc+0x94>)
    ce96:	47a0      	blx	r4
    ce98:	4603      	mov	r3, r0
    ce9a:	2b00      	cmp	r3, #0
    ce9c:	d001      	beq.n	cea2 <usbdc_get_str_desc+0x82>
		return false;
    ce9e:	2300      	movs	r3, #0
    cea0:	e000      	b.n	cea4 <usbdc_get_str_desc+0x84>
	}
	return true;
    cea2:	2301      	movs	r3, #1
}
    cea4:	4618      	mov	r0, r3
    cea6:	3714      	adds	r7, #20
    cea8:	46bd      	mov	sp, r7
    ceaa:	bd90      	pop	{r4, r7, pc}
    ceac:	20001158 	.word	0x20001158
    ceb0:	0000dba5 	.word	0x0000dba5
    ceb4:	0000d7dd 	.word	0x0000d7dd

0000ceb8 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    ceb8:	b580      	push	{r7, lr}
    ceba:	b084      	sub	sp, #16
    cebc:	af00      	add	r7, sp, #0
    cebe:	4603      	mov	r3, r0
    cec0:	6039      	str	r1, [r7, #0]
    cec2:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    cec4:	683b      	ldr	r3, [r7, #0]
    cec6:	885b      	ldrh	r3, [r3, #2]
    cec8:	b29b      	uxth	r3, r3
    ceca:	0a1b      	lsrs	r3, r3, #8
    cecc:	b29b      	uxth	r3, r3
    cece:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    ced0:	7bfb      	ldrb	r3, [r7, #15]
    ced2:	2b02      	cmp	r3, #2
    ced4:	d00d      	beq.n	cef2 <usbdc_get_desc_req+0x3a>
    ced6:	2b03      	cmp	r3, #3
    ced8:	d012      	beq.n	cf00 <usbdc_get_desc_req+0x48>
    ceda:	2b01      	cmp	r3, #1
    cedc:	d002      	beq.n	cee4 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    cede:	bf00      	nop
	}
	return false;
    cee0:	2300      	movs	r3, #0
    cee2:	e013      	b.n	cf0c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    cee4:	79fb      	ldrb	r3, [r7, #7]
    cee6:	6839      	ldr	r1, [r7, #0]
    cee8:	4618      	mov	r0, r3
    ceea:	4b0a      	ldr	r3, [pc, #40]	; (cf14 <usbdc_get_desc_req+0x5c>)
    ceec:	4798      	blx	r3
    ceee:	4603      	mov	r3, r0
    cef0:	e00c      	b.n	cf0c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    cef2:	79fb      	ldrb	r3, [r7, #7]
    cef4:	6839      	ldr	r1, [r7, #0]
    cef6:	4618      	mov	r0, r3
    cef8:	4b07      	ldr	r3, [pc, #28]	; (cf18 <usbdc_get_desc_req+0x60>)
    cefa:	4798      	blx	r3
    cefc:	4603      	mov	r3, r0
    cefe:	e005      	b.n	cf0c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    cf00:	79fb      	ldrb	r3, [r7, #7]
    cf02:	6839      	ldr	r1, [r7, #0]
    cf04:	4618      	mov	r0, r3
    cf06:	4b05      	ldr	r3, [pc, #20]	; (cf1c <usbdc_get_desc_req+0x64>)
    cf08:	4798      	blx	r3
    cf0a:	4603      	mov	r3, r0
}
    cf0c:	4618      	mov	r0, r3
    cf0e:	3710      	adds	r7, #16
    cf10:	46bd      	mov	sp, r7
    cf12:	bd80      	pop	{r7, pc}
    cf14:	0000ccf9 	.word	0x0000ccf9
    cf18:	0000cd71 	.word	0x0000cd71
    cf1c:	0000ce21 	.word	0x0000ce21

0000cf20 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    cf20:	b590      	push	{r4, r7, lr}
    cf22:	b085      	sub	sp, #20
    cf24:	af00      	add	r7, sp, #0
    cf26:	4603      	mov	r3, r0
    cf28:	6039      	str	r1, [r7, #0]
    cf2a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cf2c:	683b      	ldr	r3, [r7, #0]
    cf2e:	781b      	ldrb	r3, [r3, #0]
    cf30:	f003 031f 	and.w	r3, r3, #31
    cf34:	2b00      	cmp	r3, #0
    cf36:	db1b      	blt.n	cf70 <usbdc_get_status_req+0x50>
    cf38:	2b01      	cmp	r3, #1
    cf3a:	dd02      	ble.n	cf42 <usbdc_get_status_req+0x22>
    cf3c:	2b02      	cmp	r3, #2
    cf3e:	d003      	beq.n	cf48 <usbdc_get_status_req+0x28>
    cf40:	e016      	b.n	cf70 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    cf42:	2300      	movs	r3, #0
    cf44:	60fb      	str	r3, [r7, #12]
		break;
    cf46:	e015      	b.n	cf74 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    cf48:	683b      	ldr	r3, [r7, #0]
    cf4a:	889b      	ldrh	r3, [r3, #4]
    cf4c:	b29b      	uxth	r3, r3
    cf4e:	b2db      	uxtb	r3, r3
    cf50:	2102      	movs	r1, #2
    cf52:	4618      	mov	r0, r3
    cf54:	4b0f      	ldr	r3, [pc, #60]	; (cf94 <usbdc_get_status_req+0x74>)
    cf56:	4798      	blx	r3
    cf58:	4603      	mov	r3, r0
    cf5a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    cf5c:	68fb      	ldr	r3, [r7, #12]
    cf5e:	2b00      	cmp	r3, #0
    cf60:	da01      	bge.n	cf66 <usbdc_get_status_req+0x46>
			return false;
    cf62:	2300      	movs	r3, #0
    cf64:	e012      	b.n	cf8c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    cf66:	68fb      	ldr	r3, [r7, #12]
    cf68:	f003 0301 	and.w	r3, r3, #1
    cf6c:	60fb      	str	r3, [r7, #12]
		break;
    cf6e:	e001      	b.n	cf74 <usbdc_get_status_req+0x54>
	default:
		return false;
    cf70:	2300      	movs	r3, #0
    cf72:	e00b      	b.n	cf8c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    cf74:	4b08      	ldr	r3, [pc, #32]	; (cf98 <usbdc_get_status_req+0x78>)
    cf76:	695b      	ldr	r3, [r3, #20]
    cf78:	89ba      	ldrh	r2, [r7, #12]
    cf7a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    cf7c:	4b06      	ldr	r3, [pc, #24]	; (cf98 <usbdc_get_status_req+0x78>)
    cf7e:	6959      	ldr	r1, [r3, #20]
    cf80:	79f8      	ldrb	r0, [r7, #7]
    cf82:	2300      	movs	r3, #0
    cf84:	2202      	movs	r2, #2
    cf86:	4c05      	ldr	r4, [pc, #20]	; (cf9c <usbdc_get_status_req+0x7c>)
    cf88:	47a0      	blx	r4
	return true;
    cf8a:	2301      	movs	r3, #1
}
    cf8c:	4618      	mov	r0, r3
    cf8e:	3714      	adds	r7, #20
    cf90:	46bd      	mov	sp, r7
    cf92:	bd90      	pop	{r4, r7, pc}
    cf94:	0000400d 	.word	0x0000400d
    cf98:	20001158 	.word	0x20001158
    cf9c:	0000d7dd 	.word	0x0000d7dd

0000cfa0 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    cfa0:	b590      	push	{r4, r7, lr}
    cfa2:	b085      	sub	sp, #20
    cfa4:	af00      	add	r7, sp, #0
    cfa6:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cfa8:	4b1f      	ldr	r3, [pc, #124]	; (d028 <usbdc_get_interface+0x88>)
    cfaa:	691b      	ldr	r3, [r3, #16]
    cfac:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    cfae:	4b1e      	ldr	r3, [pc, #120]	; (d028 <usbdc_get_interface+0x88>)
    cfb0:	7f5b      	ldrb	r3, [r3, #29]
    cfb2:	461a      	mov	r2, r3
    cfb4:	687b      	ldr	r3, [r7, #4]
    cfb6:	889b      	ldrh	r3, [r3, #4]
    cfb8:	b29b      	uxth	r3, r3
    cfba:	fa42 f303 	asr.w	r3, r2, r3
    cfbe:	f003 0301 	and.w	r3, r3, #1
    cfc2:	2b00      	cmp	r3, #0
    cfc4:	d128      	bne.n	d018 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    cfc6:	4b18      	ldr	r3, [pc, #96]	; (d028 <usbdc_get_interface+0x88>)
    cfc8:	695b      	ldr	r3, [r3, #20]
    cfca:	2200      	movs	r2, #0
    cfcc:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cfce:	4b16      	ldr	r3, [pc, #88]	; (d028 <usbdc_get_interface+0x88>)
    cfd0:	6959      	ldr	r1, [r3, #20]
    cfd2:	2300      	movs	r3, #0
    cfd4:	2201      	movs	r2, #1
    cfd6:	2000      	movs	r0, #0
    cfd8:	4c14      	ldr	r4, [pc, #80]	; (d02c <usbdc_get_interface+0x8c>)
    cfda:	47a0      	blx	r4
		return true;
    cfdc:	2301      	movs	r3, #1
    cfde:	e01f      	b.n	d020 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    cfe0:	68fb      	ldr	r3, [r7, #12]
    cfe2:	685b      	ldr	r3, [r3, #4]
    cfe4:	687a      	ldr	r2, [r7, #4]
    cfe6:	2102      	movs	r1, #2
    cfe8:	68f8      	ldr	r0, [r7, #12]
    cfea:	4798      	blx	r3
    cfec:	60b8      	str	r0, [r7, #8]
    cfee:	68bb      	ldr	r3, [r7, #8]
    cff0:	2b00      	cmp	r3, #0
    cff2:	da03      	bge.n	cffc <usbdc_get_interface+0x5c>
			func = func->next;
    cff4:	68fb      	ldr	r3, [r7, #12]
    cff6:	681b      	ldr	r3, [r3, #0]
    cff8:	60fb      	str	r3, [r7, #12]
    cffa:	e00d      	b.n	d018 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    cffc:	4b0a      	ldr	r3, [pc, #40]	; (d028 <usbdc_get_interface+0x88>)
    cffe:	695b      	ldr	r3, [r3, #20]
    d000:	68ba      	ldr	r2, [r7, #8]
    d002:	b2d2      	uxtb	r2, r2
    d004:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d006:	4b08      	ldr	r3, [pc, #32]	; (d028 <usbdc_get_interface+0x88>)
    d008:	6959      	ldr	r1, [r3, #20]
    d00a:	2300      	movs	r3, #0
    d00c:	2201      	movs	r2, #1
    d00e:	2000      	movs	r0, #0
    d010:	4c06      	ldr	r4, [pc, #24]	; (d02c <usbdc_get_interface+0x8c>)
    d012:	47a0      	blx	r4
			return true;
    d014:	2301      	movs	r3, #1
    d016:	e003      	b.n	d020 <usbdc_get_interface+0x80>
	while (NULL != func) {
    d018:	68fb      	ldr	r3, [r7, #12]
    d01a:	2b00      	cmp	r3, #0
    d01c:	d1e0      	bne.n	cfe0 <usbdc_get_interface+0x40>
		}
	}
	return false;
    d01e:	2300      	movs	r3, #0
}
    d020:	4618      	mov	r0, r3
    d022:	3714      	adds	r7, #20
    d024:	46bd      	mov	sp, r7
    d026:	bd90      	pop	{r4, r7, pc}
    d028:	20001158 	.word	0x20001158
    d02c:	0000d7dd 	.word	0x0000d7dd

0000d030 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    d030:	b590      	push	{r4, r7, lr}
    d032:	b083      	sub	sp, #12
    d034:	af00      	add	r7, sp, #0
    d036:	4603      	mov	r3, r0
    d038:	6039      	str	r1, [r7, #0]
    d03a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d03c:	683b      	ldr	r3, [r7, #0]
    d03e:	785b      	ldrb	r3, [r3, #1]
    d040:	2b0a      	cmp	r3, #10
    d042:	d83a      	bhi.n	d0ba <usbdc_get_req+0x8a>
    d044:	a201      	add	r2, pc, #4	; (adr r2, d04c <usbdc_get_req+0x1c>)
    d046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d04a:	bf00      	nop
    d04c:	0000d0a3 	.word	0x0000d0a3
    d050:	0000d0bb 	.word	0x0000d0bb
    d054:	0000d0bb 	.word	0x0000d0bb
    d058:	0000d0bb 	.word	0x0000d0bb
    d05c:	0000d0bb 	.word	0x0000d0bb
    d060:	0000d0bb 	.word	0x0000d0bb
    d064:	0000d079 	.word	0x0000d079
    d068:	0000d0bb 	.word	0x0000d0bb
    d06c:	0000d087 	.word	0x0000d087
    d070:	0000d0bb 	.word	0x0000d0bb
    d074:	0000d0b1 	.word	0x0000d0b1
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    d078:	79fb      	ldrb	r3, [r7, #7]
    d07a:	6839      	ldr	r1, [r7, #0]
    d07c:	4618      	mov	r0, r3
    d07e:	4b11      	ldr	r3, [pc, #68]	; (d0c4 <usbdc_get_req+0x94>)
    d080:	4798      	blx	r3
    d082:	4603      	mov	r3, r0
    d084:	e01a      	b.n	d0bc <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d086:	4b10      	ldr	r3, [pc, #64]	; (d0c8 <usbdc_get_req+0x98>)
    d088:	695b      	ldr	r3, [r3, #20]
    d08a:	4a0f      	ldr	r2, [pc, #60]	; (d0c8 <usbdc_get_req+0x98>)
    d08c:	7ed2      	ldrb	r2, [r2, #27]
    d08e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d090:	4b0d      	ldr	r3, [pc, #52]	; (d0c8 <usbdc_get_req+0x98>)
    d092:	6959      	ldr	r1, [r3, #20]
    d094:	79f8      	ldrb	r0, [r7, #7]
    d096:	2300      	movs	r3, #0
    d098:	2201      	movs	r2, #1
    d09a:	4c0c      	ldr	r4, [pc, #48]	; (d0cc <usbdc_get_req+0x9c>)
    d09c:	47a0      	blx	r4
		return true;
    d09e:	2301      	movs	r3, #1
    d0a0:	e00c      	b.n	d0bc <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    d0a2:	79fb      	ldrb	r3, [r7, #7]
    d0a4:	6839      	ldr	r1, [r7, #0]
    d0a6:	4618      	mov	r0, r3
    d0a8:	4b09      	ldr	r3, [pc, #36]	; (d0d0 <usbdc_get_req+0xa0>)
    d0aa:	4798      	blx	r3
    d0ac:	4603      	mov	r3, r0
    d0ae:	e005      	b.n	d0bc <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    d0b0:	6838      	ldr	r0, [r7, #0]
    d0b2:	4b08      	ldr	r3, [pc, #32]	; (d0d4 <usbdc_get_req+0xa4>)
    d0b4:	4798      	blx	r3
    d0b6:	4603      	mov	r3, r0
    d0b8:	e000      	b.n	d0bc <usbdc_get_req+0x8c>
	default:
		return false;
    d0ba:	2300      	movs	r3, #0
	}
}
    d0bc:	4618      	mov	r0, r3
    d0be:	370c      	adds	r7, #12
    d0c0:	46bd      	mov	sp, r7
    d0c2:	bd90      	pop	{r4, r7, pc}
    d0c4:	0000ceb9 	.word	0x0000ceb9
    d0c8:	20001158 	.word	0x20001158
    d0cc:	0000d7dd 	.word	0x0000d7dd
    d0d0:	0000cf21 	.word	0x0000cf21
    d0d4:	0000cfa1 	.word	0x0000cfa1

0000d0d8 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d0d8:	b590      	push	{r4, r7, lr}
    d0da:	b083      	sub	sp, #12
    d0dc:	af00      	add	r7, sp, #0
    d0de:	4603      	mov	r3, r0
    d0e0:	6039      	str	r1, [r7, #0]
    d0e2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d0e4:	683b      	ldr	r3, [r7, #0]
    d0e6:	781b      	ldrb	r3, [r3, #0]
    d0e8:	f003 031f 	and.w	r3, r3, #31
    d0ec:	2b02      	cmp	r3, #2
    d0ee:	d116      	bne.n	d11e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d0f0:	683b      	ldr	r3, [r7, #0]
    d0f2:	88db      	ldrh	r3, [r3, #6]
    d0f4:	b29b      	uxth	r3, r3
    d0f6:	2b00      	cmp	r3, #0
    d0f8:	d001      	beq.n	d0fe <usbdc_clear_ftr_req+0x26>
			return false;
    d0fa:	2300      	movs	r3, #0
    d0fc:	e010      	b.n	d120 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d0fe:	683b      	ldr	r3, [r7, #0]
    d100:	889b      	ldrh	r3, [r3, #4]
    d102:	b29b      	uxth	r3, r3
    d104:	b2db      	uxtb	r3, r3
    d106:	2100      	movs	r1, #0
    d108:	4618      	mov	r0, r3
    d10a:	4b07      	ldr	r3, [pc, #28]	; (d128 <usbdc_clear_ftr_req+0x50>)
    d10c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d10e:	79f8      	ldrb	r0, [r7, #7]
    d110:	2301      	movs	r3, #1
    d112:	2200      	movs	r2, #0
    d114:	2100      	movs	r1, #0
    d116:	4c05      	ldr	r4, [pc, #20]	; (d12c <usbdc_clear_ftr_req+0x54>)
    d118:	47a0      	blx	r4
		return true;
    d11a:	2301      	movs	r3, #1
    d11c:	e000      	b.n	d120 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d11e:	2300      	movs	r3, #0
	}
}
    d120:	4618      	mov	r0, r3
    d122:	370c      	adds	r7, #12
    d124:	46bd      	mov	sp, r7
    d126:	bd90      	pop	{r4, r7, pc}
    d128:	0000400d 	.word	0x0000400d
    d12c:	0000d7dd 	.word	0x0000d7dd

0000d130 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d130:	b590      	push	{r4, r7, lr}
    d132:	b083      	sub	sp, #12
    d134:	af00      	add	r7, sp, #0
    d136:	4603      	mov	r3, r0
    d138:	6039      	str	r1, [r7, #0]
    d13a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d13c:	683b      	ldr	r3, [r7, #0]
    d13e:	781b      	ldrb	r3, [r3, #0]
    d140:	f003 031f 	and.w	r3, r3, #31
    d144:	2b02      	cmp	r3, #2
    d146:	d116      	bne.n	d176 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d148:	683b      	ldr	r3, [r7, #0]
    d14a:	88db      	ldrh	r3, [r3, #6]
    d14c:	b29b      	uxth	r3, r3
    d14e:	2b00      	cmp	r3, #0
    d150:	d001      	beq.n	d156 <usbdc_set_ftr_req+0x26>
			return false;
    d152:	2300      	movs	r3, #0
    d154:	e010      	b.n	d178 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d156:	683b      	ldr	r3, [r7, #0]
    d158:	889b      	ldrh	r3, [r3, #4]
    d15a:	b29b      	uxth	r3, r3
    d15c:	b2db      	uxtb	r3, r3
    d15e:	2101      	movs	r1, #1
    d160:	4618      	mov	r0, r3
    d162:	4b07      	ldr	r3, [pc, #28]	; (d180 <usbdc_set_ftr_req+0x50>)
    d164:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d166:	79f8      	ldrb	r0, [r7, #7]
    d168:	2301      	movs	r3, #1
    d16a:	2200      	movs	r2, #0
    d16c:	2100      	movs	r1, #0
    d16e:	4c05      	ldr	r4, [pc, #20]	; (d184 <usbdc_set_ftr_req+0x54>)
    d170:	47a0      	blx	r4
		return true;
    d172:	2301      	movs	r3, #1
    d174:	e000      	b.n	d178 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d176:	2300      	movs	r3, #0
	}
}
    d178:	4618      	mov	r0, r3
    d17a:	370c      	adds	r7, #12
    d17c:	46bd      	mov	sp, r7
    d17e:	bd90      	pop	{r4, r7, pc}
    d180:	0000400d 	.word	0x0000400d
    d184:	0000d7dd 	.word	0x0000d7dd

0000d188 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d188:	b580      	push	{r7, lr}
    d18a:	b082      	sub	sp, #8
    d18c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d18e:	4b0a      	ldr	r3, [pc, #40]	; (d1b8 <usbdc_unconfig+0x30>)
    d190:	691b      	ldr	r3, [r3, #16]
    d192:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d194:	e008      	b.n	d1a8 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d196:	687b      	ldr	r3, [r7, #4]
    d198:	685b      	ldr	r3, [r3, #4]
    d19a:	2200      	movs	r2, #0
    d19c:	2101      	movs	r1, #1
    d19e:	6878      	ldr	r0, [r7, #4]
    d1a0:	4798      	blx	r3
		func = func->next;
    d1a2:	687b      	ldr	r3, [r7, #4]
    d1a4:	681b      	ldr	r3, [r3, #0]
    d1a6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d1a8:	687b      	ldr	r3, [r7, #4]
    d1aa:	2b00      	cmp	r3, #0
    d1ac:	d1f3      	bne.n	d196 <usbdc_unconfig+0xe>
	}
}
    d1ae:	bf00      	nop
    d1b0:	3708      	adds	r7, #8
    d1b2:	46bd      	mov	sp, r7
    d1b4:	bd80      	pop	{r7, pc}
    d1b6:	bf00      	nop
    d1b8:	20001158 	.word	0x20001158

0000d1bc <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d1bc:	b580      	push	{r7, lr}
    d1be:	b088      	sub	sp, #32
    d1c0:	af00      	add	r7, sp, #0
    d1c2:	4603      	mov	r3, r0
    d1c4:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d1c6:	2300      	movs	r3, #0
    d1c8:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d1ca:	23ff      	movs	r3, #255	; 0xff
    d1cc:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d1ce:	79fb      	ldrb	r3, [r7, #7]
    d1d0:	2b00      	cmp	r3, #0
    d1d2:	d103      	bne.n	d1dc <usbdc_set_config+0x20>
		usbdc_unconfig();
    d1d4:	4b2e      	ldr	r3, [pc, #184]	; (d290 <usbdc_set_config+0xd4>)
    d1d6:	4798      	blx	r3
		return true;
    d1d8:	2301      	movs	r3, #1
    d1da:	e055      	b.n	d288 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d1dc:	69bb      	ldr	r3, [r7, #24]
    d1de:	2b00      	cmp	r3, #0
    d1e0:	d10a      	bne.n	d1f8 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d1e2:	4b2c      	ldr	r3, [pc, #176]	; (d294 <usbdc_set_config+0xd8>)
    d1e4:	681b      	ldr	r3, [r3, #0]
    d1e6:	6818      	ldr	r0, [r3, #0]
    d1e8:	4b2a      	ldr	r3, [pc, #168]	; (d294 <usbdc_set_config+0xd8>)
    d1ea:	681b      	ldr	r3, [r3, #0]
    d1ec:	685b      	ldr	r3, [r3, #4]
    d1ee:	79fa      	ldrb	r2, [r7, #7]
    d1f0:	4619      	mov	r1, r3
    d1f2:	4b29      	ldr	r3, [pc, #164]	; (d298 <usbdc_set_config+0xdc>)
    d1f4:	4798      	blx	r3
    d1f6:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d1f8:	69bb      	ldr	r3, [r7, #24]
    d1fa:	2b00      	cmp	r3, #0
    d1fc:	d101      	bne.n	d202 <usbdc_set_config+0x46>
		return false;
    d1fe:	2300      	movs	r3, #0
    d200:	e042      	b.n	d288 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d202:	69b8      	ldr	r0, [r7, #24]
    d204:	4b25      	ldr	r3, [pc, #148]	; (d29c <usbdc_set_config+0xe0>)
    d206:	4798      	blx	r3
    d208:	4603      	mov	r3, r0
    d20a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d20c:	8abb      	ldrh	r3, [r7, #20]
    d20e:	69ba      	ldr	r2, [r7, #24]
    d210:	4413      	add	r3, r2
    d212:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d214:	693b      	ldr	r3, [r7, #16]
    d216:	2204      	movs	r2, #4
    d218:	4619      	mov	r1, r3
    d21a:	69b8      	ldr	r0, [r7, #24]
    d21c:	4b20      	ldr	r3, [pc, #128]	; (d2a0 <usbdc_set_config+0xe4>)
    d21e:	4798      	blx	r3
    d220:	4603      	mov	r3, r0
    d222:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d224:	e02c      	b.n	d280 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d226:	68fb      	ldr	r3, [r7, #12]
    d228:	3302      	adds	r3, #2
    d22a:	781b      	ldrb	r3, [r3, #0]
    d22c:	7dfa      	ldrb	r2, [r7, #23]
    d22e:	429a      	cmp	r2, r3
    d230:	d018      	beq.n	d264 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d232:	68fb      	ldr	r3, [r7, #12]
    d234:	789b      	ldrb	r3, [r3, #2]
    d236:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d238:	4b16      	ldr	r3, [pc, #88]	; (d294 <usbdc_set_config+0xd8>)
    d23a:	691b      	ldr	r3, [r3, #16]
    d23c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d23e:	e00c      	b.n	d25a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d240:	69fb      	ldr	r3, [r7, #28]
    d242:	685b      	ldr	r3, [r3, #4]
    d244:	f107 020c 	add.w	r2, r7, #12
    d248:	2100      	movs	r1, #0
    d24a:	69f8      	ldr	r0, [r7, #28]
    d24c:	4798      	blx	r3
    d24e:	4603      	mov	r3, r0
    d250:	2b00      	cmp	r3, #0
    d252:	d006      	beq.n	d262 <usbdc_set_config+0xa6>
					func = func->next;
    d254:	69fb      	ldr	r3, [r7, #28]
    d256:	681b      	ldr	r3, [r3, #0]
    d258:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d25a:	69fb      	ldr	r3, [r7, #28]
    d25c:	2b00      	cmp	r3, #0
    d25e:	d1ef      	bne.n	d240 <usbdc_set_config+0x84>
    d260:	e000      	b.n	d264 <usbdc_set_config+0xa8>
				} else {
					break;
    d262:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d264:	68fb      	ldr	r3, [r7, #12]
    d266:	4618      	mov	r0, r3
    d268:	4b0e      	ldr	r3, [pc, #56]	; (d2a4 <usbdc_set_config+0xe8>)
    d26a:	4798      	blx	r3
    d26c:	4603      	mov	r3, r0
    d26e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d270:	68fb      	ldr	r3, [r7, #12]
    d272:	6939      	ldr	r1, [r7, #16]
    d274:	2204      	movs	r2, #4
    d276:	4618      	mov	r0, r3
    d278:	4b09      	ldr	r3, [pc, #36]	; (d2a0 <usbdc_set_config+0xe4>)
    d27a:	4798      	blx	r3
    d27c:	4603      	mov	r3, r0
    d27e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d280:	68fb      	ldr	r3, [r7, #12]
    d282:	2b00      	cmp	r3, #0
    d284:	d1cf      	bne.n	d226 <usbdc_set_config+0x6a>
	}
	return true;
    d286:	2301      	movs	r3, #1
}
    d288:	4618      	mov	r0, r3
    d28a:	3720      	adds	r7, #32
    d28c:	46bd      	mov	sp, r7
    d28e:	bd80      	pop	{r7, pc}
    d290:	0000d189 	.word	0x0000d189
    d294:	20001158 	.word	0x20001158
    d298:	0000db2d 	.word	0x0000db2d
    d29c:	0000ccd9 	.word	0x0000ccd9
    d2a0:	0000da6d 	.word	0x0000da6d
    d2a4:	0000ccb5 	.word	0x0000ccb5

0000d2a8 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d2a8:	b580      	push	{r7, lr}
    d2aa:	b082      	sub	sp, #8
    d2ac:	af00      	add	r7, sp, #0
    d2ae:	4603      	mov	r3, r0
    d2b0:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d2b2:	79fb      	ldrb	r3, [r7, #7]
    d2b4:	4618      	mov	r0, r3
    d2b6:	4b03      	ldr	r3, [pc, #12]	; (d2c4 <usbdc_set_address+0x1c>)
    d2b8:	4798      	blx	r3
}
    d2ba:	bf00      	nop
    d2bc:	3708      	adds	r7, #8
    d2be:	46bd      	mov	sp, r7
    d2c0:	bd80      	pop	{r7, pc}
    d2c2:	bf00      	nop
    d2c4:	00003c29 	.word	0x00003c29

0000d2c8 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d2c8:	b590      	push	{r4, r7, lr}
    d2ca:	b087      	sub	sp, #28
    d2cc:	af00      	add	r7, sp, #0
    d2ce:	4603      	mov	r3, r0
    d2d0:	460a      	mov	r2, r1
    d2d2:	80fb      	strh	r3, [r7, #6]
    d2d4:	4613      	mov	r3, r2
    d2d6:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d2d8:	2300      	movs	r3, #0
    d2da:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d2dc:	693b      	ldr	r3, [r7, #16]
    d2de:	2b00      	cmp	r3, #0
    d2e0:	d10b      	bne.n	d2fa <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d2e2:	4b43      	ldr	r3, [pc, #268]	; (d3f0 <usbdc_set_interface+0x128>)
    d2e4:	681b      	ldr	r3, [r3, #0]
    d2e6:	6818      	ldr	r0, [r3, #0]
    d2e8:	4b41      	ldr	r3, [pc, #260]	; (d3f0 <usbdc_set_interface+0x128>)
    d2ea:	681b      	ldr	r3, [r3, #0]
    d2ec:	6859      	ldr	r1, [r3, #4]
    d2ee:	4b40      	ldr	r3, [pc, #256]	; (d3f0 <usbdc_set_interface+0x128>)
    d2f0:	7edb      	ldrb	r3, [r3, #27]
    d2f2:	461a      	mov	r2, r3
    d2f4:	4b3f      	ldr	r3, [pc, #252]	; (d3f4 <usbdc_set_interface+0x12c>)
    d2f6:	4798      	blx	r3
    d2f8:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d2fa:	693b      	ldr	r3, [r7, #16]
    d2fc:	2b00      	cmp	r3, #0
    d2fe:	d101      	bne.n	d304 <usbdc_set_interface+0x3c>
		return false;
    d300:	2300      	movs	r3, #0
    d302:	e071      	b.n	d3e8 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d304:	693b      	ldr	r3, [r7, #16]
    d306:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d308:	6938      	ldr	r0, [r7, #16]
    d30a:	4b3b      	ldr	r3, [pc, #236]	; (d3f8 <usbdc_set_interface+0x130>)
    d30c:	4798      	blx	r3
    d30e:	4603      	mov	r3, r0
    d310:	461a      	mov	r2, r3
    d312:	693b      	ldr	r3, [r7, #16]
    d314:	4413      	add	r3, r2
    d316:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d318:	68bb      	ldr	r3, [r7, #8]
    d31a:	68f9      	ldr	r1, [r7, #12]
    d31c:	2204      	movs	r2, #4
    d31e:	4618      	mov	r0, r3
    d320:	4b36      	ldr	r3, [pc, #216]	; (d3fc <usbdc_set_interface+0x134>)
    d322:	4798      	blx	r3
    d324:	6138      	str	r0, [r7, #16]
    d326:	693b      	ldr	r3, [r7, #16]
    d328:	2b00      	cmp	r3, #0
    d32a:	d113      	bne.n	d354 <usbdc_set_interface+0x8c>
		return false;
    d32c:	2300      	movs	r3, #0
    d32e:	e05b      	b.n	d3e8 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d330:	68bb      	ldr	r3, [r7, #8]
    d332:	4618      	mov	r0, r3
    d334:	4b32      	ldr	r3, [pc, #200]	; (d400 <usbdc_set_interface+0x138>)
    d336:	4798      	blx	r3
    d338:	4603      	mov	r3, r0
    d33a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d33c:	68bb      	ldr	r3, [r7, #8]
    d33e:	68f9      	ldr	r1, [r7, #12]
    d340:	2204      	movs	r2, #4
    d342:	4618      	mov	r0, r3
    d344:	4b2d      	ldr	r3, [pc, #180]	; (d3fc <usbdc_set_interface+0x134>)
    d346:	4798      	blx	r3
    d348:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d34a:	693b      	ldr	r3, [r7, #16]
    d34c:	2b00      	cmp	r3, #0
    d34e:	d101      	bne.n	d354 <usbdc_set_interface+0x8c>
			return false;
    d350:	2300      	movs	r3, #0
    d352:	e049      	b.n	d3e8 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d354:	693b      	ldr	r3, [r7, #16]
    d356:	3302      	adds	r3, #2
    d358:	781b      	ldrb	r3, [r3, #0]
    d35a:	b29b      	uxth	r3, r3
    d35c:	88ba      	ldrh	r2, [r7, #4]
    d35e:	429a      	cmp	r2, r3
    d360:	d1e6      	bne.n	d330 <usbdc_set_interface+0x68>
    d362:	693b      	ldr	r3, [r7, #16]
    d364:	3303      	adds	r3, #3
    d366:	781b      	ldrb	r3, [r3, #0]
    d368:	b29b      	uxth	r3, r3
    d36a:	88fa      	ldrh	r2, [r7, #6]
    d36c:	429a      	cmp	r2, r3
    d36e:	d1df      	bne.n	d330 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d370:	693b      	ldr	r3, [r7, #16]
    d372:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d374:	4b1e      	ldr	r3, [pc, #120]	; (d3f0 <usbdc_set_interface+0x128>)
    d376:	691b      	ldr	r3, [r3, #16]
    d378:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d37a:	e031      	b.n	d3e0 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d37c:	697b      	ldr	r3, [r7, #20]
    d37e:	685b      	ldr	r3, [r3, #4]
    d380:	f107 0208 	add.w	r2, r7, #8
    d384:	2101      	movs	r1, #1
    d386:	6978      	ldr	r0, [r7, #20]
    d388:	4798      	blx	r3
    d38a:	4603      	mov	r3, r0
    d38c:	2b00      	cmp	r3, #0
    d38e:	d003      	beq.n	d398 <usbdc_set_interface+0xd0>
			func = func->next;
    d390:	697b      	ldr	r3, [r7, #20]
    d392:	681b      	ldr	r3, [r3, #0]
    d394:	617b      	str	r3, [r7, #20]
    d396:	e023      	b.n	d3e0 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d398:	697b      	ldr	r3, [r7, #20]
    d39a:	685b      	ldr	r3, [r3, #4]
    d39c:	f107 0208 	add.w	r2, r7, #8
    d3a0:	2100      	movs	r1, #0
    d3a2:	6978      	ldr	r0, [r7, #20]
    d3a4:	4798      	blx	r3
    d3a6:	4603      	mov	r3, r0
    d3a8:	2b00      	cmp	r3, #0
    d3aa:	d117      	bne.n	d3dc <usbdc_set_interface+0x114>
			if (alt_set) {
    d3ac:	88fb      	ldrh	r3, [r7, #6]
    d3ae:	2b00      	cmp	r3, #0
    d3b0:	d00c      	beq.n	d3cc <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d3b2:	4b0f      	ldr	r3, [pc, #60]	; (d3f0 <usbdc_set_interface+0x128>)
    d3b4:	7f5b      	ldrb	r3, [r3, #29]
    d3b6:	b25a      	sxtb	r2, r3
    d3b8:	88bb      	ldrh	r3, [r7, #4]
    d3ba:	2101      	movs	r1, #1
    d3bc:	fa01 f303 	lsl.w	r3, r1, r3
    d3c0:	b25b      	sxtb	r3, r3
    d3c2:	4313      	orrs	r3, r2
    d3c4:	b25b      	sxtb	r3, r3
    d3c6:	b2da      	uxtb	r2, r3
    d3c8:	4b09      	ldr	r3, [pc, #36]	; (d3f0 <usbdc_set_interface+0x128>)
    d3ca:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d3cc:	2300      	movs	r3, #0
    d3ce:	2200      	movs	r2, #0
    d3d0:	2100      	movs	r1, #0
    d3d2:	2000      	movs	r0, #0
    d3d4:	4c0b      	ldr	r4, [pc, #44]	; (d404 <usbdc_set_interface+0x13c>)
    d3d6:	47a0      	blx	r4
			return true;
    d3d8:	2301      	movs	r3, #1
    d3da:	e005      	b.n	d3e8 <usbdc_set_interface+0x120>
		} else {
			return false;
    d3dc:	2300      	movs	r3, #0
    d3de:	e003      	b.n	d3e8 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d3e0:	697b      	ldr	r3, [r7, #20]
    d3e2:	2b00      	cmp	r3, #0
    d3e4:	d1ca      	bne.n	d37c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d3e6:	2300      	movs	r3, #0
}
    d3e8:	4618      	mov	r0, r3
    d3ea:	371c      	adds	r7, #28
    d3ec:	46bd      	mov	sp, r7
    d3ee:	bd90      	pop	{r4, r7, pc}
    d3f0:	20001158 	.word	0x20001158
    d3f4:	0000db2d 	.word	0x0000db2d
    d3f8:	0000ccd9 	.word	0x0000ccd9
    d3fc:	0000da6d 	.word	0x0000da6d
    d400:	0000ccb5 	.word	0x0000ccb5
    d404:	0000d7dd 	.word	0x0000d7dd

0000d408 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d408:	b590      	push	{r4, r7, lr}
    d40a:	b083      	sub	sp, #12
    d40c:	af00      	add	r7, sp, #0
    d40e:	4603      	mov	r3, r0
    d410:	6039      	str	r1, [r7, #0]
    d412:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d414:	683b      	ldr	r3, [r7, #0]
    d416:	785b      	ldrb	r3, [r3, #1]
    d418:	3b01      	subs	r3, #1
    d41a:	2b0a      	cmp	r3, #10
    d41c:	d85b      	bhi.n	d4d6 <usbdc_set_req+0xce>
    d41e:	a201      	add	r2, pc, #4	; (adr r2, d424 <usbdc_set_req+0x1c>)
    d420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d424:	0000d4a3 	.word	0x0000d4a3
    d428:	0000d4d7 	.word	0x0000d4d7
    d42c:	0000d4b1 	.word	0x0000d4b1
    d430:	0000d4d7 	.word	0x0000d4d7
    d434:	0000d451 	.word	0x0000d451
    d438:	0000d4d7 	.word	0x0000d4d7
    d43c:	0000d4d7 	.word	0x0000d4d7
    d440:	0000d4d7 	.word	0x0000d4d7
    d444:	0000d46b 	.word	0x0000d46b
    d448:	0000d4d7 	.word	0x0000d4d7
    d44c:	0000d4bf 	.word	0x0000d4bf
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d450:	79f8      	ldrb	r0, [r7, #7]
    d452:	2301      	movs	r3, #1
    d454:	2200      	movs	r2, #0
    d456:	2100      	movs	r1, #0
    d458:	4c21      	ldr	r4, [pc, #132]	; (d4e0 <usbdc_set_req+0xd8>)
    d45a:	47a0      	blx	r4
    d45c:	4603      	mov	r3, r0
    d45e:	2b00      	cmp	r3, #0
    d460:	bf0c      	ite	eq
    d462:	2301      	moveq	r3, #1
    d464:	2300      	movne	r3, #0
    d466:	b2db      	uxtb	r3, r3
    d468:	e036      	b.n	d4d8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d46a:	683b      	ldr	r3, [r7, #0]
    d46c:	885b      	ldrh	r3, [r3, #2]
    d46e:	b29b      	uxth	r3, r3
    d470:	b2db      	uxtb	r3, r3
    d472:	4618      	mov	r0, r3
    d474:	4b1b      	ldr	r3, [pc, #108]	; (d4e4 <usbdc_set_req+0xdc>)
    d476:	4798      	blx	r3
    d478:	4603      	mov	r3, r0
    d47a:	f083 0301 	eor.w	r3, r3, #1
    d47e:	b2db      	uxtb	r3, r3
    d480:	2b00      	cmp	r3, #0
    d482:	d001      	beq.n	d488 <usbdc_set_req+0x80>
			return false;
    d484:	2300      	movs	r3, #0
    d486:	e027      	b.n	d4d8 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d488:	79f8      	ldrb	r0, [r7, #7]
    d48a:	2301      	movs	r3, #1
    d48c:	2200      	movs	r2, #0
    d48e:	2100      	movs	r1, #0
    d490:	4c13      	ldr	r4, [pc, #76]	; (d4e0 <usbdc_set_req+0xd8>)
    d492:	47a0      	blx	r4
    d494:	4603      	mov	r3, r0
    d496:	2b00      	cmp	r3, #0
    d498:	bf0c      	ite	eq
    d49a:	2301      	moveq	r3, #1
    d49c:	2300      	movne	r3, #0
    d49e:	b2db      	uxtb	r3, r3
    d4a0:	e01a      	b.n	d4d8 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d4a2:	79fb      	ldrb	r3, [r7, #7]
    d4a4:	6839      	ldr	r1, [r7, #0]
    d4a6:	4618      	mov	r0, r3
    d4a8:	4b0f      	ldr	r3, [pc, #60]	; (d4e8 <usbdc_set_req+0xe0>)
    d4aa:	4798      	blx	r3
    d4ac:	4603      	mov	r3, r0
    d4ae:	e013      	b.n	d4d8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d4b0:	79fb      	ldrb	r3, [r7, #7]
    d4b2:	6839      	ldr	r1, [r7, #0]
    d4b4:	4618      	mov	r0, r3
    d4b6:	4b0d      	ldr	r3, [pc, #52]	; (d4ec <usbdc_set_req+0xe4>)
    d4b8:	4798      	blx	r3
    d4ba:	4603      	mov	r3, r0
    d4bc:	e00c      	b.n	d4d8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d4be:	683b      	ldr	r3, [r7, #0]
    d4c0:	885b      	ldrh	r3, [r3, #2]
    d4c2:	b29a      	uxth	r2, r3
    d4c4:	683b      	ldr	r3, [r7, #0]
    d4c6:	889b      	ldrh	r3, [r3, #4]
    d4c8:	b29b      	uxth	r3, r3
    d4ca:	4619      	mov	r1, r3
    d4cc:	4610      	mov	r0, r2
    d4ce:	4b08      	ldr	r3, [pc, #32]	; (d4f0 <usbdc_set_req+0xe8>)
    d4d0:	4798      	blx	r3
    d4d2:	4603      	mov	r3, r0
    d4d4:	e000      	b.n	d4d8 <usbdc_set_req+0xd0>
	default:
		return false;
    d4d6:	2300      	movs	r3, #0
	}
}
    d4d8:	4618      	mov	r0, r3
    d4da:	370c      	adds	r7, #12
    d4dc:	46bd      	mov	sp, r7
    d4de:	bd90      	pop	{r4, r7, pc}
    d4e0:	0000d7dd 	.word	0x0000d7dd
    d4e4:	0000d1bd 	.word	0x0000d1bd
    d4e8:	0000d0d9 	.word	0x0000d0d9
    d4ec:	0000d131 	.word	0x0000d131
    d4f0:	0000d2c9 	.word	0x0000d2c9

0000d4f4 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d4f4:	b580      	push	{r7, lr}
    d4f6:	b082      	sub	sp, #8
    d4f8:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d4fa:	4b0a      	ldr	r3, [pc, #40]	; (d524 <usbdc_sof_notify+0x30>)
    d4fc:	685b      	ldr	r3, [r3, #4]
    d4fe:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d500:	e009      	b.n	d516 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d502:	687b      	ldr	r3, [r7, #4]
    d504:	685b      	ldr	r3, [r3, #4]
    d506:	2b00      	cmp	r3, #0
    d508:	d002      	beq.n	d510 <usbdc_sof_notify+0x1c>
			sof->cb();
    d50a:	687b      	ldr	r3, [r7, #4]
    d50c:	685b      	ldr	r3, [r3, #4]
    d50e:	4798      	blx	r3
		}
		sof = sof->next;
    d510:	687b      	ldr	r3, [r7, #4]
    d512:	681b      	ldr	r3, [r3, #0]
    d514:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d516:	687b      	ldr	r3, [r7, #4]
    d518:	2b00      	cmp	r3, #0
    d51a:	d1f2      	bne.n	d502 <usbdc_sof_notify+0xe>
	}
}
    d51c:	bf00      	nop
    d51e:	3708      	adds	r7, #8
    d520:	46bd      	mov	sp, r7
    d522:	bd80      	pop	{r7, pc}
    d524:	20001158 	.word	0x20001158

0000d528 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d528:	b580      	push	{r7, lr}
    d52a:	b084      	sub	sp, #16
    d52c:	af00      	add	r7, sp, #0
    d52e:	4603      	mov	r3, r0
    d530:	6039      	str	r1, [r7, #0]
    d532:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d534:	4b0b      	ldr	r3, [pc, #44]	; (d564 <usbdc_change_notify+0x3c>)
    d536:	68db      	ldr	r3, [r3, #12]
    d538:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d53a:	e00c      	b.n	d556 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d53c:	68fb      	ldr	r3, [r7, #12]
    d53e:	685b      	ldr	r3, [r3, #4]
    d540:	2b00      	cmp	r3, #0
    d542:	d005      	beq.n	d550 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d544:	68fb      	ldr	r3, [r7, #12]
    d546:	685b      	ldr	r3, [r3, #4]
    d548:	79fa      	ldrb	r2, [r7, #7]
    d54a:	6839      	ldr	r1, [r7, #0]
    d54c:	4610      	mov	r0, r2
    d54e:	4798      	blx	r3
		}
		cg = cg->next;
    d550:	68fb      	ldr	r3, [r7, #12]
    d552:	681b      	ldr	r3, [r3, #0]
    d554:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d556:	68fb      	ldr	r3, [r7, #12]
    d558:	2b00      	cmp	r3, #0
    d55a:	d1ef      	bne.n	d53c <usbdc_change_notify+0x14>
	}
}
    d55c:	bf00      	nop
    d55e:	3710      	adds	r7, #16
    d560:	46bd      	mov	sp, r7
    d562:	bd80      	pop	{r7, pc}
    d564:	20001158 	.word	0x20001158

0000d568 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d568:	b580      	push	{r7, lr}
    d56a:	b084      	sub	sp, #16
    d56c:	af00      	add	r7, sp, #0
    d56e:	4603      	mov	r3, r0
    d570:	6039      	str	r1, [r7, #0]
    d572:	71fb      	strb	r3, [r7, #7]
    d574:	4613      	mov	r3, r2
    d576:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d578:	4b12      	ldr	r3, [pc, #72]	; (d5c4 <usbdc_request_handler+0x5c>)
    d57a:	689b      	ldr	r3, [r3, #8]
    d57c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d57e:	e019      	b.n	d5b4 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d580:	68fb      	ldr	r3, [r7, #12]
    d582:	685b      	ldr	r3, [r3, #4]
    d584:	2b00      	cmp	r3, #0
    d586:	d012      	beq.n	d5ae <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d588:	68fb      	ldr	r3, [r7, #12]
    d58a:	685b      	ldr	r3, [r3, #4]
    d58c:	79ba      	ldrb	r2, [r7, #6]
    d58e:	79f8      	ldrb	r0, [r7, #7]
    d590:	6839      	ldr	r1, [r7, #0]
    d592:	4798      	blx	r3
    d594:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d596:	68bb      	ldr	r3, [r7, #8]
    d598:	2b00      	cmp	r3, #0
    d59a:	d101      	bne.n	d5a0 <usbdc_request_handler+0x38>
				return true;
    d59c:	2301      	movs	r3, #1
    d59e:	e00d      	b.n	d5bc <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d5a0:	68bb      	ldr	r3, [r7, #8]
    d5a2:	f113 0f0a 	cmn.w	r3, #10
    d5a6:	d002      	beq.n	d5ae <usbdc_request_handler+0x46>
				return -1;
    d5a8:	f04f 33ff 	mov.w	r3, #4294967295
    d5ac:	e006      	b.n	d5bc <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d5ae:	68fb      	ldr	r3, [r7, #12]
    d5b0:	681b      	ldr	r3, [r3, #0]
    d5b2:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d5b4:	68fb      	ldr	r3, [r7, #12]
    d5b6:	2b00      	cmp	r3, #0
    d5b8:	d1e2      	bne.n	d580 <usbdc_request_handler+0x18>
	}
	return false;
    d5ba:	2300      	movs	r3, #0
}
    d5bc:	4618      	mov	r0, r3
    d5be:	3710      	adds	r7, #16
    d5c0:	46bd      	mov	sp, r7
    d5c2:	bd80      	pop	{r7, pc}
    d5c4:	20001158 	.word	0x20001158

0000d5c8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d5c8:	b580      	push	{r7, lr}
    d5ca:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d5cc:	4b01      	ldr	r3, [pc, #4]	; (d5d4 <usbd_sof_cb+0xc>)
    d5ce:	4798      	blx	r3
}
    d5d0:	bf00      	nop
    d5d2:	bd80      	pop	{r7, pc}
    d5d4:	0000d4f5 	.word	0x0000d4f5

0000d5d8 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d5d8:	b580      	push	{r7, lr}
    d5da:	b082      	sub	sp, #8
    d5dc:	af00      	add	r7, sp, #0
    d5de:	4603      	mov	r3, r0
    d5e0:	6039      	str	r1, [r7, #0]
    d5e2:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d5e4:	79fb      	ldrb	r3, [r7, #7]
    d5e6:	2200      	movs	r2, #0
    d5e8:	6839      	ldr	r1, [r7, #0]
    d5ea:	4618      	mov	r0, r3
    d5ec:	4b14      	ldr	r3, [pc, #80]	; (d640 <usbdc_cb_ctl_req+0x68>)
    d5ee:	4798      	blx	r3
    d5f0:	4603      	mov	r3, r0
    d5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    d5f6:	d00b      	beq.n	d610 <usbdc_cb_ctl_req+0x38>
    d5f8:	2b01      	cmp	r3, #1
    d5fa:	d007      	beq.n	d60c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d5fc:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d5fe:	683b      	ldr	r3, [r7, #0]
    d600:	781b      	ldrb	r3, [r3, #0]
    d602:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d606:	2b00      	cmp	r3, #0
    d608:	d007      	beq.n	d61a <usbdc_cb_ctl_req+0x42>
    d60a:	e003      	b.n	d614 <usbdc_cb_ctl_req+0x3c>
		return true;
    d60c:	2301      	movs	r3, #1
    d60e:	e013      	b.n	d638 <usbdc_cb_ctl_req+0x60>
		return false;
    d610:	2300      	movs	r3, #0
    d612:	e011      	b.n	d638 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d614:	2b80      	cmp	r3, #128	; 0x80
    d616:	d007      	beq.n	d628 <usbdc_cb_ctl_req+0x50>
    d618:	e00d      	b.n	d636 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d61a:	79fb      	ldrb	r3, [r7, #7]
    d61c:	6839      	ldr	r1, [r7, #0]
    d61e:	4618      	mov	r0, r3
    d620:	4b08      	ldr	r3, [pc, #32]	; (d644 <usbdc_cb_ctl_req+0x6c>)
    d622:	4798      	blx	r3
    d624:	4603      	mov	r3, r0
    d626:	e007      	b.n	d638 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d628:	79fb      	ldrb	r3, [r7, #7]
    d62a:	6839      	ldr	r1, [r7, #0]
    d62c:	4618      	mov	r0, r3
    d62e:	4b06      	ldr	r3, [pc, #24]	; (d648 <usbdc_cb_ctl_req+0x70>)
    d630:	4798      	blx	r3
    d632:	4603      	mov	r3, r0
    d634:	e000      	b.n	d638 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d636:	2300      	movs	r3, #0
	}
}
    d638:	4618      	mov	r0, r3
    d63a:	3708      	adds	r7, #8
    d63c:	46bd      	mov	sp, r7
    d63e:	bd80      	pop	{r7, pc}
    d640:	0000d569 	.word	0x0000d569
    d644:	0000d409 	.word	0x0000d409
    d648:	0000d031 	.word	0x0000d031

0000d64c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d64c:	b580      	push	{r7, lr}
    d64e:	b082      	sub	sp, #8
    d650:	af00      	add	r7, sp, #0
    d652:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d654:	687b      	ldr	r3, [r7, #4]
    d656:	781b      	ldrb	r3, [r3, #0]
    d658:	2b00      	cmp	r3, #0
    d65a:	d135      	bne.n	d6c8 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d65c:	687b      	ldr	r3, [r7, #4]
    d65e:	785b      	ldrb	r3, [r3, #1]
    d660:	2b05      	cmp	r3, #5
    d662:	d019      	beq.n	d698 <usbdc_ctrl_status_end+0x4c>
    d664:	2b09      	cmp	r3, #9
    d666:	d000      	beq.n	d66a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d668:	e02f      	b.n	d6ca <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d66a:	687b      	ldr	r3, [r7, #4]
    d66c:	885b      	ldrh	r3, [r3, #2]
    d66e:	b29b      	uxth	r3, r3
    d670:	b2da      	uxtb	r2, r3
    d672:	4b17      	ldr	r3, [pc, #92]	; (d6d0 <usbdc_ctrl_status_end+0x84>)
    d674:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d676:	687b      	ldr	r3, [r7, #4]
    d678:	885b      	ldrh	r3, [r3, #2]
    d67a:	b29b      	uxth	r3, r3
    d67c:	2b00      	cmp	r3, #0
    d67e:	d001      	beq.n	d684 <usbdc_ctrl_status_end+0x38>
    d680:	2204      	movs	r2, #4
    d682:	e000      	b.n	d686 <usbdc_ctrl_status_end+0x3a>
    d684:	2203      	movs	r2, #3
    d686:	4b12      	ldr	r3, [pc, #72]	; (d6d0 <usbdc_ctrl_status_end+0x84>)
    d688:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d68a:	4b11      	ldr	r3, [pc, #68]	; (d6d0 <usbdc_ctrl_status_end+0x84>)
    d68c:	7e9b      	ldrb	r3, [r3, #26]
    d68e:	4619      	mov	r1, r3
    d690:	2001      	movs	r0, #1
    d692:	4b10      	ldr	r3, [pc, #64]	; (d6d4 <usbdc_ctrl_status_end+0x88>)
    d694:	4798      	blx	r3
		break;
    d696:	e018      	b.n	d6ca <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d698:	687b      	ldr	r3, [r7, #4]
    d69a:	885b      	ldrh	r3, [r3, #2]
    d69c:	b29b      	uxth	r3, r3
    d69e:	b2db      	uxtb	r3, r3
    d6a0:	4618      	mov	r0, r3
    d6a2:	4b0d      	ldr	r3, [pc, #52]	; (d6d8 <usbdc_ctrl_status_end+0x8c>)
    d6a4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d6a6:	687b      	ldr	r3, [r7, #4]
    d6a8:	885b      	ldrh	r3, [r3, #2]
    d6aa:	b29b      	uxth	r3, r3
    d6ac:	2b00      	cmp	r3, #0
    d6ae:	d001      	beq.n	d6b4 <usbdc_ctrl_status_end+0x68>
    d6b0:	2203      	movs	r2, #3
    d6b2:	e000      	b.n	d6b6 <usbdc_ctrl_status_end+0x6a>
    d6b4:	2202      	movs	r2, #2
    d6b6:	4b06      	ldr	r3, [pc, #24]	; (d6d0 <usbdc_ctrl_status_end+0x84>)
    d6b8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d6ba:	4b05      	ldr	r3, [pc, #20]	; (d6d0 <usbdc_ctrl_status_end+0x84>)
    d6bc:	7e9b      	ldrb	r3, [r3, #26]
    d6be:	4619      	mov	r1, r3
    d6c0:	2001      	movs	r0, #1
    d6c2:	4b04      	ldr	r3, [pc, #16]	; (d6d4 <usbdc_ctrl_status_end+0x88>)
    d6c4:	4798      	blx	r3
		break;
    d6c6:	e000      	b.n	d6ca <usbdc_ctrl_status_end+0x7e>
		return;
    d6c8:	bf00      	nop
	}
}
    d6ca:	3708      	adds	r7, #8
    d6cc:	46bd      	mov	sp, r7
    d6ce:	bd80      	pop	{r7, pc}
    d6d0:	20001158 	.word	0x20001158
    d6d4:	0000d529 	.word	0x0000d529
    d6d8:	0000d2a9 	.word	0x0000d2a9

0000d6dc <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d6dc:	b580      	push	{r7, lr}
    d6de:	b082      	sub	sp, #8
    d6e0:	af00      	add	r7, sp, #0
    d6e2:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d6e4:	2201      	movs	r2, #1
    d6e6:	6879      	ldr	r1, [r7, #4]
    d6e8:	2000      	movs	r0, #0
    d6ea:	4b03      	ldr	r3, [pc, #12]	; (d6f8 <usbdc_ctrl_data_end+0x1c>)
    d6ec:	4798      	blx	r3
	return false;
    d6ee:	2300      	movs	r3, #0
}
    d6f0:	4618      	mov	r0, r3
    d6f2:	3708      	adds	r7, #8
    d6f4:	46bd      	mov	sp, r7
    d6f6:	bd80      	pop	{r7, pc}
    d6f8:	0000d569 	.word	0x0000d569

0000d6fc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d6fc:	b580      	push	{r7, lr}
    d6fe:	b082      	sub	sp, #8
    d700:	af00      	add	r7, sp, #0
    d702:	4603      	mov	r3, r0
    d704:	603a      	str	r2, [r7, #0]
    d706:	71fb      	strb	r3, [r7, #7]
    d708:	460b      	mov	r3, r1
    d70a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d70c:	79bb      	ldrb	r3, [r7, #6]
    d70e:	2b00      	cmp	r3, #0
    d710:	d002      	beq.n	d718 <usbdc_cb_ctl_done+0x1c>
    d712:	2b01      	cmp	r3, #1
    d714:	d004      	beq.n	d720 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d716:	e008      	b.n	d72a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d718:	6838      	ldr	r0, [r7, #0]
    d71a:	4b06      	ldr	r3, [pc, #24]	; (d734 <usbdc_cb_ctl_done+0x38>)
    d71c:	4798      	blx	r3
		break;
    d71e:	e004      	b.n	d72a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d720:	6838      	ldr	r0, [r7, #0]
    d722:	4b05      	ldr	r3, [pc, #20]	; (d738 <usbdc_cb_ctl_done+0x3c>)
    d724:	4798      	blx	r3
    d726:	4603      	mov	r3, r0
    d728:	e000      	b.n	d72c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d72a:	2300      	movs	r3, #0
}
    d72c:	4618      	mov	r0, r3
    d72e:	3708      	adds	r7, #8
    d730:	46bd      	mov	sp, r7
    d732:	bd80      	pop	{r7, pc}
    d734:	0000d64d 	.word	0x0000d64d
    d738:	0000d6dd 	.word	0x0000d6dd

0000d73c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d73c:	b580      	push	{r7, lr}
    d73e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d740:	4b10      	ldr	r3, [pc, #64]	; (d784 <usbdc_reset+0x48>)
    d742:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d744:	4b10      	ldr	r3, [pc, #64]	; (d788 <usbdc_reset+0x4c>)
    d746:	2202      	movs	r2, #2
    d748:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d74a:	4b0f      	ldr	r3, [pc, #60]	; (d788 <usbdc_reset+0x4c>)
    d74c:	2200      	movs	r2, #0
    d74e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d750:	4b0d      	ldr	r3, [pc, #52]	; (d788 <usbdc_reset+0x4c>)
    d752:	2200      	movs	r2, #0
    d754:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d756:	2000      	movs	r0, #0
    d758:	4b0c      	ldr	r3, [pc, #48]	; (d78c <usbdc_reset+0x50>)
    d75a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d75c:	4b0a      	ldr	r3, [pc, #40]	; (d788 <usbdc_reset+0x4c>)
    d75e:	7f1b      	ldrb	r3, [r3, #28]
    d760:	4618      	mov	r0, r3
    d762:	4b0b      	ldr	r3, [pc, #44]	; (d790 <usbdc_reset+0x54>)
    d764:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d766:	4a0b      	ldr	r2, [pc, #44]	; (d794 <usbdc_reset+0x58>)
    d768:	2100      	movs	r1, #0
    d76a:	2000      	movs	r0, #0
    d76c:	4b0a      	ldr	r3, [pc, #40]	; (d798 <usbdc_reset+0x5c>)
    d76e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d770:	4a0a      	ldr	r2, [pc, #40]	; (d79c <usbdc_reset+0x60>)
    d772:	2102      	movs	r1, #2
    d774:	2000      	movs	r0, #0
    d776:	4b08      	ldr	r3, [pc, #32]	; (d798 <usbdc_reset+0x5c>)
    d778:	4798      	blx	r3
	usb_d_ep_enable(0);
    d77a:	2000      	movs	r0, #0
    d77c:	4b08      	ldr	r3, [pc, #32]	; (d7a0 <usbdc_reset+0x64>)
    d77e:	4798      	blx	r3
}
    d780:	bf00      	nop
    d782:	bd80      	pop	{r7, pc}
    d784:	0000d189 	.word	0x0000d189
    d788:	20001158 	.word	0x20001158
    d78c:	00003d0d 	.word	0x00003d0d
    d790:	00003c49 	.word	0x00003c49
    d794:	0000d5d9 	.word	0x0000d5d9
    d798:	00004061 	.word	0x00004061
    d79c:	0000d6fd 	.word	0x0000d6fd
    d7a0:	00003d5d 	.word	0x00003d5d

0000d7a4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d7a4:	b580      	push	{r7, lr}
    d7a6:	b082      	sub	sp, #8
    d7a8:	af00      	add	r7, sp, #0
    d7aa:	4603      	mov	r3, r0
    d7ac:	6039      	str	r1, [r7, #0]
    d7ae:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d7b0:	79fb      	ldrb	r3, [r7, #7]
    d7b2:	2b00      	cmp	r3, #0
    d7b4:	d002      	beq.n	d7bc <usbd_event_cb+0x18>
    d7b6:	2b01      	cmp	r3, #1
    d7b8:	d005      	beq.n	d7c6 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d7ba:	e007      	b.n	d7cc <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d7bc:	6839      	ldr	r1, [r7, #0]
    d7be:	2000      	movs	r0, #0
    d7c0:	4b04      	ldr	r3, [pc, #16]	; (d7d4 <usbd_event_cb+0x30>)
    d7c2:	4798      	blx	r3
		break;
    d7c4:	e002      	b.n	d7cc <usbd_event_cb+0x28>
		usbdc_reset();
    d7c6:	4b04      	ldr	r3, [pc, #16]	; (d7d8 <usbd_event_cb+0x34>)
    d7c8:	4798      	blx	r3
		break;
    d7ca:	bf00      	nop
	}
}
    d7cc:	bf00      	nop
    d7ce:	3708      	adds	r7, #8
    d7d0:	46bd      	mov	sp, r7
    d7d2:	bd80      	pop	{r7, pc}
    d7d4:	0000d529 	.word	0x0000d529
    d7d8:	0000d73d 	.word	0x0000d73d

0000d7dc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d7dc:	b580      	push	{r7, lr}
    d7de:	b088      	sub	sp, #32
    d7e0:	af00      	add	r7, sp, #0
    d7e2:	60b9      	str	r1, [r7, #8]
    d7e4:	607a      	str	r2, [r7, #4]
    d7e6:	461a      	mov	r2, r3
    d7e8:	4603      	mov	r3, r0
    d7ea:	73fb      	strb	r3, [r7, #15]
    d7ec:	4613      	mov	r3, r2
    d7ee:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d7f0:	68bb      	ldr	r3, [r7, #8]
    d7f2:	617b      	str	r3, [r7, #20]
    d7f4:	687b      	ldr	r3, [r7, #4]
    d7f6:	61bb      	str	r3, [r7, #24]
    d7f8:	7bfb      	ldrb	r3, [r7, #15]
    d7fa:	773b      	strb	r3, [r7, #28]
    d7fc:	7bbb      	ldrb	r3, [r7, #14]
    d7fe:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d800:	f107 0314 	add.w	r3, r7, #20
    d804:	4618      	mov	r0, r3
    d806:	4b03      	ldr	r3, [pc, #12]	; (d814 <usbdc_xfer+0x38>)
    d808:	4798      	blx	r3
    d80a:	4603      	mov	r3, r0
}
    d80c:	4618      	mov	r0, r3
    d80e:	3720      	adds	r7, #32
    d810:	46bd      	mov	sp, r7
    d812:	bd80      	pop	{r7, pc}
    d814:	00003dcd 	.word	0x00003dcd

0000d818 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d818:	b580      	push	{r7, lr}
    d81a:	b082      	sub	sp, #8
    d81c:	af00      	add	r7, sp, #0
    d81e:	4603      	mov	r3, r0
    d820:	6039      	str	r1, [r7, #0]
    d822:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d824:	79fb      	ldrb	r3, [r7, #7]
    d826:	2b01      	cmp	r3, #1
    d828:	d009      	beq.n	d83e <usbdc_register_handler+0x26>
    d82a:	2b02      	cmp	r3, #2
    d82c:	d00c      	beq.n	d848 <usbdc_register_handler+0x30>
    d82e:	2b00      	cmp	r3, #0
    d830:	d000      	beq.n	d834 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d832:	e00e      	b.n	d852 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d834:	6839      	ldr	r1, [r7, #0]
    d836:	4809      	ldr	r0, [pc, #36]	; (d85c <usbdc_register_handler+0x44>)
    d838:	4b09      	ldr	r3, [pc, #36]	; (d860 <usbdc_register_handler+0x48>)
    d83a:	4798      	blx	r3
		break;
    d83c:	e009      	b.n	d852 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d83e:	6839      	ldr	r1, [r7, #0]
    d840:	4808      	ldr	r0, [pc, #32]	; (d864 <usbdc_register_handler+0x4c>)
    d842:	4b07      	ldr	r3, [pc, #28]	; (d860 <usbdc_register_handler+0x48>)
    d844:	4798      	blx	r3
		break;
    d846:	e004      	b.n	d852 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d848:	6839      	ldr	r1, [r7, #0]
    d84a:	4807      	ldr	r0, [pc, #28]	; (d868 <usbdc_register_handler+0x50>)
    d84c:	4b04      	ldr	r3, [pc, #16]	; (d860 <usbdc_register_handler+0x48>)
    d84e:	4798      	blx	r3
		break;
    d850:	bf00      	nop
	}
}
    d852:	bf00      	nop
    d854:	3708      	adds	r7, #8
    d856:	46bd      	mov	sp, r7
    d858:	bd80      	pop	{r7, pc}
    d85a:	bf00      	nop
    d85c:	2000115c 	.word	0x2000115c
    d860:	000041b9 	.word	0x000041b9
    d864:	20001160 	.word	0x20001160
    d868:	20001164 	.word	0x20001164

0000d86c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d86c:	b580      	push	{r7, lr}
    d86e:	b084      	sub	sp, #16
    d870:	af00      	add	r7, sp, #0
    d872:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d874:	687b      	ldr	r3, [r7, #4]
    d876:	2b00      	cmp	r3, #0
    d878:	bf14      	ite	ne
    d87a:	2301      	movne	r3, #1
    d87c:	2300      	moveq	r3, #0
    d87e:	b2db      	uxtb	r3, r3
    d880:	f240 3255 	movw	r2, #853	; 0x355
    d884:	4910      	ldr	r1, [pc, #64]	; (d8c8 <usbdc_init+0x5c>)
    d886:	4618      	mov	r0, r3
    d888:	4b10      	ldr	r3, [pc, #64]	; (d8cc <usbdc_init+0x60>)
    d88a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d88c:	4b10      	ldr	r3, [pc, #64]	; (d8d0 <usbdc_init+0x64>)
    d88e:	4798      	blx	r3
    d890:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d892:	68fb      	ldr	r3, [r7, #12]
    d894:	2b00      	cmp	r3, #0
    d896:	da01      	bge.n	d89c <usbdc_init+0x30>
		return rc;
    d898:	68fb      	ldr	r3, [r7, #12]
    d89a:	e010      	b.n	d8be <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d89c:	2220      	movs	r2, #32
    d89e:	2100      	movs	r1, #0
    d8a0:	480c      	ldr	r0, [pc, #48]	; (d8d4 <usbdc_init+0x68>)
    d8a2:	4b0d      	ldr	r3, [pc, #52]	; (d8d8 <usbdc_init+0x6c>)
    d8a4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d8a6:	4a0b      	ldr	r2, [pc, #44]	; (d8d4 <usbdc_init+0x68>)
    d8a8:	687b      	ldr	r3, [r7, #4]
    d8aa:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d8ac:	490b      	ldr	r1, [pc, #44]	; (d8dc <usbdc_init+0x70>)
    d8ae:	2000      	movs	r0, #0
    d8b0:	4b0b      	ldr	r3, [pc, #44]	; (d8e0 <usbdc_init+0x74>)
    d8b2:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d8b4:	490b      	ldr	r1, [pc, #44]	; (d8e4 <usbdc_init+0x78>)
    d8b6:	2001      	movs	r0, #1
    d8b8:	4b09      	ldr	r3, [pc, #36]	; (d8e0 <usbdc_init+0x74>)
    d8ba:	4798      	blx	r3

	return 0;
    d8bc:	2300      	movs	r3, #0
}
    d8be:	4618      	mov	r0, r3
    d8c0:	3710      	adds	r7, #16
    d8c2:	46bd      	mov	sp, r7
    d8c4:	bd80      	pop	{r7, pc}
    d8c6:	bf00      	nop
    d8c8:	00014200 	.word	0x00014200
    d8cc:	000040dd 	.word	0x000040dd
    d8d0:	00003b35 	.word	0x00003b35
    d8d4:	20001158 	.word	0x20001158
    d8d8:	00013b59 	.word	0x00013b59
    d8dc:	0000d5c9 	.word	0x0000d5c9
    d8e0:	00003be1 	.word	0x00003be1
    d8e4:	0000d7a5 	.word	0x0000d7a5

0000d8e8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d8e8:	b580      	push	{r7, lr}
    d8ea:	b082      	sub	sp, #8
    d8ec:	af00      	add	r7, sp, #0
    d8ee:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d8f0:	6879      	ldr	r1, [r7, #4]
    d8f2:	4803      	ldr	r0, [pc, #12]	; (d900 <usbdc_register_function+0x18>)
    d8f4:	4b03      	ldr	r3, [pc, #12]	; (d904 <usbdc_register_function+0x1c>)
    d8f6:	4798      	blx	r3
}
    d8f8:	bf00      	nop
    d8fa:	3708      	adds	r7, #8
    d8fc:	46bd      	mov	sp, r7
    d8fe:	bd80      	pop	{r7, pc}
    d900:	20001168 	.word	0x20001168
    d904:	000041b9 	.word	0x000041b9

0000d908 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d908:	b580      	push	{r7, lr}
    d90a:	b082      	sub	sp, #8
    d90c:	af00      	add	r7, sp, #0
    d90e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d910:	4b0f      	ldr	r3, [pc, #60]	; (d950 <usbdc_start+0x48>)
    d912:	7e9b      	ldrb	r3, [r3, #26]
    d914:	2b00      	cmp	r3, #0
    d916:	d002      	beq.n	d91e <usbdc_start+0x16>
		return ERR_BUSY;
    d918:	f06f 0303 	mvn.w	r3, #3
    d91c:	e013      	b.n	d946 <usbdc_start+0x3e>
	}

	if (desces) {
    d91e:	687b      	ldr	r3, [r7, #4]
    d920:	2b00      	cmp	r3, #0
    d922:	d00e      	beq.n	d942 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d924:	4a0a      	ldr	r2, [pc, #40]	; (d950 <usbdc_start+0x48>)
    d926:	687b      	ldr	r3, [r7, #4]
    d928:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d92a:	687b      	ldr	r3, [r7, #4]
    d92c:	681b      	ldr	r3, [r3, #0]
    d92e:	79da      	ldrb	r2, [r3, #7]
    d930:	4b07      	ldr	r3, [pc, #28]	; (d950 <usbdc_start+0x48>)
    d932:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d934:	4b06      	ldr	r3, [pc, #24]	; (d950 <usbdc_start+0x48>)
    d936:	2201      	movs	r2, #1
    d938:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d93a:	4b06      	ldr	r3, [pc, #24]	; (d954 <usbdc_start+0x4c>)
    d93c:	4798      	blx	r3
	return ERR_NONE;
    d93e:	2300      	movs	r3, #0
    d940:	e001      	b.n	d946 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d942:	f06f 0308 	mvn.w	r3, #8
}
    d946:	4618      	mov	r0, r3
    d948:	3708      	adds	r7, #8
    d94a:	46bd      	mov	sp, r7
    d94c:	bd80      	pop	{r7, pc}
    d94e:	bf00      	nop
    d950:	20001158 	.word	0x20001158
    d954:	00003c05 	.word	0x00003c05

0000d958 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d958:	b580      	push	{r7, lr}
    d95a:	af00      	add	r7, sp, #0
	usb_d_attach();
    d95c:	4b01      	ldr	r3, [pc, #4]	; (d964 <usbdc_attach+0xc>)
    d95e:	4798      	blx	r3
}
    d960:	bf00      	nop
    d962:	bd80      	pop	{r7, pc}
    d964:	00003c19 	.word	0x00003c19

0000d968 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d968:	b480      	push	{r7}
    d96a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d96c:	4b03      	ldr	r3, [pc, #12]	; (d97c <usbdc_get_ctrl_buffer+0x14>)
    d96e:	695b      	ldr	r3, [r3, #20]
}
    d970:	4618      	mov	r0, r3
    d972:	46bd      	mov	sp, r7
    d974:	f85d 7b04 	ldr.w	r7, [sp], #4
    d978:	4770      	bx	lr
    d97a:	bf00      	nop
    d97c:	20001158 	.word	0x20001158

0000d980 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d980:	b480      	push	{r7}
    d982:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d984:	4b07      	ldr	r3, [pc, #28]	; (d9a4 <usbdc_get_state+0x24>)
    d986:	7e9b      	ldrb	r3, [r3, #26]
    d988:	f003 0310 	and.w	r3, r3, #16
    d98c:	2b00      	cmp	r3, #0
    d98e:	d001      	beq.n	d994 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d990:	2310      	movs	r3, #16
    d992:	e001      	b.n	d998 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d994:	4b03      	ldr	r3, [pc, #12]	; (d9a4 <usbdc_get_state+0x24>)
    d996:	7e9b      	ldrb	r3, [r3, #26]
}
    d998:	4618      	mov	r0, r3
    d99a:	46bd      	mov	sp, r7
    d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9a0:	4770      	bx	lr
    d9a2:	bf00      	nop
    d9a4:	20001158 	.word	0x20001158

0000d9a8 <usb_get_u16>:
{
    d9a8:	b480      	push	{r7}
    d9aa:	b083      	sub	sp, #12
    d9ac:	af00      	add	r7, sp, #0
    d9ae:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d9b0:	687b      	ldr	r3, [r7, #4]
    d9b2:	781b      	ldrb	r3, [r3, #0]
    d9b4:	b29a      	uxth	r2, r3
    d9b6:	687b      	ldr	r3, [r7, #4]
    d9b8:	3301      	adds	r3, #1
    d9ba:	781b      	ldrb	r3, [r3, #0]
    d9bc:	b29b      	uxth	r3, r3
    d9be:	021b      	lsls	r3, r3, #8
    d9c0:	b29b      	uxth	r3, r3
    d9c2:	4413      	add	r3, r2
    d9c4:	b29b      	uxth	r3, r3
}
    d9c6:	4618      	mov	r0, r3
    d9c8:	370c      	adds	r7, #12
    d9ca:	46bd      	mov	sp, r7
    d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9d0:	4770      	bx	lr

0000d9d2 <usb_desc_len>:
{
    d9d2:	b480      	push	{r7}
    d9d4:	b083      	sub	sp, #12
    d9d6:	af00      	add	r7, sp, #0
    d9d8:	6078      	str	r0, [r7, #4]
	return desc[0];
    d9da:	687b      	ldr	r3, [r7, #4]
    d9dc:	781b      	ldrb	r3, [r3, #0]
}
    d9de:	4618      	mov	r0, r3
    d9e0:	370c      	adds	r7, #12
    d9e2:	46bd      	mov	sp, r7
    d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9e8:	4770      	bx	lr

0000d9ea <usb_desc_type>:
{
    d9ea:	b480      	push	{r7}
    d9ec:	b083      	sub	sp, #12
    d9ee:	af00      	add	r7, sp, #0
    d9f0:	6078      	str	r0, [r7, #4]
	return desc[1];
    d9f2:	687b      	ldr	r3, [r7, #4]
    d9f4:	3301      	adds	r3, #1
    d9f6:	781b      	ldrb	r3, [r3, #0]
}
    d9f8:	4618      	mov	r0, r3
    d9fa:	370c      	adds	r7, #12
    d9fc:	46bd      	mov	sp, r7
    d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    da02:	4770      	bx	lr

0000da04 <usb_desc_next>:
{
    da04:	b580      	push	{r7, lr}
    da06:	b082      	sub	sp, #8
    da08:	af00      	add	r7, sp, #0
    da0a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    da0c:	6878      	ldr	r0, [r7, #4]
    da0e:	4b05      	ldr	r3, [pc, #20]	; (da24 <usb_desc_next+0x20>)
    da10:	4798      	blx	r3
    da12:	4603      	mov	r3, r0
    da14:	461a      	mov	r2, r3
    da16:	687b      	ldr	r3, [r7, #4]
    da18:	4413      	add	r3, r2
}
    da1a:	4618      	mov	r0, r3
    da1c:	3708      	adds	r7, #8
    da1e:	46bd      	mov	sp, r7
    da20:	bd80      	pop	{r7, pc}
    da22:	bf00      	nop
    da24:	0000d9d3 	.word	0x0000d9d3

0000da28 <usb_cfg_desc_total_len>:
{
    da28:	b580      	push	{r7, lr}
    da2a:	b082      	sub	sp, #8
    da2c:	af00      	add	r7, sp, #0
    da2e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    da30:	687b      	ldr	r3, [r7, #4]
    da32:	3302      	adds	r3, #2
    da34:	4618      	mov	r0, r3
    da36:	4b03      	ldr	r3, [pc, #12]	; (da44 <usb_cfg_desc_total_len+0x1c>)
    da38:	4798      	blx	r3
    da3a:	4603      	mov	r3, r0
}
    da3c:	4618      	mov	r0, r3
    da3e:	3708      	adds	r7, #8
    da40:	46bd      	mov	sp, r7
    da42:	bd80      	pop	{r7, pc}
    da44:	0000d9a9 	.word	0x0000d9a9

0000da48 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    da48:	b580      	push	{r7, lr}
    da4a:	b082      	sub	sp, #8
    da4c:	af00      	add	r7, sp, #0
    da4e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    da50:	6878      	ldr	r0, [r7, #4]
    da52:	4b05      	ldr	r3, [pc, #20]	; (da68 <usb_cfg_desc_next+0x20>)
    da54:	4798      	blx	r3
    da56:	4603      	mov	r3, r0
    da58:	461a      	mov	r2, r3
    da5a:	687b      	ldr	r3, [r7, #4]
    da5c:	4413      	add	r3, r2
}
    da5e:	4618      	mov	r0, r3
    da60:	3708      	adds	r7, #8
    da62:	46bd      	mov	sp, r7
    da64:	bd80      	pop	{r7, pc}
    da66:	bf00      	nop
    da68:	0000da29 	.word	0x0000da29

0000da6c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    da6c:	b580      	push	{r7, lr}
    da6e:	b084      	sub	sp, #16
    da70:	af00      	add	r7, sp, #0
    da72:	60f8      	str	r0, [r7, #12]
    da74:	60b9      	str	r1, [r7, #8]
    da76:	4613      	mov	r3, r2
    da78:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    da7a:	e015      	b.n	daa8 <usb_find_desc+0x3c>
		_desc_len_check();
    da7c:	68f8      	ldr	r0, [r7, #12]
    da7e:	4b0f      	ldr	r3, [pc, #60]	; (dabc <usb_find_desc+0x50>)
    da80:	4798      	blx	r3
    da82:	4603      	mov	r3, r0
    da84:	2b01      	cmp	r3, #1
    da86:	d801      	bhi.n	da8c <usb_find_desc+0x20>
    da88:	2300      	movs	r3, #0
    da8a:	e012      	b.n	dab2 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    da8c:	68f8      	ldr	r0, [r7, #12]
    da8e:	4b0c      	ldr	r3, [pc, #48]	; (dac0 <usb_find_desc+0x54>)
    da90:	4798      	blx	r3
    da92:	4603      	mov	r3, r0
    da94:	461a      	mov	r2, r3
    da96:	79fb      	ldrb	r3, [r7, #7]
    da98:	4293      	cmp	r3, r2
    da9a:	d101      	bne.n	daa0 <usb_find_desc+0x34>
			return desc;
    da9c:	68fb      	ldr	r3, [r7, #12]
    da9e:	e008      	b.n	dab2 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    daa0:	68f8      	ldr	r0, [r7, #12]
    daa2:	4b08      	ldr	r3, [pc, #32]	; (dac4 <usb_find_desc+0x58>)
    daa4:	4798      	blx	r3
    daa6:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    daa8:	68fa      	ldr	r2, [r7, #12]
    daaa:	68bb      	ldr	r3, [r7, #8]
    daac:	429a      	cmp	r2, r3
    daae:	d3e5      	bcc.n	da7c <usb_find_desc+0x10>
	}
	return NULL;
    dab0:	2300      	movs	r3, #0
}
    dab2:	4618      	mov	r0, r3
    dab4:	3710      	adds	r7, #16
    dab6:	46bd      	mov	sp, r7
    dab8:	bd80      	pop	{r7, pc}
    daba:	bf00      	nop
    dabc:	0000d9d3 	.word	0x0000d9d3
    dac0:	0000d9eb 	.word	0x0000d9eb
    dac4:	0000da05 	.word	0x0000da05

0000dac8 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    dac8:	b580      	push	{r7, lr}
    daca:	b082      	sub	sp, #8
    dacc:	af00      	add	r7, sp, #0
    dace:	6078      	str	r0, [r7, #4]
    dad0:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    dad2:	e019      	b.n	db08 <usb_find_ep_desc+0x40>
		_desc_len_check();
    dad4:	6878      	ldr	r0, [r7, #4]
    dad6:	4b12      	ldr	r3, [pc, #72]	; (db20 <usb_find_ep_desc+0x58>)
    dad8:	4798      	blx	r3
    dada:	4603      	mov	r3, r0
    dadc:	2b01      	cmp	r3, #1
    dade:	d801      	bhi.n	dae4 <usb_find_ep_desc+0x1c>
    dae0:	2300      	movs	r3, #0
    dae2:	e018      	b.n	db16 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    dae4:	6878      	ldr	r0, [r7, #4]
    dae6:	4b0f      	ldr	r3, [pc, #60]	; (db24 <usb_find_ep_desc+0x5c>)
    dae8:	4798      	blx	r3
    daea:	4603      	mov	r3, r0
    daec:	2b04      	cmp	r3, #4
    daee:	d010      	beq.n	db12 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    daf0:	6878      	ldr	r0, [r7, #4]
    daf2:	4b0c      	ldr	r3, [pc, #48]	; (db24 <usb_find_ep_desc+0x5c>)
    daf4:	4798      	blx	r3
    daf6:	4603      	mov	r3, r0
    daf8:	2b05      	cmp	r3, #5
    dafa:	d101      	bne.n	db00 <usb_find_ep_desc+0x38>
			return desc;
    dafc:	687b      	ldr	r3, [r7, #4]
    dafe:	e00a      	b.n	db16 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    db00:	6878      	ldr	r0, [r7, #4]
    db02:	4b09      	ldr	r3, [pc, #36]	; (db28 <usb_find_ep_desc+0x60>)
    db04:	4798      	blx	r3
    db06:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    db08:	687a      	ldr	r2, [r7, #4]
    db0a:	683b      	ldr	r3, [r7, #0]
    db0c:	429a      	cmp	r2, r3
    db0e:	d3e1      	bcc.n	dad4 <usb_find_ep_desc+0xc>
    db10:	e000      	b.n	db14 <usb_find_ep_desc+0x4c>
			break;
    db12:	bf00      	nop
	}
	return NULL;
    db14:	2300      	movs	r3, #0
}
    db16:	4618      	mov	r0, r3
    db18:	3708      	adds	r7, #8
    db1a:	46bd      	mov	sp, r7
    db1c:	bd80      	pop	{r7, pc}
    db1e:	bf00      	nop
    db20:	0000d9d3 	.word	0x0000d9d3
    db24:	0000d9eb 	.word	0x0000d9eb
    db28:	0000da05 	.word	0x0000da05

0000db2c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    db2c:	b580      	push	{r7, lr}
    db2e:	b084      	sub	sp, #16
    db30:	af00      	add	r7, sp, #0
    db32:	60f8      	str	r0, [r7, #12]
    db34:	60b9      	str	r1, [r7, #8]
    db36:	4613      	mov	r3, r2
    db38:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    db3a:	2202      	movs	r2, #2
    db3c:	68b9      	ldr	r1, [r7, #8]
    db3e:	68f8      	ldr	r0, [r7, #12]
    db40:	4b15      	ldr	r3, [pc, #84]	; (db98 <usb_find_cfg_desc+0x6c>)
    db42:	4798      	blx	r3
    db44:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    db46:	68fb      	ldr	r3, [r7, #12]
    db48:	2b00      	cmp	r3, #0
    db4a:	d11a      	bne.n	db82 <usb_find_cfg_desc+0x56>
		return NULL;
    db4c:	2300      	movs	r3, #0
    db4e:	e01f      	b.n	db90 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    db50:	68f8      	ldr	r0, [r7, #12]
    db52:	4b12      	ldr	r3, [pc, #72]	; (db9c <usb_find_cfg_desc+0x70>)
    db54:	4798      	blx	r3
    db56:	4603      	mov	r3, r0
    db58:	2b01      	cmp	r3, #1
    db5a:	d801      	bhi.n	db60 <usb_find_cfg_desc+0x34>
    db5c:	2300      	movs	r3, #0
    db5e:	e017      	b.n	db90 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    db60:	68fb      	ldr	r3, [r7, #12]
    db62:	3301      	adds	r3, #1
    db64:	781b      	ldrb	r3, [r3, #0]
    db66:	2b02      	cmp	r3, #2
    db68:	d110      	bne.n	db8c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    db6a:	68fb      	ldr	r3, [r7, #12]
    db6c:	3305      	adds	r3, #5
    db6e:	781b      	ldrb	r3, [r3, #0]
    db70:	79fa      	ldrb	r2, [r7, #7]
    db72:	429a      	cmp	r2, r3
    db74:	d101      	bne.n	db7a <usb_find_cfg_desc+0x4e>
			return desc;
    db76:	68fb      	ldr	r3, [r7, #12]
    db78:	e00a      	b.n	db90 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    db7a:	68f8      	ldr	r0, [r7, #12]
    db7c:	4b08      	ldr	r3, [pc, #32]	; (dba0 <usb_find_cfg_desc+0x74>)
    db7e:	4798      	blx	r3
    db80:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    db82:	68fa      	ldr	r2, [r7, #12]
    db84:	68bb      	ldr	r3, [r7, #8]
    db86:	429a      	cmp	r2, r3
    db88:	d3e2      	bcc.n	db50 <usb_find_cfg_desc+0x24>
    db8a:	e000      	b.n	db8e <usb_find_cfg_desc+0x62>
			break;
    db8c:	bf00      	nop
	}
	return NULL;
    db8e:	2300      	movs	r3, #0
}
    db90:	4618      	mov	r0, r3
    db92:	3710      	adds	r7, #16
    db94:	46bd      	mov	sp, r7
    db96:	bd80      	pop	{r7, pc}
    db98:	0000da6d 	.word	0x0000da6d
    db9c:	0000d9d3 	.word	0x0000d9d3
    dba0:	0000da49 	.word	0x0000da49

0000dba4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    dba4:	b580      	push	{r7, lr}
    dba6:	b086      	sub	sp, #24
    dba8:	af00      	add	r7, sp, #0
    dbaa:	60f8      	str	r0, [r7, #12]
    dbac:	60b9      	str	r1, [r7, #8]
    dbae:	4613      	mov	r3, r2
    dbb0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    dbb2:	2300      	movs	r3, #0
    dbb4:	75fb      	strb	r3, [r7, #23]
    dbb6:	e020      	b.n	dbfa <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    dbb8:	2203      	movs	r2, #3
    dbba:	68b9      	ldr	r1, [r7, #8]
    dbbc:	68f8      	ldr	r0, [r7, #12]
    dbbe:	4b13      	ldr	r3, [pc, #76]	; (dc0c <usb_find_str_desc+0x68>)
    dbc0:	4798      	blx	r3
    dbc2:	60f8      	str	r0, [r7, #12]
		if (desc) {
    dbc4:	68fb      	ldr	r3, [r7, #12]
    dbc6:	2b00      	cmp	r3, #0
    dbc8:	d015      	beq.n	dbf6 <usb_find_str_desc+0x52>
			_desc_len_check();
    dbca:	68f8      	ldr	r0, [r7, #12]
    dbcc:	4b10      	ldr	r3, [pc, #64]	; (dc10 <usb_find_str_desc+0x6c>)
    dbce:	4798      	blx	r3
    dbd0:	4603      	mov	r3, r0
    dbd2:	2b01      	cmp	r3, #1
    dbd4:	d801      	bhi.n	dbda <usb_find_str_desc+0x36>
    dbd6:	2300      	movs	r3, #0
    dbd8:	e014      	b.n	dc04 <usb_find_str_desc+0x60>
			if (i == str_index) {
    dbda:	7dfa      	ldrb	r2, [r7, #23]
    dbdc:	79fb      	ldrb	r3, [r7, #7]
    dbde:	429a      	cmp	r2, r3
    dbe0:	d101      	bne.n	dbe6 <usb_find_str_desc+0x42>
				return desc;
    dbe2:	68fb      	ldr	r3, [r7, #12]
    dbe4:	e00e      	b.n	dc04 <usb_find_str_desc+0x60>
			}
			i++;
    dbe6:	7dfb      	ldrb	r3, [r7, #23]
    dbe8:	3301      	adds	r3, #1
    dbea:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    dbec:	68f8      	ldr	r0, [r7, #12]
    dbee:	4b09      	ldr	r3, [pc, #36]	; (dc14 <usb_find_str_desc+0x70>)
    dbf0:	4798      	blx	r3
    dbf2:	60f8      	str	r0, [r7, #12]
    dbf4:	e001      	b.n	dbfa <usb_find_str_desc+0x56>
		} else {
			return NULL;
    dbf6:	2300      	movs	r3, #0
    dbf8:	e004      	b.n	dc04 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    dbfa:	68fa      	ldr	r2, [r7, #12]
    dbfc:	68bb      	ldr	r3, [r7, #8]
    dbfe:	429a      	cmp	r2, r3
    dc00:	d3da      	bcc.n	dbb8 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    dc02:	2300      	movs	r3, #0
}
    dc04:	4618      	mov	r0, r3
    dc06:	3718      	adds	r7, #24
    dc08:	46bd      	mov	sp, r7
    dc0a:	bd80      	pop	{r7, pc}
    dc0c:	0000da6d 	.word	0x0000da6d
    dc10:	0000d9d3 	.word	0x0000d9d3
    dc14:	0000da05 	.word	0x0000da05

0000dc18 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	i2c_initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    dc18:	b480      	push	{r7}
    dc1a:	b083      	sub	sp, #12
    dc1c:	af00      	add	r7, sp, #0
    dc1e:	6078      	str	r0, [r7, #4]
    dc20:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    dc22:	687b      	ldr	r3, [r7, #4]
    dc24:	683a      	ldr	r2, [r7, #0]
    dc26:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    dc28:	687b      	ldr	r3, [r7, #4]
    dc2a:	4618      	mov	r0, r3
    dc2c:	370c      	adds	r7, #12
    dc2e:	46bd      	mov	sp, r7
    dc30:	bc80      	pop	{r7}
    dc32:	4770      	bx	lr

0000dc34 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    dc34:	b480      	push	{r7}
    dc36:	b083      	sub	sp, #12
    dc38:	af00      	add	r7, sp, #0
    dc3a:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    dc3c:	687b      	ldr	r3, [r7, #4]
    dc3e:	4618      	mov	r0, r3
    dc40:	370c      	adds	r7, #12
    dc42:	46bd      	mov	sp, r7
    dc44:	bc80      	pop	{r7}
    dc46:	4770      	bx	lr

0000dc48 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    dc48:	b580      	push	{r7, lr}
    dc4a:	b082      	sub	sp, #8
    dc4c:	af00      	add	r7, sp, #0
    dc4e:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    dc50:	687b      	ldr	r3, [r7, #4]
    dc52:	4a23      	ldr	r2, [pc, #140]	; (dce0 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    dc54:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    dc56:	687b      	ldr	r3, [r7, #4]
    dc58:	4a21      	ldr	r2, [pc, #132]	; (dce0 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    dc5a:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    dc5c:	687b      	ldr	r3, [r7, #4]
    dc5e:	691a      	ldr	r2, [r3, #16]
    dc60:	687b      	ldr	r3, [r7, #4]
    dc62:	330c      	adds	r3, #12
    dc64:	4619      	mov	r1, r3
    dc66:	4610      	mov	r0, r2
    dc68:	4b1e      	ldr	r3, [pc, #120]	; (dce4 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    dc6a:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    dc6c:	687b      	ldr	r3, [r7, #4]
    dc6e:	691b      	ldr	r3, [r3, #16]
    dc70:	4618      	mov	r0, r3
    dc72:	4b1d      	ldr	r3, [pc, #116]	; (dce8 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    dc74:	4798      	blx	r3
    dc76:	4603      	mov	r3, r0
    dc78:	b2da      	uxtb	r2, r3
    dc7a:	687b      	ldr	r3, [r7, #4]
    dc7c:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    dc7e:	687b      	ldr	r3, [r7, #4]
    dc80:	7d1b      	ldrb	r3, [r3, #20]
    dc82:	2b00      	cmp	r3, #0
    dc84:	bf0c      	ite	eq
    dc86:	2301      	moveq	r3, #1
    dc88:	2300      	movne	r3, #0
    dc8a:	b2da      	uxtb	r2, r3
    dc8c:	687b      	ldr	r3, [r7, #4]
    dc8e:	725a      	strb	r2, [r3, #9]
	if (isOK)
    dc90:	687b      	ldr	r3, [r7, #4]
    dc92:	7a5b      	ldrb	r3, [r3, #9]
    dc94:	b2db      	uxtb	r3, r3
    dc96:	2b00      	cmp	r3, #0
    dc98:	d116      	bne.n	dcc8 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    dc9a:	687b      	ldr	r3, [r7, #4]
    dc9c:	691b      	ldr	r3, [r3, #16]
    dc9e:	4618      	mov	r0, r3
    dca0:	4b12      	ldr	r3, [pc, #72]	; (dcec <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    dca2:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    dca4:	687b      	ldr	r3, [r7, #4]
    dca6:	691b      	ldr	r3, [r3, #16]
    dca8:	4618      	mov	r0, r3
    dcaa:	4b0f      	ldr	r3, [pc, #60]	; (dce8 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    dcac:	4798      	blx	r3
    dcae:	4603      	mov	r3, r0
    dcb0:	b2da      	uxtb	r2, r3
    dcb2:	687b      	ldr	r3, [r7, #4]
    dcb4:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    dcb6:	687b      	ldr	r3, [r7, #4]
    dcb8:	7d1b      	ldrb	r3, [r3, #20]
    dcba:	2b00      	cmp	r3, #0
    dcbc:	bf0c      	ite	eq
    dcbe:	2301      	moveq	r3, #1
    dcc0:	2300      	movne	r3, #0
    dcc2:	b2da      	uxtb	r2, r3
    dcc4:	687b      	ldr	r3, [r7, #4]
    dcc6:	725a      	strb	r2, [r3, #9]
	}
	
	i2c_initiated=isOK;
    dcc8:	687b      	ldr	r3, [r7, #4]
    dcca:	7a5b      	ldrb	r3, [r3, #9]
    dccc:	b2da      	uxtb	r2, r3
    dcce:	687b      	ldr	r3, [r7, #4]
    dcd0:	721a      	strb	r2, [r3, #8]
	return isOK;
    dcd2:	687b      	ldr	r3, [r7, #4]
    dcd4:	7a5b      	ldrb	r3, [r3, #9]
    dcd6:	b2db      	uxtb	r3, r3
	
}
    dcd8:	4618      	mov	r0, r3
    dcda:	3708      	adds	r7, #8
    dcdc:	46bd      	mov	sp, r7
    dcde:	bd80      	pop	{r7, pc}
    dce0:	20001178 	.word	0x20001178
    dce4:	00002e6b 	.word	0x00002e6b
    dce8:	00002df1 	.word	0x00002df1
    dcec:	00002e11 	.word	0x00002e11

0000dcf0 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    dcf0:	b580      	push	{r7, lr}
    dcf2:	b082      	sub	sp, #8
    dcf4:	af00      	add	r7, sp, #0
    dcf6:	6078      	str	r0, [r7, #4]
    dcf8:	460b      	mov	r3, r1
    dcfa:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    dcfc:	687b      	ldr	r3, [r7, #4]
    dcfe:	691b      	ldr	r3, [r3, #16]
    dd00:	78fa      	ldrb	r2, [r7, #3]
    dd02:	b211      	sxth	r1, r2
    dd04:	f44f 6200 	mov.w	r2, #2048	; 0x800
    dd08:	4618      	mov	r0, r3
    dd0a:	4b03      	ldr	r3, [pc, #12]	; (dd18 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    dd0c:	4798      	blx	r3
    dd0e:	4603      	mov	r3, r0
}
    dd10:	4618      	mov	r0, r3
    dd12:	3708      	adds	r7, #8
    dd14:	46bd      	mov	sp, r7
    dd16:	bd80      	pop	{r7, pc}
    dd18:	00002e31 	.word	0x00002e31

0000dd1c <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    dd1c:	b580      	push	{r7, lr}
    dd1e:	b086      	sub	sp, #24
    dd20:	af00      	add	r7, sp, #0
    dd22:	60f8      	str	r0, [r7, #12]
    dd24:	60b9      	str	r1, [r7, #8]
    dd26:	4613      	mov	r3, r2
    dd28:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    dd2a:	68fb      	ldr	r3, [r7, #12]
    dd2c:	68db      	ldr	r3, [r3, #12]
    dd2e:	88fa      	ldrh	r2, [r7, #6]
    dd30:	68b9      	ldr	r1, [r7, #8]
    dd32:	4618      	mov	r0, r3
    dd34:	4b03      	ldr	r3, [pc, #12]	; (dd44 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    dd36:	4798      	blx	r3
    dd38:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    dd3a:	697b      	ldr	r3, [r7, #20]
}
    dd3c:	4618      	mov	r0, r3
    dd3e:	3718      	adds	r7, #24
    dd40:	46bd      	mov	sp, r7
    dd42:	bd80      	pop	{r7, pc}
    dd44:	00011825 	.word	0x00011825

0000dd48 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    dd48:	b580      	push	{r7, lr}
    dd4a:	b086      	sub	sp, #24
    dd4c:	af00      	add	r7, sp, #0
    dd4e:	60f8      	str	r0, [r7, #12]
    dd50:	60b9      	str	r1, [r7, #8]
    dd52:	4613      	mov	r3, r2
    dd54:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    dd56:	68fb      	ldr	r3, [r7, #12]
    dd58:	68db      	ldr	r3, [r3, #12]
    dd5a:	88fa      	ldrh	r2, [r7, #6]
    dd5c:	68b9      	ldr	r1, [r7, #8]
    dd5e:	4618      	mov	r0, r3
    dd60:	4b03      	ldr	r3, [pc, #12]	; (dd70 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    dd62:	4798      	blx	r3
    dd64:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    dd66:	697b      	ldr	r3, [r7, #20]
}
    dd68:	4618      	mov	r0, r3
    dd6a:	3718      	adds	r7, #24
    dd6c:	46bd      	mov	sp, r7
    dd6e:	bd80      	pop	{r7, pc}
    dd70:	00011875 	.word	0x00011875

0000dd74 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    dd74:	b480      	push	{r7}
    dd76:	b083      	sub	sp, #12
    dd78:	af00      	add	r7, sp, #0
    dd7a:	6078      	str	r0, [r7, #4]
    dd7c:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    dd7e:	687b      	ldr	r3, [r7, #4]
    dd80:	683a      	ldr	r2, [r7, #0]
    dd82:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    dd84:	687b      	ldr	r3, [r7, #4]
    dd86:	68db      	ldr	r3, [r3, #12]
    dd88:	2200      	movs	r2, #0
    dd8a:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    dd8c:	4a06      	ldr	r2, [pc, #24]	; (dda8 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    dd8e:	687b      	ldr	r3, [r7, #4]
    dd90:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    dd92:	687b      	ldr	r3, [r7, #4]
    dd94:	f44f 6280 	mov.w	r2, #1024	; 0x400
    dd98:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    dd9a:	687b      	ldr	r3, [r7, #4]
    dd9c:	4618      	mov	r0, r3
    dd9e:	370c      	adds	r7, #12
    dda0:	46bd      	mov	sp, r7
    dda2:	bc80      	pop	{r7}
    dda4:	4770      	bx	lr
    dda6:	bf00      	nop
    dda8:	200012f8 	.word	0x200012f8

0000ddac <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    ddac:	b480      	push	{r7}
    ddae:	b083      	sub	sp, #12
    ddb0:	af00      	add	r7, sp, #0
    ddb2:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    ddb4:	687b      	ldr	r3, [r7, #4]
    ddb6:	2200      	movs	r2, #0
    ddb8:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    ddba:	687b      	ldr	r3, [r7, #4]
    ddbc:	4618      	mov	r0, r3
    ddbe:	370c      	adds	r7, #12
    ddc0:	46bd      	mov	sp, r7
    ddc2:	bc80      	pop	{r7}
    ddc4:	4770      	bx	lr
	...

0000ddc8 <_ZL9InitArrayv>:


static void InitArray(){
    ddc8:	b480      	push	{r7}
    ddca:	b083      	sub	sp, #12
    ddcc:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    ddce:	2301      	movs	r3, #1
    ddd0:	607b      	str	r3, [r7, #4]
    ddd2:	687b      	ldr	r3, [r7, #4]
    ddd4:	2b1f      	cmp	r3, #31
    ddd6:	dc34      	bgt.n	de42 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    ddd8:	491e      	ldr	r1, [pc, #120]	; (de54 <_ZL9InitArrayv+0x8c>)
    ddda:	687a      	ldr	r2, [r7, #4]
    dddc:	4613      	mov	r3, r2
    ddde:	009b      	lsls	r3, r3, #2
    dde0:	4413      	add	r3, r2
    dde2:	009b      	lsls	r3, r3, #2
    dde4:	440b      	add	r3, r1
    dde6:	2200      	movs	r2, #0
    dde8:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    ddea:	491a      	ldr	r1, [pc, #104]	; (de54 <_ZL9InitArrayv+0x8c>)
    ddec:	687a      	ldr	r2, [r7, #4]
    ddee:	4613      	mov	r3, r2
    ddf0:	009b      	lsls	r3, r3, #2
    ddf2:	4413      	add	r3, r2
    ddf4:	009b      	lsls	r3, r3, #2
    ddf6:	440b      	add	r3, r1
    ddf8:	330c      	adds	r3, #12
    ddfa:	2200      	movs	r2, #0
    ddfc:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    ddfe:	687b      	ldr	r3, [r7, #4]
    de00:	1e5a      	subs	r2, r3, #1
    de02:	6879      	ldr	r1, [r7, #4]
    de04:	460b      	mov	r3, r1
    de06:	009b      	lsls	r3, r3, #2
    de08:	440b      	add	r3, r1
    de0a:	009b      	lsls	r3, r3, #2
    de0c:	4911      	ldr	r1, [pc, #68]	; (de54 <_ZL9InitArrayv+0x8c>)
    de0e:	4419      	add	r1, r3
    de10:	4810      	ldr	r0, [pc, #64]	; (de54 <_ZL9InitArrayv+0x8c>)
    de12:	4613      	mov	r3, r2
    de14:	009b      	lsls	r3, r3, #2
    de16:	4413      	add	r3, r2
    de18:	009b      	lsls	r3, r3, #2
    de1a:	4403      	add	r3, r0
    de1c:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    de1e:	4a0e      	ldr	r2, [pc, #56]	; (de58 <_ZL9InitArrayv+0x90>)
    de20:	687b      	ldr	r3, [r7, #4]
    de22:	2100      	movs	r1, #0
    de24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    de28:	687b      	ldr	r3, [r7, #4]
    de2a:	3b01      	subs	r3, #1
    de2c:	687a      	ldr	r2, [r7, #4]
    de2e:	0092      	lsls	r2, r2, #2
    de30:	4909      	ldr	r1, [pc, #36]	; (de58 <_ZL9InitArrayv+0x90>)
    de32:	440a      	add	r2, r1
    de34:	4908      	ldr	r1, [pc, #32]	; (de58 <_ZL9InitArrayv+0x90>)
    de36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    de3a:	687b      	ldr	r3, [r7, #4]
    de3c:	3301      	adds	r3, #1
    de3e:	607b      	str	r3, [r7, #4]
    de40:	e7c7      	b.n	ddd2 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    de42:	4b06      	ldr	r3, [pc, #24]	; (de5c <_ZL9InitArrayv+0x94>)
    de44:	2201      	movs	r2, #1
    de46:	701a      	strb	r2, [r3, #0]
		
}
    de48:	bf00      	nop
    de4a:	370c      	adds	r7, #12
    de4c:	46bd      	mov	sp, r7
    de4e:	bc80      	pop	{r7}
    de50:	4770      	bx	lr
    de52:	bf00      	nop
    de54:	200012fc 	.word	0x200012fc
    de58:	2000157c 	.word	0x2000157c
    de5c:	200015fc 	.word	0x200015fc

0000de60 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    de60:	b580      	push	{r7, lr}
    de62:	b082      	sub	sp, #8
    de64:	af00      	add	r7, sp, #0
    de66:	6078      	str	r0, [r7, #4]
	ticks=0;
    de68:	687b      	ldr	r3, [r7, #4]
    de6a:	2200      	movs	r2, #0
    de6c:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    de6e:	4b0d      	ldr	r3, [pc, #52]	; (dea4 <_ZN11Timer_Class4InitEv+0x44>)
    de70:	781b      	ldrb	r3, [r3, #0]
    de72:	f083 0301 	eor.w	r3, r3, #1
    de76:	b2db      	uxtb	r3, r3
    de78:	2b00      	cmp	r3, #0
    de7a:	d001      	beq.n	de80 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    de7c:	4b0a      	ldr	r3, [pc, #40]	; (dea8 <_ZN11Timer_Class4InitEv+0x48>)
    de7e:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    de80:	6878      	ldr	r0, [r7, #4]
    de82:	4b0a      	ldr	r3, [pc, #40]	; (deac <_ZN11Timer_Class4InitEv+0x4c>)
    de84:	4798      	blx	r3
    de86:	4603      	mov	r3, r0
    de88:	2b00      	cmp	r3, #0
    de8a:	bf0c      	ite	eq
    de8c:	2301      	moveq	r3, #1
    de8e:	2300      	movne	r3, #0
    de90:	b2da      	uxtb	r2, r3
    de92:	687b      	ldr	r3, [r7, #4]
    de94:	709a      	strb	r2, [r3, #2]
	return isOK;
    de96:	687b      	ldr	r3, [r7, #4]
    de98:	789b      	ldrb	r3, [r3, #2]
    de9a:	b2db      	uxtb	r3, r3
}
    de9c:	4618      	mov	r0, r3
    de9e:	3708      	adds	r7, #8
    dea0:	46bd      	mov	sp, r7
    dea2:	bd80      	pop	{r7, pc}
    dea4:	200015fc 	.word	0x200015fc
    dea8:	0000ddc9 	.word	0x0000ddc9
    deac:	0000deb1 	.word	0x0000deb1

0000deb0 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    deb0:	b580      	push	{r7, lr}
    deb2:	b084      	sub	sp, #16
    deb4:	af00      	add	r7, sp, #0
    deb6:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    deb8:	687b      	ldr	r3, [r7, #4]
    deba:	68db      	ldr	r3, [r3, #12]
    debc:	4618      	mov	r0, r3
    debe:	4b04      	ldr	r3, [pc, #16]	; (ded0 <_ZN11Timer_Class5StartEv+0x20>)
    dec0:	4798      	blx	r3
    dec2:	60f8      	str	r0, [r7, #12]
	return status;
    dec4:	68fb      	ldr	r3, [r7, #12]
	
}
    dec6:	4618      	mov	r0, r3
    dec8:	3710      	adds	r7, #16
    deca:	46bd      	mov	sp, r7
    decc:	bd80      	pop	{r7, pc}
    dece:	bf00      	nop
    ded0:	00003345 	.word	0x00003345

0000ded4 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    ded4:	b580      	push	{r7, lr}
    ded6:	b084      	sub	sp, #16
    ded8:	af00      	add	r7, sp, #0
    deda:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    dedc:	687b      	ldr	r3, [r7, #4]
    dede:	68db      	ldr	r3, [r3, #12]
    dee0:	4618      	mov	r0, r3
    dee2:	4b05      	ldr	r3, [pc, #20]	; (def8 <_ZN11Timer_Class4StopEv+0x24>)
    dee4:	4798      	blx	r3
    dee6:	60f8      	str	r0, [r7, #12]
	timeout=0;
    dee8:	687b      	ldr	r3, [r7, #4]
    deea:	2200      	movs	r2, #0
    deec:	705a      	strb	r2, [r3, #1]
	return status;
    deee:	68fb      	ldr	r3, [r7, #12]
}
    def0:	4618      	mov	r0, r3
    def2:	3710      	adds	r7, #16
    def4:	46bd      	mov	sp, r7
    def6:	bd80      	pop	{r7, pc}
    def8:	000033ad 	.word	0x000033ad

0000defc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    defc:	b580      	push	{r7, lr}
    defe:	b086      	sub	sp, #24
    df00:	af00      	add	r7, sp, #0
    df02:	60f8      	str	r0, [r7, #12]
    df04:	60b9      	str	r1, [r7, #8]
    df06:	607a      	str	r2, [r7, #4]
    df08:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    df0a:	68b9      	ldr	r1, [r7, #8]
    df0c:	68f8      	ldr	r0, [r7, #12]
    df0e:	4b0e      	ldr	r3, [pc, #56]	; (df48 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    df10:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    df12:	68fb      	ldr	r3, [r7, #12]
    df14:	699b      	ldr	r3, [r3, #24]
    df16:	687a      	ldr	r2, [r7, #4]
    df18:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    df1a:	68fb      	ldr	r3, [r7, #12]
    df1c:	699b      	ldr	r3, [r3, #24]
    df1e:	68ba      	ldr	r2, [r7, #8]
    df20:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    df22:	68fb      	ldr	r3, [r7, #12]
    df24:	699b      	ldr	r3, [r3, #24]
    df26:	78fa      	ldrb	r2, [r7, #3]
    df28:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    df2a:	68fb      	ldr	r3, [r7, #12]
    df2c:	68da      	ldr	r2, [r3, #12]
    df2e:	68fb      	ldr	r3, [r7, #12]
    df30:	699b      	ldr	r3, [r3, #24]
    df32:	4619      	mov	r1, r3
    df34:	4610      	mov	r0, r2
    df36:	4b05      	ldr	r3, [pc, #20]	; (df4c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    df38:	4798      	blx	r3
    df3a:	6178      	str	r0, [r7, #20]
	
	return status;
    df3c:	697b      	ldr	r3, [r7, #20]
}
    df3e:	4618      	mov	r0, r3
    df40:	3718      	adds	r7, #24
    df42:	46bd      	mov	sp, r7
    df44:	bd80      	pop	{r7, pc}
    df46:	bf00      	nop
    df48:	0000e0b9 	.word	0x0000e0b9
    df4c:	00003419 	.word	0x00003419

0000df50 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    df50:	b590      	push	{r4, r7, lr}
    df52:	b087      	sub	sp, #28
    df54:	af00      	add	r7, sp, #0
    df56:	60f8      	str	r0, [r7, #12]
    df58:	60b9      	str	r1, [r7, #8]
    df5a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    df5c:	2301      	movs	r3, #1
    df5e:	687a      	ldr	r2, [r7, #4]
    df60:	68b9      	ldr	r1, [r7, #8]
    df62:	68f8      	ldr	r0, [r7, #12]
    df64:	4c03      	ldr	r4, [pc, #12]	; (df74 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    df66:	47a0      	blx	r4
    df68:	6178      	str	r0, [r7, #20]
		return status;
    df6a:	697b      	ldr	r3, [r7, #20]
}
    df6c:	4618      	mov	r0, r3
    df6e:	371c      	adds	r7, #28
    df70:	46bd      	mov	sp, r7
    df72:	bd90      	pop	{r4, r7, pc}
    df74:	0000defd 	.word	0x0000defd

0000df78 <_ZN11Timer_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	Timer_Class::Remove_task(void){
    df78:	b580      	push	{r7, lr}
    df7a:	b082      	sub	sp, #8
    df7c:	af00      	add	r7, sp, #0
    df7e:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
    df80:	687b      	ldr	r3, [r7, #4]
    df82:	68da      	ldr	r2, [r3, #12]
    df84:	687b      	ldr	r3, [r7, #4]
    df86:	699b      	ldr	r3, [r3, #24]
    df88:	4619      	mov	r1, r3
    df8a:	4610      	mov	r0, r2
    df8c:	4b04      	ldr	r3, [pc, #16]	; (dfa0 <_ZN11Timer_Class11Remove_taskEv+0x28>)
    df8e:	4798      	blx	r3
	task->cb=NULL;
    df90:	687b      	ldr	r3, [r7, #4]
    df92:	699b      	ldr	r3, [r3, #24]
    df94:	2200      	movs	r2, #0
    df96:	60da      	str	r2, [r3, #12]
}
    df98:	bf00      	nop
    df9a:	3708      	adds	r7, #8
    df9c:	46bd      	mov	sp, r7
    df9e:	bd80      	pop	{r7, pc}
    dfa0:	0000351d 	.word	0x0000351d

0000dfa4 <_ZN11Timer_Class11Remove_taskEPFvvE>:

void	Timer_Class::Remove_task(FUNC_PTR func){
    dfa4:	b580      	push	{r7, lr}
    dfa6:	b082      	sub	sp, #8
    dfa8:	af00      	add	r7, sp, #0
    dfaa:	6078      	str	r0, [r7, #4]
    dfac:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    dfae:	6839      	ldr	r1, [r7, #0]
    dfb0:	6878      	ldr	r0, [r7, #4]
    dfb2:	4b0f      	ldr	r3, [pc, #60]	; (dff0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    dfb4:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    dfb6:	687b      	ldr	r3, [r7, #4]
    dfb8:	68db      	ldr	r3, [r3, #12]
    dfba:	f103 0218 	add.w	r2, r3, #24
    dfbe:	687b      	ldr	r3, [r7, #4]
    dfc0:	699b      	ldr	r3, [r3, #24]
    dfc2:	4619      	mov	r1, r3
    dfc4:	4610      	mov	r0, r2
    dfc6:	4b0b      	ldr	r3, [pc, #44]	; (dff4 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    dfc8:	4798      	blx	r3
    dfca:	4603      	mov	r3, r0
    dfcc:	2b00      	cmp	r3, #0
    dfce:	d007      	beq.n	dfe0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    dfd0:	687b      	ldr	r3, [r7, #4]
    dfd2:	68da      	ldr	r2, [r3, #12]
    dfd4:	687b      	ldr	r3, [r7, #4]
    dfd6:	699b      	ldr	r3, [r3, #24]
    dfd8:	4619      	mov	r1, r3
    dfda:	4610      	mov	r0, r2
    dfdc:	4b06      	ldr	r3, [pc, #24]	; (dff8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    dfde:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    dfe0:	687b      	ldr	r3, [r7, #4]
    dfe2:	699b      	ldr	r3, [r3, #24]
    dfe4:	2200      	movs	r2, #0
    dfe6:	60da      	str	r2, [r3, #12]
}
    dfe8:	bf00      	nop
    dfea:	3708      	adds	r7, #8
    dfec:	46bd      	mov	sp, r7
    dfee:	bd80      	pop	{r7, pc}
    dff0:	0000e139 	.word	0x0000e139
    dff4:	00004105 	.word	0x00004105
    dff8:	0000351d 	.word	0x0000351d

0000dffc <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    dffc:	b590      	push	{r4, r7, lr}
    dffe:	b087      	sub	sp, #28
    e000:	af00      	add	r7, sp, #0
    e002:	60f8      	str	r0, [r7, #12]
    e004:	60b9      	str	r1, [r7, #8]
    e006:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e008:	2300      	movs	r3, #0
    e00a:	687a      	ldr	r2, [r7, #4]
    e00c:	68b9      	ldr	r1, [r7, #8]
    e00e:	68f8      	ldr	r0, [r7, #12]
    e010:	4c0c      	ldr	r4, [pc, #48]	; (e044 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    e012:	47a0      	blx	r4
    e014:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    e016:	68fb      	ldr	r3, [r7, #12]
    e018:	68db      	ldr	r3, [r3, #12]
    e01a:	681b      	ldr	r3, [r3, #0]
    e01c:	699b      	ldr	r3, [r3, #24]
    e01e:	68fa      	ldr	r2, [r7, #12]
    e020:	68d2      	ldr	r2, [r2, #12]
    e022:	3204      	adds	r2, #4
    e024:	4610      	mov	r0, r2
    e026:	4798      	blx	r3
    e028:	4603      	mov	r3, r0
    e02a:	2b00      	cmp	r3, #0
    e02c:	d105      	bne.n	e03a <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    e02e:	68fb      	ldr	r3, [r7, #12]
    e030:	68db      	ldr	r3, [r3, #12]
    e032:	4618      	mov	r0, r3
    e034:	4b04      	ldr	r3, [pc, #16]	; (e048 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    e036:	4798      	blx	r3
    e038:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    e03a:	697b      	ldr	r3, [r7, #20]
}
    e03c:	4618      	mov	r0, r3
    e03e:	371c      	adds	r7, #28
    e040:	46bd      	mov	sp, r7
    e042:	bd90      	pop	{r4, r7, pc}
    e044:	0000defd 	.word	0x0000defd
    e048:	00003345 	.word	0x00003345

0000e04c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    e04c:	b480      	push	{r7}
    e04e:	b085      	sub	sp, #20
    e050:	af00      	add	r7, sp, #0
    e052:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e054:	2300      	movs	r3, #0
    e056:	73fb      	strb	r3, [r7, #15]
    e058:	7bfb      	ldrb	r3, [r7, #15]
    e05a:	2b1f      	cmp	r3, #31
    e05c:	dc23      	bgt.n	e0a6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e05e:	687b      	ldr	r3, [r7, #4]
    e060:	7f1a      	ldrb	r2, [r3, #28]
    e062:	7bfb      	ldrb	r3, [r7, #15]
    e064:	4413      	add	r3, r2
    e066:	b2db      	uxtb	r3, r3
    e068:	f003 031f 	and.w	r3, r3, #31
    e06c:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    e06e:	7bba      	ldrb	r2, [r7, #14]
    e070:	4910      	ldr	r1, [pc, #64]	; (e0b4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e072:	4613      	mov	r3, r2
    e074:	009b      	lsls	r3, r3, #2
    e076:	4413      	add	r3, r2
    e078:	009b      	lsls	r3, r3, #2
    e07a:	440b      	add	r3, r1
    e07c:	330c      	adds	r3, #12
    e07e:	681b      	ldr	r3, [r3, #0]
    e080:	2b00      	cmp	r3, #0
    e082:	d10c      	bne.n	e09e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    e084:	7bba      	ldrb	r2, [r7, #14]
    e086:	4613      	mov	r3, r2
    e088:	009b      	lsls	r3, r3, #2
    e08a:	4413      	add	r3, r2
    e08c:	009b      	lsls	r3, r3, #2
    e08e:	4a09      	ldr	r2, [pc, #36]	; (e0b4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e090:	441a      	add	r2, r3
    e092:	687b      	ldr	r3, [r7, #4]
    e094:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e096:	687b      	ldr	r3, [r7, #4]
    e098:	7bba      	ldrb	r2, [r7, #14]
    e09a:	771a      	strb	r2, [r3, #28]
			return;
    e09c:	e006      	b.n	e0ac <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e09e:	7bfb      	ldrb	r3, [r7, #15]
    e0a0:	3301      	adds	r3, #1
    e0a2:	73fb      	strb	r3, [r7, #15]
    e0a4:	e7d8      	b.n	e058 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    e0a6:	687b      	ldr	r3, [r7, #4]
    e0a8:	4a02      	ldr	r2, [pc, #8]	; (e0b4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e0aa:	619a      	str	r2, [r3, #24]

}
    e0ac:	3714      	adds	r7, #20
    e0ae:	46bd      	mov	sp, r7
    e0b0:	bc80      	pop	{r7}
    e0b2:	4770      	bx	lr
    e0b4:	200012fc 	.word	0x200012fc

0000e0b8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    e0b8:	b580      	push	{r7, lr}
    e0ba:	b084      	sub	sp, #16
    e0bc:	af00      	add	r7, sp, #0
    e0be:	6078      	str	r0, [r7, #4]
    e0c0:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e0c2:	2300      	movs	r3, #0
    e0c4:	73fb      	strb	r3, [r7, #15]
    e0c6:	7bfb      	ldrb	r3, [r7, #15]
    e0c8:	2b1f      	cmp	r3, #31
    e0ca:	dc28      	bgt.n	e11e <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e0cc:	687b      	ldr	r3, [r7, #4]
    e0ce:	7f1a      	ldrb	r2, [r3, #28]
    e0d0:	7bfb      	ldrb	r3, [r7, #15]
    e0d2:	4413      	add	r3, r2
    e0d4:	b2db      	uxtb	r3, r3
    e0d6:	f003 031f 	and.w	r3, r3, #31
    e0da:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    e0dc:	7bba      	ldrb	r2, [r7, #14]
    e0de:	4913      	ldr	r1, [pc, #76]	; (e12c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e0e0:	4613      	mov	r3, r2
    e0e2:	009b      	lsls	r3, r3, #2
    e0e4:	4413      	add	r3, r2
    e0e6:	009b      	lsls	r3, r3, #2
    e0e8:	440b      	add	r3, r1
    e0ea:	330c      	adds	r3, #12
    e0ec:	681a      	ldr	r2, [r3, #0]
    e0ee:	683b      	ldr	r3, [r7, #0]
    e0f0:	429a      	cmp	r2, r3
    e0f2:	d110      	bne.n	e116 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    e0f4:	6839      	ldr	r1, [r7, #0]
    e0f6:	6878      	ldr	r0, [r7, #4]
    e0f8:	4b0d      	ldr	r3, [pc, #52]	; (e130 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    e0fa:	4798      	blx	r3
			task=&taskArray[j];
    e0fc:	7bba      	ldrb	r2, [r7, #14]
    e0fe:	4613      	mov	r3, r2
    e100:	009b      	lsls	r3, r3, #2
    e102:	4413      	add	r3, r2
    e104:	009b      	lsls	r3, r3, #2
    e106:	4a09      	ldr	r2, [pc, #36]	; (e12c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e108:	441a      	add	r2, r3
    e10a:	687b      	ldr	r3, [r7, #4]
    e10c:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e10e:	687b      	ldr	r3, [r7, #4]
    e110:	7bba      	ldrb	r2, [r7, #14]
    e112:	771a      	strb	r2, [r3, #28]
			return;
    e114:	e006      	b.n	e124 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e116:	7bfb      	ldrb	r3, [r7, #15]
    e118:	3301      	adds	r3, #1
    e11a:	73fb      	strb	r3, [r7, #15]
    e11c:	e7d3      	b.n	e0c6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    e11e:	6878      	ldr	r0, [r7, #4]
    e120:	4b04      	ldr	r3, [pc, #16]	; (e134 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    e122:	4798      	blx	r3
	//task=&taskArray[0];

}
    e124:	3710      	adds	r7, #16
    e126:	46bd      	mov	sp, r7
    e128:	bd80      	pop	{r7, pc}
    e12a:	bf00      	nop
    e12c:	200012fc 	.word	0x200012fc
    e130:	0000dfa5 	.word	0x0000dfa5
    e134:	0000e04d 	.word	0x0000e04d

0000e138 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    e138:	b480      	push	{r7}
    e13a:	b085      	sub	sp, #20
    e13c:	af00      	add	r7, sp, #0
    e13e:	6078      	str	r0, [r7, #4]
    e140:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e142:	2300      	movs	r3, #0
    e144:	73fb      	strb	r3, [r7, #15]
    e146:	7bfb      	ldrb	r3, [r7, #15]
    e148:	2b1f      	cmp	r3, #31
    e14a:	dc19      	bgt.n	e180 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e14c:	7bfa      	ldrb	r2, [r7, #15]
    e14e:	490f      	ldr	r1, [pc, #60]	; (e18c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e150:	4613      	mov	r3, r2
    e152:	009b      	lsls	r3, r3, #2
    e154:	4413      	add	r3, r2
    e156:	009b      	lsls	r3, r3, #2
    e158:	440b      	add	r3, r1
    e15a:	330c      	adds	r3, #12
    e15c:	681a      	ldr	r2, [r3, #0]
    e15e:	683b      	ldr	r3, [r7, #0]
    e160:	429a      	cmp	r2, r3
    e162:	d109      	bne.n	e178 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e164:	7bfa      	ldrb	r2, [r7, #15]
    e166:	4613      	mov	r3, r2
    e168:	009b      	lsls	r3, r3, #2
    e16a:	4413      	add	r3, r2
    e16c:	009b      	lsls	r3, r3, #2
    e16e:	4a07      	ldr	r2, [pc, #28]	; (e18c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e170:	441a      	add	r2, r3
    e172:	687b      	ldr	r3, [r7, #4]
    e174:	619a      	str	r2, [r3, #24]
			return;
    e176:	e004      	b.n	e182 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e178:	7bfb      	ldrb	r3, [r7, #15]
    e17a:	3301      	adds	r3, #1
    e17c:	73fb      	strb	r3, [r7, #15]
    e17e:	e7e2      	b.n	e146 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    e180:	bf00      	nop
}
    e182:	3714      	adds	r7, #20
    e184:	46bd      	mov	sp, r7
    e186:	bc80      	pop	{r7}
    e188:	4770      	bx	lr
    e18a:	bf00      	nop
    e18c:	200012fc 	.word	0x200012fc

0000e190 <_Z41__static_initialization_and_destruction_0ii>:
    e190:	b580      	push	{r7, lr}
    e192:	b082      	sub	sp, #8
    e194:	af00      	add	r7, sp, #0
    e196:	6078      	str	r0, [r7, #4]
    e198:	6039      	str	r1, [r7, #0]
    e19a:	687b      	ldr	r3, [r7, #4]
    e19c:	2b01      	cmp	r3, #1
    e19e:	d14c      	bne.n	e23a <_Z41__static_initialization_and_destruction_0ii+0xaa>
    e1a0:	683b      	ldr	r3, [r7, #0]
    e1a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e1a6:	4293      	cmp	r3, r2
    e1a8:	d147      	bne.n	e23a <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e1aa:	4926      	ldr	r1, [pc, #152]	; (e244 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e1ac:	4826      	ldr	r0, [pc, #152]	; (e248 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e1ae:	4b27      	ldr	r3, [pc, #156]	; (e24c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e1b0:	4798      	blx	r3
    e1b2:	4a27      	ldr	r2, [pc, #156]	; (e250 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e1b4:	4927      	ldr	r1, [pc, #156]	; (e254 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e1b6:	4824      	ldr	r0, [pc, #144]	; (e248 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e1b8:	4b27      	ldr	r3, [pc, #156]	; (e258 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e1ba:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e1bc:	4927      	ldr	r1, [pc, #156]	; (e25c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e1be:	4828      	ldr	r0, [pc, #160]	; (e260 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e1c0:	4b22      	ldr	r3, [pc, #136]	; (e24c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e1c2:	4798      	blx	r3
    e1c4:	4a22      	ldr	r2, [pc, #136]	; (e250 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e1c6:	4923      	ldr	r1, [pc, #140]	; (e254 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e1c8:	4825      	ldr	r0, [pc, #148]	; (e260 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e1ca:	4b23      	ldr	r3, [pc, #140]	; (e258 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e1cc:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e1ce:	4925      	ldr	r1, [pc, #148]	; (e264 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e1d0:	4825      	ldr	r0, [pc, #148]	; (e268 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e1d2:	4b1e      	ldr	r3, [pc, #120]	; (e24c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e1d4:	4798      	blx	r3
    e1d6:	4a1e      	ldr	r2, [pc, #120]	; (e250 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e1d8:	491e      	ldr	r1, [pc, #120]	; (e254 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e1da:	4823      	ldr	r0, [pc, #140]	; (e268 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e1dc:	4b1e      	ldr	r3, [pc, #120]	; (e258 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e1de:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e1e0:	4922      	ldr	r1, [pc, #136]	; (e26c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e1e2:	4823      	ldr	r0, [pc, #140]	; (e270 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e1e4:	4b19      	ldr	r3, [pc, #100]	; (e24c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e1e6:	4798      	blx	r3
    e1e8:	4a19      	ldr	r2, [pc, #100]	; (e250 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e1ea:	491a      	ldr	r1, [pc, #104]	; (e254 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e1ec:	4820      	ldr	r0, [pc, #128]	; (e270 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e1ee:	4b1a      	ldr	r3, [pc, #104]	; (e258 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e1f0:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e1f2:	4920      	ldr	r1, [pc, #128]	; (e274 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e1f4:	4820      	ldr	r0, [pc, #128]	; (e278 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e1f6:	4b15      	ldr	r3, [pc, #84]	; (e24c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e1f8:	4798      	blx	r3
    e1fa:	4a15      	ldr	r2, [pc, #84]	; (e250 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e1fc:	4915      	ldr	r1, [pc, #84]	; (e254 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e1fe:	481e      	ldr	r0, [pc, #120]	; (e278 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e200:	4b15      	ldr	r3, [pc, #84]	; (e258 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e202:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e204:	491d      	ldr	r1, [pc, #116]	; (e27c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e206:	481e      	ldr	r0, [pc, #120]	; (e280 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e208:	4b10      	ldr	r3, [pc, #64]	; (e24c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e20a:	4798      	blx	r3
    e20c:	4a10      	ldr	r2, [pc, #64]	; (e250 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e20e:	4911      	ldr	r1, [pc, #68]	; (e254 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e210:	481b      	ldr	r0, [pc, #108]	; (e280 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e212:	4b11      	ldr	r3, [pc, #68]	; (e258 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e214:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e216:	491b      	ldr	r1, [pc, #108]	; (e284 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e218:	481b      	ldr	r0, [pc, #108]	; (e288 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e21a:	4b0c      	ldr	r3, [pc, #48]	; (e24c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e21c:	4798      	blx	r3
    e21e:	4a0c      	ldr	r2, [pc, #48]	; (e250 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e220:	490c      	ldr	r1, [pc, #48]	; (e254 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e222:	4819      	ldr	r0, [pc, #100]	; (e288 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e224:	4b0c      	ldr	r3, [pc, #48]	; (e258 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e226:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e228:	4918      	ldr	r1, [pc, #96]	; (e28c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e22a:	4819      	ldr	r0, [pc, #100]	; (e290 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e22c:	4b07      	ldr	r3, [pc, #28]	; (e24c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e22e:	4798      	blx	r3
    e230:	4a07      	ldr	r2, [pc, #28]	; (e250 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e232:	4908      	ldr	r1, [pc, #32]	; (e254 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e234:	4816      	ldr	r0, [pc, #88]	; (e290 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e236:	4b08      	ldr	r3, [pc, #32]	; (e258 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e238:	4798      	blx	r3
    e23a:	bf00      	nop
    e23c:	3708      	adds	r7, #8
    e23e:	46bd      	mov	sp, r7
    e240:	bd80      	pop	{r7, pc}
    e242:	bf00      	nop
    e244:	20009dc0 	.word	0x20009dc0
    e248:	200011f8 	.word	0x200011f8
    e24c:	0000dd75 	.word	0x0000dd75
    e250:	20000000 	.word	0x20000000
    e254:	0000ddad 	.word	0x0000ddad
    e258:	000134a5 	.word	0x000134a5
    e25c:	20009e54 	.word	0x20009e54
    e260:	20001218 	.word	0x20001218
    e264:	20009f78 	.word	0x20009f78
    e268:	20001238 	.word	0x20001238
    e26c:	20009e74 	.word	0x20009e74
    e270:	20001258 	.word	0x20001258
    e274:	20009f38 	.word	0x20009f38
    e278:	20001278 	.word	0x20001278
    e27c:	20009f58 	.word	0x20009f58
    e280:	20001298 	.word	0x20001298
    e284:	20009e30 	.word	0x20009e30
    e288:	200012b8 	.word	0x200012b8
    e28c:	20009ed0 	.word	0x20009ed0
    e290:	200012d8 	.word	0x200012d8

0000e294 <_GLOBAL__sub_I_ptrTimerClass>:
    e294:	b580      	push	{r7, lr}
    e296:	af00      	add	r7, sp, #0
    e298:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e29c:	2001      	movs	r0, #1
    e29e:	4b01      	ldr	r3, [pc, #4]	; (e2a4 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    e2a0:	4798      	blx	r3
    e2a2:	bd80      	pop	{r7, pc}
    e2a4:	0000e191 	.word	0x0000e191

0000e2a8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    e2a8:	b480      	push	{r7}
    e2aa:	b083      	sub	sp, #12
    e2ac:	af00      	add	r7, sp, #0
    e2ae:	6078      	str	r0, [r7, #4]
    e2b0:	4a05      	ldr	r2, [pc, #20]	; (e2c8 <_ZN5PrintC1Ev+0x20>)
    e2b2:	687b      	ldr	r3, [r7, #4]
    e2b4:	601a      	str	r2, [r3, #0]
    e2b6:	687b      	ldr	r3, [r7, #4]
    e2b8:	2200      	movs	r2, #0
    e2ba:	605a      	str	r2, [r3, #4]
    e2bc:	687b      	ldr	r3, [r7, #4]
    e2be:	4618      	mov	r0, r3
    e2c0:	370c      	adds	r7, #12
    e2c2:	46bd      	mov	sp, r7
    e2c4:	bc80      	pop	{r7}
    e2c6:	4770      	bx	lr
    e2c8:	0001428c 	.word	0x0001428c

0000e2cc <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    e2cc:	b480      	push	{r7}
    e2ce:	b083      	sub	sp, #12
    e2d0:	af00      	add	r7, sp, #0
    e2d2:	6078      	str	r0, [r7, #4]
    e2d4:	2300      	movs	r3, #0
    e2d6:	4618      	mov	r0, r3
    e2d8:	370c      	adds	r7, #12
    e2da:	46bd      	mov	sp, r7
    e2dc:	bc80      	pop	{r7}
    e2de:	4770      	bx	lr

0000e2e0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    e2e0:	b480      	push	{r7}
    e2e2:	b083      	sub	sp, #12
    e2e4:	af00      	add	r7, sp, #0
    e2e6:	6078      	str	r0, [r7, #4]
    e2e8:	bf00      	nop
    e2ea:	370c      	adds	r7, #12
    e2ec:	46bd      	mov	sp, r7
    e2ee:	bc80      	pop	{r7}
    e2f0:	4770      	bx	lr
	...

0000e2f4 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    e2f4:	b580      	push	{r7, lr}
    e2f6:	b082      	sub	sp, #8
    e2f8:	af00      	add	r7, sp, #0
    e2fa:	6078      	str	r0, [r7, #4]
    e2fc:	687b      	ldr	r3, [r7, #4]
    e2fe:	4618      	mov	r0, r3
    e300:	4b06      	ldr	r3, [pc, #24]	; (e31c <_ZN6StreamC1Ev+0x28>)
    e302:	4798      	blx	r3
    e304:	4a06      	ldr	r2, [pc, #24]	; (e320 <_ZN6StreamC1Ev+0x2c>)
    e306:	687b      	ldr	r3, [r7, #4]
    e308:	601a      	str	r2, [r3, #0]
    e30a:	687b      	ldr	r3, [r7, #4]
    e30c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e310:	609a      	str	r2, [r3, #8]
    e312:	687b      	ldr	r3, [r7, #4]
    e314:	4618      	mov	r0, r3
    e316:	3708      	adds	r7, #8
    e318:	46bd      	mov	sp, r7
    e31a:	bd80      	pop	{r7, pc}
    e31c:	0000e2a9 	.word	0x0000e2a9
    e320:	00014250 	.word	0x00014250

0000e324 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    e324:	b480      	push	{r7}
    e326:	b083      	sub	sp, #12
    e328:	af00      	add	r7, sp, #0
    e32a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    e32c:	4b06      	ldr	r3, [pc, #24]	; (e348 <_ZL10USBTimeoutPK10timer_task+0x24>)
    e32e:	681b      	ldr	r3, [r3, #0]
    e330:	2201      	movs	r2, #1
    e332:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    e334:	4b04      	ldr	r3, [pc, #16]	; (e348 <_ZL10USBTimeoutPK10timer_task+0x24>)
    e336:	681b      	ldr	r3, [r3, #0]
    e338:	2200      	movs	r2, #0
    e33a:	741a      	strb	r2, [r3, #16]
	
}
    e33c:	bf00      	nop
    e33e:	370c      	adds	r7, #12
    e340:	46bd      	mov	sp, r7
    e342:	bc80      	pop	{r7}
    e344:	4770      	bx	lr
    e346:	bf00      	nop
    e348:	20001700 	.word	0x20001700

0000e34c <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e34c:	b480      	push	{r7}
    e34e:	b083      	sub	sp, #12
    e350:	af00      	add	r7, sp, #0
    e352:	4603      	mov	r3, r0
    e354:	603a      	str	r2, [r7, #0]
    e356:	71fb      	strb	r3, [r7, #7]
    e358:	460b      	mov	r3, r1
    e35a:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    e35c:	4b08      	ldr	r3, [pc, #32]	; (e380 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e35e:	681b      	ldr	r3, [r3, #0]
    e360:	2201      	movs	r2, #1
    e362:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    e364:	4b06      	ldr	r3, [pc, #24]	; (e380 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e366:	681b      	ldr	r3, [r3, #0]
    e368:	2201      	movs	r2, #1
    e36a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e36c:	4b04      	ldr	r3, [pc, #16]	; (e380 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e36e:	681b      	ldr	r3, [r3, #0]
    e370:	2201      	movs	r2, #1
    e372:	741a      	strb	r2, [r3, #16]


	return false;
    e374:	2300      	movs	r3, #0
}
    e376:	4618      	mov	r0, r3
    e378:	370c      	adds	r7, #12
    e37a:	46bd      	mov	sp, r7
    e37c:	bc80      	pop	{r7}
    e37e:	4770      	bx	lr
    e380:	20001700 	.word	0x20001700

0000e384 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e384:	b480      	push	{r7}
    e386:	b083      	sub	sp, #12
    e388:	af00      	add	r7, sp, #0
    e38a:	4603      	mov	r3, r0
    e38c:	603a      	str	r2, [r7, #0]
    e38e:	71fb      	strb	r3, [r7, #7]
    e390:	460b      	mov	r3, r1
    e392:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    e394:	4b08      	ldr	r3, [pc, #32]	; (e3b8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e396:	681b      	ldr	r3, [r3, #0]
    e398:	2201      	movs	r2, #1
    e39a:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    e39c:	4b06      	ldr	r3, [pc, #24]	; (e3b8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e39e:	681b      	ldr	r3, [r3, #0]
    e3a0:	2201      	movs	r2, #1
    e3a2:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e3a4:	4b04      	ldr	r3, [pc, #16]	; (e3b8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e3a6:	681b      	ldr	r3, [r3, #0]
    e3a8:	2201      	movs	r2, #1
    e3aa:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    e3ac:	2300      	movs	r3, #0
}
    e3ae:	4618      	mov	r0, r3
    e3b0:	370c      	adds	r7, #12
    e3b2:	46bd      	mov	sp, r7
    e3b4:	bc80      	pop	{r7}
    e3b6:	4770      	bx	lr
    e3b8:	20001700 	.word	0x20001700

0000e3bc <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    e3bc:	b580      	push	{r7, lr}
    e3be:	b082      	sub	sp, #8
    e3c0:	af00      	add	r7, sp, #0
    e3c2:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    e3c4:	793b      	ldrb	r3, [r7, #4]
    e3c6:	f003 0301 	and.w	r3, r3, #1
    e3ca:	b2db      	uxtb	r3, r3
    e3cc:	2b00      	cmp	r3, #0
    e3ce:	d013      	beq.n	e3f8 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    e3d0:	490c      	ldr	r1, [pc, #48]	; (e404 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    e3d2:	2000      	movs	r0, #0
    e3d4:	4b0c      	ldr	r3, [pc, #48]	; (e408 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e3d6:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    e3d8:	490c      	ldr	r1, [pc, #48]	; (e40c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    e3da:	2001      	movs	r0, #1
    e3dc:	4b0a      	ldr	r3, [pc, #40]	; (e408 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e3de:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    e3e0:	4b0b      	ldr	r3, [pc, #44]	; (e410 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e3e2:	681b      	ldr	r3, [r3, #0]
    e3e4:	2201      	movs	r2, #1
    e3e6:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    e3e8:	4b09      	ldr	r3, [pc, #36]	; (e410 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e3ea:	681b      	ldr	r3, [r3, #0]
    e3ec:	2201      	movs	r2, #1
    e3ee:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    e3f0:	4b07      	ldr	r3, [pc, #28]	; (e410 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e3f2:	681b      	ldr	r3, [r3, #0]
    e3f4:	2201      	movs	r2, #1
    e3f6:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    e3f8:	2300      	movs	r3, #0
}
    e3fa:	4618      	mov	r0, r3
    e3fc:	3708      	adds	r7, #8
    e3fe:	46bd      	mov	sp, r7
    e400:	bd80      	pop	{r7, pc}
    e402:	bf00      	nop
    e404:	0000e34d 	.word	0x0000e34d
    e408:	0000cbe1 	.word	0x0000cbe1
    e40c:	0000e385 	.word	0x0000e385
    e410:	20001700 	.word	0x20001700

0000e414 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    e414:	b580      	push	{r7, lr}
    e416:	b082      	sub	sp, #8
    e418:	af00      	add	r7, sp, #0
    e41a:	6078      	str	r0, [r7, #4]
    e41c:	687b      	ldr	r3, [r7, #4]
    e41e:	4618      	mov	r0, r3
    e420:	4b0a      	ldr	r3, [pc, #40]	; (e44c <_ZN9CDC_ClassC1Ev+0x38>)
    e422:	4798      	blx	r3
    e424:	687b      	ldr	r3, [r7, #4]
    e426:	3310      	adds	r3, #16
    e428:	4618      	mov	r0, r3
    e42a:	4b09      	ldr	r3, [pc, #36]	; (e450 <_ZN9CDC_ClassC1Ev+0x3c>)
    e42c:	4798      	blx	r3
    e42e:	4a09      	ldr	r2, [pc, #36]	; (e454 <_ZN9CDC_ClassC1Ev+0x40>)
    e430:	687b      	ldr	r3, [r7, #4]
    e432:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    e434:	687b      	ldr	r3, [r7, #4]
    e436:	f04f 32ff 	mov.w	r2, #4294967295
    e43a:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    e43c:	4a06      	ldr	r2, [pc, #24]	; (e458 <_ZN9CDC_ClassC1Ev+0x44>)
    e43e:	687b      	ldr	r3, [r7, #4]
    e440:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    e442:	687b      	ldr	r3, [r7, #4]
    e444:	4618      	mov	r0, r3
    e446:	3708      	adds	r7, #8
    e448:	46bd      	mov	sp, r7
    e44a:	bd80      	pop	{r7, pc}
    e44c:	0000e2f5 	.word	0x0000e2f5
    e450:	0000eb8d 	.word	0x0000eb8d
    e454:	00014220 	.word	0x00014220
    e458:	20001700 	.word	0x20001700

0000e45c <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    e45c:	b580      	push	{r7, lr}
    e45e:	b082      	sub	sp, #8
    e460:	af00      	add	r7, sp, #0
    e462:	6078      	str	r0, [r7, #4]
    e464:	4a06      	ldr	r2, [pc, #24]	; (e480 <_ZN9CDC_ClassD1Ev+0x24>)
    e466:	687b      	ldr	r3, [r7, #4]
    e468:	601a      	str	r2, [r3, #0]
    e46a:	687b      	ldr	r3, [r7, #4]
    e46c:	3310      	adds	r3, #16
    e46e:	4618      	mov	r0, r3
    e470:	4b04      	ldr	r3, [pc, #16]	; (e484 <_ZN9CDC_ClassD1Ev+0x28>)
    e472:	4798      	blx	r3
{
} //~CDC_Class
    e474:	687b      	ldr	r3, [r7, #4]
    e476:	4618      	mov	r0, r3
    e478:	3708      	adds	r7, #8
    e47a:	46bd      	mov	sp, r7
    e47c:	bd80      	pop	{r7, pc}
    e47e:	bf00      	nop
    e480:	00014220 	.word	0x00014220
    e484:	0000ebad 	.word	0x0000ebad

0000e488 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    e488:	b580      	push	{r7, lr}
    e48a:	b082      	sub	sp, #8
    e48c:	af00      	add	r7, sp, #0
    e48e:	6078      	str	r0, [r7, #4]
	
	OnInit();
    e490:	687b      	ldr	r3, [r7, #4]
    e492:	3310      	adds	r3, #16
    e494:	4618      	mov	r0, r3
    e496:	4b09      	ldr	r3, [pc, #36]	; (e4bc <_ZN9CDC_Class4InitEv+0x34>)
    e498:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    e49a:	4909      	ldr	r1, [pc, #36]	; (e4c0 <_ZN9CDC_Class4InitEv+0x38>)
    e49c:	2003      	movs	r0, #3
    e49e:	4b09      	ldr	r3, [pc, #36]	; (e4c4 <_ZN9CDC_Class4InitEv+0x3c>)
    e4a0:	4798      	blx	r3
	delay_ms(100);
    e4a2:	2064      	movs	r0, #100	; 0x64
    e4a4:	4b08      	ldr	r3, [pc, #32]	; (e4c8 <_ZN9CDC_Class4InitEv+0x40>)
    e4a6:	4798      	blx	r3
		
	if (connected)
    e4a8:	687b      	ldr	r3, [r7, #4]
    e4aa:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    e4ac:	2064      	movs	r0, #100	; 0x64
    e4ae:	4b06      	ldr	r3, [pc, #24]	; (e4c8 <_ZN9CDC_Class4InitEv+0x40>)
    e4b0:	4798      	blx	r3

	

}
    e4b2:	bf00      	nop
    e4b4:	3708      	adds	r7, #8
    e4b6:	46bd      	mov	sp, r7
    e4b8:	bd80      	pop	{r7, pc}
    e4ba:	bf00      	nop
    e4bc:	0000ebc1 	.word	0x0000ebc1
    e4c0:	0000e3bd 	.word	0x0000e3bd
    e4c4:	0000cbe1 	.word	0x0000cbe1
    e4c8:	00002a81 	.word	0x00002a81

0000e4cc <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    e4cc:	b580      	push	{r7, lr}
    e4ce:	b082      	sub	sp, #8
    e4d0:	af00      	add	r7, sp, #0
    e4d2:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    e4d4:	4b03      	ldr	r3, [pc, #12]	; (e4e4 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    e4d6:	4798      	blx	r3
    e4d8:	4603      	mov	r3, r0
	
}
    e4da:	4618      	mov	r0, r3
    e4dc:	3708      	adds	r7, #8
    e4de:	46bd      	mov	sp, r7
    e4e0:	bd80      	pop	{r7, pc}
    e4e2:	bf00      	nop
    e4e4:	0000cc59 	.word	0x0000cc59

0000e4e8 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    e4e8:	b580      	push	{r7, lr}
    e4ea:	b084      	sub	sp, #16
    e4ec:	af00      	add	r7, sp, #0
    e4ee:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    e4f0:	687b      	ldr	r3, [r7, #4]
    e4f2:	699b      	ldr	r3, [r3, #24]
    e4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
    e4f8:	bf14      	ite	ne
    e4fa:	2301      	movne	r3, #1
    e4fc:	2300      	moveq	r3, #0
    e4fe:	b2db      	uxtb	r3, r3
    e500:	2b00      	cmp	r3, #0
    e502:	d002      	beq.n	e50a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    e504:	687b      	ldr	r3, [r7, #4]
    e506:	699b      	ldr	r3, [r3, #24]
    e508:	e011      	b.n	e52e <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    e50a:	687b      	ldr	r3, [r7, #4]
    e50c:	681b      	ldr	r3, [r3, #0]
    e50e:	331c      	adds	r3, #28
    e510:	681b      	ldr	r3, [r3, #0]
    e512:	f107 010f 	add.w	r1, r7, #15
    e516:	2201      	movs	r2, #1
    e518:	6878      	ldr	r0, [r7, #4]
    e51a:	4798      	blx	r3
    e51c:	4602      	mov	r2, r0
    e51e:	687b      	ldr	r3, [r7, #4]
    e520:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    e522:	7bfb      	ldrb	r3, [r7, #15]
    e524:	461a      	mov	r2, r3
    e526:	687b      	ldr	r3, [r7, #4]
    e528:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    e52a:	687b      	ldr	r3, [r7, #4]
    e52c:	699b      	ldr	r3, [r3, #24]
}
    e52e:	4618      	mov	r0, r3
    e530:	3710      	adds	r7, #16
    e532:	46bd      	mov	sp, r7
    e534:	bd80      	pop	{r7, pc}
	...

0000e538 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    e538:	b580      	push	{r7, lr}
    e53a:	b086      	sub	sp, #24
    e53c:	af00      	add	r7, sp, #0
    e53e:	60f8      	str	r0, [r7, #12]
    e540:	60b9      	str	r1, [r7, #8]
    e542:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    e544:	68fb      	ldr	r3, [r7, #12]
    e546:	7c1b      	ldrb	r3, [r3, #16]
    e548:	b2db      	uxtb	r3, r3
    e54a:	2b00      	cmp	r3, #0
    e54c:	d02e      	beq.n	e5ac <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e54e:	687a      	ldr	r2, [r7, #4]
    e550:	4613      	mov	r3, r2
    e552:	009b      	lsls	r3, r3, #2
    e554:	4413      	add	r3, r2
    e556:	005b      	lsls	r3, r3, #1
    e558:	461a      	mov	r2, r3
    e55a:	4918      	ldr	r1, [pc, #96]	; (e5bc <_ZN9CDC_Class8readDataEPvl+0x84>)
    e55c:	4818      	ldr	r0, [pc, #96]	; (e5c0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e55e:	4b19      	ldr	r3, [pc, #100]	; (e5c4 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e560:	4798      	blx	r3
		rxReady=false;
    e562:	68fb      	ldr	r3, [r7, #12]
    e564:	2200      	movs	r2, #0
    e566:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e568:	687b      	ldr	r3, [r7, #4]
    e56a:	4619      	mov	r1, r3
    e56c:	68b8      	ldr	r0, [r7, #8]
    e56e:	4b16      	ldr	r3, [pc, #88]	; (e5c8 <_ZN9CDC_Class8readDataEPvl+0x90>)
    e570:	4798      	blx	r3
    e572:	4603      	mov	r3, r0
    e574:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e576:	68fb      	ldr	r3, [r7, #12]
    e578:	7d5b      	ldrb	r3, [r3, #21]
    e57a:	b2db      	uxtb	r3, r3
    e57c:	f083 0301 	eor.w	r3, r3, #1
    e580:	b2db      	uxtb	r3, r3
    e582:	2b00      	cmp	r3, #0
    e584:	d006      	beq.n	e594 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e586:	68fb      	ldr	r3, [r7, #12]
    e588:	7c1b      	ldrb	r3, [r3, #16]
    e58a:	b2db      	uxtb	r3, r3
    e58c:	2b00      	cmp	r3, #0
    e58e:	d001      	beq.n	e594 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e590:	2301      	movs	r3, #1
    e592:	e000      	b.n	e596 <_ZN9CDC_Class8readDataEPvl+0x5e>
    e594:	2300      	movs	r3, #0
    e596:	2b00      	cmp	r3, #0
    e598:	d000      	beq.n	e59c <_ZN9CDC_Class8readDataEPvl+0x64>
    e59a:	e7ec      	b.n	e576 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e59c:	4808      	ldr	r0, [pc, #32]	; (e5c0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e59e:	4b0b      	ldr	r3, [pc, #44]	; (e5cc <_ZN9CDC_Class8readDataEPvl+0x94>)
    e5a0:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e5a2:	4906      	ldr	r1, [pc, #24]	; (e5bc <_ZN9CDC_Class8readDataEPvl+0x84>)
    e5a4:	4806      	ldr	r0, [pc, #24]	; (e5c0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e5a6:	4b0a      	ldr	r3, [pc, #40]	; (e5d0 <_ZN9CDC_Class8readDataEPvl+0x98>)
    e5a8:	4798      	blx	r3
    e5aa:	e001      	b.n	e5b0 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e5ac:	2300      	movs	r3, #0
    e5ae:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e5b0:	7dfb      	ldrb	r3, [r7, #23]
}
    e5b2:	4618      	mov	r0, r3
    e5b4:	3718      	adds	r7, #24
    e5b6:	46bd      	mov	sp, r7
    e5b8:	bd80      	pop	{r7, pc}
    e5ba:	bf00      	nop
    e5bc:	0000e325 	.word	0x0000e325
    e5c0:	200016a0 	.word	0x200016a0
    e5c4:	0000dffd 	.word	0x0000dffd
    e5c8:	0000cb35 	.word	0x0000cb35
    e5cc:	0000ded5 	.word	0x0000ded5
    e5d0:	0000dfa5 	.word	0x0000dfa5

0000e5d4 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    e5d4:	b580      	push	{r7, lr}
    e5d6:	b086      	sub	sp, #24
    e5d8:	af00      	add	r7, sp, #0
    e5da:	60f8      	str	r0, [r7, #12]
    e5dc:	60b9      	str	r1, [r7, #8]
    e5de:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    e5e0:	68fb      	ldr	r3, [r7, #12]
    e5e2:	2200      	movs	r2, #0
    e5e4:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    e5e6:	687b      	ldr	r3, [r7, #4]
    e5e8:	4619      	mov	r1, r3
    e5ea:	68b8      	ldr	r0, [r7, #8]
    e5ec:	4b04      	ldr	r3, [pc, #16]	; (e600 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    e5ee:	4798      	blx	r3
    e5f0:	4603      	mov	r3, r0
    e5f2:	617b      	str	r3, [r7, #20]
	return r;
    e5f4:	697b      	ldr	r3, [r7, #20]
}
    e5f6:	4618      	mov	r0, r3
    e5f8:	3718      	adds	r7, #24
    e5fa:	46bd      	mov	sp, r7
    e5fc:	bd80      	pop	{r7, pc}
    e5fe:	bf00      	nop
    e600:	0000cb35 	.word	0x0000cb35

0000e604 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    e604:	b580      	push	{r7, lr}
    e606:	b084      	sub	sp, #16
    e608:	af00      	add	r7, sp, #0
    e60a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e60c:	687b      	ldr	r3, [r7, #4]
    e60e:	2200      	movs	r2, #0
    e610:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e612:	f107 030f 	add.w	r3, r7, #15
    e616:	2101      	movs	r1, #1
    e618:	4618      	mov	r0, r3
    e61a:	4b08      	ldr	r3, [pc, #32]	; (e63c <_ZN9CDC_Class4readEv+0x38>)
    e61c:	4798      	blx	r3
	while(!rxReady);
    e61e:	687b      	ldr	r3, [r7, #4]
    e620:	7d5b      	ldrb	r3, [r3, #21]
    e622:	b2db      	uxtb	r3, r3
    e624:	f083 0301 	eor.w	r3, r3, #1
    e628:	b2db      	uxtb	r3, r3
    e62a:	2b00      	cmp	r3, #0
    e62c:	d000      	beq.n	e630 <_ZN9CDC_Class4readEv+0x2c>
    e62e:	e7f6      	b.n	e61e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e630:	7bfb      	ldrb	r3, [r7, #15]
}
    e632:	4618      	mov	r0, r3
    e634:	3710      	adds	r7, #16
    e636:	46bd      	mov	sp, r7
    e638:	bd80      	pop	{r7, pc}
    e63a:	bf00      	nop
    e63c:	0000cb35 	.word	0x0000cb35

0000e640 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e640:	b580      	push	{r7, lr}
    e642:	b082      	sub	sp, #8
    e644:	af00      	add	r7, sp, #0
    e646:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e648:	687b      	ldr	r3, [r7, #4]
    e64a:	331c      	adds	r3, #28
    e64c:	2140      	movs	r1, #64	; 0x40
    e64e:	4618      	mov	r0, r3
    e650:	4b02      	ldr	r3, [pc, #8]	; (e65c <_ZN9CDC_Class5flushEv+0x1c>)
    e652:	4798      	blx	r3
}
    e654:	bf00      	nop
    e656:	3708      	adds	r7, #8
    e658:	46bd      	mov	sp, r7
    e65a:	bd80      	pop	{r7, pc}
    e65c:	0000cb79 	.word	0x0000cb79

0000e660 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e660:	b580      	push	{r7, lr}
    e662:	b082      	sub	sp, #8
    e664:	af00      	add	r7, sp, #0
    e666:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e668:	4b02      	ldr	r3, [pc, #8]	; (e674 <_ZN9CDC_Class5clearEv+0x14>)
    e66a:	4798      	blx	r3
}
    e66c:	bf00      	nop
    e66e:	3708      	adds	r7, #8
    e670:	46bd      	mov	sp, r7
    e672:	bd80      	pop	{r7, pc}
    e674:	0000cbbd 	.word	0x0000cbbd

0000e678 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e678:	b580      	push	{r7, lr}
    e67a:	b082      	sub	sp, #8
    e67c:	af00      	add	r7, sp, #0
    e67e:	6078      	str	r0, [r7, #4]
    e680:	460b      	mov	r3, r1
    e682:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e684:	687b      	ldr	r3, [r7, #4]
    e686:	7c1b      	ldrb	r3, [r3, #16]
    e688:	b2db      	uxtb	r3, r3
    e68a:	2b00      	cmp	r3, #0
    e68c:	d012      	beq.n	e6b4 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e68e:	687b      	ldr	r3, [r7, #4]
    e690:	7d1b      	ldrb	r3, [r3, #20]
    e692:	b2db      	uxtb	r3, r3
    e694:	f083 0301 	eor.w	r3, r3, #1
    e698:	b2db      	uxtb	r3, r3
    e69a:	2b00      	cmp	r3, #0
    e69c:	d000      	beq.n	e6a0 <_ZN9CDC_Class5writeEh+0x28>
    e69e:	e7f6      	b.n	e68e <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e6a0:	687b      	ldr	r3, [r7, #4]
    e6a2:	681b      	ldr	r3, [r3, #0]
    e6a4:	3324      	adds	r3, #36	; 0x24
    e6a6:	681b      	ldr	r3, [r3, #0]
    e6a8:	1cf9      	adds	r1, r7, #3
    e6aa:	2201      	movs	r2, #1
    e6ac:	6878      	ldr	r0, [r7, #4]
    e6ae:	4798      	blx	r3
    e6b0:	4603      	mov	r3, r0
    e6b2:	e000      	b.n	e6b6 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e6b4:	2300      	movs	r3, #0
	}
		
}
    e6b6:	4618      	mov	r0, r3
    e6b8:	3708      	adds	r7, #8
    e6ba:	46bd      	mov	sp, r7
    e6bc:	bd80      	pop	{r7, pc}
	...

0000e6c0 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e6c0:	b580      	push	{r7, lr}
    e6c2:	b086      	sub	sp, #24
    e6c4:	af00      	add	r7, sp, #0
    e6c6:	60f8      	str	r0, [r7, #12]
    e6c8:	60b9      	str	r1, [r7, #8]
    e6ca:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e6cc:	68fb      	ldr	r3, [r7, #12]
    e6ce:	7c1b      	ldrb	r3, [r3, #16]
    e6d0:	b2db      	uxtb	r3, r3
    e6d2:	2b00      	cmp	r3, #0
    e6d4:	d02f      	beq.n	e736 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e6d6:	687a      	ldr	r2, [r7, #4]
    e6d8:	4613      	mov	r3, r2
    e6da:	009b      	lsls	r3, r3, #2
    e6dc:	4413      	add	r3, r2
    e6de:	005b      	lsls	r3, r3, #1
    e6e0:	461a      	mov	r2, r3
    e6e2:	4917      	ldr	r1, [pc, #92]	; (e740 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e6e4:	4817      	ldr	r0, [pc, #92]	; (e744 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e6e6:	4b18      	ldr	r3, [pc, #96]	; (e748 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e6e8:	4798      	blx	r3
		txReady=false;
    e6ea:	68fb      	ldr	r3, [r7, #12]
    e6ec:	2200      	movs	r2, #0
    e6ee:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e6f0:	687b      	ldr	r3, [r7, #4]
    e6f2:	4619      	mov	r1, r3
    e6f4:	68b8      	ldr	r0, [r7, #8]
    e6f6:	4b15      	ldr	r3, [pc, #84]	; (e74c <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e6f8:	4798      	blx	r3
    e6fa:	4603      	mov	r3, r0
    e6fc:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e6fe:	68fb      	ldr	r3, [r7, #12]
    e700:	7d1b      	ldrb	r3, [r3, #20]
    e702:	b2db      	uxtb	r3, r3
    e704:	f083 0301 	eor.w	r3, r3, #1
    e708:	b2db      	uxtb	r3, r3
    e70a:	2b00      	cmp	r3, #0
    e70c:	d006      	beq.n	e71c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e70e:	68fb      	ldr	r3, [r7, #12]
    e710:	7c1b      	ldrb	r3, [r3, #16]
    e712:	b2db      	uxtb	r3, r3
    e714:	2b00      	cmp	r3, #0
    e716:	d001      	beq.n	e71c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e718:	2301      	movs	r3, #1
    e71a:	e000      	b.n	e71e <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e71c:	2300      	movs	r3, #0
    e71e:	2b00      	cmp	r3, #0
    e720:	d000      	beq.n	e724 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e722:	e7ec      	b.n	e6fe <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e724:	4807      	ldr	r0, [pc, #28]	; (e744 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e726:	4b0a      	ldr	r3, [pc, #40]	; (e750 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e728:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e72a:	4905      	ldr	r1, [pc, #20]	; (e740 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e72c:	4805      	ldr	r0, [pc, #20]	; (e744 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e72e:	4b09      	ldr	r3, [pc, #36]	; (e754 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e730:	4798      	blx	r3
		return r;
    e732:	697b      	ldr	r3, [r7, #20]
    e734:	e000      	b.n	e738 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e736:	2300      	movs	r3, #0
	}
	

}
    e738:	4618      	mov	r0, r3
    e73a:	3718      	adds	r7, #24
    e73c:	46bd      	mov	sp, r7
    e73e:	bd80      	pop	{r7, pc}
    e740:	0000e325 	.word	0x0000e325
    e744:	200016a0 	.word	0x200016a0
    e748:	0000dffd 	.word	0x0000dffd
    e74c:	0000cb79 	.word	0x0000cb79
    e750:	0000ded5 	.word	0x0000ded5
    e754:	0000dfa5 	.word	0x0000dfa5

0000e758 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e758:	b580      	push	{r7, lr}
    e75a:	b086      	sub	sp, #24
    e75c:	af00      	add	r7, sp, #0
    e75e:	60f8      	str	r0, [r7, #12]
    e760:	60b9      	str	r1, [r7, #8]
    e762:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e764:	68fb      	ldr	r3, [r7, #12]
    e766:	2200      	movs	r2, #0
    e768:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e76a:	68fb      	ldr	r3, [r7, #12]
    e76c:	7c1b      	ldrb	r3, [r3, #16]
    e76e:	b2db      	uxtb	r3, r3
    e770:	2b00      	cmp	r3, #0
    e772:	d02a      	beq.n	e7ca <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e774:	687a      	ldr	r2, [r7, #4]
    e776:	4613      	mov	r3, r2
    e778:	009b      	lsls	r3, r3, #2
    e77a:	4413      	add	r3, r2
    e77c:	005b      	lsls	r3, r3, #1
    e77e:	461a      	mov	r2, r3
    e780:	4915      	ldr	r1, [pc, #84]	; (e7d8 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e782:	4816      	ldr	r0, [pc, #88]	; (e7dc <_ZN9CDC_Class5writeEPKhj+0x84>)
    e784:	4b16      	ldr	r3, [pc, #88]	; (e7e0 <_ZN9CDC_Class5writeEPKhj+0x88>)
    e786:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e788:	6879      	ldr	r1, [r7, #4]
    e78a:	68b8      	ldr	r0, [r7, #8]
    e78c:	4b15      	ldr	r3, [pc, #84]	; (e7e4 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e78e:	4798      	blx	r3
    e790:	4603      	mov	r3, r0
    e792:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e794:	68fb      	ldr	r3, [r7, #12]
    e796:	7d1b      	ldrb	r3, [r3, #20]
    e798:	b2db      	uxtb	r3, r3
    e79a:	f083 0301 	eor.w	r3, r3, #1
    e79e:	b2db      	uxtb	r3, r3
    e7a0:	2b00      	cmp	r3, #0
    e7a2:	d006      	beq.n	e7b2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e7a4:	68fb      	ldr	r3, [r7, #12]
    e7a6:	7c1b      	ldrb	r3, [r3, #16]
    e7a8:	b2db      	uxtb	r3, r3
    e7aa:	2b00      	cmp	r3, #0
    e7ac:	d001      	beq.n	e7b2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e7ae:	2301      	movs	r3, #1
    e7b0:	e000      	b.n	e7b4 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e7b2:	2300      	movs	r3, #0
    e7b4:	2b00      	cmp	r3, #0
    e7b6:	d000      	beq.n	e7ba <_ZN9CDC_Class5writeEPKhj+0x62>
    e7b8:	e7ec      	b.n	e794 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e7ba:	4808      	ldr	r0, [pc, #32]	; (e7dc <_ZN9CDC_Class5writeEPKhj+0x84>)
    e7bc:	4b0a      	ldr	r3, [pc, #40]	; (e7e8 <_ZN9CDC_Class5writeEPKhj+0x90>)
    e7be:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e7c0:	4905      	ldr	r1, [pc, #20]	; (e7d8 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e7c2:	4806      	ldr	r0, [pc, #24]	; (e7dc <_ZN9CDC_Class5writeEPKhj+0x84>)
    e7c4:	4b09      	ldr	r3, [pc, #36]	; (e7ec <_ZN9CDC_Class5writeEPKhj+0x94>)
    e7c6:	4798      	blx	r3
    e7c8:	e001      	b.n	e7ce <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e7ca:	2300      	movs	r3, #0
    e7cc:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e7ce:	697b      	ldr	r3, [r7, #20]
}
    e7d0:	4618      	mov	r0, r3
    e7d2:	3718      	adds	r7, #24
    e7d4:	46bd      	mov	sp, r7
    e7d6:	bd80      	pop	{r7, pc}
    e7d8:	0000e325 	.word	0x0000e325
    e7dc:	200016a0 	.word	0x200016a0
    e7e0:	0000dffd 	.word	0x0000dffd
    e7e4:	0000cb79 	.word	0x0000cb79
    e7e8:	0000ded5 	.word	0x0000ded5
    e7ec:	0000dfa5 	.word	0x0000dfa5

0000e7f0 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e7f0:	b480      	push	{r7}
    e7f2:	b083      	sub	sp, #12
    e7f4:	af00      	add	r7, sp, #0
    e7f6:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e7f8:	687b      	ldr	r3, [r7, #4]
    e7fa:	7d5b      	ldrb	r3, [r3, #21]
    e7fc:	b2db      	uxtb	r3, r3
    e7fe:	2b00      	cmp	r3, #0
    e800:	d006      	beq.n	e810 <_ZN9CDC_Class9availableEv+0x20>
    e802:	687b      	ldr	r3, [r7, #4]
    e804:	7d1b      	ldrb	r3, [r3, #20]
    e806:	b2db      	uxtb	r3, r3
    e808:	2b00      	cmp	r3, #0
    e80a:	d001      	beq.n	e810 <_ZN9CDC_Class9availableEv+0x20>
    e80c:	2301      	movs	r3, #1
    e80e:	e000      	b.n	e812 <_ZN9CDC_Class9availableEv+0x22>
    e810:	2300      	movs	r3, #0
    e812:	2b00      	cmp	r3, #0
    e814:	d001      	beq.n	e81a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e816:	2301      	movs	r3, #1
    e818:	e000      	b.n	e81c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e81a:	2300      	movs	r3, #0
	}
	
}
    e81c:	4618      	mov	r0, r3
    e81e:	370c      	adds	r7, #12
    e820:	46bd      	mov	sp, r7
    e822:	bc80      	pop	{r7}
    e824:	4770      	bx	lr
	...

0000e828 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e828:	b580      	push	{r7, lr}
    e82a:	b082      	sub	sp, #8
    e82c:	af00      	add	r7, sp, #0
    e82e:	6078      	str	r0, [r7, #4]
    e830:	6039      	str	r1, [r7, #0]
    e832:	687b      	ldr	r3, [r7, #4]
    e834:	2b01      	cmp	r3, #1
    e836:	d154      	bne.n	e8e2 <_Z41__static_initialization_and_destruction_0ii+0xba>
    e838:	683b      	ldr	r3, [r7, #0]
    e83a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e83e:	4293      	cmp	r3, r2
    e840:	d14f      	bne.n	e8e2 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e842:	492a      	ldr	r1, [pc, #168]	; (e8ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e844:	482a      	ldr	r0, [pc, #168]	; (e8f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e846:	4b2b      	ldr	r3, [pc, #172]	; (e8f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e848:	4798      	blx	r3
    e84a:	4a2b      	ldr	r2, [pc, #172]	; (e8f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e84c:	492b      	ldr	r1, [pc, #172]	; (e8fc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e84e:	4828      	ldr	r0, [pc, #160]	; (e8f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e850:	4b2b      	ldr	r3, [pc, #172]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e852:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e854:	492b      	ldr	r1, [pc, #172]	; (e904 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e856:	482c      	ldr	r0, [pc, #176]	; (e908 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e858:	4b26      	ldr	r3, [pc, #152]	; (e8f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e85a:	4798      	blx	r3
    e85c:	4a26      	ldr	r2, [pc, #152]	; (e8f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e85e:	4927      	ldr	r1, [pc, #156]	; (e8fc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e860:	4829      	ldr	r0, [pc, #164]	; (e908 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e862:	4b27      	ldr	r3, [pc, #156]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e864:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e866:	4929      	ldr	r1, [pc, #164]	; (e90c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e868:	4829      	ldr	r0, [pc, #164]	; (e910 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e86a:	4b22      	ldr	r3, [pc, #136]	; (e8f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e86c:	4798      	blx	r3
    e86e:	4a22      	ldr	r2, [pc, #136]	; (e8f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e870:	4922      	ldr	r1, [pc, #136]	; (e8fc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e872:	4827      	ldr	r0, [pc, #156]	; (e910 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e874:	4b22      	ldr	r3, [pc, #136]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e876:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e878:	4926      	ldr	r1, [pc, #152]	; (e914 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e87a:	4827      	ldr	r0, [pc, #156]	; (e918 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e87c:	4b1d      	ldr	r3, [pc, #116]	; (e8f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e87e:	4798      	blx	r3
    e880:	4a1d      	ldr	r2, [pc, #116]	; (e8f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e882:	491e      	ldr	r1, [pc, #120]	; (e8fc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e884:	4824      	ldr	r0, [pc, #144]	; (e918 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e886:	4b1e      	ldr	r3, [pc, #120]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e888:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e88a:	4924      	ldr	r1, [pc, #144]	; (e91c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e88c:	4824      	ldr	r0, [pc, #144]	; (e920 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e88e:	4b19      	ldr	r3, [pc, #100]	; (e8f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e890:	4798      	blx	r3
    e892:	4a19      	ldr	r2, [pc, #100]	; (e8f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e894:	4919      	ldr	r1, [pc, #100]	; (e8fc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e896:	4822      	ldr	r0, [pc, #136]	; (e920 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e898:	4b19      	ldr	r3, [pc, #100]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e89a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e89c:	4921      	ldr	r1, [pc, #132]	; (e924 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e89e:	4822      	ldr	r0, [pc, #136]	; (e928 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e8a0:	4b14      	ldr	r3, [pc, #80]	; (e8f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e8a2:	4798      	blx	r3
    e8a4:	4a14      	ldr	r2, [pc, #80]	; (e8f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e8a6:	4915      	ldr	r1, [pc, #84]	; (e8fc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e8a8:	481f      	ldr	r0, [pc, #124]	; (e928 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e8aa:	4b15      	ldr	r3, [pc, #84]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e8ac:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e8ae:	491f      	ldr	r1, [pc, #124]	; (e92c <_Z41__static_initialization_and_destruction_0ii+0x104>)
    e8b0:	481f      	ldr	r0, [pc, #124]	; (e930 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e8b2:	4b10      	ldr	r3, [pc, #64]	; (e8f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e8b4:	4798      	blx	r3
    e8b6:	4a10      	ldr	r2, [pc, #64]	; (e8f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e8b8:	4910      	ldr	r1, [pc, #64]	; (e8fc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e8ba:	481d      	ldr	r0, [pc, #116]	; (e930 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e8bc:	4b10      	ldr	r3, [pc, #64]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e8be:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e8c0:	491c      	ldr	r1, [pc, #112]	; (e934 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    e8c2:	481d      	ldr	r0, [pc, #116]	; (e938 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e8c4:	4b0b      	ldr	r3, [pc, #44]	; (e8f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e8c6:	4798      	blx	r3
    e8c8:	4a0b      	ldr	r2, [pc, #44]	; (e8f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e8ca:	490c      	ldr	r1, [pc, #48]	; (e8fc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e8cc:	481a      	ldr	r0, [pc, #104]	; (e938 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e8ce:	4b0c      	ldr	r3, [pc, #48]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e8d0:	4798      	blx	r3
    e8d2:	481a      	ldr	r0, [pc, #104]	; (e93c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e8d4:	4b1a      	ldr	r3, [pc, #104]	; (e940 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    e8d6:	4798      	blx	r3
    e8d8:	4a07      	ldr	r2, [pc, #28]	; (e8f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e8da:	491a      	ldr	r1, [pc, #104]	; (e944 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    e8dc:	4817      	ldr	r0, [pc, #92]	; (e93c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e8de:	4b08      	ldr	r3, [pc, #32]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e8e0:	4798      	blx	r3
    e8e2:	bf00      	nop
    e8e4:	3708      	adds	r7, #8
    e8e6:	46bd      	mov	sp, r7
    e8e8:	bd80      	pop	{r7, pc}
    e8ea:	bf00      	nop
    e8ec:	20009dc0 	.word	0x20009dc0
    e8f0:	20001600 	.word	0x20001600
    e8f4:	0000dd75 	.word	0x0000dd75
    e8f8:	20000000 	.word	0x20000000
    e8fc:	0000ddad 	.word	0x0000ddad
    e900:	000134a5 	.word	0x000134a5
    e904:	20009e54 	.word	0x20009e54
    e908:	20001620 	.word	0x20001620
    e90c:	20009f78 	.word	0x20009f78
    e910:	20001640 	.word	0x20001640
    e914:	20009e74 	.word	0x20009e74
    e918:	20001660 	.word	0x20001660
    e91c:	20009f38 	.word	0x20009f38
    e920:	20001680 	.word	0x20001680
    e924:	20009f58 	.word	0x20009f58
    e928:	200016a0 	.word	0x200016a0
    e92c:	20009e30 	.word	0x20009e30
    e930:	200016c0 	.word	0x200016c0
    e934:	20009ed0 	.word	0x20009ed0
    e938:	200016e0 	.word	0x200016e0
    e93c:	20001704 	.word	0x20001704
    e940:	0000e415 	.word	0x0000e415
    e944:	0000e45d 	.word	0x0000e45d

0000e948 <_GLOBAL__sub_I_ptrCDCClass>:
    e948:	b580      	push	{r7, lr}
    e94a:	af00      	add	r7, sp, #0
    e94c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e950:	2001      	movs	r0, #1
    e952:	4b01      	ldr	r3, [pc, #4]	; (e958 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e954:	4798      	blx	r3
    e956:	bd80      	pop	{r7, pc}
    e958:	0000e829 	.word	0x0000e829

0000e95c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    e95c:	b590      	push	{r4, r7, lr}
    e95e:	b083      	sub	sp, #12
    e960:	af00      	add	r7, sp, #0
    e962:	6078      	str	r0, [r7, #4]
    e964:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    e966:	683b      	ldr	r3, [r7, #0]
    e968:	2b00      	cmp	r3, #0
    e96a:	d101      	bne.n	e970 <_ZN5Print5writeEPKc+0x14>
    e96c:	2300      	movs	r3, #0
    e96e:	e00c      	b.n	e98a <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    e970:	687b      	ldr	r3, [r7, #4]
    e972:	681b      	ldr	r3, [r3, #0]
    e974:	3304      	adds	r3, #4
    e976:	681c      	ldr	r4, [r3, #0]
    e978:	6838      	ldr	r0, [r7, #0]
    e97a:	4b06      	ldr	r3, [pc, #24]	; (e994 <_ZN5Print5writeEPKc+0x38>)
    e97c:	4798      	blx	r3
    e97e:	4603      	mov	r3, r0
    e980:	461a      	mov	r2, r3
    e982:	6839      	ldr	r1, [r7, #0]
    e984:	6878      	ldr	r0, [r7, #4]
    e986:	47a0      	blx	r4
    e988:	4603      	mov	r3, r0
    }
    e98a:	4618      	mov	r0, r3
    e98c:	370c      	adds	r7, #12
    e98e:	46bd      	mov	sp, r7
    e990:	bd90      	pop	{r4, r7, pc}
    e992:	bf00      	nop
    e994:	00013c01 	.word	0x00013c01

0000e998 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e998:	b580      	push	{r7, lr}
    e99a:	b086      	sub	sp, #24
    e99c:	af00      	add	r7, sp, #0
    e99e:	60f8      	str	r0, [r7, #12]
    e9a0:	60b9      	str	r1, [r7, #8]
    e9a2:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e9a4:	2300      	movs	r3, #0
    e9a6:	617b      	str	r3, [r7, #20]
  while (size--) {
    e9a8:	687b      	ldr	r3, [r7, #4]
    e9aa:	1e5a      	subs	r2, r3, #1
    e9ac:	607a      	str	r2, [r7, #4]
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	bf14      	ite	ne
    e9b2:	2301      	movne	r3, #1
    e9b4:	2300      	moveq	r3, #0
    e9b6:	b2db      	uxtb	r3, r3
    e9b8:	2b00      	cmp	r3, #0
    e9ba:	d016      	beq.n	e9ea <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e9bc:	68fb      	ldr	r3, [r7, #12]
    e9be:	681b      	ldr	r3, [r3, #0]
    e9c0:	681a      	ldr	r2, [r3, #0]
    e9c2:	68bb      	ldr	r3, [r7, #8]
    e9c4:	1c59      	adds	r1, r3, #1
    e9c6:	60b9      	str	r1, [r7, #8]
    e9c8:	781b      	ldrb	r3, [r3, #0]
    e9ca:	4619      	mov	r1, r3
    e9cc:	68f8      	ldr	r0, [r7, #12]
    e9ce:	4790      	blx	r2
    e9d0:	4603      	mov	r3, r0
    e9d2:	2b00      	cmp	r3, #0
    e9d4:	bf14      	ite	ne
    e9d6:	2301      	movne	r3, #1
    e9d8:	2300      	moveq	r3, #0
    e9da:	b2db      	uxtb	r3, r3
    e9dc:	2b00      	cmp	r3, #0
    e9de:	d003      	beq.n	e9e8 <_ZN5Print5writeEPKhj+0x50>
    e9e0:	697b      	ldr	r3, [r7, #20]
    e9e2:	3301      	adds	r3, #1
    e9e4:	617b      	str	r3, [r7, #20]
  while (size--) {
    e9e6:	e7df      	b.n	e9a8 <_ZN5Print5writeEPKhj+0x10>
    else break;
    e9e8:	bf00      	nop
  }
  return n;
    e9ea:	697b      	ldr	r3, [r7, #20]
}
    e9ec:	4618      	mov	r0, r3
    e9ee:	3718      	adds	r7, #24
    e9f0:	46bd      	mov	sp, r7
    e9f2:	bd80      	pop	{r7, pc}

0000e9f4 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    e9f4:	b580      	push	{r7, lr}
    e9f6:	b082      	sub	sp, #8
    e9f8:	af00      	add	r7, sp, #0
    e9fa:	6078      	str	r0, [r7, #4]
    e9fc:	6039      	str	r1, [r7, #0]
  return write(str);
    e9fe:	6839      	ldr	r1, [r7, #0]
    ea00:	6878      	ldr	r0, [r7, #4]
    ea02:	4b03      	ldr	r3, [pc, #12]	; (ea10 <_ZN5Print5printEPKc+0x1c>)
    ea04:	4798      	blx	r3
    ea06:	4603      	mov	r3, r0
}
    ea08:	4618      	mov	r0, r3
    ea0a:	3708      	adds	r7, #8
    ea0c:	46bd      	mov	sp, r7
    ea0e:	bd80      	pop	{r7, pc}
    ea10:	0000e95d 	.word	0x0000e95d

0000ea14 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    ea14:	b480      	push	{r7}
    ea16:	b083      	sub	sp, #12
    ea18:	af00      	add	r7, sp, #0
    ea1a:	6078      	str	r0, [r7, #4]
    ea1c:	460b      	mov	r3, r1
    ea1e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    ea20:	78fb      	ldrb	r3, [r7, #3]
    ea22:	687a      	ldr	r2, [r7, #4]
    ea24:	01db      	lsls	r3, r3, #7
    ea26:	4413      	add	r3, r2
    ea28:	681b      	ldr	r3, [r3, #0]
}
    ea2a:	4618      	mov	r0, r3
    ea2c:	370c      	adds	r7, #12
    ea2e:	46bd      	mov	sp, r7
    ea30:	bc80      	pop	{r7}
    ea32:	4770      	bx	lr

0000ea34 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    ea34:	b480      	push	{r7}
    ea36:	b083      	sub	sp, #12
    ea38:	af00      	add	r7, sp, #0
    ea3a:	6078      	str	r0, [r7, #4]
    ea3c:	460b      	mov	r3, r1
    ea3e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    ea40:	78fb      	ldrb	r3, [r7, #3]
    ea42:	687a      	ldr	r2, [r7, #4]
    ea44:	01db      	lsls	r3, r3, #7
    ea46:	4413      	add	r3, r2
    ea48:	3310      	adds	r3, #16
    ea4a:	681b      	ldr	r3, [r3, #0]
}
    ea4c:	4618      	mov	r0, r3
    ea4e:	370c      	adds	r7, #12
    ea50:	46bd      	mov	sp, r7
    ea52:	bc80      	pop	{r7}
    ea54:	4770      	bx	lr

0000ea56 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    ea56:	b480      	push	{r7}
    ea58:	b083      	sub	sp, #12
    ea5a:	af00      	add	r7, sp, #0
    ea5c:	6078      	str	r0, [r7, #4]
    ea5e:	460b      	mov	r3, r1
    ea60:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    ea62:	78fb      	ldrb	r3, [r7, #3]
    ea64:	687a      	ldr	r2, [r7, #4]
    ea66:	01db      	lsls	r3, r3, #7
    ea68:	4413      	add	r3, r2
    ea6a:	3320      	adds	r3, #32
    ea6c:	681b      	ldr	r3, [r3, #0]
}
    ea6e:	4618      	mov	r0, r3
    ea70:	370c      	adds	r7, #12
    ea72:	46bd      	mov	sp, r7
    ea74:	bc80      	pop	{r7}
    ea76:	4770      	bx	lr

0000ea78 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    ea78:	b580      	push	{r7, lr}
    ea7a:	b086      	sub	sp, #24
    ea7c:	af00      	add	r7, sp, #0
    ea7e:	4603      	mov	r3, r0
    ea80:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    ea82:	f107 030c 	add.w	r3, r7, #12
    ea86:	4618      	mov	r0, r3
    ea88:	4b13      	ldr	r3, [pc, #76]	; (ead8 <_gpio_get_level+0x60>)
    ea8a:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    ea8c:	79fb      	ldrb	r3, [r7, #7]
    ea8e:	4619      	mov	r1, r3
    ea90:	4812      	ldr	r0, [pc, #72]	; (eadc <_gpio_get_level+0x64>)
    ea92:	4b13      	ldr	r3, [pc, #76]	; (eae0 <_gpio_get_level+0x68>)
    ea94:	4798      	blx	r3
    ea96:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    ea98:	79fb      	ldrb	r3, [r7, #7]
    ea9a:	4619      	mov	r1, r3
    ea9c:	480f      	ldr	r0, [pc, #60]	; (eadc <_gpio_get_level+0x64>)
    ea9e:	4b11      	ldr	r3, [pc, #68]	; (eae4 <_gpio_get_level+0x6c>)
    eaa0:	4798      	blx	r3
    eaa2:	4602      	mov	r2, r0
    eaa4:	697b      	ldr	r3, [r7, #20]
    eaa6:	43db      	mvns	r3, r3
    eaa8:	4013      	ands	r3, r2
    eaaa:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    eaac:	79fb      	ldrb	r3, [r7, #7]
    eaae:	4619      	mov	r1, r3
    eab0:	480a      	ldr	r0, [pc, #40]	; (eadc <_gpio_get_level+0x64>)
    eab2:	4b0d      	ldr	r3, [pc, #52]	; (eae8 <_gpio_get_level+0x70>)
    eab4:	4798      	blx	r3
    eab6:	4602      	mov	r2, r0
    eab8:	697b      	ldr	r3, [r7, #20]
    eaba:	4013      	ands	r3, r2
    eabc:	693a      	ldr	r2, [r7, #16]
    eabe:	4313      	orrs	r3, r2
    eac0:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    eac2:	f107 030c 	add.w	r3, r7, #12
    eac6:	4618      	mov	r0, r3
    eac8:	4b08      	ldr	r3, [pc, #32]	; (eaec <_gpio_get_level+0x74>)
    eaca:	4798      	blx	r3

	return tmp;
    eacc:	693b      	ldr	r3, [r7, #16]
}
    eace:	4618      	mov	r0, r3
    ead0:	3718      	adds	r7, #24
    ead2:	46bd      	mov	sp, r7
    ead4:	bd80      	pop	{r7, pc}
    ead6:	bf00      	nop
    ead8:	0000bd55 	.word	0x0000bd55
    eadc:	41008000 	.word	0x41008000
    eae0:	0000ea15 	.word	0x0000ea15
    eae4:	0000ea57 	.word	0x0000ea57
    eae8:	0000ea35 	.word	0x0000ea35
    eaec:	0000bd7b 	.word	0x0000bd7b

0000eaf0 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    eaf0:	b580      	push	{r7, lr}
    eaf2:	b082      	sub	sp, #8
    eaf4:	af00      	add	r7, sp, #0
    eaf6:	4603      	mov	r3, r0
    eaf8:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    eafa:	79fb      	ldrb	r3, [r7, #7]
    eafc:	115b      	asrs	r3, r3, #5
    eafe:	b2db      	uxtb	r3, r3
    eb00:	4618      	mov	r0, r3
    eb02:	4b09      	ldr	r3, [pc, #36]	; (eb28 <gpio_get_pin_level+0x38>)
    eb04:	4798      	blx	r3
    eb06:	4601      	mov	r1, r0
    eb08:	79fb      	ldrb	r3, [r7, #7]
    eb0a:	f003 031f 	and.w	r3, r3, #31
    eb0e:	2201      	movs	r2, #1
    eb10:	fa02 f303 	lsl.w	r3, r2, r3
    eb14:	400b      	ands	r3, r1
    eb16:	2b00      	cmp	r3, #0
    eb18:	bf14      	ite	ne
    eb1a:	2301      	movne	r3, #1
    eb1c:	2300      	moveq	r3, #0
    eb1e:	b2db      	uxtb	r3, r3
}
    eb20:	4618      	mov	r0, r3
    eb22:	3708      	adds	r7, #8
    eb24:	46bd      	mov	sp, r7
    eb26:	bd80      	pop	{r7, pc}
    eb28:	0000ea79 	.word	0x0000ea79

0000eb2c <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    eb2c:	b480      	push	{r7}
    eb2e:	b083      	sub	sp, #12
    eb30:	af00      	add	r7, sp, #0
    eb32:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    eb34:	4b06      	ldr	r3, [pc, #24]	; (eb50 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    eb36:	681b      	ldr	r3, [r3, #0]
    eb38:	2201      	movs	r2, #1
    eb3a:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    eb3c:	4b04      	ldr	r3, [pc, #16]	; (eb50 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    eb3e:	681b      	ldr	r3, [r3, #0]
    eb40:	2200      	movs	r2, #0
    eb42:	705a      	strb	r2, [r3, #1]
}
    eb44:	bf00      	nop
    eb46:	370c      	adds	r7, #12
    eb48:	46bd      	mov	sp, r7
    eb4a:	bc80      	pop	{r7}
    eb4c:	4770      	bx	lr
    eb4e:	bf00      	nop
    eb50:	20001864 	.word	0x20001864

0000eb54 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    eb54:	b580      	push	{r7, lr}
    eb56:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    eb58:	2040      	movs	r0, #64	; 0x40
    eb5a:	4b0a      	ldr	r3, [pc, #40]	; (eb84 <_ZL10USBPluggedv+0x30>)
    eb5c:	4798      	blx	r3
    eb5e:	4603      	mov	r3, r0
    eb60:	2b00      	cmp	r3, #0
    eb62:	d004      	beq.n	eb6e <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    eb64:	4b08      	ldr	r3, [pc, #32]	; (eb88 <_ZL10USBPluggedv+0x34>)
    eb66:	681b      	ldr	r3, [r3, #0]
    eb68:	2201      	movs	r2, #1
    eb6a:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    eb6c:	e007      	b.n	eb7e <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    eb6e:	4b06      	ldr	r3, [pc, #24]	; (eb88 <_ZL10USBPluggedv+0x34>)
    eb70:	681b      	ldr	r3, [r3, #0]
    eb72:	2200      	movs	r2, #0
    eb74:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    eb76:	4b04      	ldr	r3, [pc, #16]	; (eb88 <_ZL10USBPluggedv+0x34>)
    eb78:	681b      	ldr	r3, [r3, #0]
    eb7a:	2200      	movs	r2, #0
    eb7c:	701a      	strb	r2, [r3, #0]
}
    eb7e:	bf00      	nop
    eb80:	bd80      	pop	{r7, pc}
    eb82:	bf00      	nop
    eb84:	0000eaf1 	.word	0x0000eaf1
    eb88:	20001864 	.word	0x20001864

0000eb8c <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    eb8c:	b480      	push	{r7}
    eb8e:	b083      	sub	sp, #12
    eb90:	af00      	add	r7, sp, #0
    eb92:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    eb94:	4a04      	ldr	r2, [pc, #16]	; (eba8 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    eb96:	687b      	ldr	r3, [r7, #4]
    eb98:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    eb9a:	687b      	ldr	r3, [r7, #4]
    eb9c:	4618      	mov	r0, r3
    eb9e:	370c      	adds	r7, #12
    eba0:	46bd      	mov	sp, r7
    eba2:	bc80      	pop	{r7}
    eba4:	4770      	bx	lr
    eba6:	bf00      	nop
    eba8:	20001864 	.word	0x20001864

0000ebac <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    ebac:	b480      	push	{r7}
    ebae:	b083      	sub	sp, #12
    ebb0:	af00      	add	r7, sp, #0
    ebb2:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    ebb4:	687b      	ldr	r3, [r7, #4]
    ebb6:	4618      	mov	r0, r3
    ebb8:	370c      	adds	r7, #12
    ebba:	46bd      	mov	sp, r7
    ebbc:	bc80      	pop	{r7}
    ebbe:	4770      	bx	lr

0000ebc0 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    ebc0:	b580      	push	{r7, lr}
    ebc2:	b082      	sub	sp, #8
    ebc4:	af00      	add	r7, sp, #0
    ebc6:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    ebc8:	491e      	ldr	r1, [pc, #120]	; (ec44 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    ebca:	2040      	movs	r0, #64	; 0x40
    ebcc:	4b1e      	ldr	r3, [pc, #120]	; (ec48 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    ebce:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    ebd0:	481e      	ldr	r0, [pc, #120]	; (ec4c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    ebd2:	4b1f      	ldr	r3, [pc, #124]	; (ec50 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    ebd4:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    ebd6:	2040      	movs	r0, #64	; 0x40
    ebd8:	4b1e      	ldr	r3, [pc, #120]	; (ec54 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    ebda:	4798      	blx	r3
    ebdc:	4603      	mov	r3, r0
    ebde:	461a      	mov	r2, r3
    ebe0:	687b      	ldr	r3, [r7, #4]
    ebe2:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    ebe4:	687b      	ldr	r3, [r7, #4]
    ebe6:	78db      	ldrb	r3, [r3, #3]
    ebe8:	2b00      	cmp	r3, #0
    ebea:	d021      	beq.n	ec30 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    ebec:	687b      	ldr	r3, [r7, #4]
    ebee:	2200      	movs	r2, #0
    ebf0:	709a      	strb	r2, [r3, #2]
			plugged=true;
    ebf2:	687b      	ldr	r3, [r7, #4]
    ebf4:	2201      	movs	r2, #1
    ebf6:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    ebf8:	f44f 7216 	mov.w	r2, #600	; 0x258
    ebfc:	4916      	ldr	r1, [pc, #88]	; (ec58 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    ebfe:	4813      	ldr	r0, [pc, #76]	; (ec4c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    ec00:	4b16      	ldr	r3, [pc, #88]	; (ec5c <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    ec02:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    ec04:	4816      	ldr	r0, [pc, #88]	; (ec60 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    ec06:	4b17      	ldr	r3, [pc, #92]	; (ec64 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    ec08:	4798      	blx	r3
    ec0a:	4603      	mov	r3, r0
    ec0c:	f083 0301 	eor.w	r3, r3, #1
    ec10:	b2db      	uxtb	r3, r3
    ec12:	2b00      	cmp	r3, #0
    ec14:	d008      	beq.n	ec28 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    ec16:	687b      	ldr	r3, [r7, #4]
    ec18:	789b      	ldrb	r3, [r3, #2]
    ec1a:	b2db      	uxtb	r3, r3
    ec1c:	2b00      	cmp	r3, #0
    ec1e:	d0f1      	beq.n	ec04 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    ec20:	687b      	ldr	r3, [r7, #4]
    ec22:	2200      	movs	r2, #0
    ec24:	701a      	strb	r2, [r3, #0]
					return;
    ec26:	e009      	b.n	ec3c <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    ec28:	4808      	ldr	r0, [pc, #32]	; (ec4c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    ec2a:	4b0f      	ldr	r3, [pc, #60]	; (ec68 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    ec2c:	4798      	blx	r3
    ec2e:	e005      	b.n	ec3c <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    ec30:	687b      	ldr	r3, [r7, #4]
    ec32:	2200      	movs	r2, #0
    ec34:	701a      	strb	r2, [r3, #0]
			plugged=false;
    ec36:	687b      	ldr	r3, [r7, #4]
    ec38:	2200      	movs	r2, #0
    ec3a:	705a      	strb	r2, [r3, #1]
		}
		
}
    ec3c:	3708      	adds	r7, #8
    ec3e:	46bd      	mov	sp, r7
    ec40:	bd80      	pop	{r7, pc}
    ec42:	bf00      	nop
    ec44:	0000eb55 	.word	0x0000eb55
    ec48:	00002b15 	.word	0x00002b15
    ec4c:	20001804 	.word	0x20001804
    ec50:	0000de61 	.word	0x0000de61
    ec54:	0000eaf1 	.word	0x0000eaf1
    ec58:	0000eb2d 	.word	0x0000eb2d
    ec5c:	0000dffd 	.word	0x0000dffd
    ec60:	20001704 	.word	0x20001704
    ec64:	0000e4cd 	.word	0x0000e4cd
    ec68:	0000ded5 	.word	0x0000ded5

0000ec6c <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    ec6c:	b580      	push	{r7, lr}
    ec6e:	b082      	sub	sp, #8
    ec70:	af00      	add	r7, sp, #0
    ec72:	6078      	str	r0, [r7, #4]
    ec74:	6039      	str	r1, [r7, #0]
    ec76:	687b      	ldr	r3, [r7, #4]
    ec78:	2b01      	cmp	r3, #1
    ec7a:	d14c      	bne.n	ed16 <_Z41__static_initialization_and_destruction_0ii+0xaa>
    ec7c:	683b      	ldr	r3, [r7, #0]
    ec7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ec82:	4293      	cmp	r3, r2
    ec84:	d147      	bne.n	ed16 <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    ec86:	4926      	ldr	r1, [pc, #152]	; (ed20 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ec88:	4826      	ldr	r0, [pc, #152]	; (ed24 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ec8a:	4b27      	ldr	r3, [pc, #156]	; (ed28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ec8c:	4798      	blx	r3
    ec8e:	4a27      	ldr	r2, [pc, #156]	; (ed2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ec90:	4927      	ldr	r1, [pc, #156]	; (ed30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ec92:	4824      	ldr	r0, [pc, #144]	; (ed24 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ec94:	4b27      	ldr	r3, [pc, #156]	; (ed34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ec96:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    ec98:	4927      	ldr	r1, [pc, #156]	; (ed38 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ec9a:	4828      	ldr	r0, [pc, #160]	; (ed3c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ec9c:	4b22      	ldr	r3, [pc, #136]	; (ed28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ec9e:	4798      	blx	r3
    eca0:	4a22      	ldr	r2, [pc, #136]	; (ed2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eca2:	4923      	ldr	r1, [pc, #140]	; (ed30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eca4:	4825      	ldr	r0, [pc, #148]	; (ed3c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    eca6:	4b23      	ldr	r3, [pc, #140]	; (ed34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eca8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    ecaa:	4925      	ldr	r1, [pc, #148]	; (ed40 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ecac:	4825      	ldr	r0, [pc, #148]	; (ed44 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ecae:	4b1e      	ldr	r3, [pc, #120]	; (ed28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ecb0:	4798      	blx	r3
    ecb2:	4a1e      	ldr	r2, [pc, #120]	; (ed2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ecb4:	491e      	ldr	r1, [pc, #120]	; (ed30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ecb6:	4823      	ldr	r0, [pc, #140]	; (ed44 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ecb8:	4b1e      	ldr	r3, [pc, #120]	; (ed34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ecba:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    ecbc:	4922      	ldr	r1, [pc, #136]	; (ed48 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    ecbe:	4823      	ldr	r0, [pc, #140]	; (ed4c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ecc0:	4b19      	ldr	r3, [pc, #100]	; (ed28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ecc2:	4798      	blx	r3
    ecc4:	4a19      	ldr	r2, [pc, #100]	; (ed2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ecc6:	491a      	ldr	r1, [pc, #104]	; (ed30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ecc8:	4820      	ldr	r0, [pc, #128]	; (ed4c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ecca:	4b1a      	ldr	r3, [pc, #104]	; (ed34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eccc:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    ecce:	4920      	ldr	r1, [pc, #128]	; (ed50 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    ecd0:	4820      	ldr	r0, [pc, #128]	; (ed54 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ecd2:	4b15      	ldr	r3, [pc, #84]	; (ed28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ecd4:	4798      	blx	r3
    ecd6:	4a15      	ldr	r2, [pc, #84]	; (ed2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ecd8:	4915      	ldr	r1, [pc, #84]	; (ed30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ecda:	481e      	ldr	r0, [pc, #120]	; (ed54 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ecdc:	4b15      	ldr	r3, [pc, #84]	; (ed34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ecde:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    ece0:	491d      	ldr	r1, [pc, #116]	; (ed58 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    ece2:	481e      	ldr	r0, [pc, #120]	; (ed5c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ece4:	4b10      	ldr	r3, [pc, #64]	; (ed28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ece6:	4798      	blx	r3
    ece8:	4a10      	ldr	r2, [pc, #64]	; (ed2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ecea:	4911      	ldr	r1, [pc, #68]	; (ed30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ecec:	481b      	ldr	r0, [pc, #108]	; (ed5c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ecee:	4b11      	ldr	r3, [pc, #68]	; (ed34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ecf0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    ecf2:	491b      	ldr	r1, [pc, #108]	; (ed60 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    ecf4:	481b      	ldr	r0, [pc, #108]	; (ed64 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ecf6:	4b0c      	ldr	r3, [pc, #48]	; (ed28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ecf8:	4798      	blx	r3
    ecfa:	4a0c      	ldr	r2, [pc, #48]	; (ed2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ecfc:	490c      	ldr	r1, [pc, #48]	; (ed30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ecfe:	4819      	ldr	r0, [pc, #100]	; (ed64 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ed00:	4b0c      	ldr	r3, [pc, #48]	; (ed34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ed02:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    ed04:	4918      	ldr	r1, [pc, #96]	; (ed68 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    ed06:	4819      	ldr	r0, [pc, #100]	; (ed6c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ed08:	4b07      	ldr	r3, [pc, #28]	; (ed28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ed0a:	4798      	blx	r3
    ed0c:	4a07      	ldr	r2, [pc, #28]	; (ed2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ed0e:	4908      	ldr	r1, [pc, #32]	; (ed30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ed10:	4816      	ldr	r0, [pc, #88]	; (ed6c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ed12:	4b08      	ldr	r3, [pc, #32]	; (ed34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ed14:	4798      	blx	r3
    ed16:	bf00      	nop
    ed18:	3708      	adds	r7, #8
    ed1a:	46bd      	mov	sp, r7
    ed1c:	bd80      	pop	{r7, pc}
    ed1e:	bf00      	nop
    ed20:	20009dc0 	.word	0x20009dc0
    ed24:	20001764 	.word	0x20001764
    ed28:	0000dd75 	.word	0x0000dd75
    ed2c:	20000000 	.word	0x20000000
    ed30:	0000ddad 	.word	0x0000ddad
    ed34:	000134a5 	.word	0x000134a5
    ed38:	20009e54 	.word	0x20009e54
    ed3c:	20001784 	.word	0x20001784
    ed40:	20009f78 	.word	0x20009f78
    ed44:	200017a4 	.word	0x200017a4
    ed48:	20009e74 	.word	0x20009e74
    ed4c:	200017c4 	.word	0x200017c4
    ed50:	20009f38 	.word	0x20009f38
    ed54:	200017e4 	.word	0x200017e4
    ed58:	20009f58 	.word	0x20009f58
    ed5c:	20001804 	.word	0x20001804
    ed60:	20009e30 	.word	0x20009e30
    ed64:	20001824 	.word	0x20001824
    ed68:	20009ed0 	.word	0x20009ed0
    ed6c:	20001844 	.word	0x20001844

0000ed70 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    ed70:	b580      	push	{r7, lr}
    ed72:	af00      	add	r7, sp, #0
    ed74:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ed78:	2001      	movs	r0, #1
    ed7a:	4b01      	ldr	r3, [pc, #4]	; (ed80 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    ed7c:	4798      	blx	r3
    ed7e:	bd80      	pop	{r7, pc}
    ed80:	0000ec6d 	.word	0x0000ec6d

0000ed84 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    ed84:	b480      	push	{r7}
    ed86:	b083      	sub	sp, #12
    ed88:	af00      	add	r7, sp, #0
    ed8a:	6078      	str	r0, [r7, #4]
    return (void *)0;
    ed8c:	2300      	movs	r3, #0
	}
    ed8e:	4618      	mov	r0, r3
    ed90:	370c      	adds	r7, #12
    ed92:	46bd      	mov	sp, r7
    ed94:	bc80      	pop	{r7}
    ed96:	4770      	bx	lr

0000ed98 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    ed98:	b480      	push	{r7}
    ed9a:	af00      	add	r7, sp, #0
		}
    ed9c:	bf00      	nop
    ed9e:	46bd      	mov	sp, r7
    eda0:	bc80      	pop	{r7}
    eda2:	4770      	bx	lr

0000eda4 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
    eda4:	4770      	bx	lr

0000eda6 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
    eda6:	4770      	bx	lr

0000eda8 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
    eda8:	1f0b      	subs	r3, r1, #4
    edaa:	300c      	adds	r0, #12
    edac:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
    edae:	f853 2f04 	ldr.w	r2, [r3, #4]!
    edb2:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    edb6:	428b      	cmp	r3, r1
    edb8:	d1f9      	bne.n	edae <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
    edba:	2000      	movs	r0, #0
    edbc:	4770      	bx	lr
	...

0000edc0 <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
    edc0:	b510      	push	{r4, lr}
    edc2:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
    edc4:	68c0      	ldr	r0, [r0, #12]
    edc6:	4b0a      	ldr	r3, [pc, #40]	; (edf0 <_ZN19CondesatorFan_Class10ReadStatusEv+0x30>)
    edc8:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
    edca:	f3c0 1200 	ubfx	r2, r0, #4, #1
    edce:	78e3      	ldrb	r3, [r4, #3]
    edd0:	f362 0382 	bfi	r3, r2, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
    edd4:	f3c0 1240 	ubfx	r2, r0, #5, #1
    edd8:	f362 0341 	bfi	r3, r2, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
    eddc:	f3c0 1280 	ubfx	r2, r0, #6, #1
    ede0:	f362 0300 	bfi	r3, r2, #0, #1
    ede4:	70e3      	strb	r3, [r4, #3]
	faults=r&(0x07<<(4));
    ede6:	f000 0070 	and.w	r0, r0, #112	; 0x70
    edea:	7120      	strb	r0, [r4, #4]
	return faults;
}
    edec:	bd10      	pop	{r4, pc}
    edee:	bf00      	nop
    edf0:	00011bc9 	.word	0x00011bc9

0000edf4 <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
    edf4:	b510      	push	{r4, lr}
    edf6:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,!state);
    edf8:	f081 0201 	eor.w	r2, r1, #1
    edfc:	2100      	movs	r1, #0
    edfe:	68c0      	ldr	r0, [r0, #12]
    ee00:	4b01      	ldr	r3, [pc, #4]	; (ee08 <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
    ee02:	4798      	blx	r3
    ee04:	7060      	strb	r0, [r4, #1]
	
	return uint8_t(enabled);
}
    ee06:	bd10      	pop	{r4, pc}
    ee08:	00011e81 	.word	0x00011e81

0000ee0c <_ZN19CondesatorFan_Class6SetPWMEh>:
	enabled=(value&0x01);
	return enabled;
}


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
    ee0c:	b510      	push	{r4, lr}
    ee0e:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
    ee10:	6a40      	ldr	r0, [r0, #36]	; 0x24
    ee12:	4b02      	ldr	r3, [pc, #8]	; (ee1c <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
    ee14:	4798      	blx	r3
    ee16:	7160      	strb	r0, [r4, #5]
	return pwmValue;
}
    ee18:	bd10      	pop	{r4, pc}
    ee1a:	bf00      	nop
    ee1c:	00011c4d 	.word	0x00011c4d

0000ee20 <_ZN19CondesatorFan_Class8SelfTestEv>:

bool CondesatorFan_Class::SelfTest(void){
    ee20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee24:	4605      	mov	r5, r0
		bool result;
		SetEnable(false);
    ee26:	2100      	movs	r1, #0
    ee28:	4c0f      	ldr	r4, [pc, #60]	; (ee68 <_ZN19CondesatorFan_Class8SelfTestEv+0x48>)
    ee2a:	47a0      	blx	r4
		SetPWM(0xff);
    ee2c:	21ff      	movs	r1, #255	; 0xff
    ee2e:	4628      	mov	r0, r5
    ee30:	4b0e      	ldr	r3, [pc, #56]	; (ee6c <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
    ee32:	4798      	blx	r3
		SetEnable(true);
    ee34:	2101      	movs	r1, #1
    ee36:	4628      	mov	r0, r5
    ee38:	47a0      	blx	r4
    ee3a:	24ff      	movs	r4, #255	; 0xff
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
		{
			SetPWM(i);
    ee3c:	4f0b      	ldr	r7, [pc, #44]	; (ee6c <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
			delay_us(10);
    ee3e:	f04f 080a 	mov.w	r8, #10
    ee42:	4e0b      	ldr	r6, [pc, #44]	; (ee70 <_ZN19CondesatorFan_Class8SelfTestEv+0x50>)
			SetPWM(i);
    ee44:	4621      	mov	r1, r4
    ee46:	4628      	mov	r0, r5
    ee48:	47b8      	blx	r7
			delay_us(10);
    ee4a:	4640      	mov	r0, r8
    ee4c:	47b0      	blx	r6
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
    ee4e:	3c01      	subs	r4, #1
    ee50:	b2e4      	uxtb	r4, r4
    ee52:	2c10      	cmp	r4, #16
    ee54:	d1f6      	bne.n	ee44 <_ZN19CondesatorFan_Class8SelfTestEv+0x24>
		}

		ReadStatus();
    ee56:	4628      	mov	r0, r5
    ee58:	4b06      	ldr	r3, [pc, #24]	; (ee74 <_ZN19CondesatorFan_Class8SelfTestEv+0x54>)
    ee5a:	4798      	blx	r3
// 		delay_ms(6*1000);
// 		SetEnable(false);
		result=condesatorStatus.niAlcCdsFanExtFault;
    ee5c:	78e8      	ldrb	r0, [r5, #3]
		return result;
    ee5e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ee62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee66:	bf00      	nop
    ee68:	0000edf5 	.word	0x0000edf5
    ee6c:	0000ee0d 	.word	0x0000ee0d
    ee70:	00002a4d 	.word	0x00002a4d
    ee74:	0000edc1 	.word	0x0000edc1

0000ee78 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
    ee78:	b510      	push	{r4, lr}
    ee7a:	4604      	mov	r4, r0
	i2c=i2cClass;
    ee7c:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
    ee7e:	7a4b      	ldrb	r3, [r1, #9]
    ee80:	b90b      	cbnz	r3, ee86 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
    ee82:	78a0      	ldrb	r0, [r4, #2]
    ee84:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
    ee86:	4611      	mov	r1, r2
    ee88:	4b04      	ldr	r3, [pc, #16]	; (ee9c <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
    ee8a:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
    ee8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ee8e:	4b04      	ldr	r3, [pc, #16]	; (eea0 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x28>)
    ee90:	4798      	blx	r3
		isOK=SelfTest();
    ee92:	4620      	mov	r0, r4
    ee94:	4b03      	ldr	r3, [pc, #12]	; (eea4 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x2c>)
    ee96:	4798      	blx	r3
    ee98:	70a0      	strb	r0, [r4, #2]
    ee9a:	e7f2      	b.n	ee82 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
    ee9c:	0000eda9 	.word	0x0000eda9
    eea0:	00011d41 	.word	0x00011d41
    eea4:	0000ee21 	.word	0x0000ee21

0000eea8 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
    eea8:	b510      	push	{r4, lr}
    eeaa:	4604      	mov	r4, r0
    eeac:	302c      	adds	r0, #44	; 0x2c
    eeae:	4b03      	ldr	r3, [pc, #12]	; (eebc <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
    eeb0:	4798      	blx	r3
    eeb2:	4620      	mov	r0, r4
    eeb4:	4b02      	ldr	r3, [pc, #8]	; (eec0 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
    eeb6:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
    eeb8:	4620      	mov	r0, r4
    eeba:	bd10      	pop	{r4, pc}
    eebc:	0000eda7 	.word	0x0000eda7
    eec0:	0000f0f1 	.word	0x0000f0f1

0000eec4 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    eec4:	b570      	push	{r4, r5, r6, lr}
    eec6:	4c05      	ldr	r4, [pc, #20]	; (eedc <__tcf_1+0x18>)
    eec8:	4e05      	ldr	r6, [pc, #20]	; (eee0 <__tcf_1+0x1c>)
    eeca:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
    eece:	3c1c      	subs	r4, #28
    eed0:	4620      	mov	r0, r4
    eed2:	47b0      	blx	r6
    eed4:	42ac      	cmp	r4, r5
    eed6:	d1fa      	bne.n	eece <__tcf_1+0xa>
    eed8:	bd70      	pop	{r4, r5, r6, pc}
    eeda:	bf00      	nop
    eedc:	2000192c 	.word	0x2000192c
    eee0:	00011acf 	.word	0x00011acf

0000eee4 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
    eee4:	b510      	push	{r4, lr}
    eee6:	4803      	ldr	r0, [pc, #12]	; (eef4 <__tcf_0+0x10>)
    eee8:	4c03      	ldr	r4, [pc, #12]	; (eef8 <__tcf_0+0x14>)
    eeea:	47a0      	blx	r4
    eeec:	4803      	ldr	r0, [pc, #12]	; (eefc <__tcf_0+0x18>)
    eeee:	47a0      	blx	r4
    eef0:	bd10      	pop	{r4, pc}
    eef2:	bf00      	nop
    eef4:	20001958 	.word	0x20001958
    eef8:	0000f0f1 	.word	0x0000f0f1
    eefc:	2000192c 	.word	0x2000192c

0000ef00 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
    ef00:	b510      	push	{r4, lr}
    ef02:	4604      	mov	r4, r0
    ef04:	4b0d      	ldr	r3, [pc, #52]	; (ef3c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
    ef06:	4798      	blx	r3
    ef08:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ef0c:	4b0c      	ldr	r3, [pc, #48]	; (ef40 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
    ef0e:	4798      	blx	r3
	i2c=&i2cSharedStatic;
    ef10:	4b0c      	ldr	r3, [pc, #48]	; (ef44 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
    ef12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
    ef16:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
    ef1a:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
    ef1e:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
    ef20:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
    ef24:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
    ef26:	f503 729a 	add.w	r2, r3, #308	; 0x134
    ef2a:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
    ef2c:	f8c3 4160 	str.w	r4, [r3, #352]	; 0x160
	somethingChanged=false;
    ef30:	2300      	movs	r3, #0
    ef32:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
    ef36:	4620      	mov	r0, r4
    ef38:	bd10      	pop	{r4, pc}
    ef3a:	bf00      	nop
    ef3c:	0000f0d9 	.word	0x0000f0d9
    ef40:	0000eda5 	.word	0x0000eda5
    ef44:	20001868 	.word	0x20001868

0000ef48 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
    ef48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef4c:	4606      	mov	r6, r0
    ef4e:	4c0c      	ldr	r4, [pc, #48]	; (ef80 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
    ef50:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    ef54:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
    ef56:	f8df 802c 	ldr.w	r8, [pc, #44]	; ef84 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
    ef5a:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
    ef5e:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
    ef62:	f045 0120 	orr.w	r1, r5, #32
    ef66:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
    ef6a:	b2c9      	uxtb	r1, r1
    ef6c:	4620      	mov	r0, r4
    ef6e:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    ef70:	3501      	adds	r5, #1
    ef72:	341c      	adds	r4, #28
    ef74:	2d07      	cmp	r5, #7
    ef76:	d1f0      	bne.n	ef5a <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
    ef78:	2000      	movs	r0, #0
    ef7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef7e:	bf00      	nop
    ef80:	20001868 	.word	0x20001868
    ef84:	00011ae3 	.word	0x00011ae3

0000ef88 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
    ef88:	b570      	push	{r4, r5, r6, lr}
    ef8a:	4604      	mov	r4, r0
	i2c->Init();
    ef8c:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    ef90:	4b17      	ldr	r3, [pc, #92]	; (eff0 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
    ef92:	4798      	blx	r3
	if (i2c->isOK)
    ef94:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    ef98:	7a5b      	ldrb	r3, [r3, #9]
    ef9a:	b943      	cbnz	r3, efae <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
    ef9c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    efa0:	7a5b      	ldrb	r3, [r3, #9]
    efa2:	b2db      	uxtb	r3, r3
    efa4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	return isOK;
    efa8:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
    efac:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
    efae:	4620      	mov	r0, r4
    efb0:	4b10      	ldr	r3, [pc, #64]	; (eff4 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
    efb2:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
    efb4:	f104 0568 	add.w	r5, r4, #104	; 0x68
    efb8:	462b      	mov	r3, r5
    efba:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    efbe:	2100      	movs	r1, #0
    efc0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    efc2:	4e0d      	ldr	r6, [pc, #52]	; (eff8 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
    efc4:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
    efc6:	462b      	mov	r3, r5
    efc8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    efcc:	2101      	movs	r1, #1
    efce:	6e20      	ldr	r0, [r4, #96]	; 0x60
    efd0:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
    efd2:	462a      	mov	r2, r5
    efd4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    efd8:	6e60      	ldr	r0, [r4, #100]	; 0x64
    efda:	4b08      	ldr	r3, [pc, #32]	; (effc <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
    efdc:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
    efde:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    efe0:	6e22      	ldr	r2, [r4, #96]	; 0x60
    efe2:	791b      	ldrb	r3, [r3, #4]
    efe4:	7912      	ldrb	r2, [r2, #4]
    efe6:	4013      	ands	r3, r2
    efe8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    efec:	e7d6      	b.n	ef9c <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
    efee:	bf00      	nop
    eff0:	0000dc49 	.word	0x0000dc49
    eff4:	0000ef49 	.word	0x0000ef49
    eff8:	0000f1fd 	.word	0x0000f1fd
    effc:	0000ee79 	.word	0x0000ee79

0000f000 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh>:
void EvaporatorAndCondesatorFans_Class::GetGPIOSValues(uint8_t * gpios){
    f000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f002:	f100 0468 	add.w	r4, r0, #104	; 0x68
    f006:	1e4d      	subs	r5, r1, #1
    f008:	f100 0684 	add.w	r6, r0, #132	; 0x84
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
	{
		gpios[i]=expanders[i]->ReadGPIORegister();
    f00c:	4f04      	ldr	r7, [pc, #16]	; (f020 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0x20>)
    f00e:	f854 0b04 	ldr.w	r0, [r4], #4
    f012:	47b8      	blx	r7
    f014:	f805 0f01 	strb.w	r0, [r5, #1]!
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    f018:	42b4      	cmp	r4, r6
    f01a:	d1f8      	bne.n	f00e <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0xe>
	}
	

}
    f01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f01e:	bf00      	nop
    f020:	00011bc9 	.word	0x00011bc9

0000f024 <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
    f024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_FANS);
    f028:	4c1c      	ldr	r4, [pc, #112]	; (f09c <_GLOBAL__sub_I_ptrFansClass+0x78>)
    f02a:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    f02e:	491c      	ldr	r1, [pc, #112]	; (f0a0 <_GLOBAL__sub_I_ptrFansClass+0x7c>)
    f030:	4628      	mov	r0, r5
    f032:	4b1c      	ldr	r3, [pc, #112]	; (f0a4 <_GLOBAL__sub_I_ptrFansClass+0x80>)
    f034:	4798      	blx	r3
    f036:	4f1c      	ldr	r7, [pc, #112]	; (f0a8 <_GLOBAL__sub_I_ptrFansClass+0x84>)
    f038:	463a      	mov	r2, r7
    f03a:	491c      	ldr	r1, [pc, #112]	; (f0ac <_GLOBAL__sub_I_ptrFansClass+0x88>)
    f03c:	4628      	mov	r0, r5
    f03e:	4e1c      	ldr	r6, [pc, #112]	; (f0b0 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    f040:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
    f042:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    f046:	4628      	mov	r0, r5
    f048:	f8df 8088 	ldr.w	r8, [pc, #136]	; f0d4 <_GLOBAL__sub_I_ptrFansClass+0xb0>
    f04c:	47c0      	blx	r8
    f04e:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    f052:	47c0      	blx	r8
    f054:	463a      	mov	r2, r7
    f056:	4917      	ldr	r1, [pc, #92]	; (f0b4 <_GLOBAL__sub_I_ptrFansClass+0x90>)
    f058:	2000      	movs	r0, #0
    f05a:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
    f05c:	f504 789a 	add.w	r8, r4, #308	; 0x134
    f060:	4640      	mov	r0, r8
    f062:	4b15      	ldr	r3, [pc, #84]	; (f0b8 <_GLOBAL__sub_I_ptrFansClass+0x94>)
    f064:	4798      	blx	r3
    f066:	463a      	mov	r2, r7
    f068:	4914      	ldr	r1, [pc, #80]	; (f0bc <_GLOBAL__sub_I_ptrFansClass+0x98>)
    f06a:	4640      	mov	r0, r8
    f06c:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    f06e:	4e14      	ldr	r6, [pc, #80]	; (f0c0 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
    f070:	4620      	mov	r0, r4
    f072:	47b0      	blx	r6
    f074:	341c      	adds	r4, #28
    f076:	42a5      	cmp	r5, r4
    f078:	d1fa      	bne.n	f070 <_GLOBAL__sub_I_ptrFansClass+0x4c>
    f07a:	4e0b      	ldr	r6, [pc, #44]	; (f0a8 <_GLOBAL__sub_I_ptrFansClass+0x84>)
    f07c:	4632      	mov	r2, r6
    f07e:	4911      	ldr	r1, [pc, #68]	; (f0c4 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
    f080:	2000      	movs	r0, #0
    f082:	4c0b      	ldr	r4, [pc, #44]	; (f0b0 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    f084:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
    f086:	4d10      	ldr	r5, [pc, #64]	; (f0c8 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
    f088:	4628      	mov	r0, r5
    f08a:	4b10      	ldr	r3, [pc, #64]	; (f0cc <_GLOBAL__sub_I_ptrFansClass+0xa8>)
    f08c:	4798      	blx	r3
    f08e:	4632      	mov	r2, r6
    f090:	490f      	ldr	r1, [pc, #60]	; (f0d0 <_GLOBAL__sub_I_ptrFansClass+0xac>)
    f092:	4628      	mov	r0, r5
    f094:	47a0      	blx	r4
    f096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f09a:	bf00      	nop
    f09c:	20001868 	.word	0x20001868
    f0a0:	20009e10 	.word	0x20009e10
    f0a4:	0000dc19 	.word	0x0000dc19
    f0a8:	20000000 	.word	0x20000000
    f0ac:	0000dc35 	.word	0x0000dc35
    f0b0:	000134a5 	.word	0x000134a5
    f0b4:	0000eee5 	.word	0x0000eee5
    f0b8:	0000eda5 	.word	0x0000eda5
    f0bc:	0000eda7 	.word	0x0000eda7
    f0c0:	00011abb 	.word	0x00011abb
    f0c4:	0000eec5 	.word	0x0000eec5
    f0c8:	200019cc 	.word	0x200019cc
    f0cc:	0000ef01 	.word	0x0000ef01
    f0d0:	0000eea9 	.word	0x0000eea9
    f0d4:	0000f0d9 	.word	0x0000f0d9

0000f0d8 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
    f0d8:	b510      	push	{r4, lr}
    f0da:	4604      	mov	r4, r0
    f0dc:	4b02      	ldr	r3, [pc, #8]	; (f0e8 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
    f0de:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
    f0e0:	4b02      	ldr	r3, [pc, #8]	; (f0ec <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
    f0e2:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
    f0e4:	4620      	mov	r0, r4
    f0e6:	bd10      	pop	{r4, pc}
    f0e8:	0000f265 	.word	0x0000f265
    f0ec:	20001a58 	.word	0x20001a58

0000f0f0 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
    f0f0:	b510      	push	{r4, lr}
    f0f2:	4604      	mov	r4, r0
    f0f4:	4b01      	ldr	r3, [pc, #4]	; (f0fc <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
    f0f6:	4798      	blx	r3
{
} //~EvaporatorFan_Class
    f0f8:	4620      	mov	r0, r4
    f0fa:	bd10      	pop	{r4, pc}
    f0fc:	0000f267 	.word	0x0000f267

0000f100 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
    f100:	1f0b      	subs	r3, r1, #4
    f102:	300c      	adds	r0, #12
    f104:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
    f106:	f853 2f04 	ldr.w	r2, [r3, #4]!
    f10a:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
    f10e:	428b      	cmp	r3, r1
    f110:	d1f9      	bne.n	f106 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
    f112:	2000      	movs	r0, #0
    f114:	4770      	bx	lr
	...

0000f118 <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
    f118:	b538      	push	{r3, r4, r5, lr}
    f11a:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
    f11c:	6900      	ldr	r0, [r0, #16]
    f11e:	4b10      	ldr	r3, [pc, #64]	; (f160 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x48>)
    f120:	4798      	blx	r3
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
    f122:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f126:	0099      	lsls	r1, r3, #2
    f128:	fa40 f501 	asr.w	r5, r0, r1
    f12c:	5ce2      	ldrb	r2, [r4, r3]
    f12e:	f365 0282 	bfi	r2, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
    f132:	2502      	movs	r5, #2
    f134:	408d      	lsls	r5, r1
    f136:	4205      	tst	r5, r0
    f138:	bf14      	ite	ne
    f13a:	2501      	movne	r5, #1
    f13c:	2500      	moveq	r5, #0
    f13e:	f365 0241 	bfi	r2, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
    f142:	2504      	movs	r5, #4
    f144:	408d      	lsls	r5, r1
    f146:	4205      	tst	r5, r0
    f148:	bf14      	ite	ne
    f14a:	2501      	movne	r5, #1
    f14c:	2500      	moveq	r5, #0
    f14e:	f365 0200 	bfi	r2, r5, #0, #1
    f152:	54e2      	strb	r2, [r4, r3]
	faults=r&(0x07<<(4*fanNumber));
    f154:	2307      	movs	r3, #7
    f156:	408b      	lsls	r3, r1
    f158:	4018      	ands	r0, r3
    f15a:	b2c0      	uxtb	r0, r0
    f15c:	7160      	strb	r0, [r4, #5]
	return faults;
		
}
    f15e:	bd38      	pop	{r3, r4, r5, pc}
    f160:	00011bc9 	.word	0x00011bc9

0000f164 <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
    f164:	b510      	push	{r4, lr}
    f166:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
    f168:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    f16c:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
    f16e:	f081 0201 	eor.w	r2, r1, #1
    f172:	bf0c      	ite	eq
    f174:	2102      	moveq	r1, #2
    f176:	2101      	movne	r1, #1
    f178:	68c0      	ldr	r0, [r0, #12]
    f17a:	4b02      	ldr	r3, [pc, #8]	; (f184 <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
    f17c:	4798      	blx	r3
    f17e:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
    f180:	bd10      	pop	{r4, pc}
    f182:	bf00      	nop
    f184:	00011e81 	.word	0x00011e81

0000f188 <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
    f188:	b510      	push	{r4, lr}
    f18a:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
    f18c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    f190:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    f194:	69d8      	ldr	r0, [r3, #28]
    f196:	4b02      	ldr	r3, [pc, #8]	; (f1a0 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
    f198:	4798      	blx	r3
    f19a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	
	return pwmValue;
}
    f19e:	bd10      	pop	{r4, pc}
    f1a0:	00011c4d 	.word	0x00011c4d

0000f1a4 <_ZN19EvaporatorFan_Class8SelfTestEv>:
	uint8_t value=expanders[0]->ReadGPIORegister();
	enabled=!(value&fanCorrrection);
	return enabled;
}

bool EvaporatorFan_Class::SelfTest(void){
    f1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1a8:	4605      	mov	r5, r0
	bool result;
	SetEnable(false);
    f1aa:	2100      	movs	r1, #0
    f1ac:	4c0f      	ldr	r4, [pc, #60]	; (f1ec <_ZN19EvaporatorFan_Class8SelfTestEv+0x48>)
    f1ae:	47a0      	blx	r4
	SetPWM(0xff);
    f1b0:	21ff      	movs	r1, #255	; 0xff
    f1b2:	4628      	mov	r0, r5
    f1b4:	4b0e      	ldr	r3, [pc, #56]	; (f1f0 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
    f1b6:	4798      	blx	r3
	SetEnable(true);
    f1b8:	2101      	movs	r1, #1
    f1ba:	4628      	mov	r0, r5
    f1bc:	47a0      	blx	r4
    f1be:	24ff      	movs	r4, #255	; 0xff
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
	{
		SetPWM(i);
    f1c0:	4f0b      	ldr	r7, [pc, #44]	; (f1f0 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
		delay_us(10);
    f1c2:	f04f 080a 	mov.w	r8, #10
    f1c6:	4e0b      	ldr	r6, [pc, #44]	; (f1f4 <_ZN19EvaporatorFan_Class8SelfTestEv+0x50>)
		SetPWM(i);
    f1c8:	4621      	mov	r1, r4
    f1ca:	4628      	mov	r0, r5
    f1cc:	47b8      	blx	r7
		delay_us(10);
    f1ce:	4640      	mov	r0, r8
    f1d0:	47b0      	blx	r6
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
    f1d2:	3c01      	subs	r4, #1
    f1d4:	b2e4      	uxtb	r4, r4
    f1d6:	2c0c      	cmp	r4, #12
    f1d8:	d1f6      	bne.n	f1c8 <_ZN19EvaporatorFan_Class8SelfTestEv+0x24>
	}

	ReadStatus();
    f1da:	4628      	mov	r0, r5
    f1dc:	4b06      	ldr	r3, [pc, #24]	; (f1f8 <_ZN19EvaporatorFan_Class8SelfTestEv+0x54>)
    f1de:	4798      	blx	r3
	result=evaporatorFansStatus.inputs->niAlcEvaFanExtFault;
    f1e0:	7828      	ldrb	r0, [r5, #0]
	return result;
}
    f1e2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f1ea:	bf00      	nop
    f1ec:	0000f165 	.word	0x0000f165
    f1f0:	0000f189 	.word	0x0000f189
    f1f4:	00002a4d 	.word	0x00002a4d
    f1f8:	0000f119 	.word	0x0000f119

0000f1fc <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
    f1fc:	b510      	push	{r4, lr}
    f1fe:	4604      	mov	r4, r0
	i2c=i2cClass;
    f200:	6082      	str	r2, [r0, #8]
	fanNumber=number;
    f202:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
    f206:	7a52      	ldrb	r2, [r2, #9]
    f208:	b90a      	cbnz	r2, f20e <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
    f20a:	7920      	ldrb	r0, [r4, #4]
    f20c:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
    f20e:	4619      	mov	r1, r3
    f210:	4b0e      	ldr	r3, [pc, #56]	; (f24c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
    f212:	4798      	blx	r3
			if (fanNumber==0)
    f214:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f218:	b15b      	cbz	r3, f232 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x36>
			expanders[4+fanNumber]->SetPortOutput();
    f21a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f21e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f222:	69d8      	ldr	r0, [r3, #28]
    f224:	4b0a      	ldr	r3, [pc, #40]	; (f250 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x54>)
    f226:	4798      	blx	r3
			isOK=SelfTest();
    f228:	4620      	mov	r0, r4
    f22a:	4b0a      	ldr	r3, [pc, #40]	; (f254 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x58>)
    f22c:	4798      	blx	r3
    f22e:	7120      	strb	r0, [r4, #4]
    f230:	e7eb      	b.n	f20a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
    f232:	2170      	movs	r1, #112	; 0x70
    f234:	68e0      	ldr	r0, [r4, #12]
    f236:	4b08      	ldr	r3, [pc, #32]	; (f258 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x5c>)
    f238:	4798      	blx	r3
				expanders[0]->SetPortOutput(0x07);
    f23a:	2107      	movs	r1, #7
    f23c:	68e0      	ldr	r0, [r4, #12]
    f23e:	4b07      	ldr	r3, [pc, #28]	; (f25c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x60>)
    f240:	4798      	blx	r3
				expanders[1]->SetPortInput();
    f242:	6920      	ldr	r0, [r4, #16]
    f244:	4b06      	ldr	r3, [pc, #24]	; (f260 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x64>)
    f246:	4798      	blx	r3
    f248:	e7e7      	b.n	f21a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
    f24a:	bf00      	nop
    f24c:	0000f101 	.word	0x0000f101
    f250:	00011d41 	.word	0x00011d41
    f254:	0000f1a5 	.word	0x0000f1a5
    f258:	00011ccd 	.word	0x00011ccd
    f25c:	00011d75 	.word	0x00011d75
    f260:	00011c89 	.word	0x00011c89

0000f264 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
    f264:	4770      	bx	lr

0000f266 <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
    f266:	4770      	bx	lr

0000f268 <_ZN29Dual_Flapper_Valve_ControllerD1Ev>:
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
{
} //Dual_Flapper_Valve_Controller

// default destructor
Dual_Flapper_Valve_Controller::~Dual_Flapper_Valve_Controller()
    f268:	b510      	push	{r4, lr}
    f26a:	4604      	mov	r4, r0
    f26c:	4b01      	ldr	r3, [pc, #4]	; (f274 <_ZN29Dual_Flapper_Valve_ControllerD1Ev+0xc>)
    f26e:	4798      	blx	r3
{
} //~Dual_Flapper_Valve_Controller
    f270:	4620      	mov	r0, r4
    f272:	bd10      	pop	{r4, pc}
    f274:	0000f6fd 	.word	0x0000f6fd

0000f278 <__tcf_0>:
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
    f278:	b538      	push	{r3, r4, r5, lr}
    f27a:	4d04      	ldr	r5, [pc, #16]	; (f28c <__tcf_0+0x14>)
    f27c:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    f280:	4c03      	ldr	r4, [pc, #12]	; (f290 <__tcf_0+0x18>)
    f282:	47a0      	blx	r4
    f284:	4628      	mov	r0, r5
    f286:	47a0      	blx	r4
    f288:	bd38      	pop	{r3, r4, r5, pc}
    f28a:	bf00      	nop
    f28c:	20001a5c 	.word	0x20001a5c
    f290:	0000f6fd 	.word	0x0000f6fd

0000f294 <_ZN29Dual_Flapper_Valve_Controller4InitEv>:

bool Dual_Flapper_Valve_Controller::Init(){
    f294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f296:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		fvx[i]=&staticFVController[i];
    f298:	4d12      	ldr	r5, [pc, #72]	; (f2e4 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x50>)
    f29a:	f8c0 50dc 	str.w	r5, [r0, #220]	; 0xdc
		fvx[i]->InitController(i);
    f29e:	2100      	movs	r1, #0
    f2a0:	4628      	mov	r0, r5
    f2a2:	4f11      	ldr	r7, [pc, #68]	; (f2e8 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x54>)
    f2a4:	47b8      	blx	r7
		fvx[i]->SetPartner(fvx[1-i]);
    f2a6:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
    f2aa:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    f2ae:	4e0f      	ldr	r6, [pc, #60]	; (f2ec <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x58>)
    f2b0:	47b0      	blx	r6
		fvx[i]=&staticFVController[i];
    f2b2:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    f2b6:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
		fvx[i]->InitController(i);
    f2ba:	2101      	movs	r1, #1
    f2bc:	47b8      	blx	r7
		fvx[i]->SetPartner(fvx[1-i]);
    f2be:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
    f2c2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    f2c6:	47b0      	blx	r6
	
	}
	fv1=fvx[0]; 
    f2c8:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
    f2cc:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
	fv2=fvx[1]; 
    f2d0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    f2d4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	return (fv1->isOK)&(fv2->isOK);
    f2d8:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    f2dc:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    f2e0:	4010      	ands	r0, r2
    f2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f2e4:	20001a5c 	.word	0x20001a5c
    f2e8:	0000f71d 	.word	0x0000f71d
    f2ec:	0000faa1 	.word	0x0000faa1

0000f2f0 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev>:
		boolResult=	!fv1->dataStruct.controlOutputs.iAlcFvStandAloneOut;
	}
	return boolResult;
}

Dual_Flapper_Valve_Controller fv;
    f2f0:	b570      	push	{r4, r5, r6, lr}
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
    f2f2:	4c0b      	ldr	r4, [pc, #44]	; (f320 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x30>)
    f2f4:	4620      	mov	r0, r4
    f2f6:	4d0b      	ldr	r5, [pc, #44]	; (f324 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x34>)
    f2f8:	47a8      	blx	r5
    f2fa:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    f2fe:	47a8      	blx	r5
    f300:	4e09      	ldr	r6, [pc, #36]	; (f328 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x38>)
    f302:	4632      	mov	r2, r6
    f304:	4909      	ldr	r1, [pc, #36]	; (f32c <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x3c>)
    f306:	2000      	movs	r0, #0
    f308:	4d09      	ldr	r5, [pc, #36]	; (f330 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x40>)
    f30a:	47a8      	blx	r5
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
    f30c:	f504 74d4 	add.w	r4, r4, #424	; 0x1a8
    f310:	4620      	mov	r0, r4
    f312:	4b08      	ldr	r3, [pc, #32]	; (f334 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x44>)
    f314:	4798      	blx	r3
Dual_Flapper_Valve_Controller fv;
    f316:	4632      	mov	r2, r6
    f318:	4907      	ldr	r1, [pc, #28]	; (f338 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x48>)
    f31a:	4620      	mov	r0, r4
    f31c:	47a8      	blx	r5
    f31e:	bd70      	pop	{r4, r5, r6, pc}
    f320:	20001a5c 	.word	0x20001a5c
    f324:	0000f675 	.word	0x0000f675
    f328:	20000000 	.word	0x20000000
    f32c:	0000f279 	.word	0x0000f279
    f330:	000134a5 	.word	0x000134a5
    f334:	0000f675 	.word	0x0000f675
    f338:	0000f269 	.word	0x0000f269

0000f33c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    f33c:	b480      	push	{r7}
    f33e:	b083      	sub	sp, #12
    f340:	af00      	add	r7, sp, #0
    f342:	6078      	str	r0, [r7, #4]
    f344:	460b      	mov	r3, r1
    f346:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f348:	78fb      	ldrb	r3, [r7, #3]
    f34a:	687a      	ldr	r2, [r7, #4]
    f34c:	01db      	lsls	r3, r3, #7
    f34e:	4413      	add	r3, r2
    f350:	681b      	ldr	r3, [r3, #0]
}
    f352:	4618      	mov	r0, r3
    f354:	370c      	adds	r7, #12
    f356:	46bd      	mov	sp, r7
    f358:	bc80      	pop	{r7}
    f35a:	4770      	bx	lr

0000f35c <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    f35c:	b480      	push	{r7}
    f35e:	b085      	sub	sp, #20
    f360:	af00      	add	r7, sp, #0
    f362:	60f8      	str	r0, [r7, #12]
    f364:	460b      	mov	r3, r1
    f366:	607a      	str	r2, [r7, #4]
    f368:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    f36a:	7afb      	ldrb	r3, [r7, #11]
    f36c:	68fa      	ldr	r2, [r7, #12]
    f36e:	01db      	lsls	r3, r3, #7
    f370:	4413      	add	r3, r2
    f372:	3318      	adds	r3, #24
    f374:	687a      	ldr	r2, [r7, #4]
    f376:	601a      	str	r2, [r3, #0]
}
    f378:	bf00      	nop
    f37a:	3714      	adds	r7, #20
    f37c:	46bd      	mov	sp, r7
    f37e:	bc80      	pop	{r7}
    f380:	4770      	bx	lr

0000f382 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    f382:	b480      	push	{r7}
    f384:	b083      	sub	sp, #12
    f386:	af00      	add	r7, sp, #0
    f388:	6078      	str	r0, [r7, #4]
    f38a:	460b      	mov	r3, r1
    f38c:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f38e:	78fb      	ldrb	r3, [r7, #3]
    f390:	687a      	ldr	r2, [r7, #4]
    f392:	01db      	lsls	r3, r3, #7
    f394:	4413      	add	r3, r2
    f396:	3310      	adds	r3, #16
    f398:	681b      	ldr	r3, [r3, #0]
}
    f39a:	4618      	mov	r0, r3
    f39c:	370c      	adds	r7, #12
    f39e:	46bd      	mov	sp, r7
    f3a0:	bc80      	pop	{r7}
    f3a2:	4770      	bx	lr

0000f3a4 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    f3a4:	b480      	push	{r7}
    f3a6:	b085      	sub	sp, #20
    f3a8:	af00      	add	r7, sp, #0
    f3aa:	60f8      	str	r0, [r7, #12]
    f3ac:	460b      	mov	r3, r1
    f3ae:	607a      	str	r2, [r7, #4]
    f3b0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f3b2:	7afb      	ldrb	r3, [r7, #11]
    f3b4:	68fa      	ldr	r2, [r7, #12]
    f3b6:	01db      	lsls	r3, r3, #7
    f3b8:	4413      	add	r3, r2
    f3ba:	3314      	adds	r3, #20
    f3bc:	687a      	ldr	r2, [r7, #4]
    f3be:	601a      	str	r2, [r3, #0]
}
    f3c0:	bf00      	nop
    f3c2:	3714      	adds	r7, #20
    f3c4:	46bd      	mov	sp, r7
    f3c6:	bc80      	pop	{r7}
    f3c8:	4770      	bx	lr

0000f3ca <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    f3ca:	b480      	push	{r7}
    f3cc:	b085      	sub	sp, #20
    f3ce:	af00      	add	r7, sp, #0
    f3d0:	60f8      	str	r0, [r7, #12]
    f3d2:	460b      	mov	r3, r1
    f3d4:	607a      	str	r2, [r7, #4]
    f3d6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    f3d8:	7afb      	ldrb	r3, [r7, #11]
    f3da:	68fa      	ldr	r2, [r7, #12]
    f3dc:	01db      	lsls	r3, r3, #7
    f3de:	4413      	add	r3, r2
    f3e0:	331c      	adds	r3, #28
    f3e2:	687a      	ldr	r2, [r7, #4]
    f3e4:	601a      	str	r2, [r3, #0]
}
    f3e6:	bf00      	nop
    f3e8:	3714      	adds	r7, #20
    f3ea:	46bd      	mov	sp, r7
    f3ec:	bc80      	pop	{r7}
    f3ee:	4770      	bx	lr

0000f3f0 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f3f0:	b480      	push	{r7}
    f3f2:	b083      	sub	sp, #12
    f3f4:	af00      	add	r7, sp, #0
    f3f6:	6078      	str	r0, [r7, #4]
    f3f8:	460b      	mov	r3, r1
    f3fa:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f3fc:	78fb      	ldrb	r3, [r7, #3]
    f3fe:	687a      	ldr	r2, [r7, #4]
    f400:	01db      	lsls	r3, r3, #7
    f402:	4413      	add	r3, r2
    f404:	3320      	adds	r3, #32
    f406:	681b      	ldr	r3, [r3, #0]
}
    f408:	4618      	mov	r0, r3
    f40a:	370c      	adds	r7, #12
    f40c:	46bd      	mov	sp, r7
    f40e:	bc80      	pop	{r7}
    f410:	4770      	bx	lr
	...

0000f414 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    f414:	b580      	push	{r7, lr}
    f416:	b082      	sub	sp, #8
    f418:	af00      	add	r7, sp, #0
    f41a:	4603      	mov	r3, r0
    f41c:	6039      	str	r1, [r7, #0]
    f41e:	71fb      	strb	r3, [r7, #7]
    f420:	4613      	mov	r3, r2
    f422:	71bb      	strb	r3, [r7, #6]
	if (level) {
    f424:	79bb      	ldrb	r3, [r7, #6]
    f426:	2b00      	cmp	r3, #0
    f428:	d006      	beq.n	f438 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    f42a:	79fb      	ldrb	r3, [r7, #7]
    f42c:	683a      	ldr	r2, [r7, #0]
    f42e:	4619      	mov	r1, r3
    f430:	4806      	ldr	r0, [pc, #24]	; (f44c <_gpio_set_level+0x38>)
    f432:	4b07      	ldr	r3, [pc, #28]	; (f450 <_gpio_set_level+0x3c>)
    f434:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    f436:	e005      	b.n	f444 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    f438:	79fb      	ldrb	r3, [r7, #7]
    f43a:	683a      	ldr	r2, [r7, #0]
    f43c:	4619      	mov	r1, r3
    f43e:	4803      	ldr	r0, [pc, #12]	; (f44c <_gpio_set_level+0x38>)
    f440:	4b04      	ldr	r3, [pc, #16]	; (f454 <_gpio_set_level+0x40>)
    f442:	4798      	blx	r3
}
    f444:	bf00      	nop
    f446:	3708      	adds	r7, #8
    f448:	46bd      	mov	sp, r7
    f44a:	bd80      	pop	{r7, pc}
    f44c:	41008000 	.word	0x41008000
    f450:	0000f35d 	.word	0x0000f35d
    f454:	0000f3a5 	.word	0x0000f3a5

0000f458 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    f458:	b580      	push	{r7, lr}
    f45a:	b082      	sub	sp, #8
    f45c:	af00      	add	r7, sp, #0
    f45e:	4603      	mov	r3, r0
    f460:	6039      	str	r1, [r7, #0]
    f462:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
    f464:	79fb      	ldrb	r3, [r7, #7]
    f466:	683a      	ldr	r2, [r7, #0]
    f468:	4619      	mov	r1, r3
    f46a:	4803      	ldr	r0, [pc, #12]	; (f478 <_gpio_toggle_level+0x20>)
    f46c:	4b03      	ldr	r3, [pc, #12]	; (f47c <_gpio_toggle_level+0x24>)
    f46e:	4798      	blx	r3
}
    f470:	bf00      	nop
    f472:	3708      	adds	r7, #8
    f474:	46bd      	mov	sp, r7
    f476:	bd80      	pop	{r7, pc}
    f478:	41008000 	.word	0x41008000
    f47c:	0000f3cb 	.word	0x0000f3cb

0000f480 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f480:	b580      	push	{r7, lr}
    f482:	b086      	sub	sp, #24
    f484:	af00      	add	r7, sp, #0
    f486:	4603      	mov	r3, r0
    f488:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f48a:	f107 030c 	add.w	r3, r7, #12
    f48e:	4618      	mov	r0, r3
    f490:	4b13      	ldr	r3, [pc, #76]	; (f4e0 <_gpio_get_level+0x60>)
    f492:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f494:	79fb      	ldrb	r3, [r7, #7]
    f496:	4619      	mov	r1, r3
    f498:	4812      	ldr	r0, [pc, #72]	; (f4e4 <_gpio_get_level+0x64>)
    f49a:	4b13      	ldr	r3, [pc, #76]	; (f4e8 <_gpio_get_level+0x68>)
    f49c:	4798      	blx	r3
    f49e:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f4a0:	79fb      	ldrb	r3, [r7, #7]
    f4a2:	4619      	mov	r1, r3
    f4a4:	480f      	ldr	r0, [pc, #60]	; (f4e4 <_gpio_get_level+0x64>)
    f4a6:	4b11      	ldr	r3, [pc, #68]	; (f4ec <_gpio_get_level+0x6c>)
    f4a8:	4798      	blx	r3
    f4aa:	4602      	mov	r2, r0
    f4ac:	697b      	ldr	r3, [r7, #20]
    f4ae:	43db      	mvns	r3, r3
    f4b0:	4013      	ands	r3, r2
    f4b2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f4b4:	79fb      	ldrb	r3, [r7, #7]
    f4b6:	4619      	mov	r1, r3
    f4b8:	480a      	ldr	r0, [pc, #40]	; (f4e4 <_gpio_get_level+0x64>)
    f4ba:	4b0d      	ldr	r3, [pc, #52]	; (f4f0 <_gpio_get_level+0x70>)
    f4bc:	4798      	blx	r3
    f4be:	4602      	mov	r2, r0
    f4c0:	697b      	ldr	r3, [r7, #20]
    f4c2:	4013      	ands	r3, r2
    f4c4:	693a      	ldr	r2, [r7, #16]
    f4c6:	4313      	orrs	r3, r2
    f4c8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f4ca:	f107 030c 	add.w	r3, r7, #12
    f4ce:	4618      	mov	r0, r3
    f4d0:	4b08      	ldr	r3, [pc, #32]	; (f4f4 <_gpio_get_level+0x74>)
    f4d2:	4798      	blx	r3

	return tmp;
    f4d4:	693b      	ldr	r3, [r7, #16]
}
    f4d6:	4618      	mov	r0, r3
    f4d8:	3718      	adds	r7, #24
    f4da:	46bd      	mov	sp, r7
    f4dc:	bd80      	pop	{r7, pc}
    f4de:	bf00      	nop
    f4e0:	0000bd55 	.word	0x0000bd55
    f4e4:	41008000 	.word	0x41008000
    f4e8:	0000f33d 	.word	0x0000f33d
    f4ec:	0000f3f1 	.word	0x0000f3f1
    f4f0:	0000f383 	.word	0x0000f383
    f4f4:	0000bd7b 	.word	0x0000bd7b

0000f4f8 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    f4f8:	b580      	push	{r7, lr}
    f4fa:	b082      	sub	sp, #8
    f4fc:	af00      	add	r7, sp, #0
    f4fe:	4603      	mov	r3, r0
    f500:	460a      	mov	r2, r1
    f502:	71fb      	strb	r3, [r7, #7]
    f504:	4613      	mov	r3, r2
    f506:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    f508:	79fb      	ldrb	r3, [r7, #7]
    f50a:	115b      	asrs	r3, r3, #5
    f50c:	b2d8      	uxtb	r0, r3
    f50e:	79fb      	ldrb	r3, [r7, #7]
    f510:	f003 031f 	and.w	r3, r3, #31
    f514:	2201      	movs	r2, #1
    f516:	fa02 f303 	lsl.w	r3, r2, r3
    f51a:	79ba      	ldrb	r2, [r7, #6]
    f51c:	4619      	mov	r1, r3
    f51e:	4b03      	ldr	r3, [pc, #12]	; (f52c <gpio_set_pin_level+0x34>)
    f520:	4798      	blx	r3
}
    f522:	bf00      	nop
    f524:	3708      	adds	r7, #8
    f526:	46bd      	mov	sp, r7
    f528:	bd80      	pop	{r7, pc}
    f52a:	bf00      	nop
    f52c:	0000f415 	.word	0x0000f415

0000f530 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    f530:	b580      	push	{r7, lr}
    f532:	b082      	sub	sp, #8
    f534:	af00      	add	r7, sp, #0
    f536:	4603      	mov	r3, r0
    f538:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    f53a:	79fb      	ldrb	r3, [r7, #7]
    f53c:	115b      	asrs	r3, r3, #5
    f53e:	b2d8      	uxtb	r0, r3
    f540:	79fb      	ldrb	r3, [r7, #7]
    f542:	f003 031f 	and.w	r3, r3, #31
    f546:	2201      	movs	r2, #1
    f548:	fa02 f303 	lsl.w	r3, r2, r3
    f54c:	4619      	mov	r1, r3
    f54e:	4b03      	ldr	r3, [pc, #12]	; (f55c <gpio_toggle_pin_level+0x2c>)
    f550:	4798      	blx	r3
}
    f552:	bf00      	nop
    f554:	3708      	adds	r7, #8
    f556:	46bd      	mov	sp, r7
    f558:	bd80      	pop	{r7, pc}
    f55a:	bf00      	nop
    f55c:	0000f459 	.word	0x0000f459

0000f560 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f560:	b580      	push	{r7, lr}
    f562:	b082      	sub	sp, #8
    f564:	af00      	add	r7, sp, #0
    f566:	4603      	mov	r3, r0
    f568:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f56a:	79fb      	ldrb	r3, [r7, #7]
    f56c:	115b      	asrs	r3, r3, #5
    f56e:	b2db      	uxtb	r3, r3
    f570:	4618      	mov	r0, r3
    f572:	4b09      	ldr	r3, [pc, #36]	; (f598 <gpio_get_pin_level+0x38>)
    f574:	4798      	blx	r3
    f576:	4601      	mov	r1, r0
    f578:	79fb      	ldrb	r3, [r7, #7]
    f57a:	f003 031f 	and.w	r3, r3, #31
    f57e:	2201      	movs	r2, #1
    f580:	fa02 f303 	lsl.w	r3, r2, r3
    f584:	400b      	ands	r3, r1
    f586:	2b00      	cmp	r3, #0
    f588:	bf14      	ite	ne
    f58a:	2301      	movne	r3, #1
    f58c:	2300      	moveq	r3, #0
    f58e:	b2db      	uxtb	r3, r3
}
    f590:	4618      	mov	r0, r3
    f592:	3708      	adds	r7, #8
    f594:	46bd      	mov	sp, r7
    f596:	bd80      	pop	{r7, pc}
    f598:	0000f481 	.word	0x0000f481

0000f59c <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
    f59c:	b480      	push	{r7}
    f59e:	b083      	sub	sp, #12
    f5a0:	af00      	add	r7, sp, #0
    f5a2:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
    f5a4:	4b07      	ldr	r3, [pc, #28]	; (f5c4 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
    f5a6:	681b      	ldr	r3, [r3, #0]
    f5a8:	2201      	movs	r2, #1
    f5aa:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
    f5ae:	4b05      	ldr	r3, [pc, #20]	; (f5c4 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
    f5b0:	681b      	ldr	r3, [r3, #0]
    f5b2:	2201      	movs	r2, #1
    f5b4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	
}
    f5b8:	bf00      	nop
    f5ba:	370c      	adds	r7, #12
    f5bc:	46bd      	mov	sp, r7
    f5be:	bc80      	pop	{r7}
    f5c0:	4770      	bx	lr
    f5c2:	bf00      	nop
    f5c4:	20001e0c 	.word	0x20001e0c

0000f5c8 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
    f5c8:	b480      	push	{r7}
    f5ca:	b083      	sub	sp, #12
    f5cc:	af00      	add	r7, sp, #0
    f5ce:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
    f5d0:	4b07      	ldr	r3, [pc, #28]	; (f5f0 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
    f5d2:	685b      	ldr	r3, [r3, #4]
    f5d4:	2201      	movs	r2, #1
    f5d6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
    f5da:	4b05      	ldr	r3, [pc, #20]	; (f5f0 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
    f5dc:	685b      	ldr	r3, [r3, #4]
    f5de:	2201      	movs	r2, #1
    f5e0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	
}
    f5e4:	bf00      	nop
    f5e6:	370c      	adds	r7, #12
    f5e8:	46bd      	mov	sp, r7
    f5ea:	bc80      	pop	{r7}
    f5ec:	4770      	bx	lr
    f5ee:	bf00      	nop
    f5f0:	20001e0c 	.word	0x20001e0c

0000f5f4 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task>:
static void TimeoutFlapperValve1FullyClossed(const struct timer_task *const timer_task)
{
    f5f4:	b480      	push	{r7}
    f5f6:	b083      	sub	sp, #12
    f5f8:	af00      	add	r7, sp, #0
    f5fa:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[0]->fullClosedTimeout=true;
    f5fc:	4b04      	ldr	r3, [pc, #16]	; (f610 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task+0x1c>)
    f5fe:	681b      	ldr	r3, [r3, #0]
    f600:	2201      	movs	r2, #1
    f602:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	
}
    f606:	bf00      	nop
    f608:	370c      	adds	r7, #12
    f60a:	46bd      	mov	sp, r7
    f60c:	bc80      	pop	{r7}
    f60e:	4770      	bx	lr
    f610:	20001e0c 	.word	0x20001e0c

0000f614 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task>:
static void TimeoutFlapperValve2FullyClossed(const struct timer_task *const timer_task)
{
    f614:	b480      	push	{r7}
    f616:	b083      	sub	sp, #12
    f618:	af00      	add	r7, sp, #0
    f61a:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->fullClosedTimeout=true;
    f61c:	4b04      	ldr	r3, [pc, #16]	; (f630 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task+0x1c>)
    f61e:	685b      	ldr	r3, [r3, #4]
    f620:	2201      	movs	r2, #1
    f622:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	
}
    f626:	bf00      	nop
    f628:	370c      	adds	r7, #12
    f62a:	46bd      	mov	sp, r7
    f62c:	bc80      	pop	{r7}
    f62e:	4770      	bx	lr
    f630:	20001e0c 	.word	0x20001e0c

0000f634 <_ZL18ResetValve1TimeoutPK10timer_task>:

static void ResetValve1Timeout(const struct timer_task *const timer_task)
{
    f634:	b480      	push	{r7}
    f636:	b083      	sub	sp, #12
    f638:	af00      	add	r7, sp, #0
    f63a:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[0]->resetTimeout=true;
    f63c:	4b04      	ldr	r3, [pc, #16]	; (f650 <_ZL18ResetValve1TimeoutPK10timer_task+0x1c>)
    f63e:	681b      	ldr	r3, [r3, #0]
    f640:	2201      	movs	r2, #1
    f642:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
    f646:	bf00      	nop
    f648:	370c      	adds	r7, #12
    f64a:	46bd      	mov	sp, r7
    f64c:	bc80      	pop	{r7}
    f64e:	4770      	bx	lr
    f650:	20001e0c 	.word	0x20001e0c

0000f654 <_ZL18ResetValve2TimeoutPK10timer_task>:
static void ResetValve2Timeout(const struct timer_task *const timer_task)
{
    f654:	b480      	push	{r7}
    f656:	b083      	sub	sp, #12
    f658:	af00      	add	r7, sp, #0
    f65a:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[1]->resetTimeout=true;
    f65c:	4b04      	ldr	r3, [pc, #16]	; (f670 <_ZL18ResetValve2TimeoutPK10timer_task+0x1c>)
    f65e:	685b      	ldr	r3, [r3, #4]
    f660:	2201      	movs	r2, #1
    f662:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
    f666:	bf00      	nop
    f668:	370c      	adds	r7, #12
    f66a:	46bd      	mov	sp, r7
    f66c:	bc80      	pop	{r7}
    f66e:	4770      	bx	lr
    f670:	20001e0c 	.word	0x20001e0c

0000f674 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
    f674:	b580      	push	{r7, lr}
    f676:	b082      	sub	sp, #8
    f678:	af00      	add	r7, sp, #0
    f67a:	6078      	str	r0, [r7, #4]
    f67c:	687b      	ldr	r3, [r7, #4]
    f67e:	4618      	mov	r0, r3
    f680:	4b1c      	ldr	r3, [pc, #112]	; (f6f4 <_ZN22FlapperValveControllerC1Ev+0x80>)
    f682:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
    f684:	687b      	ldr	r3, [r7, #4]
    f686:	4a1c      	ldr	r2, [pc, #112]	; (f6f8 <_ZN22FlapperValveControllerC1Ev+0x84>)
    f688:	67da      	str	r2, [r3, #124]	; 0x7c
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
    f68a:	687b      	ldr	r3, [r7, #4]
    f68c:	2200      	movs	r2, #0
    f68e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	isControlling=false;
    f692:	687b      	ldr	r3, [r7, #4]
    f694:	2200      	movs	r2, #0
    f696:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	gotSetpoint=false;
    f69a:	687b      	ldr	r3, [r7, #4]
    f69c:	2200      	movs	r2, #0
    f69e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	controllerEnabled=false;
    f6a2:	687b      	ldr	r3, [r7, #4]
    f6a4:	2200      	movs	r2, #0
    f6a6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	closing=false;
    f6aa:	687b      	ldr	r3, [r7, #4]
    f6ac:	2200      	movs	r2, #0
    f6ae:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
    f6b2:	687b      	ldr	r3, [r7, #4]
    f6b4:	22da      	movs	r2, #218	; 0xda
    f6b6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	NBC_Mode=false;
    f6ba:	687b      	ldr	r3, [r7, #4]
    f6bc:	2200      	movs	r2, #0
    f6be:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	NBC_Activated=false;
    f6c2:	687b      	ldr	r3, [r7, #4]
    f6c4:	2200      	movs	r2, #0
    f6c6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	standAloneActivated=false;
    f6ca:	687b      	ldr	r3, [r7, #4]
    f6cc:	2200      	movs	r2, #0
    f6ce:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	standAloneMode=false;
    f6d2:	687b      	ldr	r3, [r7, #4]
    f6d4:	2200      	movs	r2, #0
    f6d6:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	resetTimeout=false;
    f6da:	687b      	ldr	r3, [r7, #4]
    f6dc:	2200      	movs	r2, #0
    f6de:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	standAloneReturning=false;
    f6e2:	687b      	ldr	r3, [r7, #4]
    f6e4:	2200      	movs	r2, #0
    f6e6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	
	
} //FlapperValveController
    f6ea:	687b      	ldr	r3, [r7, #4]
    f6ec:	4618      	mov	r0, r3
    f6ee:	3708      	adds	r7, #8
    f6f0:	46bd      	mov	sp, r7
    f6f2:	bd80      	pop	{r7, pc}
    f6f4:	0001091d 	.word	0x0001091d
    f6f8:	20001e14 	.word	0x20001e14

0000f6fc <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
    f6fc:	b580      	push	{r7, lr}
    f6fe:	b082      	sub	sp, #8
    f700:	af00      	add	r7, sp, #0
    f702:	6078      	str	r0, [r7, #4]
    f704:	687b      	ldr	r3, [r7, #4]
    f706:	4618      	mov	r0, r3
    f708:	4b03      	ldr	r3, [pc, #12]	; (f718 <_ZN22FlapperValveControllerD1Ev+0x1c>)
    f70a:	4798      	blx	r3
{
} //~FlapperValveController
    f70c:	687b      	ldr	r3, [r7, #4]
    f70e:	4618      	mov	r0, r3
    f710:	3708      	adds	r7, #8
    f712:	46bd      	mov	sp, r7
    f714:	bd80      	pop	{r7, pc}
    f716:	bf00      	nop
    f718:	00010969 	.word	0x00010969

0000f71c <_ZN22FlapperValveController14InitControllerEh>:
	{
		isOK=Selftest();
	}
	return	isOK;	
}
bool FlapperValveController::InitController(uint8_t valve_id){
    f71c:	b580      	push	{r7, lr}
    f71e:	b082      	sub	sp, #8
    f720:	af00      	add	r7, sp, #0
    f722:	6078      	str	r0, [r7, #4]
    f724:	460b      	mov	r3, r1
    f726:	70fb      	strb	r3, [r7, #3]
	ptrFlapperValveController[valve_id]=this;
    f728:	78fb      	ldrb	r3, [r7, #3]
    f72a:	491a      	ldr	r1, [pc, #104]	; (f794 <_ZN22FlapperValveController14InitControllerEh+0x78>)
    f72c:	687a      	ldr	r2, [r7, #4]
    f72e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		valve_ID=valve_id;
    f732:	687b      	ldr	r3, [r7, #4]
    f734:	78fa      	ldrb	r2, [r7, #3]
    f736:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		singlefv=&fvStatic[valve_id];
    f73a:	78fb      	ldrb	r3, [r7, #3]
    f73c:	2274      	movs	r2, #116	; 0x74
    f73e:	fb02 f303 	mul.w	r3, r2, r3
    f742:	4a15      	ldr	r2, [pc, #84]	; (f798 <_ZN22FlapperValveController14InitControllerEh+0x7c>)
    f744:	441a      	add	r2, r3
    f746:	687b      	ldr	r3, [r7, #4]
    f748:	67da      	str	r2, [r3, #124]	; 0x7c
		positions[valve_id]=position_array_static[valve_id];
    f74a:	78fb      	ldrb	r3, [r7, #3]
    f74c:	78fa      	ldrb	r2, [r7, #3]
    f74e:	0112      	lsls	r2, r2, #4
    f750:	4912      	ldr	r1, [pc, #72]	; (f79c <_ZN22FlapperValveController14InitControllerEh+0x80>)
    f752:	440a      	add	r2, r1
    f754:	6879      	ldr	r1, [r7, #4]
    f756:	3330      	adds	r3, #48	; 0x30
    f758:	009b      	lsls	r3, r3, #2
    f75a:	440b      	add	r3, r1
    f75c:	605a      	str	r2, [r3, #4]
		if (singlefv->Init(valve_id))
    f75e:	687b      	ldr	r3, [r7, #4]
    f760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f762:	78fa      	ldrb	r2, [r7, #3]
    f764:	4611      	mov	r1, r2
    f766:	4618      	mov	r0, r3
    f768:	4b0d      	ldr	r3, [pc, #52]	; (f7a0 <_ZN22FlapperValveController14InitControllerEh+0x84>)
    f76a:	4798      	blx	r3
    f76c:	4603      	mov	r3, r0
    f76e:	2b00      	cmp	r3, #0
    f770:	d007      	beq.n	f782 <_ZN22FlapperValveController14InitControllerEh+0x66>
		{
			isOK=Selftest();
    f772:	6878      	ldr	r0, [r7, #4]
    f774:	4b0b      	ldr	r3, [pc, #44]	; (f7a4 <_ZN22FlapperValveController14InitControllerEh+0x88>)
    f776:	4798      	blx	r3
    f778:	4603      	mov	r3, r0
    f77a:	461a      	mov	r2, r3
    f77c:	687b      	ldr	r3, [r7, #4]
    f77e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		}
		return	isOK;
    f782:	687b      	ldr	r3, [r7, #4]
    f784:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    f788:	b2db      	uxtb	r3, r3
}
    f78a:	4618      	mov	r0, r3
    f78c:	3708      	adds	r7, #8
    f78e:	46bd      	mov	sp, r7
    f790:	bd80      	pop	{r7, pc}
    f792:	bf00      	nop
    f794:	20001e0c 	.word	0x20001e0c
    f798:	20001e14 	.word	0x20001e14
    f79c:	20001dec 	.word	0x20001dec
    f7a0:	00010a1d 	.word	0x00010a1d
    f7a4:	000105c5 	.word	0x000105c5

0000f7a8 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	singlefv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
    f7a8:	b480      	push	{r7}
    f7aa:	b083      	sub	sp, #12
    f7ac:	af00      	add	r7, sp, #0
    f7ae:	6078      	str	r0, [r7, #4]
    f7b0:	460b      	mov	r3, r1
    f7b2:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
    f7b4:	687b      	ldr	r3, [r7, #4]
    f7b6:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
    f7ba:	687b      	ldr	r3, [r7, #4]
    f7bc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	direction=currentPosition>sp;
    f7c0:	687b      	ldr	r3, [r7, #4]
    f7c2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f7c6:	461a      	mov	r2, r3
    f7c8:	78fb      	ldrb	r3, [r7, #3]
    f7ca:	429a      	cmp	r2, r3
    f7cc:	bfcc      	ite	gt
    f7ce:	2301      	movgt	r3, #1
    f7d0:	2300      	movle	r3, #0
    f7d2:	b2da      	uxtb	r2, r3
    f7d4:	687b      	ldr	r3, [r7, #4]
    f7d6:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	return direction;
    f7da:	687b      	ldr	r3, [r7, #4]
    f7dc:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
	
}
    f7e0:	4618      	mov	r0, r3
    f7e2:	370c      	adds	r7, #12
    f7e4:	46bd      	mov	sp, r7
    f7e6:	bc80      	pop	{r7}
    f7e8:	4770      	bx	lr
	...

0000f7ec <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
    f7ec:	b580      	push	{r7, lr}
    f7ee:	b082      	sub	sp, #8
    f7f0:	af00      	add	r7, sp, #0
    f7f2:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
    f7f4:	687b      	ldr	r3, [r7, #4]
    f7f6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    f7fa:	4619      	mov	r1, r3
    f7fc:	6878      	ldr	r0, [r7, #4]
    f7fe:	4b03      	ldr	r3, [pc, #12]	; (f80c <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
    f800:	4798      	blx	r3
    f802:	4603      	mov	r3, r0
	
}
    f804:	4618      	mov	r0, r3
    f806:	3708      	adds	r7, #8
    f808:	46bd      	mov	sp, r7
    f80a:	bd80      	pop	{r7, pc}
    f80c:	0000f7a9 	.word	0x0000f7a9

0000f810 <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	singlefv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
    f810:	b590      	push	{r4, r7, lr}
    f812:	b083      	sub	sp, #12
    f814:	af00      	add	r7, sp, #0
    f816:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
    f818:	687b      	ldr	r3, [r7, #4]
    f81a:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    f81e:	687b      	ldr	r3, [r7, #4]
    f820:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
//	floatLastPosition=(float)lastPosition;
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
    f824:	687b      	ldr	r3, [r7, #4]
    f826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    f82c:	2b00      	cmp	r3, #0
    f82e:	d008      	beq.n	f842 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x32>
	{
		singlefv->SetEnable(false);
    f830:	687b      	ldr	r3, [r7, #4]
    f832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f834:	2100      	movs	r1, #0
    f836:	4618      	mov	r0, r3
    f838:	4b0b      	ldr	r3, [pc, #44]	; (f868 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x58>)
    f83a:	4798      	blx	r3
		delay_ms(10);
    f83c:	200a      	movs	r0, #10
    f83e:	4b0b      	ldr	r3, [pc, #44]	; (f86c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
    f840:	4798      	blx	r3
	} 
	else
	{
	}
	singlefv->SetDirection(CalculateDirection());
    f842:	687b      	ldr	r3, [r7, #4]
    f844:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
    f846:	6878      	ldr	r0, [r7, #4]
    f848:	4b09      	ldr	r3, [pc, #36]	; (f870 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
    f84a:	4798      	blx	r3
    f84c:	4603      	mov	r3, r0
    f84e:	4619      	mov	r1, r3
    f850:	4620      	mov	r0, r4
    f852:	4b08      	ldr	r3, [pc, #32]	; (f874 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
    f854:	4798      	blx	r3
	StartMotor();
    f856:	6878      	ldr	r0, [r7, #4]
    f858:	4b07      	ldr	r3, [pc, #28]	; (f878 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
    f85a:	4798      	blx	r3
	return 0;
    f85c:	2300      	movs	r3, #0
}
    f85e:	4618      	mov	r0, r3
    f860:	370c      	adds	r7, #12
    f862:	46bd      	mov	sp, r7
    f864:	bd90      	pop	{r4, r7, pc}
    f866:	bf00      	nop
    f868:	00010b85 	.word	0x00010b85
    f86c:	00002a81 	.word	0x00002a81
    f870:	0000f7ed 	.word	0x0000f7ed
    f874:	00010c05 	.word	0x00010c05
    f878:	000101e1 	.word	0x000101e1

0000f87c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
    f87c:	b580      	push	{r7, lr}
    f87e:	b082      	sub	sp, #8
    f880:	af00      	add	r7, sp, #0
    f882:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
    f884:	6878      	ldr	r0, [r7, #4]
    f886:	4b13      	ldr	r3, [pc, #76]	; (f8d4 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
    f888:	4798      	blx	r3
    f88a:	4603      	mov	r3, r0
    f88c:	2b00      	cmp	r3, #0
    f88e:	d003      	beq.n	f898 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
    f890:	6878      	ldr	r0, [r7, #4]
    f892:	4b11      	ldr	r3, [pc, #68]	; (f8d8 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
    f894:	4798      	blx	r3
    f896:	e013      	b.n	f8c0 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
    f898:	687b      	ldr	r3, [r7, #4]
    f89a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
    f89e:	2b00      	cmp	r3, #0
    f8a0:	d00b      	beq.n	f8ba <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    f8a2:	687b      	ldr	r3, [r7, #4]
    f8a4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    f8a8:	4619      	mov	r1, r3
    f8aa:	6878      	ldr	r0, [r7, #4]
    f8ac:	4b0b      	ldr	r3, [pc, #44]	; (f8dc <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
    f8ae:	4798      	blx	r3
			NBC_Activated=false;
    f8b0:	687b      	ldr	r3, [r7, #4]
    f8b2:	2200      	movs	r2, #0
    f8b4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    f8b8:	e002      	b.n	f8c0 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
    f8ba:	6878      	ldr	r0, [r7, #4]
    f8bc:	4b08      	ldr	r3, [pc, #32]	; (f8e0 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
    f8be:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
    f8c0:	687b      	ldr	r3, [r7, #4]
    f8c2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    f8c6:	f083 0301 	eor.w	r3, r3, #1
    f8ca:	b2db      	uxtb	r3, r3
}
    f8cc:	4618      	mov	r0, r3
    f8ce:	3708      	adds	r7, #8
    f8d0:	46bd      	mov	sp, r7
    f8d2:	bd80      	pop	{r7, pc}
    f8d4:	0000ff79 	.word	0x0000ff79
    f8d8:	0000ff19 	.word	0x0000ff19
    f8dc:	00010271 	.word	0x00010271
    f8e0:	0000fb99 	.word	0x0000fb99

0000f8e4 <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
    f8e4:	b590      	push	{r4, r7, lr}
    f8e6:	b085      	sub	sp, #20
    f8e8:	af00      	add	r7, sp, #0
    f8ea:	6078      	str	r0, [r7, #4]
	bool result=false;
    f8ec:	2300      	movs	r3, #0
    f8ee:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
    f8f0:	687b      	ldr	r3, [r7, #4]
    f8f2:	33bf      	adds	r3, #191	; 0xbf
    f8f4:	4619      	mov	r1, r3
    f8f6:	4817      	ldr	r0, [pc, #92]	; (f954 <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
    f8f8:	4b17      	ldr	r3, [pc, #92]	; (f958 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
    f8fa:	4798      	blx	r3
	UpdateFlapperValveData();
    f8fc:	6878      	ldr	r0, [r7, #4]
    f8fe:	4b17      	ldr	r3, [pc, #92]	; (f95c <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
    f900:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
    f902:	687b      	ldr	r3, [r7, #4]
    f904:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
    f908:	f083 0301 	eor.w	r3, r3, #1
    f90c:	b2db      	uxtb	r3, r3
    f90e:	461c      	mov	r4, r3
    f910:	6878      	ldr	r0, [r7, #4]
    f912:	4b13      	ldr	r3, [pc, #76]	; (f960 <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
    f914:	4798      	blx	r3
    f916:	4603      	mov	r3, r0
    f918:	f083 0301 	eor.w	r3, r3, #1
    f91c:	b2db      	uxtb	r3, r3
    f91e:	4023      	ands	r3, r4
    f920:	2b00      	cmp	r3, #0
    f922:	bf14      	ite	ne
    f924:	2301      	movne	r3, #1
    f926:	2300      	moveq	r3, #0
    f928:	b2db      	uxtb	r3, r3
    f92a:	2b00      	cmp	r3, #0
    f92c:	d00d      	beq.n	f94a <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
    f92e:	687b      	ldr	r3, [r7, #4]
    f930:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f934:	461a      	mov	r2, r3
    f936:	687b      	ldr	r3, [r7, #4]
    f938:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    f93c:	429a      	cmp	r2, r3
    f93e:	dd02      	ble.n	f946 <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
    f940:	2301      	movs	r3, #1
    f942:	73fb      	strb	r3, [r7, #15]
    f944:	e001      	b.n	f94a <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
    f946:	2300      	movs	r3, #0
    f948:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
    f94a:	7bfb      	ldrb	r3, [r7, #15]
}
    f94c:	4618      	mov	r0, r3
    f94e:	3714      	adds	r7, #20
    f950:	46bd      	mov	sp, r7
    f952:	bd90      	pop	{r4, r7, pc}
    f954:	20003348 	.word	0x20003348
    f958:	000111fd 	.word	0x000111fd
    f95c:	0001046d 	.word	0x0001046d
    f960:	0000ff79 	.word	0x0000ff79

0000f964 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
    f964:	b580      	push	{r7, lr}
    f966:	b082      	sub	sp, #8
    f968:	af00      	add	r7, sp, #0
    f96a:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
    f96c:	6878      	ldr	r0, [r7, #4]
    f96e:	4b11      	ldr	r3, [pc, #68]	; (f9b4 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x50>)
    f970:	4798      	blx	r3
    f972:	4603      	mov	r3, r0
    f974:	461a      	mov	r2, r3
    f976:	687b      	ldr	r3, [r7, #4]
    f978:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    f97c:	b2db      	uxtb	r3, r3
    f97e:	f083 0301 	eor.w	r3, r3, #1
    f982:	b2db      	uxtb	r3, r3
    f984:	4013      	ands	r3, r2
    f986:	2b00      	cmp	r3, #0
    f988:	bf14      	ite	ne
    f98a:	2301      	movne	r3, #1
    f98c:	2300      	moveq	r3, #0
    f98e:	b2db      	uxtb	r3, r3
    f990:	2b00      	cmp	r3, #0
    f992:	d003      	beq.n	f99c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
    f994:	6878      	ldr	r0, [r7, #4]
    f996:	4b08      	ldr	r3, [pc, #32]	; (f9b8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x54>)
    f998:	4798      	blx	r3
    f99a:	e002      	b.n	f9a2 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x3e>
	} 
	else
	{
		Control_NBC_StandAlone();
    f99c:	6878      	ldr	r0, [r7, #4]
    f99e:	4b07      	ldr	r3, [pc, #28]	; (f9bc <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x58>)
    f9a0:	4798      	blx	r3
	}
	return resetTimeout;
    f9a2:	687b      	ldr	r3, [r7, #4]
    f9a4:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
    f9a8:	b2db      	uxtb	r3, r3
}
    f9aa:	4618      	mov	r0, r3
    f9ac:	3708      	adds	r7, #8
    f9ae:	46bd      	mov	sp, r7
    f9b0:	bd80      	pop	{r7, pc}
    f9b2:	bf00      	nop
    f9b4:	0000f8e5 	.word	0x0000f8e5
    f9b8:	0000fd69 	.word	0x0000fd69
    f9bc:	0000f9c1 	.word	0x0000f9c1

0000f9c0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
    f9c0:	b580      	push	{r7, lr}
    f9c2:	b082      	sub	sp, #8
    f9c4:	af00      	add	r7, sp, #0
    f9c6:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
    f9c8:	6878      	ldr	r0, [r7, #4]
    f9ca:	4b29      	ldr	r3, [pc, #164]	; (fa70 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
    f9cc:	4798      	blx	r3
    f9ce:	4603      	mov	r3, r0
    f9d0:	2b00      	cmp	r3, #0
    f9d2:	d031      	beq.n	fa38 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
    f9d4:	687b      	ldr	r3, [r7, #4]
    f9d6:	2201      	movs	r2, #1
    f9d8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
			if (standAloneActivated)
    f9dc:	687b      	ldr	r3, [r7, #4]
    f9de:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    f9e2:	2b00      	cmp	r3, #0
    f9e4:	d003      	beq.n	f9ee <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
    f9e6:	6878      	ldr	r0, [r7, #4]
    f9e8:	4b22      	ldr	r3, [pc, #136]	; (fa74 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    f9ea:	4798      	blx	r3
    f9ec:	e038      	b.n	fa60 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
    f9ee:	687b      	ldr	r3, [r7, #4]
    f9f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f9f4:	461a      	mov	r2, r3
    f9f6:	687b      	ldr	r3, [r7, #4]
    f9f8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    f9fc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    fa00:	429a      	cmp	r2, r3
    fa02:	dd0c      	ble.n	fa1e <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
    fa04:	687b      	ldr	r3, [r7, #4]
    fa06:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    fa0a:	43db      	mvns	r3, r3
    fa0c:	b2db      	uxtb	r3, r3
    fa0e:	4619      	mov	r1, r3
    fa10:	6878      	ldr	r0, [r7, #4]
    fa12:	4b19      	ldr	r3, [pc, #100]	; (fa78 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
    fa14:	4798      	blx	r3
					standAloneReturning=true;
    fa16:	687b      	ldr	r3, [r7, #4]
    fa18:	2201      	movs	r2, #1
    fa1a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    fa1e:	687b      	ldr	r3, [r7, #4]
    fa20:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    fa24:	43db      	mvns	r3, r3
    fa26:	b2da      	uxtb	r2, r3
    fa28:	687b      	ldr	r3, [r7, #4]
    fa2a:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
				standAloneActivated=true;
    fa2e:	687b      	ldr	r3, [r7, #4]
    fa30:	2201      	movs	r2, #1
    fa32:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    fa36:	e013      	b.n	fa60 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
    fa38:	687b      	ldr	r3, [r7, #4]
    fa3a:	2200      	movs	r2, #0
    fa3c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		if (standAloneActivated)
    fa40:	687b      	ldr	r3, [r7, #4]
    fa42:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    fa46:	2b00      	cmp	r3, #0
    fa48:	d007      	beq.n	fa5a <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
    fa4a:	687b      	ldr	r3, [r7, #4]
    fa4c:	2200      	movs	r2, #0
    fa4e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
			standAloneReturning=false;
    fa52:	687b      	ldr	r3, [r7, #4]
    fa54:	2200      	movs	r2, #0
    fa56:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
    fa5a:	6878      	ldr	r0, [r7, #4]
    fa5c:	4b05      	ldr	r3, [pc, #20]	; (fa74 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    fa5e:	4798      	blx	r3
		
	}
	return standAloneMode;
    fa60:	687b      	ldr	r3, [r7, #4]
    fa62:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
}
    fa66:	4618      	mov	r0, r3
    fa68:	3708      	adds	r7, #8
    fa6a:	46bd      	mov	sp, r7
    fa6c:	bd80      	pop	{r7, pc}
    fa6e:	bf00      	nop
    fa70:	0000fa7d 	.word	0x0000fa7d
    fa74:	0000f87d 	.word	0x0000f87d
    fa78:	00010271 	.word	0x00010271

0000fa7c <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
    fa7c:	b480      	push	{r7}
    fa7e:	b085      	sub	sp, #20
    fa80:	af00      	add	r7, sp, #0
    fa82:	6078      	str	r0, [r7, #4]
	
	bool result=false;
    fa84:	2300      	movs	r3, #0
    fa86:	73fb      	strb	r3, [r7, #15]
	result=partner->dataStruct.controlOutputs.iAlcFvStandAloneOut;
    fa88:	687b      	ldr	r3, [r7, #4]
    fa8a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    fa8e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
    fa92:	73fb      	strb	r3, [r7, #15]

	return result;
    fa94:	7bfb      	ldrb	r3, [r7, #15]
}
    fa96:	4618      	mov	r0, r3
    fa98:	3714      	adds	r7, #20
    fa9a:	46bd      	mov	sp, r7
    fa9c:	bc80      	pop	{r7}
    fa9e:	4770      	bx	lr

0000faa0 <_ZN22FlapperValveController10SetPartnerEPS_>:



void FlapperValveController::SetPartner(FlapperValveController *part){
    faa0:	b480      	push	{r7}
    faa2:	b083      	sub	sp, #12
    faa4:	af00      	add	r7, sp, #0
    faa6:	6078      	str	r0, [r7, #4]
    faa8:	6039      	str	r1, [r7, #0]
	partner=part;
    faaa:	687b      	ldr	r3, [r7, #4]
    faac:	683a      	ldr	r2, [r7, #0]
    faae:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
    fab2:	bf00      	nop
    fab4:	370c      	adds	r7, #12
    fab6:	46bd      	mov	sp, r7
    fab8:	bc80      	pop	{r7}
    faba:	4770      	bx	lr

0000fabc <_ZN22FlapperValveController14CheckIsClosingEv>:
bool FlapperValveController::CheckIsClosing(void){
    fabc:	b580      	push	{r7, lr}
    fabe:	b082      	sub	sp, #8
    fac0:	af00      	add	r7, sp, #0
    fac2:	6078      	str	r0, [r7, #4]
		if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
    fac4:	687b      	ldr	r3, [r7, #4]
    fac6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    faca:	2b05      	cmp	r3, #5
    facc:	bfd4      	ite	le
    face:	2301      	movle	r3, #1
    fad0:	2300      	movgt	r3, #0
    fad2:	b2da      	uxtb	r2, r3
    fad4:	687b      	ldr	r3, [r7, #4]
    fad6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fada:	2b05      	cmp	r3, #5
    fadc:	bfd4      	ite	le
    fade:	2301      	movle	r3, #1
    fae0:	2300      	movgt	r3, #0
    fae2:	b2db      	uxtb	r3, r3
    fae4:	4013      	ands	r3, r2
    fae6:	b2da      	uxtb	r2, r3
    fae8:	687b      	ldr	r3, [r7, #4]
    faea:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    faee:	2bfa      	cmp	r3, #250	; 0xfa
    faf0:	bfcc      	ite	gt
    faf2:	2301      	movgt	r3, #1
    faf4:	2300      	movle	r3, #0
    faf6:	b2d9      	uxtb	r1, r3
    faf8:	687b      	ldr	r3, [r7, #4]
    fafa:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fafe:	2bf5      	cmp	r3, #245	; 0xf5
    fb00:	bfcc      	ite	gt
    fb02:	2301      	movgt	r3, #1
    fb04:	2300      	movle	r3, #0
    fb06:	b2db      	uxtb	r3, r3
    fb08:	400b      	ands	r3, r1
    fb0a:	b2db      	uxtb	r3, r3
    fb0c:	4313      	orrs	r3, r2
    fb0e:	b2db      	uxtb	r3, r3
    fb10:	461a      	mov	r2, r3
    fb12:	687b      	ldr	r3, [r7, #4]
    fb14:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    fb18:	f083 0301 	eor.w	r3, r3, #1
    fb1c:	b2db      	uxtb	r3, r3
    fb1e:	4619      	mov	r1, r3
    fb20:	687b      	ldr	r3, [r7, #4]
    fb22:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    fb26:	b2db      	uxtb	r3, r3
    fb28:	400b      	ands	r3, r1
    fb2a:	4013      	ands	r3, r2
    fb2c:	2b00      	cmp	r3, #0
    fb2e:	bf14      	ite	ne
    fb30:	2301      	movne	r3, #1
    fb32:	2300      	moveq	r3, #0
    fb34:	b2db      	uxtb	r3, r3
    fb36:	2b00      	cmp	r3, #0
    fb38:	d01f      	beq.n	fb7a <_ZN22FlapperValveController14CheckIsClosingEv+0xbe>
		{
			if (valve_ID==0)
    fb3a:	687b      	ldr	r3, [r7, #4]
    fb3c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    fb40:	2b00      	cmp	r3, #0
    fb42:	d105      	bne.n	fb50 <_ZN22FlapperValveController14CheckIsClosingEv+0x94>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    fb44:	22c8      	movs	r2, #200	; 0xc8
    fb46:	4910      	ldr	r1, [pc, #64]	; (fb88 <_ZN22FlapperValveController14CheckIsClosingEv+0xcc>)
    fb48:	4810      	ldr	r0, [pc, #64]	; (fb8c <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
    fb4a:	4b11      	ldr	r3, [pc, #68]	; (fb90 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
    fb4c:	4798      	blx	r3
    fb4e:	e004      	b.n	fb5a <_ZN22FlapperValveController14CheckIsClosingEv+0x9e>
			} 
			else
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    fb50:	22c8      	movs	r2, #200	; 0xc8
    fb52:	4910      	ldr	r1, [pc, #64]	; (fb94 <_ZN22FlapperValveController14CheckIsClosingEv+0xd8>)
    fb54:	480d      	ldr	r0, [pc, #52]	; (fb8c <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
    fb56:	4b0e      	ldr	r3, [pc, #56]	; (fb90 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
    fb58:	4798      	blx	r3
			}
		
			fullClosedTimeout=false;
    fb5a:	687b      	ldr	r3, [r7, #4]
    fb5c:	2200      	movs	r2, #0
    fb5e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
			gotSetpoint=false;
    fb62:	687b      	ldr	r3, [r7, #4]
    fb64:	2200      	movs	r2, #0
    fb66:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			closing=true;
    fb6a:	687b      	ldr	r3, [r7, #4]
    fb6c:	2201      	movs	r2, #1
    fb6e:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
			unLockTimeout=true;
    fb72:	687b      	ldr	r3, [r7, #4]
    fb74:	2201      	movs	r2, #1
    fb76:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		}
		return closing;
    fb7a:	687b      	ldr	r3, [r7, #4]
    fb7c:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
	
}
    fb80:	4618      	mov	r0, r3
    fb82:	3708      	adds	r7, #8
    fb84:	46bd      	mov	sp, r7
    fb86:	bd80      	pop	{r7, pc}
    fb88:	0000f5f5 	.word	0x0000f5f5
    fb8c:	20001d2c 	.word	0x20001d2c
    fb90:	0000dffd 	.word	0x0000dffd
    fb94:	0000f615 	.word	0x0000f615

0000fb98 <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
    fb98:	b590      	push	{r4, r7, lr}
    fb9a:	b083      	sub	sp, #12
    fb9c:	af00      	add	r7, sp, #0
    fb9e:	6078      	str	r0, [r7, #4]
	if (isControlling)
    fba0:	687b      	ldr	r3, [r7, #4]
    fba2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
    fba6:	2b00      	cmp	r3, #0
    fba8:	f000 80c9 	beq.w	fd3e <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
    fbac:	687b      	ldr	r3, [r7, #4]
    fbae:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
    fbb2:	687b      	ldr	r3, [r7, #4]
    fbb4:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
    fbb8:	4313      	orrs	r3, r2
    fbba:	b2db      	uxtb	r3, r3
    fbbc:	461a      	mov	r2, r3
    fbbe:	687b      	ldr	r3, [r7, #4]
    fbc0:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    fbc4:	4013      	ands	r3, r2
    fbc6:	687a      	ldr	r2, [r7, #4]
    fbc8:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
    fbcc:	b2d2      	uxtb	r2, r2
    fbce:	4013      	ands	r3, r2
    fbd0:	2b00      	cmp	r3, #0
    fbd2:	bf14      	ite	ne
    fbd4:	2301      	movne	r3, #1
    fbd6:	2300      	moveq	r3, #0
    fbd8:	b2db      	uxtb	r3, r3
    fbda:	2b00      	cmp	r3, #0
    fbdc:	d003      	beq.n	fbe6 <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
    fbde:	6878      	ldr	r0, [r7, #4]
    fbe0:	4b59      	ldr	r3, [pc, #356]	; (fd48 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    fbe2:	4798      	blx	r3
    fbe4:	e0ab      	b.n	fd3e <_ZN22FlapperValveController15ControlMovementEv+0x1a6>

		} 
		else
		{
			
			CheckIsClosing();
    fbe6:	6878      	ldr	r0, [r7, #4]
    fbe8:	4b58      	ldr	r3, [pc, #352]	; (fd4c <_ZN22FlapperValveController15ControlMovementEv+0x1b4>)
    fbea:	4798      	blx	r3
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
    fbec:	687b      	ldr	r3, [r7, #4]
    fbee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fbf2:	461a      	mov	r2, r3
    fbf4:	687b      	ldr	r3, [r7, #4]
    fbf6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    fbfa:	1ad3      	subs	r3, r2, r3
    fbfc:	2b00      	cmp	r3, #0
    fbfe:	bfb8      	it	lt
    fc00:	425b      	neglt	r3, r3
    fc02:	687a      	ldr	r2, [r7, #4]
    fc04:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
    fc08:	4293      	cmp	r3, r2
    fc0a:	bfcc      	ite	gt
    fc0c:	2301      	movgt	r3, #1
    fc0e:	2300      	movle	r3, #0
    fc10:	b2db      	uxtb	r3, r3
    fc12:	461a      	mov	r2, r3
    fc14:	687b      	ldr	r3, [r7, #4]
    fc16:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    fc1a:	4313      	orrs	r3, r2
    fc1c:	2b00      	cmp	r3, #0
    fc1e:	d078      	beq.n	fd12 <_ZN22FlapperValveController15ControlMovementEv+0x17a>
			{
				if (IsFlapperMoving())
    fc20:	6878      	ldr	r0, [r7, #4]
    fc22:	4b4b      	ldr	r3, [pc, #300]	; (fd50 <_ZN22FlapperValveController15ControlMovementEv+0x1b8>)
    fc24:	4798      	blx	r3
    fc26:	4603      	mov	r3, r0
    fc28:	2b00      	cmp	r3, #0
    fc2a:	d04a      	beq.n	fcc2 <_ZN22FlapperValveController15ControlMovementEv+0x12a>
				{
					if (closing)
    fc2c:	687b      	ldr	r3, [r7, #4]
    fc2e:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    fc32:	2b00      	cmp	r3, #0
    fc34:	d00e      	beq.n	fc54 <_ZN22FlapperValveController15ControlMovementEv+0xbc>
					{
						if (keepControlling)
    fc36:	687b      	ldr	r3, [r7, #4]
    fc38:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
    fc3c:	2b00      	cmp	r3, #0
    fc3e:	d053      	beq.n	fce8 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						{
							if (fullClosedTimeout)
    fc40:	687b      	ldr	r3, [r7, #4]
    fc42:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    fc46:	b2db      	uxtb	r3, r3
    fc48:	2b00      	cmp	r3, #0
    fc4a:	d04d      	beq.n	fce8 <_ZN22FlapperValveController15ControlMovementEv+0x150>
							{
								StopValveAtLimit();
    fc4c:	6878      	ldr	r0, [r7, #4]
    fc4e:	4b3e      	ldr	r3, [pc, #248]	; (fd48 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    fc50:	4798      	blx	r3
    fc52:	e049      	b.n	fce8 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
    fc54:	687b      	ldr	r3, [r7, #4]
    fc56:	f893 40ac 	ldrb.w	r4, [r3, #172]	; 0xac
    fc5a:	6878      	ldr	r0, [r7, #4]
    fc5c:	4b3d      	ldr	r3, [pc, #244]	; (fd54 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>)
    fc5e:	4798      	blx	r3
    fc60:	4603      	mov	r3, r0
    fc62:	429c      	cmp	r4, r3
    fc64:	bf14      	ite	ne
    fc66:	2301      	movne	r3, #1
    fc68:	2300      	moveq	r3, #0
    fc6a:	b2db      	uxtb	r3, r3
    fc6c:	2b00      	cmp	r3, #0
    fc6e:	d00a      	beq.n	fc86 <_ZN22FlapperValveController15ControlMovementEv+0xee>
						{
							StopMotor();
    fc70:	6878      	ldr	r0, [r7, #4]
    fc72:	4b39      	ldr	r3, [pc, #228]	; (fd58 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    fc74:	4798      	blx	r3
							RemoveTimeoutTask();
    fc76:	6878      	ldr	r0, [r7, #4]
    fc78:	4b38      	ldr	r3, [pc, #224]	; (fd5c <_ZN22FlapperValveController15ControlMovementEv+0x1c4>)
    fc7a:	4798      	blx	r3
							keepControlling=true;
    fc7c:	687b      	ldr	r3, [r7, #4]
    fc7e:	2201      	movs	r2, #1
    fc80:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    fc84:	e030      	b.n	fce8 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							if (timeoutFlapperValveController)
    fc86:	687b      	ldr	r3, [r7, #4]
    fc88:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    fc8c:	b2db      	uxtb	r3, r3
    fc8e:	2b00      	cmp	r3, #0
    fc90:	d003      	beq.n	fc9a <_ZN22FlapperValveController15ControlMovementEv+0x102>
							{
								StopMotor();
    fc92:	6878      	ldr	r0, [r7, #4]
    fc94:	4b30      	ldr	r3, [pc, #192]	; (fd58 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    fc96:	4798      	blx	r3
    fc98:	e026      	b.n	fce8 <_ZN22FlapperValveController15ControlMovementEv+0x150>
								
							}
							else
							{
								if (keepControlling)
    fc9a:	687b      	ldr	r3, [r7, #4]
    fc9c:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
    fca0:	2b00      	cmp	r3, #0
    fca2:	d021      	beq.n	fce8 <_ZN22FlapperValveController15ControlMovementEv+0x150>
								{
									if (timeoutKeepControlling)
    fca4:	687b      	ldr	r3, [r7, #4]
    fca6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    fcaa:	b2db      	uxtb	r3, r3
    fcac:	2b00      	cmp	r3, #0
    fcae:	d003      	beq.n	fcb8 <_ZN22FlapperValveController15ControlMovementEv+0x120>
									{
										StopMotor();
    fcb0:	6878      	ldr	r0, [r7, #4]
    fcb2:	4b29      	ldr	r3, [pc, #164]	; (fd58 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    fcb4:	4798      	blx	r3
    fcb6:	e017      	b.n	fce8 <_ZN22FlapperValveController15ControlMovementEv+0x150>
									}
									else
									{
										KeepControlling();
    fcb8:	2100      	movs	r1, #0
    fcba:	6878      	ldr	r0, [r7, #4]
    fcbc:	4b28      	ldr	r3, [pc, #160]	; (fd60 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
    fcbe:	4798      	blx	r3
    fcc0:	e012      	b.n	fce8 <_ZN22FlapperValveController15ControlMovementEv+0x150>
					}
					
				}
				else
				{
					if (keepControlling)
    fcc2:	687b      	ldr	r3, [r7, #4]
    fcc4:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
    fcc8:	2b00      	cmp	r3, #0
    fcca:	d00d      	beq.n	fce8 <_ZN22FlapperValveController15ControlMovementEv+0x150>
					{
						if (timeoutKeepControlling)
    fccc:	687b      	ldr	r3, [r7, #4]
    fcce:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    fcd2:	b2db      	uxtb	r3, r3
    fcd4:	2b00      	cmp	r3, #0
    fcd6:	d003      	beq.n	fce0 <_ZN22FlapperValveController15ControlMovementEv+0x148>
						{
							StopValveinBetween();
    fcd8:	6878      	ldr	r0, [r7, #4]
    fcda:	4b22      	ldr	r3, [pc, #136]	; (fd64 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
    fcdc:	4798      	blx	r3
    fcde:	e003      	b.n	fce8 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							KeepControlling();
    fce0:	2100      	movs	r1, #0
    fce2:	6878      	ldr	r0, [r7, #4]
    fce4:	4b1e      	ldr	r3, [pc, #120]	; (fd60 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
    fce6:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
    fce8:	687b      	ldr	r3, [r7, #4]
    fcea:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fcee:	461a      	mov	r2, r3
    fcf0:	687b      	ldr	r3, [r7, #4]
    fcf2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    fcf6:	1ad3      	subs	r3, r2, r3
    fcf8:	2b00      	cmp	r3, #0
    fcfa:	bfb8      	it	lt
    fcfc:	425b      	neglt	r3, r3
    fcfe:	687a      	ldr	r2, [r7, #4]
    fd00:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
    fd04:	4293      	cmp	r3, r2
    fd06:	dd1a      	ble.n	fd3e <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				{
					gotSetpoint=false;
    fd08:	687b      	ldr	r3, [r7, #4]
    fd0a:	2200      	movs	r2, #0
    fd0c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    fd10:	e015      	b.n	fd3e <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				
				
			}
			else
			{
				if (closing)
    fd12:	687b      	ldr	r3, [r7, #4]
    fd14:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    fd18:	2b00      	cmp	r3, #0
    fd1a:	d009      	beq.n	fd30 <_ZN22FlapperValveController15ControlMovementEv+0x198>
				{
					if (fullClosedTimeout)
    fd1c:	687b      	ldr	r3, [r7, #4]
    fd1e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    fd22:	b2db      	uxtb	r3, r3
    fd24:	2b00      	cmp	r3, #0
    fd26:	d00a      	beq.n	fd3e <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
						StopValveAtLimit();
    fd28:	6878      	ldr	r0, [r7, #4]
    fd2a:	4b07      	ldr	r3, [pc, #28]	; (fd48 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    fd2c:	4798      	blx	r3
    fd2e:	e006      	b.n	fd3e <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
					}
				} 
				else
				{
					StopValveinBetween();
    fd30:	6878      	ldr	r0, [r7, #4]
    fd32:	4b0c      	ldr	r3, [pc, #48]	; (fd64 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
    fd34:	4798      	blx	r3
					gotSetpoint=true;
    fd36:	687b      	ldr	r3, [r7, #4]
    fd38:	2201      	movs	r2, #1
    fd3a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		
	} 
	else
	{
	}
	return 0;
    fd3e:	2300      	movs	r3, #0
	
}
    fd40:	4618      	mov	r0, r3
    fd42:	370c      	adds	r7, #12
    fd44:	46bd      	mov	sp, r7
    fd46:	bd90      	pop	{r4, r7, pc}
    fd48:	00010095 	.word	0x00010095
    fd4c:	0000fabd 	.word	0x0000fabd
    fd50:	0000ffed 	.word	0x0000ffed
    fd54:	0000f7ed 	.word	0x0000f7ed
    fd58:	0000ffc1 	.word	0x0000ffc1
    fd5c:	00010755 	.word	0x00010755
    fd60:	00010435 	.word	0x00010435
    fd64:	0001012d 	.word	0x0001012d

0000fd68 <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
    fd68:	b580      	push	{r7, lr}
    fd6a:	b084      	sub	sp, #16
    fd6c:	af00      	add	r7, sp, #0
    fd6e:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
    fd70:	2052      	movs	r0, #82	; 0x52
    fd72:	4b5a      	ldr	r3, [pc, #360]	; (fedc <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
    fd74:	4798      	blx	r3
    fd76:	4603      	mov	r3, r0
    fd78:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
    fd7a:	6878      	ldr	r0, [r7, #4]
    fd7c:	4b58      	ldr	r3, [pc, #352]	; (fee0 <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
    fd7e:	4798      	blx	r3
    fd80:	4603      	mov	r3, r0
    fd82:	2b00      	cmp	r3, #0
    fd84:	f000 80a5 	beq.w	fed2 <_ZN22FlapperValveController18ResetValvePositionEv+0x16a>
	{
		
		localSetpoint=currentMaximum;
    fd88:	687b      	ldr	r3, [r7, #4]
    fd8a:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    fd8e:	73bb      	strb	r3, [r7, #14]
		
		singlefv->SetEnable(false);
    fd90:	687b      	ldr	r3, [r7, #4]
    fd92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fd94:	2100      	movs	r1, #0
    fd96:	4618      	mov	r0, r3
    fd98:	4b52      	ldr	r3, [pc, #328]	; (fee4 <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
    fd9a:	4798      	blx	r3
		singlefv->SetInvalidPosition(false);
    fd9c:	687b      	ldr	r3, [r7, #4]
    fd9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fda0:	2100      	movs	r1, #0
    fda2:	4618      	mov	r0, r3
    fda4:	4b50      	ldr	r3, [pc, #320]	; (fee8 <_ZN22FlapperValveController18ResetValvePositionEv+0x180>)
    fda6:	4798      	blx	r3
		singlefv->ClearMoveFault(false);
    fda8:	687b      	ldr	r3, [r7, #4]
    fdaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fdac:	2100      	movs	r1, #0
    fdae:	4618      	mov	r0, r3
    fdb0:	4b4e      	ldr	r3, [pc, #312]	; (feec <_ZN22FlapperValveController18ResetValvePositionEv+0x184>)
    fdb2:	4798      	blx	r3
		delay_ms(100);
    fdb4:	2064      	movs	r0, #100	; 0x64
    fdb6:	4b4e      	ldr	r3, [pc, #312]	; (fef0 <_ZN22FlapperValveController18ResetValvePositionEv+0x188>)
    fdb8:	4798      	blx	r3
		if (singlefv->ReadActualPosition()>localSetpoint)
    fdba:	687b      	ldr	r3, [r7, #4]
    fdbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fdbe:	4618      	mov	r0, r3
    fdc0:	4b4c      	ldr	r3, [pc, #304]	; (fef4 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    fdc2:	4798      	blx	r3
    fdc4:	4603      	mov	r3, r0
    fdc6:	461a      	mov	r2, r3
    fdc8:	7bbb      	ldrb	r3, [r7, #14]
    fdca:	429a      	cmp	r2, r3
    fdcc:	bfcc      	ite	gt
    fdce:	2301      	movgt	r3, #1
    fdd0:	2300      	movle	r3, #0
    fdd2:	b2db      	uxtb	r3, r3
    fdd4:	2b00      	cmp	r3, #0
    fdd6:	d006      	beq.n	fde6 <_ZN22FlapperValveController18ResetValvePositionEv+0x7e>
		{
			singlefv->SetDirection(true);
    fdd8:	687b      	ldr	r3, [r7, #4]
    fdda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fddc:	2101      	movs	r1, #1
    fdde:	4618      	mov	r0, r3
    fde0:	4b45      	ldr	r3, [pc, #276]	; (fef8 <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
    fde2:	4798      	blx	r3
    fde4:	e005      	b.n	fdf2 <_ZN22FlapperValveController18ResetValvePositionEv+0x8a>
		}
		else
		{
			singlefv->SetDirection(false);
    fde6:	687b      	ldr	r3, [r7, #4]
    fde8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fdea:	2100      	movs	r1, #0
    fdec:	4618      	mov	r0, r3
    fdee:	4b42      	ldr	r3, [pc, #264]	; (fef8 <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
    fdf0:	4798      	blx	r3
		}
		singlefv->SetInvalidPosition(true);
    fdf2:	687b      	ldr	r3, [r7, #4]
    fdf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fdf6:	2101      	movs	r1, #1
    fdf8:	4618      	mov	r0, r3
    fdfa:	4b3b      	ldr	r3, [pc, #236]	; (fee8 <_ZN22FlapperValveController18ResetValvePositionEv+0x180>)
    fdfc:	4798      	blx	r3
		singlefv->ClearMoveFault(true);
    fdfe:	687b      	ldr	r3, [r7, #4]
    fe00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe02:	2101      	movs	r1, #1
    fe04:	4618      	mov	r0, r3
    fe06:	4b39      	ldr	r3, [pc, #228]	; (feec <_ZN22FlapperValveController18ResetValvePositionEv+0x184>)
    fe08:	4798      	blx	r3
		singlefv->WriteSetpoint(localSetpoint);
    fe0a:	687b      	ldr	r3, [r7, #4]
    fe0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe0e:	7bba      	ldrb	r2, [r7, #14]
    fe10:	4611      	mov	r1, r2
    fe12:	4618      	mov	r0, r3
    fe14:	4b39      	ldr	r3, [pc, #228]	; (fefc <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
    fe16:	4798      	blx	r3
		

		currentPosition=singlefv->ReadActualPosition();
    fe18:	687b      	ldr	r3, [r7, #4]
    fe1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe1c:	4618      	mov	r0, r3
    fe1e:	4b35      	ldr	r3, [pc, #212]	; (fef4 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    fe20:	4798      	blx	r3
    fe22:	4603      	mov	r3, r0
    fe24:	461a      	mov	r2, r3
    fe26:	687b      	ldr	r3, [r7, #4]
    fe28:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		
		resetTimeout=false;
    fe2c:	687b      	ldr	r3, [r7, #4]
    fe2e:	2200      	movs	r2, #0
    fe30:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		if (valve_ID==0)
    fe34:	687b      	ldr	r3, [r7, #4]
    fe36:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    fe3a:	2b00      	cmp	r3, #0
    fe3c:	d106      	bne.n	fe4c <_ZN22FlapperValveController18ResetValvePositionEv+0xe4>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve1Timeout),1000);
    fe3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fe42:	492f      	ldr	r1, [pc, #188]	; (ff00 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
    fe44:	482f      	ldr	r0, [pc, #188]	; (ff04 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
    fe46:	4b30      	ldr	r3, [pc, #192]	; (ff08 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
    fe48:	4798      	blx	r3
    fe4a:	e005      	b.n	fe58 <_ZN22FlapperValveController18ResetValvePositionEv+0xf0>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve2Timeout),1000);
    fe4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fe50:	492e      	ldr	r1, [pc, #184]	; (ff0c <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
    fe52:	482c      	ldr	r0, [pc, #176]	; (ff04 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
    fe54:	4b2c      	ldr	r3, [pc, #176]	; (ff08 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
    fe56:	4798      	blx	r3
		}
	
		
		singlefv->SetEnable(true);
    fe58:	687b      	ldr	r3, [r7, #4]
    fe5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe5c:	2101      	movs	r1, #1
    fe5e:	4618      	mov	r0, r3
    fe60:	4b20      	ldr	r3, [pc, #128]	; (fee4 <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
    fe62:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    fe64:	687b      	ldr	r3, [r7, #4]
    fe66:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fe6a:	461a      	mov	r2, r3
    fe6c:	7bbb      	ldrb	r3, [r7, #14]
    fe6e:	1ad3      	subs	r3, r2, r3
    fe70:	2b00      	cmp	r3, #0
    fe72:	bfb8      	it	lt
    fe74:	425b      	neglt	r3, r3
    fe76:	2b06      	cmp	r3, #6
    fe78:	bfcc      	ite	gt
    fe7a:	2301      	movgt	r3, #1
    fe7c:	2300      	movle	r3, #0
    fe7e:	b2db      	uxtb	r3, r3
    fe80:	461a      	mov	r2, r3
    fe82:	687b      	ldr	r3, [r7, #4]
    fe84:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
    fe88:	b2db      	uxtb	r3, r3
    fe8a:	f083 0301 	eor.w	r3, r3, #1
    fe8e:	b2db      	uxtb	r3, r3
    fe90:	4013      	ands	r3, r2
    fe92:	2b00      	cmp	r3, #0
    fe94:	bf14      	ite	ne
    fe96:	2301      	movne	r3, #1
    fe98:	2300      	moveq	r3, #0
    fe9a:	b2db      	uxtb	r3, r3
    fe9c:	2b00      	cmp	r3, #0
    fe9e:	d00d      	beq.n	febc <_ZN22FlapperValveController18ResetValvePositionEv+0x154>

		{
			gpio_toggle_pin_level(LED0);
    fea0:	2052      	movs	r0, #82	; 0x52
    fea2:	4b1b      	ldr	r3, [pc, #108]	; (ff10 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
    fea4:	4798      	blx	r3
			currentPosition=singlefv->ReadActualPosition();
    fea6:	687b      	ldr	r3, [r7, #4]
    fea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    feaa:	4618      	mov	r0, r3
    feac:	4b11      	ldr	r3, [pc, #68]	; (fef4 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    feae:	4798      	blx	r3
    feb0:	4603      	mov	r3, r0
    feb2:	461a      	mov	r2, r3
    feb4:	687b      	ldr	r3, [r7, #4]
    feb6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    feba:	e7d3      	b.n	fe64 <_ZN22FlapperValveController18ResetValvePositionEv+0xfc>

		}
		singlefv->SetEnable(false);
    febc:	687b      	ldr	r3, [r7, #4]
    febe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fec0:	2100      	movs	r1, #0
    fec2:	4618      	mov	r0, r3
    fec4:	4b07      	ldr	r3, [pc, #28]	; (fee4 <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
    fec6:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
    fec8:	7bfb      	ldrb	r3, [r7, #15]
    feca:	4619      	mov	r1, r3
    fecc:	2052      	movs	r0, #82	; 0x52
    fece:	4b11      	ldr	r3, [pc, #68]	; (ff14 <_ZN22FlapperValveController18ResetValvePositionEv+0x1ac>)
    fed0:	4798      	blx	r3
	} 
	else
	{
	}
}
    fed2:	bf00      	nop
    fed4:	3710      	adds	r7, #16
    fed6:	46bd      	mov	sp, r7
    fed8:	bd80      	pop	{r7, pc}
    feda:	bf00      	nop
    fedc:	0000f561 	.word	0x0000f561
    fee0:	0000f8e5 	.word	0x0000f8e5
    fee4:	00010b85 	.word	0x00010b85
    fee8:	00010cf5 	.word	0x00010cf5
    feec:	00010c7d 	.word	0x00010c7d
    fef0:	00002a81 	.word	0x00002a81
    fef4:	00010da5 	.word	0x00010da5
    fef8:	00010c05 	.word	0x00010c05
    fefc:	00010d6d 	.word	0x00010d6d
    ff00:	0000f635 	.word	0x0000f635
    ff04:	20001d2c 	.word	0x20001d2c
    ff08:	0000dffd 	.word	0x0000dffd
    ff0c:	0000f655 	.word	0x0000f655
    ff10:	0000f531 	.word	0x0000f531
    ff14:	0000f4f9 	.word	0x0000f4f9

0000ff18 <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
    ff18:	b580      	push	{r7, lr}
    ff1a:	b082      	sub	sp, #8
    ff1c:	af00      	add	r7, sp, #0
    ff1e:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
    ff20:	687b      	ldr	r3, [r7, #4]
    ff22:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
    ff26:	2b00      	cmp	r3, #0
    ff28:	d014      	beq.n	ff54 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
    ff2a:	687b      	ldr	r3, [r7, #4]
    ff2c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    ff30:	2b00      	cmp	r3, #0
    ff32:	d003      	beq.n	ff3c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
    ff34:	6878      	ldr	r0, [r7, #4]
    ff36:	4b0e      	ldr	r3, [pc, #56]	; (ff70 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
    ff38:	4798      	blx	r3
    ff3a:	e013      	b.n	ff64 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    ff3c:	687b      	ldr	r3, [r7, #4]
    ff3e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    ff42:	4619      	mov	r1, r3
    ff44:	6878      	ldr	r0, [r7, #4]
    ff46:	4b0b      	ldr	r3, [pc, #44]	; (ff74 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    ff48:	4798      	blx	r3
			NBC_Activated=false;
    ff4a:	687b      	ldr	r3, [r7, #4]
    ff4c:	2200      	movs	r2, #0
    ff4e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    ff52:	e007      	b.n	ff64 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
    ff54:	21ff      	movs	r1, #255	; 0xff
    ff56:	6878      	ldr	r0, [r7, #4]
    ff58:	4b06      	ldr	r3, [pc, #24]	; (ff74 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    ff5a:	4798      	blx	r3
			NBC_Activated=true;
    ff5c:	687b      	ldr	r3, [r7, #4]
    ff5e:	2201      	movs	r2, #1
    ff60:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}

	return 0;
    ff64:	2300      	movs	r3, #0
	
}
    ff66:	4618      	mov	r0, r3
    ff68:	3708      	adds	r7, #8
    ff6a:	46bd      	mov	sp, r7
    ff6c:	bd80      	pop	{r7, pc}
    ff6e:	bf00      	nop
    ff70:	0000fb99 	.word	0x0000fb99
    ff74:	00010271 	.word	0x00010271

0000ff78 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
    ff78:	b480      	push	{r7}
    ff7a:	b083      	sub	sp, #12
    ff7c:	af00      	add	r7, sp, #0
    ff7e:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
    ff80:	687b      	ldr	r3, [r7, #4]
    ff82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    ff86:	461a      	mov	r2, r3
    ff88:	687b      	ldr	r3, [r7, #4]
    ff8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
    ff8e:	4013      	ands	r3, r2
    ff90:	687a      	ldr	r2, [r7, #4]
    ff92:	f892 20b5 	ldrb.w	r2, [r2, #181]	; 0xb5
    ff96:	4313      	orrs	r3, r2
    ff98:	2b00      	cmp	r3, #0
    ff9a:	bf14      	ite	ne
    ff9c:	2301      	movne	r3, #1
    ff9e:	2300      	moveq	r3, #0
    ffa0:	b2da      	uxtb	r2, r3
    ffa2:	687b      	ldr	r3, [r7, #4]
    ffa4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	currentMaximum=255;
    ffa8:	687b      	ldr	r3, [r7, #4]
    ffaa:	22ff      	movs	r2, #255	; 0xff
    ffac:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	return NBC_Mode;
    ffb0:	687b      	ldr	r3, [r7, #4]
    ffb2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
}
    ffb6:	4618      	mov	r0, r3
    ffb8:	370c      	adds	r7, #12
    ffba:	46bd      	mov	sp, r7
    ffbc:	bc80      	pop	{r7}
    ffbe:	4770      	bx	lr

0000ffc0 <_ZN22FlapperValveController9StopMotorEv>:
	}
	return NBC_Remote;
}


uint8_t	FlapperValveController::StopMotor(){
    ffc0:	b580      	push	{r7, lr}
    ffc2:	b082      	sub	sp, #8
    ffc4:	af00      	add	r7, sp, #0
    ffc6:	6078      	str	r0, [r7, #4]
	singlefv->SetEnable(false);
    ffc8:	687b      	ldr	r3, [r7, #4]
    ffca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ffcc:	2100      	movs	r1, #0
    ffce:	4618      	mov	r0, r3
    ffd0:	4b05      	ldr	r3, [pc, #20]	; (ffe8 <_ZN22FlapperValveController9StopMotorEv+0x28>)
    ffd2:	4798      	blx	r3
	flapperValveIsMoving=false;
    ffd4:	687b      	ldr	r3, [r7, #4]
    ffd6:	2200      	movs	r2, #0
    ffd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	
	return 0;
    ffdc:	2300      	movs	r3, #0
}
    ffde:	4618      	mov	r0, r3
    ffe0:	3708      	adds	r7, #8
    ffe2:	46bd      	mov	sp, r7
    ffe4:	bd80      	pop	{r7, pc}
    ffe6:	bf00      	nop
    ffe8:	00010b85 	.word	0x00010b85

0000ffec <_ZN22FlapperValveController15IsFlapperMovingEv>:

bool FlapperValveController::IsFlapperMoving(void){
    ffec:	b480      	push	{r7}
    ffee:	b085      	sub	sp, #20
    fff0:	af00      	add	r7, sp, #0
    fff2:	6078      	str	r0, [r7, #4]
	bool_result=true;
    fff4:	687b      	ldr	r3, [r7, #4]
    fff6:	2201      	movs	r2, #1
    fff8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	if (flapperValveIsMoving)
    fffc:	687b      	ldr	r3, [r7, #4]
    fffe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   10002:	b2db      	uxtb	r3, r3
   10004:	2b00      	cmp	r3, #0
   10006:	d03c      	beq.n	10082 <STACK_SIZE+0x82>
	{
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   10008:	2300      	movs	r3, #0
   1000a:	73fb      	strb	r3, [r7, #15]
   1000c:	7bfb      	ldrb	r3, [r7, #15]
   1000e:	2b0e      	cmp	r3, #14
   10010:	dc26      	bgt.n	10060 <STACK_SIZE+0x60>
		{
			if (positions[valve_ID][i]==positions[valve_ID][i+1])
   10012:	687b      	ldr	r3, [r7, #4]
   10014:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   10018:	687a      	ldr	r2, [r7, #4]
   1001a:	3330      	adds	r3, #48	; 0x30
   1001c:	009b      	lsls	r3, r3, #2
   1001e:	4413      	add	r3, r2
   10020:	685a      	ldr	r2, [r3, #4]
   10022:	7bfb      	ldrb	r3, [r7, #15]
   10024:	4413      	add	r3, r2
   10026:	781a      	ldrb	r2, [r3, #0]
   10028:	687b      	ldr	r3, [r7, #4]
   1002a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   1002e:	6879      	ldr	r1, [r7, #4]
   10030:	3330      	adds	r3, #48	; 0x30
   10032:	009b      	lsls	r3, r3, #2
   10034:	440b      	add	r3, r1
   10036:	6859      	ldr	r1, [r3, #4]
   10038:	7bfb      	ldrb	r3, [r7, #15]
   1003a:	3301      	adds	r3, #1
   1003c:	440b      	add	r3, r1
   1003e:	781b      	ldrb	r3, [r3, #0]
   10040:	429a      	cmp	r2, r3
   10042:	d104      	bne.n	1004e <STACK_SIZE+0x4e>
			{
				bool_result=false;
   10044:	687b      	ldr	r3, [r7, #4]
   10046:	2200      	movs	r2, #0
   10048:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
   1004c:	e004      	b.n	10058 <STACK_SIZE+0x58>
			}
			else
			{
				bool_result=true;
   1004e:	687b      	ldr	r3, [r7, #4]
   10050:	2201      	movs	r2, #1
   10052:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				break;
   10056:	e003      	b.n	10060 <STACK_SIZE+0x60>
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   10058:	7bfb      	ldrb	r3, [r7, #15]
   1005a:	3301      	adds	r3, #1
   1005c:	73fb      	strb	r3, [r7, #15]
   1005e:	e7d5      	b.n	1000c <STACK_SIZE+0xc>
			}
			
		}
		flapperValveIsMoving&=bool_result;
   10060:	687b      	ldr	r3, [r7, #4]
   10062:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   10066:	b2db      	uxtb	r3, r3
   10068:	461a      	mov	r2, r3
   1006a:	687b      	ldr	r3, [r7, #4]
   1006c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   10070:	4013      	ands	r3, r2
   10072:	2b00      	cmp	r3, #0
   10074:	bf14      	ite	ne
   10076:	2301      	movne	r3, #1
   10078:	2300      	moveq	r3, #0
   1007a:	b2da      	uxtb	r2, r3
   1007c:	687b      	ldr	r3, [r7, #4]
   1007e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	} 
	else
	{
	}
	return flapperValveIsMoving;
   10082:	687b      	ldr	r3, [r7, #4]
   10084:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   10088:	b2db      	uxtb	r3, r3
	
}
   1008a:	4618      	mov	r0, r3
   1008c:	3714      	adds	r7, #20
   1008e:	46bd      	mov	sp, r7
   10090:	bc80      	pop	{r7}
   10092:	4770      	bx	lr

00010094 <_ZN22FlapperValveController16StopValveAtLimitEv>:

void	FlapperValveController::StopValveAtLimit(void){
   10094:	b580      	push	{r7, lr}
   10096:	b082      	sub	sp, #8
   10098:	af00      	add	r7, sp, #0
   1009a:	6078      	str	r0, [r7, #4]
		if (closing)
   1009c:	687b      	ldr	r3, [r7, #4]
   1009e:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
   100a2:	2b00      	cmp	r3, #0
   100a4:	d003      	beq.n	100ae <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
   100a6:	687b      	ldr	r3, [r7, #4]
   100a8:	2200      	movs	r2, #0
   100aa:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		}
	
		StopMotor();
   100ae:	6878      	ldr	r0, [r7, #4]
   100b0:	4b17      	ldr	r3, [pc, #92]	; (10110 <_ZN22FlapperValveController16StopValveAtLimitEv+0x7c>)
   100b2:	4798      	blx	r3
		if (valve_ID==0)
   100b4:	687b      	ldr	r3, [r7, #4]
   100b6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   100ba:	2b00      	cmp	r3, #0
   100bc:	d108      	bne.n	100d0 <_ZN22FlapperValveController16StopValveAtLimitEv+0x3c>
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   100be:	4915      	ldr	r1, [pc, #84]	; (10114 <_ZN22FlapperValveController16StopValveAtLimitEv+0x80>)
   100c0:	4815      	ldr	r0, [pc, #84]	; (10118 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   100c2:	4b16      	ldr	r3, [pc, #88]	; (1011c <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   100c4:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed));
   100c6:	4916      	ldr	r1, [pc, #88]	; (10120 <_ZN22FlapperValveController16StopValveAtLimitEv+0x8c>)
   100c8:	4813      	ldr	r0, [pc, #76]	; (10118 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   100ca:	4b14      	ldr	r3, [pc, #80]	; (1011c <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   100cc:	4798      	blx	r3
   100ce:	e007      	b.n	100e0 <_ZN22FlapperValveController16StopValveAtLimitEv+0x4c>
		} 
		else
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   100d0:	4914      	ldr	r1, [pc, #80]	; (10124 <_ZN22FlapperValveController16StopValveAtLimitEv+0x90>)
   100d2:	4811      	ldr	r0, [pc, #68]	; (10118 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   100d4:	4b11      	ldr	r3, [pc, #68]	; (1011c <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   100d6:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed));
   100d8:	4913      	ldr	r1, [pc, #76]	; (10128 <_ZN22FlapperValveController16StopValveAtLimitEv+0x94>)
   100da:	480f      	ldr	r0, [pc, #60]	; (10118 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   100dc:	4b0f      	ldr	r3, [pc, #60]	; (1011c <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   100de:	4798      	blx	r3
		}
	
		timeoutFlapperValveController=false;
   100e0:	687b      	ldr	r3, [r7, #4]
   100e2:	2200      	movs	r2, #0
   100e4:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
   100e8:	687b      	ldr	r3, [r7, #4]
   100ea:	2200      	movs	r2, #0
   100ec:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		unLockTimeout=false;
   100f0:	687b      	ldr	r3, [r7, #4]
   100f2:	2200      	movs	r2, #0
   100f4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		paused=false;
   100f8:	687b      	ldr	r3, [r7, #4]
   100fa:	2200      	movs	r2, #0
   100fc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		keepControlling=false;
   10100:	687b      	ldr	r3, [r7, #4]
   10102:	2200      	movs	r2, #0
   10104:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
   10108:	bf00      	nop
   1010a:	3708      	adds	r7, #8
   1010c:	46bd      	mov	sp, r7
   1010e:	bd80      	pop	{r7, pc}
   10110:	0000ffc1 	.word	0x0000ffc1
   10114:	0000f59d 	.word	0x0000f59d
   10118:	20001d2c 	.word	0x20001d2c
   1011c:	0000dfa5 	.word	0x0000dfa5
   10120:	0000f5f5 	.word	0x0000f5f5
   10124:	0000f5c9 	.word	0x0000f5c9
   10128:	0000f615 	.word	0x0000f615

0001012c <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
   1012c:	b580      	push	{r7, lr}
   1012e:	b082      	sub	sp, #8
   10130:	af00      	add	r7, sp, #0
   10132:	6078      	str	r0, [r7, #4]
		StopMotor();
   10134:	6878      	ldr	r0, [r7, #4]
   10136:	4b0c      	ldr	r3, [pc, #48]	; (10168 <_ZN22FlapperValveController18StopValveinBetweenEv+0x3c>)
   10138:	4798      	blx	r3
		RemoveTimeoutTask();
   1013a:	6878      	ldr	r0, [r7, #4]
   1013c:	4b0b      	ldr	r3, [pc, #44]	; (1016c <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
   1013e:	4798      	blx	r3
		timeoutFlapperValveController=false;
   10140:	687b      	ldr	r3, [r7, #4]
   10142:	2200      	movs	r2, #0
   10144:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		paused=false;
   10148:	687b      	ldr	r3, [r7, #4]
   1014a:	2200      	movs	r2, #0
   1014c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		timeoutKeepControlling=false;
   10150:	687b      	ldr	r3, [r7, #4]
   10152:	2200      	movs	r2, #0
   10154:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=true;
   10158:	687b      	ldr	r3, [r7, #4]
   1015a:	2201      	movs	r2, #1
   1015c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
   10160:	bf00      	nop
   10162:	3708      	adds	r7, #8
   10164:	46bd      	mov	sp, r7
   10166:	bd80      	pop	{r7, pc}
   10168:	0000ffc1 	.word	0x0000ffc1
   1016c:	00010755 	.word	0x00010755

00010170 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
   10170:	b580      	push	{r7, lr}
   10172:	b084      	sub	sp, #16
   10174:	af00      	add	r7, sp, #0
   10176:	6078      	str	r0, [r7, #4]
   10178:	460b      	mov	r3, r1
   1017a:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
   1017c:	78fb      	ldrb	r3, [r7, #3]
   1017e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
   10182:	2b00      	cmp	r3, #0
   10184:	dd0c      	ble.n	101a0 <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
   10186:	78fb      	ldrb	r3, [r7, #3]
   10188:	43db      	mvns	r3, r3
   1018a:	009b      	lsls	r3, r3, #2
   1018c:	2b00      	cmp	r3, #0
   1018e:	da00      	bge.n	10192 <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
   10190:	33ff      	adds	r3, #255	; 0xff
   10192:	121b      	asrs	r3, r3, #8
   10194:	461a      	mov	r2, r3
   10196:	4b10      	ldr	r3, [pc, #64]	; (101d8 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
   10198:	4610      	mov	r0, r2
   1019a:	4798      	blx	r3
   1019c:	4603      	mov	r3, r0
   1019e:	e00b      	b.n	101b8 <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
   101a0:	78fb      	ldrb	r3, [r7, #3]
   101a2:	3bff      	subs	r3, #255	; 0xff
   101a4:	009b      	lsls	r3, r3, #2
   101a6:	2b00      	cmp	r3, #0
   101a8:	da00      	bge.n	101ac <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
   101aa:	33ff      	adds	r3, #255	; 0xff
   101ac:	121b      	asrs	r3, r3, #8
   101ae:	461a      	mov	r2, r3
   101b0:	4b09      	ldr	r3, [pc, #36]	; (101d8 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
   101b2:	4610      	mov	r0, r2
   101b4:	4798      	blx	r3
   101b6:	4603      	mov	r3, r0
   101b8:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
   101ba:	4b08      	ldr	r3, [pc, #32]	; (101dc <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
   101bc:	68f8      	ldr	r0, [r7, #12]
   101be:	4798      	blx	r3
   101c0:	4603      	mov	r3, r0
   101c2:	b2da      	uxtb	r2, r3
   101c4:	687b      	ldr	r3, [r7, #4]
   101c6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	return tolerance;
   101ca:	687b      	ldr	r3, [r7, #4]
   101cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
}
   101d0:	4618      	mov	r0, r3
   101d2:	3710      	adds	r7, #16
   101d4:	46bd      	mov	sp, r7
   101d6:	bd80      	pop	{r7, pc}
   101d8:	00013625 	.word	0x00013625
   101dc:	0001396d 	.word	0x0001396d

000101e0 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
   101e0:	b580      	push	{r7, lr}
   101e2:	b082      	sub	sp, #8
   101e4:	af00      	add	r7, sp, #0
   101e6:	6078      	str	r0, [r7, #4]
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
   101e8:	687b      	ldr	r3, [r7, #4]
   101ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   101ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   101f0:	2b00      	cmp	r3, #0
   101f2:	d008      	beq.n	10206 <_ZN22FlapperValveController10StartMotorEv+0x26>
	{
		singlefv->SetEnable(false);
   101f4:	687b      	ldr	r3, [r7, #4]
   101f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   101f8:	2100      	movs	r1, #0
   101fa:	4618      	mov	r0, r3
   101fc:	4b09      	ldr	r3, [pc, #36]	; (10224 <_ZN22FlapperValveController10StartMotorEv+0x44>)
   101fe:	4798      	blx	r3
		delay_ms(10);
   10200:	200a      	movs	r0, #10
   10202:	4b09      	ldr	r3, [pc, #36]	; (10228 <_ZN22FlapperValveController10StartMotorEv+0x48>)
   10204:	4798      	blx	r3
	}
	
		
	singlefv->SetEnable(true);
   10206:	687b      	ldr	r3, [r7, #4]
   10208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1020a:	2101      	movs	r1, #1
   1020c:	4618      	mov	r0, r3
   1020e:	4b05      	ldr	r3, [pc, #20]	; (10224 <_ZN22FlapperValveController10StartMotorEv+0x44>)
   10210:	4798      	blx	r3
	flapperValveIsMoving=true;
   10212:	687b      	ldr	r3, [r7, #4]
   10214:	2201      	movs	r2, #1
   10216:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	return 0;
   1021a:	2300      	movs	r3, #0
}
   1021c:	4618      	mov	r0, r3
   1021e:	3708      	adds	r7, #8
   10220:	46bd      	mov	sp, r7
   10222:	bd80      	pop	{r7, pc}
   10224:	00010b85 	.word	0x00010b85
   10228:	00002a81 	.word	0x00002a81

0001022c <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
   1022c:	b580      	push	{r7, lr}
   1022e:	b082      	sub	sp, #8
   10230:	af00      	add	r7, sp, #0
   10232:	6078      	str	r0, [r7, #4]
	StopMotor();
   10234:	6878      	ldr	r0, [r7, #4]
   10236:	4b0d      	ldr	r3, [pc, #52]	; (1026c <_ZN22FlapperValveController15StopControllingEv+0x40>)
   10238:	4798      	blx	r3
	timeoutKeepControlling=false;
   1023a:	687b      	ldr	r3, [r7, #4]
   1023c:	2200      	movs	r2, #0
   1023e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	timeoutFlapperValveController=false;
   10242:	687b      	ldr	r3, [r7, #4]
   10244:	2200      	movs	r2, #0
   10246:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	isControlling=false;
   1024a:	687b      	ldr	r3, [r7, #4]
   1024c:	2200      	movs	r2, #0
   1024e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	keepControlling=false;
   10252:	687b      	ldr	r3, [r7, #4]
   10254:	2200      	movs	r2, #0
   10256:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	controllerEnabled=false;
   1025a:	687b      	ldr	r3, [r7, #4]
   1025c:	2200      	movs	r2, #0
   1025e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	return 0;
   10262:	2300      	movs	r3, #0
}
   10264:	4618      	mov	r0, r3
   10266:	3708      	adds	r7, #8
   10268:	46bd      	mov	sp, r7
   1026a:	bd80      	pop	{r7, pc}
   1026c:	0000ffc1 	.word	0x0000ffc1

00010270 <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
   10270:	b580      	push	{r7, lr}
   10272:	b082      	sub	sp, #8
   10274:	af00      	add	r7, sp, #0
   10276:	6078      	str	r0, [r7, #4]
   10278:	460b      	mov	r3, r1
   1027a:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
   1027c:	78fb      	ldrb	r3, [r7, #3]
   1027e:	4619      	mov	r1, r3
   10280:	6878      	ldr	r0, [r7, #4]
   10282:	4b2b      	ldr	r3, [pc, #172]	; (10330 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
   10284:	4798      	blx	r3
   10286:	4603      	mov	r3, r0
   10288:	461a      	mov	r2, r3
   1028a:	687b      	ldr	r3, [r7, #4]
   1028c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		CorrectTolerance(setpoint);
   10290:	687b      	ldr	r3, [r7, #4]
   10292:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   10296:	4619      	mov	r1, r3
   10298:	6878      	ldr	r0, [r7, #4]
   1029a:	4b26      	ldr	r3, [pc, #152]	; (10334 <_ZN22FlapperValveController16StartControllingEh+0xc4>)
   1029c:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
   1029e:	687b      	ldr	r3, [r7, #4]
   102a0:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
   102a4:	4b24      	ldr	r3, [pc, #144]	; (10338 <_ZN22FlapperValveController16StartControllingEh+0xc8>)
   102a6:	4610      	mov	r0, r2
   102a8:	4798      	blx	r3
   102aa:	4602      	mov	r2, r0
   102ac:	687b      	ldr	r3, [r7, #4]
   102ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		timeoutFlapperValveController=false;
   102b2:	687b      	ldr	r3, [r7, #4]
   102b4:	2200      	movs	r2, #0
   102b6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
   102ba:	687b      	ldr	r3, [r7, #4]
   102bc:	2200      	movs	r2, #0
   102be:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=false;
   102c2:	687b      	ldr	r3, [r7, #4]
   102c4:	2200      	movs	r2, #0
   102c6:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
		controllerEnabled=true;
   102ca:	687b      	ldr	r3, [r7, #4]
   102cc:	2201      	movs	r2, #1
   102ce:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		unLockTimeout=false;
   102d2:	687b      	ldr	r3, [r7, #4]
   102d4:	2200      	movs	r2, #0
   102d6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		if (valve_ID==0)
   102da:	687b      	ldr	r3, [r7, #4]
   102dc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   102e0:	2b00      	cmp	r3, #0
   102e2:	d106      	bne.n	102f2 <_ZN22FlapperValveController16StartControllingEh+0x82>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   102e4:	f242 7210 	movw	r2, #10000	; 0x2710
   102e8:	4914      	ldr	r1, [pc, #80]	; (1033c <_ZN22FlapperValveController16StartControllingEh+0xcc>)
   102ea:	4815      	ldr	r0, [pc, #84]	; (10340 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   102ec:	4b15      	ldr	r3, [pc, #84]	; (10344 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   102ee:	4798      	blx	r3
   102f0:	e005      	b.n	102fe <_ZN22FlapperValveController16StartControllingEh+0x8e>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   102f2:	f242 7210 	movw	r2, #10000	; 0x2710
   102f6:	4914      	ldr	r1, [pc, #80]	; (10348 <_ZN22FlapperValveController16StartControllingEh+0xd8>)
   102f8:	4811      	ldr	r0, [pc, #68]	; (10340 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   102fa:	4b12      	ldr	r3, [pc, #72]	; (10344 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   102fc:	4798      	blx	r3
		}
		
		isControlling=true;
   102fe:	687b      	ldr	r3, [r7, #4]
   10300:	2201      	movs	r2, #1
   10302:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
   10306:	6878      	ldr	r0, [r7, #4]
   10308:	4b10      	ldr	r3, [pc, #64]	; (1034c <_ZN22FlapperValveController16StartControllingEh+0xdc>)
   1030a:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
   1030c:	6878      	ldr	r0, [r7, #4]
   1030e:	4b10      	ldr	r3, [pc, #64]	; (10350 <_ZN22FlapperValveController16StartControllingEh+0xe0>)
   10310:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
   10312:	687b      	ldr	r3, [r7, #4]
   10314:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   10318:	b2db      	uxtb	r3, r3
   1031a:	2b00      	cmp	r3, #0
   1031c:	d003      	beq.n	10326 <_ZN22FlapperValveController16StartControllingEh+0xb6>
		{
			paused=true;
   1031e:	687b      	ldr	r3, [r7, #4]
   10320:	2201      	movs	r2, #1
   10322:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		return 0;
   10326:	2300      	movs	r3, #0
	
}
   10328:	4618      	mov	r0, r3
   1032a:	3708      	adds	r7, #8
   1032c:	46bd      	mov	sp, r7
   1032e:	bd80      	pop	{r7, pc}
   10330:	00010355 	.word	0x00010355
   10334:	00010171 	.word	0x00010171
   10338:	0001361d 	.word	0x0001361d
   1033c:	0000f59d 	.word	0x0000f59d
   10340:	20001d2c 	.word	0x20001d2c
   10344:	0000dffd 	.word	0x0000dffd
   10348:	0000f5c9 	.word	0x0000f5c9
   1034c:	0000f811 	.word	0x0000f811
   10350:	0000fb99 	.word	0x0000fb99

00010354 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
   10354:	b580      	push	{r7, lr}
   10356:	b082      	sub	sp, #8
   10358:	af00      	add	r7, sp, #0
   1035a:	6078      	str	r0, [r7, #4]
   1035c:	460b      	mov	r3, r1
   1035e:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
   10360:	6878      	ldr	r0, [r7, #4]
   10362:	4b2a      	ldr	r3, [pc, #168]	; (1040c <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
   10364:	4798      	blx	r3
   10366:	4603      	mov	r3, r0
   10368:	2b00      	cmp	r3, #0
   1036a:	d004      	beq.n	10376 <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
   1036c:	687b      	ldr	r3, [r7, #4]
   1036e:	78fa      	ldrb	r2, [r7, #3]
   10370:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
   10374:	e043      	b.n	103fe <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
   10376:	687b      	ldr	r3, [r7, #4]
   10378:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   1037c:	2b00      	cmp	r3, #0
   1037e:	d01f      	beq.n	103c0 <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
   10380:	687b      	ldr	r3, [r7, #4]
   10382:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   10386:	43db      	mvns	r3, r3
   10388:	b2da      	uxtb	r2, r3
   1038a:	687b      	ldr	r3, [r7, #4]
   1038c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			if (sp>(standAlonePosition))
   10390:	78fb      	ldrb	r3, [r7, #3]
   10392:	687a      	ldr	r2, [r7, #4]
   10394:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
   10398:	4293      	cmp	r3, r2
   1039a:	dd0c      	ble.n	103b6 <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
   1039c:	687b      	ldr	r3, [r7, #4]
   1039e:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
   103a2:	687b      	ldr	r3, [r7, #4]
   103a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=standAlonePosition;
   103a8:	687b      	ldr	r3, [r7, #4]
   103aa:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
   103ae:	687b      	ldr	r3, [r7, #4]
   103b0:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
   103b4:	e023      	b.n	103fe <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   103b6:	687b      	ldr	r3, [r7, #4]
   103b8:	78fa      	ldrb	r2, [r7, #3]
   103ba:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
   103be:	e01e      	b.n	103fe <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
   103c0:	687b      	ldr	r3, [r7, #4]
   103c2:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
   103c6:	43db      	mvns	r3, r3
   103c8:	b2da      	uxtb	r2, r3
   103ca:	687b      	ldr	r3, [r7, #4]
   103cc:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
			if (sp>maximumPosition)
   103d0:	78fb      	ldrb	r3, [r7, #3]
   103d2:	687a      	ldr	r2, [r7, #4]
   103d4:	f892 20bc 	ldrb.w	r2, [r2, #188]	; 0xbc
   103d8:	4293      	cmp	r3, r2
   103da:	dd0c      	ble.n	103f6 <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
   103dc:	687b      	ldr	r3, [r7, #4]
   103de:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
   103e2:	687b      	ldr	r3, [r7, #4]
   103e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=maximumPosition;
   103e8:	687b      	ldr	r3, [r7, #4]
   103ea:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
   103ee:	687b      	ldr	r3, [r7, #4]
   103f0:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
   103f4:	e003      	b.n	103fe <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   103f6:	687b      	ldr	r3, [r7, #4]
   103f8:	78fa      	ldrb	r2, [r7, #3]
   103fa:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			}
		}
	}
	
	return setpoint;
   103fe:	687b      	ldr	r3, [r7, #4]
   10400:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
	
}
   10404:	4618      	mov	r0, r3
   10406:	3708      	adds	r7, #8
   10408:	46bd      	mov	sp, r7
   1040a:	bd80      	pop	{r7, pc}
   1040c:	0000ff79 	.word	0x0000ff79

00010410 <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=singlefv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
   10410:	b580      	push	{r7, lr}
   10412:	b082      	sub	sp, #8
   10414:	af00      	add	r7, sp, #0
   10416:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
   10418:	687b      	ldr	r3, [r7, #4]
   1041a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   1041e:	4619      	mov	r1, r3
   10420:	6878      	ldr	r0, [r7, #4]
   10422:	4b03      	ldr	r3, [pc, #12]	; (10430 <_ZN22FlapperValveController16StartControllingEv+0x20>)
   10424:	4798      	blx	r3
   10426:	4603      	mov	r3, r0
	
}
   10428:	4618      	mov	r0, r3
   1042a:	3708      	adds	r7, #8
   1042c:	46bd      	mov	sp, r7
   1042e:	bd80      	pop	{r7, pc}
   10430:	00010271 	.word	0x00010271

00010434 <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
   10434:	b580      	push	{r7, lr}
   10436:	b082      	sub	sp, #8
   10438:	af00      	add	r7, sp, #0
   1043a:	6078      	str	r0, [r7, #4]
   1043c:	460b      	mov	r3, r1
   1043e:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
   10440:	687b      	ldr	r3, [r7, #4]
   10442:	2200      	movs	r2, #0
   10444:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
   10448:	687b      	ldr	r3, [r7, #4]
   1044a:	2201      	movs	r2, #1
   1044c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
   10450:	6878      	ldr	r0, [r7, #4]
   10452:	4b05      	ldr	r3, [pc, #20]	; (10468 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
   10454:	4798      	blx	r3
		keepControlling=false;
   10456:	687b      	ldr	r3, [r7, #4]
   10458:	2200      	movs	r2, #0
   1045a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

	return 0;
   1045e:	2300      	movs	r3, #0
	
}
   10460:	4618      	mov	r0, r3
   10462:	3708      	adds	r7, #8
   10464:	46bd      	mov	sp, r7
   10466:	bd80      	pop	{r7, pc}
   10468:	0000f811 	.word	0x0000f811

0001046c <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
   1046c:	b590      	push	{r4, r7, lr}
   1046e:	b085      	sub	sp, #20
   10470:	af00      	add	r7, sp, #0
   10472:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
   10474:	68fb      	ldr	r3, [r7, #12]
   10476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10478:	4618      	mov	r0, r3
   1047a:	4b32      	ldr	r3, [pc, #200]	; (10544 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd8>)
   1047c:	4798      	blx	r3
   1047e:	4603      	mov	r3, r0
   10480:	461a      	mov	r2, r3
   10482:	68fb      	ldr	r3, [r7, #12]
   10484:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	//dataStruct.controllerStatus.position=currentPosition;
	dataStruct.actualPosition=currentPosition;
   10488:	68fb      	ldr	r3, [r7, #12]
   1048a:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   1048e:	68fb      	ldr	r3, [r7, #12]
   10490:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	dataStruct.setPointPosition=setpoint;
   10494:	68fb      	ldr	r3, [r7, #12]
   10496:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
   1049a:	68fb      	ldr	r3, [r7, #12]
   1049c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
   104a0:	68fb      	ldr	r3, [r7, #12]
   104a2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   104a4:	68fc      	ldr	r4, [r7, #12]
   104a6:	463b      	mov	r3, r7
   104a8:	4611      	mov	r1, r2
   104aa:	4618      	mov	r0, r3
   104ac:	4b26      	ldr	r3, [pc, #152]	; (10548 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xdc>)
   104ae:	4798      	blx	r3
   104b0:	f104 0380 	add.w	r3, r4, #128	; 0x80
   104b4:	463a      	mov	r2, r7
   104b6:	6810      	ldr	r0, [r2, #0]
   104b8:	6018      	str	r0, [r3, #0]
   104ba:	8892      	ldrh	r2, [r2, #4]
   104bc:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
   104be:	68fb      	ldr	r3, [r7, #12]
   104c0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   104c2:	68fc      	ldr	r4, [r7, #12]
   104c4:	463b      	mov	r3, r7
   104c6:	4611      	mov	r1, r2
   104c8:	4618      	mov	r0, r3
   104ca:	4b20      	ldr	r3, [pc, #128]	; (1054c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xe0>)
   104cc:	4798      	blx	r3
   104ce:	f104 0386 	add.w	r3, r4, #134	; 0x86
   104d2:	463a      	mov	r2, r7
   104d4:	6811      	ldr	r1, [r2, #0]
   104d6:	6852      	ldr	r2, [r2, #4]
   104d8:	6019      	str	r1, [r3, #0]
   104da:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
   104dc:	68fb      	ldr	r3, [r7, #12]
   104de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   104e2:	b2da      	uxtb	r2, r3
   104e4:	68fb      	ldr	r3, [r7, #12]
   104e6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	dataStruct.controllerStatus.isControlling=isControlling;
   104ea:	68fb      	ldr	r3, [r7, #12]
   104ec:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
   104f0:	68fb      	ldr	r3, [r7, #12]
   104f2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
   104f6:	68fb      	ldr	r3, [r7, #12]
   104f8:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
   104fc:	68fb      	ldr	r3, [r7, #12]
   104fe:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	
	if (standAloneActivated)
   10502:	68fb      	ldr	r3, [r7, #12]
   10504:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   10508:	2b00      	cmp	r3, #0
   1050a:	d008      	beq.n	1051e <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xb2>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   1050c:	68fb      	ldr	r3, [r7, #12]
   1050e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   10512:	43db      	mvns	r3, r3
   10514:	b2da      	uxtb	r2, r3
   10516:	68fb      	ldr	r3, [r7, #12]
   10518:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
   1051c:	e007      	b.n	1052e <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc2>
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
   1051e:	68fb      	ldr	r3, [r7, #12]
   10520:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
   10524:	43db      	mvns	r3, r3
   10526:	b2da      	uxtb	r2, r3
   10528:	68fb      	ldr	r3, [r7, #12]
   1052a:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	}
	FillPositionsFIFO(currentPosition);
   1052e:	68fb      	ldr	r3, [r7, #12]
   10530:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   10534:	4619      	mov	r1, r3
   10536:	68f8      	ldr	r0, [r7, #12]
   10538:	4b05      	ldr	r3, [pc, #20]	; (10550 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xe4>)
   1053a:	4798      	blx	r3
}
   1053c:	bf00      	nop
   1053e:	3714      	adds	r7, #20
   10540:	46bd      	mov	sp, r7
   10542:	bd90      	pop	{r4, r7, pc}
   10544:	00010da5 	.word	0x00010da5
   10548:	00010b29 	.word	0x00010b29
   1054c:	00010acd 	.word	0x00010acd
   10550:	00010555 	.word	0x00010555

00010554 <_ZN22FlapperValveController17FillPositionsFIFOEh>:
void FlapperValveController::FillPositionsFIFO(uint8_t cp){
   10554:	b480      	push	{r7}
   10556:	b085      	sub	sp, #20
   10558:	af00      	add	r7, sp, #0
   1055a:	6078      	str	r0, [r7, #4]
   1055c:	460b      	mov	r3, r1
   1055e:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   10560:	2300      	movs	r3, #0
   10562:	73fb      	strb	r3, [r7, #15]
   10564:	7bfb      	ldrb	r3, [r7, #15]
   10566:	2b0e      	cmp	r3, #14
   10568:	dc1d      	bgt.n	105a6 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x52>
	{
		positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-1-i]=positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-2-i];
   1056a:	687b      	ldr	r3, [r7, #4]
   1056c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   10570:	687a      	ldr	r2, [r7, #4]
   10572:	3330      	adds	r3, #48	; 0x30
   10574:	009b      	lsls	r3, r3, #2
   10576:	4413      	add	r3, r2
   10578:	685b      	ldr	r3, [r3, #4]
   1057a:	7bfa      	ldrb	r2, [r7, #15]
   1057c:	f1c2 020f 	rsb	r2, r2, #15
   10580:	441a      	add	r2, r3
   10582:	687b      	ldr	r3, [r7, #4]
   10584:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   10588:	6879      	ldr	r1, [r7, #4]
   1058a:	3330      	adds	r3, #48	; 0x30
   1058c:	009b      	lsls	r3, r3, #2
   1058e:	440b      	add	r3, r1
   10590:	685b      	ldr	r3, [r3, #4]
   10592:	7bf9      	ldrb	r1, [r7, #15]
   10594:	f1c1 010e 	rsb	r1, r1, #14
   10598:	440b      	add	r3, r1
   1059a:	781b      	ldrb	r3, [r3, #0]
   1059c:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   1059e:	7bfb      	ldrb	r3, [r7, #15]
   105a0:	3301      	adds	r3, #1
   105a2:	73fb      	strb	r3, [r7, #15]
   105a4:	e7de      	b.n	10564 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x10>
	}
	positions[valve_ID][0]=cp;
   105a6:	687b      	ldr	r3, [r7, #4]
   105a8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   105ac:	687a      	ldr	r2, [r7, #4]
   105ae:	3330      	adds	r3, #48	; 0x30
   105b0:	009b      	lsls	r3, r3, #2
   105b2:	4413      	add	r3, r2
   105b4:	685b      	ldr	r3, [r3, #4]
   105b6:	78fa      	ldrb	r2, [r7, #3]
   105b8:	701a      	strb	r2, [r3, #0]
}
   105ba:	bf00      	nop
   105bc:	3714      	adds	r7, #20
   105be:	46bd      	mov	sp, r7
   105c0:	bc80      	pop	{r7}
   105c2:	4770      	bx	lr

000105c4 <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return singlefv->ReadActualPosition();
}

bool	FlapperValveController::Selftest(void){
   105c4:	b580      	push	{r7, lr}
   105c6:	b084      	sub	sp, #16
   105c8:	af00      	add	r7, sp, #0
   105ca:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
   105cc:	23b4      	movs	r3, #180	; 0xb4
   105ce:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
   105d0:	687b      	ldr	r3, [r7, #4]
   105d2:	4a52      	ldr	r2, [pc, #328]	; (1071c <_ZN22FlapperValveController8SelftestEv+0x158>)
   105d4:	33bf      	adds	r3, #191	; 0xbf
   105d6:	8812      	ldrh	r2, [r2, #0]
   105d8:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
   105da:	6878      	ldr	r0, [r7, #4]
   105dc:	4b50      	ldr	r3, [pc, #320]	; (10720 <_ZN22FlapperValveController8SelftestEv+0x15c>)
   105de:	4798      	blx	r3
	singlefv->SetEnable(false);
   105e0:	687b      	ldr	r3, [r7, #4]
   105e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   105e4:	2100      	movs	r1, #0
   105e6:	4618      	mov	r0, r3
   105e8:	4b4e      	ldr	r3, [pc, #312]	; (10724 <_ZN22FlapperValveController8SelftestEv+0x160>)
   105ea:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
   105ec:	687b      	ldr	r3, [r7, #4]
   105ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   105f0:	2100      	movs	r1, #0
   105f2:	4618      	mov	r0, r3
   105f4:	4b4c      	ldr	r3, [pc, #304]	; (10728 <_ZN22FlapperValveController8SelftestEv+0x164>)
   105f6:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
   105f8:	687b      	ldr	r3, [r7, #4]
   105fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   105fc:	2100      	movs	r1, #0
   105fe:	4618      	mov	r0, r3
   10600:	4b4a      	ldr	r3, [pc, #296]	; (1072c <_ZN22FlapperValveController8SelftestEv+0x168>)
   10602:	4798      	blx	r3
	delay_ms(10);
   10604:	200a      	movs	r0, #10
   10606:	4b4a      	ldr	r3, [pc, #296]	; (10730 <_ZN22FlapperValveController8SelftestEv+0x16c>)
   10608:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
   1060a:	687b      	ldr	r3, [r7, #4]
   1060c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1060e:	2101      	movs	r1, #1
   10610:	4618      	mov	r0, r3
   10612:	4b46      	ldr	r3, [pc, #280]	; (1072c <_ZN22FlapperValveController8SelftestEv+0x168>)
   10614:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
   10616:	687b      	ldr	r3, [r7, #4]
   10618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1061a:	7bba      	ldrb	r2, [r7, #14]
   1061c:	4611      	mov	r1, r2
   1061e:	4618      	mov	r0, r3
   10620:	4b44      	ldr	r3, [pc, #272]	; (10734 <_ZN22FlapperValveController8SelftestEv+0x170>)
   10622:	4798      	blx	r3
	singlefv->SetDirection(false);
   10624:	687b      	ldr	r3, [r7, #4]
   10626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10628:	2100      	movs	r1, #0
   1062a:	4618      	mov	r0, r3
   1062c:	4b42      	ldr	r3, [pc, #264]	; (10738 <_ZN22FlapperValveController8SelftestEv+0x174>)
   1062e:	4798      	blx	r3
	if (singlefv->ReadActualPosition()>localSetpoint)
   10630:	687b      	ldr	r3, [r7, #4]
   10632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10634:	4618      	mov	r0, r3
   10636:	4b41      	ldr	r3, [pc, #260]	; (1073c <_ZN22FlapperValveController8SelftestEv+0x178>)
   10638:	4798      	blx	r3
   1063a:	4603      	mov	r3, r0
   1063c:	461a      	mov	r2, r3
   1063e:	7bbb      	ldrb	r3, [r7, #14]
   10640:	429a      	cmp	r2, r3
   10642:	bfcc      	ite	gt
   10644:	2301      	movgt	r3, #1
   10646:	2300      	movle	r3, #0
   10648:	b2db      	uxtb	r3, r3
   1064a:	2b00      	cmp	r3, #0
   1064c:	d006      	beq.n	1065c <_ZN22FlapperValveController8SelftestEv+0x98>
	{
		singlefv->SetDirection(true);
   1064e:	687b      	ldr	r3, [r7, #4]
   10650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10652:	2101      	movs	r1, #1
   10654:	4618      	mov	r0, r3
   10656:	4b38      	ldr	r3, [pc, #224]	; (10738 <_ZN22FlapperValveController8SelftestEv+0x174>)
   10658:	4798      	blx	r3
   1065a:	e005      	b.n	10668 <_ZN22FlapperValveController8SelftestEv+0xa4>
	}
	else
	{
		singlefv->SetDirection(false);
   1065c:	687b      	ldr	r3, [r7, #4]
   1065e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10660:	2100      	movs	r1, #0
   10662:	4618      	mov	r0, r3
   10664:	4b34      	ldr	r3, [pc, #208]	; (10738 <_ZN22FlapperValveController8SelftestEv+0x174>)
   10666:	4798      	blx	r3
	}
		if (valve_ID==0)
   10668:	687b      	ldr	r3, [r7, #4]
   1066a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   1066e:	2b00      	cmp	r3, #0
   10670:	d106      	bne.n	10680 <_ZN22FlapperValveController8SelftestEv+0xbc>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   10672:	f242 7210 	movw	r2, #10000	; 0x2710
   10676:	4932      	ldr	r1, [pc, #200]	; (10740 <_ZN22FlapperValveController8SelftestEv+0x17c>)
   10678:	4832      	ldr	r0, [pc, #200]	; (10744 <_ZN22FlapperValveController8SelftestEv+0x180>)
   1067a:	4b33      	ldr	r3, [pc, #204]	; (10748 <_ZN22FlapperValveController8SelftestEv+0x184>)
   1067c:	4798      	blx	r3
   1067e:	e005      	b.n	1068c <_ZN22FlapperValveController8SelftestEv+0xc8>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   10680:	f242 7210 	movw	r2, #10000	; 0x2710
   10684:	4931      	ldr	r1, [pc, #196]	; (1074c <_ZN22FlapperValveController8SelftestEv+0x188>)
   10686:	482f      	ldr	r0, [pc, #188]	; (10744 <_ZN22FlapperValveController8SelftestEv+0x180>)
   10688:	4b2f      	ldr	r3, [pc, #188]	; (10748 <_ZN22FlapperValveController8SelftestEv+0x184>)
   1068a:	4798      	blx	r3
		}
	singlefv->SetEnable(true);
   1068c:	687b      	ldr	r3, [r7, #4]
   1068e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10690:	2101      	movs	r1, #1
   10692:	4618      	mov	r0, r3
   10694:	4b23      	ldr	r3, [pc, #140]	; (10724 <_ZN22FlapperValveController8SelftestEv+0x160>)
   10696:	4798      	blx	r3

	localPosition=singlefv->ReadActualPosition();
   10698:	687b      	ldr	r3, [r7, #4]
   1069a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1069c:	4618      	mov	r0, r3
   1069e:	4b27      	ldr	r3, [pc, #156]	; (1073c <_ZN22FlapperValveController8SelftestEv+0x178>)
   106a0:	4798      	blx	r3
   106a2:	4603      	mov	r3, r0
   106a4:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
   106a6:	687b      	ldr	r3, [r7, #4]
   106a8:	2200      	movs	r2, #0
   106aa:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   106ae:	7bfa      	ldrb	r2, [r7, #15]
   106b0:	7bbb      	ldrb	r3, [r7, #14]
   106b2:	1ad3      	subs	r3, r2, r3
   106b4:	2b00      	cmp	r3, #0
   106b6:	bfb8      	it	lt
   106b8:	425b      	neglt	r3, r3
   106ba:	2b0c      	cmp	r3, #12
   106bc:	bfcc      	ite	gt
   106be:	2301      	movgt	r3, #1
   106c0:	2300      	movle	r3, #0
   106c2:	b2db      	uxtb	r3, r3
   106c4:	461a      	mov	r2, r3
   106c6:	687b      	ldr	r3, [r7, #4]
   106c8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   106cc:	b2db      	uxtb	r3, r3
   106ce:	f083 0301 	eor.w	r3, r3, #1
   106d2:	b2db      	uxtb	r3, r3
   106d4:	4013      	ands	r3, r2
   106d6:	2b00      	cmp	r3, #0
   106d8:	bf14      	ite	ne
   106da:	2301      	movne	r3, #1
   106dc:	2300      	moveq	r3, #0
   106de:	b2db      	uxtb	r3, r3
   106e0:	2b00      	cmp	r3, #0
   106e2:	d007      	beq.n	106f4 <_ZN22FlapperValveController8SelftestEv+0x130>

	{

		localPosition=singlefv->ReadActualPosition();
   106e4:	687b      	ldr	r3, [r7, #4]
   106e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   106e8:	4618      	mov	r0, r3
   106ea:	4b14      	ldr	r3, [pc, #80]	; (1073c <_ZN22FlapperValveController8SelftestEv+0x178>)
   106ec:	4798      	blx	r3
   106ee:	4603      	mov	r3, r0
   106f0:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   106f2:	e7dc      	b.n	106ae <_ZN22FlapperValveController8SelftestEv+0xea>

	}
	RemoveTimeoutTask();
   106f4:	6878      	ldr	r0, [r7, #4]
   106f6:	4b16      	ldr	r3, [pc, #88]	; (10750 <_ZN22FlapperValveController8SelftestEv+0x18c>)
   106f8:	4798      	blx	r3

	singlefv->SetEnable(false);
   106fa:	687b      	ldr	r3, [r7, #4]
   106fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   106fe:	2100      	movs	r1, #0
   10700:	4618      	mov	r0, r3
   10702:	4b08      	ldr	r3, [pc, #32]	; (10724 <_ZN22FlapperValveController8SelftestEv+0x160>)
   10704:	4798      	blx	r3
	return !timeoutFlapperValveController;
   10706:	687b      	ldr	r3, [r7, #4]
   10708:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   1070c:	b2db      	uxtb	r3, r3
   1070e:	f083 0301 	eor.w	r3, r3, #1
   10712:	b2db      	uxtb	r3, r3
}
   10714:	4618      	mov	r0, r3
   10716:	3710      	adds	r7, #16
   10718:	46bd      	mov	sp, r7
   1071a:	bd80      	pop	{r7, pc}
   1071c:	0001432c 	.word	0x0001432c
   10720:	0001046d 	.word	0x0001046d
   10724:	00010b85 	.word	0x00010b85
   10728:	00010cf5 	.word	0x00010cf5
   1072c:	00010c7d 	.word	0x00010c7d
   10730:	00002a81 	.word	0x00002a81
   10734:	00010d6d 	.word	0x00010d6d
   10738:	00010c05 	.word	0x00010c05
   1073c:	00010da5 	.word	0x00010da5
   10740:	0000f59d 	.word	0x0000f59d
   10744:	20001d2c 	.word	0x20001d2c
   10748:	0000dffd 	.word	0x0000dffd
   1074c:	0000f5c9 	.word	0x0000f5c9
   10750:	00010755 	.word	0x00010755

00010754 <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:

void	FlapperValveController::RemoveTimeoutTask(void){
   10754:	b580      	push	{r7, lr}
   10756:	b082      	sub	sp, #8
   10758:	af00      	add	r7, sp, #0
   1075a:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
   1075c:	687b      	ldr	r3, [r7, #4]
   1075e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   10762:	2b00      	cmp	r3, #0
   10764:	d104      	bne.n	10770 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   10766:	4906      	ldr	r1, [pc, #24]	; (10780 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
   10768:	4806      	ldr	r0, [pc, #24]	; (10784 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   1076a:	4b07      	ldr	r3, [pc, #28]	; (10788 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   1076c:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
   1076e:	e003      	b.n	10778 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   10770:	4906      	ldr	r1, [pc, #24]	; (1078c <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
   10772:	4804      	ldr	r0, [pc, #16]	; (10784 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   10774:	4b04      	ldr	r3, [pc, #16]	; (10788 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   10776:	4798      	blx	r3
}
   10778:	bf00      	nop
   1077a:	3708      	adds	r7, #8
   1077c:	46bd      	mov	sp, r7
   1077e:	bd80      	pop	{r7, pc}
   10780:	0000f59d 	.word	0x0000f59d
   10784:	20001d2c 	.word	0x20001d2c
   10788:	0000dfa5 	.word	0x0000dfa5
   1078c:	0000f5c9 	.word	0x0000f5c9

00010790 <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   10790:	b590      	push	{r4, r7, lr}
   10792:	b083      	sub	sp, #12
   10794:	af00      	add	r7, sp, #0
   10796:	6078      	str	r0, [r7, #4]
   10798:	4c05      	ldr	r4, [pc, #20]	; (107b0 <__tcf_0+0x20>)
   1079a:	4b06      	ldr	r3, [pc, #24]	; (107b4 <__tcf_0+0x24>)
   1079c:	429c      	cmp	r4, r3
   1079e:	d004      	beq.n	107aa <__tcf_0+0x1a>
   107a0:	3c74      	subs	r4, #116	; 0x74
   107a2:	4620      	mov	r0, r4
   107a4:	4b04      	ldr	r3, [pc, #16]	; (107b8 <__tcf_0+0x28>)
   107a6:	4798      	blx	r3
   107a8:	e7f7      	b.n	1079a <__tcf_0+0xa>
   107aa:	370c      	adds	r7, #12
   107ac:	46bd      	mov	sp, r7
   107ae:	bd90      	pop	{r4, r7, pc}
   107b0:	20001efc 	.word	0x20001efc
   107b4:	20001e14 	.word	0x20001e14
   107b8:	00010969 	.word	0x00010969

000107bc <_Z41__static_initialization_and_destruction_0ii>:

   107bc:	b5b0      	push	{r4, r5, r7, lr}
   107be:	b082      	sub	sp, #8
   107c0:	af00      	add	r7, sp, #0
   107c2:	6078      	str	r0, [r7, #4]
   107c4:	6039      	str	r1, [r7, #0]
   107c6:	687b      	ldr	r3, [r7, #4]
   107c8:	2b01      	cmp	r3, #1
   107ca:	d164      	bne.n	10896 <_Z41__static_initialization_and_destruction_0ii+0xda>
   107cc:	683b      	ldr	r3, [r7, #0]
   107ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   107d2:	4293      	cmp	r3, r2
   107d4:	d15f      	bne.n	10896 <_Z41__static_initialization_and_destruction_0ii+0xda>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   107d6:	4932      	ldr	r1, [pc, #200]	; (108a0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   107d8:	4832      	ldr	r0, [pc, #200]	; (108a4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   107da:	4b33      	ldr	r3, [pc, #204]	; (108a8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   107dc:	4798      	blx	r3
   107de:	4a33      	ldr	r2, [pc, #204]	; (108ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   107e0:	4933      	ldr	r1, [pc, #204]	; (108b0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   107e2:	4830      	ldr	r0, [pc, #192]	; (108a4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   107e4:	4b33      	ldr	r3, [pc, #204]	; (108b4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   107e6:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   107e8:	4933      	ldr	r1, [pc, #204]	; (108b8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   107ea:	4834      	ldr	r0, [pc, #208]	; (108bc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   107ec:	4b2e      	ldr	r3, [pc, #184]	; (108a8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   107ee:	4798      	blx	r3
   107f0:	4a2e      	ldr	r2, [pc, #184]	; (108ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   107f2:	492f      	ldr	r1, [pc, #188]	; (108b0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   107f4:	4831      	ldr	r0, [pc, #196]	; (108bc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   107f6:	4b2f      	ldr	r3, [pc, #188]	; (108b4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   107f8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   107fa:	4931      	ldr	r1, [pc, #196]	; (108c0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   107fc:	4831      	ldr	r0, [pc, #196]	; (108c4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   107fe:	4b2a      	ldr	r3, [pc, #168]	; (108a8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10800:	4798      	blx	r3
   10802:	4a2a      	ldr	r2, [pc, #168]	; (108ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10804:	492a      	ldr	r1, [pc, #168]	; (108b0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10806:	482f      	ldr	r0, [pc, #188]	; (108c4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10808:	4b2a      	ldr	r3, [pc, #168]	; (108b4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1080a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1080c:	492e      	ldr	r1, [pc, #184]	; (108c8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   1080e:	482f      	ldr	r0, [pc, #188]	; (108cc <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10810:	4b25      	ldr	r3, [pc, #148]	; (108a8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10812:	4798      	blx	r3
   10814:	4a25      	ldr	r2, [pc, #148]	; (108ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10816:	4926      	ldr	r1, [pc, #152]	; (108b0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10818:	482c      	ldr	r0, [pc, #176]	; (108cc <_Z41__static_initialization_and_destruction_0ii+0x110>)
   1081a:	4b26      	ldr	r3, [pc, #152]	; (108b4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1081c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   1081e:	492c      	ldr	r1, [pc, #176]	; (108d0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10820:	482c      	ldr	r0, [pc, #176]	; (108d4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10822:	4b21      	ldr	r3, [pc, #132]	; (108a8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10824:	4798      	blx	r3
   10826:	4a21      	ldr	r2, [pc, #132]	; (108ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10828:	4921      	ldr	r1, [pc, #132]	; (108b0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   1082a:	482a      	ldr	r0, [pc, #168]	; (108d4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1082c:	4b21      	ldr	r3, [pc, #132]	; (108b4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1082e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   10830:	4929      	ldr	r1, [pc, #164]	; (108d8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   10832:	482a      	ldr	r0, [pc, #168]	; (108dc <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10834:	4b1c      	ldr	r3, [pc, #112]	; (108a8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10836:	4798      	blx	r3
   10838:	4a1c      	ldr	r2, [pc, #112]	; (108ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1083a:	491d      	ldr	r1, [pc, #116]	; (108b0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   1083c:	4827      	ldr	r0, [pc, #156]	; (108dc <_Z41__static_initialization_and_destruction_0ii+0x120>)
   1083e:	4b1d      	ldr	r3, [pc, #116]	; (108b4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10840:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   10842:	4927      	ldr	r1, [pc, #156]	; (108e0 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   10844:	4827      	ldr	r0, [pc, #156]	; (108e4 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   10846:	4b18      	ldr	r3, [pc, #96]	; (108a8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10848:	4798      	blx	r3
   1084a:	4a18      	ldr	r2, [pc, #96]	; (108ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1084c:	4918      	ldr	r1, [pc, #96]	; (108b0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   1084e:	4825      	ldr	r0, [pc, #148]	; (108e4 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   10850:	4b18      	ldr	r3, [pc, #96]	; (108b4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10852:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   10854:	4924      	ldr	r1, [pc, #144]	; (108e8 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   10856:	4825      	ldr	r0, [pc, #148]	; (108ec <_Z41__static_initialization_and_destruction_0ii+0x130>)
   10858:	4b13      	ldr	r3, [pc, #76]	; (108a8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   1085a:	4798      	blx	r3
   1085c:	4a13      	ldr	r2, [pc, #76]	; (108ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1085e:	4914      	ldr	r1, [pc, #80]	; (108b0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10860:	4822      	ldr	r0, [pc, #136]	; (108ec <_Z41__static_initialization_and_destruction_0ii+0x130>)
   10862:	4b14      	ldr	r3, [pc, #80]	; (108b4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10864:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   10866:	4b22      	ldr	r3, [pc, #136]	; (108f0 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   10868:	2401      	movs	r4, #1
   1086a:	461d      	mov	r5, r3
   1086c:	2c00      	cmp	r4, #0
   1086e:	db05      	blt.n	1087c <_Z41__static_initialization_and_destruction_0ii+0xc0>
   10870:	4628      	mov	r0, r5
   10872:	4b20      	ldr	r3, [pc, #128]	; (108f4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   10874:	4798      	blx	r3
   10876:	3574      	adds	r5, #116	; 0x74
   10878:	3c01      	subs	r4, #1
   1087a:	e7f7      	b.n	1086c <_Z41__static_initialization_and_destruction_0ii+0xb0>
   1087c:	4a0b      	ldr	r2, [pc, #44]	; (108ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1087e:	491e      	ldr	r1, [pc, #120]	; (108f8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   10880:	2000      	movs	r0, #0
   10882:	4b0c      	ldr	r3, [pc, #48]	; (108b4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10884:	4798      	blx	r3
   10886:	481d      	ldr	r0, [pc, #116]	; (108fc <_Z41__static_initialization_and_destruction_0ii+0x140>)
   10888:	4b1d      	ldr	r3, [pc, #116]	; (10900 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   1088a:	4798      	blx	r3
   1088c:	4a07      	ldr	r2, [pc, #28]	; (108ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1088e:	491d      	ldr	r1, [pc, #116]	; (10904 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   10890:	481a      	ldr	r0, [pc, #104]	; (108fc <_Z41__static_initialization_and_destruction_0ii+0x140>)
   10892:	4b08      	ldr	r3, [pc, #32]	; (108b4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10894:	4798      	blx	r3
   10896:	bf00      	nop
   10898:	3708      	adds	r7, #8
   1089a:	46bd      	mov	sp, r7
   1089c:	bdb0      	pop	{r4, r5, r7, pc}
   1089e:	bf00      	nop
   108a0:	20009dc0 	.word	0x20009dc0
   108a4:	20001cec 	.word	0x20001cec
   108a8:	0000dd75 	.word	0x0000dd75
   108ac:	20000000 	.word	0x20000000
   108b0:	0000ddad 	.word	0x0000ddad
   108b4:	000134a5 	.word	0x000134a5
   108b8:	20009e54 	.word	0x20009e54
   108bc:	20001d0c 	.word	0x20001d0c
   108c0:	20009f78 	.word	0x20009f78
   108c4:	20001d2c 	.word	0x20001d2c
   108c8:	20009e74 	.word	0x20009e74
   108cc:	20001d4c 	.word	0x20001d4c
   108d0:	20009f38 	.word	0x20009f38
   108d4:	20001d6c 	.word	0x20001d6c
   108d8:	20009f58 	.word	0x20009f58
   108dc:	20001d8c 	.word	0x20001d8c
   108e0:	20009e30 	.word	0x20009e30
   108e4:	20001dac 	.word	0x20001dac
   108e8:	20009ed0 	.word	0x20009ed0
   108ec:	20001dcc 	.word	0x20001dcc
   108f0:	20001e14 	.word	0x20001e14
   108f4:	0001091d 	.word	0x0001091d
   108f8:	00010791 	.word	0x00010791
   108fc:	20001efc 	.word	0x20001efc
   10900:	0000f675 	.word	0x0000f675
   10904:	0000f6fd 	.word	0x0000f6fd

00010908 <_GLOBAL__sub_I_ptrFlapperValveController>:
   10908:	b580      	push	{r7, lr}
   1090a:	af00      	add	r7, sp, #0
   1090c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10910:	2001      	movs	r0, #1
   10912:	4b01      	ldr	r3, [pc, #4]	; (10918 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
   10914:	4798      	blx	r3
   10916:	bd80      	pop	{r7, pc}
   10918:	000107bd 	.word	0x000107bd

0001091c <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
   1091c:	b580      	push	{r7, lr}
   1091e:	b082      	sub	sp, #8
   10920:	af00      	add	r7, sp, #0
   10922:	6078      	str	r0, [r7, #4]
   10924:	687b      	ldr	r3, [r7, #4]
   10926:	4618      	mov	r0, r3
   10928:	4b0c      	ldr	r3, [pc, #48]	; (1095c <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
   1092a:	4798      	blx	r3
{
	valveID=0;
   1092c:	687b      	ldr	r3, [r7, #4]
   1092e:	2200      	movs	r2, #0
   10930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
   10934:	687b      	ldr	r3, [r7, #4]
   10936:	4a0a      	ldr	r2, [pc, #40]	; (10960 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
   10938:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
   1093a:	687b      	ldr	r3, [r7, #4]
   1093c:	2200      	movs	r2, #0
   1093e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
   10942:	4a08      	ldr	r2, [pc, #32]	; (10964 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
   10944:	687b      	ldr	r3, [r7, #4]
   10946:	6013      	str	r3, [r2, #0]
	isOK=false;
   10948:	687b      	ldr	r3, [r7, #4]
   1094a:	2200      	movs	r2, #0
   1094c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
   10950:	687b      	ldr	r3, [r7, #4]
   10952:	4618      	mov	r0, r3
   10954:	3708      	adds	r7, #8
   10956:	46bd      	mov	sp, r7
   10958:	bd80      	pop	{r7, pc}
   1095a:	bf00      	nop
   1095c:	000118c5 	.word	0x000118c5
   10960:	200020d4 	.word	0x200020d4
   10964:	200020d0 	.word	0x200020d0

00010968 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
   10968:	b580      	push	{r7, lr}
   1096a:	b082      	sub	sp, #8
   1096c:	af00      	add	r7, sp, #0
   1096e:	6078      	str	r0, [r7, #4]
   10970:	687b      	ldr	r3, [r7, #4]
   10972:	4618      	mov	r0, r3
   10974:	4b03      	ldr	r3, [pc, #12]	; (10984 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
   10976:	4798      	blx	r3
{
} //~FlapperValve_Class
   10978:	687b      	ldr	r3, [r7, #4]
   1097a:	4618      	mov	r0, r3
   1097c:	3708      	adds	r7, #8
   1097e:	46bd      	mov	sp, r7
   10980:	bd80      	pop	{r7, pc}
   10982:	bf00      	nop
   10984:	000118d9 	.word	0x000118d9

00010988 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
   10988:	b580      	push	{r7, lr}
   1098a:	b082      	sub	sp, #8
   1098c:	af00      	add	r7, sp, #0
   1098e:	6078      	str	r0, [r7, #4]
	if (i2c->i2c_initiated)
   10990:	687b      	ldr	r3, [r7, #4]
   10992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10994:	7a1b      	ldrb	r3, [r3, #8]
   10996:	b2db      	uxtb	r3, r3
   10998:	2b00      	cmp	r3, #0
   1099a:	d104      	bne.n	109a6 <_ZN24SingleFlapperValve_Class4InitEv+0x1e>
	{
	} 
	else
	{
		i2c->Init();
   1099c:	687b      	ldr	r3, [r7, #4]
   1099e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   109a0:	4618      	mov	r0, r3
   109a2:	4b19      	ldr	r3, [pc, #100]	; (10a08 <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
   109a4:	4798      	blx	r3
	}
		

		if (i2c->isOK)
   109a6:	687b      	ldr	r3, [r7, #4]
   109a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   109aa:	7a5b      	ldrb	r3, [r3, #9]
   109ac:	b2db      	uxtb	r3, r3
   109ae:	2b00      	cmp	r3, #0
   109b0:	d01b      	beq.n	109ea <_ZN24SingleFlapperValve_Class4InitEv+0x62>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
   109b2:	687b      	ldr	r3, [r7, #4]
   109b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
   109b8:	4619      	mov	r1, r3
   109ba:	6878      	ldr	r0, [r7, #4]
   109bc:	4b13      	ldr	r3, [pc, #76]	; (10a0c <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
   109be:	4798      	blx	r3
			expanders[0]->SetPortInput();
   109c0:	687b      	ldr	r3, [r7, #4]
   109c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   109c4:	4618      	mov	r0, r3
   109c6:	4b12      	ldr	r3, [pc, #72]	; (10a10 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
   109c8:	4798      	blx	r3
			expanders[1]->SetPortInput(0x80);
   109ca:	687b      	ldr	r3, [r7, #4]
   109cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   109ce:	2180      	movs	r1, #128	; 0x80
   109d0:	4618      	mov	r0, r3
   109d2:	4b10      	ldr	r3, [pc, #64]	; (10a14 <_ZN24SingleFlapperValve_Class4InitEv+0x8c>)
   109d4:	4798      	blx	r3
			expanders[2]->SetPortOutput();
   109d6:	687b      	ldr	r3, [r7, #4]
   109d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   109da:	4618      	mov	r0, r3
   109dc:	4b0e      	ldr	r3, [pc, #56]	; (10a18 <_ZN24SingleFlapperValve_Class4InitEv+0x90>)
   109de:	4798      	blx	r3
			expanders[3]->SetPortInput();
   109e0:	687b      	ldr	r3, [r7, #4]
   109e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   109e4:	4618      	mov	r0, r3
   109e6:	4b0a      	ldr	r3, [pc, #40]	; (10a10 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
   109e8:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
   109ea:	687b      	ldr	r3, [r7, #4]
   109ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   109ee:	7a5b      	ldrb	r3, [r3, #9]
   109f0:	b2da      	uxtb	r2, r3
   109f2:	687b      	ldr	r3, [r7, #4]
   109f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		
		return isOK;
   109f8:	687b      	ldr	r3, [r7, #4]
   109fa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   109fe:	b2db      	uxtb	r3, r3


}
   10a00:	4618      	mov	r0, r3
   10a02:	3708      	adds	r7, #8
   10a04:	46bd      	mov	sp, r7
   10a06:	bd80      	pop	{r7, pc}
   10a08:	0000dc49 	.word	0x0000dc49
   10a0c:	00010a45 	.word	0x00010a45
   10a10:	00011c89 	.word	0x00011c89
   10a14:	00011ccd 	.word	0x00011ccd
   10a18:	00011d41 	.word	0x00011d41

00010a1c <_ZN24SingleFlapperValve_Class4InitEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
   10a1c:	b580      	push	{r7, lr}
   10a1e:	b082      	sub	sp, #8
   10a20:	af00      	add	r7, sp, #0
   10a22:	6078      	str	r0, [r7, #4]
   10a24:	460b      	mov	r3, r1
   10a26:	70fb      	strb	r3, [r7, #3]
	valveID=valve_id;
   10a28:	687b      	ldr	r3, [r7, #4]
   10a2a:	78fa      	ldrb	r2, [r7, #3]
   10a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	return Init();
   10a30:	6878      	ldr	r0, [r7, #4]
   10a32:	4b03      	ldr	r3, [pc, #12]	; (10a40 <_ZN24SingleFlapperValve_Class4InitEh+0x24>)
   10a34:	4798      	blx	r3
   10a36:	4603      	mov	r3, r0
}
   10a38:	4618      	mov	r0, r3
   10a3a:	3708      	adds	r7, #8
   10a3c:	46bd      	mov	sp, r7
   10a3e:	bd80      	pop	{r7, pc}
   10a40:	00010989 	.word	0x00010989

00010a44 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
   10a44:	b580      	push	{r7, lr}
   10a46:	b084      	sub	sp, #16
   10a48:	af00      	add	r7, sp, #0
   10a4a:	6078      	str	r0, [r7, #4]
   10a4c:	460b      	mov	r3, r1
   10a4e:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   10a50:	2300      	movs	r3, #0
   10a52:	60fb      	str	r3, [r7, #12]
   10a54:	68fb      	ldr	r3, [r7, #12]
   10a56:	2b03      	cmp	r3, #3
   10a58:	dc2e      	bgt.n	10ab8 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x74>
	{
		currentExpander=&(expandersStatic[valveID][i]);
   10a5a:	687b      	ldr	r3, [r7, #4]
   10a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
   10a60:	4619      	mov	r1, r3
   10a62:	68fb      	ldr	r3, [r7, #12]
   10a64:	461a      	mov	r2, r3
   10a66:	00d2      	lsls	r2, r2, #3
   10a68:	1ad2      	subs	r2, r2, r3
   10a6a:	0093      	lsls	r3, r2, #2
   10a6c:	461a      	mov	r2, r3
   10a6e:	460b      	mov	r3, r1
   10a70:	00db      	lsls	r3, r3, #3
   10a72:	1a5b      	subs	r3, r3, r1
   10a74:	011b      	lsls	r3, r3, #4
   10a76:	4413      	add	r3, r2
   10a78:	4a12      	ldr	r2, [pc, #72]	; (10ac4 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
   10a7a:	441a      	add	r2, r3
   10a7c:	687b      	ldr	r3, [r7, #4]
   10a7e:	665a      	str	r2, [r3, #100]	; 0x64
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
   10a80:	687b      	ldr	r3, [r7, #4]
   10a82:	6e58      	ldr	r0, [r3, #100]	; 0x64
   10a84:	68fb      	ldr	r3, [r7, #12]
   10a86:	b2da      	uxtb	r2, r3
   10a88:	78fb      	ldrb	r3, [r7, #3]
   10a8a:	009b      	lsls	r3, r3, #2
   10a8c:	b2db      	uxtb	r3, r3
   10a8e:	4413      	add	r3, r2
   10a90:	b2db      	uxtb	r3, r3
   10a92:	3320      	adds	r3, #32
   10a94:	b2d9      	uxtb	r1, r3
   10a96:	687b      	ldr	r3, [r7, #4]
   10a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10a9a:	461a      	mov	r2, r3
   10a9c:	4b0a      	ldr	r3, [pc, #40]	; (10ac8 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x84>)
   10a9e:	4798      	blx	r3
		expanders[i]=currentExpander;
   10aa0:	687b      	ldr	r3, [r7, #4]
   10aa2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   10aa4:	6879      	ldr	r1, [r7, #4]
   10aa6:	68fb      	ldr	r3, [r7, #12]
   10aa8:	3314      	adds	r3, #20
   10aaa:	009b      	lsls	r3, r3, #2
   10aac:	440b      	add	r3, r1
   10aae:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   10ab0:	68fb      	ldr	r3, [r7, #12]
   10ab2:	3301      	adds	r3, #1
   10ab4:	60fb      	str	r3, [r7, #12]
   10ab6:	e7cd      	b.n	10a54 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
   10ab8:	2300      	movs	r3, #0
}
   10aba:	4618      	mov	r0, r3
   10abc:	3710      	adds	r7, #16
   10abe:	46bd      	mov	sp, r7
   10ac0:	bd80      	pop	{r7, pc}
   10ac2:	bf00      	nop
   10ac4:	200020ec 	.word	0x200020ec
   10ac8:	00011ae3 	.word	0x00011ae3

00010acc <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
   10acc:	b590      	push	{r4, r7, lr}
   10ace:	b085      	sub	sp, #20
   10ad0:	af00      	add	r7, sp, #0
   10ad2:	60f8      	str	r0, [r7, #12]
   10ad4:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
   10ad6:	68bb      	ldr	r3, [r7, #8]
   10ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10ada:	4618      	mov	r0, r3
   10adc:	4b10      	ldr	r3, [pc, #64]	; (10b20 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
   10ade:	4798      	blx	r3
   10ae0:	4603      	mov	r3, r0
   10ae2:	461a      	mov	r2, r3
   10ae4:	68bb      	ldr	r3, [r7, #8]
   10ae6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	controlOutputs=FillControlOutputs(value);
   10aea:	68b9      	ldr	r1, [r7, #8]
   10aec:	68bb      	ldr	r3, [r7, #8]
   10aee:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   10af2:	68bc      	ldr	r4, [r7, #8]
   10af4:	463b      	mov	r3, r7
   10af6:	4618      	mov	r0, r3
   10af8:	4b0a      	ldr	r3, [pc, #40]	; (10b24 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x58>)
   10afa:	4798      	blx	r3
   10afc:	f104 033a 	add.w	r3, r4, #58	; 0x3a
   10b00:	463a      	mov	r2, r7
   10b02:	6811      	ldr	r1, [r2, #0]
   10b04:	6852      	ldr	r2, [r2, #4]
   10b06:	6019      	str	r1, [r3, #0]
   10b08:	605a      	str	r2, [r3, #4]
	return controlOutputs;
   10b0a:	68fa      	ldr	r2, [r7, #12]
   10b0c:	68bb      	ldr	r3, [r7, #8]
   10b0e:	333a      	adds	r3, #58	; 0x3a
   10b10:	6819      	ldr	r1, [r3, #0]
   10b12:	685b      	ldr	r3, [r3, #4]
   10b14:	6011      	str	r1, [r2, #0]
   10b16:	6053      	str	r3, [r2, #4]
}
   10b18:	68f8      	ldr	r0, [r7, #12]
   10b1a:	3714      	adds	r7, #20
   10b1c:	46bd      	mov	sp, r7
   10b1e:	bd90      	pop	{r4, r7, pc}
   10b20:	00011bc9 	.word	0x00011bc9
   10b24:	000119d5 	.word	0x000119d5

00010b28 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
   10b28:	b590      	push	{r4, r7, lr}
   10b2a:	b085      	sub	sp, #20
   10b2c:	af00      	add	r7, sp, #0
   10b2e:	60f8      	str	r0, [r7, #12]
   10b30:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
   10b32:	68bb      	ldr	r3, [r7, #8]
   10b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   10b36:	4618      	mov	r0, r3
   10b38:	4b10      	ldr	r3, [pc, #64]	; (10b7c <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
   10b3a:	4798      	blx	r3
   10b3c:	4603      	mov	r3, r0
   10b3e:	461a      	mov	r2, r3
   10b40:	68bb      	ldr	r3, [r7, #8]
   10b42:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	statusInputs=FillInputStatus(value);
   10b46:	68b9      	ldr	r1, [r7, #8]
   10b48:	68bb      	ldr	r3, [r7, #8]
   10b4a:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   10b4e:	68bc      	ldr	r4, [r7, #8]
   10b50:	463b      	mov	r3, r7
   10b52:	4618      	mov	r0, r3
   10b54:	4b0a      	ldr	r3, [pc, #40]	; (10b80 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
   10b56:	4798      	blx	r3
   10b58:	f104 0342 	add.w	r3, r4, #66	; 0x42
   10b5c:	463a      	mov	r2, r7
   10b5e:	6811      	ldr	r1, [r2, #0]
   10b60:	6019      	str	r1, [r3, #0]
   10b62:	8892      	ldrh	r2, [r2, #4]
   10b64:	809a      	strh	r2, [r3, #4]
	return statusInputs;
   10b66:	68fa      	ldr	r2, [r7, #12]
   10b68:	68bb      	ldr	r3, [r7, #8]
   10b6a:	3342      	adds	r3, #66	; 0x42
   10b6c:	6819      	ldr	r1, [r3, #0]
   10b6e:	6011      	str	r1, [r2, #0]
   10b70:	889b      	ldrh	r3, [r3, #4]
   10b72:	8093      	strh	r3, [r2, #4]
}
   10b74:	68f8      	ldr	r0, [r7, #12]
   10b76:	3714      	adds	r7, #20
   10b78:	46bd      	mov	sp, r7
   10b7a:	bd90      	pop	{r4, r7, pc}
   10b7c:	00011bc9 	.word	0x00011bc9
   10b80:	00011981 	.word	0x00011981

00010b84 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
   10b84:	b580      	push	{r7, lr}
   10b86:	b082      	sub	sp, #8
   10b88:	af00      	add	r7, sp, #0
   10b8a:	6078      	str	r0, [r7, #4]
   10b8c:	460b      	mov	r3, r1
   10b8e:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   10b90:	687b      	ldr	r3, [r7, #4]
   10b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10b94:	4618      	mov	r0, r3
   10b96:	4b19      	ldr	r3, [pc, #100]	; (10bfc <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
   10b98:	4798      	blx	r3
   10b9a:	4603      	mov	r3, r0
   10b9c:	461a      	mov	r2, r3
   10b9e:	687b      	ldr	r3, [r7, #4]
   10ba0:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x01:value&0xfe;
   10ba4:	78fb      	ldrb	r3, [r7, #3]
   10ba6:	2b00      	cmp	r3, #0
   10ba8:	d006      	beq.n	10bb8 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
   10baa:	687b      	ldr	r3, [r7, #4]
   10bac:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10bb0:	f043 0301 	orr.w	r3, r3, #1
   10bb4:	b2db      	uxtb	r3, r3
   10bb6:	e005      	b.n	10bc4 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
   10bb8:	687b      	ldr	r3, [r7, #4]
   10bba:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10bbe:	f023 0301 	bic.w	r3, r3, #1
   10bc2:	b2db      	uxtb	r3, r3
   10bc4:	687a      	ldr	r2, [r7, #4]
   10bc6:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	controlOutputs.niAlcFvMotorEnable=b;
   10bca:	687b      	ldr	r3, [r7, #4]
   10bcc:	78fa      	ldrb	r2, [r7, #3]
   10bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	value=expanders[1]->WriteGPIORegister(value);
   10bd2:	687b      	ldr	r3, [r7, #4]
   10bd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10bd6:	687b      	ldr	r3, [r7, #4]
   10bd8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10bdc:	4619      	mov	r1, r3
   10bde:	4610      	mov	r0, r2
   10be0:	4b07      	ldr	r3, [pc, #28]	; (10c00 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
   10be2:	4798      	blx	r3
   10be4:	4603      	mov	r3, r0
   10be6:	461a      	mov	r2, r3
   10be8:	687b      	ldr	r3, [r7, #4]
   10bea:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   10bee:	687b      	ldr	r3, [r7, #4]
   10bf0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   10bf4:	4618      	mov	r0, r3
   10bf6:	3708      	adds	r7, #8
   10bf8:	46bd      	mov	sp, r7
   10bfa:	bd80      	pop	{r7, pc}
   10bfc:	00011bc9 	.word	0x00011bc9
   10c00:	00011c4d 	.word	0x00011c4d

00010c04 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
   10c04:	b580      	push	{r7, lr}
   10c06:	b082      	sub	sp, #8
   10c08:	af00      	add	r7, sp, #0
   10c0a:	6078      	str	r0, [r7, #4]
   10c0c:	460b      	mov	r3, r1
   10c0e:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   10c10:	687b      	ldr	r3, [r7, #4]
   10c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10c14:	4618      	mov	r0, r3
   10c16:	4b17      	ldr	r3, [pc, #92]	; (10c74 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
   10c18:	4798      	blx	r3
   10c1a:	4603      	mov	r3, r0
   10c1c:	461a      	mov	r2, r3
   10c1e:	687b      	ldr	r3, [r7, #4]
   10c20:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x20:value&0xdf;
   10c24:	78fb      	ldrb	r3, [r7, #3]
   10c26:	2b00      	cmp	r3, #0
   10c28:	d006      	beq.n	10c38 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
   10c2a:	687b      	ldr	r3, [r7, #4]
   10c2c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10c30:	f043 0320 	orr.w	r3, r3, #32
   10c34:	b2db      	uxtb	r3, r3
   10c36:	e005      	b.n	10c44 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
   10c38:	687b      	ldr	r3, [r7, #4]
   10c3a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10c3e:	f023 0320 	bic.w	r3, r3, #32
   10c42:	b2db      	uxtb	r3, r3
   10c44:	687a      	ldr	r2, [r7, #4]
   10c46:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   10c4a:	687b      	ldr	r3, [r7, #4]
   10c4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10c4e:	687b      	ldr	r3, [r7, #4]
   10c50:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10c54:	4619      	mov	r1, r3
   10c56:	4610      	mov	r0, r2
   10c58:	4b07      	ldr	r3, [pc, #28]	; (10c78 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
   10c5a:	4798      	blx	r3
   10c5c:	4603      	mov	r3, r0
   10c5e:	461a      	mov	r2, r3
   10c60:	687b      	ldr	r3, [r7, #4]
   10c62:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   10c66:	687b      	ldr	r3, [r7, #4]
   10c68:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   10c6c:	4618      	mov	r0, r3
   10c6e:	3708      	adds	r7, #8
   10c70:	46bd      	mov	sp, r7
   10c72:	bd80      	pop	{r7, pc}
   10c74:	00011bc9 	.word	0x00011bc9
   10c78:	00011c4d 	.word	0x00011c4d

00010c7c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
   10c7c:	b580      	push	{r7, lr}
   10c7e:	b082      	sub	sp, #8
   10c80:	af00      	add	r7, sp, #0
   10c82:	6078      	str	r0, [r7, #4]
   10c84:	460b      	mov	r3, r1
   10c86:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   10c88:	687b      	ldr	r3, [r7, #4]
   10c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10c8c:	4618      	mov	r0, r3
   10c8e:	4b17      	ldr	r3, [pc, #92]	; (10cec <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
   10c90:	4798      	blx	r3
   10c92:	4603      	mov	r3, r0
   10c94:	461a      	mov	r2, r3
   10c96:	687b      	ldr	r3, [r7, #4]
   10c98:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x40:value&0xbf;
   10c9c:	78fb      	ldrb	r3, [r7, #3]
   10c9e:	2b00      	cmp	r3, #0
   10ca0:	d006      	beq.n	10cb0 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
   10ca2:	687b      	ldr	r3, [r7, #4]
   10ca4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10cac:	b2db      	uxtb	r3, r3
   10cae:	e005      	b.n	10cbc <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
   10cb0:	687b      	ldr	r3, [r7, #4]
   10cb2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   10cba:	b2db      	uxtb	r3, r3
   10cbc:	687a      	ldr	r2, [r7, #4]
   10cbe:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   10cc2:	687b      	ldr	r3, [r7, #4]
   10cc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10cc6:	687b      	ldr	r3, [r7, #4]
   10cc8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10ccc:	4619      	mov	r1, r3
   10cce:	4610      	mov	r0, r2
   10cd0:	4b07      	ldr	r3, [pc, #28]	; (10cf0 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
   10cd2:	4798      	blx	r3
   10cd4:	4603      	mov	r3, r0
   10cd6:	461a      	mov	r2, r3
   10cd8:	687b      	ldr	r3, [r7, #4]
   10cda:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   10cde:	687b      	ldr	r3, [r7, #4]
   10ce0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   10ce4:	4618      	mov	r0, r3
   10ce6:	3708      	adds	r7, #8
   10ce8:	46bd      	mov	sp, r7
   10cea:	bd80      	pop	{r7, pc}
   10cec:	00011bc9 	.word	0x00011bc9
   10cf0:	00011c4d 	.word	0x00011c4d

00010cf4 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
   10cf4:	b580      	push	{r7, lr}
   10cf6:	b082      	sub	sp, #8
   10cf8:	af00      	add	r7, sp, #0
   10cfa:	6078      	str	r0, [r7, #4]
   10cfc:	460b      	mov	r3, r1
   10cfe:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   10d00:	687b      	ldr	r3, [r7, #4]
   10d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10d04:	4618      	mov	r0, r3
   10d06:	4b17      	ldr	r3, [pc, #92]	; (10d64 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
   10d08:	4798      	blx	r3
   10d0a:	4603      	mov	r3, r0
   10d0c:	461a      	mov	r2, r3
   10d0e:	687b      	ldr	r3, [r7, #4]
   10d10:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x04:value&0xfb;
   10d14:	78fb      	ldrb	r3, [r7, #3]
   10d16:	2b00      	cmp	r3, #0
   10d18:	d006      	beq.n	10d28 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
   10d1a:	687b      	ldr	r3, [r7, #4]
   10d1c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10d20:	f043 0304 	orr.w	r3, r3, #4
   10d24:	b2db      	uxtb	r3, r3
   10d26:	e005      	b.n	10d34 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
   10d28:	687b      	ldr	r3, [r7, #4]
   10d2a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10d2e:	f023 0304 	bic.w	r3, r3, #4
   10d32:	b2db      	uxtb	r3, r3
   10d34:	687a      	ldr	r2, [r7, #4]
   10d36:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   10d3a:	687b      	ldr	r3, [r7, #4]
   10d3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10d3e:	687b      	ldr	r3, [r7, #4]
   10d40:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10d44:	4619      	mov	r1, r3
   10d46:	4610      	mov	r0, r2
   10d48:	4b07      	ldr	r3, [pc, #28]	; (10d68 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
   10d4a:	4798      	blx	r3
   10d4c:	4603      	mov	r3, r0
   10d4e:	461a      	mov	r2, r3
   10d50:	687b      	ldr	r3, [r7, #4]
   10d52:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   10d56:	687b      	ldr	r3, [r7, #4]
   10d58:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   10d5c:	4618      	mov	r0, r3
   10d5e:	3708      	adds	r7, #8
   10d60:	46bd      	mov	sp, r7
   10d62:	bd80      	pop	{r7, pc}
   10d64:	00011bc9 	.word	0x00011bc9
   10d68:	00011c4d 	.word	0x00011c4d

00010d6c <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
   10d6c:	b580      	push	{r7, lr}
   10d6e:	b082      	sub	sp, #8
   10d70:	af00      	add	r7, sp, #0
   10d72:	6078      	str	r0, [r7, #4]
   10d74:	460b      	mov	r3, r1
   10d76:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
   10d78:	687b      	ldr	r3, [r7, #4]
   10d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10d7c:	78fa      	ldrb	r2, [r7, #3]
   10d7e:	4611      	mov	r1, r2
   10d80:	4618      	mov	r0, r3
   10d82:	4b07      	ldr	r3, [pc, #28]	; (10da0 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
   10d84:	4798      	blx	r3
   10d86:	4603      	mov	r3, r0
   10d88:	461a      	mov	r2, r3
   10d8a:	687b      	ldr	r3, [r7, #4]
   10d8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
   10d90:	687b      	ldr	r3, [r7, #4]
   10d92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
   10d96:	4618      	mov	r0, r3
   10d98:	3708      	adds	r7, #8
   10d9a:	46bd      	mov	sp, r7
   10d9c:	bd80      	pop	{r7, pc}
   10d9e:	bf00      	nop
   10da0:	00011c4d 	.word	0x00011c4d

00010da4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
   10da4:	b580      	push	{r7, lr}
   10da6:	b082      	sub	sp, #8
   10da8:	af00      	add	r7, sp, #0
   10daa:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
   10dac:	687b      	ldr	r3, [r7, #4]
   10dae:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
   10db2:	687b      	ldr	r3, [r7, #4]
   10db4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
   10db8:	687b      	ldr	r3, [r7, #4]
   10dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10dbc:	4618      	mov	r0, r3
   10dbe:	4b18      	ldr	r3, [pc, #96]	; (10e20 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
   10dc0:	4798      	blx	r3
   10dc2:	4603      	mov	r3, r0
   10dc4:	461a      	mov	r2, r3
   10dc6:	687b      	ldr	r3, [r7, #4]
   10dc8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
   10dcc:	687b      	ldr	r3, [r7, #4]
   10dce:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   10dd2:	2bda      	cmp	r3, #218	; 0xda
   10dd4:	dd04      	ble.n	10de0 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
   10dd6:	687b      	ldr	r3, [r7, #4]
   10dd8:	2203      	movs	r2, #3
   10dda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   10dde:	e017      	b.n	10e10 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
   10de0:	687b      	ldr	r3, [r7, #4]
   10de2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   10de6:	2b6d      	cmp	r3, #109	; 0x6d
   10de8:	dd04      	ble.n	10df4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
   10dea:	687b      	ldr	r3, [r7, #4]
   10dec:	2202      	movs	r2, #2
   10dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   10df2:	e00d      	b.n	10e10 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
   10df4:	687b      	ldr	r3, [r7, #4]
   10df6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   10dfa:	2b36      	cmp	r3, #54	; 0x36
   10dfc:	dd04      	ble.n	10e08 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
   10dfe:	687b      	ldr	r3, [r7, #4]
   10e00:	2201      	movs	r2, #1
   10e02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   10e06:	e003      	b.n	10e10 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
   10e08:	687b      	ldr	r3, [r7, #4]
   10e0a:	2200      	movs	r2, #0
   10e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}
	return actualPosition;
   10e10:	687b      	ldr	r3, [r7, #4]
   10e12:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
}
   10e16:	4618      	mov	r0, r3
   10e18:	3708      	adds	r7, #8
   10e1a:	46bd      	mov	sp, r7
   10e1c:	bd80      	pop	{r7, pc}
   10e1e:	bf00      	nop
   10e20:	00011bc9 	.word	0x00011bc9

00010e24 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   10e24:	b590      	push	{r4, r7, lr}
   10e26:	b083      	sub	sp, #12
   10e28:	af00      	add	r7, sp, #0
   10e2a:	6078      	str	r0, [r7, #4]
   10e2c:	4c05      	ldr	r4, [pc, #20]	; (10e44 <__tcf_0+0x20>)
   10e2e:	4b06      	ldr	r3, [pc, #24]	; (10e48 <__tcf_0+0x24>)
   10e30:	429c      	cmp	r4, r3
   10e32:	d004      	beq.n	10e3e <__tcf_0+0x1a>
   10e34:	3c1c      	subs	r4, #28
   10e36:	4620      	mov	r0, r4
   10e38:	4b04      	ldr	r3, [pc, #16]	; (10e4c <__tcf_0+0x28>)
   10e3a:	4798      	blx	r3
   10e3c:	e7f7      	b.n	10e2e <__tcf_0+0xa>
   10e3e:	370c      	adds	r7, #12
   10e40:	46bd      	mov	sp, r7
   10e42:	bd90      	pop	{r4, r7, pc}
   10e44:	200021cc 	.word	0x200021cc
   10e48:	200020ec 	.word	0x200020ec
   10e4c:	00011acf 	.word	0x00011acf

00010e50 <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
   10e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e54:	b082      	sub	sp, #8
   10e56:	af00      	add	r7, sp, #0
   10e58:	6078      	str	r0, [r7, #4]
   10e5a:	6039      	str	r1, [r7, #0]
   10e5c:	687b      	ldr	r3, [r7, #4]
   10e5e:	2b01      	cmp	r3, #1
   10e60:	d16e      	bne.n	10f40 <_Z41__static_initialization_and_destruction_0ii+0xf0>
   10e62:	683b      	ldr	r3, [r7, #0]
   10e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10e68:	4293      	cmp	r3, r2
   10e6a:	d169      	bne.n	10f40 <_Z41__static_initialization_and_destruction_0ii+0xf0>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   10e6c:	4937      	ldr	r1, [pc, #220]	; (10f4c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   10e6e:	4838      	ldr	r0, [pc, #224]	; (10f50 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10e70:	4b38      	ldr	r3, [pc, #224]	; (10f54 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10e72:	4798      	blx	r3
   10e74:	4a38      	ldr	r2, [pc, #224]	; (10f58 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10e76:	4939      	ldr	r1, [pc, #228]	; (10f5c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10e78:	4835      	ldr	r0, [pc, #212]	; (10f50 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10e7a:	4b39      	ldr	r3, [pc, #228]	; (10f60 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10e7c:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   10e7e:	4939      	ldr	r1, [pc, #228]	; (10f64 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10e80:	4839      	ldr	r0, [pc, #228]	; (10f68 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10e82:	4b34      	ldr	r3, [pc, #208]	; (10f54 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10e84:	4798      	blx	r3
   10e86:	4a34      	ldr	r2, [pc, #208]	; (10f58 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10e88:	4934      	ldr	r1, [pc, #208]	; (10f5c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10e8a:	4837      	ldr	r0, [pc, #220]	; (10f68 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10e8c:	4b34      	ldr	r3, [pc, #208]	; (10f60 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10e8e:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   10e90:	4936      	ldr	r1, [pc, #216]	; (10f6c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   10e92:	4837      	ldr	r0, [pc, #220]	; (10f70 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10e94:	4b2f      	ldr	r3, [pc, #188]	; (10f54 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10e96:	4798      	blx	r3
   10e98:	4a2f      	ldr	r2, [pc, #188]	; (10f58 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10e9a:	4930      	ldr	r1, [pc, #192]	; (10f5c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10e9c:	4834      	ldr	r0, [pc, #208]	; (10f70 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10e9e:	4b30      	ldr	r3, [pc, #192]	; (10f60 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10ea0:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   10ea2:	4934      	ldr	r1, [pc, #208]	; (10f74 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   10ea4:	4834      	ldr	r0, [pc, #208]	; (10f78 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   10ea6:	4b2b      	ldr	r3, [pc, #172]	; (10f54 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10ea8:	4798      	blx	r3
   10eaa:	4a2b      	ldr	r2, [pc, #172]	; (10f58 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10eac:	492b      	ldr	r1, [pc, #172]	; (10f5c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10eae:	4832      	ldr	r0, [pc, #200]	; (10f78 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   10eb0:	4b2b      	ldr	r3, [pc, #172]	; (10f60 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10eb2:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   10eb4:	4931      	ldr	r1, [pc, #196]	; (10f7c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   10eb6:	4832      	ldr	r0, [pc, #200]	; (10f80 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   10eb8:	4b26      	ldr	r3, [pc, #152]	; (10f54 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10eba:	4798      	blx	r3
   10ebc:	4a26      	ldr	r2, [pc, #152]	; (10f58 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10ebe:	4927      	ldr	r1, [pc, #156]	; (10f5c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10ec0:	482f      	ldr	r0, [pc, #188]	; (10f80 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   10ec2:	4b27      	ldr	r3, [pc, #156]	; (10f60 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10ec4:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   10ec6:	492f      	ldr	r1, [pc, #188]	; (10f84 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   10ec8:	482f      	ldr	r0, [pc, #188]	; (10f88 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   10eca:	4b22      	ldr	r3, [pc, #136]	; (10f54 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10ecc:	4798      	blx	r3
   10ece:	4a22      	ldr	r2, [pc, #136]	; (10f58 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10ed0:	4922      	ldr	r1, [pc, #136]	; (10f5c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10ed2:	482d      	ldr	r0, [pc, #180]	; (10f88 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   10ed4:	4b22      	ldr	r3, [pc, #136]	; (10f60 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10ed6:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   10ed8:	492c      	ldr	r1, [pc, #176]	; (10f8c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   10eda:	482d      	ldr	r0, [pc, #180]	; (10f90 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   10edc:	4b1d      	ldr	r3, [pc, #116]	; (10f54 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10ede:	4798      	blx	r3
   10ee0:	4a1d      	ldr	r2, [pc, #116]	; (10f58 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10ee2:	491e      	ldr	r1, [pc, #120]	; (10f5c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10ee4:	482a      	ldr	r0, [pc, #168]	; (10f90 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   10ee6:	4b1e      	ldr	r3, [pc, #120]	; (10f60 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10ee8:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   10eea:	492a      	ldr	r1, [pc, #168]	; (10f94 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   10eec:	482a      	ldr	r0, [pc, #168]	; (10f98 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   10eee:	4b19      	ldr	r3, [pc, #100]	; (10f54 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10ef0:	4798      	blx	r3
   10ef2:	4a19      	ldr	r2, [pc, #100]	; (10f58 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10ef4:	4919      	ldr	r1, [pc, #100]	; (10f5c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10ef6:	4828      	ldr	r0, [pc, #160]	; (10f98 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   10ef8:	4b19      	ldr	r3, [pc, #100]	; (10f60 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10efa:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   10efc:	4927      	ldr	r1, [pc, #156]	; (10f9c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   10efe:	4828      	ldr	r0, [pc, #160]	; (10fa0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   10f00:	4b28      	ldr	r3, [pc, #160]	; (10fa4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
   10f02:	4798      	blx	r3
   10f04:	4a14      	ldr	r2, [pc, #80]	; (10f58 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10f06:	4928      	ldr	r1, [pc, #160]	; (10fa8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
   10f08:	4825      	ldr	r0, [pc, #148]	; (10fa0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   10f0a:	4b15      	ldr	r3, [pc, #84]	; (10f60 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10f0c:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   10f0e:	4b27      	ldr	r3, [pc, #156]	; (10fac <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   10f10:	2401      	movs	r4, #1
   10f12:	461e      	mov	r6, r3
   10f14:	2c00      	cmp	r4, #0
   10f16:	db0e      	blt.n	10f36 <_Z41__static_initialization_and_destruction_0ii+0xe6>
   10f18:	4633      	mov	r3, r6
   10f1a:	2503      	movs	r5, #3
   10f1c:	4698      	mov	r8, r3
   10f1e:	2d00      	cmp	r5, #0
   10f20:	db06      	blt.n	10f30 <_Z41__static_initialization_and_destruction_0ii+0xe0>
   10f22:	4640      	mov	r0, r8
   10f24:	4b22      	ldr	r3, [pc, #136]	; (10fb0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   10f26:	4798      	blx	r3
   10f28:	f108 081c 	add.w	r8, r8, #28
   10f2c:	3d01      	subs	r5, #1
   10f2e:	e7f6      	b.n	10f1e <_Z41__static_initialization_and_destruction_0ii+0xce>
   10f30:	3670      	adds	r6, #112	; 0x70
   10f32:	3c01      	subs	r4, #1
   10f34:	e7ee      	b.n	10f14 <_Z41__static_initialization_and_destruction_0ii+0xc4>
   10f36:	4a08      	ldr	r2, [pc, #32]	; (10f58 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10f38:	491e      	ldr	r1, [pc, #120]	; (10fb4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
   10f3a:	2000      	movs	r0, #0
   10f3c:	4b08      	ldr	r3, [pc, #32]	; (10f60 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10f3e:	4798      	blx	r3
}
   10f40:	bf00      	nop
   10f42:	3708      	adds	r7, #8
   10f44:	46bd      	mov	sp, r7
   10f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f4a:	bf00      	nop
   10f4c:	20009dc0 	.word	0x20009dc0
   10f50:	20001fd0 	.word	0x20001fd0
   10f54:	0000dd75 	.word	0x0000dd75
   10f58:	20000000 	.word	0x20000000
   10f5c:	0000ddad 	.word	0x0000ddad
   10f60:	000134a5 	.word	0x000134a5
   10f64:	20009e54 	.word	0x20009e54
   10f68:	20001ff0 	.word	0x20001ff0
   10f6c:	20009f78 	.word	0x20009f78
   10f70:	20002010 	.word	0x20002010
   10f74:	20009e74 	.word	0x20009e74
   10f78:	20002030 	.word	0x20002030
   10f7c:	20009f38 	.word	0x20009f38
   10f80:	20002050 	.word	0x20002050
   10f84:	20009f58 	.word	0x20009f58
   10f88:	20002070 	.word	0x20002070
   10f8c:	20009e30 	.word	0x20009e30
   10f90:	20002090 	.word	0x20002090
   10f94:	20009ed0 	.word	0x20009ed0
   10f98:	200020b0 	.word	0x200020b0
   10f9c:	20009e94 	.word	0x20009e94
   10fa0:	200020d4 	.word	0x200020d4
   10fa4:	0000dc19 	.word	0x0000dc19
   10fa8:	0000dc35 	.word	0x0000dc35
   10fac:	200020ec 	.word	0x200020ec
   10fb0:	00011abb 	.word	0x00011abb
   10fb4:	00010e25 	.word	0x00010e25

00010fb8 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   10fb8:	b580      	push	{r7, lr}
   10fba:	af00      	add	r7, sp, #0
   10fbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10fc0:	2001      	movs	r0, #1
   10fc2:	4b01      	ldr	r3, [pc, #4]	; (10fc8 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   10fc4:	4798      	blx	r3
   10fc6:	bd80      	pop	{r7, pc}
   10fc8:	00010e51 	.word	0x00010e51

00010fcc <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
   10fcc:	b480      	push	{r7}
   10fce:	b083      	sub	sp, #12
   10fd0:	af00      	add	r7, sp, #0
   10fd2:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
   10fd4:	4a07      	ldr	r2, [pc, #28]	; (10ff4 <_ZN18SingleHeater_ClassC1Ev+0x28>)
   10fd6:	687b      	ldr	r3, [r7, #4]
   10fd8:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
   10fda:	687b      	ldr	r3, [r7, #4]
   10fdc:	4a06      	ldr	r2, [pc, #24]	; (10ff8 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
   10fde:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
   10fe0:	687b      	ldr	r3, [r7, #4]
   10fe2:	2200      	movs	r2, #0
   10fe4:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
   10fe6:	687b      	ldr	r3, [r7, #4]
   10fe8:	4618      	mov	r0, r3
   10fea:	370c      	adds	r7, #12
   10fec:	46bd      	mov	sp, r7
   10fee:	bc80      	pop	{r7}
   10ff0:	4770      	bx	lr
   10ff2:	bf00      	nop
   10ff4:	200021e4 	.word	0x200021e4
   10ff8:	200021cc 	.word	0x200021cc

00010ffc <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   10ffc:	b480      	push	{r7}
   10ffe:	b083      	sub	sp, #12
   11000:	af00      	add	r7, sp, #0
   11002:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   11004:	687b      	ldr	r3, [r7, #4]
   11006:	4618      	mov	r0, r3
   11008:	370c      	adds	r7, #12
   1100a:	46bd      	mov	sp, r7
   1100c:	bc80      	pop	{r7}
   1100e:	4770      	bx	lr

00011010 <_ZN18SingleHeater_Class10ReadStatusEv>:
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
	}
	
}

uint8_t	SingleHeater_Class::ReadStatus(void){
   11010:	b580      	push	{r7, lr}
   11012:	b084      	sub	sp, #16
   11014:	af00      	add	r7, sp, #0
   11016:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   11018:	687b      	ldr	r3, [r7, #4]
   1101a:	68db      	ldr	r3, [r3, #12]
   1101c:	4618      	mov	r0, r3
   1101e:	4b16      	ldr	r3, [pc, #88]	; (11078 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   11020:	4798      	blx	r3
   11022:	4603      	mov	r3, r0
   11024:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   11026:	7bbb      	ldrb	r3, [r7, #14]
   11028:	f003 0301 	and.w	r3, r3, #1
   1102c:	2b00      	cmp	r3, #0
   1102e:	bf14      	ite	ne
   11030:	2301      	movne	r3, #1
   11032:	2300      	moveq	r3, #0
   11034:	b2da      	uxtb	r2, r3
   11036:	687b      	ldr	r3, [r7, #4]
   11038:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   1103a:	2300      	movs	r3, #0
   1103c:	73fb      	strb	r3, [r7, #15]
   1103e:	7bfb      	ldrb	r3, [r7, #15]
   11040:	2b03      	cmp	r3, #3
   11042:	dc14      	bgt.n	1106e <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   11044:	7bfb      	ldrb	r3, [r7, #15]
   11046:	7bb9      	ldrb	r1, [r7, #14]
   11048:	7bfa      	ldrb	r2, [r7, #15]
   1104a:	3201      	adds	r2, #1
   1104c:	fa41 f202 	asr.w	r2, r1, r2
   11050:	f002 0201 	and.w	r2, r2, #1
   11054:	2a00      	cmp	r2, #0
   11056:	bf14      	ite	ne
   11058:	2201      	movne	r2, #1
   1105a:	2200      	moveq	r2, #0
   1105c:	b2d1      	uxtb	r1, r2
   1105e:	687a      	ldr	r2, [r7, #4]
   11060:	4413      	add	r3, r2
   11062:	460a      	mov	r2, r1
   11064:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   11066:	7bfb      	ldrb	r3, [r7, #15]
   11068:	3301      	adds	r3, #1
   1106a:	73fb      	strb	r3, [r7, #15]
   1106c:	e7e7      	b.n	1103e <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   1106e:	7bbb      	ldrb	r3, [r7, #14]
}
   11070:	4618      	mov	r0, r3
   11072:	3710      	adds	r7, #16
   11074:	46bd      	mov	sp, r7
   11076:	bd80      	pop	{r7, pc}
   11078:	00011bc9 	.word	0x00011bc9

0001107c <_ZN18SingleHeater_Class14ReadEnableGIPOEv>:

uint8_t	SingleHeater_Class::ReadEnableGIPO(void){
   1107c:	b580      	push	{r7, lr}
   1107e:	b084      	sub	sp, #16
   11080:	af00      	add	r7, sp, #0
   11082:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[1]->ReadGPIORegister();
   11084:	687b      	ldr	r3, [r7, #4]
   11086:	691b      	ldr	r3, [r3, #16]
   11088:	4618      	mov	r0, r3
   1108a:	4b11      	ldr	r3, [pc, #68]	; (110d0 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x54>)
   1108c:	4798      	blx	r3
   1108e:	4603      	mov	r3, r0
   11090:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i = 0; i < 4; i++)
   11092:	2300      	movs	r3, #0
   11094:	73fb      	strb	r3, [r7, #15]
   11096:	7bfb      	ldrb	r3, [r7, #15]
   11098:	2b03      	cmp	r3, #3
   1109a:	dc13      	bgt.n	110c4 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x48>
	{
		enables[i]=!(r&(0x01<<i));
   1109c:	7bfb      	ldrb	r3, [r7, #15]
   1109e:	7bb9      	ldrb	r1, [r7, #14]
   110a0:	7bfa      	ldrb	r2, [r7, #15]
   110a2:	fa41 f202 	asr.w	r2, r1, r2
   110a6:	f002 0201 	and.w	r2, r2, #1
   110aa:	2a00      	cmp	r2, #0
   110ac:	bf0c      	ite	eq
   110ae:	2201      	moveq	r2, #1
   110b0:	2200      	movne	r2, #0
   110b2:	b2d1      	uxtb	r1, r2
   110b4:	687a      	ldr	r2, [r7, #4]
   110b6:	4413      	add	r3, r2
   110b8:	460a      	mov	r2, r1
   110ba:	771a      	strb	r2, [r3, #28]
	for (uint8_t i = 0; i < 4; i++)
   110bc:	7bfb      	ldrb	r3, [r7, #15]
   110be:	3301      	adds	r3, #1
   110c0:	73fb      	strb	r3, [r7, #15]
   110c2:	e7e8      	b.n	11096 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x1a>
	}
	return r;
   110c4:	7bbb      	ldrb	r3, [r7, #14]
}
   110c6:	4618      	mov	r0, r3
   110c8:	3710      	adds	r7, #16
   110ca:	46bd      	mov	sp, r7
   110cc:	bd80      	pop	{r7, pc}
   110ce:	bf00      	nop
   110d0:	00011bc9 	.word	0x00011bc9

000110d4 <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
	enabled=expanders[1]->WriteDigit(indexHeater,false);
	return uint8_t(enabled);
}
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   110d4:	b580      	push	{r7, lr}
   110d6:	b082      	sub	sp, #8
   110d8:	af00      	add	r7, sp, #0
   110da:	6078      	str	r0, [r7, #4]
   110dc:	460b      	mov	r3, r1
   110de:	70fb      	strb	r3, [r7, #3]
   110e0:	4613      	mov	r3, r2
   110e2:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   110e4:	687b      	ldr	r3, [r7, #4]
   110e6:	6918      	ldr	r0, [r3, #16]
   110e8:	78bb      	ldrb	r3, [r7, #2]
   110ea:	f083 0301 	eor.w	r3, r3, #1
   110ee:	b2da      	uxtb	r2, r3
   110f0:	78fb      	ldrb	r3, [r7, #3]
   110f2:	4619      	mov	r1, r3
   110f4:	4b05      	ldr	r3, [pc, #20]	; (1110c <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
   110f6:	4798      	blx	r3
   110f8:	4603      	mov	r3, r0
   110fa:	461a      	mov	r2, r3
   110fc:	687b      	ldr	r3, [r7, #4]
   110fe:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   11100:	687b      	ldr	r3, [r7, #4]
   11102:	7adb      	ldrb	r3, [r3, #11]
}
   11104:	4618      	mov	r0, r3
   11106:	3708      	adds	r7, #8
   11108:	46bd      	mov	sp, r7
   1110a:	bd80      	pop	{r7, pc}
   1110c:	00011e81 	.word	0x00011e81

00011110 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   11110:	b590      	push	{r4, r7, lr}
   11112:	b083      	sub	sp, #12
   11114:	af00      	add	r7, sp, #0
   11116:	6078      	str	r0, [r7, #4]
   11118:	4c05      	ldr	r4, [pc, #20]	; (11130 <__tcf_0+0x20>)
   1111a:	4b06      	ldr	r3, [pc, #24]	; (11134 <__tcf_0+0x24>)
   1111c:	429c      	cmp	r4, r3
   1111e:	d004      	beq.n	1112a <__tcf_0+0x1a>
   11120:	3c1c      	subs	r4, #28
   11122:	4620      	mov	r0, r4
   11124:	4b04      	ldr	r3, [pc, #16]	; (11138 <__tcf_0+0x28>)
   11126:	4798      	blx	r3
   11128:	e7f7      	b.n	1111a <__tcf_0+0xa>
   1112a:	370c      	adds	r7, #12
   1112c:	46bd      	mov	sp, r7
   1112e:	bd90      	pop	{r4, r7, pc}
   11130:	20002220 	.word	0x20002220
   11134:	200021e8 	.word	0x200021e8
   11138:	00011acf 	.word	0x00011acf

0001113c <_Z41__static_initialization_and_destruction_0ii>:
	}
	
	return result;
}

   1113c:	b5b0      	push	{r4, r5, r7, lr}
   1113e:	b082      	sub	sp, #8
   11140:	af00      	add	r7, sp, #0
   11142:	6078      	str	r0, [r7, #4]
   11144:	6039      	str	r1, [r7, #0]
   11146:	687b      	ldr	r3, [r7, #4]
   11148:	2b01      	cmp	r3, #1
   1114a:	d125      	bne.n	11198 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   1114c:	683b      	ldr	r3, [r7, #0]
   1114e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11152:	4293      	cmp	r3, r2
   11154:	d120      	bne.n	11198 <_Z41__static_initialization_and_destruction_0ii+0x5c>
	SingleHeater_Class( const SingleHeater_Class &c );
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   11156:	4912      	ldr	r1, [pc, #72]	; (111a0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   11158:	4812      	ldr	r0, [pc, #72]	; (111a4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1115a:	4b13      	ldr	r3, [pc, #76]	; (111a8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   1115c:	4798      	blx	r3
   1115e:	4a13      	ldr	r2, [pc, #76]	; (111ac <_Z41__static_initialization_and_destruction_0ii+0x70>)
   11160:	4913      	ldr	r1, [pc, #76]	; (111b0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   11162:	4810      	ldr	r0, [pc, #64]	; (111a4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   11164:	4b13      	ldr	r3, [pc, #76]	; (111b4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   11166:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   11168:	4b13      	ldr	r3, [pc, #76]	; (111b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   1116a:	2401      	movs	r4, #1
   1116c:	461d      	mov	r5, r3
   1116e:	2c00      	cmp	r4, #0
   11170:	db05      	blt.n	1117e <_Z41__static_initialization_and_destruction_0ii+0x42>
   11172:	4628      	mov	r0, r5
   11174:	4b11      	ldr	r3, [pc, #68]	; (111bc <_Z41__static_initialization_and_destruction_0ii+0x80>)
   11176:	4798      	blx	r3
   11178:	351c      	adds	r5, #28
   1117a:	3c01      	subs	r4, #1
   1117c:	e7f7      	b.n	1116e <_Z41__static_initialization_and_destruction_0ii+0x32>
   1117e:	4a0b      	ldr	r2, [pc, #44]	; (111ac <_Z41__static_initialization_and_destruction_0ii+0x70>)
   11180:	490f      	ldr	r1, [pc, #60]	; (111c0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   11182:	2000      	movs	r0, #0
   11184:	4b0b      	ldr	r3, [pc, #44]	; (111b4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   11186:	4798      	blx	r3
   11188:	480e      	ldr	r0, [pc, #56]	; (111c4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   1118a:	4b0f      	ldr	r3, [pc, #60]	; (111c8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   1118c:	4798      	blx	r3
   1118e:	4a07      	ldr	r2, [pc, #28]	; (111ac <_Z41__static_initialization_and_destruction_0ii+0x70>)
   11190:	490e      	ldr	r1, [pc, #56]	; (111cc <_Z41__static_initialization_and_destruction_0ii+0x90>)
   11192:	480c      	ldr	r0, [pc, #48]	; (111c4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   11194:	4b07      	ldr	r3, [pc, #28]	; (111b4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   11196:	4798      	blx	r3
   11198:	bf00      	nop
   1119a:	3708      	adds	r7, #8
   1119c:	46bd      	mov	sp, r7
   1119e:	bdb0      	pop	{r4, r5, r7, pc}
   111a0:	20009ef0 	.word	0x20009ef0
   111a4:	200021cc 	.word	0x200021cc
   111a8:	0000dc19 	.word	0x0000dc19
   111ac:	20000000 	.word	0x20000000
   111b0:	0000dc35 	.word	0x0000dc35
   111b4:	000134a5 	.word	0x000134a5
   111b8:	200021e8 	.word	0x200021e8
   111bc:	00011abb 	.word	0x00011abb
   111c0:	00011111 	.word	0x00011111
   111c4:	20002220 	.word	0x20002220
   111c8:	00010fcd 	.word	0x00010fcd
   111cc:	00010ffd 	.word	0x00010ffd

000111d0 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   111d0:	b580      	push	{r7, lr}
   111d2:	af00      	add	r7, sp, #0
   111d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   111d8:	2001      	movs	r0, #1
   111da:	4b01      	ldr	r3, [pc, #4]	; (111e0 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   111dc:	4798      	blx	r3
   111de:	bd80      	pop	{r7, pc}
   111e0:	0001113d 	.word	0x0001113d

000111e4 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
   111e4:	4770      	bx	lr

000111e6 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
   111e6:	4770      	bx	lr

000111e8 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
   111e8:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
   111ea:	2302      	movs	r3, #2
   111ec:	4801      	ldr	r0, [pc, #4]	; (111f4 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
   111ee:	4c02      	ldr	r4, [pc, #8]	; (111f8 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
   111f0:	47a0      	blx	r4
	return	r;
}
   111f2:	bd10      	pop	{r4, pc}
   111f4:	20009b90 	.word	0x20009b90
   111f8:	000131cd 	.word	0x000131cd

000111fc <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
   111fc:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
   111fe:	4b03      	ldr	r3, [pc, #12]	; (1120c <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
   11200:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
   11202:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   11206:	4b02      	ldr	r3, [pc, #8]	; (11210 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
   11208:	4798      	blx	r3
}
   1120a:	bd08      	pop	{r3, pc}
   1120c:	20002244 	.word	0x20002244
   11210:	000111e9 	.word	0x000111e9

00011214 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
   11214:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
   11216:	2302      	movs	r3, #2
   11218:	4801      	ldr	r0, [pc, #4]	; (11220 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
   1121a:	4c02      	ldr	r4, [pc, #8]	; (11224 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
   1121c:	47a0      	blx	r4
	return	w;
}
   1121e:	bd10      	pop	{r4, pc}
   11220:	20009b90 	.word	0x20009b90
   11224:	00013199 	.word	0x00013199

00011228 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
   11228:	b500      	push	{lr}
   1122a:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
   1122c:	4b07      	ldr	r3, [pc, #28]	; (1124c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
   1122e:	881b      	ldrh	r3, [r3, #0]
   11230:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
   11234:	4b06      	ldr	r3, [pc, #24]	; (11250 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
   11236:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
   11238:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1123c:	3202      	adds	r2, #2
   1123e:	a901      	add	r1, sp, #4
   11240:	4b04      	ldr	r3, [pc, #16]	; (11254 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
   11242:	4798      	blx	r3
	return	w;
}
   11244:	b003      	add	sp, #12
   11246:	f85d fb04 	ldr.w	pc, [sp], #4
   1124a:	bf00      	nop
   1124c:	0001432c 	.word	0x0001432c
   11250:	20002244 	.word	0x20002244
   11254:	00011215 	.word	0x00011215

00011258 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   11258:	b510      	push	{r4, lr}
   1125a:	4604      	mov	r4, r0
   1125c:	30b8      	adds	r0, #184	; 0xb8
   1125e:	4b03      	ldr	r3, [pc, #12]	; (1126c <_ZN17MemoryFlash_ClassD1Ev+0x14>)
   11260:	4798      	blx	r3
   11262:	4620      	mov	r0, r4
   11264:	4b02      	ldr	r3, [pc, #8]	; (11270 <_ZN17MemoryFlash_ClassD1Ev+0x18>)
   11266:	4798      	blx	r3
{
} //~MemoryManagment_Class
   11268:	4620      	mov	r0, r4
   1126a:	bd10      	pop	{r4, pc}
   1126c:	0001147b 	.word	0x0001147b
   11270:	000111e7 	.word	0x000111e7

00011274 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   11274:	b538      	push	{r3, r4, r5, lr}
   11276:	4604      	mov	r4, r0
   11278:	4b14      	ldr	r3, [pc, #80]	; (112cc <_ZN17MemoryFlash_ClassC1Ev+0x58>)
   1127a:	4798      	blx	r3
   1127c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   11280:	4b13      	ldr	r3, [pc, #76]	; (112d0 <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
   11282:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   11284:	f44f 7500 	mov.w	r5, #512	; 0x200
   11288:	462a      	mov	r2, r5
   1128a:	2100      	movs	r1, #0
   1128c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   11290:	4b10      	ldr	r3, [pc, #64]	; (112d4 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
   11292:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   11294:	2300      	movs	r3, #0
   11296:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
   1129a:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   1129e:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
	_currentAddress=0;
   112a2:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	head=512;
   112a6:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	tail=0;
   112aa:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	flashBuffer=&flashBufferStatic[0];
   112ae:	4a0a      	ldr	r2, [pc, #40]	; (112d8 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
   112b0:	f246 33b4 	movw	r3, #25524	; 0x63b4
   112b4:	50e2      	str	r2, [r4, r3]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
   112b6:	4b09      	ldr	r3, [pc, #36]	; (112dc <_ZN17MemoryFlash_ClassC1Ev+0x68>)
   112b8:	681b      	ldr	r3, [r3, #0]
   112ba:	f503 43a1 	add.w	r3, r3, #20608	; 0x5080
   112be:	332c      	adds	r3, #44	; 0x2c
   112c0:	f246 32b8 	movw	r2, #25528	; 0x63b8
   112c4:	50a3      	str	r3, [r4, r2]
} //MemoryManagment_Class
   112c6:	4620      	mov	r0, r4
   112c8:	bd38      	pop	{r3, r4, r5, pc}
   112ca:	bf00      	nop
   112cc:	000111e5 	.word	0x000111e5
   112d0:	00011479 	.word	0x00011479
   112d4:	00013b59 	.word	0x00013b59
   112d8:	20002248 	.word	0x20002248
   112dc:	20002244 	.word	0x20002244

000112e0 <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   112e0:	b538      	push	{r3, r4, r5, lr}
		if (qspiFlash.Init())
   112e2:	480b      	ldr	r0, [pc, #44]	; (11310 <_ZN17MemoryFlash_Class4InitEm+0x30>)
   112e4:	4b0b      	ldr	r3, [pc, #44]	; (11314 <_ZN17MemoryFlash_Class4InitEm+0x34>)
   112e6:	4798      	blx	r3
   112e8:	b948      	cbnz	r0, 112fe <_ZN17MemoryFlash_Class4InitEm+0x1e>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
   112ea:	4d0b      	ldr	r5, [pc, #44]	; (11318 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   112ec:	490b      	ldr	r1, [pc, #44]	; (1131c <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   112ee:	4628      	mov	r0, r5
   112f0:	4c0b      	ldr	r4, [pc, #44]	; (11320 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   112f2:	47a0      	blx	r4
   112f4:	490b      	ldr	r1, [pc, #44]	; (11324 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   112f6:	4628      	mov	r0, r5
   112f8:	47a0      	blx	r4
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return true;
}
   112fa:	2001      	movs	r0, #1
   112fc:	bd38      	pop	{r3, r4, r5, pc}
   112fe:	4d06      	ldr	r5, [pc, #24]	; (11318 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   11300:	4909      	ldr	r1, [pc, #36]	; (11328 <_ZN17MemoryFlash_Class4InitEm+0x48>)
   11302:	4628      	mov	r0, r5
   11304:	4c06      	ldr	r4, [pc, #24]	; (11320 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   11306:	47a0      	blx	r4
   11308:	4906      	ldr	r1, [pc, #24]	; (11324 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   1130a:	4628      	mov	r0, r5
   1130c:	47a0      	blx	r4
   1130e:	e7f4      	b.n	112fa <_ZN17MemoryFlash_Class4InitEm+0x1a>
   11310:	20009b90 	.word	0x20009b90
   11314:	000130fd 	.word	0x000130fd
   11318:	20001704 	.word	0x20001704
   1131c:	000142c0 	.word	0x000142c0
   11320:	0000e9f5 	.word	0x0000e9f5
   11324:	000142bc 	.word	0x000142bc
   11328:	0001429c 	.word	0x0001429c

0001132c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
		  return	w;
	 }

	 return	r;
 }
 uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   1132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1132e:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   11330:	4b10      	ldr	r3, [pc, #64]	; (11374 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   11332:	681c      	ldr	r4, [r3, #0]
   11334:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   11338:	f246 33b4 	movw	r3, #25524	; 0x63b4
   1133c:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   1133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   11342:	4622      	mov	r2, r4
   11344:	4629      	mov	r1, r5
   11346:	480c      	ldr	r0, [pc, #48]	; (11378 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   11348:	4e0c      	ldr	r6, [pc, #48]	; (1137c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   1134a:	47b0      	blx	r6
	  if (r==0)
   1134c:	4603      	mov	r3, r0
   1134e:	b108      	cbz	r0, 11354 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   11350:	4618      	mov	r0, r3
   11352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   11354:	883b      	ldrh	r3, [r7, #0]
   11356:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
   11358:	4e07      	ldr	r6, [pc, #28]	; (11378 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   1135a:	4621      	mov	r1, r4
   1135c:	4630      	mov	r0, r6
   1135e:	4b08      	ldr	r3, [pc, #32]	; (11380 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   11360:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   11362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   11366:	4622      	mov	r2, r4
   11368:	4629      	mov	r1, r5
   1136a:	4630      	mov	r0, r6
   1136c:	4c05      	ldr	r4, [pc, #20]	; (11384 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   1136e:	47a0      	blx	r4
   11370:	4603      	mov	r3, r0
		  return	w;
   11372:	e7ed      	b.n	11350 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   11374:	20002244 	.word	0x20002244
   11378:	20009b90 	.word	0x20009b90
   1137c:	000131cd 	.word	0x000131cd
   11380:	00013169 	.word	0x00013169
   11384:	00013199 	.word	0x00013199

00011388 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
   11388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1138c:	4c2b      	ldr	r4, [pc, #172]	; (1143c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
   1138e:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
   11392:	492b      	ldr	r1, [pc, #172]	; (11440 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
   11394:	4628      	mov	r0, r5
   11396:	4f2b      	ldr	r7, [pc, #172]	; (11444 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
   11398:	47b8      	blx	r7
   1139a:	4e2b      	ldr	r6, [pc, #172]	; (11448 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
   1139c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 11474 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
   113a0:	4632      	mov	r2, r6
   113a2:	4641      	mov	r1, r8
   113a4:	4628      	mov	r0, r5
   113a6:	4d29      	ldr	r5, [pc, #164]	; (1144c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
   113a8:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   113aa:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
   113ae:	4928      	ldr	r1, [pc, #160]	; (11450 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
   113b0:	4648      	mov	r0, r9
   113b2:	47b8      	blx	r7
   113b4:	4632      	mov	r2, r6
   113b6:	4641      	mov	r1, r8
   113b8:	4648      	mov	r0, r9
   113ba:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   113bc:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
   113c0:	4924      	ldr	r1, [pc, #144]	; (11454 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
   113c2:	4648      	mov	r0, r9
   113c4:	47b8      	blx	r7
   113c6:	4632      	mov	r2, r6
   113c8:	4641      	mov	r1, r8
   113ca:	4648      	mov	r0, r9
   113cc:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   113ce:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
   113d2:	4921      	ldr	r1, [pc, #132]	; (11458 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
   113d4:	4648      	mov	r0, r9
   113d6:	47b8      	blx	r7
   113d8:	4632      	mov	r2, r6
   113da:	4641      	mov	r1, r8
   113dc:	4648      	mov	r0, r9
   113de:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   113e0:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
   113e4:	491d      	ldr	r1, [pc, #116]	; (1145c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
   113e6:	4648      	mov	r0, r9
   113e8:	47b8      	blx	r7
   113ea:	4632      	mov	r2, r6
   113ec:	4641      	mov	r1, r8
   113ee:	4648      	mov	r0, r9
   113f0:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   113f2:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
   113f6:	491a      	ldr	r1, [pc, #104]	; (11460 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
   113f8:	4648      	mov	r0, r9
   113fa:	47b8      	blx	r7
   113fc:	4632      	mov	r2, r6
   113fe:	4641      	mov	r1, r8
   11400:	4648      	mov	r0, r9
   11402:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11404:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
   11408:	4916      	ldr	r1, [pc, #88]	; (11464 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
   1140a:	4648      	mov	r0, r9
   1140c:	47b8      	blx	r7
   1140e:	4632      	mov	r2, r6
   11410:	4641      	mov	r1, r8
   11412:	4648      	mov	r0, r9
   11414:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   11416:	f1a4 0918 	sub.w	r9, r4, #24
   1141a:	4913      	ldr	r1, [pc, #76]	; (11468 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
   1141c:	4648      	mov	r0, r9
   1141e:	47b8      	blx	r7
   11420:	4632      	mov	r2, r6
   11422:	4641      	mov	r1, r8
   11424:	4648      	mov	r0, r9
   11426:	47a8      	blx	r5
   11428:	3408      	adds	r4, #8
   1142a:	4620      	mov	r0, r4
   1142c:	4b0f      	ldr	r3, [pc, #60]	; (1146c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
   1142e:	4798      	blx	r3
   11430:	4632      	mov	r2, r6
   11432:	490f      	ldr	r1, [pc, #60]	; (11470 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
   11434:	4620      	mov	r0, r4
   11436:	47a8      	blx	r5
   11438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1143c:	20003340 	.word	0x20003340
   11440:	20009dc0 	.word	0x20009dc0
   11444:	0000dd75 	.word	0x0000dd75
   11448:	20000000 	.word	0x20000000
   1144c:	000134a5 	.word	0x000134a5
   11450:	20009e54 	.word	0x20009e54
   11454:	20009f78 	.word	0x20009f78
   11458:	20009e74 	.word	0x20009e74
   1145c:	20009f38 	.word	0x20009f38
   11460:	20009f58 	.word	0x20009f58
   11464:	20009e30 	.word	0x20009e30
   11468:	20009ed0 	.word	0x20009ed0
   1146c:	00011275 	.word	0x00011275
   11470:	00011259 	.word	0x00011259
   11474:	0000ddad 	.word	0x0000ddad

00011478 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   11478:	4770      	bx	lr

0001147a <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   1147a:	4770      	bx	lr

0001147c <_ZL17ConversionTimeoutPK10timer_task>:
	ptrTemperaturesClass->converterReady[2]=true;
	ptrTemperaturesClass->SetModuleReady(2);
	ptrTemperaturesClass->converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	ptrTemperaturesClass->converterTimeout=true;
   1147c:	4b03      	ldr	r3, [pc, #12]	; (1148c <_ZL17ConversionTimeoutPK10timer_task+0x10>)
   1147e:	681b      	ldr	r3, [r3, #0]
   11480:	2201      	movs	r2, #1
   11482:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
   11486:	bf00      	nop
   11488:	4770      	bx	lr
   1148a:	bf00      	nop
   1148c:	20009704 	.word	0x20009704

00011490 <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   11490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11492:	4607      	mov	r7, r0
   11494:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   11498:	d007      	beq.n	114aa <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   1149a:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   1149e:	4e05      	ldr	r6, [pc, #20]	; (114b4 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   114a0:	3c68      	subs	r4, #104	; 0x68
   114a2:	4620      	mov	r0, r4
   114a4:	47b0      	blx	r6
   114a6:	42a5      	cmp	r5, r4
   114a8:	d1fa      	bne.n	114a0 <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   114aa:	4638      	mov	r0, r7
   114ac:	4b02      	ldr	r3, [pc, #8]	; (114b8 <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   114ae:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   114b0:	4638      	mov	r0, r7
   114b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   114b4:	00011f8d 	.word	0x00011f8d
   114b8:	00011f8d 	.word	0x00011f8d

000114bc <_ZL15Converter1Readyv>:
	ptrTemperaturesClass->converterReady[0]=true;
   114bc:	4b06      	ldr	r3, [pc, #24]	; (114d8 <_ZL15Converter1Readyv+0x1c>)
   114be:	681b      	ldr	r3, [r3, #0]
   114c0:	2201      	movs	r2, #1
   114c2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsConversionFinished(){
	return converterReady[0]&converterReady[1]&converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
   114c6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
   114ca:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	ptrTemperaturesClass->converterTimeout=false;
   114ce:	2200      	movs	r2, #0
   114d0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   114d4:	4770      	bx	lr
   114d6:	bf00      	nop
   114d8:	20009704 	.word	0x20009704

000114dc <_ZL15Converter2Readyv>:
	ptrTemperaturesClass->converterReady[1]=true;
   114dc:	4b06      	ldr	r3, [pc, #24]	; (114f8 <_ZL15Converter2Readyv+0x1c>)
   114de:	681b      	ldr	r3, [r3, #0]
   114e0:	2201      	movs	r2, #1
   114e2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
   114e6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
   114ea:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	ptrTemperaturesClass->converterTimeout=false;
   114ee:	2200      	movs	r2, #0
   114f0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   114f4:	4770      	bx	lr
   114f6:	bf00      	nop
   114f8:	20009704 	.word	0x20009704

000114fc <_ZL15Converter3Readyv>:
	ptrTemperaturesClass->converterReady[2]=true;
   114fc:	4b06      	ldr	r3, [pc, #24]	; (11518 <_ZL15Converter3Readyv+0x1c>)
   114fe:	681b      	ldr	r3, [r3, #0]
   11500:	2201      	movs	r2, #1
   11502:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
   11506:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
   1150a:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	ptrTemperaturesClass->converterTimeout=false;
   1150e:	2200      	movs	r2, #0
   11510:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   11514:	4770      	bx	lr
   11516:	bf00      	nop
   11518:	20009704 	.word	0x20009704

0001151c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   1151c:	b570      	push	{r4, r5, r6, lr}
   1151e:	4604      	mov	r4, r0
   11520:	460e      	mov	r6, r1
   11522:	4b0a      	ldr	r3, [pc, #40]	; (1154c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x30>)
   11524:	4798      	blx	r3
   11526:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   1152a:	4d09      	ldr	r5, [pc, #36]	; (11550 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   1152c:	47a8      	blx	r5
   1152e:	f504 7088 	add.w	r0, r4, #272	; 0x110
   11532:	47a8      	blx	r5
   11534:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   11538:	47a8      	blx	r5
		spiLite=&ltSPI;
   1153a:	4b06      	ldr	r3, [pc, #24]	; (11554 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   1153c:	1d1a      	adds	r2, r3, #4
   1153e:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   11542:	601c      	str	r4, [r3, #0]
		SPIA=SPI_LTC;
   11544:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   11548:	4620      	mov	r0, r4
   1154a:	bd70      	pop	{r4, r5, r6, pc}
   1154c:	00011f79 	.word	0x00011f79
   11550:	00011f79 	.word	0x00011f79
   11554:	20009704 	.word	0x20009704

00011558 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
   11558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1155c:	4604      	mov	r4, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
   1155e:	233d      	movs	r3, #61	; 0x3d
   11560:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
   11564:	231b      	movs	r3, #27
   11566:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
   1156a:	2327      	movs	r3, #39	; 0x27
   1156c:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
   11570:	f500 76f0 	add.w	r6, r0, #480	; 0x1e0
   11574:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
   11578:	f500 78f6 	add.w	r8, r0, #492	; 0x1ec
		module[ii].Init(csPins[ii],spiLite);
   1157c:	4f06      	ldr	r7, [pc, #24]	; (11598 <_ZN24TemperatureSensors_Class11InitModulesEv+0x40>)
   1157e:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   11582:	f856 1b04 	ldr.w	r1, [r6], #4
   11586:	4628      	mov	r0, r5
   11588:	47b8      	blx	r7
   1158a:	3568      	adds	r5, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   1158c:	4546      	cmp	r6, r8
   1158e:	d1f6      	bne.n	1157e <_ZN24TemperatureSensors_Class11InitModulesEv+0x26>
}
   11590:	2001      	movs	r0, #1
   11592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11596:	bf00      	nop
   11598:	00011fa1 	.word	0x00011fa1

0001159c <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
   1159c:	b538      	push	{r3, r4, r5, lr}
   1159e:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
   115a0:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
   115a4:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   115a8:	4b16      	ldr	r3, [pc, #88]	; (11604 <_ZN24TemperatureSensors_Class4InitEv+0x68>)
   115aa:	4798      	blx	r3
	spiLite->init();
   115ac:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   115b0:	4b15      	ldr	r3, [pc, #84]	; (11608 <_ZN24TemperatureSensors_Class4InitEv+0x6c>)
   115b2:	4798      	blx	r3
	ptrTemperaturesClass=this;
   115b4:	4b15      	ldr	r3, [pc, #84]	; (1160c <_ZN24TemperatureSensors_Class4InitEv+0x70>)
   115b6:	601c      	str	r4, [r3, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   115b8:	4915      	ldr	r1, [pc, #84]	; (11610 <_ZN24TemperatureSensors_Class4InitEv+0x74>)
   115ba:	2028      	movs	r0, #40	; 0x28
   115bc:	4d15      	ldr	r5, [pc, #84]	; (11614 <_ZN24TemperatureSensors_Class4InitEv+0x78>)
   115be:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
   115c0:	4915      	ldr	r1, [pc, #84]	; (11618 <_ZN24TemperatureSensors_Class4InitEv+0x7c>)
   115c2:	2029      	movs	r0, #41	; 0x29
   115c4:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
   115c6:	4915      	ldr	r1, [pc, #84]	; (1161c <_ZN24TemperatureSensors_Class4InitEv+0x80>)
   115c8:	2021      	movs	r0, #33	; 0x21
   115ca:	47a8      	blx	r5
	InitModules();
   115cc:	4620      	mov	r0, r4
   115ce:	4b14      	ldr	r3, [pc, #80]	; (11620 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   115d0:	4798      	blx	r3
	converterReady[0]=true;converterReady[1]=true;converterReady[3]=true;
   115d2:	2301      	movs	r3, #1
   115d4:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   115d8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   115dc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	currentModule=0; currentChannelIndex=0;
   115e0:	2300      	movs	r3, #0
   115e2:	f884 31f3 	strb.w	r3, [r4, #499]	; 0x1f3
   115e6:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
   115ea:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   115ee:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
   115f2:	4013      	ands	r3, r2
   115f4:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   115f8:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
   115fa:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
   115fe:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
   11602:	bd38      	pop	{r3, r4, r5, pc}
   11604:	000128ad 	.word	0x000128ad
   11608:	00012851 	.word	0x00012851
   1160c:	20009704 	.word	0x20009704
   11610:	000114bd 	.word	0x000114bd
   11614:	00002b15 	.word	0x00002b15
   11618:	000114dd 	.word	0x000114dd
   1161c:	000114fd 	.word	0x000114fd
   11620:	00011559 	.word	0x00011559

00011624 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   11624:	b510      	push	{r4, lr}
   11626:	4604      	mov	r4, r0
	converterTimeout=false;
   11628:	2200      	movs	r2, #0
   1162a:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
   1162e:	f890 31f3 	ldrb.w	r3, [r0, #499]	; 0x1f3
   11632:	4403      	add	r3, r0
   11634:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   11638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1163c:	4907      	ldr	r1, [pc, #28]	; (1165c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
   1163e:	4808      	ldr	r0, [pc, #32]	; (11660 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
   11640:	4b08      	ldr	r3, [pc, #32]	; (11664 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
   11642:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   11644:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   11648:	2368      	movs	r3, #104	; 0x68
   1164a:	fb03 4000 	mla	r0, r3, r0, r4
   1164e:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   11652:	30a8      	adds	r0, #168	; 0xa8
   11654:	4b04      	ldr	r3, [pc, #16]	; (11668 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
   11656:	4798      	blx	r3
   11658:	bd10      	pop	{r4, pc}
   1165a:	bf00      	nop
   1165c:	0001147d 	.word	0x0001147d
   11660:	2000971c 	.word	0x2000971c
   11664:	0000dffd 	.word	0x0000dffd
   11668:	00012095 	.word	0x00012095

0001166c <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   1166c:	b538      	push	{r3, r4, r5, lr}
   1166e:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   11670:	491e      	ldr	r1, [pc, #120]	; (116ec <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
   11672:	481f      	ldr	r0, [pc, #124]	; (116f0 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
   11674:	4b1f      	ldr	r3, [pc, #124]	; (116f4 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
   11676:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   11678:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   1167c:	2568      	movs	r5, #104	; 0x68
   1167e:	fb05 4000 	mla	r0, r5, r0, r4
   11682:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   11686:	30a8      	adds	r0, #168	; 0xa8
   11688:	4b1b      	ldr	r3, [pc, #108]	; (116f8 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
   1168a:	4798      	blx	r3
   1168c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
   11690:	f894 21f3 	ldrb.w	r2, [r4, #499]	; 0x1f3
   11694:	fb05 4502 	mla	r5, r5, r2, r4
   11698:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
   1169c:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
   116a0:	2b01      	cmp	r3, #1
   116a2:	d00d      	beq.n	116c0 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
   116a4:	4b15      	ldr	r3, [pc, #84]	; (116fc <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
   116a6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
   116aa:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   116ae:	3301      	adds	r3, #1
   116b0:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   116b2:	2b04      	cmp	r3, #4
   116b4:	d00c      	beq.n	116d0 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
   116b6:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
}
   116ba:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   116be:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
   116c0:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   116c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   116c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   116cc:	66d8      	str	r0, [r3, #108]	; 0x6c
   116ce:	e7ec      	b.n	116aa <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
   116d0:	2300      	movs	r3, #0
   116d2:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
		currentModule++;
   116d6:	3201      	adds	r2, #1
   116d8:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
   116da:	2a03      	cmp	r2, #3
		currentModule++;
   116dc:	bf12      	itee	ne
   116de:	f884 21f3 	strbne.w	r2, [r4, #499]	; 0x1f3
			currentModule=0;
   116e2:	2300      	moveq	r3, #0
   116e4:	f884 31f3 	strbeq.w	r3, [r4, #499]	; 0x1f3
   116e8:	e7e7      	b.n	116ba <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
   116ea:	bf00      	nop
   116ec:	0001147d 	.word	0x0001147d
   116f0:	2000971c 	.word	0x2000971c
   116f4:	0000dfa5 	.word	0x0000dfa5
   116f8:	0001219d 	.word	0x0001219d
   116fc:	c479c000 	.word	0xc479c000

00011700 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
   11700:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   11704:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   11708:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   1170c:	4013      	ands	r3, r2
}
   1170e:	4018      	ands	r0, r3
   11710:	4770      	bx	lr
	...

00011714 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   11714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   11718:	4c30      	ldr	r4, [pc, #192]	; (117dc <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xc8>)
   1171a:	f104 0518 	add.w	r5, r4, #24
   1171e:	4930      	ldr	r1, [pc, #192]	; (117e0 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xcc>)
   11720:	4628      	mov	r0, r5
   11722:	4f30      	ldr	r7, [pc, #192]	; (117e4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd0>)
   11724:	47b8      	blx	r7
   11726:	4e30      	ldr	r6, [pc, #192]	; (117e8 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd4>)
   11728:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 11820 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x10c>
   1172c:	4632      	mov	r2, r6
   1172e:	4641      	mov	r1, r8
   11730:	4628      	mov	r0, r5
   11732:	4d2e      	ldr	r5, [pc, #184]	; (117ec <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd8>)
   11734:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   11736:	f104 0938 	add.w	r9, r4, #56	; 0x38
   1173a:	492d      	ldr	r1, [pc, #180]	; (117f0 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xdc>)
   1173c:	4648      	mov	r0, r9
   1173e:	47b8      	blx	r7
   11740:	4632      	mov	r2, r6
   11742:	4641      	mov	r1, r8
   11744:	4648      	mov	r0, r9
   11746:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   11748:	f104 0958 	add.w	r9, r4, #88	; 0x58
   1174c:	4929      	ldr	r1, [pc, #164]	; (117f4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe0>)
   1174e:	4648      	mov	r0, r9
   11750:	47b8      	blx	r7
   11752:	4632      	mov	r2, r6
   11754:	4641      	mov	r1, r8
   11756:	4648      	mov	r0, r9
   11758:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1175a:	f104 0978 	add.w	r9, r4, #120	; 0x78
   1175e:	4926      	ldr	r1, [pc, #152]	; (117f8 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe4>)
   11760:	4648      	mov	r0, r9
   11762:	47b8      	blx	r7
   11764:	4632      	mov	r2, r6
   11766:	4641      	mov	r1, r8
   11768:	4648      	mov	r0, r9
   1176a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   1176c:	f104 0998 	add.w	r9, r4, #152	; 0x98
   11770:	4922      	ldr	r1, [pc, #136]	; (117fc <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe8>)
   11772:	4648      	mov	r0, r9
   11774:	47b8      	blx	r7
   11776:	4632      	mov	r2, r6
   11778:	4641      	mov	r1, r8
   1177a:	4648      	mov	r0, r9
   1177c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1177e:	f104 09b8 	add.w	r9, r4, #184	; 0xb8
   11782:	491f      	ldr	r1, [pc, #124]	; (11800 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xec>)
   11784:	4648      	mov	r0, r9
   11786:	47b8      	blx	r7
   11788:	4632      	mov	r2, r6
   1178a:	4641      	mov	r1, r8
   1178c:	4648      	mov	r0, r9
   1178e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11790:	f104 09d8 	add.w	r9, r4, #216	; 0xd8
   11794:	491b      	ldr	r1, [pc, #108]	; (11804 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf0>)
   11796:	4648      	mov	r0, r9
   11798:	47b8      	blx	r7
   1179a:	4632      	mov	r2, r6
   1179c:	4641      	mov	r1, r8
   1179e:	4648      	mov	r0, r9
   117a0:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   117a2:	f104 09f8 	add.w	r9, r4, #248	; 0xf8
   117a6:	4918      	ldr	r1, [pc, #96]	; (11808 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf4>)
   117a8:	4648      	mov	r0, r9
   117aa:	47b8      	blx	r7
   117ac:	4632      	mov	r2, r6
   117ae:	4641      	mov	r1, r8
   117b0:	4648      	mov	r0, r9
   117b2:	47a8      	blx	r5
static LT_SPI	ltSPI;
   117b4:	1d27      	adds	r7, r4, #4
   117b6:	4638      	mov	r0, r7
   117b8:	4b14      	ldr	r3, [pc, #80]	; (1180c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf8>)
   117ba:	4798      	blx	r3
   117bc:	4632      	mov	r2, r6
   117be:	4914      	ldr	r1, [pc, #80]	; (11810 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xfc>)
   117c0:	4638      	mov	r0, r7
   117c2:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   117c4:	f504 748c 	add.w	r4, r4, #280	; 0x118
   117c8:	4912      	ldr	r1, [pc, #72]	; (11814 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x100>)
   117ca:	4620      	mov	r0, r4
   117cc:	4b12      	ldr	r3, [pc, #72]	; (11818 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x104>)
   117ce:	4798      	blx	r3
   117d0:	4632      	mov	r2, r6
   117d2:	4912      	ldr	r1, [pc, #72]	; (1181c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x108>)
   117d4:	4620      	mov	r0, r4
   117d6:	47a8      	blx	r5
   117d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   117dc:	20009704 	.word	0x20009704
   117e0:	20009dc0 	.word	0x20009dc0
   117e4:	0000dd75 	.word	0x0000dd75
   117e8:	20000000 	.word	0x20000000
   117ec:	000134a5 	.word	0x000134a5
   117f0:	20009e54 	.word	0x20009e54
   117f4:	20009f78 	.word	0x20009f78
   117f8:	20009e74 	.word	0x20009e74
   117fc:	20009f38 	.word	0x20009f38
   11800:	20009f58 	.word	0x20009f58
   11804:	20009e30 	.word	0x20009e30
   11808:	20009ed0 	.word	0x20009ed0
   1180c:	00012815 	.word	0x00012815
   11810:	0001283d 	.word	0x0001283d
   11814:	20009df8 	.word	0x20009df8
   11818:	0001151d 	.word	0x0001151d
   1181c:	00011491 	.word	0x00011491
   11820:	0000ddad 	.word	0x0000ddad

00011824 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   11824:	b580      	push	{r7, lr}
   11826:	b084      	sub	sp, #16
   11828:	af00      	add	r7, sp, #0
   1182a:	60f8      	str	r0, [r7, #12]
   1182c:	60b9      	str	r1, [r7, #8]
   1182e:	4613      	mov	r3, r2
   11830:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   11832:	68fb      	ldr	r3, [r7, #12]
   11834:	2b00      	cmp	r3, #0
   11836:	d004      	beq.n	11842 <io_write+0x1e>
   11838:	68bb      	ldr	r3, [r7, #8]
   1183a:	2b00      	cmp	r3, #0
   1183c:	d001      	beq.n	11842 <io_write+0x1e>
   1183e:	2301      	movs	r3, #1
   11840:	e000      	b.n	11844 <io_write+0x20>
   11842:	2300      	movs	r3, #0
   11844:	f003 0301 	and.w	r3, r3, #1
   11848:	b2db      	uxtb	r3, r3
   1184a:	2234      	movs	r2, #52	; 0x34
   1184c:	4907      	ldr	r1, [pc, #28]	; (1186c <io_write+0x48>)
   1184e:	4618      	mov	r0, r3
   11850:	4b07      	ldr	r3, [pc, #28]	; (11870 <io_write+0x4c>)
   11852:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   11854:	68fb      	ldr	r3, [r7, #12]
   11856:	681b      	ldr	r3, [r3, #0]
   11858:	88fa      	ldrh	r2, [r7, #6]
   1185a:	68b9      	ldr	r1, [r7, #8]
   1185c:	68f8      	ldr	r0, [r7, #12]
   1185e:	4798      	blx	r3
   11860:	4603      	mov	r3, r0
}
   11862:	4618      	mov	r0, r3
   11864:	3710      	adds	r7, #16
   11866:	46bd      	mov	sp, r7
   11868:	bd80      	pop	{r7, pc}
   1186a:	bf00      	nop
   1186c:	000142e0 	.word	0x000142e0
   11870:	000040dd 	.word	0x000040dd

00011874 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   11874:	b580      	push	{r7, lr}
   11876:	b084      	sub	sp, #16
   11878:	af00      	add	r7, sp, #0
   1187a:	60f8      	str	r0, [r7, #12]
   1187c:	60b9      	str	r1, [r7, #8]
   1187e:	4613      	mov	r3, r2
   11880:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   11882:	68fb      	ldr	r3, [r7, #12]
   11884:	2b00      	cmp	r3, #0
   11886:	d004      	beq.n	11892 <io_read+0x1e>
   11888:	68bb      	ldr	r3, [r7, #8]
   1188a:	2b00      	cmp	r3, #0
   1188c:	d001      	beq.n	11892 <io_read+0x1e>
   1188e:	2301      	movs	r3, #1
   11890:	e000      	b.n	11894 <io_read+0x20>
   11892:	2300      	movs	r3, #0
   11894:	f003 0301 	and.w	r3, r3, #1
   11898:	b2db      	uxtb	r3, r3
   1189a:	223d      	movs	r2, #61	; 0x3d
   1189c:	4907      	ldr	r1, [pc, #28]	; (118bc <io_read+0x48>)
   1189e:	4618      	mov	r0, r3
   118a0:	4b07      	ldr	r3, [pc, #28]	; (118c0 <io_read+0x4c>)
   118a2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   118a4:	68fb      	ldr	r3, [r7, #12]
   118a6:	685b      	ldr	r3, [r3, #4]
   118a8:	88fa      	ldrh	r2, [r7, #6]
   118aa:	68b9      	ldr	r1, [r7, #8]
   118ac:	68f8      	ldr	r0, [r7, #12]
   118ae:	4798      	blx	r3
   118b0:	4603      	mov	r3, r0
}
   118b2:	4618      	mov	r0, r3
   118b4:	3710      	adds	r7, #16
   118b6:	46bd      	mov	sp, r7
   118b8:	bd80      	pop	{r7, pc}
   118ba:	bf00      	nop
   118bc:	000142e0 	.word	0x000142e0
   118c0:	000040dd 	.word	0x000040dd

000118c4 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   118c4:	b480      	push	{r7}
   118c6:	b083      	sub	sp, #12
   118c8:	af00      	add	r7, sp, #0
   118ca:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   118cc:	687b      	ldr	r3, [r7, #4]
   118ce:	4618      	mov	r0, r3
   118d0:	370c      	adds	r7, #12
   118d2:	46bd      	mov	sp, r7
   118d4:	bc80      	pop	{r7}
   118d6:	4770      	bx	lr

000118d8 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   118d8:	b480      	push	{r7}
   118da:	b083      	sub	sp, #12
   118dc:	af00      	add	r7, sp, #0
   118de:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   118e0:	687b      	ldr	r3, [r7, #4]
   118e2:	4618      	mov	r0, r3
   118e4:	370c      	adds	r7, #12
   118e6:	46bd      	mov	sp, r7
   118e8:	bc80      	pop	{r7}
   118ea:	4770      	bx	lr

000118ec <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   118ec:	b480      	push	{r7}
   118ee:	b085      	sub	sp, #20
   118f0:	af00      	add	r7, sp, #0
   118f2:	6078      	str	r0, [r7, #4]
   118f4:	460b      	mov	r3, r1
   118f6:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   118f8:	2300      	movs	r3, #0
   118fa:	73fb      	strb	r3, [r7, #15]
   118fc:	7bfb      	ldrb	r3, [r7, #15]
   118fe:	2b01      	cmp	r3, #1
   11900:	dc13      	bgt.n	1192a <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   11902:	7bfb      	ldrb	r3, [r7, #15]
   11904:	78f9      	ldrb	r1, [r7, #3]
   11906:	7bfa      	ldrb	r2, [r7, #15]
   11908:	2080      	movs	r0, #128	; 0x80
   1190a:	fa40 f202 	asr.w	r2, r0, r2
   1190e:	400a      	ands	r2, r1
   11910:	2a00      	cmp	r2, #0
   11912:	bfcc      	ite	gt
   11914:	2201      	movgt	r2, #1
   11916:	2200      	movle	r2, #0
   11918:	b2d1      	uxtb	r1, r2
   1191a:	687a      	ldr	r2, [r7, #4]
   1191c:	4413      	add	r3, r2
   1191e:	460a      	mov	r2, r1
   11920:	751a      	strb	r2, [r3, #20]
	for (uint8_t ii = 0; ii < 2; ii++)
   11922:	7bfb      	ldrb	r3, [r7, #15]
   11924:	3301      	adds	r3, #1
   11926:	73fb      	strb	r3, [r7, #15]
   11928:	e7e8      	b.n	118fc <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   1192a:	bf00      	nop
   1192c:	3714      	adds	r7, #20
   1192e:	46bd      	mov	sp, r7
   11930:	bc80      	pop	{r7}
   11932:	4770      	bx	lr

00011934 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   11934:	b480      	push	{r7}
   11936:	b085      	sub	sp, #20
   11938:	af00      	add	r7, sp, #0
   1193a:	6078      	str	r0, [r7, #4]
   1193c:	460b      	mov	r3, r1
   1193e:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   11940:	2300      	movs	r3, #0
   11942:	73fb      	strb	r3, [r7, #15]
   11944:	7bfb      	ldrb	r3, [r7, #15]
   11946:	2b02      	cmp	r3, #2
   11948:	dc15      	bgt.n	11976 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   1194a:	7bfb      	ldrb	r3, [r7, #15]
   1194c:	f1c3 0302 	rsb	r3, r3, #2
   11950:	78f9      	ldrb	r1, [r7, #3]
   11952:	7bfa      	ldrb	r2, [r7, #15]
   11954:	2020      	movs	r0, #32
   11956:	fa40 f202 	asr.w	r2, r0, r2
   1195a:	400a      	ands	r2, r1
   1195c:	2a00      	cmp	r2, #0
   1195e:	bfcc      	ite	gt
   11960:	2201      	movgt	r2, #1
   11962:	2200      	movle	r2, #0
   11964:	b2d1      	uxtb	r1, r2
   11966:	687a      	ldr	r2, [r7, #4]
   11968:	4413      	add	r3, r2
   1196a:	460a      	mov	r2, r1
   1196c:	759a      	strb	r2, [r3, #22]
	for (uint8_t ii = 0; ii < 3; ii++)
   1196e:	7bfb      	ldrb	r3, [r7, #15]
   11970:	3301      	adds	r3, #1
   11972:	73fb      	strb	r3, [r7, #15]
   11974:	e7e6      	b.n	11944 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   11976:	bf00      	nop
   11978:	3714      	adds	r7, #20
   1197a:	46bd      	mov	sp, r7
   1197c:	bc80      	pop	{r7}
   1197e:	4770      	bx	lr

00011980 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   11980:	b580      	push	{r7, lr}
   11982:	b084      	sub	sp, #16
   11984:	af00      	add	r7, sp, #0
   11986:	60f8      	str	r0, [r7, #12]
   11988:	60b9      	str	r1, [r7, #8]
   1198a:	4613      	mov	r3, r2
   1198c:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   1198e:	79fb      	ldrb	r3, [r7, #7]
   11990:	4619      	mov	r1, r3
   11992:	68b8      	ldr	r0, [r7, #8]
   11994:	4b0d      	ldr	r3, [pc, #52]	; (119cc <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   11996:	4798      	blx	r3
	FillLimitSwitch(v);
   11998:	79fb      	ldrb	r3, [r7, #7]
   1199a:	4619      	mov	r1, r3
   1199c:	68b8      	ldr	r0, [r7, #8]
   1199e:	4b0c      	ldr	r3, [pc, #48]	; (119d0 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   119a0:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   119a2:	79fb      	ldrb	r3, [r7, #7]
   119a4:	f003 0301 	and.w	r3, r3, #1
   119a8:	2b00      	cmp	r3, #0
   119aa:	bfcc      	ite	gt
   119ac:	2301      	movgt	r3, #1
   119ae:	2300      	movle	r3, #0
   119b0:	b2da      	uxtb	r2, r3
   119b2:	68bb      	ldr	r3, [r7, #8]
   119b4:	765a      	strb	r2, [r3, #25]
	return controlStatus;
   119b6:	68fa      	ldr	r2, [r7, #12]
   119b8:	68bb      	ldr	r3, [r7, #8]
   119ba:	3314      	adds	r3, #20
   119bc:	6819      	ldr	r1, [r3, #0]
   119be:	6011      	str	r1, [r2, #0]
   119c0:	889b      	ldrh	r3, [r3, #4]
   119c2:	8093      	strh	r3, [r2, #4]
}
   119c4:	68f8      	ldr	r0, [r7, #12]
   119c6:	3710      	adds	r7, #16
   119c8:	46bd      	mov	sp, r7
   119ca:	bd80      	pop	{r7, pc}
   119cc:	000118ed 	.word	0x000118ed
   119d0:	00011935 	.word	0x00011935

000119d4 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   119d4:	b480      	push	{r7}
   119d6:	b085      	sub	sp, #20
   119d8:	af00      	add	r7, sp, #0
   119da:	60f8      	str	r0, [r7, #12]
   119dc:	60b9      	str	r1, [r7, #8]
   119de:	4613      	mov	r3, r2
   119e0:	71fb      	strb	r3, [r7, #7]
	
	if ( (STANDALONE > 0 )&(!controlStatus.cabin[1]))
   119e2:	68bb      	ldr	r3, [r7, #8]
   119e4:	7d5b      	ldrb	r3, [r3, #21]
   119e6:	f083 0301 	eor.w	r3, r3, #1
   119ea:	b2db      	uxtb	r3, r3
   119ec:	f003 0301 	and.w	r3, r3, #1
   119f0:	2b00      	cmp	r3, #0
   119f2:	d004      	beq.n	119fe <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x2a>
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
   119f4:	68bb      	ldr	r3, [r7, #8]
   119f6:	7d1a      	ldrb	r2, [r3, #20]
   119f8:	68bb      	ldr	r3, [r7, #8]
   119fa:	769a      	strb	r2, [r3, #26]
   119fc:	e009      	b.n	11a12 <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x3e>
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   119fe:	79fb      	ldrb	r3, [r7, #7]
   11a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11a04:	2b00      	cmp	r3, #0
   11a06:	bfcc      	ite	gt
   11a08:	2301      	movgt	r3, #1
   11a0a:	2300      	movle	r3, #0
   11a0c:	b2da      	uxtb	r2, r3
   11a0e:	68bb      	ldr	r3, [r7, #8]
   11a10:	769a      	strb	r2, [r3, #26]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   11a12:	79fb      	ldrb	r3, [r7, #7]
   11a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
   11a18:	2b00      	cmp	r3, #0
   11a1a:	bfcc      	ite	gt
   11a1c:	2301      	movgt	r3, #1
   11a1e:	2300      	movle	r3, #0
   11a20:	b2da      	uxtb	r2, r3
   11a22:	68bb      	ldr	r3, [r7, #8]
   11a24:	76da      	strb	r2, [r3, #27]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   11a26:	79fb      	ldrb	r3, [r7, #7]
   11a28:	f003 0320 	and.w	r3, r3, #32
   11a2c:	2b00      	cmp	r3, #0
   11a2e:	bfcc      	ite	gt
   11a30:	2301      	movgt	r3, #1
   11a32:	2300      	movle	r3, #0
   11a34:	b2da      	uxtb	r2, r3
   11a36:	68bb      	ldr	r3, [r7, #8]
   11a38:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   11a3a:	79fb      	ldrb	r3, [r7, #7]
   11a3c:	f003 0310 	and.w	r3, r3, #16
   11a40:	2b00      	cmp	r3, #0
   11a42:	bfcc      	ite	gt
   11a44:	2301      	movgt	r3, #1
   11a46:	2300      	movle	r3, #0
   11a48:	b2da      	uxtb	r2, r3
   11a4a:	68bb      	ldr	r3, [r7, #8]
   11a4c:	771a      	strb	r2, [r3, #28]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   11a4e:	79fb      	ldrb	r3, [r7, #7]
   11a50:	f003 0308 	and.w	r3, r3, #8
   11a54:	2b00      	cmp	r3, #0
   11a56:	bfcc      	ite	gt
   11a58:	2301      	movgt	r3, #1
   11a5a:	2300      	movle	r3, #0
   11a5c:	b2da      	uxtb	r2, r3
   11a5e:	68bb      	ldr	r3, [r7, #8]
   11a60:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   11a62:	79fb      	ldrb	r3, [r7, #7]
   11a64:	f003 0304 	and.w	r3, r3, #4
   11a68:	2b00      	cmp	r3, #0
   11a6a:	bfcc      	ite	gt
   11a6c:	2301      	movgt	r3, #1
   11a6e:	2300      	movle	r3, #0
   11a70:	b2da      	uxtb	r2, r3
   11a72:	68bb      	ldr	r3, [r7, #8]
   11a74:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   11a76:	79fb      	ldrb	r3, [r7, #7]
   11a78:	f003 0302 	and.w	r3, r3, #2
   11a7c:	2b00      	cmp	r3, #0
   11a7e:	bfcc      	ite	gt
   11a80:	2301      	movgt	r3, #1
   11a82:	2300      	movle	r3, #0
   11a84:	b2da      	uxtb	r2, r3
   11a86:	68bb      	ldr	r3, [r7, #8]
   11a88:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   11a8c:	79fb      	ldrb	r3, [r7, #7]
   11a8e:	f003 0301 	and.w	r3, r3, #1
   11a92:	2b00      	cmp	r3, #0
   11a94:	bfcc      	ite	gt
   11a96:	2301      	movgt	r3, #1
   11a98:	2300      	movle	r3, #0
   11a9a:	b2da      	uxtb	r2, r3
   11a9c:	68bb      	ldr	r3, [r7, #8]
   11a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return controlOutputs;
   11aa2:	68fa      	ldr	r2, [r7, #12]
   11aa4:	68bb      	ldr	r3, [r7, #8]
   11aa6:	331a      	adds	r3, #26
   11aa8:	6819      	ldr	r1, [r3, #0]
   11aaa:	685b      	ldr	r3, [r3, #4]
   11aac:	6011      	str	r1, [r2, #0]
   11aae:	6053      	str	r3, [r2, #4]
   11ab0:	68f8      	ldr	r0, [r7, #12]
   11ab2:	3714      	adds	r7, #20
   11ab4:	46bd      	mov	sp, r7
   11ab6:	bc80      	pop	{r7}
   11ab8:	4770      	bx	lr

00011aba <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   11aba:	b480      	push	{r7}
   11abc:	b083      	sub	sp, #12
   11abe:	af00      	add	r7, sp, #0
   11ac0:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   11ac2:	687b      	ldr	r3, [r7, #4]
   11ac4:	4618      	mov	r0, r3
   11ac6:	370c      	adds	r7, #12
   11ac8:	46bd      	mov	sp, r7
   11aca:	bc80      	pop	{r7}
   11acc:	4770      	bx	lr

00011ace <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   11ace:	b480      	push	{r7}
   11ad0:	b083      	sub	sp, #12
   11ad2:	af00      	add	r7, sp, #0
   11ad4:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   11ad6:	687b      	ldr	r3, [r7, #4]
   11ad8:	4618      	mov	r0, r3
   11ada:	370c      	adds	r7, #12
   11adc:	46bd      	mov	sp, r7
   11ade:	bc80      	pop	{r7}
   11ae0:	4770      	bx	lr

00011ae2 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
   11ae2:	b480      	push	{r7}
   11ae4:	b085      	sub	sp, #20
   11ae6:	af00      	add	r7, sp, #0
   11ae8:	60f8      	str	r0, [r7, #12]
   11aea:	460b      	mov	r3, r1
   11aec:	607a      	str	r2, [r7, #4]
   11aee:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   11af0:	687b      	ldr	r3, [r7, #4]
   11af2:	681a      	ldr	r2, [r3, #0]
   11af4:	68fb      	ldr	r3, [r7, #12]
   11af6:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
   11af8:	687b      	ldr	r3, [r7, #4]
   11afa:	685a      	ldr	r2, [r3, #4]
   11afc:	68fb      	ldr	r3, [r7, #12]
   11afe:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
   11b00:	68fb      	ldr	r3, [r7, #12]
   11b02:	7afa      	ldrb	r2, [r7, #11]
   11b04:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
   11b06:	68fb      	ldr	r3, [r7, #12]
   11b08:	687a      	ldr	r2, [r7, #4]
   11b0a:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
   11b0c:	68fb      	ldr	r3, [r7, #12]
   11b0e:	68db      	ldr	r3, [r3, #12]
   11b10:	7a5b      	ldrb	r3, [r3, #9]
   11b12:	b2da      	uxtb	r2, r3
   11b14:	68fb      	ldr	r3, [r7, #12]
   11b16:	719a      	strb	r2, [r3, #6]
	return isOK;
   11b18:	68fb      	ldr	r3, [r7, #12]
   11b1a:	799b      	ldrb	r3, [r3, #6]
   11b1c:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   11b1e:	4618      	mov	r0, r3
   11b20:	3714      	adds	r7, #20
   11b22:	46bd      	mov	sp, r7
   11b24:	bc80      	pop	{r7}
   11b26:	4770      	bx	lr

00011b28 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   11b28:	b480      	push	{r7}
   11b2a:	b083      	sub	sp, #12
   11b2c:	af00      	add	r7, sp, #0
   11b2e:	6078      	str	r0, [r7, #4]
   11b30:	460b      	mov	r3, r1
   11b32:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   11b34:	78fb      	ldrb	r3, [r7, #3]
   11b36:	f003 0307 	and.w	r3, r3, #7
   11b3a:	b2db      	uxtb	r3, r3
}
   11b3c:	4618      	mov	r0, r3
   11b3e:	370c      	adds	r7, #12
   11b40:	46bd      	mov	sp, r7
   11b42:	bc80      	pop	{r7}
   11b44:	4770      	bx	lr

00011b46 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   11b46:	b480      	push	{r7}
   11b48:	b083      	sub	sp, #12
   11b4a:	af00      	add	r7, sp, #0
   11b4c:	6078      	str	r0, [r7, #4]
   11b4e:	4608      	mov	r0, r1
   11b50:	4611      	mov	r1, r2
   11b52:	461a      	mov	r2, r3
   11b54:	4603      	mov	r3, r0
   11b56:	70fb      	strb	r3, [r7, #3]
   11b58:	460b      	mov	r3, r1
   11b5a:	70bb      	strb	r3, [r7, #2]
   11b5c:	4613      	mov	r3, r2
   11b5e:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
   11b60:	78fb      	ldrb	r3, [r7, #3]
   11b62:	2b07      	cmp	r3, #7
   11b64:	dc01      	bgt.n	11b6a <_ZN14MCP23008_Class9regForPinEhhh+0x24>
   11b66:	78bb      	ldrb	r3, [r7, #2]
   11b68:	e000      	b.n	11b6c <_ZN14MCP23008_Class9regForPinEhhh+0x26>
   11b6a:	787b      	ldrb	r3, [r7, #1]
}
   11b6c:	4618      	mov	r0, r3
   11b6e:	370c      	adds	r7, #12
   11b70:	46bd      	mov	sp, r7
   11b72:	bc80      	pop	{r7}
   11b74:	4770      	bx	lr
	...

00011b78 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   11b78:	b580      	push	{r7, lr}
   11b7a:	b082      	sub	sp, #8
   11b7c:	af00      	add	r7, sp, #0
   11b7e:	6078      	str	r0, [r7, #4]
   11b80:	460b      	mov	r3, r1
   11b82:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   11b84:	687b      	ldr	r3, [r7, #4]
   11b86:	68da      	ldr	r2, [r3, #12]
   11b88:	687b      	ldr	r3, [r7, #4]
   11b8a:	7a1b      	ldrb	r3, [r3, #8]
   11b8c:	4619      	mov	r1, r3
   11b8e:	4610      	mov	r0, r2
   11b90:	4b0a      	ldr	r3, [pc, #40]	; (11bbc <_ZN14MCP23008_Class12readRegisterEh+0x44>)
   11b92:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   11b94:	687b      	ldr	r3, [r7, #4]
   11b96:	68db      	ldr	r3, [r3, #12]
   11b98:	1cf9      	adds	r1, r7, #3
   11b9a:	2201      	movs	r2, #1
   11b9c:	4618      	mov	r0, r3
   11b9e:	4b08      	ldr	r3, [pc, #32]	; (11bc0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   11ba0:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   11ba2:	687b      	ldr	r3, [r7, #4]
   11ba4:	68db      	ldr	r3, [r3, #12]
   11ba6:	6879      	ldr	r1, [r7, #4]
   11ba8:	2201      	movs	r2, #1
   11baa:	4618      	mov	r0, r3
   11bac:	4b05      	ldr	r3, [pc, #20]	; (11bc4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   11bae:	4798      	blx	r3

	return registerValue;
   11bb0:	687b      	ldr	r3, [r7, #4]
   11bb2:	781b      	ldrb	r3, [r3, #0]
}
   11bb4:	4618      	mov	r0, r3
   11bb6:	3708      	adds	r7, #8
   11bb8:	46bd      	mov	sp, r7
   11bba:	bd80      	pop	{r7, pc}
   11bbc:	0000dcf1 	.word	0x0000dcf1
   11bc0:	0000dd1d 	.word	0x0000dd1d
   11bc4:	0000dd49 	.word	0x0000dd49

00011bc8 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   11bc8:	b580      	push	{r7, lr}
   11bca:	b084      	sub	sp, #16
   11bcc:	af00      	add	r7, sp, #0
   11bce:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   11bd0:	687b      	ldr	r3, [r7, #4]
   11bd2:	68da      	ldr	r2, [r3, #12]
   11bd4:	687b      	ldr	r3, [r7, #4]
   11bd6:	7a1b      	ldrb	r3, [r3, #8]
   11bd8:	4619      	mov	r1, r3
   11bda:	4610      	mov	r0, r2
   11bdc:	4b06      	ldr	r3, [pc, #24]	; (11bf8 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   11bde:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
   11be0:	2109      	movs	r1, #9
   11be2:	6878      	ldr	r0, [r7, #4]
   11be4:	4b05      	ldr	r3, [pc, #20]	; (11bfc <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
   11be6:	4798      	blx	r3
   11be8:	4603      	mov	r3, r0
   11bea:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
   11bec:	7bfb      	ldrb	r3, [r7, #15]
}
   11bee:	4618      	mov	r0, r3
   11bf0:	3710      	adds	r7, #16
   11bf2:	46bd      	mov	sp, r7
   11bf4:	bd80      	pop	{r7, pc}
   11bf6:	bf00      	nop
   11bf8:	0000dcf1 	.word	0x0000dcf1
   11bfc:	00011b79 	.word	0x00011b79

00011c00 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   11c00:	b580      	push	{r7, lr}
   11c02:	b084      	sub	sp, #16
   11c04:	af00      	add	r7, sp, #0
   11c06:	6078      	str	r0, [r7, #4]
   11c08:	460b      	mov	r3, r1
   11c0a:	70fb      	strb	r3, [r7, #3]
   11c0c:	4613      	mov	r3, r2
   11c0e:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   11c10:	687b      	ldr	r3, [r7, #4]
   11c12:	68da      	ldr	r2, [r3, #12]
   11c14:	687b      	ldr	r3, [r7, #4]
   11c16:	7a1b      	ldrb	r3, [r3, #8]
   11c18:	4619      	mov	r1, r3
   11c1a:	4610      	mov	r0, r2
   11c1c:	4b09      	ldr	r3, [pc, #36]	; (11c44 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   11c1e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   11c20:	78fb      	ldrb	r3, [r7, #3]
   11c22:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   11c24:	78bb      	ldrb	r3, [r7, #2]
   11c26:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   11c28:	687b      	ldr	r3, [r7, #4]
   11c2a:	68db      	ldr	r3, [r3, #12]
   11c2c:	f107 010c 	add.w	r1, r7, #12
   11c30:	2202      	movs	r2, #2
   11c32:	4618      	mov	r0, r3
   11c34:	4b04      	ldr	r3, [pc, #16]	; (11c48 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   11c36:	4798      	blx	r3
   11c38:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   11c3a:	4618      	mov	r0, r3
   11c3c:	3710      	adds	r7, #16
   11c3e:	46bd      	mov	sp, r7
   11c40:	bd80      	pop	{r7, pc}
   11c42:	bf00      	nop
   11c44:	0000dcf1 	.word	0x0000dcf1
   11c48:	0000dd1d 	.word	0x0000dd1d

00011c4c <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   11c4c:	b580      	push	{r7, lr}
   11c4e:	b082      	sub	sp, #8
   11c50:	af00      	add	r7, sp, #0
   11c52:	6078      	str	r0, [r7, #4]
   11c54:	460b      	mov	r3, r1
   11c56:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   11c58:	687b      	ldr	r3, [r7, #4]
   11c5a:	68da      	ldr	r2, [r3, #12]
   11c5c:	687b      	ldr	r3, [r7, #4]
   11c5e:	7a1b      	ldrb	r3, [r3, #8]
   11c60:	4619      	mov	r1, r3
   11c62:	4610      	mov	r0, r2
   11c64:	4b06      	ldr	r3, [pc, #24]	; (11c80 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
   11c66:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   11c68:	78fb      	ldrb	r3, [r7, #3]
   11c6a:	461a      	mov	r2, r3
   11c6c:	2109      	movs	r1, #9
   11c6e:	6878      	ldr	r0, [r7, #4]
   11c70:	4b04      	ldr	r3, [pc, #16]	; (11c84 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
   11c72:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
   11c74:	78fb      	ldrb	r3, [r7, #3]
}
   11c76:	4618      	mov	r0, r3
   11c78:	3708      	adds	r7, #8
   11c7a:	46bd      	mov	sp, r7
   11c7c:	bd80      	pop	{r7, pc}
   11c7e:	bf00      	nop
   11c80:	0000dcf1 	.word	0x0000dcf1
   11c84:	00011c01 	.word	0x00011c01

00011c88 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
   11c88:	b580      	push	{r7, lr}
   11c8a:	b084      	sub	sp, #16
   11c8c:	af00      	add	r7, sp, #0
   11c8e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   11c90:	2300      	movs	r3, #0
   11c92:	73fb      	strb	r3, [r7, #15]
   11c94:	7bfb      	ldrb	r3, [r7, #15]
   11c96:	2b07      	cmp	r3, #7
   11c98:	dc0f      	bgt.n	11cba <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
   11c9a:	7bfb      	ldrb	r3, [r7, #15]
   11c9c:	2201      	movs	r2, #1
   11c9e:	4619      	mov	r1, r3
   11ca0:	6878      	ldr	r0, [r7, #4]
   11ca2:	4b08      	ldr	r3, [pc, #32]	; (11cc4 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
   11ca4:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
   11ca6:	7bfb      	ldrb	r3, [r7, #15]
   11ca8:	2201      	movs	r2, #1
   11caa:	4619      	mov	r1, r3
   11cac:	6878      	ldr	r0, [r7, #4]
   11cae:	4b06      	ldr	r3, [pc, #24]	; (11cc8 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
   11cb0:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   11cb2:	7bfb      	ldrb	r3, [r7, #15]
   11cb4:	3301      	adds	r3, #1
   11cb6:	73fb      	strb	r3, [r7, #15]
   11cb8:	e7ec      	b.n	11c94 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
   11cba:	bf00      	nop
   11cbc:	3710      	adds	r7, #16
   11cbe:	46bd      	mov	sp, r7
   11cc0:	bd80      	pop	{r7, pc}
   11cc2:	bf00      	nop
   11cc4:	00011e49 	.word	0x00011e49
   11cc8:	00011f2d 	.word	0x00011f2d

00011ccc <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   11ccc:	b580      	push	{r7, lr}
   11cce:	b084      	sub	sp, #16
   11cd0:	af00      	add	r7, sp, #0
   11cd2:	6078      	str	r0, [r7, #4]
   11cd4:	460b      	mov	r3, r1
   11cd6:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   11cd8:	78fb      	ldrb	r3, [r7, #3]
   11cda:	2b00      	cmp	r3, #0
   11cdc:	dd23      	ble.n	11d26 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   11cde:	2300      	movs	r3, #0
   11ce0:	73fb      	strb	r3, [r7, #15]
   11ce2:	7bfb      	ldrb	r3, [r7, #15]
   11ce4:	2b07      	cmp	r3, #7
   11ce6:	dc21      	bgt.n	11d2c <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   11ce8:	78fa      	ldrb	r2, [r7, #3]
   11cea:	7bfb      	ldrb	r3, [r7, #15]
   11cec:	fa42 f303 	asr.w	r3, r2, r3
   11cf0:	f003 0301 	and.w	r3, r3, #1
   11cf4:	2b00      	cmp	r3, #0
   11cf6:	d00c      	beq.n	11d12 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   11cf8:	7bfb      	ldrb	r3, [r7, #15]
   11cfa:	2201      	movs	r2, #1
   11cfc:	4619      	mov	r1, r3
   11cfe:	6878      	ldr	r0, [r7, #4]
   11d00:	4b0c      	ldr	r3, [pc, #48]	; (11d34 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   11d02:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   11d04:	7bfb      	ldrb	r3, [r7, #15]
   11d06:	2201      	movs	r2, #1
   11d08:	4619      	mov	r1, r3
   11d0a:	6878      	ldr	r0, [r7, #4]
   11d0c:	4b0a      	ldr	r3, [pc, #40]	; (11d38 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   11d0e:	4798      	blx	r3
   11d10:	e005      	b.n	11d1e <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   11d12:	7bfb      	ldrb	r3, [r7, #15]
   11d14:	2200      	movs	r2, #0
   11d16:	4619      	mov	r1, r3
   11d18:	6878      	ldr	r0, [r7, #4]
   11d1a:	4b06      	ldr	r3, [pc, #24]	; (11d34 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   11d1c:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   11d1e:	7bfb      	ldrb	r3, [r7, #15]
   11d20:	3301      	adds	r3, #1
   11d22:	73fb      	strb	r3, [r7, #15]
   11d24:	e7dd      	b.n	11ce2 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   11d26:	6878      	ldr	r0, [r7, #4]
   11d28:	4b04      	ldr	r3, [pc, #16]	; (11d3c <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   11d2a:	4798      	blx	r3
	}
	
}
   11d2c:	bf00      	nop
   11d2e:	3710      	adds	r7, #16
   11d30:	46bd      	mov	sp, r7
   11d32:	bd80      	pop	{r7, pc}
   11d34:	00011e49 	.word	0x00011e49
   11d38:	00011f2d 	.word	0x00011f2d
   11d3c:	00011d41 	.word	0x00011d41

00011d40 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   11d40:	b580      	push	{r7, lr}
   11d42:	b084      	sub	sp, #16
   11d44:	af00      	add	r7, sp, #0
   11d46:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   11d48:	2300      	movs	r3, #0
   11d4a:	73fb      	strb	r3, [r7, #15]
   11d4c:	7bfb      	ldrb	r3, [r7, #15]
   11d4e:	2b07      	cmp	r3, #7
   11d50:	dc09      	bgt.n	11d66 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   11d52:	7bfb      	ldrb	r3, [r7, #15]
   11d54:	2200      	movs	r2, #0
   11d56:	4619      	mov	r1, r3
   11d58:	6878      	ldr	r0, [r7, #4]
   11d5a:	4b05      	ldr	r3, [pc, #20]	; (11d70 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   11d5c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   11d5e:	7bfb      	ldrb	r3, [r7, #15]
   11d60:	3301      	adds	r3, #1
   11d62:	73fb      	strb	r3, [r7, #15]
   11d64:	e7f2      	b.n	11d4c <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   11d66:	bf00      	nop
   11d68:	3710      	adds	r7, #16
   11d6a:	46bd      	mov	sp, r7
   11d6c:	bd80      	pop	{r7, pc}
   11d6e:	bf00      	nop
   11d70:	00011e49 	.word	0x00011e49

00011d74 <_ZN14MCP23008_Class13SetPortOutputEh>:
void	MCP23008_Class::SetPortOutput(uint8_t out){
   11d74:	b580      	push	{r7, lr}
   11d76:	b084      	sub	sp, #16
   11d78:	af00      	add	r7, sp, #0
   11d7a:	6078      	str	r0, [r7, #4]
   11d7c:	460b      	mov	r3, r1
   11d7e:	70fb      	strb	r3, [r7, #3]
	
	for (uint8_t i=0;i<8;i++)
   11d80:	2300      	movs	r3, #0
   11d82:	73fb      	strb	r3, [r7, #15]
   11d84:	7bfb      	ldrb	r3, [r7, #15]
   11d86:	2b07      	cmp	r3, #7
   11d88:	dc11      	bgt.n	11dae <_ZN14MCP23008_Class13SetPortOutputEh+0x3a>
	{
		if (out&(0x01<<i))
   11d8a:	78fa      	ldrb	r2, [r7, #3]
   11d8c:	7bfb      	ldrb	r3, [r7, #15]
   11d8e:	fa42 f303 	asr.w	r3, r2, r3
   11d92:	f003 0301 	and.w	r3, r3, #1
   11d96:	2b00      	cmp	r3, #0
   11d98:	d005      	beq.n	11da6 <_ZN14MCP23008_Class13SetPortOutputEh+0x32>
		{
			pinMode(i,MCP23008_OUTPUT);
   11d9a:	7bfb      	ldrb	r3, [r7, #15]
   11d9c:	2200      	movs	r2, #0
   11d9e:	4619      	mov	r1, r3
   11da0:	6878      	ldr	r0, [r7, #4]
   11da2:	4b05      	ldr	r3, [pc, #20]	; (11db8 <_ZN14MCP23008_Class13SetPortOutputEh+0x44>)
   11da4:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   11da6:	7bfb      	ldrb	r3, [r7, #15]
   11da8:	3301      	adds	r3, #1
   11daa:	73fb      	strb	r3, [r7, #15]
   11dac:	e7ea      	b.n	11d84 <_ZN14MCP23008_Class13SetPortOutputEh+0x10>
		}
		
	}
}
   11dae:	bf00      	nop
   11db0:	3710      	adds	r7, #16
   11db2:	46bd      	mov	sp, r7
   11db4:	bd80      	pop	{r7, pc}
   11db6:	bf00      	nop
   11db8:	00011e49 	.word	0x00011e49

00011dbc <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   11dbc:	b580      	push	{r7, lr}
   11dbe:	b084      	sub	sp, #16
   11dc0:	af00      	add	r7, sp, #0
   11dc2:	6078      	str	r0, [r7, #4]
   11dc4:	4608      	mov	r0, r1
   11dc6:	4611      	mov	r1, r2
   11dc8:	461a      	mov	r2, r3
   11dca:	4603      	mov	r3, r0
   11dcc:	70fb      	strb	r3, [r7, #3]
   11dce:	460b      	mov	r3, r1
   11dd0:	70bb      	strb	r3, [r7, #2]
   11dd2:	4613      	mov	r3, r2
   11dd4:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   11dd6:	787b      	ldrb	r3, [r7, #1]
   11dd8:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   11dda:	78fb      	ldrb	r3, [r7, #3]
   11ddc:	4619      	mov	r1, r3
   11dde:	6878      	ldr	r0, [r7, #4]
   11de0:	4b16      	ldr	r3, [pc, #88]	; (11e3c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   11de2:	4798      	blx	r3
   11de4:	4603      	mov	r3, r0
   11de6:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   11de8:	7bfb      	ldrb	r3, [r7, #15]
   11dea:	4619      	mov	r1, r3
   11dec:	6878      	ldr	r0, [r7, #4]
   11dee:	4b14      	ldr	r3, [pc, #80]	; (11e40 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   11df0:	4798      	blx	r3
   11df2:	4603      	mov	r3, r0
   11df4:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   11df6:	78bb      	ldrb	r3, [r7, #2]
   11df8:	2b00      	cmp	r3, #0
   11dfa:	d009      	beq.n	11e10 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   11dfc:	7bba      	ldrb	r2, [r7, #14]
   11dfe:	7b7b      	ldrb	r3, [r7, #13]
   11e00:	4619      	mov	r1, r3
   11e02:	2301      	movs	r3, #1
   11e04:	408b      	lsls	r3, r1
   11e06:	b2db      	uxtb	r3, r3
   11e08:	4313      	orrs	r3, r2
   11e0a:	b2db      	uxtb	r3, r3
   11e0c:	73bb      	strb	r3, [r7, #14]
   11e0e:	e00a      	b.n	11e26 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   11e10:	7bba      	ldrb	r2, [r7, #14]
   11e12:	7b7b      	ldrb	r3, [r7, #13]
   11e14:	4619      	mov	r1, r3
   11e16:	2301      	movs	r3, #1
   11e18:	408b      	lsls	r3, r1
   11e1a:	b2db      	uxtb	r3, r3
   11e1c:	43db      	mvns	r3, r3
   11e1e:	b2db      	uxtb	r3, r3
   11e20:	4013      	ands	r3, r2
   11e22:	b2db      	uxtb	r3, r3
   11e24:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   11e26:	7bba      	ldrb	r2, [r7, #14]
   11e28:	7bfb      	ldrb	r3, [r7, #15]
   11e2a:	4619      	mov	r1, r3
   11e2c:	6878      	ldr	r0, [r7, #4]
   11e2e:	4b05      	ldr	r3, [pc, #20]	; (11e44 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   11e30:	4798      	blx	r3
}
   11e32:	bf00      	nop
   11e34:	3710      	adds	r7, #16
   11e36:	46bd      	mov	sp, r7
   11e38:	bd80      	pop	{r7, pc}
   11e3a:	bf00      	nop
   11e3c:	00011b29 	.word	0x00011b29
   11e40:	00011b79 	.word	0x00011b79
   11e44:	00011c01 	.word	0x00011c01

00011e48 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   11e48:	b590      	push	{r4, r7, lr}
   11e4a:	b085      	sub	sp, #20
   11e4c:	af02      	add	r7, sp, #8
   11e4e:	6078      	str	r0, [r7, #4]
   11e50:	460b      	mov	r3, r1
   11e52:	70fb      	strb	r3, [r7, #3]
   11e54:	4613      	mov	r3, r2
   11e56:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   11e58:	78bb      	ldrb	r3, [r7, #2]
   11e5a:	2b01      	cmp	r3, #1
   11e5c:	bf0c      	ite	eq
   11e5e:	2301      	moveq	r3, #1
   11e60:	2300      	movne	r3, #0
   11e62:	b2db      	uxtb	r3, r3
   11e64:	461a      	mov	r2, r3
   11e66:	78f9      	ldrb	r1, [r7, #3]
   11e68:	2300      	movs	r3, #0
   11e6a:	9300      	str	r3, [sp, #0]
   11e6c:	2300      	movs	r3, #0
   11e6e:	6878      	ldr	r0, [r7, #4]
   11e70:	4c02      	ldr	r4, [pc, #8]	; (11e7c <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   11e72:	47a0      	blx	r4
}
   11e74:	bf00      	nop
   11e76:	370c      	adds	r7, #12
   11e78:	46bd      	mov	sp, r7
   11e7a:	bd90      	pop	{r4, r7, pc}
   11e7c:	00011dbd 	.word	0x00011dbd

00011e80 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   11e80:	b590      	push	{r4, r7, lr}
   11e82:	b085      	sub	sp, #20
   11e84:	af00      	add	r7, sp, #0
   11e86:	6078      	str	r0, [r7, #4]
   11e88:	460b      	mov	r3, r1
   11e8a:	70fb      	strb	r3, [r7, #3]
   11e8c:	4613      	mov	r3, r2
   11e8e:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   11e90:	78fb      	ldrb	r3, [r7, #3]
   11e92:	4619      	mov	r1, r3
   11e94:	6878      	ldr	r0, [r7, #4]
   11e96:	4b21      	ldr	r3, [pc, #132]	; (11f1c <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   11e98:	4798      	blx	r3
   11e9a:	4603      	mov	r3, r0
   11e9c:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   11e9e:	78f9      	ldrb	r1, [r7, #3]
   11ea0:	230a      	movs	r3, #10
   11ea2:	220a      	movs	r2, #10
   11ea4:	6878      	ldr	r0, [r7, #4]
   11ea6:	4c1e      	ldr	r4, [pc, #120]	; (11f20 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   11ea8:	47a0      	blx	r4
   11eaa:	4603      	mov	r3, r0
   11eac:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   11eae:	7bfb      	ldrb	r3, [r7, #15]
   11eb0:	4619      	mov	r1, r3
   11eb2:	6878      	ldr	r0, [r7, #4]
   11eb4:	4b1b      	ldr	r3, [pc, #108]	; (11f24 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   11eb6:	4798      	blx	r3
   11eb8:	4603      	mov	r3, r0
   11eba:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   11ebc:	78bb      	ldrb	r3, [r7, #2]
   11ebe:	2b00      	cmp	r3, #0
   11ec0:	d009      	beq.n	11ed6 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   11ec2:	7bba      	ldrb	r2, [r7, #14]
   11ec4:	7b7b      	ldrb	r3, [r7, #13]
   11ec6:	4619      	mov	r1, r3
   11ec8:	2301      	movs	r3, #1
   11eca:	408b      	lsls	r3, r1
   11ecc:	b2db      	uxtb	r3, r3
   11ece:	4313      	orrs	r3, r2
   11ed0:	b2db      	uxtb	r3, r3
   11ed2:	73bb      	strb	r3, [r7, #14]
   11ed4:	e00a      	b.n	11eec <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   11ed6:	7bba      	ldrb	r2, [r7, #14]
   11ed8:	7b7b      	ldrb	r3, [r7, #13]
   11eda:	4619      	mov	r1, r3
   11edc:	2301      	movs	r3, #1
   11ede:	408b      	lsls	r3, r1
   11ee0:	b2db      	uxtb	r3, r3
   11ee2:	43db      	mvns	r3, r3
   11ee4:	b2db      	uxtb	r3, r3
   11ee6:	4013      	ands	r3, r2
   11ee8:	b2db      	uxtb	r3, r3
   11eea:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   11eec:	78f9      	ldrb	r1, [r7, #3]
   11eee:	2309      	movs	r3, #9
   11ef0:	2209      	movs	r2, #9
   11ef2:	6878      	ldr	r0, [r7, #4]
   11ef4:	4c0a      	ldr	r4, [pc, #40]	; (11f20 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   11ef6:	47a0      	blx	r4
   11ef8:	4603      	mov	r3, r0
   11efa:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   11efc:	7bba      	ldrb	r2, [r7, #14]
   11efe:	7bfb      	ldrb	r3, [r7, #15]
   11f00:	4619      	mov	r1, r3
   11f02:	6878      	ldr	r0, [r7, #4]
   11f04:	4b08      	ldr	r3, [pc, #32]	; (11f28 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   11f06:	4798      	blx	r3
   11f08:	4603      	mov	r3, r0
   11f0a:	2b00      	cmp	r3, #0
   11f0c:	bf0c      	ite	eq
   11f0e:	2301      	moveq	r3, #1
   11f10:	2300      	movne	r3, #0
   11f12:	b2db      	uxtb	r3, r3
}
   11f14:	4618      	mov	r0, r3
   11f16:	3714      	adds	r7, #20
   11f18:	46bd      	mov	sp, r7
   11f1a:	bd90      	pop	{r4, r7, pc}
   11f1c:	00011b29 	.word	0x00011b29
   11f20:	00011b47 	.word	0x00011b47
   11f24:	00011b79 	.word	0x00011b79
   11f28:	00011c01 	.word	0x00011c01

00011f2c <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   11f2c:	b590      	push	{r4, r7, lr}
   11f2e:	b085      	sub	sp, #20
   11f30:	af02      	add	r7, sp, #8
   11f32:	6078      	str	r0, [r7, #4]
   11f34:	460b      	mov	r3, r1
   11f36:	70fb      	strb	r3, [r7, #3]
   11f38:	4613      	mov	r3, r2
   11f3a:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   11f3c:	78ba      	ldrb	r2, [r7, #2]
   11f3e:	78f9      	ldrb	r1, [r7, #3]
   11f40:	2306      	movs	r3, #6
   11f42:	9300      	str	r3, [sp, #0]
   11f44:	2306      	movs	r3, #6
   11f46:	6878      	ldr	r0, [r7, #4]
   11f48:	4c02      	ldr	r4, [pc, #8]	; (11f54 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   11f4a:	47a0      	blx	r4
}
   11f4c:	bf00      	nop
   11f4e:	370c      	adds	r7, #12
   11f50:	46bd      	mov	sp, r7
   11f52:	bd90      	pop	{r4, r7, pc}
   11f54:	00011dbd 	.word	0x00011dbd

00011f58 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   11f58:	b480      	push	{r7}
   11f5a:	b083      	sub	sp, #12
   11f5c:	af00      	add	r7, sp, #0
   11f5e:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   11f60:	4b04      	ldr	r3, [pc, #16]	; (11f74 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   11f62:	681b      	ldr	r3, [r3, #0]
   11f64:	2201      	movs	r2, #1
   11f66:	709a      	strb	r2, [r3, #2]
	asm("nop");
   11f68:	bf00      	nop
}
   11f6a:	bf00      	nop
   11f6c:	370c      	adds	r7, #12
   11f6e:	46bd      	mov	sp, r7
   11f70:	bc80      	pop	{r7}
   11f72:	4770      	bx	lr
   11f74:	20009b14 	.word	0x20009b14

00011f78 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   11f78:	b480      	push	{r7}
   11f7a:	b083      	sub	sp, #12
   11f7c:	af00      	add	r7, sp, #0
   11f7e:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   11f80:	687b      	ldr	r3, [r7, #4]
   11f82:	4618      	mov	r0, r3
   11f84:	370c      	adds	r7, #12
   11f86:	46bd      	mov	sp, r7
   11f88:	bc80      	pop	{r7}
   11f8a:	4770      	bx	lr

00011f8c <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   11f8c:	b480      	push	{r7}
   11f8e:	b083      	sub	sp, #12
   11f90:	af00      	add	r7, sp, #0
   11f92:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   11f94:	687b      	ldr	r3, [r7, #4]
   11f96:	4618      	mov	r0, r3
   11f98:	370c      	adds	r7, #12
   11f9a:	46bd      	mov	sp, r7
   11f9c:	bc80      	pop	{r7}
   11f9e:	4770      	bx	lr

00011fa0 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   11fa0:	b580      	push	{r7, lr}
   11fa2:	b084      	sub	sp, #16
   11fa4:	af00      	add	r7, sp, #0
   11fa6:	60f8      	str	r0, [r7, #12]
   11fa8:	60b9      	str	r1, [r7, #8]
   11faa:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   11fac:	4a1c      	ldr	r2, [pc, #112]	; (12020 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   11fae:	68fb      	ldr	r3, [r7, #12]
   11fb0:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   11fb2:	68fb      	ldr	r3, [r7, #12]
   11fb4:	68ba      	ldr	r2, [r7, #8]
   11fb6:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
   11fb8:	68fb      	ldr	r3, [r7, #12]
   11fba:	687a      	ldr	r2, [r7, #4]
   11fbc:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
   11fbe:	68fb      	ldr	r3, [r7, #12]
   11fc0:	6a1b      	ldr	r3, [r3, #32]
   11fc2:	68da      	ldr	r2, [r3, #12]
   11fc4:	68fb      	ldr	r3, [r7, #12]
   11fc6:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
   11fc8:	68fb      	ldr	r3, [r7, #12]
   11fca:	6a1b      	ldr	r3, [r3, #32]
   11fcc:	689a      	ldr	r2, [r3, #8]
   11fce:	68fb      	ldr	r3, [r7, #12]
   11fd0:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
   11fd2:	68fb      	ldr	r3, [r7, #12]
   11fd4:	4a13      	ldr	r2, [pc, #76]	; (12024 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   11fd6:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
   11fd8:	68fb      	ldr	r3, [r7, #12]
   11fda:	2204      	movs	r2, #4
   11fdc:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
   11fde:	68fb      	ldr	r3, [r7, #12]
   11fe0:	2209      	movs	r2, #9
   11fe2:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
   11fe4:	68fb      	ldr	r3, [r7, #12]
   11fe6:	220e      	movs	r2, #14
   11fe8:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
   11fea:	68fb      	ldr	r3, [r7, #12]
   11fec:	2213      	movs	r2, #19
   11fee:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
   11ff0:	20c8      	movs	r0, #200	; 0xc8
   11ff2:	4b0d      	ldr	r3, [pc, #52]	; (12028 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   11ff4:	4798      	blx	r3
	temperatureTimer.Init();
   11ff6:	480d      	ldr	r0, [pc, #52]	; (1202c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   11ff8:	4b0d      	ldr	r3, [pc, #52]	; (12030 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   11ffa:	4798      	blx	r3
	configure_channels();
   11ffc:	68f8      	ldr	r0, [r7, #12]
   11ffe:	4b0d      	ldr	r3, [pc, #52]	; (12034 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   12000:	4798      	blx	r3
	configure_global_parameters();
   12002:	68f8      	ldr	r0, [r7, #12]
   12004:	4b0c      	ldr	r3, [pc, #48]	; (12038 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
   12006:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   12008:	68fb      	ldr	r3, [r7, #12]
   1200a:	2201      	movs	r2, #1
   1200c:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   1200e:	68f8      	ldr	r0, [r7, #12]
   12010:	4b0a      	ldr	r3, [pc, #40]	; (1203c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
   12012:	4798      	blx	r3
   12014:	4603      	mov	r3, r0
}
   12016:	4618      	mov	r0, r3
   12018:	3710      	adds	r7, #16
   1201a:	46bd      	mov	sp, r7
   1201c:	bd80      	pop	{r7, pc}
   1201e:	bf00      	nop
   12020:	20009b14 	.word	0x20009b14
   12024:	20009a54 	.word	0x20009a54
   12028:	00002a81 	.word	0x00002a81
   1202c:	20009a14 	.word	0x20009a14
   12030:	0000de61 	.word	0x0000de61
   12034:	00012449 	.word	0x00012449
   12038:	00012501 	.word	0x00012501
   1203c:	00012539 	.word	0x00012539

00012040 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   12040:	b590      	push	{r4, r7, lr}
   12042:	b089      	sub	sp, #36	; 0x24
   12044:	af02      	add	r7, sp, #8
   12046:	60f8      	str	r0, [r7, #12]
   12048:	60b9      	str	r1, [r7, #8]
   1204a:	603b      	str	r3, [r7, #0]
   1204c:	4613      	mov	r3, r2
   1204e:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   12050:	79fb      	ldrb	r3, [r7, #7]
   12052:	461a      	mov	r2, r3
   12054:	f44f 7100 	mov.w	r1, #512	; 0x200
   12058:	68f8      	ldr	r0, [r7, #12]
   1205a:	4b0b      	ldr	r3, [pc, #44]	; (12088 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   1205c:	4798      	blx	r3
   1205e:	4603      	mov	r3, r0
   12060:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   12062:	8afa      	ldrh	r2, [r7, #22]
   12064:	683b      	ldr	r3, [r7, #0]
   12066:	9300      	str	r3, [sp, #0]
   12068:	4613      	mov	r3, r2
   1206a:	2202      	movs	r2, #2
   1206c:	68b9      	ldr	r1, [r7, #8]
   1206e:	68f8      	ldr	r0, [r7, #12]
   12070:	4c06      	ldr	r4, [pc, #24]	; (1208c <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   12072:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   12074:	8afb      	ldrh	r3, [r7, #22]
   12076:	79fa      	ldrb	r2, [r7, #7]
   12078:	68b9      	ldr	r1, [r7, #8]
   1207a:	68f8      	ldr	r0, [r7, #12]
   1207c:	4c04      	ldr	r4, [pc, #16]	; (12090 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   1207e:	47a0      	blx	r4
}
   12080:	bf00      	nop
   12082:	371c      	adds	r7, #28
   12084:	46bd      	mov	sp, r7
   12086:	bd90      	pop	{r4, r7, pc}
   12088:	0001241d 	.word	0x0001241d
   1208c:	000122dd 	.word	0x000122dd
   12090:	000120e1 	.word	0x000120e1

00012094 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   12094:	b590      	push	{r4, r7, lr}
   12096:	b087      	sub	sp, #28
   12098:	af02      	add	r7, sp, #8
   1209a:	6078      	str	r0, [r7, #4]
   1209c:	460b      	mov	r3, r1
   1209e:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   120a0:	78fb      	ldrb	r3, [r7, #3]
   120a2:	687a      	ldr	r2, [r7, #4]
   120a4:	4413      	add	r3, r2
   120a6:	78db      	ldrb	r3, [r3, #3]
   120a8:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   120aa:	687b      	ldr	r3, [r7, #4]
   120ac:	2200      	movs	r2, #0
   120ae:	705a      	strb	r2, [r3, #1]
	ready=false;
   120b0:	687b      	ldr	r3, [r7, #4]
   120b2:	2200      	movs	r2, #0
   120b4:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   120b6:	687b      	ldr	r3, [r7, #4]
   120b8:	6d99      	ldr	r1, [r3, #88]	; 0x58
   120ba:	7bfb      	ldrb	r3, [r7, #15]
   120bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   120c0:	b2db      	uxtb	r3, r3
   120c2:	9300      	str	r3, [sp, #0]
   120c4:	2300      	movs	r3, #0
   120c6:	2202      	movs	r2, #2
   120c8:	6878      	ldr	r0, [r7, #4]
   120ca:	4c04      	ldr	r4, [pc, #16]	; (120dc <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   120cc:	47a0      	blx	r4
	channelOnProcess=channel_number;
   120ce:	687b      	ldr	r3, [r7, #4]
   120d0:	7bfa      	ldrb	r2, [r7, #15]
   120d2:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
   120d4:	bf00      	nop
   120d6:	3714      	adds	r7, #20
   120d8:	46bd      	mov	sp, r7
   120da:	bd90      	pop	{r4, r7, pc}
   120dc:	000123ad 	.word	0x000123ad

000120e0 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   120e0:	b590      	push	{r4, r7, lr}
   120e2:	b089      	sub	sp, #36	; 0x24
   120e4:	af02      	add	r7, sp, #8
   120e6:	60f8      	str	r0, [r7, #12]
   120e8:	60b9      	str	r1, [r7, #8]
   120ea:	4611      	mov	r1, r2
   120ec:	461a      	mov	r2, r3
   120ee:	460b      	mov	r3, r1
   120f0:	71fb      	strb	r3, [r7, #7]
   120f2:	4613      	mov	r3, r2
   120f4:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   120f6:	88ba      	ldrh	r2, [r7, #4]
   120f8:	2300      	movs	r3, #0
   120fa:	9300      	str	r3, [sp, #0]
   120fc:	4613      	mov	r3, r2
   120fe:	2203      	movs	r2, #3
   12100:	68b9      	ldr	r1, [r7, #8]
   12102:	68f8      	ldr	r0, [r7, #12]
   12104:	4c03      	ldr	r4, [pc, #12]	; (12114 <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
   12106:	47a0      	blx	r4
   12108:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
   1210a:	bf00      	nop
   1210c:	371c      	adds	r7, #28
   1210e:	46bd      	mov	sp, r7
   12110:	bd90      	pop	{r4, r7, pc}
   12112:	bf00      	nop
   12114:	000122dd 	.word	0x000122dd

00012118 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   12118:	b590      	push	{r4, r7, lr}
   1211a:	b085      	sub	sp, #20
   1211c:	af02      	add	r7, sp, #8
   1211e:	6078      	str	r0, [r7, #4]
   12120:	460b      	mov	r3, r1
   12122:	70fb      	strb	r3, [r7, #3]
   12124:	4613      	mov	r3, r2
   12126:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   12128:	78fb      	ldrb	r3, [r7, #3]
   1212a:	461a      	mov	r2, r3
   1212c:	2110      	movs	r1, #16
   1212e:	6878      	ldr	r0, [r7, #4]
   12130:	4b17      	ldr	r3, [pc, #92]	; (12190 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   12132:	4798      	blx	r3
   12134:	4603      	mov	r3, r0
   12136:	461a      	mov	r2, r3
   12138:	687b      	ldr	r3, [r7, #4]
   1213a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   1213e:	687b      	ldr	r3, [r7, #4]
   12140:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12142:	687b      	ldr	r3, [r7, #4]
   12144:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   12148:	2300      	movs	r3, #0
   1214a:	9300      	str	r3, [sp, #0]
   1214c:	4613      	mov	r3, r2
   1214e:	2203      	movs	r2, #3
   12150:	6878      	ldr	r0, [r7, #4]
   12152:	4c10      	ldr	r4, [pc, #64]	; (12194 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   12154:	47a0      	blx	r4
   12156:	4602      	mov	r2, r0
   12158:	687b      	ldr	r3, [r7, #4]
   1215a:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   1215c:	687b      	ldr	r3, [r7, #4]
   1215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   12160:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   12164:	687b      	ldr	r3, [r7, #4]
   12166:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   12168:	687b      	ldr	r3, [r7, #4]
   1216a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   1216c:	78bb      	ldrb	r3, [r7, #2]
   1216e:	78fa      	ldrb	r2, [r7, #3]
   12170:	6878      	ldr	r0, [r7, #4]
   12172:	4c09      	ldr	r4, [pc, #36]	; (12198 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   12174:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   12176:	687b      	ldr	r3, [r7, #4]
   12178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1217a:	0e1b      	lsrs	r3, r3, #24
   1217c:	b2da      	uxtb	r2, r3
   1217e:	687b      	ldr	r3, [r7, #4]
   12180:	71da      	strb	r2, [r3, #7]
	return scaled_result;
   12182:	687b      	ldr	r3, [r7, #4]
   12184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
   12186:	4618      	mov	r0, r3
   12188:	370c      	adds	r7, #12
   1218a:	46bd      	mov	sp, r7
   1218c:	bd90      	pop	{r4, r7, pc}
   1218e:	bf00      	nop
   12190:	0001241d 	.word	0x0001241d
   12194:	000122dd 	.word	0x000122dd
   12198:	000121f1 	.word	0x000121f1

0001219c <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   1219c:	b580      	push	{r7, lr}
   1219e:	b082      	sub	sp, #8
   121a0:	af00      	add	r7, sp, #0
   121a2:	6078      	str	r0, [r7, #4]
   121a4:	460b      	mov	r3, r1
   121a6:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   121a8:	78fb      	ldrb	r3, [r7, #3]
   121aa:	687a      	ldr	r2, [r7, #4]
   121ac:	4413      	add	r3, r2
   121ae:	78db      	ldrb	r3, [r3, #3]
   121b0:	4619      	mov	r1, r3
   121b2:	6878      	ldr	r0, [r7, #4]
   121b4:	4b03      	ldr	r3, [pc, #12]	; (121c4 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   121b6:	4798      	blx	r3
   121b8:	4603      	mov	r3, r0
}
   121ba:	4618      	mov	r0, r3
   121bc:	3708      	adds	r7, #8
   121be:	46bd      	mov	sp, r7
   121c0:	bd80      	pop	{r7, pc}
   121c2:	bf00      	nop
   121c4:	000121c9 	.word	0x000121c9

000121c8 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   121c8:	b580      	push	{r7, lr}
   121ca:	b082      	sub	sp, #8
   121cc:	af00      	add	r7, sp, #0
   121ce:	6078      	str	r0, [r7, #4]
   121d0:	460b      	mov	r3, r1
   121d2:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   121d4:	78fb      	ldrb	r3, [r7, #3]
   121d6:	2202      	movs	r2, #2
   121d8:	4619      	mov	r1, r3
   121da:	6878      	ldr	r0, [r7, #4]
   121dc:	4b03      	ldr	r3, [pc, #12]	; (121ec <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   121de:	4798      	blx	r3
   121e0:	4603      	mov	r3, r0
}
   121e2:	4618      	mov	r0, r3
   121e4:	3708      	adds	r7, #8
   121e6:	46bd      	mov	sp, r7
   121e8:	bd80      	pop	{r7, pc}
   121ea:	bf00      	nop
   121ec:	00012119 	.word	0x00012119

000121f0 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   121f0:	b580      	push	{r7, lr}
   121f2:	b084      	sub	sp, #16
   121f4:	af00      	add	r7, sp, #0
   121f6:	60f8      	str	r0, [r7, #12]
   121f8:	60b9      	str	r1, [r7, #8]
   121fa:	4611      	mov	r1, r2
   121fc:	461a      	mov	r2, r3
   121fe:	460b      	mov	r3, r1
   12200:	71fb      	strb	r3, [r7, #7]
   12202:	4613      	mov	r3, r2
   12204:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   12206:	68ba      	ldr	r2, [r7, #8]
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   1220c:	68fb      	ldr	r3, [r7, #12]
   1220e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   12210:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   12214:	2b00      	cmp	r3, #0
   12216:	d006      	beq.n	12226 <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   12218:	68fb      	ldr	r3, [r7, #12]
   1221a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1221c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   12220:	461a      	mov	r2, r3
   12222:	68fb      	ldr	r3, [r7, #12]
   12224:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
   12226:	79bb      	ldrb	r3, [r7, #6]
   12228:	2b02      	cmp	r3, #2
   1222a:	d11d      	bne.n	12268 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
   1222c:	68fb      	ldr	r3, [r7, #12]
   1222e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   12230:	4b18      	ldr	r3, [pc, #96]	; (12294 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   12232:	4610      	mov	r0, r2
   12234:	4798      	blx	r3
   12236:	4602      	mov	r2, r0
   12238:	4b17      	ldr	r3, [pc, #92]	; (12298 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1223a:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   1223e:	4610      	mov	r0, r2
   12240:	4798      	blx	r3
   12242:	4603      	mov	r3, r0
   12244:	461a      	mov	r2, r3
   12246:	68fb      	ldr	r3, [r7, #12]
   12248:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   1224a:	79fb      	ldrb	r3, [r7, #7]
   1224c:	4619      	mov	r1, r3
   1224e:	68f8      	ldr	r0, [r7, #12]
   12250:	4b12      	ldr	r3, [pc, #72]	; (1229c <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   12252:	4798      	blx	r3
   12254:	4603      	mov	r3, r0
   12256:	4618      	mov	r0, r3
   12258:	68fb      	ldr	r3, [r7, #12]
   1225a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1225c:	68f9      	ldr	r1, [r7, #12]
   1225e:	1c83      	adds	r3, r0, #2
   12260:	009b      	lsls	r3, r3, #2
   12262:	440b      	add	r3, r1
   12264:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   12266:	e011      	b.n	1228c <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
   12268:	79bb      	ldrb	r3, [r7, #6]
   1226a:	2b01      	cmp	r3, #1
   1226c:	d10e      	bne.n	1228c <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
   1226e:	68fb      	ldr	r3, [r7, #12]
   12270:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   12272:	4b08      	ldr	r3, [pc, #32]	; (12294 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   12274:	4610      	mov	r0, r2
   12276:	4798      	blx	r3
   12278:	4602      	mov	r2, r0
   1227a:	4b07      	ldr	r3, [pc, #28]	; (12298 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1227c:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   12280:	4610      	mov	r0, r2
   12282:	4798      	blx	r3
   12284:	4603      	mov	r3, r0
   12286:	461a      	mov	r2, r3
   12288:	68fb      	ldr	r3, [r7, #12]
   1228a:	65da      	str	r2, [r3, #92]	; 0x5c
}
   1228c:	bf00      	nop
   1228e:	3710      	adds	r7, #16
   12290:	46bd      	mov	sp, r7
   12292:	bd80      	pop	{r7, pc}
   12294:	00013625 	.word	0x00013625
   12298:	00013835 	.word	0x00013835
   1229c:	000122a1 	.word	0x000122a1

000122a0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   122a0:	b480      	push	{r7}
   122a2:	b085      	sub	sp, #20
   122a4:	af00      	add	r7, sp, #0
   122a6:	6078      	str	r0, [r7, #4]
   122a8:	460b      	mov	r3, r1
   122aa:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   122ac:	2300      	movs	r3, #0
   122ae:	73fb      	strb	r3, [r7, #15]
   122b0:	7bfb      	ldrb	r3, [r7, #15]
   122b2:	2b03      	cmp	r3, #3
   122b4:	dc0c      	bgt.n	122d0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   122b6:	7bfb      	ldrb	r3, [r7, #15]
   122b8:	687a      	ldr	r2, [r7, #4]
   122ba:	4413      	add	r3, r2
   122bc:	78db      	ldrb	r3, [r3, #3]
   122be:	78fa      	ldrb	r2, [r7, #3]
   122c0:	429a      	cmp	r2, r3
   122c2:	d101      	bne.n	122c8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   122c4:	7bfb      	ldrb	r3, [r7, #15]
   122c6:	e004      	b.n	122d2 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   122c8:	7bfb      	ldrb	r3, [r7, #15]
   122ca:	3301      	adds	r3, #1
   122cc:	73fb      	strb	r3, [r7, #15]
   122ce:	e7ef      	b.n	122b0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   122d0:	2300      	movs	r3, #0
}
   122d2:	4618      	mov	r0, r3
   122d4:	3714      	adds	r7, #20
   122d6:	46bd      	mov	sp, r7
   122d8:	bc80      	pop	{r7}
   122da:	4770      	bx	lr

000122dc <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   122dc:	b590      	push	{r4, r7, lr}
   122de:	b089      	sub	sp, #36	; 0x24
   122e0:	af02      	add	r7, sp, #8
   122e2:	60f8      	str	r0, [r7, #12]
   122e4:	60b9      	str	r1, [r7, #8]
   122e6:	4611      	mov	r1, r2
   122e8:	461a      	mov	r2, r3
   122ea:	460b      	mov	r3, r1
   122ec:	71fb      	strb	r3, [r7, #7]
   122ee:	4613      	mov	r3, r2
   122f0:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   122f2:	2300      	movs	r3, #0
   122f4:	75fb      	strb	r3, [r7, #23]
   122f6:	7dfb      	ldrb	r3, [r7, #23]
   122f8:	2b06      	cmp	r3, #6
   122fa:	dc09      	bgt.n	12310 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   122fc:	68fb      	ldr	r3, [r7, #12]
   122fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12300:	7dfb      	ldrb	r3, [r7, #23]
   12302:	4413      	add	r3, r2
   12304:	2200      	movs	r2, #0
   12306:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   12308:	7dfb      	ldrb	r3, [r7, #23]
   1230a:	3301      	adds	r3, #1
   1230c:	75fb      	strb	r3, [r7, #23]
   1230e:	e7f2      	b.n	122f6 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   12310:	68fb      	ldr	r3, [r7, #12]
   12312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12314:	79fa      	ldrb	r2, [r7, #7]
   12316:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   12318:	68fb      	ldr	r3, [r7, #12]
   1231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1231c:	3301      	adds	r3, #1
   1231e:	88ba      	ldrh	r2, [r7, #4]
   12320:	1212      	asrs	r2, r2, #8
   12322:	b2d2      	uxtb	r2, r2
   12324:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   12326:	68fb      	ldr	r3, [r7, #12]
   12328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1232a:	3302      	adds	r3, #2
   1232c:	88ba      	ldrh	r2, [r7, #4]
   1232e:	b2d2      	uxtb	r2, r2
   12330:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   12332:	68fb      	ldr	r3, [r7, #12]
   12334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12336:	3303      	adds	r3, #3
   12338:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1233a:	0e12      	lsrs	r2, r2, #24
   1233c:	b2d2      	uxtb	r2, r2
   1233e:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   12340:	68fb      	ldr	r3, [r7, #12]
   12342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12344:	3304      	adds	r3, #4
   12346:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12348:	0c12      	lsrs	r2, r2, #16
   1234a:	b2d2      	uxtb	r2, r2
   1234c:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   1234e:	68fb      	ldr	r3, [r7, #12]
   12350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12352:	3305      	adds	r3, #5
   12354:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12356:	0a12      	lsrs	r2, r2, #8
   12358:	b2d2      	uxtb	r2, r2
   1235a:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   1235c:	68fb      	ldr	r3, [r7, #12]
   1235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12360:	3306      	adds	r3, #6
   12362:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12364:	b2d2      	uxtb	r2, r2
   12366:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   12368:	68fb      	ldr	r3, [r7, #12]
   1236a:	6a18      	ldr	r0, [r3, #32]
   1236c:	68fb      	ldr	r3, [r7, #12]
   1236e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12370:	f107 0110 	add.w	r1, r7, #16
   12374:	2307      	movs	r3, #7
   12376:	9300      	str	r3, [sp, #0]
   12378:	460b      	mov	r3, r1
   1237a:	68b9      	ldr	r1, [r7, #8]
   1237c:	4c0a      	ldr	r4, [pc, #40]	; (123a8 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   1237e:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   12380:	7c3b      	ldrb	r3, [r7, #16]
   12382:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   12384:	7c7b      	ldrb	r3, [r7, #17]
   12386:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   12388:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   1238a:	7cbb      	ldrb	r3, [r7, #18]
   1238c:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   1238e:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   12390:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   12392:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
   12398:	bf00      	nop
	return output_data;
   1239a:	68fb      	ldr	r3, [r7, #12]
   1239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   1239e:	4618      	mov	r0, r3
   123a0:	371c      	adds	r7, #28
   123a2:	46bd      	mov	sp, r7
   123a4:	bd90      	pop	{r4, r7, pc}
   123a6:	bf00      	nop
   123a8:	000128d1 	.word	0x000128d1

000123ac <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   123ac:	b590      	push	{r4, r7, lr}
   123ae:	b087      	sub	sp, #28
   123b0:	af02      	add	r7, sp, #8
   123b2:	60f8      	str	r0, [r7, #12]
   123b4:	60b9      	str	r1, [r7, #8]
   123b6:	4611      	mov	r1, r2
   123b8:	461a      	mov	r2, r3
   123ba:	460b      	mov	r3, r1
   123bc:	71fb      	strb	r3, [r7, #7]
   123be:	4613      	mov	r3, r2
   123c0:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   123c2:	68fb      	ldr	r3, [r7, #12]
   123c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   123c6:	79fa      	ldrb	r2, [r7, #7]
   123c8:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   123ce:	3301      	adds	r3, #1
   123d0:	88ba      	ldrh	r2, [r7, #4]
   123d2:	1212      	asrs	r2, r2, #8
   123d4:	b2d2      	uxtb	r2, r2
   123d6:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   123d8:	68fb      	ldr	r3, [r7, #12]
   123da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   123dc:	3302      	adds	r3, #2
   123de:	88ba      	ldrh	r2, [r7, #4]
   123e0:	b2d2      	uxtb	r2, r2
   123e2:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   123e8:	3303      	adds	r3, #3
   123ea:	f897 2020 	ldrb.w	r2, [r7, #32]
   123ee:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   123f0:	68fb      	ldr	r3, [r7, #12]
   123f2:	6a18      	ldr	r0, [r3, #32]
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   123f8:	68fb      	ldr	r3, [r7, #12]
   123fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   123fc:	2304      	movs	r3, #4
   123fe:	9300      	str	r3, [sp, #0]
   12400:	460b      	mov	r3, r1
   12402:	68b9      	ldr	r1, [r7, #8]
   12404:	4c04      	ldr	r4, [pc, #16]	; (12418 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   12406:	47a0      	blx	r4
	return rx[0];
   12408:	68fb      	ldr	r3, [r7, #12]
   1240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1240c:	781b      	ldrb	r3, [r3, #0]
}
   1240e:	4618      	mov	r0, r3
   12410:	3714      	adds	r7, #20
   12412:	46bd      	mov	sp, r7
   12414:	bd90      	pop	{r4, r7, pc}
   12416:	bf00      	nop
   12418:	000128d1 	.word	0x000128d1

0001241c <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   1241c:	b480      	push	{r7}
   1241e:	b083      	sub	sp, #12
   12420:	af00      	add	r7, sp, #0
   12422:	6078      	str	r0, [r7, #4]
   12424:	460b      	mov	r3, r1
   12426:	807b      	strh	r3, [r7, #2]
   12428:	4613      	mov	r3, r2
   1242a:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   1242c:	787b      	ldrb	r3, [r7, #1]
   1242e:	3b01      	subs	r3, #1
   12430:	b29b      	uxth	r3, r3
   12432:	009b      	lsls	r3, r3, #2
   12434:	b29a      	uxth	r2, r3
   12436:	887b      	ldrh	r3, [r7, #2]
   12438:	4413      	add	r3, r2
   1243a:	b29b      	uxth	r3, r3
}
   1243c:	4618      	mov	r0, r3
   1243e:	370c      	adds	r7, #12
   12440:	46bd      	mov	sp, r7
   12442:	bc80      	pop	{r7}
   12444:	4770      	bx	lr
	...

00012448 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   12448:	b590      	push	{r4, r7, lr}
   1244a:	b085      	sub	sp, #20
   1244c:	af00      	add	r7, sp, #0
   1244e:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
   12450:	4b25      	ldr	r3, [pc, #148]	; (124e8 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   12452:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
   12454:	687b      	ldr	r3, [r7, #4]
   12456:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12458:	68fb      	ldr	r3, [r7, #12]
   1245a:	2202      	movs	r2, #2
   1245c:	6878      	ldr	r0, [r7, #4]
   1245e:	4c23      	ldr	r4, [pc, #140]	; (124ec <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12460:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
   12462:	4b23      	ldr	r3, [pc, #140]	; (124f0 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
   12464:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
   12466:	687b      	ldr	r3, [r7, #4]
   12468:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1246a:	68fb      	ldr	r3, [r7, #12]
   1246c:	2204      	movs	r2, #4
   1246e:	6878      	ldr	r0, [r7, #4]
   12470:	4c1e      	ldr	r4, [pc, #120]	; (124ec <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12472:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
   12474:	4b1c      	ldr	r3, [pc, #112]	; (124e8 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   12476:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
   12478:	687b      	ldr	r3, [r7, #4]
   1247a:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1247c:	68fb      	ldr	r3, [r7, #12]
   1247e:	2207      	movs	r2, #7
   12480:	6878      	ldr	r0, [r7, #4]
   12482:	4c1a      	ldr	r4, [pc, #104]	; (124ec <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12484:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
   12486:	4b1b      	ldr	r3, [pc, #108]	; (124f4 <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
   12488:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
   1248a:	687b      	ldr	r3, [r7, #4]
   1248c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1248e:	68fb      	ldr	r3, [r7, #12]
   12490:	2209      	movs	r2, #9
   12492:	6878      	ldr	r0, [r7, #4]
   12494:	4c15      	ldr	r4, [pc, #84]	; (124ec <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12496:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
   12498:	4b13      	ldr	r3, [pc, #76]	; (124e8 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   1249a:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
   1249c:	687b      	ldr	r3, [r7, #4]
   1249e:	6d99      	ldr	r1, [r3, #88]	; 0x58
   124a0:	68fb      	ldr	r3, [r7, #12]
   124a2:	220c      	movs	r2, #12
   124a4:	6878      	ldr	r0, [r7, #4]
   124a6:	4c11      	ldr	r4, [pc, #68]	; (124ec <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   124a8:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
   124aa:	4b13      	ldr	r3, [pc, #76]	; (124f8 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
   124ac:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
   124ae:	687b      	ldr	r3, [r7, #4]
   124b0:	6d99      	ldr	r1, [r3, #88]	; 0x58
   124b2:	68fb      	ldr	r3, [r7, #12]
   124b4:	220e      	movs	r2, #14
   124b6:	6878      	ldr	r0, [r7, #4]
   124b8:	4c0c      	ldr	r4, [pc, #48]	; (124ec <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   124ba:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
   124bc:	4b0a      	ldr	r3, [pc, #40]	; (124e8 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   124be:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
   124c0:	687b      	ldr	r3, [r7, #4]
   124c2:	6d99      	ldr	r1, [r3, #88]	; 0x58
   124c4:	68fb      	ldr	r3, [r7, #12]
   124c6:	2211      	movs	r2, #17
   124c8:	6878      	ldr	r0, [r7, #4]
   124ca:	4c08      	ldr	r4, [pc, #32]	; (124ec <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   124cc:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
   124ce:	4b0b      	ldr	r3, [pc, #44]	; (124fc <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
   124d0:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
   124d2:	687b      	ldr	r3, [r7, #4]
   124d4:	6d99      	ldr	r1, [r3, #88]	; 0x58
   124d6:	68fb      	ldr	r3, [r7, #12]
   124d8:	2213      	movs	r2, #19
   124da:	6878      	ldr	r0, [r7, #4]
   124dc:	4c03      	ldr	r4, [pc, #12]	; (124ec <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   124de:	47a0      	blx	r4

}
   124e0:	bf00      	nop
   124e2:	3714      	adds	r7, #20
   124e4:	46bd      	mov	sp, r7
   124e6:	bd90      	pop	{r4, r7, pc}
   124e8:	e89c4000 	.word	0xe89c4000
   124ec:	00012041 	.word	0x00012041
   124f0:	60a91000 	.word	0x60a91000
   124f4:	61e91000 	.word	0x61e91000
   124f8:	63291000 	.word	0x63291000
   124fc:	64691000 	.word	0x64691000

00012500 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   12500:	b590      	push	{r4, r7, lr}
   12502:	b085      	sub	sp, #20
   12504:	af02      	add	r7, sp, #8
   12506:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   12508:	687b      	ldr	r3, [r7, #4]
   1250a:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
   1250c:	2300      	movs	r3, #0
   1250e:	9300      	str	r3, [sp, #0]
   12510:	23f0      	movs	r3, #240	; 0xf0
   12512:	2202      	movs	r2, #2
   12514:	6878      	ldr	r0, [r7, #4]
   12516:	4c07      	ldr	r4, [pc, #28]	; (12534 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   12518:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   1251a:	687b      	ldr	r3, [r7, #4]
   1251c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1251e:	2300      	movs	r3, #0
   12520:	9300      	str	r3, [sp, #0]
   12522:	23ff      	movs	r3, #255	; 0xff
   12524:	2202      	movs	r2, #2
   12526:	6878      	ldr	r0, [r7, #4]
   12528:	4c02      	ldr	r4, [pc, #8]	; (12534 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   1252a:	47a0      	blx	r4
}
   1252c:	bf00      	nop
   1252e:	370c      	adds	r7, #12
   12530:	46bd      	mov	sp, r7
   12532:	bd90      	pop	{r4, r7, pc}
   12534:	000123ad 	.word	0x000123ad

00012538 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   12538:	b580      	push	{r7, lr}
   1253a:	b082      	sub	sp, #8
   1253c:	af00      	add	r7, sp, #0
   1253e:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   12540:	687b      	ldr	r3, [r7, #4]
   12542:	2200      	movs	r2, #0
   12544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
   12548:	687b      	ldr	r3, [r7, #4]
   1254a:	2200      	movs	r2, #0
   1254c:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   1254e:	4a31      	ldr	r2, [pc, #196]	; (12614 <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   12550:	687b      	ldr	r3, [r7, #4]
   12552:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   12554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12558:	492f      	ldr	r1, [pc, #188]	; (12618 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   1255a:	4830      	ldr	r0, [pc, #192]	; (1261c <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   1255c:	4b30      	ldr	r3, [pc, #192]	; (12620 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   1255e:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   12560:	687b      	ldr	r3, [r7, #4]
   12562:	79db      	ldrb	r3, [r3, #7]
   12564:	2b01      	cmp	r3, #1
   12566:	d009      	beq.n	1257c <_ZN13LTC2983_Class8SelfTestEv+0x44>
   12568:	687b      	ldr	r3, [r7, #4]
   1256a:	789b      	ldrb	r3, [r3, #2]
   1256c:	b2db      	uxtb	r3, r3
   1256e:	f083 0301 	eor.w	r3, r3, #1
   12572:	b2db      	uxtb	r3, r3
   12574:	2b00      	cmp	r3, #0
   12576:	d001      	beq.n	1257c <_ZN13LTC2983_Class8SelfTestEv+0x44>
   12578:	2301      	movs	r3, #1
   1257a:	e000      	b.n	1257e <_ZN13LTC2983_Class8SelfTestEv+0x46>
   1257c:	2300      	movs	r3, #0
   1257e:	2b00      	cmp	r3, #0
   12580:	d034      	beq.n	125ec <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   12582:	2100      	movs	r1, #0
   12584:	6878      	ldr	r0, [r7, #4]
   12586:	4b27      	ldr	r3, [pc, #156]	; (12624 <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   12588:	4798      	blx	r3
		delay_ms(1);
   1258a:	2001      	movs	r0, #1
   1258c:	4b26      	ldr	r3, [pc, #152]	; (12628 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   1258e:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   12590:	687b      	ldr	r3, [r7, #4]
   12592:	781b      	ldrb	r3, [r3, #0]
   12594:	b2db      	uxtb	r3, r3
   12596:	f083 0301 	eor.w	r3, r3, #1
   1259a:	b2db      	uxtb	r3, r3
   1259c:	2b00      	cmp	r3, #0
   1259e:	d009      	beq.n	125b4 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   125a0:	687b      	ldr	r3, [r7, #4]
   125a2:	789b      	ldrb	r3, [r3, #2]
   125a4:	b2db      	uxtb	r3, r3
   125a6:	f083 0301 	eor.w	r3, r3, #1
   125aa:	b2db      	uxtb	r3, r3
   125ac:	2b00      	cmp	r3, #0
   125ae:	d001      	beq.n	125b4 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   125b0:	2301      	movs	r3, #1
   125b2:	e000      	b.n	125b6 <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   125b4:	2300      	movs	r3, #0
   125b6:	2b00      	cmp	r3, #0
   125b8:	d000      	beq.n	125bc <_ZN13LTC2983_Class8SelfTestEv+0x84>
   125ba:	e7e9      	b.n	12590 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   125bc:	687b      	ldr	r3, [r7, #4]
   125be:	789b      	ldrb	r3, [r3, #2]
   125c0:	b2db      	uxtb	r3, r3
   125c2:	f083 0301 	eor.w	r3, r3, #1
   125c6:	b2db      	uxtb	r3, r3
   125c8:	2b00      	cmp	r3, #0
   125ca:	d0c9      	beq.n	12560 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   125cc:	687b      	ldr	r3, [r7, #4]
   125ce:	781b      	ldrb	r3, [r3, #0]
   125d0:	b2db      	uxtb	r3, r3
   125d2:	2b00      	cmp	r3, #0
   125d4:	d006      	beq.n	125e4 <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	78db      	ldrb	r3, [r3, #3]
   125da:	4619      	mov	r1, r3
   125dc:	6878      	ldr	r0, [r7, #4]
   125de:	4b13      	ldr	r3, [pc, #76]	; (1262c <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   125e0:	4798      	blx	r3
   125e2:	e7bd      	b.n	12560 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   125e4:	2001      	movs	r0, #1
   125e6:	4b10      	ldr	r3, [pc, #64]	; (12628 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   125e8:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   125ea:	e7b9      	b.n	12560 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   125ec:	490a      	ldr	r1, [pc, #40]	; (12618 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   125ee:	480b      	ldr	r0, [pc, #44]	; (1261c <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   125f0:	4b0f      	ldr	r3, [pc, #60]	; (12630 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   125f2:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   125f4:	687b      	ldr	r3, [r7, #4]
   125f6:	79db      	ldrb	r3, [r3, #7]
   125f8:	2b01      	cmp	r3, #1
   125fa:	bf0c      	ite	eq
   125fc:	2301      	moveq	r3, #1
   125fe:	2300      	movne	r3, #0
   12600:	b2da      	uxtb	r2, r3
   12602:	687b      	ldr	r3, [r7, #4]
   12604:	771a      	strb	r2, [r3, #28]
	return	isOK;
   12606:	687b      	ldr	r3, [r7, #4]
   12608:	7f1b      	ldrb	r3, [r3, #28]
	}
   1260a:	4618      	mov	r0, r3
   1260c:	3708      	adds	r7, #8
   1260e:	46bd      	mov	sp, r7
   12610:	bd80      	pop	{r7, pc}
   12612:	bf00      	nop
   12614:	20009b14 	.word	0x20009b14
   12618:	00011f59 	.word	0x00011f59
   1261c:	20009a14 	.word	0x20009a14
   12620:	0000dffd 	.word	0x0000dffd
   12624:	00012095 	.word	0x00012095
   12628:	00002a81 	.word	0x00002a81
   1262c:	000121c9 	.word	0x000121c9
   12630:	0000dfa5 	.word	0x0000dfa5

00012634 <_Z41__static_initialization_and_destruction_0ii>:
   12634:	b580      	push	{r7, lr}
   12636:	b082      	sub	sp, #8
   12638:	af00      	add	r7, sp, #0
   1263a:	6078      	str	r0, [r7, #4]
   1263c:	6039      	str	r1, [r7, #0]
   1263e:	687b      	ldr	r3, [r7, #4]
   12640:	2b01      	cmp	r3, #1
   12642:	d14c      	bne.n	126de <_Z41__static_initialization_and_destruction_0ii+0xaa>
   12644:	683b      	ldr	r3, [r7, #0]
   12646:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1264a:	4293      	cmp	r3, r2
   1264c:	d147      	bne.n	126de <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1264e:	4926      	ldr	r1, [pc, #152]	; (126e8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   12650:	4826      	ldr	r0, [pc, #152]	; (126ec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   12652:	4b27      	ldr	r3, [pc, #156]	; (126f0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12654:	4798      	blx	r3
   12656:	4a27      	ldr	r2, [pc, #156]	; (126f4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12658:	4927      	ldr	r1, [pc, #156]	; (126f8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1265a:	4824      	ldr	r0, [pc, #144]	; (126ec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   1265c:	4b27      	ldr	r3, [pc, #156]	; (126fc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1265e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   12660:	4927      	ldr	r1, [pc, #156]	; (12700 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   12662:	4828      	ldr	r0, [pc, #160]	; (12704 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   12664:	4b22      	ldr	r3, [pc, #136]	; (126f0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12666:	4798      	blx	r3
   12668:	4a22      	ldr	r2, [pc, #136]	; (126f4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1266a:	4923      	ldr	r1, [pc, #140]	; (126f8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1266c:	4825      	ldr	r0, [pc, #148]	; (12704 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1266e:	4b23      	ldr	r3, [pc, #140]	; (126fc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12670:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   12672:	4925      	ldr	r1, [pc, #148]	; (12708 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   12674:	4825      	ldr	r0, [pc, #148]	; (1270c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   12676:	4b1e      	ldr	r3, [pc, #120]	; (126f0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12678:	4798      	blx	r3
   1267a:	4a1e      	ldr	r2, [pc, #120]	; (126f4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1267c:	491e      	ldr	r1, [pc, #120]	; (126f8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1267e:	4823      	ldr	r0, [pc, #140]	; (1270c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   12680:	4b1e      	ldr	r3, [pc, #120]	; (126fc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12682:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   12684:	4922      	ldr	r1, [pc, #136]	; (12710 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   12686:	4823      	ldr	r0, [pc, #140]	; (12714 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   12688:	4b19      	ldr	r3, [pc, #100]	; (126f0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1268a:	4798      	blx	r3
   1268c:	4a19      	ldr	r2, [pc, #100]	; (126f4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1268e:	491a      	ldr	r1, [pc, #104]	; (126f8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   12690:	4820      	ldr	r0, [pc, #128]	; (12714 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   12692:	4b1a      	ldr	r3, [pc, #104]	; (126fc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12694:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   12696:	4920      	ldr	r1, [pc, #128]	; (12718 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   12698:	4820      	ldr	r0, [pc, #128]	; (1271c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   1269a:	4b15      	ldr	r3, [pc, #84]	; (126f0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1269c:	4798      	blx	r3
   1269e:	4a15      	ldr	r2, [pc, #84]	; (126f4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   126a0:	4915      	ldr	r1, [pc, #84]	; (126f8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   126a2:	481e      	ldr	r0, [pc, #120]	; (1271c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   126a4:	4b15      	ldr	r3, [pc, #84]	; (126fc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   126a6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   126a8:	491d      	ldr	r1, [pc, #116]	; (12720 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   126aa:	481e      	ldr	r0, [pc, #120]	; (12724 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   126ac:	4b10      	ldr	r3, [pc, #64]	; (126f0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   126ae:	4798      	blx	r3
   126b0:	4a10      	ldr	r2, [pc, #64]	; (126f4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   126b2:	4911      	ldr	r1, [pc, #68]	; (126f8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   126b4:	481b      	ldr	r0, [pc, #108]	; (12724 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   126b6:	4b11      	ldr	r3, [pc, #68]	; (126fc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   126b8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   126ba:	491b      	ldr	r1, [pc, #108]	; (12728 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   126bc:	481b      	ldr	r0, [pc, #108]	; (1272c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   126be:	4b0c      	ldr	r3, [pc, #48]	; (126f0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   126c0:	4798      	blx	r3
   126c2:	4a0c      	ldr	r2, [pc, #48]	; (126f4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   126c4:	490c      	ldr	r1, [pc, #48]	; (126f8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   126c6:	4819      	ldr	r0, [pc, #100]	; (1272c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   126c8:	4b0c      	ldr	r3, [pc, #48]	; (126fc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   126ca:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   126cc:	4918      	ldr	r1, [pc, #96]	; (12730 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   126ce:	4819      	ldr	r0, [pc, #100]	; (12734 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   126d0:	4b07      	ldr	r3, [pc, #28]	; (126f0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   126d2:	4798      	blx	r3
   126d4:	4a07      	ldr	r2, [pc, #28]	; (126f4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   126d6:	4908      	ldr	r1, [pc, #32]	; (126f8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   126d8:	4816      	ldr	r0, [pc, #88]	; (12734 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   126da:	4b08      	ldr	r3, [pc, #32]	; (126fc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   126dc:	4798      	blx	r3
   126de:	bf00      	nop
   126e0:	3708      	adds	r7, #8
   126e2:	46bd      	mov	sp, r7
   126e4:	bd80      	pop	{r7, pc}
   126e6:	bf00      	nop
   126e8:	20009dc0 	.word	0x20009dc0
   126ec:	20009a14 	.word	0x20009a14
   126f0:	0000dd75 	.word	0x0000dd75
   126f4:	20000000 	.word	0x20000000
   126f8:	0000ddad 	.word	0x0000ddad
   126fc:	000134a5 	.word	0x000134a5
   12700:	20009e54 	.word	0x20009e54
   12704:	20009a34 	.word	0x20009a34
   12708:	20009f78 	.word	0x20009f78
   1270c:	20009a54 	.word	0x20009a54
   12710:	20009e74 	.word	0x20009e74
   12714:	20009a74 	.word	0x20009a74
   12718:	20009f38 	.word	0x20009f38
   1271c:	20009a94 	.word	0x20009a94
   12720:	20009f58 	.word	0x20009f58
   12724:	20009ab4 	.word	0x20009ab4
   12728:	20009e30 	.word	0x20009e30
   1272c:	20009ad4 	.word	0x20009ad4
   12730:	20009ed0 	.word	0x20009ed0
   12734:	20009af4 	.word	0x20009af4

00012738 <_GLOBAL__sub_I_ptrLTCClass>:
   12738:	b580      	push	{r7, lr}
   1273a:	af00      	add	r7, sp, #0
   1273c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12740:	2001      	movs	r0, #1
   12742:	4b01      	ldr	r3, [pc, #4]	; (12748 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   12744:	4798      	blx	r3
   12746:	bd80      	pop	{r7, pc}
   12748:	00012635 	.word	0x00012635

0001274c <hri_port_set_OUT_reg>:
{
   1274c:	b480      	push	{r7}
   1274e:	b085      	sub	sp, #20
   12750:	af00      	add	r7, sp, #0
   12752:	60f8      	str	r0, [r7, #12]
   12754:	460b      	mov	r3, r1
   12756:	607a      	str	r2, [r7, #4]
   12758:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   1275a:	7afb      	ldrb	r3, [r7, #11]
   1275c:	68fa      	ldr	r2, [r7, #12]
   1275e:	01db      	lsls	r3, r3, #7
   12760:	4413      	add	r3, r2
   12762:	3318      	adds	r3, #24
   12764:	687a      	ldr	r2, [r7, #4]
   12766:	601a      	str	r2, [r3, #0]
}
   12768:	bf00      	nop
   1276a:	3714      	adds	r7, #20
   1276c:	46bd      	mov	sp, r7
   1276e:	bc80      	pop	{r7}
   12770:	4770      	bx	lr

00012772 <hri_port_clear_OUT_reg>:
{
   12772:	b480      	push	{r7}
   12774:	b085      	sub	sp, #20
   12776:	af00      	add	r7, sp, #0
   12778:	60f8      	str	r0, [r7, #12]
   1277a:	460b      	mov	r3, r1
   1277c:	607a      	str	r2, [r7, #4]
   1277e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   12780:	7afb      	ldrb	r3, [r7, #11]
   12782:	68fa      	ldr	r2, [r7, #12]
   12784:	01db      	lsls	r3, r3, #7
   12786:	4413      	add	r3, r2
   12788:	3314      	adds	r3, #20
   1278a:	687a      	ldr	r2, [r7, #4]
   1278c:	601a      	str	r2, [r3, #0]
}
   1278e:	bf00      	nop
   12790:	3714      	adds	r7, #20
   12792:	46bd      	mov	sp, r7
   12794:	bc80      	pop	{r7}
   12796:	4770      	bx	lr

00012798 <_gpio_set_level>:
{
   12798:	b580      	push	{r7, lr}
   1279a:	b082      	sub	sp, #8
   1279c:	af00      	add	r7, sp, #0
   1279e:	4603      	mov	r3, r0
   127a0:	6039      	str	r1, [r7, #0]
   127a2:	71fb      	strb	r3, [r7, #7]
   127a4:	4613      	mov	r3, r2
   127a6:	71bb      	strb	r3, [r7, #6]
	if (level) {
   127a8:	79bb      	ldrb	r3, [r7, #6]
   127aa:	2b00      	cmp	r3, #0
   127ac:	d006      	beq.n	127bc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   127ae:	79fb      	ldrb	r3, [r7, #7]
   127b0:	683a      	ldr	r2, [r7, #0]
   127b2:	4619      	mov	r1, r3
   127b4:	4806      	ldr	r0, [pc, #24]	; (127d0 <_gpio_set_level+0x38>)
   127b6:	4b07      	ldr	r3, [pc, #28]	; (127d4 <_gpio_set_level+0x3c>)
   127b8:	4798      	blx	r3
}
   127ba:	e005      	b.n	127c8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   127bc:	79fb      	ldrb	r3, [r7, #7]
   127be:	683a      	ldr	r2, [r7, #0]
   127c0:	4619      	mov	r1, r3
   127c2:	4803      	ldr	r0, [pc, #12]	; (127d0 <_gpio_set_level+0x38>)
   127c4:	4b04      	ldr	r3, [pc, #16]	; (127d8 <_gpio_set_level+0x40>)
   127c6:	4798      	blx	r3
}
   127c8:	bf00      	nop
   127ca:	3708      	adds	r7, #8
   127cc:	46bd      	mov	sp, r7
   127ce:	bd80      	pop	{r7, pc}
   127d0:	41008000 	.word	0x41008000
   127d4:	0001274d 	.word	0x0001274d
   127d8:	00012773 	.word	0x00012773

000127dc <gpio_set_pin_level>:
{
   127dc:	b580      	push	{r7, lr}
   127de:	b082      	sub	sp, #8
   127e0:	af00      	add	r7, sp, #0
   127e2:	4603      	mov	r3, r0
   127e4:	460a      	mov	r2, r1
   127e6:	71fb      	strb	r3, [r7, #7]
   127e8:	4613      	mov	r3, r2
   127ea:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   127ec:	79fb      	ldrb	r3, [r7, #7]
   127ee:	115b      	asrs	r3, r3, #5
   127f0:	b2d8      	uxtb	r0, r3
   127f2:	79fb      	ldrb	r3, [r7, #7]
   127f4:	f003 031f 	and.w	r3, r3, #31
   127f8:	2201      	movs	r2, #1
   127fa:	fa02 f303 	lsl.w	r3, r2, r3
   127fe:	79ba      	ldrb	r2, [r7, #6]
   12800:	4619      	mov	r1, r3
   12802:	4b03      	ldr	r3, [pc, #12]	; (12810 <gpio_set_pin_level+0x34>)
   12804:	4798      	blx	r3
}
   12806:	bf00      	nop
   12808:	3708      	adds	r7, #8
   1280a:	46bd      	mov	sp, r7
   1280c:	bd80      	pop	{r7, pc}
   1280e:	bf00      	nop
   12810:	00012799 	.word	0x00012799

00012814 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   12814:	b480      	push	{r7}
   12816:	b083      	sub	sp, #12
   12818:	af00      	add	r7, sp, #0
   1281a:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   1281c:	4a05      	ldr	r2, [pc, #20]	; (12834 <_ZN6LT_SPIC1Ev+0x20>)
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	4a04      	ldr	r2, [pc, #16]	; (12838 <_ZN6LT_SPIC1Ev+0x24>)
   12826:	605a      	str	r2, [r3, #4]
} //LT_SPI
   12828:	687b      	ldr	r3, [r7, #4]
   1282a:	4618      	mov	r0, r3
   1282c:	370c      	adds	r7, #12
   1282e:	46bd      	mov	sp, r7
   12830:	bc80      	pop	{r7}
   12832:	4770      	bx	lr
   12834:	20009b18 	.word	0x20009b18
   12838:	20009b1c 	.word	0x20009b1c

0001283c <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   1283c:	b480      	push	{r7}
   1283e:	b083      	sub	sp, #12
   12840:	af00      	add	r7, sp, #0
   12842:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   12844:	687b      	ldr	r3, [r7, #4]
   12846:	4618      	mov	r0, r3
   12848:	370c      	adds	r7, #12
   1284a:	46bd      	mov	sp, r7
   1284c:	bc80      	pop	{r7}
   1284e:	4770      	bx	lr

00012850 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   12850:	b580      	push	{r7, lr}
   12852:	b082      	sub	sp, #8
   12854:	af00      	add	r7, sp, #0
   12856:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   12858:	687b      	ldr	r3, [r7, #4]
   1285a:	685a      	ldr	r2, [r3, #4]
   1285c:	687b      	ldr	r3, [r7, #4]
   1285e:	691b      	ldr	r3, [r3, #16]
   12860:	4619      	mov	r1, r3
   12862:	4610      	mov	r0, r2
   12864:	4b0e      	ldr	r3, [pc, #56]	; (128a0 <_ZN6LT_SPI4initEv+0x50>)
   12866:	4798      	blx	r3
	spiTemp->init();
   12868:	687b      	ldr	r3, [r7, #4]
   1286a:	685b      	ldr	r3, [r3, #4]
   1286c:	4618      	mov	r0, r3
   1286e:	4b0d      	ldr	r3, [pc, #52]	; (128a4 <_ZN6LT_SPI4initEv+0x54>)
   12870:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   12872:	687b      	ldr	r3, [r7, #4]
   12874:	685b      	ldr	r3, [r3, #4]
   12876:	685a      	ldr	r2, [r3, #4]
   12878:	687b      	ldr	r3, [r7, #4]
   1287a:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	685b      	ldr	r3, [r3, #4]
   12880:	689a      	ldr	r2, [r3, #8]
   12882:	687b      	ldr	r3, [r7, #4]
   12884:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   12886:	687b      	ldr	r3, [r7, #4]
   12888:	685b      	ldr	r3, [r3, #4]
   1288a:	4618      	mov	r0, r3
   1288c:	4b06      	ldr	r3, [pc, #24]	; (128a8 <_ZN6LT_SPI4initEv+0x58>)
   1288e:	4798      	blx	r3
	ready=true;
   12890:	687b      	ldr	r3, [r7, #4]
   12892:	2201      	movs	r2, #1
   12894:	701a      	strb	r2, [r3, #0]
}
   12896:	bf00      	nop
   12898:	3708      	adds	r7, #8
   1289a:	46bd      	mov	sp, r7
   1289c:	bd80      	pop	{r7, pc}
   1289e:	bf00      	nop
   128a0:	00012af9 	.word	0x00012af9
   128a4:	00012ab1 	.word	0x00012ab1
   128a8:	00012b1d 	.word	0x00012b1d

000128ac <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   128ac:	b480      	push	{r7}
   128ae:	b083      	sub	sp, #12
   128b0:	af00      	add	r7, sp, #0
   128b2:	6078      	str	r0, [r7, #4]
   128b4:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   128b6:	687b      	ldr	r3, [r7, #4]
   128b8:	683a      	ldr	r2, [r7, #0]
   128ba:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   128bc:	4a03      	ldr	r2, [pc, #12]	; (128cc <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   128be:	687b      	ldr	r3, [r7, #4]
   128c0:	6013      	str	r3, [r2, #0]
}
   128c2:	bf00      	nop
   128c4:	370c      	adds	r7, #12
   128c6:	46bd      	mov	sp, r7
   128c8:	bc80      	pop	{r7}
   128ca:	4770      	bx	lr
   128cc:	20009b18 	.word	0x20009b18

000128d0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   128d0:	b580      	push	{r7, lr}
   128d2:	b086      	sub	sp, #24
   128d4:	af00      	add	r7, sp, #0
   128d6:	60f8      	str	r0, [r7, #12]
   128d8:	60b9      	str	r1, [r7, #8]
   128da:	607a      	str	r2, [r7, #4]
   128dc:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   128de:	687b      	ldr	r3, [r7, #4]
   128e0:	781b      	ldrb	r3, [r3, #0]
   128e2:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   128e4:	68b9      	ldr	r1, [r7, #8]
   128e6:	68f8      	ldr	r0, [r7, #12]
   128e8:	4b25      	ldr	r3, [pc, #148]	; (12980 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   128ea:	4798      	blx	r3
	
	switch(rOrw){
   128ec:	7dfb      	ldrb	r3, [r7, #23]
   128ee:	2b02      	cmp	r3, #2
   128f0:	d002      	beq.n	128f8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   128f2:	2b03      	cmp	r3, #3
   128f4:	d009      	beq.n	1290a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   128f6:	e028      	b.n	1294a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   128f8:	68fb      	ldr	r3, [r7, #12]
   128fa:	685b      	ldr	r3, [r3, #4]
   128fc:	f897 2020 	ldrb.w	r2, [r7, #32]
   12900:	6879      	ldr	r1, [r7, #4]
   12902:	4618      	mov	r0, r3
   12904:	4b1f      	ldr	r3, [pc, #124]	; (12984 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   12906:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   12908:	e031      	b.n	1296e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   1290a:	68fb      	ldr	r3, [r7, #12]
   1290c:	685b      	ldr	r3, [r3, #4]
   1290e:	2203      	movs	r2, #3
   12910:	6879      	ldr	r1, [r7, #4]
   12912:	4618      	mov	r0, r3
   12914:	4b1b      	ldr	r3, [pc, #108]	; (12984 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   12916:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   12918:	f897 3020 	ldrb.w	r3, [r7, #32]
   1291c:	2b04      	cmp	r3, #4
   1291e:	dd0b      	ble.n	12938 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   12920:	68fb      	ldr	r3, [r7, #12]
   12922:	6858      	ldr	r0, [r3, #4]
   12924:	f897 3020 	ldrb.w	r3, [r7, #32]
   12928:	3b03      	subs	r3, #3
   1292a:	461a      	mov	r2, r3
   1292c:	6839      	ldr	r1, [r7, #0]
   1292e:	4b16      	ldr	r3, [pc, #88]	; (12988 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   12930:	4798      	blx	r3
					asm("nop");
   12932:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   12934:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   12936:	e01a      	b.n	1296e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   12938:	68fb      	ldr	r3, [r7, #12]
   1293a:	685b      	ldr	r3, [r3, #4]
   1293c:	2201      	movs	r2, #1
   1293e:	6839      	ldr	r1, [r7, #0]
   12940:	4618      	mov	r0, r3
   12942:	4b11      	ldr	r3, [pc, #68]	; (12988 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   12944:	4798      	blx	r3
				asm("nop");
   12946:	bf00      	nop
			break;
   12948:	e011      	b.n	1296e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   1294a:	68fb      	ldr	r3, [r7, #12]
   1294c:	685b      	ldr	r3, [r3, #4]
   1294e:	f897 2020 	ldrb.w	r2, [r7, #32]
   12952:	6879      	ldr	r1, [r7, #4]
   12954:	4618      	mov	r0, r3
   12956:	4b0b      	ldr	r3, [pc, #44]	; (12984 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   12958:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   1295a:	68fb      	ldr	r3, [r7, #12]
   1295c:	6858      	ldr	r0, [r3, #4]
   1295e:	f897 3020 	ldrb.w	r3, [r7, #32]
   12962:	3b03      	subs	r3, #3
   12964:	461a      	mov	r2, r3
   12966:	6839      	ldr	r1, [r7, #0]
   12968:	4b07      	ldr	r3, [pc, #28]	; (12988 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   1296a:	4798      	blx	r3
			break;
   1296c:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   1296e:	68b9      	ldr	r1, [r7, #8]
   12970:	68f8      	ldr	r0, [r7, #12]
   12972:	4b06      	ldr	r3, [pc, #24]	; (1298c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   12974:	4798      	blx	r3
	asm("nop");
   12976:	bf00      	nop
	
}
   12978:	bf00      	nop
   1297a:	3718      	adds	r7, #24
   1297c:	46bd      	mov	sp, r7
   1297e:	bd80      	pop	{r7, pc}
   12980:	00012991 	.word	0x00012991
   12984:	00012b59 	.word	0x00012b59
   12988:	00012b9d 	.word	0x00012b9d
   1298c:	000129d9 	.word	0x000129d9

00012990 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   12990:	b580      	push	{r7, lr}
   12992:	b082      	sub	sp, #8
   12994:	af00      	add	r7, sp, #0
   12996:	6078      	str	r0, [r7, #4]
   12998:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1299a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   1299e:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   129a0:	683b      	ldr	r3, [r7, #0]
   129a2:	b2db      	uxtb	r3, r3
   129a4:	2100      	movs	r1, #0
   129a6:	4618      	mov	r0, r3
   129a8:	4b08      	ldr	r3, [pc, #32]	; (129cc <_ZN6LT_SPI4OpenEm+0x3c>)
   129aa:	4798      	blx	r3
	 delay_us(10);
   129ac:	200a      	movs	r0, #10
   129ae:	4b08      	ldr	r3, [pc, #32]	; (129d0 <_ZN6LT_SPI4OpenEm+0x40>)
   129b0:	4798      	blx	r3
	spiTemp->Enable();
   129b2:	687b      	ldr	r3, [r7, #4]
   129b4:	685b      	ldr	r3, [r3, #4]
   129b6:	4618      	mov	r0, r3
   129b8:	4b06      	ldr	r3, [pc, #24]	; (129d4 <_ZN6LT_SPI4OpenEm+0x44>)
   129ba:	4798      	blx	r3
	 delay_us(10);
   129bc:	200a      	movs	r0, #10
   129be:	4b04      	ldr	r3, [pc, #16]	; (129d0 <_ZN6LT_SPI4OpenEm+0x40>)
   129c0:	4798      	blx	r3
 }
   129c2:	bf00      	nop
   129c4:	3708      	adds	r7, #8
   129c6:	46bd      	mov	sp, r7
   129c8:	bd80      	pop	{r7, pc}
   129ca:	bf00      	nop
   129cc:	000127dd 	.word	0x000127dd
   129d0:	00002a4d 	.word	0x00002a4d
   129d4:	00012b1d 	.word	0x00012b1d

000129d8 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   129d8:	b580      	push	{r7, lr}
   129da:	b082      	sub	sp, #8
   129dc:	af00      	add	r7, sp, #0
   129de:	6078      	str	r0, [r7, #4]
   129e0:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   129e2:	200a      	movs	r0, #10
   129e4:	4b0b      	ldr	r3, [pc, #44]	; (12a14 <_ZN6LT_SPI5CloseEm+0x3c>)
   129e6:	4798      	blx	r3
	 spiTemp->Disable();
   129e8:	687b      	ldr	r3, [r7, #4]
   129ea:	685b      	ldr	r3, [r3, #4]
   129ec:	4618      	mov	r0, r3
   129ee:	4b0a      	ldr	r3, [pc, #40]	; (12a18 <_ZN6LT_SPI5CloseEm+0x40>)
   129f0:	4798      	blx	r3
	delay_us(10);
   129f2:	200a      	movs	r0, #10
   129f4:	4b07      	ldr	r3, [pc, #28]	; (12a14 <_ZN6LT_SPI5CloseEm+0x3c>)
   129f6:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   129f8:	683b      	ldr	r3, [r7, #0]
   129fa:	b2db      	uxtb	r3, r3
   129fc:	2101      	movs	r1, #1
   129fe:	4618      	mov	r0, r3
   12a00:	4b06      	ldr	r3, [pc, #24]	; (12a1c <_ZN6LT_SPI5CloseEm+0x44>)
   12a02:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   12a04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   12a08:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   12a0a:	bf00      	nop
   12a0c:	3708      	adds	r7, #8
   12a0e:	46bd      	mov	sp, r7
   12a10:	bd80      	pop	{r7, pc}
   12a12:	bf00      	nop
   12a14:	00002a4d 	.word	0x00002a4d
   12a18:	00012be1 	.word	0x00012be1
   12a1c:	000127dd 	.word	0x000127dd

00012a20 <_Z41__static_initialization_and_destruction_0ii>:
   12a20:	b580      	push	{r7, lr}
   12a22:	b082      	sub	sp, #8
   12a24:	af00      	add	r7, sp, #0
   12a26:	6078      	str	r0, [r7, #4]
   12a28:	6039      	str	r1, [r7, #0]
   12a2a:	687b      	ldr	r3, [r7, #4]
   12a2c:	2b01      	cmp	r3, #1
   12a2e:	d10c      	bne.n	12a4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   12a30:	683b      	ldr	r3, [r7, #0]
   12a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12a36:	4293      	cmp	r3, r2
   12a38:	d107      	bne.n	12a4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   12a3a:	4806      	ldr	r0, [pc, #24]	; (12a54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12a3c:	4b06      	ldr	r3, [pc, #24]	; (12a58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12a3e:	4798      	blx	r3
   12a40:	4a06      	ldr	r2, [pc, #24]	; (12a5c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12a42:	4907      	ldr	r1, [pc, #28]	; (12a60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12a44:	4803      	ldr	r0, [pc, #12]	; (12a54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12a46:	4b07      	ldr	r3, [pc, #28]	; (12a64 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   12a48:	4798      	blx	r3
   12a4a:	bf00      	nop
   12a4c:	3708      	adds	r7, #8
   12a4e:	46bd      	mov	sp, r7
   12a50:	bd80      	pop	{r7, pc}
   12a52:	bf00      	nop
   12a54:	20009b1c 	.word	0x20009b1c
   12a58:	00012a7d 	.word	0x00012a7d
   12a5c:	20000000 	.word	0x20000000
   12a60:	00012a9d 	.word	0x00012a9d
   12a64:	000134a5 	.word	0x000134a5

00012a68 <_GLOBAL__sub_I_ptrLTSPIClass>:
   12a68:	b580      	push	{r7, lr}
   12a6a:	af00      	add	r7, sp, #0
   12a6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12a70:	2001      	movs	r0, #1
   12a72:	4b01      	ldr	r3, [pc, #4]	; (12a78 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   12a74:	4798      	blx	r3
   12a76:	bd80      	pop	{r7, pc}
   12a78:	00012a21 	.word	0x00012a21

00012a7c <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   12a7c:	b480      	push	{r7}
   12a7e:	b083      	sub	sp, #12
   12a80:	af00      	add	r7, sp, #0
   12a82:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   12a84:	4a04      	ldr	r2, [pc, #16]	; (12a98 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   12a86:	687b      	ldr	r3, [r7, #4]
   12a88:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   12a8a:	687b      	ldr	r3, [r7, #4]
   12a8c:	4618      	mov	r0, r3
   12a8e:	370c      	adds	r7, #12
   12a90:	46bd      	mov	sp, r7
   12a92:	bc80      	pop	{r7}
   12a94:	4770      	bx	lr
   12a96:	bf00      	nop
   12a98:	20009b38 	.word	0x20009b38

00012a9c <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   12a9c:	b480      	push	{r7}
   12a9e:	b083      	sub	sp, #12
   12aa0:	af00      	add	r7, sp, #0
   12aa2:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   12aa4:	687b      	ldr	r3, [r7, #4]
   12aa6:	4618      	mov	r0, r3
   12aa8:	370c      	adds	r7, #12
   12aaa:	46bd      	mov	sp, r7
   12aac:	bc80      	pop	{r7}
   12aae:	4770      	bx	lr

00012ab0 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   12ab0:	b580      	push	{r7, lr}
   12ab2:	b082      	sub	sp, #8
   12ab4:	af00      	add	r7, sp, #0
   12ab6:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   12ab8:	687b      	ldr	r3, [r7, #4]
   12aba:	68da      	ldr	r2, [r3, #12]
   12abc:	687b      	ldr	r3, [r7, #4]
   12abe:	3310      	adds	r3, #16
   12ac0:	4619      	mov	r1, r3
   12ac2:	4610      	mov	r0, r2
   12ac4:	4b09      	ldr	r3, [pc, #36]	; (12aec <_ZN13SPI_Syn_Class4initEv+0x3c>)
   12ac6:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   12ac8:	687b      	ldr	r3, [r7, #4]
   12aca:	68db      	ldr	r3, [r3, #12]
   12acc:	4618      	mov	r0, r3
   12ace:	4b08      	ldr	r3, [pc, #32]	; (12af0 <_ZN13SPI_Syn_Class4initEv+0x40>)
   12ad0:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   12ad2:	687b      	ldr	r3, [r7, #4]
   12ad4:	4a07      	ldr	r2, [pc, #28]	; (12af4 <_ZN13SPI_Syn_Class4initEv+0x44>)
   12ad6:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   12ad8:	687b      	ldr	r3, [r7, #4]
   12ada:	4a06      	ldr	r2, [pc, #24]	; (12af4 <_ZN13SPI_Syn_Class4initEv+0x44>)
   12adc:	609a      	str	r2, [r3, #8]
	ready=true;
   12ade:	687b      	ldr	r3, [r7, #4]
   12ae0:	2201      	movs	r2, #1
   12ae2:	701a      	strb	r2, [r3, #0]
	
}
   12ae4:	bf00      	nop
   12ae6:	3708      	adds	r7, #8
   12ae8:	46bd      	mov	sp, r7
   12aea:	bd80      	pop	{r7, pc}
   12aec:	00003255 	.word	0x00003255
   12af0:	000030c9 	.word	0x000030c9
   12af4:	20009b3c 	.word	0x20009b3c

00012af8 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   12af8:	b480      	push	{r7}
   12afa:	b083      	sub	sp, #12
   12afc:	af00      	add	r7, sp, #0
   12afe:	6078      	str	r0, [r7, #4]
   12b00:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   12b02:	4a05      	ldr	r2, [pc, #20]	; (12b18 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   12b08:	687b      	ldr	r3, [r7, #4]
   12b0a:	683a      	ldr	r2, [r7, #0]
   12b0c:	60da      	str	r2, [r3, #12]
}
   12b0e:	bf00      	nop
   12b10:	370c      	adds	r7, #12
   12b12:	46bd      	mov	sp, r7
   12b14:	bc80      	pop	{r7}
   12b16:	4770      	bx	lr
   12b18:	20009b38 	.word	0x20009b38

00012b1c <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   12b1c:	b580      	push	{r7, lr}
   12b1e:	b082      	sub	sp, #8
   12b20:	af00      	add	r7, sp, #0
   12b22:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   12b24:	687b      	ldr	r3, [r7, #4]
   12b26:	68da      	ldr	r2, [r3, #12]
   12b28:	687b      	ldr	r3, [r7, #4]
   12b2a:	3310      	adds	r3, #16
   12b2c:	4619      	mov	r1, r3
   12b2e:	4610      	mov	r0, r2
   12b30:	4b07      	ldr	r3, [pc, #28]	; (12b50 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   12b32:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   12b34:	687b      	ldr	r3, [r7, #4]
   12b36:	68db      	ldr	r3, [r3, #12]
   12b38:	4618      	mov	r0, r3
   12b3a:	4b06      	ldr	r3, [pc, #24]	; (12b54 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   12b3c:	4798      	blx	r3
	ready=true;
   12b3e:	687b      	ldr	r3, [r7, #4]
   12b40:	2201      	movs	r2, #1
   12b42:	701a      	strb	r2, [r3, #0]
	return 0;
   12b44:	2300      	movs	r3, #0
}
   12b46:	4618      	mov	r0, r3
   12b48:	3708      	adds	r7, #8
   12b4a:	46bd      	mov	sp, r7
   12b4c:	bd80      	pop	{r7, pc}
   12b4e:	bf00      	nop
   12b50:	00003255 	.word	0x00003255
   12b54:	000030c9 	.word	0x000030c9

00012b58 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   12b58:	b580      	push	{r7, lr}
   12b5a:	b086      	sub	sp, #24
   12b5c:	af00      	add	r7, sp, #0
   12b5e:	60f8      	str	r0, [r7, #12]
   12b60:	60b9      	str	r1, [r7, #8]
   12b62:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   12b64:	68fb      	ldr	r3, [r7, #12]
   12b66:	2201      	movs	r2, #1
   12b68:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   12b6a:	68fb      	ldr	r3, [r7, #12]
   12b6c:	691b      	ldr	r3, [r3, #16]
   12b6e:	687a      	ldr	r2, [r7, #4]
   12b70:	b292      	uxth	r2, r2
   12b72:	68b9      	ldr	r1, [r7, #8]
   12b74:	4618      	mov	r0, r3
   12b76:	4b08      	ldr	r3, [pc, #32]	; (12b98 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   12b78:	4798      	blx	r3
   12b7a:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   12b7c:	697b      	ldr	r3, [r7, #20]
   12b7e:	2b00      	cmp	r3, #0
   12b80:	bf14      	ite	ne
   12b82:	2301      	movne	r3, #1
   12b84:	2300      	moveq	r3, #0
   12b86:	b2da      	uxtb	r2, r3
   12b88:	68fb      	ldr	r3, [r7, #12]
   12b8a:	761a      	strb	r2, [r3, #24]
	 return w;
   12b8c:	697b      	ldr	r3, [r7, #20]
	
}
   12b8e:	4618      	mov	r0, r3
   12b90:	3718      	adds	r7, #24
   12b92:	46bd      	mov	sp, r7
   12b94:	bd80      	pop	{r7, pc}
   12b96:	bf00      	nop
   12b98:	00011825 	.word	0x00011825

00012b9c <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   12b9c:	b580      	push	{r7, lr}
   12b9e:	b086      	sub	sp, #24
   12ba0:	af00      	add	r7, sp, #0
   12ba2:	60f8      	str	r0, [r7, #12]
   12ba4:	60b9      	str	r1, [r7, #8]
   12ba6:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   12ba8:	68fb      	ldr	r3, [r7, #12]
   12baa:	2201      	movs	r2, #1
   12bac:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   12bae:	68fb      	ldr	r3, [r7, #12]
   12bb0:	691b      	ldr	r3, [r3, #16]
   12bb2:	687a      	ldr	r2, [r7, #4]
   12bb4:	b292      	uxth	r2, r2
   12bb6:	68b9      	ldr	r1, [r7, #8]
   12bb8:	4618      	mov	r0, r3
   12bba:	4b08      	ldr	r3, [pc, #32]	; (12bdc <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   12bbc:	4798      	blx	r3
   12bbe:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   12bc0:	697b      	ldr	r3, [r7, #20]
   12bc2:	2b00      	cmp	r3, #0
   12bc4:	bf14      	ite	ne
   12bc6:	2301      	movne	r3, #1
   12bc8:	2300      	moveq	r3, #0
   12bca:	b2da      	uxtb	r2, r3
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	765a      	strb	r2, [r3, #25]
	return  r;
   12bd0:	697b      	ldr	r3, [r7, #20]
}
   12bd2:	4618      	mov	r0, r3
   12bd4:	3718      	adds	r7, #24
   12bd6:	46bd      	mov	sp, r7
   12bd8:	bd80      	pop	{r7, pc}
   12bda:	bf00      	nop
   12bdc:	00011875 	.word	0x00011875

00012be0 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   12be0:	b580      	push	{r7, lr}
   12be2:	b082      	sub	sp, #8
   12be4:	af00      	add	r7, sp, #0
   12be6:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   12be8:	687b      	ldr	r3, [r7, #4]
   12bea:	68db      	ldr	r3, [r3, #12]
   12bec:	4618      	mov	r0, r3
   12bee:	4b03      	ldr	r3, [pc, #12]	; (12bfc <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   12bf0:	4798      	blx	r3
	
}
   12bf2:	bf00      	nop
   12bf4:	3708      	adds	r7, #8
   12bf6:	46bd      	mov	sp, r7
   12bf8:	bd80      	pop	{r7, pc}
   12bfa:	bf00      	nop
   12bfc:	00003105 	.word	0x00003105

00012c00 <hri_port_set_DIR_reg>:
{
   12c00:	b480      	push	{r7}
   12c02:	b085      	sub	sp, #20
   12c04:	af00      	add	r7, sp, #0
   12c06:	60f8      	str	r0, [r7, #12]
   12c08:	460b      	mov	r3, r1
   12c0a:	607a      	str	r2, [r7, #4]
   12c0c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   12c0e:	7afb      	ldrb	r3, [r7, #11]
   12c10:	68fa      	ldr	r2, [r7, #12]
   12c12:	01db      	lsls	r3, r3, #7
   12c14:	4413      	add	r3, r2
   12c16:	3308      	adds	r3, #8
   12c18:	687a      	ldr	r2, [r7, #4]
   12c1a:	601a      	str	r2, [r3, #0]
}
   12c1c:	bf00      	nop
   12c1e:	3714      	adds	r7, #20
   12c20:	46bd      	mov	sp, r7
   12c22:	bc80      	pop	{r7}
   12c24:	4770      	bx	lr

00012c26 <hri_port_clear_DIR_reg>:
{
   12c26:	b480      	push	{r7}
   12c28:	b085      	sub	sp, #20
   12c2a:	af00      	add	r7, sp, #0
   12c2c:	60f8      	str	r0, [r7, #12]
   12c2e:	460b      	mov	r3, r1
   12c30:	607a      	str	r2, [r7, #4]
   12c32:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   12c34:	7afb      	ldrb	r3, [r7, #11]
   12c36:	68fa      	ldr	r2, [r7, #12]
   12c38:	01db      	lsls	r3, r3, #7
   12c3a:	4413      	add	r3, r2
   12c3c:	3304      	adds	r3, #4
   12c3e:	687a      	ldr	r2, [r7, #4]
   12c40:	601a      	str	r2, [r3, #0]
}
   12c42:	bf00      	nop
   12c44:	3714      	adds	r7, #20
   12c46:	46bd      	mov	sp, r7
   12c48:	bc80      	pop	{r7}
   12c4a:	4770      	bx	lr

00012c4c <hri_port_set_OUT_reg>:
{
   12c4c:	b480      	push	{r7}
   12c4e:	b085      	sub	sp, #20
   12c50:	af00      	add	r7, sp, #0
   12c52:	60f8      	str	r0, [r7, #12]
   12c54:	460b      	mov	r3, r1
   12c56:	607a      	str	r2, [r7, #4]
   12c58:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12c5a:	7afb      	ldrb	r3, [r7, #11]
   12c5c:	68fa      	ldr	r2, [r7, #12]
   12c5e:	01db      	lsls	r3, r3, #7
   12c60:	4413      	add	r3, r2
   12c62:	3318      	adds	r3, #24
   12c64:	687a      	ldr	r2, [r7, #4]
   12c66:	601a      	str	r2, [r3, #0]
}
   12c68:	bf00      	nop
   12c6a:	3714      	adds	r7, #20
   12c6c:	46bd      	mov	sp, r7
   12c6e:	bc80      	pop	{r7}
   12c70:	4770      	bx	lr

00012c72 <hri_port_clear_OUT_reg>:
{
   12c72:	b480      	push	{r7}
   12c74:	b085      	sub	sp, #20
   12c76:	af00      	add	r7, sp, #0
   12c78:	60f8      	str	r0, [r7, #12]
   12c7a:	460b      	mov	r3, r1
   12c7c:	607a      	str	r2, [r7, #4]
   12c7e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   12c80:	7afb      	ldrb	r3, [r7, #11]
   12c82:	68fa      	ldr	r2, [r7, #12]
   12c84:	01db      	lsls	r3, r3, #7
   12c86:	4413      	add	r3, r2
   12c88:	3314      	adds	r3, #20
   12c8a:	687a      	ldr	r2, [r7, #4]
   12c8c:	601a      	str	r2, [r3, #0]
}
   12c8e:	bf00      	nop
   12c90:	3714      	adds	r7, #20
   12c92:	46bd      	mov	sp, r7
   12c94:	bc80      	pop	{r7}
   12c96:	4770      	bx	lr

00012c98 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   12c98:	b480      	push	{r7}
   12c9a:	b085      	sub	sp, #20
   12c9c:	af00      	add	r7, sp, #0
   12c9e:	6078      	str	r0, [r7, #4]
   12ca0:	4608      	mov	r0, r1
   12ca2:	4611      	mov	r1, r2
   12ca4:	461a      	mov	r2, r3
   12ca6:	4603      	mov	r3, r0
   12ca8:	70fb      	strb	r3, [r7, #3]
   12caa:	460b      	mov	r3, r1
   12cac:	70bb      	strb	r3, [r7, #2]
   12cae:	4613      	mov	r3, r2
   12cb0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   12cb2:	78fa      	ldrb	r2, [r7, #3]
   12cb4:	78bb      	ldrb	r3, [r7, #2]
   12cb6:	6879      	ldr	r1, [r7, #4]
   12cb8:	01d2      	lsls	r2, r2, #7
   12cba:	440a      	add	r2, r1
   12cbc:	4413      	add	r3, r2
   12cbe:	3330      	adds	r3, #48	; 0x30
   12cc0:	781b      	ldrb	r3, [r3, #0]
   12cc2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   12cc4:	7bfb      	ldrb	r3, [r7, #15]
   12cc6:	f023 030f 	bic.w	r3, r3, #15
   12cca:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   12ccc:	787b      	ldrb	r3, [r7, #1]
   12cce:	f003 030f 	and.w	r3, r3, #15
   12cd2:	b2da      	uxtb	r2, r3
   12cd4:	7bfb      	ldrb	r3, [r7, #15]
   12cd6:	4313      	orrs	r3, r2
   12cd8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   12cda:	78fa      	ldrb	r2, [r7, #3]
   12cdc:	78bb      	ldrb	r3, [r7, #2]
   12cde:	6879      	ldr	r1, [r7, #4]
   12ce0:	01d2      	lsls	r2, r2, #7
   12ce2:	440a      	add	r2, r1
   12ce4:	4413      	add	r3, r2
   12ce6:	3330      	adds	r3, #48	; 0x30
   12ce8:	7bfa      	ldrb	r2, [r7, #15]
   12cea:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12cec:	bf00      	nop
   12cee:	3714      	adds	r7, #20
   12cf0:	46bd      	mov	sp, r7
   12cf2:	bc80      	pop	{r7}
   12cf4:	4770      	bx	lr

00012cf6 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   12cf6:	b480      	push	{r7}
   12cf8:	b085      	sub	sp, #20
   12cfa:	af00      	add	r7, sp, #0
   12cfc:	6078      	str	r0, [r7, #4]
   12cfe:	4608      	mov	r0, r1
   12d00:	4611      	mov	r1, r2
   12d02:	461a      	mov	r2, r3
   12d04:	4603      	mov	r3, r0
   12d06:	70fb      	strb	r3, [r7, #3]
   12d08:	460b      	mov	r3, r1
   12d0a:	70bb      	strb	r3, [r7, #2]
   12d0c:	4613      	mov	r3, r2
   12d0e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   12d10:	78fa      	ldrb	r2, [r7, #3]
   12d12:	78bb      	ldrb	r3, [r7, #2]
   12d14:	6879      	ldr	r1, [r7, #4]
   12d16:	01d2      	lsls	r2, r2, #7
   12d18:	440a      	add	r2, r1
   12d1a:	4413      	add	r3, r2
   12d1c:	3330      	adds	r3, #48	; 0x30
   12d1e:	781b      	ldrb	r3, [r3, #0]
   12d20:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   12d22:	7bfb      	ldrb	r3, [r7, #15]
   12d24:	f003 030f 	and.w	r3, r3, #15
   12d28:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   12d2a:	787b      	ldrb	r3, [r7, #1]
   12d2c:	011b      	lsls	r3, r3, #4
   12d2e:	b2da      	uxtb	r2, r3
   12d30:	7bfb      	ldrb	r3, [r7, #15]
   12d32:	4313      	orrs	r3, r2
   12d34:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   12d36:	78fa      	ldrb	r2, [r7, #3]
   12d38:	78bb      	ldrb	r3, [r7, #2]
   12d3a:	6879      	ldr	r1, [r7, #4]
   12d3c:	01d2      	lsls	r2, r2, #7
   12d3e:	440a      	add	r2, r1
   12d40:	4413      	add	r3, r2
   12d42:	3330      	adds	r3, #48	; 0x30
   12d44:	7bfa      	ldrb	r2, [r7, #15]
   12d46:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12d48:	bf00      	nop
   12d4a:	3714      	adds	r7, #20
   12d4c:	46bd      	mov	sp, r7
   12d4e:	bc80      	pop	{r7}
   12d50:	4770      	bx	lr

00012d52 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   12d52:	b480      	push	{r7}
   12d54:	b085      	sub	sp, #20
   12d56:	af00      	add	r7, sp, #0
   12d58:	6078      	str	r0, [r7, #4]
   12d5a:	4608      	mov	r0, r1
   12d5c:	4611      	mov	r1, r2
   12d5e:	461a      	mov	r2, r3
   12d60:	4603      	mov	r3, r0
   12d62:	70fb      	strb	r3, [r7, #3]
   12d64:	460b      	mov	r3, r1
   12d66:	70bb      	strb	r3, [r7, #2]
   12d68:	4613      	mov	r3, r2
   12d6a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   12d6c:	78fa      	ldrb	r2, [r7, #3]
   12d6e:	78bb      	ldrb	r3, [r7, #2]
   12d70:	6879      	ldr	r1, [r7, #4]
   12d72:	01d2      	lsls	r2, r2, #7
   12d74:	440a      	add	r2, r1
   12d76:	4413      	add	r3, r2
   12d78:	3340      	adds	r3, #64	; 0x40
   12d7a:	781b      	ldrb	r3, [r3, #0]
   12d7c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   12d7e:	7bfb      	ldrb	r3, [r7, #15]
   12d80:	f023 0301 	bic.w	r3, r3, #1
   12d84:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   12d86:	787a      	ldrb	r2, [r7, #1]
   12d88:	7bfb      	ldrb	r3, [r7, #15]
   12d8a:	4313      	orrs	r3, r2
   12d8c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   12d8e:	78fa      	ldrb	r2, [r7, #3]
   12d90:	78bb      	ldrb	r3, [r7, #2]
   12d92:	6879      	ldr	r1, [r7, #4]
   12d94:	01d2      	lsls	r2, r2, #7
   12d96:	440a      	add	r2, r1
   12d98:	4413      	add	r3, r2
   12d9a:	3340      	adds	r3, #64	; 0x40
   12d9c:	7bfa      	ldrb	r2, [r7, #15]
   12d9e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12da0:	bf00      	nop
   12da2:	3714      	adds	r7, #20
   12da4:	46bd      	mov	sp, r7
   12da6:	bc80      	pop	{r7}
   12da8:	4770      	bx	lr

00012daa <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   12daa:	b480      	push	{r7}
   12dac:	b085      	sub	sp, #20
   12dae:	af00      	add	r7, sp, #0
   12db0:	60f8      	str	r0, [r7, #12]
   12db2:	460b      	mov	r3, r1
   12db4:	607a      	str	r2, [r7, #4]
   12db6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   12db8:	7afb      	ldrb	r3, [r7, #11]
   12dba:	68fa      	ldr	r2, [r7, #12]
   12dbc:	01db      	lsls	r3, r3, #7
   12dbe:	4413      	add	r3, r2
   12dc0:	3328      	adds	r3, #40	; 0x28
   12dc2:	687a      	ldr	r2, [r7, #4]
   12dc4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12dc6:	bf00      	nop
   12dc8:	3714      	adds	r7, #20
   12dca:	46bd      	mov	sp, r7
   12dcc:	bc80      	pop	{r7}
   12dce:	4770      	bx	lr

00012dd0 <_gpio_set_direction>:
{
   12dd0:	b580      	push	{r7, lr}
   12dd2:	b082      	sub	sp, #8
   12dd4:	af00      	add	r7, sp, #0
   12dd6:	4603      	mov	r3, r0
   12dd8:	6039      	str	r1, [r7, #0]
   12dda:	71fb      	strb	r3, [r7, #7]
   12ddc:	4613      	mov	r3, r2
   12dde:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   12de0:	79bb      	ldrb	r3, [r7, #6]
   12de2:	2b01      	cmp	r3, #1
   12de4:	d01c      	beq.n	12e20 <_gpio_set_direction+0x50>
   12de6:	2b02      	cmp	r3, #2
   12de8:	d037      	beq.n	12e5a <_gpio_set_direction+0x8a>
   12dea:	2b00      	cmp	r3, #0
   12dec:	d14e      	bne.n	12e8c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   12dee:	79fb      	ldrb	r3, [r7, #7]
   12df0:	683a      	ldr	r2, [r7, #0]
   12df2:	4619      	mov	r1, r3
   12df4:	482a      	ldr	r0, [pc, #168]	; (12ea0 <_gpio_set_direction+0xd0>)
   12df6:	4b2b      	ldr	r3, [pc, #172]	; (12ea4 <_gpio_set_direction+0xd4>)
   12df8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   12dfa:	683b      	ldr	r3, [r7, #0]
   12dfc:	b29b      	uxth	r3, r3
   12dfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   12e02:	79fb      	ldrb	r3, [r7, #7]
   12e04:	4619      	mov	r1, r3
   12e06:	4826      	ldr	r0, [pc, #152]	; (12ea0 <_gpio_set_direction+0xd0>)
   12e08:	4b27      	ldr	r3, [pc, #156]	; (12ea8 <_gpio_set_direction+0xd8>)
   12e0a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12e0c:	683b      	ldr	r3, [r7, #0]
   12e0e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   12e10:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12e14:	79fb      	ldrb	r3, [r7, #7]
   12e16:	4619      	mov	r1, r3
   12e18:	4821      	ldr	r0, [pc, #132]	; (12ea0 <_gpio_set_direction+0xd0>)
   12e1a:	4b23      	ldr	r3, [pc, #140]	; (12ea8 <_gpio_set_direction+0xd8>)
   12e1c:	4798      	blx	r3
		break;
   12e1e:	e03a      	b.n	12e96 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   12e20:	79fb      	ldrb	r3, [r7, #7]
   12e22:	683a      	ldr	r2, [r7, #0]
   12e24:	4619      	mov	r1, r3
   12e26:	481e      	ldr	r0, [pc, #120]	; (12ea0 <_gpio_set_direction+0xd0>)
   12e28:	4b1e      	ldr	r3, [pc, #120]	; (12ea4 <_gpio_set_direction+0xd4>)
   12e2a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   12e2c:	683b      	ldr	r3, [r7, #0]
   12e2e:	b29b      	uxth	r3, r3
   12e30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   12e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12e38:	79f9      	ldrb	r1, [r7, #7]
   12e3a:	461a      	mov	r2, r3
   12e3c:	4818      	ldr	r0, [pc, #96]	; (12ea0 <_gpio_set_direction+0xd0>)
   12e3e:	4b1a      	ldr	r3, [pc, #104]	; (12ea8 <_gpio_set_direction+0xd8>)
   12e40:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   12e42:	683b      	ldr	r3, [r7, #0]
   12e44:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   12e46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   12e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   12e4e:	79f9      	ldrb	r1, [r7, #7]
   12e50:	461a      	mov	r2, r3
   12e52:	4813      	ldr	r0, [pc, #76]	; (12ea0 <_gpio_set_direction+0xd0>)
   12e54:	4b14      	ldr	r3, [pc, #80]	; (12ea8 <_gpio_set_direction+0xd8>)
   12e56:	4798      	blx	r3
		break;
   12e58:	e01d      	b.n	12e96 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   12e5a:	79fb      	ldrb	r3, [r7, #7]
   12e5c:	683a      	ldr	r2, [r7, #0]
   12e5e:	4619      	mov	r1, r3
   12e60:	480f      	ldr	r0, [pc, #60]	; (12ea0 <_gpio_set_direction+0xd0>)
   12e62:	4b12      	ldr	r3, [pc, #72]	; (12eac <_gpio_set_direction+0xdc>)
   12e64:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   12e66:	683b      	ldr	r3, [r7, #0]
   12e68:	b29b      	uxth	r3, r3
   12e6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   12e6e:	79fb      	ldrb	r3, [r7, #7]
   12e70:	4619      	mov	r1, r3
   12e72:	480b      	ldr	r0, [pc, #44]	; (12ea0 <_gpio_set_direction+0xd0>)
   12e74:	4b0c      	ldr	r3, [pc, #48]	; (12ea8 <_gpio_set_direction+0xd8>)
   12e76:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12e78:	683b      	ldr	r3, [r7, #0]
   12e7a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   12e7c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12e80:	79fb      	ldrb	r3, [r7, #7]
   12e82:	4619      	mov	r1, r3
   12e84:	4806      	ldr	r0, [pc, #24]	; (12ea0 <_gpio_set_direction+0xd0>)
   12e86:	4b08      	ldr	r3, [pc, #32]	; (12ea8 <_gpio_set_direction+0xd8>)
   12e88:	4798      	blx	r3
		break;
   12e8a:	e004      	b.n	12e96 <_gpio_set_direction+0xc6>
		ASSERT(false);
   12e8c:	2246      	movs	r2, #70	; 0x46
   12e8e:	4908      	ldr	r1, [pc, #32]	; (12eb0 <_gpio_set_direction+0xe0>)
   12e90:	2000      	movs	r0, #0
   12e92:	4b08      	ldr	r3, [pc, #32]	; (12eb4 <_gpio_set_direction+0xe4>)
   12e94:	4798      	blx	r3
}
   12e96:	bf00      	nop
   12e98:	3708      	adds	r7, #8
   12e9a:	46bd      	mov	sp, r7
   12e9c:	bd80      	pop	{r7, pc}
   12e9e:	bf00      	nop
   12ea0:	41008000 	.word	0x41008000
   12ea4:	00012c27 	.word	0x00012c27
   12ea8:	00012dab 	.word	0x00012dab
   12eac:	00012c01 	.word	0x00012c01
   12eb0:	000142f4 	.word	0x000142f4
   12eb4:	000040dd 	.word	0x000040dd

00012eb8 <_gpio_set_level>:
{
   12eb8:	b580      	push	{r7, lr}
   12eba:	b082      	sub	sp, #8
   12ebc:	af00      	add	r7, sp, #0
   12ebe:	4603      	mov	r3, r0
   12ec0:	6039      	str	r1, [r7, #0]
   12ec2:	71fb      	strb	r3, [r7, #7]
   12ec4:	4613      	mov	r3, r2
   12ec6:	71bb      	strb	r3, [r7, #6]
	if (level) {
   12ec8:	79bb      	ldrb	r3, [r7, #6]
   12eca:	2b00      	cmp	r3, #0
   12ecc:	d006      	beq.n	12edc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   12ece:	79fb      	ldrb	r3, [r7, #7]
   12ed0:	683a      	ldr	r2, [r7, #0]
   12ed2:	4619      	mov	r1, r3
   12ed4:	4806      	ldr	r0, [pc, #24]	; (12ef0 <_gpio_set_level+0x38>)
   12ed6:	4b07      	ldr	r3, [pc, #28]	; (12ef4 <_gpio_set_level+0x3c>)
   12ed8:	4798      	blx	r3
}
   12eda:	e005      	b.n	12ee8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   12edc:	79fb      	ldrb	r3, [r7, #7]
   12ede:	683a      	ldr	r2, [r7, #0]
   12ee0:	4619      	mov	r1, r3
   12ee2:	4803      	ldr	r0, [pc, #12]	; (12ef0 <_gpio_set_level+0x38>)
   12ee4:	4b04      	ldr	r3, [pc, #16]	; (12ef8 <_gpio_set_level+0x40>)
   12ee6:	4798      	blx	r3
}
   12ee8:	bf00      	nop
   12eea:	3708      	adds	r7, #8
   12eec:	46bd      	mov	sp, r7
   12eee:	bd80      	pop	{r7, pc}
   12ef0:	41008000 	.word	0x41008000
   12ef4:	00012c4d 	.word	0x00012c4d
   12ef8:	00012c73 	.word	0x00012c73

00012efc <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   12efc:	b590      	push	{r4, r7, lr}
   12efe:	b085      	sub	sp, #20
   12f00:	af00      	add	r7, sp, #0
   12f02:	6078      	str	r0, [r7, #4]
   12f04:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   12f06:	687b      	ldr	r3, [r7, #4]
   12f08:	095b      	lsrs	r3, r3, #5
   12f0a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   12f0c:	687b      	ldr	r3, [r7, #4]
   12f0e:	b2db      	uxtb	r3, r3
   12f10:	f003 031f 	and.w	r3, r3, #31
   12f14:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   12f16:	683b      	ldr	r3, [r7, #0]
   12f18:	f1b3 3fff 	cmp.w	r3, #4294967295
   12f1c:	d106      	bne.n	12f2c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   12f1e:	7bba      	ldrb	r2, [r7, #14]
   12f20:	7bf9      	ldrb	r1, [r7, #15]
   12f22:	2300      	movs	r3, #0
   12f24:	4812      	ldr	r0, [pc, #72]	; (12f70 <_gpio_set_pin_function+0x74>)
   12f26:	4c13      	ldr	r4, [pc, #76]	; (12f74 <_gpio_set_pin_function+0x78>)
   12f28:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   12f2a:	e01d      	b.n	12f68 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   12f2c:	7bba      	ldrb	r2, [r7, #14]
   12f2e:	7bf9      	ldrb	r1, [r7, #15]
   12f30:	2301      	movs	r3, #1
   12f32:	480f      	ldr	r0, [pc, #60]	; (12f70 <_gpio_set_pin_function+0x74>)
   12f34:	4c0f      	ldr	r4, [pc, #60]	; (12f74 <_gpio_set_pin_function+0x78>)
   12f36:	47a0      	blx	r4
		if (pin & 1) {
   12f38:	7bbb      	ldrb	r3, [r7, #14]
   12f3a:	f003 0301 	and.w	r3, r3, #1
   12f3e:	2b00      	cmp	r3, #0
   12f40:	d009      	beq.n	12f56 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   12f42:	7bbb      	ldrb	r3, [r7, #14]
   12f44:	105b      	asrs	r3, r3, #1
   12f46:	b2da      	uxtb	r2, r3
   12f48:	683b      	ldr	r3, [r7, #0]
   12f4a:	b2db      	uxtb	r3, r3
   12f4c:	7bf9      	ldrb	r1, [r7, #15]
   12f4e:	4808      	ldr	r0, [pc, #32]	; (12f70 <_gpio_set_pin_function+0x74>)
   12f50:	4c09      	ldr	r4, [pc, #36]	; (12f78 <_gpio_set_pin_function+0x7c>)
   12f52:	47a0      	blx	r4
}
   12f54:	e008      	b.n	12f68 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   12f56:	7bbb      	ldrb	r3, [r7, #14]
   12f58:	105b      	asrs	r3, r3, #1
   12f5a:	b2da      	uxtb	r2, r3
   12f5c:	683b      	ldr	r3, [r7, #0]
   12f5e:	b2db      	uxtb	r3, r3
   12f60:	7bf9      	ldrb	r1, [r7, #15]
   12f62:	4803      	ldr	r0, [pc, #12]	; (12f70 <_gpio_set_pin_function+0x74>)
   12f64:	4c05      	ldr	r4, [pc, #20]	; (12f7c <_gpio_set_pin_function+0x80>)
   12f66:	47a0      	blx	r4
}
   12f68:	bf00      	nop
   12f6a:	3714      	adds	r7, #20
   12f6c:	46bd      	mov	sp, r7
   12f6e:	bd90      	pop	{r4, r7, pc}
   12f70:	41008000 	.word	0x41008000
   12f74:	00012d53 	.word	0x00012d53
   12f78:	00012cf7 	.word	0x00012cf7
   12f7c:	00012c99 	.word	0x00012c99

00012f80 <gpio_set_pin_function>:
{
   12f80:	b580      	push	{r7, lr}
   12f82:	b082      	sub	sp, #8
   12f84:	af00      	add	r7, sp, #0
   12f86:	6078      	str	r0, [r7, #4]
   12f88:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   12f8a:	6839      	ldr	r1, [r7, #0]
   12f8c:	6878      	ldr	r0, [r7, #4]
   12f8e:	4b03      	ldr	r3, [pc, #12]	; (12f9c <gpio_set_pin_function+0x1c>)
   12f90:	4798      	blx	r3
}
   12f92:	bf00      	nop
   12f94:	3708      	adds	r7, #8
   12f96:	46bd      	mov	sp, r7
   12f98:	bd80      	pop	{r7, pc}
   12f9a:	bf00      	nop
   12f9c:	00012efd 	.word	0x00012efd

00012fa0 <gpio_set_pin_direction>:
{
   12fa0:	b580      	push	{r7, lr}
   12fa2:	b082      	sub	sp, #8
   12fa4:	af00      	add	r7, sp, #0
   12fa6:	4603      	mov	r3, r0
   12fa8:	460a      	mov	r2, r1
   12faa:	71fb      	strb	r3, [r7, #7]
   12fac:	4613      	mov	r3, r2
   12fae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   12fb0:	79fb      	ldrb	r3, [r7, #7]
   12fb2:	115b      	asrs	r3, r3, #5
   12fb4:	b2d8      	uxtb	r0, r3
   12fb6:	79fb      	ldrb	r3, [r7, #7]
   12fb8:	f003 031f 	and.w	r3, r3, #31
   12fbc:	2201      	movs	r2, #1
   12fbe:	fa02 f303 	lsl.w	r3, r2, r3
   12fc2:	79ba      	ldrb	r2, [r7, #6]
   12fc4:	4619      	mov	r1, r3
   12fc6:	4b03      	ldr	r3, [pc, #12]	; (12fd4 <gpio_set_pin_direction+0x34>)
   12fc8:	4798      	blx	r3
}
   12fca:	bf00      	nop
   12fcc:	3708      	adds	r7, #8
   12fce:	46bd      	mov	sp, r7
   12fd0:	bd80      	pop	{r7, pc}
   12fd2:	bf00      	nop
   12fd4:	00012dd1 	.word	0x00012dd1

00012fd8 <gpio_set_pin_level>:
{
   12fd8:	b580      	push	{r7, lr}
   12fda:	b082      	sub	sp, #8
   12fdc:	af00      	add	r7, sp, #0
   12fde:	4603      	mov	r3, r0
   12fe0:	460a      	mov	r2, r1
   12fe2:	71fb      	strb	r3, [r7, #7]
   12fe4:	4613      	mov	r3, r2
   12fe6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   12fe8:	79fb      	ldrb	r3, [r7, #7]
   12fea:	115b      	asrs	r3, r3, #5
   12fec:	b2d8      	uxtb	r0, r3
   12fee:	79fb      	ldrb	r3, [r7, #7]
   12ff0:	f003 031f 	and.w	r3, r3, #31
   12ff4:	2201      	movs	r2, #1
   12ff6:	fa02 f303 	lsl.w	r3, r2, r3
   12ffa:	79ba      	ldrb	r2, [r7, #6]
   12ffc:	4619      	mov	r1, r3
   12ffe:	4b03      	ldr	r3, [pc, #12]	; (1300c <gpio_set_pin_level+0x34>)
   13000:	4798      	blx	r3
}
   13002:	bf00      	nop
   13004:	3708      	adds	r7, #8
   13006:	46bd      	mov	sp, r7
   13008:	bd80      	pop	{r7, pc}
   1300a:	bf00      	nop
   1300c:	00012eb9 	.word	0x00012eb9

00013010 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	b082      	sub	sp, #8
   13014:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   13016:	2100      	movs	r1, #0
   13018:	2008      	movs	r0, #8
   1301a:	4b24      	ldr	r3, [pc, #144]	; (130ac <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   1301c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   1301e:	2100      	movs	r1, #0
   13020:	202b      	movs	r0, #43	; 0x2b
   13022:	4b22      	ldr	r3, [pc, #136]	; (130ac <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   13024:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   13026:	2100      	movs	r1, #0
   13028:	202a      	movs	r0, #42	; 0x2a
   1302a:	4b20      	ldr	r3, [pc, #128]	; (130ac <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   1302c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   1302e:	2102      	movs	r1, #2
   13030:	2008      	movs	r0, #8
   13032:	4b1f      	ldr	r3, [pc, #124]	; (130b0 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   13034:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   13036:	2102      	movs	r1, #2
   13038:	202b      	movs	r0, #43	; 0x2b
   1303a:	4b1d      	ldr	r3, [pc, #116]	; (130b0 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   1303c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   1303e:	2102      	movs	r1, #2
   13040:	202a      	movs	r0, #42	; 0x2a
   13042:	4b1b      	ldr	r3, [pc, #108]	; (130b0 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   13044:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   13046:	2101      	movs	r1, #1
   13048:	2008      	movs	r0, #8
   1304a:	4b1a      	ldr	r3, [pc, #104]	; (130b4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1304c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   1304e:	2100      	movs	r1, #0
   13050:	202b      	movs	r0, #43	; 0x2b
   13052:	4b18      	ldr	r3, [pc, #96]	; (130b4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   13054:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   13056:	2100      	movs	r1, #0
   13058:	202a      	movs	r0, #42	; 0x2a
   1305a:	4b16      	ldr	r3, [pc, #88]	; (130b4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1305c:	4798      	blx	r3

	delay_us(1);
   1305e:	2001      	movs	r0, #1
   13060:	4b15      	ldr	r3, [pc, #84]	; (130b8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   13062:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   13064:	2300      	movs	r3, #0
   13066:	607b      	str	r3, [r7, #4]
   13068:	687b      	ldr	r3, [r7, #4]
   1306a:	2b06      	cmp	r3, #6
   1306c:	dc11      	bgt.n	13092 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   1306e:	2101      	movs	r1, #1
   13070:	202a      	movs	r0, #42	; 0x2a
   13072:	4b10      	ldr	r3, [pc, #64]	; (130b4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   13074:	4798      	blx	r3
		delay_us(1);
   13076:	2001      	movs	r0, #1
   13078:	4b0f      	ldr	r3, [pc, #60]	; (130b8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1307a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   1307c:	2100      	movs	r1, #0
   1307e:	202a      	movs	r0, #42	; 0x2a
   13080:	4b0c      	ldr	r3, [pc, #48]	; (130b4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   13082:	4798      	blx	r3
		delay_us(1);
   13084:	2001      	movs	r0, #1
   13086:	4b0c      	ldr	r3, [pc, #48]	; (130b8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   13088:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   1308a:	687b      	ldr	r3, [r7, #4]
   1308c:	3301      	adds	r3, #1
   1308e:	607b      	str	r3, [r7, #4]
   13090:	e7ea      	b.n	13068 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   13092:	2101      	movs	r1, #1
   13094:	202b      	movs	r0, #43	; 0x2b
   13096:	4b07      	ldr	r3, [pc, #28]	; (130b4 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   13098:	4798      	blx	r3
	delay_us(1);
   1309a:	2001      	movs	r0, #1
   1309c:	4b06      	ldr	r3, [pc, #24]	; (130b8 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1309e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   130a0:	4b06      	ldr	r3, [pc, #24]	; (130bc <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   130a2:	4798      	blx	r3
}
   130a4:	bf00      	nop
   130a6:	3708      	adds	r7, #8
   130a8:	46bd      	mov	sp, r7
   130aa:	bd80      	pop	{r7, pc}
   130ac:	00012f81 	.word	0x00012f81
   130b0:	00012fa1 	.word	0x00012fa1
   130b4:	00012fd9 	.word	0x00012fd9
   130b8:	00002a4d 	.word	0x00002a4d
   130bc:	00001da9 	.word	0x00001da9

000130c0 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   130c0:	b480      	push	{r7}
   130c2:	b083      	sub	sp, #12
   130c4:	af00      	add	r7, sp, #0
   130c6:	6078      	str	r0, [r7, #4]
   130c8:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	683a      	ldr	r2, [r7, #0]
   130ce:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   130d0:	687b      	ldr	r3, [r7, #4]
   130d2:	4a04      	ldr	r2, [pc, #16]	; (130e4 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   130d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   130d8:	687b      	ldr	r3, [r7, #4]
   130da:	4618      	mov	r0, r3
   130dc:	370c      	adds	r7, #12
   130de:	46bd      	mov	sp, r7
   130e0:	bc80      	pop	{r7}
   130e2:	4770      	bx	lr
   130e4:	001fff00 	.word	0x001fff00

000130e8 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   130e8:	b480      	push	{r7}
   130ea:	b083      	sub	sp, #12
   130ec:	af00      	add	r7, sp, #0
   130ee:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   130f0:	687b      	ldr	r3, [r7, #4]
   130f2:	4618      	mov	r0, r3
   130f4:	370c      	adds	r7, #12
   130f6:	46bd      	mov	sp, r7
   130f8:	bc80      	pop	{r7}
   130fa:	4770      	bx	lr

000130fc <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   130fc:	b580      	push	{r7, lr}
   130fe:	b082      	sub	sp, #8
   13100:	af00      	add	r7, sp, #0
   13102:	6078      	str	r0, [r7, #4]
	xferDone=false;
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	2200      	movs	r2, #0
   13108:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   1310a:	6878      	ldr	r0, [r7, #4]
   1310c:	4b04      	ldr	r3, [pc, #16]	; (13120 <_ZN13N25Q256_Class4InitEv+0x24>)
   1310e:	4798      	blx	r3
	return SelfTest();
   13110:	6878      	ldr	r0, [r7, #4]
   13112:	4b04      	ldr	r3, [pc, #16]	; (13124 <_ZN13N25Q256_Class4InitEv+0x28>)
   13114:	4798      	blx	r3
   13116:	4603      	mov	r3, r0
}
   13118:	4618      	mov	r0, r3
   1311a:	3708      	adds	r7, #8
   1311c:	46bd      	mov	sp, r7
   1311e:	bd80      	pop	{r7, pc}
   13120:	00013129 	.word	0x00013129
   13124:	000132c5 	.word	0x000132c5

00013128 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   13128:	b590      	push	{r4, r7, lr}
   1312a:	b083      	sub	sp, #12
   1312c:	af00      	add	r7, sp, #0
   1312e:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   13130:	687b      	ldr	r3, [r7, #4]
   13132:	685b      	ldr	r3, [r3, #4]
   13134:	4618      	mov	r0, r3
   13136:	4b08      	ldr	r3, [pc, #32]	; (13158 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   13138:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   1313a:	687b      	ldr	r3, [r7, #4]
   1313c:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   1313e:	2300      	movs	r3, #0
   13140:	4a06      	ldr	r2, [pc, #24]	; (1315c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   13142:	4807      	ldr	r0, [pc, #28]	; (13160 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   13144:	4c07      	ldr	r4, [pc, #28]	; (13164 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   13146:	47a0      	blx	r4
   13148:	4602      	mov	r2, r0
   1314a:	687b      	ldr	r3, [r7, #4]
   1314c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   13150:	bf00      	nop
   13152:	370c      	adds	r7, #12
   13154:	46bd      	mov	sp, r7
   13156:	bd90      	pop	{r4, r7, pc}
   13158:	00002f85 	.word	0x00002f85
   1315c:	00013011 	.word	0x00013011
   13160:	20009b80 	.word	0x20009b80
   13164:	0000c145 	.word	0x0000c145

00013168 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   13168:	b580      	push	{r7, lr}
   1316a:	b084      	sub	sp, #16
   1316c:	af00      	add	r7, sp, #0
   1316e:	6078      	str	r0, [r7, #4]
   13170:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   13172:	687b      	ldr	r3, [r7, #4]
   13174:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   13178:	685b      	ldr	r3, [r3, #4]
   1317a:	689b      	ldr	r3, [r3, #8]
   1317c:	687a      	ldr	r2, [r7, #4]
   1317e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   13182:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   13186:	6839      	ldr	r1, [r7, #0]
   13188:	4798      	blx	r3
   1318a:	4603      	mov	r3, r0
   1318c:	60fb      	str	r3, [r7, #12]
	return	e;
   1318e:	68fb      	ldr	r3, [r7, #12]
}
   13190:	4618      	mov	r0, r3
   13192:	3710      	adds	r7, #16
   13194:	46bd      	mov	sp, r7
   13196:	bd80      	pop	{r7, pc}

00013198 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   13198:	b590      	push	{r4, r7, lr}
   1319a:	b087      	sub	sp, #28
   1319c:	af00      	add	r7, sp, #0
   1319e:	60f8      	str	r0, [r7, #12]
   131a0:	60b9      	str	r1, [r7, #8]
   131a2:	607a      	str	r2, [r7, #4]
   131a4:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   131a6:	68fb      	ldr	r3, [r7, #12]
   131a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   131ac:	685b      	ldr	r3, [r3, #4]
   131ae:	685c      	ldr	r4, [r3, #4]
   131b0:	68fb      	ldr	r3, [r7, #12]
   131b2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   131b6:	683b      	ldr	r3, [r7, #0]
   131b8:	687a      	ldr	r2, [r7, #4]
   131ba:	68b9      	ldr	r1, [r7, #8]
   131bc:	47a0      	blx	r4
   131be:	4603      	mov	r3, r0
   131c0:	617b      	str	r3, [r7, #20]
	return	w;
   131c2:	697b      	ldr	r3, [r7, #20]
}
   131c4:	4618      	mov	r0, r3
   131c6:	371c      	adds	r7, #28
   131c8:	46bd      	mov	sp, r7
   131ca:	bd90      	pop	{r4, r7, pc}

000131cc <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   131cc:	b590      	push	{r4, r7, lr}
   131ce:	b087      	sub	sp, #28
   131d0:	af00      	add	r7, sp, #0
   131d2:	60f8      	str	r0, [r7, #12]
   131d4:	60b9      	str	r1, [r7, #8]
   131d6:	607a      	str	r2, [r7, #4]
   131d8:	603b      	str	r3, [r7, #0]
	xferDone=false;
   131da:	68fb      	ldr	r3, [r7, #12]
   131dc:	2200      	movs	r2, #0
   131de:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   131e0:	68fb      	ldr	r3, [r7, #12]
   131e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   131e6:	685b      	ldr	r3, [r3, #4]
   131e8:	681c      	ldr	r4, [r3, #0]
   131ea:	68fb      	ldr	r3, [r7, #12]
   131ec:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   131f0:	683b      	ldr	r3, [r7, #0]
   131f2:	687a      	ldr	r2, [r7, #4]
   131f4:	68b9      	ldr	r1, [r7, #8]
   131f6:	47a0      	blx	r4
   131f8:	4603      	mov	r3, r0
   131fa:	617b      	str	r3, [r7, #20]
	return	r;
   131fc:	697b      	ldr	r3, [r7, #20]
}
   131fe:	4618      	mov	r0, r3
   13200:	371c      	adds	r7, #28
   13202:	46bd      	mov	sp, r7
   13204:	bd90      	pop	{r4, r7, pc}
	...

00013208 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   13208:	b580      	push	{r7, lr}
   1320a:	b082      	sub	sp, #8
   1320c:	af00      	add	r7, sp, #0
   1320e:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   13210:	687a      	ldr	r2, [r7, #4]
   13212:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   13216:	f043 0310 	orr.w	r3, r3, #16
   1321a:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   1321e:	687a      	ldr	r2, [r7, #4]
   13220:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   13224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13228:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   1322c:	687a      	ldr	r2, [r7, #4]
   1322e:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   13232:	f36f 1305 	bfc	r3, #4, #2
   13236:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   1323a:	687b      	ldr	r3, [r7, #4]
   1323c:	2205      	movs	r2, #5
   1323e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   13242:	687b      	ldr	r3, [r7, #4]
   13244:	2201      	movs	r2, #1
   13246:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	f203 2212 	addw	r2, r3, #530	; 0x212
   13250:	687b      	ldr	r3, [r7, #4]
   13252:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   13256:	687b      	ldr	r3, [r7, #4]
   13258:	685a      	ldr	r2, [r3, #4]
   1325a:	687b      	ldr	r3, [r7, #4]
   1325c:	f503 7305 	add.w	r3, r3, #532	; 0x214
   13260:	4619      	mov	r1, r3
   13262:	4610      	mov	r0, r2
   13264:	4b04      	ldr	r3, [pc, #16]	; (13278 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   13266:	4798      	blx	r3
		return status;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   1326e:	4618      	mov	r0, r3
   13270:	3708      	adds	r7, #8
   13272:	46bd      	mov	sp, r7
   13274:	bd80      	pop	{r7, pc}
   13276:	bf00      	nop
   13278:	00002ffd 	.word	0x00002ffd

0001327c <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   1327c:	b580      	push	{r7, lr}
   1327e:	b082      	sub	sp, #8
   13280:	af00      	add	r7, sp, #0
   13282:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   13284:	6878      	ldr	r0, [r7, #4]
   13286:	4b0e      	ldr	r3, [pc, #56]	; (132c0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   13288:	4798      	blx	r3
   1328a:	4603      	mov	r3, r0
   1328c:	461a      	mov	r2, r3
   1328e:	687b      	ldr	r3, [r7, #4]
   13290:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1329a:	f003 0301 	and.w	r3, r3, #1
   1329e:	2b00      	cmp	r3, #0
   132a0:	d000      	beq.n	132a4 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   132a2:	e7ef      	b.n	13284 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   132a4:	687b      	ldr	r3, [r7, #4]
   132a6:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   132aa:	f003 0301 	and.w	r3, r3, #1
   132ae:	2b00      	cmp	r3, #0
   132b0:	bf0c      	ite	eq
   132b2:	2301      	moveq	r3, #1
   132b4:	2300      	movne	r3, #0
   132b6:	b2db      	uxtb	r3, r3
}
   132b8:	4618      	mov	r0, r3
   132ba:	3708      	adds	r7, #8
   132bc:	46bd      	mov	sp, r7
   132be:	bd80      	pop	{r7, pc}
   132c0:	00013209 	.word	0x00013209

000132c4 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   132c4:	b590      	push	{r4, r7, lr}
   132c6:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   132ca:	b085      	sub	sp, #20
   132cc:	af00      	add	r7, sp, #0
   132ce:	f107 0310 	add.w	r3, r7, #16
   132d2:	3b0c      	subs	r3, #12
   132d4:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   132d6:	f107 0310 	add.w	r3, r7, #16
   132da:	3b0c      	subs	r3, #12
   132dc:	681b      	ldr	r3, [r3, #0]
   132de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   132e2:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   132e6:	f107 0310 	add.w	r3, r7, #16
   132ea:	3b0c      	subs	r3, #12
   132ec:	681b      	ldr	r3, [r3, #0]
   132ee:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   132f2:	f107 0110 	add.w	r1, r7, #16
   132f6:	3904      	subs	r1, #4
   132f8:	f107 0010 	add.w	r0, r7, #16
   132fc:	380c      	subs	r0, #12
   132fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   13302:	6800      	ldr	r0, [r0, #0]
   13304:	4c4b      	ldr	r4, [pc, #300]	; (13434 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   13306:	47a0      	blx	r4
	WaitOnBusy();
   13308:	f107 0310 	add.w	r3, r7, #16
   1330c:	3b0c      	subs	r3, #12
   1330e:	6818      	ldr	r0, [r3, #0]
   13310:	4b49      	ldr	r3, [pc, #292]	; (13438 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   13312:	4798      	blx	r3
	Erase(currentAddress);
   13314:	f107 0310 	add.w	r3, r7, #16
   13318:	3b0c      	subs	r3, #12
   1331a:	681b      	ldr	r3, [r3, #0]
   1331c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   13320:	f107 0310 	add.w	r3, r7, #16
   13324:	3b0c      	subs	r3, #12
   13326:	4611      	mov	r1, r2
   13328:	6818      	ldr	r0, [r3, #0]
   1332a:	4b44      	ldr	r3, [pc, #272]	; (1343c <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   1332c:	4798      	blx	r3
	WaitOnBusy();
   1332e:	f107 0310 	add.w	r3, r7, #16
   13332:	3b0c      	subs	r3, #12
   13334:	6818      	ldr	r0, [r3, #0]
   13336:	4b40      	ldr	r3, [pc, #256]	; (13438 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   13338:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   1333a:	f107 0310 	add.w	r3, r7, #16
   1333e:	3b0c      	subs	r3, #12
   13340:	681b      	ldr	r3, [r3, #0]
   13342:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   13346:	f107 0110 	add.w	r1, r7, #16
   1334a:	3904      	subs	r1, #4
   1334c:	f107 0010 	add.w	r0, r7, #16
   13350:	380c      	subs	r0, #12
   13352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   13356:	6800      	ldr	r0, [r0, #0]
   13358:	4c39      	ldr	r4, [pc, #228]	; (13440 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   1335a:	47a0      	blx	r4
	WaitOnBusy();
   1335c:	f107 0310 	add.w	r3, r7, #16
   13360:	3b0c      	subs	r3, #12
   13362:	6818      	ldr	r0, [r3, #0]
   13364:	4b34      	ldr	r3, [pc, #208]	; (13438 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   13366:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   13368:	f107 0310 	add.w	r3, r7, #16
   1336c:	3b0c      	subs	r3, #12
   1336e:	681b      	ldr	r3, [r3, #0]
   13370:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   13374:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   13378:	f101 0110 	add.w	r1, r1, #16
   1337c:	3904      	subs	r1, #4
   1337e:	f107 0010 	add.w	r0, r7, #16
   13382:	380c      	subs	r0, #12
   13384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   13388:	6800      	ldr	r0, [r0, #0]
   1338a:	4c2a      	ldr	r4, [pc, #168]	; (13434 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   1338c:	47a0      	blx	r4
	WaitOnBusy();
   1338e:	f107 0310 	add.w	r3, r7, #16
   13392:	3b0c      	subs	r3, #12
   13394:	6818      	ldr	r0, [r3, #0]
   13396:	4b28      	ldr	r3, [pc, #160]	; (13438 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   13398:	4798      	blx	r3
	isOK	 = true;
   1339a:	f107 0310 	add.w	r3, r7, #16
   1339e:	3b0c      	subs	r3, #12
   133a0:	681b      	ldr	r3, [r3, #0]
   133a2:	2201      	movs	r2, #1
   133a4:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   133a8:	2300      	movs	r3, #0
   133aa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   133ae:	f102 020c 	add.w	r2, r2, #12
   133b2:	6013      	str	r3, [r2, #0]
   133b4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   133b8:	f103 030c 	add.w	r3, r3, #12
   133bc:	681b      	ldr	r3, [r3, #0]
   133be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   133c2:	da2b      	bge.n	1341c <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   133c4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   133c8:	f103 0310 	add.w	r3, r3, #16
   133cc:	3b04      	subs	r3, #4
   133ce:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   133d2:	f102 020c 	add.w	r2, r2, #12
   133d6:	6812      	ldr	r2, [r2, #0]
   133d8:	4413      	add	r3, r2
   133da:	781a      	ldrb	r2, [r3, #0]
   133dc:	f107 0310 	add.w	r3, r7, #16
   133e0:	3b04      	subs	r3, #4
   133e2:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   133e6:	f101 010c 	add.w	r1, r1, #12
   133ea:	6809      	ldr	r1, [r1, #0]
   133ec:	440b      	add	r3, r1
   133ee:	781b      	ldrb	r3, [r3, #0]
   133f0:	429a      	cmp	r2, r3
   133f2:	d007      	beq.n	13404 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   133f4:	f107 0310 	add.w	r3, r7, #16
   133f8:	3b0c      	subs	r3, #12
   133fa:	681b      	ldr	r3, [r3, #0]
   133fc:	2200      	movs	r2, #0
   133fe:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   13402:	e00b      	b.n	1341c <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   13404:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   13408:	f103 030c 	add.w	r3, r3, #12
   1340c:	681b      	ldr	r3, [r3, #0]
   1340e:	3301      	adds	r3, #1
   13410:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   13414:	f102 020c 	add.w	r2, r2, #12
   13418:	6013      	str	r3, [r2, #0]
   1341a:	e7cb      	b.n	133b4 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   1341c:	f107 0310 	add.w	r3, r7, #16
   13420:	3b0c      	subs	r3, #12
   13422:	681b      	ldr	r3, [r3, #0]
   13424:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   13428:	4618      	mov	r0, r3
   1342a:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   1342e:	3714      	adds	r7, #20
   13430:	46bd      	mov	sp, r7
   13432:	bd90      	pop	{r4, r7, pc}
   13434:	000131cd 	.word	0x000131cd
   13438:	0001327d 	.word	0x0001327d
   1343c:	00013169 	.word	0x00013169
   13440:	00013199 	.word	0x00013199

00013444 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   13444:	b580      	push	{r7, lr}
   13446:	b082      	sub	sp, #8
   13448:	af00      	add	r7, sp, #0
   1344a:	6078      	str	r0, [r7, #4]
   1344c:	6039      	str	r1, [r7, #0]
   1344e:	687b      	ldr	r3, [r7, #4]
   13450:	2b01      	cmp	r3, #1
   13452:	d10d      	bne.n	13470 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13454:	683b      	ldr	r3, [r7, #0]
   13456:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1345a:	4293      	cmp	r3, r2
   1345c:	d108      	bne.n	13470 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1345e:	4906      	ldr	r1, [pc, #24]	; (13478 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13460:	4806      	ldr	r0, [pc, #24]	; (1347c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13462:	4b07      	ldr	r3, [pc, #28]	; (13480 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13464:	4798      	blx	r3
   13466:	4a07      	ldr	r2, [pc, #28]	; (13484 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13468:	4907      	ldr	r1, [pc, #28]	; (13488 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1346a:	4804      	ldr	r0, [pc, #16]	; (1347c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1346c:	4b07      	ldr	r3, [pc, #28]	; (1348c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1346e:	4798      	blx	r3
   13470:	bf00      	nop
   13472:	3708      	adds	r7, #8
   13474:	46bd      	mov	sp, r7
   13476:	bd80      	pop	{r7, pc}
   13478:	20009e50 	.word	0x20009e50
   1347c:	20009b90 	.word	0x20009b90
   13480:	000130c1 	.word	0x000130c1
   13484:	20000000 	.word	0x20000000
   13488:	000130e9 	.word	0x000130e9
   1348c:	000134a5 	.word	0x000134a5

00013490 <_GLOBAL__sub_I_ptrN25Q256Class>:
   13490:	b580      	push	{r7, lr}
   13492:	af00      	add	r7, sp, #0
   13494:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13498:	2001      	movs	r0, #1
   1349a:	4b01      	ldr	r3, [pc, #4]	; (134a0 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   1349c:	4798      	blx	r3
   1349e:	bd80      	pop	{r7, pc}
   134a0:	00013445 	.word	0x00013445

000134a4 <__aeabi_atexit>:
   134a4:	460b      	mov	r3, r1
   134a6:	4601      	mov	r1, r0
   134a8:	4618      	mov	r0, r3
   134aa:	f000 ba7f 	b.w	139ac <__cxa_atexit>
   134ae:	bf00      	nop

000134b0 <__aeabi_frsub>:
   134b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   134b4:	e002      	b.n	134bc <__addsf3>
   134b6:	bf00      	nop

000134b8 <__aeabi_fsub>:
   134b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000134bc <__addsf3>:
   134bc:	0042      	lsls	r2, r0, #1
   134be:	bf1f      	itttt	ne
   134c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   134c4:	ea92 0f03 	teqne	r2, r3
   134c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   134cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   134d0:	d06a      	beq.n	135a8 <__addsf3+0xec>
   134d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   134d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   134da:	bfc1      	itttt	gt
   134dc:	18d2      	addgt	r2, r2, r3
   134de:	4041      	eorgt	r1, r0
   134e0:	4048      	eorgt	r0, r1
   134e2:	4041      	eorgt	r1, r0
   134e4:	bfb8      	it	lt
   134e6:	425b      	neglt	r3, r3
   134e8:	2b19      	cmp	r3, #25
   134ea:	bf88      	it	hi
   134ec:	4770      	bxhi	lr
   134ee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   134f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   134f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   134fa:	bf18      	it	ne
   134fc:	4240      	negne	r0, r0
   134fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13502:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   13506:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1350a:	bf18      	it	ne
   1350c:	4249      	negne	r1, r1
   1350e:	ea92 0f03 	teq	r2, r3
   13512:	d03f      	beq.n	13594 <__addsf3+0xd8>
   13514:	f1a2 0201 	sub.w	r2, r2, #1
   13518:	fa41 fc03 	asr.w	ip, r1, r3
   1351c:	eb10 000c 	adds.w	r0, r0, ip
   13520:	f1c3 0320 	rsb	r3, r3, #32
   13524:	fa01 f103 	lsl.w	r1, r1, r3
   13528:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1352c:	d502      	bpl.n	13534 <__addsf3+0x78>
   1352e:	4249      	negs	r1, r1
   13530:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   13534:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13538:	d313      	bcc.n	13562 <__addsf3+0xa6>
   1353a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1353e:	d306      	bcc.n	1354e <__addsf3+0x92>
   13540:	0840      	lsrs	r0, r0, #1
   13542:	ea4f 0131 	mov.w	r1, r1, rrx
   13546:	f102 0201 	add.w	r2, r2, #1
   1354a:	2afe      	cmp	r2, #254	; 0xfe
   1354c:	d251      	bcs.n	135f2 <__addsf3+0x136>
   1354e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   13552:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13556:	bf08      	it	eq
   13558:	f020 0001 	biceq.w	r0, r0, #1
   1355c:	ea40 0003 	orr.w	r0, r0, r3
   13560:	4770      	bx	lr
   13562:	0049      	lsls	r1, r1, #1
   13564:	eb40 0000 	adc.w	r0, r0, r0
   13568:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1356c:	f1a2 0201 	sub.w	r2, r2, #1
   13570:	d1ed      	bne.n	1354e <__addsf3+0x92>
   13572:	fab0 fc80 	clz	ip, r0
   13576:	f1ac 0c08 	sub.w	ip, ip, #8
   1357a:	ebb2 020c 	subs.w	r2, r2, ip
   1357e:	fa00 f00c 	lsl.w	r0, r0, ip
   13582:	bfaa      	itet	ge
   13584:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   13588:	4252      	neglt	r2, r2
   1358a:	4318      	orrge	r0, r3
   1358c:	bfbc      	itt	lt
   1358e:	40d0      	lsrlt	r0, r2
   13590:	4318      	orrlt	r0, r3
   13592:	4770      	bx	lr
   13594:	f092 0f00 	teq	r2, #0
   13598:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1359c:	bf06      	itte	eq
   1359e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   135a2:	3201      	addeq	r2, #1
   135a4:	3b01      	subne	r3, #1
   135a6:	e7b5      	b.n	13514 <__addsf3+0x58>
   135a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   135ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   135b0:	bf18      	it	ne
   135b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   135b6:	d021      	beq.n	135fc <__addsf3+0x140>
   135b8:	ea92 0f03 	teq	r2, r3
   135bc:	d004      	beq.n	135c8 <__addsf3+0x10c>
   135be:	f092 0f00 	teq	r2, #0
   135c2:	bf08      	it	eq
   135c4:	4608      	moveq	r0, r1
   135c6:	4770      	bx	lr
   135c8:	ea90 0f01 	teq	r0, r1
   135cc:	bf1c      	itt	ne
   135ce:	2000      	movne	r0, #0
   135d0:	4770      	bxne	lr
   135d2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   135d6:	d104      	bne.n	135e2 <__addsf3+0x126>
   135d8:	0040      	lsls	r0, r0, #1
   135da:	bf28      	it	cs
   135dc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   135e0:	4770      	bx	lr
   135e2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   135e6:	bf3c      	itt	cc
   135e8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   135ec:	4770      	bxcc	lr
   135ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   135f2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   135f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   135fa:	4770      	bx	lr
   135fc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   13600:	bf16      	itet	ne
   13602:	4608      	movne	r0, r1
   13604:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   13608:	4601      	movne	r1, r0
   1360a:	0242      	lsls	r2, r0, #9
   1360c:	bf06      	itte	eq
   1360e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   13612:	ea90 0f01 	teqeq	r0, r1
   13616:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1361a:	4770      	bx	lr

0001361c <__aeabi_ui2f>:
   1361c:	f04f 0300 	mov.w	r3, #0
   13620:	e004      	b.n	1362c <__aeabi_i2f+0x8>
   13622:	bf00      	nop

00013624 <__aeabi_i2f>:
   13624:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   13628:	bf48      	it	mi
   1362a:	4240      	negmi	r0, r0
   1362c:	ea5f 0c00 	movs.w	ip, r0
   13630:	bf08      	it	eq
   13632:	4770      	bxeq	lr
   13634:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   13638:	4601      	mov	r1, r0
   1363a:	f04f 0000 	mov.w	r0, #0
   1363e:	e01c      	b.n	1367a <__aeabi_l2f+0x2a>

00013640 <__aeabi_ul2f>:
   13640:	ea50 0201 	orrs.w	r2, r0, r1
   13644:	bf08      	it	eq
   13646:	4770      	bxeq	lr
   13648:	f04f 0300 	mov.w	r3, #0
   1364c:	e00a      	b.n	13664 <__aeabi_l2f+0x14>
   1364e:	bf00      	nop

00013650 <__aeabi_l2f>:
   13650:	ea50 0201 	orrs.w	r2, r0, r1
   13654:	bf08      	it	eq
   13656:	4770      	bxeq	lr
   13658:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1365c:	d502      	bpl.n	13664 <__aeabi_l2f+0x14>
   1365e:	4240      	negs	r0, r0
   13660:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13664:	ea5f 0c01 	movs.w	ip, r1
   13668:	bf02      	ittt	eq
   1366a:	4684      	moveq	ip, r0
   1366c:	4601      	moveq	r1, r0
   1366e:	2000      	moveq	r0, #0
   13670:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   13674:	bf08      	it	eq
   13676:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1367a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1367e:	fabc f28c 	clz	r2, ip
   13682:	3a08      	subs	r2, #8
   13684:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   13688:	db10      	blt.n	136ac <__aeabi_l2f+0x5c>
   1368a:	fa01 fc02 	lsl.w	ip, r1, r2
   1368e:	4463      	add	r3, ip
   13690:	fa00 fc02 	lsl.w	ip, r0, r2
   13694:	f1c2 0220 	rsb	r2, r2, #32
   13698:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1369c:	fa20 f202 	lsr.w	r2, r0, r2
   136a0:	eb43 0002 	adc.w	r0, r3, r2
   136a4:	bf08      	it	eq
   136a6:	f020 0001 	biceq.w	r0, r0, #1
   136aa:	4770      	bx	lr
   136ac:	f102 0220 	add.w	r2, r2, #32
   136b0:	fa01 fc02 	lsl.w	ip, r1, r2
   136b4:	f1c2 0220 	rsb	r2, r2, #32
   136b8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   136bc:	fa21 f202 	lsr.w	r2, r1, r2
   136c0:	eb43 0002 	adc.w	r0, r3, r2
   136c4:	bf08      	it	eq
   136c6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   136ca:	4770      	bx	lr

000136cc <__aeabi_fmul>:
   136cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   136d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   136d4:	bf1e      	ittt	ne
   136d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   136da:	ea92 0f0c 	teqne	r2, ip
   136de:	ea93 0f0c 	teqne	r3, ip
   136e2:	d06f      	beq.n	137c4 <__aeabi_fmul+0xf8>
   136e4:	441a      	add	r2, r3
   136e6:	ea80 0c01 	eor.w	ip, r0, r1
   136ea:	0240      	lsls	r0, r0, #9
   136ec:	bf18      	it	ne
   136ee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   136f2:	d01e      	beq.n	13732 <__aeabi_fmul+0x66>
   136f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   136f8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   136fc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   13700:	fba0 3101 	umull	r3, r1, r0, r1
   13704:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13708:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1370c:	bf3e      	ittt	cc
   1370e:	0049      	lslcc	r1, r1, #1
   13710:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   13714:	005b      	lslcc	r3, r3, #1
   13716:	ea40 0001 	orr.w	r0, r0, r1
   1371a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1371e:	2afd      	cmp	r2, #253	; 0xfd
   13720:	d81d      	bhi.n	1375e <__aeabi_fmul+0x92>
   13722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   13726:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1372a:	bf08      	it	eq
   1372c:	f020 0001 	biceq.w	r0, r0, #1
   13730:	4770      	bx	lr
   13732:	f090 0f00 	teq	r0, #0
   13736:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1373a:	bf08      	it	eq
   1373c:	0249      	lsleq	r1, r1, #9
   1373e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   13742:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   13746:	3a7f      	subs	r2, #127	; 0x7f
   13748:	bfc2      	ittt	gt
   1374a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1374e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13752:	4770      	bxgt	lr
   13754:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13758:	f04f 0300 	mov.w	r3, #0
   1375c:	3a01      	subs	r2, #1
   1375e:	dc5d      	bgt.n	1381c <__aeabi_fmul+0x150>
   13760:	f112 0f19 	cmn.w	r2, #25
   13764:	bfdc      	itt	le
   13766:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1376a:	4770      	bxle	lr
   1376c:	f1c2 0200 	rsb	r2, r2, #0
   13770:	0041      	lsls	r1, r0, #1
   13772:	fa21 f102 	lsr.w	r1, r1, r2
   13776:	f1c2 0220 	rsb	r2, r2, #32
   1377a:	fa00 fc02 	lsl.w	ip, r0, r2
   1377e:	ea5f 0031 	movs.w	r0, r1, rrx
   13782:	f140 0000 	adc.w	r0, r0, #0
   13786:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1378a:	bf08      	it	eq
   1378c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   13790:	4770      	bx	lr
   13792:	f092 0f00 	teq	r2, #0
   13796:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1379a:	bf02      	ittt	eq
   1379c:	0040      	lsleq	r0, r0, #1
   1379e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   137a2:	3a01      	subeq	r2, #1
   137a4:	d0f9      	beq.n	1379a <__aeabi_fmul+0xce>
   137a6:	ea40 000c 	orr.w	r0, r0, ip
   137aa:	f093 0f00 	teq	r3, #0
   137ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   137b2:	bf02      	ittt	eq
   137b4:	0049      	lsleq	r1, r1, #1
   137b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   137ba:	3b01      	subeq	r3, #1
   137bc:	d0f9      	beq.n	137b2 <__aeabi_fmul+0xe6>
   137be:	ea41 010c 	orr.w	r1, r1, ip
   137c2:	e78f      	b.n	136e4 <__aeabi_fmul+0x18>
   137c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   137c8:	ea92 0f0c 	teq	r2, ip
   137cc:	bf18      	it	ne
   137ce:	ea93 0f0c 	teqne	r3, ip
   137d2:	d00a      	beq.n	137ea <__aeabi_fmul+0x11e>
   137d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   137d8:	bf18      	it	ne
   137da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   137de:	d1d8      	bne.n	13792 <__aeabi_fmul+0xc6>
   137e0:	ea80 0001 	eor.w	r0, r0, r1
   137e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   137e8:	4770      	bx	lr
   137ea:	f090 0f00 	teq	r0, #0
   137ee:	bf17      	itett	ne
   137f0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   137f4:	4608      	moveq	r0, r1
   137f6:	f091 0f00 	teqne	r1, #0
   137fa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   137fe:	d014      	beq.n	1382a <__aeabi_fmul+0x15e>
   13800:	ea92 0f0c 	teq	r2, ip
   13804:	d101      	bne.n	1380a <__aeabi_fmul+0x13e>
   13806:	0242      	lsls	r2, r0, #9
   13808:	d10f      	bne.n	1382a <__aeabi_fmul+0x15e>
   1380a:	ea93 0f0c 	teq	r3, ip
   1380e:	d103      	bne.n	13818 <__aeabi_fmul+0x14c>
   13810:	024b      	lsls	r3, r1, #9
   13812:	bf18      	it	ne
   13814:	4608      	movne	r0, r1
   13816:	d108      	bne.n	1382a <__aeabi_fmul+0x15e>
   13818:	ea80 0001 	eor.w	r0, r0, r1
   1381c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13820:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13824:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13828:	4770      	bx	lr
   1382a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1382e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   13832:	4770      	bx	lr

00013834 <__aeabi_fdiv>:
   13834:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13838:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1383c:	bf1e      	ittt	ne
   1383e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   13842:	ea92 0f0c 	teqne	r2, ip
   13846:	ea93 0f0c 	teqne	r3, ip
   1384a:	d069      	beq.n	13920 <__aeabi_fdiv+0xec>
   1384c:	eba2 0203 	sub.w	r2, r2, r3
   13850:	ea80 0c01 	eor.w	ip, r0, r1
   13854:	0249      	lsls	r1, r1, #9
   13856:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1385a:	d037      	beq.n	138cc <__aeabi_fdiv+0x98>
   1385c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13860:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   13864:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   13868:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1386c:	428b      	cmp	r3, r1
   1386e:	bf38      	it	cc
   13870:	005b      	lslcc	r3, r3, #1
   13872:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   13876:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1387a:	428b      	cmp	r3, r1
   1387c:	bf24      	itt	cs
   1387e:	1a5b      	subcs	r3, r3, r1
   13880:	ea40 000c 	orrcs.w	r0, r0, ip
   13884:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   13888:	bf24      	itt	cs
   1388a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1388e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   13892:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   13896:	bf24      	itt	cs
   13898:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1389c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   138a0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   138a4:	bf24      	itt	cs
   138a6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   138aa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   138ae:	011b      	lsls	r3, r3, #4
   138b0:	bf18      	it	ne
   138b2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   138b6:	d1e0      	bne.n	1387a <__aeabi_fdiv+0x46>
   138b8:	2afd      	cmp	r2, #253	; 0xfd
   138ba:	f63f af50 	bhi.w	1375e <__aeabi_fmul+0x92>
   138be:	428b      	cmp	r3, r1
   138c0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   138c4:	bf08      	it	eq
   138c6:	f020 0001 	biceq.w	r0, r0, #1
   138ca:	4770      	bx	lr
   138cc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   138d0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   138d4:	327f      	adds	r2, #127	; 0x7f
   138d6:	bfc2      	ittt	gt
   138d8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   138dc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   138e0:	4770      	bxgt	lr
   138e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   138e6:	f04f 0300 	mov.w	r3, #0
   138ea:	3a01      	subs	r2, #1
   138ec:	e737      	b.n	1375e <__aeabi_fmul+0x92>
   138ee:	f092 0f00 	teq	r2, #0
   138f2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   138f6:	bf02      	ittt	eq
   138f8:	0040      	lsleq	r0, r0, #1
   138fa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   138fe:	3a01      	subeq	r2, #1
   13900:	d0f9      	beq.n	138f6 <__aeabi_fdiv+0xc2>
   13902:	ea40 000c 	orr.w	r0, r0, ip
   13906:	f093 0f00 	teq	r3, #0
   1390a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1390e:	bf02      	ittt	eq
   13910:	0049      	lsleq	r1, r1, #1
   13912:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   13916:	3b01      	subeq	r3, #1
   13918:	d0f9      	beq.n	1390e <__aeabi_fdiv+0xda>
   1391a:	ea41 010c 	orr.w	r1, r1, ip
   1391e:	e795      	b.n	1384c <__aeabi_fdiv+0x18>
   13920:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13924:	ea92 0f0c 	teq	r2, ip
   13928:	d108      	bne.n	1393c <__aeabi_fdiv+0x108>
   1392a:	0242      	lsls	r2, r0, #9
   1392c:	f47f af7d 	bne.w	1382a <__aeabi_fmul+0x15e>
   13930:	ea93 0f0c 	teq	r3, ip
   13934:	f47f af70 	bne.w	13818 <__aeabi_fmul+0x14c>
   13938:	4608      	mov	r0, r1
   1393a:	e776      	b.n	1382a <__aeabi_fmul+0x15e>
   1393c:	ea93 0f0c 	teq	r3, ip
   13940:	d104      	bne.n	1394c <__aeabi_fdiv+0x118>
   13942:	024b      	lsls	r3, r1, #9
   13944:	f43f af4c 	beq.w	137e0 <__aeabi_fmul+0x114>
   13948:	4608      	mov	r0, r1
   1394a:	e76e      	b.n	1382a <__aeabi_fmul+0x15e>
   1394c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   13950:	bf18      	it	ne
   13952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   13956:	d1ca      	bne.n	138ee <__aeabi_fdiv+0xba>
   13958:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1395c:	f47f af5c 	bne.w	13818 <__aeabi_fmul+0x14c>
   13960:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   13964:	f47f af3c 	bne.w	137e0 <__aeabi_fmul+0x114>
   13968:	e75f      	b.n	1382a <__aeabi_fmul+0x15e>
   1396a:	bf00      	nop

0001396c <__aeabi_f2uiz>:
   1396c:	0042      	lsls	r2, r0, #1
   1396e:	d20e      	bcs.n	1398e <__aeabi_f2uiz+0x22>
   13970:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   13974:	d30b      	bcc.n	1398e <__aeabi_f2uiz+0x22>
   13976:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1397a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1397e:	d409      	bmi.n	13994 <__aeabi_f2uiz+0x28>
   13980:	ea4f 2300 	mov.w	r3, r0, lsl #8
   13984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13988:	fa23 f002 	lsr.w	r0, r3, r2
   1398c:	4770      	bx	lr
   1398e:	f04f 0000 	mov.w	r0, #0
   13992:	4770      	bx	lr
   13994:	f112 0f61 	cmn.w	r2, #97	; 0x61
   13998:	d101      	bne.n	1399e <__aeabi_f2uiz+0x32>
   1399a:	0242      	lsls	r2, r0, #9
   1399c:	d102      	bne.n	139a4 <__aeabi_f2uiz+0x38>
   1399e:	f04f 30ff 	mov.w	r0, #4294967295
   139a2:	4770      	bx	lr
   139a4:	f04f 0000 	mov.w	r0, #0
   139a8:	4770      	bx	lr
   139aa:	bf00      	nop

000139ac <__cxa_atexit>:
   139ac:	4613      	mov	r3, r2
   139ae:	460a      	mov	r2, r1
   139b0:	4601      	mov	r1, r0
   139b2:	2002      	movs	r0, #2
   139b4:	f000 b992 	b.w	13cdc <__register_exitproc>

000139b8 <ffs>:
   139b8:	b140      	cbz	r0, 139cc <ffs+0x14>
   139ba:	2300      	movs	r3, #0
   139bc:	fa40 f103 	asr.w	r1, r0, r3
   139c0:	1c5a      	adds	r2, r3, #1
   139c2:	07c9      	lsls	r1, r1, #31
   139c4:	4613      	mov	r3, r2
   139c6:	d5f9      	bpl.n	139bc <ffs+0x4>
   139c8:	4610      	mov	r0, r2
   139ca:	4770      	bx	lr
   139cc:	4602      	mov	r2, r0
   139ce:	4610      	mov	r0, r2
   139d0:	4770      	bx	lr
   139d2:	bf00      	nop

000139d4 <__libc_init_array>:
   139d4:	b570      	push	{r4, r5, r6, lr}
   139d6:	4e0f      	ldr	r6, [pc, #60]	; (13a14 <__libc_init_array+0x40>)
   139d8:	4d0f      	ldr	r5, [pc, #60]	; (13a18 <__libc_init_array+0x44>)
   139da:	1b76      	subs	r6, r6, r5
   139dc:	10b6      	asrs	r6, r6, #2
   139de:	bf18      	it	ne
   139e0:	2400      	movne	r4, #0
   139e2:	d005      	beq.n	139f0 <__libc_init_array+0x1c>
   139e4:	3401      	adds	r4, #1
   139e6:	f855 3b04 	ldr.w	r3, [r5], #4
   139ea:	4798      	blx	r3
   139ec:	42a6      	cmp	r6, r4
   139ee:	d1f9      	bne.n	139e4 <__libc_init_array+0x10>
   139f0:	4e0a      	ldr	r6, [pc, #40]	; (13a1c <__libc_init_array+0x48>)
   139f2:	4d0b      	ldr	r5, [pc, #44]	; (13a20 <__libc_init_array+0x4c>)
   139f4:	1b76      	subs	r6, r6, r5
   139f6:	f000 fca1 	bl	1433c <_init>
   139fa:	10b6      	asrs	r6, r6, #2
   139fc:	bf18      	it	ne
   139fe:	2400      	movne	r4, #0
   13a00:	d006      	beq.n	13a10 <__libc_init_array+0x3c>
   13a02:	3401      	adds	r4, #1
   13a04:	f855 3b04 	ldr.w	r3, [r5], #4
   13a08:	4798      	blx	r3
   13a0a:	42a6      	cmp	r6, r4
   13a0c:	d1f9      	bne.n	13a02 <__libc_init_array+0x2e>
   13a0e:	bd70      	pop	{r4, r5, r6, pc}
   13a10:	bd70      	pop	{r4, r5, r6, pc}
   13a12:	bf00      	nop
   13a14:	00014348 	.word	0x00014348
   13a18:	00014348 	.word	0x00014348
   13a1c:	00014390 	.word	0x00014390
   13a20:	00014348 	.word	0x00014348

00013a24 <memcpy>:
   13a24:	4684      	mov	ip, r0
   13a26:	ea41 0300 	orr.w	r3, r1, r0
   13a2a:	f013 0303 	ands.w	r3, r3, #3
   13a2e:	d16d      	bne.n	13b0c <memcpy+0xe8>
   13a30:	3a40      	subs	r2, #64	; 0x40
   13a32:	d341      	bcc.n	13ab8 <memcpy+0x94>
   13a34:	f851 3b04 	ldr.w	r3, [r1], #4
   13a38:	f840 3b04 	str.w	r3, [r0], #4
   13a3c:	f851 3b04 	ldr.w	r3, [r1], #4
   13a40:	f840 3b04 	str.w	r3, [r0], #4
   13a44:	f851 3b04 	ldr.w	r3, [r1], #4
   13a48:	f840 3b04 	str.w	r3, [r0], #4
   13a4c:	f851 3b04 	ldr.w	r3, [r1], #4
   13a50:	f840 3b04 	str.w	r3, [r0], #4
   13a54:	f851 3b04 	ldr.w	r3, [r1], #4
   13a58:	f840 3b04 	str.w	r3, [r0], #4
   13a5c:	f851 3b04 	ldr.w	r3, [r1], #4
   13a60:	f840 3b04 	str.w	r3, [r0], #4
   13a64:	f851 3b04 	ldr.w	r3, [r1], #4
   13a68:	f840 3b04 	str.w	r3, [r0], #4
   13a6c:	f851 3b04 	ldr.w	r3, [r1], #4
   13a70:	f840 3b04 	str.w	r3, [r0], #4
   13a74:	f851 3b04 	ldr.w	r3, [r1], #4
   13a78:	f840 3b04 	str.w	r3, [r0], #4
   13a7c:	f851 3b04 	ldr.w	r3, [r1], #4
   13a80:	f840 3b04 	str.w	r3, [r0], #4
   13a84:	f851 3b04 	ldr.w	r3, [r1], #4
   13a88:	f840 3b04 	str.w	r3, [r0], #4
   13a8c:	f851 3b04 	ldr.w	r3, [r1], #4
   13a90:	f840 3b04 	str.w	r3, [r0], #4
   13a94:	f851 3b04 	ldr.w	r3, [r1], #4
   13a98:	f840 3b04 	str.w	r3, [r0], #4
   13a9c:	f851 3b04 	ldr.w	r3, [r1], #4
   13aa0:	f840 3b04 	str.w	r3, [r0], #4
   13aa4:	f851 3b04 	ldr.w	r3, [r1], #4
   13aa8:	f840 3b04 	str.w	r3, [r0], #4
   13aac:	f851 3b04 	ldr.w	r3, [r1], #4
   13ab0:	f840 3b04 	str.w	r3, [r0], #4
   13ab4:	3a40      	subs	r2, #64	; 0x40
   13ab6:	d2bd      	bcs.n	13a34 <memcpy+0x10>
   13ab8:	3230      	adds	r2, #48	; 0x30
   13aba:	d311      	bcc.n	13ae0 <memcpy+0xbc>
   13abc:	f851 3b04 	ldr.w	r3, [r1], #4
   13ac0:	f840 3b04 	str.w	r3, [r0], #4
   13ac4:	f851 3b04 	ldr.w	r3, [r1], #4
   13ac8:	f840 3b04 	str.w	r3, [r0], #4
   13acc:	f851 3b04 	ldr.w	r3, [r1], #4
   13ad0:	f840 3b04 	str.w	r3, [r0], #4
   13ad4:	f851 3b04 	ldr.w	r3, [r1], #4
   13ad8:	f840 3b04 	str.w	r3, [r0], #4
   13adc:	3a10      	subs	r2, #16
   13ade:	d2ed      	bcs.n	13abc <memcpy+0x98>
   13ae0:	320c      	adds	r2, #12
   13ae2:	d305      	bcc.n	13af0 <memcpy+0xcc>
   13ae4:	f851 3b04 	ldr.w	r3, [r1], #4
   13ae8:	f840 3b04 	str.w	r3, [r0], #4
   13aec:	3a04      	subs	r2, #4
   13aee:	d2f9      	bcs.n	13ae4 <memcpy+0xc0>
   13af0:	3204      	adds	r2, #4
   13af2:	d008      	beq.n	13b06 <memcpy+0xe2>
   13af4:	07d2      	lsls	r2, r2, #31
   13af6:	bf1c      	itt	ne
   13af8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   13afc:	f800 3b01 	strbne.w	r3, [r0], #1
   13b00:	d301      	bcc.n	13b06 <memcpy+0xe2>
   13b02:	880b      	ldrh	r3, [r1, #0]
   13b04:	8003      	strh	r3, [r0, #0]
   13b06:	4660      	mov	r0, ip
   13b08:	4770      	bx	lr
   13b0a:	bf00      	nop
   13b0c:	2a08      	cmp	r2, #8
   13b0e:	d313      	bcc.n	13b38 <memcpy+0x114>
   13b10:	078b      	lsls	r3, r1, #30
   13b12:	d08d      	beq.n	13a30 <memcpy+0xc>
   13b14:	f010 0303 	ands.w	r3, r0, #3
   13b18:	d08a      	beq.n	13a30 <memcpy+0xc>
   13b1a:	f1c3 0304 	rsb	r3, r3, #4
   13b1e:	1ad2      	subs	r2, r2, r3
   13b20:	07db      	lsls	r3, r3, #31
   13b22:	bf1c      	itt	ne
   13b24:	f811 3b01 	ldrbne.w	r3, [r1], #1
   13b28:	f800 3b01 	strbne.w	r3, [r0], #1
   13b2c:	d380      	bcc.n	13a30 <memcpy+0xc>
   13b2e:	f831 3b02 	ldrh.w	r3, [r1], #2
   13b32:	f820 3b02 	strh.w	r3, [r0], #2
   13b36:	e77b      	b.n	13a30 <memcpy+0xc>
   13b38:	3a04      	subs	r2, #4
   13b3a:	d3d9      	bcc.n	13af0 <memcpy+0xcc>
   13b3c:	3a01      	subs	r2, #1
   13b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
   13b42:	f800 3b01 	strb.w	r3, [r0], #1
   13b46:	d2f9      	bcs.n	13b3c <memcpy+0x118>
   13b48:	780b      	ldrb	r3, [r1, #0]
   13b4a:	7003      	strb	r3, [r0, #0]
   13b4c:	784b      	ldrb	r3, [r1, #1]
   13b4e:	7043      	strb	r3, [r0, #1]
   13b50:	788b      	ldrb	r3, [r1, #2]
   13b52:	7083      	strb	r3, [r0, #2]
   13b54:	4660      	mov	r0, ip
   13b56:	4770      	bx	lr

00013b58 <memset>:
   13b58:	b470      	push	{r4, r5, r6}
   13b5a:	0786      	lsls	r6, r0, #30
   13b5c:	d046      	beq.n	13bec <memset+0x94>
   13b5e:	1e54      	subs	r4, r2, #1
   13b60:	2a00      	cmp	r2, #0
   13b62:	d041      	beq.n	13be8 <memset+0x90>
   13b64:	b2ca      	uxtb	r2, r1
   13b66:	4603      	mov	r3, r0
   13b68:	e002      	b.n	13b70 <memset+0x18>
   13b6a:	f114 34ff 	adds.w	r4, r4, #4294967295
   13b6e:	d33b      	bcc.n	13be8 <memset+0x90>
   13b70:	f803 2b01 	strb.w	r2, [r3], #1
   13b74:	079d      	lsls	r5, r3, #30
   13b76:	d1f8      	bne.n	13b6a <memset+0x12>
   13b78:	2c03      	cmp	r4, #3
   13b7a:	d92e      	bls.n	13bda <memset+0x82>
   13b7c:	b2cd      	uxtb	r5, r1
   13b7e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   13b82:	2c0f      	cmp	r4, #15
   13b84:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   13b88:	d919      	bls.n	13bbe <memset+0x66>
   13b8a:	f103 0210 	add.w	r2, r3, #16
   13b8e:	4626      	mov	r6, r4
   13b90:	3e10      	subs	r6, #16
   13b92:	2e0f      	cmp	r6, #15
   13b94:	f842 5c10 	str.w	r5, [r2, #-16]
   13b98:	f842 5c0c 	str.w	r5, [r2, #-12]
   13b9c:	f842 5c08 	str.w	r5, [r2, #-8]
   13ba0:	f842 5c04 	str.w	r5, [r2, #-4]
   13ba4:	f102 0210 	add.w	r2, r2, #16
   13ba8:	d8f2      	bhi.n	13b90 <memset+0x38>
   13baa:	f1a4 0210 	sub.w	r2, r4, #16
   13bae:	f022 020f 	bic.w	r2, r2, #15
   13bb2:	f004 040f 	and.w	r4, r4, #15
   13bb6:	3210      	adds	r2, #16
   13bb8:	2c03      	cmp	r4, #3
   13bba:	4413      	add	r3, r2
   13bbc:	d90d      	bls.n	13bda <memset+0x82>
   13bbe:	461e      	mov	r6, r3
   13bc0:	4622      	mov	r2, r4
   13bc2:	3a04      	subs	r2, #4
   13bc4:	2a03      	cmp	r2, #3
   13bc6:	f846 5b04 	str.w	r5, [r6], #4
   13bca:	d8fa      	bhi.n	13bc2 <memset+0x6a>
   13bcc:	1f22      	subs	r2, r4, #4
   13bce:	f022 0203 	bic.w	r2, r2, #3
   13bd2:	3204      	adds	r2, #4
   13bd4:	4413      	add	r3, r2
   13bd6:	f004 0403 	and.w	r4, r4, #3
   13bda:	b12c      	cbz	r4, 13be8 <memset+0x90>
   13bdc:	b2c9      	uxtb	r1, r1
   13bde:	441c      	add	r4, r3
   13be0:	f803 1b01 	strb.w	r1, [r3], #1
   13be4:	429c      	cmp	r4, r3
   13be6:	d1fb      	bne.n	13be0 <memset+0x88>
   13be8:	bc70      	pop	{r4, r5, r6}
   13bea:	4770      	bx	lr
   13bec:	4614      	mov	r4, r2
   13bee:	4603      	mov	r3, r0
   13bf0:	e7c2      	b.n	13b78 <memset+0x20>
   13bf2:	bf00      	nop
	...

00013c00 <strlen>:
   13c00:	f890 f000 	pld	[r0]
   13c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   13c08:	f020 0107 	bic.w	r1, r0, #7
   13c0c:	f06f 0c00 	mvn.w	ip, #0
   13c10:	f010 0407 	ands.w	r4, r0, #7
   13c14:	f891 f020 	pld	[r1, #32]
   13c18:	f040 8049 	bne.w	13cae <strlen+0xae>
   13c1c:	f04f 0400 	mov.w	r4, #0
   13c20:	f06f 0007 	mvn.w	r0, #7
   13c24:	e9d1 2300 	ldrd	r2, r3, [r1]
   13c28:	f891 f040 	pld	[r1, #64]	; 0x40
   13c2c:	f100 0008 	add.w	r0, r0, #8
   13c30:	fa82 f24c 	uadd8	r2, r2, ip
   13c34:	faa4 f28c 	sel	r2, r4, ip
   13c38:	fa83 f34c 	uadd8	r3, r3, ip
   13c3c:	faa2 f38c 	sel	r3, r2, ip
   13c40:	bb4b      	cbnz	r3, 13c96 <strlen+0x96>
   13c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   13c46:	fa82 f24c 	uadd8	r2, r2, ip
   13c4a:	f100 0008 	add.w	r0, r0, #8
   13c4e:	faa4 f28c 	sel	r2, r4, ip
   13c52:	fa83 f34c 	uadd8	r3, r3, ip
   13c56:	faa2 f38c 	sel	r3, r2, ip
   13c5a:	b9e3      	cbnz	r3, 13c96 <strlen+0x96>
   13c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   13c60:	fa82 f24c 	uadd8	r2, r2, ip
   13c64:	f100 0008 	add.w	r0, r0, #8
   13c68:	faa4 f28c 	sel	r2, r4, ip
   13c6c:	fa83 f34c 	uadd8	r3, r3, ip
   13c70:	faa2 f38c 	sel	r3, r2, ip
   13c74:	b97b      	cbnz	r3, 13c96 <strlen+0x96>
   13c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   13c7a:	f101 0120 	add.w	r1, r1, #32
   13c7e:	fa82 f24c 	uadd8	r2, r2, ip
   13c82:	f100 0008 	add.w	r0, r0, #8
   13c86:	faa4 f28c 	sel	r2, r4, ip
   13c8a:	fa83 f34c 	uadd8	r3, r3, ip
   13c8e:	faa2 f38c 	sel	r3, r2, ip
   13c92:	2b00      	cmp	r3, #0
   13c94:	d0c6      	beq.n	13c24 <strlen+0x24>
   13c96:	2a00      	cmp	r2, #0
   13c98:	bf04      	itt	eq
   13c9a:	3004      	addeq	r0, #4
   13c9c:	461a      	moveq	r2, r3
   13c9e:	ba12      	rev	r2, r2
   13ca0:	fab2 f282 	clz	r2, r2
   13ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   13ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   13cac:	4770      	bx	lr
   13cae:	e9d1 2300 	ldrd	r2, r3, [r1]
   13cb2:	f004 0503 	and.w	r5, r4, #3
   13cb6:	f1c4 0000 	rsb	r0, r4, #0
   13cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   13cbe:	f014 0f04 	tst.w	r4, #4
   13cc2:	f891 f040 	pld	[r1, #64]	; 0x40
   13cc6:	fa0c f505 	lsl.w	r5, ip, r5
   13cca:	ea62 0205 	orn	r2, r2, r5
   13cce:	bf1c      	itt	ne
   13cd0:	ea63 0305 	ornne	r3, r3, r5
   13cd4:	4662      	movne	r2, ip
   13cd6:	f04f 0400 	mov.w	r4, #0
   13cda:	e7a9      	b.n	13c30 <strlen+0x30>

00013cdc <__register_exitproc>:
   13cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13ce0:	4d2c      	ldr	r5, [pc, #176]	; (13d94 <__register_exitproc+0xb8>)
   13ce2:	4606      	mov	r6, r0
   13ce4:	6828      	ldr	r0, [r5, #0]
   13ce6:	4698      	mov	r8, r3
   13ce8:	460f      	mov	r7, r1
   13cea:	4691      	mov	r9, r2
   13cec:	f000 f882 	bl	13df4 <__retarget_lock_acquire_recursive>
   13cf0:	4b29      	ldr	r3, [pc, #164]	; (13d98 <__register_exitproc+0xbc>)
   13cf2:	681c      	ldr	r4, [r3, #0]
   13cf4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   13cf8:	2b00      	cmp	r3, #0
   13cfa:	d03e      	beq.n	13d7a <__register_exitproc+0x9e>
   13cfc:	685a      	ldr	r2, [r3, #4]
   13cfe:	2a1f      	cmp	r2, #31
   13d00:	dc1c      	bgt.n	13d3c <__register_exitproc+0x60>
   13d02:	f102 0e01 	add.w	lr, r2, #1
   13d06:	b176      	cbz	r6, 13d26 <__register_exitproc+0x4a>
   13d08:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   13d0c:	2401      	movs	r4, #1
   13d0e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   13d12:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   13d16:	4094      	lsls	r4, r2
   13d18:	4320      	orrs	r0, r4
   13d1a:	2e02      	cmp	r6, #2
   13d1c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   13d20:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   13d24:	d023      	beq.n	13d6e <__register_exitproc+0x92>
   13d26:	3202      	adds	r2, #2
   13d28:	f8c3 e004 	str.w	lr, [r3, #4]
   13d2c:	6828      	ldr	r0, [r5, #0]
   13d2e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   13d32:	f000 f861 	bl	13df8 <__retarget_lock_release_recursive>
   13d36:	2000      	movs	r0, #0
   13d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13d3c:	4b17      	ldr	r3, [pc, #92]	; (13d9c <__register_exitproc+0xc0>)
   13d3e:	b30b      	cbz	r3, 13d84 <__register_exitproc+0xa8>
   13d40:	f44f 70c8 	mov.w	r0, #400	; 0x190
   13d44:	f7fb f81e 	bl	ed84 <malloc>
   13d48:	4603      	mov	r3, r0
   13d4a:	b1d8      	cbz	r0, 13d84 <__register_exitproc+0xa8>
   13d4c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   13d50:	6002      	str	r2, [r0, #0]
   13d52:	2100      	movs	r1, #0
   13d54:	6041      	str	r1, [r0, #4]
   13d56:	460a      	mov	r2, r1
   13d58:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   13d5c:	f04f 0e01 	mov.w	lr, #1
   13d60:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   13d64:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   13d68:	2e00      	cmp	r6, #0
   13d6a:	d0dc      	beq.n	13d26 <__register_exitproc+0x4a>
   13d6c:	e7cc      	b.n	13d08 <__register_exitproc+0x2c>
   13d6e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   13d72:	430c      	orrs	r4, r1
   13d74:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   13d78:	e7d5      	b.n	13d26 <__register_exitproc+0x4a>
   13d7a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   13d7e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   13d82:	e7bb      	b.n	13cfc <__register_exitproc+0x20>
   13d84:	6828      	ldr	r0, [r5, #0]
   13d86:	f000 f837 	bl	13df8 <__retarget_lock_release_recursive>
   13d8a:	f04f 30ff 	mov.w	r0, #4294967295
   13d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13d92:	bf00      	nop
   13d94:	20000638 	.word	0x20000638
   13d98:	00014338 	.word	0x00014338
   13d9c:	0000ed85 	.word	0x0000ed85

00013da0 <register_fini>:
   13da0:	4b02      	ldr	r3, [pc, #8]	; (13dac <register_fini+0xc>)
   13da2:	b113      	cbz	r3, 13daa <register_fini+0xa>
   13da4:	4802      	ldr	r0, [pc, #8]	; (13db0 <register_fini+0x10>)
   13da6:	f000 b805 	b.w	13db4 <atexit>
   13daa:	4770      	bx	lr
   13dac:	00000000 	.word	0x00000000
   13db0:	00013dc1 	.word	0x00013dc1

00013db4 <atexit>:
   13db4:	2300      	movs	r3, #0
   13db6:	4601      	mov	r1, r0
   13db8:	461a      	mov	r2, r3
   13dba:	4618      	mov	r0, r3
   13dbc:	f7ff bf8e 	b.w	13cdc <__register_exitproc>

00013dc0 <__libc_fini_array>:
   13dc0:	b538      	push	{r3, r4, r5, lr}
   13dc2:	4c0a      	ldr	r4, [pc, #40]	; (13dec <__libc_fini_array+0x2c>)
   13dc4:	4d0a      	ldr	r5, [pc, #40]	; (13df0 <__libc_fini_array+0x30>)
   13dc6:	1b64      	subs	r4, r4, r5
   13dc8:	10a4      	asrs	r4, r4, #2
   13dca:	d00a      	beq.n	13de2 <__libc_fini_array+0x22>
   13dcc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   13dd0:	3b01      	subs	r3, #1
   13dd2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   13dd6:	3c01      	subs	r4, #1
   13dd8:	f855 3904 	ldr.w	r3, [r5], #-4
   13ddc:	4798      	blx	r3
   13dde:	2c00      	cmp	r4, #0
   13de0:	d1f9      	bne.n	13dd6 <__libc_fini_array+0x16>
   13de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13de6:	f000 bad3 	b.w	14390 <_fini>
   13dea:	bf00      	nop
   13dec:	000143a0 	.word	0x000143a0
   13df0:	0001439c 	.word	0x0001439c

00013df4 <__retarget_lock_acquire_recursive>:
   13df4:	4770      	bx	lr
   13df6:	bf00      	nop

00013df8 <__retarget_lock_release_recursive>:
   13df8:	4770      	bx	lr
   13dfa:	bf00      	nop

00013dfc <_ZTC16Maintenance_Tool0_16Commands_Handler>:
   13dfc:	0144 0000 0000 0000 0000 0000               D...........

00013e08 <_ZTT16Maintenance_Tool>:
   13e08:	3e1c 0001 3e08 0001                         .>...>..

00013e10 <_ZTV16Maintenance_Tool>:
   13e10:	0144 0000 0000 0000 0000 0000 2e2e 682f     D............./h
   13e20:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   13e30:	625f 7361 2e65 0068 2e2e 682f 6c61 692f     _base.h.../hal/i
   13e40:	636e 756c 6564 682f 6c61 775f 7464 682e     nclude/hal_wdt.h
   13e50:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   13e60:	6c61 635f 6c61 6e65 6164 2e72 0063 0000     al_calendar.c...
   13e70:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   13e80:	6e61 615f 7973 636e 632e 0000 2e2e 682f     an_async.c..../h
   13e90:	6c61 732f 6372 682f 6c61 635f 6372 735f     al/src/hal_crc_s
   13ea0:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
   13eb0:	6372 682f 6c61 695f 6332 6d5f 735f 6e79     rc/hal_i2c_m_syn
   13ec0:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
   13ed0:	6c61 705f 6d77 632e 0000 0000 2e2e 682f     al_pwm.c....../h
   13ee0:	6c61 732f 6372 682f 6c61 715f 7073 5f69     al/src/hal_qspi_
   13ef0:	7973 636e 632e 0000 2e2e 682f 6c61 732f     sync.c..../hal/s
   13f00:	6372 682f 6c61 735f 6970 6d5f 735f 6e79     rc/hal_spi_m_syn
   13f10:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
   13f20:	6c61 745f 6d69 7265 632e 0000 2e2e 682f     al_timer.c..../h
   13f30:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
   13f40:	736c 6c5f 7369 2e74 0063 0000               ls_list.c...

00013f4c <_map>:
   13f4c:	0000 0000 0040 0000 0001 0000 0021 0000     ....@.......!...
   13f5c:	0003 0000 0003 0000 0004 0000 0004 0000     ................
   13f6c:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   13f7c:	0007 0000 0057 0000 0008 0000 0028 0000     ....W.......(...
   13f8c:	0009 0000 0029 0000 2e2e 682f 6c70 652f     ....)...../hpl/e
   13f9c:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

00013fac <user_mux_confs>:
   13fac:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

00013ff0 <channel_confs>:
   13ff0:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

00014030 <interrupt_cfg>:
	...
   140b0:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   140c0:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   140d0:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   140e0:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   140f0:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   14100:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   14110:	0400 4300 0800 4300 0c00 4300               ...C...C...C

0001411c <sercomspi_regs>:
   1411c:	000c 0020 0000 0002 0000 0000 0001 01ff     .. .............
   1412c:	0c04 3000 0000 0200 0000 0000 1700 ff00     ...0............
   1413c:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   1414c:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   1415c:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   1416c:	1400 4300 1800 4300                         ...C...C

00014174 <_usb_ep_cfgs>:
   14174:	0cfc 2000 0000 0000 0040 0000 0d3c 2000     ... ....@...<.. 
   14184:	0d7c 2000 0040 0040 0dbc 2000 0dfc 2000     |.. @.@.... ... 
   14194:	0040 0040 0e3c 2000 0e7c 2000 0040 0040     @.@.<.. |.. @.@.
   141a4:	0ebc 2000 0efc 2000 0040 0040 0804 0000     ... ... @.@.....
   141b4:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   141c4:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   141d4:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   141e4:	625f 7361 2e65 0068                         _base.h.

000141ec <n25q256a_interface>:
   141ec:	c195 0000 c239 0000 c349 0000 c501 0000     ....9...I.......
   141fc:	c591 0000 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
   1420c:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

00014218 <_ZTV9CDC_Class>:
	...
   14220:	e679 0000 e759 0000 e2cd 0000 e641 0000     y...Y.......A...
   14230:	e7f1 0000 e605 0000 e4e9 0000 e539 0000     ............9...
   14240:	e661 0000 e6c1 0000                         a.......

00014248 <_ZTV6Stream>:
	...
   14250:	ed99 0000 e999 0000 e2cd 0000 e2e1 0000     ................
   14260:	ed99 0000 ed99 0000 ed99 0000 7830 2e25     ............0x%.
   14270:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   14280:	766f 0066                                   ovf.

00014284 <_ZTV5Print>:
	...
   1428c:	ed99 0000 e999 0000 e2cd 0000 e2e1 0000     ................
   1429c:	6c46 7361 2068 654d 6f6d 7972 5320 6c65     Flash Memory Sel
   142ac:	5466 7365 2074 4150 5353 4445 0000 0000     fTest PASSED....
   142bc:	0a0d 0000 6c46 7361 2068 654d 6f6d 7972     ....Flash Memory
   142cc:	5320 6c65 5466 7365 2074 4146 4c49 4445      SelfTest FAILED
   142dc:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   142ec:	6c61 695f 2e6f 0063 2e2e 2e2f 2f2e 2e2e     al_io.c.../../..
   142fc:	412f 554c 445f 6972 6576 2f72 4c41 5f55     /ALU_Driver/ALU_
   1430c:	7244 7669 7265 682f 6c70 702f 726f 2f74     Driver/hpl/port/
   1431c:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.

0001432c <defaultParameters>:
   1432c:	4020 0000                                    @..

00014330 <defaultPreferences>:
   14330:	00fa 0000 0032 0000                         ....2...

00014338 <_global_impure_ptr>:
   14338:	0210 2000                                   ... 

0001433c <_init>:
   1433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1433e:	bf00      	nop
   14340:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14342:	bc08      	pop	{r3}
   14344:	469e      	mov	lr, r3
   14346:	4770      	bx	lr

00014348 <__init_array_start>:
   14348:	00013da1 	.word	0x00013da1

0001434c <__frame_dummy_init_array_entry>:
   1434c:	00000289 00000505 000008f5 00000da5     ................
   1435c:	0000e295 0000e949 0000ed71 0000f025     ....I...q...%...
   1436c:	0000f2f1 00010909 00010fb9 000111d1     ................
   1437c:	00011389 00011715 00012739 00012a69     ........9'..i*..
   1438c:	00013491                                .4..

00014390 <_fini>:
   14390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14392:	bf00      	nop
   14394:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14396:	bc08      	pop	{r3}
   14398:	469e      	mov	lr, r3
   1439a:	4770      	bx	lr

0001439c <__fini_array_start>:
   1439c:	00000265 	.word	0x00000265
