
MaintenanceInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014bf8  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00014bf8  00014bf8  00024bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  00014c00  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003063c  2**0
                  CONTENTS
  5 .bss          00009e3c  2000063c  0001523c  0003063c  2**2
                  ALLOC
  6 .stack        00010000  2000a478  0001f078  0003063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000af3d6  00000000  00000000  000306c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ee56  00000000  00000000  000dfa99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00022649  00000000  00000000  000ee8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003c78  00000000  00000000  00110f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000038b8  00000000  00000000  00114bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005b3ce  00000000  00000000  00118468  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00050b8e  00000000  00000000  00173836  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00148574  00000000  00000000  001c43c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000f468  00000000  00000000  0030c938  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 a4 01 20 49 09 00 00 45 09 00 00 45 09 00 00     x.. I...E...E...
      10:	45 09 00 00 45 09 00 00 45 09 00 00 00 00 00 00     E...E...E.......
	...
      2c:	45 09 00 00 45 09 00 00 00 00 00 00 45 09 00 00     E...E.......E...
      3c:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
      4c:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
      5c:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
      6c:	0d 67 00 00 11 55 00 00 21 55 00 00 45 09 00 00     .g...U..!U..E...
      7c:	31 55 00 00 41 55 00 00 51 55 00 00 61 55 00 00     1U..AU..QU..aU..
      8c:	71 55 00 00 81 55 00 00 91 55 00 00 45 09 00 00     qU...U...U..E...
      9c:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
      ac:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
      bc:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
      cc:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
      dc:	45 09 00 00 45 09 00 00 45 09 00 00 00 00 00 00     E...E...E.......
	...
      f4:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     104:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     114:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     124:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     134:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     144:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     154:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     164:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     174:	45 09 00 00 45 09 00 00 55 49 00 00 79 b7 00 00     E...E...UI..y...
     184:	89 b7 00 00 99 b7 00 00 a9 b7 00 00 45 09 00 00     ............E...
     194:	b9 81 00 00 45 09 00 00 45 09 00 00 45 09 00 00     ....E...E...E...
     1a4:	45 09 00 00 45 09 00 00 45 09 00 00 d5 81 00 00     E...E...E.......
     1b4:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     1c4:	f1 81 00 00 45 09 00 00 45 09 00 00 45 09 00 00     ....E...E...E...
     1d4:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     1e4:	45 09 00 00 45 09 00 00 75 8e 00 00 45 09 00 00     E...E...u...E...
     1f4:	91 8e 00 00 45 09 00 00 ad 8e 00 00 c9 8e 00 00     ....E...........
     204:	e5 8e 00 00 01 8f 00 00 45 09 00 00 45 09 00 00     ........E...E...
     214:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     224:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     234:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     244:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...
     254:	45 09 00 00 45 09 00 00 45 09 00 00 45 09 00 00     E...E...E...E...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	00014c00 	.word	0x00014c00

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00014c00 	.word	0x00014c00
     2c4:	20000640 	.word	0x20000640
     2c8:	00014c00 	.word	0x00014c00
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN16Commands_HandlerC2Ev>:
#include "FlashMemoryClass.h"
#include "HEATERS_HANDLER.h"
#include "Scavenge_Fan.h"

// default constructor
Commands_Handler::Commands_Handler()
     2d0:	b470      	push	{r4, r5, r6}
     2d2:	680a      	ldr	r2, [r1, #0]
     2d4:	6002      	str	r2, [r0, #0]
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     2d6:	2200      	movs	r2, #0
     2d8:	2664      	movs	r6, #100	; 0x64
     2da:	7106      	strb	r6, [r0, #4]
     2dc:	2563      	movs	r5, #99	; 0x63
     2de:	7145      	strb	r5, [r0, #5]
     2e0:	2462      	movs	r4, #98	; 0x62
     2e2:	7184      	strb	r4, [r0, #6]
     2e4:	2161      	movs	r1, #97	; 0x61
     2e6:	71c1      	strb	r1, [r0, #7]
     2e8:	7242      	strb	r2, [r0, #9]
     2ea:	7406      	strb	r6, [r0, #16]
     2ec:	7445      	strb	r5, [r0, #17]
     2ee:	7484      	strb	r4, [r0, #18]
     2f0:	74c1      	strb	r1, [r0, #19]
     2f2:	7542      	strb	r2, [r0, #21]
{
	
} //Commands_Handler
     2f4:	bc70      	pop	{r4, r5, r6}
     2f6:	4770      	bx	lr

000002f8 <_ZN16Commands_HandlerD2Ev>:

// default destructor
Commands_Handler::~Commands_Handler()
     2f8:	680b      	ldr	r3, [r1, #0]
     2fa:	6003      	str	r3, [r0, #0]
{
} //~Commands_Handler
     2fc:	4770      	bx	lr

000002fe <_ZN16Commands_Handler18InitCommandHandlerEPh>:

void Commands_Handler::InitCommandHandler(uint8_t * buffer){
	usbMessageBuffer=buffer;
     2fe:	60c1      	str	r1, [r0, #12]
     300:	4770      	bx	lr
	...

00000304 <_ZN16Commands_Handler13SetEnableFan1Eh>:
	}
	return SetEnableFan1(data);
	
}

uint8_t Commands_Handler::SetEnableFan1(uint8_t data){
     304:	b510      	push	{r4, lr}
     306:	460c      	mov	r4, r1
	if ((data&(0x01))>0)
     308:	f011 0f01 	tst.w	r1, #1
	{
		fans.evaporator[0]->SetEnable(true);
     30c:	bf14      	ite	ne
     30e:	2101      	movne	r1, #1
	}
	else
	{
		fans.evaporator[0]->SetEnable(false);
     310:	2100      	moveq	r1, #0
     312:	4b03      	ldr	r3, [pc, #12]	; (320 <_ZN16Commands_Handler13SetEnableFan1Eh+0x1c>)
     314:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     316:	4b03      	ldr	r3, [pc, #12]	; (324 <_ZN16Commands_Handler13SetEnableFan1Eh+0x20>)
     318:	4798      	blx	r3
	}
	return data;
}
     31a:	4620      	mov	r0, r4
     31c:	bd10      	pop	{r4, pc}
     31e:	bf00      	nop
     320:	20001cfc 	.word	0x20001cfc
     324:	0000f9fd 	.word	0x0000f9fd

00000328 <_ZN16Commands_Handler13SetEnableFan2Eh>:
uint8_t	Commands_Handler::SetEnableFan2(uint8_t data){
     328:	b538      	push	{r3, r4, r5, lr}
     32a:	4605      	mov	r5, r0
     32c:	460c      	mov	r4, r1
	if ((data&(0x02))>0){
     32e:	f011 0f02 	tst.w	r1, #2
		fans.evaporator[1]->SetEnable(true);
     332:	bf14      	ite	ne
     334:	2101      	movne	r1, #1
		fans.evaporator[1]->SetEnable(false);
     336:	2100      	moveq	r1, #0
     338:	4b04      	ldr	r3, [pc, #16]	; (34c <_ZN16Commands_Handler13SetEnableFan2Eh+0x24>)
     33a:	6e18      	ldr	r0, [r3, #96]	; 0x60
     33c:	4b04      	ldr	r3, [pc, #16]	; (350 <_ZN16Commands_Handler13SetEnableFan2Eh+0x28>)
     33e:	4798      	blx	r3
	return SetEnableFan1(data);
     340:	4621      	mov	r1, r4
     342:	4628      	mov	r0, r5
     344:	4b03      	ldr	r3, [pc, #12]	; (354 <_ZN16Commands_Handler13SetEnableFan2Eh+0x2c>)
     346:	4798      	blx	r3
}
     348:	bd38      	pop	{r3, r4, r5, pc}
     34a:	bf00      	nop
     34c:	20001cfc 	.word	0x20001cfc
     350:	0000f9fd 	.word	0x0000f9fd
     354:	00000305 	.word	0x00000305

00000358 <_ZN16Commands_Handler19SetEnableCondesatorEh>:
uint8_t Commands_Handler::SetEnableCondesator(uint8_t data){
     358:	b538      	push	{r3, r4, r5, lr}
     35a:	4605      	mov	r5, r0
     35c:	460c      	mov	r4, r1
	if ((data&(0x04))>0)
     35e:	f011 0f04 	tst.w	r1, #4
		fans.condesator->SetEnable(true);
     362:	bf14      	ite	ne
     364:	2101      	movne	r1, #1
		fans.condesator->SetEnable(false);
     366:	2100      	moveq	r1, #0
     368:	4b04      	ldr	r3, [pc, #16]	; (37c <_ZN16Commands_Handler19SetEnableCondesatorEh+0x24>)
     36a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     36c:	4b04      	ldr	r3, [pc, #16]	; (380 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x28>)
     36e:	4798      	blx	r3
	return SetEnableFan2(data);
     370:	4621      	mov	r1, r4
     372:	4628      	mov	r0, r5
     374:	4b03      	ldr	r3, [pc, #12]	; (384 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x2c>)
     376:	4798      	blx	r3
}
     378:	bd38      	pop	{r3, r4, r5, pc}
     37a:	bf00      	nop
     37c:	20001cfc 	.word	0x20001cfc
     380:	0000f641 	.word	0x0000f641
     384:	00000329 	.word	0x00000329

00000388 <_ZN16Commands_Handler20CommandSetEnableFansEv>:
bool Commands_Handler::CommandSetEnableFans(void){
     388:	b510      	push	{r4, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     38a:	68c3      	ldr	r3, [r0, #12]
     38c:	6819      	ldr	r1, [r3, #0]
     38e:	6041      	str	r1, [r0, #4]
     390:	8899      	ldrh	r1, [r3, #4]
     392:	799b      	ldrb	r3, [r3, #6]
     394:	8101      	strh	r1, [r0, #8]
     396:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandSetEnableFans);
     398:	7a43      	ldrb	r3, [r0, #9]
     39a:	2b4b      	cmp	r3, #75	; 0x4b
     39c:	bf0c      	ite	eq
     39e:	2401      	moveq	r4, #1
     3a0:	2400      	movne	r4, #0
	if (result){
     3a2:	d001      	beq.n	3a8 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x20>
}
     3a4:	4620      	mov	r0, r4
     3a6:	bd10      	pop	{r4, pc}
		SetEnableCondesator(data);
     3a8:	7a81      	ldrb	r1, [r0, #10]
     3aa:	4b01      	ldr	r3, [pc, #4]	; (3b0 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x28>)
     3ac:	4798      	blx	r3
     3ae:	e7f9      	b.n	3a4 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x1c>
     3b0:	00000359 	.word	0x00000359

000003b4 <_ZN16Commands_Handler17CommandSetPWMFansEv>:

bool Commands_Handler::CommandSetPWMFans(void){
     3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	uint8_t		*data=data_fans_array;
	
	
	//memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
	memcpy(&message64,usbMessageBuffer,64);
     3b6:	68c3      	ldr	r3, [r0, #12]
     3b8:	f100 0210 	add.w	r2, r0, #16
     3bc:	f103 0140 	add.w	r1, r3, #64	; 0x40
     3c0:	681f      	ldr	r7, [r3, #0]
     3c2:	685e      	ldr	r6, [r3, #4]
     3c4:	689d      	ldr	r5, [r3, #8]
     3c6:	68dc      	ldr	r4, [r3, #12]
     3c8:	6017      	str	r7, [r2, #0]
     3ca:	6056      	str	r6, [r2, #4]
     3cc:	6095      	str	r5, [r2, #8]
     3ce:	60d4      	str	r4, [r2, #12]
     3d0:	3310      	adds	r3, #16
     3d2:	3210      	adds	r2, #16
     3d4:	428b      	cmp	r3, r1
     3d6:	d1f3      	bne.n	3c0 <_ZN16Commands_Handler17CommandSetPWMFansEv+0xc>
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task ==	kHVACCommandSetPWMFans);
     3d8:	7d43      	ldrb	r3, [r0, #21]
     3da:	2b4c      	cmp	r3, #76	; 0x4c
     3dc:	bf0c      	ite	eq
     3de:	2501      	moveq	r5, #1
     3e0:	2500      	movne	r5, #0
	if (result){
     3e2:	d112      	bne.n	40a <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
     3e4:	4604      	mov	r4, r0
		data=message64.content;
		if (data[0]>0)
     3e6:	7d81      	ldrb	r1, [r0, #22]
     3e8:	b119      	cbz	r1, 3f2 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x3e>
		{
			fans.evaporator[0]->SetPWM(data[0]);
     3ea:	4b09      	ldr	r3, [pc, #36]	; (410 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     3ec:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     3ee:	4b09      	ldr	r3, [pc, #36]	; (414 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     3f0:	4798      	blx	r3
			
		}

		if (data[1]>0){
     3f2:	7de1      	ldrb	r1, [r4, #23]
     3f4:	b119      	cbz	r1, 3fe <_ZN16Commands_Handler17CommandSetPWMFansEv+0x4a>
			fans.evaporator[1]->SetPWM(data[1]);
     3f6:	4b06      	ldr	r3, [pc, #24]	; (410 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     3f8:	6e18      	ldr	r0, [r3, #96]	; 0x60
     3fa:	4b06      	ldr	r3, [pc, #24]	; (414 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     3fc:	4798      	blx	r3
		}
		if (data[2]>0){
     3fe:	7e21      	ldrb	r1, [r4, #24]
     400:	b119      	cbz	r1, 40a <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
			fans.condesator->SetPWM(data[2]);
     402:	4b03      	ldr	r3, [pc, #12]	; (410 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     404:	6e58      	ldr	r0, [r3, #100]	; 0x64
     406:	4b04      	ldr	r3, [pc, #16]	; (418 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x64>)
     408:	4798      	blx	r3
		

	}
	
	return result;
}
     40a:	4628      	mov	r0, r5
     40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     40e:	bf00      	nop
     410:	20001cfc 	.word	0x20001cfc
     414:	0000fa21 	.word	0x0000fa21
     418:	0000f659 	.word	0x0000f659

0000041c <_ZN16Commands_Handler22CommandSetFlapperValveEv>:
	}
	
	return result;
}

bool  Commands_Handler::CommandSetFlapperValve(void){
     41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     420:	68c3      	ldr	r3, [r0, #12]
     422:	f100 0210 	add.w	r2, r0, #16
     426:	f103 0140 	add.w	r1, r3, #64	; 0x40
     42a:	681f      	ldr	r7, [r3, #0]
     42c:	685e      	ldr	r6, [r3, #4]
     42e:	689d      	ldr	r5, [r3, #8]
     430:	68dc      	ldr	r4, [r3, #12]
     432:	6017      	str	r7, [r2, #0]
     434:	6056      	str	r6, [r2, #4]
     436:	6095      	str	r5, [r2, #8]
     438:	60d4      	str	r4, [r2, #12]
     43a:	3310      	adds	r3, #16
     43c:	3210      	adds	r2, #16
     43e:	428b      	cmp	r3, r1
     440:	d1f3      	bne.n	42a <_ZN16Commands_Handler22CommandSetFlapperValveEv+0xe>
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task == kHVACCommandFlapperValve);
     442:	7d43      	ldrb	r3, [r0, #21]
     444:	2b4f      	cmp	r3, #79	; 0x4f
     446:	bf0c      	ite	eq
     448:	2701      	moveq	r7, #1
     44a:	2700      	movne	r7, #0
	if (result){
     44c:	d002      	beq.n	454 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x38>
	}else{

	}
	
	return result;
}
     44e:	4638      	mov	r0, r7
     450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     454:	4e0c      	ldr	r6, [pc, #48]	; (488 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x6c>)
     456:	f100 0516 	add.w	r5, r0, #22
     45a:	f100 0418 	add.w	r4, r0, #24
					flapper.valve[i]->StopControlling();
     45e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 48c <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x70>
					flapper.valve[i]->StartControlling() ;
     462:	f8df 802c 	ldr.w	r8, [pc, #44]	; 490 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x74>
     466:	e003      	b.n	470 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x54>
     468:	47c0      	blx	r8
     46a:	3501      	adds	r5, #1
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     46c:	42a5      	cmp	r5, r4
     46e:	d0ee      	beq.n	44e <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x32>
			if (flapper.valve[i]->isOK)
     470:	f856 0b04 	ldr.w	r0, [r6], #4
     474:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     478:	2b00      	cmp	r3, #0
     47a:	d0f6      	beq.n	46a <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4e>
				if ((data&(0x01))>0)
     47c:	782b      	ldrb	r3, [r5, #0]
     47e:	f013 0f01 	tst.w	r3, #1
     482:	d1f1      	bne.n	468 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4c>
					flapper.valve[i]->StopControlling();
     484:	47c8      	blx	r9
     486:	e7f0      	b.n	46a <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4e>
     488:	20002058 	.word	0x20002058
     48c:	00010bc5 	.word	0x00010bc5
     490:	00010da9 	.word	0x00010da9

00000494 <_ZN16Commands_Handler25CommandSetFlapperPositionEv>:

bool  Commands_Handler::CommandSetFlapperPosition(void){
     494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     498:	68c3      	ldr	r3, [r0, #12]
     49a:	f100 0210 	add.w	r2, r0, #16
     49e:	f103 0140 	add.w	r1, r3, #64	; 0x40
     4a2:	681f      	ldr	r7, [r3, #0]
     4a4:	685e      	ldr	r6, [r3, #4]
     4a6:	689d      	ldr	r5, [r3, #8]
     4a8:	68dc      	ldr	r4, [r3, #12]
     4aa:	6017      	str	r7, [r2, #0]
     4ac:	6056      	str	r6, [r2, #4]
     4ae:	6095      	str	r5, [r2, #8]
     4b0:	60d4      	str	r4, [r2, #12]
     4b2:	3310      	adds	r3, #16
     4b4:	3210      	adds	r2, #16
     4b6:	428b      	cmp	r3, r1
     4b8:	d1f3      	bne.n	4a2 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0xe>
	

	bool	result(message64.header.task == kHVACWriteSetpointFlapperValve);
     4ba:	7d43      	ldrb	r3, [r0, #21]
     4bc:	2b50      	cmp	r3, #80	; 0x50
     4be:	bf0c      	ite	eq
     4c0:	2701      	moveq	r7, #1
     4c2:	2700      	movne	r7, #0
	if (result){
     4c4:	d002      	beq.n	4cc <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x38>
	}else{

	}
	
	return result;
}
     4c6:	4638      	mov	r0, r7
     4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4cc:	4d0f      	ldr	r5, [pc, #60]	; (50c <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x78>)
     4ce:	f100 0616 	add.w	r6, r0, #22
     4d2:	f100 0418 	add.w	r4, r0, #24
				flapper.valve[i]->doPeriodicTask=false;
     4d6:	f04f 0900 	mov.w	r9, #0
					flapper.valve[i]->StartControlling(data);
     4da:	f8df a034 	ldr.w	sl, [pc, #52]	; 510 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x7c>
     4de:	e007      	b.n	4f0 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x5c>
				flapper.valve[i]->doPeriodicTask=false;
     4e0:	f8d8 3000 	ldr.w	r3, [r8]
     4e4:	f883 9079 	strb.w	r9, [r3, #121]	; 0x79
     4e8:	3504      	adds	r5, #4
     4ea:	3601      	adds	r6, #1
		for ( int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     4ec:	42a6      	cmp	r6, r4
     4ee:	d0ea      	beq.n	4c6 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x32>
     4f0:	46a8      	mov	r8, r5
			if (flapper.valve[i]->isOK)
     4f2:	6828      	ldr	r0, [r5, #0]
     4f4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     4f8:	2b00      	cmp	r3, #0
     4fa:	d0f5      	beq.n	4e8 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x54>
				if (flapper.valve[i]->controllerEnabled)
     4fc:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
     500:	2b00      	cmp	r3, #0
     502:	d0ed      	beq.n	4e0 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x4c>
					flapper.valve[i]->StartControlling(data);
     504:	7831      	ldrb	r1, [r6, #0]
     506:	47d0      	blx	sl
     508:	e7ea      	b.n	4e0 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x4c>
     50a:	bf00      	nop
     50c:	20002058 	.word	0x20002058
     510:	00010c09 	.word	0x00010c09

00000514 <_ZN16Commands_Handler22CommandWriteParametersEv>:

	}
	
	return result;
}
bool Commands_Handler::CommandWriteParameters(void){
     514:	b510      	push	{r4, lr}

	uint32_t	w,r;
	int n=sizeof(HVACMessageHeader);
	HVACMessageHeader hm;
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     516:	68c3      	ldr	r3, [r0, #12]
     518:	6819      	ldr	r1, [r3, #0]
     51a:	6041      	str	r1, [r0, #4]
     51c:	889c      	ldrh	r4, [r3, #4]
     51e:	7999      	ldrb	r1, [r3, #6]
     520:	8104      	strh	r4, [r0, #8]
     522:	7281      	strb	r1, [r0, #10]
	
	bool	result(singleTaskMessage.header.task == kGAINCommandWriteParameters);
	if (result){
     524:	7a42      	ldrb	r2, [r0, #9]
     526:	2a47      	cmp	r2, #71	; 0x47
     528:	d001      	beq.n	52e <_ZN16Commands_Handler22CommandWriteParametersEv+0x1a>
	bool	result(singleTaskMessage.header.task == kGAINCommandWriteParameters);
     52a:	2000      	movs	r0, #0
		}else{

	}
	
	return result;
}
     52c:	bd10      	pop	{r4, pc}
		memcpy((uint8_t*)&parameters,&usbMessageBuffer[n],sizeof(UserParameters));
     52e:	88db      	ldrh	r3, [r3, #6]
     530:	4601      	mov	r1, r0
     532:	f821 3f57 	strh.w	r3, [r1, #87]!
		r=memory.SaveParameters(parameters);
     536:	4803      	ldr	r0, [pc, #12]	; (544 <_ZN16Commands_Handler22CommandWriteParametersEv+0x30>)
     538:	4b03      	ldr	r3, [pc, #12]	; (548 <_ZN16Commands_Handler22CommandWriteParametersEv+0x34>)
     53a:	4798      	blx	r3
		result=(bool)(r==0);
     53c:	fab0 f080 	clz	r0, r0
     540:	0940      	lsrs	r0, r0, #5
     542:	bd10      	pop	{r4, pc}
     544:	20003700 	.word	0x20003700
     548:	00011f0d 	.word	0x00011f0d

0000054c <_ZN16Commands_Handler17CommandSetHeatersEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetHeaters(void){
     54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     550:	68c3      	ldr	r3, [r0, #12]
     552:	6819      	ldr	r1, [r3, #0]
     554:	6041      	str	r1, [r0, #4]
     556:	8899      	ldrh	r1, [r3, #4]
     558:	799b      	ldrb	r3, [r3, #6]
     55a:	8101      	strh	r1, [r0, #8]
     55c:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == kHVACCommandSetHeaters);
     55e:	7a43      	ldrb	r3, [r0, #9]
     560:	2b49      	cmp	r3, #73	; 0x49
     562:	bf0c      	ite	eq
     564:	f04f 0a01 	moveq.w	sl, #1
     568:	f04f 0a00 	movne.w	sl, #0
	if (result){
     56c:	d002      	beq.n	574 <_ZN16Commands_Handler17CommandSetHeatersEv+0x28>
			
		}
	}
	
	return result;
}
     56e:	4650      	mov	r0, sl
     570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lastEnableHeaters=enableHeaters;
     574:	f890 205b 	ldrb.w	r2, [r0, #91]	; 0x5b
     578:	f880 205a 	strb.w	r2, [r0, #90]	; 0x5a
		enableHeaters=singleTaskMessage.description;
     57c:	7a83      	ldrb	r3, [r0, #10]
     57e:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
		if (enableHeaters!=lastEnableHeaters)
     582:	429a      	cmp	r2, r3
     584:	d0f3      	beq.n	56e <_ZN16Commands_Handler17CommandSetHeatersEv+0x22>
     586:	4605      	mov	r5, r0
     588:	2600      	movs	r6, #0
					heaters.module[j]->SetRelay(i,powerOn);
     58a:	f8df 9030 	ldr.w	r9, [pc, #48]	; 5bc <_ZN16Commands_Handler17CommandSetHeatersEv+0x70>
     58e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 5c0 <_ZN16Commands_Handler17CommandSetHeatersEv+0x74>
     592:	2400      	movs	r4, #0
     594:	eb06 0709 	add.w	r7, r6, r9
					powerOn=enableHeaters&(0x01<<(i+4*j));
     598:	f895 205b 	ldrb.w	r2, [r5, #91]	; 0x5b
     59c:	1933      	adds	r3, r6, r4
     59e:	411a      	asrs	r2, r3
     5a0:	f002 0201 	and.w	r2, r2, #1
     5a4:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
					heaters.module[j]->SetRelay(i,powerOn);
     5a8:	b2e1      	uxtb	r1, r4
     5aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
     5ac:	47c0      	blx	r8
     5ae:	3401      	adds	r4, #1
				for (uint8_t i = 0; i < 4; i++)
     5b0:	2c04      	cmp	r4, #4
     5b2:	d1f1      	bne.n	598 <_ZN16Commands_Handler17CommandSetHeatersEv+0x4c>
     5b4:	3604      	adds	r6, #4
			for (uint8_t j = 0; j < 2; j++)
     5b6:	2e08      	cmp	r6, #8
     5b8:	d1eb      	bne.n	592 <_ZN16Commands_Handler17CommandSetHeatersEv+0x46>
     5ba:	e7d8      	b.n	56e <_ZN16Commands_Handler17CommandSetHeatersEv+0x22>
     5bc:	20001410 	.word	0x20001410
     5c0:	00011c0d 	.word	0x00011c0d

000005c4 <_ZN16Commands_Handler18CommandSetScavengeEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetScavenge(void){
     5c4:	b510      	push	{r4, lr}


	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     5c6:	68c3      	ldr	r3, [r0, #12]
     5c8:	6819      	ldr	r1, [r3, #0]
     5ca:	6041      	str	r1, [r0, #4]
     5cc:	8899      	ldrh	r1, [r3, #4]
     5ce:	799b      	ldrb	r3, [r3, #6]
     5d0:	8101      	strh	r1, [r0, #8]
     5d2:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == kHVACCommandSetScavenge);
     5d4:	7a43      	ldrb	r3, [r0, #9]
     5d6:	2b53      	cmp	r3, #83	; 0x53
     5d8:	bf0c      	ite	eq
     5da:	2401      	moveq	r4, #1
     5dc:	2400      	movne	r4, #0
	if (result){
     5de:	d001      	beq.n	5e4 <_ZN16Commands_Handler18CommandSetScavengeEv+0x20>
		scavenge.SetEnable(powerOn);
	
	}
	
	return result;
     5e0:	4620      	mov	r0, r4
     5e2:	bd10      	pop	{r4, pc}
		data_byte=singleTaskMessage.description;
     5e4:	7a81      	ldrb	r1, [r0, #10]
     5e6:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
		powerOn=(data_byte&(0x02))>0;
     5ea:	f3c1 0140 	ubfx	r1, r1, #1, #1
     5ee:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
		scavenge.SetEnable(powerOn);
     5f2:	4802      	ldr	r0, [pc, #8]	; (5fc <_ZN16Commands_Handler18CommandSetScavengeEv+0x38>)
     5f4:	4b02      	ldr	r3, [pc, #8]	; (600 <_ZN16Commands_Handler18CommandSetScavengeEv+0x3c>)
     5f6:	4798      	blx	r3
     5f8:	e7f2      	b.n	5e0 <_ZN16Commands_Handler18CommandSetScavengeEv+0x1c>
     5fa:	bf00      	nop
     5fc:	20009af0 	.word	0x20009af0
     600:	00012085 	.word	0x00012085

00000604 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev>:
     604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     608:	4c2b      	ldr	r4, [pc, #172]	; (6b8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb4>)
     60a:	492c      	ldr	r1, [pc, #176]	; (6bc <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb8>)
     60c:	4620      	mov	r0, r4
     60e:	4b2c      	ldr	r3, [pc, #176]	; (6c0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xbc>)
     610:	4798      	blx	r3
     612:	4e2c      	ldr	r6, [pc, #176]	; (6c4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc0>)
     614:	4632      	mov	r2, r6
     616:	492c      	ldr	r1, [pc, #176]	; (6c8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc4>)
     618:	4620      	mov	r0, r4
     61a:	4d2c      	ldr	r5, [pc, #176]	; (6cc <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc8>)
     61c:	47a8      	blx	r5
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     61e:	f104 0918 	add.w	r9, r4, #24
     622:	492b      	ldr	r1, [pc, #172]	; (6d0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xcc>)
     624:	4648      	mov	r0, r9
     626:	4f2b      	ldr	r7, [pc, #172]	; (6d4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xd0>)
     628:	47b8      	blx	r7
     62a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 6f4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xf0>
     62e:	4632      	mov	r2, r6
     630:	4641      	mov	r1, r8
     632:	4648      	mov	r0, r9
     634:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     636:	f104 0938 	add.w	r9, r4, #56	; 0x38
     63a:	4927      	ldr	r1, [pc, #156]	; (6d8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xd4>)
     63c:	4648      	mov	r0, r9
     63e:	47b8      	blx	r7
     640:	4632      	mov	r2, r6
     642:	4641      	mov	r1, r8
     644:	4648      	mov	r0, r9
     646:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     648:	f104 0958 	add.w	r9, r4, #88	; 0x58
     64c:	4923      	ldr	r1, [pc, #140]	; (6dc <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xd8>)
     64e:	4648      	mov	r0, r9
     650:	47b8      	blx	r7
     652:	4632      	mov	r2, r6
     654:	4641      	mov	r1, r8
     656:	4648      	mov	r0, r9
     658:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     65a:	f104 0978 	add.w	r9, r4, #120	; 0x78
     65e:	4920      	ldr	r1, [pc, #128]	; (6e0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xdc>)
     660:	4648      	mov	r0, r9
     662:	47b8      	blx	r7
     664:	4632      	mov	r2, r6
     666:	4641      	mov	r1, r8
     668:	4648      	mov	r0, r9
     66a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     66c:	f104 0998 	add.w	r9, r4, #152	; 0x98
     670:	491c      	ldr	r1, [pc, #112]	; (6e4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xe0>)
     672:	4648      	mov	r0, r9
     674:	47b8      	blx	r7
     676:	4632      	mov	r2, r6
     678:	4641      	mov	r1, r8
     67a:	4648      	mov	r0, r9
     67c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     67e:	f104 09b8 	add.w	r9, r4, #184	; 0xb8
     682:	4919      	ldr	r1, [pc, #100]	; (6e8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xe4>)
     684:	4648      	mov	r0, r9
     686:	47b8      	blx	r7
     688:	4632      	mov	r2, r6
     68a:	4641      	mov	r1, r8
     68c:	4648      	mov	r0, r9
     68e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     690:	f104 09d8 	add.w	r9, r4, #216	; 0xd8
     694:	4915      	ldr	r1, [pc, #84]	; (6ec <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xe8>)
     696:	4648      	mov	r0, r9
     698:	47b8      	blx	r7
     69a:	4632      	mov	r2, r6
     69c:	4641      	mov	r1, r8
     69e:	4648      	mov	r0, r9
     6a0:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     6a2:	34f8      	adds	r4, #248	; 0xf8
     6a4:	4912      	ldr	r1, [pc, #72]	; (6f0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xec>)
     6a6:	4620      	mov	r0, r4
     6a8:	47b8      	blx	r7
     6aa:	4632      	mov	r2, r6
     6ac:	4641      	mov	r1, r8
     6ae:	4620      	mov	r0, r4
     6b0:	47a8      	blx	r5
     6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     6b6:	bf00      	nop
     6b8:	20000658 	.word	0x20000658
     6bc:	2000a2f0 	.word	0x2000a2f0
     6c0:	0000debd 	.word	0x0000debd
     6c4:	20000000 	.word	0x20000000
     6c8:	0000ded9 	.word	0x0000ded9
     6cc:	00013cdd 	.word	0x00013cdd
     6d0:	2000a1c0 	.word	0x2000a1c0
     6d4:	0000e575 	.word	0x0000e575
     6d8:	2000a254 	.word	0x2000a254
     6dc:	2000a378 	.word	0x2000a378
     6e0:	2000a274 	.word	0x2000a274
     6e4:	2000a338 	.word	0x2000a338
     6e8:	2000a358 	.word	0x2000a358
     6ec:	2000a230 	.word	0x2000a230
     6f0:	2000a2d0 	.word	0x2000a2d0
     6f4:	0000e5ad 	.word	0x0000e5ad

000006f8 <_ZN16Commands_Handler17CommandFansStatusEv>:
bool Commands_Handler::CommandFansStatus(){
     6f8:	b530      	push	{r4, r5, lr}
     6fa:	b083      	sub	sp, #12
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     6fc:	68c3      	ldr	r3, [r0, #12]
     6fe:	6819      	ldr	r1, [r3, #0]
     700:	6041      	str	r1, [r0, #4]
     702:	8899      	ldrh	r1, [r3, #4]
     704:	799b      	ldrb	r3, [r3, #6]
     706:	8101      	strh	r1, [r0, #8]
     708:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandRedStatusFans);
     70a:	7a43      	ldrb	r3, [r0, #9]
     70c:	2b51      	cmp	r3, #81	; 0x51
     70e:	bf0c      	ite	eq
     710:	2501      	moveq	r5, #1
     712:	2500      	movne	r5, #0
	if (result){
     714:	d002      	beq.n	71c <_ZN16Commands_Handler17CommandFansStatusEv+0x24>
}
     716:	4628      	mov	r0, r5
     718:	b003      	add	sp, #12
     71a:	bd30      	pop	{r4, r5, pc}
     71c:	4604      	mov	r4, r0
		fans.GetGPIOSValues(gpios);
     71e:	4669      	mov	r1, sp
     720:	4808      	ldr	r0, [pc, #32]	; (744 <_ZN16Commands_Handler17CommandFansStatusEv+0x4c>)
     722:	4b09      	ldr	r3, [pc, #36]	; (748 <_ZN16Commands_Handler17CommandFansStatusEv+0x50>)
     724:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,gpios);
     726:	6823      	ldr	r3, [r4, #0]
     728:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     72c:	466a      	mov	r2, sp
     72e:	68e1      	ldr	r1, [r4, #12]
     730:	4420      	add	r0, r4
     732:	4b06      	ldr	r3, [pc, #24]	; (74c <_ZN16Commands_Handler17CommandFansStatusEv+0x54>)
     734:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     736:	2240      	movs	r2, #64	; 0x40
     738:	68e1      	ldr	r1, [r4, #12]
     73a:	4805      	ldr	r0, [pc, #20]	; (750 <_ZN16Commands_Handler17CommandFansStatusEv+0x58>)
     73c:	4b05      	ldr	r3, [pc, #20]	; (754 <_ZN16Commands_Handler17CommandFansStatusEv+0x5c>)
     73e:	4798      	blx	r3
     740:	e7e9      	b.n	716 <_ZN16Commands_Handler17CommandFansStatusEv+0x1e>
     742:	bf00      	nop
     744:	20001cfc 	.word	0x20001cfc
     748:	0000f87d 	.word	0x0000f87d
     74c:	00000cf1 	.word	0x00000cf1
     750:	20001a04 	.word	0x20001a04
     754:	0000efa5 	.word	0x0000efa5

00000758 <_ZN16Commands_Handler22CommandReadFlapperDataEv>:
bool Commands_Handler::CommandReadFlapperData(void){
     758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     75c:	b08d      	sub	sp, #52	; 0x34
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     75e:	68c3      	ldr	r3, [r0, #12]
     760:	6819      	ldr	r1, [r3, #0]
     762:	6041      	str	r1, [r0, #4]
     764:	8899      	ldrh	r1, [r3, #4]
     766:	799b      	ldrb	r3, [r3, #6]
     768:	8101      	strh	r1, [r0, #8]
     76a:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACReadPositionFlapperValve);
     76c:	7a43      	ldrb	r3, [r0, #9]
     76e:	2b4e      	cmp	r3, #78	; 0x4e
     770:	bf0c      	ite	eq
     772:	f04f 0801 	moveq.w	r8, #1
     776:	f04f 0800 	movne.w	r8, #0
	if (result){
     77a:	d003      	beq.n	784 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x2c>
}
     77c:	4640      	mov	r0, r8
     77e:	b00d      	add	sp, #52	; 0x34
     780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     784:	4604      	mov	r4, r0
     786:	4e19      	ldr	r6, [pc, #100]	; (7ec <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x94>)
	if (result){
     788:	2500      	movs	r5, #0
				flapper.valve[i]->UpdateFlapperValveData();
     78a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 7fc <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xa4>
			if (flapper.valve[i]->isOK)
     78e:	6830      	ldr	r0, [r6, #0]
     790:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     794:	b98b      	cbnz	r3, 7ba <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x62>
     796:	3604      	adds	r6, #4
     798:	3515      	adds	r5, #21
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     79a:	2d2a      	cmp	r5, #42	; 0x2a
     79c:	d1f7      	bne.n	78e <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x36>
		CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&fvds[0]);
     79e:	6823      	ldr	r3, [r4, #0]
     7a0:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     7a4:	aa01      	add	r2, sp, #4
     7a6:	68e1      	ldr	r1, [r4, #12]
     7a8:	4420      	add	r0, r4
     7aa:	4b11      	ldr	r3, [pc, #68]	; (7f0 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x98>)
     7ac:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     7ae:	2240      	movs	r2, #64	; 0x40
     7b0:	68e1      	ldr	r1, [r4, #12]
     7b2:	4810      	ldr	r0, [pc, #64]	; (7f4 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x9c>)
     7b4:	4b10      	ldr	r3, [pc, #64]	; (7f8 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xa0>)
     7b6:	4798      	blx	r3
     7b8:	e7e0      	b.n	77c <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x24>
				flapper.valve[i]->UpdateFlapperValveData();
     7ba:	47c8      	blx	r9
				fvds[i]= flapper.valve[i]->dataStruct;
     7bc:	6837      	ldr	r7, [r6, #0]
     7be:	ab01      	add	r3, sp, #4
     7c0:	eb05 0e03 	add.w	lr, r5, r3
     7c4:	3784      	adds	r7, #132	; 0x84
     7c6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     7c8:	f10d 0c04 	add.w	ip, sp, #4
     7cc:	f84c 0005 	str.w	r0, [ip, r5]
     7d0:	f8ce 1004 	str.w	r1, [lr, #4]
     7d4:	f8ce 2008 	str.w	r2, [lr, #8]
     7d8:	f8ce 300c 	str.w	r3, [lr, #12]
     7dc:	6838      	ldr	r0, [r7, #0]
     7de:	f8ce 0010 	str.w	r0, [lr, #16]
     7e2:	793b      	ldrb	r3, [r7, #4]
     7e4:	f88e 3014 	strb.w	r3, [lr, #20]
     7e8:	e7d5      	b.n	796 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x3e>
     7ea:	bf00      	nop
     7ec:	20002058 	.word	0x20002058
     7f0:	00000cf1 	.word	0x00000cf1
     7f4:	20001a04 	.word	0x20001a04
     7f8:	0000efa5 	.word	0x0000efa5
     7fc:	00010e05 	.word	0x00010e05

00000800 <_ZN16Commands_Handler21CommandReadParametersEv>:
bool Commands_Handler::CommandReadParameters(){
     800:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     802:	68c3      	ldr	r3, [r0, #12]
     804:	6819      	ldr	r1, [r3, #0]
     806:	6041      	str	r1, [r0, #4]
     808:	8899      	ldrh	r1, [r3, #4]
     80a:	799b      	ldrb	r3, [r3, #6]
     80c:	8101      	strh	r1, [r0, #8]
     80e:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kGAINCommandReadParameters);
     810:	7a43      	ldrb	r3, [r0, #9]
     812:	2b48      	cmp	r3, #72	; 0x48
     814:	bf0c      	ite	eq
     816:	2501      	moveq	r5, #1
     818:	2500      	movne	r5, #0
	if (result){
     81a:	d001      	beq.n	820 <_ZN16Commands_Handler21CommandReadParametersEv+0x20>
}
     81c:	4628      	mov	r0, r5
     81e:	bd38      	pop	{r3, r4, r5, pc}
     820:	4604      	mov	r4, r0
		memory.ReadParameters(parameters);
     822:	f100 0157 	add.w	r1, r0, #87	; 0x57
     826:	4811      	ldr	r0, [pc, #68]	; (86c <_ZN16Commands_Handler21CommandReadParametersEv+0x6c>)
     828:	4b11      	ldr	r3, [pc, #68]	; (870 <_ZN16Commands_Handler21CommandReadParametersEv+0x70>)
     82a:	4798      	blx	r3
		memcpy(usbMessageBuffer,(void*)&hm,n);
     82c:	68e3      	ldr	r3, [r4, #12]
     82e:	4a11      	ldr	r2, [pc, #68]	; (874 <_ZN16Commands_Handler21CommandReadParametersEv+0x74>)
     830:	601a      	str	r2, [r3, #0]
     832:	2200      	movs	r2, #0
     834:	711a      	strb	r2, [r3, #4]
     836:	715a      	strb	r2, [r3, #5]
		memcpy((uint8_t*)&usbMessageBuffer[n],(void*)&parameters,sizeof(UserParameters));
     838:	68e3      	ldr	r3, [r4, #12]
     83a:	f8b4 2057 	ldrh.w	r2, [r4, #87]	; 0x57
     83e:	80da      	strh	r2, [r3, #6]
		is_stand_alone=flapper.IsStandAlone();
     840:	480d      	ldr	r0, [pc, #52]	; (878 <_ZN16Commands_Handler21CommandReadParametersEv+0x78>)
     842:	4b0e      	ldr	r3, [pc, #56]	; (87c <_ZN16Commands_Handler21CommandReadParametersEv+0x7c>)
     844:	4798      	blx	r3
     846:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
		if (is_stand_alone)
     84a:	b148      	cbz	r0, 860 <_ZN16Commands_Handler21CommandReadParametersEv+0x60>
			usbMessageBuffer[n+sizeof(UserParameters)]=parameters.flapperValveStandAloneMinimumPosition;
     84c:	68e3      	ldr	r3, [r4, #12]
     84e:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
     852:	721a      	strb	r2, [r3, #8]
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     854:	2240      	movs	r2, #64	; 0x40
     856:	68e1      	ldr	r1, [r4, #12]
     858:	4809      	ldr	r0, [pc, #36]	; (880 <_ZN16Commands_Handler21CommandReadParametersEv+0x80>)
     85a:	4b0a      	ldr	r3, [pc, #40]	; (884 <_ZN16Commands_Handler21CommandReadParametersEv+0x84>)
     85c:	4798      	blx	r3
     85e:	e7dd      	b.n	81c <_ZN16Commands_Handler21CommandReadParametersEv+0x1c>
			usbMessageBuffer[n+sizeof(UserParameters)]=parameters.flapperValveMinimumPosition;
     860:	68e3      	ldr	r3, [r4, #12]
     862:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
     866:	721a      	strb	r2, [r3, #8]
     868:	e7f4      	b.n	854 <_ZN16Commands_Handler21CommandReadParametersEv+0x54>
     86a:	bf00      	nop
     86c:	20003700 	.word	0x20003700
     870:	00011ddd 	.word	0x00011ddd
     874:	61626364 	.word	0x61626364
     878:	20001f74 	.word	0x20001f74
     87c:	0000fbcd 	.word	0x0000fbcd
     880:	20001a04 	.word	0x20001a04
     884:	0000efa5 	.word	0x0000efa5

00000888 <_ZN16Commands_Handler23CommandReadHeaterStatusEv>:
bool Commands_Handler::CommandReadHeaterStatus(){
     888:	b570      	push	{r4, r5, r6, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     88a:	68c3      	ldr	r3, [r0, #12]
     88c:	6819      	ldr	r1, [r3, #0]
     88e:	6041      	str	r1, [r0, #4]
     890:	8899      	ldrh	r1, [r3, #4]
     892:	799b      	ldrb	r3, [r3, #6]
     894:	8101      	strh	r1, [r0, #8]
     896:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadHeaterStatus);
     898:	7a43      	ldrb	r3, [r0, #9]
     89a:	2b4a      	cmp	r3, #74	; 0x4a
     89c:	bf0c      	ite	eq
     89e:	2501      	moveq	r5, #1
     8a0:	2500      	movne	r5, #0
	if (result){
     8a2:	d001      	beq.n	8a8 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x20>
}
     8a4:	4628      	mov	r0, r5
     8a6:	bd70      	pop	{r4, r5, r6, pc}
     8a8:	4604      	mov	r4, r0
		heaters.ReadAllGPIOs(heater_data_array);
     8aa:	f100 0653 	add.w	r6, r0, #83	; 0x53
     8ae:	4631      	mov	r1, r6
     8b0:	4808      	ldr	r0, [pc, #32]	; (8d4 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x4c>)
     8b2:	4b09      	ldr	r3, [pc, #36]	; (8d8 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x50>)
     8b4:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,heater_data_array);
     8b6:	6823      	ldr	r3, [r4, #0]
     8b8:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     8bc:	4632      	mov	r2, r6
     8be:	68e1      	ldr	r1, [r4, #12]
     8c0:	4420      	add	r0, r4
     8c2:	4b06      	ldr	r3, [pc, #24]	; (8dc <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x54>)
     8c4:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     8c6:	2240      	movs	r2, #64	; 0x40
     8c8:	68e1      	ldr	r1, [r4, #12]
     8ca:	4805      	ldr	r0, [pc, #20]	; (8e0 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x58>)
     8cc:	4b05      	ldr	r3, [pc, #20]	; (8e4 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x5c>)
     8ce:	4798      	blx	r3
     8d0:	e7e8      	b.n	8a4 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x1c>
     8d2:	bf00      	nop
     8d4:	20001410 	.word	0x20001410
     8d8:	0000de11 	.word	0x0000de11
     8dc:	00000cf1 	.word	0x00000cf1
     8e0:	20001a04 	.word	0x20001a04
     8e4:	0000efa5 	.word	0x0000efa5

000008e8 <_ZN16Commands_Handler25CommandReadScavengeStatusEv>:
bool Commands_Handler::CommandReadScavengeStatus(void){
     8e8:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     8ea:	68c3      	ldr	r3, [r0, #12]
     8ec:	6819      	ldr	r1, [r3, #0]
     8ee:	6041      	str	r1, [r0, #4]
     8f0:	8899      	ldrh	r1, [r3, #4]
     8f2:	799b      	ldrb	r3, [r3, #6]
     8f4:	8101      	strh	r1, [r0, #8]
     8f6:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadScavengeStatus);
     8f8:	7a43      	ldrb	r3, [r0, #9]
     8fa:	2b52      	cmp	r3, #82	; 0x52
     8fc:	bf0c      	ite	eq
     8fe:	2501      	moveq	r5, #1
     900:	2500      	movne	r5, #0
	if (result){
     902:	d001      	beq.n	908 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x20>
}
     904:	4628      	mov	r0, r5
     906:	bd38      	pop	{r3, r4, r5, pc}
     908:	4604      	mov	r4, r0
		data_byte=scavenge.ReadStatus();
     90a:	4809      	ldr	r0, [pc, #36]	; (930 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x48>)
     90c:	4b09      	ldr	r3, [pc, #36]	; (934 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x4c>)
     90e:	4798      	blx	r3
     910:	4622      	mov	r2, r4
     912:	f802 0f5d 	strb.w	r0, [r2, #93]!
		CreateFullBufferMessage(usbMessageBuffer,&data_byte);
     916:	6823      	ldr	r3, [r4, #0]
     918:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     91c:	68e1      	ldr	r1, [r4, #12]
     91e:	4420      	add	r0, r4
     920:	4b05      	ldr	r3, [pc, #20]	; (938 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x50>)
     922:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     924:	2240      	movs	r2, #64	; 0x40
     926:	68e1      	ldr	r1, [r4, #12]
     928:	4804      	ldr	r0, [pc, #16]	; (93c <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x54>)
     92a:	4b05      	ldr	r3, [pc, #20]	; (940 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x58>)
     92c:	4798      	blx	r3
     92e:	e7e9      	b.n	904 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x1c>
     930:	20009af0 	.word	0x20009af0
     934:	00012061 	.word	0x00012061
     938:	00000cf1 	.word	0x00000cf1
     93c:	20001a04 	.word	0x20001a04
     940:	0000efa5 	.word	0x0000efa5

00000944 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     944:	e7fe      	b.n	944 <Dummy_Handler>
	...

00000948 <Reset_Handler>:
{
     948:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     94a:	4b17      	ldr	r3, [pc, #92]	; (9a8 <Reset_Handler+0x60>)
     94c:	4a17      	ldr	r2, [pc, #92]	; (9ac <Reset_Handler+0x64>)
     94e:	429a      	cmp	r2, r3
     950:	d010      	beq.n	974 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     952:	4b17      	ldr	r3, [pc, #92]	; (9b0 <Reset_Handler+0x68>)
     954:	4a14      	ldr	r2, [pc, #80]	; (9a8 <Reset_Handler+0x60>)
     956:	429a      	cmp	r2, r3
     958:	d20c      	bcs.n	974 <Reset_Handler+0x2c>
     95a:	3b01      	subs	r3, #1
     95c:	1a9b      	subs	r3, r3, r2
     95e:	f023 0303 	bic.w	r3, r3, #3
     962:	3304      	adds	r3, #4
     964:	4413      	add	r3, r2
     966:	4911      	ldr	r1, [pc, #68]	; (9ac <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     968:	f851 0b04 	ldr.w	r0, [r1], #4
     96c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     970:	429a      	cmp	r2, r3
     972:	d1f9      	bne.n	968 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     974:	4b0f      	ldr	r3, [pc, #60]	; (9b4 <Reset_Handler+0x6c>)
     976:	4a10      	ldr	r2, [pc, #64]	; (9b8 <Reset_Handler+0x70>)
     978:	429a      	cmp	r2, r3
     97a:	d20a      	bcs.n	992 <Reset_Handler+0x4a>
     97c:	3b01      	subs	r3, #1
     97e:	1a9b      	subs	r3, r3, r2
     980:	f023 0303 	bic.w	r3, r3, #3
     984:	3304      	adds	r3, #4
     986:	4413      	add	r3, r2
                *pDest++ = 0;
     988:	2100      	movs	r1, #0
     98a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     98e:	4293      	cmp	r3, r2
     990:	d1fb      	bne.n	98a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     992:	4a0a      	ldr	r2, [pc, #40]	; (9bc <Reset_Handler+0x74>)
     994:	4b0a      	ldr	r3, [pc, #40]	; (9c0 <Reset_Handler+0x78>)
     996:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     99a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     99c:	4b09      	ldr	r3, [pc, #36]	; (9c4 <Reset_Handler+0x7c>)
     99e:	4798      	blx	r3
        main();
     9a0:	4b09      	ldr	r3, [pc, #36]	; (9c8 <Reset_Handler+0x80>)
     9a2:	4798      	blx	r3
     9a4:	e7fe      	b.n	9a4 <Reset_Handler+0x5c>
     9a6:	bf00      	nop
     9a8:	20000000 	.word	0x20000000
     9ac:	00014c00 	.word	0x00014c00
     9b0:	2000063c 	.word	0x2000063c
     9b4:	2000a478 	.word	0x2000a478
     9b8:	2000063c 	.word	0x2000063c
     9bc:	e000ed00 	.word	0xe000ed00
     9c0:	00000000 	.word	0x00000000
     9c4:	0001420d 	.word	0x0001420d
     9c8:	000009fd 	.word	0x000009fd

000009cc <_ZL15FirmwareIsAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9cc:	2280      	movs	r2, #128	; 0x80
     9ce:	4b09      	ldr	r3, [pc, #36]	; (9f4 <_ZL15FirmwareIsAlivePK10timer_task+0x28>)
     9d0:	619a      	str	r2, [r3, #24]

static void FirmwareIsAlive(const struct timer_task *const timer_task)
{
	gpio_set_pin_level(iAlcFwIsAlive,true);
	is_firmware_OK=true;
	if (counter_running==last_count)
     9d2:	4b09      	ldr	r3, [pc, #36]	; (9f8 <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     9d4:	681a      	ldr	r2, [r3, #0]
     9d6:	685b      	ldr	r3, [r3, #4]
     9d8:	429a      	cmp	r2, r3
     9da:	d006      	beq.n	9ea <_ZL15FirmwareIsAlivePK10timer_task+0x1e>
		is_running=false;
	} 
	else
	{
		is_running=true;
		last_count=counter_running;
     9dc:	4b06      	ldr	r3, [pc, #24]	; (9f8 <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     9de:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     9e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     9e4:	4b03      	ldr	r3, [pc, #12]	; (9f4 <_ZL15FirmwareIsAlivePK10timer_task+0x28>)
     9e6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		gpio_toggle_pin_level(LED0);
		
	}
	
	localtimeout=true;
     9ea:	2201      	movs	r2, #1
     9ec:	4b02      	ldr	r3, [pc, #8]	; (9f8 <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     9ee:	721a      	strb	r2, [r3, #8]
     9f0:	4770      	bx	lr
     9f2:	bf00      	nop
     9f4:	41008000 	.word	0x41008000
     9f8:	20000770 	.word	0x20000770

000009fc <main>:




int main(void)		
{
     9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool gotNewTemperature=false;
	atmel_start_init();
     a00:	4b50      	ldr	r3, [pc, #320]	; (b44 <main+0x148>)
     a02:	4798      	blx	r3
	usb.Init();
     a04:	4850      	ldr	r0, [pc, #320]	; (b48 <main+0x14c>)
     a06:	4b51      	ldr	r3, [pc, #324]	; (b4c <main+0x150>)
     a08:	4798      	blx	r3
	//StartLivePulse();
	delay_ms(200);
     a0a:	20c8      	movs	r0, #200	; 0xc8
     a0c:	4b50      	ldr	r3, [pc, #320]	; (b50 <main+0x154>)
     a0e:	4798      	blx	r3
	memory.Init();
     a10:	4c50      	ldr	r4, [pc, #320]	; (b54 <main+0x158>)
     a12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     a16:	4620      	mov	r0, r4
     a18:	4b4f      	ldr	r3, [pc, #316]	; (b58 <main+0x15c>)
     a1a:	4798      	blx	r3
	memory.WriteDefaultParameters();
     a1c:	4620      	mov	r0, r4
     a1e:	4b4f      	ldr	r3, [pc, #316]	; (b5c <main+0x160>)
     a20:	4798      	blx	r3
	bool isOK=temperatures.Init();
     a22:	484f      	ldr	r0, [pc, #316]	; (b60 <main+0x164>)
     a24:	4b4f      	ldr	r3, [pc, #316]	; (b64 <main+0x168>)
     a26:	4798      	blx	r3
	if (isOK)
     a28:	b990      	cbnz	r0, a50 <main+0x54>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     a2e:	4b4e      	ldr	r3, [pc, #312]	; (b68 <main+0x16c>)
     a30:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	{
		temperatures.StartOneConversion();
	}
	gpio_set_pin_level(LED0,true);
	while (!flapper.Init())
     a34:	4e4d      	ldr	r6, [pc, #308]	; (b6c <main+0x170>)
     a36:	4d4e      	ldr	r5, [pc, #312]	; (b70 <main+0x174>)
	{
		delay_ms(DELAY_ERROR);
     a38:	4c45      	ldr	r4, [pc, #276]	; (b50 <main+0x154>)
	while (!flapper.Init())
     a3a:	4630      	mov	r0, r6
     a3c:	47a8      	blx	r5
     a3e:	b958      	cbnz	r0, a58 <main+0x5c>
		delay_ms(DELAY_ERROR);
     a40:	2064      	movs	r0, #100	; 0x64
     a42:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     a44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     a48:	4b47      	ldr	r3, [pc, #284]	; (b68 <main+0x16c>)
     a4a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     a4e:	e7f4      	b.n	a3a <main+0x3e>
		temperatures.StartOneConversion();
     a50:	4843      	ldr	r0, [pc, #268]	; (b60 <main+0x164>)
     a52:	4b48      	ldr	r3, [pc, #288]	; (b74 <main+0x178>)
     a54:	4798      	blx	r3
     a56:	e7e8      	b.n	a2a <main+0x2e>
		gpio_toggle_pin_level(LED0);
	}
	while(!fans.Init()){
     a58:	4e47      	ldr	r6, [pc, #284]	; (b78 <main+0x17c>)
     a5a:	4d48      	ldr	r5, [pc, #288]	; (b7c <main+0x180>)
		delay_ms(DELAY_ERROR);
     a5c:	4c3c      	ldr	r4, [pc, #240]	; (b50 <main+0x154>)
	while(!fans.Init()){
     a5e:	4630      	mov	r0, r6
     a60:	47a8      	blx	r5
     a62:	b938      	cbnz	r0, a74 <main+0x78>
		delay_ms(DELAY_ERROR);
     a64:	2064      	movs	r0, #100	; 0x64
     a66:	47a0      	blx	r4
     a68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     a6c:	4b3e      	ldr	r3, [pc, #248]	; (b68 <main+0x16c>)
     a6e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     a72:	e7f4      	b.n	a5e <main+0x62>
		gpio_toggle_pin_level(LED0);
		
	}
	fans.condesator->SetEnable(false);
     a74:	4c40      	ldr	r4, [pc, #256]	; (b78 <main+0x17c>)
     a76:	2100      	movs	r1, #0
     a78:	6e60      	ldr	r0, [r4, #100]	; 0x64
     a7a:	4b41      	ldr	r3, [pc, #260]	; (b80 <main+0x184>)
     a7c:	4798      	blx	r3
	fans.evaporator[0]->SetEnable(false);
     a7e:	2100      	movs	r1, #0
     a80:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     a82:	4d40      	ldr	r5, [pc, #256]	; (b84 <main+0x188>)
     a84:	47a8      	blx	r5
	fans.evaporator[1]->SetEnable(false);
     a86:	2100      	movs	r1, #0
     a88:	6e20      	ldr	r0, [r4, #96]	; 0x60
     a8a:	47a8      	blx	r5
// 	
	while(!heaters.Init()){
     a8c:	4e3e      	ldr	r6, [pc, #248]	; (b88 <main+0x18c>)
     a8e:	4d3f      	ldr	r5, [pc, #252]	; (b8c <main+0x190>)
		delay_ms(DELAY_ERROR);
     a90:	4c2f      	ldr	r4, [pc, #188]	; (b50 <main+0x154>)
	while(!heaters.Init()){
     a92:	4630      	mov	r0, r6
     a94:	47a8      	blx	r5
     a96:	b938      	cbnz	r0, aa8 <main+0xac>
		delay_ms(DELAY_ERROR);
     a98:	2064      	movs	r0, #100	; 0x64
     a9a:	47a0      	blx	r4
     a9c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     aa0:	4b31      	ldr	r3, [pc, #196]	; (b68 <main+0x16c>)
     aa2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     aa6:	e7f4      	b.n	a92 <main+0x96>

		gpio_toggle_pin_level(LED0);

			}
	while(!scavenge.Init()){
     aa8:	4e39      	ldr	r6, [pc, #228]	; (b90 <main+0x194>)
     aaa:	4d3a      	ldr	r5, [pc, #232]	; (b94 <main+0x198>)
		delay_ms(DELAY_ERROR);
     aac:	4c28      	ldr	r4, [pc, #160]	; (b50 <main+0x154>)
	while(!scavenge.Init()){
     aae:	4630      	mov	r0, r6
     ab0:	47a8      	blx	r5
     ab2:	b938      	cbnz	r0, ac4 <main+0xc8>
		delay_ms(DELAY_ERROR);
     ab4:	2064      	movs	r0, #100	; 0x64
     ab6:	47a0      	blx	r4
     ab8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     abc:	4b2a      	ldr	r3, [pc, #168]	; (b68 <main+0x16c>)
     abe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     ac2:	e7f4      	b.n	aae <main+0xb2>

		gpio_toggle_pin_level(LED0);

	}
	scavenge.SetEnable(false);
     ac4:	2100      	movs	r1, #0
     ac6:	4832      	ldr	r0, [pc, #200]	; (b90 <main+0x194>)
     ac8:	4b33      	ldr	r3, [pc, #204]	; (b98 <main+0x19c>)
     aca:	4798      	blx	r3

// 	heater.DisableIndex(2);

// 	heater.DisableIndex(3);

	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareIsAlive),1000);
     acc:	4c33      	ldr	r4, [pc, #204]	; (b9c <main+0x1a0>)
     ace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     ad2:	4933      	ldr	r1, [pc, #204]	; (ba0 <main+0x1a4>)
     ad4:	f104 000c 	add.w	r0, r4, #12
     ad8:	4b32      	ldr	r3, [pc, #200]	; (ba4 <main+0x1a8>)
     ada:	4798      	blx	r3
	uint8_t localPosition;
 	//flapper.valve1->StartControlling(220);

 	//flapper.valve2->StartControlling(220);
	
	userApp.Init();
     adc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     ae0:	4b31      	ldr	r3, [pc, #196]	; (ba8 <main+0x1ac>)
     ae2:	4798      	blx	r3


	while (1)
	{
		
		if (userApp.IsAppConnected())
     ae4:	4626      	mov	r6, r4
     ae6:	f104 082c 	add.w	r8, r4, #44	; 0x2c
     aea:	4f30      	ldr	r7, [pc, #192]	; (bac <main+0x1b0>)
		{
			userApp.handleCommunication();			
     aec:	f8df 90cc 	ldr.w	r9, [pc, #204]	; bbc <main+0x1c0>
     af0:	e009      	b.n	b06 <main+0x10a>
     af2:	4640      	mov	r0, r8
     af4:	47c8      	blx	r9
     af6:	e00a      	b.n	b0e <main+0x112>
					gotNewTemperature=true;
					
				}
				
			}
			temperatures.StartOneConversion();
     af8:	4819      	ldr	r0, [pc, #100]	; (b60 <main+0x164>)
     afa:	4b1e      	ldr	r3, [pc, #120]	; (b74 <main+0x178>)
     afc:	4798      	blx	r3
			asm("nop");
     afe:	bf00      	nop
		}
		counter_running++;
     b00:	6833      	ldr	r3, [r6, #0]
     b02:	3301      	adds	r3, #1
     b04:	6033      	str	r3, [r6, #0]
		if (userApp.IsAppConnected())
     b06:	4640      	mov	r0, r8
     b08:	47b8      	blx	r7
     b0a:	2800      	cmp	r0, #0
     b0c:	d1f1      	bne.n	af2 <main+0xf6>
			flapper.valve1->Control_NBC_StandAlone_Reset();
     b0e:	4d17      	ldr	r5, [pc, #92]	; (b6c <main+0x170>)
     b10:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
     b14:	4c26      	ldr	r4, [pc, #152]	; (bb0 <main+0x1b4>)
     b16:	47a0      	blx	r4
			flapper.valve2->Control_NBC_StandAlone_Reset();
     b18:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
     b1c:	47a0      	blx	r4
		if (temperatures.IsConversionFinished())
     b1e:	4810      	ldr	r0, [pc, #64]	; (b60 <main+0x164>)
     b20:	4b24      	ldr	r3, [pc, #144]	; (bb4 <main+0x1b8>)
     b22:	4798      	blx	r3
     b24:	2800      	cmp	r0, #0
     b26:	d0eb      	beq.n	b00 <main+0x104>
			temperatures.GetConversionResult();
     b28:	4c0d      	ldr	r4, [pc, #52]	; (b60 <main+0x164>)
     b2a:	4620      	mov	r0, r4
     b2c:	4b22      	ldr	r3, [pc, #136]	; (bb8 <main+0x1bc>)
     b2e:	4798      	blx	r3
			if (temperatures.faultData==VALID_TEMPERATURE)
     b30:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
     b34:	2b01      	cmp	r3, #1
     b36:	d1df      	bne.n	af8 <main+0xfc>
				currentTemperature=temperatures.lastValue;
     b38:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
     b3c:	f8c6 31c4 	str.w	r3, [r6, #452]	; 0x1c4
     b40:	e7da      	b.n	af8 <main+0xfc>
     b42:	bf00      	nop
     b44:	000013e9 	.word	0x000013e9
     b48:	20001a04 	.word	0x20001a04
     b4c:	0000ecd5 	.word	0x0000ecd5
     b50:	00002bb5 	.word	0x00002bb5
     b54:	20003700 	.word	0x20003700
     b58:	00011ec1 	.word	0x00011ec1
     b5c:	00011e09 	.word	0x00011e09
     b60:	20009c1c 	.word	0x20009c1c
     b64:	0001228d 	.word	0x0001228d
     b68:	41008000 	.word	0x41008000
     b6c:	20001f74 	.word	0x20001f74
     b70:	0000fb5d 	.word	0x0000fb5d
     b74:	00012315 	.word	0x00012315
     b78:	20001cfc 	.word	0x20001cfc
     b7c:	0000f805 	.word	0x0000f805
     b80:	0000f641 	.word	0x0000f641
     b84:	0000f9fd 	.word	0x0000f9fd
     b88:	20001410 	.word	0x20001410
     b8c:	0000dd9d 	.word	0x0000dd9d
     b90:	20009af0 	.word	0x20009af0
     b94:	000120bd 	.word	0x000120bd
     b98:	00012085 	.word	0x00012085
     b9c:	20000770 	.word	0x20000770
     ba0:	000009cd 	.word	0x000009cd
     ba4:	0000e751 	.word	0x0000e751
     ba8:	00000eb9 	.word	0x00000eb9
     bac:	00001361 	.word	0x00001361
     bb0:	00010291 	.word	0x00010291
     bb4:	000123f1 	.word	0x000123f1
     bb8:	0001235d 	.word	0x0001235d
     bbc:	00001281 	.word	0x00001281

00000bc0 <_GLOBAL__sub_I_localtimeout>:
// 		delay_ms(500	
//		}
	}

	
}
     bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     bc4:	4c30      	ldr	r4, [pc, #192]	; (c88 <_GLOBAL__sub_I_localtimeout+0xc8>)
     bc6:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
     bca:	4930      	ldr	r1, [pc, #192]	; (c8c <_GLOBAL__sub_I_localtimeout+0xcc>)
     bcc:	4628      	mov	r0, r5
     bce:	4f30      	ldr	r7, [pc, #192]	; (c90 <_GLOBAL__sub_I_localtimeout+0xd0>)
     bd0:	47b8      	blx	r7
     bd2:	4e30      	ldr	r6, [pc, #192]	; (c94 <_GLOBAL__sub_I_localtimeout+0xd4>)
     bd4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; ccc <_GLOBAL__sub_I_localtimeout+0x10c>
     bd8:	4632      	mov	r2, r6
     bda:	4641      	mov	r1, r8
     bdc:	4628      	mov	r0, r5
     bde:	4d2e      	ldr	r5, [pc, #184]	; (c98 <_GLOBAL__sub_I_localtimeout+0xd8>)
     be0:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     be2:	f504 79f4 	add.w	r9, r4, #488	; 0x1e8
     be6:	492d      	ldr	r1, [pc, #180]	; (c9c <_GLOBAL__sub_I_localtimeout+0xdc>)
     be8:	4648      	mov	r0, r9
     bea:	47b8      	blx	r7
     bec:	4632      	mov	r2, r6
     bee:	4641      	mov	r1, r8
     bf0:	4648      	mov	r0, r9
     bf2:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     bf4:	f104 090c 	add.w	r9, r4, #12
     bf8:	4929      	ldr	r1, [pc, #164]	; (ca0 <_GLOBAL__sub_I_localtimeout+0xe0>)
     bfa:	4648      	mov	r0, r9
     bfc:	47b8      	blx	r7
     bfe:	4632      	mov	r2, r6
     c00:	4641      	mov	r1, r8
     c02:	4648      	mov	r0, r9
     c04:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     c06:	f504 7902 	add.w	r9, r4, #520	; 0x208
     c0a:	4926      	ldr	r1, [pc, #152]	; (ca4 <_GLOBAL__sub_I_localtimeout+0xe4>)
     c0c:	4648      	mov	r0, r9
     c0e:	47b8      	blx	r7
     c10:	4632      	mov	r2, r6
     c12:	4641      	mov	r1, r8
     c14:	4648      	mov	r0, r9
     c16:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     c18:	f504 790a 	add.w	r9, r4, #552	; 0x228
     c1c:	4922      	ldr	r1, [pc, #136]	; (ca8 <_GLOBAL__sub_I_localtimeout+0xe8>)
     c1e:	4648      	mov	r0, r9
     c20:	47b8      	blx	r7
     c22:	4632      	mov	r2, r6
     c24:	4641      	mov	r1, r8
     c26:	4648      	mov	r0, r9
     c28:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     c2a:	f504 7912 	add.w	r9, r4, #584	; 0x248
     c2e:	491f      	ldr	r1, [pc, #124]	; (cac <_GLOBAL__sub_I_localtimeout+0xec>)
     c30:	4648      	mov	r0, r9
     c32:	47b8      	blx	r7
     c34:	4632      	mov	r2, r6
     c36:	4641      	mov	r1, r8
     c38:	4648      	mov	r0, r9
     c3a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     c3c:	f504 791a 	add.w	r9, r4, #616	; 0x268
     c40:	491b      	ldr	r1, [pc, #108]	; (cb0 <_GLOBAL__sub_I_localtimeout+0xf0>)
     c42:	4648      	mov	r0, r9
     c44:	47b8      	blx	r7
     c46:	4632      	mov	r2, r6
     c48:	4641      	mov	r1, r8
     c4a:	4648      	mov	r0, r9
     c4c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     c4e:	f504 7922 	add.w	r9, r4, #648	; 0x288
     c52:	4918      	ldr	r1, [pc, #96]	; (cb4 <_GLOBAL__sub_I_localtimeout+0xf4>)
     c54:	4648      	mov	r0, r9
     c56:	47b8      	blx	r7
     c58:	4632      	mov	r2, r6
     c5a:	4641      	mov	r1, r8
     c5c:	4648      	mov	r0, r9
     c5e:	47a8      	blx	r5
     c60:	f504 772a 	add.w	r7, r4, #680	; 0x2a8
     c64:	4914      	ldr	r1, [pc, #80]	; (cb8 <_GLOBAL__sub_I_localtimeout+0xf8>)
     c66:	4638      	mov	r0, r7
     c68:	4b14      	ldr	r3, [pc, #80]	; (cbc <_GLOBAL__sub_I_localtimeout+0xfc>)
     c6a:	4798      	blx	r3
     c6c:	4632      	mov	r2, r6
     c6e:	4914      	ldr	r1, [pc, #80]	; (cc0 <_GLOBAL__sub_I_localtimeout+0x100>)
     c70:	4638      	mov	r0, r7
     c72:	47a8      	blx	r5
static Maintenance_Tool	userApp;
     c74:	342c      	adds	r4, #44	; 0x2c
     c76:	4620      	mov	r0, r4
     c78:	4b12      	ldr	r3, [pc, #72]	; (cc4 <_GLOBAL__sub_I_localtimeout+0x104>)
     c7a:	4798      	blx	r3
     c7c:	4632      	mov	r2, r6
     c7e:	4912      	ldr	r1, [pc, #72]	; (cc8 <_GLOBAL__sub_I_localtimeout+0x108>)
     c80:	4620      	mov	r0, r4
     c82:	47a8      	blx	r5
     c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     c88:	20000770 	.word	0x20000770
     c8c:	2000a1c0 	.word	0x2000a1c0
     c90:	0000e575 	.word	0x0000e575
     c94:	20000000 	.word	0x20000000
     c98:	00013cdd 	.word	0x00013cdd
     c9c:	2000a254 	.word	0x2000a254
     ca0:	2000a378 	.word	0x2000a378
     ca4:	2000a274 	.word	0x2000a274
     ca8:	2000a338 	.word	0x2000a338
     cac:	2000a358 	.word	0x2000a358
     cb0:	2000a230 	.word	0x2000a230
     cb4:	2000a2d0 	.word	0x2000a2d0
     cb8:	2000a2f0 	.word	0x2000a2f0
     cbc:	0000debd 	.word	0x0000debd
     cc0:	0000ded9 	.word	0x0000ded9
     cc4:	00000d95 	.word	0x00000d95
     cc8:	00000d49 	.word	0x00000d49
     ccc:	0000e5ad 	.word	0x0000e5ad

00000cd0 <_ZN22MaintenanceDataHandlerC1Ev>:
     cd0:	2264      	movs	r2, #100	; 0x64
     cd2:	7002      	strb	r2, [r0, #0]
     cd4:	2263      	movs	r2, #99	; 0x63
     cd6:	7042      	strb	r2, [r0, #1]
     cd8:	2262      	movs	r2, #98	; 0x62
     cda:	7082      	strb	r2, [r0, #2]
     cdc:	2261      	movs	r2, #97	; 0x61
     cde:	70c2      	strb	r2, [r0, #3]
     ce0:	2200      	movs	r2, #0
     ce2:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
     ce4:	223a      	movs	r2, #58	; 0x3a
     ce6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
     cea:	4770      	bx	lr

00000cec <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
     cec:	4770      	bx	lr
	...

00000cf0 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
     cf0:	b570      	push	{r4, r5, r6, lr}
     cf2:	4605      	mov	r5, r0
     cf4:	460c      	mov	r4, r1
     cf6:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
     cf8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
     cfc:	3006      	adds	r0, #6
     cfe:	4b09      	ldr	r3, [pc, #36]	; (d24 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
     d00:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
     d02:	462b      	mov	r3, r5
     d04:	4621      	mov	r1, r4
     d06:	3540      	adds	r5, #64	; 0x40
     d08:	681e      	ldr	r6, [r3, #0]
     d0a:	685c      	ldr	r4, [r3, #4]
     d0c:	6898      	ldr	r0, [r3, #8]
     d0e:	68da      	ldr	r2, [r3, #12]
     d10:	600e      	str	r6, [r1, #0]
     d12:	604c      	str	r4, [r1, #4]
     d14:	6088      	str	r0, [r1, #8]
     d16:	60ca      	str	r2, [r1, #12]
     d18:	3310      	adds	r3, #16
     d1a:	3110      	adds	r1, #16
     d1c:	42ab      	cmp	r3, r5
     d1e:	d1f3      	bne.n	d08 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
     d20:	2000      	movs	r0, #0
     d22:	bd70      	pop	{r4, r5, r6, pc}
     d24:	0001425d 	.word	0x0001425d

00000d28 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     d28:	4b02      	ldr	r3, [pc, #8]	; (d34 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     d2a:	681a      	ldr	r2, [r3, #0]
     d2c:	6e13      	ldr	r3, [r2, #96]	; 0x60
     d2e:	3301      	adds	r3, #1
     d30:	6613      	str	r3, [r2, #96]	; 0x60
     d32:	4770      	bx	lr
     d34:	20000a34 	.word	0x20000a34

00000d38 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     d38:	4b02      	ldr	r3, [pc, #8]	; (d44 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     d3a:	681b      	ldr	r3, [r3, #0]
     d3c:	2200      	movs	r2, #0
     d3e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
     d42:	4770      	bx	lr
     d44:	20000a34 	.word	0x20000a34

00000d48 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	localBuffer=staticBuffer;
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
     d48:	b538      	push	{r3, r4, r5, lr}
     d4a:	4604      	mov	r4, r0
     d4c:	4b0a      	ldr	r3, [pc, #40]	; (d78 <_ZN16Maintenance_ToolD1Ev+0x30>)
     d4e:	6003      	str	r3, [r0, #0]
{
	ticks=0;
     d50:	2300      	movs	r3, #0
     d52:	6603      	str	r3, [r0, #96]	; 0x60
	interfaceTimer.Stop();
     d54:	4d09      	ldr	r5, [pc, #36]	; (d7c <_ZN16Maintenance_ToolD1Ev+0x34>)
     d56:	4628      	mov	r0, r5
     d58:	4b09      	ldr	r3, [pc, #36]	; (d80 <_ZN16Maintenance_ToolD1Ev+0x38>)
     d5a:	4798      	blx	r3
	interfaceTimer.Remove_task();
     d5c:	4628      	mov	r0, r5
     d5e:	4b09      	ldr	r3, [pc, #36]	; (d84 <_ZN16Maintenance_ToolD1Ev+0x3c>)
     d60:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
     d62:	4909      	ldr	r1, [pc, #36]	; (d88 <_ZN16Maintenance_ToolD1Ev+0x40>)
     d64:	4620      	mov	r0, r4
     d66:	4b09      	ldr	r3, [pc, #36]	; (d8c <_ZN16Maintenance_ToolD1Ev+0x44>)
     d68:	4798      	blx	r3
     d6a:	f504 70aa 	add.w	r0, r4, #340	; 0x154
     d6e:	4b08      	ldr	r3, [pc, #32]	; (d90 <_ZN16Maintenance_ToolD1Ev+0x48>)
     d70:	4798      	blx	r3
	
} //~Maintenance_Tool
     d72:	4620      	mov	r0, r4
     d74:	bd38      	pop	{r3, r4, r5, pc}
     d76:	bf00      	nop
     d78:	0001465c 	.word	0x0001465c
     d7c:	20000a38 	.word	0x20000a38
     d80:	0000e6d5 	.word	0x0000e6d5
     d84:	0000e7c5 	.word	0x0000e7c5
     d88:	0001464c 	.word	0x0001464c
     d8c:	000002f9 	.word	0x000002f9
     d90:	00000ced 	.word	0x00000ced

00000d94 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
     d94:	b538      	push	{r3, r4, r5, lr}
     d96:	4604      	mov	r4, r0
     d98:	f500 70aa 	add.w	r0, r0, #340	; 0x154
     d9c:	4b16      	ldr	r3, [pc, #88]	; (df8 <_ZN16Maintenance_ToolC1Ev+0x64>)
     d9e:	4798      	blx	r3
     da0:	4916      	ldr	r1, [pc, #88]	; (dfc <_ZN16Maintenance_ToolC1Ev+0x68>)
     da2:	4620      	mov	r0, r4
     da4:	4b16      	ldr	r3, [pc, #88]	; (e00 <_ZN16Maintenance_ToolC1Ev+0x6c>)
     da6:	4798      	blx	r3
     da8:	4b16      	ldr	r3, [pc, #88]	; (e04 <_ZN16Maintenance_ToolC1Ev+0x70>)
     daa:	6023      	str	r3, [r4, #0]
     dac:	2300      	movs	r3, #0
     dae:	2564      	movs	r5, #100	; 0x64
     db0:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
     db4:	2063      	movs	r0, #99	; 0x63
     db6:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
     dba:	2162      	movs	r1, #98	; 0x62
     dbc:	f884 10ba 	strb.w	r1, [r4, #186]	; 0xba
     dc0:	2261      	movs	r2, #97	; 0x61
     dc2:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
     dc6:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
     dca:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
     dce:	f884 0147 	strb.w	r0, [r4, #327]	; 0x147
     dd2:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
     dd6:	f884 2149 	strb.w	r2, [r4, #329]	; 0x149
     dda:	f884 314b 	strb.w	r3, [r4, #331]	; 0x14b
	ptrMaintenanceTool=this;
     dde:	4a0a      	ldr	r2, [pc, #40]	; (e08 <_ZN16Maintenance_ToolC1Ev+0x74>)
     de0:	f842 4b24 	str.w	r4, [r2], #36
	maintenanceIsConnected = false;
     de4:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
	nextMaintenanceSyncTime = 0;
     de8:	66a3      	str	r3, [r4, #104]	; 0x68
	nextMaintenanceUsageTimerSyncTime = 0;
     dea:	66e3      	str	r3, [r4, #108]	; 0x6c
	ticks=0;
     dec:	6623      	str	r3, [r4, #96]	; 0x60
	localBuffer=staticBuffer;
     dee:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
} //Maintenance_Tool
     df2:	4620      	mov	r0, r4
     df4:	bd38      	pop	{r3, r4, r5, pc}
     df6:	bf00      	nop
     df8:	00000cd1 	.word	0x00000cd1
     dfc:	0001464c 	.word	0x0001464c
     e00:	000002d1 	.word	0x000002d1
     e04:	0001465c 	.word	0x0001465c
     e08:	20000a34 	.word	0x20000a34

00000e0c <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     e0c:	b410      	push	{r4}
     e0e:	4604      	mov	r4, r0
     e10:	2300      	movs	r3, #0
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     e12:	4619      	mov	r1, r3
     e14:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
     e18:	54d1      	strb	r1, [r2, r3]
     e1a:	1c58      	adds	r0, r3, #1
     e1c:	b2c0      	uxtb	r0, r0
     e1e:	3301      	adds	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     e20:	2b40      	cmp	r3, #64	; 0x40
     e22:	d1f7      	bne.n	e14 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
     e24:	bc10      	pop	{r4}
     e26:	4770      	bx	lr

00000e28 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     e28:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
     e2c:	b92b      	cbnz	r3, e3a <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     e2e:	6683      	str	r3, [r0, #104]	; 0x68
		maintenanceIsConnected = true;
     e30:	2301      	movs	r3, #1
     e32:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
		bSendNotifications = true;
     e36:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     e3a:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
     e3e:	4770      	bx	lr

00000e40 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     e40:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     e42:	0855      	lsrs	r5, r2, #1
     e44:	d007      	beq.n	e56 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     e46:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     e48:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     e4c:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     e4e:	3401      	adds	r4, #1
     e50:	b2a4      	uxth	r4, r4
     e52:	42ac      	cmp	r4, r5
     e54:	dbf8      	blt.n	e48 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     e56:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     e5a:	bf1d      	ittte	ne
     e5c:	189b      	addne	r3, r3, r2
     e5e:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     e62:	4048      	eorne	r0, r1
     e64:	4608      	moveq	r0, r1

	return checksum;
	}
     e66:	bc30      	pop	{r4, r5}
     e68:	4770      	bx	lr
	...

00000e6c <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     e6c:	b538      	push	{r3, r4, r5, lr}
     e6e:	4604      	mov	r4, r0
	checksum=0;
     e70:	2500      	movs	r5, #0
     e72:	f8a0 5122 	strh.w	r5, [r0, #290]	; 0x122
	checksum = calculateChecksum(0, sizeof(header), &header);
     e76:	460b      	mov	r3, r1
     e78:	2206      	movs	r2, #6
     e7a:	4629      	mov	r1, r5
     e7c:	4d02      	ldr	r5, [pc, #8]	; (e88 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     e7e:	47a8      	blx	r5
     e80:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
	}
     e84:	bd38      	pop	{r3, r4, r5, pc}
     e86:	bf00      	nop
     e88:	00000e41 	.word	0x00000e41

00000e8c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     e8c:	4b06      	ldr	r3, [pc, #24]	; (ea8 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
     e8e:	681b      	ldr	r3, [r3, #0]
     e90:	600b      	str	r3, [r1, #0]
     e92:	4b06      	ldr	r3, [pc, #24]	; (eac <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
     e94:	681b      	ldr	r3, [r3, #0]
     e96:	604b      	str	r3, [r1, #4]
     e98:	4b05      	ldr	r3, [pc, #20]	; (eb0 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
     e9a:	681b      	ldr	r3, [r3, #0]
     e9c:	608b      	str	r3, [r1, #8]
     e9e:	4b05      	ldr	r3, [pc, #20]	; (eb4 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     ea0:	681b      	ldr	r3, [r3, #0]
     ea2:	60cb      	str	r3, [r1, #12]
     ea4:	4770      	bx	lr
     ea6:	bf00      	nop
     ea8:	41002018 	.word	0x41002018
     eac:	4100201c 	.word	0x4100201c
     eb0:	41002020 	.word	0x41002020
     eb4:	41002024 	.word	0x41002024

00000eb8 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eba:	4604      	mov	r4, r0
	ticks=0;
     ebc:	2600      	movs	r6, #0
     ebe:	6606      	str	r6, [r0, #96]	; 0x60
	interfaceTimer.Init();
     ec0:	4d13      	ldr	r5, [pc, #76]	; (f10 <_ZN16Maintenance_Tool4InitEv+0x58>)
     ec2:	4628      	mov	r0, r5
     ec4:	4b13      	ldr	r3, [pc, #76]	; (f14 <_ZN16Maintenance_Tool4InitEv+0x5c>)
     ec6:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     ec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     ecc:	4912      	ldr	r1, [pc, #72]	; (f18 <_ZN16Maintenance_Tool4InitEv+0x60>)
     ece:	4628      	mov	r0, r5
     ed0:	4b12      	ldr	r3, [pc, #72]	; (f1c <_ZN16Maintenance_Tool4InitEv+0x64>)
     ed2:	4798      	blx	r3
	InitCommandHandler(localBuffer);
     ed4:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
     ed8:	4620      	mov	r0, r4
     eda:	4b11      	ldr	r3, [pc, #68]	; (f20 <_ZN16Maintenance_Tool4InitEv+0x68>)
     edc:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     ede:	f204 1529 	addw	r5, r4, #297	; 0x129
     ee2:	4629      	mov	r1, r5
     ee4:	4620      	mov	r0, r4
     ee6:	4b0f      	ldr	r3, [pc, #60]	; (f24 <_ZN16Maintenance_Tool4InitEv+0x6c>)
     ee8:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     eea:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
     eee:	f8d4 7129 	ldr.w	r7, [r4, #297]	; 0x129
     ef2:	f8d4 012d 	ldr.w	r0, [r4, #301]	; 0x12d
     ef6:	f8d4 1131 	ldr.w	r1, [r4, #305]	; 0x131
     efa:	f8d4 2135 	ldr.w	r2, [r4, #309]	; 0x135
     efe:	601f      	str	r7, [r3, #0]
     f00:	6058      	str	r0, [r3, #4]
     f02:	6099      	str	r1, [r3, #8]
     f04:	60da      	str	r2, [r3, #12]
	gotAccess=false;
     f06:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
}
     f0a:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
     f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f10:	20000a38 	.word	0x20000a38
     f14:	0000e661 	.word	0x0000e661
     f18:	00000d29 	.word	0x00000d29
     f1c:	0000e79d 	.word	0x0000e79d
     f20:	000002ff 	.word	0x000002ff
     f24:	00000e8d 	.word	0x00000e8d

00000f28 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
     f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     f2c:	4c31      	ldr	r4, [pc, #196]	; (ff4 <_GLOBAL__sub_I_ptrMaintenanceTool+0xcc>)
     f2e:	f104 0564 	add.w	r5, r4, #100	; 0x64
     f32:	4931      	ldr	r1, [pc, #196]	; (ff8 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd0>)
     f34:	4628      	mov	r0, r5
     f36:	4f31      	ldr	r7, [pc, #196]	; (ffc <_GLOBAL__sub_I_ptrMaintenanceTool+0xd4>)
     f38:	47b8      	blx	r7
     f3a:	4e31      	ldr	r6, [pc, #196]	; (1000 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd8>)
     f3c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1038 <_GLOBAL__sub_I_ptrMaintenanceTool+0x110>
     f40:	4632      	mov	r2, r6
     f42:	4641      	mov	r1, r8
     f44:	4628      	mov	r0, r5
     f46:	4d2f      	ldr	r5, [pc, #188]	; (1004 <_GLOBAL__sub_I_ptrMaintenanceTool+0xdc>)
     f48:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     f4a:	f104 0984 	add.w	r9, r4, #132	; 0x84
     f4e:	492e      	ldr	r1, [pc, #184]	; (1008 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe0>)
     f50:	4648      	mov	r0, r9
     f52:	47b8      	blx	r7
     f54:	4632      	mov	r2, r6
     f56:	4641      	mov	r1, r8
     f58:	4648      	mov	r0, r9
     f5a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     f5c:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
     f60:	492a      	ldr	r1, [pc, #168]	; (100c <_GLOBAL__sub_I_ptrMaintenanceTool+0xe4>)
     f62:	4648      	mov	r0, r9
     f64:	47b8      	blx	r7
     f66:	4632      	mov	r2, r6
     f68:	4641      	mov	r1, r8
     f6a:	4648      	mov	r0, r9
     f6c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     f6e:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
     f72:	4927      	ldr	r1, [pc, #156]	; (1010 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe8>)
     f74:	4648      	mov	r0, r9
     f76:	47b8      	blx	r7
     f78:	4632      	mov	r2, r6
     f7a:	4641      	mov	r1, r8
     f7c:	4648      	mov	r0, r9
     f7e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     f80:	f104 09e4 	add.w	r9, r4, #228	; 0xe4
     f84:	4923      	ldr	r1, [pc, #140]	; (1014 <_GLOBAL__sub_I_ptrMaintenanceTool+0xec>)
     f86:	4648      	mov	r0, r9
     f88:	47b8      	blx	r7
     f8a:	4632      	mov	r2, r6
     f8c:	4641      	mov	r1, r8
     f8e:	4648      	mov	r0, r9
     f90:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     f92:	f504 7982 	add.w	r9, r4, #260	; 0x104
     f96:	4920      	ldr	r1, [pc, #128]	; (1018 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf0>)
     f98:	4648      	mov	r0, r9
     f9a:	47b8      	blx	r7
     f9c:	4632      	mov	r2, r6
     f9e:	4641      	mov	r1, r8
     fa0:	4648      	mov	r0, r9
     fa2:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     fa4:	f104 0904 	add.w	r9, r4, #4
     fa8:	491c      	ldr	r1, [pc, #112]	; (101c <_GLOBAL__sub_I_ptrMaintenanceTool+0xf4>)
     faa:	4648      	mov	r0, r9
     fac:	47b8      	blx	r7
     fae:	4632      	mov	r2, r6
     fb0:	4641      	mov	r1, r8
     fb2:	4648      	mov	r0, r9
     fb4:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     fb6:	f504 7992 	add.w	r9, r4, #292	; 0x124
     fba:	4919      	ldr	r1, [pc, #100]	; (1020 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf8>)
     fbc:	4648      	mov	r0, r9
     fbe:	47b8      	blx	r7
     fc0:	4632      	mov	r2, r6
     fc2:	4641      	mov	r1, r8
     fc4:	4648      	mov	r0, r9
     fc6:	47a8      	blx	r5
     fc8:	f504 77a2 	add.w	r7, r4, #324	; 0x144
     fcc:	4915      	ldr	r1, [pc, #84]	; (1024 <_GLOBAL__sub_I_ptrMaintenanceTool+0xfc>)
     fce:	4638      	mov	r0, r7
     fd0:	4b15      	ldr	r3, [pc, #84]	; (1028 <_GLOBAL__sub_I_ptrMaintenanceTool+0x100>)
     fd2:	4798      	blx	r3
     fd4:	4632      	mov	r2, r6
     fd6:	4915      	ldr	r1, [pc, #84]	; (102c <_GLOBAL__sub_I_ptrMaintenanceTool+0x104>)
     fd8:	4638      	mov	r0, r7
     fda:	47a8      	blx	r5
     fdc:	f504 74ae 	add.w	r4, r4, #348	; 0x15c
     fe0:	4620      	mov	r0, r4
     fe2:	4b13      	ldr	r3, [pc, #76]	; (1030 <_GLOBAL__sub_I_ptrMaintenanceTool+0x108>)
     fe4:	4798      	blx	r3
     fe6:	4632      	mov	r2, r6
     fe8:	4912      	ldr	r1, [pc, #72]	; (1034 <_GLOBAL__sub_I_ptrMaintenanceTool+0x10c>)
     fea:	4620      	mov	r0, r4
     fec:	47a8      	blx	r5
     fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     ff2:	bf00      	nop
     ff4:	20000a34 	.word	0x20000a34
     ff8:	2000a1c0 	.word	0x2000a1c0
     ffc:	0000e575 	.word	0x0000e575
    1000:	20000000 	.word	0x20000000
    1004:	00013cdd 	.word	0x00013cdd
    1008:	2000a254 	.word	0x2000a254
    100c:	2000a378 	.word	0x2000a378
    1010:	2000a274 	.word	0x2000a274
    1014:	2000a338 	.word	0x2000a338
    1018:	2000a358 	.word	0x2000a358
    101c:	2000a230 	.word	0x2000a230
    1020:	2000a2d0 	.word	0x2000a2d0
    1024:	2000a2f0 	.word	0x2000a2f0
    1028:	0000debd 	.word	0x0000debd
    102c:	0000ded9 	.word	0x0000ded9
    1030:	00000d95 	.word	0x00000d95
    1034:	00000d49 	.word	0x00000d49
    1038:	0000e5ad 	.word	0x0000e5ad

0000103c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
    103c:	b538      	push	{r3, r4, r5, lr}
    103e:	4605      	mov	r5, r0
    1040:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
    1042:	4b05      	ldr	r3, [pc, #20]	; (1058 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
    1044:	4798      	blx	r3
    1046:	f8a5 0122 	strh.w	r0, [r5, #290]	; 0x122
	usb.writeData(&header, sizeof(header));
    104a:	2206      	movs	r2, #6
    104c:	4621      	mov	r1, r4
    104e:	4803      	ldr	r0, [pc, #12]	; (105c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
    1050:	4b03      	ldr	r3, [pc, #12]	; (1060 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
    1052:	4798      	blx	r3
    1054:	bd38      	pop	{r3, r4, r5, pc}
    1056:	bf00      	nop
    1058:	00000e6d 	.word	0x00000e6d
    105c:	20001a04 	.word	0x20001a04
    1060:	0000ef0d 	.word	0x0000ef0d

00001064 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
    1064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
    1068:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
    106c:	2b4d      	cmp	r3, #77	; 0x4d
    106e:	bf0c      	ite	eq
    1070:	2501      	moveq	r5, #1
    1072:	2500      	movne	r5, #0
	if (result){
    1074:	d002      	beq.n	107c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x18>
}
    1076:	4628      	mov	r0, r5
    1078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		singleTask.description=temperatures.faultData;
    107c:	4b18      	ldr	r3, [pc, #96]	; (10e0 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
    107e:	f893 809c 	ldrb.w	r8, [r3, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
    1082:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
    1086:	4a17      	ldr	r2, [pc, #92]	; (10e4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
    1088:	601a      	str	r2, [r3, #0]
    108a:	2200      	movs	r2, #0
    108c:	711a      	strb	r2, [r3, #4]
    108e:	224d      	movs	r2, #77	; 0x4d
    1090:	715a      	strb	r2, [r3, #5]
    1092:	f883 8006 	strb.w	r8, [r3, #6]
    1096:	2307      	movs	r3, #7
    1098:	4911      	ldr	r1, [pc, #68]	; (10e0 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
    109a:	f103 0261 	add.w	r2, r3, #97	; 0x61
    109e:	440a      	add	r2, r1
    10a0:	f103 0710 	add.w	r7, r3, #16
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
    10a4:	f852 4f04 	ldr.w	r4, [r2, #4]!
    10a8:	f8d0 6150 	ldr.w	r6, [r0, #336]	; 0x150
    10ac:	50f4      	str	r4, [r6, r3]
    10ae:	3304      	adds	r3, #4
			for (int j = 0; j < 4; j++)
    10b0:	42bb      	cmp	r3, r7
    10b2:	d1f7      	bne.n	10a4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
		for (int i = 0; i < 3; i++)
    10b4:	2b37      	cmp	r3, #55	; 0x37
    10b6:	d1f0      	bne.n	109a <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x36>
    10b8:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    10ba:	2240      	movs	r2, #64	; 0x40
    10bc:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    10c0:	4809      	ldr	r0, [pc, #36]	; (10e8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
    10c2:	4b0a      	ldr	r3, [pc, #40]	; (10ec <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
    10c4:	4798      	blx	r3
		singleTaskMessage=singleTask;
    10c6:	4b07      	ldr	r3, [pc, #28]	; (10e4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
    10c8:	f8c4 3146 	str.w	r3, [r4, #326]	; 0x146
    10cc:	2200      	movs	r2, #0
    10ce:	f884 214a 	strb.w	r2, [r4, #330]	; 0x14a
    10d2:	234d      	movs	r3, #77	; 0x4d
    10d4:	f884 314b 	strb.w	r3, [r4, #331]	; 0x14b
    10d8:	f884 814c 	strb.w	r8, [r4, #332]	; 0x14c
    10dc:	e7cb      	b.n	1076 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x12>
    10de:	bf00      	nop
    10e0:	20009c1c 	.word	0x20009c1c
    10e4:	61626364 	.word	0x61626364
    10e8:	20001a04 	.word	0x20001a04
    10ec:	0000efa5 	.word	0x0000efa5

000010f0 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
    10f0:	b570      	push	{r4, r5, r6, lr}
    10f2:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
    10f4:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
    10f8:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
    10fc:	681a      	ldr	r2, [r3, #0]
    10fe:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
    1102:	889b      	ldrh	r3, [r3, #4]
    1104:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
    1106:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
    110a:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
    110c:	b2db      	uxtb	r3, r3
    110e:	2b18      	cmp	r3, #24
    1110:	d819      	bhi.n	1146 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x56>
		gotTask=true;
    1112:	2301      	movs	r3, #1
    1114:	f880 311f 	strb.w	r3, [r0, #287]	; 0x11f
		result=gotTask;
    1118:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
		switch (header.task)
    111c:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
    1120:	3b41      	subs	r3, #65	; 0x41
    1122:	2b18      	cmp	r3, #24
    1124:	f200 8086 	bhi.w	1234 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x144>
    1128:	e8df f003 	tbb	[pc, r3]
    112c:	2d1d2720 	.word	0x2d1d2720
    1130:	3c361d1d 	.word	0x3c361d1d
    1134:	605a4842 	.word	0x605a4842
    1138:	7e78726c 	.word	0x7e78726c
    113c:	1d4e5466 	.word	0x1d4e5466
    1140:	84841d1d 	.word	0x84841d1d
    1144:	1d          	.byte	0x1d
    1145:	00          	.byte	0x00
		gotTask=false;
    1146:	2300      	movs	r3, #0
    1148:	f880 311f 	strb.w	r3, [r0, #287]	; 0x11f
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
    114c:	4e3b      	ldr	r6, [pc, #236]	; (123c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x14c>)
    114e:	2240      	movs	r2, #64	; 0x40
    1150:	f500 71a8 	add.w	r1, r0, #336	; 0x150
    1154:	4630      	mov	r0, r6
    1156:	4b3a      	ldr	r3, [pc, #232]	; (1240 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x150>)
    1158:	4798      	blx	r3
		result=usb.rxReady;
    115a:	7d73      	ldrb	r3, [r6, #21]
    115c:	b2db      	uxtb	r3, r3
    115e:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
	if (result)
    1162:	2b00      	cmp	r3, #0
    1164:	d1da      	bne.n	111c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
    1166:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    116a:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
    116c:	4629      	mov	r1, r5
    116e:	4620      	mov	r0, r4
    1170:	4b34      	ldr	r3, [pc, #208]	; (1244 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x154>)
    1172:	4798      	blx	r3
    1174:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    1178:	e7f5      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
	maintenanceIsConnected = false;
    117a:	2300      	movs	r3, #0
    117c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
	bSendNotifications = false;
    1180:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
				break;
    1184:	e7ef      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				notifyGAINCommandReceived( header, result);
    1186:	2201      	movs	r2, #1
    1188:	4629      	mov	r1, r5
    118a:	4620      	mov	r0, r4
    118c:	4b2e      	ldr	r3, [pc, #184]	; (1248 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x158>)
    118e:	4798      	blx	r3
				result = handleGAINCommandReset(header);
    1190:	2301      	movs	r3, #1
    1192:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
				break;
    1196:	e7e6      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandWriteParameters();
    1198:	4620      	mov	r0, r4
    119a:	4b2c      	ldr	r3, [pc, #176]	; (124c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x15c>)
    119c:	4798      	blx	r3
    119e:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    11a2:	e7e0      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandReadParameters();
    11a4:	4620      	mov	r0, r4
    11a6:	4b2a      	ldr	r3, [pc, #168]	; (1250 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x160>)
    11a8:	4798      	blx	r3
    11aa:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    11ae:	e7da      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandSetHeaters();
    11b0:	4620      	mov	r0, r4
    11b2:	4b28      	ldr	r3, [pc, #160]	; (1254 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x164>)
    11b4:	4798      	blx	r3
    11b6:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    11ba:	e7d4      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandReadHeaterStatus();
    11bc:	4620      	mov	r0, r4
    11be:	4b26      	ldr	r3, [pc, #152]	; (1258 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x168>)
    11c0:	4798      	blx	r3
    11c2:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    11c6:	e7ce      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandSetScavenge();
    11c8:	4620      	mov	r0, r4
    11ca:	4b24      	ldr	r3, [pc, #144]	; (125c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x16c>)
    11cc:	4798      	blx	r3
    11ce:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    11d2:	e7c8      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandReadScavengeStatus();
    11d4:	4620      	mov	r0, r4
    11d6:	4b22      	ldr	r3, [pc, #136]	; (1260 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x170>)
    11d8:	4798      	blx	r3
    11da:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    11de:	e7c2      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandSetEnableFans();
    11e0:	4620      	mov	r0, r4
    11e2:	4b20      	ldr	r3, [pc, #128]	; (1264 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x174>)
    11e4:	4798      	blx	r3
    11e6:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    11ea:	e7bc      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandSetPWMFans();
    11ec:	4620      	mov	r0, r4
    11ee:	4b1e      	ldr	r3, [pc, #120]	; (1268 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x178>)
    11f0:	4798      	blx	r3
    11f2:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    11f6:	e7b6      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandFansStatus();
    11f8:	4620      	mov	r0, r4
    11fa:	4b1c      	ldr	r3, [pc, #112]	; (126c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x17c>)
    11fc:	4798      	blx	r3
    11fe:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    1202:	e7b0      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandReadTemmperatures();
    1204:	4620      	mov	r0, r4
    1206:	4b1a      	ldr	r3, [pc, #104]	; (1270 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x180>)
    1208:	4798      	blx	r3
    120a:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    120e:	e7aa      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandReadFlapperData();
    1210:	4620      	mov	r0, r4
    1212:	4b18      	ldr	r3, [pc, #96]	; (1274 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x184>)
    1214:	4798      	blx	r3
    1216:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    121a:	e7a4      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandSetFlapperValve();
    121c:	4620      	mov	r0, r4
    121e:	4b16      	ldr	r3, [pc, #88]	; (1278 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x188>)
    1220:	4798      	blx	r3
    1222:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    1226:	e79e      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = CommandSetFlapperPosition();
    1228:	4620      	mov	r0, r4
    122a:	4b14      	ldr	r3, [pc, #80]	; (127c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x18c>)
    122c:	4798      	blx	r3
    122e:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    1232:	e798      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
				result = false;
    1234:	2300      	movs	r3, #0
    1236:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
				break;
    123a:	e794      	b.n	1166 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x76>
    123c:	20001a04 	.word	0x20001a04
    1240:	0000ee21 	.word	0x0000ee21
    1244:	00000e29 	.word	0x00000e29
    1248:	0000103d 	.word	0x0000103d
    124c:	00000515 	.word	0x00000515
    1250:	00000801 	.word	0x00000801
    1254:	0000054d 	.word	0x0000054d
    1258:	00000889 	.word	0x00000889
    125c:	000005c5 	.word	0x000005c5
    1260:	000008e9 	.word	0x000008e9
    1264:	00000389 	.word	0x00000389
    1268:	000003b5 	.word	0x000003b5
    126c:	000006f9 	.word	0x000006f9
    1270:	00001065 	.word	0x00001065
    1274:	00000759 	.word	0x00000759
    1278:	0000041d 	.word	0x0000041d
    127c:	00000495 	.word	0x00000495

00001280 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
    1280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1282:	4604      	mov	r4, r0
	result=false;
    1284:	2300      	movs	r3, #0
    1286:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
	if (gotAccess)
    128a:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    128e:	2b00      	cmp	r3, #0
    1290:	d04f      	beq.n	1332 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb2>
		if (usb.rxReady)
    1292:	4b2a      	ldr	r3, [pc, #168]	; (133c <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    1294:	7d5b      	ldrb	r3, [r3, #21]
    1296:	b95b      	cbnz	r3, 12b0 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
			gotCommand=false;
    1298:	2300      	movs	r3, #0
    129a:	f880 311e 	strb.w	r3, [r0, #286]	; 0x11e
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    129e:	2240      	movs	r2, #64	; 0x40
    12a0:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    12a4:	4825      	ldr	r0, [pc, #148]	; (133c <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    12a6:	4b26      	ldr	r3, [pc, #152]	; (1340 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
    12a8:	4798      	blx	r3
	}
    12aa:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    12ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
    12b0:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
    12b4:	681a      	ldr	r2, [r3, #0]
    12b6:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
    12ba:	889b      	ldrh	r3, [r3, #4]
    12bc:	f8a0 30bc 	strh.w	r3, [r0, #188]	; 0xbc
			switch (input){
    12c0:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
    12c4:	2b3d      	cmp	r3, #61	; 0x3d
    12c6:	d017      	beq.n	12f8 <_ZN16Maintenance_Tool19handleCommunicationEv+0x78>
    12c8:	2b3e      	cmp	r3, #62	; 0x3e
    12ca:	d010      	beq.n	12ee <_ZN16Maintenance_Tool19handleCommunicationEv+0x6e>
    12cc:	2b3c      	cmp	r3, #60	; 0x3c
    12ce:	d003      	beq.n	12d8 <_ZN16Maintenance_Tool19handleCommunicationEv+0x58>
					gotCommand=false;
    12d0:	2300      	movs	r3, #0
    12d2:	f880 311e 	strb.w	r3, [r0, #286]	; 0x11e
				break;
    12d6:	e006      	b.n	12e6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					gotCommand=true;
    12d8:	2301      	movs	r3, #1
    12da:	f880 311e 	strb.w	r3, [r0, #286]	; 0x11e
					result = handleHVACTask();
    12de:	4b19      	ldr	r3, [pc, #100]	; (1344 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    12e0:	4798      	blx	r3
    12e2:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
			ClearLocalBuffer();
    12e6:	4620      	mov	r0, r4
    12e8:	4b17      	ldr	r3, [pc, #92]	; (1348 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
    12ea:	4798      	blx	r3
    12ec:	e7d7      	b.n	129e <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
    12ee:	4b15      	ldr	r3, [pc, #84]	; (1344 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    12f0:	4798      	blx	r3
    12f2:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
				break;
    12f6:	e7f6      	b.n	12e6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					is_MTPC_Beaming=true;
    12f8:	2501      	movs	r5, #1
    12fa:	f880 5064 	strb.w	r5, [r0, #100]	; 0x64
					interfaceTimer.Stop();
    12fe:	4e13      	ldr	r6, [pc, #76]	; (134c <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
    1300:	4630      	mov	r0, r6
    1302:	4b13      	ldr	r3, [pc, #76]	; (1350 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
    1304:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
    1306:	4f13      	ldr	r7, [pc, #76]	; (1354 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
    1308:	4639      	mov	r1, r7
    130a:	4630      	mov	r0, r6
    130c:	4b12      	ldr	r3, [pc, #72]	; (1358 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd8>)
    130e:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
    1310:	f242 7210 	movw	r2, #10000	; 0x2710
    1314:	4639      	mov	r1, r7
    1316:	4630      	mov	r0, r6
    1318:	4b10      	ldr	r3, [pc, #64]	; (135c <_ZN16Maintenance_Tool19handleCommunicationEv+0xdc>)
    131a:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
    131c:	2300      	movs	r3, #0
    131e:	66a3      	str	r3, [r4, #104]	; 0x68
					maintenanceIsConnected = true;
    1320:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
					bSendNotifications = true;
    1324:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
					result=is_MTPC_Beaming;
    1328:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    132c:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
				break;
    1330:	e7d9      	b.n	12e6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
		gotCommand=false;
    1332:	2300      	movs	r3, #0
    1334:	f880 311e 	strb.w	r3, [r0, #286]	; 0x11e
    1338:	e7b7      	b.n	12aa <_ZN16Maintenance_Tool19handleCommunicationEv+0x2a>
    133a:	bf00      	nop
    133c:	20001a04 	.word	0x20001a04
    1340:	0000ee21 	.word	0x0000ee21
    1344:	000010f1 	.word	0x000010f1
    1348:	00000e0d 	.word	0x00000e0d
    134c:	20000a38 	.word	0x20000a38
    1350:	0000e6d5 	.word	0x0000e6d5
    1354:	00000d39 	.word	0x00000d39
    1358:	0000e7f1 	.word	0x0000e7f1
    135c:	0000e849 	.word	0x0000e849

00001360 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
    1360:	b510      	push	{r4, lr}
    1362:	4604      	mov	r4, r0
	result=false;
    1364:	2300      	movs	r3, #0
    1366:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
	magic=0;
    136a:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
	if (gotAccess==true)
    136e:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    1372:	b12b      	cbz	r3, 1380 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
    1374:	2301      	movs	r3, #1
    1376:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
	return	result;
    137a:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
}
    137e:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
    1380:	4b15      	ldr	r3, [pc, #84]	; (13d8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    1382:	7d5b      	ldrb	r3, [r3, #21]
    1384:	b1b3      	cbz	r3, 13b4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
				magic|= localBuffer[i];
    1386:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    138a:	1e41      	subs	r1, r0, #1
    138c:	3003      	adds	r0, #3
				magic=magic<<8;
    138e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1392:	021b      	lsls	r3, r3, #8
    1394:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				magic|= localBuffer[i];
    1398:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    139c:	4313      	orrs	r3, r2
    139e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			for (int i = 0; i < 4; i++)
    13a2:	4281      	cmp	r1, r0
    13a4:	d1f3      	bne.n	138e <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2e>
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
    13a6:	4a0d      	ldr	r2, [pc, #52]	; (13dc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
    13a8:	ea83 0102 	eor.w	r1, r3, r2
    13ac:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
			if (xorResult==0)
    13b0:	4293      	cmp	r3, r2
    13b2:	d006      	beq.n	13c2 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x62>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    13b4:	2240      	movs	r2, #64	; 0x40
    13b6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    13ba:	4807      	ldr	r0, [pc, #28]	; (13d8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    13bc:	4b08      	ldr	r3, [pc, #32]	; (13e0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
    13be:	4798      	blx	r3
    13c0:	e7db      	b.n	137a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
    13c2:	2301      	movs	r3, #1
    13c4:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
				result=true;
    13c8:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
				is_MTPC_Beaming=true;
    13cc:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
				return	handleCommunication();
    13d0:	4620      	mov	r0, r4
    13d2:	4b04      	ldr	r3, [pc, #16]	; (13e4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
    13d4:	4798      	blx	r3
    13d6:	bd10      	pop	{r4, pc}
    13d8:	20001a04 	.word	0x20001a04
    13dc:	61626364 	.word	0x61626364
    13e0:	0000ee21 	.word	0x0000ee21
    13e4:	00001281 	.word	0x00001281

000013e8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    13e8:	b580      	push	{r7, lr}
    13ea:	af00      	add	r7, sp, #0
	system_init();
    13ec:	4b03      	ldr	r3, [pc, #12]	; (13fc <atmel_start_init+0x14>)
    13ee:	4798      	blx	r3
	usb_init();
    13f0:	4b03      	ldr	r3, [pc, #12]	; (1400 <atmel_start_init+0x18>)
    13f2:	4798      	blx	r3
	spi_nor_flash_init();
    13f4:	4b03      	ldr	r3, [pc, #12]	; (1404 <atmel_start_init+0x1c>)
    13f6:	4798      	blx	r3
}
    13f8:	bf00      	nop
    13fa:	bd80      	pop	{r7, pc}
    13fc:	000027e9 	.word	0x000027e9
    1400:	0000be7d 	.word	0x0000be7d
    1404:	0000be11 	.word	0x0000be11

00001408 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    1408:	b480      	push	{r7}
    140a:	b085      	sub	sp, #20
    140c:	af00      	add	r7, sp, #0
    140e:	60f8      	str	r0, [r7, #12]
    1410:	460b      	mov	r3, r1
    1412:	607a      	str	r2, [r7, #4]
    1414:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1416:	7afa      	ldrb	r2, [r7, #11]
    1418:	68fb      	ldr	r3, [r7, #12]
    141a:	3220      	adds	r2, #32
    141c:	6879      	ldr	r1, [r7, #4]
    141e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    1422:	bf00      	nop
    1424:	3714      	adds	r7, #20
    1426:	46bd      	mov	sp, r7
    1428:	f85d 7b04 	ldr.w	r7, [sp], #4
    142c:	4770      	bx	lr

0000142e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    142e:	b480      	push	{r7}
    1430:	b083      	sub	sp, #12
    1432:	af00      	add	r7, sp, #0
    1434:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    1436:	687b      	ldr	r3, [r7, #4]
    1438:	691b      	ldr	r3, [r3, #16]
    143a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1442:	bf00      	nop
    1444:	370c      	adds	r7, #12
    1446:	46bd      	mov	sp, r7
    1448:	f85d 7b04 	ldr.w	r7, [sp], #4
    144c:	4770      	bx	lr

0000144e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    144e:	b480      	push	{r7}
    1450:	b083      	sub	sp, #12
    1452:	af00      	add	r7, sp, #0
    1454:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    1456:	687b      	ldr	r3, [r7, #4]
    1458:	691b      	ldr	r3, [r3, #16]
    145a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1462:	bf00      	nop
    1464:	370c      	adds	r7, #12
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr

0000146e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    146e:	b480      	push	{r7}
    1470:	b083      	sub	sp, #12
    1472:	af00      	add	r7, sp, #0
    1474:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    1476:	687b      	ldr	r3, [r7, #4]
    1478:	691b      	ldr	r3, [r3, #16]
    147a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    147e:	687b      	ldr	r3, [r7, #4]
    1480:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1482:	bf00      	nop
    1484:	370c      	adds	r7, #12
    1486:	46bd      	mov	sp, r7
    1488:	f85d 7b04 	ldr.w	r7, [sp], #4
    148c:	4770      	bx	lr

0000148e <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    148e:	b480      	push	{r7}
    1490:	b083      	sub	sp, #12
    1492:	af00      	add	r7, sp, #0
    1494:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	691b      	ldr	r3, [r3, #16]
    149a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14a2:	bf00      	nop
    14a4:	370c      	adds	r7, #12
    14a6:	46bd      	mov	sp, r7
    14a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ac:	4770      	bx	lr

000014ae <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    14ae:	b480      	push	{r7}
    14b0:	b083      	sub	sp, #12
    14b2:	af00      	add	r7, sp, #0
    14b4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    14b6:	687b      	ldr	r3, [r7, #4]
    14b8:	695b      	ldr	r3, [r3, #20]
    14ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    14be:	687b      	ldr	r3, [r7, #4]
    14c0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14c2:	bf00      	nop
    14c4:	370c      	adds	r7, #12
    14c6:	46bd      	mov	sp, r7
    14c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    14cc:	4770      	bx	lr

000014ce <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    14ce:	b480      	push	{r7}
    14d0:	b083      	sub	sp, #12
    14d2:	af00      	add	r7, sp, #0
    14d4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    14d6:	687b      	ldr	r3, [r7, #4]
    14d8:	695b      	ldr	r3, [r3, #20]
    14da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    14de:	687b      	ldr	r3, [r7, #4]
    14e0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14e2:	bf00      	nop
    14e4:	370c      	adds	r7, #12
    14e6:	46bd      	mov	sp, r7
    14e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ec:	4770      	bx	lr

000014ee <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    14ee:	b480      	push	{r7}
    14f0:	b083      	sub	sp, #12
    14f2:	af00      	add	r7, sp, #0
    14f4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	695b      	ldr	r3, [r3, #20]
    14fa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    14fe:	687b      	ldr	r3, [r7, #4]
    1500:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1502:	bf00      	nop
    1504:	370c      	adds	r7, #12
    1506:	46bd      	mov	sp, r7
    1508:	f85d 7b04 	ldr.w	r7, [sp], #4
    150c:	4770      	bx	lr

0000150e <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    150e:	b480      	push	{r7}
    1510:	b083      	sub	sp, #12
    1512:	af00      	add	r7, sp, #0
    1514:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    1516:	687b      	ldr	r3, [r7, #4]
    1518:	695b      	ldr	r3, [r3, #20]
    151a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1522:	bf00      	nop
    1524:	370c      	adds	r7, #12
    1526:	46bd      	mov	sp, r7
    1528:	f85d 7b04 	ldr.w	r7, [sp], #4
    152c:	4770      	bx	lr

0000152e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    152e:	b480      	push	{r7}
    1530:	b083      	sub	sp, #12
    1532:	af00      	add	r7, sp, #0
    1534:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1536:	687b      	ldr	r3, [r7, #4]
    1538:	695b      	ldr	r3, [r3, #20]
    153a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    153e:	687b      	ldr	r3, [r7, #4]
    1540:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1542:	bf00      	nop
    1544:	370c      	adds	r7, #12
    1546:	46bd      	mov	sp, r7
    1548:	f85d 7b04 	ldr.w	r7, [sp], #4
    154c:	4770      	bx	lr

0000154e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    154e:	b480      	push	{r7}
    1550:	b083      	sub	sp, #12
    1552:	af00      	add	r7, sp, #0
    1554:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    1556:	687b      	ldr	r3, [r7, #4]
    1558:	699b      	ldr	r3, [r3, #24]
    155a:	f043 0201 	orr.w	r2, r3, #1
    155e:	687b      	ldr	r3, [r7, #4]
    1560:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1562:	bf00      	nop
    1564:	370c      	adds	r7, #12
    1566:	46bd      	mov	sp, r7
    1568:	f85d 7b04 	ldr.w	r7, [sp], #4
    156c:	4770      	bx	lr

0000156e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    156e:	b480      	push	{r7}
    1570:	b083      	sub	sp, #12
    1572:	af00      	add	r7, sp, #0
    1574:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	699b      	ldr	r3, [r3, #24]
    157a:	f043 0202 	orr.w	r2, r3, #2
    157e:	687b      	ldr	r3, [r7, #4]
    1580:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1582:	bf00      	nop
    1584:	370c      	adds	r7, #12
    1586:	46bd      	mov	sp, r7
    1588:	f85d 7b04 	ldr.w	r7, [sp], #4
    158c:	4770      	bx	lr

0000158e <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    158e:	b480      	push	{r7}
    1590:	b083      	sub	sp, #12
    1592:	af00      	add	r7, sp, #0
    1594:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    1596:	687b      	ldr	r3, [r7, #4]
    1598:	699b      	ldr	r3, [r3, #24]
    159a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    159e:	687b      	ldr	r3, [r7, #4]
    15a0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15a2:	bf00      	nop
    15a4:	370c      	adds	r7, #12
    15a6:	46bd      	mov	sp, r7
    15a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ac:	4770      	bx	lr

000015ae <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    15ae:	b480      	push	{r7}
    15b0:	b083      	sub	sp, #12
    15b2:	af00      	add	r7, sp, #0
    15b4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	699b      	ldr	r3, [r3, #24]
    15ba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15c2:	bf00      	nop
    15c4:	370c      	adds	r7, #12
    15c6:	46bd      	mov	sp, r7
    15c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    15cc:	4770      	bx	lr

000015ce <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    15ce:	b480      	push	{r7}
    15d0:	b083      	sub	sp, #12
    15d2:	af00      	add	r7, sp, #0
    15d4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	699b      	ldr	r3, [r3, #24]
    15da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    15de:	687b      	ldr	r3, [r7, #4]
    15e0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15e2:	bf00      	nop
    15e4:	370c      	adds	r7, #12
    15e6:	46bd      	mov	sp, r7
    15e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ec:	4770      	bx	lr

000015ee <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    15ee:	b480      	push	{r7}
    15f0:	b083      	sub	sp, #12
    15f2:	af00      	add	r7, sp, #0
    15f4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	699b      	ldr	r3, [r3, #24]
    15fa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    15fe:	687b      	ldr	r3, [r7, #4]
    1600:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1602:	bf00      	nop
    1604:	370c      	adds	r7, #12
    1606:	46bd      	mov	sp, r7
    1608:	f85d 7b04 	ldr.w	r7, [sp], #4
    160c:	4770      	bx	lr

0000160e <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    160e:	b480      	push	{r7}
    1610:	b083      	sub	sp, #12
    1612:	af00      	add	r7, sp, #0
    1614:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    1616:	687b      	ldr	r3, [r7, #4]
    1618:	69db      	ldr	r3, [r3, #28]
    161a:	f043 0208 	orr.w	r2, r3, #8
    161e:	687b      	ldr	r3, [r7, #4]
    1620:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1622:	bf00      	nop
    1624:	370c      	adds	r7, #12
    1626:	46bd      	mov	sp, r7
    1628:	f85d 7b04 	ldr.w	r7, [sp], #4
    162c:	4770      	bx	lr

0000162e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    162e:	b480      	push	{r7}
    1630:	b083      	sub	sp, #12
    1632:	af00      	add	r7, sp, #0
    1634:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	69db      	ldr	r3, [r3, #28]
    163a:	f043 0220 	orr.w	r2, r3, #32
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1642:	bf00      	nop
    1644:	370c      	adds	r7, #12
    1646:	46bd      	mov	sp, r7
    1648:	f85d 7b04 	ldr.w	r7, [sp], #4
    164c:	4770      	bx	lr

0000164e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    164e:	b480      	push	{r7}
    1650:	b083      	sub	sp, #12
    1652:	af00      	add	r7, sp, #0
    1654:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1656:	687b      	ldr	r3, [r7, #4]
    1658:	69db      	ldr	r3, [r3, #28]
    165a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    165e:	687b      	ldr	r3, [r7, #4]
    1660:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1662:	bf00      	nop
    1664:	370c      	adds	r7, #12
    1666:	46bd      	mov	sp, r7
    1668:	f85d 7b04 	ldr.w	r7, [sp], #4
    166c:	4770      	bx	lr

0000166e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    166e:	b480      	push	{r7}
    1670:	b083      	sub	sp, #12
    1672:	af00      	add	r7, sp, #0
    1674:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	69db      	ldr	r3, [r3, #28]
    167a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    167e:	687b      	ldr	r3, [r7, #4]
    1680:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1682:	bf00      	nop
    1684:	370c      	adds	r7, #12
    1686:	46bd      	mov	sp, r7
    1688:	f85d 7b04 	ldr.w	r7, [sp], #4
    168c:	4770      	bx	lr

0000168e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    168e:	b480      	push	{r7}
    1690:	b083      	sub	sp, #12
    1692:	af00      	add	r7, sp, #0
    1694:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    1696:	687b      	ldr	r3, [r7, #4]
    1698:	6a1b      	ldr	r3, [r3, #32]
    169a:	f043 0201 	orr.w	r2, r3, #1
    169e:	687b      	ldr	r3, [r7, #4]
    16a0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    16a2:	bf00      	nop
    16a4:	370c      	adds	r7, #12
    16a6:	46bd      	mov	sp, r7
    16a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    16ac:	4770      	bx	lr

000016ae <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    16ae:	b480      	push	{r7}
    16b0:	b083      	sub	sp, #12
    16b2:	af00      	add	r7, sp, #0
    16b4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    16b6:	687b      	ldr	r3, [r7, #4]
    16b8:	6a1b      	ldr	r3, [r3, #32]
    16ba:	f043 0202 	orr.w	r2, r3, #2
    16be:	687b      	ldr	r3, [r7, #4]
    16c0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    16c2:	bf00      	nop
    16c4:	370c      	adds	r7, #12
    16c6:	46bd      	mov	sp, r7
    16c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    16cc:	4770      	bx	lr

000016ce <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    16ce:	b480      	push	{r7}
    16d0:	b083      	sub	sp, #12
    16d2:	af00      	add	r7, sp, #0
    16d4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    16d6:	687b      	ldr	r3, [r7, #4]
    16d8:	6a1b      	ldr	r3, [r3, #32]
    16da:	f043 0204 	orr.w	r2, r3, #4
    16de:	687b      	ldr	r3, [r7, #4]
    16e0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    16e2:	bf00      	nop
    16e4:	370c      	adds	r7, #12
    16e6:	46bd      	mov	sp, r7
    16e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    16ec:	4770      	bx	lr

000016ee <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    16ee:	b480      	push	{r7}
    16f0:	b083      	sub	sp, #12
    16f2:	af00      	add	r7, sp, #0
    16f4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	6a1b      	ldr	r3, [r3, #32]
    16fa:	f043 0208 	orr.w	r2, r3, #8
    16fe:	687b      	ldr	r3, [r7, #4]
    1700:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1702:	bf00      	nop
    1704:	370c      	adds	r7, #12
    1706:	46bd      	mov	sp, r7
    1708:	f85d 7b04 	ldr.w	r7, [sp], #4
    170c:	4770      	bx	lr

0000170e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    170e:	b480      	push	{r7}
    1710:	b083      	sub	sp, #12
    1712:	af00      	add	r7, sp, #0
    1714:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    1716:	687b      	ldr	r3, [r7, #4]
    1718:	6a1b      	ldr	r3, [r3, #32]
    171a:	f043 0220 	orr.w	r2, r3, #32
    171e:	687b      	ldr	r3, [r7, #4]
    1720:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1722:	bf00      	nop
    1724:	370c      	adds	r7, #12
    1726:	46bd      	mov	sp, r7
    1728:	f85d 7b04 	ldr.w	r7, [sp], #4
    172c:	4770      	bx	lr

0000172e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    172e:	b480      	push	{r7}
    1730:	b083      	sub	sp, #12
    1732:	af00      	add	r7, sp, #0
    1734:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	6a1b      	ldr	r3, [r3, #32]
    173a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    173e:	687b      	ldr	r3, [r7, #4]
    1740:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1742:	bf00      	nop
    1744:	370c      	adds	r7, #12
    1746:	46bd      	mov	sp, r7
    1748:	f85d 7b04 	ldr.w	r7, [sp], #4
    174c:	4770      	bx	lr

0000174e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    174e:	b480      	push	{r7}
    1750:	b085      	sub	sp, #20
    1752:	af00      	add	r7, sp, #0
    1754:	60f8      	str	r0, [r7, #12]
    1756:	460b      	mov	r3, r1
    1758:	607a      	str	r2, [r7, #4]
    175a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    175c:	7afb      	ldrb	r3, [r7, #11]
    175e:	68fa      	ldr	r2, [r7, #12]
    1760:	01db      	lsls	r3, r3, #7
    1762:	4413      	add	r3, r2
    1764:	3308      	adds	r3, #8
    1766:	687a      	ldr	r2, [r7, #4]
    1768:	601a      	str	r2, [r3, #0]
}
    176a:	bf00      	nop
    176c:	3714      	adds	r7, #20
    176e:	46bd      	mov	sp, r7
    1770:	f85d 7b04 	ldr.w	r7, [sp], #4
    1774:	4770      	bx	lr

00001776 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1776:	b480      	push	{r7}
    1778:	b085      	sub	sp, #20
    177a:	af00      	add	r7, sp, #0
    177c:	60f8      	str	r0, [r7, #12]
    177e:	460b      	mov	r3, r1
    1780:	607a      	str	r2, [r7, #4]
    1782:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1784:	7afb      	ldrb	r3, [r7, #11]
    1786:	68fa      	ldr	r2, [r7, #12]
    1788:	01db      	lsls	r3, r3, #7
    178a:	4413      	add	r3, r2
    178c:	3304      	adds	r3, #4
    178e:	687a      	ldr	r2, [r7, #4]
    1790:	601a      	str	r2, [r3, #0]
}
    1792:	bf00      	nop
    1794:	3714      	adds	r7, #20
    1796:	46bd      	mov	sp, r7
    1798:	f85d 7b04 	ldr.w	r7, [sp], #4
    179c:	4770      	bx	lr

0000179e <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    179e:	b480      	push	{r7}
    17a0:	b085      	sub	sp, #20
    17a2:	af00      	add	r7, sp, #0
    17a4:	60f8      	str	r0, [r7, #12]
    17a6:	460b      	mov	r3, r1
    17a8:	607a      	str	r2, [r7, #4]
    17aa:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    17ac:	7afb      	ldrb	r3, [r7, #11]
    17ae:	68fa      	ldr	r2, [r7, #12]
    17b0:	01db      	lsls	r3, r3, #7
    17b2:	4413      	add	r3, r2
    17b4:	3318      	adds	r3, #24
    17b6:	687a      	ldr	r2, [r7, #4]
    17b8:	601a      	str	r2, [r3, #0]
}
    17ba:	bf00      	nop
    17bc:	3714      	adds	r7, #20
    17be:	46bd      	mov	sp, r7
    17c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    17c4:	4770      	bx	lr

000017c6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    17c6:	b480      	push	{r7}
    17c8:	b085      	sub	sp, #20
    17ca:	af00      	add	r7, sp, #0
    17cc:	60f8      	str	r0, [r7, #12]
    17ce:	460b      	mov	r3, r1
    17d0:	607a      	str	r2, [r7, #4]
    17d2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    17d4:	7afb      	ldrb	r3, [r7, #11]
    17d6:	68fa      	ldr	r2, [r7, #12]
    17d8:	01db      	lsls	r3, r3, #7
    17da:	4413      	add	r3, r2
    17dc:	3314      	adds	r3, #20
    17de:	687a      	ldr	r2, [r7, #4]
    17e0:	601a      	str	r2, [r3, #0]
}
    17e2:	bf00      	nop
    17e4:	3714      	adds	r7, #20
    17e6:	46bd      	mov	sp, r7
    17e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    17ec:	4770      	bx	lr

000017ee <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    17ee:	b480      	push	{r7}
    17f0:	b085      	sub	sp, #20
    17f2:	af00      	add	r7, sp, #0
    17f4:	6078      	str	r0, [r7, #4]
    17f6:	4608      	mov	r0, r1
    17f8:	4611      	mov	r1, r2
    17fa:	461a      	mov	r2, r3
    17fc:	4603      	mov	r3, r0
    17fe:	70fb      	strb	r3, [r7, #3]
    1800:	460b      	mov	r3, r1
    1802:	70bb      	strb	r3, [r7, #2]
    1804:	4613      	mov	r3, r2
    1806:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1808:	78fa      	ldrb	r2, [r7, #3]
    180a:	78bb      	ldrb	r3, [r7, #2]
    180c:	6879      	ldr	r1, [r7, #4]
    180e:	01d2      	lsls	r2, r2, #7
    1810:	440a      	add	r2, r1
    1812:	4413      	add	r3, r2
    1814:	3330      	adds	r3, #48	; 0x30
    1816:	781b      	ldrb	r3, [r3, #0]
    1818:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    181a:	7bfb      	ldrb	r3, [r7, #15]
    181c:	f023 030f 	bic.w	r3, r3, #15
    1820:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    1822:	787b      	ldrb	r3, [r7, #1]
    1824:	f003 030f 	and.w	r3, r3, #15
    1828:	b2da      	uxtb	r2, r3
    182a:	7bfb      	ldrb	r3, [r7, #15]
    182c:	4313      	orrs	r3, r2
    182e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1830:	78fa      	ldrb	r2, [r7, #3]
    1832:	78bb      	ldrb	r3, [r7, #2]
    1834:	6879      	ldr	r1, [r7, #4]
    1836:	01d2      	lsls	r2, r2, #7
    1838:	440a      	add	r2, r1
    183a:	4413      	add	r3, r2
    183c:	3330      	adds	r3, #48	; 0x30
    183e:	7bfa      	ldrb	r2, [r7, #15]
    1840:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1842:	bf00      	nop
    1844:	3714      	adds	r7, #20
    1846:	46bd      	mov	sp, r7
    1848:	f85d 7b04 	ldr.w	r7, [sp], #4
    184c:	4770      	bx	lr

0000184e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    184e:	b480      	push	{r7}
    1850:	b085      	sub	sp, #20
    1852:	af00      	add	r7, sp, #0
    1854:	6078      	str	r0, [r7, #4]
    1856:	4608      	mov	r0, r1
    1858:	4611      	mov	r1, r2
    185a:	461a      	mov	r2, r3
    185c:	4603      	mov	r3, r0
    185e:	70fb      	strb	r3, [r7, #3]
    1860:	460b      	mov	r3, r1
    1862:	70bb      	strb	r3, [r7, #2]
    1864:	4613      	mov	r3, r2
    1866:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1868:	78fa      	ldrb	r2, [r7, #3]
    186a:	78bb      	ldrb	r3, [r7, #2]
    186c:	6879      	ldr	r1, [r7, #4]
    186e:	01d2      	lsls	r2, r2, #7
    1870:	440a      	add	r2, r1
    1872:	4413      	add	r3, r2
    1874:	3330      	adds	r3, #48	; 0x30
    1876:	781b      	ldrb	r3, [r3, #0]
    1878:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    187a:	7bfb      	ldrb	r3, [r7, #15]
    187c:	f003 030f 	and.w	r3, r3, #15
    1880:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    1882:	787b      	ldrb	r3, [r7, #1]
    1884:	011b      	lsls	r3, r3, #4
    1886:	b2da      	uxtb	r2, r3
    1888:	7bfb      	ldrb	r3, [r7, #15]
    188a:	4313      	orrs	r3, r2
    188c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    188e:	78fa      	ldrb	r2, [r7, #3]
    1890:	78bb      	ldrb	r3, [r7, #2]
    1892:	6879      	ldr	r1, [r7, #4]
    1894:	01d2      	lsls	r2, r2, #7
    1896:	440a      	add	r2, r1
    1898:	4413      	add	r3, r2
    189a:	3330      	adds	r3, #48	; 0x30
    189c:	7bfa      	ldrb	r2, [r7, #15]
    189e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    18a0:	bf00      	nop
    18a2:	3714      	adds	r7, #20
    18a4:	46bd      	mov	sp, r7
    18a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    18aa:	4770      	bx	lr

000018ac <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    18ac:	b480      	push	{r7}
    18ae:	b085      	sub	sp, #20
    18b0:	af00      	add	r7, sp, #0
    18b2:	6078      	str	r0, [r7, #4]
    18b4:	4608      	mov	r0, r1
    18b6:	4611      	mov	r1, r2
    18b8:	461a      	mov	r2, r3
    18ba:	4603      	mov	r3, r0
    18bc:	70fb      	strb	r3, [r7, #3]
    18be:	460b      	mov	r3, r1
    18c0:	70bb      	strb	r3, [r7, #2]
    18c2:	4613      	mov	r3, r2
    18c4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    18c6:	78fa      	ldrb	r2, [r7, #3]
    18c8:	78bb      	ldrb	r3, [r7, #2]
    18ca:	6879      	ldr	r1, [r7, #4]
    18cc:	01d2      	lsls	r2, r2, #7
    18ce:	440a      	add	r2, r1
    18d0:	4413      	add	r3, r2
    18d2:	3340      	adds	r3, #64	; 0x40
    18d4:	781b      	ldrb	r3, [r3, #0]
    18d6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    18d8:	7bfb      	ldrb	r3, [r7, #15]
    18da:	f023 0301 	bic.w	r3, r3, #1
    18de:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    18e0:	787a      	ldrb	r2, [r7, #1]
    18e2:	7bfb      	ldrb	r3, [r7, #15]
    18e4:	4313      	orrs	r3, r2
    18e6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    18e8:	78fa      	ldrb	r2, [r7, #3]
    18ea:	78bb      	ldrb	r3, [r7, #2]
    18ec:	6879      	ldr	r1, [r7, #4]
    18ee:	01d2      	lsls	r2, r2, #7
    18f0:	440a      	add	r2, r1
    18f2:	4413      	add	r3, r2
    18f4:	3340      	adds	r3, #64	; 0x40
    18f6:	7bfa      	ldrb	r2, [r7, #15]
    18f8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    18fa:	bf00      	nop
    18fc:	3714      	adds	r7, #20
    18fe:	46bd      	mov	sp, r7
    1900:	f85d 7b04 	ldr.w	r7, [sp], #4
    1904:	4770      	bx	lr

00001906 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1906:	b490      	push	{r4, r7}
    1908:	b082      	sub	sp, #8
    190a:	af00      	add	r7, sp, #0
    190c:	6078      	str	r0, [r7, #4]
    190e:	460b      	mov	r3, r1
    1910:	70fb      	strb	r3, [r7, #3]
    1912:	4613      	mov	r3, r2
    1914:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1916:	78fa      	ldrb	r2, [r7, #3]
    1918:	78bb      	ldrb	r3, [r7, #2]
    191a:	78f8      	ldrb	r0, [r7, #3]
    191c:	78b9      	ldrb	r1, [r7, #2]
    191e:	687c      	ldr	r4, [r7, #4]
    1920:	01c0      	lsls	r0, r0, #7
    1922:	4420      	add	r0, r4
    1924:	4401      	add	r1, r0
    1926:	3140      	adds	r1, #64	; 0x40
    1928:	7809      	ldrb	r1, [r1, #0]
    192a:	b2c9      	uxtb	r1, r1
    192c:	f041 0104 	orr.w	r1, r1, #4
    1930:	b2c8      	uxtb	r0, r1
    1932:	6879      	ldr	r1, [r7, #4]
    1934:	01d2      	lsls	r2, r2, #7
    1936:	440a      	add	r2, r1
    1938:	4413      	add	r3, r2
    193a:	3340      	adds	r3, #64	; 0x40
    193c:	4602      	mov	r2, r0
    193e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1940:	bf00      	nop
    1942:	3708      	adds	r7, #8
    1944:	46bd      	mov	sp, r7
    1946:	bc90      	pop	{r4, r7}
    1948:	4770      	bx	lr

0000194a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    194a:	b490      	push	{r4, r7}
    194c:	b082      	sub	sp, #8
    194e:	af00      	add	r7, sp, #0
    1950:	6078      	str	r0, [r7, #4]
    1952:	460b      	mov	r3, r1
    1954:	70fb      	strb	r3, [r7, #3]
    1956:	4613      	mov	r3, r2
    1958:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    195a:	78fa      	ldrb	r2, [r7, #3]
    195c:	78bb      	ldrb	r3, [r7, #2]
    195e:	78f8      	ldrb	r0, [r7, #3]
    1960:	78b9      	ldrb	r1, [r7, #2]
    1962:	687c      	ldr	r4, [r7, #4]
    1964:	01c0      	lsls	r0, r0, #7
    1966:	4420      	add	r0, r4
    1968:	4401      	add	r1, r0
    196a:	3140      	adds	r1, #64	; 0x40
    196c:	7809      	ldrb	r1, [r1, #0]
    196e:	b2c9      	uxtb	r1, r1
    1970:	f021 0104 	bic.w	r1, r1, #4
    1974:	b2c8      	uxtb	r0, r1
    1976:	6879      	ldr	r1, [r7, #4]
    1978:	01d2      	lsls	r2, r2, #7
    197a:	440a      	add	r2, r1
    197c:	4413      	add	r3, r2
    197e:	3340      	adds	r3, #64	; 0x40
    1980:	4602      	mov	r2, r0
    1982:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1984:	bf00      	nop
    1986:	3708      	adds	r7, #8
    1988:	46bd      	mov	sp, r7
    198a:	bc90      	pop	{r4, r7}
    198c:	4770      	bx	lr

0000198e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    198e:	b480      	push	{r7}
    1990:	b085      	sub	sp, #20
    1992:	af00      	add	r7, sp, #0
    1994:	60f8      	str	r0, [r7, #12]
    1996:	460b      	mov	r3, r1
    1998:	607a      	str	r2, [r7, #4]
    199a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    199c:	7afb      	ldrb	r3, [r7, #11]
    199e:	68fa      	ldr	r2, [r7, #12]
    19a0:	01db      	lsls	r3, r3, #7
    19a2:	4413      	add	r3, r2
    19a4:	3328      	adds	r3, #40	; 0x28
    19a6:	687a      	ldr	r2, [r7, #4]
    19a8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    19aa:	bf00      	nop
    19ac:	3714      	adds	r7, #20
    19ae:	46bd      	mov	sp, r7
    19b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b4:	4770      	bx	lr
	...

000019b8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    19b8:	b580      	push	{r7, lr}
    19ba:	b082      	sub	sp, #8
    19bc:	af00      	add	r7, sp, #0
    19be:	4603      	mov	r3, r0
    19c0:	6039      	str	r1, [r7, #0]
    19c2:	71fb      	strb	r3, [r7, #7]
    19c4:	4613      	mov	r3, r2
    19c6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    19c8:	79bb      	ldrb	r3, [r7, #6]
    19ca:	2b01      	cmp	r3, #1
    19cc:	d01c      	beq.n	1a08 <_gpio_set_direction+0x50>
    19ce:	2b02      	cmp	r3, #2
    19d0:	d037      	beq.n	1a42 <_gpio_set_direction+0x8a>
    19d2:	2b00      	cmp	r3, #0
    19d4:	d14e      	bne.n	1a74 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    19d6:	79fb      	ldrb	r3, [r7, #7]
    19d8:	683a      	ldr	r2, [r7, #0]
    19da:	4619      	mov	r1, r3
    19dc:	482a      	ldr	r0, [pc, #168]	; (1a88 <_gpio_set_direction+0xd0>)
    19de:	4b2b      	ldr	r3, [pc, #172]	; (1a8c <_gpio_set_direction+0xd4>)
    19e0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    19e2:	683b      	ldr	r3, [r7, #0]
    19e4:	b29b      	uxth	r3, r3
    19e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    19ea:	79fb      	ldrb	r3, [r7, #7]
    19ec:	4619      	mov	r1, r3
    19ee:	4826      	ldr	r0, [pc, #152]	; (1a88 <_gpio_set_direction+0xd0>)
    19f0:	4b27      	ldr	r3, [pc, #156]	; (1a90 <_gpio_set_direction+0xd8>)
    19f2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    19f4:	683b      	ldr	r3, [r7, #0]
    19f6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    19f8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    19fc:	79fb      	ldrb	r3, [r7, #7]
    19fe:	4619      	mov	r1, r3
    1a00:	4821      	ldr	r0, [pc, #132]	; (1a88 <_gpio_set_direction+0xd0>)
    1a02:	4b23      	ldr	r3, [pc, #140]	; (1a90 <_gpio_set_direction+0xd8>)
    1a04:	4798      	blx	r3
		break;
    1a06:	e03a      	b.n	1a7e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1a08:	79fb      	ldrb	r3, [r7, #7]
    1a0a:	683a      	ldr	r2, [r7, #0]
    1a0c:	4619      	mov	r1, r3
    1a0e:	481e      	ldr	r0, [pc, #120]	; (1a88 <_gpio_set_direction+0xd0>)
    1a10:	4b1e      	ldr	r3, [pc, #120]	; (1a8c <_gpio_set_direction+0xd4>)
    1a12:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1a14:	683b      	ldr	r3, [r7, #0]
    1a16:	b29b      	uxth	r3, r3
    1a18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1a20:	79f9      	ldrb	r1, [r7, #7]
    1a22:	461a      	mov	r2, r3
    1a24:	4818      	ldr	r0, [pc, #96]	; (1a88 <_gpio_set_direction+0xd0>)
    1a26:	4b1a      	ldr	r3, [pc, #104]	; (1a90 <_gpio_set_direction+0xd8>)
    1a28:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1a2a:	683b      	ldr	r3, [r7, #0]
    1a2c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1a2e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1a36:	79f9      	ldrb	r1, [r7, #7]
    1a38:	461a      	mov	r2, r3
    1a3a:	4813      	ldr	r0, [pc, #76]	; (1a88 <_gpio_set_direction+0xd0>)
    1a3c:	4b14      	ldr	r3, [pc, #80]	; (1a90 <_gpio_set_direction+0xd8>)
    1a3e:	4798      	blx	r3
		break;
    1a40:	e01d      	b.n	1a7e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1a42:	79fb      	ldrb	r3, [r7, #7]
    1a44:	683a      	ldr	r2, [r7, #0]
    1a46:	4619      	mov	r1, r3
    1a48:	480f      	ldr	r0, [pc, #60]	; (1a88 <_gpio_set_direction+0xd0>)
    1a4a:	4b12      	ldr	r3, [pc, #72]	; (1a94 <_gpio_set_direction+0xdc>)
    1a4c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1a4e:	683b      	ldr	r3, [r7, #0]
    1a50:	b29b      	uxth	r3, r3
    1a52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1a56:	79fb      	ldrb	r3, [r7, #7]
    1a58:	4619      	mov	r1, r3
    1a5a:	480b      	ldr	r0, [pc, #44]	; (1a88 <_gpio_set_direction+0xd0>)
    1a5c:	4b0c      	ldr	r3, [pc, #48]	; (1a90 <_gpio_set_direction+0xd8>)
    1a5e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1a60:	683b      	ldr	r3, [r7, #0]
    1a62:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1a64:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1a68:	79fb      	ldrb	r3, [r7, #7]
    1a6a:	4619      	mov	r1, r3
    1a6c:	4806      	ldr	r0, [pc, #24]	; (1a88 <_gpio_set_direction+0xd0>)
    1a6e:	4b08      	ldr	r3, [pc, #32]	; (1a90 <_gpio_set_direction+0xd8>)
    1a70:	4798      	blx	r3
		break;
    1a72:	e004      	b.n	1a7e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1a74:	2246      	movs	r2, #70	; 0x46
    1a76:	4908      	ldr	r1, [pc, #32]	; (1a98 <_gpio_set_direction+0xe0>)
    1a78:	2000      	movs	r0, #0
    1a7a:	4b08      	ldr	r3, [pc, #32]	; (1a9c <_gpio_set_direction+0xe4>)
    1a7c:	4798      	blx	r3
	}
}
    1a7e:	bf00      	nop
    1a80:	3708      	adds	r7, #8
    1a82:	46bd      	mov	sp, r7
    1a84:	bd80      	pop	{r7, pc}
    1a86:	bf00      	nop
    1a88:	41008000 	.word	0x41008000
    1a8c:	00001777 	.word	0x00001777
    1a90:	0000198f 	.word	0x0000198f
    1a94:	0000174f 	.word	0x0000174f
    1a98:	0001465c 	.word	0x0001465c
    1a9c:	00004211 	.word	0x00004211

00001aa0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1aa0:	b580      	push	{r7, lr}
    1aa2:	b082      	sub	sp, #8
    1aa4:	af00      	add	r7, sp, #0
    1aa6:	4603      	mov	r3, r0
    1aa8:	6039      	str	r1, [r7, #0]
    1aaa:	71fb      	strb	r3, [r7, #7]
    1aac:	4613      	mov	r3, r2
    1aae:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1ab0:	79bb      	ldrb	r3, [r7, #6]
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	d006      	beq.n	1ac4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1ab6:	79fb      	ldrb	r3, [r7, #7]
    1ab8:	683a      	ldr	r2, [r7, #0]
    1aba:	4619      	mov	r1, r3
    1abc:	4806      	ldr	r0, [pc, #24]	; (1ad8 <_gpio_set_level+0x38>)
    1abe:	4b07      	ldr	r3, [pc, #28]	; (1adc <_gpio_set_level+0x3c>)
    1ac0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1ac2:	e005      	b.n	1ad0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1ac4:	79fb      	ldrb	r3, [r7, #7]
    1ac6:	683a      	ldr	r2, [r7, #0]
    1ac8:	4619      	mov	r1, r3
    1aca:	4803      	ldr	r0, [pc, #12]	; (1ad8 <_gpio_set_level+0x38>)
    1acc:	4b04      	ldr	r3, [pc, #16]	; (1ae0 <_gpio_set_level+0x40>)
    1ace:	4798      	blx	r3
}
    1ad0:	bf00      	nop
    1ad2:	3708      	adds	r7, #8
    1ad4:	46bd      	mov	sp, r7
    1ad6:	bd80      	pop	{r7, pc}
    1ad8:	41008000 	.word	0x41008000
    1adc:	0000179f 	.word	0x0000179f
    1ae0:	000017c7 	.word	0x000017c7

00001ae4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1ae4:	b580      	push	{r7, lr}
    1ae6:	b082      	sub	sp, #8
    1ae8:	af00      	add	r7, sp, #0
    1aea:	4603      	mov	r3, r0
    1aec:	71fb      	strb	r3, [r7, #7]
    1aee:	460b      	mov	r3, r1
    1af0:	71bb      	strb	r3, [r7, #6]
    1af2:	4613      	mov	r3, r2
    1af4:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1af6:	797b      	ldrb	r3, [r7, #5]
    1af8:	2b01      	cmp	r3, #1
    1afa:	d00a      	beq.n	1b12 <_gpio_set_pin_pull_mode+0x2e>
    1afc:	2b02      	cmp	r3, #2
    1afe:	d01f      	beq.n	1b40 <_gpio_set_pin_pull_mode+0x5c>
    1b00:	2b00      	cmp	r3, #0
    1b02:	d134      	bne.n	1b6e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1b04:	79ba      	ldrb	r2, [r7, #6]
    1b06:	79fb      	ldrb	r3, [r7, #7]
    1b08:	4619      	mov	r1, r3
    1b0a:	481e      	ldr	r0, [pc, #120]	; (1b84 <_gpio_set_pin_pull_mode+0xa0>)
    1b0c:	4b1e      	ldr	r3, [pc, #120]	; (1b88 <_gpio_set_pin_pull_mode+0xa4>)
    1b0e:	4798      	blx	r3
		break;
    1b10:	e033      	b.n	1b7a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1b12:	79bb      	ldrb	r3, [r7, #6]
    1b14:	2201      	movs	r2, #1
    1b16:	409a      	lsls	r2, r3
    1b18:	79fb      	ldrb	r3, [r7, #7]
    1b1a:	4619      	mov	r1, r3
    1b1c:	4819      	ldr	r0, [pc, #100]	; (1b84 <_gpio_set_pin_pull_mode+0xa0>)
    1b1e:	4b1b      	ldr	r3, [pc, #108]	; (1b8c <_gpio_set_pin_pull_mode+0xa8>)
    1b20:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1b22:	79ba      	ldrb	r2, [r7, #6]
    1b24:	79fb      	ldrb	r3, [r7, #7]
    1b26:	4619      	mov	r1, r3
    1b28:	4816      	ldr	r0, [pc, #88]	; (1b84 <_gpio_set_pin_pull_mode+0xa0>)
    1b2a:	4b19      	ldr	r3, [pc, #100]	; (1b90 <_gpio_set_pin_pull_mode+0xac>)
    1b2c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1b2e:	79bb      	ldrb	r3, [r7, #6]
    1b30:	2201      	movs	r2, #1
    1b32:	409a      	lsls	r2, r3
    1b34:	79fb      	ldrb	r3, [r7, #7]
    1b36:	4619      	mov	r1, r3
    1b38:	4812      	ldr	r0, [pc, #72]	; (1b84 <_gpio_set_pin_pull_mode+0xa0>)
    1b3a:	4b16      	ldr	r3, [pc, #88]	; (1b94 <_gpio_set_pin_pull_mode+0xb0>)
    1b3c:	4798      	blx	r3
		break;
    1b3e:	e01c      	b.n	1b7a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1b40:	79bb      	ldrb	r3, [r7, #6]
    1b42:	2201      	movs	r2, #1
    1b44:	409a      	lsls	r2, r3
    1b46:	79fb      	ldrb	r3, [r7, #7]
    1b48:	4619      	mov	r1, r3
    1b4a:	480e      	ldr	r0, [pc, #56]	; (1b84 <_gpio_set_pin_pull_mode+0xa0>)
    1b4c:	4b0f      	ldr	r3, [pc, #60]	; (1b8c <_gpio_set_pin_pull_mode+0xa8>)
    1b4e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1b50:	79ba      	ldrb	r2, [r7, #6]
    1b52:	79fb      	ldrb	r3, [r7, #7]
    1b54:	4619      	mov	r1, r3
    1b56:	480b      	ldr	r0, [pc, #44]	; (1b84 <_gpio_set_pin_pull_mode+0xa0>)
    1b58:	4b0d      	ldr	r3, [pc, #52]	; (1b90 <_gpio_set_pin_pull_mode+0xac>)
    1b5a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1b5c:	79bb      	ldrb	r3, [r7, #6]
    1b5e:	2201      	movs	r2, #1
    1b60:	409a      	lsls	r2, r3
    1b62:	79fb      	ldrb	r3, [r7, #7]
    1b64:	4619      	mov	r1, r3
    1b66:	4807      	ldr	r0, [pc, #28]	; (1b84 <_gpio_set_pin_pull_mode+0xa0>)
    1b68:	4b0b      	ldr	r3, [pc, #44]	; (1b98 <_gpio_set_pin_pull_mode+0xb4>)
    1b6a:	4798      	blx	r3
		break;
    1b6c:	e005      	b.n	1b7a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1b6e:	2289      	movs	r2, #137	; 0x89
    1b70:	490a      	ldr	r1, [pc, #40]	; (1b9c <_gpio_set_pin_pull_mode+0xb8>)
    1b72:	2000      	movs	r0, #0
    1b74:	4b0a      	ldr	r3, [pc, #40]	; (1ba0 <_gpio_set_pin_pull_mode+0xbc>)
    1b76:	4798      	blx	r3
		break;
    1b78:	bf00      	nop
	}
}
    1b7a:	bf00      	nop
    1b7c:	3708      	adds	r7, #8
    1b7e:	46bd      	mov	sp, r7
    1b80:	bd80      	pop	{r7, pc}
    1b82:	bf00      	nop
    1b84:	41008000 	.word	0x41008000
    1b88:	0000194b 	.word	0x0000194b
    1b8c:	00001777 	.word	0x00001777
    1b90:	00001907 	.word	0x00001907
    1b94:	0000179f 	.word	0x0000179f
    1b98:	000017c7 	.word	0x000017c7
    1b9c:	0001465c 	.word	0x0001465c
    1ba0:	00004211 	.word	0x00004211

00001ba4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1ba4:	b590      	push	{r4, r7, lr}
    1ba6:	b085      	sub	sp, #20
    1ba8:	af00      	add	r7, sp, #0
    1baa:	6078      	str	r0, [r7, #4]
    1bac:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	095b      	lsrs	r3, r3, #5
    1bb2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	b2db      	uxtb	r3, r3
    1bb8:	f003 031f 	and.w	r3, r3, #31
    1bbc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1bbe:	683b      	ldr	r3, [r7, #0]
    1bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
    1bc4:	d106      	bne.n	1bd4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1bc6:	7bba      	ldrb	r2, [r7, #14]
    1bc8:	7bf9      	ldrb	r1, [r7, #15]
    1bca:	2300      	movs	r3, #0
    1bcc:	4812      	ldr	r0, [pc, #72]	; (1c18 <_gpio_set_pin_function+0x74>)
    1bce:	4c13      	ldr	r4, [pc, #76]	; (1c1c <_gpio_set_pin_function+0x78>)
    1bd0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1bd2:	e01d      	b.n	1c10 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1bd4:	7bba      	ldrb	r2, [r7, #14]
    1bd6:	7bf9      	ldrb	r1, [r7, #15]
    1bd8:	2301      	movs	r3, #1
    1bda:	480f      	ldr	r0, [pc, #60]	; (1c18 <_gpio_set_pin_function+0x74>)
    1bdc:	4c0f      	ldr	r4, [pc, #60]	; (1c1c <_gpio_set_pin_function+0x78>)
    1bde:	47a0      	blx	r4
		if (pin & 1) {
    1be0:	7bbb      	ldrb	r3, [r7, #14]
    1be2:	f003 0301 	and.w	r3, r3, #1
    1be6:	2b00      	cmp	r3, #0
    1be8:	d009      	beq.n	1bfe <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1bea:	7bbb      	ldrb	r3, [r7, #14]
    1bec:	085b      	lsrs	r3, r3, #1
    1bee:	b2da      	uxtb	r2, r3
    1bf0:	683b      	ldr	r3, [r7, #0]
    1bf2:	b2db      	uxtb	r3, r3
    1bf4:	7bf9      	ldrb	r1, [r7, #15]
    1bf6:	4808      	ldr	r0, [pc, #32]	; (1c18 <_gpio_set_pin_function+0x74>)
    1bf8:	4c09      	ldr	r4, [pc, #36]	; (1c20 <_gpio_set_pin_function+0x7c>)
    1bfa:	47a0      	blx	r4
}
    1bfc:	e008      	b.n	1c10 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1bfe:	7bbb      	ldrb	r3, [r7, #14]
    1c00:	085b      	lsrs	r3, r3, #1
    1c02:	b2da      	uxtb	r2, r3
    1c04:	683b      	ldr	r3, [r7, #0]
    1c06:	b2db      	uxtb	r3, r3
    1c08:	7bf9      	ldrb	r1, [r7, #15]
    1c0a:	4803      	ldr	r0, [pc, #12]	; (1c18 <_gpio_set_pin_function+0x74>)
    1c0c:	4c05      	ldr	r4, [pc, #20]	; (1c24 <_gpio_set_pin_function+0x80>)
    1c0e:	47a0      	blx	r4
}
    1c10:	bf00      	nop
    1c12:	3714      	adds	r7, #20
    1c14:	46bd      	mov	sp, r7
    1c16:	bd90      	pop	{r4, r7, pc}
    1c18:	41008000 	.word	0x41008000
    1c1c:	000018ad 	.word	0x000018ad
    1c20:	0000184f 	.word	0x0000184f
    1c24:	000017ef 	.word	0x000017ef

00001c28 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1c28:	b580      	push	{r7, lr}
    1c2a:	b082      	sub	sp, #8
    1c2c:	af00      	add	r7, sp, #0
    1c2e:	4603      	mov	r3, r0
    1c30:	460a      	mov	r2, r1
    1c32:	71fb      	strb	r3, [r7, #7]
    1c34:	4613      	mov	r3, r2
    1c36:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1c38:	79fb      	ldrb	r3, [r7, #7]
    1c3a:	095b      	lsrs	r3, r3, #5
    1c3c:	b2d8      	uxtb	r0, r3
    1c3e:	79fb      	ldrb	r3, [r7, #7]
    1c40:	f003 031f 	and.w	r3, r3, #31
    1c44:	b2db      	uxtb	r3, r3
    1c46:	79ba      	ldrb	r2, [r7, #6]
    1c48:	4619      	mov	r1, r3
    1c4a:	4b03      	ldr	r3, [pc, #12]	; (1c58 <gpio_set_pin_pull_mode+0x30>)
    1c4c:	4798      	blx	r3
}
    1c4e:	bf00      	nop
    1c50:	3708      	adds	r7, #8
    1c52:	46bd      	mov	sp, r7
    1c54:	bd80      	pop	{r7, pc}
    1c56:	bf00      	nop
    1c58:	00001ae5 	.word	0x00001ae5

00001c5c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1c5c:	b580      	push	{r7, lr}
    1c5e:	b082      	sub	sp, #8
    1c60:	af00      	add	r7, sp, #0
    1c62:	6078      	str	r0, [r7, #4]
    1c64:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1c66:	6839      	ldr	r1, [r7, #0]
    1c68:	6878      	ldr	r0, [r7, #4]
    1c6a:	4b03      	ldr	r3, [pc, #12]	; (1c78 <gpio_set_pin_function+0x1c>)
    1c6c:	4798      	blx	r3
}
    1c6e:	bf00      	nop
    1c70:	3708      	adds	r7, #8
    1c72:	46bd      	mov	sp, r7
    1c74:	bd80      	pop	{r7, pc}
    1c76:	bf00      	nop
    1c78:	00001ba5 	.word	0x00001ba5

00001c7c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1c7c:	b580      	push	{r7, lr}
    1c7e:	b082      	sub	sp, #8
    1c80:	af00      	add	r7, sp, #0
    1c82:	4603      	mov	r3, r0
    1c84:	460a      	mov	r2, r1
    1c86:	71fb      	strb	r3, [r7, #7]
    1c88:	4613      	mov	r3, r2
    1c8a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1c8c:	79fb      	ldrb	r3, [r7, #7]
    1c8e:	095b      	lsrs	r3, r3, #5
    1c90:	b2d8      	uxtb	r0, r3
    1c92:	79fb      	ldrb	r3, [r7, #7]
    1c94:	f003 031f 	and.w	r3, r3, #31
    1c98:	2201      	movs	r2, #1
    1c9a:	fa02 f303 	lsl.w	r3, r2, r3
    1c9e:	79ba      	ldrb	r2, [r7, #6]
    1ca0:	4619      	mov	r1, r3
    1ca2:	4b03      	ldr	r3, [pc, #12]	; (1cb0 <gpio_set_pin_direction+0x34>)
    1ca4:	4798      	blx	r3
}
    1ca6:	bf00      	nop
    1ca8:	3708      	adds	r7, #8
    1caa:	46bd      	mov	sp, r7
    1cac:	bd80      	pop	{r7, pc}
    1cae:	bf00      	nop
    1cb0:	000019b9 	.word	0x000019b9

00001cb4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1cb4:	b580      	push	{r7, lr}
    1cb6:	b082      	sub	sp, #8
    1cb8:	af00      	add	r7, sp, #0
    1cba:	4603      	mov	r3, r0
    1cbc:	460a      	mov	r2, r1
    1cbe:	71fb      	strb	r3, [r7, #7]
    1cc0:	4613      	mov	r3, r2
    1cc2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1cc4:	79fb      	ldrb	r3, [r7, #7]
    1cc6:	095b      	lsrs	r3, r3, #5
    1cc8:	b2d8      	uxtb	r0, r3
    1cca:	79fb      	ldrb	r3, [r7, #7]
    1ccc:	f003 031f 	and.w	r3, r3, #31
    1cd0:	2201      	movs	r2, #1
    1cd2:	fa02 f303 	lsl.w	r3, r2, r3
    1cd6:	79ba      	ldrb	r2, [r7, #6]
    1cd8:	4619      	mov	r1, r3
    1cda:	4b03      	ldr	r3, [pc, #12]	; (1ce8 <gpio_set_pin_level+0x34>)
    1cdc:	4798      	blx	r3
}
    1cde:	bf00      	nop
    1ce0:	3708      	adds	r7, #8
    1ce2:	46bd      	mov	sp, r7
    1ce4:	bd80      	pop	{r7, pc}
    1ce6:	bf00      	nop
    1ce8:	00001aa1 	.word	0x00001aa1

00001cec <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1cec:	b580      	push	{r7, lr}
    1cee:	af00      	add	r7, sp, #0
	_init_chip();
    1cf0:	4b01      	ldr	r3, [pc, #4]	; (1cf8 <init_mcu+0xc>)
    1cf2:	4798      	blx	r3
}
    1cf4:	bf00      	nop
    1cf6:	bd80      	pop	{r7, pc}
    1cf8:	00004e1d 	.word	0x00004e1d

00001cfc <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1cfc:	b580      	push	{r7, lr}
    1cfe:	b082      	sub	sp, #8
    1d00:	af00      	add	r7, sp, #0
    1d02:	6078      	str	r0, [r7, #4]
    1d04:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d004      	beq.n	1d16 <wdt_init+0x1a>
    1d0c:	683b      	ldr	r3, [r7, #0]
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d001      	beq.n	1d16 <wdt_init+0x1a>
    1d12:	2301      	movs	r3, #1
    1d14:	e000      	b.n	1d18 <wdt_init+0x1c>
    1d16:	2300      	movs	r3, #0
    1d18:	f003 0301 	and.w	r3, r3, #1
    1d1c:	b2db      	uxtb	r3, r3
    1d1e:	2248      	movs	r2, #72	; 0x48
    1d20:	4907      	ldr	r1, [pc, #28]	; (1d40 <wdt_init+0x44>)
    1d22:	4618      	mov	r0, r3
    1d24:	4b07      	ldr	r3, [pc, #28]	; (1d44 <wdt_init+0x48>)
    1d26:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	683a      	ldr	r2, [r7, #0]
    1d2c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	4618      	mov	r0, r3
    1d32:	4b05      	ldr	r3, [pc, #20]	; (1d48 <wdt_init+0x4c>)
    1d34:	4798      	blx	r3
    1d36:	4603      	mov	r3, r0
}
    1d38:	4618      	mov	r0, r3
    1d3a:	3708      	adds	r7, #8
    1d3c:	46bd      	mov	sp, r7
    1d3e:	bd80      	pop	{r7, pc}
    1d40:	00014678 	.word	0x00014678
    1d44:	00004211 	.word	0x00004211
    1d48:	0000b8b5 	.word	0x0000b8b5

00001d4c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1d4c:	b580      	push	{r7, lr}
    1d4e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1d50:	4804      	ldr	r0, [pc, #16]	; (1d64 <CRC_CALC_init+0x18>)
    1d52:	4b05      	ldr	r3, [pc, #20]	; (1d68 <CRC_CALC_init+0x1c>)
    1d54:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1d56:	4905      	ldr	r1, [pc, #20]	; (1d6c <CRC_CALC_init+0x20>)
    1d58:	4805      	ldr	r0, [pc, #20]	; (1d70 <CRC_CALC_init+0x24>)
    1d5a:	4b06      	ldr	r3, [pc, #24]	; (1d74 <CRC_CALC_init+0x28>)
    1d5c:	4798      	blx	r3
}
    1d5e:	bf00      	nop
    1d60:	bd80      	pop	{r7, pc}
    1d62:	bf00      	nop
    1d64:	40000800 	.word	0x40000800
    1d68:	0000156f 	.word	0x0000156f
    1d6c:	41002000 	.word	0x41002000
    1d70:	2000a3bc 	.word	0x2000a3bc
    1d74:	00002b35 	.word	0x00002b35

00001d78 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1d78:	b580      	push	{r7, lr}
    1d7a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d7c:	2244      	movs	r2, #68	; 0x44
    1d7e:	2104      	movs	r1, #4
    1d80:	483f      	ldr	r0, [pc, #252]	; (1e80 <EXTERNAL_IRQ_0_init+0x108>)
    1d82:	4b40      	ldr	r3, [pc, #256]	; (1e84 <EXTERNAL_IRQ_0_init+0x10c>)
    1d84:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1d86:	4840      	ldr	r0, [pc, #256]	; (1e88 <EXTERNAL_IRQ_0_init+0x110>)
    1d88:	4b40      	ldr	r3, [pc, #256]	; (1e8c <EXTERNAL_IRQ_0_init+0x114>)
    1d8a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1d8c:	2101      	movs	r1, #1
    1d8e:	2040      	movs	r0, #64	; 0x40
    1d90:	4b3f      	ldr	r3, [pc, #252]	; (1e90 <EXTERNAL_IRQ_0_init+0x118>)
    1d92:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1d94:	2100      	movs	r1, #0
    1d96:	2040      	movs	r0, #64	; 0x40
    1d98:	4b3e      	ldr	r3, [pc, #248]	; (1e94 <EXTERNAL_IRQ_0_init+0x11c>)
    1d9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1d9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1da0:	2040      	movs	r0, #64	; 0x40
    1da2:	4b3d      	ldr	r3, [pc, #244]	; (1e98 <EXTERNAL_IRQ_0_init+0x120>)
    1da4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    1da6:	2101      	movs	r1, #1
    1da8:	2021      	movs	r0, #33	; 0x21
    1daa:	4b39      	ldr	r3, [pc, #228]	; (1e90 <EXTERNAL_IRQ_0_init+0x118>)
    1dac:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1dae:	2100      	movs	r1, #0
    1db0:	2021      	movs	r0, #33	; 0x21
    1db2:	4b38      	ldr	r3, [pc, #224]	; (1e94 <EXTERNAL_IRQ_0_init+0x11c>)
    1db4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    1db6:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1dba:	2021      	movs	r0, #33	; 0x21
    1dbc:	4b36      	ldr	r3, [pc, #216]	; (1e98 <EXTERNAL_IRQ_0_init+0x120>)
    1dbe:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1dc0:	2101      	movs	r1, #1
    1dc2:	2003      	movs	r0, #3
    1dc4:	4b32      	ldr	r3, [pc, #200]	; (1e90 <EXTERNAL_IRQ_0_init+0x118>)
    1dc6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1dc8:	2102      	movs	r1, #2
    1dca:	2003      	movs	r0, #3
    1dcc:	4b31      	ldr	r3, [pc, #196]	; (1e94 <EXTERNAL_IRQ_0_init+0x11c>)
    1dce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1dd0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1dd4:	2003      	movs	r0, #3
    1dd6:	4b30      	ldr	r3, [pc, #192]	; (1e98 <EXTERNAL_IRQ_0_init+0x120>)
    1dd8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1dda:	2101      	movs	r1, #1
    1ddc:	2004      	movs	r0, #4
    1dde:	4b2c      	ldr	r3, [pc, #176]	; (1e90 <EXTERNAL_IRQ_0_init+0x118>)
    1de0:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1de2:	2102      	movs	r1, #2
    1de4:	2004      	movs	r0, #4
    1de6:	4b2b      	ldr	r3, [pc, #172]	; (1e94 <EXTERNAL_IRQ_0_init+0x11c>)
    1de8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1dea:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1dee:	2004      	movs	r0, #4
    1df0:	4b29      	ldr	r3, [pc, #164]	; (1e98 <EXTERNAL_IRQ_0_init+0x120>)
    1df2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1df4:	2101      	movs	r1, #1
    1df6:	2005      	movs	r0, #5
    1df8:	4b25      	ldr	r3, [pc, #148]	; (1e90 <EXTERNAL_IRQ_0_init+0x118>)
    1dfa:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1dfc:	2102      	movs	r1, #2
    1dfe:	2005      	movs	r0, #5
    1e00:	4b24      	ldr	r3, [pc, #144]	; (1e94 <EXTERNAL_IRQ_0_init+0x11c>)
    1e02:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1e04:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1e08:	2005      	movs	r0, #5
    1e0a:	4b23      	ldr	r3, [pc, #140]	; (1e98 <EXTERNAL_IRQ_0_init+0x120>)
    1e0c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1e0e:	2101      	movs	r1, #1
    1e10:	2056      	movs	r0, #86	; 0x56
    1e12:	4b1f      	ldr	r3, [pc, #124]	; (1e90 <EXTERNAL_IRQ_0_init+0x118>)
    1e14:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1e16:	2102      	movs	r1, #2
    1e18:	2056      	movs	r0, #86	; 0x56
    1e1a:	4b1e      	ldr	r3, [pc, #120]	; (1e94 <EXTERNAL_IRQ_0_init+0x11c>)
    1e1c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1e1e:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1e22:	2056      	movs	r0, #86	; 0x56
    1e24:	4b1c      	ldr	r3, [pc, #112]	; (1e98 <EXTERNAL_IRQ_0_init+0x120>)
    1e26:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1e28:	2101      	movs	r1, #1
    1e2a:	2057      	movs	r0, #87	; 0x57
    1e2c:	4b18      	ldr	r3, [pc, #96]	; (1e90 <EXTERNAL_IRQ_0_init+0x118>)
    1e2e:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1e30:	2102      	movs	r1, #2
    1e32:	2057      	movs	r0, #87	; 0x57
    1e34:	4b17      	ldr	r3, [pc, #92]	; (1e94 <EXTERNAL_IRQ_0_init+0x11c>)
    1e36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1e38:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1e3c:	2057      	movs	r0, #87	; 0x57
    1e3e:	4b16      	ldr	r3, [pc, #88]	; (1e98 <EXTERNAL_IRQ_0_init+0x120>)
    1e40:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1e42:	2101      	movs	r1, #1
    1e44:	2028      	movs	r0, #40	; 0x28
    1e46:	4b12      	ldr	r3, [pc, #72]	; (1e90 <EXTERNAL_IRQ_0_init+0x118>)
    1e48:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1e4a:	2100      	movs	r1, #0
    1e4c:	2028      	movs	r0, #40	; 0x28
    1e4e:	4b11      	ldr	r3, [pc, #68]	; (1e94 <EXTERNAL_IRQ_0_init+0x11c>)
    1e50:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1e52:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1e56:	2028      	movs	r0, #40	; 0x28
    1e58:	4b0f      	ldr	r3, [pc, #60]	; (1e98 <EXTERNAL_IRQ_0_init+0x120>)
    1e5a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1e5c:	2101      	movs	r1, #1
    1e5e:	2029      	movs	r0, #41	; 0x29
    1e60:	4b0b      	ldr	r3, [pc, #44]	; (1e90 <EXTERNAL_IRQ_0_init+0x118>)
    1e62:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1e64:	2100      	movs	r1, #0
    1e66:	2029      	movs	r0, #41	; 0x29
    1e68:	4b0a      	ldr	r3, [pc, #40]	; (1e94 <EXTERNAL_IRQ_0_init+0x11c>)
    1e6a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1e6c:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1e70:	2029      	movs	r0, #41	; 0x29
    1e72:	4b09      	ldr	r3, [pc, #36]	; (1e98 <EXTERNAL_IRQ_0_init+0x120>)
    1e74:	4798      	blx	r3

	ext_irq_init();
    1e76:	4b09      	ldr	r3, [pc, #36]	; (1e9c <EXTERNAL_IRQ_0_init+0x124>)
    1e78:	4798      	blx	r3
}
    1e7a:	bf00      	nop
    1e7c:	bd80      	pop	{r7, pc}
    1e7e:	bf00      	nop
    1e80:	40001c00 	.word	0x40001c00
    1e84:	00001409 	.word	0x00001409
    1e88:	40000800 	.word	0x40000800
    1e8c:	000014ef 	.word	0x000014ef
    1e90:	00001c7d 	.word	0x00001c7d
    1e94:	00001c29 	.word	0x00001c29
    1e98:	00001c5d 	.word	0x00001c5d
    1e9c:	00002bfd 	.word	0x00002bfd

00001ea0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1ea0:	b580      	push	{r7, lr}
    1ea2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ea4:	2244      	movs	r2, #68	; 0x44
    1ea6:	210b      	movs	r1, #11
    1ea8:	4807      	ldr	r0, [pc, #28]	; (1ec8 <EVENT_SYSTEM_0_init+0x28>)
    1eaa:	4b08      	ldr	r3, [pc, #32]	; (1ecc <EVENT_SYSTEM_0_init+0x2c>)
    1eac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1eae:	2244      	movs	r2, #68	; 0x44
    1eb0:	210c      	movs	r1, #12
    1eb2:	4805      	ldr	r0, [pc, #20]	; (1ec8 <EVENT_SYSTEM_0_init+0x28>)
    1eb4:	4b05      	ldr	r3, [pc, #20]	; (1ecc <EVENT_SYSTEM_0_init+0x2c>)
    1eb6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1eb8:	4805      	ldr	r0, [pc, #20]	; (1ed0 <EVENT_SYSTEM_0_init+0x30>)
    1eba:	4b06      	ldr	r3, [pc, #24]	; (1ed4 <EVENT_SYSTEM_0_init+0x34>)
    1ebc:	4798      	blx	r3

	event_system_init();
    1ebe:	4b06      	ldr	r3, [pc, #24]	; (1ed8 <EVENT_SYSTEM_0_init+0x38>)
    1ec0:	4798      	blx	r3
}
    1ec2:	bf00      	nop
    1ec4:	bd80      	pop	{r7, pc}
    1ec6:	bf00      	nop
    1ec8:	40001c00 	.word	0x40001c00
    1ecc:	00001409 	.word	0x00001409
    1ed0:	40000800 	.word	0x40000800
    1ed4:	0000158f 	.word	0x0000158f
    1ed8:	00002be9 	.word	0x00002be9

00001edc <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1ee0:	2101      	movs	r1, #1
    1ee2:	202b      	movs	r0, #43	; 0x2b
    1ee4:	4b2b      	ldr	r3, [pc, #172]	; (1f94 <QSPI_N25Q256_PORT_init+0xb8>)
    1ee6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1ee8:	2100      	movs	r1, #0
    1eea:	202b      	movs	r0, #43	; 0x2b
    1eec:	4b2a      	ldr	r3, [pc, #168]	; (1f98 <QSPI_N25Q256_PORT_init+0xbc>)
    1eee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1ef0:	492a      	ldr	r1, [pc, #168]	; (1f9c <QSPI_N25Q256_PORT_init+0xc0>)
    1ef2:	202b      	movs	r0, #43	; 0x2b
    1ef4:	4b2a      	ldr	r3, [pc, #168]	; (1fa0 <QSPI_N25Q256_PORT_init+0xc4>)
    1ef6:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1ef8:	2102      	movs	r1, #2
    1efa:	2008      	movs	r0, #8
    1efc:	4b25      	ldr	r3, [pc, #148]	; (1f94 <QSPI_N25Q256_PORT_init+0xb8>)
    1efe:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1f00:	2100      	movs	r1, #0
    1f02:	2008      	movs	r0, #8
    1f04:	4b27      	ldr	r3, [pc, #156]	; (1fa4 <QSPI_N25Q256_PORT_init+0xc8>)
    1f06:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1f08:	2100      	movs	r1, #0
    1f0a:	2008      	movs	r0, #8
    1f0c:	4b22      	ldr	r3, [pc, #136]	; (1f98 <QSPI_N25Q256_PORT_init+0xbc>)
    1f0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1f10:	4925      	ldr	r1, [pc, #148]	; (1fa8 <QSPI_N25Q256_PORT_init+0xcc>)
    1f12:	2008      	movs	r0, #8
    1f14:	4b22      	ldr	r3, [pc, #136]	; (1fa0 <QSPI_N25Q256_PORT_init+0xc4>)
    1f16:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1f18:	2102      	movs	r1, #2
    1f1a:	2009      	movs	r0, #9
    1f1c:	4b1d      	ldr	r3, [pc, #116]	; (1f94 <QSPI_N25Q256_PORT_init+0xb8>)
    1f1e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1f20:	2100      	movs	r1, #0
    1f22:	2009      	movs	r0, #9
    1f24:	4b1f      	ldr	r3, [pc, #124]	; (1fa4 <QSPI_N25Q256_PORT_init+0xc8>)
    1f26:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1f28:	2100      	movs	r1, #0
    1f2a:	2009      	movs	r0, #9
    1f2c:	4b1a      	ldr	r3, [pc, #104]	; (1f98 <QSPI_N25Q256_PORT_init+0xbc>)
    1f2e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1f30:	491e      	ldr	r1, [pc, #120]	; (1fac <QSPI_N25Q256_PORT_init+0xd0>)
    1f32:	2009      	movs	r0, #9
    1f34:	4b1a      	ldr	r3, [pc, #104]	; (1fa0 <QSPI_N25Q256_PORT_init+0xc4>)
    1f36:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1f38:	2102      	movs	r1, #2
    1f3a:	200a      	movs	r0, #10
    1f3c:	4b15      	ldr	r3, [pc, #84]	; (1f94 <QSPI_N25Q256_PORT_init+0xb8>)
    1f3e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1f40:	2100      	movs	r1, #0
    1f42:	200a      	movs	r0, #10
    1f44:	4b17      	ldr	r3, [pc, #92]	; (1fa4 <QSPI_N25Q256_PORT_init+0xc8>)
    1f46:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1f48:	2100      	movs	r1, #0
    1f4a:	200a      	movs	r0, #10
    1f4c:	4b12      	ldr	r3, [pc, #72]	; (1f98 <QSPI_N25Q256_PORT_init+0xbc>)
    1f4e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1f50:	4917      	ldr	r1, [pc, #92]	; (1fb0 <QSPI_N25Q256_PORT_init+0xd4>)
    1f52:	200a      	movs	r0, #10
    1f54:	4b12      	ldr	r3, [pc, #72]	; (1fa0 <QSPI_N25Q256_PORT_init+0xc4>)
    1f56:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1f58:	2102      	movs	r1, #2
    1f5a:	200b      	movs	r0, #11
    1f5c:	4b0d      	ldr	r3, [pc, #52]	; (1f94 <QSPI_N25Q256_PORT_init+0xb8>)
    1f5e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1f60:	2100      	movs	r1, #0
    1f62:	200b      	movs	r0, #11
    1f64:	4b0f      	ldr	r3, [pc, #60]	; (1fa4 <QSPI_N25Q256_PORT_init+0xc8>)
    1f66:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1f68:	2100      	movs	r1, #0
    1f6a:	200b      	movs	r0, #11
    1f6c:	4b0a      	ldr	r3, [pc, #40]	; (1f98 <QSPI_N25Q256_PORT_init+0xbc>)
    1f6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1f70:	4910      	ldr	r1, [pc, #64]	; (1fb4 <QSPI_N25Q256_PORT_init+0xd8>)
    1f72:	200b      	movs	r0, #11
    1f74:	4b0a      	ldr	r3, [pc, #40]	; (1fa0 <QSPI_N25Q256_PORT_init+0xc4>)
    1f76:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1f78:	2101      	movs	r1, #1
    1f7a:	202a      	movs	r0, #42	; 0x2a
    1f7c:	4b05      	ldr	r3, [pc, #20]	; (1f94 <QSPI_N25Q256_PORT_init+0xb8>)
    1f7e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1f80:	2100      	movs	r1, #0
    1f82:	202a      	movs	r0, #42	; 0x2a
    1f84:	4b04      	ldr	r3, [pc, #16]	; (1f98 <QSPI_N25Q256_PORT_init+0xbc>)
    1f86:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1f88:	490b      	ldr	r1, [pc, #44]	; (1fb8 <QSPI_N25Q256_PORT_init+0xdc>)
    1f8a:	202a      	movs	r0, #42	; 0x2a
    1f8c:	4b04      	ldr	r3, [pc, #16]	; (1fa0 <QSPI_N25Q256_PORT_init+0xc4>)
    1f8e:	4798      	blx	r3
}
    1f90:	bf00      	nop
    1f92:	bd80      	pop	{r7, pc}
    1f94:	00001c7d 	.word	0x00001c7d
    1f98:	00001c29 	.word	0x00001c29
    1f9c:	002b0007 	.word	0x002b0007
    1fa0:	00001c5d 	.word	0x00001c5d
    1fa4:	00001cb5 	.word	0x00001cb5
    1fa8:	00080007 	.word	0x00080007
    1fac:	00090007 	.word	0x00090007
    1fb0:	000a0007 	.word	0x000a0007
    1fb4:	000b0007 	.word	0x000b0007
    1fb8:	002a0007 	.word	0x002a0007

00001fbc <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1fbc:	b580      	push	{r7, lr}
    1fbe:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1fc0:	4805      	ldr	r0, [pc, #20]	; (1fd8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1fc2:	4b06      	ldr	r3, [pc, #24]	; (1fdc <QSPI_N25Q256_CLOCK_init+0x20>)
    1fc4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1fc6:	4804      	ldr	r0, [pc, #16]	; (1fd8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1fc8:	4b05      	ldr	r3, [pc, #20]	; (1fe0 <QSPI_N25Q256_CLOCK_init+0x24>)
    1fca:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1fcc:	4802      	ldr	r0, [pc, #8]	; (1fd8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1fce:	4b05      	ldr	r3, [pc, #20]	; (1fe4 <QSPI_N25Q256_CLOCK_init+0x28>)
    1fd0:	4798      	blx	r3
}
    1fd2:	bf00      	nop
    1fd4:	bd80      	pop	{r7, pc}
    1fd6:	bf00      	nop
    1fd8:	40000800 	.word	0x40000800
    1fdc:	0000144f 	.word	0x0000144f
    1fe0:	0000148f 	.word	0x0000148f
    1fe4:	0000166f 	.word	0x0000166f

00001fe8 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1fe8:	b580      	push	{r7, lr}
    1fea:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1fec:	4b04      	ldr	r3, [pc, #16]	; (2000 <QSPI_N25Q256_init+0x18>)
    1fee:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1ff0:	4904      	ldr	r1, [pc, #16]	; (2004 <QSPI_N25Q256_init+0x1c>)
    1ff2:	4805      	ldr	r0, [pc, #20]	; (2008 <QSPI_N25Q256_init+0x20>)
    1ff4:	4b05      	ldr	r3, [pc, #20]	; (200c <QSPI_N25Q256_init+0x24>)
    1ff6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1ff8:	4b05      	ldr	r3, [pc, #20]	; (2010 <QSPI_N25Q256_init+0x28>)
    1ffa:	4798      	blx	r3
}
    1ffc:	bf00      	nop
    1ffe:	bd80      	pop	{r7, pc}
    2000:	00001fbd 	.word	0x00001fbd
    2004:	42003400 	.word	0x42003400
    2008:	2000a250 	.word	0x2000a250
    200c:	0000306d 	.word	0x0000306d
    2010:	00001edd 	.word	0x00001edd

00002014 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    2014:	b580      	push	{r7, lr}
    2016:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    2018:	4802      	ldr	r0, [pc, #8]	; (2024 <DATETIME_CLOCK_CLOCK_init+0x10>)
    201a:	4b03      	ldr	r3, [pc, #12]	; (2028 <DATETIME_CLOCK_CLOCK_init+0x14>)
    201c:	4798      	blx	r3
}
    201e:	bf00      	nop
    2020:	bd80      	pop	{r7, pc}
    2022:	bf00      	nop
    2024:	40000800 	.word	0x40000800
    2028:	000014cf 	.word	0x000014cf

0000202c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    202c:	b580      	push	{r7, lr}
    202e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    2030:	4b03      	ldr	r3, [pc, #12]	; (2040 <DATETIME_CLOCK_init+0x14>)
    2032:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    2034:	4903      	ldr	r1, [pc, #12]	; (2044 <DATETIME_CLOCK_init+0x18>)
    2036:	4804      	ldr	r0, [pc, #16]	; (2048 <DATETIME_CLOCK_init+0x1c>)
    2038:	4b04      	ldr	r3, [pc, #16]	; (204c <DATETIME_CLOCK_init+0x20>)
    203a:	4798      	blx	r3
}
    203c:	bf00      	nop
    203e:	bd80      	pop	{r7, pc}
    2040:	00002015 	.word	0x00002015
    2044:	40002400 	.word	0x40002400
    2048:	2000a398 	.word	0x2000a398
    204c:	000029d9 	.word	0x000029d9

00002050 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    2050:	b580      	push	{r7, lr}
    2052:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    2054:	2101      	movs	r1, #1
    2056:	2010      	movs	r0, #16
    2058:	4b07      	ldr	r3, [pc, #28]	; (2078 <I2C_HEATERS_PORT_init+0x28>)
    205a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    205c:	4907      	ldr	r1, [pc, #28]	; (207c <I2C_HEATERS_PORT_init+0x2c>)
    205e:	2010      	movs	r0, #16
    2060:	4b07      	ldr	r3, [pc, #28]	; (2080 <I2C_HEATERS_PORT_init+0x30>)
    2062:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    2064:	2101      	movs	r1, #1
    2066:	2011      	movs	r0, #17
    2068:	4b03      	ldr	r3, [pc, #12]	; (2078 <I2C_HEATERS_PORT_init+0x28>)
    206a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    206c:	4905      	ldr	r1, [pc, #20]	; (2084 <I2C_HEATERS_PORT_init+0x34>)
    206e:	2011      	movs	r0, #17
    2070:	4b03      	ldr	r3, [pc, #12]	; (2080 <I2C_HEATERS_PORT_init+0x30>)
    2072:	4798      	blx	r3
}
    2074:	bf00      	nop
    2076:	bd80      	pop	{r7, pc}
    2078:	00001c29 	.word	0x00001c29
    207c:	00100002 	.word	0x00100002
    2080:	00001c5d 	.word	0x00001c5d
    2084:	00110002 	.word	0x00110002

00002088 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    2088:	b580      	push	{r7, lr}
    208a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    208c:	2242      	movs	r2, #66	; 0x42
    208e:	2108      	movs	r1, #8
    2090:	4806      	ldr	r0, [pc, #24]	; (20ac <I2C_HEATERS_CLOCK_init+0x24>)
    2092:	4b07      	ldr	r3, [pc, #28]	; (20b0 <I2C_HEATERS_CLOCK_init+0x28>)
    2094:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2096:	224a      	movs	r2, #74	; 0x4a
    2098:	2103      	movs	r1, #3
    209a:	4804      	ldr	r0, [pc, #16]	; (20ac <I2C_HEATERS_CLOCK_init+0x24>)
    209c:	4b04      	ldr	r3, [pc, #16]	; (20b0 <I2C_HEATERS_CLOCK_init+0x28>)
    209e:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    20a0:	4804      	ldr	r0, [pc, #16]	; (20b4 <I2C_HEATERS_CLOCK_init+0x2c>)
    20a2:	4b05      	ldr	r3, [pc, #20]	; (20b8 <I2C_HEATERS_CLOCK_init+0x30>)
    20a4:	4798      	blx	r3
}
    20a6:	bf00      	nop
    20a8:	bd80      	pop	{r7, pc}
    20aa:	bf00      	nop
    20ac:	40001c00 	.word	0x40001c00
    20b0:	00001409 	.word	0x00001409
    20b4:	40000800 	.word	0x40000800
    20b8:	0000150f 	.word	0x0000150f

000020bc <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    20bc:	b580      	push	{r7, lr}
    20be:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    20c0:	4b04      	ldr	r3, [pc, #16]	; (20d4 <I2C_HEATERS_init+0x18>)
    20c2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    20c4:	4904      	ldr	r1, [pc, #16]	; (20d8 <I2C_HEATERS_init+0x1c>)
    20c6:	4805      	ldr	r0, [pc, #20]	; (20dc <I2C_HEATERS_init+0x20>)
    20c8:	4b05      	ldr	r3, [pc, #20]	; (20e0 <I2C_HEATERS_init+0x24>)
    20ca:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    20cc:	4b05      	ldr	r3, [pc, #20]	; (20e4 <I2C_HEATERS_init+0x28>)
    20ce:	4798      	blx	r3
}
    20d0:	bf00      	nop
    20d2:	bd80      	pop	{r7, pc}
    20d4:	00002089 	.word	0x00002089
    20d8:	40003400 	.word	0x40003400
    20dc:	2000a2f0 	.word	0x2000a2f0
    20e0:	00002ec5 	.word	0x00002ec5
    20e4:	00002051 	.word	0x00002051

000020e8 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    20e8:	b580      	push	{r7, lr}
    20ea:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    20ec:	2100      	movs	r1, #0
    20ee:	203b      	movs	r0, #59	; 0x3b
    20f0:	4b11      	ldr	r3, [pc, #68]	; (2138 <SPI_TEMP_PORT_init+0x50>)
    20f2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    20f4:	2102      	movs	r1, #2
    20f6:	203b      	movs	r0, #59	; 0x3b
    20f8:	4b10      	ldr	r3, [pc, #64]	; (213c <SPI_TEMP_PORT_init+0x54>)
    20fa:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    20fc:	4910      	ldr	r1, [pc, #64]	; (2140 <SPI_TEMP_PORT_init+0x58>)
    20fe:	203b      	movs	r0, #59	; 0x3b
    2100:	4b10      	ldr	r3, [pc, #64]	; (2144 <SPI_TEMP_PORT_init+0x5c>)
    2102:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    2104:	2100      	movs	r1, #0
    2106:	203a      	movs	r0, #58	; 0x3a
    2108:	4b0b      	ldr	r3, [pc, #44]	; (2138 <SPI_TEMP_PORT_init+0x50>)
    210a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    210c:	2102      	movs	r1, #2
    210e:	203a      	movs	r0, #58	; 0x3a
    2110:	4b0a      	ldr	r3, [pc, #40]	; (213c <SPI_TEMP_PORT_init+0x54>)
    2112:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    2114:	490c      	ldr	r1, [pc, #48]	; (2148 <SPI_TEMP_PORT_init+0x60>)
    2116:	203a      	movs	r0, #58	; 0x3a
    2118:	4b0a      	ldr	r3, [pc, #40]	; (2144 <SPI_TEMP_PORT_init+0x5c>)
    211a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    211c:	2101      	movs	r1, #1
    211e:	203c      	movs	r0, #60	; 0x3c
    2120:	4b06      	ldr	r3, [pc, #24]	; (213c <SPI_TEMP_PORT_init+0x54>)
    2122:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    2124:	2100      	movs	r1, #0
    2126:	203c      	movs	r0, #60	; 0x3c
    2128:	4b08      	ldr	r3, [pc, #32]	; (214c <SPI_TEMP_PORT_init+0x64>)
    212a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    212c:	4908      	ldr	r1, [pc, #32]	; (2150 <SPI_TEMP_PORT_init+0x68>)
    212e:	203c      	movs	r0, #60	; 0x3c
    2130:	4b04      	ldr	r3, [pc, #16]	; (2144 <SPI_TEMP_PORT_init+0x5c>)
    2132:	4798      	blx	r3
}
    2134:	bf00      	nop
    2136:	bd80      	pop	{r7, pc}
    2138:	00001cb5 	.word	0x00001cb5
    213c:	00001c7d 	.word	0x00001c7d
    2140:	003b0003 	.word	0x003b0003
    2144:	00001c5d 	.word	0x00001c5d
    2148:	003a0003 	.word	0x003a0003
    214c:	00001c29 	.word	0x00001c29
    2150:	003c0003 	.word	0x003c0003

00002154 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    2154:	b580      	push	{r7, lr}
    2156:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2158:	2245      	movs	r2, #69	; 0x45
    215a:	2122      	movs	r1, #34	; 0x22
    215c:	4806      	ldr	r0, [pc, #24]	; (2178 <SPI_TEMP_CLOCK_init+0x24>)
    215e:	4b07      	ldr	r3, [pc, #28]	; (217c <SPI_TEMP_CLOCK_init+0x28>)
    2160:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2162:	224a      	movs	r2, #74	; 0x4a
    2164:	2103      	movs	r1, #3
    2166:	4804      	ldr	r0, [pc, #16]	; (2178 <SPI_TEMP_CLOCK_init+0x24>)
    2168:	4b04      	ldr	r3, [pc, #16]	; (217c <SPI_TEMP_CLOCK_init+0x28>)
    216a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    216c:	4804      	ldr	r0, [pc, #16]	; (2180 <SPI_TEMP_CLOCK_init+0x2c>)
    216e:	4b05      	ldr	r3, [pc, #20]	; (2184 <SPI_TEMP_CLOCK_init+0x30>)
    2170:	4798      	blx	r3
}
    2172:	bf00      	nop
    2174:	bd80      	pop	{r7, pc}
    2176:	bf00      	nop
    2178:	40001c00 	.word	0x40001c00
    217c:	00001409 	.word	0x00001409
    2180:	40000800 	.word	0x40000800
    2184:	0000168f 	.word	0x0000168f

00002188 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    2188:	b580      	push	{r7, lr}
    218a:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    218c:	4b05      	ldr	r3, [pc, #20]	; (21a4 <SPI_TEMP_init+0x1c>)
    218e:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    2190:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2194:	4804      	ldr	r0, [pc, #16]	; (21a8 <SPI_TEMP_init+0x20>)
    2196:	4b05      	ldr	r3, [pc, #20]	; (21ac <SPI_TEMP_init+0x24>)
    2198:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    219a:	4b05      	ldr	r3, [pc, #20]	; (21b0 <SPI_TEMP_init+0x28>)
    219c:	4798      	blx	r3
}
    219e:	bf00      	nop
    21a0:	bd80      	pop	{r7, pc}
    21a2:	bf00      	nop
    21a4:	00002155 	.word	0x00002155
    21a8:	2000a1f8 	.word	0x2000a1f8
    21ac:	0000317d 	.word	0x0000317d
    21b0:	000020e9 	.word	0x000020e9

000021b4 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    21b4:	b580      	push	{r7, lr}
    21b6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    21b8:	2100      	movs	r1, #0
    21ba:	2017      	movs	r0, #23
    21bc:	4b07      	ldr	r3, [pc, #28]	; (21dc <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    21be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    21c0:	4907      	ldr	r1, [pc, #28]	; (21e0 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    21c2:	2017      	movs	r0, #23
    21c4:	4b07      	ldr	r3, [pc, #28]	; (21e4 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    21c6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    21c8:	2100      	movs	r1, #0
    21ca:	2016      	movs	r0, #22
    21cc:	4b03      	ldr	r3, [pc, #12]	; (21dc <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    21ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    21d0:	4905      	ldr	r1, [pc, #20]	; (21e8 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    21d2:	2016      	movs	r0, #22
    21d4:	4b03      	ldr	r3, [pc, #12]	; (21e4 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    21d6:	4798      	blx	r3
}
    21d8:	bf00      	nop
    21da:	bd80      	pop	{r7, pc}
    21dc:	00001c29 	.word	0x00001c29
    21e0:	00170003 	.word	0x00170003
    21e4:	00001c5d 	.word	0x00001c5d
    21e8:	00160003 	.word	0x00160003

000021ec <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    21ec:	b580      	push	{r7, lr}
    21ee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21f0:	2244      	movs	r2, #68	; 0x44
    21f2:	2123      	movs	r1, #35	; 0x23
    21f4:	4806      	ldr	r0, [pc, #24]	; (2210 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    21f6:	4b07      	ldr	r3, [pc, #28]	; (2214 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    21f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21fa:	224a      	movs	r2, #74	; 0x4a
    21fc:	2103      	movs	r1, #3
    21fe:	4804      	ldr	r0, [pc, #16]	; (2210 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    2200:	4b04      	ldr	r3, [pc, #16]	; (2214 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    2202:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    2204:	4804      	ldr	r0, [pc, #16]	; (2218 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    2206:	4b05      	ldr	r3, [pc, #20]	; (221c <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    2208:	4798      	blx	r3
}
    220a:	bf00      	nop
    220c:	bd80      	pop	{r7, pc}
    220e:	bf00      	nop
    2210:	40001c00 	.word	0x40001c00
    2214:	00001409 	.word	0x00001409
    2218:	40000800 	.word	0x40000800
    221c:	000016af 	.word	0x000016af

00002220 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    2220:	b580      	push	{r7, lr}
    2222:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    2224:	4b04      	ldr	r3, [pc, #16]	; (2238 <I2C_FLAPPER_VALVE_init+0x18>)
    2226:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    2228:	4904      	ldr	r1, [pc, #16]	; (223c <I2C_FLAPPER_VALVE_init+0x1c>)
    222a:	4805      	ldr	r0, [pc, #20]	; (2240 <I2C_FLAPPER_VALVE_init+0x20>)
    222c:	4b05      	ldr	r3, [pc, #20]	; (2244 <I2C_FLAPPER_VALVE_init+0x24>)
    222e:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    2230:	4b05      	ldr	r3, [pc, #20]	; (2248 <I2C_FLAPPER_VALVE_init+0x28>)
    2232:	4798      	blx	r3
}
    2234:	bf00      	nop
    2236:	bd80      	pop	{r7, pc}
    2238:	000021ed 	.word	0x000021ed
    223c:	43000400 	.word	0x43000400
    2240:	2000a294 	.word	0x2000a294
    2244:	00002ec5 	.word	0x00002ec5
    2248:	000021b5 	.word	0x000021b5

0000224c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    224c:	b580      	push	{r7, lr}
    224e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    2250:	2100      	movs	r1, #0
    2252:	2044      	movs	r0, #68	; 0x44
    2254:	4b11      	ldr	r3, [pc, #68]	; (229c <SPI_HI3593_PORT_init+0x50>)
    2256:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    2258:	2102      	movs	r1, #2
    225a:	2044      	movs	r0, #68	; 0x44
    225c:	4b10      	ldr	r3, [pc, #64]	; (22a0 <SPI_HI3593_PORT_init+0x54>)
    225e:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    2260:	4910      	ldr	r1, [pc, #64]	; (22a4 <SPI_HI3593_PORT_init+0x58>)
    2262:	2044      	movs	r0, #68	; 0x44
    2264:	4b10      	ldr	r3, [pc, #64]	; (22a8 <SPI_HI3593_PORT_init+0x5c>)
    2266:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    2268:	2100      	movs	r1, #0
    226a:	2045      	movs	r0, #69	; 0x45
    226c:	4b0b      	ldr	r3, [pc, #44]	; (229c <SPI_HI3593_PORT_init+0x50>)
    226e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    2270:	2102      	movs	r1, #2
    2272:	2045      	movs	r0, #69	; 0x45
    2274:	4b0a      	ldr	r3, [pc, #40]	; (22a0 <SPI_HI3593_PORT_init+0x54>)
    2276:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    2278:	490c      	ldr	r1, [pc, #48]	; (22ac <SPI_HI3593_PORT_init+0x60>)
    227a:	2045      	movs	r0, #69	; 0x45
    227c:	4b0a      	ldr	r3, [pc, #40]	; (22a8 <SPI_HI3593_PORT_init+0x5c>)
    227e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    2280:	2101      	movs	r1, #1
    2282:	2047      	movs	r0, #71	; 0x47
    2284:	4b06      	ldr	r3, [pc, #24]	; (22a0 <SPI_HI3593_PORT_init+0x54>)
    2286:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    2288:	2100      	movs	r1, #0
    228a:	2047      	movs	r0, #71	; 0x47
    228c:	4b08      	ldr	r3, [pc, #32]	; (22b0 <SPI_HI3593_PORT_init+0x64>)
    228e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    2290:	4908      	ldr	r1, [pc, #32]	; (22b4 <SPI_HI3593_PORT_init+0x68>)
    2292:	2047      	movs	r0, #71	; 0x47
    2294:	4b04      	ldr	r3, [pc, #16]	; (22a8 <SPI_HI3593_PORT_init+0x5c>)
    2296:	4798      	blx	r3
}
    2298:	bf00      	nop
    229a:	bd80      	pop	{r7, pc}
    229c:	00001cb5 	.word	0x00001cb5
    22a0:	00001c7d 	.word	0x00001c7d
    22a4:	00440002 	.word	0x00440002
    22a8:	00001c5d 	.word	0x00001c5d
    22ac:	00450002 	.word	0x00450002
    22b0:	00001c29 	.word	0x00001c29
    22b4:	00470002 	.word	0x00470002

000022b8 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    22b8:	b580      	push	{r7, lr}
    22ba:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    22bc:	2242      	movs	r2, #66	; 0x42
    22be:	2124      	movs	r1, #36	; 0x24
    22c0:	4806      	ldr	r0, [pc, #24]	; (22dc <SPI_HI3593_CLOCK_init+0x24>)
    22c2:	4b07      	ldr	r3, [pc, #28]	; (22e0 <SPI_HI3593_CLOCK_init+0x28>)
    22c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    22c6:	224a      	movs	r2, #74	; 0x4a
    22c8:	2103      	movs	r1, #3
    22ca:	4804      	ldr	r0, [pc, #16]	; (22dc <SPI_HI3593_CLOCK_init+0x24>)
    22cc:	4b04      	ldr	r3, [pc, #16]	; (22e0 <SPI_HI3593_CLOCK_init+0x28>)
    22ce:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    22d0:	4804      	ldr	r0, [pc, #16]	; (22e4 <SPI_HI3593_CLOCK_init+0x2c>)
    22d2:	4b05      	ldr	r3, [pc, #20]	; (22e8 <SPI_HI3593_CLOCK_init+0x30>)
    22d4:	4798      	blx	r3
}
    22d6:	bf00      	nop
    22d8:	bd80      	pop	{r7, pc}
    22da:	bf00      	nop
    22dc:	40001c00 	.word	0x40001c00
    22e0:	00001409 	.word	0x00001409
    22e4:	40000800 	.word	0x40000800
    22e8:	000016cf 	.word	0x000016cf

000022ec <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    22ec:	b580      	push	{r7, lr}
    22ee:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    22f0:	4b04      	ldr	r3, [pc, #16]	; (2304 <SPI_HI3593_init+0x18>)
    22f2:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    22f4:	4904      	ldr	r1, [pc, #16]	; (2308 <SPI_HI3593_init+0x1c>)
    22f6:	4805      	ldr	r0, [pc, #20]	; (230c <SPI_HI3593_init+0x20>)
    22f8:	4b05      	ldr	r3, [pc, #20]	; (2310 <SPI_HI3593_init+0x24>)
    22fa:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    22fc:	4b05      	ldr	r3, [pc, #20]	; (2314 <SPI_HI3593_init+0x28>)
    22fe:	4798      	blx	r3
}
    2300:	bf00      	nop
    2302:	bd80      	pop	{r7, pc}
    2304:	000022b9 	.word	0x000022b9
    2308:	43000800 	.word	0x43000800
    230c:	2000a1e0 	.word	0x2000a1e0
    2310:	0000317d 	.word	0x0000317d
    2314:	0000224d 	.word	0x0000224d

00002318 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    2318:	b580      	push	{r7, lr}
    231a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    231c:	2100      	movs	r1, #0
    231e:	2068      	movs	r0, #104	; 0x68
    2320:	4b07      	ldr	r3, [pc, #28]	; (2340 <I2C_FANS_PORT_init+0x28>)
    2322:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    2324:	4907      	ldr	r1, [pc, #28]	; (2344 <I2C_FANS_PORT_init+0x2c>)
    2326:	2068      	movs	r0, #104	; 0x68
    2328:	4b07      	ldr	r3, [pc, #28]	; (2348 <I2C_FANS_PORT_init+0x30>)
    232a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    232c:	2100      	movs	r1, #0
    232e:	2069      	movs	r0, #105	; 0x69
    2330:	4b03      	ldr	r3, [pc, #12]	; (2340 <I2C_FANS_PORT_init+0x28>)
    2332:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    2334:	4905      	ldr	r1, [pc, #20]	; (234c <I2C_FANS_PORT_init+0x34>)
    2336:	2069      	movs	r0, #105	; 0x69
    2338:	4b03      	ldr	r3, [pc, #12]	; (2348 <I2C_FANS_PORT_init+0x30>)
    233a:	4798      	blx	r3
}
    233c:	bf00      	nop
    233e:	bd80      	pop	{r7, pc}
    2340:	00001c29 	.word	0x00001c29
    2344:	00680002 	.word	0x00680002
    2348:	00001c5d 	.word	0x00001c5d
    234c:	00690002 	.word	0x00690002

00002350 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    2350:	b580      	push	{r7, lr}
    2352:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2354:	2244      	movs	r2, #68	; 0x44
    2356:	2125      	movs	r1, #37	; 0x25
    2358:	4806      	ldr	r0, [pc, #24]	; (2374 <I2C_FANS_CLOCK_init+0x24>)
    235a:	4b07      	ldr	r3, [pc, #28]	; (2378 <I2C_FANS_CLOCK_init+0x28>)
    235c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    235e:	224a      	movs	r2, #74	; 0x4a
    2360:	2103      	movs	r1, #3
    2362:	4804      	ldr	r0, [pc, #16]	; (2374 <I2C_FANS_CLOCK_init+0x24>)
    2364:	4b04      	ldr	r3, [pc, #16]	; (2378 <I2C_FANS_CLOCK_init+0x28>)
    2366:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    2368:	4804      	ldr	r0, [pc, #16]	; (237c <I2C_FANS_CLOCK_init+0x2c>)
    236a:	4b05      	ldr	r3, [pc, #20]	; (2380 <I2C_FANS_CLOCK_init+0x30>)
    236c:	4798      	blx	r3
}
    236e:	bf00      	nop
    2370:	bd80      	pop	{r7, pc}
    2372:	bf00      	nop
    2374:	40001c00 	.word	0x40001c00
    2378:	00001409 	.word	0x00001409
    237c:	40000800 	.word	0x40000800
    2380:	000016ef 	.word	0x000016ef

00002384 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    2384:	b580      	push	{r7, lr}
    2386:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    2388:	4b04      	ldr	r3, [pc, #16]	; (239c <I2C_FANS_init+0x18>)
    238a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    238c:	4904      	ldr	r1, [pc, #16]	; (23a0 <I2C_FANS_init+0x1c>)
    238e:	4805      	ldr	r0, [pc, #20]	; (23a4 <I2C_FANS_init+0x20>)
    2390:	4b05      	ldr	r3, [pc, #20]	; (23a8 <I2C_FANS_init+0x24>)
    2392:	4798      	blx	r3
	I2C_FANS_PORT_init();
    2394:	4b05      	ldr	r3, [pc, #20]	; (23ac <I2C_FANS_init+0x28>)
    2396:	4798      	blx	r3
}
    2398:	bf00      	nop
    239a:	bd80      	pop	{r7, pc}
    239c:	00002351 	.word	0x00002351
    23a0:	43000c00 	.word	0x43000c00
    23a4:	2000a210 	.word	0x2000a210
    23a8:	00002ec5 	.word	0x00002ec5
    23ac:	00002319 	.word	0x00002319

000023b0 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    23b0:	b580      	push	{r7, lr}
    23b2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    23b4:	4808      	ldr	r0, [pc, #32]	; (23d8 <TIMER_USB_init+0x28>)
    23b6:	4b09      	ldr	r3, [pc, #36]	; (23dc <TIMER_USB_init+0x2c>)
    23b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    23ba:	2243      	movs	r2, #67	; 0x43
    23bc:	2109      	movs	r1, #9
    23be:	4808      	ldr	r0, [pc, #32]	; (23e0 <TIMER_USB_init+0x30>)
    23c0:	4b08      	ldr	r3, [pc, #32]	; (23e4 <TIMER_USB_init+0x34>)
    23c2:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    23c4:	4b08      	ldr	r3, [pc, #32]	; (23e8 <TIMER_USB_init+0x38>)
    23c6:	4798      	blx	r3
    23c8:	4603      	mov	r3, r0
    23ca:	461a      	mov	r2, r3
    23cc:	4907      	ldr	r1, [pc, #28]	; (23ec <TIMER_USB_init+0x3c>)
    23ce:	4808      	ldr	r0, [pc, #32]	; (23f0 <TIMER_USB_init+0x40>)
    23d0:	4b08      	ldr	r3, [pc, #32]	; (23f4 <TIMER_USB_init+0x44>)
    23d2:	4798      	blx	r3
}
    23d4:	bf00      	nop
    23d6:	bd80      	pop	{r7, pc}
    23d8:	40000800 	.word	0x40000800
    23dc:	0000152f 	.word	0x0000152f
    23e0:	40001c00 	.word	0x40001c00
    23e4:	00001409 	.word	0x00001409
    23e8:	00008d4d 	.word	0x00008d4d
    23ec:	40003800 	.word	0x40003800
    23f0:	2000a358 	.word	0x2000a358
    23f4:	0000340d 	.word	0x0000340d

000023f8 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    23f8:	b580      	push	{r7, lr}
    23fa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    23fc:	4808      	ldr	r0, [pc, #32]	; (2420 <TIMER_ARINC_init+0x28>)
    23fe:	4b09      	ldr	r3, [pc, #36]	; (2424 <TIMER_ARINC_init+0x2c>)
    2400:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2402:	2244      	movs	r2, #68	; 0x44
    2404:	211a      	movs	r1, #26
    2406:	4808      	ldr	r0, [pc, #32]	; (2428 <TIMER_ARINC_init+0x30>)
    2408:	4b08      	ldr	r3, [pc, #32]	; (242c <TIMER_ARINC_init+0x34>)
    240a:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    240c:	4b08      	ldr	r3, [pc, #32]	; (2430 <TIMER_ARINC_init+0x38>)
    240e:	4798      	blx	r3
    2410:	4603      	mov	r3, r0
    2412:	461a      	mov	r2, r3
    2414:	4907      	ldr	r1, [pc, #28]	; (2434 <TIMER_ARINC_init+0x3c>)
    2416:	4808      	ldr	r0, [pc, #32]	; (2438 <TIMER_ARINC_init+0x40>)
    2418:	4b08      	ldr	r3, [pc, #32]	; (243c <TIMER_ARINC_init+0x44>)
    241a:	4798      	blx	r3
}
    241c:	bf00      	nop
    241e:	bd80      	pop	{r7, pc}
    2420:	40000800 	.word	0x40000800
    2424:	000015ef 	.word	0x000015ef
    2428:	40001c00 	.word	0x40001c00
    242c:	00001409 	.word	0x00001409
    2430:	00008d4d 	.word	0x00008d4d
    2434:	4101a000 	.word	0x4101a000
    2438:	2000a338 	.word	0x2000a338
    243c:	0000340d 	.word	0x0000340d

00002440 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    2440:	b580      	push	{r7, lr}
    2442:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    2444:	4808      	ldr	r0, [pc, #32]	; (2468 <TIMER_MAINTENANCE_init+0x28>)
    2446:	4b09      	ldr	r3, [pc, #36]	; (246c <TIMER_MAINTENANCE_init+0x2c>)
    2448:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    244a:	2246      	movs	r2, #70	; 0x46
    244c:	211e      	movs	r1, #30
    244e:	4808      	ldr	r0, [pc, #32]	; (2470 <TIMER_MAINTENANCE_init+0x30>)
    2450:	4b08      	ldr	r3, [pc, #32]	; (2474 <TIMER_MAINTENANCE_init+0x34>)
    2452:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    2454:	4b08      	ldr	r3, [pc, #32]	; (2478 <TIMER_MAINTENANCE_init+0x38>)
    2456:	4798      	blx	r3
    2458:	4603      	mov	r3, r0
    245a:	461a      	mov	r2, r3
    245c:	4907      	ldr	r1, [pc, #28]	; (247c <TIMER_MAINTENANCE_init+0x3c>)
    245e:	4808      	ldr	r0, [pc, #32]	; (2480 <TIMER_MAINTENANCE_init+0x40>)
    2460:	4b08      	ldr	r3, [pc, #32]	; (2484 <TIMER_MAINTENANCE_init+0x44>)
    2462:	4798      	blx	r3
}
    2464:	bf00      	nop
    2466:	bd80      	pop	{r7, pc}
    2468:	40000800 	.word	0x40000800
    246c:	0000162f 	.word	0x0000162f
    2470:	40001c00 	.word	0x40001c00
    2474:	00001409 	.word	0x00001409
    2478:	00008d4d 	.word	0x00008d4d
    247c:	42001400 	.word	0x42001400
    2480:	2000a230 	.word	0x2000a230
    2484:	0000340d 	.word	0x0000340d

00002488 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    2488:	b580      	push	{r7, lr}
    248a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    248c:	4808      	ldr	r0, [pc, #32]	; (24b0 <TIMER_INTERFACE_init+0x28>)
    248e:	4b09      	ldr	r3, [pc, #36]	; (24b4 <TIMER_INTERFACE_init+0x2c>)
    2490:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2492:	2246      	movs	r2, #70	; 0x46
    2494:	211e      	movs	r1, #30
    2496:	4808      	ldr	r0, [pc, #32]	; (24b8 <TIMER_INTERFACE_init+0x30>)
    2498:	4b08      	ldr	r3, [pc, #32]	; (24bc <TIMER_INTERFACE_init+0x34>)
    249a:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    249c:	4b08      	ldr	r3, [pc, #32]	; (24c0 <TIMER_INTERFACE_init+0x38>)
    249e:	4798      	blx	r3
    24a0:	4603      	mov	r3, r0
    24a2:	461a      	mov	r2, r3
    24a4:	4907      	ldr	r1, [pc, #28]	; (24c4 <TIMER_INTERFACE_init+0x3c>)
    24a6:	4808      	ldr	r0, [pc, #32]	; (24c8 <TIMER_INTERFACE_init+0x40>)
    24a8:	4b08      	ldr	r3, [pc, #32]	; (24cc <TIMER_INTERFACE_init+0x44>)
    24aa:	4798      	blx	r3
}
    24ac:	bf00      	nop
    24ae:	bd80      	pop	{r7, pc}
    24b0:	40000800 	.word	0x40000800
    24b4:	0000164f 	.word	0x0000164f
    24b8:	40001c00 	.word	0x40001c00
    24bc:	00001409 	.word	0x00001409
    24c0:	00008d4d 	.word	0x00008d4d
    24c4:	42001800 	.word	0x42001800
    24c8:	2000a274 	.word	0x2000a274
    24cc:	0000340d 	.word	0x0000340d

000024d0 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    24d0:	b580      	push	{r7, lr}
    24d2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    24d4:	4808      	ldr	r0, [pc, #32]	; (24f8 <TIMER_EVENT_init+0x28>)
    24d6:	4b09      	ldr	r3, [pc, #36]	; (24fc <TIMER_EVENT_init+0x2c>)
    24d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    24da:	2246      	movs	r2, #70	; 0x46
    24dc:	2127      	movs	r1, #39	; 0x27
    24de:	4808      	ldr	r0, [pc, #32]	; (2500 <TIMER_EVENT_init+0x30>)
    24e0:	4b08      	ldr	r3, [pc, #32]	; (2504 <TIMER_EVENT_init+0x34>)
    24e2:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    24e4:	4b08      	ldr	r3, [pc, #32]	; (2508 <TIMER_EVENT_init+0x38>)
    24e6:	4798      	blx	r3
    24e8:	4603      	mov	r3, r0
    24ea:	461a      	mov	r2, r3
    24ec:	4907      	ldr	r1, [pc, #28]	; (250c <TIMER_EVENT_init+0x3c>)
    24ee:	4808      	ldr	r0, [pc, #32]	; (2510 <TIMER_EVENT_init+0x40>)
    24f0:	4b08      	ldr	r3, [pc, #32]	; (2514 <TIMER_EVENT_init+0x44>)
    24f2:	4798      	blx	r3
}
    24f4:	bf00      	nop
    24f6:	bd80      	pop	{r7, pc}
    24f8:	40000800 	.word	0x40000800
    24fc:	0000170f 	.word	0x0000170f
    2500:	40001c00 	.word	0x40001c00
    2504:	00001409 	.word	0x00001409
    2508:	00008d4d 	.word	0x00008d4d
    250c:	43001400 	.word	0x43001400
    2510:	2000a254 	.word	0x2000a254
    2514:	0000340d 	.word	0x0000340d

00002518 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    2518:	b480      	push	{r7}
    251a:	af00      	add	r7, sp, #0
}
    251c:	bf00      	nop
    251e:	46bd      	mov	sp, r7
    2520:	f85d 7b04 	ldr.w	r7, [sp], #4
    2524:	4770      	bx	lr
	...

00002528 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    2528:	b580      	push	{r7, lr}
    252a:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    252c:	4804      	ldr	r0, [pc, #16]	; (2540 <LIVE_PULSE_CLOCK_init+0x18>)
    252e:	4b05      	ldr	r3, [pc, #20]	; (2544 <LIVE_PULSE_CLOCK_init+0x1c>)
    2530:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2532:	2240      	movs	r2, #64	; 0x40
    2534:	2127      	movs	r1, #39	; 0x27
    2536:	4804      	ldr	r0, [pc, #16]	; (2548 <LIVE_PULSE_CLOCK_init+0x20>)
    2538:	4b04      	ldr	r3, [pc, #16]	; (254c <LIVE_PULSE_CLOCK_init+0x24>)
    253a:	4798      	blx	r3
}
    253c:	bf00      	nop
    253e:	bd80      	pop	{r7, pc}
    2540:	40000800 	.word	0x40000800
    2544:	0000172f 	.word	0x0000172f
    2548:	40001c00 	.word	0x40001c00
    254c:	00001409 	.word	0x00001409

00002550 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    2550:	b580      	push	{r7, lr}
    2552:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    2554:	4b06      	ldr	r3, [pc, #24]	; (2570 <LIVE_PULSE_init+0x20>)
    2556:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    2558:	4b06      	ldr	r3, [pc, #24]	; (2574 <LIVE_PULSE_init+0x24>)
    255a:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    255c:	4b06      	ldr	r3, [pc, #24]	; (2578 <LIVE_PULSE_init+0x28>)
    255e:	4798      	blx	r3
    2560:	4603      	mov	r3, r0
    2562:	461a      	mov	r2, r3
    2564:	4905      	ldr	r1, [pc, #20]	; (257c <LIVE_PULSE_init+0x2c>)
    2566:	4806      	ldr	r0, [pc, #24]	; (2580 <LIVE_PULSE_init+0x30>)
    2568:	4b06      	ldr	r3, [pc, #24]	; (2584 <LIVE_PULSE_init+0x34>)
    256a:	4798      	blx	r3
}
    256c:	bf00      	nop
    256e:	bd80      	pop	{r7, pc}
    2570:	00002529 	.word	0x00002529
    2574:	00002519 	.word	0x00002519
    2578:	00008d61 	.word	0x00008d61
    257c:	43001800 	.word	0x43001800
    2580:	2000a2b4 	.word	0x2000a2b4
    2584:	00002fc1 	.word	0x00002fc1

00002588 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    2588:	b580      	push	{r7, lr}
    258a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    258c:	4804      	ldr	r0, [pc, #16]	; (25a0 <TIMER_HVAC_CLOCK_init+0x18>)
    258e:	4b05      	ldr	r3, [pc, #20]	; (25a4 <TIMER_HVAC_CLOCK_init+0x1c>)
    2590:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2592:	2244      	movs	r2, #68	; 0x44
    2594:	2119      	movs	r1, #25
    2596:	4804      	ldr	r0, [pc, #16]	; (25a8 <TIMER_HVAC_CLOCK_init+0x20>)
    2598:	4b04      	ldr	r3, [pc, #16]	; (25ac <TIMER_HVAC_CLOCK_init+0x24>)
    259a:	4798      	blx	r3
}
    259c:	bf00      	nop
    259e:	bd80      	pop	{r7, pc}
    25a0:	40000800 	.word	0x40000800
    25a4:	000015af 	.word	0x000015af
    25a8:	40001c00 	.word	0x40001c00
    25ac:	00001409 	.word	0x00001409

000025b0 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    25b0:	b580      	push	{r7, lr}
    25b2:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    25b4:	4b05      	ldr	r3, [pc, #20]	; (25cc <TIMER_HVAC_init+0x1c>)
    25b6:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    25b8:	4b05      	ldr	r3, [pc, #20]	; (25d0 <TIMER_HVAC_init+0x20>)
    25ba:	4798      	blx	r3
    25bc:	4603      	mov	r3, r0
    25be:	461a      	mov	r2, r3
    25c0:	4904      	ldr	r1, [pc, #16]	; (25d4 <TIMER_HVAC_init+0x24>)
    25c2:	4805      	ldr	r0, [pc, #20]	; (25d8 <TIMER_HVAC_init+0x28>)
    25c4:	4b05      	ldr	r3, [pc, #20]	; (25dc <TIMER_HVAC_init+0x2c>)
    25c6:	4798      	blx	r3
}
    25c8:	bf00      	nop
    25ca:	bd80      	pop	{r7, pc}
    25cc:	00002589 	.word	0x00002589
    25d0:	00008131 	.word	0x00008131
    25d4:	41016000 	.word	0x41016000
    25d8:	2000a378 	.word	0x2000a378
    25dc:	0000340d 	.word	0x0000340d

000025e0 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    25e0:	b580      	push	{r7, lr}
    25e2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    25e4:	4804      	ldr	r0, [pc, #16]	; (25f8 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    25e6:	4b05      	ldr	r3, [pc, #20]	; (25fc <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    25e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    25ea:	2244      	movs	r2, #68	; 0x44
    25ec:	2119      	movs	r1, #25
    25ee:	4804      	ldr	r0, [pc, #16]	; (2600 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    25f0:	4b04      	ldr	r3, [pc, #16]	; (2604 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    25f2:	4798      	blx	r3
}
    25f4:	bf00      	nop
    25f6:	bd80      	pop	{r7, pc}
    25f8:	40000800 	.word	0x40000800
    25fc:	000015cf 	.word	0x000015cf
    2600:	40001c00 	.word	0x40001c00
    2604:	00001409 	.word	0x00001409

00002608 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    2608:	b580      	push	{r7, lr}
    260a:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    260c:	4b05      	ldr	r3, [pc, #20]	; (2624 <TIMER_TEMPERATURES_init+0x1c>)
    260e:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    2610:	4b05      	ldr	r3, [pc, #20]	; (2628 <TIMER_TEMPERATURES_init+0x20>)
    2612:	4798      	blx	r3
    2614:	4603      	mov	r3, r0
    2616:	461a      	mov	r2, r3
    2618:	4904      	ldr	r1, [pc, #16]	; (262c <TIMER_TEMPERATURES_init+0x24>)
    261a:	4805      	ldr	r0, [pc, #20]	; (2630 <TIMER_TEMPERATURES_init+0x28>)
    261c:	4b05      	ldr	r3, [pc, #20]	; (2634 <TIMER_TEMPERATURES_init+0x2c>)
    261e:	4798      	blx	r3
}
    2620:	bf00      	nop
    2622:	bd80      	pop	{r7, pc}
    2624:	000025e1 	.word	0x000025e1
    2628:	00008131 	.word	0x00008131
    262c:	41018000 	.word	0x41018000
    2630:	2000a1c0 	.word	0x2000a1c0
    2634:	0000340d 	.word	0x0000340d

00002638 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    2638:	b580      	push	{r7, lr}
    263a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    263c:	4804      	ldr	r0, [pc, #16]	; (2650 <TIMER_CCU_CLOCK_init+0x18>)
    263e:	4b05      	ldr	r3, [pc, #20]	; (2654 <TIMER_CCU_CLOCK_init+0x1c>)
    2640:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2642:	2240      	movs	r2, #64	; 0x40
    2644:	211d      	movs	r1, #29
    2646:	4804      	ldr	r0, [pc, #16]	; (2658 <TIMER_CCU_CLOCK_init+0x20>)
    2648:	4b04      	ldr	r3, [pc, #16]	; (265c <TIMER_CCU_CLOCK_init+0x24>)
    264a:	4798      	blx	r3
}
    264c:	bf00      	nop
    264e:	bd80      	pop	{r7, pc}
    2650:	40000800 	.word	0x40000800
    2654:	0000160f 	.word	0x0000160f
    2658:	40001c00 	.word	0x40001c00
    265c:	00001409 	.word	0x00001409

00002660 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    2660:	b580      	push	{r7, lr}
    2662:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    2664:	4b05      	ldr	r3, [pc, #20]	; (267c <TIMER_CCU_init+0x1c>)
    2666:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    2668:	4b05      	ldr	r3, [pc, #20]	; (2680 <TIMER_CCU_init+0x20>)
    266a:	4798      	blx	r3
    266c:	4603      	mov	r3, r0
    266e:	461a      	mov	r2, r3
    2670:	4904      	ldr	r1, [pc, #16]	; (2684 <TIMER_CCU_init+0x24>)
    2672:	4805      	ldr	r0, [pc, #20]	; (2688 <TIMER_CCU_init+0x28>)
    2674:	4b05      	ldr	r3, [pc, #20]	; (268c <TIMER_CCU_init+0x2c>)
    2676:	4798      	blx	r3
}
    2678:	bf00      	nop
    267a:	bd80      	pop	{r7, pc}
    267c:	00002639 	.word	0x00002639
    2680:	00008131 	.word	0x00008131
    2684:	42000c00 	.word	0x42000c00
    2688:	2000a2d0 	.word	0x2000a2d0
    268c:	0000340d 	.word	0x0000340d

00002690 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    2690:	b580      	push	{r7, lr}
    2692:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    2694:	2102      	movs	r1, #2
    2696:	2018      	movs	r0, #24
    2698:	4b0f      	ldr	r3, [pc, #60]	; (26d8 <CDCUSB_PORT_init+0x48>)
    269a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    269c:	2100      	movs	r1, #0
    269e:	2018      	movs	r0, #24
    26a0:	4b0e      	ldr	r3, [pc, #56]	; (26dc <CDCUSB_PORT_init+0x4c>)
    26a2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    26a4:	2100      	movs	r1, #0
    26a6:	2018      	movs	r0, #24
    26a8:	4b0d      	ldr	r3, [pc, #52]	; (26e0 <CDCUSB_PORT_init+0x50>)
    26aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    26ac:	490d      	ldr	r1, [pc, #52]	; (26e4 <CDCUSB_PORT_init+0x54>)
    26ae:	2018      	movs	r0, #24
    26b0:	4b0d      	ldr	r3, [pc, #52]	; (26e8 <CDCUSB_PORT_init+0x58>)
    26b2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    26b4:	2102      	movs	r1, #2
    26b6:	2019      	movs	r0, #25
    26b8:	4b07      	ldr	r3, [pc, #28]	; (26d8 <CDCUSB_PORT_init+0x48>)
    26ba:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    26bc:	2100      	movs	r1, #0
    26be:	2019      	movs	r0, #25
    26c0:	4b06      	ldr	r3, [pc, #24]	; (26dc <CDCUSB_PORT_init+0x4c>)
    26c2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    26c4:	2100      	movs	r1, #0
    26c6:	2019      	movs	r0, #25
    26c8:	4b05      	ldr	r3, [pc, #20]	; (26e0 <CDCUSB_PORT_init+0x50>)
    26ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    26cc:	4907      	ldr	r1, [pc, #28]	; (26ec <CDCUSB_PORT_init+0x5c>)
    26ce:	2019      	movs	r0, #25
    26d0:	4b05      	ldr	r3, [pc, #20]	; (26e8 <CDCUSB_PORT_init+0x58>)
    26d2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    26d4:	bf00      	nop
    26d6:	bd80      	pop	{r7, pc}
    26d8:	00001c7d 	.word	0x00001c7d
    26dc:	00001cb5 	.word	0x00001cb5
    26e0:	00001c29 	.word	0x00001c29
    26e4:	00180007 	.word	0x00180007
    26e8:	00001c5d 	.word	0x00001c5d
    26ec:	00190007 	.word	0x00190007

000026f0 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    26f0:	b580      	push	{r7, lr}
    26f2:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    26f4:	2242      	movs	r2, #66	; 0x42
    26f6:	210a      	movs	r1, #10
    26f8:	4805      	ldr	r0, [pc, #20]	; (2710 <CDCUSB_CLOCK_init+0x20>)
    26fa:	4b06      	ldr	r3, [pc, #24]	; (2714 <CDCUSB_CLOCK_init+0x24>)
    26fc:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    26fe:	4806      	ldr	r0, [pc, #24]	; (2718 <CDCUSB_CLOCK_init+0x28>)
    2700:	4b06      	ldr	r3, [pc, #24]	; (271c <CDCUSB_CLOCK_init+0x2c>)
    2702:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2704:	4804      	ldr	r0, [pc, #16]	; (2718 <CDCUSB_CLOCK_init+0x28>)
    2706:	4b06      	ldr	r3, [pc, #24]	; (2720 <CDCUSB_CLOCK_init+0x30>)
    2708:	4798      	blx	r3
}
    270a:	bf00      	nop
    270c:	bd80      	pop	{r7, pc}
    270e:	bf00      	nop
    2710:	40001c00 	.word	0x40001c00
    2714:	00001409 	.word	0x00001409
    2718:	40000800 	.word	0x40000800
    271c:	0000142f 	.word	0x0000142f
    2720:	0000154f 	.word	0x0000154f

00002724 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2724:	b580      	push	{r7, lr}
    2726:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    2728:	4b03      	ldr	r3, [pc, #12]	; (2738 <CDCUSB_init+0x14>)
    272a:	4798      	blx	r3
	usb_d_init();
    272c:	4b03      	ldr	r3, [pc, #12]	; (273c <CDCUSB_init+0x18>)
    272e:	4798      	blx	r3
	CDCUSB_PORT_init();
    2730:	4b03      	ldr	r3, [pc, #12]	; (2740 <CDCUSB_init+0x1c>)
    2732:	4798      	blx	r3
}
    2734:	bf00      	nop
    2736:	bd80      	pop	{r7, pc}
    2738:	000026f1 	.word	0x000026f1
    273c:	00003c69 	.word	0x00003c69
    2740:	00002691 	.word	0x00002691

00002744 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    2744:	b580      	push	{r7, lr}
    2746:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    2748:	4802      	ldr	r0, [pc, #8]	; (2754 <WATCHDOG_CLOCK_init+0x10>)
    274a:	4b03      	ldr	r3, [pc, #12]	; (2758 <WATCHDOG_CLOCK_init+0x14>)
    274c:	4798      	blx	r3
}
    274e:	bf00      	nop
    2750:	bd80      	pop	{r7, pc}
    2752:	bf00      	nop
    2754:	40000800 	.word	0x40000800
    2758:	000014af 	.word	0x000014af

0000275c <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    275c:	b580      	push	{r7, lr}
    275e:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    2760:	4b03      	ldr	r3, [pc, #12]	; (2770 <WATCHDOG_init+0x14>)
    2762:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2764:	4903      	ldr	r1, [pc, #12]	; (2774 <WATCHDOG_init+0x18>)
    2766:	4804      	ldr	r0, [pc, #16]	; (2778 <WATCHDOG_init+0x1c>)
    2768:	4b04      	ldr	r3, [pc, #16]	; (277c <WATCHDOG_init+0x20>)
    276a:	4798      	blx	r3
}
    276c:	bf00      	nop
    276e:	bd80      	pop	{r7, pc}
    2770:	00002745 	.word	0x00002745
    2774:	40002000 	.word	0x40002000
    2778:	2000a3b8 	.word	0x2000a3b8
    277c:	00001cfd 	.word	0x00001cfd

00002780 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    2780:	b580      	push	{r7, lr}
    2782:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    2784:	4904      	ldr	r1, [pc, #16]	; (2798 <CAN_CCU_PORT_init+0x18>)
    2786:	202d      	movs	r0, #45	; 0x2d
    2788:	4b04      	ldr	r3, [pc, #16]	; (279c <CAN_CCU_PORT_init+0x1c>)
    278a:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    278c:	4904      	ldr	r1, [pc, #16]	; (27a0 <CAN_CCU_PORT_init+0x20>)
    278e:	202c      	movs	r0, #44	; 0x2c
    2790:	4b02      	ldr	r3, [pc, #8]	; (279c <CAN_CCU_PORT_init+0x1c>)
    2792:	4798      	blx	r3
}
    2794:	bf00      	nop
    2796:	bd80      	pop	{r7, pc}
    2798:	002d0007 	.word	0x002d0007
    279c:	00001c5d 	.word	0x00001c5d
    27a0:	002c0007 	.word	0x002c0007

000027a4 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    27a4:	b580      	push	{r7, lr}
    27a6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    27a8:	4807      	ldr	r0, [pc, #28]	; (27c8 <CAN_CCU_init+0x24>)
    27aa:	4b08      	ldr	r3, [pc, #32]	; (27cc <CAN_CCU_init+0x28>)
    27ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    27ae:	2249      	movs	r2, #73	; 0x49
    27b0:	211c      	movs	r1, #28
    27b2:	4807      	ldr	r0, [pc, #28]	; (27d0 <CAN_CCU_init+0x2c>)
    27b4:	4b07      	ldr	r3, [pc, #28]	; (27d4 <CAN_CCU_init+0x30>)
    27b6:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    27b8:	4907      	ldr	r1, [pc, #28]	; (27d8 <CAN_CCU_init+0x34>)
    27ba:	4808      	ldr	r0, [pc, #32]	; (27dc <CAN_CCU_init+0x38>)
    27bc:	4b08      	ldr	r3, [pc, #32]	; (27e0 <CAN_CCU_init+0x3c>)
    27be:	4798      	blx	r3
	CAN_CCU_PORT_init();
    27c0:	4b08      	ldr	r3, [pc, #32]	; (27e4 <CAN_CCU_init+0x40>)
    27c2:	4798      	blx	r3
}
    27c4:	bf00      	nop
    27c6:	bd80      	pop	{r7, pc}
    27c8:	40000800 	.word	0x40000800
    27cc:	0000146f 	.word	0x0000146f
    27d0:	40001c00 	.word	0x40001c00
    27d4:	00001409 	.word	0x00001409
    27d8:	42000400 	.word	0x42000400
    27dc:	2000a310 	.word	0x2000a310
    27e0:	00002a49 	.word	0x00002a49
    27e4:	00002781 	.word	0x00002781

000027e8 <system_init>:

void system_init(void)
{
    27e8:	b580      	push	{r7, lr}
    27ea:	af00      	add	r7, sp, #0
	init_mcu();
    27ec:	4b5f      	ldr	r3, [pc, #380]	; (296c <system_init+0x184>)
    27ee:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    27f0:	2100      	movs	r1, #0
    27f2:	2007      	movs	r0, #7
    27f4:	4b5e      	ldr	r3, [pc, #376]	; (2970 <system_init+0x188>)
    27f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    27f8:	2102      	movs	r1, #2
    27fa:	2007      	movs	r0, #7
    27fc:	4b5d      	ldr	r3, [pc, #372]	; (2974 <system_init+0x18c>)
    27fe:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    2800:	f04f 31ff 	mov.w	r1, #4294967295
    2804:	2007      	movs	r0, #7
    2806:	4b5c      	ldr	r3, [pc, #368]	; (2978 <system_init+0x190>)
    2808:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    280a:	2101      	movs	r1, #1
    280c:	200f      	movs	r0, #15
    280e:	4b58      	ldr	r3, [pc, #352]	; (2970 <system_init+0x188>)
    2810:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    2812:	2102      	movs	r1, #2
    2814:	200f      	movs	r0, #15
    2816:	4b57      	ldr	r3, [pc, #348]	; (2974 <system_init+0x18c>)
    2818:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    281a:	f04f 31ff 	mov.w	r1, #4294967295
    281e:	200f      	movs	r0, #15
    2820:	4b55      	ldr	r3, [pc, #340]	; (2978 <system_init+0x190>)
    2822:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2824:	2101      	movs	r1, #1
    2826:	2013      	movs	r0, #19
    2828:	4b51      	ldr	r3, [pc, #324]	; (2970 <system_init+0x188>)
    282a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    282c:	2102      	movs	r1, #2
    282e:	2013      	movs	r0, #19
    2830:	4b50      	ldr	r3, [pc, #320]	; (2974 <system_init+0x18c>)
    2832:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2834:	f04f 31ff 	mov.w	r1, #4294967295
    2838:	2013      	movs	r0, #19
    283a:	4b4f      	ldr	r3, [pc, #316]	; (2978 <system_init+0x190>)
    283c:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    283e:	2101      	movs	r1, #1
    2840:	201b      	movs	r0, #27
    2842:	4b4b      	ldr	r3, [pc, #300]	; (2970 <system_init+0x188>)
    2844:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    2846:	2102      	movs	r1, #2
    2848:	201b      	movs	r0, #27
    284a:	4b4a      	ldr	r3, [pc, #296]	; (2974 <system_init+0x18c>)
    284c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    284e:	f04f 31ff 	mov.w	r1, #4294967295
    2852:	201b      	movs	r0, #27
    2854:	4b48      	ldr	r3, [pc, #288]	; (2978 <system_init+0x190>)
    2856:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2858:	2101      	movs	r1, #1
    285a:	2027      	movs	r0, #39	; 0x27
    285c:	4b44      	ldr	r3, [pc, #272]	; (2970 <system_init+0x188>)
    285e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2860:	2102      	movs	r1, #2
    2862:	2027      	movs	r0, #39	; 0x27
    2864:	4b43      	ldr	r3, [pc, #268]	; (2974 <system_init+0x18c>)
    2866:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2868:	f04f 31ff 	mov.w	r1, #4294967295
    286c:	2027      	movs	r0, #39	; 0x27
    286e:	4b42      	ldr	r3, [pc, #264]	; (2978 <system_init+0x190>)
    2870:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    2872:	2101      	movs	r1, #1
    2874:	203d      	movs	r0, #61	; 0x3d
    2876:	4b3e      	ldr	r3, [pc, #248]	; (2970 <system_init+0x188>)
    2878:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    287a:	2102      	movs	r1, #2
    287c:	203d      	movs	r0, #61	; 0x3d
    287e:	4b3d      	ldr	r3, [pc, #244]	; (2974 <system_init+0x18c>)
    2880:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    2882:	f04f 31ff 	mov.w	r1, #4294967295
    2886:	203d      	movs	r0, #61	; 0x3d
    2888:	4b3b      	ldr	r3, [pc, #236]	; (2978 <system_init+0x190>)
    288a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    288c:	2101      	movs	r1, #1
    288e:	203f      	movs	r0, #63	; 0x3f
    2890:	4b38      	ldr	r3, [pc, #224]	; (2974 <system_init+0x18c>)
    2892:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    2894:	2101      	movs	r1, #1
    2896:	203f      	movs	r0, #63	; 0x3f
    2898:	4b38      	ldr	r3, [pc, #224]	; (297c <system_init+0x194>)
    289a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    289c:	f04f 31ff 	mov.w	r1, #4294967295
    28a0:	203f      	movs	r0, #63	; 0x3f
    28a2:	4b35      	ldr	r3, [pc, #212]	; (2978 <system_init+0x190>)
    28a4:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    28a6:	2100      	movs	r1, #0
    28a8:	204d      	movs	r0, #77	; 0x4d
    28aa:	4b31      	ldr	r3, [pc, #196]	; (2970 <system_init+0x188>)
    28ac:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    28ae:	2102      	movs	r1, #2
    28b0:	204d      	movs	r0, #77	; 0x4d
    28b2:	4b30      	ldr	r3, [pc, #192]	; (2974 <system_init+0x18c>)
    28b4:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    28b6:	f04f 31ff 	mov.w	r1, #4294967295
    28ba:	204d      	movs	r0, #77	; 0x4d
    28bc:	4b2e      	ldr	r3, [pc, #184]	; (2978 <system_init+0x190>)
    28be:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    28c0:	2101      	movs	r1, #1
    28c2:	204e      	movs	r0, #78	; 0x4e
    28c4:	4b2a      	ldr	r3, [pc, #168]	; (2970 <system_init+0x188>)
    28c6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    28c8:	2102      	movs	r1, #2
    28ca:	204e      	movs	r0, #78	; 0x4e
    28cc:	4b29      	ldr	r3, [pc, #164]	; (2974 <system_init+0x18c>)
    28ce:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    28d0:	f04f 31ff 	mov.w	r1, #4294967295
    28d4:	204e      	movs	r0, #78	; 0x4e
    28d6:	4b28      	ldr	r3, [pc, #160]	; (2978 <system_init+0x190>)
    28d8:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    28da:	2100      	movs	r1, #0
    28dc:	204f      	movs	r0, #79	; 0x4f
    28de:	4b24      	ldr	r3, [pc, #144]	; (2970 <system_init+0x188>)
    28e0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    28e2:	2102      	movs	r1, #2
    28e4:	204f      	movs	r0, #79	; 0x4f
    28e6:	4b23      	ldr	r3, [pc, #140]	; (2974 <system_init+0x18c>)
    28e8:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    28ea:	f04f 31ff 	mov.w	r1, #4294967295
    28ee:	204f      	movs	r0, #79	; 0x4f
    28f0:	4b21      	ldr	r3, [pc, #132]	; (2978 <system_init+0x190>)
    28f2:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    28f4:	2100      	movs	r1, #0
    28f6:	2052      	movs	r0, #82	; 0x52
    28f8:	4b1d      	ldr	r3, [pc, #116]	; (2970 <system_init+0x188>)
    28fa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    28fc:	2102      	movs	r1, #2
    28fe:	2052      	movs	r0, #82	; 0x52
    2900:	4b1c      	ldr	r3, [pc, #112]	; (2974 <system_init+0x18c>)
    2902:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2904:	f04f 31ff 	mov.w	r1, #4294967295
    2908:	2052      	movs	r0, #82	; 0x52
    290a:	4b1b      	ldr	r3, [pc, #108]	; (2978 <system_init+0x190>)
    290c:	4798      	blx	r3

	CRC_CALC_init();
    290e:	4b1c      	ldr	r3, [pc, #112]	; (2980 <system_init+0x198>)
    2910:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    2912:	4b1c      	ldr	r3, [pc, #112]	; (2984 <system_init+0x19c>)
    2914:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2916:	4b1c      	ldr	r3, [pc, #112]	; (2988 <system_init+0x1a0>)
    2918:	4798      	blx	r3

	QSPI_N25Q256_init();
    291a:	4b1c      	ldr	r3, [pc, #112]	; (298c <system_init+0x1a4>)
    291c:	4798      	blx	r3

	DATETIME_CLOCK_init();
    291e:	4b1c      	ldr	r3, [pc, #112]	; (2990 <system_init+0x1a8>)
    2920:	4798      	blx	r3

	I2C_HEATERS_init();
    2922:	4b1c      	ldr	r3, [pc, #112]	; (2994 <system_init+0x1ac>)
    2924:	4798      	blx	r3

	SPI_TEMP_init();
    2926:	4b1c      	ldr	r3, [pc, #112]	; (2998 <system_init+0x1b0>)
    2928:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    292a:	4b1c      	ldr	r3, [pc, #112]	; (299c <system_init+0x1b4>)
    292c:	4798      	blx	r3

	SPI_HI3593_init();
    292e:	4b1c      	ldr	r3, [pc, #112]	; (29a0 <system_init+0x1b8>)
    2930:	4798      	blx	r3

	I2C_FANS_init();
    2932:	4b1c      	ldr	r3, [pc, #112]	; (29a4 <system_init+0x1bc>)
    2934:	4798      	blx	r3

	TIMER_USB_init();
    2936:	4b1c      	ldr	r3, [pc, #112]	; (29a8 <system_init+0x1c0>)
    2938:	4798      	blx	r3
	TIMER_ARINC_init();
    293a:	4b1c      	ldr	r3, [pc, #112]	; (29ac <system_init+0x1c4>)
    293c:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    293e:	4b1c      	ldr	r3, [pc, #112]	; (29b0 <system_init+0x1c8>)
    2940:	4798      	blx	r3
	TIMER_INTERFACE_init();
    2942:	4b1c      	ldr	r3, [pc, #112]	; (29b4 <system_init+0x1cc>)
    2944:	4798      	blx	r3
	TIMER_EVENT_init();
    2946:	4b1c      	ldr	r3, [pc, #112]	; (29b8 <system_init+0x1d0>)
    2948:	4798      	blx	r3
	LIVE_PULSE_init();
    294a:	4b1c      	ldr	r3, [pc, #112]	; (29bc <system_init+0x1d4>)
    294c:	4798      	blx	r3

	TIMER_HVAC_init();
    294e:	4b1c      	ldr	r3, [pc, #112]	; (29c0 <system_init+0x1d8>)
    2950:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    2952:	4b1c      	ldr	r3, [pc, #112]	; (29c4 <system_init+0x1dc>)
    2954:	4798      	blx	r3

	TIMER_CCU_init();
    2956:	4b1c      	ldr	r3, [pc, #112]	; (29c8 <system_init+0x1e0>)
    2958:	4798      	blx	r3

	CDCUSB_init();
    295a:	4b1c      	ldr	r3, [pc, #112]	; (29cc <system_init+0x1e4>)
    295c:	4798      	blx	r3

	WATCHDOG_init();
    295e:	4b1c      	ldr	r3, [pc, #112]	; (29d0 <system_init+0x1e8>)
    2960:	4798      	blx	r3
	CAN_CCU_init();
    2962:	4b1c      	ldr	r3, [pc, #112]	; (29d4 <system_init+0x1ec>)
    2964:	4798      	blx	r3
}
    2966:	bf00      	nop
    2968:	bd80      	pop	{r7, pc}
    296a:	bf00      	nop
    296c:	00001ced 	.word	0x00001ced
    2970:	00001cb5 	.word	0x00001cb5
    2974:	00001c7d 	.word	0x00001c7d
    2978:	00001c5d 	.word	0x00001c5d
    297c:	00001c29 	.word	0x00001c29
    2980:	00001d4d 	.word	0x00001d4d
    2984:	00001d79 	.word	0x00001d79
    2988:	00001ea1 	.word	0x00001ea1
    298c:	00001fe9 	.word	0x00001fe9
    2990:	0000202d 	.word	0x0000202d
    2994:	000020bd 	.word	0x000020bd
    2998:	00002189 	.word	0x00002189
    299c:	00002221 	.word	0x00002221
    29a0:	000022ed 	.word	0x000022ed
    29a4:	00002385 	.word	0x00002385
    29a8:	000023b1 	.word	0x000023b1
    29ac:	000023f9 	.word	0x000023f9
    29b0:	00002441 	.word	0x00002441
    29b4:	00002489 	.word	0x00002489
    29b8:	000024d1 	.word	0x000024d1
    29bc:	00002551 	.word	0x00002551
    29c0:	000025b1 	.word	0x000025b1
    29c4:	00002609 	.word	0x00002609
    29c8:	00002661 	.word	0x00002661
    29cc:	00002725 	.word	0x00002725
    29d0:	0000275d 	.word	0x0000275d
    29d4:	000027a5 	.word	0x000027a5

000029d8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    29d8:	b580      	push	{r7, lr}
    29da:	b084      	sub	sp, #16
    29dc:	af00      	add	r7, sp, #0
    29de:	6078      	str	r0, [r7, #4]
    29e0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    29e2:	2300      	movs	r3, #0
    29e4:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	2b00      	cmp	r3, #0
    29ea:	bf14      	ite	ne
    29ec:	2301      	movne	r3, #1
    29ee:	2300      	moveq	r3, #0
    29f0:	b2db      	uxtb	r3, r3
    29f2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    29f6:	4911      	ldr	r1, [pc, #68]	; (2a3c <calendar_init+0x64>)
    29f8:	4618      	mov	r0, r3
    29fa:	4b11      	ldr	r3, [pc, #68]	; (2a40 <calendar_init+0x68>)
    29fc:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	681a      	ldr	r2, [r3, #0]
    2a02:	683b      	ldr	r3, [r7, #0]
    2a04:	429a      	cmp	r2, r3
    2a06:	d101      	bne.n	2a0c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    2a08:	2300      	movs	r3, #0
    2a0a:	e013      	b.n	2a34 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	2b00      	cmp	r3, #0
    2a12:	d002      	beq.n	2a1a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2a14:	f06f 0311 	mvn.w	r3, #17
    2a18:	e00c      	b.n	2a34 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    2a1a:	687b      	ldr	r3, [r7, #4]
    2a1c:	683a      	ldr	r2, [r7, #0]
    2a1e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	4618      	mov	r0, r3
    2a24:	4b07      	ldr	r3, [pc, #28]	; (2a44 <calendar_init+0x6c>)
    2a26:	4798      	blx	r3
    2a28:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    2a2a:	687b      	ldr	r3, [r7, #4]
    2a2c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2a30:	619a      	str	r2, [r3, #24]

	return ret;
    2a32:	68fb      	ldr	r3, [r7, #12]
}
    2a34:	4618      	mov	r0, r3
    2a36:	3710      	adds	r7, #16
    2a38:	46bd      	mov	sp, r7
    2a3a:	bd80      	pop	{r7, pc}
    2a3c:	00014694 	.word	0x00014694
    2a40:	00004211 	.word	0x00004211
    2a44:	000065d1 	.word	0x000065d1

00002a48 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    2a48:	b580      	push	{r7, lr}
    2a4a:	b084      	sub	sp, #16
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	6078      	str	r0, [r7, #4]
    2a50:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	2b00      	cmp	r3, #0
    2a56:	d004      	beq.n	2a62 <can_async_init+0x1a>
    2a58:	683b      	ldr	r3, [r7, #0]
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d001      	beq.n	2a62 <can_async_init+0x1a>
    2a5e:	2301      	movs	r3, #1
    2a60:	e000      	b.n	2a64 <can_async_init+0x1c>
    2a62:	2300      	movs	r3, #0
    2a64:	f003 0301 	and.w	r3, r3, #1
    2a68:	b2db      	uxtb	r3, r3
    2a6a:	2241      	movs	r2, #65	; 0x41
    2a6c:	490e      	ldr	r1, [pc, #56]	; (2aa8 <can_async_init+0x60>)
    2a6e:	4618      	mov	r0, r3
    2a70:	4b0e      	ldr	r3, [pc, #56]	; (2aac <can_async_init+0x64>)
    2a72:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2a74:	687b      	ldr	r3, [r7, #4]
    2a76:	6839      	ldr	r1, [r7, #0]
    2a78:	4618      	mov	r0, r3
    2a7a:	4b0d      	ldr	r3, [pc, #52]	; (2ab0 <can_async_init+0x68>)
    2a7c:	4798      	blx	r3
    2a7e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2a80:	68fb      	ldr	r3, [r7, #12]
    2a82:	2b00      	cmp	r3, #0
    2a84:	d001      	beq.n	2a8a <can_async_init+0x42>
		return rc;
    2a86:	68fb      	ldr	r3, [r7, #12]
    2a88:	e009      	b.n	2a9e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    2a8a:	687b      	ldr	r3, [r7, #4]
    2a8c:	4a09      	ldr	r2, [pc, #36]	; (2ab4 <can_async_init+0x6c>)
    2a8e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2a90:	687b      	ldr	r3, [r7, #4]
    2a92:	4a09      	ldr	r2, [pc, #36]	; (2ab8 <can_async_init+0x70>)
    2a94:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    2a96:	687b      	ldr	r3, [r7, #4]
    2a98:	4a08      	ldr	r2, [pc, #32]	; (2abc <can_async_init+0x74>)
    2a9a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2a9c:	2300      	movs	r3, #0
}
    2a9e:	4618      	mov	r0, r3
    2aa0:	3710      	adds	r7, #16
    2aa2:	46bd      	mov	sp, r7
    2aa4:	bd80      	pop	{r7, pc}
    2aa6:	bf00      	nop
    2aa8:	000146b0 	.word	0x000146b0
    2aac:	00004211 	.word	0x00004211
    2ab0:	0000476d 	.word	0x0000476d
    2ab4:	00002ac1 	.word	0x00002ac1
    2ab8:	00002ae5 	.word	0x00002ae5
    2abc:	00002b09 	.word	0x00002b09

00002ac0 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	b084      	sub	sp, #16
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2ac8:	687b      	ldr	r3, [r7, #4]
    2aca:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2acc:	68fb      	ldr	r3, [r7, #12]
    2ace:	69db      	ldr	r3, [r3, #28]
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	d003      	beq.n	2adc <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2ad4:	68fb      	ldr	r3, [r7, #12]
    2ad6:	69db      	ldr	r3, [r3, #28]
    2ad8:	68f8      	ldr	r0, [r7, #12]
    2ada:	4798      	blx	r3
	}
}
    2adc:	bf00      	nop
    2ade:	3710      	adds	r7, #16
    2ae0:	46bd      	mov	sp, r7
    2ae2:	bd80      	pop	{r7, pc}

00002ae4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2ae4:	b580      	push	{r7, lr}
    2ae6:	b084      	sub	sp, #16
    2ae8:	af00      	add	r7, sp, #0
    2aea:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2aec:	687b      	ldr	r3, [r7, #4]
    2aee:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2af0:	68fb      	ldr	r3, [r7, #12]
    2af2:	6a1b      	ldr	r3, [r3, #32]
    2af4:	2b00      	cmp	r3, #0
    2af6:	d003      	beq.n	2b00 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2af8:	68fb      	ldr	r3, [r7, #12]
    2afa:	6a1b      	ldr	r3, [r3, #32]
    2afc:	68f8      	ldr	r0, [r7, #12]
    2afe:	4798      	blx	r3
	}
}
    2b00:	bf00      	nop
    2b02:	3710      	adds	r7, #16
    2b04:	46bd      	mov	sp, r7
    2b06:	bd80      	pop	{r7, pc}

00002b08 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    2b08:	b580      	push	{r7, lr}
    2b0a:	b084      	sub	sp, #16
    2b0c:	af00      	add	r7, sp, #0
    2b0e:	6078      	str	r0, [r7, #4]
    2b10:	460b      	mov	r3, r1
    2b12:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    2b18:	68fb      	ldr	r3, [r7, #12]
    2b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d005      	beq.n	2b2c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2b20:	68fb      	ldr	r3, [r7, #12]
    2b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b24:	78fa      	ldrb	r2, [r7, #3]
    2b26:	4611      	mov	r1, r2
    2b28:	68f8      	ldr	r0, [r7, #12]
    2b2a:	4798      	blx	r3
	}
}
    2b2c:	bf00      	nop
    2b2e:	3710      	adds	r7, #16
    2b30:	46bd      	mov	sp, r7
    2b32:	bd80      	pop	{r7, pc}

00002b34 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2b34:	b580      	push	{r7, lr}
    2b36:	b082      	sub	sp, #8
    2b38:	af00      	add	r7, sp, #0
    2b3a:	6078      	str	r0, [r7, #4]
    2b3c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2b3e:	687b      	ldr	r3, [r7, #4]
    2b40:	2b00      	cmp	r3, #0
    2b42:	d004      	beq.n	2b4e <crc_sync_init+0x1a>
    2b44:	683b      	ldr	r3, [r7, #0]
    2b46:	2b00      	cmp	r3, #0
    2b48:	d001      	beq.n	2b4e <crc_sync_init+0x1a>
    2b4a:	2301      	movs	r3, #1
    2b4c:	e000      	b.n	2b50 <crc_sync_init+0x1c>
    2b4e:	2300      	movs	r3, #0
    2b50:	f003 0301 	and.w	r3, r3, #1
    2b54:	b2db      	uxtb	r3, r3
    2b56:	222b      	movs	r2, #43	; 0x2b
    2b58:	4906      	ldr	r1, [pc, #24]	; (2b74 <crc_sync_init+0x40>)
    2b5a:	4618      	mov	r0, r3
    2b5c:	4b06      	ldr	r3, [pc, #24]	; (2b78 <crc_sync_init+0x44>)
    2b5e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2b60:	687b      	ldr	r3, [r7, #4]
    2b62:	6839      	ldr	r1, [r7, #0]
    2b64:	4618      	mov	r0, r3
    2b66:	4b05      	ldr	r3, [pc, #20]	; (2b7c <crc_sync_init+0x48>)
    2b68:	4798      	blx	r3
    2b6a:	4603      	mov	r3, r0
}
    2b6c:	4618      	mov	r0, r3
    2b6e:	3708      	adds	r7, #8
    2b70:	46bd      	mov	sp, r7
    2b72:	bd80      	pop	{r7, pc}
    2b74:	000146cc 	.word	0x000146cc
    2b78:	00004211 	.word	0x00004211
    2b7c:	00004e71 	.word	0x00004e71

00002b80 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2b80:	b590      	push	{r4, r7, lr}
    2b82:	b083      	sub	sp, #12
    2b84:	af00      	add	r7, sp, #0
    2b86:	4603      	mov	r3, r0
    2b88:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2b8a:	4b07      	ldr	r3, [pc, #28]	; (2ba8 <delay_us+0x28>)
    2b8c:	681c      	ldr	r4, [r3, #0]
    2b8e:	88fb      	ldrh	r3, [r7, #6]
    2b90:	4618      	mov	r0, r3
    2b92:	4b06      	ldr	r3, [pc, #24]	; (2bac <delay_us+0x2c>)
    2b94:	4798      	blx	r3
    2b96:	4603      	mov	r3, r0
    2b98:	4619      	mov	r1, r3
    2b9a:	4620      	mov	r0, r4
    2b9c:	4b04      	ldr	r3, [pc, #16]	; (2bb0 <delay_us+0x30>)
    2b9e:	4798      	blx	r3
}
    2ba0:	bf00      	nop
    2ba2:	370c      	adds	r7, #12
    2ba4:	46bd      	mov	sp, r7
    2ba6:	bd90      	pop	{r4, r7, pc}
    2ba8:	20000d28 	.word	0x20000d28
    2bac:	00004bc1 	.word	0x00004bc1
    2bb0:	00004d59 	.word	0x00004d59

00002bb4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2bb4:	b590      	push	{r4, r7, lr}
    2bb6:	b083      	sub	sp, #12
    2bb8:	af00      	add	r7, sp, #0
    2bba:	4603      	mov	r3, r0
    2bbc:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2bbe:	4b07      	ldr	r3, [pc, #28]	; (2bdc <delay_ms+0x28>)
    2bc0:	681c      	ldr	r4, [r3, #0]
    2bc2:	88fb      	ldrh	r3, [r7, #6]
    2bc4:	4618      	mov	r0, r3
    2bc6:	4b06      	ldr	r3, [pc, #24]	; (2be0 <delay_ms+0x2c>)
    2bc8:	4798      	blx	r3
    2bca:	4603      	mov	r3, r0
    2bcc:	4619      	mov	r1, r3
    2bce:	4620      	mov	r0, r4
    2bd0:	4b04      	ldr	r3, [pc, #16]	; (2be4 <delay_ms+0x30>)
    2bd2:	4798      	blx	r3
}
    2bd4:	bf00      	nop
    2bd6:	370c      	adds	r7, #12
    2bd8:	46bd      	mov	sp, r7
    2bda:	bd90      	pop	{r4, r7, pc}
    2bdc:	20000d28 	.word	0x20000d28
    2be0:	00004d2d 	.word	0x00004d2d
    2be4:	00004d59 	.word	0x00004d59

00002be8 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2be8:	b580      	push	{r7, lr}
    2bea:	af00      	add	r7, sp, #0
	return _event_system_init();
    2bec:	4b02      	ldr	r3, [pc, #8]	; (2bf8 <event_system_init+0x10>)
    2bee:	4798      	blx	r3
    2bf0:	4603      	mov	r3, r0
}
    2bf2:	4618      	mov	r0, r3
    2bf4:	bd80      	pop	{r7, pc}
    2bf6:	bf00      	nop
    2bf8:	0000562d 	.word	0x0000562d

00002bfc <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2bfc:	b580      	push	{r7, lr}
    2bfe:	b082      	sub	sp, #8
    2c00:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2c02:	2300      	movs	r3, #0
    2c04:	80fb      	strh	r3, [r7, #6]
    2c06:	e00e      	b.n	2c26 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2c08:	88fb      	ldrh	r3, [r7, #6]
    2c0a:	4a0c      	ldr	r2, [pc, #48]	; (2c3c <ext_irq_init+0x40>)
    2c0c:	00db      	lsls	r3, r3, #3
    2c0e:	4413      	add	r3, r2
    2c10:	f04f 32ff 	mov.w	r2, #4294967295
    2c14:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2c16:	88fb      	ldrh	r3, [r7, #6]
    2c18:	4a08      	ldr	r2, [pc, #32]	; (2c3c <ext_irq_init+0x40>)
    2c1a:	2100      	movs	r1, #0
    2c1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2c20:	88fb      	ldrh	r3, [r7, #6]
    2c22:	3301      	adds	r3, #1
    2c24:	80fb      	strh	r3, [r7, #6]
    2c26:	88fb      	ldrh	r3, [r7, #6]
    2c28:	2b08      	cmp	r3, #8
    2c2a:	d9ed      	bls.n	2c08 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2c2c:	4804      	ldr	r0, [pc, #16]	; (2c40 <ext_irq_init+0x44>)
    2c2e:	4b05      	ldr	r3, [pc, #20]	; (2c44 <ext_irq_init+0x48>)
    2c30:	4798      	blx	r3
    2c32:	4603      	mov	r3, r0
}
    2c34:	4618      	mov	r0, r3
    2c36:	3708      	adds	r7, #8
    2c38:	46bd      	mov	sp, r7
    2c3a:	bd80      	pop	{r7, pc}
    2c3c:	20000d2c 	.word	0x20000d2c
    2c40:	00002da1 	.word	0x00002da1
    2c44:	000051b1 	.word	0x000051b1

00002c48 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2c48:	b580      	push	{r7, lr}
    2c4a:	b086      	sub	sp, #24
    2c4c:	af00      	add	r7, sp, #0
    2c4e:	6078      	str	r0, [r7, #4]
    2c50:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2c52:	2300      	movs	r3, #0
    2c54:	75fb      	strb	r3, [r7, #23]
    2c56:	2300      	movs	r3, #0
    2c58:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    2c5a:	2300      	movs	r3, #0
    2c5c:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    2c5e:	e012      	b.n	2c86 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2c60:	7dfb      	ldrb	r3, [r7, #23]
    2c62:	4a4d      	ldr	r2, [pc, #308]	; (2d98 <ext_irq_register+0x150>)
    2c64:	00db      	lsls	r3, r3, #3
    2c66:	4413      	add	r3, r2
    2c68:	685a      	ldr	r2, [r3, #4]
    2c6a:	687b      	ldr	r3, [r7, #4]
    2c6c:	429a      	cmp	r2, r3
    2c6e:	d107      	bne.n	2c80 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2c70:	7dfb      	ldrb	r3, [r7, #23]
    2c72:	4949      	ldr	r1, [pc, #292]	; (2d98 <ext_irq_register+0x150>)
    2c74:	683a      	ldr	r2, [r7, #0]
    2c76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    2c7a:	2301      	movs	r3, #1
    2c7c:	757b      	strb	r3, [r7, #21]
			break;
    2c7e:	e005      	b.n	2c8c <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2c80:	7dfb      	ldrb	r3, [r7, #23]
    2c82:	3301      	adds	r3, #1
    2c84:	75fb      	strb	r3, [r7, #23]
    2c86:	7dfb      	ldrb	r3, [r7, #23]
    2c88:	2b08      	cmp	r3, #8
    2c8a:	d9e9      	bls.n	2c60 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2c8c:	683b      	ldr	r3, [r7, #0]
    2c8e:	2b00      	cmp	r3, #0
    2c90:	d10e      	bne.n	2cb0 <ext_irq_register+0x68>
		if (!found) {
    2c92:	7d7b      	ldrb	r3, [r7, #21]
    2c94:	f083 0301 	eor.w	r3, r3, #1
    2c98:	b2db      	uxtb	r3, r3
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d002      	beq.n	2ca4 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    2c9e:	f06f 030c 	mvn.w	r3, #12
    2ca2:	e074      	b.n	2d8e <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2ca4:	2100      	movs	r1, #0
    2ca6:	6878      	ldr	r0, [r7, #4]
    2ca8:	4b3c      	ldr	r3, [pc, #240]	; (2d9c <ext_irq_register+0x154>)
    2caa:	4798      	blx	r3
    2cac:	4603      	mov	r3, r0
    2cae:	e06e      	b.n	2d8e <ext_irq_register+0x146>
	}

	if (!found) {
    2cb0:	7d7b      	ldrb	r3, [r7, #21]
    2cb2:	f083 0301 	eor.w	r3, r3, #1
    2cb6:	b2db      	uxtb	r3, r3
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d05a      	beq.n	2d72 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2cbc:	2300      	movs	r3, #0
    2cbe:	75fb      	strb	r3, [r7, #23]
    2cc0:	e016      	b.n	2cf0 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2cc2:	7dfb      	ldrb	r3, [r7, #23]
    2cc4:	4a34      	ldr	r2, [pc, #208]	; (2d98 <ext_irq_register+0x150>)
    2cc6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2cca:	2b00      	cmp	r3, #0
    2ccc:	d10d      	bne.n	2cea <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2cce:	7dfb      	ldrb	r3, [r7, #23]
    2cd0:	4931      	ldr	r1, [pc, #196]	; (2d98 <ext_irq_register+0x150>)
    2cd2:	683a      	ldr	r2, [r7, #0]
    2cd4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2cd8:	7dfb      	ldrb	r3, [r7, #23]
    2cda:	4a2f      	ldr	r2, [pc, #188]	; (2d98 <ext_irq_register+0x150>)
    2cdc:	00db      	lsls	r3, r3, #3
    2cde:	4413      	add	r3, r2
    2ce0:	687a      	ldr	r2, [r7, #4]
    2ce2:	605a      	str	r2, [r3, #4]
				found           = true;
    2ce4:	2301      	movs	r3, #1
    2ce6:	757b      	strb	r3, [r7, #21]
				break;
    2ce8:	e005      	b.n	2cf6 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2cea:	7dfb      	ldrb	r3, [r7, #23]
    2cec:	3301      	adds	r3, #1
    2cee:	75fb      	strb	r3, [r7, #23]
    2cf0:	7dfb      	ldrb	r3, [r7, #23]
    2cf2:	2b08      	cmp	r3, #8
    2cf4:	d9e5      	bls.n	2cc2 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2cf6:	e036      	b.n	2d66 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2cf8:	7dfb      	ldrb	r3, [r7, #23]
    2cfa:	4a27      	ldr	r2, [pc, #156]	; (2d98 <ext_irq_register+0x150>)
    2cfc:	00db      	lsls	r3, r3, #3
    2cfe:	4413      	add	r3, r2
    2d00:	685a      	ldr	r2, [r3, #4]
    2d02:	7dbb      	ldrb	r3, [r7, #22]
    2d04:	4924      	ldr	r1, [pc, #144]	; (2d98 <ext_irq_register+0x150>)
    2d06:	00db      	lsls	r3, r3, #3
    2d08:	440b      	add	r3, r1
    2d0a:	685b      	ldr	r3, [r3, #4]
    2d0c:	429a      	cmp	r2, r3
    2d0e:	d227      	bcs.n	2d60 <ext_irq_register+0x118>
    2d10:	7dbb      	ldrb	r3, [r7, #22]
    2d12:	4a21      	ldr	r2, [pc, #132]	; (2d98 <ext_irq_register+0x150>)
    2d14:	00db      	lsls	r3, r3, #3
    2d16:	4413      	add	r3, r2
    2d18:	685b      	ldr	r3, [r3, #4]
    2d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d1e:	d01f      	beq.n	2d60 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2d20:	7dbb      	ldrb	r3, [r7, #22]
    2d22:	491d      	ldr	r1, [pc, #116]	; (2d98 <ext_irq_register+0x150>)
    2d24:	f107 020c 	add.w	r2, r7, #12
    2d28:	00db      	lsls	r3, r3, #3
    2d2a:	440b      	add	r3, r1
    2d2c:	e893 0003 	ldmia.w	r3, {r0, r1}
    2d30:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2d34:	7dbb      	ldrb	r3, [r7, #22]
    2d36:	7dfa      	ldrb	r2, [r7, #23]
    2d38:	4817      	ldr	r0, [pc, #92]	; (2d98 <ext_irq_register+0x150>)
    2d3a:	4917      	ldr	r1, [pc, #92]	; (2d98 <ext_irq_register+0x150>)
    2d3c:	00db      	lsls	r3, r3, #3
    2d3e:	4403      	add	r3, r0
    2d40:	00d2      	lsls	r2, r2, #3
    2d42:	440a      	add	r2, r1
    2d44:	e892 0003 	ldmia.w	r2, {r0, r1}
    2d48:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2d4c:	7dfb      	ldrb	r3, [r7, #23]
    2d4e:	4a12      	ldr	r2, [pc, #72]	; (2d98 <ext_irq_register+0x150>)
    2d50:	00db      	lsls	r3, r3, #3
    2d52:	4413      	add	r3, r2
    2d54:	f107 020c 	add.w	r2, r7, #12
    2d58:	e892 0003 	ldmia.w	r2, {r0, r1}
    2d5c:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2d60:	7dbb      	ldrb	r3, [r7, #22]
    2d62:	3301      	adds	r3, #1
    2d64:	75bb      	strb	r3, [r7, #22]
    2d66:	7dbb      	ldrb	r3, [r7, #22]
    2d68:	2b08      	cmp	r3, #8
    2d6a:	d802      	bhi.n	2d72 <ext_irq_register+0x12a>
    2d6c:	7dfb      	ldrb	r3, [r7, #23]
    2d6e:	2b08      	cmp	r3, #8
    2d70:	d9c2      	bls.n	2cf8 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    2d72:	7d7b      	ldrb	r3, [r7, #21]
    2d74:	f083 0301 	eor.w	r3, r3, #1
    2d78:	b2db      	uxtb	r3, r3
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d002      	beq.n	2d84 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    2d7e:	f06f 030c 	mvn.w	r3, #12
    2d82:	e004      	b.n	2d8e <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2d84:	2101      	movs	r1, #1
    2d86:	6878      	ldr	r0, [r7, #4]
    2d88:	4b04      	ldr	r3, [pc, #16]	; (2d9c <ext_irq_register+0x154>)
    2d8a:	4798      	blx	r3
    2d8c:	4603      	mov	r3, r0
}
    2d8e:	4618      	mov	r0, r3
    2d90:	3718      	adds	r7, #24
    2d92:	46bd      	mov	sp, r7
    2d94:	bd80      	pop	{r7, pc}
    2d96:	bf00      	nop
    2d98:	20000d2c 	.word	0x20000d2c
    2d9c:	00005345 	.word	0x00005345

00002da0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2da0:	b580      	push	{r7, lr}
    2da2:	b084      	sub	sp, #16
    2da4:	af00      	add	r7, sp, #0
    2da6:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2da8:	2300      	movs	r3, #0
    2daa:	73fb      	strb	r3, [r7, #15]
    2dac:	2309      	movs	r3, #9
    2dae:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2db0:	e02a      	b.n	2e08 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2db2:	7bba      	ldrb	r2, [r7, #14]
    2db4:	7bfb      	ldrb	r3, [r7, #15]
    2db6:	4413      	add	r3, r2
    2db8:	105b      	asrs	r3, r3, #1
    2dba:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2dbc:	7b7b      	ldrb	r3, [r7, #13]
    2dbe:	2b08      	cmp	r3, #8
    2dc0:	d827      	bhi.n	2e12 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2dc2:	7b7b      	ldrb	r3, [r7, #13]
    2dc4:	4a16      	ldr	r2, [pc, #88]	; (2e20 <process_ext_irq+0x80>)
    2dc6:	00db      	lsls	r3, r3, #3
    2dc8:	4413      	add	r3, r2
    2dca:	685a      	ldr	r2, [r3, #4]
    2dcc:	687b      	ldr	r3, [r7, #4]
    2dce:	429a      	cmp	r2, r3
    2dd0:	d10b      	bne.n	2dea <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2dd2:	7b7b      	ldrb	r3, [r7, #13]
    2dd4:	4a12      	ldr	r2, [pc, #72]	; (2e20 <process_ext_irq+0x80>)
    2dd6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d01b      	beq.n	2e16 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    2dde:	7b7b      	ldrb	r3, [r7, #13]
    2de0:	4a0f      	ldr	r2, [pc, #60]	; (2e20 <process_ext_irq+0x80>)
    2de2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2de6:	4798      	blx	r3
			}
			return;
    2de8:	e015      	b.n	2e16 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2dea:	7b7b      	ldrb	r3, [r7, #13]
    2dec:	4a0c      	ldr	r2, [pc, #48]	; (2e20 <process_ext_irq+0x80>)
    2dee:	00db      	lsls	r3, r3, #3
    2df0:	4413      	add	r3, r2
    2df2:	685a      	ldr	r2, [r3, #4]
    2df4:	687b      	ldr	r3, [r7, #4]
    2df6:	429a      	cmp	r2, r3
    2df8:	d203      	bcs.n	2e02 <process_ext_irq+0x62>
			lower = middle + 1;
    2dfa:	7b7b      	ldrb	r3, [r7, #13]
    2dfc:	3301      	adds	r3, #1
    2dfe:	73fb      	strb	r3, [r7, #15]
    2e00:	e002      	b.n	2e08 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    2e02:	7b7b      	ldrb	r3, [r7, #13]
    2e04:	3b01      	subs	r3, #1
    2e06:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2e08:	7bba      	ldrb	r2, [r7, #14]
    2e0a:	7bfb      	ldrb	r3, [r7, #15]
    2e0c:	429a      	cmp	r2, r3
    2e0e:	d2d0      	bcs.n	2db2 <process_ext_irq+0x12>
    2e10:	e002      	b.n	2e18 <process_ext_irq+0x78>
			return;
    2e12:	bf00      	nop
    2e14:	e000      	b.n	2e18 <process_ext_irq+0x78>
			return;
    2e16:	bf00      	nop
		}
	}
}
    2e18:	3710      	adds	r7, #16
    2e1a:	46bd      	mov	sp, r7
    2e1c:	bd80      	pop	{r7, pc}
    2e1e:	bf00      	nop
    2e20:	20000d2c 	.word	0x20000d2c

00002e24 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2e24:	b580      	push	{r7, lr}
    2e26:	b08a      	sub	sp, #40	; 0x28
    2e28:	af00      	add	r7, sp, #0
    2e2a:	60f8      	str	r0, [r7, #12]
    2e2c:	60b9      	str	r1, [r7, #8]
    2e2e:	4613      	mov	r3, r2
    2e30:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2e32:	68fb      	ldr	r3, [r7, #12]
    2e34:	3b14      	subs	r3, #20
    2e36:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e3a:	8b9b      	ldrh	r3, [r3, #28]
    2e3c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2e3e:	88fb      	ldrh	r3, [r7, #6]
    2e40:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2e42:	f248 0301 	movw	r3, #32769	; 0x8001
    2e46:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2e48:	68bb      	ldr	r3, [r7, #8]
    2e4a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e4e:	f107 0214 	add.w	r2, r7, #20
    2e52:	4611      	mov	r1, r2
    2e54:	4618      	mov	r0, r3
    2e56:	4b06      	ldr	r3, [pc, #24]	; (2e70 <i2c_m_sync_read+0x4c>)
    2e58:	4798      	blx	r3
    2e5a:	6238      	str	r0, [r7, #32]

	if (ret) {
    2e5c:	6a3b      	ldr	r3, [r7, #32]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d001      	beq.n	2e66 <i2c_m_sync_read+0x42>
		return ret;
    2e62:	6a3b      	ldr	r3, [r7, #32]
    2e64:	e000      	b.n	2e68 <i2c_m_sync_read+0x44>
	}

	return n;
    2e66:	88fb      	ldrh	r3, [r7, #6]
}
    2e68:	4618      	mov	r0, r3
    2e6a:	3728      	adds	r7, #40	; 0x28
    2e6c:	46bd      	mov	sp, r7
    2e6e:	bd80      	pop	{r7, pc}
    2e70:	000072b5 	.word	0x000072b5

00002e74 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2e74:	b580      	push	{r7, lr}
    2e76:	b08a      	sub	sp, #40	; 0x28
    2e78:	af00      	add	r7, sp, #0
    2e7a:	60f8      	str	r0, [r7, #12]
    2e7c:	60b9      	str	r1, [r7, #8]
    2e7e:	4613      	mov	r3, r2
    2e80:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2e82:	68fb      	ldr	r3, [r7, #12]
    2e84:	3b14      	subs	r3, #20
    2e86:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e8a:	8b9b      	ldrh	r3, [r3, #28]
    2e8c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2e8e:	88fb      	ldrh	r3, [r7, #6]
    2e90:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2e96:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2e98:	68bb      	ldr	r3, [r7, #8]
    2e9a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e9e:	f107 0214 	add.w	r2, r7, #20
    2ea2:	4611      	mov	r1, r2
    2ea4:	4618      	mov	r0, r3
    2ea6:	4b06      	ldr	r3, [pc, #24]	; (2ec0 <i2c_m_sync_write+0x4c>)
    2ea8:	4798      	blx	r3
    2eaa:	6238      	str	r0, [r7, #32]

	if (ret) {
    2eac:	6a3b      	ldr	r3, [r7, #32]
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d001      	beq.n	2eb6 <i2c_m_sync_write+0x42>
		return ret;
    2eb2:	6a3b      	ldr	r3, [r7, #32]
    2eb4:	e000      	b.n	2eb8 <i2c_m_sync_write+0x44>
	}

	return n;
    2eb6:	88fb      	ldrh	r3, [r7, #6]
}
    2eb8:	4618      	mov	r0, r3
    2eba:	3728      	adds	r7, #40	; 0x28
    2ebc:	46bd      	mov	sp, r7
    2ebe:	bd80      	pop	{r7, pc}
    2ec0:	000072b5 	.word	0x000072b5

00002ec4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2ec4:	b580      	push	{r7, lr}
    2ec6:	b084      	sub	sp, #16
    2ec8:	af00      	add	r7, sp, #0
    2eca:	6078      	str	r0, [r7, #4]
    2ecc:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2ece:	687b      	ldr	r3, [r7, #4]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	bf14      	ite	ne
    2ed4:	2301      	movne	r3, #1
    2ed6:	2300      	moveq	r3, #0
    2ed8:	b2db      	uxtb	r3, r3
    2eda:	225e      	movs	r2, #94	; 0x5e
    2edc:	490c      	ldr	r1, [pc, #48]	; (2f10 <i2c_m_sync_init+0x4c>)
    2ede:	4618      	mov	r0, r3
    2ee0:	4b0c      	ldr	r3, [pc, #48]	; (2f14 <i2c_m_sync_init+0x50>)
    2ee2:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2ee4:	687b      	ldr	r3, [r7, #4]
    2ee6:	6839      	ldr	r1, [r7, #0]
    2ee8:	4618      	mov	r0, r3
    2eea:	4b0b      	ldr	r3, [pc, #44]	; (2f18 <i2c_m_sync_init+0x54>)
    2eec:	4798      	blx	r3
    2eee:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2ef0:	68fb      	ldr	r3, [r7, #12]
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d001      	beq.n	2efa <i2c_m_sync_init+0x36>
		return init_status;
    2ef6:	68fb      	ldr	r3, [r7, #12]
    2ef8:	e006      	b.n	2f08 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2efa:	687b      	ldr	r3, [r7, #4]
    2efc:	4a07      	ldr	r2, [pc, #28]	; (2f1c <i2c_m_sync_init+0x58>)
    2efe:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2f00:	687b      	ldr	r3, [r7, #4]
    2f02:	4a07      	ldr	r2, [pc, #28]	; (2f20 <i2c_m_sync_init+0x5c>)
    2f04:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2f06:	2300      	movs	r3, #0
}
    2f08:	4618      	mov	r0, r3
    2f0a:	3710      	adds	r7, #16
    2f0c:	46bd      	mov	sp, r7
    2f0e:	bd80      	pop	{r7, pc}
    2f10:	000146e8 	.word	0x000146e8
    2f14:	00004211 	.word	0x00004211
    2f18:	00007055 	.word	0x00007055
    2f1c:	00002e25 	.word	0x00002e25
    2f20:	00002e75 	.word	0x00002e75

00002f24 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2f24:	b580      	push	{r7, lr}
    2f26:	b082      	sub	sp, #8
    2f28:	af00      	add	r7, sp, #0
    2f2a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2f2c:	687b      	ldr	r3, [r7, #4]
    2f2e:	4618      	mov	r0, r3
    2f30:	4b03      	ldr	r3, [pc, #12]	; (2f40 <i2c_m_sync_enable+0x1c>)
    2f32:	4798      	blx	r3
    2f34:	4603      	mov	r3, r0
}
    2f36:	4618      	mov	r0, r3
    2f38:	3708      	adds	r7, #8
    2f3a:	46bd      	mov	sp, r7
    2f3c:	bd80      	pop	{r7, pc}
    2f3e:	bf00      	nop
    2f40:	0000709d 	.word	0x0000709d

00002f44 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    2f44:	b580      	push	{r7, lr}
    2f46:	b082      	sub	sp, #8
    2f48:	af00      	add	r7, sp, #0
    2f4a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    2f4c:	687b      	ldr	r3, [r7, #4]
    2f4e:	4618      	mov	r0, r3
    2f50:	4b03      	ldr	r3, [pc, #12]	; (2f60 <i2c_m_sync_disable+0x1c>)
    2f52:	4798      	blx	r3
    2f54:	4603      	mov	r3, r0
}
    2f56:	4618      	mov	r0, r3
    2f58:	3708      	adds	r7, #8
    2f5a:	46bd      	mov	sp, r7
    2f5c:	bd80      	pop	{r7, pc}
    2f5e:	bf00      	nop
    2f60:	000070dd 	.word	0x000070dd

00002f64 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2f64:	b480      	push	{r7}
    2f66:	b085      	sub	sp, #20
    2f68:	af00      	add	r7, sp, #0
    2f6a:	60f8      	str	r0, [r7, #12]
    2f6c:	460b      	mov	r3, r1
    2f6e:	607a      	str	r2, [r7, #4]
    2f70:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2f72:	897b      	ldrh	r3, [r7, #10]
    2f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2f78:	b21a      	sxth	r2, r3
    2f7a:	687b      	ldr	r3, [r7, #4]
    2f7c:	b21b      	sxth	r3, r3
    2f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2f82:	b21b      	sxth	r3, r3
    2f84:	4313      	orrs	r3, r2
    2f86:	b21b      	sxth	r3, r3
    2f88:	b29a      	uxth	r2, r3
    2f8a:	68fb      	ldr	r3, [r7, #12]
    2f8c:	839a      	strh	r2, [r3, #28]
    2f8e:	68fb      	ldr	r3, [r7, #12]
    2f90:	8b9b      	ldrh	r3, [r3, #28]
}
    2f92:	4618      	mov	r0, r3
    2f94:	3714      	adds	r7, #20
    2f96:	46bd      	mov	sp, r7
    2f98:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f9c:	4770      	bx	lr

00002f9e <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2f9e:	b480      	push	{r7}
    2fa0:	b083      	sub	sp, #12
    2fa2:	af00      	add	r7, sp, #0
    2fa4:	6078      	str	r0, [r7, #4]
    2fa6:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	f103 0214 	add.w	r2, r3, #20
    2fae:	683b      	ldr	r3, [r7, #0]
    2fb0:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2fb2:	2300      	movs	r3, #0
}
    2fb4:	4618      	mov	r0, r3
    2fb6:	370c      	adds	r7, #12
    2fb8:	46bd      	mov	sp, r7
    2fba:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fbe:	4770      	bx	lr

00002fc0 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2fc0:	b580      	push	{r7, lr}
    2fc2:	b084      	sub	sp, #16
    2fc4:	af00      	add	r7, sp, #0
    2fc6:	60f8      	str	r0, [r7, #12]
    2fc8:	60b9      	str	r1, [r7, #8]
    2fca:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2fcc:	68fb      	ldr	r3, [r7, #12]
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d004      	beq.n	2fdc <pwm_init+0x1c>
    2fd2:	68bb      	ldr	r3, [r7, #8]
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	d001      	beq.n	2fdc <pwm_init+0x1c>
    2fd8:	2301      	movs	r3, #1
    2fda:	e000      	b.n	2fde <pwm_init+0x1e>
    2fdc:	2300      	movs	r3, #0
    2fde:	f003 0301 	and.w	r3, r3, #1
    2fe2:	b2db      	uxtb	r3, r3
    2fe4:	2233      	movs	r2, #51	; 0x33
    2fe6:	490a      	ldr	r1, [pc, #40]	; (3010 <pwm_init+0x50>)
    2fe8:	4618      	mov	r0, r3
    2fea:	4b0a      	ldr	r3, [pc, #40]	; (3014 <pwm_init+0x54>)
    2fec:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2fee:	68fb      	ldr	r3, [r7, #12]
    2ff0:	68b9      	ldr	r1, [r7, #8]
    2ff2:	4618      	mov	r0, r3
    2ff4:	4b08      	ldr	r3, [pc, #32]	; (3018 <pwm_init+0x58>)
    2ff6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2ff8:	68fb      	ldr	r3, [r7, #12]
    2ffa:	4a08      	ldr	r2, [pc, #32]	; (301c <pwm_init+0x5c>)
    2ffc:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2ffe:	68fb      	ldr	r3, [r7, #12]
    3000:	4a07      	ldr	r2, [pc, #28]	; (3020 <pwm_init+0x60>)
    3002:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    3004:	2300      	movs	r3, #0
}
    3006:	4618      	mov	r0, r3
    3008:	3710      	adds	r7, #16
    300a:	46bd      	mov	sp, r7
    300c:	bd80      	pop	{r7, pc}
    300e:	bf00      	nop
    3010:	00014704 	.word	0x00014704
    3014:	00004211 	.word	0x00004211
    3018:	0000897d 	.word	0x0000897d
    301c:	00003025 	.word	0x00003025
    3020:	00003049 	.word	0x00003049

00003024 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    3024:	b580      	push	{r7, lr}
    3026:	b084      	sub	sp, #16
    3028:	af00      	add	r7, sp, #0
    302a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    3030:	68fb      	ldr	r3, [r7, #12]
    3032:	695b      	ldr	r3, [r3, #20]
    3034:	2b00      	cmp	r3, #0
    3036:	d003      	beq.n	3040 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    3038:	68fb      	ldr	r3, [r7, #12]
    303a:	695b      	ldr	r3, [r3, #20]
    303c:	68f8      	ldr	r0, [r7, #12]
    303e:	4798      	blx	r3
	}
}
    3040:	bf00      	nop
    3042:	3710      	adds	r7, #16
    3044:	46bd      	mov	sp, r7
    3046:	bd80      	pop	{r7, pc}

00003048 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    3048:	b580      	push	{r7, lr}
    304a:	b084      	sub	sp, #16
    304c:	af00      	add	r7, sp, #0
    304e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    3054:	68fb      	ldr	r3, [r7, #12]
    3056:	699b      	ldr	r3, [r3, #24]
    3058:	2b00      	cmp	r3, #0
    305a:	d003      	beq.n	3064 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    305c:	68fb      	ldr	r3, [r7, #12]
    305e:	699b      	ldr	r3, [r3, #24]
    3060:	68f8      	ldr	r0, [r7, #12]
    3062:	4798      	blx	r3
	}
}
    3064:	bf00      	nop
    3066:	3710      	adds	r7, #16
    3068:	46bd      	mov	sp, r7
    306a:	bd80      	pop	{r7, pc}

0000306c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    306c:	b580      	push	{r7, lr}
    306e:	b082      	sub	sp, #8
    3070:	af00      	add	r7, sp, #0
    3072:	6078      	str	r0, [r7, #4]
    3074:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    3076:	687b      	ldr	r3, [r7, #4]
    3078:	2b00      	cmp	r3, #0
    307a:	d004      	beq.n	3086 <qspi_sync_init+0x1a>
    307c:	683b      	ldr	r3, [r7, #0]
    307e:	2b00      	cmp	r3, #0
    3080:	d001      	beq.n	3086 <qspi_sync_init+0x1a>
    3082:	2301      	movs	r3, #1
    3084:	e000      	b.n	3088 <qspi_sync_init+0x1c>
    3086:	2300      	movs	r3, #0
    3088:	f003 0301 	and.w	r3, r3, #1
    308c:	b2db      	uxtb	r3, r3
    308e:	2231      	movs	r2, #49	; 0x31
    3090:	4906      	ldr	r1, [pc, #24]	; (30ac <qspi_sync_init+0x40>)
    3092:	4618      	mov	r0, r3
    3094:	4b06      	ldr	r3, [pc, #24]	; (30b0 <qspi_sync_init+0x44>)
    3096:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	6839      	ldr	r1, [r7, #0]
    309c:	4618      	mov	r0, r3
    309e:	4b05      	ldr	r3, [pc, #20]	; (30b4 <qspi_sync_init+0x48>)
    30a0:	4798      	blx	r3
    30a2:	4603      	mov	r3, r0
}
    30a4:	4618      	mov	r0, r3
    30a6:	3708      	adds	r7, #8
    30a8:	46bd      	mov	sp, r7
    30aa:	bd80      	pop	{r7, pc}
    30ac:	0001471c 	.word	0x0001471c
    30b0:	00004211 	.word	0x00004211
    30b4:	0000620d 	.word	0x0000620d

000030b8 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    30b8:	b580      	push	{r7, lr}
    30ba:	b082      	sub	sp, #8
    30bc:	af00      	add	r7, sp, #0
    30be:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    30c0:	687b      	ldr	r3, [r7, #4]
    30c2:	2b00      	cmp	r3, #0
    30c4:	bf14      	ite	ne
    30c6:	2301      	movne	r3, #1
    30c8:	2300      	moveq	r3, #0
    30ca:	b2db      	uxtb	r3, r3
    30cc:	223f      	movs	r2, #63	; 0x3f
    30ce:	4906      	ldr	r1, [pc, #24]	; (30e8 <qspi_sync_enable+0x30>)
    30d0:	4618      	mov	r0, r3
    30d2:	4b06      	ldr	r3, [pc, #24]	; (30ec <qspi_sync_enable+0x34>)
    30d4:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    30d6:	687b      	ldr	r3, [r7, #4]
    30d8:	4618      	mov	r0, r3
    30da:	4b05      	ldr	r3, [pc, #20]	; (30f0 <qspi_sync_enable+0x38>)
    30dc:	4798      	blx	r3
    30de:	4603      	mov	r3, r0
}
    30e0:	4618      	mov	r0, r3
    30e2:	3708      	adds	r7, #8
    30e4:	46bd      	mov	sp, r7
    30e6:	bd80      	pop	{r7, pc}
    30e8:	0001471c 	.word	0x0001471c
    30ec:	00004211 	.word	0x00004211
    30f0:	00006281 	.word	0x00006281

000030f4 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    30f4:	b580      	push	{r7, lr}
    30f6:	b082      	sub	sp, #8
    30f8:	af00      	add	r7, sp, #0
    30fa:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	2b00      	cmp	r3, #0
    3100:	bf14      	ite	ne
    3102:	2301      	movne	r3, #1
    3104:	2300      	moveq	r3, #0
    3106:	b2db      	uxtb	r3, r3
    3108:	2246      	movs	r2, #70	; 0x46
    310a:	4906      	ldr	r1, [pc, #24]	; (3124 <qspi_sync_disable+0x30>)
    310c:	4618      	mov	r0, r3
    310e:	4b06      	ldr	r3, [pc, #24]	; (3128 <qspi_sync_disable+0x34>)
    3110:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	4618      	mov	r0, r3
    3116:	4b05      	ldr	r3, [pc, #20]	; (312c <qspi_sync_disable+0x38>)
    3118:	4798      	blx	r3
    311a:	4603      	mov	r3, r0
}
    311c:	4618      	mov	r0, r3
    311e:	3708      	adds	r7, #8
    3120:	46bd      	mov	sp, r7
    3122:	bd80      	pop	{r7, pc}
    3124:	0001471c 	.word	0x0001471c
    3128:	00004211 	.word	0x00004211
    312c:	000062a5 	.word	0x000062a5

00003130 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    3130:	b580      	push	{r7, lr}
    3132:	b082      	sub	sp, #8
    3134:	af00      	add	r7, sp, #0
    3136:	6078      	str	r0, [r7, #4]
    3138:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	2b00      	cmp	r3, #0
    313e:	d004      	beq.n	314a <qspi_sync_serial_run_command+0x1a>
    3140:	683b      	ldr	r3, [r7, #0]
    3142:	2b00      	cmp	r3, #0
    3144:	d001      	beq.n	314a <qspi_sync_serial_run_command+0x1a>
    3146:	2301      	movs	r3, #1
    3148:	e000      	b.n	314c <qspi_sync_serial_run_command+0x1c>
    314a:	2300      	movs	r3, #0
    314c:	f003 0301 	and.w	r3, r3, #1
    3150:	b2db      	uxtb	r3, r3
    3152:	224d      	movs	r2, #77	; 0x4d
    3154:	4906      	ldr	r1, [pc, #24]	; (3170 <qspi_sync_serial_run_command+0x40>)
    3156:	4618      	mov	r0, r3
    3158:	4b06      	ldr	r3, [pc, #24]	; (3174 <qspi_sync_serial_run_command+0x44>)
    315a:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    315c:	687b      	ldr	r3, [r7, #4]
    315e:	6839      	ldr	r1, [r7, #0]
    3160:	4618      	mov	r0, r3
    3162:	4b05      	ldr	r3, [pc, #20]	; (3178 <qspi_sync_serial_run_command+0x48>)
    3164:	4798      	blx	r3
    3166:	4603      	mov	r3, r0
}
    3168:	4618      	mov	r0, r3
    316a:	3708      	adds	r7, #8
    316c:	46bd      	mov	sp, r7
    316e:	bd80      	pop	{r7, pc}
    3170:	0001471c 	.word	0x0001471c
    3174:	00004211 	.word	0x00004211
    3178:	000063f1 	.word	0x000063f1

0000317c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    317c:	b580      	push	{r7, lr}
    317e:	b084      	sub	sp, #16
    3180:	af00      	add	r7, sp, #0
    3182:	6078      	str	r0, [r7, #4]
    3184:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    3186:	2300      	movs	r3, #0
    3188:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	2b00      	cmp	r3, #0
    318e:	d004      	beq.n	319a <spi_m_sync_init+0x1e>
    3190:	683b      	ldr	r3, [r7, #0]
    3192:	2b00      	cmp	r3, #0
    3194:	d001      	beq.n	319a <spi_m_sync_init+0x1e>
    3196:	2301      	movs	r3, #1
    3198:	e000      	b.n	319c <spi_m_sync_init+0x20>
    319a:	2300      	movs	r3, #0
    319c:	f003 0301 	and.w	r3, r3, #1
    31a0:	b2db      	uxtb	r3, r3
    31a2:	2240      	movs	r2, #64	; 0x40
    31a4:	4910      	ldr	r1, [pc, #64]	; (31e8 <spi_m_sync_init+0x6c>)
    31a6:	4618      	mov	r0, r3
    31a8:	4b10      	ldr	r3, [pc, #64]	; (31ec <spi_m_sync_init+0x70>)
    31aa:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    31ac:	687b      	ldr	r3, [r7, #4]
    31ae:	683a      	ldr	r2, [r7, #0]
    31b0:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	3304      	adds	r3, #4
    31b6:	6839      	ldr	r1, [r7, #0]
    31b8:	4618      	mov	r0, r3
    31ba:	4b0d      	ldr	r3, [pc, #52]	; (31f0 <spi_m_sync_init+0x74>)
    31bc:	4798      	blx	r3
    31be:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    31c0:	68fb      	ldr	r3, [r7, #12]
    31c2:	2b00      	cmp	r3, #0
    31c4:	da01      	bge.n	31ca <spi_m_sync_init+0x4e>
		return rc;
    31c6:	68fb      	ldr	r3, [r7, #12]
    31c8:	e00a      	b.n	31e0 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    31ca:	687b      	ldr	r3, [r7, #4]
    31cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    31d0:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    31d2:	687b      	ldr	r3, [r7, #4]
    31d4:	4a07      	ldr	r2, [pc, #28]	; (31f4 <spi_m_sync_init+0x78>)
    31d6:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    31d8:	687b      	ldr	r3, [r7, #4]
    31da:	4a07      	ldr	r2, [pc, #28]	; (31f8 <spi_m_sync_init+0x7c>)
    31dc:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    31de:	2300      	movs	r3, #0
}
    31e0:	4618      	mov	r0, r3
    31e2:	3710      	adds	r7, #16
    31e4:	46bd      	mov	sp, r7
    31e6:	bd80      	pop	{r7, pc}
    31e8:	00014738 	.word	0x00014738
    31ec:	00004211 	.word	0x00004211
    31f0:	000077b1 	.word	0x000077b1
    31f4:	00003275 	.word	0x00003275
    31f8:	000032cd 	.word	0x000032cd

000031fc <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    31fc:	b580      	push	{r7, lr}
    31fe:	b082      	sub	sp, #8
    3200:	af00      	add	r7, sp, #0
    3202:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	2b00      	cmp	r3, #0
    3208:	bf14      	ite	ne
    320a:	2301      	movne	r3, #1
    320c:	2300      	moveq	r3, #0
    320e:	b2db      	uxtb	r3, r3
    3210:	2257      	movs	r2, #87	; 0x57
    3212:	4906      	ldr	r1, [pc, #24]	; (322c <spi_m_sync_enable+0x30>)
    3214:	4618      	mov	r0, r3
    3216:	4b06      	ldr	r3, [pc, #24]	; (3230 <spi_m_sync_enable+0x34>)
    3218:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    321a:	687b      	ldr	r3, [r7, #4]
    321c:	3304      	adds	r3, #4
    321e:	4618      	mov	r0, r3
    3220:	4b04      	ldr	r3, [pc, #16]	; (3234 <spi_m_sync_enable+0x38>)
    3222:	4798      	blx	r3
}
    3224:	bf00      	nop
    3226:	3708      	adds	r7, #8
    3228:	46bd      	mov	sp, r7
    322a:	bd80      	pop	{r7, pc}
    322c:	00014738 	.word	0x00014738
    3230:	00004211 	.word	0x00004211
    3234:	000078bd 	.word	0x000078bd

00003238 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    3238:	b580      	push	{r7, lr}
    323a:	b082      	sub	sp, #8
    323c:	af00      	add	r7, sp, #0
    323e:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	2b00      	cmp	r3, #0
    3244:	bf14      	ite	ne
    3246:	2301      	movne	r3, #1
    3248:	2300      	moveq	r3, #0
    324a:	b2db      	uxtb	r3, r3
    324c:	225d      	movs	r2, #93	; 0x5d
    324e:	4906      	ldr	r1, [pc, #24]	; (3268 <spi_m_sync_disable+0x30>)
    3250:	4618      	mov	r0, r3
    3252:	4b06      	ldr	r3, [pc, #24]	; (326c <spi_m_sync_disable+0x34>)
    3254:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    3256:	687b      	ldr	r3, [r7, #4]
    3258:	3304      	adds	r3, #4
    325a:	4618      	mov	r0, r3
    325c:	4b04      	ldr	r3, [pc, #16]	; (3270 <spi_m_sync_disable+0x38>)
    325e:	4798      	blx	r3
}
    3260:	bf00      	nop
    3262:	3708      	adds	r7, #8
    3264:	46bd      	mov	sp, r7
    3266:	bd80      	pop	{r7, pc}
    3268:	00014738 	.word	0x00014738
    326c:	00004211 	.word	0x00004211
    3270:	0000790d 	.word	0x0000790d

00003274 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    3274:	b580      	push	{r7, lr}
    3276:	b088      	sub	sp, #32
    3278:	af00      	add	r7, sp, #0
    327a:	60f8      	str	r0, [r7, #12]
    327c:	60b9      	str	r1, [r7, #8]
    327e:	4613      	mov	r3, r2
    3280:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3282:	68fb      	ldr	r3, [r7, #12]
    3284:	2b00      	cmp	r3, #0
    3286:	bf14      	ite	ne
    3288:	2301      	movne	r3, #1
    328a:	2300      	moveq	r3, #0
    328c:	b2db      	uxtb	r3, r3
    328e:	2287      	movs	r2, #135	; 0x87
    3290:	490b      	ldr	r1, [pc, #44]	; (32c0 <_spi_m_sync_io_read+0x4c>)
    3292:	4618      	mov	r0, r3
    3294:	4b0b      	ldr	r3, [pc, #44]	; (32c4 <_spi_m_sync_io_read+0x50>)
    3296:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3298:	68fb      	ldr	r3, [r7, #12]
    329a:	3b0c      	subs	r3, #12
    329c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    329e:	68bb      	ldr	r3, [r7, #8]
    32a0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    32a2:	2300      	movs	r3, #0
    32a4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    32a6:	88fb      	ldrh	r3, [r7, #6]
    32a8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    32aa:	f107 0310 	add.w	r3, r7, #16
    32ae:	4619      	mov	r1, r3
    32b0:	69f8      	ldr	r0, [r7, #28]
    32b2:	4b05      	ldr	r3, [pc, #20]	; (32c8 <_spi_m_sync_io_read+0x54>)
    32b4:	4798      	blx	r3
    32b6:	4603      	mov	r3, r0
}
    32b8:	4618      	mov	r0, r3
    32ba:	3720      	adds	r7, #32
    32bc:	46bd      	mov	sp, r7
    32be:	bd80      	pop	{r7, pc}
    32c0:	00014738 	.word	0x00014738
    32c4:	00004211 	.word	0x00004211
    32c8:	00003325 	.word	0x00003325

000032cc <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    32cc:	b580      	push	{r7, lr}
    32ce:	b088      	sub	sp, #32
    32d0:	af00      	add	r7, sp, #0
    32d2:	60f8      	str	r0, [r7, #12]
    32d4:	60b9      	str	r1, [r7, #8]
    32d6:	4613      	mov	r3, r2
    32d8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    32da:	68fb      	ldr	r3, [r7, #12]
    32dc:	2b00      	cmp	r3, #0
    32de:	bf14      	ite	ne
    32e0:	2301      	movne	r3, #1
    32e2:	2300      	moveq	r3, #0
    32e4:	b2db      	uxtb	r3, r3
    32e6:	22a3      	movs	r2, #163	; 0xa3
    32e8:	490b      	ldr	r1, [pc, #44]	; (3318 <_spi_m_sync_io_write+0x4c>)
    32ea:	4618      	mov	r0, r3
    32ec:	4b0b      	ldr	r3, [pc, #44]	; (331c <_spi_m_sync_io_write+0x50>)
    32ee:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    32f0:	68fb      	ldr	r3, [r7, #12]
    32f2:	3b0c      	subs	r3, #12
    32f4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    32f6:	2300      	movs	r3, #0
    32f8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    32fa:	68bb      	ldr	r3, [r7, #8]
    32fc:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    32fe:	88fb      	ldrh	r3, [r7, #6]
    3300:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3302:	f107 0310 	add.w	r3, r7, #16
    3306:	4619      	mov	r1, r3
    3308:	69f8      	ldr	r0, [r7, #28]
    330a:	4b05      	ldr	r3, [pc, #20]	; (3320 <_spi_m_sync_io_write+0x54>)
    330c:	4798      	blx	r3
    330e:	4603      	mov	r3, r0
}
    3310:	4618      	mov	r0, r3
    3312:	3720      	adds	r7, #32
    3314:	46bd      	mov	sp, r7
    3316:	bd80      	pop	{r7, pc}
    3318:	00014738 	.word	0x00014738
    331c:	00004211 	.word	0x00004211
    3320:	00003325 	.word	0x00003325

00003324 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    3324:	b580      	push	{r7, lr}
    3326:	b086      	sub	sp, #24
    3328:	af00      	add	r7, sp, #0
    332a:	6078      	str	r0, [r7, #4]
    332c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	2b00      	cmp	r3, #0
    3332:	d004      	beq.n	333e <spi_m_sync_transfer+0x1a>
    3334:	683b      	ldr	r3, [r7, #0]
    3336:	2b00      	cmp	r3, #0
    3338:	d001      	beq.n	333e <spi_m_sync_transfer+0x1a>
    333a:	2301      	movs	r3, #1
    333c:	e000      	b.n	3340 <spi_m_sync_transfer+0x1c>
    333e:	2300      	movs	r3, #0
    3340:	f003 0301 	and.w	r3, r3, #1
    3344:	b2db      	uxtb	r3, r3
    3346:	22b3      	movs	r2, #179	; 0xb3
    3348:	490c      	ldr	r1, [pc, #48]	; (337c <spi_m_sync_transfer+0x58>)
    334a:	4618      	mov	r0, r3
    334c:	4b0c      	ldr	r3, [pc, #48]	; (3380 <spi_m_sync_transfer+0x5c>)
    334e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    3350:	683b      	ldr	r3, [r7, #0]
    3352:	681b      	ldr	r3, [r3, #0]
    3354:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    3356:	683b      	ldr	r3, [r7, #0]
    3358:	685b      	ldr	r3, [r3, #4]
    335a:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    335c:	683b      	ldr	r3, [r7, #0]
    335e:	689b      	ldr	r3, [r3, #8]
    3360:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	3304      	adds	r3, #4
    3366:	f107 020c 	add.w	r2, r7, #12
    336a:	4611      	mov	r1, r2
    336c:	4618      	mov	r0, r3
    336e:	4b05      	ldr	r3, [pc, #20]	; (3384 <spi_m_sync_transfer+0x60>)
    3370:	4798      	blx	r3
    3372:	4603      	mov	r3, r0
}
    3374:	4618      	mov	r0, r3
    3376:	3718      	adds	r7, #24
    3378:	46bd      	mov	sp, r7
    337a:	bd80      	pop	{r7, pc}
    337c:	00014738 	.word	0x00014738
    3380:	00004211 	.word	0x00004211
    3384:	00007ab1 	.word	0x00007ab1

00003388 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    3388:	b580      	push	{r7, lr}
    338a:	b082      	sub	sp, #8
    338c:	af00      	add	r7, sp, #0
    338e:	6078      	str	r0, [r7, #4]
    3390:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    3392:	687b      	ldr	r3, [r7, #4]
    3394:	2b00      	cmp	r3, #0
    3396:	d004      	beq.n	33a2 <spi_m_sync_get_io_descriptor+0x1a>
    3398:	683b      	ldr	r3, [r7, #0]
    339a:	2b00      	cmp	r3, #0
    339c:	d001      	beq.n	33a2 <spi_m_sync_get_io_descriptor+0x1a>
    339e:	2301      	movs	r3, #1
    33a0:	e000      	b.n	33a4 <spi_m_sync_get_io_descriptor+0x1c>
    33a2:	2300      	movs	r3, #0
    33a4:	f003 0301 	and.w	r3, r3, #1
    33a8:	b2db      	uxtb	r3, r3
    33aa:	22bd      	movs	r2, #189	; 0xbd
    33ac:	4906      	ldr	r1, [pc, #24]	; (33c8 <spi_m_sync_get_io_descriptor+0x40>)
    33ae:	4618      	mov	r0, r3
    33b0:	4b06      	ldr	r3, [pc, #24]	; (33cc <spi_m_sync_get_io_descriptor+0x44>)
    33b2:	4798      	blx	r3
	*io = &spi->io;
    33b4:	687b      	ldr	r3, [r7, #4]
    33b6:	f103 020c 	add.w	r2, r3, #12
    33ba:	683b      	ldr	r3, [r7, #0]
    33bc:	601a      	str	r2, [r3, #0]
	return 0;
    33be:	2300      	movs	r3, #0
}
    33c0:	4618      	mov	r0, r3
    33c2:	3708      	adds	r7, #8
    33c4:	46bd      	mov	sp, r7
    33c6:	bd80      	pop	{r7, pc}
    33c8:	00014738 	.word	0x00014738
    33cc:	00004211 	.word	0x00004211

000033d0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    33d0:	b480      	push	{r7}
    33d2:	b083      	sub	sp, #12
    33d4:	af00      	add	r7, sp, #0
    33d6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	681b      	ldr	r3, [r3, #0]
}
    33dc:	4618      	mov	r0, r3
    33de:	370c      	adds	r7, #12
    33e0:	46bd      	mov	sp, r7
    33e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    33e6:	4770      	bx	lr

000033e8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    33e8:	b480      	push	{r7}
    33ea:	b083      	sub	sp, #12
    33ec:	af00      	add	r7, sp, #0
    33ee:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    33f0:	687b      	ldr	r3, [r7, #4]
    33f2:	2b00      	cmp	r3, #0
    33f4:	d002      	beq.n	33fc <list_get_next_element+0x14>
    33f6:	687b      	ldr	r3, [r7, #4]
    33f8:	681b      	ldr	r3, [r3, #0]
    33fa:	e000      	b.n	33fe <list_get_next_element+0x16>
    33fc:	2300      	movs	r3, #0
}
    33fe:	4618      	mov	r0, r3
    3400:	370c      	adds	r7, #12
    3402:	46bd      	mov	sp, r7
    3404:	f85d 7b04 	ldr.w	r7, [sp], #4
    3408:	4770      	bx	lr
	...

0000340c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    340c:	b580      	push	{r7, lr}
    340e:	b084      	sub	sp, #16
    3410:	af00      	add	r7, sp, #0
    3412:	60f8      	str	r0, [r7, #12]
    3414:	60b9      	str	r1, [r7, #8]
    3416:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    3418:	68fb      	ldr	r3, [r7, #12]
    341a:	2b00      	cmp	r3, #0
    341c:	d007      	beq.n	342e <timer_init+0x22>
    341e:	68bb      	ldr	r3, [r7, #8]
    3420:	2b00      	cmp	r3, #0
    3422:	d004      	beq.n	342e <timer_init+0x22>
    3424:	687b      	ldr	r3, [r7, #4]
    3426:	2b00      	cmp	r3, #0
    3428:	d001      	beq.n	342e <timer_init+0x22>
    342a:	2301      	movs	r3, #1
    342c:	e000      	b.n	3430 <timer_init+0x24>
    342e:	2300      	movs	r3, #0
    3430:	f003 0301 	and.w	r3, r3, #1
    3434:	b2db      	uxtb	r3, r3
    3436:	223b      	movs	r2, #59	; 0x3b
    3438:	490c      	ldr	r1, [pc, #48]	; (346c <timer_init+0x60>)
    343a:	4618      	mov	r0, r3
    343c:	4b0c      	ldr	r3, [pc, #48]	; (3470 <timer_init+0x64>)
    343e:	4798      	blx	r3
	descr->func = func;
    3440:	68fb      	ldr	r3, [r7, #12]
    3442:	687a      	ldr	r2, [r7, #4]
    3444:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    3446:	68fb      	ldr	r3, [r7, #12]
    3448:	681b      	ldr	r3, [r3, #0]
    344a:	681b      	ldr	r3, [r3, #0]
    344c:	68fa      	ldr	r2, [r7, #12]
    344e:	3204      	adds	r2, #4
    3450:	68b9      	ldr	r1, [r7, #8]
    3452:	4610      	mov	r0, r2
    3454:	4798      	blx	r3
	descr->time                           = 0;
    3456:	68fb      	ldr	r3, [r7, #12]
    3458:	2200      	movs	r2, #0
    345a:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    345c:	68fb      	ldr	r3, [r7, #12]
    345e:	4a05      	ldr	r2, [pc, #20]	; (3474 <timer_init+0x68>)
    3460:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    3462:	2300      	movs	r3, #0
}
    3464:	4618      	mov	r0, r3
    3466:	3710      	adds	r7, #16
    3468:	46bd      	mov	sp, r7
    346a:	bd80      	pop	{r7, pc}
    346c:	00014754 	.word	0x00014754
    3470:	00004211 	.word	0x00004211
    3474:	000037fd 	.word	0x000037fd

00003478 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    3478:	b580      	push	{r7, lr}
    347a:	b082      	sub	sp, #8
    347c:	af00      	add	r7, sp, #0
    347e:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3480:	687b      	ldr	r3, [r7, #4]
    3482:	2b00      	cmp	r3, #0
    3484:	d005      	beq.n	3492 <timer_start+0x1a>
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	681b      	ldr	r3, [r3, #0]
    348a:	2b00      	cmp	r3, #0
    348c:	d001      	beq.n	3492 <timer_start+0x1a>
    348e:	2301      	movs	r3, #1
    3490:	e000      	b.n	3494 <timer_start+0x1c>
    3492:	2300      	movs	r3, #0
    3494:	f003 0301 	and.w	r3, r3, #1
    3498:	b2db      	uxtb	r3, r3
    349a:	2254      	movs	r2, #84	; 0x54
    349c:	490e      	ldr	r1, [pc, #56]	; (34d8 <timer_start+0x60>)
    349e:	4618      	mov	r0, r3
    34a0:	4b0e      	ldr	r3, [pc, #56]	; (34dc <timer_start+0x64>)
    34a2:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    34a4:	687b      	ldr	r3, [r7, #4]
    34a6:	681b      	ldr	r3, [r3, #0]
    34a8:	699b      	ldr	r3, [r3, #24]
    34aa:	687a      	ldr	r2, [r7, #4]
    34ac:	3204      	adds	r2, #4
    34ae:	4610      	mov	r0, r2
    34b0:	4798      	blx	r3
    34b2:	4603      	mov	r3, r0
    34b4:	2b00      	cmp	r3, #0
    34b6:	d002      	beq.n	34be <timer_start+0x46>
		return ERR_DENIED;
    34b8:	f06f 0310 	mvn.w	r3, #16
    34bc:	e007      	b.n	34ce <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    34be:	687b      	ldr	r3, [r7, #4]
    34c0:	681b      	ldr	r3, [r3, #0]
    34c2:	689b      	ldr	r3, [r3, #8]
    34c4:	687a      	ldr	r2, [r7, #4]
    34c6:	3204      	adds	r2, #4
    34c8:	4610      	mov	r0, r2
    34ca:	4798      	blx	r3

	return ERR_NONE;
    34cc:	2300      	movs	r3, #0
}
    34ce:	4618      	mov	r0, r3
    34d0:	3708      	adds	r7, #8
    34d2:	46bd      	mov	sp, r7
    34d4:	bd80      	pop	{r7, pc}
    34d6:	bf00      	nop
    34d8:	00014754 	.word	0x00014754
    34dc:	00004211 	.word	0x00004211

000034e0 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    34e0:	b580      	push	{r7, lr}
    34e2:	b082      	sub	sp, #8
    34e4:	af00      	add	r7, sp, #0
    34e6:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    34e8:	687b      	ldr	r3, [r7, #4]
    34ea:	2b00      	cmp	r3, #0
    34ec:	d005      	beq.n	34fa <timer_stop+0x1a>
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	681b      	ldr	r3, [r3, #0]
    34f2:	2b00      	cmp	r3, #0
    34f4:	d001      	beq.n	34fa <timer_stop+0x1a>
    34f6:	2301      	movs	r3, #1
    34f8:	e000      	b.n	34fc <timer_stop+0x1c>
    34fa:	2300      	movs	r3, #0
    34fc:	f003 0301 	and.w	r3, r3, #1
    3500:	b2db      	uxtb	r3, r3
    3502:	2262      	movs	r2, #98	; 0x62
    3504:	490f      	ldr	r1, [pc, #60]	; (3544 <timer_stop+0x64>)
    3506:	4618      	mov	r0, r3
    3508:	4b0f      	ldr	r3, [pc, #60]	; (3548 <timer_stop+0x68>)
    350a:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	681b      	ldr	r3, [r3, #0]
    3510:	699b      	ldr	r3, [r3, #24]
    3512:	687a      	ldr	r2, [r7, #4]
    3514:	3204      	adds	r2, #4
    3516:	4610      	mov	r0, r2
    3518:	4798      	blx	r3
    351a:	4603      	mov	r3, r0
    351c:	f083 0301 	eor.w	r3, r3, #1
    3520:	b2db      	uxtb	r3, r3
    3522:	2b00      	cmp	r3, #0
    3524:	d002      	beq.n	352c <timer_stop+0x4c>
		return ERR_DENIED;
    3526:	f06f 0310 	mvn.w	r3, #16
    352a:	e007      	b.n	353c <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    352c:	687b      	ldr	r3, [r7, #4]
    352e:	681b      	ldr	r3, [r3, #0]
    3530:	68db      	ldr	r3, [r3, #12]
    3532:	687a      	ldr	r2, [r7, #4]
    3534:	3204      	adds	r2, #4
    3536:	4610      	mov	r0, r2
    3538:	4798      	blx	r3

	return ERR_NONE;
    353a:	2300      	movs	r3, #0
}
    353c:	4618      	mov	r0, r3
    353e:	3708      	adds	r7, #8
    3540:	46bd      	mov	sp, r7
    3542:	bd80      	pop	{r7, pc}
    3544:	00014754 	.word	0x00014754
    3548:	00004211 	.word	0x00004211

0000354c <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    354c:	b580      	push	{r7, lr}
    354e:	b084      	sub	sp, #16
    3550:	af00      	add	r7, sp, #0
    3552:	6078      	str	r0, [r7, #4]
    3554:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    3556:	687b      	ldr	r3, [r7, #4]
    3558:	2b00      	cmp	r3, #0
    355a:	d008      	beq.n	356e <timer_add_task+0x22>
    355c:	683b      	ldr	r3, [r7, #0]
    355e:	2b00      	cmp	r3, #0
    3560:	d005      	beq.n	356e <timer_add_task+0x22>
    3562:	687b      	ldr	r3, [r7, #4]
    3564:	681b      	ldr	r3, [r3, #0]
    3566:	2b00      	cmp	r3, #0
    3568:	d001      	beq.n	356e <timer_add_task+0x22>
    356a:	2301      	movs	r3, #1
    356c:	e000      	b.n	3570 <timer_add_task+0x24>
    356e:	2300      	movs	r3, #0
    3570:	f003 0301 	and.w	r3, r3, #1
    3574:	b2db      	uxtb	r3, r3
    3576:	227b      	movs	r2, #123	; 0x7b
    3578:	492f      	ldr	r1, [pc, #188]	; (3638 <timer_add_task+0xec>)
    357a:	4618      	mov	r0, r3
    357c:	4b2f      	ldr	r3, [pc, #188]	; (363c <timer_add_task+0xf0>)
    357e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3580:	687b      	ldr	r3, [r7, #4]
    3582:	7f1b      	ldrb	r3, [r3, #28]
    3584:	b2db      	uxtb	r3, r3
    3586:	f043 0301 	orr.w	r3, r3, #1
    358a:	b2da      	uxtb	r2, r3
    358c:	687b      	ldr	r3, [r7, #4]
    358e:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    3590:	687b      	ldr	r3, [r7, #4]
    3592:	3318      	adds	r3, #24
    3594:	6839      	ldr	r1, [r7, #0]
    3596:	4618      	mov	r0, r3
    3598:	4b29      	ldr	r3, [pc, #164]	; (3640 <timer_add_task+0xf4>)
    359a:	4798      	blx	r3
    359c:	4603      	mov	r3, r0
    359e:	2b00      	cmp	r3, #0
    35a0:	d00f      	beq.n	35c2 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    35a2:	687b      	ldr	r3, [r7, #4]
    35a4:	7f1b      	ldrb	r3, [r3, #28]
    35a6:	b2db      	uxtb	r3, r3
    35a8:	f023 0301 	bic.w	r3, r3, #1
    35ac:	b2da      	uxtb	r2, r3
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    35b2:	2280      	movs	r2, #128	; 0x80
    35b4:	4920      	ldr	r1, [pc, #128]	; (3638 <timer_add_task+0xec>)
    35b6:	2000      	movs	r0, #0
    35b8:	4b20      	ldr	r3, [pc, #128]	; (363c <timer_add_task+0xf0>)
    35ba:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    35bc:	f06f 0311 	mvn.w	r3, #17
    35c0:	e035      	b.n	362e <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    35c2:	687b      	ldr	r3, [r7, #4]
    35c4:	695a      	ldr	r2, [r3, #20]
    35c6:	683b      	ldr	r3, [r7, #0]
    35c8:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    35ca:	687b      	ldr	r3, [r7, #4]
    35cc:	f103 0018 	add.w	r0, r3, #24
    35d0:	687b      	ldr	r3, [r7, #4]
    35d2:	695b      	ldr	r3, [r3, #20]
    35d4:	461a      	mov	r2, r3
    35d6:	6839      	ldr	r1, [r7, #0]
    35d8:	4b1a      	ldr	r3, [pc, #104]	; (3644 <timer_add_task+0xf8>)
    35da:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    35dc:	687b      	ldr	r3, [r7, #4]
    35de:	7f1b      	ldrb	r3, [r3, #28]
    35e0:	b2db      	uxtb	r3, r3
    35e2:	f023 0301 	bic.w	r3, r3, #1
    35e6:	b2da      	uxtb	r2, r3
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    35ec:	687b      	ldr	r3, [r7, #4]
    35ee:	7f1b      	ldrb	r3, [r3, #28]
    35f0:	b2db      	uxtb	r3, r3
    35f2:	f003 0302 	and.w	r3, r3, #2
    35f6:	2b00      	cmp	r3, #0
    35f8:	d018      	beq.n	362c <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    35fa:	f107 030c 	add.w	r3, r7, #12
    35fe:	4618      	mov	r0, r3
    3600:	4b11      	ldr	r3, [pc, #68]	; (3648 <timer_add_task+0xfc>)
    3602:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3604:	687b      	ldr	r3, [r7, #4]
    3606:	7f1b      	ldrb	r3, [r3, #28]
    3608:	b2db      	uxtb	r3, r3
    360a:	f023 0302 	bic.w	r3, r3, #2
    360e:	b2da      	uxtb	r2, r3
    3610:	687b      	ldr	r3, [r7, #4]
    3612:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	681b      	ldr	r3, [r3, #0]
    3618:	69db      	ldr	r3, [r3, #28]
    361a:	687a      	ldr	r2, [r7, #4]
    361c:	3204      	adds	r2, #4
    361e:	4610      	mov	r0, r2
    3620:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3622:	f107 030c 	add.w	r3, r7, #12
    3626:	4618      	mov	r0, r3
    3628:	4b08      	ldr	r3, [pc, #32]	; (364c <timer_add_task+0x100>)
    362a:	4798      	blx	r3
	}

	return ERR_NONE;
    362c:	2300      	movs	r3, #0
}
    362e:	4618      	mov	r0, r3
    3630:	3710      	adds	r7, #16
    3632:	46bd      	mov	sp, r7
    3634:	bd80      	pop	{r7, pc}
    3636:	bf00      	nop
    3638:	00014754 	.word	0x00014754
    363c:	00004211 	.word	0x00004211
    3640:	00004239 	.word	0x00004239
    3644:	0000374d 	.word	0x0000374d
    3648:	0000be8d 	.word	0x0000be8d
    364c:	0000beb3 	.word	0x0000beb3

00003650 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    3650:	b580      	push	{r7, lr}
    3652:	b084      	sub	sp, #16
    3654:	af00      	add	r7, sp, #0
    3656:	6078      	str	r0, [r7, #4]
    3658:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    365a:	687b      	ldr	r3, [r7, #4]
    365c:	2b00      	cmp	r3, #0
    365e:	d008      	beq.n	3672 <timer_remove_task+0x22>
    3660:	683b      	ldr	r3, [r7, #0]
    3662:	2b00      	cmp	r3, #0
    3664:	d005      	beq.n	3672 <timer_remove_task+0x22>
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	681b      	ldr	r3, [r3, #0]
    366a:	2b00      	cmp	r3, #0
    366c:	d001      	beq.n	3672 <timer_remove_task+0x22>
    366e:	2301      	movs	r3, #1
    3670:	e000      	b.n	3674 <timer_remove_task+0x24>
    3672:	2300      	movs	r3, #0
    3674:	f003 0301 	and.w	r3, r3, #1
    3678:	b2db      	uxtb	r3, r3
    367a:	2296      	movs	r2, #150	; 0x96
    367c:	492d      	ldr	r1, [pc, #180]	; (3734 <timer_remove_task+0xe4>)
    367e:	4618      	mov	r0, r3
    3680:	4b2d      	ldr	r3, [pc, #180]	; (3738 <timer_remove_task+0xe8>)
    3682:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3684:	687b      	ldr	r3, [r7, #4]
    3686:	7f1b      	ldrb	r3, [r3, #28]
    3688:	b2db      	uxtb	r3, r3
    368a:	f043 0301 	orr.w	r3, r3, #1
    368e:	b2da      	uxtb	r2, r3
    3690:	687b      	ldr	r3, [r7, #4]
    3692:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    3694:	687b      	ldr	r3, [r7, #4]
    3696:	3318      	adds	r3, #24
    3698:	6839      	ldr	r1, [r7, #0]
    369a:	4618      	mov	r0, r3
    369c:	4b27      	ldr	r3, [pc, #156]	; (373c <timer_remove_task+0xec>)
    369e:	4798      	blx	r3
    36a0:	4603      	mov	r3, r0
    36a2:	f083 0301 	eor.w	r3, r3, #1
    36a6:	b2db      	uxtb	r3, r3
    36a8:	2b00      	cmp	r3, #0
    36aa:	d00f      	beq.n	36cc <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    36ac:	687b      	ldr	r3, [r7, #4]
    36ae:	7f1b      	ldrb	r3, [r3, #28]
    36b0:	b2db      	uxtb	r3, r3
    36b2:	f023 0301 	bic.w	r3, r3, #1
    36b6:	b2da      	uxtb	r2, r3
    36b8:	687b      	ldr	r3, [r7, #4]
    36ba:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    36bc:	229b      	movs	r2, #155	; 0x9b
    36be:	491d      	ldr	r1, [pc, #116]	; (3734 <timer_remove_task+0xe4>)
    36c0:	2000      	movs	r0, #0
    36c2:	4b1d      	ldr	r3, [pc, #116]	; (3738 <timer_remove_task+0xe8>)
    36c4:	4798      	blx	r3
		return ERR_NOT_FOUND;
    36c6:	f06f 0309 	mvn.w	r3, #9
    36ca:	e02e      	b.n	372a <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    36cc:	687b      	ldr	r3, [r7, #4]
    36ce:	3318      	adds	r3, #24
    36d0:	6839      	ldr	r1, [r7, #0]
    36d2:	4618      	mov	r0, r3
    36d4:	4b1a      	ldr	r3, [pc, #104]	; (3740 <timer_remove_task+0xf0>)
    36d6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    36d8:	687b      	ldr	r3, [r7, #4]
    36da:	7f1b      	ldrb	r3, [r3, #28]
    36dc:	b2db      	uxtb	r3, r3
    36de:	f023 0301 	bic.w	r3, r3, #1
    36e2:	b2da      	uxtb	r2, r3
    36e4:	687b      	ldr	r3, [r7, #4]
    36e6:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    36e8:	687b      	ldr	r3, [r7, #4]
    36ea:	7f1b      	ldrb	r3, [r3, #28]
    36ec:	b2db      	uxtb	r3, r3
    36ee:	f003 0302 	and.w	r3, r3, #2
    36f2:	2b00      	cmp	r3, #0
    36f4:	d018      	beq.n	3728 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    36f6:	f107 030c 	add.w	r3, r7, #12
    36fa:	4618      	mov	r0, r3
    36fc:	4b11      	ldr	r3, [pc, #68]	; (3744 <timer_remove_task+0xf4>)
    36fe:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3700:	687b      	ldr	r3, [r7, #4]
    3702:	7f1b      	ldrb	r3, [r3, #28]
    3704:	b2db      	uxtb	r3, r3
    3706:	f023 0302 	bic.w	r3, r3, #2
    370a:	b2da      	uxtb	r2, r3
    370c:	687b      	ldr	r3, [r7, #4]
    370e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	681b      	ldr	r3, [r3, #0]
    3714:	69db      	ldr	r3, [r3, #28]
    3716:	687a      	ldr	r2, [r7, #4]
    3718:	3204      	adds	r2, #4
    371a:	4610      	mov	r0, r2
    371c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    371e:	f107 030c 	add.w	r3, r7, #12
    3722:	4618      	mov	r0, r3
    3724:	4b08      	ldr	r3, [pc, #32]	; (3748 <timer_remove_task+0xf8>)
    3726:	4798      	blx	r3
	}

	return ERR_NONE;
    3728:	2300      	movs	r3, #0
}
    372a:	4618      	mov	r0, r3
    372c:	3710      	adds	r7, #16
    372e:	46bd      	mov	sp, r7
    3730:	bd80      	pop	{r7, pc}
    3732:	bf00      	nop
    3734:	00014754 	.word	0x00014754
    3738:	00004211 	.word	0x00004211
    373c:	00004239 	.word	0x00004239
    3740:	0000439b 	.word	0x0000439b
    3744:	0000be8d 	.word	0x0000be8d
    3748:	0000beb3 	.word	0x0000beb3

0000374c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    374c:	b580      	push	{r7, lr}
    374e:	b088      	sub	sp, #32
    3750:	af00      	add	r7, sp, #0
    3752:	60f8      	str	r0, [r7, #12]
    3754:	60b9      	str	r1, [r7, #8]
    3756:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    3758:	2300      	movs	r3, #0
    375a:	61bb      	str	r3, [r7, #24]
    375c:	68f8      	ldr	r0, [r7, #12]
    375e:	4b23      	ldr	r3, [pc, #140]	; (37ec <timer_add_timer_task+0xa0>)
    3760:	4798      	blx	r3
    3762:	6138      	str	r0, [r7, #16]

	if (!head) {
    3764:	693b      	ldr	r3, [r7, #16]
    3766:	2b00      	cmp	r3, #0
    3768:	d104      	bne.n	3774 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    376a:	68b9      	ldr	r1, [r7, #8]
    376c:	68f8      	ldr	r0, [r7, #12]
    376e:	4b20      	ldr	r3, [pc, #128]	; (37f0 <timer_add_timer_task+0xa4>)
    3770:	4798      	blx	r3
		return;
    3772:	e037      	b.n	37e4 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3774:	693b      	ldr	r3, [r7, #16]
    3776:	61fb      	str	r3, [r7, #28]
    3778:	e022      	b.n	37c0 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    377a:	69fb      	ldr	r3, [r7, #28]
    377c:	685a      	ldr	r2, [r3, #4]
    377e:	687b      	ldr	r3, [r7, #4]
    3780:	429a      	cmp	r2, r3
    3782:	d808      	bhi.n	3796 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    3784:	69fb      	ldr	r3, [r7, #28]
    3786:	689a      	ldr	r2, [r3, #8]
    3788:	69fb      	ldr	r3, [r7, #28]
    378a:	6859      	ldr	r1, [r3, #4]
    378c:	687b      	ldr	r3, [r7, #4]
    378e:	1acb      	subs	r3, r1, r3
    3790:	4413      	add	r3, r2
    3792:	617b      	str	r3, [r7, #20]
    3794:	e009      	b.n	37aa <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    3796:	69fb      	ldr	r3, [r7, #28]
    3798:	689a      	ldr	r2, [r3, #8]
    379a:	69fb      	ldr	r3, [r7, #28]
    379c:	685b      	ldr	r3, [r3, #4]
    379e:	441a      	add	r2, r3
    37a0:	687b      	ldr	r3, [r7, #4]
    37a2:	425b      	negs	r3, r3
    37a4:	4413      	add	r3, r2
    37a6:	3301      	adds	r3, #1
    37a8:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    37aa:	68bb      	ldr	r3, [r7, #8]
    37ac:	689a      	ldr	r2, [r3, #8]
    37ae:	697b      	ldr	r3, [r7, #20]
    37b0:	429a      	cmp	r2, r3
    37b2:	d909      	bls.n	37c8 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    37b4:	69fb      	ldr	r3, [r7, #28]
    37b6:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    37b8:	69f8      	ldr	r0, [r7, #28]
    37ba:	4b0e      	ldr	r3, [pc, #56]	; (37f4 <timer_add_timer_task+0xa8>)
    37bc:	4798      	blx	r3
    37be:	61f8      	str	r0, [r7, #28]
    37c0:	69fb      	ldr	r3, [r7, #28]
    37c2:	2b00      	cmp	r3, #0
    37c4:	d1d9      	bne.n	377a <timer_add_timer_task+0x2e>
    37c6:	e000      	b.n	37ca <timer_add_timer_task+0x7e>
			break;
    37c8:	bf00      	nop
	}

	if (it == head) {
    37ca:	69fa      	ldr	r2, [r7, #28]
    37cc:	693b      	ldr	r3, [r7, #16]
    37ce:	429a      	cmp	r2, r3
    37d0:	d104      	bne.n	37dc <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    37d2:	68b9      	ldr	r1, [r7, #8]
    37d4:	68f8      	ldr	r0, [r7, #12]
    37d6:	4b06      	ldr	r3, [pc, #24]	; (37f0 <timer_add_timer_task+0xa4>)
    37d8:	4798      	blx	r3
    37da:	e003      	b.n	37e4 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    37dc:	68b9      	ldr	r1, [r7, #8]
    37de:	69b8      	ldr	r0, [r7, #24]
    37e0:	4b05      	ldr	r3, [pc, #20]	; (37f8 <timer_add_timer_task+0xac>)
    37e2:	4798      	blx	r3
	}
}
    37e4:	3720      	adds	r7, #32
    37e6:	46bd      	mov	sp, r7
    37e8:	bd80      	pop	{r7, pc}
    37ea:	bf00      	nop
    37ec:	000033d1 	.word	0x000033d1
    37f0:	00004271 	.word	0x00004271
    37f4:	000033e9 	.word	0x000033e9
    37f8:	000042c9 	.word	0x000042c9

000037fc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    37fc:	b580      	push	{r7, lr}
    37fe:	b086      	sub	sp, #24
    3800:	af00      	add	r7, sp, #0
    3802:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    3804:	687b      	ldr	r3, [r7, #4]
    3806:	3b04      	subs	r3, #4
    3808:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    380a:	693b      	ldr	r3, [r7, #16]
    380c:	3318      	adds	r3, #24
    380e:	4618      	mov	r0, r3
    3810:	4b27      	ldr	r3, [pc, #156]	; (38b0 <timer_process_counted+0xb4>)
    3812:	4798      	blx	r3
    3814:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    3816:	693b      	ldr	r3, [r7, #16]
    3818:	695b      	ldr	r3, [r3, #20]
    381a:	1c5a      	adds	r2, r3, #1
    381c:	693b      	ldr	r3, [r7, #16]
    381e:	615a      	str	r2, [r3, #20]
    3820:	693b      	ldr	r3, [r7, #16]
    3822:	695b      	ldr	r3, [r3, #20]
    3824:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    3826:	693b      	ldr	r3, [r7, #16]
    3828:	7f1b      	ldrb	r3, [r3, #28]
    382a:	b2db      	uxtb	r3, r3
    382c:	f003 0301 	and.w	r3, r3, #1
    3830:	2b00      	cmp	r3, #0
    3832:	d106      	bne.n	3842 <timer_process_counted+0x46>
    3834:	693b      	ldr	r3, [r7, #16]
    3836:	7f1b      	ldrb	r3, [r3, #28]
    3838:	b2db      	uxtb	r3, r3
    383a:	f003 0302 	and.w	r3, r3, #2
    383e:	2b00      	cmp	r3, #0
    3840:	d027      	beq.n	3892 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3842:	693b      	ldr	r3, [r7, #16]
    3844:	7f1b      	ldrb	r3, [r3, #28]
    3846:	b2db      	uxtb	r3, r3
    3848:	f043 0302 	orr.w	r3, r3, #2
    384c:	b2da      	uxtb	r2, r3
    384e:	693b      	ldr	r3, [r7, #16]
    3850:	771a      	strb	r2, [r3, #28]
		return;
    3852:	e029      	b.n	38a8 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    3854:	697b      	ldr	r3, [r7, #20]
    3856:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    3858:	693b      	ldr	r3, [r7, #16]
    385a:	3318      	adds	r3, #24
    385c:	4618      	mov	r0, r3
    385e:	4b15      	ldr	r3, [pc, #84]	; (38b4 <timer_process_counted+0xb8>)
    3860:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3862:	68bb      	ldr	r3, [r7, #8]
    3864:	7c1b      	ldrb	r3, [r3, #16]
    3866:	2b01      	cmp	r3, #1
    3868:	d109      	bne.n	387e <timer_process_counted+0x82>
			tmp->time_label = time;
    386a:	68bb      	ldr	r3, [r7, #8]
    386c:	68fa      	ldr	r2, [r7, #12]
    386e:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    3870:	693b      	ldr	r3, [r7, #16]
    3872:	3318      	adds	r3, #24
    3874:	68fa      	ldr	r2, [r7, #12]
    3876:	68b9      	ldr	r1, [r7, #8]
    3878:	4618      	mov	r0, r3
    387a:	4b0f      	ldr	r3, [pc, #60]	; (38b8 <timer_process_counted+0xbc>)
    387c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    387e:	693b      	ldr	r3, [r7, #16]
    3880:	3318      	adds	r3, #24
    3882:	4618      	mov	r0, r3
    3884:	4b0a      	ldr	r3, [pc, #40]	; (38b0 <timer_process_counted+0xb4>)
    3886:	4798      	blx	r3
    3888:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    388a:	68bb      	ldr	r3, [r7, #8]
    388c:	68db      	ldr	r3, [r3, #12]
    388e:	68b8      	ldr	r0, [r7, #8]
    3890:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3892:	697b      	ldr	r3, [r7, #20]
    3894:	2b00      	cmp	r3, #0
    3896:	d007      	beq.n	38a8 <timer_process_counted+0xac>
    3898:	697b      	ldr	r3, [r7, #20]
    389a:	685b      	ldr	r3, [r3, #4]
    389c:	68fa      	ldr	r2, [r7, #12]
    389e:	1ad2      	subs	r2, r2, r3
    38a0:	697b      	ldr	r3, [r7, #20]
    38a2:	689b      	ldr	r3, [r3, #8]
    38a4:	429a      	cmp	r2, r3
    38a6:	d2d5      	bcs.n	3854 <timer_process_counted+0x58>
	}
}
    38a8:	3718      	adds	r7, #24
    38aa:	46bd      	mov	sp, r7
    38ac:	bd80      	pop	{r7, pc}
    38ae:	bf00      	nop
    38b0:	000033d1 	.word	0x000033d1
    38b4:	00004369 	.word	0x00004369
    38b8:	0000374d 	.word	0x0000374d

000038bc <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    38bc:	b480      	push	{r7}
    38be:	b085      	sub	sp, #20
    38c0:	af00      	add	r7, sp, #0
    38c2:	4603      	mov	r3, r0
    38c4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    38c6:	2300      	movs	r3, #0
    38c8:	73fb      	strb	r3, [r7, #15]
    38ca:	e029      	b.n	3920 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    38cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    38d0:	4a19      	ldr	r2, [pc, #100]	; (3938 <_usb_d_find_ep+0x7c>)
    38d2:	015b      	lsls	r3, r3, #5
    38d4:	4413      	add	r3, r2
    38d6:	3301      	adds	r3, #1
    38d8:	781b      	ldrb	r3, [r3, #0]
    38da:	79fa      	ldrb	r2, [r7, #7]
    38dc:	429a      	cmp	r2, r3
    38de:	d102      	bne.n	38e6 <_usb_d_find_ep+0x2a>
			return i;
    38e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    38e4:	e022      	b.n	392c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    38e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    38ea:	4a13      	ldr	r2, [pc, #76]	; (3938 <_usb_d_find_ep+0x7c>)
    38ec:	015b      	lsls	r3, r3, #5
    38ee:	4413      	add	r3, r2
    38f0:	781b      	ldrb	r3, [r3, #0]
    38f2:	2b00      	cmp	r3, #0
    38f4:	d10e      	bne.n	3914 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    38f6:	79fb      	ldrb	r3, [r7, #7]
    38f8:	f003 030f 	and.w	r3, r3, #15
    38fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3900:	490d      	ldr	r1, [pc, #52]	; (3938 <_usb_d_find_ep+0x7c>)
    3902:	0152      	lsls	r2, r2, #5
    3904:	440a      	add	r2, r1
    3906:	3201      	adds	r2, #1
    3908:	7812      	ldrb	r2, [r2, #0]
    390a:	4293      	cmp	r3, r2
    390c:	d102      	bne.n	3914 <_usb_d_find_ep+0x58>
			return i;
    390e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3912:	e00b      	b.n	392c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3914:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3918:	b2db      	uxtb	r3, r3
    391a:	3301      	adds	r3, #1
    391c:	b2db      	uxtb	r3, r3
    391e:	73fb      	strb	r3, [r7, #15]
    3920:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3924:	2b03      	cmp	r3, #3
    3926:	ddd1      	ble.n	38cc <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3928:	f04f 33ff 	mov.w	r3, #4294967295
}
    392c:	4618      	mov	r0, r3
    392e:	3714      	adds	r7, #20
    3930:	46bd      	mov	sp, r7
    3932:	f85d 7b04 	ldr.w	r7, [sp], #4
    3936:	4770      	bx	lr
    3938:	20000d74 	.word	0x20000d74

0000393c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    393c:	b580      	push	{r7, lr}
    393e:	b088      	sub	sp, #32
    3940:	af00      	add	r7, sp, #0
    3942:	60ba      	str	r2, [r7, #8]
    3944:	607b      	str	r3, [r7, #4]
    3946:	4603      	mov	r3, r0
    3948:	73fb      	strb	r3, [r7, #15]
    394a:	460b      	mov	r3, r1
    394c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    394e:	68bb      	ldr	r3, [r7, #8]
    3950:	617b      	str	r3, [r7, #20]
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	61bb      	str	r3, [r7, #24]
    3956:	7bbb      	ldrb	r3, [r7, #14]
    3958:	2b00      	cmp	r3, #0
    395a:	d004      	beq.n	3966 <_usb_d_trans+0x2a>
    395c:	7bfb      	ldrb	r3, [r7, #15]
    395e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3962:	b2db      	uxtb	r3, r3
    3964:	e003      	b.n	396e <_usb_d_trans+0x32>
    3966:	7bfb      	ldrb	r3, [r7, #15]
    3968:	f003 030f 	and.w	r3, r3, #15
    396c:	b2db      	uxtb	r3, r3
    396e:	773b      	strb	r3, [r7, #28]
    3970:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3974:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3976:	f107 0314 	add.w	r3, r7, #20
    397a:	4618      	mov	r0, r3
    397c:	4b03      	ldr	r3, [pc, #12]	; (398c <_usb_d_trans+0x50>)
    397e:	4798      	blx	r3
    3980:	4603      	mov	r3, r0
}
    3982:	4618      	mov	r0, r3
    3984:	3720      	adds	r7, #32
    3986:	46bd      	mov	sp, r7
    3988:	bd80      	pop	{r7, pc}
    398a:	bf00      	nop
    398c:	0000b4c1 	.word	0x0000b4c1

00003990 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3990:	b480      	push	{r7}
    3992:	b085      	sub	sp, #20
    3994:	af00      	add	r7, sp, #0
    3996:	60f8      	str	r0, [r7, #12]
    3998:	60b9      	str	r1, [r7, #8]
    399a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    399c:	2300      	movs	r3, #0
}
    399e:	4618      	mov	r0, r3
    39a0:	3714      	adds	r7, #20
    39a2:	46bd      	mov	sp, r7
    39a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    39a8:	4770      	bx	lr
	...

000039ac <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    39ac:	b580      	push	{r7, lr}
    39ae:	b086      	sub	sp, #24
    39b0:	af00      	add	r7, sp, #0
    39b2:	4603      	mov	r3, r0
    39b4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    39b6:	79fb      	ldrb	r3, [r7, #7]
    39b8:	4618      	mov	r0, r3
    39ba:	4b2a      	ldr	r3, [pc, #168]	; (3a64 <usb_d_cb_trans_setup+0xb8>)
    39bc:	4798      	blx	r3
    39be:	4603      	mov	r3, r0
    39c0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    39c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39c6:	015b      	lsls	r3, r3, #5
    39c8:	4a27      	ldr	r2, [pc, #156]	; (3a68 <usb_d_cb_trans_setup+0xbc>)
    39ca:	4413      	add	r3, r2
    39cc:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    39ce:	693b      	ldr	r3, [r7, #16]
    39d0:	330c      	adds	r3, #12
    39d2:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    39d4:	79fb      	ldrb	r3, [r7, #7]
    39d6:	68f9      	ldr	r1, [r7, #12]
    39d8:	4618      	mov	r0, r3
    39da:	4b24      	ldr	r3, [pc, #144]	; (3a6c <usb_d_cb_trans_setup+0xc0>)
    39dc:	4798      	blx	r3
    39de:	4603      	mov	r3, r0
    39e0:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    39e2:	7afb      	ldrb	r3, [r7, #11]
    39e4:	2b08      	cmp	r3, #8
    39e6:	d00d      	beq.n	3a04 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    39e8:	79fb      	ldrb	r3, [r7, #7]
    39ea:	2101      	movs	r1, #1
    39ec:	4618      	mov	r0, r3
    39ee:	4b20      	ldr	r3, [pc, #128]	; (3a70 <usb_d_cb_trans_setup+0xc4>)
    39f0:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    39f2:	79fb      	ldrb	r3, [r7, #7]
    39f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    39f8:	b2db      	uxtb	r3, r3
    39fa:	2101      	movs	r1, #1
    39fc:	4618      	mov	r0, r3
    39fe:	4b1c      	ldr	r3, [pc, #112]	; (3a70 <usb_d_cb_trans_setup+0xc4>)
    3a00:	4798      	blx	r3
		return;
    3a02:	e02b      	b.n	3a5c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3a04:	79fb      	ldrb	r3, [r7, #7]
    3a06:	2100      	movs	r1, #0
    3a08:	4618      	mov	r0, r3
    3a0a:	4b19      	ldr	r3, [pc, #100]	; (3a70 <usb_d_cb_trans_setup+0xc4>)
    3a0c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    3a0e:	79fb      	ldrb	r3, [r7, #7]
    3a10:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3a14:	b2db      	uxtb	r3, r3
    3a16:	2100      	movs	r1, #0
    3a18:	4618      	mov	r0, r3
    3a1a:	4b15      	ldr	r3, [pc, #84]	; (3a70 <usb_d_cb_trans_setup+0xc4>)
    3a1c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    3a1e:	693b      	ldr	r3, [r7, #16]
    3a20:	2201      	movs	r2, #1
    3a22:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3a24:	693b      	ldr	r3, [r7, #16]
    3a26:	695b      	ldr	r3, [r3, #20]
    3a28:	79fa      	ldrb	r2, [r7, #7]
    3a2a:	68f9      	ldr	r1, [r7, #12]
    3a2c:	4610      	mov	r0, r2
    3a2e:	4798      	blx	r3
    3a30:	4603      	mov	r3, r0
    3a32:	f083 0301 	eor.w	r3, r3, #1
    3a36:	b2db      	uxtb	r3, r3
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d00f      	beq.n	3a5c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3a3c:	693b      	ldr	r3, [r7, #16]
    3a3e:	2205      	movs	r2, #5
    3a40:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3a42:	79fb      	ldrb	r3, [r7, #7]
    3a44:	2101      	movs	r1, #1
    3a46:	4618      	mov	r0, r3
    3a48:	4b09      	ldr	r3, [pc, #36]	; (3a70 <usb_d_cb_trans_setup+0xc4>)
    3a4a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3a4c:	79fb      	ldrb	r3, [r7, #7]
    3a4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3a52:	b2db      	uxtb	r3, r3
    3a54:	2101      	movs	r1, #1
    3a56:	4618      	mov	r0, r3
    3a58:	4b05      	ldr	r3, [pc, #20]	; (3a70 <usb_d_cb_trans_setup+0xc4>)
    3a5a:	4798      	blx	r3
	}
}
    3a5c:	3718      	adds	r7, #24
    3a5e:	46bd      	mov	sp, r7
    3a60:	bd80      	pop	{r7, pc}
    3a62:	bf00      	nop
    3a64:	000038bd 	.word	0x000038bd
    3a68:	20000d74 	.word	0x20000d74
    3a6c:	0000b419 	.word	0x0000b419
    3a70:	0000b291 	.word	0x0000b291

00003a74 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3a74:	b580      	push	{r7, lr}
    3a76:	b084      	sub	sp, #16
    3a78:	af00      	add	r7, sp, #0
    3a7a:	4603      	mov	r3, r0
    3a7c:	6039      	str	r1, [r7, #0]
    3a7e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3a80:	79fb      	ldrb	r3, [r7, #7]
    3a82:	4618      	mov	r0, r3
    3a84:	4b0d      	ldr	r3, [pc, #52]	; (3abc <usb_d_cb_trans_more+0x48>)
    3a86:	4798      	blx	r3
    3a88:	4603      	mov	r3, r0
    3a8a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3a90:	015b      	lsls	r3, r3, #5
    3a92:	4a0b      	ldr	r2, [pc, #44]	; (3ac0 <usb_d_cb_trans_more+0x4c>)
    3a94:	4413      	add	r3, r2
    3a96:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3a98:	68bb      	ldr	r3, [r7, #8]
    3a9a:	789b      	ldrb	r3, [r3, #2]
    3a9c:	2b03      	cmp	r3, #3
    3a9e:	d107      	bne.n	3ab0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3aa0:	68bb      	ldr	r3, [r7, #8]
    3aa2:	699b      	ldr	r3, [r3, #24]
    3aa4:	79fa      	ldrb	r2, [r7, #7]
    3aa6:	6839      	ldr	r1, [r7, #0]
    3aa8:	4610      	mov	r0, r2
    3aaa:	4798      	blx	r3
    3aac:	4603      	mov	r3, r0
    3aae:	e000      	b.n	3ab2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3ab0:	2300      	movs	r3, #0
}
    3ab2:	4618      	mov	r0, r3
    3ab4:	3710      	adds	r7, #16
    3ab6:	46bd      	mov	sp, r7
    3ab8:	bd80      	pop	{r7, pc}
    3aba:	bf00      	nop
    3abc:	000038bd 	.word	0x000038bd
    3ac0:	20000d74 	.word	0x20000d74

00003ac4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3ac4:	b590      	push	{r4, r7, lr}
    3ac6:	b087      	sub	sp, #28
    3ac8:	af02      	add	r7, sp, #8
    3aca:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3acc:	687b      	ldr	r3, [r7, #4]
    3ace:	789b      	ldrb	r3, [r3, #2]
    3ad0:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    3ad2:	687b      	ldr	r3, [r7, #4]
    3ad4:	7b1b      	ldrb	r3, [r3, #12]
    3ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3ada:	2b00      	cmp	r3, #0
    3adc:	bf14      	ite	ne
    3ade:	2301      	movne	r3, #1
    3ae0:	2300      	moveq	r3, #0
    3ae2:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3ae4:	7bfb      	ldrb	r3, [r7, #15]
    3ae6:	2b03      	cmp	r3, #3
    3ae8:	d13a      	bne.n	3b60 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    3aea:	687b      	ldr	r3, [r7, #4]
    3aec:	69db      	ldr	r3, [r3, #28]
    3aee:	687a      	ldr	r2, [r7, #4]
    3af0:	7850      	ldrb	r0, [r2, #1]
    3af2:	687a      	ldr	r2, [r7, #4]
    3af4:	320c      	adds	r2, #12
    3af6:	2101      	movs	r1, #1
    3af8:	4798      	blx	r3
    3afa:	4603      	mov	r3, r0
    3afc:	737b      	strb	r3, [r7, #13]
		if (err) {
    3afe:	7b7b      	ldrb	r3, [r7, #13]
    3b00:	2b00      	cmp	r3, #0
    3b02:	d015      	beq.n	3b30 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3b04:	687b      	ldr	r3, [r7, #4]
    3b06:	2205      	movs	r2, #5
    3b08:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    3b0a:	687b      	ldr	r3, [r7, #4]
    3b0c:	2202      	movs	r2, #2
    3b0e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3b10:	7bbb      	ldrb	r3, [r7, #14]
    3b12:	2b00      	cmp	r3, #0
    3b14:	d002      	beq.n	3b1c <usb_d_ctrl_trans_done+0x58>
    3b16:	687b      	ldr	r3, [r7, #4]
    3b18:	785b      	ldrb	r3, [r3, #1]
    3b1a:	e004      	b.n	3b26 <usb_d_ctrl_trans_done+0x62>
    3b1c:	687b      	ldr	r3, [r7, #4]
    3b1e:	785b      	ldrb	r3, [r3, #1]
    3b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3b24:	b2db      	uxtb	r3, r3
    3b26:	2101      	movs	r1, #1
    3b28:	4618      	mov	r0, r3
    3b2a:	4b15      	ldr	r3, [pc, #84]	; (3b80 <usb_d_ctrl_trans_done+0xbc>)
    3b2c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    3b2e:	e022      	b.n	3b76 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3b30:	687b      	ldr	r3, [r7, #4]
    3b32:	2204      	movs	r2, #4
    3b34:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3b36:	687b      	ldr	r3, [r7, #4]
    3b38:	7858      	ldrb	r0, [r3, #1]
    3b3a:	7bbb      	ldrb	r3, [r7, #14]
    3b3c:	2b00      	cmp	r3, #0
    3b3e:	bf14      	ite	ne
    3b40:	2301      	movne	r3, #1
    3b42:	2300      	moveq	r3, #0
    3b44:	b2db      	uxtb	r3, r3
    3b46:	f083 0301 	eor.w	r3, r3, #1
    3b4a:	b2db      	uxtb	r3, r3
    3b4c:	f003 0301 	and.w	r3, r3, #1
    3b50:	b2d9      	uxtb	r1, r3
    3b52:	2301      	movs	r3, #1
    3b54:	9300      	str	r3, [sp, #0]
    3b56:	2300      	movs	r3, #0
    3b58:	2200      	movs	r2, #0
    3b5a:	4c0a      	ldr	r4, [pc, #40]	; (3b84 <usb_d_ctrl_trans_done+0xc0>)
    3b5c:	47a0      	blx	r4
}
    3b5e:	e00a      	b.n	3b76 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	69db      	ldr	r3, [r3, #28]
    3b64:	687a      	ldr	r2, [r7, #4]
    3b66:	7850      	ldrb	r0, [r2, #1]
    3b68:	687a      	ldr	r2, [r7, #4]
    3b6a:	320c      	adds	r2, #12
    3b6c:	2100      	movs	r1, #0
    3b6e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3b70:	687b      	ldr	r3, [r7, #4]
    3b72:	2202      	movs	r2, #2
    3b74:	709a      	strb	r2, [r3, #2]
}
    3b76:	bf00      	nop
    3b78:	3714      	adds	r7, #20
    3b7a:	46bd      	mov	sp, r7
    3b7c:	bd90      	pop	{r4, r7, pc}
    3b7e:	bf00      	nop
    3b80:	0000b291 	.word	0x0000b291
    3b84:	0000393d 	.word	0x0000393d

00003b88 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3b88:	b580      	push	{r7, lr}
    3b8a:	b086      	sub	sp, #24
    3b8c:	af00      	add	r7, sp, #0
    3b8e:	4603      	mov	r3, r0
    3b90:	60b9      	str	r1, [r7, #8]
    3b92:	607a      	str	r2, [r7, #4]
    3b94:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3b96:	7bfb      	ldrb	r3, [r7, #15]
    3b98:	4618      	mov	r0, r3
    3b9a:	4b2f      	ldr	r3, [pc, #188]	; (3c58 <_usb_d_cb_trans_done+0xd0>)
    3b9c:	4798      	blx	r3
    3b9e:	4603      	mov	r3, r0
    3ba0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3ba6:	015b      	lsls	r3, r3, #5
    3ba8:	4a2c      	ldr	r2, [pc, #176]	; (3c5c <_usb_d_cb_trans_done+0xd4>)
    3baa:	4413      	add	r3, r2
    3bac:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    3bae:	68bb      	ldr	r3, [r7, #8]
    3bb0:	2b00      	cmp	r3, #0
    3bb2:	d10e      	bne.n	3bd2 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3bb4:	693b      	ldr	r3, [r7, #16]
    3bb6:	2200      	movs	r2, #0
    3bb8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3bba:	693b      	ldr	r3, [r7, #16]
    3bbc:	781b      	ldrb	r3, [r3, #0]
    3bbe:	2b00      	cmp	r3, #0
    3bc0:	d103      	bne.n	3bca <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3bc2:	6938      	ldr	r0, [r7, #16]
    3bc4:	4b26      	ldr	r3, [pc, #152]	; (3c60 <_usb_d_cb_trans_done+0xd8>)
    3bc6:	4798      	blx	r3
			return;
    3bc8:	e043      	b.n	3c52 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3bca:	693b      	ldr	r3, [r7, #16]
    3bcc:	2201      	movs	r2, #1
    3bce:	709a      	strb	r2, [r3, #2]
    3bd0:	e038      	b.n	3c44 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3bd2:	68bb      	ldr	r3, [r7, #8]
    3bd4:	2b01      	cmp	r3, #1
    3bd6:	d113      	bne.n	3c00 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3bd8:	693b      	ldr	r3, [r7, #16]
    3bda:	2202      	movs	r2, #2
    3bdc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3bde:	693b      	ldr	r3, [r7, #16]
    3be0:	781b      	ldrb	r3, [r3, #0]
    3be2:	2b00      	cmp	r3, #0
    3be4:	d108      	bne.n	3bf8 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3be6:	693b      	ldr	r3, [r7, #16]
    3be8:	2202      	movs	r2, #2
    3bea:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3bec:	7bfb      	ldrb	r3, [r7, #15]
    3bee:	2100      	movs	r1, #0
    3bf0:	4618      	mov	r0, r3
    3bf2:	4b1c      	ldr	r3, [pc, #112]	; (3c64 <_usb_d_cb_trans_done+0xdc>)
    3bf4:	4798      	blx	r3
    3bf6:	e025      	b.n	3c44 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3bf8:	693b      	ldr	r3, [r7, #16]
    3bfa:	2205      	movs	r2, #5
    3bfc:	709a      	strb	r2, [r3, #2]
    3bfe:	e021      	b.n	3c44 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3c00:	68bb      	ldr	r3, [r7, #8]
    3c02:	2b02      	cmp	r3, #2
    3c04:	d10e      	bne.n	3c24 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3c06:	693b      	ldr	r3, [r7, #16]
    3c08:	2204      	movs	r2, #4
    3c0a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3c0c:	693b      	ldr	r3, [r7, #16]
    3c0e:	781b      	ldrb	r3, [r3, #0]
    3c10:	2b00      	cmp	r3, #0
    3c12:	d103      	bne.n	3c1c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3c14:	693b      	ldr	r3, [r7, #16]
    3c16:	2202      	movs	r2, #2
    3c18:	709a      	strb	r2, [r3, #2]
			return;
    3c1a:	e01a      	b.n	3c52 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3c1c:	693b      	ldr	r3, [r7, #16]
    3c1e:	2201      	movs	r2, #1
    3c20:	709a      	strb	r2, [r3, #2]
    3c22:	e00f      	b.n	3c44 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3c24:	68bb      	ldr	r3, [r7, #8]
    3c26:	2b03      	cmp	r3, #3
    3c28:	d106      	bne.n	3c38 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3c2a:	693b      	ldr	r3, [r7, #16]
    3c2c:	2200      	movs	r2, #0
    3c2e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3c30:	693b      	ldr	r3, [r7, #16]
    3c32:	2205      	movs	r2, #5
    3c34:	70da      	strb	r2, [r3, #3]
    3c36:	e005      	b.n	3c44 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3c38:	693b      	ldr	r3, [r7, #16]
    3c3a:	2206      	movs	r2, #6
    3c3c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3c3e:	693b      	ldr	r3, [r7, #16]
    3c40:	2206      	movs	r2, #6
    3c42:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3c44:	693b      	ldr	r3, [r7, #16]
    3c46:	69db      	ldr	r3, [r3, #28]
    3c48:	693a      	ldr	r2, [r7, #16]
    3c4a:	78d1      	ldrb	r1, [r2, #3]
    3c4c:	687a      	ldr	r2, [r7, #4]
    3c4e:	7bf8      	ldrb	r0, [r7, #15]
    3c50:	4798      	blx	r3
}
    3c52:	3718      	adds	r7, #24
    3c54:	46bd      	mov	sp, r7
    3c56:	bd80      	pop	{r7, pc}
    3c58:	000038bd 	.word	0x000038bd
    3c5c:	20000d74 	.word	0x20000d74
    3c60:	00003ac5 	.word	0x00003ac5
    3c64:	0000b291 	.word	0x0000b291

00003c68 <usb_d_init>:

int32_t usb_d_init(void)
{
    3c68:	b580      	push	{r7, lr}
    3c6a:	b082      	sub	sp, #8
    3c6c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3c6e:	4b21      	ldr	r3, [pc, #132]	; (3cf4 <usb_d_init+0x8c>)
    3c70:	4798      	blx	r3
    3c72:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3c74:	683b      	ldr	r3, [r7, #0]
    3c76:	2b00      	cmp	r3, #0
    3c78:	da01      	bge.n	3c7e <usb_d_init+0x16>
		return rc;
    3c7a:	683b      	ldr	r3, [r7, #0]
    3c7c:	e036      	b.n	3cec <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3c7e:	2280      	movs	r2, #128	; 0x80
    3c80:	2100      	movs	r1, #0
    3c82:	481d      	ldr	r0, [pc, #116]	; (3cf8 <usb_d_init+0x90>)
    3c84:	4b1d      	ldr	r3, [pc, #116]	; (3cfc <usb_d_init+0x94>)
    3c86:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3c88:	2300      	movs	r3, #0
    3c8a:	71fb      	strb	r3, [r7, #7]
    3c8c:	e01e      	b.n	3ccc <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3c8e:	79fb      	ldrb	r3, [r7, #7]
    3c90:	4a19      	ldr	r2, [pc, #100]	; (3cf8 <usb_d_init+0x90>)
    3c92:	015b      	lsls	r3, r3, #5
    3c94:	4413      	add	r3, r2
    3c96:	3301      	adds	r3, #1
    3c98:	22ff      	movs	r2, #255	; 0xff
    3c9a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3c9c:	79fb      	ldrb	r3, [r7, #7]
    3c9e:	4a16      	ldr	r2, [pc, #88]	; (3cf8 <usb_d_init+0x90>)
    3ca0:	015b      	lsls	r3, r3, #5
    3ca2:	4413      	add	r3, r2
    3ca4:	3314      	adds	r3, #20
    3ca6:	4a16      	ldr	r2, [pc, #88]	; (3d00 <usb_d_init+0x98>)
    3ca8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3caa:	79fb      	ldrb	r3, [r7, #7]
    3cac:	4a12      	ldr	r2, [pc, #72]	; (3cf8 <usb_d_init+0x90>)
    3cae:	015b      	lsls	r3, r3, #5
    3cb0:	4413      	add	r3, r2
    3cb2:	3318      	adds	r3, #24
    3cb4:	4a12      	ldr	r2, [pc, #72]	; (3d00 <usb_d_init+0x98>)
    3cb6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3cb8:	79fb      	ldrb	r3, [r7, #7]
    3cba:	4a0f      	ldr	r2, [pc, #60]	; (3cf8 <usb_d_init+0x90>)
    3cbc:	015b      	lsls	r3, r3, #5
    3cbe:	4413      	add	r3, r2
    3cc0:	331c      	adds	r3, #28
    3cc2:	4a0f      	ldr	r2, [pc, #60]	; (3d00 <usb_d_init+0x98>)
    3cc4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3cc6:	79fb      	ldrb	r3, [r7, #7]
    3cc8:	3301      	adds	r3, #1
    3cca:	71fb      	strb	r3, [r7, #7]
    3ccc:	79fb      	ldrb	r3, [r7, #7]
    3cce:	2b03      	cmp	r3, #3
    3cd0:	d9dd      	bls.n	3c8e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3cd2:	490c      	ldr	r1, [pc, #48]	; (3d04 <usb_d_init+0x9c>)
    3cd4:	2000      	movs	r0, #0
    3cd6:	4b0c      	ldr	r3, [pc, #48]	; (3d08 <usb_d_init+0xa0>)
    3cd8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3cda:	490c      	ldr	r1, [pc, #48]	; (3d0c <usb_d_init+0xa4>)
    3cdc:	2001      	movs	r0, #1
    3cde:	4b0a      	ldr	r3, [pc, #40]	; (3d08 <usb_d_init+0xa0>)
    3ce0:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3ce2:	490b      	ldr	r1, [pc, #44]	; (3d10 <usb_d_init+0xa8>)
    3ce4:	2002      	movs	r0, #2
    3ce6:	4b08      	ldr	r3, [pc, #32]	; (3d08 <usb_d_init+0xa0>)
    3ce8:	4798      	blx	r3
	return ERR_NONE;
    3cea:	2300      	movs	r3, #0
}
    3cec:	4618      	mov	r0, r3
    3cee:	3708      	adds	r7, #8
    3cf0:	46bd      	mov	sp, r7
    3cf2:	bd80      	pop	{r7, pc}
    3cf4:	0000aad9 	.word	0x0000aad9
    3cf8:	20000d74 	.word	0x20000d74
    3cfc:	00014391 	.word	0x00014391
    3d00:	00003991 	.word	0x00003991
    3d04:	000039ad 	.word	0x000039ad
    3d08:	0000b721 	.word	0x0000b721
    3d0c:	00003a75 	.word	0x00003a75
    3d10:	00003b89 	.word	0x00003b89

00003d14 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3d14:	b580      	push	{r7, lr}
    3d16:	b082      	sub	sp, #8
    3d18:	af00      	add	r7, sp, #0
    3d1a:	4603      	mov	r3, r0
    3d1c:	6039      	str	r1, [r7, #0]
    3d1e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3d20:	79fb      	ldrb	r3, [r7, #7]
    3d22:	6839      	ldr	r1, [r7, #0]
    3d24:	4618      	mov	r0, r3
    3d26:	4b03      	ldr	r3, [pc, #12]	; (3d34 <usb_d_register_callback+0x20>)
    3d28:	4798      	blx	r3
}
    3d2a:	bf00      	nop
    3d2c:	3708      	adds	r7, #8
    3d2e:	46bd      	mov	sp, r7
    3d30:	bd80      	pop	{r7, pc}
    3d32:	bf00      	nop
    3d34:	0000b6d9 	.word	0x0000b6d9

00003d38 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3d3c:	4b02      	ldr	r3, [pc, #8]	; (3d48 <usb_d_enable+0x10>)
    3d3e:	4798      	blx	r3
    3d40:	4603      	mov	r3, r0
}
    3d42:	4618      	mov	r0, r3
    3d44:	bd80      	pop	{r7, pc}
    3d46:	bf00      	nop
    3d48:	0000abc9 	.word	0x0000abc9

00003d4c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3d50:	4b01      	ldr	r3, [pc, #4]	; (3d58 <usb_d_attach+0xc>)
    3d52:	4798      	blx	r3
}
    3d54:	bf00      	nop
    3d56:	bd80      	pop	{r7, pc}
    3d58:	0000ac4d 	.word	0x0000ac4d

00003d5c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3d5c:	b580      	push	{r7, lr}
    3d5e:	b082      	sub	sp, #8
    3d60:	af00      	add	r7, sp, #0
    3d62:	4603      	mov	r3, r0
    3d64:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3d66:	79fb      	ldrb	r3, [r7, #7]
    3d68:	4618      	mov	r0, r3
    3d6a:	4b03      	ldr	r3, [pc, #12]	; (3d78 <usb_d_set_address+0x1c>)
    3d6c:	4798      	blx	r3
}
    3d6e:	bf00      	nop
    3d70:	3708      	adds	r7, #8
    3d72:	46bd      	mov	sp, r7
    3d74:	bd80      	pop	{r7, pc}
    3d76:	bf00      	nop
    3d78:	0000ac61 	.word	0x0000ac61

00003d7c <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3d7c:	b580      	push	{r7, lr}
    3d7e:	b082      	sub	sp, #8
    3d80:	af00      	add	r7, sp, #0
    3d82:	4603      	mov	r3, r0
    3d84:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3d86:	79fb      	ldrb	r3, [r7, #7]
    3d88:	b29b      	uxth	r3, r3
    3d8a:	461a      	mov	r2, r3
    3d8c:	2100      	movs	r1, #0
    3d8e:	2000      	movs	r0, #0
    3d90:	4b03      	ldr	r3, [pc, #12]	; (3da0 <usb_d_ep0_init+0x24>)
    3d92:	4798      	blx	r3
    3d94:	4603      	mov	r3, r0
}
    3d96:	4618      	mov	r0, r3
    3d98:	3708      	adds	r7, #8
    3d9a:	46bd      	mov	sp, r7
    3d9c:	bd80      	pop	{r7, pc}
    3d9e:	bf00      	nop
    3da0:	00003da5 	.word	0x00003da5

00003da4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3da4:	b580      	push	{r7, lr}
    3da6:	b086      	sub	sp, #24
    3da8:	af00      	add	r7, sp, #0
    3daa:	4603      	mov	r3, r0
    3dac:	71fb      	strb	r3, [r7, #7]
    3dae:	460b      	mov	r3, r1
    3db0:	71bb      	strb	r3, [r7, #6]
    3db2:	4613      	mov	r3, r2
    3db4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3db6:	79fb      	ldrb	r3, [r7, #7]
    3db8:	4618      	mov	r0, r3
    3dba:	4b1e      	ldr	r3, [pc, #120]	; (3e34 <usb_d_ep_init+0x90>)
    3dbc:	4798      	blx	r3
    3dbe:	4603      	mov	r3, r0
    3dc0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3dc6:	015b      	lsls	r3, r3, #5
    3dc8:	4a1b      	ldr	r2, [pc, #108]	; (3e38 <usb_d_ep_init+0x94>)
    3dca:	4413      	add	r3, r2
    3dcc:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    3dce:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	db02      	blt.n	3ddc <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3dd6:	f06f 0313 	mvn.w	r3, #19
    3dda:	e027      	b.n	3e2c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3ddc:	20ff      	movs	r0, #255	; 0xff
    3dde:	4b15      	ldr	r3, [pc, #84]	; (3e34 <usb_d_ep_init+0x90>)
    3de0:	4798      	blx	r3
    3de2:	4603      	mov	r3, r0
    3de4:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3dea:	2b00      	cmp	r3, #0
    3dec:	da02      	bge.n	3df4 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    3dee:	f06f 0314 	mvn.w	r3, #20
    3df2:	e01b      	b.n	3e2c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3df8:	015b      	lsls	r3, r3, #5
    3dfa:	4a0f      	ldr	r2, [pc, #60]	; (3e38 <usb_d_ep_init+0x94>)
    3dfc:	4413      	add	r3, r2
    3dfe:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3e00:	88ba      	ldrh	r2, [r7, #4]
    3e02:	79b9      	ldrb	r1, [r7, #6]
    3e04:	79fb      	ldrb	r3, [r7, #7]
    3e06:	4618      	mov	r0, r3
    3e08:	4b0c      	ldr	r3, [pc, #48]	; (3e3c <usb_d_ep_init+0x98>)
    3e0a:	4798      	blx	r3
    3e0c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3e0e:	68fb      	ldr	r3, [r7, #12]
    3e10:	2b00      	cmp	r3, #0
    3e12:	da01      	bge.n	3e18 <usb_d_ep_init+0x74>
		return rc;
    3e14:	68fb      	ldr	r3, [r7, #12]
    3e16:	e009      	b.n	3e2c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3e18:	693b      	ldr	r3, [r7, #16]
    3e1a:	79fa      	ldrb	r2, [r7, #7]
    3e1c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3e1e:	79bb      	ldrb	r3, [r7, #6]
    3e20:	f003 0303 	and.w	r3, r3, #3
    3e24:	b2da      	uxtb	r2, r3
    3e26:	693b      	ldr	r3, [r7, #16]
    3e28:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3e2a:	2300      	movs	r3, #0
}
    3e2c:	4618      	mov	r0, r3
    3e2e:	3718      	adds	r7, #24
    3e30:	46bd      	mov	sp, r7
    3e32:	bd80      	pop	{r7, pc}
    3e34:	000038bd 	.word	0x000038bd
    3e38:	20000d74 	.word	0x20000d74
    3e3c:	0000ad01 	.word	0x0000ad01

00003e40 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3e40:	b580      	push	{r7, lr}
    3e42:	b084      	sub	sp, #16
    3e44:	af00      	add	r7, sp, #0
    3e46:	4603      	mov	r3, r0
    3e48:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3e4a:	79fb      	ldrb	r3, [r7, #7]
    3e4c:	4618      	mov	r0, r3
    3e4e:	4b0d      	ldr	r3, [pc, #52]	; (3e84 <usb_d_ep_deinit+0x44>)
    3e50:	4798      	blx	r3
    3e52:	4603      	mov	r3, r0
    3e54:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3e5a:	015b      	lsls	r3, r3, #5
    3e5c:	4a0a      	ldr	r2, [pc, #40]	; (3e88 <usb_d_ep_deinit+0x48>)
    3e5e:	4413      	add	r3, r2
    3e60:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3e66:	2b00      	cmp	r3, #0
    3e68:	db07      	blt.n	3e7a <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3e6a:	79fb      	ldrb	r3, [r7, #7]
    3e6c:	4618      	mov	r0, r3
    3e6e:	4b07      	ldr	r3, [pc, #28]	; (3e8c <usb_d_ep_deinit+0x4c>)
    3e70:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3e72:	68bb      	ldr	r3, [r7, #8]
    3e74:	22ff      	movs	r2, #255	; 0xff
    3e76:	705a      	strb	r2, [r3, #1]
    3e78:	e000      	b.n	3e7c <usb_d_ep_deinit+0x3c>
		return;
    3e7a:	bf00      	nop
}
    3e7c:	3710      	adds	r7, #16
    3e7e:	46bd      	mov	sp, r7
    3e80:	bd80      	pop	{r7, pc}
    3e82:	bf00      	nop
    3e84:	000038bd 	.word	0x000038bd
    3e88:	20000d74 	.word	0x20000d74
    3e8c:	0000ae35 	.word	0x0000ae35

00003e90 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3e90:	b580      	push	{r7, lr}
    3e92:	b086      	sub	sp, #24
    3e94:	af00      	add	r7, sp, #0
    3e96:	4603      	mov	r3, r0
    3e98:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3e9a:	79fb      	ldrb	r3, [r7, #7]
    3e9c:	4618      	mov	r0, r3
    3e9e:	4b15      	ldr	r3, [pc, #84]	; (3ef4 <usb_d_ep_enable+0x64>)
    3ea0:	4798      	blx	r3
    3ea2:	4603      	mov	r3, r0
    3ea4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3eaa:	015b      	lsls	r3, r3, #5
    3eac:	4a12      	ldr	r2, [pc, #72]	; (3ef8 <usb_d_ep_enable+0x68>)
    3eae:	4413      	add	r3, r2
    3eb0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	da02      	bge.n	3ec0 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3eba:	f06f 0311 	mvn.w	r3, #17
    3ebe:	e014      	b.n	3eea <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3ec0:	693b      	ldr	r3, [r7, #16]
    3ec2:	781b      	ldrb	r3, [r3, #0]
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	d101      	bne.n	3ecc <usb_d_ep_enable+0x3c>
    3ec8:	2202      	movs	r2, #2
    3eca:	e000      	b.n	3ece <usb_d_ep_enable+0x3e>
    3ecc:	2201      	movs	r2, #1
    3ece:	693b      	ldr	r3, [r7, #16]
    3ed0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3ed2:	79fb      	ldrb	r3, [r7, #7]
    3ed4:	4618      	mov	r0, r3
    3ed6:	4b09      	ldr	r3, [pc, #36]	; (3efc <usb_d_ep_enable+0x6c>)
    3ed8:	4798      	blx	r3
    3eda:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3edc:	68fb      	ldr	r3, [r7, #12]
    3ede:	2b00      	cmp	r3, #0
    3ee0:	da02      	bge.n	3ee8 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3ee2:	693b      	ldr	r3, [r7, #16]
    3ee4:	2200      	movs	r2, #0
    3ee6:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3ee8:	68fb      	ldr	r3, [r7, #12]
}
    3eea:	4618      	mov	r0, r3
    3eec:	3718      	adds	r7, #24
    3eee:	46bd      	mov	sp, r7
    3ef0:	bd80      	pop	{r7, pc}
    3ef2:	bf00      	nop
    3ef4:	000038bd 	.word	0x000038bd
    3ef8:	20000d74 	.word	0x20000d74
    3efc:	0000af19 	.word	0x0000af19

00003f00 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3f00:	b590      	push	{r4, r7, lr}
    3f02:	b08d      	sub	sp, #52	; 0x34
    3f04:	af02      	add	r7, sp, #8
    3f06:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3f08:	687b      	ldr	r3, [r7, #4]
    3f0a:	7a1b      	ldrb	r3, [r3, #8]
    3f0c:	4618      	mov	r0, r3
    3f0e:	4b51      	ldr	r3, [pc, #324]	; (4054 <usb_d_ep_transfer+0x154>)
    3f10:	4798      	blx	r3
    3f12:	4603      	mov	r3, r0
    3f14:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3f16:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3f1a:	015b      	lsls	r3, r3, #5
    3f1c:	4a4e      	ldr	r2, [pc, #312]	; (4058 <usb_d_ep_transfer+0x158>)
    3f1e:	4413      	add	r3, r2
    3f20:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	7a1b      	ldrb	r3, [r3, #8]
    3f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	bf14      	ite	ne
    3f2e:	2301      	movne	r3, #1
    3f30:	2300      	moveq	r3, #0
    3f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	7a5b      	ldrb	r3, [r3, #9]
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	bf14      	ite	ne
    3f3e:	2301      	movne	r3, #1
    3f40:	2300      	moveq	r3, #0
    3f42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	685b      	ldr	r3, [r3, #4]
    3f4a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3f4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3f50:	2b00      	cmp	r3, #0
    3f52:	da02      	bge.n	3f5a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3f54:	f06f 0311 	mvn.w	r3, #17
    3f58:	e077      	b.n	404a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3f5a:	f107 0308 	add.w	r3, r7, #8
    3f5e:	4618      	mov	r0, r3
    3f60:	4b3e      	ldr	r3, [pc, #248]	; (405c <usb_d_ep_transfer+0x15c>)
    3f62:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3f64:	69bb      	ldr	r3, [r7, #24]
    3f66:	789b      	ldrb	r3, [r3, #2]
    3f68:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3f6a:	7bfb      	ldrb	r3, [r7, #15]
    3f6c:	b2db      	uxtb	r3, r3
    3f6e:	2b01      	cmp	r3, #1
    3f70:	d10c      	bne.n	3f8c <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3f72:	69bb      	ldr	r3, [r7, #24]
    3f74:	2203      	movs	r2, #3
    3f76:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3f78:	f107 0308 	add.w	r3, r7, #8
    3f7c:	4618      	mov	r0, r3
    3f7e:	4b38      	ldr	r3, [pc, #224]	; (4060 <usb_d_ep_transfer+0x160>)
    3f80:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3f82:	69bb      	ldr	r3, [r7, #24]
    3f84:	781b      	ldrb	r3, [r3, #0]
    3f86:	2b00      	cmp	r3, #0
    3f88:	d151      	bne.n	402e <usb_d_ep_transfer+0x12e>
    3f8a:	e017      	b.n	3fbc <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3f8c:	f107 0308 	add.w	r3, r7, #8
    3f90:	4618      	mov	r0, r3
    3f92:	4b33      	ldr	r3, [pc, #204]	; (4060 <usb_d_ep_transfer+0x160>)
    3f94:	4798      	blx	r3
		switch (state) {
    3f96:	7bfb      	ldrb	r3, [r7, #15]
    3f98:	b2db      	uxtb	r3, r3
    3f9a:	2b05      	cmp	r3, #5
    3f9c:	d004      	beq.n	3fa8 <usb_d_ep_transfer+0xa8>
    3f9e:	2b06      	cmp	r3, #6
    3fa0:	d004      	beq.n	3fac <usb_d_ep_transfer+0xac>
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d005      	beq.n	3fb2 <usb_d_ep_transfer+0xb2>
    3fa6:	e007      	b.n	3fb8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3fa8:	2302      	movs	r3, #2
    3faa:	e04e      	b.n	404a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3fac:	f06f 030f 	mvn.w	r3, #15
    3fb0:	e04b      	b.n	404a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3fb2:	f06f 0312 	mvn.w	r3, #18
    3fb6:	e048      	b.n	404a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3fb8:	2301      	movs	r3, #1
    3fba:	e046      	b.n	404a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3fbc:	69bb      	ldr	r3, [r7, #24]
    3fbe:	7c9b      	ldrb	r3, [r3, #18]
    3fc0:	b29a      	uxth	r2, r3
    3fc2:	69bb      	ldr	r3, [r7, #24]
    3fc4:	7cdb      	ldrb	r3, [r3, #19]
    3fc6:	b29b      	uxth	r3, r3
    3fc8:	021b      	lsls	r3, r3, #8
    3fca:	b29b      	uxth	r3, r3
    3fcc:	4413      	add	r3, r2
    3fce:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3fd0:	8afb      	ldrh	r3, [r7, #22]
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d10b      	bne.n	3fee <usb_d_ep_transfer+0xee>
			dir                 = true;
    3fd6:	2301      	movs	r3, #1
    3fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3fdc:	2300      	movs	r3, #0
    3fde:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3fe0:	2301      	movs	r3, #1
    3fe2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3fe6:	69bb      	ldr	r3, [r7, #24]
    3fe8:	2204      	movs	r2, #4
    3fea:	709a      	strb	r2, [r3, #2]
    3fec:	e01f      	b.n	402e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3fee:	69bb      	ldr	r3, [r7, #24]
    3ff0:	7b1b      	ldrb	r3, [r3, #12]
    3ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	bf14      	ite	ne
    3ffa:	2301      	movne	r3, #1
    3ffc:	2300      	moveq	r3, #0
    3ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    4002:	8afa      	ldrh	r2, [r7, #22]
    4004:	6a3b      	ldr	r3, [r7, #32]
    4006:	429a      	cmp	r2, r3
    4008:	d201      	bcs.n	400e <usb_d_ep_transfer+0x10e>
				len = req_len;
    400a:	8afb      	ldrh	r3, [r7, #22]
    400c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    400e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    4012:	2b00      	cmp	r3, #0
    4014:	d008      	beq.n	4028 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    4016:	8afa      	ldrh	r2, [r7, #22]
    4018:	6a3b      	ldr	r3, [r7, #32]
    401a:	429a      	cmp	r2, r3
    401c:	bf8c      	ite	hi
    401e:	2301      	movhi	r3, #1
    4020:	2300      	movls	r3, #0
    4022:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    4026:	e002      	b.n	402e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    4028:	2300      	movs	r3, #0
    402a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    402e:	687b      	ldr	r3, [r7, #4]
    4030:	7a18      	ldrb	r0, [r3, #8]
    4032:	687b      	ldr	r3, [r7, #4]
    4034:	681a      	ldr	r2, [r3, #0]
    4036:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    403a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    403e:	9300      	str	r3, [sp, #0]
    4040:	6a3b      	ldr	r3, [r7, #32]
    4042:	4c08      	ldr	r4, [pc, #32]	; (4064 <usb_d_ep_transfer+0x164>)
    4044:	47a0      	blx	r4
    4046:	6138      	str	r0, [r7, #16]
	return rc;
    4048:	693b      	ldr	r3, [r7, #16]
}
    404a:	4618      	mov	r0, r3
    404c:	372c      	adds	r7, #44	; 0x2c
    404e:	46bd      	mov	sp, r7
    4050:	bd90      	pop	{r4, r7, pc}
    4052:	bf00      	nop
    4054:	000038bd 	.word	0x000038bd
    4058:	20000d74 	.word	0x20000d74
    405c:	0000be8d 	.word	0x0000be8d
    4060:	0000beb3 	.word	0x0000beb3
    4064:	0000393d 	.word	0x0000393d

00004068 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    4068:	b580      	push	{r7, lr}
    406a:	b084      	sub	sp, #16
    406c:	af00      	add	r7, sp, #0
    406e:	4603      	mov	r3, r0
    4070:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4072:	79fb      	ldrb	r3, [r7, #7]
    4074:	4618      	mov	r0, r3
    4076:	4b0e      	ldr	r3, [pc, #56]	; (40b0 <usb_d_ep_abort+0x48>)
    4078:	4798      	blx	r3
    407a:	4603      	mov	r3, r0
    407c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    407e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4082:	015b      	lsls	r3, r3, #5
    4084:	4a0b      	ldr	r2, [pc, #44]	; (40b4 <usb_d_ep_abort+0x4c>)
    4086:	4413      	add	r3, r2
    4088:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    408a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    408e:	2b00      	cmp	r3, #0
    4090:	db0a      	blt.n	40a8 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    4092:	79fb      	ldrb	r3, [r7, #7]
    4094:	4618      	mov	r0, r3
    4096:	4b08      	ldr	r3, [pc, #32]	; (40b8 <usb_d_ep_abort+0x50>)
    4098:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    409a:	68bb      	ldr	r3, [r7, #8]
    409c:	2201      	movs	r2, #1
    409e:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    40a0:	68bb      	ldr	r3, [r7, #8]
    40a2:	2204      	movs	r2, #4
    40a4:	70da      	strb	r2, [r3, #3]
    40a6:	e000      	b.n	40aa <usb_d_ep_abort+0x42>
		return;
    40a8:	bf00      	nop
}
    40aa:	3710      	adds	r7, #16
    40ac:	46bd      	mov	sp, r7
    40ae:	bd80      	pop	{r7, pc}
    40b0:	000038bd 	.word	0x000038bd
    40b4:	20000d74 	.word	0x20000d74
    40b8:	0000b685 	.word	0x0000b685

000040bc <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    40bc:	b580      	push	{r7, lr}
    40be:	b086      	sub	sp, #24
    40c0:	af00      	add	r7, sp, #0
    40c2:	4603      	mov	r3, r0
    40c4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    40c6:	79fb      	ldrb	r3, [r7, #7]
    40c8:	4618      	mov	r0, r3
    40ca:	4b1a      	ldr	r3, [pc, #104]	; (4134 <_usb_d_ep_halt_clr+0x78>)
    40cc:	4798      	blx	r3
    40ce:	4603      	mov	r3, r0
    40d0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    40d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    40d6:	015b      	lsls	r3, r3, #5
    40d8:	4a17      	ldr	r2, [pc, #92]	; (4138 <_usb_d_ep_halt_clr+0x7c>)
    40da:	4413      	add	r3, r2
    40dc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    40de:	f997 3017 	ldrsb.w	r3, [r7, #23]
    40e2:	2b00      	cmp	r3, #0
    40e4:	da02      	bge.n	40ec <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    40e6:	f06f 0311 	mvn.w	r3, #17
    40ea:	e01f      	b.n	412c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    40ec:	79fb      	ldrb	r3, [r7, #7]
    40ee:	2102      	movs	r1, #2
    40f0:	4618      	mov	r0, r3
    40f2:	4b12      	ldr	r3, [pc, #72]	; (413c <_usb_d_ep_halt_clr+0x80>)
    40f4:	4798      	blx	r3
    40f6:	4603      	mov	r3, r0
    40f8:	2b00      	cmp	r3, #0
    40fa:	d016      	beq.n	412a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    40fc:	79fb      	ldrb	r3, [r7, #7]
    40fe:	2100      	movs	r1, #0
    4100:	4618      	mov	r0, r3
    4102:	4b0e      	ldr	r3, [pc, #56]	; (413c <_usb_d_ep_halt_clr+0x80>)
    4104:	4798      	blx	r3
    4106:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    4108:	68fb      	ldr	r3, [r7, #12]
    410a:	2b00      	cmp	r3, #0
    410c:	da01      	bge.n	4112 <_usb_d_ep_halt_clr+0x56>
			return rc;
    410e:	68fb      	ldr	r3, [r7, #12]
    4110:	e00c      	b.n	412c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4112:	693b      	ldr	r3, [r7, #16]
    4114:	2201      	movs	r2, #1
    4116:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    4118:	693b      	ldr	r3, [r7, #16]
    411a:	2203      	movs	r2, #3
    411c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    411e:	693b      	ldr	r3, [r7, #16]
    4120:	69db      	ldr	r3, [r3, #28]
    4122:	79f8      	ldrb	r0, [r7, #7]
    4124:	2200      	movs	r2, #0
    4126:	2103      	movs	r1, #3
    4128:	4798      	blx	r3
	}
	return ERR_NONE;
    412a:	2300      	movs	r3, #0
}
    412c:	4618      	mov	r0, r3
    412e:	3718      	adds	r7, #24
    4130:	46bd      	mov	sp, r7
    4132:	bd80      	pop	{r7, pc}
    4134:	000038bd 	.word	0x000038bd
    4138:	20000d74 	.word	0x20000d74
    413c:	0000b291 	.word	0x0000b291

00004140 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    4140:	b580      	push	{r7, lr}
    4142:	b082      	sub	sp, #8
    4144:	af00      	add	r7, sp, #0
    4146:	4603      	mov	r3, r0
    4148:	460a      	mov	r2, r1
    414a:	71fb      	strb	r3, [r7, #7]
    414c:	4613      	mov	r3, r2
    414e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    4150:	79bb      	ldrb	r3, [r7, #6]
    4152:	2b00      	cmp	r3, #0
    4154:	d105      	bne.n	4162 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    4156:	79fb      	ldrb	r3, [r7, #7]
    4158:	4618      	mov	r0, r3
    415a:	4b0c      	ldr	r3, [pc, #48]	; (418c <usb_d_ep_halt+0x4c>)
    415c:	4798      	blx	r3
    415e:	4603      	mov	r3, r0
    4160:	e00f      	b.n	4182 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    4162:	79bb      	ldrb	r3, [r7, #6]
    4164:	2b01      	cmp	r3, #1
    4166:	d106      	bne.n	4176 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4168:	79fb      	ldrb	r3, [r7, #7]
    416a:	2101      	movs	r1, #1
    416c:	4618      	mov	r0, r3
    416e:	4b08      	ldr	r3, [pc, #32]	; (4190 <usb_d_ep_halt+0x50>)
    4170:	4798      	blx	r3
    4172:	4603      	mov	r3, r0
    4174:	e005      	b.n	4182 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    4176:	79fb      	ldrb	r3, [r7, #7]
    4178:	2102      	movs	r1, #2
    417a:	4618      	mov	r0, r3
    417c:	4b04      	ldr	r3, [pc, #16]	; (4190 <usb_d_ep_halt+0x50>)
    417e:	4798      	blx	r3
    4180:	4603      	mov	r3, r0
	}
}
    4182:	4618      	mov	r0, r3
    4184:	3708      	adds	r7, #8
    4186:	46bd      	mov	sp, r7
    4188:	bd80      	pop	{r7, pc}
    418a:	bf00      	nop
    418c:	000040bd 	.word	0x000040bd
    4190:	0000b291 	.word	0x0000b291

00004194 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    4194:	b580      	push	{r7, lr}
    4196:	b086      	sub	sp, #24
    4198:	af00      	add	r7, sp, #0
    419a:	4603      	mov	r3, r0
    419c:	603a      	str	r2, [r7, #0]
    419e:	71fb      	strb	r3, [r7, #7]
    41a0:	460b      	mov	r3, r1
    41a2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    41a4:	79fb      	ldrb	r3, [r7, #7]
    41a6:	4618      	mov	r0, r3
    41a8:	4b16      	ldr	r3, [pc, #88]	; (4204 <usb_d_ep_register_callback+0x70>)
    41aa:	4798      	blx	r3
    41ac:	4603      	mov	r3, r0
    41ae:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    41b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    41b4:	015b      	lsls	r3, r3, #5
    41b6:	4a14      	ldr	r2, [pc, #80]	; (4208 <usb_d_ep_register_callback+0x74>)
    41b8:	4413      	add	r3, r2
    41ba:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    41bc:	683b      	ldr	r3, [r7, #0]
    41be:	2b00      	cmp	r3, #0
    41c0:	d001      	beq.n	41c6 <usb_d_ep_register_callback+0x32>
    41c2:	683b      	ldr	r3, [r7, #0]
    41c4:	e000      	b.n	41c8 <usb_d_ep_register_callback+0x34>
    41c6:	4b11      	ldr	r3, [pc, #68]	; (420c <usb_d_ep_register_callback+0x78>)
    41c8:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    41ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    41ce:	2b00      	cmp	r3, #0
    41d0:	db13      	blt.n	41fa <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    41d2:	79bb      	ldrb	r3, [r7, #6]
    41d4:	2b01      	cmp	r3, #1
    41d6:	d008      	beq.n	41ea <usb_d_ep_register_callback+0x56>
    41d8:	2b02      	cmp	r3, #2
    41da:	d00a      	beq.n	41f2 <usb_d_ep_register_callback+0x5e>
    41dc:	2b00      	cmp	r3, #0
    41de:	d000      	beq.n	41e2 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    41e0:	e00c      	b.n	41fc <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    41e2:	693b      	ldr	r3, [r7, #16]
    41e4:	68fa      	ldr	r2, [r7, #12]
    41e6:	615a      	str	r2, [r3, #20]
		break;
    41e8:	e008      	b.n	41fc <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    41ea:	693b      	ldr	r3, [r7, #16]
    41ec:	68fa      	ldr	r2, [r7, #12]
    41ee:	619a      	str	r2, [r3, #24]
		break;
    41f0:	e004      	b.n	41fc <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    41f2:	693b      	ldr	r3, [r7, #16]
    41f4:	68fa      	ldr	r2, [r7, #12]
    41f6:	61da      	str	r2, [r3, #28]
		break;
    41f8:	e000      	b.n	41fc <usb_d_ep_register_callback+0x68>
		return;
    41fa:	bf00      	nop
	}
}
    41fc:	3718      	adds	r7, #24
    41fe:	46bd      	mov	sp, r7
    4200:	bd80      	pop	{r7, pc}
    4202:	bf00      	nop
    4204:	000038bd 	.word	0x000038bd
    4208:	20000d74 	.word	0x20000d74
    420c:	00003991 	.word	0x00003991

00004210 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    4210:	b480      	push	{r7}
    4212:	b085      	sub	sp, #20
    4214:	af00      	add	r7, sp, #0
    4216:	4603      	mov	r3, r0
    4218:	60b9      	str	r1, [r7, #8]
    421a:	607a      	str	r2, [r7, #4]
    421c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    421e:	7bfb      	ldrb	r3, [r7, #15]
    4220:	f083 0301 	eor.w	r3, r3, #1
    4224:	b2db      	uxtb	r3, r3
    4226:	2b00      	cmp	r3, #0
    4228:	d000      	beq.n	422c <assert+0x1c>
		__asm("BKPT #0");
    422a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    422c:	bf00      	nop
    422e:	3714      	adds	r7, #20
    4230:	46bd      	mov	sp, r7
    4232:	f85d 7b04 	ldr.w	r7, [sp], #4
    4236:	4770      	bx	lr

00004238 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    4238:	b480      	push	{r7}
    423a:	b085      	sub	sp, #20
    423c:	af00      	add	r7, sp, #0
    423e:	6078      	str	r0, [r7, #4]
    4240:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	681b      	ldr	r3, [r3, #0]
    4246:	60fb      	str	r3, [r7, #12]
    4248:	e008      	b.n	425c <is_list_element+0x24>
		if (it == element) {
    424a:	68fa      	ldr	r2, [r7, #12]
    424c:	683b      	ldr	r3, [r7, #0]
    424e:	429a      	cmp	r2, r3
    4250:	d101      	bne.n	4256 <is_list_element+0x1e>
			return true;
    4252:	2301      	movs	r3, #1
    4254:	e006      	b.n	4264 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    4256:	68fb      	ldr	r3, [r7, #12]
    4258:	681b      	ldr	r3, [r3, #0]
    425a:	60fb      	str	r3, [r7, #12]
    425c:	68fb      	ldr	r3, [r7, #12]
    425e:	2b00      	cmp	r3, #0
    4260:	d1f3      	bne.n	424a <is_list_element+0x12>
		}
	}

	return false;
    4262:	2300      	movs	r3, #0
}
    4264:	4618      	mov	r0, r3
    4266:	3714      	adds	r7, #20
    4268:	46bd      	mov	sp, r7
    426a:	f85d 7b04 	ldr.w	r7, [sp], #4
    426e:	4770      	bx	lr

00004270 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    4270:	b580      	push	{r7, lr}
    4272:	b082      	sub	sp, #8
    4274:	af00      	add	r7, sp, #0
    4276:	6078      	str	r0, [r7, #4]
    4278:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    427a:	6839      	ldr	r1, [r7, #0]
    427c:	6878      	ldr	r0, [r7, #4]
    427e:	4b0f      	ldr	r3, [pc, #60]	; (42bc <list_insert_as_head+0x4c>)
    4280:	4798      	blx	r3
    4282:	4603      	mov	r3, r0
    4284:	2b00      	cmp	r3, #0
    4286:	bf14      	ite	ne
    4288:	2301      	movne	r3, #1
    428a:	2300      	moveq	r3, #0
    428c:	b2db      	uxtb	r3, r3
    428e:	f083 0301 	eor.w	r3, r3, #1
    4292:	b2db      	uxtb	r3, r3
    4294:	f003 0301 	and.w	r3, r3, #1
    4298:	b2db      	uxtb	r3, r3
    429a:	2239      	movs	r2, #57	; 0x39
    429c:	4908      	ldr	r1, [pc, #32]	; (42c0 <list_insert_as_head+0x50>)
    429e:	4618      	mov	r0, r3
    42a0:	4b08      	ldr	r3, [pc, #32]	; (42c4 <list_insert_as_head+0x54>)
    42a2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	681a      	ldr	r2, [r3, #0]
    42a8:	683b      	ldr	r3, [r7, #0]
    42aa:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    42ac:	687b      	ldr	r3, [r7, #4]
    42ae:	683a      	ldr	r2, [r7, #0]
    42b0:	601a      	str	r2, [r3, #0]
}
    42b2:	bf00      	nop
    42b4:	3708      	adds	r7, #8
    42b6:	46bd      	mov	sp, r7
    42b8:	bd80      	pop	{r7, pc}
    42ba:	bf00      	nop
    42bc:	00004239 	.word	0x00004239
    42c0:	0001476c 	.word	0x0001476c
    42c4:	00004211 	.word	0x00004211

000042c8 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    42c8:	b480      	push	{r7}
    42ca:	b083      	sub	sp, #12
    42cc:	af00      	add	r7, sp, #0
    42ce:	6078      	str	r0, [r7, #4]
    42d0:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    42d2:	687b      	ldr	r3, [r7, #4]
    42d4:	681a      	ldr	r2, [r3, #0]
    42d6:	683b      	ldr	r3, [r7, #0]
    42d8:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    42da:	687b      	ldr	r3, [r7, #4]
    42dc:	683a      	ldr	r2, [r7, #0]
    42de:	601a      	str	r2, [r3, #0]
}
    42e0:	bf00      	nop
    42e2:	370c      	adds	r7, #12
    42e4:	46bd      	mov	sp, r7
    42e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ea:	4770      	bx	lr

000042ec <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    42ec:	b580      	push	{r7, lr}
    42ee:	b084      	sub	sp, #16
    42f0:	af00      	add	r7, sp, #0
    42f2:	6078      	str	r0, [r7, #4]
    42f4:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    42f6:	687b      	ldr	r3, [r7, #4]
    42f8:	681b      	ldr	r3, [r3, #0]
    42fa:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    42fc:	6839      	ldr	r1, [r7, #0]
    42fe:	6878      	ldr	r0, [r7, #4]
    4300:	4b16      	ldr	r3, [pc, #88]	; (435c <list_insert_at_end+0x70>)
    4302:	4798      	blx	r3
    4304:	4603      	mov	r3, r0
    4306:	2b00      	cmp	r3, #0
    4308:	bf14      	ite	ne
    430a:	2301      	movne	r3, #1
    430c:	2300      	moveq	r3, #0
    430e:	b2db      	uxtb	r3, r3
    4310:	f083 0301 	eor.w	r3, r3, #1
    4314:	b2db      	uxtb	r3, r3
    4316:	f003 0301 	and.w	r3, r3, #1
    431a:	b2db      	uxtb	r3, r3
    431c:	224f      	movs	r2, #79	; 0x4f
    431e:	4910      	ldr	r1, [pc, #64]	; (4360 <list_insert_at_end+0x74>)
    4320:	4618      	mov	r0, r3
    4322:	4b10      	ldr	r3, [pc, #64]	; (4364 <list_insert_at_end+0x78>)
    4324:	4798      	blx	r3

	if (!list->head) {
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	2b00      	cmp	r3, #0
    432c:	d109      	bne.n	4342 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    432e:	687b      	ldr	r3, [r7, #4]
    4330:	683a      	ldr	r2, [r7, #0]
    4332:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    4334:	683b      	ldr	r3, [r7, #0]
    4336:	2200      	movs	r2, #0
    4338:	601a      	str	r2, [r3, #0]
		return;
    433a:	e00c      	b.n	4356 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    433c:	68fb      	ldr	r3, [r7, #12]
    433e:	681b      	ldr	r3, [r3, #0]
    4340:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    4342:	68fb      	ldr	r3, [r7, #12]
    4344:	681b      	ldr	r3, [r3, #0]
    4346:	2b00      	cmp	r3, #0
    4348:	d1f8      	bne.n	433c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    434a:	68fb      	ldr	r3, [r7, #12]
    434c:	683a      	ldr	r2, [r7, #0]
    434e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    4350:	683b      	ldr	r3, [r7, #0]
    4352:	2200      	movs	r2, #0
    4354:	601a      	str	r2, [r3, #0]
}
    4356:	3710      	adds	r7, #16
    4358:	46bd      	mov	sp, r7
    435a:	bd80      	pop	{r7, pc}
    435c:	00004239 	.word	0x00004239
    4360:	0001476c 	.word	0x0001476c
    4364:	00004211 	.word	0x00004211

00004368 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    4368:	b480      	push	{r7}
    436a:	b085      	sub	sp, #20
    436c:	af00      	add	r7, sp, #0
    436e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    4370:	687b      	ldr	r3, [r7, #4]
    4372:	681b      	ldr	r3, [r3, #0]
    4374:	2b00      	cmp	r3, #0
    4376:	d009      	beq.n	438c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    4378:	687b      	ldr	r3, [r7, #4]
    437a:	681b      	ldr	r3, [r3, #0]
    437c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	681b      	ldr	r3, [r3, #0]
    4382:	681a      	ldr	r2, [r3, #0]
    4384:	687b      	ldr	r3, [r7, #4]
    4386:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    4388:	68fb      	ldr	r3, [r7, #12]
    438a:	e000      	b.n	438e <list_remove_head+0x26>
	}

	return NULL;
    438c:	2300      	movs	r3, #0
}
    438e:	4618      	mov	r0, r3
    4390:	3714      	adds	r7, #20
    4392:	46bd      	mov	sp, r7
    4394:	f85d 7b04 	ldr.w	r7, [sp], #4
    4398:	4770      	bx	lr

0000439a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    439a:	b480      	push	{r7}
    439c:	b085      	sub	sp, #20
    439e:	af00      	add	r7, sp, #0
    43a0:	6078      	str	r0, [r7, #4]
    43a2:	6039      	str	r1, [r7, #0]
	if (!element) {
    43a4:	683b      	ldr	r3, [r7, #0]
    43a6:	2b00      	cmp	r3, #0
    43a8:	d101      	bne.n	43ae <list_delete_element+0x14>
		return false;
    43aa:	2300      	movs	r3, #0
    43ac:	e024      	b.n	43f8 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    43ae:	687b      	ldr	r3, [r7, #4]
    43b0:	681a      	ldr	r2, [r3, #0]
    43b2:	683b      	ldr	r3, [r7, #0]
    43b4:	429a      	cmp	r2, r3
    43b6:	d106      	bne.n	43c6 <list_delete_element+0x2c>
		list->head = list->head->next;
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	681b      	ldr	r3, [r3, #0]
    43bc:	681a      	ldr	r2, [r3, #0]
    43be:	687b      	ldr	r3, [r7, #4]
    43c0:	601a      	str	r2, [r3, #0]
		return true;
    43c2:	2301      	movs	r3, #1
    43c4:	e018      	b.n	43f8 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    43c6:	687b      	ldr	r3, [r7, #4]
    43c8:	681b      	ldr	r3, [r3, #0]
    43ca:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    43cc:	e002      	b.n	43d4 <list_delete_element+0x3a>
			it = it->next;
    43ce:	68fb      	ldr	r3, [r7, #12]
    43d0:	681b      	ldr	r3, [r3, #0]
    43d2:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    43d4:	68fb      	ldr	r3, [r7, #12]
    43d6:	2b00      	cmp	r3, #0
    43d8:	d004      	beq.n	43e4 <list_delete_element+0x4a>
    43da:	68fb      	ldr	r3, [r7, #12]
    43dc:	681a      	ldr	r2, [r3, #0]
    43de:	683b      	ldr	r3, [r7, #0]
    43e0:	429a      	cmp	r2, r3
    43e2:	d1f4      	bne.n	43ce <list_delete_element+0x34>
		}
		if (it) {
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	2b00      	cmp	r3, #0
    43e8:	d005      	beq.n	43f6 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    43ea:	683b      	ldr	r3, [r7, #0]
    43ec:	681a      	ldr	r2, [r3, #0]
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	601a      	str	r2, [r3, #0]
			return true;
    43f2:	2301      	movs	r3, #1
    43f4:	e000      	b.n	43f8 <list_delete_element+0x5e>
		}
	}

	return false;
    43f6:	2300      	movs	r3, #0
}
    43f8:	4618      	mov	r0, r3
    43fa:	3714      	adds	r7, #20
    43fc:	46bd      	mov	sp, r7
    43fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4402:	4770      	bx	lr

00004404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4404:	b480      	push	{r7}
    4406:	b083      	sub	sp, #12
    4408:	af00      	add	r7, sp, #0
    440a:	4603      	mov	r3, r0
    440c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    440e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4412:	2b00      	cmp	r3, #0
    4414:	db0b      	blt.n	442e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4416:	4909      	ldr	r1, [pc, #36]	; (443c <__NVIC_EnableIRQ+0x38>)
    4418:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    441c:	095b      	lsrs	r3, r3, #5
    441e:	88fa      	ldrh	r2, [r7, #6]
    4420:	f002 021f 	and.w	r2, r2, #31
    4424:	2001      	movs	r0, #1
    4426:	fa00 f202 	lsl.w	r2, r0, r2
    442a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    442e:	bf00      	nop
    4430:	370c      	adds	r7, #12
    4432:	46bd      	mov	sp, r7
    4434:	f85d 7b04 	ldr.w	r7, [sp], #4
    4438:	4770      	bx	lr
    443a:	bf00      	nop
    443c:	e000e100 	.word	0xe000e100

00004440 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4440:	b480      	push	{r7}
    4442:	b083      	sub	sp, #12
    4444:	af00      	add	r7, sp, #0
    4446:	4603      	mov	r3, r0
    4448:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    444a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    444e:	2b00      	cmp	r3, #0
    4450:	db10      	blt.n	4474 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4452:	490b      	ldr	r1, [pc, #44]	; (4480 <__NVIC_DisableIRQ+0x40>)
    4454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4458:	095b      	lsrs	r3, r3, #5
    445a:	88fa      	ldrh	r2, [r7, #6]
    445c:	f002 021f 	and.w	r2, r2, #31
    4460:	2001      	movs	r0, #1
    4462:	fa00 f202 	lsl.w	r2, r0, r2
    4466:	3320      	adds	r3, #32
    4468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    446c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4470:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4474:	bf00      	nop
    4476:	370c      	adds	r7, #12
    4478:	46bd      	mov	sp, r7
    447a:	f85d 7b04 	ldr.w	r7, [sp], #4
    447e:	4770      	bx	lr
    4480:	e000e100 	.word	0xe000e100

00004484 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4484:	b480      	push	{r7}
    4486:	b083      	sub	sp, #12
    4488:	af00      	add	r7, sp, #0
    448a:	4603      	mov	r3, r0
    448c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    448e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4492:	2b00      	cmp	r3, #0
    4494:	db0c      	blt.n	44b0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4496:	4909      	ldr	r1, [pc, #36]	; (44bc <__NVIC_ClearPendingIRQ+0x38>)
    4498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    449c:	095b      	lsrs	r3, r3, #5
    449e:	88fa      	ldrh	r2, [r7, #6]
    44a0:	f002 021f 	and.w	r2, r2, #31
    44a4:	2001      	movs	r0, #1
    44a6:	fa00 f202 	lsl.w	r2, r0, r2
    44aa:	3360      	adds	r3, #96	; 0x60
    44ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    44b0:	bf00      	nop
    44b2:	370c      	adds	r7, #12
    44b4:	46bd      	mov	sp, r7
    44b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ba:	4770      	bx	lr
    44bc:	e000e100 	.word	0xe000e100

000044c0 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    44c0:	b480      	push	{r7}
    44c2:	b083      	sub	sp, #12
    44c4:	af00      	add	r7, sp, #0
    44c6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    44c8:	687b      	ldr	r3, [r7, #4]
    44ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    44cc:	095b      	lsrs	r3, r3, #5
    44ce:	f003 0301 	and.w	r3, r3, #1
    44d2:	2b00      	cmp	r3, #0
    44d4:	bf14      	ite	ne
    44d6:	2301      	movne	r3, #1
    44d8:	2300      	moveq	r3, #0
    44da:	b2db      	uxtb	r3, r3
}
    44dc:	4618      	mov	r0, r3
    44de:	370c      	adds	r7, #12
    44e0:	46bd      	mov	sp, r7
    44e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    44e6:	4770      	bx	lr

000044e8 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    44e8:	b480      	push	{r7}
    44ea:	b083      	sub	sp, #12
    44ec:	af00      	add	r7, sp, #0
    44ee:	6078      	str	r0, [r7, #4]
    44f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    44f2:	687b      	ldr	r3, [r7, #4]
    44f4:	683a      	ldr	r2, [r7, #0]
    44f6:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    44f8:	bf00      	nop
    44fa:	370c      	adds	r7, #12
    44fc:	46bd      	mov	sp, r7
    44fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4502:	4770      	bx	lr

00004504 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    4504:	b480      	push	{r7}
    4506:	b083      	sub	sp, #12
    4508:	af00      	add	r7, sp, #0
    450a:	6078      	str	r0, [r7, #4]
    450c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    450e:	687b      	ldr	r3, [r7, #4]
    4510:	683a      	ldr	r2, [r7, #0]
    4512:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4514:	bf00      	nop
    4516:	370c      	adds	r7, #12
    4518:	46bd      	mov	sp, r7
    451a:	f85d 7b04 	ldr.w	r7, [sp], #4
    451e:	4770      	bx	lr

00004520 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    4520:	b480      	push	{r7}
    4522:	b083      	sub	sp, #12
    4524:	af00      	add	r7, sp, #0
    4526:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    4528:	687b      	ldr	r3, [r7, #4]
    452a:	699b      	ldr	r3, [r3, #24]
    452c:	f043 0201 	orr.w	r2, r3, #1
    4530:	687b      	ldr	r3, [r7, #4]
    4532:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4534:	bf00      	nop
    4536:	370c      	adds	r7, #12
    4538:	46bd      	mov	sp, r7
    453a:	f85d 7b04 	ldr.w	r7, [sp], #4
    453e:	4770      	bx	lr

00004540 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    4540:	b480      	push	{r7}
    4542:	b085      	sub	sp, #20
    4544:	af00      	add	r7, sp, #0
    4546:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    4548:	687b      	ldr	r3, [r7, #4]
    454a:	699b      	ldr	r3, [r3, #24]
    454c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    454e:	68fb      	ldr	r3, [r7, #12]
    4550:	f003 0301 	and.w	r3, r3, #1
    4554:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    4556:	68fb      	ldr	r3, [r7, #12]
    4558:	2b00      	cmp	r3, #0
    455a:	bf14      	ite	ne
    455c:	2301      	movne	r3, #1
    455e:	2300      	moveq	r3, #0
    4560:	b2db      	uxtb	r3, r3
}
    4562:	4618      	mov	r0, r3
    4564:	3714      	adds	r7, #20
    4566:	46bd      	mov	sp, r7
    4568:	f85d 7b04 	ldr.w	r7, [sp], #4
    456c:	4770      	bx	lr

0000456e <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    456e:	b480      	push	{r7}
    4570:	b083      	sub	sp, #12
    4572:	af00      	add	r7, sp, #0
    4574:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    4576:	687b      	ldr	r3, [r7, #4]
    4578:	699b      	ldr	r3, [r3, #24]
    457a:	f023 0201 	bic.w	r2, r3, #1
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4582:	bf00      	nop
    4584:	370c      	adds	r7, #12
    4586:	46bd      	mov	sp, r7
    4588:	f85d 7b04 	ldr.w	r7, [sp], #4
    458c:	4770      	bx	lr

0000458e <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    458e:	b480      	push	{r7}
    4590:	b083      	sub	sp, #12
    4592:	af00      	add	r7, sp, #0
    4594:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    4596:	687b      	ldr	r3, [r7, #4]
    4598:	699b      	ldr	r3, [r3, #24]
    459a:	f043 0202 	orr.w	r2, r3, #2
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    45a2:	bf00      	nop
    45a4:	370c      	adds	r7, #12
    45a6:	46bd      	mov	sp, r7
    45a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    45ac:	4770      	bx	lr

000045ae <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    45ae:	b480      	push	{r7}
    45b0:	b083      	sub	sp, #12
    45b2:	af00      	add	r7, sp, #0
    45b4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	699b      	ldr	r3, [r3, #24]
    45ba:	f023 0202 	bic.w	r2, r3, #2
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    45c2:	bf00      	nop
    45c4:	370c      	adds	r7, #12
    45c6:	46bd      	mov	sp, r7
    45c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    45cc:	4770      	bx	lr

000045ce <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    45ce:	b480      	push	{r7}
    45d0:	b083      	sub	sp, #12
    45d2:	af00      	add	r7, sp, #0
    45d4:	6078      	str	r0, [r7, #4]
    45d6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    45d8:	687b      	ldr	r3, [r7, #4]
    45da:	699a      	ldr	r2, [r3, #24]
    45dc:	683b      	ldr	r3, [r7, #0]
    45de:	431a      	orrs	r2, r3
    45e0:	687b      	ldr	r3, [r7, #4]
    45e2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    45e4:	bf00      	nop
    45e6:	370c      	adds	r7, #12
    45e8:	46bd      	mov	sp, r7
    45ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    45ee:	4770      	bx	lr

000045f0 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    45f0:	b480      	push	{r7}
    45f2:	b083      	sub	sp, #12
    45f4:	af00      	add	r7, sp, #0
    45f6:	6078      	str	r0, [r7, #4]
    45f8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    45fa:	687b      	ldr	r3, [r7, #4]
    45fc:	683a      	ldr	r2, [r7, #0]
    45fe:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4600:	bf00      	nop
    4602:	370c      	adds	r7, #12
    4604:	46bd      	mov	sp, r7
    4606:	f85d 7b04 	ldr.w	r7, [sp], #4
    460a:	4770      	bx	lr

0000460c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    460c:	b480      	push	{r7}
    460e:	b083      	sub	sp, #12
    4610:	af00      	add	r7, sp, #0
    4612:	6078      	str	r0, [r7, #4]
    4614:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	683a      	ldr	r2, [r7, #0]
    461a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    461c:	bf00      	nop
    461e:	370c      	adds	r7, #12
    4620:	46bd      	mov	sp, r7
    4622:	f85d 7b04 	ldr.w	r7, [sp], #4
    4626:	4770      	bx	lr

00004628 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    4628:	b480      	push	{r7}
    462a:	b083      	sub	sp, #12
    462c:	af00      	add	r7, sp, #0
    462e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    4630:	687b      	ldr	r3, [r7, #4]
    4632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    4634:	4618      	mov	r0, r3
    4636:	370c      	adds	r7, #12
    4638:	46bd      	mov	sp, r7
    463a:	f85d 7b04 	ldr.w	r7, [sp], #4
    463e:	4770      	bx	lr

00004640 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    4640:	b480      	push	{r7}
    4642:	b083      	sub	sp, #12
    4644:	af00      	add	r7, sp, #0
    4646:	6078      	str	r0, [r7, #4]
    4648:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	683a      	ldr	r2, [r7, #0]
    464e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    4650:	bf00      	nop
    4652:	370c      	adds	r7, #12
    4654:	46bd      	mov	sp, r7
    4656:	f85d 7b04 	ldr.w	r7, [sp], #4
    465a:	4770      	bx	lr

0000465c <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    465c:	b480      	push	{r7}
    465e:	b083      	sub	sp, #12
    4660:	af00      	add	r7, sp, #0
    4662:	6078      	str	r0, [r7, #4]
    4664:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    4666:	687b      	ldr	r3, [r7, #4]
    4668:	683a      	ldr	r2, [r7, #0]
    466a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    466e:	bf00      	nop
    4670:	370c      	adds	r7, #12
    4672:	46bd      	mov	sp, r7
    4674:	f85d 7b04 	ldr.w	r7, [sp], #4
    4678:	4770      	bx	lr

0000467a <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    467a:	b480      	push	{r7}
    467c:	b083      	sub	sp, #12
    467e:	af00      	add	r7, sp, #0
    4680:	6078      	str	r0, [r7, #4]
    4682:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    4684:	687b      	ldr	r3, [r7, #4]
    4686:	683a      	ldr	r2, [r7, #0]
    4688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    468c:	bf00      	nop
    468e:	370c      	adds	r7, #12
    4690:	46bd      	mov	sp, r7
    4692:	f85d 7b04 	ldr.w	r7, [sp], #4
    4696:	4770      	bx	lr

00004698 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    4698:	b480      	push	{r7}
    469a:	b083      	sub	sp, #12
    469c:	af00      	add	r7, sp, #0
    469e:	6078      	str	r0, [r7, #4]
    46a0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    46a2:	687b      	ldr	r3, [r7, #4]
    46a4:	683a      	ldr	r2, [r7, #0]
    46a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    46aa:	bf00      	nop
    46ac:	370c      	adds	r7, #12
    46ae:	46bd      	mov	sp, r7
    46b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    46b4:	4770      	bx	lr

000046b6 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    46b6:	b480      	push	{r7}
    46b8:	b083      	sub	sp, #12
    46ba:	af00      	add	r7, sp, #0
    46bc:	6078      	str	r0, [r7, #4]
    46be:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    46c0:	687b      	ldr	r3, [r7, #4]
    46c2:	683a      	ldr	r2, [r7, #0]
    46c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    46c8:	bf00      	nop
    46ca:	370c      	adds	r7, #12
    46cc:	46bd      	mov	sp, r7
    46ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    46d2:	4770      	bx	lr

000046d4 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    46d4:	b480      	push	{r7}
    46d6:	b083      	sub	sp, #12
    46d8:	af00      	add	r7, sp, #0
    46da:	6078      	str	r0, [r7, #4]
    46dc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    46de:	687b      	ldr	r3, [r7, #4]
    46e0:	683a      	ldr	r2, [r7, #0]
    46e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    46e6:	bf00      	nop
    46e8:	370c      	adds	r7, #12
    46ea:	46bd      	mov	sp, r7
    46ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    46f0:	4770      	bx	lr

000046f2 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    46f2:	b480      	push	{r7}
    46f4:	b083      	sub	sp, #12
    46f6:	af00      	add	r7, sp, #0
    46f8:	6078      	str	r0, [r7, #4]
    46fa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    46fc:	687b      	ldr	r3, [r7, #4]
    46fe:	683a      	ldr	r2, [r7, #0]
    4700:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    4704:	bf00      	nop
    4706:	370c      	adds	r7, #12
    4708:	46bd      	mov	sp, r7
    470a:	f85d 7b04 	ldr.w	r7, [sp], #4
    470e:	4770      	bx	lr

00004710 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    4710:	b480      	push	{r7}
    4712:	b083      	sub	sp, #12
    4714:	af00      	add	r7, sp, #0
    4716:	6078      	str	r0, [r7, #4]
    4718:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    471a:	687b      	ldr	r3, [r7, #4]
    471c:	683a      	ldr	r2, [r7, #0]
    471e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4722:	bf00      	nop
    4724:	370c      	adds	r7, #12
    4726:	46bd      	mov	sp, r7
    4728:	f85d 7b04 	ldr.w	r7, [sp], #4
    472c:	4770      	bx	lr

0000472e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    472e:	b480      	push	{r7}
    4730:	b083      	sub	sp, #12
    4732:	af00      	add	r7, sp, #0
    4734:	6078      	str	r0, [r7, #4]
    4736:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	683a      	ldr	r2, [r7, #0]
    473c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    4740:	bf00      	nop
    4742:	370c      	adds	r7, #12
    4744:	46bd      	mov	sp, r7
    4746:	f85d 7b04 	ldr.w	r7, [sp], #4
    474a:	4770      	bx	lr

0000474c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    474c:	b480      	push	{r7}
    474e:	b083      	sub	sp, #12
    4750:	af00      	add	r7, sp, #0
    4752:	6078      	str	r0, [r7, #4]
    4754:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    4756:	687b      	ldr	r3, [r7, #4]
    4758:	683a      	ldr	r2, [r7, #0]
    475a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    475e:	bf00      	nop
    4760:	370c      	adds	r7, #12
    4762:	46bd      	mov	sp, r7
    4764:	f85d 7b04 	ldr.w	r7, [sp], #4
    4768:	4770      	bx	lr
	...

0000476c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    476c:	b580      	push	{r7, lr}
    476e:	b082      	sub	sp, #8
    4770:	af00      	add	r7, sp, #0
    4772:	6078      	str	r0, [r7, #4]
    4774:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    4776:	687b      	ldr	r3, [r7, #4]
    4778:	683a      	ldr	r2, [r7, #0]
    477a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    477c:	687b      	ldr	r3, [r7, #4]
    477e:	681b      	ldr	r3, [r3, #0]
    4780:	4618      	mov	r0, r3
    4782:	4b56      	ldr	r3, [pc, #344]	; (48dc <_can_async_init+0x170>)
    4784:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    4786:	bf00      	nop
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	681b      	ldr	r3, [r3, #0]
    478c:	4618      	mov	r0, r3
    478e:	4b54      	ldr	r3, [pc, #336]	; (48e0 <_can_async_init+0x174>)
    4790:	4798      	blx	r3
    4792:	4603      	mov	r3, r0
    4794:	f083 0301 	eor.w	r3, r3, #1
    4798:	b2db      	uxtb	r3, r3
    479a:	2b00      	cmp	r3, #0
    479c:	d1f4      	bne.n	4788 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    479e:	687b      	ldr	r3, [r7, #4]
    47a0:	681b      	ldr	r3, [r3, #0]
    47a2:	4618      	mov	r0, r3
    47a4:	4b4f      	ldr	r3, [pc, #316]	; (48e4 <_can_async_init+0x178>)
    47a6:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    47a8:	683b      	ldr	r3, [r7, #0]
    47aa:	4a4f      	ldr	r2, [pc, #316]	; (48e8 <_can_async_init+0x17c>)
    47ac:	4293      	cmp	r3, r2
    47ae:	d17c      	bne.n	48aa <_can_async_init+0x13e>
		_can1_dev    = dev;
    47b0:	4a4e      	ldr	r2, [pc, #312]	; (48ec <_can_async_init+0x180>)
    47b2:	687b      	ldr	r3, [r7, #4]
    47b4:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    47b6:	687b      	ldr	r3, [r7, #4]
    47b8:	4a4d      	ldr	r2, [pc, #308]	; (48f0 <_can_async_init+0x184>)
    47ba:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    47bc:	687b      	ldr	r3, [r7, #4]
    47be:	681b      	ldr	r3, [r3, #0]
    47c0:	f44f 7100 	mov.w	r1, #512	; 0x200
    47c4:	4618      	mov	r0, r3
    47c6:	4b4b      	ldr	r3, [pc, #300]	; (48f4 <_can_async_init+0x188>)
    47c8:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	681b      	ldr	r3, [r3, #0]
    47ce:	2102      	movs	r1, #2
    47d0:	4618      	mov	r0, r3
    47d2:	4b49      	ldr	r3, [pc, #292]	; (48f8 <_can_async_init+0x18c>)
    47d4:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    47d6:	687b      	ldr	r3, [r7, #4]
    47d8:	681b      	ldr	r3, [r3, #0]
    47da:	f640 2103 	movw	r1, #2563	; 0xa03
    47de:	4618      	mov	r0, r3
    47e0:	4b46      	ldr	r3, [pc, #280]	; (48fc <_can_async_init+0x190>)
    47e2:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    47e4:	687b      	ldr	r3, [r7, #4]
    47e6:	681b      	ldr	r3, [r3, #0]
    47e8:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    47ec:	4618      	mov	r0, r3
    47ee:	4b44      	ldr	r3, [pc, #272]	; (4900 <_can_async_init+0x194>)
    47f0:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    47f2:	687b      	ldr	r3, [r7, #4]
    47f4:	681a      	ldr	r2, [r3, #0]
    47f6:	4b43      	ldr	r3, [pc, #268]	; (4904 <_can_async_init+0x198>)
    47f8:	b29b      	uxth	r3, r3
    47fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    47fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4802:	4619      	mov	r1, r3
    4804:	4610      	mov	r0, r2
    4806:	4b40      	ldr	r3, [pc, #256]	; (4908 <_can_async_init+0x19c>)
    4808:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	681b      	ldr	r3, [r3, #0]
    480e:	2107      	movs	r1, #7
    4810:	4618      	mov	r0, r3
    4812:	4b3e      	ldr	r3, [pc, #248]	; (490c <_can_async_init+0x1a0>)
    4814:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    4816:	687b      	ldr	r3, [r7, #4]
    4818:	681b      	ldr	r3, [r3, #0]
    481a:	2107      	movs	r1, #7
    481c:	4618      	mov	r0, r3
    481e:	4b3c      	ldr	r3, [pc, #240]	; (4910 <_can_async_init+0x1a4>)
    4820:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    4822:	687b      	ldr	r3, [r7, #4]
    4824:	681a      	ldr	r2, [r3, #0]
    4826:	4b3b      	ldr	r3, [pc, #236]	; (4914 <_can_async_init+0x1a8>)
    4828:	b29b      	uxth	r3, r3
    482a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    482e:	4619      	mov	r1, r3
    4830:	4610      	mov	r0, r2
    4832:	4b39      	ldr	r3, [pc, #228]	; (4918 <_can_async_init+0x1ac>)
    4834:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    4836:	687b      	ldr	r3, [r7, #4]
    4838:	681a      	ldr	r2, [r3, #0]
    483a:	4b38      	ldr	r3, [pc, #224]	; (491c <_can_async_init+0x1b0>)
    483c:	b29b      	uxth	r3, r3
    483e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4842:	4619      	mov	r1, r3
    4844:	4610      	mov	r0, r2
    4846:	4b36      	ldr	r3, [pc, #216]	; (4920 <_can_async_init+0x1b4>)
    4848:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    484a:	687b      	ldr	r3, [r7, #4]
    484c:	681b      	ldr	r3, [r3, #0]
    484e:	2108      	movs	r1, #8
    4850:	4618      	mov	r0, r3
    4852:	4b34      	ldr	r3, [pc, #208]	; (4924 <_can_async_init+0x1b8>)
    4854:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    4856:	687b      	ldr	r3, [r7, #4]
    4858:	681a      	ldr	r2, [r3, #0]
    485a:	4b33      	ldr	r3, [pc, #204]	; (4928 <_can_async_init+0x1bc>)
    485c:	b29b      	uxth	r3, r3
    485e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    4862:	4619      	mov	r1, r3
    4864:	4610      	mov	r0, r2
    4866:	4b31      	ldr	r3, [pc, #196]	; (492c <_can_async_init+0x1c0>)
    4868:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    486a:	687b      	ldr	r3, [r7, #4]
    486c:	681a      	ldr	r2, [r3, #0]
    486e:	4b30      	ldr	r3, [pc, #192]	; (4930 <_can_async_init+0x1c4>)
    4870:	b29b      	uxth	r3, r3
    4872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4876:	4619      	mov	r1, r3
    4878:	4610      	mov	r0, r2
    487a:	4b2e      	ldr	r3, [pc, #184]	; (4934 <_can_async_init+0x1c8>)
    487c:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    487e:	687b      	ldr	r3, [r7, #4]
    4880:	681b      	ldr	r3, [r3, #0]
    4882:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    4886:	4618      	mov	r0, r3
    4888:	4b2b      	ldr	r3, [pc, #172]	; (4938 <_can_async_init+0x1cc>)
    488a:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    488c:	204f      	movs	r0, #79	; 0x4f
    488e:	4b2b      	ldr	r3, [pc, #172]	; (493c <_can_async_init+0x1d0>)
    4890:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    4892:	204f      	movs	r0, #79	; 0x4f
    4894:	4b2a      	ldr	r3, [pc, #168]	; (4940 <_can_async_init+0x1d4>)
    4896:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4898:	204f      	movs	r0, #79	; 0x4f
    489a:	4b2a      	ldr	r3, [pc, #168]	; (4944 <_can_async_init+0x1d8>)
    489c:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    489e:	687b      	ldr	r3, [r7, #4]
    48a0:	681b      	ldr	r3, [r3, #0]
    48a2:	2101      	movs	r1, #1
    48a4:	4618      	mov	r0, r3
    48a6:	4b28      	ldr	r3, [pc, #160]	; (4948 <_can_async_init+0x1dc>)
    48a8:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	681b      	ldr	r3, [r3, #0]
    48ae:	4618      	mov	r0, r3
    48b0:	4b26      	ldr	r3, [pc, #152]	; (494c <_can_async_init+0x1e0>)
    48b2:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    48b4:	687b      	ldr	r3, [r7, #4]
    48b6:	681b      	ldr	r3, [r3, #0]
    48b8:	4618      	mov	r0, r3
    48ba:	4b25      	ldr	r3, [pc, #148]	; (4950 <_can_async_init+0x1e4>)
    48bc:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    48be:	bf00      	nop
    48c0:	687b      	ldr	r3, [r7, #4]
    48c2:	681b      	ldr	r3, [r3, #0]
    48c4:	4618      	mov	r0, r3
    48c6:	4b06      	ldr	r3, [pc, #24]	; (48e0 <_can_async_init+0x174>)
    48c8:	4798      	blx	r3
    48ca:	4603      	mov	r3, r0
    48cc:	2b00      	cmp	r3, #0
    48ce:	d1f7      	bne.n	48c0 <_can_async_init+0x154>
	};

	return ERR_NONE;
    48d0:	2300      	movs	r3, #0
}
    48d2:	4618      	mov	r0, r3
    48d4:	3708      	adds	r7, #8
    48d6:	46bd      	mov	sp, r7
    48d8:	bd80      	pop	{r7, pc}
    48da:	bf00      	nop
    48dc:	00004521 	.word	0x00004521
    48e0:	00004541 	.word	0x00004541
    48e4:	0000458f 	.word	0x0000458f
    48e8:	42000400 	.word	0x42000400
    48ec:	20000e94 	.word	0x20000e94
    48f0:	20000004 	.word	0x20000004
    48f4:	000045cf 	.word	0x000045cf
    48f8:	000044e9 	.word	0x000044e9
    48fc:	000045f1 	.word	0x000045f1
    4900:	00004505 	.word	0x00004505
    4904:	2000a408 	.word	0x2000a408
    4908:	000046d5 	.word	0x000046d5
    490c:	000046f3 	.word	0x000046f3
    4910:	0000472f 	.word	0x0000472f
    4914:	2000a3c0 	.word	0x2000a3c0
    4918:	00004711 	.word	0x00004711
    491c:	20000df4 	.word	0x20000df4
    4920:	0000474d 	.word	0x0000474d
    4924:	0000465d 	.word	0x0000465d
    4928:	20000e04 	.word	0x20000e04
    492c:	0000467b 	.word	0x0000467b
    4930:	20000e84 	.word	0x20000e84
    4934:	00004699 	.word	0x00004699
    4938:	000046b7 	.word	0x000046b7
    493c:	00004441 	.word	0x00004441
    4940:	00004485 	.word	0x00004485
    4944:	00004405 	.word	0x00004405
    4948:	00004641 	.word	0x00004641
    494c:	000045af 	.word	0x000045af
    4950:	0000456f 	.word	0x0000456f

00004954 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    4954:	b590      	push	{r4, r7, lr}
    4956:	b083      	sub	sp, #12
    4958:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    495a:	4b2c      	ldr	r3, [pc, #176]	; (4a0c <CAN1_Handler+0xb8>)
    495c:	681b      	ldr	r3, [r3, #0]
    495e:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4960:	687b      	ldr	r3, [r7, #4]
    4962:	681b      	ldr	r3, [r3, #0]
    4964:	4618      	mov	r0, r3
    4966:	4b2a      	ldr	r3, [pc, #168]	; (4a10 <CAN1_Handler+0xbc>)
    4968:	4798      	blx	r3
    496a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    496c:	683b      	ldr	r3, [r7, #0]
    496e:	f003 0301 	and.w	r3, r3, #1
    4972:	2b00      	cmp	r3, #0
    4974:	d003      	beq.n	497e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    4976:	687b      	ldr	r3, [r7, #4]
    4978:	689b      	ldr	r3, [r3, #8]
    497a:	6878      	ldr	r0, [r7, #4]
    497c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    497e:	683b      	ldr	r3, [r7, #0]
    4980:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4984:	2b00      	cmp	r3, #0
    4986:	d003      	beq.n	4990 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4988:	687b      	ldr	r3, [r7, #4]
    498a:	685b      	ldr	r3, [r3, #4]
    498c:	6878      	ldr	r0, [r7, #4]
    498e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4990:	683b      	ldr	r3, [r7, #0]
    4992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4996:	2b00      	cmp	r3, #0
    4998:	d004      	beq.n	49a4 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    499a:	687b      	ldr	r3, [r7, #4]
    499c:	68db      	ldr	r3, [r3, #12]
    499e:	2103      	movs	r1, #3
    49a0:	6878      	ldr	r0, [r7, #4]
    49a2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    49a4:	683b      	ldr	r3, [r7, #0]
    49a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    49aa:	2b00      	cmp	r3, #0
    49ac:	d004      	beq.n	49b8 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    49ae:	687b      	ldr	r3, [r7, #4]
    49b0:	68db      	ldr	r3, [r3, #12]
    49b2:	2100      	movs	r1, #0
    49b4:	6878      	ldr	r0, [r7, #4]
    49b6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    49b8:	683b      	ldr	r3, [r7, #0]
    49ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    49be:	2b00      	cmp	r3, #0
    49c0:	d00f      	beq.n	49e2 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    49c2:	687b      	ldr	r3, [r7, #4]
    49c4:	68dc      	ldr	r4, [r3, #12]
    49c6:	687b      	ldr	r3, [r7, #4]
    49c8:	681b      	ldr	r3, [r3, #0]
    49ca:	4618      	mov	r0, r3
    49cc:	4b11      	ldr	r3, [pc, #68]	; (4a14 <CAN1_Handler+0xc0>)
    49ce:	4798      	blx	r3
    49d0:	4603      	mov	r3, r0
    49d2:	2b00      	cmp	r3, #0
    49d4:	d001      	beq.n	49da <CAN1_Handler+0x86>
    49d6:	2302      	movs	r3, #2
    49d8:	e000      	b.n	49dc <CAN1_Handler+0x88>
    49da:	2301      	movs	r3, #1
    49dc:	4619      	mov	r1, r3
    49de:	6878      	ldr	r0, [r7, #4]
    49e0:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    49e2:	683b      	ldr	r3, [r7, #0]
    49e4:	f003 0308 	and.w	r3, r3, #8
    49e8:	2b00      	cmp	r3, #0
    49ea:	d004      	beq.n	49f6 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    49ec:	687b      	ldr	r3, [r7, #4]
    49ee:	68db      	ldr	r3, [r3, #12]
    49f0:	2104      	movs	r1, #4
    49f2:	6878      	ldr	r0, [r7, #4]
    49f4:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    49f6:	687b      	ldr	r3, [r7, #4]
    49f8:	681b      	ldr	r3, [r3, #0]
    49fa:	6839      	ldr	r1, [r7, #0]
    49fc:	4618      	mov	r0, r3
    49fe:	4b06      	ldr	r3, [pc, #24]	; (4a18 <CAN1_Handler+0xc4>)
    4a00:	4798      	blx	r3
}
    4a02:	bf00      	nop
    4a04:	370c      	adds	r7, #12
    4a06:	46bd      	mov	sp, r7
    4a08:	bd90      	pop	{r4, r7, pc}
    4a0a:	bf00      	nop
    4a0c:	20000e94 	.word	0x20000e94
    4a10:	00004629 	.word	0x00004629
    4a14:	000044c1 	.word	0x000044c1
    4a18:	0000460d 	.word	0x0000460d

00004a1c <__NVIC_SetPendingIRQ>:
{
    4a1c:	b480      	push	{r7}
    4a1e:	b083      	sub	sp, #12
    4a20:	af00      	add	r7, sp, #0
    4a22:	4603      	mov	r3, r0
    4a24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	db0c      	blt.n	4a48 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a2e:	4909      	ldr	r1, [pc, #36]	; (4a54 <__NVIC_SetPendingIRQ+0x38>)
    4a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4a34:	095b      	lsrs	r3, r3, #5
    4a36:	88fa      	ldrh	r2, [r7, #6]
    4a38:	f002 021f 	and.w	r2, r2, #31
    4a3c:	2001      	movs	r0, #1
    4a3e:	fa00 f202 	lsl.w	r2, r0, r2
    4a42:	3340      	adds	r3, #64	; 0x40
    4a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4a48:	bf00      	nop
    4a4a:	370c      	adds	r7, #12
    4a4c:	46bd      	mov	sp, r7
    4a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a52:	4770      	bx	lr
    4a54:	e000e100 	.word	0xe000e100

00004a58 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    4a58:	b580      	push	{r7, lr}
    4a5a:	b082      	sub	sp, #8
    4a5c:	af00      	add	r7, sp, #0
    4a5e:	4603      	mov	r3, r0
    4a60:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    4a62:	79fb      	ldrb	r3, [r7, #7]
    4a64:	b21b      	sxth	r3, r3
    4a66:	4618      	mov	r0, r3
    4a68:	4b02      	ldr	r3, [pc, #8]	; (4a74 <_irq_set+0x1c>)
    4a6a:	4798      	blx	r3
}
    4a6c:	bf00      	nop
    4a6e:	3708      	adds	r7, #8
    4a70:	46bd      	mov	sp, r7
    4a72:	bd80      	pop	{r7, pc}
    4a74:	00004a1d 	.word	0x00004a1d

00004a78 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4a78:	b480      	push	{r7}
    4a7a:	b083      	sub	sp, #12
    4a7c:	af00      	add	r7, sp, #0
    4a7e:	4603      	mov	r3, r0
    4a80:	6039      	str	r1, [r7, #0]
    4a82:	80fb      	strh	r3, [r7, #6]
    4a84:	4613      	mov	r3, r2
    4a86:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4a88:	797b      	ldrb	r3, [r7, #5]
    4a8a:	3b04      	subs	r3, #4
    4a8c:	2b05      	cmp	r3, #5
    4a8e:	d86b      	bhi.n	4b68 <_get_cycles_for_us_internal+0xf0>
    4a90:	a201      	add	r2, pc, #4	; (adr r2, 4a98 <_get_cycles_for_us_internal+0x20>)
    4a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4a96:	bf00      	nop
    4a98:	00004b47 	.word	0x00004b47
    4a9c:	00004b27 	.word	0x00004b27
    4aa0:	00004b09 	.word	0x00004b09
    4aa4:	00004aeb 	.word	0x00004aeb
    4aa8:	00004acd 	.word	0x00004acd
    4aac:	00004ab1 	.word	0x00004ab1
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4ab0:	88fb      	ldrh	r3, [r7, #6]
    4ab2:	683a      	ldr	r2, [r7, #0]
    4ab4:	4935      	ldr	r1, [pc, #212]	; (4b8c <_get_cycles_for_us_internal+0x114>)
    4ab6:	fba1 1202 	umull	r1, r2, r1, r2
    4aba:	0c92      	lsrs	r2, r2, #18
    4abc:	fb02 f303 	mul.w	r3, r2, r3
    4ac0:	3302      	adds	r3, #2
    4ac2:	4a33      	ldr	r2, [pc, #204]	; (4b90 <_get_cycles_for_us_internal+0x118>)
    4ac4:	fba2 2303 	umull	r2, r3, r2, r3
    4ac8:	085b      	lsrs	r3, r3, #1
    4aca:	e059      	b.n	4b80 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4acc:	88fb      	ldrh	r3, [r7, #6]
    4ace:	683a      	ldr	r2, [r7, #0]
    4ad0:	0952      	lsrs	r2, r2, #5
    4ad2:	4930      	ldr	r1, [pc, #192]	; (4b94 <_get_cycles_for_us_internal+0x11c>)
    4ad4:	fba1 1202 	umull	r1, r2, r1, r2
    4ad8:	09d2      	lsrs	r2, r2, #7
    4ada:	fb02 f303 	mul.w	r3, r2, r3
    4ade:	331d      	adds	r3, #29
    4ae0:	4a2d      	ldr	r2, [pc, #180]	; (4b98 <_get_cycles_for_us_internal+0x120>)
    4ae2:	fba2 2303 	umull	r2, r3, r2, r3
    4ae6:	091b      	lsrs	r3, r3, #4
    4ae8:	e04a      	b.n	4b80 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    4aea:	88fb      	ldrh	r3, [r7, #6]
    4aec:	683a      	ldr	r2, [r7, #0]
    4aee:	492b      	ldr	r1, [pc, #172]	; (4b9c <_get_cycles_for_us_internal+0x124>)
    4af0:	fba1 1202 	umull	r1, r2, r1, r2
    4af4:	0b52      	lsrs	r2, r2, #13
    4af6:	fb02 f303 	mul.w	r3, r2, r3
    4afa:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4afe:	4a28      	ldr	r2, [pc, #160]	; (4ba0 <_get_cycles_for_us_internal+0x128>)
    4b00:	fba2 2303 	umull	r2, r3, r2, r3
    4b04:	095b      	lsrs	r3, r3, #5
    4b06:	e03b      	b.n	4b80 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4b08:	88fb      	ldrh	r3, [r7, #6]
    4b0a:	683a      	ldr	r2, [r7, #0]
    4b0c:	4925      	ldr	r1, [pc, #148]	; (4ba4 <_get_cycles_for_us_internal+0x12c>)
    4b0e:	fba1 1202 	umull	r1, r2, r1, r2
    4b12:	0992      	lsrs	r2, r2, #6
    4b14:	fb02 f303 	mul.w	r3, r2, r3
    4b18:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4b1c:	4a22      	ldr	r2, [pc, #136]	; (4ba8 <_get_cycles_for_us_internal+0x130>)
    4b1e:	fba2 2303 	umull	r2, r3, r2, r3
    4b22:	099b      	lsrs	r3, r3, #6
    4b24:	e02c      	b.n	4b80 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4b26:	88fb      	ldrh	r3, [r7, #6]
    4b28:	683a      	ldr	r2, [r7, #0]
    4b2a:	4920      	ldr	r1, [pc, #128]	; (4bac <_get_cycles_for_us_internal+0x134>)
    4b2c:	fba1 1202 	umull	r1, r2, r1, r2
    4b30:	0952      	lsrs	r2, r2, #5
    4b32:	fb02 f303 	mul.w	r3, r2, r3
    4b36:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4b3a:	332f      	adds	r3, #47	; 0x2f
    4b3c:	4a1c      	ldr	r2, [pc, #112]	; (4bb0 <_get_cycles_for_us_internal+0x138>)
    4b3e:	fba2 2303 	umull	r2, r3, r2, r3
    4b42:	0b5b      	lsrs	r3, r3, #13
    4b44:	e01c      	b.n	4b80 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    4b46:	88fb      	ldrh	r3, [r7, #6]
    4b48:	683a      	ldr	r2, [r7, #0]
    4b4a:	491a      	ldr	r1, [pc, #104]	; (4bb4 <_get_cycles_for_us_internal+0x13c>)
    4b4c:	fba1 1202 	umull	r1, r2, r1, r2
    4b50:	08d2      	lsrs	r2, r2, #3
    4b52:	fb02 f303 	mul.w	r3, r2, r3
    4b56:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4b5a:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4b5e:	4a16      	ldr	r2, [pc, #88]	; (4bb8 <_get_cycles_for_us_internal+0x140>)
    4b60:	fba2 2303 	umull	r2, r3, r2, r3
    4b64:	0c5b      	lsrs	r3, r3, #17
    4b66:	e00b      	b.n	4b80 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4b68:	88fb      	ldrh	r3, [r7, #6]
    4b6a:	683a      	ldr	r2, [r7, #0]
    4b6c:	fb02 f303 	mul.w	r3, r2, r3
    4b70:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4b74:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4b78:	4a10      	ldr	r2, [pc, #64]	; (4bbc <_get_cycles_for_us_internal+0x144>)
    4b7a:	fba2 2303 	umull	r2, r3, r2, r3
    4b7e:	0c9b      	lsrs	r3, r3, #18
	}
}
    4b80:	4618      	mov	r0, r3
    4b82:	370c      	adds	r7, #12
    4b84:	46bd      	mov	sp, r7
    4b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b8a:	4770      	bx	lr
    4b8c:	431bde83 	.word	0x431bde83
    4b90:	aaaaaaab 	.word	0xaaaaaaab
    4b94:	0a7c5ac5 	.word	0x0a7c5ac5
    4b98:	88888889 	.word	0x88888889
    4b9c:	d1b71759 	.word	0xd1b71759
    4ba0:	1b4e81b5 	.word	0x1b4e81b5
    4ba4:	10624dd3 	.word	0x10624dd3
    4ba8:	057619f1 	.word	0x057619f1
    4bac:	51eb851f 	.word	0x51eb851f
    4bb0:	45e7b273 	.word	0x45e7b273
    4bb4:	cccccccd 	.word	0xcccccccd
    4bb8:	6fd91d85 	.word	0x6fd91d85
    4bbc:	165e9f81 	.word	0x165e9f81

00004bc0 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4bc0:	b580      	push	{r7, lr}
    4bc2:	b082      	sub	sp, #8
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	4603      	mov	r3, r0
    4bc8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4bca:	88fb      	ldrh	r3, [r7, #6]
    4bcc:	2209      	movs	r2, #9
    4bce:	4904      	ldr	r1, [pc, #16]	; (4be0 <_get_cycles_for_us+0x20>)
    4bd0:	4618      	mov	r0, r3
    4bd2:	4b04      	ldr	r3, [pc, #16]	; (4be4 <_get_cycles_for_us+0x24>)
    4bd4:	4798      	blx	r3
    4bd6:	4603      	mov	r3, r0
}
    4bd8:	4618      	mov	r0, r3
    4bda:	3708      	adds	r7, #8
    4bdc:	46bd      	mov	sp, r7
    4bde:	bd80      	pop	{r7, pc}
    4be0:	07270e00 	.word	0x07270e00
    4be4:	00004a79 	.word	0x00004a79

00004be8 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4be8:	b480      	push	{r7}
    4bea:	b083      	sub	sp, #12
    4bec:	af00      	add	r7, sp, #0
    4bee:	4603      	mov	r3, r0
    4bf0:	6039      	str	r1, [r7, #0]
    4bf2:	80fb      	strh	r3, [r7, #6]
    4bf4:	4613      	mov	r3, r2
    4bf6:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4bf8:	797b      	ldrb	r3, [r7, #5]
    4bfa:	3b04      	subs	r3, #4
    4bfc:	2b05      	cmp	r3, #5
    4bfe:	d870      	bhi.n	4ce2 <_get_cycles_for_ms_internal+0xfa>
    4c00:	a201      	add	r2, pc, #4	; (adr r2, 4c08 <_get_cycles_for_ms_internal+0x20>)
    4c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4c06:	bf00      	nop
    4c08:	00004cc5 	.word	0x00004cc5
    4c0c:	00004ca9 	.word	0x00004ca9
    4c10:	00004c8d 	.word	0x00004c8d
    4c14:	00004c69 	.word	0x00004c69
    4c18:	00004c45 	.word	0x00004c45
    4c1c:	00004c21 	.word	0x00004c21
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4c20:	88fb      	ldrh	r3, [r7, #6]
    4c22:	683a      	ldr	r2, [r7, #0]
    4c24:	4937      	ldr	r1, [pc, #220]	; (4d04 <_get_cycles_for_ms_internal+0x11c>)
    4c26:	fba1 1202 	umull	r1, r2, r1, r2
    4c2a:	0c92      	lsrs	r2, r2, #18
    4c2c:	fb02 f303 	mul.w	r3, r2, r3
    4c30:	3302      	adds	r3, #2
    4c32:	4a35      	ldr	r2, [pc, #212]	; (4d08 <_get_cycles_for_ms_internal+0x120>)
    4c34:	fba2 2303 	umull	r2, r3, r2, r3
    4c38:	085b      	lsrs	r3, r3, #1
    4c3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4c3e:	fb02 f303 	mul.w	r3, r2, r3
    4c42:	e058      	b.n	4cf6 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4c44:	88fb      	ldrh	r3, [r7, #6]
    4c46:	683a      	ldr	r2, [r7, #0]
    4c48:	0952      	lsrs	r2, r2, #5
    4c4a:	4930      	ldr	r1, [pc, #192]	; (4d0c <_get_cycles_for_ms_internal+0x124>)
    4c4c:	fba1 1202 	umull	r1, r2, r1, r2
    4c50:	09d2      	lsrs	r2, r2, #7
    4c52:	fb02 f303 	mul.w	r3, r2, r3
    4c56:	3302      	adds	r3, #2
    4c58:	4a2b      	ldr	r2, [pc, #172]	; (4d08 <_get_cycles_for_ms_internal+0x120>)
    4c5a:	fba2 2303 	umull	r2, r3, r2, r3
    4c5e:	085b      	lsrs	r3, r3, #1
    4c60:	2264      	movs	r2, #100	; 0x64
    4c62:	fb02 f303 	mul.w	r3, r2, r3
    4c66:	e046      	b.n	4cf6 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4c68:	88fb      	ldrh	r3, [r7, #6]
    4c6a:	683a      	ldr	r2, [r7, #0]
    4c6c:	4928      	ldr	r1, [pc, #160]	; (4d10 <_get_cycles_for_ms_internal+0x128>)
    4c6e:	fba1 1202 	umull	r1, r2, r1, r2
    4c72:	0b52      	lsrs	r2, r2, #13
    4c74:	fb02 f303 	mul.w	r3, r2, r3
    4c78:	3302      	adds	r3, #2
    4c7a:	4a23      	ldr	r2, [pc, #140]	; (4d08 <_get_cycles_for_ms_internal+0x120>)
    4c7c:	fba2 2303 	umull	r2, r3, r2, r3
    4c80:	085a      	lsrs	r2, r3, #1
    4c82:	4613      	mov	r3, r2
    4c84:	009b      	lsls	r3, r3, #2
    4c86:	4413      	add	r3, r2
    4c88:	005b      	lsls	r3, r3, #1
    4c8a:	e034      	b.n	4cf6 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4c8c:	88fb      	ldrh	r3, [r7, #6]
    4c8e:	683a      	ldr	r2, [r7, #0]
    4c90:	4920      	ldr	r1, [pc, #128]	; (4d14 <_get_cycles_for_ms_internal+0x12c>)
    4c92:	fba1 1202 	umull	r1, r2, r1, r2
    4c96:	0992      	lsrs	r2, r2, #6
    4c98:	fb02 f303 	mul.w	r3, r2, r3
    4c9c:	3302      	adds	r3, #2
    4c9e:	4a1a      	ldr	r2, [pc, #104]	; (4d08 <_get_cycles_for_ms_internal+0x120>)
    4ca0:	fba2 2303 	umull	r2, r3, r2, r3
    4ca4:	085b      	lsrs	r3, r3, #1
    4ca6:	e026      	b.n	4cf6 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4ca8:	88fb      	ldrh	r3, [r7, #6]
    4caa:	683a      	ldr	r2, [r7, #0]
    4cac:	491a      	ldr	r1, [pc, #104]	; (4d18 <_get_cycles_for_ms_internal+0x130>)
    4cae:	fba1 1202 	umull	r1, r2, r1, r2
    4cb2:	0952      	lsrs	r2, r2, #5
    4cb4:	fb02 f303 	mul.w	r3, r2, r3
    4cb8:	331d      	adds	r3, #29
    4cba:	4a18      	ldr	r2, [pc, #96]	; (4d1c <_get_cycles_for_ms_internal+0x134>)
    4cbc:	fba2 2303 	umull	r2, r3, r2, r3
    4cc0:	091b      	lsrs	r3, r3, #4
    4cc2:	e018      	b.n	4cf6 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4cc4:	88fb      	ldrh	r3, [r7, #6]
    4cc6:	683a      	ldr	r2, [r7, #0]
    4cc8:	4915      	ldr	r1, [pc, #84]	; (4d20 <_get_cycles_for_ms_internal+0x138>)
    4cca:	fba1 1202 	umull	r1, r2, r1, r2
    4cce:	08d2      	lsrs	r2, r2, #3
    4cd0:	fb02 f303 	mul.w	r3, r2, r3
    4cd4:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4cd8:	4a12      	ldr	r2, [pc, #72]	; (4d24 <_get_cycles_for_ms_internal+0x13c>)
    4cda:	fba2 2303 	umull	r2, r3, r2, r3
    4cde:	095b      	lsrs	r3, r3, #5
    4ce0:	e009      	b.n	4cf6 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4ce2:	88fb      	ldrh	r3, [r7, #6]
    4ce4:	683a      	ldr	r2, [r7, #0]
    4ce6:	fb02 f303 	mul.w	r3, r2, r3
    4cea:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4cee:	4a0e      	ldr	r2, [pc, #56]	; (4d28 <_get_cycles_for_ms_internal+0x140>)
    4cf0:	fba2 2303 	umull	r2, r3, r2, r3
    4cf4:	099b      	lsrs	r3, r3, #6
	}
}
    4cf6:	4618      	mov	r0, r3
    4cf8:	370c      	adds	r7, #12
    4cfa:	46bd      	mov	sp, r7
    4cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d00:	4770      	bx	lr
    4d02:	bf00      	nop
    4d04:	431bde83 	.word	0x431bde83
    4d08:	aaaaaaab 	.word	0xaaaaaaab
    4d0c:	0a7c5ac5 	.word	0x0a7c5ac5
    4d10:	d1b71759 	.word	0xd1b71759
    4d14:	10624dd3 	.word	0x10624dd3
    4d18:	51eb851f 	.word	0x51eb851f
    4d1c:	88888889 	.word	0x88888889
    4d20:	cccccccd 	.word	0xcccccccd
    4d24:	1b4e81b5 	.word	0x1b4e81b5
    4d28:	057619f1 	.word	0x057619f1

00004d2c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4d2c:	b580      	push	{r7, lr}
    4d2e:	b082      	sub	sp, #8
    4d30:	af00      	add	r7, sp, #0
    4d32:	4603      	mov	r3, r0
    4d34:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4d36:	88fb      	ldrh	r3, [r7, #6]
    4d38:	2209      	movs	r2, #9
    4d3a:	4904      	ldr	r1, [pc, #16]	; (4d4c <_get_cycles_for_ms+0x20>)
    4d3c:	4618      	mov	r0, r3
    4d3e:	4b04      	ldr	r3, [pc, #16]	; (4d50 <_get_cycles_for_ms+0x24>)
    4d40:	4798      	blx	r3
    4d42:	4603      	mov	r3, r0
}
    4d44:	4618      	mov	r0, r3
    4d46:	3708      	adds	r7, #8
    4d48:	46bd      	mov	sp, r7
    4d4a:	bd80      	pop	{r7, pc}
    4d4c:	07270e00 	.word	0x07270e00
    4d50:	00004be9 	.word	0x00004be9
    4d54:	00000000 	.word	0x00000000

00004d58 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4d58:	b480      	push	{r7}
    4d5a:	b083      	sub	sp, #12
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	6078      	str	r0, [r7, #4]
    4d60:	6039      	str	r1, [r7, #0]
    4d62:	bf00      	nop
    4d64:	f3af 8000 	nop.w

00004d68 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4d68:	3901      	subs	r1, #1
    4d6a:	d8fd      	bhi.n	4d68 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4d6c:	bf00      	nop
    4d6e:	370c      	adds	r7, #12
    4d70:	46bd      	mov	sp, r7
    4d72:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d76:	4770      	bx	lr

00004d78 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4d78:	b480      	push	{r7}
    4d7a:	b083      	sub	sp, #12
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	6078      	str	r0, [r7, #4]
    4d80:	460b      	mov	r3, r1
    4d82:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4d84:	687b      	ldr	r3, [r7, #4]
    4d86:	881b      	ldrh	r3, [r3, #0]
    4d88:	b29a      	uxth	r2, r3
    4d8a:	887b      	ldrh	r3, [r7, #2]
    4d8c:	021b      	lsls	r3, r3, #8
    4d8e:	b29b      	uxth	r3, r3
    4d90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4d94:	b29b      	uxth	r3, r3
    4d96:	4313      	orrs	r3, r2
    4d98:	b29a      	uxth	r2, r3
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4d9e:	bf00      	nop
    4da0:	370c      	adds	r7, #12
    4da2:	46bd      	mov	sp, r7
    4da4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4da8:	4770      	bx	lr

00004daa <hri_port_set_EVCTRL_reg>:
{
    4daa:	b480      	push	{r7}
    4dac:	b085      	sub	sp, #20
    4dae:	af00      	add	r7, sp, #0
    4db0:	60f8      	str	r0, [r7, #12]
    4db2:	460b      	mov	r3, r1
    4db4:	607a      	str	r2, [r7, #4]
    4db6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4db8:	7afb      	ldrb	r3, [r7, #11]
    4dba:	7afa      	ldrb	r2, [r7, #11]
    4dbc:	68f9      	ldr	r1, [r7, #12]
    4dbe:	01d2      	lsls	r2, r2, #7
    4dc0:	440a      	add	r2, r1
    4dc2:	322c      	adds	r2, #44	; 0x2c
    4dc4:	6811      	ldr	r1, [r2, #0]
    4dc6:	687a      	ldr	r2, [r7, #4]
    4dc8:	430a      	orrs	r2, r1
    4dca:	68f9      	ldr	r1, [r7, #12]
    4dcc:	01db      	lsls	r3, r3, #7
    4dce:	440b      	add	r3, r1
    4dd0:	332c      	adds	r3, #44	; 0x2c
    4dd2:	601a      	str	r2, [r3, #0]
}
    4dd4:	bf00      	nop
    4dd6:	3714      	adds	r7, #20
    4dd8:	46bd      	mov	sp, r7
    4dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dde:	4770      	bx	lr

00004de0 <_port_event_init>:

static inline void _port_event_init()
{
    4de0:	b580      	push	{r7, lr}
    4de2:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4de4:	2200      	movs	r2, #0
    4de6:	2100      	movs	r1, #0
    4de8:	480a      	ldr	r0, [pc, #40]	; (4e14 <_port_event_init+0x34>)
    4dea:	4b0b      	ldr	r3, [pc, #44]	; (4e18 <_port_event_init+0x38>)
    4dec:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4dee:	2200      	movs	r2, #0
    4df0:	2101      	movs	r1, #1
    4df2:	4808      	ldr	r0, [pc, #32]	; (4e14 <_port_event_init+0x34>)
    4df4:	4b08      	ldr	r3, [pc, #32]	; (4e18 <_port_event_init+0x38>)
    4df6:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4df8:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4dfc:	2102      	movs	r1, #2
    4dfe:	4805      	ldr	r0, [pc, #20]	; (4e14 <_port_event_init+0x34>)
    4e00:	4b05      	ldr	r3, [pc, #20]	; (4e18 <_port_event_init+0x38>)
    4e02:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4e04:	2200      	movs	r2, #0
    4e06:	2103      	movs	r1, #3
    4e08:	4802      	ldr	r0, [pc, #8]	; (4e14 <_port_event_init+0x34>)
    4e0a:	4b03      	ldr	r3, [pc, #12]	; (4e18 <_port_event_init+0x38>)
    4e0c:	4798      	blx	r3
}
    4e0e:	bf00      	nop
    4e10:	bd80      	pop	{r7, pc}
    4e12:	bf00      	nop
    4e14:	41008000 	.word	0x41008000
    4e18:	00004dab 	.word	0x00004dab

00004e1c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4e1c:	b580      	push	{r7, lr}
    4e1e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4e20:	2104      	movs	r1, #4
    4e22:	480b      	ldr	r0, [pc, #44]	; (4e50 <_init_chip+0x34>)
    4e24:	4b0b      	ldr	r3, [pc, #44]	; (4e54 <_init_chip+0x38>)
    4e26:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4e28:	4b0b      	ldr	r3, [pc, #44]	; (4e58 <_init_chip+0x3c>)
    4e2a:	4798      	blx	r3
	_oscctrl_init_sources();
    4e2c:	4b0b      	ldr	r3, [pc, #44]	; (4e5c <_init_chip+0x40>)
    4e2e:	4798      	blx	r3
	_mclk_init();
    4e30:	4b0b      	ldr	r3, [pc, #44]	; (4e60 <_init_chip+0x44>)
    4e32:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4e34:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4e38:	4b0a      	ldr	r3, [pc, #40]	; (4e64 <_init_chip+0x48>)
    4e3a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4e3c:	4b0a      	ldr	r3, [pc, #40]	; (4e68 <_init_chip+0x4c>)
    4e3e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4e40:	f640 30df 	movw	r0, #3039	; 0xbdf
    4e44:	4b07      	ldr	r3, [pc, #28]	; (4e64 <_init_chip+0x48>)
    4e46:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4e48:	4b08      	ldr	r3, [pc, #32]	; (4e6c <_init_chip+0x50>)
    4e4a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4e4c:	bf00      	nop
    4e4e:	bd80      	pop	{r7, pc}
    4e50:	41004000 	.word	0x41004000
    4e54:	00004d79 	.word	0x00004d79
    4e58:	00005945 	.word	0x00005945
    4e5c:	00005e0d 	.word	0x00005e0d
    4e60:	00005865 	.word	0x00005865
    4e64:	0000570d 	.word	0x0000570d
    4e68:	00005e4d 	.word	0x00005e4d
    4e6c:	00004de1 	.word	0x00004de1

00004e70 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4e70:	b480      	push	{r7}
    4e72:	b083      	sub	sp, #12
    4e74:	af00      	add	r7, sp, #0
    4e76:	6078      	str	r0, [r7, #4]
    4e78:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4e7a:	687b      	ldr	r3, [r7, #4]
    4e7c:	683a      	ldr	r2, [r7, #0]
    4e7e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4e80:	2300      	movs	r3, #0
}
    4e82:	4618      	mov	r0, r3
    4e84:	370c      	adds	r7, #12
    4e86:	46bd      	mov	sp, r7
    4e88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e8c:	4770      	bx	lr
	...

00004e90 <__NVIC_EnableIRQ>:
{
    4e90:	b480      	push	{r7}
    4e92:	b083      	sub	sp, #12
    4e94:	af00      	add	r7, sp, #0
    4e96:	4603      	mov	r3, r0
    4e98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4e9e:	2b00      	cmp	r3, #0
    4ea0:	db0b      	blt.n	4eba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ea2:	4909      	ldr	r1, [pc, #36]	; (4ec8 <__NVIC_EnableIRQ+0x38>)
    4ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4ea8:	095b      	lsrs	r3, r3, #5
    4eaa:	88fa      	ldrh	r2, [r7, #6]
    4eac:	f002 021f 	and.w	r2, r2, #31
    4eb0:	2001      	movs	r0, #1
    4eb2:	fa00 f202 	lsl.w	r2, r0, r2
    4eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4eba:	bf00      	nop
    4ebc:	370c      	adds	r7, #12
    4ebe:	46bd      	mov	sp, r7
    4ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ec4:	4770      	bx	lr
    4ec6:	bf00      	nop
    4ec8:	e000e100 	.word	0xe000e100

00004ecc <__NVIC_DisableIRQ>:
{
    4ecc:	b480      	push	{r7}
    4ece:	b083      	sub	sp, #12
    4ed0:	af00      	add	r7, sp, #0
    4ed2:	4603      	mov	r3, r0
    4ed4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4eda:	2b00      	cmp	r3, #0
    4edc:	db10      	blt.n	4f00 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ede:	490b      	ldr	r1, [pc, #44]	; (4f0c <__NVIC_DisableIRQ+0x40>)
    4ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4ee4:	095b      	lsrs	r3, r3, #5
    4ee6:	88fa      	ldrh	r2, [r7, #6]
    4ee8:	f002 021f 	and.w	r2, r2, #31
    4eec:	2001      	movs	r0, #1
    4eee:	fa00 f202 	lsl.w	r2, r0, r2
    4ef2:	3320      	adds	r3, #32
    4ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4ef8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4efc:	f3bf 8f6f 	isb	sy
}
    4f00:	bf00      	nop
    4f02:	370c      	adds	r7, #12
    4f04:	46bd      	mov	sp, r7
    4f06:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f0a:	4770      	bx	lr
    4f0c:	e000e100 	.word	0xe000e100

00004f10 <__NVIC_ClearPendingIRQ>:
{
    4f10:	b480      	push	{r7}
    4f12:	b083      	sub	sp, #12
    4f14:	af00      	add	r7, sp, #0
    4f16:	4603      	mov	r3, r0
    4f18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4f1e:	2b00      	cmp	r3, #0
    4f20:	db0c      	blt.n	4f3c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f22:	4909      	ldr	r1, [pc, #36]	; (4f48 <__NVIC_ClearPendingIRQ+0x38>)
    4f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4f28:	095b      	lsrs	r3, r3, #5
    4f2a:	88fa      	ldrh	r2, [r7, #6]
    4f2c:	f002 021f 	and.w	r2, r2, #31
    4f30:	2001      	movs	r0, #1
    4f32:	fa00 f202 	lsl.w	r2, r0, r2
    4f36:	3360      	adds	r3, #96	; 0x60
    4f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4f3c:	bf00      	nop
    4f3e:	370c      	adds	r7, #12
    4f40:	46bd      	mov	sp, r7
    4f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f46:	4770      	bx	lr
    4f48:	e000e100 	.word	0xe000e100

00004f4c <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4f4c:	b480      	push	{r7}
    4f4e:	b083      	sub	sp, #12
    4f50:	af00      	add	r7, sp, #0
    4f52:	6078      	str	r0, [r7, #4]
    4f54:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4f56:	bf00      	nop
    4f58:	687b      	ldr	r3, [r7, #4]
    4f5a:	685a      	ldr	r2, [r3, #4]
    4f5c:	683b      	ldr	r3, [r7, #0]
    4f5e:	4013      	ands	r3, r2
    4f60:	2b00      	cmp	r3, #0
    4f62:	d1f9      	bne.n	4f58 <hri_eic_wait_for_sync+0xc>
	};
}
    4f64:	bf00      	nop
    4f66:	370c      	adds	r7, #12
    4f68:	46bd      	mov	sp, r7
    4f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f6e:	4770      	bx	lr

00004f70 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4f70:	b480      	push	{r7}
    4f72:	b083      	sub	sp, #12
    4f74:	af00      	add	r7, sp, #0
    4f76:	6078      	str	r0, [r7, #4]
    4f78:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4f7a:	687b      	ldr	r3, [r7, #4]
    4f7c:	685a      	ldr	r2, [r3, #4]
    4f7e:	683b      	ldr	r3, [r7, #0]
    4f80:	4013      	ands	r3, r2
    4f82:	2b00      	cmp	r3, #0
    4f84:	bf14      	ite	ne
    4f86:	2301      	movne	r3, #1
    4f88:	2300      	moveq	r3, #0
    4f8a:	b2db      	uxtb	r3, r3
}
    4f8c:	4618      	mov	r0, r3
    4f8e:	370c      	adds	r7, #12
    4f90:	46bd      	mov	sp, r7
    4f92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f96:	4770      	bx	lr

00004f98 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4f98:	b480      	push	{r7}
    4f9a:	b083      	sub	sp, #12
    4f9c:	af00      	add	r7, sp, #0
    4f9e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4fa0:	687b      	ldr	r3, [r7, #4]
    4fa2:	695b      	ldr	r3, [r3, #20]
}
    4fa4:	4618      	mov	r0, r3
    4fa6:	370c      	adds	r7, #12
    4fa8:	46bd      	mov	sp, r7
    4faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fae:	4770      	bx	lr

00004fb0 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4fb0:	b480      	push	{r7}
    4fb2:	b083      	sub	sp, #12
    4fb4:	af00      	add	r7, sp, #0
    4fb6:	6078      	str	r0, [r7, #4]
    4fb8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4fba:	687b      	ldr	r3, [r7, #4]
    4fbc:	683a      	ldr	r2, [r7, #0]
    4fbe:	615a      	str	r2, [r3, #20]
}
    4fc0:	bf00      	nop
    4fc2:	370c      	adds	r7, #12
    4fc4:	46bd      	mov	sp, r7
    4fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fca:	4770      	bx	lr

00004fcc <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4fcc:	b480      	push	{r7}
    4fce:	b083      	sub	sp, #12
    4fd0:	af00      	add	r7, sp, #0
    4fd2:	6078      	str	r0, [r7, #4]
    4fd4:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4fd6:	687b      	ldr	r3, [r7, #4]
    4fd8:	683a      	ldr	r2, [r7, #0]
    4fda:	611a      	str	r2, [r3, #16]
}
    4fdc:	bf00      	nop
    4fde:	370c      	adds	r7, #12
    4fe0:	46bd      	mov	sp, r7
    4fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fe6:	4770      	bx	lr

00004fe8 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4fe8:	b480      	push	{r7}
    4fea:	b083      	sub	sp, #12
    4fec:	af00      	add	r7, sp, #0
    4fee:	6078      	str	r0, [r7, #4]
    4ff0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4ff2:	687b      	ldr	r3, [r7, #4]
    4ff4:	683a      	ldr	r2, [r7, #0]
    4ff6:	60da      	str	r2, [r3, #12]
}
    4ff8:	bf00      	nop
    4ffa:	370c      	adds	r7, #12
    4ffc:	46bd      	mov	sp, r7
    4ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5002:	4770      	bx	lr

00005004 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5004:	b580      	push	{r7, lr}
    5006:	b082      	sub	sp, #8
    5008:	af00      	add	r7, sp, #0
    500a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	781b      	ldrb	r3, [r3, #0]
    5010:	b2db      	uxtb	r3, r3
    5012:	f043 0302 	orr.w	r3, r3, #2
    5016:	b2da      	uxtb	r2, r3
    5018:	687b      	ldr	r3, [r7, #4]
    501a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    501c:	2103      	movs	r1, #3
    501e:	6878      	ldr	r0, [r7, #4]
    5020:	4b02      	ldr	r3, [pc, #8]	; (502c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    5022:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    5024:	bf00      	nop
    5026:	3708      	adds	r7, #8
    5028:	46bd      	mov	sp, r7
    502a:	bd80      	pop	{r7, pc}
    502c:	00004f4d 	.word	0x00004f4d

00005030 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5030:	b580      	push	{r7, lr}
    5032:	b082      	sub	sp, #8
    5034:	af00      	add	r7, sp, #0
    5036:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    5038:	687b      	ldr	r3, [r7, #4]
    503a:	781b      	ldrb	r3, [r3, #0]
    503c:	b2db      	uxtb	r3, r3
    503e:	f023 0302 	bic.w	r3, r3, #2
    5042:	b2da      	uxtb	r2, r3
    5044:	687b      	ldr	r3, [r7, #4]
    5046:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    5048:	2103      	movs	r1, #3
    504a:	6878      	ldr	r0, [r7, #4]
    504c:	4b02      	ldr	r3, [pc, #8]	; (5058 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    504e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    5050:	bf00      	nop
    5052:	3708      	adds	r7, #8
    5054:	46bd      	mov	sp, r7
    5056:	bd80      	pop	{r7, pc}
    5058:	00004f4d 	.word	0x00004f4d

0000505c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    505c:	b580      	push	{r7, lr}
    505e:	b084      	sub	sp, #16
    5060:	af00      	add	r7, sp, #0
    5062:	6078      	str	r0, [r7, #4]
    5064:	460b      	mov	r3, r1
    5066:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    5068:	687b      	ldr	r3, [r7, #4]
    506a:	781b      	ldrb	r3, [r3, #0]
    506c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    506e:	7bfb      	ldrb	r3, [r7, #15]
    5070:	f023 0310 	bic.w	r3, r3, #16
    5074:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    5076:	78fb      	ldrb	r3, [r7, #3]
    5078:	011b      	lsls	r3, r3, #4
    507a:	b25a      	sxtb	r2, r3
    507c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5080:	4313      	orrs	r3, r2
    5082:	b25b      	sxtb	r3, r3
    5084:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    5086:	687b      	ldr	r3, [r7, #4]
    5088:	7bfa      	ldrb	r2, [r7, #15]
    508a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    508c:	2103      	movs	r1, #3
    508e:	6878      	ldr	r0, [r7, #4]
    5090:	4b02      	ldr	r3, [pc, #8]	; (509c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    5092:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    5094:	bf00      	nop
    5096:	3710      	adds	r7, #16
    5098:	46bd      	mov	sp, r7
    509a:	bd80      	pop	{r7, pc}
    509c:	00004f4d 	.word	0x00004f4d

000050a0 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    50a0:	b580      	push	{r7, lr}
    50a2:	b084      	sub	sp, #16
    50a4:	af00      	add	r7, sp, #0
    50a6:	6078      	str	r0, [r7, #4]
    50a8:	460b      	mov	r3, r1
    50aa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    50ac:	2103      	movs	r1, #3
    50ae:	6878      	ldr	r0, [r7, #4]
    50b0:	4b06      	ldr	r3, [pc, #24]	; (50cc <hri_eic_get_CTRLA_reg+0x2c>)
    50b2:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    50b4:	687b      	ldr	r3, [r7, #4]
    50b6:	781b      	ldrb	r3, [r3, #0]
    50b8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    50ba:	7bfa      	ldrb	r2, [r7, #15]
    50bc:	78fb      	ldrb	r3, [r7, #3]
    50be:	4013      	ands	r3, r2
    50c0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    50c2:	7bfb      	ldrb	r3, [r7, #15]
}
    50c4:	4618      	mov	r0, r3
    50c6:	3710      	adds	r7, #16
    50c8:	46bd      	mov	sp, r7
    50ca:	bd80      	pop	{r7, pc}
    50cc:	00004f4d 	.word	0x00004f4d

000050d0 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    50d0:	b580      	push	{r7, lr}
    50d2:	b082      	sub	sp, #8
    50d4:	af00      	add	r7, sp, #0
    50d6:	6078      	str	r0, [r7, #4]
    50d8:	460b      	mov	r3, r1
    50da:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    50dc:	687b      	ldr	r3, [r7, #4]
    50de:	78fa      	ldrb	r2, [r7, #3]
    50e0:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    50e2:	2103      	movs	r1, #3
    50e4:	6878      	ldr	r0, [r7, #4]
    50e6:	4b03      	ldr	r3, [pc, #12]	; (50f4 <hri_eic_write_CTRLA_reg+0x24>)
    50e8:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    50ea:	bf00      	nop
    50ec:	3708      	adds	r7, #8
    50ee:	46bd      	mov	sp, r7
    50f0:	bd80      	pop	{r7, pc}
    50f2:	bf00      	nop
    50f4:	00004f4d 	.word	0x00004f4d

000050f8 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    50f8:	b480      	push	{r7}
    50fa:	b083      	sub	sp, #12
    50fc:	af00      	add	r7, sp, #0
    50fe:	6078      	str	r0, [r7, #4]
    5100:	460b      	mov	r3, r1
    5102:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    5104:	687b      	ldr	r3, [r7, #4]
    5106:	78fa      	ldrb	r2, [r7, #3]
    5108:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    510a:	bf00      	nop
    510c:	370c      	adds	r7, #12
    510e:	46bd      	mov	sp, r7
    5110:	f85d 7b04 	ldr.w	r7, [sp], #4
    5114:	4770      	bx	lr

00005116 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    5116:	b480      	push	{r7}
    5118:	b083      	sub	sp, #12
    511a:	af00      	add	r7, sp, #0
    511c:	6078      	str	r0, [r7, #4]
    511e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    5120:	687b      	ldr	r3, [r7, #4]
    5122:	683a      	ldr	r2, [r7, #0]
    5124:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5126:	bf00      	nop
    5128:	370c      	adds	r7, #12
    512a:	46bd      	mov	sp, r7
    512c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5130:	4770      	bx	lr

00005132 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    5132:	b480      	push	{r7}
    5134:	b083      	sub	sp, #12
    5136:	af00      	add	r7, sp, #0
    5138:	6078      	str	r0, [r7, #4]
    513a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    513c:	687b      	ldr	r3, [r7, #4]
    513e:	683a      	ldr	r2, [r7, #0]
    5140:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5142:	bf00      	nop
    5144:	370c      	adds	r7, #12
    5146:	46bd      	mov	sp, r7
    5148:	f85d 7b04 	ldr.w	r7, [sp], #4
    514c:	4770      	bx	lr

0000514e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    514e:	b480      	push	{r7}
    5150:	b085      	sub	sp, #20
    5152:	af00      	add	r7, sp, #0
    5154:	60f8      	str	r0, [r7, #12]
    5156:	460b      	mov	r3, r1
    5158:	607a      	str	r2, [r7, #4]
    515a:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    515c:	7afb      	ldrb	r3, [r7, #11]
    515e:	68fa      	ldr	r2, [r7, #12]
    5160:	3306      	adds	r3, #6
    5162:	009b      	lsls	r3, r3, #2
    5164:	4413      	add	r3, r2
    5166:	687a      	ldr	r2, [r7, #4]
    5168:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    516a:	bf00      	nop
    516c:	3714      	adds	r7, #20
    516e:	46bd      	mov	sp, r7
    5170:	f85d 7b04 	ldr.w	r7, [sp], #4
    5174:	4770      	bx	lr

00005176 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    5176:	b480      	push	{r7}
    5178:	b083      	sub	sp, #12
    517a:	af00      	add	r7, sp, #0
    517c:	6078      	str	r0, [r7, #4]
    517e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    5180:	687b      	ldr	r3, [r7, #4]
    5182:	683a      	ldr	r2, [r7, #0]
    5184:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    5186:	bf00      	nop
    5188:	370c      	adds	r7, #12
    518a:	46bd      	mov	sp, r7
    518c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5190:	4770      	bx	lr

00005192 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    5192:	b480      	push	{r7}
    5194:	b083      	sub	sp, #12
    5196:	af00      	add	r7, sp, #0
    5198:	6078      	str	r0, [r7, #4]
    519a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    519c:	687b      	ldr	r3, [r7, #4]
    519e:	683a      	ldr	r2, [r7, #0]
    51a0:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    51a2:	bf00      	nop
    51a4:	370c      	adds	r7, #12
    51a6:	46bd      	mov	sp, r7
    51a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ac:	4770      	bx	lr
	...

000051b0 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    51b0:	b580      	push	{r7, lr}
    51b2:	b082      	sub	sp, #8
    51b4:	af00      	add	r7, sp, #0
    51b6:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    51b8:	2101      	movs	r1, #1
    51ba:	484f      	ldr	r0, [pc, #316]	; (52f8 <_ext_irq_init+0x148>)
    51bc:	4b4f      	ldr	r3, [pc, #316]	; (52fc <_ext_irq_init+0x14c>)
    51be:	4798      	blx	r3
    51c0:	4603      	mov	r3, r0
    51c2:	f083 0301 	eor.w	r3, r3, #1
    51c6:	b2db      	uxtb	r3, r3
    51c8:	2b00      	cmp	r3, #0
    51ca:	d011      	beq.n	51f0 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    51cc:	2102      	movs	r1, #2
    51ce:	484a      	ldr	r0, [pc, #296]	; (52f8 <_ext_irq_init+0x148>)
    51d0:	4b4b      	ldr	r3, [pc, #300]	; (5300 <_ext_irq_init+0x150>)
    51d2:	4798      	blx	r3
    51d4:	4603      	mov	r3, r0
    51d6:	2b00      	cmp	r3, #0
    51d8:	d006      	beq.n	51e8 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    51da:	4847      	ldr	r0, [pc, #284]	; (52f8 <_ext_irq_init+0x148>)
    51dc:	4b49      	ldr	r3, [pc, #292]	; (5304 <_ext_irq_init+0x154>)
    51de:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    51e0:	2102      	movs	r1, #2
    51e2:	4845      	ldr	r0, [pc, #276]	; (52f8 <_ext_irq_init+0x148>)
    51e4:	4b48      	ldr	r3, [pc, #288]	; (5308 <_ext_irq_init+0x158>)
    51e6:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    51e8:	2101      	movs	r1, #1
    51ea:	4843      	ldr	r0, [pc, #268]	; (52f8 <_ext_irq_init+0x148>)
    51ec:	4b47      	ldr	r3, [pc, #284]	; (530c <_ext_irq_init+0x15c>)
    51ee:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    51f0:	2101      	movs	r1, #1
    51f2:	4841      	ldr	r0, [pc, #260]	; (52f8 <_ext_irq_init+0x148>)
    51f4:	4b44      	ldr	r3, [pc, #272]	; (5308 <_ext_irq_init+0x158>)
    51f6:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    51f8:	2100      	movs	r1, #0
    51fa:	483f      	ldr	r0, [pc, #252]	; (52f8 <_ext_irq_init+0x148>)
    51fc:	4b44      	ldr	r3, [pc, #272]	; (5310 <_ext_irq_init+0x160>)
    51fe:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    5200:	2100      	movs	r1, #0
    5202:	483d      	ldr	r0, [pc, #244]	; (52f8 <_ext_irq_init+0x148>)
    5204:	4b43      	ldr	r3, [pc, #268]	; (5314 <_ext_irq_init+0x164>)
    5206:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    5208:	2100      	movs	r1, #0
    520a:	483b      	ldr	r0, [pc, #236]	; (52f8 <_ext_irq_init+0x148>)
    520c:	4b42      	ldr	r3, [pc, #264]	; (5318 <_ext_irq_init+0x168>)
    520e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    5210:	f240 31bb 	movw	r1, #955	; 0x3bb
    5214:	4838      	ldr	r0, [pc, #224]	; (52f8 <_ext_irq_init+0x148>)
    5216:	4b41      	ldr	r3, [pc, #260]	; (531c <_ext_irq_init+0x16c>)
    5218:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    521a:	f240 313b 	movw	r1, #827	; 0x33b
    521e:	4836      	ldr	r0, [pc, #216]	; (52f8 <_ext_irq_init+0x148>)
    5220:	4b3f      	ldr	r3, [pc, #252]	; (5320 <_ext_irq_init+0x170>)
    5222:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    5224:	2100      	movs	r1, #0
    5226:	4834      	ldr	r0, [pc, #208]	; (52f8 <_ext_irq_init+0x148>)
    5228:	4b3e      	ldr	r3, [pc, #248]	; (5324 <_ext_irq_init+0x174>)
    522a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    522c:	4a3e      	ldr	r2, [pc, #248]	; (5328 <_ext_irq_init+0x178>)
    522e:	2100      	movs	r1, #0
    5230:	4831      	ldr	r0, [pc, #196]	; (52f8 <_ext_irq_init+0x148>)
    5232:	4b3e      	ldr	r3, [pc, #248]	; (532c <_ext_irq_init+0x17c>)
    5234:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    5236:	2211      	movs	r2, #17
    5238:	2101      	movs	r1, #1
    523a:	482f      	ldr	r0, [pc, #188]	; (52f8 <_ext_irq_init+0x148>)
    523c:	4b3b      	ldr	r3, [pc, #236]	; (532c <_ext_irq_init+0x17c>)
    523e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    5240:	482d      	ldr	r0, [pc, #180]	; (52f8 <_ext_irq_init+0x148>)
    5242:	4b3b      	ldr	r3, [pc, #236]	; (5330 <_ext_irq_init+0x180>)
    5244:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    5246:	200c      	movs	r0, #12
    5248:	4b3a      	ldr	r3, [pc, #232]	; (5334 <_ext_irq_init+0x184>)
    524a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    524c:	200c      	movs	r0, #12
    524e:	4b3a      	ldr	r3, [pc, #232]	; (5338 <_ext_irq_init+0x188>)
    5250:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    5252:	200c      	movs	r0, #12
    5254:	4b39      	ldr	r3, [pc, #228]	; (533c <_ext_irq_init+0x18c>)
    5256:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    5258:	200d      	movs	r0, #13
    525a:	4b36      	ldr	r3, [pc, #216]	; (5334 <_ext_irq_init+0x184>)
    525c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    525e:	200d      	movs	r0, #13
    5260:	4b35      	ldr	r3, [pc, #212]	; (5338 <_ext_irq_init+0x188>)
    5262:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    5264:	200d      	movs	r0, #13
    5266:	4b35      	ldr	r3, [pc, #212]	; (533c <_ext_irq_init+0x18c>)
    5268:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    526a:	200f      	movs	r0, #15
    526c:	4b31      	ldr	r3, [pc, #196]	; (5334 <_ext_irq_init+0x184>)
    526e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    5270:	200f      	movs	r0, #15
    5272:	4b31      	ldr	r3, [pc, #196]	; (5338 <_ext_irq_init+0x188>)
    5274:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    5276:	200f      	movs	r0, #15
    5278:	4b30      	ldr	r3, [pc, #192]	; (533c <_ext_irq_init+0x18c>)
    527a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    527c:	2010      	movs	r0, #16
    527e:	4b2d      	ldr	r3, [pc, #180]	; (5334 <_ext_irq_init+0x184>)
    5280:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    5282:	2010      	movs	r0, #16
    5284:	4b2c      	ldr	r3, [pc, #176]	; (5338 <_ext_irq_init+0x188>)
    5286:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    5288:	2010      	movs	r0, #16
    528a:	4b2c      	ldr	r3, [pc, #176]	; (533c <_ext_irq_init+0x18c>)
    528c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    528e:	2011      	movs	r0, #17
    5290:	4b28      	ldr	r3, [pc, #160]	; (5334 <_ext_irq_init+0x184>)
    5292:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    5294:	2011      	movs	r0, #17
    5296:	4b28      	ldr	r3, [pc, #160]	; (5338 <_ext_irq_init+0x188>)
    5298:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    529a:	2011      	movs	r0, #17
    529c:	4b27      	ldr	r3, [pc, #156]	; (533c <_ext_irq_init+0x18c>)
    529e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    52a0:	2012      	movs	r0, #18
    52a2:	4b24      	ldr	r3, [pc, #144]	; (5334 <_ext_irq_init+0x184>)
    52a4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    52a6:	2012      	movs	r0, #18
    52a8:	4b23      	ldr	r3, [pc, #140]	; (5338 <_ext_irq_init+0x188>)
    52aa:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    52ac:	2012      	movs	r0, #18
    52ae:	4b23      	ldr	r3, [pc, #140]	; (533c <_ext_irq_init+0x18c>)
    52b0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    52b2:	2013      	movs	r0, #19
    52b4:	4b1f      	ldr	r3, [pc, #124]	; (5334 <_ext_irq_init+0x184>)
    52b6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    52b8:	2013      	movs	r0, #19
    52ba:	4b1f      	ldr	r3, [pc, #124]	; (5338 <_ext_irq_init+0x188>)
    52bc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    52be:	2013      	movs	r0, #19
    52c0:	4b1e      	ldr	r3, [pc, #120]	; (533c <_ext_irq_init+0x18c>)
    52c2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    52c4:	2014      	movs	r0, #20
    52c6:	4b1b      	ldr	r3, [pc, #108]	; (5334 <_ext_irq_init+0x184>)
    52c8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    52ca:	2014      	movs	r0, #20
    52cc:	4b1a      	ldr	r3, [pc, #104]	; (5338 <_ext_irq_init+0x188>)
    52ce:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    52d0:	2014      	movs	r0, #20
    52d2:	4b1a      	ldr	r3, [pc, #104]	; (533c <_ext_irq_init+0x18c>)
    52d4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    52d6:	2015      	movs	r0, #21
    52d8:	4b16      	ldr	r3, [pc, #88]	; (5334 <_ext_irq_init+0x184>)
    52da:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    52dc:	2015      	movs	r0, #21
    52de:	4b16      	ldr	r3, [pc, #88]	; (5338 <_ext_irq_init+0x188>)
    52e0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    52e2:	2015      	movs	r0, #21
    52e4:	4b15      	ldr	r3, [pc, #84]	; (533c <_ext_irq_init+0x18c>)
    52e6:	4798      	blx	r3

	callback = cb;
    52e8:	4a15      	ldr	r2, [pc, #84]	; (5340 <_ext_irq_init+0x190>)
    52ea:	687b      	ldr	r3, [r7, #4]
    52ec:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    52ee:	2300      	movs	r3, #0
}
    52f0:	4618      	mov	r0, r3
    52f2:	3708      	adds	r7, #8
    52f4:	46bd      	mov	sp, r7
    52f6:	bd80      	pop	{r7, pc}
    52f8:	40002800 	.word	0x40002800
    52fc:	00004f71 	.word	0x00004f71
    5300:	000050a1 	.word	0x000050a1
    5304:	00005031 	.word	0x00005031
    5308:	00004f4d 	.word	0x00004f4d
    530c:	000050d1 	.word	0x000050d1
    5310:	0000505d 	.word	0x0000505d
    5314:	000050f9 	.word	0x000050f9
    5318:	00005117 	.word	0x00005117
    531c:	00005133 	.word	0x00005133
    5320:	00005177 	.word	0x00005177
    5324:	00005193 	.word	0x00005193
    5328:	90999013 	.word	0x90999013
    532c:	0000514f 	.word	0x0000514f
    5330:	00005005 	.word	0x00005005
    5334:	00004ecd 	.word	0x00004ecd
    5338:	00004f11 	.word	0x00004f11
    533c:	00004e91 	.word	0x00004e91
    5340:	20000e98 	.word	0x20000e98

00005344 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    5344:	b580      	push	{r7, lr}
    5346:	b084      	sub	sp, #16
    5348:	af00      	add	r7, sp, #0
    534a:	6078      	str	r0, [r7, #4]
    534c:	460b      	mov	r3, r1
    534e:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    5350:	23ff      	movs	r3, #255	; 0xff
    5352:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    5354:	2300      	movs	r3, #0
    5356:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    5358:	e010      	b.n	537c <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    535a:	7bbb      	ldrb	r3, [r7, #14]
    535c:	4a1c      	ldr	r2, [pc, #112]	; (53d0 <_ext_irq_enable+0x8c>)
    535e:	00db      	lsls	r3, r3, #3
    5360:	4413      	add	r3, r2
    5362:	685a      	ldr	r2, [r3, #4]
    5364:	687b      	ldr	r3, [r7, #4]
    5366:	429a      	cmp	r2, r3
    5368:	d105      	bne.n	5376 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    536a:	7bbb      	ldrb	r3, [r7, #14]
    536c:	4a18      	ldr	r2, [pc, #96]	; (53d0 <_ext_irq_enable+0x8c>)
    536e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5372:	73fb      	strb	r3, [r7, #15]
			break;
    5374:	e005      	b.n	5382 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    5376:	7bbb      	ldrb	r3, [r7, #14]
    5378:	3301      	adds	r3, #1
    537a:	73bb      	strb	r3, [r7, #14]
    537c:	7bbb      	ldrb	r3, [r7, #14]
    537e:	2b08      	cmp	r3, #8
    5380:	d9eb      	bls.n	535a <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    5382:	7bfb      	ldrb	r3, [r7, #15]
    5384:	2bff      	cmp	r3, #255	; 0xff
    5386:	d102      	bne.n	538e <_ext_irq_enable+0x4a>
		return -1;
    5388:	f04f 33ff 	mov.w	r3, #4294967295
    538c:	e01c      	b.n	53c8 <_ext_irq_enable+0x84>
	}

	if (enable) {
    538e:	78fb      	ldrb	r3, [r7, #3]
    5390:	2b00      	cmp	r3, #0
    5392:	d008      	beq.n	53a6 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    5394:	7bfb      	ldrb	r3, [r7, #15]
    5396:	2201      	movs	r2, #1
    5398:	fa02 f303 	lsl.w	r3, r2, r3
    539c:	4619      	mov	r1, r3
    539e:	480d      	ldr	r0, [pc, #52]	; (53d4 <_ext_irq_enable+0x90>)
    53a0:	4b0d      	ldr	r3, [pc, #52]	; (53d8 <_ext_irq_enable+0x94>)
    53a2:	4798      	blx	r3
    53a4:	e00f      	b.n	53c6 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    53a6:	7bfb      	ldrb	r3, [r7, #15]
    53a8:	2201      	movs	r2, #1
    53aa:	fa02 f303 	lsl.w	r3, r2, r3
    53ae:	4619      	mov	r1, r3
    53b0:	4808      	ldr	r0, [pc, #32]	; (53d4 <_ext_irq_enable+0x90>)
    53b2:	4b0a      	ldr	r3, [pc, #40]	; (53dc <_ext_irq_enable+0x98>)
    53b4:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    53b6:	7bfb      	ldrb	r3, [r7, #15]
    53b8:	2201      	movs	r2, #1
    53ba:	fa02 f303 	lsl.w	r3, r2, r3
    53be:	4619      	mov	r1, r3
    53c0:	4804      	ldr	r0, [pc, #16]	; (53d4 <_ext_irq_enable+0x90>)
    53c2:	4b07      	ldr	r3, [pc, #28]	; (53e0 <_ext_irq_enable+0x9c>)
    53c4:	4798      	blx	r3
	}

	return ERR_NONE;
    53c6:	2300      	movs	r3, #0
}
    53c8:	4618      	mov	r0, r3
    53ca:	3710      	adds	r7, #16
    53cc:	46bd      	mov	sp, r7
    53ce:	bd80      	pop	{r7, pc}
    53d0:	0001478c 	.word	0x0001478c
    53d4:	40002800 	.word	0x40002800
    53d8:	00004fcd 	.word	0x00004fcd
    53dc:	00004fe9 	.word	0x00004fe9
    53e0:	00004fb1 	.word	0x00004fb1

000053e4 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    53e4:	b580      	push	{r7, lr}
    53e6:	b084      	sub	sp, #16
    53e8:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    53ea:	4841      	ldr	r0, [pc, #260]	; (54f0 <_ext_irq_handler+0x10c>)
    53ec:	4b41      	ldr	r3, [pc, #260]	; (54f4 <_ext_irq_handler+0x110>)
    53ee:	4798      	blx	r3
    53f0:	4603      	mov	r3, r0
    53f2:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    53f4:	f04f 33ff 	mov.w	r3, #4294967295
    53f8:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    53fa:	683b      	ldr	r3, [r7, #0]
    53fc:	4619      	mov	r1, r3
    53fe:	483c      	ldr	r0, [pc, #240]	; (54f0 <_ext_irq_handler+0x10c>)
    5400:	4b3d      	ldr	r3, [pc, #244]	; (54f8 <_ext_irq_handler+0x114>)
    5402:	4798      	blx	r3

	ASSERT(callback);
    5404:	4b3d      	ldr	r3, [pc, #244]	; (54fc <_ext_irq_handler+0x118>)
    5406:	681b      	ldr	r3, [r3, #0]
    5408:	2b00      	cmp	r3, #0
    540a:	bf14      	ite	ne
    540c:	2301      	movne	r3, #1
    540e:	2300      	moveq	r3, #0
    5410:	b2db      	uxtb	r3, r3
    5412:	f44f 7284 	mov.w	r2, #264	; 0x108
    5416:	493a      	ldr	r1, [pc, #232]	; (5500 <_ext_irq_handler+0x11c>)
    5418:	4618      	mov	r0, r3
    541a:	4b3a      	ldr	r3, [pc, #232]	; (5504 <_ext_irq_handler+0x120>)
    541c:	4798      	blx	r3

	while (flags) {
    541e:	e060      	b.n	54e2 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    5420:	683b      	ldr	r3, [r7, #0]
    5422:	4618      	mov	r0, r3
    5424:	4b38      	ldr	r3, [pc, #224]	; (5508 <_ext_irq_handler+0x124>)
    5426:	4798      	blx	r3
    5428:	4603      	mov	r3, r0
    542a:	b2db      	uxtb	r3, r3
    542c:	3b01      	subs	r3, #1
    542e:	b2db      	uxtb	r3, r3
    5430:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    5432:	e047      	b.n	54c4 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    5434:	2300      	movs	r3, #0
    5436:	71fb      	strb	r3, [r7, #7]
    5438:	2309      	movs	r3, #9
    543a:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    543c:	e024      	b.n	5488 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    543e:	79ba      	ldrb	r2, [r7, #6]
    5440:	79fb      	ldrb	r3, [r7, #7]
    5442:	4413      	add	r3, r2
    5444:	105b      	asrs	r3, r3, #1
    5446:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    5448:	797b      	ldrb	r3, [r7, #5]
    544a:	4a30      	ldr	r2, [pc, #192]	; (550c <_ext_irq_handler+0x128>)
    544c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5450:	461a      	mov	r2, r3
    5452:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5456:	429a      	cmp	r2, r3
    5458:	d106      	bne.n	5468 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    545a:	797b      	ldrb	r3, [r7, #5]
    545c:	4a2b      	ldr	r2, [pc, #172]	; (550c <_ext_irq_handler+0x128>)
    545e:	00db      	lsls	r3, r3, #3
    5460:	4413      	add	r3, r2
    5462:	685b      	ldr	r3, [r3, #4]
    5464:	60bb      	str	r3, [r7, #8]
					break;
    5466:	e013      	b.n	5490 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    5468:	797b      	ldrb	r3, [r7, #5]
    546a:	4a28      	ldr	r2, [pc, #160]	; (550c <_ext_irq_handler+0x128>)
    546c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5470:	461a      	mov	r2, r3
    5472:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5476:	429a      	cmp	r2, r3
    5478:	da03      	bge.n	5482 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    547a:	797b      	ldrb	r3, [r7, #5]
    547c:	3301      	adds	r3, #1
    547e:	71fb      	strb	r3, [r7, #7]
    5480:	e002      	b.n	5488 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    5482:	797b      	ldrb	r3, [r7, #5]
    5484:	3b01      	subs	r3, #1
    5486:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    5488:	79ba      	ldrb	r2, [r7, #6]
    548a:	79fb      	ldrb	r3, [r7, #7]
    548c:	429a      	cmp	r2, r3
    548e:	d2d6      	bcs.n	543e <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    5490:	68bb      	ldr	r3, [r7, #8]
    5492:	f1b3 3fff 	cmp.w	r3, #4294967295
    5496:	d003      	beq.n	54a0 <_ext_irq_handler+0xbc>
				callback(pin);
    5498:	4b18      	ldr	r3, [pc, #96]	; (54fc <_ext_irq_handler+0x118>)
    549a:	681b      	ldr	r3, [r3, #0]
    549c:	68b8      	ldr	r0, [r7, #8]
    549e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    54a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    54a4:	2201      	movs	r2, #1
    54a6:	fa02 f303 	lsl.w	r3, r2, r3
    54aa:	43da      	mvns	r2, r3
    54ac:	683b      	ldr	r3, [r7, #0]
    54ae:	4013      	ands	r3, r2
    54b0:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    54b2:	683b      	ldr	r3, [r7, #0]
    54b4:	4618      	mov	r0, r3
    54b6:	4b14      	ldr	r3, [pc, #80]	; (5508 <_ext_irq_handler+0x124>)
    54b8:	4798      	blx	r3
    54ba:	4603      	mov	r3, r0
    54bc:	b2db      	uxtb	r3, r3
    54be:	3b01      	subs	r3, #1
    54c0:	b2db      	uxtb	r3, r3
    54c2:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    54c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    54c8:	f1b3 3fff 	cmp.w	r3, #4294967295
    54cc:	d1b2      	bne.n	5434 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    54ce:	4808      	ldr	r0, [pc, #32]	; (54f0 <_ext_irq_handler+0x10c>)
    54d0:	4b08      	ldr	r3, [pc, #32]	; (54f4 <_ext_irq_handler+0x110>)
    54d2:	4798      	blx	r3
    54d4:	4603      	mov	r3, r0
    54d6:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    54d8:	683b      	ldr	r3, [r7, #0]
    54da:	4619      	mov	r1, r3
    54dc:	4804      	ldr	r0, [pc, #16]	; (54f0 <_ext_irq_handler+0x10c>)
    54de:	4b06      	ldr	r3, [pc, #24]	; (54f8 <_ext_irq_handler+0x114>)
    54e0:	4798      	blx	r3
	while (flags) {
    54e2:	683b      	ldr	r3, [r7, #0]
    54e4:	2b00      	cmp	r3, #0
    54e6:	d19b      	bne.n	5420 <_ext_irq_handler+0x3c>
	}
}
    54e8:	bf00      	nop
    54ea:	3710      	adds	r7, #16
    54ec:	46bd      	mov	sp, r7
    54ee:	bd80      	pop	{r7, pc}
    54f0:	40002800 	.word	0x40002800
    54f4:	00004f99 	.word	0x00004f99
    54f8:	00004fb1 	.word	0x00004fb1
    54fc:	20000e98 	.word	0x20000e98
    5500:	000147d4 	.word	0x000147d4
    5504:	00004211 	.word	0x00004211
    5508:	000141f1 	.word	0x000141f1
    550c:	0001478c 	.word	0x0001478c

00005510 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    5510:	b580      	push	{r7, lr}
    5512:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5514:	4b01      	ldr	r3, [pc, #4]	; (551c <EIC_0_Handler+0xc>)
    5516:	4798      	blx	r3
} /**
    5518:	bf00      	nop
    551a:	bd80      	pop	{r7, pc}
    551c:	000053e5 	.word	0x000053e5

00005520 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    5520:	b580      	push	{r7, lr}
    5522:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5524:	4b01      	ldr	r3, [pc, #4]	; (552c <EIC_1_Handler+0xc>)
    5526:	4798      	blx	r3
} /**
    5528:	bf00      	nop
    552a:	bd80      	pop	{r7, pc}
    552c:	000053e5 	.word	0x000053e5

00005530 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    5530:	b580      	push	{r7, lr}
    5532:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5534:	4b01      	ldr	r3, [pc, #4]	; (553c <EIC_3_Handler+0xc>)
    5536:	4798      	blx	r3
} /**
    5538:	bf00      	nop
    553a:	bd80      	pop	{r7, pc}
    553c:	000053e5 	.word	0x000053e5

00005540 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5540:	b580      	push	{r7, lr}
    5542:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5544:	4b01      	ldr	r3, [pc, #4]	; (554c <EIC_4_Handler+0xc>)
    5546:	4798      	blx	r3
} /**
    5548:	bf00      	nop
    554a:	bd80      	pop	{r7, pc}
    554c:	000053e5 	.word	0x000053e5

00005550 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5550:	b580      	push	{r7, lr}
    5552:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5554:	4b01      	ldr	r3, [pc, #4]	; (555c <EIC_5_Handler+0xc>)
    5556:	4798      	blx	r3
} /**
    5558:	bf00      	nop
    555a:	bd80      	pop	{r7, pc}
    555c:	000053e5 	.word	0x000053e5

00005560 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5560:	b580      	push	{r7, lr}
    5562:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5564:	4b01      	ldr	r3, [pc, #4]	; (556c <EIC_6_Handler+0xc>)
    5566:	4798      	blx	r3
} /**
    5568:	bf00      	nop
    556a:	bd80      	pop	{r7, pc}
    556c:	000053e5 	.word	0x000053e5

00005570 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    5570:	b580      	push	{r7, lr}
    5572:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5574:	4b01      	ldr	r3, [pc, #4]	; (557c <EIC_7_Handler+0xc>)
    5576:	4798      	blx	r3
} /**
    5578:	bf00      	nop
    557a:	bd80      	pop	{r7, pc}
    557c:	000053e5 	.word	0x000053e5

00005580 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    5580:	b580      	push	{r7, lr}
    5582:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5584:	4b01      	ldr	r3, [pc, #4]	; (558c <EIC_8_Handler+0xc>)
    5586:	4798      	blx	r3
} /**
    5588:	bf00      	nop
    558a:	bd80      	pop	{r7, pc}
    558c:	000053e5 	.word	0x000053e5

00005590 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    5590:	b580      	push	{r7, lr}
    5592:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5594:	4b01      	ldr	r3, [pc, #4]	; (559c <EIC_9_Handler+0xc>)
    5596:	4798      	blx	r3
}
    5598:	bf00      	nop
    559a:	bd80      	pop	{r7, pc}
    559c:	000053e5 	.word	0x000053e5

000055a0 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    55a0:	b480      	push	{r7}
    55a2:	b085      	sub	sp, #20
    55a4:	af00      	add	r7, sp, #0
    55a6:	60f8      	str	r0, [r7, #12]
    55a8:	460b      	mov	r3, r1
    55aa:	607a      	str	r2, [r7, #4]
    55ac:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    55ae:	7afa      	ldrb	r2, [r7, #11]
    55b0:	68fb      	ldr	r3, [r7, #12]
    55b2:	3248      	adds	r2, #72	; 0x48
    55b4:	6879      	ldr	r1, [r7, #4]
    55b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    55ba:	bf00      	nop
    55bc:	3714      	adds	r7, #20
    55be:	46bd      	mov	sp, r7
    55c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    55c4:	4770      	bx	lr

000055c6 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    55c6:	b480      	push	{r7}
    55c8:	b083      	sub	sp, #12
    55ca:	af00      	add	r7, sp, #0
    55cc:	6078      	str	r0, [r7, #4]
    55ce:	460b      	mov	r3, r1
    55d0:	70fb      	strb	r3, [r7, #3]
    55d2:	4613      	mov	r3, r2
    55d4:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    55d6:	78fb      	ldrb	r3, [r7, #3]
    55d8:	687a      	ldr	r2, [r7, #4]
    55da:	3304      	adds	r3, #4
    55dc:	00db      	lsls	r3, r3, #3
    55de:	4413      	add	r3, r2
    55e0:	78ba      	ldrb	r2, [r7, #2]
    55e2:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    55e4:	78fb      	ldrb	r3, [r7, #3]
    55e6:	78ba      	ldrb	r2, [r7, #2]
    55e8:	43d2      	mvns	r2, r2
    55ea:	b2d1      	uxtb	r1, r2
    55ec:	687a      	ldr	r2, [r7, #4]
    55ee:	3304      	adds	r3, #4
    55f0:	00db      	lsls	r3, r3, #3
    55f2:	4413      	add	r3, r2
    55f4:	460a      	mov	r2, r1
    55f6:	711a      	strb	r2, [r3, #4]
}
    55f8:	bf00      	nop
    55fa:	370c      	adds	r7, #12
    55fc:	46bd      	mov	sp, r7
    55fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5602:	4770      	bx	lr

00005604 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    5604:	b480      	push	{r7}
    5606:	b085      	sub	sp, #20
    5608:	af00      	add	r7, sp, #0
    560a:	60f8      	str	r0, [r7, #12]
    560c:	460b      	mov	r3, r1
    560e:	607a      	str	r2, [r7, #4]
    5610:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    5612:	7afa      	ldrb	r2, [r7, #11]
    5614:	68fb      	ldr	r3, [r7, #12]
    5616:	3204      	adds	r2, #4
    5618:	6879      	ldr	r1, [r7, #4]
    561a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    561e:	bf00      	nop
    5620:	3714      	adds	r7, #20
    5622:	46bd      	mov	sp, r7
    5624:	f85d 7b04 	ldr.w	r7, [sp], #4
    5628:	4770      	bx	lr
	...

0000562c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    562c:	b580      	push	{r7, lr}
    562e:	b082      	sub	sp, #8
    5630:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    5632:	2300      	movs	r3, #0
    5634:	71fb      	strb	r3, [r7, #7]
    5636:	e00b      	b.n	5650 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5638:	79fb      	ldrb	r3, [r7, #7]
    563a:	4a18      	ldr	r2, [pc, #96]	; (569c <_event_system_init+0x70>)
    563c:	5cd3      	ldrb	r3, [r2, r3]
    563e:	461a      	mov	r2, r3
    5640:	79fb      	ldrb	r3, [r7, #7]
    5642:	4619      	mov	r1, r3
    5644:	4816      	ldr	r0, [pc, #88]	; (56a0 <_event_system_init+0x74>)
    5646:	4b17      	ldr	r3, [pc, #92]	; (56a4 <_event_system_init+0x78>)
    5648:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    564a:	79fb      	ldrb	r3, [r7, #7]
    564c:	3301      	adds	r3, #1
    564e:	71fb      	strb	r3, [r7, #7]
    5650:	79fb      	ldrb	r3, [r7, #7]
    5652:	2b42      	cmp	r3, #66	; 0x42
    5654:	d9f0      	bls.n	5638 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    5656:	2300      	movs	r3, #0
    5658:	71fb      	strb	r3, [r7, #7]
    565a:	e016      	b.n	568a <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    565c:	79fb      	ldrb	r3, [r7, #7]
    565e:	4a12      	ldr	r2, [pc, #72]	; (56a8 <_event_system_init+0x7c>)
    5660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    5664:	461a      	mov	r2, r3
    5666:	79fb      	ldrb	r3, [r7, #7]
    5668:	4619      	mov	r1, r3
    566a:	480d      	ldr	r0, [pc, #52]	; (56a0 <_event_system_init+0x74>)
    566c:	4b0f      	ldr	r3, [pc, #60]	; (56ac <_event_system_init+0x80>)
    566e:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5670:	79fb      	ldrb	r3, [r7, #7]
    5672:	4a0f      	ldr	r2, [pc, #60]	; (56b0 <_event_system_init+0x84>)
    5674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5678:	b2da      	uxtb	r2, r3
    567a:	79fb      	ldrb	r3, [r7, #7]
    567c:	4619      	mov	r1, r3
    567e:	4808      	ldr	r0, [pc, #32]	; (56a0 <_event_system_init+0x74>)
    5680:	4b0c      	ldr	r3, [pc, #48]	; (56b4 <_event_system_init+0x88>)
    5682:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    5684:	79fb      	ldrb	r3, [r7, #7]
    5686:	3301      	adds	r3, #1
    5688:	71fb      	strb	r3, [r7, #7]
    568a:	79fb      	ldrb	r3, [r7, #7]
    568c:	2b1f      	cmp	r3, #31
    568e:	d9e5      	bls.n	565c <_event_system_init+0x30>
	}

	return ERR_NONE;
    5690:	2300      	movs	r3, #0
}
    5692:	4618      	mov	r0, r3
    5694:	3708      	adds	r7, #8
    5696:	46bd      	mov	sp, r7
    5698:	bd80      	pop	{r7, pc}
    569a:	bf00      	nop
    569c:	000147ec 	.word	0x000147ec
    56a0:	4100e000 	.word	0x4100e000
    56a4:	000055a1 	.word	0x000055a1
    56a8:	00014830 	.word	0x00014830
    56ac:	00005605 	.word	0x00005605
    56b0:	00014870 	.word	0x00014870
    56b4:	000055c7 	.word	0x000055c7

000056b8 <hri_gclk_wait_for_sync>:
{
    56b8:	b480      	push	{r7}
    56ba:	b083      	sub	sp, #12
    56bc:	af00      	add	r7, sp, #0
    56be:	6078      	str	r0, [r7, #4]
    56c0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    56c2:	bf00      	nop
    56c4:	687b      	ldr	r3, [r7, #4]
    56c6:	685a      	ldr	r2, [r3, #4]
    56c8:	683b      	ldr	r3, [r7, #0]
    56ca:	4013      	ands	r3, r2
    56cc:	2b00      	cmp	r3, #0
    56ce:	d1f9      	bne.n	56c4 <hri_gclk_wait_for_sync+0xc>
}
    56d0:	bf00      	nop
    56d2:	370c      	adds	r7, #12
    56d4:	46bd      	mov	sp, r7
    56d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56da:	4770      	bx	lr

000056dc <hri_gclk_write_GENCTRL_reg>:
{
    56dc:	b580      	push	{r7, lr}
    56de:	b084      	sub	sp, #16
    56e0:	af00      	add	r7, sp, #0
    56e2:	60f8      	str	r0, [r7, #12]
    56e4:	460b      	mov	r3, r1
    56e6:	607a      	str	r2, [r7, #4]
    56e8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    56ea:	7afa      	ldrb	r2, [r7, #11]
    56ec:	68fb      	ldr	r3, [r7, #12]
    56ee:	3208      	adds	r2, #8
    56f0:	6879      	ldr	r1, [r7, #4]
    56f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    56f6:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    56fa:	68f8      	ldr	r0, [r7, #12]
    56fc:	4b02      	ldr	r3, [pc, #8]	; (5708 <hri_gclk_write_GENCTRL_reg+0x2c>)
    56fe:	4798      	blx	r3
}
    5700:	bf00      	nop
    5702:	3710      	adds	r7, #16
    5704:	46bd      	mov	sp, r7
    5706:	bd80      	pop	{r7, pc}
    5708:	000056b9 	.word	0x000056b9

0000570c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    570c:	b580      	push	{r7, lr}
    570e:	b082      	sub	sp, #8
    5710:	af00      	add	r7, sp, #0
    5712:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    5714:	687b      	ldr	r3, [r7, #4]
    5716:	f003 0301 	and.w	r3, r3, #1
    571a:	2b00      	cmp	r3, #0
    571c:	d004      	beq.n	5728 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    571e:	4a3b      	ldr	r2, [pc, #236]	; (580c <_gclk_init_generators_by_fref+0x100>)
    5720:	2100      	movs	r1, #0
    5722:	483b      	ldr	r0, [pc, #236]	; (5810 <_gclk_init_generators_by_fref+0x104>)
    5724:	4b3b      	ldr	r3, [pc, #236]	; (5814 <_gclk_init_generators_by_fref+0x108>)
    5726:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5728:	687b      	ldr	r3, [r7, #4]
    572a:	f003 0302 	and.w	r3, r3, #2
    572e:	2b00      	cmp	r3, #0
    5730:	d004      	beq.n	573c <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    5732:	4a39      	ldr	r2, [pc, #228]	; (5818 <_gclk_init_generators_by_fref+0x10c>)
    5734:	2101      	movs	r1, #1
    5736:	4836      	ldr	r0, [pc, #216]	; (5810 <_gclk_init_generators_by_fref+0x104>)
    5738:	4b36      	ldr	r3, [pc, #216]	; (5814 <_gclk_init_generators_by_fref+0x108>)
    573a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    573c:	687b      	ldr	r3, [r7, #4]
    573e:	f003 0304 	and.w	r3, r3, #4
    5742:	2b00      	cmp	r3, #0
    5744:	d004      	beq.n	5750 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    5746:	4a35      	ldr	r2, [pc, #212]	; (581c <_gclk_init_generators_by_fref+0x110>)
    5748:	2102      	movs	r1, #2
    574a:	4831      	ldr	r0, [pc, #196]	; (5810 <_gclk_init_generators_by_fref+0x104>)
    574c:	4b31      	ldr	r3, [pc, #196]	; (5814 <_gclk_init_generators_by_fref+0x108>)
    574e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5750:	687b      	ldr	r3, [r7, #4]
    5752:	f003 0308 	and.w	r3, r3, #8
    5756:	2b00      	cmp	r3, #0
    5758:	d004      	beq.n	5764 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    575a:	4a31      	ldr	r2, [pc, #196]	; (5820 <_gclk_init_generators_by_fref+0x114>)
    575c:	2103      	movs	r1, #3
    575e:	482c      	ldr	r0, [pc, #176]	; (5810 <_gclk_init_generators_by_fref+0x104>)
    5760:	4b2c      	ldr	r3, [pc, #176]	; (5814 <_gclk_init_generators_by_fref+0x108>)
    5762:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    5764:	687b      	ldr	r3, [r7, #4]
    5766:	f003 0310 	and.w	r3, r3, #16
    576a:	2b00      	cmp	r3, #0
    576c:	d004      	beq.n	5778 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    576e:	4a2d      	ldr	r2, [pc, #180]	; (5824 <_gclk_init_generators_by_fref+0x118>)
    5770:	2104      	movs	r1, #4
    5772:	4827      	ldr	r0, [pc, #156]	; (5810 <_gclk_init_generators_by_fref+0x104>)
    5774:	4b27      	ldr	r3, [pc, #156]	; (5814 <_gclk_init_generators_by_fref+0x108>)
    5776:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    5778:	687b      	ldr	r3, [r7, #4]
    577a:	f003 0320 	and.w	r3, r3, #32
    577e:	2b00      	cmp	r3, #0
    5780:	d004      	beq.n	578c <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    5782:	4a29      	ldr	r2, [pc, #164]	; (5828 <_gclk_init_generators_by_fref+0x11c>)
    5784:	2105      	movs	r1, #5
    5786:	4822      	ldr	r0, [pc, #136]	; (5810 <_gclk_init_generators_by_fref+0x104>)
    5788:	4b22      	ldr	r3, [pc, #136]	; (5814 <_gclk_init_generators_by_fref+0x108>)
    578a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    578c:	687b      	ldr	r3, [r7, #4]
    578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5792:	2b00      	cmp	r3, #0
    5794:	d004      	beq.n	57a0 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    5796:	4a25      	ldr	r2, [pc, #148]	; (582c <_gclk_init_generators_by_fref+0x120>)
    5798:	2106      	movs	r1, #6
    579a:	481d      	ldr	r0, [pc, #116]	; (5810 <_gclk_init_generators_by_fref+0x104>)
    579c:	4b1d      	ldr	r3, [pc, #116]	; (5814 <_gclk_init_generators_by_fref+0x108>)
    579e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    57a0:	687b      	ldr	r3, [r7, #4]
    57a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    57a6:	2b00      	cmp	r3, #0
    57a8:	d004      	beq.n	57b4 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    57aa:	4a21      	ldr	r2, [pc, #132]	; (5830 <_gclk_init_generators_by_fref+0x124>)
    57ac:	2107      	movs	r1, #7
    57ae:	4818      	ldr	r0, [pc, #96]	; (5810 <_gclk_init_generators_by_fref+0x104>)
    57b0:	4b18      	ldr	r3, [pc, #96]	; (5814 <_gclk_init_generators_by_fref+0x108>)
    57b2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    57b4:	687b      	ldr	r3, [r7, #4]
    57b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    57ba:	2b00      	cmp	r3, #0
    57bc:	d004      	beq.n	57c8 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    57be:	4a1d      	ldr	r2, [pc, #116]	; (5834 <_gclk_init_generators_by_fref+0x128>)
    57c0:	2108      	movs	r1, #8
    57c2:	4813      	ldr	r0, [pc, #76]	; (5810 <_gclk_init_generators_by_fref+0x104>)
    57c4:	4b13      	ldr	r3, [pc, #76]	; (5814 <_gclk_init_generators_by_fref+0x108>)
    57c6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
    57ce:	2b00      	cmp	r3, #0
    57d0:	d004      	beq.n	57dc <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    57d2:	4a19      	ldr	r2, [pc, #100]	; (5838 <_gclk_init_generators_by_fref+0x12c>)
    57d4:	2109      	movs	r1, #9
    57d6:	480e      	ldr	r0, [pc, #56]	; (5810 <_gclk_init_generators_by_fref+0x104>)
    57d8:	4b0e      	ldr	r3, [pc, #56]	; (5814 <_gclk_init_generators_by_fref+0x108>)
    57da:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    57dc:	687b      	ldr	r3, [r7, #4]
    57de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    57e2:	2b00      	cmp	r3, #0
    57e4:	d004      	beq.n	57f0 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    57e6:	4a15      	ldr	r2, [pc, #84]	; (583c <_gclk_init_generators_by_fref+0x130>)
    57e8:	210a      	movs	r1, #10
    57ea:	4809      	ldr	r0, [pc, #36]	; (5810 <_gclk_init_generators_by_fref+0x104>)
    57ec:	4b09      	ldr	r3, [pc, #36]	; (5814 <_gclk_init_generators_by_fref+0x108>)
    57ee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    57f0:	687b      	ldr	r3, [r7, #4]
    57f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    57f6:	2b00      	cmp	r3, #0
    57f8:	d004      	beq.n	5804 <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    57fa:	4a11      	ldr	r2, [pc, #68]	; (5840 <_gclk_init_generators_by_fref+0x134>)
    57fc:	210b      	movs	r1, #11
    57fe:	4804      	ldr	r0, [pc, #16]	; (5810 <_gclk_init_generators_by_fref+0x104>)
    5800:	4b04      	ldr	r3, [pc, #16]	; (5814 <_gclk_init_generators_by_fref+0x108>)
    5802:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    5804:	bf00      	nop
    5806:	3708      	adds	r7, #8
    5808:	46bd      	mov	sp, r7
    580a:	bd80      	pop	{r7, pc}
    580c:	00010107 	.word	0x00010107
    5810:	40001c00 	.word	0x40001c00
    5814:	000056dd 	.word	0x000056dd
    5818:	00010907 	.word	0x00010907
    581c:	00010906 	.word	0x00010906
    5820:	00020908 	.word	0x00020908
    5824:	00010901 	.word	0x00010901
    5828:	00062901 	.word	0x00062901
    582c:	000c2901 	.word	0x000c2901
    5830:	00082908 	.word	0x00082908
    5834:	00032901 	.word	0x00032901
    5838:	00011908 	.word	0x00011908
    583c:	00010905 	.word	0x00010905
    5840:	00041905 	.word	0x00041905

00005844 <hri_mclk_write_CPUDIV_reg>:
{
    5844:	b480      	push	{r7}
    5846:	b083      	sub	sp, #12
    5848:	af00      	add	r7, sp, #0
    584a:	6078      	str	r0, [r7, #4]
    584c:	460b      	mov	r3, r1
    584e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5850:	687b      	ldr	r3, [r7, #4]
    5852:	78fa      	ldrb	r2, [r7, #3]
    5854:	715a      	strb	r2, [r3, #5]
}
    5856:	bf00      	nop
    5858:	370c      	adds	r7, #12
    585a:	46bd      	mov	sp, r7
    585c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5860:	4770      	bx	lr
	...

00005864 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    5864:	b580      	push	{r7, lr}
    5866:	b082      	sub	sp, #8
    5868:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    586a:	4b05      	ldr	r3, [pc, #20]	; (5880 <_mclk_init+0x1c>)
    586c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    586e:	2101      	movs	r1, #1
    5870:	6878      	ldr	r0, [r7, #4]
    5872:	4b04      	ldr	r3, [pc, #16]	; (5884 <_mclk_init+0x20>)
    5874:	4798      	blx	r3
}
    5876:	bf00      	nop
    5878:	3708      	adds	r7, #8
    587a:	46bd      	mov	sp, r7
    587c:	bd80      	pop	{r7, pc}
    587e:	bf00      	nop
    5880:	40000800 	.word	0x40000800
    5884:	00005845 	.word	0x00005845

00005888 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    5888:	b480      	push	{r7}
    588a:	b083      	sub	sp, #12
    588c:	af00      	add	r7, sp, #0
    588e:	6078      	str	r0, [r7, #4]
    5890:	460b      	mov	r3, r1
    5892:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5894:	687b      	ldr	r3, [r7, #4]
    5896:	78fa      	ldrb	r2, [r7, #3]
    5898:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    589a:	bf00      	nop
    589c:	370c      	adds	r7, #12
    589e:	46bd      	mov	sp, r7
    58a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    58a4:	4770      	bx	lr

000058a6 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    58a6:	b480      	push	{r7}
    58a8:	b083      	sub	sp, #12
    58aa:	af00      	add	r7, sp, #0
    58ac:	6078      	str	r0, [r7, #4]
    58ae:	460b      	mov	r3, r1
    58b0:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    58b2:	687b      	ldr	r3, [r7, #4]
    58b4:	887a      	ldrh	r2, [r7, #2]
    58b6:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    58b8:	bf00      	nop
    58ba:	370c      	adds	r7, #12
    58bc:	46bd      	mov	sp, r7
    58be:	f85d 7b04 	ldr.w	r7, [sp], #4
    58c2:	4770      	bx	lr

000058c4 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    58c4:	b480      	push	{r7}
    58c6:	b083      	sub	sp, #12
    58c8:	af00      	add	r7, sp, #0
    58ca:	6078      	str	r0, [r7, #4]
    58cc:	460b      	mov	r3, r1
    58ce:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	78fa      	ldrb	r2, [r7, #3]
    58d4:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    58d6:	bf00      	nop
    58d8:	370c      	adds	r7, #12
    58da:	46bd      	mov	sp, r7
    58dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    58e0:	4770      	bx	lr

000058e2 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    58e2:	b480      	push	{r7}
    58e4:	b083      	sub	sp, #12
    58e6:	af00      	add	r7, sp, #0
    58e8:	6078      	str	r0, [r7, #4]
    58ea:	460b      	mov	r3, r1
    58ec:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    58ee:	687b      	ldr	r3, [r7, #4]
    58f0:	78fa      	ldrb	r2, [r7, #3]
    58f2:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    58f4:	bf00      	nop
    58f6:	370c      	adds	r7, #12
    58f8:	46bd      	mov	sp, r7
    58fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    58fe:	4770      	bx	lr

00005900 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5900:	b480      	push	{r7}
    5902:	b085      	sub	sp, #20
    5904:	af00      	add	r7, sp, #0
    5906:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5908:	687b      	ldr	r3, [r7, #4]
    590a:	69db      	ldr	r3, [r3, #28]
    590c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    590e:	68fb      	ldr	r3, [r7, #12]
    5910:	0a1b      	lsrs	r3, r3, #8
    5912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5916:	60fb      	str	r3, [r7, #12]
	return tmp;
    5918:	68fb      	ldr	r3, [r7, #12]
}
    591a:	4618      	mov	r0, r3
    591c:	3714      	adds	r7, #20
    591e:	46bd      	mov	sp, r7
    5920:	f85d 7b04 	ldr.w	r7, [sp], #4
    5924:	4770      	bx	lr

00005926 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    5926:	b480      	push	{r7}
    5928:	b083      	sub	sp, #12
    592a:	af00      	add	r7, sp, #0
    592c:	6078      	str	r0, [r7, #4]
    592e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5930:	687b      	ldr	r3, [r7, #4]
    5932:	683a      	ldr	r2, [r7, #0]
    5934:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5936:	bf00      	nop
    5938:	370c      	adds	r7, #12
    593a:	46bd      	mov	sp, r7
    593c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5940:	4770      	bx	lr
	...

00005944 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    5944:	b580      	push	{r7, lr}
    5946:	b082      	sub	sp, #8
    5948:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    594a:	4b13      	ldr	r3, [pc, #76]	; (5998 <_osc32kctrl_init_sources+0x54>)
    594c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    594e:	2300      	movs	r3, #0
    5950:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    5952:	f242 018e 	movw	r1, #8334	; 0x208e
    5956:	6878      	ldr	r0, [r7, #4]
    5958:	4b10      	ldr	r3, [pc, #64]	; (599c <_osc32kctrl_init_sources+0x58>)
    595a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    595c:	2100      	movs	r1, #0
    595e:	6878      	ldr	r0, [r7, #4]
    5960:	4b0f      	ldr	r3, [pc, #60]	; (59a0 <_osc32kctrl_init_sources+0x5c>)
    5962:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    5964:	2100      	movs	r1, #0
    5966:	6878      	ldr	r0, [r7, #4]
    5968:	4b0e      	ldr	r3, [pc, #56]	; (59a4 <_osc32kctrl_init_sources+0x60>)
    596a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    596c:	6878      	ldr	r0, [r7, #4]
    596e:	4b0e      	ldr	r3, [pc, #56]	; (59a8 <_osc32kctrl_init_sources+0x64>)
    5970:	4798      	blx	r3
    5972:	4603      	mov	r3, r0
    5974:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5976:	887b      	ldrh	r3, [r7, #2]
    5978:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    597a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    597e:	4619      	mov	r1, r3
    5980:	6878      	ldr	r0, [r7, #4]
    5982:	4b0a      	ldr	r3, [pc, #40]	; (59ac <_osc32kctrl_init_sources+0x68>)
    5984:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    5986:	2100      	movs	r1, #0
    5988:	6878      	ldr	r0, [r7, #4]
    598a:	4b09      	ldr	r3, [pc, #36]	; (59b0 <_osc32kctrl_init_sources+0x6c>)
    598c:	4798      	blx	r3
	(void)calib;
}
    598e:	bf00      	nop
    5990:	3708      	adds	r7, #8
    5992:	46bd      	mov	sp, r7
    5994:	bd80      	pop	{r7, pc}
    5996:	bf00      	nop
    5998:	40001400 	.word	0x40001400
    599c:	000058a7 	.word	0x000058a7
    59a0:	000058c5 	.word	0x000058c5
    59a4:	000058e3 	.word	0x000058e3
    59a8:	00005901 	.word	0x00005901
    59ac:	00005927 	.word	0x00005927
    59b0:	00005889 	.word	0x00005889

000059b4 <hri_gclk_wait_for_sync>:
{
    59b4:	b480      	push	{r7}
    59b6:	b083      	sub	sp, #12
    59b8:	af00      	add	r7, sp, #0
    59ba:	6078      	str	r0, [r7, #4]
    59bc:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    59be:	bf00      	nop
    59c0:	687b      	ldr	r3, [r7, #4]
    59c2:	685a      	ldr	r2, [r3, #4]
    59c4:	683b      	ldr	r3, [r7, #0]
    59c6:	4013      	ands	r3, r2
    59c8:	2b00      	cmp	r3, #0
    59ca:	d1f9      	bne.n	59c0 <hri_gclk_wait_for_sync+0xc>
}
    59cc:	bf00      	nop
    59ce:	370c      	adds	r7, #12
    59d0:	46bd      	mov	sp, r7
    59d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    59d6:	4770      	bx	lr

000059d8 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    59d8:	b480      	push	{r7}
    59da:	b083      	sub	sp, #12
    59dc:	af00      	add	r7, sp, #0
    59de:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	685b      	ldr	r3, [r3, #4]
    59e4:	089b      	lsrs	r3, r3, #2
    59e6:	f003 0301 	and.w	r3, r3, #1
    59ea:	2b00      	cmp	r3, #0
    59ec:	bf14      	ite	ne
    59ee:	2301      	movne	r3, #1
    59f0:	2300      	moveq	r3, #0
    59f2:	b2db      	uxtb	r3, r3
}
    59f4:	4618      	mov	r0, r3
    59f6:	370c      	adds	r7, #12
    59f8:	46bd      	mov	sp, r7
    59fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    59fe:	4770      	bx	lr

00005a00 <hri_gclk_read_SYNCBUSY_reg>:
{
    5a00:	b480      	push	{r7}
    5a02:	b083      	sub	sp, #12
    5a04:	af00      	add	r7, sp, #0
    5a06:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5a08:	687b      	ldr	r3, [r7, #4]
    5a0a:	685b      	ldr	r3, [r3, #4]
}
    5a0c:	4618      	mov	r0, r3
    5a0e:	370c      	adds	r7, #12
    5a10:	46bd      	mov	sp, r7
    5a12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a16:	4770      	bx	lr

00005a18 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5a18:	b580      	push	{r7, lr}
    5a1a:	b086      	sub	sp, #24
    5a1c:	af00      	add	r7, sp, #0
    5a1e:	60f8      	str	r0, [r7, #12]
    5a20:	460b      	mov	r3, r1
    5a22:	607a      	str	r2, [r7, #4]
    5a24:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5a26:	7afa      	ldrb	r2, [r7, #11]
    5a28:	68fb      	ldr	r3, [r7, #12]
    5a2a:	3208      	adds	r2, #8
    5a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a30:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5a32:	697b      	ldr	r3, [r7, #20]
    5a34:	f023 030f 	bic.w	r3, r3, #15
    5a38:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    5a3a:	687b      	ldr	r3, [r7, #4]
    5a3c:	f003 030f 	and.w	r3, r3, #15
    5a40:	697a      	ldr	r2, [r7, #20]
    5a42:	4313      	orrs	r3, r2
    5a44:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5a46:	7afa      	ldrb	r2, [r7, #11]
    5a48:	68fb      	ldr	r3, [r7, #12]
    5a4a:	3208      	adds	r2, #8
    5a4c:	6979      	ldr	r1, [r7, #20]
    5a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5a52:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5a56:	68f8      	ldr	r0, [r7, #12]
    5a58:	4b02      	ldr	r3, [pc, #8]	; (5a64 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    5a5a:	4798      	blx	r3
}
    5a5c:	bf00      	nop
    5a5e:	3718      	adds	r7, #24
    5a60:	46bd      	mov	sp, r7
    5a62:	bd80      	pop	{r7, pc}
    5a64:	000059b5 	.word	0x000059b5

00005a68 <hri_gclk_write_PCHCTRL_reg>:
{
    5a68:	b480      	push	{r7}
    5a6a:	b085      	sub	sp, #20
    5a6c:	af00      	add	r7, sp, #0
    5a6e:	60f8      	str	r0, [r7, #12]
    5a70:	460b      	mov	r3, r1
    5a72:	607a      	str	r2, [r7, #4]
    5a74:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5a76:	7afa      	ldrb	r2, [r7, #11]
    5a78:	68fb      	ldr	r3, [r7, #12]
    5a7a:	3220      	adds	r2, #32
    5a7c:	6879      	ldr	r1, [r7, #4]
    5a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5a82:	bf00      	nop
    5a84:	3714      	adds	r7, #20
    5a86:	46bd      	mov	sp, r7
    5a88:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a8c:	4770      	bx	lr

00005a8e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    5a8e:	b480      	push	{r7}
    5a90:	b085      	sub	sp, #20
    5a92:	af00      	add	r7, sp, #0
    5a94:	60f8      	str	r0, [r7, #12]
    5a96:	460b      	mov	r3, r1
    5a98:	607a      	str	r2, [r7, #4]
    5a9a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5a9c:	bf00      	nop
    5a9e:	7afa      	ldrb	r2, [r7, #11]
    5aa0:	68f9      	ldr	r1, [r7, #12]
    5aa2:	4613      	mov	r3, r2
    5aa4:	009b      	lsls	r3, r3, #2
    5aa6:	4413      	add	r3, r2
    5aa8:	009b      	lsls	r3, r3, #2
    5aaa:	440b      	add	r3, r1
    5aac:	333c      	adds	r3, #60	; 0x3c
    5aae:	681a      	ldr	r2, [r3, #0]
    5ab0:	687b      	ldr	r3, [r7, #4]
    5ab2:	4013      	ands	r3, r2
    5ab4:	2b00      	cmp	r3, #0
    5ab6:	d1f2      	bne.n	5a9e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5ab8:	bf00      	nop
    5aba:	3714      	adds	r7, #20
    5abc:	46bd      	mov	sp, r7
    5abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ac2:	4770      	bx	lr

00005ac4 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    5ac4:	b480      	push	{r7}
    5ac6:	b083      	sub	sp, #12
    5ac8:	af00      	add	r7, sp, #0
    5aca:	6078      	str	r0, [r7, #4]
    5acc:	460b      	mov	r3, r1
    5ace:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5ad0:	78fa      	ldrb	r2, [r7, #3]
    5ad2:	6879      	ldr	r1, [r7, #4]
    5ad4:	4613      	mov	r3, r2
    5ad6:	009b      	lsls	r3, r3, #2
    5ad8:	4413      	add	r3, r2
    5ada:	009b      	lsls	r3, r3, #2
    5adc:	440b      	add	r3, r1
    5ade:	3340      	adds	r3, #64	; 0x40
    5ae0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    5ae2:	f003 0301 	and.w	r3, r3, #1
    5ae6:	2b00      	cmp	r3, #0
    5ae8:	bf14      	ite	ne
    5aea:	2301      	movne	r3, #1
    5aec:	2300      	moveq	r3, #0
    5aee:	b2db      	uxtb	r3, r3
}
    5af0:	4618      	mov	r0, r3
    5af2:	370c      	adds	r7, #12
    5af4:	46bd      	mov	sp, r7
    5af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5afa:	4770      	bx	lr

00005afc <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5afc:	b480      	push	{r7}
    5afe:	b083      	sub	sp, #12
    5b00:	af00      	add	r7, sp, #0
    5b02:	6078      	str	r0, [r7, #4]
    5b04:	460b      	mov	r3, r1
    5b06:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5b08:	78fa      	ldrb	r2, [r7, #3]
    5b0a:	6879      	ldr	r1, [r7, #4]
    5b0c:	4613      	mov	r3, r2
    5b0e:	009b      	lsls	r3, r3, #2
    5b10:	4413      	add	r3, r2
    5b12:	009b      	lsls	r3, r3, #2
    5b14:	440b      	add	r3, r1
    5b16:	3340      	adds	r3, #64	; 0x40
    5b18:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5b1a:	085b      	lsrs	r3, r3, #1
    5b1c:	f003 0301 	and.w	r3, r3, #1
    5b20:	2b00      	cmp	r3, #0
    5b22:	bf14      	ite	ne
    5b24:	2301      	movne	r3, #1
    5b26:	2300      	moveq	r3, #0
    5b28:	b2db      	uxtb	r3, r3
}
    5b2a:	4618      	mov	r0, r3
    5b2c:	370c      	adds	r7, #12
    5b2e:	46bd      	mov	sp, r7
    5b30:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b34:	4770      	bx	lr
	...

00005b38 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5b38:	b580      	push	{r7, lr}
    5b3a:	b082      	sub	sp, #8
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	6078      	str	r0, [r7, #4]
    5b40:	460b      	mov	r3, r1
    5b42:	70fb      	strb	r3, [r7, #3]
    5b44:	4613      	mov	r3, r2
    5b46:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5b48:	78fa      	ldrb	r2, [r7, #3]
    5b4a:	6879      	ldr	r1, [r7, #4]
    5b4c:	4613      	mov	r3, r2
    5b4e:	009b      	lsls	r3, r3, #2
    5b50:	4413      	add	r3, r2
    5b52:	009b      	lsls	r3, r3, #2
    5b54:	440b      	add	r3, r1
    5b56:	3330      	adds	r3, #48	; 0x30
    5b58:	78ba      	ldrb	r2, [r7, #2]
    5b5a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    5b5c:	78fb      	ldrb	r3, [r7, #3]
    5b5e:	2202      	movs	r2, #2
    5b60:	4619      	mov	r1, r3
    5b62:	6878      	ldr	r0, [r7, #4]
    5b64:	4b02      	ldr	r3, [pc, #8]	; (5b70 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5b66:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5b68:	bf00      	nop
    5b6a:	3708      	adds	r7, #8
    5b6c:	46bd      	mov	sp, r7
    5b6e:	bd80      	pop	{r7, pc}
    5b70:	00005a8f 	.word	0x00005a8f

00005b74 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5b74:	b580      	push	{r7, lr}
    5b76:	b084      	sub	sp, #16
    5b78:	af00      	add	r7, sp, #0
    5b7a:	60f8      	str	r0, [r7, #12]
    5b7c:	460b      	mov	r3, r1
    5b7e:	607a      	str	r2, [r7, #4]
    5b80:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5b82:	7afa      	ldrb	r2, [r7, #11]
    5b84:	68f9      	ldr	r1, [r7, #12]
    5b86:	4613      	mov	r3, r2
    5b88:	009b      	lsls	r3, r3, #2
    5b8a:	4413      	add	r3, r2
    5b8c:	009b      	lsls	r3, r3, #2
    5b8e:	440b      	add	r3, r1
    5b90:	3334      	adds	r3, #52	; 0x34
    5b92:	687a      	ldr	r2, [r7, #4]
    5b94:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5b96:	7afb      	ldrb	r3, [r7, #11]
    5b98:	2206      	movs	r2, #6
    5b9a:	4619      	mov	r1, r3
    5b9c:	68f8      	ldr	r0, [r7, #12]
    5b9e:	4b03      	ldr	r3, [pc, #12]	; (5bac <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5ba0:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5ba2:	bf00      	nop
    5ba4:	3710      	adds	r7, #16
    5ba6:	46bd      	mov	sp, r7
    5ba8:	bd80      	pop	{r7, pc}
    5baa:	bf00      	nop
    5bac:	00005a8f 	.word	0x00005a8f

00005bb0 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5bb0:	b480      	push	{r7}
    5bb2:	b085      	sub	sp, #20
    5bb4:	af00      	add	r7, sp, #0
    5bb6:	60f8      	str	r0, [r7, #12]
    5bb8:	460b      	mov	r3, r1
    5bba:	607a      	str	r2, [r7, #4]
    5bbc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5bbe:	7afa      	ldrb	r2, [r7, #11]
    5bc0:	68f9      	ldr	r1, [r7, #12]
    5bc2:	4613      	mov	r3, r2
    5bc4:	009b      	lsls	r3, r3, #2
    5bc6:	4413      	add	r3, r2
    5bc8:	009b      	lsls	r3, r3, #2
    5bca:	440b      	add	r3, r1
    5bcc:	3338      	adds	r3, #56	; 0x38
    5bce:	687a      	ldr	r2, [r7, #4]
    5bd0:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5bd2:	bf00      	nop
    5bd4:	3714      	adds	r7, #20
    5bd6:	46bd      	mov	sp, r7
    5bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bdc:	4770      	bx	lr

00005bde <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5bde:	b480      	push	{r7}
    5be0:	b083      	sub	sp, #12
    5be2:	af00      	add	r7, sp, #0
    5be4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	691b      	ldr	r3, [r3, #16]
    5bea:	085b      	lsrs	r3, r3, #1
    5bec:	f003 0301 	and.w	r3, r3, #1
    5bf0:	2b00      	cmp	r3, #0
    5bf2:	bf14      	ite	ne
    5bf4:	2301      	movne	r3, #1
    5bf6:	2300      	moveq	r3, #0
    5bf8:	b2db      	uxtb	r3, r3
}
    5bfa:	4618      	mov	r0, r3
    5bfc:	370c      	adds	r7, #12
    5bfe:	46bd      	mov	sp, r7
    5c00:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c04:	4770      	bx	lr

00005c06 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5c06:	b480      	push	{r7}
    5c08:	b083      	sub	sp, #12
    5c0a:	af00      	add	r7, sp, #0
    5c0c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5c0e:	687b      	ldr	r3, [r7, #4]
    5c10:	691b      	ldr	r3, [r3, #16]
    5c12:	0a1b      	lsrs	r3, r3, #8
    5c14:	f003 0301 	and.w	r3, r3, #1
    5c18:	2b00      	cmp	r3, #0
    5c1a:	bf14      	ite	ne
    5c1c:	2301      	movne	r3, #1
    5c1e:	2300      	moveq	r3, #0
    5c20:	b2db      	uxtb	r3, r3
}
    5c22:	4618      	mov	r0, r3
    5c24:	370c      	adds	r7, #12
    5c26:	46bd      	mov	sp, r7
    5c28:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c2c:	4770      	bx	lr

00005c2e <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5c2e:	b480      	push	{r7}
    5c30:	b085      	sub	sp, #20
    5c32:	af00      	add	r7, sp, #0
    5c34:	6078      	str	r0, [r7, #4]
    5c36:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5c38:	687b      	ldr	r3, [r7, #4]
    5c3a:	691b      	ldr	r3, [r3, #16]
    5c3c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5c3e:	68fa      	ldr	r2, [r7, #12]
    5c40:	683b      	ldr	r3, [r7, #0]
    5c42:	4013      	ands	r3, r2
    5c44:	60fb      	str	r3, [r7, #12]
	return tmp;
    5c46:	68fb      	ldr	r3, [r7, #12]
}
    5c48:	4618      	mov	r0, r3
    5c4a:	3714      	adds	r7, #20
    5c4c:	46bd      	mov	sp, r7
    5c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c52:	4770      	bx	lr

00005c54 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5c54:	b480      	push	{r7}
    5c56:	b085      	sub	sp, #20
    5c58:	af00      	add	r7, sp, #0
    5c5a:	60f8      	str	r0, [r7, #12]
    5c5c:	460b      	mov	r3, r1
    5c5e:	607a      	str	r2, [r7, #4]
    5c60:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5c62:	7afb      	ldrb	r3, [r7, #11]
    5c64:	68fa      	ldr	r2, [r7, #12]
    5c66:	3304      	adds	r3, #4
    5c68:	009b      	lsls	r3, r3, #2
    5c6a:	4413      	add	r3, r2
    5c6c:	687a      	ldr	r2, [r7, #4]
    5c6e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5c70:	bf00      	nop
    5c72:	3714      	adds	r7, #20
    5c74:	46bd      	mov	sp, r7
    5c76:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c7a:	4770      	bx	lr

00005c7c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    5c7c:	b480      	push	{r7}
    5c7e:	b083      	sub	sp, #12
    5c80:	af00      	add	r7, sp, #0
    5c82:	6078      	str	r0, [r7, #4]
    5c84:	460b      	mov	r3, r1
    5c86:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5c88:	687b      	ldr	r3, [r7, #4]
    5c8a:	78fa      	ldrb	r2, [r7, #3]
    5c8c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5c8e:	bf00      	nop
    5c90:	370c      	adds	r7, #12
    5c92:	46bd      	mov	sp, r7
    5c94:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c98:	4770      	bx	lr

00005c9a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    5c9a:	b480      	push	{r7}
    5c9c:	b085      	sub	sp, #20
    5c9e:	af00      	add	r7, sp, #0
    5ca0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5ca2:	687b      	ldr	r3, [r7, #4]
    5ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
    5ca8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5caa:	7bfb      	ldrb	r3, [r7, #15]
    5cac:	f003 0301 	and.w	r3, r3, #1
    5cb0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5cb2:	7bfb      	ldrb	r3, [r7, #15]
    5cb4:	2b00      	cmp	r3, #0
    5cb6:	bf14      	ite	ne
    5cb8:	2301      	movne	r3, #1
    5cba:	2300      	moveq	r3, #0
    5cbc:	b2db      	uxtb	r3, r3
}
    5cbe:	4618      	mov	r0, r3
    5cc0:	3714      	adds	r7, #20
    5cc2:	46bd      	mov	sp, r7
    5cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cc8:	4770      	bx	lr

00005cca <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5cca:	b480      	push	{r7}
    5ccc:	b083      	sub	sp, #12
    5cce:	af00      	add	r7, sp, #0
    5cd0:	6078      	str	r0, [r7, #4]
    5cd2:	460b      	mov	r3, r1
    5cd4:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5cd6:	687b      	ldr	r3, [r7, #4]
    5cd8:	78fa      	ldrb	r2, [r7, #3]
    5cda:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5cde:	bf00      	nop
    5ce0:	370c      	adds	r7, #12
    5ce2:	46bd      	mov	sp, r7
    5ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ce8:	4770      	bx	lr

00005cea <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5cea:	b480      	push	{r7}
    5cec:	b083      	sub	sp, #12
    5cee:	af00      	add	r7, sp, #0
    5cf0:	6078      	str	r0, [r7, #4]
    5cf2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5cf4:	687b      	ldr	r3, [r7, #4]
    5cf6:	683a      	ldr	r2, [r7, #0]
    5cf8:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5cfa:	bf00      	nop
    5cfc:	370c      	adds	r7, #12
    5cfe:	46bd      	mov	sp, r7
    5d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d04:	4770      	bx	lr

00005d06 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5d06:	b480      	push	{r7}
    5d08:	b083      	sub	sp, #12
    5d0a:	af00      	add	r7, sp, #0
    5d0c:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5d0e:	687b      	ldr	r3, [r7, #4]
    5d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5d12:	4618      	mov	r0, r3
    5d14:	370c      	adds	r7, #12
    5d16:	46bd      	mov	sp, r7
    5d18:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d1c:	4770      	bx	lr

00005d1e <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5d1e:	b480      	push	{r7}
    5d20:	b083      	sub	sp, #12
    5d22:	af00      	add	r7, sp, #0
    5d24:	6078      	str	r0, [r7, #4]
    5d26:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5d28:	687b      	ldr	r3, [r7, #4]
    5d2a:	683a      	ldr	r2, [r7, #0]
    5d2c:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5d2e:	bf00      	nop
    5d30:	370c      	adds	r7, #12
    5d32:	46bd      	mov	sp, r7
    5d34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d38:	4770      	bx	lr

00005d3a <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5d3a:	b480      	push	{r7}
    5d3c:	b085      	sub	sp, #20
    5d3e:	af00      	add	r7, sp, #0
    5d40:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5d48:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5d4a:	7bfb      	ldrb	r3, [r7, #15]
    5d4c:	085b      	lsrs	r3, r3, #1
    5d4e:	b2db      	uxtb	r3, r3
    5d50:	f003 0301 	and.w	r3, r3, #1
    5d54:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5d56:	7bfb      	ldrb	r3, [r7, #15]
    5d58:	2b00      	cmp	r3, #0
    5d5a:	bf14      	ite	ne
    5d5c:	2301      	movne	r3, #1
    5d5e:	2300      	moveq	r3, #0
    5d60:	b2db      	uxtb	r3, r3
}
    5d62:	4618      	mov	r0, r3
    5d64:	3714      	adds	r7, #20
    5d66:	46bd      	mov	sp, r7
    5d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d6c:	4770      	bx	lr

00005d6e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    5d6e:	b480      	push	{r7}
    5d70:	b085      	sub	sp, #20
    5d72:	af00      	add	r7, sp, #0
    5d74:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d76:	687b      	ldr	r3, [r7, #4]
    5d78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5d7c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5d7e:	7bfb      	ldrb	r3, [r7, #15]
    5d80:	089b      	lsrs	r3, r3, #2
    5d82:	b2db      	uxtb	r3, r3
    5d84:	f003 0301 	and.w	r3, r3, #1
    5d88:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5d8a:	7bfb      	ldrb	r3, [r7, #15]
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	bf14      	ite	ne
    5d90:	2301      	movne	r3, #1
    5d92:	2300      	moveq	r3, #0
    5d94:	b2db      	uxtb	r3, r3
}
    5d96:	4618      	mov	r0, r3
    5d98:	3714      	adds	r7, #20
    5d9a:	46bd      	mov	sp, r7
    5d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5da0:	4770      	bx	lr

00005da2 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5da2:	b480      	push	{r7}
    5da4:	b085      	sub	sp, #20
    5da6:	af00      	add	r7, sp, #0
    5da8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5daa:	687b      	ldr	r3, [r7, #4]
    5dac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5db0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5db2:	7bfb      	ldrb	r3, [r7, #15]
    5db4:	08db      	lsrs	r3, r3, #3
    5db6:	b2db      	uxtb	r3, r3
    5db8:	f003 0301 	and.w	r3, r3, #1
    5dbc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5dbe:	7bfb      	ldrb	r3, [r7, #15]
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	bf14      	ite	ne
    5dc4:	2301      	movne	r3, #1
    5dc6:	2300      	moveq	r3, #0
    5dc8:	b2db      	uxtb	r3, r3
}
    5dca:	4618      	mov	r0, r3
    5dcc:	3714      	adds	r7, #20
    5dce:	46bd      	mov	sp, r7
    5dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dd4:	4770      	bx	lr

00005dd6 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5dd6:	b480      	push	{r7}
    5dd8:	b085      	sub	sp, #20
    5dda:	af00      	add	r7, sp, #0
    5ddc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5dde:	687b      	ldr	r3, [r7, #4]
    5de0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5de4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5de6:	7bfb      	ldrb	r3, [r7, #15]
    5de8:	091b      	lsrs	r3, r3, #4
    5dea:	b2db      	uxtb	r3, r3
    5dec:	f003 0301 	and.w	r3, r3, #1
    5df0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5df2:	7bfb      	ldrb	r3, [r7, #15]
    5df4:	2b00      	cmp	r3, #0
    5df6:	bf14      	ite	ne
    5df8:	2301      	movne	r3, #1
    5dfa:	2300      	moveq	r3, #0
    5dfc:	b2db      	uxtb	r3, r3
}
    5dfe:	4618      	mov	r0, r3
    5e00:	3714      	adds	r7, #20
    5e02:	46bd      	mov	sp, r7
    5e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e08:	4770      	bx	lr
	...

00005e0c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5e0c:	b580      	push	{r7, lr}
    5e0e:	b082      	sub	sp, #8
    5e10:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5e12:	4b0a      	ldr	r3, [pc, #40]	; (5e3c <_oscctrl_init_sources+0x30>)
    5e14:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5e16:	4a0a      	ldr	r2, [pc, #40]	; (5e40 <_oscctrl_init_sources+0x34>)
    5e18:	2101      	movs	r1, #1
    5e1a:	6878      	ldr	r0, [r7, #4]
    5e1c:	4b09      	ldr	r3, [pc, #36]	; (5e44 <_oscctrl_init_sources+0x38>)
    5e1e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5e20:	bf00      	nop
    5e22:	6878      	ldr	r0, [r7, #4]
    5e24:	4b08      	ldr	r3, [pc, #32]	; (5e48 <_oscctrl_init_sources+0x3c>)
    5e26:	4798      	blx	r3
    5e28:	4603      	mov	r3, r0
    5e2a:	f083 0301 	eor.w	r3, r3, #1
    5e2e:	b2db      	uxtb	r3, r3
    5e30:	2b00      	cmp	r3, #0
    5e32:	d1f6      	bne.n	5e22 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5e34:	bf00      	nop
    5e36:	3708      	adds	r7, #8
    5e38:	46bd      	mov	sp, r7
    5e3a:	bd80      	pop	{r7, pc}
    5e3c:	40001000 	.word	0x40001000
    5e40:	03002646 	.word	0x03002646
    5e44:	00005c55 	.word	0x00005c55
    5e48:	00005bdf 	.word	0x00005bdf

00005e4c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5e4c:	b580      	push	{r7, lr}
    5e4e:	b084      	sub	sp, #16
    5e50:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5e52:	4b6b      	ldr	r3, [pc, #428]	; (6000 <_oscctrl_init_referenced_generators+0x1b4>)
    5e54:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5e56:	2204      	movs	r2, #4
    5e58:	2100      	movs	r1, #0
    5e5a:	486a      	ldr	r0, [pc, #424]	; (6004 <_oscctrl_init_referenced_generators+0x1b8>)
    5e5c:	4b6a      	ldr	r3, [pc, #424]	; (6008 <_oscctrl_init_referenced_generators+0x1bc>)
    5e5e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5e60:	bf00      	nop
    5e62:	4868      	ldr	r0, [pc, #416]	; (6004 <_oscctrl_init_referenced_generators+0x1b8>)
    5e64:	4b69      	ldr	r3, [pc, #420]	; (600c <_oscctrl_init_referenced_generators+0x1c0>)
    5e66:	4798      	blx	r3
    5e68:	4603      	mov	r3, r0
    5e6a:	2b00      	cmp	r3, #0
    5e6c:	d1f9      	bne.n	5e62 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5e6e:	2100      	movs	r1, #0
    5e70:	68f8      	ldr	r0, [r7, #12]
    5e72:	4b67      	ldr	r3, [pc, #412]	; (6010 <_oscctrl_init_referenced_generators+0x1c4>)
    5e74:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5e76:	4967      	ldr	r1, [pc, #412]	; (6014 <_oscctrl_init_referenced_generators+0x1c8>)
    5e78:	68f8      	ldr	r0, [r7, #12]
    5e7a:	4b67      	ldr	r3, [pc, #412]	; (6018 <_oscctrl_init_referenced_generators+0x1cc>)
    5e7c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5e7e:	bf00      	nop
    5e80:	68f8      	ldr	r0, [r7, #12]
    5e82:	4b66      	ldr	r3, [pc, #408]	; (601c <_oscctrl_init_referenced_generators+0x1d0>)
    5e84:	4798      	blx	r3
    5e86:	4603      	mov	r3, r0
    5e88:	2b00      	cmp	r3, #0
    5e8a:	d1f9      	bne.n	5e80 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5e8c:	2100      	movs	r1, #0
    5e8e:	68f8      	ldr	r0, [r7, #12]
    5e90:	4b63      	ldr	r3, [pc, #396]	; (6020 <_oscctrl_init_referenced_generators+0x1d4>)
    5e92:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5e94:	bf00      	nop
    5e96:	68f8      	ldr	r0, [r7, #12]
    5e98:	4b62      	ldr	r3, [pc, #392]	; (6024 <_oscctrl_init_referenced_generators+0x1d8>)
    5e9a:	4798      	blx	r3
    5e9c:	4603      	mov	r3, r0
    5e9e:	2b00      	cmp	r3, #0
    5ea0:	d1f9      	bne.n	5e96 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5ea2:	2302      	movs	r3, #2
    5ea4:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5ea6:	7afb      	ldrb	r3, [r7, #11]
    5ea8:	4619      	mov	r1, r3
    5eaa:	68f8      	ldr	r0, [r7, #12]
    5eac:	4b58      	ldr	r3, [pc, #352]	; (6010 <_oscctrl_init_referenced_generators+0x1c4>)
    5eae:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5eb0:	bf00      	nop
    5eb2:	68f8      	ldr	r0, [r7, #12]
    5eb4:	4b5c      	ldr	r3, [pc, #368]	; (6028 <_oscctrl_init_referenced_generators+0x1dc>)
    5eb6:	4798      	blx	r3
    5eb8:	4603      	mov	r3, r0
    5eba:	2b00      	cmp	r3, #0
    5ebc:	d1f9      	bne.n	5eb2 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5ebe:	68f8      	ldr	r0, [r7, #12]
    5ec0:	4b5a      	ldr	r3, [pc, #360]	; (602c <_oscctrl_init_referenced_generators+0x1e0>)
    5ec2:	4798      	blx	r3
    5ec4:	4603      	mov	r3, r0
    5ec6:	4619      	mov	r1, r3
    5ec8:	68f8      	ldr	r0, [r7, #12]
    5eca:	4b59      	ldr	r3, [pc, #356]	; (6030 <_oscctrl_init_referenced_generators+0x1e4>)
    5ecc:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5ece:	bf00      	nop
    5ed0:	68f8      	ldr	r0, [r7, #12]
    5ed2:	4b58      	ldr	r3, [pc, #352]	; (6034 <_oscctrl_init_referenced_generators+0x1e8>)
    5ed4:	4798      	blx	r3
    5ed6:	4603      	mov	r3, r0
    5ed8:	2b00      	cmp	r3, #0
    5eda:	d1f9      	bne.n	5ed0 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5edc:	2319      	movs	r3, #25
    5ede:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5ee0:	7afb      	ldrb	r3, [r7, #11]
    5ee2:	4619      	mov	r1, r3
    5ee4:	68f8      	ldr	r0, [r7, #12]
    5ee6:	4b4e      	ldr	r3, [pc, #312]	; (6020 <_oscctrl_init_referenced_generators+0x1d4>)
    5ee8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5eea:	bf00      	nop
    5eec:	68f8      	ldr	r0, [r7, #12]
    5eee:	4b4d      	ldr	r3, [pc, #308]	; (6024 <_oscctrl_init_referenced_generators+0x1d8>)
    5ef0:	4798      	blx	r3
    5ef2:	4603      	mov	r3, r0
    5ef4:	2b00      	cmp	r3, #0
    5ef6:	d1f9      	bne.n	5eec <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5ef8:	2245      	movs	r2, #69	; 0x45
    5efa:	2101      	movs	r1, #1
    5efc:	4841      	ldr	r0, [pc, #260]	; (6004 <_oscctrl_init_referenced_generators+0x1b8>)
    5efe:	4b4e      	ldr	r3, [pc, #312]	; (6038 <_oscctrl_init_referenced_generators+0x1ec>)
    5f00:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5f02:	223b      	movs	r2, #59	; 0x3b
    5f04:	2100      	movs	r1, #0
    5f06:	68f8      	ldr	r0, [r7, #12]
    5f08:	4b4c      	ldr	r3, [pc, #304]	; (603c <_oscctrl_init_referenced_generators+0x1f0>)
    5f0a:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5f0c:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5f10:	2100      	movs	r1, #0
    5f12:	68f8      	ldr	r0, [r7, #12]
    5f14:	4b4a      	ldr	r3, [pc, #296]	; (6040 <_oscctrl_init_referenced_generators+0x1f4>)
    5f16:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5f18:	2242      	movs	r2, #66	; 0x42
    5f1a:	2100      	movs	r1, #0
    5f1c:	68f8      	ldr	r0, [r7, #12]
    5f1e:	4b49      	ldr	r3, [pc, #292]	; (6044 <_oscctrl_init_referenced_generators+0x1f8>)
    5f20:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5f22:	4a49      	ldr	r2, [pc, #292]	; (6048 <_oscctrl_init_referenced_generators+0x1fc>)
    5f24:	2101      	movs	r1, #1
    5f26:	68f8      	ldr	r0, [r7, #12]
    5f28:	4b44      	ldr	r3, [pc, #272]	; (603c <_oscctrl_init_referenced_generators+0x1f0>)
    5f2a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5f2c:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5f30:	2101      	movs	r1, #1
    5f32:	68f8      	ldr	r0, [r7, #12]
    5f34:	4b42      	ldr	r3, [pc, #264]	; (6040 <_oscctrl_init_referenced_generators+0x1f4>)
    5f36:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5f38:	2202      	movs	r2, #2
    5f3a:	2101      	movs	r1, #1
    5f3c:	68f8      	ldr	r0, [r7, #12]
    5f3e:	4b41      	ldr	r3, [pc, #260]	; (6044 <_oscctrl_init_referenced_generators+0x1f8>)
    5f40:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5f42:	68f8      	ldr	r0, [r7, #12]
    5f44:	4b41      	ldr	r3, [pc, #260]	; (604c <_oscctrl_init_referenced_generators+0x200>)
    5f46:	4798      	blx	r3
    5f48:	4603      	mov	r3, r0
    5f4a:	2b00      	cmp	r3, #0
    5f4c:	d00c      	beq.n	5f68 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5f4e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5f52:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5f54:	bf00      	nop
    5f56:	6879      	ldr	r1, [r7, #4]
    5f58:	68f8      	ldr	r0, [r7, #12]
    5f5a:	4b3d      	ldr	r3, [pc, #244]	; (6050 <_oscctrl_init_referenced_generators+0x204>)
    5f5c:	4798      	blx	r3
    5f5e:	4602      	mov	r2, r0
    5f60:	687b      	ldr	r3, [r7, #4]
    5f62:	429a      	cmp	r2, r3
    5f64:	d1f7      	bne.n	5f56 <_oscctrl_init_referenced_generators+0x10a>
    5f66:	e009      	b.n	5f7c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5f68:	bf00      	nop
    5f6a:	68f8      	ldr	r0, [r7, #12]
    5f6c:	4b39      	ldr	r3, [pc, #228]	; (6054 <_oscctrl_init_referenced_generators+0x208>)
    5f6e:	4798      	blx	r3
    5f70:	4603      	mov	r3, r0
    5f72:	f083 0301 	eor.w	r3, r3, #1
    5f76:	b2db      	uxtb	r3, r3
    5f78:	2b00      	cmp	r3, #0
    5f7a:	d1f6      	bne.n	5f6a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5f7c:	bf00      	nop
    5f7e:	2100      	movs	r1, #0
    5f80:	68f8      	ldr	r0, [r7, #12]
    5f82:	4b35      	ldr	r3, [pc, #212]	; (6058 <_oscctrl_init_referenced_generators+0x20c>)
    5f84:	4798      	blx	r3
    5f86:	4603      	mov	r3, r0
    5f88:	f083 0301 	eor.w	r3, r3, #1
    5f8c:	b2db      	uxtb	r3, r3
    5f8e:	2b00      	cmp	r3, #0
    5f90:	d009      	beq.n	5fa6 <_oscctrl_init_referenced_generators+0x15a>
    5f92:	2100      	movs	r1, #0
    5f94:	68f8      	ldr	r0, [r7, #12]
    5f96:	4b31      	ldr	r3, [pc, #196]	; (605c <_oscctrl_init_referenced_generators+0x210>)
    5f98:	4798      	blx	r3
    5f9a:	4603      	mov	r3, r0
    5f9c:	f083 0301 	eor.w	r3, r3, #1
    5fa0:	b2db      	uxtb	r3, r3
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d1eb      	bne.n	5f7e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5fa6:	bf00      	nop
    5fa8:	2101      	movs	r1, #1
    5faa:	68f8      	ldr	r0, [r7, #12]
    5fac:	4b2a      	ldr	r3, [pc, #168]	; (6058 <_oscctrl_init_referenced_generators+0x20c>)
    5fae:	4798      	blx	r3
    5fb0:	4603      	mov	r3, r0
    5fb2:	f083 0301 	eor.w	r3, r3, #1
    5fb6:	b2db      	uxtb	r3, r3
    5fb8:	2b00      	cmp	r3, #0
    5fba:	d009      	beq.n	5fd0 <_oscctrl_init_referenced_generators+0x184>
    5fbc:	2101      	movs	r1, #1
    5fbe:	68f8      	ldr	r0, [r7, #12]
    5fc0:	4b26      	ldr	r3, [pc, #152]	; (605c <_oscctrl_init_referenced_generators+0x210>)
    5fc2:	4798      	blx	r3
    5fc4:	4603      	mov	r3, r0
    5fc6:	f083 0301 	eor.w	r3, r3, #1
    5fca:	b2db      	uxtb	r3, r3
    5fcc:	2b00      	cmp	r3, #0
    5fce:	d1eb      	bne.n	5fa8 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5fd0:	bf00      	nop
    5fd2:	480c      	ldr	r0, [pc, #48]	; (6004 <_oscctrl_init_referenced_generators+0x1b8>)
    5fd4:	4b22      	ldr	r3, [pc, #136]	; (6060 <_oscctrl_init_referenced_generators+0x214>)
    5fd6:	4798      	blx	r3
    5fd8:	4603      	mov	r3, r0
    5fda:	2b00      	cmp	r3, #0
    5fdc:	d1f9      	bne.n	5fd2 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5fde:	2207      	movs	r2, #7
    5fe0:	2100      	movs	r1, #0
    5fe2:	4808      	ldr	r0, [pc, #32]	; (6004 <_oscctrl_init_referenced_generators+0x1b8>)
    5fe4:	4b08      	ldr	r3, [pc, #32]	; (6008 <_oscctrl_init_referenced_generators+0x1bc>)
    5fe6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5fe8:	bf00      	nop
    5fea:	4806      	ldr	r0, [pc, #24]	; (6004 <_oscctrl_init_referenced_generators+0x1b8>)
    5fec:	4b07      	ldr	r3, [pc, #28]	; (600c <_oscctrl_init_referenced_generators+0x1c0>)
    5fee:	4798      	blx	r3
    5ff0:	4603      	mov	r3, r0
    5ff2:	2b00      	cmp	r3, #0
    5ff4:	d1f9      	bne.n	5fea <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5ff6:	bf00      	nop
    5ff8:	3710      	adds	r7, #16
    5ffa:	46bd      	mov	sp, r7
    5ffc:	bd80      	pop	{r7, pc}
    5ffe:	bf00      	nop
    6000:	40001000 	.word	0x40001000
    6004:	40001c00 	.word	0x40001c00
    6008:	00005a19 	.word	0x00005a19
    600c:	000059d9 	.word	0x000059d9
    6010:	00005c7d 	.word	0x00005c7d
    6014:	0401bb80 	.word	0x0401bb80
    6018:	00005d1f 	.word	0x00005d1f
    601c:	00005dd7 	.word	0x00005dd7
    6020:	00005ccb 	.word	0x00005ccb
    6024:	00005d6f 	.word	0x00005d6f
    6028:	00005d3b 	.word	0x00005d3b
    602c:	00005d07 	.word	0x00005d07
    6030:	00005ceb 	.word	0x00005ceb
    6034:	00005da3 	.word	0x00005da3
    6038:	00005a69 	.word	0x00005a69
    603c:	00005b75 	.word	0x00005b75
    6040:	00005bb1 	.word	0x00005bb1
    6044:	00005b39 	.word	0x00005b39
    6048:	000407a0 	.word	0x000407a0
    604c:	00005c9b 	.word	0x00005c9b
    6050:	00005c2f 	.word	0x00005c2f
    6054:	00005c07 	.word	0x00005c07
    6058:	00005ac5 	.word	0x00005ac5
    605c:	00005afd 	.word	0x00005afd
    6060:	00005a01 	.word	0x00005a01

00006064 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    6064:	b480      	push	{r7}
    6066:	b083      	sub	sp, #12
    6068:	af00      	add	r7, sp, #0
    606a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    606c:	687b      	ldr	r3, [r7, #4]
    606e:	69db      	ldr	r3, [r3, #28]
    6070:	0a9b      	lsrs	r3, r3, #10
    6072:	f003 0301 	and.w	r3, r3, #1
    6076:	2b00      	cmp	r3, #0
    6078:	bf14      	ite	ne
    607a:	2301      	movne	r3, #1
    607c:	2300      	moveq	r3, #0
    607e:	b2db      	uxtb	r3, r3
}
    6080:	4618      	mov	r0, r3
    6082:	370c      	adds	r7, #12
    6084:	46bd      	mov	sp, r7
    6086:	f85d 7b04 	ldr.w	r7, [sp], #4
    608a:	4770      	bx	lr

0000608c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    608c:	b480      	push	{r7}
    608e:	b083      	sub	sp, #12
    6090:	af00      	add	r7, sp, #0
    6092:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    6094:	687b      	ldr	r3, [r7, #4]
    6096:	f44f 6280 	mov.w	r2, #1024	; 0x400
    609a:	61da      	str	r2, [r3, #28]
}
    609c:	bf00      	nop
    609e:	370c      	adds	r7, #12
    60a0:	46bd      	mov	sp, r7
    60a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    60a6:	4770      	bx	lr

000060a8 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    60a8:	b480      	push	{r7}
    60aa:	b083      	sub	sp, #12
    60ac:	af00      	add	r7, sp, #0
    60ae:	6078      	str	r0, [r7, #4]
    60b0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	683a      	ldr	r2, [r7, #0]
    60b6:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    60b8:	bf00      	nop
    60ba:	370c      	adds	r7, #12
    60bc:	46bd      	mov	sp, r7
    60be:	f85d 7b04 	ldr.w	r7, [sp], #4
    60c2:	4770      	bx	lr

000060c4 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    60c4:	b480      	push	{r7}
    60c6:	b083      	sub	sp, #12
    60c8:	af00      	add	r7, sp, #0
    60ca:	6078      	str	r0, [r7, #4]
    60cc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    60ce:	687b      	ldr	r3, [r7, #4]
    60d0:	683a      	ldr	r2, [r7, #0]
    60d2:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    60d4:	bf00      	nop
    60d6:	370c      	adds	r7, #12
    60d8:	46bd      	mov	sp, r7
    60da:	f85d 7b04 	ldr.w	r7, [sp], #4
    60de:	4770      	bx	lr

000060e0 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    60e0:	b480      	push	{r7}
    60e2:	b083      	sub	sp, #12
    60e4:	af00      	add	r7, sp, #0
    60e6:	6078      	str	r0, [r7, #4]
    60e8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    60ea:	687b      	ldr	r3, [r7, #4]
    60ec:	683a      	ldr	r2, [r7, #0]
    60ee:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    60f0:	bf00      	nop
    60f2:	370c      	adds	r7, #12
    60f4:	46bd      	mov	sp, r7
    60f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    60fa:	4770      	bx	lr

000060fc <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    60fc:	b480      	push	{r7}
    60fe:	b083      	sub	sp, #12
    6100:	af00      	add	r7, sp, #0
    6102:	6078      	str	r0, [r7, #4]
    6104:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    6106:	687b      	ldr	r3, [r7, #4]
    6108:	683a      	ldr	r2, [r7, #0]
    610a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    610c:	bf00      	nop
    610e:	370c      	adds	r7, #12
    6110:	46bd      	mov	sp, r7
    6112:	f85d 7b04 	ldr.w	r7, [sp], #4
    6116:	4770      	bx	lr

00006118 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    6118:	b480      	push	{r7}
    611a:	b085      	sub	sp, #20
    611c:	af00      	add	r7, sp, #0
    611e:	6078      	str	r0, [r7, #4]
    6120:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    6122:	687b      	ldr	r3, [r7, #4]
    6124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6126:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    6128:	68fb      	ldr	r3, [r7, #12]
    612a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    612e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    6130:	683b      	ldr	r3, [r7, #0]
    6132:	b2db      	uxtb	r3, r3
    6134:	68fa      	ldr	r2, [r7, #12]
    6136:	4313      	orrs	r3, r2
    6138:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    613a:	687b      	ldr	r3, [r7, #4]
    613c:	68fa      	ldr	r2, [r7, #12]
    613e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6140:	bf00      	nop
    6142:	3714      	adds	r7, #20
    6144:	46bd      	mov	sp, r7
    6146:	f85d 7b04 	ldr.w	r7, [sp], #4
    614a:	4770      	bx	lr

0000614c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    614c:	b480      	push	{r7}
    614e:	b085      	sub	sp, #20
    6150:	af00      	add	r7, sp, #0
    6152:	6078      	str	r0, [r7, #4]
    6154:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    6156:	687b      	ldr	r3, [r7, #4]
    6158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    615a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    615c:	68fb      	ldr	r3, [r7, #12]
    615e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    6162:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    6164:	683b      	ldr	r3, [r7, #0]
    6166:	041b      	lsls	r3, r3, #16
    6168:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    616c:	68fa      	ldr	r2, [r7, #12]
    616e:	4313      	orrs	r3, r2
    6170:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    6172:	687b      	ldr	r3, [r7, #4]
    6174:	68fa      	ldr	r2, [r7, #12]
    6176:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6178:	bf00      	nop
    617a:	3714      	adds	r7, #20
    617c:	46bd      	mov	sp, r7
    617e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6182:	4770      	bx	lr

00006184 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    6184:	b480      	push	{r7}
    6186:	b083      	sub	sp, #12
    6188:	af00      	add	r7, sp, #0
    618a:	6078      	str	r0, [r7, #4]
    618c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    618e:	687b      	ldr	r3, [r7, #4]
    6190:	683a      	ldr	r2, [r7, #0]
    6192:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6194:	bf00      	nop
    6196:	370c      	adds	r7, #12
    6198:	46bd      	mov	sp, r7
    619a:	f85d 7b04 	ldr.w	r7, [sp], #4
    619e:	4770      	bx	lr

000061a0 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    61a0:	b480      	push	{r7}
    61a2:	b083      	sub	sp, #12
    61a4:	af00      	add	r7, sp, #0
    61a6:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    61a8:	687b      	ldr	r3, [r7, #4]
    61aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    61ac:	4618      	mov	r0, r3
    61ae:	370c      	adds	r7, #12
    61b0:	46bd      	mov	sp, r7
    61b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    61b6:	4770      	bx	lr

000061b8 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    61b8:	b480      	push	{r7}
    61ba:	b085      	sub	sp, #20
    61bc:	af00      	add	r7, sp, #0
    61be:	60f8      	str	r0, [r7, #12]
    61c0:	60b9      	str	r1, [r7, #8]
    61c2:	607a      	str	r2, [r7, #4]
	while (count--) {
    61c4:	e007      	b.n	61d6 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    61c6:	68fb      	ldr	r3, [r7, #12]
    61c8:	1c5a      	adds	r2, r3, #1
    61ca:	60fa      	str	r2, [r7, #12]
    61cc:	68ba      	ldr	r2, [r7, #8]
    61ce:	1c51      	adds	r1, r2, #1
    61d0:	60b9      	str	r1, [r7, #8]
    61d2:	7812      	ldrb	r2, [r2, #0]
    61d4:	701a      	strb	r2, [r3, #0]
	while (count--) {
    61d6:	687b      	ldr	r3, [r7, #4]
    61d8:	1e5a      	subs	r2, r3, #1
    61da:	607a      	str	r2, [r7, #4]
    61dc:	2b00      	cmp	r3, #0
    61de:	d1f2      	bne.n	61c6 <_qspi_memcpy+0xe>
	}
}
    61e0:	bf00      	nop
    61e2:	3714      	adds	r7, #20
    61e4:	46bd      	mov	sp, r7
    61e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    61ea:	4770      	bx	lr

000061ec <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    61ec:	b580      	push	{r7, lr}
    61ee:	b082      	sub	sp, #8
    61f0:	af00      	add	r7, sp, #0
    61f2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    61f4:	4903      	ldr	r1, [pc, #12]	; (6204 <_qspi_end_transfer+0x18>)
    61f6:	6878      	ldr	r0, [r7, #4]
    61f8:	4b03      	ldr	r3, [pc, #12]	; (6208 <_qspi_end_transfer+0x1c>)
    61fa:	4798      	blx	r3
}
    61fc:	bf00      	nop
    61fe:	3708      	adds	r7, #8
    6200:	46bd      	mov	sp, r7
    6202:	bd80      	pop	{r7, pc}
    6204:	01000002 	.word	0x01000002
    6208:	000060a9 	.word	0x000060a9

0000620c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    620c:	b580      	push	{r7, lr}
    620e:	b082      	sub	sp, #8
    6210:	af00      	add	r7, sp, #0
    6212:	6078      	str	r0, [r7, #4]
    6214:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    6216:	687b      	ldr	r3, [r7, #4]
    6218:	2b00      	cmp	r3, #0
    621a:	d004      	beq.n	6226 <_qspi_sync_init+0x1a>
    621c:	683b      	ldr	r3, [r7, #0]
    621e:	2b00      	cmp	r3, #0
    6220:	d001      	beq.n	6226 <_qspi_sync_init+0x1a>
    6222:	2301      	movs	r3, #1
    6224:	e000      	b.n	6228 <_qspi_sync_init+0x1c>
    6226:	2300      	movs	r3, #0
    6228:	f003 0301 	and.w	r3, r3, #1
    622c:	b2db      	uxtb	r3, r3
    622e:	2240      	movs	r2, #64	; 0x40
    6230:	490c      	ldr	r1, [pc, #48]	; (6264 <_qspi_sync_init+0x58>)
    6232:	4618      	mov	r0, r3
    6234:	4b0c      	ldr	r3, [pc, #48]	; (6268 <_qspi_sync_init+0x5c>)
    6236:	4798      	blx	r3
	dev->prvt = hw;
    6238:	687b      	ldr	r3, [r7, #4]
    623a:	683a      	ldr	r2, [r7, #0]
    623c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    623e:	687b      	ldr	r3, [r7, #4]
    6240:	681b      	ldr	r3, [r3, #0]
    6242:	2101      	movs	r1, #1
    6244:	4618      	mov	r0, r3
    6246:	4b09      	ldr	r3, [pc, #36]	; (626c <_qspi_sync_init+0x60>)
    6248:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    624a:	4909      	ldr	r1, [pc, #36]	; (6270 <_qspi_sync_init+0x64>)
    624c:	6838      	ldr	r0, [r7, #0]
    624e:	4b09      	ldr	r3, [pc, #36]	; (6274 <_qspi_sync_init+0x68>)
    6250:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    6252:	4909      	ldr	r1, [pc, #36]	; (6278 <_qspi_sync_init+0x6c>)
    6254:	6838      	ldr	r0, [r7, #0]
    6256:	4b09      	ldr	r3, [pc, #36]	; (627c <_qspi_sync_init+0x70>)
    6258:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    625a:	2300      	movs	r3, #0
}
    625c:	4618      	mov	r0, r3
    625e:	3708      	adds	r7, #8
    6260:	46bd      	mov	sp, r7
    6262:	bd80      	pop	{r7, pc}
    6264:	000148f0 	.word	0x000148f0
    6268:	00004211 	.word	0x00004211
    626c:	000060a9 	.word	0x000060a9
    6270:	06000011 	.word	0x06000011
    6274:	000060c5 	.word	0x000060c5
    6278:	00241300 	.word	0x00241300
    627c:	000060e1 	.word	0x000060e1

00006280 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    6280:	b580      	push	{r7, lr}
    6282:	b082      	sub	sp, #8
    6284:	af00      	add	r7, sp, #0
    6286:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    6288:	687b      	ldr	r3, [r7, #4]
    628a:	681b      	ldr	r3, [r3, #0]
    628c:	2102      	movs	r1, #2
    628e:	4618      	mov	r0, r3
    6290:	4b03      	ldr	r3, [pc, #12]	; (62a0 <_qspi_sync_enable+0x20>)
    6292:	4798      	blx	r3
	return ERR_NONE;
    6294:	2300      	movs	r3, #0
}
    6296:	4618      	mov	r0, r3
    6298:	3708      	adds	r7, #8
    629a:	46bd      	mov	sp, r7
    629c:	bd80      	pop	{r7, pc}
    629e:	bf00      	nop
    62a0:	000060a9 	.word	0x000060a9

000062a4 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    62a4:	b580      	push	{r7, lr}
    62a6:	b082      	sub	sp, #8
    62a8:	af00      	add	r7, sp, #0
    62aa:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    62ac:	687b      	ldr	r3, [r7, #4]
    62ae:	681b      	ldr	r3, [r3, #0]
    62b0:	2100      	movs	r1, #0
    62b2:	4618      	mov	r0, r3
    62b4:	4b03      	ldr	r3, [pc, #12]	; (62c4 <_qspi_sync_disable+0x20>)
    62b6:	4798      	blx	r3
	return ERR_NONE;
    62b8:	2300      	movs	r3, #0
}
    62ba:	4618      	mov	r0, r3
    62bc:	3708      	adds	r7, #8
    62be:	46bd      	mov	sp, r7
    62c0:	bd80      	pop	{r7, pc}
    62c2:	bf00      	nop
    62c4:	000060a9 	.word	0x000060a9

000062c8 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    62c8:	b580      	push	{r7, lr}
    62ca:	b084      	sub	sp, #16
    62cc:	af00      	add	r7, sp, #0
    62ce:	6078      	str	r0, [r7, #4]
    62d0:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    62d2:	687b      	ldr	r3, [r7, #4]
    62d4:	681b      	ldr	r3, [r3, #0]
    62d6:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    62d8:	683b      	ldr	r3, [r7, #0]
    62da:	781b      	ldrb	r3, [r3, #0]
    62dc:	f003 0320 	and.w	r3, r3, #32
    62e0:	b2db      	uxtb	r3, r3
    62e2:	2b00      	cmp	r3, #0
    62e4:	d005      	beq.n	62f2 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    62e6:	683b      	ldr	r3, [r7, #0]
    62e8:	689b      	ldr	r3, [r3, #8]
    62ea:	4619      	mov	r1, r3
    62ec:	68f8      	ldr	r0, [r7, #12]
    62ee:	4b13      	ldr	r3, [pc, #76]	; (633c <_qspi_sync_command_set_ifr+0x74>)
    62f0:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    62f2:	683b      	ldr	r3, [r7, #0]
    62f4:	781b      	ldrb	r3, [r3, #0]
    62f6:	f003 0310 	and.w	r3, r3, #16
    62fa:	b2db      	uxtb	r3, r3
    62fc:	2b00      	cmp	r3, #0
    62fe:	d005      	beq.n	630c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    6300:	683b      	ldr	r3, [r7, #0]
    6302:	791b      	ldrb	r3, [r3, #4]
    6304:	4619      	mov	r1, r3
    6306:	68f8      	ldr	r0, [r7, #12]
    6308:	4b0d      	ldr	r3, [pc, #52]	; (6340 <_qspi_sync_command_set_ifr+0x78>)
    630a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    630c:	683b      	ldr	r3, [r7, #0]
    630e:	781b      	ldrb	r3, [r3, #0]
    6310:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6314:	b2db      	uxtb	r3, r3
    6316:	2b00      	cmp	r3, #0
    6318:	d005      	beq.n	6326 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    631a:	683b      	ldr	r3, [r7, #0]
    631c:	795b      	ldrb	r3, [r3, #5]
    631e:	4619      	mov	r1, r3
    6320:	68f8      	ldr	r0, [r7, #12]
    6322:	4b08      	ldr	r3, [pc, #32]	; (6344 <_qspi_sync_command_set_ifr+0x7c>)
    6324:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    6326:	683b      	ldr	r3, [r7, #0]
    6328:	681b      	ldr	r3, [r3, #0]
    632a:	4619      	mov	r1, r3
    632c:	68f8      	ldr	r0, [r7, #12]
    632e:	4b06      	ldr	r3, [pc, #24]	; (6348 <_qspi_sync_command_set_ifr+0x80>)
    6330:	4798      	blx	r3
}
    6332:	bf00      	nop
    6334:	3710      	adds	r7, #16
    6336:	46bd      	mov	sp, r7
    6338:	bd80      	pop	{r7, pc}
    633a:	bf00      	nop
    633c:	000060fd 	.word	0x000060fd
    6340:	00006119 	.word	0x00006119
    6344:	0000614d 	.word	0x0000614d
    6348:	00006185 	.word	0x00006185

0000634c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    634c:	b580      	push	{r7, lr}
    634e:	b084      	sub	sp, #16
    6350:	af00      	add	r7, sp, #0
    6352:	6078      	str	r0, [r7, #4]
    6354:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    6356:	687b      	ldr	r3, [r7, #4]
    6358:	681b      	ldr	r3, [r3, #0]
    635a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    635c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6360:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    6362:	683b      	ldr	r3, [r7, #0]
    6364:	781b      	ldrb	r3, [r3, #0]
    6366:	f003 0320 	and.w	r3, r3, #32
    636a:	b2db      	uxtb	r3, r3
    636c:	2b00      	cmp	r3, #0
    636e:	d004      	beq.n	637a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    6370:	683b      	ldr	r3, [r7, #0]
    6372:	689b      	ldr	r3, [r3, #8]
    6374:	68fa      	ldr	r2, [r7, #12]
    6376:	4413      	add	r3, r2
    6378:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    637a:	68b8      	ldr	r0, [r7, #8]
    637c:	4b18      	ldr	r3, [pc, #96]	; (63e0 <_qspi_sync_run_transfer+0x94>)
    637e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    6380:	683b      	ldr	r3, [r7, #0]
    6382:	691b      	ldr	r3, [r3, #16]
    6384:	2b00      	cmp	r3, #0
    6386:	d103      	bne.n	6390 <_qspi_sync_run_transfer+0x44>
    6388:	683b      	ldr	r3, [r7, #0]
    638a:	695b      	ldr	r3, [r3, #20]
    638c:	2b00      	cmp	r3, #0
    638e:	d001      	beq.n	6394 <_qspi_sync_run_transfer+0x48>
    6390:	2301      	movs	r3, #1
    6392:	e000      	b.n	6396 <_qspi_sync_run_transfer+0x4a>
    6394:	2300      	movs	r3, #0
    6396:	f003 0301 	and.w	r3, r3, #1
    639a:	b2db      	uxtb	r3, r3
    639c:	2282      	movs	r2, #130	; 0x82
    639e:	4911      	ldr	r1, [pc, #68]	; (63e4 <_qspi_sync_run_transfer+0x98>)
    63a0:	4618      	mov	r0, r3
    63a2:	4b11      	ldr	r3, [pc, #68]	; (63e8 <_qspi_sync_run_transfer+0x9c>)
    63a4:	4798      	blx	r3

	if (cmd->tx_buf) {
    63a6:	683b      	ldr	r3, [r7, #0]
    63a8:	691b      	ldr	r3, [r3, #16]
    63aa:	2b00      	cmp	r3, #0
    63ac:	d008      	beq.n	63c0 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    63ae:	683b      	ldr	r3, [r7, #0]
    63b0:	6919      	ldr	r1, [r3, #16]
    63b2:	683b      	ldr	r3, [r7, #0]
    63b4:	68db      	ldr	r3, [r3, #12]
    63b6:	461a      	mov	r2, r3
    63b8:	68f8      	ldr	r0, [r7, #12]
    63ba:	4b0c      	ldr	r3, [pc, #48]	; (63ec <_qspi_sync_run_transfer+0xa0>)
    63bc:	4798      	blx	r3
    63be:	e007      	b.n	63d0 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    63c0:	683b      	ldr	r3, [r7, #0]
    63c2:	6958      	ldr	r0, [r3, #20]
    63c4:	683b      	ldr	r3, [r7, #0]
    63c6:	68db      	ldr	r3, [r3, #12]
    63c8:	461a      	mov	r2, r3
    63ca:	68f9      	ldr	r1, [r7, #12]
    63cc:	4b07      	ldr	r3, [pc, #28]	; (63ec <_qspi_sync_run_transfer+0xa0>)
    63ce:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    63d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    63d4:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    63d8:	bf00      	nop
    63da:	3710      	adds	r7, #16
    63dc:	46bd      	mov	sp, r7
    63de:	bd80      	pop	{r7, pc}
    63e0:	000061a1 	.word	0x000061a1
    63e4:	000148f0 	.word	0x000148f0
    63e8:	00004211 	.word	0x00004211
    63ec:	000061b9 	.word	0x000061b9

000063f0 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    63f0:	b580      	push	{r7, lr}
    63f2:	b082      	sub	sp, #8
    63f4:	af00      	add	r7, sp, #0
    63f6:	6078      	str	r0, [r7, #4]
    63f8:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    63fa:	6839      	ldr	r1, [r7, #0]
    63fc:	6878      	ldr	r0, [r7, #4]
    63fe:	4b14      	ldr	r3, [pc, #80]	; (6450 <_qspi_sync_serial_run_command+0x60>)
    6400:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    6402:	683b      	ldr	r3, [r7, #0]
    6404:	781b      	ldrb	r3, [r3, #0]
    6406:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    640a:	b2db      	uxtb	r3, r3
    640c:	2b00      	cmp	r3, #0
    640e:	d003      	beq.n	6418 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    6410:	6839      	ldr	r1, [r7, #0]
    6412:	6878      	ldr	r0, [r7, #4]
    6414:	4b0f      	ldr	r3, [pc, #60]	; (6454 <_qspi_sync_serial_run_command+0x64>)
    6416:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    6418:	687b      	ldr	r3, [r7, #4]
    641a:	681b      	ldr	r3, [r3, #0]
    641c:	4618      	mov	r0, r3
    641e:	4b0e      	ldr	r3, [pc, #56]	; (6458 <_qspi_sync_serial_run_command+0x68>)
    6420:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    6422:	bf00      	nop
    6424:	687b      	ldr	r3, [r7, #4]
    6426:	681b      	ldr	r3, [r3, #0]
    6428:	4618      	mov	r0, r3
    642a:	4b0c      	ldr	r3, [pc, #48]	; (645c <_qspi_sync_serial_run_command+0x6c>)
    642c:	4798      	blx	r3
    642e:	4603      	mov	r3, r0
    6430:	f083 0301 	eor.w	r3, r3, #1
    6434:	b2db      	uxtb	r3, r3
    6436:	2b00      	cmp	r3, #0
    6438:	d1f4      	bne.n	6424 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    643a:	687b      	ldr	r3, [r7, #4]
    643c:	681b      	ldr	r3, [r3, #0]
    643e:	4618      	mov	r0, r3
    6440:	4b07      	ldr	r3, [pc, #28]	; (6460 <_qspi_sync_serial_run_command+0x70>)
    6442:	4798      	blx	r3
	return ERR_NONE;
    6444:	2300      	movs	r3, #0
}
    6446:	4618      	mov	r0, r3
    6448:	3708      	adds	r7, #8
    644a:	46bd      	mov	sp, r7
    644c:	bd80      	pop	{r7, pc}
    644e:	bf00      	nop
    6450:	000062c9 	.word	0x000062c9
    6454:	0000634d 	.word	0x0000634d
    6458:	000061ed 	.word	0x000061ed
    645c:	00006065 	.word	0x00006065
    6460:	0000608d 	.word	0x0000608d

00006464 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    6464:	b480      	push	{r7}
    6466:	b083      	sub	sp, #12
    6468:	af00      	add	r7, sp, #0
    646a:	6078      	str	r0, [r7, #4]
    646c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    646e:	bf00      	nop
    6470:	687b      	ldr	r3, [r7, #4]
    6472:	691a      	ldr	r2, [r3, #16]
    6474:	683b      	ldr	r3, [r7, #0]
    6476:	4013      	ands	r3, r2
    6478:	2b00      	cmp	r3, #0
    647a:	d1f9      	bne.n	6470 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    647c:	bf00      	nop
    647e:	370c      	adds	r7, #12
    6480:	46bd      	mov	sp, r7
    6482:	f85d 7b04 	ldr.w	r7, [sp], #4
    6486:	4770      	bx	lr

00006488 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    6488:	b480      	push	{r7}
    648a:	b083      	sub	sp, #12
    648c:	af00      	add	r7, sp, #0
    648e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6490:	687b      	ldr	r3, [r7, #4]
    6492:	f44f 7280 	mov.w	r2, #256	; 0x100
    6496:	819a      	strh	r2, [r3, #12]
}
    6498:	bf00      	nop
    649a:	370c      	adds	r7, #12
    649c:	46bd      	mov	sp, r7
    649e:	f85d 7b04 	ldr.w	r7, [sp], #4
    64a2:	4770      	bx	lr

000064a4 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    64a4:	b480      	push	{r7}
    64a6:	b083      	sub	sp, #12
    64a8:	af00      	add	r7, sp, #0
    64aa:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    64ac:	687b      	ldr	r3, [r7, #4]
    64ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    64b2:	819a      	strh	r2, [r3, #12]
}
    64b4:	bf00      	nop
    64b6:	370c      	adds	r7, #12
    64b8:	46bd      	mov	sp, r7
    64ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    64be:	4770      	bx	lr

000064c0 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    64c0:	b480      	push	{r7}
    64c2:	b083      	sub	sp, #12
    64c4:	af00      	add	r7, sp, #0
    64c6:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    64c8:	687b      	ldr	r3, [r7, #4]
    64ca:	899b      	ldrh	r3, [r3, #12]
    64cc:	b29b      	uxth	r3, r3
}
    64ce:	4618      	mov	r0, r3
    64d0:	370c      	adds	r7, #12
    64d2:	46bd      	mov	sp, r7
    64d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    64d8:	4770      	bx	lr

000064da <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    64da:	b480      	push	{r7}
    64dc:	b083      	sub	sp, #12
    64de:	af00      	add	r7, sp, #0
    64e0:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    64e2:	687b      	ldr	r3, [r7, #4]
    64e4:	895b      	ldrh	r3, [r3, #10]
    64e6:	b29b      	uxth	r3, r3
}
    64e8:	4618      	mov	r0, r3
    64ea:	370c      	adds	r7, #12
    64ec:	46bd      	mov	sp, r7
    64ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    64f2:	4770      	bx	lr

000064f4 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    64f4:	b580      	push	{r7, lr}
    64f6:	b082      	sub	sp, #8
    64f8:	af00      	add	r7, sp, #0
    64fa:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    64fc:	687b      	ldr	r3, [r7, #4]
    64fe:	881b      	ldrh	r3, [r3, #0]
    6500:	b29b      	uxth	r3, r3
    6502:	f043 0301 	orr.w	r3, r3, #1
    6506:	b29a      	uxth	r2, r3
    6508:	687b      	ldr	r3, [r7, #4]
    650a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    650c:	2101      	movs	r1, #1
    650e:	6878      	ldr	r0, [r7, #4]
    6510:	4b02      	ldr	r3, [pc, #8]	; (651c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    6512:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6514:	bf00      	nop
    6516:	3708      	adds	r7, #8
    6518:	46bd      	mov	sp, r7
    651a:	bd80      	pop	{r7, pc}
    651c:	00006465 	.word	0x00006465

00006520 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6520:	b580      	push	{r7, lr}
    6522:	b084      	sub	sp, #16
    6524:	af00      	add	r7, sp, #0
    6526:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6528:	f248 0103 	movw	r1, #32771	; 0x8003
    652c:	6878      	ldr	r0, [r7, #4]
    652e:	4b0a      	ldr	r3, [pc, #40]	; (6558 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    6530:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6532:	687b      	ldr	r3, [r7, #4]
    6534:	881b      	ldrh	r3, [r3, #0]
    6536:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    6538:	89fb      	ldrh	r3, [r7, #14]
    653a:	085b      	lsrs	r3, r3, #1
    653c:	b29b      	uxth	r3, r3
    653e:	f003 0301 	and.w	r3, r3, #1
    6542:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    6544:	89fb      	ldrh	r3, [r7, #14]
    6546:	2b00      	cmp	r3, #0
    6548:	bf14      	ite	ne
    654a:	2301      	movne	r3, #1
    654c:	2300      	moveq	r3, #0
    654e:	b2db      	uxtb	r3, r3
}
    6550:	4618      	mov	r0, r3
    6552:	3710      	adds	r7, #16
    6554:	46bd      	mov	sp, r7
    6556:	bd80      	pop	{r7, pc}
    6558:	00006465 	.word	0x00006465

0000655c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    655c:	b580      	push	{r7, lr}
    655e:	b082      	sub	sp, #8
    6560:	af00      	add	r7, sp, #0
    6562:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6564:	687b      	ldr	r3, [r7, #4]
    6566:	881b      	ldrh	r3, [r3, #0]
    6568:	b29b      	uxth	r3, r3
    656a:	f023 0302 	bic.w	r3, r3, #2
    656e:	b29a      	uxth	r2, r3
    6570:	687b      	ldr	r3, [r7, #4]
    6572:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6574:	f248 0103 	movw	r1, #32771	; 0x8003
    6578:	6878      	ldr	r0, [r7, #4]
    657a:	4b03      	ldr	r3, [pc, #12]	; (6588 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    657c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    657e:	bf00      	nop
    6580:	3708      	adds	r7, #8
    6582:	46bd      	mov	sp, r7
    6584:	bd80      	pop	{r7, pc}
    6586:	bf00      	nop
    6588:	00006465 	.word	0x00006465

0000658c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    658c:	b580      	push	{r7, lr}
    658e:	b082      	sub	sp, #8
    6590:	af00      	add	r7, sp, #0
    6592:	6078      	str	r0, [r7, #4]
    6594:	460b      	mov	r3, r1
    6596:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6598:	687b      	ldr	r3, [r7, #4]
    659a:	887a      	ldrh	r2, [r7, #2]
    659c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    659e:	f248 0103 	movw	r1, #32771	; 0x8003
    65a2:	6878      	ldr	r0, [r7, #4]
    65a4:	4b02      	ldr	r3, [pc, #8]	; (65b0 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    65a6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    65a8:	bf00      	nop
    65aa:	3708      	adds	r7, #8
    65ac:	46bd      	mov	sp, r7
    65ae:	bd80      	pop	{r7, pc}
    65b0:	00006465 	.word	0x00006465

000065b4 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    65b4:	b480      	push	{r7}
    65b6:	b083      	sub	sp, #12
    65b8:	af00      	add	r7, sp, #0
    65ba:	6078      	str	r0, [r7, #4]
    65bc:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    65be:	687b      	ldr	r3, [r7, #4]
    65c0:	683a      	ldr	r2, [r7, #0]
    65c2:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    65c4:	bf00      	nop
    65c6:	370c      	adds	r7, #12
    65c8:	46bd      	mov	sp, r7
    65ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    65ce:	4770      	bx	lr

000065d0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    65d0:	b580      	push	{r7, lr}
    65d2:	b082      	sub	sp, #8
    65d4:	af00      	add	r7, sp, #0
    65d6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    65d8:	687b      	ldr	r3, [r7, #4]
    65da:	2b00      	cmp	r3, #0
    65dc:	d005      	beq.n	65ea <_calendar_init+0x1a>
    65de:	687b      	ldr	r3, [r7, #4]
    65e0:	681b      	ldr	r3, [r3, #0]
    65e2:	2b00      	cmp	r3, #0
    65e4:	d001      	beq.n	65ea <_calendar_init+0x1a>
    65e6:	2301      	movs	r3, #1
    65e8:	e000      	b.n	65ec <_calendar_init+0x1c>
    65ea:	2300      	movs	r3, #0
    65ec:	f003 0301 	and.w	r3, r3, #1
    65f0:	b2db      	uxtb	r3, r3
    65f2:	222f      	movs	r2, #47	; 0x2f
    65f4:	491b      	ldr	r1, [pc, #108]	; (6664 <_calendar_init+0x94>)
    65f6:	4618      	mov	r0, r3
    65f8:	4b1b      	ldr	r3, [pc, #108]	; (6668 <_calendar_init+0x98>)
    65fa:	4798      	blx	r3

	_rtc_dev = dev;
    65fc:	4a1b      	ldr	r2, [pc, #108]	; (666c <_calendar_init+0x9c>)
    65fe:	687b      	ldr	r3, [r7, #4]
    6600:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    6602:	687b      	ldr	r3, [r7, #4]
    6604:	681b      	ldr	r3, [r3, #0]
    6606:	4618      	mov	r0, r3
    6608:	4b19      	ldr	r3, [pc, #100]	; (6670 <_calendar_init+0xa0>)
    660a:	4798      	blx	r3
    660c:	4603      	mov	r3, r0
    660e:	2b00      	cmp	r3, #0
    6610:	d00a      	beq.n	6628 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    6612:	687b      	ldr	r3, [r7, #4]
    6614:	681b      	ldr	r3, [r3, #0]
    6616:	4618      	mov	r0, r3
    6618:	4b16      	ldr	r3, [pc, #88]	; (6674 <_calendar_init+0xa4>)
    661a:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    661c:	687b      	ldr	r3, [r7, #4]
    661e:	681b      	ldr	r3, [r3, #0]
    6620:	2102      	movs	r1, #2
    6622:	4618      	mov	r0, r3
    6624:	4b14      	ldr	r3, [pc, #80]	; (6678 <_calendar_init+0xa8>)
    6626:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    6628:	687b      	ldr	r3, [r7, #4]
    662a:	681b      	ldr	r3, [r3, #0]
    662c:	4618      	mov	r0, r3
    662e:	4b13      	ldr	r3, [pc, #76]	; (667c <_calendar_init+0xac>)
    6630:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6632:	687b      	ldr	r3, [r7, #4]
    6634:	681b      	ldr	r3, [r3, #0]
    6636:	2101      	movs	r1, #1
    6638:	4618      	mov	r0, r3
    663a:	4b0f      	ldr	r3, [pc, #60]	; (6678 <_calendar_init+0xa8>)
    663c:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    663e:	687b      	ldr	r3, [r7, #4]
    6640:	681b      	ldr	r3, [r3, #0]
    6642:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    6646:	4618      	mov	r0, r3
    6648:	4b0d      	ldr	r3, [pc, #52]	; (6680 <_calendar_init+0xb0>)
    664a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    664c:	687b      	ldr	r3, [r7, #4]
    664e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6650:	2100      	movs	r1, #0
    6652:	4618      	mov	r0, r3
    6654:	4b0b      	ldr	r3, [pc, #44]	; (6684 <_calendar_init+0xb4>)
    6656:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6658:	2300      	movs	r3, #0
}
    665a:	4618      	mov	r0, r3
    665c:	3708      	adds	r7, #8
    665e:	46bd      	mov	sp, r7
    6660:	bd80      	pop	{r7, pc}
    6662:	bf00      	nop
    6664:	00014908 	.word	0x00014908
    6668:	00004211 	.word	0x00004211
    666c:	20000e9c 	.word	0x20000e9c
    6670:	00006521 	.word	0x00006521
    6674:	0000655d 	.word	0x0000655d
    6678:	00006465 	.word	0x00006465
    667c:	000064f5 	.word	0x000064f5
    6680:	0000658d 	.word	0x0000658d
    6684:	000065b5 	.word	0x000065b5

00006688 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    6688:	b580      	push	{r7, lr}
    668a:	b084      	sub	sp, #16
    668c:	af00      	add	r7, sp, #0
    668e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6690:	687b      	ldr	r3, [r7, #4]
    6692:	681b      	ldr	r3, [r3, #0]
    6694:	4618      	mov	r0, r3
    6696:	4b19      	ldr	r3, [pc, #100]	; (66fc <_rtc_interrupt_handler+0x74>)
    6698:	4798      	blx	r3
    669a:	4603      	mov	r3, r0
    669c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    669e:	687b      	ldr	r3, [r7, #4]
    66a0:	681b      	ldr	r3, [r3, #0]
    66a2:	4618      	mov	r0, r3
    66a4:	4b16      	ldr	r3, [pc, #88]	; (6700 <_rtc_interrupt_handler+0x78>)
    66a6:	4798      	blx	r3
    66a8:	4603      	mov	r3, r0
    66aa:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    66ac:	89fa      	ldrh	r2, [r7, #14]
    66ae:	89bb      	ldrh	r3, [r7, #12]
    66b0:	4013      	ands	r3, r2
    66b2:	b29b      	uxth	r3, r3
    66b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    66b8:	2b00      	cmp	r3, #0
    66ba:	d009      	beq.n	66d0 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    66bc:	687b      	ldr	r3, [r7, #4]
    66be:	685b      	ldr	r3, [r3, #4]
    66c0:	6878      	ldr	r0, [r7, #4]
    66c2:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    66c4:	687b      	ldr	r3, [r7, #4]
    66c6:	681b      	ldr	r3, [r3, #0]
    66c8:	4618      	mov	r0, r3
    66ca:	4b0e      	ldr	r3, [pc, #56]	; (6704 <_rtc_interrupt_handler+0x7c>)
    66cc:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    66ce:	e010      	b.n	66f2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    66d0:	89fa      	ldrh	r2, [r7, #14]
    66d2:	89bb      	ldrh	r3, [r7, #12]
    66d4:	4013      	ands	r3, r2
    66d6:	b29b      	uxth	r3, r3
    66d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    66dc:	2b00      	cmp	r3, #0
    66de:	d008      	beq.n	66f2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	689b      	ldr	r3, [r3, #8]
    66e4:	6878      	ldr	r0, [r7, #4]
    66e6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    66e8:	687b      	ldr	r3, [r7, #4]
    66ea:	681b      	ldr	r3, [r3, #0]
    66ec:	4618      	mov	r0, r3
    66ee:	4b06      	ldr	r3, [pc, #24]	; (6708 <_rtc_interrupt_handler+0x80>)
    66f0:	4798      	blx	r3
}
    66f2:	bf00      	nop
    66f4:	3710      	adds	r7, #16
    66f6:	46bd      	mov	sp, r7
    66f8:	bd80      	pop	{r7, pc}
    66fa:	bf00      	nop
    66fc:	000064c1 	.word	0x000064c1
    6700:	000064db 	.word	0x000064db
    6704:	00006489 	.word	0x00006489
    6708:	000064a5 	.word	0x000064a5

0000670c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    670c:	b580      	push	{r7, lr}
    670e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    6710:	4b03      	ldr	r3, [pc, #12]	; (6720 <RTC_Handler+0x14>)
    6712:	681b      	ldr	r3, [r3, #0]
    6714:	4618      	mov	r0, r3
    6716:	4b03      	ldr	r3, [pc, #12]	; (6724 <RTC_Handler+0x18>)
    6718:	4798      	blx	r3
}
    671a:	bf00      	nop
    671c:	bd80      	pop	{r7, pc}
    671e:	bf00      	nop
    6720:	20000e9c 	.word	0x20000e9c
    6724:	00006689 	.word	0x00006689

00006728 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6728:	b480      	push	{r7}
    672a:	b083      	sub	sp, #12
    672c:	af00      	add	r7, sp, #0
    672e:	6078      	str	r0, [r7, #4]
    6730:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6732:	bf00      	nop
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	69da      	ldr	r2, [r3, #28]
    6738:	683b      	ldr	r3, [r7, #0]
    673a:	4013      	ands	r3, r2
    673c:	2b00      	cmp	r3, #0
    673e:	d1f9      	bne.n	6734 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6740:	bf00      	nop
    6742:	370c      	adds	r7, #12
    6744:	46bd      	mov	sp, r7
    6746:	f85d 7b04 	ldr.w	r7, [sp], #4
    674a:	4770      	bx	lr

0000674c <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    674c:	b480      	push	{r7}
    674e:	b083      	sub	sp, #12
    6750:	af00      	add	r7, sp, #0
    6752:	6078      	str	r0, [r7, #4]
    6754:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    6756:	687b      	ldr	r3, [r7, #4]
    6758:	69da      	ldr	r2, [r3, #28]
    675a:	683b      	ldr	r3, [r7, #0]
    675c:	4013      	ands	r3, r2
    675e:	2b00      	cmp	r3, #0
    6760:	bf14      	ite	ne
    6762:	2301      	movne	r3, #1
    6764:	2300      	moveq	r3, #0
    6766:	b2db      	uxtb	r3, r3
}
    6768:	4618      	mov	r0, r3
    676a:	370c      	adds	r7, #12
    676c:	46bd      	mov	sp, r7
    676e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6772:	4770      	bx	lr

00006774 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6774:	b480      	push	{r7}
    6776:	b083      	sub	sp, #12
    6778:	af00      	add	r7, sp, #0
    677a:	6078      	str	r0, [r7, #4]
    677c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    677e:	bf00      	nop
    6780:	687b      	ldr	r3, [r7, #4]
    6782:	69da      	ldr	r2, [r3, #28]
    6784:	683b      	ldr	r3, [r7, #0]
    6786:	4013      	ands	r3, r2
    6788:	2b00      	cmp	r3, #0
    678a:	d1f9      	bne.n	6780 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    678c:	bf00      	nop
    678e:	370c      	adds	r7, #12
    6790:	46bd      	mov	sp, r7
    6792:	f85d 7b04 	ldr.w	r7, [sp], #4
    6796:	4770      	bx	lr

00006798 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6798:	b480      	push	{r7}
    679a:	b083      	sub	sp, #12
    679c:	af00      	add	r7, sp, #0
    679e:	6078      	str	r0, [r7, #4]
    67a0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    67a2:	687b      	ldr	r3, [r7, #4]
    67a4:	69da      	ldr	r2, [r3, #28]
    67a6:	683b      	ldr	r3, [r7, #0]
    67a8:	4013      	ands	r3, r2
    67aa:	2b00      	cmp	r3, #0
    67ac:	bf14      	ite	ne
    67ae:	2301      	movne	r3, #1
    67b0:	2300      	moveq	r3, #0
    67b2:	b2db      	uxtb	r3, r3
}
    67b4:	4618      	mov	r0, r3
    67b6:	370c      	adds	r7, #12
    67b8:	46bd      	mov	sp, r7
    67ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    67be:	4770      	bx	lr

000067c0 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    67c0:	b480      	push	{r7}
    67c2:	b083      	sub	sp, #12
    67c4:	af00      	add	r7, sp, #0
    67c6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    67c8:	687b      	ldr	r3, [r7, #4]
    67ca:	2201      	movs	r2, #1
    67cc:	761a      	strb	r2, [r3, #24]
}
    67ce:	bf00      	nop
    67d0:	370c      	adds	r7, #12
    67d2:	46bd      	mov	sp, r7
    67d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    67d8:	4770      	bx	lr

000067da <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    67da:	b480      	push	{r7}
    67dc:	b083      	sub	sp, #12
    67de:	af00      	add	r7, sp, #0
    67e0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    67e2:	687b      	ldr	r3, [r7, #4]
    67e4:	2202      	movs	r2, #2
    67e6:	761a      	strb	r2, [r3, #24]
}
    67e8:	bf00      	nop
    67ea:	370c      	adds	r7, #12
    67ec:	46bd      	mov	sp, r7
    67ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    67f2:	4770      	bx	lr

000067f4 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    67f4:	b480      	push	{r7}
    67f6:	b083      	sub	sp, #12
    67f8:	af00      	add	r7, sp, #0
    67fa:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    67fc:	687b      	ldr	r3, [r7, #4]
    67fe:	7e1b      	ldrb	r3, [r3, #24]
    6800:	b2db      	uxtb	r3, r3
}
    6802:	4618      	mov	r0, r3
    6804:	370c      	adds	r7, #12
    6806:	46bd      	mov	sp, r7
    6808:	f85d 7b04 	ldr.w	r7, [sp], #4
    680c:	4770      	bx	lr

0000680e <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    680e:	b480      	push	{r7}
    6810:	b085      	sub	sp, #20
    6812:	af00      	add	r7, sp, #0
    6814:	6078      	str	r0, [r7, #4]
    6816:	460b      	mov	r3, r1
    6818:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    681a:	687b      	ldr	r3, [r7, #4]
    681c:	7e1b      	ldrb	r3, [r3, #24]
    681e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6820:	7bfa      	ldrb	r2, [r7, #15]
    6822:	78fb      	ldrb	r3, [r7, #3]
    6824:	4013      	ands	r3, r2
    6826:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6828:	7bfb      	ldrb	r3, [r7, #15]
}
    682a:	4618      	mov	r0, r3
    682c:	3714      	adds	r7, #20
    682e:	46bd      	mov	sp, r7
    6830:	f85d 7b04 	ldr.w	r7, [sp], #4
    6834:	4770      	bx	lr

00006836 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6836:	b480      	push	{r7}
    6838:	b083      	sub	sp, #12
    683a:	af00      	add	r7, sp, #0
    683c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    683e:	687b      	ldr	r3, [r7, #4]
    6840:	7e1b      	ldrb	r3, [r3, #24]
    6842:	b2db      	uxtb	r3, r3
}
    6844:	4618      	mov	r0, r3
    6846:	370c      	adds	r7, #12
    6848:	46bd      	mov	sp, r7
    684a:	f85d 7b04 	ldr.w	r7, [sp], #4
    684e:	4770      	bx	lr

00006850 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6850:	b480      	push	{r7}
    6852:	b083      	sub	sp, #12
    6854:	af00      	add	r7, sp, #0
    6856:	6078      	str	r0, [r7, #4]
    6858:	460b      	mov	r3, r1
    685a:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    685c:	687b      	ldr	r3, [r7, #4]
    685e:	78fa      	ldrb	r2, [r7, #3]
    6860:	761a      	strb	r2, [r3, #24]
}
    6862:	bf00      	nop
    6864:	370c      	adds	r7, #12
    6866:	46bd      	mov	sp, r7
    6868:	f85d 7b04 	ldr.w	r7, [sp], #4
    686c:	4770      	bx	lr
	...

00006870 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6870:	b580      	push	{r7, lr}
    6872:	b082      	sub	sp, #8
    6874:	af00      	add	r7, sp, #0
    6876:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6878:	687b      	ldr	r3, [r7, #4]
    687a:	681b      	ldr	r3, [r3, #0]
    687c:	f043 0202 	orr.w	r2, r3, #2
    6880:	687b      	ldr	r3, [r7, #4]
    6882:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6884:	2103      	movs	r1, #3
    6886:	6878      	ldr	r0, [r7, #4]
    6888:	4b02      	ldr	r3, [pc, #8]	; (6894 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    688a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    688c:	bf00      	nop
    688e:	3708      	adds	r7, #8
    6890:	46bd      	mov	sp, r7
    6892:	bd80      	pop	{r7, pc}
    6894:	00006729 	.word	0x00006729

00006898 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6898:	b580      	push	{r7, lr}
    689a:	b082      	sub	sp, #8
    689c:	af00      	add	r7, sp, #0
    689e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    68a0:	687b      	ldr	r3, [r7, #4]
    68a2:	681b      	ldr	r3, [r3, #0]
    68a4:	f023 0202 	bic.w	r2, r3, #2
    68a8:	687b      	ldr	r3, [r7, #4]
    68aa:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    68ac:	2103      	movs	r1, #3
    68ae:	6878      	ldr	r0, [r7, #4]
    68b0:	4b02      	ldr	r3, [pc, #8]	; (68bc <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    68b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68b4:	bf00      	nop
    68b6:	3708      	adds	r7, #8
    68b8:	46bd      	mov	sp, r7
    68ba:	bd80      	pop	{r7, pc}
    68bc:	00006729 	.word	0x00006729

000068c0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    68c0:	b480      	push	{r7}
    68c2:	b085      	sub	sp, #20
    68c4:	af00      	add	r7, sp, #0
    68c6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    68c8:	687b      	ldr	r3, [r7, #4]
    68ca:	681b      	ldr	r3, [r3, #0]
    68cc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    68ce:	68fb      	ldr	r3, [r7, #12]
    68d0:	0edb      	lsrs	r3, r3, #27
    68d2:	f003 0301 	and.w	r3, r3, #1
    68d6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    68d8:	68fb      	ldr	r3, [r7, #12]
    68da:	2b00      	cmp	r3, #0
    68dc:	bf14      	ite	ne
    68de:	2301      	movne	r3, #1
    68e0:	2300      	moveq	r3, #0
    68e2:	b2db      	uxtb	r3, r3
}
    68e4:	4618      	mov	r0, r3
    68e6:	3714      	adds	r7, #20
    68e8:	46bd      	mov	sp, r7
    68ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    68ee:	4770      	bx	lr

000068f0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b084      	sub	sp, #16
    68f4:	af00      	add	r7, sp, #0
    68f6:	6078      	str	r0, [r7, #4]
    68f8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    68fa:	2103      	movs	r1, #3
    68fc:	6878      	ldr	r0, [r7, #4]
    68fe:	4b07      	ldr	r3, [pc, #28]	; (691c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6900:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6902:	687b      	ldr	r3, [r7, #4]
    6904:	681b      	ldr	r3, [r3, #0]
    6906:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6908:	68fa      	ldr	r2, [r7, #12]
    690a:	683b      	ldr	r3, [r7, #0]
    690c:	4013      	ands	r3, r2
    690e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6910:	68fb      	ldr	r3, [r7, #12]
}
    6912:	4618      	mov	r0, r3
    6914:	3710      	adds	r7, #16
    6916:	46bd      	mov	sp, r7
    6918:	bd80      	pop	{r7, pc}
    691a:	bf00      	nop
    691c:	00006729 	.word	0x00006729

00006920 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6920:	b580      	push	{r7, lr}
    6922:	b082      	sub	sp, #8
    6924:	af00      	add	r7, sp, #0
    6926:	6078      	str	r0, [r7, #4]
    6928:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    692a:	687b      	ldr	r3, [r7, #4]
    692c:	683a      	ldr	r2, [r7, #0]
    692e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6930:	2103      	movs	r1, #3
    6932:	6878      	ldr	r0, [r7, #4]
    6934:	4b02      	ldr	r3, [pc, #8]	; (6940 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6936:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6938:	bf00      	nop
    693a:	3708      	adds	r7, #8
    693c:	46bd      	mov	sp, r7
    693e:	bd80      	pop	{r7, pc}
    6940:	00006729 	.word	0x00006729

00006944 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6944:	b580      	push	{r7, lr}
    6946:	b082      	sub	sp, #8
    6948:	af00      	add	r7, sp, #0
    694a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    694c:	687b      	ldr	r3, [r7, #4]
    694e:	681b      	ldr	r3, [r3, #0]
    6950:	f043 0202 	orr.w	r2, r3, #2
    6954:	687b      	ldr	r3, [r7, #4]
    6956:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6958:	2103      	movs	r1, #3
    695a:	6878      	ldr	r0, [r7, #4]
    695c:	4b02      	ldr	r3, [pc, #8]	; (6968 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    695e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6960:	bf00      	nop
    6962:	3708      	adds	r7, #8
    6964:	46bd      	mov	sp, r7
    6966:	bd80      	pop	{r7, pc}
    6968:	00006775 	.word	0x00006775

0000696c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    696c:	b580      	push	{r7, lr}
    696e:	b084      	sub	sp, #16
    6970:	af00      	add	r7, sp, #0
    6972:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6974:	2103      	movs	r1, #3
    6976:	6878      	ldr	r0, [r7, #4]
    6978:	4b09      	ldr	r3, [pc, #36]	; (69a0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    697a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    697c:	687b      	ldr	r3, [r7, #4]
    697e:	681b      	ldr	r3, [r3, #0]
    6980:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    6982:	68fb      	ldr	r3, [r7, #12]
    6984:	085b      	lsrs	r3, r3, #1
    6986:	f003 0301 	and.w	r3, r3, #1
    698a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    698c:	68fb      	ldr	r3, [r7, #12]
    698e:	2b00      	cmp	r3, #0
    6990:	bf14      	ite	ne
    6992:	2301      	movne	r3, #1
    6994:	2300      	moveq	r3, #0
    6996:	b2db      	uxtb	r3, r3
}
    6998:	4618      	mov	r0, r3
    699a:	3710      	adds	r7, #16
    699c:	46bd      	mov	sp, r7
    699e:	bd80      	pop	{r7, pc}
    69a0:	00006775 	.word	0x00006775

000069a4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    69a4:	b580      	push	{r7, lr}
    69a6:	b082      	sub	sp, #8
    69a8:	af00      	add	r7, sp, #0
    69aa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    69ac:	687b      	ldr	r3, [r7, #4]
    69ae:	681b      	ldr	r3, [r3, #0]
    69b0:	f023 0202 	bic.w	r2, r3, #2
    69b4:	687b      	ldr	r3, [r7, #4]
    69b6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    69b8:	2103      	movs	r1, #3
    69ba:	6878      	ldr	r0, [r7, #4]
    69bc:	4b02      	ldr	r3, [pc, #8]	; (69c8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    69be:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69c0:	bf00      	nop
    69c2:	3708      	adds	r7, #8
    69c4:	46bd      	mov	sp, r7
    69c6:	bd80      	pop	{r7, pc}
    69c8:	00006775 	.word	0x00006775

000069cc <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    69cc:	b580      	push	{r7, lr}
    69ce:	b084      	sub	sp, #16
    69d0:	af00      	add	r7, sp, #0
    69d2:	6078      	str	r0, [r7, #4]
    69d4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    69d6:	2103      	movs	r1, #3
    69d8:	6878      	ldr	r0, [r7, #4]
    69da:	4b07      	ldr	r3, [pc, #28]	; (69f8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    69dc:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    69de:	687b      	ldr	r3, [r7, #4]
    69e0:	681b      	ldr	r3, [r3, #0]
    69e2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    69e4:	68fa      	ldr	r2, [r7, #12]
    69e6:	683b      	ldr	r3, [r7, #0]
    69e8:	4013      	ands	r3, r2
    69ea:	60fb      	str	r3, [r7, #12]
	return tmp;
    69ec:	68fb      	ldr	r3, [r7, #12]
}
    69ee:	4618      	mov	r0, r3
    69f0:	3710      	adds	r7, #16
    69f2:	46bd      	mov	sp, r7
    69f4:	bd80      	pop	{r7, pc}
    69f6:	bf00      	nop
    69f8:	00006775 	.word	0x00006775

000069fc <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    69fc:	b580      	push	{r7, lr}
    69fe:	b082      	sub	sp, #8
    6a00:	af00      	add	r7, sp, #0
    6a02:	6078      	str	r0, [r7, #4]
    6a04:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6a06:	687b      	ldr	r3, [r7, #4]
    6a08:	683a      	ldr	r2, [r7, #0]
    6a0a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6a0c:	2103      	movs	r1, #3
    6a0e:	6878      	ldr	r0, [r7, #4]
    6a10:	4b02      	ldr	r3, [pc, #8]	; (6a1c <hri_sercomspi_write_CTRLA_reg+0x20>)
    6a12:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a14:	bf00      	nop
    6a16:	3708      	adds	r7, #8
    6a18:	46bd      	mov	sp, r7
    6a1a:	bd80      	pop	{r7, pc}
    6a1c:	00006775 	.word	0x00006775

00006a20 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6a20:	b580      	push	{r7, lr}
    6a22:	b082      	sub	sp, #8
    6a24:	af00      	add	r7, sp, #0
    6a26:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6a28:	687b      	ldr	r3, [r7, #4]
    6a2a:	685b      	ldr	r3, [r3, #4]
    6a2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6a30:	687b      	ldr	r3, [r7, #4]
    6a32:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a34:	2104      	movs	r1, #4
    6a36:	6878      	ldr	r0, [r7, #4]
    6a38:	4b02      	ldr	r3, [pc, #8]	; (6a44 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    6a3a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a3c:	bf00      	nop
    6a3e:	3708      	adds	r7, #8
    6a40:	46bd      	mov	sp, r7
    6a42:	bd80      	pop	{r7, pc}
    6a44:	00006729 	.word	0x00006729

00006a48 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6a48:	b580      	push	{r7, lr}
    6a4a:	b082      	sub	sp, #8
    6a4c:	af00      	add	r7, sp, #0
    6a4e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6a50:	687b      	ldr	r3, [r7, #4]
    6a52:	685b      	ldr	r3, [r3, #4]
    6a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6a58:	687b      	ldr	r3, [r7, #4]
    6a5a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a5c:	2104      	movs	r1, #4
    6a5e:	6878      	ldr	r0, [r7, #4]
    6a60:	4b02      	ldr	r3, [pc, #8]	; (6a6c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6a62:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a64:	bf00      	nop
    6a66:	3708      	adds	r7, #8
    6a68:	46bd      	mov	sp, r7
    6a6a:	bd80      	pop	{r7, pc}
    6a6c:	00006729 	.word	0x00006729

00006a70 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6a70:	b580      	push	{r7, lr}
    6a72:	b082      	sub	sp, #8
    6a74:	af00      	add	r7, sp, #0
    6a76:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6a78:	687b      	ldr	r3, [r7, #4]
    6a7a:	685b      	ldr	r3, [r3, #4]
    6a7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6a80:	687b      	ldr	r3, [r7, #4]
    6a82:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a84:	2104      	movs	r1, #4
    6a86:	6878      	ldr	r0, [r7, #4]
    6a88:	4b02      	ldr	r3, [pc, #8]	; (6a94 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    6a8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a8c:	bf00      	nop
    6a8e:	3708      	adds	r7, #8
    6a90:	46bd      	mov	sp, r7
    6a92:	bd80      	pop	{r7, pc}
    6a94:	00006729 	.word	0x00006729

00006a98 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6a98:	b580      	push	{r7, lr}
    6a9a:	b082      	sub	sp, #8
    6a9c:	af00      	add	r7, sp, #0
    6a9e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6aa0:	687b      	ldr	r3, [r7, #4]
    6aa2:	685b      	ldr	r3, [r3, #4]
    6aa4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6aa8:	687b      	ldr	r3, [r7, #4]
    6aaa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6aac:	2104      	movs	r1, #4
    6aae:	6878      	ldr	r0, [r7, #4]
    6ab0:	4b02      	ldr	r3, [pc, #8]	; (6abc <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    6ab2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ab4:	bf00      	nop
    6ab6:	3708      	adds	r7, #8
    6ab8:	46bd      	mov	sp, r7
    6aba:	bd80      	pop	{r7, pc}
    6abc:	00006729 	.word	0x00006729

00006ac0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6ac0:	b580      	push	{r7, lr}
    6ac2:	b082      	sub	sp, #8
    6ac4:	af00      	add	r7, sp, #0
    6ac6:	6078      	str	r0, [r7, #4]
    6ac8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6aca:	687b      	ldr	r3, [r7, #4]
    6acc:	685a      	ldr	r2, [r3, #4]
    6ace:	683b      	ldr	r3, [r7, #0]
    6ad0:	041b      	lsls	r3, r3, #16
    6ad2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    6ad6:	431a      	orrs	r2, r3
    6ad8:	687b      	ldr	r3, [r7, #4]
    6ada:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6adc:	2104      	movs	r1, #4
    6ade:	6878      	ldr	r0, [r7, #4]
    6ae0:	4b02      	ldr	r3, [pc, #8]	; (6aec <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    6ae2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ae4:	bf00      	nop
    6ae6:	3708      	adds	r7, #8
    6ae8:	46bd      	mov	sp, r7
    6aea:	bd80      	pop	{r7, pc}
    6aec:	00006729 	.word	0x00006729

00006af0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6af0:	b580      	push	{r7, lr}
    6af2:	b082      	sub	sp, #8
    6af4:	af00      	add	r7, sp, #0
    6af6:	6078      	str	r0, [r7, #4]
    6af8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6afa:	687b      	ldr	r3, [r7, #4]
    6afc:	683a      	ldr	r2, [r7, #0]
    6afe:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6b00:	2104      	movs	r1, #4
    6b02:	6878      	ldr	r0, [r7, #4]
    6b04:	4b02      	ldr	r3, [pc, #8]	; (6b10 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    6b06:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b08:	bf00      	nop
    6b0a:	3708      	adds	r7, #8
    6b0c:	46bd      	mov	sp, r7
    6b0e:	bd80      	pop	{r7, pc}
    6b10:	00006729 	.word	0x00006729

00006b14 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6b14:	b580      	push	{r7, lr}
    6b16:	b082      	sub	sp, #8
    6b18:	af00      	add	r7, sp, #0
    6b1a:	6078      	str	r0, [r7, #4]
    6b1c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6b1e:	687b      	ldr	r3, [r7, #4]
    6b20:	683a      	ldr	r2, [r7, #0]
    6b22:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6b24:	2117      	movs	r1, #23
    6b26:	6878      	ldr	r0, [r7, #4]
    6b28:	4b02      	ldr	r3, [pc, #8]	; (6b34 <hri_sercomspi_write_CTRLB_reg+0x20>)
    6b2a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b2c:	bf00      	nop
    6b2e:	3708      	adds	r7, #8
    6b30:	46bd      	mov	sp, r7
    6b32:	bd80      	pop	{r7, pc}
    6b34:	00006775 	.word	0x00006775

00006b38 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6b38:	b480      	push	{r7}
    6b3a:	b083      	sub	sp, #12
    6b3c:	af00      	add	r7, sp, #0
    6b3e:	6078      	str	r0, [r7, #4]
    6b40:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	683a      	ldr	r2, [r7, #0]
    6b46:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b48:	bf00      	nop
    6b4a:	370c      	adds	r7, #12
    6b4c:	46bd      	mov	sp, r7
    6b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b52:	4770      	bx	lr

00006b54 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6b54:	b480      	push	{r7}
    6b56:	b083      	sub	sp, #12
    6b58:	af00      	add	r7, sp, #0
    6b5a:	6078      	str	r0, [r7, #4]
    6b5c:	460b      	mov	r3, r1
    6b5e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6b60:	687b      	ldr	r3, [r7, #4]
    6b62:	78fa      	ldrb	r2, [r7, #3]
    6b64:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b66:	bf00      	nop
    6b68:	370c      	adds	r7, #12
    6b6a:	46bd      	mov	sp, r7
    6b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b70:	4770      	bx	lr
	...

00006b74 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6b74:	b580      	push	{r7, lr}
    6b76:	b084      	sub	sp, #16
    6b78:	af00      	add	r7, sp, #0
    6b7a:	6078      	str	r0, [r7, #4]
    6b7c:	460b      	mov	r3, r1
    6b7e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6b80:	687b      	ldr	r3, [r7, #4]
    6b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b84:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6b86:	68fb      	ldr	r3, [r7, #12]
    6b88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6b8c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6b8e:	78fb      	ldrb	r3, [r7, #3]
    6b90:	039b      	lsls	r3, r3, #14
    6b92:	461a      	mov	r2, r3
    6b94:	68fb      	ldr	r3, [r7, #12]
    6b96:	4313      	orrs	r3, r2
    6b98:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6b9a:	687b      	ldr	r3, [r7, #4]
    6b9c:	68fa      	ldr	r2, [r7, #12]
    6b9e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6ba0:	2104      	movs	r1, #4
    6ba2:	6878      	ldr	r0, [r7, #4]
    6ba4:	4b02      	ldr	r3, [pc, #8]	; (6bb0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    6ba6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ba8:	bf00      	nop
    6baa:	3710      	adds	r7, #16
    6bac:	46bd      	mov	sp, r7
    6bae:	bd80      	pop	{r7, pc}
    6bb0:	00006729 	.word	0x00006729

00006bb4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6bb4:	b580      	push	{r7, lr}
    6bb6:	b082      	sub	sp, #8
    6bb8:	af00      	add	r7, sp, #0
    6bba:	6078      	str	r0, [r7, #4]
    6bbc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6bbe:	687b      	ldr	r3, [r7, #4]
    6bc0:	683a      	ldr	r2, [r7, #0]
    6bc2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6bc4:	2104      	movs	r1, #4
    6bc6:	6878      	ldr	r0, [r7, #4]
    6bc8:	4b02      	ldr	r3, [pc, #8]	; (6bd4 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    6bca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6bcc:	bf00      	nop
    6bce:	3708      	adds	r7, #8
    6bd0:	46bd      	mov	sp, r7
    6bd2:	bd80      	pop	{r7, pc}
    6bd4:	00006729 	.word	0x00006729

00006bd8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6bd8:	b580      	push	{r7, lr}
    6bda:	b082      	sub	sp, #8
    6bdc:	af00      	add	r7, sp, #0
    6bde:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6be0:	2104      	movs	r1, #4
    6be2:	6878      	ldr	r0, [r7, #4]
    6be4:	4b03      	ldr	r3, [pc, #12]	; (6bf4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6be6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6be8:	687b      	ldr	r3, [r7, #4]
    6bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6bec:	4618      	mov	r0, r3
    6bee:	3708      	adds	r7, #8
    6bf0:	46bd      	mov	sp, r7
    6bf2:	bd80      	pop	{r7, pc}
    6bf4:	00006729 	.word	0x00006729

00006bf8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6bf8:	b480      	push	{r7}
    6bfa:	b083      	sub	sp, #12
    6bfc:	af00      	add	r7, sp, #0
    6bfe:	6078      	str	r0, [r7, #4]
    6c00:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6c02:	687b      	ldr	r3, [r7, #4]
    6c04:	683a      	ldr	r2, [r7, #0]
    6c06:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6c08:	bf00      	nop
    6c0a:	370c      	adds	r7, #12
    6c0c:	46bd      	mov	sp, r7
    6c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c12:	4770      	bx	lr

00006c14 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6c14:	b580      	push	{r7, lr}
    6c16:	b082      	sub	sp, #8
    6c18:	af00      	add	r7, sp, #0
    6c1a:	6078      	str	r0, [r7, #4]
    6c1c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6c1e:	687b      	ldr	r3, [r7, #4]
    6c20:	683a      	ldr	r2, [r7, #0]
    6c22:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6c24:	2104      	movs	r1, #4
    6c26:	6878      	ldr	r0, [r7, #4]
    6c28:	4b02      	ldr	r3, [pc, #8]	; (6c34 <hri_sercomi2cm_write_DATA_reg+0x20>)
    6c2a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6c2c:	bf00      	nop
    6c2e:	3708      	adds	r7, #8
    6c30:	46bd      	mov	sp, r7
    6c32:	bd80      	pop	{r7, pc}
    6c34:	00006729 	.word	0x00006729

00006c38 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6c38:	b580      	push	{r7, lr}
    6c3a:	b082      	sub	sp, #8
    6c3c:	af00      	add	r7, sp, #0
    6c3e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6c40:	2104      	movs	r1, #4
    6c42:	6878      	ldr	r0, [r7, #4]
    6c44:	4b03      	ldr	r3, [pc, #12]	; (6c54 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6c46:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6c48:	687b      	ldr	r3, [r7, #4]
    6c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6c4c:	4618      	mov	r0, r3
    6c4e:	3708      	adds	r7, #8
    6c50:	46bd      	mov	sp, r7
    6c52:	bd80      	pop	{r7, pc}
    6c54:	00006729 	.word	0x00006729

00006c58 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6c58:	b480      	push	{r7}
    6c5a:	b083      	sub	sp, #12
    6c5c:	af00      	add	r7, sp, #0
    6c5e:	6078      	str	r0, [r7, #4]
    6c60:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6c62:	687b      	ldr	r3, [r7, #4]
    6c64:	683a      	ldr	r2, [r7, #0]
    6c66:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6c68:	bf00      	nop
    6c6a:	370c      	adds	r7, #12
    6c6c:	46bd      	mov	sp, r7
    6c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c72:	4770      	bx	lr

00006c74 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6c74:	b480      	push	{r7}
    6c76:	b083      	sub	sp, #12
    6c78:	af00      	add	r7, sp, #0
    6c7a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6c7c:	687b      	ldr	r3, [r7, #4]
    6c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6c80:	4618      	mov	r0, r3
    6c82:	370c      	adds	r7, #12
    6c84:	46bd      	mov	sp, r7
    6c86:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c8a:	4770      	bx	lr

00006c8c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6c8c:	b480      	push	{r7}
    6c8e:	b083      	sub	sp, #12
    6c90:	af00      	add	r7, sp, #0
    6c92:	6078      	str	r0, [r7, #4]
    6c94:	460b      	mov	r3, r1
    6c96:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6c98:	687b      	ldr	r3, [r7, #4]
    6c9a:	78fa      	ldrb	r2, [r7, #3]
    6c9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ca0:	bf00      	nop
    6ca2:	370c      	adds	r7, #12
    6ca4:	46bd      	mov	sp, r7
    6ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6caa:	4770      	bx	lr

00006cac <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6cac:	b480      	push	{r7}
    6cae:	b083      	sub	sp, #12
    6cb0:	af00      	add	r7, sp, #0
    6cb2:	6078      	str	r0, [r7, #4]
    6cb4:	460b      	mov	r3, r1
    6cb6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6cb8:	687b      	ldr	r3, [r7, #4]
    6cba:	887a      	ldrh	r2, [r7, #2]
    6cbc:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6cbe:	bf00      	nop
    6cc0:	370c      	adds	r7, #12
    6cc2:	46bd      	mov	sp, r7
    6cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cc8:	4770      	bx	lr
	...

00006ccc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    6ccc:	b580      	push	{r7, lr}
    6cce:	b082      	sub	sp, #8
    6cd0:	af00      	add	r7, sp, #0
    6cd2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6cd4:	2104      	movs	r1, #4
    6cd6:	6878      	ldr	r0, [r7, #4]
    6cd8:	4b06      	ldr	r3, [pc, #24]	; (6cf4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    6cda:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	8b5b      	ldrh	r3, [r3, #26]
    6ce0:	b29b      	uxth	r3, r3
    6ce2:	091b      	lsrs	r3, r3, #4
    6ce4:	b29b      	uxth	r3, r3
    6ce6:	f003 0303 	and.w	r3, r3, #3
    6cea:	b29b      	uxth	r3, r3
}
    6cec:	4618      	mov	r0, r3
    6cee:	3708      	adds	r7, #8
    6cf0:	46bd      	mov	sp, r7
    6cf2:	bd80      	pop	{r7, pc}
    6cf4:	00006729 	.word	0x00006729

00006cf8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6cf8:	b580      	push	{r7, lr}
    6cfa:	b082      	sub	sp, #8
    6cfc:	af00      	add	r7, sp, #0
    6cfe:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6d00:	2104      	movs	r1, #4
    6d02:	6878      	ldr	r0, [r7, #4]
    6d04:	4b04      	ldr	r3, [pc, #16]	; (6d18 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6d06:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6d08:	687b      	ldr	r3, [r7, #4]
    6d0a:	8b5b      	ldrh	r3, [r3, #26]
    6d0c:	b29b      	uxth	r3, r3
}
    6d0e:	4618      	mov	r0, r3
    6d10:	3708      	adds	r7, #8
    6d12:	46bd      	mov	sp, r7
    6d14:	bd80      	pop	{r7, pc}
    6d16:	bf00      	nop
    6d18:	00006729 	.word	0x00006729

00006d1c <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6d1c:	b580      	push	{r7, lr}
    6d1e:	b082      	sub	sp, #8
    6d20:	af00      	add	r7, sp, #0
    6d22:	6078      	str	r0, [r7, #4]
    6d24:	460b      	mov	r3, r1
    6d26:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6d28:	687b      	ldr	r3, [r7, #4]
    6d2a:	887a      	ldrh	r2, [r7, #2]
    6d2c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6d2e:	2104      	movs	r1, #4
    6d30:	6878      	ldr	r0, [r7, #4]
    6d32:	4b03      	ldr	r3, [pc, #12]	; (6d40 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6d34:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6d36:	bf00      	nop
    6d38:	3708      	adds	r7, #8
    6d3a:	46bd      	mov	sp, r7
    6d3c:	bd80      	pop	{r7, pc}
    6d3e:	bf00      	nop
    6d40:	00006729 	.word	0x00006729

00006d44 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6d44:	b4b0      	push	{r4, r5, r7}
    6d46:	b08d      	sub	sp, #52	; 0x34
    6d48:	af00      	add	r7, sp, #0
    6d4a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6d4c:	4b13      	ldr	r3, [pc, #76]	; (6d9c <_sercom_get_hardware_index+0x58>)
    6d4e:	f107 040c 	add.w	r4, r7, #12
    6d52:	461d      	mov	r5, r3
    6d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6d58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6d5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6d60:	2300      	movs	r3, #0
    6d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    6d64:	e010      	b.n	6d88 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d68:	009b      	lsls	r3, r3, #2
    6d6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6d6e:	4413      	add	r3, r2
    6d70:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6d74:	461a      	mov	r2, r3
    6d76:	687b      	ldr	r3, [r7, #4]
    6d78:	429a      	cmp	r2, r3
    6d7a:	d102      	bne.n	6d82 <_sercom_get_hardware_index+0x3e>
			return i;
    6d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d7e:	b2db      	uxtb	r3, r3
    6d80:	e006      	b.n	6d90 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d84:	3301      	adds	r3, #1
    6d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    6d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d8a:	2b07      	cmp	r3, #7
    6d8c:	d9eb      	bls.n	6d66 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6d8e:	2300      	movs	r3, #0
}
    6d90:	4618      	mov	r0, r3
    6d92:	3734      	adds	r7, #52	; 0x34
    6d94:	46bd      	mov	sp, r7
    6d96:	bcb0      	pop	{r4, r5, r7}
    6d98:	4770      	bx	lr
    6d9a:	bf00      	nop
    6d9c:	0001493c 	.word	0x0001493c

00006da0 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6da0:	b580      	push	{r7, lr}
    6da2:	b084      	sub	sp, #16
    6da4:	af00      	add	r7, sp, #0
    6da6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6da8:	6878      	ldr	r0, [r7, #4]
    6daa:	4b13      	ldr	r3, [pc, #76]	; (6df8 <_get_i2cm_index+0x58>)
    6dac:	4798      	blx	r3
    6dae:	4603      	mov	r3, r0
    6db0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6db2:	2300      	movs	r3, #0
    6db4:	73fb      	strb	r3, [r7, #15]
    6db6:	e010      	b.n	6dda <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6db8:	7bfa      	ldrb	r2, [r7, #15]
    6dba:	4910      	ldr	r1, [pc, #64]	; (6dfc <_get_i2cm_index+0x5c>)
    6dbc:	4613      	mov	r3, r2
    6dbe:	005b      	lsls	r3, r3, #1
    6dc0:	4413      	add	r3, r2
    6dc2:	00db      	lsls	r3, r3, #3
    6dc4:	440b      	add	r3, r1
    6dc6:	781b      	ldrb	r3, [r3, #0]
    6dc8:	7bba      	ldrb	r2, [r7, #14]
    6dca:	429a      	cmp	r2, r3
    6dcc:	d102      	bne.n	6dd4 <_get_i2cm_index+0x34>
			return i;
    6dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6dd2:	e00d      	b.n	6df0 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6dd4:	7bfb      	ldrb	r3, [r7, #15]
    6dd6:	3301      	adds	r3, #1
    6dd8:	73fb      	strb	r3, [r7, #15]
    6dda:	7bfb      	ldrb	r3, [r7, #15]
    6ddc:	2b02      	cmp	r3, #2
    6dde:	d9eb      	bls.n	6db8 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6de0:	f240 32a6 	movw	r2, #934	; 0x3a6
    6de4:	4906      	ldr	r1, [pc, #24]	; (6e00 <_get_i2cm_index+0x60>)
    6de6:	2000      	movs	r0, #0
    6de8:	4b06      	ldr	r3, [pc, #24]	; (6e04 <_get_i2cm_index+0x64>)
    6dea:	4798      	blx	r3
	return -1;
    6dec:	f04f 33ff 	mov.w	r3, #4294967295
}
    6df0:	4618      	mov	r0, r3
    6df2:	3710      	adds	r7, #16
    6df4:	46bd      	mov	sp, r7
    6df6:	bd80      	pop	{r7, pc}
    6df8:	00006d45 	.word	0x00006d45
    6dfc:	20000018 	.word	0x20000018
    6e00:	00014920 	.word	0x00014920
    6e04:	00004211 	.word	0x00004211

00006e08 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6e08:	b580      	push	{r7, lr}
    6e0a:	b082      	sub	sp, #8
    6e0c:	af00      	add	r7, sp, #0
    6e0e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6e10:	2103      	movs	r1, #3
    6e12:	6878      	ldr	r0, [r7, #4]
    6e14:	4b02      	ldr	r3, [pc, #8]	; (6e20 <_sercom_i2c_send_stop+0x18>)
    6e16:	4798      	blx	r3
}
    6e18:	bf00      	nop
    6e1a:	3708      	adds	r7, #8
    6e1c:	46bd      	mov	sp, r7
    6e1e:	bd80      	pop	{r7, pc}
    6e20:	00006ac1 	.word	0x00006ac1

00006e24 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6e24:	b590      	push	{r4, r7, lr}
    6e26:	b087      	sub	sp, #28
    6e28:	af00      	add	r7, sp, #0
    6e2a:	60f8      	str	r0, [r7, #12]
    6e2c:	60b9      	str	r1, [r7, #8]
    6e2e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6e30:	68f8      	ldr	r0, [r7, #12]
    6e32:	4b7d      	ldr	r3, [pc, #500]	; (7028 <_sercom_i2c_sync_analyse_flags+0x204>)
    6e34:	4798      	blx	r3
    6e36:	4603      	mov	r3, r0
    6e38:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6e3a:	68f8      	ldr	r0, [r7, #12]
    6e3c:	4b7b      	ldr	r3, [pc, #492]	; (702c <_sercom_i2c_sync_analyse_flags+0x208>)
    6e3e:	4798      	blx	r3
    6e40:	4603      	mov	r3, r0
    6e42:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6e44:	68bb      	ldr	r3, [r7, #8]
    6e46:	f003 0301 	and.w	r3, r3, #1
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	f000 8095 	beq.w	6f7a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6e50:	8a7b      	ldrh	r3, [r7, #18]
    6e52:	f003 0302 	and.w	r3, r3, #2
    6e56:	2b00      	cmp	r3, #0
    6e58:	d01d      	beq.n	6e96 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6e5a:	68f8      	ldr	r0, [r7, #12]
    6e5c:	4b74      	ldr	r3, [pc, #464]	; (7030 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6e5e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6e60:	687b      	ldr	r3, [r7, #4]
    6e62:	885b      	ldrh	r3, [r3, #2]
    6e64:	b29b      	uxth	r3, r3
    6e66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6e6a:	b29a      	uxth	r2, r3
    6e6c:	687b      	ldr	r3, [r7, #4]
    6e6e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6e70:	687b      	ldr	r3, [r7, #4]
    6e72:	885b      	ldrh	r3, [r3, #2]
    6e74:	b29b      	uxth	r3, r3
    6e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e7a:	b29a      	uxth	r2, r3
    6e7c:	687b      	ldr	r3, [r7, #4]
    6e7e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6e80:	8a7b      	ldrh	r3, [r7, #18]
    6e82:	f003 0301 	and.w	r3, r3, #1
    6e86:	2b00      	cmp	r3, #0
    6e88:	d002      	beq.n	6e90 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6e8a:	f06f 0304 	mvn.w	r3, #4
    6e8e:	e0c6      	b.n	701e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6e90:	f06f 0303 	mvn.w	r3, #3
    6e94:	e0c3      	b.n	701e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6e96:	8a7b      	ldrh	r3, [r7, #18]
    6e98:	f003 0304 	and.w	r3, r3, #4
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	d01f      	beq.n	6ee0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6ea0:	687b      	ldr	r3, [r7, #4]
    6ea2:	685b      	ldr	r3, [r3, #4]
    6ea4:	2b00      	cmp	r3, #0
    6ea6:	dd07      	ble.n	6eb8 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6ea8:	687b      	ldr	r3, [r7, #4]
    6eaa:	885b      	ldrh	r3, [r3, #2]
    6eac:	b29b      	uxth	r3, r3
    6eae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6eb2:	b29a      	uxth	r2, r3
    6eb4:	687b      	ldr	r3, [r7, #4]
    6eb6:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6eb8:	687b      	ldr	r3, [r7, #4]
    6eba:	885b      	ldrh	r3, [r3, #2]
    6ebc:	b29b      	uxth	r3, r3
    6ebe:	b21b      	sxth	r3, r3
    6ec0:	2b00      	cmp	r3, #0
    6ec2:	da02      	bge.n	6eca <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6ec4:	68f8      	ldr	r0, [r7, #12]
    6ec6:	4b5b      	ldr	r3, [pc, #364]	; (7034 <_sercom_i2c_sync_analyse_flags+0x210>)
    6ec8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6eca:	687b      	ldr	r3, [r7, #4]
    6ecc:	885b      	ldrh	r3, [r3, #2]
    6ece:	b29b      	uxth	r3, r3
    6ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ed4:	b29a      	uxth	r2, r3
    6ed6:	687b      	ldr	r3, [r7, #4]
    6ed8:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6eda:	f06f 0301 	mvn.w	r3, #1
    6ede:	e09e      	b.n	701e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6ee0:	687b      	ldr	r3, [r7, #4]
    6ee2:	885b      	ldrh	r3, [r3, #2]
    6ee4:	b29b      	uxth	r3, r3
    6ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6eea:	2b00      	cmp	r3, #0
    6eec:	d01c      	beq.n	6f28 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6eee:	687b      	ldr	r3, [r7, #4]
    6ef0:	881b      	ldrh	r3, [r3, #0]
    6ef2:	121b      	asrs	r3, r3, #8
    6ef4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6ef6:	f003 0406 	and.w	r4, r3, #6
    6efa:	68f8      	ldr	r0, [r7, #12]
    6efc:	4b4e      	ldr	r3, [pc, #312]	; (7038 <_sercom_i2c_sync_analyse_flags+0x214>)
    6efe:	4798      	blx	r3
    6f00:	4603      	mov	r3, r0
    6f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6f06:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6f08:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6f0c:	4619      	mov	r1, r3
    6f0e:	68f8      	ldr	r0, [r7, #12]
    6f10:	4b4a      	ldr	r3, [pc, #296]	; (703c <_sercom_i2c_sync_analyse_flags+0x218>)
    6f12:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6f14:	687b      	ldr	r3, [r7, #4]
    6f16:	885b      	ldrh	r3, [r3, #2]
    6f18:	b29b      	uxth	r3, r3
    6f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6f1e:	b29a      	uxth	r2, r3
    6f20:	687b      	ldr	r3, [r7, #4]
    6f22:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6f24:	2300      	movs	r3, #0
    6f26:	e07a      	b.n	701e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6f28:	687b      	ldr	r3, [r7, #4]
    6f2a:	685b      	ldr	r3, [r3, #4]
    6f2c:	2b00      	cmp	r3, #0
    6f2e:	d111      	bne.n	6f54 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6f30:	687b      	ldr	r3, [r7, #4]
    6f32:	885b      	ldrh	r3, [r3, #2]
    6f34:	b29b      	uxth	r3, r3
    6f36:	b21b      	sxth	r3, r3
    6f38:	2b00      	cmp	r3, #0
    6f3a:	da02      	bge.n	6f42 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6f3c:	68f8      	ldr	r0, [r7, #12]
    6f3e:	4b3d      	ldr	r3, [pc, #244]	; (7034 <_sercom_i2c_sync_analyse_flags+0x210>)
    6f40:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6f42:	687b      	ldr	r3, [r7, #4]
    6f44:	885b      	ldrh	r3, [r3, #2]
    6f46:	b29b      	uxth	r3, r3
    6f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6f4c:	b29a      	uxth	r2, r3
    6f4e:	687b      	ldr	r3, [r7, #4]
    6f50:	805a      	strh	r2, [r3, #2]
    6f52:	e010      	b.n	6f76 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6f54:	687b      	ldr	r3, [r7, #4]
    6f56:	689b      	ldr	r3, [r3, #8]
    6f58:	781b      	ldrb	r3, [r3, #0]
    6f5a:	4619      	mov	r1, r3
    6f5c:	68f8      	ldr	r0, [r7, #12]
    6f5e:	4b38      	ldr	r3, [pc, #224]	; (7040 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6f60:	4798      	blx	r3
				msg->buffer++;
    6f62:	687b      	ldr	r3, [r7, #4]
    6f64:	689b      	ldr	r3, [r3, #8]
    6f66:	1c5a      	adds	r2, r3, #1
    6f68:	687b      	ldr	r3, [r7, #4]
    6f6a:	609a      	str	r2, [r3, #8]
				msg->len--;
    6f6c:	687b      	ldr	r3, [r7, #4]
    6f6e:	685b      	ldr	r3, [r3, #4]
    6f70:	1e5a      	subs	r2, r3, #1
    6f72:	687b      	ldr	r3, [r7, #4]
    6f74:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6f76:	2300      	movs	r3, #0
    6f78:	e051      	b.n	701e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6f7a:	68bb      	ldr	r3, [r7, #8]
    6f7c:	f003 0302 	and.w	r3, r3, #2
    6f80:	2b00      	cmp	r3, #0
    6f82:	d04b      	beq.n	701c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6f84:	687b      	ldr	r3, [r7, #4]
    6f86:	685b      	ldr	r3, [r3, #4]
    6f88:	2b00      	cmp	r3, #0
    6f8a:	d041      	beq.n	7010 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6f8c:	8a7b      	ldrh	r3, [r7, #18]
    6f8e:	f003 0304 	and.w	r3, r3, #4
    6f92:	2b00      	cmp	r3, #0
    6f94:	d13c      	bne.n	7010 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6f96:	687b      	ldr	r3, [r7, #4]
    6f98:	685b      	ldr	r3, [r3, #4]
    6f9a:	1e5a      	subs	r2, r3, #1
    6f9c:	687b      	ldr	r3, [r7, #4]
    6f9e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6fa0:	687b      	ldr	r3, [r7, #4]
    6fa2:	685b      	ldr	r3, [r3, #4]
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	d102      	bne.n	6fae <_sercom_i2c_sync_analyse_flags+0x18a>
    6fa8:	697b      	ldr	r3, [r7, #20]
    6faa:	2b00      	cmp	r3, #0
    6fac:	d006      	beq.n	6fbc <_sercom_i2c_sync_analyse_flags+0x198>
    6fae:	687b      	ldr	r3, [r7, #4]
    6fb0:	685b      	ldr	r3, [r3, #4]
    6fb2:	2b01      	cmp	r3, #1
    6fb4:	d105      	bne.n	6fc2 <_sercom_i2c_sync_analyse_flags+0x19e>
    6fb6:	697b      	ldr	r3, [r7, #20]
    6fb8:	2b00      	cmp	r3, #0
    6fba:	d002      	beq.n	6fc2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6fbc:	68f8      	ldr	r0, [r7, #12]
    6fbe:	4b21      	ldr	r3, [pc, #132]	; (7044 <_sercom_i2c_sync_analyse_flags+0x220>)
    6fc0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	685b      	ldr	r3, [r3, #4]
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	d113      	bne.n	6ff2 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6fca:	687b      	ldr	r3, [r7, #4]
    6fcc:	885b      	ldrh	r3, [r3, #2]
    6fce:	b29b      	uxth	r3, r3
    6fd0:	b21b      	sxth	r3, r3
    6fd2:	2b00      	cmp	r3, #0
    6fd4:	da05      	bge.n	6fe2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6fd6:	68f8      	ldr	r0, [r7, #12]
    6fd8:	4b1b      	ldr	r3, [pc, #108]	; (7048 <_sercom_i2c_sync_analyse_flags+0x224>)
    6fda:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6fdc:	68f8      	ldr	r0, [r7, #12]
    6fde:	4b15      	ldr	r3, [pc, #84]	; (7034 <_sercom_i2c_sync_analyse_flags+0x210>)
    6fe0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6fe2:	687b      	ldr	r3, [r7, #4]
    6fe4:	885b      	ldrh	r3, [r3, #2]
    6fe6:	b29b      	uxth	r3, r3
    6fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6fec:	b29a      	uxth	r2, r3
    6fee:	687b      	ldr	r3, [r7, #4]
    6ff0:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6ff2:	687b      	ldr	r3, [r7, #4]
    6ff4:	689c      	ldr	r4, [r3, #8]
    6ff6:	1c62      	adds	r2, r4, #1
    6ff8:	687b      	ldr	r3, [r7, #4]
    6ffa:	609a      	str	r2, [r3, #8]
    6ffc:	68f8      	ldr	r0, [r7, #12]
    6ffe:	4b13      	ldr	r3, [pc, #76]	; (704c <_sercom_i2c_sync_analyse_flags+0x228>)
    7000:	4798      	blx	r3
    7002:	4603      	mov	r3, r0
    7004:	b2db      	uxtb	r3, r3
    7006:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    7008:	68f8      	ldr	r0, [r7, #12]
    700a:	4b11      	ldr	r3, [pc, #68]	; (7050 <_sercom_i2c_sync_analyse_flags+0x22c>)
    700c:	4798      	blx	r3
    700e:	e005      	b.n	701c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    7010:	68f8      	ldr	r0, [r7, #12]
    7012:	4b0f      	ldr	r3, [pc, #60]	; (7050 <_sercom_i2c_sync_analyse_flags+0x22c>)
    7014:	4798      	blx	r3
			return I2C_NACK;
    7016:	f06f 0301 	mvn.w	r3, #1
    701a:	e000      	b.n	701e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    701c:	2300      	movs	r3, #0
}
    701e:	4618      	mov	r0, r3
    7020:	371c      	adds	r7, #28
    7022:	46bd      	mov	sp, r7
    7024:	bd90      	pop	{r4, r7, pc}
    7026:	bf00      	nop
    7028:	000068c1 	.word	0x000068c1
    702c:	00006cf9 	.word	0x00006cf9
    7030:	000067c1 	.word	0x000067c1
    7034:	00006e09 	.word	0x00006e09
    7038:	00006bd9 	.word	0x00006bd9
    703c:	00006bb5 	.word	0x00006bb5
    7040:	00006c15 	.word	0x00006c15
    7044:	00006a71 	.word	0x00006a71
    7048:	00006a49 	.word	0x00006a49
    704c:	00006c39 	.word	0x00006c39
    7050:	000067db 	.word	0x000067db

00007054 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    7054:	b580      	push	{r7, lr}
    7056:	b082      	sub	sp, #8
    7058:	af00      	add	r7, sp, #0
    705a:	6078      	str	r0, [r7, #4]
    705c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    705e:	687b      	ldr	r3, [r7, #4]
    7060:	2b00      	cmp	r3, #0
    7062:	bf14      	ite	ne
    7064:	2301      	movne	r3, #1
    7066:	2300      	moveq	r3, #0
    7068:	b2db      	uxtb	r3, r3
    706a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    706e:	4908      	ldr	r1, [pc, #32]	; (7090 <_i2c_m_sync_init+0x3c>)
    7070:	4618      	mov	r0, r3
    7072:	4b08      	ldr	r3, [pc, #32]	; (7094 <_i2c_m_sync_init+0x40>)
    7074:	4798      	blx	r3

	i2c_dev->hw = hw;
    7076:	687b      	ldr	r3, [r7, #4]
    7078:	683a      	ldr	r2, [r7, #0]
    707a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    707c:	687b      	ldr	r3, [r7, #4]
    707e:	6839      	ldr	r1, [r7, #0]
    7080:	4618      	mov	r0, r3
    7082:	4b05      	ldr	r3, [pc, #20]	; (7098 <_i2c_m_sync_init+0x44>)
    7084:	4798      	blx	r3
    7086:	4603      	mov	r3, r0
}
    7088:	4618      	mov	r0, r3
    708a:	3708      	adds	r7, #8
    708c:	46bd      	mov	sp, r7
    708e:	bd80      	pop	{r7, pc}
    7090:	00014920 	.word	0x00014920
    7094:	00004211 	.word	0x00004211
    7098:	0000746d 	.word	0x0000746d

0000709c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    709c:	b580      	push	{r7, lr}
    709e:	b082      	sub	sp, #8
    70a0:	af00      	add	r7, sp, #0
    70a2:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    70a4:	687b      	ldr	r3, [r7, #4]
    70a6:	2b00      	cmp	r3, #0
    70a8:	bf14      	ite	ne
    70aa:	2301      	movne	r3, #1
    70ac:	2300      	moveq	r3, #0
    70ae:	b2db      	uxtb	r3, r3
    70b0:	f240 5235 	movw	r2, #1333	; 0x535
    70b4:	4906      	ldr	r1, [pc, #24]	; (70d0 <_i2c_m_sync_enable+0x34>)
    70b6:	4618      	mov	r0, r3
    70b8:	4b06      	ldr	r3, [pc, #24]	; (70d4 <_i2c_m_sync_enable+0x38>)
    70ba:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    70bc:	687b      	ldr	r3, [r7, #4]
    70be:	691b      	ldr	r3, [r3, #16]
    70c0:	4618      	mov	r0, r3
    70c2:	4b05      	ldr	r3, [pc, #20]	; (70d8 <_i2c_m_sync_enable+0x3c>)
    70c4:	4798      	blx	r3
    70c6:	4603      	mov	r3, r0
}
    70c8:	4618      	mov	r0, r3
    70ca:	3708      	adds	r7, #8
    70cc:	46bd      	mov	sp, r7
    70ce:	bd80      	pop	{r7, pc}
    70d0:	00014920 	.word	0x00014920
    70d4:	00004211 	.word	0x00004211
    70d8:	000073e1 	.word	0x000073e1

000070dc <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    70dc:	b580      	push	{r7, lr}
    70de:	b084      	sub	sp, #16
    70e0:	af00      	add	r7, sp, #0
    70e2:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    70e4:	687b      	ldr	r3, [r7, #4]
    70e6:	691b      	ldr	r3, [r3, #16]
    70e8:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    70ea:	687b      	ldr	r3, [r7, #4]
    70ec:	2b00      	cmp	r3, #0
    70ee:	bf14      	ite	ne
    70f0:	2301      	movne	r3, #1
    70f2:	2300      	moveq	r3, #0
    70f4:	b2db      	uxtb	r3, r3
    70f6:	f240 5243 	movw	r2, #1347	; 0x543
    70fa:	490c      	ldr	r1, [pc, #48]	; (712c <_i2c_m_sync_disable+0x50>)
    70fc:	4618      	mov	r0, r3
    70fe:	4b0c      	ldr	r3, [pc, #48]	; (7130 <_i2c_m_sync_disable+0x54>)
    7100:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    7102:	687b      	ldr	r3, [r7, #4]
    7104:	691b      	ldr	r3, [r3, #16]
    7106:	2b00      	cmp	r3, #0
    7108:	bf14      	ite	ne
    710a:	2301      	movne	r3, #1
    710c:	2300      	moveq	r3, #0
    710e:	b2db      	uxtb	r3, r3
    7110:	f240 5244 	movw	r2, #1348	; 0x544
    7114:	4905      	ldr	r1, [pc, #20]	; (712c <_i2c_m_sync_disable+0x50>)
    7116:	4618      	mov	r0, r3
    7118:	4b05      	ldr	r3, [pc, #20]	; (7130 <_i2c_m_sync_disable+0x54>)
    711a:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    711c:	68f8      	ldr	r0, [r7, #12]
    711e:	4b05      	ldr	r3, [pc, #20]	; (7134 <_i2c_m_sync_disable+0x58>)
    7120:	4798      	blx	r3

	return ERR_NONE;
    7122:	2300      	movs	r3, #0
}
    7124:	4618      	mov	r0, r3
    7126:	3710      	adds	r7, #16
    7128:	46bd      	mov	sp, r7
    712a:	bd80      	pop	{r7, pc}
    712c:	00014920 	.word	0x00014920
    7130:	00004211 	.word	0x00004211
    7134:	00006899 	.word	0x00006899

00007138 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    7138:	b580      	push	{r7, lr}
    713a:	b084      	sub	sp, #16
    713c:	af00      	add	r7, sp, #0
    713e:	6078      	str	r0, [r7, #4]
    7140:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    7142:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7146:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    7148:	687b      	ldr	r3, [r7, #4]
    714a:	691b      	ldr	r3, [r3, #16]
    714c:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    714e:	68b8      	ldr	r0, [r7, #8]
    7150:	4b0f      	ldr	r3, [pc, #60]	; (7190 <_sercom_i2c_sync_wait_bus+0x58>)
    7152:	4798      	blx	r3
    7154:	4603      	mov	r3, r0
    7156:	461a      	mov	r2, r3
    7158:	683b      	ldr	r3, [r7, #0]
    715a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    715c:	68fb      	ldr	r3, [r7, #12]
    715e:	1e5a      	subs	r2, r3, #1
    7160:	60fa      	str	r2, [r7, #12]
    7162:	2b00      	cmp	r3, #0
    7164:	d102      	bne.n	716c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    7166:	f06f 0304 	mvn.w	r3, #4
    716a:	e00c      	b.n	7186 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    716c:	683b      	ldr	r3, [r7, #0]
    716e:	681b      	ldr	r3, [r3, #0]
    7170:	f003 0301 	and.w	r3, r3, #1
    7174:	2b00      	cmp	r3, #0
    7176:	d105      	bne.n	7184 <_sercom_i2c_sync_wait_bus+0x4c>
    7178:	683b      	ldr	r3, [r7, #0]
    717a:	681b      	ldr	r3, [r3, #0]
    717c:	f003 0302 	and.w	r3, r3, #2
    7180:	2b00      	cmp	r3, #0
    7182:	d0e4      	beq.n	714e <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    7184:	2300      	movs	r3, #0
}
    7186:	4618      	mov	r0, r3
    7188:	3710      	adds	r7, #16
    718a:	46bd      	mov	sp, r7
    718c:	bd80      	pop	{r7, pc}
    718e:	bf00      	nop
    7190:	000067f5 	.word	0x000067f5

00007194 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    7194:	b590      	push	{r4, r7, lr}
    7196:	b087      	sub	sp, #28
    7198:	af00      	add	r7, sp, #0
    719a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    719c:	687b      	ldr	r3, [r7, #4]
    719e:	691b      	ldr	r3, [r3, #16]
    71a0:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    71a2:	687b      	ldr	r3, [r7, #4]
    71a4:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    71a6:	6978      	ldr	r0, [r7, #20]
    71a8:	4b39      	ldr	r3, [pc, #228]	; (7290 <_sercom_i2c_sync_send_address+0xfc>)
    71aa:	4798      	blx	r3
    71ac:	4603      	mov	r3, r0
    71ae:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    71b0:	687b      	ldr	r3, [r7, #4]
    71b2:	2b00      	cmp	r3, #0
    71b4:	bf14      	ite	ne
    71b6:	2301      	movne	r3, #1
    71b8:	2300      	moveq	r3, #0
    71ba:	b2db      	uxtb	r3, r3
    71bc:	f240 52a5 	movw	r2, #1445	; 0x5a5
    71c0:	4934      	ldr	r1, [pc, #208]	; (7294 <_sercom_i2c_sync_send_address+0x100>)
    71c2:	4618      	mov	r0, r3
    71c4:	4b34      	ldr	r3, [pc, #208]	; (7298 <_sercom_i2c_sync_send_address+0x104>)
    71c6:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    71c8:	693b      	ldr	r3, [r7, #16]
    71ca:	685b      	ldr	r3, [r3, #4]
    71cc:	2b01      	cmp	r3, #1
    71ce:	d106      	bne.n	71de <_sercom_i2c_sync_send_address+0x4a>
    71d0:	68fb      	ldr	r3, [r7, #12]
    71d2:	2b00      	cmp	r3, #0
    71d4:	d003      	beq.n	71de <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    71d6:	6978      	ldr	r0, [r7, #20]
    71d8:	4b30      	ldr	r3, [pc, #192]	; (729c <_sercom_i2c_sync_send_address+0x108>)
    71da:	4798      	blx	r3
    71dc:	e002      	b.n	71e4 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    71de:	6978      	ldr	r0, [r7, #20]
    71e0:	4b2f      	ldr	r3, [pc, #188]	; (72a0 <_sercom_i2c_sync_send_address+0x10c>)
    71e2:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    71e4:	693b      	ldr	r3, [r7, #16]
    71e6:	881b      	ldrh	r3, [r3, #0]
    71e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    71ec:	2b00      	cmp	r3, #0
    71ee:	d022      	beq.n	7236 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    71f0:	693b      	ldr	r3, [r7, #16]
    71f2:	885b      	ldrh	r3, [r3, #2]
    71f4:	b29b      	uxth	r3, r3
    71f6:	f003 0301 	and.w	r3, r3, #1
    71fa:	2b00      	cmp	r3, #0
    71fc:	d007      	beq.n	720e <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    71fe:	693b      	ldr	r3, [r7, #16]
    7200:	885b      	ldrh	r3, [r3, #2]
    7202:	b29b      	uxth	r3, r3
    7204:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    7208:	b29a      	uxth	r2, r3
    720a:	693b      	ldr	r3, [r7, #16]
    720c:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    720e:	693b      	ldr	r3, [r7, #16]
    7210:	881b      	ldrh	r3, [r3, #0]
    7212:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7214:	f240 74fe 	movw	r4, #2046	; 0x7fe
    7218:	401c      	ands	r4, r3
    721a:	6978      	ldr	r0, [r7, #20]
    721c:	4b21      	ldr	r3, [pc, #132]	; (72a4 <_sercom_i2c_sync_send_address+0x110>)
    721e:	4798      	blx	r3
    7220:	4603      	mov	r3, r0
    7222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7226:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    7228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    722c:	4619      	mov	r1, r3
    722e:	6978      	ldr	r0, [r7, #20]
    7230:	4b1d      	ldr	r3, [pc, #116]	; (72a8 <_sercom_i2c_sync_send_address+0x114>)
    7232:	4798      	blx	r3
    7234:	e01a      	b.n	726c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7236:	693b      	ldr	r3, [r7, #16]
    7238:	881b      	ldrh	r3, [r3, #0]
    723a:	005b      	lsls	r3, r3, #1
    723c:	b2db      	uxtb	r3, r3
    723e:	693a      	ldr	r2, [r7, #16]
    7240:	8852      	ldrh	r2, [r2, #2]
    7242:	b292      	uxth	r2, r2
    7244:	f002 0201 	and.w	r2, r2, #1
    7248:	2a00      	cmp	r2, #0
    724a:	bf14      	ite	ne
    724c:	2201      	movne	r2, #1
    724e:	2200      	moveq	r2, #0
    7250:	b2d2      	uxtb	r2, r2
    7252:	4313      	orrs	r3, r2
    7254:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7256:	6978      	ldr	r0, [r7, #20]
    7258:	4b12      	ldr	r3, [pc, #72]	; (72a4 <_sercom_i2c_sync_send_address+0x110>)
    725a:	4798      	blx	r3
    725c:	4603      	mov	r3, r0
    725e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7262:	4323      	orrs	r3, r4
    7264:	4619      	mov	r1, r3
    7266:	6978      	ldr	r0, [r7, #20]
    7268:	4b0f      	ldr	r3, [pc, #60]	; (72a8 <_sercom_i2c_sync_send_address+0x114>)
    726a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    726c:	f107 0308 	add.w	r3, r7, #8
    7270:	4619      	mov	r1, r3
    7272:	6878      	ldr	r0, [r7, #4]
    7274:	4b0d      	ldr	r3, [pc, #52]	; (72ac <_sercom_i2c_sync_send_address+0x118>)
    7276:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    7278:	68bb      	ldr	r3, [r7, #8]
    727a:	693a      	ldr	r2, [r7, #16]
    727c:	4619      	mov	r1, r3
    727e:	6978      	ldr	r0, [r7, #20]
    7280:	4b0b      	ldr	r3, [pc, #44]	; (72b0 <_sercom_i2c_sync_send_address+0x11c>)
    7282:	4798      	blx	r3
    7284:	4603      	mov	r3, r0
}
    7286:	4618      	mov	r0, r3
    7288:	371c      	adds	r7, #28
    728a:	46bd      	mov	sp, r7
    728c:	bd90      	pop	{r4, r7, pc}
    728e:	bf00      	nop
    7290:	000068c1 	.word	0x000068c1
    7294:	00014920 	.word	0x00014920
    7298:	00004211 	.word	0x00004211
    729c:	00006a71 	.word	0x00006a71
    72a0:	00006a99 	.word	0x00006a99
    72a4:	00006bd9 	.word	0x00006bd9
    72a8:	00006bb5 	.word	0x00006bb5
    72ac:	00007139 	.word	0x00007139
    72b0:	00006e25 	.word	0x00006e25

000072b4 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    72b4:	b580      	push	{r7, lr}
    72b6:	b086      	sub	sp, #24
    72b8:	af00      	add	r7, sp, #0
    72ba:	6078      	str	r0, [r7, #4]
    72bc:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    72be:	687b      	ldr	r3, [r7, #4]
    72c0:	691b      	ldr	r3, [r3, #16]
    72c2:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    72c4:	687b      	ldr	r3, [r7, #4]
    72c6:	2b00      	cmp	r3, #0
    72c8:	bf14      	ite	ne
    72ca:	2301      	movne	r3, #1
    72cc:	2300      	moveq	r3, #0
    72ce:	b2db      	uxtb	r3, r3
    72d0:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    72d4:	493b      	ldr	r1, [pc, #236]	; (73c4 <_i2c_m_sync_transfer+0x110>)
    72d6:	4618      	mov	r0, r3
    72d8:	4b3b      	ldr	r3, [pc, #236]	; (73c8 <_i2c_m_sync_transfer+0x114>)
    72da:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    72dc:	687b      	ldr	r3, [r7, #4]
    72de:	691b      	ldr	r3, [r3, #16]
    72e0:	2b00      	cmp	r3, #0
    72e2:	bf14      	ite	ne
    72e4:	2301      	movne	r3, #1
    72e6:	2300      	moveq	r3, #0
    72e8:	b2db      	uxtb	r3, r3
    72ea:	f240 52d1 	movw	r2, #1489	; 0x5d1
    72ee:	4935      	ldr	r1, [pc, #212]	; (73c4 <_i2c_m_sync_transfer+0x110>)
    72f0:	4618      	mov	r0, r3
    72f2:	4b35      	ldr	r3, [pc, #212]	; (73c8 <_i2c_m_sync_transfer+0x114>)
    72f4:	4798      	blx	r3
	ASSERT(msg);
    72f6:	683b      	ldr	r3, [r7, #0]
    72f8:	2b00      	cmp	r3, #0
    72fa:	bf14      	ite	ne
    72fc:	2301      	movne	r3, #1
    72fe:	2300      	moveq	r3, #0
    7300:	b2db      	uxtb	r3, r3
    7302:	f240 52d2 	movw	r2, #1490	; 0x5d2
    7306:	492f      	ldr	r1, [pc, #188]	; (73c4 <_i2c_m_sync_transfer+0x110>)
    7308:	4618      	mov	r0, r3
    730a:	4b2f      	ldr	r3, [pc, #188]	; (73c8 <_i2c_m_sync_transfer+0x114>)
    730c:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    730e:	687b      	ldr	r3, [r7, #4]
    7310:	885b      	ldrh	r3, [r3, #2]
    7312:	b29b      	uxth	r3, r3
    7314:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7318:	2b00      	cmp	r3, #0
    731a:	d002      	beq.n	7322 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    731c:	f06f 0305 	mvn.w	r3, #5
    7320:	e04c      	b.n	73bc <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    7322:	683b      	ldr	r3, [r7, #0]
    7324:	885b      	ldrh	r3, [r3, #2]
    7326:	b29b      	uxth	r3, r3
    7328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    732c:	b29a      	uxth	r2, r3
    732e:	683b      	ldr	r3, [r7, #0]
    7330:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    7332:	687b      	ldr	r3, [r7, #4]
    7334:	683a      	ldr	r2, [r7, #0]
    7336:	ca07      	ldmia	r2, {r0, r1, r2}
    7338:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    733c:	6938      	ldr	r0, [r7, #16]
    733e:	4b23      	ldr	r3, [pc, #140]	; (73cc <_i2c_m_sync_transfer+0x118>)
    7340:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    7342:	6878      	ldr	r0, [r7, #4]
    7344:	4b22      	ldr	r3, [pc, #136]	; (73d0 <_i2c_m_sync_transfer+0x11c>)
    7346:	4798      	blx	r3
    7348:	6178      	str	r0, [r7, #20]

	if (ret) {
    734a:	697b      	ldr	r3, [r7, #20]
    734c:	2b00      	cmp	r3, #0
    734e:	d02d      	beq.n	73ac <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7350:	687b      	ldr	r3, [r7, #4]
    7352:	885b      	ldrh	r3, [r3, #2]
    7354:	b29b      	uxth	r3, r3
    7356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    735a:	b29a      	uxth	r2, r3
    735c:	687b      	ldr	r3, [r7, #4]
    735e:	805a      	strh	r2, [r3, #2]

		return ret;
    7360:	697b      	ldr	r3, [r7, #20]
    7362:	e02b      	b.n	73bc <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    7364:	f107 030c 	add.w	r3, r7, #12
    7368:	4619      	mov	r1, r3
    736a:	6878      	ldr	r0, [r7, #4]
    736c:	4b19      	ldr	r3, [pc, #100]	; (73d4 <_i2c_m_sync_transfer+0x120>)
    736e:	4798      	blx	r3
    7370:	6178      	str	r0, [r7, #20]

		if (ret) {
    7372:	697b      	ldr	r3, [r7, #20]
    7374:	2b00      	cmp	r3, #0
    7376:	d012      	beq.n	739e <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    7378:	683b      	ldr	r3, [r7, #0]
    737a:	885b      	ldrh	r3, [r3, #2]
    737c:	b29b      	uxth	r3, r3
    737e:	b21b      	sxth	r3, r3
    7380:	2b00      	cmp	r3, #0
    7382:	da02      	bge.n	738a <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    7384:	6938      	ldr	r0, [r7, #16]
    7386:	4b14      	ldr	r3, [pc, #80]	; (73d8 <_i2c_m_sync_transfer+0x124>)
    7388:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    738a:	687b      	ldr	r3, [r7, #4]
    738c:	885b      	ldrh	r3, [r3, #2]
    738e:	b29b      	uxth	r3, r3
    7390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7394:	b29a      	uxth	r2, r3
    7396:	687b      	ldr	r3, [r7, #4]
    7398:	805a      	strh	r2, [r3, #2]

			return ret;
    739a:	697b      	ldr	r3, [r7, #20]
    739c:	e00e      	b.n	73bc <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    739e:	68fb      	ldr	r3, [r7, #12]
    73a0:	687a      	ldr	r2, [r7, #4]
    73a2:	4619      	mov	r1, r3
    73a4:	6938      	ldr	r0, [r7, #16]
    73a6:	4b0d      	ldr	r3, [pc, #52]	; (73dc <_i2c_m_sync_transfer+0x128>)
    73a8:	4798      	blx	r3
    73aa:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    73ac:	687b      	ldr	r3, [r7, #4]
    73ae:	885b      	ldrh	r3, [r3, #2]
    73b0:	b29b      	uxth	r3, r3
    73b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    73b6:	2b00      	cmp	r3, #0
    73b8:	d1d4      	bne.n	7364 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    73ba:	697b      	ldr	r3, [r7, #20]
}
    73bc:	4618      	mov	r0, r3
    73be:	3718      	adds	r7, #24
    73c0:	46bd      	mov	sp, r7
    73c2:	bd80      	pop	{r7, pc}
    73c4:	00014920 	.word	0x00014920
    73c8:	00004211 	.word	0x00004211
    73cc:	00006a21 	.word	0x00006a21
    73d0:	00007195 	.word	0x00007195
    73d4:	00007139 	.word	0x00007139
    73d8:	00006e09 	.word	0x00006e09
    73dc:	00006e25 	.word	0x00006e25

000073e0 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    73e0:	b580      	push	{r7, lr}
    73e2:	b084      	sub	sp, #16
    73e4:	af00      	add	r7, sp, #0
    73e6:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    73e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    73ec:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    73ee:	2304      	movs	r3, #4
    73f0:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    73f2:	687b      	ldr	r3, [r7, #4]
    73f4:	2b00      	cmp	r3, #0
    73f6:	bf14      	ite	ne
    73f8:	2301      	movne	r3, #1
    73fa:	2300      	moveq	r3, #0
    73fc:	b2db      	uxtb	r3, r3
    73fe:	f240 6205 	movw	r2, #1541	; 0x605
    7402:	4915      	ldr	r1, [pc, #84]	; (7458 <_i2c_m_enable_implementation+0x78>)
    7404:	4618      	mov	r0, r3
    7406:	4b15      	ldr	r3, [pc, #84]	; (745c <_i2c_m_enable_implementation+0x7c>)
    7408:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    740a:	6878      	ldr	r0, [r7, #4]
    740c:	4b14      	ldr	r3, [pc, #80]	; (7460 <_i2c_m_enable_implementation+0x80>)
    740e:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7410:	e016      	b.n	7440 <_i2c_m_enable_implementation+0x60>
		timeout--;
    7412:	68fb      	ldr	r3, [r7, #12]
    7414:	3b01      	subs	r3, #1
    7416:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    7418:	68fb      	ldr	r3, [r7, #12]
    741a:	2b00      	cmp	r3, #0
    741c:	dc10      	bgt.n	7440 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    741e:	68bb      	ldr	r3, [r7, #8]
    7420:	3b01      	subs	r3, #1
    7422:	60bb      	str	r3, [r7, #8]
    7424:	68bb      	ldr	r3, [r7, #8]
    7426:	2b00      	cmp	r3, #0
    7428:	d007      	beq.n	743a <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    742a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    742e:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    7430:	2110      	movs	r1, #16
    7432:	6878      	ldr	r0, [r7, #4]
    7434:	4b0b      	ldr	r3, [pc, #44]	; (7464 <_i2c_m_enable_implementation+0x84>)
    7436:	4798      	blx	r3
    7438:	e002      	b.n	7440 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    743a:	f06f 0305 	mvn.w	r3, #5
    743e:	e006      	b.n	744e <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7440:	6878      	ldr	r0, [r7, #4]
    7442:	4b09      	ldr	r3, [pc, #36]	; (7468 <_i2c_m_enable_implementation+0x88>)
    7444:	4798      	blx	r3
    7446:	4603      	mov	r3, r0
    7448:	2b01      	cmp	r3, #1
    744a:	d1e2      	bne.n	7412 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    744c:	2300      	movs	r3, #0
}
    744e:	4618      	mov	r0, r3
    7450:	3710      	adds	r7, #16
    7452:	46bd      	mov	sp, r7
    7454:	bd80      	pop	{r7, pc}
    7456:	bf00      	nop
    7458:	00014920 	.word	0x00014920
    745c:	00004211 	.word	0x00004211
    7460:	00006871 	.word	0x00006871
    7464:	00006d1d 	.word	0x00006d1d
    7468:	00006ccd 	.word	0x00006ccd

0000746c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    746c:	b580      	push	{r7, lr}
    746e:	b084      	sub	sp, #16
    7470:	af00      	add	r7, sp, #0
    7472:	6078      	str	r0, [r7, #4]
    7474:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    7476:	6838      	ldr	r0, [r7, #0]
    7478:	4b42      	ldr	r3, [pc, #264]	; (7584 <_i2c_m_sync_init_impl+0x118>)
    747a:	4798      	blx	r3
    747c:	4603      	mov	r3, r0
    747e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7480:	2101      	movs	r1, #1
    7482:	6838      	ldr	r0, [r7, #0]
    7484:	4b40      	ldr	r3, [pc, #256]	; (7588 <_i2c_m_sync_init_impl+0x11c>)
    7486:	4798      	blx	r3
    7488:	4603      	mov	r3, r0
    748a:	f083 0301 	eor.w	r3, r3, #1
    748e:	b2db      	uxtb	r3, r3
    7490:	2b00      	cmp	r3, #0
    7492:	d020      	beq.n	74d6 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7494:	7bfa      	ldrb	r2, [r7, #15]
    7496:	493d      	ldr	r1, [pc, #244]	; (758c <_i2c_m_sync_init_impl+0x120>)
    7498:	4613      	mov	r3, r2
    749a:	005b      	lsls	r3, r3, #1
    749c:	4413      	add	r3, r2
    749e:	00db      	lsls	r3, r3, #3
    74a0:	440b      	add	r3, r1
    74a2:	3304      	adds	r3, #4
    74a4:	681b      	ldr	r3, [r3, #0]
    74a6:	f003 031c 	and.w	r3, r3, #28
    74aa:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    74ac:	2102      	movs	r1, #2
    74ae:	6838      	ldr	r0, [r7, #0]
    74b0:	4b37      	ldr	r3, [pc, #220]	; (7590 <_i2c_m_sync_init_impl+0x124>)
    74b2:	4798      	blx	r3
    74b4:	4603      	mov	r3, r0
    74b6:	2b00      	cmp	r3, #0
    74b8:	d006      	beq.n	74c8 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    74ba:	6838      	ldr	r0, [r7, #0]
    74bc:	4b35      	ldr	r3, [pc, #212]	; (7594 <_i2c_m_sync_init_impl+0x128>)
    74be:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    74c0:	2102      	movs	r1, #2
    74c2:	6838      	ldr	r0, [r7, #0]
    74c4:	4b34      	ldr	r3, [pc, #208]	; (7598 <_i2c_m_sync_init_impl+0x12c>)
    74c6:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    74c8:	68bb      	ldr	r3, [r7, #8]
    74ca:	f043 0301 	orr.w	r3, r3, #1
    74ce:	4619      	mov	r1, r3
    74d0:	6838      	ldr	r0, [r7, #0]
    74d2:	4b32      	ldr	r3, [pc, #200]	; (759c <_i2c_m_sync_init_impl+0x130>)
    74d4:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    74d6:	2101      	movs	r1, #1
    74d8:	6838      	ldr	r0, [r7, #0]
    74da:	4b2f      	ldr	r3, [pc, #188]	; (7598 <_i2c_m_sync_init_impl+0x12c>)
    74dc:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    74de:	7bfa      	ldrb	r2, [r7, #15]
    74e0:	492a      	ldr	r1, [pc, #168]	; (758c <_i2c_m_sync_init_impl+0x120>)
    74e2:	4613      	mov	r3, r2
    74e4:	005b      	lsls	r3, r3, #1
    74e6:	4413      	add	r3, r2
    74e8:	00db      	lsls	r3, r3, #3
    74ea:	440b      	add	r3, r1
    74ec:	3304      	adds	r3, #4
    74ee:	681b      	ldr	r3, [r3, #0]
    74f0:	4619      	mov	r1, r3
    74f2:	6838      	ldr	r0, [r7, #0]
    74f4:	4b29      	ldr	r3, [pc, #164]	; (759c <_i2c_m_sync_init_impl+0x130>)
    74f6:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    74f8:	7bfa      	ldrb	r2, [r7, #15]
    74fa:	4924      	ldr	r1, [pc, #144]	; (758c <_i2c_m_sync_init_impl+0x120>)
    74fc:	4613      	mov	r3, r2
    74fe:	005b      	lsls	r3, r3, #1
    7500:	4413      	add	r3, r2
    7502:	00db      	lsls	r3, r3, #3
    7504:	440b      	add	r3, r1
    7506:	3308      	adds	r3, #8
    7508:	681b      	ldr	r3, [r3, #0]
    750a:	4619      	mov	r1, r3
    750c:	6838      	ldr	r0, [r7, #0]
    750e:	4b24      	ldr	r3, [pc, #144]	; (75a0 <_i2c_m_sync_init_impl+0x134>)
    7510:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    7512:	7bfa      	ldrb	r2, [r7, #15]
    7514:	491d      	ldr	r1, [pc, #116]	; (758c <_i2c_m_sync_init_impl+0x120>)
    7516:	4613      	mov	r3, r2
    7518:	005b      	lsls	r3, r3, #1
    751a:	4413      	add	r3, r2
    751c:	00db      	lsls	r3, r3, #3
    751e:	440b      	add	r3, r1
    7520:	330c      	adds	r3, #12
    7522:	681b      	ldr	r3, [r3, #0]
    7524:	4619      	mov	r1, r3
    7526:	6838      	ldr	r0, [r7, #0]
    7528:	4b1e      	ldr	r3, [pc, #120]	; (75a4 <_i2c_m_sync_init_impl+0x138>)
    752a:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    752c:	7bfa      	ldrb	r2, [r7, #15]
    752e:	4917      	ldr	r1, [pc, #92]	; (758c <_i2c_m_sync_init_impl+0x120>)
    7530:	4613      	mov	r3, r2
    7532:	005b      	lsls	r3, r3, #1
    7534:	4413      	add	r3, r2
    7536:	00db      	lsls	r3, r3, #3
    7538:	440b      	add	r3, r1
    753a:	3304      	adds	r3, #4
    753c:	681b      	ldr	r3, [r3, #0]
    753e:	0e1b      	lsrs	r3, r3, #24
    7540:	b29b      	uxth	r3, r3
    7542:	f003 0303 	and.w	r3, r3, #3
    7546:	b29a      	uxth	r2, r3
    7548:	687b      	ldr	r3, [r7, #4]
    754a:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    754c:	687b      	ldr	r3, [r7, #4]
    754e:	899b      	ldrh	r3, [r3, #12]
    7550:	2b01      	cmp	r3, #1
    7552:	bf8c      	ite	hi
    7554:	2301      	movhi	r3, #1
    7556:	2300      	movls	r3, #0
    7558:	b2db      	uxtb	r3, r3
    755a:	4619      	mov	r1, r3
    755c:	6838      	ldr	r0, [r7, #0]
    755e:	4b12      	ldr	r3, [pc, #72]	; (75a8 <_i2c_m_sync_init_impl+0x13c>)
    7560:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    7562:	7bfa      	ldrb	r2, [r7, #15]
    7564:	4909      	ldr	r1, [pc, #36]	; (758c <_i2c_m_sync_init_impl+0x120>)
    7566:	4613      	mov	r3, r2
    7568:	005b      	lsls	r3, r3, #1
    756a:	4413      	add	r3, r2
    756c:	00db      	lsls	r3, r3, #3
    756e:	440b      	add	r3, r1
    7570:	3312      	adds	r3, #18
    7572:	881a      	ldrh	r2, [r3, #0]
    7574:	687b      	ldr	r3, [r7, #4]
    7576:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7578:	2300      	movs	r3, #0
}
    757a:	4618      	mov	r0, r3
    757c:	3710      	adds	r7, #16
    757e:	46bd      	mov	sp, r7
    7580:	bd80      	pop	{r7, pc}
    7582:	bf00      	nop
    7584:	00006da1 	.word	0x00006da1
    7588:	0000674d 	.word	0x0000674d
    758c:	20000018 	.word	0x20000018
    7590:	000068f1 	.word	0x000068f1
    7594:	00006899 	.word	0x00006899
    7598:	00006729 	.word	0x00006729
    759c:	00006921 	.word	0x00006921
    75a0:	00006af1 	.word	0x00006af1
    75a4:	00006b39 	.word	0x00006b39
    75a8:	00006b75 	.word	0x00006b75

000075ac <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    75ac:	b580      	push	{r7, lr}
    75ae:	b082      	sub	sp, #8
    75b0:	af00      	add	r7, sp, #0
    75b2:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    75b4:	2101      	movs	r1, #1
    75b6:	6878      	ldr	r0, [r7, #4]
    75b8:	4b07      	ldr	r3, [pc, #28]	; (75d8 <_spi_sync_enable+0x2c>)
    75ba:	4798      	blx	r3
    75bc:	4603      	mov	r3, r0
    75be:	2b00      	cmp	r3, #0
    75c0:	d002      	beq.n	75c8 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    75c2:	f06f 0303 	mvn.w	r3, #3
    75c6:	e003      	b.n	75d0 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    75c8:	6878      	ldr	r0, [r7, #4]
    75ca:	4b04      	ldr	r3, [pc, #16]	; (75dc <_spi_sync_enable+0x30>)
    75cc:	4798      	blx	r3

	return ERR_NONE;
    75ce:	2300      	movs	r3, #0
}
    75d0:	4618      	mov	r0, r3
    75d2:	3708      	adds	r7, #8
    75d4:	46bd      	mov	sp, r7
    75d6:	bd80      	pop	{r7, pc}
    75d8:	00006799 	.word	0x00006799
    75dc:	00006945 	.word	0x00006945

000075e0 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    75e0:	b580      	push	{r7, lr}
    75e2:	b082      	sub	sp, #8
    75e4:	af00      	add	r7, sp, #0
    75e6:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    75e8:	2101      	movs	r1, #1
    75ea:	6878      	ldr	r0, [r7, #4]
    75ec:	4b07      	ldr	r3, [pc, #28]	; (760c <_spi_sync_disable+0x2c>)
    75ee:	4798      	blx	r3
    75f0:	4603      	mov	r3, r0
    75f2:	2b00      	cmp	r3, #0
    75f4:	d002      	beq.n	75fc <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    75f6:	f06f 0303 	mvn.w	r3, #3
    75fa:	e003      	b.n	7604 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    75fc:	6878      	ldr	r0, [r7, #4]
    75fe:	4b04      	ldr	r3, [pc, #16]	; (7610 <_spi_sync_disable+0x30>)
    7600:	4798      	blx	r3

	return ERR_NONE;
    7602:	2300      	movs	r3, #0
}
    7604:	4618      	mov	r0, r3
    7606:	3708      	adds	r7, #8
    7608:	46bd      	mov	sp, r7
    760a:	bd80      	pop	{r7, pc}
    760c:	00006799 	.word	0x00006799
    7610:	000069a5 	.word	0x000069a5

00007614 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7614:	b580      	push	{r7, lr}
    7616:	b082      	sub	sp, #8
    7618:	af00      	add	r7, sp, #0
    761a:	6078      	str	r0, [r7, #4]
    761c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    761e:	687b      	ldr	r3, [r7, #4]
    7620:	2b00      	cmp	r3, #0
    7622:	d004      	beq.n	762e <_spi_load_regs_master+0x1a>
    7624:	683b      	ldr	r3, [r7, #0]
    7626:	2b00      	cmp	r3, #0
    7628:	d001      	beq.n	762e <_spi_load_regs_master+0x1a>
    762a:	2301      	movs	r3, #1
    762c:	e000      	b.n	7630 <_spi_load_regs_master+0x1c>
    762e:	2300      	movs	r3, #0
    7630:	f003 0301 	and.w	r3, r3, #1
    7634:	b2db      	uxtb	r3, r3
    7636:	f640 1209 	movw	r2, #2313	; 0x909
    763a:	4915      	ldr	r1, [pc, #84]	; (7690 <_spi_load_regs_master+0x7c>)
    763c:	4618      	mov	r0, r3
    763e:	4b15      	ldr	r3, [pc, #84]	; (7694 <_spi_load_regs_master+0x80>)
    7640:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7642:	683b      	ldr	r3, [r7, #0]
    7644:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7646:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    764a:	f023 0301 	bic.w	r3, r3, #1
    764e:	4619      	mov	r1, r3
    7650:	6878      	ldr	r0, [r7, #4]
    7652:	4b11      	ldr	r3, [pc, #68]	; (7698 <_spi_load_regs_master+0x84>)
    7654:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    7656:	683b      	ldr	r3, [r7, #0]
    7658:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    765a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    765e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7666:	4619      	mov	r1, r3
    7668:	6878      	ldr	r0, [r7, #4]
    766a:	4b0c      	ldr	r3, [pc, #48]	; (769c <_spi_load_regs_master+0x88>)
    766c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    766e:	683b      	ldr	r3, [r7, #0]
    7670:	7b1b      	ldrb	r3, [r3, #12]
    7672:	4619      	mov	r1, r3
    7674:	6878      	ldr	r0, [r7, #4]
    7676:	4b0a      	ldr	r3, [pc, #40]	; (76a0 <_spi_load_regs_master+0x8c>)
    7678:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    767a:	683b      	ldr	r3, [r7, #0]
    767c:	7b5b      	ldrb	r3, [r3, #13]
    767e:	4619      	mov	r1, r3
    7680:	6878      	ldr	r0, [r7, #4]
    7682:	4b08      	ldr	r3, [pc, #32]	; (76a4 <_spi_load_regs_master+0x90>)
    7684:	4798      	blx	r3
}
    7686:	bf00      	nop
    7688:	3708      	adds	r7, #8
    768a:	46bd      	mov	sp, r7
    768c:	bd80      	pop	{r7, pc}
    768e:	bf00      	nop
    7690:	00014920 	.word	0x00014920
    7694:	00004211 	.word	0x00004211
    7698:	000069fd 	.word	0x000069fd
    769c:	00006b15 	.word	0x00006b15
    76a0:	00006b55 	.word	0x00006b55
    76a4:	00006c8d 	.word	0x00006c8d

000076a8 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    76a8:	b580      	push	{r7, lr}
    76aa:	b082      	sub	sp, #8
    76ac:	af00      	add	r7, sp, #0
    76ae:	6078      	str	r0, [r7, #4]
    76b0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    76b2:	687b      	ldr	r3, [r7, #4]
    76b4:	2b00      	cmp	r3, #0
    76b6:	d004      	beq.n	76c2 <_spi_load_regs_slave+0x1a>
    76b8:	683b      	ldr	r3, [r7, #0]
    76ba:	2b00      	cmp	r3, #0
    76bc:	d001      	beq.n	76c2 <_spi_load_regs_slave+0x1a>
    76be:	2301      	movs	r3, #1
    76c0:	e000      	b.n	76c4 <_spi_load_regs_slave+0x1c>
    76c2:	2300      	movs	r3, #0
    76c4:	f003 0301 	and.w	r3, r3, #1
    76c8:	b2db      	uxtb	r3, r3
    76ca:	f640 121d 	movw	r2, #2333	; 0x91d
    76ce:	491a      	ldr	r1, [pc, #104]	; (7738 <_spi_load_regs_slave+0x90>)
    76d0:	4618      	mov	r0, r3
    76d2:	4b1a      	ldr	r3, [pc, #104]	; (773c <_spi_load_regs_slave+0x94>)
    76d4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    76d6:	683b      	ldr	r3, [r7, #0]
    76d8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    76da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    76de:	f023 0301 	bic.w	r3, r3, #1
    76e2:	4619      	mov	r1, r3
    76e4:	6878      	ldr	r0, [r7, #4]
    76e6:	4b16      	ldr	r3, [pc, #88]	; (7740 <_spi_load_regs_slave+0x98>)
    76e8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    76ea:	683b      	ldr	r3, [r7, #0]
    76ec:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    76ee:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    76f2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    76f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    76fa:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    76fe:	4619      	mov	r1, r3
    7700:	6878      	ldr	r0, [r7, #4]
    7702:	4b10      	ldr	r3, [pc, #64]	; (7744 <_spi_load_regs_slave+0x9c>)
    7704:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7706:	683b      	ldr	r3, [r7, #0]
    7708:	689b      	ldr	r3, [r3, #8]
    770a:	4619      	mov	r1, r3
    770c:	6878      	ldr	r0, [r7, #4]
    770e:	4b0e      	ldr	r3, [pc, #56]	; (7748 <_spi_load_regs_slave+0xa0>)
    7710:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7712:	683b      	ldr	r3, [r7, #0]
    7714:	7b5b      	ldrb	r3, [r3, #13]
    7716:	4619      	mov	r1, r3
    7718:	6878      	ldr	r0, [r7, #4]
    771a:	4b0c      	ldr	r3, [pc, #48]	; (774c <_spi_load_regs_slave+0xa4>)
    771c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    771e:	bf00      	nop
    7720:	f04f 31ff 	mov.w	r1, #4294967295
    7724:	6878      	ldr	r0, [r7, #4]
    7726:	4b0a      	ldr	r3, [pc, #40]	; (7750 <_spi_load_regs_slave+0xa8>)
    7728:	4798      	blx	r3
    772a:	4603      	mov	r3, r0
    772c:	2b00      	cmp	r3, #0
    772e:	d1f7      	bne.n	7720 <_spi_load_regs_slave+0x78>
		;
}
    7730:	bf00      	nop
    7732:	3708      	adds	r7, #8
    7734:	46bd      	mov	sp, r7
    7736:	bd80      	pop	{r7, pc}
    7738:	00014920 	.word	0x00014920
    773c:	00004211 	.word	0x00004211
    7740:	000069fd 	.word	0x000069fd
    7744:	00006b15 	.word	0x00006b15
    7748:	00006bf9 	.word	0x00006bf9
    774c:	00006c8d 	.word	0x00006c8d
    7750:	00006799 	.word	0x00006799

00007754 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    7754:	b580      	push	{r7, lr}
    7756:	b084      	sub	sp, #16
    7758:	af00      	add	r7, sp, #0
    775a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    775c:	687b      	ldr	r3, [r7, #4]
    775e:	4618      	mov	r0, r3
    7760:	4b11      	ldr	r3, [pc, #68]	; (77a8 <_spi_get_regs+0x54>)
    7762:	4798      	blx	r3
    7764:	4603      	mov	r3, r0
    7766:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7768:	2300      	movs	r3, #0
    776a:	73fb      	strb	r3, [r7, #15]
    776c:	e014      	b.n	7798 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    776e:	7bfa      	ldrb	r2, [r7, #15]
    7770:	490e      	ldr	r1, [pc, #56]	; (77ac <_spi_get_regs+0x58>)
    7772:	4613      	mov	r3, r2
    7774:	011b      	lsls	r3, r3, #4
    7776:	4413      	add	r3, r2
    7778:	440b      	add	r3, r1
    777a:	3310      	adds	r3, #16
    777c:	781b      	ldrb	r3, [r3, #0]
    777e:	7bba      	ldrb	r2, [r7, #14]
    7780:	429a      	cmp	r2, r3
    7782:	d106      	bne.n	7792 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7784:	7bfa      	ldrb	r2, [r7, #15]
    7786:	4613      	mov	r3, r2
    7788:	011b      	lsls	r3, r3, #4
    778a:	4413      	add	r3, r2
    778c:	4a07      	ldr	r2, [pc, #28]	; (77ac <_spi_get_regs+0x58>)
    778e:	4413      	add	r3, r2
    7790:	e006      	b.n	77a0 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7792:	7bfb      	ldrb	r3, [r7, #15]
    7794:	3301      	adds	r3, #1
    7796:	73fb      	strb	r3, [r7, #15]
    7798:	7bfb      	ldrb	r3, [r7, #15]
    779a:	2b01      	cmp	r3, #1
    779c:	d9e7      	bls.n	776e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    779e:	2300      	movs	r3, #0
}
    77a0:	4618      	mov	r0, r3
    77a2:	3710      	adds	r7, #16
    77a4:	46bd      	mov	sp, r7
    77a6:	bd80      	pop	{r7, pc}
    77a8:	00006d45 	.word	0x00006d45
    77ac:	0001495c 	.word	0x0001495c

000077b0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    77b0:	b580      	push	{r7, lr}
    77b2:	b084      	sub	sp, #16
    77b4:	af00      	add	r7, sp, #0
    77b6:	6078      	str	r0, [r7, #4]
    77b8:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    77ba:	683b      	ldr	r3, [r7, #0]
    77bc:	4618      	mov	r0, r3
    77be:	4b35      	ldr	r3, [pc, #212]	; (7894 <_spi_m_sync_init+0xe4>)
    77c0:	4798      	blx	r3
    77c2:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    77c4:	687b      	ldr	r3, [r7, #4]
    77c6:	2b00      	cmp	r3, #0
    77c8:	d004      	beq.n	77d4 <_spi_m_sync_init+0x24>
    77ca:	683b      	ldr	r3, [r7, #0]
    77cc:	2b00      	cmp	r3, #0
    77ce:	d001      	beq.n	77d4 <_spi_m_sync_init+0x24>
    77d0:	2301      	movs	r3, #1
    77d2:	e000      	b.n	77d6 <_spi_m_sync_init+0x26>
    77d4:	2300      	movs	r3, #0
    77d6:	f003 0301 	and.w	r3, r3, #1
    77da:	b2db      	uxtb	r3, r3
    77dc:	f640 123f 	movw	r2, #2367	; 0x93f
    77e0:	492d      	ldr	r1, [pc, #180]	; (7898 <_spi_m_sync_init+0xe8>)
    77e2:	4618      	mov	r0, r3
    77e4:	4b2d      	ldr	r3, [pc, #180]	; (789c <_spi_m_sync_init+0xec>)
    77e6:	4798      	blx	r3

	if (regs == NULL) {
    77e8:	68fb      	ldr	r3, [r7, #12]
    77ea:	2b00      	cmp	r3, #0
    77ec:	d102      	bne.n	77f4 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    77ee:	f06f 030c 	mvn.w	r3, #12
    77f2:	e04a      	b.n	788a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    77f4:	2101      	movs	r1, #1
    77f6:	6838      	ldr	r0, [r7, #0]
    77f8:	4b29      	ldr	r3, [pc, #164]	; (78a0 <_spi_m_sync_init+0xf0>)
    77fa:	4798      	blx	r3
    77fc:	4603      	mov	r3, r0
    77fe:	f083 0301 	eor.w	r3, r3, #1
    7802:	b2db      	uxtb	r3, r3
    7804:	2b00      	cmp	r3, #0
    7806:	d019      	beq.n	783c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7808:	68fb      	ldr	r3, [r7, #12]
    780a:	681b      	ldr	r3, [r3, #0]
    780c:	f003 031c 	and.w	r3, r3, #28
    7810:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7812:	2102      	movs	r1, #2
    7814:	6838      	ldr	r0, [r7, #0]
    7816:	4b23      	ldr	r3, [pc, #140]	; (78a4 <_spi_m_sync_init+0xf4>)
    7818:	4798      	blx	r3
    781a:	4603      	mov	r3, r0
    781c:	2b00      	cmp	r3, #0
    781e:	d006      	beq.n	782e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7820:	6838      	ldr	r0, [r7, #0]
    7822:	4b21      	ldr	r3, [pc, #132]	; (78a8 <_spi_m_sync_init+0xf8>)
    7824:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    7826:	2102      	movs	r1, #2
    7828:	6838      	ldr	r0, [r7, #0]
    782a:	4b20      	ldr	r3, [pc, #128]	; (78ac <_spi_m_sync_init+0xfc>)
    782c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    782e:	68bb      	ldr	r3, [r7, #8]
    7830:	f043 0301 	orr.w	r3, r3, #1
    7834:	4619      	mov	r1, r3
    7836:	6838      	ldr	r0, [r7, #0]
    7838:	4b1d      	ldr	r3, [pc, #116]	; (78b0 <_spi_m_sync_init+0x100>)
    783a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    783c:	2101      	movs	r1, #1
    783e:	6838      	ldr	r0, [r7, #0]
    7840:	4b1a      	ldr	r3, [pc, #104]	; (78ac <_spi_m_sync_init+0xfc>)
    7842:	4798      	blx	r3

	dev->prvt = hw;
    7844:	687b      	ldr	r3, [r7, #4]
    7846:	683a      	ldr	r2, [r7, #0]
    7848:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    784a:	68fb      	ldr	r3, [r7, #12]
    784c:	681b      	ldr	r3, [r3, #0]
    784e:	f003 031c 	and.w	r3, r3, #28
    7852:	2b08      	cmp	r3, #8
    7854:	d104      	bne.n	7860 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    7856:	68f9      	ldr	r1, [r7, #12]
    7858:	6838      	ldr	r0, [r7, #0]
    785a:	4b16      	ldr	r3, [pc, #88]	; (78b4 <_spi_m_sync_init+0x104>)
    785c:	4798      	blx	r3
    785e:	e003      	b.n	7868 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7860:	68f9      	ldr	r1, [r7, #12]
    7862:	6838      	ldr	r0, [r7, #0]
    7864:	4b14      	ldr	r3, [pc, #80]	; (78b8 <_spi_m_sync_init+0x108>)
    7866:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7868:	68fb      	ldr	r3, [r7, #12]
    786a:	685b      	ldr	r3, [r3, #4]
    786c:	f003 0307 	and.w	r3, r3, #7
    7870:	2b00      	cmp	r3, #0
    7872:	d101      	bne.n	7878 <_spi_m_sync_init+0xc8>
    7874:	2201      	movs	r2, #1
    7876:	e000      	b.n	787a <_spi_m_sync_init+0xca>
    7878:	2202      	movs	r2, #2
    787a:	687b      	ldr	r3, [r7, #4]
    787c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    787e:	68fb      	ldr	r3, [r7, #12]
    7880:	89db      	ldrh	r3, [r3, #14]
    7882:	b29a      	uxth	r2, r3
    7884:	687b      	ldr	r3, [r7, #4]
    7886:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    7888:	2300      	movs	r3, #0
}
    788a:	4618      	mov	r0, r3
    788c:	3710      	adds	r7, #16
    788e:	46bd      	mov	sp, r7
    7890:	bd80      	pop	{r7, pc}
    7892:	bf00      	nop
    7894:	00007755 	.word	0x00007755
    7898:	00014920 	.word	0x00014920
    789c:	00004211 	.word	0x00004211
    78a0:	00006799 	.word	0x00006799
    78a4:	000069cd 	.word	0x000069cd
    78a8:	000069a5 	.word	0x000069a5
    78ac:	00006775 	.word	0x00006775
    78b0:	000069fd 	.word	0x000069fd
    78b4:	000076a9 	.word	0x000076a9
    78b8:	00007615 	.word	0x00007615

000078bc <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    78bc:	b580      	push	{r7, lr}
    78be:	b082      	sub	sp, #8
    78c0:	af00      	add	r7, sp, #0
    78c2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    78c4:	687b      	ldr	r3, [r7, #4]
    78c6:	2b00      	cmp	r3, #0
    78c8:	d005      	beq.n	78d6 <_spi_m_sync_enable+0x1a>
    78ca:	687b      	ldr	r3, [r7, #4]
    78cc:	681b      	ldr	r3, [r3, #0]
    78ce:	2b00      	cmp	r3, #0
    78d0:	d001      	beq.n	78d6 <_spi_m_sync_enable+0x1a>
    78d2:	2301      	movs	r3, #1
    78d4:	e000      	b.n	78d8 <_spi_m_sync_enable+0x1c>
    78d6:	2300      	movs	r3, #0
    78d8:	f003 0301 	and.w	r3, r3, #1
    78dc:	b2db      	uxtb	r3, r3
    78de:	f640 129e 	movw	r2, #2462	; 0x99e
    78e2:	4907      	ldr	r1, [pc, #28]	; (7900 <_spi_m_sync_enable+0x44>)
    78e4:	4618      	mov	r0, r3
    78e6:	4b07      	ldr	r3, [pc, #28]	; (7904 <_spi_m_sync_enable+0x48>)
    78e8:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    78ea:	687b      	ldr	r3, [r7, #4]
    78ec:	681b      	ldr	r3, [r3, #0]
    78ee:	4618      	mov	r0, r3
    78f0:	4b05      	ldr	r3, [pc, #20]	; (7908 <_spi_m_sync_enable+0x4c>)
    78f2:	4798      	blx	r3
    78f4:	4603      	mov	r3, r0
}
    78f6:	4618      	mov	r0, r3
    78f8:	3708      	adds	r7, #8
    78fa:	46bd      	mov	sp, r7
    78fc:	bd80      	pop	{r7, pc}
    78fe:	bf00      	nop
    7900:	00014920 	.word	0x00014920
    7904:	00004211 	.word	0x00004211
    7908:	000075ad 	.word	0x000075ad

0000790c <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    790c:	b580      	push	{r7, lr}
    790e:	b082      	sub	sp, #8
    7910:	af00      	add	r7, sp, #0
    7912:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7914:	687b      	ldr	r3, [r7, #4]
    7916:	2b00      	cmp	r3, #0
    7918:	d005      	beq.n	7926 <_spi_m_sync_disable+0x1a>
    791a:	687b      	ldr	r3, [r7, #4]
    791c:	681b      	ldr	r3, [r3, #0]
    791e:	2b00      	cmp	r3, #0
    7920:	d001      	beq.n	7926 <_spi_m_sync_disable+0x1a>
    7922:	2301      	movs	r3, #1
    7924:	e000      	b.n	7928 <_spi_m_sync_disable+0x1c>
    7926:	2300      	movs	r3, #0
    7928:	f003 0301 	and.w	r3, r3, #1
    792c:	b2db      	uxtb	r3, r3
    792e:	f640 12ba 	movw	r2, #2490	; 0x9ba
    7932:	4907      	ldr	r1, [pc, #28]	; (7950 <_spi_m_sync_disable+0x44>)
    7934:	4618      	mov	r0, r3
    7936:	4b07      	ldr	r3, [pc, #28]	; (7954 <_spi_m_sync_disable+0x48>)
    7938:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    793a:	687b      	ldr	r3, [r7, #4]
    793c:	681b      	ldr	r3, [r3, #0]
    793e:	4618      	mov	r0, r3
    7940:	4b05      	ldr	r3, [pc, #20]	; (7958 <_spi_m_sync_disable+0x4c>)
    7942:	4798      	blx	r3
    7944:	4603      	mov	r3, r0
}
    7946:	4618      	mov	r0, r3
    7948:	3708      	adds	r7, #8
    794a:	46bd      	mov	sp, r7
    794c:	bd80      	pop	{r7, pc}
    794e:	bf00      	nop
    7950:	00014920 	.word	0x00014920
    7954:	00004211 	.word	0x00004211
    7958:	000075e1 	.word	0x000075e1

0000795c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    795c:	b580      	push	{r7, lr}
    795e:	b082      	sub	sp, #8
    7960:	af00      	add	r7, sp, #0
    7962:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7964:	bf00      	nop
    7966:	2103      	movs	r1, #3
    7968:	6878      	ldr	r0, [r7, #4]
    796a:	4b06      	ldr	r3, [pc, #24]	; (7984 <_spi_wait_bus_idle+0x28>)
    796c:	4798      	blx	r3
    796e:	4603      	mov	r3, r0
    7970:	2b00      	cmp	r3, #0
    7972:	d0f8      	beq.n	7966 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7974:	2103      	movs	r1, #3
    7976:	6878      	ldr	r0, [r7, #4]
    7978:	4b03      	ldr	r3, [pc, #12]	; (7988 <_spi_wait_bus_idle+0x2c>)
    797a:	4798      	blx	r3
}
    797c:	bf00      	nop
    797e:	3708      	adds	r7, #8
    7980:	46bd      	mov	sp, r7
    7982:	bd80      	pop	{r7, pc}
    7984:	0000680f 	.word	0x0000680f
    7988:	00006851 	.word	0x00006851

0000798c <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    798c:	b580      	push	{r7, lr}
    798e:	b086      	sub	sp, #24
    7990:	af00      	add	r7, sp, #0
    7992:	60f8      	str	r0, [r7, #12]
    7994:	60b9      	str	r1, [r7, #8]
    7996:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    7998:	68bb      	ldr	r3, [r7, #8]
    799a:	f003 0304 	and.w	r3, r3, #4
    799e:	2b00      	cmp	r3, #0
    79a0:	d101      	bne.n	79a6 <_spi_rx_check_and_receive+0x1a>
		return false;
    79a2:	2300      	movs	r3, #0
    79a4:	e022      	b.n	79ec <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    79a6:	68f8      	ldr	r0, [r7, #12]
    79a8:	4b12      	ldr	r3, [pc, #72]	; (79f4 <_spi_rx_check_and_receive+0x68>)
    79aa:	4798      	blx	r3
    79ac:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    79ae:	687b      	ldr	r3, [r7, #4]
    79b0:	685b      	ldr	r3, [r3, #4]
    79b2:	2b00      	cmp	r3, #0
    79b4:	d014      	beq.n	79e0 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    79b6:	687b      	ldr	r3, [r7, #4]
    79b8:	685b      	ldr	r3, [r3, #4]
    79ba:	1c59      	adds	r1, r3, #1
    79bc:	687a      	ldr	r2, [r7, #4]
    79be:	6051      	str	r1, [r2, #4]
    79c0:	697a      	ldr	r2, [r7, #20]
    79c2:	b2d2      	uxtb	r2, r2
    79c4:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    79c6:	687b      	ldr	r3, [r7, #4]
    79c8:	7c1b      	ldrb	r3, [r3, #16]
    79ca:	2b01      	cmp	r3, #1
    79cc:	d908      	bls.n	79e0 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    79ce:	687b      	ldr	r3, [r7, #4]
    79d0:	685b      	ldr	r3, [r3, #4]
    79d2:	1c59      	adds	r1, r3, #1
    79d4:	687a      	ldr	r2, [r7, #4]
    79d6:	6051      	str	r1, [r2, #4]
    79d8:	697a      	ldr	r2, [r7, #20]
    79da:	0a12      	lsrs	r2, r2, #8
    79dc:	b2d2      	uxtb	r2, r2
    79de:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    79e0:	687b      	ldr	r3, [r7, #4]
    79e2:	68db      	ldr	r3, [r3, #12]
    79e4:	1c5a      	adds	r2, r3, #1
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	60da      	str	r2, [r3, #12]

	return true;
    79ea:	2301      	movs	r3, #1
}
    79ec:	4618      	mov	r0, r3
    79ee:	3718      	adds	r7, #24
    79f0:	46bd      	mov	sp, r7
    79f2:	bd80      	pop	{r7, pc}
    79f4:	00006c75 	.word	0x00006c75

000079f8 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    79f8:	b580      	push	{r7, lr}
    79fa:	b086      	sub	sp, #24
    79fc:	af00      	add	r7, sp, #0
    79fe:	60f8      	str	r0, [r7, #12]
    7a00:	60b9      	str	r1, [r7, #8]
    7a02:	607a      	str	r2, [r7, #4]
    7a04:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7a06:	68bb      	ldr	r3, [r7, #8]
    7a08:	f003 0301 	and.w	r3, r3, #1
    7a0c:	2b00      	cmp	r3, #0
    7a0e:	d028      	beq.n	7a62 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7a10:	687b      	ldr	r3, [r7, #4]
    7a12:	681b      	ldr	r3, [r3, #0]
    7a14:	2b00      	cmp	r3, #0
    7a16:	d018      	beq.n	7a4a <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	681b      	ldr	r3, [r3, #0]
    7a1c:	1c59      	adds	r1, r3, #1
    7a1e:	687a      	ldr	r2, [r7, #4]
    7a20:	6011      	str	r1, [r2, #0]
    7a22:	781b      	ldrb	r3, [r3, #0]
    7a24:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7a26:	687b      	ldr	r3, [r7, #4]
    7a28:	7c1b      	ldrb	r3, [r3, #16]
    7a2a:	2b01      	cmp	r3, #1
    7a2c:	d90f      	bls.n	7a4e <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    7a2e:	687b      	ldr	r3, [r7, #4]
    7a30:	681b      	ldr	r3, [r3, #0]
    7a32:	781b      	ldrb	r3, [r3, #0]
    7a34:	021b      	lsls	r3, r3, #8
    7a36:	461a      	mov	r2, r3
    7a38:	697b      	ldr	r3, [r7, #20]
    7a3a:	4313      	orrs	r3, r2
    7a3c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7a3e:	687b      	ldr	r3, [r7, #4]
    7a40:	681b      	ldr	r3, [r3, #0]
    7a42:	1c5a      	adds	r2, r3, #1
    7a44:	687b      	ldr	r3, [r7, #4]
    7a46:	601a      	str	r2, [r3, #0]
    7a48:	e001      	b.n	7a4e <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    7a4a:	887b      	ldrh	r3, [r7, #2]
    7a4c:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    7a4e:	687b      	ldr	r3, [r7, #4]
    7a50:	689b      	ldr	r3, [r3, #8]
    7a52:	1c5a      	adds	r2, r3, #1
    7a54:	687b      	ldr	r3, [r7, #4]
    7a56:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7a58:	6979      	ldr	r1, [r7, #20]
    7a5a:	68f8      	ldr	r0, [r7, #12]
    7a5c:	4b03      	ldr	r3, [pc, #12]	; (7a6c <_spi_tx_check_and_send+0x74>)
    7a5e:	4798      	blx	r3
    7a60:	e000      	b.n	7a64 <_spi_tx_check_and_send+0x6c>
		return;
    7a62:	bf00      	nop
}
    7a64:	3718      	adds	r7, #24
    7a66:	46bd      	mov	sp, r7
    7a68:	bd80      	pop	{r7, pc}
    7a6a:	bf00      	nop
    7a6c:	00006c59 	.word	0x00006c59

00007a70 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7a70:	b580      	push	{r7, lr}
    7a72:	b082      	sub	sp, #8
    7a74:	af00      	add	r7, sp, #0
    7a76:	6078      	str	r0, [r7, #4]
    7a78:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    7a7a:	687b      	ldr	r3, [r7, #4]
    7a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7a80:	2b00      	cmp	r3, #0
    7a82:	d00b      	beq.n	7a9c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7a84:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7a88:	6838      	ldr	r0, [r7, #0]
    7a8a:	4b07      	ldr	r3, [pc, #28]	; (7aa8 <_spi_err_check+0x38>)
    7a8c:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7a8e:	2180      	movs	r1, #128	; 0x80
    7a90:	6838      	ldr	r0, [r7, #0]
    7a92:	4b06      	ldr	r3, [pc, #24]	; (7aac <_spi_err_check+0x3c>)
    7a94:	4798      	blx	r3
		return ERR_OVERFLOW;
    7a96:	f06f 0312 	mvn.w	r3, #18
    7a9a:	e000      	b.n	7a9e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7a9c:	2300      	movs	r3, #0
}
    7a9e:	4618      	mov	r0, r3
    7aa0:	3708      	adds	r7, #8
    7aa2:	46bd      	mov	sp, r7
    7aa4:	bd80      	pop	{r7, pc}
    7aa6:	bf00      	nop
    7aa8:	00006cad 	.word	0x00006cad
    7aac:	00006851 	.word	0x00006851

00007ab0 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7ab0:	b590      	push	{r4, r7, lr}
    7ab2:	b08b      	sub	sp, #44	; 0x2c
    7ab4:	af00      	add	r7, sp, #0
    7ab6:	6078      	str	r0, [r7, #4]
    7ab8:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    7aba:	687b      	ldr	r3, [r7, #4]
    7abc:	681b      	ldr	r3, [r3, #0]
    7abe:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7ac0:	2300      	movs	r3, #0
    7ac2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7ac4:	683b      	ldr	r3, [r7, #0]
    7ac6:	681b      	ldr	r3, [r3, #0]
    7ac8:	60bb      	str	r3, [r7, #8]
    7aca:	683b      	ldr	r3, [r7, #0]
    7acc:	685b      	ldr	r3, [r3, #4]
    7ace:	60fb      	str	r3, [r7, #12]
    7ad0:	2300      	movs	r3, #0
    7ad2:	613b      	str	r3, [r7, #16]
    7ad4:	2300      	movs	r3, #0
    7ad6:	617b      	str	r3, [r7, #20]
    7ad8:	687b      	ldr	r3, [r7, #4]
    7ada:	791b      	ldrb	r3, [r3, #4]
    7adc:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7ade:	687b      	ldr	r3, [r7, #4]
    7ae0:	2b00      	cmp	r3, #0
    7ae2:	d004      	beq.n	7aee <_spi_m_sync_trans+0x3e>
    7ae4:	6a3b      	ldr	r3, [r7, #32]
    7ae6:	2b00      	cmp	r3, #0
    7ae8:	d001      	beq.n	7aee <_spi_m_sync_trans+0x3e>
    7aea:	2301      	movs	r3, #1
    7aec:	e000      	b.n	7af0 <_spi_m_sync_trans+0x40>
    7aee:	2300      	movs	r3, #0
    7af0:	f003 0301 	and.w	r3, r3, #1
    7af4:	b2db      	uxtb	r3, r3
    7af6:	f640 22a3 	movw	r2, #2723	; 0xaa3
    7afa:	492b      	ldr	r1, [pc, #172]	; (7ba8 <_spi_m_sync_trans+0xf8>)
    7afc:	4618      	mov	r0, r3
    7afe:	4b2b      	ldr	r3, [pc, #172]	; (7bac <_spi_m_sync_trans+0xfc>)
    7b00:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7b02:	2107      	movs	r1, #7
    7b04:	6a38      	ldr	r0, [r7, #32]
    7b06:	4b2a      	ldr	r3, [pc, #168]	; (7bb0 <_spi_m_sync_trans+0x100>)
    7b08:	4798      	blx	r3
    7b0a:	4603      	mov	r3, r0
    7b0c:	2b00      	cmp	r3, #0
    7b0e:	d002      	beq.n	7b16 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7b10:	f06f 0303 	mvn.w	r3, #3
    7b14:	e043      	b.n	7b9e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7b16:	6a38      	ldr	r0, [r7, #32]
    7b18:	4b26      	ldr	r3, [pc, #152]	; (7bb4 <_spi_m_sync_trans+0x104>)
    7b1a:	4798      	blx	r3
    7b1c:	4603      	mov	r3, r0
    7b1e:	f083 0301 	eor.w	r3, r3, #1
    7b22:	b2db      	uxtb	r3, r3
    7b24:	2b00      	cmp	r3, #0
    7b26:	d002      	beq.n	7b2e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7b28:	f06f 0313 	mvn.w	r3, #19
    7b2c:	e037      	b.n	7b9e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7b2e:	6a38      	ldr	r0, [r7, #32]
    7b30:	4b21      	ldr	r3, [pc, #132]	; (7bb8 <_spi_m_sync_trans+0x108>)
    7b32:	4798      	blx	r3
    7b34:	4603      	mov	r3, r0
    7b36:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7b38:	f107 0308 	add.w	r3, r7, #8
    7b3c:	461a      	mov	r2, r3
    7b3e:	69f9      	ldr	r1, [r7, #28]
    7b40:	6a38      	ldr	r0, [r7, #32]
    7b42:	4b1e      	ldr	r3, [pc, #120]	; (7bbc <_spi_m_sync_trans+0x10c>)
    7b44:	4798      	blx	r3
    7b46:	4603      	mov	r3, r0
    7b48:	f083 0301 	eor.w	r3, r3, #1
    7b4c:	b2db      	uxtb	r3, r3
    7b4e:	2b00      	cmp	r3, #0
    7b50:	d00b      	beq.n	7b6a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7b52:	697a      	ldr	r2, [r7, #20]
    7b54:	693b      	ldr	r3, [r7, #16]
    7b56:	429a      	cmp	r2, r3
    7b58:	d307      	bcc.n	7b6a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7b5a:	687b      	ldr	r3, [r7, #4]
    7b5c:	88db      	ldrh	r3, [r3, #6]
    7b5e:	f107 0208 	add.w	r2, r7, #8
    7b62:	69f9      	ldr	r1, [r7, #28]
    7b64:	6a38      	ldr	r0, [r7, #32]
    7b66:	4c16      	ldr	r4, [pc, #88]	; (7bc0 <_spi_m_sync_trans+0x110>)
    7b68:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7b6a:	6a39      	ldr	r1, [r7, #32]
    7b6c:	69f8      	ldr	r0, [r7, #28]
    7b6e:	4b15      	ldr	r3, [pc, #84]	; (7bc4 <_spi_m_sync_trans+0x114>)
    7b70:	4798      	blx	r3
    7b72:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7b76:	2b00      	cmp	r3, #0
    7b78:	db0c      	blt.n	7b94 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    7b7a:	693a      	ldr	r2, [r7, #16]
    7b7c:	683b      	ldr	r3, [r7, #0]
    7b7e:	689b      	ldr	r3, [r3, #8]
    7b80:	429a      	cmp	r2, r3
    7b82:	d3d4      	bcc.n	7b2e <_spi_m_sync_trans+0x7e>
    7b84:	697a      	ldr	r2, [r7, #20]
    7b86:	683b      	ldr	r3, [r7, #0]
    7b88:	689b      	ldr	r3, [r3, #8]
    7b8a:	429a      	cmp	r2, r3
    7b8c:	d3cf      	bcc.n	7b2e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7b8e:	693b      	ldr	r3, [r7, #16]
    7b90:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7b92:	e000      	b.n	7b96 <_spi_m_sync_trans+0xe6>
			break;
    7b94:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7b96:	6a38      	ldr	r0, [r7, #32]
    7b98:	4b0b      	ldr	r3, [pc, #44]	; (7bc8 <_spi_m_sync_trans+0x118>)
    7b9a:	4798      	blx	r3

	return rc;
    7b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7b9e:	4618      	mov	r0, r3
    7ba0:	372c      	adds	r7, #44	; 0x2c
    7ba2:	46bd      	mov	sp, r7
    7ba4:	bd90      	pop	{r4, r7, pc}
    7ba6:	bf00      	nop
    7ba8:	00014920 	.word	0x00014920
    7bac:	00004211 	.word	0x00004211
    7bb0:	00006799 	.word	0x00006799
    7bb4:	0000696d 	.word	0x0000696d
    7bb8:	00006837 	.word	0x00006837
    7bbc:	0000798d 	.word	0x0000798d
    7bc0:	000079f9 	.word	0x000079f9
    7bc4:	00007a71 	.word	0x00007a71
    7bc8:	0000795d 	.word	0x0000795d

00007bcc <__NVIC_EnableIRQ>:
{
    7bcc:	b480      	push	{r7}
    7bce:	b083      	sub	sp, #12
    7bd0:	af00      	add	r7, sp, #0
    7bd2:	4603      	mov	r3, r0
    7bd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bda:	2b00      	cmp	r3, #0
    7bdc:	db0b      	blt.n	7bf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7bde:	4909      	ldr	r1, [pc, #36]	; (7c04 <__NVIC_EnableIRQ+0x38>)
    7be0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7be4:	095b      	lsrs	r3, r3, #5
    7be6:	88fa      	ldrh	r2, [r7, #6]
    7be8:	f002 021f 	and.w	r2, r2, #31
    7bec:	2001      	movs	r0, #1
    7bee:	fa00 f202 	lsl.w	r2, r0, r2
    7bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7bf6:	bf00      	nop
    7bf8:	370c      	adds	r7, #12
    7bfa:	46bd      	mov	sp, r7
    7bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c00:	4770      	bx	lr
    7c02:	bf00      	nop
    7c04:	e000e100 	.word	0xe000e100

00007c08 <__NVIC_DisableIRQ>:
{
    7c08:	b480      	push	{r7}
    7c0a:	b083      	sub	sp, #12
    7c0c:	af00      	add	r7, sp, #0
    7c0e:	4603      	mov	r3, r0
    7c10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c16:	2b00      	cmp	r3, #0
    7c18:	db10      	blt.n	7c3c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c1a:	490b      	ldr	r1, [pc, #44]	; (7c48 <__NVIC_DisableIRQ+0x40>)
    7c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c20:	095b      	lsrs	r3, r3, #5
    7c22:	88fa      	ldrh	r2, [r7, #6]
    7c24:	f002 021f 	and.w	r2, r2, #31
    7c28:	2001      	movs	r0, #1
    7c2a:	fa00 f202 	lsl.w	r2, r0, r2
    7c2e:	3320      	adds	r3, #32
    7c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7c34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7c38:	f3bf 8f6f 	isb	sy
}
    7c3c:	bf00      	nop
    7c3e:	370c      	adds	r7, #12
    7c40:	46bd      	mov	sp, r7
    7c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c46:	4770      	bx	lr
    7c48:	e000e100 	.word	0xe000e100

00007c4c <__NVIC_ClearPendingIRQ>:
{
    7c4c:	b480      	push	{r7}
    7c4e:	b083      	sub	sp, #12
    7c50:	af00      	add	r7, sp, #0
    7c52:	4603      	mov	r3, r0
    7c54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c5a:	2b00      	cmp	r3, #0
    7c5c:	db0c      	blt.n	7c78 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c5e:	4909      	ldr	r1, [pc, #36]	; (7c84 <__NVIC_ClearPendingIRQ+0x38>)
    7c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c64:	095b      	lsrs	r3, r3, #5
    7c66:	88fa      	ldrh	r2, [r7, #6]
    7c68:	f002 021f 	and.w	r2, r2, #31
    7c6c:	2001      	movs	r0, #1
    7c6e:	fa00 f202 	lsl.w	r2, r0, r2
    7c72:	3360      	adds	r3, #96	; 0x60
    7c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c78:	bf00      	nop
    7c7a:	370c      	adds	r7, #12
    7c7c:	46bd      	mov	sp, r7
    7c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c82:	4770      	bx	lr
    7c84:	e000e100 	.word	0xe000e100

00007c88 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7c88:	b480      	push	{r7}
    7c8a:	b083      	sub	sp, #12
    7c8c:	af00      	add	r7, sp, #0
    7c8e:	6078      	str	r0, [r7, #4]
    7c90:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7c92:	bf00      	nop
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	689a      	ldr	r2, [r3, #8]
    7c98:	683b      	ldr	r3, [r7, #0]
    7c9a:	4013      	ands	r3, r2
    7c9c:	2b00      	cmp	r3, #0
    7c9e:	d1f9      	bne.n	7c94 <hri_tcc_wait_for_sync+0xc>
	};
}
    7ca0:	bf00      	nop
    7ca2:	370c      	adds	r7, #12
    7ca4:	46bd      	mov	sp, r7
    7ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7caa:	4770      	bx	lr

00007cac <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7cac:	b480      	push	{r7}
    7cae:	b083      	sub	sp, #12
    7cb0:	af00      	add	r7, sp, #0
    7cb2:	6078      	str	r0, [r7, #4]
    7cb4:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7cb6:	687b      	ldr	r3, [r7, #4]
    7cb8:	689a      	ldr	r2, [r3, #8]
    7cba:	683b      	ldr	r3, [r7, #0]
    7cbc:	4013      	ands	r3, r2
    7cbe:	2b00      	cmp	r3, #0
    7cc0:	bf14      	ite	ne
    7cc2:	2301      	movne	r3, #1
    7cc4:	2300      	moveq	r3, #0
    7cc6:	b2db      	uxtb	r3, r3
}
    7cc8:	4618      	mov	r0, r3
    7cca:	370c      	adds	r7, #12
    7ccc:	46bd      	mov	sp, r7
    7cce:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cd2:	4770      	bx	lr

00007cd4 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7cd4:	b480      	push	{r7}
    7cd6:	b083      	sub	sp, #12
    7cd8:	af00      	add	r7, sp, #0
    7cda:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7cdc:	687b      	ldr	r3, [r7, #4]
    7cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7ce0:	f003 0301 	and.w	r3, r3, #1
    7ce4:	2b00      	cmp	r3, #0
    7ce6:	bf14      	ite	ne
    7ce8:	2301      	movne	r3, #1
    7cea:	2300      	moveq	r3, #0
    7cec:	b2db      	uxtb	r3, r3
}
    7cee:	4618      	mov	r0, r3
    7cf0:	370c      	adds	r7, #12
    7cf2:	46bd      	mov	sp, r7
    7cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cf8:	4770      	bx	lr

00007cfa <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7cfa:	b480      	push	{r7}
    7cfc:	b083      	sub	sp, #12
    7cfe:	af00      	add	r7, sp, #0
    7d00:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	2201      	movs	r2, #1
    7d06:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7d08:	bf00      	nop
    7d0a:	370c      	adds	r7, #12
    7d0c:	46bd      	mov	sp, r7
    7d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d12:	4770      	bx	lr

00007d14 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7d14:	b480      	push	{r7}
    7d16:	b083      	sub	sp, #12
    7d18:	af00      	add	r7, sp, #0
    7d1a:	6078      	str	r0, [r7, #4]
    7d1c:	460b      	mov	r3, r1
    7d1e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7d20:	687b      	ldr	r3, [r7, #4]
    7d22:	78fa      	ldrb	r2, [r7, #3]
    7d24:	715a      	strb	r2, [r3, #5]
}
    7d26:	bf00      	nop
    7d28:	370c      	adds	r7, #12
    7d2a:	46bd      	mov	sp, r7
    7d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d30:	4770      	bx	lr

00007d32 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7d32:	b480      	push	{r7}
    7d34:	b083      	sub	sp, #12
    7d36:	af00      	add	r7, sp, #0
    7d38:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7d3a:	687b      	ldr	r3, [r7, #4]
    7d3c:	2201      	movs	r2, #1
    7d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
    7d40:	bf00      	nop
    7d42:	370c      	adds	r7, #12
    7d44:	46bd      	mov	sp, r7
    7d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d4a:	4770      	bx	lr

00007d4c <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7d4c:	b580      	push	{r7, lr}
    7d4e:	b082      	sub	sp, #8
    7d50:	af00      	add	r7, sp, #0
    7d52:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7d54:	687b      	ldr	r3, [r7, #4]
    7d56:	681b      	ldr	r3, [r3, #0]
    7d58:	f043 0201 	orr.w	r2, r3, #1
    7d5c:	687b      	ldr	r3, [r7, #4]
    7d5e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7d60:	2101      	movs	r1, #1
    7d62:	6878      	ldr	r0, [r7, #4]
    7d64:	4b02      	ldr	r3, [pc, #8]	; (7d70 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7d66:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d68:	bf00      	nop
    7d6a:	3708      	adds	r7, #8
    7d6c:	46bd      	mov	sp, r7
    7d6e:	bd80      	pop	{r7, pc}
    7d70:	00007c89 	.word	0x00007c89

00007d74 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7d74:	b580      	push	{r7, lr}
    7d76:	b082      	sub	sp, #8
    7d78:	af00      	add	r7, sp, #0
    7d7a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7d7c:	687b      	ldr	r3, [r7, #4]
    7d7e:	681b      	ldr	r3, [r3, #0]
    7d80:	f043 0202 	orr.w	r2, r3, #2
    7d84:	687b      	ldr	r3, [r7, #4]
    7d86:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7d88:	2103      	movs	r1, #3
    7d8a:	6878      	ldr	r0, [r7, #4]
    7d8c:	4b02      	ldr	r3, [pc, #8]	; (7d98 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7d8e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d90:	bf00      	nop
    7d92:	3708      	adds	r7, #8
    7d94:	46bd      	mov	sp, r7
    7d96:	bd80      	pop	{r7, pc}
    7d98:	00007c89 	.word	0x00007c89

00007d9c <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7d9c:	b580      	push	{r7, lr}
    7d9e:	b084      	sub	sp, #16
    7da0:	af00      	add	r7, sp, #0
    7da2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7da4:	2103      	movs	r1, #3
    7da6:	6878      	ldr	r0, [r7, #4]
    7da8:	4b09      	ldr	r3, [pc, #36]	; (7dd0 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7daa:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7dac:	687b      	ldr	r3, [r7, #4]
    7dae:	681b      	ldr	r3, [r3, #0]
    7db0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7db2:	68fb      	ldr	r3, [r7, #12]
    7db4:	085b      	lsrs	r3, r3, #1
    7db6:	f003 0301 	and.w	r3, r3, #1
    7dba:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7dbc:	68fb      	ldr	r3, [r7, #12]
    7dbe:	2b00      	cmp	r3, #0
    7dc0:	bf14      	ite	ne
    7dc2:	2301      	movne	r3, #1
    7dc4:	2300      	moveq	r3, #0
    7dc6:	b2db      	uxtb	r3, r3
}
    7dc8:	4618      	mov	r0, r3
    7dca:	3710      	adds	r7, #16
    7dcc:	46bd      	mov	sp, r7
    7dce:	bd80      	pop	{r7, pc}
    7dd0:	00007c89 	.word	0x00007c89

00007dd4 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7dd4:	b580      	push	{r7, lr}
    7dd6:	b082      	sub	sp, #8
    7dd8:	af00      	add	r7, sp, #0
    7dda:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7ddc:	687b      	ldr	r3, [r7, #4]
    7dde:	681b      	ldr	r3, [r3, #0]
    7de0:	f023 0202 	bic.w	r2, r3, #2
    7de4:	687b      	ldr	r3, [r7, #4]
    7de6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7de8:	2103      	movs	r1, #3
    7dea:	6878      	ldr	r0, [r7, #4]
    7dec:	4b02      	ldr	r3, [pc, #8]	; (7df8 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7dee:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7df0:	bf00      	nop
    7df2:	3708      	adds	r7, #8
    7df4:	46bd      	mov	sp, r7
    7df6:	bd80      	pop	{r7, pc}
    7df8:	00007c89 	.word	0x00007c89

00007dfc <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7dfc:	b580      	push	{r7, lr}
    7dfe:	b084      	sub	sp, #16
    7e00:	af00      	add	r7, sp, #0
    7e02:	6078      	str	r0, [r7, #4]
    7e04:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7e06:	2103      	movs	r1, #3
    7e08:	6878      	ldr	r0, [r7, #4]
    7e0a:	4b07      	ldr	r3, [pc, #28]	; (7e28 <hri_tcc_get_CTRLA_reg+0x2c>)
    7e0c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	681b      	ldr	r3, [r3, #0]
    7e12:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7e14:	68fa      	ldr	r2, [r7, #12]
    7e16:	683b      	ldr	r3, [r7, #0]
    7e18:	4013      	ands	r3, r2
    7e1a:	60fb      	str	r3, [r7, #12]
	return tmp;
    7e1c:	68fb      	ldr	r3, [r7, #12]
}
    7e1e:	4618      	mov	r0, r3
    7e20:	3710      	adds	r7, #16
    7e22:	46bd      	mov	sp, r7
    7e24:	bd80      	pop	{r7, pc}
    7e26:	bf00      	nop
    7e28:	00007c89 	.word	0x00007c89

00007e2c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7e2c:	b580      	push	{r7, lr}
    7e2e:	b082      	sub	sp, #8
    7e30:	af00      	add	r7, sp, #0
    7e32:	6078      	str	r0, [r7, #4]
    7e34:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7e36:	687b      	ldr	r3, [r7, #4]
    7e38:	683a      	ldr	r2, [r7, #0]
    7e3a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7e3c:	2103      	movs	r1, #3
    7e3e:	6878      	ldr	r0, [r7, #4]
    7e40:	4b02      	ldr	r3, [pc, #8]	; (7e4c <hri_tcc_write_CTRLA_reg+0x20>)
    7e42:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7e44:	bf00      	nop
    7e46:	3708      	adds	r7, #8
    7e48:	46bd      	mov	sp, r7
    7e4a:	bd80      	pop	{r7, pc}
    7e4c:	00007c89 	.word	0x00007c89

00007e50 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7e50:	b480      	push	{r7}
    7e52:	b083      	sub	sp, #12
    7e54:	af00      	add	r7, sp, #0
    7e56:	6078      	str	r0, [r7, #4]
    7e58:	460b      	mov	r3, r1
    7e5a:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7e5c:	687b      	ldr	r3, [r7, #4]
    7e5e:	78fa      	ldrb	r2, [r7, #3]
    7e60:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7e62:	bf00      	nop
    7e64:	370c      	adds	r7, #12
    7e66:	46bd      	mov	sp, r7
    7e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e6c:	4770      	bx	lr

00007e6e <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7e6e:	b480      	push	{r7}
    7e70:	b083      	sub	sp, #12
    7e72:	af00      	add	r7, sp, #0
    7e74:	6078      	str	r0, [r7, #4]
    7e76:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7e78:	687b      	ldr	r3, [r7, #4]
    7e7a:	683a      	ldr	r2, [r7, #0]
    7e7c:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7e7e:	bf00      	nop
    7e80:	370c      	adds	r7, #12
    7e82:	46bd      	mov	sp, r7
    7e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e88:	4770      	bx	lr
	...

00007e8c <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7e8c:	b580      	push	{r7, lr}
    7e8e:	b082      	sub	sp, #8
    7e90:	af00      	add	r7, sp, #0
    7e92:	6078      	str	r0, [r7, #4]
    7e94:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7e96:	687b      	ldr	r3, [r7, #4]
    7e98:	683a      	ldr	r2, [r7, #0]
    7e9a:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7e9c:	2180      	movs	r1, #128	; 0x80
    7e9e:	6878      	ldr	r0, [r7, #4]
    7ea0:	4b02      	ldr	r3, [pc, #8]	; (7eac <hri_tcc_write_PER_reg+0x20>)
    7ea2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7ea4:	bf00      	nop
    7ea6:	3708      	adds	r7, #8
    7ea8:	46bd      	mov	sp, r7
    7eaa:	bd80      	pop	{r7, pc}
    7eac:	00007c89 	.word	0x00007c89

00007eb0 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7eb0:	b580      	push	{r7, lr}
    7eb2:	b082      	sub	sp, #8
    7eb4:	af00      	add	r7, sp, #0
    7eb6:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7eb8:	2180      	movs	r1, #128	; 0x80
    7eba:	6878      	ldr	r0, [r7, #4]
    7ebc:	4b03      	ldr	r3, [pc, #12]	; (7ecc <hri_tcc_read_PER_reg+0x1c>)
    7ebe:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7ec0:	687b      	ldr	r3, [r7, #4]
    7ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7ec4:	4618      	mov	r0, r3
    7ec6:	3708      	adds	r7, #8
    7ec8:	46bd      	mov	sp, r7
    7eca:	bd80      	pop	{r7, pc}
    7ecc:	00007c89 	.word	0x00007c89

00007ed0 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7ed0:	b480      	push	{r7}
    7ed2:	b083      	sub	sp, #12
    7ed4:	af00      	add	r7, sp, #0
    7ed6:	6078      	str	r0, [r7, #4]
    7ed8:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7eda:	687b      	ldr	r3, [r7, #4]
    7edc:	4a0c      	ldr	r2, [pc, #48]	; (7f10 <_tcc_init_irq_param+0x40>)
    7ede:	4293      	cmp	r3, r2
    7ee0:	d102      	bne.n	7ee8 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7ee2:	4a0c      	ldr	r2, [pc, #48]	; (7f14 <_tcc_init_irq_param+0x44>)
    7ee4:	683b      	ldr	r3, [r7, #0]
    7ee6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7ee8:	687b      	ldr	r3, [r7, #4]
    7eea:	4a0b      	ldr	r2, [pc, #44]	; (7f18 <_tcc_init_irq_param+0x48>)
    7eec:	4293      	cmp	r3, r2
    7eee:	d102      	bne.n	7ef6 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7ef0:	4a0a      	ldr	r2, [pc, #40]	; (7f1c <_tcc_init_irq_param+0x4c>)
    7ef2:	683b      	ldr	r3, [r7, #0]
    7ef4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	4a09      	ldr	r2, [pc, #36]	; (7f20 <_tcc_init_irq_param+0x50>)
    7efa:	4293      	cmp	r3, r2
    7efc:	d102      	bne.n	7f04 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    7efe:	4a09      	ldr	r2, [pc, #36]	; (7f24 <_tcc_init_irq_param+0x54>)
    7f00:	683b      	ldr	r3, [r7, #0]
    7f02:	6013      	str	r3, [r2, #0]
	}
}
    7f04:	bf00      	nop
    7f06:	370c      	adds	r7, #12
    7f08:	46bd      	mov	sp, r7
    7f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f0e:	4770      	bx	lr
    7f10:	41016000 	.word	0x41016000
    7f14:	20000ea0 	.word	0x20000ea0
    7f18:	41018000 	.word	0x41018000
    7f1c:	20000ea4 	.word	0x20000ea4
    7f20:	42000c00 	.word	0x42000c00
    7f24:	20000ea8 	.word	0x20000ea8

00007f28 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7f28:	b580      	push	{r7, lr}
    7f2a:	b084      	sub	sp, #16
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	6078      	str	r0, [r7, #4]
    7f30:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7f32:	6838      	ldr	r0, [r7, #0]
    7f34:	4b33      	ldr	r3, [pc, #204]	; (8004 <_tcc_timer_init+0xdc>)
    7f36:	4798      	blx	r3
    7f38:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7f3a:	68fb      	ldr	r3, [r7, #12]
    7f3c:	2b00      	cmp	r3, #0
    7f3e:	d102      	bne.n	7f46 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7f40:	f06f 0309 	mvn.w	r3, #9
    7f44:	e05a      	b.n	7ffc <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7f46:	687b      	ldr	r3, [r7, #4]
    7f48:	683a      	ldr	r2, [r7, #0]
    7f4a:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7f4c:	2101      	movs	r1, #1
    7f4e:	6838      	ldr	r0, [r7, #0]
    7f50:	4b2d      	ldr	r3, [pc, #180]	; (8008 <_tcc_timer_init+0xe0>)
    7f52:	4798      	blx	r3
    7f54:	4603      	mov	r3, r0
    7f56:	f083 0301 	eor.w	r3, r3, #1
    7f5a:	b2db      	uxtb	r3, r3
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d011      	beq.n	7f84 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7f60:	2102      	movs	r1, #2
    7f62:	6838      	ldr	r0, [r7, #0]
    7f64:	4b29      	ldr	r3, [pc, #164]	; (800c <_tcc_timer_init+0xe4>)
    7f66:	4798      	blx	r3
    7f68:	4603      	mov	r3, r0
    7f6a:	2b00      	cmp	r3, #0
    7f6c:	d006      	beq.n	7f7c <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7f6e:	6838      	ldr	r0, [r7, #0]
    7f70:	4b27      	ldr	r3, [pc, #156]	; (8010 <_tcc_timer_init+0xe8>)
    7f72:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7f74:	2102      	movs	r1, #2
    7f76:	6838      	ldr	r0, [r7, #0]
    7f78:	4b26      	ldr	r3, [pc, #152]	; (8014 <_tcc_timer_init+0xec>)
    7f7a:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7f7c:	2101      	movs	r1, #1
    7f7e:	6838      	ldr	r0, [r7, #0]
    7f80:	4b25      	ldr	r3, [pc, #148]	; (8018 <_tcc_timer_init+0xf0>)
    7f82:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7f84:	2101      	movs	r1, #1
    7f86:	6838      	ldr	r0, [r7, #0]
    7f88:	4b22      	ldr	r3, [pc, #136]	; (8014 <_tcc_timer_init+0xec>)
    7f8a:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7f8c:	68fb      	ldr	r3, [r7, #12]
    7f8e:	689b      	ldr	r3, [r3, #8]
    7f90:	4619      	mov	r1, r3
    7f92:	6838      	ldr	r0, [r7, #0]
    7f94:	4b20      	ldr	r3, [pc, #128]	; (8018 <_tcc_timer_init+0xf0>)
    7f96:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7f98:	68fb      	ldr	r3, [r7, #12]
    7f9a:	7b1b      	ldrb	r3, [r3, #12]
    7f9c:	4619      	mov	r1, r3
    7f9e:	6838      	ldr	r0, [r7, #0]
    7fa0:	4b1e      	ldr	r3, [pc, #120]	; (801c <_tcc_timer_init+0xf4>)
    7fa2:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7fa4:	68fb      	ldr	r3, [r7, #12]
    7fa6:	7b5b      	ldrb	r3, [r3, #13]
    7fa8:	4619      	mov	r1, r3
    7faa:	6838      	ldr	r0, [r7, #0]
    7fac:	4b1c      	ldr	r3, [pc, #112]	; (8020 <_tcc_timer_init+0xf8>)
    7fae:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7fb0:	68fb      	ldr	r3, [r7, #12]
    7fb2:	691b      	ldr	r3, [r3, #16]
    7fb4:	4619      	mov	r1, r3
    7fb6:	6838      	ldr	r0, [r7, #0]
    7fb8:	4b1a      	ldr	r3, [pc, #104]	; (8024 <_tcc_timer_init+0xfc>)
    7fba:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7fbc:	68fb      	ldr	r3, [r7, #12]
    7fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7fc0:	4619      	mov	r1, r3
    7fc2:	6838      	ldr	r0, [r7, #0]
    7fc4:	4b18      	ldr	r3, [pc, #96]	; (8028 <_tcc_timer_init+0x100>)
    7fc6:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7fc8:	6838      	ldr	r0, [r7, #0]
    7fca:	4b18      	ldr	r3, [pc, #96]	; (802c <_tcc_timer_init+0x104>)
    7fcc:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7fce:	6879      	ldr	r1, [r7, #4]
    7fd0:	6838      	ldr	r0, [r7, #0]
    7fd2:	4b17      	ldr	r3, [pc, #92]	; (8030 <_tcc_timer_init+0x108>)
    7fd4:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7fd6:	68fb      	ldr	r3, [r7, #12]
    7fd8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7fdc:	4618      	mov	r0, r3
    7fde:	4b15      	ldr	r3, [pc, #84]	; (8034 <_tcc_timer_init+0x10c>)
    7fe0:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7fe2:	68fb      	ldr	r3, [r7, #12]
    7fe4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7fe8:	4618      	mov	r0, r3
    7fea:	4b13      	ldr	r3, [pc, #76]	; (8038 <_tcc_timer_init+0x110>)
    7fec:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7fee:	68fb      	ldr	r3, [r7, #12]
    7ff0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7ff4:	4618      	mov	r0, r3
    7ff6:	4b11      	ldr	r3, [pc, #68]	; (803c <_tcc_timer_init+0x114>)
    7ff8:	4798      	blx	r3

	return ERR_NONE;
    7ffa:	2300      	movs	r3, #0
}
    7ffc:	4618      	mov	r0, r3
    7ffe:	3710      	adds	r7, #16
    8000:	46bd      	mov	sp, r7
    8002:	bd80      	pop	{r7, pc}
    8004:	0000820d 	.word	0x0000820d
    8008:	00007cad 	.word	0x00007cad
    800c:	00007dfd 	.word	0x00007dfd
    8010:	00007dd5 	.word	0x00007dd5
    8014:	00007c89 	.word	0x00007c89
    8018:	00007e2d 	.word	0x00007e2d
    801c:	00007d15 	.word	0x00007d15
    8020:	00007e51 	.word	0x00007e51
    8024:	00007e6f 	.word	0x00007e6f
    8028:	00007e8d 	.word	0x00007e8d
    802c:	00007d33 	.word	0x00007d33
    8030:	00007ed1 	.word	0x00007ed1
    8034:	00007c09 	.word	0x00007c09
    8038:	00007c4d 	.word	0x00007c4d
    803c:	00007bcd 	.word	0x00007bcd

00008040 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    8040:	b580      	push	{r7, lr}
    8042:	b084      	sub	sp, #16
    8044:	af00      	add	r7, sp, #0
    8046:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    8048:	687b      	ldr	r3, [r7, #4]
    804a:	68db      	ldr	r3, [r3, #12]
    804c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    804e:	68f8      	ldr	r0, [r7, #12]
    8050:	4b0a      	ldr	r3, [pc, #40]	; (807c <_tcc_timer_deinit+0x3c>)
    8052:	4798      	blx	r3
    8054:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    8056:	68bb      	ldr	r3, [r7, #8]
    8058:	2b00      	cmp	r3, #0
    805a:	d00b      	beq.n	8074 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    805c:	68bb      	ldr	r3, [r7, #8]
    805e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8062:	4618      	mov	r0, r3
    8064:	4b06      	ldr	r3, [pc, #24]	; (8080 <_tcc_timer_deinit+0x40>)
    8066:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    8068:	68f8      	ldr	r0, [r7, #12]
    806a:	4b06      	ldr	r3, [pc, #24]	; (8084 <_tcc_timer_deinit+0x44>)
    806c:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    806e:	68f8      	ldr	r0, [r7, #12]
    8070:	4b05      	ldr	r3, [pc, #20]	; (8088 <_tcc_timer_deinit+0x48>)
    8072:	4798      	blx	r3
	}
}
    8074:	bf00      	nop
    8076:	3710      	adds	r7, #16
    8078:	46bd      	mov	sp, r7
    807a:	bd80      	pop	{r7, pc}
    807c:	0000820d 	.word	0x0000820d
    8080:	00007c09 	.word	0x00007c09
    8084:	00007dd5 	.word	0x00007dd5
    8088:	00007d4d 	.word	0x00007d4d

0000808c <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    808c:	b580      	push	{r7, lr}
    808e:	b082      	sub	sp, #8
    8090:	af00      	add	r7, sp, #0
    8092:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    8094:	687b      	ldr	r3, [r7, #4]
    8096:	68db      	ldr	r3, [r3, #12]
    8098:	4618      	mov	r0, r3
    809a:	4b03      	ldr	r3, [pc, #12]	; (80a8 <_tcc_timer_start+0x1c>)
    809c:	4798      	blx	r3
}
    809e:	bf00      	nop
    80a0:	3708      	adds	r7, #8
    80a2:	46bd      	mov	sp, r7
    80a4:	bd80      	pop	{r7, pc}
    80a6:	bf00      	nop
    80a8:	00007d75 	.word	0x00007d75

000080ac <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    80ac:	b580      	push	{r7, lr}
    80ae:	b082      	sub	sp, #8
    80b0:	af00      	add	r7, sp, #0
    80b2:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    80b4:	687b      	ldr	r3, [r7, #4]
    80b6:	68db      	ldr	r3, [r3, #12]
    80b8:	4618      	mov	r0, r3
    80ba:	4b03      	ldr	r3, [pc, #12]	; (80c8 <_tcc_timer_stop+0x1c>)
    80bc:	4798      	blx	r3
}
    80be:	bf00      	nop
    80c0:	3708      	adds	r7, #8
    80c2:	46bd      	mov	sp, r7
    80c4:	bd80      	pop	{r7, pc}
    80c6:	bf00      	nop
    80c8:	00007dd5 	.word	0x00007dd5

000080cc <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    80cc:	b580      	push	{r7, lr}
    80ce:	b082      	sub	sp, #8
    80d0:	af00      	add	r7, sp, #0
    80d2:	6078      	str	r0, [r7, #4]
    80d4:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    80d6:	687b      	ldr	r3, [r7, #4]
    80d8:	68db      	ldr	r3, [r3, #12]
    80da:	6839      	ldr	r1, [r7, #0]
    80dc:	4618      	mov	r0, r3
    80de:	4b03      	ldr	r3, [pc, #12]	; (80ec <_tcc_timer_set_period+0x20>)
    80e0:	4798      	blx	r3
}
    80e2:	bf00      	nop
    80e4:	3708      	adds	r7, #8
    80e6:	46bd      	mov	sp, r7
    80e8:	bd80      	pop	{r7, pc}
    80ea:	bf00      	nop
    80ec:	00007e8d 	.word	0x00007e8d

000080f0 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    80f0:	b580      	push	{r7, lr}
    80f2:	b082      	sub	sp, #8
    80f4:	af00      	add	r7, sp, #0
    80f6:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    80f8:	687b      	ldr	r3, [r7, #4]
    80fa:	68db      	ldr	r3, [r3, #12]
    80fc:	4618      	mov	r0, r3
    80fe:	4b03      	ldr	r3, [pc, #12]	; (810c <_tcc_timer_get_period+0x1c>)
    8100:	4798      	blx	r3
    8102:	4603      	mov	r3, r0
}
    8104:	4618      	mov	r0, r3
    8106:	3708      	adds	r7, #8
    8108:	46bd      	mov	sp, r7
    810a:	bd80      	pop	{r7, pc}
    810c:	00007eb1 	.word	0x00007eb1

00008110 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    8110:	b580      	push	{r7, lr}
    8112:	b082      	sub	sp, #8
    8114:	af00      	add	r7, sp, #0
    8116:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    8118:	687b      	ldr	r3, [r7, #4]
    811a:	68db      	ldr	r3, [r3, #12]
    811c:	4618      	mov	r0, r3
    811e:	4b03      	ldr	r3, [pc, #12]	; (812c <_tcc_timer_is_started+0x1c>)
    8120:	4798      	blx	r3
    8122:	4603      	mov	r3, r0
}
    8124:	4618      	mov	r0, r3
    8126:	3708      	adds	r7, #8
    8128:	46bd      	mov	sp, r7
    812a:	bd80      	pop	{r7, pc}
    812c:	00007d9d 	.word	0x00007d9d

00008130 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    8130:	b480      	push	{r7}
    8132:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    8134:	4b02      	ldr	r3, [pc, #8]	; (8140 <_tcc_get_timer+0x10>)
}
    8136:	4618      	mov	r0, r3
    8138:	46bd      	mov	sp, r7
    813a:	f85d 7b04 	ldr.w	r7, [sp], #4
    813e:	4770      	bx	lr
    8140:	200000f0 	.word	0x200000f0

00008144 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    8144:	b580      	push	{r7, lr}
    8146:	b084      	sub	sp, #16
    8148:	af00      	add	r7, sp, #0
    814a:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    814c:	687b      	ldr	r3, [r7, #4]
    814e:	68db      	ldr	r3, [r3, #12]
    8150:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8152:	68f8      	ldr	r0, [r7, #12]
    8154:	4b08      	ldr	r3, [pc, #32]	; (8178 <_tcc_timer_set_irq+0x34>)
    8156:	4798      	blx	r3
    8158:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    815a:	68bb      	ldr	r3, [r7, #8]
    815c:	2b00      	cmp	r3, #0
    815e:	d006      	beq.n	816e <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    8160:	68bb      	ldr	r3, [r7, #8]
    8162:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8166:	b2db      	uxtb	r3, r3
    8168:	4618      	mov	r0, r3
    816a:	4b04      	ldr	r3, [pc, #16]	; (817c <_tcc_timer_set_irq+0x38>)
    816c:	4798      	blx	r3
	}
}
    816e:	bf00      	nop
    8170:	3710      	adds	r7, #16
    8172:	46bd      	mov	sp, r7
    8174:	bd80      	pop	{r7, pc}
    8176:	bf00      	nop
    8178:	0000820d 	.word	0x0000820d
    817c:	00004a59 	.word	0x00004a59

00008180 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    8180:	b580      	push	{r7, lr}
    8182:	b084      	sub	sp, #16
    8184:	af00      	add	r7, sp, #0
    8186:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8188:	687b      	ldr	r3, [r7, #4]
    818a:	68db      	ldr	r3, [r3, #12]
    818c:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    818e:	68f8      	ldr	r0, [r7, #12]
    8190:	4b07      	ldr	r3, [pc, #28]	; (81b0 <tcc_interrupt_handler+0x30>)
    8192:	4798      	blx	r3
    8194:	4603      	mov	r3, r0
    8196:	2b00      	cmp	r3, #0
    8198:	d006      	beq.n	81a8 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    819a:	68f8      	ldr	r0, [r7, #12]
    819c:	4b05      	ldr	r3, [pc, #20]	; (81b4 <tcc_interrupt_handler+0x34>)
    819e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    81a0:	687b      	ldr	r3, [r7, #4]
    81a2:	681b      	ldr	r3, [r3, #0]
    81a4:	6878      	ldr	r0, [r7, #4]
    81a6:	4798      	blx	r3
	}
}
    81a8:	bf00      	nop
    81aa:	3710      	adds	r7, #16
    81ac:	46bd      	mov	sp, r7
    81ae:	bd80      	pop	{r7, pc}
    81b0:	00007cd5 	.word	0x00007cd5
    81b4:	00007cfb 	.word	0x00007cfb

000081b8 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    81b8:	b580      	push	{r7, lr}
    81ba:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    81bc:	4b03      	ldr	r3, [pc, #12]	; (81cc <TCC0_0_Handler+0x14>)
    81be:	681b      	ldr	r3, [r3, #0]
    81c0:	4618      	mov	r0, r3
    81c2:	4b03      	ldr	r3, [pc, #12]	; (81d0 <TCC0_0_Handler+0x18>)
    81c4:	4798      	blx	r3
}
    81c6:	bf00      	nop
    81c8:	bd80      	pop	{r7, pc}
    81ca:	bf00      	nop
    81cc:	20000ea0 	.word	0x20000ea0
    81d0:	00008181 	.word	0x00008181

000081d4 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    81d4:	b580      	push	{r7, lr}
    81d6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    81d8:	4b03      	ldr	r3, [pc, #12]	; (81e8 <TCC1_0_Handler+0x14>)
    81da:	681b      	ldr	r3, [r3, #0]
    81dc:	4618      	mov	r0, r3
    81de:	4b03      	ldr	r3, [pc, #12]	; (81ec <TCC1_0_Handler+0x18>)
    81e0:	4798      	blx	r3
}
    81e2:	bf00      	nop
    81e4:	bd80      	pop	{r7, pc}
    81e6:	bf00      	nop
    81e8:	20000ea4 	.word	0x20000ea4
    81ec:	00008181 	.word	0x00008181

000081f0 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    81f0:	b580      	push	{r7, lr}
    81f2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    81f4:	4b03      	ldr	r3, [pc, #12]	; (8204 <TCC2_0_Handler+0x14>)
    81f6:	681b      	ldr	r3, [r3, #0]
    81f8:	4618      	mov	r0, r3
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <TCC2_0_Handler+0x18>)
    81fc:	4798      	blx	r3
}
    81fe:	bf00      	nop
    8200:	bd80      	pop	{r7, pc}
    8202:	bf00      	nop
    8204:	20000ea8 	.word	0x20000ea8
    8208:	00008181 	.word	0x00008181

0000820c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    820c:	b480      	push	{r7}
    820e:	b085      	sub	sp, #20
    8210:	af00      	add	r7, sp, #0
    8212:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8214:	2300      	movs	r3, #0
    8216:	73fb      	strb	r3, [r7, #15]
    8218:	e015      	b.n	8246 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    821a:	7bfa      	ldrb	r2, [r7, #15]
    821c:	490f      	ldr	r1, [pc, #60]	; (825c <_get_tcc_cfg+0x50>)
    821e:	4613      	mov	r3, r2
    8220:	005b      	lsls	r3, r3, #1
    8222:	4413      	add	r3, r2
    8224:	011b      	lsls	r3, r3, #4
    8226:	440b      	add	r3, r1
    8228:	681a      	ldr	r2, [r3, #0]
    822a:	687b      	ldr	r3, [r7, #4]
    822c:	429a      	cmp	r2, r3
    822e:	d107      	bne.n	8240 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    8230:	7bfa      	ldrb	r2, [r7, #15]
    8232:	4613      	mov	r3, r2
    8234:	005b      	lsls	r3, r3, #1
    8236:	4413      	add	r3, r2
    8238:	011b      	lsls	r3, r3, #4
    823a:	4a08      	ldr	r2, [pc, #32]	; (825c <_get_tcc_cfg+0x50>)
    823c:	4413      	add	r3, r2
    823e:	e006      	b.n	824e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8240:	7bfb      	ldrb	r3, [r7, #15]
    8242:	3301      	adds	r3, #1
    8244:	73fb      	strb	r3, [r7, #15]
    8246:	7bfb      	ldrb	r3, [r7, #15]
    8248:	2b02      	cmp	r3, #2
    824a:	d9e6      	bls.n	821a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    824c:	2300      	movs	r3, #0
}
    824e:	4618      	mov	r0, r3
    8250:	3714      	adds	r7, #20
    8252:	46bd      	mov	sp, r7
    8254:	f85d 7b04 	ldr.w	r7, [sp], #4
    8258:	4770      	bx	lr
    825a:	bf00      	nop
    825c:	20000060 	.word	0x20000060

00008260 <__NVIC_EnableIRQ>:
{
    8260:	b480      	push	{r7}
    8262:	b083      	sub	sp, #12
    8264:	af00      	add	r7, sp, #0
    8266:	4603      	mov	r3, r0
    8268:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    826a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    826e:	2b00      	cmp	r3, #0
    8270:	db0b      	blt.n	828a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8272:	4909      	ldr	r1, [pc, #36]	; (8298 <__NVIC_EnableIRQ+0x38>)
    8274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8278:	095b      	lsrs	r3, r3, #5
    827a:	88fa      	ldrh	r2, [r7, #6]
    827c:	f002 021f 	and.w	r2, r2, #31
    8280:	2001      	movs	r0, #1
    8282:	fa00 f202 	lsl.w	r2, r0, r2
    8286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    828a:	bf00      	nop
    828c:	370c      	adds	r7, #12
    828e:	46bd      	mov	sp, r7
    8290:	f85d 7b04 	ldr.w	r7, [sp], #4
    8294:	4770      	bx	lr
    8296:	bf00      	nop
    8298:	e000e100 	.word	0xe000e100

0000829c <__NVIC_DisableIRQ>:
{
    829c:	b480      	push	{r7}
    829e:	b083      	sub	sp, #12
    82a0:	af00      	add	r7, sp, #0
    82a2:	4603      	mov	r3, r0
    82a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    82a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82aa:	2b00      	cmp	r3, #0
    82ac:	db10      	blt.n	82d0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82ae:	490b      	ldr	r1, [pc, #44]	; (82dc <__NVIC_DisableIRQ+0x40>)
    82b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82b4:	095b      	lsrs	r3, r3, #5
    82b6:	88fa      	ldrh	r2, [r7, #6]
    82b8:	f002 021f 	and.w	r2, r2, #31
    82bc:	2001      	movs	r0, #1
    82be:	fa00 f202 	lsl.w	r2, r0, r2
    82c2:	3320      	adds	r3, #32
    82c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    82c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    82cc:	f3bf 8f6f 	isb	sy
}
    82d0:	bf00      	nop
    82d2:	370c      	adds	r7, #12
    82d4:	46bd      	mov	sp, r7
    82d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    82da:	4770      	bx	lr
    82dc:	e000e100 	.word	0xe000e100

000082e0 <__NVIC_ClearPendingIRQ>:
{
    82e0:	b480      	push	{r7}
    82e2:	b083      	sub	sp, #12
    82e4:	af00      	add	r7, sp, #0
    82e6:	4603      	mov	r3, r0
    82e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    82ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82ee:	2b00      	cmp	r3, #0
    82f0:	db0c      	blt.n	830c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82f2:	4909      	ldr	r1, [pc, #36]	; (8318 <__NVIC_ClearPendingIRQ+0x38>)
    82f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82f8:	095b      	lsrs	r3, r3, #5
    82fa:	88fa      	ldrh	r2, [r7, #6]
    82fc:	f002 021f 	and.w	r2, r2, #31
    8300:	2001      	movs	r0, #1
    8302:	fa00 f202 	lsl.w	r2, r0, r2
    8306:	3360      	adds	r3, #96	; 0x60
    8308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    830c:	bf00      	nop
    830e:	370c      	adds	r7, #12
    8310:	46bd      	mov	sp, r7
    8312:	f85d 7b04 	ldr.w	r7, [sp], #4
    8316:	4770      	bx	lr
    8318:	e000e100 	.word	0xe000e100

0000831c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    831c:	b480      	push	{r7}
    831e:	b083      	sub	sp, #12
    8320:	af00      	add	r7, sp, #0
    8322:	6078      	str	r0, [r7, #4]
    8324:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8326:	bf00      	nop
    8328:	687b      	ldr	r3, [r7, #4]
    832a:	691a      	ldr	r2, [r3, #16]
    832c:	683b      	ldr	r3, [r7, #0]
    832e:	4013      	ands	r3, r2
    8330:	2b00      	cmp	r3, #0
    8332:	d1f9      	bne.n	8328 <hri_tc_wait_for_sync+0xc>
	};
}
    8334:	bf00      	nop
    8336:	370c      	adds	r7, #12
    8338:	46bd      	mov	sp, r7
    833a:	f85d 7b04 	ldr.w	r7, [sp], #4
    833e:	4770      	bx	lr

00008340 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8340:	b480      	push	{r7}
    8342:	b083      	sub	sp, #12
    8344:	af00      	add	r7, sp, #0
    8346:	6078      	str	r0, [r7, #4]
    8348:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    834a:	687b      	ldr	r3, [r7, #4]
    834c:	691a      	ldr	r2, [r3, #16]
    834e:	683b      	ldr	r3, [r7, #0]
    8350:	4013      	ands	r3, r2
    8352:	2b00      	cmp	r3, #0
    8354:	bf14      	ite	ne
    8356:	2301      	movne	r3, #1
    8358:	2300      	moveq	r3, #0
    835a:	b2db      	uxtb	r3, r3
}
    835c:	4618      	mov	r0, r3
    835e:	370c      	adds	r7, #12
    8360:	46bd      	mov	sp, r7
    8362:	f85d 7b04 	ldr.w	r7, [sp], #4
    8366:	4770      	bx	lr

00008368 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    8368:	b480      	push	{r7}
    836a:	b083      	sub	sp, #12
    836c:	af00      	add	r7, sp, #0
    836e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    8370:	687b      	ldr	r3, [r7, #4]
    8372:	7a9b      	ldrb	r3, [r3, #10]
    8374:	b2db      	uxtb	r3, r3
    8376:	f003 0301 	and.w	r3, r3, #1
    837a:	2b00      	cmp	r3, #0
    837c:	bf14      	ite	ne
    837e:	2301      	movne	r3, #1
    8380:	2300      	moveq	r3, #0
    8382:	b2db      	uxtb	r3, r3
}
    8384:	4618      	mov	r0, r3
    8386:	370c      	adds	r7, #12
    8388:	46bd      	mov	sp, r7
    838a:	f85d 7b04 	ldr.w	r7, [sp], #4
    838e:	4770      	bx	lr

00008390 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    8390:	b480      	push	{r7}
    8392:	b083      	sub	sp, #12
    8394:	af00      	add	r7, sp, #0
    8396:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8398:	687b      	ldr	r3, [r7, #4]
    839a:	2201      	movs	r2, #1
    839c:	729a      	strb	r2, [r3, #10]
}
    839e:	bf00      	nop
    83a0:	370c      	adds	r7, #12
    83a2:	46bd      	mov	sp, r7
    83a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    83a8:	4770      	bx	lr

000083aa <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    83aa:	b480      	push	{r7}
    83ac:	b083      	sub	sp, #12
    83ae:	af00      	add	r7, sp, #0
    83b0:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    83b2:	687b      	ldr	r3, [r7, #4]
    83b4:	2202      	movs	r2, #2
    83b6:	729a      	strb	r2, [r3, #10]
}
    83b8:	bf00      	nop
    83ba:	370c      	adds	r7, #12
    83bc:	46bd      	mov	sp, r7
    83be:	f85d 7b04 	ldr.w	r7, [sp], #4
    83c2:	4770      	bx	lr

000083c4 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    83c4:	b480      	push	{r7}
    83c6:	b083      	sub	sp, #12
    83c8:	af00      	add	r7, sp, #0
    83ca:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    83cc:	687b      	ldr	r3, [r7, #4]
    83ce:	2201      	movs	r2, #1
    83d0:	725a      	strb	r2, [r3, #9]
}
    83d2:	bf00      	nop
    83d4:	370c      	adds	r7, #12
    83d6:	46bd      	mov	sp, r7
    83d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83dc:	4770      	bx	lr

000083de <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    83de:	b480      	push	{r7}
    83e0:	b083      	sub	sp, #12
    83e2:	af00      	add	r7, sp, #0
    83e4:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    83e6:	687b      	ldr	r3, [r7, #4]
    83e8:	7a5b      	ldrb	r3, [r3, #9]
    83ea:	b2db      	uxtb	r3, r3
    83ec:	085b      	lsrs	r3, r3, #1
    83ee:	f003 0301 	and.w	r3, r3, #1
    83f2:	2b00      	cmp	r3, #0
    83f4:	bf14      	ite	ne
    83f6:	2301      	movne	r3, #1
    83f8:	2300      	moveq	r3, #0
    83fa:	b2db      	uxtb	r3, r3
}
    83fc:	4618      	mov	r0, r3
    83fe:	370c      	adds	r7, #12
    8400:	46bd      	mov	sp, r7
    8402:	f85d 7b04 	ldr.w	r7, [sp], #4
    8406:	4770      	bx	lr

00008408 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8408:	b580      	push	{r7, lr}
    840a:	b082      	sub	sp, #8
    840c:	af00      	add	r7, sp, #0
    840e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8410:	687b      	ldr	r3, [r7, #4]
    8412:	681b      	ldr	r3, [r3, #0]
    8414:	f043 0201 	orr.w	r2, r3, #1
    8418:	687b      	ldr	r3, [r7, #4]
    841a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    841c:	2101      	movs	r1, #1
    841e:	6878      	ldr	r0, [r7, #4]
    8420:	4b02      	ldr	r3, [pc, #8]	; (842c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    8422:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8424:	bf00      	nop
    8426:	3708      	adds	r7, #8
    8428:	46bd      	mov	sp, r7
    842a:	bd80      	pop	{r7, pc}
    842c:	0000831d 	.word	0x0000831d

00008430 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8430:	b580      	push	{r7, lr}
    8432:	b082      	sub	sp, #8
    8434:	af00      	add	r7, sp, #0
    8436:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8438:	687b      	ldr	r3, [r7, #4]
    843a:	681b      	ldr	r3, [r3, #0]
    843c:	f043 0202 	orr.w	r2, r3, #2
    8440:	687b      	ldr	r3, [r7, #4]
    8442:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8444:	2103      	movs	r1, #3
    8446:	6878      	ldr	r0, [r7, #4]
    8448:	4b02      	ldr	r3, [pc, #8]	; (8454 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    844a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    844c:	bf00      	nop
    844e:	3708      	adds	r7, #8
    8450:	46bd      	mov	sp, r7
    8452:	bd80      	pop	{r7, pc}
    8454:	0000831d 	.word	0x0000831d

00008458 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8458:	b580      	push	{r7, lr}
    845a:	b084      	sub	sp, #16
    845c:	af00      	add	r7, sp, #0
    845e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8460:	2103      	movs	r1, #3
    8462:	6878      	ldr	r0, [r7, #4]
    8464:	4b09      	ldr	r3, [pc, #36]	; (848c <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    8466:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8468:	687b      	ldr	r3, [r7, #4]
    846a:	681b      	ldr	r3, [r3, #0]
    846c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    846e:	68fb      	ldr	r3, [r7, #12]
    8470:	085b      	lsrs	r3, r3, #1
    8472:	f003 0301 	and.w	r3, r3, #1
    8476:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8478:	68fb      	ldr	r3, [r7, #12]
    847a:	2b00      	cmp	r3, #0
    847c:	bf14      	ite	ne
    847e:	2301      	movne	r3, #1
    8480:	2300      	moveq	r3, #0
    8482:	b2db      	uxtb	r3, r3
}
    8484:	4618      	mov	r0, r3
    8486:	3710      	adds	r7, #16
    8488:	46bd      	mov	sp, r7
    848a:	bd80      	pop	{r7, pc}
    848c:	0000831d 	.word	0x0000831d

00008490 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8490:	b580      	push	{r7, lr}
    8492:	b082      	sub	sp, #8
    8494:	af00      	add	r7, sp, #0
    8496:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8498:	687b      	ldr	r3, [r7, #4]
    849a:	681b      	ldr	r3, [r3, #0]
    849c:	f023 0202 	bic.w	r2, r3, #2
    84a0:	687b      	ldr	r3, [r7, #4]
    84a2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    84a4:	2103      	movs	r1, #3
    84a6:	6878      	ldr	r0, [r7, #4]
    84a8:	4b02      	ldr	r3, [pc, #8]	; (84b4 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    84aa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    84ac:	bf00      	nop
    84ae:	3708      	adds	r7, #8
    84b0:	46bd      	mov	sp, r7
    84b2:	bd80      	pop	{r7, pc}
    84b4:	0000831d 	.word	0x0000831d

000084b8 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    84b8:	b480      	push	{r7}
    84ba:	b085      	sub	sp, #20
    84bc:	af00      	add	r7, sp, #0
    84be:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    84c0:	687b      	ldr	r3, [r7, #4]
    84c2:	681b      	ldr	r3, [r3, #0]
    84c4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    84c6:	68fb      	ldr	r3, [r7, #12]
    84c8:	089b      	lsrs	r3, r3, #2
    84ca:	f003 0303 	and.w	r3, r3, #3
    84ce:	60fb      	str	r3, [r7, #12]
	return tmp;
    84d0:	68fb      	ldr	r3, [r7, #12]
}
    84d2:	4618      	mov	r0, r3
    84d4:	3714      	adds	r7, #20
    84d6:	46bd      	mov	sp, r7
    84d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    84dc:	4770      	bx	lr
	...

000084e0 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    84e0:	b580      	push	{r7, lr}
    84e2:	b084      	sub	sp, #16
    84e4:	af00      	add	r7, sp, #0
    84e6:	6078      	str	r0, [r7, #4]
    84e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    84ea:	2103      	movs	r1, #3
    84ec:	6878      	ldr	r0, [r7, #4]
    84ee:	4b07      	ldr	r3, [pc, #28]	; (850c <hri_tc_get_CTRLA_reg+0x2c>)
    84f0:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    84f2:	687b      	ldr	r3, [r7, #4]
    84f4:	681b      	ldr	r3, [r3, #0]
    84f6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    84f8:	68fa      	ldr	r2, [r7, #12]
    84fa:	683b      	ldr	r3, [r7, #0]
    84fc:	4013      	ands	r3, r2
    84fe:	60fb      	str	r3, [r7, #12]
	return tmp;
    8500:	68fb      	ldr	r3, [r7, #12]
}
    8502:	4618      	mov	r0, r3
    8504:	3710      	adds	r7, #16
    8506:	46bd      	mov	sp, r7
    8508:	bd80      	pop	{r7, pc}
    850a:	bf00      	nop
    850c:	0000831d 	.word	0x0000831d

00008510 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8510:	b580      	push	{r7, lr}
    8512:	b082      	sub	sp, #8
    8514:	af00      	add	r7, sp, #0
    8516:	6078      	str	r0, [r7, #4]
    8518:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    851a:	687b      	ldr	r3, [r7, #4]
    851c:	683a      	ldr	r2, [r7, #0]
    851e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8520:	2103      	movs	r1, #3
    8522:	6878      	ldr	r0, [r7, #4]
    8524:	4b02      	ldr	r3, [pc, #8]	; (8530 <hri_tc_write_CTRLA_reg+0x20>)
    8526:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8528:	bf00      	nop
    852a:	3708      	adds	r7, #8
    852c:	46bd      	mov	sp, r7
    852e:	bd80      	pop	{r7, pc}
    8530:	0000831d 	.word	0x0000831d

00008534 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8534:	b480      	push	{r7}
    8536:	b083      	sub	sp, #12
    8538:	af00      	add	r7, sp, #0
    853a:	6078      	str	r0, [r7, #4]
    853c:	460b      	mov	r3, r1
    853e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8540:	687b      	ldr	r3, [r7, #4]
    8542:	887a      	ldrh	r2, [r7, #2]
    8544:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    8546:	bf00      	nop
    8548:	370c      	adds	r7, #12
    854a:	46bd      	mov	sp, r7
    854c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8550:	4770      	bx	lr

00008552 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    8552:	b480      	push	{r7}
    8554:	b083      	sub	sp, #12
    8556:	af00      	add	r7, sp, #0
    8558:	6078      	str	r0, [r7, #4]
    855a:	460b      	mov	r3, r1
    855c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    855e:	687b      	ldr	r3, [r7, #4]
    8560:	78fa      	ldrb	r2, [r7, #3]
    8562:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    8564:	bf00      	nop
    8566:	370c      	adds	r7, #12
    8568:	46bd      	mov	sp, r7
    856a:	f85d 7b04 	ldr.w	r7, [sp], #4
    856e:	4770      	bx	lr

00008570 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    8570:	b480      	push	{r7}
    8572:	b083      	sub	sp, #12
    8574:	af00      	add	r7, sp, #0
    8576:	6078      	str	r0, [r7, #4]
    8578:	460b      	mov	r3, r1
    857a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    857c:	687b      	ldr	r3, [r7, #4]
    857e:	78fa      	ldrb	r2, [r7, #3]
    8580:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    8582:	bf00      	nop
    8584:	370c      	adds	r7, #12
    8586:	46bd      	mov	sp, r7
    8588:	f85d 7b04 	ldr.w	r7, [sp], #4
    858c:	4770      	bx	lr
	...

00008590 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    8590:	b580      	push	{r7, lr}
    8592:	b082      	sub	sp, #8
    8594:	af00      	add	r7, sp, #0
    8596:	6078      	str	r0, [r7, #4]
    8598:	460b      	mov	r3, r1
    859a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    859c:	687b      	ldr	r3, [r7, #4]
    859e:	78fa      	ldrb	r2, [r7, #3]
    85a0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    85a2:	2120      	movs	r1, #32
    85a4:	6878      	ldr	r0, [r7, #4]
    85a6:	4b03      	ldr	r3, [pc, #12]	; (85b4 <hri_tccount8_write_PER_reg+0x24>)
    85a8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    85aa:	bf00      	nop
    85ac:	3708      	adds	r7, #8
    85ae:	46bd      	mov	sp, r7
    85b0:	bd80      	pop	{r7, pc}
    85b2:	bf00      	nop
    85b4:	0000831d 	.word	0x0000831d

000085b8 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    85b8:	b580      	push	{r7, lr}
    85ba:	b082      	sub	sp, #8
    85bc:	af00      	add	r7, sp, #0
    85be:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    85c0:	2120      	movs	r1, #32
    85c2:	6878      	ldr	r0, [r7, #4]
    85c4:	4b04      	ldr	r3, [pc, #16]	; (85d8 <hri_tccount8_read_PER_reg+0x20>)
    85c6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    85c8:	687b      	ldr	r3, [r7, #4]
    85ca:	7edb      	ldrb	r3, [r3, #27]
    85cc:	b2db      	uxtb	r3, r3
}
    85ce:	4618      	mov	r0, r3
    85d0:	3708      	adds	r7, #8
    85d2:	46bd      	mov	sp, r7
    85d4:	bd80      	pop	{r7, pc}
    85d6:	bf00      	nop
    85d8:	0000831d 	.word	0x0000831d

000085dc <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    85dc:	b580      	push	{r7, lr}
    85de:	b082      	sub	sp, #8
    85e0:	af00      	add	r7, sp, #0
    85e2:	6078      	str	r0, [r7, #4]
    85e4:	460b      	mov	r3, r1
    85e6:	70fb      	strb	r3, [r7, #3]
    85e8:	4613      	mov	r3, r2
    85ea:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    85ec:	78fb      	ldrb	r3, [r7, #3]
    85ee:	687a      	ldr	r2, [r7, #4]
    85f0:	4413      	add	r3, r2
    85f2:	78ba      	ldrb	r2, [r7, #2]
    85f4:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    85f6:	21c0      	movs	r1, #192	; 0xc0
    85f8:	6878      	ldr	r0, [r7, #4]
    85fa:	4b03      	ldr	r3, [pc, #12]	; (8608 <hri_tccount8_write_CC_reg+0x2c>)
    85fc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    85fe:	bf00      	nop
    8600:	3708      	adds	r7, #8
    8602:	46bd      	mov	sp, r7
    8604:	bd80      	pop	{r7, pc}
    8606:	bf00      	nop
    8608:	0000831d 	.word	0x0000831d

0000860c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    860c:	b580      	push	{r7, lr}
    860e:	b082      	sub	sp, #8
    8610:	af00      	add	r7, sp, #0
    8612:	6078      	str	r0, [r7, #4]
    8614:	460b      	mov	r3, r1
    8616:	70fb      	strb	r3, [r7, #3]
    8618:	4613      	mov	r3, r2
    861a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    861c:	78fb      	ldrb	r3, [r7, #3]
    861e:	687a      	ldr	r2, [r7, #4]
    8620:	330c      	adds	r3, #12
    8622:	005b      	lsls	r3, r3, #1
    8624:	4413      	add	r3, r2
    8626:	883a      	ldrh	r2, [r7, #0]
    8628:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    862a:	21c0      	movs	r1, #192	; 0xc0
    862c:	6878      	ldr	r0, [r7, #4]
    862e:	4b03      	ldr	r3, [pc, #12]	; (863c <hri_tccount16_write_CC_reg+0x30>)
    8630:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8632:	bf00      	nop
    8634:	3708      	adds	r7, #8
    8636:	46bd      	mov	sp, r7
    8638:	bd80      	pop	{r7, pc}
    863a:	bf00      	nop
    863c:	0000831d 	.word	0x0000831d

00008640 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8640:	b580      	push	{r7, lr}
    8642:	b082      	sub	sp, #8
    8644:	af00      	add	r7, sp, #0
    8646:	6078      	str	r0, [r7, #4]
    8648:	460b      	mov	r3, r1
    864a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    864c:	21c0      	movs	r1, #192	; 0xc0
    864e:	6878      	ldr	r0, [r7, #4]
    8650:	4b06      	ldr	r3, [pc, #24]	; (866c <hri_tccount16_read_CC_reg+0x2c>)
    8652:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8654:	78fb      	ldrb	r3, [r7, #3]
    8656:	687a      	ldr	r2, [r7, #4]
    8658:	330c      	adds	r3, #12
    865a:	005b      	lsls	r3, r3, #1
    865c:	4413      	add	r3, r2
    865e:	889b      	ldrh	r3, [r3, #4]
    8660:	b29b      	uxth	r3, r3
}
    8662:	4618      	mov	r0, r3
    8664:	3708      	adds	r7, #8
    8666:	46bd      	mov	sp, r7
    8668:	bd80      	pop	{r7, pc}
    866a:	bf00      	nop
    866c:	0000831d 	.word	0x0000831d

00008670 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    8670:	b580      	push	{r7, lr}
    8672:	b084      	sub	sp, #16
    8674:	af00      	add	r7, sp, #0
    8676:	60f8      	str	r0, [r7, #12]
    8678:	460b      	mov	r3, r1
    867a:	607a      	str	r2, [r7, #4]
    867c:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    867e:	7afb      	ldrb	r3, [r7, #11]
    8680:	68fa      	ldr	r2, [r7, #12]
    8682:	3306      	adds	r3, #6
    8684:	009b      	lsls	r3, r3, #2
    8686:	4413      	add	r3, r2
    8688:	687a      	ldr	r2, [r7, #4]
    868a:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    868c:	21c0      	movs	r1, #192	; 0xc0
    868e:	68f8      	ldr	r0, [r7, #12]
    8690:	4b02      	ldr	r3, [pc, #8]	; (869c <hri_tccount32_write_CC_reg+0x2c>)
    8692:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8694:	bf00      	nop
    8696:	3710      	adds	r7, #16
    8698:	46bd      	mov	sp, r7
    869a:	bd80      	pop	{r7, pc}
    869c:	0000831d 	.word	0x0000831d

000086a0 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    86a0:	b580      	push	{r7, lr}
    86a2:	b082      	sub	sp, #8
    86a4:	af00      	add	r7, sp, #0
    86a6:	6078      	str	r0, [r7, #4]
    86a8:	460b      	mov	r3, r1
    86aa:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    86ac:	21c0      	movs	r1, #192	; 0xc0
    86ae:	6878      	ldr	r0, [r7, #4]
    86b0:	4b05      	ldr	r3, [pc, #20]	; (86c8 <hri_tccount32_read_CC_reg+0x28>)
    86b2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    86b4:	78fb      	ldrb	r3, [r7, #3]
    86b6:	687a      	ldr	r2, [r7, #4]
    86b8:	3306      	adds	r3, #6
    86ba:	009b      	lsls	r3, r3, #2
    86bc:	4413      	add	r3, r2
    86be:	685b      	ldr	r3, [r3, #4]
}
    86c0:	4618      	mov	r0, r3
    86c2:	3708      	adds	r7, #8
    86c4:	46bd      	mov	sp, r7
    86c6:	bd80      	pop	{r7, pc}
    86c8:	0000831d 	.word	0x0000831d

000086cc <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    86cc:	b580      	push	{r7, lr}
    86ce:	b084      	sub	sp, #16
    86d0:	af00      	add	r7, sp, #0
    86d2:	6078      	str	r0, [r7, #4]
    86d4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    86d6:	6838      	ldr	r0, [r7, #0]
    86d8:	4b93      	ldr	r3, [pc, #588]	; (8928 <_tc_timer_init+0x25c>)
    86da:	4798      	blx	r3
    86dc:	4603      	mov	r3, r0
    86de:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    86e0:	687b      	ldr	r3, [r7, #4]
    86e2:	683a      	ldr	r2, [r7, #0]
    86e4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    86e6:	22a4      	movs	r2, #164	; 0xa4
    86e8:	4990      	ldr	r1, [pc, #576]	; (892c <_tc_timer_init+0x260>)
    86ea:	2001      	movs	r0, #1
    86ec:	4b90      	ldr	r3, [pc, #576]	; (8930 <_tc_timer_init+0x264>)
    86ee:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    86f0:	2101      	movs	r1, #1
    86f2:	6838      	ldr	r0, [r7, #0]
    86f4:	4b8f      	ldr	r3, [pc, #572]	; (8934 <_tc_timer_init+0x268>)
    86f6:	4798      	blx	r3
    86f8:	4603      	mov	r3, r0
    86fa:	f083 0301 	eor.w	r3, r3, #1
    86fe:	b2db      	uxtb	r3, r3
    8700:	2b00      	cmp	r3, #0
    8702:	d011      	beq.n	8728 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8704:	2102      	movs	r1, #2
    8706:	6838      	ldr	r0, [r7, #0]
    8708:	4b8b      	ldr	r3, [pc, #556]	; (8938 <_tc_timer_init+0x26c>)
    870a:	4798      	blx	r3
    870c:	4603      	mov	r3, r0
    870e:	2b00      	cmp	r3, #0
    8710:	d006      	beq.n	8720 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8712:	6838      	ldr	r0, [r7, #0]
    8714:	4b89      	ldr	r3, [pc, #548]	; (893c <_tc_timer_init+0x270>)
    8716:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8718:	2102      	movs	r1, #2
    871a:	6838      	ldr	r0, [r7, #0]
    871c:	4b88      	ldr	r3, [pc, #544]	; (8940 <_tc_timer_init+0x274>)
    871e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8720:	2101      	movs	r1, #1
    8722:	6838      	ldr	r0, [r7, #0]
    8724:	4b87      	ldr	r3, [pc, #540]	; (8944 <_tc_timer_init+0x278>)
    8726:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8728:	2101      	movs	r1, #1
    872a:	6838      	ldr	r0, [r7, #0]
    872c:	4b84      	ldr	r3, [pc, #528]	; (8940 <_tc_timer_init+0x274>)
    872e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8730:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8734:	4984      	ldr	r1, [pc, #528]	; (8948 <_tc_timer_init+0x27c>)
    8736:	4613      	mov	r3, r2
    8738:	009b      	lsls	r3, r3, #2
    873a:	4413      	add	r3, r2
    873c:	009b      	lsls	r3, r3, #2
    873e:	440b      	add	r3, r1
    8740:	3304      	adds	r3, #4
    8742:	681b      	ldr	r3, [r3, #0]
    8744:	4619      	mov	r1, r3
    8746:	6838      	ldr	r0, [r7, #0]
    8748:	4b7e      	ldr	r3, [pc, #504]	; (8944 <_tc_timer_init+0x278>)
    874a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    874c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8750:	497d      	ldr	r1, [pc, #500]	; (8948 <_tc_timer_init+0x27c>)
    8752:	4613      	mov	r3, r2
    8754:	009b      	lsls	r3, r3, #2
    8756:	4413      	add	r3, r2
    8758:	009b      	lsls	r3, r3, #2
    875a:	440b      	add	r3, r1
    875c:	330a      	adds	r3, #10
    875e:	781b      	ldrb	r3, [r3, #0]
    8760:	4619      	mov	r1, r3
    8762:	6838      	ldr	r0, [r7, #0]
    8764:	4b79      	ldr	r3, [pc, #484]	; (894c <_tc_timer_init+0x280>)
    8766:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8768:	f997 200f 	ldrsb.w	r2, [r7, #15]
    876c:	4976      	ldr	r1, [pc, #472]	; (8948 <_tc_timer_init+0x27c>)
    876e:	4613      	mov	r3, r2
    8770:	009b      	lsls	r3, r3, #2
    8772:	4413      	add	r3, r2
    8774:	009b      	lsls	r3, r3, #2
    8776:	440b      	add	r3, r1
    8778:	3308      	adds	r3, #8
    877a:	881b      	ldrh	r3, [r3, #0]
    877c:	4619      	mov	r1, r3
    877e:	6838      	ldr	r0, [r7, #0]
    8780:	4b73      	ldr	r3, [pc, #460]	; (8950 <_tc_timer_init+0x284>)
    8782:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    8784:	2101      	movs	r1, #1
    8786:	6838      	ldr	r0, [r7, #0]
    8788:	4b72      	ldr	r3, [pc, #456]	; (8954 <_tc_timer_init+0x288>)
    878a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    878c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8790:	496d      	ldr	r1, [pc, #436]	; (8948 <_tc_timer_init+0x27c>)
    8792:	4613      	mov	r3, r2
    8794:	009b      	lsls	r3, r3, #2
    8796:	4413      	add	r3, r2
    8798:	009b      	lsls	r3, r3, #2
    879a:	440b      	add	r3, r1
    879c:	3304      	adds	r3, #4
    879e:	681b      	ldr	r3, [r3, #0]
    87a0:	f003 030c 	and.w	r3, r3, #12
    87a4:	2b08      	cmp	r3, #8
    87a6:	d11e      	bne.n	87e6 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    87a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87ac:	4966      	ldr	r1, [pc, #408]	; (8948 <_tc_timer_init+0x27c>)
    87ae:	4613      	mov	r3, r2
    87b0:	009b      	lsls	r3, r3, #2
    87b2:	4413      	add	r3, r2
    87b4:	009b      	lsls	r3, r3, #2
    87b6:	440b      	add	r3, r1
    87b8:	330c      	adds	r3, #12
    87ba:	681b      	ldr	r3, [r3, #0]
    87bc:	461a      	mov	r2, r3
    87be:	2100      	movs	r1, #0
    87c0:	6838      	ldr	r0, [r7, #0]
    87c2:	4b65      	ldr	r3, [pc, #404]	; (8958 <_tc_timer_init+0x28c>)
    87c4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    87c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87ca:	495f      	ldr	r1, [pc, #380]	; (8948 <_tc_timer_init+0x27c>)
    87cc:	4613      	mov	r3, r2
    87ce:	009b      	lsls	r3, r3, #2
    87d0:	4413      	add	r3, r2
    87d2:	009b      	lsls	r3, r3, #2
    87d4:	440b      	add	r3, r1
    87d6:	3310      	adds	r3, #16
    87d8:	681b      	ldr	r3, [r3, #0]
    87da:	461a      	mov	r2, r3
    87dc:	2101      	movs	r1, #1
    87de:	6838      	ldr	r0, [r7, #0]
    87e0:	4b5d      	ldr	r3, [pc, #372]	; (8958 <_tc_timer_init+0x28c>)
    87e2:	4798      	blx	r3
    87e4:	e06a      	b.n	88bc <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    87e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87ea:	4957      	ldr	r1, [pc, #348]	; (8948 <_tc_timer_init+0x27c>)
    87ec:	4613      	mov	r3, r2
    87ee:	009b      	lsls	r3, r3, #2
    87f0:	4413      	add	r3, r2
    87f2:	009b      	lsls	r3, r3, #2
    87f4:	440b      	add	r3, r1
    87f6:	3304      	adds	r3, #4
    87f8:	681b      	ldr	r3, [r3, #0]
    87fa:	f003 030c 	and.w	r3, r3, #12
    87fe:	2b00      	cmp	r3, #0
    8800:	d120      	bne.n	8844 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8802:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8806:	4950      	ldr	r1, [pc, #320]	; (8948 <_tc_timer_init+0x27c>)
    8808:	4613      	mov	r3, r2
    880a:	009b      	lsls	r3, r3, #2
    880c:	4413      	add	r3, r2
    880e:	009b      	lsls	r3, r3, #2
    8810:	440b      	add	r3, r1
    8812:	330c      	adds	r3, #12
    8814:	681b      	ldr	r3, [r3, #0]
    8816:	b29b      	uxth	r3, r3
    8818:	461a      	mov	r2, r3
    881a:	2100      	movs	r1, #0
    881c:	6838      	ldr	r0, [r7, #0]
    881e:	4b4f      	ldr	r3, [pc, #316]	; (895c <_tc_timer_init+0x290>)
    8820:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8822:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8826:	4948      	ldr	r1, [pc, #288]	; (8948 <_tc_timer_init+0x27c>)
    8828:	4613      	mov	r3, r2
    882a:	009b      	lsls	r3, r3, #2
    882c:	4413      	add	r3, r2
    882e:	009b      	lsls	r3, r3, #2
    8830:	440b      	add	r3, r1
    8832:	3310      	adds	r3, #16
    8834:	681b      	ldr	r3, [r3, #0]
    8836:	b29b      	uxth	r3, r3
    8838:	461a      	mov	r2, r3
    883a:	2101      	movs	r1, #1
    883c:	6838      	ldr	r0, [r7, #0]
    883e:	4b47      	ldr	r3, [pc, #284]	; (895c <_tc_timer_init+0x290>)
    8840:	4798      	blx	r3
    8842:	e03b      	b.n	88bc <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8844:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8848:	493f      	ldr	r1, [pc, #252]	; (8948 <_tc_timer_init+0x27c>)
    884a:	4613      	mov	r3, r2
    884c:	009b      	lsls	r3, r3, #2
    884e:	4413      	add	r3, r2
    8850:	009b      	lsls	r3, r3, #2
    8852:	440b      	add	r3, r1
    8854:	3304      	adds	r3, #4
    8856:	681b      	ldr	r3, [r3, #0]
    8858:	f003 030c 	and.w	r3, r3, #12
    885c:	2b04      	cmp	r3, #4
    885e:	d12d      	bne.n	88bc <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8860:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8864:	4938      	ldr	r1, [pc, #224]	; (8948 <_tc_timer_init+0x27c>)
    8866:	4613      	mov	r3, r2
    8868:	009b      	lsls	r3, r3, #2
    886a:	4413      	add	r3, r2
    886c:	009b      	lsls	r3, r3, #2
    886e:	440b      	add	r3, r1
    8870:	330c      	adds	r3, #12
    8872:	681b      	ldr	r3, [r3, #0]
    8874:	b2db      	uxtb	r3, r3
    8876:	461a      	mov	r2, r3
    8878:	2100      	movs	r1, #0
    887a:	6838      	ldr	r0, [r7, #0]
    887c:	4b38      	ldr	r3, [pc, #224]	; (8960 <_tc_timer_init+0x294>)
    887e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    8880:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8884:	4930      	ldr	r1, [pc, #192]	; (8948 <_tc_timer_init+0x27c>)
    8886:	4613      	mov	r3, r2
    8888:	009b      	lsls	r3, r3, #2
    888a:	4413      	add	r3, r2
    888c:	009b      	lsls	r3, r3, #2
    888e:	440b      	add	r3, r1
    8890:	3310      	adds	r3, #16
    8892:	681b      	ldr	r3, [r3, #0]
    8894:	b2db      	uxtb	r3, r3
    8896:	461a      	mov	r2, r3
    8898:	2101      	movs	r1, #1
    889a:	6838      	ldr	r0, [r7, #0]
    889c:	4b30      	ldr	r3, [pc, #192]	; (8960 <_tc_timer_init+0x294>)
    889e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    88a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88a4:	4928      	ldr	r1, [pc, #160]	; (8948 <_tc_timer_init+0x27c>)
    88a6:	4613      	mov	r3, r2
    88a8:	009b      	lsls	r3, r3, #2
    88aa:	4413      	add	r3, r2
    88ac:	009b      	lsls	r3, r3, #2
    88ae:	440b      	add	r3, r1
    88b0:	330b      	adds	r3, #11
    88b2:	781b      	ldrb	r3, [r3, #0]
    88b4:	4619      	mov	r1, r3
    88b6:	6838      	ldr	r0, [r7, #0]
    88b8:	4b2a      	ldr	r3, [pc, #168]	; (8964 <_tc_timer_init+0x298>)
    88ba:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    88bc:	6838      	ldr	r0, [r7, #0]
    88be:	4b2a      	ldr	r3, [pc, #168]	; (8968 <_tc_timer_init+0x29c>)
    88c0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    88c2:	6879      	ldr	r1, [r7, #4]
    88c4:	6838      	ldr	r0, [r7, #0]
    88c6:	4b29      	ldr	r3, [pc, #164]	; (896c <_tc_timer_init+0x2a0>)
    88c8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    88ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88ce:	491e      	ldr	r1, [pc, #120]	; (8948 <_tc_timer_init+0x27c>)
    88d0:	4613      	mov	r3, r2
    88d2:	009b      	lsls	r3, r3, #2
    88d4:	4413      	add	r3, r2
    88d6:	009b      	lsls	r3, r3, #2
    88d8:	440b      	add	r3, r1
    88da:	3302      	adds	r3, #2
    88dc:	f9b3 3000 	ldrsh.w	r3, [r3]
    88e0:	4618      	mov	r0, r3
    88e2:	4b23      	ldr	r3, [pc, #140]	; (8970 <_tc_timer_init+0x2a4>)
    88e4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    88e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88ea:	4917      	ldr	r1, [pc, #92]	; (8948 <_tc_timer_init+0x27c>)
    88ec:	4613      	mov	r3, r2
    88ee:	009b      	lsls	r3, r3, #2
    88f0:	4413      	add	r3, r2
    88f2:	009b      	lsls	r3, r3, #2
    88f4:	440b      	add	r3, r1
    88f6:	3302      	adds	r3, #2
    88f8:	f9b3 3000 	ldrsh.w	r3, [r3]
    88fc:	4618      	mov	r0, r3
    88fe:	4b1d      	ldr	r3, [pc, #116]	; (8974 <_tc_timer_init+0x2a8>)
    8900:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8902:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8906:	4910      	ldr	r1, [pc, #64]	; (8948 <_tc_timer_init+0x27c>)
    8908:	4613      	mov	r3, r2
    890a:	009b      	lsls	r3, r3, #2
    890c:	4413      	add	r3, r2
    890e:	009b      	lsls	r3, r3, #2
    8910:	440b      	add	r3, r1
    8912:	3302      	adds	r3, #2
    8914:	f9b3 3000 	ldrsh.w	r3, [r3]
    8918:	4618      	mov	r0, r3
    891a:	4b17      	ldr	r3, [pc, #92]	; (8978 <_tc_timer_init+0x2ac>)
    891c:	4798      	blx	r3

	return ERR_NONE;
    891e:	2300      	movs	r3, #0
}
    8920:	4618      	mov	r0, r3
    8922:	3710      	adds	r7, #16
    8924:	46bd      	mov	sp, r7
    8926:	bd80      	pop	{r7, pc}
    8928:	00008f1d 	.word	0x00008f1d
    892c:	00014980 	.word	0x00014980
    8930:	00004211 	.word	0x00004211
    8934:	00008341 	.word	0x00008341
    8938:	000084e1 	.word	0x000084e1
    893c:	00008491 	.word	0x00008491
    8940:	0000831d 	.word	0x0000831d
    8944:	00008511 	.word	0x00008511
    8948:	20000110 	.word	0x20000110
    894c:	00008571 	.word	0x00008571
    8950:	00008535 	.word	0x00008535
    8954:	00008553 	.word	0x00008553
    8958:	00008671 	.word	0x00008671
    895c:	0000860d 	.word	0x0000860d
    8960:	000085dd 	.word	0x000085dd
    8964:	00008591 	.word	0x00008591
    8968:	000083c5 	.word	0x000083c5
    896c:	00008f85 	.word	0x00008f85
    8970:	0000829d 	.word	0x0000829d
    8974:	000082e1 	.word	0x000082e1
    8978:	00008261 	.word	0x00008261

0000897c <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    897c:	b580      	push	{r7, lr}
    897e:	b084      	sub	sp, #16
    8980:	af00      	add	r7, sp, #0
    8982:	6078      	str	r0, [r7, #4]
    8984:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    8986:	6838      	ldr	r0, [r7, #0]
    8988:	4b73      	ldr	r3, [pc, #460]	; (8b58 <_pwm_init+0x1dc>)
    898a:	4798      	blx	r3
    898c:	4603      	mov	r3, r0
    898e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    8990:	687b      	ldr	r3, [r7, #4]
    8992:	683a      	ldr	r2, [r7, #0]
    8994:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8996:	2101      	movs	r1, #1
    8998:	6838      	ldr	r0, [r7, #0]
    899a:	4b70      	ldr	r3, [pc, #448]	; (8b5c <_pwm_init+0x1e0>)
    899c:	4798      	blx	r3
    899e:	4603      	mov	r3, r0
    89a0:	f083 0301 	eor.w	r3, r3, #1
    89a4:	b2db      	uxtb	r3, r3
    89a6:	2b00      	cmp	r3, #0
    89a8:	d011      	beq.n	89ce <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    89aa:	2102      	movs	r1, #2
    89ac:	6838      	ldr	r0, [r7, #0]
    89ae:	4b6c      	ldr	r3, [pc, #432]	; (8b60 <_pwm_init+0x1e4>)
    89b0:	4798      	blx	r3
    89b2:	4603      	mov	r3, r0
    89b4:	2b00      	cmp	r3, #0
    89b6:	d006      	beq.n	89c6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    89b8:	6838      	ldr	r0, [r7, #0]
    89ba:	4b6a      	ldr	r3, [pc, #424]	; (8b64 <_pwm_init+0x1e8>)
    89bc:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    89be:	2102      	movs	r1, #2
    89c0:	6838      	ldr	r0, [r7, #0]
    89c2:	4b69      	ldr	r3, [pc, #420]	; (8b68 <_pwm_init+0x1ec>)
    89c4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    89c6:	2101      	movs	r1, #1
    89c8:	6838      	ldr	r0, [r7, #0]
    89ca:	4b68      	ldr	r3, [pc, #416]	; (8b6c <_pwm_init+0x1f0>)
    89cc:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    89ce:	2101      	movs	r1, #1
    89d0:	6838      	ldr	r0, [r7, #0]
    89d2:	4b65      	ldr	r3, [pc, #404]	; (8b68 <_pwm_init+0x1ec>)
    89d4:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    89d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89da:	4965      	ldr	r1, [pc, #404]	; (8b70 <_pwm_init+0x1f4>)
    89dc:	4613      	mov	r3, r2
    89de:	009b      	lsls	r3, r3, #2
    89e0:	4413      	add	r3, r2
    89e2:	009b      	lsls	r3, r3, #2
    89e4:	440b      	add	r3, r1
    89e6:	3304      	adds	r3, #4
    89e8:	681b      	ldr	r3, [r3, #0]
    89ea:	4619      	mov	r1, r3
    89ec:	6838      	ldr	r0, [r7, #0]
    89ee:	4b5f      	ldr	r3, [pc, #380]	; (8b6c <_pwm_init+0x1f0>)
    89f0:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    89f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89f6:	495e      	ldr	r1, [pc, #376]	; (8b70 <_pwm_init+0x1f4>)
    89f8:	4613      	mov	r3, r2
    89fa:	009b      	lsls	r3, r3, #2
    89fc:	4413      	add	r3, r2
    89fe:	009b      	lsls	r3, r3, #2
    8a00:	440b      	add	r3, r1
    8a02:	330a      	adds	r3, #10
    8a04:	781b      	ldrb	r3, [r3, #0]
    8a06:	4619      	mov	r1, r3
    8a08:	6838      	ldr	r0, [r7, #0]
    8a0a:	4b5a      	ldr	r3, [pc, #360]	; (8b74 <_pwm_init+0x1f8>)
    8a0c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8a0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a12:	4957      	ldr	r1, [pc, #348]	; (8b70 <_pwm_init+0x1f4>)
    8a14:	4613      	mov	r3, r2
    8a16:	009b      	lsls	r3, r3, #2
    8a18:	4413      	add	r3, r2
    8a1a:	009b      	lsls	r3, r3, #2
    8a1c:	440b      	add	r3, r1
    8a1e:	3308      	adds	r3, #8
    8a20:	881b      	ldrh	r3, [r3, #0]
    8a22:	4619      	mov	r1, r3
    8a24:	6838      	ldr	r0, [r7, #0]
    8a26:	4b54      	ldr	r3, [pc, #336]	; (8b78 <_pwm_init+0x1fc>)
    8a28:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    8a2a:	2103      	movs	r1, #3
    8a2c:	6838      	ldr	r0, [r7, #0]
    8a2e:	4b53      	ldr	r3, [pc, #332]	; (8b7c <_pwm_init+0x200>)
    8a30:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8a32:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a36:	494e      	ldr	r1, [pc, #312]	; (8b70 <_pwm_init+0x1f4>)
    8a38:	4613      	mov	r3, r2
    8a3a:	009b      	lsls	r3, r3, #2
    8a3c:	4413      	add	r3, r2
    8a3e:	009b      	lsls	r3, r3, #2
    8a40:	440b      	add	r3, r1
    8a42:	3304      	adds	r3, #4
    8a44:	681b      	ldr	r3, [r3, #0]
    8a46:	f003 030c 	and.w	r3, r3, #12
    8a4a:	2b08      	cmp	r3, #8
    8a4c:	d11e      	bne.n	8a8c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8a4e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a52:	4947      	ldr	r1, [pc, #284]	; (8b70 <_pwm_init+0x1f4>)
    8a54:	4613      	mov	r3, r2
    8a56:	009b      	lsls	r3, r3, #2
    8a58:	4413      	add	r3, r2
    8a5a:	009b      	lsls	r3, r3, #2
    8a5c:	440b      	add	r3, r1
    8a5e:	330c      	adds	r3, #12
    8a60:	681b      	ldr	r3, [r3, #0]
    8a62:	461a      	mov	r2, r3
    8a64:	2100      	movs	r1, #0
    8a66:	6838      	ldr	r0, [r7, #0]
    8a68:	4b45      	ldr	r3, [pc, #276]	; (8b80 <_pwm_init+0x204>)
    8a6a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8a6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a70:	493f      	ldr	r1, [pc, #252]	; (8b70 <_pwm_init+0x1f4>)
    8a72:	4613      	mov	r3, r2
    8a74:	009b      	lsls	r3, r3, #2
    8a76:	4413      	add	r3, r2
    8a78:	009b      	lsls	r3, r3, #2
    8a7a:	440b      	add	r3, r1
    8a7c:	3310      	adds	r3, #16
    8a7e:	681b      	ldr	r3, [r3, #0]
    8a80:	461a      	mov	r2, r3
    8a82:	2101      	movs	r1, #1
    8a84:	6838      	ldr	r0, [r7, #0]
    8a86:	4b3e      	ldr	r3, [pc, #248]	; (8b80 <_pwm_init+0x204>)
    8a88:	4798      	blx	r3
    8a8a:	e031      	b.n	8af0 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8a8c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a90:	4937      	ldr	r1, [pc, #220]	; (8b70 <_pwm_init+0x1f4>)
    8a92:	4613      	mov	r3, r2
    8a94:	009b      	lsls	r3, r3, #2
    8a96:	4413      	add	r3, r2
    8a98:	009b      	lsls	r3, r3, #2
    8a9a:	440b      	add	r3, r1
    8a9c:	3304      	adds	r3, #4
    8a9e:	681b      	ldr	r3, [r3, #0]
    8aa0:	f003 030c 	and.w	r3, r3, #12
    8aa4:	2b00      	cmp	r3, #0
    8aa6:	d120      	bne.n	8aea <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8aa8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8aac:	4930      	ldr	r1, [pc, #192]	; (8b70 <_pwm_init+0x1f4>)
    8aae:	4613      	mov	r3, r2
    8ab0:	009b      	lsls	r3, r3, #2
    8ab2:	4413      	add	r3, r2
    8ab4:	009b      	lsls	r3, r3, #2
    8ab6:	440b      	add	r3, r1
    8ab8:	330c      	adds	r3, #12
    8aba:	681b      	ldr	r3, [r3, #0]
    8abc:	b29b      	uxth	r3, r3
    8abe:	461a      	mov	r2, r3
    8ac0:	2100      	movs	r1, #0
    8ac2:	6838      	ldr	r0, [r7, #0]
    8ac4:	4b2f      	ldr	r3, [pc, #188]	; (8b84 <_pwm_init+0x208>)
    8ac6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8ac8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8acc:	4928      	ldr	r1, [pc, #160]	; (8b70 <_pwm_init+0x1f4>)
    8ace:	4613      	mov	r3, r2
    8ad0:	009b      	lsls	r3, r3, #2
    8ad2:	4413      	add	r3, r2
    8ad4:	009b      	lsls	r3, r3, #2
    8ad6:	440b      	add	r3, r1
    8ad8:	3310      	adds	r3, #16
    8ada:	681b      	ldr	r3, [r3, #0]
    8adc:	b29b      	uxth	r3, r3
    8ade:	461a      	mov	r2, r3
    8ae0:	2101      	movs	r1, #1
    8ae2:	6838      	ldr	r0, [r7, #0]
    8ae4:	4b27      	ldr	r3, [pc, #156]	; (8b84 <_pwm_init+0x208>)
    8ae6:	4798      	blx	r3
    8ae8:	e002      	b.n	8af0 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    8aea:	f04f 33ff 	mov.w	r3, #4294967295
    8aee:	e02e      	b.n	8b4e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8af0:	6879      	ldr	r1, [r7, #4]
    8af2:	6838      	ldr	r0, [r7, #0]
    8af4:	4b24      	ldr	r3, [pc, #144]	; (8b88 <_pwm_init+0x20c>)
    8af6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8af8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8afc:	491c      	ldr	r1, [pc, #112]	; (8b70 <_pwm_init+0x1f4>)
    8afe:	4613      	mov	r3, r2
    8b00:	009b      	lsls	r3, r3, #2
    8b02:	4413      	add	r3, r2
    8b04:	009b      	lsls	r3, r3, #2
    8b06:	440b      	add	r3, r1
    8b08:	3302      	adds	r3, #2
    8b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
    8b0e:	4618      	mov	r0, r3
    8b10:	4b1e      	ldr	r3, [pc, #120]	; (8b8c <_pwm_init+0x210>)
    8b12:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8b14:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b18:	4915      	ldr	r1, [pc, #84]	; (8b70 <_pwm_init+0x1f4>)
    8b1a:	4613      	mov	r3, r2
    8b1c:	009b      	lsls	r3, r3, #2
    8b1e:	4413      	add	r3, r2
    8b20:	009b      	lsls	r3, r3, #2
    8b22:	440b      	add	r3, r1
    8b24:	3302      	adds	r3, #2
    8b26:	f9b3 3000 	ldrsh.w	r3, [r3]
    8b2a:	4618      	mov	r0, r3
    8b2c:	4b18      	ldr	r3, [pc, #96]	; (8b90 <_pwm_init+0x214>)
    8b2e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8b30:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b34:	490e      	ldr	r1, [pc, #56]	; (8b70 <_pwm_init+0x1f4>)
    8b36:	4613      	mov	r3, r2
    8b38:	009b      	lsls	r3, r3, #2
    8b3a:	4413      	add	r3, r2
    8b3c:	009b      	lsls	r3, r3, #2
    8b3e:	440b      	add	r3, r1
    8b40:	3302      	adds	r3, #2
    8b42:	f9b3 3000 	ldrsh.w	r3, [r3]
    8b46:	4618      	mov	r0, r3
    8b48:	4b12      	ldr	r3, [pc, #72]	; (8b94 <_pwm_init+0x218>)
    8b4a:	4798      	blx	r3

	return 0;
    8b4c:	2300      	movs	r3, #0
}
    8b4e:	4618      	mov	r0, r3
    8b50:	3710      	adds	r7, #16
    8b52:	46bd      	mov	sp, r7
    8b54:	bd80      	pop	{r7, pc}
    8b56:	bf00      	nop
    8b58:	00008f1d 	.word	0x00008f1d
    8b5c:	00008341 	.word	0x00008341
    8b60:	000084e1 	.word	0x000084e1
    8b64:	00008491 	.word	0x00008491
    8b68:	0000831d 	.word	0x0000831d
    8b6c:	00008511 	.word	0x00008511
    8b70:	20000110 	.word	0x20000110
    8b74:	00008571 	.word	0x00008571
    8b78:	00008535 	.word	0x00008535
    8b7c:	00008553 	.word	0x00008553
    8b80:	00008671 	.word	0x00008671
    8b84:	0000860d 	.word	0x0000860d
    8b88:	00008f85 	.word	0x00008f85
    8b8c:	0000829d 	.word	0x0000829d
    8b90:	000082e1 	.word	0x000082e1
    8b94:	00008261 	.word	0x00008261

00008b98 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8b98:	b580      	push	{r7, lr}
    8b9a:	b084      	sub	sp, #16
    8b9c:	af00      	add	r7, sp, #0
    8b9e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8ba0:	687b      	ldr	r3, [r7, #4]
    8ba2:	68db      	ldr	r3, [r3, #12]
    8ba4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8ba6:	68f8      	ldr	r0, [r7, #12]
    8ba8:	4b10      	ldr	r3, [pc, #64]	; (8bec <_tc_timer_deinit+0x54>)
    8baa:	4798      	blx	r3
    8bac:	4603      	mov	r3, r0
    8bae:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8bb0:	22f9      	movs	r2, #249	; 0xf9
    8bb2:	490f      	ldr	r1, [pc, #60]	; (8bf0 <_tc_timer_deinit+0x58>)
    8bb4:	2001      	movs	r0, #1
    8bb6:	4b0f      	ldr	r3, [pc, #60]	; (8bf4 <_tc_timer_deinit+0x5c>)
    8bb8:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    8bba:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8bbe:	490e      	ldr	r1, [pc, #56]	; (8bf8 <_tc_timer_deinit+0x60>)
    8bc0:	4613      	mov	r3, r2
    8bc2:	009b      	lsls	r3, r3, #2
    8bc4:	4413      	add	r3, r2
    8bc6:	009b      	lsls	r3, r3, #2
    8bc8:	440b      	add	r3, r1
    8bca:	3302      	adds	r3, #2
    8bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
    8bd0:	4618      	mov	r0, r3
    8bd2:	4b0a      	ldr	r3, [pc, #40]	; (8bfc <_tc_timer_deinit+0x64>)
    8bd4:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8bd6:	68f8      	ldr	r0, [r7, #12]
    8bd8:	4b09      	ldr	r3, [pc, #36]	; (8c00 <_tc_timer_deinit+0x68>)
    8bda:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8bdc:	68f8      	ldr	r0, [r7, #12]
    8bde:	4b09      	ldr	r3, [pc, #36]	; (8c04 <_tc_timer_deinit+0x6c>)
    8be0:	4798      	blx	r3
}
    8be2:	bf00      	nop
    8be4:	3710      	adds	r7, #16
    8be6:	46bd      	mov	sp, r7
    8be8:	bd80      	pop	{r7, pc}
    8bea:	bf00      	nop
    8bec:	00008f1d 	.word	0x00008f1d
    8bf0:	00014980 	.word	0x00014980
    8bf4:	00004211 	.word	0x00004211
    8bf8:	20000110 	.word	0x20000110
    8bfc:	0000829d 	.word	0x0000829d
    8c00:	00008491 	.word	0x00008491
    8c04:	00008409 	.word	0x00008409

00008c08 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8c08:	b580      	push	{r7, lr}
    8c0a:	b082      	sub	sp, #8
    8c0c:	af00      	add	r7, sp, #0
    8c0e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8c10:	687b      	ldr	r3, [r7, #4]
    8c12:	68db      	ldr	r3, [r3, #12]
    8c14:	4618      	mov	r0, r3
    8c16:	4b03      	ldr	r3, [pc, #12]	; (8c24 <_tc_timer_start+0x1c>)
    8c18:	4798      	blx	r3
}
    8c1a:	bf00      	nop
    8c1c:	3708      	adds	r7, #8
    8c1e:	46bd      	mov	sp, r7
    8c20:	bd80      	pop	{r7, pc}
    8c22:	bf00      	nop
    8c24:	00008431 	.word	0x00008431

00008c28 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8c28:	b580      	push	{r7, lr}
    8c2a:	b082      	sub	sp, #8
    8c2c:	af00      	add	r7, sp, #0
    8c2e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8c30:	687b      	ldr	r3, [r7, #4]
    8c32:	68db      	ldr	r3, [r3, #12]
    8c34:	4618      	mov	r0, r3
    8c36:	4b03      	ldr	r3, [pc, #12]	; (8c44 <_tc_timer_stop+0x1c>)
    8c38:	4798      	blx	r3
}
    8c3a:	bf00      	nop
    8c3c:	3708      	adds	r7, #8
    8c3e:	46bd      	mov	sp, r7
    8c40:	bd80      	pop	{r7, pc}
    8c42:	bf00      	nop
    8c44:	00008491 	.word	0x00008491

00008c48 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8c48:	b580      	push	{r7, lr}
    8c4a:	b084      	sub	sp, #16
    8c4c:	af00      	add	r7, sp, #0
    8c4e:	6078      	str	r0, [r7, #4]
    8c50:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8c52:	687b      	ldr	r3, [r7, #4]
    8c54:	68db      	ldr	r3, [r3, #12]
    8c56:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8c58:	68f8      	ldr	r0, [r7, #12]
    8c5a:	4b14      	ldr	r3, [pc, #80]	; (8cac <_tc_timer_set_period+0x64>)
    8c5c:	4798      	blx	r3
    8c5e:	4603      	mov	r3, r0
    8c60:	2b02      	cmp	r3, #2
    8c62:	d105      	bne.n	8c70 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8c64:	683a      	ldr	r2, [r7, #0]
    8c66:	2100      	movs	r1, #0
    8c68:	68f8      	ldr	r0, [r7, #12]
    8c6a:	4b11      	ldr	r3, [pc, #68]	; (8cb0 <_tc_timer_set_period+0x68>)
    8c6c:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8c6e:	e019      	b.n	8ca4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8c70:	68f8      	ldr	r0, [r7, #12]
    8c72:	4b0e      	ldr	r3, [pc, #56]	; (8cac <_tc_timer_set_period+0x64>)
    8c74:	4798      	blx	r3
    8c76:	4603      	mov	r3, r0
    8c78:	2b00      	cmp	r3, #0
    8c7a:	d107      	bne.n	8c8c <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8c7c:	683b      	ldr	r3, [r7, #0]
    8c7e:	b29b      	uxth	r3, r3
    8c80:	461a      	mov	r2, r3
    8c82:	2100      	movs	r1, #0
    8c84:	68f8      	ldr	r0, [r7, #12]
    8c86:	4b0b      	ldr	r3, [pc, #44]	; (8cb4 <_tc_timer_set_period+0x6c>)
    8c88:	4798      	blx	r3
}
    8c8a:	e00b      	b.n	8ca4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8c8c:	68f8      	ldr	r0, [r7, #12]
    8c8e:	4b07      	ldr	r3, [pc, #28]	; (8cac <_tc_timer_set_period+0x64>)
    8c90:	4798      	blx	r3
    8c92:	4603      	mov	r3, r0
    8c94:	2b01      	cmp	r3, #1
    8c96:	d105      	bne.n	8ca4 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8c98:	683b      	ldr	r3, [r7, #0]
    8c9a:	b2db      	uxtb	r3, r3
    8c9c:	4619      	mov	r1, r3
    8c9e:	68f8      	ldr	r0, [r7, #12]
    8ca0:	4b05      	ldr	r3, [pc, #20]	; (8cb8 <_tc_timer_set_period+0x70>)
    8ca2:	4798      	blx	r3
}
    8ca4:	bf00      	nop
    8ca6:	3710      	adds	r7, #16
    8ca8:	46bd      	mov	sp, r7
    8caa:	bd80      	pop	{r7, pc}
    8cac:	000084b9 	.word	0x000084b9
    8cb0:	00008671 	.word	0x00008671
    8cb4:	0000860d 	.word	0x0000860d
    8cb8:	00008591 	.word	0x00008591

00008cbc <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8cbc:	b580      	push	{r7, lr}
    8cbe:	b084      	sub	sp, #16
    8cc0:	af00      	add	r7, sp, #0
    8cc2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8cc4:	687b      	ldr	r3, [r7, #4]
    8cc6:	68db      	ldr	r3, [r3, #12]
    8cc8:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8cca:	68f8      	ldr	r0, [r7, #12]
    8ccc:	4b13      	ldr	r3, [pc, #76]	; (8d1c <_tc_timer_get_period+0x60>)
    8cce:	4798      	blx	r3
    8cd0:	4603      	mov	r3, r0
    8cd2:	2b02      	cmp	r3, #2
    8cd4:	d105      	bne.n	8ce2 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8cd6:	2100      	movs	r1, #0
    8cd8:	68f8      	ldr	r0, [r7, #12]
    8cda:	4b11      	ldr	r3, [pc, #68]	; (8d20 <_tc_timer_get_period+0x64>)
    8cdc:	4798      	blx	r3
    8cde:	4603      	mov	r3, r0
    8ce0:	e017      	b.n	8d12 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8ce2:	68f8      	ldr	r0, [r7, #12]
    8ce4:	4b0d      	ldr	r3, [pc, #52]	; (8d1c <_tc_timer_get_period+0x60>)
    8ce6:	4798      	blx	r3
    8ce8:	4603      	mov	r3, r0
    8cea:	2b00      	cmp	r3, #0
    8cec:	d105      	bne.n	8cfa <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8cee:	2100      	movs	r1, #0
    8cf0:	68f8      	ldr	r0, [r7, #12]
    8cf2:	4b0c      	ldr	r3, [pc, #48]	; (8d24 <_tc_timer_get_period+0x68>)
    8cf4:	4798      	blx	r3
    8cf6:	4603      	mov	r3, r0
    8cf8:	e00b      	b.n	8d12 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8cfa:	68f8      	ldr	r0, [r7, #12]
    8cfc:	4b07      	ldr	r3, [pc, #28]	; (8d1c <_tc_timer_get_period+0x60>)
    8cfe:	4798      	blx	r3
    8d00:	4603      	mov	r3, r0
    8d02:	2b01      	cmp	r3, #1
    8d04:	d104      	bne.n	8d10 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8d06:	68f8      	ldr	r0, [r7, #12]
    8d08:	4b07      	ldr	r3, [pc, #28]	; (8d28 <_tc_timer_get_period+0x6c>)
    8d0a:	4798      	blx	r3
    8d0c:	4603      	mov	r3, r0
    8d0e:	e000      	b.n	8d12 <_tc_timer_get_period+0x56>
	}

	return 0;
    8d10:	2300      	movs	r3, #0
}
    8d12:	4618      	mov	r0, r3
    8d14:	3710      	adds	r7, #16
    8d16:	46bd      	mov	sp, r7
    8d18:	bd80      	pop	{r7, pc}
    8d1a:	bf00      	nop
    8d1c:	000084b9 	.word	0x000084b9
    8d20:	000086a1 	.word	0x000086a1
    8d24:	00008641 	.word	0x00008641
    8d28:	000085b9 	.word	0x000085b9

00008d2c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8d2c:	b580      	push	{r7, lr}
    8d2e:	b082      	sub	sp, #8
    8d30:	af00      	add	r7, sp, #0
    8d32:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8d34:	687b      	ldr	r3, [r7, #4]
    8d36:	68db      	ldr	r3, [r3, #12]
    8d38:	4618      	mov	r0, r3
    8d3a:	4b03      	ldr	r3, [pc, #12]	; (8d48 <_tc_timer_is_started+0x1c>)
    8d3c:	4798      	blx	r3
    8d3e:	4603      	mov	r3, r0
}
    8d40:	4618      	mov	r0, r3
    8d42:	3708      	adds	r7, #8
    8d44:	46bd      	mov	sp, r7
    8d46:	bd80      	pop	{r7, pc}
    8d48:	00008459 	.word	0x00008459

00008d4c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8d4c:	b480      	push	{r7}
    8d4e:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8d50:	4b02      	ldr	r3, [pc, #8]	; (8d5c <_tc_get_timer+0x10>)
}
    8d52:	4618      	mov	r0, r3
    8d54:	46bd      	mov	sp, r7
    8d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d5a:	4770      	bx	lr
    8d5c:	20000188 	.word	0x20000188

00008d60 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8d60:	b480      	push	{r7}
    8d62:	af00      	add	r7, sp, #0
	return NULL;
    8d64:	2300      	movs	r3, #0
}
    8d66:	4618      	mov	r0, r3
    8d68:	46bd      	mov	sp, r7
    8d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d6e:	4770      	bx	lr

00008d70 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8d70:	b580      	push	{r7, lr}
    8d72:	b084      	sub	sp, #16
    8d74:	af00      	add	r7, sp, #0
    8d76:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8d78:	687b      	ldr	r3, [r7, #4]
    8d7a:	68db      	ldr	r3, [r3, #12]
    8d7c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8d7e:	68f8      	ldr	r0, [r7, #12]
    8d80:	4b0e      	ldr	r3, [pc, #56]	; (8dbc <_tc_timer_set_irq+0x4c>)
    8d82:	4798      	blx	r3
    8d84:	4603      	mov	r3, r0
    8d86:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8d88:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8d8c:	490c      	ldr	r1, [pc, #48]	; (8dc0 <_tc_timer_set_irq+0x50>)
    8d8e:	2001      	movs	r0, #1
    8d90:	4b0c      	ldr	r3, [pc, #48]	; (8dc4 <_tc_timer_set_irq+0x54>)
    8d92:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8d94:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8d98:	490b      	ldr	r1, [pc, #44]	; (8dc8 <_tc_timer_set_irq+0x58>)
    8d9a:	4613      	mov	r3, r2
    8d9c:	009b      	lsls	r3, r3, #2
    8d9e:	4413      	add	r3, r2
    8da0:	009b      	lsls	r3, r3, #2
    8da2:	440b      	add	r3, r1
    8da4:	3302      	adds	r3, #2
    8da6:	f9b3 3000 	ldrsh.w	r3, [r3]
    8daa:	b2db      	uxtb	r3, r3
    8dac:	4618      	mov	r0, r3
    8dae:	4b07      	ldr	r3, [pc, #28]	; (8dcc <_tc_timer_set_irq+0x5c>)
    8db0:	4798      	blx	r3
}
    8db2:	bf00      	nop
    8db4:	3710      	adds	r7, #16
    8db6:	46bd      	mov	sp, r7
    8db8:	bd80      	pop	{r7, pc}
    8dba:	bf00      	nop
    8dbc:	00008f1d 	.word	0x00008f1d
    8dc0:	00014980 	.word	0x00014980
    8dc4:	00004211 	.word	0x00004211
    8dc8:	20000110 	.word	0x20000110
    8dcc:	00004a59 	.word	0x00004a59

00008dd0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8dd0:	b580      	push	{r7, lr}
    8dd2:	b084      	sub	sp, #16
    8dd4:	af00      	add	r7, sp, #0
    8dd6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8dd8:	687b      	ldr	r3, [r7, #4]
    8dda:	68db      	ldr	r3, [r3, #12]
    8ddc:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8dde:	68f8      	ldr	r0, [r7, #12]
    8de0:	4b07      	ldr	r3, [pc, #28]	; (8e00 <tc_interrupt_handler+0x30>)
    8de2:	4798      	blx	r3
    8de4:	4603      	mov	r3, r0
    8de6:	2b00      	cmp	r3, #0
    8de8:	d006      	beq.n	8df8 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8dea:	68f8      	ldr	r0, [r7, #12]
    8dec:	4b05      	ldr	r3, [pc, #20]	; (8e04 <tc_interrupt_handler+0x34>)
    8dee:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	681b      	ldr	r3, [r3, #0]
    8df4:	6878      	ldr	r0, [r7, #4]
    8df6:	4798      	blx	r3
	}
}
    8df8:	bf00      	nop
    8dfa:	3710      	adds	r7, #16
    8dfc:	46bd      	mov	sp, r7
    8dfe:	bd80      	pop	{r7, pc}
    8e00:	00008369 	.word	0x00008369
    8e04:	00008391 	.word	0x00008391

00008e08 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8e08:	b580      	push	{r7, lr}
    8e0a:	b084      	sub	sp, #16
    8e0c:	af00      	add	r7, sp, #0
    8e0e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8e10:	687b      	ldr	r3, [r7, #4]
    8e12:	691b      	ldr	r3, [r3, #16]
    8e14:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8e16:	68f8      	ldr	r0, [r7, #12]
    8e18:	4b12      	ldr	r3, [pc, #72]	; (8e64 <tc_pwm_interrupt_handler+0x5c>)
    8e1a:	4798      	blx	r3
    8e1c:	4603      	mov	r3, r0
    8e1e:	2b00      	cmp	r3, #0
    8e20:	d00a      	beq.n	8e38 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8e22:	68f8      	ldr	r0, [r7, #12]
    8e24:	4b10      	ldr	r3, [pc, #64]	; (8e68 <tc_pwm_interrupt_handler+0x60>)
    8e26:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8e28:	687b      	ldr	r3, [r7, #4]
    8e2a:	681b      	ldr	r3, [r3, #0]
    8e2c:	2b00      	cmp	r3, #0
    8e2e:	d003      	beq.n	8e38 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8e30:	687b      	ldr	r3, [r7, #4]
    8e32:	681b      	ldr	r3, [r3, #0]
    8e34:	6878      	ldr	r0, [r7, #4]
    8e36:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8e38:	68f8      	ldr	r0, [r7, #12]
    8e3a:	4b0c      	ldr	r3, [pc, #48]	; (8e6c <tc_pwm_interrupt_handler+0x64>)
    8e3c:	4798      	blx	r3
    8e3e:	4603      	mov	r3, r0
    8e40:	2b00      	cmp	r3, #0
    8e42:	d00a      	beq.n	8e5a <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8e44:	68f8      	ldr	r0, [r7, #12]
    8e46:	4b0a      	ldr	r3, [pc, #40]	; (8e70 <tc_pwm_interrupt_handler+0x68>)
    8e48:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8e4a:	687b      	ldr	r3, [r7, #4]
    8e4c:	685b      	ldr	r3, [r3, #4]
    8e4e:	2b00      	cmp	r3, #0
    8e50:	d003      	beq.n	8e5a <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8e52:	687b      	ldr	r3, [r7, #4]
    8e54:	685b      	ldr	r3, [r3, #4]
    8e56:	6878      	ldr	r0, [r7, #4]
    8e58:	4798      	blx	r3
		}
	}
}
    8e5a:	bf00      	nop
    8e5c:	3710      	adds	r7, #16
    8e5e:	46bd      	mov	sp, r7
    8e60:	bd80      	pop	{r7, pc}
    8e62:	bf00      	nop
    8e64:	00008369 	.word	0x00008369
    8e68:	00008391 	.word	0x00008391
    8e6c:	000083df 	.word	0x000083df
    8e70:	000083ab 	.word	0x000083ab

00008e74 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8e74:	b580      	push	{r7, lr}
    8e76:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8e78:	4b03      	ldr	r3, [pc, #12]	; (8e88 <TC0_Handler+0x14>)
    8e7a:	681b      	ldr	r3, [r3, #0]
    8e7c:	4618      	mov	r0, r3
    8e7e:	4b03      	ldr	r3, [pc, #12]	; (8e8c <TC0_Handler+0x18>)
    8e80:	4798      	blx	r3
}
    8e82:	bf00      	nop
    8e84:	bd80      	pop	{r7, pc}
    8e86:	bf00      	nop
    8e88:	20000eac 	.word	0x20000eac
    8e8c:	00008dd1 	.word	0x00008dd1

00008e90 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8e90:	b580      	push	{r7, lr}
    8e92:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8e94:	4b03      	ldr	r3, [pc, #12]	; (8ea4 <TC2_Handler+0x14>)
    8e96:	681b      	ldr	r3, [r3, #0]
    8e98:	4618      	mov	r0, r3
    8e9a:	4b03      	ldr	r3, [pc, #12]	; (8ea8 <TC2_Handler+0x18>)
    8e9c:	4798      	blx	r3
}
    8e9e:	bf00      	nop
    8ea0:	bd80      	pop	{r7, pc}
    8ea2:	bf00      	nop
    8ea4:	20000eb0 	.word	0x20000eb0
    8ea8:	00008dd1 	.word	0x00008dd1

00008eac <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8eac:	b580      	push	{r7, lr}
    8eae:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8eb0:	4b03      	ldr	r3, [pc, #12]	; (8ec0 <TC4_Handler+0x14>)
    8eb2:	681b      	ldr	r3, [r3, #0]
    8eb4:	4618      	mov	r0, r3
    8eb6:	4b03      	ldr	r3, [pc, #12]	; (8ec4 <TC4_Handler+0x18>)
    8eb8:	4798      	blx	r3
}
    8eba:	bf00      	nop
    8ebc:	bd80      	pop	{r7, pc}
    8ebe:	bf00      	nop
    8ec0:	20000eb4 	.word	0x20000eb4
    8ec4:	00008dd1 	.word	0x00008dd1

00008ec8 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8ec8:	b580      	push	{r7, lr}
    8eca:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8ecc:	4b03      	ldr	r3, [pc, #12]	; (8edc <TC5_Handler+0x14>)
    8ece:	681b      	ldr	r3, [r3, #0]
    8ed0:	4618      	mov	r0, r3
    8ed2:	4b03      	ldr	r3, [pc, #12]	; (8ee0 <TC5_Handler+0x18>)
    8ed4:	4798      	blx	r3
}
    8ed6:	bf00      	nop
    8ed8:	bd80      	pop	{r7, pc}
    8eda:	bf00      	nop
    8edc:	20000eb8 	.word	0x20000eb8
    8ee0:	00008dd1 	.word	0x00008dd1

00008ee4 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8ee4:	b580      	push	{r7, lr}
    8ee6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8ee8:	4b03      	ldr	r3, [pc, #12]	; (8ef8 <TC6_Handler+0x14>)
    8eea:	681b      	ldr	r3, [r3, #0]
    8eec:	4618      	mov	r0, r3
    8eee:	4b03      	ldr	r3, [pc, #12]	; (8efc <TC6_Handler+0x18>)
    8ef0:	4798      	blx	r3
}
    8ef2:	bf00      	nop
    8ef4:	bd80      	pop	{r7, pc}
    8ef6:	bf00      	nop
    8ef8:	20000ebc 	.word	0x20000ebc
    8efc:	00008dd1 	.word	0x00008dd1

00008f00 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8f00:	b580      	push	{r7, lr}
    8f02:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8f04:	4b03      	ldr	r3, [pc, #12]	; (8f14 <TC7_Handler+0x14>)
    8f06:	681b      	ldr	r3, [r3, #0]
    8f08:	4618      	mov	r0, r3
    8f0a:	4b03      	ldr	r3, [pc, #12]	; (8f18 <TC7_Handler+0x18>)
    8f0c:	4798      	blx	r3
}
    8f0e:	bf00      	nop
    8f10:	bd80      	pop	{r7, pc}
    8f12:	bf00      	nop
    8f14:	20000ec0 	.word	0x20000ec0
    8f18:	00008e09 	.word	0x00008e09

00008f1c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8f1c:	b580      	push	{r7, lr}
    8f1e:	b084      	sub	sp, #16
    8f20:	af00      	add	r7, sp, #0
    8f22:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8f24:	6878      	ldr	r0, [r7, #4]
    8f26:	4b13      	ldr	r3, [pc, #76]	; (8f74 <get_tc_index+0x58>)
    8f28:	4798      	blx	r3
    8f2a:	4603      	mov	r3, r0
    8f2c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8f2e:	2300      	movs	r3, #0
    8f30:	73fb      	strb	r3, [r7, #15]
    8f32:	e010      	b.n	8f56 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8f34:	7bfa      	ldrb	r2, [r7, #15]
    8f36:	4910      	ldr	r1, [pc, #64]	; (8f78 <get_tc_index+0x5c>)
    8f38:	4613      	mov	r3, r2
    8f3a:	009b      	lsls	r3, r3, #2
    8f3c:	4413      	add	r3, r2
    8f3e:	009b      	lsls	r3, r3, #2
    8f40:	440b      	add	r3, r1
    8f42:	781b      	ldrb	r3, [r3, #0]
    8f44:	7bba      	ldrb	r2, [r7, #14]
    8f46:	429a      	cmp	r2, r3
    8f48:	d102      	bne.n	8f50 <get_tc_index+0x34>
			return i;
    8f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8f4e:	e00d      	b.n	8f6c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8f50:	7bfb      	ldrb	r3, [r7, #15]
    8f52:	3301      	adds	r3, #1
    8f54:	73fb      	strb	r3, [r7, #15]
    8f56:	7bfb      	ldrb	r3, [r7, #15]
    8f58:	2b05      	cmp	r3, #5
    8f5a:	d9eb      	bls.n	8f34 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8f5c:	f240 221d 	movw	r2, #541	; 0x21d
    8f60:	4906      	ldr	r1, [pc, #24]	; (8f7c <get_tc_index+0x60>)
    8f62:	2000      	movs	r0, #0
    8f64:	4b06      	ldr	r3, [pc, #24]	; (8f80 <get_tc_index+0x64>)
    8f66:	4798      	blx	r3
	return -1;
    8f68:	f04f 33ff 	mov.w	r3, #4294967295
}
    8f6c:	4618      	mov	r0, r3
    8f6e:	3710      	adds	r7, #16
    8f70:	46bd      	mov	sp, r7
    8f72:	bd80      	pop	{r7, pc}
    8f74:	00009021 	.word	0x00009021
    8f78:	20000110 	.word	0x20000110
    8f7c:	00014980 	.word	0x00014980
    8f80:	00004211 	.word	0x00004211

00008f84 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8f84:	b480      	push	{r7}
    8f86:	b083      	sub	sp, #12
    8f88:	af00      	add	r7, sp, #0
    8f8a:	6078      	str	r0, [r7, #4]
    8f8c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8f8e:	687b      	ldr	r3, [r7, #4]
    8f90:	4a17      	ldr	r2, [pc, #92]	; (8ff0 <_tc_init_irq_param+0x6c>)
    8f92:	4293      	cmp	r3, r2
    8f94:	d102      	bne.n	8f9c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8f96:	4a17      	ldr	r2, [pc, #92]	; (8ff4 <_tc_init_irq_param+0x70>)
    8f98:	683b      	ldr	r3, [r7, #0]
    8f9a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8f9c:	687b      	ldr	r3, [r7, #4]
    8f9e:	4a16      	ldr	r2, [pc, #88]	; (8ff8 <_tc_init_irq_param+0x74>)
    8fa0:	4293      	cmp	r3, r2
    8fa2:	d102      	bne.n	8faa <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8fa4:	4a15      	ldr	r2, [pc, #84]	; (8ffc <_tc_init_irq_param+0x78>)
    8fa6:	683b      	ldr	r3, [r7, #0]
    8fa8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8faa:	687b      	ldr	r3, [r7, #4]
    8fac:	4a14      	ldr	r2, [pc, #80]	; (9000 <_tc_init_irq_param+0x7c>)
    8fae:	4293      	cmp	r3, r2
    8fb0:	d102      	bne.n	8fb8 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8fb2:	4a14      	ldr	r2, [pc, #80]	; (9004 <_tc_init_irq_param+0x80>)
    8fb4:	683b      	ldr	r3, [r7, #0]
    8fb6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8fb8:	687b      	ldr	r3, [r7, #4]
    8fba:	4a13      	ldr	r2, [pc, #76]	; (9008 <_tc_init_irq_param+0x84>)
    8fbc:	4293      	cmp	r3, r2
    8fbe:	d102      	bne.n	8fc6 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8fc0:	4a12      	ldr	r2, [pc, #72]	; (900c <_tc_init_irq_param+0x88>)
    8fc2:	683b      	ldr	r3, [r7, #0]
    8fc4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8fc6:	687b      	ldr	r3, [r7, #4]
    8fc8:	4a11      	ldr	r2, [pc, #68]	; (9010 <_tc_init_irq_param+0x8c>)
    8fca:	4293      	cmp	r3, r2
    8fcc:	d102      	bne.n	8fd4 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8fce:	4a11      	ldr	r2, [pc, #68]	; (9014 <_tc_init_irq_param+0x90>)
    8fd0:	683b      	ldr	r3, [r7, #0]
    8fd2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8fd4:	687b      	ldr	r3, [r7, #4]
    8fd6:	4a10      	ldr	r2, [pc, #64]	; (9018 <_tc_init_irq_param+0x94>)
    8fd8:	4293      	cmp	r3, r2
    8fda:	d102      	bne.n	8fe2 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8fdc:	4a0f      	ldr	r2, [pc, #60]	; (901c <_tc_init_irq_param+0x98>)
    8fde:	683b      	ldr	r3, [r7, #0]
    8fe0:	6013      	str	r3, [r2, #0]
	}
}
    8fe2:	bf00      	nop
    8fe4:	370c      	adds	r7, #12
    8fe6:	46bd      	mov	sp, r7
    8fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fec:	4770      	bx	lr
    8fee:	bf00      	nop
    8ff0:	40003800 	.word	0x40003800
    8ff4:	20000eac 	.word	0x20000eac
    8ff8:	4101a000 	.word	0x4101a000
    8ffc:	20000eb0 	.word	0x20000eb0
    9000:	42001400 	.word	0x42001400
    9004:	20000eb4 	.word	0x20000eb4
    9008:	42001800 	.word	0x42001800
    900c:	20000eb8 	.word	0x20000eb8
    9010:	43001400 	.word	0x43001400
    9014:	20000ebc 	.word	0x20000ebc
    9018:	43001800 	.word	0x43001800
    901c:	20000ec0 	.word	0x20000ec0

00009020 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    9020:	b4b0      	push	{r4, r5, r7}
    9022:	b08d      	sub	sp, #52	; 0x34
    9024:	af00      	add	r7, sp, #0
    9026:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    9028:	4b13      	ldr	r3, [pc, #76]	; (9078 <_get_hardware_offset+0x58>)
    902a:	f107 040c 	add.w	r4, r7, #12
    902e:	461d      	mov	r5, r3
    9030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9034:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    903c:	2300      	movs	r3, #0
    903e:	62fb      	str	r3, [r7, #44]	; 0x2c
    9040:	e010      	b.n	9064 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    9042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9044:	009b      	lsls	r3, r3, #2
    9046:	f107 0230 	add.w	r2, r7, #48	; 0x30
    904a:	4413      	add	r3, r2
    904c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    9050:	461a      	mov	r2, r3
    9052:	687b      	ldr	r3, [r7, #4]
    9054:	429a      	cmp	r2, r3
    9056:	d102      	bne.n	905e <_get_hardware_offset+0x3e>
			return i;
    9058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    905a:	b2db      	uxtb	r3, r3
    905c:	e006      	b.n	906c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    905e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9060:	3301      	adds	r3, #1
    9062:	62fb      	str	r3, [r7, #44]	; 0x2c
    9064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9066:	2b07      	cmp	r3, #7
    9068:	d9eb      	bls.n	9042 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    906a:	2300      	movs	r3, #0
}
    906c:	4618      	mov	r0, r3
    906e:	3734      	adds	r7, #52	; 0x34
    9070:	46bd      	mov	sp, r7
    9072:	bcb0      	pop	{r4, r5, r7}
    9074:	4770      	bx	lr
    9076:	bf00      	nop
    9078:	00014994 	.word	0x00014994

0000907c <__NVIC_EnableIRQ>:
{
    907c:	b480      	push	{r7}
    907e:	b083      	sub	sp, #12
    9080:	af00      	add	r7, sp, #0
    9082:	4603      	mov	r3, r0
    9084:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    908a:	2b00      	cmp	r3, #0
    908c:	db0b      	blt.n	90a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    908e:	4909      	ldr	r1, [pc, #36]	; (90b4 <__NVIC_EnableIRQ+0x38>)
    9090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9094:	095b      	lsrs	r3, r3, #5
    9096:	88fa      	ldrh	r2, [r7, #6]
    9098:	f002 021f 	and.w	r2, r2, #31
    909c:	2001      	movs	r0, #1
    909e:	fa00 f202 	lsl.w	r2, r0, r2
    90a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    90a6:	bf00      	nop
    90a8:	370c      	adds	r7, #12
    90aa:	46bd      	mov	sp, r7
    90ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    90b0:	4770      	bx	lr
    90b2:	bf00      	nop
    90b4:	e000e100 	.word	0xe000e100

000090b8 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    90b8:	b480      	push	{r7}
    90ba:	b087      	sub	sp, #28
    90bc:	af00      	add	r7, sp, #0
    90be:	60f8      	str	r0, [r7, #12]
    90c0:	460b      	mov	r3, r1
    90c2:	607a      	str	r2, [r7, #4]
    90c4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    90c6:	7afa      	ldrb	r2, [r7, #11]
    90c8:	68f9      	ldr	r1, [r7, #12]
    90ca:	4613      	mov	r3, r2
    90cc:	009b      	lsls	r3, r3, #2
    90ce:	4413      	add	r3, r2
    90d0:	009b      	lsls	r3, r3, #2
    90d2:	440b      	add	r3, r1
    90d4:	3340      	adds	r3, #64	; 0x40
    90d6:	681b      	ldr	r3, [r3, #0]
    90d8:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    90da:	697a      	ldr	r2, [r7, #20]
    90dc:	687b      	ldr	r3, [r7, #4]
    90de:	4013      	ands	r3, r2
    90e0:	617b      	str	r3, [r7, #20]
	return tmp;
    90e2:	697b      	ldr	r3, [r7, #20]
}
    90e4:	4618      	mov	r0, r3
    90e6:	371c      	adds	r7, #28
    90e8:	46bd      	mov	sp, r7
    90ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    90ee:	4770      	bx	lr

000090f0 <hri_oscctrl_get_STATUS_reg>:
{
    90f0:	b480      	push	{r7}
    90f2:	b085      	sub	sp, #20
    90f4:	af00      	add	r7, sp, #0
    90f6:	6078      	str	r0, [r7, #4]
    90f8:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    90fa:	687b      	ldr	r3, [r7, #4]
    90fc:	691b      	ldr	r3, [r3, #16]
    90fe:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9100:	68fa      	ldr	r2, [r7, #12]
    9102:	683b      	ldr	r3, [r7, #0]
    9104:	4013      	ands	r3, r2
    9106:	60fb      	str	r3, [r7, #12]
	return tmp;
    9108:	68fb      	ldr	r3, [r7, #12]
}
    910a:	4618      	mov	r0, r3
    910c:	3714      	adds	r7, #20
    910e:	46bd      	mov	sp, r7
    9110:	f85d 7b04 	ldr.w	r7, [sp], #4
    9114:	4770      	bx	lr

00009116 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    9116:	b480      	push	{r7}
    9118:	b085      	sub	sp, #20
    911a:	af00      	add	r7, sp, #0
    911c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    911e:	687b      	ldr	r3, [r7, #4]
    9120:	f893 3020 	ldrb.w	r3, [r3, #32]
    9124:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    9126:	7bfb      	ldrb	r3, [r7, #15]
    9128:	f003 0301 	and.w	r3, r3, #1
    912c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    912e:	7bfb      	ldrb	r3, [r7, #15]
    9130:	2b00      	cmp	r3, #0
    9132:	bf14      	ite	ne
    9134:	2301      	movne	r3, #1
    9136:	2300      	moveq	r3, #0
    9138:	b2db      	uxtb	r3, r3
}
    913a:	4618      	mov	r0, r3
    913c:	3714      	adds	r7, #20
    913e:	46bd      	mov	sp, r7
    9140:	f85d 7b04 	ldr.w	r7, [sp], #4
    9144:	4770      	bx	lr

00009146 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9146:	b480      	push	{r7}
    9148:	b083      	sub	sp, #12
    914a:	af00      	add	r7, sp, #0
    914c:	6078      	str	r0, [r7, #4]
    914e:	460b      	mov	r3, r1
    9150:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9152:	bf00      	nop
    9154:	687b      	ldr	r3, [r7, #4]
    9156:	789b      	ldrb	r3, [r3, #2]
    9158:	b2da      	uxtb	r2, r3
    915a:	78fb      	ldrb	r3, [r7, #3]
    915c:	4013      	ands	r3, r2
    915e:	b2db      	uxtb	r3, r3
    9160:	2b00      	cmp	r3, #0
    9162:	d1f7      	bne.n	9154 <hri_usb_wait_for_sync+0xe>
	};
}
    9164:	bf00      	nop
    9166:	370c      	adds	r7, #12
    9168:	46bd      	mov	sp, r7
    916a:	f85d 7b04 	ldr.w	r7, [sp], #4
    916e:	4770      	bx	lr

00009170 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9170:	b480      	push	{r7}
    9172:	b083      	sub	sp, #12
    9174:	af00      	add	r7, sp, #0
    9176:	6078      	str	r0, [r7, #4]
    9178:	460b      	mov	r3, r1
    917a:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    917c:	687b      	ldr	r3, [r7, #4]
    917e:	789b      	ldrb	r3, [r3, #2]
    9180:	b2da      	uxtb	r2, r3
    9182:	78fb      	ldrb	r3, [r7, #3]
    9184:	4013      	ands	r3, r2
    9186:	b2db      	uxtb	r3, r3
    9188:	2b00      	cmp	r3, #0
    918a:	bf14      	ite	ne
    918c:	2301      	movne	r3, #1
    918e:	2300      	moveq	r3, #0
    9190:	b2db      	uxtb	r3, r3
}
    9192:	4618      	mov	r0, r3
    9194:	370c      	adds	r7, #12
    9196:	46bd      	mov	sp, r7
    9198:	f85d 7b04 	ldr.w	r7, [sp], #4
    919c:	4770      	bx	lr

0000919e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    919e:	b480      	push	{r7}
    91a0:	b085      	sub	sp, #20
    91a2:	af00      	add	r7, sp, #0
    91a4:	6078      	str	r0, [r7, #4]
    91a6:	460b      	mov	r3, r1
    91a8:	70fb      	strb	r3, [r7, #3]
    91aa:	4613      	mov	r3, r2
    91ac:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    91ae:	78fb      	ldrb	r3, [r7, #3]
    91b0:	687a      	ldr	r2, [r7, #4]
    91b2:	3308      	adds	r3, #8
    91b4:	015b      	lsls	r3, r3, #5
    91b6:	4413      	add	r3, r2
    91b8:	3307      	adds	r3, #7
    91ba:	781b      	ldrb	r3, [r3, #0]
    91bc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    91be:	7bfa      	ldrb	r2, [r7, #15]
    91c0:	78bb      	ldrb	r3, [r7, #2]
    91c2:	4013      	ands	r3, r2
    91c4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    91c6:	7bfb      	ldrb	r3, [r7, #15]
}
    91c8:	4618      	mov	r0, r3
    91ca:	3714      	adds	r7, #20
    91cc:	46bd      	mov	sp, r7
    91ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    91d2:	4770      	bx	lr

000091d4 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    91d4:	b480      	push	{r7}
    91d6:	b083      	sub	sp, #12
    91d8:	af00      	add	r7, sp, #0
    91da:	6078      	str	r0, [r7, #4]
    91dc:	460b      	mov	r3, r1
    91de:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    91e0:	78fb      	ldrb	r3, [r7, #3]
    91e2:	687a      	ldr	r2, [r7, #4]
    91e4:	3308      	adds	r3, #8
    91e6:	015b      	lsls	r3, r3, #5
    91e8:	4413      	add	r3, r2
    91ea:	3307      	adds	r3, #7
    91ec:	781b      	ldrb	r3, [r3, #0]
    91ee:	b2db      	uxtb	r3, r3
}
    91f0:	4618      	mov	r0, r3
    91f2:	370c      	adds	r7, #12
    91f4:	46bd      	mov	sp, r7
    91f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    91fa:	4770      	bx	lr

000091fc <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    91fc:	b480      	push	{r7}
    91fe:	b083      	sub	sp, #12
    9200:	af00      	add	r7, sp, #0
    9202:	6078      	str	r0, [r7, #4]
    9204:	460b      	mov	r3, r1
    9206:	70fb      	strb	r3, [r7, #3]
    9208:	4613      	mov	r3, r2
    920a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    920c:	78fb      	ldrb	r3, [r7, #3]
    920e:	687a      	ldr	r2, [r7, #4]
    9210:	3308      	adds	r3, #8
    9212:	015b      	lsls	r3, r3, #5
    9214:	4413      	add	r3, r2
    9216:	3307      	adds	r3, #7
    9218:	78ba      	ldrb	r2, [r7, #2]
    921a:	701a      	strb	r2, [r3, #0]
}
    921c:	bf00      	nop
    921e:	370c      	adds	r7, #12
    9220:	46bd      	mov	sp, r7
    9222:	f85d 7b04 	ldr.w	r7, [sp], #4
    9226:	4770      	bx	lr

00009228 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    9228:	b480      	push	{r7}
    922a:	b083      	sub	sp, #12
    922c:	af00      	add	r7, sp, #0
    922e:	6078      	str	r0, [r7, #4]
    9230:	460b      	mov	r3, r1
    9232:	70fb      	strb	r3, [r7, #3]
    9234:	4613      	mov	r3, r2
    9236:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9238:	78fb      	ldrb	r3, [r7, #3]
    923a:	687a      	ldr	r2, [r7, #4]
    923c:	3308      	adds	r3, #8
    923e:	015b      	lsls	r3, r3, #5
    9240:	4413      	add	r3, r2
    9242:	3305      	adds	r3, #5
    9244:	78ba      	ldrb	r2, [r7, #2]
    9246:	701a      	strb	r2, [r3, #0]
}
    9248:	bf00      	nop
    924a:	370c      	adds	r7, #12
    924c:	46bd      	mov	sp, r7
    924e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9252:	4770      	bx	lr

00009254 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    9254:	b480      	push	{r7}
    9256:	b083      	sub	sp, #12
    9258:	af00      	add	r7, sp, #0
    925a:	6078      	str	r0, [r7, #4]
    925c:	460b      	mov	r3, r1
    925e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9260:	78fb      	ldrb	r3, [r7, #3]
    9262:	687a      	ldr	r2, [r7, #4]
    9264:	3308      	adds	r3, #8
    9266:	015b      	lsls	r3, r3, #5
    9268:	4413      	add	r3, r2
    926a:	3306      	adds	r3, #6
    926c:	781b      	ldrb	r3, [r3, #0]
    926e:	b2db      	uxtb	r3, r3
}
    9270:	4618      	mov	r0, r3
    9272:	370c      	adds	r7, #12
    9274:	46bd      	mov	sp, r7
    9276:	f85d 7b04 	ldr.w	r7, [sp], #4
    927a:	4770      	bx	lr

0000927c <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    927c:	b480      	push	{r7}
    927e:	b083      	sub	sp, #12
    9280:	af00      	add	r7, sp, #0
    9282:	6078      	str	r0, [r7, #4]
    9284:	460b      	mov	r3, r1
    9286:	70fb      	strb	r3, [r7, #3]
    9288:	4613      	mov	r3, r2
    928a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    928c:	78fb      	ldrb	r3, [r7, #3]
    928e:	687a      	ldr	r2, [r7, #4]
    9290:	3308      	adds	r3, #8
    9292:	015b      	lsls	r3, r3, #5
    9294:	4413      	add	r3, r2
    9296:	3304      	adds	r3, #4
    9298:	78ba      	ldrb	r2, [r7, #2]
    929a:	701a      	strb	r2, [r3, #0]
}
    929c:	bf00      	nop
    929e:	370c      	adds	r7, #12
    92a0:	46bd      	mov	sp, r7
    92a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    92a6:	4770      	bx	lr

000092a8 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    92a8:	b480      	push	{r7}
    92aa:	b083      	sub	sp, #12
    92ac:	af00      	add	r7, sp, #0
    92ae:	6078      	str	r0, [r7, #4]
    92b0:	460b      	mov	r3, r1
    92b2:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    92b4:	78fb      	ldrb	r3, [r7, #3]
    92b6:	687a      	ldr	r2, [r7, #4]
    92b8:	015b      	lsls	r3, r3, #5
    92ba:	4413      	add	r3, r2
    92bc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    92c0:	2210      	movs	r2, #16
    92c2:	701a      	strb	r2, [r3, #0]
}
    92c4:	bf00      	nop
    92c6:	370c      	adds	r7, #12
    92c8:	46bd      	mov	sp, r7
    92ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    92ce:	4770      	bx	lr

000092d0 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    92d0:	b480      	push	{r7}
    92d2:	b083      	sub	sp, #12
    92d4:	af00      	add	r7, sp, #0
    92d6:	6078      	str	r0, [r7, #4]
    92d8:	460b      	mov	r3, r1
    92da:	70fb      	strb	r3, [r7, #3]
    92dc:	4613      	mov	r3, r2
    92de:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    92e0:	78fb      	ldrb	r3, [r7, #3]
    92e2:	687a      	ldr	r2, [r7, #4]
    92e4:	015b      	lsls	r3, r3, #5
    92e6:	4413      	add	r3, r2
    92e8:	f203 1309 	addw	r3, r3, #265	; 0x109
    92ec:	78ba      	ldrb	r2, [r7, #2]
    92ee:	701a      	strb	r2, [r3, #0]
}
    92f0:	bf00      	nop
    92f2:	370c      	adds	r7, #12
    92f4:	46bd      	mov	sp, r7
    92f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    92fa:	4770      	bx	lr

000092fc <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    92fc:	b480      	push	{r7}
    92fe:	b083      	sub	sp, #12
    9300:	af00      	add	r7, sp, #0
    9302:	6078      	str	r0, [r7, #4]
    9304:	460b      	mov	r3, r1
    9306:	70fb      	strb	r3, [r7, #3]
    9308:	4613      	mov	r3, r2
    930a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    930c:	78fb      	ldrb	r3, [r7, #3]
    930e:	687a      	ldr	r2, [r7, #4]
    9310:	015b      	lsls	r3, r3, #5
    9312:	4413      	add	r3, r2
    9314:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9318:	78ba      	ldrb	r2, [r7, #2]
    931a:	701a      	strb	r2, [r3, #0]
}
    931c:	bf00      	nop
    931e:	370c      	adds	r7, #12
    9320:	46bd      	mov	sp, r7
    9322:	f85d 7b04 	ldr.w	r7, [sp], #4
    9326:	4770      	bx	lr

00009328 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9328:	b480      	push	{r7}
    932a:	b085      	sub	sp, #20
    932c:	af00      	add	r7, sp, #0
    932e:	6078      	str	r0, [r7, #4]
    9330:	460b      	mov	r3, r1
    9332:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9334:	78fb      	ldrb	r3, [r7, #3]
    9336:	687a      	ldr	r2, [r7, #4]
    9338:	3308      	adds	r3, #8
    933a:	015b      	lsls	r3, r3, #5
    933c:	4413      	add	r3, r2
    933e:	781b      	ldrb	r3, [r3, #0]
    9340:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    9342:	7bfb      	ldrb	r3, [r7, #15]
    9344:	f003 0307 	and.w	r3, r3, #7
    9348:	73fb      	strb	r3, [r7, #15]
	return tmp;
    934a:	7bfb      	ldrb	r3, [r7, #15]
}
    934c:	4618      	mov	r0, r3
    934e:	3714      	adds	r7, #20
    9350:	46bd      	mov	sp, r7
    9352:	f85d 7b04 	ldr.w	r7, [sp], #4
    9356:	4770      	bx	lr

00009358 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9358:	b480      	push	{r7}
    935a:	b085      	sub	sp, #20
    935c:	af00      	add	r7, sp, #0
    935e:	6078      	str	r0, [r7, #4]
    9360:	460b      	mov	r3, r1
    9362:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9364:	78fb      	ldrb	r3, [r7, #3]
    9366:	687a      	ldr	r2, [r7, #4]
    9368:	3308      	adds	r3, #8
    936a:	015b      	lsls	r3, r3, #5
    936c:	4413      	add	r3, r2
    936e:	781b      	ldrb	r3, [r3, #0]
    9370:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    9372:	7bfb      	ldrb	r3, [r7, #15]
    9374:	091b      	lsrs	r3, r3, #4
    9376:	b2db      	uxtb	r3, r3
    9378:	f003 0307 	and.w	r3, r3, #7
    937c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    937e:	7bfb      	ldrb	r3, [r7, #15]
}
    9380:	4618      	mov	r0, r3
    9382:	3714      	adds	r7, #20
    9384:	46bd      	mov	sp, r7
    9386:	f85d 7b04 	ldr.w	r7, [sp], #4
    938a:	4770      	bx	lr

0000938c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    938c:	b480      	push	{r7}
    938e:	b083      	sub	sp, #12
    9390:	af00      	add	r7, sp, #0
    9392:	6078      	str	r0, [r7, #4]
    9394:	460b      	mov	r3, r1
    9396:	70fb      	strb	r3, [r7, #3]
    9398:	4613      	mov	r3, r2
    939a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    939c:	78fb      	ldrb	r3, [r7, #3]
    939e:	687a      	ldr	r2, [r7, #4]
    93a0:	3308      	adds	r3, #8
    93a2:	015b      	lsls	r3, r3, #5
    93a4:	4413      	add	r3, r2
    93a6:	78ba      	ldrb	r2, [r7, #2]
    93a8:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    93aa:	bf00      	nop
    93ac:	370c      	adds	r7, #12
    93ae:	46bd      	mov	sp, r7
    93b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    93b4:	4770      	bx	lr

000093b6 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    93b6:	b480      	push	{r7}
    93b8:	b083      	sub	sp, #12
    93ba:	af00      	add	r7, sp, #0
    93bc:	6078      	str	r0, [r7, #4]
    93be:	460b      	mov	r3, r1
    93c0:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    93c2:	78fb      	ldrb	r3, [r7, #3]
    93c4:	687a      	ldr	r2, [r7, #4]
    93c6:	3308      	adds	r3, #8
    93c8:	015b      	lsls	r3, r3, #5
    93ca:	4413      	add	r3, r2
    93cc:	781b      	ldrb	r3, [r3, #0]
    93ce:	b2db      	uxtb	r3, r3
}
    93d0:	4618      	mov	r0, r3
    93d2:	370c      	adds	r7, #12
    93d4:	46bd      	mov	sp, r7
    93d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    93da:	4770      	bx	lr

000093dc <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    93dc:	b480      	push	{r7}
    93de:	b083      	sub	sp, #12
    93e0:	af00      	add	r7, sp, #0
    93e2:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    93e4:	687b      	ldr	r3, [r7, #4]
    93e6:	8b9b      	ldrh	r3, [r3, #28]
    93e8:	b29b      	uxth	r3, r3
}
    93ea:	4618      	mov	r0, r3
    93ec:	370c      	adds	r7, #12
    93ee:	46bd      	mov	sp, r7
    93f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    93f4:	4770      	bx	lr

000093f6 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    93f6:	b480      	push	{r7}
    93f8:	b083      	sub	sp, #12
    93fa:	af00      	add	r7, sp, #0
    93fc:	6078      	str	r0, [r7, #4]
    93fe:	460b      	mov	r3, r1
    9400:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9402:	687b      	ldr	r3, [r7, #4]
    9404:	887a      	ldrh	r2, [r7, #2]
    9406:	839a      	strh	r2, [r3, #28]
}
    9408:	bf00      	nop
    940a:	370c      	adds	r7, #12
    940c:	46bd      	mov	sp, r7
    940e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9412:	4770      	bx	lr

00009414 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9414:	b480      	push	{r7}
    9416:	b083      	sub	sp, #12
    9418:	af00      	add	r7, sp, #0
    941a:	6078      	str	r0, [r7, #4]
    941c:	460b      	mov	r3, r1
    941e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9420:	687b      	ldr	r3, [r7, #4]
    9422:	887a      	ldrh	r2, [r7, #2]
    9424:	831a      	strh	r2, [r3, #24]
}
    9426:	bf00      	nop
    9428:	370c      	adds	r7, #12
    942a:	46bd      	mov	sp, r7
    942c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9430:	4770      	bx	lr

00009432 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    9432:	b480      	push	{r7}
    9434:	b083      	sub	sp, #12
    9436:	af00      	add	r7, sp, #0
    9438:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    943a:	687b      	ldr	r3, [r7, #4]
    943c:	8b1b      	ldrh	r3, [r3, #24]
    943e:	b29b      	uxth	r3, r3
}
    9440:	4618      	mov	r0, r3
    9442:	370c      	adds	r7, #12
    9444:	46bd      	mov	sp, r7
    9446:	f85d 7b04 	ldr.w	r7, [sp], #4
    944a:	4770      	bx	lr

0000944c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    944c:	b480      	push	{r7}
    944e:	b083      	sub	sp, #12
    9450:	af00      	add	r7, sp, #0
    9452:	6078      	str	r0, [r7, #4]
    9454:	460b      	mov	r3, r1
    9456:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9458:	687b      	ldr	r3, [r7, #4]
    945a:	887a      	ldrh	r2, [r7, #2]
    945c:	829a      	strh	r2, [r3, #20]
}
    945e:	bf00      	nop
    9460:	370c      	adds	r7, #12
    9462:	46bd      	mov	sp, r7
    9464:	f85d 7b04 	ldr.w	r7, [sp], #4
    9468:	4770      	bx	lr

0000946a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    946a:	b480      	push	{r7}
    946c:	b085      	sub	sp, #20
    946e:	af00      	add	r7, sp, #0
    9470:	6078      	str	r0, [r7, #4]
    9472:	460b      	mov	r3, r1
    9474:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    9476:	687b      	ldr	r3, [r7, #4]
    9478:	789b      	ldrb	r3, [r3, #2]
    947a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    947c:	7bfa      	ldrb	r2, [r7, #15]
    947e:	78fb      	ldrb	r3, [r7, #3]
    9480:	4013      	ands	r3, r2
    9482:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9484:	7bfb      	ldrb	r3, [r7, #15]
}
    9486:	4618      	mov	r0, r3
    9488:	3714      	adds	r7, #20
    948a:	46bd      	mov	sp, r7
    948c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9490:	4770      	bx	lr
	...

00009494 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9494:	b580      	push	{r7, lr}
    9496:	b082      	sub	sp, #8
    9498:	af00      	add	r7, sp, #0
    949a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    949c:	687b      	ldr	r3, [r7, #4]
    949e:	781b      	ldrb	r3, [r3, #0]
    94a0:	b2db      	uxtb	r3, r3
    94a2:	f023 0302 	bic.w	r3, r3, #2
    94a6:	b2da      	uxtb	r2, r3
    94a8:	687b      	ldr	r3, [r7, #4]
    94aa:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    94ac:	2103      	movs	r1, #3
    94ae:	6878      	ldr	r0, [r7, #4]
    94b0:	4b02      	ldr	r3, [pc, #8]	; (94bc <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    94b2:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    94b4:	bf00      	nop
    94b6:	3708      	adds	r7, #8
    94b8:	46bd      	mov	sp, r7
    94ba:	bd80      	pop	{r7, pc}
    94bc:	00009147 	.word	0x00009147

000094c0 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    94c0:	b580      	push	{r7, lr}
    94c2:	b084      	sub	sp, #16
    94c4:	af00      	add	r7, sp, #0
    94c6:	6078      	str	r0, [r7, #4]
    94c8:	460b      	mov	r3, r1
    94ca:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    94cc:	2103      	movs	r1, #3
    94ce:	6878      	ldr	r0, [r7, #4]
    94d0:	4b06      	ldr	r3, [pc, #24]	; (94ec <hri_usb_get_CTRLA_reg+0x2c>)
    94d2:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    94d4:	687b      	ldr	r3, [r7, #4]
    94d6:	781b      	ldrb	r3, [r3, #0]
    94d8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    94da:	7bfa      	ldrb	r2, [r7, #15]
    94dc:	78fb      	ldrb	r3, [r7, #3]
    94de:	4013      	ands	r3, r2
    94e0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    94e2:	7bfb      	ldrb	r3, [r7, #15]
}
    94e4:	4618      	mov	r0, r3
    94e6:	3710      	adds	r7, #16
    94e8:	46bd      	mov	sp, r7
    94ea:	bd80      	pop	{r7, pc}
    94ec:	00009147 	.word	0x00009147

000094f0 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    94f0:	b580      	push	{r7, lr}
    94f2:	b082      	sub	sp, #8
    94f4:	af00      	add	r7, sp, #0
    94f6:	6078      	str	r0, [r7, #4]
    94f8:	460b      	mov	r3, r1
    94fa:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    94fc:	687b      	ldr	r3, [r7, #4]
    94fe:	78fa      	ldrb	r2, [r7, #3]
    9500:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9502:	2103      	movs	r1, #3
    9504:	6878      	ldr	r0, [r7, #4]
    9506:	4b03      	ldr	r3, [pc, #12]	; (9514 <hri_usb_write_CTRLA_reg+0x24>)
    9508:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    950a:	bf00      	nop
    950c:	3708      	adds	r7, #8
    950e:	46bd      	mov	sp, r7
    9510:	bd80      	pop	{r7, pc}
    9512:	bf00      	nop
    9514:	00009147 	.word	0x00009147

00009518 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    9518:	b580      	push	{r7, lr}
    951a:	b082      	sub	sp, #8
    951c:	af00      	add	r7, sp, #0
    951e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9520:	2103      	movs	r1, #3
    9522:	6878      	ldr	r0, [r7, #4]
    9524:	4b04      	ldr	r3, [pc, #16]	; (9538 <hri_usb_read_CTRLA_reg+0x20>)
    9526:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    9528:	687b      	ldr	r3, [r7, #4]
    952a:	781b      	ldrb	r3, [r3, #0]
    952c:	b2db      	uxtb	r3, r3
}
    952e:	4618      	mov	r0, r3
    9530:	3708      	adds	r7, #8
    9532:	46bd      	mov	sp, r7
    9534:	bd80      	pop	{r7, pc}
    9536:	bf00      	nop
    9538:	00009147 	.word	0x00009147

0000953c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    953c:	b480      	push	{r7}
    953e:	b083      	sub	sp, #12
    9540:	af00      	add	r7, sp, #0
    9542:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9544:	687b      	ldr	r3, [r7, #4]
    9546:	891b      	ldrh	r3, [r3, #8]
    9548:	b29b      	uxth	r3, r3
    954a:	f023 0301 	bic.w	r3, r3, #1
    954e:	b29a      	uxth	r2, r3
    9550:	687b      	ldr	r3, [r7, #4]
    9552:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9554:	bf00      	nop
    9556:	370c      	adds	r7, #12
    9558:	46bd      	mov	sp, r7
    955a:	f85d 7b04 	ldr.w	r7, [sp], #4
    955e:	4770      	bx	lr

00009560 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    9560:	b480      	push	{r7}
    9562:	b083      	sub	sp, #12
    9564:	af00      	add	r7, sp, #0
    9566:	6078      	str	r0, [r7, #4]
    9568:	460b      	mov	r3, r1
    956a:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    956c:	687b      	ldr	r3, [r7, #4]
    956e:	887a      	ldrh	r2, [r7, #2]
    9570:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9572:	bf00      	nop
    9574:	370c      	adds	r7, #12
    9576:	46bd      	mov	sp, r7
    9578:	f85d 7b04 	ldr.w	r7, [sp], #4
    957c:	4770      	bx	lr

0000957e <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    957e:	b480      	push	{r7}
    9580:	b083      	sub	sp, #12
    9582:	af00      	add	r7, sp, #0
    9584:	6078      	str	r0, [r7, #4]
    9586:	460b      	mov	r3, r1
    9588:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    958a:	687b      	ldr	r3, [r7, #4]
    958c:	78fa      	ldrb	r2, [r7, #3]
    958e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    9590:	bf00      	nop
    9592:	370c      	adds	r7, #12
    9594:	46bd      	mov	sp, r7
    9596:	f85d 7b04 	ldr.w	r7, [sp], #4
    959a:	4770      	bx	lr

0000959c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    959c:	b480      	push	{r7}
    959e:	b083      	sub	sp, #12
    95a0:	af00      	add	r7, sp, #0
    95a2:	6078      	str	r0, [r7, #4]
    95a4:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    95a6:	687b      	ldr	r3, [r7, #4]
    95a8:	683a      	ldr	r2, [r7, #0]
    95aa:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    95ac:	bf00      	nop
    95ae:	370c      	adds	r7, #12
    95b0:	46bd      	mov	sp, r7
    95b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    95b6:	4770      	bx	lr

000095b8 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    95b8:	b480      	push	{r7}
    95ba:	b083      	sub	sp, #12
    95bc:	af00      	add	r7, sp, #0
    95be:	6078      	str	r0, [r7, #4]
    95c0:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    95c2:	2300      	movs	r3, #0
}
    95c4:	4618      	mov	r0, r3
    95c6:	370c      	adds	r7, #12
    95c8:	46bd      	mov	sp, r7
    95ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    95ce:	4770      	bx	lr

000095d0 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    95d0:	b480      	push	{r7}
    95d2:	b085      	sub	sp, #20
    95d4:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    95d6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    95da:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    95dc:	4b28      	ldr	r3, [pc, #160]	; (9680 <_usb_load_calib+0xb0>)
    95de:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    95e0:	f003 031f 	and.w	r3, r3, #31
    95e4:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    95e6:	4b26      	ldr	r3, [pc, #152]	; (9680 <_usb_load_calib+0xb0>)
    95e8:	681b      	ldr	r3, [r3, #0]
    95ea:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    95ec:	f003 031f 	and.w	r3, r3, #31
    95f0:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    95f2:	4b23      	ldr	r3, [pc, #140]	; (9680 <_usb_load_calib+0xb0>)
    95f4:	681b      	ldr	r3, [r3, #0]
    95f6:	0a9b      	lsrs	r3, r3, #10
    95f8:	f003 0307 	and.w	r3, r3, #7
    95fc:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    95fe:	68fb      	ldr	r3, [r7, #12]
    9600:	2b00      	cmp	r3, #0
    9602:	d002      	beq.n	960a <_usb_load_calib+0x3a>
    9604:	68fb      	ldr	r3, [r7, #12]
    9606:	2b1f      	cmp	r3, #31
    9608:	d101      	bne.n	960e <_usb_load_calib+0x3e>
		pad_transn = 9;
    960a:	2309      	movs	r3, #9
    960c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    960e:	68bb      	ldr	r3, [r7, #8]
    9610:	2b00      	cmp	r3, #0
    9612:	d002      	beq.n	961a <_usb_load_calib+0x4a>
    9614:	68bb      	ldr	r3, [r7, #8]
    9616:	2b1f      	cmp	r3, #31
    9618:	d101      	bne.n	961e <_usb_load_calib+0x4e>
		pad_transp = 25;
    961a:	2319      	movs	r3, #25
    961c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    961e:	687b      	ldr	r3, [r7, #4]
    9620:	2b00      	cmp	r3, #0
    9622:	d002      	beq.n	962a <_usb_load_calib+0x5a>
    9624:	687b      	ldr	r3, [r7, #4]
    9626:	2b07      	cmp	r3, #7
    9628:	d101      	bne.n	962e <_usb_load_calib+0x5e>
		pad_trim = 6;
    962a:	2306      	movs	r3, #6
    962c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    962e:	68fb      	ldr	r3, [r7, #12]
    9630:	b29b      	uxth	r3, r3
    9632:	019b      	lsls	r3, r3, #6
    9634:	b29b      	uxth	r3, r3
    9636:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    963a:	b29a      	uxth	r2, r3
    963c:	68bb      	ldr	r3, [r7, #8]
    963e:	b29b      	uxth	r3, r3
    9640:	f003 031f 	and.w	r3, r3, #31
    9644:	b29b      	uxth	r3, r3
    9646:	4313      	orrs	r3, r2
    9648:	b29a      	uxth	r2, r3
    964a:	687b      	ldr	r3, [r7, #4]
    964c:	b29b      	uxth	r3, r3
    964e:	031b      	lsls	r3, r3, #12
    9650:	b29b      	uxth	r3, r3
    9652:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    9656:	b29b      	uxth	r3, r3
    9658:	4313      	orrs	r3, r2
    965a:	b29a      	uxth	r2, r3
    965c:	683b      	ldr	r3, [r7, #0]
    965e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    9660:	683a      	ldr	r2, [r7, #0]
    9662:	78d3      	ldrb	r3, [r2, #3]
    9664:	f043 0303 	orr.w	r3, r3, #3
    9668:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    966a:	683a      	ldr	r2, [r7, #0]
    966c:	78d3      	ldrb	r3, [r2, #3]
    966e:	f043 030c 	orr.w	r3, r3, #12
    9672:	70d3      	strb	r3, [r2, #3]
}
    9674:	bf00      	nop
    9676:	3714      	adds	r7, #20
    9678:	46bd      	mov	sp, r7
    967a:	f85d 7b04 	ldr.w	r7, [sp], #4
    967e:	4770      	bx	lr
    9680:	00800084 	.word	0x00800084

00009684 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    9684:	b580      	push	{r7, lr}
    9686:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    9688:	bf00      	nop
    968a:	2203      	movs	r2, #3
    968c:	2100      	movs	r1, #0
    968e:	4804      	ldr	r0, [pc, #16]	; (96a0 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    9690:	4b04      	ldr	r3, [pc, #16]	; (96a4 <_usb_d_dev_wait_dpll_rdy+0x20>)
    9692:	4798      	blx	r3
    9694:	4603      	mov	r3, r0
    9696:	2b03      	cmp	r3, #3
    9698:	d1f7      	bne.n	968a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    969a:	bf00      	nop
    969c:	bd80      	pop	{r7, pc}
    969e:	bf00      	nop
    96a0:	40001000 	.word	0x40001000
    96a4:	000090b9 	.word	0x000090b9

000096a8 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    96a8:	b580      	push	{r7, lr}
    96aa:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    96ac:	480e      	ldr	r0, [pc, #56]	; (96e8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    96ae:	4b0f      	ldr	r3, [pc, #60]	; (96ec <_usb_d_dev_wait_dfll_rdy+0x44>)
    96b0:	4798      	blx	r3
    96b2:	4603      	mov	r3, r0
    96b4:	2b00      	cmp	r3, #0
    96b6:	d00a      	beq.n	96ce <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    96b8:	bf00      	nop
    96ba:	f44f 6110 	mov.w	r1, #2304	; 0x900
    96be:	480a      	ldr	r0, [pc, #40]	; (96e8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    96c0:	4b0b      	ldr	r3, [pc, #44]	; (96f0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    96c2:	4798      	blx	r3
    96c4:	4603      	mov	r3, r0
    96c6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    96ca:	d1f6      	bne.n	96ba <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    96cc:	e009      	b.n	96e2 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    96ce:	bf00      	nop
    96d0:	f44f 7180 	mov.w	r1, #256	; 0x100
    96d4:	4804      	ldr	r0, [pc, #16]	; (96e8 <_usb_d_dev_wait_dfll_rdy+0x40>)
    96d6:	4b06      	ldr	r3, [pc, #24]	; (96f0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    96d8:	4798      	blx	r3
    96da:	4603      	mov	r3, r0
    96dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    96e0:	d1f6      	bne.n	96d0 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    96e2:	bf00      	nop
    96e4:	bd80      	pop	{r7, pc}
    96e6:	bf00      	nop
    96e8:	40001000 	.word	0x40001000
    96ec:	00009117 	.word	0x00009117
    96f0:	000090f1 	.word	0x000090f1

000096f4 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    96f4:	b580      	push	{r7, lr}
    96f6:	b082      	sub	sp, #8
    96f8:	af00      	add	r7, sp, #0
    96fa:	4603      	mov	r3, r0
    96fc:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    96fe:	79fb      	ldrb	r3, [r7, #7]
    9700:	2b00      	cmp	r3, #0
    9702:	d102      	bne.n	970a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    9704:	4b05      	ldr	r3, [pc, #20]	; (971c <_usb_d_dev_wait_clk_rdy+0x28>)
    9706:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    9708:	e004      	b.n	9714 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    970a:	79fb      	ldrb	r3, [r7, #7]
    970c:	2b01      	cmp	r3, #1
    970e:	d101      	bne.n	9714 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9710:	4b03      	ldr	r3, [pc, #12]	; (9720 <_usb_d_dev_wait_clk_rdy+0x2c>)
    9712:	4798      	blx	r3
}
    9714:	bf00      	nop
    9716:	3708      	adds	r7, #8
    9718:	46bd      	mov	sp, r7
    971a:	bd80      	pop	{r7, pc}
    971c:	000096a9 	.word	0x000096a9
    9720:	00009685 	.word	0x00009685

00009724 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9724:	b580      	push	{r7, lr}
    9726:	b082      	sub	sp, #8
    9728:	af00      	add	r7, sp, #0
    972a:	4603      	mov	r3, r0
    972c:	6039      	str	r1, [r7, #0]
    972e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    9730:	683b      	ldr	r3, [r7, #0]
    9732:	b2da      	uxtb	r2, r3
    9734:	79fb      	ldrb	r3, [r7, #7]
    9736:	4619      	mov	r1, r3
    9738:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    973c:	4b02      	ldr	r3, [pc, #8]	; (9748 <_usbd_ep_int_ack+0x24>)
    973e:	4798      	blx	r3
}
    9740:	bf00      	nop
    9742:	3708      	adds	r7, #8
    9744:	46bd      	mov	sp, r7
    9746:	bd80      	pop	{r7, pc}
    9748:	000091fd 	.word	0x000091fd

0000974c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    974c:	b580      	push	{r7, lr}
    974e:	b082      	sub	sp, #8
    9750:	af00      	add	r7, sp, #0
    9752:	4603      	mov	r3, r0
    9754:	6039      	str	r1, [r7, #0]
    9756:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9758:	683b      	ldr	r3, [r7, #0]
    975a:	b2da      	uxtb	r2, r3
    975c:	79fb      	ldrb	r3, [r7, #7]
    975e:	4619      	mov	r1, r3
    9760:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9764:	4b02      	ldr	r3, [pc, #8]	; (9770 <_usbd_ep_int_en+0x24>)
    9766:	4798      	blx	r3
}
    9768:	bf00      	nop
    976a:	3708      	adds	r7, #8
    976c:	46bd      	mov	sp, r7
    976e:	bd80      	pop	{r7, pc}
    9770:	000092d1 	.word	0x000092d1

00009774 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    9774:	b580      	push	{r7, lr}
    9776:	b082      	sub	sp, #8
    9778:	af00      	add	r7, sp, #0
    977a:	4603      	mov	r3, r0
    977c:	6039      	str	r1, [r7, #0]
    977e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    9780:	683b      	ldr	r3, [r7, #0]
    9782:	b2da      	uxtb	r2, r3
    9784:	79fb      	ldrb	r3, [r7, #7]
    9786:	4619      	mov	r1, r3
    9788:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    978c:	4b02      	ldr	r3, [pc, #8]	; (9798 <_usbd_ep_int_dis+0x24>)
    978e:	4798      	blx	r3
}
    9790:	bf00      	nop
    9792:	3708      	adds	r7, #8
    9794:	46bd      	mov	sp, r7
    9796:	bd80      	pop	{r7, pc}
    9798:	000092fd 	.word	0x000092fd

0000979c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    979c:	b580      	push	{r7, lr}
    979e:	b082      	sub	sp, #8
    97a0:	af00      	add	r7, sp, #0
    97a2:	4603      	mov	r3, r0
    97a4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    97a6:	79fb      	ldrb	r3, [r7, #7]
    97a8:	4619      	mov	r1, r3
    97aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97ae:	4b06      	ldr	r3, [pc, #24]	; (97c8 <_usbd_ep_is_ctrl+0x2c>)
    97b0:	4798      	blx	r3
    97b2:	4603      	mov	r3, r0
    97b4:	2b11      	cmp	r3, #17
    97b6:	bf0c      	ite	eq
    97b8:	2301      	moveq	r3, #1
    97ba:	2300      	movne	r3, #0
    97bc:	b2db      	uxtb	r3, r3
}
    97be:	4618      	mov	r0, r3
    97c0:	3708      	adds	r7, #8
    97c2:	46bd      	mov	sp, r7
    97c4:	bd80      	pop	{r7, pc}
    97c6:	bf00      	nop
    97c8:	000093b7 	.word	0x000093b7

000097cc <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    97cc:	b580      	push	{r7, lr}
    97ce:	b082      	sub	sp, #8
    97d0:	af00      	add	r7, sp, #0
    97d2:	4603      	mov	r3, r0
    97d4:	71fb      	strb	r3, [r7, #7]
    97d6:	460b      	mov	r3, r1
    97d8:	71bb      	strb	r3, [r7, #6]
    97da:	4613      	mov	r3, r2
    97dc:	717b      	strb	r3, [r7, #5]
	if (st) {
    97de:	797b      	ldrb	r3, [r7, #5]
    97e0:	2b00      	cmp	r3, #0
    97e2:	d00b      	beq.n	97fc <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    97e4:	79bb      	ldrb	r3, [r7, #6]
    97e6:	2210      	movs	r2, #16
    97e8:	fa02 f303 	lsl.w	r3, r2, r3
    97ec:	b2da      	uxtb	r2, r3
    97ee:	79fb      	ldrb	r3, [r7, #7]
    97f0:	4619      	mov	r1, r3
    97f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97f6:	4b09      	ldr	r3, [pc, #36]	; (981c <_usbd_ep_set_stall+0x50>)
    97f8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    97fa:	e00a      	b.n	9812 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    97fc:	79bb      	ldrb	r3, [r7, #6]
    97fe:	2210      	movs	r2, #16
    9800:	fa02 f303 	lsl.w	r3, r2, r3
    9804:	b2da      	uxtb	r2, r3
    9806:	79fb      	ldrb	r3, [r7, #7]
    9808:	4619      	mov	r1, r3
    980a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    980e:	4b04      	ldr	r3, [pc, #16]	; (9820 <_usbd_ep_set_stall+0x54>)
    9810:	4798      	blx	r3
}
    9812:	bf00      	nop
    9814:	3708      	adds	r7, #8
    9816:	46bd      	mov	sp, r7
    9818:	bd80      	pop	{r7, pc}
    981a:	bf00      	nop
    981c:	00009229 	.word	0x00009229
    9820:	0000927d 	.word	0x0000927d

00009824 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9824:	b580      	push	{r7, lr}
    9826:	b084      	sub	sp, #16
    9828:	af00      	add	r7, sp, #0
    982a:	4603      	mov	r3, r0
    982c:	460a      	mov	r2, r1
    982e:	71fb      	strb	r3, [r7, #7]
    9830:	4613      	mov	r3, r2
    9832:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9834:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9838:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    983a:	79fb      	ldrb	r3, [r7, #7]
    983c:	4619      	mov	r1, r3
    983e:	68f8      	ldr	r0, [r7, #12]
    9840:	4b08      	ldr	r3, [pc, #32]	; (9864 <_usbd_ep_is_stalled+0x40>)
    9842:	4798      	blx	r3
    9844:	4603      	mov	r3, r0
    9846:	4619      	mov	r1, r3
    9848:	79bb      	ldrb	r3, [r7, #6]
    984a:	2210      	movs	r2, #16
    984c:	fa02 f303 	lsl.w	r3, r2, r3
    9850:	400b      	ands	r3, r1
    9852:	2b00      	cmp	r3, #0
    9854:	bf14      	ite	ne
    9856:	2301      	movne	r3, #1
    9858:	2300      	moveq	r3, #0
    985a:	b2db      	uxtb	r3, r3
}
    985c:	4618      	mov	r0, r3
    985e:	3710      	adds	r7, #16
    9860:	46bd      	mov	sp, r7
    9862:	bd80      	pop	{r7, pc}
    9864:	00009255 	.word	0x00009255

00009868 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    9868:	b580      	push	{r7, lr}
    986a:	b084      	sub	sp, #16
    986c:	af00      	add	r7, sp, #0
    986e:	4603      	mov	r3, r0
    9870:	460a      	mov	r2, r1
    9872:	71fb      	strb	r3, [r7, #7]
    9874:	4613      	mov	r3, r2
    9876:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9878:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    987c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    987e:	79fb      	ldrb	r3, [r7, #7]
    9880:	4619      	mov	r1, r3
    9882:	68f8      	ldr	r0, [r7, #12]
    9884:	4b08      	ldr	r3, [pc, #32]	; (98a8 <_usbd_ep_is_stall_sent+0x40>)
    9886:	4798      	blx	r3
    9888:	4603      	mov	r3, r0
    988a:	4619      	mov	r1, r3
    988c:	79bb      	ldrb	r3, [r7, #6]
    988e:	2220      	movs	r2, #32
    9890:	fa02 f303 	lsl.w	r3, r2, r3
    9894:	400b      	ands	r3, r1
    9896:	2b00      	cmp	r3, #0
    9898:	bf14      	ite	ne
    989a:	2301      	movne	r3, #1
    989c:	2300      	moveq	r3, #0
    989e:	b2db      	uxtb	r3, r3
}
    98a0:	4618      	mov	r0, r3
    98a2:	3710      	adds	r7, #16
    98a4:	46bd      	mov	sp, r7
    98a6:	bd80      	pop	{r7, pc}
    98a8:	000091d5 	.word	0x000091d5

000098ac <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    98ac:	b580      	push	{r7, lr}
    98ae:	b082      	sub	sp, #8
    98b0:	af00      	add	r7, sp, #0
    98b2:	4603      	mov	r3, r0
    98b4:	460a      	mov	r2, r1
    98b6:	71fb      	strb	r3, [r7, #7]
    98b8:	4613      	mov	r3, r2
    98ba:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    98bc:	79bb      	ldrb	r3, [r7, #6]
    98be:	2220      	movs	r2, #32
    98c0:	409a      	lsls	r2, r3
    98c2:	79fb      	ldrb	r3, [r7, #7]
    98c4:	4611      	mov	r1, r2
    98c6:	4618      	mov	r0, r3
    98c8:	4b02      	ldr	r3, [pc, #8]	; (98d4 <_usbd_ep_ack_stall+0x28>)
    98ca:	4798      	blx	r3
}
    98cc:	bf00      	nop
    98ce:	3708      	adds	r7, #8
    98d0:	46bd      	mov	sp, r7
    98d2:	bd80      	pop	{r7, pc}
    98d4:	00009725 	.word	0x00009725

000098d8 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    98d8:	b580      	push	{r7, lr}
    98da:	b082      	sub	sp, #8
    98dc:	af00      	add	r7, sp, #0
    98de:	4603      	mov	r3, r0
    98e0:	71fb      	strb	r3, [r7, #7]
    98e2:	460b      	mov	r3, r1
    98e4:	71bb      	strb	r3, [r7, #6]
    98e6:	4613      	mov	r3, r2
    98e8:	717b      	strb	r3, [r7, #5]
	if (en) {
    98ea:	797b      	ldrb	r3, [r7, #5]
    98ec:	2b00      	cmp	r3, #0
    98ee:	d008      	beq.n	9902 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    98f0:	79bb      	ldrb	r3, [r7, #6]
    98f2:	2220      	movs	r2, #32
    98f4:	409a      	lsls	r2, r3
    98f6:	79fb      	ldrb	r3, [r7, #7]
    98f8:	4611      	mov	r1, r2
    98fa:	4618      	mov	r0, r3
    98fc:	4b07      	ldr	r3, [pc, #28]	; (991c <_usbd_ep_int_stall_en+0x44>)
    98fe:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9900:	e007      	b.n	9912 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9902:	79bb      	ldrb	r3, [r7, #6]
    9904:	2220      	movs	r2, #32
    9906:	409a      	lsls	r2, r3
    9908:	79fb      	ldrb	r3, [r7, #7]
    990a:	4611      	mov	r1, r2
    990c:	4618      	mov	r0, r3
    990e:	4b04      	ldr	r3, [pc, #16]	; (9920 <_usbd_ep_int_stall_en+0x48>)
    9910:	4798      	blx	r3
}
    9912:	bf00      	nop
    9914:	3708      	adds	r7, #8
    9916:	46bd      	mov	sp, r7
    9918:	bd80      	pop	{r7, pc}
    991a:	bf00      	nop
    991c:	0000974d 	.word	0x0000974d
    9920:	00009775 	.word	0x00009775

00009924 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9924:	b580      	push	{r7, lr}
    9926:	b082      	sub	sp, #8
    9928:	af00      	add	r7, sp, #0
    992a:	4603      	mov	r3, r0
    992c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    992e:	79fb      	ldrb	r3, [r7, #7]
    9930:	4619      	mov	r1, r3
    9932:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9936:	4b03      	ldr	r3, [pc, #12]	; (9944 <_usbd_ep_stop_setup+0x20>)
    9938:	4798      	blx	r3
}
    993a:	bf00      	nop
    993c:	3708      	adds	r7, #8
    993e:	46bd      	mov	sp, r7
    9940:	bd80      	pop	{r7, pc}
    9942:	bf00      	nop
    9944:	000092a9 	.word	0x000092a9

00009948 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9948:	b580      	push	{r7, lr}
    994a:	b082      	sub	sp, #8
    994c:	af00      	add	r7, sp, #0
    994e:	4603      	mov	r3, r0
    9950:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9952:	79fb      	ldrb	r3, [r7, #7]
    9954:	2210      	movs	r2, #16
    9956:	4619      	mov	r1, r3
    9958:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    995c:	4b05      	ldr	r3, [pc, #20]	; (9974 <_usbd_ep_is_setup+0x2c>)
    995e:	4798      	blx	r3
    9960:	4603      	mov	r3, r0
    9962:	2b00      	cmp	r3, #0
    9964:	bf14      	ite	ne
    9966:	2301      	movne	r3, #1
    9968:	2300      	moveq	r3, #0
    996a:	b2db      	uxtb	r3, r3
}
    996c:	4618      	mov	r0, r3
    996e:	3708      	adds	r7, #8
    9970:	46bd      	mov	sp, r7
    9972:	bd80      	pop	{r7, pc}
    9974:	0000919f 	.word	0x0000919f

00009978 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    9978:	b580      	push	{r7, lr}
    997a:	b082      	sub	sp, #8
    997c:	af00      	add	r7, sp, #0
    997e:	4603      	mov	r3, r0
    9980:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9982:	79fb      	ldrb	r3, [r7, #7]
    9984:	2110      	movs	r1, #16
    9986:	4618      	mov	r0, r3
    9988:	4b02      	ldr	r3, [pc, #8]	; (9994 <_usbd_ep_ack_setup+0x1c>)
    998a:	4798      	blx	r3
}
    998c:	bf00      	nop
    998e:	3708      	adds	r7, #8
    9990:	46bd      	mov	sp, r7
    9992:	bd80      	pop	{r7, pc}
    9994:	00009725 	.word	0x00009725

00009998 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9998:	b580      	push	{r7, lr}
    999a:	b082      	sub	sp, #8
    999c:	af00      	add	r7, sp, #0
    999e:	4603      	mov	r3, r0
    99a0:	71fb      	strb	r3, [r7, #7]
    99a2:	460b      	mov	r3, r1
    99a4:	71bb      	strb	r3, [r7, #6]
    99a6:	4613      	mov	r3, r2
    99a8:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    99aa:	797b      	ldrb	r3, [r7, #5]
    99ac:	2b00      	cmp	r3, #0
    99ae:	d00b      	beq.n	99c8 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    99b0:	79bb      	ldrb	r3, [r7, #6]
    99b2:	2201      	movs	r2, #1
    99b4:	fa02 f303 	lsl.w	r3, r2, r3
    99b8:	b2da      	uxtb	r2, r3
    99ba:	79fb      	ldrb	r3, [r7, #7]
    99bc:	4619      	mov	r1, r3
    99be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99c2:	4b09      	ldr	r3, [pc, #36]	; (99e8 <_usbd_ep_set_toggle+0x50>)
    99c4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    99c6:	e00a      	b.n	99de <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    99c8:	79bb      	ldrb	r3, [r7, #6]
    99ca:	2201      	movs	r2, #1
    99cc:	fa02 f303 	lsl.w	r3, r2, r3
    99d0:	b2da      	uxtb	r2, r3
    99d2:	79fb      	ldrb	r3, [r7, #7]
    99d4:	4619      	mov	r1, r3
    99d6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99da:	4b04      	ldr	r3, [pc, #16]	; (99ec <_usbd_ep_set_toggle+0x54>)
    99dc:	4798      	blx	r3
}
    99de:	bf00      	nop
    99e0:	3708      	adds	r7, #8
    99e2:	46bd      	mov	sp, r7
    99e4:	bd80      	pop	{r7, pc}
    99e6:	bf00      	nop
    99e8:	00009229 	.word	0x00009229
    99ec:	0000927d 	.word	0x0000927d

000099f0 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    99f0:	b580      	push	{r7, lr}
    99f2:	b082      	sub	sp, #8
    99f4:	af00      	add	r7, sp, #0
    99f6:	4603      	mov	r3, r0
    99f8:	460a      	mov	r2, r1
    99fa:	71fb      	strb	r3, [r7, #7]
    99fc:	4613      	mov	r3, r2
    99fe:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9a00:	79bb      	ldrb	r3, [r7, #6]
    9a02:	2201      	movs	r2, #1
    9a04:	409a      	lsls	r2, r3
    9a06:	79fb      	ldrb	r3, [r7, #7]
    9a08:	4611      	mov	r1, r2
    9a0a:	4618      	mov	r0, r3
    9a0c:	4b02      	ldr	r3, [pc, #8]	; (9a18 <_usbd_ep_ack_io_cpt+0x28>)
    9a0e:	4798      	blx	r3
}
    9a10:	bf00      	nop
    9a12:	3708      	adds	r7, #8
    9a14:	46bd      	mov	sp, r7
    9a16:	bd80      	pop	{r7, pc}
    9a18:	00009725 	.word	0x00009725

00009a1c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9a1c:	b480      	push	{r7}
    9a1e:	b085      	sub	sp, #20
    9a20:	af00      	add	r7, sp, #0
    9a22:	4603      	mov	r3, r0
    9a24:	603a      	str	r2, [r7, #0]
    9a26:	71fb      	strb	r3, [r7, #7]
    9a28:	460b      	mov	r3, r1
    9a2a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9a2c:	79fa      	ldrb	r2, [r7, #7]
    9a2e:	79bb      	ldrb	r3, [r7, #6]
    9a30:	0052      	lsls	r2, r2, #1
    9a32:	4413      	add	r3, r2
    9a34:	011b      	lsls	r3, r3, #4
    9a36:	4a06      	ldr	r2, [pc, #24]	; (9a50 <_usbd_ep_set_buf+0x34>)
    9a38:	4413      	add	r3, r2
    9a3a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    9a3c:	68fb      	ldr	r3, [r7, #12]
    9a3e:	683a      	ldr	r2, [r7, #0]
    9a40:	601a      	str	r2, [r3, #0]
}
    9a42:	bf00      	nop
    9a44:	3714      	adds	r7, #20
    9a46:	46bd      	mov	sp, r7
    9a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a4c:	4770      	bx	lr
    9a4e:	bf00      	nop
    9a50:	200011cc 	.word	0x200011cc

00009a54 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9a54:	b480      	push	{r7}
    9a56:	b085      	sub	sp, #20
    9a58:	af00      	add	r7, sp, #0
    9a5a:	4603      	mov	r3, r0
    9a5c:	71fb      	strb	r3, [r7, #7]
    9a5e:	460b      	mov	r3, r1
    9a60:	71bb      	strb	r3, [r7, #6]
    9a62:	4613      	mov	r3, r2
    9a64:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9a66:	79fa      	ldrb	r2, [r7, #7]
    9a68:	79bb      	ldrb	r3, [r7, #6]
    9a6a:	0052      	lsls	r2, r2, #1
    9a6c:	4413      	add	r3, r2
    9a6e:	011b      	lsls	r3, r3, #4
    9a70:	4a08      	ldr	r2, [pc, #32]	; (9a94 <_usbd_ep_set_in_count+0x40>)
    9a72:	4413      	add	r3, r2
    9a74:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9a76:	88bb      	ldrh	r3, [r7, #4]
    9a78:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9a7c:	b299      	uxth	r1, r3
    9a7e:	68fa      	ldr	r2, [r7, #12]
    9a80:	6853      	ldr	r3, [r2, #4]
    9a82:	f361 339b 	bfi	r3, r1, #14, #14
    9a86:	6053      	str	r3, [r2, #4]
}
    9a88:	bf00      	nop
    9a8a:	3714      	adds	r7, #20
    9a8c:	46bd      	mov	sp, r7
    9a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a92:	4770      	bx	lr
    9a94:	200011cc 	.word	0x200011cc

00009a98 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9a98:	b480      	push	{r7}
    9a9a:	b085      	sub	sp, #20
    9a9c:	af00      	add	r7, sp, #0
    9a9e:	4603      	mov	r3, r0
    9aa0:	71fb      	strb	r3, [r7, #7]
    9aa2:	460b      	mov	r3, r1
    9aa4:	71bb      	strb	r3, [r7, #6]
    9aa6:	4613      	mov	r3, r2
    9aa8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9aaa:	79fa      	ldrb	r2, [r7, #7]
    9aac:	79bb      	ldrb	r3, [r7, #6]
    9aae:	0052      	lsls	r2, r2, #1
    9ab0:	4413      	add	r3, r2
    9ab2:	011b      	lsls	r3, r3, #4
    9ab4:	4a08      	ldr	r2, [pc, #32]	; (9ad8 <_usbd_ep_set_in_size+0x40>)
    9ab6:	4413      	add	r3, r2
    9ab8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9aba:	88bb      	ldrh	r3, [r7, #4]
    9abc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9ac0:	b299      	uxth	r1, r3
    9ac2:	68fa      	ldr	r2, [r7, #12]
    9ac4:	6853      	ldr	r3, [r2, #4]
    9ac6:	f361 030d 	bfi	r3, r1, #0, #14
    9aca:	6053      	str	r3, [r2, #4]
}
    9acc:	bf00      	nop
    9ace:	3714      	adds	r7, #20
    9ad0:	46bd      	mov	sp, r7
    9ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ad6:	4770      	bx	lr
    9ad8:	200011cc 	.word	0x200011cc

00009adc <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9adc:	b480      	push	{r7}
    9ade:	b085      	sub	sp, #20
    9ae0:	af00      	add	r7, sp, #0
    9ae2:	4603      	mov	r3, r0
    9ae4:	71fb      	strb	r3, [r7, #7]
    9ae6:	460b      	mov	r3, r1
    9ae8:	71bb      	strb	r3, [r7, #6]
    9aea:	4613      	mov	r3, r2
    9aec:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9aee:	79fa      	ldrb	r2, [r7, #7]
    9af0:	79bb      	ldrb	r3, [r7, #6]
    9af2:	0052      	lsls	r2, r2, #1
    9af4:	4413      	add	r3, r2
    9af6:	011b      	lsls	r3, r3, #4
    9af8:	4a08      	ldr	r2, [pc, #32]	; (9b1c <_usbd_ep_set_out_count+0x40>)
    9afa:	4413      	add	r3, r2
    9afc:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9afe:	88bb      	ldrh	r3, [r7, #4]
    9b00:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9b04:	b299      	uxth	r1, r3
    9b06:	68fa      	ldr	r2, [r7, #12]
    9b08:	6853      	ldr	r3, [r2, #4]
    9b0a:	f361 030d 	bfi	r3, r1, #0, #14
    9b0e:	6053      	str	r3, [r2, #4]
}
    9b10:	bf00      	nop
    9b12:	3714      	adds	r7, #20
    9b14:	46bd      	mov	sp, r7
    9b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b1a:	4770      	bx	lr
    9b1c:	200011cc 	.word	0x200011cc

00009b20 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9b20:	b480      	push	{r7}
    9b22:	b085      	sub	sp, #20
    9b24:	af00      	add	r7, sp, #0
    9b26:	4603      	mov	r3, r0
    9b28:	71fb      	strb	r3, [r7, #7]
    9b2a:	460b      	mov	r3, r1
    9b2c:	71bb      	strb	r3, [r7, #6]
    9b2e:	4613      	mov	r3, r2
    9b30:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9b32:	79fa      	ldrb	r2, [r7, #7]
    9b34:	79bb      	ldrb	r3, [r7, #6]
    9b36:	0052      	lsls	r2, r2, #1
    9b38:	4413      	add	r3, r2
    9b3a:	011b      	lsls	r3, r3, #4
    9b3c:	4a08      	ldr	r2, [pc, #32]	; (9b60 <_usbd_ep_set_out_size+0x40>)
    9b3e:	4413      	add	r3, r2
    9b40:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9b42:	88bb      	ldrh	r3, [r7, #4]
    9b44:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9b48:	b299      	uxth	r1, r3
    9b4a:	68fa      	ldr	r2, [r7, #12]
    9b4c:	6853      	ldr	r3, [r2, #4]
    9b4e:	f361 339b 	bfi	r3, r1, #14, #14
    9b52:	6053      	str	r3, [r2, #4]
}
    9b54:	bf00      	nop
    9b56:	3714      	adds	r7, #20
    9b58:	46bd      	mov	sp, r7
    9b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b5e:	4770      	bx	lr
    9b60:	200011cc 	.word	0x200011cc

00009b64 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9b64:	b580      	push	{r7, lr}
    9b66:	b084      	sub	sp, #16
    9b68:	af00      	add	r7, sp, #0
    9b6a:	60ba      	str	r2, [r7, #8]
    9b6c:	607b      	str	r3, [r7, #4]
    9b6e:	4603      	mov	r3, r0
    9b70:	73fb      	strb	r3, [r7, #15]
    9b72:	460b      	mov	r3, r1
    9b74:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    9b76:	68bb      	ldr	r3, [r7, #8]
    9b78:	b29a      	uxth	r2, r3
    9b7a:	7bb9      	ldrb	r1, [r7, #14]
    9b7c:	7bfb      	ldrb	r3, [r7, #15]
    9b7e:	4618      	mov	r0, r3
    9b80:	4b06      	ldr	r3, [pc, #24]	; (9b9c <_usbd_ep_set_in_trans+0x38>)
    9b82:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    9b84:	687b      	ldr	r3, [r7, #4]
    9b86:	b29a      	uxth	r2, r3
    9b88:	7bb9      	ldrb	r1, [r7, #14]
    9b8a:	7bfb      	ldrb	r3, [r7, #15]
    9b8c:	4618      	mov	r0, r3
    9b8e:	4b04      	ldr	r3, [pc, #16]	; (9ba0 <_usbd_ep_set_in_trans+0x3c>)
    9b90:	4798      	blx	r3
}
    9b92:	bf00      	nop
    9b94:	3710      	adds	r7, #16
    9b96:	46bd      	mov	sp, r7
    9b98:	bd80      	pop	{r7, pc}
    9b9a:	bf00      	nop
    9b9c:	00009a99 	.word	0x00009a99
    9ba0:	00009a55 	.word	0x00009a55

00009ba4 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9ba4:	b580      	push	{r7, lr}
    9ba6:	b084      	sub	sp, #16
    9ba8:	af00      	add	r7, sp, #0
    9baa:	60ba      	str	r2, [r7, #8]
    9bac:	607b      	str	r3, [r7, #4]
    9bae:	4603      	mov	r3, r0
    9bb0:	73fb      	strb	r3, [r7, #15]
    9bb2:	460b      	mov	r3, r1
    9bb4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    9bb6:	68bb      	ldr	r3, [r7, #8]
    9bb8:	b29a      	uxth	r2, r3
    9bba:	7bb9      	ldrb	r1, [r7, #14]
    9bbc:	7bfb      	ldrb	r3, [r7, #15]
    9bbe:	4618      	mov	r0, r3
    9bc0:	4b06      	ldr	r3, [pc, #24]	; (9bdc <_usbd_ep_set_out_trans+0x38>)
    9bc2:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9bc4:	687b      	ldr	r3, [r7, #4]
    9bc6:	b29a      	uxth	r2, r3
    9bc8:	7bb9      	ldrb	r1, [r7, #14]
    9bca:	7bfb      	ldrb	r3, [r7, #15]
    9bcc:	4618      	mov	r0, r3
    9bce:	4b04      	ldr	r3, [pc, #16]	; (9be0 <_usbd_ep_set_out_trans+0x3c>)
    9bd0:	4798      	blx	r3
}
    9bd2:	bf00      	nop
    9bd4:	3710      	adds	r7, #16
    9bd6:	46bd      	mov	sp, r7
    9bd8:	bd80      	pop	{r7, pc}
    9bda:	bf00      	nop
    9bdc:	00009b21 	.word	0x00009b21
    9be0:	00009add 	.word	0x00009add

00009be4 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9be4:	b480      	push	{r7}
    9be6:	b085      	sub	sp, #20
    9be8:	af00      	add	r7, sp, #0
    9bea:	4603      	mov	r3, r0
    9bec:	460a      	mov	r2, r1
    9bee:	71fb      	strb	r3, [r7, #7]
    9bf0:	4613      	mov	r3, r2
    9bf2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9bf4:	79fa      	ldrb	r2, [r7, #7]
    9bf6:	79bb      	ldrb	r3, [r7, #6]
    9bf8:	0052      	lsls	r2, r2, #1
    9bfa:	4413      	add	r3, r2
    9bfc:	011b      	lsls	r3, r3, #4
    9bfe:	4a06      	ldr	r2, [pc, #24]	; (9c18 <_usbd_ep_clear_bank_status+0x34>)
    9c00:	4413      	add	r3, r2
    9c02:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9c04:	68fb      	ldr	r3, [r7, #12]
    9c06:	2200      	movs	r2, #0
    9c08:	729a      	strb	r2, [r3, #10]
}
    9c0a:	bf00      	nop
    9c0c:	3714      	adds	r7, #20
    9c0e:	46bd      	mov	sp, r7
    9c10:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c14:	4770      	bx	lr
    9c16:	bf00      	nop
    9c18:	200011cc 	.word	0x200011cc

00009c1c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9c1c:	b580      	push	{r7, lr}
    9c1e:	b082      	sub	sp, #8
    9c20:	af00      	add	r7, sp, #0
    9c22:	4603      	mov	r3, r0
    9c24:	71fb      	strb	r3, [r7, #7]
    9c26:	460b      	mov	r3, r1
    9c28:	71bb      	strb	r3, [r7, #6]
    9c2a:	4613      	mov	r3, r2
    9c2c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9c2e:	797b      	ldrb	r3, [r7, #5]
    9c30:	2b00      	cmp	r3, #0
    9c32:	d00b      	beq.n	9c4c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9c34:	79bb      	ldrb	r3, [r7, #6]
    9c36:	2240      	movs	r2, #64	; 0x40
    9c38:	fa02 f303 	lsl.w	r3, r2, r3
    9c3c:	b2da      	uxtb	r2, r3
    9c3e:	79fb      	ldrb	r3, [r7, #7]
    9c40:	4619      	mov	r1, r3
    9c42:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c46:	4b09      	ldr	r3, [pc, #36]	; (9c6c <_usbd_ep_set_in_rdy+0x50>)
    9c48:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9c4a:	e00a      	b.n	9c62 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9c4c:	79bb      	ldrb	r3, [r7, #6]
    9c4e:	2240      	movs	r2, #64	; 0x40
    9c50:	fa02 f303 	lsl.w	r3, r2, r3
    9c54:	b2da      	uxtb	r2, r3
    9c56:	79fb      	ldrb	r3, [r7, #7]
    9c58:	4619      	mov	r1, r3
    9c5a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c5e:	4b04      	ldr	r3, [pc, #16]	; (9c70 <_usbd_ep_set_in_rdy+0x54>)
    9c60:	4798      	blx	r3
}
    9c62:	bf00      	nop
    9c64:	3708      	adds	r7, #8
    9c66:	46bd      	mov	sp, r7
    9c68:	bd80      	pop	{r7, pc}
    9c6a:	bf00      	nop
    9c6c:	00009229 	.word	0x00009229
    9c70:	0000927d 	.word	0x0000927d

00009c74 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9c74:	b580      	push	{r7, lr}
    9c76:	b082      	sub	sp, #8
    9c78:	af00      	add	r7, sp, #0
    9c7a:	4603      	mov	r3, r0
    9c7c:	71fb      	strb	r3, [r7, #7]
    9c7e:	460b      	mov	r3, r1
    9c80:	71bb      	strb	r3, [r7, #6]
    9c82:	4613      	mov	r3, r2
    9c84:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9c86:	797b      	ldrb	r3, [r7, #5]
    9c88:	2b00      	cmp	r3, #0
    9c8a:	d00b      	beq.n	9ca4 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9c8c:	79bb      	ldrb	r3, [r7, #6]
    9c8e:	2240      	movs	r2, #64	; 0x40
    9c90:	fa02 f303 	lsl.w	r3, r2, r3
    9c94:	b2da      	uxtb	r2, r3
    9c96:	79fb      	ldrb	r3, [r7, #7]
    9c98:	4619      	mov	r1, r3
    9c9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c9e:	4b09      	ldr	r3, [pc, #36]	; (9cc4 <_usbd_ep_set_out_rdy+0x50>)
    9ca0:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9ca2:	e00a      	b.n	9cba <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9ca4:	79bb      	ldrb	r3, [r7, #6]
    9ca6:	2240      	movs	r2, #64	; 0x40
    9ca8:	fa02 f303 	lsl.w	r3, r2, r3
    9cac:	b2da      	uxtb	r2, r3
    9cae:	79fb      	ldrb	r3, [r7, #7]
    9cb0:	4619      	mov	r1, r3
    9cb2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cb6:	4b04      	ldr	r3, [pc, #16]	; (9cc8 <_usbd_ep_set_out_rdy+0x54>)
    9cb8:	4798      	blx	r3
}
    9cba:	bf00      	nop
    9cbc:	3708      	adds	r7, #8
    9cbe:	46bd      	mov	sp, r7
    9cc0:	bd80      	pop	{r7, pc}
    9cc2:	bf00      	nop
    9cc4:	0000927d 	.word	0x0000927d
    9cc8:	00009229 	.word	0x00009229

00009ccc <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9ccc:	b480      	push	{r7}
    9cce:	b083      	sub	sp, #12
    9cd0:	af00      	add	r7, sp, #0
    9cd2:	4603      	mov	r3, r0
    9cd4:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9cd6:	88fb      	ldrh	r3, [r7, #6]
    9cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9cdc:	d820      	bhi.n	9d20 <_usbd_ep_pcksize_size+0x54>
    9cde:	88fb      	ldrh	r3, [r7, #6]
    9ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9ce4:	d81a      	bhi.n	9d1c <_usbd_ep_pcksize_size+0x50>
    9ce6:	88fb      	ldrh	r3, [r7, #6]
    9ce8:	2b80      	cmp	r3, #128	; 0x80
    9cea:	d815      	bhi.n	9d18 <_usbd_ep_pcksize_size+0x4c>
    9cec:	88fb      	ldrh	r3, [r7, #6]
    9cee:	2b40      	cmp	r3, #64	; 0x40
    9cf0:	d810      	bhi.n	9d14 <_usbd_ep_pcksize_size+0x48>
    9cf2:	88fb      	ldrh	r3, [r7, #6]
    9cf4:	2b20      	cmp	r3, #32
    9cf6:	d80b      	bhi.n	9d10 <_usbd_ep_pcksize_size+0x44>
    9cf8:	88fb      	ldrh	r3, [r7, #6]
    9cfa:	2b10      	cmp	r3, #16
    9cfc:	d806      	bhi.n	9d0c <_usbd_ep_pcksize_size+0x40>
    9cfe:	88fb      	ldrh	r3, [r7, #6]
    9d00:	2b08      	cmp	r3, #8
    9d02:	bf8c      	ite	hi
    9d04:	2301      	movhi	r3, #1
    9d06:	2300      	movls	r3, #0
    9d08:	b2db      	uxtb	r3, r3
    9d0a:	e00a      	b.n	9d22 <_usbd_ep_pcksize_size+0x56>
    9d0c:	2302      	movs	r3, #2
    9d0e:	e008      	b.n	9d22 <_usbd_ep_pcksize_size+0x56>
    9d10:	2303      	movs	r3, #3
    9d12:	e006      	b.n	9d22 <_usbd_ep_pcksize_size+0x56>
    9d14:	2304      	movs	r3, #4
    9d16:	e004      	b.n	9d22 <_usbd_ep_pcksize_size+0x56>
    9d18:	2305      	movs	r3, #5
    9d1a:	e002      	b.n	9d22 <_usbd_ep_pcksize_size+0x56>
    9d1c:	2306      	movs	r3, #6
    9d1e:	e000      	b.n	9d22 <_usbd_ep_pcksize_size+0x56>
    9d20:	2307      	movs	r3, #7
}
    9d22:	4618      	mov	r0, r3
    9d24:	370c      	adds	r7, #12
    9d26:	46bd      	mov	sp, r7
    9d28:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d2c:	4770      	bx	lr
	...

00009d30 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9d30:	b480      	push	{r7}
    9d32:	b085      	sub	sp, #20
    9d34:	af00      	add	r7, sp, #0
    9d36:	4603      	mov	r3, r0
    9d38:	460a      	mov	r2, r1
    9d3a:	71fb      	strb	r3, [r7, #7]
    9d3c:	4613      	mov	r3, r2
    9d3e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9d40:	79fb      	ldrb	r3, [r7, #7]
    9d42:	2b00      	cmp	r3, #0
    9d44:	d008      	beq.n	9d58 <_usb_d_dev_ept+0x28>
    9d46:	79bb      	ldrb	r3, [r7, #6]
    9d48:	2b00      	cmp	r3, #0
    9d4a:	d003      	beq.n	9d54 <_usb_d_dev_ept+0x24>
    9d4c:	79fb      	ldrb	r3, [r7, #7]
    9d4e:	3304      	adds	r3, #4
    9d50:	b2db      	uxtb	r3, r3
    9d52:	e002      	b.n	9d5a <_usb_d_dev_ept+0x2a>
    9d54:	79fb      	ldrb	r3, [r7, #7]
    9d56:	e000      	b.n	9d5a <_usb_d_dev_ept+0x2a>
    9d58:	2300      	movs	r3, #0
    9d5a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9d5c:	7bfa      	ldrb	r2, [r7, #15]
    9d5e:	4613      	mov	r3, r2
    9d60:	009b      	lsls	r3, r3, #2
    9d62:	4413      	add	r3, r2
    9d64:	009b      	lsls	r3, r3, #2
    9d66:	3310      	adds	r3, #16
    9d68:	4a04      	ldr	r2, [pc, #16]	; (9d7c <_usb_d_dev_ept+0x4c>)
    9d6a:	4413      	add	r3, r2
    9d6c:	3304      	adds	r3, #4
}
    9d6e:	4618      	mov	r0, r3
    9d70:	3714      	adds	r7, #20
    9d72:	46bd      	mov	sp, r7
    9d74:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d78:	4770      	bx	lr
    9d7a:	bf00      	nop
    9d7c:	20001104 	.word	0x20001104

00009d80 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9d80:	b580      	push	{r7, lr}
    9d82:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9d84:	2104      	movs	r1, #4
    9d86:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d8a:	4b03      	ldr	r3, [pc, #12]	; (9d98 <_usb_d_dev_sof+0x18>)
    9d8c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9d8e:	4b03      	ldr	r3, [pc, #12]	; (9d9c <_usb_d_dev_sof+0x1c>)
    9d90:	681b      	ldr	r3, [r3, #0]
    9d92:	4798      	blx	r3
}
    9d94:	bf00      	nop
    9d96:	bd80      	pop	{r7, pc}
    9d98:	000093f7 	.word	0x000093f7
    9d9c:	20001104 	.word	0x20001104

00009da0 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9da0:	b580      	push	{r7, lr}
    9da2:	b084      	sub	sp, #16
    9da4:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9da6:	2300      	movs	r3, #0
    9da8:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9daa:	f240 2101 	movw	r1, #513	; 0x201
    9dae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9db2:	4b1a      	ldr	r3, [pc, #104]	; (9e1c <_usb_d_dev_lpmsusp+0x7c>)
    9db4:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9db6:	f240 2101 	movw	r1, #513	; 0x201
    9dba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dbe:	4b18      	ldr	r3, [pc, #96]	; (9e20 <_usb_d_dev_lpmsusp+0x80>)
    9dc0:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9dc2:	2170      	movs	r1, #112	; 0x70
    9dc4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dc8:	4b16      	ldr	r3, [pc, #88]	; (9e24 <_usb_d_dev_lpmsusp+0x84>)
    9dca:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9dcc:	2300      	movs	r3, #0
    9dce:	73fb      	strb	r3, [r7, #15]
    9dd0:	e018      	b.n	9e04 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9dd2:	7bfb      	ldrb	r3, [r7, #15]
    9dd4:	015b      	lsls	r3, r3, #5
    9dd6:	4a14      	ldr	r2, [pc, #80]	; (9e28 <_usb_d_dev_lpmsusp+0x88>)
    9dd8:	4413      	add	r3, r2
    9dda:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9ddc:	687b      	ldr	r3, [r7, #4]
    9dde:	891b      	ldrh	r3, [r3, #8]
    9de0:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9de4:	b2db      	uxtb	r3, r3
    9de6:	2b03      	cmp	r3, #3
    9de8:	d109      	bne.n	9dfe <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9dea:	687b      	ldr	r3, [r7, #4]
    9dec:	891b      	ldrh	r3, [r3, #8]
    9dee:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9df2:	b29b      	uxth	r3, r3
    9df4:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9df6:	687b      	ldr	r3, [r7, #4]
    9df8:	2200      	movs	r2, #0
    9dfa:	811a      	strh	r2, [r3, #8]
			break;
    9dfc:	e005      	b.n	9e0a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9dfe:	7bfb      	ldrb	r3, [r7, #15]
    9e00:	3301      	adds	r3, #1
    9e02:	73fb      	strb	r3, [r7, #15]
    9e04:	7bfb      	ldrb	r3, [r7, #15]
    9e06:	2b03      	cmp	r3, #3
    9e08:	d9e3      	bls.n	9dd2 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9e0a:	4b08      	ldr	r3, [pc, #32]	; (9e2c <_usb_d_dev_lpmsusp+0x8c>)
    9e0c:	685b      	ldr	r3, [r3, #4]
    9e0e:	68b9      	ldr	r1, [r7, #8]
    9e10:	2003      	movs	r0, #3
    9e12:	4798      	blx	r3
}
    9e14:	bf00      	nop
    9e16:	3710      	adds	r7, #16
    9e18:	46bd      	mov	sp, r7
    9e1a:	bd80      	pop	{r7, pc}
    9e1c:	000093f7 	.word	0x000093f7
    9e20:	0000944d 	.word	0x0000944d
    9e24:	00009415 	.word	0x00009415
    9e28:	200011cc 	.word	0x200011cc
    9e2c:	20001104 	.word	0x20001104

00009e30 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9e30:	b580      	push	{r7, lr}
    9e32:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9e34:	2180      	movs	r1, #128	; 0x80
    9e36:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e3a:	4b04      	ldr	r3, [pc, #16]	; (9e4c <_usb_d_dev_ramerr+0x1c>)
    9e3c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9e3e:	4b04      	ldr	r3, [pc, #16]	; (9e50 <_usb_d_dev_ramerr+0x20>)
    9e40:	685b      	ldr	r3, [r3, #4]
    9e42:	2100      	movs	r1, #0
    9e44:	2005      	movs	r0, #5
    9e46:	4798      	blx	r3
}
    9e48:	bf00      	nop
    9e4a:	bd80      	pop	{r7, pc}
    9e4c:	000093f7 	.word	0x000093f7
    9e50:	20001104 	.word	0x20001104

00009e54 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9e54:	b580      	push	{r7, lr}
    9e56:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9e58:	2170      	movs	r1, #112	; 0x70
    9e5a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e5e:	4b0b      	ldr	r3, [pc, #44]	; (9e8c <_usb_d_dev_wakeup+0x38>)
    9e60:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9e62:	2170      	movs	r1, #112	; 0x70
    9e64:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e68:	4b09      	ldr	r3, [pc, #36]	; (9e90 <_usb_d_dev_wakeup+0x3c>)
    9e6a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9e6c:	f240 2101 	movw	r1, #513	; 0x201
    9e70:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e74:	4b07      	ldr	r3, [pc, #28]	; (9e94 <_usb_d_dev_wakeup+0x40>)
    9e76:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9e78:	2000      	movs	r0, #0
    9e7a:	4b07      	ldr	r3, [pc, #28]	; (9e98 <_usb_d_dev_wakeup+0x44>)
    9e7c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9e7e:	4b07      	ldr	r3, [pc, #28]	; (9e9c <_usb_d_dev_wakeup+0x48>)
    9e80:	685b      	ldr	r3, [r3, #4]
    9e82:	2100      	movs	r1, #0
    9e84:	2002      	movs	r0, #2
    9e86:	4798      	blx	r3
}
    9e88:	bf00      	nop
    9e8a:	bd80      	pop	{r7, pc}
    9e8c:	000093f7 	.word	0x000093f7
    9e90:	0000944d 	.word	0x0000944d
    9e94:	00009415 	.word	0x00009415
    9e98:	000096f5 	.word	0x000096f5
    9e9c:	20001104 	.word	0x20001104

00009ea0 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9ea0:	b580      	push	{r7, lr}
    9ea2:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9ea4:	2200      	movs	r2, #0
    9ea6:	2100      	movs	r1, #0
    9ea8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9eac:	4b0d      	ldr	r3, [pc, #52]	; (9ee4 <_usb_d_dev_reset+0x44>)
    9eae:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9eb0:	2108      	movs	r1, #8
    9eb2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9eb6:	4b0c      	ldr	r3, [pc, #48]	; (9ee8 <_usb_d_dev_reset+0x48>)
    9eb8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9eba:	2170      	movs	r1, #112	; 0x70
    9ebc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ec0:	4b0a      	ldr	r3, [pc, #40]	; (9eec <_usb_d_dev_reset+0x4c>)
    9ec2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9ec4:	f240 2101 	movw	r1, #513	; 0x201
    9ec8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ecc:	4b08      	ldr	r3, [pc, #32]	; (9ef0 <_usb_d_dev_reset+0x50>)
    9ece:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9ed0:	4b08      	ldr	r3, [pc, #32]	; (9ef4 <_usb_d_dev_reset+0x54>)
    9ed2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9ed4:	4b08      	ldr	r3, [pc, #32]	; (9ef8 <_usb_d_dev_reset+0x58>)
    9ed6:	685b      	ldr	r3, [r3, #4]
    9ed8:	2100      	movs	r1, #0
    9eda:	2001      	movs	r0, #1
    9edc:	4798      	blx	r3
}
    9ede:	bf00      	nop
    9ee0:	bd80      	pop	{r7, pc}
    9ee2:	bf00      	nop
    9ee4:	0000938d 	.word	0x0000938d
    9ee8:	000093f7 	.word	0x000093f7
    9eec:	0000944d 	.word	0x0000944d
    9ef0:	00009415 	.word	0x00009415
    9ef4:	0000aa5d 	.word	0x0000aa5d
    9ef8:	20001104 	.word	0x20001104

00009efc <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9efc:	b580      	push	{r7, lr}
    9efe:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9f00:	f240 2101 	movw	r1, #513	; 0x201
    9f04:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f08:	4b09      	ldr	r3, [pc, #36]	; (9f30 <_usb_d_dev_suspend+0x34>)
    9f0a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9f0c:	f240 2101 	movw	r1, #513	; 0x201
    9f10:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f14:	4b07      	ldr	r3, [pc, #28]	; (9f34 <_usb_d_dev_suspend+0x38>)
    9f16:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9f18:	2170      	movs	r1, #112	; 0x70
    9f1a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f1e:	4b06      	ldr	r3, [pc, #24]	; (9f38 <_usb_d_dev_suspend+0x3c>)
    9f20:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9f22:	4b06      	ldr	r3, [pc, #24]	; (9f3c <_usb_d_dev_suspend+0x40>)
    9f24:	685b      	ldr	r3, [r3, #4]
    9f26:	2100      	movs	r1, #0
    9f28:	2004      	movs	r0, #4
    9f2a:	4798      	blx	r3
}
    9f2c:	bf00      	nop
    9f2e:	bd80      	pop	{r7, pc}
    9f30:	000093f7 	.word	0x000093f7
    9f34:	0000944d 	.word	0x0000944d
    9f38:	00009415 	.word	0x00009415
    9f3c:	20001104 	.word	0x20001104

00009f40 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9f40:	b580      	push	{r7, lr}
    9f42:	b082      	sub	sp, #8
    9f44:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9f46:	2301      	movs	r3, #1
    9f48:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9f4a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f4e:	4b22      	ldr	r3, [pc, #136]	; (9fd8 <_usb_d_dev_handle_nep+0x98>)
    9f50:	4798      	blx	r3
    9f52:	4603      	mov	r3, r0
    9f54:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9f56:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f5a:	4b20      	ldr	r3, [pc, #128]	; (9fdc <_usb_d_dev_handle_nep+0x9c>)
    9f5c:	4798      	blx	r3
    9f5e:	4603      	mov	r3, r0
    9f60:	461a      	mov	r2, r3
    9f62:	88bb      	ldrh	r3, [r7, #4]
    9f64:	4013      	ands	r3, r2
    9f66:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9f68:	88bb      	ldrh	r3, [r7, #4]
    9f6a:	f003 0304 	and.w	r3, r3, #4
    9f6e:	2b00      	cmp	r3, #0
    9f70:	d003      	beq.n	9f7a <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9f72:	4b1b      	ldr	r3, [pc, #108]	; (9fe0 <_usb_d_dev_handle_nep+0xa0>)
    9f74:	4798      	blx	r3
		return true;
    9f76:	2301      	movs	r3, #1
    9f78:	e02a      	b.n	9fd0 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9f7a:	88bb      	ldrh	r3, [r7, #4]
    9f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9f80:	2b00      	cmp	r3, #0
    9f82:	d002      	beq.n	9f8a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9f84:	4b17      	ldr	r3, [pc, #92]	; (9fe4 <_usb_d_dev_handle_nep+0xa4>)
    9f86:	4798      	blx	r3
    9f88:	e021      	b.n	9fce <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9f8a:	88bb      	ldrh	r3, [r7, #4]
    9f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9f90:	2b00      	cmp	r3, #0
    9f92:	d002      	beq.n	9f9a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9f94:	4b14      	ldr	r3, [pc, #80]	; (9fe8 <_usb_d_dev_handle_nep+0xa8>)
    9f96:	4798      	blx	r3
    9f98:	e019      	b.n	9fce <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9f9a:	88bb      	ldrh	r3, [r7, #4]
    9f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9fa0:	2b00      	cmp	r3, #0
    9fa2:	d002      	beq.n	9faa <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9fa4:	4b11      	ldr	r3, [pc, #68]	; (9fec <_usb_d_dev_handle_nep+0xac>)
    9fa6:	4798      	blx	r3
    9fa8:	e011      	b.n	9fce <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9faa:	88bb      	ldrh	r3, [r7, #4]
    9fac:	f003 0308 	and.w	r3, r3, #8
    9fb0:	2b00      	cmp	r3, #0
    9fb2:	d002      	beq.n	9fba <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9fb4:	4b0e      	ldr	r3, [pc, #56]	; (9ff0 <_usb_d_dev_handle_nep+0xb0>)
    9fb6:	4798      	blx	r3
    9fb8:	e009      	b.n	9fce <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9fba:	88bb      	ldrh	r3, [r7, #4]
    9fbc:	f003 0301 	and.w	r3, r3, #1
    9fc0:	2b00      	cmp	r3, #0
    9fc2:	d002      	beq.n	9fca <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9fc4:	4b0b      	ldr	r3, [pc, #44]	; (9ff4 <_usb_d_dev_handle_nep+0xb4>)
    9fc6:	4798      	blx	r3
    9fc8:	e001      	b.n	9fce <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9fca:	2300      	movs	r3, #0
    9fcc:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9fce:	79fb      	ldrb	r3, [r7, #7]
}
    9fd0:	4618      	mov	r0, r3
    9fd2:	3708      	adds	r7, #8
    9fd4:	46bd      	mov	sp, r7
    9fd6:	bd80      	pop	{r7, pc}
    9fd8:	000093dd 	.word	0x000093dd
    9fdc:	00009433 	.word	0x00009433
    9fe0:	00009d81 	.word	0x00009d81
    9fe4:	00009da1 	.word	0x00009da1
    9fe8:	00009e31 	.word	0x00009e31
    9fec:	00009e55 	.word	0x00009e55
    9ff0:	00009ea1 	.word	0x00009ea1
    9ff4:	00009efd 	.word	0x00009efd

00009ff8 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9ff8:	b590      	push	{r4, r7, lr}
    9ffa:	b089      	sub	sp, #36	; 0x24
    9ffc:	af00      	add	r7, sp, #0
    9ffe:	6078      	str	r0, [r7, #4]
    a000:	460b      	mov	r3, r1
    a002:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    a004:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a008:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    a00a:	687b      	ldr	r3, [r7, #4]
    a00c:	7c9b      	ldrb	r3, [r3, #18]
    a00e:	f003 030f 	and.w	r3, r3, #15
    a012:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a014:	7dfb      	ldrb	r3, [r7, #23]
    a016:	015b      	lsls	r3, r3, #5
    a018:	4a73      	ldr	r2, [pc, #460]	; (a1e8 <_usb_d_dev_in_next+0x1f0>)
    a01a:	4413      	add	r3, r2
    a01c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    a01e:	78fb      	ldrb	r3, [r7, #3]
    a020:	2b00      	cmp	r3, #0
    a022:	d006      	beq.n	a032 <_usb_d_dev_in_next+0x3a>
    a024:	693b      	ldr	r3, [r7, #16]
    a026:	3310      	adds	r3, #16
    a028:	685b      	ldr	r3, [r3, #4]
    a02a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a02e:	b29b      	uxth	r3, r3
    a030:	e000      	b.n	a034 <_usb_d_dev_in_next+0x3c>
    a032:	2300      	movs	r3, #0
    a034:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    a036:	687b      	ldr	r3, [r7, #4]
    a038:	8a1b      	ldrh	r3, [r3, #16]
    a03a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a03e:	4293      	cmp	r3, r2
    a040:	d103      	bne.n	a04a <_usb_d_dev_in_next+0x52>
    a042:	687b      	ldr	r3, [r7, #4]
    a044:	8a1b      	ldrh	r3, [r3, #16]
    a046:	b21b      	sxth	r3, r3
    a048:	e004      	b.n	a054 <_usb_d_dev_in_next+0x5c>
    a04a:	687b      	ldr	r3, [r7, #4]
    a04c:	8a1b      	ldrh	r3, [r3, #16]
    a04e:	3b01      	subs	r3, #1
    a050:	b29b      	uxth	r3, r3
    a052:	b21b      	sxth	r3, r3
    a054:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    a058:	4013      	ands	r3, r2
    a05a:	b21b      	sxth	r3, r3
    a05c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    a05e:	2300      	movs	r3, #0
    a060:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    a062:	687b      	ldr	r3, [r7, #4]
    a064:	7cdb      	ldrb	r3, [r3, #19]
    a066:	f003 0307 	and.w	r3, r3, #7
    a06a:	b2db      	uxtb	r3, r3
    a06c:	2b01      	cmp	r3, #1
    a06e:	bf0c      	ite	eq
    a070:	2301      	moveq	r3, #1
    a072:	2300      	movne	r3, #0
    a074:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    a076:	78fb      	ldrb	r3, [r7, #3]
    a078:	2b00      	cmp	r3, #0
    a07a:	d004      	beq.n	a086 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    a07c:	7dfb      	ldrb	r3, [r7, #23]
    a07e:	2101      	movs	r1, #1
    a080:	4618      	mov	r0, r3
    a082:	4b5a      	ldr	r3, [pc, #360]	; (a1ec <_usb_d_dev_in_next+0x1f4>)
    a084:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    a086:	687b      	ldr	r3, [r7, #4]
    a088:	689a      	ldr	r2, [r3, #8]
    a08a:	89fb      	ldrh	r3, [r7, #14]
    a08c:	441a      	add	r2, r3
    a08e:	687b      	ldr	r3, [r7, #4]
    a090:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    a092:	687b      	ldr	r3, [r7, #4]
    a094:	689a      	ldr	r2, [r3, #8]
    a096:	687b      	ldr	r3, [r7, #4]
    a098:	685b      	ldr	r3, [r3, #4]
    a09a:	429a      	cmp	r2, r3
    a09c:	d243      	bcs.n	a126 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    a09e:	687b      	ldr	r3, [r7, #4]
    a0a0:	685b      	ldr	r3, [r3, #4]
    a0a2:	b29a      	uxth	r2, r3
    a0a4:	687b      	ldr	r3, [r7, #4]
    a0a6:	689b      	ldr	r3, [r3, #8]
    a0a8:	b29b      	uxth	r3, r3
    a0aa:	1ad3      	subs	r3, r2, r3
    a0ac:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    a0ae:	687b      	ldr	r3, [r7, #4]
    a0b0:	7cdb      	ldrb	r3, [r3, #19]
    a0b2:	f003 0320 	and.w	r3, r3, #32
    a0b6:	b2db      	uxtb	r3, r3
    a0b8:	2b00      	cmp	r3, #0
    a0ba:	d01b      	beq.n	a0f4 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    a0bc:	687b      	ldr	r3, [r7, #4]
    a0be:	8a1b      	ldrh	r3, [r3, #16]
    a0c0:	8bfa      	ldrh	r2, [r7, #30]
    a0c2:	429a      	cmp	r2, r3
    a0c4:	d902      	bls.n	a0cc <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    a0c6:	687b      	ldr	r3, [r7, #4]
    a0c8:	8a1b      	ldrh	r3, [r3, #16]
    a0ca:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    a0cc:	687b      	ldr	r3, [r7, #4]
    a0ce:	68d8      	ldr	r0, [r3, #12]
    a0d0:	687b      	ldr	r3, [r7, #4]
    a0d2:	681a      	ldr	r2, [r3, #0]
    a0d4:	687b      	ldr	r3, [r7, #4]
    a0d6:	689b      	ldr	r3, [r3, #8]
    a0d8:	4413      	add	r3, r2
    a0da:	8bfa      	ldrh	r2, [r7, #30]
    a0dc:	4619      	mov	r1, r3
    a0de:	4b44      	ldr	r3, [pc, #272]	; (a1f0 <_usb_d_dev_in_next+0x1f8>)
    a0e0:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    a0e2:	687b      	ldr	r3, [r7, #4]
    a0e4:	68db      	ldr	r3, [r3, #12]
    a0e6:	461a      	mov	r2, r3
    a0e8:	7dfb      	ldrb	r3, [r7, #23]
    a0ea:	2101      	movs	r1, #1
    a0ec:	4618      	mov	r0, r3
    a0ee:	4b41      	ldr	r3, [pc, #260]	; (a1f4 <_usb_d_dev_in_next+0x1fc>)
    a0f0:	4798      	blx	r3
    a0f2:	e011      	b.n	a118 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    a0f4:	8bfb      	ldrh	r3, [r7, #30]
    a0f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a0fa:	d902      	bls.n	a102 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    a0fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a100:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a102:	687b      	ldr	r3, [r7, #4]
    a104:	681a      	ldr	r2, [r3, #0]
    a106:	687b      	ldr	r3, [r7, #4]
    a108:	689b      	ldr	r3, [r3, #8]
    a10a:	4413      	add	r3, r2
    a10c:	461a      	mov	r2, r3
    a10e:	7dfb      	ldrb	r3, [r7, #23]
    a110:	2101      	movs	r1, #1
    a112:	4618      	mov	r0, r3
    a114:	4b37      	ldr	r3, [pc, #220]	; (a1f4 <_usb_d_dev_in_next+0x1fc>)
    a116:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    a118:	8bfa      	ldrh	r2, [r7, #30]
    a11a:	7df8      	ldrb	r0, [r7, #23]
    a11c:	2300      	movs	r3, #0
    a11e:	2101      	movs	r1, #1
    a120:	4c35      	ldr	r4, [pc, #212]	; (a1f8 <_usb_d_dev_in_next+0x200>)
    a122:	47a0      	blx	r4
		goto _in_tx_exec;
    a124:	e041      	b.n	a1aa <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    a126:	687b      	ldr	r3, [r7, #4]
    a128:	7cdb      	ldrb	r3, [r3, #19]
    a12a:	f003 0310 	and.w	r3, r3, #16
    a12e:	b2db      	uxtb	r3, r3
    a130:	2b00      	cmp	r3, #0
    a132:	d00b      	beq.n	a14c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    a134:	687a      	ldr	r2, [r7, #4]
    a136:	7cd3      	ldrb	r3, [r2, #19]
    a138:	f36f 1304 	bfc	r3, #4, #1
    a13c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    a13e:	7df8      	ldrb	r0, [r7, #23]
    a140:	2300      	movs	r3, #0
    a142:	2200      	movs	r2, #0
    a144:	2101      	movs	r1, #1
    a146:	4c2c      	ldr	r4, [pc, #176]	; (a1f8 <_usb_d_dev_in_next+0x200>)
    a148:	47a0      	blx	r4
		goto _in_tx_exec;
    a14a:	e02e      	b.n	a1aa <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    a14c:	7afb      	ldrb	r3, [r7, #11]
    a14e:	2b00      	cmp	r3, #0
    a150:	d006      	beq.n	a160 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    a152:	7dfb      	ldrb	r3, [r7, #23]
    a154:	224b      	movs	r2, #75	; 0x4b
    a156:	4619      	mov	r1, r3
    a158:	69b8      	ldr	r0, [r7, #24]
    a15a:	4b28      	ldr	r3, [pc, #160]	; (a1fc <_usb_d_dev_in_next+0x204>)
    a15c:	4798      	blx	r3
    a15e:	e005      	b.n	a16c <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    a160:	7dfb      	ldrb	r3, [r7, #23]
    a162:	224a      	movs	r2, #74	; 0x4a
    a164:	4619      	mov	r1, r3
    a166:	69b8      	ldr	r0, [r7, #24]
    a168:	4b24      	ldr	r3, [pc, #144]	; (a1fc <_usb_d_dev_in_next+0x204>)
    a16a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    a16c:	687b      	ldr	r3, [r7, #4]
    a16e:	8a1b      	ldrh	r3, [r3, #16]
    a170:	89ba      	ldrh	r2, [r7, #12]
    a172:	429a      	cmp	r2, r3
    a174:	d114      	bne.n	a1a0 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    a176:	687a      	ldr	r2, [r7, #4]
    a178:	7cd3      	ldrb	r3, [r2, #19]
    a17a:	f36f 1386 	bfc	r3, #6, #1
    a17e:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    a180:	4b1f      	ldr	r3, [pc, #124]	; (a200 <_usb_d_dev_in_next+0x208>)
    a182:	68db      	ldr	r3, [r3, #12]
    a184:	687a      	ldr	r2, [r7, #4]
    a186:	7c90      	ldrb	r0, [r2, #18]
    a188:	687a      	ldr	r2, [r7, #4]
    a18a:	6892      	ldr	r2, [r2, #8]
    a18c:	4611      	mov	r1, r2
    a18e:	4798      	blx	r3
    a190:	4603      	mov	r3, r0
    a192:	2b00      	cmp	r3, #0
    a194:	d124      	bne.n	a1e0 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    a196:	687a      	ldr	r2, [r7, #4]
    a198:	7cd3      	ldrb	r3, [r2, #19]
    a19a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a19e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a1a0:	2100      	movs	r1, #0
    a1a2:	6878      	ldr	r0, [r7, #4]
    a1a4:	4b17      	ldr	r3, [pc, #92]	; (a204 <_usb_d_dev_in_next+0x20c>)
    a1a6:	4798      	blx	r3
	return;
    a1a8:	e01b      	b.n	a1e2 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    a1aa:	78fb      	ldrb	r3, [r7, #3]
    a1ac:	f083 0301 	eor.w	r3, r3, #1
    a1b0:	b2db      	uxtb	r3, r3
    a1b2:	2b00      	cmp	r3, #0
    a1b4:	d00d      	beq.n	a1d2 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    a1b6:	7afb      	ldrb	r3, [r7, #11]
    a1b8:	2b00      	cmp	r3, #0
    a1ba:	d002      	beq.n	a1c2 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    a1bc:	234e      	movs	r3, #78	; 0x4e
    a1be:	777b      	strb	r3, [r7, #29]
    a1c0:	e001      	b.n	a1c6 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    a1c2:	234a      	movs	r3, #74	; 0x4a
    a1c4:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a1c6:	7f7a      	ldrb	r2, [r7, #29]
    a1c8:	7dfb      	ldrb	r3, [r7, #23]
    a1ca:	4619      	mov	r1, r3
    a1cc:	69b8      	ldr	r0, [r7, #24]
    a1ce:	4b0e      	ldr	r3, [pc, #56]	; (a208 <_usb_d_dev_in_next+0x210>)
    a1d0:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    a1d2:	7dfb      	ldrb	r3, [r7, #23]
    a1d4:	2201      	movs	r2, #1
    a1d6:	2101      	movs	r1, #1
    a1d8:	4618      	mov	r0, r3
    a1da:	4b0c      	ldr	r3, [pc, #48]	; (a20c <_usb_d_dev_in_next+0x214>)
    a1dc:	4798      	blx	r3
    a1de:	e000      	b.n	a1e2 <_usb_d_dev_in_next+0x1ea>
			return;
    a1e0:	bf00      	nop
}
    a1e2:	3724      	adds	r7, #36	; 0x24
    a1e4:	46bd      	mov	sp, r7
    a1e6:	bd90      	pop	{r4, r7, pc}
    a1e8:	200011cc 	.word	0x200011cc
    a1ec:	000099f1 	.word	0x000099f1
    a1f0:	0001425d 	.word	0x0001425d
    a1f4:	00009a1d 	.word	0x00009a1d
    a1f8:	00009b65 	.word	0x00009b65
    a1fc:	000092fd 	.word	0x000092fd
    a200:	20001104 	.word	0x20001104
    a204:	0000b321 	.word	0x0000b321
    a208:	000092d1 	.word	0x000092d1
    a20c:	00009c1d 	.word	0x00009c1d

0000a210 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a210:	b590      	push	{r4, r7, lr}
    a212:	b08b      	sub	sp, #44	; 0x2c
    a214:	af00      	add	r7, sp, #0
    a216:	6078      	str	r0, [r7, #4]
    a218:	460b      	mov	r3, r1
    a21a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a21c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a220:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a222:	687b      	ldr	r3, [r7, #4]
    a224:	7c9b      	ldrb	r3, [r3, #18]
    a226:	f003 030f 	and.w	r3, r3, #15
    a22a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a22c:	7ffb      	ldrb	r3, [r7, #31]
    a22e:	015b      	lsls	r3, r3, #5
    a230:	4a94      	ldr	r2, [pc, #592]	; (a484 <_usb_d_dev_out_next+0x274>)
    a232:	4413      	add	r3, r2
    a234:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a236:	78fb      	ldrb	r3, [r7, #3]
    a238:	2b00      	cmp	r3, #0
    a23a:	d005      	beq.n	a248 <_usb_d_dev_out_next+0x38>
    a23c:	69bb      	ldr	r3, [r7, #24]
    a23e:	685b      	ldr	r3, [r3, #4]
    a240:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a244:	b29b      	uxth	r3, r3
    a246:	e000      	b.n	a24a <_usb_d_dev_out_next+0x3a>
    a248:	2300      	movs	r3, #0
    a24a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a24c:	78fb      	ldrb	r3, [r7, #3]
    a24e:	2b00      	cmp	r3, #0
    a250:	d005      	beq.n	a25e <_usb_d_dev_out_next+0x4e>
    a252:	69bb      	ldr	r3, [r7, #24]
    a254:	685b      	ldr	r3, [r3, #4]
    a256:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a25a:	b29b      	uxth	r3, r3
    a25c:	e000      	b.n	a260 <_usb_d_dev_out_next+0x50>
    a25e:	2300      	movs	r3, #0
    a260:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a262:	687b      	ldr	r3, [r7, #4]
    a264:	8a1b      	ldrh	r3, [r3, #16]
    a266:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a26a:	4293      	cmp	r3, r2
    a26c:	d004      	beq.n	a278 <_usb_d_dev_out_next+0x68>
    a26e:	687b      	ldr	r3, [r7, #4]
    a270:	8a1b      	ldrh	r3, [r3, #16]
    a272:	3b01      	subs	r3, #1
    a274:	b29b      	uxth	r3, r3
    a276:	e001      	b.n	a27c <_usb_d_dev_out_next+0x6c>
    a278:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a27c:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a27e:	8aba      	ldrh	r2, [r7, #20]
    a280:	8a7b      	ldrh	r3, [r7, #18]
    a282:	4013      	ands	r3, r2
    a284:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a286:	687b      	ldr	r3, [r7, #4]
    a288:	7cdb      	ldrb	r3, [r3, #19]
    a28a:	f003 0307 	and.w	r3, r3, #7
    a28e:	b2db      	uxtb	r3, r3
    a290:	2b01      	cmp	r3, #1
    a292:	bf0c      	ite	eq
    a294:	2301      	moveq	r3, #1
    a296:	2300      	movne	r3, #0
    a298:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a29a:	78fb      	ldrb	r3, [r7, #3]
    a29c:	2b00      	cmp	r3, #0
    a29e:	d004      	beq.n	a2aa <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a2a0:	7ffb      	ldrb	r3, [r7, #31]
    a2a2:	2100      	movs	r1, #0
    a2a4:	4618      	mov	r0, r3
    a2a6:	4b78      	ldr	r3, [pc, #480]	; (a488 <_usb_d_dev_out_next+0x278>)
    a2a8:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a2aa:	687b      	ldr	r3, [r7, #4]
    a2ac:	7cdb      	ldrb	r3, [r3, #19]
    a2ae:	f003 0320 	and.w	r3, r3, #32
    a2b2:	b2db      	uxtb	r3, r3
    a2b4:	2b00      	cmp	r3, #0
    a2b6:	d01c      	beq.n	a2f2 <_usb_d_dev_out_next+0xe2>
    a2b8:	687b      	ldr	r3, [r7, #4]
    a2ba:	685b      	ldr	r3, [r3, #4]
    a2bc:	2b00      	cmp	r3, #0
    a2be:	d018      	beq.n	a2f2 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a2c0:	687b      	ldr	r3, [r7, #4]
    a2c2:	685b      	ldr	r3, [r3, #4]
    a2c4:	b29a      	uxth	r2, r3
    a2c6:	687b      	ldr	r3, [r7, #4]
    a2c8:	689b      	ldr	r3, [r3, #8]
    a2ca:	b29b      	uxth	r3, r3
    a2cc:	1ad3      	subs	r3, r2, r3
    a2ce:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a2d0:	687b      	ldr	r3, [r7, #4]
    a2d2:	681a      	ldr	r2, [r3, #0]
    a2d4:	687b      	ldr	r3, [r7, #4]
    a2d6:	689b      	ldr	r3, [r3, #8]
    a2d8:	18d0      	adds	r0, r2, r3
    a2da:	687b      	ldr	r3, [r7, #4]
    a2dc:	68d9      	ldr	r1, [r3, #12]
    a2de:	89ba      	ldrh	r2, [r7, #12]
    a2e0:	8a3b      	ldrh	r3, [r7, #16]
    a2e2:	429a      	cmp	r2, r3
    a2e4:	d901      	bls.n	a2ea <_usb_d_dev_out_next+0xda>
    a2e6:	8a3b      	ldrh	r3, [r7, #16]
    a2e8:	e000      	b.n	a2ec <_usb_d_dev_out_next+0xdc>
    a2ea:	89bb      	ldrh	r3, [r7, #12]
    a2ec:	461a      	mov	r2, r3
    a2ee:	4b67      	ldr	r3, [pc, #412]	; (a48c <_usb_d_dev_out_next+0x27c>)
    a2f0:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a2f2:	687b      	ldr	r3, [r7, #4]
    a2f4:	685b      	ldr	r3, [r3, #4]
    a2f6:	2b00      	cmp	r3, #0
    a2f8:	d121      	bne.n	a33e <_usb_d_dev_out_next+0x12e>
    a2fa:	687b      	ldr	r3, [r7, #4]
    a2fc:	7cdb      	ldrb	r3, [r3, #19]
    a2fe:	f003 0310 	and.w	r3, r3, #16
    a302:	b2db      	uxtb	r3, r3
    a304:	2b00      	cmp	r3, #0
    a306:	d01a      	beq.n	a33e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a308:	687a      	ldr	r2, [r7, #4]
    a30a:	7cd3      	ldrb	r3, [r2, #19]
    a30c:	f36f 1304 	bfc	r3, #4, #1
    a310:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a312:	687a      	ldr	r2, [r7, #4]
    a314:	7cd3      	ldrb	r3, [r2, #19]
    a316:	f043 0320 	orr.w	r3, r3, #32
    a31a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a31c:	687b      	ldr	r3, [r7, #4]
    a31e:	68db      	ldr	r3, [r3, #12]
    a320:	461a      	mov	r2, r3
    a322:	7ffb      	ldrb	r3, [r7, #31]
    a324:	2100      	movs	r1, #0
    a326:	4618      	mov	r0, r3
    a328:	4b59      	ldr	r3, [pc, #356]	; (a490 <_usb_d_dev_out_next+0x280>)
    a32a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a32c:	687b      	ldr	r3, [r7, #4]
    a32e:	8a1b      	ldrh	r3, [r3, #16]
    a330:	461a      	mov	r2, r3
    a332:	7ff8      	ldrb	r0, [r7, #31]
    a334:	2300      	movs	r3, #0
    a336:	2100      	movs	r1, #0
    a338:	4c56      	ldr	r4, [pc, #344]	; (a494 <_usb_d_dev_out_next+0x284>)
    a33a:	47a0      	blx	r4
		goto _out_rx_exec;
    a33c:	e090      	b.n	a460 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a33e:	78fb      	ldrb	r3, [r7, #3]
    a340:	2b00      	cmp	r3, #0
    a342:	d010      	beq.n	a366 <_usb_d_dev_out_next+0x156>
    a344:	687b      	ldr	r3, [r7, #4]
    a346:	8a1b      	ldrh	r3, [r3, #16]
    a348:	8a3a      	ldrh	r2, [r7, #16]
    a34a:	429a      	cmp	r2, r3
    a34c:	d20b      	bcs.n	a366 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a34e:	687a      	ldr	r2, [r7, #4]
    a350:	7cd3      	ldrb	r3, [r2, #19]
    a352:	f36f 1304 	bfc	r3, #4, #1
    a356:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a358:	687b      	ldr	r3, [r7, #4]
    a35a:	689a      	ldr	r2, [r3, #8]
    a35c:	8abb      	ldrh	r3, [r7, #20]
    a35e:	441a      	add	r2, r3
    a360:	687b      	ldr	r3, [r7, #4]
    a362:	609a      	str	r2, [r3, #8]
    a364:	e05c      	b.n	a420 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a366:	687b      	ldr	r3, [r7, #4]
    a368:	689a      	ldr	r2, [r3, #8]
    a36a:	8afb      	ldrh	r3, [r7, #22]
    a36c:	441a      	add	r2, r3
    a36e:	687b      	ldr	r3, [r7, #4]
    a370:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a372:	687b      	ldr	r3, [r7, #4]
    a374:	689a      	ldr	r2, [r3, #8]
    a376:	687b      	ldr	r3, [r7, #4]
    a378:	685b      	ldr	r3, [r3, #4]
    a37a:	429a      	cmp	r2, r3
    a37c:	d250      	bcs.n	a420 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a37e:	687b      	ldr	r3, [r7, #4]
    a380:	685b      	ldr	r3, [r3, #4]
    a382:	b29a      	uxth	r2, r3
    a384:	687b      	ldr	r3, [r7, #4]
    a386:	689b      	ldr	r3, [r3, #8]
    a388:	b29b      	uxth	r3, r3
    a38a:	1ad3      	subs	r3, r2, r3
    a38c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a38e:	687b      	ldr	r3, [r7, #4]
    a390:	7cdb      	ldrb	r3, [r3, #19]
    a392:	f003 0320 	and.w	r3, r3, #32
    a396:	b2db      	uxtb	r3, r3
    a398:	2b00      	cmp	r3, #0
    a39a:	d010      	beq.n	a3be <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a39c:	687b      	ldr	r3, [r7, #4]
    a39e:	8a1b      	ldrh	r3, [r3, #16]
    a3a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a3a2:	429a      	cmp	r2, r3
    a3a4:	d902      	bls.n	a3ac <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a3a6:	687b      	ldr	r3, [r7, #4]
    a3a8:	8a1b      	ldrh	r3, [r3, #16]
    a3aa:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a3ac:	687b      	ldr	r3, [r7, #4]
    a3ae:	68db      	ldr	r3, [r3, #12]
    a3b0:	461a      	mov	r2, r3
    a3b2:	7ffb      	ldrb	r3, [r7, #31]
    a3b4:	2100      	movs	r1, #0
    a3b6:	4618      	mov	r0, r3
    a3b8:	4b35      	ldr	r3, [pc, #212]	; (a490 <_usb_d_dev_out_next+0x280>)
    a3ba:	4798      	blx	r3
    a3bc:	e029      	b.n	a412 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a3be:	687b      	ldr	r3, [r7, #4]
    a3c0:	8a1b      	ldrh	r3, [r3, #16]
    a3c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a3c4:	429a      	cmp	r2, r3
    a3c6:	d90f      	bls.n	a3e8 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a3c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a3ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a3ce:	d903      	bls.n	a3d8 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a3d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a3d4:	84fb      	strh	r3, [r7, #38]	; 0x26
    a3d6:	e011      	b.n	a3fc <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a3d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a3da:	8a7b      	ldrh	r3, [r7, #18]
    a3dc:	4013      	ands	r3, r2
    a3de:	b29b      	uxth	r3, r3
    a3e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a3e2:	1ad3      	subs	r3, r2, r3
    a3e4:	84fb      	strh	r3, [r7, #38]	; 0x26
    a3e6:	e009      	b.n	a3fc <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a3e8:	687b      	ldr	r3, [r7, #4]
    a3ea:	8a1b      	ldrh	r3, [r3, #16]
    a3ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a3ee:	429a      	cmp	r2, r3
    a3f0:	d204      	bcs.n	a3fc <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a3f2:	687a      	ldr	r2, [r7, #4]
    a3f4:	7cd3      	ldrb	r3, [r2, #19]
    a3f6:	f043 0320 	orr.w	r3, r3, #32
    a3fa:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a3fc:	687b      	ldr	r3, [r7, #4]
    a3fe:	681a      	ldr	r2, [r3, #0]
    a400:	687b      	ldr	r3, [r7, #4]
    a402:	689b      	ldr	r3, [r3, #8]
    a404:	4413      	add	r3, r2
    a406:	461a      	mov	r2, r3
    a408:	7ffb      	ldrb	r3, [r7, #31]
    a40a:	2100      	movs	r1, #0
    a40c:	4618      	mov	r0, r3
    a40e:	4b20      	ldr	r3, [pc, #128]	; (a490 <_usb_d_dev_out_next+0x280>)
    a410:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a412:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a414:	7ff8      	ldrb	r0, [r7, #31]
    a416:	2300      	movs	r3, #0
    a418:	2100      	movs	r1, #0
    a41a:	4c1e      	ldr	r4, [pc, #120]	; (a494 <_usb_d_dev_out_next+0x284>)
    a41c:	47a0      	blx	r4
			goto _out_rx_exec;
    a41e:	e01f      	b.n	a460 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a420:	7bfb      	ldrb	r3, [r7, #15]
    a422:	2b00      	cmp	r3, #0
    a424:	d006      	beq.n	a434 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a426:	7ffb      	ldrb	r3, [r7, #31]
    a428:	222d      	movs	r2, #45	; 0x2d
    a42a:	4619      	mov	r1, r3
    a42c:	6a38      	ldr	r0, [r7, #32]
    a42e:	4b1a      	ldr	r3, [pc, #104]	; (a498 <_usb_d_dev_out_next+0x288>)
    a430:	4798      	blx	r3
    a432:	e005      	b.n	a440 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a434:	7ffb      	ldrb	r3, [r7, #31]
    a436:	2225      	movs	r2, #37	; 0x25
    a438:	4619      	mov	r1, r3
    a43a:	6a38      	ldr	r0, [r7, #32]
    a43c:	4b16      	ldr	r3, [pc, #88]	; (a498 <_usb_d_dev_out_next+0x288>)
    a43e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a440:	7ffb      	ldrb	r3, [r7, #31]
    a442:	2b00      	cmp	r3, #0
    a444:	d107      	bne.n	a456 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a446:	687b      	ldr	r3, [r7, #4]
    a448:	68db      	ldr	r3, [r3, #12]
    a44a:	461a      	mov	r2, r3
    a44c:	7ffb      	ldrb	r3, [r7, #31]
    a44e:	2100      	movs	r1, #0
    a450:	4618      	mov	r0, r3
    a452:	4b0f      	ldr	r3, [pc, #60]	; (a490 <_usb_d_dev_out_next+0x280>)
    a454:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a456:	2100      	movs	r1, #0
    a458:	6878      	ldr	r0, [r7, #4]
    a45a:	4b10      	ldr	r3, [pc, #64]	; (a49c <_usb_d_dev_out_next+0x28c>)
    a45c:	4798      	blx	r3
	return;
    a45e:	e031      	b.n	a4c4 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a460:	78fb      	ldrb	r3, [r7, #3]
    a462:	f083 0301 	eor.w	r3, r3, #1
    a466:	b2db      	uxtb	r3, r3
    a468:	2b00      	cmp	r3, #0
    a46a:	d025      	beq.n	a4b8 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a46c:	7bfb      	ldrb	r3, [r7, #15]
    a46e:	2b00      	cmp	r3, #0
    a470:	d018      	beq.n	a4a4 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a472:	7ffb      	ldrb	r3, [r7, #31]
    a474:	2101      	movs	r1, #1
    a476:	4618      	mov	r0, r3
    a478:	4b09      	ldr	r3, [pc, #36]	; (a4a0 <_usb_d_dev_out_next+0x290>)
    a47a:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a47c:	232d      	movs	r3, #45	; 0x2d
    a47e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a482:	e012      	b.n	a4aa <_usb_d_dev_out_next+0x29a>
    a484:	200011cc 	.word	0x200011cc
    a488:	000099f1 	.word	0x000099f1
    a48c:	0001425d 	.word	0x0001425d
    a490:	00009a1d 	.word	0x00009a1d
    a494:	00009ba5 	.word	0x00009ba5
    a498:	000092fd 	.word	0x000092fd
    a49c:	0000b321 	.word	0x0000b321
    a4a0:	00009be5 	.word	0x00009be5
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a4a4:	2325      	movs	r3, #37	; 0x25
    a4a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a4aa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a4ae:	7ffb      	ldrb	r3, [r7, #31]
    a4b0:	4619      	mov	r1, r3
    a4b2:	6a38      	ldr	r0, [r7, #32]
    a4b4:	4b05      	ldr	r3, [pc, #20]	; (a4cc <_usb_d_dev_out_next+0x2bc>)
    a4b6:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a4b8:	7ffb      	ldrb	r3, [r7, #31]
    a4ba:	2201      	movs	r2, #1
    a4bc:	2100      	movs	r1, #0
    a4be:	4618      	mov	r0, r3
    a4c0:	4b03      	ldr	r3, [pc, #12]	; (a4d0 <_usb_d_dev_out_next+0x2c0>)
    a4c2:	4798      	blx	r3
}
    a4c4:	372c      	adds	r7, #44	; 0x2c
    a4c6:	46bd      	mov	sp, r7
    a4c8:	bd90      	pop	{r4, r7, pc}
    a4ca:	bf00      	nop
    a4cc:	000092d1 	.word	0x000092d1
    a4d0:	00009c75 	.word	0x00009c75

0000a4d4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a4d4:	b580      	push	{r7, lr}
    a4d6:	b084      	sub	sp, #16
    a4d8:	af00      	add	r7, sp, #0
    a4da:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a4dc:	687b      	ldr	r3, [r7, #4]
    a4de:	7c9b      	ldrb	r3, [r3, #18]
    a4e0:	f003 030f 	and.w	r3, r3, #15
    a4e4:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a4e6:	687b      	ldr	r3, [r7, #4]
    a4e8:	7cdb      	ldrb	r3, [r3, #19]
    a4ea:	f003 0307 	and.w	r3, r3, #7
    a4ee:	b2db      	uxtb	r3, r3
    a4f0:	2b01      	cmp	r3, #1
    a4f2:	bf0c      	ite	eq
    a4f4:	2301      	moveq	r3, #1
    a4f6:	2300      	movne	r3, #0
    a4f8:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a4fa:	7bbb      	ldrb	r3, [r7, #14]
    a4fc:	f083 0301 	eor.w	r3, r3, #1
    a500:	b2db      	uxtb	r3, r3
    a502:	2b00      	cmp	r3, #0
    a504:	d008      	beq.n	a518 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a506:	7bfb      	ldrb	r3, [r7, #15]
    a508:	4618      	mov	r0, r3
    a50a:	4b20      	ldr	r3, [pc, #128]	; (a58c <_usb_d_dev_handle_setup+0xb8>)
    a50c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a50e:	7bfb      	ldrb	r3, [r7, #15]
    a510:	4618      	mov	r0, r3
    a512:	4b1f      	ldr	r3, [pc, #124]	; (a590 <_usb_d_dev_handle_setup+0xbc>)
    a514:	4798      	blx	r3
		return;
    a516:	e036      	b.n	a586 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a518:	687b      	ldr	r3, [r7, #4]
    a51a:	7cdb      	ldrb	r3, [r3, #19]
    a51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a520:	b2db      	uxtb	r3, r3
    a522:	2b00      	cmp	r3, #0
    a524:	d010      	beq.n	a548 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a526:	687a      	ldr	r2, [r7, #4]
    a528:	7cd3      	ldrb	r3, [r2, #19]
    a52a:	f36f 1386 	bfc	r3, #6, #1
    a52e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a530:	7bfb      	ldrb	r3, [r7, #15]
    a532:	2200      	movs	r2, #0
    a534:	2101      	movs	r1, #1
    a536:	4618      	mov	r0, r3
    a538:	4b16      	ldr	r3, [pc, #88]	; (a594 <_usb_d_dev_handle_setup+0xc0>)
    a53a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a53c:	7bfb      	ldrb	r3, [r7, #15]
    a53e:	2200      	movs	r2, #0
    a540:	2100      	movs	r1, #0
    a542:	4618      	mov	r0, r3
    a544:	4b14      	ldr	r3, [pc, #80]	; (a598 <_usb_d_dev_handle_setup+0xc4>)
    a546:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a548:	687a      	ldr	r2, [r7, #4]
    a54a:	7cd3      	ldrb	r3, [r2, #19]
    a54c:	f36f 03c3 	bfc	r3, #3, #1
    a550:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a552:	7bfb      	ldrb	r3, [r7, #15]
    a554:	2100      	movs	r1, #0
    a556:	4618      	mov	r0, r3
    a558:	4b10      	ldr	r3, [pc, #64]	; (a59c <_usb_d_dev_handle_setup+0xc8>)
    a55a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a55c:	7bfb      	ldrb	r3, [r7, #15]
    a55e:	2101      	movs	r1, #1
    a560:	4618      	mov	r0, r3
    a562:	4b0e      	ldr	r3, [pc, #56]	; (a59c <_usb_d_dev_handle_setup+0xc8>)
    a564:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a566:	7bfb      	ldrb	r3, [r7, #15]
    a568:	216f      	movs	r1, #111	; 0x6f
    a56a:	4618      	mov	r0, r3
    a56c:	4b0c      	ldr	r3, [pc, #48]	; (a5a0 <_usb_d_dev_handle_setup+0xcc>)
    a56e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a570:	7bfb      	ldrb	r3, [r7, #15]
    a572:	216f      	movs	r1, #111	; 0x6f
    a574:	4618      	mov	r0, r3
    a576:	4b0b      	ldr	r3, [pc, #44]	; (a5a4 <_usb_d_dev_handle_setup+0xd0>)
    a578:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a57a:	4b0b      	ldr	r3, [pc, #44]	; (a5a8 <_usb_d_dev_handle_setup+0xd4>)
    a57c:	689b      	ldr	r3, [r3, #8]
    a57e:	687a      	ldr	r2, [r7, #4]
    a580:	7c92      	ldrb	r2, [r2, #18]
    a582:	4610      	mov	r0, r2
    a584:	4798      	blx	r3
}
    a586:	3710      	adds	r7, #16
    a588:	46bd      	mov	sp, r7
    a58a:	bd80      	pop	{r7, pc}
    a58c:	00009979 	.word	0x00009979
    a590:	00009925 	.word	0x00009925
    a594:	00009c1d 	.word	0x00009c1d
    a598:	00009c75 	.word	0x00009c75
    a59c:	00009be5 	.word	0x00009be5
    a5a0:	00009725 	.word	0x00009725
    a5a4:	00009775 	.word	0x00009775
    a5a8:	20001104 	.word	0x20001104

0000a5ac <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a5ac:	b580      	push	{r7, lr}
    a5ae:	b084      	sub	sp, #16
    a5b0:	af00      	add	r7, sp, #0
    a5b2:	6078      	str	r0, [r7, #4]
    a5b4:	460b      	mov	r3, r1
    a5b6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a5b8:	687b      	ldr	r3, [r7, #4]
    a5ba:	7c9b      	ldrb	r3, [r3, #18]
    a5bc:	f003 030f 	and.w	r3, r3, #15
    a5c0:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a5c2:	78f9      	ldrb	r1, [r7, #3]
    a5c4:	7bfb      	ldrb	r3, [r7, #15]
    a5c6:	2200      	movs	r2, #0
    a5c8:	4618      	mov	r0, r3
    a5ca:	4b07      	ldr	r3, [pc, #28]	; (a5e8 <_usb_d_dev_handle_stall+0x3c>)
    a5cc:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a5ce:	4b07      	ldr	r3, [pc, #28]	; (a5ec <_usb_d_dev_handle_stall+0x40>)
    a5d0:	691b      	ldr	r3, [r3, #16]
    a5d2:	687a      	ldr	r2, [r7, #4]
    a5d4:	7c90      	ldrb	r0, [r2, #18]
    a5d6:	687a      	ldr	r2, [r7, #4]
    a5d8:	6892      	ldr	r2, [r2, #8]
    a5da:	2101      	movs	r1, #1
    a5dc:	4798      	blx	r3
}
    a5de:	bf00      	nop
    a5e0:	3710      	adds	r7, #16
    a5e2:	46bd      	mov	sp, r7
    a5e4:	bd80      	pop	{r7, pc}
    a5e6:	bf00      	nop
    a5e8:	000098d9 	.word	0x000098d9
    a5ec:	20001104 	.word	0x20001104

0000a5f0 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a5f0:	b580      	push	{r7, lr}
    a5f2:	b088      	sub	sp, #32
    a5f4:	af00      	add	r7, sp, #0
    a5f6:	6078      	str	r0, [r7, #4]
    a5f8:	460b      	mov	r3, r1
    a5fa:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a5fc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a600:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a602:	687b      	ldr	r3, [r7, #4]
    a604:	7c9b      	ldrb	r3, [r3, #18]
    a606:	f003 030f 	and.w	r3, r3, #15
    a60a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a60c:	4b61      	ldr	r3, [pc, #388]	; (a794 <_usb_d_dev_handle_trfail+0x1a4>)
    a60e:	881b      	ldrh	r3, [r3, #0]
    a610:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a612:	7efb      	ldrb	r3, [r7, #27]
    a614:	015b      	lsls	r3, r3, #5
    a616:	4a60      	ldr	r2, [pc, #384]	; (a798 <_usb_d_dev_handle_trfail+0x1a8>)
    a618:	4413      	add	r3, r2
    a61a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a61c:	78fb      	ldrb	r3, [r7, #3]
    a61e:	2b00      	cmp	r3, #0
    a620:	d006      	beq.n	a630 <_usb_d_dev_handle_trfail+0x40>
    a622:	7efb      	ldrb	r3, [r7, #27]
    a624:	4619      	mov	r1, r3
    a626:	69f8      	ldr	r0, [r7, #28]
    a628:	4b5c      	ldr	r3, [pc, #368]	; (a79c <_usb_d_dev_handle_trfail+0x1ac>)
    a62a:	4798      	blx	r3
    a62c:	4603      	mov	r3, r0
    a62e:	e005      	b.n	a63c <_usb_d_dev_handle_trfail+0x4c>
    a630:	7efb      	ldrb	r3, [r7, #27]
    a632:	4619      	mov	r1, r3
    a634:	69f8      	ldr	r0, [r7, #28]
    a636:	4b5a      	ldr	r3, [pc, #360]	; (a7a0 <_usb_d_dev_handle_trfail+0x1b0>)
    a638:	4798      	blx	r3
    a63a:	4603      	mov	r3, r0
    a63c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a63e:	687b      	ldr	r3, [r7, #4]
    a640:	7cdb      	ldrb	r3, [r3, #19]
    a642:	f003 0307 	and.w	r3, r3, #7
    a646:	b2db      	uxtb	r3, r3
    a648:	2b01      	cmp	r3, #1
    a64a:	bf0c      	ite	eq
    a64c:	2301      	moveq	r3, #1
    a64e:	2300      	movne	r3, #0
    a650:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a652:	78fb      	ldrb	r3, [r7, #3]
    a654:	011b      	lsls	r3, r3, #4
    a656:	697a      	ldr	r2, [r7, #20]
    a658:	4413      	add	r3, r2
    a65a:	7a9b      	ldrb	r3, [r3, #10]
    a65c:	b2db      	uxtb	r3, r3
    a65e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a660:	7cfb      	ldrb	r3, [r7, #19]
    a662:	2b02      	cmp	r3, #2
    a664:	d12f      	bne.n	a6c6 <_usb_d_dev_handle_trfail+0xd6>
    a666:	7b3b      	ldrb	r3, [r7, #12]
    a668:	f003 0301 	and.w	r3, r3, #1
    a66c:	b2db      	uxtb	r3, r3
    a66e:	2b00      	cmp	r3, #0
    a670:	d029      	beq.n	a6c6 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a672:	78fb      	ldrb	r3, [r7, #3]
    a674:	011b      	lsls	r3, r3, #4
    a676:	697a      	ldr	r2, [r7, #20]
    a678:	441a      	add	r2, r3
    a67a:	7a93      	ldrb	r3, [r2, #10]
    a67c:	f36f 0300 	bfc	r3, #0, #1
    a680:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a682:	78fb      	ldrb	r3, [r7, #3]
    a684:	f107 0220 	add.w	r2, r7, #32
    a688:	4413      	add	r3, r2
    a68a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a68e:	7efb      	ldrb	r3, [r7, #27]
    a690:	4619      	mov	r1, r3
    a692:	69f8      	ldr	r0, [r7, #28]
    a694:	4b43      	ldr	r3, [pc, #268]	; (a7a4 <_usb_d_dev_handle_trfail+0x1b4>)
    a696:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a698:	78fb      	ldrb	r3, [r7, #3]
    a69a:	f107 0220 	add.w	r2, r7, #32
    a69e:	4413      	add	r3, r2
    a6a0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a6a4:	7efb      	ldrb	r3, [r7, #27]
    a6a6:	4619      	mov	r1, r3
    a6a8:	69f8      	ldr	r0, [r7, #28]
    a6aa:	4b3f      	ldr	r3, [pc, #252]	; (a7a8 <_usb_d_dev_handle_trfail+0x1b8>)
    a6ac:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a6ae:	78fb      	ldrb	r3, [r7, #3]
    a6b0:	2b00      	cmp	r3, #0
    a6b2:	bf14      	ite	ne
    a6b4:	2301      	movne	r3, #1
    a6b6:	2300      	moveq	r3, #0
    a6b8:	b2db      	uxtb	r3, r3
    a6ba:	2204      	movs	r2, #4
    a6bc:	4619      	mov	r1, r3
    a6be:	6878      	ldr	r0, [r7, #4]
    a6c0:	4b3a      	ldr	r3, [pc, #232]	; (a7ac <_usb_d_dev_handle_trfail+0x1bc>)
    a6c2:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a6c4:	e062      	b.n	a78c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a6c6:	7b3b      	ldrb	r3, [r7, #12]
    a6c8:	f003 0302 	and.w	r3, r3, #2
    a6cc:	b2db      	uxtb	r3, r3
    a6ce:	2b00      	cmp	r3, #0
    a6d0:	d040      	beq.n	a754 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a6d2:	78fb      	ldrb	r3, [r7, #3]
    a6d4:	011b      	lsls	r3, r3, #4
    a6d6:	697a      	ldr	r2, [r7, #20]
    a6d8:	441a      	add	r2, r3
    a6da:	7a93      	ldrb	r3, [r2, #10]
    a6dc:	f36f 0341 	bfc	r3, #1, #1
    a6e0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a6e2:	78fb      	ldrb	r3, [r7, #3]
    a6e4:	f107 0220 	add.w	r2, r7, #32
    a6e8:	4413      	add	r3, r2
    a6ea:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a6ee:	7efb      	ldrb	r3, [r7, #27]
    a6f0:	4619      	mov	r1, r3
    a6f2:	69f8      	ldr	r0, [r7, #28]
    a6f4:	4b2b      	ldr	r3, [pc, #172]	; (a7a4 <_usb_d_dev_handle_trfail+0x1b4>)
    a6f6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a6f8:	78fb      	ldrb	r3, [r7, #3]
    a6fa:	f107 0220 	add.w	r2, r7, #32
    a6fe:	4413      	add	r3, r2
    a700:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a704:	7efb      	ldrb	r3, [r7, #27]
    a706:	4619      	mov	r1, r3
    a708:	69f8      	ldr	r0, [r7, #28]
    a70a:	4b27      	ldr	r3, [pc, #156]	; (a7a8 <_usb_d_dev_handle_trfail+0x1b8>)
    a70c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a70e:	7cbb      	ldrb	r3, [r7, #18]
    a710:	2b00      	cmp	r3, #0
    a712:	d03b      	beq.n	a78c <_usb_d_dev_handle_trfail+0x19c>
    a714:	687b      	ldr	r3, [r7, #4]
    a716:	7cdb      	ldrb	r3, [r3, #19]
    a718:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a71c:	b2db      	uxtb	r3, r3
    a71e:	2b00      	cmp	r3, #0
    a720:	d034      	beq.n	a78c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a722:	687b      	ldr	r3, [r7, #4]
    a724:	7cdb      	ldrb	r3, [r3, #19]
    a726:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a72a:	b2db      	uxtb	r3, r3
    a72c:	461a      	mov	r2, r3
    a72e:	78fb      	ldrb	r3, [r7, #3]
    a730:	4293      	cmp	r3, r2
    a732:	d02b      	beq.n	a78c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a734:	687b      	ldr	r3, [r7, #4]
    a736:	7cdb      	ldrb	r3, [r3, #19]
    a738:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a73c:	b2db      	uxtb	r3, r3
    a73e:	2b00      	cmp	r3, #0
    a740:	bf14      	ite	ne
    a742:	2301      	movne	r3, #1
    a744:	2300      	moveq	r3, #0
    a746:	b2db      	uxtb	r3, r3
    a748:	2200      	movs	r2, #0
    a74a:	4619      	mov	r1, r3
    a74c:	6878      	ldr	r0, [r7, #4]
    a74e:	4b17      	ldr	r3, [pc, #92]	; (a7ac <_usb_d_dev_handle_trfail+0x1bc>)
    a750:	4798      	blx	r3
}
    a752:	e01b      	b.n	a78c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a754:	78fa      	ldrb	r2, [r7, #3]
    a756:	7efb      	ldrb	r3, [r7, #27]
    a758:	4611      	mov	r1, r2
    a75a:	4618      	mov	r0, r3
    a75c:	4b14      	ldr	r3, [pc, #80]	; (a7b0 <_usb_d_dev_handle_trfail+0x1c0>)
    a75e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a760:	78fb      	ldrb	r3, [r7, #3]
    a762:	f107 0220 	add.w	r2, r7, #32
    a766:	4413      	add	r3, r2
    a768:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a76c:	7efb      	ldrb	r3, [r7, #27]
    a76e:	4619      	mov	r1, r3
    a770:	69f8      	ldr	r0, [r7, #28]
    a772:	4b0c      	ldr	r3, [pc, #48]	; (a7a4 <_usb_d_dev_handle_trfail+0x1b4>)
    a774:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a776:	78fb      	ldrb	r3, [r7, #3]
    a778:	f107 0220 	add.w	r2, r7, #32
    a77c:	4413      	add	r3, r2
    a77e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a782:	7efb      	ldrb	r3, [r7, #27]
    a784:	4619      	mov	r1, r3
    a786:	69f8      	ldr	r0, [r7, #28]
    a788:	4b07      	ldr	r3, [pc, #28]	; (a7a8 <_usb_d_dev_handle_trfail+0x1b8>)
    a78a:	4798      	blx	r3
}
    a78c:	bf00      	nop
    a78e:	3720      	adds	r7, #32
    a790:	46bd      	mov	sp, r7
    a792:	bd80      	pop	{r7, pc}
    a794:	000149f0 	.word	0x000149f0
    a798:	200011cc 	.word	0x200011cc
    a79c:	00009359 	.word	0x00009359
    a7a0:	00009329 	.word	0x00009329
    a7a4:	000091fd 	.word	0x000091fd
    a7a8:	000092fd 	.word	0x000092fd
    a7ac:	0000b369 	.word	0x0000b369
    a7b0:	00009be5 	.word	0x00009be5

0000a7b4 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a7b4:	b580      	push	{r7, lr}
    a7b6:	b082      	sub	sp, #8
    a7b8:	af00      	add	r7, sp, #0
    a7ba:	6078      	str	r0, [r7, #4]
    a7bc:	460b      	mov	r3, r1
    a7be:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a7c0:	78fb      	ldrb	r3, [r7, #3]
    a7c2:	f003 0310 	and.w	r3, r3, #16
    a7c6:	2b00      	cmp	r3, #0
    a7c8:	d003      	beq.n	a7d2 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a7ca:	6878      	ldr	r0, [r7, #4]
    a7cc:	4b0c      	ldr	r3, [pc, #48]	; (a800 <_usb_d_dev_trans_setup_isr+0x4c>)
    a7ce:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a7d0:	e012      	b.n	a7f8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a7d2:	78fb      	ldrb	r3, [r7, #3]
    a7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a7d8:	2b00      	cmp	r3, #0
    a7da:	d004      	beq.n	a7e6 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a7dc:	2101      	movs	r1, #1
    a7de:	6878      	ldr	r0, [r7, #4]
    a7e0:	4b08      	ldr	r3, [pc, #32]	; (a804 <_usb_d_dev_trans_setup_isr+0x50>)
    a7e2:	4798      	blx	r3
}
    a7e4:	e008      	b.n	a7f8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a7e6:	78fb      	ldrb	r3, [r7, #3]
    a7e8:	f003 0320 	and.w	r3, r3, #32
    a7ec:	2b00      	cmp	r3, #0
    a7ee:	d003      	beq.n	a7f8 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a7f0:	2100      	movs	r1, #0
    a7f2:	6878      	ldr	r0, [r7, #4]
    a7f4:	4b03      	ldr	r3, [pc, #12]	; (a804 <_usb_d_dev_trans_setup_isr+0x50>)
    a7f6:	4798      	blx	r3
}
    a7f8:	bf00      	nop
    a7fa:	3708      	adds	r7, #8
    a7fc:	46bd      	mov	sp, r7
    a7fe:	bd80      	pop	{r7, pc}
    a800:	0000a4d5 	.word	0x0000a4d5
    a804:	0000a5ad 	.word	0x0000a5ad

0000a808 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a808:	b580      	push	{r7, lr}
    a80a:	b082      	sub	sp, #8
    a80c:	af00      	add	r7, sp, #0
    a80e:	6078      	str	r0, [r7, #4]
    a810:	460b      	mov	r3, r1
    a812:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a814:	78fb      	ldrb	r3, [r7, #3]
    a816:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a81a:	2b00      	cmp	r3, #0
    a81c:	d004      	beq.n	a828 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a81e:	2101      	movs	r1, #1
    a820:	6878      	ldr	r0, [r7, #4]
    a822:	4b1a      	ldr	r3, [pc, #104]	; (a88c <_usb_d_dev_trans_in_isr+0x84>)
    a824:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a826:	e02c      	b.n	a882 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a828:	78fb      	ldrb	r3, [r7, #3]
    a82a:	f003 0308 	and.w	r3, r3, #8
    a82e:	2b00      	cmp	r3, #0
    a830:	d004      	beq.n	a83c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a832:	2101      	movs	r1, #1
    a834:	6878      	ldr	r0, [r7, #4]
    a836:	4b16      	ldr	r3, [pc, #88]	; (a890 <_usb_d_dev_trans_in_isr+0x88>)
    a838:	4798      	blx	r3
}
    a83a:	e022      	b.n	a882 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a83c:	78fb      	ldrb	r3, [r7, #3]
    a83e:	f003 0302 	and.w	r3, r3, #2
    a842:	2b00      	cmp	r3, #0
    a844:	d004      	beq.n	a850 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a846:	2101      	movs	r1, #1
    a848:	6878      	ldr	r0, [r7, #4]
    a84a:	4b12      	ldr	r3, [pc, #72]	; (a894 <_usb_d_dev_trans_in_isr+0x8c>)
    a84c:	4798      	blx	r3
}
    a84e:	e018      	b.n	a882 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a850:	687b      	ldr	r3, [r7, #4]
    a852:	7cdb      	ldrb	r3, [r3, #19]
    a854:	f003 0307 	and.w	r3, r3, #7
    a858:	b2db      	uxtb	r3, r3
    a85a:	2b01      	cmp	r3, #1
    a85c:	d111      	bne.n	a882 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a85e:	78fb      	ldrb	r3, [r7, #3]
    a860:	f003 0304 	and.w	r3, r3, #4
    a864:	2b00      	cmp	r3, #0
    a866:	d004      	beq.n	a872 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a868:	2100      	movs	r1, #0
    a86a:	6878      	ldr	r0, [r7, #4]
    a86c:	4b08      	ldr	r3, [pc, #32]	; (a890 <_usb_d_dev_trans_in_isr+0x88>)
    a86e:	4798      	blx	r3
}
    a870:	e007      	b.n	a882 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a872:	78fb      	ldrb	r3, [r7, #3]
    a874:	f003 0310 	and.w	r3, r3, #16
    a878:	2b00      	cmp	r3, #0
    a87a:	d002      	beq.n	a882 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a87c:	6878      	ldr	r0, [r7, #4]
    a87e:	4b06      	ldr	r3, [pc, #24]	; (a898 <_usb_d_dev_trans_in_isr+0x90>)
    a880:	4798      	blx	r3
}
    a882:	bf00      	nop
    a884:	3708      	adds	r7, #8
    a886:	46bd      	mov	sp, r7
    a888:	bd80      	pop	{r7, pc}
    a88a:	bf00      	nop
    a88c:	0000a5ad 	.word	0x0000a5ad
    a890:	0000a5f1 	.word	0x0000a5f1
    a894:	00009ff9 	.word	0x00009ff9
    a898:	0000a4d5 	.word	0x0000a4d5

0000a89c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a89c:	b580      	push	{r7, lr}
    a89e:	b082      	sub	sp, #8
    a8a0:	af00      	add	r7, sp, #0
    a8a2:	6078      	str	r0, [r7, #4]
    a8a4:	460b      	mov	r3, r1
    a8a6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a8a8:	78fb      	ldrb	r3, [r7, #3]
    a8aa:	f003 0320 	and.w	r3, r3, #32
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	d004      	beq.n	a8bc <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a8b2:	2100      	movs	r1, #0
    a8b4:	6878      	ldr	r0, [r7, #4]
    a8b6:	4b1a      	ldr	r3, [pc, #104]	; (a920 <_usb_d_dev_trans_out_isr+0x84>)
    a8b8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a8ba:	e02c      	b.n	a916 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a8bc:	78fb      	ldrb	r3, [r7, #3]
    a8be:	f003 0304 	and.w	r3, r3, #4
    a8c2:	2b00      	cmp	r3, #0
    a8c4:	d004      	beq.n	a8d0 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a8c6:	2100      	movs	r1, #0
    a8c8:	6878      	ldr	r0, [r7, #4]
    a8ca:	4b16      	ldr	r3, [pc, #88]	; (a924 <_usb_d_dev_trans_out_isr+0x88>)
    a8cc:	4798      	blx	r3
}
    a8ce:	e022      	b.n	a916 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a8d0:	78fb      	ldrb	r3, [r7, #3]
    a8d2:	f003 0301 	and.w	r3, r3, #1
    a8d6:	2b00      	cmp	r3, #0
    a8d8:	d004      	beq.n	a8e4 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a8da:	2101      	movs	r1, #1
    a8dc:	6878      	ldr	r0, [r7, #4]
    a8de:	4b12      	ldr	r3, [pc, #72]	; (a928 <_usb_d_dev_trans_out_isr+0x8c>)
    a8e0:	4798      	blx	r3
}
    a8e2:	e018      	b.n	a916 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a8e4:	687b      	ldr	r3, [r7, #4]
    a8e6:	7cdb      	ldrb	r3, [r3, #19]
    a8e8:	f003 0307 	and.w	r3, r3, #7
    a8ec:	b2db      	uxtb	r3, r3
    a8ee:	2b01      	cmp	r3, #1
    a8f0:	d111      	bne.n	a916 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a8f2:	78fb      	ldrb	r3, [r7, #3]
    a8f4:	f003 0308 	and.w	r3, r3, #8
    a8f8:	2b00      	cmp	r3, #0
    a8fa:	d004      	beq.n	a906 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a8fc:	2101      	movs	r1, #1
    a8fe:	6878      	ldr	r0, [r7, #4]
    a900:	4b08      	ldr	r3, [pc, #32]	; (a924 <_usb_d_dev_trans_out_isr+0x88>)
    a902:	4798      	blx	r3
}
    a904:	e007      	b.n	a916 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a906:	78fb      	ldrb	r3, [r7, #3]
    a908:	f003 0310 	and.w	r3, r3, #16
    a90c:	2b00      	cmp	r3, #0
    a90e:	d002      	beq.n	a916 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a910:	6878      	ldr	r0, [r7, #4]
    a912:	4b06      	ldr	r3, [pc, #24]	; (a92c <_usb_d_dev_trans_out_isr+0x90>)
    a914:	4798      	blx	r3
}
    a916:	bf00      	nop
    a918:	3708      	adds	r7, #8
    a91a:	46bd      	mov	sp, r7
    a91c:	bd80      	pop	{r7, pc}
    a91e:	bf00      	nop
    a920:	0000a5ad 	.word	0x0000a5ad
    a924:	0000a5f1 	.word	0x0000a5f1
    a928:	0000a211 	.word	0x0000a211
    a92c:	0000a4d5 	.word	0x0000a4d5

0000a930 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a930:	b580      	push	{r7, lr}
    a932:	b084      	sub	sp, #16
    a934:	af00      	add	r7, sp, #0
    a936:	6078      	str	r0, [r7, #4]
    a938:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a93a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a93e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a940:	683b      	ldr	r3, [r7, #0]
    a942:	7c9b      	ldrb	r3, [r3, #18]
    a944:	f003 030f 	and.w	r3, r3, #15
    a948:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a94a:	7afb      	ldrb	r3, [r7, #11]
    a94c:	2201      	movs	r2, #1
    a94e:	409a      	lsls	r2, r3
    a950:	687b      	ldr	r3, [r7, #4]
    a952:	4013      	ands	r3, r2
    a954:	2b00      	cmp	r3, #0
    a956:	d03d      	beq.n	a9d4 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a958:	7afb      	ldrb	r3, [r7, #11]
    a95a:	68fa      	ldr	r2, [r7, #12]
    a95c:	3308      	adds	r3, #8
    a95e:	015b      	lsls	r3, r3, #5
    a960:	4413      	add	r3, r2
    a962:	3307      	adds	r3, #7
    a964:	781b      	ldrb	r3, [r3, #0]
    a966:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a968:	7afb      	ldrb	r3, [r7, #11]
    a96a:	68fa      	ldr	r2, [r7, #12]
    a96c:	015b      	lsls	r3, r3, #5
    a96e:	4413      	add	r3, r2
    a970:	f203 1309 	addw	r3, r3, #265	; 0x109
    a974:	781b      	ldrb	r3, [r3, #0]
    a976:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a978:	7aba      	ldrb	r2, [r7, #10]
    a97a:	7a7b      	ldrb	r3, [r7, #9]
    a97c:	4013      	ands	r3, r2
    a97e:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a980:	7abb      	ldrb	r3, [r7, #10]
    a982:	2b00      	cmp	r3, #0
    a984:	d027      	beq.n	a9d6 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a986:	683b      	ldr	r3, [r7, #0]
    a988:	7cdb      	ldrb	r3, [r3, #19]
    a98a:	f003 0307 	and.w	r3, r3, #7
    a98e:	b2db      	uxtb	r3, r3
    a990:	2b01      	cmp	r3, #1
    a992:	d10c      	bne.n	a9ae <_usb_d_dev_handle_eps+0x7e>
    a994:	683b      	ldr	r3, [r7, #0]
    a996:	7cdb      	ldrb	r3, [r3, #19]
    a998:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a99c:	b2db      	uxtb	r3, r3
    a99e:	2b00      	cmp	r3, #0
    a9a0:	d105      	bne.n	a9ae <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a9a2:	7abb      	ldrb	r3, [r7, #10]
    a9a4:	4619      	mov	r1, r3
    a9a6:	6838      	ldr	r0, [r7, #0]
    a9a8:	4b0c      	ldr	r3, [pc, #48]	; (a9dc <_usb_d_dev_handle_eps+0xac>)
    a9aa:	4798      	blx	r3
    a9ac:	e013      	b.n	a9d6 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a9ae:	683b      	ldr	r3, [r7, #0]
    a9b0:	7cdb      	ldrb	r3, [r3, #19]
    a9b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a9b6:	b2db      	uxtb	r3, r3
    a9b8:	2b00      	cmp	r3, #0
    a9ba:	d005      	beq.n	a9c8 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a9bc:	7abb      	ldrb	r3, [r7, #10]
    a9be:	4619      	mov	r1, r3
    a9c0:	6838      	ldr	r0, [r7, #0]
    a9c2:	4b07      	ldr	r3, [pc, #28]	; (a9e0 <_usb_d_dev_handle_eps+0xb0>)
    a9c4:	4798      	blx	r3
    a9c6:	e006      	b.n	a9d6 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a9c8:	7abb      	ldrb	r3, [r7, #10]
    a9ca:	4619      	mov	r1, r3
    a9cc:	6838      	ldr	r0, [r7, #0]
    a9ce:	4b05      	ldr	r3, [pc, #20]	; (a9e4 <_usb_d_dev_handle_eps+0xb4>)
    a9d0:	4798      	blx	r3
    a9d2:	e000      	b.n	a9d6 <_usb_d_dev_handle_eps+0xa6>
		return;
    a9d4:	bf00      	nop
		}
	}
}
    a9d6:	3710      	adds	r7, #16
    a9d8:	46bd      	mov	sp, r7
    a9da:	bd80      	pop	{r7, pc}
    a9dc:	0000a7b5 	.word	0x0000a7b5
    a9e0:	0000a809 	.word	0x0000a809
    a9e4:	0000a89d 	.word	0x0000a89d

0000a9e8 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a9e8:	b580      	push	{r7, lr}
    a9ea:	b084      	sub	sp, #16
    a9ec:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a9ee:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a9f2:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a9f4:	68bb      	ldr	r3, [r7, #8]
    a9f6:	8c1b      	ldrh	r3, [r3, #32]
    a9f8:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a9fa:	88fb      	ldrh	r3, [r7, #6]
    a9fc:	2b00      	cmp	r3, #0
    a9fe:	d104      	bne.n	aa0a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    aa00:	4b13      	ldr	r3, [pc, #76]	; (aa50 <_usb_d_dev_handler+0x68>)
    aa02:	4798      	blx	r3
    aa04:	4603      	mov	r3, r0
    aa06:	2b00      	cmp	r3, #0
    aa08:	d11e      	bne.n	aa48 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    aa0a:	2300      	movs	r3, #0
    aa0c:	73fb      	strb	r3, [r7, #15]
    aa0e:	e017      	b.n	aa40 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    aa10:	7bfa      	ldrb	r2, [r7, #15]
    aa12:	4613      	mov	r3, r2
    aa14:	009b      	lsls	r3, r3, #2
    aa16:	4413      	add	r3, r2
    aa18:	009b      	lsls	r3, r3, #2
    aa1a:	3310      	adds	r3, #16
    aa1c:	4a0d      	ldr	r2, [pc, #52]	; (aa54 <_usb_d_dev_handler+0x6c>)
    aa1e:	4413      	add	r3, r2
    aa20:	3304      	adds	r3, #4
    aa22:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    aa24:	683b      	ldr	r3, [r7, #0]
    aa26:	7c9b      	ldrb	r3, [r3, #18]
    aa28:	2bff      	cmp	r3, #255	; 0xff
    aa2a:	d005      	beq.n	aa38 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    aa2c:	88fb      	ldrh	r3, [r7, #6]
    aa2e:	6839      	ldr	r1, [r7, #0]
    aa30:	4618      	mov	r0, r3
    aa32:	4b09      	ldr	r3, [pc, #36]	; (aa58 <_usb_d_dev_handler+0x70>)
    aa34:	4798      	blx	r3
    aa36:	e000      	b.n	aa3a <_usb_d_dev_handler+0x52>
			continue;
    aa38:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    aa3a:	7bfb      	ldrb	r3, [r7, #15]
    aa3c:	3301      	adds	r3, #1
    aa3e:	73fb      	strb	r3, [r7, #15]
    aa40:	7bfb      	ldrb	r3, [r7, #15]
    aa42:	2b08      	cmp	r3, #8
    aa44:	d9e4      	bls.n	aa10 <_usb_d_dev_handler+0x28>
    aa46:	e000      	b.n	aa4a <_usb_d_dev_handler+0x62>
			return;
    aa48:	bf00      	nop
	}
}
    aa4a:	3710      	adds	r7, #16
    aa4c:	46bd      	mov	sp, r7
    aa4e:	bd80      	pop	{r7, pc}
    aa50:	00009f41 	.word	0x00009f41
    aa54:	20001104 	.word	0x20001104
    aa58:	0000a931 	.word	0x0000a931

0000aa5c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    aa5c:	b580      	push	{r7, lr}
    aa5e:	b082      	sub	sp, #8
    aa60:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    aa62:	2300      	movs	r3, #0
    aa64:	71fb      	strb	r3, [r7, #7]
    aa66:	e023      	b.n	aab0 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    aa68:	79fa      	ldrb	r2, [r7, #7]
    aa6a:	4613      	mov	r3, r2
    aa6c:	009b      	lsls	r3, r3, #2
    aa6e:	4413      	add	r3, r2
    aa70:	009b      	lsls	r3, r3, #2
    aa72:	3310      	adds	r3, #16
    aa74:	4a14      	ldr	r2, [pc, #80]	; (aac8 <_usb_d_dev_reset_epts+0x6c>)
    aa76:	4413      	add	r3, r2
    aa78:	3304      	adds	r3, #4
    aa7a:	2103      	movs	r1, #3
    aa7c:	4618      	mov	r0, r3
    aa7e:	4b13      	ldr	r3, [pc, #76]	; (aacc <_usb_d_dev_reset_epts+0x70>)
    aa80:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    aa82:	79fa      	ldrb	r2, [r7, #7]
    aa84:	4910      	ldr	r1, [pc, #64]	; (aac8 <_usb_d_dev_reset_epts+0x6c>)
    aa86:	4613      	mov	r3, r2
    aa88:	009b      	lsls	r3, r3, #2
    aa8a:	4413      	add	r3, r2
    aa8c:	009b      	lsls	r3, r3, #2
    aa8e:	440b      	add	r3, r1
    aa90:	3326      	adds	r3, #38	; 0x26
    aa92:	22ff      	movs	r2, #255	; 0xff
    aa94:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    aa96:	79fa      	ldrb	r2, [r7, #7]
    aa98:	490b      	ldr	r1, [pc, #44]	; (aac8 <_usb_d_dev_reset_epts+0x6c>)
    aa9a:	4613      	mov	r3, r2
    aa9c:	009b      	lsls	r3, r3, #2
    aa9e:	4413      	add	r3, r2
    aaa0:	009b      	lsls	r3, r3, #2
    aaa2:	440b      	add	r3, r1
    aaa4:	3327      	adds	r3, #39	; 0x27
    aaa6:	2200      	movs	r2, #0
    aaa8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    aaaa:	79fb      	ldrb	r3, [r7, #7]
    aaac:	3301      	adds	r3, #1
    aaae:	71fb      	strb	r3, [r7, #7]
    aab0:	79fb      	ldrb	r3, [r7, #7]
    aab2:	2b08      	cmp	r3, #8
    aab4:	d9d8      	bls.n	aa68 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    aab6:	22a0      	movs	r2, #160	; 0xa0
    aab8:	2100      	movs	r1, #0
    aaba:	4805      	ldr	r0, [pc, #20]	; (aad0 <_usb_d_dev_reset_epts+0x74>)
    aabc:	4b05      	ldr	r3, [pc, #20]	; (aad4 <_usb_d_dev_reset_epts+0x78>)
    aabe:	4798      	blx	r3
}
    aac0:	bf00      	nop
    aac2:	3708      	adds	r7, #8
    aac4:	46bd      	mov	sp, r7
    aac6:	bd80      	pop	{r7, pc}
    aac8:	20001104 	.word	0x20001104
    aacc:	0000b321 	.word	0x0000b321
    aad0:	200011cc 	.word	0x200011cc
    aad4:	00014391 	.word	0x00014391

0000aad8 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    aad8:	b580      	push	{r7, lr}
    aada:	b084      	sub	sp, #16
    aadc:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    aade:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aae2:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    aae4:	2301      	movs	r3, #1
    aae6:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    aae8:	2304      	movs	r3, #4
    aaea:	713b      	strb	r3, [r7, #4]
    aaec:	2300      	movs	r3, #0
    aaee:	717b      	strb	r3, [r7, #5]
    aaf0:	2300      	movs	r3, #0
    aaf2:	71bb      	strb	r3, [r7, #6]
    aaf4:	2300      	movs	r3, #0
    aaf6:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    aaf8:	2101      	movs	r1, #1
    aafa:	68f8      	ldr	r0, [r7, #12]
    aafc:	4b26      	ldr	r3, [pc, #152]	; (ab98 <_usb_d_dev_init+0xc0>)
    aafe:	4798      	blx	r3
    ab00:	4603      	mov	r3, r0
    ab02:	f083 0301 	eor.w	r3, r3, #1
    ab06:	b2db      	uxtb	r3, r3
    ab08:	2b00      	cmp	r3, #0
    ab0a:	d011      	beq.n	ab30 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    ab0c:	2102      	movs	r1, #2
    ab0e:	68f8      	ldr	r0, [r7, #12]
    ab10:	4b22      	ldr	r3, [pc, #136]	; (ab9c <_usb_d_dev_init+0xc4>)
    ab12:	4798      	blx	r3
    ab14:	4603      	mov	r3, r0
    ab16:	2b00      	cmp	r3, #0
    ab18:	d006      	beq.n	ab28 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    ab1a:	68f8      	ldr	r0, [r7, #12]
    ab1c:	4b20      	ldr	r3, [pc, #128]	; (aba0 <_usb_d_dev_init+0xc8>)
    ab1e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    ab20:	2102      	movs	r1, #2
    ab22:	68f8      	ldr	r0, [r7, #12]
    ab24:	4b1f      	ldr	r3, [pc, #124]	; (aba4 <_usb_d_dev_init+0xcc>)
    ab26:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    ab28:	2101      	movs	r1, #1
    ab2a:	68f8      	ldr	r0, [r7, #12]
    ab2c:	4b1e      	ldr	r3, [pc, #120]	; (aba8 <_usb_d_dev_init+0xd0>)
    ab2e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    ab30:	2101      	movs	r1, #1
    ab32:	68f8      	ldr	r0, [r7, #12]
    ab34:	4b1b      	ldr	r3, [pc, #108]	; (aba4 <_usb_d_dev_init+0xcc>)
    ab36:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    ab38:	4b1c      	ldr	r3, [pc, #112]	; (abac <_usb_d_dev_init+0xd4>)
    ab3a:	4a1d      	ldr	r2, [pc, #116]	; (abb0 <_usb_d_dev_init+0xd8>)
    ab3c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    ab3e:	4b1b      	ldr	r3, [pc, #108]	; (abac <_usb_d_dev_init+0xd4>)
    ab40:	4a1b      	ldr	r2, [pc, #108]	; (abb0 <_usb_d_dev_init+0xd8>)
    ab42:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    ab44:	4b19      	ldr	r3, [pc, #100]	; (abac <_usb_d_dev_init+0xd4>)
    ab46:	4a1a      	ldr	r2, [pc, #104]	; (abb0 <_usb_d_dev_init+0xd8>)
    ab48:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    ab4a:	4b18      	ldr	r3, [pc, #96]	; (abac <_usb_d_dev_init+0xd4>)
    ab4c:	4a18      	ldr	r2, [pc, #96]	; (abb0 <_usb_d_dev_init+0xd8>)
    ab4e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    ab50:	4b16      	ldr	r3, [pc, #88]	; (abac <_usb_d_dev_init+0xd4>)
    ab52:	4a17      	ldr	r2, [pc, #92]	; (abb0 <_usb_d_dev_init+0xd8>)
    ab54:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    ab56:	4b17      	ldr	r3, [pc, #92]	; (abb4 <_usb_d_dev_init+0xdc>)
    ab58:	4798      	blx	r3

	_usb_load_calib();
    ab5a:	4b17      	ldr	r3, [pc, #92]	; (abb8 <_usb_d_dev_init+0xe0>)
    ab5c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    ab5e:	2104      	movs	r1, #4
    ab60:	68f8      	ldr	r0, [r7, #12]
    ab62:	4b11      	ldr	r3, [pc, #68]	; (aba8 <_usb_d_dev_init+0xd0>)
    ab64:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    ab66:	4b15      	ldr	r3, [pc, #84]	; (abbc <_usb_d_dev_init+0xe4>)
    ab68:	4619      	mov	r1, r3
    ab6a:	68f8      	ldr	r0, [r7, #12]
    ab6c:	4b14      	ldr	r3, [pc, #80]	; (abc0 <_usb_d_dev_init+0xe8>)
    ab6e:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    ab70:	7afb      	ldrb	r3, [r7, #11]
    ab72:	f107 0210 	add.w	r2, r7, #16
    ab76:	4413      	add	r3, r2
    ab78:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    ab7c:	f043 0301 	orr.w	r3, r3, #1
    ab80:	b2db      	uxtb	r3, r3
    ab82:	b29b      	uxth	r3, r3
    ab84:	4619      	mov	r1, r3
    ab86:	68f8      	ldr	r0, [r7, #12]
    ab88:	4b0e      	ldr	r3, [pc, #56]	; (abc4 <_usb_d_dev_init+0xec>)
    ab8a:	4798      	blx	r3

	return ERR_NONE;
    ab8c:	2300      	movs	r3, #0
}
    ab8e:	4618      	mov	r0, r3
    ab90:	3710      	adds	r7, #16
    ab92:	46bd      	mov	sp, r7
    ab94:	bd80      	pop	{r7, pc}
    ab96:	bf00      	nop
    ab98:	00009171 	.word	0x00009171
    ab9c:	000094c1 	.word	0x000094c1
    aba0:	00009495 	.word	0x00009495
    aba4:	00009147 	.word	0x00009147
    aba8:	000094f1 	.word	0x000094f1
    abac:	20001104 	.word	0x20001104
    abb0:	000095b9 	.word	0x000095b9
    abb4:	0000aa5d 	.word	0x0000aa5d
    abb8:	000095d1 	.word	0x000095d1
    abbc:	200011cc 	.word	0x200011cc
    abc0:	0000959d 	.word	0x0000959d
    abc4:	00009561 	.word	0x00009561

0000abc8 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    abc8:	b580      	push	{r7, lr}
    abca:	b082      	sub	sp, #8
    abcc:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    abce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    abd2:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    abd4:	2103      	movs	r1, #3
    abd6:	6878      	ldr	r0, [r7, #4]
    abd8:	4b17      	ldr	r3, [pc, #92]	; (ac38 <_usb_d_dev_enable+0x70>)
    abda:	4798      	blx	r3
    abdc:	4603      	mov	r3, r0
    abde:	2b00      	cmp	r3, #0
    abe0:	d002      	beq.n	abe8 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    abe2:	f06f 0310 	mvn.w	r3, #16
    abe6:	e023      	b.n	ac30 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    abe8:	6878      	ldr	r0, [r7, #4]
    abea:	4b14      	ldr	r3, [pc, #80]	; (ac3c <_usb_d_dev_enable+0x74>)
    abec:	4798      	blx	r3
    abee:	4603      	mov	r3, r0
    abf0:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    abf2:	78fb      	ldrb	r3, [r7, #3]
    abf4:	f003 0302 	and.w	r3, r3, #2
    abf8:	2b00      	cmp	r3, #0
    abfa:	d107      	bne.n	ac0c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    abfc:	78fb      	ldrb	r3, [r7, #3]
    abfe:	f043 0302 	orr.w	r3, r3, #2
    ac02:	b2db      	uxtb	r3, r3
    ac04:	4619      	mov	r1, r3
    ac06:	6878      	ldr	r0, [r7, #4]
    ac08:	4b0d      	ldr	r3, [pc, #52]	; (ac40 <_usb_d_dev_enable+0x78>)
    ac0a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    ac0c:	2050      	movs	r0, #80	; 0x50
    ac0e:	4b0d      	ldr	r3, [pc, #52]	; (ac44 <_usb_d_dev_enable+0x7c>)
    ac10:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    ac12:	2051      	movs	r0, #81	; 0x51
    ac14:	4b0b      	ldr	r3, [pc, #44]	; (ac44 <_usb_d_dev_enable+0x7c>)
    ac16:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    ac18:	2052      	movs	r0, #82	; 0x52
    ac1a:	4b0a      	ldr	r3, [pc, #40]	; (ac44 <_usb_d_dev_enable+0x7c>)
    ac1c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    ac1e:	2053      	movs	r0, #83	; 0x53
    ac20:	4b08      	ldr	r3, [pc, #32]	; (ac44 <_usb_d_dev_enable+0x7c>)
    ac22:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    ac24:	f240 218d 	movw	r1, #653	; 0x28d
    ac28:	6878      	ldr	r0, [r7, #4]
    ac2a:	4b07      	ldr	r3, [pc, #28]	; (ac48 <_usb_d_dev_enable+0x80>)
    ac2c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    ac2e:	2300      	movs	r3, #0
}
    ac30:	4618      	mov	r0, r3
    ac32:	3708      	adds	r7, #8
    ac34:	46bd      	mov	sp, r7
    ac36:	bd80      	pop	{r7, pc}
    ac38:	0000946b 	.word	0x0000946b
    ac3c:	00009519 	.word	0x00009519
    ac40:	000094f1 	.word	0x000094f1
    ac44:	0000907d 	.word	0x0000907d
    ac48:	00009415 	.word	0x00009415

0000ac4c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    ac4c:	b580      	push	{r7, lr}
    ac4e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    ac50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac54:	4b01      	ldr	r3, [pc, #4]	; (ac5c <_usb_d_dev_attach+0x10>)
    ac56:	4798      	blx	r3
}
    ac58:	bf00      	nop
    ac5a:	bd80      	pop	{r7, pc}
    ac5c:	0000953d 	.word	0x0000953d

0000ac60 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    ac60:	b580      	push	{r7, lr}
    ac62:	b082      	sub	sp, #8
    ac64:	af00      	add	r7, sp, #0
    ac66:	4603      	mov	r3, r0
    ac68:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    ac6a:	79fb      	ldrb	r3, [r7, #7]
    ac6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ac70:	b2db      	uxtb	r3, r3
    ac72:	4619      	mov	r1, r3
    ac74:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac78:	4b02      	ldr	r3, [pc, #8]	; (ac84 <_usb_d_dev_set_address+0x24>)
    ac7a:	4798      	blx	r3
}
    ac7c:	bf00      	nop
    ac7e:	3708      	adds	r7, #8
    ac80:	46bd      	mov	sp, r7
    ac82:	bd80      	pop	{r7, pc}
    ac84:	0000957f 	.word	0x0000957f

0000ac88 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    ac88:	b590      	push	{r4, r7, lr}
    ac8a:	b085      	sub	sp, #20
    ac8c:	af00      	add	r7, sp, #0
    ac8e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    ac90:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ac94:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ac96:	687b      	ldr	r3, [r7, #4]
    ac98:	7c9b      	ldrb	r3, [r3, #18]
    ac9a:	f003 030f 	and.w	r3, r3, #15
    ac9e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    aca0:	687b      	ldr	r3, [r7, #4]
    aca2:	68db      	ldr	r3, [r3, #12]
    aca4:	461a      	mov	r2, r3
    aca6:	7afb      	ldrb	r3, [r7, #11]
    aca8:	2100      	movs	r1, #0
    acaa:	4618      	mov	r0, r3
    acac:	4b0f      	ldr	r3, [pc, #60]	; (acec <_usb_d_dev_trans_setup+0x64>)
    acae:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    acb0:	687b      	ldr	r3, [r7, #4]
    acb2:	8a1b      	ldrh	r3, [r3, #16]
    acb4:	461a      	mov	r2, r3
    acb6:	7af8      	ldrb	r0, [r7, #11]
    acb8:	2300      	movs	r3, #0
    acba:	2100      	movs	r1, #0
    acbc:	4c0c      	ldr	r4, [pc, #48]	; (acf0 <_usb_d_dev_trans_setup+0x68>)
    acbe:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    acc0:	7afb      	ldrb	r3, [r7, #11]
    acc2:	22b0      	movs	r2, #176	; 0xb0
    acc4:	4619      	mov	r1, r3
    acc6:	68f8      	ldr	r0, [r7, #12]
    acc8:	4b0a      	ldr	r3, [pc, #40]	; (acf4 <_usb_d_dev_trans_setup+0x6c>)
    acca:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    accc:	7afb      	ldrb	r3, [r7, #11]
    acce:	2200      	movs	r2, #0
    acd0:	2100      	movs	r1, #0
    acd2:	4618      	mov	r0, r3
    acd4:	4b08      	ldr	r3, [pc, #32]	; (acf8 <_usb_d_dev_trans_setup+0x70>)
    acd6:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    acd8:	7afb      	ldrb	r3, [r7, #11]
    acda:	2210      	movs	r2, #16
    acdc:	4619      	mov	r1, r3
    acde:	68f8      	ldr	r0, [r7, #12]
    ace0:	4b06      	ldr	r3, [pc, #24]	; (acfc <_usb_d_dev_trans_setup+0x74>)
    ace2:	4798      	blx	r3
}
    ace4:	bf00      	nop
    ace6:	3714      	adds	r7, #20
    ace8:	46bd      	mov	sp, r7
    acea:	bd90      	pop	{r4, r7, pc}
    acec:	00009a1d 	.word	0x00009a1d
    acf0:	00009ba5 	.word	0x00009ba5
    acf4:	0000927d 	.word	0x0000927d
    acf8:	00009c75 	.word	0x00009c75
    acfc:	000092d1 	.word	0x000092d1

0000ad00 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    ad00:	b580      	push	{r7, lr}
    ad02:	b088      	sub	sp, #32
    ad04:	af00      	add	r7, sp, #0
    ad06:	4603      	mov	r3, r0
    ad08:	71fb      	strb	r3, [r7, #7]
    ad0a:	460b      	mov	r3, r1
    ad0c:	71bb      	strb	r3, [r7, #6]
    ad0e:	4613      	mov	r3, r2
    ad10:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    ad12:	79fb      	ldrb	r3, [r7, #7]
    ad14:	f003 030f 	and.w	r3, r3, #15
    ad18:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    ad1a:	79fb      	ldrb	r3, [r7, #7]
    ad1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad20:	2b00      	cmp	r3, #0
    ad22:	bf14      	ite	ne
    ad24:	2301      	movne	r3, #1
    ad26:	2300      	moveq	r3, #0
    ad28:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ad2a:	7fba      	ldrb	r2, [r7, #30]
    ad2c:	7ffb      	ldrb	r3, [r7, #31]
    ad2e:	4611      	mov	r1, r2
    ad30:	4618      	mov	r0, r3
    ad32:	4b3e      	ldr	r3, [pc, #248]	; (ae2c <_usb_d_dev_ep_init+0x12c>)
    ad34:	4798      	blx	r3
    ad36:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    ad38:	79bb      	ldrb	r3, [r7, #6]
    ad3a:	f003 0303 	and.w	r3, r3, #3
    ad3e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    ad40:	7ffa      	ldrb	r2, [r7, #31]
    ad42:	4613      	mov	r3, r2
    ad44:	005b      	lsls	r3, r3, #1
    ad46:	4413      	add	r3, r2
    ad48:	009b      	lsls	r3, r3, #2
    ad4a:	4a39      	ldr	r2, [pc, #228]	; (ae30 <_usb_d_dev_ep_init+0x130>)
    ad4c:	4413      	add	r3, r2
    ad4e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    ad50:	7ffb      	ldrb	r3, [r7, #31]
    ad52:	2b04      	cmp	r3, #4
    ad54:	d902      	bls.n	ad5c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    ad56:	f06f 0311 	mvn.w	r3, #17
    ad5a:	e063      	b.n	ae24 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    ad5c:	69bb      	ldr	r3, [r7, #24]
    ad5e:	7c9b      	ldrb	r3, [r3, #18]
    ad60:	2bff      	cmp	r3, #255	; 0xff
    ad62:	d002      	beq.n	ad6a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    ad64:	f06f 0313 	mvn.w	r3, #19
    ad68:	e05c      	b.n	ae24 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    ad6a:	7dfb      	ldrb	r3, [r7, #23]
    ad6c:	2b00      	cmp	r3, #0
    ad6e:	d11f      	bne.n	adb0 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    ad70:	7fbb      	ldrb	r3, [r7, #30]
    ad72:	2b00      	cmp	r3, #0
    ad74:	bf14      	ite	ne
    ad76:	2301      	movne	r3, #1
    ad78:	2300      	moveq	r3, #0
    ad7a:	b2db      	uxtb	r3, r3
    ad7c:	f083 0301 	eor.w	r3, r3, #1
    ad80:	b2db      	uxtb	r3, r3
    ad82:	f003 0301 	and.w	r3, r3, #1
    ad86:	b2da      	uxtb	r2, r3
    ad88:	7ffb      	ldrb	r3, [r7, #31]
    ad8a:	4611      	mov	r1, r2
    ad8c:	4618      	mov	r0, r3
    ad8e:	4b27      	ldr	r3, [pc, #156]	; (ae2c <_usb_d_dev_ep_init+0x12c>)
    ad90:	4798      	blx	r3
    ad92:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    ad94:	68fb      	ldr	r3, [r7, #12]
    ad96:	7c9b      	ldrb	r3, [r3, #18]
    ad98:	2bff      	cmp	r3, #255	; 0xff
    ad9a:	d002      	beq.n	ada2 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    ad9c:	f06f 0313 	mvn.w	r3, #19
    ada0:	e040      	b.n	ae24 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    ada2:	693b      	ldr	r3, [r7, #16]
    ada4:	681b      	ldr	r3, [r3, #0]
    ada6:	2b00      	cmp	r3, #0
    ada8:	d102      	bne.n	adb0 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    adaa:	f06f 0312 	mvn.w	r3, #18
    adae:	e039      	b.n	ae24 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    adb0:	7fbb      	ldrb	r3, [r7, #30]
    adb2:	2b00      	cmp	r3, #0
    adb4:	d007      	beq.n	adc6 <_usb_d_dev_ep_init+0xc6>
    adb6:	693b      	ldr	r3, [r7, #16]
    adb8:	685b      	ldr	r3, [r3, #4]
    adba:	2b00      	cmp	r3, #0
    adbc:	bf14      	ite	ne
    adbe:	2301      	movne	r3, #1
    adc0:	2300      	moveq	r3, #0
    adc2:	b2db      	uxtb	r3, r3
    adc4:	e006      	b.n	add4 <_usb_d_dev_ep_init+0xd4>
    adc6:	693b      	ldr	r3, [r7, #16]
    adc8:	681b      	ldr	r3, [r3, #0]
    adca:	2b00      	cmp	r3, #0
    adcc:	bf14      	ite	ne
    adce:	2301      	movne	r3, #1
    add0:	2300      	moveq	r3, #0
    add2:	b2db      	uxtb	r3, r3
    add4:	2b00      	cmp	r3, #0
    add6:	d00f      	beq.n	adf8 <_usb_d_dev_ep_init+0xf8>
    add8:	7fbb      	ldrb	r3, [r7, #30]
    adda:	2b00      	cmp	r3, #0
    addc:	d003      	beq.n	ade6 <_usb_d_dev_ep_init+0xe6>
    adde:	693b      	ldr	r3, [r7, #16]
    ade0:	895b      	ldrh	r3, [r3, #10]
    ade2:	461a      	mov	r2, r3
    ade4:	e002      	b.n	adec <_usb_d_dev_ep_init+0xec>
    ade6:	693b      	ldr	r3, [r7, #16]
    ade8:	891b      	ldrh	r3, [r3, #8]
    adea:	461a      	mov	r2, r3
    adec:	88bb      	ldrh	r3, [r7, #4]
    adee:	429a      	cmp	r2, r3
    adf0:	da02      	bge.n	adf8 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    adf2:	f06f 0312 	mvn.w	r3, #18
    adf6:	e015      	b.n	ae24 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    adf8:	7fbb      	ldrb	r3, [r7, #30]
    adfa:	2b00      	cmp	r3, #0
    adfc:	d002      	beq.n	ae04 <_usb_d_dev_ep_init+0x104>
    adfe:	693b      	ldr	r3, [r7, #16]
    ae00:	685b      	ldr	r3, [r3, #4]
    ae02:	e001      	b.n	ae08 <_usb_d_dev_ep_init+0x108>
    ae04:	693b      	ldr	r3, [r7, #16]
    ae06:	681b      	ldr	r3, [r3, #0]
    ae08:	69ba      	ldr	r2, [r7, #24]
    ae0a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    ae0c:	69bb      	ldr	r3, [r7, #24]
    ae0e:	88ba      	ldrh	r2, [r7, #4]
    ae10:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    ae12:	7dfb      	ldrb	r3, [r7, #23]
    ae14:	3301      	adds	r3, #1
    ae16:	b2da      	uxtb	r2, r3
    ae18:	69bb      	ldr	r3, [r7, #24]
    ae1a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    ae1c:	69bb      	ldr	r3, [r7, #24]
    ae1e:	79fa      	ldrb	r2, [r7, #7]
    ae20:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    ae22:	2300      	movs	r3, #0
}
    ae24:	4618      	mov	r0, r3
    ae26:	3720      	adds	r7, #32
    ae28:	46bd      	mov	sp, r7
    ae2a:	bd80      	pop	{r7, pc}
    ae2c:	00009d31 	.word	0x00009d31
    ae30:	000149b4 	.word	0x000149b4

0000ae34 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    ae34:	b580      	push	{r7, lr}
    ae36:	b086      	sub	sp, #24
    ae38:	af00      	add	r7, sp, #0
    ae3a:	4603      	mov	r3, r0
    ae3c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    ae3e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ae42:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    ae44:	79fb      	ldrb	r3, [r7, #7]
    ae46:	f003 030f 	and.w	r3, r3, #15
    ae4a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ae4c:	79fb      	ldrb	r3, [r7, #7]
    ae4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ae52:	2b00      	cmp	r3, #0
    ae54:	bf14      	ite	ne
    ae56:	2301      	movne	r3, #1
    ae58:	2300      	moveq	r3, #0
    ae5a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ae5c:	7cba      	ldrb	r2, [r7, #18]
    ae5e:	7cfb      	ldrb	r3, [r7, #19]
    ae60:	4611      	mov	r1, r2
    ae62:	4618      	mov	r0, r3
    ae64:	4b2a      	ldr	r3, [pc, #168]	; (af10 <_usb_d_dev_ep_deinit+0xdc>)
    ae66:	4798      	blx	r3
    ae68:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ae6a:	7cfb      	ldrb	r3, [r7, #19]
    ae6c:	2b04      	cmp	r3, #4
    ae6e:	d84a      	bhi.n	af06 <_usb_d_dev_ep_deinit+0xd2>
    ae70:	68fb      	ldr	r3, [r7, #12]
    ae72:	7c9b      	ldrb	r3, [r3, #18]
    ae74:	2bff      	cmp	r3, #255	; 0xff
    ae76:	d046      	beq.n	af06 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    ae78:	7cbb      	ldrb	r3, [r7, #18]
    ae7a:	2203      	movs	r2, #3
    ae7c:	4619      	mov	r1, r3
    ae7e:	68f8      	ldr	r0, [r7, #12]
    ae80:	4b24      	ldr	r3, [pc, #144]	; (af14 <_usb_d_dev_ep_deinit+0xe0>)
    ae82:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ae84:	68fb      	ldr	r3, [r7, #12]
    ae86:	7cdb      	ldrb	r3, [r3, #19]
    ae88:	f003 0307 	and.w	r3, r3, #7
    ae8c:	b2db      	uxtb	r3, r3
    ae8e:	2b01      	cmp	r3, #1
    ae90:	d107      	bne.n	aea2 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    ae92:	79fb      	ldrb	r3, [r7, #7]
    ae94:	697a      	ldr	r2, [r7, #20]
    ae96:	3308      	adds	r3, #8
    ae98:	015b      	lsls	r3, r3, #5
    ae9a:	4413      	add	r3, r2
    ae9c:	2200      	movs	r2, #0
    ae9e:	701a      	strb	r2, [r3, #0]
    aea0:	e02a      	b.n	aef8 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    aea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    aea6:	2b00      	cmp	r3, #0
    aea8:	da15      	bge.n	aed6 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    aeaa:	79fb      	ldrb	r3, [r7, #7]
    aeac:	f003 030f 	and.w	r3, r3, #15
    aeb0:	79fa      	ldrb	r2, [r7, #7]
    aeb2:	f002 020f 	and.w	r2, r2, #15
    aeb6:	6979      	ldr	r1, [r7, #20]
    aeb8:	3208      	adds	r2, #8
    aeba:	0152      	lsls	r2, r2, #5
    aebc:	440a      	add	r2, r1
    aebe:	7812      	ldrb	r2, [r2, #0]
    aec0:	b2d2      	uxtb	r2, r2
    aec2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    aec6:	b2d1      	uxtb	r1, r2
    aec8:	697a      	ldr	r2, [r7, #20]
    aeca:	3308      	adds	r3, #8
    aecc:	015b      	lsls	r3, r3, #5
    aece:	4413      	add	r3, r2
    aed0:	460a      	mov	r2, r1
    aed2:	701a      	strb	r2, [r3, #0]
    aed4:	e010      	b.n	aef8 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    aed6:	79fb      	ldrb	r3, [r7, #7]
    aed8:	79fa      	ldrb	r2, [r7, #7]
    aeda:	6979      	ldr	r1, [r7, #20]
    aedc:	3208      	adds	r2, #8
    aede:	0152      	lsls	r2, r2, #5
    aee0:	440a      	add	r2, r1
    aee2:	7812      	ldrb	r2, [r2, #0]
    aee4:	b2d2      	uxtb	r2, r2
    aee6:	f022 0207 	bic.w	r2, r2, #7
    aeea:	b2d1      	uxtb	r1, r2
    aeec:	697a      	ldr	r2, [r7, #20]
    aeee:	3308      	adds	r3, #8
    aef0:	015b      	lsls	r3, r3, #5
    aef2:	4413      	add	r3, r2
    aef4:	460a      	mov	r2, r1
    aef6:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    aef8:	68fb      	ldr	r3, [r7, #12]
    aefa:	2200      	movs	r2, #0
    aefc:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    aefe:	68fb      	ldr	r3, [r7, #12]
    af00:	22ff      	movs	r2, #255	; 0xff
    af02:	749a      	strb	r2, [r3, #18]
    af04:	e000      	b.n	af08 <_usb_d_dev_ep_deinit+0xd4>
		return;
    af06:	bf00      	nop
}
    af08:	3718      	adds	r7, #24
    af0a:	46bd      	mov	sp, r7
    af0c:	bd80      	pop	{r7, pc}
    af0e:	bf00      	nop
    af10:	00009d31 	.word	0x00009d31
    af14:	0000b369 	.word	0x0000b369

0000af18 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    af18:	b5b0      	push	{r4, r5, r7, lr}
    af1a:	b088      	sub	sp, #32
    af1c:	af00      	add	r7, sp, #0
    af1e:	4603      	mov	r3, r0
    af20:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    af22:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    af26:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    af28:	79fb      	ldrb	r3, [r7, #7]
    af2a:	f003 030f 	and.w	r3, r3, #15
    af2e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    af30:	79fb      	ldrb	r3, [r7, #7]
    af32:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af36:	2b00      	cmp	r3, #0
    af38:	bf14      	ite	ne
    af3a:	2301      	movne	r3, #1
    af3c:	2300      	moveq	r3, #0
    af3e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    af40:	7eba      	ldrb	r2, [r7, #26]
    af42:	7efb      	ldrb	r3, [r7, #27]
    af44:	4611      	mov	r1, r2
    af46:	4618      	mov	r0, r3
    af48:	4b70      	ldr	r3, [pc, #448]	; (b10c <_usb_d_dev_ep_enable+0x1f4>)
    af4a:	4798      	blx	r3
    af4c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    af4e:	7efb      	ldrb	r3, [r7, #27]
    af50:	4619      	mov	r1, r3
    af52:	69f8      	ldr	r0, [r7, #28]
    af54:	4b6e      	ldr	r3, [pc, #440]	; (b110 <_usb_d_dev_ep_enable+0x1f8>)
    af56:	4798      	blx	r3
    af58:	4603      	mov	r3, r0
    af5a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    af5c:	7efb      	ldrb	r3, [r7, #27]
    af5e:	2b04      	cmp	r3, #4
    af60:	d803      	bhi.n	af6a <_usb_d_dev_ep_enable+0x52>
    af62:	697b      	ldr	r3, [r7, #20]
    af64:	7c9b      	ldrb	r3, [r3, #18]
    af66:	2bff      	cmp	r3, #255	; 0xff
    af68:	d102      	bne.n	af70 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    af6a:	f06f 0311 	mvn.w	r3, #17
    af6e:	e0c8      	b.n	b102 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    af70:	7efb      	ldrb	r3, [r7, #27]
    af72:	015b      	lsls	r3, r3, #5
    af74:	4a67      	ldr	r2, [pc, #412]	; (b114 <_usb_d_dev_ep_enable+0x1fc>)
    af76:	4413      	add	r3, r2
    af78:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    af7a:	697b      	ldr	r3, [r7, #20]
    af7c:	7cdb      	ldrb	r3, [r3, #19]
    af7e:	f003 0307 	and.w	r3, r3, #7
    af82:	b2db      	uxtb	r3, r3
    af84:	2b01      	cmp	r3, #1
    af86:	d14b      	bne.n	b020 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    af88:	7cfb      	ldrb	r3, [r7, #19]
    af8a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    af8e:	2b00      	cmp	r3, #0
    af90:	d002      	beq.n	af98 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    af92:	f06f 0313 	mvn.w	r3, #19
    af96:	e0b4      	b.n	b102 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    af98:	7efb      	ldrb	r3, [r7, #27]
    af9a:	2211      	movs	r2, #17
    af9c:	4619      	mov	r1, r3
    af9e:	69f8      	ldr	r0, [r7, #28]
    afa0:	4b5d      	ldr	r3, [pc, #372]	; (b118 <_usb_d_dev_ep_enable+0x200>)
    afa2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    afa4:	697b      	ldr	r3, [r7, #20]
    afa6:	8a1b      	ldrh	r3, [r3, #16]
    afa8:	039b      	lsls	r3, r3, #14
    afaa:	4c5c      	ldr	r4, [pc, #368]	; (b11c <_usb_d_dev_ep_enable+0x204>)
    afac:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    afae:	697b      	ldr	r3, [r7, #20]
    afb0:	8a1b      	ldrh	r3, [r3, #16]
    afb2:	4618      	mov	r0, r3
    afb4:	4b5a      	ldr	r3, [pc, #360]	; (b120 <_usb_d_dev_ep_enable+0x208>)
    afb6:	4798      	blx	r3
    afb8:	4603      	mov	r3, r0
    afba:	071b      	lsls	r3, r3, #28
    afbc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    afc0:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    afc4:	68fb      	ldr	r3, [r7, #12]
    afc6:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    afc8:	68fb      	ldr	r3, [r7, #12]
    afca:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    afce:	697b      	ldr	r3, [r7, #20]
    afd0:	8a1b      	ldrh	r3, [r3, #16]
    afd2:	f3c3 050d 	ubfx	r5, r3, #0, #14
    afd6:	697b      	ldr	r3, [r7, #20]
    afd8:	8a1b      	ldrh	r3, [r3, #16]
    afda:	4618      	mov	r0, r3
    afdc:	4b50      	ldr	r3, [pc, #320]	; (b120 <_usb_d_dev_ep_enable+0x208>)
    afde:	4798      	blx	r3
    afe0:	4603      	mov	r3, r0
    afe2:	071b      	lsls	r3, r3, #28
    afe4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    afe8:	432b      	orrs	r3, r5
    afea:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    afec:	7efb      	ldrb	r3, [r7, #27]
    afee:	2200      	movs	r2, #0
    aff0:	2100      	movs	r1, #0
    aff2:	4618      	mov	r0, r3
    aff4:	4b4b      	ldr	r3, [pc, #300]	; (b124 <_usb_d_dev_ep_enable+0x20c>)
    aff6:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    aff8:	7efb      	ldrb	r3, [r7, #27]
    affa:	2200      	movs	r2, #0
    affc:	2101      	movs	r1, #1
    affe:	4618      	mov	r0, r3
    b000:	4b49      	ldr	r3, [pc, #292]	; (b128 <_usb_d_dev_ep_enable+0x210>)
    b002:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    b004:	7efb      	ldrb	r3, [r7, #27]
    b006:	2100      	movs	r1, #0
    b008:	4618      	mov	r0, r3
    b00a:	4b48      	ldr	r3, [pc, #288]	; (b12c <_usb_d_dev_ep_enable+0x214>)
    b00c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b00e:	7efb      	ldrb	r3, [r7, #27]
    b010:	2101      	movs	r1, #1
    b012:	4618      	mov	r0, r3
    b014:	4b45      	ldr	r3, [pc, #276]	; (b12c <_usb_d_dev_ep_enable+0x214>)
    b016:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    b018:	6978      	ldr	r0, [r7, #20]
    b01a:	4b45      	ldr	r3, [pc, #276]	; (b130 <_usb_d_dev_ep_enable+0x218>)
    b01c:	4798      	blx	r3
    b01e:	e06f      	b.n	b100 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    b020:	7ebb      	ldrb	r3, [r7, #26]
    b022:	2b00      	cmp	r3, #0
    b024:	d038      	beq.n	b098 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    b026:	7cfb      	ldrb	r3, [r7, #19]
    b028:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b02c:	2b00      	cmp	r3, #0
    b02e:	d002      	beq.n	b036 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    b030:	f06f 0313 	mvn.w	r3, #19
    b034:	e065      	b.n	b102 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    b036:	697b      	ldr	r3, [r7, #20]
    b038:	7cdb      	ldrb	r3, [r3, #19]
    b03a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b03e:	b2db      	uxtb	r3, r3
    b040:	011b      	lsls	r3, r3, #4
    b042:	b2db      	uxtb	r3, r3
    b044:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b048:	b2da      	uxtb	r2, r3
    b04a:	7cfb      	ldrb	r3, [r7, #19]
    b04c:	4313      	orrs	r3, r2
    b04e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b050:	7cfa      	ldrb	r2, [r7, #19]
    b052:	7efb      	ldrb	r3, [r7, #27]
    b054:	4619      	mov	r1, r3
    b056:	69f8      	ldr	r0, [r7, #28]
    b058:	4b2f      	ldr	r3, [pc, #188]	; (b118 <_usb_d_dev_ep_enable+0x200>)
    b05a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    b05c:	68fb      	ldr	r3, [r7, #12]
    b05e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b062:	697b      	ldr	r3, [r7, #20]
    b064:	8a1b      	ldrh	r3, [r3, #16]
    b066:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b06a:	697b      	ldr	r3, [r7, #20]
    b06c:	8a1b      	ldrh	r3, [r3, #16]
    b06e:	4618      	mov	r0, r3
    b070:	4b2b      	ldr	r3, [pc, #172]	; (b120 <_usb_d_dev_ep_enable+0x208>)
    b072:	4798      	blx	r3
    b074:	4603      	mov	r3, r0
    b076:	071b      	lsls	r3, r3, #28
    b078:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b07c:	432b      	orrs	r3, r5
    b07e:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b080:	7efb      	ldrb	r3, [r7, #27]
    b082:	2200      	movs	r2, #0
    b084:	2101      	movs	r1, #1
    b086:	4618      	mov	r0, r3
    b088:	4b27      	ldr	r3, [pc, #156]	; (b128 <_usb_d_dev_ep_enable+0x210>)
    b08a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b08c:	7efb      	ldrb	r3, [r7, #27]
    b08e:	2101      	movs	r1, #1
    b090:	4618      	mov	r0, r3
    b092:	4b26      	ldr	r3, [pc, #152]	; (b12c <_usb_d_dev_ep_enable+0x214>)
    b094:	4798      	blx	r3
    b096:	e033      	b.n	b100 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    b098:	7cfb      	ldrb	r3, [r7, #19]
    b09a:	f003 0307 	and.w	r3, r3, #7
    b09e:	2b00      	cmp	r3, #0
    b0a0:	d002      	beq.n	b0a8 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    b0a2:	f06f 0313 	mvn.w	r3, #19
    b0a6:	e02c      	b.n	b102 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    b0a8:	697b      	ldr	r3, [r7, #20]
    b0aa:	7cdb      	ldrb	r3, [r3, #19]
    b0ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b0b0:	b2db      	uxtb	r3, r3
    b0b2:	461a      	mov	r2, r3
    b0b4:	7cfb      	ldrb	r3, [r7, #19]
    b0b6:	4313      	orrs	r3, r2
    b0b8:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b0ba:	7cfa      	ldrb	r2, [r7, #19]
    b0bc:	7efb      	ldrb	r3, [r7, #27]
    b0be:	4619      	mov	r1, r3
    b0c0:	69f8      	ldr	r0, [r7, #28]
    b0c2:	4b15      	ldr	r3, [pc, #84]	; (b118 <_usb_d_dev_ep_enable+0x200>)
    b0c4:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b0c6:	697b      	ldr	r3, [r7, #20]
    b0c8:	8a1b      	ldrh	r3, [r3, #16]
    b0ca:	039b      	lsls	r3, r3, #14
    b0cc:	4c13      	ldr	r4, [pc, #76]	; (b11c <_usb_d_dev_ep_enable+0x204>)
    b0ce:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b0d0:	697b      	ldr	r3, [r7, #20]
    b0d2:	8a1b      	ldrh	r3, [r3, #16]
    b0d4:	4618      	mov	r0, r3
    b0d6:	4b12      	ldr	r3, [pc, #72]	; (b120 <_usb_d_dev_ep_enable+0x208>)
    b0d8:	4798      	blx	r3
    b0da:	4603      	mov	r3, r0
    b0dc:	071b      	lsls	r3, r3, #28
    b0de:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b0e2:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b0e6:	68fb      	ldr	r3, [r7, #12]
    b0e8:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b0ea:	7efb      	ldrb	r3, [r7, #27]
    b0ec:	2200      	movs	r2, #0
    b0ee:	2100      	movs	r1, #0
    b0f0:	4618      	mov	r0, r3
    b0f2:	4b0c      	ldr	r3, [pc, #48]	; (b124 <_usb_d_dev_ep_enable+0x20c>)
    b0f4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    b0f6:	7efb      	ldrb	r3, [r7, #27]
    b0f8:	2100      	movs	r1, #0
    b0fa:	4618      	mov	r0, r3
    b0fc:	4b0b      	ldr	r3, [pc, #44]	; (b12c <_usb_d_dev_ep_enable+0x214>)
    b0fe:	4798      	blx	r3
	}

	return USB_OK;
    b100:	2300      	movs	r3, #0
}
    b102:	4618      	mov	r0, r3
    b104:	3720      	adds	r7, #32
    b106:	46bd      	mov	sp, r7
    b108:	bdb0      	pop	{r4, r5, r7, pc}
    b10a:	bf00      	nop
    b10c:	00009d31 	.word	0x00009d31
    b110:	000093b7 	.word	0x000093b7
    b114:	200011cc 	.word	0x200011cc
    b118:	0000938d 	.word	0x0000938d
    b11c:	0fffc000 	.word	0x0fffc000
    b120:	00009ccd 	.word	0x00009ccd
    b124:	00009c75 	.word	0x00009c75
    b128:	00009c1d 	.word	0x00009c1d
    b12c:	00009be5 	.word	0x00009be5
    b130:	0000ac89 	.word	0x0000ac89

0000b134 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    b134:	b580      	push	{r7, lr}
    b136:	b084      	sub	sp, #16
    b138:	af00      	add	r7, sp, #0
    b13a:	6078      	str	r0, [r7, #4]
    b13c:	460b      	mov	r3, r1
    b13e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b140:	687b      	ldr	r3, [r7, #4]
    b142:	7c9b      	ldrb	r3, [r3, #18]
    b144:	f003 030f 	and.w	r3, r3, #15
    b148:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    b14a:	78fa      	ldrb	r2, [r7, #3]
    b14c:	7bfb      	ldrb	r3, [r7, #15]
    b14e:	4611      	mov	r1, r2
    b150:	4618      	mov	r0, r3
    b152:	4b03      	ldr	r3, [pc, #12]	; (b160 <_usb_d_dev_ep_stall_get+0x2c>)
    b154:	4798      	blx	r3
    b156:	4603      	mov	r3, r0
}
    b158:	4618      	mov	r0, r3
    b15a:	3710      	adds	r7, #16
    b15c:	46bd      	mov	sp, r7
    b15e:	bd80      	pop	{r7, pc}
    b160:	00009825 	.word	0x00009825

0000b164 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    b164:	b580      	push	{r7, lr}
    b166:	b084      	sub	sp, #16
    b168:	af00      	add	r7, sp, #0
    b16a:	6078      	str	r0, [r7, #4]
    b16c:	460b      	mov	r3, r1
    b16e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b170:	687b      	ldr	r3, [r7, #4]
    b172:	7c9b      	ldrb	r3, [r3, #18]
    b174:	f003 030f 	and.w	r3, r3, #15
    b178:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    b17a:	78f9      	ldrb	r1, [r7, #3]
    b17c:	7bfb      	ldrb	r3, [r7, #15]
    b17e:	2201      	movs	r2, #1
    b180:	4618      	mov	r0, r3
    b182:	4b0a      	ldr	r3, [pc, #40]	; (b1ac <_usb_d_dev_ep_stall_set+0x48>)
    b184:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b186:	78fb      	ldrb	r3, [r7, #3]
    b188:	2220      	movs	r2, #32
    b18a:	409a      	lsls	r2, r3
    b18c:	7bfb      	ldrb	r3, [r7, #15]
    b18e:	4611      	mov	r1, r2
    b190:	4618      	mov	r0, r3
    b192:	4b07      	ldr	r3, [pc, #28]	; (b1b0 <_usb_d_dev_ep_stall_set+0x4c>)
    b194:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    b196:	687a      	ldr	r2, [r7, #4]
    b198:	7cd3      	ldrb	r3, [r2, #19]
    b19a:	f043 0308 	orr.w	r3, r3, #8
    b19e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    b1a0:	2300      	movs	r3, #0
}
    b1a2:	4618      	mov	r0, r3
    b1a4:	3710      	adds	r7, #16
    b1a6:	46bd      	mov	sp, r7
    b1a8:	bd80      	pop	{r7, pc}
    b1aa:	bf00      	nop
    b1ac:	000097cd 	.word	0x000097cd
    b1b0:	0000974d 	.word	0x0000974d

0000b1b4 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    b1b4:	b580      	push	{r7, lr}
    b1b6:	b084      	sub	sp, #16
    b1b8:	af00      	add	r7, sp, #0
    b1ba:	6078      	str	r0, [r7, #4]
    b1bc:	460b      	mov	r3, r1
    b1be:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    b1c0:	687b      	ldr	r3, [r7, #4]
    b1c2:	7c9b      	ldrb	r3, [r3, #18]
    b1c4:	f003 030f 	and.w	r3, r3, #15
    b1c8:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    b1ca:	78fa      	ldrb	r2, [r7, #3]
    b1cc:	7bfb      	ldrb	r3, [r7, #15]
    b1ce:	4611      	mov	r1, r2
    b1d0:	4618      	mov	r0, r3
    b1d2:	4b28      	ldr	r3, [pc, #160]	; (b274 <_usb_d_dev_ep_stall_clr+0xc0>)
    b1d4:	4798      	blx	r3
    b1d6:	4603      	mov	r3, r0
    b1d8:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    b1da:	7bbb      	ldrb	r3, [r7, #14]
    b1dc:	f083 0301 	eor.w	r3, r3, #1
    b1e0:	b2db      	uxtb	r3, r3
    b1e2:	2b00      	cmp	r3, #0
    b1e4:	d001      	beq.n	b1ea <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    b1e6:	2300      	movs	r3, #0
    b1e8:	e040      	b.n	b26c <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    b1ea:	78f9      	ldrb	r1, [r7, #3]
    b1ec:	7bfb      	ldrb	r3, [r7, #15]
    b1ee:	2200      	movs	r2, #0
    b1f0:	4618      	mov	r0, r3
    b1f2:	4b21      	ldr	r3, [pc, #132]	; (b278 <_usb_d_dev_ep_stall_clr+0xc4>)
    b1f4:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b1f6:	78fb      	ldrb	r3, [r7, #3]
    b1f8:	2220      	movs	r2, #32
    b1fa:	409a      	lsls	r2, r3
    b1fc:	7bfb      	ldrb	r3, [r7, #15]
    b1fe:	4611      	mov	r1, r2
    b200:	4618      	mov	r0, r3
    b202:	4b1e      	ldr	r3, [pc, #120]	; (b27c <_usb_d_dev_ep_stall_clr+0xc8>)
    b204:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b206:	78fa      	ldrb	r2, [r7, #3]
    b208:	7bfb      	ldrb	r3, [r7, #15]
    b20a:	4611      	mov	r1, r2
    b20c:	4618      	mov	r0, r3
    b20e:	4b1c      	ldr	r3, [pc, #112]	; (b280 <_usb_d_dev_ep_stall_clr+0xcc>)
    b210:	4798      	blx	r3
    b212:	4603      	mov	r3, r0
    b214:	2b00      	cmp	r3, #0
    b216:	d00b      	beq.n	b230 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b218:	78fa      	ldrb	r2, [r7, #3]
    b21a:	7bfb      	ldrb	r3, [r7, #15]
    b21c:	4611      	mov	r1, r2
    b21e:	4618      	mov	r0, r3
    b220:	4b18      	ldr	r3, [pc, #96]	; (b284 <_usb_d_dev_ep_stall_clr+0xd0>)
    b222:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b224:	78f9      	ldrb	r1, [r7, #3]
    b226:	7bfb      	ldrb	r3, [r7, #15]
    b228:	2200      	movs	r2, #0
    b22a:	4618      	mov	r0, r3
    b22c:	4b16      	ldr	r3, [pc, #88]	; (b288 <_usb_d_dev_ep_stall_clr+0xd4>)
    b22e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b230:	687b      	ldr	r3, [r7, #4]
    b232:	7cdb      	ldrb	r3, [r3, #19]
    b234:	f003 0307 	and.w	r3, r3, #7
    b238:	b2db      	uxtb	r3, r3
    b23a:	2b01      	cmp	r3, #1
    b23c:	d110      	bne.n	b260 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b23e:	7bfb      	ldrb	r3, [r7, #15]
    b240:	4619      	mov	r1, r3
    b242:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b246:	4b11      	ldr	r3, [pc, #68]	; (b28c <_usb_d_dev_ep_stall_clr+0xd8>)
    b248:	4798      	blx	r3
    b24a:	4603      	mov	r3, r0
    b24c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b250:	2b00      	cmp	r3, #0
    b252:	d10a      	bne.n	b26a <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b254:	687a      	ldr	r2, [r7, #4]
    b256:	7cd3      	ldrb	r3, [r2, #19]
    b258:	f36f 03c3 	bfc	r3, #3, #1
    b25c:	74d3      	strb	r3, [r2, #19]
    b25e:	e004      	b.n	b26a <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b260:	687a      	ldr	r2, [r7, #4]
    b262:	7cd3      	ldrb	r3, [r2, #19]
    b264:	f36f 03c3 	bfc	r3, #3, #1
    b268:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b26a:	2300      	movs	r3, #0
}
    b26c:	4618      	mov	r0, r3
    b26e:	3710      	adds	r7, #16
    b270:	46bd      	mov	sp, r7
    b272:	bd80      	pop	{r7, pc}
    b274:	00009825 	.word	0x00009825
    b278:	000097cd 	.word	0x000097cd
    b27c:	00009775 	.word	0x00009775
    b280:	00009869 	.word	0x00009869
    b284:	000098ad 	.word	0x000098ad
    b288:	00009999 	.word	0x00009999
    b28c:	00009255 	.word	0x00009255

0000b290 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b290:	b580      	push	{r7, lr}
    b292:	b086      	sub	sp, #24
    b294:	af00      	add	r7, sp, #0
    b296:	4603      	mov	r3, r0
    b298:	460a      	mov	r2, r1
    b29a:	71fb      	strb	r3, [r7, #7]
    b29c:	4613      	mov	r3, r2
    b29e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b2a0:	79fb      	ldrb	r3, [r7, #7]
    b2a2:	f003 030f 	and.w	r3, r3, #15
    b2a6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b2a8:	79fb      	ldrb	r3, [r7, #7]
    b2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b2ae:	2b00      	cmp	r3, #0
    b2b0:	bf14      	ite	ne
    b2b2:	2301      	movne	r3, #1
    b2b4:	2300      	moveq	r3, #0
    b2b6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b2b8:	7cba      	ldrb	r2, [r7, #18]
    b2ba:	7cfb      	ldrb	r3, [r7, #19]
    b2bc:	4611      	mov	r1, r2
    b2be:	4618      	mov	r0, r3
    b2c0:	4b13      	ldr	r3, [pc, #76]	; (b310 <_usb_d_dev_ep_stall+0x80>)
    b2c2:	4798      	blx	r3
    b2c4:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b2c6:	7cfb      	ldrb	r3, [r7, #19]
    b2c8:	2b04      	cmp	r3, #4
    b2ca:	d902      	bls.n	b2d2 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b2cc:	f06f 0311 	mvn.w	r3, #17
    b2d0:	e01a      	b.n	b308 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b2d2:	79bb      	ldrb	r3, [r7, #6]
    b2d4:	2b01      	cmp	r3, #1
    b2d6:	d106      	bne.n	b2e6 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b2d8:	7cbb      	ldrb	r3, [r7, #18]
    b2da:	4619      	mov	r1, r3
    b2dc:	68f8      	ldr	r0, [r7, #12]
    b2de:	4b0d      	ldr	r3, [pc, #52]	; (b314 <_usb_d_dev_ep_stall+0x84>)
    b2e0:	4798      	blx	r3
    b2e2:	6178      	str	r0, [r7, #20]
    b2e4:	e00f      	b.n	b306 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b2e6:	79bb      	ldrb	r3, [r7, #6]
    b2e8:	2b00      	cmp	r3, #0
    b2ea:	d106      	bne.n	b2fa <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b2ec:	7cbb      	ldrb	r3, [r7, #18]
    b2ee:	4619      	mov	r1, r3
    b2f0:	68f8      	ldr	r0, [r7, #12]
    b2f2:	4b09      	ldr	r3, [pc, #36]	; (b318 <_usb_d_dev_ep_stall+0x88>)
    b2f4:	4798      	blx	r3
    b2f6:	6178      	str	r0, [r7, #20]
    b2f8:	e005      	b.n	b306 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b2fa:	7cbb      	ldrb	r3, [r7, #18]
    b2fc:	4619      	mov	r1, r3
    b2fe:	68f8      	ldr	r0, [r7, #12]
    b300:	4b06      	ldr	r3, [pc, #24]	; (b31c <_usb_d_dev_ep_stall+0x8c>)
    b302:	4798      	blx	r3
    b304:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b306:	697b      	ldr	r3, [r7, #20]
}
    b308:	4618      	mov	r0, r3
    b30a:	3718      	adds	r7, #24
    b30c:	46bd      	mov	sp, r7
    b30e:	bd80      	pop	{r7, pc}
    b310:	00009d31 	.word	0x00009d31
    b314:	0000b165 	.word	0x0000b165
    b318:	0000b1b5 	.word	0x0000b1b5
    b31c:	0000b135 	.word	0x0000b135

0000b320 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b320:	b580      	push	{r7, lr}
    b322:	b082      	sub	sp, #8
    b324:	af00      	add	r7, sp, #0
    b326:	6078      	str	r0, [r7, #4]
    b328:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b32a:	687b      	ldr	r3, [r7, #4]
    b32c:	7c9b      	ldrb	r3, [r3, #18]
    b32e:	2bff      	cmp	r3, #255	; 0xff
    b330:	d014      	beq.n	b35c <_usb_d_dev_trans_done+0x3c>
    b332:	687b      	ldr	r3, [r7, #4]
    b334:	7cdb      	ldrb	r3, [r3, #19]
    b336:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b33a:	b2db      	uxtb	r3, r3
    b33c:	2b00      	cmp	r3, #0
    b33e:	d00d      	beq.n	b35c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b340:	687a      	ldr	r2, [r7, #4]
    b342:	7cd3      	ldrb	r3, [r2, #19]
    b344:	f36f 1386 	bfc	r3, #6, #1
    b348:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b34a:	4b06      	ldr	r3, [pc, #24]	; (b364 <_usb_d_dev_trans_done+0x44>)
    b34c:	691b      	ldr	r3, [r3, #16]
    b34e:	687a      	ldr	r2, [r7, #4]
    b350:	7c90      	ldrb	r0, [r2, #18]
    b352:	687a      	ldr	r2, [r7, #4]
    b354:	6892      	ldr	r2, [r2, #8]
    b356:	6839      	ldr	r1, [r7, #0]
    b358:	4798      	blx	r3
    b35a:	e000      	b.n	b35e <_usb_d_dev_trans_done+0x3e>
		return;
    b35c:	bf00      	nop
}
    b35e:	3708      	adds	r7, #8
    b360:	46bd      	mov	sp, r7
    b362:	bd80      	pop	{r7, pc}
    b364:	20001104 	.word	0x20001104

0000b368 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b368:	b580      	push	{r7, lr}
    b36a:	b086      	sub	sp, #24
    b36c:	af00      	add	r7, sp, #0
    b36e:	60f8      	str	r0, [r7, #12]
    b370:	460b      	mov	r3, r1
    b372:	607a      	str	r2, [r7, #4]
    b374:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b376:	68fb      	ldr	r3, [r7, #12]
    b378:	7c9b      	ldrb	r3, [r3, #18]
    b37a:	f003 030f 	and.w	r3, r3, #15
    b37e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b380:	4b1f      	ldr	r3, [pc, #124]	; (b400 <_usb_d_dev_trans_stop+0x98>)
    b382:	881b      	ldrh	r3, [r3, #0]
    b384:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b386:	68fb      	ldr	r3, [r7, #12]
    b388:	7c9b      	ldrb	r3, [r3, #18]
    b38a:	2bff      	cmp	r3, #255	; 0xff
    b38c:	d033      	beq.n	b3f6 <_usb_d_dev_trans_stop+0x8e>
    b38e:	68fb      	ldr	r3, [r7, #12]
    b390:	7cdb      	ldrb	r3, [r3, #19]
    b392:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b396:	b2db      	uxtb	r3, r3
    b398:	2b00      	cmp	r3, #0
    b39a:	d02c      	beq.n	b3f6 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b39c:	7afb      	ldrb	r3, [r7, #11]
    b39e:	2b00      	cmp	r3, #0
    b3a0:	d006      	beq.n	b3b0 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b3a2:	7dfb      	ldrb	r3, [r7, #23]
    b3a4:	2200      	movs	r2, #0
    b3a6:	2101      	movs	r1, #1
    b3a8:	4618      	mov	r0, r3
    b3aa:	4b16      	ldr	r3, [pc, #88]	; (b404 <_usb_d_dev_trans_stop+0x9c>)
    b3ac:	4798      	blx	r3
    b3ae:	e005      	b.n	b3bc <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b3b0:	7dfb      	ldrb	r3, [r7, #23]
    b3b2:	2200      	movs	r2, #0
    b3b4:	2100      	movs	r1, #0
    b3b6:	4618      	mov	r0, r3
    b3b8:	4b13      	ldr	r3, [pc, #76]	; (b408 <_usb_d_dev_trans_stop+0xa0>)
    b3ba:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b3bc:	7afb      	ldrb	r3, [r7, #11]
    b3be:	f107 0218 	add.w	r2, r7, #24
    b3c2:	4413      	add	r3, r2
    b3c4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b3c8:	461a      	mov	r2, r3
    b3ca:	7dfb      	ldrb	r3, [r7, #23]
    b3cc:	4611      	mov	r1, r2
    b3ce:	4618      	mov	r0, r3
    b3d0:	4b0e      	ldr	r3, [pc, #56]	; (b40c <_usb_d_dev_trans_stop+0xa4>)
    b3d2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b3d4:	7afb      	ldrb	r3, [r7, #11]
    b3d6:	f107 0218 	add.w	r2, r7, #24
    b3da:	4413      	add	r3, r2
    b3dc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b3e0:	461a      	mov	r2, r3
    b3e2:	7dfb      	ldrb	r3, [r7, #23]
    b3e4:	4611      	mov	r1, r2
    b3e6:	4618      	mov	r0, r3
    b3e8:	4b09      	ldr	r3, [pc, #36]	; (b410 <_usb_d_dev_trans_stop+0xa8>)
    b3ea:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b3ec:	6879      	ldr	r1, [r7, #4]
    b3ee:	68f8      	ldr	r0, [r7, #12]
    b3f0:	4b08      	ldr	r3, [pc, #32]	; (b414 <_usb_d_dev_trans_stop+0xac>)
    b3f2:	4798      	blx	r3
    b3f4:	e000      	b.n	b3f8 <_usb_d_dev_trans_stop+0x90>
		return;
    b3f6:	bf00      	nop
}
    b3f8:	3718      	adds	r7, #24
    b3fa:	46bd      	mov	sp, r7
    b3fc:	bd80      	pop	{r7, pc}
    b3fe:	bf00      	nop
    b400:	000149f4 	.word	0x000149f4
    b404:	00009c1d 	.word	0x00009c1d
    b408:	00009c75 	.word	0x00009c75
    b40c:	00009725 	.word	0x00009725
    b410:	00009775 	.word	0x00009775
    b414:	0000b321 	.word	0x0000b321

0000b418 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b418:	b580      	push	{r7, lr}
    b41a:	b086      	sub	sp, #24
    b41c:	af00      	add	r7, sp, #0
    b41e:	4603      	mov	r3, r0
    b420:	6039      	str	r1, [r7, #0]
    b422:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b424:	79fb      	ldrb	r3, [r7, #7]
    b426:	f003 030f 	and.w	r3, r3, #15
    b42a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b42c:	7dfb      	ldrb	r3, [r7, #23]
    b42e:	015b      	lsls	r3, r3, #5
    b430:	4a1e      	ldr	r2, [pc, #120]	; (b4ac <_usb_d_dev_ep_read_req+0x94>)
    b432:	4413      	add	r3, r2
    b434:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b436:	693b      	ldr	r3, [r7, #16]
    b438:	681b      	ldr	r3, [r3, #0]
    b43a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b43c:	693b      	ldr	r3, [r7, #16]
    b43e:	685b      	ldr	r3, [r3, #4]
    b440:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b444:	b29b      	uxth	r3, r3
    b446:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b448:	7dfb      	ldrb	r3, [r7, #23]
    b44a:	2b04      	cmp	r3, #4
    b44c:	d802      	bhi.n	b454 <_usb_d_dev_ep_read_req+0x3c>
    b44e:	683b      	ldr	r3, [r7, #0]
    b450:	2b00      	cmp	r3, #0
    b452:	d102      	bne.n	b45a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b454:	f06f 0311 	mvn.w	r3, #17
    b458:	e023      	b.n	b4a2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b45a:	7dfb      	ldrb	r3, [r7, #23]
    b45c:	4618      	mov	r0, r3
    b45e:	4b14      	ldr	r3, [pc, #80]	; (b4b0 <_usb_d_dev_ep_read_req+0x98>)
    b460:	4798      	blx	r3
    b462:	4603      	mov	r3, r0
    b464:	f083 0301 	eor.w	r3, r3, #1
    b468:	b2db      	uxtb	r3, r3
    b46a:	2b00      	cmp	r3, #0
    b46c:	d002      	beq.n	b474 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b46e:	f06f 0312 	mvn.w	r3, #18
    b472:	e016      	b.n	b4a2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b474:	7dfb      	ldrb	r3, [r7, #23]
    b476:	4618      	mov	r0, r3
    b478:	4b0e      	ldr	r3, [pc, #56]	; (b4b4 <_usb_d_dev_ep_read_req+0x9c>)
    b47a:	4798      	blx	r3
    b47c:	4603      	mov	r3, r0
    b47e:	f083 0301 	eor.w	r3, r3, #1
    b482:	b2db      	uxtb	r3, r3
    b484:	2b00      	cmp	r3, #0
    b486:	d001      	beq.n	b48c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b488:	2300      	movs	r3, #0
    b48a:	e00a      	b.n	b4a2 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b48c:	68fb      	ldr	r3, [r7, #12]
    b48e:	2208      	movs	r2, #8
    b490:	4619      	mov	r1, r3
    b492:	6838      	ldr	r0, [r7, #0]
    b494:	4b08      	ldr	r3, [pc, #32]	; (b4b8 <_usb_d_dev_ep_read_req+0xa0>)
    b496:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b498:	7dfb      	ldrb	r3, [r7, #23]
    b49a:	4618      	mov	r0, r3
    b49c:	4b07      	ldr	r3, [pc, #28]	; (b4bc <_usb_d_dev_ep_read_req+0xa4>)
    b49e:	4798      	blx	r3

	return bytes;
    b4a0:	897b      	ldrh	r3, [r7, #10]
}
    b4a2:	4618      	mov	r0, r3
    b4a4:	3718      	adds	r7, #24
    b4a6:	46bd      	mov	sp, r7
    b4a8:	bd80      	pop	{r7, pc}
    b4aa:	bf00      	nop
    b4ac:	200011cc 	.word	0x200011cc
    b4b0:	0000979d 	.word	0x0000979d
    b4b4:	00009949 	.word	0x00009949
    b4b8:	0001425d 	.word	0x0001425d
    b4bc:	00009979 	.word	0x00009979

0000b4c0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b4c0:	b580      	push	{r7, lr}
    b4c2:	b086      	sub	sp, #24
    b4c4:	af00      	add	r7, sp, #0
    b4c6:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b4c8:	687b      	ldr	r3, [r7, #4]
    b4ca:	7a1b      	ldrb	r3, [r3, #8]
    b4cc:	f003 030f 	and.w	r3, r3, #15
    b4d0:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b4d2:	687b      	ldr	r3, [r7, #4]
    b4d4:	7a1b      	ldrb	r3, [r3, #8]
    b4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b4da:	2b00      	cmp	r3, #0
    b4dc:	bf14      	ite	ne
    b4de:	2301      	movne	r3, #1
    b4e0:	2300      	moveq	r3, #0
    b4e2:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b4e4:	7d7a      	ldrb	r2, [r7, #21]
    b4e6:	7dbb      	ldrb	r3, [r7, #22]
    b4e8:	4611      	mov	r1, r2
    b4ea:	4618      	mov	r0, r3
    b4ec:	4b5f      	ldr	r3, [pc, #380]	; (b66c <_usb_d_dev_ep_trans+0x1ac>)
    b4ee:	4798      	blx	r3
    b4f0:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b4f2:	693b      	ldr	r3, [r7, #16]
    b4f4:	8a1b      	ldrh	r3, [r3, #16]
    b4f6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b4fa:	4293      	cmp	r3, r2
    b4fc:	d004      	beq.n	b508 <_usb_d_dev_ep_trans+0x48>
    b4fe:	693b      	ldr	r3, [r7, #16]
    b500:	8a1b      	ldrh	r3, [r3, #16]
    b502:	3b01      	subs	r3, #1
    b504:	b29b      	uxth	r3, r3
    b506:	e001      	b.n	b50c <_usb_d_dev_ep_trans+0x4c>
    b508:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b50c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b50e:	687b      	ldr	r3, [r7, #4]
    b510:	685a      	ldr	r2, [r3, #4]
    b512:	89fb      	ldrh	r3, [r7, #14]
    b514:	4013      	ands	r3, r2
    b516:	2b00      	cmp	r3, #0
    b518:	bf14      	ite	ne
    b51a:	2301      	movne	r3, #1
    b51c:	2300      	moveq	r3, #0
    b51e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b520:	2300      	movs	r3, #0
    b522:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b524:	7dbb      	ldrb	r3, [r7, #22]
    b526:	2b04      	cmp	r3, #4
    b528:	d902      	bls.n	b530 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b52a:	f06f 0311 	mvn.w	r3, #17
    b52e:	e098      	b.n	b662 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b530:	687b      	ldr	r3, [r7, #4]
    b532:	681b      	ldr	r3, [r3, #0]
    b534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b538:	d31a      	bcc.n	b570 <_usb_d_dev_ep_trans+0xb0>
    b53a:	687b      	ldr	r3, [r7, #4]
    b53c:	681b      	ldr	r3, [r3, #0]
    b53e:	461a      	mov	r2, r3
    b540:	687b      	ldr	r3, [r7, #4]
    b542:	685b      	ldr	r3, [r3, #4]
    b544:	4413      	add	r3, r2
    b546:	4a4a      	ldr	r2, [pc, #296]	; (b670 <_usb_d_dev_ep_trans+0x1b0>)
    b548:	4293      	cmp	r3, r2
    b54a:	d811      	bhi.n	b570 <_usb_d_dev_ep_trans+0xb0>
    b54c:	687b      	ldr	r3, [r7, #4]
    b54e:	681b      	ldr	r3, [r3, #0]
    b550:	f003 0303 	and.w	r3, r3, #3
    b554:	2b00      	cmp	r3, #0
    b556:	d10b      	bne.n	b570 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b558:	7d7b      	ldrb	r3, [r7, #21]
    b55a:	f083 0301 	eor.w	r3, r3, #1
    b55e:	b2db      	uxtb	r3, r3
    b560:	2b00      	cmp	r3, #0
    b562:	d00e      	beq.n	b582 <_usb_d_dev_ep_trans+0xc2>
    b564:	687b      	ldr	r3, [r7, #4]
    b566:	685b      	ldr	r3, [r3, #4]
    b568:	693a      	ldr	r2, [r7, #16]
    b56a:	8a12      	ldrh	r2, [r2, #16]
    b56c:	4293      	cmp	r3, r2
    b56e:	d208      	bcs.n	b582 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b570:	693b      	ldr	r3, [r7, #16]
    b572:	68db      	ldr	r3, [r3, #12]
    b574:	2b00      	cmp	r3, #0
    b576:	d102      	bne.n	b57e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b578:	f06f 0312 	mvn.w	r3, #18
    b57c:	e071      	b.n	b662 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b57e:	2301      	movs	r3, #1
    b580:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b582:	7d7b      	ldrb	r3, [r7, #21]
    b584:	f083 0301 	eor.w	r3, r3, #1
    b588:	b2db      	uxtb	r3, r3
    b58a:	2b00      	cmp	r3, #0
    b58c:	d009      	beq.n	b5a2 <_usb_d_dev_ep_trans+0xe2>
    b58e:	7b7b      	ldrb	r3, [r7, #13]
    b590:	2b00      	cmp	r3, #0
    b592:	d006      	beq.n	b5a2 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b594:	693b      	ldr	r3, [r7, #16]
    b596:	68db      	ldr	r3, [r3, #12]
    b598:	2b00      	cmp	r3, #0
    b59a:	d102      	bne.n	b5a2 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b59c:	f06f 0311 	mvn.w	r3, #17
    b5a0:	e05f      	b.n	b662 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b5a2:	693b      	ldr	r3, [r7, #16]
    b5a4:	7cdb      	ldrb	r3, [r3, #19]
    b5a6:	f003 0308 	and.w	r3, r3, #8
    b5aa:	b2db      	uxtb	r3, r3
    b5ac:	2b00      	cmp	r3, #0
    b5ae:	d001      	beq.n	b5b4 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b5b0:	2302      	movs	r3, #2
    b5b2:	e056      	b.n	b662 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b5b4:	f107 0308 	add.w	r3, r7, #8
    b5b8:	4618      	mov	r0, r3
    b5ba:	4b2e      	ldr	r3, [pc, #184]	; (b674 <_usb_d_dev_ep_trans+0x1b4>)
    b5bc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b5be:	693b      	ldr	r3, [r7, #16]
    b5c0:	7cdb      	ldrb	r3, [r3, #19]
    b5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b5c6:	b2db      	uxtb	r3, r3
    b5c8:	2b00      	cmp	r3, #0
    b5ca:	d006      	beq.n	b5da <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b5cc:	f107 0308 	add.w	r3, r7, #8
    b5d0:	4618      	mov	r0, r3
    b5d2:	4b29      	ldr	r3, [pc, #164]	; (b678 <_usb_d_dev_ep_trans+0x1b8>)
    b5d4:	4798      	blx	r3
		return USB_BUSY;
    b5d6:	2301      	movs	r3, #1
    b5d8:	e043      	b.n	b662 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b5da:	693a      	ldr	r2, [r7, #16]
    b5dc:	7cd3      	ldrb	r3, [r2, #19]
    b5de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b5e2:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b5e4:	f107 0308 	add.w	r3, r7, #8
    b5e8:	4618      	mov	r0, r3
    b5ea:	4b23      	ldr	r3, [pc, #140]	; (b678 <_usb_d_dev_ep_trans+0x1b8>)
    b5ec:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b5ee:	687b      	ldr	r3, [r7, #4]
    b5f0:	681a      	ldr	r2, [r3, #0]
    b5f2:	693b      	ldr	r3, [r7, #16]
    b5f4:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b5f6:	687b      	ldr	r3, [r7, #4]
    b5f8:	685a      	ldr	r2, [r3, #4]
    b5fa:	693b      	ldr	r3, [r7, #16]
    b5fc:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b5fe:	693b      	ldr	r3, [r7, #16]
    b600:	2200      	movs	r2, #0
    b602:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b604:	693a      	ldr	r2, [r7, #16]
    b606:	7cd3      	ldrb	r3, [r2, #19]
    b608:	7d79      	ldrb	r1, [r7, #21]
    b60a:	f361 13c7 	bfi	r3, r1, #7, #1
    b60e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b610:	693a      	ldr	r2, [r7, #16]
    b612:	7cd3      	ldrb	r3, [r2, #19]
    b614:	7df9      	ldrb	r1, [r7, #23]
    b616:	f361 1345 	bfi	r3, r1, #5, #1
    b61a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b61c:	687b      	ldr	r3, [r7, #4]
    b61e:	7a5b      	ldrb	r3, [r3, #9]
    b620:	2b00      	cmp	r3, #0
    b622:	d007      	beq.n	b634 <_usb_d_dev_ep_trans+0x174>
    b624:	7b7b      	ldrb	r3, [r7, #13]
    b626:	f083 0301 	eor.w	r3, r3, #1
    b62a:	b2db      	uxtb	r3, r3
    b62c:	2b00      	cmp	r3, #0
    b62e:	d001      	beq.n	b634 <_usb_d_dev_ep_trans+0x174>
    b630:	2301      	movs	r3, #1
    b632:	e000      	b.n	b636 <_usb_d_dev_ep_trans+0x176>
    b634:	2300      	movs	r3, #0
    b636:	b2db      	uxtb	r3, r3
    b638:	f003 0301 	and.w	r3, r3, #1
    b63c:	b2d9      	uxtb	r1, r3
    b63e:	693a      	ldr	r2, [r7, #16]
    b640:	7cd3      	ldrb	r3, [r2, #19]
    b642:	f361 1304 	bfi	r3, r1, #4, #1
    b646:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b648:	7d7b      	ldrb	r3, [r7, #21]
    b64a:	2b00      	cmp	r3, #0
    b64c:	d004      	beq.n	b658 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b64e:	2100      	movs	r1, #0
    b650:	6938      	ldr	r0, [r7, #16]
    b652:	4b0a      	ldr	r3, [pc, #40]	; (b67c <_usb_d_dev_ep_trans+0x1bc>)
    b654:	4798      	blx	r3
    b656:	e003      	b.n	b660 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b658:	2100      	movs	r1, #0
    b65a:	6938      	ldr	r0, [r7, #16]
    b65c:	4b08      	ldr	r3, [pc, #32]	; (b680 <_usb_d_dev_ep_trans+0x1c0>)
    b65e:	4798      	blx	r3
	}

	return ERR_NONE;
    b660:	2300      	movs	r3, #0
}
    b662:	4618      	mov	r0, r3
    b664:	3718      	adds	r7, #24
    b666:	46bd      	mov	sp, r7
    b668:	bd80      	pop	{r7, pc}
    b66a:	bf00      	nop
    b66c:	00009d31 	.word	0x00009d31
    b670:	20041fff 	.word	0x20041fff
    b674:	0000be8d 	.word	0x0000be8d
    b678:	0000beb3 	.word	0x0000beb3
    b67c:	00009ff9 	.word	0x00009ff9
    b680:	0000a211 	.word	0x0000a211

0000b684 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b684:	b580      	push	{r7, lr}
    b686:	b084      	sub	sp, #16
    b688:	af00      	add	r7, sp, #0
    b68a:	4603      	mov	r3, r0
    b68c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b68e:	79fb      	ldrb	r3, [r7, #7]
    b690:	f003 030f 	and.w	r3, r3, #15
    b694:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b696:	79fb      	ldrb	r3, [r7, #7]
    b698:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b69c:	2b00      	cmp	r3, #0
    b69e:	bf14      	ite	ne
    b6a0:	2301      	movne	r3, #1
    b6a2:	2300      	moveq	r3, #0
    b6a4:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b6a6:	7bba      	ldrb	r2, [r7, #14]
    b6a8:	7bfb      	ldrb	r3, [r7, #15]
    b6aa:	4611      	mov	r1, r2
    b6ac:	4618      	mov	r0, r3
    b6ae:	4b08      	ldr	r3, [pc, #32]	; (b6d0 <_usb_d_dev_ep_abort+0x4c>)
    b6b0:	4798      	blx	r3
    b6b2:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b6b4:	7bfb      	ldrb	r3, [r7, #15]
    b6b6:	2b04      	cmp	r3, #4
    b6b8:	d806      	bhi.n	b6c8 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b6ba:	7bbb      	ldrb	r3, [r7, #14]
    b6bc:	2202      	movs	r2, #2
    b6be:	4619      	mov	r1, r3
    b6c0:	68b8      	ldr	r0, [r7, #8]
    b6c2:	4b04      	ldr	r3, [pc, #16]	; (b6d4 <_usb_d_dev_ep_abort+0x50>)
    b6c4:	4798      	blx	r3
    b6c6:	e000      	b.n	b6ca <_usb_d_dev_ep_abort+0x46>
		return;
    b6c8:	bf00      	nop
}
    b6ca:	3710      	adds	r7, #16
    b6cc:	46bd      	mov	sp, r7
    b6ce:	bd80      	pop	{r7, pc}
    b6d0:	00009d31 	.word	0x00009d31
    b6d4:	0000b369 	.word	0x0000b369

0000b6d8 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b6d8:	b480      	push	{r7}
    b6da:	b085      	sub	sp, #20
    b6dc:	af00      	add	r7, sp, #0
    b6de:	4603      	mov	r3, r0
    b6e0:	6039      	str	r1, [r7, #0]
    b6e2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b6e4:	683b      	ldr	r3, [r7, #0]
    b6e6:	2b00      	cmp	r3, #0
    b6e8:	d001      	beq.n	b6ee <_usb_d_dev_register_callback+0x16>
    b6ea:	683b      	ldr	r3, [r7, #0]
    b6ec:	e000      	b.n	b6f0 <_usb_d_dev_register_callback+0x18>
    b6ee:	4b0a      	ldr	r3, [pc, #40]	; (b718 <_usb_d_dev_register_callback+0x40>)
    b6f0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b6f2:	79fb      	ldrb	r3, [r7, #7]
    b6f4:	2b01      	cmp	r3, #1
    b6f6:	d103      	bne.n	b700 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b6f8:	4a08      	ldr	r2, [pc, #32]	; (b71c <_usb_d_dev_register_callback+0x44>)
    b6fa:	68fb      	ldr	r3, [r7, #12]
    b6fc:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b6fe:	e005      	b.n	b70c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b700:	79fb      	ldrb	r3, [r7, #7]
    b702:	2b00      	cmp	r3, #0
    b704:	d102      	bne.n	b70c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b706:	4a05      	ldr	r2, [pc, #20]	; (b71c <_usb_d_dev_register_callback+0x44>)
    b708:	68fb      	ldr	r3, [r7, #12]
    b70a:	6013      	str	r3, [r2, #0]
}
    b70c:	bf00      	nop
    b70e:	3714      	adds	r7, #20
    b710:	46bd      	mov	sp, r7
    b712:	f85d 7b04 	ldr.w	r7, [sp], #4
    b716:	4770      	bx	lr
    b718:	000095b9 	.word	0x000095b9
    b71c:	20001104 	.word	0x20001104

0000b720 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b720:	b480      	push	{r7}
    b722:	b085      	sub	sp, #20
    b724:	af00      	add	r7, sp, #0
    b726:	4603      	mov	r3, r0
    b728:	6039      	str	r1, [r7, #0]
    b72a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b72c:	683b      	ldr	r3, [r7, #0]
    b72e:	2b00      	cmp	r3, #0
    b730:	d001      	beq.n	b736 <_usb_d_dev_register_ep_callback+0x16>
    b732:	683b      	ldr	r3, [r7, #0]
    b734:	e000      	b.n	b738 <_usb_d_dev_register_ep_callback+0x18>
    b736:	4b0e      	ldr	r3, [pc, #56]	; (b770 <_usb_d_dev_register_ep_callback+0x50>)
    b738:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b73a:	79fb      	ldrb	r3, [r7, #7]
    b73c:	2b00      	cmp	r3, #0
    b73e:	d103      	bne.n	b748 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b740:	4a0c      	ldr	r2, [pc, #48]	; (b774 <_usb_d_dev_register_ep_callback+0x54>)
    b742:	68fb      	ldr	r3, [r7, #12]
    b744:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b746:	e00c      	b.n	b762 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b748:	79fb      	ldrb	r3, [r7, #7]
    b74a:	2b01      	cmp	r3, #1
    b74c:	d103      	bne.n	b756 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b74e:	4a09      	ldr	r2, [pc, #36]	; (b774 <_usb_d_dev_register_ep_callback+0x54>)
    b750:	68fb      	ldr	r3, [r7, #12]
    b752:	60d3      	str	r3, [r2, #12]
}
    b754:	e005      	b.n	b762 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b756:	79fb      	ldrb	r3, [r7, #7]
    b758:	2b02      	cmp	r3, #2
    b75a:	d102      	bne.n	b762 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b75c:	4a05      	ldr	r2, [pc, #20]	; (b774 <_usb_d_dev_register_ep_callback+0x54>)
    b75e:	68fb      	ldr	r3, [r7, #12]
    b760:	6113      	str	r3, [r2, #16]
}
    b762:	bf00      	nop
    b764:	3714      	adds	r7, #20
    b766:	46bd      	mov	sp, r7
    b768:	f85d 7b04 	ldr.w	r7, [sp], #4
    b76c:	4770      	bx	lr
    b76e:	bf00      	nop
    b770:	000095b9 	.word	0x000095b9
    b774:	20001104 	.word	0x20001104

0000b778 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b778:	b580      	push	{r7, lr}
    b77a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b77c:	4b01      	ldr	r3, [pc, #4]	; (b784 <USB_0_Handler+0xc>)
    b77e:	4798      	blx	r3
}
    b780:	bf00      	nop
    b782:	bd80      	pop	{r7, pc}
    b784:	0000a9e9 	.word	0x0000a9e9

0000b788 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b788:	b580      	push	{r7, lr}
    b78a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b78c:	4b01      	ldr	r3, [pc, #4]	; (b794 <USB_1_Handler+0xc>)
    b78e:	4798      	blx	r3
}
    b790:	bf00      	nop
    b792:	bd80      	pop	{r7, pc}
    b794:	0000a9e9 	.word	0x0000a9e9

0000b798 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b798:	b580      	push	{r7, lr}
    b79a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b79c:	4b01      	ldr	r3, [pc, #4]	; (b7a4 <USB_2_Handler+0xc>)
    b79e:	4798      	blx	r3
}
    b7a0:	bf00      	nop
    b7a2:	bd80      	pop	{r7, pc}
    b7a4:	0000a9e9 	.word	0x0000a9e9

0000b7a8 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b7a8:	b580      	push	{r7, lr}
    b7aa:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b7ac:	4b01      	ldr	r3, [pc, #4]	; (b7b4 <USB_3_Handler+0xc>)
    b7ae:	4798      	blx	r3
}
    b7b0:	bf00      	nop
    b7b2:	bd80      	pop	{r7, pc}
    b7b4:	0000a9e9 	.word	0x0000a9e9

0000b7b8 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b7b8:	b480      	push	{r7}
    b7ba:	b083      	sub	sp, #12
    b7bc:	af00      	add	r7, sp, #0
    b7be:	6078      	str	r0, [r7, #4]
    b7c0:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b7c2:	bf00      	nop
    b7c4:	687b      	ldr	r3, [r7, #4]
    b7c6:	689a      	ldr	r2, [r3, #8]
    b7c8:	683b      	ldr	r3, [r7, #0]
    b7ca:	4013      	ands	r3, r2
    b7cc:	2b00      	cmp	r3, #0
    b7ce:	d1f9      	bne.n	b7c4 <hri_wdt_wait_for_sync+0xc>
	};
}
    b7d0:	bf00      	nop
    b7d2:	370c      	adds	r7, #12
    b7d4:	46bd      	mov	sp, r7
    b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7da:	4770      	bx	lr

0000b7dc <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b7dc:	b580      	push	{r7, lr}
    b7de:	b084      	sub	sp, #16
    b7e0:	af00      	add	r7, sp, #0
    b7e2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b7e4:	210e      	movs	r1, #14
    b7e6:	6878      	ldr	r0, [r7, #4]
    b7e8:	4b0a      	ldr	r3, [pc, #40]	; (b814 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b7ea:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b7ec:	687b      	ldr	r3, [r7, #4]
    b7ee:	781b      	ldrb	r3, [r3, #0]
    b7f0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b7f2:	7bfb      	ldrb	r3, [r7, #15]
    b7f4:	085b      	lsrs	r3, r3, #1
    b7f6:	b2db      	uxtb	r3, r3
    b7f8:	f003 0301 	and.w	r3, r3, #1
    b7fc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b7fe:	7bfb      	ldrb	r3, [r7, #15]
    b800:	2b00      	cmp	r3, #0
    b802:	bf14      	ite	ne
    b804:	2301      	movne	r3, #1
    b806:	2300      	moveq	r3, #0
    b808:	b2db      	uxtb	r3, r3
}
    b80a:	4618      	mov	r0, r3
    b80c:	3710      	adds	r7, #16
    b80e:	46bd      	mov	sp, r7
    b810:	bd80      	pop	{r7, pc}
    b812:	bf00      	nop
    b814:	0000b7b9 	.word	0x0000b7b9

0000b818 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b818:	b580      	push	{r7, lr}
    b81a:	b082      	sub	sp, #8
    b81c:	af00      	add	r7, sp, #0
    b81e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b820:	687b      	ldr	r3, [r7, #4]
    b822:	781b      	ldrb	r3, [r3, #0]
    b824:	b2db      	uxtb	r3, r3
    b826:	f023 0304 	bic.w	r3, r3, #4
    b82a:	b2da      	uxtb	r2, r3
    b82c:	687b      	ldr	r3, [r7, #4]
    b82e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b830:	210e      	movs	r1, #14
    b832:	6878      	ldr	r0, [r7, #4]
    b834:	4b02      	ldr	r3, [pc, #8]	; (b840 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b836:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b838:	bf00      	nop
    b83a:	3708      	adds	r7, #8
    b83c:	46bd      	mov	sp, r7
    b83e:	bd80      	pop	{r7, pc}
    b840:	0000b7b9 	.word	0x0000b7b9

0000b844 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b844:	b580      	push	{r7, lr}
    b846:	b084      	sub	sp, #16
    b848:	af00      	add	r7, sp, #0
    b84a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b84c:	210e      	movs	r1, #14
    b84e:	6878      	ldr	r0, [r7, #4]
    b850:	4b08      	ldr	r3, [pc, #32]	; (b874 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b852:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b854:	687b      	ldr	r3, [r7, #4]
    b856:	781b      	ldrb	r3, [r3, #0]
    b858:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b85a:	7bfb      	ldrb	r3, [r7, #15]
    b85c:	09db      	lsrs	r3, r3, #7
    b85e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b860:	7bfb      	ldrb	r3, [r7, #15]
    b862:	2b00      	cmp	r3, #0
    b864:	bf14      	ite	ne
    b866:	2301      	movne	r3, #1
    b868:	2300      	moveq	r3, #0
    b86a:	b2db      	uxtb	r3, r3
}
    b86c:	4618      	mov	r0, r3
    b86e:	3710      	adds	r7, #16
    b870:	46bd      	mov	sp, r7
    b872:	bd80      	pop	{r7, pc}
    b874:	0000b7b9 	.word	0x0000b7b9

0000b878 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b878:	b480      	push	{r7}
    b87a:	b085      	sub	sp, #20
    b87c:	af00      	add	r7, sp, #0
    b87e:	6078      	str	r0, [r7, #4]
    b880:	460b      	mov	r3, r1
    b882:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b884:	687b      	ldr	r3, [r7, #4]
    b886:	785b      	ldrb	r3, [r3, #1]
    b888:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b88a:	7bfb      	ldrb	r3, [r7, #15]
    b88c:	f023 030f 	bic.w	r3, r3, #15
    b890:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b892:	78fb      	ldrb	r3, [r7, #3]
    b894:	f003 030f 	and.w	r3, r3, #15
    b898:	b2da      	uxtb	r2, r3
    b89a:	7bfb      	ldrb	r3, [r7, #15]
    b89c:	4313      	orrs	r3, r2
    b89e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b8a0:	687b      	ldr	r3, [r7, #4]
    b8a2:	7bfa      	ldrb	r2, [r7, #15]
    b8a4:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b8a6:	bf00      	nop
    b8a8:	3714      	adds	r7, #20
    b8aa:	46bd      	mov	sp, r7
    b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8b0:	4770      	bx	lr
	...

0000b8b4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b8b4:	b580      	push	{r7, lr}
    b8b6:	b082      	sub	sp, #8
    b8b8:	af00      	add	r7, sp, #0
    b8ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b8bc:	687b      	ldr	r3, [r7, #4]
    b8be:	2b00      	cmp	r3, #0
    b8c0:	d005      	beq.n	b8ce <_wdt_init+0x1a>
    b8c2:	687b      	ldr	r3, [r7, #4]
    b8c4:	681b      	ldr	r3, [r3, #0]
    b8c6:	2b00      	cmp	r3, #0
    b8c8:	d001      	beq.n	b8ce <_wdt_init+0x1a>
    b8ca:	2301      	movs	r3, #1
    b8cc:	e000      	b.n	b8d0 <_wdt_init+0x1c>
    b8ce:	2300      	movs	r3, #0
    b8d0:	f003 0301 	and.w	r3, r3, #1
    b8d4:	b2db      	uxtb	r3, r3
    b8d6:	2250      	movs	r2, #80	; 0x50
    b8d8:	4913      	ldr	r1, [pc, #76]	; (b928 <_wdt_init+0x74>)
    b8da:	4618      	mov	r0, r3
    b8dc:	4b13      	ldr	r3, [pc, #76]	; (b92c <_wdt_init+0x78>)
    b8de:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b8e0:	687b      	ldr	r3, [r7, #4]
    b8e2:	681b      	ldr	r3, [r3, #0]
    b8e4:	4618      	mov	r0, r3
    b8e6:	4b12      	ldr	r3, [pc, #72]	; (b930 <_wdt_init+0x7c>)
    b8e8:	4798      	blx	r3
    b8ea:	4603      	mov	r3, r0
    b8ec:	2b00      	cmp	r3, #0
    b8ee:	d107      	bne.n	b900 <_wdt_init+0x4c>
    b8f0:	687b      	ldr	r3, [r7, #4]
    b8f2:	681b      	ldr	r3, [r3, #0]
    b8f4:	4618      	mov	r0, r3
    b8f6:	4b0f      	ldr	r3, [pc, #60]	; (b934 <_wdt_init+0x80>)
    b8f8:	4798      	blx	r3
    b8fa:	4603      	mov	r3, r0
    b8fc:	2b00      	cmp	r3, #0
    b8fe:	d002      	beq.n	b906 <_wdt_init+0x52>
		return ERR_DENIED;
    b900:	f06f 0310 	mvn.w	r3, #16
    b904:	e00b      	b.n	b91e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b906:	687b      	ldr	r3, [r7, #4]
    b908:	681b      	ldr	r3, [r3, #0]
    b90a:	4618      	mov	r0, r3
    b90c:	4b0a      	ldr	r3, [pc, #40]	; (b938 <_wdt_init+0x84>)
    b90e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b910:	687b      	ldr	r3, [r7, #4]
    b912:	681b      	ldr	r3, [r3, #0]
    b914:	210b      	movs	r1, #11
    b916:	4618      	mov	r0, r3
    b918:	4b08      	ldr	r3, [pc, #32]	; (b93c <_wdt_init+0x88>)
    b91a:	4798      	blx	r3
	}

	return ERR_NONE;
    b91c:	2300      	movs	r3, #0
}
    b91e:	4618      	mov	r0, r3
    b920:	3708      	adds	r7, #8
    b922:	46bd      	mov	sp, r7
    b924:	bd80      	pop	{r7, pc}
    b926:	bf00      	nop
    b928:	000149f8 	.word	0x000149f8
    b92c:	00004211 	.word	0x00004211
    b930:	0000b845 	.word	0x0000b845
    b934:	0000b7dd 	.word	0x0000b7dd
    b938:	0000b819 	.word	0x0000b819
    b93c:	0000b879 	.word	0x0000b879

0000b940 <hri_port_set_DIR_reg>:
{
    b940:	b480      	push	{r7}
    b942:	b085      	sub	sp, #20
    b944:	af00      	add	r7, sp, #0
    b946:	60f8      	str	r0, [r7, #12]
    b948:	460b      	mov	r3, r1
    b94a:	607a      	str	r2, [r7, #4]
    b94c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b94e:	7afb      	ldrb	r3, [r7, #11]
    b950:	68fa      	ldr	r2, [r7, #12]
    b952:	01db      	lsls	r3, r3, #7
    b954:	4413      	add	r3, r2
    b956:	3308      	adds	r3, #8
    b958:	687a      	ldr	r2, [r7, #4]
    b95a:	601a      	str	r2, [r3, #0]
}
    b95c:	bf00      	nop
    b95e:	3714      	adds	r7, #20
    b960:	46bd      	mov	sp, r7
    b962:	f85d 7b04 	ldr.w	r7, [sp], #4
    b966:	4770      	bx	lr

0000b968 <hri_port_clear_DIR_reg>:
{
    b968:	b480      	push	{r7}
    b96a:	b085      	sub	sp, #20
    b96c:	af00      	add	r7, sp, #0
    b96e:	60f8      	str	r0, [r7, #12]
    b970:	460b      	mov	r3, r1
    b972:	607a      	str	r2, [r7, #4]
    b974:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b976:	7afb      	ldrb	r3, [r7, #11]
    b978:	68fa      	ldr	r2, [r7, #12]
    b97a:	01db      	lsls	r3, r3, #7
    b97c:	4413      	add	r3, r2
    b97e:	3304      	adds	r3, #4
    b980:	687a      	ldr	r2, [r7, #4]
    b982:	601a      	str	r2, [r3, #0]
}
    b984:	bf00      	nop
    b986:	3714      	adds	r7, #20
    b988:	46bd      	mov	sp, r7
    b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b98e:	4770      	bx	lr

0000b990 <hri_port_set_OUT_reg>:
{
    b990:	b480      	push	{r7}
    b992:	b085      	sub	sp, #20
    b994:	af00      	add	r7, sp, #0
    b996:	60f8      	str	r0, [r7, #12]
    b998:	460b      	mov	r3, r1
    b99a:	607a      	str	r2, [r7, #4]
    b99c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b99e:	7afb      	ldrb	r3, [r7, #11]
    b9a0:	68fa      	ldr	r2, [r7, #12]
    b9a2:	01db      	lsls	r3, r3, #7
    b9a4:	4413      	add	r3, r2
    b9a6:	3318      	adds	r3, #24
    b9a8:	687a      	ldr	r2, [r7, #4]
    b9aa:	601a      	str	r2, [r3, #0]
}
    b9ac:	bf00      	nop
    b9ae:	3714      	adds	r7, #20
    b9b0:	46bd      	mov	sp, r7
    b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9b6:	4770      	bx	lr

0000b9b8 <hri_port_clear_OUT_reg>:
{
    b9b8:	b480      	push	{r7}
    b9ba:	b085      	sub	sp, #20
    b9bc:	af00      	add	r7, sp, #0
    b9be:	60f8      	str	r0, [r7, #12]
    b9c0:	460b      	mov	r3, r1
    b9c2:	607a      	str	r2, [r7, #4]
    b9c4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b9c6:	7afb      	ldrb	r3, [r7, #11]
    b9c8:	68fa      	ldr	r2, [r7, #12]
    b9ca:	01db      	lsls	r3, r3, #7
    b9cc:	4413      	add	r3, r2
    b9ce:	3314      	adds	r3, #20
    b9d0:	687a      	ldr	r2, [r7, #4]
    b9d2:	601a      	str	r2, [r3, #0]
}
    b9d4:	bf00      	nop
    b9d6:	3714      	adds	r7, #20
    b9d8:	46bd      	mov	sp, r7
    b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9de:	4770      	bx	lr

0000b9e0 <hri_port_write_PMUX_PMUXE_bf>:
{
    b9e0:	b480      	push	{r7}
    b9e2:	b085      	sub	sp, #20
    b9e4:	af00      	add	r7, sp, #0
    b9e6:	6078      	str	r0, [r7, #4]
    b9e8:	4608      	mov	r0, r1
    b9ea:	4611      	mov	r1, r2
    b9ec:	461a      	mov	r2, r3
    b9ee:	4603      	mov	r3, r0
    b9f0:	70fb      	strb	r3, [r7, #3]
    b9f2:	460b      	mov	r3, r1
    b9f4:	70bb      	strb	r3, [r7, #2]
    b9f6:	4613      	mov	r3, r2
    b9f8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b9fa:	78fa      	ldrb	r2, [r7, #3]
    b9fc:	78bb      	ldrb	r3, [r7, #2]
    b9fe:	6879      	ldr	r1, [r7, #4]
    ba00:	01d2      	lsls	r2, r2, #7
    ba02:	440a      	add	r2, r1
    ba04:	4413      	add	r3, r2
    ba06:	3330      	adds	r3, #48	; 0x30
    ba08:	781b      	ldrb	r3, [r3, #0]
    ba0a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ba0c:	7bfb      	ldrb	r3, [r7, #15]
    ba0e:	f023 030f 	bic.w	r3, r3, #15
    ba12:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ba14:	787b      	ldrb	r3, [r7, #1]
    ba16:	f003 030f 	and.w	r3, r3, #15
    ba1a:	b2da      	uxtb	r2, r3
    ba1c:	7bfb      	ldrb	r3, [r7, #15]
    ba1e:	4313      	orrs	r3, r2
    ba20:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ba22:	78fa      	ldrb	r2, [r7, #3]
    ba24:	78bb      	ldrb	r3, [r7, #2]
    ba26:	6879      	ldr	r1, [r7, #4]
    ba28:	01d2      	lsls	r2, r2, #7
    ba2a:	440a      	add	r2, r1
    ba2c:	4413      	add	r3, r2
    ba2e:	3330      	adds	r3, #48	; 0x30
    ba30:	7bfa      	ldrb	r2, [r7, #15]
    ba32:	701a      	strb	r2, [r3, #0]
}
    ba34:	bf00      	nop
    ba36:	3714      	adds	r7, #20
    ba38:	46bd      	mov	sp, r7
    ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba3e:	4770      	bx	lr

0000ba40 <hri_port_write_PMUX_PMUXO_bf>:
{
    ba40:	b480      	push	{r7}
    ba42:	b085      	sub	sp, #20
    ba44:	af00      	add	r7, sp, #0
    ba46:	6078      	str	r0, [r7, #4]
    ba48:	4608      	mov	r0, r1
    ba4a:	4611      	mov	r1, r2
    ba4c:	461a      	mov	r2, r3
    ba4e:	4603      	mov	r3, r0
    ba50:	70fb      	strb	r3, [r7, #3]
    ba52:	460b      	mov	r3, r1
    ba54:	70bb      	strb	r3, [r7, #2]
    ba56:	4613      	mov	r3, r2
    ba58:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ba5a:	78fa      	ldrb	r2, [r7, #3]
    ba5c:	78bb      	ldrb	r3, [r7, #2]
    ba5e:	6879      	ldr	r1, [r7, #4]
    ba60:	01d2      	lsls	r2, r2, #7
    ba62:	440a      	add	r2, r1
    ba64:	4413      	add	r3, r2
    ba66:	3330      	adds	r3, #48	; 0x30
    ba68:	781b      	ldrb	r3, [r3, #0]
    ba6a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    ba6c:	7bfb      	ldrb	r3, [r7, #15]
    ba6e:	f003 030f 	and.w	r3, r3, #15
    ba72:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    ba74:	787b      	ldrb	r3, [r7, #1]
    ba76:	011b      	lsls	r3, r3, #4
    ba78:	b2da      	uxtb	r2, r3
    ba7a:	7bfb      	ldrb	r3, [r7, #15]
    ba7c:	4313      	orrs	r3, r2
    ba7e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ba80:	78fa      	ldrb	r2, [r7, #3]
    ba82:	78bb      	ldrb	r3, [r7, #2]
    ba84:	6879      	ldr	r1, [r7, #4]
    ba86:	01d2      	lsls	r2, r2, #7
    ba88:	440a      	add	r2, r1
    ba8a:	4413      	add	r3, r2
    ba8c:	3330      	adds	r3, #48	; 0x30
    ba8e:	7bfa      	ldrb	r2, [r7, #15]
    ba90:	701a      	strb	r2, [r3, #0]
}
    ba92:	bf00      	nop
    ba94:	3714      	adds	r7, #20
    ba96:	46bd      	mov	sp, r7
    ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba9c:	4770      	bx	lr

0000ba9e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    ba9e:	b480      	push	{r7}
    baa0:	b085      	sub	sp, #20
    baa2:	af00      	add	r7, sp, #0
    baa4:	6078      	str	r0, [r7, #4]
    baa6:	4608      	mov	r0, r1
    baa8:	4611      	mov	r1, r2
    baaa:	461a      	mov	r2, r3
    baac:	4603      	mov	r3, r0
    baae:	70fb      	strb	r3, [r7, #3]
    bab0:	460b      	mov	r3, r1
    bab2:	70bb      	strb	r3, [r7, #2]
    bab4:	4613      	mov	r3, r2
    bab6:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    bab8:	78fa      	ldrb	r2, [r7, #3]
    baba:	78bb      	ldrb	r3, [r7, #2]
    babc:	6879      	ldr	r1, [r7, #4]
    babe:	01d2      	lsls	r2, r2, #7
    bac0:	440a      	add	r2, r1
    bac2:	4413      	add	r3, r2
    bac4:	3340      	adds	r3, #64	; 0x40
    bac6:	781b      	ldrb	r3, [r3, #0]
    bac8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    baca:	7bfb      	ldrb	r3, [r7, #15]
    bacc:	f023 0301 	bic.w	r3, r3, #1
    bad0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    bad2:	787a      	ldrb	r2, [r7, #1]
    bad4:	7bfb      	ldrb	r3, [r7, #15]
    bad6:	4313      	orrs	r3, r2
    bad8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    bada:	78fa      	ldrb	r2, [r7, #3]
    badc:	78bb      	ldrb	r3, [r7, #2]
    bade:	6879      	ldr	r1, [r7, #4]
    bae0:	01d2      	lsls	r2, r2, #7
    bae2:	440a      	add	r2, r1
    bae4:	4413      	add	r3, r2
    bae6:	3340      	adds	r3, #64	; 0x40
    bae8:	7bfa      	ldrb	r2, [r7, #15]
    baea:	701a      	strb	r2, [r3, #0]
}
    baec:	bf00      	nop
    baee:	3714      	adds	r7, #20
    baf0:	46bd      	mov	sp, r7
    baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    baf6:	4770      	bx	lr

0000baf8 <hri_port_write_WRCONFIG_reg>:
{
    baf8:	b480      	push	{r7}
    bafa:	b085      	sub	sp, #20
    bafc:	af00      	add	r7, sp, #0
    bafe:	60f8      	str	r0, [r7, #12]
    bb00:	460b      	mov	r3, r1
    bb02:	607a      	str	r2, [r7, #4]
    bb04:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    bb06:	7afb      	ldrb	r3, [r7, #11]
    bb08:	68fa      	ldr	r2, [r7, #12]
    bb0a:	01db      	lsls	r3, r3, #7
    bb0c:	4413      	add	r3, r2
    bb0e:	3328      	adds	r3, #40	; 0x28
    bb10:	687a      	ldr	r2, [r7, #4]
    bb12:	601a      	str	r2, [r3, #0]
}
    bb14:	bf00      	nop
    bb16:	3714      	adds	r7, #20
    bb18:	46bd      	mov	sp, r7
    bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb1e:	4770      	bx	lr

0000bb20 <_gpio_set_direction>:
{
    bb20:	b580      	push	{r7, lr}
    bb22:	b082      	sub	sp, #8
    bb24:	af00      	add	r7, sp, #0
    bb26:	4603      	mov	r3, r0
    bb28:	6039      	str	r1, [r7, #0]
    bb2a:	71fb      	strb	r3, [r7, #7]
    bb2c:	4613      	mov	r3, r2
    bb2e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    bb30:	79bb      	ldrb	r3, [r7, #6]
    bb32:	2b01      	cmp	r3, #1
    bb34:	d01c      	beq.n	bb70 <_gpio_set_direction+0x50>
    bb36:	2b02      	cmp	r3, #2
    bb38:	d037      	beq.n	bbaa <_gpio_set_direction+0x8a>
    bb3a:	2b00      	cmp	r3, #0
    bb3c:	d14e      	bne.n	bbdc <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    bb3e:	79fb      	ldrb	r3, [r7, #7]
    bb40:	683a      	ldr	r2, [r7, #0]
    bb42:	4619      	mov	r1, r3
    bb44:	482a      	ldr	r0, [pc, #168]	; (bbf0 <_gpio_set_direction+0xd0>)
    bb46:	4b2b      	ldr	r3, [pc, #172]	; (bbf4 <_gpio_set_direction+0xd4>)
    bb48:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    bb4a:	683b      	ldr	r3, [r7, #0]
    bb4c:	b29b      	uxth	r3, r3
    bb4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bb52:	79fb      	ldrb	r3, [r7, #7]
    bb54:	4619      	mov	r1, r3
    bb56:	4826      	ldr	r0, [pc, #152]	; (bbf0 <_gpio_set_direction+0xd0>)
    bb58:	4b27      	ldr	r3, [pc, #156]	; (bbf8 <_gpio_set_direction+0xd8>)
    bb5a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    bb5c:	683b      	ldr	r3, [r7, #0]
    bb5e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    bb60:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    bb64:	79fb      	ldrb	r3, [r7, #7]
    bb66:	4619      	mov	r1, r3
    bb68:	4821      	ldr	r0, [pc, #132]	; (bbf0 <_gpio_set_direction+0xd0>)
    bb6a:	4b23      	ldr	r3, [pc, #140]	; (bbf8 <_gpio_set_direction+0xd8>)
    bb6c:	4798      	blx	r3
		break;
    bb6e:	e03a      	b.n	bbe6 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    bb70:	79fb      	ldrb	r3, [r7, #7]
    bb72:	683a      	ldr	r2, [r7, #0]
    bb74:	4619      	mov	r1, r3
    bb76:	481e      	ldr	r0, [pc, #120]	; (bbf0 <_gpio_set_direction+0xd0>)
    bb78:	4b1e      	ldr	r3, [pc, #120]	; (bbf4 <_gpio_set_direction+0xd4>)
    bb7a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    bb7c:	683b      	ldr	r3, [r7, #0]
    bb7e:	b29b      	uxth	r3, r3
    bb80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    bb84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bb88:	79f9      	ldrb	r1, [r7, #7]
    bb8a:	461a      	mov	r2, r3
    bb8c:	4818      	ldr	r0, [pc, #96]	; (bbf0 <_gpio_set_direction+0xd0>)
    bb8e:	4b1a      	ldr	r3, [pc, #104]	; (bbf8 <_gpio_set_direction+0xd8>)
    bb90:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    bb92:	683b      	ldr	r3, [r7, #0]
    bb94:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    bb96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    bb9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bb9e:	79f9      	ldrb	r1, [r7, #7]
    bba0:	461a      	mov	r2, r3
    bba2:	4813      	ldr	r0, [pc, #76]	; (bbf0 <_gpio_set_direction+0xd0>)
    bba4:	4b14      	ldr	r3, [pc, #80]	; (bbf8 <_gpio_set_direction+0xd8>)
    bba6:	4798      	blx	r3
		break;
    bba8:	e01d      	b.n	bbe6 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    bbaa:	79fb      	ldrb	r3, [r7, #7]
    bbac:	683a      	ldr	r2, [r7, #0]
    bbae:	4619      	mov	r1, r3
    bbb0:	480f      	ldr	r0, [pc, #60]	; (bbf0 <_gpio_set_direction+0xd0>)
    bbb2:	4b12      	ldr	r3, [pc, #72]	; (bbfc <_gpio_set_direction+0xdc>)
    bbb4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    bbb6:	683b      	ldr	r3, [r7, #0]
    bbb8:	b29b      	uxth	r3, r3
    bbba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bbbe:	79fb      	ldrb	r3, [r7, #7]
    bbc0:	4619      	mov	r1, r3
    bbc2:	480b      	ldr	r0, [pc, #44]	; (bbf0 <_gpio_set_direction+0xd0>)
    bbc4:	4b0c      	ldr	r3, [pc, #48]	; (bbf8 <_gpio_set_direction+0xd8>)
    bbc6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    bbc8:	683b      	ldr	r3, [r7, #0]
    bbca:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    bbcc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    bbd0:	79fb      	ldrb	r3, [r7, #7]
    bbd2:	4619      	mov	r1, r3
    bbd4:	4806      	ldr	r0, [pc, #24]	; (bbf0 <_gpio_set_direction+0xd0>)
    bbd6:	4b08      	ldr	r3, [pc, #32]	; (bbf8 <_gpio_set_direction+0xd8>)
    bbd8:	4798      	blx	r3
		break;
    bbda:	e004      	b.n	bbe6 <_gpio_set_direction+0xc6>
		ASSERT(false);
    bbdc:	2246      	movs	r2, #70	; 0x46
    bbde:	4908      	ldr	r1, [pc, #32]	; (bc00 <_gpio_set_direction+0xe0>)
    bbe0:	2000      	movs	r0, #0
    bbe2:	4b08      	ldr	r3, [pc, #32]	; (bc04 <_gpio_set_direction+0xe4>)
    bbe4:	4798      	blx	r3
}
    bbe6:	bf00      	nop
    bbe8:	3708      	adds	r7, #8
    bbea:	46bd      	mov	sp, r7
    bbec:	bd80      	pop	{r7, pc}
    bbee:	bf00      	nop
    bbf0:	41008000 	.word	0x41008000
    bbf4:	0000b969 	.word	0x0000b969
    bbf8:	0000baf9 	.word	0x0000baf9
    bbfc:	0000b941 	.word	0x0000b941
    bc00:	00014a10 	.word	0x00014a10
    bc04:	00004211 	.word	0x00004211

0000bc08 <_gpio_set_level>:
{
    bc08:	b580      	push	{r7, lr}
    bc0a:	b082      	sub	sp, #8
    bc0c:	af00      	add	r7, sp, #0
    bc0e:	4603      	mov	r3, r0
    bc10:	6039      	str	r1, [r7, #0]
    bc12:	71fb      	strb	r3, [r7, #7]
    bc14:	4613      	mov	r3, r2
    bc16:	71bb      	strb	r3, [r7, #6]
	if (level) {
    bc18:	79bb      	ldrb	r3, [r7, #6]
    bc1a:	2b00      	cmp	r3, #0
    bc1c:	d006      	beq.n	bc2c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    bc1e:	79fb      	ldrb	r3, [r7, #7]
    bc20:	683a      	ldr	r2, [r7, #0]
    bc22:	4619      	mov	r1, r3
    bc24:	4806      	ldr	r0, [pc, #24]	; (bc40 <_gpio_set_level+0x38>)
    bc26:	4b07      	ldr	r3, [pc, #28]	; (bc44 <_gpio_set_level+0x3c>)
    bc28:	4798      	blx	r3
}
    bc2a:	e005      	b.n	bc38 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    bc2c:	79fb      	ldrb	r3, [r7, #7]
    bc2e:	683a      	ldr	r2, [r7, #0]
    bc30:	4619      	mov	r1, r3
    bc32:	4803      	ldr	r0, [pc, #12]	; (bc40 <_gpio_set_level+0x38>)
    bc34:	4b04      	ldr	r3, [pc, #16]	; (bc48 <_gpio_set_level+0x40>)
    bc36:	4798      	blx	r3
}
    bc38:	bf00      	nop
    bc3a:	3708      	adds	r7, #8
    bc3c:	46bd      	mov	sp, r7
    bc3e:	bd80      	pop	{r7, pc}
    bc40:	41008000 	.word	0x41008000
    bc44:	0000b991 	.word	0x0000b991
    bc48:	0000b9b9 	.word	0x0000b9b9

0000bc4c <_gpio_set_pin_function>:
{
    bc4c:	b590      	push	{r4, r7, lr}
    bc4e:	b085      	sub	sp, #20
    bc50:	af00      	add	r7, sp, #0
    bc52:	6078      	str	r0, [r7, #4]
    bc54:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    bc56:	687b      	ldr	r3, [r7, #4]
    bc58:	095b      	lsrs	r3, r3, #5
    bc5a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    bc5c:	687b      	ldr	r3, [r7, #4]
    bc5e:	b2db      	uxtb	r3, r3
    bc60:	f003 031f 	and.w	r3, r3, #31
    bc64:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    bc66:	683b      	ldr	r3, [r7, #0]
    bc68:	f1b3 3fff 	cmp.w	r3, #4294967295
    bc6c:	d106      	bne.n	bc7c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    bc6e:	7bba      	ldrb	r2, [r7, #14]
    bc70:	7bf9      	ldrb	r1, [r7, #15]
    bc72:	2300      	movs	r3, #0
    bc74:	4812      	ldr	r0, [pc, #72]	; (bcc0 <_gpio_set_pin_function+0x74>)
    bc76:	4c13      	ldr	r4, [pc, #76]	; (bcc4 <_gpio_set_pin_function+0x78>)
    bc78:	47a0      	blx	r4
}
    bc7a:	e01d      	b.n	bcb8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    bc7c:	7bba      	ldrb	r2, [r7, #14]
    bc7e:	7bf9      	ldrb	r1, [r7, #15]
    bc80:	2301      	movs	r3, #1
    bc82:	480f      	ldr	r0, [pc, #60]	; (bcc0 <_gpio_set_pin_function+0x74>)
    bc84:	4c0f      	ldr	r4, [pc, #60]	; (bcc4 <_gpio_set_pin_function+0x78>)
    bc86:	47a0      	blx	r4
		if (pin & 1) {
    bc88:	7bbb      	ldrb	r3, [r7, #14]
    bc8a:	f003 0301 	and.w	r3, r3, #1
    bc8e:	2b00      	cmp	r3, #0
    bc90:	d009      	beq.n	bca6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    bc92:	7bbb      	ldrb	r3, [r7, #14]
    bc94:	085b      	lsrs	r3, r3, #1
    bc96:	b2da      	uxtb	r2, r3
    bc98:	683b      	ldr	r3, [r7, #0]
    bc9a:	b2db      	uxtb	r3, r3
    bc9c:	7bf9      	ldrb	r1, [r7, #15]
    bc9e:	4808      	ldr	r0, [pc, #32]	; (bcc0 <_gpio_set_pin_function+0x74>)
    bca0:	4c09      	ldr	r4, [pc, #36]	; (bcc8 <_gpio_set_pin_function+0x7c>)
    bca2:	47a0      	blx	r4
}
    bca4:	e008      	b.n	bcb8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    bca6:	7bbb      	ldrb	r3, [r7, #14]
    bca8:	085b      	lsrs	r3, r3, #1
    bcaa:	b2da      	uxtb	r2, r3
    bcac:	683b      	ldr	r3, [r7, #0]
    bcae:	b2db      	uxtb	r3, r3
    bcb0:	7bf9      	ldrb	r1, [r7, #15]
    bcb2:	4803      	ldr	r0, [pc, #12]	; (bcc0 <_gpio_set_pin_function+0x74>)
    bcb4:	4c05      	ldr	r4, [pc, #20]	; (bccc <_gpio_set_pin_function+0x80>)
    bcb6:	47a0      	blx	r4
}
    bcb8:	bf00      	nop
    bcba:	3714      	adds	r7, #20
    bcbc:	46bd      	mov	sp, r7
    bcbe:	bd90      	pop	{r4, r7, pc}
    bcc0:	41008000 	.word	0x41008000
    bcc4:	0000ba9f 	.word	0x0000ba9f
    bcc8:	0000ba41 	.word	0x0000ba41
    bccc:	0000b9e1 	.word	0x0000b9e1

0000bcd0 <gpio_set_pin_function>:
{
    bcd0:	b580      	push	{r7, lr}
    bcd2:	b082      	sub	sp, #8
    bcd4:	af00      	add	r7, sp, #0
    bcd6:	6078      	str	r0, [r7, #4]
    bcd8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    bcda:	6839      	ldr	r1, [r7, #0]
    bcdc:	6878      	ldr	r0, [r7, #4]
    bcde:	4b03      	ldr	r3, [pc, #12]	; (bcec <gpio_set_pin_function+0x1c>)
    bce0:	4798      	blx	r3
}
    bce2:	bf00      	nop
    bce4:	3708      	adds	r7, #8
    bce6:	46bd      	mov	sp, r7
    bce8:	bd80      	pop	{r7, pc}
    bcea:	bf00      	nop
    bcec:	0000bc4d 	.word	0x0000bc4d

0000bcf0 <gpio_set_pin_direction>:
{
    bcf0:	b580      	push	{r7, lr}
    bcf2:	b082      	sub	sp, #8
    bcf4:	af00      	add	r7, sp, #0
    bcf6:	4603      	mov	r3, r0
    bcf8:	460a      	mov	r2, r1
    bcfa:	71fb      	strb	r3, [r7, #7]
    bcfc:	4613      	mov	r3, r2
    bcfe:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    bd00:	79fb      	ldrb	r3, [r7, #7]
    bd02:	095b      	lsrs	r3, r3, #5
    bd04:	b2d8      	uxtb	r0, r3
    bd06:	79fb      	ldrb	r3, [r7, #7]
    bd08:	f003 031f 	and.w	r3, r3, #31
    bd0c:	2201      	movs	r2, #1
    bd0e:	fa02 f303 	lsl.w	r3, r2, r3
    bd12:	79ba      	ldrb	r2, [r7, #6]
    bd14:	4619      	mov	r1, r3
    bd16:	4b03      	ldr	r3, [pc, #12]	; (bd24 <gpio_set_pin_direction+0x34>)
    bd18:	4798      	blx	r3
}
    bd1a:	bf00      	nop
    bd1c:	3708      	adds	r7, #8
    bd1e:	46bd      	mov	sp, r7
    bd20:	bd80      	pop	{r7, pc}
    bd22:	bf00      	nop
    bd24:	0000bb21 	.word	0x0000bb21

0000bd28 <gpio_set_pin_level>:
{
    bd28:	b580      	push	{r7, lr}
    bd2a:	b082      	sub	sp, #8
    bd2c:	af00      	add	r7, sp, #0
    bd2e:	4603      	mov	r3, r0
    bd30:	460a      	mov	r2, r1
    bd32:	71fb      	strb	r3, [r7, #7]
    bd34:	4613      	mov	r3, r2
    bd36:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    bd38:	79fb      	ldrb	r3, [r7, #7]
    bd3a:	095b      	lsrs	r3, r3, #5
    bd3c:	b2d8      	uxtb	r0, r3
    bd3e:	79fb      	ldrb	r3, [r7, #7]
    bd40:	f003 031f 	and.w	r3, r3, #31
    bd44:	2201      	movs	r2, #1
    bd46:	fa02 f303 	lsl.w	r3, r2, r3
    bd4a:	79ba      	ldrb	r2, [r7, #6]
    bd4c:	4619      	mov	r1, r3
    bd4e:	4b03      	ldr	r3, [pc, #12]	; (bd5c <gpio_set_pin_level+0x34>)
    bd50:	4798      	blx	r3
}
    bd52:	bf00      	nop
    bd54:	3708      	adds	r7, #8
    bd56:	46bd      	mov	sp, r7
    bd58:	bd80      	pop	{r7, pc}
    bd5a:	bf00      	nop
    bd5c:	0000bc09 	.word	0x0000bc09

0000bd60 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    bd60:	b580      	push	{r7, lr}
    bd62:	b082      	sub	sp, #8
    bd64:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    bd66:	2100      	movs	r1, #0
    bd68:	2008      	movs	r0, #8
    bd6a:	4b24      	ldr	r3, [pc, #144]	; (bdfc <QSPI_N25Q256_exit_xip+0x9c>)
    bd6c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    bd6e:	2100      	movs	r1, #0
    bd70:	202b      	movs	r0, #43	; 0x2b
    bd72:	4b22      	ldr	r3, [pc, #136]	; (bdfc <QSPI_N25Q256_exit_xip+0x9c>)
    bd74:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    bd76:	2100      	movs	r1, #0
    bd78:	202a      	movs	r0, #42	; 0x2a
    bd7a:	4b20      	ldr	r3, [pc, #128]	; (bdfc <QSPI_N25Q256_exit_xip+0x9c>)
    bd7c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    bd7e:	2102      	movs	r1, #2
    bd80:	2008      	movs	r0, #8
    bd82:	4b1f      	ldr	r3, [pc, #124]	; (be00 <QSPI_N25Q256_exit_xip+0xa0>)
    bd84:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    bd86:	2102      	movs	r1, #2
    bd88:	202b      	movs	r0, #43	; 0x2b
    bd8a:	4b1d      	ldr	r3, [pc, #116]	; (be00 <QSPI_N25Q256_exit_xip+0xa0>)
    bd8c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    bd8e:	2102      	movs	r1, #2
    bd90:	202a      	movs	r0, #42	; 0x2a
    bd92:	4b1b      	ldr	r3, [pc, #108]	; (be00 <QSPI_N25Q256_exit_xip+0xa0>)
    bd94:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    bd96:	2101      	movs	r1, #1
    bd98:	2008      	movs	r0, #8
    bd9a:	4b1a      	ldr	r3, [pc, #104]	; (be04 <QSPI_N25Q256_exit_xip+0xa4>)
    bd9c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    bd9e:	2100      	movs	r1, #0
    bda0:	202b      	movs	r0, #43	; 0x2b
    bda2:	4b18      	ldr	r3, [pc, #96]	; (be04 <QSPI_N25Q256_exit_xip+0xa4>)
    bda4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    bda6:	2100      	movs	r1, #0
    bda8:	202a      	movs	r0, #42	; 0x2a
    bdaa:	4b16      	ldr	r3, [pc, #88]	; (be04 <QSPI_N25Q256_exit_xip+0xa4>)
    bdac:	4798      	blx	r3

	delay_us(1);
    bdae:	2001      	movs	r0, #1
    bdb0:	4b15      	ldr	r3, [pc, #84]	; (be08 <QSPI_N25Q256_exit_xip+0xa8>)
    bdb2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    bdb4:	2300      	movs	r3, #0
    bdb6:	607b      	str	r3, [r7, #4]
    bdb8:	e010      	b.n	bddc <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    bdba:	2101      	movs	r1, #1
    bdbc:	202a      	movs	r0, #42	; 0x2a
    bdbe:	4b11      	ldr	r3, [pc, #68]	; (be04 <QSPI_N25Q256_exit_xip+0xa4>)
    bdc0:	4798      	blx	r3
		delay_us(1);
    bdc2:	2001      	movs	r0, #1
    bdc4:	4b10      	ldr	r3, [pc, #64]	; (be08 <QSPI_N25Q256_exit_xip+0xa8>)
    bdc6:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    bdc8:	2100      	movs	r1, #0
    bdca:	202a      	movs	r0, #42	; 0x2a
    bdcc:	4b0d      	ldr	r3, [pc, #52]	; (be04 <QSPI_N25Q256_exit_xip+0xa4>)
    bdce:	4798      	blx	r3
		delay_us(1);
    bdd0:	2001      	movs	r0, #1
    bdd2:	4b0d      	ldr	r3, [pc, #52]	; (be08 <QSPI_N25Q256_exit_xip+0xa8>)
    bdd4:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    bdd6:	687b      	ldr	r3, [r7, #4]
    bdd8:	3301      	adds	r3, #1
    bdda:	607b      	str	r3, [r7, #4]
    bddc:	687b      	ldr	r3, [r7, #4]
    bdde:	2b06      	cmp	r3, #6
    bde0:	ddeb      	ble.n	bdba <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    bde2:	2101      	movs	r1, #1
    bde4:	202b      	movs	r0, #43	; 0x2b
    bde6:	4b07      	ldr	r3, [pc, #28]	; (be04 <QSPI_N25Q256_exit_xip+0xa4>)
    bde8:	4798      	blx	r3
	delay_us(1);
    bdea:	2001      	movs	r0, #1
    bdec:	4b06      	ldr	r3, [pc, #24]	; (be08 <QSPI_N25Q256_exit_xip+0xa8>)
    bdee:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    bdf0:	4b06      	ldr	r3, [pc, #24]	; (be0c <QSPI_N25Q256_exit_xip+0xac>)
    bdf2:	4798      	blx	r3
}
    bdf4:	bf00      	nop
    bdf6:	3708      	adds	r7, #8
    bdf8:	46bd      	mov	sp, r7
    bdfa:	bd80      	pop	{r7, pc}
    bdfc:	0000bcd1 	.word	0x0000bcd1
    be00:	0000bcf1 	.word	0x0000bcf1
    be04:	0000bd29 	.word	0x0000bd29
    be08:	00002b81 	.word	0x00002b81
    be0c:	00001edd 	.word	0x00001edd

0000be10 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    be10:	b598      	push	{r3, r4, r7, lr}
    be12:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    be14:	4806      	ldr	r0, [pc, #24]	; (be30 <spi_nor_flash_init+0x20>)
    be16:	4b07      	ldr	r3, [pc, #28]	; (be34 <spi_nor_flash_init+0x24>)
    be18:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    be1a:	2300      	movs	r3, #0
    be1c:	4a06      	ldr	r2, [pc, #24]	; (be38 <spi_nor_flash_init+0x28>)
    be1e:	4904      	ldr	r1, [pc, #16]	; (be30 <spi_nor_flash_init+0x20>)
    be20:	4806      	ldr	r0, [pc, #24]	; (be3c <spi_nor_flash_init+0x2c>)
    be22:	4c07      	ldr	r4, [pc, #28]	; (be40 <spi_nor_flash_init+0x30>)
    be24:	47a0      	blx	r4
    be26:	4602      	mov	r2, r0
    be28:	4b06      	ldr	r3, [pc, #24]	; (be44 <spi_nor_flash_init+0x34>)
    be2a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    be2c:	bf00      	nop
    be2e:	bd98      	pop	{r3, r4, r7, pc}
    be30:	2000a250 	.word	0x2000a250
    be34:	000030b9 	.word	0x000030b9
    be38:	0000bd61 	.word	0x0000bd61
    be3c:	2000126c 	.word	0x2000126c
    be40:	0000c27d 	.word	0x0000c27d
    be44:	2000a450 	.word	0x2000a450

0000be48 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    be48:	b580      	push	{r7, lr}
    be4a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    be4c:	4805      	ldr	r0, [pc, #20]	; (be64 <cdc_device_acm_init+0x1c>)
    be4e:	4b06      	ldr	r3, [pc, #24]	; (be68 <cdc_device_acm_init+0x20>)
    be50:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    be52:	4b06      	ldr	r3, [pc, #24]	; (be6c <cdc_device_acm_init+0x24>)
    be54:	4798      	blx	r3

	usbdc_start(single_desc);
    be56:	4806      	ldr	r0, [pc, #24]	; (be70 <cdc_device_acm_init+0x28>)
    be58:	4b06      	ldr	r3, [pc, #24]	; (be74 <cdc_device_acm_init+0x2c>)
    be5a:	4798      	blx	r3
	usbdc_attach();
    be5c:	4b06      	ldr	r3, [pc, #24]	; (be78 <cdc_device_acm_init+0x30>)
    be5e:	4798      	blx	r3
}
    be60:	bf00      	nop
    be62:	bd80      	pop	{r7, pc}
    be64:	200012bc 	.word	0x200012bc
    be68:	0000d9a5 	.word	0x0000d9a5
    be6c:	0000cc1d 	.word	0x0000cc1d
    be70:	20000200 	.word	0x20000200
    be74:	0000da41 	.word	0x0000da41
    be78:	0000da91 	.word	0x0000da91

0000be7c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    be7c:	b580      	push	{r7, lr}
    be7e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    be80:	4b01      	ldr	r3, [pc, #4]	; (be88 <usb_init+0xc>)
    be82:	4798      	blx	r3
}
    be84:	bf00      	nop
    be86:	bd80      	pop	{r7, pc}
    be88:	0000be49 	.word	0x0000be49

0000be8c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    be8c:	b480      	push	{r7}
    be8e:	b085      	sub	sp, #20
    be90:	af00      	add	r7, sp, #0
    be92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    be94:	f3ef 8310 	mrs	r3, PRIMASK
    be98:	60fb      	str	r3, [r7, #12]
  return(result);
    be9a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    be9c:	687b      	ldr	r3, [r7, #4]
    be9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    bea0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    bea2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    bea6:	bf00      	nop
    bea8:	3714      	adds	r7, #20
    beaa:	46bd      	mov	sp, r7
    beac:	f85d 7b04 	ldr.w	r7, [sp], #4
    beb0:	4770      	bx	lr

0000beb2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    beb2:	b480      	push	{r7}
    beb4:	b085      	sub	sp, #20
    beb6:	af00      	add	r7, sp, #0
    beb8:	6078      	str	r0, [r7, #4]
    beba:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    bebe:	687b      	ldr	r3, [r7, #4]
    bec0:	681b      	ldr	r3, [r3, #0]
    bec2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    bec4:	68fb      	ldr	r3, [r7, #12]
    bec6:	f383 8810 	msr	PRIMASK, r3
}
    beca:	bf00      	nop
    becc:	3714      	adds	r7, #20
    bece:	46bd      	mov	sp, r7
    bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bed4:	4770      	bx	lr
	...

0000bed8 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    bed8:	b580      	push	{r7, lr}
    beda:	b08c      	sub	sp, #48	; 0x30
    bedc:	af00      	add	r7, sp, #0
    bede:	6078      	str	r0, [r7, #4]
    bee0:	460b      	mov	r3, r1
    bee2:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bee4:	687b      	ldr	r3, [r7, #4]
    bee6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bee8:	687b      	ldr	r3, [r7, #4]
    beea:	681b      	ldr	r3, [r3, #0]
    beec:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    beee:	f107 030c 	add.w	r3, r7, #12
    bef2:	2200      	movs	r2, #0
    bef4:	601a      	str	r2, [r3, #0]
    bef6:	605a      	str	r2, [r3, #4]
    bef8:	609a      	str	r2, [r3, #8]
    befa:	60da      	str	r2, [r3, #12]
    befc:	611a      	str	r2, [r3, #16]
    befe:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf02:	7b1b      	ldrb	r3, [r3, #12]
    bf04:	2b00      	cmp	r3, #0
    bf06:	d001      	beq.n	bf0c <n25q256a_xip_confirm+0x34>
    bf08:	2206      	movs	r2, #6
    bf0a:	e000      	b.n	bf0e <n25q256a_xip_confirm+0x36>
    bf0c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bf0e:	7b3b      	ldrb	r3, [r7, #12]
    bf10:	f362 0302 	bfi	r3, r2, #0, #3
    bf14:	733b      	strb	r3, [r7, #12]
    bf16:	7b3b      	ldrb	r3, [r7, #12]
    bf18:	f043 0310 	orr.w	r3, r3, #16
    bf1c:	733b      	strb	r3, [r7, #12]
    bf1e:	7b3b      	ldrb	r3, [r7, #12]
    bf20:	f043 0320 	orr.w	r3, r3, #32
    bf24:	733b      	strb	r3, [r7, #12]
    bf26:	7b3b      	ldrb	r3, [r7, #12]
    bf28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bf2c:	733b      	strb	r3, [r7, #12]
    bf2e:	7b3b      	ldrb	r3, [r7, #12]
    bf30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bf34:	733b      	strb	r3, [r7, #12]
    bf36:	7b7b      	ldrb	r3, [r7, #13]
    bf38:	f043 0303 	orr.w	r3, r3, #3
    bf3c:	737b      	strb	r3, [r7, #13]
    bf3e:	7b7b      	ldrb	r3, [r7, #13]
    bf40:	2201      	movs	r2, #1
    bf42:	f362 1305 	bfi	r3, r2, #4, #2
    bf46:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    bf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf4a:	7b1b      	ldrb	r3, [r3, #12]
    bf4c:	2b00      	cmp	r3, #0
    bf4e:	d001      	beq.n	bf54 <n25q256a_xip_confirm+0x7c>
    bf50:	2208      	movs	r2, #8
    bf52:	e000      	b.n	bf56 <n25q256a_xip_confirm+0x7e>
    bf54:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bf56:	7bbb      	ldrb	r3, [r7, #14]
    bf58:	f362 0304 	bfi	r3, r2, #0, #5
    bf5c:	73bb      	strb	r3, [r7, #14]
    bf5e:	230b      	movs	r3, #11
    bf60:	743b      	strb	r3, [r7, #16]
    bf62:	78fb      	ldrb	r3, [r7, #3]
    bf64:	2b00      	cmp	r3, #0
    bf66:	d001      	beq.n	bf6c <n25q256a_xip_confirm+0x94>
    bf68:	2300      	movs	r3, #0
    bf6a:	e000      	b.n	bf6e <n25q256a_xip_confirm+0x96>
    bf6c:	23ff      	movs	r3, #255	; 0xff
    bf6e:	747b      	strb	r3, [r7, #17]
    bf70:	2301      	movs	r3, #1
    bf72:	61bb      	str	r3, [r7, #24]
    bf74:	f107 0327 	add.w	r3, r7, #39	; 0x27
    bf78:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    bf7a:	f107 030c 	add.w	r3, r7, #12
    bf7e:	4619      	mov	r1, r3
    bf80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bf82:	4b07      	ldr	r3, [pc, #28]	; (bfa0 <n25q256a_xip_confirm+0xc8>)
    bf84:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    bf86:	78fb      	ldrb	r3, [r7, #3]
    bf88:	2b00      	cmp	r3, #0
    bf8a:	d001      	beq.n	bf90 <n25q256a_xip_confirm+0xb8>
    bf8c:	2202      	movs	r2, #2
    bf8e:	e000      	b.n	bf92 <n25q256a_xip_confirm+0xba>
    bf90:	2201      	movs	r2, #1
    bf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf94:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bf96:	2300      	movs	r3, #0
}
    bf98:	4618      	mov	r0, r3
    bf9a:	3730      	adds	r7, #48	; 0x30
    bf9c:	46bd      	mov	sp, r7
    bf9e:	bd80      	pop	{r7, pc}
    bfa0:	00003131 	.word	0x00003131

0000bfa4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    bfa4:	b580      	push	{r7, lr}
    bfa6:	b08c      	sub	sp, #48	; 0x30
    bfa8:	af00      	add	r7, sp, #0
    bfaa:	6078      	str	r0, [r7, #4]
    bfac:	460b      	mov	r3, r1
    bfae:	70fb      	strb	r3, [r7, #3]
    bfb0:	4613      	mov	r3, r2
    bfb2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    bfb4:	2300      	movs	r3, #0
    bfb6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    bfb8:	687b      	ldr	r3, [r7, #4]
    bfba:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    bfbc:	687b      	ldr	r3, [r7, #4]
    bfbe:	681b      	ldr	r3, [r3, #0]
    bfc0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    bfc2:	f107 030c 	add.w	r3, r7, #12
    bfc6:	2200      	movs	r2, #0
    bfc8:	601a      	str	r2, [r3, #0]
    bfca:	605a      	str	r2, [r3, #4]
    bfcc:	609a      	str	r2, [r3, #8]
    bfce:	60da      	str	r2, [r3, #12]
    bfd0:	611a      	str	r2, [r3, #16]
    bfd2:	615a      	str	r2, [r3, #20]
    bfd4:	78fb      	ldrb	r3, [r7, #3]
    bfd6:	f003 0307 	and.w	r3, r3, #7
    bfda:	b2da      	uxtb	r2, r3
    bfdc:	7b3b      	ldrb	r3, [r7, #12]
    bfde:	f362 0302 	bfi	r3, r2, #0, #3
    bfe2:	733b      	strb	r3, [r7, #12]
    bfe4:	7b3b      	ldrb	r3, [r7, #12]
    bfe6:	f043 0310 	orr.w	r3, r3, #16
    bfea:	733b      	strb	r3, [r7, #12]
    bfec:	7b3b      	ldrb	r3, [r7, #12]
    bfee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bff2:	733b      	strb	r3, [r7, #12]
    bff4:	78bb      	ldrb	r3, [r7, #2]
    bff6:	743b      	strb	r3, [r7, #16]
    bff8:	2301      	movs	r3, #1
    bffa:	61bb      	str	r3, [r7, #24]
    bffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
    c000:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    c002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c004:	7b5b      	ldrb	r3, [r3, #13]
    c006:	2b00      	cmp	r3, #0
    c008:	d003      	beq.n	c012 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    c00a:	2100      	movs	r1, #0
    c00c:	6878      	ldr	r0, [r7, #4]
    c00e:	4b0a      	ldr	r3, [pc, #40]	; (c038 <n25q256a_read_reg+0x94>)
    c010:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c012:	f107 030c 	add.w	r3, r7, #12
    c016:	4619      	mov	r1, r3
    c018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c01a:	4b08      	ldr	r3, [pc, #32]	; (c03c <n25q256a_read_reg+0x98>)
    c01c:	4798      	blx	r3
	if (n25q->xip_mode) {
    c01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c020:	7b5b      	ldrb	r3, [r3, #13]
    c022:	2b00      	cmp	r3, #0
    c024:	d003      	beq.n	c02e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    c026:	2101      	movs	r1, #1
    c028:	6878      	ldr	r0, [r7, #4]
    c02a:	4b03      	ldr	r3, [pc, #12]	; (c038 <n25q256a_read_reg+0x94>)
    c02c:	4798      	blx	r3
	}
	return status;
    c02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c030:	4618      	mov	r0, r3
    c032:	3730      	adds	r7, #48	; 0x30
    c034:	46bd      	mov	sp, r7
    c036:	bd80      	pop	{r7, pc}
    c038:	0000bed9 	.word	0x0000bed9
    c03c:	00003131 	.word	0x00003131

0000c040 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    c040:	b580      	push	{r7, lr}
    c042:	b08c      	sub	sp, #48	; 0x30
    c044:	af00      	add	r7, sp, #0
    c046:	60f8      	str	r0, [r7, #12]
    c048:	607b      	str	r3, [r7, #4]
    c04a:	460b      	mov	r3, r1
    c04c:	72fb      	strb	r3, [r7, #11]
    c04e:	4613      	mov	r3, r2
    c050:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c052:	68fb      	ldr	r3, [r7, #12]
    c054:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c056:	68fb      	ldr	r3, [r7, #12]
    c058:	681b      	ldr	r3, [r3, #0]
    c05a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    c05c:	f107 0310 	add.w	r3, r7, #16
    c060:	2200      	movs	r2, #0
    c062:	601a      	str	r2, [r3, #0]
    c064:	605a      	str	r2, [r3, #4]
    c066:	609a      	str	r2, [r3, #8]
    c068:	60da      	str	r2, [r3, #12]
    c06a:	611a      	str	r2, [r3, #16]
    c06c:	615a      	str	r2, [r3, #20]
    c06e:	7afb      	ldrb	r3, [r7, #11]
    c070:	f003 0307 	and.w	r3, r3, #7
    c074:	b2da      	uxtb	r2, r3
    c076:	7c3b      	ldrb	r3, [r7, #16]
    c078:	f362 0302 	bfi	r3, r2, #0, #3
    c07c:	743b      	strb	r3, [r7, #16]
    c07e:	7c3b      	ldrb	r3, [r7, #16]
    c080:	f043 0310 	orr.w	r3, r3, #16
    c084:	743b      	strb	r3, [r7, #16]
    c086:	7c3b      	ldrb	r3, [r7, #16]
    c088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c08c:	743b      	strb	r3, [r7, #16]
    c08e:	7c7b      	ldrb	r3, [r7, #17]
    c090:	2202      	movs	r2, #2
    c092:	f362 1305 	bfi	r3, r2, #4, #2
    c096:	747b      	strb	r3, [r7, #17]
    c098:	7abb      	ldrb	r3, [r7, #10]
    c09a:	753b      	strb	r3, [r7, #20]
    c09c:	2301      	movs	r3, #1
    c09e:	61fb      	str	r3, [r7, #28]
    c0a0:	1d3b      	adds	r3, r7, #4
    c0a2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0a6:	7b5b      	ldrb	r3, [r3, #13]
    c0a8:	2b00      	cmp	r3, #0
    c0aa:	d003      	beq.n	c0b4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    c0ac:	2100      	movs	r1, #0
    c0ae:	68f8      	ldr	r0, [r7, #12]
    c0b0:	4b09      	ldr	r3, [pc, #36]	; (c0d8 <n25q256a_write_reg+0x98>)
    c0b2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c0b4:	f107 0310 	add.w	r3, r7, #16
    c0b8:	4619      	mov	r1, r3
    c0ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c0bc:	4b07      	ldr	r3, [pc, #28]	; (c0dc <n25q256a_write_reg+0x9c>)
    c0be:	4798      	blx	r3
	if (n25q->xip_mode) {
    c0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0c2:	7b5b      	ldrb	r3, [r3, #13]
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d003      	beq.n	c0d0 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    c0c8:	2101      	movs	r1, #1
    c0ca:	68f8      	ldr	r0, [r7, #12]
    c0cc:	4b02      	ldr	r3, [pc, #8]	; (c0d8 <n25q256a_write_reg+0x98>)
    c0ce:	4798      	blx	r3
	}
}
    c0d0:	bf00      	nop
    c0d2:	3730      	adds	r7, #48	; 0x30
    c0d4:	46bd      	mov	sp, r7
    c0d6:	bd80      	pop	{r7, pc}
    c0d8:	0000bed9 	.word	0x0000bed9
    c0dc:	00003131 	.word	0x00003131

0000c0e0 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    c0e0:	b580      	push	{r7, lr}
    c0e2:	b090      	sub	sp, #64	; 0x40
    c0e4:	af00      	add	r7, sp, #0
    c0e6:	6078      	str	r0, [r7, #4]
    c0e8:	460b      	mov	r3, r1
    c0ea:	70fb      	strb	r3, [r7, #3]
    c0ec:	4613      	mov	r3, r2
    c0ee:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c0f0:	687b      	ldr	r3, [r7, #4]
    c0f2:	681b      	ldr	r3, [r3, #0]
    c0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    c0f6:	78bb      	ldrb	r3, [r7, #2]
    c0f8:	2b00      	cmp	r3, #0
    c0fa:	d001      	beq.n	c100 <n25q256a_write_enable+0x20>
    c0fc:	2306      	movs	r3, #6
    c0fe:	e000      	b.n	c102 <n25q256a_write_enable+0x22>
    c100:	2304      	movs	r3, #4
    c102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    c106:	f107 0320 	add.w	r3, r7, #32
    c10a:	2200      	movs	r2, #0
    c10c:	601a      	str	r2, [r3, #0]
    c10e:	605a      	str	r2, [r3, #4]
    c110:	609a      	str	r2, [r3, #8]
    c112:	60da      	str	r2, [r3, #12]
    c114:	611a      	str	r2, [r3, #16]
    c116:	615a      	str	r2, [r3, #20]
    c118:	78fb      	ldrb	r3, [r7, #3]
    c11a:	f003 0307 	and.w	r3, r3, #7
    c11e:	b2da      	uxtb	r2, r3
    c120:	f897 3020 	ldrb.w	r3, [r7, #32]
    c124:	f362 0302 	bfi	r3, r2, #0, #3
    c128:	f887 3020 	strb.w	r3, [r7, #32]
    c12c:	f897 3020 	ldrb.w	r3, [r7, #32]
    c130:	f043 0310 	orr.w	r3, r3, #16
    c134:	f887 3020 	strb.w	r3, [r7, #32]
    c138:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    c13c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    c140:	f107 0308 	add.w	r3, r7, #8
    c144:	2200      	movs	r2, #0
    c146:	601a      	str	r2, [r3, #0]
    c148:	605a      	str	r2, [r3, #4]
    c14a:	609a      	str	r2, [r3, #8]
    c14c:	60da      	str	r2, [r3, #12]
    c14e:	611a      	str	r2, [r3, #16]
    c150:	615a      	str	r2, [r3, #20]
    c152:	78fb      	ldrb	r3, [r7, #3]
    c154:	f003 0307 	and.w	r3, r3, #7
    c158:	b2da      	uxtb	r2, r3
    c15a:	7a3b      	ldrb	r3, [r7, #8]
    c15c:	f362 0302 	bfi	r3, r2, #0, #3
    c160:	723b      	strb	r3, [r7, #8]
    c162:	7a3b      	ldrb	r3, [r7, #8]
    c164:	f043 0310 	orr.w	r3, r3, #16
    c168:	723b      	strb	r3, [r7, #8]
    c16a:	7a3b      	ldrb	r3, [r7, #8]
    c16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c170:	723b      	strb	r3, [r7, #8]
    c172:	2305      	movs	r3, #5
    c174:	733b      	strb	r3, [r7, #12]
    c176:	2301      	movs	r3, #1
    c178:	617b      	str	r3, [r7, #20]
    c17a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    c17e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    c180:	f107 0320 	add.w	r3, r7, #32
    c184:	4619      	mov	r1, r3
    c186:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c188:	4b08      	ldr	r3, [pc, #32]	; (c1ac <n25q256a_write_enable+0xcc>)
    c18a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    c18c:	f107 0308 	add.w	r3, r7, #8
    c190:	4619      	mov	r1, r3
    c192:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c194:	4b05      	ldr	r3, [pc, #20]	; (c1ac <n25q256a_write_enable+0xcc>)
    c196:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    c198:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    c19c:	f003 0302 	and.w	r3, r3, #2
    c1a0:	2b00      	cmp	r3, #0
    c1a2:	d0ed      	beq.n	c180 <n25q256a_write_enable+0xa0>
}
    c1a4:	bf00      	nop
    c1a6:	3740      	adds	r7, #64	; 0x40
    c1a8:	46bd      	mov	sp, r7
    c1aa:	bd80      	pop	{r7, pc}
    c1ac:	00003131 	.word	0x00003131

0000c1b0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    c1b0:	b590      	push	{r4, r7, lr}
    c1b2:	b087      	sub	sp, #28
    c1b4:	af00      	add	r7, sp, #0
    c1b6:	6078      	str	r0, [r7, #4]
    c1b8:	460b      	mov	r3, r1
    c1ba:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    c1bc:	687b      	ldr	r3, [r7, #4]
    c1be:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c1c0:	68fb      	ldr	r3, [r7, #12]
    c1c2:	7b1b      	ldrb	r3, [r3, #12]
    c1c4:	2b00      	cmp	r3, #0
    c1c6:	d001      	beq.n	c1cc <n25q256a_switch_mode+0x1c>
    c1c8:	2306      	movs	r3, #6
    c1ca:	e000      	b.n	c1ce <n25q256a_switch_mode+0x1e>
    c1cc:	2300      	movs	r3, #0
    c1ce:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c1d0:	7afb      	ldrb	r3, [r7, #11]
    c1d2:	2265      	movs	r2, #101	; 0x65
    c1d4:	4619      	mov	r1, r3
    c1d6:	6878      	ldr	r0, [r7, #4]
    c1d8:	4b25      	ldr	r3, [pc, #148]	; (c270 <n25q256a_switch_mode+0xc0>)
    c1da:	4798      	blx	r3
    c1dc:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c1de:	2300      	movs	r3, #0
    c1e0:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c1e2:	68fb      	ldr	r3, [r7, #12]
    c1e4:	7b1b      	ldrb	r3, [r3, #12]
    c1e6:	78fa      	ldrb	r2, [r7, #3]
    c1e8:	429a      	cmp	r2, r3
    c1ea:	d03d      	beq.n	c268 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c1ec:	78fb      	ldrb	r3, [r7, #3]
    c1ee:	2b00      	cmp	r3, #0
    c1f0:	d00b      	beq.n	c20a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c1f2:	697b      	ldr	r3, [r7, #20]
    c1f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c1f8:	2b00      	cmp	r3, #0
    c1fa:	d011      	beq.n	c220 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c1fc:	697b      	ldr	r3, [r7, #20]
    c1fe:	f003 031f 	and.w	r3, r3, #31
    c202:	617b      	str	r3, [r7, #20]
			modify = 1;
    c204:	2301      	movs	r3, #1
    c206:	74fb      	strb	r3, [r7, #19]
    c208:	e00a      	b.n	c220 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c20a:	697b      	ldr	r3, [r7, #20]
    c20c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c210:	2b00      	cmp	r3, #0
    c212:	d105      	bne.n	c220 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c214:	697b      	ldr	r3, [r7, #20]
    c216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c21a:	617b      	str	r3, [r7, #20]
			modify = 1;
    c21c:	2301      	movs	r3, #1
    c21e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c220:	7cfb      	ldrb	r3, [r7, #19]
    c222:	2b00      	cmp	r3, #0
    c224:	d021      	beq.n	c26a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c226:	68fb      	ldr	r3, [r7, #12]
    c228:	78fa      	ldrb	r2, [r7, #3]
    c22a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c22c:	7afb      	ldrb	r3, [r7, #11]
    c22e:	2201      	movs	r2, #1
    c230:	4619      	mov	r1, r3
    c232:	6878      	ldr	r0, [r7, #4]
    c234:	4b0f      	ldr	r3, [pc, #60]	; (c274 <n25q256a_switch_mode+0xc4>)
    c236:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c238:	7af9      	ldrb	r1, [r7, #11]
    c23a:	697b      	ldr	r3, [r7, #20]
    c23c:	2261      	movs	r2, #97	; 0x61
    c23e:	6878      	ldr	r0, [r7, #4]
    c240:	4c0d      	ldr	r4, [pc, #52]	; (c278 <n25q256a_switch_mode+0xc8>)
    c242:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c244:	78fb      	ldrb	r3, [r7, #3]
    c246:	2b00      	cmp	r3, #0
    c248:	d001      	beq.n	c24e <n25q256a_switch_mode+0x9e>
    c24a:	2306      	movs	r3, #6
    c24c:	e000      	b.n	c250 <n25q256a_switch_mode+0xa0>
    c24e:	2300      	movs	r3, #0
    c250:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c252:	7afb      	ldrb	r3, [r7, #11]
    c254:	2265      	movs	r2, #101	; 0x65
    c256:	4619      	mov	r1, r3
    c258:	6878      	ldr	r0, [r7, #4]
    c25a:	4b05      	ldr	r3, [pc, #20]	; (c270 <n25q256a_switch_mode+0xc0>)
    c25c:	4798      	blx	r3
    c25e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c260:	68fb      	ldr	r3, [r7, #12]
    c262:	78fa      	ldrb	r2, [r7, #3]
    c264:	731a      	strb	r2, [r3, #12]
    c266:	e000      	b.n	c26a <n25q256a_switch_mode+0xba>
		return;
    c268:	bf00      	nop
	}
}
    c26a:	371c      	adds	r7, #28
    c26c:	46bd      	mov	sp, r7
    c26e:	bd90      	pop	{r4, r7, pc}
    c270:	0000bfa5 	.word	0x0000bfa5
    c274:	0000c0e1 	.word	0x0000c0e1
    c278:	0000c041 	.word	0x0000c041

0000c27c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c27c:	b580      	push	{r7, lr}
    c27e:	b086      	sub	sp, #24
    c280:	af00      	add	r7, sp, #0
    c282:	60f8      	str	r0, [r7, #12]
    c284:	60b9      	str	r1, [r7, #8]
    c286:	607a      	str	r2, [r7, #4]
    c288:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c28a:	68fb      	ldr	r3, [r7, #12]
    c28c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c28e:	4a0c      	ldr	r2, [pc, #48]	; (c2c0 <n25q256a_construct+0x44>)
    c290:	68b9      	ldr	r1, [r7, #8]
    c292:	68f8      	ldr	r0, [r7, #12]
    c294:	4b0b      	ldr	r3, [pc, #44]	; (c2c4 <n25q256a_construct+0x48>)
    c296:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c298:	697b      	ldr	r3, [r7, #20]
    c29a:	2200      	movs	r2, #0
    c29c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c29e:	697b      	ldr	r3, [r7, #20]
    c2a0:	2200      	movs	r2, #0
    c2a2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c2a4:	697b      	ldr	r3, [r7, #20]
    c2a6:	687a      	ldr	r2, [r7, #4]
    c2a8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c2aa:	78fb      	ldrb	r3, [r7, #3]
    c2ac:	4619      	mov	r1, r3
    c2ae:	68f8      	ldr	r0, [r7, #12]
    c2b0:	4b05      	ldr	r3, [pc, #20]	; (c2c8 <n25q256a_construct+0x4c>)
    c2b2:	4798      	blx	r3
	return me;
    c2b4:	68fb      	ldr	r3, [r7, #12]
}
    c2b6:	4618      	mov	r0, r3
    c2b8:	3718      	adds	r7, #24
    c2ba:	46bd      	mov	sp, r7
    c2bc:	bd80      	pop	{r7, pc}
    c2be:	bf00      	nop
    c2c0:	00014a2c 	.word	0x00014a2c
    c2c4:	0000c759 	.word	0x0000c759
    c2c8:	0000c1b1 	.word	0x0000c1b1

0000c2cc <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c2cc:	b580      	push	{r7, lr}
    c2ce:	b08c      	sub	sp, #48	; 0x30
    c2d0:	af00      	add	r7, sp, #0
    c2d2:	60f8      	str	r0, [r7, #12]
    c2d4:	60b9      	str	r1, [r7, #8]
    c2d6:	607a      	str	r2, [r7, #4]
    c2d8:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c2da:	68fb      	ldr	r3, [r7, #12]
    c2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c2de:	68fb      	ldr	r3, [r7, #12]
    c2e0:	681b      	ldr	r3, [r3, #0]
    c2e2:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c2e4:	f107 0310 	add.w	r3, r7, #16
    c2e8:	2200      	movs	r2, #0
    c2ea:	601a      	str	r2, [r3, #0]
    c2ec:	605a      	str	r2, [r3, #4]
    c2ee:	609a      	str	r2, [r3, #8]
    c2f0:	60da      	str	r2, [r3, #12]
    c2f2:	611a      	str	r2, [r3, #16]
    c2f4:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c2f8:	7b1b      	ldrb	r3, [r3, #12]
    c2fa:	2b00      	cmp	r3, #0
    c2fc:	d001      	beq.n	c302 <n25q256a_read+0x36>
    c2fe:	2206      	movs	r2, #6
    c300:	e000      	b.n	c304 <n25q256a_read+0x38>
    c302:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c304:	7c3b      	ldrb	r3, [r7, #16]
    c306:	f362 0302 	bfi	r3, r2, #0, #3
    c30a:	743b      	strb	r3, [r7, #16]
    c30c:	7c3b      	ldrb	r3, [r7, #16]
    c30e:	f043 0310 	orr.w	r3, r3, #16
    c312:	743b      	strb	r3, [r7, #16]
    c314:	7c3b      	ldrb	r3, [r7, #16]
    c316:	f043 0320 	orr.w	r3, r3, #32
    c31a:	743b      	strb	r3, [r7, #16]
    c31c:	7c3b      	ldrb	r3, [r7, #16]
    c31e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c322:	743b      	strb	r3, [r7, #16]
    c324:	7c7b      	ldrb	r3, [r7, #17]
    c326:	2201      	movs	r2, #1
    c328:	f362 1305 	bfi	r3, r2, #4, #2
    c32c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c330:	7b1b      	ldrb	r3, [r3, #12]
    c332:	2b00      	cmp	r3, #0
    c334:	d001      	beq.n	c33a <n25q256a_read+0x6e>
    c336:	220a      	movs	r2, #10
    c338:	e000      	b.n	c33c <n25q256a_read+0x70>
    c33a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c33c:	7cbb      	ldrb	r3, [r7, #18]
    c33e:	f362 0304 	bfi	r3, r2, #0, #5
    c342:	74bb      	strb	r3, [r7, #18]
    c344:	230b      	movs	r3, #11
    c346:	753b      	strb	r3, [r7, #20]
    c348:	687b      	ldr	r3, [r7, #4]
    c34a:	61bb      	str	r3, [r7, #24]
    c34c:	683b      	ldr	r3, [r7, #0]
    c34e:	61fb      	str	r3, [r7, #28]
    c350:	68bb      	ldr	r3, [r7, #8]
    c352:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c354:	f107 0310 	add.w	r3, r7, #16
    c358:	4619      	mov	r1, r3
    c35a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c35c:	4b03      	ldr	r3, [pc, #12]	; (c36c <n25q256a_read+0xa0>)
    c35e:	4798      	blx	r3
	return ERR_NONE;
    c360:	2300      	movs	r3, #0
}
    c362:	4618      	mov	r0, r3
    c364:	3730      	adds	r7, #48	; 0x30
    c366:	46bd      	mov	sp, r7
    c368:	bd80      	pop	{r7, pc}
    c36a:	bf00      	nop
    c36c:	00003131 	.word	0x00003131

0000c370 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c370:	b580      	push	{r7, lr}
    c372:	b08c      	sub	sp, #48	; 0x30
    c374:	af00      	add	r7, sp, #0
    c376:	60f8      	str	r0, [r7, #12]
    c378:	60b9      	str	r1, [r7, #8]
    c37a:	607a      	str	r2, [r7, #4]
    c37c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c37e:	68fb      	ldr	r3, [r7, #12]
    c380:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c382:	68fb      	ldr	r3, [r7, #12]
    c384:	681b      	ldr	r3, [r3, #0]
    c386:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c388:	f107 0310 	add.w	r3, r7, #16
    c38c:	2200      	movs	r2, #0
    c38e:	601a      	str	r2, [r3, #0]
    c390:	605a      	str	r2, [r3, #4]
    c392:	609a      	str	r2, [r3, #8]
    c394:	60da      	str	r2, [r3, #12]
    c396:	611a      	str	r2, [r3, #16]
    c398:	615a      	str	r2, [r3, #20]
    c39a:	7c3b      	ldrb	r3, [r7, #16]
    c39c:	f043 0310 	orr.w	r3, r3, #16
    c3a0:	743b      	strb	r3, [r7, #16]
    c3a2:	7c3b      	ldrb	r3, [r7, #16]
    c3a4:	f043 0320 	orr.w	r3, r3, #32
    c3a8:	743b      	strb	r3, [r7, #16]
    c3aa:	7c3b      	ldrb	r3, [r7, #16]
    c3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c3b0:	743b      	strb	r3, [r7, #16]
    c3b2:	7c7b      	ldrb	r3, [r7, #17]
    c3b4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c3b8:	747b      	strb	r3, [r7, #17]
    c3ba:	2302      	movs	r3, #2
    c3bc:	753b      	strb	r3, [r7, #20]
    c3be:	687b      	ldr	r3, [r7, #4]
    c3c0:	61bb      	str	r3, [r7, #24]
    c3c2:	683b      	ldr	r3, [r7, #0]
    c3c4:	61fb      	str	r3, [r7, #28]
    c3c6:	68bb      	ldr	r3, [r7, #8]
    c3c8:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c3cc:	7b1b      	ldrb	r3, [r3, #12]
    c3ce:	2b00      	cmp	r3, #0
    c3d0:	d001      	beq.n	c3d6 <n25q256a_write+0x66>
    c3d2:	2206      	movs	r2, #6
    c3d4:	e000      	b.n	c3d8 <n25q256a_write+0x68>
    c3d6:	2200      	movs	r2, #0
    c3d8:	7c3b      	ldrb	r3, [r7, #16]
    c3da:	f362 0302 	bfi	r3, r2, #0, #3
    c3de:	743b      	strb	r3, [r7, #16]
	while (length) {
    c3e0:	e035      	b.n	c44e <n25q256a_write+0xde>
		cmd.address = address;
    c3e2:	687b      	ldr	r3, [r7, #4]
    c3e4:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c3e6:	683b      	ldr	r3, [r7, #0]
    c3e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c3ec:	d802      	bhi.n	c3f4 <n25q256a_write+0x84>
			cmd.buf_len = length;
    c3ee:	683b      	ldr	r3, [r7, #0]
    c3f0:	61fb      	str	r3, [r7, #28]
    c3f2:	e002      	b.n	c3fa <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c3f4:	f44f 7380 	mov.w	r3, #256	; 0x100
    c3f8:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c3fa:	7c3b      	ldrb	r3, [r7, #16]
    c3fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c400:	b2db      	uxtb	r3, r3
    c402:	2201      	movs	r2, #1
    c404:	4619      	mov	r1, r3
    c406:	68f8      	ldr	r0, [r7, #12]
    c408:	4b19      	ldr	r3, [pc, #100]	; (c470 <n25q256a_write+0x100>)
    c40a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c40c:	f107 0310 	add.w	r3, r7, #16
    c410:	4619      	mov	r1, r3
    c412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c414:	4b17      	ldr	r3, [pc, #92]	; (c474 <n25q256a_write+0x104>)
    c416:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c418:	bf00      	nop
    c41a:	7c3b      	ldrb	r3, [r7, #16]
    c41c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c420:	b2db      	uxtb	r3, r3
    c422:	2270      	movs	r2, #112	; 0x70
    c424:	4619      	mov	r1, r3
    c426:	68f8      	ldr	r0, [r7, #12]
    c428:	4b13      	ldr	r3, [pc, #76]	; (c478 <n25q256a_write+0x108>)
    c42a:	4798      	blx	r3
    c42c:	4603      	mov	r3, r0
    c42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c432:	2b00      	cmp	r3, #0
    c434:	d0f1      	beq.n	c41a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c436:	6a3a      	ldr	r2, [r7, #32]
    c438:	69fb      	ldr	r3, [r7, #28]
    c43a:	4413      	add	r3, r2
    c43c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c43e:	69fb      	ldr	r3, [r7, #28]
    c440:	683a      	ldr	r2, [r7, #0]
    c442:	1ad3      	subs	r3, r2, r3
    c444:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c446:	69fb      	ldr	r3, [r7, #28]
    c448:	687a      	ldr	r2, [r7, #4]
    c44a:	4413      	add	r3, r2
    c44c:	607b      	str	r3, [r7, #4]
	while (length) {
    c44e:	683b      	ldr	r3, [r7, #0]
    c450:	2b00      	cmp	r3, #0
    c452:	d1c6      	bne.n	c3e2 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c456:	7b5b      	ldrb	r3, [r3, #13]
    c458:	2b00      	cmp	r3, #0
    c45a:	d003      	beq.n	c464 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c45c:	2101      	movs	r1, #1
    c45e:	68f8      	ldr	r0, [r7, #12]
    c460:	4b06      	ldr	r3, [pc, #24]	; (c47c <n25q256a_write+0x10c>)
    c462:	4798      	blx	r3
	}
	return ERR_NONE;
    c464:	2300      	movs	r3, #0
}
    c466:	4618      	mov	r0, r3
    c468:	3730      	adds	r7, #48	; 0x30
    c46a:	46bd      	mov	sp, r7
    c46c:	bd80      	pop	{r7, pc}
    c46e:	bf00      	nop
    c470:	0000c0e1 	.word	0x0000c0e1
    c474:	00003131 	.word	0x00003131
    c478:	0000bfa5 	.word	0x0000bfa5
    c47c:	0000bed9 	.word	0x0000bed9

0000c480 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c480:	b580      	push	{r7, lr}
    c482:	b090      	sub	sp, #64	; 0x40
    c484:	af00      	add	r7, sp, #0
    c486:	60f8      	str	r0, [r7, #12]
    c488:	60b9      	str	r1, [r7, #8]
    c48a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c48c:	68fb      	ldr	r3, [r7, #12]
    c48e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c490:	68fb      	ldr	r3, [r7, #12]
    c492:	681b      	ldr	r3, [r3, #0]
    c494:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c496:	f107 0314 	add.w	r3, r7, #20
    c49a:	2200      	movs	r2, #0
    c49c:	601a      	str	r2, [r3, #0]
    c49e:	605a      	str	r2, [r3, #4]
    c4a0:	609a      	str	r2, [r3, #8]
    c4a2:	60da      	str	r2, [r3, #12]
    c4a4:	611a      	str	r2, [r3, #16]
    c4a6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c4aa:	7b1b      	ldrb	r3, [r3, #12]
    c4ac:	2b00      	cmp	r3, #0
    c4ae:	d001      	beq.n	c4b4 <n25q256a_erase+0x34>
    c4b0:	2206      	movs	r2, #6
    c4b2:	e000      	b.n	c4b6 <n25q256a_erase+0x36>
    c4b4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c4b6:	7d3b      	ldrb	r3, [r7, #20]
    c4b8:	f362 0302 	bfi	r3, r2, #0, #3
    c4bc:	753b      	strb	r3, [r7, #20]
    c4be:	7d3b      	ldrb	r3, [r7, #20]
    c4c0:	f043 0310 	orr.w	r3, r3, #16
    c4c4:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c4c6:	687b      	ldr	r3, [r7, #4]
    c4c8:	4a56      	ldr	r2, [pc, #344]	; (c624 <n25q256a_erase+0x1a4>)
    c4ca:	4293      	cmp	r3, r2
    c4cc:	bf94      	ite	ls
    c4ce:	2301      	movls	r3, #1
    c4d0:	2300      	movhi	r3, #0
    c4d2:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c4d4:	7d3b      	ldrb	r3, [r7, #20]
    c4d6:	f362 1345 	bfi	r3, r2, #5, #1
    c4da:	753b      	strb	r3, [r7, #20]
    c4dc:	7d7b      	ldrb	r3, [r7, #21]
    c4de:	2202      	movs	r2, #2
    c4e0:	f362 1305 	bfi	r3, r2, #4, #2
    c4e4:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c4e6:	68bb      	ldr	r3, [r7, #8]
    c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c4ea:	687b      	ldr	r3, [r7, #4]
    c4ec:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c4ee:	2300      	movs	r3, #0
    c4f0:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c4f2:	687b      	ldr	r3, [r7, #4]
    c4f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c4f8:	2b00      	cmp	r3, #0
    c4fa:	d104      	bne.n	c506 <n25q256a_erase+0x86>
    c4fc:	68bb      	ldr	r3, [r7, #8]
    c4fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c502:	2b00      	cmp	r3, #0
    c504:	d002      	beq.n	c50c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c506:	f06f 030c 	mvn.w	r3, #12
    c50a:	e087      	b.n	c61c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c50c:	687b      	ldr	r3, [r7, #4]
    c50e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c512:	d368      	bcc.n	c5e6 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c514:	23c7      	movs	r3, #199	; 0xc7
    c516:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c518:	7d3b      	ldrb	r3, [r7, #20]
    c51a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c51e:	b2db      	uxtb	r3, r3
    c520:	2201      	movs	r2, #1
    c522:	4619      	mov	r1, r3
    c524:	68f8      	ldr	r0, [r7, #12]
    c526:	4b40      	ldr	r3, [pc, #256]	; (c628 <n25q256a_erase+0x1a8>)
    c528:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c52a:	f107 0314 	add.w	r3, r7, #20
    c52e:	4619      	mov	r1, r3
    c530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c532:	4b3e      	ldr	r3, [pc, #248]	; (c62c <n25q256a_erase+0x1ac>)
    c534:	4798      	blx	r3
    c536:	e059      	b.n	c5ec <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c53a:	b29b      	uxth	r3, r3
    c53c:	2b00      	cmp	r3, #0
    c53e:	d11f      	bne.n	c580 <n25q256a_erase+0x100>
    c540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c546:	d31b      	bcc.n	c580 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c54a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c54c:	23d8      	movs	r3, #216	; 0xd8
    c54e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c550:	7d3b      	ldrb	r3, [r7, #20]
    c552:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c556:	b2db      	uxtb	r3, r3
    c558:	2201      	movs	r2, #1
    c55a:	4619      	mov	r1, r3
    c55c:	68f8      	ldr	r0, [r7, #12]
    c55e:	4b32      	ldr	r3, [pc, #200]	; (c628 <n25q256a_erase+0x1a8>)
    c560:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c562:	f107 0314 	add.w	r3, r7, #20
    c566:	4619      	mov	r1, r3
    c568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c56a:	4b30      	ldr	r3, [pc, #192]	; (c62c <n25q256a_erase+0x1ac>)
    c56c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c570:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c574:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c578:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c57c:	63bb      	str	r3, [r7, #56]	; 0x38
    c57e:	e023      	b.n	c5c8 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c586:	d31b      	bcc.n	c5c0 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c58a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c58c:	2320      	movs	r3, #32
    c58e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c590:	7d3b      	ldrb	r3, [r7, #20]
    c592:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c596:	b2db      	uxtb	r3, r3
    c598:	2201      	movs	r2, #1
    c59a:	4619      	mov	r1, r3
    c59c:	68f8      	ldr	r0, [r7, #12]
    c59e:	4b22      	ldr	r3, [pc, #136]	; (c628 <n25q256a_erase+0x1a8>)
    c5a0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c5a2:	f107 0314 	add.w	r3, r7, #20
    c5a6:	4619      	mov	r1, r3
    c5a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c5aa:	4b20      	ldr	r3, [pc, #128]	; (c62c <n25q256a_erase+0x1ac>)
    c5ac:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c5b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c5b8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c5bc:	63bb      	str	r3, [r7, #56]	; 0x38
    c5be:	e003      	b.n	c5c8 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c5c0:	f06f 030c 	mvn.w	r3, #12
    c5c4:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c5c6:	e011      	b.n	c5ec <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c5c8:	bf00      	nop
    c5ca:	7d3b      	ldrb	r3, [r7, #20]
    c5cc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c5d0:	b2db      	uxtb	r3, r3
    c5d2:	2270      	movs	r2, #112	; 0x70
    c5d4:	4619      	mov	r1, r3
    c5d6:	68f8      	ldr	r0, [r7, #12]
    c5d8:	4b15      	ldr	r3, [pc, #84]	; (c630 <n25q256a_erase+0x1b0>)
    c5da:	4798      	blx	r3
    c5dc:	4603      	mov	r3, r0
    c5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c5e2:	2b00      	cmp	r3, #0
    c5e4:	d0f1      	beq.n	c5ca <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d1a5      	bne.n	c538 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c5ec:	bf00      	nop
    c5ee:	7d3b      	ldrb	r3, [r7, #20]
    c5f0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c5f4:	b2db      	uxtb	r3, r3
    c5f6:	2270      	movs	r2, #112	; 0x70
    c5f8:	4619      	mov	r1, r3
    c5fa:	68f8      	ldr	r0, [r7, #12]
    c5fc:	4b0c      	ldr	r3, [pc, #48]	; (c630 <n25q256a_erase+0x1b0>)
    c5fe:	4798      	blx	r3
    c600:	4603      	mov	r3, r0
    c602:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c606:	2b00      	cmp	r3, #0
    c608:	d0f1      	beq.n	c5ee <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c60c:	7b5b      	ldrb	r3, [r3, #13]
    c60e:	2b00      	cmp	r3, #0
    c610:	d003      	beq.n	c61a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c612:	2101      	movs	r1, #1
    c614:	68f8      	ldr	r0, [r7, #12]
    c616:	4b07      	ldr	r3, [pc, #28]	; (c634 <n25q256a_erase+0x1b4>)
    c618:	4798      	blx	r3
	}
	return rc;
    c61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c61c:	4618      	mov	r0, r3
    c61e:	3740      	adds	r7, #64	; 0x40
    c620:	46bd      	mov	sp, r7
    c622:	bd80      	pop	{r7, pc}
    c624:	001fffff 	.word	0x001fffff
    c628:	0000c0e1 	.word	0x0000c0e1
    c62c:	00003131 	.word	0x00003131
    c630:	0000bfa5 	.word	0x0000bfa5
    c634:	0000bed9 	.word	0x0000bed9

0000c638 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c638:	b590      	push	{r4, r7, lr}
    c63a:	b085      	sub	sp, #20
    c63c:	af00      	add	r7, sp, #0
    c63e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c640:	687b      	ldr	r3, [r7, #4]
    c642:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c644:	68fb      	ldr	r3, [r7, #12]
    c646:	7b1b      	ldrb	r3, [r3, #12]
    c648:	2b00      	cmp	r3, #0
    c64a:	d001      	beq.n	c650 <n25q256a_enable_xip+0x18>
    c64c:	2306      	movs	r3, #6
    c64e:	e000      	b.n	c652 <n25q256a_enable_xip+0x1a>
    c650:	2300      	movs	r3, #0
    c652:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c654:	68fb      	ldr	r3, [r7, #12]
    c656:	7b5b      	ldrb	r3, [r3, #13]
    c658:	2b00      	cmp	r3, #0
    c65a:	d129      	bne.n	c6b0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c65c:	7afb      	ldrb	r3, [r7, #11]
    c65e:	2285      	movs	r2, #133	; 0x85
    c660:	4619      	mov	r1, r3
    c662:	6878      	ldr	r0, [r7, #4]
    c664:	4b15      	ldr	r3, [pc, #84]	; (c6bc <n25q256a_enable_xip+0x84>)
    c666:	4798      	blx	r3
    c668:	4603      	mov	r3, r0
    c66a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c66c:	7abb      	ldrb	r3, [r7, #10]
    c66e:	f003 0308 	and.w	r3, r3, #8
    c672:	2b00      	cmp	r3, #0
    c674:	d015      	beq.n	c6a2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c676:	7abb      	ldrb	r3, [r7, #10]
    c678:	f023 0308 	bic.w	r3, r3, #8
    c67c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c67e:	7abb      	ldrb	r3, [r7, #10]
    c680:	7af9      	ldrb	r1, [r7, #11]
    c682:	2281      	movs	r2, #129	; 0x81
    c684:	6878      	ldr	r0, [r7, #4]
    c686:	4c0e      	ldr	r4, [pc, #56]	; (c6c0 <n25q256a_enable_xip+0x88>)
    c688:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c68a:	bf00      	nop
    c68c:	7afb      	ldrb	r3, [r7, #11]
    c68e:	2270      	movs	r2, #112	; 0x70
    c690:	4619      	mov	r1, r3
    c692:	6878      	ldr	r0, [r7, #4]
    c694:	4b09      	ldr	r3, [pc, #36]	; (c6bc <n25q256a_enable_xip+0x84>)
    c696:	4798      	blx	r3
    c698:	4603      	mov	r3, r0
    c69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c69e:	2b00      	cmp	r3, #0
    c6a0:	d0f4      	beq.n	c68c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c6a2:	68fb      	ldr	r3, [r7, #12]
    c6a4:	2201      	movs	r2, #1
    c6a6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c6a8:	2101      	movs	r1, #1
    c6aa:	6878      	ldr	r0, [r7, #4]
    c6ac:	4b05      	ldr	r3, [pc, #20]	; (c6c4 <n25q256a_enable_xip+0x8c>)
    c6ae:	4798      	blx	r3
	}
	return ERR_NONE;
    c6b0:	2300      	movs	r3, #0
}
    c6b2:	4618      	mov	r0, r3
    c6b4:	3714      	adds	r7, #20
    c6b6:	46bd      	mov	sp, r7
    c6b8:	bd90      	pop	{r4, r7, pc}
    c6ba:	bf00      	nop
    c6bc:	0000bfa5 	.word	0x0000bfa5
    c6c0:	0000c041 	.word	0x0000c041
    c6c4:	0000bed9 	.word	0x0000bed9

0000c6c8 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c6c8:	b580      	push	{r7, lr}
    c6ca:	b086      	sub	sp, #24
    c6cc:	af00      	add	r7, sp, #0
    c6ce:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c6d0:	687b      	ldr	r3, [r7, #4]
    c6d2:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c6d4:	687b      	ldr	r3, [r7, #4]
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c6da:	697b      	ldr	r3, [r7, #20]
    c6dc:	7b1b      	ldrb	r3, [r3, #12]
    c6de:	2b00      	cmp	r3, #0
    c6e0:	d001      	beq.n	c6e6 <n25q256a_disable_xip+0x1e>
    c6e2:	2306      	movs	r3, #6
    c6e4:	e000      	b.n	c6e8 <n25q256a_disable_xip+0x20>
    c6e6:	2300      	movs	r3, #0
    c6e8:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c6ea:	2100      	movs	r1, #0
    c6ec:	6878      	ldr	r0, [r7, #4]
    c6ee:	4b15      	ldr	r3, [pc, #84]	; (c744 <n25q256a_disable_xip+0x7c>)
    c6f0:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c6f2:	7bfb      	ldrb	r3, [r7, #15]
    c6f4:	2285      	movs	r2, #133	; 0x85
    c6f6:	4619      	mov	r1, r3
    c6f8:	6878      	ldr	r0, [r7, #4]
    c6fa:	4b13      	ldr	r3, [pc, #76]	; (c748 <n25q256a_disable_xip+0x80>)
    c6fc:	4798      	blx	r3
    c6fe:	4603      	mov	r3, r0
    c700:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c702:	7bbb      	ldrb	r3, [r7, #14]
    c704:	f003 0308 	and.w	r3, r3, #8
    c708:	2b00      	cmp	r3, #0
    c70a:	d113      	bne.n	c734 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c70c:	697b      	ldr	r3, [r7, #20]
    c70e:	689b      	ldr	r3, [r3, #8]
    c710:	2b00      	cmp	r3, #0
    c712:	d00f      	beq.n	c734 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c714:	693b      	ldr	r3, [r7, #16]
    c716:	681b      	ldr	r3, [r3, #0]
    c718:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c71a:	6938      	ldr	r0, [r7, #16]
    c71c:	4b0b      	ldr	r3, [pc, #44]	; (c74c <n25q256a_disable_xip+0x84>)
    c71e:	4798      	blx	r3
			n25q->pin_exit_xip();
    c720:	697b      	ldr	r3, [r7, #20]
    c722:	689b      	ldr	r3, [r3, #8]
    c724:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c726:	68b9      	ldr	r1, [r7, #8]
    c728:	6938      	ldr	r0, [r7, #16]
    c72a:	4b09      	ldr	r3, [pc, #36]	; (c750 <n25q256a_disable_xip+0x88>)
    c72c:	4798      	blx	r3
			qspi_sync_enable(descr);
    c72e:	6938      	ldr	r0, [r7, #16]
    c730:	4b08      	ldr	r3, [pc, #32]	; (c754 <n25q256a_disable_xip+0x8c>)
    c732:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c734:	697b      	ldr	r3, [r7, #20]
    c736:	2200      	movs	r2, #0
    c738:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c73a:	2300      	movs	r3, #0
}
    c73c:	4618      	mov	r0, r3
    c73e:	3718      	adds	r7, #24
    c740:	46bd      	mov	sp, r7
    c742:	bd80      	pop	{r7, pc}
    c744:	0000bed9 	.word	0x0000bed9
    c748:	0000bfa5 	.word	0x0000bfa5
    c74c:	000030f5 	.word	0x000030f5
    c750:	0000306d 	.word	0x0000306d
    c754:	000030b9 	.word	0x000030b9

0000c758 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c758:	b480      	push	{r7}
    c75a:	b085      	sub	sp, #20
    c75c:	af00      	add	r7, sp, #0
    c75e:	60f8      	str	r0, [r7, #12]
    c760:	60b9      	str	r1, [r7, #8]
    c762:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c764:	68fb      	ldr	r3, [r7, #12]
    c766:	68ba      	ldr	r2, [r7, #8]
    c768:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c76a:	68fb      	ldr	r3, [r7, #12]
    c76c:	687a      	ldr	r2, [r7, #4]
    c76e:	605a      	str	r2, [r3, #4]

	return me;
    c770:	68fb      	ldr	r3, [r7, #12]
}
    c772:	4618      	mov	r0, r3
    c774:	3714      	adds	r7, #20
    c776:	46bd      	mov	sp, r7
    c778:	f85d 7b04 	ldr.w	r7, [sp], #4
    c77c:	4770      	bx	lr

0000c77e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c77e:	b480      	push	{r7}
    c780:	b083      	sub	sp, #12
    c782:	af00      	add	r7, sp, #0
    c784:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c786:	687b      	ldr	r3, [r7, #4]
    c788:	781b      	ldrb	r3, [r3, #0]
    c78a:	b29a      	uxth	r2, r3
    c78c:	687b      	ldr	r3, [r7, #4]
    c78e:	3301      	adds	r3, #1
    c790:	781b      	ldrb	r3, [r3, #0]
    c792:	b29b      	uxth	r3, r3
    c794:	021b      	lsls	r3, r3, #8
    c796:	b29b      	uxth	r3, r3
    c798:	4413      	add	r3, r2
    c79a:	b29b      	uxth	r3, r3
}
    c79c:	4618      	mov	r0, r3
    c79e:	370c      	adds	r7, #12
    c7a0:	46bd      	mov	sp, r7
    c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7a6:	4770      	bx	lr

0000c7a8 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c7a8:	b480      	push	{r7}
    c7aa:	b083      	sub	sp, #12
    c7ac:	af00      	add	r7, sp, #0
    c7ae:	6078      	str	r0, [r7, #4]
	return desc[0];
    c7b0:	687b      	ldr	r3, [r7, #4]
    c7b2:	781b      	ldrb	r3, [r3, #0]
}
    c7b4:	4618      	mov	r0, r3
    c7b6:	370c      	adds	r7, #12
    c7b8:	46bd      	mov	sp, r7
    c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7be:	4770      	bx	lr

0000c7c0 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c7c0:	b580      	push	{r7, lr}
    c7c2:	b082      	sub	sp, #8
    c7c4:	af00      	add	r7, sp, #0
    c7c6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c7c8:	6878      	ldr	r0, [r7, #4]
    c7ca:	4b05      	ldr	r3, [pc, #20]	; (c7e0 <usb_desc_next+0x20>)
    c7cc:	4798      	blx	r3
    c7ce:	4603      	mov	r3, r0
    c7d0:	461a      	mov	r2, r3
    c7d2:	687b      	ldr	r3, [r7, #4]
    c7d4:	4413      	add	r3, r2
}
    c7d6:	4618      	mov	r0, r3
    c7d8:	3708      	adds	r7, #8
    c7da:	46bd      	mov	sp, r7
    c7dc:	bd80      	pop	{r7, pc}
    c7de:	bf00      	nop
    c7e0:	0000c7a9 	.word	0x0000c7a9

0000c7e4 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c7e4:	b580      	push	{r7, lr}
    c7e6:	b08c      	sub	sp, #48	; 0x30
    c7e8:	af00      	add	r7, sp, #0
    c7ea:	6078      	str	r0, [r7, #4]
    c7ec:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c7ee:	687b      	ldr	r3, [r7, #4]
    c7f0:	689b      	ldr	r3, [r3, #8]
    c7f2:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c7f4:	683b      	ldr	r3, [r7, #0]
    c7f6:	681b      	ldr	r3, [r3, #0]
    c7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c7fa:	2300      	movs	r3, #0
    c7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c800:	e08f      	b.n	c922 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c804:	2b00      	cmp	r3, #0
    c806:	d102      	bne.n	c80e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c808:	f06f 0309 	mvn.w	r3, #9
    c80c:	e092      	b.n	c934 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c810:	789b      	ldrb	r3, [r3, #2]
    c812:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c816:	795b      	ldrb	r3, [r3, #5]
    c818:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c81a:	7c7b      	ldrb	r3, [r7, #17]
    c81c:	2b02      	cmp	r3, #2
    c81e:	d002      	beq.n	c826 <cdcdf_acm_enable+0x42>
    c820:	7c7b      	ldrb	r3, [r7, #17]
    c822:	2b0a      	cmp	r3, #10
    c824:	d121      	bne.n	c86a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c82a:	6a3a      	ldr	r2, [r7, #32]
    c82c:	5cd2      	ldrb	r2, [r2, r3]
    c82e:	7bbb      	ldrb	r3, [r7, #14]
    c830:	429a      	cmp	r2, r3
    c832:	d102      	bne.n	c83a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c834:	f06f 0311 	mvn.w	r3, #17
    c838:	e07c      	b.n	c934 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c83e:	6a3a      	ldr	r2, [r7, #32]
    c840:	5cd3      	ldrb	r3, [r2, r3]
    c842:	2bff      	cmp	r3, #255	; 0xff
    c844:	d002      	beq.n	c84c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c846:	f06f 031b 	mvn.w	r3, #27
    c84a:	e073      	b.n	c934 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c84c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c850:	7bb9      	ldrb	r1, [r7, #14]
    c852:	6a3a      	ldr	r2, [r7, #32]
    c854:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c856:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c858:	683b      	ldr	r3, [r7, #0]
    c85a:	685b      	ldr	r3, [r3, #4]
    c85c:	2205      	movs	r2, #5
    c85e:	4619      	mov	r1, r3
    c860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c862:	4b36      	ldr	r3, [pc, #216]	; (c93c <cdcdf_acm_enable+0x158>)
    c864:	4798      	blx	r3
    c866:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c868:	e047      	b.n	c8fa <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c86a:	f06f 0309 	mvn.w	r3, #9
    c86e:	e061      	b.n	c934 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c870:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c872:	789b      	ldrb	r3, [r3, #2]
    c874:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c876:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c878:	78db      	ldrb	r3, [r3, #3]
    c87a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c87e:	3304      	adds	r3, #4
    c880:	4618      	mov	r0, r3
    c882:	4b2f      	ldr	r3, [pc, #188]	; (c940 <cdcdf_acm_enable+0x15c>)
    c884:	4798      	blx	r3
    c886:	4603      	mov	r3, r0
    c888:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c88a:	7ebb      	ldrb	r3, [r7, #26]
    c88c:	7ef9      	ldrb	r1, [r7, #27]
    c88e:	8bba      	ldrh	r2, [r7, #28]
    c890:	4618      	mov	r0, r3
    c892:	4b2c      	ldr	r3, [pc, #176]	; (c944 <cdcdf_acm_enable+0x160>)
    c894:	4798      	blx	r3
    c896:	4603      	mov	r3, r0
    c898:	2b00      	cmp	r3, #0
    c89a:	d002      	beq.n	c8a2 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c89c:	f06f 0313 	mvn.w	r3, #19
    c8a0:	e048      	b.n	c934 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c8a2:	7ebb      	ldrb	r3, [r7, #26]
    c8a4:	b25b      	sxtb	r3, r3
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	da0f      	bge.n	c8ca <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c8ae:	7eb9      	ldrb	r1, [r7, #26]
    c8b0:	6a3a      	ldr	r2, [r7, #32]
    c8b2:	4413      	add	r3, r2
    c8b4:	460a      	mov	r2, r1
    c8b6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c8bc:	6a3a      	ldr	r2, [r7, #32]
    c8be:	4413      	add	r3, r2
    c8c0:	789b      	ldrb	r3, [r3, #2]
    c8c2:	4618      	mov	r0, r3
    c8c4:	4b20      	ldr	r3, [pc, #128]	; (c948 <cdcdf_acm_enable+0x164>)
    c8c6:	4798      	blx	r3
    c8c8:	e007      	b.n	c8da <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c8ca:	7eba      	ldrb	r2, [r7, #26]
    c8cc:	6a3b      	ldr	r3, [r7, #32]
    c8ce:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c8d0:	6a3b      	ldr	r3, [r7, #32]
    c8d2:	791b      	ldrb	r3, [r3, #4]
    c8d4:	4618      	mov	r0, r3
    c8d6:	4b1c      	ldr	r3, [pc, #112]	; (c948 <cdcdf_acm_enable+0x164>)
    c8d8:	4798      	blx	r3
			}
			desc->sod = ep;
    c8da:	683b      	ldr	r3, [r7, #0]
    c8dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c8de:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c8e0:	683b      	ldr	r3, [r7, #0]
    c8e2:	681b      	ldr	r3, [r3, #0]
    c8e4:	4618      	mov	r0, r3
    c8e6:	4b19      	ldr	r3, [pc, #100]	; (c94c <cdcdf_acm_enable+0x168>)
    c8e8:	4798      	blx	r3
    c8ea:	4602      	mov	r2, r0
    c8ec:	683b      	ldr	r3, [r7, #0]
    c8ee:	685b      	ldr	r3, [r3, #4]
    c8f0:	4619      	mov	r1, r3
    c8f2:	4610      	mov	r0, r2
    c8f4:	4b16      	ldr	r3, [pc, #88]	; (c950 <cdcdf_acm_enable+0x16c>)
    c8f6:	4798      	blx	r3
    c8f8:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d1b7      	bne.n	c870 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c900:	683b      	ldr	r3, [r7, #0]
    c902:	681b      	ldr	r3, [r3, #0]
    c904:	4618      	mov	r0, r3
    c906:	4b11      	ldr	r3, [pc, #68]	; (c94c <cdcdf_acm_enable+0x168>)
    c908:	4798      	blx	r3
    c90a:	683b      	ldr	r3, [r7, #0]
    c90c:	685b      	ldr	r3, [r3, #4]
    c90e:	2204      	movs	r2, #4
    c910:	4619      	mov	r1, r3
    c912:	4b0a      	ldr	r3, [pc, #40]	; (c93c <cdcdf_acm_enable+0x158>)
    c914:	4798      	blx	r3
    c916:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c91c:	3301      	adds	r3, #1
    c91e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c926:	2b01      	cmp	r3, #1
    c928:	f67f af6b 	bls.w	c802 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c92c:	4b09      	ldr	r3, [pc, #36]	; (c954 <cdcdf_acm_enable+0x170>)
    c92e:	2201      	movs	r2, #1
    c930:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c932:	2300      	movs	r3, #0
}
    c934:	4618      	mov	r0, r3
    c936:	3730      	adds	r7, #48	; 0x30
    c938:	46bd      	mov	sp, r7
    c93a:	bd80      	pop	{r7, pc}
    c93c:	0000dba5 	.word	0x0000dba5
    c940:	0000c77f 	.word	0x0000c77f
    c944:	00003da5 	.word	0x00003da5
    c948:	00003e91 	.word	0x00003e91
    c94c:	0000c7c1 	.word	0x0000c7c1
    c950:	0000dc01 	.word	0x0000dc01
    c954:	20001308 	.word	0x20001308

0000c958 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c958:	b580      	push	{r7, lr}
    c95a:	b088      	sub	sp, #32
    c95c:	af00      	add	r7, sp, #0
    c95e:	6078      	str	r0, [r7, #4]
    c960:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c962:	687b      	ldr	r3, [r7, #4]
    c964:	689b      	ldr	r3, [r3, #8]
    c966:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c968:	683b      	ldr	r3, [r7, #0]
    c96a:	2b00      	cmp	r3, #0
    c96c:	d00c      	beq.n	c988 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c96e:	683b      	ldr	r3, [r7, #0]
    c970:	681b      	ldr	r3, [r3, #0]
    c972:	795b      	ldrb	r3, [r3, #5]
    c974:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c976:	7c7b      	ldrb	r3, [r7, #17]
    c978:	2b02      	cmp	r3, #2
    c97a:	d005      	beq.n	c988 <cdcdf_acm_disable+0x30>
    c97c:	7c7b      	ldrb	r3, [r7, #17]
    c97e:	2b0a      	cmp	r3, #10
    c980:	d002      	beq.n	c988 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c982:	f06f 0309 	mvn.w	r3, #9
    c986:	e035      	b.n	c9f4 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c988:	2300      	movs	r3, #0
    c98a:	77fb      	strb	r3, [r7, #31]
    c98c:	e01f      	b.n	c9ce <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c98e:	7ffb      	ldrb	r3, [r7, #31]
    c990:	69ba      	ldr	r2, [r7, #24]
    c992:	5cd3      	ldrb	r3, [r2, r3]
    c994:	2bff      	cmp	r3, #255	; 0xff
    c996:	d016      	beq.n	c9c6 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c998:	7ffb      	ldrb	r3, [r7, #31]
    c99a:	69ba      	ldr	r2, [r7, #24]
    c99c:	21ff      	movs	r1, #255	; 0xff
    c99e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c9a0:	7ffb      	ldrb	r3, [r7, #31]
    c9a2:	69ba      	ldr	r2, [r7, #24]
    c9a4:	4413      	add	r3, r2
    c9a6:	789b      	ldrb	r3, [r3, #2]
    c9a8:	2bff      	cmp	r3, #255	; 0xff
    c9aa:	d00d      	beq.n	c9c8 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c9ac:	7ffb      	ldrb	r3, [r7, #31]
    c9ae:	69ba      	ldr	r2, [r7, #24]
    c9b0:	4413      	add	r3, r2
    c9b2:	789b      	ldrb	r3, [r3, #2]
    c9b4:	4618      	mov	r0, r3
    c9b6:	4b11      	ldr	r3, [pc, #68]	; (c9fc <cdcdf_acm_disable+0xa4>)
    c9b8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c9ba:	7ffb      	ldrb	r3, [r7, #31]
    c9bc:	69ba      	ldr	r2, [r7, #24]
    c9be:	4413      	add	r3, r2
    c9c0:	22ff      	movs	r2, #255	; 0xff
    c9c2:	709a      	strb	r2, [r3, #2]
    c9c4:	e000      	b.n	c9c8 <cdcdf_acm_disable+0x70>
			continue;
    c9c6:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c9c8:	7ffb      	ldrb	r3, [r7, #31]
    c9ca:	3301      	adds	r3, #1
    c9cc:	77fb      	strb	r3, [r7, #31]
    c9ce:	7ffb      	ldrb	r3, [r7, #31]
    c9d0:	2b01      	cmp	r3, #1
    c9d2:	d9dc      	bls.n	c98e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c9d4:	69bb      	ldr	r3, [r7, #24]
    c9d6:	791b      	ldrb	r3, [r3, #4]
    c9d8:	2bff      	cmp	r3, #255	; 0xff
    c9da:	d007      	beq.n	c9ec <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c9dc:	69bb      	ldr	r3, [r7, #24]
    c9de:	791b      	ldrb	r3, [r3, #4]
    c9e0:	4618      	mov	r0, r3
    c9e2:	4b06      	ldr	r3, [pc, #24]	; (c9fc <cdcdf_acm_disable+0xa4>)
    c9e4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c9e6:	69bb      	ldr	r3, [r7, #24]
    c9e8:	22ff      	movs	r2, #255	; 0xff
    c9ea:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c9ec:	4b04      	ldr	r3, [pc, #16]	; (ca00 <cdcdf_acm_disable+0xa8>)
    c9ee:	2200      	movs	r2, #0
    c9f0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c9f2:	2300      	movs	r3, #0
}
    c9f4:	4618      	mov	r0, r3
    c9f6:	3720      	adds	r7, #32
    c9f8:	46bd      	mov	sp, r7
    c9fa:	bd80      	pop	{r7, pc}
    c9fc:	00003e41 	.word	0x00003e41
    ca00:	20001308 	.word	0x20001308

0000ca04 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    ca04:	b580      	push	{r7, lr}
    ca06:	b084      	sub	sp, #16
    ca08:	af00      	add	r7, sp, #0
    ca0a:	60f8      	str	r0, [r7, #12]
    ca0c:	460b      	mov	r3, r1
    ca0e:	607a      	str	r2, [r7, #4]
    ca10:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    ca12:	7afb      	ldrb	r3, [r7, #11]
    ca14:	2b01      	cmp	r3, #1
    ca16:	d009      	beq.n	ca2c <cdcdf_acm_ctrl+0x28>
    ca18:	2b02      	cmp	r3, #2
    ca1a:	d00d      	beq.n	ca38 <cdcdf_acm_ctrl+0x34>
    ca1c:	2b00      	cmp	r3, #0
    ca1e:	d10e      	bne.n	ca3e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    ca20:	6879      	ldr	r1, [r7, #4]
    ca22:	68f8      	ldr	r0, [r7, #12]
    ca24:	4b09      	ldr	r3, [pc, #36]	; (ca4c <cdcdf_acm_ctrl+0x48>)
    ca26:	4798      	blx	r3
    ca28:	4603      	mov	r3, r0
    ca2a:	e00a      	b.n	ca42 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    ca2c:	6879      	ldr	r1, [r7, #4]
    ca2e:	68f8      	ldr	r0, [r7, #12]
    ca30:	4b07      	ldr	r3, [pc, #28]	; (ca50 <cdcdf_acm_ctrl+0x4c>)
    ca32:	4798      	blx	r3
    ca34:	4603      	mov	r3, r0
    ca36:	e004      	b.n	ca42 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    ca38:	f06f 031a 	mvn.w	r3, #26
    ca3c:	e001      	b.n	ca42 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    ca3e:	f06f 030c 	mvn.w	r3, #12
	}
}
    ca42:	4618      	mov	r0, r3
    ca44:	3710      	adds	r7, #16
    ca46:	46bd      	mov	sp, r7
    ca48:	bd80      	pop	{r7, pc}
    ca4a:	bf00      	nop
    ca4c:	0000c7e5 	.word	0x0000c7e5
    ca50:	0000c959 	.word	0x0000c959

0000ca54 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ca54:	b590      	push	{r4, r7, lr}
    ca56:	b087      	sub	sp, #28
    ca58:	af00      	add	r7, sp, #0
    ca5a:	4603      	mov	r3, r0
    ca5c:	6039      	str	r1, [r7, #0]
    ca5e:	71fb      	strb	r3, [r7, #7]
    ca60:	4613      	mov	r3, r2
    ca62:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    ca64:	683b      	ldr	r3, [r7, #0]
    ca66:	799a      	ldrb	r2, [r3, #6]
    ca68:	79db      	ldrb	r3, [r3, #7]
    ca6a:	021b      	lsls	r3, r3, #8
    ca6c:	4313      	orrs	r3, r2
    ca6e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    ca70:	4b2b      	ldr	r3, [pc, #172]	; (cb20 <cdcdf_acm_set_req+0xcc>)
    ca72:	4798      	blx	r3
    ca74:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    ca76:	683b      	ldr	r3, [r7, #0]
    ca78:	785b      	ldrb	r3, [r3, #1]
    ca7a:	2b20      	cmp	r3, #32
    ca7c:	d002      	beq.n	ca84 <cdcdf_acm_set_req+0x30>
    ca7e:	2b22      	cmp	r3, #34	; 0x22
    ca80:	d034      	beq.n	caec <cdcdf_acm_set_req+0x98>
    ca82:	e046      	b.n	cb12 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ca84:	8afb      	ldrh	r3, [r7, #22]
    ca86:	2b07      	cmp	r3, #7
    ca88:	d002      	beq.n	ca90 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    ca8a:	f04f 33ff 	mov.w	r3, #4294967295
    ca8e:	e042      	b.n	cb16 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    ca90:	79bb      	ldrb	r3, [r7, #6]
    ca92:	2b00      	cmp	r3, #0
    ca94:	d107      	bne.n	caa6 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    ca96:	8afa      	ldrh	r2, [r7, #22]
    ca98:	79f8      	ldrb	r0, [r7, #7]
    ca9a:	2300      	movs	r3, #0
    ca9c:	6939      	ldr	r1, [r7, #16]
    ca9e:	4c21      	ldr	r4, [pc, #132]	; (cb24 <cdcdf_acm_set_req+0xd0>)
    caa0:	47a0      	blx	r4
    caa2:	4603      	mov	r3, r0
    caa4:	e037      	b.n	cb16 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    caa6:	693a      	ldr	r2, [r7, #16]
    caa8:	f107 0308 	add.w	r3, r7, #8
    caac:	6810      	ldr	r0, [r2, #0]
    caae:	6018      	str	r0, [r3, #0]
    cab0:	8891      	ldrh	r1, [r2, #4]
    cab2:	7992      	ldrb	r2, [r2, #6]
    cab4:	8099      	strh	r1, [r3, #4]
    cab6:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    cab8:	4b1b      	ldr	r3, [pc, #108]	; (cb28 <cdcdf_acm_set_req+0xd4>)
    caba:	681b      	ldr	r3, [r3, #0]
    cabc:	2b00      	cmp	r3, #0
    cabe:	d008      	beq.n	cad2 <cdcdf_acm_set_req+0x7e>
    cac0:	4b19      	ldr	r3, [pc, #100]	; (cb28 <cdcdf_acm_set_req+0xd4>)
    cac2:	681b      	ldr	r3, [r3, #0]
    cac4:	f107 0208 	add.w	r2, r7, #8
    cac8:	4610      	mov	r0, r2
    caca:	4798      	blx	r3
    cacc:	4603      	mov	r3, r0
    cace:	2b00      	cmp	r3, #0
    cad0:	d00a      	beq.n	cae8 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    cad2:	4b16      	ldr	r3, [pc, #88]	; (cb2c <cdcdf_acm_set_req+0xd8>)
    cad4:	f107 0208 	add.w	r2, r7, #8
    cad8:	e892 0003 	ldmia.w	r2, {r0, r1}
    cadc:	6018      	str	r0, [r3, #0]
    cade:	3304      	adds	r3, #4
    cae0:	8019      	strh	r1, [r3, #0]
    cae2:	3302      	adds	r3, #2
    cae4:	0c0a      	lsrs	r2, r1, #16
    cae6:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    cae8:	2300      	movs	r3, #0
    caea:	e014      	b.n	cb16 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    caec:	2300      	movs	r3, #0
    caee:	2200      	movs	r2, #0
    caf0:	2100      	movs	r1, #0
    caf2:	2000      	movs	r0, #0
    caf4:	4c0b      	ldr	r4, [pc, #44]	; (cb24 <cdcdf_acm_set_req+0xd0>)
    caf6:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    caf8:	4b0d      	ldr	r3, [pc, #52]	; (cb30 <cdcdf_acm_set_req+0xdc>)
    cafa:	681b      	ldr	r3, [r3, #0]
    cafc:	2b00      	cmp	r3, #0
    cafe:	d006      	beq.n	cb0e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    cb00:	4b0b      	ldr	r3, [pc, #44]	; (cb30 <cdcdf_acm_set_req+0xdc>)
    cb02:	681b      	ldr	r3, [r3, #0]
    cb04:	683a      	ldr	r2, [r7, #0]
    cb06:	8852      	ldrh	r2, [r2, #2]
    cb08:	b292      	uxth	r2, r2
    cb0a:	4610      	mov	r0, r2
    cb0c:	4798      	blx	r3
		}
		return ERR_NONE;
    cb0e:	2300      	movs	r3, #0
    cb10:	e001      	b.n	cb16 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    cb12:	f06f 030c 	mvn.w	r3, #12
	}
}
    cb16:	4618      	mov	r0, r3
    cb18:	371c      	adds	r7, #28
    cb1a:	46bd      	mov	sp, r7
    cb1c:	bd90      	pop	{r4, r7, pc}
    cb1e:	bf00      	nop
    cb20:	0000daa1 	.word	0x0000daa1
    cb24:	0000d915 	.word	0x0000d915
    cb28:	2000131c 	.word	0x2000131c
    cb2c:	20001310 	.word	0x20001310
    cb30:	20001318 	.word	0x20001318

0000cb34 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cb34:	b590      	push	{r4, r7, lr}
    cb36:	b085      	sub	sp, #20
    cb38:	af00      	add	r7, sp, #0
    cb3a:	4603      	mov	r3, r0
    cb3c:	6039      	str	r1, [r7, #0]
    cb3e:	71fb      	strb	r3, [r7, #7]
    cb40:	4613      	mov	r3, r2
    cb42:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    cb44:	683b      	ldr	r3, [r7, #0]
    cb46:	799a      	ldrb	r2, [r3, #6]
    cb48:	79db      	ldrb	r3, [r3, #7]
    cb4a:	021b      	lsls	r3, r3, #8
    cb4c:	4313      	orrs	r3, r2
    cb4e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    cb50:	79bb      	ldrb	r3, [r7, #6]
    cb52:	2b01      	cmp	r3, #1
    cb54:	d101      	bne.n	cb5a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    cb56:	2300      	movs	r3, #0
    cb58:	e013      	b.n	cb82 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    cb5a:	683b      	ldr	r3, [r7, #0]
    cb5c:	785b      	ldrb	r3, [r3, #1]
    cb5e:	2b21      	cmp	r3, #33	; 0x21
    cb60:	d10d      	bne.n	cb7e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cb62:	89fb      	ldrh	r3, [r7, #14]
    cb64:	2b07      	cmp	r3, #7
    cb66:	d002      	beq.n	cb6e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    cb68:	f04f 33ff 	mov.w	r3, #4294967295
    cb6c:	e009      	b.n	cb82 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    cb6e:	89fa      	ldrh	r2, [r7, #14]
    cb70:	79f8      	ldrb	r0, [r7, #7]
    cb72:	2300      	movs	r3, #0
    cb74:	4905      	ldr	r1, [pc, #20]	; (cb8c <cdcdf_acm_get_req+0x58>)
    cb76:	4c06      	ldr	r4, [pc, #24]	; (cb90 <cdcdf_acm_get_req+0x5c>)
    cb78:	47a0      	blx	r4
    cb7a:	4603      	mov	r3, r0
    cb7c:	e001      	b.n	cb82 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    cb7e:	f06f 030c 	mvn.w	r3, #12
	}
}
    cb82:	4618      	mov	r0, r3
    cb84:	3714      	adds	r7, #20
    cb86:	46bd      	mov	sp, r7
    cb88:	bd90      	pop	{r4, r7, pc}
    cb8a:	bf00      	nop
    cb8c:	20001310 	.word	0x20001310
    cb90:	0000d915 	.word	0x0000d915

0000cb94 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cb94:	b580      	push	{r7, lr}
    cb96:	b082      	sub	sp, #8
    cb98:	af00      	add	r7, sp, #0
    cb9a:	4603      	mov	r3, r0
    cb9c:	6039      	str	r1, [r7, #0]
    cb9e:	71fb      	strb	r3, [r7, #7]
    cba0:	4613      	mov	r3, r2
    cba2:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    cba4:	683b      	ldr	r3, [r7, #0]
    cba6:	781b      	ldrb	r3, [r3, #0]
    cba8:	095b      	lsrs	r3, r3, #5
    cbaa:	b2db      	uxtb	r3, r3
    cbac:	f003 0303 	and.w	r3, r3, #3
    cbb0:	2b01      	cmp	r3, #1
    cbb2:	d002      	beq.n	cbba <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    cbb4:	f06f 0309 	mvn.w	r3, #9
    cbb8:	e026      	b.n	cc08 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    cbba:	683b      	ldr	r3, [r7, #0]
    cbbc:	889b      	ldrh	r3, [r3, #4]
    cbbe:	b29a      	uxth	r2, r3
    cbc0:	4b13      	ldr	r3, [pc, #76]	; (cc10 <cdcdf_acm_req+0x7c>)
    cbc2:	781b      	ldrb	r3, [r3, #0]
    cbc4:	b29b      	uxth	r3, r3
    cbc6:	429a      	cmp	r2, r3
    cbc8:	d007      	beq.n	cbda <cdcdf_acm_req+0x46>
    cbca:	683b      	ldr	r3, [r7, #0]
    cbcc:	889b      	ldrh	r3, [r3, #4]
    cbce:	b29a      	uxth	r2, r3
    cbd0:	4b0f      	ldr	r3, [pc, #60]	; (cc10 <cdcdf_acm_req+0x7c>)
    cbd2:	785b      	ldrb	r3, [r3, #1]
    cbd4:	b29b      	uxth	r3, r3
    cbd6:	429a      	cmp	r2, r3
    cbd8:	d114      	bne.n	cc04 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    cbda:	683b      	ldr	r3, [r7, #0]
    cbdc:	781b      	ldrb	r3, [r3, #0]
    cbde:	b25b      	sxtb	r3, r3
    cbe0:	2b00      	cmp	r3, #0
    cbe2:	da07      	bge.n	cbf4 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    cbe4:	79ba      	ldrb	r2, [r7, #6]
    cbe6:	79fb      	ldrb	r3, [r7, #7]
    cbe8:	6839      	ldr	r1, [r7, #0]
    cbea:	4618      	mov	r0, r3
    cbec:	4b09      	ldr	r3, [pc, #36]	; (cc14 <cdcdf_acm_req+0x80>)
    cbee:	4798      	blx	r3
    cbf0:	4603      	mov	r3, r0
    cbf2:	e009      	b.n	cc08 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    cbf4:	79ba      	ldrb	r2, [r7, #6]
    cbf6:	79fb      	ldrb	r3, [r7, #7]
    cbf8:	6839      	ldr	r1, [r7, #0]
    cbfa:	4618      	mov	r0, r3
    cbfc:	4b06      	ldr	r3, [pc, #24]	; (cc18 <cdcdf_acm_req+0x84>)
    cbfe:	4798      	blx	r3
    cc00:	4603      	mov	r3, r0
    cc02:	e001      	b.n	cc08 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    cc04:	f06f 0309 	mvn.w	r3, #9
	}
}
    cc08:	4618      	mov	r0, r3
    cc0a:	3708      	adds	r7, #8
    cc0c:	46bd      	mov	sp, r7
    cc0e:	bd80      	pop	{r7, pc}
    cc10:	20001308 	.word	0x20001308
    cc14:	0000cb35 	.word	0x0000cb35
    cc18:	0000ca55 	.word	0x0000ca55

0000cc1c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    cc1c:	b580      	push	{r7, lr}
    cc1e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    cc20:	4b0b      	ldr	r3, [pc, #44]	; (cc50 <cdcdf_acm_init+0x34>)
    cc22:	4798      	blx	r3
    cc24:	4603      	mov	r3, r0
    cc26:	2b01      	cmp	r3, #1
    cc28:	d902      	bls.n	cc30 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    cc2a:	f06f 0310 	mvn.w	r3, #16
    cc2e:	e00d      	b.n	cc4c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    cc30:	4b08      	ldr	r3, [pc, #32]	; (cc54 <cdcdf_acm_init+0x38>)
    cc32:	4a09      	ldr	r2, [pc, #36]	; (cc58 <cdcdf_acm_init+0x3c>)
    cc34:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    cc36:	4b07      	ldr	r3, [pc, #28]	; (cc54 <cdcdf_acm_init+0x38>)
    cc38:	4a08      	ldr	r2, [pc, #32]	; (cc5c <cdcdf_acm_init+0x40>)
    cc3a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    cc3c:	4805      	ldr	r0, [pc, #20]	; (cc54 <cdcdf_acm_init+0x38>)
    cc3e:	4b08      	ldr	r3, [pc, #32]	; (cc60 <cdcdf_acm_init+0x44>)
    cc40:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    cc42:	4908      	ldr	r1, [pc, #32]	; (cc64 <cdcdf_acm_init+0x48>)
    cc44:	2001      	movs	r0, #1
    cc46:	4b08      	ldr	r3, [pc, #32]	; (cc68 <cdcdf_acm_init+0x4c>)
    cc48:	4798      	blx	r3
	return ERR_NONE;
    cc4a:	2300      	movs	r3, #0
}
    cc4c:	4618      	mov	r0, r3
    cc4e:	bd80      	pop	{r7, pc}
    cc50:	0000dab9 	.word	0x0000dab9
    cc54:	200012fc 	.word	0x200012fc
    cc58:	0000ca05 	.word	0x0000ca05
    cc5c:	20001308 	.word	0x20001308
    cc60:	0000da21 	.word	0x0000da21
    cc64:	20000208 	.word	0x20000208
    cc68:	0000d951 	.word	0x0000d951

0000cc6c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    cc6c:	b590      	push	{r4, r7, lr}
    cc6e:	b083      	sub	sp, #12
    cc70:	af00      	add	r7, sp, #0
    cc72:	6078      	str	r0, [r7, #4]
    cc74:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cc76:	4b0b      	ldr	r3, [pc, #44]	; (cca4 <cdcdf_acm_read+0x38>)
    cc78:	4798      	blx	r3
    cc7a:	4603      	mov	r3, r0
    cc7c:	f083 0301 	eor.w	r3, r3, #1
    cc80:	b2db      	uxtb	r3, r3
    cc82:	2b00      	cmp	r3, #0
    cc84:	d002      	beq.n	cc8c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    cc86:	f06f 0310 	mvn.w	r3, #16
    cc8a:	e007      	b.n	cc9c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    cc8c:	4b06      	ldr	r3, [pc, #24]	; (cca8 <cdcdf_acm_read+0x3c>)
    cc8e:	7918      	ldrb	r0, [r3, #4]
    cc90:	2300      	movs	r3, #0
    cc92:	683a      	ldr	r2, [r7, #0]
    cc94:	6879      	ldr	r1, [r7, #4]
    cc96:	4c05      	ldr	r4, [pc, #20]	; (ccac <cdcdf_acm_read+0x40>)
    cc98:	47a0      	blx	r4
    cc9a:	4603      	mov	r3, r0
}
    cc9c:	4618      	mov	r0, r3
    cc9e:	370c      	adds	r7, #12
    cca0:	46bd      	mov	sp, r7
    cca2:	bd90      	pop	{r4, r7, pc}
    cca4:	0000cd91 	.word	0x0000cd91
    cca8:	20001308 	.word	0x20001308
    ccac:	0000d915 	.word	0x0000d915

0000ccb0 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    ccb0:	b590      	push	{r4, r7, lr}
    ccb2:	b083      	sub	sp, #12
    ccb4:	af00      	add	r7, sp, #0
    ccb6:	6078      	str	r0, [r7, #4]
    ccb8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    ccba:	4b0b      	ldr	r3, [pc, #44]	; (cce8 <cdcdf_acm_write+0x38>)
    ccbc:	4798      	blx	r3
    ccbe:	4603      	mov	r3, r0
    ccc0:	f083 0301 	eor.w	r3, r3, #1
    ccc4:	b2db      	uxtb	r3, r3
    ccc6:	2b00      	cmp	r3, #0
    ccc8:	d002      	beq.n	ccd0 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    ccca:	f06f 0310 	mvn.w	r3, #16
    ccce:	e007      	b.n	cce0 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    ccd0:	4b06      	ldr	r3, [pc, #24]	; (ccec <cdcdf_acm_write+0x3c>)
    ccd2:	78d8      	ldrb	r0, [r3, #3]
    ccd4:	2301      	movs	r3, #1
    ccd6:	683a      	ldr	r2, [r7, #0]
    ccd8:	6879      	ldr	r1, [r7, #4]
    ccda:	4c05      	ldr	r4, [pc, #20]	; (ccf0 <cdcdf_acm_write+0x40>)
    ccdc:	47a0      	blx	r4
    ccde:	4603      	mov	r3, r0
}
    cce0:	4618      	mov	r0, r3
    cce2:	370c      	adds	r7, #12
    cce4:	46bd      	mov	sp, r7
    cce6:	bd90      	pop	{r4, r7, pc}
    cce8:	0000cd91 	.word	0x0000cd91
    ccec:	20001308 	.word	0x20001308
    ccf0:	0000d915 	.word	0x0000d915

0000ccf4 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    ccf4:	b580      	push	{r7, lr}
    ccf6:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    ccf8:	4b05      	ldr	r3, [pc, #20]	; (cd10 <cdcdf_acm_stop_xfer+0x1c>)
    ccfa:	78db      	ldrb	r3, [r3, #3]
    ccfc:	4618      	mov	r0, r3
    ccfe:	4b05      	ldr	r3, [pc, #20]	; (cd14 <cdcdf_acm_stop_xfer+0x20>)
    cd00:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    cd02:	4b03      	ldr	r3, [pc, #12]	; (cd10 <cdcdf_acm_stop_xfer+0x1c>)
    cd04:	791b      	ldrb	r3, [r3, #4]
    cd06:	4618      	mov	r0, r3
    cd08:	4b02      	ldr	r3, [pc, #8]	; (cd14 <cdcdf_acm_stop_xfer+0x20>)
    cd0a:	4798      	blx	r3
}
    cd0c:	bf00      	nop
    cd0e:	bd80      	pop	{r7, pc}
    cd10:	20001308 	.word	0x20001308
    cd14:	00004069 	.word	0x00004069

0000cd18 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    cd18:	b580      	push	{r7, lr}
    cd1a:	b082      	sub	sp, #8
    cd1c:	af00      	add	r7, sp, #0
    cd1e:	4603      	mov	r3, r0
    cd20:	6039      	str	r1, [r7, #0]
    cd22:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    cd24:	79fb      	ldrb	r3, [r7, #7]
    cd26:	2b03      	cmp	r3, #3
    cd28:	d822      	bhi.n	cd70 <cdcdf_acm_register_callback+0x58>
    cd2a:	a201      	add	r2, pc, #4	; (adr r2, cd30 <cdcdf_acm_register_callback+0x18>)
    cd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cd30:	0000cd41 	.word	0x0000cd41
    cd34:	0000cd51 	.word	0x0000cd51
    cd38:	0000cd61 	.word	0x0000cd61
    cd3c:	0000cd69 	.word	0x0000cd69
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    cd40:	4b0f      	ldr	r3, [pc, #60]	; (cd80 <cdcdf_acm_register_callback+0x68>)
    cd42:	791b      	ldrb	r3, [r3, #4]
    cd44:	683a      	ldr	r2, [r7, #0]
    cd46:	2102      	movs	r1, #2
    cd48:	4618      	mov	r0, r3
    cd4a:	4b0e      	ldr	r3, [pc, #56]	; (cd84 <cdcdf_acm_register_callback+0x6c>)
    cd4c:	4798      	blx	r3
		break;
    cd4e:	e012      	b.n	cd76 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    cd50:	4b0b      	ldr	r3, [pc, #44]	; (cd80 <cdcdf_acm_register_callback+0x68>)
    cd52:	78db      	ldrb	r3, [r3, #3]
    cd54:	683a      	ldr	r2, [r7, #0]
    cd56:	2102      	movs	r1, #2
    cd58:	4618      	mov	r0, r3
    cd5a:	4b0a      	ldr	r3, [pc, #40]	; (cd84 <cdcdf_acm_register_callback+0x6c>)
    cd5c:	4798      	blx	r3
		break;
    cd5e:	e00a      	b.n	cd76 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    cd60:	4a09      	ldr	r2, [pc, #36]	; (cd88 <cdcdf_acm_register_callback+0x70>)
    cd62:	683b      	ldr	r3, [r7, #0]
    cd64:	6013      	str	r3, [r2, #0]
		break;
    cd66:	e006      	b.n	cd76 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    cd68:	4a08      	ldr	r2, [pc, #32]	; (cd8c <cdcdf_acm_register_callback+0x74>)
    cd6a:	683b      	ldr	r3, [r7, #0]
    cd6c:	6013      	str	r3, [r2, #0]
		break;
    cd6e:	e002      	b.n	cd76 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    cd70:	f06f 030c 	mvn.w	r3, #12
    cd74:	e000      	b.n	cd78 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    cd76:	2300      	movs	r3, #0
}
    cd78:	4618      	mov	r0, r3
    cd7a:	3708      	adds	r7, #8
    cd7c:	46bd      	mov	sp, r7
    cd7e:	bd80      	pop	{r7, pc}
    cd80:	20001308 	.word	0x20001308
    cd84:	00004195 	.word	0x00004195
    cd88:	2000131c 	.word	0x2000131c
    cd8c:	20001318 	.word	0x20001318

0000cd90 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    cd90:	b480      	push	{r7}
    cd92:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    cd94:	4b03      	ldr	r3, [pc, #12]	; (cda4 <cdcdf_acm_is_enabled+0x14>)
    cd96:	795b      	ldrb	r3, [r3, #5]
}
    cd98:	4618      	mov	r0, r3
    cd9a:	46bd      	mov	sp, r7
    cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cda0:	4770      	bx	lr
    cda2:	bf00      	nop
    cda4:	20001308 	.word	0x20001308

0000cda8 <usb_get_u16>:
{
    cda8:	b480      	push	{r7}
    cdaa:	b083      	sub	sp, #12
    cdac:	af00      	add	r7, sp, #0
    cdae:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cdb0:	687b      	ldr	r3, [r7, #4]
    cdb2:	781b      	ldrb	r3, [r3, #0]
    cdb4:	b29a      	uxth	r2, r3
    cdb6:	687b      	ldr	r3, [r7, #4]
    cdb8:	3301      	adds	r3, #1
    cdba:	781b      	ldrb	r3, [r3, #0]
    cdbc:	b29b      	uxth	r3, r3
    cdbe:	021b      	lsls	r3, r3, #8
    cdc0:	b29b      	uxth	r3, r3
    cdc2:	4413      	add	r3, r2
    cdc4:	b29b      	uxth	r3, r3
}
    cdc6:	4618      	mov	r0, r3
    cdc8:	370c      	adds	r7, #12
    cdca:	46bd      	mov	sp, r7
    cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdd0:	4770      	bx	lr

0000cdd2 <usb_desc_len>:
{
    cdd2:	b480      	push	{r7}
    cdd4:	b083      	sub	sp, #12
    cdd6:	af00      	add	r7, sp, #0
    cdd8:	6078      	str	r0, [r7, #4]
	return desc[0];
    cdda:	687b      	ldr	r3, [r7, #4]
    cddc:	781b      	ldrb	r3, [r3, #0]
}
    cdde:	4618      	mov	r0, r3
    cde0:	370c      	adds	r7, #12
    cde2:	46bd      	mov	sp, r7
    cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cde8:	4770      	bx	lr
	...

0000cdec <usb_desc_next>:
{
    cdec:	b580      	push	{r7, lr}
    cdee:	b082      	sub	sp, #8
    cdf0:	af00      	add	r7, sp, #0
    cdf2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cdf4:	6878      	ldr	r0, [r7, #4]
    cdf6:	4b05      	ldr	r3, [pc, #20]	; (ce0c <usb_desc_next+0x20>)
    cdf8:	4798      	blx	r3
    cdfa:	4603      	mov	r3, r0
    cdfc:	461a      	mov	r2, r3
    cdfe:	687b      	ldr	r3, [r7, #4]
    ce00:	4413      	add	r3, r2
}
    ce02:	4618      	mov	r0, r3
    ce04:	3708      	adds	r7, #8
    ce06:	46bd      	mov	sp, r7
    ce08:	bd80      	pop	{r7, pc}
    ce0a:	bf00      	nop
    ce0c:	0000cdd3 	.word	0x0000cdd3

0000ce10 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    ce10:	b580      	push	{r7, lr}
    ce12:	b082      	sub	sp, #8
    ce14:	af00      	add	r7, sp, #0
    ce16:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ce18:	687b      	ldr	r3, [r7, #4]
    ce1a:	3302      	adds	r3, #2
    ce1c:	4618      	mov	r0, r3
    ce1e:	4b03      	ldr	r3, [pc, #12]	; (ce2c <usb_cfg_desc_total_len+0x1c>)
    ce20:	4798      	blx	r3
    ce22:	4603      	mov	r3, r0
}
    ce24:	4618      	mov	r0, r3
    ce26:	3708      	adds	r7, #8
    ce28:	46bd      	mov	sp, r7
    ce2a:	bd80      	pop	{r7, pc}
    ce2c:	0000cda9 	.word	0x0000cda9

0000ce30 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    ce30:	b590      	push	{r4, r7, lr}
    ce32:	b085      	sub	sp, #20
    ce34:	af00      	add	r7, sp, #0
    ce36:	4603      	mov	r3, r0
    ce38:	6039      	str	r1, [r7, #0]
    ce3a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    ce3c:	2300      	movs	r3, #0
    ce3e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    ce40:	683b      	ldr	r3, [r7, #0]
    ce42:	799a      	ldrb	r2, [r3, #6]
    ce44:	79db      	ldrb	r3, [r3, #7]
    ce46:	021b      	lsls	r3, r3, #8
    ce48:	4313      	orrs	r3, r2
    ce4a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    ce4c:	897b      	ldrh	r3, [r7, #10]
    ce4e:	2b12      	cmp	r3, #18
    ce50:	d901      	bls.n	ce56 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    ce52:	2312      	movs	r3, #18
    ce54:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    ce56:	68fb      	ldr	r3, [r7, #12]
    ce58:	2b00      	cmp	r3, #0
    ce5a:	d10a      	bne.n	ce72 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    ce5c:	4b0f      	ldr	r3, [pc, #60]	; (ce9c <usbdc_get_dev_desc+0x6c>)
    ce5e:	681b      	ldr	r3, [r3, #0]
    ce60:	6818      	ldr	r0, [r3, #0]
    ce62:	4b0e      	ldr	r3, [pc, #56]	; (ce9c <usbdc_get_dev_desc+0x6c>)
    ce64:	681b      	ldr	r3, [r3, #0]
    ce66:	685b      	ldr	r3, [r3, #4]
    ce68:	2201      	movs	r2, #1
    ce6a:	4619      	mov	r1, r3
    ce6c:	4b0c      	ldr	r3, [pc, #48]	; (cea0 <usbdc_get_dev_desc+0x70>)
    ce6e:	4798      	blx	r3
    ce70:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    ce72:	68fb      	ldr	r3, [r7, #12]
    ce74:	2b00      	cmp	r3, #0
    ce76:	d101      	bne.n	ce7c <usbdc_get_dev_desc+0x4c>
		return false;
    ce78:	2300      	movs	r3, #0
    ce7a:	e00b      	b.n	ce94 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    ce7c:	897a      	ldrh	r2, [r7, #10]
    ce7e:	79f8      	ldrb	r0, [r7, #7]
    ce80:	2300      	movs	r3, #0
    ce82:	68f9      	ldr	r1, [r7, #12]
    ce84:	4c07      	ldr	r4, [pc, #28]	; (cea4 <usbdc_get_dev_desc+0x74>)
    ce86:	47a0      	blx	r4
    ce88:	4603      	mov	r3, r0
    ce8a:	2b00      	cmp	r3, #0
    ce8c:	d001      	beq.n	ce92 <usbdc_get_dev_desc+0x62>
		return false;
    ce8e:	2300      	movs	r3, #0
    ce90:	e000      	b.n	ce94 <usbdc_get_dev_desc+0x64>
	}
	return true;
    ce92:	2301      	movs	r3, #1
}
    ce94:	4618      	mov	r0, r3
    ce96:	3714      	adds	r7, #20
    ce98:	46bd      	mov	sp, r7
    ce9a:	bd90      	pop	{r4, r7, pc}
    ce9c:	20001320 	.word	0x20001320
    cea0:	0000dba5 	.word	0x0000dba5
    cea4:	0000d915 	.word	0x0000d915

0000cea8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    cea8:	b590      	push	{r4, r7, lr}
    ceaa:	b087      	sub	sp, #28
    ceac:	af00      	add	r7, sp, #0
    ceae:	4603      	mov	r3, r0
    ceb0:	6039      	str	r1, [r7, #0]
    ceb2:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    ceb4:	2300      	movs	r3, #0
    ceb6:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    ceb8:	683b      	ldr	r3, [r7, #0]
    ceba:	799a      	ldrb	r2, [r3, #6]
    cebc:	79db      	ldrb	r3, [r3, #7]
    cebe:	021b      	lsls	r3, r3, #8
    cec0:	4313      	orrs	r3, r2
    cec2:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    cec4:	683b      	ldr	r3, [r7, #0]
    cec6:	885b      	ldrh	r3, [r3, #2]
    cec8:	b29b      	uxth	r3, r3
    ceca:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cecc:	8a7a      	ldrh	r2, [r7, #18]
    cece:	4b1e      	ldr	r3, [pc, #120]	; (cf48 <usbdc_get_cfg_desc+0xa0>)
    ced0:	7f1b      	ldrb	r3, [r3, #28]
    ced2:	3b01      	subs	r3, #1
    ced4:	4013      	ands	r3, r2
    ced6:	2b00      	cmp	r3, #0
    ced8:	bf0c      	ite	eq
    ceda:	2301      	moveq	r3, #1
    cedc:	2300      	movne	r3, #0
    cede:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cee0:	697b      	ldr	r3, [r7, #20]
    cee2:	2b00      	cmp	r3, #0
    cee4:	d10c      	bne.n	cf00 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    cee6:	4b18      	ldr	r3, [pc, #96]	; (cf48 <usbdc_get_cfg_desc+0xa0>)
    cee8:	681b      	ldr	r3, [r3, #0]
    ceea:	6818      	ldr	r0, [r3, #0]
    ceec:	4b16      	ldr	r3, [pc, #88]	; (cf48 <usbdc_get_cfg_desc+0xa0>)
    ceee:	681b      	ldr	r3, [r3, #0]
    cef0:	6859      	ldr	r1, [r3, #4]
    cef2:	7c3b      	ldrb	r3, [r7, #16]
    cef4:	3301      	adds	r3, #1
    cef6:	b2db      	uxtb	r3, r3
    cef8:	461a      	mov	r2, r3
    cefa:	4b14      	ldr	r3, [pc, #80]	; (cf4c <usbdc_get_cfg_desc+0xa4>)
    cefc:	4798      	blx	r3
    cefe:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    cf00:	697b      	ldr	r3, [r7, #20]
    cf02:	2b00      	cmp	r3, #0
    cf04:	d101      	bne.n	cf0a <usbdc_get_cfg_desc+0x62>
		return false;
    cf06:	2300      	movs	r3, #0
    cf08:	e019      	b.n	cf3e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    cf0a:	6978      	ldr	r0, [r7, #20]
    cf0c:	4b10      	ldr	r3, [pc, #64]	; (cf50 <usbdc_get_cfg_desc+0xa8>)
    cf0e:	4798      	blx	r3
    cf10:	4603      	mov	r3, r0
    cf12:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    cf14:	8a7a      	ldrh	r2, [r7, #18]
    cf16:	89fb      	ldrh	r3, [r7, #14]
    cf18:	429a      	cmp	r2, r3
    cf1a:	d802      	bhi.n	cf22 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    cf1c:	2300      	movs	r3, #0
    cf1e:	747b      	strb	r3, [r7, #17]
    cf20:	e001      	b.n	cf26 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    cf22:	89fb      	ldrh	r3, [r7, #14]
    cf24:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    cf26:	8a7a      	ldrh	r2, [r7, #18]
    cf28:	7c7b      	ldrb	r3, [r7, #17]
    cf2a:	79f8      	ldrb	r0, [r7, #7]
    cf2c:	6979      	ldr	r1, [r7, #20]
    cf2e:	4c09      	ldr	r4, [pc, #36]	; (cf54 <usbdc_get_cfg_desc+0xac>)
    cf30:	47a0      	blx	r4
    cf32:	4603      	mov	r3, r0
    cf34:	2b00      	cmp	r3, #0
    cf36:	d001      	beq.n	cf3c <usbdc_get_cfg_desc+0x94>
		return false;
    cf38:	2300      	movs	r3, #0
    cf3a:	e000      	b.n	cf3e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    cf3c:	2301      	movs	r3, #1
}
    cf3e:	4618      	mov	r0, r3
    cf40:	371c      	adds	r7, #28
    cf42:	46bd      	mov	sp, r7
    cf44:	bd90      	pop	{r4, r7, pc}
    cf46:	bf00      	nop
    cf48:	20001320 	.word	0x20001320
    cf4c:	0000dc65 	.word	0x0000dc65
    cf50:	0000ce11 	.word	0x0000ce11
    cf54:	0000d915 	.word	0x0000d915

0000cf58 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    cf58:	b590      	push	{r4, r7, lr}
    cf5a:	b085      	sub	sp, #20
    cf5c:	af00      	add	r7, sp, #0
    cf5e:	4603      	mov	r3, r0
    cf60:	6039      	str	r1, [r7, #0]
    cf62:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    cf64:	683b      	ldr	r3, [r7, #0]
    cf66:	799a      	ldrb	r2, [r3, #6]
    cf68:	79db      	ldrb	r3, [r3, #7]
    cf6a:	021b      	lsls	r3, r3, #8
    cf6c:	4313      	orrs	r3, r2
    cf6e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    cf70:	683b      	ldr	r3, [r7, #0]
    cf72:	885b      	ldrh	r3, [r3, #2]
    cf74:	b29b      	uxth	r3, r3
    cf76:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cf78:	89fa      	ldrh	r2, [r7, #14]
    cf7a:	4b1a      	ldr	r3, [pc, #104]	; (cfe4 <usbdc_get_str_desc+0x8c>)
    cf7c:	7f1b      	ldrb	r3, [r3, #28]
    cf7e:	3b01      	subs	r3, #1
    cf80:	4013      	ands	r3, r2
    cf82:	2b00      	cmp	r3, #0
    cf84:	bf0c      	ite	eq
    cf86:	2301      	moveq	r3, #1
    cf88:	2300      	movne	r3, #0
    cf8a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    cf8c:	4b15      	ldr	r3, [pc, #84]	; (cfe4 <usbdc_get_str_desc+0x8c>)
    cf8e:	681b      	ldr	r3, [r3, #0]
    cf90:	6818      	ldr	r0, [r3, #0]
    cf92:	4b14      	ldr	r3, [pc, #80]	; (cfe4 <usbdc_get_str_desc+0x8c>)
    cf94:	681b      	ldr	r3, [r3, #0]
    cf96:	685b      	ldr	r3, [r3, #4]
    cf98:	7b3a      	ldrb	r2, [r7, #12]
    cf9a:	4619      	mov	r1, r3
    cf9c:	4b12      	ldr	r3, [pc, #72]	; (cfe8 <usbdc_get_str_desc+0x90>)
    cf9e:	4798      	blx	r3
    cfa0:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    cfa2:	68bb      	ldr	r3, [r7, #8]
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	d101      	bne.n	cfac <usbdc_get_str_desc+0x54>
		return false;
    cfa8:	2300      	movs	r3, #0
    cfaa:	e017      	b.n	cfdc <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    cfac:	68bb      	ldr	r3, [r7, #8]
    cfae:	781b      	ldrb	r3, [r3, #0]
    cfb0:	b29b      	uxth	r3, r3
    cfb2:	89fa      	ldrh	r2, [r7, #14]
    cfb4:	429a      	cmp	r2, r3
    cfb6:	d802      	bhi.n	cfbe <usbdc_get_str_desc+0x66>
		need_zlp = false;
    cfb8:	2300      	movs	r3, #0
    cfba:	737b      	strb	r3, [r7, #13]
    cfbc:	e002      	b.n	cfc4 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    cfbe:	68bb      	ldr	r3, [r7, #8]
    cfc0:	781b      	ldrb	r3, [r3, #0]
    cfc2:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    cfc4:	89fa      	ldrh	r2, [r7, #14]
    cfc6:	7b7b      	ldrb	r3, [r7, #13]
    cfc8:	79f8      	ldrb	r0, [r7, #7]
    cfca:	68b9      	ldr	r1, [r7, #8]
    cfcc:	4c07      	ldr	r4, [pc, #28]	; (cfec <usbdc_get_str_desc+0x94>)
    cfce:	47a0      	blx	r4
    cfd0:	4603      	mov	r3, r0
    cfd2:	2b00      	cmp	r3, #0
    cfd4:	d001      	beq.n	cfda <usbdc_get_str_desc+0x82>
		return false;
    cfd6:	2300      	movs	r3, #0
    cfd8:	e000      	b.n	cfdc <usbdc_get_str_desc+0x84>
	}
	return true;
    cfda:	2301      	movs	r3, #1
}
    cfdc:	4618      	mov	r0, r3
    cfde:	3714      	adds	r7, #20
    cfe0:	46bd      	mov	sp, r7
    cfe2:	bd90      	pop	{r4, r7, pc}
    cfe4:	20001320 	.word	0x20001320
    cfe8:	0000dcdd 	.word	0x0000dcdd
    cfec:	0000d915 	.word	0x0000d915

0000cff0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    cff0:	b580      	push	{r7, lr}
    cff2:	b084      	sub	sp, #16
    cff4:	af00      	add	r7, sp, #0
    cff6:	4603      	mov	r3, r0
    cff8:	6039      	str	r1, [r7, #0]
    cffa:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    cffc:	683b      	ldr	r3, [r7, #0]
    cffe:	885b      	ldrh	r3, [r3, #2]
    d000:	b29b      	uxth	r3, r3
    d002:	0a1b      	lsrs	r3, r3, #8
    d004:	b29b      	uxth	r3, r3
    d006:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    d008:	7bfb      	ldrb	r3, [r7, #15]
    d00a:	2b02      	cmp	r3, #2
    d00c:	d00d      	beq.n	d02a <usbdc_get_desc_req+0x3a>
    d00e:	2b03      	cmp	r3, #3
    d010:	d012      	beq.n	d038 <usbdc_get_desc_req+0x48>
    d012:	2b01      	cmp	r3, #1
    d014:	d002      	beq.n	d01c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    d016:	bf00      	nop
	}
	return false;
    d018:	2300      	movs	r3, #0
    d01a:	e013      	b.n	d044 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    d01c:	79fb      	ldrb	r3, [r7, #7]
    d01e:	6839      	ldr	r1, [r7, #0]
    d020:	4618      	mov	r0, r3
    d022:	4b0a      	ldr	r3, [pc, #40]	; (d04c <usbdc_get_desc_req+0x5c>)
    d024:	4798      	blx	r3
    d026:	4603      	mov	r3, r0
    d028:	e00c      	b.n	d044 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    d02a:	79fb      	ldrb	r3, [r7, #7]
    d02c:	6839      	ldr	r1, [r7, #0]
    d02e:	4618      	mov	r0, r3
    d030:	4b07      	ldr	r3, [pc, #28]	; (d050 <usbdc_get_desc_req+0x60>)
    d032:	4798      	blx	r3
    d034:	4603      	mov	r3, r0
    d036:	e005      	b.n	d044 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    d038:	79fb      	ldrb	r3, [r7, #7]
    d03a:	6839      	ldr	r1, [r7, #0]
    d03c:	4618      	mov	r0, r3
    d03e:	4b05      	ldr	r3, [pc, #20]	; (d054 <usbdc_get_desc_req+0x64>)
    d040:	4798      	blx	r3
    d042:	4603      	mov	r3, r0
}
    d044:	4618      	mov	r0, r3
    d046:	3710      	adds	r7, #16
    d048:	46bd      	mov	sp, r7
    d04a:	bd80      	pop	{r7, pc}
    d04c:	0000ce31 	.word	0x0000ce31
    d050:	0000cea9 	.word	0x0000cea9
    d054:	0000cf59 	.word	0x0000cf59

0000d058 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    d058:	b590      	push	{r4, r7, lr}
    d05a:	b085      	sub	sp, #20
    d05c:	af00      	add	r7, sp, #0
    d05e:	4603      	mov	r3, r0
    d060:	6039      	str	r1, [r7, #0]
    d062:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d064:	683b      	ldr	r3, [r7, #0]
    d066:	781b      	ldrb	r3, [r3, #0]
    d068:	f003 031f 	and.w	r3, r3, #31
    d06c:	2b00      	cmp	r3, #0
    d06e:	db1b      	blt.n	d0a8 <usbdc_get_status_req+0x50>
    d070:	2b01      	cmp	r3, #1
    d072:	dd02      	ble.n	d07a <usbdc_get_status_req+0x22>
    d074:	2b02      	cmp	r3, #2
    d076:	d003      	beq.n	d080 <usbdc_get_status_req+0x28>
    d078:	e016      	b.n	d0a8 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    d07a:	2300      	movs	r3, #0
    d07c:	60fb      	str	r3, [r7, #12]
		break;
    d07e:	e015      	b.n	d0ac <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    d080:	683b      	ldr	r3, [r7, #0]
    d082:	889b      	ldrh	r3, [r3, #4]
    d084:	b29b      	uxth	r3, r3
    d086:	b2db      	uxtb	r3, r3
    d088:	2102      	movs	r1, #2
    d08a:	4618      	mov	r0, r3
    d08c:	4b0f      	ldr	r3, [pc, #60]	; (d0cc <usbdc_get_status_req+0x74>)
    d08e:	4798      	blx	r3
    d090:	4603      	mov	r3, r0
    d092:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    d094:	68fb      	ldr	r3, [r7, #12]
    d096:	2b00      	cmp	r3, #0
    d098:	da01      	bge.n	d09e <usbdc_get_status_req+0x46>
			return false;
    d09a:	2300      	movs	r3, #0
    d09c:	e012      	b.n	d0c4 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    d09e:	68fb      	ldr	r3, [r7, #12]
    d0a0:	f003 0301 	and.w	r3, r3, #1
    d0a4:	60fb      	str	r3, [r7, #12]
		break;
    d0a6:	e001      	b.n	d0ac <usbdc_get_status_req+0x54>
	default:
		return false;
    d0a8:	2300      	movs	r3, #0
    d0aa:	e00b      	b.n	d0c4 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    d0ac:	4b08      	ldr	r3, [pc, #32]	; (d0d0 <usbdc_get_status_req+0x78>)
    d0ae:	695b      	ldr	r3, [r3, #20]
    d0b0:	89ba      	ldrh	r2, [r7, #12]
    d0b2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    d0b4:	4b06      	ldr	r3, [pc, #24]	; (d0d0 <usbdc_get_status_req+0x78>)
    d0b6:	6959      	ldr	r1, [r3, #20]
    d0b8:	79f8      	ldrb	r0, [r7, #7]
    d0ba:	2300      	movs	r3, #0
    d0bc:	2202      	movs	r2, #2
    d0be:	4c05      	ldr	r4, [pc, #20]	; (d0d4 <usbdc_get_status_req+0x7c>)
    d0c0:	47a0      	blx	r4
	return true;
    d0c2:	2301      	movs	r3, #1
}
    d0c4:	4618      	mov	r0, r3
    d0c6:	3714      	adds	r7, #20
    d0c8:	46bd      	mov	sp, r7
    d0ca:	bd90      	pop	{r4, r7, pc}
    d0cc:	00004141 	.word	0x00004141
    d0d0:	20001320 	.word	0x20001320
    d0d4:	0000d915 	.word	0x0000d915

0000d0d8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    d0d8:	b590      	push	{r4, r7, lr}
    d0da:	b085      	sub	sp, #20
    d0dc:	af00      	add	r7, sp, #0
    d0de:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d0e0:	4b1f      	ldr	r3, [pc, #124]	; (d160 <usbdc_get_interface+0x88>)
    d0e2:	691b      	ldr	r3, [r3, #16]
    d0e4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    d0e6:	4b1e      	ldr	r3, [pc, #120]	; (d160 <usbdc_get_interface+0x88>)
    d0e8:	7f5b      	ldrb	r3, [r3, #29]
    d0ea:	461a      	mov	r2, r3
    d0ec:	687b      	ldr	r3, [r7, #4]
    d0ee:	889b      	ldrh	r3, [r3, #4]
    d0f0:	b29b      	uxth	r3, r3
    d0f2:	fa42 f303 	asr.w	r3, r2, r3
    d0f6:	f003 0301 	and.w	r3, r3, #1
    d0fa:	2b00      	cmp	r3, #0
    d0fc:	d128      	bne.n	d150 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    d0fe:	4b18      	ldr	r3, [pc, #96]	; (d160 <usbdc_get_interface+0x88>)
    d100:	695b      	ldr	r3, [r3, #20]
    d102:	2200      	movs	r2, #0
    d104:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d106:	4b16      	ldr	r3, [pc, #88]	; (d160 <usbdc_get_interface+0x88>)
    d108:	6959      	ldr	r1, [r3, #20]
    d10a:	2300      	movs	r3, #0
    d10c:	2201      	movs	r2, #1
    d10e:	2000      	movs	r0, #0
    d110:	4c14      	ldr	r4, [pc, #80]	; (d164 <usbdc_get_interface+0x8c>)
    d112:	47a0      	blx	r4
		return true;
    d114:	2301      	movs	r3, #1
    d116:	e01f      	b.n	d158 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    d118:	68fb      	ldr	r3, [r7, #12]
    d11a:	685b      	ldr	r3, [r3, #4]
    d11c:	687a      	ldr	r2, [r7, #4]
    d11e:	2102      	movs	r1, #2
    d120:	68f8      	ldr	r0, [r7, #12]
    d122:	4798      	blx	r3
    d124:	60b8      	str	r0, [r7, #8]
    d126:	68bb      	ldr	r3, [r7, #8]
    d128:	2b00      	cmp	r3, #0
    d12a:	da03      	bge.n	d134 <usbdc_get_interface+0x5c>
			func = func->next;
    d12c:	68fb      	ldr	r3, [r7, #12]
    d12e:	681b      	ldr	r3, [r3, #0]
    d130:	60fb      	str	r3, [r7, #12]
    d132:	e00d      	b.n	d150 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    d134:	4b0a      	ldr	r3, [pc, #40]	; (d160 <usbdc_get_interface+0x88>)
    d136:	695b      	ldr	r3, [r3, #20]
    d138:	68ba      	ldr	r2, [r7, #8]
    d13a:	b2d2      	uxtb	r2, r2
    d13c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d13e:	4b08      	ldr	r3, [pc, #32]	; (d160 <usbdc_get_interface+0x88>)
    d140:	6959      	ldr	r1, [r3, #20]
    d142:	2300      	movs	r3, #0
    d144:	2201      	movs	r2, #1
    d146:	2000      	movs	r0, #0
    d148:	4c06      	ldr	r4, [pc, #24]	; (d164 <usbdc_get_interface+0x8c>)
    d14a:	47a0      	blx	r4
			return true;
    d14c:	2301      	movs	r3, #1
    d14e:	e003      	b.n	d158 <usbdc_get_interface+0x80>
	while (NULL != func) {
    d150:	68fb      	ldr	r3, [r7, #12]
    d152:	2b00      	cmp	r3, #0
    d154:	d1e0      	bne.n	d118 <usbdc_get_interface+0x40>
		}
	}
	return false;
    d156:	2300      	movs	r3, #0
}
    d158:	4618      	mov	r0, r3
    d15a:	3714      	adds	r7, #20
    d15c:	46bd      	mov	sp, r7
    d15e:	bd90      	pop	{r4, r7, pc}
    d160:	20001320 	.word	0x20001320
    d164:	0000d915 	.word	0x0000d915

0000d168 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    d168:	b590      	push	{r4, r7, lr}
    d16a:	b083      	sub	sp, #12
    d16c:	af00      	add	r7, sp, #0
    d16e:	4603      	mov	r3, r0
    d170:	6039      	str	r1, [r7, #0]
    d172:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d174:	683b      	ldr	r3, [r7, #0]
    d176:	785b      	ldrb	r3, [r3, #1]
    d178:	2b0a      	cmp	r3, #10
    d17a:	d83a      	bhi.n	d1f2 <usbdc_get_req+0x8a>
    d17c:	a201      	add	r2, pc, #4	; (adr r2, d184 <usbdc_get_req+0x1c>)
    d17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d182:	bf00      	nop
    d184:	0000d1db 	.word	0x0000d1db
    d188:	0000d1f3 	.word	0x0000d1f3
    d18c:	0000d1f3 	.word	0x0000d1f3
    d190:	0000d1f3 	.word	0x0000d1f3
    d194:	0000d1f3 	.word	0x0000d1f3
    d198:	0000d1f3 	.word	0x0000d1f3
    d19c:	0000d1b1 	.word	0x0000d1b1
    d1a0:	0000d1f3 	.word	0x0000d1f3
    d1a4:	0000d1bf 	.word	0x0000d1bf
    d1a8:	0000d1f3 	.word	0x0000d1f3
    d1ac:	0000d1e9 	.word	0x0000d1e9
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    d1b0:	79fb      	ldrb	r3, [r7, #7]
    d1b2:	6839      	ldr	r1, [r7, #0]
    d1b4:	4618      	mov	r0, r3
    d1b6:	4b11      	ldr	r3, [pc, #68]	; (d1fc <usbdc_get_req+0x94>)
    d1b8:	4798      	blx	r3
    d1ba:	4603      	mov	r3, r0
    d1bc:	e01a      	b.n	d1f4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d1be:	4b10      	ldr	r3, [pc, #64]	; (d200 <usbdc_get_req+0x98>)
    d1c0:	695b      	ldr	r3, [r3, #20]
    d1c2:	4a0f      	ldr	r2, [pc, #60]	; (d200 <usbdc_get_req+0x98>)
    d1c4:	7ed2      	ldrb	r2, [r2, #27]
    d1c6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d1c8:	4b0d      	ldr	r3, [pc, #52]	; (d200 <usbdc_get_req+0x98>)
    d1ca:	6959      	ldr	r1, [r3, #20]
    d1cc:	79f8      	ldrb	r0, [r7, #7]
    d1ce:	2300      	movs	r3, #0
    d1d0:	2201      	movs	r2, #1
    d1d2:	4c0c      	ldr	r4, [pc, #48]	; (d204 <usbdc_get_req+0x9c>)
    d1d4:	47a0      	blx	r4
		return true;
    d1d6:	2301      	movs	r3, #1
    d1d8:	e00c      	b.n	d1f4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    d1da:	79fb      	ldrb	r3, [r7, #7]
    d1dc:	6839      	ldr	r1, [r7, #0]
    d1de:	4618      	mov	r0, r3
    d1e0:	4b09      	ldr	r3, [pc, #36]	; (d208 <usbdc_get_req+0xa0>)
    d1e2:	4798      	blx	r3
    d1e4:	4603      	mov	r3, r0
    d1e6:	e005      	b.n	d1f4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    d1e8:	6838      	ldr	r0, [r7, #0]
    d1ea:	4b08      	ldr	r3, [pc, #32]	; (d20c <usbdc_get_req+0xa4>)
    d1ec:	4798      	blx	r3
    d1ee:	4603      	mov	r3, r0
    d1f0:	e000      	b.n	d1f4 <usbdc_get_req+0x8c>
	default:
		return false;
    d1f2:	2300      	movs	r3, #0
	}
}
    d1f4:	4618      	mov	r0, r3
    d1f6:	370c      	adds	r7, #12
    d1f8:	46bd      	mov	sp, r7
    d1fa:	bd90      	pop	{r4, r7, pc}
    d1fc:	0000cff1 	.word	0x0000cff1
    d200:	20001320 	.word	0x20001320
    d204:	0000d915 	.word	0x0000d915
    d208:	0000d059 	.word	0x0000d059
    d20c:	0000d0d9 	.word	0x0000d0d9

0000d210 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d210:	b590      	push	{r4, r7, lr}
    d212:	b083      	sub	sp, #12
    d214:	af00      	add	r7, sp, #0
    d216:	4603      	mov	r3, r0
    d218:	6039      	str	r1, [r7, #0]
    d21a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d21c:	683b      	ldr	r3, [r7, #0]
    d21e:	781b      	ldrb	r3, [r3, #0]
    d220:	f003 031f 	and.w	r3, r3, #31
    d224:	2b02      	cmp	r3, #2
    d226:	d116      	bne.n	d256 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d228:	683b      	ldr	r3, [r7, #0]
    d22a:	88db      	ldrh	r3, [r3, #6]
    d22c:	b29b      	uxth	r3, r3
    d22e:	2b00      	cmp	r3, #0
    d230:	d001      	beq.n	d236 <usbdc_clear_ftr_req+0x26>
			return false;
    d232:	2300      	movs	r3, #0
    d234:	e010      	b.n	d258 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d236:	683b      	ldr	r3, [r7, #0]
    d238:	889b      	ldrh	r3, [r3, #4]
    d23a:	b29b      	uxth	r3, r3
    d23c:	b2db      	uxtb	r3, r3
    d23e:	2100      	movs	r1, #0
    d240:	4618      	mov	r0, r3
    d242:	4b07      	ldr	r3, [pc, #28]	; (d260 <usbdc_clear_ftr_req+0x50>)
    d244:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d246:	79f8      	ldrb	r0, [r7, #7]
    d248:	2301      	movs	r3, #1
    d24a:	2200      	movs	r2, #0
    d24c:	2100      	movs	r1, #0
    d24e:	4c05      	ldr	r4, [pc, #20]	; (d264 <usbdc_clear_ftr_req+0x54>)
    d250:	47a0      	blx	r4
		return true;
    d252:	2301      	movs	r3, #1
    d254:	e000      	b.n	d258 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d256:	2300      	movs	r3, #0
	}
}
    d258:	4618      	mov	r0, r3
    d25a:	370c      	adds	r7, #12
    d25c:	46bd      	mov	sp, r7
    d25e:	bd90      	pop	{r4, r7, pc}
    d260:	00004141 	.word	0x00004141
    d264:	0000d915 	.word	0x0000d915

0000d268 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d268:	b590      	push	{r4, r7, lr}
    d26a:	b083      	sub	sp, #12
    d26c:	af00      	add	r7, sp, #0
    d26e:	4603      	mov	r3, r0
    d270:	6039      	str	r1, [r7, #0]
    d272:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d274:	683b      	ldr	r3, [r7, #0]
    d276:	781b      	ldrb	r3, [r3, #0]
    d278:	f003 031f 	and.w	r3, r3, #31
    d27c:	2b02      	cmp	r3, #2
    d27e:	d116      	bne.n	d2ae <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d280:	683b      	ldr	r3, [r7, #0]
    d282:	88db      	ldrh	r3, [r3, #6]
    d284:	b29b      	uxth	r3, r3
    d286:	2b00      	cmp	r3, #0
    d288:	d001      	beq.n	d28e <usbdc_set_ftr_req+0x26>
			return false;
    d28a:	2300      	movs	r3, #0
    d28c:	e010      	b.n	d2b0 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d28e:	683b      	ldr	r3, [r7, #0]
    d290:	889b      	ldrh	r3, [r3, #4]
    d292:	b29b      	uxth	r3, r3
    d294:	b2db      	uxtb	r3, r3
    d296:	2101      	movs	r1, #1
    d298:	4618      	mov	r0, r3
    d29a:	4b07      	ldr	r3, [pc, #28]	; (d2b8 <usbdc_set_ftr_req+0x50>)
    d29c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d29e:	79f8      	ldrb	r0, [r7, #7]
    d2a0:	2301      	movs	r3, #1
    d2a2:	2200      	movs	r2, #0
    d2a4:	2100      	movs	r1, #0
    d2a6:	4c05      	ldr	r4, [pc, #20]	; (d2bc <usbdc_set_ftr_req+0x54>)
    d2a8:	47a0      	blx	r4
		return true;
    d2aa:	2301      	movs	r3, #1
    d2ac:	e000      	b.n	d2b0 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d2ae:	2300      	movs	r3, #0
	}
}
    d2b0:	4618      	mov	r0, r3
    d2b2:	370c      	adds	r7, #12
    d2b4:	46bd      	mov	sp, r7
    d2b6:	bd90      	pop	{r4, r7, pc}
    d2b8:	00004141 	.word	0x00004141
    d2bc:	0000d915 	.word	0x0000d915

0000d2c0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d2c0:	b580      	push	{r7, lr}
    d2c2:	b082      	sub	sp, #8
    d2c4:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d2c6:	4b0a      	ldr	r3, [pc, #40]	; (d2f0 <usbdc_unconfig+0x30>)
    d2c8:	691b      	ldr	r3, [r3, #16]
    d2ca:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d2cc:	e008      	b.n	d2e0 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d2ce:	687b      	ldr	r3, [r7, #4]
    d2d0:	685b      	ldr	r3, [r3, #4]
    d2d2:	2200      	movs	r2, #0
    d2d4:	2101      	movs	r1, #1
    d2d6:	6878      	ldr	r0, [r7, #4]
    d2d8:	4798      	blx	r3
		func = func->next;
    d2da:	687b      	ldr	r3, [r7, #4]
    d2dc:	681b      	ldr	r3, [r3, #0]
    d2de:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d2e0:	687b      	ldr	r3, [r7, #4]
    d2e2:	2b00      	cmp	r3, #0
    d2e4:	d1f3      	bne.n	d2ce <usbdc_unconfig+0xe>
	}
}
    d2e6:	bf00      	nop
    d2e8:	3708      	adds	r7, #8
    d2ea:	46bd      	mov	sp, r7
    d2ec:	bd80      	pop	{r7, pc}
    d2ee:	bf00      	nop
    d2f0:	20001320 	.word	0x20001320

0000d2f4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d2f4:	b580      	push	{r7, lr}
    d2f6:	b088      	sub	sp, #32
    d2f8:	af00      	add	r7, sp, #0
    d2fa:	4603      	mov	r3, r0
    d2fc:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d2fe:	2300      	movs	r3, #0
    d300:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d302:	23ff      	movs	r3, #255	; 0xff
    d304:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d306:	79fb      	ldrb	r3, [r7, #7]
    d308:	2b00      	cmp	r3, #0
    d30a:	d103      	bne.n	d314 <usbdc_set_config+0x20>
		usbdc_unconfig();
    d30c:	4b2e      	ldr	r3, [pc, #184]	; (d3c8 <usbdc_set_config+0xd4>)
    d30e:	4798      	blx	r3
		return true;
    d310:	2301      	movs	r3, #1
    d312:	e055      	b.n	d3c0 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d314:	69bb      	ldr	r3, [r7, #24]
    d316:	2b00      	cmp	r3, #0
    d318:	d10a      	bne.n	d330 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d31a:	4b2c      	ldr	r3, [pc, #176]	; (d3cc <usbdc_set_config+0xd8>)
    d31c:	681b      	ldr	r3, [r3, #0]
    d31e:	6818      	ldr	r0, [r3, #0]
    d320:	4b2a      	ldr	r3, [pc, #168]	; (d3cc <usbdc_set_config+0xd8>)
    d322:	681b      	ldr	r3, [r3, #0]
    d324:	685b      	ldr	r3, [r3, #4]
    d326:	79fa      	ldrb	r2, [r7, #7]
    d328:	4619      	mov	r1, r3
    d32a:	4b29      	ldr	r3, [pc, #164]	; (d3d0 <usbdc_set_config+0xdc>)
    d32c:	4798      	blx	r3
    d32e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d330:	69bb      	ldr	r3, [r7, #24]
    d332:	2b00      	cmp	r3, #0
    d334:	d101      	bne.n	d33a <usbdc_set_config+0x46>
		return false;
    d336:	2300      	movs	r3, #0
    d338:	e042      	b.n	d3c0 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d33a:	69b8      	ldr	r0, [r7, #24]
    d33c:	4b25      	ldr	r3, [pc, #148]	; (d3d4 <usbdc_set_config+0xe0>)
    d33e:	4798      	blx	r3
    d340:	4603      	mov	r3, r0
    d342:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d344:	8abb      	ldrh	r3, [r7, #20]
    d346:	69ba      	ldr	r2, [r7, #24]
    d348:	4413      	add	r3, r2
    d34a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d34c:	693b      	ldr	r3, [r7, #16]
    d34e:	2204      	movs	r2, #4
    d350:	4619      	mov	r1, r3
    d352:	69b8      	ldr	r0, [r7, #24]
    d354:	4b20      	ldr	r3, [pc, #128]	; (d3d8 <usbdc_set_config+0xe4>)
    d356:	4798      	blx	r3
    d358:	4603      	mov	r3, r0
    d35a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d35c:	e02c      	b.n	d3b8 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d35e:	68fb      	ldr	r3, [r7, #12]
    d360:	3302      	adds	r3, #2
    d362:	781b      	ldrb	r3, [r3, #0]
    d364:	7dfa      	ldrb	r2, [r7, #23]
    d366:	429a      	cmp	r2, r3
    d368:	d018      	beq.n	d39c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d36a:	68fb      	ldr	r3, [r7, #12]
    d36c:	789b      	ldrb	r3, [r3, #2]
    d36e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d370:	4b16      	ldr	r3, [pc, #88]	; (d3cc <usbdc_set_config+0xd8>)
    d372:	691b      	ldr	r3, [r3, #16]
    d374:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d376:	e00c      	b.n	d392 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d378:	69fb      	ldr	r3, [r7, #28]
    d37a:	685b      	ldr	r3, [r3, #4]
    d37c:	f107 020c 	add.w	r2, r7, #12
    d380:	2100      	movs	r1, #0
    d382:	69f8      	ldr	r0, [r7, #28]
    d384:	4798      	blx	r3
    d386:	4603      	mov	r3, r0
    d388:	2b00      	cmp	r3, #0
    d38a:	d006      	beq.n	d39a <usbdc_set_config+0xa6>
					func = func->next;
    d38c:	69fb      	ldr	r3, [r7, #28]
    d38e:	681b      	ldr	r3, [r3, #0]
    d390:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d392:	69fb      	ldr	r3, [r7, #28]
    d394:	2b00      	cmp	r3, #0
    d396:	d1ef      	bne.n	d378 <usbdc_set_config+0x84>
    d398:	e000      	b.n	d39c <usbdc_set_config+0xa8>
				} else {
					break;
    d39a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d39c:	68fb      	ldr	r3, [r7, #12]
    d39e:	4618      	mov	r0, r3
    d3a0:	4b0e      	ldr	r3, [pc, #56]	; (d3dc <usbdc_set_config+0xe8>)
    d3a2:	4798      	blx	r3
    d3a4:	4603      	mov	r3, r0
    d3a6:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d3a8:	68fb      	ldr	r3, [r7, #12]
    d3aa:	6939      	ldr	r1, [r7, #16]
    d3ac:	2204      	movs	r2, #4
    d3ae:	4618      	mov	r0, r3
    d3b0:	4b09      	ldr	r3, [pc, #36]	; (d3d8 <usbdc_set_config+0xe4>)
    d3b2:	4798      	blx	r3
    d3b4:	4603      	mov	r3, r0
    d3b6:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d3b8:	68fb      	ldr	r3, [r7, #12]
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	d1cf      	bne.n	d35e <usbdc_set_config+0x6a>
	}
	return true;
    d3be:	2301      	movs	r3, #1
}
    d3c0:	4618      	mov	r0, r3
    d3c2:	3720      	adds	r7, #32
    d3c4:	46bd      	mov	sp, r7
    d3c6:	bd80      	pop	{r7, pc}
    d3c8:	0000d2c1 	.word	0x0000d2c1
    d3cc:	20001320 	.word	0x20001320
    d3d0:	0000dc65 	.word	0x0000dc65
    d3d4:	0000ce11 	.word	0x0000ce11
    d3d8:	0000dba5 	.word	0x0000dba5
    d3dc:	0000cded 	.word	0x0000cded

0000d3e0 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d3e0:	b580      	push	{r7, lr}
    d3e2:	b082      	sub	sp, #8
    d3e4:	af00      	add	r7, sp, #0
    d3e6:	4603      	mov	r3, r0
    d3e8:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d3ea:	79fb      	ldrb	r3, [r7, #7]
    d3ec:	4618      	mov	r0, r3
    d3ee:	4b03      	ldr	r3, [pc, #12]	; (d3fc <usbdc_set_address+0x1c>)
    d3f0:	4798      	blx	r3
}
    d3f2:	bf00      	nop
    d3f4:	3708      	adds	r7, #8
    d3f6:	46bd      	mov	sp, r7
    d3f8:	bd80      	pop	{r7, pc}
    d3fa:	bf00      	nop
    d3fc:	00003d5d 	.word	0x00003d5d

0000d400 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d400:	b590      	push	{r4, r7, lr}
    d402:	b087      	sub	sp, #28
    d404:	af00      	add	r7, sp, #0
    d406:	4603      	mov	r3, r0
    d408:	460a      	mov	r2, r1
    d40a:	80fb      	strh	r3, [r7, #6]
    d40c:	4613      	mov	r3, r2
    d40e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d410:	2300      	movs	r3, #0
    d412:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d414:	693b      	ldr	r3, [r7, #16]
    d416:	2b00      	cmp	r3, #0
    d418:	d10b      	bne.n	d432 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d41a:	4b43      	ldr	r3, [pc, #268]	; (d528 <usbdc_set_interface+0x128>)
    d41c:	681b      	ldr	r3, [r3, #0]
    d41e:	6818      	ldr	r0, [r3, #0]
    d420:	4b41      	ldr	r3, [pc, #260]	; (d528 <usbdc_set_interface+0x128>)
    d422:	681b      	ldr	r3, [r3, #0]
    d424:	6859      	ldr	r1, [r3, #4]
    d426:	4b40      	ldr	r3, [pc, #256]	; (d528 <usbdc_set_interface+0x128>)
    d428:	7edb      	ldrb	r3, [r3, #27]
    d42a:	461a      	mov	r2, r3
    d42c:	4b3f      	ldr	r3, [pc, #252]	; (d52c <usbdc_set_interface+0x12c>)
    d42e:	4798      	blx	r3
    d430:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d432:	693b      	ldr	r3, [r7, #16]
    d434:	2b00      	cmp	r3, #0
    d436:	d101      	bne.n	d43c <usbdc_set_interface+0x3c>
		return false;
    d438:	2300      	movs	r3, #0
    d43a:	e071      	b.n	d520 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d43c:	693b      	ldr	r3, [r7, #16]
    d43e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d440:	6938      	ldr	r0, [r7, #16]
    d442:	4b3b      	ldr	r3, [pc, #236]	; (d530 <usbdc_set_interface+0x130>)
    d444:	4798      	blx	r3
    d446:	4603      	mov	r3, r0
    d448:	461a      	mov	r2, r3
    d44a:	693b      	ldr	r3, [r7, #16]
    d44c:	4413      	add	r3, r2
    d44e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d450:	68bb      	ldr	r3, [r7, #8]
    d452:	68f9      	ldr	r1, [r7, #12]
    d454:	2204      	movs	r2, #4
    d456:	4618      	mov	r0, r3
    d458:	4b36      	ldr	r3, [pc, #216]	; (d534 <usbdc_set_interface+0x134>)
    d45a:	4798      	blx	r3
    d45c:	6138      	str	r0, [r7, #16]
    d45e:	693b      	ldr	r3, [r7, #16]
    d460:	2b00      	cmp	r3, #0
    d462:	d113      	bne.n	d48c <usbdc_set_interface+0x8c>
		return false;
    d464:	2300      	movs	r3, #0
    d466:	e05b      	b.n	d520 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d468:	68bb      	ldr	r3, [r7, #8]
    d46a:	4618      	mov	r0, r3
    d46c:	4b32      	ldr	r3, [pc, #200]	; (d538 <usbdc_set_interface+0x138>)
    d46e:	4798      	blx	r3
    d470:	4603      	mov	r3, r0
    d472:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d474:	68bb      	ldr	r3, [r7, #8]
    d476:	68f9      	ldr	r1, [r7, #12]
    d478:	2204      	movs	r2, #4
    d47a:	4618      	mov	r0, r3
    d47c:	4b2d      	ldr	r3, [pc, #180]	; (d534 <usbdc_set_interface+0x134>)
    d47e:	4798      	blx	r3
    d480:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d482:	693b      	ldr	r3, [r7, #16]
    d484:	2b00      	cmp	r3, #0
    d486:	d101      	bne.n	d48c <usbdc_set_interface+0x8c>
			return false;
    d488:	2300      	movs	r3, #0
    d48a:	e049      	b.n	d520 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d48c:	693b      	ldr	r3, [r7, #16]
    d48e:	3302      	adds	r3, #2
    d490:	781b      	ldrb	r3, [r3, #0]
    d492:	b29b      	uxth	r3, r3
    d494:	88ba      	ldrh	r2, [r7, #4]
    d496:	429a      	cmp	r2, r3
    d498:	d1e6      	bne.n	d468 <usbdc_set_interface+0x68>
    d49a:	693b      	ldr	r3, [r7, #16]
    d49c:	3303      	adds	r3, #3
    d49e:	781b      	ldrb	r3, [r3, #0]
    d4a0:	b29b      	uxth	r3, r3
    d4a2:	88fa      	ldrh	r2, [r7, #6]
    d4a4:	429a      	cmp	r2, r3
    d4a6:	d1df      	bne.n	d468 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d4a8:	693b      	ldr	r3, [r7, #16]
    d4aa:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d4ac:	4b1e      	ldr	r3, [pc, #120]	; (d528 <usbdc_set_interface+0x128>)
    d4ae:	691b      	ldr	r3, [r3, #16]
    d4b0:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d4b2:	e031      	b.n	d518 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d4b4:	697b      	ldr	r3, [r7, #20]
    d4b6:	685b      	ldr	r3, [r3, #4]
    d4b8:	f107 0208 	add.w	r2, r7, #8
    d4bc:	2101      	movs	r1, #1
    d4be:	6978      	ldr	r0, [r7, #20]
    d4c0:	4798      	blx	r3
    d4c2:	4603      	mov	r3, r0
    d4c4:	2b00      	cmp	r3, #0
    d4c6:	d003      	beq.n	d4d0 <usbdc_set_interface+0xd0>
			func = func->next;
    d4c8:	697b      	ldr	r3, [r7, #20]
    d4ca:	681b      	ldr	r3, [r3, #0]
    d4cc:	617b      	str	r3, [r7, #20]
    d4ce:	e023      	b.n	d518 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d4d0:	697b      	ldr	r3, [r7, #20]
    d4d2:	685b      	ldr	r3, [r3, #4]
    d4d4:	f107 0208 	add.w	r2, r7, #8
    d4d8:	2100      	movs	r1, #0
    d4da:	6978      	ldr	r0, [r7, #20]
    d4dc:	4798      	blx	r3
    d4de:	4603      	mov	r3, r0
    d4e0:	2b00      	cmp	r3, #0
    d4e2:	d117      	bne.n	d514 <usbdc_set_interface+0x114>
			if (alt_set) {
    d4e4:	88fb      	ldrh	r3, [r7, #6]
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	d00c      	beq.n	d504 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d4ea:	4b0f      	ldr	r3, [pc, #60]	; (d528 <usbdc_set_interface+0x128>)
    d4ec:	7f5b      	ldrb	r3, [r3, #29]
    d4ee:	b25a      	sxtb	r2, r3
    d4f0:	88bb      	ldrh	r3, [r7, #4]
    d4f2:	2101      	movs	r1, #1
    d4f4:	fa01 f303 	lsl.w	r3, r1, r3
    d4f8:	b25b      	sxtb	r3, r3
    d4fa:	4313      	orrs	r3, r2
    d4fc:	b25b      	sxtb	r3, r3
    d4fe:	b2da      	uxtb	r2, r3
    d500:	4b09      	ldr	r3, [pc, #36]	; (d528 <usbdc_set_interface+0x128>)
    d502:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d504:	2300      	movs	r3, #0
    d506:	2200      	movs	r2, #0
    d508:	2100      	movs	r1, #0
    d50a:	2000      	movs	r0, #0
    d50c:	4c0b      	ldr	r4, [pc, #44]	; (d53c <usbdc_set_interface+0x13c>)
    d50e:	47a0      	blx	r4
			return true;
    d510:	2301      	movs	r3, #1
    d512:	e005      	b.n	d520 <usbdc_set_interface+0x120>
		} else {
			return false;
    d514:	2300      	movs	r3, #0
    d516:	e003      	b.n	d520 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d518:	697b      	ldr	r3, [r7, #20]
    d51a:	2b00      	cmp	r3, #0
    d51c:	d1ca      	bne.n	d4b4 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d51e:	2300      	movs	r3, #0
}
    d520:	4618      	mov	r0, r3
    d522:	371c      	adds	r7, #28
    d524:	46bd      	mov	sp, r7
    d526:	bd90      	pop	{r4, r7, pc}
    d528:	20001320 	.word	0x20001320
    d52c:	0000dc65 	.word	0x0000dc65
    d530:	0000ce11 	.word	0x0000ce11
    d534:	0000dba5 	.word	0x0000dba5
    d538:	0000cded 	.word	0x0000cded
    d53c:	0000d915 	.word	0x0000d915

0000d540 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d540:	b590      	push	{r4, r7, lr}
    d542:	b083      	sub	sp, #12
    d544:	af00      	add	r7, sp, #0
    d546:	4603      	mov	r3, r0
    d548:	6039      	str	r1, [r7, #0]
    d54a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d54c:	683b      	ldr	r3, [r7, #0]
    d54e:	785b      	ldrb	r3, [r3, #1]
    d550:	3b01      	subs	r3, #1
    d552:	2b0a      	cmp	r3, #10
    d554:	d85b      	bhi.n	d60e <usbdc_set_req+0xce>
    d556:	a201      	add	r2, pc, #4	; (adr r2, d55c <usbdc_set_req+0x1c>)
    d558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d55c:	0000d5db 	.word	0x0000d5db
    d560:	0000d60f 	.word	0x0000d60f
    d564:	0000d5e9 	.word	0x0000d5e9
    d568:	0000d60f 	.word	0x0000d60f
    d56c:	0000d589 	.word	0x0000d589
    d570:	0000d60f 	.word	0x0000d60f
    d574:	0000d60f 	.word	0x0000d60f
    d578:	0000d60f 	.word	0x0000d60f
    d57c:	0000d5a3 	.word	0x0000d5a3
    d580:	0000d60f 	.word	0x0000d60f
    d584:	0000d5f7 	.word	0x0000d5f7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d588:	79f8      	ldrb	r0, [r7, #7]
    d58a:	2301      	movs	r3, #1
    d58c:	2200      	movs	r2, #0
    d58e:	2100      	movs	r1, #0
    d590:	4c21      	ldr	r4, [pc, #132]	; (d618 <usbdc_set_req+0xd8>)
    d592:	47a0      	blx	r4
    d594:	4603      	mov	r3, r0
    d596:	2b00      	cmp	r3, #0
    d598:	bf0c      	ite	eq
    d59a:	2301      	moveq	r3, #1
    d59c:	2300      	movne	r3, #0
    d59e:	b2db      	uxtb	r3, r3
    d5a0:	e036      	b.n	d610 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d5a2:	683b      	ldr	r3, [r7, #0]
    d5a4:	885b      	ldrh	r3, [r3, #2]
    d5a6:	b29b      	uxth	r3, r3
    d5a8:	b2db      	uxtb	r3, r3
    d5aa:	4618      	mov	r0, r3
    d5ac:	4b1b      	ldr	r3, [pc, #108]	; (d61c <usbdc_set_req+0xdc>)
    d5ae:	4798      	blx	r3
    d5b0:	4603      	mov	r3, r0
    d5b2:	f083 0301 	eor.w	r3, r3, #1
    d5b6:	b2db      	uxtb	r3, r3
    d5b8:	2b00      	cmp	r3, #0
    d5ba:	d001      	beq.n	d5c0 <usbdc_set_req+0x80>
			return false;
    d5bc:	2300      	movs	r3, #0
    d5be:	e027      	b.n	d610 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d5c0:	79f8      	ldrb	r0, [r7, #7]
    d5c2:	2301      	movs	r3, #1
    d5c4:	2200      	movs	r2, #0
    d5c6:	2100      	movs	r1, #0
    d5c8:	4c13      	ldr	r4, [pc, #76]	; (d618 <usbdc_set_req+0xd8>)
    d5ca:	47a0      	blx	r4
    d5cc:	4603      	mov	r3, r0
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	bf0c      	ite	eq
    d5d2:	2301      	moveq	r3, #1
    d5d4:	2300      	movne	r3, #0
    d5d6:	b2db      	uxtb	r3, r3
    d5d8:	e01a      	b.n	d610 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d5da:	79fb      	ldrb	r3, [r7, #7]
    d5dc:	6839      	ldr	r1, [r7, #0]
    d5de:	4618      	mov	r0, r3
    d5e0:	4b0f      	ldr	r3, [pc, #60]	; (d620 <usbdc_set_req+0xe0>)
    d5e2:	4798      	blx	r3
    d5e4:	4603      	mov	r3, r0
    d5e6:	e013      	b.n	d610 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d5e8:	79fb      	ldrb	r3, [r7, #7]
    d5ea:	6839      	ldr	r1, [r7, #0]
    d5ec:	4618      	mov	r0, r3
    d5ee:	4b0d      	ldr	r3, [pc, #52]	; (d624 <usbdc_set_req+0xe4>)
    d5f0:	4798      	blx	r3
    d5f2:	4603      	mov	r3, r0
    d5f4:	e00c      	b.n	d610 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d5f6:	683b      	ldr	r3, [r7, #0]
    d5f8:	885b      	ldrh	r3, [r3, #2]
    d5fa:	b29a      	uxth	r2, r3
    d5fc:	683b      	ldr	r3, [r7, #0]
    d5fe:	889b      	ldrh	r3, [r3, #4]
    d600:	b29b      	uxth	r3, r3
    d602:	4619      	mov	r1, r3
    d604:	4610      	mov	r0, r2
    d606:	4b08      	ldr	r3, [pc, #32]	; (d628 <usbdc_set_req+0xe8>)
    d608:	4798      	blx	r3
    d60a:	4603      	mov	r3, r0
    d60c:	e000      	b.n	d610 <usbdc_set_req+0xd0>
	default:
		return false;
    d60e:	2300      	movs	r3, #0
	}
}
    d610:	4618      	mov	r0, r3
    d612:	370c      	adds	r7, #12
    d614:	46bd      	mov	sp, r7
    d616:	bd90      	pop	{r4, r7, pc}
    d618:	0000d915 	.word	0x0000d915
    d61c:	0000d2f5 	.word	0x0000d2f5
    d620:	0000d211 	.word	0x0000d211
    d624:	0000d269 	.word	0x0000d269
    d628:	0000d401 	.word	0x0000d401

0000d62c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d62c:	b580      	push	{r7, lr}
    d62e:	b082      	sub	sp, #8
    d630:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d632:	4b0a      	ldr	r3, [pc, #40]	; (d65c <usbdc_sof_notify+0x30>)
    d634:	685b      	ldr	r3, [r3, #4]
    d636:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d638:	e009      	b.n	d64e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d63a:	687b      	ldr	r3, [r7, #4]
    d63c:	685b      	ldr	r3, [r3, #4]
    d63e:	2b00      	cmp	r3, #0
    d640:	d002      	beq.n	d648 <usbdc_sof_notify+0x1c>
			sof->cb();
    d642:	687b      	ldr	r3, [r7, #4]
    d644:	685b      	ldr	r3, [r3, #4]
    d646:	4798      	blx	r3
		}
		sof = sof->next;
    d648:	687b      	ldr	r3, [r7, #4]
    d64a:	681b      	ldr	r3, [r3, #0]
    d64c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d64e:	687b      	ldr	r3, [r7, #4]
    d650:	2b00      	cmp	r3, #0
    d652:	d1f2      	bne.n	d63a <usbdc_sof_notify+0xe>
	}
}
    d654:	bf00      	nop
    d656:	3708      	adds	r7, #8
    d658:	46bd      	mov	sp, r7
    d65a:	bd80      	pop	{r7, pc}
    d65c:	20001320 	.word	0x20001320

0000d660 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d660:	b580      	push	{r7, lr}
    d662:	b084      	sub	sp, #16
    d664:	af00      	add	r7, sp, #0
    d666:	4603      	mov	r3, r0
    d668:	6039      	str	r1, [r7, #0]
    d66a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d66c:	4b0b      	ldr	r3, [pc, #44]	; (d69c <usbdc_change_notify+0x3c>)
    d66e:	68db      	ldr	r3, [r3, #12]
    d670:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d672:	e00c      	b.n	d68e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d674:	68fb      	ldr	r3, [r7, #12]
    d676:	685b      	ldr	r3, [r3, #4]
    d678:	2b00      	cmp	r3, #0
    d67a:	d005      	beq.n	d688 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d67c:	68fb      	ldr	r3, [r7, #12]
    d67e:	685b      	ldr	r3, [r3, #4]
    d680:	79fa      	ldrb	r2, [r7, #7]
    d682:	6839      	ldr	r1, [r7, #0]
    d684:	4610      	mov	r0, r2
    d686:	4798      	blx	r3
		}
		cg = cg->next;
    d688:	68fb      	ldr	r3, [r7, #12]
    d68a:	681b      	ldr	r3, [r3, #0]
    d68c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d68e:	68fb      	ldr	r3, [r7, #12]
    d690:	2b00      	cmp	r3, #0
    d692:	d1ef      	bne.n	d674 <usbdc_change_notify+0x14>
	}
}
    d694:	bf00      	nop
    d696:	3710      	adds	r7, #16
    d698:	46bd      	mov	sp, r7
    d69a:	bd80      	pop	{r7, pc}
    d69c:	20001320 	.word	0x20001320

0000d6a0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d6a0:	b580      	push	{r7, lr}
    d6a2:	b084      	sub	sp, #16
    d6a4:	af00      	add	r7, sp, #0
    d6a6:	4603      	mov	r3, r0
    d6a8:	6039      	str	r1, [r7, #0]
    d6aa:	71fb      	strb	r3, [r7, #7]
    d6ac:	4613      	mov	r3, r2
    d6ae:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d6b0:	4b12      	ldr	r3, [pc, #72]	; (d6fc <usbdc_request_handler+0x5c>)
    d6b2:	689b      	ldr	r3, [r3, #8]
    d6b4:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d6b6:	e019      	b.n	d6ec <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d6b8:	68fb      	ldr	r3, [r7, #12]
    d6ba:	685b      	ldr	r3, [r3, #4]
    d6bc:	2b00      	cmp	r3, #0
    d6be:	d012      	beq.n	d6e6 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d6c0:	68fb      	ldr	r3, [r7, #12]
    d6c2:	685b      	ldr	r3, [r3, #4]
    d6c4:	79ba      	ldrb	r2, [r7, #6]
    d6c6:	79f8      	ldrb	r0, [r7, #7]
    d6c8:	6839      	ldr	r1, [r7, #0]
    d6ca:	4798      	blx	r3
    d6cc:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d6ce:	68bb      	ldr	r3, [r7, #8]
    d6d0:	2b00      	cmp	r3, #0
    d6d2:	d101      	bne.n	d6d8 <usbdc_request_handler+0x38>
				return true;
    d6d4:	2301      	movs	r3, #1
    d6d6:	e00d      	b.n	d6f4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d6d8:	68bb      	ldr	r3, [r7, #8]
    d6da:	f113 0f0a 	cmn.w	r3, #10
    d6de:	d002      	beq.n	d6e6 <usbdc_request_handler+0x46>
				return -1;
    d6e0:	f04f 33ff 	mov.w	r3, #4294967295
    d6e4:	e006      	b.n	d6f4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d6e6:	68fb      	ldr	r3, [r7, #12]
    d6e8:	681b      	ldr	r3, [r3, #0]
    d6ea:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d6ec:	68fb      	ldr	r3, [r7, #12]
    d6ee:	2b00      	cmp	r3, #0
    d6f0:	d1e2      	bne.n	d6b8 <usbdc_request_handler+0x18>
	}
	return false;
    d6f2:	2300      	movs	r3, #0
}
    d6f4:	4618      	mov	r0, r3
    d6f6:	3710      	adds	r7, #16
    d6f8:	46bd      	mov	sp, r7
    d6fa:	bd80      	pop	{r7, pc}
    d6fc:	20001320 	.word	0x20001320

0000d700 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d700:	b580      	push	{r7, lr}
    d702:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d704:	4b01      	ldr	r3, [pc, #4]	; (d70c <usbd_sof_cb+0xc>)
    d706:	4798      	blx	r3
}
    d708:	bf00      	nop
    d70a:	bd80      	pop	{r7, pc}
    d70c:	0000d62d 	.word	0x0000d62d

0000d710 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d710:	b580      	push	{r7, lr}
    d712:	b082      	sub	sp, #8
    d714:	af00      	add	r7, sp, #0
    d716:	4603      	mov	r3, r0
    d718:	6039      	str	r1, [r7, #0]
    d71a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d71c:	79fb      	ldrb	r3, [r7, #7]
    d71e:	2200      	movs	r2, #0
    d720:	6839      	ldr	r1, [r7, #0]
    d722:	4618      	mov	r0, r3
    d724:	4b14      	ldr	r3, [pc, #80]	; (d778 <usbdc_cb_ctl_req+0x68>)
    d726:	4798      	blx	r3
    d728:	4603      	mov	r3, r0
    d72a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d72e:	d00b      	beq.n	d748 <usbdc_cb_ctl_req+0x38>
    d730:	2b01      	cmp	r3, #1
    d732:	d007      	beq.n	d744 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d734:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d736:	683b      	ldr	r3, [r7, #0]
    d738:	781b      	ldrb	r3, [r3, #0]
    d73a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d73e:	2b00      	cmp	r3, #0
    d740:	d007      	beq.n	d752 <usbdc_cb_ctl_req+0x42>
    d742:	e003      	b.n	d74c <usbdc_cb_ctl_req+0x3c>
		return true;
    d744:	2301      	movs	r3, #1
    d746:	e013      	b.n	d770 <usbdc_cb_ctl_req+0x60>
		return false;
    d748:	2300      	movs	r3, #0
    d74a:	e011      	b.n	d770 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d74c:	2b80      	cmp	r3, #128	; 0x80
    d74e:	d007      	beq.n	d760 <usbdc_cb_ctl_req+0x50>
    d750:	e00d      	b.n	d76e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d752:	79fb      	ldrb	r3, [r7, #7]
    d754:	6839      	ldr	r1, [r7, #0]
    d756:	4618      	mov	r0, r3
    d758:	4b08      	ldr	r3, [pc, #32]	; (d77c <usbdc_cb_ctl_req+0x6c>)
    d75a:	4798      	blx	r3
    d75c:	4603      	mov	r3, r0
    d75e:	e007      	b.n	d770 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d760:	79fb      	ldrb	r3, [r7, #7]
    d762:	6839      	ldr	r1, [r7, #0]
    d764:	4618      	mov	r0, r3
    d766:	4b06      	ldr	r3, [pc, #24]	; (d780 <usbdc_cb_ctl_req+0x70>)
    d768:	4798      	blx	r3
    d76a:	4603      	mov	r3, r0
    d76c:	e000      	b.n	d770 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d76e:	2300      	movs	r3, #0
	}
}
    d770:	4618      	mov	r0, r3
    d772:	3708      	adds	r7, #8
    d774:	46bd      	mov	sp, r7
    d776:	bd80      	pop	{r7, pc}
    d778:	0000d6a1 	.word	0x0000d6a1
    d77c:	0000d541 	.word	0x0000d541
    d780:	0000d169 	.word	0x0000d169

0000d784 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d784:	b580      	push	{r7, lr}
    d786:	b082      	sub	sp, #8
    d788:	af00      	add	r7, sp, #0
    d78a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d78c:	687b      	ldr	r3, [r7, #4]
    d78e:	781b      	ldrb	r3, [r3, #0]
    d790:	2b00      	cmp	r3, #0
    d792:	d135      	bne.n	d800 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d794:	687b      	ldr	r3, [r7, #4]
    d796:	785b      	ldrb	r3, [r3, #1]
    d798:	2b05      	cmp	r3, #5
    d79a:	d019      	beq.n	d7d0 <usbdc_ctrl_status_end+0x4c>
    d79c:	2b09      	cmp	r3, #9
    d79e:	d000      	beq.n	d7a2 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d7a0:	e02f      	b.n	d802 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d7a2:	687b      	ldr	r3, [r7, #4]
    d7a4:	885b      	ldrh	r3, [r3, #2]
    d7a6:	b29b      	uxth	r3, r3
    d7a8:	b2da      	uxtb	r2, r3
    d7aa:	4b17      	ldr	r3, [pc, #92]	; (d808 <usbdc_ctrl_status_end+0x84>)
    d7ac:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d7ae:	687b      	ldr	r3, [r7, #4]
    d7b0:	885b      	ldrh	r3, [r3, #2]
    d7b2:	b29b      	uxth	r3, r3
    d7b4:	2b00      	cmp	r3, #0
    d7b6:	d001      	beq.n	d7bc <usbdc_ctrl_status_end+0x38>
    d7b8:	2204      	movs	r2, #4
    d7ba:	e000      	b.n	d7be <usbdc_ctrl_status_end+0x3a>
    d7bc:	2203      	movs	r2, #3
    d7be:	4b12      	ldr	r3, [pc, #72]	; (d808 <usbdc_ctrl_status_end+0x84>)
    d7c0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d7c2:	4b11      	ldr	r3, [pc, #68]	; (d808 <usbdc_ctrl_status_end+0x84>)
    d7c4:	7e9b      	ldrb	r3, [r3, #26]
    d7c6:	4619      	mov	r1, r3
    d7c8:	2001      	movs	r0, #1
    d7ca:	4b10      	ldr	r3, [pc, #64]	; (d80c <usbdc_ctrl_status_end+0x88>)
    d7cc:	4798      	blx	r3
		break;
    d7ce:	e018      	b.n	d802 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d7d0:	687b      	ldr	r3, [r7, #4]
    d7d2:	885b      	ldrh	r3, [r3, #2]
    d7d4:	b29b      	uxth	r3, r3
    d7d6:	b2db      	uxtb	r3, r3
    d7d8:	4618      	mov	r0, r3
    d7da:	4b0d      	ldr	r3, [pc, #52]	; (d810 <usbdc_ctrl_status_end+0x8c>)
    d7dc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d7de:	687b      	ldr	r3, [r7, #4]
    d7e0:	885b      	ldrh	r3, [r3, #2]
    d7e2:	b29b      	uxth	r3, r3
    d7e4:	2b00      	cmp	r3, #0
    d7e6:	d001      	beq.n	d7ec <usbdc_ctrl_status_end+0x68>
    d7e8:	2203      	movs	r2, #3
    d7ea:	e000      	b.n	d7ee <usbdc_ctrl_status_end+0x6a>
    d7ec:	2202      	movs	r2, #2
    d7ee:	4b06      	ldr	r3, [pc, #24]	; (d808 <usbdc_ctrl_status_end+0x84>)
    d7f0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d7f2:	4b05      	ldr	r3, [pc, #20]	; (d808 <usbdc_ctrl_status_end+0x84>)
    d7f4:	7e9b      	ldrb	r3, [r3, #26]
    d7f6:	4619      	mov	r1, r3
    d7f8:	2001      	movs	r0, #1
    d7fa:	4b04      	ldr	r3, [pc, #16]	; (d80c <usbdc_ctrl_status_end+0x88>)
    d7fc:	4798      	blx	r3
		break;
    d7fe:	e000      	b.n	d802 <usbdc_ctrl_status_end+0x7e>
		return;
    d800:	bf00      	nop
	}
}
    d802:	3708      	adds	r7, #8
    d804:	46bd      	mov	sp, r7
    d806:	bd80      	pop	{r7, pc}
    d808:	20001320 	.word	0x20001320
    d80c:	0000d661 	.word	0x0000d661
    d810:	0000d3e1 	.word	0x0000d3e1

0000d814 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d814:	b580      	push	{r7, lr}
    d816:	b082      	sub	sp, #8
    d818:	af00      	add	r7, sp, #0
    d81a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d81c:	2201      	movs	r2, #1
    d81e:	6879      	ldr	r1, [r7, #4]
    d820:	2000      	movs	r0, #0
    d822:	4b03      	ldr	r3, [pc, #12]	; (d830 <usbdc_ctrl_data_end+0x1c>)
    d824:	4798      	blx	r3
	return false;
    d826:	2300      	movs	r3, #0
}
    d828:	4618      	mov	r0, r3
    d82a:	3708      	adds	r7, #8
    d82c:	46bd      	mov	sp, r7
    d82e:	bd80      	pop	{r7, pc}
    d830:	0000d6a1 	.word	0x0000d6a1

0000d834 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d834:	b580      	push	{r7, lr}
    d836:	b082      	sub	sp, #8
    d838:	af00      	add	r7, sp, #0
    d83a:	4603      	mov	r3, r0
    d83c:	603a      	str	r2, [r7, #0]
    d83e:	71fb      	strb	r3, [r7, #7]
    d840:	460b      	mov	r3, r1
    d842:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d844:	79bb      	ldrb	r3, [r7, #6]
    d846:	2b00      	cmp	r3, #0
    d848:	d002      	beq.n	d850 <usbdc_cb_ctl_done+0x1c>
    d84a:	2b01      	cmp	r3, #1
    d84c:	d004      	beq.n	d858 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d84e:	e008      	b.n	d862 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d850:	6838      	ldr	r0, [r7, #0]
    d852:	4b06      	ldr	r3, [pc, #24]	; (d86c <usbdc_cb_ctl_done+0x38>)
    d854:	4798      	blx	r3
		break;
    d856:	e004      	b.n	d862 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d858:	6838      	ldr	r0, [r7, #0]
    d85a:	4b05      	ldr	r3, [pc, #20]	; (d870 <usbdc_cb_ctl_done+0x3c>)
    d85c:	4798      	blx	r3
    d85e:	4603      	mov	r3, r0
    d860:	e000      	b.n	d864 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d862:	2300      	movs	r3, #0
}
    d864:	4618      	mov	r0, r3
    d866:	3708      	adds	r7, #8
    d868:	46bd      	mov	sp, r7
    d86a:	bd80      	pop	{r7, pc}
    d86c:	0000d785 	.word	0x0000d785
    d870:	0000d815 	.word	0x0000d815

0000d874 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d874:	b580      	push	{r7, lr}
    d876:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d878:	4b10      	ldr	r3, [pc, #64]	; (d8bc <usbdc_reset+0x48>)
    d87a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d87c:	4b10      	ldr	r3, [pc, #64]	; (d8c0 <usbdc_reset+0x4c>)
    d87e:	2202      	movs	r2, #2
    d880:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d882:	4b0f      	ldr	r3, [pc, #60]	; (d8c0 <usbdc_reset+0x4c>)
    d884:	2200      	movs	r2, #0
    d886:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d888:	4b0d      	ldr	r3, [pc, #52]	; (d8c0 <usbdc_reset+0x4c>)
    d88a:	2200      	movs	r2, #0
    d88c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d88e:	2000      	movs	r0, #0
    d890:	4b0c      	ldr	r3, [pc, #48]	; (d8c4 <usbdc_reset+0x50>)
    d892:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d894:	4b0a      	ldr	r3, [pc, #40]	; (d8c0 <usbdc_reset+0x4c>)
    d896:	7f1b      	ldrb	r3, [r3, #28]
    d898:	4618      	mov	r0, r3
    d89a:	4b0b      	ldr	r3, [pc, #44]	; (d8c8 <usbdc_reset+0x54>)
    d89c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d89e:	4a0b      	ldr	r2, [pc, #44]	; (d8cc <usbdc_reset+0x58>)
    d8a0:	2100      	movs	r1, #0
    d8a2:	2000      	movs	r0, #0
    d8a4:	4b0a      	ldr	r3, [pc, #40]	; (d8d0 <usbdc_reset+0x5c>)
    d8a6:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d8a8:	4a0a      	ldr	r2, [pc, #40]	; (d8d4 <usbdc_reset+0x60>)
    d8aa:	2102      	movs	r1, #2
    d8ac:	2000      	movs	r0, #0
    d8ae:	4b08      	ldr	r3, [pc, #32]	; (d8d0 <usbdc_reset+0x5c>)
    d8b0:	4798      	blx	r3
	usb_d_ep_enable(0);
    d8b2:	2000      	movs	r0, #0
    d8b4:	4b08      	ldr	r3, [pc, #32]	; (d8d8 <usbdc_reset+0x64>)
    d8b6:	4798      	blx	r3
}
    d8b8:	bf00      	nop
    d8ba:	bd80      	pop	{r7, pc}
    d8bc:	0000d2c1 	.word	0x0000d2c1
    d8c0:	20001320 	.word	0x20001320
    d8c4:	00003e41 	.word	0x00003e41
    d8c8:	00003d7d 	.word	0x00003d7d
    d8cc:	0000d711 	.word	0x0000d711
    d8d0:	00004195 	.word	0x00004195
    d8d4:	0000d835 	.word	0x0000d835
    d8d8:	00003e91 	.word	0x00003e91

0000d8dc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d8dc:	b580      	push	{r7, lr}
    d8de:	b082      	sub	sp, #8
    d8e0:	af00      	add	r7, sp, #0
    d8e2:	4603      	mov	r3, r0
    d8e4:	6039      	str	r1, [r7, #0]
    d8e6:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d8e8:	79fb      	ldrb	r3, [r7, #7]
    d8ea:	2b00      	cmp	r3, #0
    d8ec:	d002      	beq.n	d8f4 <usbd_event_cb+0x18>
    d8ee:	2b01      	cmp	r3, #1
    d8f0:	d005      	beq.n	d8fe <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d8f2:	e007      	b.n	d904 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d8f4:	6839      	ldr	r1, [r7, #0]
    d8f6:	2000      	movs	r0, #0
    d8f8:	4b04      	ldr	r3, [pc, #16]	; (d90c <usbd_event_cb+0x30>)
    d8fa:	4798      	blx	r3
		break;
    d8fc:	e002      	b.n	d904 <usbd_event_cb+0x28>
		usbdc_reset();
    d8fe:	4b04      	ldr	r3, [pc, #16]	; (d910 <usbd_event_cb+0x34>)
    d900:	4798      	blx	r3
		break;
    d902:	bf00      	nop
	}
}
    d904:	bf00      	nop
    d906:	3708      	adds	r7, #8
    d908:	46bd      	mov	sp, r7
    d90a:	bd80      	pop	{r7, pc}
    d90c:	0000d661 	.word	0x0000d661
    d910:	0000d875 	.word	0x0000d875

0000d914 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d914:	b580      	push	{r7, lr}
    d916:	b088      	sub	sp, #32
    d918:	af00      	add	r7, sp, #0
    d91a:	60b9      	str	r1, [r7, #8]
    d91c:	607a      	str	r2, [r7, #4]
    d91e:	461a      	mov	r2, r3
    d920:	4603      	mov	r3, r0
    d922:	73fb      	strb	r3, [r7, #15]
    d924:	4613      	mov	r3, r2
    d926:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d928:	68bb      	ldr	r3, [r7, #8]
    d92a:	617b      	str	r3, [r7, #20]
    d92c:	687b      	ldr	r3, [r7, #4]
    d92e:	61bb      	str	r3, [r7, #24]
    d930:	7bfb      	ldrb	r3, [r7, #15]
    d932:	773b      	strb	r3, [r7, #28]
    d934:	7bbb      	ldrb	r3, [r7, #14]
    d936:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d938:	f107 0314 	add.w	r3, r7, #20
    d93c:	4618      	mov	r0, r3
    d93e:	4b03      	ldr	r3, [pc, #12]	; (d94c <usbdc_xfer+0x38>)
    d940:	4798      	blx	r3
    d942:	4603      	mov	r3, r0
}
    d944:	4618      	mov	r0, r3
    d946:	3720      	adds	r7, #32
    d948:	46bd      	mov	sp, r7
    d94a:	bd80      	pop	{r7, pc}
    d94c:	00003f01 	.word	0x00003f01

0000d950 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d950:	b580      	push	{r7, lr}
    d952:	b082      	sub	sp, #8
    d954:	af00      	add	r7, sp, #0
    d956:	4603      	mov	r3, r0
    d958:	6039      	str	r1, [r7, #0]
    d95a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d95c:	79fb      	ldrb	r3, [r7, #7]
    d95e:	2b01      	cmp	r3, #1
    d960:	d009      	beq.n	d976 <usbdc_register_handler+0x26>
    d962:	2b02      	cmp	r3, #2
    d964:	d00c      	beq.n	d980 <usbdc_register_handler+0x30>
    d966:	2b00      	cmp	r3, #0
    d968:	d000      	beq.n	d96c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d96a:	e00e      	b.n	d98a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d96c:	6839      	ldr	r1, [r7, #0]
    d96e:	4809      	ldr	r0, [pc, #36]	; (d994 <usbdc_register_handler+0x44>)
    d970:	4b09      	ldr	r3, [pc, #36]	; (d998 <usbdc_register_handler+0x48>)
    d972:	4798      	blx	r3
		break;
    d974:	e009      	b.n	d98a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d976:	6839      	ldr	r1, [r7, #0]
    d978:	4808      	ldr	r0, [pc, #32]	; (d99c <usbdc_register_handler+0x4c>)
    d97a:	4b07      	ldr	r3, [pc, #28]	; (d998 <usbdc_register_handler+0x48>)
    d97c:	4798      	blx	r3
		break;
    d97e:	e004      	b.n	d98a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d980:	6839      	ldr	r1, [r7, #0]
    d982:	4807      	ldr	r0, [pc, #28]	; (d9a0 <usbdc_register_handler+0x50>)
    d984:	4b04      	ldr	r3, [pc, #16]	; (d998 <usbdc_register_handler+0x48>)
    d986:	4798      	blx	r3
		break;
    d988:	bf00      	nop
	}
}
    d98a:	bf00      	nop
    d98c:	3708      	adds	r7, #8
    d98e:	46bd      	mov	sp, r7
    d990:	bd80      	pop	{r7, pc}
    d992:	bf00      	nop
    d994:	20001324 	.word	0x20001324
    d998:	000042ed 	.word	0x000042ed
    d99c:	20001328 	.word	0x20001328
    d9a0:	2000132c 	.word	0x2000132c

0000d9a4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d9a4:	b580      	push	{r7, lr}
    d9a6:	b084      	sub	sp, #16
    d9a8:	af00      	add	r7, sp, #0
    d9aa:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d9ac:	687b      	ldr	r3, [r7, #4]
    d9ae:	2b00      	cmp	r3, #0
    d9b0:	bf14      	ite	ne
    d9b2:	2301      	movne	r3, #1
    d9b4:	2300      	moveq	r3, #0
    d9b6:	b2db      	uxtb	r3, r3
    d9b8:	f240 3255 	movw	r2, #853	; 0x355
    d9bc:	4910      	ldr	r1, [pc, #64]	; (da00 <usbdc_init+0x5c>)
    d9be:	4618      	mov	r0, r3
    d9c0:	4b10      	ldr	r3, [pc, #64]	; (da04 <usbdc_init+0x60>)
    d9c2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d9c4:	4b10      	ldr	r3, [pc, #64]	; (da08 <usbdc_init+0x64>)
    d9c6:	4798      	blx	r3
    d9c8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d9ca:	68fb      	ldr	r3, [r7, #12]
    d9cc:	2b00      	cmp	r3, #0
    d9ce:	da01      	bge.n	d9d4 <usbdc_init+0x30>
		return rc;
    d9d0:	68fb      	ldr	r3, [r7, #12]
    d9d2:	e010      	b.n	d9f6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d9d4:	2220      	movs	r2, #32
    d9d6:	2100      	movs	r1, #0
    d9d8:	480c      	ldr	r0, [pc, #48]	; (da0c <usbdc_init+0x68>)
    d9da:	4b0d      	ldr	r3, [pc, #52]	; (da10 <usbdc_init+0x6c>)
    d9dc:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d9de:	4a0b      	ldr	r2, [pc, #44]	; (da0c <usbdc_init+0x68>)
    d9e0:	687b      	ldr	r3, [r7, #4]
    d9e2:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d9e4:	490b      	ldr	r1, [pc, #44]	; (da14 <usbdc_init+0x70>)
    d9e6:	2000      	movs	r0, #0
    d9e8:	4b0b      	ldr	r3, [pc, #44]	; (da18 <usbdc_init+0x74>)
    d9ea:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d9ec:	490b      	ldr	r1, [pc, #44]	; (da1c <usbdc_init+0x78>)
    d9ee:	2001      	movs	r0, #1
    d9f0:	4b09      	ldr	r3, [pc, #36]	; (da18 <usbdc_init+0x74>)
    d9f2:	4798      	blx	r3

	return 0;
    d9f4:	2300      	movs	r3, #0
}
    d9f6:	4618      	mov	r0, r3
    d9f8:	3710      	adds	r7, #16
    d9fa:	46bd      	mov	sp, r7
    d9fc:	bd80      	pop	{r7, pc}
    d9fe:	bf00      	nop
    da00:	00014a40 	.word	0x00014a40
    da04:	00004211 	.word	0x00004211
    da08:	00003c69 	.word	0x00003c69
    da0c:	20001320 	.word	0x20001320
    da10:	00014391 	.word	0x00014391
    da14:	0000d701 	.word	0x0000d701
    da18:	00003d15 	.word	0x00003d15
    da1c:	0000d8dd 	.word	0x0000d8dd

0000da20 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    da20:	b580      	push	{r7, lr}
    da22:	b082      	sub	sp, #8
    da24:	af00      	add	r7, sp, #0
    da26:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    da28:	6879      	ldr	r1, [r7, #4]
    da2a:	4803      	ldr	r0, [pc, #12]	; (da38 <usbdc_register_function+0x18>)
    da2c:	4b03      	ldr	r3, [pc, #12]	; (da3c <usbdc_register_function+0x1c>)
    da2e:	4798      	blx	r3
}
    da30:	bf00      	nop
    da32:	3708      	adds	r7, #8
    da34:	46bd      	mov	sp, r7
    da36:	bd80      	pop	{r7, pc}
    da38:	20001330 	.word	0x20001330
    da3c:	000042ed 	.word	0x000042ed

0000da40 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    da40:	b580      	push	{r7, lr}
    da42:	b082      	sub	sp, #8
    da44:	af00      	add	r7, sp, #0
    da46:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    da48:	4b0f      	ldr	r3, [pc, #60]	; (da88 <usbdc_start+0x48>)
    da4a:	7e9b      	ldrb	r3, [r3, #26]
    da4c:	2b00      	cmp	r3, #0
    da4e:	d002      	beq.n	da56 <usbdc_start+0x16>
		return ERR_BUSY;
    da50:	f06f 0303 	mvn.w	r3, #3
    da54:	e013      	b.n	da7e <usbdc_start+0x3e>
	}

	if (desces) {
    da56:	687b      	ldr	r3, [r7, #4]
    da58:	2b00      	cmp	r3, #0
    da5a:	d00e      	beq.n	da7a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    da5c:	4a0a      	ldr	r2, [pc, #40]	; (da88 <usbdc_start+0x48>)
    da5e:	687b      	ldr	r3, [r7, #4]
    da60:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    da62:	687b      	ldr	r3, [r7, #4]
    da64:	681b      	ldr	r3, [r3, #0]
    da66:	79da      	ldrb	r2, [r3, #7]
    da68:	4b07      	ldr	r3, [pc, #28]	; (da88 <usbdc_start+0x48>)
    da6a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    da6c:	4b06      	ldr	r3, [pc, #24]	; (da88 <usbdc_start+0x48>)
    da6e:	2201      	movs	r2, #1
    da70:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    da72:	4b06      	ldr	r3, [pc, #24]	; (da8c <usbdc_start+0x4c>)
    da74:	4798      	blx	r3
	return ERR_NONE;
    da76:	2300      	movs	r3, #0
    da78:	e001      	b.n	da7e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    da7a:	f06f 0308 	mvn.w	r3, #8
}
    da7e:	4618      	mov	r0, r3
    da80:	3708      	adds	r7, #8
    da82:	46bd      	mov	sp, r7
    da84:	bd80      	pop	{r7, pc}
    da86:	bf00      	nop
    da88:	20001320 	.word	0x20001320
    da8c:	00003d39 	.word	0x00003d39

0000da90 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    da90:	b580      	push	{r7, lr}
    da92:	af00      	add	r7, sp, #0
	usb_d_attach();
    da94:	4b01      	ldr	r3, [pc, #4]	; (da9c <usbdc_attach+0xc>)
    da96:	4798      	blx	r3
}
    da98:	bf00      	nop
    da9a:	bd80      	pop	{r7, pc}
    da9c:	00003d4d 	.word	0x00003d4d

0000daa0 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    daa0:	b480      	push	{r7}
    daa2:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    daa4:	4b03      	ldr	r3, [pc, #12]	; (dab4 <usbdc_get_ctrl_buffer+0x14>)
    daa6:	695b      	ldr	r3, [r3, #20]
}
    daa8:	4618      	mov	r0, r3
    daaa:	46bd      	mov	sp, r7
    daac:	f85d 7b04 	ldr.w	r7, [sp], #4
    dab0:	4770      	bx	lr
    dab2:	bf00      	nop
    dab4:	20001320 	.word	0x20001320

0000dab8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    dab8:	b480      	push	{r7}
    daba:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    dabc:	4b07      	ldr	r3, [pc, #28]	; (dadc <usbdc_get_state+0x24>)
    dabe:	7e9b      	ldrb	r3, [r3, #26]
    dac0:	f003 0310 	and.w	r3, r3, #16
    dac4:	2b00      	cmp	r3, #0
    dac6:	d001      	beq.n	dacc <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    dac8:	2310      	movs	r3, #16
    daca:	e001      	b.n	dad0 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    dacc:	4b03      	ldr	r3, [pc, #12]	; (dadc <usbdc_get_state+0x24>)
    dace:	7e9b      	ldrb	r3, [r3, #26]
}
    dad0:	4618      	mov	r0, r3
    dad2:	46bd      	mov	sp, r7
    dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    dad8:	4770      	bx	lr
    dada:	bf00      	nop
    dadc:	20001320 	.word	0x20001320

0000dae0 <usb_get_u16>:
{
    dae0:	b480      	push	{r7}
    dae2:	b083      	sub	sp, #12
    dae4:	af00      	add	r7, sp, #0
    dae6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    dae8:	687b      	ldr	r3, [r7, #4]
    daea:	781b      	ldrb	r3, [r3, #0]
    daec:	b29a      	uxth	r2, r3
    daee:	687b      	ldr	r3, [r7, #4]
    daf0:	3301      	adds	r3, #1
    daf2:	781b      	ldrb	r3, [r3, #0]
    daf4:	b29b      	uxth	r3, r3
    daf6:	021b      	lsls	r3, r3, #8
    daf8:	b29b      	uxth	r3, r3
    dafa:	4413      	add	r3, r2
    dafc:	b29b      	uxth	r3, r3
}
    dafe:	4618      	mov	r0, r3
    db00:	370c      	adds	r7, #12
    db02:	46bd      	mov	sp, r7
    db04:	f85d 7b04 	ldr.w	r7, [sp], #4
    db08:	4770      	bx	lr

0000db0a <usb_desc_len>:
{
    db0a:	b480      	push	{r7}
    db0c:	b083      	sub	sp, #12
    db0e:	af00      	add	r7, sp, #0
    db10:	6078      	str	r0, [r7, #4]
	return desc[0];
    db12:	687b      	ldr	r3, [r7, #4]
    db14:	781b      	ldrb	r3, [r3, #0]
}
    db16:	4618      	mov	r0, r3
    db18:	370c      	adds	r7, #12
    db1a:	46bd      	mov	sp, r7
    db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    db20:	4770      	bx	lr

0000db22 <usb_desc_type>:
{
    db22:	b480      	push	{r7}
    db24:	b083      	sub	sp, #12
    db26:	af00      	add	r7, sp, #0
    db28:	6078      	str	r0, [r7, #4]
	return desc[1];
    db2a:	687b      	ldr	r3, [r7, #4]
    db2c:	3301      	adds	r3, #1
    db2e:	781b      	ldrb	r3, [r3, #0]
}
    db30:	4618      	mov	r0, r3
    db32:	370c      	adds	r7, #12
    db34:	46bd      	mov	sp, r7
    db36:	f85d 7b04 	ldr.w	r7, [sp], #4
    db3a:	4770      	bx	lr

0000db3c <usb_desc_next>:
{
    db3c:	b580      	push	{r7, lr}
    db3e:	b082      	sub	sp, #8
    db40:	af00      	add	r7, sp, #0
    db42:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    db44:	6878      	ldr	r0, [r7, #4]
    db46:	4b05      	ldr	r3, [pc, #20]	; (db5c <usb_desc_next+0x20>)
    db48:	4798      	blx	r3
    db4a:	4603      	mov	r3, r0
    db4c:	461a      	mov	r2, r3
    db4e:	687b      	ldr	r3, [r7, #4]
    db50:	4413      	add	r3, r2
}
    db52:	4618      	mov	r0, r3
    db54:	3708      	adds	r7, #8
    db56:	46bd      	mov	sp, r7
    db58:	bd80      	pop	{r7, pc}
    db5a:	bf00      	nop
    db5c:	0000db0b 	.word	0x0000db0b

0000db60 <usb_cfg_desc_total_len>:
{
    db60:	b580      	push	{r7, lr}
    db62:	b082      	sub	sp, #8
    db64:	af00      	add	r7, sp, #0
    db66:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    db68:	687b      	ldr	r3, [r7, #4]
    db6a:	3302      	adds	r3, #2
    db6c:	4618      	mov	r0, r3
    db6e:	4b03      	ldr	r3, [pc, #12]	; (db7c <usb_cfg_desc_total_len+0x1c>)
    db70:	4798      	blx	r3
    db72:	4603      	mov	r3, r0
}
    db74:	4618      	mov	r0, r3
    db76:	3708      	adds	r7, #8
    db78:	46bd      	mov	sp, r7
    db7a:	bd80      	pop	{r7, pc}
    db7c:	0000dae1 	.word	0x0000dae1

0000db80 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    db80:	b580      	push	{r7, lr}
    db82:	b082      	sub	sp, #8
    db84:	af00      	add	r7, sp, #0
    db86:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    db88:	6878      	ldr	r0, [r7, #4]
    db8a:	4b05      	ldr	r3, [pc, #20]	; (dba0 <usb_cfg_desc_next+0x20>)
    db8c:	4798      	blx	r3
    db8e:	4603      	mov	r3, r0
    db90:	461a      	mov	r2, r3
    db92:	687b      	ldr	r3, [r7, #4]
    db94:	4413      	add	r3, r2
}
    db96:	4618      	mov	r0, r3
    db98:	3708      	adds	r7, #8
    db9a:	46bd      	mov	sp, r7
    db9c:	bd80      	pop	{r7, pc}
    db9e:	bf00      	nop
    dba0:	0000db61 	.word	0x0000db61

0000dba4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    dba4:	b580      	push	{r7, lr}
    dba6:	b084      	sub	sp, #16
    dba8:	af00      	add	r7, sp, #0
    dbaa:	60f8      	str	r0, [r7, #12]
    dbac:	60b9      	str	r1, [r7, #8]
    dbae:	4613      	mov	r3, r2
    dbb0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    dbb2:	e015      	b.n	dbe0 <usb_find_desc+0x3c>
		_desc_len_check();
    dbb4:	68f8      	ldr	r0, [r7, #12]
    dbb6:	4b0f      	ldr	r3, [pc, #60]	; (dbf4 <usb_find_desc+0x50>)
    dbb8:	4798      	blx	r3
    dbba:	4603      	mov	r3, r0
    dbbc:	2b01      	cmp	r3, #1
    dbbe:	d801      	bhi.n	dbc4 <usb_find_desc+0x20>
    dbc0:	2300      	movs	r3, #0
    dbc2:	e012      	b.n	dbea <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    dbc4:	68f8      	ldr	r0, [r7, #12]
    dbc6:	4b0c      	ldr	r3, [pc, #48]	; (dbf8 <usb_find_desc+0x54>)
    dbc8:	4798      	blx	r3
    dbca:	4603      	mov	r3, r0
    dbcc:	461a      	mov	r2, r3
    dbce:	79fb      	ldrb	r3, [r7, #7]
    dbd0:	4293      	cmp	r3, r2
    dbd2:	d101      	bne.n	dbd8 <usb_find_desc+0x34>
			return desc;
    dbd4:	68fb      	ldr	r3, [r7, #12]
    dbd6:	e008      	b.n	dbea <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    dbd8:	68f8      	ldr	r0, [r7, #12]
    dbda:	4b08      	ldr	r3, [pc, #32]	; (dbfc <usb_find_desc+0x58>)
    dbdc:	4798      	blx	r3
    dbde:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    dbe0:	68fa      	ldr	r2, [r7, #12]
    dbe2:	68bb      	ldr	r3, [r7, #8]
    dbe4:	429a      	cmp	r2, r3
    dbe6:	d3e5      	bcc.n	dbb4 <usb_find_desc+0x10>
	}
	return NULL;
    dbe8:	2300      	movs	r3, #0
}
    dbea:	4618      	mov	r0, r3
    dbec:	3710      	adds	r7, #16
    dbee:	46bd      	mov	sp, r7
    dbf0:	bd80      	pop	{r7, pc}
    dbf2:	bf00      	nop
    dbf4:	0000db0b 	.word	0x0000db0b
    dbf8:	0000db23 	.word	0x0000db23
    dbfc:	0000db3d 	.word	0x0000db3d

0000dc00 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    dc00:	b580      	push	{r7, lr}
    dc02:	b082      	sub	sp, #8
    dc04:	af00      	add	r7, sp, #0
    dc06:	6078      	str	r0, [r7, #4]
    dc08:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    dc0a:	e019      	b.n	dc40 <usb_find_ep_desc+0x40>
		_desc_len_check();
    dc0c:	6878      	ldr	r0, [r7, #4]
    dc0e:	4b12      	ldr	r3, [pc, #72]	; (dc58 <usb_find_ep_desc+0x58>)
    dc10:	4798      	blx	r3
    dc12:	4603      	mov	r3, r0
    dc14:	2b01      	cmp	r3, #1
    dc16:	d801      	bhi.n	dc1c <usb_find_ep_desc+0x1c>
    dc18:	2300      	movs	r3, #0
    dc1a:	e018      	b.n	dc4e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    dc1c:	6878      	ldr	r0, [r7, #4]
    dc1e:	4b0f      	ldr	r3, [pc, #60]	; (dc5c <usb_find_ep_desc+0x5c>)
    dc20:	4798      	blx	r3
    dc22:	4603      	mov	r3, r0
    dc24:	2b04      	cmp	r3, #4
    dc26:	d010      	beq.n	dc4a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    dc28:	6878      	ldr	r0, [r7, #4]
    dc2a:	4b0c      	ldr	r3, [pc, #48]	; (dc5c <usb_find_ep_desc+0x5c>)
    dc2c:	4798      	blx	r3
    dc2e:	4603      	mov	r3, r0
    dc30:	2b05      	cmp	r3, #5
    dc32:	d101      	bne.n	dc38 <usb_find_ep_desc+0x38>
			return desc;
    dc34:	687b      	ldr	r3, [r7, #4]
    dc36:	e00a      	b.n	dc4e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    dc38:	6878      	ldr	r0, [r7, #4]
    dc3a:	4b09      	ldr	r3, [pc, #36]	; (dc60 <usb_find_ep_desc+0x60>)
    dc3c:	4798      	blx	r3
    dc3e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    dc40:	687a      	ldr	r2, [r7, #4]
    dc42:	683b      	ldr	r3, [r7, #0]
    dc44:	429a      	cmp	r2, r3
    dc46:	d3e1      	bcc.n	dc0c <usb_find_ep_desc+0xc>
    dc48:	e000      	b.n	dc4c <usb_find_ep_desc+0x4c>
			break;
    dc4a:	bf00      	nop
	}
	return NULL;
    dc4c:	2300      	movs	r3, #0
}
    dc4e:	4618      	mov	r0, r3
    dc50:	3708      	adds	r7, #8
    dc52:	46bd      	mov	sp, r7
    dc54:	bd80      	pop	{r7, pc}
    dc56:	bf00      	nop
    dc58:	0000db0b 	.word	0x0000db0b
    dc5c:	0000db23 	.word	0x0000db23
    dc60:	0000db3d 	.word	0x0000db3d

0000dc64 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    dc64:	b580      	push	{r7, lr}
    dc66:	b084      	sub	sp, #16
    dc68:	af00      	add	r7, sp, #0
    dc6a:	60f8      	str	r0, [r7, #12]
    dc6c:	60b9      	str	r1, [r7, #8]
    dc6e:	4613      	mov	r3, r2
    dc70:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    dc72:	2202      	movs	r2, #2
    dc74:	68b9      	ldr	r1, [r7, #8]
    dc76:	68f8      	ldr	r0, [r7, #12]
    dc78:	4b15      	ldr	r3, [pc, #84]	; (dcd0 <usb_find_cfg_desc+0x6c>)
    dc7a:	4798      	blx	r3
    dc7c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    dc7e:	68fb      	ldr	r3, [r7, #12]
    dc80:	2b00      	cmp	r3, #0
    dc82:	d11a      	bne.n	dcba <usb_find_cfg_desc+0x56>
		return NULL;
    dc84:	2300      	movs	r3, #0
    dc86:	e01f      	b.n	dcc8 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    dc88:	68f8      	ldr	r0, [r7, #12]
    dc8a:	4b12      	ldr	r3, [pc, #72]	; (dcd4 <usb_find_cfg_desc+0x70>)
    dc8c:	4798      	blx	r3
    dc8e:	4603      	mov	r3, r0
    dc90:	2b01      	cmp	r3, #1
    dc92:	d801      	bhi.n	dc98 <usb_find_cfg_desc+0x34>
    dc94:	2300      	movs	r3, #0
    dc96:	e017      	b.n	dcc8 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    dc98:	68fb      	ldr	r3, [r7, #12]
    dc9a:	3301      	adds	r3, #1
    dc9c:	781b      	ldrb	r3, [r3, #0]
    dc9e:	2b02      	cmp	r3, #2
    dca0:	d110      	bne.n	dcc4 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    dca2:	68fb      	ldr	r3, [r7, #12]
    dca4:	3305      	adds	r3, #5
    dca6:	781b      	ldrb	r3, [r3, #0]
    dca8:	79fa      	ldrb	r2, [r7, #7]
    dcaa:	429a      	cmp	r2, r3
    dcac:	d101      	bne.n	dcb2 <usb_find_cfg_desc+0x4e>
			return desc;
    dcae:	68fb      	ldr	r3, [r7, #12]
    dcb0:	e00a      	b.n	dcc8 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    dcb2:	68f8      	ldr	r0, [r7, #12]
    dcb4:	4b08      	ldr	r3, [pc, #32]	; (dcd8 <usb_find_cfg_desc+0x74>)
    dcb6:	4798      	blx	r3
    dcb8:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    dcba:	68fa      	ldr	r2, [r7, #12]
    dcbc:	68bb      	ldr	r3, [r7, #8]
    dcbe:	429a      	cmp	r2, r3
    dcc0:	d3e2      	bcc.n	dc88 <usb_find_cfg_desc+0x24>
    dcc2:	e000      	b.n	dcc6 <usb_find_cfg_desc+0x62>
			break;
    dcc4:	bf00      	nop
	}
	return NULL;
    dcc6:	2300      	movs	r3, #0
}
    dcc8:	4618      	mov	r0, r3
    dcca:	3710      	adds	r7, #16
    dccc:	46bd      	mov	sp, r7
    dcce:	bd80      	pop	{r7, pc}
    dcd0:	0000dba5 	.word	0x0000dba5
    dcd4:	0000db0b 	.word	0x0000db0b
    dcd8:	0000db81 	.word	0x0000db81

0000dcdc <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    dcdc:	b580      	push	{r7, lr}
    dcde:	b086      	sub	sp, #24
    dce0:	af00      	add	r7, sp, #0
    dce2:	60f8      	str	r0, [r7, #12]
    dce4:	60b9      	str	r1, [r7, #8]
    dce6:	4613      	mov	r3, r2
    dce8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    dcea:	2300      	movs	r3, #0
    dcec:	75fb      	strb	r3, [r7, #23]
    dcee:	e020      	b.n	dd32 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    dcf0:	2203      	movs	r2, #3
    dcf2:	68b9      	ldr	r1, [r7, #8]
    dcf4:	68f8      	ldr	r0, [r7, #12]
    dcf6:	4b13      	ldr	r3, [pc, #76]	; (dd44 <usb_find_str_desc+0x68>)
    dcf8:	4798      	blx	r3
    dcfa:	60f8      	str	r0, [r7, #12]
		if (desc) {
    dcfc:	68fb      	ldr	r3, [r7, #12]
    dcfe:	2b00      	cmp	r3, #0
    dd00:	d015      	beq.n	dd2e <usb_find_str_desc+0x52>
			_desc_len_check();
    dd02:	68f8      	ldr	r0, [r7, #12]
    dd04:	4b10      	ldr	r3, [pc, #64]	; (dd48 <usb_find_str_desc+0x6c>)
    dd06:	4798      	blx	r3
    dd08:	4603      	mov	r3, r0
    dd0a:	2b01      	cmp	r3, #1
    dd0c:	d801      	bhi.n	dd12 <usb_find_str_desc+0x36>
    dd0e:	2300      	movs	r3, #0
    dd10:	e014      	b.n	dd3c <usb_find_str_desc+0x60>
			if (i == str_index) {
    dd12:	7dfa      	ldrb	r2, [r7, #23]
    dd14:	79fb      	ldrb	r3, [r7, #7]
    dd16:	429a      	cmp	r2, r3
    dd18:	d101      	bne.n	dd1e <usb_find_str_desc+0x42>
				return desc;
    dd1a:	68fb      	ldr	r3, [r7, #12]
    dd1c:	e00e      	b.n	dd3c <usb_find_str_desc+0x60>
			}
			i++;
    dd1e:	7dfb      	ldrb	r3, [r7, #23]
    dd20:	3301      	adds	r3, #1
    dd22:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    dd24:	68f8      	ldr	r0, [r7, #12]
    dd26:	4b09      	ldr	r3, [pc, #36]	; (dd4c <usb_find_str_desc+0x70>)
    dd28:	4798      	blx	r3
    dd2a:	60f8      	str	r0, [r7, #12]
    dd2c:	e001      	b.n	dd32 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    dd2e:	2300      	movs	r3, #0
    dd30:	e004      	b.n	dd3c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    dd32:	68fa      	ldr	r2, [r7, #12]
    dd34:	68bb      	ldr	r3, [r7, #8]
    dd36:	429a      	cmp	r2, r3
    dd38:	d3da      	bcc.n	dcf0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    dd3a:	2300      	movs	r3, #0
}
    dd3c:	4618      	mov	r0, r3
    dd3e:	3718      	adds	r7, #24
    dd40:	46bd      	mov	sp, r7
    dd42:	bd80      	pop	{r7, pc}
    dd44:	0000dba5 	.word	0x0000dba5
    dd48:	0000db0b 	.word	0x0000db0b
    dd4c:	0000db3d 	.word	0x0000db3d

0000dd50 <_ZN15HEATERS_HANDLERD1Ev>:
HEATERS_HANDLER::HEATERS_HANDLER()
{
} //HEATERS_HANDLER

// default destructor
HEATERS_HANDLER::~HEATERS_HANDLER()
    dd50:	b510      	push	{r4, lr}
    dd52:	4604      	mov	r4, r0
    dd54:	4b01      	ldr	r3, [pc, #4]	; (dd5c <_ZN15HEATERS_HANDLERD1Ev+0xc>)
    dd56:	4798      	blx	r3
{
} //~HEATERS_HANDLER
    dd58:	4620      	mov	r0, r4
    dd5a:	bd10      	pop	{r4, pc}
    dd5c:	000119f5 	.word	0x000119f5

0000dd60 <__tcf_1>:
static	MCP23008_Class local_heater_expanders[NUMBER_OF_HEATERS*SINGLE_HEATER_EXPANDERS];
    dd60:	b570      	push	{r4, r5, r6, lr}
    dd62:	4c05      	ldr	r4, [pc, #20]	; (dd78 <__tcf_1+0x18>)
    dd64:	4e05      	ldr	r6, [pc, #20]	; (dd7c <__tcf_1+0x1c>)
    dd66:	f1a4 0570 	sub.w	r5, r4, #112	; 0x70
    dd6a:	3c1c      	subs	r4, #28
    dd6c:	4620      	mov	r0, r4
    dd6e:	47b0      	blx	r6
    dd70:	42ac      	cmp	r4, r5
    dd72:	d1fa      	bne.n	dd6a <__tcf_1+0xa>
    dd74:	bd70      	pop	{r4, r5, r6, pc}
    dd76:	bf00      	nop
    dd78:	200013b0 	.word	0x200013b0
    dd7c:	0000e08d 	.word	0x0000e08d

0000dd80 <__tcf_0>:
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
    dd80:	b510      	push	{r4, lr}
    dd82:	4803      	ldr	r0, [pc, #12]	; (dd90 <__tcf_0+0x10>)
    dd84:	4c03      	ldr	r4, [pc, #12]	; (dd94 <__tcf_0+0x14>)
    dd86:	47a0      	blx	r4
    dd88:	4803      	ldr	r0, [pc, #12]	; (dd98 <__tcf_0+0x18>)
    dd8a:	47a0      	blx	r4
    dd8c:	bd10      	pop	{r4, pc}
    dd8e:	bf00      	nop
    dd90:	200013d4 	.word	0x200013d4
    dd94:	000119f5 	.word	0x000119f5
    dd98:	200013b0 	.word	0x200013b0

0000dd9c <_ZN15HEATERS_HANDLER4InitEv>:

bool HEATERS_HANDLER::Init(void){
    dd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd9e:	4604      	mov	r4, r0

	//InitHeaterExpanders();

	heater_expanders=local_heater_expanders;
    dda0:	4b16      	ldr	r3, [pc, #88]	; (ddfc <_ZN15HEATERS_HANDLER4InitEv+0x60>)
    dda2:	6303      	str	r3, [r0, #48]	; 0x30
	for (uint8_t i = 0; i < NUMBER_OF_HEATERS; i++)
	{
		module[i]=&local_heaters[i];
    dda4:	3370      	adds	r3, #112	; 0x70
    dda6:	6243      	str	r3, [r0, #36]	; 0x24
		while (!module[i]->Init(i,heater_expanders))
    dda8:	4d15      	ldr	r5, [pc, #84]	; (de00 <_ZN15HEATERS_HANDLER4InitEv+0x64>)
		{
			delay_ms(200);
    ddaa:	4f16      	ldr	r7, [pc, #88]	; (de04 <_ZN15HEATERS_HANDLER4InitEv+0x68>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    ddac:	4e16      	ldr	r6, [pc, #88]	; (de08 <_ZN15HEATERS_HANDLER4InitEv+0x6c>)
		while (!module[i]->Init(i,heater_expanders))
    ddae:	6b22      	ldr	r2, [r4, #48]	; 0x30
    ddb0:	2100      	movs	r1, #0
    ddb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ddb4:	47a8      	blx	r5
    ddb6:	b930      	cbnz	r0, ddc6 <_ZN15HEATERS_HANDLER4InitEv+0x2a>
			delay_ms(200);
    ddb8:	20c8      	movs	r0, #200	; 0xc8
    ddba:	47b8      	blx	r7
    ddbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    ddc0:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
    ddc4:	e7f3      	b.n	ddae <_ZN15HEATERS_HANDLER4InitEv+0x12>
		module[i]=&local_heaters[i];
    ddc6:	4b11      	ldr	r3, [pc, #68]	; (de0c <_ZN15HEATERS_HANDLER4InitEv+0x70>)
    ddc8:	62a3      	str	r3, [r4, #40]	; 0x28
		while (!module[i]->Init(i,heater_expanders))
    ddca:	4d0d      	ldr	r5, [pc, #52]	; (de00 <_ZN15HEATERS_HANDLER4InitEv+0x64>)
			delay_ms(200);
    ddcc:	4f0d      	ldr	r7, [pc, #52]	; (de04 <_ZN15HEATERS_HANDLER4InitEv+0x68>)
    ddce:	4e0e      	ldr	r6, [pc, #56]	; (de08 <_ZN15HEATERS_HANDLER4InitEv+0x6c>)
		while (!module[i]->Init(i,heater_expanders))
    ddd0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    ddd2:	2101      	movs	r1, #1
    ddd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ddd6:	47a8      	blx	r5
    ddd8:	b930      	cbnz	r0, dde8 <_ZN15HEATERS_HANDLER4InitEv+0x4c>
			delay_ms(200);
    ddda:	20c8      	movs	r0, #200	; 0xc8
    dddc:	47b8      	blx	r7
    ddde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    dde2:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
    dde6:	e7f3      	b.n	ddd0 <_ZN15HEATERS_HANDLER4InitEv+0x34>
			
		}
	}

	
	isOK=(module[0]->isOK)&(module[1]->isOK);
    dde8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ddea:	781a      	ldrb	r2, [r3, #0]
    ddec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddee:	781b      	ldrb	r3, [r3, #0]
    ddf0:	4013      	ands	r3, r2
    ddf2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	return	isOK;
    ddf6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
	
}
    ddfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddfc:	20001340 	.word	0x20001340
    de00:	00011a09 	.word	0x00011a09
    de04:	00002bb5 	.word	0x00002bb5
    de08:	41008000 	.word	0x41008000
    de0c:	200013d4 	.word	0x200013d4

0000de10 <_ZN15HEATERS_HANDLER12ReadAllGPIOsEPh>:
			heater_expanders=&local_heater_expanders[2*i+j];
		}
	}
}

void	HEATERS_HANDLER::ReadAllGPIOs(uint8_t *buffer){
    de10:	b570      	push	{r4, r5, r6, lr}
    de12:	4605      	mov	r5, r0
    de14:	460e      	mov	r6, r1
	for (uint8_t i = 0; i < 2; i++)
	{
	//	heater_data_array[i]=local_heater_expanders[i].ReadGPIORegister();
		module[i]->ReadGPIOs(&buffer[i*2]);
    de16:	6a40      	ldr	r0, [r0, #36]	; 0x24
    de18:	4c02      	ldr	r4, [pc, #8]	; (de24 <_ZN15HEATERS_HANDLER12ReadAllGPIOsEPh+0x14>)
    de1a:	47a0      	blx	r4
    de1c:	1cb1      	adds	r1, r6, #2
    de1e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    de20:	47a0      	blx	r4
    de22:	bd70      	pop	{r4, r5, r6, pc}
    de24:	00011b95 	.word	0x00011b95

0000de28 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev>:
		//heater_data_array=buffer;
	}
	
}
    de28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    de2a:	4c18      	ldr	r4, [pc, #96]	; (de8c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x64>)
    de2c:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    de30:	4917      	ldr	r1, [pc, #92]	; (de90 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x68>)
    de32:	4628      	mov	r0, r5
    de34:	4b17      	ldr	r3, [pc, #92]	; (de94 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x6c>)
    de36:	4798      	blx	r3
    de38:	4e17      	ldr	r6, [pc, #92]	; (de98 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x70>)
    de3a:	4632      	mov	r2, r6
    de3c:	4917      	ldr	r1, [pc, #92]	; (de9c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x74>)
    de3e:	4628      	mov	r0, r5
    de40:	4d17      	ldr	r5, [pc, #92]	; (dea0 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x78>)
    de42:	47a8      	blx	r5
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
    de44:	f104 0070 	add.w	r0, r4, #112	; 0x70
    de48:	4f16      	ldr	r7, [pc, #88]	; (dea4 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x7c>)
    de4a:	47b8      	blx	r7
    de4c:	f104 0094 	add.w	r0, r4, #148	; 0x94
    de50:	47b8      	blx	r7
    de52:	4632      	mov	r2, r6
    de54:	4914      	ldr	r1, [pc, #80]	; (dea8 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x80>)
    de56:	2000      	movs	r0, #0
    de58:	47a8      	blx	r5
static	MCP23008_Class local_heater_expanders[NUMBER_OF_HEATERS*SINGLE_HEATER_EXPANDERS];
    de5a:	4620      	mov	r0, r4
    de5c:	4f13      	ldr	r7, [pc, #76]	; (deac <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x84>)
    de5e:	47b8      	blx	r7
    de60:	f104 001c 	add.w	r0, r4, #28
    de64:	47b8      	blx	r7
    de66:	f104 0038 	add.w	r0, r4, #56	; 0x38
    de6a:	47b8      	blx	r7
    de6c:	f104 0054 	add.w	r0, r4, #84	; 0x54
    de70:	47b8      	blx	r7
    de72:	4632      	mov	r2, r6
    de74:	490e      	ldr	r1, [pc, #56]	; (deb0 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x88>)
    de76:	2000      	movs	r0, #0
    de78:	47a8      	blx	r5
HEATERS_HANDLER::HEATERS_HANDLER()
    de7a:	34d0      	adds	r4, #208	; 0xd0
    de7c:	4620      	mov	r0, r4
    de7e:	4b0d      	ldr	r3, [pc, #52]	; (deb4 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x8c>)
    de80:	4798      	blx	r3
    de82:	4632      	mov	r2, r6
    de84:	490c      	ldr	r1, [pc, #48]	; (deb8 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x90>)
    de86:	4620      	mov	r0, r4
    de88:	47a8      	blx	r5
    de8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de8c:	20001340 	.word	0x20001340
    de90:	2000a2f0 	.word	0x2000a2f0
    de94:	0000debd 	.word	0x0000debd
    de98:	20000000 	.word	0x20000000
    de9c:	0000ded9 	.word	0x0000ded9
    dea0:	00013cdd 	.word	0x00013cdd
    dea4:	000119c5 	.word	0x000119c5
    dea8:	0000dd81 	.word	0x0000dd81
    deac:	0000e079 	.word	0x0000e079
    deb0:	0000dd61 	.word	0x0000dd61
    deb4:	000119c5 	.word	0x000119c5
    deb8:	0000dd51 	.word	0x0000dd51

0000debc <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    debc:	b480      	push	{r7}
    debe:	b083      	sub	sp, #12
    dec0:	af00      	add	r7, sp, #0
    dec2:	6078      	str	r0, [r7, #4]
    dec4:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    dec6:	687b      	ldr	r3, [r7, #4]
    dec8:	683a      	ldr	r2, [r7, #0]
    deca:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    decc:	687b      	ldr	r3, [r7, #4]
    dece:	4618      	mov	r0, r3
    ded0:	370c      	adds	r7, #12
    ded2:	46bd      	mov	sp, r7
    ded4:	bc80      	pop	{r7}
    ded6:	4770      	bx	lr

0000ded8 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    ded8:	b480      	push	{r7}
    deda:	b083      	sub	sp, #12
    dedc:	af00      	add	r7, sp, #0
    dede:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    dee0:	687b      	ldr	r3, [r7, #4]
    dee2:	4618      	mov	r0, r3
    dee4:	370c      	adds	r7, #12
    dee6:	46bd      	mov	sp, r7
    dee8:	bc80      	pop	{r7}
    deea:	4770      	bx	lr

0000deec <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    deec:	b580      	push	{r7, lr}
    deee:	b082      	sub	sp, #8
    def0:	af00      	add	r7, sp, #0
    def2:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    def4:	687b      	ldr	r3, [r7, #4]
    def6:	4a23      	ldr	r2, [pc, #140]	; (df84 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    def8:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    defa:	687b      	ldr	r3, [r7, #4]
    defc:	4a21      	ldr	r2, [pc, #132]	; (df84 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    defe:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    df00:	687b      	ldr	r3, [r7, #4]
    df02:	691a      	ldr	r2, [r3, #16]
    df04:	687b      	ldr	r3, [r7, #4]
    df06:	330c      	adds	r3, #12
    df08:	4619      	mov	r1, r3
    df0a:	4610      	mov	r0, r2
    df0c:	4b1e      	ldr	r3, [pc, #120]	; (df88 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    df0e:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    df10:	687b      	ldr	r3, [r7, #4]
    df12:	691b      	ldr	r3, [r3, #16]
    df14:	4618      	mov	r0, r3
    df16:	4b1d      	ldr	r3, [pc, #116]	; (df8c <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    df18:	4798      	blx	r3
    df1a:	4603      	mov	r3, r0
    df1c:	b2da      	uxtb	r2, r3
    df1e:	687b      	ldr	r3, [r7, #4]
    df20:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    df22:	687b      	ldr	r3, [r7, #4]
    df24:	7d1b      	ldrb	r3, [r3, #20]
    df26:	2b00      	cmp	r3, #0
    df28:	bf0c      	ite	eq
    df2a:	2301      	moveq	r3, #1
    df2c:	2300      	movne	r3, #0
    df2e:	b2da      	uxtb	r2, r3
    df30:	687b      	ldr	r3, [r7, #4]
    df32:	725a      	strb	r2, [r3, #9]
	if (isOK)
    df34:	687b      	ldr	r3, [r7, #4]
    df36:	7a5b      	ldrb	r3, [r3, #9]
    df38:	b2db      	uxtb	r3, r3
    df3a:	2b00      	cmp	r3, #0
    df3c:	d116      	bne.n	df6c <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    df3e:	687b      	ldr	r3, [r7, #4]
    df40:	691b      	ldr	r3, [r3, #16]
    df42:	4618      	mov	r0, r3
    df44:	4b12      	ldr	r3, [pc, #72]	; (df90 <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    df46:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    df48:	687b      	ldr	r3, [r7, #4]
    df4a:	691b      	ldr	r3, [r3, #16]
    df4c:	4618      	mov	r0, r3
    df4e:	4b0f      	ldr	r3, [pc, #60]	; (df8c <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    df50:	4798      	blx	r3
    df52:	4603      	mov	r3, r0
    df54:	b2da      	uxtb	r2, r3
    df56:	687b      	ldr	r3, [r7, #4]
    df58:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    df5a:	687b      	ldr	r3, [r7, #4]
    df5c:	7d1b      	ldrb	r3, [r3, #20]
    df5e:	2b00      	cmp	r3, #0
    df60:	bf0c      	ite	eq
    df62:	2301      	moveq	r3, #1
    df64:	2300      	movne	r3, #0
    df66:	b2da      	uxtb	r2, r3
    df68:	687b      	ldr	r3, [r7, #4]
    df6a:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    df6c:	687b      	ldr	r3, [r7, #4]
    df6e:	7a5b      	ldrb	r3, [r3, #9]
    df70:	b2da      	uxtb	r2, r3
    df72:	687b      	ldr	r3, [r7, #4]
    df74:	721a      	strb	r2, [r3, #8]
	return isOK;
    df76:	687b      	ldr	r3, [r7, #4]
    df78:	7a5b      	ldrb	r3, [r3, #9]
    df7a:	b2db      	uxtb	r3, r3
	
}
    df7c:	4618      	mov	r0, r3
    df7e:	3708      	adds	r7, #8
    df80:	46bd      	mov	sp, r7
    df82:	bd80      	pop	{r7, pc}
    df84:	20001460 	.word	0x20001460
    df88:	00002f9f 	.word	0x00002f9f
    df8c:	00002f25 	.word	0x00002f25
    df90:	00002f45 	.word	0x00002f45

0000df94 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    df94:	b580      	push	{r7, lr}
    df96:	b082      	sub	sp, #8
    df98:	af00      	add	r7, sp, #0
    df9a:	6078      	str	r0, [r7, #4]
    df9c:	460b      	mov	r3, r1
    df9e:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    dfa0:	687b      	ldr	r3, [r7, #4]
    dfa2:	691b      	ldr	r3, [r3, #16]
    dfa4:	78fa      	ldrb	r2, [r7, #3]
    dfa6:	b211      	sxth	r1, r2
    dfa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    dfac:	4618      	mov	r0, r3
    dfae:	4b03      	ldr	r3, [pc, #12]	; (dfbc <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    dfb0:	4798      	blx	r3
    dfb2:	4603      	mov	r3, r0
}
    dfb4:	4618      	mov	r0, r3
    dfb6:	3708      	adds	r7, #8
    dfb8:	46bd      	mov	sp, r7
    dfba:	bd80      	pop	{r7, pc}
    dfbc:	00002f65 	.word	0x00002f65

0000dfc0 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    dfc0:	b580      	push	{r7, lr}
    dfc2:	b086      	sub	sp, #24
    dfc4:	af00      	add	r7, sp, #0
    dfc6:	60f8      	str	r0, [r7, #12]
    dfc8:	60b9      	str	r1, [r7, #8]
    dfca:	4613      	mov	r3, r2
    dfcc:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    dfce:	68fb      	ldr	r3, [r7, #12]
    dfd0:	68db      	ldr	r3, [r3, #12]
    dfd2:	88fa      	ldrh	r2, [r7, #6]
    dfd4:	68b9      	ldr	r1, [r7, #8]
    dfd6:	4618      	mov	r0, r3
    dfd8:	4b03      	ldr	r3, [pc, #12]	; (dfe8 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    dfda:	4798      	blx	r3
    dfdc:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    dfde:	697b      	ldr	r3, [r7, #20]
}
    dfe0:	4618      	mov	r0, r3
    dfe2:	3718      	adds	r7, #24
    dfe4:	46bd      	mov	sp, r7
    dfe6:	bd80      	pop	{r7, pc}
    dfe8:	00012515 	.word	0x00012515

0000dfec <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    dfec:	b580      	push	{r7, lr}
    dfee:	b086      	sub	sp, #24
    dff0:	af00      	add	r7, sp, #0
    dff2:	60f8      	str	r0, [r7, #12]
    dff4:	60b9      	str	r1, [r7, #8]
    dff6:	4613      	mov	r3, r2
    dff8:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    dffa:	68fb      	ldr	r3, [r7, #12]
    dffc:	68db      	ldr	r3, [r3, #12]
    dffe:	88fa      	ldrh	r2, [r7, #6]
    e000:	68b9      	ldr	r1, [r7, #8]
    e002:	4618      	mov	r0, r3
    e004:	4b03      	ldr	r3, [pc, #12]	; (e014 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    e006:	4798      	blx	r3
    e008:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    e00a:	697b      	ldr	r3, [r7, #20]
}
    e00c:	4618      	mov	r0, r3
    e00e:	3718      	adds	r7, #24
    e010:	46bd      	mov	sp, r7
    e012:	bd80      	pop	{r7, pc}
    e014:	00012565 	.word	0x00012565

0000e018 <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    e018:	b580      	push	{r7, lr}
    e01a:	b082      	sub	sp, #8
    e01c:	af00      	add	r7, sp, #0
    e01e:	6078      	str	r0, [r7, #4]
    e020:	6039      	str	r1, [r7, #0]
    e022:	687b      	ldr	r3, [r7, #4]
    e024:	2b01      	cmp	r3, #1
    e026:	d10d      	bne.n	e044 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e028:	683b      	ldr	r3, [r7, #0]
    e02a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e02e:	4293      	cmp	r3, r2
    e030:	d108      	bne.n	e044 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    e032:	4906      	ldr	r1, [pc, #24]	; (e04c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e034:	4806      	ldr	r0, [pc, #24]	; (e050 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e036:	4b07      	ldr	r3, [pc, #28]	; (e054 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e038:	4798      	blx	r3
    e03a:	4a07      	ldr	r2, [pc, #28]	; (e058 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e03c:	4907      	ldr	r1, [pc, #28]	; (e05c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e03e:	4804      	ldr	r0, [pc, #16]	; (e050 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e040:	4b07      	ldr	r3, [pc, #28]	; (e060 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e042:	4798      	blx	r3
    e044:	bf00      	nop
    e046:	3708      	adds	r7, #8
    e048:	46bd      	mov	sp, r7
    e04a:	bd80      	pop	{r7, pc}
    e04c:	2000a2f0 	.word	0x2000a2f0
    e050:	20001448 	.word	0x20001448
    e054:	0000debd 	.word	0x0000debd
    e058:	20000000 	.word	0x20000000
    e05c:	0000ded9 	.word	0x0000ded9
    e060:	00013cdd 	.word	0x00013cdd

0000e064 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    e064:	b580      	push	{r7, lr}
    e066:	af00      	add	r7, sp, #0
    e068:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e06c:	2001      	movs	r0, #1
    e06e:	4b01      	ldr	r3, [pc, #4]	; (e074 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    e070:	4798      	blx	r3
    e072:	bd80      	pop	{r7, pc}
    e074:	0000e019 	.word	0x0000e019

0000e078 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    e078:	b480      	push	{r7}
    e07a:	b083      	sub	sp, #12
    e07c:	af00      	add	r7, sp, #0
    e07e:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    e080:	687b      	ldr	r3, [r7, #4]
    e082:	4618      	mov	r0, r3
    e084:	370c      	adds	r7, #12
    e086:	46bd      	mov	sp, r7
    e088:	bc80      	pop	{r7}
    e08a:	4770      	bx	lr

0000e08c <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    e08c:	b480      	push	{r7}
    e08e:	b083      	sub	sp, #12
    e090:	af00      	add	r7, sp, #0
    e092:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    e094:	687b      	ldr	r3, [r7, #4]
    e096:	4618      	mov	r0, r3
    e098:	370c      	adds	r7, #12
    e09a:	46bd      	mov	sp, r7
    e09c:	bc80      	pop	{r7}
    e09e:	4770      	bx	lr

0000e0a0 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    e0a0:	b480      	push	{r7}
    e0a2:	b085      	sub	sp, #20
    e0a4:	af00      	add	r7, sp, #0
    e0a6:	60f8      	str	r0, [r7, #12]
    e0a8:	460b      	mov	r3, r1
    e0aa:	607a      	str	r2, [r7, #4]
    e0ac:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    e0ae:	687b      	ldr	r3, [r7, #4]
    e0b0:	681a      	ldr	r2, [r3, #0]
    e0b2:	68fb      	ldr	r3, [r7, #12]
    e0b4:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    e0b6:	687b      	ldr	r3, [r7, #4]
    e0b8:	685a      	ldr	r2, [r3, #4]
    e0ba:	68fb      	ldr	r3, [r7, #12]
    e0bc:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    e0be:	68fb      	ldr	r3, [r7, #12]
    e0c0:	7afa      	ldrb	r2, [r7, #11]
    e0c2:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    e0c4:	68fb      	ldr	r3, [r7, #12]
    e0c6:	687a      	ldr	r2, [r7, #4]
    e0c8:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    e0ca:	68fb      	ldr	r3, [r7, #12]
    e0cc:	68db      	ldr	r3, [r3, #12]
    e0ce:	7a5b      	ldrb	r3, [r3, #9]
    e0d0:	b2da      	uxtb	r2, r3
    e0d2:	68fb      	ldr	r3, [r7, #12]
    e0d4:	719a      	strb	r2, [r3, #6]
	return isOK;
    e0d6:	68fb      	ldr	r3, [r7, #12]
    e0d8:	799b      	ldrb	r3, [r3, #6]
    e0da:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    e0dc:	4618      	mov	r0, r3
    e0de:	3714      	adds	r7, #20
    e0e0:	46bd      	mov	sp, r7
    e0e2:	bc80      	pop	{r7}
    e0e4:	4770      	bx	lr

0000e0e6 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    e0e6:	b480      	push	{r7}
    e0e8:	b083      	sub	sp, #12
    e0ea:	af00      	add	r7, sp, #0
    e0ec:	6078      	str	r0, [r7, #4]
    e0ee:	460b      	mov	r3, r1
    e0f0:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    e0f2:	78fb      	ldrb	r3, [r7, #3]
    e0f4:	f003 0307 	and.w	r3, r3, #7
    e0f8:	b2db      	uxtb	r3, r3
}
    e0fa:	4618      	mov	r0, r3
    e0fc:	370c      	adds	r7, #12
    e0fe:	46bd      	mov	sp, r7
    e100:	bc80      	pop	{r7}
    e102:	4770      	bx	lr

0000e104 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    e104:	b480      	push	{r7}
    e106:	b083      	sub	sp, #12
    e108:	af00      	add	r7, sp, #0
    e10a:	6078      	str	r0, [r7, #4]
    e10c:	4608      	mov	r0, r1
    e10e:	4611      	mov	r1, r2
    e110:	461a      	mov	r2, r3
    e112:	4603      	mov	r3, r0
    e114:	70fb      	strb	r3, [r7, #3]
    e116:	460b      	mov	r3, r1
    e118:	70bb      	strb	r3, [r7, #2]
    e11a:	4613      	mov	r3, r2
    e11c:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    e11e:	78fb      	ldrb	r3, [r7, #3]
    e120:	2b07      	cmp	r3, #7
    e122:	dc01      	bgt.n	e128 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    e124:	78bb      	ldrb	r3, [r7, #2]
    e126:	e000      	b.n	e12a <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    e128:	787b      	ldrb	r3, [r7, #1]
}
    e12a:	4618      	mov	r0, r3
    e12c:	370c      	adds	r7, #12
    e12e:	46bd      	mov	sp, r7
    e130:	bc80      	pop	{r7}
    e132:	4770      	bx	lr

0000e134 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    e134:	b580      	push	{r7, lr}
    e136:	b082      	sub	sp, #8
    e138:	af00      	add	r7, sp, #0
    e13a:	6078      	str	r0, [r7, #4]
    e13c:	460b      	mov	r3, r1
    e13e:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	68da      	ldr	r2, [r3, #12]
    e144:	687b      	ldr	r3, [r7, #4]
    e146:	7a1b      	ldrb	r3, [r3, #8]
    e148:	4619      	mov	r1, r3
    e14a:	4610      	mov	r0, r2
    e14c:	4b0a      	ldr	r3, [pc, #40]	; (e178 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    e14e:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    e150:	687b      	ldr	r3, [r7, #4]
    e152:	68db      	ldr	r3, [r3, #12]
    e154:	1cf9      	adds	r1, r7, #3
    e156:	2201      	movs	r2, #1
    e158:	4618      	mov	r0, r3
    e15a:	4b08      	ldr	r3, [pc, #32]	; (e17c <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    e15c:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    e15e:	687b      	ldr	r3, [r7, #4]
    e160:	68db      	ldr	r3, [r3, #12]
    e162:	6879      	ldr	r1, [r7, #4]
    e164:	2201      	movs	r2, #1
    e166:	4618      	mov	r0, r3
    e168:	4b05      	ldr	r3, [pc, #20]	; (e180 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    e16a:	4798      	blx	r3

	return registerValue;
    e16c:	687b      	ldr	r3, [r7, #4]
    e16e:	781b      	ldrb	r3, [r3, #0]
}
    e170:	4618      	mov	r0, r3
    e172:	3708      	adds	r7, #8
    e174:	46bd      	mov	sp, r7
    e176:	bd80      	pop	{r7, pc}
    e178:	0000df95 	.word	0x0000df95
    e17c:	0000dfc1 	.word	0x0000dfc1
    e180:	0000dfed 	.word	0x0000dfed

0000e184 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    e184:	b580      	push	{r7, lr}
    e186:	b084      	sub	sp, #16
    e188:	af00      	add	r7, sp, #0
    e18a:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    e18c:	687b      	ldr	r3, [r7, #4]
    e18e:	68da      	ldr	r2, [r3, #12]
    e190:	687b      	ldr	r3, [r7, #4]
    e192:	7a1b      	ldrb	r3, [r3, #8]
    e194:	4619      	mov	r1, r3
    e196:	4610      	mov	r0, r2
    e198:	4b06      	ldr	r3, [pc, #24]	; (e1b4 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    e19a:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    e19c:	2109      	movs	r1, #9
    e19e:	6878      	ldr	r0, [r7, #4]
    e1a0:	4b05      	ldr	r3, [pc, #20]	; (e1b8 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    e1a2:	4798      	blx	r3
    e1a4:	4603      	mov	r3, r0
    e1a6:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    e1a8:	7bfb      	ldrb	r3, [r7, #15]
}
    e1aa:	4618      	mov	r0, r3
    e1ac:	3710      	adds	r7, #16
    e1ae:	46bd      	mov	sp, r7
    e1b0:	bd80      	pop	{r7, pc}
    e1b2:	bf00      	nop
    e1b4:	0000df95 	.word	0x0000df95
    e1b8:	0000e135 	.word	0x0000e135

0000e1bc <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    e1bc:	b580      	push	{r7, lr}
    e1be:	b084      	sub	sp, #16
    e1c0:	af00      	add	r7, sp, #0
    e1c2:	6078      	str	r0, [r7, #4]
    e1c4:	460b      	mov	r3, r1
    e1c6:	70fb      	strb	r3, [r7, #3]
    e1c8:	4613      	mov	r3, r2
    e1ca:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    e1cc:	687b      	ldr	r3, [r7, #4]
    e1ce:	68da      	ldr	r2, [r3, #12]
    e1d0:	687b      	ldr	r3, [r7, #4]
    e1d2:	7a1b      	ldrb	r3, [r3, #8]
    e1d4:	4619      	mov	r1, r3
    e1d6:	4610      	mov	r0, r2
    e1d8:	4b09      	ldr	r3, [pc, #36]	; (e200 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    e1da:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    e1dc:	78fb      	ldrb	r3, [r7, #3]
    e1de:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    e1e0:	78bb      	ldrb	r3, [r7, #2]
    e1e2:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    e1e4:	687b      	ldr	r3, [r7, #4]
    e1e6:	68db      	ldr	r3, [r3, #12]
    e1e8:	f107 010c 	add.w	r1, r7, #12
    e1ec:	2202      	movs	r2, #2
    e1ee:	4618      	mov	r0, r3
    e1f0:	4b04      	ldr	r3, [pc, #16]	; (e204 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    e1f2:	4798      	blx	r3
    e1f4:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    e1f6:	4618      	mov	r0, r3
    e1f8:	3710      	adds	r7, #16
    e1fa:	46bd      	mov	sp, r7
    e1fc:	bd80      	pop	{r7, pc}
    e1fe:	bf00      	nop
    e200:	0000df95 	.word	0x0000df95
    e204:	0000dfc1 	.word	0x0000dfc1

0000e208 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    e208:	b580      	push	{r7, lr}
    e20a:	b082      	sub	sp, #8
    e20c:	af00      	add	r7, sp, #0
    e20e:	6078      	str	r0, [r7, #4]
    e210:	460b      	mov	r3, r1
    e212:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    e214:	687b      	ldr	r3, [r7, #4]
    e216:	68da      	ldr	r2, [r3, #12]
    e218:	687b      	ldr	r3, [r7, #4]
    e21a:	7a1b      	ldrb	r3, [r3, #8]
    e21c:	4619      	mov	r1, r3
    e21e:	4610      	mov	r0, r2
    e220:	4b06      	ldr	r3, [pc, #24]	; (e23c <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    e222:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    e224:	78fb      	ldrb	r3, [r7, #3]
    e226:	461a      	mov	r2, r3
    e228:	2109      	movs	r1, #9
    e22a:	6878      	ldr	r0, [r7, #4]
    e22c:	4b04      	ldr	r3, [pc, #16]	; (e240 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    e22e:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
    e230:	78fb      	ldrb	r3, [r7, #3]
}
    e232:	4618      	mov	r0, r3
    e234:	3708      	adds	r7, #8
    e236:	46bd      	mov	sp, r7
    e238:	bd80      	pop	{r7, pc}
    e23a:	bf00      	nop
    e23c:	0000df95 	.word	0x0000df95
    e240:	0000e1bd 	.word	0x0000e1bd

0000e244 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    e244:	b580      	push	{r7, lr}
    e246:	b084      	sub	sp, #16
    e248:	af00      	add	r7, sp, #0
    e24a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e24c:	2300      	movs	r3, #0
    e24e:	73fb      	strb	r3, [r7, #15]
    e250:	7bfb      	ldrb	r3, [r7, #15]
    e252:	2b07      	cmp	r3, #7
    e254:	dc0f      	bgt.n	e276 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    e256:	7bfb      	ldrb	r3, [r7, #15]
    e258:	2201      	movs	r2, #1
    e25a:	4619      	mov	r1, r3
    e25c:	6878      	ldr	r0, [r7, #4]
    e25e:	4b08      	ldr	r3, [pc, #32]	; (e280 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    e260:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    e262:	7bfb      	ldrb	r3, [r7, #15]
    e264:	2201      	movs	r2, #1
    e266:	4619      	mov	r1, r3
    e268:	6878      	ldr	r0, [r7, #4]
    e26a:	4b06      	ldr	r3, [pc, #24]	; (e284 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    e26c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e26e:	7bfb      	ldrb	r3, [r7, #15]
    e270:	3301      	adds	r3, #1
    e272:	73fb      	strb	r3, [r7, #15]
    e274:	e7ec      	b.n	e250 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    e276:	bf00      	nop
    e278:	3710      	adds	r7, #16
    e27a:	46bd      	mov	sp, r7
    e27c:	bd80      	pop	{r7, pc}
    e27e:	bf00      	nop
    e280:	0000e405 	.word	0x0000e405
    e284:	0000e4e9 	.word	0x0000e4e9

0000e288 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    e288:	b580      	push	{r7, lr}
    e28a:	b084      	sub	sp, #16
    e28c:	af00      	add	r7, sp, #0
    e28e:	6078      	str	r0, [r7, #4]
    e290:	460b      	mov	r3, r1
    e292:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    e294:	78fb      	ldrb	r3, [r7, #3]
    e296:	2b00      	cmp	r3, #0
    e298:	dd23      	ble.n	e2e2 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    e29a:	2300      	movs	r3, #0
    e29c:	73fb      	strb	r3, [r7, #15]
    e29e:	7bfb      	ldrb	r3, [r7, #15]
    e2a0:	2b07      	cmp	r3, #7
    e2a2:	dc21      	bgt.n	e2e8 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    e2a4:	78fa      	ldrb	r2, [r7, #3]
    e2a6:	7bfb      	ldrb	r3, [r7, #15]
    e2a8:	fa42 f303 	asr.w	r3, r2, r3
    e2ac:	f003 0301 	and.w	r3, r3, #1
    e2b0:	2b00      	cmp	r3, #0
    e2b2:	d00c      	beq.n	e2ce <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    e2b4:	7bfb      	ldrb	r3, [r7, #15]
    e2b6:	2201      	movs	r2, #1
    e2b8:	4619      	mov	r1, r3
    e2ba:	6878      	ldr	r0, [r7, #4]
    e2bc:	4b0c      	ldr	r3, [pc, #48]	; (e2f0 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    e2be:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    e2c0:	7bfb      	ldrb	r3, [r7, #15]
    e2c2:	2201      	movs	r2, #1
    e2c4:	4619      	mov	r1, r3
    e2c6:	6878      	ldr	r0, [r7, #4]
    e2c8:	4b0a      	ldr	r3, [pc, #40]	; (e2f4 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    e2ca:	4798      	blx	r3
    e2cc:	e005      	b.n	e2da <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    e2ce:	7bfb      	ldrb	r3, [r7, #15]
    e2d0:	2200      	movs	r2, #0
    e2d2:	4619      	mov	r1, r3
    e2d4:	6878      	ldr	r0, [r7, #4]
    e2d6:	4b06      	ldr	r3, [pc, #24]	; (e2f0 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    e2d8:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    e2da:	7bfb      	ldrb	r3, [r7, #15]
    e2dc:	3301      	adds	r3, #1
    e2de:	73fb      	strb	r3, [r7, #15]
    e2e0:	e7dd      	b.n	e29e <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    e2e2:	6878      	ldr	r0, [r7, #4]
    e2e4:	4b04      	ldr	r3, [pc, #16]	; (e2f8 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    e2e6:	4798      	blx	r3
	}
	
}
    e2e8:	bf00      	nop
    e2ea:	3710      	adds	r7, #16
    e2ec:	46bd      	mov	sp, r7
    e2ee:	bd80      	pop	{r7, pc}
    e2f0:	0000e405 	.word	0x0000e405
    e2f4:	0000e4e9 	.word	0x0000e4e9
    e2f8:	0000e2fd 	.word	0x0000e2fd

0000e2fc <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    e2fc:	b580      	push	{r7, lr}
    e2fe:	b084      	sub	sp, #16
    e300:	af00      	add	r7, sp, #0
    e302:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e304:	2300      	movs	r3, #0
    e306:	73fb      	strb	r3, [r7, #15]
    e308:	7bfb      	ldrb	r3, [r7, #15]
    e30a:	2b07      	cmp	r3, #7
    e30c:	dc09      	bgt.n	e322 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    e30e:	7bfb      	ldrb	r3, [r7, #15]
    e310:	2200      	movs	r2, #0
    e312:	4619      	mov	r1, r3
    e314:	6878      	ldr	r0, [r7, #4]
    e316:	4b05      	ldr	r3, [pc, #20]	; (e32c <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    e318:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e31a:	7bfb      	ldrb	r3, [r7, #15]
    e31c:	3301      	adds	r3, #1
    e31e:	73fb      	strb	r3, [r7, #15]
    e320:	e7f2      	b.n	e308 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    e322:	bf00      	nop
    e324:	3710      	adds	r7, #16
    e326:	46bd      	mov	sp, r7
    e328:	bd80      	pop	{r7, pc}
    e32a:	bf00      	nop
    e32c:	0000e405 	.word	0x0000e405

0000e330 <_ZN14MCP23008_Class13SetPortOutputEh>:
void	MCP23008_Class::SetPortOutput(uint8_t out){
    e330:	b580      	push	{r7, lr}
    e332:	b084      	sub	sp, #16
    e334:	af00      	add	r7, sp, #0
    e336:	6078      	str	r0, [r7, #4]
    e338:	460b      	mov	r3, r1
    e33a:	70fb      	strb	r3, [r7, #3]
	
	for (uint8_t i=0;i<8;i++)
    e33c:	2300      	movs	r3, #0
    e33e:	73fb      	strb	r3, [r7, #15]
    e340:	7bfb      	ldrb	r3, [r7, #15]
    e342:	2b07      	cmp	r3, #7
    e344:	dc11      	bgt.n	e36a <_ZN14MCP23008_Class13SetPortOutputEh+0x3a>
	{
		if (out&(0x01<<i))
    e346:	78fa      	ldrb	r2, [r7, #3]
    e348:	7bfb      	ldrb	r3, [r7, #15]
    e34a:	fa42 f303 	asr.w	r3, r2, r3
    e34e:	f003 0301 	and.w	r3, r3, #1
    e352:	2b00      	cmp	r3, #0
    e354:	d005      	beq.n	e362 <_ZN14MCP23008_Class13SetPortOutputEh+0x32>
		{
			pinMode(i,MCP23008_OUTPUT);
    e356:	7bfb      	ldrb	r3, [r7, #15]
    e358:	2200      	movs	r2, #0
    e35a:	4619      	mov	r1, r3
    e35c:	6878      	ldr	r0, [r7, #4]
    e35e:	4b05      	ldr	r3, [pc, #20]	; (e374 <_ZN14MCP23008_Class13SetPortOutputEh+0x44>)
    e360:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e362:	7bfb      	ldrb	r3, [r7, #15]
    e364:	3301      	adds	r3, #1
    e366:	73fb      	strb	r3, [r7, #15]
    e368:	e7ea      	b.n	e340 <_ZN14MCP23008_Class13SetPortOutputEh+0x10>
		}
		
	}
}
    e36a:	bf00      	nop
    e36c:	3710      	adds	r7, #16
    e36e:	46bd      	mov	sp, r7
    e370:	bd80      	pop	{r7, pc}
    e372:	bf00      	nop
    e374:	0000e405 	.word	0x0000e405

0000e378 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    e378:	b580      	push	{r7, lr}
    e37a:	b084      	sub	sp, #16
    e37c:	af00      	add	r7, sp, #0
    e37e:	6078      	str	r0, [r7, #4]
    e380:	4608      	mov	r0, r1
    e382:	4611      	mov	r1, r2
    e384:	461a      	mov	r2, r3
    e386:	4603      	mov	r3, r0
    e388:	70fb      	strb	r3, [r7, #3]
    e38a:	460b      	mov	r3, r1
    e38c:	70bb      	strb	r3, [r7, #2]
    e38e:	4613      	mov	r3, r2
    e390:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    e392:	787b      	ldrb	r3, [r7, #1]
    e394:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    e396:	78fb      	ldrb	r3, [r7, #3]
    e398:	4619      	mov	r1, r3
    e39a:	6878      	ldr	r0, [r7, #4]
    e39c:	4b16      	ldr	r3, [pc, #88]	; (e3f8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    e39e:	4798      	blx	r3
    e3a0:	4603      	mov	r3, r0
    e3a2:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    e3a4:	7bfb      	ldrb	r3, [r7, #15]
    e3a6:	4619      	mov	r1, r3
    e3a8:	6878      	ldr	r0, [r7, #4]
    e3aa:	4b14      	ldr	r3, [pc, #80]	; (e3fc <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    e3ac:	4798      	blx	r3
    e3ae:	4603      	mov	r3, r0
    e3b0:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    e3b2:	78bb      	ldrb	r3, [r7, #2]
    e3b4:	2b00      	cmp	r3, #0
    e3b6:	d009      	beq.n	e3cc <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    e3b8:	7bba      	ldrb	r2, [r7, #14]
    e3ba:	7b7b      	ldrb	r3, [r7, #13]
    e3bc:	4619      	mov	r1, r3
    e3be:	2301      	movs	r3, #1
    e3c0:	408b      	lsls	r3, r1
    e3c2:	b2db      	uxtb	r3, r3
    e3c4:	4313      	orrs	r3, r2
    e3c6:	b2db      	uxtb	r3, r3
    e3c8:	73bb      	strb	r3, [r7, #14]
    e3ca:	e00a      	b.n	e3e2 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    e3cc:	7bba      	ldrb	r2, [r7, #14]
    e3ce:	7b7b      	ldrb	r3, [r7, #13]
    e3d0:	4619      	mov	r1, r3
    e3d2:	2301      	movs	r3, #1
    e3d4:	408b      	lsls	r3, r1
    e3d6:	b2db      	uxtb	r3, r3
    e3d8:	43db      	mvns	r3, r3
    e3da:	b2db      	uxtb	r3, r3
    e3dc:	4013      	ands	r3, r2
    e3de:	b2db      	uxtb	r3, r3
    e3e0:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    e3e2:	7bba      	ldrb	r2, [r7, #14]
    e3e4:	7bfb      	ldrb	r3, [r7, #15]
    e3e6:	4619      	mov	r1, r3
    e3e8:	6878      	ldr	r0, [r7, #4]
    e3ea:	4b05      	ldr	r3, [pc, #20]	; (e400 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    e3ec:	4798      	blx	r3
}
    e3ee:	bf00      	nop
    e3f0:	3710      	adds	r7, #16
    e3f2:	46bd      	mov	sp, r7
    e3f4:	bd80      	pop	{r7, pc}
    e3f6:	bf00      	nop
    e3f8:	0000e0e7 	.word	0x0000e0e7
    e3fc:	0000e135 	.word	0x0000e135
    e400:	0000e1bd 	.word	0x0000e1bd

0000e404 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    e404:	b590      	push	{r4, r7, lr}
    e406:	b085      	sub	sp, #20
    e408:	af02      	add	r7, sp, #8
    e40a:	6078      	str	r0, [r7, #4]
    e40c:	460b      	mov	r3, r1
    e40e:	70fb      	strb	r3, [r7, #3]
    e410:	4613      	mov	r3, r2
    e412:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    e414:	78bb      	ldrb	r3, [r7, #2]
    e416:	2b01      	cmp	r3, #1
    e418:	bf0c      	ite	eq
    e41a:	2301      	moveq	r3, #1
    e41c:	2300      	movne	r3, #0
    e41e:	b2db      	uxtb	r3, r3
    e420:	461a      	mov	r2, r3
    e422:	78f9      	ldrb	r1, [r7, #3]
    e424:	2300      	movs	r3, #0
    e426:	9300      	str	r3, [sp, #0]
    e428:	2300      	movs	r3, #0
    e42a:	6878      	ldr	r0, [r7, #4]
    e42c:	4c02      	ldr	r4, [pc, #8]	; (e438 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    e42e:	47a0      	blx	r4
}
    e430:	bf00      	nop
    e432:	370c      	adds	r7, #12
    e434:	46bd      	mov	sp, r7
    e436:	bd90      	pop	{r4, r7, pc}
    e438:	0000e379 	.word	0x0000e379

0000e43c <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    e43c:	b590      	push	{r4, r7, lr}
    e43e:	b085      	sub	sp, #20
    e440:	af00      	add	r7, sp, #0
    e442:	6078      	str	r0, [r7, #4]
    e444:	460b      	mov	r3, r1
    e446:	70fb      	strb	r3, [r7, #3]
    e448:	4613      	mov	r3, r2
    e44a:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    e44c:	78fb      	ldrb	r3, [r7, #3]
    e44e:	4619      	mov	r1, r3
    e450:	6878      	ldr	r0, [r7, #4]
    e452:	4b21      	ldr	r3, [pc, #132]	; (e4d8 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    e454:	4798      	blx	r3
    e456:	4603      	mov	r3, r0
    e458:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    e45a:	78f9      	ldrb	r1, [r7, #3]
    e45c:	230a      	movs	r3, #10
    e45e:	220a      	movs	r2, #10
    e460:	6878      	ldr	r0, [r7, #4]
    e462:	4c1e      	ldr	r4, [pc, #120]	; (e4dc <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    e464:	47a0      	blx	r4
    e466:	4603      	mov	r3, r0
    e468:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    e46a:	7bfb      	ldrb	r3, [r7, #15]
    e46c:	4619      	mov	r1, r3
    e46e:	6878      	ldr	r0, [r7, #4]
    e470:	4b1b      	ldr	r3, [pc, #108]	; (e4e0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    e472:	4798      	blx	r3
    e474:	4603      	mov	r3, r0
    e476:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    e478:	78bb      	ldrb	r3, [r7, #2]
    e47a:	2b00      	cmp	r3, #0
    e47c:	d009      	beq.n	e492 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    e47e:	7bba      	ldrb	r2, [r7, #14]
    e480:	7b7b      	ldrb	r3, [r7, #13]
    e482:	4619      	mov	r1, r3
    e484:	2301      	movs	r3, #1
    e486:	408b      	lsls	r3, r1
    e488:	b2db      	uxtb	r3, r3
    e48a:	4313      	orrs	r3, r2
    e48c:	b2db      	uxtb	r3, r3
    e48e:	73bb      	strb	r3, [r7, #14]
    e490:	e00a      	b.n	e4a8 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    e492:	7bba      	ldrb	r2, [r7, #14]
    e494:	7b7b      	ldrb	r3, [r7, #13]
    e496:	4619      	mov	r1, r3
    e498:	2301      	movs	r3, #1
    e49a:	408b      	lsls	r3, r1
    e49c:	b2db      	uxtb	r3, r3
    e49e:	43db      	mvns	r3, r3
    e4a0:	b2db      	uxtb	r3, r3
    e4a2:	4013      	ands	r3, r2
    e4a4:	b2db      	uxtb	r3, r3
    e4a6:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    e4a8:	78f9      	ldrb	r1, [r7, #3]
    e4aa:	2309      	movs	r3, #9
    e4ac:	2209      	movs	r2, #9
    e4ae:	6878      	ldr	r0, [r7, #4]
    e4b0:	4c0a      	ldr	r4, [pc, #40]	; (e4dc <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    e4b2:	47a0      	blx	r4
    e4b4:	4603      	mov	r3, r0
    e4b6:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    e4b8:	7bba      	ldrb	r2, [r7, #14]
    e4ba:	7bfb      	ldrb	r3, [r7, #15]
    e4bc:	4619      	mov	r1, r3
    e4be:	6878      	ldr	r0, [r7, #4]
    e4c0:	4b08      	ldr	r3, [pc, #32]	; (e4e4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    e4c2:	4798      	blx	r3
    e4c4:	4603      	mov	r3, r0
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	bf0c      	ite	eq
    e4ca:	2301      	moveq	r3, #1
    e4cc:	2300      	movne	r3, #0
    e4ce:	b2db      	uxtb	r3, r3
}
    e4d0:	4618      	mov	r0, r3
    e4d2:	3714      	adds	r7, #20
    e4d4:	46bd      	mov	sp, r7
    e4d6:	bd90      	pop	{r4, r7, pc}
    e4d8:	0000e0e7 	.word	0x0000e0e7
    e4dc:	0000e105 	.word	0x0000e105
    e4e0:	0000e135 	.word	0x0000e135
    e4e4:	0000e1bd 	.word	0x0000e1bd

0000e4e8 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    e4e8:	b590      	push	{r4, r7, lr}
    e4ea:	b085      	sub	sp, #20
    e4ec:	af02      	add	r7, sp, #8
    e4ee:	6078      	str	r0, [r7, #4]
    e4f0:	460b      	mov	r3, r1
    e4f2:	70fb      	strb	r3, [r7, #3]
    e4f4:	4613      	mov	r3, r2
    e4f6:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    e4f8:	78ba      	ldrb	r2, [r7, #2]
    e4fa:	78f9      	ldrb	r1, [r7, #3]
    e4fc:	2306      	movs	r3, #6
    e4fe:	9300      	str	r3, [sp, #0]
    e500:	2306      	movs	r3, #6
    e502:	6878      	ldr	r0, [r7, #4]
    e504:	4c02      	ldr	r4, [pc, #8]	; (e510 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    e506:	47a0      	blx	r4
}
    e508:	bf00      	nop
    e50a:	370c      	adds	r7, #12
    e50c:	46bd      	mov	sp, r7
    e50e:	bd90      	pop	{r4, r7, pc}
    e510:	0000e379 	.word	0x0000e379

0000e514 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
    e514:	b580      	push	{r7, lr}
    e516:	b082      	sub	sp, #8
    e518:	af00      	add	r7, sp, #0
    e51a:	6078      	str	r0, [r7, #4]
    e51c:	6039      	str	r1, [r7, #0]
    e51e:	687b      	ldr	r3, [r7, #4]
    e520:	2b01      	cmp	r3, #1
    e522:	d10d      	bne.n	e540 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e524:	683b      	ldr	r3, [r7, #0]
    e526:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e52a:	4293      	cmp	r3, r2
    e52c:	d108      	bne.n	e540 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e52e:	4906      	ldr	r1, [pc, #24]	; (e548 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e530:	4806      	ldr	r0, [pc, #24]	; (e54c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e532:	4b07      	ldr	r3, [pc, #28]	; (e550 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e534:	4798      	blx	r3
    e536:	4a07      	ldr	r2, [pc, #28]	; (e554 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e538:	4907      	ldr	r1, [pc, #28]	; (e558 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e53a:	4804      	ldr	r0, [pc, #16]	; (e54c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e53c:	4b07      	ldr	r3, [pc, #28]	; (e55c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e53e:	4798      	blx	r3
    e540:	bf00      	nop
    e542:	3708      	adds	r7, #8
    e544:	46bd      	mov	sp, r7
    e546:	bd80      	pop	{r7, pc}
    e548:	2000a2f0 	.word	0x2000a2f0
    e54c:	200014e0 	.word	0x200014e0
    e550:	0000debd 	.word	0x0000debd
    e554:	20000000 	.word	0x20000000
    e558:	0000ded9 	.word	0x0000ded9
    e55c:	00013cdd 	.word	0x00013cdd

0000e560 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
    e560:	b580      	push	{r7, lr}
    e562:	af00      	add	r7, sp, #0
    e564:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e568:	2001      	movs	r0, #1
    e56a:	4b01      	ldr	r3, [pc, #4]	; (e570 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
    e56c:	4798      	blx	r3
    e56e:	bd80      	pop	{r7, pc}
    e570:	0000e515 	.word	0x0000e515

0000e574 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    e574:	b480      	push	{r7}
    e576:	b083      	sub	sp, #12
    e578:	af00      	add	r7, sp, #0
    e57a:	6078      	str	r0, [r7, #4]
    e57c:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e57e:	687b      	ldr	r3, [r7, #4]
    e580:	683a      	ldr	r2, [r7, #0]
    e582:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    e584:	687b      	ldr	r3, [r7, #4]
    e586:	68db      	ldr	r3, [r3, #12]
    e588:	2200      	movs	r2, #0
    e58a:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    e58c:	4a06      	ldr	r2, [pc, #24]	; (e5a8 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    e58e:	687b      	ldr	r3, [r7, #4]
    e590:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e592:	687b      	ldr	r3, [r7, #4]
    e594:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e598:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    e59a:	687b      	ldr	r3, [r7, #4]
    e59c:	4618      	mov	r0, r3
    e59e:	370c      	adds	r7, #12
    e5a0:	46bd      	mov	sp, r7
    e5a2:	bc80      	pop	{r7}
    e5a4:	4770      	bx	lr
    e5a6:	bf00      	nop
    e5a8:	200015f8 	.word	0x200015f8

0000e5ac <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    e5ac:	b480      	push	{r7}
    e5ae:	b083      	sub	sp, #12
    e5b0:	af00      	add	r7, sp, #0
    e5b2:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e5b4:	687b      	ldr	r3, [r7, #4]
    e5b6:	2200      	movs	r2, #0
    e5b8:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e5ba:	687b      	ldr	r3, [r7, #4]
    e5bc:	4618      	mov	r0, r3
    e5be:	370c      	adds	r7, #12
    e5c0:	46bd      	mov	sp, r7
    e5c2:	bc80      	pop	{r7}
    e5c4:	4770      	bx	lr
	...

0000e5c8 <_ZL9InitArrayv>:


static void InitArray(){
    e5c8:	b480      	push	{r7}
    e5ca:	b083      	sub	sp, #12
    e5cc:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    e5ce:	2301      	movs	r3, #1
    e5d0:	607b      	str	r3, [r7, #4]
    e5d2:	687b      	ldr	r3, [r7, #4]
    e5d4:	2b1f      	cmp	r3, #31
    e5d6:	dc34      	bgt.n	e642 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    e5d8:	491e      	ldr	r1, [pc, #120]	; (e654 <_ZL9InitArrayv+0x8c>)
    e5da:	687a      	ldr	r2, [r7, #4]
    e5dc:	4613      	mov	r3, r2
    e5de:	009b      	lsls	r3, r3, #2
    e5e0:	4413      	add	r3, r2
    e5e2:	009b      	lsls	r3, r3, #2
    e5e4:	440b      	add	r3, r1
    e5e6:	2200      	movs	r2, #0
    e5e8:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    e5ea:	491a      	ldr	r1, [pc, #104]	; (e654 <_ZL9InitArrayv+0x8c>)
    e5ec:	687a      	ldr	r2, [r7, #4]
    e5ee:	4613      	mov	r3, r2
    e5f0:	009b      	lsls	r3, r3, #2
    e5f2:	4413      	add	r3, r2
    e5f4:	009b      	lsls	r3, r3, #2
    e5f6:	440b      	add	r3, r1
    e5f8:	330c      	adds	r3, #12
    e5fa:	2200      	movs	r2, #0
    e5fc:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    e5fe:	687b      	ldr	r3, [r7, #4]
    e600:	1e5a      	subs	r2, r3, #1
    e602:	6879      	ldr	r1, [r7, #4]
    e604:	460b      	mov	r3, r1
    e606:	009b      	lsls	r3, r3, #2
    e608:	440b      	add	r3, r1
    e60a:	009b      	lsls	r3, r3, #2
    e60c:	4911      	ldr	r1, [pc, #68]	; (e654 <_ZL9InitArrayv+0x8c>)
    e60e:	4419      	add	r1, r3
    e610:	4810      	ldr	r0, [pc, #64]	; (e654 <_ZL9InitArrayv+0x8c>)
    e612:	4613      	mov	r3, r2
    e614:	009b      	lsls	r3, r3, #2
    e616:	4413      	add	r3, r2
    e618:	009b      	lsls	r3, r3, #2
    e61a:	4403      	add	r3, r0
    e61c:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    e61e:	4a0e      	ldr	r2, [pc, #56]	; (e658 <_ZL9InitArrayv+0x90>)
    e620:	687b      	ldr	r3, [r7, #4]
    e622:	2100      	movs	r1, #0
    e624:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    e628:	687b      	ldr	r3, [r7, #4]
    e62a:	3b01      	subs	r3, #1
    e62c:	687a      	ldr	r2, [r7, #4]
    e62e:	0092      	lsls	r2, r2, #2
    e630:	4909      	ldr	r1, [pc, #36]	; (e658 <_ZL9InitArrayv+0x90>)
    e632:	440a      	add	r2, r1
    e634:	4908      	ldr	r1, [pc, #32]	; (e658 <_ZL9InitArrayv+0x90>)
    e636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    e63a:	687b      	ldr	r3, [r7, #4]
    e63c:	3301      	adds	r3, #1
    e63e:	607b      	str	r3, [r7, #4]
    e640:	e7c7      	b.n	e5d2 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    e642:	4b06      	ldr	r3, [pc, #24]	; (e65c <_ZL9InitArrayv+0x94>)
    e644:	2201      	movs	r2, #1
    e646:	701a      	strb	r2, [r3, #0]
		
}
    e648:	bf00      	nop
    e64a:	370c      	adds	r7, #12
    e64c:	46bd      	mov	sp, r7
    e64e:	bc80      	pop	{r7}
    e650:	4770      	bx	lr
    e652:	bf00      	nop
    e654:	200015fc 	.word	0x200015fc
    e658:	2000187c 	.word	0x2000187c
    e65c:	200018fc 	.word	0x200018fc

0000e660 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    e660:	b580      	push	{r7, lr}
    e662:	b082      	sub	sp, #8
    e664:	af00      	add	r7, sp, #0
    e666:	6078      	str	r0, [r7, #4]
	ticks=0;
    e668:	687b      	ldr	r3, [r7, #4]
    e66a:	2200      	movs	r2, #0
    e66c:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    e66e:	4b0d      	ldr	r3, [pc, #52]	; (e6a4 <_ZN11Timer_Class4InitEv+0x44>)
    e670:	781b      	ldrb	r3, [r3, #0]
    e672:	f083 0301 	eor.w	r3, r3, #1
    e676:	b2db      	uxtb	r3, r3
    e678:	2b00      	cmp	r3, #0
    e67a:	d001      	beq.n	e680 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    e67c:	4b0a      	ldr	r3, [pc, #40]	; (e6a8 <_ZN11Timer_Class4InitEv+0x48>)
    e67e:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    e680:	6878      	ldr	r0, [r7, #4]
    e682:	4b0a      	ldr	r3, [pc, #40]	; (e6ac <_ZN11Timer_Class4InitEv+0x4c>)
    e684:	4798      	blx	r3
    e686:	4603      	mov	r3, r0
    e688:	2b00      	cmp	r3, #0
    e68a:	bf0c      	ite	eq
    e68c:	2301      	moveq	r3, #1
    e68e:	2300      	movne	r3, #0
    e690:	b2da      	uxtb	r2, r3
    e692:	687b      	ldr	r3, [r7, #4]
    e694:	709a      	strb	r2, [r3, #2]
	return isOK;
    e696:	687b      	ldr	r3, [r7, #4]
    e698:	789b      	ldrb	r3, [r3, #2]
    e69a:	b2db      	uxtb	r3, r3
}
    e69c:	4618      	mov	r0, r3
    e69e:	3708      	adds	r7, #8
    e6a0:	46bd      	mov	sp, r7
    e6a2:	bd80      	pop	{r7, pc}
    e6a4:	200018fc 	.word	0x200018fc
    e6a8:	0000e5c9 	.word	0x0000e5c9
    e6ac:	0000e6b1 	.word	0x0000e6b1

0000e6b0 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    e6b0:	b580      	push	{r7, lr}
    e6b2:	b084      	sub	sp, #16
    e6b4:	af00      	add	r7, sp, #0
    e6b6:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e6b8:	687b      	ldr	r3, [r7, #4]
    e6ba:	68db      	ldr	r3, [r3, #12]
    e6bc:	4618      	mov	r0, r3
    e6be:	4b04      	ldr	r3, [pc, #16]	; (e6d0 <_ZN11Timer_Class5StartEv+0x20>)
    e6c0:	4798      	blx	r3
    e6c2:	60f8      	str	r0, [r7, #12]
	return status;
    e6c4:	68fb      	ldr	r3, [r7, #12]
	
}
    e6c6:	4618      	mov	r0, r3
    e6c8:	3710      	adds	r7, #16
    e6ca:	46bd      	mov	sp, r7
    e6cc:	bd80      	pop	{r7, pc}
    e6ce:	bf00      	nop
    e6d0:	00003479 	.word	0x00003479

0000e6d4 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    e6d4:	b580      	push	{r7, lr}
    e6d6:	b084      	sub	sp, #16
    e6d8:	af00      	add	r7, sp, #0
    e6da:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e6dc:	687b      	ldr	r3, [r7, #4]
    e6de:	68db      	ldr	r3, [r3, #12]
    e6e0:	4618      	mov	r0, r3
    e6e2:	4b05      	ldr	r3, [pc, #20]	; (e6f8 <_ZN11Timer_Class4StopEv+0x24>)
    e6e4:	4798      	blx	r3
    e6e6:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e6e8:	687b      	ldr	r3, [r7, #4]
    e6ea:	2200      	movs	r2, #0
    e6ec:	705a      	strb	r2, [r3, #1]
	return status;
    e6ee:	68fb      	ldr	r3, [r7, #12]
}
    e6f0:	4618      	mov	r0, r3
    e6f2:	3710      	adds	r7, #16
    e6f4:	46bd      	mov	sp, r7
    e6f6:	bd80      	pop	{r7, pc}
    e6f8:	000034e1 	.word	0x000034e1

0000e6fc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e6fc:	b580      	push	{r7, lr}
    e6fe:	b086      	sub	sp, #24
    e700:	af00      	add	r7, sp, #0
    e702:	60f8      	str	r0, [r7, #12]
    e704:	60b9      	str	r1, [r7, #8]
    e706:	607a      	str	r2, [r7, #4]
    e708:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    e70a:	68b9      	ldr	r1, [r7, #8]
    e70c:	68f8      	ldr	r0, [r7, #12]
    e70e:	4b0e      	ldr	r3, [pc, #56]	; (e748 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e710:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    e712:	68fb      	ldr	r3, [r7, #12]
    e714:	699b      	ldr	r3, [r3, #24]
    e716:	687a      	ldr	r2, [r7, #4]
    e718:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e71a:	68fb      	ldr	r3, [r7, #12]
    e71c:	699b      	ldr	r3, [r3, #24]
    e71e:	68ba      	ldr	r2, [r7, #8]
    e720:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e722:	68fb      	ldr	r3, [r7, #12]
    e724:	699b      	ldr	r3, [r3, #24]
    e726:	78fa      	ldrb	r2, [r7, #3]
    e728:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e72a:	68fb      	ldr	r3, [r7, #12]
    e72c:	68da      	ldr	r2, [r3, #12]
    e72e:	68fb      	ldr	r3, [r7, #12]
    e730:	699b      	ldr	r3, [r3, #24]
    e732:	4619      	mov	r1, r3
    e734:	4610      	mov	r0, r2
    e736:	4b05      	ldr	r3, [pc, #20]	; (e74c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    e738:	4798      	blx	r3
    e73a:	6178      	str	r0, [r7, #20]
	
	return status;
    e73c:	697b      	ldr	r3, [r7, #20]
}
    e73e:	4618      	mov	r0, r3
    e740:	3718      	adds	r7, #24
    e742:	46bd      	mov	sp, r7
    e744:	bd80      	pop	{r7, pc}
    e746:	bf00      	nop
    e748:	0000e905 	.word	0x0000e905
    e74c:	0000354d 	.word	0x0000354d

0000e750 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    e750:	b580      	push	{r7, lr}
    e752:	b086      	sub	sp, #24
    e754:	af00      	add	r7, sp, #0
    e756:	60f8      	str	r0, [r7, #12]
    e758:	60b9      	str	r1, [r7, #8]
    e75a:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    e75c:	687a      	ldr	r2, [r7, #4]
    e75e:	68b9      	ldr	r1, [r7, #8]
    e760:	68f8      	ldr	r0, [r7, #12]
    e762:	4b0c      	ldr	r3, [pc, #48]	; (e794 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    e764:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    e766:	68fb      	ldr	r3, [r7, #12]
    e768:	68db      	ldr	r3, [r3, #12]
    e76a:	681b      	ldr	r3, [r3, #0]
    e76c:	699b      	ldr	r3, [r3, #24]
    e76e:	68fa      	ldr	r2, [r7, #12]
    e770:	68d2      	ldr	r2, [r2, #12]
    e772:	3204      	adds	r2, #4
    e774:	4610      	mov	r0, r2
    e776:	4798      	blx	r3
    e778:	4603      	mov	r3, r0
    e77a:	2b00      	cmp	r3, #0
    e77c:	d105      	bne.n	e78a <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    e77e:	68fb      	ldr	r3, [r7, #12]
    e780:	68db      	ldr	r3, [r3, #12]
    e782:	4618      	mov	r0, r3
    e784:	4b04      	ldr	r3, [pc, #16]	; (e798 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    e786:	4798      	blx	r3
    e788:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    e78a:	697b      	ldr	r3, [r7, #20]
}
    e78c:	4618      	mov	r0, r3
    e78e:	3718      	adds	r7, #24
    e790:	46bd      	mov	sp, r7
    e792:	bd80      	pop	{r7, pc}
    e794:	0000e79d 	.word	0x0000e79d
    e798:	00003479 	.word	0x00003479

0000e79c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    e79c:	b590      	push	{r4, r7, lr}
    e79e:	b087      	sub	sp, #28
    e7a0:	af00      	add	r7, sp, #0
    e7a2:	60f8      	str	r0, [r7, #12]
    e7a4:	60b9      	str	r1, [r7, #8]
    e7a6:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    e7a8:	2301      	movs	r3, #1
    e7aa:	687a      	ldr	r2, [r7, #4]
    e7ac:	68b9      	ldr	r1, [r7, #8]
    e7ae:	68f8      	ldr	r0, [r7, #12]
    e7b0:	4c03      	ldr	r4, [pc, #12]	; (e7c0 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    e7b2:	47a0      	blx	r4
    e7b4:	6178      	str	r0, [r7, #20]
		return status;
    e7b6:	697b      	ldr	r3, [r7, #20]
}
    e7b8:	4618      	mov	r0, r3
    e7ba:	371c      	adds	r7, #28
    e7bc:	46bd      	mov	sp, r7
    e7be:	bd90      	pop	{r4, r7, pc}
    e7c0:	0000e6fd 	.word	0x0000e6fd

0000e7c4 <_ZN11Timer_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	Timer_Class::Remove_task(void){
    e7c4:	b580      	push	{r7, lr}
    e7c6:	b082      	sub	sp, #8
    e7c8:	af00      	add	r7, sp, #0
    e7ca:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
    e7cc:	687b      	ldr	r3, [r7, #4]
    e7ce:	68da      	ldr	r2, [r3, #12]
    e7d0:	687b      	ldr	r3, [r7, #4]
    e7d2:	699b      	ldr	r3, [r3, #24]
    e7d4:	4619      	mov	r1, r3
    e7d6:	4610      	mov	r0, r2
    e7d8:	4b04      	ldr	r3, [pc, #16]	; (e7ec <_ZN11Timer_Class11Remove_taskEv+0x28>)
    e7da:	4798      	blx	r3
	task->cb=NULL;
    e7dc:	687b      	ldr	r3, [r7, #4]
    e7de:	699b      	ldr	r3, [r3, #24]
    e7e0:	2200      	movs	r2, #0
    e7e2:	60da      	str	r2, [r3, #12]
}
    e7e4:	bf00      	nop
    e7e6:	3708      	adds	r7, #8
    e7e8:	46bd      	mov	sp, r7
    e7ea:	bd80      	pop	{r7, pc}
    e7ec:	00003651 	.word	0x00003651

0000e7f0 <_ZN11Timer_Class11Remove_taskEPFvvE>:

void	Timer_Class::Remove_task(FUNC_PTR func){
    e7f0:	b580      	push	{r7, lr}
    e7f2:	b082      	sub	sp, #8
    e7f4:	af00      	add	r7, sp, #0
    e7f6:	6078      	str	r0, [r7, #4]
    e7f8:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e7fa:	6839      	ldr	r1, [r7, #0]
    e7fc:	6878      	ldr	r0, [r7, #4]
    e7fe:	4b0f      	ldr	r3, [pc, #60]	; (e83c <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    e800:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e802:	687b      	ldr	r3, [r7, #4]
    e804:	68db      	ldr	r3, [r3, #12]
    e806:	f103 0218 	add.w	r2, r3, #24
    e80a:	687b      	ldr	r3, [r7, #4]
    e80c:	699b      	ldr	r3, [r3, #24]
    e80e:	4619      	mov	r1, r3
    e810:	4610      	mov	r0, r2
    e812:	4b0b      	ldr	r3, [pc, #44]	; (e840 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    e814:	4798      	blx	r3
    e816:	4603      	mov	r3, r0
    e818:	2b00      	cmp	r3, #0
    e81a:	d007      	beq.n	e82c <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e81c:	687b      	ldr	r3, [r7, #4]
    e81e:	68da      	ldr	r2, [r3, #12]
    e820:	687b      	ldr	r3, [r7, #4]
    e822:	699b      	ldr	r3, [r3, #24]
    e824:	4619      	mov	r1, r3
    e826:	4610      	mov	r0, r2
    e828:	4b06      	ldr	r3, [pc, #24]	; (e844 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    e82a:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e82c:	687b      	ldr	r3, [r7, #4]
    e82e:	699b      	ldr	r3, [r3, #24]
    e830:	2200      	movs	r2, #0
    e832:	60da      	str	r2, [r3, #12]
}
    e834:	bf00      	nop
    e836:	3708      	adds	r7, #8
    e838:	46bd      	mov	sp, r7
    e83a:	bd80      	pop	{r7, pc}
    e83c:	0000e985 	.word	0x0000e985
    e840:	00004239 	.word	0x00004239
    e844:	00003651 	.word	0x00003651

0000e848 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e848:	b590      	push	{r4, r7, lr}
    e84a:	b087      	sub	sp, #28
    e84c:	af00      	add	r7, sp, #0
    e84e:	60f8      	str	r0, [r7, #12]
    e850:	60b9      	str	r1, [r7, #8]
    e852:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e854:	2300      	movs	r3, #0
    e856:	687a      	ldr	r2, [r7, #4]
    e858:	68b9      	ldr	r1, [r7, #8]
    e85a:	68f8      	ldr	r0, [r7, #12]
    e85c:	4c0c      	ldr	r4, [pc, #48]	; (e890 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    e85e:	47a0      	blx	r4
    e860:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    e862:	68fb      	ldr	r3, [r7, #12]
    e864:	68db      	ldr	r3, [r3, #12]
    e866:	681b      	ldr	r3, [r3, #0]
    e868:	699b      	ldr	r3, [r3, #24]
    e86a:	68fa      	ldr	r2, [r7, #12]
    e86c:	68d2      	ldr	r2, [r2, #12]
    e86e:	3204      	adds	r2, #4
    e870:	4610      	mov	r0, r2
    e872:	4798      	blx	r3
    e874:	4603      	mov	r3, r0
    e876:	2b00      	cmp	r3, #0
    e878:	d105      	bne.n	e886 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    e87a:	68fb      	ldr	r3, [r7, #12]
    e87c:	68db      	ldr	r3, [r3, #12]
    e87e:	4618      	mov	r0, r3
    e880:	4b04      	ldr	r3, [pc, #16]	; (e894 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    e882:	4798      	blx	r3
    e884:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    e886:	697b      	ldr	r3, [r7, #20]
}
    e888:	4618      	mov	r0, r3
    e88a:	371c      	adds	r7, #28
    e88c:	46bd      	mov	sp, r7
    e88e:	bd90      	pop	{r4, r7, pc}
    e890:	0000e6fd 	.word	0x0000e6fd
    e894:	00003479 	.word	0x00003479

0000e898 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    e898:	b480      	push	{r7}
    e89a:	b085      	sub	sp, #20
    e89c:	af00      	add	r7, sp, #0
    e89e:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e8a0:	2300      	movs	r3, #0
    e8a2:	73fb      	strb	r3, [r7, #15]
    e8a4:	7bfb      	ldrb	r3, [r7, #15]
    e8a6:	2b1f      	cmp	r3, #31
    e8a8:	dc23      	bgt.n	e8f2 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e8aa:	687b      	ldr	r3, [r7, #4]
    e8ac:	7f1a      	ldrb	r2, [r3, #28]
    e8ae:	7bfb      	ldrb	r3, [r7, #15]
    e8b0:	4413      	add	r3, r2
    e8b2:	b2db      	uxtb	r3, r3
    e8b4:	f003 031f 	and.w	r3, r3, #31
    e8b8:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    e8ba:	7bba      	ldrb	r2, [r7, #14]
    e8bc:	4910      	ldr	r1, [pc, #64]	; (e900 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e8be:	4613      	mov	r3, r2
    e8c0:	009b      	lsls	r3, r3, #2
    e8c2:	4413      	add	r3, r2
    e8c4:	009b      	lsls	r3, r3, #2
    e8c6:	440b      	add	r3, r1
    e8c8:	330c      	adds	r3, #12
    e8ca:	681b      	ldr	r3, [r3, #0]
    e8cc:	2b00      	cmp	r3, #0
    e8ce:	d10c      	bne.n	e8ea <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    e8d0:	7bba      	ldrb	r2, [r7, #14]
    e8d2:	4613      	mov	r3, r2
    e8d4:	009b      	lsls	r3, r3, #2
    e8d6:	4413      	add	r3, r2
    e8d8:	009b      	lsls	r3, r3, #2
    e8da:	4a09      	ldr	r2, [pc, #36]	; (e900 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e8dc:	441a      	add	r2, r3
    e8de:	687b      	ldr	r3, [r7, #4]
    e8e0:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e8e2:	687b      	ldr	r3, [r7, #4]
    e8e4:	7bba      	ldrb	r2, [r7, #14]
    e8e6:	771a      	strb	r2, [r3, #28]
			return;
    e8e8:	e006      	b.n	e8f8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e8ea:	7bfb      	ldrb	r3, [r7, #15]
    e8ec:	3301      	adds	r3, #1
    e8ee:	73fb      	strb	r3, [r7, #15]
    e8f0:	e7d8      	b.n	e8a4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    e8f2:	687b      	ldr	r3, [r7, #4]
    e8f4:	4a02      	ldr	r2, [pc, #8]	; (e900 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e8f6:	619a      	str	r2, [r3, #24]

}
    e8f8:	3714      	adds	r7, #20
    e8fa:	46bd      	mov	sp, r7
    e8fc:	bc80      	pop	{r7}
    e8fe:	4770      	bx	lr
    e900:	200015fc 	.word	0x200015fc

0000e904 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    e904:	b580      	push	{r7, lr}
    e906:	b084      	sub	sp, #16
    e908:	af00      	add	r7, sp, #0
    e90a:	6078      	str	r0, [r7, #4]
    e90c:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e90e:	2300      	movs	r3, #0
    e910:	73fb      	strb	r3, [r7, #15]
    e912:	7bfb      	ldrb	r3, [r7, #15]
    e914:	2b1f      	cmp	r3, #31
    e916:	dc28      	bgt.n	e96a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e918:	687b      	ldr	r3, [r7, #4]
    e91a:	7f1a      	ldrb	r2, [r3, #28]
    e91c:	7bfb      	ldrb	r3, [r7, #15]
    e91e:	4413      	add	r3, r2
    e920:	b2db      	uxtb	r3, r3
    e922:	f003 031f 	and.w	r3, r3, #31
    e926:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    e928:	7bba      	ldrb	r2, [r7, #14]
    e92a:	4913      	ldr	r1, [pc, #76]	; (e978 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e92c:	4613      	mov	r3, r2
    e92e:	009b      	lsls	r3, r3, #2
    e930:	4413      	add	r3, r2
    e932:	009b      	lsls	r3, r3, #2
    e934:	440b      	add	r3, r1
    e936:	330c      	adds	r3, #12
    e938:	681a      	ldr	r2, [r3, #0]
    e93a:	683b      	ldr	r3, [r7, #0]
    e93c:	429a      	cmp	r2, r3
    e93e:	d110      	bne.n	e962 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    e940:	6839      	ldr	r1, [r7, #0]
    e942:	6878      	ldr	r0, [r7, #4]
    e944:	4b0d      	ldr	r3, [pc, #52]	; (e97c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    e946:	4798      	blx	r3
			task=&taskArray[j];
    e948:	7bba      	ldrb	r2, [r7, #14]
    e94a:	4613      	mov	r3, r2
    e94c:	009b      	lsls	r3, r3, #2
    e94e:	4413      	add	r3, r2
    e950:	009b      	lsls	r3, r3, #2
    e952:	4a09      	ldr	r2, [pc, #36]	; (e978 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e954:	441a      	add	r2, r3
    e956:	687b      	ldr	r3, [r7, #4]
    e958:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e95a:	687b      	ldr	r3, [r7, #4]
    e95c:	7bba      	ldrb	r2, [r7, #14]
    e95e:	771a      	strb	r2, [r3, #28]
			return;
    e960:	e006      	b.n	e970 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e962:	7bfb      	ldrb	r3, [r7, #15]
    e964:	3301      	adds	r3, #1
    e966:	73fb      	strb	r3, [r7, #15]
    e968:	e7d3      	b.n	e912 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    e96a:	6878      	ldr	r0, [r7, #4]
    e96c:	4b04      	ldr	r3, [pc, #16]	; (e980 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    e96e:	4798      	blx	r3
	//task=&taskArray[0];

}
    e970:	3710      	adds	r7, #16
    e972:	46bd      	mov	sp, r7
    e974:	bd80      	pop	{r7, pc}
    e976:	bf00      	nop
    e978:	200015fc 	.word	0x200015fc
    e97c:	0000e7f1 	.word	0x0000e7f1
    e980:	0000e899 	.word	0x0000e899

0000e984 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    e984:	b480      	push	{r7}
    e986:	b085      	sub	sp, #20
    e988:	af00      	add	r7, sp, #0
    e98a:	6078      	str	r0, [r7, #4]
    e98c:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e98e:	2300      	movs	r3, #0
    e990:	73fb      	strb	r3, [r7, #15]
    e992:	7bfb      	ldrb	r3, [r7, #15]
    e994:	2b1f      	cmp	r3, #31
    e996:	dc19      	bgt.n	e9cc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e998:	7bfa      	ldrb	r2, [r7, #15]
    e99a:	490f      	ldr	r1, [pc, #60]	; (e9d8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e99c:	4613      	mov	r3, r2
    e99e:	009b      	lsls	r3, r3, #2
    e9a0:	4413      	add	r3, r2
    e9a2:	009b      	lsls	r3, r3, #2
    e9a4:	440b      	add	r3, r1
    e9a6:	330c      	adds	r3, #12
    e9a8:	681a      	ldr	r2, [r3, #0]
    e9aa:	683b      	ldr	r3, [r7, #0]
    e9ac:	429a      	cmp	r2, r3
    e9ae:	d109      	bne.n	e9c4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e9b0:	7bfa      	ldrb	r2, [r7, #15]
    e9b2:	4613      	mov	r3, r2
    e9b4:	009b      	lsls	r3, r3, #2
    e9b6:	4413      	add	r3, r2
    e9b8:	009b      	lsls	r3, r3, #2
    e9ba:	4a07      	ldr	r2, [pc, #28]	; (e9d8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e9bc:	441a      	add	r2, r3
    e9be:	687b      	ldr	r3, [r7, #4]
    e9c0:	619a      	str	r2, [r3, #24]
			return;
    e9c2:	e004      	b.n	e9ce <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e9c4:	7bfb      	ldrb	r3, [r7, #15]
    e9c6:	3301      	adds	r3, #1
    e9c8:	73fb      	strb	r3, [r7, #15]
    e9ca:	e7e2      	b.n	e992 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    e9cc:	bf00      	nop
}
    e9ce:	3714      	adds	r7, #20
    e9d0:	46bd      	mov	sp, r7
    e9d2:	bc80      	pop	{r7}
    e9d4:	4770      	bx	lr
    e9d6:	bf00      	nop
    e9d8:	200015fc 	.word	0x200015fc

0000e9dc <_Z41__static_initialization_and_destruction_0ii>:
    e9dc:	b580      	push	{r7, lr}
    e9de:	b082      	sub	sp, #8
    e9e0:	af00      	add	r7, sp, #0
    e9e2:	6078      	str	r0, [r7, #4]
    e9e4:	6039      	str	r1, [r7, #0]
    e9e6:	687b      	ldr	r3, [r7, #4]
    e9e8:	2b01      	cmp	r3, #1
    e9ea:	d14c      	bne.n	ea86 <_Z41__static_initialization_and_destruction_0ii+0xaa>
    e9ec:	683b      	ldr	r3, [r7, #0]
    e9ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e9f2:	4293      	cmp	r3, r2
    e9f4:	d147      	bne.n	ea86 <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e9f6:	4926      	ldr	r1, [pc, #152]	; (ea90 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e9f8:	4826      	ldr	r0, [pc, #152]	; (ea94 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e9fa:	4b27      	ldr	r3, [pc, #156]	; (ea98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9fc:	4798      	blx	r3
    e9fe:	4a27      	ldr	r2, [pc, #156]	; (ea9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea00:	4927      	ldr	r1, [pc, #156]	; (eaa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea02:	4824      	ldr	r0, [pc, #144]	; (ea94 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ea04:	4b27      	ldr	r3, [pc, #156]	; (eaa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea06:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    ea08:	4927      	ldr	r1, [pc, #156]	; (eaa8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ea0a:	4828      	ldr	r0, [pc, #160]	; (eaac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ea0c:	4b22      	ldr	r3, [pc, #136]	; (ea98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea0e:	4798      	blx	r3
    ea10:	4a22      	ldr	r2, [pc, #136]	; (ea9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea12:	4923      	ldr	r1, [pc, #140]	; (eaa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea14:	4825      	ldr	r0, [pc, #148]	; (eaac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ea16:	4b23      	ldr	r3, [pc, #140]	; (eaa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea18:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    ea1a:	4925      	ldr	r1, [pc, #148]	; (eab0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ea1c:	4825      	ldr	r0, [pc, #148]	; (eab4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ea1e:	4b1e      	ldr	r3, [pc, #120]	; (ea98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea20:	4798      	blx	r3
    ea22:	4a1e      	ldr	r2, [pc, #120]	; (ea9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea24:	491e      	ldr	r1, [pc, #120]	; (eaa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea26:	4823      	ldr	r0, [pc, #140]	; (eab4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ea28:	4b1e      	ldr	r3, [pc, #120]	; (eaa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea2a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    ea2c:	4922      	ldr	r1, [pc, #136]	; (eab8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    ea2e:	4823      	ldr	r0, [pc, #140]	; (eabc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ea30:	4b19      	ldr	r3, [pc, #100]	; (ea98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea32:	4798      	blx	r3
    ea34:	4a19      	ldr	r2, [pc, #100]	; (ea9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea36:	491a      	ldr	r1, [pc, #104]	; (eaa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea38:	4820      	ldr	r0, [pc, #128]	; (eabc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ea3a:	4b1a      	ldr	r3, [pc, #104]	; (eaa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea3c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    ea3e:	4920      	ldr	r1, [pc, #128]	; (eac0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    ea40:	4820      	ldr	r0, [pc, #128]	; (eac4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ea42:	4b15      	ldr	r3, [pc, #84]	; (ea98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea44:	4798      	blx	r3
    ea46:	4a15      	ldr	r2, [pc, #84]	; (ea9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea48:	4915      	ldr	r1, [pc, #84]	; (eaa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea4a:	481e      	ldr	r0, [pc, #120]	; (eac4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ea4c:	4b15      	ldr	r3, [pc, #84]	; (eaa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea4e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    ea50:	491d      	ldr	r1, [pc, #116]	; (eac8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    ea52:	481e      	ldr	r0, [pc, #120]	; (eacc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ea54:	4b10      	ldr	r3, [pc, #64]	; (ea98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea56:	4798      	blx	r3
    ea58:	4a10      	ldr	r2, [pc, #64]	; (ea9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea5a:	4911      	ldr	r1, [pc, #68]	; (eaa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea5c:	481b      	ldr	r0, [pc, #108]	; (eacc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ea5e:	4b11      	ldr	r3, [pc, #68]	; (eaa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea60:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    ea62:	491b      	ldr	r1, [pc, #108]	; (ead0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    ea64:	481b      	ldr	r0, [pc, #108]	; (ead4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ea66:	4b0c      	ldr	r3, [pc, #48]	; (ea98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea68:	4798      	blx	r3
    ea6a:	4a0c      	ldr	r2, [pc, #48]	; (ea9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea6c:	490c      	ldr	r1, [pc, #48]	; (eaa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea6e:	4819      	ldr	r0, [pc, #100]	; (ead4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ea70:	4b0c      	ldr	r3, [pc, #48]	; (eaa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea72:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    ea74:	4918      	ldr	r1, [pc, #96]	; (ead8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    ea76:	4819      	ldr	r0, [pc, #100]	; (eadc <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ea78:	4b07      	ldr	r3, [pc, #28]	; (ea98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea7a:	4798      	blx	r3
    ea7c:	4a07      	ldr	r2, [pc, #28]	; (ea9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea7e:	4908      	ldr	r1, [pc, #32]	; (eaa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea80:	4816      	ldr	r0, [pc, #88]	; (eadc <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ea82:	4b08      	ldr	r3, [pc, #32]	; (eaa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea84:	4798      	blx	r3
    ea86:	bf00      	nop
    ea88:	3708      	adds	r7, #8
    ea8a:	46bd      	mov	sp, r7
    ea8c:	bd80      	pop	{r7, pc}
    ea8e:	bf00      	nop
    ea90:	2000a1c0 	.word	0x2000a1c0
    ea94:	200014f8 	.word	0x200014f8
    ea98:	0000e575 	.word	0x0000e575
    ea9c:	20000000 	.word	0x20000000
    eaa0:	0000e5ad 	.word	0x0000e5ad
    eaa4:	00013cdd 	.word	0x00013cdd
    eaa8:	2000a254 	.word	0x2000a254
    eaac:	20001518 	.word	0x20001518
    eab0:	2000a378 	.word	0x2000a378
    eab4:	20001538 	.word	0x20001538
    eab8:	2000a274 	.word	0x2000a274
    eabc:	20001558 	.word	0x20001558
    eac0:	2000a338 	.word	0x2000a338
    eac4:	20001578 	.word	0x20001578
    eac8:	2000a358 	.word	0x2000a358
    eacc:	20001598 	.word	0x20001598
    ead0:	2000a230 	.word	0x2000a230
    ead4:	200015b8 	.word	0x200015b8
    ead8:	2000a2d0 	.word	0x2000a2d0
    eadc:	200015d8 	.word	0x200015d8

0000eae0 <_GLOBAL__sub_I_ptrTimerClass>:
    eae0:	b580      	push	{r7, lr}
    eae2:	af00      	add	r7, sp, #0
    eae4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eae8:	2001      	movs	r0, #1
    eaea:	4b01      	ldr	r3, [pc, #4]	; (eaf0 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    eaec:	4798      	blx	r3
    eaee:	bd80      	pop	{r7, pc}
    eaf0:	0000e9dd 	.word	0x0000e9dd

0000eaf4 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    eaf4:	b480      	push	{r7}
    eaf6:	b083      	sub	sp, #12
    eaf8:	af00      	add	r7, sp, #0
    eafa:	6078      	str	r0, [r7, #4]
    eafc:	4a05      	ldr	r2, [pc, #20]	; (eb14 <_ZN5PrintC1Ev+0x20>)
    eafe:	687b      	ldr	r3, [r7, #4]
    eb00:	601a      	str	r2, [r3, #0]
    eb02:	687b      	ldr	r3, [r7, #4]
    eb04:	2200      	movs	r2, #0
    eb06:	605a      	str	r2, [r3, #4]
    eb08:	687b      	ldr	r3, [r7, #4]
    eb0a:	4618      	mov	r0, r3
    eb0c:	370c      	adds	r7, #12
    eb0e:	46bd      	mov	sp, r7
    eb10:	bc80      	pop	{r7}
    eb12:	4770      	bx	lr
    eb14:	00014acc 	.word	0x00014acc

0000eb18 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    eb18:	b480      	push	{r7}
    eb1a:	b083      	sub	sp, #12
    eb1c:	af00      	add	r7, sp, #0
    eb1e:	6078      	str	r0, [r7, #4]
    eb20:	2300      	movs	r3, #0
    eb22:	4618      	mov	r0, r3
    eb24:	370c      	adds	r7, #12
    eb26:	46bd      	mov	sp, r7
    eb28:	bc80      	pop	{r7}
    eb2a:	4770      	bx	lr

0000eb2c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    eb2c:	b480      	push	{r7}
    eb2e:	b083      	sub	sp, #12
    eb30:	af00      	add	r7, sp, #0
    eb32:	6078      	str	r0, [r7, #4]
    eb34:	bf00      	nop
    eb36:	370c      	adds	r7, #12
    eb38:	46bd      	mov	sp, r7
    eb3a:	bc80      	pop	{r7}
    eb3c:	4770      	bx	lr
	...

0000eb40 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    eb40:	b580      	push	{r7, lr}
    eb42:	b082      	sub	sp, #8
    eb44:	af00      	add	r7, sp, #0
    eb46:	6078      	str	r0, [r7, #4]
    eb48:	687b      	ldr	r3, [r7, #4]
    eb4a:	4618      	mov	r0, r3
    eb4c:	4b06      	ldr	r3, [pc, #24]	; (eb68 <_ZN6StreamC1Ev+0x28>)
    eb4e:	4798      	blx	r3
    eb50:	4a06      	ldr	r2, [pc, #24]	; (eb6c <_ZN6StreamC1Ev+0x2c>)
    eb52:	687b      	ldr	r3, [r7, #4]
    eb54:	601a      	str	r2, [r3, #0]
    eb56:	687b      	ldr	r3, [r7, #4]
    eb58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eb5c:	609a      	str	r2, [r3, #8]
    eb5e:	687b      	ldr	r3, [r7, #4]
    eb60:	4618      	mov	r0, r3
    eb62:	3708      	adds	r7, #8
    eb64:	46bd      	mov	sp, r7
    eb66:	bd80      	pop	{r7, pc}
    eb68:	0000eaf5 	.word	0x0000eaf5
    eb6c:	00014a90 	.word	0x00014a90

0000eb70 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    eb70:	b480      	push	{r7}
    eb72:	b083      	sub	sp, #12
    eb74:	af00      	add	r7, sp, #0
    eb76:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    eb78:	4b06      	ldr	r3, [pc, #24]	; (eb94 <_ZL10USBTimeoutPK10timer_task+0x24>)
    eb7a:	681b      	ldr	r3, [r3, #0]
    eb7c:	2201      	movs	r2, #1
    eb7e:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    eb80:	4b04      	ldr	r3, [pc, #16]	; (eb94 <_ZL10USBTimeoutPK10timer_task+0x24>)
    eb82:	681b      	ldr	r3, [r3, #0]
    eb84:	2200      	movs	r2, #0
    eb86:	741a      	strb	r2, [r3, #16]
	
}
    eb88:	bf00      	nop
    eb8a:	370c      	adds	r7, #12
    eb8c:	46bd      	mov	sp, r7
    eb8e:	bc80      	pop	{r7}
    eb90:	4770      	bx	lr
    eb92:	bf00      	nop
    eb94:	20001a00 	.word	0x20001a00

0000eb98 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    eb98:	b480      	push	{r7}
    eb9a:	b083      	sub	sp, #12
    eb9c:	af00      	add	r7, sp, #0
    eb9e:	4603      	mov	r3, r0
    eba0:	603a      	str	r2, [r7, #0]
    eba2:	71fb      	strb	r3, [r7, #7]
    eba4:	460b      	mov	r3, r1
    eba6:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    eba8:	4b08      	ldr	r3, [pc, #32]	; (ebcc <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ebaa:	681b      	ldr	r3, [r3, #0]
    ebac:	2201      	movs	r2, #1
    ebae:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    ebb0:	4b06      	ldr	r3, [pc, #24]	; (ebcc <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ebb2:	681b      	ldr	r3, [r3, #0]
    ebb4:	2201      	movs	r2, #1
    ebb6:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ebb8:	4b04      	ldr	r3, [pc, #16]	; (ebcc <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ebba:	681b      	ldr	r3, [r3, #0]
    ebbc:	2201      	movs	r2, #1
    ebbe:	741a      	strb	r2, [r3, #16]


	return false;
    ebc0:	2300      	movs	r3, #0
}
    ebc2:	4618      	mov	r0, r3
    ebc4:	370c      	adds	r7, #12
    ebc6:	46bd      	mov	sp, r7
    ebc8:	bc80      	pop	{r7}
    ebca:	4770      	bx	lr
    ebcc:	20001a00 	.word	0x20001a00

0000ebd0 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ebd0:	b480      	push	{r7}
    ebd2:	b083      	sub	sp, #12
    ebd4:	af00      	add	r7, sp, #0
    ebd6:	4603      	mov	r3, r0
    ebd8:	603a      	str	r2, [r7, #0]
    ebda:	71fb      	strb	r3, [r7, #7]
    ebdc:	460b      	mov	r3, r1
    ebde:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    ebe0:	4b08      	ldr	r3, [pc, #32]	; (ec04 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ebe2:	681b      	ldr	r3, [r3, #0]
    ebe4:	2201      	movs	r2, #1
    ebe6:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    ebe8:	4b06      	ldr	r3, [pc, #24]	; (ec04 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ebea:	681b      	ldr	r3, [r3, #0]
    ebec:	2201      	movs	r2, #1
    ebee:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ebf0:	4b04      	ldr	r3, [pc, #16]	; (ec04 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ebf2:	681b      	ldr	r3, [r3, #0]
    ebf4:	2201      	movs	r2, #1
    ebf6:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    ebf8:	2300      	movs	r3, #0
}
    ebfa:	4618      	mov	r0, r3
    ebfc:	370c      	adds	r7, #12
    ebfe:	46bd      	mov	sp, r7
    ec00:	bc80      	pop	{r7}
    ec02:	4770      	bx	lr
    ec04:	20001a00 	.word	0x20001a00

0000ec08 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    ec08:	b580      	push	{r7, lr}
    ec0a:	b082      	sub	sp, #8
    ec0c:	af00      	add	r7, sp, #0
    ec0e:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    ec10:	793b      	ldrb	r3, [r7, #4]
    ec12:	f003 0301 	and.w	r3, r3, #1
    ec16:	b2db      	uxtb	r3, r3
    ec18:	2b00      	cmp	r3, #0
    ec1a:	d013      	beq.n	ec44 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    ec1c:	490c      	ldr	r1, [pc, #48]	; (ec50 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    ec1e:	2000      	movs	r0, #0
    ec20:	4b0c      	ldr	r3, [pc, #48]	; (ec54 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ec22:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    ec24:	490c      	ldr	r1, [pc, #48]	; (ec58 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    ec26:	2001      	movs	r0, #1
    ec28:	4b0a      	ldr	r3, [pc, #40]	; (ec54 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ec2a:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    ec2c:	4b0b      	ldr	r3, [pc, #44]	; (ec5c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ec2e:	681b      	ldr	r3, [r3, #0]
    ec30:	2201      	movs	r2, #1
    ec32:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    ec34:	4b09      	ldr	r3, [pc, #36]	; (ec5c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ec36:	681b      	ldr	r3, [r3, #0]
    ec38:	2201      	movs	r2, #1
    ec3a:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    ec3c:	4b07      	ldr	r3, [pc, #28]	; (ec5c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ec3e:	681b      	ldr	r3, [r3, #0]
    ec40:	2201      	movs	r2, #1
    ec42:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    ec44:	2300      	movs	r3, #0
}
    ec46:	4618      	mov	r0, r3
    ec48:	3708      	adds	r7, #8
    ec4a:	46bd      	mov	sp, r7
    ec4c:	bd80      	pop	{r7, pc}
    ec4e:	bf00      	nop
    ec50:	0000eb99 	.word	0x0000eb99
    ec54:	0000cd19 	.word	0x0000cd19
    ec58:	0000ebd1 	.word	0x0000ebd1
    ec5c:	20001a00 	.word	0x20001a00

0000ec60 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    ec60:	b580      	push	{r7, lr}
    ec62:	b082      	sub	sp, #8
    ec64:	af00      	add	r7, sp, #0
    ec66:	6078      	str	r0, [r7, #4]
    ec68:	687b      	ldr	r3, [r7, #4]
    ec6a:	4618      	mov	r0, r3
    ec6c:	4b0a      	ldr	r3, [pc, #40]	; (ec98 <_ZN9CDC_ClassC1Ev+0x38>)
    ec6e:	4798      	blx	r3
    ec70:	687b      	ldr	r3, [r7, #4]
    ec72:	3310      	adds	r3, #16
    ec74:	4618      	mov	r0, r3
    ec76:	4b09      	ldr	r3, [pc, #36]	; (ec9c <_ZN9CDC_ClassC1Ev+0x3c>)
    ec78:	4798      	blx	r3
    ec7a:	4a09      	ldr	r2, [pc, #36]	; (eca0 <_ZN9CDC_ClassC1Ev+0x40>)
    ec7c:	687b      	ldr	r3, [r7, #4]
    ec7e:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    ec80:	687b      	ldr	r3, [r7, #4]
    ec82:	f04f 32ff 	mov.w	r2, #4294967295
    ec86:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    ec88:	4a06      	ldr	r2, [pc, #24]	; (eca4 <_ZN9CDC_ClassC1Ev+0x44>)
    ec8a:	687b      	ldr	r3, [r7, #4]
    ec8c:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    ec8e:	687b      	ldr	r3, [r7, #4]
    ec90:	4618      	mov	r0, r3
    ec92:	3708      	adds	r7, #8
    ec94:	46bd      	mov	sp, r7
    ec96:	bd80      	pop	{r7, pc}
    ec98:	0000eb41 	.word	0x0000eb41
    ec9c:	0000f3d9 	.word	0x0000f3d9
    eca0:	00014a60 	.word	0x00014a60
    eca4:	20001a00 	.word	0x20001a00

0000eca8 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    eca8:	b580      	push	{r7, lr}
    ecaa:	b082      	sub	sp, #8
    ecac:	af00      	add	r7, sp, #0
    ecae:	6078      	str	r0, [r7, #4]
    ecb0:	4a06      	ldr	r2, [pc, #24]	; (eccc <_ZN9CDC_ClassD1Ev+0x24>)
    ecb2:	687b      	ldr	r3, [r7, #4]
    ecb4:	601a      	str	r2, [r3, #0]
    ecb6:	687b      	ldr	r3, [r7, #4]
    ecb8:	3310      	adds	r3, #16
    ecba:	4618      	mov	r0, r3
    ecbc:	4b04      	ldr	r3, [pc, #16]	; (ecd0 <_ZN9CDC_ClassD1Ev+0x28>)
    ecbe:	4798      	blx	r3
{
} //~CDC_Class
    ecc0:	687b      	ldr	r3, [r7, #4]
    ecc2:	4618      	mov	r0, r3
    ecc4:	3708      	adds	r7, #8
    ecc6:	46bd      	mov	sp, r7
    ecc8:	bd80      	pop	{r7, pc}
    ecca:	bf00      	nop
    eccc:	00014a60 	.word	0x00014a60
    ecd0:	0000f3f9 	.word	0x0000f3f9

0000ecd4 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    ecd4:	b580      	push	{r7, lr}
    ecd6:	b082      	sub	sp, #8
    ecd8:	af00      	add	r7, sp, #0
    ecda:	6078      	str	r0, [r7, #4]
	
	OnInit();
    ecdc:	687b      	ldr	r3, [r7, #4]
    ecde:	3310      	adds	r3, #16
    ece0:	4618      	mov	r0, r3
    ece2:	4b09      	ldr	r3, [pc, #36]	; (ed08 <_ZN9CDC_Class4InitEv+0x34>)
    ece4:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    ece6:	4909      	ldr	r1, [pc, #36]	; (ed0c <_ZN9CDC_Class4InitEv+0x38>)
    ece8:	2003      	movs	r0, #3
    ecea:	4b09      	ldr	r3, [pc, #36]	; (ed10 <_ZN9CDC_Class4InitEv+0x3c>)
    ecec:	4798      	blx	r3
	delay_ms(100);
    ecee:	2064      	movs	r0, #100	; 0x64
    ecf0:	4b08      	ldr	r3, [pc, #32]	; (ed14 <_ZN9CDC_Class4InitEv+0x40>)
    ecf2:	4798      	blx	r3
		
	if (connected)
    ecf4:	687b      	ldr	r3, [r7, #4]
    ecf6:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    ecf8:	2064      	movs	r0, #100	; 0x64
    ecfa:	4b06      	ldr	r3, [pc, #24]	; (ed14 <_ZN9CDC_Class4InitEv+0x40>)
    ecfc:	4798      	blx	r3

	

}
    ecfe:	bf00      	nop
    ed00:	3708      	adds	r7, #8
    ed02:	46bd      	mov	sp, r7
    ed04:	bd80      	pop	{r7, pc}
    ed06:	bf00      	nop
    ed08:	0000f40d 	.word	0x0000f40d
    ed0c:	0000ec09 	.word	0x0000ec09
    ed10:	0000cd19 	.word	0x0000cd19
    ed14:	00002bb5 	.word	0x00002bb5

0000ed18 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    ed18:	b580      	push	{r7, lr}
    ed1a:	b082      	sub	sp, #8
    ed1c:	af00      	add	r7, sp, #0
    ed1e:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    ed20:	4b03      	ldr	r3, [pc, #12]	; (ed30 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    ed22:	4798      	blx	r3
    ed24:	4603      	mov	r3, r0
	
}
    ed26:	4618      	mov	r0, r3
    ed28:	3708      	adds	r7, #8
    ed2a:	46bd      	mov	sp, r7
    ed2c:	bd80      	pop	{r7, pc}
    ed2e:	bf00      	nop
    ed30:	0000cd91 	.word	0x0000cd91

0000ed34 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    ed34:	b580      	push	{r7, lr}
    ed36:	b084      	sub	sp, #16
    ed38:	af00      	add	r7, sp, #0
    ed3a:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    ed3c:	687b      	ldr	r3, [r7, #4]
    ed3e:	699b      	ldr	r3, [r3, #24]
    ed40:	f1b3 3fff 	cmp.w	r3, #4294967295
    ed44:	bf14      	ite	ne
    ed46:	2301      	movne	r3, #1
    ed48:	2300      	moveq	r3, #0
    ed4a:	b2db      	uxtb	r3, r3
    ed4c:	2b00      	cmp	r3, #0
    ed4e:	d002      	beq.n	ed56 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    ed50:	687b      	ldr	r3, [r7, #4]
    ed52:	699b      	ldr	r3, [r3, #24]
    ed54:	e011      	b.n	ed7a <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    ed56:	687b      	ldr	r3, [r7, #4]
    ed58:	681b      	ldr	r3, [r3, #0]
    ed5a:	331c      	adds	r3, #28
    ed5c:	681b      	ldr	r3, [r3, #0]
    ed5e:	f107 010f 	add.w	r1, r7, #15
    ed62:	2201      	movs	r2, #1
    ed64:	6878      	ldr	r0, [r7, #4]
    ed66:	4798      	blx	r3
    ed68:	4602      	mov	r2, r0
    ed6a:	687b      	ldr	r3, [r7, #4]
    ed6c:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    ed6e:	7bfb      	ldrb	r3, [r7, #15]
    ed70:	461a      	mov	r2, r3
    ed72:	687b      	ldr	r3, [r7, #4]
    ed74:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    ed76:	687b      	ldr	r3, [r7, #4]
    ed78:	699b      	ldr	r3, [r3, #24]
}
    ed7a:	4618      	mov	r0, r3
    ed7c:	3710      	adds	r7, #16
    ed7e:	46bd      	mov	sp, r7
    ed80:	bd80      	pop	{r7, pc}
	...

0000ed84 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    ed84:	b580      	push	{r7, lr}
    ed86:	b086      	sub	sp, #24
    ed88:	af00      	add	r7, sp, #0
    ed8a:	60f8      	str	r0, [r7, #12]
    ed8c:	60b9      	str	r1, [r7, #8]
    ed8e:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    ed90:	68fb      	ldr	r3, [r7, #12]
    ed92:	7c1b      	ldrb	r3, [r3, #16]
    ed94:	b2db      	uxtb	r3, r3
    ed96:	2b00      	cmp	r3, #0
    ed98:	d02e      	beq.n	edf8 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    ed9a:	687a      	ldr	r2, [r7, #4]
    ed9c:	4613      	mov	r3, r2
    ed9e:	009b      	lsls	r3, r3, #2
    eda0:	4413      	add	r3, r2
    eda2:	005b      	lsls	r3, r3, #1
    eda4:	461a      	mov	r2, r3
    eda6:	4918      	ldr	r1, [pc, #96]	; (ee08 <_ZN9CDC_Class8readDataEPvl+0x84>)
    eda8:	4818      	ldr	r0, [pc, #96]	; (ee0c <_ZN9CDC_Class8readDataEPvl+0x88>)
    edaa:	4b19      	ldr	r3, [pc, #100]	; (ee10 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    edac:	4798      	blx	r3
		rxReady=false;
    edae:	68fb      	ldr	r3, [r7, #12]
    edb0:	2200      	movs	r2, #0
    edb2:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    edb4:	687b      	ldr	r3, [r7, #4]
    edb6:	4619      	mov	r1, r3
    edb8:	68b8      	ldr	r0, [r7, #8]
    edba:	4b16      	ldr	r3, [pc, #88]	; (ee14 <_ZN9CDC_Class8readDataEPvl+0x90>)
    edbc:	4798      	blx	r3
    edbe:	4603      	mov	r3, r0
    edc0:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    edc2:	68fb      	ldr	r3, [r7, #12]
    edc4:	7d5b      	ldrb	r3, [r3, #21]
    edc6:	b2db      	uxtb	r3, r3
    edc8:	f083 0301 	eor.w	r3, r3, #1
    edcc:	b2db      	uxtb	r3, r3
    edce:	2b00      	cmp	r3, #0
    edd0:	d006      	beq.n	ede0 <_ZN9CDC_Class8readDataEPvl+0x5c>
    edd2:	68fb      	ldr	r3, [r7, #12]
    edd4:	7c1b      	ldrb	r3, [r3, #16]
    edd6:	b2db      	uxtb	r3, r3
    edd8:	2b00      	cmp	r3, #0
    edda:	d001      	beq.n	ede0 <_ZN9CDC_Class8readDataEPvl+0x5c>
    eddc:	2301      	movs	r3, #1
    edde:	e000      	b.n	ede2 <_ZN9CDC_Class8readDataEPvl+0x5e>
    ede0:	2300      	movs	r3, #0
    ede2:	2b00      	cmp	r3, #0
    ede4:	d000      	beq.n	ede8 <_ZN9CDC_Class8readDataEPvl+0x64>
    ede6:	e7ec      	b.n	edc2 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    ede8:	4808      	ldr	r0, [pc, #32]	; (ee0c <_ZN9CDC_Class8readDataEPvl+0x88>)
    edea:	4b0b      	ldr	r3, [pc, #44]	; (ee18 <_ZN9CDC_Class8readDataEPvl+0x94>)
    edec:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    edee:	4906      	ldr	r1, [pc, #24]	; (ee08 <_ZN9CDC_Class8readDataEPvl+0x84>)
    edf0:	4806      	ldr	r0, [pc, #24]	; (ee0c <_ZN9CDC_Class8readDataEPvl+0x88>)
    edf2:	4b0a      	ldr	r3, [pc, #40]	; (ee1c <_ZN9CDC_Class8readDataEPvl+0x98>)
    edf4:	4798      	blx	r3
    edf6:	e001      	b.n	edfc <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    edf8:	2300      	movs	r3, #0
    edfa:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    edfc:	7dfb      	ldrb	r3, [r7, #23]
}
    edfe:	4618      	mov	r0, r3
    ee00:	3718      	adds	r7, #24
    ee02:	46bd      	mov	sp, r7
    ee04:	bd80      	pop	{r7, pc}
    ee06:	bf00      	nop
    ee08:	0000eb71 	.word	0x0000eb71
    ee0c:	200019a0 	.word	0x200019a0
    ee10:	0000e849 	.word	0x0000e849
    ee14:	0000cc6d 	.word	0x0000cc6d
    ee18:	0000e6d5 	.word	0x0000e6d5
    ee1c:	0000e7f1 	.word	0x0000e7f1

0000ee20 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    ee20:	b580      	push	{r7, lr}
    ee22:	b086      	sub	sp, #24
    ee24:	af00      	add	r7, sp, #0
    ee26:	60f8      	str	r0, [r7, #12]
    ee28:	60b9      	str	r1, [r7, #8]
    ee2a:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    ee2c:	68fb      	ldr	r3, [r7, #12]
    ee2e:	2200      	movs	r2, #0
    ee30:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    ee32:	687b      	ldr	r3, [r7, #4]
    ee34:	4619      	mov	r1, r3
    ee36:	68b8      	ldr	r0, [r7, #8]
    ee38:	4b04      	ldr	r3, [pc, #16]	; (ee4c <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    ee3a:	4798      	blx	r3
    ee3c:	4603      	mov	r3, r0
    ee3e:	617b      	str	r3, [r7, #20]
	return r;
    ee40:	697b      	ldr	r3, [r7, #20]
}
    ee42:	4618      	mov	r0, r3
    ee44:	3718      	adds	r7, #24
    ee46:	46bd      	mov	sp, r7
    ee48:	bd80      	pop	{r7, pc}
    ee4a:	bf00      	nop
    ee4c:	0000cc6d 	.word	0x0000cc6d

0000ee50 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    ee50:	b580      	push	{r7, lr}
    ee52:	b084      	sub	sp, #16
    ee54:	af00      	add	r7, sp, #0
    ee56:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    ee58:	687b      	ldr	r3, [r7, #4]
    ee5a:	2200      	movs	r2, #0
    ee5c:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    ee5e:	f107 030f 	add.w	r3, r7, #15
    ee62:	2101      	movs	r1, #1
    ee64:	4618      	mov	r0, r3
    ee66:	4b08      	ldr	r3, [pc, #32]	; (ee88 <_ZN9CDC_Class4readEv+0x38>)
    ee68:	4798      	blx	r3
	while(!rxReady);
    ee6a:	687b      	ldr	r3, [r7, #4]
    ee6c:	7d5b      	ldrb	r3, [r3, #21]
    ee6e:	b2db      	uxtb	r3, r3
    ee70:	f083 0301 	eor.w	r3, r3, #1
    ee74:	b2db      	uxtb	r3, r3
    ee76:	2b00      	cmp	r3, #0
    ee78:	d000      	beq.n	ee7c <_ZN9CDC_Class4readEv+0x2c>
    ee7a:	e7f6      	b.n	ee6a <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    ee7c:	7bfb      	ldrb	r3, [r7, #15]
}
    ee7e:	4618      	mov	r0, r3
    ee80:	3710      	adds	r7, #16
    ee82:	46bd      	mov	sp, r7
    ee84:	bd80      	pop	{r7, pc}
    ee86:	bf00      	nop
    ee88:	0000cc6d 	.word	0x0000cc6d

0000ee8c <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    ee8c:	b580      	push	{r7, lr}
    ee8e:	b082      	sub	sp, #8
    ee90:	af00      	add	r7, sp, #0
    ee92:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    ee94:	687b      	ldr	r3, [r7, #4]
    ee96:	331c      	adds	r3, #28
    ee98:	2140      	movs	r1, #64	; 0x40
    ee9a:	4618      	mov	r0, r3
    ee9c:	4b02      	ldr	r3, [pc, #8]	; (eea8 <_ZN9CDC_Class5flushEv+0x1c>)
    ee9e:	4798      	blx	r3
}
    eea0:	bf00      	nop
    eea2:	3708      	adds	r7, #8
    eea4:	46bd      	mov	sp, r7
    eea6:	bd80      	pop	{r7, pc}
    eea8:	0000ccb1 	.word	0x0000ccb1

0000eeac <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    eeac:	b580      	push	{r7, lr}
    eeae:	b082      	sub	sp, #8
    eeb0:	af00      	add	r7, sp, #0
    eeb2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    eeb4:	4b02      	ldr	r3, [pc, #8]	; (eec0 <_ZN9CDC_Class5clearEv+0x14>)
    eeb6:	4798      	blx	r3
}
    eeb8:	bf00      	nop
    eeba:	3708      	adds	r7, #8
    eebc:	46bd      	mov	sp, r7
    eebe:	bd80      	pop	{r7, pc}
    eec0:	0000ccf5 	.word	0x0000ccf5

0000eec4 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    eec4:	b580      	push	{r7, lr}
    eec6:	b082      	sub	sp, #8
    eec8:	af00      	add	r7, sp, #0
    eeca:	6078      	str	r0, [r7, #4]
    eecc:	460b      	mov	r3, r1
    eece:	70fb      	strb	r3, [r7, #3]
	if (connected){
    eed0:	687b      	ldr	r3, [r7, #4]
    eed2:	7c1b      	ldrb	r3, [r3, #16]
    eed4:	b2db      	uxtb	r3, r3
    eed6:	2b00      	cmp	r3, #0
    eed8:	d012      	beq.n	ef00 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    eeda:	687b      	ldr	r3, [r7, #4]
    eedc:	7d1b      	ldrb	r3, [r3, #20]
    eede:	b2db      	uxtb	r3, r3
    eee0:	f083 0301 	eor.w	r3, r3, #1
    eee4:	b2db      	uxtb	r3, r3
    eee6:	2b00      	cmp	r3, #0
    eee8:	d000      	beq.n	eeec <_ZN9CDC_Class5writeEh+0x28>
    eeea:	e7f6      	b.n	eeda <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    eeec:	687b      	ldr	r3, [r7, #4]
    eeee:	681b      	ldr	r3, [r3, #0]
    eef0:	3324      	adds	r3, #36	; 0x24
    eef2:	681b      	ldr	r3, [r3, #0]
    eef4:	1cf9      	adds	r1, r7, #3
    eef6:	2201      	movs	r2, #1
    eef8:	6878      	ldr	r0, [r7, #4]
    eefa:	4798      	blx	r3
    eefc:	4603      	mov	r3, r0
    eefe:	e000      	b.n	ef02 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    ef00:	2300      	movs	r3, #0
	}
		
}
    ef02:	4618      	mov	r0, r3
    ef04:	3708      	adds	r7, #8
    ef06:	46bd      	mov	sp, r7
    ef08:	bd80      	pop	{r7, pc}
	...

0000ef0c <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    ef0c:	b580      	push	{r7, lr}
    ef0e:	b086      	sub	sp, #24
    ef10:	af00      	add	r7, sp, #0
    ef12:	60f8      	str	r0, [r7, #12]
    ef14:	60b9      	str	r1, [r7, #8]
    ef16:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    ef18:	68fb      	ldr	r3, [r7, #12]
    ef1a:	7c1b      	ldrb	r3, [r3, #16]
    ef1c:	b2db      	uxtb	r3, r3
    ef1e:	2b00      	cmp	r3, #0
    ef20:	d02f      	beq.n	ef82 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    ef22:	687a      	ldr	r2, [r7, #4]
    ef24:	4613      	mov	r3, r2
    ef26:	009b      	lsls	r3, r3, #2
    ef28:	4413      	add	r3, r2
    ef2a:	005b      	lsls	r3, r3, #1
    ef2c:	461a      	mov	r2, r3
    ef2e:	4917      	ldr	r1, [pc, #92]	; (ef8c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    ef30:	4817      	ldr	r0, [pc, #92]	; (ef90 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ef32:	4b18      	ldr	r3, [pc, #96]	; (ef94 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    ef34:	4798      	blx	r3
		txReady=false;
    ef36:	68fb      	ldr	r3, [r7, #12]
    ef38:	2200      	movs	r2, #0
    ef3a:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    ef3c:	687b      	ldr	r3, [r7, #4]
    ef3e:	4619      	mov	r1, r3
    ef40:	68b8      	ldr	r0, [r7, #8]
    ef42:	4b15      	ldr	r3, [pc, #84]	; (ef98 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    ef44:	4798      	blx	r3
    ef46:	4603      	mov	r3, r0
    ef48:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    ef4a:	68fb      	ldr	r3, [r7, #12]
    ef4c:	7d1b      	ldrb	r3, [r3, #20]
    ef4e:	b2db      	uxtb	r3, r3
    ef50:	f083 0301 	eor.w	r3, r3, #1
    ef54:	b2db      	uxtb	r3, r3
    ef56:	2b00      	cmp	r3, #0
    ef58:	d006      	beq.n	ef68 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    ef5a:	68fb      	ldr	r3, [r7, #12]
    ef5c:	7c1b      	ldrb	r3, [r3, #16]
    ef5e:	b2db      	uxtb	r3, r3
    ef60:	2b00      	cmp	r3, #0
    ef62:	d001      	beq.n	ef68 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    ef64:	2301      	movs	r3, #1
    ef66:	e000      	b.n	ef6a <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    ef68:	2300      	movs	r3, #0
    ef6a:	2b00      	cmp	r3, #0
    ef6c:	d000      	beq.n	ef70 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    ef6e:	e7ec      	b.n	ef4a <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    ef70:	4807      	ldr	r0, [pc, #28]	; (ef90 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ef72:	4b0a      	ldr	r3, [pc, #40]	; (ef9c <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    ef74:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ef76:	4905      	ldr	r1, [pc, #20]	; (ef8c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    ef78:	4805      	ldr	r0, [pc, #20]	; (ef90 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ef7a:	4b09      	ldr	r3, [pc, #36]	; (efa0 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    ef7c:	4798      	blx	r3
		return r;
    ef7e:	697b      	ldr	r3, [r7, #20]
    ef80:	e000      	b.n	ef84 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    ef82:	2300      	movs	r3, #0
	}
	

}
    ef84:	4618      	mov	r0, r3
    ef86:	3718      	adds	r7, #24
    ef88:	46bd      	mov	sp, r7
    ef8a:	bd80      	pop	{r7, pc}
    ef8c:	0000eb71 	.word	0x0000eb71
    ef90:	200019a0 	.word	0x200019a0
    ef94:	0000e849 	.word	0x0000e849
    ef98:	0000ccb1 	.word	0x0000ccb1
    ef9c:	0000e6d5 	.word	0x0000e6d5
    efa0:	0000e7f1 	.word	0x0000e7f1

0000efa4 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    efa4:	b580      	push	{r7, lr}
    efa6:	b086      	sub	sp, #24
    efa8:	af00      	add	r7, sp, #0
    efaa:	60f8      	str	r0, [r7, #12]
    efac:	60b9      	str	r1, [r7, #8]
    efae:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    efb0:	68fb      	ldr	r3, [r7, #12]
    efb2:	2200      	movs	r2, #0
    efb4:	751a      	strb	r2, [r3, #20]

 	if (connected){
    efb6:	68fb      	ldr	r3, [r7, #12]
    efb8:	7c1b      	ldrb	r3, [r3, #16]
    efba:	b2db      	uxtb	r3, r3
    efbc:	2b00      	cmp	r3, #0
    efbe:	d02a      	beq.n	f016 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    efc0:	687a      	ldr	r2, [r7, #4]
    efc2:	4613      	mov	r3, r2
    efc4:	009b      	lsls	r3, r3, #2
    efc6:	4413      	add	r3, r2
    efc8:	005b      	lsls	r3, r3, #1
    efca:	461a      	mov	r2, r3
    efcc:	4915      	ldr	r1, [pc, #84]	; (f024 <_ZN9CDC_Class5writeEPKhj+0x80>)
    efce:	4816      	ldr	r0, [pc, #88]	; (f028 <_ZN9CDC_Class5writeEPKhj+0x84>)
    efd0:	4b16      	ldr	r3, [pc, #88]	; (f02c <_ZN9CDC_Class5writeEPKhj+0x88>)
    efd2:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    efd4:	6879      	ldr	r1, [r7, #4]
    efd6:	68b8      	ldr	r0, [r7, #8]
    efd8:	4b15      	ldr	r3, [pc, #84]	; (f030 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    efda:	4798      	blx	r3
    efdc:	4603      	mov	r3, r0
    efde:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    efe0:	68fb      	ldr	r3, [r7, #12]
    efe2:	7d1b      	ldrb	r3, [r3, #20]
    efe4:	b2db      	uxtb	r3, r3
    efe6:	f083 0301 	eor.w	r3, r3, #1
    efea:	b2db      	uxtb	r3, r3
    efec:	2b00      	cmp	r3, #0
    efee:	d006      	beq.n	effe <_ZN9CDC_Class5writeEPKhj+0x5a>
    eff0:	68fb      	ldr	r3, [r7, #12]
    eff2:	7c1b      	ldrb	r3, [r3, #16]
    eff4:	b2db      	uxtb	r3, r3
    eff6:	2b00      	cmp	r3, #0
    eff8:	d001      	beq.n	effe <_ZN9CDC_Class5writeEPKhj+0x5a>
    effa:	2301      	movs	r3, #1
    effc:	e000      	b.n	f000 <_ZN9CDC_Class5writeEPKhj+0x5c>
    effe:	2300      	movs	r3, #0
    f000:	2b00      	cmp	r3, #0
    f002:	d000      	beq.n	f006 <_ZN9CDC_Class5writeEPKhj+0x62>
    f004:	e7ec      	b.n	efe0 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    f006:	4808      	ldr	r0, [pc, #32]	; (f028 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f008:	4b0a      	ldr	r3, [pc, #40]	; (f034 <_ZN9CDC_Class5writeEPKhj+0x90>)
    f00a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f00c:	4905      	ldr	r1, [pc, #20]	; (f024 <_ZN9CDC_Class5writeEPKhj+0x80>)
    f00e:	4806      	ldr	r0, [pc, #24]	; (f028 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f010:	4b09      	ldr	r3, [pc, #36]	; (f038 <_ZN9CDC_Class5writeEPKhj+0x94>)
    f012:	4798      	blx	r3
    f014:	e001      	b.n	f01a <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    f016:	2300      	movs	r3, #0
    f018:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    f01a:	697b      	ldr	r3, [r7, #20]
}
    f01c:	4618      	mov	r0, r3
    f01e:	3718      	adds	r7, #24
    f020:	46bd      	mov	sp, r7
    f022:	bd80      	pop	{r7, pc}
    f024:	0000eb71 	.word	0x0000eb71
    f028:	200019a0 	.word	0x200019a0
    f02c:	0000e849 	.word	0x0000e849
    f030:	0000ccb1 	.word	0x0000ccb1
    f034:	0000e6d5 	.word	0x0000e6d5
    f038:	0000e7f1 	.word	0x0000e7f1

0000f03c <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    f03c:	b480      	push	{r7}
    f03e:	b083      	sub	sp, #12
    f040:	af00      	add	r7, sp, #0
    f042:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    f044:	687b      	ldr	r3, [r7, #4]
    f046:	7d5b      	ldrb	r3, [r3, #21]
    f048:	b2db      	uxtb	r3, r3
    f04a:	2b00      	cmp	r3, #0
    f04c:	d006      	beq.n	f05c <_ZN9CDC_Class9availableEv+0x20>
    f04e:	687b      	ldr	r3, [r7, #4]
    f050:	7d1b      	ldrb	r3, [r3, #20]
    f052:	b2db      	uxtb	r3, r3
    f054:	2b00      	cmp	r3, #0
    f056:	d001      	beq.n	f05c <_ZN9CDC_Class9availableEv+0x20>
    f058:	2301      	movs	r3, #1
    f05a:	e000      	b.n	f05e <_ZN9CDC_Class9availableEv+0x22>
    f05c:	2300      	movs	r3, #0
    f05e:	2b00      	cmp	r3, #0
    f060:	d001      	beq.n	f066 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    f062:	2301      	movs	r3, #1
    f064:	e000      	b.n	f068 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    f066:	2300      	movs	r3, #0
	}
	
}
    f068:	4618      	mov	r0, r3
    f06a:	370c      	adds	r7, #12
    f06c:	46bd      	mov	sp, r7
    f06e:	bc80      	pop	{r7}
    f070:	4770      	bx	lr
	...

0000f074 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    f074:	b580      	push	{r7, lr}
    f076:	b082      	sub	sp, #8
    f078:	af00      	add	r7, sp, #0
    f07a:	6078      	str	r0, [r7, #4]
    f07c:	6039      	str	r1, [r7, #0]
    f07e:	687b      	ldr	r3, [r7, #4]
    f080:	2b01      	cmp	r3, #1
    f082:	d154      	bne.n	f12e <_Z41__static_initialization_and_destruction_0ii+0xba>
    f084:	683b      	ldr	r3, [r7, #0]
    f086:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f08a:	4293      	cmp	r3, r2
    f08c:	d14f      	bne.n	f12e <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f08e:	492a      	ldr	r1, [pc, #168]	; (f138 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f090:	482a      	ldr	r0, [pc, #168]	; (f13c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f092:	4b2b      	ldr	r3, [pc, #172]	; (f140 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f094:	4798      	blx	r3
    f096:	4a2b      	ldr	r2, [pc, #172]	; (f144 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f098:	492b      	ldr	r1, [pc, #172]	; (f148 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f09a:	4828      	ldr	r0, [pc, #160]	; (f13c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f09c:	4b2b      	ldr	r3, [pc, #172]	; (f14c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f09e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f0a0:	492b      	ldr	r1, [pc, #172]	; (f150 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f0a2:	482c      	ldr	r0, [pc, #176]	; (f154 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f0a4:	4b26      	ldr	r3, [pc, #152]	; (f140 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f0a6:	4798      	blx	r3
    f0a8:	4a26      	ldr	r2, [pc, #152]	; (f144 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f0aa:	4927      	ldr	r1, [pc, #156]	; (f148 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f0ac:	4829      	ldr	r0, [pc, #164]	; (f154 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f0ae:	4b27      	ldr	r3, [pc, #156]	; (f14c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f0b0:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f0b2:	4929      	ldr	r1, [pc, #164]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f0b4:	4829      	ldr	r0, [pc, #164]	; (f15c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f0b6:	4b22      	ldr	r3, [pc, #136]	; (f140 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f0b8:	4798      	blx	r3
    f0ba:	4a22      	ldr	r2, [pc, #136]	; (f144 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f0bc:	4922      	ldr	r1, [pc, #136]	; (f148 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f0be:	4827      	ldr	r0, [pc, #156]	; (f15c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f0c0:	4b22      	ldr	r3, [pc, #136]	; (f14c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f0c2:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f0c4:	4926      	ldr	r1, [pc, #152]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f0c6:	4827      	ldr	r0, [pc, #156]	; (f164 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f0c8:	4b1d      	ldr	r3, [pc, #116]	; (f140 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f0ca:	4798      	blx	r3
    f0cc:	4a1d      	ldr	r2, [pc, #116]	; (f144 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f0ce:	491e      	ldr	r1, [pc, #120]	; (f148 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f0d0:	4824      	ldr	r0, [pc, #144]	; (f164 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f0d2:	4b1e      	ldr	r3, [pc, #120]	; (f14c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f0d4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f0d6:	4924      	ldr	r1, [pc, #144]	; (f168 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f0d8:	4824      	ldr	r0, [pc, #144]	; (f16c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f0da:	4b19      	ldr	r3, [pc, #100]	; (f140 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f0dc:	4798      	blx	r3
    f0de:	4a19      	ldr	r2, [pc, #100]	; (f144 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f0e0:	4919      	ldr	r1, [pc, #100]	; (f148 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f0e2:	4822      	ldr	r0, [pc, #136]	; (f16c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f0e4:	4b19      	ldr	r3, [pc, #100]	; (f14c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f0e6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f0e8:	4921      	ldr	r1, [pc, #132]	; (f170 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f0ea:	4822      	ldr	r0, [pc, #136]	; (f174 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f0ec:	4b14      	ldr	r3, [pc, #80]	; (f140 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f0ee:	4798      	blx	r3
    f0f0:	4a14      	ldr	r2, [pc, #80]	; (f144 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f0f2:	4915      	ldr	r1, [pc, #84]	; (f148 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f0f4:	481f      	ldr	r0, [pc, #124]	; (f174 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f0f6:	4b15      	ldr	r3, [pc, #84]	; (f14c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f0f8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f0fa:	491f      	ldr	r1, [pc, #124]	; (f178 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f0fc:	481f      	ldr	r0, [pc, #124]	; (f17c <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f0fe:	4b10      	ldr	r3, [pc, #64]	; (f140 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f100:	4798      	blx	r3
    f102:	4a10      	ldr	r2, [pc, #64]	; (f144 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f104:	4910      	ldr	r1, [pc, #64]	; (f148 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f106:	481d      	ldr	r0, [pc, #116]	; (f17c <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f108:	4b10      	ldr	r3, [pc, #64]	; (f14c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f10a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f10c:	491c      	ldr	r1, [pc, #112]	; (f180 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f10e:	481d      	ldr	r0, [pc, #116]	; (f184 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f110:	4b0b      	ldr	r3, [pc, #44]	; (f140 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f112:	4798      	blx	r3
    f114:	4a0b      	ldr	r2, [pc, #44]	; (f144 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f116:	490c      	ldr	r1, [pc, #48]	; (f148 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f118:	481a      	ldr	r0, [pc, #104]	; (f184 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f11a:	4b0c      	ldr	r3, [pc, #48]	; (f14c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f11c:	4798      	blx	r3
    f11e:	481a      	ldr	r0, [pc, #104]	; (f188 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f120:	4b1a      	ldr	r3, [pc, #104]	; (f18c <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f122:	4798      	blx	r3
    f124:	4a07      	ldr	r2, [pc, #28]	; (f144 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f126:	491a      	ldr	r1, [pc, #104]	; (f190 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f128:	4817      	ldr	r0, [pc, #92]	; (f188 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f12a:	4b08      	ldr	r3, [pc, #32]	; (f14c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f12c:	4798      	blx	r3
    f12e:	bf00      	nop
    f130:	3708      	adds	r7, #8
    f132:	46bd      	mov	sp, r7
    f134:	bd80      	pop	{r7, pc}
    f136:	bf00      	nop
    f138:	2000a1c0 	.word	0x2000a1c0
    f13c:	20001900 	.word	0x20001900
    f140:	0000e575 	.word	0x0000e575
    f144:	20000000 	.word	0x20000000
    f148:	0000e5ad 	.word	0x0000e5ad
    f14c:	00013cdd 	.word	0x00013cdd
    f150:	2000a254 	.word	0x2000a254
    f154:	20001920 	.word	0x20001920
    f158:	2000a378 	.word	0x2000a378
    f15c:	20001940 	.word	0x20001940
    f160:	2000a274 	.word	0x2000a274
    f164:	20001960 	.word	0x20001960
    f168:	2000a338 	.word	0x2000a338
    f16c:	20001980 	.word	0x20001980
    f170:	2000a358 	.word	0x2000a358
    f174:	200019a0 	.word	0x200019a0
    f178:	2000a230 	.word	0x2000a230
    f17c:	200019c0 	.word	0x200019c0
    f180:	2000a2d0 	.word	0x2000a2d0
    f184:	200019e0 	.word	0x200019e0
    f188:	20001a04 	.word	0x20001a04
    f18c:	0000ec61 	.word	0x0000ec61
    f190:	0000eca9 	.word	0x0000eca9

0000f194 <_GLOBAL__sub_I_ptrCDCClass>:
    f194:	b580      	push	{r7, lr}
    f196:	af00      	add	r7, sp, #0
    f198:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f19c:	2001      	movs	r0, #1
    f19e:	4b01      	ldr	r3, [pc, #4]	; (f1a4 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    f1a0:	4798      	blx	r3
    f1a2:	bd80      	pop	{r7, pc}
    f1a4:	0000f075 	.word	0x0000f075

0000f1a8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    f1a8:	b590      	push	{r4, r7, lr}
    f1aa:	b083      	sub	sp, #12
    f1ac:	af00      	add	r7, sp, #0
    f1ae:	6078      	str	r0, [r7, #4]
    f1b0:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    f1b2:	683b      	ldr	r3, [r7, #0]
    f1b4:	2b00      	cmp	r3, #0
    f1b6:	d101      	bne.n	f1bc <_ZN5Print5writeEPKc+0x14>
    f1b8:	2300      	movs	r3, #0
    f1ba:	e00c      	b.n	f1d6 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    f1bc:	687b      	ldr	r3, [r7, #4]
    f1be:	681b      	ldr	r3, [r3, #0]
    f1c0:	3304      	adds	r3, #4
    f1c2:	681c      	ldr	r4, [r3, #0]
    f1c4:	6838      	ldr	r0, [r7, #0]
    f1c6:	4b06      	ldr	r3, [pc, #24]	; (f1e0 <_ZN5Print5writeEPKc+0x38>)
    f1c8:	4798      	blx	r3
    f1ca:	4603      	mov	r3, r0
    f1cc:	461a      	mov	r2, r3
    f1ce:	6839      	ldr	r1, [r7, #0]
    f1d0:	6878      	ldr	r0, [r7, #4]
    f1d2:	47a0      	blx	r4
    f1d4:	4603      	mov	r3, r0
    }
    f1d6:	4618      	mov	r0, r3
    f1d8:	370c      	adds	r7, #12
    f1da:	46bd      	mov	sp, r7
    f1dc:	bd90      	pop	{r4, r7, pc}
    f1de:	bf00      	nop
    f1e0:	00014441 	.word	0x00014441

0000f1e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    f1e4:	b580      	push	{r7, lr}
    f1e6:	b086      	sub	sp, #24
    f1e8:	af00      	add	r7, sp, #0
    f1ea:	60f8      	str	r0, [r7, #12]
    f1ec:	60b9      	str	r1, [r7, #8]
    f1ee:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    f1f0:	2300      	movs	r3, #0
    f1f2:	617b      	str	r3, [r7, #20]
  while (size--) {
    f1f4:	687b      	ldr	r3, [r7, #4]
    f1f6:	1e5a      	subs	r2, r3, #1
    f1f8:	607a      	str	r2, [r7, #4]
    f1fa:	2b00      	cmp	r3, #0
    f1fc:	bf14      	ite	ne
    f1fe:	2301      	movne	r3, #1
    f200:	2300      	moveq	r3, #0
    f202:	b2db      	uxtb	r3, r3
    f204:	2b00      	cmp	r3, #0
    f206:	d016      	beq.n	f236 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    f208:	68fb      	ldr	r3, [r7, #12]
    f20a:	681b      	ldr	r3, [r3, #0]
    f20c:	681a      	ldr	r2, [r3, #0]
    f20e:	68bb      	ldr	r3, [r7, #8]
    f210:	1c59      	adds	r1, r3, #1
    f212:	60b9      	str	r1, [r7, #8]
    f214:	781b      	ldrb	r3, [r3, #0]
    f216:	4619      	mov	r1, r3
    f218:	68f8      	ldr	r0, [r7, #12]
    f21a:	4790      	blx	r2
    f21c:	4603      	mov	r3, r0
    f21e:	2b00      	cmp	r3, #0
    f220:	bf14      	ite	ne
    f222:	2301      	movne	r3, #1
    f224:	2300      	moveq	r3, #0
    f226:	b2db      	uxtb	r3, r3
    f228:	2b00      	cmp	r3, #0
    f22a:	d003      	beq.n	f234 <_ZN5Print5writeEPKhj+0x50>
    f22c:	697b      	ldr	r3, [r7, #20]
    f22e:	3301      	adds	r3, #1
    f230:	617b      	str	r3, [r7, #20]
  while (size--) {
    f232:	e7df      	b.n	f1f4 <_ZN5Print5writeEPKhj+0x10>
    else break;
    f234:	bf00      	nop
  }
  return n;
    f236:	697b      	ldr	r3, [r7, #20]
}
    f238:	4618      	mov	r0, r3
    f23a:	3718      	adds	r7, #24
    f23c:	46bd      	mov	sp, r7
    f23e:	bd80      	pop	{r7, pc}

0000f240 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    f240:	b580      	push	{r7, lr}
    f242:	b082      	sub	sp, #8
    f244:	af00      	add	r7, sp, #0
    f246:	6078      	str	r0, [r7, #4]
    f248:	6039      	str	r1, [r7, #0]
  return write(str);
    f24a:	6839      	ldr	r1, [r7, #0]
    f24c:	6878      	ldr	r0, [r7, #4]
    f24e:	4b03      	ldr	r3, [pc, #12]	; (f25c <_ZN5Print5printEPKc+0x1c>)
    f250:	4798      	blx	r3
    f252:	4603      	mov	r3, r0
}
    f254:	4618      	mov	r0, r3
    f256:	3708      	adds	r7, #8
    f258:	46bd      	mov	sp, r7
    f25a:	bd80      	pop	{r7, pc}
    f25c:	0000f1a9 	.word	0x0000f1a9

0000f260 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    f260:	b480      	push	{r7}
    f262:	b083      	sub	sp, #12
    f264:	af00      	add	r7, sp, #0
    f266:	6078      	str	r0, [r7, #4]
    f268:	460b      	mov	r3, r1
    f26a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f26c:	78fb      	ldrb	r3, [r7, #3]
    f26e:	687a      	ldr	r2, [r7, #4]
    f270:	01db      	lsls	r3, r3, #7
    f272:	4413      	add	r3, r2
    f274:	681b      	ldr	r3, [r3, #0]
}
    f276:	4618      	mov	r0, r3
    f278:	370c      	adds	r7, #12
    f27a:	46bd      	mov	sp, r7
    f27c:	bc80      	pop	{r7}
    f27e:	4770      	bx	lr

0000f280 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    f280:	b480      	push	{r7}
    f282:	b083      	sub	sp, #12
    f284:	af00      	add	r7, sp, #0
    f286:	6078      	str	r0, [r7, #4]
    f288:	460b      	mov	r3, r1
    f28a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f28c:	78fb      	ldrb	r3, [r7, #3]
    f28e:	687a      	ldr	r2, [r7, #4]
    f290:	01db      	lsls	r3, r3, #7
    f292:	4413      	add	r3, r2
    f294:	3310      	adds	r3, #16
    f296:	681b      	ldr	r3, [r3, #0]
}
    f298:	4618      	mov	r0, r3
    f29a:	370c      	adds	r7, #12
    f29c:	46bd      	mov	sp, r7
    f29e:	bc80      	pop	{r7}
    f2a0:	4770      	bx	lr

0000f2a2 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f2a2:	b480      	push	{r7}
    f2a4:	b083      	sub	sp, #12
    f2a6:	af00      	add	r7, sp, #0
    f2a8:	6078      	str	r0, [r7, #4]
    f2aa:	460b      	mov	r3, r1
    f2ac:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f2ae:	78fb      	ldrb	r3, [r7, #3]
    f2b0:	687a      	ldr	r2, [r7, #4]
    f2b2:	01db      	lsls	r3, r3, #7
    f2b4:	4413      	add	r3, r2
    f2b6:	3320      	adds	r3, #32
    f2b8:	681b      	ldr	r3, [r3, #0]
}
    f2ba:	4618      	mov	r0, r3
    f2bc:	370c      	adds	r7, #12
    f2be:	46bd      	mov	sp, r7
    f2c0:	bc80      	pop	{r7}
    f2c2:	4770      	bx	lr

0000f2c4 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f2c4:	b580      	push	{r7, lr}
    f2c6:	b086      	sub	sp, #24
    f2c8:	af00      	add	r7, sp, #0
    f2ca:	4603      	mov	r3, r0
    f2cc:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f2ce:	f107 030c 	add.w	r3, r7, #12
    f2d2:	4618      	mov	r0, r3
    f2d4:	4b13      	ldr	r3, [pc, #76]	; (f324 <_gpio_get_level+0x60>)
    f2d6:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f2d8:	79fb      	ldrb	r3, [r7, #7]
    f2da:	4619      	mov	r1, r3
    f2dc:	4812      	ldr	r0, [pc, #72]	; (f328 <_gpio_get_level+0x64>)
    f2de:	4b13      	ldr	r3, [pc, #76]	; (f32c <_gpio_get_level+0x68>)
    f2e0:	4798      	blx	r3
    f2e2:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f2e4:	79fb      	ldrb	r3, [r7, #7]
    f2e6:	4619      	mov	r1, r3
    f2e8:	480f      	ldr	r0, [pc, #60]	; (f328 <_gpio_get_level+0x64>)
    f2ea:	4b11      	ldr	r3, [pc, #68]	; (f330 <_gpio_get_level+0x6c>)
    f2ec:	4798      	blx	r3
    f2ee:	4602      	mov	r2, r0
    f2f0:	697b      	ldr	r3, [r7, #20]
    f2f2:	43db      	mvns	r3, r3
    f2f4:	4013      	ands	r3, r2
    f2f6:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f2f8:	79fb      	ldrb	r3, [r7, #7]
    f2fa:	4619      	mov	r1, r3
    f2fc:	480a      	ldr	r0, [pc, #40]	; (f328 <_gpio_get_level+0x64>)
    f2fe:	4b0d      	ldr	r3, [pc, #52]	; (f334 <_gpio_get_level+0x70>)
    f300:	4798      	blx	r3
    f302:	4602      	mov	r2, r0
    f304:	697b      	ldr	r3, [r7, #20]
    f306:	4013      	ands	r3, r2
    f308:	693a      	ldr	r2, [r7, #16]
    f30a:	4313      	orrs	r3, r2
    f30c:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f30e:	f107 030c 	add.w	r3, r7, #12
    f312:	4618      	mov	r0, r3
    f314:	4b08      	ldr	r3, [pc, #32]	; (f338 <_gpio_get_level+0x74>)
    f316:	4798      	blx	r3

	return tmp;
    f318:	693b      	ldr	r3, [r7, #16]
}
    f31a:	4618      	mov	r0, r3
    f31c:	3718      	adds	r7, #24
    f31e:	46bd      	mov	sp, r7
    f320:	bd80      	pop	{r7, pc}
    f322:	bf00      	nop
    f324:	0000be8d 	.word	0x0000be8d
    f328:	41008000 	.word	0x41008000
    f32c:	0000f261 	.word	0x0000f261
    f330:	0000f2a3 	.word	0x0000f2a3
    f334:	0000f281 	.word	0x0000f281
    f338:	0000beb3 	.word	0x0000beb3

0000f33c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f33c:	b580      	push	{r7, lr}
    f33e:	b082      	sub	sp, #8
    f340:	af00      	add	r7, sp, #0
    f342:	4603      	mov	r3, r0
    f344:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f346:	79fb      	ldrb	r3, [r7, #7]
    f348:	115b      	asrs	r3, r3, #5
    f34a:	b2db      	uxtb	r3, r3
    f34c:	4618      	mov	r0, r3
    f34e:	4b09      	ldr	r3, [pc, #36]	; (f374 <gpio_get_pin_level+0x38>)
    f350:	4798      	blx	r3
    f352:	4601      	mov	r1, r0
    f354:	79fb      	ldrb	r3, [r7, #7]
    f356:	f003 031f 	and.w	r3, r3, #31
    f35a:	2201      	movs	r2, #1
    f35c:	fa02 f303 	lsl.w	r3, r2, r3
    f360:	400b      	ands	r3, r1
    f362:	2b00      	cmp	r3, #0
    f364:	bf14      	ite	ne
    f366:	2301      	movne	r3, #1
    f368:	2300      	moveq	r3, #0
    f36a:	b2db      	uxtb	r3, r3
}
    f36c:	4618      	mov	r0, r3
    f36e:	3708      	adds	r7, #8
    f370:	46bd      	mov	sp, r7
    f372:	bd80      	pop	{r7, pc}
    f374:	0000f2c5 	.word	0x0000f2c5

0000f378 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    f378:	b480      	push	{r7}
    f37a:	b083      	sub	sp, #12
    f37c:	af00      	add	r7, sp, #0
    f37e:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    f380:	4b06      	ldr	r3, [pc, #24]	; (f39c <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f382:	681b      	ldr	r3, [r3, #0]
    f384:	2201      	movs	r2, #1
    f386:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    f388:	4b04      	ldr	r3, [pc, #16]	; (f39c <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f38a:	681b      	ldr	r3, [r3, #0]
    f38c:	2200      	movs	r2, #0
    f38e:	705a      	strb	r2, [r3, #1]
}
    f390:	bf00      	nop
    f392:	370c      	adds	r7, #12
    f394:	46bd      	mov	sp, r7
    f396:	bc80      	pop	{r7}
    f398:	4770      	bx	lr
    f39a:	bf00      	nop
    f39c:	20001b64 	.word	0x20001b64

0000f3a0 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    f3a0:	b580      	push	{r7, lr}
    f3a2:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    f3a4:	2040      	movs	r0, #64	; 0x40
    f3a6:	4b0a      	ldr	r3, [pc, #40]	; (f3d0 <_ZL10USBPluggedv+0x30>)
    f3a8:	4798      	blx	r3
    f3aa:	4603      	mov	r3, r0
    f3ac:	2b00      	cmp	r3, #0
    f3ae:	d004      	beq.n	f3ba <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    f3b0:	4b08      	ldr	r3, [pc, #32]	; (f3d4 <_ZL10USBPluggedv+0x34>)
    f3b2:	681b      	ldr	r3, [r3, #0]
    f3b4:	2201      	movs	r2, #1
    f3b6:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    f3b8:	e007      	b.n	f3ca <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    f3ba:	4b06      	ldr	r3, [pc, #24]	; (f3d4 <_ZL10USBPluggedv+0x34>)
    f3bc:	681b      	ldr	r3, [r3, #0]
    f3be:	2200      	movs	r2, #0
    f3c0:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    f3c2:	4b04      	ldr	r3, [pc, #16]	; (f3d4 <_ZL10USBPluggedv+0x34>)
    f3c4:	681b      	ldr	r3, [r3, #0]
    f3c6:	2200      	movs	r2, #0
    f3c8:	701a      	strb	r2, [r3, #0]
}
    f3ca:	bf00      	nop
    f3cc:	bd80      	pop	{r7, pc}
    f3ce:	bf00      	nop
    f3d0:	0000f33d 	.word	0x0000f33d
    f3d4:	20001b64 	.word	0x20001b64

0000f3d8 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    f3d8:	b480      	push	{r7}
    f3da:	b083      	sub	sp, #12
    f3dc:	af00      	add	r7, sp, #0
    f3de:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    f3e0:	4a04      	ldr	r2, [pc, #16]	; (f3f4 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    f3e2:	687b      	ldr	r3, [r7, #4]
    f3e4:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    f3e6:	687b      	ldr	r3, [r7, #4]
    f3e8:	4618      	mov	r0, r3
    f3ea:	370c      	adds	r7, #12
    f3ec:	46bd      	mov	sp, r7
    f3ee:	bc80      	pop	{r7}
    f3f0:	4770      	bx	lr
    f3f2:	bf00      	nop
    f3f4:	20001b64 	.word	0x20001b64

0000f3f8 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    f3f8:	b480      	push	{r7}
    f3fa:	b083      	sub	sp, #12
    f3fc:	af00      	add	r7, sp, #0
    f3fe:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    f400:	687b      	ldr	r3, [r7, #4]
    f402:	4618      	mov	r0, r3
    f404:	370c      	adds	r7, #12
    f406:	46bd      	mov	sp, r7
    f408:	bc80      	pop	{r7}
    f40a:	4770      	bx	lr

0000f40c <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    f40c:	b580      	push	{r7, lr}
    f40e:	b082      	sub	sp, #8
    f410:	af00      	add	r7, sp, #0
    f412:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    f414:	491e      	ldr	r1, [pc, #120]	; (f490 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    f416:	2040      	movs	r0, #64	; 0x40
    f418:	4b1e      	ldr	r3, [pc, #120]	; (f494 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    f41a:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    f41c:	481e      	ldr	r0, [pc, #120]	; (f498 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f41e:	4b1f      	ldr	r3, [pc, #124]	; (f49c <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f420:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    f422:	2040      	movs	r0, #64	; 0x40
    f424:	4b1e      	ldr	r3, [pc, #120]	; (f4a0 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    f426:	4798      	blx	r3
    f428:	4603      	mov	r3, r0
    f42a:	461a      	mov	r2, r3
    f42c:	687b      	ldr	r3, [r7, #4]
    f42e:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    f430:	687b      	ldr	r3, [r7, #4]
    f432:	78db      	ldrb	r3, [r3, #3]
    f434:	2b00      	cmp	r3, #0
    f436:	d021      	beq.n	f47c <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    f438:	687b      	ldr	r3, [r7, #4]
    f43a:	2200      	movs	r2, #0
    f43c:	709a      	strb	r2, [r3, #2]
			plugged=true;
    f43e:	687b      	ldr	r3, [r7, #4]
    f440:	2201      	movs	r2, #1
    f442:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    f444:	f44f 7216 	mov.w	r2, #600	; 0x258
    f448:	4916      	ldr	r1, [pc, #88]	; (f4a4 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    f44a:	4813      	ldr	r0, [pc, #76]	; (f498 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f44c:	4b16      	ldr	r3, [pc, #88]	; (f4a8 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    f44e:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    f450:	4816      	ldr	r0, [pc, #88]	; (f4ac <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    f452:	4b17      	ldr	r3, [pc, #92]	; (f4b0 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    f454:	4798      	blx	r3
    f456:	4603      	mov	r3, r0
    f458:	f083 0301 	eor.w	r3, r3, #1
    f45c:	b2db      	uxtb	r3, r3
    f45e:	2b00      	cmp	r3, #0
    f460:	d008      	beq.n	f474 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    f462:	687b      	ldr	r3, [r7, #4]
    f464:	789b      	ldrb	r3, [r3, #2]
    f466:	b2db      	uxtb	r3, r3
    f468:	2b00      	cmp	r3, #0
    f46a:	d0f1      	beq.n	f450 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    f46c:	687b      	ldr	r3, [r7, #4]
    f46e:	2200      	movs	r2, #0
    f470:	701a      	strb	r2, [r3, #0]
					return;
    f472:	e009      	b.n	f488 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    f474:	4808      	ldr	r0, [pc, #32]	; (f498 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f476:	4b0f      	ldr	r3, [pc, #60]	; (f4b4 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    f478:	4798      	blx	r3
    f47a:	e005      	b.n	f488 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    f47c:	687b      	ldr	r3, [r7, #4]
    f47e:	2200      	movs	r2, #0
    f480:	701a      	strb	r2, [r3, #0]
			plugged=false;
    f482:	687b      	ldr	r3, [r7, #4]
    f484:	2200      	movs	r2, #0
    f486:	705a      	strb	r2, [r3, #1]
		}
		
}
    f488:	3708      	adds	r7, #8
    f48a:	46bd      	mov	sp, r7
    f48c:	bd80      	pop	{r7, pc}
    f48e:	bf00      	nop
    f490:	0000f3a1 	.word	0x0000f3a1
    f494:	00002c49 	.word	0x00002c49
    f498:	20001b04 	.word	0x20001b04
    f49c:	0000e661 	.word	0x0000e661
    f4a0:	0000f33d 	.word	0x0000f33d
    f4a4:	0000f379 	.word	0x0000f379
    f4a8:	0000e849 	.word	0x0000e849
    f4ac:	20001a04 	.word	0x20001a04
    f4b0:	0000ed19 	.word	0x0000ed19
    f4b4:	0000e6d5 	.word	0x0000e6d5

0000f4b8 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    f4b8:	b580      	push	{r7, lr}
    f4ba:	b082      	sub	sp, #8
    f4bc:	af00      	add	r7, sp, #0
    f4be:	6078      	str	r0, [r7, #4]
    f4c0:	6039      	str	r1, [r7, #0]
    f4c2:	687b      	ldr	r3, [r7, #4]
    f4c4:	2b01      	cmp	r3, #1
    f4c6:	d14c      	bne.n	f562 <_Z41__static_initialization_and_destruction_0ii+0xaa>
    f4c8:	683b      	ldr	r3, [r7, #0]
    f4ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f4ce:	4293      	cmp	r3, r2
    f4d0:	d147      	bne.n	f562 <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f4d2:	4926      	ldr	r1, [pc, #152]	; (f56c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    f4d4:	4826      	ldr	r0, [pc, #152]	; (f570 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    f4d6:	4b27      	ldr	r3, [pc, #156]	; (f574 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4d8:	4798      	blx	r3
    f4da:	4a27      	ldr	r2, [pc, #156]	; (f578 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4dc:	4927      	ldr	r1, [pc, #156]	; (f57c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4de:	4824      	ldr	r0, [pc, #144]	; (f570 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    f4e0:	4b27      	ldr	r3, [pc, #156]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4e2:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f4e4:	4927      	ldr	r1, [pc, #156]	; (f584 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f4e6:	4828      	ldr	r0, [pc, #160]	; (f588 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f4e8:	4b22      	ldr	r3, [pc, #136]	; (f574 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4ea:	4798      	blx	r3
    f4ec:	4a22      	ldr	r2, [pc, #136]	; (f578 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4ee:	4923      	ldr	r1, [pc, #140]	; (f57c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4f0:	4825      	ldr	r0, [pc, #148]	; (f588 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f4f2:	4b23      	ldr	r3, [pc, #140]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4f4:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f4f6:	4925      	ldr	r1, [pc, #148]	; (f58c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f4f8:	4825      	ldr	r0, [pc, #148]	; (f590 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f4fa:	4b1e      	ldr	r3, [pc, #120]	; (f574 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4fc:	4798      	blx	r3
    f4fe:	4a1e      	ldr	r2, [pc, #120]	; (f578 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f500:	491e      	ldr	r1, [pc, #120]	; (f57c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f502:	4823      	ldr	r0, [pc, #140]	; (f590 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f504:	4b1e      	ldr	r3, [pc, #120]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f506:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f508:	4922      	ldr	r1, [pc, #136]	; (f594 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f50a:	4823      	ldr	r0, [pc, #140]	; (f598 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f50c:	4b19      	ldr	r3, [pc, #100]	; (f574 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f50e:	4798      	blx	r3
    f510:	4a19      	ldr	r2, [pc, #100]	; (f578 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f512:	491a      	ldr	r1, [pc, #104]	; (f57c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f514:	4820      	ldr	r0, [pc, #128]	; (f598 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f516:	4b1a      	ldr	r3, [pc, #104]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f518:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f51a:	4920      	ldr	r1, [pc, #128]	; (f59c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f51c:	4820      	ldr	r0, [pc, #128]	; (f5a0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f51e:	4b15      	ldr	r3, [pc, #84]	; (f574 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f520:	4798      	blx	r3
    f522:	4a15      	ldr	r2, [pc, #84]	; (f578 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f524:	4915      	ldr	r1, [pc, #84]	; (f57c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f526:	481e      	ldr	r0, [pc, #120]	; (f5a0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f528:	4b15      	ldr	r3, [pc, #84]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f52a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f52c:	491d      	ldr	r1, [pc, #116]	; (f5a4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f52e:	481e      	ldr	r0, [pc, #120]	; (f5a8 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f530:	4b10      	ldr	r3, [pc, #64]	; (f574 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f532:	4798      	blx	r3
    f534:	4a10      	ldr	r2, [pc, #64]	; (f578 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f536:	4911      	ldr	r1, [pc, #68]	; (f57c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f538:	481b      	ldr	r0, [pc, #108]	; (f5a8 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f53a:	4b11      	ldr	r3, [pc, #68]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f53c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f53e:	491b      	ldr	r1, [pc, #108]	; (f5ac <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f540:	481b      	ldr	r0, [pc, #108]	; (f5b0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f542:	4b0c      	ldr	r3, [pc, #48]	; (f574 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f544:	4798      	blx	r3
    f546:	4a0c      	ldr	r2, [pc, #48]	; (f578 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f548:	490c      	ldr	r1, [pc, #48]	; (f57c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f54a:	4819      	ldr	r0, [pc, #100]	; (f5b0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f54c:	4b0c      	ldr	r3, [pc, #48]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f54e:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f550:	4918      	ldr	r1, [pc, #96]	; (f5b4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f552:	4819      	ldr	r0, [pc, #100]	; (f5b8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f554:	4b07      	ldr	r3, [pc, #28]	; (f574 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f556:	4798      	blx	r3
    f558:	4a07      	ldr	r2, [pc, #28]	; (f578 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f55a:	4908      	ldr	r1, [pc, #32]	; (f57c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f55c:	4816      	ldr	r0, [pc, #88]	; (f5b8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f55e:	4b08      	ldr	r3, [pc, #32]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f560:	4798      	blx	r3
    f562:	bf00      	nop
    f564:	3708      	adds	r7, #8
    f566:	46bd      	mov	sp, r7
    f568:	bd80      	pop	{r7, pc}
    f56a:	bf00      	nop
    f56c:	2000a1c0 	.word	0x2000a1c0
    f570:	20001a64 	.word	0x20001a64
    f574:	0000e575 	.word	0x0000e575
    f578:	20000000 	.word	0x20000000
    f57c:	0000e5ad 	.word	0x0000e5ad
    f580:	00013cdd 	.word	0x00013cdd
    f584:	2000a254 	.word	0x2000a254
    f588:	20001a84 	.word	0x20001a84
    f58c:	2000a378 	.word	0x2000a378
    f590:	20001aa4 	.word	0x20001aa4
    f594:	2000a274 	.word	0x2000a274
    f598:	20001ac4 	.word	0x20001ac4
    f59c:	2000a338 	.word	0x2000a338
    f5a0:	20001ae4 	.word	0x20001ae4
    f5a4:	2000a358 	.word	0x2000a358
    f5a8:	20001b04 	.word	0x20001b04
    f5ac:	2000a230 	.word	0x2000a230
    f5b0:	20001b24 	.word	0x20001b24
    f5b4:	2000a2d0 	.word	0x2000a2d0
    f5b8:	20001b44 	.word	0x20001b44

0000f5bc <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    f5bc:	b580      	push	{r7, lr}
    f5be:	af00      	add	r7, sp, #0
    f5c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f5c4:	2001      	movs	r0, #1
    f5c6:	4b01      	ldr	r3, [pc, #4]	; (f5cc <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    f5c8:	4798      	blx	r3
    f5ca:	bd80      	pop	{r7, pc}
    f5cc:	0000f4b9 	.word	0x0000f4b9

0000f5d0 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    f5d0:	b480      	push	{r7}
    f5d2:	b083      	sub	sp, #12
    f5d4:	af00      	add	r7, sp, #0
    f5d6:	6078      	str	r0, [r7, #4]
    return (void *)0;
    f5d8:	2300      	movs	r3, #0
	}
    f5da:	4618      	mov	r0, r3
    f5dc:	370c      	adds	r7, #12
    f5de:	46bd      	mov	sp, r7
    f5e0:	bc80      	pop	{r7}
    f5e2:	4770      	bx	lr

0000f5e4 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    f5e4:	b480      	push	{r7}
    f5e6:	af00      	add	r7, sp, #0
		}
    f5e8:	bf00      	nop
    f5ea:	46bd      	mov	sp, r7
    f5ec:	bc80      	pop	{r7}
    f5ee:	4770      	bx	lr

0000f5f0 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
    f5f0:	4770      	bx	lr

0000f5f2 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
    f5f2:	4770      	bx	lr

0000f5f4 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
    f5f4:	1f0b      	subs	r3, r1, #4
    f5f6:	300c      	adds	r0, #12
    f5f8:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
    f5fa:	f853 2f04 	ldr.w	r2, [r3, #4]!
    f5fe:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    f602:	428b      	cmp	r3, r1
    f604:	d1f9      	bne.n	f5fa <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
    f606:	2000      	movs	r0, #0
    f608:	4770      	bx	lr
	...

0000f60c <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
    f60c:	b510      	push	{r4, lr}
    f60e:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
    f610:	68c0      	ldr	r0, [r0, #12]
    f612:	4b0a      	ldr	r3, [pc, #40]	; (f63c <_ZN19CondesatorFan_Class10ReadStatusEv+0x30>)
    f614:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
    f616:	f3c0 1200 	ubfx	r2, r0, #4, #1
    f61a:	78e3      	ldrb	r3, [r4, #3]
    f61c:	f362 0382 	bfi	r3, r2, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
    f620:	f3c0 1240 	ubfx	r2, r0, #5, #1
    f624:	f362 0341 	bfi	r3, r2, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
    f628:	f3c0 1280 	ubfx	r2, r0, #6, #1
    f62c:	f362 0300 	bfi	r3, r2, #0, #1
    f630:	70e3      	strb	r3, [r4, #3]
	faults=r&(0x07<<(4));
    f632:	f000 0070 	and.w	r0, r0, #112	; 0x70
    f636:	7120      	strb	r0, [r4, #4]
	return faults;
}
    f638:	bd10      	pop	{r4, pc}
    f63a:	bf00      	nop
    f63c:	0000e185 	.word	0x0000e185

0000f640 <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
    f640:	b510      	push	{r4, lr}
    f642:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,!state);
    f644:	f081 0201 	eor.w	r2, r1, #1
    f648:	2100      	movs	r1, #0
    f64a:	68c0      	ldr	r0, [r0, #12]
    f64c:	4b01      	ldr	r3, [pc, #4]	; (f654 <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
    f64e:	4798      	blx	r3
    f650:	7060      	strb	r0, [r4, #1]
	
	return uint8_t(enabled);
}
    f652:	bd10      	pop	{r4, pc}
    f654:	0000e43d 	.word	0x0000e43d

0000f658 <_ZN19CondesatorFan_Class6SetPWMEh>:
	enabled=(value&0x01);
	return enabled;
}


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
    f658:	b510      	push	{r4, lr}
    f65a:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
    f65c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    f65e:	4b02      	ldr	r3, [pc, #8]	; (f668 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
    f660:	4798      	blx	r3
    f662:	7160      	strb	r0, [r4, #5]
	return pwmValue;
}
    f664:	bd10      	pop	{r4, pc}
    f666:	bf00      	nop
    f668:	0000e209 	.word	0x0000e209

0000f66c <_ZN19CondesatorFan_Class8SelfTestEv>:

bool CondesatorFan_Class::SelfTest(void){
    f66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f670:	4605      	mov	r5, r0
		bool result;
		SetEnable(false);
    f672:	2100      	movs	r1, #0
    f674:	4c0f      	ldr	r4, [pc, #60]	; (f6b4 <_ZN19CondesatorFan_Class8SelfTestEv+0x48>)
    f676:	47a0      	blx	r4
		SetPWM(0xff);
    f678:	21ff      	movs	r1, #255	; 0xff
    f67a:	4628      	mov	r0, r5
    f67c:	4b0e      	ldr	r3, [pc, #56]	; (f6b8 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
    f67e:	4798      	blx	r3
		SetEnable(true);
    f680:	2101      	movs	r1, #1
    f682:	4628      	mov	r0, r5
    f684:	47a0      	blx	r4
    f686:	24ff      	movs	r4, #255	; 0xff
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
		{
			SetPWM(i);
    f688:	4f0b      	ldr	r7, [pc, #44]	; (f6b8 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
			delay_us(10);
    f68a:	f04f 080a 	mov.w	r8, #10
    f68e:	4e0b      	ldr	r6, [pc, #44]	; (f6bc <_ZN19CondesatorFan_Class8SelfTestEv+0x50>)
			SetPWM(i);
    f690:	4621      	mov	r1, r4
    f692:	4628      	mov	r0, r5
    f694:	47b8      	blx	r7
			delay_us(10);
    f696:	4640      	mov	r0, r8
    f698:	47b0      	blx	r6
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
    f69a:	3c01      	subs	r4, #1
    f69c:	b2e4      	uxtb	r4, r4
    f69e:	2c10      	cmp	r4, #16
    f6a0:	d1f6      	bne.n	f690 <_ZN19CondesatorFan_Class8SelfTestEv+0x24>
		}

		ReadStatus();
    f6a2:	4628      	mov	r0, r5
    f6a4:	4b06      	ldr	r3, [pc, #24]	; (f6c0 <_ZN19CondesatorFan_Class8SelfTestEv+0x54>)
    f6a6:	4798      	blx	r3
// 		delay_ms(6*1000);
// 		SetEnable(false);
		result=condesatorStatus.niAlcCdsFanExtFault;
    f6a8:	78e8      	ldrb	r0, [r5, #3]
		return result;
    f6aa:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f6b2:	bf00      	nop
    f6b4:	0000f641 	.word	0x0000f641
    f6b8:	0000f659 	.word	0x0000f659
    f6bc:	00002b81 	.word	0x00002b81
    f6c0:	0000f60d 	.word	0x0000f60d

0000f6c4 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
    f6c4:	b510      	push	{r4, lr}
    f6c6:	4604      	mov	r4, r0
	i2c=i2cClass;
    f6c8:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
    f6ca:	7a4b      	ldrb	r3, [r1, #9]
    f6cc:	b90b      	cbnz	r3, f6d2 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
    f6ce:	78a0      	ldrb	r0, [r4, #2]
    f6d0:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
    f6d2:	4611      	mov	r1, r2
    f6d4:	4b04      	ldr	r3, [pc, #16]	; (f6e8 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
    f6d6:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
    f6d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f6da:	4b04      	ldr	r3, [pc, #16]	; (f6ec <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x28>)
    f6dc:	4798      	blx	r3
		isOK=SelfTest();
    f6de:	4620      	mov	r0, r4
    f6e0:	4b03      	ldr	r3, [pc, #12]	; (f6f0 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x2c>)
    f6e2:	4798      	blx	r3
    f6e4:	70a0      	strb	r0, [r4, #2]
    f6e6:	e7f2      	b.n	f6ce <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
    f6e8:	0000f5f5 	.word	0x0000f5f5
    f6ec:	0000e2fd 	.word	0x0000e2fd
    f6f0:	0000f66d 	.word	0x0000f66d

0000f6f4 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev>:
    f6f4:	b510      	push	{r4, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    f6f6:	4c05      	ldr	r4, [pc, #20]	; (f70c <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x18>)
    f6f8:	4905      	ldr	r1, [pc, #20]	; (f710 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x1c>)
    f6fa:	4620      	mov	r0, r4
    f6fc:	4b05      	ldr	r3, [pc, #20]	; (f714 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x20>)
    f6fe:	4798      	blx	r3
    f700:	4a05      	ldr	r2, [pc, #20]	; (f718 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x24>)
    f702:	4906      	ldr	r1, [pc, #24]	; (f71c <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x28>)
    f704:	4620      	mov	r0, r4
    f706:	4b06      	ldr	r3, [pc, #24]	; (f720 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x2c>)
    f708:	4798      	blx	r3
    f70a:	bd10      	pop	{r4, pc}
    f70c:	20001b68 	.word	0x20001b68
    f710:	2000a2f0 	.word	0x2000a2f0
    f714:	0000debd 	.word	0x0000debd
    f718:	20000000 	.word	0x20000000
    f71c:	0000ded9 	.word	0x0000ded9
    f720:	00013cdd 	.word	0x00013cdd

0000f724 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
    f724:	b510      	push	{r4, lr}
    f726:	4604      	mov	r4, r0
    f728:	302c      	adds	r0, #44	; 0x2c
    f72a:	4b03      	ldr	r3, [pc, #12]	; (f738 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
    f72c:	4798      	blx	r3
    f72e:	4620      	mov	r0, r4
    f730:	4b02      	ldr	r3, [pc, #8]	; (f73c <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
    f732:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
    f734:	4620      	mov	r0, r4
    f736:	bd10      	pop	{r4, pc}
    f738:	0000f5f3 	.word	0x0000f5f3
    f73c:	0000f989 	.word	0x0000f989

0000f740 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    f740:	b570      	push	{r4, r5, r6, lr}
    f742:	4c05      	ldr	r4, [pc, #20]	; (f758 <__tcf_1+0x18>)
    f744:	4e05      	ldr	r6, [pc, #20]	; (f75c <__tcf_1+0x1c>)
    f746:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
    f74a:	3c1c      	subs	r4, #28
    f74c:	4620      	mov	r0, r4
    f74e:	47b0      	blx	r6
    f750:	42ac      	cmp	r4, r5
    f752:	d1fa      	bne.n	f74a <__tcf_1+0xa>
    f754:	bd70      	pop	{r4, r5, r6, pc}
    f756:	bf00      	nop
    f758:	20001c44 	.word	0x20001c44
    f75c:	0000e08d 	.word	0x0000e08d

0000f760 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
    f760:	b510      	push	{r4, lr}
    f762:	4803      	ldr	r0, [pc, #12]	; (f770 <__tcf_0+0x10>)
    f764:	4c03      	ldr	r4, [pc, #12]	; (f774 <__tcf_0+0x14>)
    f766:	47a0      	blx	r4
    f768:	4803      	ldr	r0, [pc, #12]	; (f778 <__tcf_0+0x18>)
    f76a:	47a0      	blx	r4
    f76c:	bd10      	pop	{r4, pc}
    f76e:	bf00      	nop
    f770:	20001c70 	.word	0x20001c70
    f774:	0000f989 	.word	0x0000f989
    f778:	20001c44 	.word	0x20001c44

0000f77c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
    f77c:	b510      	push	{r4, lr}
    f77e:	4604      	mov	r4, r0
    f780:	4b0d      	ldr	r3, [pc, #52]	; (f7b8 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
    f782:	4798      	blx	r3
    f784:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f788:	4b0c      	ldr	r3, [pc, #48]	; (f7bc <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
    f78a:	4798      	blx	r3
	i2c=&i2cFansStatic;
    f78c:	4b0c      	ldr	r3, [pc, #48]	; (f7c0 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
    f78e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
    f792:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
    f796:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
    f79a:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
    f79c:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
    f7a0:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
    f7a2:	f503 729a 	add.w	r2, r3, #308	; 0x134
    f7a6:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
    f7a8:	f8c3 4160 	str.w	r4, [r3, #352]	; 0x160
	somethingChanged=false;
    f7ac:	2300      	movs	r3, #0
    f7ae:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
    f7b2:	4620      	mov	r0, r4
    f7b4:	bd10      	pop	{r4, pc}
    f7b6:	bf00      	nop
    f7b8:	0000f971 	.word	0x0000f971
    f7bc:	0000f5f1 	.word	0x0000f5f1
    f7c0:	20001b80 	.word	0x20001b80

0000f7c4 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
    f7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7c8:	4606      	mov	r6, r0
    f7ca:	4c0c      	ldr	r4, [pc, #48]	; (f7fc <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
    f7cc:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    f7d0:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
    f7d2:	f8df 802c 	ldr.w	r8, [pc, #44]	; f800 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
    f7d6:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
    f7da:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
    f7de:	f045 0120 	orr.w	r1, r5, #32
    f7e2:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
    f7e6:	b2c9      	uxtb	r1, r1
    f7e8:	4620      	mov	r0, r4
    f7ea:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    f7ec:	3501      	adds	r5, #1
    f7ee:	341c      	adds	r4, #28
    f7f0:	2d07      	cmp	r5, #7
    f7f2:	d1f0      	bne.n	f7d6 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
    f7f4:	2000      	movs	r0, #0
    f7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7fa:	bf00      	nop
    f7fc:	20001b80 	.word	0x20001b80
    f800:	0000e0a1 	.word	0x0000e0a1

0000f804 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
    f804:	b570      	push	{r4, r5, r6, lr}
    f806:	4604      	mov	r4, r0
	i2c->Init();
    f808:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    f80c:	4b17      	ldr	r3, [pc, #92]	; (f86c <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
    f80e:	4798      	blx	r3
	if (i2c->isOK)
    f810:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    f814:	7a5b      	ldrb	r3, [r3, #9]
    f816:	b943      	cbnz	r3, f82a <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
    f818:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    f81c:	7a5b      	ldrb	r3, [r3, #9]
    f81e:	b2db      	uxtb	r3, r3
    f820:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	return isOK;
    f824:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
    f828:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
    f82a:	4620      	mov	r0, r4
    f82c:	4b10      	ldr	r3, [pc, #64]	; (f870 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
    f82e:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
    f830:	f104 0568 	add.w	r5, r4, #104	; 0x68
    f834:	462b      	mov	r3, r5
    f836:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    f83a:	2100      	movs	r1, #0
    f83c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    f83e:	4e0d      	ldr	r6, [pc, #52]	; (f874 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
    f840:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
    f842:	462b      	mov	r3, r5
    f844:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    f848:	2101      	movs	r1, #1
    f84a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    f84c:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
    f84e:	462a      	mov	r2, r5
    f850:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    f854:	6e60      	ldr	r0, [r4, #100]	; 0x64
    f856:	4b08      	ldr	r3, [pc, #32]	; (f878 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
    f858:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
    f85a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    f85c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    f85e:	791b      	ldrb	r3, [r3, #4]
    f860:	7912      	ldrb	r2, [r2, #4]
    f862:	4013      	ands	r3, r2
    f864:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    f868:	e7d6      	b.n	f818 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
    f86a:	bf00      	nop
    f86c:	0000deed 	.word	0x0000deed
    f870:	0000f7c5 	.word	0x0000f7c5
    f874:	0000fa95 	.word	0x0000fa95
    f878:	0000f6c5 	.word	0x0000f6c5

0000f87c <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh>:
void EvaporatorAndCondesatorFans_Class::GetGPIOSValues(uint8_t * gpios){
    f87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f87e:	f100 0468 	add.w	r4, r0, #104	; 0x68
    f882:	1e4d      	subs	r5, r1, #1
    f884:	f100 0684 	add.w	r6, r0, #132	; 0x84
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
	{
		gpios[i]=expanders[i]->ReadGPIORegister();
    f888:	4f04      	ldr	r7, [pc, #16]	; (f89c <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0x20>)
    f88a:	f854 0b04 	ldr.w	r0, [r4], #4
    f88e:	47b8      	blx	r7
    f890:	f805 0f01 	strb.w	r0, [r5, #1]!
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    f894:	42b4      	cmp	r4, r6
    f896:	d1f8      	bne.n	f88a <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0xe>
	}
	

}
    f898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f89a:	bf00      	nop
    f89c:	0000e185 	.word	0x0000e185

0000f8a0 <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
    f8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f8a4:	4c22      	ldr	r4, [pc, #136]	; (f930 <_GLOBAL__sub_I_ptrFansClass+0x90>)
    f8a6:	f504 75b2 	add.w	r5, r4, #356	; 0x164
    f8aa:	4922      	ldr	r1, [pc, #136]	; (f934 <_GLOBAL__sub_I_ptrFansClass+0x94>)
    f8ac:	4628      	mov	r0, r5
    f8ae:	f8df 90b4 	ldr.w	r9, [pc, #180]	; f964 <_GLOBAL__sub_I_ptrFansClass+0xc4>
    f8b2:	47c8      	blx	r9
    f8b4:	4f20      	ldr	r7, [pc, #128]	; (f938 <_GLOBAL__sub_I_ptrFansClass+0x98>)
    f8b6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; f968 <_GLOBAL__sub_I_ptrFansClass+0xc8>
    f8ba:	463a      	mov	r2, r7
    f8bc:	4641      	mov	r1, r8
    f8be:	4628      	mov	r0, r5
    f8c0:	4e1e      	ldr	r6, [pc, #120]	; (f93c <_GLOBAL__sub_I_ptrFansClass+0x9c>)
    f8c2:	47b0      	blx	r6
static I2C_Sync_Class	i2cFansStatic(&I2C_FANS);
    f8c4:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    f8c8:	491d      	ldr	r1, [pc, #116]	; (f940 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
    f8ca:	4628      	mov	r0, r5
    f8cc:	47c8      	blx	r9
    f8ce:	463a      	mov	r2, r7
    f8d0:	4641      	mov	r1, r8
    f8d2:	4628      	mov	r0, r5
    f8d4:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
    f8d6:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    f8da:	4628      	mov	r0, r5
    f8dc:	f8df 808c 	ldr.w	r8, [pc, #140]	; f96c <_GLOBAL__sub_I_ptrFansClass+0xcc>
    f8e0:	47c0      	blx	r8
    f8e2:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    f8e6:	47c0      	blx	r8
    f8e8:	463a      	mov	r2, r7
    f8ea:	4916      	ldr	r1, [pc, #88]	; (f944 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
    f8ec:	2000      	movs	r0, #0
    f8ee:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
    f8f0:	f504 789a 	add.w	r8, r4, #308	; 0x134
    f8f4:	4640      	mov	r0, r8
    f8f6:	4b14      	ldr	r3, [pc, #80]	; (f948 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
    f8f8:	4798      	blx	r3
    f8fa:	463a      	mov	r2, r7
    f8fc:	4913      	ldr	r1, [pc, #76]	; (f94c <_GLOBAL__sub_I_ptrFansClass+0xac>)
    f8fe:	4640      	mov	r0, r8
    f900:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    f902:	4e13      	ldr	r6, [pc, #76]	; (f950 <_GLOBAL__sub_I_ptrFansClass+0xb0>)
    f904:	4620      	mov	r0, r4
    f906:	47b0      	blx	r6
    f908:	341c      	adds	r4, #28
    f90a:	42a5      	cmp	r5, r4
    f90c:	d1fa      	bne.n	f904 <_GLOBAL__sub_I_ptrFansClass+0x64>
    f90e:	4e0a      	ldr	r6, [pc, #40]	; (f938 <_GLOBAL__sub_I_ptrFansClass+0x98>)
    f910:	4632      	mov	r2, r6
    f912:	4910      	ldr	r1, [pc, #64]	; (f954 <_GLOBAL__sub_I_ptrFansClass+0xb4>)
    f914:	2000      	movs	r0, #0
    f916:	4c09      	ldr	r4, [pc, #36]	; (f93c <_GLOBAL__sub_I_ptrFansClass+0x9c>)
    f918:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
    f91a:	4d0f      	ldr	r5, [pc, #60]	; (f958 <_GLOBAL__sub_I_ptrFansClass+0xb8>)
    f91c:	4628      	mov	r0, r5
    f91e:	4b0f      	ldr	r3, [pc, #60]	; (f95c <_GLOBAL__sub_I_ptrFansClass+0xbc>)
    f920:	4798      	blx	r3
    f922:	4632      	mov	r2, r6
    f924:	490e      	ldr	r1, [pc, #56]	; (f960 <_GLOBAL__sub_I_ptrFansClass+0xc0>)
    f926:	4628      	mov	r0, r5
    f928:	47a0      	blx	r4
    f92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f92e:	bf00      	nop
    f930:	20001b80 	.word	0x20001b80
    f934:	2000a2f0 	.word	0x2000a2f0
    f938:	20000000 	.word	0x20000000
    f93c:	00013cdd 	.word	0x00013cdd
    f940:	2000a210 	.word	0x2000a210
    f944:	0000f761 	.word	0x0000f761
    f948:	0000f5f1 	.word	0x0000f5f1
    f94c:	0000f5f3 	.word	0x0000f5f3
    f950:	0000e079 	.word	0x0000e079
    f954:	0000f741 	.word	0x0000f741
    f958:	20001cfc 	.word	0x20001cfc
    f95c:	0000f77d 	.word	0x0000f77d
    f960:	0000f725 	.word	0x0000f725
    f964:	0000debd 	.word	0x0000debd
    f968:	0000ded9 	.word	0x0000ded9
    f96c:	0000f971 	.word	0x0000f971

0000f970 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
    f970:	b510      	push	{r4, lr}
    f972:	4604      	mov	r4, r0
    f974:	4b02      	ldr	r3, [pc, #8]	; (f980 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
    f976:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
    f978:	4b02      	ldr	r3, [pc, #8]	; (f984 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
    f97a:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
    f97c:	4620      	mov	r0, r4
    f97e:	bd10      	pop	{r4, pc}
    f980:	0000fb2d 	.word	0x0000fb2d
    f984:	20001d88 	.word	0x20001d88

0000f988 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
    f988:	b510      	push	{r4, lr}
    f98a:	4604      	mov	r4, r0
    f98c:	4b01      	ldr	r3, [pc, #4]	; (f994 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
    f98e:	4798      	blx	r3
{
} //~EvaporatorFan_Class
    f990:	4620      	mov	r0, r4
    f992:	bd10      	pop	{r4, pc}
    f994:	0000fb2f 	.word	0x0000fb2f

0000f998 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
    f998:	1f0b      	subs	r3, r1, #4
    f99a:	300c      	adds	r0, #12
    f99c:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
    f99e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    f9a2:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
    f9a6:	428b      	cmp	r3, r1
    f9a8:	d1f9      	bne.n	f99e <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
    f9aa:	2000      	movs	r0, #0
    f9ac:	4770      	bx	lr
	...

0000f9b0 <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
    f9b0:	b538      	push	{r3, r4, r5, lr}
    f9b2:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
    f9b4:	6900      	ldr	r0, [r0, #16]
    f9b6:	4b10      	ldr	r3, [pc, #64]	; (f9f8 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x48>)
    f9b8:	4798      	blx	r3
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
    f9ba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f9be:	0099      	lsls	r1, r3, #2
    f9c0:	fa40 f501 	asr.w	r5, r0, r1
    f9c4:	5ce2      	ldrb	r2, [r4, r3]
    f9c6:	f365 0282 	bfi	r2, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
    f9ca:	2502      	movs	r5, #2
    f9cc:	408d      	lsls	r5, r1
    f9ce:	4205      	tst	r5, r0
    f9d0:	bf14      	ite	ne
    f9d2:	2501      	movne	r5, #1
    f9d4:	2500      	moveq	r5, #0
    f9d6:	f365 0241 	bfi	r2, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
    f9da:	2504      	movs	r5, #4
    f9dc:	408d      	lsls	r5, r1
    f9de:	4205      	tst	r5, r0
    f9e0:	bf14      	ite	ne
    f9e2:	2501      	movne	r5, #1
    f9e4:	2500      	moveq	r5, #0
    f9e6:	f365 0200 	bfi	r2, r5, #0, #1
    f9ea:	54e2      	strb	r2, [r4, r3]
	faults=r&(0x07<<(4*fanNumber));
    f9ec:	2307      	movs	r3, #7
    f9ee:	408b      	lsls	r3, r1
    f9f0:	4018      	ands	r0, r3
    f9f2:	b2c0      	uxtb	r0, r0
    f9f4:	7160      	strb	r0, [r4, #5]
	return faults;
		
}
    f9f6:	bd38      	pop	{r3, r4, r5, pc}
    f9f8:	0000e185 	.word	0x0000e185

0000f9fc <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
    f9fc:	b510      	push	{r4, lr}
    f9fe:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
    fa00:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    fa04:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
    fa06:	f081 0201 	eor.w	r2, r1, #1
    fa0a:	bf0c      	ite	eq
    fa0c:	2102      	moveq	r1, #2
    fa0e:	2101      	movne	r1, #1
    fa10:	68c0      	ldr	r0, [r0, #12]
    fa12:	4b02      	ldr	r3, [pc, #8]	; (fa1c <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
    fa14:	4798      	blx	r3
    fa16:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
    fa18:	bd10      	pop	{r4, pc}
    fa1a:	bf00      	nop
    fa1c:	0000e43d 	.word	0x0000e43d

0000fa20 <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
    fa20:	b510      	push	{r4, lr}
    fa22:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
    fa24:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    fa28:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    fa2c:	69d8      	ldr	r0, [r3, #28]
    fa2e:	4b02      	ldr	r3, [pc, #8]	; (fa38 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
    fa30:	4798      	blx	r3
    fa32:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	
	return pwmValue;
}
    fa36:	bd10      	pop	{r4, pc}
    fa38:	0000e209 	.word	0x0000e209

0000fa3c <_ZN19EvaporatorFan_Class8SelfTestEv>:
	uint8_t value=expanders[0]->ReadGPIORegister();
	enabled=!(value&fanCorrrection);
	return enabled;
}

bool EvaporatorFan_Class::SelfTest(void){
    fa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa40:	4605      	mov	r5, r0
	bool result;
	SetEnable(false);
    fa42:	2100      	movs	r1, #0
    fa44:	4c0f      	ldr	r4, [pc, #60]	; (fa84 <_ZN19EvaporatorFan_Class8SelfTestEv+0x48>)
    fa46:	47a0      	blx	r4
	SetPWM(0xff);
    fa48:	21ff      	movs	r1, #255	; 0xff
    fa4a:	4628      	mov	r0, r5
    fa4c:	4b0e      	ldr	r3, [pc, #56]	; (fa88 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
    fa4e:	4798      	blx	r3
	SetEnable(true);
    fa50:	2101      	movs	r1, #1
    fa52:	4628      	mov	r0, r5
    fa54:	47a0      	blx	r4
    fa56:	24ff      	movs	r4, #255	; 0xff
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
	{
		SetPWM(i);
    fa58:	4f0b      	ldr	r7, [pc, #44]	; (fa88 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
		delay_us(10);
    fa5a:	f04f 080a 	mov.w	r8, #10
    fa5e:	4e0b      	ldr	r6, [pc, #44]	; (fa8c <_ZN19EvaporatorFan_Class8SelfTestEv+0x50>)
		SetPWM(i);
    fa60:	4621      	mov	r1, r4
    fa62:	4628      	mov	r0, r5
    fa64:	47b8      	blx	r7
		delay_us(10);
    fa66:	4640      	mov	r0, r8
    fa68:	47b0      	blx	r6
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
    fa6a:	3c01      	subs	r4, #1
    fa6c:	b2e4      	uxtb	r4, r4
    fa6e:	2c0c      	cmp	r4, #12
    fa70:	d1f6      	bne.n	fa60 <_ZN19EvaporatorFan_Class8SelfTestEv+0x24>
	}

	ReadStatus();
    fa72:	4628      	mov	r0, r5
    fa74:	4b06      	ldr	r3, [pc, #24]	; (fa90 <_ZN19EvaporatorFan_Class8SelfTestEv+0x54>)
    fa76:	4798      	blx	r3
	result=evaporatorFansStatus.inputs->niAlcEvaFanExtFault;
    fa78:	7828      	ldrb	r0, [r5, #0]
	return result;
}
    fa7a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    fa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa82:	bf00      	nop
    fa84:	0000f9fd 	.word	0x0000f9fd
    fa88:	0000fa21 	.word	0x0000fa21
    fa8c:	00002b81 	.word	0x00002b81
    fa90:	0000f9b1 	.word	0x0000f9b1

0000fa94 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
    fa94:	b510      	push	{r4, lr}
    fa96:	4604      	mov	r4, r0
	i2c=i2cClass;
    fa98:	6082      	str	r2, [r0, #8]
	fanNumber=number;
    fa9a:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
    fa9e:	7a52      	ldrb	r2, [r2, #9]
    faa0:	b90a      	cbnz	r2, faa6 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
    faa2:	7920      	ldrb	r0, [r4, #4]
    faa4:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
    faa6:	4619      	mov	r1, r3
    faa8:	4b0e      	ldr	r3, [pc, #56]	; (fae4 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
    faaa:	4798      	blx	r3
			if (fanNumber==0)
    faac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    fab0:	b15b      	cbz	r3, faca <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x36>
			expanders[4+fanNumber]->SetPortOutput();
    fab2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    fab6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    faba:	69d8      	ldr	r0, [r3, #28]
    fabc:	4b0a      	ldr	r3, [pc, #40]	; (fae8 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x54>)
    fabe:	4798      	blx	r3
			isOK=SelfTest();
    fac0:	4620      	mov	r0, r4
    fac2:	4b0a      	ldr	r3, [pc, #40]	; (faec <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x58>)
    fac4:	4798      	blx	r3
    fac6:	7120      	strb	r0, [r4, #4]
    fac8:	e7eb      	b.n	faa2 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
    faca:	2170      	movs	r1, #112	; 0x70
    facc:	68e0      	ldr	r0, [r4, #12]
    face:	4b08      	ldr	r3, [pc, #32]	; (faf0 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x5c>)
    fad0:	4798      	blx	r3
				expanders[0]->SetPortOutput(0x07);
    fad2:	2107      	movs	r1, #7
    fad4:	68e0      	ldr	r0, [r4, #12]
    fad6:	4b07      	ldr	r3, [pc, #28]	; (faf4 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x60>)
    fad8:	4798      	blx	r3
				expanders[1]->SetPortInput();
    fada:	6920      	ldr	r0, [r4, #16]
    fadc:	4b06      	ldr	r3, [pc, #24]	; (faf8 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x64>)
    fade:	4798      	blx	r3
    fae0:	e7e7      	b.n	fab2 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
    fae2:	bf00      	nop
    fae4:	0000f999 	.word	0x0000f999
    fae8:	0000e2fd 	.word	0x0000e2fd
    faec:	0000fa3d 	.word	0x0000fa3d
    faf0:	0000e289 	.word	0x0000e289
    faf4:	0000e331 	.word	0x0000e331
    faf8:	0000e245 	.word	0x0000e245

0000fafc <_GLOBAL__sub_I_ptrEvaFanClass>:
}
    fafc:	b510      	push	{r4, lr}
    fafe:	4c05      	ldr	r4, [pc, #20]	; (fb14 <_GLOBAL__sub_I_ptrEvaFanClass+0x18>)
    fb00:	4905      	ldr	r1, [pc, #20]	; (fb18 <_GLOBAL__sub_I_ptrEvaFanClass+0x1c>)
    fb02:	4620      	mov	r0, r4
    fb04:	4b05      	ldr	r3, [pc, #20]	; (fb1c <_GLOBAL__sub_I_ptrEvaFanClass+0x20>)
    fb06:	4798      	blx	r3
    fb08:	4a05      	ldr	r2, [pc, #20]	; (fb20 <_GLOBAL__sub_I_ptrEvaFanClass+0x24>)
    fb0a:	4906      	ldr	r1, [pc, #24]	; (fb24 <_GLOBAL__sub_I_ptrEvaFanClass+0x28>)
    fb0c:	4620      	mov	r0, r4
    fb0e:	4b06      	ldr	r3, [pc, #24]	; (fb28 <_GLOBAL__sub_I_ptrEvaFanClass+0x2c>)
    fb10:	4798      	blx	r3
    fb12:	bd10      	pop	{r4, pc}
    fb14:	20001d8c 	.word	0x20001d8c
    fb18:	2000a2f0 	.word	0x2000a2f0
    fb1c:	0000debd 	.word	0x0000debd
    fb20:	20000000 	.word	0x20000000
    fb24:	0000ded9 	.word	0x0000ded9
    fb28:	00013cdd 	.word	0x00013cdd

0000fb2c <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
    fb2c:	4770      	bx	lr

0000fb2e <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
    fb2e:	4770      	bx	lr

0000fb30 <_ZN29Dual_Flapper_Valve_ControllerD1Ev>:
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
{
} //Dual_Flapper_Valve_Controller

// default destructor
Dual_Flapper_Valve_Controller::~Dual_Flapper_Valve_Controller()
    fb30:	b510      	push	{r4, lr}
    fb32:	4604      	mov	r4, r0
    fb34:	4b01      	ldr	r3, [pc, #4]	; (fb3c <_ZN29Dual_Flapper_Valve_ControllerD1Ev+0xc>)
    fb36:	4798      	blx	r3
{
} //~Dual_Flapper_Valve_Controller
    fb38:	4620      	mov	r0, r4
    fb3a:	bd10      	pop	{r4, pc}
    fb3c:	00010021 	.word	0x00010021

0000fb40 <__tcf_0>:
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
    fb40:	b538      	push	{r3, r4, r5, lr}
    fb42:	4d04      	ldr	r5, [pc, #16]	; (fb54 <__tcf_0+0x14>)
    fb44:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
    fb48:	4c03      	ldr	r4, [pc, #12]	; (fb58 <__tcf_0+0x18>)
    fb4a:	47a0      	blx	r4
    fb4c:	4628      	mov	r0, r5
    fb4e:	47a0      	blx	r4
    fb50:	bd38      	pop	{r3, r4, r5, pc}
    fb52:	bf00      	nop
    fb54:	20001da4 	.word	0x20001da4
    fb58:	00010021 	.word	0x00010021

0000fb5c <_ZN29Dual_Flapper_Valve_Controller4InitEv>:

bool Dual_Flapper_Valve_Controller::Init(){
    fb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb5e:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		valve[i]=&staticFVController[i];
    fb60:	4d17      	ldr	r5, [pc, #92]	; (fbc0 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x64>)
    fb62:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
		valve[i]->InitController(i);
    fb66:	2100      	movs	r1, #0
    fb68:	4628      	mov	r0, r5
    fb6a:	4f16      	ldr	r7, [pc, #88]	; (fbc4 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x68>)
    fb6c:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
    fb6e:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    fb72:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    fb76:	4e14      	ldr	r6, [pc, #80]	; (fbc8 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x6c>)
    fb78:	47b0      	blx	r6
		valve[i]=&staticFVController[i];
    fb7a:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
    fb7e:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
		valve[i]->InitController(i);
    fb82:	2101      	movs	r1, #1
    fb84:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
    fb86:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
    fb8a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    fb8e:	47b0      	blx	r6
	
	}
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		
		valve[i]->SetPartner(valve[1-i]);
    fb90:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    fb94:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    fb98:	47b0      	blx	r6
    fb9a:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
    fb9e:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    fba2:	47b0      	blx	r6
		
	}
	valve1=valve[0]; 
    fba4:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
    fba8:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
	valve2=valve[1]; 
    fbac:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    fbb0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	return (valve1->isOK)|(valve2->isOK);
    fbb4:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
    fbb8:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
    fbbc:	4310      	orrs	r0, r2
    fbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fbc0:	20001da4 	.word	0x20001da4
    fbc4:	00010041 	.word	0x00010041
    fbc8:	00010417 	.word	0x00010417

0000fbcc <_ZN29Dual_Flapper_Valve_Controller12IsStandAloneEv>:
		boolResult=	!valve1->dataStruct.controlOutputs.iAlcFvStandAloneOut;
	}
	return boolResult;
}

bool Dual_Flapper_Valve_Controller::IsStandAlone(void){
    fbcc:	b570      	push	{r4, r5, r6, lr}
    fbce:	4605      	mov	r5, r0
	is_stand_alone=valve1->IsStandAloneMode()|valve2->IsStandAloneMode();
    fbd0:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
    fbd4:	4e05      	ldr	r6, [pc, #20]	; (fbec <_ZN29Dual_Flapper_Valve_Controller12IsStandAloneEv+0x20>)
    fbd6:	47b0      	blx	r6
    fbd8:	4604      	mov	r4, r0
    fbda:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
    fbde:	47b0      	blx	r6
    fbe0:	4320      	orrs	r0, r4
    fbe2:	b2c0      	uxtb	r0, r0
    fbe4:	f885 00ec 	strb.w	r0, [r5, #236]	; 0xec
	return is_stand_alone;
}
    fbe8:	bd70      	pop	{r4, r5, r6, pc}
    fbea:	bf00      	nop
    fbec:	000103dd 	.word	0x000103dd

0000fbf0 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev>:

Dual_Flapper_Valve_Controller flapper;
    fbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    fbf2:	4c10      	ldr	r4, [pc, #64]	; (fc34 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x44>)
    fbf4:	f504 75dc 	add.w	r5, r4, #440	; 0x1b8
    fbf8:	490f      	ldr	r1, [pc, #60]	; (fc38 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x48>)
    fbfa:	4628      	mov	r0, r5
    fbfc:	4b0f      	ldr	r3, [pc, #60]	; (fc3c <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x4c>)
    fbfe:	4798      	blx	r3
    fc00:	4e0f      	ldr	r6, [pc, #60]	; (fc40 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x50>)
    fc02:	4632      	mov	r2, r6
    fc04:	490f      	ldr	r1, [pc, #60]	; (fc44 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x54>)
    fc06:	4628      	mov	r0, r5
    fc08:	4d0f      	ldr	r5, [pc, #60]	; (fc48 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x58>)
    fc0a:	47a8      	blx	r5
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
    fc0c:	4620      	mov	r0, r4
    fc0e:	4f0f      	ldr	r7, [pc, #60]	; (fc4c <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x5c>)
    fc10:	47b8      	blx	r7
    fc12:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
    fc16:	47b8      	blx	r7
    fc18:	4632      	mov	r2, r6
    fc1a:	490d      	ldr	r1, [pc, #52]	; (fc50 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x60>)
    fc1c:	2000      	movs	r0, #0
    fc1e:	47a8      	blx	r5
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
    fc20:	f504 74e8 	add.w	r4, r4, #464	; 0x1d0
    fc24:	4620      	mov	r0, r4
    fc26:	4b0b      	ldr	r3, [pc, #44]	; (fc54 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x64>)
    fc28:	4798      	blx	r3
Dual_Flapper_Valve_Controller flapper;
    fc2a:	4632      	mov	r2, r6
    fc2c:	490a      	ldr	r1, [pc, #40]	; (fc58 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x68>)
    fc2e:	4620      	mov	r0, r4
    fc30:	47a8      	blx	r5
    fc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc34:	20001da4 	.word	0x20001da4
    fc38:	2000a2f0 	.word	0x2000a2f0
    fc3c:	0000debd 	.word	0x0000debd
    fc40:	20000000 	.word	0x20000000
    fc44:	0000ded9 	.word	0x0000ded9
    fc48:	00013cdd 	.word	0x00013cdd
    fc4c:	0000ff95 	.word	0x0000ff95
    fc50:	0000fb41 	.word	0x0000fb41
    fc54:	0000ff95 	.word	0x0000ff95
    fc58:	0000fb31 	.word	0x0000fb31

0000fc5c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    fc5c:	b480      	push	{r7}
    fc5e:	b083      	sub	sp, #12
    fc60:	af00      	add	r7, sp, #0
    fc62:	6078      	str	r0, [r7, #4]
    fc64:	460b      	mov	r3, r1
    fc66:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    fc68:	78fb      	ldrb	r3, [r7, #3]
    fc6a:	687a      	ldr	r2, [r7, #4]
    fc6c:	01db      	lsls	r3, r3, #7
    fc6e:	4413      	add	r3, r2
    fc70:	681b      	ldr	r3, [r3, #0]
}
    fc72:	4618      	mov	r0, r3
    fc74:	370c      	adds	r7, #12
    fc76:	46bd      	mov	sp, r7
    fc78:	bc80      	pop	{r7}
    fc7a:	4770      	bx	lr

0000fc7c <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    fc7c:	b480      	push	{r7}
    fc7e:	b085      	sub	sp, #20
    fc80:	af00      	add	r7, sp, #0
    fc82:	60f8      	str	r0, [r7, #12]
    fc84:	460b      	mov	r3, r1
    fc86:	607a      	str	r2, [r7, #4]
    fc88:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    fc8a:	7afb      	ldrb	r3, [r7, #11]
    fc8c:	68fa      	ldr	r2, [r7, #12]
    fc8e:	01db      	lsls	r3, r3, #7
    fc90:	4413      	add	r3, r2
    fc92:	3318      	adds	r3, #24
    fc94:	687a      	ldr	r2, [r7, #4]
    fc96:	601a      	str	r2, [r3, #0]
}
    fc98:	bf00      	nop
    fc9a:	3714      	adds	r7, #20
    fc9c:	46bd      	mov	sp, r7
    fc9e:	bc80      	pop	{r7}
    fca0:	4770      	bx	lr

0000fca2 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    fca2:	b480      	push	{r7}
    fca4:	b083      	sub	sp, #12
    fca6:	af00      	add	r7, sp, #0
    fca8:	6078      	str	r0, [r7, #4]
    fcaa:	460b      	mov	r3, r1
    fcac:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    fcae:	78fb      	ldrb	r3, [r7, #3]
    fcb0:	687a      	ldr	r2, [r7, #4]
    fcb2:	01db      	lsls	r3, r3, #7
    fcb4:	4413      	add	r3, r2
    fcb6:	3310      	adds	r3, #16
    fcb8:	681b      	ldr	r3, [r3, #0]
}
    fcba:	4618      	mov	r0, r3
    fcbc:	370c      	adds	r7, #12
    fcbe:	46bd      	mov	sp, r7
    fcc0:	bc80      	pop	{r7}
    fcc2:	4770      	bx	lr

0000fcc4 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    fcc4:	b480      	push	{r7}
    fcc6:	b085      	sub	sp, #20
    fcc8:	af00      	add	r7, sp, #0
    fcca:	60f8      	str	r0, [r7, #12]
    fccc:	460b      	mov	r3, r1
    fcce:	607a      	str	r2, [r7, #4]
    fcd0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    fcd2:	7afb      	ldrb	r3, [r7, #11]
    fcd4:	68fa      	ldr	r2, [r7, #12]
    fcd6:	01db      	lsls	r3, r3, #7
    fcd8:	4413      	add	r3, r2
    fcda:	3314      	adds	r3, #20
    fcdc:	687a      	ldr	r2, [r7, #4]
    fcde:	601a      	str	r2, [r3, #0]
}
    fce0:	bf00      	nop
    fce2:	3714      	adds	r7, #20
    fce4:	46bd      	mov	sp, r7
    fce6:	bc80      	pop	{r7}
    fce8:	4770      	bx	lr

0000fcea <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    fcea:	b480      	push	{r7}
    fcec:	b085      	sub	sp, #20
    fcee:	af00      	add	r7, sp, #0
    fcf0:	60f8      	str	r0, [r7, #12]
    fcf2:	460b      	mov	r3, r1
    fcf4:	607a      	str	r2, [r7, #4]
    fcf6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    fcf8:	7afb      	ldrb	r3, [r7, #11]
    fcfa:	68fa      	ldr	r2, [r7, #12]
    fcfc:	01db      	lsls	r3, r3, #7
    fcfe:	4413      	add	r3, r2
    fd00:	331c      	adds	r3, #28
    fd02:	687a      	ldr	r2, [r7, #4]
    fd04:	601a      	str	r2, [r3, #0]
}
    fd06:	bf00      	nop
    fd08:	3714      	adds	r7, #20
    fd0a:	46bd      	mov	sp, r7
    fd0c:	bc80      	pop	{r7}
    fd0e:	4770      	bx	lr

0000fd10 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    fd10:	b480      	push	{r7}
    fd12:	b083      	sub	sp, #12
    fd14:	af00      	add	r7, sp, #0
    fd16:	6078      	str	r0, [r7, #4]
    fd18:	460b      	mov	r3, r1
    fd1a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    fd1c:	78fb      	ldrb	r3, [r7, #3]
    fd1e:	687a      	ldr	r2, [r7, #4]
    fd20:	01db      	lsls	r3, r3, #7
    fd22:	4413      	add	r3, r2
    fd24:	3320      	adds	r3, #32
    fd26:	681b      	ldr	r3, [r3, #0]
}
    fd28:	4618      	mov	r0, r3
    fd2a:	370c      	adds	r7, #12
    fd2c:	46bd      	mov	sp, r7
    fd2e:	bc80      	pop	{r7}
    fd30:	4770      	bx	lr
	...

0000fd34 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    fd34:	b580      	push	{r7, lr}
    fd36:	b082      	sub	sp, #8
    fd38:	af00      	add	r7, sp, #0
    fd3a:	4603      	mov	r3, r0
    fd3c:	6039      	str	r1, [r7, #0]
    fd3e:	71fb      	strb	r3, [r7, #7]
    fd40:	4613      	mov	r3, r2
    fd42:	71bb      	strb	r3, [r7, #6]
	if (level) {
    fd44:	79bb      	ldrb	r3, [r7, #6]
    fd46:	2b00      	cmp	r3, #0
    fd48:	d006      	beq.n	fd58 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    fd4a:	79fb      	ldrb	r3, [r7, #7]
    fd4c:	683a      	ldr	r2, [r7, #0]
    fd4e:	4619      	mov	r1, r3
    fd50:	4806      	ldr	r0, [pc, #24]	; (fd6c <_gpio_set_level+0x38>)
    fd52:	4b07      	ldr	r3, [pc, #28]	; (fd70 <_gpio_set_level+0x3c>)
    fd54:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    fd56:	e005      	b.n	fd64 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    fd58:	79fb      	ldrb	r3, [r7, #7]
    fd5a:	683a      	ldr	r2, [r7, #0]
    fd5c:	4619      	mov	r1, r3
    fd5e:	4803      	ldr	r0, [pc, #12]	; (fd6c <_gpio_set_level+0x38>)
    fd60:	4b04      	ldr	r3, [pc, #16]	; (fd74 <_gpio_set_level+0x40>)
    fd62:	4798      	blx	r3
}
    fd64:	bf00      	nop
    fd66:	3708      	adds	r7, #8
    fd68:	46bd      	mov	sp, r7
    fd6a:	bd80      	pop	{r7, pc}
    fd6c:	41008000 	.word	0x41008000
    fd70:	0000fc7d 	.word	0x0000fc7d
    fd74:	0000fcc5 	.word	0x0000fcc5

0000fd78 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    fd78:	b580      	push	{r7, lr}
    fd7a:	b082      	sub	sp, #8
    fd7c:	af00      	add	r7, sp, #0
    fd7e:	4603      	mov	r3, r0
    fd80:	6039      	str	r1, [r7, #0]
    fd82:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
    fd84:	79fb      	ldrb	r3, [r7, #7]
    fd86:	683a      	ldr	r2, [r7, #0]
    fd88:	4619      	mov	r1, r3
    fd8a:	4803      	ldr	r0, [pc, #12]	; (fd98 <_gpio_toggle_level+0x20>)
    fd8c:	4b03      	ldr	r3, [pc, #12]	; (fd9c <_gpio_toggle_level+0x24>)
    fd8e:	4798      	blx	r3
}
    fd90:	bf00      	nop
    fd92:	3708      	adds	r7, #8
    fd94:	46bd      	mov	sp, r7
    fd96:	bd80      	pop	{r7, pc}
    fd98:	41008000 	.word	0x41008000
    fd9c:	0000fceb 	.word	0x0000fceb

0000fda0 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    fda0:	b580      	push	{r7, lr}
    fda2:	b086      	sub	sp, #24
    fda4:	af00      	add	r7, sp, #0
    fda6:	4603      	mov	r3, r0
    fda8:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    fdaa:	f107 030c 	add.w	r3, r7, #12
    fdae:	4618      	mov	r0, r3
    fdb0:	4b13      	ldr	r3, [pc, #76]	; (fe00 <_gpio_get_level+0x60>)
    fdb2:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    fdb4:	79fb      	ldrb	r3, [r7, #7]
    fdb6:	4619      	mov	r1, r3
    fdb8:	4812      	ldr	r0, [pc, #72]	; (fe04 <_gpio_get_level+0x64>)
    fdba:	4b13      	ldr	r3, [pc, #76]	; (fe08 <_gpio_get_level+0x68>)
    fdbc:	4798      	blx	r3
    fdbe:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    fdc0:	79fb      	ldrb	r3, [r7, #7]
    fdc2:	4619      	mov	r1, r3
    fdc4:	480f      	ldr	r0, [pc, #60]	; (fe04 <_gpio_get_level+0x64>)
    fdc6:	4b11      	ldr	r3, [pc, #68]	; (fe0c <_gpio_get_level+0x6c>)
    fdc8:	4798      	blx	r3
    fdca:	4602      	mov	r2, r0
    fdcc:	697b      	ldr	r3, [r7, #20]
    fdce:	43db      	mvns	r3, r3
    fdd0:	4013      	ands	r3, r2
    fdd2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    fdd4:	79fb      	ldrb	r3, [r7, #7]
    fdd6:	4619      	mov	r1, r3
    fdd8:	480a      	ldr	r0, [pc, #40]	; (fe04 <_gpio_get_level+0x64>)
    fdda:	4b0d      	ldr	r3, [pc, #52]	; (fe10 <_gpio_get_level+0x70>)
    fddc:	4798      	blx	r3
    fdde:	4602      	mov	r2, r0
    fde0:	697b      	ldr	r3, [r7, #20]
    fde2:	4013      	ands	r3, r2
    fde4:	693a      	ldr	r2, [r7, #16]
    fde6:	4313      	orrs	r3, r2
    fde8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    fdea:	f107 030c 	add.w	r3, r7, #12
    fdee:	4618      	mov	r0, r3
    fdf0:	4b08      	ldr	r3, [pc, #32]	; (fe14 <_gpio_get_level+0x74>)
    fdf2:	4798      	blx	r3

	return tmp;
    fdf4:	693b      	ldr	r3, [r7, #16]
}
    fdf6:	4618      	mov	r0, r3
    fdf8:	3718      	adds	r7, #24
    fdfa:	46bd      	mov	sp, r7
    fdfc:	bd80      	pop	{r7, pc}
    fdfe:	bf00      	nop
    fe00:	0000be8d 	.word	0x0000be8d
    fe04:	41008000 	.word	0x41008000
    fe08:	0000fc5d 	.word	0x0000fc5d
    fe0c:	0000fd11 	.word	0x0000fd11
    fe10:	0000fca3 	.word	0x0000fca3
    fe14:	0000beb3 	.word	0x0000beb3

0000fe18 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    fe18:	b580      	push	{r7, lr}
    fe1a:	b082      	sub	sp, #8
    fe1c:	af00      	add	r7, sp, #0
    fe1e:	4603      	mov	r3, r0
    fe20:	460a      	mov	r2, r1
    fe22:	71fb      	strb	r3, [r7, #7]
    fe24:	4613      	mov	r3, r2
    fe26:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    fe28:	79fb      	ldrb	r3, [r7, #7]
    fe2a:	115b      	asrs	r3, r3, #5
    fe2c:	b2d8      	uxtb	r0, r3
    fe2e:	79fb      	ldrb	r3, [r7, #7]
    fe30:	f003 031f 	and.w	r3, r3, #31
    fe34:	2201      	movs	r2, #1
    fe36:	fa02 f303 	lsl.w	r3, r2, r3
    fe3a:	79ba      	ldrb	r2, [r7, #6]
    fe3c:	4619      	mov	r1, r3
    fe3e:	4b03      	ldr	r3, [pc, #12]	; (fe4c <gpio_set_pin_level+0x34>)
    fe40:	4798      	blx	r3
}
    fe42:	bf00      	nop
    fe44:	3708      	adds	r7, #8
    fe46:	46bd      	mov	sp, r7
    fe48:	bd80      	pop	{r7, pc}
    fe4a:	bf00      	nop
    fe4c:	0000fd35 	.word	0x0000fd35

0000fe50 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    fe50:	b580      	push	{r7, lr}
    fe52:	b082      	sub	sp, #8
    fe54:	af00      	add	r7, sp, #0
    fe56:	4603      	mov	r3, r0
    fe58:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    fe5a:	79fb      	ldrb	r3, [r7, #7]
    fe5c:	115b      	asrs	r3, r3, #5
    fe5e:	b2d8      	uxtb	r0, r3
    fe60:	79fb      	ldrb	r3, [r7, #7]
    fe62:	f003 031f 	and.w	r3, r3, #31
    fe66:	2201      	movs	r2, #1
    fe68:	fa02 f303 	lsl.w	r3, r2, r3
    fe6c:	4619      	mov	r1, r3
    fe6e:	4b03      	ldr	r3, [pc, #12]	; (fe7c <gpio_toggle_pin_level+0x2c>)
    fe70:	4798      	blx	r3
}
    fe72:	bf00      	nop
    fe74:	3708      	adds	r7, #8
    fe76:	46bd      	mov	sp, r7
    fe78:	bd80      	pop	{r7, pc}
    fe7a:	bf00      	nop
    fe7c:	0000fd79 	.word	0x0000fd79

0000fe80 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    fe80:	b580      	push	{r7, lr}
    fe82:	b082      	sub	sp, #8
    fe84:	af00      	add	r7, sp, #0
    fe86:	4603      	mov	r3, r0
    fe88:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    fe8a:	79fb      	ldrb	r3, [r7, #7]
    fe8c:	115b      	asrs	r3, r3, #5
    fe8e:	b2db      	uxtb	r3, r3
    fe90:	4618      	mov	r0, r3
    fe92:	4b09      	ldr	r3, [pc, #36]	; (feb8 <gpio_get_pin_level+0x38>)
    fe94:	4798      	blx	r3
    fe96:	4601      	mov	r1, r0
    fe98:	79fb      	ldrb	r3, [r7, #7]
    fe9a:	f003 031f 	and.w	r3, r3, #31
    fe9e:	2201      	movs	r2, #1
    fea0:	fa02 f303 	lsl.w	r3, r2, r3
    fea4:	400b      	ands	r3, r1
    fea6:	2b00      	cmp	r3, #0
    fea8:	bf14      	ite	ne
    feaa:	2301      	movne	r3, #1
    feac:	2300      	moveq	r3, #0
    feae:	b2db      	uxtb	r3, r3
}
    feb0:	4618      	mov	r0, r3
    feb2:	3708      	adds	r7, #8
    feb4:	46bd      	mov	sp, r7
    feb6:	bd80      	pop	{r7, pc}
    feb8:	0000fda1 	.word	0x0000fda1

0000febc <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
    febc:	b480      	push	{r7}
    febe:	b083      	sub	sp, #12
    fec0:	af00      	add	r7, sp, #0
    fec2:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
    fec4:	4b07      	ldr	r3, [pc, #28]	; (fee4 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
    fec6:	681b      	ldr	r3, [r3, #0]
    fec8:	2201      	movs	r2, #1
    feca:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
    fece:	4b05      	ldr	r3, [pc, #20]	; (fee4 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
    fed0:	681b      	ldr	r3, [r3, #0]
    fed2:	2201      	movs	r2, #1
    fed4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
    fed8:	bf00      	nop
    feda:	370c      	adds	r7, #12
    fedc:	46bd      	mov	sp, r7
    fede:	bc80      	pop	{r7}
    fee0:	4770      	bx	lr
    fee2:	bf00      	nop
    fee4:	2000219c 	.word	0x2000219c

0000fee8 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
    fee8:	b480      	push	{r7}
    feea:	b083      	sub	sp, #12
    feec:	af00      	add	r7, sp, #0
    feee:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
    fef0:	4b07      	ldr	r3, [pc, #28]	; (ff10 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
    fef2:	685b      	ldr	r3, [r3, #4]
    fef4:	2201      	movs	r2, #1
    fef6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
    fefa:	4b05      	ldr	r3, [pc, #20]	; (ff10 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
    fefc:	685b      	ldr	r3, [r3, #4]
    fefe:	2201      	movs	r2, #1
    ff00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
    ff04:	bf00      	nop
    ff06:	370c      	adds	r7, #12
    ff08:	46bd      	mov	sp, r7
    ff0a:	bc80      	pop	{r7}
    ff0c:	4770      	bx	lr
    ff0e:	bf00      	nop
    ff10:	2000219c 	.word	0x2000219c

0000ff14 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task>:
static void TimeoutFlapperValve1FullyClossed(const struct timer_task *const timer_task)
{
    ff14:	b480      	push	{r7}
    ff16:	b083      	sub	sp, #12
    ff18:	af00      	add	r7, sp, #0
    ff1a:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[0]->fullClosedTimeout=true;
    ff1c:	4b04      	ldr	r3, [pc, #16]	; (ff30 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task+0x1c>)
    ff1e:	681b      	ldr	r3, [r3, #0]
    ff20:	2201      	movs	r2, #1
    ff22:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
    ff26:	bf00      	nop
    ff28:	370c      	adds	r7, #12
    ff2a:	46bd      	mov	sp, r7
    ff2c:	bc80      	pop	{r7}
    ff2e:	4770      	bx	lr
    ff30:	2000219c 	.word	0x2000219c

0000ff34 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task>:
static void TimeoutFlapperValve2FullyClossed(const struct timer_task *const timer_task)
{
    ff34:	b480      	push	{r7}
    ff36:	b083      	sub	sp, #12
    ff38:	af00      	add	r7, sp, #0
    ff3a:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->fullClosedTimeout=true;
    ff3c:	4b04      	ldr	r3, [pc, #16]	; (ff50 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task+0x1c>)
    ff3e:	685b      	ldr	r3, [r3, #4]
    ff40:	2201      	movs	r2, #1
    ff42:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
    ff46:	bf00      	nop
    ff48:	370c      	adds	r7, #12
    ff4a:	46bd      	mov	sp, r7
    ff4c:	bc80      	pop	{r7}
    ff4e:	4770      	bx	lr
    ff50:	2000219c 	.word	0x2000219c

0000ff54 <_ZL18ResetValve1TimeoutPK10timer_task>:

static void ResetValve1Timeout(const struct timer_task *const timer_task)
{
    ff54:	b480      	push	{r7}
    ff56:	b083      	sub	sp, #12
    ff58:	af00      	add	r7, sp, #0
    ff5a:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[0]->resetTimeout=true;
    ff5c:	4b04      	ldr	r3, [pc, #16]	; (ff70 <_ZL18ResetValve1TimeoutPK10timer_task+0x1c>)
    ff5e:	681b      	ldr	r3, [r3, #0]
    ff60:	2201      	movs	r2, #1
    ff62:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
    ff66:	bf00      	nop
    ff68:	370c      	adds	r7, #12
    ff6a:	46bd      	mov	sp, r7
    ff6c:	bc80      	pop	{r7}
    ff6e:	4770      	bx	lr
    ff70:	2000219c 	.word	0x2000219c

0000ff74 <_ZL18ResetValve2TimeoutPK10timer_task>:
static void ResetValve2Timeout(const struct timer_task *const timer_task)
{
    ff74:	b480      	push	{r7}
    ff76:	b083      	sub	sp, #12
    ff78:	af00      	add	r7, sp, #0
    ff7a:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[1]->resetTimeout=true;
    ff7c:	4b04      	ldr	r3, [pc, #16]	; (ff90 <_ZL18ResetValve2TimeoutPK10timer_task+0x1c>)
    ff7e:	685b      	ldr	r3, [r3, #4]
    ff80:	2201      	movs	r2, #1
    ff82:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
    ff86:	bf00      	nop
    ff88:	370c      	adds	r7, #12
    ff8a:	46bd      	mov	sp, r7
    ff8c:	bc80      	pop	{r7}
    ff8e:	4770      	bx	lr
    ff90:	2000219c 	.word	0x2000219c

0000ff94 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
    ff94:	b580      	push	{r7, lr}
    ff96:	b082      	sub	sp, #8
    ff98:	af00      	add	r7, sp, #0
    ff9a:	6078      	str	r0, [r7, #4]
    ff9c:	687b      	ldr	r3, [r7, #4]
    ff9e:	4618      	mov	r0, r3
    ffa0:	4b1d      	ldr	r3, [pc, #116]	; (10018 <STACK_SIZE+0x18>)
    ffa2:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
    ffa4:	687b      	ldr	r3, [r7, #4]
    ffa6:	4a1d      	ldr	r2, [pc, #116]	; (1001c <STACK_SIZE+0x1c>)
    ffa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
    ffac:	687b      	ldr	r3, [r7, #4]
    ffae:	2200      	movs	r2, #0
    ffb0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	isControlling=false;
    ffb4:	687b      	ldr	r3, [r7, #4]
    ffb6:	2200      	movs	r2, #0
    ffb8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	gotSetpoint=false;
    ffbc:	687b      	ldr	r3, [r7, #4]
    ffbe:	2200      	movs	r2, #0
    ffc0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	controllerEnabled=false;
    ffc4:	687b      	ldr	r3, [r7, #4]
    ffc6:	2200      	movs	r2, #0
    ffc8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	closing=false;
    ffcc:	687b      	ldr	r3, [r7, #4]
    ffce:	2200      	movs	r2, #0
    ffd0:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
    ffd4:	687b      	ldr	r3, [r7, #4]
    ffd6:	22da      	movs	r2, #218	; 0xda
    ffd8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	NBC_Mode=false;
    ffdc:	687b      	ldr	r3, [r7, #4]
    ffde:	2200      	movs	r2, #0
    ffe0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	NBC_Activated=false;
    ffe4:	687b      	ldr	r3, [r7, #4]
    ffe6:	2200      	movs	r2, #0
    ffe8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	standAloneActivated=false;
    ffec:	687b      	ldr	r3, [r7, #4]
    ffee:	2200      	movs	r2, #0
    fff0:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	standAloneMode=false;
    fff4:	687b      	ldr	r3, [r7, #4]
    fff6:	2200      	movs	r2, #0
    fff8:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	resetTimeout=false;
    fffc:	687b      	ldr	r3, [r7, #4]
    fffe:	2200      	movs	r2, #0
   10000:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	standAloneReturning=false;
   10004:	687b      	ldr	r3, [r7, #4]
   10006:	2200      	movs	r2, #0
   10008:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	
	
} //FlapperValveController
   1000c:	687b      	ldr	r3, [r7, #4]
   1000e:	4618      	mov	r0, r3
   10010:	3708      	adds	r7, #8
   10012:	46bd      	mov	sp, r7
   10014:	bd80      	pop	{r7, pc}
   10016:	bf00      	nop
   10018:	00011305 	.word	0x00011305
   1001c:	200021a4 	.word	0x200021a4

00010020 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
   10020:	b580      	push	{r7, lr}
   10022:	b082      	sub	sp, #8
   10024:	af00      	add	r7, sp, #0
   10026:	6078      	str	r0, [r7, #4]
   10028:	687b      	ldr	r3, [r7, #4]
   1002a:	4618      	mov	r0, r3
   1002c:	4b03      	ldr	r3, [pc, #12]	; (1003c <_ZN22FlapperValveControllerD1Ev+0x1c>)
   1002e:	4798      	blx	r3
{
} //~FlapperValveController
   10030:	687b      	ldr	r3, [r7, #4]
   10032:	4618      	mov	r0, r3
   10034:	3708      	adds	r7, #8
   10036:	46bd      	mov	sp, r7
   10038:	bd80      	pop	{r7, pc}
   1003a:	bf00      	nop
   1003c:	00011351 	.word	0x00011351

00010040 <_ZN22FlapperValveController14InitControllerEh>:
	{
		isOK=Selftest();
	}
	return	isOK;	
}
bool FlapperValveController::InitController(uint8_t valve_id){
   10040:	b580      	push	{r7, lr}
   10042:	b082      	sub	sp, #8
   10044:	af00      	add	r7, sp, #0
   10046:	6078      	str	r0, [r7, #4]
   10048:	460b      	mov	r3, r1
   1004a:	70fb      	strb	r3, [r7, #3]
	ptrFlapperValveController[valve_id]=this;
   1004c:	78fb      	ldrb	r3, [r7, #3]
   1004e:	491b      	ldr	r1, [pc, #108]	; (100bc <_ZN22FlapperValveController14InitControllerEh+0x7c>)
   10050:	687a      	ldr	r2, [r7, #4]
   10052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		valve_ID=valve_id;
   10056:	687b      	ldr	r3, [r7, #4]
   10058:	78fa      	ldrb	r2, [r7, #3]
   1005a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		singlefv=&fvStatic[valve_id];
   1005e:	78fa      	ldrb	r2, [r7, #3]
   10060:	4613      	mov	r3, r2
   10062:	011b      	lsls	r3, r3, #4
   10064:	1a9b      	subs	r3, r3, r2
   10066:	00db      	lsls	r3, r3, #3
   10068:	4a15      	ldr	r2, [pc, #84]	; (100c0 <_ZN22FlapperValveController14InitControllerEh+0x80>)
   1006a:	441a      	add	r2, r3
   1006c:	687b      	ldr	r3, [r7, #4]
   1006e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		positions[valve_id]=position_array_static[valve_id];
   10072:	78fb      	ldrb	r3, [r7, #3]
   10074:	78fa      	ldrb	r2, [r7, #3]
   10076:	0112      	lsls	r2, r2, #4
   10078:	4912      	ldr	r1, [pc, #72]	; (100c4 <_ZN22FlapperValveController14InitControllerEh+0x84>)
   1007a:	440a      	add	r2, r1
   1007c:	6879      	ldr	r1, [r7, #4]
   1007e:	3332      	adds	r3, #50	; 0x32
   10080:	009b      	lsls	r3, r3, #2
   10082:	440b      	add	r3, r1
   10084:	605a      	str	r2, [r3, #4]
		if (singlefv->Init(valve_id))
   10086:	687b      	ldr	r3, [r7, #4]
   10088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1008c:	78fa      	ldrb	r2, [r7, #3]
   1008e:	4611      	mov	r1, r2
   10090:	4618      	mov	r0, r3
   10092:	4b0d      	ldr	r3, [pc, #52]	; (100c8 <_ZN22FlapperValveController14InitControllerEh+0x88>)
   10094:	4798      	blx	r3
   10096:	4603      	mov	r3, r0
   10098:	2b00      	cmp	r3, #0
   1009a:	d007      	beq.n	100ac <_ZN22FlapperValveController14InitControllerEh+0x6c>
		{
			isOK=Selftest();
   1009c:	6878      	ldr	r0, [r7, #4]
   1009e:	4b0b      	ldr	r3, [pc, #44]	; (100cc <_ZN22FlapperValveController14InitControllerEh+0x8c>)
   100a0:	4798      	blx	r3
   100a2:	4603      	mov	r3, r0
   100a4:	461a      	mov	r2, r3
   100a6:	687b      	ldr	r3, [r7, #4]
   100a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		}
		return	isOK;
   100ac:	687b      	ldr	r3, [r7, #4]
   100ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   100b2:	b2db      	uxtb	r3, r3
}
   100b4:	4618      	mov	r0, r3
   100b6:	3708      	adds	r7, #8
   100b8:	46bd      	mov	sp, r7
   100ba:	bd80      	pop	{r7, pc}
   100bc:	2000219c 	.word	0x2000219c
   100c0:	200021a4 	.word	0x200021a4
   100c4:	2000217c 	.word	0x2000217c
   100c8:	00011405 	.word	0x00011405
   100cc:	00010f71 	.word	0x00010f71

000100d0 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	singlefv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
   100d0:	b480      	push	{r7}
   100d2:	b083      	sub	sp, #12
   100d4:	af00      	add	r7, sp, #0
   100d6:	6078      	str	r0, [r7, #4]
   100d8:	460b      	mov	r3, r1
   100da:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
   100dc:	687b      	ldr	r3, [r7, #4]
   100de:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
   100e2:	687b      	ldr	r3, [r7, #4]
   100e4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	direction=currentPosition>sp;
   100e8:	687b      	ldr	r3, [r7, #4]
   100ea:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   100ee:	461a      	mov	r2, r3
   100f0:	78fb      	ldrb	r3, [r7, #3]
   100f2:	429a      	cmp	r2, r3
   100f4:	bfcc      	ite	gt
   100f6:	2301      	movgt	r3, #1
   100f8:	2300      	movle	r3, #0
   100fa:	b2da      	uxtb	r2, r3
   100fc:	687b      	ldr	r3, [r7, #4]
   100fe:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	return direction;
   10102:	687b      	ldr	r3, [r7, #4]
   10104:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	
}
   10108:	4618      	mov	r0, r3
   1010a:	370c      	adds	r7, #12
   1010c:	46bd      	mov	sp, r7
   1010e:	bc80      	pop	{r7}
   10110:	4770      	bx	lr
	...

00010114 <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
   10114:	b580      	push	{r7, lr}
   10116:	b082      	sub	sp, #8
   10118:	af00      	add	r7, sp, #0
   1011a:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
   1011c:	687b      	ldr	r3, [r7, #4]
   1011e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   10122:	4619      	mov	r1, r3
   10124:	6878      	ldr	r0, [r7, #4]
   10126:	4b03      	ldr	r3, [pc, #12]	; (10134 <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
   10128:	4798      	blx	r3
   1012a:	4603      	mov	r3, r0
	
}
   1012c:	4618      	mov	r0, r3
   1012e:	3708      	adds	r7, #8
   10130:	46bd      	mov	sp, r7
   10132:	bd80      	pop	{r7, pc}
   10134:	000100d1 	.word	0x000100d1

00010138 <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	singlefv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
   10138:	b590      	push	{r4, r7, lr}
   1013a:	b083      	sub	sp, #12
   1013c:	af00      	add	r7, sp, #0
   1013e:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
   10140:	687b      	ldr	r3, [r7, #4]
   10142:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   10146:	687b      	ldr	r3, [r7, #4]
   10148:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
//	floatLastPosition=(float)lastPosition;
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
   1014c:	687b      	ldr	r3, [r7, #4]
   1014e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10152:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   10156:	2b00      	cmp	r3, #0
   10158:	d009      	beq.n	1016e <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x36>
	{
		singlefv->SetEnable(false);
   1015a:	687b      	ldr	r3, [r7, #4]
   1015c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10160:	2100      	movs	r1, #0
   10162:	4618      	mov	r0, r3
   10164:	4b0b      	ldr	r3, [pc, #44]	; (10194 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
   10166:	4798      	blx	r3
		delay_ms(10);
   10168:	200a      	movs	r0, #10
   1016a:	4b0b      	ldr	r3, [pc, #44]	; (10198 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
   1016c:	4798      	blx	r3
	} 
	else
	{
	}
	singlefv->SetDirection(CalculateDirection());
   1016e:	687b      	ldr	r3, [r7, #4]
   10170:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
   10174:	6878      	ldr	r0, [r7, #4]
   10176:	4b09      	ldr	r3, [pc, #36]	; (1019c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
   10178:	4798      	blx	r3
   1017a:	4603      	mov	r3, r0
   1017c:	4619      	mov	r1, r3
   1017e:	4620      	mov	r0, r4
   10180:	4b07      	ldr	r3, [pc, #28]	; (101a0 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
   10182:	4798      	blx	r3
	StartMotor();
   10184:	6878      	ldr	r0, [r7, #4]
   10186:	4b07      	ldr	r3, [pc, #28]	; (101a4 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x6c>)
   10188:	4798      	blx	r3
	return 0;
   1018a:	2300      	movs	r3, #0
}
   1018c:	4618      	mov	r0, r3
   1018e:	370c      	adds	r7, #12
   10190:	46bd      	mov	sp, r7
   10192:	bd90      	pop	{r4, r7, pc}
   10194:	00011565 	.word	0x00011565
   10198:	00002bb5 	.word	0x00002bb5
   1019c:	00010115 	.word	0x00010115
   101a0:	000115e5 	.word	0x000115e5
   101a4:	00010b71 	.word	0x00010b71

000101a8 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
   101a8:	b580      	push	{r7, lr}
   101aa:	b082      	sub	sp, #8
   101ac:	af00      	add	r7, sp, #0
   101ae:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
   101b0:	6878      	ldr	r0, [r7, #4]
   101b2:	4b13      	ldr	r3, [pc, #76]	; (10200 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
   101b4:	4798      	blx	r3
   101b6:	4603      	mov	r3, r0
   101b8:	2b00      	cmp	r3, #0
   101ba:	d003      	beq.n	101c4 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
   101bc:	6878      	ldr	r0, [r7, #4]
   101be:	4b11      	ldr	r3, [pc, #68]	; (10204 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
   101c0:	4798      	blx	r3
   101c2:	e013      	b.n	101ec <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
   101c4:	687b      	ldr	r3, [r7, #4]
   101c6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   101ca:	2b00      	cmp	r3, #0
   101cc:	d00b      	beq.n	101e6 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   101ce:	687b      	ldr	r3, [r7, #4]
   101d0:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   101d4:	4619      	mov	r1, r3
   101d6:	6878      	ldr	r0, [r7, #4]
   101d8:	4b0b      	ldr	r3, [pc, #44]	; (10208 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
   101da:	4798      	blx	r3
			NBC_Activated=false;
   101dc:	687b      	ldr	r3, [r7, #4]
   101de:	2200      	movs	r2, #0
   101e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   101e4:	e002      	b.n	101ec <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
   101e6:	6878      	ldr	r0, [r7, #4]
   101e8:	4b08      	ldr	r3, [pc, #32]	; (1020c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
   101ea:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
   101ec:	687b      	ldr	r3, [r7, #4]
   101ee:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   101f2:	f083 0301 	eor.w	r3, r3, #1
   101f6:	b2db      	uxtb	r3, r3
}
   101f8:	4618      	mov	r0, r3
   101fa:	3708      	adds	r7, #8
   101fc:	46bd      	mov	sp, r7
   101fe:	bd80      	pop	{r7, pc}
   10200:	00010909 	.word	0x00010909
   10204:	000108a9 	.word	0x000108a9
   10208:	00010c09 	.word	0x00010c09
   1020c:	00010511 	.word	0x00010511

00010210 <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
   10210:	b590      	push	{r4, r7, lr}
   10212:	b085      	sub	sp, #20
   10214:	af00      	add	r7, sp, #0
   10216:	6078      	str	r0, [r7, #4]
	bool result=false;
   10218:	2300      	movs	r3, #0
   1021a:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
   1021c:	687b      	ldr	r3, [r7, #4]
   1021e:	33c7      	adds	r3, #199	; 0xc7
   10220:	4619      	mov	r1, r3
   10222:	4817      	ldr	r0, [pc, #92]	; (10280 <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
   10224:	4b17      	ldr	r3, [pc, #92]	; (10284 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
   10226:	4798      	blx	r3
	UpdateFlapperValveData();
   10228:	6878      	ldr	r0, [r7, #4]
   1022a:	4b17      	ldr	r3, [pc, #92]	; (10288 <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
   1022c:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
   1022e:	687b      	ldr	r3, [r7, #4]
   10230:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
   10234:	f083 0301 	eor.w	r3, r3, #1
   10238:	b2db      	uxtb	r3, r3
   1023a:	461c      	mov	r4, r3
   1023c:	6878      	ldr	r0, [r7, #4]
   1023e:	4b13      	ldr	r3, [pc, #76]	; (1028c <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
   10240:	4798      	blx	r3
   10242:	4603      	mov	r3, r0
   10244:	f083 0301 	eor.w	r3, r3, #1
   10248:	b2db      	uxtb	r3, r3
   1024a:	4023      	ands	r3, r4
   1024c:	2b00      	cmp	r3, #0
   1024e:	bf14      	ite	ne
   10250:	2301      	movne	r3, #1
   10252:	2300      	moveq	r3, #0
   10254:	b2db      	uxtb	r3, r3
   10256:	2b00      	cmp	r3, #0
   10258:	d00d      	beq.n	10276 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
   1025a:	687b      	ldr	r3, [r7, #4]
   1025c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   10260:	461a      	mov	r2, r3
   10262:	687b      	ldr	r3, [r7, #4]
   10264:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
   10268:	429a      	cmp	r2, r3
   1026a:	dd02      	ble.n	10272 <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
   1026c:	2301      	movs	r3, #1
   1026e:	73fb      	strb	r3, [r7, #15]
   10270:	e001      	b.n	10276 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
   10272:	2300      	movs	r3, #0
   10274:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
   10276:	7bfb      	ldrb	r3, [r7, #15]
}
   10278:	4618      	mov	r0, r3
   1027a:	3714      	adds	r7, #20
   1027c:	46bd      	mov	sp, r7
   1027e:	bd90      	pop	{r4, r7, pc}
   10280:	20003700 	.word	0x20003700
   10284:	00011ddd 	.word	0x00011ddd
   10288:	00010e05 	.word	0x00010e05
   1028c:	00010909 	.word	0x00010909

00010290 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
   10290:	b580      	push	{r7, lr}
   10292:	b082      	sub	sp, #8
   10294:	af00      	add	r7, sp, #0
   10296:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
   10298:	6878      	ldr	r0, [r7, #4]
   1029a:	4b1c      	ldr	r3, [pc, #112]	; (1030c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x7c>)
   1029c:	4798      	blx	r3
   1029e:	4603      	mov	r3, r0
   102a0:	461a      	mov	r2, r3
   102a2:	687b      	ldr	r3, [r7, #4]
   102a4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   102a8:	b2db      	uxtb	r3, r3
   102aa:	f083 0301 	eor.w	r3, r3, #1
   102ae:	b2db      	uxtb	r3, r3
   102b0:	4013      	ands	r3, r2
   102b2:	2b00      	cmp	r3, #0
   102b4:	bf14      	ite	ne
   102b6:	2301      	movne	r3, #1
   102b8:	2300      	moveq	r3, #0
   102ba:	b2db      	uxtb	r3, r3
   102bc:	2b00      	cmp	r3, #0
   102be:	d003      	beq.n	102c8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
   102c0:	6878      	ldr	r0, [r7, #4]
   102c2:	4b13      	ldr	r3, [pc, #76]	; (10310 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x80>)
   102c4:	4798      	blx	r3
   102c6:	e019      	b.n	102fc <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
	} 
	else
	{
		if (dataStruct.controlOutputs.iAlcFvFailsToMove)
   102c8:	687b      	ldr	r3, [r7, #4]
   102ca:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   102ce:	2b00      	cmp	r3, #0
   102d0:	d011      	beq.n	102f6 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x66>
		{
			singlefv->ClearMoveFault(false);
   102d2:	687b      	ldr	r3, [r7, #4]
   102d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   102d8:	2100      	movs	r1, #0
   102da:	4618      	mov	r0, r3
   102dc:	4b0d      	ldr	r3, [pc, #52]	; (10314 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
   102de:	4798      	blx	r3
			delay_us(10);
   102e0:	200a      	movs	r0, #10
   102e2:	4b0d      	ldr	r3, [pc, #52]	; (10318 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x88>)
   102e4:	4798      	blx	r3
			singlefv->ClearMoveFault(true);
   102e6:	687b      	ldr	r3, [r7, #4]
   102e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   102ec:	2101      	movs	r1, #1
   102ee:	4618      	mov	r0, r3
   102f0:	4b08      	ldr	r3, [pc, #32]	; (10314 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
   102f2:	4798      	blx	r3
   102f4:	e002      	b.n	102fc <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
		} 
		else
		{
			Control_NBC_StandAlone();
   102f6:	6878      	ldr	r0, [r7, #4]
   102f8:	4b08      	ldr	r3, [pc, #32]	; (1031c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x8c>)
   102fa:	4798      	blx	r3
		}

		
	}
	return resetTimeout;
   102fc:	687b      	ldr	r3, [r7, #4]
   102fe:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
   10302:	b2db      	uxtb	r3, r3
}
   10304:	4618      	mov	r0, r3
   10306:	3708      	adds	r7, #8
   10308:	46bd      	mov	sp, r7
   1030a:	bd80      	pop	{r7, pc}
   1030c:	00010211 	.word	0x00010211
   10310:	000106e1 	.word	0x000106e1
   10314:	0001165d 	.word	0x0001165d
   10318:	00002b81 	.word	0x00002b81
   1031c:	00010321 	.word	0x00010321

00010320 <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
   10320:	b580      	push	{r7, lr}
   10322:	b082      	sub	sp, #8
   10324:	af00      	add	r7, sp, #0
   10326:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
   10328:	6878      	ldr	r0, [r7, #4]
   1032a:	4b29      	ldr	r3, [pc, #164]	; (103d0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
   1032c:	4798      	blx	r3
   1032e:	4603      	mov	r3, r0
   10330:	2b00      	cmp	r3, #0
   10332:	d031      	beq.n	10398 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
   10334:	687b      	ldr	r3, [r7, #4]
   10336:	2201      	movs	r2, #1
   10338:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
			if (standAloneActivated)
   1033c:	687b      	ldr	r3, [r7, #4]
   1033e:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   10342:	2b00      	cmp	r3, #0
   10344:	d003      	beq.n	1034e <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
   10346:	6878      	ldr	r0, [r7, #4]
   10348:	4b22      	ldr	r3, [pc, #136]	; (103d4 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
   1034a:	4798      	blx	r3
   1034c:	e038      	b.n	103c0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
   1034e:	687b      	ldr	r3, [r7, #4]
   10350:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   10354:	461a      	mov	r2, r3
   10356:	687b      	ldr	r3, [r7, #4]
   10358:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   1035c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   10360:	429a      	cmp	r2, r3
   10362:	dd0c      	ble.n	1037e <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
   10364:	687b      	ldr	r3, [r7, #4]
   10366:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   1036a:	43db      	mvns	r3, r3
   1036c:	b2db      	uxtb	r3, r3
   1036e:	4619      	mov	r1, r3
   10370:	6878      	ldr	r0, [r7, #4]
   10372:	4b19      	ldr	r3, [pc, #100]	; (103d8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
   10374:	4798      	blx	r3
					standAloneReturning=true;
   10376:	687b      	ldr	r3, [r7, #4]
   10378:	2201      	movs	r2, #1
   1037a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   1037e:	687b      	ldr	r3, [r7, #4]
   10380:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   10384:	43db      	mvns	r3, r3
   10386:	b2da      	uxtb	r2, r3
   10388:	687b      	ldr	r3, [r7, #4]
   1038a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				standAloneActivated=true;
   1038e:	687b      	ldr	r3, [r7, #4]
   10390:	2201      	movs	r2, #1
   10392:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
   10396:	e013      	b.n	103c0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
   10398:	687b      	ldr	r3, [r7, #4]
   1039a:	2200      	movs	r2, #0
   1039c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (standAloneActivated)
   103a0:	687b      	ldr	r3, [r7, #4]
   103a2:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   103a6:	2b00      	cmp	r3, #0
   103a8:	d007      	beq.n	103ba <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
   103aa:	687b      	ldr	r3, [r7, #4]
   103ac:	2200      	movs	r2, #0
   103ae:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			standAloneReturning=false;
   103b2:	687b      	ldr	r3, [r7, #4]
   103b4:	2200      	movs	r2, #0
   103b6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
   103ba:	6878      	ldr	r0, [r7, #4]
   103bc:	4b05      	ldr	r3, [pc, #20]	; (103d4 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
   103be:	4798      	blx	r3
		
	}
	return standAloneMode;
   103c0:	687b      	ldr	r3, [r7, #4]
   103c2:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
}
   103c6:	4618      	mov	r0, r3
   103c8:	3708      	adds	r7, #8
   103ca:	46bd      	mov	sp, r7
   103cc:	bd80      	pop	{r7, pc}
   103ce:	bf00      	nop
   103d0:	000103dd 	.word	0x000103dd
   103d4:	000101a9 	.word	0x000101a9
   103d8:	00010c09 	.word	0x00010c09

000103dc <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
   103dc:	b480      	push	{r7}
   103de:	b085      	sub	sp, #20
   103e0:	af00      	add	r7, sp, #0
   103e2:	6078      	str	r0, [r7, #4]
	
	bool result=false;
   103e4:	2300      	movs	r3, #0
   103e6:	73fb      	strb	r3, [r7, #15]
	if (partner->isOK)
   103e8:	687b      	ldr	r3, [r7, #4]
   103ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   103ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   103f2:	b2db      	uxtb	r3, r3
   103f4:	2b00      	cmp	r3, #0
   103f6:	d006      	beq.n	10406 <_ZN22FlapperValveController16IsStandAloneModeEv+0x2a>
	{
			result=partner->dataStruct.controlOutputs.iAlcFvStandAloneOut;
   103f8:	687b      	ldr	r3, [r7, #4]
   103fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   103fe:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
   10402:	73fb      	strb	r3, [r7, #15]
   10404:	e001      	b.n	1040a <_ZN22FlapperValveController16IsStandAloneModeEv+0x2e>
	} 
	else
	{
		result=true;
   10406:	2301      	movs	r3, #1
   10408:	73fb      	strb	r3, [r7, #15]
	}


	return result;
   1040a:	7bfb      	ldrb	r3, [r7, #15]
}
   1040c:	4618      	mov	r0, r3
   1040e:	3714      	adds	r7, #20
   10410:	46bd      	mov	sp, r7
   10412:	bc80      	pop	{r7}
   10414:	4770      	bx	lr

00010416 <_ZN22FlapperValveController10SetPartnerEPS_>:



void FlapperValveController::SetPartner(FlapperValveController *part){
   10416:	b480      	push	{r7}
   10418:	b083      	sub	sp, #12
   1041a:	af00      	add	r7, sp, #0
   1041c:	6078      	str	r0, [r7, #4]
   1041e:	6039      	str	r1, [r7, #0]
	partner=part;
   10420:	687b      	ldr	r3, [r7, #4]
   10422:	683a      	ldr	r2, [r7, #0]
   10424:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
   10428:	bf00      	nop
   1042a:	370c      	adds	r7, #12
   1042c:	46bd      	mov	sp, r7
   1042e:	bc80      	pop	{r7}
   10430:	4770      	bx	lr
	...

00010434 <_ZN22FlapperValveController14CheckIsClosingEv>:
bool FlapperValveController::CheckIsClosing(void){
   10434:	b580      	push	{r7, lr}
   10436:	b082      	sub	sp, #8
   10438:	af00      	add	r7, sp, #0
   1043a:	6078      	str	r0, [r7, #4]
		if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
   1043c:	687b      	ldr	r3, [r7, #4]
   1043e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   10442:	2b05      	cmp	r3, #5
   10444:	bfd4      	ite	le
   10446:	2301      	movle	r3, #1
   10448:	2300      	movgt	r3, #0
   1044a:	b2da      	uxtb	r2, r3
   1044c:	687b      	ldr	r3, [r7, #4]
   1044e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   10452:	2b05      	cmp	r3, #5
   10454:	bfd4      	ite	le
   10456:	2301      	movle	r3, #1
   10458:	2300      	movgt	r3, #0
   1045a:	b2db      	uxtb	r3, r3
   1045c:	4013      	ands	r3, r2
   1045e:	b2da      	uxtb	r2, r3
   10460:	687b      	ldr	r3, [r7, #4]
   10462:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   10466:	2bfa      	cmp	r3, #250	; 0xfa
   10468:	bfcc      	ite	gt
   1046a:	2301      	movgt	r3, #1
   1046c:	2300      	movle	r3, #0
   1046e:	b2d9      	uxtb	r1, r3
   10470:	687b      	ldr	r3, [r7, #4]
   10472:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   10476:	2bf5      	cmp	r3, #245	; 0xf5
   10478:	bfcc      	ite	gt
   1047a:	2301      	movgt	r3, #1
   1047c:	2300      	movle	r3, #0
   1047e:	b2db      	uxtb	r3, r3
   10480:	400b      	ands	r3, r1
   10482:	b2db      	uxtb	r3, r3
   10484:	4313      	orrs	r3, r2
   10486:	b2db      	uxtb	r3, r3
   10488:	461a      	mov	r2, r3
   1048a:	687b      	ldr	r3, [r7, #4]
   1048c:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   10490:	f083 0301 	eor.w	r3, r3, #1
   10494:	b2db      	uxtb	r3, r3
   10496:	4619      	mov	r1, r3
   10498:	687b      	ldr	r3, [r7, #4]
   1049a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1049e:	b2db      	uxtb	r3, r3
   104a0:	400b      	ands	r3, r1
   104a2:	4013      	ands	r3, r2
   104a4:	2b00      	cmp	r3, #0
   104a6:	bf14      	ite	ne
   104a8:	2301      	movne	r3, #1
   104aa:	2300      	moveq	r3, #0
   104ac:	b2db      	uxtb	r3, r3
   104ae:	2b00      	cmp	r3, #0
   104b0:	d01f      	beq.n	104f2 <_ZN22FlapperValveController14CheckIsClosingEv+0xbe>
		{
			if (valve_ID==0)
   104b2:	687b      	ldr	r3, [r7, #4]
   104b4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   104b8:	2b00      	cmp	r3, #0
   104ba:	d105      	bne.n	104c8 <_ZN22FlapperValveController14CheckIsClosingEv+0x94>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
   104bc:	22c8      	movs	r2, #200	; 0xc8
   104be:	4910      	ldr	r1, [pc, #64]	; (10500 <_ZN22FlapperValveController14CheckIsClosingEv+0xcc>)
   104c0:	4810      	ldr	r0, [pc, #64]	; (10504 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
   104c2:	4b11      	ldr	r3, [pc, #68]	; (10508 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
   104c4:	4798      	blx	r3
   104c6:	e004      	b.n	104d2 <_ZN22FlapperValveController14CheckIsClosingEv+0x9e>
			} 
			else
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
   104c8:	22c8      	movs	r2, #200	; 0xc8
   104ca:	4910      	ldr	r1, [pc, #64]	; (1050c <_ZN22FlapperValveController14CheckIsClosingEv+0xd8>)
   104cc:	480d      	ldr	r0, [pc, #52]	; (10504 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
   104ce:	4b0e      	ldr	r3, [pc, #56]	; (10508 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
   104d0:	4798      	blx	r3
			}
		
			fullClosedTimeout=false;
   104d2:	687b      	ldr	r3, [r7, #4]
   104d4:	2200      	movs	r2, #0
   104d6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			gotSetpoint=false;
   104da:	687b      	ldr	r3, [r7, #4]
   104dc:	2200      	movs	r2, #0
   104de:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
			closing=true;
   104e2:	687b      	ldr	r3, [r7, #4]
   104e4:	2201      	movs	r2, #1
   104e6:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
			unLockTimeout=true;
   104ea:	687b      	ldr	r3, [r7, #4]
   104ec:	2201      	movs	r2, #1
   104ee:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		}
		return closing;
   104f2:	687b      	ldr	r3, [r7, #4]
   104f4:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
	
}
   104f8:	4618      	mov	r0, r3
   104fa:	3708      	adds	r7, #8
   104fc:	46bd      	mov	sp, r7
   104fe:	bd80      	pop	{r7, pc}
   10500:	0000ff15 	.word	0x0000ff15
   10504:	200020bc 	.word	0x200020bc
   10508:	0000e849 	.word	0x0000e849
   1050c:	0000ff35 	.word	0x0000ff35

00010510 <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
   10510:	b590      	push	{r4, r7, lr}
   10512:	b083      	sub	sp, #12
   10514:	af00      	add	r7, sp, #0
   10516:	6078      	str	r0, [r7, #4]
	if (isControlling)
   10518:	687b      	ldr	r3, [r7, #4]
   1051a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   1051e:	2b00      	cmp	r3, #0
   10520:	f000 80c9 	beq.w	106b6 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
   10524:	687b      	ldr	r3, [r7, #4]
   10526:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
   1052a:	687b      	ldr	r3, [r7, #4]
   1052c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
   10530:	4313      	orrs	r3, r2
   10532:	b2db      	uxtb	r3, r3
   10534:	461a      	mov	r2, r3
   10536:	687b      	ldr	r3, [r7, #4]
   10538:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   1053c:	4013      	ands	r3, r2
   1053e:	687a      	ldr	r2, [r7, #4]
   10540:	f892 2099 	ldrb.w	r2, [r2, #153]	; 0x99
   10544:	b2d2      	uxtb	r2, r2
   10546:	4013      	ands	r3, r2
   10548:	2b00      	cmp	r3, #0
   1054a:	bf14      	ite	ne
   1054c:	2301      	movne	r3, #1
   1054e:	2300      	moveq	r3, #0
   10550:	b2db      	uxtb	r3, r3
   10552:	2b00      	cmp	r3, #0
   10554:	d003      	beq.n	1055e <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
   10556:	6878      	ldr	r0, [r7, #4]
   10558:	4b59      	ldr	r3, [pc, #356]	; (106c0 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
   1055a:	4798      	blx	r3
   1055c:	e0ab      	b.n	106b6 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>

		} 
		else
		{
			
			CheckIsClosing();
   1055e:	6878      	ldr	r0, [r7, #4]
   10560:	4b58      	ldr	r3, [pc, #352]	; (106c4 <_ZN22FlapperValveController15ControlMovementEv+0x1b4>)
   10562:	4798      	blx	r3
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
   10564:	687b      	ldr	r3, [r7, #4]
   10566:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   1056a:	461a      	mov	r2, r3
   1056c:	687b      	ldr	r3, [r7, #4]
   1056e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   10572:	1ad3      	subs	r3, r2, r3
   10574:	2b00      	cmp	r3, #0
   10576:	bfb8      	it	lt
   10578:	425b      	neglt	r3, r3
   1057a:	687a      	ldr	r2, [r7, #4]
   1057c:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
   10580:	4293      	cmp	r3, r2
   10582:	bfcc      	ite	gt
   10584:	2301      	movgt	r3, #1
   10586:	2300      	movle	r3, #0
   10588:	b2db      	uxtb	r3, r3
   1058a:	461a      	mov	r2, r3
   1058c:	687b      	ldr	r3, [r7, #4]
   1058e:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   10592:	4313      	orrs	r3, r2
   10594:	2b00      	cmp	r3, #0
   10596:	d078      	beq.n	1068a <_ZN22FlapperValveController15ControlMovementEv+0x17a>
			{
				if (IsFlapperMoving())
   10598:	6878      	ldr	r0, [r7, #4]
   1059a:	4b4b      	ldr	r3, [pc, #300]	; (106c8 <_ZN22FlapperValveController15ControlMovementEv+0x1b8>)
   1059c:	4798      	blx	r3
   1059e:	4603      	mov	r3, r0
   105a0:	2b00      	cmp	r3, #0
   105a2:	d04a      	beq.n	1063a <_ZN22FlapperValveController15ControlMovementEv+0x12a>
				{
					if (closing)
   105a4:	687b      	ldr	r3, [r7, #4]
   105a6:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   105aa:	2b00      	cmp	r3, #0
   105ac:	d00e      	beq.n	105cc <_ZN22FlapperValveController15ControlMovementEv+0xbc>
					{
						if (keepControlling)
   105ae:	687b      	ldr	r3, [r7, #4]
   105b0:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   105b4:	2b00      	cmp	r3, #0
   105b6:	d053      	beq.n	10660 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						{
							if (fullClosedTimeout)
   105b8:	687b      	ldr	r3, [r7, #4]
   105ba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   105be:	b2db      	uxtb	r3, r3
   105c0:	2b00      	cmp	r3, #0
   105c2:	d04d      	beq.n	10660 <_ZN22FlapperValveController15ControlMovementEv+0x150>
							{
								StopValveAtLimit();
   105c4:	6878      	ldr	r0, [r7, #4]
   105c6:	4b3e      	ldr	r3, [pc, #248]	; (106c0 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
   105c8:	4798      	blx	r3
   105ca:	e049      	b.n	10660 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
   105cc:	687b      	ldr	r3, [r7, #4]
   105ce:	f893 40b4 	ldrb.w	r4, [r3, #180]	; 0xb4
   105d2:	6878      	ldr	r0, [r7, #4]
   105d4:	4b3d      	ldr	r3, [pc, #244]	; (106cc <_ZN22FlapperValveController15ControlMovementEv+0x1bc>)
   105d6:	4798      	blx	r3
   105d8:	4603      	mov	r3, r0
   105da:	429c      	cmp	r4, r3
   105dc:	bf14      	ite	ne
   105de:	2301      	movne	r3, #1
   105e0:	2300      	moveq	r3, #0
   105e2:	b2db      	uxtb	r3, r3
   105e4:	2b00      	cmp	r3, #0
   105e6:	d00a      	beq.n	105fe <_ZN22FlapperValveController15ControlMovementEv+0xee>
						{
							StopMotor();
   105e8:	6878      	ldr	r0, [r7, #4]
   105ea:	4b39      	ldr	r3, [pc, #228]	; (106d0 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
   105ec:	4798      	blx	r3
							RemoveTimeoutTask();
   105ee:	6878      	ldr	r0, [r7, #4]
   105f0:	4b38      	ldr	r3, [pc, #224]	; (106d4 <_ZN22FlapperValveController15ControlMovementEv+0x1c4>)
   105f2:	4798      	blx	r3
							keepControlling=true;
   105f4:	687b      	ldr	r3, [r7, #4]
   105f6:	2201      	movs	r2, #1
   105f8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
   105fc:	e030      	b.n	10660 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							if (timeoutFlapperValveController)
   105fe:	687b      	ldr	r3, [r7, #4]
   10600:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   10604:	b2db      	uxtb	r3, r3
   10606:	2b00      	cmp	r3, #0
   10608:	d003      	beq.n	10612 <_ZN22FlapperValveController15ControlMovementEv+0x102>
							{
								StopMotor();
   1060a:	6878      	ldr	r0, [r7, #4]
   1060c:	4b30      	ldr	r3, [pc, #192]	; (106d0 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
   1060e:	4798      	blx	r3
   10610:	e026      	b.n	10660 <_ZN22FlapperValveController15ControlMovementEv+0x150>
								
							}
							else
							{
								if (keepControlling)
   10612:	687b      	ldr	r3, [r7, #4]
   10614:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   10618:	2b00      	cmp	r3, #0
   1061a:	d021      	beq.n	10660 <_ZN22FlapperValveController15ControlMovementEv+0x150>
								{
									if (timeoutKeepControlling)
   1061c:	687b      	ldr	r3, [r7, #4]
   1061e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   10622:	b2db      	uxtb	r3, r3
   10624:	2b00      	cmp	r3, #0
   10626:	d003      	beq.n	10630 <_ZN22FlapperValveController15ControlMovementEv+0x120>
									{
										StopMotor();
   10628:	6878      	ldr	r0, [r7, #4]
   1062a:	4b29      	ldr	r3, [pc, #164]	; (106d0 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
   1062c:	4798      	blx	r3
   1062e:	e017      	b.n	10660 <_ZN22FlapperValveController15ControlMovementEv+0x150>
									}
									else
									{
										KeepControlling();
   10630:	2100      	movs	r1, #0
   10632:	6878      	ldr	r0, [r7, #4]
   10634:	4b28      	ldr	r3, [pc, #160]	; (106d8 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
   10636:	4798      	blx	r3
   10638:	e012      	b.n	10660 <_ZN22FlapperValveController15ControlMovementEv+0x150>
					}
					
				}
				else
				{
					if (keepControlling)
   1063a:	687b      	ldr	r3, [r7, #4]
   1063c:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   10640:	2b00      	cmp	r3, #0
   10642:	d00d      	beq.n	10660 <_ZN22FlapperValveController15ControlMovementEv+0x150>
					{
						if (timeoutKeepControlling)
   10644:	687b      	ldr	r3, [r7, #4]
   10646:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   1064a:	b2db      	uxtb	r3, r3
   1064c:	2b00      	cmp	r3, #0
   1064e:	d003      	beq.n	10658 <_ZN22FlapperValveController15ControlMovementEv+0x148>
						{
							StopValveinBetween();
   10650:	6878      	ldr	r0, [r7, #4]
   10652:	4b22      	ldr	r3, [pc, #136]	; (106dc <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
   10654:	4798      	blx	r3
   10656:	e003      	b.n	10660 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							KeepControlling();
   10658:	2100      	movs	r1, #0
   1065a:	6878      	ldr	r0, [r7, #4]
   1065c:	4b1e      	ldr	r3, [pc, #120]	; (106d8 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
   1065e:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
   10660:	687b      	ldr	r3, [r7, #4]
   10662:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   10666:	461a      	mov	r2, r3
   10668:	687b      	ldr	r3, [r7, #4]
   1066a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   1066e:	1ad3      	subs	r3, r2, r3
   10670:	2b00      	cmp	r3, #0
   10672:	bfb8      	it	lt
   10674:	425b      	neglt	r3, r3
   10676:	687a      	ldr	r2, [r7, #4]
   10678:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
   1067c:	4293      	cmp	r3, r2
   1067e:	dd1a      	ble.n	106b6 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				{
					gotSetpoint=false;
   10680:	687b      	ldr	r3, [r7, #4]
   10682:	2200      	movs	r2, #0
   10684:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
   10688:	e015      	b.n	106b6 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				
				
			}
			else
			{
				if (closing)
   1068a:	687b      	ldr	r3, [r7, #4]
   1068c:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   10690:	2b00      	cmp	r3, #0
   10692:	d009      	beq.n	106a8 <_ZN22FlapperValveController15ControlMovementEv+0x198>
				{
					if (fullClosedTimeout)
   10694:	687b      	ldr	r3, [r7, #4]
   10696:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1069a:	b2db      	uxtb	r3, r3
   1069c:	2b00      	cmp	r3, #0
   1069e:	d00a      	beq.n	106b6 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
						StopValveAtLimit();
   106a0:	6878      	ldr	r0, [r7, #4]
   106a2:	4b07      	ldr	r3, [pc, #28]	; (106c0 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
   106a4:	4798      	blx	r3
   106a6:	e006      	b.n	106b6 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
					}
				} 
				else
				{
					StopValveinBetween();
   106a8:	6878      	ldr	r0, [r7, #4]
   106aa:	4b0c      	ldr	r3, [pc, #48]	; (106dc <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
   106ac:	4798      	blx	r3
					gotSetpoint=true;
   106ae:	687b      	ldr	r3, [r7, #4]
   106b0:	2201      	movs	r2, #1
   106b2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
		
	} 
	else
	{
	}
	return 0;
   106b6:	2300      	movs	r3, #0
	
}
   106b8:	4618      	mov	r0, r3
   106ba:	370c      	adds	r7, #12
   106bc:	46bd      	mov	sp, r7
   106be:	bd90      	pop	{r4, r7, pc}
   106c0:	00010a25 	.word	0x00010a25
   106c4:	00010435 	.word	0x00010435
   106c8:	0001097d 	.word	0x0001097d
   106cc:	00010115 	.word	0x00010115
   106d0:	00010951 	.word	0x00010951
   106d4:	0001111d 	.word	0x0001111d
   106d8:	00010dcd 	.word	0x00010dcd
   106dc:	00010abd 	.word	0x00010abd

000106e0 <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
   106e0:	b580      	push	{r7, lr}
   106e2:	b084      	sub	sp, #16
   106e4:	af00      	add	r7, sp, #0
   106e6:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
   106e8:	2052      	movs	r0, #82	; 0x52
   106ea:	4b60      	ldr	r3, [pc, #384]	; (1086c <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
   106ec:	4798      	blx	r3
   106ee:	4603      	mov	r3, r0
   106f0:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
   106f2:	6878      	ldr	r0, [r7, #4]
   106f4:	4b5e      	ldr	r3, [pc, #376]	; (10870 <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
   106f6:	4798      	blx	r3
   106f8:	4603      	mov	r3, r0
   106fa:	2b00      	cmp	r3, #0
   106fc:	f000 80b2 	beq.w	10864 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>
	{
		
		localSetpoint=currentMaximum;
   10700:	687b      	ldr	r3, [r7, #4]
   10702:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
   10706:	73bb      	strb	r3, [r7, #14]
		
		singlefv->SetEnable(false);
   10708:	687b      	ldr	r3, [r7, #4]
   1070a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1070e:	2100      	movs	r1, #0
   10710:	4618      	mov	r0, r3
   10712:	4b58      	ldr	r3, [pc, #352]	; (10874 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   10714:	4798      	blx	r3
		singlefv->SetInvalidPosition(false);
   10716:	687b      	ldr	r3, [r7, #4]
   10718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1071c:	2100      	movs	r1, #0
   1071e:	4618      	mov	r0, r3
   10720:	4b55      	ldr	r3, [pc, #340]	; (10878 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
   10722:	4798      	blx	r3
		singlefv->ClearMoveFault(false);
   10724:	687b      	ldr	r3, [r7, #4]
   10726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1072a:	2100      	movs	r1, #0
   1072c:	4618      	mov	r0, r3
   1072e:	4b53      	ldr	r3, [pc, #332]	; (1087c <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
   10730:	4798      	blx	r3
		delay_ms(100);
   10732:	2064      	movs	r0, #100	; 0x64
   10734:	4b52      	ldr	r3, [pc, #328]	; (10880 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
   10736:	4798      	blx	r3
		if (singlefv->ReadActualPosition()>localSetpoint)
   10738:	687b      	ldr	r3, [r7, #4]
   1073a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1073e:	4618      	mov	r0, r3
   10740:	4b50      	ldr	r3, [pc, #320]	; (10884 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   10742:	4798      	blx	r3
   10744:	4603      	mov	r3, r0
   10746:	461a      	mov	r2, r3
   10748:	7bbb      	ldrb	r3, [r7, #14]
   1074a:	429a      	cmp	r2, r3
   1074c:	bfcc      	ite	gt
   1074e:	2301      	movgt	r3, #1
   10750:	2300      	movle	r3, #0
   10752:	b2db      	uxtb	r3, r3
   10754:	2b00      	cmp	r3, #0
   10756:	d007      	beq.n	10768 <_ZN22FlapperValveController18ResetValvePositionEv+0x88>
		{
			singlefv->SetDirection(true);
   10758:	687b      	ldr	r3, [r7, #4]
   1075a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1075e:	2101      	movs	r1, #1
   10760:	4618      	mov	r0, r3
   10762:	4b49      	ldr	r3, [pc, #292]	; (10888 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
   10764:	4798      	blx	r3
   10766:	e006      	b.n	10776 <_ZN22FlapperValveController18ResetValvePositionEv+0x96>
		}
		else
		{
			singlefv->SetDirection(false);
   10768:	687b      	ldr	r3, [r7, #4]
   1076a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1076e:	2100      	movs	r1, #0
   10770:	4618      	mov	r0, r3
   10772:	4b45      	ldr	r3, [pc, #276]	; (10888 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
   10774:	4798      	blx	r3
		}
		singlefv->SetInvalidPosition(true);
   10776:	687b      	ldr	r3, [r7, #4]
   10778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1077c:	2101      	movs	r1, #1
   1077e:	4618      	mov	r0, r3
   10780:	4b3d      	ldr	r3, [pc, #244]	; (10878 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
   10782:	4798      	blx	r3
		singlefv->ClearMoveFault(true);
   10784:	687b      	ldr	r3, [r7, #4]
   10786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1078a:	2101      	movs	r1, #1
   1078c:	4618      	mov	r0, r3
   1078e:	4b3b      	ldr	r3, [pc, #236]	; (1087c <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
   10790:	4798      	blx	r3
		singlefv->WriteSetpoint(localSetpoint);
   10792:	687b      	ldr	r3, [r7, #4]
   10794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10798:	7bba      	ldrb	r2, [r7, #14]
   1079a:	4611      	mov	r1, r2
   1079c:	4618      	mov	r0, r3
   1079e:	4b3b      	ldr	r3, [pc, #236]	; (1088c <_ZN22FlapperValveController18ResetValvePositionEv+0x1ac>)
   107a0:	4798      	blx	r3
		

		currentPosition=singlefv->ReadActualPosition();
   107a2:	687b      	ldr	r3, [r7, #4]
   107a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   107a8:	4618      	mov	r0, r3
   107aa:	4b36      	ldr	r3, [pc, #216]	; (10884 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   107ac:	4798      	blx	r3
   107ae:	4603      	mov	r3, r0
   107b0:	461a      	mov	r2, r3
   107b2:	687b      	ldr	r3, [r7, #4]
   107b4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		
		resetTimeout=false;
   107b8:	687b      	ldr	r3, [r7, #4]
   107ba:	2200      	movs	r2, #0
   107bc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		if (valve_ID==0)
   107c0:	687b      	ldr	r3, [r7, #4]
   107c2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   107c6:	2b00      	cmp	r3, #0
   107c8:	d106      	bne.n	107d8 <_ZN22FlapperValveController18ResetValvePositionEv+0xf8>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve1Timeout),1000);
   107ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   107ce:	4930      	ldr	r1, [pc, #192]	; (10890 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b0>)
   107d0:	4830      	ldr	r0, [pc, #192]	; (10894 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
   107d2:	4b31      	ldr	r3, [pc, #196]	; (10898 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
   107d4:	4798      	blx	r3
   107d6:	e005      	b.n	107e4 <_ZN22FlapperValveController18ResetValvePositionEv+0x104>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve2Timeout),1000);
   107d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   107dc:	492f      	ldr	r1, [pc, #188]	; (1089c <_ZN22FlapperValveController18ResetValvePositionEv+0x1bc>)
   107de:	482d      	ldr	r0, [pc, #180]	; (10894 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
   107e0:	4b2d      	ldr	r3, [pc, #180]	; (10898 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
   107e2:	4798      	blx	r3
		}
	
		
		singlefv->SetEnable(true);
   107e4:	687b      	ldr	r3, [r7, #4]
   107e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   107ea:	2101      	movs	r1, #1
   107ec:	4618      	mov	r0, r3
   107ee:	4b21      	ldr	r3, [pc, #132]	; (10874 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   107f0:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   107f2:	687b      	ldr	r3, [r7, #4]
   107f4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   107f8:	461a      	mov	r2, r3
   107fa:	7bbb      	ldrb	r3, [r7, #14]
   107fc:	1ad3      	subs	r3, r2, r3
   107fe:	2b00      	cmp	r3, #0
   10800:	bfb8      	it	lt
   10802:	425b      	neglt	r3, r3
   10804:	2b06      	cmp	r3, #6
   10806:	bfcc      	ite	gt
   10808:	2301      	movgt	r3, #1
   1080a:	2300      	movle	r3, #0
   1080c:	b2db      	uxtb	r3, r3
   1080e:	461a      	mov	r2, r3
   10810:	687b      	ldr	r3, [r7, #4]
   10812:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
   10816:	b2db      	uxtb	r3, r3
   10818:	f083 0301 	eor.w	r3, r3, #1
   1081c:	b2db      	uxtb	r3, r3
   1081e:	4013      	ands	r3, r2
   10820:	2b00      	cmp	r3, #0
   10822:	bf14      	ite	ne
   10824:	2301      	movne	r3, #1
   10826:	2300      	moveq	r3, #0
   10828:	b2db      	uxtb	r3, r3
   1082a:	2b00      	cmp	r3, #0
   1082c:	d00e      	beq.n	1084c <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>

		{
			gpio_toggle_pin_level(LED0);
   1082e:	2052      	movs	r0, #82	; 0x52
   10830:	4b1b      	ldr	r3, [pc, #108]	; (108a0 <_ZN22FlapperValveController18ResetValvePositionEv+0x1c0>)
   10832:	4798      	blx	r3
			currentPosition=singlefv->ReadActualPosition();
   10834:	687b      	ldr	r3, [r7, #4]
   10836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1083a:	4618      	mov	r0, r3
   1083c:	4b11      	ldr	r3, [pc, #68]	; (10884 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   1083e:	4798      	blx	r3
   10840:	4603      	mov	r3, r0
   10842:	461a      	mov	r2, r3
   10844:	687b      	ldr	r3, [r7, #4]
   10846:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   1084a:	e7d2      	b.n	107f2 <_ZN22FlapperValveController18ResetValvePositionEv+0x112>

		}
		singlefv->SetEnable(false);
   1084c:	687b      	ldr	r3, [r7, #4]
   1084e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10852:	2100      	movs	r1, #0
   10854:	4618      	mov	r0, r3
   10856:	4b07      	ldr	r3, [pc, #28]	; (10874 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   10858:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
   1085a:	7bfb      	ldrb	r3, [r7, #15]
   1085c:	4619      	mov	r1, r3
   1085e:	2052      	movs	r0, #82	; 0x52
   10860:	4b10      	ldr	r3, [pc, #64]	; (108a4 <_ZN22FlapperValveController18ResetValvePositionEv+0x1c4>)
   10862:	4798      	blx	r3
	} 
	else
	{
	}
}
   10864:	bf00      	nop
   10866:	3710      	adds	r7, #16
   10868:	46bd      	mov	sp, r7
   1086a:	bd80      	pop	{r7, pc}
   1086c:	0000fe81 	.word	0x0000fe81
   10870:	00010211 	.word	0x00010211
   10874:	00011565 	.word	0x00011565
   10878:	000116d5 	.word	0x000116d5
   1087c:	0001165d 	.word	0x0001165d
   10880:	00002bb5 	.word	0x00002bb5
   10884:	00011785 	.word	0x00011785
   10888:	000115e5 	.word	0x000115e5
   1088c:	0001174d 	.word	0x0001174d
   10890:	0000ff55 	.word	0x0000ff55
   10894:	200020bc 	.word	0x200020bc
   10898:	0000e849 	.word	0x0000e849
   1089c:	0000ff75 	.word	0x0000ff75
   108a0:	0000fe51 	.word	0x0000fe51
   108a4:	0000fe19 	.word	0x0000fe19

000108a8 <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
   108a8:	b580      	push	{r7, lr}
   108aa:	b082      	sub	sp, #8
   108ac:	af00      	add	r7, sp, #0
   108ae:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
   108b0:	687b      	ldr	r3, [r7, #4]
   108b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   108b6:	2b00      	cmp	r3, #0
   108b8:	d014      	beq.n	108e4 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
   108ba:	687b      	ldr	r3, [r7, #4]
   108bc:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   108c0:	2b00      	cmp	r3, #0
   108c2:	d003      	beq.n	108cc <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
   108c4:	6878      	ldr	r0, [r7, #4]
   108c6:	4b0e      	ldr	r3, [pc, #56]	; (10900 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
   108c8:	4798      	blx	r3
   108ca:	e013      	b.n	108f4 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   108cc:	687b      	ldr	r3, [r7, #4]
   108ce:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   108d2:	4619      	mov	r1, r3
   108d4:	6878      	ldr	r0, [r7, #4]
   108d6:	4b0b      	ldr	r3, [pc, #44]	; (10904 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   108d8:	4798      	blx	r3
			NBC_Activated=false;
   108da:	687b      	ldr	r3, [r7, #4]
   108dc:	2200      	movs	r2, #0
   108de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   108e2:	e007      	b.n	108f4 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
   108e4:	21ff      	movs	r1, #255	; 0xff
   108e6:	6878      	ldr	r0, [r7, #4]
   108e8:	4b06      	ldr	r3, [pc, #24]	; (10904 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   108ea:	4798      	blx	r3
			NBC_Activated=true;
   108ec:	687b      	ldr	r3, [r7, #4]
   108ee:	2201      	movs	r2, #1
   108f0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	}

	return 0;
   108f4:	2300      	movs	r3, #0
	
}
   108f6:	4618      	mov	r0, r3
   108f8:	3708      	adds	r7, #8
   108fa:	46bd      	mov	sp, r7
   108fc:	bd80      	pop	{r7, pc}
   108fe:	bf00      	nop
   10900:	00010511 	.word	0x00010511
   10904:	00010c09 	.word	0x00010c09

00010908 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
   10908:	b480      	push	{r7}
   1090a:	b083      	sub	sp, #12
   1090c:	af00      	add	r7, sp, #0
   1090e:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
   10910:	687b      	ldr	r3, [r7, #4]
   10912:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   10916:	461a      	mov	r2, r3
   10918:	687b      	ldr	r3, [r7, #4]
   1091a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
   1091e:	4013      	ands	r3, r2
   10920:	687a      	ldr	r2, [r7, #4]
   10922:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
   10926:	4313      	orrs	r3, r2
   10928:	2b00      	cmp	r3, #0
   1092a:	bf14      	ite	ne
   1092c:	2301      	movne	r3, #1
   1092e:	2300      	moveq	r3, #0
   10930:	b2da      	uxtb	r2, r3
   10932:	687b      	ldr	r3, [r7, #4]
   10934:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	currentMaximum=255;
   10938:	687b      	ldr	r3, [r7, #4]
   1093a:	22ff      	movs	r2, #255	; 0xff
   1093c:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	return NBC_Mode;
   10940:	687b      	ldr	r3, [r7, #4]
   10942:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
}
   10946:	4618      	mov	r0, r3
   10948:	370c      	adds	r7, #12
   1094a:	46bd      	mov	sp, r7
   1094c:	bc80      	pop	{r7}
   1094e:	4770      	bx	lr

00010950 <_ZN22FlapperValveController9StopMotorEv>:
	}
	return NBC_Remote;
}


uint8_t	FlapperValveController::StopMotor(){
   10950:	b580      	push	{r7, lr}
   10952:	b082      	sub	sp, #8
   10954:	af00      	add	r7, sp, #0
   10956:	6078      	str	r0, [r7, #4]
	singlefv->SetEnable(false);
   10958:	687b      	ldr	r3, [r7, #4]
   1095a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1095e:	2100      	movs	r1, #0
   10960:	4618      	mov	r0, r3
   10962:	4b05      	ldr	r3, [pc, #20]	; (10978 <_ZN22FlapperValveController9StopMotorEv+0x28>)
   10964:	4798      	blx	r3
	flapperValveIsMoving=false;
   10966:	687b      	ldr	r3, [r7, #4]
   10968:	2200      	movs	r2, #0
   1096a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	
	return 0;
   1096e:	2300      	movs	r3, #0
}
   10970:	4618      	mov	r0, r3
   10972:	3708      	adds	r7, #8
   10974:	46bd      	mov	sp, r7
   10976:	bd80      	pop	{r7, pc}
   10978:	00011565 	.word	0x00011565

0001097c <_ZN22FlapperValveController15IsFlapperMovingEv>:

bool FlapperValveController::IsFlapperMoving(void){
   1097c:	b480      	push	{r7}
   1097e:	b085      	sub	sp, #20
   10980:	af00      	add	r7, sp, #0
   10982:	6078      	str	r0, [r7, #4]
	bool_result=true;
   10984:	687b      	ldr	r3, [r7, #4]
   10986:	2201      	movs	r2, #1
   10988:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	if (flapperValveIsMoving)
   1098c:	687b      	ldr	r3, [r7, #4]
   1098e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   10992:	b2db      	uxtb	r3, r3
   10994:	2b00      	cmp	r3, #0
   10996:	d03c      	beq.n	10a12 <_ZN22FlapperValveController15IsFlapperMovingEv+0x96>
	{
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   10998:	2300      	movs	r3, #0
   1099a:	73fb      	strb	r3, [r7, #15]
   1099c:	7bfb      	ldrb	r3, [r7, #15]
   1099e:	2b0e      	cmp	r3, #14
   109a0:	dc26      	bgt.n	109f0 <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		{
			if (positions[valve_ID][i]==positions[valve_ID][i+1])
   109a2:	687b      	ldr	r3, [r7, #4]
   109a4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   109a8:	687a      	ldr	r2, [r7, #4]
   109aa:	3332      	adds	r3, #50	; 0x32
   109ac:	009b      	lsls	r3, r3, #2
   109ae:	4413      	add	r3, r2
   109b0:	685a      	ldr	r2, [r3, #4]
   109b2:	7bfb      	ldrb	r3, [r7, #15]
   109b4:	4413      	add	r3, r2
   109b6:	781a      	ldrb	r2, [r3, #0]
   109b8:	687b      	ldr	r3, [r7, #4]
   109ba:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   109be:	6879      	ldr	r1, [r7, #4]
   109c0:	3332      	adds	r3, #50	; 0x32
   109c2:	009b      	lsls	r3, r3, #2
   109c4:	440b      	add	r3, r1
   109c6:	6859      	ldr	r1, [r3, #4]
   109c8:	7bfb      	ldrb	r3, [r7, #15]
   109ca:	3301      	adds	r3, #1
   109cc:	440b      	add	r3, r1
   109ce:	781b      	ldrb	r3, [r3, #0]
   109d0:	429a      	cmp	r2, r3
   109d2:	d104      	bne.n	109de <_ZN22FlapperValveController15IsFlapperMovingEv+0x62>
			{
				bool_result=false;
   109d4:	687b      	ldr	r3, [r7, #4]
   109d6:	2200      	movs	r2, #0
   109d8:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
   109dc:	e004      	b.n	109e8 <_ZN22FlapperValveController15IsFlapperMovingEv+0x6c>
			}
			else
			{
				bool_result=true;
   109de:	687b      	ldr	r3, [r7, #4]
   109e0:	2201      	movs	r2, #1
   109e2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
				break;
   109e6:	e003      	b.n	109f0 <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   109e8:	7bfb      	ldrb	r3, [r7, #15]
   109ea:	3301      	adds	r3, #1
   109ec:	73fb      	strb	r3, [r7, #15]
   109ee:	e7d5      	b.n	1099c <_ZN22FlapperValveController15IsFlapperMovingEv+0x20>
			}
			
		}
		flapperValveIsMoving&=bool_result;
   109f0:	687b      	ldr	r3, [r7, #4]
   109f2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   109f6:	b2db      	uxtb	r3, r3
   109f8:	461a      	mov	r2, r3
   109fa:	687b      	ldr	r3, [r7, #4]
   109fc:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   10a00:	4013      	ands	r3, r2
   10a02:	2b00      	cmp	r3, #0
   10a04:	bf14      	ite	ne
   10a06:	2301      	movne	r3, #1
   10a08:	2300      	moveq	r3, #0
   10a0a:	b2da      	uxtb	r2, r3
   10a0c:	687b      	ldr	r3, [r7, #4]
   10a0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	} 
	else
	{
	}
	return flapperValveIsMoving;
   10a12:	687b      	ldr	r3, [r7, #4]
   10a14:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   10a18:	b2db      	uxtb	r3, r3
	
}
   10a1a:	4618      	mov	r0, r3
   10a1c:	3714      	adds	r7, #20
   10a1e:	46bd      	mov	sp, r7
   10a20:	bc80      	pop	{r7}
   10a22:	4770      	bx	lr

00010a24 <_ZN22FlapperValveController16StopValveAtLimitEv>:

void	FlapperValveController::StopValveAtLimit(void){
   10a24:	b580      	push	{r7, lr}
   10a26:	b082      	sub	sp, #8
   10a28:	af00      	add	r7, sp, #0
   10a2a:	6078      	str	r0, [r7, #4]
		if (closing)
   10a2c:	687b      	ldr	r3, [r7, #4]
   10a2e:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   10a32:	2b00      	cmp	r3, #0
   10a34:	d003      	beq.n	10a3e <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
   10a36:	687b      	ldr	r3, [r7, #4]
   10a38:	2200      	movs	r2, #0
   10a3a:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
		}
	
		StopMotor();
   10a3e:	6878      	ldr	r0, [r7, #4]
   10a40:	4b17      	ldr	r3, [pc, #92]	; (10aa0 <_ZN22FlapperValveController16StopValveAtLimitEv+0x7c>)
   10a42:	4798      	blx	r3
		if (valve_ID==0)
   10a44:	687b      	ldr	r3, [r7, #4]
   10a46:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   10a4a:	2b00      	cmp	r3, #0
   10a4c:	d108      	bne.n	10a60 <_ZN22FlapperValveController16StopValveAtLimitEv+0x3c>
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   10a4e:	4915      	ldr	r1, [pc, #84]	; (10aa4 <_ZN22FlapperValveController16StopValveAtLimitEv+0x80>)
   10a50:	4815      	ldr	r0, [pc, #84]	; (10aa8 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   10a52:	4b16      	ldr	r3, [pc, #88]	; (10aac <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   10a54:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed));
   10a56:	4916      	ldr	r1, [pc, #88]	; (10ab0 <_ZN22FlapperValveController16StopValveAtLimitEv+0x8c>)
   10a58:	4813      	ldr	r0, [pc, #76]	; (10aa8 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   10a5a:	4b14      	ldr	r3, [pc, #80]	; (10aac <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   10a5c:	4798      	blx	r3
   10a5e:	e007      	b.n	10a70 <_ZN22FlapperValveController16StopValveAtLimitEv+0x4c>
		} 
		else
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   10a60:	4914      	ldr	r1, [pc, #80]	; (10ab4 <_ZN22FlapperValveController16StopValveAtLimitEv+0x90>)
   10a62:	4811      	ldr	r0, [pc, #68]	; (10aa8 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   10a64:	4b11      	ldr	r3, [pc, #68]	; (10aac <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   10a66:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed));
   10a68:	4913      	ldr	r1, [pc, #76]	; (10ab8 <_ZN22FlapperValveController16StopValveAtLimitEv+0x94>)
   10a6a:	480f      	ldr	r0, [pc, #60]	; (10aa8 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   10a6c:	4b0f      	ldr	r3, [pc, #60]	; (10aac <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   10a6e:	4798      	blx	r3
		}
	
		timeoutFlapperValveController=false;
   10a70:	687b      	ldr	r3, [r7, #4]
   10a72:	2200      	movs	r2, #0
   10a74:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
   10a78:	687b      	ldr	r3, [r7, #4]
   10a7a:	2200      	movs	r2, #0
   10a7c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		unLockTimeout=false;
   10a80:	687b      	ldr	r3, [r7, #4]
   10a82:	2200      	movs	r2, #0
   10a84:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		paused=false;
   10a88:	687b      	ldr	r3, [r7, #4]
   10a8a:	2200      	movs	r2, #0
   10a8c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		keepControlling=false;
   10a90:	687b      	ldr	r3, [r7, #4]
   10a92:	2200      	movs	r2, #0
   10a94:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
   10a98:	bf00      	nop
   10a9a:	3708      	adds	r7, #8
   10a9c:	46bd      	mov	sp, r7
   10a9e:	bd80      	pop	{r7, pc}
   10aa0:	00010951 	.word	0x00010951
   10aa4:	0000febd 	.word	0x0000febd
   10aa8:	200020bc 	.word	0x200020bc
   10aac:	0000e7f1 	.word	0x0000e7f1
   10ab0:	0000ff15 	.word	0x0000ff15
   10ab4:	0000fee9 	.word	0x0000fee9
   10ab8:	0000ff35 	.word	0x0000ff35

00010abc <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
   10abc:	b580      	push	{r7, lr}
   10abe:	b082      	sub	sp, #8
   10ac0:	af00      	add	r7, sp, #0
   10ac2:	6078      	str	r0, [r7, #4]
		StopMotor();
   10ac4:	6878      	ldr	r0, [r7, #4]
   10ac6:	4b0c      	ldr	r3, [pc, #48]	; (10af8 <_ZN22FlapperValveController18StopValveinBetweenEv+0x3c>)
   10ac8:	4798      	blx	r3
		RemoveTimeoutTask();
   10aca:	6878      	ldr	r0, [r7, #4]
   10acc:	4b0b      	ldr	r3, [pc, #44]	; (10afc <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
   10ace:	4798      	blx	r3
		timeoutFlapperValveController=false;
   10ad0:	687b      	ldr	r3, [r7, #4]
   10ad2:	2200      	movs	r2, #0
   10ad4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		paused=false;
   10ad8:	687b      	ldr	r3, [r7, #4]
   10ada:	2200      	movs	r2, #0
   10adc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		timeoutKeepControlling=false;
   10ae0:	687b      	ldr	r3, [r7, #4]
   10ae2:	2200      	movs	r2, #0
   10ae4:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=true;
   10ae8:	687b      	ldr	r3, [r7, #4]
   10aea:	2201      	movs	r2, #1
   10aec:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
   10af0:	bf00      	nop
   10af2:	3708      	adds	r7, #8
   10af4:	46bd      	mov	sp, r7
   10af6:	bd80      	pop	{r7, pc}
   10af8:	00010951 	.word	0x00010951
   10afc:	0001111d 	.word	0x0001111d

00010b00 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
   10b00:	b580      	push	{r7, lr}
   10b02:	b084      	sub	sp, #16
   10b04:	af00      	add	r7, sp, #0
   10b06:	6078      	str	r0, [r7, #4]
   10b08:	460b      	mov	r3, r1
   10b0a:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
   10b0c:	78fb      	ldrb	r3, [r7, #3]
   10b0e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
   10b12:	2b00      	cmp	r3, #0
   10b14:	dd0c      	ble.n	10b30 <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
   10b16:	78fb      	ldrb	r3, [r7, #3]
   10b18:	43db      	mvns	r3, r3
   10b1a:	009b      	lsls	r3, r3, #2
   10b1c:	2b00      	cmp	r3, #0
   10b1e:	da00      	bge.n	10b22 <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
   10b20:	33ff      	adds	r3, #255	; 0xff
   10b22:	121b      	asrs	r3, r3, #8
   10b24:	461a      	mov	r2, r3
   10b26:	4b10      	ldr	r3, [pc, #64]	; (10b68 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
   10b28:	4610      	mov	r0, r2
   10b2a:	4798      	blx	r3
   10b2c:	4603      	mov	r3, r0
   10b2e:	e00b      	b.n	10b48 <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
   10b30:	78fb      	ldrb	r3, [r7, #3]
   10b32:	3bff      	subs	r3, #255	; 0xff
   10b34:	009b      	lsls	r3, r3, #2
   10b36:	2b00      	cmp	r3, #0
   10b38:	da00      	bge.n	10b3c <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
   10b3a:	33ff      	adds	r3, #255	; 0xff
   10b3c:	121b      	asrs	r3, r3, #8
   10b3e:	461a      	mov	r2, r3
   10b40:	4b09      	ldr	r3, [pc, #36]	; (10b68 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
   10b42:	4610      	mov	r0, r2
   10b44:	4798      	blx	r3
   10b46:	4603      	mov	r3, r0
   10b48:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
   10b4a:	4b08      	ldr	r3, [pc, #32]	; (10b6c <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
   10b4c:	68f8      	ldr	r0, [r7, #12]
   10b4e:	4798      	blx	r3
   10b50:	4603      	mov	r3, r0
   10b52:	b2da      	uxtb	r2, r3
   10b54:	687b      	ldr	r3, [r7, #4]
   10b56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return tolerance;
   10b5a:	687b      	ldr	r3, [r7, #4]
   10b5c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
   10b60:	4618      	mov	r0, r3
   10b62:	3710      	adds	r7, #16
   10b64:	46bd      	mov	sp, r7
   10b66:	bd80      	pop	{r7, pc}
   10b68:	00013e5d 	.word	0x00013e5d
   10b6c:	000141a5 	.word	0x000141a5

00010b70 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
   10b70:	b580      	push	{r7, lr}
   10b72:	b082      	sub	sp, #8
   10b74:	af00      	add	r7, sp, #0
   10b76:	6078      	str	r0, [r7, #4]
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
   10b78:	687b      	ldr	r3, [r7, #4]
   10b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10b7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   10b82:	2b00      	cmp	r3, #0
   10b84:	d009      	beq.n	10b9a <_ZN22FlapperValveController10StartMotorEv+0x2a>
	{
		singlefv->SetEnable(false);
   10b86:	687b      	ldr	r3, [r7, #4]
   10b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10b8c:	2100      	movs	r1, #0
   10b8e:	4618      	mov	r0, r3
   10b90:	4b0a      	ldr	r3, [pc, #40]	; (10bbc <_ZN22FlapperValveController10StartMotorEv+0x4c>)
   10b92:	4798      	blx	r3
		delay_ms(10);
   10b94:	200a      	movs	r0, #10
   10b96:	4b0a      	ldr	r3, [pc, #40]	; (10bc0 <_ZN22FlapperValveController10StartMotorEv+0x50>)
   10b98:	4798      	blx	r3
	}
	
		
	singlefv->SetEnable(true);
   10b9a:	687b      	ldr	r3, [r7, #4]
   10b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10ba0:	2101      	movs	r1, #1
   10ba2:	4618      	mov	r0, r3
   10ba4:	4b05      	ldr	r3, [pc, #20]	; (10bbc <_ZN22FlapperValveController10StartMotorEv+0x4c>)
   10ba6:	4798      	blx	r3
	flapperValveIsMoving=true;
   10ba8:	687b      	ldr	r3, [r7, #4]
   10baa:	2201      	movs	r2, #1
   10bac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	return 0;
   10bb0:	2300      	movs	r3, #0
}
   10bb2:	4618      	mov	r0, r3
   10bb4:	3708      	adds	r7, #8
   10bb6:	46bd      	mov	sp, r7
   10bb8:	bd80      	pop	{r7, pc}
   10bba:	bf00      	nop
   10bbc:	00011565 	.word	0x00011565
   10bc0:	00002bb5 	.word	0x00002bb5

00010bc4 <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
   10bc4:	b580      	push	{r7, lr}
   10bc6:	b082      	sub	sp, #8
   10bc8:	af00      	add	r7, sp, #0
   10bca:	6078      	str	r0, [r7, #4]
	StopMotor();
   10bcc:	6878      	ldr	r0, [r7, #4]
   10bce:	4b0d      	ldr	r3, [pc, #52]	; (10c04 <_ZN22FlapperValveController15StopControllingEv+0x40>)
   10bd0:	4798      	blx	r3
	timeoutKeepControlling=false;
   10bd2:	687b      	ldr	r3, [r7, #4]
   10bd4:	2200      	movs	r2, #0
   10bd6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	timeoutFlapperValveController=false;
   10bda:	687b      	ldr	r3, [r7, #4]
   10bdc:	2200      	movs	r2, #0
   10bde:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	isControlling=false;
   10be2:	687b      	ldr	r3, [r7, #4]
   10be4:	2200      	movs	r2, #0
   10be6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	keepControlling=false;
   10bea:	687b      	ldr	r3, [r7, #4]
   10bec:	2200      	movs	r2, #0
   10bee:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	controllerEnabled=false;
   10bf2:	687b      	ldr	r3, [r7, #4]
   10bf4:	2200      	movs	r2, #0
   10bf6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	return 0;
   10bfa:	2300      	movs	r3, #0
}
   10bfc:	4618      	mov	r0, r3
   10bfe:	3708      	adds	r7, #8
   10c00:	46bd      	mov	sp, r7
   10c02:	bd80      	pop	{r7, pc}
   10c04:	00010951 	.word	0x00010951

00010c08 <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
   10c08:	b580      	push	{r7, lr}
   10c0a:	b082      	sub	sp, #8
   10c0c:	af00      	add	r7, sp, #0
   10c0e:	6078      	str	r0, [r7, #4]
   10c10:	460b      	mov	r3, r1
   10c12:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
   10c14:	78fb      	ldrb	r3, [r7, #3]
   10c16:	4619      	mov	r1, r3
   10c18:	6878      	ldr	r0, [r7, #4]
   10c1a:	4b2b      	ldr	r3, [pc, #172]	; (10cc8 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
   10c1c:	4798      	blx	r3
   10c1e:	4603      	mov	r3, r0
   10c20:	461a      	mov	r2, r3
   10c22:	687b      	ldr	r3, [r7, #4]
   10c24:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		CorrectTolerance(setpoint);
   10c28:	687b      	ldr	r3, [r7, #4]
   10c2a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   10c2e:	4619      	mov	r1, r3
   10c30:	6878      	ldr	r0, [r7, #4]
   10c32:	4b26      	ldr	r3, [pc, #152]	; (10ccc <_ZN22FlapperValveController16StartControllingEh+0xc4>)
   10c34:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
   10c36:	687b      	ldr	r3, [r7, #4]
   10c38:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
   10c3c:	4b24      	ldr	r3, [pc, #144]	; (10cd0 <_ZN22FlapperValveController16StartControllingEh+0xc8>)
   10c3e:	4610      	mov	r0, r2
   10c40:	4798      	blx	r3
   10c42:	4602      	mov	r2, r0
   10c44:	687b      	ldr	r3, [r7, #4]
   10c46:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		timeoutFlapperValveController=false;
   10c4a:	687b      	ldr	r3, [r7, #4]
   10c4c:	2200      	movs	r2, #0
   10c4e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
   10c52:	687b      	ldr	r3, [r7, #4]
   10c54:	2200      	movs	r2, #0
   10c56:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=false;
   10c5a:	687b      	ldr	r3, [r7, #4]
   10c5c:	2200      	movs	r2, #0
   10c5e:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		controllerEnabled=true;
   10c62:	687b      	ldr	r3, [r7, #4]
   10c64:	2201      	movs	r2, #1
   10c66:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		unLockTimeout=false;
   10c6a:	687b      	ldr	r3, [r7, #4]
   10c6c:	2200      	movs	r2, #0
   10c6e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		if (valve_ID==0)
   10c72:	687b      	ldr	r3, [r7, #4]
   10c74:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   10c78:	2b00      	cmp	r3, #0
   10c7a:	d106      	bne.n	10c8a <_ZN22FlapperValveController16StartControllingEh+0x82>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   10c7c:	f242 7210 	movw	r2, #10000	; 0x2710
   10c80:	4914      	ldr	r1, [pc, #80]	; (10cd4 <_ZN22FlapperValveController16StartControllingEh+0xcc>)
   10c82:	4815      	ldr	r0, [pc, #84]	; (10cd8 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   10c84:	4b15      	ldr	r3, [pc, #84]	; (10cdc <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   10c86:	4798      	blx	r3
   10c88:	e005      	b.n	10c96 <_ZN22FlapperValveController16StartControllingEh+0x8e>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   10c8a:	f242 7210 	movw	r2, #10000	; 0x2710
   10c8e:	4914      	ldr	r1, [pc, #80]	; (10ce0 <_ZN22FlapperValveController16StartControllingEh+0xd8>)
   10c90:	4811      	ldr	r0, [pc, #68]	; (10cd8 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   10c92:	4b12      	ldr	r3, [pc, #72]	; (10cdc <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   10c94:	4798      	blx	r3
		}
		
		isControlling=true;
   10c96:	687b      	ldr	r3, [r7, #4]
   10c98:	2201      	movs	r2, #1
   10c9a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
   10c9e:	6878      	ldr	r0, [r7, #4]
   10ca0:	4b10      	ldr	r3, [pc, #64]	; (10ce4 <_ZN22FlapperValveController16StartControllingEh+0xdc>)
   10ca2:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
   10ca4:	6878      	ldr	r0, [r7, #4]
   10ca6:	4b10      	ldr	r3, [pc, #64]	; (10ce8 <_ZN22FlapperValveController16StartControllingEh+0xe0>)
   10ca8:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
   10caa:	687b      	ldr	r3, [r7, #4]
   10cac:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   10cb0:	b2db      	uxtb	r3, r3
   10cb2:	2b00      	cmp	r3, #0
   10cb4:	d003      	beq.n	10cbe <_ZN22FlapperValveController16StartControllingEh+0xb6>
		{
			paused=true;
   10cb6:	687b      	ldr	r3, [r7, #4]
   10cb8:	2201      	movs	r2, #1
   10cba:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		return 0;
   10cbe:	2300      	movs	r3, #0
	
}
   10cc0:	4618      	mov	r0, r3
   10cc2:	3708      	adds	r7, #8
   10cc4:	46bd      	mov	sp, r7
   10cc6:	bd80      	pop	{r7, pc}
   10cc8:	00010ced 	.word	0x00010ced
   10ccc:	00010b01 	.word	0x00010b01
   10cd0:	00013e55 	.word	0x00013e55
   10cd4:	0000febd 	.word	0x0000febd
   10cd8:	200020bc 	.word	0x200020bc
   10cdc:	0000e849 	.word	0x0000e849
   10ce0:	0000fee9 	.word	0x0000fee9
   10ce4:	00010139 	.word	0x00010139
   10ce8:	00010511 	.word	0x00010511

00010cec <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
   10cec:	b580      	push	{r7, lr}
   10cee:	b082      	sub	sp, #8
   10cf0:	af00      	add	r7, sp, #0
   10cf2:	6078      	str	r0, [r7, #4]
   10cf4:	460b      	mov	r3, r1
   10cf6:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
   10cf8:	6878      	ldr	r0, [r7, #4]
   10cfa:	4b2a      	ldr	r3, [pc, #168]	; (10da4 <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
   10cfc:	4798      	blx	r3
   10cfe:	4603      	mov	r3, r0
   10d00:	2b00      	cmp	r3, #0
   10d02:	d004      	beq.n	10d0e <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
   10d04:	687b      	ldr	r3, [r7, #4]
   10d06:	78fa      	ldrb	r2, [r7, #3]
   10d08:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
   10d0c:	e043      	b.n	10d96 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
   10d0e:	687b      	ldr	r3, [r7, #4]
   10d10:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   10d14:	2b00      	cmp	r3, #0
   10d16:	d01f      	beq.n	10d58 <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
   10d18:	687b      	ldr	r3, [r7, #4]
   10d1a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   10d1e:	43db      	mvns	r3, r3
   10d20:	b2da      	uxtb	r2, r3
   10d22:	687b      	ldr	r3, [r7, #4]
   10d24:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
			if (sp>(standAlonePosition))
   10d28:	78fb      	ldrb	r3, [r7, #3]
   10d2a:	687a      	ldr	r2, [r7, #4]
   10d2c:	f892 20c5 	ldrb.w	r2, [r2, #197]	; 0xc5
   10d30:	4293      	cmp	r3, r2
   10d32:	dd0c      	ble.n	10d4e <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
   10d34:	687b      	ldr	r3, [r7, #4]
   10d36:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
   10d3a:	687b      	ldr	r3, [r7, #4]
   10d3c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=standAlonePosition;
   10d40:	687b      	ldr	r3, [r7, #4]
   10d42:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
   10d46:	687b      	ldr	r3, [r7, #4]
   10d48:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   10d4c:	e023      	b.n	10d96 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   10d4e:	687b      	ldr	r3, [r7, #4]
   10d50:	78fa      	ldrb	r2, [r7, #3]
   10d52:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
   10d56:	e01e      	b.n	10d96 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
   10d58:	687b      	ldr	r3, [r7, #4]
   10d5a:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
   10d5e:	43db      	mvns	r3, r3
   10d60:	b2da      	uxtb	r2, r3
   10d62:	687b      	ldr	r3, [r7, #4]
   10d64:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			if (sp>maximumPosition)
   10d68:	78fb      	ldrb	r3, [r7, #3]
   10d6a:	687a      	ldr	r2, [r7, #4]
   10d6c:	f892 20c4 	ldrb.w	r2, [r2, #196]	; 0xc4
   10d70:	4293      	cmp	r3, r2
   10d72:	dd0c      	ble.n	10d8e <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
   10d74:	687b      	ldr	r3, [r7, #4]
   10d76:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   10d7a:	687b      	ldr	r3, [r7, #4]
   10d7c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=maximumPosition;
   10d80:	687b      	ldr	r3, [r7, #4]
   10d82:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   10d86:	687b      	ldr	r3, [r7, #4]
   10d88:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   10d8c:	e003      	b.n	10d96 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   10d8e:	687b      	ldr	r3, [r7, #4]
   10d90:	78fa      	ldrb	r2, [r7, #3]
   10d92:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
			}
		}
	}
	
	return setpoint;
   10d96:	687b      	ldr	r3, [r7, #4]
   10d98:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
	
}
   10d9c:	4618      	mov	r0, r3
   10d9e:	3708      	adds	r7, #8
   10da0:	46bd      	mov	sp, r7
   10da2:	bd80      	pop	{r7, pc}
   10da4:	00010909 	.word	0x00010909

00010da8 <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=singlefv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
   10da8:	b580      	push	{r7, lr}
   10daa:	b082      	sub	sp, #8
   10dac:	af00      	add	r7, sp, #0
   10dae:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
   10db0:	687b      	ldr	r3, [r7, #4]
   10db2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   10db6:	4619      	mov	r1, r3
   10db8:	6878      	ldr	r0, [r7, #4]
   10dba:	4b03      	ldr	r3, [pc, #12]	; (10dc8 <_ZN22FlapperValveController16StartControllingEv+0x20>)
   10dbc:	4798      	blx	r3
   10dbe:	4603      	mov	r3, r0
	
}
   10dc0:	4618      	mov	r0, r3
   10dc2:	3708      	adds	r7, #8
   10dc4:	46bd      	mov	sp, r7
   10dc6:	bd80      	pop	{r7, pc}
   10dc8:	00010c09 	.word	0x00010c09

00010dcc <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
   10dcc:	b580      	push	{r7, lr}
   10dce:	b082      	sub	sp, #8
   10dd0:	af00      	add	r7, sp, #0
   10dd2:	6078      	str	r0, [r7, #4]
   10dd4:	460b      	mov	r3, r1
   10dd6:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
   10dd8:	687b      	ldr	r3, [r7, #4]
   10dda:	2200      	movs	r2, #0
   10ddc:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
   10de0:	687b      	ldr	r3, [r7, #4]
   10de2:	2201      	movs	r2, #1
   10de4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
   10de8:	6878      	ldr	r0, [r7, #4]
   10dea:	4b05      	ldr	r3, [pc, #20]	; (10e00 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
   10dec:	4798      	blx	r3
		keepControlling=false;
   10dee:	687b      	ldr	r3, [r7, #4]
   10df0:	2200      	movs	r2, #0
   10df2:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2

	return 0;
   10df6:	2300      	movs	r3, #0
	
}
   10df8:	4618      	mov	r0, r3
   10dfa:	3708      	adds	r7, #8
   10dfc:	46bd      	mov	sp, r7
   10dfe:	bd80      	pop	{r7, pc}
   10e00:	00010139 	.word	0x00010139

00010e04 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
   10e04:	b590      	push	{r4, r7, lr}
   10e06:	b085      	sub	sp, #20
   10e08:	af00      	add	r7, sp, #0
   10e0a:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
   10e0c:	68fb      	ldr	r3, [r7, #12]
   10e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10e12:	4618      	mov	r0, r3
   10e14:	4b36      	ldr	r3, [pc, #216]	; (10ef0 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xec>)
   10e16:	4798      	blx	r3
   10e18:	4603      	mov	r3, r0
   10e1a:	461a      	mov	r2, r3
   10e1c:	68fb      	ldr	r3, [r7, #12]
   10e1e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	//dataStruct.controllerStatus.position=currentPosition;
	dataStruct.actualPosition=currentPosition;
   10e22:	68fb      	ldr	r3, [r7, #12]
   10e24:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   10e28:	68fb      	ldr	r3, [r7, #12]
   10e2a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	dataStruct.setPointPosition=setpoint;
   10e2e:	68fb      	ldr	r3, [r7, #12]
   10e30:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
   10e34:	68fb      	ldr	r3, [r7, #12]
   10e36:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
   10e3a:	68fb      	ldr	r3, [r7, #12]
   10e3c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   10e40:	68fc      	ldr	r4, [r7, #12]
   10e42:	463b      	mov	r3, r7
   10e44:	4611      	mov	r1, r2
   10e46:	4618      	mov	r0, r3
   10e48:	4b2a      	ldr	r3, [pc, #168]	; (10ef4 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf0>)
   10e4a:	4798      	blx	r3
   10e4c:	f104 0384 	add.w	r3, r4, #132	; 0x84
   10e50:	463a      	mov	r2, r7
   10e52:	6810      	ldr	r0, [r2, #0]
   10e54:	6018      	str	r0, [r3, #0]
   10e56:	8892      	ldrh	r2, [r2, #4]
   10e58:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
   10e5a:	68fb      	ldr	r3, [r7, #12]
   10e5c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   10e60:	68fc      	ldr	r4, [r7, #12]
   10e62:	463b      	mov	r3, r7
   10e64:	4611      	mov	r1, r2
   10e66:	4618      	mov	r0, r3
   10e68:	4b23      	ldr	r3, [pc, #140]	; (10ef8 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf4>)
   10e6a:	4798      	blx	r3
   10e6c:	f104 038a 	add.w	r3, r4, #138	; 0x8a
   10e70:	463a      	mov	r2, r7
   10e72:	6811      	ldr	r1, [r2, #0]
   10e74:	6852      	ldr	r2, [r2, #4]
   10e76:	6019      	str	r1, [r3, #0]
   10e78:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
   10e7a:	68fb      	ldr	r3, [r7, #12]
   10e7c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   10e80:	b2da      	uxtb	r2, r3
   10e82:	68fb      	ldr	r3, [r7, #12]
   10e84:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	dataStruct.controllerStatus.isControlling=isControlling;
   10e88:	68fb      	ldr	r3, [r7, #12]
   10e8a:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
   10e8e:	68fb      	ldr	r3, [r7, #12]
   10e90:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
   10e94:	68fb      	ldr	r3, [r7, #12]
   10e96:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   10e9a:	68fb      	ldr	r3, [r7, #12]
   10e9c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	dataStruct.controllerStatus.is_flapper_OK=isOK;
   10ea0:	68fb      	ldr	r3, [r7, #12]
   10ea2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   10ea6:	b2da      	uxtb	r2, r3
   10ea8:	68fb      	ldr	r3, [r7, #12]
   10eaa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	
	if (standAloneActivated)
   10eae:	68fb      	ldr	r3, [r7, #12]
   10eb0:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   10eb4:	2b00      	cmp	r3, #0
   10eb6:	d008      	beq.n	10eca <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc6>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   10eb8:	68fb      	ldr	r3, [r7, #12]
   10eba:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   10ebe:	43db      	mvns	r3, r3
   10ec0:	b2da      	uxtb	r2, r3
   10ec2:	68fb      	ldr	r3, [r7, #12]
   10ec4:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   10ec8:	e007      	b.n	10eda <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd6>
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
   10eca:	68fb      	ldr	r3, [r7, #12]
   10ecc:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
   10ed0:	43db      	mvns	r3, r3
   10ed2:	b2da      	uxtb	r2, r3
   10ed4:	68fb      	ldr	r3, [r7, #12]
   10ed6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	}
	FillPositionsFIFO(currentPosition);
   10eda:	68fb      	ldr	r3, [r7, #12]
   10edc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   10ee0:	4619      	mov	r1, r3
   10ee2:	68f8      	ldr	r0, [r7, #12]
   10ee4:	4b05      	ldr	r3, [pc, #20]	; (10efc <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf8>)
   10ee6:	4798      	blx	r3
}
   10ee8:	bf00      	nop
   10eea:	3714      	adds	r7, #20
   10eec:	46bd      	mov	sp, r7
   10eee:	bd90      	pop	{r4, r7, pc}
   10ef0:	00011785 	.word	0x00011785
   10ef4:	00011509 	.word	0x00011509
   10ef8:	000114b1 	.word	0x000114b1
   10efc:	00010f01 	.word	0x00010f01

00010f00 <_ZN22FlapperValveController17FillPositionsFIFOEh>:
void FlapperValveController::FillPositionsFIFO(uint8_t cp){
   10f00:	b480      	push	{r7}
   10f02:	b085      	sub	sp, #20
   10f04:	af00      	add	r7, sp, #0
   10f06:	6078      	str	r0, [r7, #4]
   10f08:	460b      	mov	r3, r1
   10f0a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   10f0c:	2300      	movs	r3, #0
   10f0e:	73fb      	strb	r3, [r7, #15]
   10f10:	7bfb      	ldrb	r3, [r7, #15]
   10f12:	2b0e      	cmp	r3, #14
   10f14:	dc1d      	bgt.n	10f52 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x52>
	{
		positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-1-i]=positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-2-i];
   10f16:	687b      	ldr	r3, [r7, #4]
   10f18:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   10f1c:	687a      	ldr	r2, [r7, #4]
   10f1e:	3332      	adds	r3, #50	; 0x32
   10f20:	009b      	lsls	r3, r3, #2
   10f22:	4413      	add	r3, r2
   10f24:	685b      	ldr	r3, [r3, #4]
   10f26:	7bfa      	ldrb	r2, [r7, #15]
   10f28:	f1c2 020f 	rsb	r2, r2, #15
   10f2c:	441a      	add	r2, r3
   10f2e:	687b      	ldr	r3, [r7, #4]
   10f30:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   10f34:	6879      	ldr	r1, [r7, #4]
   10f36:	3332      	adds	r3, #50	; 0x32
   10f38:	009b      	lsls	r3, r3, #2
   10f3a:	440b      	add	r3, r1
   10f3c:	685b      	ldr	r3, [r3, #4]
   10f3e:	7bf9      	ldrb	r1, [r7, #15]
   10f40:	f1c1 010e 	rsb	r1, r1, #14
   10f44:	440b      	add	r3, r1
   10f46:	781b      	ldrb	r3, [r3, #0]
   10f48:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   10f4a:	7bfb      	ldrb	r3, [r7, #15]
   10f4c:	3301      	adds	r3, #1
   10f4e:	73fb      	strb	r3, [r7, #15]
   10f50:	e7de      	b.n	10f10 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x10>
	}
	positions[valve_ID][0]=cp;
   10f52:	687b      	ldr	r3, [r7, #4]
   10f54:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   10f58:	687a      	ldr	r2, [r7, #4]
   10f5a:	3332      	adds	r3, #50	; 0x32
   10f5c:	009b      	lsls	r3, r3, #2
   10f5e:	4413      	add	r3, r2
   10f60:	685b      	ldr	r3, [r3, #4]
   10f62:	78fa      	ldrb	r2, [r7, #3]
   10f64:	701a      	strb	r2, [r3, #0]
}
   10f66:	bf00      	nop
   10f68:	3714      	adds	r7, #20
   10f6a:	46bd      	mov	sp, r7
   10f6c:	bc80      	pop	{r7}
   10f6e:	4770      	bx	lr

00010f70 <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return singlefv->ReadActualPosition();
}

bool	FlapperValveController::Selftest(void){
   10f70:	b580      	push	{r7, lr}
   10f72:	b084      	sub	sp, #16
   10f74:	af00      	add	r7, sp, #0
   10f76:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
   10f78:	23b4      	movs	r3, #180	; 0xb4
   10f7a:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
   10f7c:	687b      	ldr	r3, [r7, #4]
   10f7e:	4a59      	ldr	r2, [pc, #356]	; (110e4 <_ZN22FlapperValveController8SelftestEv+0x174>)
   10f80:	33c7      	adds	r3, #199	; 0xc7
   10f82:	8812      	ldrh	r2, [r2, #0]
   10f84:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
   10f86:	6878      	ldr	r0, [r7, #4]
   10f88:	4b57      	ldr	r3, [pc, #348]	; (110e8 <_ZN22FlapperValveController8SelftestEv+0x178>)
   10f8a:	4798      	blx	r3
	singlefv->SetEnable(false);
   10f8c:	687b      	ldr	r3, [r7, #4]
   10f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10f92:	2100      	movs	r1, #0
   10f94:	4618      	mov	r0, r3
   10f96:	4b55      	ldr	r3, [pc, #340]	; (110ec <_ZN22FlapperValveController8SelftestEv+0x17c>)
   10f98:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
   10f9a:	687b      	ldr	r3, [r7, #4]
   10f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10fa0:	2100      	movs	r1, #0
   10fa2:	4618      	mov	r0, r3
   10fa4:	4b52      	ldr	r3, [pc, #328]	; (110f0 <_ZN22FlapperValveController8SelftestEv+0x180>)
   10fa6:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
   10fa8:	687b      	ldr	r3, [r7, #4]
   10faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10fae:	2100      	movs	r1, #0
   10fb0:	4618      	mov	r0, r3
   10fb2:	4b50      	ldr	r3, [pc, #320]	; (110f4 <_ZN22FlapperValveController8SelftestEv+0x184>)
   10fb4:	4798      	blx	r3
	delay_ms(10);
   10fb6:	200a      	movs	r0, #10
   10fb8:	4b4f      	ldr	r3, [pc, #316]	; (110f8 <_ZN22FlapperValveController8SelftestEv+0x188>)
   10fba:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
   10fbc:	687b      	ldr	r3, [r7, #4]
   10fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10fc2:	2101      	movs	r1, #1
   10fc4:	4618      	mov	r0, r3
   10fc6:	4b4b      	ldr	r3, [pc, #300]	; (110f4 <_ZN22FlapperValveController8SelftestEv+0x184>)
   10fc8:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
   10fca:	687b      	ldr	r3, [r7, #4]
   10fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10fd0:	7bba      	ldrb	r2, [r7, #14]
   10fd2:	4611      	mov	r1, r2
   10fd4:	4618      	mov	r0, r3
   10fd6:	4b49      	ldr	r3, [pc, #292]	; (110fc <_ZN22FlapperValveController8SelftestEv+0x18c>)
   10fd8:	4798      	blx	r3
	singlefv->SetDirection(false);
   10fda:	687b      	ldr	r3, [r7, #4]
   10fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10fe0:	2100      	movs	r1, #0
   10fe2:	4618      	mov	r0, r3
   10fe4:	4b46      	ldr	r3, [pc, #280]	; (11100 <_ZN22FlapperValveController8SelftestEv+0x190>)
   10fe6:	4798      	blx	r3
	if (singlefv->ReadActualPosition()>localSetpoint)
   10fe8:	687b      	ldr	r3, [r7, #4]
   10fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10fee:	4618      	mov	r0, r3
   10ff0:	4b44      	ldr	r3, [pc, #272]	; (11104 <_ZN22FlapperValveController8SelftestEv+0x194>)
   10ff2:	4798      	blx	r3
   10ff4:	4603      	mov	r3, r0
   10ff6:	461a      	mov	r2, r3
   10ff8:	7bbb      	ldrb	r3, [r7, #14]
   10ffa:	429a      	cmp	r2, r3
   10ffc:	bfcc      	ite	gt
   10ffe:	2301      	movgt	r3, #1
   11000:	2300      	movle	r3, #0
   11002:	b2db      	uxtb	r3, r3
   11004:	2b00      	cmp	r3, #0
   11006:	d007      	beq.n	11018 <_ZN22FlapperValveController8SelftestEv+0xa8>
	{
		singlefv->SetDirection(true);
   11008:	687b      	ldr	r3, [r7, #4]
   1100a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1100e:	2101      	movs	r1, #1
   11010:	4618      	mov	r0, r3
   11012:	4b3b      	ldr	r3, [pc, #236]	; (11100 <_ZN22FlapperValveController8SelftestEv+0x190>)
   11014:	4798      	blx	r3
   11016:	e006      	b.n	11026 <_ZN22FlapperValveController8SelftestEv+0xb6>
	}
	else
	{
		singlefv->SetDirection(false);
   11018:	687b      	ldr	r3, [r7, #4]
   1101a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1101e:	2100      	movs	r1, #0
   11020:	4618      	mov	r0, r3
   11022:	4b37      	ldr	r3, [pc, #220]	; (11100 <_ZN22FlapperValveController8SelftestEv+0x190>)
   11024:	4798      	blx	r3
	}
		if (valve_ID==0)
   11026:	687b      	ldr	r3, [r7, #4]
   11028:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   1102c:	2b00      	cmp	r3, #0
   1102e:	d106      	bne.n	1103e <_ZN22FlapperValveController8SelftestEv+0xce>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   11030:	f242 7210 	movw	r2, #10000	; 0x2710
   11034:	4934      	ldr	r1, [pc, #208]	; (11108 <_ZN22FlapperValveController8SelftestEv+0x198>)
   11036:	4835      	ldr	r0, [pc, #212]	; (1110c <_ZN22FlapperValveController8SelftestEv+0x19c>)
   11038:	4b35      	ldr	r3, [pc, #212]	; (11110 <_ZN22FlapperValveController8SelftestEv+0x1a0>)
   1103a:	4798      	blx	r3
   1103c:	e005      	b.n	1104a <_ZN22FlapperValveController8SelftestEv+0xda>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   1103e:	f242 7210 	movw	r2, #10000	; 0x2710
   11042:	4934      	ldr	r1, [pc, #208]	; (11114 <_ZN22FlapperValveController8SelftestEv+0x1a4>)
   11044:	4831      	ldr	r0, [pc, #196]	; (1110c <_ZN22FlapperValveController8SelftestEv+0x19c>)
   11046:	4b32      	ldr	r3, [pc, #200]	; (11110 <_ZN22FlapperValveController8SelftestEv+0x1a0>)
   11048:	4798      	blx	r3
		}
	singlefv->SetEnable(true);
   1104a:	687b      	ldr	r3, [r7, #4]
   1104c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   11050:	2101      	movs	r1, #1
   11052:	4618      	mov	r0, r3
   11054:	4b25      	ldr	r3, [pc, #148]	; (110ec <_ZN22FlapperValveController8SelftestEv+0x17c>)
   11056:	4798      	blx	r3

	localPosition=singlefv->ReadActualPosition();
   11058:	687b      	ldr	r3, [r7, #4]
   1105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1105e:	4618      	mov	r0, r3
   11060:	4b28      	ldr	r3, [pc, #160]	; (11104 <_ZN22FlapperValveController8SelftestEv+0x194>)
   11062:	4798      	blx	r3
   11064:	4603      	mov	r3, r0
   11066:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
   11068:	687b      	ldr	r3, [r7, #4]
   1106a:	2200      	movs	r2, #0
   1106c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   11070:	7bfa      	ldrb	r2, [r7, #15]
   11072:	7bbb      	ldrb	r3, [r7, #14]
   11074:	1ad3      	subs	r3, r2, r3
   11076:	2b00      	cmp	r3, #0
   11078:	bfb8      	it	lt
   1107a:	425b      	neglt	r3, r3
   1107c:	2b0c      	cmp	r3, #12
   1107e:	bfcc      	ite	gt
   11080:	2301      	movgt	r3, #1
   11082:	2300      	movle	r3, #0
   11084:	b2db      	uxtb	r3, r3
   11086:	461a      	mov	r2, r3
   11088:	687b      	ldr	r3, [r7, #4]
   1108a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   1108e:	b2db      	uxtb	r3, r3
   11090:	f083 0301 	eor.w	r3, r3, #1
   11094:	b2db      	uxtb	r3, r3
   11096:	4013      	ands	r3, r2
   11098:	2b00      	cmp	r3, #0
   1109a:	bf14      	ite	ne
   1109c:	2301      	movne	r3, #1
   1109e:	2300      	moveq	r3, #0
   110a0:	b2db      	uxtb	r3, r3
   110a2:	2b00      	cmp	r3, #0
   110a4:	d008      	beq.n	110b8 <_ZN22FlapperValveController8SelftestEv+0x148>

	{

		localPosition=singlefv->ReadActualPosition();
   110a6:	687b      	ldr	r3, [r7, #4]
   110a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   110ac:	4618      	mov	r0, r3
   110ae:	4b15      	ldr	r3, [pc, #84]	; (11104 <_ZN22FlapperValveController8SelftestEv+0x194>)
   110b0:	4798      	blx	r3
   110b2:	4603      	mov	r3, r0
   110b4:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   110b6:	e7db      	b.n	11070 <_ZN22FlapperValveController8SelftestEv+0x100>

	}
	RemoveTimeoutTask();
   110b8:	6878      	ldr	r0, [r7, #4]
   110ba:	4b17      	ldr	r3, [pc, #92]	; (11118 <_ZN22FlapperValveController8SelftestEv+0x1a8>)
   110bc:	4798      	blx	r3

	singlefv->SetEnable(false);
   110be:	687b      	ldr	r3, [r7, #4]
   110c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   110c4:	2100      	movs	r1, #0
   110c6:	4618      	mov	r0, r3
   110c8:	4b08      	ldr	r3, [pc, #32]	; (110ec <_ZN22FlapperValveController8SelftestEv+0x17c>)
   110ca:	4798      	blx	r3
	return !timeoutFlapperValveController;
   110cc:	687b      	ldr	r3, [r7, #4]
   110ce:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   110d2:	b2db      	uxtb	r3, r3
   110d4:	f083 0301 	eor.w	r3, r3, #1
   110d8:	b2db      	uxtb	r3, r3
}
   110da:	4618      	mov	r0, r3
   110dc:	3710      	adds	r7, #16
   110de:	46bd      	mov	sp, r7
   110e0:	bd80      	pop	{r7, pc}
   110e2:	bf00      	nop
   110e4:	00014b6c 	.word	0x00014b6c
   110e8:	00010e05 	.word	0x00010e05
   110ec:	00011565 	.word	0x00011565
   110f0:	000116d5 	.word	0x000116d5
   110f4:	0001165d 	.word	0x0001165d
   110f8:	00002bb5 	.word	0x00002bb5
   110fc:	0001174d 	.word	0x0001174d
   11100:	000115e5 	.word	0x000115e5
   11104:	00011785 	.word	0x00011785
   11108:	0000febd 	.word	0x0000febd
   1110c:	200020bc 	.word	0x200020bc
   11110:	0000e849 	.word	0x0000e849
   11114:	0000fee9 	.word	0x0000fee9
   11118:	0001111d 	.word	0x0001111d

0001111c <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:

void	FlapperValveController::RemoveTimeoutTask(void){
   1111c:	b580      	push	{r7, lr}
   1111e:	b082      	sub	sp, #8
   11120:	af00      	add	r7, sp, #0
   11122:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
   11124:	687b      	ldr	r3, [r7, #4]
   11126:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   1112a:	2b00      	cmp	r3, #0
   1112c:	d104      	bne.n	11138 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   1112e:	4906      	ldr	r1, [pc, #24]	; (11148 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
   11130:	4806      	ldr	r0, [pc, #24]	; (1114c <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   11132:	4b07      	ldr	r3, [pc, #28]	; (11150 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   11134:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
   11136:	e003      	b.n	11140 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   11138:	4906      	ldr	r1, [pc, #24]	; (11154 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
   1113a:	4804      	ldr	r0, [pc, #16]	; (1114c <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   1113c:	4b04      	ldr	r3, [pc, #16]	; (11150 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   1113e:	4798      	blx	r3
}
   11140:	bf00      	nop
   11142:	3708      	adds	r7, #8
   11144:	46bd      	mov	sp, r7
   11146:	bd80      	pop	{r7, pc}
   11148:	0000febd 	.word	0x0000febd
   1114c:	200020bc 	.word	0x200020bc
   11150:	0000e7f1 	.word	0x0000e7f1
   11154:	0000fee9 	.word	0x0000fee9

00011158 <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   11158:	b590      	push	{r4, r7, lr}
   1115a:	b083      	sub	sp, #12
   1115c:	af00      	add	r7, sp, #0
   1115e:	6078      	str	r0, [r7, #4]
   11160:	4c05      	ldr	r4, [pc, #20]	; (11178 <__tcf_0+0x20>)
   11162:	4b06      	ldr	r3, [pc, #24]	; (1117c <__tcf_0+0x24>)
   11164:	429c      	cmp	r4, r3
   11166:	d004      	beq.n	11172 <__tcf_0+0x1a>
   11168:	3c78      	subs	r4, #120	; 0x78
   1116a:	4620      	mov	r0, r4
   1116c:	4b04      	ldr	r3, [pc, #16]	; (11180 <__tcf_0+0x28>)
   1116e:	4798      	blx	r3
   11170:	e7f7      	b.n	11162 <__tcf_0+0xa>
   11172:	370c      	adds	r7, #12
   11174:	46bd      	mov	sp, r7
   11176:	bd90      	pop	{r4, r7, pc}
   11178:	20002294 	.word	0x20002294
   1117c:	200021a4 	.word	0x200021a4
   11180:	00011351 	.word	0x00011351

00011184 <_Z41__static_initialization_and_destruction_0ii>:

   11184:	b5b0      	push	{r4, r5, r7, lr}
   11186:	b082      	sub	sp, #8
   11188:	af00      	add	r7, sp, #0
   1118a:	6078      	str	r0, [r7, #4]
   1118c:	6039      	str	r1, [r7, #0]
   1118e:	687b      	ldr	r3, [r7, #4]
   11190:	2b01      	cmp	r3, #1
   11192:	d16d      	bne.n	11270 <_Z41__static_initialization_and_destruction_0ii+0xec>
   11194:	683b      	ldr	r3, [r7, #0]
   11196:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1119a:	4293      	cmp	r3, r2
   1119c:	d168      	bne.n	11270 <_Z41__static_initialization_and_destruction_0ii+0xec>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   1119e:	4936      	ldr	r1, [pc, #216]	; (11278 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   111a0:	4836      	ldr	r0, [pc, #216]	; (1127c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   111a2:	4b37      	ldr	r3, [pc, #220]	; (11280 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   111a4:	4798      	blx	r3
   111a6:	4a37      	ldr	r2, [pc, #220]	; (11284 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   111a8:	4937      	ldr	r1, [pc, #220]	; (11288 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   111aa:	4834      	ldr	r0, [pc, #208]	; (1127c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   111ac:	4b37      	ldr	r3, [pc, #220]	; (1128c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   111ae:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   111b0:	4937      	ldr	r1, [pc, #220]	; (11290 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   111b2:	4838      	ldr	r0, [pc, #224]	; (11294 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   111b4:	4b38      	ldr	r3, [pc, #224]	; (11298 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   111b6:	4798      	blx	r3
   111b8:	4a32      	ldr	r2, [pc, #200]	; (11284 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   111ba:	4938      	ldr	r1, [pc, #224]	; (1129c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   111bc:	4835      	ldr	r0, [pc, #212]	; (11294 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   111be:	4b33      	ldr	r3, [pc, #204]	; (1128c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   111c0:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   111c2:	4937      	ldr	r1, [pc, #220]	; (112a0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   111c4:	4837      	ldr	r0, [pc, #220]	; (112a4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   111c6:	4b34      	ldr	r3, [pc, #208]	; (11298 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   111c8:	4798      	blx	r3
   111ca:	4a2e      	ldr	r2, [pc, #184]	; (11284 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   111cc:	4933      	ldr	r1, [pc, #204]	; (1129c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   111ce:	4835      	ldr	r0, [pc, #212]	; (112a4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   111d0:	4b2e      	ldr	r3, [pc, #184]	; (1128c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   111d2:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   111d4:	4934      	ldr	r1, [pc, #208]	; (112a8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   111d6:	4835      	ldr	r0, [pc, #212]	; (112ac <_Z41__static_initialization_and_destruction_0ii+0x128>)
   111d8:	4b2f      	ldr	r3, [pc, #188]	; (11298 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   111da:	4798      	blx	r3
   111dc:	4a29      	ldr	r2, [pc, #164]	; (11284 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   111de:	492f      	ldr	r1, [pc, #188]	; (1129c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   111e0:	4832      	ldr	r0, [pc, #200]	; (112ac <_Z41__static_initialization_and_destruction_0ii+0x128>)
   111e2:	4b2a      	ldr	r3, [pc, #168]	; (1128c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   111e4:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   111e6:	4932      	ldr	r1, [pc, #200]	; (112b0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   111e8:	4832      	ldr	r0, [pc, #200]	; (112b4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   111ea:	4b2b      	ldr	r3, [pc, #172]	; (11298 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   111ec:	4798      	blx	r3
   111ee:	4a25      	ldr	r2, [pc, #148]	; (11284 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   111f0:	492a      	ldr	r1, [pc, #168]	; (1129c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   111f2:	4830      	ldr	r0, [pc, #192]	; (112b4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   111f4:	4b25      	ldr	r3, [pc, #148]	; (1128c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   111f6:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   111f8:	492f      	ldr	r1, [pc, #188]	; (112b8 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   111fa:	4830      	ldr	r0, [pc, #192]	; (112bc <_Z41__static_initialization_and_destruction_0ii+0x138>)
   111fc:	4b26      	ldr	r3, [pc, #152]	; (11298 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   111fe:	4798      	blx	r3
   11200:	4a20      	ldr	r2, [pc, #128]	; (11284 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11202:	4926      	ldr	r1, [pc, #152]	; (1129c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   11204:	482d      	ldr	r0, [pc, #180]	; (112bc <_Z41__static_initialization_and_destruction_0ii+0x138>)
   11206:	4b21      	ldr	r3, [pc, #132]	; (1128c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   11208:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1120a:	492d      	ldr	r1, [pc, #180]	; (112c0 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   1120c:	482d      	ldr	r0, [pc, #180]	; (112c4 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   1120e:	4b22      	ldr	r3, [pc, #136]	; (11298 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   11210:	4798      	blx	r3
   11212:	4a1c      	ldr	r2, [pc, #112]	; (11284 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11214:	4921      	ldr	r1, [pc, #132]	; (1129c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   11216:	482b      	ldr	r0, [pc, #172]	; (112c4 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   11218:	4b1c      	ldr	r3, [pc, #112]	; (1128c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1121a:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   1121c:	492a      	ldr	r1, [pc, #168]	; (112c8 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   1121e:	482b      	ldr	r0, [pc, #172]	; (112cc <_Z41__static_initialization_and_destruction_0ii+0x148>)
   11220:	4b1d      	ldr	r3, [pc, #116]	; (11298 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   11222:	4798      	blx	r3
   11224:	4a17      	ldr	r2, [pc, #92]	; (11284 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11226:	491d      	ldr	r1, [pc, #116]	; (1129c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   11228:	4828      	ldr	r0, [pc, #160]	; (112cc <_Z41__static_initialization_and_destruction_0ii+0x148>)
   1122a:	4b18      	ldr	r3, [pc, #96]	; (1128c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1122c:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   1122e:	4928      	ldr	r1, [pc, #160]	; (112d0 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   11230:	4828      	ldr	r0, [pc, #160]	; (112d4 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   11232:	4b19      	ldr	r3, [pc, #100]	; (11298 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   11234:	4798      	blx	r3
   11236:	4a13      	ldr	r2, [pc, #76]	; (11284 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11238:	4918      	ldr	r1, [pc, #96]	; (1129c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1123a:	4826      	ldr	r0, [pc, #152]	; (112d4 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   1123c:	4b13      	ldr	r3, [pc, #76]	; (1128c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1123e:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   11240:	4b25      	ldr	r3, [pc, #148]	; (112d8 <_Z41__static_initialization_and_destruction_0ii+0x154>)
   11242:	2401      	movs	r4, #1
   11244:	461d      	mov	r5, r3
   11246:	2c00      	cmp	r4, #0
   11248:	db05      	blt.n	11256 <_Z41__static_initialization_and_destruction_0ii+0xd2>
   1124a:	4628      	mov	r0, r5
   1124c:	4b23      	ldr	r3, [pc, #140]	; (112dc <_Z41__static_initialization_and_destruction_0ii+0x158>)
   1124e:	4798      	blx	r3
   11250:	3578      	adds	r5, #120	; 0x78
   11252:	3c01      	subs	r4, #1
   11254:	e7f7      	b.n	11246 <_Z41__static_initialization_and_destruction_0ii+0xc2>
   11256:	4a0b      	ldr	r2, [pc, #44]	; (11284 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11258:	4921      	ldr	r1, [pc, #132]	; (112e0 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   1125a:	2000      	movs	r0, #0
   1125c:	4b0b      	ldr	r3, [pc, #44]	; (1128c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1125e:	4798      	blx	r3
   11260:	4820      	ldr	r0, [pc, #128]	; (112e4 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   11262:	4b21      	ldr	r3, [pc, #132]	; (112e8 <_Z41__static_initialization_and_destruction_0ii+0x164>)
   11264:	4798      	blx	r3
   11266:	4a07      	ldr	r2, [pc, #28]	; (11284 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11268:	4920      	ldr	r1, [pc, #128]	; (112ec <_Z41__static_initialization_and_destruction_0ii+0x168>)
   1126a:	481e      	ldr	r0, [pc, #120]	; (112e4 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   1126c:	4b07      	ldr	r3, [pc, #28]	; (1128c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1126e:	4798      	blx	r3
   11270:	bf00      	nop
   11272:	3708      	adds	r7, #8
   11274:	46bd      	mov	sp, r7
   11276:	bdb0      	pop	{r4, r5, r7, pc}
   11278:	2000a2f0 	.word	0x2000a2f0
   1127c:	20002064 	.word	0x20002064
   11280:	0000debd 	.word	0x0000debd
   11284:	20000000 	.word	0x20000000
   11288:	0000ded9 	.word	0x0000ded9
   1128c:	00013cdd 	.word	0x00013cdd
   11290:	2000a1c0 	.word	0x2000a1c0
   11294:	2000207c 	.word	0x2000207c
   11298:	0000e575 	.word	0x0000e575
   1129c:	0000e5ad 	.word	0x0000e5ad
   112a0:	2000a254 	.word	0x2000a254
   112a4:	2000209c 	.word	0x2000209c
   112a8:	2000a378 	.word	0x2000a378
   112ac:	200020bc 	.word	0x200020bc
   112b0:	2000a274 	.word	0x2000a274
   112b4:	200020dc 	.word	0x200020dc
   112b8:	2000a338 	.word	0x2000a338
   112bc:	200020fc 	.word	0x200020fc
   112c0:	2000a358 	.word	0x2000a358
   112c4:	2000211c 	.word	0x2000211c
   112c8:	2000a230 	.word	0x2000a230
   112cc:	2000213c 	.word	0x2000213c
   112d0:	2000a2d0 	.word	0x2000a2d0
   112d4:	2000215c 	.word	0x2000215c
   112d8:	200021a4 	.word	0x200021a4
   112dc:	00011305 	.word	0x00011305
   112e0:	00011159 	.word	0x00011159
   112e4:	20002294 	.word	0x20002294
   112e8:	0000ff95 	.word	0x0000ff95
   112ec:	00010021 	.word	0x00010021

000112f0 <_GLOBAL__sub_I_ptrFlapperValveController>:
   112f0:	b580      	push	{r7, lr}
   112f2:	af00      	add	r7, sp, #0
   112f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   112f8:	2001      	movs	r0, #1
   112fa:	4b01      	ldr	r3, [pc, #4]	; (11300 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
   112fc:	4798      	blx	r3
   112fe:	bd80      	pop	{r7, pc}
   11300:	00011185 	.word	0x00011185

00011304 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
   11304:	b580      	push	{r7, lr}
   11306:	b082      	sub	sp, #8
   11308:	af00      	add	r7, sp, #0
   1130a:	6078      	str	r0, [r7, #4]
   1130c:	687b      	ldr	r3, [r7, #4]
   1130e:	4618      	mov	r0, r3
   11310:	4b0c      	ldr	r3, [pc, #48]	; (11344 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
   11312:	4798      	blx	r3
{
	valveID=0;
   11314:	687b      	ldr	r3, [r7, #4]
   11316:	2200      	movs	r2, #0
   11318:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	i2c=&i2cStatic;
   1131c:	687b      	ldr	r3, [r7, #4]
   1131e:	4a0a      	ldr	r2, [pc, #40]	; (11348 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
   11320:	64da      	str	r2, [r3, #76]	; 0x4c
	fv1StatusChanged=false;
   11322:	687b      	ldr	r3, [r7, #4]
   11324:	2200      	movs	r2, #0
   11326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ptrSingleFlapperValveClass=this;
   1132a:	4a08      	ldr	r2, [pc, #32]	; (1134c <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
   1132c:	687b      	ldr	r3, [r7, #4]
   1132e:	6013      	str	r3, [r2, #0]
	isOK=false;
   11330:	687b      	ldr	r3, [r7, #4]
   11332:	2200      	movs	r2, #0
   11334:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
} //FlapperValve_Class
   11338:	687b      	ldr	r3, [r7, #4]
   1133a:	4618      	mov	r0, r3
   1133c:	3708      	adds	r7, #8
   1133e:	46bd      	mov	sp, r7
   11340:	bd80      	pop	{r7, pc}
   11342:	bf00      	nop
   11344:	000125b5 	.word	0x000125b5
   11348:	2000248c 	.word	0x2000248c
   1134c:	20002488 	.word	0x20002488

00011350 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
   11350:	b580      	push	{r7, lr}
   11352:	b082      	sub	sp, #8
   11354:	af00      	add	r7, sp, #0
   11356:	6078      	str	r0, [r7, #4]
   11358:	687b      	ldr	r3, [r7, #4]
   1135a:	4618      	mov	r0, r3
   1135c:	4b03      	ldr	r3, [pc, #12]	; (1136c <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
   1135e:	4798      	blx	r3
{
} //~FlapperValve_Class
   11360:	687b      	ldr	r3, [r7, #4]
   11362:	4618      	mov	r0, r3
   11364:	3708      	adds	r7, #8
   11366:	46bd      	mov	sp, r7
   11368:	bd80      	pop	{r7, pc}
   1136a:	bf00      	nop
   1136c:	000125c9 	.word	0x000125c9

00011370 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
   11370:	b580      	push	{r7, lr}
   11372:	b082      	sub	sp, #8
   11374:	af00      	add	r7, sp, #0
   11376:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
   11378:	687b      	ldr	r3, [r7, #4]
   1137a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1137c:	7a1b      	ldrb	r3, [r3, #8]
   1137e:	b2db      	uxtb	r3, r3
   11380:	2b00      	cmp	r3, #0
   11382:	d104      	bne.n	1138e <_ZN24SingleFlapperValve_Class4InitEv+0x1e>
	{
	} 
	else
	{
		i2c->Init();
   11384:	687b      	ldr	r3, [r7, #4]
   11386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11388:	4618      	mov	r0, r3
   1138a:	4b19      	ldr	r3, [pc, #100]	; (113f0 <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
   1138c:	4798      	blx	r3
	}
		

		if (i2c->isOK)
   1138e:	687b      	ldr	r3, [r7, #4]
   11390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11392:	7a5b      	ldrb	r3, [r3, #9]
   11394:	b2db      	uxtb	r3, r3
   11396:	2b00      	cmp	r3, #0
   11398:	d01b      	beq.n	113d2 <_ZN24SingleFlapperValve_Class4InitEv+0x62>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
   1139a:	687b      	ldr	r3, [r7, #4]
   1139c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   113a0:	4619      	mov	r1, r3
   113a2:	6878      	ldr	r0, [r7, #4]
   113a4:	4b13      	ldr	r3, [pc, #76]	; (113f4 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
   113a6:	4798      	blx	r3
			expanders[0]->SetPortInput();
   113a8:	687b      	ldr	r3, [r7, #4]
   113aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   113ac:	4618      	mov	r0, r3
   113ae:	4b12      	ldr	r3, [pc, #72]	; (113f8 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
   113b0:	4798      	blx	r3
			expanders[1]->SetPortInput(0x82);
   113b2:	687b      	ldr	r3, [r7, #4]
   113b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   113b6:	2182      	movs	r1, #130	; 0x82
   113b8:	4618      	mov	r0, r3
   113ba:	4b10      	ldr	r3, [pc, #64]	; (113fc <_ZN24SingleFlapperValve_Class4InitEv+0x8c>)
   113bc:	4798      	blx	r3
			expanders[2]->SetPortOutput();
   113be:	687b      	ldr	r3, [r7, #4]
   113c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   113c2:	4618      	mov	r0, r3
   113c4:	4b0e      	ldr	r3, [pc, #56]	; (11400 <_ZN24SingleFlapperValve_Class4InitEv+0x90>)
   113c6:	4798      	blx	r3
			expanders[3]->SetPortInput();
   113c8:	687b      	ldr	r3, [r7, #4]
   113ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   113cc:	4618      	mov	r0, r3
   113ce:	4b0a      	ldr	r3, [pc, #40]	; (113f8 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
   113d0:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
   113d2:	687b      	ldr	r3, [r7, #4]
   113d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   113d6:	7a5b      	ldrb	r3, [r3, #9]
   113d8:	b2da      	uxtb	r2, r3
   113da:	687b      	ldr	r3, [r7, #4]
   113dc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		
		return isOK;
   113e0:	687b      	ldr	r3, [r7, #4]
   113e2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   113e6:	b2db      	uxtb	r3, r3


}
   113e8:	4618      	mov	r0, r3
   113ea:	3708      	adds	r7, #8
   113ec:	46bd      	mov	sp, r7
   113ee:	bd80      	pop	{r7, pc}
   113f0:	0000deed 	.word	0x0000deed
   113f4:	0001142d 	.word	0x0001142d
   113f8:	0000e245 	.word	0x0000e245
   113fc:	0000e289 	.word	0x0000e289
   11400:	0000e2fd 	.word	0x0000e2fd

00011404 <_ZN24SingleFlapperValve_Class4InitEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
   11404:	b580      	push	{r7, lr}
   11406:	b082      	sub	sp, #8
   11408:	af00      	add	r7, sp, #0
   1140a:	6078      	str	r0, [r7, #4]
   1140c:	460b      	mov	r3, r1
   1140e:	70fb      	strb	r3, [r7, #3]
	valveID=valve_id;
   11410:	687b      	ldr	r3, [r7, #4]
   11412:	78fa      	ldrb	r2, [r7, #3]
   11414:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	return Init();
   11418:	6878      	ldr	r0, [r7, #4]
   1141a:	4b03      	ldr	r3, [pc, #12]	; (11428 <_ZN24SingleFlapperValve_Class4InitEh+0x24>)
   1141c:	4798      	blx	r3
   1141e:	4603      	mov	r3, r0
}
   11420:	4618      	mov	r0, r3
   11422:	3708      	adds	r7, #8
   11424:	46bd      	mov	sp, r7
   11426:	bd80      	pop	{r7, pc}
   11428:	00011371 	.word	0x00011371

0001142c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
   1142c:	b580      	push	{r7, lr}
   1142e:	b084      	sub	sp, #16
   11430:	af00      	add	r7, sp, #0
   11432:	6078      	str	r0, [r7, #4]
   11434:	460b      	mov	r3, r1
   11436:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   11438:	2300      	movs	r3, #0
   1143a:	60fb      	str	r3, [r7, #12]
   1143c:	68fb      	ldr	r3, [r7, #12]
   1143e:	2b03      	cmp	r3, #3
   11440:	dc2d      	bgt.n	1149e <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x72>
	{
		currentExpander=&(expandersStatic[valveID][i]);
   11442:	687b      	ldr	r3, [r7, #4]
   11444:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   11448:	4619      	mov	r1, r3
   1144a:	68fb      	ldr	r3, [r7, #12]
   1144c:	461a      	mov	r2, r3
   1144e:	00d2      	lsls	r2, r2, #3
   11450:	1ad2      	subs	r2, r2, r3
   11452:	0093      	lsls	r3, r2, #2
   11454:	461a      	mov	r2, r3
   11456:	460b      	mov	r3, r1
   11458:	00db      	lsls	r3, r3, #3
   1145a:	1a5b      	subs	r3, r3, r1
   1145c:	011b      	lsls	r3, r3, #4
   1145e:	4413      	add	r3, r2
   11460:	4a11      	ldr	r2, [pc, #68]	; (114a8 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x7c>)
   11462:	441a      	add	r2, r3
   11464:	687b      	ldr	r3, [r7, #4]
   11466:	669a      	str	r2, [r3, #104]	; 0x68
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
   11468:	687b      	ldr	r3, [r7, #4]
   1146a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   1146c:	68fb      	ldr	r3, [r7, #12]
   1146e:	b2da      	uxtb	r2, r3
   11470:	78fb      	ldrb	r3, [r7, #3]
   11472:	009b      	lsls	r3, r3, #2
   11474:	b2db      	uxtb	r3, r3
   11476:	4413      	add	r3, r2
   11478:	b2db      	uxtb	r3, r3
   1147a:	3320      	adds	r3, #32
   1147c:	b2d9      	uxtb	r1, r3
   1147e:	687b      	ldr	r3, [r7, #4]
   11480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11482:	461a      	mov	r2, r3
   11484:	4b09      	ldr	r3, [pc, #36]	; (114ac <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
   11486:	4798      	blx	r3
		expanders[i]=currentExpander;
   11488:	687b      	ldr	r3, [r7, #4]
   1148a:	6e99      	ldr	r1, [r3, #104]	; 0x68
   1148c:	687b      	ldr	r3, [r7, #4]
   1148e:	68fa      	ldr	r2, [r7, #12]
   11490:	3216      	adds	r2, #22
   11492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   11496:	68fb      	ldr	r3, [r7, #12]
   11498:	3301      	adds	r3, #1
   1149a:	60fb      	str	r3, [r7, #12]
   1149c:	e7ce      	b.n	1143c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
   1149e:	2300      	movs	r3, #0
}
   114a0:	4618      	mov	r0, r3
   114a2:	3710      	adds	r7, #16
   114a4:	46bd      	mov	sp, r7
   114a6:	bd80      	pop	{r7, pc}
   114a8:	200024a4 	.word	0x200024a4
   114ac:	0000e0a1 	.word	0x0000e0a1

000114b0 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
   114b0:	b590      	push	{r4, r7, lr}
   114b2:	b085      	sub	sp, #20
   114b4:	af00      	add	r7, sp, #0
   114b6:	60f8      	str	r0, [r7, #12]
   114b8:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
   114ba:	68bb      	ldr	r3, [r7, #8]
   114bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   114be:	4618      	mov	r0, r3
   114c0:	4b0f      	ldr	r3, [pc, #60]	; (11500 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x50>)
   114c2:	4798      	blx	r3
   114c4:	4603      	mov	r3, r0
   114c6:	461a      	mov	r2, r3
   114c8:	68bb      	ldr	r3, [r7, #8]
   114ca:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	controlOutputs=FillControlOutputs(value);
   114ce:	68b9      	ldr	r1, [r7, #8]
   114d0:	68bb      	ldr	r3, [r7, #8]
   114d2:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
   114d6:	68bc      	ldr	r4, [r7, #8]
   114d8:	463b      	mov	r3, r7
   114da:	4618      	mov	r0, r3
   114dc:	4b09      	ldr	r3, [pc, #36]	; (11504 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
   114de:	4798      	blx	r3
   114e0:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   114e4:	463a      	mov	r2, r7
   114e6:	6810      	ldr	r0, [r2, #0]
   114e8:	6851      	ldr	r1, [r2, #4]
   114ea:	c303      	stmia	r3!, {r0, r1}
	return controlOutputs;
   114ec:	68fa      	ldr	r2, [r7, #12]
   114ee:	68bb      	ldr	r3, [r7, #8]
   114f0:	333c      	adds	r3, #60	; 0x3c
   114f2:	cb03      	ldmia	r3!, {r0, r1}
   114f4:	6010      	str	r0, [r2, #0]
   114f6:	6051      	str	r1, [r2, #4]
}
   114f8:	68f8      	ldr	r0, [r7, #12]
   114fa:	3714      	adds	r7, #20
   114fc:	46bd      	mov	sp, r7
   114fe:	bd90      	pop	{r4, r7, pc}
   11500:	0000e185 	.word	0x0000e185
   11504:	000126c5 	.word	0x000126c5

00011508 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
   11508:	b590      	push	{r4, r7, lr}
   1150a:	b085      	sub	sp, #20
   1150c:	af00      	add	r7, sp, #0
   1150e:	60f8      	str	r0, [r7, #12]
   11510:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
   11512:	68bb      	ldr	r3, [r7, #8]
   11514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   11516:	4618      	mov	r0, r3
   11518:	4b10      	ldr	r3, [pc, #64]	; (1155c <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
   1151a:	4798      	blx	r3
   1151c:	4603      	mov	r3, r0
   1151e:	461a      	mov	r2, r3
   11520:	68bb      	ldr	r3, [r7, #8]
   11522:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	statusInputs=FillInputStatus(value);
   11526:	68b9      	ldr	r1, [r7, #8]
   11528:	68bb      	ldr	r3, [r7, #8]
   1152a:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
   1152e:	68bc      	ldr	r4, [r7, #8]
   11530:	463b      	mov	r3, r7
   11532:	4618      	mov	r0, r3
   11534:	4b0a      	ldr	r3, [pc, #40]	; (11560 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
   11536:	4798      	blx	r3
   11538:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1153c:	463a      	mov	r2, r7
   1153e:	6810      	ldr	r0, [r2, #0]
   11540:	6018      	str	r0, [r3, #0]
   11542:	8892      	ldrh	r2, [r2, #4]
   11544:	809a      	strh	r2, [r3, #4]
	return statusInputs;
   11546:	68fa      	ldr	r2, [r7, #12]
   11548:	68bb      	ldr	r3, [r7, #8]
   1154a:	3344      	adds	r3, #68	; 0x44
   1154c:	6818      	ldr	r0, [r3, #0]
   1154e:	6010      	str	r0, [r2, #0]
   11550:	889b      	ldrh	r3, [r3, #4]
   11552:	8093      	strh	r3, [r2, #4]
}
   11554:	68f8      	ldr	r0, [r7, #12]
   11556:	3714      	adds	r7, #20
   11558:	46bd      	mov	sp, r7
   1155a:	bd90      	pop	{r4, r7, pc}
   1155c:	0000e185 	.word	0x0000e185
   11560:	00012671 	.word	0x00012671

00011564 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
   11564:	b580      	push	{r7, lr}
   11566:	b082      	sub	sp, #8
   11568:	af00      	add	r7, sp, #0
   1156a:	6078      	str	r0, [r7, #4]
   1156c:	460b      	mov	r3, r1
   1156e:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   11570:	687b      	ldr	r3, [r7, #4]
   11572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   11574:	4618      	mov	r0, r3
   11576:	4b19      	ldr	r3, [pc, #100]	; (115dc <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
   11578:	4798      	blx	r3
   1157a:	4603      	mov	r3, r0
   1157c:	461a      	mov	r2, r3
   1157e:	687b      	ldr	r3, [r7, #4]
   11580:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x01:value&0xfe;
   11584:	78fb      	ldrb	r3, [r7, #3]
   11586:	2b00      	cmp	r3, #0
   11588:	d006      	beq.n	11598 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
   1158a:	687b      	ldr	r3, [r7, #4]
   1158c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   11590:	f043 0301 	orr.w	r3, r3, #1
   11594:	b2db      	uxtb	r3, r3
   11596:	e005      	b.n	115a4 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
   11598:	687b      	ldr	r3, [r7, #4]
   1159a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   1159e:	f023 0301 	bic.w	r3, r3, #1
   115a2:	b2db      	uxtb	r3, r3
   115a4:	687a      	ldr	r2, [r7, #4]
   115a6:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	controlOutputs.niAlcFvMotorEnable=b;
   115aa:	687b      	ldr	r3, [r7, #4]
   115ac:	78fa      	ldrb	r2, [r7, #3]
   115ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	value=expanders[1]->WriteGPIORegister(value);
   115b2:	687b      	ldr	r3, [r7, #4]
   115b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   115b6:	687b      	ldr	r3, [r7, #4]
   115b8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   115bc:	4619      	mov	r1, r3
   115be:	4610      	mov	r0, r2
   115c0:	4b07      	ldr	r3, [pc, #28]	; (115e0 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
   115c2:	4798      	blx	r3
   115c4:	4603      	mov	r3, r0
   115c6:	461a      	mov	r2, r3
   115c8:	687b      	ldr	r3, [r7, #4]
   115ca:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   115ce:	687b      	ldr	r3, [r7, #4]
   115d0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   115d4:	4618      	mov	r0, r3
   115d6:	3708      	adds	r7, #8
   115d8:	46bd      	mov	sp, r7
   115da:	bd80      	pop	{r7, pc}
   115dc:	0000e185 	.word	0x0000e185
   115e0:	0000e209 	.word	0x0000e209

000115e4 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
   115e4:	b580      	push	{r7, lr}
   115e6:	b082      	sub	sp, #8
   115e8:	af00      	add	r7, sp, #0
   115ea:	6078      	str	r0, [r7, #4]
   115ec:	460b      	mov	r3, r1
   115ee:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   115f0:	687b      	ldr	r3, [r7, #4]
   115f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   115f4:	4618      	mov	r0, r3
   115f6:	4b17      	ldr	r3, [pc, #92]	; (11654 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
   115f8:	4798      	blx	r3
   115fa:	4603      	mov	r3, r0
   115fc:	461a      	mov	r2, r3
   115fe:	687b      	ldr	r3, [r7, #4]
   11600:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x20:value&0xdf;
   11604:	78fb      	ldrb	r3, [r7, #3]
   11606:	2b00      	cmp	r3, #0
   11608:	d006      	beq.n	11618 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
   1160a:	687b      	ldr	r3, [r7, #4]
   1160c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   11610:	f043 0320 	orr.w	r3, r3, #32
   11614:	b2db      	uxtb	r3, r3
   11616:	e005      	b.n	11624 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
   11618:	687b      	ldr	r3, [r7, #4]
   1161a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   1161e:	f023 0320 	bic.w	r3, r3, #32
   11622:	b2db      	uxtb	r3, r3
   11624:	687a      	ldr	r2, [r7, #4]
   11626:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   1162a:	687b      	ldr	r3, [r7, #4]
   1162c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1162e:	687b      	ldr	r3, [r7, #4]
   11630:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   11634:	4619      	mov	r1, r3
   11636:	4610      	mov	r0, r2
   11638:	4b07      	ldr	r3, [pc, #28]	; (11658 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
   1163a:	4798      	blx	r3
   1163c:	4603      	mov	r3, r0
   1163e:	461a      	mov	r2, r3
   11640:	687b      	ldr	r3, [r7, #4]
   11642:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   11646:	687b      	ldr	r3, [r7, #4]
   11648:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   1164c:	4618      	mov	r0, r3
   1164e:	3708      	adds	r7, #8
   11650:	46bd      	mov	sp, r7
   11652:	bd80      	pop	{r7, pc}
   11654:	0000e185 	.word	0x0000e185
   11658:	0000e209 	.word	0x0000e209

0001165c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
   1165c:	b580      	push	{r7, lr}
   1165e:	b082      	sub	sp, #8
   11660:	af00      	add	r7, sp, #0
   11662:	6078      	str	r0, [r7, #4]
   11664:	460b      	mov	r3, r1
   11666:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   11668:	687b      	ldr	r3, [r7, #4]
   1166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1166c:	4618      	mov	r0, r3
   1166e:	4b17      	ldr	r3, [pc, #92]	; (116cc <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
   11670:	4798      	blx	r3
   11672:	4603      	mov	r3, r0
   11674:	461a      	mov	r2, r3
   11676:	687b      	ldr	r3, [r7, #4]
   11678:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x40:value&0xbf;
   1167c:	78fb      	ldrb	r3, [r7, #3]
   1167e:	2b00      	cmp	r3, #0
   11680:	d006      	beq.n	11690 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
   11682:	687b      	ldr	r3, [r7, #4]
   11684:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   11688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1168c:	b2db      	uxtb	r3, r3
   1168e:	e005      	b.n	1169c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
   11690:	687b      	ldr	r3, [r7, #4]
   11692:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   11696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1169a:	b2db      	uxtb	r3, r3
   1169c:	687a      	ldr	r2, [r7, #4]
   1169e:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   116a2:	687b      	ldr	r3, [r7, #4]
   116a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   116a6:	687b      	ldr	r3, [r7, #4]
   116a8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   116ac:	4619      	mov	r1, r3
   116ae:	4610      	mov	r0, r2
   116b0:	4b07      	ldr	r3, [pc, #28]	; (116d0 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
   116b2:	4798      	blx	r3
   116b4:	4603      	mov	r3, r0
   116b6:	461a      	mov	r2, r3
   116b8:	687b      	ldr	r3, [r7, #4]
   116ba:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   116be:	687b      	ldr	r3, [r7, #4]
   116c0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   116c4:	4618      	mov	r0, r3
   116c6:	3708      	adds	r7, #8
   116c8:	46bd      	mov	sp, r7
   116ca:	bd80      	pop	{r7, pc}
   116cc:	0000e185 	.word	0x0000e185
   116d0:	0000e209 	.word	0x0000e209

000116d4 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
   116d4:	b580      	push	{r7, lr}
   116d6:	b082      	sub	sp, #8
   116d8:	af00      	add	r7, sp, #0
   116da:	6078      	str	r0, [r7, #4]
   116dc:	460b      	mov	r3, r1
   116de:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   116e0:	687b      	ldr	r3, [r7, #4]
   116e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   116e4:	4618      	mov	r0, r3
   116e6:	4b17      	ldr	r3, [pc, #92]	; (11744 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
   116e8:	4798      	blx	r3
   116ea:	4603      	mov	r3, r0
   116ec:	461a      	mov	r2, r3
   116ee:	687b      	ldr	r3, [r7, #4]
   116f0:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x04:value&0xfb;
   116f4:	78fb      	ldrb	r3, [r7, #3]
   116f6:	2b00      	cmp	r3, #0
   116f8:	d006      	beq.n	11708 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
   116fa:	687b      	ldr	r3, [r7, #4]
   116fc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   11700:	f043 0304 	orr.w	r3, r3, #4
   11704:	b2db      	uxtb	r3, r3
   11706:	e005      	b.n	11714 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
   11708:	687b      	ldr	r3, [r7, #4]
   1170a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   1170e:	f023 0304 	bic.w	r3, r3, #4
   11712:	b2db      	uxtb	r3, r3
   11714:	687a      	ldr	r2, [r7, #4]
   11716:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   1171a:	687b      	ldr	r3, [r7, #4]
   1171c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1171e:	687b      	ldr	r3, [r7, #4]
   11720:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   11724:	4619      	mov	r1, r3
   11726:	4610      	mov	r0, r2
   11728:	4b07      	ldr	r3, [pc, #28]	; (11748 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
   1172a:	4798      	blx	r3
   1172c:	4603      	mov	r3, r0
   1172e:	461a      	mov	r2, r3
   11730:	687b      	ldr	r3, [r7, #4]
   11732:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   11736:	687b      	ldr	r3, [r7, #4]
   11738:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   1173c:	4618      	mov	r0, r3
   1173e:	3708      	adds	r7, #8
   11740:	46bd      	mov	sp, r7
   11742:	bd80      	pop	{r7, pc}
   11744:	0000e185 	.word	0x0000e185
   11748:	0000e209 	.word	0x0000e209

0001174c <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
   1174c:	b580      	push	{r7, lr}
   1174e:	b082      	sub	sp, #8
   11750:	af00      	add	r7, sp, #0
   11752:	6078      	str	r0, [r7, #4]
   11754:	460b      	mov	r3, r1
   11756:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
   11758:	687b      	ldr	r3, [r7, #4]
   1175a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1175c:	78fa      	ldrb	r2, [r7, #3]
   1175e:	4611      	mov	r1, r2
   11760:	4618      	mov	r0, r3
   11762:	4b07      	ldr	r3, [pc, #28]	; (11780 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
   11764:	4798      	blx	r3
   11766:	4603      	mov	r3, r0
   11768:	461a      	mov	r2, r3
   1176a:	687b      	ldr	r3, [r7, #4]
   1176c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
   11770:	687b      	ldr	r3, [r7, #4]
   11772:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
}
   11776:	4618      	mov	r0, r3
   11778:	3708      	adds	r7, #8
   1177a:	46bd      	mov	sp, r7
   1177c:	bd80      	pop	{r7, pc}
   1177e:	bf00      	nop
   11780:	0000e209 	.word	0x0000e209

00011784 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
   11784:	b580      	push	{r7, lr}
   11786:	b082      	sub	sp, #8
   11788:	af00      	add	r7, sp, #0
   1178a:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
   1178c:	687b      	ldr	r3, [r7, #4]
   1178e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
   11792:	687b      	ldr	r3, [r7, #4]
   11794:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
   11798:	687b      	ldr	r3, [r7, #4]
   1179a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1179c:	4618      	mov	r0, r3
   1179e:	4b18      	ldr	r3, [pc, #96]	; (11800 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
   117a0:	4798      	blx	r3
   117a2:	4603      	mov	r3, r0
   117a4:	461a      	mov	r2, r3
   117a6:	687b      	ldr	r3, [r7, #4]
   117a8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
   117ac:	687b      	ldr	r3, [r7, #4]
   117ae:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   117b2:	2bda      	cmp	r3, #218	; 0xda
   117b4:	dd04      	ble.n	117c0 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
   117b6:	687b      	ldr	r3, [r7, #4]
   117b8:	2203      	movs	r2, #3
   117ba:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   117be:	e017      	b.n	117f0 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
   117c0:	687b      	ldr	r3, [r7, #4]
   117c2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   117c6:	2b6d      	cmp	r3, #109	; 0x6d
   117c8:	dd04      	ble.n	117d4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
   117ca:	687b      	ldr	r3, [r7, #4]
   117cc:	2202      	movs	r2, #2
   117ce:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   117d2:	e00d      	b.n	117f0 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
   117d4:	687b      	ldr	r3, [r7, #4]
   117d6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   117da:	2b36      	cmp	r3, #54	; 0x36
   117dc:	dd04      	ble.n	117e8 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
   117de:	687b      	ldr	r3, [r7, #4]
   117e0:	2201      	movs	r2, #1
   117e2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   117e6:	e003      	b.n	117f0 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
   117e8:	687b      	ldr	r3, [r7, #4]
   117ea:	2200      	movs	r2, #0
   117ec:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	}
	return actualPosition;
   117f0:	687b      	ldr	r3, [r7, #4]
   117f2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
}
   117f6:	4618      	mov	r0, r3
   117f8:	3708      	adds	r7, #8
   117fa:	46bd      	mov	sp, r7
   117fc:	bd80      	pop	{r7, pc}
   117fe:	bf00      	nop
   11800:	0000e185 	.word	0x0000e185

00011804 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   11804:	b590      	push	{r4, r7, lr}
   11806:	b083      	sub	sp, #12
   11808:	af00      	add	r7, sp, #0
   1180a:	6078      	str	r0, [r7, #4]
   1180c:	4c05      	ldr	r4, [pc, #20]	; (11824 <__tcf_0+0x20>)
   1180e:	4b06      	ldr	r3, [pc, #24]	; (11828 <__tcf_0+0x24>)
   11810:	429c      	cmp	r4, r3
   11812:	d004      	beq.n	1181e <__tcf_0+0x1a>
   11814:	3c1c      	subs	r4, #28
   11816:	4620      	mov	r0, r4
   11818:	4b04      	ldr	r3, [pc, #16]	; (1182c <__tcf_0+0x28>)
   1181a:	4798      	blx	r3
   1181c:	e7f7      	b.n	1180e <__tcf_0+0xa>
   1181e:	370c      	adds	r7, #12
   11820:	46bd      	mov	sp, r7
   11822:	bd90      	pop	{r4, r7, pc}
   11824:	20002584 	.word	0x20002584
   11828:	200024a4 	.word	0x200024a4
   1182c:	0000e08d 	.word	0x0000e08d

00011830 <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
   11830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11834:	b082      	sub	sp, #8
   11836:	af00      	add	r7, sp, #0
   11838:	6078      	str	r0, [r7, #4]
   1183a:	6039      	str	r1, [r7, #0]
   1183c:	687b      	ldr	r3, [r7, #4]
   1183e:	2b01      	cmp	r3, #1
   11840:	d177      	bne.n	11932 <_Z41__static_initialization_and_destruction_0ii+0x102>
   11842:	683b      	ldr	r3, [r7, #0]
   11844:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11848:	4293      	cmp	r3, r2
   1184a:	d172      	bne.n	11932 <_Z41__static_initialization_and_destruction_0ii+0x102>
   1184c:	493b      	ldr	r1, [pc, #236]	; (1193c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   1184e:	483c      	ldr	r0, [pc, #240]	; (11940 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   11850:	4b3c      	ldr	r3, [pc, #240]	; (11944 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   11852:	4798      	blx	r3
   11854:	4a3c      	ldr	r2, [pc, #240]	; (11948 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   11856:	493d      	ldr	r1, [pc, #244]	; (1194c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   11858:	4839      	ldr	r0, [pc, #228]	; (11940 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   1185a:	4b3d      	ldr	r3, [pc, #244]	; (11950 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   1185c:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1185e:	493d      	ldr	r1, [pc, #244]	; (11954 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   11860:	483d      	ldr	r0, [pc, #244]	; (11958 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   11862:	4b3e      	ldr	r3, [pc, #248]	; (1195c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   11864:	4798      	blx	r3
   11866:	4a38      	ldr	r2, [pc, #224]	; (11948 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   11868:	493d      	ldr	r1, [pc, #244]	; (11960 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   1186a:	483b      	ldr	r0, [pc, #236]	; (11958 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   1186c:	4b38      	ldr	r3, [pc, #224]	; (11950 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   1186e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   11870:	493c      	ldr	r1, [pc, #240]	; (11964 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   11872:	483d      	ldr	r0, [pc, #244]	; (11968 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   11874:	4b39      	ldr	r3, [pc, #228]	; (1195c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   11876:	4798      	blx	r3
   11878:	4a33      	ldr	r2, [pc, #204]	; (11948 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1187a:	4939      	ldr	r1, [pc, #228]	; (11960 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   1187c:	483a      	ldr	r0, [pc, #232]	; (11968 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   1187e:	4b34      	ldr	r3, [pc, #208]	; (11950 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   11880:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   11882:	493a      	ldr	r1, [pc, #232]	; (1196c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   11884:	483a      	ldr	r0, [pc, #232]	; (11970 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   11886:	4b35      	ldr	r3, [pc, #212]	; (1195c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   11888:	4798      	blx	r3
   1188a:	4a2f      	ldr	r2, [pc, #188]	; (11948 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1188c:	4934      	ldr	r1, [pc, #208]	; (11960 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   1188e:	4838      	ldr	r0, [pc, #224]	; (11970 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   11890:	4b2f      	ldr	r3, [pc, #188]	; (11950 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   11892:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   11894:	4937      	ldr	r1, [pc, #220]	; (11974 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   11896:	4838      	ldr	r0, [pc, #224]	; (11978 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   11898:	4b30      	ldr	r3, [pc, #192]	; (1195c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   1189a:	4798      	blx	r3
   1189c:	4a2a      	ldr	r2, [pc, #168]	; (11948 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1189e:	4930      	ldr	r1, [pc, #192]	; (11960 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   118a0:	4835      	ldr	r0, [pc, #212]	; (11978 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   118a2:	4b2b      	ldr	r3, [pc, #172]	; (11950 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   118a4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   118a6:	4935      	ldr	r1, [pc, #212]	; (1197c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   118a8:	4835      	ldr	r0, [pc, #212]	; (11980 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   118aa:	4b2c      	ldr	r3, [pc, #176]	; (1195c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   118ac:	4798      	blx	r3
   118ae:	4a26      	ldr	r2, [pc, #152]	; (11948 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   118b0:	492b      	ldr	r1, [pc, #172]	; (11960 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   118b2:	4833      	ldr	r0, [pc, #204]	; (11980 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   118b4:	4b26      	ldr	r3, [pc, #152]	; (11950 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   118b6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   118b8:	4932      	ldr	r1, [pc, #200]	; (11984 <_Z41__static_initialization_and_destruction_0ii+0x154>)
   118ba:	4833      	ldr	r0, [pc, #204]	; (11988 <_Z41__static_initialization_and_destruction_0ii+0x158>)
   118bc:	4b27      	ldr	r3, [pc, #156]	; (1195c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   118be:	4798      	blx	r3
   118c0:	4a21      	ldr	r2, [pc, #132]	; (11948 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   118c2:	4927      	ldr	r1, [pc, #156]	; (11960 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   118c4:	4830      	ldr	r0, [pc, #192]	; (11988 <_Z41__static_initialization_and_destruction_0ii+0x158>)
   118c6:	4b22      	ldr	r3, [pc, #136]	; (11950 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   118c8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   118ca:	4930      	ldr	r1, [pc, #192]	; (1198c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   118cc:	4830      	ldr	r0, [pc, #192]	; (11990 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   118ce:	4b23      	ldr	r3, [pc, #140]	; (1195c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   118d0:	4798      	blx	r3
   118d2:	4a1d      	ldr	r2, [pc, #116]	; (11948 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   118d4:	4922      	ldr	r1, [pc, #136]	; (11960 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   118d6:	482e      	ldr	r0, [pc, #184]	; (11990 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   118d8:	4b1d      	ldr	r3, [pc, #116]	; (11950 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   118da:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   118dc:	492d      	ldr	r1, [pc, #180]	; (11994 <_Z41__static_initialization_and_destruction_0ii+0x164>)
   118de:	482e      	ldr	r0, [pc, #184]	; (11998 <_Z41__static_initialization_and_destruction_0ii+0x168>)
   118e0:	4b1e      	ldr	r3, [pc, #120]	; (1195c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   118e2:	4798      	blx	r3
   118e4:	4a18      	ldr	r2, [pc, #96]	; (11948 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   118e6:	491e      	ldr	r1, [pc, #120]	; (11960 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   118e8:	482b      	ldr	r0, [pc, #172]	; (11998 <_Z41__static_initialization_and_destruction_0ii+0x168>)
   118ea:	4b19      	ldr	r3, [pc, #100]	; (11950 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   118ec:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   118ee:	492b      	ldr	r1, [pc, #172]	; (1199c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
   118f0:	482b      	ldr	r0, [pc, #172]	; (119a0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
   118f2:	4b14      	ldr	r3, [pc, #80]	; (11944 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   118f4:	4798      	blx	r3
   118f6:	4a14      	ldr	r2, [pc, #80]	; (11948 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   118f8:	4914      	ldr	r1, [pc, #80]	; (1194c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   118fa:	4829      	ldr	r0, [pc, #164]	; (119a0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
   118fc:	4b14      	ldr	r3, [pc, #80]	; (11950 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   118fe:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   11900:	4b28      	ldr	r3, [pc, #160]	; (119a4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
   11902:	2401      	movs	r4, #1
   11904:	461e      	mov	r6, r3
   11906:	2c00      	cmp	r4, #0
   11908:	db0e      	blt.n	11928 <_Z41__static_initialization_and_destruction_0ii+0xf8>
   1190a:	4633      	mov	r3, r6
   1190c:	2503      	movs	r5, #3
   1190e:	4698      	mov	r8, r3
   11910:	2d00      	cmp	r5, #0
   11912:	db06      	blt.n	11922 <_Z41__static_initialization_and_destruction_0ii+0xf2>
   11914:	4640      	mov	r0, r8
   11916:	4b24      	ldr	r3, [pc, #144]	; (119a8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
   11918:	4798      	blx	r3
   1191a:	f108 081c 	add.w	r8, r8, #28
   1191e:	3d01      	subs	r5, #1
   11920:	e7f6      	b.n	11910 <_Z41__static_initialization_and_destruction_0ii+0xe0>
   11922:	3670      	adds	r6, #112	; 0x70
   11924:	3c01      	subs	r4, #1
   11926:	e7ee      	b.n	11906 <_Z41__static_initialization_and_destruction_0ii+0xd6>
   11928:	4a07      	ldr	r2, [pc, #28]	; (11948 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1192a:	4920      	ldr	r1, [pc, #128]	; (119ac <_Z41__static_initialization_and_destruction_0ii+0x17c>)
   1192c:	2000      	movs	r0, #0
   1192e:	4b08      	ldr	r3, [pc, #32]	; (11950 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   11930:	4798      	blx	r3
}
   11932:	bf00      	nop
   11934:	3708      	adds	r7, #8
   11936:	46bd      	mov	sp, r7
   11938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1193c:	2000a2f0 	.word	0x2000a2f0
   11940:	20002370 	.word	0x20002370
   11944:	0000debd 	.word	0x0000debd
   11948:	20000000 	.word	0x20000000
   1194c:	0000ded9 	.word	0x0000ded9
   11950:	00013cdd 	.word	0x00013cdd
   11954:	2000a1c0 	.word	0x2000a1c0
   11958:	20002388 	.word	0x20002388
   1195c:	0000e575 	.word	0x0000e575
   11960:	0000e5ad 	.word	0x0000e5ad
   11964:	2000a254 	.word	0x2000a254
   11968:	200023a8 	.word	0x200023a8
   1196c:	2000a378 	.word	0x2000a378
   11970:	200023c8 	.word	0x200023c8
   11974:	2000a274 	.word	0x2000a274
   11978:	200023e8 	.word	0x200023e8
   1197c:	2000a338 	.word	0x2000a338
   11980:	20002408 	.word	0x20002408
   11984:	2000a358 	.word	0x2000a358
   11988:	20002428 	.word	0x20002428
   1198c:	2000a230 	.word	0x2000a230
   11990:	20002448 	.word	0x20002448
   11994:	2000a2d0 	.word	0x2000a2d0
   11998:	20002468 	.word	0x20002468
   1199c:	2000a294 	.word	0x2000a294
   119a0:	2000248c 	.word	0x2000248c
   119a4:	200024a4 	.word	0x200024a4
   119a8:	0000e079 	.word	0x0000e079
   119ac:	00011805 	.word	0x00011805

000119b0 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   119b0:	b580      	push	{r7, lr}
   119b2:	af00      	add	r7, sp, #0
   119b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   119b8:	2001      	movs	r0, #1
   119ba:	4b01      	ldr	r3, [pc, #4]	; (119c0 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   119bc:	4798      	blx	r3
   119be:	bd80      	pop	{r7, pc}
   119c0:	00011831 	.word	0x00011831

000119c4 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
   119c4:	b480      	push	{r7}
   119c6:	b083      	sub	sp, #12
   119c8:	af00      	add	r7, sp, #0
   119ca:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
   119cc:	4a07      	ldr	r2, [pc, #28]	; (119ec <_ZN18SingleHeater_ClassC1Ev+0x28>)
   119ce:	687b      	ldr	r3, [r7, #4]
   119d0:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
   119d2:	687b      	ldr	r3, [r7, #4]
   119d4:	4a06      	ldr	r2, [pc, #24]	; (119f0 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
   119d6:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
   119d8:	687b      	ldr	r3, [r7, #4]
   119da:	2200      	movs	r2, #0
   119dc:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
   119de:	687b      	ldr	r3, [r7, #4]
   119e0:	4618      	mov	r0, r3
   119e2:	370c      	adds	r7, #12
   119e4:	46bd      	mov	sp, r7
   119e6:	bc80      	pop	{r7}
   119e8:	4770      	bx	lr
   119ea:	bf00      	nop
   119ec:	2000259c 	.word	0x2000259c
   119f0:	20002584 	.word	0x20002584

000119f4 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   119f4:	b480      	push	{r7}
   119f6:	b083      	sub	sp, #12
   119f8:	af00      	add	r7, sp, #0
   119fa:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   119fc:	687b      	ldr	r3, [r7, #4]
   119fe:	4618      	mov	r0, r3
   11a00:	370c      	adds	r7, #12
   11a02:	46bd      	mov	sp, r7
   11a04:	bc80      	pop	{r7}
   11a06:	4770      	bx	lr

00011a08 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class>:
			asm("nop");
		}
		isOK=i2c->isOK;
		return isOK;
}
bool SingleHeater_Class::Init(uint8_t id,MCP23008_Class *heater_expanders){
   11a08:	b580      	push	{r7, lr}
   11a0a:	b084      	sub	sp, #16
   11a0c:	af00      	add	r7, sp, #0
   11a0e:	60f8      	str	r0, [r7, #12]
   11a10:	460b      	mov	r3, r1
   11a12:	607a      	str	r2, [r7, #4]
   11a14:	72fb      	strb	r3, [r7, #11]
	heater_id=id;
   11a16:	68fb      	ldr	r3, [r7, #12]
   11a18:	7afa      	ldrb	r2, [r7, #11]
   11a1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (i2c->initiated)
   11a1e:	68fb      	ldr	r3, [r7, #12]
   11a20:	699b      	ldr	r3, [r3, #24]
   11a22:	7a1b      	ldrb	r3, [r3, #8]
   11a24:	b2db      	uxtb	r3, r3
   11a26:	2b00      	cmp	r3, #0
   11a28:	d104      	bne.n	11a34 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x2c>
	{
		
	} 
	else{
		i2c->Init();
   11a2a:	68fb      	ldr	r3, [r7, #12]
   11a2c:	699b      	ldr	r3, [r3, #24]
   11a2e:	4618      	mov	r0, r3
   11a30:	4b15      	ldr	r3, [pc, #84]	; (11a88 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x80>)
   11a32:	4798      	blx	r3
	}
	
	if (i2c->isOK)
   11a34:	68fb      	ldr	r3, [r7, #12]
   11a36:	699b      	ldr	r3, [r3, #24]
   11a38:	7a5b      	ldrb	r3, [r3, #9]
   11a3a:	b2db      	uxtb	r3, r3
   11a3c:	2b00      	cmp	r3, #0
   11a3e:	d015      	beq.n	11a6c <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x64>
	{
		
		//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
		InitExpanderArray(heater_expanders);
   11a40:	6879      	ldr	r1, [r7, #4]
   11a42:	68f8      	ldr	r0, [r7, #12]
   11a44:	4b11      	ldr	r3, [pc, #68]	; (11a8c <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x84>)
   11a46:	4798      	blx	r3
		expanders[0]->SetPortInput();
   11a48:	68fb      	ldr	r3, [r7, #12]
   11a4a:	68db      	ldr	r3, [r3, #12]
   11a4c:	4618      	mov	r0, r3
   11a4e:	4b10      	ldr	r3, [pc, #64]	; (11a90 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x88>)
   11a50:	4798      	blx	r3
		expanders[1]->SetPortOutput();
   11a52:	68fb      	ldr	r3, [r7, #12]
   11a54:	691b      	ldr	r3, [r3, #16]
   11a56:	4618      	mov	r0, r3
   11a58:	4b0e      	ldr	r3, [pc, #56]	; (11a94 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x8c>)
   11a5a:	4798      	blx	r3
		isOK=SelfTest();
   11a5c:	68f8      	ldr	r0, [r7, #12]
   11a5e:	4b0e      	ldr	r3, [pc, #56]	; (11a98 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x90>)
   11a60:	4798      	blx	r3
   11a62:	4603      	mov	r3, r0
   11a64:	461a      	mov	r2, r3
   11a66:	68fb      	ldr	r3, [r7, #12]
   11a68:	701a      	strb	r2, [r3, #0]
   11a6a:	e000      	b.n	11a6e <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x66>
	}
	else
	{
		asm("nop");
   11a6c:	bf00      	nop
	}
	isOK=i2c->isOK;
   11a6e:	68fb      	ldr	r3, [r7, #12]
   11a70:	699b      	ldr	r3, [r3, #24]
   11a72:	7a5b      	ldrb	r3, [r3, #9]
   11a74:	b2da      	uxtb	r2, r3
   11a76:	68fb      	ldr	r3, [r7, #12]
   11a78:	701a      	strb	r2, [r3, #0]
	return isOK;
   11a7a:	68fb      	ldr	r3, [r7, #12]
   11a7c:	781b      	ldrb	r3, [r3, #0]
   11a7e:	b2db      	uxtb	r3, r3
}
   11a80:	4618      	mov	r0, r3
   11a82:	3710      	adds	r7, #16
   11a84:	46bd      	mov	sp, r7
   11a86:	bd80      	pop	{r7, pc}
   11a88:	0000deed 	.word	0x0000deed
   11a8c:	00011a9d 	.word	0x00011a9d
   11a90:	0000e245 	.word	0x0000e245
   11a94:	0000e2fd 	.word	0x0000e2fd
   11a98:	00011c85 	.word	0x00011c85

00011a9c <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class>:
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
	}
	
}

uint8_t SingleHeater_Class::InitExpanderArray(MCP23008_Class *heater_expanders){
   11a9c:	b580      	push	{r7, lr}
   11a9e:	b084      	sub	sp, #16
   11aa0:	af00      	add	r7, sp, #0
   11aa2:	6078      	str	r0, [r7, #4]
   11aa4:	6039      	str	r1, [r7, #0]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   11aa6:	2300      	movs	r3, #0
   11aa8:	60fb      	str	r3, [r7, #12]
   11aaa:	68fb      	ldr	r3, [r7, #12]
   11aac:	2b01      	cmp	r3, #1
   11aae:	dc34      	bgt.n	11b1a <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0x7e>
	{
		expanders[i]=&heater_expanders[2*heater_id+i];
   11ab0:	687b      	ldr	r3, [r7, #4]
   11ab2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   11ab6:	005a      	lsls	r2, r3, #1
   11ab8:	68fb      	ldr	r3, [r7, #12]
   11aba:	4413      	add	r3, r2
   11abc:	461a      	mov	r2, r3
   11abe:	4613      	mov	r3, r2
   11ac0:	00db      	lsls	r3, r3, #3
   11ac2:	1a9b      	subs	r3, r3, r2
   11ac4:	009b      	lsls	r3, r3, #2
   11ac6:	461a      	mov	r2, r3
   11ac8:	683b      	ldr	r3, [r7, #0]
   11aca:	441a      	add	r2, r3
   11acc:	6879      	ldr	r1, [r7, #4]
   11ace:	68fb      	ldr	r3, [r7, #12]
   11ad0:	3302      	adds	r3, #2
   11ad2:	009b      	lsls	r3, r3, #2
   11ad4:	440b      	add	r3, r1
   11ad6:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
   11ad8:	687a      	ldr	r2, [r7, #4]
   11ada:	68fb      	ldr	r3, [r7, #12]
   11adc:	3302      	adds	r3, #2
   11ade:	009b      	lsls	r3, r3, #2
   11ae0:	4413      	add	r3, r2
   11ae2:	685a      	ldr	r2, [r3, #4]
   11ae4:	687b      	ldr	r3, [r7, #4]
   11ae6:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
   11ae8:	687b      	ldr	r3, [r7, #4]
   11aea:	6958      	ldr	r0, [r3, #20]
   11aec:	68fb      	ldr	r3, [r7, #12]
   11aee:	b2da      	uxtb	r2, r3
   11af0:	687b      	ldr	r3, [r7, #4]
   11af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   11af6:	005b      	lsls	r3, r3, #1
   11af8:	b2db      	uxtb	r3, r3
   11afa:	4313      	orrs	r3, r2
   11afc:	b2db      	uxtb	r3, r3
   11afe:	f043 0320 	orr.w	r3, r3, #32
   11b02:	b2db      	uxtb	r3, r3
   11b04:	b25b      	sxtb	r3, r3
   11b06:	b2d9      	uxtb	r1, r3
   11b08:	687b      	ldr	r3, [r7, #4]
   11b0a:	699b      	ldr	r3, [r3, #24]
   11b0c:	461a      	mov	r2, r3
   11b0e:	4b05      	ldr	r3, [pc, #20]	; (11b24 <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0x88>)
   11b10:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   11b12:	68fb      	ldr	r3, [r7, #12]
   11b14:	3301      	adds	r3, #1
   11b16:	60fb      	str	r3, [r7, #12]
   11b18:	e7c7      	b.n	11aaa <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0xe>
	}
	
}
   11b1a:	bf00      	nop
   11b1c:	4618      	mov	r0, r3
   11b1e:	3710      	adds	r7, #16
   11b20:	46bd      	mov	sp, r7
   11b22:	bd80      	pop	{r7, pc}
   11b24:	0000e0a1 	.word	0x0000e0a1

00011b28 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
   11b28:	b580      	push	{r7, lr}
   11b2a:	b084      	sub	sp, #16
   11b2c:	af00      	add	r7, sp, #0
   11b2e:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   11b30:	687b      	ldr	r3, [r7, #4]
   11b32:	68db      	ldr	r3, [r3, #12]
   11b34:	4618      	mov	r0, r3
   11b36:	4b16      	ldr	r3, [pc, #88]	; (11b90 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   11b38:	4798      	blx	r3
   11b3a:	4603      	mov	r3, r0
   11b3c:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   11b3e:	7bbb      	ldrb	r3, [r7, #14]
   11b40:	f003 0301 	and.w	r3, r3, #1
   11b44:	2b00      	cmp	r3, #0
   11b46:	bf14      	ite	ne
   11b48:	2301      	movne	r3, #1
   11b4a:	2300      	moveq	r3, #0
   11b4c:	b2da      	uxtb	r2, r3
   11b4e:	687b      	ldr	r3, [r7, #4]
   11b50:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   11b52:	2300      	movs	r3, #0
   11b54:	73fb      	strb	r3, [r7, #15]
   11b56:	7bfb      	ldrb	r3, [r7, #15]
   11b58:	2b03      	cmp	r3, #3
   11b5a:	dc14      	bgt.n	11b86 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   11b5c:	7bfb      	ldrb	r3, [r7, #15]
   11b5e:	7bb9      	ldrb	r1, [r7, #14]
   11b60:	7bfa      	ldrb	r2, [r7, #15]
   11b62:	3201      	adds	r2, #1
   11b64:	fa41 f202 	asr.w	r2, r1, r2
   11b68:	f002 0201 	and.w	r2, r2, #1
   11b6c:	2a00      	cmp	r2, #0
   11b6e:	bf14      	ite	ne
   11b70:	2201      	movne	r2, #1
   11b72:	2200      	moveq	r2, #0
   11b74:	b2d1      	uxtb	r1, r2
   11b76:	687a      	ldr	r2, [r7, #4]
   11b78:	4413      	add	r3, r2
   11b7a:	460a      	mov	r2, r1
   11b7c:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   11b7e:	7bfb      	ldrb	r3, [r7, #15]
   11b80:	3301      	adds	r3, #1
   11b82:	73fb      	strb	r3, [r7, #15]
   11b84:	e7e7      	b.n	11b56 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   11b86:	7bbb      	ldrb	r3, [r7, #14]
}
   11b88:	4618      	mov	r0, r3
   11b8a:	3710      	adds	r7, #16
   11b8c:	46bd      	mov	sp, r7
   11b8e:	bd80      	pop	{r7, pc}
   11b90:	0000e185 	.word	0x0000e185

00011b94 <_ZN18SingleHeater_Class9ReadGPIOsEPh>:
void	SingleHeater_Class::ReadGPIOs(uint8_t *buffer){
   11b94:	b590      	push	{r4, r7, lr}
   11b96:	b085      	sub	sp, #20
   11b98:	af00      	add	r7, sp, #0
   11b9a:	6078      	str	r0, [r7, #4]
   11b9c:	6039      	str	r1, [r7, #0]

	for (uint8_t i = 0; i < 2; i++)
   11b9e:	2300      	movs	r3, #0
   11ba0:	73fb      	strb	r3, [r7, #15]
   11ba2:	7bfb      	ldrb	r3, [r7, #15]
   11ba4:	2b01      	cmp	r3, #1
   11ba6:	dc11      	bgt.n	11bcc <_ZN18SingleHeater_Class9ReadGPIOsEPh+0x38>
	{
		buffer[i]=expanders[i]->ReadGPIORegister();
   11ba8:	7bfb      	ldrb	r3, [r7, #15]
   11baa:	683a      	ldr	r2, [r7, #0]
   11bac:	18d4      	adds	r4, r2, r3
   11bae:	7bfb      	ldrb	r3, [r7, #15]
   11bb0:	687a      	ldr	r2, [r7, #4]
   11bb2:	3302      	adds	r3, #2
   11bb4:	009b      	lsls	r3, r3, #2
   11bb6:	4413      	add	r3, r2
   11bb8:	685b      	ldr	r3, [r3, #4]
   11bba:	4618      	mov	r0, r3
   11bbc:	4b05      	ldr	r3, [pc, #20]	; (11bd4 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0x40>)
   11bbe:	4798      	blx	r3
   11bc0:	4603      	mov	r3, r0
   11bc2:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < 2; i++)
   11bc4:	7bfb      	ldrb	r3, [r7, #15]
   11bc6:	3301      	adds	r3, #1
   11bc8:	73fb      	strb	r3, [r7, #15]
   11bca:	e7ea      	b.n	11ba2 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0xe>
		
	}
	
}
   11bcc:	bf00      	nop
   11bce:	3714      	adds	r7, #20
   11bd0:	46bd      	mov	sp, r7
   11bd2:	bd90      	pop	{r4, r7, pc}
   11bd4:	0000e185 	.word	0x0000e185

00011bd8 <_ZN18SingleHeater_Class11EnableIndexEh>:
	{
		enables[i]=!(r&(0x01<<i));
	}
	return r;
}
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
   11bd8:	b580      	push	{r7, lr}
   11bda:	b082      	sub	sp, #8
   11bdc:	af00      	add	r7, sp, #0
   11bde:	6078      	str	r0, [r7, #4]
   11be0:	460b      	mov	r3, r1
   11be2:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
   11be4:	687b      	ldr	r3, [r7, #4]
   11be6:	691b      	ldr	r3, [r3, #16]
   11be8:	78f9      	ldrb	r1, [r7, #3]
   11bea:	2200      	movs	r2, #0
   11bec:	4618      	mov	r0, r3
   11bee:	4b06      	ldr	r3, [pc, #24]	; (11c08 <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
   11bf0:	4798      	blx	r3
   11bf2:	4603      	mov	r3, r0
   11bf4:	461a      	mov	r2, r3
   11bf6:	687b      	ldr	r3, [r7, #4]
   11bf8:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   11bfa:	687b      	ldr	r3, [r7, #4]
   11bfc:	7adb      	ldrb	r3, [r3, #11]
}
   11bfe:	4618      	mov	r0, r3
   11c00:	3708      	adds	r7, #8
   11c02:	46bd      	mov	sp, r7
   11c04:	bd80      	pop	{r7, pc}
   11c06:	bf00      	nop
   11c08:	0000e43d 	.word	0x0000e43d

00011c0c <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   11c0c:	b580      	push	{r7, lr}
   11c0e:	b082      	sub	sp, #8
   11c10:	af00      	add	r7, sp, #0
   11c12:	6078      	str	r0, [r7, #4]
   11c14:	460b      	mov	r3, r1
   11c16:	70fb      	strb	r3, [r7, #3]
   11c18:	4613      	mov	r3, r2
   11c1a:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   11c1c:	687b      	ldr	r3, [r7, #4]
   11c1e:	6918      	ldr	r0, [r3, #16]
   11c20:	78bb      	ldrb	r3, [r7, #2]
   11c22:	f083 0301 	eor.w	r3, r3, #1
   11c26:	b2da      	uxtb	r2, r3
   11c28:	78fb      	ldrb	r3, [r7, #3]
   11c2a:	4619      	mov	r1, r3
   11c2c:	4b05      	ldr	r3, [pc, #20]	; (11c44 <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
   11c2e:	4798      	blx	r3
   11c30:	4603      	mov	r3, r0
   11c32:	461a      	mov	r2, r3
   11c34:	687b      	ldr	r3, [r7, #4]
   11c36:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   11c38:	687b      	ldr	r3, [r7, #4]
   11c3a:	7adb      	ldrb	r3, [r3, #11]
}
   11c3c:	4618      	mov	r0, r3
   11c3e:	3708      	adds	r7, #8
   11c40:	46bd      	mov	sp, r7
   11c42:	bd80      	pop	{r7, pc}
   11c44:	0000e43d 	.word	0x0000e43d

00011c48 <_ZN18SingleHeater_Class12DisableIndexEh>:
	{
		DisableIndex(i);
	}
}

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
   11c48:	b580      	push	{r7, lr}
   11c4a:	b082      	sub	sp, #8
   11c4c:	af00      	add	r7, sp, #0
   11c4e:	6078      	str	r0, [r7, #4]
   11c50:	460b      	mov	r3, r1
   11c52:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
   11c54:	687b      	ldr	r3, [r7, #4]
   11c56:	691b      	ldr	r3, [r3, #16]
   11c58:	78f9      	ldrb	r1, [r7, #3]
   11c5a:	2201      	movs	r2, #1
   11c5c:	4618      	mov	r0, r3
   11c5e:	4b08      	ldr	r3, [pc, #32]	; (11c80 <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
   11c60:	4798      	blx	r3
   11c62:	4603      	mov	r3, r0
   11c64:	2b00      	cmp	r3, #0
   11c66:	d001      	beq.n	11c6c <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
   11c68:	2200      	movs	r2, #0
   11c6a:	e000      	b.n	11c6e <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
   11c6c:	2201      	movs	r2, #1
   11c6e:	687b      	ldr	r3, [r7, #4]
   11c70:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   11c72:	687b      	ldr	r3, [r7, #4]
   11c74:	7adb      	ldrb	r3, [r3, #11]
}
   11c76:	4618      	mov	r0, r3
   11c78:	3708      	adds	r7, #8
   11c7a:	46bd      	mov	sp, r7
   11c7c:	bd80      	pop	{r7, pc}
   11c7e:	bf00      	nop
   11c80:	0000e43d 	.word	0x0000e43d

00011c84 <_ZN18SingleHeater_Class8SelfTestEv>:
	}
	return powerLevel;
}


bool SingleHeater_Class::SelfTest(void){
   11c84:	b580      	push	{r7, lr}
   11c86:	b084      	sub	sp, #16
   11c88:	af00      	add	r7, sp, #0
   11c8a:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
   11c8c:	2300      	movs	r3, #0
   11c8e:	73bb      	strb	r3, [r7, #14]
   11c90:	7bbb      	ldrb	r3, [r7, #14]
   11c92:	2b03      	cmp	r3, #3
   11c94:	dc1f      	bgt.n	11cd6 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
		EnableIndex(i);
   11c96:	7bbb      	ldrb	r3, [r7, #14]
   11c98:	4619      	mov	r1, r3
   11c9a:	6878      	ldr	r0, [r7, #4]
   11c9c:	4b10      	ldr	r3, [pc, #64]	; (11ce0 <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
   11c9e:	4798      	blx	r3
		delay_ms(100);
   11ca0:	2064      	movs	r0, #100	; 0x64
   11ca2:	4b10      	ldr	r3, [pc, #64]	; (11ce4 <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
   11ca4:	4798      	blx	r3
		DisableIndex(i);
   11ca6:	7bbb      	ldrb	r3, [r7, #14]
   11ca8:	4619      	mov	r1, r3
   11caa:	6878      	ldr	r0, [r7, #4]
   11cac:	4b0e      	ldr	r3, [pc, #56]	; (11ce8 <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
   11cae:	4798      	blx	r3
		ReadStatus();
   11cb0:	6878      	ldr	r0, [r7, #4]
   11cb2:	4b0e      	ldr	r3, [pc, #56]	; (11cec <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
   11cb4:	4798      	blx	r3
		if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
   11cb6:	7bbb      	ldrb	r3, [r7, #14]
   11cb8:	687a      	ldr	r2, [r7, #4]
   11cba:	4413      	add	r3, r2
   11cbc:	78db      	ldrb	r3, [r3, #3]
   11cbe:	2b00      	cmp	r3, #0
   11cc0:	d002      	beq.n	11cc8 <_ZN18SingleHeater_Class8SelfTestEv+0x44>
		{
			result=true;
   11cc2:	2301      	movs	r3, #1
   11cc4:	73fb      	strb	r3, [r7, #15]
   11cc6:	e002      	b.n	11cce <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
		} 
		else
		{
			result=false;
   11cc8:	2300      	movs	r3, #0
   11cca:	73fb      	strb	r3, [r7, #15]
			break;
   11ccc:	e003      	b.n	11cd6 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
   11cce:	7bbb      	ldrb	r3, [r7, #14]
   11cd0:	3301      	adds	r3, #1
   11cd2:	73bb      	strb	r3, [r7, #14]
   11cd4:	e7dc      	b.n	11c90 <_ZN18SingleHeater_Class8SelfTestEv+0xc>
		}
			
			
	}
	
	return result;
   11cd6:	7bfb      	ldrb	r3, [r7, #15]
}
   11cd8:	4618      	mov	r0, r3
   11cda:	3710      	adds	r7, #16
   11cdc:	46bd      	mov	sp, r7
   11cde:	bd80      	pop	{r7, pc}
   11ce0:	00011bd9 	.word	0x00011bd9
   11ce4:	00002bb5 	.word	0x00002bb5
   11ce8:	00011c49 	.word	0x00011c49
   11cec:	00011b29 	.word	0x00011b29

00011cf0 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   11cf0:	b590      	push	{r4, r7, lr}
   11cf2:	b083      	sub	sp, #12
   11cf4:	af00      	add	r7, sp, #0
   11cf6:	6078      	str	r0, [r7, #4]
   11cf8:	4c05      	ldr	r4, [pc, #20]	; (11d10 <__tcf_0+0x20>)
   11cfa:	4b06      	ldr	r3, [pc, #24]	; (11d14 <__tcf_0+0x24>)
   11cfc:	429c      	cmp	r4, r3
   11cfe:	d004      	beq.n	11d0a <__tcf_0+0x1a>
   11d00:	3c1c      	subs	r4, #28
   11d02:	4620      	mov	r0, r4
   11d04:	4b04      	ldr	r3, [pc, #16]	; (11d18 <__tcf_0+0x28>)
   11d06:	4798      	blx	r3
   11d08:	e7f7      	b.n	11cfa <__tcf_0+0xa>
   11d0a:	370c      	adds	r7, #12
   11d0c:	46bd      	mov	sp, r7
   11d0e:	bd90      	pop	{r4, r7, pc}
   11d10:	200025d8 	.word	0x200025d8
   11d14:	200025a0 	.word	0x200025a0
   11d18:	0000e08d 	.word	0x0000e08d

00011d1c <_Z41__static_initialization_and_destruction_0ii>:

   11d1c:	b5b0      	push	{r4, r5, r7, lr}
   11d1e:	b082      	sub	sp, #8
   11d20:	af00      	add	r7, sp, #0
   11d22:	6078      	str	r0, [r7, #4]
   11d24:	6039      	str	r1, [r7, #0]
   11d26:	687b      	ldr	r3, [r7, #4]
   11d28:	2b01      	cmp	r3, #1
   11d2a:	d125      	bne.n	11d78 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   11d2c:	683b      	ldr	r3, [r7, #0]
   11d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11d32:	4293      	cmp	r3, r2
   11d34:	d120      	bne.n	11d78 <_Z41__static_initialization_and_destruction_0ii+0x5c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   11d36:	4912      	ldr	r1, [pc, #72]	; (11d80 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   11d38:	4812      	ldr	r0, [pc, #72]	; (11d84 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   11d3a:	4b13      	ldr	r3, [pc, #76]	; (11d88 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   11d3c:	4798      	blx	r3
   11d3e:	4a13      	ldr	r2, [pc, #76]	; (11d8c <_Z41__static_initialization_and_destruction_0ii+0x70>)
   11d40:	4913      	ldr	r1, [pc, #76]	; (11d90 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   11d42:	4810      	ldr	r0, [pc, #64]	; (11d84 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   11d44:	4b13      	ldr	r3, [pc, #76]	; (11d94 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   11d46:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   11d48:	4b13      	ldr	r3, [pc, #76]	; (11d98 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   11d4a:	2401      	movs	r4, #1
   11d4c:	461d      	mov	r5, r3
   11d4e:	2c00      	cmp	r4, #0
   11d50:	db05      	blt.n	11d5e <_Z41__static_initialization_and_destruction_0ii+0x42>
   11d52:	4628      	mov	r0, r5
   11d54:	4b11      	ldr	r3, [pc, #68]	; (11d9c <_Z41__static_initialization_and_destruction_0ii+0x80>)
   11d56:	4798      	blx	r3
   11d58:	351c      	adds	r5, #28
   11d5a:	3c01      	subs	r4, #1
   11d5c:	e7f7      	b.n	11d4e <_Z41__static_initialization_and_destruction_0ii+0x32>
   11d5e:	4a0b      	ldr	r2, [pc, #44]	; (11d8c <_Z41__static_initialization_and_destruction_0ii+0x70>)
   11d60:	490f      	ldr	r1, [pc, #60]	; (11da0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   11d62:	2000      	movs	r0, #0
   11d64:	4b0b      	ldr	r3, [pc, #44]	; (11d94 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   11d66:	4798      	blx	r3
   11d68:	480e      	ldr	r0, [pc, #56]	; (11da4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   11d6a:	4b0f      	ldr	r3, [pc, #60]	; (11da8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   11d6c:	4798      	blx	r3
   11d6e:	4a07      	ldr	r2, [pc, #28]	; (11d8c <_Z41__static_initialization_and_destruction_0ii+0x70>)
   11d70:	490e      	ldr	r1, [pc, #56]	; (11dac <_Z41__static_initialization_and_destruction_0ii+0x90>)
   11d72:	480c      	ldr	r0, [pc, #48]	; (11da4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   11d74:	4b07      	ldr	r3, [pc, #28]	; (11d94 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   11d76:	4798      	blx	r3
   11d78:	bf00      	nop
   11d7a:	3708      	adds	r7, #8
   11d7c:	46bd      	mov	sp, r7
   11d7e:	bdb0      	pop	{r4, r5, r7, pc}
   11d80:	2000a2f0 	.word	0x2000a2f0
   11d84:	20002584 	.word	0x20002584
   11d88:	0000debd 	.word	0x0000debd
   11d8c:	20000000 	.word	0x20000000
   11d90:	0000ded9 	.word	0x0000ded9
   11d94:	00013cdd 	.word	0x00013cdd
   11d98:	200025a0 	.word	0x200025a0
   11d9c:	0000e079 	.word	0x0000e079
   11da0:	00011cf1 	.word	0x00011cf1
   11da4:	200025d8 	.word	0x200025d8
   11da8:	000119c5 	.word	0x000119c5
   11dac:	000119f5 	.word	0x000119f5

00011db0 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   11db0:	b580      	push	{r7, lr}
   11db2:	af00      	add	r7, sp, #0
   11db4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11db8:	2001      	movs	r0, #1
   11dba:	4b01      	ldr	r3, [pc, #4]	; (11dc0 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   11dbc:	4798      	blx	r3
   11dbe:	bd80      	pop	{r7, pc}
   11dc0:	00011d1d 	.word	0x00011d1d

00011dc4 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
   11dc4:	4770      	bx	lr

00011dc6 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
   11dc6:	4770      	bx	lr

00011dc8 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
   11dc8:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
   11dca:	2302      	movs	r3, #2
   11dcc:	4801      	ldr	r0, [pc, #4]	; (11dd4 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
   11dce:	4c02      	ldr	r4, [pc, #8]	; (11dd8 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
   11dd0:	47a0      	blx	r4
	return	r;
}
   11dd2:	bd10      	pop	{r4, pc}
   11dd4:	20009f90 	.word	0x20009f90
   11dd8:	00013a05 	.word	0x00013a05

00011ddc <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
   11ddc:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
   11dde:	4b03      	ldr	r3, [pc, #12]	; (11dec <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
   11de0:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
   11de2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   11de6:	4b02      	ldr	r3, [pc, #8]	; (11df0 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
   11de8:	4798      	blx	r3
}
   11dea:	bd08      	pop	{r3, pc}
   11dec:	200025fc 	.word	0x200025fc
   11df0:	00011dc9 	.word	0x00011dc9

00011df4 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
   11df4:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
   11df6:	2302      	movs	r3, #2
   11df8:	4801      	ldr	r0, [pc, #4]	; (11e00 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
   11dfa:	4c02      	ldr	r4, [pc, #8]	; (11e04 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
   11dfc:	47a0      	blx	r4
	return	w;
}
   11dfe:	bd10      	pop	{r4, pc}
   11e00:	20009f90 	.word	0x20009f90
   11e04:	000139d1 	.word	0x000139d1

00011e08 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
   11e08:	b500      	push	{lr}
   11e0a:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
   11e0c:	4b07      	ldr	r3, [pc, #28]	; (11e2c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
   11e0e:	881b      	ldrh	r3, [r3, #0]
   11e10:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
   11e14:	4b06      	ldr	r3, [pc, #24]	; (11e30 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
   11e16:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
   11e18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   11e1c:	3202      	adds	r2, #2
   11e1e:	a901      	add	r1, sp, #4
   11e20:	4b04      	ldr	r3, [pc, #16]	; (11e34 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
   11e22:	4798      	blx	r3
	return	w;
}
   11e24:	b003      	add	sp, #12
   11e26:	f85d fb04 	ldr.w	pc, [sp], #4
   11e2a:	bf00      	nop
   11e2c:	00014b6c 	.word	0x00014b6c
   11e30:	200025fc 	.word	0x200025fc
   11e34:	00011df5 	.word	0x00011df5

00011e38 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   11e38:	b510      	push	{r4, lr}
   11e3a:	4604      	mov	r4, r0
   11e3c:	30b8      	adds	r0, #184	; 0xb8
   11e3e:	4b03      	ldr	r3, [pc, #12]	; (11e4c <_ZN17MemoryFlash_ClassD1Ev+0x14>)
   11e40:	4798      	blx	r3
   11e42:	4620      	mov	r0, r4
   11e44:	4b02      	ldr	r3, [pc, #8]	; (11e50 <_ZN17MemoryFlash_ClassD1Ev+0x18>)
   11e46:	4798      	blx	r3
{
} //~MemoryManagment_Class
   11e48:	4620      	mov	r0, r4
   11e4a:	bd10      	pop	{r4, pc}
   11e4c:	0001205b 	.word	0x0001205b
   11e50:	00011dc7 	.word	0x00011dc7

00011e54 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   11e54:	b538      	push	{r3, r4, r5, lr}
   11e56:	4604      	mov	r4, r0
   11e58:	4b14      	ldr	r3, [pc, #80]	; (11eac <_ZN17MemoryFlash_ClassC1Ev+0x58>)
   11e5a:	4798      	blx	r3
   11e5c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   11e60:	4b13      	ldr	r3, [pc, #76]	; (11eb0 <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
   11e62:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   11e64:	f44f 7500 	mov.w	r5, #512	; 0x200
   11e68:	462a      	mov	r2, r5
   11e6a:	2100      	movs	r1, #0
   11e6c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   11e70:	4b10      	ldr	r3, [pc, #64]	; (11eb4 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
   11e72:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   11e74:	2300      	movs	r3, #0
   11e76:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
   11e7a:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   11e7e:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
	_currentAddress=0;
   11e82:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	head=512;
   11e86:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	tail=0;
   11e8a:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	flashBuffer=&flashBufferStatic[0];
   11e8e:	4a0a      	ldr	r2, [pc, #40]	; (11eb8 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
   11e90:	f246 33b4 	movw	r3, #25524	; 0x63b4
   11e94:	50e2      	str	r2, [r4, r3]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
   11e96:	4b09      	ldr	r3, [pc, #36]	; (11ebc <_ZN17MemoryFlash_ClassC1Ev+0x68>)
   11e98:	681b      	ldr	r3, [r3, #0]
   11e9a:	f503 43a1 	add.w	r3, r3, #20608	; 0x5080
   11e9e:	332c      	adds	r3, #44	; 0x2c
   11ea0:	f246 32b8 	movw	r2, #25528	; 0x63b8
   11ea4:	50a3      	str	r3, [r4, r2]
} //MemoryManagment_Class
   11ea6:	4620      	mov	r0, r4
   11ea8:	bd38      	pop	{r3, r4, r5, pc}
   11eaa:	bf00      	nop
   11eac:	00011dc5 	.word	0x00011dc5
   11eb0:	00012059 	.word	0x00012059
   11eb4:	00014391 	.word	0x00014391
   11eb8:	20002600 	.word	0x20002600
   11ebc:	200025fc 	.word	0x200025fc

00011ec0 <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   11ec0:	b538      	push	{r3, r4, r5, lr}
		if (qspiFlash.Init())
   11ec2:	480b      	ldr	r0, [pc, #44]	; (11ef0 <_ZN17MemoryFlash_Class4InitEm+0x30>)
   11ec4:	4b0b      	ldr	r3, [pc, #44]	; (11ef4 <_ZN17MemoryFlash_Class4InitEm+0x34>)
   11ec6:	4798      	blx	r3
   11ec8:	b948      	cbnz	r0, 11ede <_ZN17MemoryFlash_Class4InitEm+0x1e>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
   11eca:	4d0b      	ldr	r5, [pc, #44]	; (11ef8 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   11ecc:	490b      	ldr	r1, [pc, #44]	; (11efc <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   11ece:	4628      	mov	r0, r5
   11ed0:	4c0b      	ldr	r4, [pc, #44]	; (11f00 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   11ed2:	47a0      	blx	r4
   11ed4:	490b      	ldr	r1, [pc, #44]	; (11f04 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   11ed6:	4628      	mov	r0, r5
   11ed8:	47a0      	blx	r4
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return true;
}
   11eda:	2001      	movs	r0, #1
   11edc:	bd38      	pop	{r3, r4, r5, pc}
   11ede:	4d06      	ldr	r5, [pc, #24]	; (11ef8 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   11ee0:	4909      	ldr	r1, [pc, #36]	; (11f08 <_ZN17MemoryFlash_Class4InitEm+0x48>)
   11ee2:	4628      	mov	r0, r5
   11ee4:	4c06      	ldr	r4, [pc, #24]	; (11f00 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   11ee6:	47a0      	blx	r4
   11ee8:	4906      	ldr	r1, [pc, #24]	; (11f04 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   11eea:	4628      	mov	r0, r5
   11eec:	47a0      	blx	r4
   11eee:	e7f4      	b.n	11eda <_ZN17MemoryFlash_Class4InitEm+0x1a>
   11ef0:	20009f90 	.word	0x20009f90
   11ef4:	00013935 	.word	0x00013935
   11ef8:	20001a04 	.word	0x20001a04
   11efc:	00014b00 	.word	0x00014b00
   11f00:	0000f241 	.word	0x0000f241
   11f04:	00014afc 	.word	0x00014afc
   11f08:	00014adc 	.word	0x00014adc

00011f0c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
		  return	w;
	 }

	 return	r;
 }
 uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   11f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f0e:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   11f10:	4b10      	ldr	r3, [pc, #64]	; (11f54 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   11f12:	681c      	ldr	r4, [r3, #0]
   11f14:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   11f18:	f246 33b4 	movw	r3, #25524	; 0x63b4
   11f1c:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   11f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   11f22:	4622      	mov	r2, r4
   11f24:	4629      	mov	r1, r5
   11f26:	480c      	ldr	r0, [pc, #48]	; (11f58 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   11f28:	4e0c      	ldr	r6, [pc, #48]	; (11f5c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   11f2a:	47b0      	blx	r6
	  if (r==0)
   11f2c:	4603      	mov	r3, r0
   11f2e:	b108      	cbz	r0, 11f34 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   11f30:	4618      	mov	r0, r3
   11f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   11f34:	883b      	ldrh	r3, [r7, #0]
   11f36:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
   11f38:	4e07      	ldr	r6, [pc, #28]	; (11f58 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   11f3a:	4621      	mov	r1, r4
   11f3c:	4630      	mov	r0, r6
   11f3e:	4b08      	ldr	r3, [pc, #32]	; (11f60 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   11f40:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   11f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   11f46:	4622      	mov	r2, r4
   11f48:	4629      	mov	r1, r5
   11f4a:	4630      	mov	r0, r6
   11f4c:	4c05      	ldr	r4, [pc, #20]	; (11f64 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   11f4e:	47a0      	blx	r4
   11f50:	4603      	mov	r3, r0
		  return	w;
   11f52:	e7ed      	b.n	11f30 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   11f54:	200025fc 	.word	0x200025fc
   11f58:	20009f90 	.word	0x20009f90
   11f5c:	00013a05 	.word	0x00013a05
   11f60:	000139a1 	.word	0x000139a1
   11f64:	000139d1 	.word	0x000139d1

00011f68 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
   11f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   11f6c:	4c2b      	ldr	r4, [pc, #172]	; (1201c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
   11f6e:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
   11f72:	492b      	ldr	r1, [pc, #172]	; (12020 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
   11f74:	4628      	mov	r0, r5
   11f76:	4f2b      	ldr	r7, [pc, #172]	; (12024 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
   11f78:	47b8      	blx	r7
   11f7a:	4e2b      	ldr	r6, [pc, #172]	; (12028 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
   11f7c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 12054 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
   11f80:	4632      	mov	r2, r6
   11f82:	4641      	mov	r1, r8
   11f84:	4628      	mov	r0, r5
   11f86:	4d29      	ldr	r5, [pc, #164]	; (1202c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
   11f88:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   11f8a:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
   11f8e:	4928      	ldr	r1, [pc, #160]	; (12030 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
   11f90:	4648      	mov	r0, r9
   11f92:	47b8      	blx	r7
   11f94:	4632      	mov	r2, r6
   11f96:	4641      	mov	r1, r8
   11f98:	4648      	mov	r0, r9
   11f9a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   11f9c:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
   11fa0:	4924      	ldr	r1, [pc, #144]	; (12034 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
   11fa2:	4648      	mov	r0, r9
   11fa4:	47b8      	blx	r7
   11fa6:	4632      	mov	r2, r6
   11fa8:	4641      	mov	r1, r8
   11faa:	4648      	mov	r0, r9
   11fac:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   11fae:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
   11fb2:	4921      	ldr	r1, [pc, #132]	; (12038 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
   11fb4:	4648      	mov	r0, r9
   11fb6:	47b8      	blx	r7
   11fb8:	4632      	mov	r2, r6
   11fba:	4641      	mov	r1, r8
   11fbc:	4648      	mov	r0, r9
   11fbe:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   11fc0:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
   11fc4:	491d      	ldr	r1, [pc, #116]	; (1203c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
   11fc6:	4648      	mov	r0, r9
   11fc8:	47b8      	blx	r7
   11fca:	4632      	mov	r2, r6
   11fcc:	4641      	mov	r1, r8
   11fce:	4648      	mov	r0, r9
   11fd0:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   11fd2:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
   11fd6:	491a      	ldr	r1, [pc, #104]	; (12040 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
   11fd8:	4648      	mov	r0, r9
   11fda:	47b8      	blx	r7
   11fdc:	4632      	mov	r2, r6
   11fde:	4641      	mov	r1, r8
   11fe0:	4648      	mov	r0, r9
   11fe2:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11fe4:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
   11fe8:	4916      	ldr	r1, [pc, #88]	; (12044 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
   11fea:	4648      	mov	r0, r9
   11fec:	47b8      	blx	r7
   11fee:	4632      	mov	r2, r6
   11ff0:	4641      	mov	r1, r8
   11ff2:	4648      	mov	r0, r9
   11ff4:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   11ff6:	f1a4 0918 	sub.w	r9, r4, #24
   11ffa:	4913      	ldr	r1, [pc, #76]	; (12048 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
   11ffc:	4648      	mov	r0, r9
   11ffe:	47b8      	blx	r7
   12000:	4632      	mov	r2, r6
   12002:	4641      	mov	r1, r8
   12004:	4648      	mov	r0, r9
   12006:	47a8      	blx	r5
   12008:	3408      	adds	r4, #8
   1200a:	4620      	mov	r0, r4
   1200c:	4b0f      	ldr	r3, [pc, #60]	; (1204c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
   1200e:	4798      	blx	r3
   12010:	4632      	mov	r2, r6
   12012:	490f      	ldr	r1, [pc, #60]	; (12050 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
   12014:	4620      	mov	r0, r4
   12016:	47a8      	blx	r5
   12018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1201c:	200036f8 	.word	0x200036f8
   12020:	2000a1c0 	.word	0x2000a1c0
   12024:	0000e575 	.word	0x0000e575
   12028:	20000000 	.word	0x20000000
   1202c:	00013cdd 	.word	0x00013cdd
   12030:	2000a254 	.word	0x2000a254
   12034:	2000a378 	.word	0x2000a378
   12038:	2000a274 	.word	0x2000a274
   1203c:	2000a338 	.word	0x2000a338
   12040:	2000a358 	.word	0x2000a358
   12044:	2000a230 	.word	0x2000a230
   12048:	2000a2d0 	.word	0x2000a2d0
   1204c:	00011e55 	.word	0x00011e55
   12050:	00011e39 	.word	0x00011e39
   12054:	0000e5ad 	.word	0x0000e5ad

00012058 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   12058:	4770      	bx	lr

0001205a <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   1205a:	4770      	bx	lr

0001205c <_ZN12Scavenge_FanD1Ev>:
} //Scavenge_Fan

// default destructor
Scavenge_Fan::~Scavenge_Fan()
{
} //~Scavenge_Fan
   1205c:	4770      	bx	lr
	...

00012060 <_ZN12Scavenge_Fan10ReadStatusEv>:
	{
	}
	return isOK;
}

uint8_t	Scavenge_Fan::ReadStatus(void){
   12060:	b510      	push	{r4, lr}
   12062:	4604      	mov	r4, r0
	uint8_t r=expander->ReadGPIORegister();
   12064:	6880      	ldr	r0, [r0, #8]
   12066:	4b06      	ldr	r3, [pc, #24]	; (12080 <_ZN12Scavenge_Fan10ReadStatusEv+0x20>)
   12068:	4798      	blx	r3
	
	
	scavengeData.tempFault=r&(0x01<<(7));
   1206a:	f3c0 12c0 	ubfx	r2, r0, #7, #1
   1206e:	70e2      	strb	r2, [r4, #3]
	scavengeData.SPDFault=r&(0x01<<(6));
   12070:	f3c0 1280 	ubfx	r2, r0, #6, #1
   12074:	7122      	strb	r2, [r4, #4]
	scavengeData.relayFault=r&(0x01<<(4));
   12076:	f3c0 1300 	ubfx	r3, r0, #4, #1
   1207a:	7163      	strb	r3, [r4, #5]
	return r;
	
}
   1207c:	bd10      	pop	{r4, pc}
   1207e:	bf00      	nop
   12080:	0000e185 	.word	0x0000e185

00012084 <_ZN12Scavenge_Fan9SetEnableEb>:
uint8_t	Scavenge_Fan::SetEnable(bool state){
   12084:	b510      	push	{r4, lr}
   12086:	4604      	mov	r4, r0

	enabled=expander->WriteDigit(1,!state);
   12088:	f081 0201 	eor.w	r2, r1, #1
   1208c:	2101      	movs	r1, #1
   1208e:	6880      	ldr	r0, [r0, #8]
   12090:	4b01      	ldr	r3, [pc, #4]	; (12098 <_ZN12Scavenge_Fan9SetEnableEb+0x14>)
   12092:	4798      	blx	r3
   12094:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
   12096:	bd10      	pop	{r4, pc}
   12098:	0000e43d 	.word	0x0000e43d

0001209c <_ZN12Scavenge_Fan8SelfTestEv>:

	uint8_t value=expander->ReadGPIORegister();
	enabled=!(value&0x02);
	return enabled;
}
bool Scavenge_Fan::SelfTest(){
   1209c:	b510      	push	{r4, lr}
   1209e:	4604      	mov	r4, r0
	if ((ReadStatus()&0xd0)<0xd)
   120a0:	4b05      	ldr	r3, [pc, #20]	; (120b8 <_ZN12Scavenge_Fan8SelfTestEv+0x1c>)
   120a2:	4798      	blx	r3
   120a4:	f000 00d0 	and.w	r0, r0, #208	; 0xd0
   120a8:	280c      	cmp	r0, #12
	{
		bool_result=false;
   120aa:	bfd4      	ite	le
   120ac:	2300      	movle	r3, #0
	} 
	else
	{
		bool_result=true;
   120ae:	2301      	movgt	r3, #1
   120b0:	7423      	strb	r3, [r4, #16]
	}
	return bool_result;
}
   120b2:	7c20      	ldrb	r0, [r4, #16]
   120b4:	bd10      	pop	{r4, pc}
   120b6:	bf00      	nop
   120b8:	00012061 	.word	0x00012061

000120bc <_ZN12Scavenge_Fan4InitEv>:
bool Scavenge_Fan::Init(void){
   120bc:	b510      	push	{r4, lr}
   120be:	4604      	mov	r4, r0
	i2c=&i2cSharedStatic;
   120c0:	4a0d      	ldr	r2, [pc, #52]	; (120f8 <_ZN12Scavenge_Fan4InitEv+0x3c>)
   120c2:	60c2      	str	r2, [r0, #12]
	expander=&local_expander;
   120c4:	f102 0018 	add.w	r0, r2, #24
   120c8:	60a0      	str	r0, [r4, #8]
	expander->Init(MCP23008_SCAVENGE_ADDRESS,i2c);
   120ca:	2124      	movs	r1, #36	; 0x24
   120cc:	4b0b      	ldr	r3, [pc, #44]	; (120fc <_ZN12Scavenge_Fan4InitEv+0x40>)
   120ce:	4798      	blx	r3
	if (i2c->initiated)
   120d0:	68e0      	ldr	r0, [r4, #12]
   120d2:	7a03      	ldrb	r3, [r0, #8]
   120d4:	b123      	cbz	r3, 120e0 <_ZN12Scavenge_Fan4InitEv+0x24>
	if (i2c->isOK)
   120d6:	68e3      	ldr	r3, [r4, #12]
   120d8:	7a5b      	ldrb	r3, [r3, #9]
   120da:	b923      	cbnz	r3, 120e6 <_ZN12Scavenge_Fan4InitEv+0x2a>
}
   120dc:	78a0      	ldrb	r0, [r4, #2]
   120de:	bd10      	pop	{r4, pc}
		i2c->Init();
   120e0:	4b07      	ldr	r3, [pc, #28]	; (12100 <_ZN12Scavenge_Fan4InitEv+0x44>)
   120e2:	4798      	blx	r3
   120e4:	e7f7      	b.n	120d6 <_ZN12Scavenge_Fan4InitEv+0x1a>
		expander->SetPortInput(0xf0);
   120e6:	21f0      	movs	r1, #240	; 0xf0
   120e8:	68a0      	ldr	r0, [r4, #8]
   120ea:	4b06      	ldr	r3, [pc, #24]	; (12104 <_ZN12Scavenge_Fan4InitEv+0x48>)
   120ec:	4798      	blx	r3
		isOK=SelfTest();
   120ee:	4620      	mov	r0, r4
   120f0:	4b05      	ldr	r3, [pc, #20]	; (12108 <_ZN12Scavenge_Fan4InitEv+0x4c>)
   120f2:	4798      	blx	r3
   120f4:	70a0      	strb	r0, [r4, #2]
   120f6:	e7f1      	b.n	120dc <_ZN12Scavenge_Fan4InitEv+0x20>
   120f8:	20009abc 	.word	0x20009abc
   120fc:	0000e0a1 	.word	0x0000e0a1
   12100:	0000deed 	.word	0x0000deed
   12104:	0000e289 	.word	0x0000e289
   12108:	0001209d 	.word	0x0001209d

0001210c <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev>:
   1210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   1210e:	4c0e      	ldr	r4, [pc, #56]	; (12148 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x3c>)
   12110:	490e      	ldr	r1, [pc, #56]	; (1214c <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x40>)
   12112:	4620      	mov	r0, r4
   12114:	4b0e      	ldr	r3, [pc, #56]	; (12150 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x44>)
   12116:	4798      	blx	r3
   12118:	4e0e      	ldr	r6, [pc, #56]	; (12154 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x48>)
   1211a:	4632      	mov	r2, r6
   1211c:	490e      	ldr	r1, [pc, #56]	; (12158 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x4c>)
   1211e:	4620      	mov	r0, r4
   12120:	4d0e      	ldr	r5, [pc, #56]	; (1215c <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x50>)
   12122:	47a8      	blx	r5
static MCP23008_Class local_expander;
   12124:	f104 0718 	add.w	r7, r4, #24
   12128:	4638      	mov	r0, r7
   1212a:	4b0d      	ldr	r3, [pc, #52]	; (12160 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x54>)
   1212c:	4798      	blx	r3
   1212e:	4632      	mov	r2, r6
   12130:	490c      	ldr	r1, [pc, #48]	; (12164 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x58>)
   12132:	4638      	mov	r0, r7
   12134:	47a8      	blx	r5
	isOK=false;
   12136:	2300      	movs	r3, #0
   12138:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   1213c:	4632      	mov	r2, r6
   1213e:	490a      	ldr	r1, [pc, #40]	; (12168 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x5c>)
   12140:	f104 0034 	add.w	r0, r4, #52	; 0x34
   12144:	47a8      	blx	r5
   12146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12148:	20009abc 	.word	0x20009abc
   1214c:	2000a2f0 	.word	0x2000a2f0
   12150:	0000debd 	.word	0x0000debd
   12154:	20000000 	.word	0x20000000
   12158:	0000ded9 	.word	0x0000ded9
   1215c:	00013cdd 	.word	0x00013cdd
   12160:	0000e079 	.word	0x0000e079
   12164:	0000e08d 	.word	0x0000e08d
   12168:	0001205d 	.word	0x0001205d

0001216c <_ZL17ConversionTimeoutPK10timer_task>:
	ptrTemperaturesClass->converterReady[2]=true;
	ptrTemperaturesClass->SetModuleReady(2);
	ptrTemperaturesClass->converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	ptrTemperaturesClass->converterTimeout=true;
   1216c:	4b03      	ldr	r3, [pc, #12]	; (1217c <_ZL17ConversionTimeoutPK10timer_task+0x10>)
   1216e:	681b      	ldr	r3, [r3, #0]
   12170:	2201      	movs	r2, #1
   12172:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
   12176:	bf00      	nop
   12178:	4770      	bx	lr
   1217a:	bf00      	nop
   1217c:	20009b04 	.word	0x20009b04

00012180 <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   12180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12182:	4607      	mov	r7, r0
   12184:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   12188:	d007      	beq.n	1219a <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   1218a:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   1218e:	4e05      	ldr	r6, [pc, #20]	; (121a4 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   12190:	3c68      	subs	r4, #104	; 0x68
   12192:	4620      	mov	r0, r4
   12194:	47b0      	blx	r6
   12196:	42a5      	cmp	r5, r4
   12198:	d1fa      	bne.n	12190 <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   1219a:	4638      	mov	r0, r7
   1219c:	4b02      	ldr	r3, [pc, #8]	; (121a8 <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   1219e:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   121a0:	4638      	mov	r0, r7
   121a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   121a4:	000127c5 	.word	0x000127c5
   121a8:	000127c5 	.word	0x000127c5

000121ac <_ZL15Converter1Readyv>:
	ptrTemperaturesClass->converterReady[0]=true;
   121ac:	4b06      	ldr	r3, [pc, #24]	; (121c8 <_ZL15Converter1Readyv+0x1c>)
   121ae:	681b      	ldr	r3, [r3, #0]
   121b0:	2201      	movs	r2, #1
   121b2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsConversionFinished(){
	return converterReady[0]&converterReady[1]&converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
   121b6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
   121ba:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	ptrTemperaturesClass->converterTimeout=false;
   121be:	2200      	movs	r2, #0
   121c0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   121c4:	4770      	bx	lr
   121c6:	bf00      	nop
   121c8:	20009b04 	.word	0x20009b04

000121cc <_ZL15Converter2Readyv>:
	ptrTemperaturesClass->converterReady[1]=true;
   121cc:	4b06      	ldr	r3, [pc, #24]	; (121e8 <_ZL15Converter2Readyv+0x1c>)
   121ce:	681b      	ldr	r3, [r3, #0]
   121d0:	2201      	movs	r2, #1
   121d2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
   121d6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
   121da:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	ptrTemperaturesClass->converterTimeout=false;
   121de:	2200      	movs	r2, #0
   121e0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   121e4:	4770      	bx	lr
   121e6:	bf00      	nop
   121e8:	20009b04 	.word	0x20009b04

000121ec <_ZL15Converter3Readyv>:
	ptrTemperaturesClass->converterReady[2]=true;
   121ec:	4b06      	ldr	r3, [pc, #24]	; (12208 <_ZL15Converter3Readyv+0x1c>)
   121ee:	681b      	ldr	r3, [r3, #0]
   121f0:	2201      	movs	r2, #1
   121f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
   121f6:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
   121fa:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	ptrTemperaturesClass->converterTimeout=false;
   121fe:	2200      	movs	r2, #0
   12200:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   12204:	4770      	bx	lr
   12206:	bf00      	nop
   12208:	20009b04 	.word	0x20009b04

0001220c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   1220c:	b570      	push	{r4, r5, r6, lr}
   1220e:	4604      	mov	r4, r0
   12210:	460e      	mov	r6, r1
   12212:	4b0a      	ldr	r3, [pc, #40]	; (1223c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x30>)
   12214:	4798      	blx	r3
   12216:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   1221a:	4d09      	ldr	r5, [pc, #36]	; (12240 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   1221c:	47a8      	blx	r5
   1221e:	f504 7088 	add.w	r0, r4, #272	; 0x110
   12222:	47a8      	blx	r5
   12224:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   12228:	47a8      	blx	r5
		spiLite=&ltSPI;
   1222a:	4b06      	ldr	r3, [pc, #24]	; (12244 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   1222c:	1d1a      	adds	r2, r3, #4
   1222e:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   12232:	601c      	str	r4, [r3, #0]
		SPIA=SPI_LTC;
   12234:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   12238:	4620      	mov	r0, r4
   1223a:	bd70      	pop	{r4, r5, r6, pc}
   1223c:	000127b1 	.word	0x000127b1
   12240:	000127b1 	.word	0x000127b1
   12244:	20009b04 	.word	0x20009b04

00012248 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
   12248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1224c:	4604      	mov	r4, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
   1224e:	233d      	movs	r3, #61	; 0x3d
   12250:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
   12254:	231b      	movs	r3, #27
   12256:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
   1225a:	2327      	movs	r3, #39	; 0x27
   1225c:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
   12260:	f500 76f0 	add.w	r6, r0, #480	; 0x1e0
   12264:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
   12268:	f500 78f6 	add.w	r8, r0, #492	; 0x1ec
		module[ii].Init(csPins[ii],spiLite);
   1226c:	4f06      	ldr	r7, [pc, #24]	; (12288 <_ZN24TemperatureSensors_Class11InitModulesEv+0x40>)
   1226e:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   12272:	f856 1b04 	ldr.w	r1, [r6], #4
   12276:	4628      	mov	r0, r5
   12278:	47b8      	blx	r7
   1227a:	3568      	adds	r5, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   1227c:	4546      	cmp	r6, r8
   1227e:	d1f6      	bne.n	1226e <_ZN24TemperatureSensors_Class11InitModulesEv+0x26>
}
   12280:	2001      	movs	r0, #1
   12282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12286:	bf00      	nop
   12288:	000127d9 	.word	0x000127d9

0001228c <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
   1228c:	b538      	push	{r3, r4, r5, lr}
   1228e:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
   12290:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
   12294:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   12298:	4b16      	ldr	r3, [pc, #88]	; (122f4 <_ZN24TemperatureSensors_Class4InitEv+0x68>)
   1229a:	4798      	blx	r3
	spiLite->init();
   1229c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   122a0:	4b15      	ldr	r3, [pc, #84]	; (122f8 <_ZN24TemperatureSensors_Class4InitEv+0x6c>)
   122a2:	4798      	blx	r3
	ptrTemperaturesClass=this;
   122a4:	4b15      	ldr	r3, [pc, #84]	; (122fc <_ZN24TemperatureSensors_Class4InitEv+0x70>)
   122a6:	601c      	str	r4, [r3, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   122a8:	4915      	ldr	r1, [pc, #84]	; (12300 <_ZN24TemperatureSensors_Class4InitEv+0x74>)
   122aa:	2028      	movs	r0, #40	; 0x28
   122ac:	4d15      	ldr	r5, [pc, #84]	; (12304 <_ZN24TemperatureSensors_Class4InitEv+0x78>)
   122ae:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
   122b0:	4915      	ldr	r1, [pc, #84]	; (12308 <_ZN24TemperatureSensors_Class4InitEv+0x7c>)
   122b2:	2029      	movs	r0, #41	; 0x29
   122b4:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
   122b6:	4915      	ldr	r1, [pc, #84]	; (1230c <_ZN24TemperatureSensors_Class4InitEv+0x80>)
   122b8:	2021      	movs	r0, #33	; 0x21
   122ba:	47a8      	blx	r5
	InitModules();
   122bc:	4620      	mov	r0, r4
   122be:	4b14      	ldr	r3, [pc, #80]	; (12310 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   122c0:	4798      	blx	r3
	converterReady[0]=true;converterReady[1]=true;converterReady[3]=true;
   122c2:	2301      	movs	r3, #1
   122c4:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   122c8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   122cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	currentModule=0; currentChannelIndex=0;
   122d0:	2300      	movs	r3, #0
   122d2:	f884 31f3 	strb.w	r3, [r4, #499]	; 0x1f3
   122d6:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
   122da:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   122de:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
   122e2:	4013      	ands	r3, r2
   122e4:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   122e8:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
   122ea:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
   122ee:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
   122f2:	bd38      	pop	{r3, r4, r5, pc}
   122f4:	000130e5 	.word	0x000130e5
   122f8:	00013089 	.word	0x00013089
   122fc:	20009b04 	.word	0x20009b04
   12300:	000121ad 	.word	0x000121ad
   12304:	00002c49 	.word	0x00002c49
   12308:	000121cd 	.word	0x000121cd
   1230c:	000121ed 	.word	0x000121ed
   12310:	00012249 	.word	0x00012249

00012314 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   12314:	b510      	push	{r4, lr}
   12316:	4604      	mov	r4, r0
	converterTimeout=false;
   12318:	2200      	movs	r2, #0
   1231a:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
   1231e:	f890 31f3 	ldrb.w	r3, [r0, #499]	; 0x1f3
   12322:	4403      	add	r3, r0
   12324:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   12328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1232c:	4907      	ldr	r1, [pc, #28]	; (1234c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
   1232e:	4808      	ldr	r0, [pc, #32]	; (12350 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
   12330:	4b08      	ldr	r3, [pc, #32]	; (12354 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
   12332:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   12334:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   12338:	2368      	movs	r3, #104	; 0x68
   1233a:	fb03 4000 	mla	r0, r3, r0, r4
   1233e:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   12342:	30a8      	adds	r0, #168	; 0xa8
   12344:	4b04      	ldr	r3, [pc, #16]	; (12358 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
   12346:	4798      	blx	r3
   12348:	bd10      	pop	{r4, pc}
   1234a:	bf00      	nop
   1234c:	0001216d 	.word	0x0001216d
   12350:	20009b1c 	.word	0x20009b1c
   12354:	0000e849 	.word	0x0000e849
   12358:	000128cd 	.word	0x000128cd

0001235c <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   1235c:	b538      	push	{r3, r4, r5, lr}
   1235e:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   12360:	491e      	ldr	r1, [pc, #120]	; (123dc <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
   12362:	481f      	ldr	r0, [pc, #124]	; (123e0 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
   12364:	4b1f      	ldr	r3, [pc, #124]	; (123e4 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
   12366:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   12368:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   1236c:	2568      	movs	r5, #104	; 0x68
   1236e:	fb05 4000 	mla	r0, r5, r0, r4
   12372:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   12376:	30a8      	adds	r0, #168	; 0xa8
   12378:	4b1b      	ldr	r3, [pc, #108]	; (123e8 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
   1237a:	4798      	blx	r3
   1237c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
   12380:	f894 21f3 	ldrb.w	r2, [r4, #499]	; 0x1f3
   12384:	fb05 4502 	mla	r5, r5, r2, r4
   12388:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
   1238c:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
   12390:	2b01      	cmp	r3, #1
   12392:	d00d      	beq.n	123b0 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
   12394:	4b15      	ldr	r3, [pc, #84]	; (123ec <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
   12396:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
   1239a:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   1239e:	3301      	adds	r3, #1
   123a0:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   123a2:	2b04      	cmp	r3, #4
   123a4:	d00c      	beq.n	123c0 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
   123a6:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
}
   123aa:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   123ae:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
   123b0:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   123b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   123b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   123bc:	66d8      	str	r0, [r3, #108]	; 0x6c
   123be:	e7ec      	b.n	1239a <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
   123c0:	2300      	movs	r3, #0
   123c2:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
		currentModule++;
   123c6:	3201      	adds	r2, #1
   123c8:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
   123ca:	2a03      	cmp	r2, #3
		currentModule++;
   123cc:	bf12      	itee	ne
   123ce:	f884 21f3 	strbne.w	r2, [r4, #499]	; 0x1f3
			currentModule=0;
   123d2:	2300      	moveq	r3, #0
   123d4:	f884 31f3 	strbeq.w	r3, [r4, #499]	; 0x1f3
   123d8:	e7e7      	b.n	123aa <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
   123da:	bf00      	nop
   123dc:	0001216d 	.word	0x0001216d
   123e0:	20009b1c 	.word	0x20009b1c
   123e4:	0000e7f1 	.word	0x0000e7f1
   123e8:	000129d5 	.word	0x000129d5
   123ec:	c479c000 	.word	0xc479c000

000123f0 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
   123f0:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   123f4:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   123f8:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   123fc:	4013      	ands	r3, r2
}
   123fe:	4018      	ands	r0, r3
   12400:	4770      	bx	lr
	...

00012404 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   12404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   12408:	4c30      	ldr	r4, [pc, #192]	; (124cc <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xc8>)
   1240a:	f104 0518 	add.w	r5, r4, #24
   1240e:	4930      	ldr	r1, [pc, #192]	; (124d0 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xcc>)
   12410:	4628      	mov	r0, r5
   12412:	4f30      	ldr	r7, [pc, #192]	; (124d4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd0>)
   12414:	47b8      	blx	r7
   12416:	4e30      	ldr	r6, [pc, #192]	; (124d8 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd4>)
   12418:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 12510 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x10c>
   1241c:	4632      	mov	r2, r6
   1241e:	4641      	mov	r1, r8
   12420:	4628      	mov	r0, r5
   12422:	4d2e      	ldr	r5, [pc, #184]	; (124dc <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd8>)
   12424:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   12426:	f104 0938 	add.w	r9, r4, #56	; 0x38
   1242a:	492d      	ldr	r1, [pc, #180]	; (124e0 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xdc>)
   1242c:	4648      	mov	r0, r9
   1242e:	47b8      	blx	r7
   12430:	4632      	mov	r2, r6
   12432:	4641      	mov	r1, r8
   12434:	4648      	mov	r0, r9
   12436:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   12438:	f104 0958 	add.w	r9, r4, #88	; 0x58
   1243c:	4929      	ldr	r1, [pc, #164]	; (124e4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe0>)
   1243e:	4648      	mov	r0, r9
   12440:	47b8      	blx	r7
   12442:	4632      	mov	r2, r6
   12444:	4641      	mov	r1, r8
   12446:	4648      	mov	r0, r9
   12448:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1244a:	f104 0978 	add.w	r9, r4, #120	; 0x78
   1244e:	4926      	ldr	r1, [pc, #152]	; (124e8 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe4>)
   12450:	4648      	mov	r0, r9
   12452:	47b8      	blx	r7
   12454:	4632      	mov	r2, r6
   12456:	4641      	mov	r1, r8
   12458:	4648      	mov	r0, r9
   1245a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   1245c:	f104 0998 	add.w	r9, r4, #152	; 0x98
   12460:	4922      	ldr	r1, [pc, #136]	; (124ec <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe8>)
   12462:	4648      	mov	r0, r9
   12464:	47b8      	blx	r7
   12466:	4632      	mov	r2, r6
   12468:	4641      	mov	r1, r8
   1246a:	4648      	mov	r0, r9
   1246c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1246e:	f104 09b8 	add.w	r9, r4, #184	; 0xb8
   12472:	491f      	ldr	r1, [pc, #124]	; (124f0 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xec>)
   12474:	4648      	mov	r0, r9
   12476:	47b8      	blx	r7
   12478:	4632      	mov	r2, r6
   1247a:	4641      	mov	r1, r8
   1247c:	4648      	mov	r0, r9
   1247e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   12480:	f104 09d8 	add.w	r9, r4, #216	; 0xd8
   12484:	491b      	ldr	r1, [pc, #108]	; (124f4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf0>)
   12486:	4648      	mov	r0, r9
   12488:	47b8      	blx	r7
   1248a:	4632      	mov	r2, r6
   1248c:	4641      	mov	r1, r8
   1248e:	4648      	mov	r0, r9
   12490:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   12492:	f104 09f8 	add.w	r9, r4, #248	; 0xf8
   12496:	4918      	ldr	r1, [pc, #96]	; (124f8 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf4>)
   12498:	4648      	mov	r0, r9
   1249a:	47b8      	blx	r7
   1249c:	4632      	mov	r2, r6
   1249e:	4641      	mov	r1, r8
   124a0:	4648      	mov	r0, r9
   124a2:	47a8      	blx	r5
static LT_SPI	ltSPI;
   124a4:	1d27      	adds	r7, r4, #4
   124a6:	4638      	mov	r0, r7
   124a8:	4b14      	ldr	r3, [pc, #80]	; (124fc <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf8>)
   124aa:	4798      	blx	r3
   124ac:	4632      	mov	r2, r6
   124ae:	4914      	ldr	r1, [pc, #80]	; (12500 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xfc>)
   124b0:	4638      	mov	r0, r7
   124b2:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   124b4:	f504 748c 	add.w	r4, r4, #280	; 0x118
   124b8:	4912      	ldr	r1, [pc, #72]	; (12504 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x100>)
   124ba:	4620      	mov	r0, r4
   124bc:	4b12      	ldr	r3, [pc, #72]	; (12508 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x104>)
   124be:	4798      	blx	r3
   124c0:	4632      	mov	r2, r6
   124c2:	4912      	ldr	r1, [pc, #72]	; (1250c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x108>)
   124c4:	4620      	mov	r0, r4
   124c6:	47a8      	blx	r5
   124c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   124cc:	20009b04 	.word	0x20009b04
   124d0:	2000a1c0 	.word	0x2000a1c0
   124d4:	0000e575 	.word	0x0000e575
   124d8:	20000000 	.word	0x20000000
   124dc:	00013cdd 	.word	0x00013cdd
   124e0:	2000a254 	.word	0x2000a254
   124e4:	2000a378 	.word	0x2000a378
   124e8:	2000a274 	.word	0x2000a274
   124ec:	2000a338 	.word	0x2000a338
   124f0:	2000a358 	.word	0x2000a358
   124f4:	2000a230 	.word	0x2000a230
   124f8:	2000a2d0 	.word	0x2000a2d0
   124fc:	0001304d 	.word	0x0001304d
   12500:	00013075 	.word	0x00013075
   12504:	2000a1f8 	.word	0x2000a1f8
   12508:	0001220d 	.word	0x0001220d
   1250c:	00012181 	.word	0x00012181
   12510:	0000e5ad 	.word	0x0000e5ad

00012514 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   12514:	b580      	push	{r7, lr}
   12516:	b084      	sub	sp, #16
   12518:	af00      	add	r7, sp, #0
   1251a:	60f8      	str	r0, [r7, #12]
   1251c:	60b9      	str	r1, [r7, #8]
   1251e:	4613      	mov	r3, r2
   12520:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   12522:	68fb      	ldr	r3, [r7, #12]
   12524:	2b00      	cmp	r3, #0
   12526:	d004      	beq.n	12532 <io_write+0x1e>
   12528:	68bb      	ldr	r3, [r7, #8]
   1252a:	2b00      	cmp	r3, #0
   1252c:	d001      	beq.n	12532 <io_write+0x1e>
   1252e:	2301      	movs	r3, #1
   12530:	e000      	b.n	12534 <io_write+0x20>
   12532:	2300      	movs	r3, #0
   12534:	f003 0301 	and.w	r3, r3, #1
   12538:	b2db      	uxtb	r3, r3
   1253a:	2234      	movs	r2, #52	; 0x34
   1253c:	4907      	ldr	r1, [pc, #28]	; (1255c <io_write+0x48>)
   1253e:	4618      	mov	r0, r3
   12540:	4b07      	ldr	r3, [pc, #28]	; (12560 <io_write+0x4c>)
   12542:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   12544:	68fb      	ldr	r3, [r7, #12]
   12546:	681b      	ldr	r3, [r3, #0]
   12548:	88fa      	ldrh	r2, [r7, #6]
   1254a:	68b9      	ldr	r1, [r7, #8]
   1254c:	68f8      	ldr	r0, [r7, #12]
   1254e:	4798      	blx	r3
   12550:	4603      	mov	r3, r0
}
   12552:	4618      	mov	r0, r3
   12554:	3710      	adds	r7, #16
   12556:	46bd      	mov	sp, r7
   12558:	bd80      	pop	{r7, pc}
   1255a:	bf00      	nop
   1255c:	00014b20 	.word	0x00014b20
   12560:	00004211 	.word	0x00004211

00012564 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   12564:	b580      	push	{r7, lr}
   12566:	b084      	sub	sp, #16
   12568:	af00      	add	r7, sp, #0
   1256a:	60f8      	str	r0, [r7, #12]
   1256c:	60b9      	str	r1, [r7, #8]
   1256e:	4613      	mov	r3, r2
   12570:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   12572:	68fb      	ldr	r3, [r7, #12]
   12574:	2b00      	cmp	r3, #0
   12576:	d004      	beq.n	12582 <io_read+0x1e>
   12578:	68bb      	ldr	r3, [r7, #8]
   1257a:	2b00      	cmp	r3, #0
   1257c:	d001      	beq.n	12582 <io_read+0x1e>
   1257e:	2301      	movs	r3, #1
   12580:	e000      	b.n	12584 <io_read+0x20>
   12582:	2300      	movs	r3, #0
   12584:	f003 0301 	and.w	r3, r3, #1
   12588:	b2db      	uxtb	r3, r3
   1258a:	223d      	movs	r2, #61	; 0x3d
   1258c:	4907      	ldr	r1, [pc, #28]	; (125ac <io_read+0x48>)
   1258e:	4618      	mov	r0, r3
   12590:	4b07      	ldr	r3, [pc, #28]	; (125b0 <io_read+0x4c>)
   12592:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   12594:	68fb      	ldr	r3, [r7, #12]
   12596:	685b      	ldr	r3, [r3, #4]
   12598:	88fa      	ldrh	r2, [r7, #6]
   1259a:	68b9      	ldr	r1, [r7, #8]
   1259c:	68f8      	ldr	r0, [r7, #12]
   1259e:	4798      	blx	r3
   125a0:	4603      	mov	r3, r0
}
   125a2:	4618      	mov	r0, r3
   125a4:	3710      	adds	r7, #16
   125a6:	46bd      	mov	sp, r7
   125a8:	bd80      	pop	{r7, pc}
   125aa:	bf00      	nop
   125ac:	00014b20 	.word	0x00014b20
   125b0:	00004211 	.word	0x00004211

000125b4 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   125b4:	b480      	push	{r7}
   125b6:	b083      	sub	sp, #12
   125b8:	af00      	add	r7, sp, #0
   125ba:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   125bc:	687b      	ldr	r3, [r7, #4]
   125be:	4618      	mov	r0, r3
   125c0:	370c      	adds	r7, #12
   125c2:	46bd      	mov	sp, r7
   125c4:	bc80      	pop	{r7}
   125c6:	4770      	bx	lr

000125c8 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   125c8:	b480      	push	{r7}
   125ca:	b083      	sub	sp, #12
   125cc:	af00      	add	r7, sp, #0
   125ce:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   125d0:	687b      	ldr	r3, [r7, #4]
   125d2:	4618      	mov	r0, r3
   125d4:	370c      	adds	r7, #12
   125d6:	46bd      	mov	sp, r7
   125d8:	bc80      	pop	{r7}
   125da:	4770      	bx	lr

000125dc <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   125dc:	b480      	push	{r7}
   125de:	b085      	sub	sp, #20
   125e0:	af00      	add	r7, sp, #0
   125e2:	6078      	str	r0, [r7, #4]
   125e4:	460b      	mov	r3, r1
   125e6:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   125e8:	2300      	movs	r3, #0
   125ea:	73fb      	strb	r3, [r7, #15]
   125ec:	7bfb      	ldrb	r3, [r7, #15]
   125ee:	2b01      	cmp	r3, #1
   125f0:	dc13      	bgt.n	1261a <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   125f2:	7bfb      	ldrb	r3, [r7, #15]
   125f4:	78f9      	ldrb	r1, [r7, #3]
   125f6:	7bfa      	ldrb	r2, [r7, #15]
   125f8:	2080      	movs	r0, #128	; 0x80
   125fa:	fa40 f202 	asr.w	r2, r0, r2
   125fe:	400a      	ands	r2, r1
   12600:	2a00      	cmp	r2, #0
   12602:	bfcc      	ite	gt
   12604:	2201      	movgt	r2, #1
   12606:	2200      	movle	r2, #0
   12608:	b2d1      	uxtb	r1, r2
   1260a:	687a      	ldr	r2, [r7, #4]
   1260c:	4413      	add	r3, r2
   1260e:	460a      	mov	r2, r1
   12610:	755a      	strb	r2, [r3, #21]
	for (uint8_t ii = 0; ii < 2; ii++)
   12612:	7bfb      	ldrb	r3, [r7, #15]
   12614:	3301      	adds	r3, #1
   12616:	73fb      	strb	r3, [r7, #15]
   12618:	e7e8      	b.n	125ec <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   1261a:	bf00      	nop
   1261c:	3714      	adds	r7, #20
   1261e:	46bd      	mov	sp, r7
   12620:	bc80      	pop	{r7}
   12622:	4770      	bx	lr

00012624 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   12624:	b480      	push	{r7}
   12626:	b085      	sub	sp, #20
   12628:	af00      	add	r7, sp, #0
   1262a:	6078      	str	r0, [r7, #4]
   1262c:	460b      	mov	r3, r1
   1262e:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   12630:	2300      	movs	r3, #0
   12632:	73fb      	strb	r3, [r7, #15]
   12634:	7bfb      	ldrb	r3, [r7, #15]
   12636:	2b02      	cmp	r3, #2
   12638:	dc15      	bgt.n	12666 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   1263a:	7bfb      	ldrb	r3, [r7, #15]
   1263c:	f1c3 0302 	rsb	r3, r3, #2
   12640:	78f9      	ldrb	r1, [r7, #3]
   12642:	7bfa      	ldrb	r2, [r7, #15]
   12644:	2020      	movs	r0, #32
   12646:	fa40 f202 	asr.w	r2, r0, r2
   1264a:	400a      	ands	r2, r1
   1264c:	2a00      	cmp	r2, #0
   1264e:	bfcc      	ite	gt
   12650:	2201      	movgt	r2, #1
   12652:	2200      	movle	r2, #0
   12654:	b2d1      	uxtb	r1, r2
   12656:	687a      	ldr	r2, [r7, #4]
   12658:	4413      	add	r3, r2
   1265a:	460a      	mov	r2, r1
   1265c:	75da      	strb	r2, [r3, #23]
	for (uint8_t ii = 0; ii < 3; ii++)
   1265e:	7bfb      	ldrb	r3, [r7, #15]
   12660:	3301      	adds	r3, #1
   12662:	73fb      	strb	r3, [r7, #15]
   12664:	e7e6      	b.n	12634 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   12666:	bf00      	nop
   12668:	3714      	adds	r7, #20
   1266a:	46bd      	mov	sp, r7
   1266c:	bc80      	pop	{r7}
   1266e:	4770      	bx	lr

00012670 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   12670:	b580      	push	{r7, lr}
   12672:	b084      	sub	sp, #16
   12674:	af00      	add	r7, sp, #0
   12676:	60f8      	str	r0, [r7, #12]
   12678:	60b9      	str	r1, [r7, #8]
   1267a:	4613      	mov	r3, r2
   1267c:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   1267e:	79fb      	ldrb	r3, [r7, #7]
   12680:	4619      	mov	r1, r3
   12682:	68b8      	ldr	r0, [r7, #8]
   12684:	4b0d      	ldr	r3, [pc, #52]	; (126bc <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   12686:	4798      	blx	r3
	FillLimitSwitch(v);
   12688:	79fb      	ldrb	r3, [r7, #7]
   1268a:	4619      	mov	r1, r3
   1268c:	68b8      	ldr	r0, [r7, #8]
   1268e:	4b0c      	ldr	r3, [pc, #48]	; (126c0 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   12690:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   12692:	79fb      	ldrb	r3, [r7, #7]
   12694:	f003 0301 	and.w	r3, r3, #1
   12698:	2b00      	cmp	r3, #0
   1269a:	bfcc      	ite	gt
   1269c:	2301      	movgt	r3, #1
   1269e:	2300      	movle	r3, #0
   126a0:	b2da      	uxtb	r2, r3
   126a2:	68bb      	ldr	r3, [r7, #8]
   126a4:	769a      	strb	r2, [r3, #26]
	return controlStatus;
   126a6:	68fa      	ldr	r2, [r7, #12]
   126a8:	68bb      	ldr	r3, [r7, #8]
   126aa:	3315      	adds	r3, #21
   126ac:	6819      	ldr	r1, [r3, #0]
   126ae:	6011      	str	r1, [r2, #0]
   126b0:	889b      	ldrh	r3, [r3, #4]
   126b2:	8093      	strh	r3, [r2, #4]
}
   126b4:	68f8      	ldr	r0, [r7, #12]
   126b6:	3710      	adds	r7, #16
   126b8:	46bd      	mov	sp, r7
   126ba:	bd80      	pop	{r7, pc}
   126bc:	000125dd 	.word	0x000125dd
   126c0:	00012625 	.word	0x00012625

000126c4 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   126c4:	b480      	push	{r7}
   126c6:	b085      	sub	sp, #20
   126c8:	af00      	add	r7, sp, #0
   126ca:	60f8      	str	r0, [r7, #12]
   126cc:	60b9      	str	r1, [r7, #8]
   126ce:	4613      	mov	r3, r2
   126d0:	71fb      	strb	r3, [r7, #7]
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   126d2:	79fb      	ldrb	r3, [r7, #7]
   126d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   126d8:	2b00      	cmp	r3, #0
   126da:	bfcc      	ite	gt
   126dc:	2301      	movgt	r3, #1
   126de:	2300      	movle	r3, #0
   126e0:	b2da      	uxtb	r2, r3
   126e2:	68bb      	ldr	r3, [r7, #8]
   126e4:	76da      	strb	r2, [r3, #27]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   126e6:	79fb      	ldrb	r3, [r7, #7]
   126e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
   126ec:	2b00      	cmp	r3, #0
   126ee:	bfcc      	ite	gt
   126f0:	2301      	movgt	r3, #1
   126f2:	2300      	movle	r3, #0
   126f4:	b2da      	uxtb	r2, r3
   126f6:	68bb      	ldr	r3, [r7, #8]
   126f8:	771a      	strb	r2, [r3, #28]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   126fa:	79fb      	ldrb	r3, [r7, #7]
   126fc:	f003 0320 	and.w	r3, r3, #32
   12700:	2b00      	cmp	r3, #0
   12702:	bfcc      	ite	gt
   12704:	2301      	movgt	r3, #1
   12706:	2300      	movle	r3, #0
   12708:	b2da      	uxtb	r2, r3
   1270a:	68bb      	ldr	r3, [r7, #8]
   1270c:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   1270e:	79fb      	ldrb	r3, [r7, #7]
   12710:	f003 0310 	and.w	r3, r3, #16
   12714:	2b00      	cmp	r3, #0
   12716:	bfcc      	ite	gt
   12718:	2301      	movgt	r3, #1
   1271a:	2300      	movle	r3, #0
   1271c:	b2da      	uxtb	r2, r3
   1271e:	68bb      	ldr	r3, [r7, #8]
   12720:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   12722:	79fb      	ldrb	r3, [r7, #7]
   12724:	f003 0308 	and.w	r3, r3, #8
   12728:	2b00      	cmp	r3, #0
   1272a:	bfcc      	ite	gt
   1272c:	2301      	movgt	r3, #1
   1272e:	2300      	movle	r3, #0
   12730:	b2da      	uxtb	r2, r3
   12732:	68bb      	ldr	r3, [r7, #8]
   12734:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   12736:	79fb      	ldrb	r3, [r7, #7]
   12738:	f003 0304 	and.w	r3, r3, #4
   1273c:	2b00      	cmp	r3, #0
   1273e:	bfcc      	ite	gt
   12740:	2301      	movgt	r3, #1
   12742:	2300      	movle	r3, #0
   12744:	b2da      	uxtb	r2, r3
   12746:	68bb      	ldr	r3, [r7, #8]
   12748:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   1274c:	79fb      	ldrb	r3, [r7, #7]
   1274e:	f003 0302 	and.w	r3, r3, #2
   12752:	2b00      	cmp	r3, #0
   12754:	bfcc      	ite	gt
   12756:	2301      	movgt	r3, #1
   12758:	2300      	movle	r3, #0
   1275a:	b2da      	uxtb	r2, r3
   1275c:	68bb      	ldr	r3, [r7, #8]
   1275e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   12762:	79fb      	ldrb	r3, [r7, #7]
   12764:	f003 0301 	and.w	r3, r3, #1
   12768:	2b00      	cmp	r3, #0
   1276a:	bfcc      	ite	gt
   1276c:	2301      	movgt	r3, #1
   1276e:	2300      	movle	r3, #0
   12770:	b2da      	uxtb	r2, r3
   12772:	68bb      	ldr	r3, [r7, #8]
   12774:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	return controlOutputs;
   12778:	68fa      	ldr	r2, [r7, #12]
   1277a:	68bb      	ldr	r3, [r7, #8]
   1277c:	331b      	adds	r3, #27
   1277e:	6819      	ldr	r1, [r3, #0]
   12780:	685b      	ldr	r3, [r3, #4]
   12782:	6011      	str	r1, [r2, #0]
   12784:	6053      	str	r3, [r2, #4]
   12786:	68f8      	ldr	r0, [r7, #12]
   12788:	3714      	adds	r7, #20
   1278a:	46bd      	mov	sp, r7
   1278c:	bc80      	pop	{r7}
   1278e:	4770      	bx	lr

00012790 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   12790:	b480      	push	{r7}
   12792:	b083      	sub	sp, #12
   12794:	af00      	add	r7, sp, #0
   12796:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   12798:	4b04      	ldr	r3, [pc, #16]	; (127ac <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   1279a:	681b      	ldr	r3, [r3, #0]
   1279c:	2201      	movs	r2, #1
   1279e:	709a      	strb	r2, [r3, #2]
	asm("nop");
   127a0:	bf00      	nop
}
   127a2:	bf00      	nop
   127a4:	370c      	adds	r7, #12
   127a6:	46bd      	mov	sp, r7
   127a8:	bc80      	pop	{r7}
   127aa:	4770      	bx	lr
   127ac:	20009f14 	.word	0x20009f14

000127b0 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   127b0:	b480      	push	{r7}
   127b2:	b083      	sub	sp, #12
   127b4:	af00      	add	r7, sp, #0
   127b6:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   127b8:	687b      	ldr	r3, [r7, #4]
   127ba:	4618      	mov	r0, r3
   127bc:	370c      	adds	r7, #12
   127be:	46bd      	mov	sp, r7
   127c0:	bc80      	pop	{r7}
   127c2:	4770      	bx	lr

000127c4 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   127c4:	b480      	push	{r7}
   127c6:	b083      	sub	sp, #12
   127c8:	af00      	add	r7, sp, #0
   127ca:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   127cc:	687b      	ldr	r3, [r7, #4]
   127ce:	4618      	mov	r0, r3
   127d0:	370c      	adds	r7, #12
   127d2:	46bd      	mov	sp, r7
   127d4:	bc80      	pop	{r7}
   127d6:	4770      	bx	lr

000127d8 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   127d8:	b580      	push	{r7, lr}
   127da:	b084      	sub	sp, #16
   127dc:	af00      	add	r7, sp, #0
   127de:	60f8      	str	r0, [r7, #12]
   127e0:	60b9      	str	r1, [r7, #8]
   127e2:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   127e4:	4a1c      	ldr	r2, [pc, #112]	; (12858 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   127e6:	68fb      	ldr	r3, [r7, #12]
   127e8:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   127ea:	68fb      	ldr	r3, [r7, #12]
   127ec:	68ba      	ldr	r2, [r7, #8]
   127ee:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
   127f0:	68fb      	ldr	r3, [r7, #12]
   127f2:	687a      	ldr	r2, [r7, #4]
   127f4:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
   127f6:	68fb      	ldr	r3, [r7, #12]
   127f8:	6a1b      	ldr	r3, [r3, #32]
   127fa:	68da      	ldr	r2, [r3, #12]
   127fc:	68fb      	ldr	r3, [r7, #12]
   127fe:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
   12800:	68fb      	ldr	r3, [r7, #12]
   12802:	6a1b      	ldr	r3, [r3, #32]
   12804:	689a      	ldr	r2, [r3, #8]
   12806:	68fb      	ldr	r3, [r7, #12]
   12808:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
   1280a:	68fb      	ldr	r3, [r7, #12]
   1280c:	4a13      	ldr	r2, [pc, #76]	; (1285c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   1280e:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
   12810:	68fb      	ldr	r3, [r7, #12]
   12812:	2204      	movs	r2, #4
   12814:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
   12816:	68fb      	ldr	r3, [r7, #12]
   12818:	2209      	movs	r2, #9
   1281a:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
   1281c:	68fb      	ldr	r3, [r7, #12]
   1281e:	220e      	movs	r2, #14
   12820:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
   12822:	68fb      	ldr	r3, [r7, #12]
   12824:	2213      	movs	r2, #19
   12826:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
   12828:	20c8      	movs	r0, #200	; 0xc8
   1282a:	4b0d      	ldr	r3, [pc, #52]	; (12860 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   1282c:	4798      	blx	r3
	temperatureTimer.Init();
   1282e:	480d      	ldr	r0, [pc, #52]	; (12864 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   12830:	4b0d      	ldr	r3, [pc, #52]	; (12868 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   12832:	4798      	blx	r3
	configure_channels();
   12834:	68f8      	ldr	r0, [r7, #12]
   12836:	4b0d      	ldr	r3, [pc, #52]	; (1286c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   12838:	4798      	blx	r3
	configure_global_parameters();
   1283a:	68f8      	ldr	r0, [r7, #12]
   1283c:	4b0c      	ldr	r3, [pc, #48]	; (12870 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
   1283e:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   12840:	68fb      	ldr	r3, [r7, #12]
   12842:	2201      	movs	r2, #1
   12844:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   12846:	68f8      	ldr	r0, [r7, #12]
   12848:	4b0a      	ldr	r3, [pc, #40]	; (12874 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
   1284a:	4798      	blx	r3
   1284c:	4603      	mov	r3, r0
}
   1284e:	4618      	mov	r0, r3
   12850:	3710      	adds	r7, #16
   12852:	46bd      	mov	sp, r7
   12854:	bd80      	pop	{r7, pc}
   12856:	bf00      	nop
   12858:	20009f14 	.word	0x20009f14
   1285c:	20009e54 	.word	0x20009e54
   12860:	00002bb5 	.word	0x00002bb5
   12864:	20009e14 	.word	0x20009e14
   12868:	0000e661 	.word	0x0000e661
   1286c:	00012c81 	.word	0x00012c81
   12870:	00012d39 	.word	0x00012d39
   12874:	00012d71 	.word	0x00012d71

00012878 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   12878:	b590      	push	{r4, r7, lr}
   1287a:	b089      	sub	sp, #36	; 0x24
   1287c:	af02      	add	r7, sp, #8
   1287e:	60f8      	str	r0, [r7, #12]
   12880:	60b9      	str	r1, [r7, #8]
   12882:	603b      	str	r3, [r7, #0]
   12884:	4613      	mov	r3, r2
   12886:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   12888:	79fb      	ldrb	r3, [r7, #7]
   1288a:	461a      	mov	r2, r3
   1288c:	f44f 7100 	mov.w	r1, #512	; 0x200
   12890:	68f8      	ldr	r0, [r7, #12]
   12892:	4b0b      	ldr	r3, [pc, #44]	; (128c0 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   12894:	4798      	blx	r3
   12896:	4603      	mov	r3, r0
   12898:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   1289a:	8afa      	ldrh	r2, [r7, #22]
   1289c:	683b      	ldr	r3, [r7, #0]
   1289e:	9300      	str	r3, [sp, #0]
   128a0:	4613      	mov	r3, r2
   128a2:	2202      	movs	r2, #2
   128a4:	68b9      	ldr	r1, [r7, #8]
   128a6:	68f8      	ldr	r0, [r7, #12]
   128a8:	4c06      	ldr	r4, [pc, #24]	; (128c4 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   128aa:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   128ac:	8afb      	ldrh	r3, [r7, #22]
   128ae:	79fa      	ldrb	r2, [r7, #7]
   128b0:	68b9      	ldr	r1, [r7, #8]
   128b2:	68f8      	ldr	r0, [r7, #12]
   128b4:	4c04      	ldr	r4, [pc, #16]	; (128c8 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   128b6:	47a0      	blx	r4
}
   128b8:	bf00      	nop
   128ba:	371c      	adds	r7, #28
   128bc:	46bd      	mov	sp, r7
   128be:	bd90      	pop	{r4, r7, pc}
   128c0:	00012c55 	.word	0x00012c55
   128c4:	00012b15 	.word	0x00012b15
   128c8:	00012919 	.word	0x00012919

000128cc <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   128cc:	b590      	push	{r4, r7, lr}
   128ce:	b087      	sub	sp, #28
   128d0:	af02      	add	r7, sp, #8
   128d2:	6078      	str	r0, [r7, #4]
   128d4:	460b      	mov	r3, r1
   128d6:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   128d8:	78fb      	ldrb	r3, [r7, #3]
   128da:	687a      	ldr	r2, [r7, #4]
   128dc:	4413      	add	r3, r2
   128de:	78db      	ldrb	r3, [r3, #3]
   128e0:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	2200      	movs	r2, #0
   128e6:	705a      	strb	r2, [r3, #1]
	ready=false;
   128e8:	687b      	ldr	r3, [r7, #4]
   128ea:	2200      	movs	r2, #0
   128ec:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   128ee:	687b      	ldr	r3, [r7, #4]
   128f0:	6d99      	ldr	r1, [r3, #88]	; 0x58
   128f2:	7bfb      	ldrb	r3, [r7, #15]
   128f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   128f8:	b2db      	uxtb	r3, r3
   128fa:	9300      	str	r3, [sp, #0]
   128fc:	2300      	movs	r3, #0
   128fe:	2202      	movs	r2, #2
   12900:	6878      	ldr	r0, [r7, #4]
   12902:	4c04      	ldr	r4, [pc, #16]	; (12914 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   12904:	47a0      	blx	r4
	channelOnProcess=channel_number;
   12906:	687b      	ldr	r3, [r7, #4]
   12908:	7bfa      	ldrb	r2, [r7, #15]
   1290a:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
   1290c:	bf00      	nop
   1290e:	3714      	adds	r7, #20
   12910:	46bd      	mov	sp, r7
   12912:	bd90      	pop	{r4, r7, pc}
   12914:	00012be5 	.word	0x00012be5

00012918 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   12918:	b590      	push	{r4, r7, lr}
   1291a:	b089      	sub	sp, #36	; 0x24
   1291c:	af02      	add	r7, sp, #8
   1291e:	60f8      	str	r0, [r7, #12]
   12920:	60b9      	str	r1, [r7, #8]
   12922:	4611      	mov	r1, r2
   12924:	461a      	mov	r2, r3
   12926:	460b      	mov	r3, r1
   12928:	71fb      	strb	r3, [r7, #7]
   1292a:	4613      	mov	r3, r2
   1292c:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   1292e:	88ba      	ldrh	r2, [r7, #4]
   12930:	2300      	movs	r3, #0
   12932:	9300      	str	r3, [sp, #0]
   12934:	4613      	mov	r3, r2
   12936:	2203      	movs	r2, #3
   12938:	68b9      	ldr	r1, [r7, #8]
   1293a:	68f8      	ldr	r0, [r7, #12]
   1293c:	4c03      	ldr	r4, [pc, #12]	; (1294c <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
   1293e:	47a0      	blx	r4
   12940:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
   12942:	bf00      	nop
   12944:	371c      	adds	r7, #28
   12946:	46bd      	mov	sp, r7
   12948:	bd90      	pop	{r4, r7, pc}
   1294a:	bf00      	nop
   1294c:	00012b15 	.word	0x00012b15

00012950 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b085      	sub	sp, #20
   12954:	af02      	add	r7, sp, #8
   12956:	6078      	str	r0, [r7, #4]
   12958:	460b      	mov	r3, r1
   1295a:	70fb      	strb	r3, [r7, #3]
   1295c:	4613      	mov	r3, r2
   1295e:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   12960:	78fb      	ldrb	r3, [r7, #3]
   12962:	461a      	mov	r2, r3
   12964:	2110      	movs	r1, #16
   12966:	6878      	ldr	r0, [r7, #4]
   12968:	4b17      	ldr	r3, [pc, #92]	; (129c8 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   1296a:	4798      	blx	r3
   1296c:	4603      	mov	r3, r0
   1296e:	461a      	mov	r2, r3
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   12976:	687b      	ldr	r3, [r7, #4]
   12978:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1297a:	687b      	ldr	r3, [r7, #4]
   1297c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   12980:	2300      	movs	r3, #0
   12982:	9300      	str	r3, [sp, #0]
   12984:	4613      	mov	r3, r2
   12986:	2203      	movs	r2, #3
   12988:	6878      	ldr	r0, [r7, #4]
   1298a:	4c10      	ldr	r4, [pc, #64]	; (129cc <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   1298c:	47a0      	blx	r4
   1298e:	4602      	mov	r2, r0
   12990:	687b      	ldr	r3, [r7, #4]
   12992:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   12994:	687b      	ldr	r3, [r7, #4]
   12996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   12998:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   1299c:	687b      	ldr	r3, [r7, #4]
   1299e:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   129a0:	687b      	ldr	r3, [r7, #4]
   129a2:	6d19      	ldr	r1, [r3, #80]	; 0x50
   129a4:	78bb      	ldrb	r3, [r7, #2]
   129a6:	78fa      	ldrb	r2, [r7, #3]
   129a8:	6878      	ldr	r0, [r7, #4]
   129aa:	4c09      	ldr	r4, [pc, #36]	; (129d0 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   129ac:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   129ae:	687b      	ldr	r3, [r7, #4]
   129b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   129b2:	0e1b      	lsrs	r3, r3, #24
   129b4:	b2da      	uxtb	r2, r3
   129b6:	687b      	ldr	r3, [r7, #4]
   129b8:	71da      	strb	r2, [r3, #7]
	return scaled_result;
   129ba:	687b      	ldr	r3, [r7, #4]
   129bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
   129be:	4618      	mov	r0, r3
   129c0:	370c      	adds	r7, #12
   129c2:	46bd      	mov	sp, r7
   129c4:	bd90      	pop	{r4, r7, pc}
   129c6:	bf00      	nop
   129c8:	00012c55 	.word	0x00012c55
   129cc:	00012b15 	.word	0x00012b15
   129d0:	00012a29 	.word	0x00012a29

000129d4 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   129d4:	b580      	push	{r7, lr}
   129d6:	b082      	sub	sp, #8
   129d8:	af00      	add	r7, sp, #0
   129da:	6078      	str	r0, [r7, #4]
   129dc:	460b      	mov	r3, r1
   129de:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   129e0:	78fb      	ldrb	r3, [r7, #3]
   129e2:	687a      	ldr	r2, [r7, #4]
   129e4:	4413      	add	r3, r2
   129e6:	78db      	ldrb	r3, [r3, #3]
   129e8:	4619      	mov	r1, r3
   129ea:	6878      	ldr	r0, [r7, #4]
   129ec:	4b03      	ldr	r3, [pc, #12]	; (129fc <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   129ee:	4798      	blx	r3
   129f0:	4603      	mov	r3, r0
}
   129f2:	4618      	mov	r0, r3
   129f4:	3708      	adds	r7, #8
   129f6:	46bd      	mov	sp, r7
   129f8:	bd80      	pop	{r7, pc}
   129fa:	bf00      	nop
   129fc:	00012a01 	.word	0x00012a01

00012a00 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   12a00:	b580      	push	{r7, lr}
   12a02:	b082      	sub	sp, #8
   12a04:	af00      	add	r7, sp, #0
   12a06:	6078      	str	r0, [r7, #4]
   12a08:	460b      	mov	r3, r1
   12a0a:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   12a0c:	78fb      	ldrb	r3, [r7, #3]
   12a0e:	2202      	movs	r2, #2
   12a10:	4619      	mov	r1, r3
   12a12:	6878      	ldr	r0, [r7, #4]
   12a14:	4b03      	ldr	r3, [pc, #12]	; (12a24 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   12a16:	4798      	blx	r3
   12a18:	4603      	mov	r3, r0
}
   12a1a:	4618      	mov	r0, r3
   12a1c:	3708      	adds	r7, #8
   12a1e:	46bd      	mov	sp, r7
   12a20:	bd80      	pop	{r7, pc}
   12a22:	bf00      	nop
   12a24:	00012951 	.word	0x00012951

00012a28 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   12a28:	b580      	push	{r7, lr}
   12a2a:	b084      	sub	sp, #16
   12a2c:	af00      	add	r7, sp, #0
   12a2e:	60f8      	str	r0, [r7, #12]
   12a30:	60b9      	str	r1, [r7, #8]
   12a32:	4611      	mov	r1, r2
   12a34:	461a      	mov	r2, r3
   12a36:	460b      	mov	r3, r1
   12a38:	71fb      	strb	r3, [r7, #7]
   12a3a:	4613      	mov	r3, r2
   12a3c:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   12a3e:	68ba      	ldr	r2, [r7, #8]
   12a40:	68fb      	ldr	r3, [r7, #12]
   12a42:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   12a44:	68fb      	ldr	r3, [r7, #12]
   12a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   12a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   12a4c:	2b00      	cmp	r3, #0
   12a4e:	d006      	beq.n	12a5e <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   12a50:	68fb      	ldr	r3, [r7, #12]
   12a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   12a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   12a58:	461a      	mov	r2, r3
   12a5a:	68fb      	ldr	r3, [r7, #12]
   12a5c:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
   12a5e:	79bb      	ldrb	r3, [r7, #6]
   12a60:	2b02      	cmp	r3, #2
   12a62:	d11d      	bne.n	12aa0 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
   12a64:	68fb      	ldr	r3, [r7, #12]
   12a66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   12a68:	4b18      	ldr	r3, [pc, #96]	; (12acc <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   12a6a:	4610      	mov	r0, r2
   12a6c:	4798      	blx	r3
   12a6e:	4602      	mov	r2, r0
   12a70:	4b17      	ldr	r3, [pc, #92]	; (12ad0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   12a72:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   12a76:	4610      	mov	r0, r2
   12a78:	4798      	blx	r3
   12a7a:	4603      	mov	r3, r0
   12a7c:	461a      	mov	r2, r3
   12a7e:	68fb      	ldr	r3, [r7, #12]
   12a80:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   12a82:	79fb      	ldrb	r3, [r7, #7]
   12a84:	4619      	mov	r1, r3
   12a86:	68f8      	ldr	r0, [r7, #12]
   12a88:	4b12      	ldr	r3, [pc, #72]	; (12ad4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   12a8a:	4798      	blx	r3
   12a8c:	4603      	mov	r3, r0
   12a8e:	4618      	mov	r0, r3
   12a90:	68fb      	ldr	r3, [r7, #12]
   12a92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   12a94:	68f9      	ldr	r1, [r7, #12]
   12a96:	1c83      	adds	r3, r0, #2
   12a98:	009b      	lsls	r3, r3, #2
   12a9a:	440b      	add	r3, r1
   12a9c:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   12a9e:	e011      	b.n	12ac4 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
   12aa0:	79bb      	ldrb	r3, [r7, #6]
   12aa2:	2b01      	cmp	r3, #1
   12aa4:	d10e      	bne.n	12ac4 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
   12aa6:	68fb      	ldr	r3, [r7, #12]
   12aa8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   12aaa:	4b08      	ldr	r3, [pc, #32]	; (12acc <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   12aac:	4610      	mov	r0, r2
   12aae:	4798      	blx	r3
   12ab0:	4602      	mov	r2, r0
   12ab2:	4b07      	ldr	r3, [pc, #28]	; (12ad0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   12ab4:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   12ab8:	4610      	mov	r0, r2
   12aba:	4798      	blx	r3
   12abc:	4603      	mov	r3, r0
   12abe:	461a      	mov	r2, r3
   12ac0:	68fb      	ldr	r3, [r7, #12]
   12ac2:	65da      	str	r2, [r3, #92]	; 0x5c
}
   12ac4:	bf00      	nop
   12ac6:	3710      	adds	r7, #16
   12ac8:	46bd      	mov	sp, r7
   12aca:	bd80      	pop	{r7, pc}
   12acc:	00013e5d 	.word	0x00013e5d
   12ad0:	0001406d 	.word	0x0001406d
   12ad4:	00012ad9 	.word	0x00012ad9

00012ad8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   12ad8:	b480      	push	{r7}
   12ada:	b085      	sub	sp, #20
   12adc:	af00      	add	r7, sp, #0
   12ade:	6078      	str	r0, [r7, #4]
   12ae0:	460b      	mov	r3, r1
   12ae2:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   12ae4:	2300      	movs	r3, #0
   12ae6:	73fb      	strb	r3, [r7, #15]
   12ae8:	7bfb      	ldrb	r3, [r7, #15]
   12aea:	2b03      	cmp	r3, #3
   12aec:	dc0c      	bgt.n	12b08 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   12aee:	7bfb      	ldrb	r3, [r7, #15]
   12af0:	687a      	ldr	r2, [r7, #4]
   12af2:	4413      	add	r3, r2
   12af4:	78db      	ldrb	r3, [r3, #3]
   12af6:	78fa      	ldrb	r2, [r7, #3]
   12af8:	429a      	cmp	r2, r3
   12afa:	d101      	bne.n	12b00 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   12afc:	7bfb      	ldrb	r3, [r7, #15]
   12afe:	e004      	b.n	12b0a <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   12b00:	7bfb      	ldrb	r3, [r7, #15]
   12b02:	3301      	adds	r3, #1
   12b04:	73fb      	strb	r3, [r7, #15]
   12b06:	e7ef      	b.n	12ae8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   12b08:	2300      	movs	r3, #0
}
   12b0a:	4618      	mov	r0, r3
   12b0c:	3714      	adds	r7, #20
   12b0e:	46bd      	mov	sp, r7
   12b10:	bc80      	pop	{r7}
   12b12:	4770      	bx	lr

00012b14 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   12b14:	b590      	push	{r4, r7, lr}
   12b16:	b089      	sub	sp, #36	; 0x24
   12b18:	af02      	add	r7, sp, #8
   12b1a:	60f8      	str	r0, [r7, #12]
   12b1c:	60b9      	str	r1, [r7, #8]
   12b1e:	4611      	mov	r1, r2
   12b20:	461a      	mov	r2, r3
   12b22:	460b      	mov	r3, r1
   12b24:	71fb      	strb	r3, [r7, #7]
   12b26:	4613      	mov	r3, r2
   12b28:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   12b2a:	2300      	movs	r3, #0
   12b2c:	75fb      	strb	r3, [r7, #23]
   12b2e:	7dfb      	ldrb	r3, [r7, #23]
   12b30:	2b06      	cmp	r3, #6
   12b32:	dc09      	bgt.n	12b48 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   12b34:	68fb      	ldr	r3, [r7, #12]
   12b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12b38:	7dfb      	ldrb	r3, [r7, #23]
   12b3a:	4413      	add	r3, r2
   12b3c:	2200      	movs	r2, #0
   12b3e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   12b40:	7dfb      	ldrb	r3, [r7, #23]
   12b42:	3301      	adds	r3, #1
   12b44:	75fb      	strb	r3, [r7, #23]
   12b46:	e7f2      	b.n	12b2e <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   12b48:	68fb      	ldr	r3, [r7, #12]
   12b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b4c:	79fa      	ldrb	r2, [r7, #7]
   12b4e:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   12b50:	68fb      	ldr	r3, [r7, #12]
   12b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b54:	3301      	adds	r3, #1
   12b56:	88ba      	ldrh	r2, [r7, #4]
   12b58:	1212      	asrs	r2, r2, #8
   12b5a:	b2d2      	uxtb	r2, r2
   12b5c:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b62:	3302      	adds	r3, #2
   12b64:	88ba      	ldrh	r2, [r7, #4]
   12b66:	b2d2      	uxtb	r2, r2
   12b68:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   12b6a:	68fb      	ldr	r3, [r7, #12]
   12b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b6e:	3303      	adds	r3, #3
   12b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12b72:	0e12      	lsrs	r2, r2, #24
   12b74:	b2d2      	uxtb	r2, r2
   12b76:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   12b78:	68fb      	ldr	r3, [r7, #12]
   12b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b7c:	3304      	adds	r3, #4
   12b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12b80:	0c12      	lsrs	r2, r2, #16
   12b82:	b2d2      	uxtb	r2, r2
   12b84:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b8a:	3305      	adds	r3, #5
   12b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12b8e:	0a12      	lsrs	r2, r2, #8
   12b90:	b2d2      	uxtb	r2, r2
   12b92:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   12b94:	68fb      	ldr	r3, [r7, #12]
   12b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b98:	3306      	adds	r3, #6
   12b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12b9c:	b2d2      	uxtb	r2, r2
   12b9e:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   12ba0:	68fb      	ldr	r3, [r7, #12]
   12ba2:	6a18      	ldr	r0, [r3, #32]
   12ba4:	68fb      	ldr	r3, [r7, #12]
   12ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12ba8:	f107 0110 	add.w	r1, r7, #16
   12bac:	2307      	movs	r3, #7
   12bae:	9300      	str	r3, [sp, #0]
   12bb0:	460b      	mov	r3, r1
   12bb2:	68b9      	ldr	r1, [r7, #8]
   12bb4:	4c0a      	ldr	r4, [pc, #40]	; (12be0 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   12bb6:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   12bb8:	7c3b      	ldrb	r3, [r7, #16]
   12bba:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   12bbc:	7c7b      	ldrb	r3, [r7, #17]
   12bbe:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   12bc0:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   12bc2:	7cbb      	ldrb	r3, [r7, #18]
   12bc4:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   12bc6:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   12bc8:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   12bca:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
   12bd0:	bf00      	nop
	return output_data;
   12bd2:	68fb      	ldr	r3, [r7, #12]
   12bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   12bd6:	4618      	mov	r0, r3
   12bd8:	371c      	adds	r7, #28
   12bda:	46bd      	mov	sp, r7
   12bdc:	bd90      	pop	{r4, r7, pc}
   12bde:	bf00      	nop
   12be0:	00013109 	.word	0x00013109

00012be4 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   12be4:	b590      	push	{r4, r7, lr}
   12be6:	b087      	sub	sp, #28
   12be8:	af02      	add	r7, sp, #8
   12bea:	60f8      	str	r0, [r7, #12]
   12bec:	60b9      	str	r1, [r7, #8]
   12bee:	4611      	mov	r1, r2
   12bf0:	461a      	mov	r2, r3
   12bf2:	460b      	mov	r3, r1
   12bf4:	71fb      	strb	r3, [r7, #7]
   12bf6:	4613      	mov	r3, r2
   12bf8:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   12bfa:	68fb      	ldr	r3, [r7, #12]
   12bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bfe:	79fa      	ldrb	r2, [r7, #7]
   12c00:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   12c02:	68fb      	ldr	r3, [r7, #12]
   12c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12c06:	3301      	adds	r3, #1
   12c08:	88ba      	ldrh	r2, [r7, #4]
   12c0a:	1212      	asrs	r2, r2, #8
   12c0c:	b2d2      	uxtb	r2, r2
   12c0e:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   12c10:	68fb      	ldr	r3, [r7, #12]
   12c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12c14:	3302      	adds	r3, #2
   12c16:	88ba      	ldrh	r2, [r7, #4]
   12c18:	b2d2      	uxtb	r2, r2
   12c1a:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   12c1c:	68fb      	ldr	r3, [r7, #12]
   12c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12c20:	3303      	adds	r3, #3
   12c22:	f897 2020 	ldrb.w	r2, [r7, #32]
   12c26:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   12c28:	68fb      	ldr	r3, [r7, #12]
   12c2a:	6a18      	ldr	r0, [r3, #32]
   12c2c:	68fb      	ldr	r3, [r7, #12]
   12c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12c30:	68fb      	ldr	r3, [r7, #12]
   12c32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   12c34:	2304      	movs	r3, #4
   12c36:	9300      	str	r3, [sp, #0]
   12c38:	460b      	mov	r3, r1
   12c3a:	68b9      	ldr	r1, [r7, #8]
   12c3c:	4c04      	ldr	r4, [pc, #16]	; (12c50 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   12c3e:	47a0      	blx	r4
	return rx[0];
   12c40:	68fb      	ldr	r3, [r7, #12]
   12c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12c44:	781b      	ldrb	r3, [r3, #0]
}
   12c46:	4618      	mov	r0, r3
   12c48:	3714      	adds	r7, #20
   12c4a:	46bd      	mov	sp, r7
   12c4c:	bd90      	pop	{r4, r7, pc}
   12c4e:	bf00      	nop
   12c50:	00013109 	.word	0x00013109

00012c54 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   12c54:	b480      	push	{r7}
   12c56:	b083      	sub	sp, #12
   12c58:	af00      	add	r7, sp, #0
   12c5a:	6078      	str	r0, [r7, #4]
   12c5c:	460b      	mov	r3, r1
   12c5e:	807b      	strh	r3, [r7, #2]
   12c60:	4613      	mov	r3, r2
   12c62:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   12c64:	787b      	ldrb	r3, [r7, #1]
   12c66:	3b01      	subs	r3, #1
   12c68:	b29b      	uxth	r3, r3
   12c6a:	009b      	lsls	r3, r3, #2
   12c6c:	b29a      	uxth	r2, r3
   12c6e:	887b      	ldrh	r3, [r7, #2]
   12c70:	4413      	add	r3, r2
   12c72:	b29b      	uxth	r3, r3
}
   12c74:	4618      	mov	r0, r3
   12c76:	370c      	adds	r7, #12
   12c78:	46bd      	mov	sp, r7
   12c7a:	bc80      	pop	{r7}
   12c7c:	4770      	bx	lr
	...

00012c80 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   12c80:	b590      	push	{r4, r7, lr}
   12c82:	b085      	sub	sp, #20
   12c84:	af00      	add	r7, sp, #0
   12c86:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
   12c88:	4b25      	ldr	r3, [pc, #148]	; (12d20 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   12c8a:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
   12c8c:	687b      	ldr	r3, [r7, #4]
   12c8e:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12c90:	68fb      	ldr	r3, [r7, #12]
   12c92:	2202      	movs	r2, #2
   12c94:	6878      	ldr	r0, [r7, #4]
   12c96:	4c23      	ldr	r4, [pc, #140]	; (12d24 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12c98:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
   12c9a:	4b23      	ldr	r3, [pc, #140]	; (12d28 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
   12c9c:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
   12c9e:	687b      	ldr	r3, [r7, #4]
   12ca0:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12ca2:	68fb      	ldr	r3, [r7, #12]
   12ca4:	2204      	movs	r2, #4
   12ca6:	6878      	ldr	r0, [r7, #4]
   12ca8:	4c1e      	ldr	r4, [pc, #120]	; (12d24 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12caa:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
   12cac:	4b1c      	ldr	r3, [pc, #112]	; (12d20 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   12cae:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
   12cb0:	687b      	ldr	r3, [r7, #4]
   12cb2:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12cb4:	68fb      	ldr	r3, [r7, #12]
   12cb6:	2207      	movs	r2, #7
   12cb8:	6878      	ldr	r0, [r7, #4]
   12cba:	4c1a      	ldr	r4, [pc, #104]	; (12d24 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12cbc:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
   12cbe:	4b1b      	ldr	r3, [pc, #108]	; (12d2c <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
   12cc0:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
   12cc2:	687b      	ldr	r3, [r7, #4]
   12cc4:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12cc6:	68fb      	ldr	r3, [r7, #12]
   12cc8:	2209      	movs	r2, #9
   12cca:	6878      	ldr	r0, [r7, #4]
   12ccc:	4c15      	ldr	r4, [pc, #84]	; (12d24 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12cce:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
   12cd0:	4b13      	ldr	r3, [pc, #76]	; (12d20 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   12cd2:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
   12cd4:	687b      	ldr	r3, [r7, #4]
   12cd6:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12cd8:	68fb      	ldr	r3, [r7, #12]
   12cda:	220c      	movs	r2, #12
   12cdc:	6878      	ldr	r0, [r7, #4]
   12cde:	4c11      	ldr	r4, [pc, #68]	; (12d24 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12ce0:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
   12ce2:	4b13      	ldr	r3, [pc, #76]	; (12d30 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
   12ce4:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
   12ce6:	687b      	ldr	r3, [r7, #4]
   12ce8:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12cea:	68fb      	ldr	r3, [r7, #12]
   12cec:	220e      	movs	r2, #14
   12cee:	6878      	ldr	r0, [r7, #4]
   12cf0:	4c0c      	ldr	r4, [pc, #48]	; (12d24 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12cf2:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
   12cf4:	4b0a      	ldr	r3, [pc, #40]	; (12d20 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   12cf6:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
   12cf8:	687b      	ldr	r3, [r7, #4]
   12cfa:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12cfc:	68fb      	ldr	r3, [r7, #12]
   12cfe:	2211      	movs	r2, #17
   12d00:	6878      	ldr	r0, [r7, #4]
   12d02:	4c08      	ldr	r4, [pc, #32]	; (12d24 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12d04:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
   12d06:	4b0b      	ldr	r3, [pc, #44]	; (12d34 <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
   12d08:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
   12d0a:	687b      	ldr	r3, [r7, #4]
   12d0c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	2213      	movs	r2, #19
   12d12:	6878      	ldr	r0, [r7, #4]
   12d14:	4c03      	ldr	r4, [pc, #12]	; (12d24 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12d16:	47a0      	blx	r4

}
   12d18:	bf00      	nop
   12d1a:	3714      	adds	r7, #20
   12d1c:	46bd      	mov	sp, r7
   12d1e:	bd90      	pop	{r4, r7, pc}
   12d20:	e89c4000 	.word	0xe89c4000
   12d24:	00012879 	.word	0x00012879
   12d28:	60a91000 	.word	0x60a91000
   12d2c:	61e91000 	.word	0x61e91000
   12d30:	63291000 	.word	0x63291000
   12d34:	64691000 	.word	0x64691000

00012d38 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   12d38:	b590      	push	{r4, r7, lr}
   12d3a:	b085      	sub	sp, #20
   12d3c:	af02      	add	r7, sp, #8
   12d3e:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   12d40:	687b      	ldr	r3, [r7, #4]
   12d42:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
   12d44:	2300      	movs	r3, #0
   12d46:	9300      	str	r3, [sp, #0]
   12d48:	23f0      	movs	r3, #240	; 0xf0
   12d4a:	2202      	movs	r2, #2
   12d4c:	6878      	ldr	r0, [r7, #4]
   12d4e:	4c07      	ldr	r4, [pc, #28]	; (12d6c <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   12d50:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   12d52:	687b      	ldr	r3, [r7, #4]
   12d54:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12d56:	2300      	movs	r3, #0
   12d58:	9300      	str	r3, [sp, #0]
   12d5a:	23ff      	movs	r3, #255	; 0xff
   12d5c:	2202      	movs	r2, #2
   12d5e:	6878      	ldr	r0, [r7, #4]
   12d60:	4c02      	ldr	r4, [pc, #8]	; (12d6c <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   12d62:	47a0      	blx	r4
}
   12d64:	bf00      	nop
   12d66:	370c      	adds	r7, #12
   12d68:	46bd      	mov	sp, r7
   12d6a:	bd90      	pop	{r4, r7, pc}
   12d6c:	00012be5 	.word	0x00012be5

00012d70 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   12d70:	b580      	push	{r7, lr}
   12d72:	b082      	sub	sp, #8
   12d74:	af00      	add	r7, sp, #0
   12d76:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   12d78:	687b      	ldr	r3, [r7, #4]
   12d7a:	2200      	movs	r2, #0
   12d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
   12d80:	687b      	ldr	r3, [r7, #4]
   12d82:	2200      	movs	r2, #0
   12d84:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   12d86:	4a31      	ldr	r2, [pc, #196]	; (12e4c <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   12d88:	687b      	ldr	r3, [r7, #4]
   12d8a:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   12d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12d90:	492f      	ldr	r1, [pc, #188]	; (12e50 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   12d92:	4830      	ldr	r0, [pc, #192]	; (12e54 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   12d94:	4b30      	ldr	r3, [pc, #192]	; (12e58 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   12d96:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   12d98:	687b      	ldr	r3, [r7, #4]
   12d9a:	79db      	ldrb	r3, [r3, #7]
   12d9c:	2b01      	cmp	r3, #1
   12d9e:	d009      	beq.n	12db4 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   12da0:	687b      	ldr	r3, [r7, #4]
   12da2:	789b      	ldrb	r3, [r3, #2]
   12da4:	b2db      	uxtb	r3, r3
   12da6:	f083 0301 	eor.w	r3, r3, #1
   12daa:	b2db      	uxtb	r3, r3
   12dac:	2b00      	cmp	r3, #0
   12dae:	d001      	beq.n	12db4 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   12db0:	2301      	movs	r3, #1
   12db2:	e000      	b.n	12db6 <_ZN13LTC2983_Class8SelfTestEv+0x46>
   12db4:	2300      	movs	r3, #0
   12db6:	2b00      	cmp	r3, #0
   12db8:	d034      	beq.n	12e24 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   12dba:	2100      	movs	r1, #0
   12dbc:	6878      	ldr	r0, [r7, #4]
   12dbe:	4b27      	ldr	r3, [pc, #156]	; (12e5c <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   12dc0:	4798      	blx	r3
		delay_ms(1);
   12dc2:	2001      	movs	r0, #1
   12dc4:	4b26      	ldr	r3, [pc, #152]	; (12e60 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   12dc6:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   12dc8:	687b      	ldr	r3, [r7, #4]
   12dca:	781b      	ldrb	r3, [r3, #0]
   12dcc:	b2db      	uxtb	r3, r3
   12dce:	f083 0301 	eor.w	r3, r3, #1
   12dd2:	b2db      	uxtb	r3, r3
   12dd4:	2b00      	cmp	r3, #0
   12dd6:	d009      	beq.n	12dec <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   12dd8:	687b      	ldr	r3, [r7, #4]
   12dda:	789b      	ldrb	r3, [r3, #2]
   12ddc:	b2db      	uxtb	r3, r3
   12dde:	f083 0301 	eor.w	r3, r3, #1
   12de2:	b2db      	uxtb	r3, r3
   12de4:	2b00      	cmp	r3, #0
   12de6:	d001      	beq.n	12dec <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   12de8:	2301      	movs	r3, #1
   12dea:	e000      	b.n	12dee <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   12dec:	2300      	movs	r3, #0
   12dee:	2b00      	cmp	r3, #0
   12df0:	d000      	beq.n	12df4 <_ZN13LTC2983_Class8SelfTestEv+0x84>
   12df2:	e7e9      	b.n	12dc8 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   12df4:	687b      	ldr	r3, [r7, #4]
   12df6:	789b      	ldrb	r3, [r3, #2]
   12df8:	b2db      	uxtb	r3, r3
   12dfa:	f083 0301 	eor.w	r3, r3, #1
   12dfe:	b2db      	uxtb	r3, r3
   12e00:	2b00      	cmp	r3, #0
   12e02:	d0c9      	beq.n	12d98 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   12e04:	687b      	ldr	r3, [r7, #4]
   12e06:	781b      	ldrb	r3, [r3, #0]
   12e08:	b2db      	uxtb	r3, r3
   12e0a:	2b00      	cmp	r3, #0
   12e0c:	d006      	beq.n	12e1c <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   12e0e:	687b      	ldr	r3, [r7, #4]
   12e10:	78db      	ldrb	r3, [r3, #3]
   12e12:	4619      	mov	r1, r3
   12e14:	6878      	ldr	r0, [r7, #4]
   12e16:	4b13      	ldr	r3, [pc, #76]	; (12e64 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   12e18:	4798      	blx	r3
   12e1a:	e7bd      	b.n	12d98 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   12e1c:	2001      	movs	r0, #1
   12e1e:	4b10      	ldr	r3, [pc, #64]	; (12e60 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   12e20:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   12e22:	e7b9      	b.n	12d98 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   12e24:	490a      	ldr	r1, [pc, #40]	; (12e50 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   12e26:	480b      	ldr	r0, [pc, #44]	; (12e54 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   12e28:	4b0f      	ldr	r3, [pc, #60]	; (12e68 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   12e2a:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   12e2c:	687b      	ldr	r3, [r7, #4]
   12e2e:	79db      	ldrb	r3, [r3, #7]
   12e30:	2b01      	cmp	r3, #1
   12e32:	bf0c      	ite	eq
   12e34:	2301      	moveq	r3, #1
   12e36:	2300      	movne	r3, #0
   12e38:	b2da      	uxtb	r2, r3
   12e3a:	687b      	ldr	r3, [r7, #4]
   12e3c:	771a      	strb	r2, [r3, #28]
	return	isOK;
   12e3e:	687b      	ldr	r3, [r7, #4]
   12e40:	7f1b      	ldrb	r3, [r3, #28]
	}
   12e42:	4618      	mov	r0, r3
   12e44:	3708      	adds	r7, #8
   12e46:	46bd      	mov	sp, r7
   12e48:	bd80      	pop	{r7, pc}
   12e4a:	bf00      	nop
   12e4c:	20009f14 	.word	0x20009f14
   12e50:	00012791 	.word	0x00012791
   12e54:	20009e14 	.word	0x20009e14
   12e58:	0000e849 	.word	0x0000e849
   12e5c:	000128cd 	.word	0x000128cd
   12e60:	00002bb5 	.word	0x00002bb5
   12e64:	00012a01 	.word	0x00012a01
   12e68:	0000e7f1 	.word	0x0000e7f1

00012e6c <_Z41__static_initialization_and_destruction_0ii>:
   12e6c:	b580      	push	{r7, lr}
   12e6e:	b082      	sub	sp, #8
   12e70:	af00      	add	r7, sp, #0
   12e72:	6078      	str	r0, [r7, #4]
   12e74:	6039      	str	r1, [r7, #0]
   12e76:	687b      	ldr	r3, [r7, #4]
   12e78:	2b01      	cmp	r3, #1
   12e7a:	d14c      	bne.n	12f16 <_Z41__static_initialization_and_destruction_0ii+0xaa>
   12e7c:	683b      	ldr	r3, [r7, #0]
   12e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12e82:	4293      	cmp	r3, r2
   12e84:	d147      	bne.n	12f16 <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   12e86:	4926      	ldr	r1, [pc, #152]	; (12f20 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   12e88:	4826      	ldr	r0, [pc, #152]	; (12f24 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   12e8a:	4b27      	ldr	r3, [pc, #156]	; (12f28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12e8c:	4798      	blx	r3
   12e8e:	4a27      	ldr	r2, [pc, #156]	; (12f2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12e90:	4927      	ldr	r1, [pc, #156]	; (12f30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   12e92:	4824      	ldr	r0, [pc, #144]	; (12f24 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   12e94:	4b27      	ldr	r3, [pc, #156]	; (12f34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12e96:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   12e98:	4927      	ldr	r1, [pc, #156]	; (12f38 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   12e9a:	4828      	ldr	r0, [pc, #160]	; (12f3c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   12e9c:	4b22      	ldr	r3, [pc, #136]	; (12f28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12e9e:	4798      	blx	r3
   12ea0:	4a22      	ldr	r2, [pc, #136]	; (12f2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12ea2:	4923      	ldr	r1, [pc, #140]	; (12f30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   12ea4:	4825      	ldr	r0, [pc, #148]	; (12f3c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   12ea6:	4b23      	ldr	r3, [pc, #140]	; (12f34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12ea8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   12eaa:	4925      	ldr	r1, [pc, #148]	; (12f40 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   12eac:	4825      	ldr	r0, [pc, #148]	; (12f44 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   12eae:	4b1e      	ldr	r3, [pc, #120]	; (12f28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12eb0:	4798      	blx	r3
   12eb2:	4a1e      	ldr	r2, [pc, #120]	; (12f2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12eb4:	491e      	ldr	r1, [pc, #120]	; (12f30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   12eb6:	4823      	ldr	r0, [pc, #140]	; (12f44 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   12eb8:	4b1e      	ldr	r3, [pc, #120]	; (12f34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12eba:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   12ebc:	4922      	ldr	r1, [pc, #136]	; (12f48 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   12ebe:	4823      	ldr	r0, [pc, #140]	; (12f4c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   12ec0:	4b19      	ldr	r3, [pc, #100]	; (12f28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12ec2:	4798      	blx	r3
   12ec4:	4a19      	ldr	r2, [pc, #100]	; (12f2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12ec6:	491a      	ldr	r1, [pc, #104]	; (12f30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   12ec8:	4820      	ldr	r0, [pc, #128]	; (12f4c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   12eca:	4b1a      	ldr	r3, [pc, #104]	; (12f34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12ecc:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   12ece:	4920      	ldr	r1, [pc, #128]	; (12f50 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   12ed0:	4820      	ldr	r0, [pc, #128]	; (12f54 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   12ed2:	4b15      	ldr	r3, [pc, #84]	; (12f28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12ed4:	4798      	blx	r3
   12ed6:	4a15      	ldr	r2, [pc, #84]	; (12f2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12ed8:	4915      	ldr	r1, [pc, #84]	; (12f30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   12eda:	481e      	ldr	r0, [pc, #120]	; (12f54 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   12edc:	4b15      	ldr	r3, [pc, #84]	; (12f34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12ede:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   12ee0:	491d      	ldr	r1, [pc, #116]	; (12f58 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   12ee2:	481e      	ldr	r0, [pc, #120]	; (12f5c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   12ee4:	4b10      	ldr	r3, [pc, #64]	; (12f28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12ee6:	4798      	blx	r3
   12ee8:	4a10      	ldr	r2, [pc, #64]	; (12f2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12eea:	4911      	ldr	r1, [pc, #68]	; (12f30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   12eec:	481b      	ldr	r0, [pc, #108]	; (12f5c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   12eee:	4b11      	ldr	r3, [pc, #68]	; (12f34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12ef0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   12ef2:	491b      	ldr	r1, [pc, #108]	; (12f60 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   12ef4:	481b      	ldr	r0, [pc, #108]	; (12f64 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   12ef6:	4b0c      	ldr	r3, [pc, #48]	; (12f28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12ef8:	4798      	blx	r3
   12efa:	4a0c      	ldr	r2, [pc, #48]	; (12f2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12efc:	490c      	ldr	r1, [pc, #48]	; (12f30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   12efe:	4819      	ldr	r0, [pc, #100]	; (12f64 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   12f00:	4b0c      	ldr	r3, [pc, #48]	; (12f34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12f02:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   12f04:	4918      	ldr	r1, [pc, #96]	; (12f68 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   12f06:	4819      	ldr	r0, [pc, #100]	; (12f6c <_Z41__static_initialization_and_destruction_0ii+0x100>)
   12f08:	4b07      	ldr	r3, [pc, #28]	; (12f28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12f0a:	4798      	blx	r3
   12f0c:	4a07      	ldr	r2, [pc, #28]	; (12f2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12f0e:	4908      	ldr	r1, [pc, #32]	; (12f30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   12f10:	4816      	ldr	r0, [pc, #88]	; (12f6c <_Z41__static_initialization_and_destruction_0ii+0x100>)
   12f12:	4b08      	ldr	r3, [pc, #32]	; (12f34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12f14:	4798      	blx	r3
   12f16:	bf00      	nop
   12f18:	3708      	adds	r7, #8
   12f1a:	46bd      	mov	sp, r7
   12f1c:	bd80      	pop	{r7, pc}
   12f1e:	bf00      	nop
   12f20:	2000a1c0 	.word	0x2000a1c0
   12f24:	20009e14 	.word	0x20009e14
   12f28:	0000e575 	.word	0x0000e575
   12f2c:	20000000 	.word	0x20000000
   12f30:	0000e5ad 	.word	0x0000e5ad
   12f34:	00013cdd 	.word	0x00013cdd
   12f38:	2000a254 	.word	0x2000a254
   12f3c:	20009e34 	.word	0x20009e34
   12f40:	2000a378 	.word	0x2000a378
   12f44:	20009e54 	.word	0x20009e54
   12f48:	2000a274 	.word	0x2000a274
   12f4c:	20009e74 	.word	0x20009e74
   12f50:	2000a338 	.word	0x2000a338
   12f54:	20009e94 	.word	0x20009e94
   12f58:	2000a358 	.word	0x2000a358
   12f5c:	20009eb4 	.word	0x20009eb4
   12f60:	2000a230 	.word	0x2000a230
   12f64:	20009ed4 	.word	0x20009ed4
   12f68:	2000a2d0 	.word	0x2000a2d0
   12f6c:	20009ef4 	.word	0x20009ef4

00012f70 <_GLOBAL__sub_I_ptrLTCClass>:
   12f70:	b580      	push	{r7, lr}
   12f72:	af00      	add	r7, sp, #0
   12f74:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12f78:	2001      	movs	r0, #1
   12f7a:	4b01      	ldr	r3, [pc, #4]	; (12f80 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   12f7c:	4798      	blx	r3
   12f7e:	bd80      	pop	{r7, pc}
   12f80:	00012e6d 	.word	0x00012e6d

00012f84 <hri_port_set_OUT_reg>:
{
   12f84:	b480      	push	{r7}
   12f86:	b085      	sub	sp, #20
   12f88:	af00      	add	r7, sp, #0
   12f8a:	60f8      	str	r0, [r7, #12]
   12f8c:	460b      	mov	r3, r1
   12f8e:	607a      	str	r2, [r7, #4]
   12f90:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12f92:	7afb      	ldrb	r3, [r7, #11]
   12f94:	68fa      	ldr	r2, [r7, #12]
   12f96:	01db      	lsls	r3, r3, #7
   12f98:	4413      	add	r3, r2
   12f9a:	3318      	adds	r3, #24
   12f9c:	687a      	ldr	r2, [r7, #4]
   12f9e:	601a      	str	r2, [r3, #0]
}
   12fa0:	bf00      	nop
   12fa2:	3714      	adds	r7, #20
   12fa4:	46bd      	mov	sp, r7
   12fa6:	bc80      	pop	{r7}
   12fa8:	4770      	bx	lr

00012faa <hri_port_clear_OUT_reg>:
{
   12faa:	b480      	push	{r7}
   12fac:	b085      	sub	sp, #20
   12fae:	af00      	add	r7, sp, #0
   12fb0:	60f8      	str	r0, [r7, #12]
   12fb2:	460b      	mov	r3, r1
   12fb4:	607a      	str	r2, [r7, #4]
   12fb6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   12fb8:	7afb      	ldrb	r3, [r7, #11]
   12fba:	68fa      	ldr	r2, [r7, #12]
   12fbc:	01db      	lsls	r3, r3, #7
   12fbe:	4413      	add	r3, r2
   12fc0:	3314      	adds	r3, #20
   12fc2:	687a      	ldr	r2, [r7, #4]
   12fc4:	601a      	str	r2, [r3, #0]
}
   12fc6:	bf00      	nop
   12fc8:	3714      	adds	r7, #20
   12fca:	46bd      	mov	sp, r7
   12fcc:	bc80      	pop	{r7}
   12fce:	4770      	bx	lr

00012fd0 <_gpio_set_level>:
{
   12fd0:	b580      	push	{r7, lr}
   12fd2:	b082      	sub	sp, #8
   12fd4:	af00      	add	r7, sp, #0
   12fd6:	4603      	mov	r3, r0
   12fd8:	6039      	str	r1, [r7, #0]
   12fda:	71fb      	strb	r3, [r7, #7]
   12fdc:	4613      	mov	r3, r2
   12fde:	71bb      	strb	r3, [r7, #6]
	if (level) {
   12fe0:	79bb      	ldrb	r3, [r7, #6]
   12fe2:	2b00      	cmp	r3, #0
   12fe4:	d006      	beq.n	12ff4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   12fe6:	79fb      	ldrb	r3, [r7, #7]
   12fe8:	683a      	ldr	r2, [r7, #0]
   12fea:	4619      	mov	r1, r3
   12fec:	4806      	ldr	r0, [pc, #24]	; (13008 <_gpio_set_level+0x38>)
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <_gpio_set_level+0x3c>)
   12ff0:	4798      	blx	r3
}
   12ff2:	e005      	b.n	13000 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   12ff4:	79fb      	ldrb	r3, [r7, #7]
   12ff6:	683a      	ldr	r2, [r7, #0]
   12ff8:	4619      	mov	r1, r3
   12ffa:	4803      	ldr	r0, [pc, #12]	; (13008 <_gpio_set_level+0x38>)
   12ffc:	4b04      	ldr	r3, [pc, #16]	; (13010 <_gpio_set_level+0x40>)
   12ffe:	4798      	blx	r3
}
   13000:	bf00      	nop
   13002:	3708      	adds	r7, #8
   13004:	46bd      	mov	sp, r7
   13006:	bd80      	pop	{r7, pc}
   13008:	41008000 	.word	0x41008000
   1300c:	00012f85 	.word	0x00012f85
   13010:	00012fab 	.word	0x00012fab

00013014 <gpio_set_pin_level>:
{
   13014:	b580      	push	{r7, lr}
   13016:	b082      	sub	sp, #8
   13018:	af00      	add	r7, sp, #0
   1301a:	4603      	mov	r3, r0
   1301c:	460a      	mov	r2, r1
   1301e:	71fb      	strb	r3, [r7, #7]
   13020:	4613      	mov	r3, r2
   13022:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   13024:	79fb      	ldrb	r3, [r7, #7]
   13026:	115b      	asrs	r3, r3, #5
   13028:	b2d8      	uxtb	r0, r3
   1302a:	79fb      	ldrb	r3, [r7, #7]
   1302c:	f003 031f 	and.w	r3, r3, #31
   13030:	2201      	movs	r2, #1
   13032:	fa02 f303 	lsl.w	r3, r2, r3
   13036:	79ba      	ldrb	r2, [r7, #6]
   13038:	4619      	mov	r1, r3
   1303a:	4b03      	ldr	r3, [pc, #12]	; (13048 <gpio_set_pin_level+0x34>)
   1303c:	4798      	blx	r3
}
   1303e:	bf00      	nop
   13040:	3708      	adds	r7, #8
   13042:	46bd      	mov	sp, r7
   13044:	bd80      	pop	{r7, pc}
   13046:	bf00      	nop
   13048:	00012fd1 	.word	0x00012fd1

0001304c <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   1304c:	b480      	push	{r7}
   1304e:	b083      	sub	sp, #12
   13050:	af00      	add	r7, sp, #0
   13052:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   13054:	4a05      	ldr	r2, [pc, #20]	; (1306c <_ZN6LT_SPIC1Ev+0x20>)
   13056:	687b      	ldr	r3, [r7, #4]
   13058:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   1305a:	687b      	ldr	r3, [r7, #4]
   1305c:	4a04      	ldr	r2, [pc, #16]	; (13070 <_ZN6LT_SPIC1Ev+0x24>)
   1305e:	605a      	str	r2, [r3, #4]
} //LT_SPI
   13060:	687b      	ldr	r3, [r7, #4]
   13062:	4618      	mov	r0, r3
   13064:	370c      	adds	r7, #12
   13066:	46bd      	mov	sp, r7
   13068:	bc80      	pop	{r7}
   1306a:	4770      	bx	lr
   1306c:	20009f18 	.word	0x20009f18
   13070:	20009f1c 	.word	0x20009f1c

00013074 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   13074:	b480      	push	{r7}
   13076:	b083      	sub	sp, #12
   13078:	af00      	add	r7, sp, #0
   1307a:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   1307c:	687b      	ldr	r3, [r7, #4]
   1307e:	4618      	mov	r0, r3
   13080:	370c      	adds	r7, #12
   13082:	46bd      	mov	sp, r7
   13084:	bc80      	pop	{r7}
   13086:	4770      	bx	lr

00013088 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   13088:	b580      	push	{r7, lr}
   1308a:	b082      	sub	sp, #8
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	685a      	ldr	r2, [r3, #4]
   13094:	687b      	ldr	r3, [r7, #4]
   13096:	691b      	ldr	r3, [r3, #16]
   13098:	4619      	mov	r1, r3
   1309a:	4610      	mov	r0, r2
   1309c:	4b0e      	ldr	r3, [pc, #56]	; (130d8 <_ZN6LT_SPI4initEv+0x50>)
   1309e:	4798      	blx	r3
	spiTemp->init();
   130a0:	687b      	ldr	r3, [r7, #4]
   130a2:	685b      	ldr	r3, [r3, #4]
   130a4:	4618      	mov	r0, r3
   130a6:	4b0d      	ldr	r3, [pc, #52]	; (130dc <_ZN6LT_SPI4initEv+0x54>)
   130a8:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   130aa:	687b      	ldr	r3, [r7, #4]
   130ac:	685b      	ldr	r3, [r3, #4]
   130ae:	685a      	ldr	r2, [r3, #4]
   130b0:	687b      	ldr	r3, [r7, #4]
   130b2:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   130b4:	687b      	ldr	r3, [r7, #4]
   130b6:	685b      	ldr	r3, [r3, #4]
   130b8:	689a      	ldr	r2, [r3, #8]
   130ba:	687b      	ldr	r3, [r7, #4]
   130bc:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   130be:	687b      	ldr	r3, [r7, #4]
   130c0:	685b      	ldr	r3, [r3, #4]
   130c2:	4618      	mov	r0, r3
   130c4:	4b06      	ldr	r3, [pc, #24]	; (130e0 <_ZN6LT_SPI4initEv+0x58>)
   130c6:	4798      	blx	r3
	ready=true;
   130c8:	687b      	ldr	r3, [r7, #4]
   130ca:	2201      	movs	r2, #1
   130cc:	701a      	strb	r2, [r3, #0]
}
   130ce:	bf00      	nop
   130d0:	3708      	adds	r7, #8
   130d2:	46bd      	mov	sp, r7
   130d4:	bd80      	pop	{r7, pc}
   130d6:	bf00      	nop
   130d8:	00013331 	.word	0x00013331
   130dc:	000132e9 	.word	0x000132e9
   130e0:	00013355 	.word	0x00013355

000130e4 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   130e4:	b480      	push	{r7}
   130e6:	b083      	sub	sp, #12
   130e8:	af00      	add	r7, sp, #0
   130ea:	6078      	str	r0, [r7, #4]
   130ec:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   130ee:	687b      	ldr	r3, [r7, #4]
   130f0:	683a      	ldr	r2, [r7, #0]
   130f2:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   130f4:	4a03      	ldr	r2, [pc, #12]	; (13104 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   130f6:	687b      	ldr	r3, [r7, #4]
   130f8:	6013      	str	r3, [r2, #0]
}
   130fa:	bf00      	nop
   130fc:	370c      	adds	r7, #12
   130fe:	46bd      	mov	sp, r7
   13100:	bc80      	pop	{r7}
   13102:	4770      	bx	lr
   13104:	20009f18 	.word	0x20009f18

00013108 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   13108:	b580      	push	{r7, lr}
   1310a:	b086      	sub	sp, #24
   1310c:	af00      	add	r7, sp, #0
   1310e:	60f8      	str	r0, [r7, #12]
   13110:	60b9      	str	r1, [r7, #8]
   13112:	607a      	str	r2, [r7, #4]
   13114:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   13116:	687b      	ldr	r3, [r7, #4]
   13118:	781b      	ldrb	r3, [r3, #0]
   1311a:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   1311c:	68b9      	ldr	r1, [r7, #8]
   1311e:	68f8      	ldr	r0, [r7, #12]
   13120:	4b25      	ldr	r3, [pc, #148]	; (131b8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   13122:	4798      	blx	r3
	
	switch(rOrw){
   13124:	7dfb      	ldrb	r3, [r7, #23]
   13126:	2b02      	cmp	r3, #2
   13128:	d002      	beq.n	13130 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   1312a:	2b03      	cmp	r3, #3
   1312c:	d009      	beq.n	13142 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   1312e:	e028      	b.n	13182 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   13130:	68fb      	ldr	r3, [r7, #12]
   13132:	685b      	ldr	r3, [r3, #4]
   13134:	f897 2020 	ldrb.w	r2, [r7, #32]
   13138:	6879      	ldr	r1, [r7, #4]
   1313a:	4618      	mov	r0, r3
   1313c:	4b1f      	ldr	r3, [pc, #124]	; (131bc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   1313e:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   13140:	e031      	b.n	131a6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   13142:	68fb      	ldr	r3, [r7, #12]
   13144:	685b      	ldr	r3, [r3, #4]
   13146:	2203      	movs	r2, #3
   13148:	6879      	ldr	r1, [r7, #4]
   1314a:	4618      	mov	r0, r3
   1314c:	4b1b      	ldr	r3, [pc, #108]	; (131bc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   1314e:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   13150:	f897 3020 	ldrb.w	r3, [r7, #32]
   13154:	2b04      	cmp	r3, #4
   13156:	dd0b      	ble.n	13170 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   13158:	68fb      	ldr	r3, [r7, #12]
   1315a:	6858      	ldr	r0, [r3, #4]
   1315c:	f897 3020 	ldrb.w	r3, [r7, #32]
   13160:	3b03      	subs	r3, #3
   13162:	461a      	mov	r2, r3
   13164:	6839      	ldr	r1, [r7, #0]
   13166:	4b16      	ldr	r3, [pc, #88]	; (131c0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   13168:	4798      	blx	r3
					asm("nop");
   1316a:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   1316c:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   1316e:	e01a      	b.n	131a6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   13170:	68fb      	ldr	r3, [r7, #12]
   13172:	685b      	ldr	r3, [r3, #4]
   13174:	2201      	movs	r2, #1
   13176:	6839      	ldr	r1, [r7, #0]
   13178:	4618      	mov	r0, r3
   1317a:	4b11      	ldr	r3, [pc, #68]	; (131c0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   1317c:	4798      	blx	r3
				asm("nop");
   1317e:	bf00      	nop
			break;
   13180:	e011      	b.n	131a6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   13182:	68fb      	ldr	r3, [r7, #12]
   13184:	685b      	ldr	r3, [r3, #4]
   13186:	f897 2020 	ldrb.w	r2, [r7, #32]
   1318a:	6879      	ldr	r1, [r7, #4]
   1318c:	4618      	mov	r0, r3
   1318e:	4b0b      	ldr	r3, [pc, #44]	; (131bc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   13190:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   13192:	68fb      	ldr	r3, [r7, #12]
   13194:	6858      	ldr	r0, [r3, #4]
   13196:	f897 3020 	ldrb.w	r3, [r7, #32]
   1319a:	3b03      	subs	r3, #3
   1319c:	461a      	mov	r2, r3
   1319e:	6839      	ldr	r1, [r7, #0]
   131a0:	4b07      	ldr	r3, [pc, #28]	; (131c0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   131a2:	4798      	blx	r3
			break;
   131a4:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   131a6:	68b9      	ldr	r1, [r7, #8]
   131a8:	68f8      	ldr	r0, [r7, #12]
   131aa:	4b06      	ldr	r3, [pc, #24]	; (131c4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   131ac:	4798      	blx	r3
	asm("nop");
   131ae:	bf00      	nop
	
}
   131b0:	bf00      	nop
   131b2:	3718      	adds	r7, #24
   131b4:	46bd      	mov	sp, r7
   131b6:	bd80      	pop	{r7, pc}
   131b8:	000131c9 	.word	0x000131c9
   131bc:	00013391 	.word	0x00013391
   131c0:	000133d5 	.word	0x000133d5
   131c4:	00013211 	.word	0x00013211

000131c8 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   131c8:	b580      	push	{r7, lr}
   131ca:	b082      	sub	sp, #8
   131cc:	af00      	add	r7, sp, #0
   131ce:	6078      	str	r0, [r7, #4]
   131d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   131d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   131d6:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   131d8:	683b      	ldr	r3, [r7, #0]
   131da:	b2db      	uxtb	r3, r3
   131dc:	2100      	movs	r1, #0
   131de:	4618      	mov	r0, r3
   131e0:	4b08      	ldr	r3, [pc, #32]	; (13204 <_ZN6LT_SPI4OpenEm+0x3c>)
   131e2:	4798      	blx	r3
	 delay_us(10);
   131e4:	200a      	movs	r0, #10
   131e6:	4b08      	ldr	r3, [pc, #32]	; (13208 <_ZN6LT_SPI4OpenEm+0x40>)
   131e8:	4798      	blx	r3
	spiTemp->Enable();
   131ea:	687b      	ldr	r3, [r7, #4]
   131ec:	685b      	ldr	r3, [r3, #4]
   131ee:	4618      	mov	r0, r3
   131f0:	4b06      	ldr	r3, [pc, #24]	; (1320c <_ZN6LT_SPI4OpenEm+0x44>)
   131f2:	4798      	blx	r3
	 delay_us(10);
   131f4:	200a      	movs	r0, #10
   131f6:	4b04      	ldr	r3, [pc, #16]	; (13208 <_ZN6LT_SPI4OpenEm+0x40>)
   131f8:	4798      	blx	r3
 }
   131fa:	bf00      	nop
   131fc:	3708      	adds	r7, #8
   131fe:	46bd      	mov	sp, r7
   13200:	bd80      	pop	{r7, pc}
   13202:	bf00      	nop
   13204:	00013015 	.word	0x00013015
   13208:	00002b81 	.word	0x00002b81
   1320c:	00013355 	.word	0x00013355

00013210 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   13210:	b580      	push	{r7, lr}
   13212:	b082      	sub	sp, #8
   13214:	af00      	add	r7, sp, #0
   13216:	6078      	str	r0, [r7, #4]
   13218:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   1321a:	200a      	movs	r0, #10
   1321c:	4b0b      	ldr	r3, [pc, #44]	; (1324c <_ZN6LT_SPI5CloseEm+0x3c>)
   1321e:	4798      	blx	r3
	 spiTemp->Disable();
   13220:	687b      	ldr	r3, [r7, #4]
   13222:	685b      	ldr	r3, [r3, #4]
   13224:	4618      	mov	r0, r3
   13226:	4b0a      	ldr	r3, [pc, #40]	; (13250 <_ZN6LT_SPI5CloseEm+0x40>)
   13228:	4798      	blx	r3
	delay_us(10);
   1322a:	200a      	movs	r0, #10
   1322c:	4b07      	ldr	r3, [pc, #28]	; (1324c <_ZN6LT_SPI5CloseEm+0x3c>)
   1322e:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   13230:	683b      	ldr	r3, [r7, #0]
   13232:	b2db      	uxtb	r3, r3
   13234:	2101      	movs	r1, #1
   13236:	4618      	mov	r0, r3
   13238:	4b06      	ldr	r3, [pc, #24]	; (13254 <_ZN6LT_SPI5CloseEm+0x44>)
   1323a:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   1323c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   13240:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   13242:	bf00      	nop
   13244:	3708      	adds	r7, #8
   13246:	46bd      	mov	sp, r7
   13248:	bd80      	pop	{r7, pc}
   1324a:	bf00      	nop
   1324c:	00002b81 	.word	0x00002b81
   13250:	00013419 	.word	0x00013419
   13254:	00013015 	.word	0x00013015

00013258 <_Z41__static_initialization_and_destruction_0ii>:
   13258:	b580      	push	{r7, lr}
   1325a:	b082      	sub	sp, #8
   1325c:	af00      	add	r7, sp, #0
   1325e:	6078      	str	r0, [r7, #4]
   13260:	6039      	str	r1, [r7, #0]
   13262:	687b      	ldr	r3, [r7, #4]
   13264:	2b01      	cmp	r3, #1
   13266:	d10c      	bne.n	13282 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13268:	683b      	ldr	r3, [r7, #0]
   1326a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1326e:	4293      	cmp	r3, r2
   13270:	d107      	bne.n	13282 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   13272:	4806      	ldr	r0, [pc, #24]	; (1328c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13274:	4b06      	ldr	r3, [pc, #24]	; (13290 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13276:	4798      	blx	r3
   13278:	4a06      	ldr	r2, [pc, #24]	; (13294 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1327a:	4907      	ldr	r1, [pc, #28]	; (13298 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1327c:	4803      	ldr	r0, [pc, #12]	; (1328c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1327e:	4b07      	ldr	r3, [pc, #28]	; (1329c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13280:	4798      	blx	r3
   13282:	bf00      	nop
   13284:	3708      	adds	r7, #8
   13286:	46bd      	mov	sp, r7
   13288:	bd80      	pop	{r7, pc}
   1328a:	bf00      	nop
   1328c:	20009f1c 	.word	0x20009f1c
   13290:	000132b5 	.word	0x000132b5
   13294:	20000000 	.word	0x20000000
   13298:	000132d5 	.word	0x000132d5
   1329c:	00013cdd 	.word	0x00013cdd

000132a0 <_GLOBAL__sub_I_ptrLTSPIClass>:
   132a0:	b580      	push	{r7, lr}
   132a2:	af00      	add	r7, sp, #0
   132a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   132a8:	2001      	movs	r0, #1
   132aa:	4b01      	ldr	r3, [pc, #4]	; (132b0 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   132ac:	4798      	blx	r3
   132ae:	bd80      	pop	{r7, pc}
   132b0:	00013259 	.word	0x00013259

000132b4 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   132b4:	b480      	push	{r7}
   132b6:	b083      	sub	sp, #12
   132b8:	af00      	add	r7, sp, #0
   132ba:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   132bc:	4a04      	ldr	r2, [pc, #16]	; (132d0 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   132be:	687b      	ldr	r3, [r7, #4]
   132c0:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   132c2:	687b      	ldr	r3, [r7, #4]
   132c4:	4618      	mov	r0, r3
   132c6:	370c      	adds	r7, #12
   132c8:	46bd      	mov	sp, r7
   132ca:	bc80      	pop	{r7}
   132cc:	4770      	bx	lr
   132ce:	bf00      	nop
   132d0:	20009f38 	.word	0x20009f38

000132d4 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   132d4:	b480      	push	{r7}
   132d6:	b083      	sub	sp, #12
   132d8:	af00      	add	r7, sp, #0
   132da:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   132dc:	687b      	ldr	r3, [r7, #4]
   132de:	4618      	mov	r0, r3
   132e0:	370c      	adds	r7, #12
   132e2:	46bd      	mov	sp, r7
   132e4:	bc80      	pop	{r7}
   132e6:	4770      	bx	lr

000132e8 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   132e8:	b580      	push	{r7, lr}
   132ea:	b082      	sub	sp, #8
   132ec:	af00      	add	r7, sp, #0
   132ee:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   132f0:	687b      	ldr	r3, [r7, #4]
   132f2:	68da      	ldr	r2, [r3, #12]
   132f4:	687b      	ldr	r3, [r7, #4]
   132f6:	3310      	adds	r3, #16
   132f8:	4619      	mov	r1, r3
   132fa:	4610      	mov	r0, r2
   132fc:	4b09      	ldr	r3, [pc, #36]	; (13324 <_ZN13SPI_Syn_Class4initEv+0x3c>)
   132fe:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   13300:	687b      	ldr	r3, [r7, #4]
   13302:	68db      	ldr	r3, [r3, #12]
   13304:	4618      	mov	r0, r3
   13306:	4b08      	ldr	r3, [pc, #32]	; (13328 <_ZN13SPI_Syn_Class4initEv+0x40>)
   13308:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   1330a:	687b      	ldr	r3, [r7, #4]
   1330c:	4a07      	ldr	r2, [pc, #28]	; (1332c <_ZN13SPI_Syn_Class4initEv+0x44>)
   1330e:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   13310:	687b      	ldr	r3, [r7, #4]
   13312:	4a06      	ldr	r2, [pc, #24]	; (1332c <_ZN13SPI_Syn_Class4initEv+0x44>)
   13314:	609a      	str	r2, [r3, #8]
	ready=true;
   13316:	687b      	ldr	r3, [r7, #4]
   13318:	2201      	movs	r2, #1
   1331a:	701a      	strb	r2, [r3, #0]
	
}
   1331c:	bf00      	nop
   1331e:	3708      	adds	r7, #8
   13320:	46bd      	mov	sp, r7
   13322:	bd80      	pop	{r7, pc}
   13324:	00003389 	.word	0x00003389
   13328:	000031fd 	.word	0x000031fd
   1332c:	20009f3c 	.word	0x20009f3c

00013330 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   13330:	b480      	push	{r7}
   13332:	b083      	sub	sp, #12
   13334:	af00      	add	r7, sp, #0
   13336:	6078      	str	r0, [r7, #4]
   13338:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   1333a:	4a05      	ldr	r2, [pc, #20]	; (13350 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   1333c:	687b      	ldr	r3, [r7, #4]
   1333e:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   13340:	687b      	ldr	r3, [r7, #4]
   13342:	683a      	ldr	r2, [r7, #0]
   13344:	60da      	str	r2, [r3, #12]
}
   13346:	bf00      	nop
   13348:	370c      	adds	r7, #12
   1334a:	46bd      	mov	sp, r7
   1334c:	bc80      	pop	{r7}
   1334e:	4770      	bx	lr
   13350:	20009f38 	.word	0x20009f38

00013354 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   13354:	b580      	push	{r7, lr}
   13356:	b082      	sub	sp, #8
   13358:	af00      	add	r7, sp, #0
   1335a:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   1335c:	687b      	ldr	r3, [r7, #4]
   1335e:	68da      	ldr	r2, [r3, #12]
   13360:	687b      	ldr	r3, [r7, #4]
   13362:	3310      	adds	r3, #16
   13364:	4619      	mov	r1, r3
   13366:	4610      	mov	r0, r2
   13368:	4b07      	ldr	r3, [pc, #28]	; (13388 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   1336a:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   1336c:	687b      	ldr	r3, [r7, #4]
   1336e:	68db      	ldr	r3, [r3, #12]
   13370:	4618      	mov	r0, r3
   13372:	4b06      	ldr	r3, [pc, #24]	; (1338c <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   13374:	4798      	blx	r3
	ready=true;
   13376:	687b      	ldr	r3, [r7, #4]
   13378:	2201      	movs	r2, #1
   1337a:	701a      	strb	r2, [r3, #0]
	return 0;
   1337c:	2300      	movs	r3, #0
}
   1337e:	4618      	mov	r0, r3
   13380:	3708      	adds	r7, #8
   13382:	46bd      	mov	sp, r7
   13384:	bd80      	pop	{r7, pc}
   13386:	bf00      	nop
   13388:	00003389 	.word	0x00003389
   1338c:	000031fd 	.word	0x000031fd

00013390 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   13390:	b580      	push	{r7, lr}
   13392:	b086      	sub	sp, #24
   13394:	af00      	add	r7, sp, #0
   13396:	60f8      	str	r0, [r7, #12]
   13398:	60b9      	str	r1, [r7, #8]
   1339a:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   1339c:	68fb      	ldr	r3, [r7, #12]
   1339e:	2201      	movs	r2, #1
   133a0:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   133a2:	68fb      	ldr	r3, [r7, #12]
   133a4:	691b      	ldr	r3, [r3, #16]
   133a6:	687a      	ldr	r2, [r7, #4]
   133a8:	b292      	uxth	r2, r2
   133aa:	68b9      	ldr	r1, [r7, #8]
   133ac:	4618      	mov	r0, r3
   133ae:	4b08      	ldr	r3, [pc, #32]	; (133d0 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   133b0:	4798      	blx	r3
   133b2:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   133b4:	697b      	ldr	r3, [r7, #20]
   133b6:	2b00      	cmp	r3, #0
   133b8:	bf14      	ite	ne
   133ba:	2301      	movne	r3, #1
   133bc:	2300      	moveq	r3, #0
   133be:	b2da      	uxtb	r2, r3
   133c0:	68fb      	ldr	r3, [r7, #12]
   133c2:	761a      	strb	r2, [r3, #24]
	 return w;
   133c4:	697b      	ldr	r3, [r7, #20]
	
}
   133c6:	4618      	mov	r0, r3
   133c8:	3718      	adds	r7, #24
   133ca:	46bd      	mov	sp, r7
   133cc:	bd80      	pop	{r7, pc}
   133ce:	bf00      	nop
   133d0:	00012515 	.word	0x00012515

000133d4 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   133d4:	b580      	push	{r7, lr}
   133d6:	b086      	sub	sp, #24
   133d8:	af00      	add	r7, sp, #0
   133da:	60f8      	str	r0, [r7, #12]
   133dc:	60b9      	str	r1, [r7, #8]
   133de:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   133e0:	68fb      	ldr	r3, [r7, #12]
   133e2:	2201      	movs	r2, #1
   133e4:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   133e6:	68fb      	ldr	r3, [r7, #12]
   133e8:	691b      	ldr	r3, [r3, #16]
   133ea:	687a      	ldr	r2, [r7, #4]
   133ec:	b292      	uxth	r2, r2
   133ee:	68b9      	ldr	r1, [r7, #8]
   133f0:	4618      	mov	r0, r3
   133f2:	4b08      	ldr	r3, [pc, #32]	; (13414 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   133f4:	4798      	blx	r3
   133f6:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   133f8:	697b      	ldr	r3, [r7, #20]
   133fa:	2b00      	cmp	r3, #0
   133fc:	bf14      	ite	ne
   133fe:	2301      	movne	r3, #1
   13400:	2300      	moveq	r3, #0
   13402:	b2da      	uxtb	r2, r3
   13404:	68fb      	ldr	r3, [r7, #12]
   13406:	765a      	strb	r2, [r3, #25]
	return  r;
   13408:	697b      	ldr	r3, [r7, #20]
}
   1340a:	4618      	mov	r0, r3
   1340c:	3718      	adds	r7, #24
   1340e:	46bd      	mov	sp, r7
   13410:	bd80      	pop	{r7, pc}
   13412:	bf00      	nop
   13414:	00012565 	.word	0x00012565

00013418 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   13418:	b580      	push	{r7, lr}
   1341a:	b082      	sub	sp, #8
   1341c:	af00      	add	r7, sp, #0
   1341e:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   13420:	687b      	ldr	r3, [r7, #4]
   13422:	68db      	ldr	r3, [r3, #12]
   13424:	4618      	mov	r0, r3
   13426:	4b03      	ldr	r3, [pc, #12]	; (13434 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   13428:	4798      	blx	r3
	
}
   1342a:	bf00      	nop
   1342c:	3708      	adds	r7, #8
   1342e:	46bd      	mov	sp, r7
   13430:	bd80      	pop	{r7, pc}
   13432:	bf00      	nop
   13434:	00003239 	.word	0x00003239

00013438 <hri_port_set_DIR_reg>:
{
   13438:	b480      	push	{r7}
   1343a:	b085      	sub	sp, #20
   1343c:	af00      	add	r7, sp, #0
   1343e:	60f8      	str	r0, [r7, #12]
   13440:	460b      	mov	r3, r1
   13442:	607a      	str	r2, [r7, #4]
   13444:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   13446:	7afb      	ldrb	r3, [r7, #11]
   13448:	68fa      	ldr	r2, [r7, #12]
   1344a:	01db      	lsls	r3, r3, #7
   1344c:	4413      	add	r3, r2
   1344e:	3308      	adds	r3, #8
   13450:	687a      	ldr	r2, [r7, #4]
   13452:	601a      	str	r2, [r3, #0]
}
   13454:	bf00      	nop
   13456:	3714      	adds	r7, #20
   13458:	46bd      	mov	sp, r7
   1345a:	bc80      	pop	{r7}
   1345c:	4770      	bx	lr

0001345e <hri_port_clear_DIR_reg>:
{
   1345e:	b480      	push	{r7}
   13460:	b085      	sub	sp, #20
   13462:	af00      	add	r7, sp, #0
   13464:	60f8      	str	r0, [r7, #12]
   13466:	460b      	mov	r3, r1
   13468:	607a      	str	r2, [r7, #4]
   1346a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   1346c:	7afb      	ldrb	r3, [r7, #11]
   1346e:	68fa      	ldr	r2, [r7, #12]
   13470:	01db      	lsls	r3, r3, #7
   13472:	4413      	add	r3, r2
   13474:	3304      	adds	r3, #4
   13476:	687a      	ldr	r2, [r7, #4]
   13478:	601a      	str	r2, [r3, #0]
}
   1347a:	bf00      	nop
   1347c:	3714      	adds	r7, #20
   1347e:	46bd      	mov	sp, r7
   13480:	bc80      	pop	{r7}
   13482:	4770      	bx	lr

00013484 <hri_port_set_OUT_reg>:
{
   13484:	b480      	push	{r7}
   13486:	b085      	sub	sp, #20
   13488:	af00      	add	r7, sp, #0
   1348a:	60f8      	str	r0, [r7, #12]
   1348c:	460b      	mov	r3, r1
   1348e:	607a      	str	r2, [r7, #4]
   13490:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   13492:	7afb      	ldrb	r3, [r7, #11]
   13494:	68fa      	ldr	r2, [r7, #12]
   13496:	01db      	lsls	r3, r3, #7
   13498:	4413      	add	r3, r2
   1349a:	3318      	adds	r3, #24
   1349c:	687a      	ldr	r2, [r7, #4]
   1349e:	601a      	str	r2, [r3, #0]
}
   134a0:	bf00      	nop
   134a2:	3714      	adds	r7, #20
   134a4:	46bd      	mov	sp, r7
   134a6:	bc80      	pop	{r7}
   134a8:	4770      	bx	lr

000134aa <hri_port_clear_OUT_reg>:
{
   134aa:	b480      	push	{r7}
   134ac:	b085      	sub	sp, #20
   134ae:	af00      	add	r7, sp, #0
   134b0:	60f8      	str	r0, [r7, #12]
   134b2:	460b      	mov	r3, r1
   134b4:	607a      	str	r2, [r7, #4]
   134b6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   134b8:	7afb      	ldrb	r3, [r7, #11]
   134ba:	68fa      	ldr	r2, [r7, #12]
   134bc:	01db      	lsls	r3, r3, #7
   134be:	4413      	add	r3, r2
   134c0:	3314      	adds	r3, #20
   134c2:	687a      	ldr	r2, [r7, #4]
   134c4:	601a      	str	r2, [r3, #0]
}
   134c6:	bf00      	nop
   134c8:	3714      	adds	r7, #20
   134ca:	46bd      	mov	sp, r7
   134cc:	bc80      	pop	{r7}
   134ce:	4770      	bx	lr

000134d0 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   134d0:	b480      	push	{r7}
   134d2:	b085      	sub	sp, #20
   134d4:	af00      	add	r7, sp, #0
   134d6:	6078      	str	r0, [r7, #4]
   134d8:	4608      	mov	r0, r1
   134da:	4611      	mov	r1, r2
   134dc:	461a      	mov	r2, r3
   134de:	4603      	mov	r3, r0
   134e0:	70fb      	strb	r3, [r7, #3]
   134e2:	460b      	mov	r3, r1
   134e4:	70bb      	strb	r3, [r7, #2]
   134e6:	4613      	mov	r3, r2
   134e8:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   134ea:	78fa      	ldrb	r2, [r7, #3]
   134ec:	78bb      	ldrb	r3, [r7, #2]
   134ee:	6879      	ldr	r1, [r7, #4]
   134f0:	01d2      	lsls	r2, r2, #7
   134f2:	440a      	add	r2, r1
   134f4:	4413      	add	r3, r2
   134f6:	3330      	adds	r3, #48	; 0x30
   134f8:	781b      	ldrb	r3, [r3, #0]
   134fa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   134fc:	7bfb      	ldrb	r3, [r7, #15]
   134fe:	f023 030f 	bic.w	r3, r3, #15
   13502:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   13504:	787b      	ldrb	r3, [r7, #1]
   13506:	f003 030f 	and.w	r3, r3, #15
   1350a:	b2da      	uxtb	r2, r3
   1350c:	7bfb      	ldrb	r3, [r7, #15]
   1350e:	4313      	orrs	r3, r2
   13510:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   13512:	78fa      	ldrb	r2, [r7, #3]
   13514:	78bb      	ldrb	r3, [r7, #2]
   13516:	6879      	ldr	r1, [r7, #4]
   13518:	01d2      	lsls	r2, r2, #7
   1351a:	440a      	add	r2, r1
   1351c:	4413      	add	r3, r2
   1351e:	3330      	adds	r3, #48	; 0x30
   13520:	7bfa      	ldrb	r2, [r7, #15]
   13522:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   13524:	bf00      	nop
   13526:	3714      	adds	r7, #20
   13528:	46bd      	mov	sp, r7
   1352a:	bc80      	pop	{r7}
   1352c:	4770      	bx	lr

0001352e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   1352e:	b480      	push	{r7}
   13530:	b085      	sub	sp, #20
   13532:	af00      	add	r7, sp, #0
   13534:	6078      	str	r0, [r7, #4]
   13536:	4608      	mov	r0, r1
   13538:	4611      	mov	r1, r2
   1353a:	461a      	mov	r2, r3
   1353c:	4603      	mov	r3, r0
   1353e:	70fb      	strb	r3, [r7, #3]
   13540:	460b      	mov	r3, r1
   13542:	70bb      	strb	r3, [r7, #2]
   13544:	4613      	mov	r3, r2
   13546:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   13548:	78fa      	ldrb	r2, [r7, #3]
   1354a:	78bb      	ldrb	r3, [r7, #2]
   1354c:	6879      	ldr	r1, [r7, #4]
   1354e:	01d2      	lsls	r2, r2, #7
   13550:	440a      	add	r2, r1
   13552:	4413      	add	r3, r2
   13554:	3330      	adds	r3, #48	; 0x30
   13556:	781b      	ldrb	r3, [r3, #0]
   13558:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   1355a:	7bfb      	ldrb	r3, [r7, #15]
   1355c:	f003 030f 	and.w	r3, r3, #15
   13560:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   13562:	787b      	ldrb	r3, [r7, #1]
   13564:	011b      	lsls	r3, r3, #4
   13566:	b2da      	uxtb	r2, r3
   13568:	7bfb      	ldrb	r3, [r7, #15]
   1356a:	4313      	orrs	r3, r2
   1356c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   1356e:	78fa      	ldrb	r2, [r7, #3]
   13570:	78bb      	ldrb	r3, [r7, #2]
   13572:	6879      	ldr	r1, [r7, #4]
   13574:	01d2      	lsls	r2, r2, #7
   13576:	440a      	add	r2, r1
   13578:	4413      	add	r3, r2
   1357a:	3330      	adds	r3, #48	; 0x30
   1357c:	7bfa      	ldrb	r2, [r7, #15]
   1357e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   13580:	bf00      	nop
   13582:	3714      	adds	r7, #20
   13584:	46bd      	mov	sp, r7
   13586:	bc80      	pop	{r7}
   13588:	4770      	bx	lr

0001358a <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   1358a:	b480      	push	{r7}
   1358c:	b085      	sub	sp, #20
   1358e:	af00      	add	r7, sp, #0
   13590:	6078      	str	r0, [r7, #4]
   13592:	4608      	mov	r0, r1
   13594:	4611      	mov	r1, r2
   13596:	461a      	mov	r2, r3
   13598:	4603      	mov	r3, r0
   1359a:	70fb      	strb	r3, [r7, #3]
   1359c:	460b      	mov	r3, r1
   1359e:	70bb      	strb	r3, [r7, #2]
   135a0:	4613      	mov	r3, r2
   135a2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   135a4:	78fa      	ldrb	r2, [r7, #3]
   135a6:	78bb      	ldrb	r3, [r7, #2]
   135a8:	6879      	ldr	r1, [r7, #4]
   135aa:	01d2      	lsls	r2, r2, #7
   135ac:	440a      	add	r2, r1
   135ae:	4413      	add	r3, r2
   135b0:	3340      	adds	r3, #64	; 0x40
   135b2:	781b      	ldrb	r3, [r3, #0]
   135b4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   135b6:	7bfb      	ldrb	r3, [r7, #15]
   135b8:	f023 0301 	bic.w	r3, r3, #1
   135bc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   135be:	787a      	ldrb	r2, [r7, #1]
   135c0:	7bfb      	ldrb	r3, [r7, #15]
   135c2:	4313      	orrs	r3, r2
   135c4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   135c6:	78fa      	ldrb	r2, [r7, #3]
   135c8:	78bb      	ldrb	r3, [r7, #2]
   135ca:	6879      	ldr	r1, [r7, #4]
   135cc:	01d2      	lsls	r2, r2, #7
   135ce:	440a      	add	r2, r1
   135d0:	4413      	add	r3, r2
   135d2:	3340      	adds	r3, #64	; 0x40
   135d4:	7bfa      	ldrb	r2, [r7, #15]
   135d6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   135d8:	bf00      	nop
   135da:	3714      	adds	r7, #20
   135dc:	46bd      	mov	sp, r7
   135de:	bc80      	pop	{r7}
   135e0:	4770      	bx	lr

000135e2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   135e2:	b480      	push	{r7}
   135e4:	b085      	sub	sp, #20
   135e6:	af00      	add	r7, sp, #0
   135e8:	60f8      	str	r0, [r7, #12]
   135ea:	460b      	mov	r3, r1
   135ec:	607a      	str	r2, [r7, #4]
   135ee:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   135f0:	7afb      	ldrb	r3, [r7, #11]
   135f2:	68fa      	ldr	r2, [r7, #12]
   135f4:	01db      	lsls	r3, r3, #7
   135f6:	4413      	add	r3, r2
   135f8:	3328      	adds	r3, #40	; 0x28
   135fa:	687a      	ldr	r2, [r7, #4]
   135fc:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   135fe:	bf00      	nop
   13600:	3714      	adds	r7, #20
   13602:	46bd      	mov	sp, r7
   13604:	bc80      	pop	{r7}
   13606:	4770      	bx	lr

00013608 <_gpio_set_direction>:
{
   13608:	b580      	push	{r7, lr}
   1360a:	b082      	sub	sp, #8
   1360c:	af00      	add	r7, sp, #0
   1360e:	4603      	mov	r3, r0
   13610:	6039      	str	r1, [r7, #0]
   13612:	71fb      	strb	r3, [r7, #7]
   13614:	4613      	mov	r3, r2
   13616:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   13618:	79bb      	ldrb	r3, [r7, #6]
   1361a:	2b01      	cmp	r3, #1
   1361c:	d01c      	beq.n	13658 <_gpio_set_direction+0x50>
   1361e:	2b02      	cmp	r3, #2
   13620:	d037      	beq.n	13692 <_gpio_set_direction+0x8a>
   13622:	2b00      	cmp	r3, #0
   13624:	d14e      	bne.n	136c4 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   13626:	79fb      	ldrb	r3, [r7, #7]
   13628:	683a      	ldr	r2, [r7, #0]
   1362a:	4619      	mov	r1, r3
   1362c:	482a      	ldr	r0, [pc, #168]	; (136d8 <_gpio_set_direction+0xd0>)
   1362e:	4b2b      	ldr	r3, [pc, #172]	; (136dc <_gpio_set_direction+0xd4>)
   13630:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   13632:	683b      	ldr	r3, [r7, #0]
   13634:	b29b      	uxth	r3, r3
   13636:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1363a:	79fb      	ldrb	r3, [r7, #7]
   1363c:	4619      	mov	r1, r3
   1363e:	4826      	ldr	r0, [pc, #152]	; (136d8 <_gpio_set_direction+0xd0>)
   13640:	4b27      	ldr	r3, [pc, #156]	; (136e0 <_gpio_set_direction+0xd8>)
   13642:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   13644:	683b      	ldr	r3, [r7, #0]
   13646:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   13648:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   1364c:	79fb      	ldrb	r3, [r7, #7]
   1364e:	4619      	mov	r1, r3
   13650:	4821      	ldr	r0, [pc, #132]	; (136d8 <_gpio_set_direction+0xd0>)
   13652:	4b23      	ldr	r3, [pc, #140]	; (136e0 <_gpio_set_direction+0xd8>)
   13654:	4798      	blx	r3
		break;
   13656:	e03a      	b.n	136ce <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   13658:	79fb      	ldrb	r3, [r7, #7]
   1365a:	683a      	ldr	r2, [r7, #0]
   1365c:	4619      	mov	r1, r3
   1365e:	481e      	ldr	r0, [pc, #120]	; (136d8 <_gpio_set_direction+0xd0>)
   13660:	4b1e      	ldr	r3, [pc, #120]	; (136dc <_gpio_set_direction+0xd4>)
   13662:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   13664:	683b      	ldr	r3, [r7, #0]
   13666:	b29b      	uxth	r3, r3
   13668:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1366c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13670:	79f9      	ldrb	r1, [r7, #7]
   13672:	461a      	mov	r2, r3
   13674:	4818      	ldr	r0, [pc, #96]	; (136d8 <_gpio_set_direction+0xd0>)
   13676:	4b1a      	ldr	r3, [pc, #104]	; (136e0 <_gpio_set_direction+0xd8>)
   13678:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   1367a:	683b      	ldr	r3, [r7, #0]
   1367c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   1367e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   13682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   13686:	79f9      	ldrb	r1, [r7, #7]
   13688:	461a      	mov	r2, r3
   1368a:	4813      	ldr	r0, [pc, #76]	; (136d8 <_gpio_set_direction+0xd0>)
   1368c:	4b14      	ldr	r3, [pc, #80]	; (136e0 <_gpio_set_direction+0xd8>)
   1368e:	4798      	blx	r3
		break;
   13690:	e01d      	b.n	136ce <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   13692:	79fb      	ldrb	r3, [r7, #7]
   13694:	683a      	ldr	r2, [r7, #0]
   13696:	4619      	mov	r1, r3
   13698:	480f      	ldr	r0, [pc, #60]	; (136d8 <_gpio_set_direction+0xd0>)
   1369a:	4b12      	ldr	r3, [pc, #72]	; (136e4 <_gpio_set_direction+0xdc>)
   1369c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   1369e:	683b      	ldr	r3, [r7, #0]
   136a0:	b29b      	uxth	r3, r3
   136a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   136a6:	79fb      	ldrb	r3, [r7, #7]
   136a8:	4619      	mov	r1, r3
   136aa:	480b      	ldr	r0, [pc, #44]	; (136d8 <_gpio_set_direction+0xd0>)
   136ac:	4b0c      	ldr	r3, [pc, #48]	; (136e0 <_gpio_set_direction+0xd8>)
   136ae:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   136b0:	683b      	ldr	r3, [r7, #0]
   136b2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   136b4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   136b8:	79fb      	ldrb	r3, [r7, #7]
   136ba:	4619      	mov	r1, r3
   136bc:	4806      	ldr	r0, [pc, #24]	; (136d8 <_gpio_set_direction+0xd0>)
   136be:	4b08      	ldr	r3, [pc, #32]	; (136e0 <_gpio_set_direction+0xd8>)
   136c0:	4798      	blx	r3
		break;
   136c2:	e004      	b.n	136ce <_gpio_set_direction+0xc6>
		ASSERT(false);
   136c4:	2246      	movs	r2, #70	; 0x46
   136c6:	4908      	ldr	r1, [pc, #32]	; (136e8 <_gpio_set_direction+0xe0>)
   136c8:	2000      	movs	r0, #0
   136ca:	4b08      	ldr	r3, [pc, #32]	; (136ec <_gpio_set_direction+0xe4>)
   136cc:	4798      	blx	r3
}
   136ce:	bf00      	nop
   136d0:	3708      	adds	r7, #8
   136d2:	46bd      	mov	sp, r7
   136d4:	bd80      	pop	{r7, pc}
   136d6:	bf00      	nop
   136d8:	41008000 	.word	0x41008000
   136dc:	0001345f 	.word	0x0001345f
   136e0:	000135e3 	.word	0x000135e3
   136e4:	00013439 	.word	0x00013439
   136e8:	00014b34 	.word	0x00014b34
   136ec:	00004211 	.word	0x00004211

000136f0 <_gpio_set_level>:
{
   136f0:	b580      	push	{r7, lr}
   136f2:	b082      	sub	sp, #8
   136f4:	af00      	add	r7, sp, #0
   136f6:	4603      	mov	r3, r0
   136f8:	6039      	str	r1, [r7, #0]
   136fa:	71fb      	strb	r3, [r7, #7]
   136fc:	4613      	mov	r3, r2
   136fe:	71bb      	strb	r3, [r7, #6]
	if (level) {
   13700:	79bb      	ldrb	r3, [r7, #6]
   13702:	2b00      	cmp	r3, #0
   13704:	d006      	beq.n	13714 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   13706:	79fb      	ldrb	r3, [r7, #7]
   13708:	683a      	ldr	r2, [r7, #0]
   1370a:	4619      	mov	r1, r3
   1370c:	4806      	ldr	r0, [pc, #24]	; (13728 <_gpio_set_level+0x38>)
   1370e:	4b07      	ldr	r3, [pc, #28]	; (1372c <_gpio_set_level+0x3c>)
   13710:	4798      	blx	r3
}
   13712:	e005      	b.n	13720 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   13714:	79fb      	ldrb	r3, [r7, #7]
   13716:	683a      	ldr	r2, [r7, #0]
   13718:	4619      	mov	r1, r3
   1371a:	4803      	ldr	r0, [pc, #12]	; (13728 <_gpio_set_level+0x38>)
   1371c:	4b04      	ldr	r3, [pc, #16]	; (13730 <_gpio_set_level+0x40>)
   1371e:	4798      	blx	r3
}
   13720:	bf00      	nop
   13722:	3708      	adds	r7, #8
   13724:	46bd      	mov	sp, r7
   13726:	bd80      	pop	{r7, pc}
   13728:	41008000 	.word	0x41008000
   1372c:	00013485 	.word	0x00013485
   13730:	000134ab 	.word	0x000134ab

00013734 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   13734:	b590      	push	{r4, r7, lr}
   13736:	b085      	sub	sp, #20
   13738:	af00      	add	r7, sp, #0
   1373a:	6078      	str	r0, [r7, #4]
   1373c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   1373e:	687b      	ldr	r3, [r7, #4]
   13740:	095b      	lsrs	r3, r3, #5
   13742:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   13744:	687b      	ldr	r3, [r7, #4]
   13746:	b2db      	uxtb	r3, r3
   13748:	f003 031f 	and.w	r3, r3, #31
   1374c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   1374e:	683b      	ldr	r3, [r7, #0]
   13750:	f1b3 3fff 	cmp.w	r3, #4294967295
   13754:	d106      	bne.n	13764 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   13756:	7bba      	ldrb	r2, [r7, #14]
   13758:	7bf9      	ldrb	r1, [r7, #15]
   1375a:	2300      	movs	r3, #0
   1375c:	4812      	ldr	r0, [pc, #72]	; (137a8 <_gpio_set_pin_function+0x74>)
   1375e:	4c13      	ldr	r4, [pc, #76]	; (137ac <_gpio_set_pin_function+0x78>)
   13760:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   13762:	e01d      	b.n	137a0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   13764:	7bba      	ldrb	r2, [r7, #14]
   13766:	7bf9      	ldrb	r1, [r7, #15]
   13768:	2301      	movs	r3, #1
   1376a:	480f      	ldr	r0, [pc, #60]	; (137a8 <_gpio_set_pin_function+0x74>)
   1376c:	4c0f      	ldr	r4, [pc, #60]	; (137ac <_gpio_set_pin_function+0x78>)
   1376e:	47a0      	blx	r4
		if (pin & 1) {
   13770:	7bbb      	ldrb	r3, [r7, #14]
   13772:	f003 0301 	and.w	r3, r3, #1
   13776:	2b00      	cmp	r3, #0
   13778:	d009      	beq.n	1378e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   1377a:	7bbb      	ldrb	r3, [r7, #14]
   1377c:	105b      	asrs	r3, r3, #1
   1377e:	b2da      	uxtb	r2, r3
   13780:	683b      	ldr	r3, [r7, #0]
   13782:	b2db      	uxtb	r3, r3
   13784:	7bf9      	ldrb	r1, [r7, #15]
   13786:	4808      	ldr	r0, [pc, #32]	; (137a8 <_gpio_set_pin_function+0x74>)
   13788:	4c09      	ldr	r4, [pc, #36]	; (137b0 <_gpio_set_pin_function+0x7c>)
   1378a:	47a0      	blx	r4
}
   1378c:	e008      	b.n	137a0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   1378e:	7bbb      	ldrb	r3, [r7, #14]
   13790:	105b      	asrs	r3, r3, #1
   13792:	b2da      	uxtb	r2, r3
   13794:	683b      	ldr	r3, [r7, #0]
   13796:	b2db      	uxtb	r3, r3
   13798:	7bf9      	ldrb	r1, [r7, #15]
   1379a:	4803      	ldr	r0, [pc, #12]	; (137a8 <_gpio_set_pin_function+0x74>)
   1379c:	4c05      	ldr	r4, [pc, #20]	; (137b4 <_gpio_set_pin_function+0x80>)
   1379e:	47a0      	blx	r4
}
   137a0:	bf00      	nop
   137a2:	3714      	adds	r7, #20
   137a4:	46bd      	mov	sp, r7
   137a6:	bd90      	pop	{r4, r7, pc}
   137a8:	41008000 	.word	0x41008000
   137ac:	0001358b 	.word	0x0001358b
   137b0:	0001352f 	.word	0x0001352f
   137b4:	000134d1 	.word	0x000134d1

000137b8 <gpio_set_pin_function>:
{
   137b8:	b580      	push	{r7, lr}
   137ba:	b082      	sub	sp, #8
   137bc:	af00      	add	r7, sp, #0
   137be:	6078      	str	r0, [r7, #4]
   137c0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   137c2:	6839      	ldr	r1, [r7, #0]
   137c4:	6878      	ldr	r0, [r7, #4]
   137c6:	4b03      	ldr	r3, [pc, #12]	; (137d4 <gpio_set_pin_function+0x1c>)
   137c8:	4798      	blx	r3
}
   137ca:	bf00      	nop
   137cc:	3708      	adds	r7, #8
   137ce:	46bd      	mov	sp, r7
   137d0:	bd80      	pop	{r7, pc}
   137d2:	bf00      	nop
   137d4:	00013735 	.word	0x00013735

000137d8 <gpio_set_pin_direction>:
{
   137d8:	b580      	push	{r7, lr}
   137da:	b082      	sub	sp, #8
   137dc:	af00      	add	r7, sp, #0
   137de:	4603      	mov	r3, r0
   137e0:	460a      	mov	r2, r1
   137e2:	71fb      	strb	r3, [r7, #7]
   137e4:	4613      	mov	r3, r2
   137e6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   137e8:	79fb      	ldrb	r3, [r7, #7]
   137ea:	115b      	asrs	r3, r3, #5
   137ec:	b2d8      	uxtb	r0, r3
   137ee:	79fb      	ldrb	r3, [r7, #7]
   137f0:	f003 031f 	and.w	r3, r3, #31
   137f4:	2201      	movs	r2, #1
   137f6:	fa02 f303 	lsl.w	r3, r2, r3
   137fa:	79ba      	ldrb	r2, [r7, #6]
   137fc:	4619      	mov	r1, r3
   137fe:	4b03      	ldr	r3, [pc, #12]	; (1380c <gpio_set_pin_direction+0x34>)
   13800:	4798      	blx	r3
}
   13802:	bf00      	nop
   13804:	3708      	adds	r7, #8
   13806:	46bd      	mov	sp, r7
   13808:	bd80      	pop	{r7, pc}
   1380a:	bf00      	nop
   1380c:	00013609 	.word	0x00013609

00013810 <gpio_set_pin_level>:
{
   13810:	b580      	push	{r7, lr}
   13812:	b082      	sub	sp, #8
   13814:	af00      	add	r7, sp, #0
   13816:	4603      	mov	r3, r0
   13818:	460a      	mov	r2, r1
   1381a:	71fb      	strb	r3, [r7, #7]
   1381c:	4613      	mov	r3, r2
   1381e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   13820:	79fb      	ldrb	r3, [r7, #7]
   13822:	115b      	asrs	r3, r3, #5
   13824:	b2d8      	uxtb	r0, r3
   13826:	79fb      	ldrb	r3, [r7, #7]
   13828:	f003 031f 	and.w	r3, r3, #31
   1382c:	2201      	movs	r2, #1
   1382e:	fa02 f303 	lsl.w	r3, r2, r3
   13832:	79ba      	ldrb	r2, [r7, #6]
   13834:	4619      	mov	r1, r3
   13836:	4b03      	ldr	r3, [pc, #12]	; (13844 <gpio_set_pin_level+0x34>)
   13838:	4798      	blx	r3
}
   1383a:	bf00      	nop
   1383c:	3708      	adds	r7, #8
   1383e:	46bd      	mov	sp, r7
   13840:	bd80      	pop	{r7, pc}
   13842:	bf00      	nop
   13844:	000136f1 	.word	0x000136f1

00013848 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   13848:	b580      	push	{r7, lr}
   1384a:	b082      	sub	sp, #8
   1384c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   1384e:	2100      	movs	r1, #0
   13850:	2008      	movs	r0, #8
   13852:	4b24      	ldr	r3, [pc, #144]	; (138e4 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   13854:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   13856:	2100      	movs	r1, #0
   13858:	202b      	movs	r0, #43	; 0x2b
   1385a:	4b22      	ldr	r3, [pc, #136]	; (138e4 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   1385c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   1385e:	2100      	movs	r1, #0
   13860:	202a      	movs	r0, #42	; 0x2a
   13862:	4b20      	ldr	r3, [pc, #128]	; (138e4 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   13864:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   13866:	2102      	movs	r1, #2
   13868:	2008      	movs	r0, #8
   1386a:	4b1f      	ldr	r3, [pc, #124]	; (138e8 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   1386c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   1386e:	2102      	movs	r1, #2
   13870:	202b      	movs	r0, #43	; 0x2b
   13872:	4b1d      	ldr	r3, [pc, #116]	; (138e8 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   13874:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   13876:	2102      	movs	r1, #2
   13878:	202a      	movs	r0, #42	; 0x2a
   1387a:	4b1b      	ldr	r3, [pc, #108]	; (138e8 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   1387c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   1387e:	2101      	movs	r1, #1
   13880:	2008      	movs	r0, #8
   13882:	4b1a      	ldr	r3, [pc, #104]	; (138ec <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   13884:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   13886:	2100      	movs	r1, #0
   13888:	202b      	movs	r0, #43	; 0x2b
   1388a:	4b18      	ldr	r3, [pc, #96]	; (138ec <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1388c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   1388e:	2100      	movs	r1, #0
   13890:	202a      	movs	r0, #42	; 0x2a
   13892:	4b16      	ldr	r3, [pc, #88]	; (138ec <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   13894:	4798      	blx	r3

	delay_us(1);
   13896:	2001      	movs	r0, #1
   13898:	4b15      	ldr	r3, [pc, #84]	; (138f0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1389a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   1389c:	2300      	movs	r3, #0
   1389e:	607b      	str	r3, [r7, #4]
   138a0:	687b      	ldr	r3, [r7, #4]
   138a2:	2b06      	cmp	r3, #6
   138a4:	dc11      	bgt.n	138ca <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   138a6:	2101      	movs	r1, #1
   138a8:	202a      	movs	r0, #42	; 0x2a
   138aa:	4b10      	ldr	r3, [pc, #64]	; (138ec <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   138ac:	4798      	blx	r3
		delay_us(1);
   138ae:	2001      	movs	r0, #1
   138b0:	4b0f      	ldr	r3, [pc, #60]	; (138f0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   138b2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   138b4:	2100      	movs	r1, #0
   138b6:	202a      	movs	r0, #42	; 0x2a
   138b8:	4b0c      	ldr	r3, [pc, #48]	; (138ec <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   138ba:	4798      	blx	r3
		delay_us(1);
   138bc:	2001      	movs	r0, #1
   138be:	4b0c      	ldr	r3, [pc, #48]	; (138f0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   138c0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   138c2:	687b      	ldr	r3, [r7, #4]
   138c4:	3301      	adds	r3, #1
   138c6:	607b      	str	r3, [r7, #4]
   138c8:	e7ea      	b.n	138a0 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   138ca:	2101      	movs	r1, #1
   138cc:	202b      	movs	r0, #43	; 0x2b
   138ce:	4b07      	ldr	r3, [pc, #28]	; (138ec <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   138d0:	4798      	blx	r3
	delay_us(1);
   138d2:	2001      	movs	r0, #1
   138d4:	4b06      	ldr	r3, [pc, #24]	; (138f0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   138d6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   138d8:	4b06      	ldr	r3, [pc, #24]	; (138f4 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   138da:	4798      	blx	r3
}
   138dc:	bf00      	nop
   138de:	3708      	adds	r7, #8
   138e0:	46bd      	mov	sp, r7
   138e2:	bd80      	pop	{r7, pc}
   138e4:	000137b9 	.word	0x000137b9
   138e8:	000137d9 	.word	0x000137d9
   138ec:	00013811 	.word	0x00013811
   138f0:	00002b81 	.word	0x00002b81
   138f4:	00001edd 	.word	0x00001edd

000138f8 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   138f8:	b480      	push	{r7}
   138fa:	b083      	sub	sp, #12
   138fc:	af00      	add	r7, sp, #0
   138fe:	6078      	str	r0, [r7, #4]
   13900:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   13902:	687b      	ldr	r3, [r7, #4]
   13904:	683a      	ldr	r2, [r7, #0]
   13906:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   13908:	687b      	ldr	r3, [r7, #4]
   1390a:	4a04      	ldr	r2, [pc, #16]	; (1391c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   1390c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   13910:	687b      	ldr	r3, [r7, #4]
   13912:	4618      	mov	r0, r3
   13914:	370c      	adds	r7, #12
   13916:	46bd      	mov	sp, r7
   13918:	bc80      	pop	{r7}
   1391a:	4770      	bx	lr
   1391c:	001fff00 	.word	0x001fff00

00013920 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   13920:	b480      	push	{r7}
   13922:	b083      	sub	sp, #12
   13924:	af00      	add	r7, sp, #0
   13926:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   13928:	687b      	ldr	r3, [r7, #4]
   1392a:	4618      	mov	r0, r3
   1392c:	370c      	adds	r7, #12
   1392e:	46bd      	mov	sp, r7
   13930:	bc80      	pop	{r7}
   13932:	4770      	bx	lr

00013934 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   13934:	b580      	push	{r7, lr}
   13936:	b082      	sub	sp, #8
   13938:	af00      	add	r7, sp, #0
   1393a:	6078      	str	r0, [r7, #4]
	xferDone=false;
   1393c:	687b      	ldr	r3, [r7, #4]
   1393e:	2200      	movs	r2, #0
   13940:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   13942:	6878      	ldr	r0, [r7, #4]
   13944:	4b04      	ldr	r3, [pc, #16]	; (13958 <_ZN13N25Q256_Class4InitEv+0x24>)
   13946:	4798      	blx	r3
	return SelfTest();
   13948:	6878      	ldr	r0, [r7, #4]
   1394a:	4b04      	ldr	r3, [pc, #16]	; (1395c <_ZN13N25Q256_Class4InitEv+0x28>)
   1394c:	4798      	blx	r3
   1394e:	4603      	mov	r3, r0
}
   13950:	4618      	mov	r0, r3
   13952:	3708      	adds	r7, #8
   13954:	46bd      	mov	sp, r7
   13956:	bd80      	pop	{r7, pc}
   13958:	00013961 	.word	0x00013961
   1395c:	00013afd 	.word	0x00013afd

00013960 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   13960:	b590      	push	{r4, r7, lr}
   13962:	b083      	sub	sp, #12
   13964:	af00      	add	r7, sp, #0
   13966:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   13968:	687b      	ldr	r3, [r7, #4]
   1396a:	685b      	ldr	r3, [r3, #4]
   1396c:	4618      	mov	r0, r3
   1396e:	4b08      	ldr	r3, [pc, #32]	; (13990 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   13970:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   13972:	687b      	ldr	r3, [r7, #4]
   13974:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   13976:	2300      	movs	r3, #0
   13978:	4a06      	ldr	r2, [pc, #24]	; (13994 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   1397a:	4807      	ldr	r0, [pc, #28]	; (13998 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   1397c:	4c07      	ldr	r4, [pc, #28]	; (1399c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   1397e:	47a0      	blx	r4
   13980:	4602      	mov	r2, r0
   13982:	687b      	ldr	r3, [r7, #4]
   13984:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   13988:	bf00      	nop
   1398a:	370c      	adds	r7, #12
   1398c:	46bd      	mov	sp, r7
   1398e:	bd90      	pop	{r4, r7, pc}
   13990:	000030b9 	.word	0x000030b9
   13994:	00013849 	.word	0x00013849
   13998:	20009f80 	.word	0x20009f80
   1399c:	0000c27d 	.word	0x0000c27d

000139a0 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   139a0:	b580      	push	{r7, lr}
   139a2:	b084      	sub	sp, #16
   139a4:	af00      	add	r7, sp, #0
   139a6:	6078      	str	r0, [r7, #4]
   139a8:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   139aa:	687b      	ldr	r3, [r7, #4]
   139ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   139b0:	685b      	ldr	r3, [r3, #4]
   139b2:	689b      	ldr	r3, [r3, #8]
   139b4:	687a      	ldr	r2, [r7, #4]
   139b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   139ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   139be:	6839      	ldr	r1, [r7, #0]
   139c0:	4798      	blx	r3
   139c2:	4603      	mov	r3, r0
   139c4:	60fb      	str	r3, [r7, #12]
	return	e;
   139c6:	68fb      	ldr	r3, [r7, #12]
}
   139c8:	4618      	mov	r0, r3
   139ca:	3710      	adds	r7, #16
   139cc:	46bd      	mov	sp, r7
   139ce:	bd80      	pop	{r7, pc}

000139d0 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   139d0:	b590      	push	{r4, r7, lr}
   139d2:	b087      	sub	sp, #28
   139d4:	af00      	add	r7, sp, #0
   139d6:	60f8      	str	r0, [r7, #12]
   139d8:	60b9      	str	r1, [r7, #8]
   139da:	607a      	str	r2, [r7, #4]
   139dc:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   139de:	68fb      	ldr	r3, [r7, #12]
   139e0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   139e4:	685b      	ldr	r3, [r3, #4]
   139e6:	685c      	ldr	r4, [r3, #4]
   139e8:	68fb      	ldr	r3, [r7, #12]
   139ea:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   139ee:	683b      	ldr	r3, [r7, #0]
   139f0:	687a      	ldr	r2, [r7, #4]
   139f2:	68b9      	ldr	r1, [r7, #8]
   139f4:	47a0      	blx	r4
   139f6:	4603      	mov	r3, r0
   139f8:	617b      	str	r3, [r7, #20]
	return	w;
   139fa:	697b      	ldr	r3, [r7, #20]
}
   139fc:	4618      	mov	r0, r3
   139fe:	371c      	adds	r7, #28
   13a00:	46bd      	mov	sp, r7
   13a02:	bd90      	pop	{r4, r7, pc}

00013a04 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   13a04:	b590      	push	{r4, r7, lr}
   13a06:	b087      	sub	sp, #28
   13a08:	af00      	add	r7, sp, #0
   13a0a:	60f8      	str	r0, [r7, #12]
   13a0c:	60b9      	str	r1, [r7, #8]
   13a0e:	607a      	str	r2, [r7, #4]
   13a10:	603b      	str	r3, [r7, #0]
	xferDone=false;
   13a12:	68fb      	ldr	r3, [r7, #12]
   13a14:	2200      	movs	r2, #0
   13a16:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   13a18:	68fb      	ldr	r3, [r7, #12]
   13a1a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   13a1e:	685b      	ldr	r3, [r3, #4]
   13a20:	681c      	ldr	r4, [r3, #0]
   13a22:	68fb      	ldr	r3, [r7, #12]
   13a24:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   13a28:	683b      	ldr	r3, [r7, #0]
   13a2a:	687a      	ldr	r2, [r7, #4]
   13a2c:	68b9      	ldr	r1, [r7, #8]
   13a2e:	47a0      	blx	r4
   13a30:	4603      	mov	r3, r0
   13a32:	617b      	str	r3, [r7, #20]
	return	r;
   13a34:	697b      	ldr	r3, [r7, #20]
}
   13a36:	4618      	mov	r0, r3
   13a38:	371c      	adds	r7, #28
   13a3a:	46bd      	mov	sp, r7
   13a3c:	bd90      	pop	{r4, r7, pc}
	...

00013a40 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   13a40:	b580      	push	{r7, lr}
   13a42:	b082      	sub	sp, #8
   13a44:	af00      	add	r7, sp, #0
   13a46:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   13a48:	687a      	ldr	r2, [r7, #4]
   13a4a:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   13a4e:	f043 0310 	orr.w	r3, r3, #16
   13a52:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   13a56:	687a      	ldr	r2, [r7, #4]
   13a58:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   13a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13a60:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   13a64:	687a      	ldr	r2, [r7, #4]
   13a66:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   13a6a:	f36f 1305 	bfc	r3, #4, #2
   13a6e:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   13a72:	687b      	ldr	r3, [r7, #4]
   13a74:	2205      	movs	r2, #5
   13a76:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   13a7a:	687b      	ldr	r3, [r7, #4]
   13a7c:	2201      	movs	r2, #1
   13a7e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   13a82:	687b      	ldr	r3, [r7, #4]
   13a84:	f203 2212 	addw	r2, r3, #530	; 0x212
   13a88:	687b      	ldr	r3, [r7, #4]
   13a8a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   13a8e:	687b      	ldr	r3, [r7, #4]
   13a90:	685a      	ldr	r2, [r3, #4]
   13a92:	687b      	ldr	r3, [r7, #4]
   13a94:	f503 7305 	add.w	r3, r3, #532	; 0x214
   13a98:	4619      	mov	r1, r3
   13a9a:	4610      	mov	r0, r2
   13a9c:	4b04      	ldr	r3, [pc, #16]	; (13ab0 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   13a9e:	4798      	blx	r3
		return status;
   13aa0:	687b      	ldr	r3, [r7, #4]
   13aa2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   13aa6:	4618      	mov	r0, r3
   13aa8:	3708      	adds	r7, #8
   13aaa:	46bd      	mov	sp, r7
   13aac:	bd80      	pop	{r7, pc}
   13aae:	bf00      	nop
   13ab0:	00003131 	.word	0x00003131

00013ab4 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   13ab4:	b580      	push	{r7, lr}
   13ab6:	b082      	sub	sp, #8
   13ab8:	af00      	add	r7, sp, #0
   13aba:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   13abc:	6878      	ldr	r0, [r7, #4]
   13abe:	4b0e      	ldr	r3, [pc, #56]	; (13af8 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   13ac0:	4798      	blx	r3
   13ac2:	4603      	mov	r3, r0
   13ac4:	461a      	mov	r2, r3
   13ac6:	687b      	ldr	r3, [r7, #4]
   13ac8:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   13acc:	687b      	ldr	r3, [r7, #4]
   13ace:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   13ad2:	f003 0301 	and.w	r3, r3, #1
   13ad6:	2b00      	cmp	r3, #0
   13ad8:	d000      	beq.n	13adc <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   13ada:	e7ef      	b.n	13abc <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   13adc:	687b      	ldr	r3, [r7, #4]
   13ade:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   13ae2:	f003 0301 	and.w	r3, r3, #1
   13ae6:	2b00      	cmp	r3, #0
   13ae8:	bf0c      	ite	eq
   13aea:	2301      	moveq	r3, #1
   13aec:	2300      	movne	r3, #0
   13aee:	b2db      	uxtb	r3, r3
}
   13af0:	4618      	mov	r0, r3
   13af2:	3708      	adds	r7, #8
   13af4:	46bd      	mov	sp, r7
   13af6:	bd80      	pop	{r7, pc}
   13af8:	00013a41 	.word	0x00013a41

00013afc <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   13afc:	b590      	push	{r4, r7, lr}
   13afe:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   13b02:	b085      	sub	sp, #20
   13b04:	af00      	add	r7, sp, #0
   13b06:	f107 0310 	add.w	r3, r7, #16
   13b0a:	3b0c      	subs	r3, #12
   13b0c:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   13b0e:	f107 0310 	add.w	r3, r7, #16
   13b12:	3b0c      	subs	r3, #12
   13b14:	681b      	ldr	r3, [r3, #0]
   13b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   13b1a:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   13b1e:	f107 0310 	add.w	r3, r7, #16
   13b22:	3b0c      	subs	r3, #12
   13b24:	681b      	ldr	r3, [r3, #0]
   13b26:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   13b2a:	f107 0110 	add.w	r1, r7, #16
   13b2e:	3904      	subs	r1, #4
   13b30:	f107 0010 	add.w	r0, r7, #16
   13b34:	380c      	subs	r0, #12
   13b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   13b3a:	6800      	ldr	r0, [r0, #0]
   13b3c:	4c4b      	ldr	r4, [pc, #300]	; (13c6c <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   13b3e:	47a0      	blx	r4
	WaitOnBusy();
   13b40:	f107 0310 	add.w	r3, r7, #16
   13b44:	3b0c      	subs	r3, #12
   13b46:	6818      	ldr	r0, [r3, #0]
   13b48:	4b49      	ldr	r3, [pc, #292]	; (13c70 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   13b4a:	4798      	blx	r3
	Erase(currentAddress);
   13b4c:	f107 0310 	add.w	r3, r7, #16
   13b50:	3b0c      	subs	r3, #12
   13b52:	681b      	ldr	r3, [r3, #0]
   13b54:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   13b58:	f107 0310 	add.w	r3, r7, #16
   13b5c:	3b0c      	subs	r3, #12
   13b5e:	4611      	mov	r1, r2
   13b60:	6818      	ldr	r0, [r3, #0]
   13b62:	4b44      	ldr	r3, [pc, #272]	; (13c74 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   13b64:	4798      	blx	r3
	WaitOnBusy();
   13b66:	f107 0310 	add.w	r3, r7, #16
   13b6a:	3b0c      	subs	r3, #12
   13b6c:	6818      	ldr	r0, [r3, #0]
   13b6e:	4b40      	ldr	r3, [pc, #256]	; (13c70 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   13b70:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   13b72:	f107 0310 	add.w	r3, r7, #16
   13b76:	3b0c      	subs	r3, #12
   13b78:	681b      	ldr	r3, [r3, #0]
   13b7a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   13b7e:	f107 0110 	add.w	r1, r7, #16
   13b82:	3904      	subs	r1, #4
   13b84:	f107 0010 	add.w	r0, r7, #16
   13b88:	380c      	subs	r0, #12
   13b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   13b8e:	6800      	ldr	r0, [r0, #0]
   13b90:	4c39      	ldr	r4, [pc, #228]	; (13c78 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   13b92:	47a0      	blx	r4
	WaitOnBusy();
   13b94:	f107 0310 	add.w	r3, r7, #16
   13b98:	3b0c      	subs	r3, #12
   13b9a:	6818      	ldr	r0, [r3, #0]
   13b9c:	4b34      	ldr	r3, [pc, #208]	; (13c70 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   13b9e:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   13ba0:	f107 0310 	add.w	r3, r7, #16
   13ba4:	3b0c      	subs	r3, #12
   13ba6:	681b      	ldr	r3, [r3, #0]
   13ba8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   13bac:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   13bb0:	f101 0110 	add.w	r1, r1, #16
   13bb4:	3904      	subs	r1, #4
   13bb6:	f107 0010 	add.w	r0, r7, #16
   13bba:	380c      	subs	r0, #12
   13bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   13bc0:	6800      	ldr	r0, [r0, #0]
   13bc2:	4c2a      	ldr	r4, [pc, #168]	; (13c6c <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   13bc4:	47a0      	blx	r4
	WaitOnBusy();
   13bc6:	f107 0310 	add.w	r3, r7, #16
   13bca:	3b0c      	subs	r3, #12
   13bcc:	6818      	ldr	r0, [r3, #0]
   13bce:	4b28      	ldr	r3, [pc, #160]	; (13c70 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   13bd0:	4798      	blx	r3
	isOK	 = true;
   13bd2:	f107 0310 	add.w	r3, r7, #16
   13bd6:	3b0c      	subs	r3, #12
   13bd8:	681b      	ldr	r3, [r3, #0]
   13bda:	2201      	movs	r2, #1
   13bdc:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   13be0:	2300      	movs	r3, #0
   13be2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   13be6:	f102 020c 	add.w	r2, r2, #12
   13bea:	6013      	str	r3, [r2, #0]
   13bec:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   13bf0:	f103 030c 	add.w	r3, r3, #12
   13bf4:	681b      	ldr	r3, [r3, #0]
   13bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   13bfa:	da2b      	bge.n	13c54 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   13bfc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   13c00:	f103 0310 	add.w	r3, r3, #16
   13c04:	3b04      	subs	r3, #4
   13c06:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   13c0a:	f102 020c 	add.w	r2, r2, #12
   13c0e:	6812      	ldr	r2, [r2, #0]
   13c10:	4413      	add	r3, r2
   13c12:	781a      	ldrb	r2, [r3, #0]
   13c14:	f107 0310 	add.w	r3, r7, #16
   13c18:	3b04      	subs	r3, #4
   13c1a:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   13c1e:	f101 010c 	add.w	r1, r1, #12
   13c22:	6809      	ldr	r1, [r1, #0]
   13c24:	440b      	add	r3, r1
   13c26:	781b      	ldrb	r3, [r3, #0]
   13c28:	429a      	cmp	r2, r3
   13c2a:	d007      	beq.n	13c3c <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   13c2c:	f107 0310 	add.w	r3, r7, #16
   13c30:	3b0c      	subs	r3, #12
   13c32:	681b      	ldr	r3, [r3, #0]
   13c34:	2200      	movs	r2, #0
   13c36:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   13c3a:	e00b      	b.n	13c54 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   13c3c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   13c40:	f103 030c 	add.w	r3, r3, #12
   13c44:	681b      	ldr	r3, [r3, #0]
   13c46:	3301      	adds	r3, #1
   13c48:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   13c4c:	f102 020c 	add.w	r2, r2, #12
   13c50:	6013      	str	r3, [r2, #0]
   13c52:	e7cb      	b.n	13bec <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   13c54:	f107 0310 	add.w	r3, r7, #16
   13c58:	3b0c      	subs	r3, #12
   13c5a:	681b      	ldr	r3, [r3, #0]
   13c5c:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   13c60:	4618      	mov	r0, r3
   13c62:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   13c66:	3714      	adds	r7, #20
   13c68:	46bd      	mov	sp, r7
   13c6a:	bd90      	pop	{r4, r7, pc}
   13c6c:	00013a05 	.word	0x00013a05
   13c70:	00013ab5 	.word	0x00013ab5
   13c74:	000139a1 	.word	0x000139a1
   13c78:	000139d1 	.word	0x000139d1

00013c7c <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   13c7c:	b580      	push	{r7, lr}
   13c7e:	b082      	sub	sp, #8
   13c80:	af00      	add	r7, sp, #0
   13c82:	6078      	str	r0, [r7, #4]
   13c84:	6039      	str	r1, [r7, #0]
   13c86:	687b      	ldr	r3, [r7, #4]
   13c88:	2b01      	cmp	r3, #1
   13c8a:	d10d      	bne.n	13ca8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13c8c:	683b      	ldr	r3, [r7, #0]
   13c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13c92:	4293      	cmp	r3, r2
   13c94:	d108      	bne.n	13ca8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13c96:	4906      	ldr	r1, [pc, #24]	; (13cb0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13c98:	4806      	ldr	r0, [pc, #24]	; (13cb4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13c9a:	4b07      	ldr	r3, [pc, #28]	; (13cb8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13c9c:	4798      	blx	r3
   13c9e:	4a07      	ldr	r2, [pc, #28]	; (13cbc <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13ca0:	4907      	ldr	r1, [pc, #28]	; (13cc0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13ca2:	4804      	ldr	r0, [pc, #16]	; (13cb4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13ca4:	4b07      	ldr	r3, [pc, #28]	; (13cc4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   13ca6:	4798      	blx	r3
   13ca8:	bf00      	nop
   13caa:	3708      	adds	r7, #8
   13cac:	46bd      	mov	sp, r7
   13cae:	bd80      	pop	{r7, pc}
   13cb0:	2000a250 	.word	0x2000a250
   13cb4:	20009f90 	.word	0x20009f90
   13cb8:	000138f9 	.word	0x000138f9
   13cbc:	20000000 	.word	0x20000000
   13cc0:	00013921 	.word	0x00013921
   13cc4:	00013cdd 	.word	0x00013cdd

00013cc8 <_GLOBAL__sub_I_ptrN25Q256Class>:
   13cc8:	b580      	push	{r7, lr}
   13cca:	af00      	add	r7, sp, #0
   13ccc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13cd0:	2001      	movs	r0, #1
   13cd2:	4b01      	ldr	r3, [pc, #4]	; (13cd8 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   13cd4:	4798      	blx	r3
   13cd6:	bd80      	pop	{r7, pc}
   13cd8:	00013c7d 	.word	0x00013c7d

00013cdc <__aeabi_atexit>:
   13cdc:	460b      	mov	r3, r1
   13cde:	4601      	mov	r1, r0
   13ce0:	4618      	mov	r0, r3
   13ce2:	f000 ba7f 	b.w	141e4 <__cxa_atexit>
   13ce6:	bf00      	nop

00013ce8 <__aeabi_frsub>:
   13ce8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   13cec:	e002      	b.n	13cf4 <__addsf3>
   13cee:	bf00      	nop

00013cf0 <__aeabi_fsub>:
   13cf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00013cf4 <__addsf3>:
   13cf4:	0042      	lsls	r2, r0, #1
   13cf6:	bf1f      	itttt	ne
   13cf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   13cfc:	ea92 0f03 	teqne	r2, r3
   13d00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   13d04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   13d08:	d06a      	beq.n	13de0 <__addsf3+0xec>
   13d0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   13d0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   13d12:	bfc1      	itttt	gt
   13d14:	18d2      	addgt	r2, r2, r3
   13d16:	4041      	eorgt	r1, r0
   13d18:	4048      	eorgt	r0, r1
   13d1a:	4041      	eorgt	r1, r0
   13d1c:	bfb8      	it	lt
   13d1e:	425b      	neglt	r3, r3
   13d20:	2b19      	cmp	r3, #25
   13d22:	bf88      	it	hi
   13d24:	4770      	bxhi	lr
   13d26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   13d2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13d2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13d32:	bf18      	it	ne
   13d34:	4240      	negne	r0, r0
   13d36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13d3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   13d3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   13d42:	bf18      	it	ne
   13d44:	4249      	negne	r1, r1
   13d46:	ea92 0f03 	teq	r2, r3
   13d4a:	d03f      	beq.n	13dcc <__addsf3+0xd8>
   13d4c:	f1a2 0201 	sub.w	r2, r2, #1
   13d50:	fa41 fc03 	asr.w	ip, r1, r3
   13d54:	eb10 000c 	adds.w	r0, r0, ip
   13d58:	f1c3 0320 	rsb	r3, r3, #32
   13d5c:	fa01 f103 	lsl.w	r1, r1, r3
   13d60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13d64:	d502      	bpl.n	13d6c <__addsf3+0x78>
   13d66:	4249      	negs	r1, r1
   13d68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   13d6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13d70:	d313      	bcc.n	13d9a <__addsf3+0xa6>
   13d72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   13d76:	d306      	bcc.n	13d86 <__addsf3+0x92>
   13d78:	0840      	lsrs	r0, r0, #1
   13d7a:	ea4f 0131 	mov.w	r1, r1, rrx
   13d7e:	f102 0201 	add.w	r2, r2, #1
   13d82:	2afe      	cmp	r2, #254	; 0xfe
   13d84:	d251      	bcs.n	13e2a <__addsf3+0x136>
   13d86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   13d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13d8e:	bf08      	it	eq
   13d90:	f020 0001 	biceq.w	r0, r0, #1
   13d94:	ea40 0003 	orr.w	r0, r0, r3
   13d98:	4770      	bx	lr
   13d9a:	0049      	lsls	r1, r1, #1
   13d9c:	eb40 0000 	adc.w	r0, r0, r0
   13da0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   13da4:	f1a2 0201 	sub.w	r2, r2, #1
   13da8:	d1ed      	bne.n	13d86 <__addsf3+0x92>
   13daa:	fab0 fc80 	clz	ip, r0
   13dae:	f1ac 0c08 	sub.w	ip, ip, #8
   13db2:	ebb2 020c 	subs.w	r2, r2, ip
   13db6:	fa00 f00c 	lsl.w	r0, r0, ip
   13dba:	bfaa      	itet	ge
   13dbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   13dc0:	4252      	neglt	r2, r2
   13dc2:	4318      	orrge	r0, r3
   13dc4:	bfbc      	itt	lt
   13dc6:	40d0      	lsrlt	r0, r2
   13dc8:	4318      	orrlt	r0, r3
   13dca:	4770      	bx	lr
   13dcc:	f092 0f00 	teq	r2, #0
   13dd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   13dd4:	bf06      	itte	eq
   13dd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   13dda:	3201      	addeq	r2, #1
   13ddc:	3b01      	subne	r3, #1
   13dde:	e7b5      	b.n	13d4c <__addsf3+0x58>
   13de0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   13de4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   13de8:	bf18      	it	ne
   13dea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   13dee:	d021      	beq.n	13e34 <__addsf3+0x140>
   13df0:	ea92 0f03 	teq	r2, r3
   13df4:	d004      	beq.n	13e00 <__addsf3+0x10c>
   13df6:	f092 0f00 	teq	r2, #0
   13dfa:	bf08      	it	eq
   13dfc:	4608      	moveq	r0, r1
   13dfe:	4770      	bx	lr
   13e00:	ea90 0f01 	teq	r0, r1
   13e04:	bf1c      	itt	ne
   13e06:	2000      	movne	r0, #0
   13e08:	4770      	bxne	lr
   13e0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   13e0e:	d104      	bne.n	13e1a <__addsf3+0x126>
   13e10:	0040      	lsls	r0, r0, #1
   13e12:	bf28      	it	cs
   13e14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   13e18:	4770      	bx	lr
   13e1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   13e1e:	bf3c      	itt	cc
   13e20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   13e24:	4770      	bxcc	lr
   13e26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13e2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   13e2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13e32:	4770      	bx	lr
   13e34:	ea7f 6222 	mvns.w	r2, r2, asr #24
   13e38:	bf16      	itet	ne
   13e3a:	4608      	movne	r0, r1
   13e3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   13e40:	4601      	movne	r1, r0
   13e42:	0242      	lsls	r2, r0, #9
   13e44:	bf06      	itte	eq
   13e46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   13e4a:	ea90 0f01 	teqeq	r0, r1
   13e4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   13e52:	4770      	bx	lr

00013e54 <__aeabi_ui2f>:
   13e54:	f04f 0300 	mov.w	r3, #0
   13e58:	e004      	b.n	13e64 <__aeabi_i2f+0x8>
   13e5a:	bf00      	nop

00013e5c <__aeabi_i2f>:
   13e5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   13e60:	bf48      	it	mi
   13e62:	4240      	negmi	r0, r0
   13e64:	ea5f 0c00 	movs.w	ip, r0
   13e68:	bf08      	it	eq
   13e6a:	4770      	bxeq	lr
   13e6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   13e70:	4601      	mov	r1, r0
   13e72:	f04f 0000 	mov.w	r0, #0
   13e76:	e01c      	b.n	13eb2 <__aeabi_l2f+0x2a>

00013e78 <__aeabi_ul2f>:
   13e78:	ea50 0201 	orrs.w	r2, r0, r1
   13e7c:	bf08      	it	eq
   13e7e:	4770      	bxeq	lr
   13e80:	f04f 0300 	mov.w	r3, #0
   13e84:	e00a      	b.n	13e9c <__aeabi_l2f+0x14>
   13e86:	bf00      	nop

00013e88 <__aeabi_l2f>:
   13e88:	ea50 0201 	orrs.w	r2, r0, r1
   13e8c:	bf08      	it	eq
   13e8e:	4770      	bxeq	lr
   13e90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   13e94:	d502      	bpl.n	13e9c <__aeabi_l2f+0x14>
   13e96:	4240      	negs	r0, r0
   13e98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13e9c:	ea5f 0c01 	movs.w	ip, r1
   13ea0:	bf02      	ittt	eq
   13ea2:	4684      	moveq	ip, r0
   13ea4:	4601      	moveq	r1, r0
   13ea6:	2000      	moveq	r0, #0
   13ea8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   13eac:	bf08      	it	eq
   13eae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   13eb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   13eb6:	fabc f28c 	clz	r2, ip
   13eba:	3a08      	subs	r2, #8
   13ebc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   13ec0:	db10      	blt.n	13ee4 <__aeabi_l2f+0x5c>
   13ec2:	fa01 fc02 	lsl.w	ip, r1, r2
   13ec6:	4463      	add	r3, ip
   13ec8:	fa00 fc02 	lsl.w	ip, r0, r2
   13ecc:	f1c2 0220 	rsb	r2, r2, #32
   13ed0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   13ed4:	fa20 f202 	lsr.w	r2, r0, r2
   13ed8:	eb43 0002 	adc.w	r0, r3, r2
   13edc:	bf08      	it	eq
   13ede:	f020 0001 	biceq.w	r0, r0, #1
   13ee2:	4770      	bx	lr
   13ee4:	f102 0220 	add.w	r2, r2, #32
   13ee8:	fa01 fc02 	lsl.w	ip, r1, r2
   13eec:	f1c2 0220 	rsb	r2, r2, #32
   13ef0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   13ef4:	fa21 f202 	lsr.w	r2, r1, r2
   13ef8:	eb43 0002 	adc.w	r0, r3, r2
   13efc:	bf08      	it	eq
   13efe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   13f02:	4770      	bx	lr

00013f04 <__aeabi_fmul>:
   13f04:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13f08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   13f0c:	bf1e      	ittt	ne
   13f0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   13f12:	ea92 0f0c 	teqne	r2, ip
   13f16:	ea93 0f0c 	teqne	r3, ip
   13f1a:	d06f      	beq.n	13ffc <__aeabi_fmul+0xf8>
   13f1c:	441a      	add	r2, r3
   13f1e:	ea80 0c01 	eor.w	ip, r0, r1
   13f22:	0240      	lsls	r0, r0, #9
   13f24:	bf18      	it	ne
   13f26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   13f2a:	d01e      	beq.n	13f6a <__aeabi_fmul+0x66>
   13f2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   13f30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   13f34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   13f38:	fba0 3101 	umull	r3, r1, r0, r1
   13f3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13f40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   13f44:	bf3e      	ittt	cc
   13f46:	0049      	lslcc	r1, r1, #1
   13f48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   13f4c:	005b      	lslcc	r3, r3, #1
   13f4e:	ea40 0001 	orr.w	r0, r0, r1
   13f52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   13f56:	2afd      	cmp	r2, #253	; 0xfd
   13f58:	d81d      	bhi.n	13f96 <__aeabi_fmul+0x92>
   13f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   13f5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13f62:	bf08      	it	eq
   13f64:	f020 0001 	biceq.w	r0, r0, #1
   13f68:	4770      	bx	lr
   13f6a:	f090 0f00 	teq	r0, #0
   13f6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   13f72:	bf08      	it	eq
   13f74:	0249      	lsleq	r1, r1, #9
   13f76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   13f7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   13f7e:	3a7f      	subs	r2, #127	; 0x7f
   13f80:	bfc2      	ittt	gt
   13f82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   13f86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13f8a:	4770      	bxgt	lr
   13f8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13f90:	f04f 0300 	mov.w	r3, #0
   13f94:	3a01      	subs	r2, #1
   13f96:	dc5d      	bgt.n	14054 <__aeabi_fmul+0x150>
   13f98:	f112 0f19 	cmn.w	r2, #25
   13f9c:	bfdc      	itt	le
   13f9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   13fa2:	4770      	bxle	lr
   13fa4:	f1c2 0200 	rsb	r2, r2, #0
   13fa8:	0041      	lsls	r1, r0, #1
   13faa:	fa21 f102 	lsr.w	r1, r1, r2
   13fae:	f1c2 0220 	rsb	r2, r2, #32
   13fb2:	fa00 fc02 	lsl.w	ip, r0, r2
   13fb6:	ea5f 0031 	movs.w	r0, r1, rrx
   13fba:	f140 0000 	adc.w	r0, r0, #0
   13fbe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   13fc2:	bf08      	it	eq
   13fc4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   13fc8:	4770      	bx	lr
   13fca:	f092 0f00 	teq	r2, #0
   13fce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   13fd2:	bf02      	ittt	eq
   13fd4:	0040      	lsleq	r0, r0, #1
   13fd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   13fda:	3a01      	subeq	r2, #1
   13fdc:	d0f9      	beq.n	13fd2 <__aeabi_fmul+0xce>
   13fde:	ea40 000c 	orr.w	r0, r0, ip
   13fe2:	f093 0f00 	teq	r3, #0
   13fe6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13fea:	bf02      	ittt	eq
   13fec:	0049      	lsleq	r1, r1, #1
   13fee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   13ff2:	3b01      	subeq	r3, #1
   13ff4:	d0f9      	beq.n	13fea <__aeabi_fmul+0xe6>
   13ff6:	ea41 010c 	orr.w	r1, r1, ip
   13ffa:	e78f      	b.n	13f1c <__aeabi_fmul+0x18>
   13ffc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   14000:	ea92 0f0c 	teq	r2, ip
   14004:	bf18      	it	ne
   14006:	ea93 0f0c 	teqne	r3, ip
   1400a:	d00a      	beq.n	14022 <__aeabi_fmul+0x11e>
   1400c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   14010:	bf18      	it	ne
   14012:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   14016:	d1d8      	bne.n	13fca <__aeabi_fmul+0xc6>
   14018:	ea80 0001 	eor.w	r0, r0, r1
   1401c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   14020:	4770      	bx	lr
   14022:	f090 0f00 	teq	r0, #0
   14026:	bf17      	itett	ne
   14028:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1402c:	4608      	moveq	r0, r1
   1402e:	f091 0f00 	teqne	r1, #0
   14032:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   14036:	d014      	beq.n	14062 <__aeabi_fmul+0x15e>
   14038:	ea92 0f0c 	teq	r2, ip
   1403c:	d101      	bne.n	14042 <__aeabi_fmul+0x13e>
   1403e:	0242      	lsls	r2, r0, #9
   14040:	d10f      	bne.n	14062 <__aeabi_fmul+0x15e>
   14042:	ea93 0f0c 	teq	r3, ip
   14046:	d103      	bne.n	14050 <__aeabi_fmul+0x14c>
   14048:	024b      	lsls	r3, r1, #9
   1404a:	bf18      	it	ne
   1404c:	4608      	movne	r0, r1
   1404e:	d108      	bne.n	14062 <__aeabi_fmul+0x15e>
   14050:	ea80 0001 	eor.w	r0, r0, r1
   14054:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   14058:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1405c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   14060:	4770      	bx	lr
   14062:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   14066:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1406a:	4770      	bx	lr

0001406c <__aeabi_fdiv>:
   1406c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   14070:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   14074:	bf1e      	ittt	ne
   14076:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1407a:	ea92 0f0c 	teqne	r2, ip
   1407e:	ea93 0f0c 	teqne	r3, ip
   14082:	d069      	beq.n	14158 <__aeabi_fdiv+0xec>
   14084:	eba2 0203 	sub.w	r2, r2, r3
   14088:	ea80 0c01 	eor.w	ip, r0, r1
   1408c:	0249      	lsls	r1, r1, #9
   1408e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   14092:	d037      	beq.n	14104 <__aeabi_fdiv+0x98>
   14094:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14098:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1409c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   140a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   140a4:	428b      	cmp	r3, r1
   140a6:	bf38      	it	cc
   140a8:	005b      	lslcc	r3, r3, #1
   140aa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   140ae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   140b2:	428b      	cmp	r3, r1
   140b4:	bf24      	itt	cs
   140b6:	1a5b      	subcs	r3, r3, r1
   140b8:	ea40 000c 	orrcs.w	r0, r0, ip
   140bc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   140c0:	bf24      	itt	cs
   140c2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   140c6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   140ca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   140ce:	bf24      	itt	cs
   140d0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   140d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   140d8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   140dc:	bf24      	itt	cs
   140de:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   140e2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   140e6:	011b      	lsls	r3, r3, #4
   140e8:	bf18      	it	ne
   140ea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   140ee:	d1e0      	bne.n	140b2 <__aeabi_fdiv+0x46>
   140f0:	2afd      	cmp	r2, #253	; 0xfd
   140f2:	f63f af50 	bhi.w	13f96 <__aeabi_fmul+0x92>
   140f6:	428b      	cmp	r3, r1
   140f8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   140fc:	bf08      	it	eq
   140fe:	f020 0001 	biceq.w	r0, r0, #1
   14102:	4770      	bx	lr
   14104:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   14108:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1410c:	327f      	adds	r2, #127	; 0x7f
   1410e:	bfc2      	ittt	gt
   14110:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   14114:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   14118:	4770      	bxgt	lr
   1411a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1411e:	f04f 0300 	mov.w	r3, #0
   14122:	3a01      	subs	r2, #1
   14124:	e737      	b.n	13f96 <__aeabi_fmul+0x92>
   14126:	f092 0f00 	teq	r2, #0
   1412a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1412e:	bf02      	ittt	eq
   14130:	0040      	lsleq	r0, r0, #1
   14132:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   14136:	3a01      	subeq	r2, #1
   14138:	d0f9      	beq.n	1412e <__aeabi_fdiv+0xc2>
   1413a:	ea40 000c 	orr.w	r0, r0, ip
   1413e:	f093 0f00 	teq	r3, #0
   14142:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   14146:	bf02      	ittt	eq
   14148:	0049      	lsleq	r1, r1, #1
   1414a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1414e:	3b01      	subeq	r3, #1
   14150:	d0f9      	beq.n	14146 <__aeabi_fdiv+0xda>
   14152:	ea41 010c 	orr.w	r1, r1, ip
   14156:	e795      	b.n	14084 <__aeabi_fdiv+0x18>
   14158:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1415c:	ea92 0f0c 	teq	r2, ip
   14160:	d108      	bne.n	14174 <__aeabi_fdiv+0x108>
   14162:	0242      	lsls	r2, r0, #9
   14164:	f47f af7d 	bne.w	14062 <__aeabi_fmul+0x15e>
   14168:	ea93 0f0c 	teq	r3, ip
   1416c:	f47f af70 	bne.w	14050 <__aeabi_fmul+0x14c>
   14170:	4608      	mov	r0, r1
   14172:	e776      	b.n	14062 <__aeabi_fmul+0x15e>
   14174:	ea93 0f0c 	teq	r3, ip
   14178:	d104      	bne.n	14184 <__aeabi_fdiv+0x118>
   1417a:	024b      	lsls	r3, r1, #9
   1417c:	f43f af4c 	beq.w	14018 <__aeabi_fmul+0x114>
   14180:	4608      	mov	r0, r1
   14182:	e76e      	b.n	14062 <__aeabi_fmul+0x15e>
   14184:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   14188:	bf18      	it	ne
   1418a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1418e:	d1ca      	bne.n	14126 <__aeabi_fdiv+0xba>
   14190:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   14194:	f47f af5c 	bne.w	14050 <__aeabi_fmul+0x14c>
   14198:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1419c:	f47f af3c 	bne.w	14018 <__aeabi_fmul+0x114>
   141a0:	e75f      	b.n	14062 <__aeabi_fmul+0x15e>
   141a2:	bf00      	nop

000141a4 <__aeabi_f2uiz>:
   141a4:	0042      	lsls	r2, r0, #1
   141a6:	d20e      	bcs.n	141c6 <__aeabi_f2uiz+0x22>
   141a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   141ac:	d30b      	bcc.n	141c6 <__aeabi_f2uiz+0x22>
   141ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
   141b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   141b6:	d409      	bmi.n	141cc <__aeabi_f2uiz+0x28>
   141b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   141bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   141c0:	fa23 f002 	lsr.w	r0, r3, r2
   141c4:	4770      	bx	lr
   141c6:	f04f 0000 	mov.w	r0, #0
   141ca:	4770      	bx	lr
   141cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   141d0:	d101      	bne.n	141d6 <__aeabi_f2uiz+0x32>
   141d2:	0242      	lsls	r2, r0, #9
   141d4:	d102      	bne.n	141dc <__aeabi_f2uiz+0x38>
   141d6:	f04f 30ff 	mov.w	r0, #4294967295
   141da:	4770      	bx	lr
   141dc:	f04f 0000 	mov.w	r0, #0
   141e0:	4770      	bx	lr
   141e2:	bf00      	nop

000141e4 <__cxa_atexit>:
   141e4:	4613      	mov	r3, r2
   141e6:	460a      	mov	r2, r1
   141e8:	4601      	mov	r1, r0
   141ea:	2002      	movs	r0, #2
   141ec:	f000 b996 	b.w	1451c <__register_exitproc>

000141f0 <ffs>:
   141f0:	b140      	cbz	r0, 14204 <ffs+0x14>
   141f2:	2300      	movs	r3, #0
   141f4:	fa40 f103 	asr.w	r1, r0, r3
   141f8:	1c5a      	adds	r2, r3, #1
   141fa:	07c9      	lsls	r1, r1, #31
   141fc:	4613      	mov	r3, r2
   141fe:	d5f9      	bpl.n	141f4 <ffs+0x4>
   14200:	4610      	mov	r0, r2
   14202:	4770      	bx	lr
   14204:	4602      	mov	r2, r0
   14206:	4610      	mov	r0, r2
   14208:	4770      	bx	lr
   1420a:	bf00      	nop

0001420c <__libc_init_array>:
   1420c:	b570      	push	{r4, r5, r6, lr}
   1420e:	4e0f      	ldr	r6, [pc, #60]	; (1424c <__libc_init_array+0x40>)
   14210:	4d0f      	ldr	r5, [pc, #60]	; (14250 <__libc_init_array+0x44>)
   14212:	1b76      	subs	r6, r6, r5
   14214:	10b6      	asrs	r6, r6, #2
   14216:	bf18      	it	ne
   14218:	2400      	movne	r4, #0
   1421a:	d005      	beq.n	14228 <__libc_init_array+0x1c>
   1421c:	3401      	adds	r4, #1
   1421e:	f855 3b04 	ldr.w	r3, [r5], #4
   14222:	4798      	blx	r3
   14224:	42a6      	cmp	r6, r4
   14226:	d1f9      	bne.n	1421c <__libc_init_array+0x10>
   14228:	4e0a      	ldr	r6, [pc, #40]	; (14254 <__libc_init_array+0x48>)
   1422a:	4d0b      	ldr	r5, [pc, #44]	; (14258 <__libc_init_array+0x4c>)
   1422c:	1b76      	subs	r6, r6, r5
   1422e:	f000 fca5 	bl	14b7c <_init>
   14232:	10b6      	asrs	r6, r6, #2
   14234:	bf18      	it	ne
   14236:	2400      	movne	r4, #0
   14238:	d006      	beq.n	14248 <__libc_init_array+0x3c>
   1423a:	3401      	adds	r4, #1
   1423c:	f855 3b04 	ldr.w	r3, [r5], #4
   14240:	4798      	blx	r3
   14242:	42a6      	cmp	r6, r4
   14244:	d1f9      	bne.n	1423a <__libc_init_array+0x2e>
   14246:	bd70      	pop	{r4, r5, r6, pc}
   14248:	bd70      	pop	{r4, r5, r6, pc}
   1424a:	bf00      	nop
   1424c:	00014b88 	.word	0x00014b88
   14250:	00014b88 	.word	0x00014b88
   14254:	00014be8 	.word	0x00014be8
   14258:	00014b88 	.word	0x00014b88

0001425c <memcpy>:
   1425c:	4684      	mov	ip, r0
   1425e:	ea41 0300 	orr.w	r3, r1, r0
   14262:	f013 0303 	ands.w	r3, r3, #3
   14266:	d16d      	bne.n	14344 <memcpy+0xe8>
   14268:	3a40      	subs	r2, #64	; 0x40
   1426a:	d341      	bcc.n	142f0 <memcpy+0x94>
   1426c:	f851 3b04 	ldr.w	r3, [r1], #4
   14270:	f840 3b04 	str.w	r3, [r0], #4
   14274:	f851 3b04 	ldr.w	r3, [r1], #4
   14278:	f840 3b04 	str.w	r3, [r0], #4
   1427c:	f851 3b04 	ldr.w	r3, [r1], #4
   14280:	f840 3b04 	str.w	r3, [r0], #4
   14284:	f851 3b04 	ldr.w	r3, [r1], #4
   14288:	f840 3b04 	str.w	r3, [r0], #4
   1428c:	f851 3b04 	ldr.w	r3, [r1], #4
   14290:	f840 3b04 	str.w	r3, [r0], #4
   14294:	f851 3b04 	ldr.w	r3, [r1], #4
   14298:	f840 3b04 	str.w	r3, [r0], #4
   1429c:	f851 3b04 	ldr.w	r3, [r1], #4
   142a0:	f840 3b04 	str.w	r3, [r0], #4
   142a4:	f851 3b04 	ldr.w	r3, [r1], #4
   142a8:	f840 3b04 	str.w	r3, [r0], #4
   142ac:	f851 3b04 	ldr.w	r3, [r1], #4
   142b0:	f840 3b04 	str.w	r3, [r0], #4
   142b4:	f851 3b04 	ldr.w	r3, [r1], #4
   142b8:	f840 3b04 	str.w	r3, [r0], #4
   142bc:	f851 3b04 	ldr.w	r3, [r1], #4
   142c0:	f840 3b04 	str.w	r3, [r0], #4
   142c4:	f851 3b04 	ldr.w	r3, [r1], #4
   142c8:	f840 3b04 	str.w	r3, [r0], #4
   142cc:	f851 3b04 	ldr.w	r3, [r1], #4
   142d0:	f840 3b04 	str.w	r3, [r0], #4
   142d4:	f851 3b04 	ldr.w	r3, [r1], #4
   142d8:	f840 3b04 	str.w	r3, [r0], #4
   142dc:	f851 3b04 	ldr.w	r3, [r1], #4
   142e0:	f840 3b04 	str.w	r3, [r0], #4
   142e4:	f851 3b04 	ldr.w	r3, [r1], #4
   142e8:	f840 3b04 	str.w	r3, [r0], #4
   142ec:	3a40      	subs	r2, #64	; 0x40
   142ee:	d2bd      	bcs.n	1426c <memcpy+0x10>
   142f0:	3230      	adds	r2, #48	; 0x30
   142f2:	d311      	bcc.n	14318 <memcpy+0xbc>
   142f4:	f851 3b04 	ldr.w	r3, [r1], #4
   142f8:	f840 3b04 	str.w	r3, [r0], #4
   142fc:	f851 3b04 	ldr.w	r3, [r1], #4
   14300:	f840 3b04 	str.w	r3, [r0], #4
   14304:	f851 3b04 	ldr.w	r3, [r1], #4
   14308:	f840 3b04 	str.w	r3, [r0], #4
   1430c:	f851 3b04 	ldr.w	r3, [r1], #4
   14310:	f840 3b04 	str.w	r3, [r0], #4
   14314:	3a10      	subs	r2, #16
   14316:	d2ed      	bcs.n	142f4 <memcpy+0x98>
   14318:	320c      	adds	r2, #12
   1431a:	d305      	bcc.n	14328 <memcpy+0xcc>
   1431c:	f851 3b04 	ldr.w	r3, [r1], #4
   14320:	f840 3b04 	str.w	r3, [r0], #4
   14324:	3a04      	subs	r2, #4
   14326:	d2f9      	bcs.n	1431c <memcpy+0xc0>
   14328:	3204      	adds	r2, #4
   1432a:	d008      	beq.n	1433e <memcpy+0xe2>
   1432c:	07d2      	lsls	r2, r2, #31
   1432e:	bf1c      	itt	ne
   14330:	f811 3b01 	ldrbne.w	r3, [r1], #1
   14334:	f800 3b01 	strbne.w	r3, [r0], #1
   14338:	d301      	bcc.n	1433e <memcpy+0xe2>
   1433a:	880b      	ldrh	r3, [r1, #0]
   1433c:	8003      	strh	r3, [r0, #0]
   1433e:	4660      	mov	r0, ip
   14340:	4770      	bx	lr
   14342:	bf00      	nop
   14344:	2a08      	cmp	r2, #8
   14346:	d313      	bcc.n	14370 <memcpy+0x114>
   14348:	078b      	lsls	r3, r1, #30
   1434a:	d08d      	beq.n	14268 <memcpy+0xc>
   1434c:	f010 0303 	ands.w	r3, r0, #3
   14350:	d08a      	beq.n	14268 <memcpy+0xc>
   14352:	f1c3 0304 	rsb	r3, r3, #4
   14356:	1ad2      	subs	r2, r2, r3
   14358:	07db      	lsls	r3, r3, #31
   1435a:	bf1c      	itt	ne
   1435c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   14360:	f800 3b01 	strbne.w	r3, [r0], #1
   14364:	d380      	bcc.n	14268 <memcpy+0xc>
   14366:	f831 3b02 	ldrh.w	r3, [r1], #2
   1436a:	f820 3b02 	strh.w	r3, [r0], #2
   1436e:	e77b      	b.n	14268 <memcpy+0xc>
   14370:	3a04      	subs	r2, #4
   14372:	d3d9      	bcc.n	14328 <memcpy+0xcc>
   14374:	3a01      	subs	r2, #1
   14376:	f811 3b01 	ldrb.w	r3, [r1], #1
   1437a:	f800 3b01 	strb.w	r3, [r0], #1
   1437e:	d2f9      	bcs.n	14374 <memcpy+0x118>
   14380:	780b      	ldrb	r3, [r1, #0]
   14382:	7003      	strb	r3, [r0, #0]
   14384:	784b      	ldrb	r3, [r1, #1]
   14386:	7043      	strb	r3, [r0, #1]
   14388:	788b      	ldrb	r3, [r1, #2]
   1438a:	7083      	strb	r3, [r0, #2]
   1438c:	4660      	mov	r0, ip
   1438e:	4770      	bx	lr

00014390 <memset>:
   14390:	b470      	push	{r4, r5, r6}
   14392:	0786      	lsls	r6, r0, #30
   14394:	d046      	beq.n	14424 <memset+0x94>
   14396:	1e54      	subs	r4, r2, #1
   14398:	2a00      	cmp	r2, #0
   1439a:	d041      	beq.n	14420 <memset+0x90>
   1439c:	b2ca      	uxtb	r2, r1
   1439e:	4603      	mov	r3, r0
   143a0:	e002      	b.n	143a8 <memset+0x18>
   143a2:	f114 34ff 	adds.w	r4, r4, #4294967295
   143a6:	d33b      	bcc.n	14420 <memset+0x90>
   143a8:	f803 2b01 	strb.w	r2, [r3], #1
   143ac:	079d      	lsls	r5, r3, #30
   143ae:	d1f8      	bne.n	143a2 <memset+0x12>
   143b0:	2c03      	cmp	r4, #3
   143b2:	d92e      	bls.n	14412 <memset+0x82>
   143b4:	b2cd      	uxtb	r5, r1
   143b6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   143ba:	2c0f      	cmp	r4, #15
   143bc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   143c0:	d919      	bls.n	143f6 <memset+0x66>
   143c2:	f103 0210 	add.w	r2, r3, #16
   143c6:	4626      	mov	r6, r4
   143c8:	3e10      	subs	r6, #16
   143ca:	2e0f      	cmp	r6, #15
   143cc:	f842 5c10 	str.w	r5, [r2, #-16]
   143d0:	f842 5c0c 	str.w	r5, [r2, #-12]
   143d4:	f842 5c08 	str.w	r5, [r2, #-8]
   143d8:	f842 5c04 	str.w	r5, [r2, #-4]
   143dc:	f102 0210 	add.w	r2, r2, #16
   143e0:	d8f2      	bhi.n	143c8 <memset+0x38>
   143e2:	f1a4 0210 	sub.w	r2, r4, #16
   143e6:	f022 020f 	bic.w	r2, r2, #15
   143ea:	f004 040f 	and.w	r4, r4, #15
   143ee:	3210      	adds	r2, #16
   143f0:	2c03      	cmp	r4, #3
   143f2:	4413      	add	r3, r2
   143f4:	d90d      	bls.n	14412 <memset+0x82>
   143f6:	461e      	mov	r6, r3
   143f8:	4622      	mov	r2, r4
   143fa:	3a04      	subs	r2, #4
   143fc:	2a03      	cmp	r2, #3
   143fe:	f846 5b04 	str.w	r5, [r6], #4
   14402:	d8fa      	bhi.n	143fa <memset+0x6a>
   14404:	1f22      	subs	r2, r4, #4
   14406:	f022 0203 	bic.w	r2, r2, #3
   1440a:	3204      	adds	r2, #4
   1440c:	4413      	add	r3, r2
   1440e:	f004 0403 	and.w	r4, r4, #3
   14412:	b12c      	cbz	r4, 14420 <memset+0x90>
   14414:	b2c9      	uxtb	r1, r1
   14416:	441c      	add	r4, r3
   14418:	f803 1b01 	strb.w	r1, [r3], #1
   1441c:	429c      	cmp	r4, r3
   1441e:	d1fb      	bne.n	14418 <memset+0x88>
   14420:	bc70      	pop	{r4, r5, r6}
   14422:	4770      	bx	lr
   14424:	4614      	mov	r4, r2
   14426:	4603      	mov	r3, r0
   14428:	e7c2      	b.n	143b0 <memset+0x20>
   1442a:	bf00      	nop
	...

00014440 <strlen>:
   14440:	f890 f000 	pld	[r0]
   14444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   14448:	f020 0107 	bic.w	r1, r0, #7
   1444c:	f06f 0c00 	mvn.w	ip, #0
   14450:	f010 0407 	ands.w	r4, r0, #7
   14454:	f891 f020 	pld	[r1, #32]
   14458:	f040 8049 	bne.w	144ee <strlen+0xae>
   1445c:	f04f 0400 	mov.w	r4, #0
   14460:	f06f 0007 	mvn.w	r0, #7
   14464:	e9d1 2300 	ldrd	r2, r3, [r1]
   14468:	f891 f040 	pld	[r1, #64]	; 0x40
   1446c:	f100 0008 	add.w	r0, r0, #8
   14470:	fa82 f24c 	uadd8	r2, r2, ip
   14474:	faa4 f28c 	sel	r2, r4, ip
   14478:	fa83 f34c 	uadd8	r3, r3, ip
   1447c:	faa2 f38c 	sel	r3, r2, ip
   14480:	bb4b      	cbnz	r3, 144d6 <strlen+0x96>
   14482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   14486:	fa82 f24c 	uadd8	r2, r2, ip
   1448a:	f100 0008 	add.w	r0, r0, #8
   1448e:	faa4 f28c 	sel	r2, r4, ip
   14492:	fa83 f34c 	uadd8	r3, r3, ip
   14496:	faa2 f38c 	sel	r3, r2, ip
   1449a:	b9e3      	cbnz	r3, 144d6 <strlen+0x96>
   1449c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   144a0:	fa82 f24c 	uadd8	r2, r2, ip
   144a4:	f100 0008 	add.w	r0, r0, #8
   144a8:	faa4 f28c 	sel	r2, r4, ip
   144ac:	fa83 f34c 	uadd8	r3, r3, ip
   144b0:	faa2 f38c 	sel	r3, r2, ip
   144b4:	b97b      	cbnz	r3, 144d6 <strlen+0x96>
   144b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   144ba:	f101 0120 	add.w	r1, r1, #32
   144be:	fa82 f24c 	uadd8	r2, r2, ip
   144c2:	f100 0008 	add.w	r0, r0, #8
   144c6:	faa4 f28c 	sel	r2, r4, ip
   144ca:	fa83 f34c 	uadd8	r3, r3, ip
   144ce:	faa2 f38c 	sel	r3, r2, ip
   144d2:	2b00      	cmp	r3, #0
   144d4:	d0c6      	beq.n	14464 <strlen+0x24>
   144d6:	2a00      	cmp	r2, #0
   144d8:	bf04      	itt	eq
   144da:	3004      	addeq	r0, #4
   144dc:	461a      	moveq	r2, r3
   144de:	ba12      	rev	r2, r2
   144e0:	fab2 f282 	clz	r2, r2
   144e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   144e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   144ec:	4770      	bx	lr
   144ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   144f2:	f004 0503 	and.w	r5, r4, #3
   144f6:	f1c4 0000 	rsb	r0, r4, #0
   144fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   144fe:	f014 0f04 	tst.w	r4, #4
   14502:	f891 f040 	pld	[r1, #64]	; 0x40
   14506:	fa0c f505 	lsl.w	r5, ip, r5
   1450a:	ea62 0205 	orn	r2, r2, r5
   1450e:	bf1c      	itt	ne
   14510:	ea63 0305 	ornne	r3, r3, r5
   14514:	4662      	movne	r2, ip
   14516:	f04f 0400 	mov.w	r4, #0
   1451a:	e7a9      	b.n	14470 <strlen+0x30>

0001451c <__register_exitproc>:
   1451c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14520:	4d2c      	ldr	r5, [pc, #176]	; (145d4 <__register_exitproc+0xb8>)
   14522:	4606      	mov	r6, r0
   14524:	6828      	ldr	r0, [r5, #0]
   14526:	4698      	mov	r8, r3
   14528:	460f      	mov	r7, r1
   1452a:	4691      	mov	r9, r2
   1452c:	f000 f882 	bl	14634 <__retarget_lock_acquire_recursive>
   14530:	4b29      	ldr	r3, [pc, #164]	; (145d8 <__register_exitproc+0xbc>)
   14532:	681c      	ldr	r4, [r3, #0]
   14534:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   14538:	2b00      	cmp	r3, #0
   1453a:	d03e      	beq.n	145ba <__register_exitproc+0x9e>
   1453c:	685a      	ldr	r2, [r3, #4]
   1453e:	2a1f      	cmp	r2, #31
   14540:	dc1c      	bgt.n	1457c <__register_exitproc+0x60>
   14542:	f102 0e01 	add.w	lr, r2, #1
   14546:	b176      	cbz	r6, 14566 <__register_exitproc+0x4a>
   14548:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1454c:	2401      	movs	r4, #1
   1454e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   14552:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   14556:	4094      	lsls	r4, r2
   14558:	4320      	orrs	r0, r4
   1455a:	2e02      	cmp	r6, #2
   1455c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   14560:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   14564:	d023      	beq.n	145ae <__register_exitproc+0x92>
   14566:	3202      	adds	r2, #2
   14568:	f8c3 e004 	str.w	lr, [r3, #4]
   1456c:	6828      	ldr	r0, [r5, #0]
   1456e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   14572:	f000 f861 	bl	14638 <__retarget_lock_release_recursive>
   14576:	2000      	movs	r0, #0
   14578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1457c:	4b17      	ldr	r3, [pc, #92]	; (145dc <__register_exitproc+0xc0>)
   1457e:	b30b      	cbz	r3, 145c4 <__register_exitproc+0xa8>
   14580:	f44f 70c8 	mov.w	r0, #400	; 0x190
   14584:	f7fb f824 	bl	f5d0 <malloc>
   14588:	4603      	mov	r3, r0
   1458a:	b1d8      	cbz	r0, 145c4 <__register_exitproc+0xa8>
   1458c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   14590:	6002      	str	r2, [r0, #0]
   14592:	2100      	movs	r1, #0
   14594:	6041      	str	r1, [r0, #4]
   14596:	460a      	mov	r2, r1
   14598:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1459c:	f04f 0e01 	mov.w	lr, #1
   145a0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   145a4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   145a8:	2e00      	cmp	r6, #0
   145aa:	d0dc      	beq.n	14566 <__register_exitproc+0x4a>
   145ac:	e7cc      	b.n	14548 <__register_exitproc+0x2c>
   145ae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   145b2:	430c      	orrs	r4, r1
   145b4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   145b8:	e7d5      	b.n	14566 <__register_exitproc+0x4a>
   145ba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   145be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   145c2:	e7bb      	b.n	1453c <__register_exitproc+0x20>
   145c4:	6828      	ldr	r0, [r5, #0]
   145c6:	f000 f837 	bl	14638 <__retarget_lock_release_recursive>
   145ca:	f04f 30ff 	mov.w	r0, #4294967295
   145ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   145d2:	bf00      	nop
   145d4:	20000638 	.word	0x20000638
   145d8:	00014b78 	.word	0x00014b78
   145dc:	0000f5d1 	.word	0x0000f5d1

000145e0 <register_fini>:
   145e0:	4b02      	ldr	r3, [pc, #8]	; (145ec <register_fini+0xc>)
   145e2:	b113      	cbz	r3, 145ea <register_fini+0xa>
   145e4:	4802      	ldr	r0, [pc, #8]	; (145f0 <register_fini+0x10>)
   145e6:	f000 b805 	b.w	145f4 <atexit>
   145ea:	4770      	bx	lr
   145ec:	00000000 	.word	0x00000000
   145f0:	00014601 	.word	0x00014601

000145f4 <atexit>:
   145f4:	2300      	movs	r3, #0
   145f6:	4601      	mov	r1, r0
   145f8:	461a      	mov	r2, r3
   145fa:	4618      	mov	r0, r3
   145fc:	f7ff bf8e 	b.w	1451c <__register_exitproc>

00014600 <__libc_fini_array>:
   14600:	b538      	push	{r3, r4, r5, lr}
   14602:	4c0a      	ldr	r4, [pc, #40]	; (1462c <__libc_fini_array+0x2c>)
   14604:	4d0a      	ldr	r5, [pc, #40]	; (14630 <__libc_fini_array+0x30>)
   14606:	1b64      	subs	r4, r4, r5
   14608:	10a4      	asrs	r4, r4, #2
   1460a:	d00a      	beq.n	14622 <__libc_fini_array+0x22>
   1460c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   14610:	3b01      	subs	r3, #1
   14612:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14616:	3c01      	subs	r4, #1
   14618:	f855 3904 	ldr.w	r3, [r5], #-4
   1461c:	4798      	blx	r3
   1461e:	2c00      	cmp	r4, #0
   14620:	d1f9      	bne.n	14616 <__libc_fini_array+0x16>
   14622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14626:	f000 badf 	b.w	14be8 <_fini>
   1462a:	bf00      	nop
   1462c:	00014bf8 	.word	0x00014bf8
   14630:	00014bf4 	.word	0x00014bf4

00014634 <__retarget_lock_acquire_recursive>:
   14634:	4770      	bx	lr
   14636:	bf00      	nop

00014638 <__retarget_lock_release_recursive>:
   14638:	4770      	bx	lr
   1463a:	bf00      	nop

0001463c <_ZTC16Maintenance_Tool0_16Commands_Handler>:
   1463c:	0154 0000 0000 0000 0000 0000               T...........

00014648 <_ZTT16Maintenance_Tool>:
   14648:	465c 0001 4648 0001                         \F..HF..

00014650 <_ZTV16Maintenance_Tool>:
   14650:	0154 0000 0000 0000 0000 0000 2e2e 682f     T............./h
   14660:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   14670:	625f 7361 2e65 0068 2e2e 682f 6c61 692f     _base.h.../hal/i
   14680:	636e 756c 6564 682f 6c61 775f 7464 682e     nclude/hal_wdt.h
   14690:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   146a0:	6c61 635f 6c61 6e65 6164 2e72 0063 0000     al_calendar.c...
   146b0:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   146c0:	6e61 615f 7973 636e 632e 0000 2e2e 682f     an_async.c..../h
   146d0:	6c61 732f 6372 682f 6c61 635f 6372 735f     al/src/hal_crc_s
   146e0:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
   146f0:	6372 682f 6c61 695f 6332 6d5f 735f 6e79     rc/hal_i2c_m_syn
   14700:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
   14710:	6c61 705f 6d77 632e 0000 0000 2e2e 682f     al_pwm.c....../h
   14720:	6c61 732f 6372 682f 6c61 715f 7073 5f69     al/src/hal_qspi_
   14730:	7973 636e 632e 0000 2e2e 682f 6c61 732f     sync.c..../hal/s
   14740:	6372 682f 6c61 735f 6970 6d5f 735f 6e79     rc/hal_spi_m_syn
   14750:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
   14760:	6c61 745f 6d69 7265 632e 0000 2e2e 682f     al_timer.c..../h
   14770:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
   14780:	736c 6c5f 7369 2e74 0063 0000               ls_list.c...

0001478c <_map>:
   1478c:	0000 0000 0040 0000 0001 0000 0021 0000     ....@.......!...
   1479c:	0003 0000 0003 0000 0004 0000 0004 0000     ................
   147ac:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   147bc:	0007 0000 0057 0000 0008 0000 0028 0000     ....W.......(...
   147cc:	0009 0000 0029 0000 2e2e 682f 6c70 652f     ....)...../hpl/e
   147dc:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

000147ec <user_mux_confs>:
   147ec:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

00014830 <channel_confs>:
   14830:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

00014870 <interrupt_cfg>:
	...
   148f0:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   14900:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   14910:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   14920:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   14930:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   14940:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   14950:	0400 4300 0800 4300 0c00 4300               ...C...C...C

0001495c <sercomspi_regs>:
   1495c:	000c 0020 0000 0002 0000 0000 0001 01ff     .. .............
   1496c:	0c04 3000 0000 0200 0000 0000 1700 ff00     ...0............
   1497c:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   1498c:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   1499c:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   149ac:	1400 4300 1800 4300                         ...C...C

000149b4 <_usb_ep_cfgs>:
   149b4:	0ec4 2000 0000 0000 0040 0000 0f04 2000     ... ....@...... 
   149c4:	0f44 2000 0040 0040 0f84 2000 0fc4 2000     D.. @.@.... ... 
   149d4:	0040 0040 1004 2000 1044 2000 0040 0040     @.@.... D.. @.@.
   149e4:	1084 2000 10c4 2000 0040 0040 0804 0000     ... ... @.@.....
   149f4:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   14a04:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   14a14:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   14a24:	625f 7361 2e65 0068                         _base.h.

00014a2c <n25q256a_interface>:
   14a2c:	c2cd 0000 c371 0000 c481 0000 c639 0000     ....q.......9...
   14a3c:	c6c9 0000 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
   14a4c:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

00014a58 <_ZTV9CDC_Class>:
	...
   14a60:	eec5 0000 efa5 0000 eb19 0000 ee8d 0000     ................
   14a70:	f03d 0000 ee51 0000 ed35 0000 ed85 0000     =...Q...5.......
   14a80:	eead 0000 ef0d 0000                         ........

00014a88 <_ZTV6Stream>:
	...
   14a90:	f5e5 0000 f1e5 0000 eb19 0000 eb2d 0000     ............-...
   14aa0:	f5e5 0000 f5e5 0000 f5e5 0000 7830 2e25     ............0x%.
   14ab0:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   14ac0:	766f 0066                                   ovf.

00014ac4 <_ZTV5Print>:
	...
   14acc:	f5e5 0000 f1e5 0000 eb19 0000 eb2d 0000     ............-...
   14adc:	6c46 7361 2068 654d 6f6d 7972 5320 6c65     Flash Memory Sel
   14aec:	5466 7365 2074 4150 5353 4445 0000 0000     fTest PASSED....
   14afc:	0a0d 0000 6c46 7361 2068 654d 6f6d 7972     ....Flash Memory
   14b0c:	5320 6c65 5466 7365 2074 4146 4c49 4445      SelfTest FAILED
   14b1c:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   14b2c:	6c61 695f 2e6f 0063 2e2e 2e2f 2f2e 2e2e     al_io.c.../../..
   14b3c:	412f 554c 445f 6972 6576 2f72 4c41 5f55     /ALU_Driver/ALU_
   14b4c:	7244 7669 7265 682f 6c70 702f 726f 2f74     Driver/hpl/port/
   14b5c:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.

00014b6c <defaultParameters>:
   14b6c:	4020 0000                                    @..

00014b70 <defaultPreferences>:
   14b70:	00fa 0000 0032 0000                         ....2...

00014b78 <_global_impure_ptr>:
   14b78:	0210 2000                                   ... 

00014b7c <_init>:
   14b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b7e:	bf00      	nop
   14b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14b82:	bc08      	pop	{r3}
   14b84:	469e      	mov	lr, r3
   14b86:	4770      	bx	lr

00014b88 <__init_array_start>:
   14b88:	000145e1 	.word	0x000145e1

00014b8c <__frame_dummy_init_array_entry>:
   14b8c:	00000289 00000605 00000bc1 00000f29     ............)...
   14b9c:	0000de29 0000e065 0000e561 0000eae1     )...e...a.......
   14bac:	0000f195 0000f5bd 0000f6f5 0000f8a1     ................
   14bbc:	0000fafd 0000fbf1 000112f1 000119b1     ................
   14bcc:	00011db1 00011f69 0001210d 00012405     ....i....!...$..
   14bdc:	00012f71 000132a1 00013cc9              q/...2...<..

00014be8 <_fini>:
   14be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14bea:	bf00      	nop
   14bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14bee:	bc08      	pop	{r3}
   14bf0:	469e      	mov	lr, r3
   14bf2:	4770      	bx	lr

00014bf4 <__fini_array_start>:
   14bf4:	00000265 	.word	0x00000265
