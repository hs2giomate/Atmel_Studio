
MaintenanceInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012054  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00012054  00012054  00022054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  0001205c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003060c  2**0
                  CONTENTS
  5 .bss          00007b94  2000060c  00012668  0003060c  2**2
                  ALLOC
  6 .stack        00010000  200081a0  0001a1fc  0003060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000a434a  00000000  00000000  00030693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000d8ba  00000000  00000000  000d49dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00021480  00000000  00000000  000e2297  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003b08  00000000  00000000  00103717  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000036e0  00000000  00000000  0010721f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000599b7  00000000  00000000  0010a8ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004cb87  00000000  00000000  001642b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014812e  00000000  00000000  001b0e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000ef88  00000000  00000000  002f8f6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 81 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	95 61 00 00 b1 4f 00 00 c1 4f 00 00 d1 02 00 00     .a...O...O......
      7c:	d1 4f 00 00 e1 4f 00 00 f1 4f 00 00 01 50 00 00     .O...O...O...P..
      8c:	11 50 00 00 21 50 00 00 31 50 00 00 d1 02 00 00     .P..!P..1P......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 41 76 00 00 5d 76 00 00 79 76 00 00     ....Av..]v..yv..
     174:	95 76 00 00 d1 02 00 00 f5 43 00 00 a9 b5 00 00     .v.......C......
     184:	b9 b5 00 00 c9 b5 00 00 d9 b5 00 00 d1 02 00 00     ................
     194:	05 80 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 21 80 00 00     ............!...
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 a5 8c 00 00 d1 02 00 00     ................
     1f4:	c1 8c 00 00 d1 02 00 00 dd 8c 00 00 f9 8c 00 00     ................
     204:	15 8d 00 00 31 8d 00 00 d1 02 00 00 d1 02 00 00     ....1...........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	0001205c 	.word	0x0001205c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001205c 	.word	0x0001205c
     2c4:	20000610 	.word	0x20000610
     2c8:	0001205c 	.word	0x0001205c
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0001205c 	.word	0x0001205c
     33c:	2000060c 	.word	0x2000060c
     340:	200081a0 	.word	0x200081a0
     344:	2000060c 	.word	0x2000060c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00011665 	.word	0x00011665
     354:	00000371 	.word	0x00000371

00000358 <_ZL15FirmwareIsAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     358:	2280      	movs	r2, #128	; 0x80
     35a:	4b03      	ldr	r3, [pc, #12]	; (368 <_ZL15FirmwareIsAlivePK10timer_task+0x10>)
     35c:	619a      	str	r2, [r3, #24]
static FlapperValveController	fvc1;
bool localtimeout=false;
static void FirmwareIsAlive(const struct timer_task *const timer_task)
{
	gpio_set_pin_level(iAlcFwIsAlive,true);
	localtimeout=true;
     35e:	2201      	movs	r2, #1
     360:	4b02      	ldr	r3, [pc, #8]	; (36c <_ZL15FirmwareIsAlivePK10timer_task+0x14>)
     362:	701a      	strb	r2, [r3, #0]
     364:	4770      	bx	lr
     366:	bf00      	nop
     368:	41008000 	.word	0x41008000
     36c:	20000628 	.word	0x20000628

00000370 <main>:
}



int main(void)		
{
     370:	b570      	push	{r4, r5, r6, lr}
	atmel_start_init();
     372:	4b41      	ldr	r3, [pc, #260]	; (478 <main+0x108>)
     374:	4798      	blx	r3
	usb.Init();
     376:	4841      	ldr	r0, [pc, #260]	; (47c <main+0x10c>)
     378:	4b41      	ldr	r3, [pc, #260]	; (480 <main+0x110>)
     37a:	4798      	blx	r3
	//StartLivePulse();
	delay_ms(200);
     37c:	20c8      	movs	r0, #200	; 0xc8
     37e:	4b41      	ldr	r3, [pc, #260]	; (484 <main+0x114>)
     380:	4798      	blx	r3
	fvc1.InitController();
     382:	4841      	ldr	r0, [pc, #260]	; (488 <main+0x118>)
     384:	4b41      	ldr	r3, [pc, #260]	; (48c <main+0x11c>)
     386:	4798      	blx	r3
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareIsAlive),2500);
     388:	f640 12c4 	movw	r2, #2500	; 0x9c4
     38c:	4940      	ldr	r1, [pc, #256]	; (490 <main+0x120>)
     38e:	4841      	ldr	r0, [pc, #260]	; (494 <main+0x124>)
     390:	4b41      	ldr	r3, [pc, #260]	; (498 <main+0x128>)
     392:	4798      	blx	r3
	uint8_t localSetpoint=128;
	uint8_t localPosition;

	
	toolApp.Init();
     394:	4841      	ldr	r0, [pc, #260]	; (49c <main+0x12c>)
     396:	4b42      	ldr	r3, [pc, #264]	; (4a0 <main+0x130>)
     398:	4798      	blx	r3
	memory.Init();
     39a:	4c42      	ldr	r4, [pc, #264]	; (4a4 <main+0x134>)
     39c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     3a0:	4620      	mov	r0, r4
     3a2:	4b41      	ldr	r3, [pc, #260]	; (4a8 <main+0x138>)
     3a4:	4798      	blx	r3
	memory.WriteDefaultParameters();
     3a6:	4620      	mov	r0, r4
     3a8:	4b40      	ldr	r3, [pc, #256]	; (4ac <main+0x13c>)
     3aa:	4798      	blx	r3
//	UserParameters	up=defaultParameters;
	//memory.SaveParameters(up);
	fvc.UpdateFlapperValveData();
     3ac:	4c40      	ldr	r4, [pc, #256]	; (4b0 <main+0x140>)
     3ae:	4620      	mov	r0, r4
     3b0:	4b40      	ldr	r3, [pc, #256]	; (4b4 <main+0x144>)
     3b2:	4798      	blx	r3
	if (fvc.dataStruct.controlOutputs.niAlcFvMotorEnable)
     3b4:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
     3b8:	2b00      	cmp	r3, #0
     3ba:	d146      	bne.n	44a <main+0xda>
	{
		fvc.fv->SetEnable(false);
	}
	
	fvc1.fv->ClearMoveFault(true);
     3bc:	4c3e      	ldr	r4, [pc, #248]	; (4b8 <main+0x148>)
     3be:	2101      	movs	r1, #1
     3c0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     3c2:	4b3e      	ldr	r3, [pc, #248]	; (4bc <main+0x14c>)
     3c4:	4798      	blx	r3
	fvc1.fv->WriteSetpoint(localSetpoint);
     3c6:	2180      	movs	r1, #128	; 0x80
     3c8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     3ca:	4b3d      	ldr	r3, [pc, #244]	; (4c0 <main+0x150>)
     3cc:	4798      	blx	r3
// 	fvc.fv->SetDirection(false);
// 	fvc1.fv->SetEnable(true);
// 	delay_ms(1000);
// 	fvc1.fv->SetEnable(false);
	if (fvc.fv->ReadActualPosition()>localSetpoint)
     3ce:	4b38      	ldr	r3, [pc, #224]	; (4b0 <main+0x140>)
     3d0:	6f98      	ldr	r0, [r3, #120]	; 0x78
     3d2:	4b3c      	ldr	r3, [pc, #240]	; (4c4 <main+0x154>)
     3d4:	4798      	blx	r3
     3d6:	2880      	cmp	r0, #128	; 0x80
	{
		fvc.fv->SetDirection(true);
     3d8:	bfcc      	ite	gt
     3da:	2101      	movgt	r1, #1
	} 
	else
	{
		fvc.fv->SetDirection(false);
     3dc:	2100      	movle	r1, #0
     3de:	4b34      	ldr	r3, [pc, #208]	; (4b0 <main+0x140>)
     3e0:	6f98      	ldr	r0, [r3, #120]	; 0x78
     3e2:	4b39      	ldr	r3, [pc, #228]	; (4c8 <main+0x158>)
     3e4:	4798      	blx	r3
	}
		hvacTimer.Start_oneShot_task(FUNC_PTR(FirmwareIsAlive),5000);
     3e6:	f241 3288 	movw	r2, #5000	; 0x1388
     3ea:	4929      	ldr	r1, [pc, #164]	; (490 <main+0x120>)
     3ec:	4829      	ldr	r0, [pc, #164]	; (494 <main+0x124>)
     3ee:	4b37      	ldr	r3, [pc, #220]	; (4cc <main+0x15c>)
     3f0:	4798      	blx	r3
			fvc1.fv->SetEnable(true);
     3f2:	2101      	movs	r1, #1
     3f4:	4b30      	ldr	r3, [pc, #192]	; (4b8 <main+0x148>)
     3f6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
     3f8:	4b35      	ldr	r3, [pc, #212]	; (4d0 <main+0x160>)
     3fa:	4798      	blx	r3

	localPosition=fvc.fv->ReadActualPosition();
     3fc:	4b2c      	ldr	r3, [pc, #176]	; (4b0 <main+0x140>)
     3fe:	6f98      	ldr	r0, [r3, #120]	; 0x78
     400:	4b30      	ldr	r3, [pc, #192]	; (4c4 <main+0x154>)
     402:	4798      	blx	r3

	while ((abs(localPosition-localSetpoint)>6)&(!localtimeout))
     404:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
     408:	2b00      	cmp	r3, #0
     40a:	bfb8      	it	lt
     40c:	425b      	neglt	r3, r3
     40e:	2b06      	cmp	r3, #6
     410:	dd12      	ble.n	438 <main+0xc8>
     412:	4b29      	ldr	r3, [pc, #164]	; (4b8 <main+0x148>)
     414:	781b      	ldrb	r3, [r3, #0]
     416:	2b01      	cmp	r3, #1
     418:	d00e      	beq.n	438 <main+0xc8>

	{

		localPosition=fvc.fv->ReadActualPosition();
     41a:	4e25      	ldr	r6, [pc, #148]	; (4b0 <main+0x140>)
     41c:	4d29      	ldr	r5, [pc, #164]	; (4c4 <main+0x154>)
	while ((abs(localPosition-localSetpoint)>6)&(!localtimeout))
     41e:	4c26      	ldr	r4, [pc, #152]	; (4b8 <main+0x148>)
		localPosition=fvc.fv->ReadActualPosition();
     420:	6fb0      	ldr	r0, [r6, #120]	; 0x78
     422:	47a8      	blx	r5
	while ((abs(localPosition-localSetpoint)>6)&(!localtimeout))
     424:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
     428:	2b00      	cmp	r3, #0
     42a:	bfb8      	it	lt
     42c:	425b      	neglt	r3, r3
     42e:	2b06      	cmp	r3, #6
     430:	dd02      	ble.n	438 <main+0xc8>
     432:	7823      	ldrb	r3, [r4, #0]
     434:	2b01      	cmp	r3, #1
     436:	d1f3      	bne.n	420 <main+0xb0>

	}
	fvc1.fv->SetEnable(false);
     438:	2100      	movs	r1, #0
     43a:	4b1f      	ldr	r3, [pc, #124]	; (4b8 <main+0x148>)
     43c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
     43e:	4b24      	ldr	r3, [pc, #144]	; (4d0 <main+0x160>)
     440:	4798      	blx	r3

	while (1)
	{
		if (toolApp.IsAppConnected())
     442:	4c16      	ldr	r4, [pc, #88]	; (49c <main+0x12c>)
     444:	4d23      	ldr	r5, [pc, #140]	; (4d4 <main+0x164>)
			
			
		}
		else
		{
			toolApp.setConnected(false);
     446:	4e24      	ldr	r6, [pc, #144]	; (4d8 <main+0x168>)
     448:	e00d      	b.n	466 <main+0xf6>
		fvc.fv->SetEnable(false);
     44a:	2100      	movs	r1, #0
     44c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     44e:	4b20      	ldr	r3, [pc, #128]	; (4d0 <main+0x160>)
     450:	4798      	blx	r3
     452:	e7b3      	b.n	3bc <main+0x4c>
			toolApp.setConnected(false);
     454:	2100      	movs	r1, #0
     456:	4620      	mov	r0, r4
     458:	47b0      	blx	r6
			delay_ms(100);
     45a:	2064      	movs	r0, #100	; 0x64
     45c:	4b09      	ldr	r3, [pc, #36]	; (484 <main+0x114>)
     45e:	4798      	blx	r3
		}
		fvc.Control_NBC_StandAlone();
     460:	4813      	ldr	r0, [pc, #76]	; (4b0 <main+0x140>)
     462:	4b1e      	ldr	r3, [pc, #120]	; (4dc <main+0x16c>)
     464:	4798      	blx	r3
		if (toolApp.IsAppConnected())
     466:	4620      	mov	r0, r4
     468:	47a8      	blx	r5
     46a:	2800      	cmp	r0, #0
     46c:	d0f2      	beq.n	454 <main+0xe4>
			toolApp.handleCommunication();
     46e:	4620      	mov	r0, r4
     470:	4b1b      	ldr	r3, [pc, #108]	; (4e0 <main+0x170>)
     472:	4798      	blx	r3
     474:	e7f4      	b.n	460 <main+0xf0>
     476:	bf00      	nop
     478:	00000e15 	.word	0x00000e15
     47c:	20001070 	.word	0x20001070
     480:	0000e099 	.word	0x0000e099
     484:	00002561 	.word	0x00002561
     488:	2000062c 	.word	0x2000062c
     48c:	0000ee09 	.word	0x0000ee09
     490:	00000359 	.word	0x00000359
     494:	20001018 	.word	0x20001018
     498:	0000dc1d 	.word	0x0000dc1d
     49c:	200006ec 	.word	0x200006ec
     4a0:	00000935 	.word	0x00000935
     4a4:	200025f8 	.word	0x200025f8
     4a8:	00010075 	.word	0x00010075
     4ac:	0000ffd1 	.word	0x0000ffd1
     4b0:	200013d0 	.word	0x200013d0
     4b4:	0000f759 	.word	0x0000f759
     4b8:	20000628 	.word	0x20000628
     4bc:	0000fbe5 	.word	0x0000fbe5
     4c0:	0000fc5d 	.word	0x0000fc5d
     4c4:	0000fc95 	.word	0x0000fc95
     4c8:	0000fb6d 	.word	0x0000fb6d
     4cc:	0000dce9 	.word	0x0000dce9
     4d0:	0000faed 	.word	0x0000faed
     4d4:	00000641 	.word	0x00000641
     4d8:	00000611 	.word	0x00000611
     4dc:	0000efa1 	.word	0x0000efa1
     4e0:	00000d35 	.word	0x00000d35

000004e4 <_GLOBAL__sub_I_localtimeout>:
// 		fvc1.fv->SetEnable(false);
// 		delay_ms(500		
	}

	
}
     4e4:	b510      	push	{r4, lr}
static FlapperValveController	fvc1;
     4e6:	4c05      	ldr	r4, [pc, #20]	; (4fc <_GLOBAL__sub_I_localtimeout+0x18>)
     4e8:	4620      	mov	r0, r4
     4ea:	4b05      	ldr	r3, [pc, #20]	; (500 <_GLOBAL__sub_I_localtimeout+0x1c>)
     4ec:	4798      	blx	r3
     4ee:	4a05      	ldr	r2, [pc, #20]	; (504 <_GLOBAL__sub_I_localtimeout+0x20>)
     4f0:	4905      	ldr	r1, [pc, #20]	; (508 <_GLOBAL__sub_I_localtimeout+0x24>)
     4f2:	4620      	mov	r0, r4
     4f4:	4b05      	ldr	r3, [pc, #20]	; (50c <_GLOBAL__sub_I_localtimeout+0x28>)
     4f6:	4798      	blx	r3
     4f8:	bd10      	pop	{r4, pc}
     4fa:	bf00      	nop
     4fc:	2000062c 	.word	0x2000062c
     500:	0000ed65 	.word	0x0000ed65
     504:	20000000 	.word	0x20000000
     508:	0000ede9 	.word	0x0000ede9
     50c:	000113d5 	.word	0x000113d5

00000510 <_ZN22MaintenanceDataHandlerC1Ev>:
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     510:	2264      	movs	r2, #100	; 0x64
     512:	7002      	strb	r2, [r0, #0]
     514:	2263      	movs	r2, #99	; 0x63
     516:	7042      	strb	r2, [r0, #1]
     518:	2262      	movs	r2, #98	; 0x62
     51a:	7082      	strb	r2, [r0, #2]
     51c:	2261      	movs	r2, #97	; 0x61
     51e:	70c2      	strb	r2, [r0, #3]
     520:	2200      	movs	r2, #0
     522:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
     524:	223a      	movs	r2, #58	; 0x3a
     526:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
     52a:	4770      	bx	lr

0000052c <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
     52c:	4770      	bx	lr
	...

00000530 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
     530:	b570      	push	{r4, r5, r6, lr}
     532:	4605      	mov	r5, r0
     534:	460c      	mov	r4, r1
     536:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
     538:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
     53c:	3006      	adds	r0, #6
     53e:	4b09      	ldr	r3, [pc, #36]	; (564 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
     540:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
     542:	462b      	mov	r3, r5
     544:	4621      	mov	r1, r4
     546:	3540      	adds	r5, #64	; 0x40
     548:	681e      	ldr	r6, [r3, #0]
     54a:	685c      	ldr	r4, [r3, #4]
     54c:	6898      	ldr	r0, [r3, #8]
     54e:	68da      	ldr	r2, [r3, #12]
     550:	600e      	str	r6, [r1, #0]
     552:	604c      	str	r4, [r1, #4]
     554:	6088      	str	r0, [r1, #8]
     556:	60ca      	str	r2, [r1, #12]
     558:	3310      	adds	r3, #16
     55a:	3110      	adds	r1, #16
     55c:	42ab      	cmp	r3, r5
     55e:	d1f3      	bne.n	548 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
     560:	2000      	movs	r0, #0
     562:	bd70      	pop	{r4, r5, r6, pc}
     564:	000116b5 	.word	0x000116b5

00000568 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     568:	4b02      	ldr	r3, [pc, #8]	; (574 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     56a:	681a      	ldr	r2, [r3, #0]
     56c:	6c53      	ldr	r3, [r2, #68]	; 0x44
     56e:	3301      	adds	r3, #1
     570:	6453      	str	r3, [r2, #68]	; 0x44
     572:	4770      	bx	lr
     574:	200006e8 	.word	0x200006e8

00000578 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     578:	4b02      	ldr	r3, [pc, #8]	; (584 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	2200      	movs	r2, #0
     57e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
     582:	4770      	bx	lr
     584:	200006e8 	.word	0x200006e8

00000588 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
     588:	b538      	push	{r3, r4, r5, lr}
     58a:	4604      	mov	r4, r0
{
	ticks=0;
     58c:	2300      	movs	r3, #0
     58e:	6443      	str	r3, [r0, #68]	; 0x44
	interfaceTimer.Stop();
     590:	4d05      	ldr	r5, [pc, #20]	; (5a8 <_ZN16Maintenance_ToolD1Ev+0x20>)
     592:	4628      	mov	r0, r5
     594:	4b05      	ldr	r3, [pc, #20]	; (5ac <_ZN16Maintenance_ToolD1Ev+0x24>)
     596:	4798      	blx	r3
	interfaceTimer.Remove_task();
     598:	4628      	mov	r0, r5
     59a:	4b05      	ldr	r3, [pc, #20]	; (5b0 <_ZN16Maintenance_ToolD1Ev+0x28>)
     59c:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
     59e:	4620      	mov	r0, r4
     5a0:	4b04      	ldr	r3, [pc, #16]	; (5b4 <_ZN16Maintenance_ToolD1Ev+0x2c>)
     5a2:	4798      	blx	r3
	
} //~Maintenance_Tool
     5a4:	4620      	mov	r0, r4
     5a6:	bd38      	pop	{r3, r4, r5, pc}
     5a8:	20001148 	.word	0x20001148
     5ac:	0000e885 	.word	0x0000e885
     5b0:	0000e99d 	.word	0x0000e99d
     5b4:	0000052d 	.word	0x0000052d

000005b8 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
     5b8:	b538      	push	{r3, r4, r5, lr}
     5ba:	4604      	mov	r4, r0
     5bc:	4b12      	ldr	r3, [pc, #72]	; (608 <_ZN16Maintenance_ToolC1Ev+0x50>)
     5be:	4798      	blx	r3
     5c0:	2300      	movs	r3, #0
     5c2:	2564      	movs	r5, #100	; 0x64
     5c4:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
     5c8:	2063      	movs	r0, #99	; 0x63
     5ca:	f884 008a 	strb.w	r0, [r4, #138]	; 0x8a
     5ce:	2162      	movs	r1, #98	; 0x62
     5d0:	f884 108b 	strb.w	r1, [r4, #139]	; 0x8b
     5d4:	2261      	movs	r2, #97	; 0x61
     5d6:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
     5da:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
     5de:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
     5e2:	f884 00e1 	strb.w	r0, [r4, #225]	; 0xe1
     5e6:	f884 10e2 	strb.w	r1, [r4, #226]	; 0xe2
     5ea:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
     5ee:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	ptrMaintenanceTool=this;
     5f2:	4a06      	ldr	r2, [pc, #24]	; (60c <_ZN16Maintenance_ToolC1Ev+0x54>)
     5f4:	6014      	str	r4, [r2, #0]
	maintenanceIsConnected = false;
     5f6:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
	nextMaintenanceSyncTime = 0;
     5fa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	nextMaintenanceUsageTimerSyncTime = 0;
     5fe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	ticks=0;
     602:	6463      	str	r3, [r4, #68]	; 0x44
} //Maintenance_Tool
     604:	4620      	mov	r0, r4
     606:	bd38      	pop	{r3, r4, r5, pc}
     608:	00000511 	.word	0x00000511
     60c:	200006e8 	.word	0x200006e8

00000610 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     610:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     612:	f880 109c 	strb.w	r1, [r0, #156]	; 0x9c
		if (isConnected)
     616:	b919      	cbnz	r1, 620 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     618:	4805      	ldr	r0, [pc, #20]	; (630 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     61a:	4b06      	ldr	r3, [pc, #24]	; (634 <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     61c:	4798      	blx	r3
     61e:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     620:	f64e 2260 	movw	r2, #60000	; 0xea60
     624:	4904      	ldr	r1, [pc, #16]	; (638 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     626:	4802      	ldr	r0, [pc, #8]	; (630 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     628:	4b04      	ldr	r3, [pc, #16]	; (63c <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     62a:	4798      	blx	r3
     62c:	bd08      	pop	{r3, pc}
     62e:	bf00      	nop
     630:	20001148 	.word	0x20001148
     634:	0000e885 	.word	0x0000e885
     638:	00000579 	.word	0x00000579
     63c:	0000e965 	.word	0x0000e965

00000640 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     640:	b510      	push	{r4, lr}
     642:	4604      	mov	r4, r0
	result=false;
     644:	2300      	movs	r3, #0
     646:	f880 3144 	strb.w	r3, [r0, #324]	; 0x144
	magic=0;
     64a:	f8c0 3164 	str.w	r3, [r0, #356]	; 0x164
	if (gotAccess==true)
     64e:	f890 3145 	ldrb.w	r3, [r0, #325]	; 0x145
     652:	b12b      	cbz	r3, 660 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     654:	2301      	movs	r3, #1
     656:	f880 3144 	strb.w	r3, [r0, #324]	; 0x144
	return	result;
     65a:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
}
     65e:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     660:	4b14      	ldr	r3, [pc, #80]	; (6b4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x74>)
     662:	7d5b      	ldrb	r3, [r3, #21]
     664:	b193      	cbz	r3, 68c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x4c>
     666:	f100 0349 	add.w	r3, r0, #73	; 0x49
     66a:	304d      	adds	r0, #77	; 0x4d
     66c:	2200      	movs	r2, #0
				magic|= localBuffer[i];
     66e:	f813 1b01 	ldrb.w	r1, [r3], #1
     672:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			for (int i = 0; i < 4; i++)
     676:	4283      	cmp	r3, r0
     678:	d1f9      	bne.n	66e <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2e>
     67a:	f8c4 2164 	str.w	r2, [r4, #356]	; 0x164
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     67e:	4b0e      	ldr	r3, [pc, #56]	; (6b8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
     680:	ea82 0103 	eor.w	r1, r2, r3
     684:	f8c4 1160 	str.w	r1, [r4, #352]	; 0x160
			if (xorResult==0)
     688:	429a      	cmp	r2, r3
     68a:	d006      	beq.n	69a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x5a>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     68c:	2240      	movs	r2, #64	; 0x40
     68e:	f104 0149 	add.w	r1, r4, #73	; 0x49
     692:	4808      	ldr	r0, [pc, #32]	; (6b4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x74>)
     694:	4b09      	ldr	r3, [pc, #36]	; (6bc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     696:	4798      	blx	r3
     698:	e7df      	b.n	65a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     69a:	2101      	movs	r1, #1
     69c:	f884 1145 	strb.w	r1, [r4, #325]	; 0x145
				result=true;
     6a0:	f884 1144 	strb.w	r1, [r4, #324]	; 0x144
				is_MTPC_Beaming=true;
     6a4:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
				setConnected(true);
     6a8:	4620      	mov	r0, r4
     6aa:	4b05      	ldr	r3, [pc, #20]	; (6c0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
     6ac:	4798      	blx	r3
				return	result;
     6ae:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
     6b2:	bd10      	pop	{r4, pc}
     6b4:	20001070 	.word	0x20001070
     6b8:	61626364 	.word	0x61626364
     6bc:	0000e1e5 	.word	0x0000e1e5
     6c0:	00000611 	.word	0x00000611

000006c4 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     6c4:	f100 0248 	add.w	r2, r0, #72	; 0x48
     6c8:	2301      	movs	r3, #1
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     6ca:	2100      	movs	r1, #0
     6cc:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     6d0:	b2d8      	uxtb	r0, r3
     6d2:	3301      	adds	r3, #1
     6d4:	2b41      	cmp	r3, #65	; 0x41
     6d6:	d1f9      	bne.n	6cc <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
     6d8:	4770      	bx	lr

000006da <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     6da:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
     6de:	b933      	cbnz	r3, 6ee <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x14>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     6e0:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
		maintenanceIsConnected = true;
     6e4:	2301      	movs	r3, #1
     6e6:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
		bSendNotifications = true;
     6ea:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     6ee:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
     6f2:	4770      	bx	lr

000006f4 <_ZN16Maintenance_Tool22CommandWriteParametersEv>:
	}
	
	return result;
}

bool Maintenance_Tool::CommandWriteParameters(void)	{
     6f4:	b508      	push	{r3, lr}
	uint32_t	w,r;
		int n=sizeof(HVACMessageHeader);
		HVACMessageHeader hm;
	
	bool	result(header.task == kGAINCommandWriteParameters);
	if (result){
     6f6:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
     6fa:	2b47      	cmp	r3, #71	; 0x47
     6fc:	d001      	beq.n	702 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0xe>
	bool	result(header.task == kGAINCommandWriteParameters);
     6fe:	2000      	movs	r0, #0
	}else{

	}
	
	return result;
}
     700:	bd08      	pop	{r3, pc}
		memcpy((uint8_t*)&parameters,&localBuffer[n],sizeof(UserParameters));
     702:	f8b0 304f 	ldrh.w	r3, [r0, #79]	; 0x4f
     706:	f8a0 314c 	strh.w	r3, [r0, #332]	; 0x14c
		r=memory.SaveParameters(parameters);
     70a:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
     70e:	4803      	ldr	r0, [pc, #12]	; (71c <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x28>)
     710:	4b03      	ldr	r3, [pc, #12]	; (720 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x2c>)
     712:	4798      	blx	r3
			result=(bool)(r==0);
     714:	fab0 f080 	clz	r0, r0
     718:	0940      	lsrs	r0, r0, #5
     71a:	bd08      	pop	{r3, pc}
     71c:	200025f8 	.word	0x200025f8
     720:	000100c1 	.word	0x000100c1

00000724 <_ZN16Maintenance_Tool17CommandSetHeatersEv>:

bool Maintenance_Tool::CommandSetHeaters(void)	{
     724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	bool powerOn;
	
		memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     728:	4603      	mov	r3, r0
     72a:	f853 1f49 	ldr.w	r1, [r3, #73]!
     72e:	f8c0 1089 	str.w	r1, [r0, #137]	; 0x89
     732:	8899      	ldrh	r1, [r3, #4]
     734:	799b      	ldrb	r3, [r3, #6]
     736:	f8a0 108d 	strh.w	r1, [r0, #141]	; 0x8d
     73a:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
		
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetHeaters);
     73e:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
     742:	2b49      	cmp	r3, #73	; 0x49
     744:	bf0c      	ite	eq
     746:	f04f 0801 	moveq.w	r8, #1
     74a:	f04f 0800 	movne.w	r8, #0
	if (result){
     74e:	d002      	beq.n	756 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x32>
			}
		}
	}
	
	return result;
}
     750:	4640      	mov	r0, r8
     752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lastEnableHeaters=enableHeaters;
     756:	f890 2169 	ldrb.w	r2, [r0, #361]	; 0x169
     75a:	f880 2168 	strb.w	r2, [r0, #360]	; 0x168
		enableHeaters=singleTaskMessage.description;
     75e:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
     762:	f880 3169 	strb.w	r3, [r0, #361]	; 0x169
		if (enableHeaters!=lastEnableHeaters)
     766:	429a      	cmp	r2, r3
     768:	d0f2      	beq.n	750 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     76a:	4605      	mov	r5, r0
     76c:	2400      	movs	r4, #0
				heater.SetRelay(i,powerOn);
     76e:	4f07      	ldr	r7, [pc, #28]	; (78c <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x68>)
     770:	4e07      	ldr	r6, [pc, #28]	; (790 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x6c>)
				powerOn=enableHeaters&(0x01<<i);
     772:	f895 2169 	ldrb.w	r2, [r5, #361]	; 0x169
     776:	4122      	asrs	r2, r4
				heater.SetRelay(i,powerOn);
     778:	f002 0201 	and.w	r2, r2, #1
     77c:	b2e1      	uxtb	r1, r4
     77e:	4638      	mov	r0, r7
     780:	47b0      	blx	r6
     782:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < 4; i++)
     784:	2c04      	cmp	r4, #4
     786:	d1f4      	bne.n	772 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x4e>
     788:	e7e2      	b.n	750 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     78a:	bf00      	nop
     78c:	200015d8 	.word	0x200015d8
     790:	0000fe7d 	.word	0x0000fe7d

00000794 <_ZN16Maintenance_Tool20CommandSetEnableFansEv>:

bool Maintenance_Tool::CommandSetEnableFans(void){
     794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     796:	4603      	mov	r3, r0
     798:	f853 1f49 	ldr.w	r1, [r3, #73]!
     79c:	f8c0 1089 	str.w	r1, [r0, #137]	; 0x89
     7a0:	8899      	ldrh	r1, [r3, #4]
     7a2:	799b      	ldrb	r3, [r3, #6]
     7a4:	f8a0 108d 	strh.w	r1, [r0, #141]	; 0x8d
     7a8:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetEnableFans);
     7ac:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
     7b0:	2b4b      	cmp	r3, #75	; 0x4b
     7b2:	bf0c      	ite	eq
     7b4:	2401      	moveq	r4, #1
     7b6:	2400      	movne	r4, #0
	if (result){
     7b8:	d001      	beq.n	7be <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x2a>
	}else{

	}
	
	return result;
}
     7ba:	4620      	mov	r0, r4
     7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data=singleTaskMessage.description;
     7be:	f890 508f 	ldrb.w	r5, [r0, #143]	; 0x8f
		if ((data&(0x07))>3)
     7c2:	f005 0307 	and.w	r3, r5, #7
     7c6:	2b03      	cmp	r3, #3
     7c8:	dc0a      	bgt.n	7e0 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x4c>
			fans.evaporator[0]->SetEnable(data&0x01);
     7ca:	4f09      	ldr	r7, [pc, #36]	; (7f0 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x5c>)
     7cc:	f005 0101 	and.w	r1, r5, #1
     7d0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
     7d2:	4e08      	ldr	r6, [pc, #32]	; (7f4 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x60>)
     7d4:	47b0      	blx	r6
			fans.evaporator[1]->SetEnable(data&0x02);
     7d6:	f3c5 0140 	ubfx	r1, r5, #1, #1
     7da:	6e38      	ldr	r0, [r7, #96]	; 0x60
     7dc:	47b0      	blx	r6
     7de:	e7ec      	b.n	7ba <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x26>
			fans.condesator->SetEnable(data&0x04);
     7e0:	f3c5 0180 	ubfx	r1, r5, #2, #1
     7e4:	4b02      	ldr	r3, [pc, #8]	; (7f0 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x5c>)
     7e6:	6e58      	ldr	r0, [r3, #100]	; 0x64
     7e8:	4b03      	ldr	r3, [pc, #12]	; (7f8 <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x64>)
     7ea:	4798      	blx	r3
     7ec:	e7e5      	b.n	7ba <_ZN16Maintenance_Tool20CommandSetEnableFansEv+0x26>
     7ee:	bf00      	nop
     7f0:	200012c8 	.word	0x200012c8
     7f4:	0000ed01 	.word	0x0000ed01
     7f8:	0000eb6d 	.word	0x0000eb6d

000007fc <_ZN16Maintenance_Tool22CommandSetFlapperValveEv>:

bool Maintenance_Tool::CommandSetFlapperValve(void){
     7fc:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     7fe:	4603      	mov	r3, r0
     800:	f853 1f49 	ldr.w	r1, [r3, #73]!
     804:	f8c0 1089 	str.w	r1, [r0, #137]	; 0x89
     808:	8899      	ldrh	r1, [r3, #4]
     80a:	799b      	ldrb	r3, [r3, #6]
     80c:	f8a0 108d 	strh.w	r1, [r0, #141]	; 0x8d
     810:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandFlapperValve);
     814:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
     818:	2b4f      	cmp	r3, #79	; 0x4f
     81a:	bf0c      	ite	eq
     81c:	2401      	moveq	r4, #1
     81e:	2400      	movne	r4, #0
	if (result){
     820:	d001      	beq.n	826 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x2a>
	}else{

	}
	
	return result;
}
     822:	4620      	mov	r0, r4
     824:	bd10      	pop	{r4, pc}
		if ((data&(0x01))>0)
     826:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
     82a:	f013 0f01 	tst.w	r3, #1
			fvc.StartControlling();
     82e:	4803      	ldr	r0, [pc, #12]	; (83c <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x40>)
     830:	bf14      	ite	ne
     832:	4b03      	ldrne	r3, [pc, #12]	; (840 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x44>)
			fvc.StopControlling();
     834:	4b03      	ldreq	r3, [pc, #12]	; (844 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x48>)
     836:	4798      	blx	r3
     838:	e7f3      	b.n	822 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x26>
     83a:	bf00      	nop
     83c:	200013d0 	.word	0x200013d0
     840:	0000f6fd 	.word	0x0000f6fd
     844:	0000f54d 	.word	0x0000f54d

00000848 <_ZN16Maintenance_Tool17CommandSetPWMFansEv>:
bool Maintenance_Tool::CommandSetPWMFans(void){

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     848:	4603      	mov	r3, r0
     84a:	f853 1f49 	ldr.w	r1, [r3, #73]!
     84e:	f8c0 1089 	str.w	r1, [r0, #137]	; 0x89
     852:	8899      	ldrh	r1, [r3, #4]
     854:	799b      	ldrb	r3, [r3, #6]
     856:	f8a0 108d 	strh.w	r1, [r0, #141]	; 0x8d
     85a:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACWriteSetpointFlapperValve);
     85e:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
	}else{

	}
	
	return result;
}
     862:	2850      	cmp	r0, #80	; 0x50
     864:	bf14      	ite	ne
     866:	2000      	movne	r0, #0
     868:	2001      	moveq	r0, #1
     86a:	4770      	bx	lr

0000086c <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv>:
bool Maintenance_Tool::CommandSetFlapperPosition(void){
     86c:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     86e:	4603      	mov	r3, r0
     870:	f853 1f49 	ldr.w	r1, [r3, #73]!
     874:	f8c0 1089 	str.w	r1, [r0, #137]	; 0x89
     878:	8899      	ldrh	r1, [r3, #4]
     87a:	799b      	ldrb	r3, [r3, #6]
     87c:	f8a0 108d 	strh.w	r1, [r0, #141]	; 0x8d
     880:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACWriteSetpointFlapperValve);
     884:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
     888:	2b50      	cmp	r3, #80	; 0x50
     88a:	bf0c      	ite	eq
     88c:	2401      	moveq	r4, #1
     88e:	2400      	movne	r4, #0
	if (result){
     890:	d001      	beq.n	896 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x2a>
		}else{

	}
	
	return result;
}
     892:	4620      	mov	r0, r4
     894:	bd10      	pop	{r4, pc}
		if (fvc.controllerEnabled)
     896:	4b07      	ldr	r3, [pc, #28]	; (8b4 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
     898:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
     89c:	b923      	cbnz	r3, 8a8 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x3c>
		fvc.doPeriodicTask=false;
     89e:	2200      	movs	r2, #0
     8a0:	4b04      	ldr	r3, [pc, #16]	; (8b4 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
     8a2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
     8a6:	e7f4      	b.n	892 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x26>
			fvc.StartControlling(data);
     8a8:	f890 108f 	ldrb.w	r1, [r0, #143]	; 0x8f
     8ac:	4801      	ldr	r0, [pc, #4]	; (8b4 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
     8ae:	4b02      	ldr	r3, [pc, #8]	; (8b8 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x4c>)
     8b0:	4798      	blx	r3
     8b2:	e7f4      	b.n	89e <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x32>
     8b4:	200013d0 	.word	0x200013d0
     8b8:	0000f591 	.word	0x0000f591

000008bc <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     8bc:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     8be:	0855      	lsrs	r5, r2, #1
     8c0:	d007      	beq.n	8d2 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     8c2:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     8c4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     8c8:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     8ca:	3401      	adds	r4, #1
     8cc:	b2a4      	uxth	r4, r4
     8ce:	42ac      	cmp	r4, r5
     8d0:	dbf8      	blt.n	8c4 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     8d2:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     8d6:	bf1d      	ittte	ne
     8d8:	189b      	addne	r3, r3, r2
     8da:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     8de:	4048      	eorne	r0, r1
     8e0:	4608      	moveq	r0, r1

	return checksum;
	}
     8e2:	bc30      	pop	{r4, r5}
     8e4:	4770      	bx	lr
	...

000008e8 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     8e8:	b538      	push	{r3, r4, r5, lr}
     8ea:	4604      	mov	r4, r0
	checksum=0;
     8ec:	2500      	movs	r5, #0
     8ee:	f8a0 5148 	strh.w	r5, [r0, #328]	; 0x148
	checksum = calculateChecksum(0, sizeof(header), &header);
     8f2:	460b      	mov	r3, r1
     8f4:	2206      	movs	r2, #6
     8f6:	4629      	mov	r1, r5
     8f8:	4d02      	ldr	r5, [pc, #8]	; (904 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     8fa:	47a8      	blx	r5
     8fc:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
	}
     900:	bd38      	pop	{r3, r4, r5, pc}
     902:	bf00      	nop
     904:	000008bd 	.word	0x000008bd

00000908 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     908:	4b06      	ldr	r3, [pc, #24]	; (924 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	600b      	str	r3, [r1, #0]
     90e:	4b06      	ldr	r3, [pc, #24]	; (928 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
     910:	681b      	ldr	r3, [r3, #0]
     912:	604b      	str	r3, [r1, #4]
     914:	4b05      	ldr	r3, [pc, #20]	; (92c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
     916:	681b      	ldr	r3, [r3, #0]
     918:	608b      	str	r3, [r1, #8]
     91a:	4b05      	ldr	r3, [pc, #20]	; (930 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     91c:	681b      	ldr	r3, [r3, #0]
     91e:	60cb      	str	r3, [r1, #12]
     920:	4770      	bx	lr
     922:	bf00      	nop
     924:	41002018 	.word	0x41002018
     928:	4100201c 	.word	0x4100201c
     92c:	41002020 	.word	0x41002020
     930:	41002024 	.word	0x41002024

00000934 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     936:	4604      	mov	r4, r0
	ticks=0;
     938:	2600      	movs	r6, #0
     93a:	6446      	str	r6, [r0, #68]	; 0x44
	interfaceTimer.Init();
     93c:	4d12      	ldr	r5, [pc, #72]	; (988 <_ZN16Maintenance_Tool4InitEv+0x54>)
     93e:	4628      	mov	r0, r5
     940:	4b12      	ldr	r3, [pc, #72]	; (98c <_ZN16Maintenance_Tool4InitEv+0x58>)
     942:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     948:	4911      	ldr	r1, [pc, #68]	; (990 <_ZN16Maintenance_Tool4InitEv+0x5c>)
     94a:	4628      	mov	r0, r5
     94c:	4b11      	ldr	r3, [pc, #68]	; (994 <_ZN16Maintenance_Tool4InitEv+0x60>)
     94e:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     950:	f204 154f 	addw	r5, r4, #335	; 0x14f
     954:	4629      	mov	r1, r5
     956:	4620      	mov	r0, r4
     958:	4b0f      	ldr	r3, [pc, #60]	; (998 <_ZN16Maintenance_Tool4InitEv+0x64>)
     95a:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     95c:	f8d4 714f 	ldr.w	r7, [r4, #335]	; 0x14f
     960:	f8d4 0153 	ldr.w	r0, [r4, #339]	; 0x153
     964:	f8d4 1157 	ldr.w	r1, [r4, #343]	; 0x157
     968:	f8d4 215b 	ldr.w	r2, [r4, #347]	; 0x15b
     96c:	f8c4 7049 	str.w	r7, [r4, #73]	; 0x49
     970:	f8c4 004d 	str.w	r0, [r4, #77]	; 0x4d
     974:	f8c4 1051 	str.w	r1, [r4, #81]	; 0x51
     978:	f8c4 2055 	str.w	r2, [r4, #85]	; 0x55
	gotAccess=false;
     97c:	f884 6145 	strb.w	r6, [r4, #325]	; 0x145
}
     980:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
     984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     986:	bf00      	nop
     988:	20001148 	.word	0x20001148
     98c:	0000e829 	.word	0x0000e829
     990:	00000569 	.word	0x00000569
     994:	0000e915 	.word	0x0000e915
     998:	00000909 	.word	0x00000909

0000099c <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
     99c:	b510      	push	{r4, lr}
     99e:	4c05      	ldr	r4, [pc, #20]	; (9b4 <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
     9a0:	4620      	mov	r0, r4
     9a2:	4b05      	ldr	r3, [pc, #20]	; (9b8 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
     9a4:	4798      	blx	r3
     9a6:	4a05      	ldr	r2, [pc, #20]	; (9bc <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
     9a8:	4905      	ldr	r1, [pc, #20]	; (9c0 <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
     9aa:	4620      	mov	r0, r4
     9ac:	4b05      	ldr	r3, [pc, #20]	; (9c4 <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
     9ae:	4798      	blx	r3
     9b0:	bd10      	pop	{r4, pc}
     9b2:	bf00      	nop
     9b4:	200006ec 	.word	0x200006ec
     9b8:	000005b9 	.word	0x000005b9
     9bc:	20000000 	.word	0x20000000
     9c0:	00000589 	.word	0x00000589
     9c4:	000113d5 	.word	0x000113d5

000009c8 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
     9c8:	b538      	push	{r3, r4, r5, lr}
     9ca:	4605      	mov	r5, r0
     9cc:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
     9ce:	4b05      	ldr	r3, [pc, #20]	; (9e4 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
     9d0:	4798      	blx	r3
     9d2:	f8a5 0148 	strh.w	r0, [r5, #328]	; 0x148
	usb.writeData(&header, sizeof(header));
     9d6:	2206      	movs	r2, #6
     9d8:	4621      	mov	r1, r4
     9da:	4803      	ldr	r0, [pc, #12]	; (9e8 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
     9dc:	4b03      	ldr	r3, [pc, #12]	; (9ec <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
     9de:	4798      	blx	r3
     9e0:	bd38      	pop	{r3, r4, r5, pc}
     9e2:	bf00      	nop
     9e4:	000008e9 	.word	0x000008e9
     9e8:	20001070 	.word	0x20001070
     9ec:	0000e2d1 	.word	0x0000e2d1

000009f0 <_ZN16Maintenance_Tool21CommandReadParametersEv>:
bool Maintenance_Tool::CommandReadParameters(){
     9f0:	b538      	push	{r3, r4, r5, lr}
	 	bool	result(header.task == kGAINCommandReadParameters);
     9f2:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
     9f6:	2b48      	cmp	r3, #72	; 0x48
     9f8:	bf0c      	ite	eq
     9fa:	2501      	moveq	r5, #1
     9fc:	2500      	movne	r5, #0
		if (result){
     9fe:	d001      	beq.n	a04 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x14>
}
     a00:	4628      	mov	r0, r5
     a02:	bd38      	pop	{r3, r4, r5, pc}
     a04:	4604      	mov	r4, r0
			r=memory.ReadParameters(parameters);
     a06:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
     a0a:	4811      	ldr	r0, [pc, #68]	; (a50 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x60>)
     a0c:	4b11      	ldr	r3, [pc, #68]	; (a54 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x64>)
     a0e:	4798      	blx	r3
			 memcpy(localBuffer,(void*)&hm,n);
     a10:	4b11      	ldr	r3, [pc, #68]	; (a58 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x68>)
     a12:	f8c4 3049 	str.w	r3, [r4, #73]	; 0x49
     a16:	2300      	movs	r3, #0
     a18:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
     a1c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
			memcpy((uint8_t*)&localBuffer[n],(void*)&parameters,sizeof(UserParameters));
     a20:	f8b4 314c 	ldrh.w	r3, [r4, #332]	; 0x14c
     a24:	f8a4 304f 	strh.w	r3, [r4, #79]	; 0x4f
			if (fvc.dataStruct.controlOutputs.iAlcFvStandAloneOut)
     a28:	4b0c      	ldr	r3, [pc, #48]	; (a5c <_ZN16Maintenance_Tool21CommandReadParametersEv+0x6c>)
     a2a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
     a2e:	b153      	cbz	r3, a46 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x56>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveStandAloneMinimumPosition;
     a30:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
     a34:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			w=usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a38:	2240      	movs	r2, #64	; 0x40
     a3a:	f104 0149 	add.w	r1, r4, #73	; 0x49
     a3e:	4808      	ldr	r0, [pc, #32]	; (a60 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x70>)
     a40:	4b08      	ldr	r3, [pc, #32]	; (a64 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x74>)
     a42:	4798      	blx	r3
     a44:	e7dc      	b.n	a00 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x10>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveMinimumPosition;
     a46:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
     a4a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
     a4e:	e7f3      	b.n	a38 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x48>
     a50:	200025f8 	.word	0x200025f8
     a54:	0000ffa5 	.word	0x0000ffa5
     a58:	61626364 	.word	0x61626364
     a5c:	200013d0 	.word	0x200013d0
     a60:	20001070 	.word	0x20001070
     a64:	0000e369 	.word	0x0000e369

00000a68 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
     a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadHeaterStatus);
     a6a:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
     a6e:	2b4a      	cmp	r3, #74	; 0x4a
     a70:	bf0c      	ite	eq
     a72:	2501      	moveq	r5, #1
     a74:	2500      	movne	r5, #0
	if (result){
     a76:	d001      	beq.n	a7c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
     a78:	4628      	mov	r0, r5
     a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a7c:	4604      	mov	r4, r0
			singleTask.description=heater.ReadStatus();
     a7e:	4f12      	ldr	r7, [pc, #72]	; (ac8 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x60>)
     a80:	4638      	mov	r0, r7
     a82:	4b12      	ldr	r3, [pc, #72]	; (acc <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x64>)
     a84:	4798      	blx	r3
     a86:	4606      	mov	r6, r0
			memcpy(localBuffer,(void*)&singleTask,n);
     a88:	4b11      	ldr	r3, [pc, #68]	; (ad0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
     a8a:	f8c4 3049 	str.w	r3, [r4, #73]	; 0x49
     a8e:	2300      	movs	r3, #0
     a90:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
     a94:	234a      	movs	r3, #74	; 0x4a
     a96:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
     a9a:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
			if (!heater.statusChanged)
     a9e:	787b      	ldrb	r3, [r7, #1]
     aa0:	b15b      	cbz	r3, aba <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x52>
			singleTaskMessage=singleTask;
     aa2:	4b0b      	ldr	r3, [pc, #44]	; (ad0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
     aa4:	f8c4 3089 	str.w	r3, [r4, #137]	; 0x89
     aa8:	2300      	movs	r3, #0
     aaa:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
     aae:	234a      	movs	r3, #74	; 0x4a
     ab0:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
     ab4:	f884 608f 	strb.w	r6, [r4, #143]	; 0x8f
     ab8:	e7de      	b.n	a78 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
				usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     aba:	2240      	movs	r2, #64	; 0x40
     abc:	f104 0149 	add.w	r1, r4, #73	; 0x49
     ac0:	4804      	ldr	r0, [pc, #16]	; (ad4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x6c>)
     ac2:	4b05      	ldr	r3, [pc, #20]	; (ad8 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x70>)
     ac4:	4798      	blx	r3
     ac6:	e7ec      	b.n	aa2 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x3a>
     ac8:	200015d8 	.word	0x200015d8
     acc:	0000fe11 	.word	0x0000fe11
     ad0:	61626364 	.word	0x61626364
     ad4:	20001070 	.word	0x20001070
     ad8:	0000e369 	.word	0x0000e369

00000adc <_ZN16Maintenance_Tool22CommandReadFlapperDataEv>:
bool Maintenance_Tool::CommandReadFlapperData(){
     adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACReadPositionFlapperValve);
     ade:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
     ae2:	2b4e      	cmp	r3, #78	; 0x4e
     ae4:	bf0c      	ite	eq
     ae6:	2501      	moveq	r5, #1
     ae8:	2500      	movne	r5, #0
	if (result){
     aea:	d001      	beq.n	af0 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x14>
}
     aec:	4628      	mov	r0, r5
     aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     af0:	4604      	mov	r4, r0
		fvc.UpdateFlapperValveData();
     af2:	4e10      	ldr	r6, [pc, #64]	; (b34 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x58>)
     af4:	4630      	mov	r0, r6
     af6:	4b10      	ldr	r3, [pc, #64]	; (b38 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x5c>)
     af8:	4798      	blx	r3
		CreateFullBufferMessage(localBuffer,(uint8_t*)&fvc.dataStruct);
     afa:	f104 0749 	add.w	r7, r4, #73	; 0x49
     afe:	f106 027c 	add.w	r2, r6, #124	; 0x7c
     b02:	4639      	mov	r1, r7
     b04:	4620      	mov	r0, r4
     b06:	4b0d      	ldr	r3, [pc, #52]	; (b3c <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x60>)
     b08:	4798      	blx	r3
		if (!(fvc.StatusHadChanged()))
     b0a:	4630      	mov	r0, r6
     b0c:	4b0c      	ldr	r3, [pc, #48]	; (b40 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x64>)
     b0e:	4798      	blx	r3
     b10:	b150      	cbz	r0, b28 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x4c>
		singleTaskMessage=singleTask;
     b12:	4b0c      	ldr	r3, [pc, #48]	; (b44 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x68>)
     b14:	f8c4 3089 	str.w	r3, [r4, #137]	; 0x89
     b18:	2300      	movs	r3, #0
     b1a:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
     b1e:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
     b22:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
     b26:	e7e1      	b.n	aec <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x10>
			usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b28:	2240      	movs	r2, #64	; 0x40
     b2a:	4639      	mov	r1, r7
     b2c:	4806      	ldr	r0, [pc, #24]	; (b48 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x6c>)
     b2e:	4b07      	ldr	r3, [pc, #28]	; (b4c <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x70>)
     b30:	4798      	blx	r3
     b32:	e7ee      	b.n	b12 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x36>
     b34:	200013d0 	.word	0x200013d0
     b38:	0000f759 	.word	0x0000f759
     b3c:	00000531 	.word	0x00000531
     b40:	0000eea5 	.word	0x0000eea5
     b44:	61626364 	.word	0x61626364
     b48:	20001070 	.word	0x20001070
     b4c:	0000e369 	.word	0x0000e369

00000b50 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
     b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
     b52:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
     b56:	2b4d      	cmp	r3, #77	; 0x4d
     b58:	bf0c      	ite	eq
     b5a:	2501      	moveq	r5, #1
     b5c:	2500      	movne	r5, #0
	if (result){
     b5e:	d001      	beq.n	b64 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x14>
}
     b60:	4628      	mov	r0, r5
     b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		singleTask.description=temperatures.faultData;
     b64:	4f19      	ldr	r7, [pc, #100]	; (bcc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
     b66:	f897 609c 	ldrb.w	r6, [r7, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
     b6a:	4b19      	ldr	r3, [pc, #100]	; (bd0 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
     b6c:	f8c0 3049 	str.w	r3, [r0, #73]	; 0x49
     b70:	2300      	movs	r3, #0
     b72:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     b76:	234d      	movs	r3, #77	; 0x4d
     b78:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
     b7c:	f880 604f 	strb.w	r6, [r0, #79]	; 0x4f
     b80:	3768      	adds	r7, #104	; 0x68
     b82:	f100 0350 	add.w	r3, r0, #80	; 0x50
     b86:	f100 0e80 	add.w	lr, r0, #128	; 0x80
     b8a:	f103 0410 	add.w	r4, r3, #16
bool Maintenance_Tool::CommandReadTemmperatures(){
     b8e:	463a      	mov	r2, r7
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
     b90:	f852 1f04 	ldr.w	r1, [r2, #4]!
     b94:	f843 1b04 	str.w	r1, [r3], #4
			for (int j = 0; j < 4; j++)
     b98:	42a3      	cmp	r3, r4
     b9a:	d1f9      	bne.n	b90 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
     b9c:	3710      	adds	r7, #16
     b9e:	4623      	mov	r3, r4
		for (int i = 0; i < 3; i++)
     ba0:	45a6      	cmp	lr, r4
     ba2:	d1f2      	bne.n	b8a <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x3a>
     ba4:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     ba6:	2240      	movs	r2, #64	; 0x40
     ba8:	f100 0149 	add.w	r1, r0, #73	; 0x49
     bac:	4809      	ldr	r0, [pc, #36]	; (bd4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
     bae:	4b0a      	ldr	r3, [pc, #40]	; (bd8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
     bb0:	4798      	blx	r3
		singleTaskMessage=singleTask;
     bb2:	4b07      	ldr	r3, [pc, #28]	; (bd0 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
     bb4:	f8c4 3089 	str.w	r3, [r4, #137]	; 0x89
     bb8:	2300      	movs	r3, #0
     bba:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
     bbe:	234d      	movs	r3, #77	; 0x4d
     bc0:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
     bc4:	f884 608f 	strb.w	r6, [r4, #143]	; 0x8f
     bc8:	e7ca      	b.n	b60 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x10>
     bca:	bf00      	nop
     bcc:	200079c8 	.word	0x200079c8
     bd0:	61626364 	.word	0x61626364
     bd4:	20001070 	.word	0x20001070
     bd8:	0000e369 	.word	0x0000e369

00000bdc <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
     bdc:	b570      	push	{r4, r5, r6, lr}
     bde:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
     be0:	f100 05e0 	add.w	r5, r0, #224	; 0xe0
     be4:	4601      	mov	r1, r0
     be6:	f851 3f49 	ldr.w	r3, [r1, #73]!
     bea:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
     bee:	888b      	ldrh	r3, [r1, #4]
     bf0:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
     bf2:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
     bf6:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
     bf8:	b2db      	uxtb	r3, r3
     bfa:	2b15      	cmp	r3, #21
     bfc:	d816      	bhi.n	c2c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x50>
		gotTask=true;
     bfe:	2301      	movs	r3, #1
     c00:	f880 3147 	strb.w	r3, [r0, #327]	; 0x147
		result=gotTask;
     c04:	f880 3144 	strb.w	r3, [r0, #324]	; 0x144
		switch (header.task)
     c08:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
     c0c:	3b41      	subs	r3, #65	; 0x41
     c0e:	2b15      	cmp	r3, #21
     c10:	d86f      	bhi.n	cf2 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x116>
     c12:	e8df f003 	tbb	[pc, r3]
     c16:	231c      	.short	0x231c
     c18:	19192919 	.word	0x19192919
     c1c:	443e3832 	.word	0x443e3832
     c20:	5c56504a 	.word	0x5c56504a
     c24:	19196862 	.word	0x19196862
     c28:	196e6e19 	.word	0x196e6e19
		gotTask=false;
     c2c:	2300      	movs	r3, #0
     c2e:	f880 3147 	strb.w	r3, [r0, #327]	; 0x147
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     c32:	4e32      	ldr	r6, [pc, #200]	; (cfc <_ZN16Maintenance_Tool14handleHVACTaskEv+0x120>)
     c34:	2240      	movs	r2, #64	; 0x40
     c36:	4630      	mov	r0, r6
     c38:	4b31      	ldr	r3, [pc, #196]	; (d00 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x124>)
     c3a:	4798      	blx	r3
		result=usb.rxReady;
     c3c:	7d73      	ldrb	r3, [r6, #21]
     c3e:	b2db      	uxtb	r3, r3
     c40:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
	if (result)
     c44:	2b00      	cmp	r3, #0
     c46:	d1df      	bne.n	c08 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
     c48:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
     c4c:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
     c4e:	4629      	mov	r1, r5
     c50:	4620      	mov	r0, r4
     c52:	4b2c      	ldr	r3, [pc, #176]	; (d04 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x128>)
     c54:	4798      	blx	r3
     c56:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
				break;
     c5a:	e7f5      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
	maintenanceIsConnected = false;
     c5c:	2300      	movs	r3, #0
     c5e:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
	bSendNotifications = false;
     c62:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
				break;
     c66:	e7ef      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
				notifyGAINCommandReceived( header, result);
     c68:	2201      	movs	r2, #1
     c6a:	4629      	mov	r1, r5
     c6c:	4620      	mov	r0, r4
     c6e:	4b26      	ldr	r3, [pc, #152]	; (d08 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x12c>)
     c70:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     c72:	2301      	movs	r3, #1
     c74:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
				break;
     c78:	e7e6      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
				result = CommandWriteParameters();
     c7a:	4620      	mov	r0, r4
     c7c:	4b23      	ldr	r3, [pc, #140]	; (d0c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x130>)
     c7e:	4798      	blx	r3
     c80:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
				break;
     c84:	e7e0      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
				result = CommandReadParameters();
     c86:	4620      	mov	r0, r4
     c88:	4b21      	ldr	r3, [pc, #132]	; (d10 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x134>)
     c8a:	4798      	blx	r3
     c8c:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
				break;
     c90:	e7da      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
				result = CommandSetHeaters();
     c92:	4620      	mov	r0, r4
     c94:	4b1f      	ldr	r3, [pc, #124]	; (d14 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x138>)
     c96:	4798      	blx	r3
     c98:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
				break;
     c9c:	e7d4      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
				result = CommandReadHeaterStatus();
     c9e:	4620      	mov	r0, r4
     ca0:	4b1d      	ldr	r3, [pc, #116]	; (d18 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x13c>)
     ca2:	4798      	blx	r3
     ca4:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
				break;
     ca8:	e7ce      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
				result = CommandSetEnableFans();
     caa:	4620      	mov	r0, r4
     cac:	4b1b      	ldr	r3, [pc, #108]	; (d1c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x140>)
     cae:	4798      	blx	r3
     cb0:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
				break;
     cb4:	e7c8      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
				result = CommandSetPWMFans();
     cb6:	4620      	mov	r0, r4
     cb8:	4b19      	ldr	r3, [pc, #100]	; (d20 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x144>)
     cba:	4798      	blx	r3
     cbc:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
				break;
     cc0:	e7c2      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
				result = CommandReadTemmperatures();
     cc2:	4620      	mov	r0, r4
     cc4:	4b17      	ldr	r3, [pc, #92]	; (d24 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x148>)
     cc6:	4798      	blx	r3
     cc8:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
				break;
     ccc:	e7bc      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
				result = CommandReadFlapperData();
     cce:	4620      	mov	r0, r4
     cd0:	4b15      	ldr	r3, [pc, #84]	; (d28 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x14c>)
     cd2:	4798      	blx	r3
     cd4:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
				break;
     cd8:	e7b6      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
				result = CommandSetFlapperValve();
     cda:	4620      	mov	r0, r4
     cdc:	4b13      	ldr	r3, [pc, #76]	; (d2c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x150>)
     cde:	4798      	blx	r3
     ce0:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
				break;
     ce4:	e7b0      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
				result = CommandSetFlapperPosition();
     ce6:	4620      	mov	r0, r4
     ce8:	4b11      	ldr	r3, [pc, #68]	; (d30 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x154>)
     cea:	4798      	blx	r3
     cec:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
				break;
     cf0:	e7aa      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
				result = false;
     cf2:	2300      	movs	r3, #0
     cf4:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
				break;
     cf8:	e7a6      	b.n	c48 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x6c>
     cfa:	bf00      	nop
     cfc:	20001070 	.word	0x20001070
     d00:	0000e1e5 	.word	0x0000e1e5
     d04:	000006db 	.word	0x000006db
     d08:	000009c9 	.word	0x000009c9
     d0c:	000006f5 	.word	0x000006f5
     d10:	000009f1 	.word	0x000009f1
     d14:	00000725 	.word	0x00000725
     d18:	00000a69 	.word	0x00000a69
     d1c:	00000795 	.word	0x00000795
     d20:	00000849 	.word	0x00000849
     d24:	00000b51 	.word	0x00000b51
     d28:	00000add 	.word	0x00000add
     d2c:	000007fd 	.word	0x000007fd
     d30:	0000086d 	.word	0x0000086d

00000d34 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d36:	4604      	mov	r4, r0
	result=false;
     d38:	2300      	movs	r3, #0
     d3a:	f880 3144 	strb.w	r3, [r0, #324]	; 0x144
	if (gotAccess)
     d3e:	f890 3145 	ldrb.w	r3, [r0, #325]	; 0x145
     d42:	2b00      	cmp	r3, #0
     d44:	d050      	beq.n	de8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>
		if (usb.rxReady)
     d46:	4b2a      	ldr	r3, [pc, #168]	; (df0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     d48:	7d5b      	ldrb	r3, [r3, #21]
     d4a:	b95b      	cbnz	r3, d64 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
			gotCommand=false;
     d4c:	2300      	movs	r3, #0
     d4e:	f880 3146 	strb.w	r3, [r0, #326]	; 0x146
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     d52:	2240      	movs	r2, #64	; 0x40
     d54:	f104 0149 	add.w	r1, r4, #73	; 0x49
     d58:	4825      	ldr	r0, [pc, #148]	; (df0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     d5a:	4b26      	ldr	r3, [pc, #152]	; (df4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     d5c:	4798      	blx	r3
	}
     d5e:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
     d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
     d64:	4603      	mov	r3, r0
     d66:	f853 2f49 	ldr.w	r2, [r3, #73]!
     d6a:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
     d6e:	889b      	ldrh	r3, [r3, #4]
     d70:	f8a0 30e4 	strh.w	r3, [r0, #228]	; 0xe4
			switch (input){
     d74:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
     d78:	2b3d      	cmp	r3, #61	; 0x3d
     d7a:	d017      	beq.n	dac <_ZN16Maintenance_Tool19handleCommunicationEv+0x78>
     d7c:	2b3e      	cmp	r3, #62	; 0x3e
     d7e:	d010      	beq.n	da2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x6e>
     d80:	2b3c      	cmp	r3, #60	; 0x3c
     d82:	d003      	beq.n	d8c <_ZN16Maintenance_Tool19handleCommunicationEv+0x58>
					gotCommand=false;
     d84:	2300      	movs	r3, #0
     d86:	f880 3146 	strb.w	r3, [r0, #326]	; 0x146
				break;
     d8a:	e006      	b.n	d9a <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					gotCommand=true;
     d8c:	2301      	movs	r3, #1
     d8e:	f880 3146 	strb.w	r3, [r0, #326]	; 0x146
					result = handleHVACTask();
     d92:	4b19      	ldr	r3, [pc, #100]	; (df8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     d94:	4798      	blx	r3
     d96:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
			ClearLocalBuffer();
     d9a:	4620      	mov	r0, r4
     d9c:	4b17      	ldr	r3, [pc, #92]	; (dfc <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
     d9e:	4798      	blx	r3
     da0:	e7d7      	b.n	d52 <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
     da2:	4b15      	ldr	r3, [pc, #84]	; (df8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     da4:	4798      	blx	r3
     da6:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
				break;
     daa:	e7f6      	b.n	d9a <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					is_MTPC_Beaming=true;
     dac:	2501      	movs	r5, #1
     dae:	f880 5048 	strb.w	r5, [r0, #72]	; 0x48
					interfaceTimer.Stop();
     db2:	4e13      	ldr	r6, [pc, #76]	; (e00 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
     db4:	4630      	mov	r0, r6
     db6:	4b13      	ldr	r3, [pc, #76]	; (e04 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
     db8:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
     dba:	4f13      	ldr	r7, [pc, #76]	; (e08 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
     dbc:	4639      	mov	r1, r7
     dbe:	4630      	mov	r0, r6
     dc0:	4b12      	ldr	r3, [pc, #72]	; (e0c <_ZN16Maintenance_Tool19handleCommunicationEv+0xd8>)
     dc2:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
     dc4:	f242 7210 	movw	r2, #10000	; 0x2710
     dc8:	4639      	mov	r1, r7
     dca:	4630      	mov	r0, r6
     dcc:	4b10      	ldr	r3, [pc, #64]	; (e10 <_ZN16Maintenance_Tool19handleCommunicationEv+0xdc>)
     dce:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
     dd0:	2300      	movs	r3, #0
     dd2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
					maintenanceIsConnected = true;
     dd6:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
					bSendNotifications = true;
     dda:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
					result=is_MTPC_Beaming;
     dde:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
     de2:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
				break;
     de6:	e7d8      	b.n	d9a <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
		gotCommand=false;
     de8:	2300      	movs	r3, #0
     dea:	f880 3146 	strb.w	r3, [r0, #326]	; 0x146
     dee:	e7b6      	b.n	d5e <_ZN16Maintenance_Tool19handleCommunicationEv+0x2a>
     df0:	20001070 	.word	0x20001070
     df4:	0000e1e5 	.word	0x0000e1e5
     df8:	00000bdd 	.word	0x00000bdd
     dfc:	000006c5 	.word	0x000006c5
     e00:	20001148 	.word	0x20001148
     e04:	0000e885 	.word	0x0000e885
     e08:	00000579 	.word	0x00000579
     e0c:	0000e9c9 	.word	0x0000e9c9
     e10:	0000e965 	.word	0x0000e965

00000e14 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     e14:	b580      	push	{r7, lr}
     e16:	af00      	add	r7, sp, #0
	system_init();
     e18:	4b03      	ldr	r3, [pc, #12]	; (e28 <atmel_start_init+0x14>)
     e1a:	4798      	blx	r3
	usb_init();
     e1c:	4b03      	ldr	r3, [pc, #12]	; (e2c <atmel_start_init+0x18>)
     e1e:	4798      	blx	r3
	spi_nor_flash_init();
     e20:	4b03      	ldr	r3, [pc, #12]	; (e30 <atmel_start_init+0x1c>)
     e22:	4798      	blx	r3
}
     e24:	bf00      	nop
     e26:	bd80      	pop	{r7, pc}
     e28:	0000219d 	.word	0x0000219d
     e2c:	0000bcad 	.word	0x0000bcad
     e30:	0000bc41 	.word	0x0000bc41

00000e34 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     e34:	b480      	push	{r7}
     e36:	b085      	sub	sp, #20
     e38:	af00      	add	r7, sp, #0
     e3a:	60f8      	str	r0, [r7, #12]
     e3c:	460b      	mov	r3, r1
     e3e:	607a      	str	r2, [r7, #4]
     e40:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     e42:	7afa      	ldrb	r2, [r7, #11]
     e44:	68fb      	ldr	r3, [r7, #12]
     e46:	3220      	adds	r2, #32
     e48:	6879      	ldr	r1, [r7, #4]
     e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     e4e:	bf00      	nop
     e50:	3714      	adds	r7, #20
     e52:	46bd      	mov	sp, r7
     e54:	f85d 7b04 	ldr.w	r7, [sp], #4
     e58:	4770      	bx	lr

00000e5a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     e5a:	b480      	push	{r7}
     e5c:	b083      	sub	sp, #12
     e5e:	af00      	add	r7, sp, #0
     e60:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     e62:	687b      	ldr	r3, [r7, #4]
     e64:	691b      	ldr	r3, [r3, #16]
     e66:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     e6a:	687b      	ldr	r3, [r7, #4]
     e6c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e6e:	bf00      	nop
     e70:	370c      	adds	r7, #12
     e72:	46bd      	mov	sp, r7
     e74:	f85d 7b04 	ldr.w	r7, [sp], #4
     e78:	4770      	bx	lr

00000e7a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     e7a:	b480      	push	{r7}
     e7c:	b083      	sub	sp, #12
     e7e:	af00      	add	r7, sp, #0
     e80:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     e82:	687b      	ldr	r3, [r7, #4]
     e84:	691b      	ldr	r3, [r3, #16]
     e86:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     e8a:	687b      	ldr	r3, [r7, #4]
     e8c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e8e:	bf00      	nop
     e90:	370c      	adds	r7, #12
     e92:	46bd      	mov	sp, r7
     e94:	f85d 7b04 	ldr.w	r7, [sp], #4
     e98:	4770      	bx	lr

00000e9a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     e9a:	b480      	push	{r7}
     e9c:	b083      	sub	sp, #12
     e9e:	af00      	add	r7, sp, #0
     ea0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	691b      	ldr	r3, [r3, #16]
     ea6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     eaa:	687b      	ldr	r3, [r7, #4]
     eac:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     eae:	bf00      	nop
     eb0:	370c      	adds	r7, #12
     eb2:	46bd      	mov	sp, r7
     eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
     eb8:	4770      	bx	lr

00000eba <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     eba:	b480      	push	{r7}
     ebc:	b083      	sub	sp, #12
     ebe:	af00      	add	r7, sp, #0
     ec0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     ec2:	687b      	ldr	r3, [r7, #4]
     ec4:	691b      	ldr	r3, [r3, #16]
     ec6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     eca:	687b      	ldr	r3, [r7, #4]
     ecc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ece:	bf00      	nop
     ed0:	370c      	adds	r7, #12
     ed2:	46bd      	mov	sp, r7
     ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ed8:	4770      	bx	lr

00000eda <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     eda:	b480      	push	{r7}
     edc:	b083      	sub	sp, #12
     ede:	af00      	add	r7, sp, #0
     ee0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     ee2:	687b      	ldr	r3, [r7, #4]
     ee4:	695b      	ldr	r3, [r3, #20]
     ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     eea:	687b      	ldr	r3, [r7, #4]
     eec:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     eee:	bf00      	nop
     ef0:	370c      	adds	r7, #12
     ef2:	46bd      	mov	sp, r7
     ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ef8:	4770      	bx	lr

00000efa <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     efa:	b480      	push	{r7}
     efc:	b083      	sub	sp, #12
     efe:	af00      	add	r7, sp, #0
     f00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	695b      	ldr	r3, [r3, #20]
     f06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     f0a:	687b      	ldr	r3, [r7, #4]
     f0c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f0e:	bf00      	nop
     f10:	370c      	adds	r7, #12
     f12:	46bd      	mov	sp, r7
     f14:	f85d 7b04 	ldr.w	r7, [sp], #4
     f18:	4770      	bx	lr

00000f1a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     f1a:	b480      	push	{r7}
     f1c:	b083      	sub	sp, #12
     f1e:	af00      	add	r7, sp, #0
     f20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     f22:	687b      	ldr	r3, [r7, #4]
     f24:	695b      	ldr	r3, [r3, #20]
     f26:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     f2a:	687b      	ldr	r3, [r7, #4]
     f2c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f2e:	bf00      	nop
     f30:	370c      	adds	r7, #12
     f32:	46bd      	mov	sp, r7
     f34:	f85d 7b04 	ldr.w	r7, [sp], #4
     f38:	4770      	bx	lr

00000f3a <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     f3a:	b480      	push	{r7}
     f3c:	b083      	sub	sp, #12
     f3e:	af00      	add	r7, sp, #0
     f40:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     f42:	687b      	ldr	r3, [r7, #4]
     f44:	695b      	ldr	r3, [r3, #20]
     f46:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     f4a:	687b      	ldr	r3, [r7, #4]
     f4c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f4e:	bf00      	nop
     f50:	370c      	adds	r7, #12
     f52:	46bd      	mov	sp, r7
     f54:	f85d 7b04 	ldr.w	r7, [sp], #4
     f58:	4770      	bx	lr

00000f5a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     f5a:	b480      	push	{r7}
     f5c:	b083      	sub	sp, #12
     f5e:	af00      	add	r7, sp, #0
     f60:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     f62:	687b      	ldr	r3, [r7, #4]
     f64:	695b      	ldr	r3, [r3, #20]
     f66:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f6e:	bf00      	nop
     f70:	370c      	adds	r7, #12
     f72:	46bd      	mov	sp, r7
     f74:	f85d 7b04 	ldr.w	r7, [sp], #4
     f78:	4770      	bx	lr

00000f7a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     f7a:	b480      	push	{r7}
     f7c:	b083      	sub	sp, #12
     f7e:	af00      	add	r7, sp, #0
     f80:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	699b      	ldr	r3, [r3, #24]
     f86:	f043 0201 	orr.w	r2, r3, #1
     f8a:	687b      	ldr	r3, [r7, #4]
     f8c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f8e:	bf00      	nop
     f90:	370c      	adds	r7, #12
     f92:	46bd      	mov	sp, r7
     f94:	f85d 7b04 	ldr.w	r7, [sp], #4
     f98:	4770      	bx	lr

00000f9a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     f9a:	b480      	push	{r7}
     f9c:	b083      	sub	sp, #12
     f9e:	af00      	add	r7, sp, #0
     fa0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     fa2:	687b      	ldr	r3, [r7, #4]
     fa4:	699b      	ldr	r3, [r3, #24]
     fa6:	f043 0202 	orr.w	r2, r3, #2
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fae:	bf00      	nop
     fb0:	370c      	adds	r7, #12
     fb2:	46bd      	mov	sp, r7
     fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
     fb8:	4770      	bx	lr

00000fba <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     fba:	b480      	push	{r7}
     fbc:	b083      	sub	sp, #12
     fbe:	af00      	add	r7, sp, #0
     fc0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     fc2:	687b      	ldr	r3, [r7, #4]
     fc4:	699b      	ldr	r3, [r3, #24]
     fc6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fce:	bf00      	nop
     fd0:	370c      	adds	r7, #12
     fd2:	46bd      	mov	sp, r7
     fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
     fd8:	4770      	bx	lr

00000fda <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     fda:	b480      	push	{r7}
     fdc:	b083      	sub	sp, #12
     fde:	af00      	add	r7, sp, #0
     fe0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     fe2:	687b      	ldr	r3, [r7, #4]
     fe4:	699b      	ldr	r3, [r3, #24]
     fe6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     fea:	687b      	ldr	r3, [r7, #4]
     fec:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fee:	bf00      	nop
     ff0:	370c      	adds	r7, #12
     ff2:	46bd      	mov	sp, r7
     ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ff8:	4770      	bx	lr

00000ffa <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     ffa:	b480      	push	{r7}
     ffc:	b083      	sub	sp, #12
     ffe:	af00      	add	r7, sp, #0
    1000:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    1002:	687b      	ldr	r3, [r7, #4]
    1004:	699b      	ldr	r3, [r3, #24]
    1006:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    100e:	bf00      	nop
    1010:	370c      	adds	r7, #12
    1012:	46bd      	mov	sp, r7
    1014:	f85d 7b04 	ldr.w	r7, [sp], #4
    1018:	4770      	bx	lr

0000101a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    101a:	b480      	push	{r7}
    101c:	b083      	sub	sp, #12
    101e:	af00      	add	r7, sp, #0
    1020:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    1022:	687b      	ldr	r3, [r7, #4]
    1024:	699b      	ldr	r3, [r3, #24]
    1026:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    102a:	687b      	ldr	r3, [r7, #4]
    102c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    102e:	bf00      	nop
    1030:	370c      	adds	r7, #12
    1032:	46bd      	mov	sp, r7
    1034:	f85d 7b04 	ldr.w	r7, [sp], #4
    1038:	4770      	bx	lr

0000103a <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    103a:	b480      	push	{r7}
    103c:	b083      	sub	sp, #12
    103e:	af00      	add	r7, sp, #0
    1040:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	69db      	ldr	r3, [r3, #28]
    1046:	f043 0220 	orr.w	r2, r3, #32
    104a:	687b      	ldr	r3, [r7, #4]
    104c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    104e:	bf00      	nop
    1050:	370c      	adds	r7, #12
    1052:	46bd      	mov	sp, r7
    1054:	f85d 7b04 	ldr.w	r7, [sp], #4
    1058:	4770      	bx	lr

0000105a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    105a:	b480      	push	{r7}
    105c:	b083      	sub	sp, #12
    105e:	af00      	add	r7, sp, #0
    1060:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	69db      	ldr	r3, [r3, #28]
    1066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    106e:	bf00      	nop
    1070:	370c      	adds	r7, #12
    1072:	46bd      	mov	sp, r7
    1074:	f85d 7b04 	ldr.w	r7, [sp], #4
    1078:	4770      	bx	lr

0000107a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    107a:	b480      	push	{r7}
    107c:	b083      	sub	sp, #12
    107e:	af00      	add	r7, sp, #0
    1080:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	69db      	ldr	r3, [r3, #28]
    1086:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    108a:	687b      	ldr	r3, [r7, #4]
    108c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    108e:	bf00      	nop
    1090:	370c      	adds	r7, #12
    1092:	46bd      	mov	sp, r7
    1094:	f85d 7b04 	ldr.w	r7, [sp], #4
    1098:	4770      	bx	lr

0000109a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    109a:	b480      	push	{r7}
    109c:	b083      	sub	sp, #12
    109e:	af00      	add	r7, sp, #0
    10a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    10a2:	687b      	ldr	r3, [r7, #4]
    10a4:	6a1b      	ldr	r3, [r3, #32]
    10a6:	f043 0201 	orr.w	r2, r3, #1
    10aa:	687b      	ldr	r3, [r7, #4]
    10ac:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10ae:	bf00      	nop
    10b0:	370c      	adds	r7, #12
    10b2:	46bd      	mov	sp, r7
    10b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    10b8:	4770      	bx	lr

000010ba <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    10ba:	b480      	push	{r7}
    10bc:	b083      	sub	sp, #12
    10be:	af00      	add	r7, sp, #0
    10c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    10c2:	687b      	ldr	r3, [r7, #4]
    10c4:	6a1b      	ldr	r3, [r3, #32]
    10c6:	f043 0202 	orr.w	r2, r3, #2
    10ca:	687b      	ldr	r3, [r7, #4]
    10cc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10ce:	bf00      	nop
    10d0:	370c      	adds	r7, #12
    10d2:	46bd      	mov	sp, r7
    10d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    10d8:	4770      	bx	lr

000010da <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    10da:	b480      	push	{r7}
    10dc:	b083      	sub	sp, #12
    10de:	af00      	add	r7, sp, #0
    10e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    10e2:	687b      	ldr	r3, [r7, #4]
    10e4:	6a1b      	ldr	r3, [r3, #32]
    10e6:	f043 0204 	orr.w	r2, r3, #4
    10ea:	687b      	ldr	r3, [r7, #4]
    10ec:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10ee:	bf00      	nop
    10f0:	370c      	adds	r7, #12
    10f2:	46bd      	mov	sp, r7
    10f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    10f8:	4770      	bx	lr

000010fa <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    10fa:	b480      	push	{r7}
    10fc:	b083      	sub	sp, #12
    10fe:	af00      	add	r7, sp, #0
    1100:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    1102:	687b      	ldr	r3, [r7, #4]
    1104:	6a1b      	ldr	r3, [r3, #32]
    1106:	f043 0208 	orr.w	r2, r3, #8
    110a:	687b      	ldr	r3, [r7, #4]
    110c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    110e:	bf00      	nop
    1110:	370c      	adds	r7, #12
    1112:	46bd      	mov	sp, r7
    1114:	f85d 7b04 	ldr.w	r7, [sp], #4
    1118:	4770      	bx	lr

0000111a <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    111a:	b480      	push	{r7}
    111c:	b083      	sub	sp, #12
    111e:	af00      	add	r7, sp, #0
    1120:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    1122:	687b      	ldr	r3, [r7, #4]
    1124:	6a1b      	ldr	r3, [r3, #32]
    1126:	f043 0220 	orr.w	r2, r3, #32
    112a:	687b      	ldr	r3, [r7, #4]
    112c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    112e:	bf00      	nop
    1130:	370c      	adds	r7, #12
    1132:	46bd      	mov	sp, r7
    1134:	f85d 7b04 	ldr.w	r7, [sp], #4
    1138:	4770      	bx	lr

0000113a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    113a:	b480      	push	{r7}
    113c:	b083      	sub	sp, #12
    113e:	af00      	add	r7, sp, #0
    1140:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    1142:	687b      	ldr	r3, [r7, #4]
    1144:	6a1b      	ldr	r3, [r3, #32]
    1146:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    114a:	687b      	ldr	r3, [r7, #4]
    114c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    114e:	bf00      	nop
    1150:	370c      	adds	r7, #12
    1152:	46bd      	mov	sp, r7
    1154:	f85d 7b04 	ldr.w	r7, [sp], #4
    1158:	4770      	bx	lr

0000115a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    115a:	b480      	push	{r7}
    115c:	b085      	sub	sp, #20
    115e:	af00      	add	r7, sp, #0
    1160:	60f8      	str	r0, [r7, #12]
    1162:	460b      	mov	r3, r1
    1164:	607a      	str	r2, [r7, #4]
    1166:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1168:	7afb      	ldrb	r3, [r7, #11]
    116a:	68fa      	ldr	r2, [r7, #12]
    116c:	01db      	lsls	r3, r3, #7
    116e:	4413      	add	r3, r2
    1170:	3308      	adds	r3, #8
    1172:	687a      	ldr	r2, [r7, #4]
    1174:	601a      	str	r2, [r3, #0]
}
    1176:	bf00      	nop
    1178:	3714      	adds	r7, #20
    117a:	46bd      	mov	sp, r7
    117c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1180:	4770      	bx	lr

00001182 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1182:	b480      	push	{r7}
    1184:	b085      	sub	sp, #20
    1186:	af00      	add	r7, sp, #0
    1188:	60f8      	str	r0, [r7, #12]
    118a:	460b      	mov	r3, r1
    118c:	607a      	str	r2, [r7, #4]
    118e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1190:	7afb      	ldrb	r3, [r7, #11]
    1192:	68fa      	ldr	r2, [r7, #12]
    1194:	01db      	lsls	r3, r3, #7
    1196:	4413      	add	r3, r2
    1198:	3304      	adds	r3, #4
    119a:	687a      	ldr	r2, [r7, #4]
    119c:	601a      	str	r2, [r3, #0]
}
    119e:	bf00      	nop
    11a0:	3714      	adds	r7, #20
    11a2:	46bd      	mov	sp, r7
    11a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    11a8:	4770      	bx	lr

000011aa <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    11aa:	b480      	push	{r7}
    11ac:	b085      	sub	sp, #20
    11ae:	af00      	add	r7, sp, #0
    11b0:	60f8      	str	r0, [r7, #12]
    11b2:	460b      	mov	r3, r1
    11b4:	607a      	str	r2, [r7, #4]
    11b6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    11b8:	7afb      	ldrb	r3, [r7, #11]
    11ba:	68fa      	ldr	r2, [r7, #12]
    11bc:	01db      	lsls	r3, r3, #7
    11be:	4413      	add	r3, r2
    11c0:	3318      	adds	r3, #24
    11c2:	687a      	ldr	r2, [r7, #4]
    11c4:	601a      	str	r2, [r3, #0]
}
    11c6:	bf00      	nop
    11c8:	3714      	adds	r7, #20
    11ca:	46bd      	mov	sp, r7
    11cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    11d0:	4770      	bx	lr

000011d2 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    11d2:	b480      	push	{r7}
    11d4:	b085      	sub	sp, #20
    11d6:	af00      	add	r7, sp, #0
    11d8:	60f8      	str	r0, [r7, #12]
    11da:	460b      	mov	r3, r1
    11dc:	607a      	str	r2, [r7, #4]
    11de:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    11e0:	7afb      	ldrb	r3, [r7, #11]
    11e2:	68fa      	ldr	r2, [r7, #12]
    11e4:	01db      	lsls	r3, r3, #7
    11e6:	4413      	add	r3, r2
    11e8:	3314      	adds	r3, #20
    11ea:	687a      	ldr	r2, [r7, #4]
    11ec:	601a      	str	r2, [r3, #0]
}
    11ee:	bf00      	nop
    11f0:	3714      	adds	r7, #20
    11f2:	46bd      	mov	sp, r7
    11f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    11f8:	4770      	bx	lr

000011fa <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    11fa:	b480      	push	{r7}
    11fc:	b085      	sub	sp, #20
    11fe:	af00      	add	r7, sp, #0
    1200:	6078      	str	r0, [r7, #4]
    1202:	4608      	mov	r0, r1
    1204:	4611      	mov	r1, r2
    1206:	461a      	mov	r2, r3
    1208:	4603      	mov	r3, r0
    120a:	70fb      	strb	r3, [r7, #3]
    120c:	460b      	mov	r3, r1
    120e:	70bb      	strb	r3, [r7, #2]
    1210:	4613      	mov	r3, r2
    1212:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1214:	78fa      	ldrb	r2, [r7, #3]
    1216:	78bb      	ldrb	r3, [r7, #2]
    1218:	6879      	ldr	r1, [r7, #4]
    121a:	01d2      	lsls	r2, r2, #7
    121c:	440a      	add	r2, r1
    121e:	4413      	add	r3, r2
    1220:	3330      	adds	r3, #48	; 0x30
    1222:	781b      	ldrb	r3, [r3, #0]
    1224:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1226:	7bfb      	ldrb	r3, [r7, #15]
    1228:	f023 030f 	bic.w	r3, r3, #15
    122c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    122e:	787b      	ldrb	r3, [r7, #1]
    1230:	f003 030f 	and.w	r3, r3, #15
    1234:	b2da      	uxtb	r2, r3
    1236:	7bfb      	ldrb	r3, [r7, #15]
    1238:	4313      	orrs	r3, r2
    123a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    123c:	78fa      	ldrb	r2, [r7, #3]
    123e:	78bb      	ldrb	r3, [r7, #2]
    1240:	6879      	ldr	r1, [r7, #4]
    1242:	01d2      	lsls	r2, r2, #7
    1244:	440a      	add	r2, r1
    1246:	4413      	add	r3, r2
    1248:	3330      	adds	r3, #48	; 0x30
    124a:	7bfa      	ldrb	r2, [r7, #15]
    124c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    124e:	bf00      	nop
    1250:	3714      	adds	r7, #20
    1252:	46bd      	mov	sp, r7
    1254:	f85d 7b04 	ldr.w	r7, [sp], #4
    1258:	4770      	bx	lr

0000125a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    125a:	b480      	push	{r7}
    125c:	b085      	sub	sp, #20
    125e:	af00      	add	r7, sp, #0
    1260:	6078      	str	r0, [r7, #4]
    1262:	4608      	mov	r0, r1
    1264:	4611      	mov	r1, r2
    1266:	461a      	mov	r2, r3
    1268:	4603      	mov	r3, r0
    126a:	70fb      	strb	r3, [r7, #3]
    126c:	460b      	mov	r3, r1
    126e:	70bb      	strb	r3, [r7, #2]
    1270:	4613      	mov	r3, r2
    1272:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1274:	78fa      	ldrb	r2, [r7, #3]
    1276:	78bb      	ldrb	r3, [r7, #2]
    1278:	6879      	ldr	r1, [r7, #4]
    127a:	01d2      	lsls	r2, r2, #7
    127c:	440a      	add	r2, r1
    127e:	4413      	add	r3, r2
    1280:	3330      	adds	r3, #48	; 0x30
    1282:	781b      	ldrb	r3, [r3, #0]
    1284:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1286:	7bfb      	ldrb	r3, [r7, #15]
    1288:	f003 030f 	and.w	r3, r3, #15
    128c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    128e:	787b      	ldrb	r3, [r7, #1]
    1290:	011b      	lsls	r3, r3, #4
    1292:	b2da      	uxtb	r2, r3
    1294:	7bfb      	ldrb	r3, [r7, #15]
    1296:	4313      	orrs	r3, r2
    1298:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    129a:	78fa      	ldrb	r2, [r7, #3]
    129c:	78bb      	ldrb	r3, [r7, #2]
    129e:	6879      	ldr	r1, [r7, #4]
    12a0:	01d2      	lsls	r2, r2, #7
    12a2:	440a      	add	r2, r1
    12a4:	4413      	add	r3, r2
    12a6:	3330      	adds	r3, #48	; 0x30
    12a8:	7bfa      	ldrb	r2, [r7, #15]
    12aa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    12ac:	bf00      	nop
    12ae:	3714      	adds	r7, #20
    12b0:	46bd      	mov	sp, r7
    12b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    12b6:	4770      	bx	lr

000012b8 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    12b8:	b480      	push	{r7}
    12ba:	b085      	sub	sp, #20
    12bc:	af00      	add	r7, sp, #0
    12be:	6078      	str	r0, [r7, #4]
    12c0:	4608      	mov	r0, r1
    12c2:	4611      	mov	r1, r2
    12c4:	461a      	mov	r2, r3
    12c6:	4603      	mov	r3, r0
    12c8:	70fb      	strb	r3, [r7, #3]
    12ca:	460b      	mov	r3, r1
    12cc:	70bb      	strb	r3, [r7, #2]
    12ce:	4613      	mov	r3, r2
    12d0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12d2:	78fa      	ldrb	r2, [r7, #3]
    12d4:	78bb      	ldrb	r3, [r7, #2]
    12d6:	6879      	ldr	r1, [r7, #4]
    12d8:	01d2      	lsls	r2, r2, #7
    12da:	440a      	add	r2, r1
    12dc:	4413      	add	r3, r2
    12de:	3340      	adds	r3, #64	; 0x40
    12e0:	781b      	ldrb	r3, [r3, #0]
    12e2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    12e4:	7bfb      	ldrb	r3, [r7, #15]
    12e6:	f023 0301 	bic.w	r3, r3, #1
    12ea:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12ec:	787a      	ldrb	r2, [r7, #1]
    12ee:	7bfb      	ldrb	r3, [r7, #15]
    12f0:	4313      	orrs	r3, r2
    12f2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12f4:	78fa      	ldrb	r2, [r7, #3]
    12f6:	78bb      	ldrb	r3, [r7, #2]
    12f8:	6879      	ldr	r1, [r7, #4]
    12fa:	01d2      	lsls	r2, r2, #7
    12fc:	440a      	add	r2, r1
    12fe:	4413      	add	r3, r2
    1300:	3340      	adds	r3, #64	; 0x40
    1302:	7bfa      	ldrb	r2, [r7, #15]
    1304:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1306:	bf00      	nop
    1308:	3714      	adds	r7, #20
    130a:	46bd      	mov	sp, r7
    130c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1310:	4770      	bx	lr

00001312 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1312:	b490      	push	{r4, r7}
    1314:	b082      	sub	sp, #8
    1316:	af00      	add	r7, sp, #0
    1318:	6078      	str	r0, [r7, #4]
    131a:	460b      	mov	r3, r1
    131c:	70fb      	strb	r3, [r7, #3]
    131e:	4613      	mov	r3, r2
    1320:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1322:	78fa      	ldrb	r2, [r7, #3]
    1324:	78bb      	ldrb	r3, [r7, #2]
    1326:	78f8      	ldrb	r0, [r7, #3]
    1328:	78b9      	ldrb	r1, [r7, #2]
    132a:	687c      	ldr	r4, [r7, #4]
    132c:	01c0      	lsls	r0, r0, #7
    132e:	4420      	add	r0, r4
    1330:	4401      	add	r1, r0
    1332:	3140      	adds	r1, #64	; 0x40
    1334:	7809      	ldrb	r1, [r1, #0]
    1336:	b2c9      	uxtb	r1, r1
    1338:	f041 0104 	orr.w	r1, r1, #4
    133c:	b2c8      	uxtb	r0, r1
    133e:	6879      	ldr	r1, [r7, #4]
    1340:	01d2      	lsls	r2, r2, #7
    1342:	440a      	add	r2, r1
    1344:	4413      	add	r3, r2
    1346:	3340      	adds	r3, #64	; 0x40
    1348:	4602      	mov	r2, r0
    134a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    134c:	bf00      	nop
    134e:	3708      	adds	r7, #8
    1350:	46bd      	mov	sp, r7
    1352:	bc90      	pop	{r4, r7}
    1354:	4770      	bx	lr

00001356 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1356:	b490      	push	{r4, r7}
    1358:	b082      	sub	sp, #8
    135a:	af00      	add	r7, sp, #0
    135c:	6078      	str	r0, [r7, #4]
    135e:	460b      	mov	r3, r1
    1360:	70fb      	strb	r3, [r7, #3]
    1362:	4613      	mov	r3, r2
    1364:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1366:	78fa      	ldrb	r2, [r7, #3]
    1368:	78bb      	ldrb	r3, [r7, #2]
    136a:	78f8      	ldrb	r0, [r7, #3]
    136c:	78b9      	ldrb	r1, [r7, #2]
    136e:	687c      	ldr	r4, [r7, #4]
    1370:	01c0      	lsls	r0, r0, #7
    1372:	4420      	add	r0, r4
    1374:	4401      	add	r1, r0
    1376:	3140      	adds	r1, #64	; 0x40
    1378:	7809      	ldrb	r1, [r1, #0]
    137a:	b2c9      	uxtb	r1, r1
    137c:	f021 0104 	bic.w	r1, r1, #4
    1380:	b2c8      	uxtb	r0, r1
    1382:	6879      	ldr	r1, [r7, #4]
    1384:	01d2      	lsls	r2, r2, #7
    1386:	440a      	add	r2, r1
    1388:	4413      	add	r3, r2
    138a:	3340      	adds	r3, #64	; 0x40
    138c:	4602      	mov	r2, r0
    138e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1390:	bf00      	nop
    1392:	3708      	adds	r7, #8
    1394:	46bd      	mov	sp, r7
    1396:	bc90      	pop	{r4, r7}
    1398:	4770      	bx	lr

0000139a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    139a:	b480      	push	{r7}
    139c:	b085      	sub	sp, #20
    139e:	af00      	add	r7, sp, #0
    13a0:	60f8      	str	r0, [r7, #12]
    13a2:	460b      	mov	r3, r1
    13a4:	607a      	str	r2, [r7, #4]
    13a6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13a8:	7afb      	ldrb	r3, [r7, #11]
    13aa:	68fa      	ldr	r2, [r7, #12]
    13ac:	01db      	lsls	r3, r3, #7
    13ae:	4413      	add	r3, r2
    13b0:	3328      	adds	r3, #40	; 0x28
    13b2:	687a      	ldr	r2, [r7, #4]
    13b4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    13b6:	bf00      	nop
    13b8:	3714      	adds	r7, #20
    13ba:	46bd      	mov	sp, r7
    13bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c0:	4770      	bx	lr
	...

000013c4 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    13c4:	b580      	push	{r7, lr}
    13c6:	b082      	sub	sp, #8
    13c8:	af00      	add	r7, sp, #0
    13ca:	4603      	mov	r3, r0
    13cc:	6039      	str	r1, [r7, #0]
    13ce:	71fb      	strb	r3, [r7, #7]
    13d0:	4613      	mov	r3, r2
    13d2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    13d4:	79bb      	ldrb	r3, [r7, #6]
    13d6:	2b01      	cmp	r3, #1
    13d8:	d01c      	beq.n	1414 <_gpio_set_direction+0x50>
    13da:	2b02      	cmp	r3, #2
    13dc:	d037      	beq.n	144e <_gpio_set_direction+0x8a>
    13de:	2b00      	cmp	r3, #0
    13e0:	d14e      	bne.n	1480 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    13e2:	79fb      	ldrb	r3, [r7, #7]
    13e4:	683a      	ldr	r2, [r7, #0]
    13e6:	4619      	mov	r1, r3
    13e8:	482a      	ldr	r0, [pc, #168]	; (1494 <_gpio_set_direction+0xd0>)
    13ea:	4b2b      	ldr	r3, [pc, #172]	; (1498 <_gpio_set_direction+0xd4>)
    13ec:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    13ee:	683b      	ldr	r3, [r7, #0]
    13f0:	b29b      	uxth	r3, r3
    13f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    13f6:	79fb      	ldrb	r3, [r7, #7]
    13f8:	4619      	mov	r1, r3
    13fa:	4826      	ldr	r0, [pc, #152]	; (1494 <_gpio_set_direction+0xd0>)
    13fc:	4b27      	ldr	r3, [pc, #156]	; (149c <_gpio_set_direction+0xd8>)
    13fe:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1400:	683b      	ldr	r3, [r7, #0]
    1402:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1404:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1408:	79fb      	ldrb	r3, [r7, #7]
    140a:	4619      	mov	r1, r3
    140c:	4821      	ldr	r0, [pc, #132]	; (1494 <_gpio_set_direction+0xd0>)
    140e:	4b23      	ldr	r3, [pc, #140]	; (149c <_gpio_set_direction+0xd8>)
    1410:	4798      	blx	r3
		break;
    1412:	e03a      	b.n	148a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1414:	79fb      	ldrb	r3, [r7, #7]
    1416:	683a      	ldr	r2, [r7, #0]
    1418:	4619      	mov	r1, r3
    141a:	481e      	ldr	r0, [pc, #120]	; (1494 <_gpio_set_direction+0xd0>)
    141c:	4b1e      	ldr	r3, [pc, #120]	; (1498 <_gpio_set_direction+0xd4>)
    141e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1420:	683b      	ldr	r3, [r7, #0]
    1422:	b29b      	uxth	r3, r3
    1424:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    142c:	79f9      	ldrb	r1, [r7, #7]
    142e:	461a      	mov	r2, r3
    1430:	4818      	ldr	r0, [pc, #96]	; (1494 <_gpio_set_direction+0xd0>)
    1432:	4b1a      	ldr	r3, [pc, #104]	; (149c <_gpio_set_direction+0xd8>)
    1434:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1436:	683b      	ldr	r3, [r7, #0]
    1438:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    143a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    143e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1442:	79f9      	ldrb	r1, [r7, #7]
    1444:	461a      	mov	r2, r3
    1446:	4813      	ldr	r0, [pc, #76]	; (1494 <_gpio_set_direction+0xd0>)
    1448:	4b14      	ldr	r3, [pc, #80]	; (149c <_gpio_set_direction+0xd8>)
    144a:	4798      	blx	r3
		break;
    144c:	e01d      	b.n	148a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    144e:	79fb      	ldrb	r3, [r7, #7]
    1450:	683a      	ldr	r2, [r7, #0]
    1452:	4619      	mov	r1, r3
    1454:	480f      	ldr	r0, [pc, #60]	; (1494 <_gpio_set_direction+0xd0>)
    1456:	4b12      	ldr	r3, [pc, #72]	; (14a0 <_gpio_set_direction+0xdc>)
    1458:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    145a:	683b      	ldr	r3, [r7, #0]
    145c:	b29b      	uxth	r3, r3
    145e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1462:	79fb      	ldrb	r3, [r7, #7]
    1464:	4619      	mov	r1, r3
    1466:	480b      	ldr	r0, [pc, #44]	; (1494 <_gpio_set_direction+0xd0>)
    1468:	4b0c      	ldr	r3, [pc, #48]	; (149c <_gpio_set_direction+0xd8>)
    146a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    146c:	683b      	ldr	r3, [r7, #0]
    146e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1470:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1474:	79fb      	ldrb	r3, [r7, #7]
    1476:	4619      	mov	r1, r3
    1478:	4806      	ldr	r0, [pc, #24]	; (1494 <_gpio_set_direction+0xd0>)
    147a:	4b08      	ldr	r3, [pc, #32]	; (149c <_gpio_set_direction+0xd8>)
    147c:	4798      	blx	r3
		break;
    147e:	e004      	b.n	148a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1480:	2246      	movs	r2, #70	; 0x46
    1482:	4908      	ldr	r1, [pc, #32]	; (14a4 <_gpio_set_direction+0xe0>)
    1484:	2000      	movs	r0, #0
    1486:	4b08      	ldr	r3, [pc, #32]	; (14a8 <_gpio_set_direction+0xe4>)
    1488:	4798      	blx	r3
	}
}
    148a:	bf00      	nop
    148c:	3708      	adds	r7, #8
    148e:	46bd      	mov	sp, r7
    1490:	bd80      	pop	{r7, pc}
    1492:	bf00      	nop
    1494:	41008000 	.word	0x41008000
    1498:	00001183 	.word	0x00001183
    149c:	0000139b 	.word	0x0000139b
    14a0:	0000115b 	.word	0x0000115b
    14a4:	00011abc 	.word	0x00011abc
    14a8:	00003cad 	.word	0x00003cad

000014ac <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    14ac:	b580      	push	{r7, lr}
    14ae:	b082      	sub	sp, #8
    14b0:	af00      	add	r7, sp, #0
    14b2:	4603      	mov	r3, r0
    14b4:	6039      	str	r1, [r7, #0]
    14b6:	71fb      	strb	r3, [r7, #7]
    14b8:	4613      	mov	r3, r2
    14ba:	71bb      	strb	r3, [r7, #6]
	if (level) {
    14bc:	79bb      	ldrb	r3, [r7, #6]
    14be:	2b00      	cmp	r3, #0
    14c0:	d006      	beq.n	14d0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    14c2:	79fb      	ldrb	r3, [r7, #7]
    14c4:	683a      	ldr	r2, [r7, #0]
    14c6:	4619      	mov	r1, r3
    14c8:	4806      	ldr	r0, [pc, #24]	; (14e4 <_gpio_set_level+0x38>)
    14ca:	4b07      	ldr	r3, [pc, #28]	; (14e8 <_gpio_set_level+0x3c>)
    14cc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    14ce:	e005      	b.n	14dc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    14d0:	79fb      	ldrb	r3, [r7, #7]
    14d2:	683a      	ldr	r2, [r7, #0]
    14d4:	4619      	mov	r1, r3
    14d6:	4803      	ldr	r0, [pc, #12]	; (14e4 <_gpio_set_level+0x38>)
    14d8:	4b04      	ldr	r3, [pc, #16]	; (14ec <_gpio_set_level+0x40>)
    14da:	4798      	blx	r3
}
    14dc:	bf00      	nop
    14de:	3708      	adds	r7, #8
    14e0:	46bd      	mov	sp, r7
    14e2:	bd80      	pop	{r7, pc}
    14e4:	41008000 	.word	0x41008000
    14e8:	000011ab 	.word	0x000011ab
    14ec:	000011d3 	.word	0x000011d3

000014f0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    14f0:	b580      	push	{r7, lr}
    14f2:	b082      	sub	sp, #8
    14f4:	af00      	add	r7, sp, #0
    14f6:	4603      	mov	r3, r0
    14f8:	71fb      	strb	r3, [r7, #7]
    14fa:	460b      	mov	r3, r1
    14fc:	71bb      	strb	r3, [r7, #6]
    14fe:	4613      	mov	r3, r2
    1500:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1502:	797b      	ldrb	r3, [r7, #5]
    1504:	2b01      	cmp	r3, #1
    1506:	d00a      	beq.n	151e <_gpio_set_pin_pull_mode+0x2e>
    1508:	2b02      	cmp	r3, #2
    150a:	d01f      	beq.n	154c <_gpio_set_pin_pull_mode+0x5c>
    150c:	2b00      	cmp	r3, #0
    150e:	d134      	bne.n	157a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1510:	79ba      	ldrb	r2, [r7, #6]
    1512:	79fb      	ldrb	r3, [r7, #7]
    1514:	4619      	mov	r1, r3
    1516:	481e      	ldr	r0, [pc, #120]	; (1590 <_gpio_set_pin_pull_mode+0xa0>)
    1518:	4b1e      	ldr	r3, [pc, #120]	; (1594 <_gpio_set_pin_pull_mode+0xa4>)
    151a:	4798      	blx	r3
		break;
    151c:	e033      	b.n	1586 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    151e:	79bb      	ldrb	r3, [r7, #6]
    1520:	2201      	movs	r2, #1
    1522:	409a      	lsls	r2, r3
    1524:	79fb      	ldrb	r3, [r7, #7]
    1526:	4619      	mov	r1, r3
    1528:	4819      	ldr	r0, [pc, #100]	; (1590 <_gpio_set_pin_pull_mode+0xa0>)
    152a:	4b1b      	ldr	r3, [pc, #108]	; (1598 <_gpio_set_pin_pull_mode+0xa8>)
    152c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    152e:	79ba      	ldrb	r2, [r7, #6]
    1530:	79fb      	ldrb	r3, [r7, #7]
    1532:	4619      	mov	r1, r3
    1534:	4816      	ldr	r0, [pc, #88]	; (1590 <_gpio_set_pin_pull_mode+0xa0>)
    1536:	4b19      	ldr	r3, [pc, #100]	; (159c <_gpio_set_pin_pull_mode+0xac>)
    1538:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    153a:	79bb      	ldrb	r3, [r7, #6]
    153c:	2201      	movs	r2, #1
    153e:	409a      	lsls	r2, r3
    1540:	79fb      	ldrb	r3, [r7, #7]
    1542:	4619      	mov	r1, r3
    1544:	4812      	ldr	r0, [pc, #72]	; (1590 <_gpio_set_pin_pull_mode+0xa0>)
    1546:	4b16      	ldr	r3, [pc, #88]	; (15a0 <_gpio_set_pin_pull_mode+0xb0>)
    1548:	4798      	blx	r3
		break;
    154a:	e01c      	b.n	1586 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    154c:	79bb      	ldrb	r3, [r7, #6]
    154e:	2201      	movs	r2, #1
    1550:	409a      	lsls	r2, r3
    1552:	79fb      	ldrb	r3, [r7, #7]
    1554:	4619      	mov	r1, r3
    1556:	480e      	ldr	r0, [pc, #56]	; (1590 <_gpio_set_pin_pull_mode+0xa0>)
    1558:	4b0f      	ldr	r3, [pc, #60]	; (1598 <_gpio_set_pin_pull_mode+0xa8>)
    155a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    155c:	79ba      	ldrb	r2, [r7, #6]
    155e:	79fb      	ldrb	r3, [r7, #7]
    1560:	4619      	mov	r1, r3
    1562:	480b      	ldr	r0, [pc, #44]	; (1590 <_gpio_set_pin_pull_mode+0xa0>)
    1564:	4b0d      	ldr	r3, [pc, #52]	; (159c <_gpio_set_pin_pull_mode+0xac>)
    1566:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1568:	79bb      	ldrb	r3, [r7, #6]
    156a:	2201      	movs	r2, #1
    156c:	409a      	lsls	r2, r3
    156e:	79fb      	ldrb	r3, [r7, #7]
    1570:	4619      	mov	r1, r3
    1572:	4807      	ldr	r0, [pc, #28]	; (1590 <_gpio_set_pin_pull_mode+0xa0>)
    1574:	4b0b      	ldr	r3, [pc, #44]	; (15a4 <_gpio_set_pin_pull_mode+0xb4>)
    1576:	4798      	blx	r3
		break;
    1578:	e005      	b.n	1586 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    157a:	2289      	movs	r2, #137	; 0x89
    157c:	490a      	ldr	r1, [pc, #40]	; (15a8 <_gpio_set_pin_pull_mode+0xb8>)
    157e:	2000      	movs	r0, #0
    1580:	4b0a      	ldr	r3, [pc, #40]	; (15ac <_gpio_set_pin_pull_mode+0xbc>)
    1582:	4798      	blx	r3
		break;
    1584:	bf00      	nop
	}
}
    1586:	bf00      	nop
    1588:	3708      	adds	r7, #8
    158a:	46bd      	mov	sp, r7
    158c:	bd80      	pop	{r7, pc}
    158e:	bf00      	nop
    1590:	41008000 	.word	0x41008000
    1594:	00001357 	.word	0x00001357
    1598:	00001183 	.word	0x00001183
    159c:	00001313 	.word	0x00001313
    15a0:	000011ab 	.word	0x000011ab
    15a4:	000011d3 	.word	0x000011d3
    15a8:	00011abc 	.word	0x00011abc
    15ac:	00003cad 	.word	0x00003cad

000015b0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    15b0:	b590      	push	{r4, r7, lr}
    15b2:	b085      	sub	sp, #20
    15b4:	af00      	add	r7, sp, #0
    15b6:	6078      	str	r0, [r7, #4]
    15b8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	095b      	lsrs	r3, r3, #5
    15be:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    15c0:	687b      	ldr	r3, [r7, #4]
    15c2:	b2db      	uxtb	r3, r3
    15c4:	f003 031f 	and.w	r3, r3, #31
    15c8:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    15ca:	683b      	ldr	r3, [r7, #0]
    15cc:	f1b3 3fff 	cmp.w	r3, #4294967295
    15d0:	d106      	bne.n	15e0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    15d2:	7bba      	ldrb	r2, [r7, #14]
    15d4:	7bf9      	ldrb	r1, [r7, #15]
    15d6:	2300      	movs	r3, #0
    15d8:	4812      	ldr	r0, [pc, #72]	; (1624 <_gpio_set_pin_function+0x74>)
    15da:	4c13      	ldr	r4, [pc, #76]	; (1628 <_gpio_set_pin_function+0x78>)
    15dc:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    15de:	e01d      	b.n	161c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    15e0:	7bba      	ldrb	r2, [r7, #14]
    15e2:	7bf9      	ldrb	r1, [r7, #15]
    15e4:	2301      	movs	r3, #1
    15e6:	480f      	ldr	r0, [pc, #60]	; (1624 <_gpio_set_pin_function+0x74>)
    15e8:	4c0f      	ldr	r4, [pc, #60]	; (1628 <_gpio_set_pin_function+0x78>)
    15ea:	47a0      	blx	r4
		if (pin & 1) {
    15ec:	7bbb      	ldrb	r3, [r7, #14]
    15ee:	f003 0301 	and.w	r3, r3, #1
    15f2:	2b00      	cmp	r3, #0
    15f4:	d009      	beq.n	160a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    15f6:	7bbb      	ldrb	r3, [r7, #14]
    15f8:	085b      	lsrs	r3, r3, #1
    15fa:	b2da      	uxtb	r2, r3
    15fc:	683b      	ldr	r3, [r7, #0]
    15fe:	b2db      	uxtb	r3, r3
    1600:	7bf9      	ldrb	r1, [r7, #15]
    1602:	4808      	ldr	r0, [pc, #32]	; (1624 <_gpio_set_pin_function+0x74>)
    1604:	4c09      	ldr	r4, [pc, #36]	; (162c <_gpio_set_pin_function+0x7c>)
    1606:	47a0      	blx	r4
}
    1608:	e008      	b.n	161c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    160a:	7bbb      	ldrb	r3, [r7, #14]
    160c:	085b      	lsrs	r3, r3, #1
    160e:	b2da      	uxtb	r2, r3
    1610:	683b      	ldr	r3, [r7, #0]
    1612:	b2db      	uxtb	r3, r3
    1614:	7bf9      	ldrb	r1, [r7, #15]
    1616:	4803      	ldr	r0, [pc, #12]	; (1624 <_gpio_set_pin_function+0x74>)
    1618:	4c05      	ldr	r4, [pc, #20]	; (1630 <_gpio_set_pin_function+0x80>)
    161a:	47a0      	blx	r4
}
    161c:	bf00      	nop
    161e:	3714      	adds	r7, #20
    1620:	46bd      	mov	sp, r7
    1622:	bd90      	pop	{r4, r7, pc}
    1624:	41008000 	.word	0x41008000
    1628:	000012b9 	.word	0x000012b9
    162c:	0000125b 	.word	0x0000125b
    1630:	000011fb 	.word	0x000011fb

00001634 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1634:	b580      	push	{r7, lr}
    1636:	b082      	sub	sp, #8
    1638:	af00      	add	r7, sp, #0
    163a:	4603      	mov	r3, r0
    163c:	460a      	mov	r2, r1
    163e:	71fb      	strb	r3, [r7, #7]
    1640:	4613      	mov	r3, r2
    1642:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1644:	79fb      	ldrb	r3, [r7, #7]
    1646:	095b      	lsrs	r3, r3, #5
    1648:	b2d8      	uxtb	r0, r3
    164a:	79fb      	ldrb	r3, [r7, #7]
    164c:	f003 031f 	and.w	r3, r3, #31
    1650:	b2db      	uxtb	r3, r3
    1652:	79ba      	ldrb	r2, [r7, #6]
    1654:	4619      	mov	r1, r3
    1656:	4b03      	ldr	r3, [pc, #12]	; (1664 <gpio_set_pin_pull_mode+0x30>)
    1658:	4798      	blx	r3
}
    165a:	bf00      	nop
    165c:	3708      	adds	r7, #8
    165e:	46bd      	mov	sp, r7
    1660:	bd80      	pop	{r7, pc}
    1662:	bf00      	nop
    1664:	000014f1 	.word	0x000014f1

00001668 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1668:	b580      	push	{r7, lr}
    166a:	b082      	sub	sp, #8
    166c:	af00      	add	r7, sp, #0
    166e:	6078      	str	r0, [r7, #4]
    1670:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1672:	6839      	ldr	r1, [r7, #0]
    1674:	6878      	ldr	r0, [r7, #4]
    1676:	4b03      	ldr	r3, [pc, #12]	; (1684 <gpio_set_pin_function+0x1c>)
    1678:	4798      	blx	r3
}
    167a:	bf00      	nop
    167c:	3708      	adds	r7, #8
    167e:	46bd      	mov	sp, r7
    1680:	bd80      	pop	{r7, pc}
    1682:	bf00      	nop
    1684:	000015b1 	.word	0x000015b1

00001688 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1688:	b580      	push	{r7, lr}
    168a:	b082      	sub	sp, #8
    168c:	af00      	add	r7, sp, #0
    168e:	4603      	mov	r3, r0
    1690:	460a      	mov	r2, r1
    1692:	71fb      	strb	r3, [r7, #7]
    1694:	4613      	mov	r3, r2
    1696:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1698:	79fb      	ldrb	r3, [r7, #7]
    169a:	095b      	lsrs	r3, r3, #5
    169c:	b2d8      	uxtb	r0, r3
    169e:	79fb      	ldrb	r3, [r7, #7]
    16a0:	f003 031f 	and.w	r3, r3, #31
    16a4:	2201      	movs	r2, #1
    16a6:	fa02 f303 	lsl.w	r3, r2, r3
    16aa:	79ba      	ldrb	r2, [r7, #6]
    16ac:	4619      	mov	r1, r3
    16ae:	4b03      	ldr	r3, [pc, #12]	; (16bc <gpio_set_pin_direction+0x34>)
    16b0:	4798      	blx	r3
}
    16b2:	bf00      	nop
    16b4:	3708      	adds	r7, #8
    16b6:	46bd      	mov	sp, r7
    16b8:	bd80      	pop	{r7, pc}
    16ba:	bf00      	nop
    16bc:	000013c5 	.word	0x000013c5

000016c0 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    16c0:	b580      	push	{r7, lr}
    16c2:	b082      	sub	sp, #8
    16c4:	af00      	add	r7, sp, #0
    16c6:	4603      	mov	r3, r0
    16c8:	460a      	mov	r2, r1
    16ca:	71fb      	strb	r3, [r7, #7]
    16cc:	4613      	mov	r3, r2
    16ce:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    16d0:	79fb      	ldrb	r3, [r7, #7]
    16d2:	095b      	lsrs	r3, r3, #5
    16d4:	b2d8      	uxtb	r0, r3
    16d6:	79fb      	ldrb	r3, [r7, #7]
    16d8:	f003 031f 	and.w	r3, r3, #31
    16dc:	2201      	movs	r2, #1
    16de:	fa02 f303 	lsl.w	r3, r2, r3
    16e2:	79ba      	ldrb	r2, [r7, #6]
    16e4:	4619      	mov	r1, r3
    16e6:	4b03      	ldr	r3, [pc, #12]	; (16f4 <gpio_set_pin_level+0x34>)
    16e8:	4798      	blx	r3
}
    16ea:	bf00      	nop
    16ec:	3708      	adds	r7, #8
    16ee:	46bd      	mov	sp, r7
    16f0:	bd80      	pop	{r7, pc}
    16f2:	bf00      	nop
    16f4:	000014ad 	.word	0x000014ad

000016f8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    16f8:	b580      	push	{r7, lr}
    16fa:	af00      	add	r7, sp, #0
	_init_chip();
    16fc:	4b01      	ldr	r3, [pc, #4]	; (1704 <init_mcu+0xc>)
    16fe:	4798      	blx	r3
}
    1700:	bf00      	nop
    1702:	bd80      	pop	{r7, pc}
    1704:	000048bd 	.word	0x000048bd

00001708 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1708:	b580      	push	{r7, lr}
    170a:	b082      	sub	sp, #8
    170c:	af00      	add	r7, sp, #0
    170e:	6078      	str	r0, [r7, #4]
    1710:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1712:	687b      	ldr	r3, [r7, #4]
    1714:	2b00      	cmp	r3, #0
    1716:	d004      	beq.n	1722 <wdt_init+0x1a>
    1718:	683b      	ldr	r3, [r7, #0]
    171a:	2b00      	cmp	r3, #0
    171c:	d001      	beq.n	1722 <wdt_init+0x1a>
    171e:	2301      	movs	r3, #1
    1720:	e000      	b.n	1724 <wdt_init+0x1c>
    1722:	2300      	movs	r3, #0
    1724:	f003 0301 	and.w	r3, r3, #1
    1728:	b2db      	uxtb	r3, r3
    172a:	2248      	movs	r2, #72	; 0x48
    172c:	4907      	ldr	r1, [pc, #28]	; (174c <wdt_init+0x44>)
    172e:	4618      	mov	r0, r3
    1730:	4b07      	ldr	r3, [pc, #28]	; (1750 <wdt_init+0x48>)
    1732:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1734:	687b      	ldr	r3, [r7, #4]
    1736:	683a      	ldr	r2, [r7, #0]
    1738:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    173a:	687b      	ldr	r3, [r7, #4]
    173c:	4618      	mov	r0, r3
    173e:	4b05      	ldr	r3, [pc, #20]	; (1754 <wdt_init+0x4c>)
    1740:	4798      	blx	r3
    1742:	4603      	mov	r3, r0
}
    1744:	4618      	mov	r0, r3
    1746:	3708      	adds	r7, #8
    1748:	46bd      	mov	sp, r7
    174a:	bd80      	pop	{r7, pc}
    174c:	00011ad8 	.word	0x00011ad8
    1750:	00003cad 	.word	0x00003cad
    1754:	0000b6e5 	.word	0x0000b6e5

00001758 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1758:	b580      	push	{r7, lr}
    175a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    175c:	4804      	ldr	r0, [pc, #16]	; (1770 <CRC_CALC_init+0x18>)
    175e:	4b05      	ldr	r3, [pc, #20]	; (1774 <CRC_CALC_init+0x1c>)
    1760:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1762:	4905      	ldr	r1, [pc, #20]	; (1778 <CRC_CALC_init+0x20>)
    1764:	4805      	ldr	r0, [pc, #20]	; (177c <CRC_CALC_init+0x24>)
    1766:	4b06      	ldr	r3, [pc, #24]	; (1780 <CRC_CALC_init+0x28>)
    1768:	4798      	blx	r3
}
    176a:	bf00      	nop
    176c:	bd80      	pop	{r7, pc}
    176e:	bf00      	nop
    1770:	40000800 	.word	0x40000800
    1774:	00000f9b 	.word	0x00000f9b
    1778:	41002000 	.word	0x41002000
    177c:	200080e4 	.word	0x200080e4
    1780:	000024e1 	.word	0x000024e1

00001784 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1784:	b580      	push	{r7, lr}
    1786:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1788:	2244      	movs	r2, #68	; 0x44
    178a:	2104      	movs	r1, #4
    178c:	483f      	ldr	r0, [pc, #252]	; (188c <EXTERNAL_IRQ_0_init+0x108>)
    178e:	4b40      	ldr	r3, [pc, #256]	; (1890 <EXTERNAL_IRQ_0_init+0x10c>)
    1790:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1792:	4840      	ldr	r0, [pc, #256]	; (1894 <EXTERNAL_IRQ_0_init+0x110>)
    1794:	4b40      	ldr	r3, [pc, #256]	; (1898 <EXTERNAL_IRQ_0_init+0x114>)
    1796:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1798:	2101      	movs	r1, #1
    179a:	2040      	movs	r0, #64	; 0x40
    179c:	4b3f      	ldr	r3, [pc, #252]	; (189c <EXTERNAL_IRQ_0_init+0x118>)
    179e:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    17a0:	2100      	movs	r1, #0
    17a2:	2040      	movs	r0, #64	; 0x40
    17a4:	4b3e      	ldr	r3, [pc, #248]	; (18a0 <EXTERNAL_IRQ_0_init+0x11c>)
    17a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    17a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    17ac:	2040      	movs	r0, #64	; 0x40
    17ae:	4b3d      	ldr	r3, [pc, #244]	; (18a4 <EXTERNAL_IRQ_0_init+0x120>)
    17b0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    17b2:	2101      	movs	r1, #1
    17b4:	2021      	movs	r0, #33	; 0x21
    17b6:	4b39      	ldr	r3, [pc, #228]	; (189c <EXTERNAL_IRQ_0_init+0x118>)
    17b8:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    17ba:	2100      	movs	r1, #0
    17bc:	2021      	movs	r0, #33	; 0x21
    17be:	4b38      	ldr	r3, [pc, #224]	; (18a0 <EXTERNAL_IRQ_0_init+0x11c>)
    17c0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    17c2:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    17c6:	2021      	movs	r0, #33	; 0x21
    17c8:	4b36      	ldr	r3, [pc, #216]	; (18a4 <EXTERNAL_IRQ_0_init+0x120>)
    17ca:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    17cc:	2101      	movs	r1, #1
    17ce:	2003      	movs	r0, #3
    17d0:	4b32      	ldr	r3, [pc, #200]	; (189c <EXTERNAL_IRQ_0_init+0x118>)
    17d2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    17d4:	2102      	movs	r1, #2
    17d6:	2003      	movs	r0, #3
    17d8:	4b31      	ldr	r3, [pc, #196]	; (18a0 <EXTERNAL_IRQ_0_init+0x11c>)
    17da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    17dc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    17e0:	2003      	movs	r0, #3
    17e2:	4b30      	ldr	r3, [pc, #192]	; (18a4 <EXTERNAL_IRQ_0_init+0x120>)
    17e4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    17e6:	2101      	movs	r1, #1
    17e8:	2004      	movs	r0, #4
    17ea:	4b2c      	ldr	r3, [pc, #176]	; (189c <EXTERNAL_IRQ_0_init+0x118>)
    17ec:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    17ee:	2102      	movs	r1, #2
    17f0:	2004      	movs	r0, #4
    17f2:	4b2b      	ldr	r3, [pc, #172]	; (18a0 <EXTERNAL_IRQ_0_init+0x11c>)
    17f4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    17f6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    17fa:	2004      	movs	r0, #4
    17fc:	4b29      	ldr	r3, [pc, #164]	; (18a4 <EXTERNAL_IRQ_0_init+0x120>)
    17fe:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1800:	2101      	movs	r1, #1
    1802:	2005      	movs	r0, #5
    1804:	4b25      	ldr	r3, [pc, #148]	; (189c <EXTERNAL_IRQ_0_init+0x118>)
    1806:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1808:	2102      	movs	r1, #2
    180a:	2005      	movs	r0, #5
    180c:	4b24      	ldr	r3, [pc, #144]	; (18a0 <EXTERNAL_IRQ_0_init+0x11c>)
    180e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1810:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1814:	2005      	movs	r0, #5
    1816:	4b23      	ldr	r3, [pc, #140]	; (18a4 <EXTERNAL_IRQ_0_init+0x120>)
    1818:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    181a:	2101      	movs	r1, #1
    181c:	2056      	movs	r0, #86	; 0x56
    181e:	4b1f      	ldr	r3, [pc, #124]	; (189c <EXTERNAL_IRQ_0_init+0x118>)
    1820:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1822:	2102      	movs	r1, #2
    1824:	2056      	movs	r0, #86	; 0x56
    1826:	4b1e      	ldr	r3, [pc, #120]	; (18a0 <EXTERNAL_IRQ_0_init+0x11c>)
    1828:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    182a:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    182e:	2056      	movs	r0, #86	; 0x56
    1830:	4b1c      	ldr	r3, [pc, #112]	; (18a4 <EXTERNAL_IRQ_0_init+0x120>)
    1832:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1834:	2101      	movs	r1, #1
    1836:	2057      	movs	r0, #87	; 0x57
    1838:	4b18      	ldr	r3, [pc, #96]	; (189c <EXTERNAL_IRQ_0_init+0x118>)
    183a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    183c:	2102      	movs	r1, #2
    183e:	2057      	movs	r0, #87	; 0x57
    1840:	4b17      	ldr	r3, [pc, #92]	; (18a0 <EXTERNAL_IRQ_0_init+0x11c>)
    1842:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1844:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1848:	2057      	movs	r0, #87	; 0x57
    184a:	4b16      	ldr	r3, [pc, #88]	; (18a4 <EXTERNAL_IRQ_0_init+0x120>)
    184c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    184e:	2101      	movs	r1, #1
    1850:	2028      	movs	r0, #40	; 0x28
    1852:	4b12      	ldr	r3, [pc, #72]	; (189c <EXTERNAL_IRQ_0_init+0x118>)
    1854:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1856:	2100      	movs	r1, #0
    1858:	2028      	movs	r0, #40	; 0x28
    185a:	4b11      	ldr	r3, [pc, #68]	; (18a0 <EXTERNAL_IRQ_0_init+0x11c>)
    185c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    185e:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1862:	2028      	movs	r0, #40	; 0x28
    1864:	4b0f      	ldr	r3, [pc, #60]	; (18a4 <EXTERNAL_IRQ_0_init+0x120>)
    1866:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1868:	2101      	movs	r1, #1
    186a:	2029      	movs	r0, #41	; 0x29
    186c:	4b0b      	ldr	r3, [pc, #44]	; (189c <EXTERNAL_IRQ_0_init+0x118>)
    186e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1870:	2100      	movs	r1, #0
    1872:	2029      	movs	r0, #41	; 0x29
    1874:	4b0a      	ldr	r3, [pc, #40]	; (18a0 <EXTERNAL_IRQ_0_init+0x11c>)
    1876:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1878:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    187c:	2029      	movs	r0, #41	; 0x29
    187e:	4b09      	ldr	r3, [pc, #36]	; (18a4 <EXTERNAL_IRQ_0_init+0x120>)
    1880:	4798      	blx	r3

	ext_irq_init();
    1882:	4b09      	ldr	r3, [pc, #36]	; (18a8 <EXTERNAL_IRQ_0_init+0x124>)
    1884:	4798      	blx	r3
}
    1886:	bf00      	nop
    1888:	bd80      	pop	{r7, pc}
    188a:	bf00      	nop
    188c:	40001c00 	.word	0x40001c00
    1890:	00000e35 	.word	0x00000e35
    1894:	40000800 	.word	0x40000800
    1898:	00000f1b 	.word	0x00000f1b
    189c:	00001689 	.word	0x00001689
    18a0:	00001635 	.word	0x00001635
    18a4:	00001669 	.word	0x00001669
    18a8:	000025a9 	.word	0x000025a9

000018ac <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18b0:	2244      	movs	r2, #68	; 0x44
    18b2:	210b      	movs	r1, #11
    18b4:	4807      	ldr	r0, [pc, #28]	; (18d4 <EVENT_SYSTEM_0_init+0x28>)
    18b6:	4b08      	ldr	r3, [pc, #32]	; (18d8 <EVENT_SYSTEM_0_init+0x2c>)
    18b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18ba:	2244      	movs	r2, #68	; 0x44
    18bc:	210c      	movs	r1, #12
    18be:	4805      	ldr	r0, [pc, #20]	; (18d4 <EVENT_SYSTEM_0_init+0x28>)
    18c0:	4b05      	ldr	r3, [pc, #20]	; (18d8 <EVENT_SYSTEM_0_init+0x2c>)
    18c2:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    18c4:	4805      	ldr	r0, [pc, #20]	; (18dc <EVENT_SYSTEM_0_init+0x30>)
    18c6:	4b06      	ldr	r3, [pc, #24]	; (18e0 <EVENT_SYSTEM_0_init+0x34>)
    18c8:	4798      	blx	r3

	event_system_init();
    18ca:	4b06      	ldr	r3, [pc, #24]	; (18e4 <EVENT_SYSTEM_0_init+0x38>)
    18cc:	4798      	blx	r3
}
    18ce:	bf00      	nop
    18d0:	bd80      	pop	{r7, pc}
    18d2:	bf00      	nop
    18d4:	40001c00 	.word	0x40001c00
    18d8:	00000e35 	.word	0x00000e35
    18dc:	40000800 	.word	0x40000800
    18e0:	00000fbb 	.word	0x00000fbb
    18e4:	00002595 	.word	0x00002595

000018e8 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    18e8:	b580      	push	{r7, lr}
    18ea:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    18ec:	2101      	movs	r1, #1
    18ee:	202b      	movs	r0, #43	; 0x2b
    18f0:	4b2b      	ldr	r3, [pc, #172]	; (19a0 <QSPI_N25Q256_PORT_init+0xb8>)
    18f2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    18f4:	2100      	movs	r1, #0
    18f6:	202b      	movs	r0, #43	; 0x2b
    18f8:	4b2a      	ldr	r3, [pc, #168]	; (19a4 <QSPI_N25Q256_PORT_init+0xbc>)
    18fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    18fc:	492a      	ldr	r1, [pc, #168]	; (19a8 <QSPI_N25Q256_PORT_init+0xc0>)
    18fe:	202b      	movs	r0, #43	; 0x2b
    1900:	4b2a      	ldr	r3, [pc, #168]	; (19ac <QSPI_N25Q256_PORT_init+0xc4>)
    1902:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1904:	2102      	movs	r1, #2
    1906:	2008      	movs	r0, #8
    1908:	4b25      	ldr	r3, [pc, #148]	; (19a0 <QSPI_N25Q256_PORT_init+0xb8>)
    190a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    190c:	2100      	movs	r1, #0
    190e:	2008      	movs	r0, #8
    1910:	4b27      	ldr	r3, [pc, #156]	; (19b0 <QSPI_N25Q256_PORT_init+0xc8>)
    1912:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1914:	2100      	movs	r1, #0
    1916:	2008      	movs	r0, #8
    1918:	4b22      	ldr	r3, [pc, #136]	; (19a4 <QSPI_N25Q256_PORT_init+0xbc>)
    191a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    191c:	4925      	ldr	r1, [pc, #148]	; (19b4 <QSPI_N25Q256_PORT_init+0xcc>)
    191e:	2008      	movs	r0, #8
    1920:	4b22      	ldr	r3, [pc, #136]	; (19ac <QSPI_N25Q256_PORT_init+0xc4>)
    1922:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1924:	2102      	movs	r1, #2
    1926:	2009      	movs	r0, #9
    1928:	4b1d      	ldr	r3, [pc, #116]	; (19a0 <QSPI_N25Q256_PORT_init+0xb8>)
    192a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    192c:	2100      	movs	r1, #0
    192e:	2009      	movs	r0, #9
    1930:	4b1f      	ldr	r3, [pc, #124]	; (19b0 <QSPI_N25Q256_PORT_init+0xc8>)
    1932:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1934:	2100      	movs	r1, #0
    1936:	2009      	movs	r0, #9
    1938:	4b1a      	ldr	r3, [pc, #104]	; (19a4 <QSPI_N25Q256_PORT_init+0xbc>)
    193a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    193c:	491e      	ldr	r1, [pc, #120]	; (19b8 <QSPI_N25Q256_PORT_init+0xd0>)
    193e:	2009      	movs	r0, #9
    1940:	4b1a      	ldr	r3, [pc, #104]	; (19ac <QSPI_N25Q256_PORT_init+0xc4>)
    1942:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1944:	2102      	movs	r1, #2
    1946:	200a      	movs	r0, #10
    1948:	4b15      	ldr	r3, [pc, #84]	; (19a0 <QSPI_N25Q256_PORT_init+0xb8>)
    194a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    194c:	2100      	movs	r1, #0
    194e:	200a      	movs	r0, #10
    1950:	4b17      	ldr	r3, [pc, #92]	; (19b0 <QSPI_N25Q256_PORT_init+0xc8>)
    1952:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1954:	2100      	movs	r1, #0
    1956:	200a      	movs	r0, #10
    1958:	4b12      	ldr	r3, [pc, #72]	; (19a4 <QSPI_N25Q256_PORT_init+0xbc>)
    195a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    195c:	4917      	ldr	r1, [pc, #92]	; (19bc <QSPI_N25Q256_PORT_init+0xd4>)
    195e:	200a      	movs	r0, #10
    1960:	4b12      	ldr	r3, [pc, #72]	; (19ac <QSPI_N25Q256_PORT_init+0xc4>)
    1962:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1964:	2102      	movs	r1, #2
    1966:	200b      	movs	r0, #11
    1968:	4b0d      	ldr	r3, [pc, #52]	; (19a0 <QSPI_N25Q256_PORT_init+0xb8>)
    196a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    196c:	2100      	movs	r1, #0
    196e:	200b      	movs	r0, #11
    1970:	4b0f      	ldr	r3, [pc, #60]	; (19b0 <QSPI_N25Q256_PORT_init+0xc8>)
    1972:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1974:	2100      	movs	r1, #0
    1976:	200b      	movs	r0, #11
    1978:	4b0a      	ldr	r3, [pc, #40]	; (19a4 <QSPI_N25Q256_PORT_init+0xbc>)
    197a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    197c:	4910      	ldr	r1, [pc, #64]	; (19c0 <QSPI_N25Q256_PORT_init+0xd8>)
    197e:	200b      	movs	r0, #11
    1980:	4b0a      	ldr	r3, [pc, #40]	; (19ac <QSPI_N25Q256_PORT_init+0xc4>)
    1982:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1984:	2101      	movs	r1, #1
    1986:	202a      	movs	r0, #42	; 0x2a
    1988:	4b05      	ldr	r3, [pc, #20]	; (19a0 <QSPI_N25Q256_PORT_init+0xb8>)
    198a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    198c:	2100      	movs	r1, #0
    198e:	202a      	movs	r0, #42	; 0x2a
    1990:	4b04      	ldr	r3, [pc, #16]	; (19a4 <QSPI_N25Q256_PORT_init+0xbc>)
    1992:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1994:	490b      	ldr	r1, [pc, #44]	; (19c4 <QSPI_N25Q256_PORT_init+0xdc>)
    1996:	202a      	movs	r0, #42	; 0x2a
    1998:	4b04      	ldr	r3, [pc, #16]	; (19ac <QSPI_N25Q256_PORT_init+0xc4>)
    199a:	4798      	blx	r3
}
    199c:	bf00      	nop
    199e:	bd80      	pop	{r7, pc}
    19a0:	00001689 	.word	0x00001689
    19a4:	00001635 	.word	0x00001635
    19a8:	002b0007 	.word	0x002b0007
    19ac:	00001669 	.word	0x00001669
    19b0:	000016c1 	.word	0x000016c1
    19b4:	00080007 	.word	0x00080007
    19b8:	00090007 	.word	0x00090007
    19bc:	000a0007 	.word	0x000a0007
    19c0:	000b0007 	.word	0x000b0007
    19c4:	002a0007 	.word	0x002a0007

000019c8 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    19c8:	b580      	push	{r7, lr}
    19ca:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    19cc:	4805      	ldr	r0, [pc, #20]	; (19e4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    19ce:	4b06      	ldr	r3, [pc, #24]	; (19e8 <QSPI_N25Q256_CLOCK_init+0x20>)
    19d0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    19d2:	4804      	ldr	r0, [pc, #16]	; (19e4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    19d4:	4b05      	ldr	r3, [pc, #20]	; (19ec <QSPI_N25Q256_CLOCK_init+0x24>)
    19d6:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    19d8:	4802      	ldr	r0, [pc, #8]	; (19e4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    19da:	4b05      	ldr	r3, [pc, #20]	; (19f0 <QSPI_N25Q256_CLOCK_init+0x28>)
    19dc:	4798      	blx	r3
}
    19de:	bf00      	nop
    19e0:	bd80      	pop	{r7, pc}
    19e2:	bf00      	nop
    19e4:	40000800 	.word	0x40000800
    19e8:	00000e7b 	.word	0x00000e7b
    19ec:	00000ebb 	.word	0x00000ebb
    19f0:	0000107b 	.word	0x0000107b

000019f4 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    19f4:	b580      	push	{r7, lr}
    19f6:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    19f8:	4b04      	ldr	r3, [pc, #16]	; (1a0c <QSPI_N25Q256_init+0x18>)
    19fa:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    19fc:	4904      	ldr	r1, [pc, #16]	; (1a10 <QSPI_N25Q256_init+0x1c>)
    19fe:	4805      	ldr	r0, [pc, #20]	; (1a14 <QSPI_N25Q256_init+0x20>)
    1a00:	4b05      	ldr	r3, [pc, #20]	; (1a18 <QSPI_N25Q256_init+0x24>)
    1a02:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1a04:	4b05      	ldr	r3, [pc, #20]	; (1a1c <QSPI_N25Q256_init+0x28>)
    1a06:	4798      	blx	r3
}
    1a08:	bf00      	nop
    1a0a:	bd80      	pop	{r7, pc}
    1a0c:	000019c9 	.word	0x000019c9
    1a10:	42003400 	.word	0x42003400
    1a14:	20007f58 	.word	0x20007f58
    1a18:	00002bc9 	.word	0x00002bc9
    1a1c:	000018e9 	.word	0x000018e9

00001a20 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1a20:	b580      	push	{r7, lr}
    1a22:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1a24:	4802      	ldr	r0, [pc, #8]	; (1a30 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1a26:	4b03      	ldr	r3, [pc, #12]	; (1a34 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1a28:	4798      	blx	r3
}
    1a2a:	bf00      	nop
    1a2c:	bd80      	pop	{r7, pc}
    1a2e:	bf00      	nop
    1a30:	40000800 	.word	0x40000800
    1a34:	00000efb 	.word	0x00000efb

00001a38 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1a38:	b580      	push	{r7, lr}
    1a3a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1a3c:	4b03      	ldr	r3, [pc, #12]	; (1a4c <DATETIME_CLOCK_init+0x14>)
    1a3e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1a40:	4903      	ldr	r1, [pc, #12]	; (1a50 <DATETIME_CLOCK_init+0x18>)
    1a42:	4804      	ldr	r0, [pc, #16]	; (1a54 <DATETIME_CLOCK_init+0x1c>)
    1a44:	4b04      	ldr	r3, [pc, #16]	; (1a58 <DATETIME_CLOCK_init+0x20>)
    1a46:	4798      	blx	r3
}
    1a48:	bf00      	nop
    1a4a:	bd80      	pop	{r7, pc}
    1a4c:	00001a21 	.word	0x00001a21
    1a50:	40002400 	.word	0x40002400
    1a54:	200080c0 	.word	0x200080c0
    1a58:	00002385 	.word	0x00002385

00001a5c <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    1a5c:	b580      	push	{r7, lr}
    1a5e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1a60:	2100      	movs	r1, #0
    1a62:	2010      	movs	r0, #16
    1a64:	4b07      	ldr	r3, [pc, #28]	; (1a84 <I2C_SHARED_PORT_init+0x28>)
    1a66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1a68:	4907      	ldr	r1, [pc, #28]	; (1a88 <I2C_SHARED_PORT_init+0x2c>)
    1a6a:	2010      	movs	r0, #16
    1a6c:	4b07      	ldr	r3, [pc, #28]	; (1a8c <I2C_SHARED_PORT_init+0x30>)
    1a6e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1a70:	2100      	movs	r1, #0
    1a72:	2011      	movs	r0, #17
    1a74:	4b03      	ldr	r3, [pc, #12]	; (1a84 <I2C_SHARED_PORT_init+0x28>)
    1a76:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1a78:	4905      	ldr	r1, [pc, #20]	; (1a90 <I2C_SHARED_PORT_init+0x34>)
    1a7a:	2011      	movs	r0, #17
    1a7c:	4b03      	ldr	r3, [pc, #12]	; (1a8c <I2C_SHARED_PORT_init+0x30>)
    1a7e:	4798      	blx	r3
}
    1a80:	bf00      	nop
    1a82:	bd80      	pop	{r7, pc}
    1a84:	00001635 	.word	0x00001635
    1a88:	00100002 	.word	0x00100002
    1a8c:	00001669 	.word	0x00001669
    1a90:	00110002 	.word	0x00110002

00001a94 <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    1a94:	b580      	push	{r7, lr}
    1a96:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a98:	2245      	movs	r2, #69	; 0x45
    1a9a:	2108      	movs	r1, #8
    1a9c:	4806      	ldr	r0, [pc, #24]	; (1ab8 <I2C_SHARED_CLOCK_init+0x24>)
    1a9e:	4b07      	ldr	r3, [pc, #28]	; (1abc <I2C_SHARED_CLOCK_init+0x28>)
    1aa0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1aa2:	224a      	movs	r2, #74	; 0x4a
    1aa4:	2103      	movs	r1, #3
    1aa6:	4804      	ldr	r0, [pc, #16]	; (1ab8 <I2C_SHARED_CLOCK_init+0x24>)
    1aa8:	4b04      	ldr	r3, [pc, #16]	; (1abc <I2C_SHARED_CLOCK_init+0x28>)
    1aaa:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1aac:	4804      	ldr	r0, [pc, #16]	; (1ac0 <I2C_SHARED_CLOCK_init+0x2c>)
    1aae:	4b05      	ldr	r3, [pc, #20]	; (1ac4 <I2C_SHARED_CLOCK_init+0x30>)
    1ab0:	4798      	blx	r3
}
    1ab2:	bf00      	nop
    1ab4:	bd80      	pop	{r7, pc}
    1ab6:	bf00      	nop
    1ab8:	40001c00 	.word	0x40001c00
    1abc:	00000e35 	.word	0x00000e35
    1ac0:	40000800 	.word	0x40000800
    1ac4:	00000f3b 	.word	0x00000f3b

00001ac8 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    1ac8:	b580      	push	{r7, lr}
    1aca:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    1acc:	4b04      	ldr	r3, [pc, #16]	; (1ae0 <I2C_SHARED_init+0x18>)
    1ace:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM1);
    1ad0:	4904      	ldr	r1, [pc, #16]	; (1ae4 <I2C_SHARED_init+0x1c>)
    1ad2:	4805      	ldr	r0, [pc, #20]	; (1ae8 <I2C_SHARED_init+0x20>)
    1ad4:	4b05      	ldr	r3, [pc, #20]	; (1aec <I2C_SHARED_init+0x24>)
    1ad6:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    1ad8:	4b05      	ldr	r3, [pc, #20]	; (1af0 <I2C_SHARED_init+0x28>)
    1ada:	4798      	blx	r3
}
    1adc:	bf00      	nop
    1ade:	bd80      	pop	{r7, pc}
    1ae0:	00001a95 	.word	0x00001a95
    1ae4:	40003400 	.word	0x40003400
    1ae8:	20008040 	.word	0x20008040
    1aec:	00002a41 	.word	0x00002a41
    1af0:	00001a5d 	.word	0x00001a5d

00001af4 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1af4:	b580      	push	{r7, lr}
    1af6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1af8:	2100      	movs	r1, #0
    1afa:	203b      	movs	r0, #59	; 0x3b
    1afc:	4b11      	ldr	r3, [pc, #68]	; (1b44 <SPI_TEMP_PORT_init+0x50>)
    1afe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1b00:	2102      	movs	r1, #2
    1b02:	203b      	movs	r0, #59	; 0x3b
    1b04:	4b10      	ldr	r3, [pc, #64]	; (1b48 <SPI_TEMP_PORT_init+0x54>)
    1b06:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1b08:	4910      	ldr	r1, [pc, #64]	; (1b4c <SPI_TEMP_PORT_init+0x58>)
    1b0a:	203b      	movs	r0, #59	; 0x3b
    1b0c:	4b10      	ldr	r3, [pc, #64]	; (1b50 <SPI_TEMP_PORT_init+0x5c>)
    1b0e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1b10:	2100      	movs	r1, #0
    1b12:	203a      	movs	r0, #58	; 0x3a
    1b14:	4b0b      	ldr	r3, [pc, #44]	; (1b44 <SPI_TEMP_PORT_init+0x50>)
    1b16:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1b18:	2102      	movs	r1, #2
    1b1a:	203a      	movs	r0, #58	; 0x3a
    1b1c:	4b0a      	ldr	r3, [pc, #40]	; (1b48 <SPI_TEMP_PORT_init+0x54>)
    1b1e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1b20:	490c      	ldr	r1, [pc, #48]	; (1b54 <SPI_TEMP_PORT_init+0x60>)
    1b22:	203a      	movs	r0, #58	; 0x3a
    1b24:	4b0a      	ldr	r3, [pc, #40]	; (1b50 <SPI_TEMP_PORT_init+0x5c>)
    1b26:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1b28:	2101      	movs	r1, #1
    1b2a:	203c      	movs	r0, #60	; 0x3c
    1b2c:	4b06      	ldr	r3, [pc, #24]	; (1b48 <SPI_TEMP_PORT_init+0x54>)
    1b2e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1b30:	2100      	movs	r1, #0
    1b32:	203c      	movs	r0, #60	; 0x3c
    1b34:	4b08      	ldr	r3, [pc, #32]	; (1b58 <SPI_TEMP_PORT_init+0x64>)
    1b36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1b38:	4908      	ldr	r1, [pc, #32]	; (1b5c <SPI_TEMP_PORT_init+0x68>)
    1b3a:	203c      	movs	r0, #60	; 0x3c
    1b3c:	4b04      	ldr	r3, [pc, #16]	; (1b50 <SPI_TEMP_PORT_init+0x5c>)
    1b3e:	4798      	blx	r3
}
    1b40:	bf00      	nop
    1b42:	bd80      	pop	{r7, pc}
    1b44:	000016c1 	.word	0x000016c1
    1b48:	00001689 	.word	0x00001689
    1b4c:	003b0003 	.word	0x003b0003
    1b50:	00001669 	.word	0x00001669
    1b54:	003a0003 	.word	0x003a0003
    1b58:	00001635 	.word	0x00001635
    1b5c:	003c0003 	.word	0x003c0003

00001b60 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1b60:	b580      	push	{r7, lr}
    1b62:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b64:	2245      	movs	r2, #69	; 0x45
    1b66:	2122      	movs	r1, #34	; 0x22
    1b68:	4806      	ldr	r0, [pc, #24]	; (1b84 <SPI_TEMP_CLOCK_init+0x24>)
    1b6a:	4b07      	ldr	r3, [pc, #28]	; (1b88 <SPI_TEMP_CLOCK_init+0x28>)
    1b6c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b6e:	224a      	movs	r2, #74	; 0x4a
    1b70:	2103      	movs	r1, #3
    1b72:	4804      	ldr	r0, [pc, #16]	; (1b84 <SPI_TEMP_CLOCK_init+0x24>)
    1b74:	4b04      	ldr	r3, [pc, #16]	; (1b88 <SPI_TEMP_CLOCK_init+0x28>)
    1b76:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1b78:	4804      	ldr	r0, [pc, #16]	; (1b8c <SPI_TEMP_CLOCK_init+0x2c>)
    1b7a:	4b05      	ldr	r3, [pc, #20]	; (1b90 <SPI_TEMP_CLOCK_init+0x30>)
    1b7c:	4798      	blx	r3
}
    1b7e:	bf00      	nop
    1b80:	bd80      	pop	{r7, pc}
    1b82:	bf00      	nop
    1b84:	40001c00 	.word	0x40001c00
    1b88:	00000e35 	.word	0x00000e35
    1b8c:	40000800 	.word	0x40000800
    1b90:	0000109b 	.word	0x0000109b

00001b94 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1b98:	4b05      	ldr	r3, [pc, #20]	; (1bb0 <SPI_TEMP_init+0x1c>)
    1b9a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1b9c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1ba0:	4804      	ldr	r0, [pc, #16]	; (1bb4 <SPI_TEMP_init+0x20>)
    1ba2:	4b05      	ldr	r3, [pc, #20]	; (1bb8 <SPI_TEMP_init+0x24>)
    1ba4:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1ba6:	4b05      	ldr	r3, [pc, #20]	; (1bbc <SPI_TEMP_init+0x28>)
    1ba8:	4798      	blx	r3
}
    1baa:	bf00      	nop
    1bac:	bd80      	pop	{r7, pc}
    1bae:	bf00      	nop
    1bb0:	00001b61 	.word	0x00001b61
    1bb4:	20007f20 	.word	0x20007f20
    1bb8:	00002cd9 	.word	0x00002cd9
    1bbc:	00001af5 	.word	0x00001af5

00001bc0 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    1bc0:	b580      	push	{r7, lr}
    1bc2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1bc4:	2100      	movs	r1, #0
    1bc6:	2017      	movs	r0, #23
    1bc8:	4b07      	ldr	r3, [pc, #28]	; (1be8 <I2C_EXPANDER_PORT_init+0x28>)
    1bca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1bcc:	4907      	ldr	r1, [pc, #28]	; (1bec <I2C_EXPANDER_PORT_init+0x2c>)
    1bce:	2017      	movs	r0, #23
    1bd0:	4b07      	ldr	r3, [pc, #28]	; (1bf0 <I2C_EXPANDER_PORT_init+0x30>)
    1bd2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1bd4:	2100      	movs	r1, #0
    1bd6:	2016      	movs	r0, #22
    1bd8:	4b03      	ldr	r3, [pc, #12]	; (1be8 <I2C_EXPANDER_PORT_init+0x28>)
    1bda:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1bdc:	4905      	ldr	r1, [pc, #20]	; (1bf4 <I2C_EXPANDER_PORT_init+0x34>)
    1bde:	2016      	movs	r0, #22
    1be0:	4b03      	ldr	r3, [pc, #12]	; (1bf0 <I2C_EXPANDER_PORT_init+0x30>)
    1be2:	4798      	blx	r3
}
    1be4:	bf00      	nop
    1be6:	bd80      	pop	{r7, pc}
    1be8:	00001635 	.word	0x00001635
    1bec:	00170003 	.word	0x00170003
    1bf0:	00001669 	.word	0x00001669
    1bf4:	00160003 	.word	0x00160003

00001bf8 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    1bf8:	b580      	push	{r7, lr}
    1bfa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1bfc:	2244      	movs	r2, #68	; 0x44
    1bfe:	2123      	movs	r1, #35	; 0x23
    1c00:	4806      	ldr	r0, [pc, #24]	; (1c1c <I2C_EXPANDER_CLOCK_init+0x24>)
    1c02:	4b07      	ldr	r3, [pc, #28]	; (1c20 <I2C_EXPANDER_CLOCK_init+0x28>)
    1c04:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c06:	224a      	movs	r2, #74	; 0x4a
    1c08:	2103      	movs	r1, #3
    1c0a:	4804      	ldr	r0, [pc, #16]	; (1c1c <I2C_EXPANDER_CLOCK_init+0x24>)
    1c0c:	4b04      	ldr	r3, [pc, #16]	; (1c20 <I2C_EXPANDER_CLOCK_init+0x28>)
    1c0e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1c10:	4804      	ldr	r0, [pc, #16]	; (1c24 <I2C_EXPANDER_CLOCK_init+0x2c>)
    1c12:	4b05      	ldr	r3, [pc, #20]	; (1c28 <I2C_EXPANDER_CLOCK_init+0x30>)
    1c14:	4798      	blx	r3
}
    1c16:	bf00      	nop
    1c18:	bd80      	pop	{r7, pc}
    1c1a:	bf00      	nop
    1c1c:	40001c00 	.word	0x40001c00
    1c20:	00000e35 	.word	0x00000e35
    1c24:	40000800 	.word	0x40000800
    1c28:	000010bb 	.word	0x000010bb

00001c2c <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1c30:	4b04      	ldr	r3, [pc, #16]	; (1c44 <I2C_EXPANDER_init+0x18>)
    1c32:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    1c34:	4904      	ldr	r1, [pc, #16]	; (1c48 <I2C_EXPANDER_init+0x1c>)
    1c36:	4805      	ldr	r0, [pc, #20]	; (1c4c <I2C_EXPANDER_init+0x20>)
    1c38:	4b05      	ldr	r3, [pc, #20]	; (1c50 <I2C_EXPANDER_init+0x24>)
    1c3a:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1c3c:	4b05      	ldr	r3, [pc, #20]	; (1c54 <I2C_EXPANDER_init+0x28>)
    1c3e:	4798      	blx	r3
}
    1c40:	bf00      	nop
    1c42:	bd80      	pop	{r7, pc}
    1c44:	00001bf9 	.word	0x00001bf9
    1c48:	43000400 	.word	0x43000400
    1c4c:	20008020 	.word	0x20008020
    1c50:	00002a41 	.word	0x00002a41
    1c54:	00001bc1 	.word	0x00001bc1

00001c58 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1c58:	b580      	push	{r7, lr}
    1c5a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1c5c:	2100      	movs	r1, #0
    1c5e:	2044      	movs	r0, #68	; 0x44
    1c60:	4b11      	ldr	r3, [pc, #68]	; (1ca8 <SPI_HI3593_PORT_init+0x50>)
    1c62:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1c64:	2102      	movs	r1, #2
    1c66:	2044      	movs	r0, #68	; 0x44
    1c68:	4b10      	ldr	r3, [pc, #64]	; (1cac <SPI_HI3593_PORT_init+0x54>)
    1c6a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1c6c:	4910      	ldr	r1, [pc, #64]	; (1cb0 <SPI_HI3593_PORT_init+0x58>)
    1c6e:	2044      	movs	r0, #68	; 0x44
    1c70:	4b10      	ldr	r3, [pc, #64]	; (1cb4 <SPI_HI3593_PORT_init+0x5c>)
    1c72:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1c74:	2100      	movs	r1, #0
    1c76:	2045      	movs	r0, #69	; 0x45
    1c78:	4b0b      	ldr	r3, [pc, #44]	; (1ca8 <SPI_HI3593_PORT_init+0x50>)
    1c7a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1c7c:	2102      	movs	r1, #2
    1c7e:	2045      	movs	r0, #69	; 0x45
    1c80:	4b0a      	ldr	r3, [pc, #40]	; (1cac <SPI_HI3593_PORT_init+0x54>)
    1c82:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1c84:	490c      	ldr	r1, [pc, #48]	; (1cb8 <SPI_HI3593_PORT_init+0x60>)
    1c86:	2045      	movs	r0, #69	; 0x45
    1c88:	4b0a      	ldr	r3, [pc, #40]	; (1cb4 <SPI_HI3593_PORT_init+0x5c>)
    1c8a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1c8c:	2101      	movs	r1, #1
    1c8e:	2047      	movs	r0, #71	; 0x47
    1c90:	4b06      	ldr	r3, [pc, #24]	; (1cac <SPI_HI3593_PORT_init+0x54>)
    1c92:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1c94:	2100      	movs	r1, #0
    1c96:	2047      	movs	r0, #71	; 0x47
    1c98:	4b08      	ldr	r3, [pc, #32]	; (1cbc <SPI_HI3593_PORT_init+0x64>)
    1c9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1c9c:	4908      	ldr	r1, [pc, #32]	; (1cc0 <SPI_HI3593_PORT_init+0x68>)
    1c9e:	2047      	movs	r0, #71	; 0x47
    1ca0:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <SPI_HI3593_PORT_init+0x5c>)
    1ca2:	4798      	blx	r3
}
    1ca4:	bf00      	nop
    1ca6:	bd80      	pop	{r7, pc}
    1ca8:	000016c1 	.word	0x000016c1
    1cac:	00001689 	.word	0x00001689
    1cb0:	00440002 	.word	0x00440002
    1cb4:	00001669 	.word	0x00001669
    1cb8:	00450002 	.word	0x00450002
    1cbc:	00001635 	.word	0x00001635
    1cc0:	00470002 	.word	0x00470002

00001cc4 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cc8:	2242      	movs	r2, #66	; 0x42
    1cca:	2124      	movs	r1, #36	; 0x24
    1ccc:	4806      	ldr	r0, [pc, #24]	; (1ce8 <SPI_HI3593_CLOCK_init+0x24>)
    1cce:	4b07      	ldr	r3, [pc, #28]	; (1cec <SPI_HI3593_CLOCK_init+0x28>)
    1cd0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cd2:	224a      	movs	r2, #74	; 0x4a
    1cd4:	2103      	movs	r1, #3
    1cd6:	4804      	ldr	r0, [pc, #16]	; (1ce8 <SPI_HI3593_CLOCK_init+0x24>)
    1cd8:	4b04      	ldr	r3, [pc, #16]	; (1cec <SPI_HI3593_CLOCK_init+0x28>)
    1cda:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1cdc:	4804      	ldr	r0, [pc, #16]	; (1cf0 <SPI_HI3593_CLOCK_init+0x2c>)
    1cde:	4b05      	ldr	r3, [pc, #20]	; (1cf4 <SPI_HI3593_CLOCK_init+0x30>)
    1ce0:	4798      	blx	r3
}
    1ce2:	bf00      	nop
    1ce4:	bd80      	pop	{r7, pc}
    1ce6:	bf00      	nop
    1ce8:	40001c00 	.word	0x40001c00
    1cec:	00000e35 	.word	0x00000e35
    1cf0:	40000800 	.word	0x40000800
    1cf4:	000010db 	.word	0x000010db

00001cf8 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1cf8:	b580      	push	{r7, lr}
    1cfa:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1cfc:	4b04      	ldr	r3, [pc, #16]	; (1d10 <SPI_HI3593_init+0x18>)
    1cfe:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1d00:	4904      	ldr	r1, [pc, #16]	; (1d14 <SPI_HI3593_init+0x1c>)
    1d02:	4805      	ldr	r0, [pc, #20]	; (1d18 <SPI_HI3593_init+0x20>)
    1d04:	4b05      	ldr	r3, [pc, #20]	; (1d1c <SPI_HI3593_init+0x24>)
    1d06:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1d08:	4b05      	ldr	r3, [pc, #20]	; (1d20 <SPI_HI3593_init+0x28>)
    1d0a:	4798      	blx	r3
}
    1d0c:	bf00      	nop
    1d0e:	bd80      	pop	{r7, pc}
    1d10:	00001cc5 	.word	0x00001cc5
    1d14:	43000800 	.word	0x43000800
    1d18:	20007f08 	.word	0x20007f08
    1d1c:	00002cd9 	.word	0x00002cd9
    1d20:	00001c59 	.word	0x00001c59

00001d24 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1d24:	b580      	push	{r7, lr}
    1d26:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1d28:	2100      	movs	r1, #0
    1d2a:	2068      	movs	r0, #104	; 0x68
    1d2c:	4b07      	ldr	r3, [pc, #28]	; (1d4c <I2C_EEPROM_PORT_init+0x28>)
    1d2e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1d30:	4907      	ldr	r1, [pc, #28]	; (1d50 <I2C_EEPROM_PORT_init+0x2c>)
    1d32:	2068      	movs	r0, #104	; 0x68
    1d34:	4b07      	ldr	r3, [pc, #28]	; (1d54 <I2C_EEPROM_PORT_init+0x30>)
    1d36:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1d38:	2100      	movs	r1, #0
    1d3a:	2069      	movs	r0, #105	; 0x69
    1d3c:	4b03      	ldr	r3, [pc, #12]	; (1d4c <I2C_EEPROM_PORT_init+0x28>)
    1d3e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1d40:	4905      	ldr	r1, [pc, #20]	; (1d58 <I2C_EEPROM_PORT_init+0x34>)
    1d42:	2069      	movs	r0, #105	; 0x69
    1d44:	4b03      	ldr	r3, [pc, #12]	; (1d54 <I2C_EEPROM_PORT_init+0x30>)
    1d46:	4798      	blx	r3
}
    1d48:	bf00      	nop
    1d4a:	bd80      	pop	{r7, pc}
    1d4c:	00001635 	.word	0x00001635
    1d50:	00680002 	.word	0x00680002
    1d54:	00001669 	.word	0x00001669
    1d58:	00690002 	.word	0x00690002

00001d5c <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1d5c:	b580      	push	{r7, lr}
    1d5e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d60:	2248      	movs	r2, #72	; 0x48
    1d62:	2125      	movs	r1, #37	; 0x25
    1d64:	4806      	ldr	r0, [pc, #24]	; (1d80 <I2C_EEPROM_CLOCK_init+0x24>)
    1d66:	4b07      	ldr	r3, [pc, #28]	; (1d84 <I2C_EEPROM_CLOCK_init+0x28>)
    1d68:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d6a:	224a      	movs	r2, #74	; 0x4a
    1d6c:	2103      	movs	r1, #3
    1d6e:	4804      	ldr	r0, [pc, #16]	; (1d80 <I2C_EEPROM_CLOCK_init+0x24>)
    1d70:	4b04      	ldr	r3, [pc, #16]	; (1d84 <I2C_EEPROM_CLOCK_init+0x28>)
    1d72:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1d74:	4804      	ldr	r0, [pc, #16]	; (1d88 <I2C_EEPROM_CLOCK_init+0x2c>)
    1d76:	4b05      	ldr	r3, [pc, #20]	; (1d8c <I2C_EEPROM_CLOCK_init+0x30>)
    1d78:	4798      	blx	r3
}
    1d7a:	bf00      	nop
    1d7c:	bd80      	pop	{r7, pc}
    1d7e:	bf00      	nop
    1d80:	40001c00 	.word	0x40001c00
    1d84:	00000e35 	.word	0x00000e35
    1d88:	40000800 	.word	0x40000800
    1d8c:	000010fb 	.word	0x000010fb

00001d90 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    1d94:	4b04      	ldr	r3, [pc, #16]	; (1da8 <I2C_EEPROM_init+0x18>)
    1d96:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    1d98:	4904      	ldr	r1, [pc, #16]	; (1dac <I2C_EEPROM_init+0x1c>)
    1d9a:	4805      	ldr	r0, [pc, #20]	; (1db0 <I2C_EEPROM_init+0x20>)
    1d9c:	4b05      	ldr	r3, [pc, #20]	; (1db4 <I2C_EEPROM_init+0x24>)
    1d9e:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    1da0:	4b05      	ldr	r3, [pc, #20]	; (1db8 <I2C_EEPROM_init+0x28>)
    1da2:	4798      	blx	r3
}
    1da4:	bf00      	nop
    1da6:	bd80      	pop	{r7, pc}
    1da8:	00001d5d 	.word	0x00001d5d
    1dac:	43000c00 	.word	0x43000c00
    1db0:	20008080 	.word	0x20008080
    1db4:	0000290d 	.word	0x0000290d
    1db8:	00001d25 	.word	0x00001d25

00001dbc <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1dbc:	b580      	push	{r7, lr}
    1dbe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1dc0:	4808      	ldr	r0, [pc, #32]	; (1de4 <TIMER_USB_init+0x28>)
    1dc2:	4b09      	ldr	r3, [pc, #36]	; (1de8 <TIMER_USB_init+0x2c>)
    1dc4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1dc6:	2243      	movs	r2, #67	; 0x43
    1dc8:	2109      	movs	r1, #9
    1dca:	4808      	ldr	r0, [pc, #32]	; (1dec <TIMER_USB_init+0x30>)
    1dcc:	4b08      	ldr	r3, [pc, #32]	; (1df0 <TIMER_USB_init+0x34>)
    1dce:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1dd0:	4b08      	ldr	r3, [pc, #32]	; (1df4 <TIMER_USB_init+0x38>)
    1dd2:	4798      	blx	r3
    1dd4:	4603      	mov	r3, r0
    1dd6:	461a      	mov	r2, r3
    1dd8:	4907      	ldr	r1, [pc, #28]	; (1df8 <TIMER_USB_init+0x3c>)
    1dda:	4808      	ldr	r0, [pc, #32]	; (1dfc <TIMER_USB_init+0x40>)
    1ddc:	4b08      	ldr	r3, [pc, #32]	; (1e00 <TIMER_USB_init+0x44>)
    1dde:	4798      	blx	r3
}
    1de0:	bf00      	nop
    1de2:	bd80      	pop	{r7, pc}
    1de4:	40000800 	.word	0x40000800
    1de8:	00000f5b 	.word	0x00000f5b
    1dec:	40001c00 	.word	0x40001c00
    1df0:	00000e35 	.word	0x00000e35
    1df4:	00008b7d 	.word	0x00008b7d
    1df8:	40003800 	.word	0x40003800
    1dfc:	20008000 	.word	0x20008000
    1e00:	00002ea9 	.word	0x00002ea9

00001e04 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1e04:	b580      	push	{r7, lr}
    1e06:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1e08:	4808      	ldr	r0, [pc, #32]	; (1e2c <TIMER_ARINC_init+0x28>)
    1e0a:	4b09      	ldr	r3, [pc, #36]	; (1e30 <TIMER_ARINC_init+0x2c>)
    1e0c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e0e:	2244      	movs	r2, #68	; 0x44
    1e10:	211a      	movs	r1, #26
    1e12:	4808      	ldr	r0, [pc, #32]	; (1e34 <TIMER_ARINC_init+0x30>)
    1e14:	4b08      	ldr	r3, [pc, #32]	; (1e38 <TIMER_ARINC_init+0x34>)
    1e16:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1e18:	4b08      	ldr	r3, [pc, #32]	; (1e3c <TIMER_ARINC_init+0x38>)
    1e1a:	4798      	blx	r3
    1e1c:	4603      	mov	r3, r0
    1e1e:	461a      	mov	r2, r3
    1e20:	4907      	ldr	r1, [pc, #28]	; (1e40 <TIMER_ARINC_init+0x3c>)
    1e22:	4808      	ldr	r0, [pc, #32]	; (1e44 <TIMER_ARINC_init+0x40>)
    1e24:	4b08      	ldr	r3, [pc, #32]	; (1e48 <TIMER_ARINC_init+0x44>)
    1e26:	4798      	blx	r3
}
    1e28:	bf00      	nop
    1e2a:	bd80      	pop	{r7, pc}
    1e2c:	40000800 	.word	0x40000800
    1e30:	0000101b 	.word	0x0000101b
    1e34:	40001c00 	.word	0x40001c00
    1e38:	00000e35 	.word	0x00000e35
    1e3c:	00008b7d 	.word	0x00008b7d
    1e40:	4101a000 	.word	0x4101a000
    1e44:	20007fe0 	.word	0x20007fe0
    1e48:	00002ea9 	.word	0x00002ea9

00001e4c <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1e4c:	b580      	push	{r7, lr}
    1e4e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1e50:	4808      	ldr	r0, [pc, #32]	; (1e74 <TIMER_MAINTENANCE_init+0x28>)
    1e52:	4b09      	ldr	r3, [pc, #36]	; (1e78 <TIMER_MAINTENANCE_init+0x2c>)
    1e54:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e56:	2246      	movs	r2, #70	; 0x46
    1e58:	211e      	movs	r1, #30
    1e5a:	4808      	ldr	r0, [pc, #32]	; (1e7c <TIMER_MAINTENANCE_init+0x30>)
    1e5c:	4b08      	ldr	r3, [pc, #32]	; (1e80 <TIMER_MAINTENANCE_init+0x34>)
    1e5e:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1e60:	4b08      	ldr	r3, [pc, #32]	; (1e84 <TIMER_MAINTENANCE_init+0x38>)
    1e62:	4798      	blx	r3
    1e64:	4603      	mov	r3, r0
    1e66:	461a      	mov	r2, r3
    1e68:	4907      	ldr	r1, [pc, #28]	; (1e88 <TIMER_MAINTENANCE_init+0x3c>)
    1e6a:	4808      	ldr	r0, [pc, #32]	; (1e8c <TIMER_MAINTENANCE_init+0x40>)
    1e6c:	4b08      	ldr	r3, [pc, #32]	; (1e90 <TIMER_MAINTENANCE_init+0x44>)
    1e6e:	4798      	blx	r3
}
    1e70:	bf00      	nop
    1e72:	bd80      	pop	{r7, pc}
    1e74:	40000800 	.word	0x40000800
    1e78:	0000103b 	.word	0x0000103b
    1e7c:	40001c00 	.word	0x40001c00
    1e80:	00000e35 	.word	0x00000e35
    1e84:	00008b7d 	.word	0x00008b7d
    1e88:	42001400 	.word	0x42001400
    1e8c:	20007f38 	.word	0x20007f38
    1e90:	00002ea9 	.word	0x00002ea9

00001e94 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1e94:	b580      	push	{r7, lr}
    1e96:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1e98:	4808      	ldr	r0, [pc, #32]	; (1ebc <TIMER_INTERFACE_init+0x28>)
    1e9a:	4b09      	ldr	r3, [pc, #36]	; (1ec0 <TIMER_INTERFACE_init+0x2c>)
    1e9c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e9e:	2246      	movs	r2, #70	; 0x46
    1ea0:	211e      	movs	r1, #30
    1ea2:	4808      	ldr	r0, [pc, #32]	; (1ec4 <TIMER_INTERFACE_init+0x30>)
    1ea4:	4b08      	ldr	r3, [pc, #32]	; (1ec8 <TIMER_INTERFACE_init+0x34>)
    1ea6:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1ea8:	4b08      	ldr	r3, [pc, #32]	; (1ecc <TIMER_INTERFACE_init+0x38>)
    1eaa:	4798      	blx	r3
    1eac:	4603      	mov	r3, r0
    1eae:	461a      	mov	r2, r3
    1eb0:	4907      	ldr	r1, [pc, #28]	; (1ed0 <TIMER_INTERFACE_init+0x3c>)
    1eb2:	4808      	ldr	r0, [pc, #32]	; (1ed4 <TIMER_INTERFACE_init+0x40>)
    1eb4:	4b08      	ldr	r3, [pc, #32]	; (1ed8 <TIMER_INTERFACE_init+0x44>)
    1eb6:	4798      	blx	r3
}
    1eb8:	bf00      	nop
    1eba:	bd80      	pop	{r7, pc}
    1ebc:	40000800 	.word	0x40000800
    1ec0:	0000105b 	.word	0x0000105b
    1ec4:	40001c00 	.word	0x40001c00
    1ec8:	00000e35 	.word	0x00000e35
    1ecc:	00008b7d 	.word	0x00008b7d
    1ed0:	42001800 	.word	0x42001800
    1ed4:	20007f7c 	.word	0x20007f7c
    1ed8:	00002ea9 	.word	0x00002ea9

00001edc <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1ee0:	4808      	ldr	r0, [pc, #32]	; (1f04 <TIMER_EVENT_init+0x28>)
    1ee2:	4b09      	ldr	r3, [pc, #36]	; (1f08 <TIMER_EVENT_init+0x2c>)
    1ee4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ee6:	2246      	movs	r2, #70	; 0x46
    1ee8:	2127      	movs	r1, #39	; 0x27
    1eea:	4808      	ldr	r0, [pc, #32]	; (1f0c <TIMER_EVENT_init+0x30>)
    1eec:	4b08      	ldr	r3, [pc, #32]	; (1f10 <TIMER_EVENT_init+0x34>)
    1eee:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1ef0:	4b08      	ldr	r3, [pc, #32]	; (1f14 <TIMER_EVENT_init+0x38>)
    1ef2:	4798      	blx	r3
    1ef4:	4603      	mov	r3, r0
    1ef6:	461a      	mov	r2, r3
    1ef8:	4907      	ldr	r1, [pc, #28]	; (1f18 <TIMER_EVENT_init+0x3c>)
    1efa:	4808      	ldr	r0, [pc, #32]	; (1f1c <TIMER_EVENT_init+0x40>)
    1efc:	4b08      	ldr	r3, [pc, #32]	; (1f20 <TIMER_EVENT_init+0x44>)
    1efe:	4798      	blx	r3
}
    1f00:	bf00      	nop
    1f02:	bd80      	pop	{r7, pc}
    1f04:	40000800 	.word	0x40000800
    1f08:	0000111b 	.word	0x0000111b
    1f0c:	40001c00 	.word	0x40001c00
    1f10:	00000e35 	.word	0x00000e35
    1f14:	00008b7d 	.word	0x00008b7d
    1f18:	43001400 	.word	0x43001400
    1f1c:	20007f5c 	.word	0x20007f5c
    1f20:	00002ea9 	.word	0x00002ea9

00001f24 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1f24:	b480      	push	{r7}
    1f26:	af00      	add	r7, sp, #0
}
    1f28:	bf00      	nop
    1f2a:	46bd      	mov	sp, r7
    1f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f30:	4770      	bx	lr
	...

00001f34 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1f34:	b580      	push	{r7, lr}
    1f36:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1f38:	4804      	ldr	r0, [pc, #16]	; (1f4c <LIVE_PULSE_CLOCK_init+0x18>)
    1f3a:	4b05      	ldr	r3, [pc, #20]	; (1f50 <LIVE_PULSE_CLOCK_init+0x1c>)
    1f3c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f3e:	2240      	movs	r2, #64	; 0x40
    1f40:	2127      	movs	r1, #39	; 0x27
    1f42:	4804      	ldr	r0, [pc, #16]	; (1f54 <LIVE_PULSE_CLOCK_init+0x20>)
    1f44:	4b04      	ldr	r3, [pc, #16]	; (1f58 <LIVE_PULSE_CLOCK_init+0x24>)
    1f46:	4798      	blx	r3
}
    1f48:	bf00      	nop
    1f4a:	bd80      	pop	{r7, pc}
    1f4c:	40000800 	.word	0x40000800
    1f50:	0000113b 	.word	0x0000113b
    1f54:	40001c00 	.word	0x40001c00
    1f58:	00000e35 	.word	0x00000e35

00001f5c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1f5c:	b580      	push	{r7, lr}
    1f5e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1f60:	4b06      	ldr	r3, [pc, #24]	; (1f7c <LIVE_PULSE_init+0x20>)
    1f62:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1f64:	4b06      	ldr	r3, [pc, #24]	; (1f80 <LIVE_PULSE_init+0x24>)
    1f66:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1f68:	4b06      	ldr	r3, [pc, #24]	; (1f84 <LIVE_PULSE_init+0x28>)
    1f6a:	4798      	blx	r3
    1f6c:	4603      	mov	r3, r0
    1f6e:	461a      	mov	r2, r3
    1f70:	4905      	ldr	r1, [pc, #20]	; (1f88 <LIVE_PULSE_init+0x2c>)
    1f72:	4806      	ldr	r0, [pc, #24]	; (1f8c <LIVE_PULSE_init+0x30>)
    1f74:	4b06      	ldr	r3, [pc, #24]	; (1f90 <LIVE_PULSE_init+0x34>)
    1f76:	4798      	blx	r3
}
    1f78:	bf00      	nop
    1f7a:	bd80      	pop	{r7, pc}
    1f7c:	00001f35 	.word	0x00001f35
    1f80:	00001f25 	.word	0x00001f25
    1f84:	00008b91 	.word	0x00008b91
    1f88:	43001800 	.word	0x43001800
    1f8c:	20007f9c 	.word	0x20007f9c
    1f90:	00002b1d 	.word	0x00002b1d

00001f94 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1f94:	b580      	push	{r7, lr}
    1f96:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1f98:	4804      	ldr	r0, [pc, #16]	; (1fac <TIMER_HVAC_CLOCK_init+0x18>)
    1f9a:	4b05      	ldr	r3, [pc, #20]	; (1fb0 <TIMER_HVAC_CLOCK_init+0x1c>)
    1f9c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f9e:	2244      	movs	r2, #68	; 0x44
    1fa0:	2119      	movs	r1, #25
    1fa2:	4804      	ldr	r0, [pc, #16]	; (1fb4 <TIMER_HVAC_CLOCK_init+0x20>)
    1fa4:	4b04      	ldr	r3, [pc, #16]	; (1fb8 <TIMER_HVAC_CLOCK_init+0x24>)
    1fa6:	4798      	blx	r3
}
    1fa8:	bf00      	nop
    1faa:	bd80      	pop	{r7, pc}
    1fac:	40000800 	.word	0x40000800
    1fb0:	00000fdb 	.word	0x00000fdb
    1fb4:	40001c00 	.word	0x40001c00
    1fb8:	00000e35 	.word	0x00000e35

00001fbc <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1fbc:	b580      	push	{r7, lr}
    1fbe:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1fc0:	4b05      	ldr	r3, [pc, #20]	; (1fd8 <TIMER_HVAC_init+0x1c>)
    1fc2:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1fc4:	4b05      	ldr	r3, [pc, #20]	; (1fdc <TIMER_HVAC_init+0x20>)
    1fc6:	4798      	blx	r3
    1fc8:	4603      	mov	r3, r0
    1fca:	461a      	mov	r2, r3
    1fcc:	4904      	ldr	r1, [pc, #16]	; (1fe0 <TIMER_HVAC_init+0x24>)
    1fce:	4805      	ldr	r0, [pc, #20]	; (1fe4 <TIMER_HVAC_init+0x28>)
    1fd0:	4b05      	ldr	r3, [pc, #20]	; (1fe8 <TIMER_HVAC_init+0x2c>)
    1fd2:	4798      	blx	r3
}
    1fd4:	bf00      	nop
    1fd6:	bd80      	pop	{r7, pc}
    1fd8:	00001f95 	.word	0x00001f95
    1fdc:	00007f7d 	.word	0x00007f7d
    1fe0:	41016000 	.word	0x41016000
    1fe4:	20008060 	.word	0x20008060
    1fe8:	00002ea9 	.word	0x00002ea9

00001fec <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1ff0:	4804      	ldr	r0, [pc, #16]	; (2004 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1ff2:	4b05      	ldr	r3, [pc, #20]	; (2008 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1ff4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ff6:	2244      	movs	r2, #68	; 0x44
    1ff8:	2119      	movs	r1, #25
    1ffa:	4804      	ldr	r0, [pc, #16]	; (200c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1ffc:	4b04      	ldr	r3, [pc, #16]	; (2010 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1ffe:	4798      	blx	r3
}
    2000:	bf00      	nop
    2002:	bd80      	pop	{r7, pc}
    2004:	40000800 	.word	0x40000800
    2008:	00000ffb 	.word	0x00000ffb
    200c:	40001c00 	.word	0x40001c00
    2010:	00000e35 	.word	0x00000e35

00002014 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    2014:	b580      	push	{r7, lr}
    2016:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    2018:	4b05      	ldr	r3, [pc, #20]	; (2030 <TIMER_TEMPERATURES_init+0x1c>)
    201a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    201c:	4b05      	ldr	r3, [pc, #20]	; (2034 <TIMER_TEMPERATURES_init+0x20>)
    201e:	4798      	blx	r3
    2020:	4603      	mov	r3, r0
    2022:	461a      	mov	r2, r3
    2024:	4904      	ldr	r1, [pc, #16]	; (2038 <TIMER_TEMPERATURES_init+0x24>)
    2026:	4805      	ldr	r0, [pc, #20]	; (203c <TIMER_TEMPERATURES_init+0x28>)
    2028:	4b05      	ldr	r3, [pc, #20]	; (2040 <TIMER_TEMPERATURES_init+0x2c>)
    202a:	4798      	blx	r3
}
    202c:	bf00      	nop
    202e:	bd80      	pop	{r7, pc}
    2030:	00001fed 	.word	0x00001fed
    2034:	00007f7d 	.word	0x00007f7d
    2038:	41018000 	.word	0x41018000
    203c:	20007ee8 	.word	0x20007ee8
    2040:	00002ea9 	.word	0x00002ea9

00002044 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    2044:	b580      	push	{r7, lr}
    2046:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    2048:	2102      	movs	r1, #2
    204a:	2018      	movs	r0, #24
    204c:	4b0f      	ldr	r3, [pc, #60]	; (208c <CDCUSB_PORT_init+0x48>)
    204e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    2050:	2100      	movs	r1, #0
    2052:	2018      	movs	r0, #24
    2054:	4b0e      	ldr	r3, [pc, #56]	; (2090 <CDCUSB_PORT_init+0x4c>)
    2056:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    2058:	2100      	movs	r1, #0
    205a:	2018      	movs	r0, #24
    205c:	4b0d      	ldr	r3, [pc, #52]	; (2094 <CDCUSB_PORT_init+0x50>)
    205e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2060:	490d      	ldr	r1, [pc, #52]	; (2098 <CDCUSB_PORT_init+0x54>)
    2062:	2018      	movs	r0, #24
    2064:	4b0d      	ldr	r3, [pc, #52]	; (209c <CDCUSB_PORT_init+0x58>)
    2066:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2068:	2102      	movs	r1, #2
    206a:	2019      	movs	r0, #25
    206c:	4b07      	ldr	r3, [pc, #28]	; (208c <CDCUSB_PORT_init+0x48>)
    206e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2070:	2100      	movs	r1, #0
    2072:	2019      	movs	r0, #25
    2074:	4b06      	ldr	r3, [pc, #24]	; (2090 <CDCUSB_PORT_init+0x4c>)
    2076:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2078:	2100      	movs	r1, #0
    207a:	2019      	movs	r0, #25
    207c:	4b05      	ldr	r3, [pc, #20]	; (2094 <CDCUSB_PORT_init+0x50>)
    207e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2080:	4907      	ldr	r1, [pc, #28]	; (20a0 <CDCUSB_PORT_init+0x5c>)
    2082:	2019      	movs	r0, #25
    2084:	4b05      	ldr	r3, [pc, #20]	; (209c <CDCUSB_PORT_init+0x58>)
    2086:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    2088:	bf00      	nop
    208a:	bd80      	pop	{r7, pc}
    208c:	00001689 	.word	0x00001689
    2090:	000016c1 	.word	0x000016c1
    2094:	00001635 	.word	0x00001635
    2098:	00180007 	.word	0x00180007
    209c:	00001669 	.word	0x00001669
    20a0:	00190007 	.word	0x00190007

000020a4 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    20a4:	b580      	push	{r7, lr}
    20a6:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    20a8:	2242      	movs	r2, #66	; 0x42
    20aa:	210a      	movs	r1, #10
    20ac:	4805      	ldr	r0, [pc, #20]	; (20c4 <CDCUSB_CLOCK_init+0x20>)
    20ae:	4b06      	ldr	r3, [pc, #24]	; (20c8 <CDCUSB_CLOCK_init+0x24>)
    20b0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    20b2:	4806      	ldr	r0, [pc, #24]	; (20cc <CDCUSB_CLOCK_init+0x28>)
    20b4:	4b06      	ldr	r3, [pc, #24]	; (20d0 <CDCUSB_CLOCK_init+0x2c>)
    20b6:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    20b8:	4804      	ldr	r0, [pc, #16]	; (20cc <CDCUSB_CLOCK_init+0x28>)
    20ba:	4b06      	ldr	r3, [pc, #24]	; (20d4 <CDCUSB_CLOCK_init+0x30>)
    20bc:	4798      	blx	r3
}
    20be:	bf00      	nop
    20c0:	bd80      	pop	{r7, pc}
    20c2:	bf00      	nop
    20c4:	40001c00 	.word	0x40001c00
    20c8:	00000e35 	.word	0x00000e35
    20cc:	40000800 	.word	0x40000800
    20d0:	00000e5b 	.word	0x00000e5b
    20d4:	00000f7b 	.word	0x00000f7b

000020d8 <CDCUSB_init>:

void CDCUSB_init(void)
{
    20d8:	b580      	push	{r7, lr}
    20da:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    20dc:	4b03      	ldr	r3, [pc, #12]	; (20ec <CDCUSB_init+0x14>)
    20de:	4798      	blx	r3
	usb_d_init();
    20e0:	4b03      	ldr	r3, [pc, #12]	; (20f0 <CDCUSB_init+0x18>)
    20e2:	4798      	blx	r3
	CDCUSB_PORT_init();
    20e4:	4b03      	ldr	r3, [pc, #12]	; (20f4 <CDCUSB_init+0x1c>)
    20e6:	4798      	blx	r3
}
    20e8:	bf00      	nop
    20ea:	bd80      	pop	{r7, pc}
    20ec:	000020a5 	.word	0x000020a5
    20f0:	00003705 	.word	0x00003705
    20f4:	00002045 	.word	0x00002045

000020f8 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    20f8:	b580      	push	{r7, lr}
    20fa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    20fc:	4802      	ldr	r0, [pc, #8]	; (2108 <WATCHDOG_CLOCK_init+0x10>)
    20fe:	4b03      	ldr	r3, [pc, #12]	; (210c <WATCHDOG_CLOCK_init+0x14>)
    2100:	4798      	blx	r3
}
    2102:	bf00      	nop
    2104:	bd80      	pop	{r7, pc}
    2106:	bf00      	nop
    2108:	40000800 	.word	0x40000800
    210c:	00000edb 	.word	0x00000edb

00002110 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2110:	b580      	push	{r7, lr}
    2112:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    2114:	4b03      	ldr	r3, [pc, #12]	; (2124 <WATCHDOG_init+0x14>)
    2116:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2118:	4903      	ldr	r1, [pc, #12]	; (2128 <WATCHDOG_init+0x18>)
    211a:	4804      	ldr	r0, [pc, #16]	; (212c <WATCHDOG_init+0x1c>)
    211c:	4b04      	ldr	r3, [pc, #16]	; (2130 <WATCHDOG_init+0x20>)
    211e:	4798      	blx	r3
}
    2120:	bf00      	nop
    2122:	bd80      	pop	{r7, pc}
    2124:	000020f9 	.word	0x000020f9
    2128:	40002000 	.word	0x40002000
    212c:	200080e0 	.word	0x200080e0
    2130:	00001709 	.word	0x00001709

00002134 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    2134:	b580      	push	{r7, lr}
    2136:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    2138:	4904      	ldr	r1, [pc, #16]	; (214c <CAN_CCU_PORT_init+0x18>)
    213a:	202d      	movs	r0, #45	; 0x2d
    213c:	4b04      	ldr	r3, [pc, #16]	; (2150 <CAN_CCU_PORT_init+0x1c>)
    213e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    2140:	4904      	ldr	r1, [pc, #16]	; (2154 <CAN_CCU_PORT_init+0x20>)
    2142:	202c      	movs	r0, #44	; 0x2c
    2144:	4b02      	ldr	r3, [pc, #8]	; (2150 <CAN_CCU_PORT_init+0x1c>)
    2146:	4798      	blx	r3
}
    2148:	bf00      	nop
    214a:	bd80      	pop	{r7, pc}
    214c:	002d0007 	.word	0x002d0007
    2150:	00001669 	.word	0x00001669
    2154:	002c0007 	.word	0x002c0007

00002158 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    2158:	b580      	push	{r7, lr}
    215a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    215c:	4807      	ldr	r0, [pc, #28]	; (217c <CAN_CCU_init+0x24>)
    215e:	4b08      	ldr	r3, [pc, #32]	; (2180 <CAN_CCU_init+0x28>)
    2160:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2162:	2243      	movs	r2, #67	; 0x43
    2164:	211c      	movs	r1, #28
    2166:	4807      	ldr	r0, [pc, #28]	; (2184 <CAN_CCU_init+0x2c>)
    2168:	4b07      	ldr	r3, [pc, #28]	; (2188 <CAN_CCU_init+0x30>)
    216a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    216c:	4907      	ldr	r1, [pc, #28]	; (218c <CAN_CCU_init+0x34>)
    216e:	4808      	ldr	r0, [pc, #32]	; (2190 <CAN_CCU_init+0x38>)
    2170:	4b08      	ldr	r3, [pc, #32]	; (2194 <CAN_CCU_init+0x3c>)
    2172:	4798      	blx	r3
	CAN_CCU_PORT_init();
    2174:	4b08      	ldr	r3, [pc, #32]	; (2198 <CAN_CCU_init+0x40>)
    2176:	4798      	blx	r3
}
    2178:	bf00      	nop
    217a:	bd80      	pop	{r7, pc}
    217c:	40000800 	.word	0x40000800
    2180:	00000e9b 	.word	0x00000e9b
    2184:	40001c00 	.word	0x40001c00
    2188:	00000e35 	.word	0x00000e35
    218c:	42000400 	.word	0x42000400
    2190:	20007fb8 	.word	0x20007fb8
    2194:	000023f5 	.word	0x000023f5
    2198:	00002135 	.word	0x00002135

0000219c <system_init>:

void system_init(void)
{
    219c:	b580      	push	{r7, lr}
    219e:	af00      	add	r7, sp, #0
	init_mcu();
    21a0:	4b5e      	ldr	r3, [pc, #376]	; (231c <system_init+0x180>)
    21a2:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    21a4:	2100      	movs	r1, #0
    21a6:	2007      	movs	r0, #7
    21a8:	4b5d      	ldr	r3, [pc, #372]	; (2320 <system_init+0x184>)
    21aa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    21ac:	2102      	movs	r1, #2
    21ae:	2007      	movs	r0, #7
    21b0:	4b5c      	ldr	r3, [pc, #368]	; (2324 <system_init+0x188>)
    21b2:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    21b4:	f04f 31ff 	mov.w	r1, #4294967295
    21b8:	2007      	movs	r0, #7
    21ba:	4b5b      	ldr	r3, [pc, #364]	; (2328 <system_init+0x18c>)
    21bc:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    21be:	2101      	movs	r1, #1
    21c0:	200f      	movs	r0, #15
    21c2:	4b57      	ldr	r3, [pc, #348]	; (2320 <system_init+0x184>)
    21c4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    21c6:	2102      	movs	r1, #2
    21c8:	200f      	movs	r0, #15
    21ca:	4b56      	ldr	r3, [pc, #344]	; (2324 <system_init+0x188>)
    21cc:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    21ce:	f04f 31ff 	mov.w	r1, #4294967295
    21d2:	200f      	movs	r0, #15
    21d4:	4b54      	ldr	r3, [pc, #336]	; (2328 <system_init+0x18c>)
    21d6:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    21d8:	2101      	movs	r1, #1
    21da:	2013      	movs	r0, #19
    21dc:	4b50      	ldr	r3, [pc, #320]	; (2320 <system_init+0x184>)
    21de:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    21e0:	2102      	movs	r1, #2
    21e2:	2013      	movs	r0, #19
    21e4:	4b4f      	ldr	r3, [pc, #316]	; (2324 <system_init+0x188>)
    21e6:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    21e8:	f04f 31ff 	mov.w	r1, #4294967295
    21ec:	2013      	movs	r0, #19
    21ee:	4b4e      	ldr	r3, [pc, #312]	; (2328 <system_init+0x18c>)
    21f0:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    21f2:	2101      	movs	r1, #1
    21f4:	201b      	movs	r0, #27
    21f6:	4b4a      	ldr	r3, [pc, #296]	; (2320 <system_init+0x184>)
    21f8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    21fa:	2102      	movs	r1, #2
    21fc:	201b      	movs	r0, #27
    21fe:	4b49      	ldr	r3, [pc, #292]	; (2324 <system_init+0x188>)
    2200:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    2202:	f04f 31ff 	mov.w	r1, #4294967295
    2206:	201b      	movs	r0, #27
    2208:	4b47      	ldr	r3, [pc, #284]	; (2328 <system_init+0x18c>)
    220a:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    220c:	2101      	movs	r1, #1
    220e:	2027      	movs	r0, #39	; 0x27
    2210:	4b43      	ldr	r3, [pc, #268]	; (2320 <system_init+0x184>)
    2212:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2214:	2102      	movs	r1, #2
    2216:	2027      	movs	r0, #39	; 0x27
    2218:	4b42      	ldr	r3, [pc, #264]	; (2324 <system_init+0x188>)
    221a:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    221c:	f04f 31ff 	mov.w	r1, #4294967295
    2220:	2027      	movs	r0, #39	; 0x27
    2222:	4b41      	ldr	r3, [pc, #260]	; (2328 <system_init+0x18c>)
    2224:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    2226:	2101      	movs	r1, #1
    2228:	203d      	movs	r0, #61	; 0x3d
    222a:	4b3d      	ldr	r3, [pc, #244]	; (2320 <system_init+0x184>)
    222c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    222e:	2102      	movs	r1, #2
    2230:	203d      	movs	r0, #61	; 0x3d
    2232:	4b3c      	ldr	r3, [pc, #240]	; (2324 <system_init+0x188>)
    2234:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    2236:	f04f 31ff 	mov.w	r1, #4294967295
    223a:	203d      	movs	r0, #61	; 0x3d
    223c:	4b3a      	ldr	r3, [pc, #232]	; (2328 <system_init+0x18c>)
    223e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2240:	2101      	movs	r1, #1
    2242:	203f      	movs	r0, #63	; 0x3f
    2244:	4b37      	ldr	r3, [pc, #220]	; (2324 <system_init+0x188>)
    2246:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    2248:	2101      	movs	r1, #1
    224a:	203f      	movs	r0, #63	; 0x3f
    224c:	4b37      	ldr	r3, [pc, #220]	; (232c <system_init+0x190>)
    224e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2250:	f04f 31ff 	mov.w	r1, #4294967295
    2254:	203f      	movs	r0, #63	; 0x3f
    2256:	4b34      	ldr	r3, [pc, #208]	; (2328 <system_init+0x18c>)
    2258:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    225a:	2100      	movs	r1, #0
    225c:	204d      	movs	r0, #77	; 0x4d
    225e:	4b30      	ldr	r3, [pc, #192]	; (2320 <system_init+0x184>)
    2260:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    2262:	2102      	movs	r1, #2
    2264:	204d      	movs	r0, #77	; 0x4d
    2266:	4b2f      	ldr	r3, [pc, #188]	; (2324 <system_init+0x188>)
    2268:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    226a:	f04f 31ff 	mov.w	r1, #4294967295
    226e:	204d      	movs	r0, #77	; 0x4d
    2270:	4b2d      	ldr	r3, [pc, #180]	; (2328 <system_init+0x18c>)
    2272:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    2274:	2101      	movs	r1, #1
    2276:	204e      	movs	r0, #78	; 0x4e
    2278:	4b29      	ldr	r3, [pc, #164]	; (2320 <system_init+0x184>)
    227a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    227c:	2102      	movs	r1, #2
    227e:	204e      	movs	r0, #78	; 0x4e
    2280:	4b28      	ldr	r3, [pc, #160]	; (2324 <system_init+0x188>)
    2282:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    2284:	f04f 31ff 	mov.w	r1, #4294967295
    2288:	204e      	movs	r0, #78	; 0x4e
    228a:	4b27      	ldr	r3, [pc, #156]	; (2328 <system_init+0x18c>)
    228c:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    228e:	2100      	movs	r1, #0
    2290:	204f      	movs	r0, #79	; 0x4f
    2292:	4b23      	ldr	r3, [pc, #140]	; (2320 <system_init+0x184>)
    2294:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    2296:	2102      	movs	r1, #2
    2298:	204f      	movs	r0, #79	; 0x4f
    229a:	4b22      	ldr	r3, [pc, #136]	; (2324 <system_init+0x188>)
    229c:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    229e:	f04f 31ff 	mov.w	r1, #4294967295
    22a2:	204f      	movs	r0, #79	; 0x4f
    22a4:	4b20      	ldr	r3, [pc, #128]	; (2328 <system_init+0x18c>)
    22a6:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    22a8:	2100      	movs	r1, #0
    22aa:	2052      	movs	r0, #82	; 0x52
    22ac:	4b1c      	ldr	r3, [pc, #112]	; (2320 <system_init+0x184>)
    22ae:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    22b0:	2102      	movs	r1, #2
    22b2:	2052      	movs	r0, #82	; 0x52
    22b4:	4b1b      	ldr	r3, [pc, #108]	; (2324 <system_init+0x188>)
    22b6:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    22b8:	f04f 31ff 	mov.w	r1, #4294967295
    22bc:	2052      	movs	r0, #82	; 0x52
    22be:	4b1a      	ldr	r3, [pc, #104]	; (2328 <system_init+0x18c>)
    22c0:	4798      	blx	r3

	CRC_CALC_init();
    22c2:	4b1b      	ldr	r3, [pc, #108]	; (2330 <system_init+0x194>)
    22c4:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    22c6:	4b1b      	ldr	r3, [pc, #108]	; (2334 <system_init+0x198>)
    22c8:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    22ca:	4b1b      	ldr	r3, [pc, #108]	; (2338 <system_init+0x19c>)
    22cc:	4798      	blx	r3

	QSPI_N25Q256_init();
    22ce:	4b1b      	ldr	r3, [pc, #108]	; (233c <system_init+0x1a0>)
    22d0:	4798      	blx	r3

	DATETIME_CLOCK_init();
    22d2:	4b1b      	ldr	r3, [pc, #108]	; (2340 <system_init+0x1a4>)
    22d4:	4798      	blx	r3

	I2C_SHARED_init();
    22d6:	4b1b      	ldr	r3, [pc, #108]	; (2344 <system_init+0x1a8>)
    22d8:	4798      	blx	r3

	SPI_TEMP_init();
    22da:	4b1b      	ldr	r3, [pc, #108]	; (2348 <system_init+0x1ac>)
    22dc:	4798      	blx	r3

	I2C_EXPANDER_init();
    22de:	4b1b      	ldr	r3, [pc, #108]	; (234c <system_init+0x1b0>)
    22e0:	4798      	blx	r3

	SPI_HI3593_init();
    22e2:	4b1b      	ldr	r3, [pc, #108]	; (2350 <system_init+0x1b4>)
    22e4:	4798      	blx	r3

	I2C_EEPROM_init();
    22e6:	4b1b      	ldr	r3, [pc, #108]	; (2354 <system_init+0x1b8>)
    22e8:	4798      	blx	r3

	TIMER_USB_init();
    22ea:	4b1b      	ldr	r3, [pc, #108]	; (2358 <system_init+0x1bc>)
    22ec:	4798      	blx	r3
	TIMER_ARINC_init();
    22ee:	4b1b      	ldr	r3, [pc, #108]	; (235c <system_init+0x1c0>)
    22f0:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    22f2:	4b1b      	ldr	r3, [pc, #108]	; (2360 <system_init+0x1c4>)
    22f4:	4798      	blx	r3
	TIMER_INTERFACE_init();
    22f6:	4b1b      	ldr	r3, [pc, #108]	; (2364 <system_init+0x1c8>)
    22f8:	4798      	blx	r3
	TIMER_EVENT_init();
    22fa:	4b1b      	ldr	r3, [pc, #108]	; (2368 <system_init+0x1cc>)
    22fc:	4798      	blx	r3
	LIVE_PULSE_init();
    22fe:	4b1b      	ldr	r3, [pc, #108]	; (236c <system_init+0x1d0>)
    2300:	4798      	blx	r3

	TIMER_HVAC_init();
    2302:	4b1b      	ldr	r3, [pc, #108]	; (2370 <system_init+0x1d4>)
    2304:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    2306:	4b1b      	ldr	r3, [pc, #108]	; (2374 <system_init+0x1d8>)
    2308:	4798      	blx	r3

	CDCUSB_init();
    230a:	4b1b      	ldr	r3, [pc, #108]	; (2378 <system_init+0x1dc>)
    230c:	4798      	blx	r3

	WATCHDOG_init();
    230e:	4b1b      	ldr	r3, [pc, #108]	; (237c <system_init+0x1e0>)
    2310:	4798      	blx	r3
	CAN_CCU_init();
    2312:	4b1b      	ldr	r3, [pc, #108]	; (2380 <system_init+0x1e4>)
    2314:	4798      	blx	r3
}
    2316:	bf00      	nop
    2318:	bd80      	pop	{r7, pc}
    231a:	bf00      	nop
    231c:	000016f9 	.word	0x000016f9
    2320:	000016c1 	.word	0x000016c1
    2324:	00001689 	.word	0x00001689
    2328:	00001669 	.word	0x00001669
    232c:	00001635 	.word	0x00001635
    2330:	00001759 	.word	0x00001759
    2334:	00001785 	.word	0x00001785
    2338:	000018ad 	.word	0x000018ad
    233c:	000019f5 	.word	0x000019f5
    2340:	00001a39 	.word	0x00001a39
    2344:	00001ac9 	.word	0x00001ac9
    2348:	00001b95 	.word	0x00001b95
    234c:	00001c2d 	.word	0x00001c2d
    2350:	00001cf9 	.word	0x00001cf9
    2354:	00001d91 	.word	0x00001d91
    2358:	00001dbd 	.word	0x00001dbd
    235c:	00001e05 	.word	0x00001e05
    2360:	00001e4d 	.word	0x00001e4d
    2364:	00001e95 	.word	0x00001e95
    2368:	00001edd 	.word	0x00001edd
    236c:	00001f5d 	.word	0x00001f5d
    2370:	00001fbd 	.word	0x00001fbd
    2374:	00002015 	.word	0x00002015
    2378:	000020d9 	.word	0x000020d9
    237c:	00002111 	.word	0x00002111
    2380:	00002159 	.word	0x00002159

00002384 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    2384:	b580      	push	{r7, lr}
    2386:	b084      	sub	sp, #16
    2388:	af00      	add	r7, sp, #0
    238a:	6078      	str	r0, [r7, #4]
    238c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    238e:	2300      	movs	r3, #0
    2390:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    2392:	687b      	ldr	r3, [r7, #4]
    2394:	2b00      	cmp	r3, #0
    2396:	bf14      	ite	ne
    2398:	2301      	movne	r3, #1
    239a:	2300      	moveq	r3, #0
    239c:	b2db      	uxtb	r3, r3
    239e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    23a2:	4911      	ldr	r1, [pc, #68]	; (23e8 <calendar_init+0x64>)
    23a4:	4618      	mov	r0, r3
    23a6:	4b11      	ldr	r3, [pc, #68]	; (23ec <calendar_init+0x68>)
    23a8:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	681a      	ldr	r2, [r3, #0]
    23ae:	683b      	ldr	r3, [r7, #0]
    23b0:	429a      	cmp	r2, r3
    23b2:	d101      	bne.n	23b8 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    23b4:	2300      	movs	r3, #0
    23b6:	e013      	b.n	23e0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    23b8:	687b      	ldr	r3, [r7, #4]
    23ba:	681b      	ldr	r3, [r3, #0]
    23bc:	2b00      	cmp	r3, #0
    23be:	d002      	beq.n	23c6 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    23c0:	f06f 0311 	mvn.w	r3, #17
    23c4:	e00c      	b.n	23e0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    23c6:	687b      	ldr	r3, [r7, #4]
    23c8:	683a      	ldr	r2, [r7, #0]
    23ca:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	4618      	mov	r0, r3
    23d0:	4b07      	ldr	r3, [pc, #28]	; (23f0 <calendar_init+0x6c>)
    23d2:	4798      	blx	r3
    23d4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    23d6:	687b      	ldr	r3, [r7, #4]
    23d8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    23dc:	619a      	str	r2, [r3, #24]

	return ret;
    23de:	68fb      	ldr	r3, [r7, #12]
}
    23e0:	4618      	mov	r0, r3
    23e2:	3710      	adds	r7, #16
    23e4:	46bd      	mov	sp, r7
    23e6:	bd80      	pop	{r7, pc}
    23e8:	00011af4 	.word	0x00011af4
    23ec:	00003cad 	.word	0x00003cad
    23f0:	00006059 	.word	0x00006059

000023f4 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    23f4:	b580      	push	{r7, lr}
    23f6:	b084      	sub	sp, #16
    23f8:	af00      	add	r7, sp, #0
    23fa:	6078      	str	r0, [r7, #4]
    23fc:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    23fe:	687b      	ldr	r3, [r7, #4]
    2400:	2b00      	cmp	r3, #0
    2402:	d004      	beq.n	240e <can_async_init+0x1a>
    2404:	683b      	ldr	r3, [r7, #0]
    2406:	2b00      	cmp	r3, #0
    2408:	d001      	beq.n	240e <can_async_init+0x1a>
    240a:	2301      	movs	r3, #1
    240c:	e000      	b.n	2410 <can_async_init+0x1c>
    240e:	2300      	movs	r3, #0
    2410:	f003 0301 	and.w	r3, r3, #1
    2414:	b2db      	uxtb	r3, r3
    2416:	2241      	movs	r2, #65	; 0x41
    2418:	490e      	ldr	r1, [pc, #56]	; (2454 <can_async_init+0x60>)
    241a:	4618      	mov	r0, r3
    241c:	4b0e      	ldr	r3, [pc, #56]	; (2458 <can_async_init+0x64>)
    241e:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2420:	687b      	ldr	r3, [r7, #4]
    2422:	6839      	ldr	r1, [r7, #0]
    2424:	4618      	mov	r0, r3
    2426:	4b0d      	ldr	r3, [pc, #52]	; (245c <can_async_init+0x68>)
    2428:	4798      	blx	r3
    242a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    242c:	68fb      	ldr	r3, [r7, #12]
    242e:	2b00      	cmp	r3, #0
    2430:	d001      	beq.n	2436 <can_async_init+0x42>
		return rc;
    2432:	68fb      	ldr	r3, [r7, #12]
    2434:	e009      	b.n	244a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    2436:	687b      	ldr	r3, [r7, #4]
    2438:	4a09      	ldr	r2, [pc, #36]	; (2460 <can_async_init+0x6c>)
    243a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    243c:	687b      	ldr	r3, [r7, #4]
    243e:	4a09      	ldr	r2, [pc, #36]	; (2464 <can_async_init+0x70>)
    2440:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    2442:	687b      	ldr	r3, [r7, #4]
    2444:	4a08      	ldr	r2, [pc, #32]	; (2468 <can_async_init+0x74>)
    2446:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2448:	2300      	movs	r3, #0
}
    244a:	4618      	mov	r0, r3
    244c:	3710      	adds	r7, #16
    244e:	46bd      	mov	sp, r7
    2450:	bd80      	pop	{r7, pc}
    2452:	bf00      	nop
    2454:	00011b10 	.word	0x00011b10
    2458:	00003cad 	.word	0x00003cad
    245c:	00004209 	.word	0x00004209
    2460:	0000246d 	.word	0x0000246d
    2464:	00002491 	.word	0x00002491
    2468:	000024b5 	.word	0x000024b5

0000246c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    246c:	b580      	push	{r7, lr}
    246e:	b084      	sub	sp, #16
    2470:	af00      	add	r7, sp, #0
    2472:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2474:	687b      	ldr	r3, [r7, #4]
    2476:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2478:	68fb      	ldr	r3, [r7, #12]
    247a:	69db      	ldr	r3, [r3, #28]
    247c:	2b00      	cmp	r3, #0
    247e:	d003      	beq.n	2488 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2480:	68fb      	ldr	r3, [r7, #12]
    2482:	69db      	ldr	r3, [r3, #28]
    2484:	68f8      	ldr	r0, [r7, #12]
    2486:	4798      	blx	r3
	}
}
    2488:	bf00      	nop
    248a:	3710      	adds	r7, #16
    248c:	46bd      	mov	sp, r7
    248e:	bd80      	pop	{r7, pc}

00002490 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2490:	b580      	push	{r7, lr}
    2492:	b084      	sub	sp, #16
    2494:	af00      	add	r7, sp, #0
    2496:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2498:	687b      	ldr	r3, [r7, #4]
    249a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    249c:	68fb      	ldr	r3, [r7, #12]
    249e:	6a1b      	ldr	r3, [r3, #32]
    24a0:	2b00      	cmp	r3, #0
    24a2:	d003      	beq.n	24ac <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    24a4:	68fb      	ldr	r3, [r7, #12]
    24a6:	6a1b      	ldr	r3, [r3, #32]
    24a8:	68f8      	ldr	r0, [r7, #12]
    24aa:	4798      	blx	r3
	}
}
    24ac:	bf00      	nop
    24ae:	3710      	adds	r7, #16
    24b0:	46bd      	mov	sp, r7
    24b2:	bd80      	pop	{r7, pc}

000024b4 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    24b4:	b580      	push	{r7, lr}
    24b6:	b084      	sub	sp, #16
    24b8:	af00      	add	r7, sp, #0
    24ba:	6078      	str	r0, [r7, #4]
    24bc:	460b      	mov	r3, r1
    24be:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    24c4:	68fb      	ldr	r3, [r7, #12]
    24c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    24c8:	2b00      	cmp	r3, #0
    24ca:	d005      	beq.n	24d8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    24cc:	68fb      	ldr	r3, [r7, #12]
    24ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    24d0:	78fa      	ldrb	r2, [r7, #3]
    24d2:	4611      	mov	r1, r2
    24d4:	68f8      	ldr	r0, [r7, #12]
    24d6:	4798      	blx	r3
	}
}
    24d8:	bf00      	nop
    24da:	3710      	adds	r7, #16
    24dc:	46bd      	mov	sp, r7
    24de:	bd80      	pop	{r7, pc}

000024e0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    24e0:	b580      	push	{r7, lr}
    24e2:	b082      	sub	sp, #8
    24e4:	af00      	add	r7, sp, #0
    24e6:	6078      	str	r0, [r7, #4]
    24e8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    24ea:	687b      	ldr	r3, [r7, #4]
    24ec:	2b00      	cmp	r3, #0
    24ee:	d004      	beq.n	24fa <crc_sync_init+0x1a>
    24f0:	683b      	ldr	r3, [r7, #0]
    24f2:	2b00      	cmp	r3, #0
    24f4:	d001      	beq.n	24fa <crc_sync_init+0x1a>
    24f6:	2301      	movs	r3, #1
    24f8:	e000      	b.n	24fc <crc_sync_init+0x1c>
    24fa:	2300      	movs	r3, #0
    24fc:	f003 0301 	and.w	r3, r3, #1
    2500:	b2db      	uxtb	r3, r3
    2502:	222b      	movs	r2, #43	; 0x2b
    2504:	4906      	ldr	r1, [pc, #24]	; (2520 <crc_sync_init+0x40>)
    2506:	4618      	mov	r0, r3
    2508:	4b06      	ldr	r3, [pc, #24]	; (2524 <crc_sync_init+0x44>)
    250a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	6839      	ldr	r1, [r7, #0]
    2510:	4618      	mov	r0, r3
    2512:	4b05      	ldr	r3, [pc, #20]	; (2528 <crc_sync_init+0x48>)
    2514:	4798      	blx	r3
    2516:	4603      	mov	r3, r0
}
    2518:	4618      	mov	r0, r3
    251a:	3708      	adds	r7, #8
    251c:	46bd      	mov	sp, r7
    251e:	bd80      	pop	{r7, pc}
    2520:	00011b2c 	.word	0x00011b2c
    2524:	00003cad 	.word	0x00003cad
    2528:	00004911 	.word	0x00004911

0000252c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    252c:	b590      	push	{r4, r7, lr}
    252e:	b083      	sub	sp, #12
    2530:	af00      	add	r7, sp, #0
    2532:	4603      	mov	r3, r0
    2534:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2536:	4b07      	ldr	r3, [pc, #28]	; (2554 <delay_us+0x28>)
    2538:	681c      	ldr	r4, [r3, #0]
    253a:	88fb      	ldrh	r3, [r7, #6]
    253c:	4618      	mov	r0, r3
    253e:	4b06      	ldr	r3, [pc, #24]	; (2558 <delay_us+0x2c>)
    2540:	4798      	blx	r3
    2542:	4603      	mov	r3, r0
    2544:	4619      	mov	r1, r3
    2546:	4620      	mov	r0, r4
    2548:	4b04      	ldr	r3, [pc, #16]	; (255c <delay_us+0x30>)
    254a:	4798      	blx	r3
}
    254c:	bf00      	nop
    254e:	370c      	adds	r7, #12
    2550:	46bd      	mov	sp, r7
    2552:	bd90      	pop	{r4, r7, pc}
    2554:	20000858 	.word	0x20000858
    2558:	00004661 	.word	0x00004661
    255c:	000047f9 	.word	0x000047f9

00002560 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2560:	b590      	push	{r4, r7, lr}
    2562:	b083      	sub	sp, #12
    2564:	af00      	add	r7, sp, #0
    2566:	4603      	mov	r3, r0
    2568:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    256a:	4b07      	ldr	r3, [pc, #28]	; (2588 <delay_ms+0x28>)
    256c:	681c      	ldr	r4, [r3, #0]
    256e:	88fb      	ldrh	r3, [r7, #6]
    2570:	4618      	mov	r0, r3
    2572:	4b06      	ldr	r3, [pc, #24]	; (258c <delay_ms+0x2c>)
    2574:	4798      	blx	r3
    2576:	4603      	mov	r3, r0
    2578:	4619      	mov	r1, r3
    257a:	4620      	mov	r0, r4
    257c:	4b04      	ldr	r3, [pc, #16]	; (2590 <delay_ms+0x30>)
    257e:	4798      	blx	r3
}
    2580:	bf00      	nop
    2582:	370c      	adds	r7, #12
    2584:	46bd      	mov	sp, r7
    2586:	bd90      	pop	{r4, r7, pc}
    2588:	20000858 	.word	0x20000858
    258c:	000047cd 	.word	0x000047cd
    2590:	000047f9 	.word	0x000047f9

00002594 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2594:	b580      	push	{r7, lr}
    2596:	af00      	add	r7, sp, #0
	return _event_system_init();
    2598:	4b02      	ldr	r3, [pc, #8]	; (25a4 <event_system_init+0x10>)
    259a:	4798      	blx	r3
    259c:	4603      	mov	r3, r0
}
    259e:	4618      	mov	r0, r3
    25a0:	bd80      	pop	{r7, pc}
    25a2:	bf00      	nop
    25a4:	000050cd 	.word	0x000050cd

000025a8 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    25a8:	b580      	push	{r7, lr}
    25aa:	b082      	sub	sp, #8
    25ac:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    25ae:	2300      	movs	r3, #0
    25b0:	80fb      	strh	r3, [r7, #6]
    25b2:	e00e      	b.n	25d2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    25b4:	88fb      	ldrh	r3, [r7, #6]
    25b6:	4a0c      	ldr	r2, [pc, #48]	; (25e8 <ext_irq_init+0x40>)
    25b8:	00db      	lsls	r3, r3, #3
    25ba:	4413      	add	r3, r2
    25bc:	f04f 32ff 	mov.w	r2, #4294967295
    25c0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    25c2:	88fb      	ldrh	r3, [r7, #6]
    25c4:	4a08      	ldr	r2, [pc, #32]	; (25e8 <ext_irq_init+0x40>)
    25c6:	2100      	movs	r1, #0
    25c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    25cc:	88fb      	ldrh	r3, [r7, #6]
    25ce:	3301      	adds	r3, #1
    25d0:	80fb      	strh	r3, [r7, #6]
    25d2:	88fb      	ldrh	r3, [r7, #6]
    25d4:	2b08      	cmp	r3, #8
    25d6:	d9ed      	bls.n	25b4 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    25d8:	4804      	ldr	r0, [pc, #16]	; (25ec <ext_irq_init+0x44>)
    25da:	4b05      	ldr	r3, [pc, #20]	; (25f0 <ext_irq_init+0x48>)
    25dc:	4798      	blx	r3
    25de:	4603      	mov	r3, r0
}
    25e0:	4618      	mov	r0, r3
    25e2:	3708      	adds	r7, #8
    25e4:	46bd      	mov	sp, r7
    25e6:	bd80      	pop	{r7, pc}
    25e8:	2000085c 	.word	0x2000085c
    25ec:	0000274d 	.word	0x0000274d
    25f0:	00004c51 	.word	0x00004c51

000025f4 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    25f4:	b580      	push	{r7, lr}
    25f6:	b086      	sub	sp, #24
    25f8:	af00      	add	r7, sp, #0
    25fa:	6078      	str	r0, [r7, #4]
    25fc:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    25fe:	2300      	movs	r3, #0
    2600:	75fb      	strb	r3, [r7, #23]
    2602:	2300      	movs	r3, #0
    2604:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    2606:	2300      	movs	r3, #0
    2608:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    260a:	e012      	b.n	2632 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    260c:	7dfb      	ldrb	r3, [r7, #23]
    260e:	4a4d      	ldr	r2, [pc, #308]	; (2744 <ext_irq_register+0x150>)
    2610:	00db      	lsls	r3, r3, #3
    2612:	4413      	add	r3, r2
    2614:	685a      	ldr	r2, [r3, #4]
    2616:	687b      	ldr	r3, [r7, #4]
    2618:	429a      	cmp	r2, r3
    261a:	d107      	bne.n	262c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    261c:	7dfb      	ldrb	r3, [r7, #23]
    261e:	4949      	ldr	r1, [pc, #292]	; (2744 <ext_irq_register+0x150>)
    2620:	683a      	ldr	r2, [r7, #0]
    2622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    2626:	2301      	movs	r3, #1
    2628:	757b      	strb	r3, [r7, #21]
			break;
    262a:	e005      	b.n	2638 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    262c:	7dfb      	ldrb	r3, [r7, #23]
    262e:	3301      	adds	r3, #1
    2630:	75fb      	strb	r3, [r7, #23]
    2632:	7dfb      	ldrb	r3, [r7, #23]
    2634:	2b08      	cmp	r3, #8
    2636:	d9e9      	bls.n	260c <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2638:	683b      	ldr	r3, [r7, #0]
    263a:	2b00      	cmp	r3, #0
    263c:	d10e      	bne.n	265c <ext_irq_register+0x68>
		if (!found) {
    263e:	7d7b      	ldrb	r3, [r7, #21]
    2640:	f083 0301 	eor.w	r3, r3, #1
    2644:	b2db      	uxtb	r3, r3
    2646:	2b00      	cmp	r3, #0
    2648:	d002      	beq.n	2650 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    264a:	f06f 030c 	mvn.w	r3, #12
    264e:	e074      	b.n	273a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2650:	2100      	movs	r1, #0
    2652:	6878      	ldr	r0, [r7, #4]
    2654:	4b3c      	ldr	r3, [pc, #240]	; (2748 <ext_irq_register+0x154>)
    2656:	4798      	blx	r3
    2658:	4603      	mov	r3, r0
    265a:	e06e      	b.n	273a <ext_irq_register+0x146>
	}

	if (!found) {
    265c:	7d7b      	ldrb	r3, [r7, #21]
    265e:	f083 0301 	eor.w	r3, r3, #1
    2662:	b2db      	uxtb	r3, r3
    2664:	2b00      	cmp	r3, #0
    2666:	d05a      	beq.n	271e <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2668:	2300      	movs	r3, #0
    266a:	75fb      	strb	r3, [r7, #23]
    266c:	e016      	b.n	269c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    266e:	7dfb      	ldrb	r3, [r7, #23]
    2670:	4a34      	ldr	r2, [pc, #208]	; (2744 <ext_irq_register+0x150>)
    2672:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2676:	2b00      	cmp	r3, #0
    2678:	d10d      	bne.n	2696 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    267a:	7dfb      	ldrb	r3, [r7, #23]
    267c:	4931      	ldr	r1, [pc, #196]	; (2744 <ext_irq_register+0x150>)
    267e:	683a      	ldr	r2, [r7, #0]
    2680:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2684:	7dfb      	ldrb	r3, [r7, #23]
    2686:	4a2f      	ldr	r2, [pc, #188]	; (2744 <ext_irq_register+0x150>)
    2688:	00db      	lsls	r3, r3, #3
    268a:	4413      	add	r3, r2
    268c:	687a      	ldr	r2, [r7, #4]
    268e:	605a      	str	r2, [r3, #4]
				found           = true;
    2690:	2301      	movs	r3, #1
    2692:	757b      	strb	r3, [r7, #21]
				break;
    2694:	e005      	b.n	26a2 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2696:	7dfb      	ldrb	r3, [r7, #23]
    2698:	3301      	adds	r3, #1
    269a:	75fb      	strb	r3, [r7, #23]
    269c:	7dfb      	ldrb	r3, [r7, #23]
    269e:	2b08      	cmp	r3, #8
    26a0:	d9e5      	bls.n	266e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    26a2:	e036      	b.n	2712 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    26a4:	7dfb      	ldrb	r3, [r7, #23]
    26a6:	4a27      	ldr	r2, [pc, #156]	; (2744 <ext_irq_register+0x150>)
    26a8:	00db      	lsls	r3, r3, #3
    26aa:	4413      	add	r3, r2
    26ac:	685a      	ldr	r2, [r3, #4]
    26ae:	7dbb      	ldrb	r3, [r7, #22]
    26b0:	4924      	ldr	r1, [pc, #144]	; (2744 <ext_irq_register+0x150>)
    26b2:	00db      	lsls	r3, r3, #3
    26b4:	440b      	add	r3, r1
    26b6:	685b      	ldr	r3, [r3, #4]
    26b8:	429a      	cmp	r2, r3
    26ba:	d227      	bcs.n	270c <ext_irq_register+0x118>
    26bc:	7dbb      	ldrb	r3, [r7, #22]
    26be:	4a21      	ldr	r2, [pc, #132]	; (2744 <ext_irq_register+0x150>)
    26c0:	00db      	lsls	r3, r3, #3
    26c2:	4413      	add	r3, r2
    26c4:	685b      	ldr	r3, [r3, #4]
    26c6:	f1b3 3fff 	cmp.w	r3, #4294967295
    26ca:	d01f      	beq.n	270c <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    26cc:	7dbb      	ldrb	r3, [r7, #22]
    26ce:	491d      	ldr	r1, [pc, #116]	; (2744 <ext_irq_register+0x150>)
    26d0:	f107 020c 	add.w	r2, r7, #12
    26d4:	00db      	lsls	r3, r3, #3
    26d6:	440b      	add	r3, r1
    26d8:	e893 0003 	ldmia.w	r3, {r0, r1}
    26dc:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    26e0:	7dbb      	ldrb	r3, [r7, #22]
    26e2:	7dfa      	ldrb	r2, [r7, #23]
    26e4:	4817      	ldr	r0, [pc, #92]	; (2744 <ext_irq_register+0x150>)
    26e6:	4917      	ldr	r1, [pc, #92]	; (2744 <ext_irq_register+0x150>)
    26e8:	00db      	lsls	r3, r3, #3
    26ea:	4403      	add	r3, r0
    26ec:	00d2      	lsls	r2, r2, #3
    26ee:	440a      	add	r2, r1
    26f0:	e892 0003 	ldmia.w	r2, {r0, r1}
    26f4:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    26f8:	7dfb      	ldrb	r3, [r7, #23]
    26fa:	4a12      	ldr	r2, [pc, #72]	; (2744 <ext_irq_register+0x150>)
    26fc:	00db      	lsls	r3, r3, #3
    26fe:	4413      	add	r3, r2
    2700:	f107 020c 	add.w	r2, r7, #12
    2704:	e892 0003 	ldmia.w	r2, {r0, r1}
    2708:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    270c:	7dbb      	ldrb	r3, [r7, #22]
    270e:	3301      	adds	r3, #1
    2710:	75bb      	strb	r3, [r7, #22]
    2712:	7dbb      	ldrb	r3, [r7, #22]
    2714:	2b08      	cmp	r3, #8
    2716:	d802      	bhi.n	271e <ext_irq_register+0x12a>
    2718:	7dfb      	ldrb	r3, [r7, #23]
    271a:	2b08      	cmp	r3, #8
    271c:	d9c2      	bls.n	26a4 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    271e:	7d7b      	ldrb	r3, [r7, #21]
    2720:	f083 0301 	eor.w	r3, r3, #1
    2724:	b2db      	uxtb	r3, r3
    2726:	2b00      	cmp	r3, #0
    2728:	d002      	beq.n	2730 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    272a:	f06f 030c 	mvn.w	r3, #12
    272e:	e004      	b.n	273a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2730:	2101      	movs	r1, #1
    2732:	6878      	ldr	r0, [r7, #4]
    2734:	4b04      	ldr	r3, [pc, #16]	; (2748 <ext_irq_register+0x154>)
    2736:	4798      	blx	r3
    2738:	4603      	mov	r3, r0
}
    273a:	4618      	mov	r0, r3
    273c:	3718      	adds	r7, #24
    273e:	46bd      	mov	sp, r7
    2740:	bd80      	pop	{r7, pc}
    2742:	bf00      	nop
    2744:	2000085c 	.word	0x2000085c
    2748:	00004de5 	.word	0x00004de5

0000274c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    274c:	b580      	push	{r7, lr}
    274e:	b084      	sub	sp, #16
    2750:	af00      	add	r7, sp, #0
    2752:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2754:	2300      	movs	r3, #0
    2756:	73fb      	strb	r3, [r7, #15]
    2758:	2309      	movs	r3, #9
    275a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    275c:	e02a      	b.n	27b4 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    275e:	7bba      	ldrb	r2, [r7, #14]
    2760:	7bfb      	ldrb	r3, [r7, #15]
    2762:	4413      	add	r3, r2
    2764:	105b      	asrs	r3, r3, #1
    2766:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2768:	7b7b      	ldrb	r3, [r7, #13]
    276a:	2b08      	cmp	r3, #8
    276c:	d827      	bhi.n	27be <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    276e:	7b7b      	ldrb	r3, [r7, #13]
    2770:	4a16      	ldr	r2, [pc, #88]	; (27cc <process_ext_irq+0x80>)
    2772:	00db      	lsls	r3, r3, #3
    2774:	4413      	add	r3, r2
    2776:	685a      	ldr	r2, [r3, #4]
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	429a      	cmp	r2, r3
    277c:	d10b      	bne.n	2796 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    277e:	7b7b      	ldrb	r3, [r7, #13]
    2780:	4a12      	ldr	r2, [pc, #72]	; (27cc <process_ext_irq+0x80>)
    2782:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2786:	2b00      	cmp	r3, #0
    2788:	d01b      	beq.n	27c2 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    278a:	7b7b      	ldrb	r3, [r7, #13]
    278c:	4a0f      	ldr	r2, [pc, #60]	; (27cc <process_ext_irq+0x80>)
    278e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2792:	4798      	blx	r3
			}
			return;
    2794:	e015      	b.n	27c2 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2796:	7b7b      	ldrb	r3, [r7, #13]
    2798:	4a0c      	ldr	r2, [pc, #48]	; (27cc <process_ext_irq+0x80>)
    279a:	00db      	lsls	r3, r3, #3
    279c:	4413      	add	r3, r2
    279e:	685a      	ldr	r2, [r3, #4]
    27a0:	687b      	ldr	r3, [r7, #4]
    27a2:	429a      	cmp	r2, r3
    27a4:	d203      	bcs.n	27ae <process_ext_irq+0x62>
			lower = middle + 1;
    27a6:	7b7b      	ldrb	r3, [r7, #13]
    27a8:	3301      	adds	r3, #1
    27aa:	73fb      	strb	r3, [r7, #15]
    27ac:	e002      	b.n	27b4 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    27ae:	7b7b      	ldrb	r3, [r7, #13]
    27b0:	3b01      	subs	r3, #1
    27b2:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    27b4:	7bba      	ldrb	r2, [r7, #14]
    27b6:	7bfb      	ldrb	r3, [r7, #15]
    27b8:	429a      	cmp	r2, r3
    27ba:	d2d0      	bcs.n	275e <process_ext_irq+0x12>
    27bc:	e002      	b.n	27c4 <process_ext_irq+0x78>
			return;
    27be:	bf00      	nop
    27c0:	e000      	b.n	27c4 <process_ext_irq+0x78>
			return;
    27c2:	bf00      	nop
		}
	}
}
    27c4:	3710      	adds	r7, #16
    27c6:	46bd      	mov	sp, r7
    27c8:	bd80      	pop	{r7, pc}
    27ca:	bf00      	nop
    27cc:	2000085c 	.word	0x2000085c

000027d0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    27d0:	b580      	push	{r7, lr}
    27d2:	b084      	sub	sp, #16
    27d4:	af00      	add	r7, sp, #0
    27d6:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	885b      	ldrh	r3, [r3, #2]
    27e0:	b29b      	uxth	r3, r3
    27e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    27e6:	2b00      	cmp	r3, #0
    27e8:	d107      	bne.n	27fa <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    27ea:	68fb      	ldr	r3, [r7, #12]
    27ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    27ee:	2b00      	cmp	r3, #0
    27f0:	d003      	beq.n	27fa <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    27f2:	68fb      	ldr	r3, [r7, #12]
    27f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    27f6:	68f8      	ldr	r0, [r7, #12]
    27f8:	4798      	blx	r3
		}
	}
}
    27fa:	bf00      	nop
    27fc:	3710      	adds	r7, #16
    27fe:	46bd      	mov	sp, r7
    2800:	bd80      	pop	{r7, pc}

00002802 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    2802:	b580      	push	{r7, lr}
    2804:	b084      	sub	sp, #16
    2806:	af00      	add	r7, sp, #0
    2808:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    280e:	687b      	ldr	r3, [r7, #4]
    2810:	885b      	ldrh	r3, [r3, #2]
    2812:	b29b      	uxth	r3, r3
    2814:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2818:	2b00      	cmp	r3, #0
    281a:	d107      	bne.n	282c <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    281c:	68fb      	ldr	r3, [r7, #12]
    281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2820:	2b00      	cmp	r3, #0
    2822:	d003      	beq.n	282c <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    2824:	68fb      	ldr	r3, [r7, #12]
    2826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2828:	68f8      	ldr	r0, [r7, #12]
    282a:	4798      	blx	r3
		}
	}
}
    282c:	bf00      	nop
    282e:	3710      	adds	r7, #16
    2830:	46bd      	mov	sp, r7
    2832:	bd80      	pop	{r7, pc}

00002834 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    2834:	b580      	push	{r7, lr}
    2836:	b084      	sub	sp, #16
    2838:	af00      	add	r7, sp, #0
    283a:	6078      	str	r0, [r7, #4]
    283c:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2842:	687b      	ldr	r3, [r7, #4]
    2844:	885b      	ldrh	r3, [r3, #2]
    2846:	b29b      	uxth	r3, r3
    2848:	f403 7380 	and.w	r3, r3, #256	; 0x100
    284c:	2b00      	cmp	r3, #0
    284e:	d108      	bne.n	2862 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    2850:	68fb      	ldr	r3, [r7, #12]
    2852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2854:	2b00      	cmp	r3, #0
    2856:	d004      	beq.n	2862 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    2858:	68fb      	ldr	r3, [r7, #12]
    285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    285c:	6839      	ldr	r1, [r7, #0]
    285e:	68f8      	ldr	r0, [r7, #12]
    2860:	4798      	blx	r3
		}
	}
}
    2862:	bf00      	nop
    2864:	3710      	adds	r7, #16
    2866:	46bd      	mov	sp, r7
    2868:	bd80      	pop	{r7, pc}
	...

0000286c <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    286c:	b580      	push	{r7, lr}
    286e:	b08a      	sub	sp, #40	; 0x28
    2870:	af00      	add	r7, sp, #0
    2872:	60f8      	str	r0, [r7, #12]
    2874:	60b9      	str	r1, [r7, #8]
    2876:	4613      	mov	r3, r2
    2878:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    287a:	68fb      	ldr	r3, [r7, #12]
    287c:	3b28      	subs	r3, #40	; 0x28
    287e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2882:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2884:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2886:	88fb      	ldrh	r3, [r7, #6]
    2888:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    288a:	f248 0301 	movw	r3, #32769	; 0x8001
    288e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2890:	68bb      	ldr	r3, [r7, #8]
    2892:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2896:	f107 0214 	add.w	r2, r7, #20
    289a:	4611      	mov	r1, r2
    289c:	4618      	mov	r0, r3
    289e:	4b06      	ldr	r3, [pc, #24]	; (28b8 <i2c_m_async_read+0x4c>)
    28a0:	4798      	blx	r3
    28a2:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    28a4:	6a3b      	ldr	r3, [r7, #32]
    28a6:	2b00      	cmp	r3, #0
    28a8:	d001      	beq.n	28ae <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    28aa:	6a3b      	ldr	r3, [r7, #32]
    28ac:	e000      	b.n	28b0 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    28ae:	88fb      	ldrh	r3, [r7, #6]
}
    28b0:	4618      	mov	r0, r3
    28b2:	3728      	adds	r7, #40	; 0x28
    28b4:	46bd      	mov	sp, r7
    28b6:	bd80      	pop	{r7, pc}
    28b8:	00006e91 	.word	0x00006e91

000028bc <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    28bc:	b580      	push	{r7, lr}
    28be:	b08a      	sub	sp, #40	; 0x28
    28c0:	af00      	add	r7, sp, #0
    28c2:	60f8      	str	r0, [r7, #12]
    28c4:	60b9      	str	r1, [r7, #8]
    28c6:	4613      	mov	r3, r2
    28c8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    28ca:	68fb      	ldr	r3, [r7, #12]
    28cc:	3b28      	subs	r3, #40	; 0x28
    28ce:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    28d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28d2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    28d4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    28d6:	88fb      	ldrh	r3, [r7, #6]
    28d8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    28da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    28de:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    28e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28e6:	f107 0214 	add.w	r2, r7, #20
    28ea:	4611      	mov	r1, r2
    28ec:	4618      	mov	r0, r3
    28ee:	4b06      	ldr	r3, [pc, #24]	; (2908 <i2c_m_async_write+0x4c>)
    28f0:	4798      	blx	r3
    28f2:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    28f4:	6a3b      	ldr	r3, [r7, #32]
    28f6:	2b00      	cmp	r3, #0
    28f8:	d001      	beq.n	28fe <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    28fa:	6a3b      	ldr	r3, [r7, #32]
    28fc:	e000      	b.n	2900 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    28fe:	88fb      	ldrh	r3, [r7, #6]
}
    2900:	4618      	mov	r0, r3
    2902:	3728      	adds	r7, #40	; 0x28
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}
    2908:	00006e91 	.word	0x00006e91

0000290c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    290c:	b580      	push	{r7, lr}
    290e:	b084      	sub	sp, #16
    2910:	af00      	add	r7, sp, #0
    2912:	6078      	str	r0, [r7, #4]
    2914:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	2b00      	cmp	r3, #0
    291a:	bf14      	ite	ne
    291c:	2301      	movne	r3, #1
    291e:	2300      	moveq	r3, #0
    2920:	b2db      	uxtb	r3, r3
    2922:	2289      	movs	r2, #137	; 0x89
    2924:	4915      	ldr	r1, [pc, #84]	; (297c <i2c_m_async_init+0x70>)
    2926:	4618      	mov	r0, r3
    2928:	4b15      	ldr	r3, [pc, #84]	; (2980 <i2c_m_async_init+0x74>)
    292a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	6839      	ldr	r1, [r7, #0]
    2930:	4618      	mov	r0, r3
    2932:	4b14      	ldr	r3, [pc, #80]	; (2984 <i2c_m_async_init+0x78>)
    2934:	4798      	blx	r3
    2936:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2938:	68fb      	ldr	r3, [r7, #12]
    293a:	2b00      	cmp	r3, #0
    293c:	d001      	beq.n	2942 <i2c_m_async_init+0x36>
		return init_status;
    293e:	68fb      	ldr	r3, [r7, #12]
    2940:	e018      	b.n	2974 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    2942:	687b      	ldr	r3, [r7, #4]
    2944:	4a10      	ldr	r2, [pc, #64]	; (2988 <i2c_m_async_init+0x7c>)
    2946:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    2948:	687b      	ldr	r3, [r7, #4]
    294a:	4a10      	ldr	r2, [pc, #64]	; (298c <i2c_m_async_init+0x80>)
    294c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    294e:	687b      	ldr	r3, [r7, #4]
    2950:	4a0f      	ldr	r2, [pc, #60]	; (2990 <i2c_m_async_init+0x84>)
    2952:	2101      	movs	r1, #1
    2954:	4618      	mov	r0, r3
    2956:	4b0f      	ldr	r3, [pc, #60]	; (2994 <i2c_m_async_init+0x88>)
    2958:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    295a:	687b      	ldr	r3, [r7, #4]
    295c:	4a0e      	ldr	r2, [pc, #56]	; (2998 <i2c_m_async_init+0x8c>)
    295e:	2102      	movs	r1, #2
    2960:	4618      	mov	r0, r3
    2962:	4b0c      	ldr	r3, [pc, #48]	; (2994 <i2c_m_async_init+0x88>)
    2964:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    2966:	687b      	ldr	r3, [r7, #4]
    2968:	4a0c      	ldr	r2, [pc, #48]	; (299c <i2c_m_async_init+0x90>)
    296a:	2100      	movs	r1, #0
    296c:	4618      	mov	r0, r3
    296e:	4b09      	ldr	r3, [pc, #36]	; (2994 <i2c_m_async_init+0x88>)
    2970:	4798      	blx	r3

	return ERR_NONE;
    2972:	2300      	movs	r3, #0
}
    2974:	4618      	mov	r0, r3
    2976:	3710      	adds	r7, #16
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}
    297c:	00011b48 	.word	0x00011b48
    2980:	00003cad 	.word	0x00003cad
    2984:	00006ce1 	.word	0x00006ce1
    2988:	0000286d 	.word	0x0000286d
    298c:	000028bd 	.word	0x000028bd
    2990:	000027d1 	.word	0x000027d1
    2994:	00006f65 	.word	0x00006f65
    2998:	00002803 	.word	0x00002803
    299c:	00002835 	.word	0x00002835

000029a0 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    29a0:	b580      	push	{r7, lr}
    29a2:	b08a      	sub	sp, #40	; 0x28
    29a4:	af00      	add	r7, sp, #0
    29a6:	60f8      	str	r0, [r7, #12]
    29a8:	60b9      	str	r1, [r7, #8]
    29aa:	4613      	mov	r3, r2
    29ac:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    29ae:	68fb      	ldr	r3, [r7, #12]
    29b0:	3b14      	subs	r3, #20
    29b2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    29b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29b6:	8b9b      	ldrh	r3, [r3, #28]
    29b8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    29ba:	88fb      	ldrh	r3, [r7, #6]
    29bc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    29be:	f248 0301 	movw	r3, #32769	; 0x8001
    29c2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    29c4:	68bb      	ldr	r3, [r7, #8]
    29c6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    29c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29ca:	f107 0214 	add.w	r2, r7, #20
    29ce:	4611      	mov	r1, r2
    29d0:	4618      	mov	r0, r3
    29d2:	4b06      	ldr	r3, [pc, #24]	; (29ec <i2c_m_sync_read+0x4c>)
    29d4:	4798      	blx	r3
    29d6:	6238      	str	r0, [r7, #32]

	if (ret) {
    29d8:	6a3b      	ldr	r3, [r7, #32]
    29da:	2b00      	cmp	r3, #0
    29dc:	d001      	beq.n	29e2 <i2c_m_sync_read+0x42>
		return ret;
    29de:	6a3b      	ldr	r3, [r7, #32]
    29e0:	e000      	b.n	29e4 <i2c_m_sync_read+0x44>
	}

	return n;
    29e2:	88fb      	ldrh	r3, [r7, #6]
}
    29e4:	4618      	mov	r0, r3
    29e6:	3728      	adds	r7, #40	; 0x28
    29e8:	46bd      	mov	sp, r7
    29ea:	bd80      	pop	{r7, pc}
    29ec:	000071ad 	.word	0x000071ad

000029f0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    29f0:	b580      	push	{r7, lr}
    29f2:	b08a      	sub	sp, #40	; 0x28
    29f4:	af00      	add	r7, sp, #0
    29f6:	60f8      	str	r0, [r7, #12]
    29f8:	60b9      	str	r1, [r7, #8]
    29fa:	4613      	mov	r3, r2
    29fc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    29fe:	68fb      	ldr	r3, [r7, #12]
    2a00:	3b14      	subs	r3, #20
    2a02:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a06:	8b9b      	ldrh	r3, [r3, #28]
    2a08:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2a0a:	88fb      	ldrh	r3, [r7, #6]
    2a0c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2a12:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2a14:	68bb      	ldr	r3, [r7, #8]
    2a16:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a1a:	f107 0214 	add.w	r2, r7, #20
    2a1e:	4611      	mov	r1, r2
    2a20:	4618      	mov	r0, r3
    2a22:	4b06      	ldr	r3, [pc, #24]	; (2a3c <i2c_m_sync_write+0x4c>)
    2a24:	4798      	blx	r3
    2a26:	6238      	str	r0, [r7, #32]

	if (ret) {
    2a28:	6a3b      	ldr	r3, [r7, #32]
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d001      	beq.n	2a32 <i2c_m_sync_write+0x42>
		return ret;
    2a2e:	6a3b      	ldr	r3, [r7, #32]
    2a30:	e000      	b.n	2a34 <i2c_m_sync_write+0x44>
	}

	return n;
    2a32:	88fb      	ldrh	r3, [r7, #6]
}
    2a34:	4618      	mov	r0, r3
    2a36:	3728      	adds	r7, #40	; 0x28
    2a38:	46bd      	mov	sp, r7
    2a3a:	bd80      	pop	{r7, pc}
    2a3c:	000071ad 	.word	0x000071ad

00002a40 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2a40:	b580      	push	{r7, lr}
    2a42:	b084      	sub	sp, #16
    2a44:	af00      	add	r7, sp, #0
    2a46:	6078      	str	r0, [r7, #4]
    2a48:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2a4a:	687b      	ldr	r3, [r7, #4]
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	bf14      	ite	ne
    2a50:	2301      	movne	r3, #1
    2a52:	2300      	moveq	r3, #0
    2a54:	b2db      	uxtb	r3, r3
    2a56:	225e      	movs	r2, #94	; 0x5e
    2a58:	490c      	ldr	r1, [pc, #48]	; (2a8c <i2c_m_sync_init+0x4c>)
    2a5a:	4618      	mov	r0, r3
    2a5c:	4b0c      	ldr	r3, [pc, #48]	; (2a90 <i2c_m_sync_init+0x50>)
    2a5e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2a60:	687b      	ldr	r3, [r7, #4]
    2a62:	6839      	ldr	r1, [r7, #0]
    2a64:	4618      	mov	r0, r3
    2a66:	4b0b      	ldr	r3, [pc, #44]	; (2a94 <i2c_m_sync_init+0x54>)
    2a68:	4798      	blx	r3
    2a6a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2a6c:	68fb      	ldr	r3, [r7, #12]
    2a6e:	2b00      	cmp	r3, #0
    2a70:	d001      	beq.n	2a76 <i2c_m_sync_init+0x36>
		return init_status;
    2a72:	68fb      	ldr	r3, [r7, #12]
    2a74:	e006      	b.n	2a84 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2a76:	687b      	ldr	r3, [r7, #4]
    2a78:	4a07      	ldr	r2, [pc, #28]	; (2a98 <i2c_m_sync_init+0x58>)
    2a7a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2a7c:	687b      	ldr	r3, [r7, #4]
    2a7e:	4a07      	ldr	r2, [pc, #28]	; (2a9c <i2c_m_sync_init+0x5c>)
    2a80:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2a82:	2300      	movs	r3, #0
}
    2a84:	4618      	mov	r0, r3
    2a86:	3710      	adds	r7, #16
    2a88:	46bd      	mov	sp, r7
    2a8a:	bd80      	pop	{r7, pc}
    2a8c:	00011b68 	.word	0x00011b68
    2a90:	00003cad 	.word	0x00003cad
    2a94:	00006fa9 	.word	0x00006fa9
    2a98:	000029a1 	.word	0x000029a1
    2a9c:	000029f1 	.word	0x000029f1

00002aa0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2aa0:	b580      	push	{r7, lr}
    2aa2:	b082      	sub	sp, #8
    2aa4:	af00      	add	r7, sp, #0
    2aa6:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	4618      	mov	r0, r3
    2aac:	4b03      	ldr	r3, [pc, #12]	; (2abc <i2c_m_sync_enable+0x1c>)
    2aae:	4798      	blx	r3
    2ab0:	4603      	mov	r3, r0
}
    2ab2:	4618      	mov	r0, r3
    2ab4:	3708      	adds	r7, #8
    2ab6:	46bd      	mov	sp, r7
    2ab8:	bd80      	pop	{r7, pc}
    2aba:	bf00      	nop
    2abc:	00006ff1 	.word	0x00006ff1

00002ac0 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2ac0:	b480      	push	{r7}
    2ac2:	b085      	sub	sp, #20
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	60f8      	str	r0, [r7, #12]
    2ac8:	460b      	mov	r3, r1
    2aca:	607a      	str	r2, [r7, #4]
    2acc:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2ace:	897b      	ldrh	r3, [r7, #10]
    2ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2ad4:	b21a      	sxth	r2, r3
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	b21b      	sxth	r3, r3
    2ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2ade:	b21b      	sxth	r3, r3
    2ae0:	4313      	orrs	r3, r2
    2ae2:	b21b      	sxth	r3, r3
    2ae4:	b29a      	uxth	r2, r3
    2ae6:	68fb      	ldr	r3, [r7, #12]
    2ae8:	839a      	strh	r2, [r3, #28]
    2aea:	68fb      	ldr	r3, [r7, #12]
    2aec:	8b9b      	ldrh	r3, [r3, #28]
}
    2aee:	4618      	mov	r0, r3
    2af0:	3714      	adds	r7, #20
    2af2:	46bd      	mov	sp, r7
    2af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2af8:	4770      	bx	lr

00002afa <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2afa:	b480      	push	{r7}
    2afc:	b083      	sub	sp, #12
    2afe:	af00      	add	r7, sp, #0
    2b00:	6078      	str	r0, [r7, #4]
    2b02:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2b04:	687b      	ldr	r3, [r7, #4]
    2b06:	f103 0214 	add.w	r2, r3, #20
    2b0a:	683b      	ldr	r3, [r7, #0]
    2b0c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2b0e:	2300      	movs	r3, #0
}
    2b10:	4618      	mov	r0, r3
    2b12:	370c      	adds	r7, #12
    2b14:	46bd      	mov	sp, r7
    2b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b1a:	4770      	bx	lr

00002b1c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2b1c:	b580      	push	{r7, lr}
    2b1e:	b084      	sub	sp, #16
    2b20:	af00      	add	r7, sp, #0
    2b22:	60f8      	str	r0, [r7, #12]
    2b24:	60b9      	str	r1, [r7, #8]
    2b26:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2b28:	68fb      	ldr	r3, [r7, #12]
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d004      	beq.n	2b38 <pwm_init+0x1c>
    2b2e:	68bb      	ldr	r3, [r7, #8]
    2b30:	2b00      	cmp	r3, #0
    2b32:	d001      	beq.n	2b38 <pwm_init+0x1c>
    2b34:	2301      	movs	r3, #1
    2b36:	e000      	b.n	2b3a <pwm_init+0x1e>
    2b38:	2300      	movs	r3, #0
    2b3a:	f003 0301 	and.w	r3, r3, #1
    2b3e:	b2db      	uxtb	r3, r3
    2b40:	2233      	movs	r2, #51	; 0x33
    2b42:	490a      	ldr	r1, [pc, #40]	; (2b6c <pwm_init+0x50>)
    2b44:	4618      	mov	r0, r3
    2b46:	4b0a      	ldr	r3, [pc, #40]	; (2b70 <pwm_init+0x54>)
    2b48:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2b4a:	68fb      	ldr	r3, [r7, #12]
    2b4c:	68b9      	ldr	r1, [r7, #8]
    2b4e:	4618      	mov	r0, r3
    2b50:	4b08      	ldr	r3, [pc, #32]	; (2b74 <pwm_init+0x58>)
    2b52:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	4a08      	ldr	r2, [pc, #32]	; (2b78 <pwm_init+0x5c>)
    2b58:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2b5a:	68fb      	ldr	r3, [r7, #12]
    2b5c:	4a07      	ldr	r2, [pc, #28]	; (2b7c <pwm_init+0x60>)
    2b5e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2b60:	2300      	movs	r3, #0
}
    2b62:	4618      	mov	r0, r3
    2b64:	3710      	adds	r7, #16
    2b66:	46bd      	mov	sp, r7
    2b68:	bd80      	pop	{r7, pc}
    2b6a:	bf00      	nop
    2b6c:	00011b84 	.word	0x00011b84
    2b70:	00003cad 	.word	0x00003cad
    2b74:	000087ad 	.word	0x000087ad
    2b78:	00002b81 	.word	0x00002b81
    2b7c:	00002ba5 	.word	0x00002ba5

00002b80 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2b80:	b580      	push	{r7, lr}
    2b82:	b084      	sub	sp, #16
    2b84:	af00      	add	r7, sp, #0
    2b86:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2b88:	687b      	ldr	r3, [r7, #4]
    2b8a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2b8c:	68fb      	ldr	r3, [r7, #12]
    2b8e:	695b      	ldr	r3, [r3, #20]
    2b90:	2b00      	cmp	r3, #0
    2b92:	d003      	beq.n	2b9c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2b94:	68fb      	ldr	r3, [r7, #12]
    2b96:	695b      	ldr	r3, [r3, #20]
    2b98:	68f8      	ldr	r0, [r7, #12]
    2b9a:	4798      	blx	r3
	}
}
    2b9c:	bf00      	nop
    2b9e:	3710      	adds	r7, #16
    2ba0:	46bd      	mov	sp, r7
    2ba2:	bd80      	pop	{r7, pc}

00002ba4 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2ba4:	b580      	push	{r7, lr}
    2ba6:	b084      	sub	sp, #16
    2ba8:	af00      	add	r7, sp, #0
    2baa:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2bb0:	68fb      	ldr	r3, [r7, #12]
    2bb2:	699b      	ldr	r3, [r3, #24]
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d003      	beq.n	2bc0 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2bb8:	68fb      	ldr	r3, [r7, #12]
    2bba:	699b      	ldr	r3, [r3, #24]
    2bbc:	68f8      	ldr	r0, [r7, #12]
    2bbe:	4798      	blx	r3
	}
}
    2bc0:	bf00      	nop
    2bc2:	3710      	adds	r7, #16
    2bc4:	46bd      	mov	sp, r7
    2bc6:	bd80      	pop	{r7, pc}

00002bc8 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2bc8:	b580      	push	{r7, lr}
    2bca:	b082      	sub	sp, #8
    2bcc:	af00      	add	r7, sp, #0
    2bce:	6078      	str	r0, [r7, #4]
    2bd0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d004      	beq.n	2be2 <qspi_sync_init+0x1a>
    2bd8:	683b      	ldr	r3, [r7, #0]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d001      	beq.n	2be2 <qspi_sync_init+0x1a>
    2bde:	2301      	movs	r3, #1
    2be0:	e000      	b.n	2be4 <qspi_sync_init+0x1c>
    2be2:	2300      	movs	r3, #0
    2be4:	f003 0301 	and.w	r3, r3, #1
    2be8:	b2db      	uxtb	r3, r3
    2bea:	2231      	movs	r2, #49	; 0x31
    2bec:	4906      	ldr	r1, [pc, #24]	; (2c08 <qspi_sync_init+0x40>)
    2bee:	4618      	mov	r0, r3
    2bf0:	4b06      	ldr	r3, [pc, #24]	; (2c0c <qspi_sync_init+0x44>)
    2bf2:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2bf4:	687b      	ldr	r3, [r7, #4]
    2bf6:	6839      	ldr	r1, [r7, #0]
    2bf8:	4618      	mov	r0, r3
    2bfa:	4b05      	ldr	r3, [pc, #20]	; (2c10 <qspi_sync_init+0x48>)
    2bfc:	4798      	blx	r3
    2bfe:	4603      	mov	r3, r0
}
    2c00:	4618      	mov	r0, r3
    2c02:	3708      	adds	r7, #8
    2c04:	46bd      	mov	sp, r7
    2c06:	bd80      	pop	{r7, pc}
    2c08:	00011b9c 	.word	0x00011b9c
    2c0c:	00003cad 	.word	0x00003cad
    2c10:	00005c95 	.word	0x00005c95

00002c14 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2c14:	b580      	push	{r7, lr}
    2c16:	b082      	sub	sp, #8
    2c18:	af00      	add	r7, sp, #0
    2c1a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	2b00      	cmp	r3, #0
    2c20:	bf14      	ite	ne
    2c22:	2301      	movne	r3, #1
    2c24:	2300      	moveq	r3, #0
    2c26:	b2db      	uxtb	r3, r3
    2c28:	223f      	movs	r2, #63	; 0x3f
    2c2a:	4906      	ldr	r1, [pc, #24]	; (2c44 <qspi_sync_enable+0x30>)
    2c2c:	4618      	mov	r0, r3
    2c2e:	4b06      	ldr	r3, [pc, #24]	; (2c48 <qspi_sync_enable+0x34>)
    2c30:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	4618      	mov	r0, r3
    2c36:	4b05      	ldr	r3, [pc, #20]	; (2c4c <qspi_sync_enable+0x38>)
    2c38:	4798      	blx	r3
    2c3a:	4603      	mov	r3, r0
}
    2c3c:	4618      	mov	r0, r3
    2c3e:	3708      	adds	r7, #8
    2c40:	46bd      	mov	sp, r7
    2c42:	bd80      	pop	{r7, pc}
    2c44:	00011b9c 	.word	0x00011b9c
    2c48:	00003cad 	.word	0x00003cad
    2c4c:	00005d09 	.word	0x00005d09

00002c50 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2c50:	b580      	push	{r7, lr}
    2c52:	b082      	sub	sp, #8
    2c54:	af00      	add	r7, sp, #0
    2c56:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2c58:	687b      	ldr	r3, [r7, #4]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	bf14      	ite	ne
    2c5e:	2301      	movne	r3, #1
    2c60:	2300      	moveq	r3, #0
    2c62:	b2db      	uxtb	r3, r3
    2c64:	2246      	movs	r2, #70	; 0x46
    2c66:	4906      	ldr	r1, [pc, #24]	; (2c80 <qspi_sync_disable+0x30>)
    2c68:	4618      	mov	r0, r3
    2c6a:	4b06      	ldr	r3, [pc, #24]	; (2c84 <qspi_sync_disable+0x34>)
    2c6c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2c6e:	687b      	ldr	r3, [r7, #4]
    2c70:	4618      	mov	r0, r3
    2c72:	4b05      	ldr	r3, [pc, #20]	; (2c88 <qspi_sync_disable+0x38>)
    2c74:	4798      	blx	r3
    2c76:	4603      	mov	r3, r0
}
    2c78:	4618      	mov	r0, r3
    2c7a:	3708      	adds	r7, #8
    2c7c:	46bd      	mov	sp, r7
    2c7e:	bd80      	pop	{r7, pc}
    2c80:	00011b9c 	.word	0x00011b9c
    2c84:	00003cad 	.word	0x00003cad
    2c88:	00005d2d 	.word	0x00005d2d

00002c8c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2c8c:	b580      	push	{r7, lr}
    2c8e:	b082      	sub	sp, #8
    2c90:	af00      	add	r7, sp, #0
    2c92:	6078      	str	r0, [r7, #4]
    2c94:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2c96:	687b      	ldr	r3, [r7, #4]
    2c98:	2b00      	cmp	r3, #0
    2c9a:	d004      	beq.n	2ca6 <qspi_sync_serial_run_command+0x1a>
    2c9c:	683b      	ldr	r3, [r7, #0]
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	d001      	beq.n	2ca6 <qspi_sync_serial_run_command+0x1a>
    2ca2:	2301      	movs	r3, #1
    2ca4:	e000      	b.n	2ca8 <qspi_sync_serial_run_command+0x1c>
    2ca6:	2300      	movs	r3, #0
    2ca8:	f003 0301 	and.w	r3, r3, #1
    2cac:	b2db      	uxtb	r3, r3
    2cae:	224d      	movs	r2, #77	; 0x4d
    2cb0:	4906      	ldr	r1, [pc, #24]	; (2ccc <qspi_sync_serial_run_command+0x40>)
    2cb2:	4618      	mov	r0, r3
    2cb4:	4b06      	ldr	r3, [pc, #24]	; (2cd0 <qspi_sync_serial_run_command+0x44>)
    2cb6:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	6839      	ldr	r1, [r7, #0]
    2cbc:	4618      	mov	r0, r3
    2cbe:	4b05      	ldr	r3, [pc, #20]	; (2cd4 <qspi_sync_serial_run_command+0x48>)
    2cc0:	4798      	blx	r3
    2cc2:	4603      	mov	r3, r0
}
    2cc4:	4618      	mov	r0, r3
    2cc6:	3708      	adds	r7, #8
    2cc8:	46bd      	mov	sp, r7
    2cca:	bd80      	pop	{r7, pc}
    2ccc:	00011b9c 	.word	0x00011b9c
    2cd0:	00003cad 	.word	0x00003cad
    2cd4:	00005e79 	.word	0x00005e79

00002cd8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2cd8:	b580      	push	{r7, lr}
    2cda:	b084      	sub	sp, #16
    2cdc:	af00      	add	r7, sp, #0
    2cde:	6078      	str	r0, [r7, #4]
    2ce0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2ce2:	2300      	movs	r3, #0
    2ce4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d004      	beq.n	2cf6 <spi_m_sync_init+0x1e>
    2cec:	683b      	ldr	r3, [r7, #0]
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d001      	beq.n	2cf6 <spi_m_sync_init+0x1e>
    2cf2:	2301      	movs	r3, #1
    2cf4:	e000      	b.n	2cf8 <spi_m_sync_init+0x20>
    2cf6:	2300      	movs	r3, #0
    2cf8:	f003 0301 	and.w	r3, r3, #1
    2cfc:	b2db      	uxtb	r3, r3
    2cfe:	2240      	movs	r2, #64	; 0x40
    2d00:	4910      	ldr	r1, [pc, #64]	; (2d44 <spi_m_sync_init+0x6c>)
    2d02:	4618      	mov	r0, r3
    2d04:	4b10      	ldr	r3, [pc, #64]	; (2d48 <spi_m_sync_init+0x70>)
    2d06:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2d08:	687b      	ldr	r3, [r7, #4]
    2d0a:	683a      	ldr	r2, [r7, #0]
    2d0c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	3304      	adds	r3, #4
    2d12:	6839      	ldr	r1, [r7, #0]
    2d14:	4618      	mov	r0, r3
    2d16:	4b0d      	ldr	r3, [pc, #52]	; (2d4c <spi_m_sync_init+0x74>)
    2d18:	4798      	blx	r3
    2d1a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2d1c:	68fb      	ldr	r3, [r7, #12]
    2d1e:	2b00      	cmp	r3, #0
    2d20:	da01      	bge.n	2d26 <spi_m_sync_init+0x4e>
		return rc;
    2d22:	68fb      	ldr	r3, [r7, #12]
    2d24:	e00a      	b.n	2d3c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2d26:	687b      	ldr	r3, [r7, #4]
    2d28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2d2c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	4a07      	ldr	r2, [pc, #28]	; (2d50 <spi_m_sync_init+0x78>)
    2d32:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2d34:	687b      	ldr	r3, [r7, #4]
    2d36:	4a07      	ldr	r2, [pc, #28]	; (2d54 <spi_m_sync_init+0x7c>)
    2d38:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2d3a:	2300      	movs	r3, #0
}
    2d3c:	4618      	mov	r0, r3
    2d3e:	3710      	adds	r7, #16
    2d40:	46bd      	mov	sp, r7
    2d42:	bd80      	pop	{r7, pc}
    2d44:	00011bb8 	.word	0x00011bb8
    2d48:	00003cad 	.word	0x00003cad
    2d4c:	000076b1 	.word	0x000076b1
    2d50:	00002d59 	.word	0x00002d59
    2d54:	00002db1 	.word	0x00002db1

00002d58 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2d58:	b580      	push	{r7, lr}
    2d5a:	b088      	sub	sp, #32
    2d5c:	af00      	add	r7, sp, #0
    2d5e:	60f8      	str	r0, [r7, #12]
    2d60:	60b9      	str	r1, [r7, #8]
    2d62:	4613      	mov	r3, r2
    2d64:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2d66:	68fb      	ldr	r3, [r7, #12]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	bf14      	ite	ne
    2d6c:	2301      	movne	r3, #1
    2d6e:	2300      	moveq	r3, #0
    2d70:	b2db      	uxtb	r3, r3
    2d72:	2287      	movs	r2, #135	; 0x87
    2d74:	490b      	ldr	r1, [pc, #44]	; (2da4 <_spi_m_sync_io_read+0x4c>)
    2d76:	4618      	mov	r0, r3
    2d78:	4b0b      	ldr	r3, [pc, #44]	; (2da8 <_spi_m_sync_io_read+0x50>)
    2d7a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2d7c:	68fb      	ldr	r3, [r7, #12]
    2d7e:	3b0c      	subs	r3, #12
    2d80:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2d82:	68bb      	ldr	r3, [r7, #8]
    2d84:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2d86:	2300      	movs	r3, #0
    2d88:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2d8a:	88fb      	ldrh	r3, [r7, #6]
    2d8c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2d8e:	f107 0310 	add.w	r3, r7, #16
    2d92:	4619      	mov	r1, r3
    2d94:	69f8      	ldr	r0, [r7, #28]
    2d96:	4b05      	ldr	r3, [pc, #20]	; (2dac <_spi_m_sync_io_read+0x54>)
    2d98:	4798      	blx	r3
    2d9a:	4603      	mov	r3, r0
}
    2d9c:	4618      	mov	r0, r3
    2d9e:	3720      	adds	r7, #32
    2da0:	46bd      	mov	sp, r7
    2da2:	bd80      	pop	{r7, pc}
    2da4:	00011bb8 	.word	0x00011bb8
    2da8:	00003cad 	.word	0x00003cad
    2dac:	00002e09 	.word	0x00002e09

00002db0 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2db0:	b580      	push	{r7, lr}
    2db2:	b088      	sub	sp, #32
    2db4:	af00      	add	r7, sp, #0
    2db6:	60f8      	str	r0, [r7, #12]
    2db8:	60b9      	str	r1, [r7, #8]
    2dba:	4613      	mov	r3, r2
    2dbc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2dbe:	68fb      	ldr	r3, [r7, #12]
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	bf14      	ite	ne
    2dc4:	2301      	movne	r3, #1
    2dc6:	2300      	moveq	r3, #0
    2dc8:	b2db      	uxtb	r3, r3
    2dca:	22a3      	movs	r2, #163	; 0xa3
    2dcc:	490b      	ldr	r1, [pc, #44]	; (2dfc <_spi_m_sync_io_write+0x4c>)
    2dce:	4618      	mov	r0, r3
    2dd0:	4b0b      	ldr	r3, [pc, #44]	; (2e00 <_spi_m_sync_io_write+0x50>)
    2dd2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2dd4:	68fb      	ldr	r3, [r7, #12]
    2dd6:	3b0c      	subs	r3, #12
    2dd8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2dda:	2300      	movs	r3, #0
    2ddc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2dde:	68bb      	ldr	r3, [r7, #8]
    2de0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2de2:	88fb      	ldrh	r3, [r7, #6]
    2de4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2de6:	f107 0310 	add.w	r3, r7, #16
    2dea:	4619      	mov	r1, r3
    2dec:	69f8      	ldr	r0, [r7, #28]
    2dee:	4b05      	ldr	r3, [pc, #20]	; (2e04 <_spi_m_sync_io_write+0x54>)
    2df0:	4798      	blx	r3
    2df2:	4603      	mov	r3, r0
}
    2df4:	4618      	mov	r0, r3
    2df6:	3720      	adds	r7, #32
    2df8:	46bd      	mov	sp, r7
    2dfa:	bd80      	pop	{r7, pc}
    2dfc:	00011bb8 	.word	0x00011bb8
    2e00:	00003cad 	.word	0x00003cad
    2e04:	00002e09 	.word	0x00002e09

00002e08 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2e08:	b580      	push	{r7, lr}
    2e0a:	b086      	sub	sp, #24
    2e0c:	af00      	add	r7, sp, #0
    2e0e:	6078      	str	r0, [r7, #4]
    2e10:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2e12:	687b      	ldr	r3, [r7, #4]
    2e14:	2b00      	cmp	r3, #0
    2e16:	d004      	beq.n	2e22 <spi_m_sync_transfer+0x1a>
    2e18:	683b      	ldr	r3, [r7, #0]
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d001      	beq.n	2e22 <spi_m_sync_transfer+0x1a>
    2e1e:	2301      	movs	r3, #1
    2e20:	e000      	b.n	2e24 <spi_m_sync_transfer+0x1c>
    2e22:	2300      	movs	r3, #0
    2e24:	f003 0301 	and.w	r3, r3, #1
    2e28:	b2db      	uxtb	r3, r3
    2e2a:	22b3      	movs	r2, #179	; 0xb3
    2e2c:	490c      	ldr	r1, [pc, #48]	; (2e60 <spi_m_sync_transfer+0x58>)
    2e2e:	4618      	mov	r0, r3
    2e30:	4b0c      	ldr	r3, [pc, #48]	; (2e64 <spi_m_sync_transfer+0x5c>)
    2e32:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2e34:	683b      	ldr	r3, [r7, #0]
    2e36:	681b      	ldr	r3, [r3, #0]
    2e38:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2e3a:	683b      	ldr	r3, [r7, #0]
    2e3c:	685b      	ldr	r3, [r3, #4]
    2e3e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2e40:	683b      	ldr	r3, [r7, #0]
    2e42:	689b      	ldr	r3, [r3, #8]
    2e44:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2e46:	687b      	ldr	r3, [r7, #4]
    2e48:	3304      	adds	r3, #4
    2e4a:	f107 020c 	add.w	r2, r7, #12
    2e4e:	4611      	mov	r1, r2
    2e50:	4618      	mov	r0, r3
    2e52:	4b05      	ldr	r3, [pc, #20]	; (2e68 <spi_m_sync_transfer+0x60>)
    2e54:	4798      	blx	r3
    2e56:	4603      	mov	r3, r0
}
    2e58:	4618      	mov	r0, r3
    2e5a:	3718      	adds	r7, #24
    2e5c:	46bd      	mov	sp, r7
    2e5e:	bd80      	pop	{r7, pc}
    2e60:	00011bb8 	.word	0x00011bb8
    2e64:	00003cad 	.word	0x00003cad
    2e68:	00007911 	.word	0x00007911

00002e6c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2e6c:	b480      	push	{r7}
    2e6e:	b083      	sub	sp, #12
    2e70:	af00      	add	r7, sp, #0
    2e72:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	681b      	ldr	r3, [r3, #0]
}
    2e78:	4618      	mov	r0, r3
    2e7a:	370c      	adds	r7, #12
    2e7c:	46bd      	mov	sp, r7
    2e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e82:	4770      	bx	lr

00002e84 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2e84:	b480      	push	{r7}
    2e86:	b083      	sub	sp, #12
    2e88:	af00      	add	r7, sp, #0
    2e8a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2e8c:	687b      	ldr	r3, [r7, #4]
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d002      	beq.n	2e98 <list_get_next_element+0x14>
    2e92:	687b      	ldr	r3, [r7, #4]
    2e94:	681b      	ldr	r3, [r3, #0]
    2e96:	e000      	b.n	2e9a <list_get_next_element+0x16>
    2e98:	2300      	movs	r3, #0
}
    2e9a:	4618      	mov	r0, r3
    2e9c:	370c      	adds	r7, #12
    2e9e:	46bd      	mov	sp, r7
    2ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ea4:	4770      	bx	lr
	...

00002ea8 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2ea8:	b580      	push	{r7, lr}
    2eaa:	b084      	sub	sp, #16
    2eac:	af00      	add	r7, sp, #0
    2eae:	60f8      	str	r0, [r7, #12]
    2eb0:	60b9      	str	r1, [r7, #8]
    2eb2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2eb4:	68fb      	ldr	r3, [r7, #12]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d007      	beq.n	2eca <timer_init+0x22>
    2eba:	68bb      	ldr	r3, [r7, #8]
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	d004      	beq.n	2eca <timer_init+0x22>
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	d001      	beq.n	2eca <timer_init+0x22>
    2ec6:	2301      	movs	r3, #1
    2ec8:	e000      	b.n	2ecc <timer_init+0x24>
    2eca:	2300      	movs	r3, #0
    2ecc:	f003 0301 	and.w	r3, r3, #1
    2ed0:	b2db      	uxtb	r3, r3
    2ed2:	223b      	movs	r2, #59	; 0x3b
    2ed4:	490c      	ldr	r1, [pc, #48]	; (2f08 <timer_init+0x60>)
    2ed6:	4618      	mov	r0, r3
    2ed8:	4b0c      	ldr	r3, [pc, #48]	; (2f0c <timer_init+0x64>)
    2eda:	4798      	blx	r3
	descr->func = func;
    2edc:	68fb      	ldr	r3, [r7, #12]
    2ede:	687a      	ldr	r2, [r7, #4]
    2ee0:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2ee2:	68fb      	ldr	r3, [r7, #12]
    2ee4:	681b      	ldr	r3, [r3, #0]
    2ee6:	681b      	ldr	r3, [r3, #0]
    2ee8:	68fa      	ldr	r2, [r7, #12]
    2eea:	3204      	adds	r2, #4
    2eec:	68b9      	ldr	r1, [r7, #8]
    2eee:	4610      	mov	r0, r2
    2ef0:	4798      	blx	r3
	descr->time                           = 0;
    2ef2:	68fb      	ldr	r3, [r7, #12]
    2ef4:	2200      	movs	r2, #0
    2ef6:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2ef8:	68fb      	ldr	r3, [r7, #12]
    2efa:	4a05      	ldr	r2, [pc, #20]	; (2f10 <timer_init+0x68>)
    2efc:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2efe:	2300      	movs	r3, #0
}
    2f00:	4618      	mov	r0, r3
    2f02:	3710      	adds	r7, #16
    2f04:	46bd      	mov	sp, r7
    2f06:	bd80      	pop	{r7, pc}
    2f08:	00011bd4 	.word	0x00011bd4
    2f0c:	00003cad 	.word	0x00003cad
    2f10:	00003299 	.word	0x00003299

00002f14 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2f14:	b580      	push	{r7, lr}
    2f16:	b082      	sub	sp, #8
    2f18:	af00      	add	r7, sp, #0
    2f1a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2f1c:	687b      	ldr	r3, [r7, #4]
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d005      	beq.n	2f2e <timer_start+0x1a>
    2f22:	687b      	ldr	r3, [r7, #4]
    2f24:	681b      	ldr	r3, [r3, #0]
    2f26:	2b00      	cmp	r3, #0
    2f28:	d001      	beq.n	2f2e <timer_start+0x1a>
    2f2a:	2301      	movs	r3, #1
    2f2c:	e000      	b.n	2f30 <timer_start+0x1c>
    2f2e:	2300      	movs	r3, #0
    2f30:	f003 0301 	and.w	r3, r3, #1
    2f34:	b2db      	uxtb	r3, r3
    2f36:	2254      	movs	r2, #84	; 0x54
    2f38:	490e      	ldr	r1, [pc, #56]	; (2f74 <timer_start+0x60>)
    2f3a:	4618      	mov	r0, r3
    2f3c:	4b0e      	ldr	r3, [pc, #56]	; (2f78 <timer_start+0x64>)
    2f3e:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2f40:	687b      	ldr	r3, [r7, #4]
    2f42:	681b      	ldr	r3, [r3, #0]
    2f44:	699b      	ldr	r3, [r3, #24]
    2f46:	687a      	ldr	r2, [r7, #4]
    2f48:	3204      	adds	r2, #4
    2f4a:	4610      	mov	r0, r2
    2f4c:	4798      	blx	r3
    2f4e:	4603      	mov	r3, r0
    2f50:	2b00      	cmp	r3, #0
    2f52:	d002      	beq.n	2f5a <timer_start+0x46>
		return ERR_DENIED;
    2f54:	f06f 0310 	mvn.w	r3, #16
    2f58:	e007      	b.n	2f6a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2f5a:	687b      	ldr	r3, [r7, #4]
    2f5c:	681b      	ldr	r3, [r3, #0]
    2f5e:	689b      	ldr	r3, [r3, #8]
    2f60:	687a      	ldr	r2, [r7, #4]
    2f62:	3204      	adds	r2, #4
    2f64:	4610      	mov	r0, r2
    2f66:	4798      	blx	r3

	return ERR_NONE;
    2f68:	2300      	movs	r3, #0
}
    2f6a:	4618      	mov	r0, r3
    2f6c:	3708      	adds	r7, #8
    2f6e:	46bd      	mov	sp, r7
    2f70:	bd80      	pop	{r7, pc}
    2f72:	bf00      	nop
    2f74:	00011bd4 	.word	0x00011bd4
    2f78:	00003cad 	.word	0x00003cad

00002f7c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2f7c:	b580      	push	{r7, lr}
    2f7e:	b082      	sub	sp, #8
    2f80:	af00      	add	r7, sp, #0
    2f82:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d005      	beq.n	2f96 <timer_stop+0x1a>
    2f8a:	687b      	ldr	r3, [r7, #4]
    2f8c:	681b      	ldr	r3, [r3, #0]
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d001      	beq.n	2f96 <timer_stop+0x1a>
    2f92:	2301      	movs	r3, #1
    2f94:	e000      	b.n	2f98 <timer_stop+0x1c>
    2f96:	2300      	movs	r3, #0
    2f98:	f003 0301 	and.w	r3, r3, #1
    2f9c:	b2db      	uxtb	r3, r3
    2f9e:	2262      	movs	r2, #98	; 0x62
    2fa0:	490f      	ldr	r1, [pc, #60]	; (2fe0 <timer_stop+0x64>)
    2fa2:	4618      	mov	r0, r3
    2fa4:	4b0f      	ldr	r3, [pc, #60]	; (2fe4 <timer_stop+0x68>)
    2fa6:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	681b      	ldr	r3, [r3, #0]
    2fac:	699b      	ldr	r3, [r3, #24]
    2fae:	687a      	ldr	r2, [r7, #4]
    2fb0:	3204      	adds	r2, #4
    2fb2:	4610      	mov	r0, r2
    2fb4:	4798      	blx	r3
    2fb6:	4603      	mov	r3, r0
    2fb8:	f083 0301 	eor.w	r3, r3, #1
    2fbc:	b2db      	uxtb	r3, r3
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	d002      	beq.n	2fc8 <timer_stop+0x4c>
		return ERR_DENIED;
    2fc2:	f06f 0310 	mvn.w	r3, #16
    2fc6:	e007      	b.n	2fd8 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2fc8:	687b      	ldr	r3, [r7, #4]
    2fca:	681b      	ldr	r3, [r3, #0]
    2fcc:	68db      	ldr	r3, [r3, #12]
    2fce:	687a      	ldr	r2, [r7, #4]
    2fd0:	3204      	adds	r2, #4
    2fd2:	4610      	mov	r0, r2
    2fd4:	4798      	blx	r3

	return ERR_NONE;
    2fd6:	2300      	movs	r3, #0
}
    2fd8:	4618      	mov	r0, r3
    2fda:	3708      	adds	r7, #8
    2fdc:	46bd      	mov	sp, r7
    2fde:	bd80      	pop	{r7, pc}
    2fe0:	00011bd4 	.word	0x00011bd4
    2fe4:	00003cad 	.word	0x00003cad

00002fe8 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2fe8:	b580      	push	{r7, lr}
    2fea:	b084      	sub	sp, #16
    2fec:	af00      	add	r7, sp, #0
    2fee:	6078      	str	r0, [r7, #4]
    2ff0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d008      	beq.n	300a <timer_add_task+0x22>
    2ff8:	683b      	ldr	r3, [r7, #0]
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	d005      	beq.n	300a <timer_add_task+0x22>
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	681b      	ldr	r3, [r3, #0]
    3002:	2b00      	cmp	r3, #0
    3004:	d001      	beq.n	300a <timer_add_task+0x22>
    3006:	2301      	movs	r3, #1
    3008:	e000      	b.n	300c <timer_add_task+0x24>
    300a:	2300      	movs	r3, #0
    300c:	f003 0301 	and.w	r3, r3, #1
    3010:	b2db      	uxtb	r3, r3
    3012:	227b      	movs	r2, #123	; 0x7b
    3014:	492f      	ldr	r1, [pc, #188]	; (30d4 <timer_add_task+0xec>)
    3016:	4618      	mov	r0, r3
    3018:	4b2f      	ldr	r3, [pc, #188]	; (30d8 <timer_add_task+0xf0>)
    301a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    301c:	687b      	ldr	r3, [r7, #4]
    301e:	7f1b      	ldrb	r3, [r3, #28]
    3020:	b2db      	uxtb	r3, r3
    3022:	f043 0301 	orr.w	r3, r3, #1
    3026:	b2da      	uxtb	r2, r3
    3028:	687b      	ldr	r3, [r7, #4]
    302a:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	3318      	adds	r3, #24
    3030:	6839      	ldr	r1, [r7, #0]
    3032:	4618      	mov	r0, r3
    3034:	4b29      	ldr	r3, [pc, #164]	; (30dc <timer_add_task+0xf4>)
    3036:	4798      	blx	r3
    3038:	4603      	mov	r3, r0
    303a:	2b00      	cmp	r3, #0
    303c:	d00f      	beq.n	305e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    303e:	687b      	ldr	r3, [r7, #4]
    3040:	7f1b      	ldrb	r3, [r3, #28]
    3042:	b2db      	uxtb	r3, r3
    3044:	f023 0301 	bic.w	r3, r3, #1
    3048:	b2da      	uxtb	r2, r3
    304a:	687b      	ldr	r3, [r7, #4]
    304c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    304e:	2280      	movs	r2, #128	; 0x80
    3050:	4920      	ldr	r1, [pc, #128]	; (30d4 <timer_add_task+0xec>)
    3052:	2000      	movs	r0, #0
    3054:	4b20      	ldr	r3, [pc, #128]	; (30d8 <timer_add_task+0xf0>)
    3056:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3058:	f06f 0311 	mvn.w	r3, #17
    305c:	e035      	b.n	30ca <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    305e:	687b      	ldr	r3, [r7, #4]
    3060:	695a      	ldr	r2, [r3, #20]
    3062:	683b      	ldr	r3, [r7, #0]
    3064:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    3066:	687b      	ldr	r3, [r7, #4]
    3068:	f103 0018 	add.w	r0, r3, #24
    306c:	687b      	ldr	r3, [r7, #4]
    306e:	695b      	ldr	r3, [r3, #20]
    3070:	461a      	mov	r2, r3
    3072:	6839      	ldr	r1, [r7, #0]
    3074:	4b1a      	ldr	r3, [pc, #104]	; (30e0 <timer_add_task+0xf8>)
    3076:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3078:	687b      	ldr	r3, [r7, #4]
    307a:	7f1b      	ldrb	r3, [r3, #28]
    307c:	b2db      	uxtb	r3, r3
    307e:	f023 0301 	bic.w	r3, r3, #1
    3082:	b2da      	uxtb	r2, r3
    3084:	687b      	ldr	r3, [r7, #4]
    3086:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3088:	687b      	ldr	r3, [r7, #4]
    308a:	7f1b      	ldrb	r3, [r3, #28]
    308c:	b2db      	uxtb	r3, r3
    308e:	f003 0302 	and.w	r3, r3, #2
    3092:	2b00      	cmp	r3, #0
    3094:	d018      	beq.n	30c8 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    3096:	f107 030c 	add.w	r3, r7, #12
    309a:	4618      	mov	r0, r3
    309c:	4b11      	ldr	r3, [pc, #68]	; (30e4 <timer_add_task+0xfc>)
    309e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	7f1b      	ldrb	r3, [r3, #28]
    30a4:	b2db      	uxtb	r3, r3
    30a6:	f023 0302 	bic.w	r3, r3, #2
    30aa:	b2da      	uxtb	r2, r3
    30ac:	687b      	ldr	r3, [r7, #4]
    30ae:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	69db      	ldr	r3, [r3, #28]
    30b6:	687a      	ldr	r2, [r7, #4]
    30b8:	3204      	adds	r2, #4
    30ba:	4610      	mov	r0, r2
    30bc:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    30be:	f107 030c 	add.w	r3, r7, #12
    30c2:	4618      	mov	r0, r3
    30c4:	4b08      	ldr	r3, [pc, #32]	; (30e8 <timer_add_task+0x100>)
    30c6:	4798      	blx	r3
	}

	return ERR_NONE;
    30c8:	2300      	movs	r3, #0
}
    30ca:	4618      	mov	r0, r3
    30cc:	3710      	adds	r7, #16
    30ce:	46bd      	mov	sp, r7
    30d0:	bd80      	pop	{r7, pc}
    30d2:	bf00      	nop
    30d4:	00011bd4 	.word	0x00011bd4
    30d8:	00003cad 	.word	0x00003cad
    30dc:	00003cd5 	.word	0x00003cd5
    30e0:	000031e9 	.word	0x000031e9
    30e4:	0000bcbd 	.word	0x0000bcbd
    30e8:	0000bce3 	.word	0x0000bce3

000030ec <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    30ec:	b580      	push	{r7, lr}
    30ee:	b084      	sub	sp, #16
    30f0:	af00      	add	r7, sp, #0
    30f2:	6078      	str	r0, [r7, #4]
    30f4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	2b00      	cmp	r3, #0
    30fa:	d008      	beq.n	310e <timer_remove_task+0x22>
    30fc:	683b      	ldr	r3, [r7, #0]
    30fe:	2b00      	cmp	r3, #0
    3100:	d005      	beq.n	310e <timer_remove_task+0x22>
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	681b      	ldr	r3, [r3, #0]
    3106:	2b00      	cmp	r3, #0
    3108:	d001      	beq.n	310e <timer_remove_task+0x22>
    310a:	2301      	movs	r3, #1
    310c:	e000      	b.n	3110 <timer_remove_task+0x24>
    310e:	2300      	movs	r3, #0
    3110:	f003 0301 	and.w	r3, r3, #1
    3114:	b2db      	uxtb	r3, r3
    3116:	2296      	movs	r2, #150	; 0x96
    3118:	492d      	ldr	r1, [pc, #180]	; (31d0 <timer_remove_task+0xe4>)
    311a:	4618      	mov	r0, r3
    311c:	4b2d      	ldr	r3, [pc, #180]	; (31d4 <timer_remove_task+0xe8>)
    311e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3120:	687b      	ldr	r3, [r7, #4]
    3122:	7f1b      	ldrb	r3, [r3, #28]
    3124:	b2db      	uxtb	r3, r3
    3126:	f043 0301 	orr.w	r3, r3, #1
    312a:	b2da      	uxtb	r2, r3
    312c:	687b      	ldr	r3, [r7, #4]
    312e:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	3318      	adds	r3, #24
    3134:	6839      	ldr	r1, [r7, #0]
    3136:	4618      	mov	r0, r3
    3138:	4b27      	ldr	r3, [pc, #156]	; (31d8 <timer_remove_task+0xec>)
    313a:	4798      	blx	r3
    313c:	4603      	mov	r3, r0
    313e:	f083 0301 	eor.w	r3, r3, #1
    3142:	b2db      	uxtb	r3, r3
    3144:	2b00      	cmp	r3, #0
    3146:	d00f      	beq.n	3168 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3148:	687b      	ldr	r3, [r7, #4]
    314a:	7f1b      	ldrb	r3, [r3, #28]
    314c:	b2db      	uxtb	r3, r3
    314e:	f023 0301 	bic.w	r3, r3, #1
    3152:	b2da      	uxtb	r2, r3
    3154:	687b      	ldr	r3, [r7, #4]
    3156:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3158:	229b      	movs	r2, #155	; 0x9b
    315a:	491d      	ldr	r1, [pc, #116]	; (31d0 <timer_remove_task+0xe4>)
    315c:	2000      	movs	r0, #0
    315e:	4b1d      	ldr	r3, [pc, #116]	; (31d4 <timer_remove_task+0xe8>)
    3160:	4798      	blx	r3
		return ERR_NOT_FOUND;
    3162:	f06f 0309 	mvn.w	r3, #9
    3166:	e02e      	b.n	31c6 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    3168:	687b      	ldr	r3, [r7, #4]
    316a:	3318      	adds	r3, #24
    316c:	6839      	ldr	r1, [r7, #0]
    316e:	4618      	mov	r0, r3
    3170:	4b1a      	ldr	r3, [pc, #104]	; (31dc <timer_remove_task+0xf0>)
    3172:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3174:	687b      	ldr	r3, [r7, #4]
    3176:	7f1b      	ldrb	r3, [r3, #28]
    3178:	b2db      	uxtb	r3, r3
    317a:	f023 0301 	bic.w	r3, r3, #1
    317e:	b2da      	uxtb	r2, r3
    3180:	687b      	ldr	r3, [r7, #4]
    3182:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	7f1b      	ldrb	r3, [r3, #28]
    3188:	b2db      	uxtb	r3, r3
    318a:	f003 0302 	and.w	r3, r3, #2
    318e:	2b00      	cmp	r3, #0
    3190:	d018      	beq.n	31c4 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    3192:	f107 030c 	add.w	r3, r7, #12
    3196:	4618      	mov	r0, r3
    3198:	4b11      	ldr	r3, [pc, #68]	; (31e0 <timer_remove_task+0xf4>)
    319a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	7f1b      	ldrb	r3, [r3, #28]
    31a0:	b2db      	uxtb	r3, r3
    31a2:	f023 0302 	bic.w	r3, r3, #2
    31a6:	b2da      	uxtb	r2, r3
    31a8:	687b      	ldr	r3, [r7, #4]
    31aa:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    31ac:	687b      	ldr	r3, [r7, #4]
    31ae:	681b      	ldr	r3, [r3, #0]
    31b0:	69db      	ldr	r3, [r3, #28]
    31b2:	687a      	ldr	r2, [r7, #4]
    31b4:	3204      	adds	r2, #4
    31b6:	4610      	mov	r0, r2
    31b8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    31ba:	f107 030c 	add.w	r3, r7, #12
    31be:	4618      	mov	r0, r3
    31c0:	4b08      	ldr	r3, [pc, #32]	; (31e4 <timer_remove_task+0xf8>)
    31c2:	4798      	blx	r3
	}

	return ERR_NONE;
    31c4:	2300      	movs	r3, #0
}
    31c6:	4618      	mov	r0, r3
    31c8:	3710      	adds	r7, #16
    31ca:	46bd      	mov	sp, r7
    31cc:	bd80      	pop	{r7, pc}
    31ce:	bf00      	nop
    31d0:	00011bd4 	.word	0x00011bd4
    31d4:	00003cad 	.word	0x00003cad
    31d8:	00003cd5 	.word	0x00003cd5
    31dc:	00003e37 	.word	0x00003e37
    31e0:	0000bcbd 	.word	0x0000bcbd
    31e4:	0000bce3 	.word	0x0000bce3

000031e8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    31e8:	b580      	push	{r7, lr}
    31ea:	b088      	sub	sp, #32
    31ec:	af00      	add	r7, sp, #0
    31ee:	60f8      	str	r0, [r7, #12]
    31f0:	60b9      	str	r1, [r7, #8]
    31f2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    31f4:	2300      	movs	r3, #0
    31f6:	61bb      	str	r3, [r7, #24]
    31f8:	68f8      	ldr	r0, [r7, #12]
    31fa:	4b23      	ldr	r3, [pc, #140]	; (3288 <timer_add_timer_task+0xa0>)
    31fc:	4798      	blx	r3
    31fe:	6138      	str	r0, [r7, #16]

	if (!head) {
    3200:	693b      	ldr	r3, [r7, #16]
    3202:	2b00      	cmp	r3, #0
    3204:	d104      	bne.n	3210 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    3206:	68b9      	ldr	r1, [r7, #8]
    3208:	68f8      	ldr	r0, [r7, #12]
    320a:	4b20      	ldr	r3, [pc, #128]	; (328c <timer_add_timer_task+0xa4>)
    320c:	4798      	blx	r3
		return;
    320e:	e037      	b.n	3280 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3210:	693b      	ldr	r3, [r7, #16]
    3212:	61fb      	str	r3, [r7, #28]
    3214:	e022      	b.n	325c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    3216:	69fb      	ldr	r3, [r7, #28]
    3218:	685a      	ldr	r2, [r3, #4]
    321a:	687b      	ldr	r3, [r7, #4]
    321c:	429a      	cmp	r2, r3
    321e:	d808      	bhi.n	3232 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    3220:	69fb      	ldr	r3, [r7, #28]
    3222:	689a      	ldr	r2, [r3, #8]
    3224:	69fb      	ldr	r3, [r7, #28]
    3226:	6859      	ldr	r1, [r3, #4]
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	1acb      	subs	r3, r1, r3
    322c:	4413      	add	r3, r2
    322e:	617b      	str	r3, [r7, #20]
    3230:	e009      	b.n	3246 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    3232:	69fb      	ldr	r3, [r7, #28]
    3234:	689a      	ldr	r2, [r3, #8]
    3236:	69fb      	ldr	r3, [r7, #28]
    3238:	685b      	ldr	r3, [r3, #4]
    323a:	441a      	add	r2, r3
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	425b      	negs	r3, r3
    3240:	4413      	add	r3, r2
    3242:	3301      	adds	r3, #1
    3244:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    3246:	68bb      	ldr	r3, [r7, #8]
    3248:	689a      	ldr	r2, [r3, #8]
    324a:	697b      	ldr	r3, [r7, #20]
    324c:	429a      	cmp	r2, r3
    324e:	d909      	bls.n	3264 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3250:	69fb      	ldr	r3, [r7, #28]
    3252:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3254:	69f8      	ldr	r0, [r7, #28]
    3256:	4b0e      	ldr	r3, [pc, #56]	; (3290 <timer_add_timer_task+0xa8>)
    3258:	4798      	blx	r3
    325a:	61f8      	str	r0, [r7, #28]
    325c:	69fb      	ldr	r3, [r7, #28]
    325e:	2b00      	cmp	r3, #0
    3260:	d1d9      	bne.n	3216 <timer_add_timer_task+0x2e>
    3262:	e000      	b.n	3266 <timer_add_timer_task+0x7e>
			break;
    3264:	bf00      	nop
	}

	if (it == head) {
    3266:	69fa      	ldr	r2, [r7, #28]
    3268:	693b      	ldr	r3, [r7, #16]
    326a:	429a      	cmp	r2, r3
    326c:	d104      	bne.n	3278 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    326e:	68b9      	ldr	r1, [r7, #8]
    3270:	68f8      	ldr	r0, [r7, #12]
    3272:	4b06      	ldr	r3, [pc, #24]	; (328c <timer_add_timer_task+0xa4>)
    3274:	4798      	blx	r3
    3276:	e003      	b.n	3280 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    3278:	68b9      	ldr	r1, [r7, #8]
    327a:	69b8      	ldr	r0, [r7, #24]
    327c:	4b05      	ldr	r3, [pc, #20]	; (3294 <timer_add_timer_task+0xac>)
    327e:	4798      	blx	r3
	}
}
    3280:	3720      	adds	r7, #32
    3282:	46bd      	mov	sp, r7
    3284:	bd80      	pop	{r7, pc}
    3286:	bf00      	nop
    3288:	00002e6d 	.word	0x00002e6d
    328c:	00003d0d 	.word	0x00003d0d
    3290:	00002e85 	.word	0x00002e85
    3294:	00003d65 	.word	0x00003d65

00003298 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    3298:	b580      	push	{r7, lr}
    329a:	b086      	sub	sp, #24
    329c:	af00      	add	r7, sp, #0
    329e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	3b04      	subs	r3, #4
    32a4:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    32a6:	693b      	ldr	r3, [r7, #16]
    32a8:	3318      	adds	r3, #24
    32aa:	4618      	mov	r0, r3
    32ac:	4b27      	ldr	r3, [pc, #156]	; (334c <timer_process_counted+0xb4>)
    32ae:	4798      	blx	r3
    32b0:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    32b2:	693b      	ldr	r3, [r7, #16]
    32b4:	695b      	ldr	r3, [r3, #20]
    32b6:	1c5a      	adds	r2, r3, #1
    32b8:	693b      	ldr	r3, [r7, #16]
    32ba:	615a      	str	r2, [r3, #20]
    32bc:	693b      	ldr	r3, [r7, #16]
    32be:	695b      	ldr	r3, [r3, #20]
    32c0:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    32c2:	693b      	ldr	r3, [r7, #16]
    32c4:	7f1b      	ldrb	r3, [r3, #28]
    32c6:	b2db      	uxtb	r3, r3
    32c8:	f003 0301 	and.w	r3, r3, #1
    32cc:	2b00      	cmp	r3, #0
    32ce:	d106      	bne.n	32de <timer_process_counted+0x46>
    32d0:	693b      	ldr	r3, [r7, #16]
    32d2:	7f1b      	ldrb	r3, [r3, #28]
    32d4:	b2db      	uxtb	r3, r3
    32d6:	f003 0302 	and.w	r3, r3, #2
    32da:	2b00      	cmp	r3, #0
    32dc:	d027      	beq.n	332e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    32de:	693b      	ldr	r3, [r7, #16]
    32e0:	7f1b      	ldrb	r3, [r3, #28]
    32e2:	b2db      	uxtb	r3, r3
    32e4:	f043 0302 	orr.w	r3, r3, #2
    32e8:	b2da      	uxtb	r2, r3
    32ea:	693b      	ldr	r3, [r7, #16]
    32ec:	771a      	strb	r2, [r3, #28]
		return;
    32ee:	e029      	b.n	3344 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    32f0:	697b      	ldr	r3, [r7, #20]
    32f2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    32f4:	693b      	ldr	r3, [r7, #16]
    32f6:	3318      	adds	r3, #24
    32f8:	4618      	mov	r0, r3
    32fa:	4b15      	ldr	r3, [pc, #84]	; (3350 <timer_process_counted+0xb8>)
    32fc:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    32fe:	68bb      	ldr	r3, [r7, #8]
    3300:	7c1b      	ldrb	r3, [r3, #16]
    3302:	2b01      	cmp	r3, #1
    3304:	d109      	bne.n	331a <timer_process_counted+0x82>
			tmp->time_label = time;
    3306:	68bb      	ldr	r3, [r7, #8]
    3308:	68fa      	ldr	r2, [r7, #12]
    330a:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    330c:	693b      	ldr	r3, [r7, #16]
    330e:	3318      	adds	r3, #24
    3310:	68fa      	ldr	r2, [r7, #12]
    3312:	68b9      	ldr	r1, [r7, #8]
    3314:	4618      	mov	r0, r3
    3316:	4b0f      	ldr	r3, [pc, #60]	; (3354 <timer_process_counted+0xbc>)
    3318:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    331a:	693b      	ldr	r3, [r7, #16]
    331c:	3318      	adds	r3, #24
    331e:	4618      	mov	r0, r3
    3320:	4b0a      	ldr	r3, [pc, #40]	; (334c <timer_process_counted+0xb4>)
    3322:	4798      	blx	r3
    3324:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    3326:	68bb      	ldr	r3, [r7, #8]
    3328:	68db      	ldr	r3, [r3, #12]
    332a:	68b8      	ldr	r0, [r7, #8]
    332c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    332e:	697b      	ldr	r3, [r7, #20]
    3330:	2b00      	cmp	r3, #0
    3332:	d007      	beq.n	3344 <timer_process_counted+0xac>
    3334:	697b      	ldr	r3, [r7, #20]
    3336:	685b      	ldr	r3, [r3, #4]
    3338:	68fa      	ldr	r2, [r7, #12]
    333a:	1ad2      	subs	r2, r2, r3
    333c:	697b      	ldr	r3, [r7, #20]
    333e:	689b      	ldr	r3, [r3, #8]
    3340:	429a      	cmp	r2, r3
    3342:	d2d5      	bcs.n	32f0 <timer_process_counted+0x58>
	}
}
    3344:	3718      	adds	r7, #24
    3346:	46bd      	mov	sp, r7
    3348:	bd80      	pop	{r7, pc}
    334a:	bf00      	nop
    334c:	00002e6d 	.word	0x00002e6d
    3350:	00003e05 	.word	0x00003e05
    3354:	000031e9 	.word	0x000031e9

00003358 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    3358:	b480      	push	{r7}
    335a:	b085      	sub	sp, #20
    335c:	af00      	add	r7, sp, #0
    335e:	4603      	mov	r3, r0
    3360:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3362:	2300      	movs	r3, #0
    3364:	73fb      	strb	r3, [r7, #15]
    3366:	e029      	b.n	33bc <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3368:	f997 300f 	ldrsb.w	r3, [r7, #15]
    336c:	4a19      	ldr	r2, [pc, #100]	; (33d4 <_usb_d_find_ep+0x7c>)
    336e:	015b      	lsls	r3, r3, #5
    3370:	4413      	add	r3, r2
    3372:	3301      	adds	r3, #1
    3374:	781b      	ldrb	r3, [r3, #0]
    3376:	79fa      	ldrb	r2, [r7, #7]
    3378:	429a      	cmp	r2, r3
    337a:	d102      	bne.n	3382 <_usb_d_find_ep+0x2a>
			return i;
    337c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3380:	e022      	b.n	33c8 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    3382:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3386:	4a13      	ldr	r2, [pc, #76]	; (33d4 <_usb_d_find_ep+0x7c>)
    3388:	015b      	lsls	r3, r3, #5
    338a:	4413      	add	r3, r2
    338c:	781b      	ldrb	r3, [r3, #0]
    338e:	2b00      	cmp	r3, #0
    3390:	d10e      	bne.n	33b0 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3392:	79fb      	ldrb	r3, [r7, #7]
    3394:	f003 030f 	and.w	r3, r3, #15
    3398:	f997 200f 	ldrsb.w	r2, [r7, #15]
    339c:	490d      	ldr	r1, [pc, #52]	; (33d4 <_usb_d_find_ep+0x7c>)
    339e:	0152      	lsls	r2, r2, #5
    33a0:	440a      	add	r2, r1
    33a2:	3201      	adds	r2, #1
    33a4:	7812      	ldrb	r2, [r2, #0]
    33a6:	4293      	cmp	r3, r2
    33a8:	d102      	bne.n	33b0 <_usb_d_find_ep+0x58>
			return i;
    33aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    33ae:	e00b      	b.n	33c8 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    33b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    33b4:	b2db      	uxtb	r3, r3
    33b6:	3301      	adds	r3, #1
    33b8:	b2db      	uxtb	r3, r3
    33ba:	73fb      	strb	r3, [r7, #15]
    33bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    33c0:	2b03      	cmp	r3, #3
    33c2:	ddd1      	ble.n	3368 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    33c4:	f04f 33ff 	mov.w	r3, #4294967295
}
    33c8:	4618      	mov	r0, r3
    33ca:	3714      	adds	r7, #20
    33cc:	46bd      	mov	sp, r7
    33ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    33d2:	4770      	bx	lr
    33d4:	200008a4 	.word	0x200008a4

000033d8 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    33d8:	b580      	push	{r7, lr}
    33da:	b088      	sub	sp, #32
    33dc:	af00      	add	r7, sp, #0
    33de:	60ba      	str	r2, [r7, #8]
    33e0:	607b      	str	r3, [r7, #4]
    33e2:	4603      	mov	r3, r0
    33e4:	73fb      	strb	r3, [r7, #15]
    33e6:	460b      	mov	r3, r1
    33e8:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    33ea:	68bb      	ldr	r3, [r7, #8]
    33ec:	617b      	str	r3, [r7, #20]
    33ee:	687b      	ldr	r3, [r7, #4]
    33f0:	61bb      	str	r3, [r7, #24]
    33f2:	7bbb      	ldrb	r3, [r7, #14]
    33f4:	2b00      	cmp	r3, #0
    33f6:	d004      	beq.n	3402 <_usb_d_trans+0x2a>
    33f8:	7bfb      	ldrb	r3, [r7, #15]
    33fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    33fe:	b2db      	uxtb	r3, r3
    3400:	e003      	b.n	340a <_usb_d_trans+0x32>
    3402:	7bfb      	ldrb	r3, [r7, #15]
    3404:	f003 030f 	and.w	r3, r3, #15
    3408:	b2db      	uxtb	r3, r3
    340a:	773b      	strb	r3, [r7, #28]
    340c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3410:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3412:	f107 0314 	add.w	r3, r7, #20
    3416:	4618      	mov	r0, r3
    3418:	4b03      	ldr	r3, [pc, #12]	; (3428 <_usb_d_trans+0x50>)
    341a:	4798      	blx	r3
    341c:	4603      	mov	r3, r0
}
    341e:	4618      	mov	r0, r3
    3420:	3720      	adds	r7, #32
    3422:	46bd      	mov	sp, r7
    3424:	bd80      	pop	{r7, pc}
    3426:	bf00      	nop
    3428:	0000b2f1 	.word	0x0000b2f1

0000342c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    342c:	b480      	push	{r7}
    342e:	b085      	sub	sp, #20
    3430:	af00      	add	r7, sp, #0
    3432:	60f8      	str	r0, [r7, #12]
    3434:	60b9      	str	r1, [r7, #8]
    3436:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3438:	2300      	movs	r3, #0
}
    343a:	4618      	mov	r0, r3
    343c:	3714      	adds	r7, #20
    343e:	46bd      	mov	sp, r7
    3440:	f85d 7b04 	ldr.w	r7, [sp], #4
    3444:	4770      	bx	lr
	...

00003448 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3448:	b580      	push	{r7, lr}
    344a:	b086      	sub	sp, #24
    344c:	af00      	add	r7, sp, #0
    344e:	4603      	mov	r3, r0
    3450:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3452:	79fb      	ldrb	r3, [r7, #7]
    3454:	4618      	mov	r0, r3
    3456:	4b2a      	ldr	r3, [pc, #168]	; (3500 <usb_d_cb_trans_setup+0xb8>)
    3458:	4798      	blx	r3
    345a:	4603      	mov	r3, r0
    345c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    345e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3462:	015b      	lsls	r3, r3, #5
    3464:	4a27      	ldr	r2, [pc, #156]	; (3504 <usb_d_cb_trans_setup+0xbc>)
    3466:	4413      	add	r3, r2
    3468:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    346a:	693b      	ldr	r3, [r7, #16]
    346c:	330c      	adds	r3, #12
    346e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3470:	79fb      	ldrb	r3, [r7, #7]
    3472:	68f9      	ldr	r1, [r7, #12]
    3474:	4618      	mov	r0, r3
    3476:	4b24      	ldr	r3, [pc, #144]	; (3508 <usb_d_cb_trans_setup+0xc0>)
    3478:	4798      	blx	r3
    347a:	4603      	mov	r3, r0
    347c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    347e:	7afb      	ldrb	r3, [r7, #11]
    3480:	2b08      	cmp	r3, #8
    3482:	d00d      	beq.n	34a0 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3484:	79fb      	ldrb	r3, [r7, #7]
    3486:	2101      	movs	r1, #1
    3488:	4618      	mov	r0, r3
    348a:	4b20      	ldr	r3, [pc, #128]	; (350c <usb_d_cb_trans_setup+0xc4>)
    348c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    348e:	79fb      	ldrb	r3, [r7, #7]
    3490:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3494:	b2db      	uxtb	r3, r3
    3496:	2101      	movs	r1, #1
    3498:	4618      	mov	r0, r3
    349a:	4b1c      	ldr	r3, [pc, #112]	; (350c <usb_d_cb_trans_setup+0xc4>)
    349c:	4798      	blx	r3
		return;
    349e:	e02b      	b.n	34f8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    34a0:	79fb      	ldrb	r3, [r7, #7]
    34a2:	2100      	movs	r1, #0
    34a4:	4618      	mov	r0, r3
    34a6:	4b19      	ldr	r3, [pc, #100]	; (350c <usb_d_cb_trans_setup+0xc4>)
    34a8:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    34aa:	79fb      	ldrb	r3, [r7, #7]
    34ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    34b0:	b2db      	uxtb	r3, r3
    34b2:	2100      	movs	r1, #0
    34b4:	4618      	mov	r0, r3
    34b6:	4b15      	ldr	r3, [pc, #84]	; (350c <usb_d_cb_trans_setup+0xc4>)
    34b8:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    34ba:	693b      	ldr	r3, [r7, #16]
    34bc:	2201      	movs	r2, #1
    34be:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    34c0:	693b      	ldr	r3, [r7, #16]
    34c2:	695b      	ldr	r3, [r3, #20]
    34c4:	79fa      	ldrb	r2, [r7, #7]
    34c6:	68f9      	ldr	r1, [r7, #12]
    34c8:	4610      	mov	r0, r2
    34ca:	4798      	blx	r3
    34cc:	4603      	mov	r3, r0
    34ce:	f083 0301 	eor.w	r3, r3, #1
    34d2:	b2db      	uxtb	r3, r3
    34d4:	2b00      	cmp	r3, #0
    34d6:	d00f      	beq.n	34f8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    34d8:	693b      	ldr	r3, [r7, #16]
    34da:	2205      	movs	r2, #5
    34dc:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    34de:	79fb      	ldrb	r3, [r7, #7]
    34e0:	2101      	movs	r1, #1
    34e2:	4618      	mov	r0, r3
    34e4:	4b09      	ldr	r3, [pc, #36]	; (350c <usb_d_cb_trans_setup+0xc4>)
    34e6:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    34e8:	79fb      	ldrb	r3, [r7, #7]
    34ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    34ee:	b2db      	uxtb	r3, r3
    34f0:	2101      	movs	r1, #1
    34f2:	4618      	mov	r0, r3
    34f4:	4b05      	ldr	r3, [pc, #20]	; (350c <usb_d_cb_trans_setup+0xc4>)
    34f6:	4798      	blx	r3
	}
}
    34f8:	3718      	adds	r7, #24
    34fa:	46bd      	mov	sp, r7
    34fc:	bd80      	pop	{r7, pc}
    34fe:	bf00      	nop
    3500:	00003359 	.word	0x00003359
    3504:	200008a4 	.word	0x200008a4
    3508:	0000b249 	.word	0x0000b249
    350c:	0000b0c1 	.word	0x0000b0c1

00003510 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3510:	b580      	push	{r7, lr}
    3512:	b084      	sub	sp, #16
    3514:	af00      	add	r7, sp, #0
    3516:	4603      	mov	r3, r0
    3518:	6039      	str	r1, [r7, #0]
    351a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    351c:	79fb      	ldrb	r3, [r7, #7]
    351e:	4618      	mov	r0, r3
    3520:	4b0d      	ldr	r3, [pc, #52]	; (3558 <usb_d_cb_trans_more+0x48>)
    3522:	4798      	blx	r3
    3524:	4603      	mov	r3, r0
    3526:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3528:	f997 300f 	ldrsb.w	r3, [r7, #15]
    352c:	015b      	lsls	r3, r3, #5
    352e:	4a0b      	ldr	r2, [pc, #44]	; (355c <usb_d_cb_trans_more+0x4c>)
    3530:	4413      	add	r3, r2
    3532:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3534:	68bb      	ldr	r3, [r7, #8]
    3536:	789b      	ldrb	r3, [r3, #2]
    3538:	2b03      	cmp	r3, #3
    353a:	d107      	bne.n	354c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    353c:	68bb      	ldr	r3, [r7, #8]
    353e:	699b      	ldr	r3, [r3, #24]
    3540:	79fa      	ldrb	r2, [r7, #7]
    3542:	6839      	ldr	r1, [r7, #0]
    3544:	4610      	mov	r0, r2
    3546:	4798      	blx	r3
    3548:	4603      	mov	r3, r0
    354a:	e000      	b.n	354e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    354c:	2300      	movs	r3, #0
}
    354e:	4618      	mov	r0, r3
    3550:	3710      	adds	r7, #16
    3552:	46bd      	mov	sp, r7
    3554:	bd80      	pop	{r7, pc}
    3556:	bf00      	nop
    3558:	00003359 	.word	0x00003359
    355c:	200008a4 	.word	0x200008a4

00003560 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3560:	b590      	push	{r4, r7, lr}
    3562:	b087      	sub	sp, #28
    3564:	af02      	add	r7, sp, #8
    3566:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3568:	687b      	ldr	r3, [r7, #4]
    356a:	789b      	ldrb	r3, [r3, #2]
    356c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	7b1b      	ldrb	r3, [r3, #12]
    3572:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3576:	2b00      	cmp	r3, #0
    3578:	bf14      	ite	ne
    357a:	2301      	movne	r3, #1
    357c:	2300      	moveq	r3, #0
    357e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3580:	7bfb      	ldrb	r3, [r7, #15]
    3582:	2b03      	cmp	r3, #3
    3584:	d13a      	bne.n	35fc <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	69db      	ldr	r3, [r3, #28]
    358a:	687a      	ldr	r2, [r7, #4]
    358c:	7850      	ldrb	r0, [r2, #1]
    358e:	687a      	ldr	r2, [r7, #4]
    3590:	320c      	adds	r2, #12
    3592:	2101      	movs	r1, #1
    3594:	4798      	blx	r3
    3596:	4603      	mov	r3, r0
    3598:	737b      	strb	r3, [r7, #13]
		if (err) {
    359a:	7b7b      	ldrb	r3, [r7, #13]
    359c:	2b00      	cmp	r3, #0
    359e:	d015      	beq.n	35cc <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    35a0:	687b      	ldr	r3, [r7, #4]
    35a2:	2205      	movs	r2, #5
    35a4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    35a6:	687b      	ldr	r3, [r7, #4]
    35a8:	2202      	movs	r2, #2
    35aa:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    35ac:	7bbb      	ldrb	r3, [r7, #14]
    35ae:	2b00      	cmp	r3, #0
    35b0:	d002      	beq.n	35b8 <usb_d_ctrl_trans_done+0x58>
    35b2:	687b      	ldr	r3, [r7, #4]
    35b4:	785b      	ldrb	r3, [r3, #1]
    35b6:	e004      	b.n	35c2 <usb_d_ctrl_trans_done+0x62>
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	785b      	ldrb	r3, [r3, #1]
    35bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    35c0:	b2db      	uxtb	r3, r3
    35c2:	2101      	movs	r1, #1
    35c4:	4618      	mov	r0, r3
    35c6:	4b15      	ldr	r3, [pc, #84]	; (361c <usb_d_ctrl_trans_done+0xbc>)
    35c8:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    35ca:	e022      	b.n	3612 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    35cc:	687b      	ldr	r3, [r7, #4]
    35ce:	2204      	movs	r2, #4
    35d0:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    35d2:	687b      	ldr	r3, [r7, #4]
    35d4:	7858      	ldrb	r0, [r3, #1]
    35d6:	7bbb      	ldrb	r3, [r7, #14]
    35d8:	2b00      	cmp	r3, #0
    35da:	bf14      	ite	ne
    35dc:	2301      	movne	r3, #1
    35de:	2300      	moveq	r3, #0
    35e0:	b2db      	uxtb	r3, r3
    35e2:	f083 0301 	eor.w	r3, r3, #1
    35e6:	b2db      	uxtb	r3, r3
    35e8:	f003 0301 	and.w	r3, r3, #1
    35ec:	b2d9      	uxtb	r1, r3
    35ee:	2301      	movs	r3, #1
    35f0:	9300      	str	r3, [sp, #0]
    35f2:	2300      	movs	r3, #0
    35f4:	2200      	movs	r2, #0
    35f6:	4c0a      	ldr	r4, [pc, #40]	; (3620 <usb_d_ctrl_trans_done+0xc0>)
    35f8:	47a0      	blx	r4
}
    35fa:	e00a      	b.n	3612 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    35fc:	687b      	ldr	r3, [r7, #4]
    35fe:	69db      	ldr	r3, [r3, #28]
    3600:	687a      	ldr	r2, [r7, #4]
    3602:	7850      	ldrb	r0, [r2, #1]
    3604:	687a      	ldr	r2, [r7, #4]
    3606:	320c      	adds	r2, #12
    3608:	2100      	movs	r1, #0
    360a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    360c:	687b      	ldr	r3, [r7, #4]
    360e:	2202      	movs	r2, #2
    3610:	709a      	strb	r2, [r3, #2]
}
    3612:	bf00      	nop
    3614:	3714      	adds	r7, #20
    3616:	46bd      	mov	sp, r7
    3618:	bd90      	pop	{r4, r7, pc}
    361a:	bf00      	nop
    361c:	0000b0c1 	.word	0x0000b0c1
    3620:	000033d9 	.word	0x000033d9

00003624 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3624:	b580      	push	{r7, lr}
    3626:	b086      	sub	sp, #24
    3628:	af00      	add	r7, sp, #0
    362a:	4603      	mov	r3, r0
    362c:	60b9      	str	r1, [r7, #8]
    362e:	607a      	str	r2, [r7, #4]
    3630:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3632:	7bfb      	ldrb	r3, [r7, #15]
    3634:	4618      	mov	r0, r3
    3636:	4b2f      	ldr	r3, [pc, #188]	; (36f4 <_usb_d_cb_trans_done+0xd0>)
    3638:	4798      	blx	r3
    363a:	4603      	mov	r3, r0
    363c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    363e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3642:	015b      	lsls	r3, r3, #5
    3644:	4a2c      	ldr	r2, [pc, #176]	; (36f8 <_usb_d_cb_trans_done+0xd4>)
    3646:	4413      	add	r3, r2
    3648:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    364a:	68bb      	ldr	r3, [r7, #8]
    364c:	2b00      	cmp	r3, #0
    364e:	d10e      	bne.n	366e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3650:	693b      	ldr	r3, [r7, #16]
    3652:	2200      	movs	r2, #0
    3654:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3656:	693b      	ldr	r3, [r7, #16]
    3658:	781b      	ldrb	r3, [r3, #0]
    365a:	2b00      	cmp	r3, #0
    365c:	d103      	bne.n	3666 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    365e:	6938      	ldr	r0, [r7, #16]
    3660:	4b26      	ldr	r3, [pc, #152]	; (36fc <_usb_d_cb_trans_done+0xd8>)
    3662:	4798      	blx	r3
			return;
    3664:	e043      	b.n	36ee <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3666:	693b      	ldr	r3, [r7, #16]
    3668:	2201      	movs	r2, #1
    366a:	709a      	strb	r2, [r3, #2]
    366c:	e038      	b.n	36e0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    366e:	68bb      	ldr	r3, [r7, #8]
    3670:	2b01      	cmp	r3, #1
    3672:	d113      	bne.n	369c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3674:	693b      	ldr	r3, [r7, #16]
    3676:	2202      	movs	r2, #2
    3678:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    367a:	693b      	ldr	r3, [r7, #16]
    367c:	781b      	ldrb	r3, [r3, #0]
    367e:	2b00      	cmp	r3, #0
    3680:	d108      	bne.n	3694 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3682:	693b      	ldr	r3, [r7, #16]
    3684:	2202      	movs	r2, #2
    3686:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3688:	7bfb      	ldrb	r3, [r7, #15]
    368a:	2100      	movs	r1, #0
    368c:	4618      	mov	r0, r3
    368e:	4b1c      	ldr	r3, [pc, #112]	; (3700 <_usb_d_cb_trans_done+0xdc>)
    3690:	4798      	blx	r3
    3692:	e025      	b.n	36e0 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3694:	693b      	ldr	r3, [r7, #16]
    3696:	2205      	movs	r2, #5
    3698:	709a      	strb	r2, [r3, #2]
    369a:	e021      	b.n	36e0 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    369c:	68bb      	ldr	r3, [r7, #8]
    369e:	2b02      	cmp	r3, #2
    36a0:	d10e      	bne.n	36c0 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    36a2:	693b      	ldr	r3, [r7, #16]
    36a4:	2204      	movs	r2, #4
    36a6:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    36a8:	693b      	ldr	r3, [r7, #16]
    36aa:	781b      	ldrb	r3, [r3, #0]
    36ac:	2b00      	cmp	r3, #0
    36ae:	d103      	bne.n	36b8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    36b0:	693b      	ldr	r3, [r7, #16]
    36b2:	2202      	movs	r2, #2
    36b4:	709a      	strb	r2, [r3, #2]
			return;
    36b6:	e01a      	b.n	36ee <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    36b8:	693b      	ldr	r3, [r7, #16]
    36ba:	2201      	movs	r2, #1
    36bc:	709a      	strb	r2, [r3, #2]
    36be:	e00f      	b.n	36e0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    36c0:	68bb      	ldr	r3, [r7, #8]
    36c2:	2b03      	cmp	r3, #3
    36c4:	d106      	bne.n	36d4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    36c6:	693b      	ldr	r3, [r7, #16]
    36c8:	2200      	movs	r2, #0
    36ca:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    36cc:	693b      	ldr	r3, [r7, #16]
    36ce:	2205      	movs	r2, #5
    36d0:	70da      	strb	r2, [r3, #3]
    36d2:	e005      	b.n	36e0 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    36d4:	693b      	ldr	r3, [r7, #16]
    36d6:	2206      	movs	r2, #6
    36d8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    36da:	693b      	ldr	r3, [r7, #16]
    36dc:	2206      	movs	r2, #6
    36de:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    36e0:	693b      	ldr	r3, [r7, #16]
    36e2:	69db      	ldr	r3, [r3, #28]
    36e4:	693a      	ldr	r2, [r7, #16]
    36e6:	78d1      	ldrb	r1, [r2, #3]
    36e8:	687a      	ldr	r2, [r7, #4]
    36ea:	7bf8      	ldrb	r0, [r7, #15]
    36ec:	4798      	blx	r3
}
    36ee:	3718      	adds	r7, #24
    36f0:	46bd      	mov	sp, r7
    36f2:	bd80      	pop	{r7, pc}
    36f4:	00003359 	.word	0x00003359
    36f8:	200008a4 	.word	0x200008a4
    36fc:	00003561 	.word	0x00003561
    3700:	0000b0c1 	.word	0x0000b0c1

00003704 <usb_d_init>:

int32_t usb_d_init(void)
{
    3704:	b580      	push	{r7, lr}
    3706:	b082      	sub	sp, #8
    3708:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    370a:	4b21      	ldr	r3, [pc, #132]	; (3790 <usb_d_init+0x8c>)
    370c:	4798      	blx	r3
    370e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3710:	683b      	ldr	r3, [r7, #0]
    3712:	2b00      	cmp	r3, #0
    3714:	da01      	bge.n	371a <usb_d_init+0x16>
		return rc;
    3716:	683b      	ldr	r3, [r7, #0]
    3718:	e036      	b.n	3788 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    371a:	2280      	movs	r2, #128	; 0x80
    371c:	2100      	movs	r1, #0
    371e:	481d      	ldr	r0, [pc, #116]	; (3794 <usb_d_init+0x90>)
    3720:	4b1d      	ldr	r3, [pc, #116]	; (3798 <usb_d_init+0x94>)
    3722:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3724:	2300      	movs	r3, #0
    3726:	71fb      	strb	r3, [r7, #7]
    3728:	e01e      	b.n	3768 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    372a:	79fb      	ldrb	r3, [r7, #7]
    372c:	4a19      	ldr	r2, [pc, #100]	; (3794 <usb_d_init+0x90>)
    372e:	015b      	lsls	r3, r3, #5
    3730:	4413      	add	r3, r2
    3732:	3301      	adds	r3, #1
    3734:	22ff      	movs	r2, #255	; 0xff
    3736:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3738:	79fb      	ldrb	r3, [r7, #7]
    373a:	4a16      	ldr	r2, [pc, #88]	; (3794 <usb_d_init+0x90>)
    373c:	015b      	lsls	r3, r3, #5
    373e:	4413      	add	r3, r2
    3740:	3314      	adds	r3, #20
    3742:	4a16      	ldr	r2, [pc, #88]	; (379c <usb_d_init+0x98>)
    3744:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3746:	79fb      	ldrb	r3, [r7, #7]
    3748:	4a12      	ldr	r2, [pc, #72]	; (3794 <usb_d_init+0x90>)
    374a:	015b      	lsls	r3, r3, #5
    374c:	4413      	add	r3, r2
    374e:	3318      	adds	r3, #24
    3750:	4a12      	ldr	r2, [pc, #72]	; (379c <usb_d_init+0x98>)
    3752:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3754:	79fb      	ldrb	r3, [r7, #7]
    3756:	4a0f      	ldr	r2, [pc, #60]	; (3794 <usb_d_init+0x90>)
    3758:	015b      	lsls	r3, r3, #5
    375a:	4413      	add	r3, r2
    375c:	331c      	adds	r3, #28
    375e:	4a0f      	ldr	r2, [pc, #60]	; (379c <usb_d_init+0x98>)
    3760:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3762:	79fb      	ldrb	r3, [r7, #7]
    3764:	3301      	adds	r3, #1
    3766:	71fb      	strb	r3, [r7, #7]
    3768:	79fb      	ldrb	r3, [r7, #7]
    376a:	2b03      	cmp	r3, #3
    376c:	d9dd      	bls.n	372a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    376e:	490c      	ldr	r1, [pc, #48]	; (37a0 <usb_d_init+0x9c>)
    3770:	2000      	movs	r0, #0
    3772:	4b0c      	ldr	r3, [pc, #48]	; (37a4 <usb_d_init+0xa0>)
    3774:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3776:	490c      	ldr	r1, [pc, #48]	; (37a8 <usb_d_init+0xa4>)
    3778:	2001      	movs	r0, #1
    377a:	4b0a      	ldr	r3, [pc, #40]	; (37a4 <usb_d_init+0xa0>)
    377c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    377e:	490b      	ldr	r1, [pc, #44]	; (37ac <usb_d_init+0xa8>)
    3780:	2002      	movs	r0, #2
    3782:	4b08      	ldr	r3, [pc, #32]	; (37a4 <usb_d_init+0xa0>)
    3784:	4798      	blx	r3
	return ERR_NONE;
    3786:	2300      	movs	r3, #0
}
    3788:	4618      	mov	r0, r3
    378a:	3708      	adds	r7, #8
    378c:	46bd      	mov	sp, r7
    378e:	bd80      	pop	{r7, pc}
    3790:	0000a909 	.word	0x0000a909
    3794:	200008a4 	.word	0x200008a4
    3798:	000117e9 	.word	0x000117e9
    379c:	0000342d 	.word	0x0000342d
    37a0:	00003449 	.word	0x00003449
    37a4:	0000b551 	.word	0x0000b551
    37a8:	00003511 	.word	0x00003511
    37ac:	00003625 	.word	0x00003625

000037b0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    37b0:	b580      	push	{r7, lr}
    37b2:	b082      	sub	sp, #8
    37b4:	af00      	add	r7, sp, #0
    37b6:	4603      	mov	r3, r0
    37b8:	6039      	str	r1, [r7, #0]
    37ba:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    37bc:	79fb      	ldrb	r3, [r7, #7]
    37be:	6839      	ldr	r1, [r7, #0]
    37c0:	4618      	mov	r0, r3
    37c2:	4b03      	ldr	r3, [pc, #12]	; (37d0 <usb_d_register_callback+0x20>)
    37c4:	4798      	blx	r3
}
    37c6:	bf00      	nop
    37c8:	3708      	adds	r7, #8
    37ca:	46bd      	mov	sp, r7
    37cc:	bd80      	pop	{r7, pc}
    37ce:	bf00      	nop
    37d0:	0000b509 	.word	0x0000b509

000037d4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    37d4:	b580      	push	{r7, lr}
    37d6:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    37d8:	4b02      	ldr	r3, [pc, #8]	; (37e4 <usb_d_enable+0x10>)
    37da:	4798      	blx	r3
    37dc:	4603      	mov	r3, r0
}
    37de:	4618      	mov	r0, r3
    37e0:	bd80      	pop	{r7, pc}
    37e2:	bf00      	nop
    37e4:	0000a9f9 	.word	0x0000a9f9

000037e8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    37e8:	b580      	push	{r7, lr}
    37ea:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    37ec:	4b01      	ldr	r3, [pc, #4]	; (37f4 <usb_d_attach+0xc>)
    37ee:	4798      	blx	r3
}
    37f0:	bf00      	nop
    37f2:	bd80      	pop	{r7, pc}
    37f4:	0000aa7d 	.word	0x0000aa7d

000037f8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    37f8:	b580      	push	{r7, lr}
    37fa:	b082      	sub	sp, #8
    37fc:	af00      	add	r7, sp, #0
    37fe:	4603      	mov	r3, r0
    3800:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3802:	79fb      	ldrb	r3, [r7, #7]
    3804:	4618      	mov	r0, r3
    3806:	4b03      	ldr	r3, [pc, #12]	; (3814 <usb_d_set_address+0x1c>)
    3808:	4798      	blx	r3
}
    380a:	bf00      	nop
    380c:	3708      	adds	r7, #8
    380e:	46bd      	mov	sp, r7
    3810:	bd80      	pop	{r7, pc}
    3812:	bf00      	nop
    3814:	0000aa91 	.word	0x0000aa91

00003818 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3818:	b580      	push	{r7, lr}
    381a:	b082      	sub	sp, #8
    381c:	af00      	add	r7, sp, #0
    381e:	4603      	mov	r3, r0
    3820:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3822:	79fb      	ldrb	r3, [r7, #7]
    3824:	b29b      	uxth	r3, r3
    3826:	461a      	mov	r2, r3
    3828:	2100      	movs	r1, #0
    382a:	2000      	movs	r0, #0
    382c:	4b03      	ldr	r3, [pc, #12]	; (383c <usb_d_ep0_init+0x24>)
    382e:	4798      	blx	r3
    3830:	4603      	mov	r3, r0
}
    3832:	4618      	mov	r0, r3
    3834:	3708      	adds	r7, #8
    3836:	46bd      	mov	sp, r7
    3838:	bd80      	pop	{r7, pc}
    383a:	bf00      	nop
    383c:	00003841 	.word	0x00003841

00003840 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3840:	b580      	push	{r7, lr}
    3842:	b086      	sub	sp, #24
    3844:	af00      	add	r7, sp, #0
    3846:	4603      	mov	r3, r0
    3848:	71fb      	strb	r3, [r7, #7]
    384a:	460b      	mov	r3, r1
    384c:	71bb      	strb	r3, [r7, #6]
    384e:	4613      	mov	r3, r2
    3850:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3852:	79fb      	ldrb	r3, [r7, #7]
    3854:	4618      	mov	r0, r3
    3856:	4b1e      	ldr	r3, [pc, #120]	; (38d0 <usb_d_ep_init+0x90>)
    3858:	4798      	blx	r3
    385a:	4603      	mov	r3, r0
    385c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    385e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3862:	015b      	lsls	r3, r3, #5
    3864:	4a1b      	ldr	r2, [pc, #108]	; (38d4 <usb_d_ep_init+0x94>)
    3866:	4413      	add	r3, r2
    3868:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    386a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    386e:	2b00      	cmp	r3, #0
    3870:	db02      	blt.n	3878 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3872:	f06f 0313 	mvn.w	r3, #19
    3876:	e027      	b.n	38c8 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3878:	20ff      	movs	r0, #255	; 0xff
    387a:	4b15      	ldr	r3, [pc, #84]	; (38d0 <usb_d_ep_init+0x90>)
    387c:	4798      	blx	r3
    387e:	4603      	mov	r3, r0
    3880:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3882:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3886:	2b00      	cmp	r3, #0
    3888:	da02      	bge.n	3890 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    388a:	f06f 0314 	mvn.w	r3, #20
    388e:	e01b      	b.n	38c8 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3890:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3894:	015b      	lsls	r3, r3, #5
    3896:	4a0f      	ldr	r2, [pc, #60]	; (38d4 <usb_d_ep_init+0x94>)
    3898:	4413      	add	r3, r2
    389a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    389c:	88ba      	ldrh	r2, [r7, #4]
    389e:	79b9      	ldrb	r1, [r7, #6]
    38a0:	79fb      	ldrb	r3, [r7, #7]
    38a2:	4618      	mov	r0, r3
    38a4:	4b0c      	ldr	r3, [pc, #48]	; (38d8 <usb_d_ep_init+0x98>)
    38a6:	4798      	blx	r3
    38a8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    38aa:	68fb      	ldr	r3, [r7, #12]
    38ac:	2b00      	cmp	r3, #0
    38ae:	da01      	bge.n	38b4 <usb_d_ep_init+0x74>
		return rc;
    38b0:	68fb      	ldr	r3, [r7, #12]
    38b2:	e009      	b.n	38c8 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    38b4:	693b      	ldr	r3, [r7, #16]
    38b6:	79fa      	ldrb	r2, [r7, #7]
    38b8:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    38ba:	79bb      	ldrb	r3, [r7, #6]
    38bc:	f003 0303 	and.w	r3, r3, #3
    38c0:	b2da      	uxtb	r2, r3
    38c2:	693b      	ldr	r3, [r7, #16]
    38c4:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    38c6:	2300      	movs	r3, #0
}
    38c8:	4618      	mov	r0, r3
    38ca:	3718      	adds	r7, #24
    38cc:	46bd      	mov	sp, r7
    38ce:	bd80      	pop	{r7, pc}
    38d0:	00003359 	.word	0x00003359
    38d4:	200008a4 	.word	0x200008a4
    38d8:	0000ab31 	.word	0x0000ab31

000038dc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    38dc:	b580      	push	{r7, lr}
    38de:	b084      	sub	sp, #16
    38e0:	af00      	add	r7, sp, #0
    38e2:	4603      	mov	r3, r0
    38e4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    38e6:	79fb      	ldrb	r3, [r7, #7]
    38e8:	4618      	mov	r0, r3
    38ea:	4b0d      	ldr	r3, [pc, #52]	; (3920 <usb_d_ep_deinit+0x44>)
    38ec:	4798      	blx	r3
    38ee:	4603      	mov	r3, r0
    38f0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    38f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    38f6:	015b      	lsls	r3, r3, #5
    38f8:	4a0a      	ldr	r2, [pc, #40]	; (3924 <usb_d_ep_deinit+0x48>)
    38fa:	4413      	add	r3, r2
    38fc:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    38fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3902:	2b00      	cmp	r3, #0
    3904:	db07      	blt.n	3916 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3906:	79fb      	ldrb	r3, [r7, #7]
    3908:	4618      	mov	r0, r3
    390a:	4b07      	ldr	r3, [pc, #28]	; (3928 <usb_d_ep_deinit+0x4c>)
    390c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    390e:	68bb      	ldr	r3, [r7, #8]
    3910:	22ff      	movs	r2, #255	; 0xff
    3912:	705a      	strb	r2, [r3, #1]
    3914:	e000      	b.n	3918 <usb_d_ep_deinit+0x3c>
		return;
    3916:	bf00      	nop
}
    3918:	3710      	adds	r7, #16
    391a:	46bd      	mov	sp, r7
    391c:	bd80      	pop	{r7, pc}
    391e:	bf00      	nop
    3920:	00003359 	.word	0x00003359
    3924:	200008a4 	.word	0x200008a4
    3928:	0000ac65 	.word	0x0000ac65

0000392c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    392c:	b580      	push	{r7, lr}
    392e:	b086      	sub	sp, #24
    3930:	af00      	add	r7, sp, #0
    3932:	4603      	mov	r3, r0
    3934:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3936:	79fb      	ldrb	r3, [r7, #7]
    3938:	4618      	mov	r0, r3
    393a:	4b15      	ldr	r3, [pc, #84]	; (3990 <usb_d_ep_enable+0x64>)
    393c:	4798      	blx	r3
    393e:	4603      	mov	r3, r0
    3940:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3942:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3946:	015b      	lsls	r3, r3, #5
    3948:	4a12      	ldr	r2, [pc, #72]	; (3994 <usb_d_ep_enable+0x68>)
    394a:	4413      	add	r3, r2
    394c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    394e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3952:	2b00      	cmp	r3, #0
    3954:	da02      	bge.n	395c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3956:	f06f 0311 	mvn.w	r3, #17
    395a:	e014      	b.n	3986 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    395c:	693b      	ldr	r3, [r7, #16]
    395e:	781b      	ldrb	r3, [r3, #0]
    3960:	2b00      	cmp	r3, #0
    3962:	d101      	bne.n	3968 <usb_d_ep_enable+0x3c>
    3964:	2202      	movs	r2, #2
    3966:	e000      	b.n	396a <usb_d_ep_enable+0x3e>
    3968:	2201      	movs	r2, #1
    396a:	693b      	ldr	r3, [r7, #16]
    396c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    396e:	79fb      	ldrb	r3, [r7, #7]
    3970:	4618      	mov	r0, r3
    3972:	4b09      	ldr	r3, [pc, #36]	; (3998 <usb_d_ep_enable+0x6c>)
    3974:	4798      	blx	r3
    3976:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3978:	68fb      	ldr	r3, [r7, #12]
    397a:	2b00      	cmp	r3, #0
    397c:	da02      	bge.n	3984 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    397e:	693b      	ldr	r3, [r7, #16]
    3980:	2200      	movs	r2, #0
    3982:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3984:	68fb      	ldr	r3, [r7, #12]
}
    3986:	4618      	mov	r0, r3
    3988:	3718      	adds	r7, #24
    398a:	46bd      	mov	sp, r7
    398c:	bd80      	pop	{r7, pc}
    398e:	bf00      	nop
    3990:	00003359 	.word	0x00003359
    3994:	200008a4 	.word	0x200008a4
    3998:	0000ad49 	.word	0x0000ad49

0000399c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    399c:	b590      	push	{r4, r7, lr}
    399e:	b08d      	sub	sp, #52	; 0x34
    39a0:	af02      	add	r7, sp, #8
    39a2:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    39a4:	687b      	ldr	r3, [r7, #4]
    39a6:	7a1b      	ldrb	r3, [r3, #8]
    39a8:	4618      	mov	r0, r3
    39aa:	4b51      	ldr	r3, [pc, #324]	; (3af0 <usb_d_ep_transfer+0x154>)
    39ac:	4798      	blx	r3
    39ae:	4603      	mov	r3, r0
    39b0:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    39b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
    39b6:	015b      	lsls	r3, r3, #5
    39b8:	4a4e      	ldr	r2, [pc, #312]	; (3af4 <usb_d_ep_transfer+0x158>)
    39ba:	4413      	add	r3, r2
    39bc:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	7a1b      	ldrb	r3, [r3, #8]
    39c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    39c6:	2b00      	cmp	r3, #0
    39c8:	bf14      	ite	ne
    39ca:	2301      	movne	r3, #1
    39cc:	2300      	moveq	r3, #0
    39ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	7a5b      	ldrb	r3, [r3, #9]
    39d6:	2b00      	cmp	r3, #0
    39d8:	bf14      	ite	ne
    39da:	2301      	movne	r3, #1
    39dc:	2300      	moveq	r3, #0
    39de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	685b      	ldr	r3, [r3, #4]
    39e6:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    39e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    39ec:	2b00      	cmp	r3, #0
    39ee:	da02      	bge.n	39f6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    39f0:	f06f 0311 	mvn.w	r3, #17
    39f4:	e077      	b.n	3ae6 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    39f6:	f107 0308 	add.w	r3, r7, #8
    39fa:	4618      	mov	r0, r3
    39fc:	4b3e      	ldr	r3, [pc, #248]	; (3af8 <usb_d_ep_transfer+0x15c>)
    39fe:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3a00:	69bb      	ldr	r3, [r7, #24]
    3a02:	789b      	ldrb	r3, [r3, #2]
    3a04:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3a06:	7bfb      	ldrb	r3, [r7, #15]
    3a08:	b2db      	uxtb	r3, r3
    3a0a:	2b01      	cmp	r3, #1
    3a0c:	d10c      	bne.n	3a28 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3a0e:	69bb      	ldr	r3, [r7, #24]
    3a10:	2203      	movs	r2, #3
    3a12:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3a14:	f107 0308 	add.w	r3, r7, #8
    3a18:	4618      	mov	r0, r3
    3a1a:	4b38      	ldr	r3, [pc, #224]	; (3afc <usb_d_ep_transfer+0x160>)
    3a1c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3a1e:	69bb      	ldr	r3, [r7, #24]
    3a20:	781b      	ldrb	r3, [r3, #0]
    3a22:	2b00      	cmp	r3, #0
    3a24:	d151      	bne.n	3aca <usb_d_ep_transfer+0x12e>
    3a26:	e017      	b.n	3a58 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3a28:	f107 0308 	add.w	r3, r7, #8
    3a2c:	4618      	mov	r0, r3
    3a2e:	4b33      	ldr	r3, [pc, #204]	; (3afc <usb_d_ep_transfer+0x160>)
    3a30:	4798      	blx	r3
		switch (state) {
    3a32:	7bfb      	ldrb	r3, [r7, #15]
    3a34:	b2db      	uxtb	r3, r3
    3a36:	2b05      	cmp	r3, #5
    3a38:	d004      	beq.n	3a44 <usb_d_ep_transfer+0xa8>
    3a3a:	2b06      	cmp	r3, #6
    3a3c:	d004      	beq.n	3a48 <usb_d_ep_transfer+0xac>
    3a3e:	2b00      	cmp	r3, #0
    3a40:	d005      	beq.n	3a4e <usb_d_ep_transfer+0xb2>
    3a42:	e007      	b.n	3a54 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3a44:	2302      	movs	r3, #2
    3a46:	e04e      	b.n	3ae6 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3a48:	f06f 030f 	mvn.w	r3, #15
    3a4c:	e04b      	b.n	3ae6 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3a4e:	f06f 0312 	mvn.w	r3, #18
    3a52:	e048      	b.n	3ae6 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3a54:	2301      	movs	r3, #1
    3a56:	e046      	b.n	3ae6 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3a58:	69bb      	ldr	r3, [r7, #24]
    3a5a:	7c9b      	ldrb	r3, [r3, #18]
    3a5c:	b29a      	uxth	r2, r3
    3a5e:	69bb      	ldr	r3, [r7, #24]
    3a60:	7cdb      	ldrb	r3, [r3, #19]
    3a62:	b29b      	uxth	r3, r3
    3a64:	021b      	lsls	r3, r3, #8
    3a66:	b29b      	uxth	r3, r3
    3a68:	4413      	add	r3, r2
    3a6a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3a6c:	8afb      	ldrh	r3, [r7, #22]
    3a6e:	2b00      	cmp	r3, #0
    3a70:	d10b      	bne.n	3a8a <usb_d_ep_transfer+0xee>
			dir                 = true;
    3a72:	2301      	movs	r3, #1
    3a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3a78:	2300      	movs	r3, #0
    3a7a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3a7c:	2301      	movs	r3, #1
    3a7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3a82:	69bb      	ldr	r3, [r7, #24]
    3a84:	2204      	movs	r2, #4
    3a86:	709a      	strb	r2, [r3, #2]
    3a88:	e01f      	b.n	3aca <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3a8a:	69bb      	ldr	r3, [r7, #24]
    3a8c:	7b1b      	ldrb	r3, [r3, #12]
    3a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3a92:	2b00      	cmp	r3, #0
    3a94:	bf14      	ite	ne
    3a96:	2301      	movne	r3, #1
    3a98:	2300      	moveq	r3, #0
    3a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3a9e:	8afa      	ldrh	r2, [r7, #22]
    3aa0:	6a3b      	ldr	r3, [r7, #32]
    3aa2:	429a      	cmp	r2, r3
    3aa4:	d201      	bcs.n	3aaa <usb_d_ep_transfer+0x10e>
				len = req_len;
    3aa6:	8afb      	ldrh	r3, [r7, #22]
    3aa8:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d008      	beq.n	3ac4 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3ab2:	8afa      	ldrh	r2, [r7, #22]
    3ab4:	6a3b      	ldr	r3, [r7, #32]
    3ab6:	429a      	cmp	r2, r3
    3ab8:	bf8c      	ite	hi
    3aba:	2301      	movhi	r3, #1
    3abc:	2300      	movls	r3, #0
    3abe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3ac2:	e002      	b.n	3aca <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3ac4:	2300      	movs	r3, #0
    3ac6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	7a18      	ldrb	r0, [r3, #8]
    3ace:	687b      	ldr	r3, [r7, #4]
    3ad0:	681a      	ldr	r2, [r3, #0]
    3ad2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3ad6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3ada:	9300      	str	r3, [sp, #0]
    3adc:	6a3b      	ldr	r3, [r7, #32]
    3ade:	4c08      	ldr	r4, [pc, #32]	; (3b00 <usb_d_ep_transfer+0x164>)
    3ae0:	47a0      	blx	r4
    3ae2:	6138      	str	r0, [r7, #16]
	return rc;
    3ae4:	693b      	ldr	r3, [r7, #16]
}
    3ae6:	4618      	mov	r0, r3
    3ae8:	372c      	adds	r7, #44	; 0x2c
    3aea:	46bd      	mov	sp, r7
    3aec:	bd90      	pop	{r4, r7, pc}
    3aee:	bf00      	nop
    3af0:	00003359 	.word	0x00003359
    3af4:	200008a4 	.word	0x200008a4
    3af8:	0000bcbd 	.word	0x0000bcbd
    3afc:	0000bce3 	.word	0x0000bce3
    3b00:	000033d9 	.word	0x000033d9

00003b04 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3b04:	b580      	push	{r7, lr}
    3b06:	b084      	sub	sp, #16
    3b08:	af00      	add	r7, sp, #0
    3b0a:	4603      	mov	r3, r0
    3b0c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3b0e:	79fb      	ldrb	r3, [r7, #7]
    3b10:	4618      	mov	r0, r3
    3b12:	4b0e      	ldr	r3, [pc, #56]	; (3b4c <usb_d_ep_abort+0x48>)
    3b14:	4798      	blx	r3
    3b16:	4603      	mov	r3, r0
    3b18:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b1e:	015b      	lsls	r3, r3, #5
    3b20:	4a0b      	ldr	r2, [pc, #44]	; (3b50 <usb_d_ep_abort+0x4c>)
    3b22:	4413      	add	r3, r2
    3b24:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	db0a      	blt.n	3b44 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3b2e:	79fb      	ldrb	r3, [r7, #7]
    3b30:	4618      	mov	r0, r3
    3b32:	4b08      	ldr	r3, [pc, #32]	; (3b54 <usb_d_ep_abort+0x50>)
    3b34:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3b36:	68bb      	ldr	r3, [r7, #8]
    3b38:	2201      	movs	r2, #1
    3b3a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3b3c:	68bb      	ldr	r3, [r7, #8]
    3b3e:	2204      	movs	r2, #4
    3b40:	70da      	strb	r2, [r3, #3]
    3b42:	e000      	b.n	3b46 <usb_d_ep_abort+0x42>
		return;
    3b44:	bf00      	nop
}
    3b46:	3710      	adds	r7, #16
    3b48:	46bd      	mov	sp, r7
    3b4a:	bd80      	pop	{r7, pc}
    3b4c:	00003359 	.word	0x00003359
    3b50:	200008a4 	.word	0x200008a4
    3b54:	0000b4b5 	.word	0x0000b4b5

00003b58 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3b58:	b580      	push	{r7, lr}
    3b5a:	b086      	sub	sp, #24
    3b5c:	af00      	add	r7, sp, #0
    3b5e:	4603      	mov	r3, r0
    3b60:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3b62:	79fb      	ldrb	r3, [r7, #7]
    3b64:	4618      	mov	r0, r3
    3b66:	4b1a      	ldr	r3, [pc, #104]	; (3bd0 <_usb_d_ep_halt_clr+0x78>)
    3b68:	4798      	blx	r3
    3b6a:	4603      	mov	r3, r0
    3b6c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b72:	015b      	lsls	r3, r3, #5
    3b74:	4a17      	ldr	r2, [pc, #92]	; (3bd4 <_usb_d_ep_halt_clr+0x7c>)
    3b76:	4413      	add	r3, r2
    3b78:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b7e:	2b00      	cmp	r3, #0
    3b80:	da02      	bge.n	3b88 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3b82:	f06f 0311 	mvn.w	r3, #17
    3b86:	e01f      	b.n	3bc8 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3b88:	79fb      	ldrb	r3, [r7, #7]
    3b8a:	2102      	movs	r1, #2
    3b8c:	4618      	mov	r0, r3
    3b8e:	4b12      	ldr	r3, [pc, #72]	; (3bd8 <_usb_d_ep_halt_clr+0x80>)
    3b90:	4798      	blx	r3
    3b92:	4603      	mov	r3, r0
    3b94:	2b00      	cmp	r3, #0
    3b96:	d016      	beq.n	3bc6 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3b98:	79fb      	ldrb	r3, [r7, #7]
    3b9a:	2100      	movs	r1, #0
    3b9c:	4618      	mov	r0, r3
    3b9e:	4b0e      	ldr	r3, [pc, #56]	; (3bd8 <_usb_d_ep_halt_clr+0x80>)
    3ba0:	4798      	blx	r3
    3ba2:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3ba4:	68fb      	ldr	r3, [r7, #12]
    3ba6:	2b00      	cmp	r3, #0
    3ba8:	da01      	bge.n	3bae <_usb_d_ep_halt_clr+0x56>
			return rc;
    3baa:	68fb      	ldr	r3, [r7, #12]
    3bac:	e00c      	b.n	3bc8 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3bae:	693b      	ldr	r3, [r7, #16]
    3bb0:	2201      	movs	r2, #1
    3bb2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3bb4:	693b      	ldr	r3, [r7, #16]
    3bb6:	2203      	movs	r2, #3
    3bb8:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3bba:	693b      	ldr	r3, [r7, #16]
    3bbc:	69db      	ldr	r3, [r3, #28]
    3bbe:	79f8      	ldrb	r0, [r7, #7]
    3bc0:	2200      	movs	r2, #0
    3bc2:	2103      	movs	r1, #3
    3bc4:	4798      	blx	r3
	}
	return ERR_NONE;
    3bc6:	2300      	movs	r3, #0
}
    3bc8:	4618      	mov	r0, r3
    3bca:	3718      	adds	r7, #24
    3bcc:	46bd      	mov	sp, r7
    3bce:	bd80      	pop	{r7, pc}
    3bd0:	00003359 	.word	0x00003359
    3bd4:	200008a4 	.word	0x200008a4
    3bd8:	0000b0c1 	.word	0x0000b0c1

00003bdc <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b082      	sub	sp, #8
    3be0:	af00      	add	r7, sp, #0
    3be2:	4603      	mov	r3, r0
    3be4:	460a      	mov	r2, r1
    3be6:	71fb      	strb	r3, [r7, #7]
    3be8:	4613      	mov	r3, r2
    3bea:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3bec:	79bb      	ldrb	r3, [r7, #6]
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d105      	bne.n	3bfe <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3bf2:	79fb      	ldrb	r3, [r7, #7]
    3bf4:	4618      	mov	r0, r3
    3bf6:	4b0c      	ldr	r3, [pc, #48]	; (3c28 <usb_d_ep_halt+0x4c>)
    3bf8:	4798      	blx	r3
    3bfa:	4603      	mov	r3, r0
    3bfc:	e00f      	b.n	3c1e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3bfe:	79bb      	ldrb	r3, [r7, #6]
    3c00:	2b01      	cmp	r3, #1
    3c02:	d106      	bne.n	3c12 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3c04:	79fb      	ldrb	r3, [r7, #7]
    3c06:	2101      	movs	r1, #1
    3c08:	4618      	mov	r0, r3
    3c0a:	4b08      	ldr	r3, [pc, #32]	; (3c2c <usb_d_ep_halt+0x50>)
    3c0c:	4798      	blx	r3
    3c0e:	4603      	mov	r3, r0
    3c10:	e005      	b.n	3c1e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3c12:	79fb      	ldrb	r3, [r7, #7]
    3c14:	2102      	movs	r1, #2
    3c16:	4618      	mov	r0, r3
    3c18:	4b04      	ldr	r3, [pc, #16]	; (3c2c <usb_d_ep_halt+0x50>)
    3c1a:	4798      	blx	r3
    3c1c:	4603      	mov	r3, r0
	}
}
    3c1e:	4618      	mov	r0, r3
    3c20:	3708      	adds	r7, #8
    3c22:	46bd      	mov	sp, r7
    3c24:	bd80      	pop	{r7, pc}
    3c26:	bf00      	nop
    3c28:	00003b59 	.word	0x00003b59
    3c2c:	0000b0c1 	.word	0x0000b0c1

00003c30 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3c30:	b580      	push	{r7, lr}
    3c32:	b086      	sub	sp, #24
    3c34:	af00      	add	r7, sp, #0
    3c36:	4603      	mov	r3, r0
    3c38:	603a      	str	r2, [r7, #0]
    3c3a:	71fb      	strb	r3, [r7, #7]
    3c3c:	460b      	mov	r3, r1
    3c3e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c40:	79fb      	ldrb	r3, [r7, #7]
    3c42:	4618      	mov	r0, r3
    3c44:	4b16      	ldr	r3, [pc, #88]	; (3ca0 <usb_d_ep_register_callback+0x70>)
    3c46:	4798      	blx	r3
    3c48:	4603      	mov	r3, r0
    3c4a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c50:	015b      	lsls	r3, r3, #5
    3c52:	4a14      	ldr	r2, [pc, #80]	; (3ca4 <usb_d_ep_register_callback+0x74>)
    3c54:	4413      	add	r3, r2
    3c56:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3c58:	683b      	ldr	r3, [r7, #0]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d001      	beq.n	3c62 <usb_d_ep_register_callback+0x32>
    3c5e:	683b      	ldr	r3, [r7, #0]
    3c60:	e000      	b.n	3c64 <usb_d_ep_register_callback+0x34>
    3c62:	4b11      	ldr	r3, [pc, #68]	; (3ca8 <usb_d_ep_register_callback+0x78>)
    3c64:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	db13      	blt.n	3c96 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3c6e:	79bb      	ldrb	r3, [r7, #6]
    3c70:	2b01      	cmp	r3, #1
    3c72:	d008      	beq.n	3c86 <usb_d_ep_register_callback+0x56>
    3c74:	2b02      	cmp	r3, #2
    3c76:	d00a      	beq.n	3c8e <usb_d_ep_register_callback+0x5e>
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d000      	beq.n	3c7e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3c7c:	e00c      	b.n	3c98 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3c7e:	693b      	ldr	r3, [r7, #16]
    3c80:	68fa      	ldr	r2, [r7, #12]
    3c82:	615a      	str	r2, [r3, #20]
		break;
    3c84:	e008      	b.n	3c98 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3c86:	693b      	ldr	r3, [r7, #16]
    3c88:	68fa      	ldr	r2, [r7, #12]
    3c8a:	619a      	str	r2, [r3, #24]
		break;
    3c8c:	e004      	b.n	3c98 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3c8e:	693b      	ldr	r3, [r7, #16]
    3c90:	68fa      	ldr	r2, [r7, #12]
    3c92:	61da      	str	r2, [r3, #28]
		break;
    3c94:	e000      	b.n	3c98 <usb_d_ep_register_callback+0x68>
		return;
    3c96:	bf00      	nop
	}
}
    3c98:	3718      	adds	r7, #24
    3c9a:	46bd      	mov	sp, r7
    3c9c:	bd80      	pop	{r7, pc}
    3c9e:	bf00      	nop
    3ca0:	00003359 	.word	0x00003359
    3ca4:	200008a4 	.word	0x200008a4
    3ca8:	0000342d 	.word	0x0000342d

00003cac <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3cac:	b480      	push	{r7}
    3cae:	b085      	sub	sp, #20
    3cb0:	af00      	add	r7, sp, #0
    3cb2:	4603      	mov	r3, r0
    3cb4:	60b9      	str	r1, [r7, #8]
    3cb6:	607a      	str	r2, [r7, #4]
    3cb8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3cba:	7bfb      	ldrb	r3, [r7, #15]
    3cbc:	f083 0301 	eor.w	r3, r3, #1
    3cc0:	b2db      	uxtb	r3, r3
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d000      	beq.n	3cc8 <assert+0x1c>
		__asm("BKPT #0");
    3cc6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3cc8:	bf00      	nop
    3cca:	3714      	adds	r7, #20
    3ccc:	46bd      	mov	sp, r7
    3cce:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cd2:	4770      	bx	lr

00003cd4 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3cd4:	b480      	push	{r7}
    3cd6:	b085      	sub	sp, #20
    3cd8:	af00      	add	r7, sp, #0
    3cda:	6078      	str	r0, [r7, #4]
    3cdc:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	681b      	ldr	r3, [r3, #0]
    3ce2:	60fb      	str	r3, [r7, #12]
    3ce4:	e008      	b.n	3cf8 <is_list_element+0x24>
		if (it == element) {
    3ce6:	68fa      	ldr	r2, [r7, #12]
    3ce8:	683b      	ldr	r3, [r7, #0]
    3cea:	429a      	cmp	r2, r3
    3cec:	d101      	bne.n	3cf2 <is_list_element+0x1e>
			return true;
    3cee:	2301      	movs	r3, #1
    3cf0:	e006      	b.n	3d00 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3cf2:	68fb      	ldr	r3, [r7, #12]
    3cf4:	681b      	ldr	r3, [r3, #0]
    3cf6:	60fb      	str	r3, [r7, #12]
    3cf8:	68fb      	ldr	r3, [r7, #12]
    3cfa:	2b00      	cmp	r3, #0
    3cfc:	d1f3      	bne.n	3ce6 <is_list_element+0x12>
		}
	}

	return false;
    3cfe:	2300      	movs	r3, #0
}
    3d00:	4618      	mov	r0, r3
    3d02:	3714      	adds	r7, #20
    3d04:	46bd      	mov	sp, r7
    3d06:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d0a:	4770      	bx	lr

00003d0c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3d0c:	b580      	push	{r7, lr}
    3d0e:	b082      	sub	sp, #8
    3d10:	af00      	add	r7, sp, #0
    3d12:	6078      	str	r0, [r7, #4]
    3d14:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3d16:	6839      	ldr	r1, [r7, #0]
    3d18:	6878      	ldr	r0, [r7, #4]
    3d1a:	4b0f      	ldr	r3, [pc, #60]	; (3d58 <list_insert_as_head+0x4c>)
    3d1c:	4798      	blx	r3
    3d1e:	4603      	mov	r3, r0
    3d20:	2b00      	cmp	r3, #0
    3d22:	bf14      	ite	ne
    3d24:	2301      	movne	r3, #1
    3d26:	2300      	moveq	r3, #0
    3d28:	b2db      	uxtb	r3, r3
    3d2a:	f083 0301 	eor.w	r3, r3, #1
    3d2e:	b2db      	uxtb	r3, r3
    3d30:	f003 0301 	and.w	r3, r3, #1
    3d34:	b2db      	uxtb	r3, r3
    3d36:	2239      	movs	r2, #57	; 0x39
    3d38:	4908      	ldr	r1, [pc, #32]	; (3d5c <list_insert_as_head+0x50>)
    3d3a:	4618      	mov	r0, r3
    3d3c:	4b08      	ldr	r3, [pc, #32]	; (3d60 <list_insert_as_head+0x54>)
    3d3e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3d40:	687b      	ldr	r3, [r7, #4]
    3d42:	681a      	ldr	r2, [r3, #0]
    3d44:	683b      	ldr	r3, [r7, #0]
    3d46:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3d48:	687b      	ldr	r3, [r7, #4]
    3d4a:	683a      	ldr	r2, [r7, #0]
    3d4c:	601a      	str	r2, [r3, #0]
}
    3d4e:	bf00      	nop
    3d50:	3708      	adds	r7, #8
    3d52:	46bd      	mov	sp, r7
    3d54:	bd80      	pop	{r7, pc}
    3d56:	bf00      	nop
    3d58:	00003cd5 	.word	0x00003cd5
    3d5c:	00011bec 	.word	0x00011bec
    3d60:	00003cad 	.word	0x00003cad

00003d64 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3d64:	b480      	push	{r7}
    3d66:	b083      	sub	sp, #12
    3d68:	af00      	add	r7, sp, #0
    3d6a:	6078      	str	r0, [r7, #4]
    3d6c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3d6e:	687b      	ldr	r3, [r7, #4]
    3d70:	681a      	ldr	r2, [r3, #0]
    3d72:	683b      	ldr	r3, [r7, #0]
    3d74:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3d76:	687b      	ldr	r3, [r7, #4]
    3d78:	683a      	ldr	r2, [r7, #0]
    3d7a:	601a      	str	r2, [r3, #0]
}
    3d7c:	bf00      	nop
    3d7e:	370c      	adds	r7, #12
    3d80:	46bd      	mov	sp, r7
    3d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d86:	4770      	bx	lr

00003d88 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b084      	sub	sp, #16
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
    3d90:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3d92:	687b      	ldr	r3, [r7, #4]
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3d98:	6839      	ldr	r1, [r7, #0]
    3d9a:	6878      	ldr	r0, [r7, #4]
    3d9c:	4b16      	ldr	r3, [pc, #88]	; (3df8 <list_insert_at_end+0x70>)
    3d9e:	4798      	blx	r3
    3da0:	4603      	mov	r3, r0
    3da2:	2b00      	cmp	r3, #0
    3da4:	bf14      	ite	ne
    3da6:	2301      	movne	r3, #1
    3da8:	2300      	moveq	r3, #0
    3daa:	b2db      	uxtb	r3, r3
    3dac:	f083 0301 	eor.w	r3, r3, #1
    3db0:	b2db      	uxtb	r3, r3
    3db2:	f003 0301 	and.w	r3, r3, #1
    3db6:	b2db      	uxtb	r3, r3
    3db8:	224f      	movs	r2, #79	; 0x4f
    3dba:	4910      	ldr	r1, [pc, #64]	; (3dfc <list_insert_at_end+0x74>)
    3dbc:	4618      	mov	r0, r3
    3dbe:	4b10      	ldr	r3, [pc, #64]	; (3e00 <list_insert_at_end+0x78>)
    3dc0:	4798      	blx	r3

	if (!list->head) {
    3dc2:	687b      	ldr	r3, [r7, #4]
    3dc4:	681b      	ldr	r3, [r3, #0]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d109      	bne.n	3dde <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3dca:	687b      	ldr	r3, [r7, #4]
    3dcc:	683a      	ldr	r2, [r7, #0]
    3dce:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3dd0:	683b      	ldr	r3, [r7, #0]
    3dd2:	2200      	movs	r2, #0
    3dd4:	601a      	str	r2, [r3, #0]
		return;
    3dd6:	e00c      	b.n	3df2 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3dd8:	68fb      	ldr	r3, [r7, #12]
    3dda:	681b      	ldr	r3, [r3, #0]
    3ddc:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3dde:	68fb      	ldr	r3, [r7, #12]
    3de0:	681b      	ldr	r3, [r3, #0]
    3de2:	2b00      	cmp	r3, #0
    3de4:	d1f8      	bne.n	3dd8 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3de6:	68fb      	ldr	r3, [r7, #12]
    3de8:	683a      	ldr	r2, [r7, #0]
    3dea:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3dec:	683b      	ldr	r3, [r7, #0]
    3dee:	2200      	movs	r2, #0
    3df0:	601a      	str	r2, [r3, #0]
}
    3df2:	3710      	adds	r7, #16
    3df4:	46bd      	mov	sp, r7
    3df6:	bd80      	pop	{r7, pc}
    3df8:	00003cd5 	.word	0x00003cd5
    3dfc:	00011bec 	.word	0x00011bec
    3e00:	00003cad 	.word	0x00003cad

00003e04 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3e04:	b480      	push	{r7}
    3e06:	b085      	sub	sp, #20
    3e08:	af00      	add	r7, sp, #0
    3e0a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3e0c:	687b      	ldr	r3, [r7, #4]
    3e0e:	681b      	ldr	r3, [r3, #0]
    3e10:	2b00      	cmp	r3, #0
    3e12:	d009      	beq.n	3e28 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3e14:	687b      	ldr	r3, [r7, #4]
    3e16:	681b      	ldr	r3, [r3, #0]
    3e18:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3e1a:	687b      	ldr	r3, [r7, #4]
    3e1c:	681b      	ldr	r3, [r3, #0]
    3e1e:	681a      	ldr	r2, [r3, #0]
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3e24:	68fb      	ldr	r3, [r7, #12]
    3e26:	e000      	b.n	3e2a <list_remove_head+0x26>
	}

	return NULL;
    3e28:	2300      	movs	r3, #0
}
    3e2a:	4618      	mov	r0, r3
    3e2c:	3714      	adds	r7, #20
    3e2e:	46bd      	mov	sp, r7
    3e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e34:	4770      	bx	lr

00003e36 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3e36:	b480      	push	{r7}
    3e38:	b085      	sub	sp, #20
    3e3a:	af00      	add	r7, sp, #0
    3e3c:	6078      	str	r0, [r7, #4]
    3e3e:	6039      	str	r1, [r7, #0]
	if (!element) {
    3e40:	683b      	ldr	r3, [r7, #0]
    3e42:	2b00      	cmp	r3, #0
    3e44:	d101      	bne.n	3e4a <list_delete_element+0x14>
		return false;
    3e46:	2300      	movs	r3, #0
    3e48:	e024      	b.n	3e94 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3e4a:	687b      	ldr	r3, [r7, #4]
    3e4c:	681a      	ldr	r2, [r3, #0]
    3e4e:	683b      	ldr	r3, [r7, #0]
    3e50:	429a      	cmp	r2, r3
    3e52:	d106      	bne.n	3e62 <list_delete_element+0x2c>
		list->head = list->head->next;
    3e54:	687b      	ldr	r3, [r7, #4]
    3e56:	681b      	ldr	r3, [r3, #0]
    3e58:	681a      	ldr	r2, [r3, #0]
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	601a      	str	r2, [r3, #0]
		return true;
    3e5e:	2301      	movs	r3, #1
    3e60:	e018      	b.n	3e94 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3e62:	687b      	ldr	r3, [r7, #4]
    3e64:	681b      	ldr	r3, [r3, #0]
    3e66:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3e68:	e002      	b.n	3e70 <list_delete_element+0x3a>
			it = it->next;
    3e6a:	68fb      	ldr	r3, [r7, #12]
    3e6c:	681b      	ldr	r3, [r3, #0]
    3e6e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3e70:	68fb      	ldr	r3, [r7, #12]
    3e72:	2b00      	cmp	r3, #0
    3e74:	d004      	beq.n	3e80 <list_delete_element+0x4a>
    3e76:	68fb      	ldr	r3, [r7, #12]
    3e78:	681a      	ldr	r2, [r3, #0]
    3e7a:	683b      	ldr	r3, [r7, #0]
    3e7c:	429a      	cmp	r2, r3
    3e7e:	d1f4      	bne.n	3e6a <list_delete_element+0x34>
		}
		if (it) {
    3e80:	68fb      	ldr	r3, [r7, #12]
    3e82:	2b00      	cmp	r3, #0
    3e84:	d005      	beq.n	3e92 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3e86:	683b      	ldr	r3, [r7, #0]
    3e88:	681a      	ldr	r2, [r3, #0]
    3e8a:	68fb      	ldr	r3, [r7, #12]
    3e8c:	601a      	str	r2, [r3, #0]
			return true;
    3e8e:	2301      	movs	r3, #1
    3e90:	e000      	b.n	3e94 <list_delete_element+0x5e>
		}
	}

	return false;
    3e92:	2300      	movs	r3, #0
}
    3e94:	4618      	mov	r0, r3
    3e96:	3714      	adds	r7, #20
    3e98:	46bd      	mov	sp, r7
    3e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e9e:	4770      	bx	lr

00003ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3ea0:	b480      	push	{r7}
    3ea2:	b083      	sub	sp, #12
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	4603      	mov	r3, r0
    3ea8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3eae:	2b00      	cmp	r3, #0
    3eb0:	db0b      	blt.n	3eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3eb2:	4909      	ldr	r1, [pc, #36]	; (3ed8 <__NVIC_EnableIRQ+0x38>)
    3eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3eb8:	095b      	lsrs	r3, r3, #5
    3eba:	88fa      	ldrh	r2, [r7, #6]
    3ebc:	f002 021f 	and.w	r2, r2, #31
    3ec0:	2001      	movs	r0, #1
    3ec2:	fa00 f202 	lsl.w	r2, r0, r2
    3ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3eca:	bf00      	nop
    3ecc:	370c      	adds	r7, #12
    3ece:	46bd      	mov	sp, r7
    3ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ed4:	4770      	bx	lr
    3ed6:	bf00      	nop
    3ed8:	e000e100 	.word	0xe000e100

00003edc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3edc:	b480      	push	{r7}
    3ede:	b083      	sub	sp, #12
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	4603      	mov	r3, r0
    3ee4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3eea:	2b00      	cmp	r3, #0
    3eec:	db10      	blt.n	3f10 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3eee:	490b      	ldr	r1, [pc, #44]	; (3f1c <__NVIC_DisableIRQ+0x40>)
    3ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ef4:	095b      	lsrs	r3, r3, #5
    3ef6:	88fa      	ldrh	r2, [r7, #6]
    3ef8:	f002 021f 	and.w	r2, r2, #31
    3efc:	2001      	movs	r0, #1
    3efe:	fa00 f202 	lsl.w	r2, r0, r2
    3f02:	3320      	adds	r3, #32
    3f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3f08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f0c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3f10:	bf00      	nop
    3f12:	370c      	adds	r7, #12
    3f14:	46bd      	mov	sp, r7
    3f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f1a:	4770      	bx	lr
    3f1c:	e000e100 	.word	0xe000e100

00003f20 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3f20:	b480      	push	{r7}
    3f22:	b083      	sub	sp, #12
    3f24:	af00      	add	r7, sp, #0
    3f26:	4603      	mov	r3, r0
    3f28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f2e:	2b00      	cmp	r3, #0
    3f30:	db0c      	blt.n	3f4c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f32:	4909      	ldr	r1, [pc, #36]	; (3f58 <__NVIC_ClearPendingIRQ+0x38>)
    3f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f38:	095b      	lsrs	r3, r3, #5
    3f3a:	88fa      	ldrh	r2, [r7, #6]
    3f3c:	f002 021f 	and.w	r2, r2, #31
    3f40:	2001      	movs	r0, #1
    3f42:	fa00 f202 	lsl.w	r2, r0, r2
    3f46:	3360      	adds	r3, #96	; 0x60
    3f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3f4c:	bf00      	nop
    3f4e:	370c      	adds	r7, #12
    3f50:	46bd      	mov	sp, r7
    3f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f56:	4770      	bx	lr
    3f58:	e000e100 	.word	0xe000e100

00003f5c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3f5c:	b480      	push	{r7}
    3f5e:	b083      	sub	sp, #12
    3f60:	af00      	add	r7, sp, #0
    3f62:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3f64:	687b      	ldr	r3, [r7, #4]
    3f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f68:	095b      	lsrs	r3, r3, #5
    3f6a:	f003 0301 	and.w	r3, r3, #1
    3f6e:	2b00      	cmp	r3, #0
    3f70:	bf14      	ite	ne
    3f72:	2301      	movne	r3, #1
    3f74:	2300      	moveq	r3, #0
    3f76:	b2db      	uxtb	r3, r3
}
    3f78:	4618      	mov	r0, r3
    3f7a:	370c      	adds	r7, #12
    3f7c:	46bd      	mov	sp, r7
    3f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f82:	4770      	bx	lr

00003f84 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3f84:	b480      	push	{r7}
    3f86:	b083      	sub	sp, #12
    3f88:	af00      	add	r7, sp, #0
    3f8a:	6078      	str	r0, [r7, #4]
    3f8c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3f8e:	687b      	ldr	r3, [r7, #4]
    3f90:	683a      	ldr	r2, [r7, #0]
    3f92:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f94:	bf00      	nop
    3f96:	370c      	adds	r7, #12
    3f98:	46bd      	mov	sp, r7
    3f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f9e:	4770      	bx	lr

00003fa0 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3fa0:	b480      	push	{r7}
    3fa2:	b083      	sub	sp, #12
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
    3fa8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3faa:	687b      	ldr	r3, [r7, #4]
    3fac:	683a      	ldr	r2, [r7, #0]
    3fae:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3fb0:	bf00      	nop
    3fb2:	370c      	adds	r7, #12
    3fb4:	46bd      	mov	sp, r7
    3fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fba:	4770      	bx	lr

00003fbc <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3fbc:	b480      	push	{r7}
    3fbe:	b083      	sub	sp, #12
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3fc4:	687b      	ldr	r3, [r7, #4]
    3fc6:	699b      	ldr	r3, [r3, #24]
    3fc8:	f043 0201 	orr.w	r2, r3, #1
    3fcc:	687b      	ldr	r3, [r7, #4]
    3fce:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3fd0:	bf00      	nop
    3fd2:	370c      	adds	r7, #12
    3fd4:	46bd      	mov	sp, r7
    3fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fda:	4770      	bx	lr

00003fdc <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3fdc:	b480      	push	{r7}
    3fde:	b085      	sub	sp, #20
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3fe4:	687b      	ldr	r3, [r7, #4]
    3fe6:	699b      	ldr	r3, [r3, #24]
    3fe8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3fea:	68fb      	ldr	r3, [r7, #12]
    3fec:	f003 0301 	and.w	r3, r3, #1
    3ff0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3ff2:	68fb      	ldr	r3, [r7, #12]
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	bf14      	ite	ne
    3ff8:	2301      	movne	r3, #1
    3ffa:	2300      	moveq	r3, #0
    3ffc:	b2db      	uxtb	r3, r3
}
    3ffe:	4618      	mov	r0, r3
    4000:	3714      	adds	r7, #20
    4002:	46bd      	mov	sp, r7
    4004:	f85d 7b04 	ldr.w	r7, [sp], #4
    4008:	4770      	bx	lr

0000400a <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    400a:	b480      	push	{r7}
    400c:	b083      	sub	sp, #12
    400e:	af00      	add	r7, sp, #0
    4010:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    4012:	687b      	ldr	r3, [r7, #4]
    4014:	699b      	ldr	r3, [r3, #24]
    4016:	f023 0201 	bic.w	r2, r3, #1
    401a:	687b      	ldr	r3, [r7, #4]
    401c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    401e:	bf00      	nop
    4020:	370c      	adds	r7, #12
    4022:	46bd      	mov	sp, r7
    4024:	f85d 7b04 	ldr.w	r7, [sp], #4
    4028:	4770      	bx	lr

0000402a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    402a:	b480      	push	{r7}
    402c:	b083      	sub	sp, #12
    402e:	af00      	add	r7, sp, #0
    4030:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    4032:	687b      	ldr	r3, [r7, #4]
    4034:	699b      	ldr	r3, [r3, #24]
    4036:	f043 0202 	orr.w	r2, r3, #2
    403a:	687b      	ldr	r3, [r7, #4]
    403c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    403e:	bf00      	nop
    4040:	370c      	adds	r7, #12
    4042:	46bd      	mov	sp, r7
    4044:	f85d 7b04 	ldr.w	r7, [sp], #4
    4048:	4770      	bx	lr

0000404a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    404a:	b480      	push	{r7}
    404c:	b083      	sub	sp, #12
    404e:	af00      	add	r7, sp, #0
    4050:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    4052:	687b      	ldr	r3, [r7, #4]
    4054:	699b      	ldr	r3, [r3, #24]
    4056:	f023 0202 	bic.w	r2, r3, #2
    405a:	687b      	ldr	r3, [r7, #4]
    405c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    405e:	bf00      	nop
    4060:	370c      	adds	r7, #12
    4062:	46bd      	mov	sp, r7
    4064:	f85d 7b04 	ldr.w	r7, [sp], #4
    4068:	4770      	bx	lr

0000406a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    406a:	b480      	push	{r7}
    406c:	b083      	sub	sp, #12
    406e:	af00      	add	r7, sp, #0
    4070:	6078      	str	r0, [r7, #4]
    4072:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	699a      	ldr	r2, [r3, #24]
    4078:	683b      	ldr	r3, [r7, #0]
    407a:	431a      	orrs	r2, r3
    407c:	687b      	ldr	r3, [r7, #4]
    407e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4080:	bf00      	nop
    4082:	370c      	adds	r7, #12
    4084:	46bd      	mov	sp, r7
    4086:	f85d 7b04 	ldr.w	r7, [sp], #4
    408a:	4770      	bx	lr

0000408c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    408c:	b480      	push	{r7}
    408e:	b083      	sub	sp, #12
    4090:	af00      	add	r7, sp, #0
    4092:	6078      	str	r0, [r7, #4]
    4094:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	683a      	ldr	r2, [r7, #0]
    409a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    409c:	bf00      	nop
    409e:	370c      	adds	r7, #12
    40a0:	46bd      	mov	sp, r7
    40a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    40a6:	4770      	bx	lr

000040a8 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    40a8:	b480      	push	{r7}
    40aa:	b083      	sub	sp, #12
    40ac:	af00      	add	r7, sp, #0
    40ae:	6078      	str	r0, [r7, #4]
    40b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	683a      	ldr	r2, [r7, #0]
    40b6:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    40b8:	bf00      	nop
    40ba:	370c      	adds	r7, #12
    40bc:	46bd      	mov	sp, r7
    40be:	f85d 7b04 	ldr.w	r7, [sp], #4
    40c2:	4770      	bx	lr

000040c4 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    40c4:	b480      	push	{r7}
    40c6:	b083      	sub	sp, #12
    40c8:	af00      	add	r7, sp, #0
    40ca:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    40d0:	4618      	mov	r0, r3
    40d2:	370c      	adds	r7, #12
    40d4:	46bd      	mov	sp, r7
    40d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    40da:	4770      	bx	lr

000040dc <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    40dc:	b480      	push	{r7}
    40de:	b083      	sub	sp, #12
    40e0:	af00      	add	r7, sp, #0
    40e2:	6078      	str	r0, [r7, #4]
    40e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    40e6:	687b      	ldr	r3, [r7, #4]
    40e8:	683a      	ldr	r2, [r7, #0]
    40ea:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    40ec:	bf00      	nop
    40ee:	370c      	adds	r7, #12
    40f0:	46bd      	mov	sp, r7
    40f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    40f6:	4770      	bx	lr

000040f8 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    40f8:	b480      	push	{r7}
    40fa:	b083      	sub	sp, #12
    40fc:	af00      	add	r7, sp, #0
    40fe:	6078      	str	r0, [r7, #4]
    4100:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    4102:	687b      	ldr	r3, [r7, #4]
    4104:	683a      	ldr	r2, [r7, #0]
    4106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    410a:	bf00      	nop
    410c:	370c      	adds	r7, #12
    410e:	46bd      	mov	sp, r7
    4110:	f85d 7b04 	ldr.w	r7, [sp], #4
    4114:	4770      	bx	lr

00004116 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    4116:	b480      	push	{r7}
    4118:	b083      	sub	sp, #12
    411a:	af00      	add	r7, sp, #0
    411c:	6078      	str	r0, [r7, #4]
    411e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    4120:	687b      	ldr	r3, [r7, #4]
    4122:	683a      	ldr	r2, [r7, #0]
    4124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    4128:	bf00      	nop
    412a:	370c      	adds	r7, #12
    412c:	46bd      	mov	sp, r7
    412e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4132:	4770      	bx	lr

00004134 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    4134:	b480      	push	{r7}
    4136:	b083      	sub	sp, #12
    4138:	af00      	add	r7, sp, #0
    413a:	6078      	str	r0, [r7, #4]
    413c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    413e:	687b      	ldr	r3, [r7, #4]
    4140:	683a      	ldr	r2, [r7, #0]
    4142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    4146:	bf00      	nop
    4148:	370c      	adds	r7, #12
    414a:	46bd      	mov	sp, r7
    414c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4150:	4770      	bx	lr

00004152 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    4152:	b480      	push	{r7}
    4154:	b083      	sub	sp, #12
    4156:	af00      	add	r7, sp, #0
    4158:	6078      	str	r0, [r7, #4]
    415a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	683a      	ldr	r2, [r7, #0]
    4160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    4164:	bf00      	nop
    4166:	370c      	adds	r7, #12
    4168:	46bd      	mov	sp, r7
    416a:	f85d 7b04 	ldr.w	r7, [sp], #4
    416e:	4770      	bx	lr

00004170 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    4170:	b480      	push	{r7}
    4172:	b083      	sub	sp, #12
    4174:	af00      	add	r7, sp, #0
    4176:	6078      	str	r0, [r7, #4]
    4178:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	683a      	ldr	r2, [r7, #0]
    417e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4182:	bf00      	nop
    4184:	370c      	adds	r7, #12
    4186:	46bd      	mov	sp, r7
    4188:	f85d 7b04 	ldr.w	r7, [sp], #4
    418c:	4770      	bx	lr

0000418e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    418e:	b480      	push	{r7}
    4190:	b083      	sub	sp, #12
    4192:	af00      	add	r7, sp, #0
    4194:	6078      	str	r0, [r7, #4]
    4196:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	683a      	ldr	r2, [r7, #0]
    419c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    41a0:	bf00      	nop
    41a2:	370c      	adds	r7, #12
    41a4:	46bd      	mov	sp, r7
    41a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    41aa:	4770      	bx	lr

000041ac <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    41ac:	b480      	push	{r7}
    41ae:	b083      	sub	sp, #12
    41b0:	af00      	add	r7, sp, #0
    41b2:	6078      	str	r0, [r7, #4]
    41b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    41b6:	687b      	ldr	r3, [r7, #4]
    41b8:	683a      	ldr	r2, [r7, #0]
    41ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    41be:	bf00      	nop
    41c0:	370c      	adds	r7, #12
    41c2:	46bd      	mov	sp, r7
    41c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    41c8:	4770      	bx	lr

000041ca <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    41ca:	b480      	push	{r7}
    41cc:	b083      	sub	sp, #12
    41ce:	af00      	add	r7, sp, #0
    41d0:	6078      	str	r0, [r7, #4]
    41d2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    41d4:	687b      	ldr	r3, [r7, #4]
    41d6:	683a      	ldr	r2, [r7, #0]
    41d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    41dc:	bf00      	nop
    41de:	370c      	adds	r7, #12
    41e0:	46bd      	mov	sp, r7
    41e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    41e6:	4770      	bx	lr

000041e8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    41e8:	b480      	push	{r7}
    41ea:	b083      	sub	sp, #12
    41ec:	af00      	add	r7, sp, #0
    41ee:	6078      	str	r0, [r7, #4]
    41f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    41f2:	687b      	ldr	r3, [r7, #4]
    41f4:	683a      	ldr	r2, [r7, #0]
    41f6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    41fa:	bf00      	nop
    41fc:	370c      	adds	r7, #12
    41fe:	46bd      	mov	sp, r7
    4200:	f85d 7b04 	ldr.w	r7, [sp], #4
    4204:	4770      	bx	lr
	...

00004208 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    4208:	b580      	push	{r7, lr}
    420a:	b082      	sub	sp, #8
    420c:	af00      	add	r7, sp, #0
    420e:	6078      	str	r0, [r7, #4]
    4210:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    4212:	687b      	ldr	r3, [r7, #4]
    4214:	683a      	ldr	r2, [r7, #0]
    4216:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    4218:	687b      	ldr	r3, [r7, #4]
    421a:	681b      	ldr	r3, [r3, #0]
    421c:	4618      	mov	r0, r3
    421e:	4b55      	ldr	r3, [pc, #340]	; (4374 <_can_async_init+0x16c>)
    4220:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    4222:	bf00      	nop
    4224:	687b      	ldr	r3, [r7, #4]
    4226:	681b      	ldr	r3, [r3, #0]
    4228:	4618      	mov	r0, r3
    422a:	4b53      	ldr	r3, [pc, #332]	; (4378 <_can_async_init+0x170>)
    422c:	4798      	blx	r3
    422e:	4603      	mov	r3, r0
    4230:	f083 0301 	eor.w	r3, r3, #1
    4234:	b2db      	uxtb	r3, r3
    4236:	2b00      	cmp	r3, #0
    4238:	d1f4      	bne.n	4224 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	681b      	ldr	r3, [r3, #0]
    423e:	4618      	mov	r0, r3
    4240:	4b4e      	ldr	r3, [pc, #312]	; (437c <_can_async_init+0x174>)
    4242:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    4244:	683b      	ldr	r3, [r7, #0]
    4246:	4a4e      	ldr	r2, [pc, #312]	; (4380 <_can_async_init+0x178>)
    4248:	4293      	cmp	r3, r2
    424a:	d17a      	bne.n	4342 <_can_async_init+0x13a>
		_can1_dev    = dev;
    424c:	4a4d      	ldr	r2, [pc, #308]	; (4384 <_can_async_init+0x17c>)
    424e:	687b      	ldr	r3, [r7, #4]
    4250:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	4a4c      	ldr	r2, [pc, #304]	; (4388 <_can_async_init+0x180>)
    4256:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	681b      	ldr	r3, [r3, #0]
    425c:	f44f 7140 	mov.w	r1, #768	; 0x300
    4260:	4618      	mov	r0, r3
    4262:	4b4a      	ldr	r3, [pc, #296]	; (438c <_can_async_init+0x184>)
    4264:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    4266:	687b      	ldr	r3, [r7, #4]
    4268:	681b      	ldr	r3, [r3, #0]
    426a:	2102      	movs	r1, #2
    426c:	4618      	mov	r0, r3
    426e:	4b48      	ldr	r3, [pc, #288]	; (4390 <_can_async_init+0x188>)
    4270:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    4272:	687b      	ldr	r3, [r7, #4]
    4274:	681b      	ldr	r3, [r3, #0]
    4276:	4947      	ldr	r1, [pc, #284]	; (4394 <_can_async_init+0x18c>)
    4278:	4618      	mov	r0, r3
    427a:	4b47      	ldr	r3, [pc, #284]	; (4398 <_can_async_init+0x190>)
    427c:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	4946      	ldr	r1, [pc, #280]	; (439c <_can_async_init+0x194>)
    4284:	4618      	mov	r0, r3
    4286:	4b46      	ldr	r3, [pc, #280]	; (43a0 <_can_async_init+0x198>)
    4288:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    428a:	687b      	ldr	r3, [r7, #4]
    428c:	681a      	ldr	r2, [r3, #0]
    428e:	4b45      	ldr	r3, [pc, #276]	; (43a4 <_can_async_init+0x19c>)
    4290:	b29b      	uxth	r3, r3
    4292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    429a:	4619      	mov	r1, r3
    429c:	4610      	mov	r0, r2
    429e:	4b42      	ldr	r3, [pc, #264]	; (43a8 <_can_async_init+0x1a0>)
    42a0:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	681b      	ldr	r3, [r3, #0]
    42a6:	2107      	movs	r1, #7
    42a8:	4618      	mov	r0, r3
    42aa:	4b40      	ldr	r3, [pc, #256]	; (43ac <_can_async_init+0x1a4>)
    42ac:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    42ae:	687b      	ldr	r3, [r7, #4]
    42b0:	681b      	ldr	r3, [r3, #0]
    42b2:	2107      	movs	r1, #7
    42b4:	4618      	mov	r0, r3
    42b6:	4b3e      	ldr	r3, [pc, #248]	; (43b0 <_can_async_init+0x1a8>)
    42b8:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    42ba:	687b      	ldr	r3, [r7, #4]
    42bc:	681a      	ldr	r2, [r3, #0]
    42be:	4b3d      	ldr	r3, [pc, #244]	; (43b4 <_can_async_init+0x1ac>)
    42c0:	b29b      	uxth	r3, r3
    42c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    42c6:	4619      	mov	r1, r3
    42c8:	4610      	mov	r0, r2
    42ca:	4b3b      	ldr	r3, [pc, #236]	; (43b8 <_can_async_init+0x1b0>)
    42cc:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    42ce:	687b      	ldr	r3, [r7, #4]
    42d0:	681a      	ldr	r2, [r3, #0]
    42d2:	4b3a      	ldr	r3, [pc, #232]	; (43bc <_can_async_init+0x1b4>)
    42d4:	b29b      	uxth	r3, r3
    42d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    42da:	4619      	mov	r1, r3
    42dc:	4610      	mov	r0, r2
    42de:	4b38      	ldr	r3, [pc, #224]	; (43c0 <_can_async_init+0x1b8>)
    42e0:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    42e2:	687b      	ldr	r3, [r7, #4]
    42e4:	681b      	ldr	r3, [r3, #0]
    42e6:	2108      	movs	r1, #8
    42e8:	4618      	mov	r0, r3
    42ea:	4b36      	ldr	r3, [pc, #216]	; (43c4 <_can_async_init+0x1bc>)
    42ec:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    42ee:	687b      	ldr	r3, [r7, #4]
    42f0:	681a      	ldr	r2, [r3, #0]
    42f2:	4b35      	ldr	r3, [pc, #212]	; (43c8 <_can_async_init+0x1c0>)
    42f4:	b29b      	uxth	r3, r3
    42f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    42fa:	4619      	mov	r1, r3
    42fc:	4610      	mov	r0, r2
    42fe:	4b33      	ldr	r3, [pc, #204]	; (43cc <_can_async_init+0x1c4>)
    4300:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    4302:	687b      	ldr	r3, [r7, #4]
    4304:	681a      	ldr	r2, [r3, #0]
    4306:	4b32      	ldr	r3, [pc, #200]	; (43d0 <_can_async_init+0x1c8>)
    4308:	b29b      	uxth	r3, r3
    430a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    430e:	4619      	mov	r1, r3
    4310:	4610      	mov	r0, r2
    4312:	4b30      	ldr	r3, [pc, #192]	; (43d4 <_can_async_init+0x1cc>)
    4314:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	681b      	ldr	r3, [r3, #0]
    431a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    431e:	4618      	mov	r0, r3
    4320:	4b2d      	ldr	r3, [pc, #180]	; (43d8 <_can_async_init+0x1d0>)
    4322:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    4324:	204f      	movs	r0, #79	; 0x4f
    4326:	4b2d      	ldr	r3, [pc, #180]	; (43dc <_can_async_init+0x1d4>)
    4328:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    432a:	204f      	movs	r0, #79	; 0x4f
    432c:	4b2c      	ldr	r3, [pc, #176]	; (43e0 <_can_async_init+0x1d8>)
    432e:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4330:	204f      	movs	r0, #79	; 0x4f
    4332:	4b2c      	ldr	r3, [pc, #176]	; (43e4 <_can_async_init+0x1dc>)
    4334:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	681b      	ldr	r3, [r3, #0]
    433a:	2101      	movs	r1, #1
    433c:	4618      	mov	r0, r3
    433e:	4b2a      	ldr	r3, [pc, #168]	; (43e8 <_can_async_init+0x1e0>)
    4340:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    4342:	687b      	ldr	r3, [r7, #4]
    4344:	681b      	ldr	r3, [r3, #0]
    4346:	4618      	mov	r0, r3
    4348:	4b28      	ldr	r3, [pc, #160]	; (43ec <_can_async_init+0x1e4>)
    434a:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    434c:	687b      	ldr	r3, [r7, #4]
    434e:	681b      	ldr	r3, [r3, #0]
    4350:	4618      	mov	r0, r3
    4352:	4b27      	ldr	r3, [pc, #156]	; (43f0 <_can_async_init+0x1e8>)
    4354:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    4356:	bf00      	nop
    4358:	687b      	ldr	r3, [r7, #4]
    435a:	681b      	ldr	r3, [r3, #0]
    435c:	4618      	mov	r0, r3
    435e:	4b06      	ldr	r3, [pc, #24]	; (4378 <_can_async_init+0x170>)
    4360:	4798      	blx	r3
    4362:	4603      	mov	r3, r0
    4364:	2b00      	cmp	r3, #0
    4366:	d1f7      	bne.n	4358 <_can_async_init+0x150>
	};

	return ERR_NONE;
    4368:	2300      	movs	r3, #0
}
    436a:	4618      	mov	r0, r3
    436c:	3708      	adds	r7, #8
    436e:	46bd      	mov	sp, r7
    4370:	bd80      	pop	{r7, pc}
    4372:	bf00      	nop
    4374:	00003fbd 	.word	0x00003fbd
    4378:	00003fdd 	.word	0x00003fdd
    437c:	0000402b 	.word	0x0000402b
    4380:	42000400 	.word	0x42000400
    4384:	200009c4 	.word	0x200009c4
    4388:	20000004 	.word	0x20000004
    438c:	0000406b 	.word	0x0000406b
    4390:	00003f85 	.word	0x00003f85
    4394:	00010c01 	.word	0x00010c01
    4398:	0000408d 	.word	0x0000408d
    439c:	00010c10 	.word	0x00010c10
    43a0:	00003fa1 	.word	0x00003fa1
    43a4:	20008130 	.word	0x20008130
    43a8:	00004171 	.word	0x00004171
    43ac:	0000418f 	.word	0x0000418f
    43b0:	000041cb 	.word	0x000041cb
    43b4:	200080e8 	.word	0x200080e8
    43b8:	000041ad 	.word	0x000041ad
    43bc:	20000924 	.word	0x20000924
    43c0:	000041e9 	.word	0x000041e9
    43c4:	000040f9 	.word	0x000040f9
    43c8:	20000934 	.word	0x20000934
    43cc:	00004117 	.word	0x00004117
    43d0:	200009b4 	.word	0x200009b4
    43d4:	00004135 	.word	0x00004135
    43d8:	00004153 	.word	0x00004153
    43dc:	00003edd 	.word	0x00003edd
    43e0:	00003f21 	.word	0x00003f21
    43e4:	00003ea1 	.word	0x00003ea1
    43e8:	000040dd 	.word	0x000040dd
    43ec:	0000404b 	.word	0x0000404b
    43f0:	0000400b 	.word	0x0000400b

000043f4 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    43f4:	b590      	push	{r4, r7, lr}
    43f6:	b083      	sub	sp, #12
    43f8:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    43fa:	4b2c      	ldr	r3, [pc, #176]	; (44ac <CAN1_Handler+0xb8>)
    43fc:	681b      	ldr	r3, [r3, #0]
    43fe:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	681b      	ldr	r3, [r3, #0]
    4404:	4618      	mov	r0, r3
    4406:	4b2a      	ldr	r3, [pc, #168]	; (44b0 <CAN1_Handler+0xbc>)
    4408:	4798      	blx	r3
    440a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    440c:	683b      	ldr	r3, [r7, #0]
    440e:	f003 0301 	and.w	r3, r3, #1
    4412:	2b00      	cmp	r3, #0
    4414:	d003      	beq.n	441e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    4416:	687b      	ldr	r3, [r7, #4]
    4418:	689b      	ldr	r3, [r3, #8]
    441a:	6878      	ldr	r0, [r7, #4]
    441c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    441e:	683b      	ldr	r3, [r7, #0]
    4420:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4424:	2b00      	cmp	r3, #0
    4426:	d003      	beq.n	4430 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4428:	687b      	ldr	r3, [r7, #4]
    442a:	685b      	ldr	r3, [r3, #4]
    442c:	6878      	ldr	r0, [r7, #4]
    442e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4430:	683b      	ldr	r3, [r7, #0]
    4432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4436:	2b00      	cmp	r3, #0
    4438:	d004      	beq.n	4444 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	68db      	ldr	r3, [r3, #12]
    443e:	2103      	movs	r1, #3
    4440:	6878      	ldr	r0, [r7, #4]
    4442:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4444:	683b      	ldr	r3, [r7, #0]
    4446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    444a:	2b00      	cmp	r3, #0
    444c:	d004      	beq.n	4458 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    444e:	687b      	ldr	r3, [r7, #4]
    4450:	68db      	ldr	r3, [r3, #12]
    4452:	2100      	movs	r1, #0
    4454:	6878      	ldr	r0, [r7, #4]
    4456:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4458:	683b      	ldr	r3, [r7, #0]
    445a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    445e:	2b00      	cmp	r3, #0
    4460:	d00f      	beq.n	4482 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    4462:	687b      	ldr	r3, [r7, #4]
    4464:	68dc      	ldr	r4, [r3, #12]
    4466:	687b      	ldr	r3, [r7, #4]
    4468:	681b      	ldr	r3, [r3, #0]
    446a:	4618      	mov	r0, r3
    446c:	4b11      	ldr	r3, [pc, #68]	; (44b4 <CAN1_Handler+0xc0>)
    446e:	4798      	blx	r3
    4470:	4603      	mov	r3, r0
    4472:	2b00      	cmp	r3, #0
    4474:	d001      	beq.n	447a <CAN1_Handler+0x86>
    4476:	2302      	movs	r3, #2
    4478:	e000      	b.n	447c <CAN1_Handler+0x88>
    447a:	2301      	movs	r3, #1
    447c:	4619      	mov	r1, r3
    447e:	6878      	ldr	r0, [r7, #4]
    4480:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    4482:	683b      	ldr	r3, [r7, #0]
    4484:	f003 0308 	and.w	r3, r3, #8
    4488:	2b00      	cmp	r3, #0
    448a:	d004      	beq.n	4496 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	68db      	ldr	r3, [r3, #12]
    4490:	2104      	movs	r1, #4
    4492:	6878      	ldr	r0, [r7, #4]
    4494:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    4496:	687b      	ldr	r3, [r7, #4]
    4498:	681b      	ldr	r3, [r3, #0]
    449a:	6839      	ldr	r1, [r7, #0]
    449c:	4618      	mov	r0, r3
    449e:	4b06      	ldr	r3, [pc, #24]	; (44b8 <CAN1_Handler+0xc4>)
    44a0:	4798      	blx	r3
}
    44a2:	bf00      	nop
    44a4:	370c      	adds	r7, #12
    44a6:	46bd      	mov	sp, r7
    44a8:	bd90      	pop	{r4, r7, pc}
    44aa:	bf00      	nop
    44ac:	200009c4 	.word	0x200009c4
    44b0:	000040c5 	.word	0x000040c5
    44b4:	00003f5d 	.word	0x00003f5d
    44b8:	000040a9 	.word	0x000040a9

000044bc <__NVIC_SetPendingIRQ>:
{
    44bc:	b480      	push	{r7}
    44be:	b083      	sub	sp, #12
    44c0:	af00      	add	r7, sp, #0
    44c2:	4603      	mov	r3, r0
    44c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    44c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    44ca:	2b00      	cmp	r3, #0
    44cc:	db0c      	blt.n	44e8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    44ce:	4909      	ldr	r1, [pc, #36]	; (44f4 <__NVIC_SetPendingIRQ+0x38>)
    44d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    44d4:	095b      	lsrs	r3, r3, #5
    44d6:	88fa      	ldrh	r2, [r7, #6]
    44d8:	f002 021f 	and.w	r2, r2, #31
    44dc:	2001      	movs	r0, #1
    44de:	fa00 f202 	lsl.w	r2, r0, r2
    44e2:	3340      	adds	r3, #64	; 0x40
    44e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    44e8:	bf00      	nop
    44ea:	370c      	adds	r7, #12
    44ec:	46bd      	mov	sp, r7
    44ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    44f2:	4770      	bx	lr
    44f4:	e000e100 	.word	0xe000e100

000044f8 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    44f8:	b580      	push	{r7, lr}
    44fa:	b082      	sub	sp, #8
    44fc:	af00      	add	r7, sp, #0
    44fe:	4603      	mov	r3, r0
    4500:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    4502:	79fb      	ldrb	r3, [r7, #7]
    4504:	b21b      	sxth	r3, r3
    4506:	4618      	mov	r0, r3
    4508:	4b02      	ldr	r3, [pc, #8]	; (4514 <_irq_set+0x1c>)
    450a:	4798      	blx	r3
}
    450c:	bf00      	nop
    450e:	3708      	adds	r7, #8
    4510:	46bd      	mov	sp, r7
    4512:	bd80      	pop	{r7, pc}
    4514:	000044bd 	.word	0x000044bd

00004518 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4518:	b480      	push	{r7}
    451a:	b083      	sub	sp, #12
    451c:	af00      	add	r7, sp, #0
    451e:	4603      	mov	r3, r0
    4520:	6039      	str	r1, [r7, #0]
    4522:	80fb      	strh	r3, [r7, #6]
    4524:	4613      	mov	r3, r2
    4526:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4528:	797b      	ldrb	r3, [r7, #5]
    452a:	3b04      	subs	r3, #4
    452c:	2b05      	cmp	r3, #5
    452e:	d86b      	bhi.n	4608 <_get_cycles_for_us_internal+0xf0>
    4530:	a201      	add	r2, pc, #4	; (adr r2, 4538 <_get_cycles_for_us_internal+0x20>)
    4532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4536:	bf00      	nop
    4538:	000045e7 	.word	0x000045e7
    453c:	000045c7 	.word	0x000045c7
    4540:	000045a9 	.word	0x000045a9
    4544:	0000458b 	.word	0x0000458b
    4548:	0000456d 	.word	0x0000456d
    454c:	00004551 	.word	0x00004551
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4550:	88fb      	ldrh	r3, [r7, #6]
    4552:	683a      	ldr	r2, [r7, #0]
    4554:	4935      	ldr	r1, [pc, #212]	; (462c <_get_cycles_for_us_internal+0x114>)
    4556:	fba1 1202 	umull	r1, r2, r1, r2
    455a:	0c92      	lsrs	r2, r2, #18
    455c:	fb02 f303 	mul.w	r3, r2, r3
    4560:	3302      	adds	r3, #2
    4562:	4a33      	ldr	r2, [pc, #204]	; (4630 <_get_cycles_for_us_internal+0x118>)
    4564:	fba2 2303 	umull	r2, r3, r2, r3
    4568:	085b      	lsrs	r3, r3, #1
    456a:	e059      	b.n	4620 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    456c:	88fb      	ldrh	r3, [r7, #6]
    456e:	683a      	ldr	r2, [r7, #0]
    4570:	0952      	lsrs	r2, r2, #5
    4572:	4930      	ldr	r1, [pc, #192]	; (4634 <_get_cycles_for_us_internal+0x11c>)
    4574:	fba1 1202 	umull	r1, r2, r1, r2
    4578:	09d2      	lsrs	r2, r2, #7
    457a:	fb02 f303 	mul.w	r3, r2, r3
    457e:	331d      	adds	r3, #29
    4580:	4a2d      	ldr	r2, [pc, #180]	; (4638 <_get_cycles_for_us_internal+0x120>)
    4582:	fba2 2303 	umull	r2, r3, r2, r3
    4586:	091b      	lsrs	r3, r3, #4
    4588:	e04a      	b.n	4620 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    458a:	88fb      	ldrh	r3, [r7, #6]
    458c:	683a      	ldr	r2, [r7, #0]
    458e:	492b      	ldr	r1, [pc, #172]	; (463c <_get_cycles_for_us_internal+0x124>)
    4590:	fba1 1202 	umull	r1, r2, r1, r2
    4594:	0b52      	lsrs	r2, r2, #13
    4596:	fb02 f303 	mul.w	r3, r2, r3
    459a:	f203 132b 	addw	r3, r3, #299	; 0x12b
    459e:	4a28      	ldr	r2, [pc, #160]	; (4640 <_get_cycles_for_us_internal+0x128>)
    45a0:	fba2 2303 	umull	r2, r3, r2, r3
    45a4:	095b      	lsrs	r3, r3, #5
    45a6:	e03b      	b.n	4620 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    45a8:	88fb      	ldrh	r3, [r7, #6]
    45aa:	683a      	ldr	r2, [r7, #0]
    45ac:	4925      	ldr	r1, [pc, #148]	; (4644 <_get_cycles_for_us_internal+0x12c>)
    45ae:	fba1 1202 	umull	r1, r2, r1, r2
    45b2:	0992      	lsrs	r2, r2, #6
    45b4:	fb02 f303 	mul.w	r3, r2, r3
    45b8:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    45bc:	4a22      	ldr	r2, [pc, #136]	; (4648 <_get_cycles_for_us_internal+0x130>)
    45be:	fba2 2303 	umull	r2, r3, r2, r3
    45c2:	099b      	lsrs	r3, r3, #6
    45c4:	e02c      	b.n	4620 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    45c6:	88fb      	ldrh	r3, [r7, #6]
    45c8:	683a      	ldr	r2, [r7, #0]
    45ca:	4920      	ldr	r1, [pc, #128]	; (464c <_get_cycles_for_us_internal+0x134>)
    45cc:	fba1 1202 	umull	r1, r2, r1, r2
    45d0:	0952      	lsrs	r2, r2, #5
    45d2:	fb02 f303 	mul.w	r3, r2, r3
    45d6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    45da:	332f      	adds	r3, #47	; 0x2f
    45dc:	4a1c      	ldr	r2, [pc, #112]	; (4650 <_get_cycles_for_us_internal+0x138>)
    45de:	fba2 2303 	umull	r2, r3, r2, r3
    45e2:	0b5b      	lsrs	r3, r3, #13
    45e4:	e01c      	b.n	4620 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    45e6:	88fb      	ldrh	r3, [r7, #6]
    45e8:	683a      	ldr	r2, [r7, #0]
    45ea:	491a      	ldr	r1, [pc, #104]	; (4654 <_get_cycles_for_us_internal+0x13c>)
    45ec:	fba1 1202 	umull	r1, r2, r1, r2
    45f0:	08d2      	lsrs	r2, r2, #3
    45f2:	fb02 f303 	mul.w	r3, r2, r3
    45f6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    45fa:	f203 33df 	addw	r3, r3, #991	; 0x3df
    45fe:	4a16      	ldr	r2, [pc, #88]	; (4658 <_get_cycles_for_us_internal+0x140>)
    4600:	fba2 2303 	umull	r2, r3, r2, r3
    4604:	0c5b      	lsrs	r3, r3, #17
    4606:	e00b      	b.n	4620 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4608:	88fb      	ldrh	r3, [r7, #6]
    460a:	683a      	ldr	r2, [r7, #0]
    460c:	fb02 f303 	mul.w	r3, r2, r3
    4610:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4614:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4618:	4a10      	ldr	r2, [pc, #64]	; (465c <_get_cycles_for_us_internal+0x144>)
    461a:	fba2 2303 	umull	r2, r3, r2, r3
    461e:	0c9b      	lsrs	r3, r3, #18
	}
}
    4620:	4618      	mov	r0, r3
    4622:	370c      	adds	r7, #12
    4624:	46bd      	mov	sp, r7
    4626:	f85d 7b04 	ldr.w	r7, [sp], #4
    462a:	4770      	bx	lr
    462c:	431bde83 	.word	0x431bde83
    4630:	aaaaaaab 	.word	0xaaaaaaab
    4634:	0a7c5ac5 	.word	0x0a7c5ac5
    4638:	88888889 	.word	0x88888889
    463c:	d1b71759 	.word	0xd1b71759
    4640:	1b4e81b5 	.word	0x1b4e81b5
    4644:	10624dd3 	.word	0x10624dd3
    4648:	057619f1 	.word	0x057619f1
    464c:	51eb851f 	.word	0x51eb851f
    4650:	45e7b273 	.word	0x45e7b273
    4654:	cccccccd 	.word	0xcccccccd
    4658:	6fd91d85 	.word	0x6fd91d85
    465c:	165e9f81 	.word	0x165e9f81

00004660 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4660:	b580      	push	{r7, lr}
    4662:	b082      	sub	sp, #8
    4664:	af00      	add	r7, sp, #0
    4666:	4603      	mov	r3, r0
    4668:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    466a:	88fb      	ldrh	r3, [r7, #6]
    466c:	2209      	movs	r2, #9
    466e:	4904      	ldr	r1, [pc, #16]	; (4680 <_get_cycles_for_us+0x20>)
    4670:	4618      	mov	r0, r3
    4672:	4b04      	ldr	r3, [pc, #16]	; (4684 <_get_cycles_for_us+0x24>)
    4674:	4798      	blx	r3
    4676:	4603      	mov	r3, r0
}
    4678:	4618      	mov	r0, r3
    467a:	3708      	adds	r7, #8
    467c:	46bd      	mov	sp, r7
    467e:	bd80      	pop	{r7, pc}
    4680:	07270e00 	.word	0x07270e00
    4684:	00004519 	.word	0x00004519

00004688 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4688:	b480      	push	{r7}
    468a:	b083      	sub	sp, #12
    468c:	af00      	add	r7, sp, #0
    468e:	4603      	mov	r3, r0
    4690:	6039      	str	r1, [r7, #0]
    4692:	80fb      	strh	r3, [r7, #6]
    4694:	4613      	mov	r3, r2
    4696:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4698:	797b      	ldrb	r3, [r7, #5]
    469a:	3b04      	subs	r3, #4
    469c:	2b05      	cmp	r3, #5
    469e:	d870      	bhi.n	4782 <_get_cycles_for_ms_internal+0xfa>
    46a0:	a201      	add	r2, pc, #4	; (adr r2, 46a8 <_get_cycles_for_ms_internal+0x20>)
    46a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    46a6:	bf00      	nop
    46a8:	00004765 	.word	0x00004765
    46ac:	00004749 	.word	0x00004749
    46b0:	0000472d 	.word	0x0000472d
    46b4:	00004709 	.word	0x00004709
    46b8:	000046e5 	.word	0x000046e5
    46bc:	000046c1 	.word	0x000046c1
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    46c0:	88fb      	ldrh	r3, [r7, #6]
    46c2:	683a      	ldr	r2, [r7, #0]
    46c4:	4937      	ldr	r1, [pc, #220]	; (47a4 <_get_cycles_for_ms_internal+0x11c>)
    46c6:	fba1 1202 	umull	r1, r2, r1, r2
    46ca:	0c92      	lsrs	r2, r2, #18
    46cc:	fb02 f303 	mul.w	r3, r2, r3
    46d0:	3302      	adds	r3, #2
    46d2:	4a35      	ldr	r2, [pc, #212]	; (47a8 <_get_cycles_for_ms_internal+0x120>)
    46d4:	fba2 2303 	umull	r2, r3, r2, r3
    46d8:	085b      	lsrs	r3, r3, #1
    46da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    46de:	fb02 f303 	mul.w	r3, r2, r3
    46e2:	e058      	b.n	4796 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    46e4:	88fb      	ldrh	r3, [r7, #6]
    46e6:	683a      	ldr	r2, [r7, #0]
    46e8:	0952      	lsrs	r2, r2, #5
    46ea:	4930      	ldr	r1, [pc, #192]	; (47ac <_get_cycles_for_ms_internal+0x124>)
    46ec:	fba1 1202 	umull	r1, r2, r1, r2
    46f0:	09d2      	lsrs	r2, r2, #7
    46f2:	fb02 f303 	mul.w	r3, r2, r3
    46f6:	3302      	adds	r3, #2
    46f8:	4a2b      	ldr	r2, [pc, #172]	; (47a8 <_get_cycles_for_ms_internal+0x120>)
    46fa:	fba2 2303 	umull	r2, r3, r2, r3
    46fe:	085b      	lsrs	r3, r3, #1
    4700:	2264      	movs	r2, #100	; 0x64
    4702:	fb02 f303 	mul.w	r3, r2, r3
    4706:	e046      	b.n	4796 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4708:	88fb      	ldrh	r3, [r7, #6]
    470a:	683a      	ldr	r2, [r7, #0]
    470c:	4928      	ldr	r1, [pc, #160]	; (47b0 <_get_cycles_for_ms_internal+0x128>)
    470e:	fba1 1202 	umull	r1, r2, r1, r2
    4712:	0b52      	lsrs	r2, r2, #13
    4714:	fb02 f303 	mul.w	r3, r2, r3
    4718:	3302      	adds	r3, #2
    471a:	4a23      	ldr	r2, [pc, #140]	; (47a8 <_get_cycles_for_ms_internal+0x120>)
    471c:	fba2 2303 	umull	r2, r3, r2, r3
    4720:	085a      	lsrs	r2, r3, #1
    4722:	4613      	mov	r3, r2
    4724:	009b      	lsls	r3, r3, #2
    4726:	4413      	add	r3, r2
    4728:	005b      	lsls	r3, r3, #1
    472a:	e034      	b.n	4796 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    472c:	88fb      	ldrh	r3, [r7, #6]
    472e:	683a      	ldr	r2, [r7, #0]
    4730:	4920      	ldr	r1, [pc, #128]	; (47b4 <_get_cycles_for_ms_internal+0x12c>)
    4732:	fba1 1202 	umull	r1, r2, r1, r2
    4736:	0992      	lsrs	r2, r2, #6
    4738:	fb02 f303 	mul.w	r3, r2, r3
    473c:	3302      	adds	r3, #2
    473e:	4a1a      	ldr	r2, [pc, #104]	; (47a8 <_get_cycles_for_ms_internal+0x120>)
    4740:	fba2 2303 	umull	r2, r3, r2, r3
    4744:	085b      	lsrs	r3, r3, #1
    4746:	e026      	b.n	4796 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4748:	88fb      	ldrh	r3, [r7, #6]
    474a:	683a      	ldr	r2, [r7, #0]
    474c:	491a      	ldr	r1, [pc, #104]	; (47b8 <_get_cycles_for_ms_internal+0x130>)
    474e:	fba1 1202 	umull	r1, r2, r1, r2
    4752:	0952      	lsrs	r2, r2, #5
    4754:	fb02 f303 	mul.w	r3, r2, r3
    4758:	331d      	adds	r3, #29
    475a:	4a18      	ldr	r2, [pc, #96]	; (47bc <_get_cycles_for_ms_internal+0x134>)
    475c:	fba2 2303 	umull	r2, r3, r2, r3
    4760:	091b      	lsrs	r3, r3, #4
    4762:	e018      	b.n	4796 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4764:	88fb      	ldrh	r3, [r7, #6]
    4766:	683a      	ldr	r2, [r7, #0]
    4768:	4915      	ldr	r1, [pc, #84]	; (47c0 <_get_cycles_for_ms_internal+0x138>)
    476a:	fba1 1202 	umull	r1, r2, r1, r2
    476e:	08d2      	lsrs	r2, r2, #3
    4770:	fb02 f303 	mul.w	r3, r2, r3
    4774:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4778:	4a12      	ldr	r2, [pc, #72]	; (47c4 <_get_cycles_for_ms_internal+0x13c>)
    477a:	fba2 2303 	umull	r2, r3, r2, r3
    477e:	095b      	lsrs	r3, r3, #5
    4780:	e009      	b.n	4796 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4782:	88fb      	ldrh	r3, [r7, #6]
    4784:	683a      	ldr	r2, [r7, #0]
    4786:	fb02 f303 	mul.w	r3, r2, r3
    478a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    478e:	4a0e      	ldr	r2, [pc, #56]	; (47c8 <_get_cycles_for_ms_internal+0x140>)
    4790:	fba2 2303 	umull	r2, r3, r2, r3
    4794:	099b      	lsrs	r3, r3, #6
	}
}
    4796:	4618      	mov	r0, r3
    4798:	370c      	adds	r7, #12
    479a:	46bd      	mov	sp, r7
    479c:	f85d 7b04 	ldr.w	r7, [sp], #4
    47a0:	4770      	bx	lr
    47a2:	bf00      	nop
    47a4:	431bde83 	.word	0x431bde83
    47a8:	aaaaaaab 	.word	0xaaaaaaab
    47ac:	0a7c5ac5 	.word	0x0a7c5ac5
    47b0:	d1b71759 	.word	0xd1b71759
    47b4:	10624dd3 	.word	0x10624dd3
    47b8:	51eb851f 	.word	0x51eb851f
    47bc:	88888889 	.word	0x88888889
    47c0:	cccccccd 	.word	0xcccccccd
    47c4:	1b4e81b5 	.word	0x1b4e81b5
    47c8:	057619f1 	.word	0x057619f1

000047cc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    47cc:	b580      	push	{r7, lr}
    47ce:	b082      	sub	sp, #8
    47d0:	af00      	add	r7, sp, #0
    47d2:	4603      	mov	r3, r0
    47d4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    47d6:	88fb      	ldrh	r3, [r7, #6]
    47d8:	2209      	movs	r2, #9
    47da:	4904      	ldr	r1, [pc, #16]	; (47ec <_get_cycles_for_ms+0x20>)
    47dc:	4618      	mov	r0, r3
    47de:	4b04      	ldr	r3, [pc, #16]	; (47f0 <_get_cycles_for_ms+0x24>)
    47e0:	4798      	blx	r3
    47e2:	4603      	mov	r3, r0
}
    47e4:	4618      	mov	r0, r3
    47e6:	3708      	adds	r7, #8
    47e8:	46bd      	mov	sp, r7
    47ea:	bd80      	pop	{r7, pc}
    47ec:	07270e00 	.word	0x07270e00
    47f0:	00004689 	.word	0x00004689
    47f4:	00000000 	.word	0x00000000

000047f8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    47f8:	b480      	push	{r7}
    47fa:	b083      	sub	sp, #12
    47fc:	af00      	add	r7, sp, #0
    47fe:	6078      	str	r0, [r7, #4]
    4800:	6039      	str	r1, [r7, #0]
    4802:	bf00      	nop
    4804:	f3af 8000 	nop.w

00004808 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4808:	3901      	subs	r1, #1
    480a:	d8fd      	bhi.n	4808 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    480c:	bf00      	nop
    480e:	370c      	adds	r7, #12
    4810:	46bd      	mov	sp, r7
    4812:	f85d 7b04 	ldr.w	r7, [sp], #4
    4816:	4770      	bx	lr

00004818 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4818:	b480      	push	{r7}
    481a:	b083      	sub	sp, #12
    481c:	af00      	add	r7, sp, #0
    481e:	6078      	str	r0, [r7, #4]
    4820:	460b      	mov	r3, r1
    4822:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	881b      	ldrh	r3, [r3, #0]
    4828:	b29a      	uxth	r2, r3
    482a:	887b      	ldrh	r3, [r7, #2]
    482c:	021b      	lsls	r3, r3, #8
    482e:	b29b      	uxth	r3, r3
    4830:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4834:	b29b      	uxth	r3, r3
    4836:	4313      	orrs	r3, r2
    4838:	b29a      	uxth	r2, r3
    483a:	687b      	ldr	r3, [r7, #4]
    483c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    483e:	bf00      	nop
    4840:	370c      	adds	r7, #12
    4842:	46bd      	mov	sp, r7
    4844:	f85d 7b04 	ldr.w	r7, [sp], #4
    4848:	4770      	bx	lr

0000484a <hri_port_set_EVCTRL_reg>:
{
    484a:	b480      	push	{r7}
    484c:	b085      	sub	sp, #20
    484e:	af00      	add	r7, sp, #0
    4850:	60f8      	str	r0, [r7, #12]
    4852:	460b      	mov	r3, r1
    4854:	607a      	str	r2, [r7, #4]
    4856:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4858:	7afb      	ldrb	r3, [r7, #11]
    485a:	7afa      	ldrb	r2, [r7, #11]
    485c:	68f9      	ldr	r1, [r7, #12]
    485e:	01d2      	lsls	r2, r2, #7
    4860:	440a      	add	r2, r1
    4862:	322c      	adds	r2, #44	; 0x2c
    4864:	6811      	ldr	r1, [r2, #0]
    4866:	687a      	ldr	r2, [r7, #4]
    4868:	430a      	orrs	r2, r1
    486a:	68f9      	ldr	r1, [r7, #12]
    486c:	01db      	lsls	r3, r3, #7
    486e:	440b      	add	r3, r1
    4870:	332c      	adds	r3, #44	; 0x2c
    4872:	601a      	str	r2, [r3, #0]
}
    4874:	bf00      	nop
    4876:	3714      	adds	r7, #20
    4878:	46bd      	mov	sp, r7
    487a:	f85d 7b04 	ldr.w	r7, [sp], #4
    487e:	4770      	bx	lr

00004880 <_port_event_init>:

static inline void _port_event_init()
{
    4880:	b580      	push	{r7, lr}
    4882:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4884:	2200      	movs	r2, #0
    4886:	2100      	movs	r1, #0
    4888:	480a      	ldr	r0, [pc, #40]	; (48b4 <_port_event_init+0x34>)
    488a:	4b0b      	ldr	r3, [pc, #44]	; (48b8 <_port_event_init+0x38>)
    488c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    488e:	2200      	movs	r2, #0
    4890:	2101      	movs	r1, #1
    4892:	4808      	ldr	r0, [pc, #32]	; (48b4 <_port_event_init+0x34>)
    4894:	4b08      	ldr	r3, [pc, #32]	; (48b8 <_port_event_init+0x38>)
    4896:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4898:	f64e 72ef 	movw	r2, #61423	; 0xefef
    489c:	2102      	movs	r1, #2
    489e:	4805      	ldr	r0, [pc, #20]	; (48b4 <_port_event_init+0x34>)
    48a0:	4b05      	ldr	r3, [pc, #20]	; (48b8 <_port_event_init+0x38>)
    48a2:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    48a4:	2200      	movs	r2, #0
    48a6:	2103      	movs	r1, #3
    48a8:	4802      	ldr	r0, [pc, #8]	; (48b4 <_port_event_init+0x34>)
    48aa:	4b03      	ldr	r3, [pc, #12]	; (48b8 <_port_event_init+0x38>)
    48ac:	4798      	blx	r3
}
    48ae:	bf00      	nop
    48b0:	bd80      	pop	{r7, pc}
    48b2:	bf00      	nop
    48b4:	41008000 	.word	0x41008000
    48b8:	0000484b 	.word	0x0000484b

000048bc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    48bc:	b580      	push	{r7, lr}
    48be:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    48c0:	2104      	movs	r1, #4
    48c2:	480b      	ldr	r0, [pc, #44]	; (48f0 <_init_chip+0x34>)
    48c4:	4b0b      	ldr	r3, [pc, #44]	; (48f4 <_init_chip+0x38>)
    48c6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    48c8:	4b0b      	ldr	r3, [pc, #44]	; (48f8 <_init_chip+0x3c>)
    48ca:	4798      	blx	r3
	_oscctrl_init_sources();
    48cc:	4b0b      	ldr	r3, [pc, #44]	; (48fc <_init_chip+0x40>)
    48ce:	4798      	blx	r3
	_mclk_init();
    48d0:	4b0b      	ldr	r3, [pc, #44]	; (4900 <_init_chip+0x44>)
    48d2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    48d4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    48d8:	4b0a      	ldr	r3, [pc, #40]	; (4904 <_init_chip+0x48>)
    48da:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    48dc:	4b0a      	ldr	r3, [pc, #40]	; (4908 <_init_chip+0x4c>)
    48de:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    48e0:	f640 30df 	movw	r0, #3039	; 0xbdf
    48e4:	4b07      	ldr	r3, [pc, #28]	; (4904 <_init_chip+0x48>)
    48e6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    48e8:	4b08      	ldr	r3, [pc, #32]	; (490c <_init_chip+0x50>)
    48ea:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    48ec:	bf00      	nop
    48ee:	bd80      	pop	{r7, pc}
    48f0:	41004000 	.word	0x41004000
    48f4:	00004819 	.word	0x00004819
    48f8:	000053cd 	.word	0x000053cd
    48fc:	00005895 	.word	0x00005895
    4900:	000052ed 	.word	0x000052ed
    4904:	000051ad 	.word	0x000051ad
    4908:	000058d5 	.word	0x000058d5
    490c:	00004881 	.word	0x00004881

00004910 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4910:	b480      	push	{r7}
    4912:	b083      	sub	sp, #12
    4914:	af00      	add	r7, sp, #0
    4916:	6078      	str	r0, [r7, #4]
    4918:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    491a:	687b      	ldr	r3, [r7, #4]
    491c:	683a      	ldr	r2, [r7, #0]
    491e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4920:	2300      	movs	r3, #0
}
    4922:	4618      	mov	r0, r3
    4924:	370c      	adds	r7, #12
    4926:	46bd      	mov	sp, r7
    4928:	f85d 7b04 	ldr.w	r7, [sp], #4
    492c:	4770      	bx	lr
	...

00004930 <__NVIC_EnableIRQ>:
{
    4930:	b480      	push	{r7}
    4932:	b083      	sub	sp, #12
    4934:	af00      	add	r7, sp, #0
    4936:	4603      	mov	r3, r0
    4938:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    493a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    493e:	2b00      	cmp	r3, #0
    4940:	db0b      	blt.n	495a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4942:	4909      	ldr	r1, [pc, #36]	; (4968 <__NVIC_EnableIRQ+0x38>)
    4944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4948:	095b      	lsrs	r3, r3, #5
    494a:	88fa      	ldrh	r2, [r7, #6]
    494c:	f002 021f 	and.w	r2, r2, #31
    4950:	2001      	movs	r0, #1
    4952:	fa00 f202 	lsl.w	r2, r0, r2
    4956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    495a:	bf00      	nop
    495c:	370c      	adds	r7, #12
    495e:	46bd      	mov	sp, r7
    4960:	f85d 7b04 	ldr.w	r7, [sp], #4
    4964:	4770      	bx	lr
    4966:	bf00      	nop
    4968:	e000e100 	.word	0xe000e100

0000496c <__NVIC_DisableIRQ>:
{
    496c:	b480      	push	{r7}
    496e:	b083      	sub	sp, #12
    4970:	af00      	add	r7, sp, #0
    4972:	4603      	mov	r3, r0
    4974:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    497a:	2b00      	cmp	r3, #0
    497c:	db10      	blt.n	49a0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    497e:	490b      	ldr	r1, [pc, #44]	; (49ac <__NVIC_DisableIRQ+0x40>)
    4980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4984:	095b      	lsrs	r3, r3, #5
    4986:	88fa      	ldrh	r2, [r7, #6]
    4988:	f002 021f 	and.w	r2, r2, #31
    498c:	2001      	movs	r0, #1
    498e:	fa00 f202 	lsl.w	r2, r0, r2
    4992:	3320      	adds	r3, #32
    4994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4998:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    499c:	f3bf 8f6f 	isb	sy
}
    49a0:	bf00      	nop
    49a2:	370c      	adds	r7, #12
    49a4:	46bd      	mov	sp, r7
    49a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    49aa:	4770      	bx	lr
    49ac:	e000e100 	.word	0xe000e100

000049b0 <__NVIC_ClearPendingIRQ>:
{
    49b0:	b480      	push	{r7}
    49b2:	b083      	sub	sp, #12
    49b4:	af00      	add	r7, sp, #0
    49b6:	4603      	mov	r3, r0
    49b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    49ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    49be:	2b00      	cmp	r3, #0
    49c0:	db0c      	blt.n	49dc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    49c2:	4909      	ldr	r1, [pc, #36]	; (49e8 <__NVIC_ClearPendingIRQ+0x38>)
    49c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    49c8:	095b      	lsrs	r3, r3, #5
    49ca:	88fa      	ldrh	r2, [r7, #6]
    49cc:	f002 021f 	and.w	r2, r2, #31
    49d0:	2001      	movs	r0, #1
    49d2:	fa00 f202 	lsl.w	r2, r0, r2
    49d6:	3360      	adds	r3, #96	; 0x60
    49d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    49dc:	bf00      	nop
    49de:	370c      	adds	r7, #12
    49e0:	46bd      	mov	sp, r7
    49e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    49e6:	4770      	bx	lr
    49e8:	e000e100 	.word	0xe000e100

000049ec <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    49ec:	b480      	push	{r7}
    49ee:	b083      	sub	sp, #12
    49f0:	af00      	add	r7, sp, #0
    49f2:	6078      	str	r0, [r7, #4]
    49f4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    49f6:	bf00      	nop
    49f8:	687b      	ldr	r3, [r7, #4]
    49fa:	685a      	ldr	r2, [r3, #4]
    49fc:	683b      	ldr	r3, [r7, #0]
    49fe:	4013      	ands	r3, r2
    4a00:	2b00      	cmp	r3, #0
    4a02:	d1f9      	bne.n	49f8 <hri_eic_wait_for_sync+0xc>
	};
}
    4a04:	bf00      	nop
    4a06:	370c      	adds	r7, #12
    4a08:	46bd      	mov	sp, r7
    4a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a0e:	4770      	bx	lr

00004a10 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4a10:	b480      	push	{r7}
    4a12:	b083      	sub	sp, #12
    4a14:	af00      	add	r7, sp, #0
    4a16:	6078      	str	r0, [r7, #4]
    4a18:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4a1a:	687b      	ldr	r3, [r7, #4]
    4a1c:	685a      	ldr	r2, [r3, #4]
    4a1e:	683b      	ldr	r3, [r7, #0]
    4a20:	4013      	ands	r3, r2
    4a22:	2b00      	cmp	r3, #0
    4a24:	bf14      	ite	ne
    4a26:	2301      	movne	r3, #1
    4a28:	2300      	moveq	r3, #0
    4a2a:	b2db      	uxtb	r3, r3
}
    4a2c:	4618      	mov	r0, r3
    4a2e:	370c      	adds	r7, #12
    4a30:	46bd      	mov	sp, r7
    4a32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a36:	4770      	bx	lr

00004a38 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4a38:	b480      	push	{r7}
    4a3a:	b083      	sub	sp, #12
    4a3c:	af00      	add	r7, sp, #0
    4a3e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4a40:	687b      	ldr	r3, [r7, #4]
    4a42:	695b      	ldr	r3, [r3, #20]
}
    4a44:	4618      	mov	r0, r3
    4a46:	370c      	adds	r7, #12
    4a48:	46bd      	mov	sp, r7
    4a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a4e:	4770      	bx	lr

00004a50 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4a50:	b480      	push	{r7}
    4a52:	b083      	sub	sp, #12
    4a54:	af00      	add	r7, sp, #0
    4a56:	6078      	str	r0, [r7, #4]
    4a58:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4a5a:	687b      	ldr	r3, [r7, #4]
    4a5c:	683a      	ldr	r2, [r7, #0]
    4a5e:	615a      	str	r2, [r3, #20]
}
    4a60:	bf00      	nop
    4a62:	370c      	adds	r7, #12
    4a64:	46bd      	mov	sp, r7
    4a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a6a:	4770      	bx	lr

00004a6c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4a6c:	b480      	push	{r7}
    4a6e:	b083      	sub	sp, #12
    4a70:	af00      	add	r7, sp, #0
    4a72:	6078      	str	r0, [r7, #4]
    4a74:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4a76:	687b      	ldr	r3, [r7, #4]
    4a78:	683a      	ldr	r2, [r7, #0]
    4a7a:	611a      	str	r2, [r3, #16]
}
    4a7c:	bf00      	nop
    4a7e:	370c      	adds	r7, #12
    4a80:	46bd      	mov	sp, r7
    4a82:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a86:	4770      	bx	lr

00004a88 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4a88:	b480      	push	{r7}
    4a8a:	b083      	sub	sp, #12
    4a8c:	af00      	add	r7, sp, #0
    4a8e:	6078      	str	r0, [r7, #4]
    4a90:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4a92:	687b      	ldr	r3, [r7, #4]
    4a94:	683a      	ldr	r2, [r7, #0]
    4a96:	60da      	str	r2, [r3, #12]
}
    4a98:	bf00      	nop
    4a9a:	370c      	adds	r7, #12
    4a9c:	46bd      	mov	sp, r7
    4a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aa2:	4770      	bx	lr

00004aa4 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4aa4:	b580      	push	{r7, lr}
    4aa6:	b082      	sub	sp, #8
    4aa8:	af00      	add	r7, sp, #0
    4aaa:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4aac:	687b      	ldr	r3, [r7, #4]
    4aae:	781b      	ldrb	r3, [r3, #0]
    4ab0:	b2db      	uxtb	r3, r3
    4ab2:	f043 0302 	orr.w	r3, r3, #2
    4ab6:	b2da      	uxtb	r2, r3
    4ab8:	687b      	ldr	r3, [r7, #4]
    4aba:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4abc:	2103      	movs	r1, #3
    4abe:	6878      	ldr	r0, [r7, #4]
    4ac0:	4b02      	ldr	r3, [pc, #8]	; (4acc <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4ac2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4ac4:	bf00      	nop
    4ac6:	3708      	adds	r7, #8
    4ac8:	46bd      	mov	sp, r7
    4aca:	bd80      	pop	{r7, pc}
    4acc:	000049ed 	.word	0x000049ed

00004ad0 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4ad0:	b580      	push	{r7, lr}
    4ad2:	b082      	sub	sp, #8
    4ad4:	af00      	add	r7, sp, #0
    4ad6:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	781b      	ldrb	r3, [r3, #0]
    4adc:	b2db      	uxtb	r3, r3
    4ade:	f023 0302 	bic.w	r3, r3, #2
    4ae2:	b2da      	uxtb	r2, r3
    4ae4:	687b      	ldr	r3, [r7, #4]
    4ae6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4ae8:	2103      	movs	r1, #3
    4aea:	6878      	ldr	r0, [r7, #4]
    4aec:	4b02      	ldr	r3, [pc, #8]	; (4af8 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4aee:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4af0:	bf00      	nop
    4af2:	3708      	adds	r7, #8
    4af4:	46bd      	mov	sp, r7
    4af6:	bd80      	pop	{r7, pc}
    4af8:	000049ed 	.word	0x000049ed

00004afc <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4afc:	b580      	push	{r7, lr}
    4afe:	b084      	sub	sp, #16
    4b00:	af00      	add	r7, sp, #0
    4b02:	6078      	str	r0, [r7, #4]
    4b04:	460b      	mov	r3, r1
    4b06:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4b08:	687b      	ldr	r3, [r7, #4]
    4b0a:	781b      	ldrb	r3, [r3, #0]
    4b0c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4b0e:	7bfb      	ldrb	r3, [r7, #15]
    4b10:	f023 0310 	bic.w	r3, r3, #16
    4b14:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4b16:	78fb      	ldrb	r3, [r7, #3]
    4b18:	011b      	lsls	r3, r3, #4
    4b1a:	b25a      	sxtb	r2, r3
    4b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4b20:	4313      	orrs	r3, r2
    4b22:	b25b      	sxtb	r3, r3
    4b24:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4b26:	687b      	ldr	r3, [r7, #4]
    4b28:	7bfa      	ldrb	r2, [r7, #15]
    4b2a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4b2c:	2103      	movs	r1, #3
    4b2e:	6878      	ldr	r0, [r7, #4]
    4b30:	4b02      	ldr	r3, [pc, #8]	; (4b3c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4b32:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4b34:	bf00      	nop
    4b36:	3710      	adds	r7, #16
    4b38:	46bd      	mov	sp, r7
    4b3a:	bd80      	pop	{r7, pc}
    4b3c:	000049ed 	.word	0x000049ed

00004b40 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4b40:	b580      	push	{r7, lr}
    4b42:	b084      	sub	sp, #16
    4b44:	af00      	add	r7, sp, #0
    4b46:	6078      	str	r0, [r7, #4]
    4b48:	460b      	mov	r3, r1
    4b4a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4b4c:	2103      	movs	r1, #3
    4b4e:	6878      	ldr	r0, [r7, #4]
    4b50:	4b06      	ldr	r3, [pc, #24]	; (4b6c <hri_eic_get_CTRLA_reg+0x2c>)
    4b52:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4b54:	687b      	ldr	r3, [r7, #4]
    4b56:	781b      	ldrb	r3, [r3, #0]
    4b58:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4b5a:	7bfa      	ldrb	r2, [r7, #15]
    4b5c:	78fb      	ldrb	r3, [r7, #3]
    4b5e:	4013      	ands	r3, r2
    4b60:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4b62:	7bfb      	ldrb	r3, [r7, #15]
}
    4b64:	4618      	mov	r0, r3
    4b66:	3710      	adds	r7, #16
    4b68:	46bd      	mov	sp, r7
    4b6a:	bd80      	pop	{r7, pc}
    4b6c:	000049ed 	.word	0x000049ed

00004b70 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4b70:	b580      	push	{r7, lr}
    4b72:	b082      	sub	sp, #8
    4b74:	af00      	add	r7, sp, #0
    4b76:	6078      	str	r0, [r7, #4]
    4b78:	460b      	mov	r3, r1
    4b7a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4b7c:	687b      	ldr	r3, [r7, #4]
    4b7e:	78fa      	ldrb	r2, [r7, #3]
    4b80:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4b82:	2103      	movs	r1, #3
    4b84:	6878      	ldr	r0, [r7, #4]
    4b86:	4b03      	ldr	r3, [pc, #12]	; (4b94 <hri_eic_write_CTRLA_reg+0x24>)
    4b88:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4b8a:	bf00      	nop
    4b8c:	3708      	adds	r7, #8
    4b8e:	46bd      	mov	sp, r7
    4b90:	bd80      	pop	{r7, pc}
    4b92:	bf00      	nop
    4b94:	000049ed 	.word	0x000049ed

00004b98 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4b98:	b480      	push	{r7}
    4b9a:	b083      	sub	sp, #12
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	6078      	str	r0, [r7, #4]
    4ba0:	460b      	mov	r3, r1
    4ba2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4ba4:	687b      	ldr	r3, [r7, #4]
    4ba6:	78fa      	ldrb	r2, [r7, #3]
    4ba8:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4baa:	bf00      	nop
    4bac:	370c      	adds	r7, #12
    4bae:	46bd      	mov	sp, r7
    4bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bb4:	4770      	bx	lr

00004bb6 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4bb6:	b480      	push	{r7}
    4bb8:	b083      	sub	sp, #12
    4bba:	af00      	add	r7, sp, #0
    4bbc:	6078      	str	r0, [r7, #4]
    4bbe:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4bc0:	687b      	ldr	r3, [r7, #4]
    4bc2:	683a      	ldr	r2, [r7, #0]
    4bc4:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4bc6:	bf00      	nop
    4bc8:	370c      	adds	r7, #12
    4bca:	46bd      	mov	sp, r7
    4bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bd0:	4770      	bx	lr

00004bd2 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4bd2:	b480      	push	{r7}
    4bd4:	b083      	sub	sp, #12
    4bd6:	af00      	add	r7, sp, #0
    4bd8:	6078      	str	r0, [r7, #4]
    4bda:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4bdc:	687b      	ldr	r3, [r7, #4]
    4bde:	683a      	ldr	r2, [r7, #0]
    4be0:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4be2:	bf00      	nop
    4be4:	370c      	adds	r7, #12
    4be6:	46bd      	mov	sp, r7
    4be8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bec:	4770      	bx	lr

00004bee <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4bee:	b480      	push	{r7}
    4bf0:	b085      	sub	sp, #20
    4bf2:	af00      	add	r7, sp, #0
    4bf4:	60f8      	str	r0, [r7, #12]
    4bf6:	460b      	mov	r3, r1
    4bf8:	607a      	str	r2, [r7, #4]
    4bfa:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4bfc:	7afb      	ldrb	r3, [r7, #11]
    4bfe:	68fa      	ldr	r2, [r7, #12]
    4c00:	3306      	adds	r3, #6
    4c02:	009b      	lsls	r3, r3, #2
    4c04:	4413      	add	r3, r2
    4c06:	687a      	ldr	r2, [r7, #4]
    4c08:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c0a:	bf00      	nop
    4c0c:	3714      	adds	r7, #20
    4c0e:	46bd      	mov	sp, r7
    4c10:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c14:	4770      	bx	lr

00004c16 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4c16:	b480      	push	{r7}
    4c18:	b083      	sub	sp, #12
    4c1a:	af00      	add	r7, sp, #0
    4c1c:	6078      	str	r0, [r7, #4]
    4c1e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4c20:	687b      	ldr	r3, [r7, #4]
    4c22:	683a      	ldr	r2, [r7, #0]
    4c24:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c26:	bf00      	nop
    4c28:	370c      	adds	r7, #12
    4c2a:	46bd      	mov	sp, r7
    4c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c30:	4770      	bx	lr

00004c32 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4c32:	b480      	push	{r7}
    4c34:	b083      	sub	sp, #12
    4c36:	af00      	add	r7, sp, #0
    4c38:	6078      	str	r0, [r7, #4]
    4c3a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4c3c:	687b      	ldr	r3, [r7, #4]
    4c3e:	683a      	ldr	r2, [r7, #0]
    4c40:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c42:	bf00      	nop
    4c44:	370c      	adds	r7, #12
    4c46:	46bd      	mov	sp, r7
    4c48:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c4c:	4770      	bx	lr
	...

00004c50 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4c50:	b580      	push	{r7, lr}
    4c52:	b082      	sub	sp, #8
    4c54:	af00      	add	r7, sp, #0
    4c56:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4c58:	2101      	movs	r1, #1
    4c5a:	484f      	ldr	r0, [pc, #316]	; (4d98 <_ext_irq_init+0x148>)
    4c5c:	4b4f      	ldr	r3, [pc, #316]	; (4d9c <_ext_irq_init+0x14c>)
    4c5e:	4798      	blx	r3
    4c60:	4603      	mov	r3, r0
    4c62:	f083 0301 	eor.w	r3, r3, #1
    4c66:	b2db      	uxtb	r3, r3
    4c68:	2b00      	cmp	r3, #0
    4c6a:	d011      	beq.n	4c90 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4c6c:	2102      	movs	r1, #2
    4c6e:	484a      	ldr	r0, [pc, #296]	; (4d98 <_ext_irq_init+0x148>)
    4c70:	4b4b      	ldr	r3, [pc, #300]	; (4da0 <_ext_irq_init+0x150>)
    4c72:	4798      	blx	r3
    4c74:	4603      	mov	r3, r0
    4c76:	2b00      	cmp	r3, #0
    4c78:	d006      	beq.n	4c88 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4c7a:	4847      	ldr	r0, [pc, #284]	; (4d98 <_ext_irq_init+0x148>)
    4c7c:	4b49      	ldr	r3, [pc, #292]	; (4da4 <_ext_irq_init+0x154>)
    4c7e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4c80:	2102      	movs	r1, #2
    4c82:	4845      	ldr	r0, [pc, #276]	; (4d98 <_ext_irq_init+0x148>)
    4c84:	4b48      	ldr	r3, [pc, #288]	; (4da8 <_ext_irq_init+0x158>)
    4c86:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4c88:	2101      	movs	r1, #1
    4c8a:	4843      	ldr	r0, [pc, #268]	; (4d98 <_ext_irq_init+0x148>)
    4c8c:	4b47      	ldr	r3, [pc, #284]	; (4dac <_ext_irq_init+0x15c>)
    4c8e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4c90:	2101      	movs	r1, #1
    4c92:	4841      	ldr	r0, [pc, #260]	; (4d98 <_ext_irq_init+0x148>)
    4c94:	4b44      	ldr	r3, [pc, #272]	; (4da8 <_ext_irq_init+0x158>)
    4c96:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4c98:	2100      	movs	r1, #0
    4c9a:	483f      	ldr	r0, [pc, #252]	; (4d98 <_ext_irq_init+0x148>)
    4c9c:	4b44      	ldr	r3, [pc, #272]	; (4db0 <_ext_irq_init+0x160>)
    4c9e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4ca0:	2100      	movs	r1, #0
    4ca2:	483d      	ldr	r0, [pc, #244]	; (4d98 <_ext_irq_init+0x148>)
    4ca4:	4b43      	ldr	r3, [pc, #268]	; (4db4 <_ext_irq_init+0x164>)
    4ca6:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4ca8:	2100      	movs	r1, #0
    4caa:	483b      	ldr	r0, [pc, #236]	; (4d98 <_ext_irq_init+0x148>)
    4cac:	4b42      	ldr	r3, [pc, #264]	; (4db8 <_ext_irq_init+0x168>)
    4cae:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4cb0:	f240 31bb 	movw	r1, #955	; 0x3bb
    4cb4:	4838      	ldr	r0, [pc, #224]	; (4d98 <_ext_irq_init+0x148>)
    4cb6:	4b41      	ldr	r3, [pc, #260]	; (4dbc <_ext_irq_init+0x16c>)
    4cb8:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4cba:	f240 313b 	movw	r1, #827	; 0x33b
    4cbe:	4836      	ldr	r0, [pc, #216]	; (4d98 <_ext_irq_init+0x148>)
    4cc0:	4b3f      	ldr	r3, [pc, #252]	; (4dc0 <_ext_irq_init+0x170>)
    4cc2:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4cc4:	2100      	movs	r1, #0
    4cc6:	4834      	ldr	r0, [pc, #208]	; (4d98 <_ext_irq_init+0x148>)
    4cc8:	4b3e      	ldr	r3, [pc, #248]	; (4dc4 <_ext_irq_init+0x174>)
    4cca:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4ccc:	4a3e      	ldr	r2, [pc, #248]	; (4dc8 <_ext_irq_init+0x178>)
    4cce:	2100      	movs	r1, #0
    4cd0:	4831      	ldr	r0, [pc, #196]	; (4d98 <_ext_irq_init+0x148>)
    4cd2:	4b3e      	ldr	r3, [pc, #248]	; (4dcc <_ext_irq_init+0x17c>)
    4cd4:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4cd6:	2211      	movs	r2, #17
    4cd8:	2101      	movs	r1, #1
    4cda:	482f      	ldr	r0, [pc, #188]	; (4d98 <_ext_irq_init+0x148>)
    4cdc:	4b3b      	ldr	r3, [pc, #236]	; (4dcc <_ext_irq_init+0x17c>)
    4cde:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4ce0:	482d      	ldr	r0, [pc, #180]	; (4d98 <_ext_irq_init+0x148>)
    4ce2:	4b3b      	ldr	r3, [pc, #236]	; (4dd0 <_ext_irq_init+0x180>)
    4ce4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    4ce6:	200c      	movs	r0, #12
    4ce8:	4b3a      	ldr	r3, [pc, #232]	; (4dd4 <_ext_irq_init+0x184>)
    4cea:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4cec:	200c      	movs	r0, #12
    4cee:	4b3a      	ldr	r3, [pc, #232]	; (4dd8 <_ext_irq_init+0x188>)
    4cf0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    4cf2:	200c      	movs	r0, #12
    4cf4:	4b39      	ldr	r3, [pc, #228]	; (4ddc <_ext_irq_init+0x18c>)
    4cf6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    4cf8:	200d      	movs	r0, #13
    4cfa:	4b36      	ldr	r3, [pc, #216]	; (4dd4 <_ext_irq_init+0x184>)
    4cfc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    4cfe:	200d      	movs	r0, #13
    4d00:	4b35      	ldr	r3, [pc, #212]	; (4dd8 <_ext_irq_init+0x188>)
    4d02:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    4d04:	200d      	movs	r0, #13
    4d06:	4b35      	ldr	r3, [pc, #212]	; (4ddc <_ext_irq_init+0x18c>)
    4d08:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4d0a:	200f      	movs	r0, #15
    4d0c:	4b31      	ldr	r3, [pc, #196]	; (4dd4 <_ext_irq_init+0x184>)
    4d0e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4d10:	200f      	movs	r0, #15
    4d12:	4b31      	ldr	r3, [pc, #196]	; (4dd8 <_ext_irq_init+0x188>)
    4d14:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    4d16:	200f      	movs	r0, #15
    4d18:	4b30      	ldr	r3, [pc, #192]	; (4ddc <_ext_irq_init+0x18c>)
    4d1a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4d1c:	2010      	movs	r0, #16
    4d1e:	4b2d      	ldr	r3, [pc, #180]	; (4dd4 <_ext_irq_init+0x184>)
    4d20:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4d22:	2010      	movs	r0, #16
    4d24:	4b2c      	ldr	r3, [pc, #176]	; (4dd8 <_ext_irq_init+0x188>)
    4d26:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4d28:	2010      	movs	r0, #16
    4d2a:	4b2c      	ldr	r3, [pc, #176]	; (4ddc <_ext_irq_init+0x18c>)
    4d2c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4d2e:	2011      	movs	r0, #17
    4d30:	4b28      	ldr	r3, [pc, #160]	; (4dd4 <_ext_irq_init+0x184>)
    4d32:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4d34:	2011      	movs	r0, #17
    4d36:	4b28      	ldr	r3, [pc, #160]	; (4dd8 <_ext_irq_init+0x188>)
    4d38:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4d3a:	2011      	movs	r0, #17
    4d3c:	4b27      	ldr	r3, [pc, #156]	; (4ddc <_ext_irq_init+0x18c>)
    4d3e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4d40:	2012      	movs	r0, #18
    4d42:	4b24      	ldr	r3, [pc, #144]	; (4dd4 <_ext_irq_init+0x184>)
    4d44:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4d46:	2012      	movs	r0, #18
    4d48:	4b23      	ldr	r3, [pc, #140]	; (4dd8 <_ext_irq_init+0x188>)
    4d4a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4d4c:	2012      	movs	r0, #18
    4d4e:	4b23      	ldr	r3, [pc, #140]	; (4ddc <_ext_irq_init+0x18c>)
    4d50:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4d52:	2013      	movs	r0, #19
    4d54:	4b1f      	ldr	r3, [pc, #124]	; (4dd4 <_ext_irq_init+0x184>)
    4d56:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4d58:	2013      	movs	r0, #19
    4d5a:	4b1f      	ldr	r3, [pc, #124]	; (4dd8 <_ext_irq_init+0x188>)
    4d5c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4d5e:	2013      	movs	r0, #19
    4d60:	4b1e      	ldr	r3, [pc, #120]	; (4ddc <_ext_irq_init+0x18c>)
    4d62:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4d64:	2014      	movs	r0, #20
    4d66:	4b1b      	ldr	r3, [pc, #108]	; (4dd4 <_ext_irq_init+0x184>)
    4d68:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4d6a:	2014      	movs	r0, #20
    4d6c:	4b1a      	ldr	r3, [pc, #104]	; (4dd8 <_ext_irq_init+0x188>)
    4d6e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4d70:	2014      	movs	r0, #20
    4d72:	4b1a      	ldr	r3, [pc, #104]	; (4ddc <_ext_irq_init+0x18c>)
    4d74:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4d76:	2015      	movs	r0, #21
    4d78:	4b16      	ldr	r3, [pc, #88]	; (4dd4 <_ext_irq_init+0x184>)
    4d7a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4d7c:	2015      	movs	r0, #21
    4d7e:	4b16      	ldr	r3, [pc, #88]	; (4dd8 <_ext_irq_init+0x188>)
    4d80:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4d82:	2015      	movs	r0, #21
    4d84:	4b15      	ldr	r3, [pc, #84]	; (4ddc <_ext_irq_init+0x18c>)
    4d86:	4798      	blx	r3

	callback = cb;
    4d88:	4a15      	ldr	r2, [pc, #84]	; (4de0 <_ext_irq_init+0x190>)
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4d8e:	2300      	movs	r3, #0
}
    4d90:	4618      	mov	r0, r3
    4d92:	3708      	adds	r7, #8
    4d94:	46bd      	mov	sp, r7
    4d96:	bd80      	pop	{r7, pc}
    4d98:	40002800 	.word	0x40002800
    4d9c:	00004a11 	.word	0x00004a11
    4da0:	00004b41 	.word	0x00004b41
    4da4:	00004ad1 	.word	0x00004ad1
    4da8:	000049ed 	.word	0x000049ed
    4dac:	00004b71 	.word	0x00004b71
    4db0:	00004afd 	.word	0x00004afd
    4db4:	00004b99 	.word	0x00004b99
    4db8:	00004bb7 	.word	0x00004bb7
    4dbc:	00004bd3 	.word	0x00004bd3
    4dc0:	00004c17 	.word	0x00004c17
    4dc4:	00004c33 	.word	0x00004c33
    4dc8:	90999013 	.word	0x90999013
    4dcc:	00004bef 	.word	0x00004bef
    4dd0:	00004aa5 	.word	0x00004aa5
    4dd4:	0000496d 	.word	0x0000496d
    4dd8:	000049b1 	.word	0x000049b1
    4ddc:	00004931 	.word	0x00004931
    4de0:	200009c8 	.word	0x200009c8

00004de4 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4de4:	b580      	push	{r7, lr}
    4de6:	b084      	sub	sp, #16
    4de8:	af00      	add	r7, sp, #0
    4dea:	6078      	str	r0, [r7, #4]
    4dec:	460b      	mov	r3, r1
    4dee:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4df0:	23ff      	movs	r3, #255	; 0xff
    4df2:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4df4:	2300      	movs	r3, #0
    4df6:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4df8:	e010      	b.n	4e1c <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4dfa:	7bbb      	ldrb	r3, [r7, #14]
    4dfc:	4a1c      	ldr	r2, [pc, #112]	; (4e70 <_ext_irq_enable+0x8c>)
    4dfe:	00db      	lsls	r3, r3, #3
    4e00:	4413      	add	r3, r2
    4e02:	685a      	ldr	r2, [r3, #4]
    4e04:	687b      	ldr	r3, [r7, #4]
    4e06:	429a      	cmp	r2, r3
    4e08:	d105      	bne.n	4e16 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4e0a:	7bbb      	ldrb	r3, [r7, #14]
    4e0c:	4a18      	ldr	r2, [pc, #96]	; (4e70 <_ext_irq_enable+0x8c>)
    4e0e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4e12:	73fb      	strb	r3, [r7, #15]
			break;
    4e14:	e005      	b.n	4e22 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4e16:	7bbb      	ldrb	r3, [r7, #14]
    4e18:	3301      	adds	r3, #1
    4e1a:	73bb      	strb	r3, [r7, #14]
    4e1c:	7bbb      	ldrb	r3, [r7, #14]
    4e1e:	2b08      	cmp	r3, #8
    4e20:	d9eb      	bls.n	4dfa <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4e22:	7bfb      	ldrb	r3, [r7, #15]
    4e24:	2bff      	cmp	r3, #255	; 0xff
    4e26:	d102      	bne.n	4e2e <_ext_irq_enable+0x4a>
		return -1;
    4e28:	f04f 33ff 	mov.w	r3, #4294967295
    4e2c:	e01c      	b.n	4e68 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4e2e:	78fb      	ldrb	r3, [r7, #3]
    4e30:	2b00      	cmp	r3, #0
    4e32:	d008      	beq.n	4e46 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4e34:	7bfb      	ldrb	r3, [r7, #15]
    4e36:	2201      	movs	r2, #1
    4e38:	fa02 f303 	lsl.w	r3, r2, r3
    4e3c:	4619      	mov	r1, r3
    4e3e:	480d      	ldr	r0, [pc, #52]	; (4e74 <_ext_irq_enable+0x90>)
    4e40:	4b0d      	ldr	r3, [pc, #52]	; (4e78 <_ext_irq_enable+0x94>)
    4e42:	4798      	blx	r3
    4e44:	e00f      	b.n	4e66 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4e46:	7bfb      	ldrb	r3, [r7, #15]
    4e48:	2201      	movs	r2, #1
    4e4a:	fa02 f303 	lsl.w	r3, r2, r3
    4e4e:	4619      	mov	r1, r3
    4e50:	4808      	ldr	r0, [pc, #32]	; (4e74 <_ext_irq_enable+0x90>)
    4e52:	4b0a      	ldr	r3, [pc, #40]	; (4e7c <_ext_irq_enable+0x98>)
    4e54:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4e56:	7bfb      	ldrb	r3, [r7, #15]
    4e58:	2201      	movs	r2, #1
    4e5a:	fa02 f303 	lsl.w	r3, r2, r3
    4e5e:	4619      	mov	r1, r3
    4e60:	4804      	ldr	r0, [pc, #16]	; (4e74 <_ext_irq_enable+0x90>)
    4e62:	4b07      	ldr	r3, [pc, #28]	; (4e80 <_ext_irq_enable+0x9c>)
    4e64:	4798      	blx	r3
	}

	return ERR_NONE;
    4e66:	2300      	movs	r3, #0
}
    4e68:	4618      	mov	r0, r3
    4e6a:	3710      	adds	r7, #16
    4e6c:	46bd      	mov	sp, r7
    4e6e:	bd80      	pop	{r7, pc}
    4e70:	00011c0c 	.word	0x00011c0c
    4e74:	40002800 	.word	0x40002800
    4e78:	00004a6d 	.word	0x00004a6d
    4e7c:	00004a89 	.word	0x00004a89
    4e80:	00004a51 	.word	0x00004a51

00004e84 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4e84:	b580      	push	{r7, lr}
    4e86:	b084      	sub	sp, #16
    4e88:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4e8a:	4841      	ldr	r0, [pc, #260]	; (4f90 <_ext_irq_handler+0x10c>)
    4e8c:	4b41      	ldr	r3, [pc, #260]	; (4f94 <_ext_irq_handler+0x110>)
    4e8e:	4798      	blx	r3
    4e90:	4603      	mov	r3, r0
    4e92:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4e94:	f04f 33ff 	mov.w	r3, #4294967295
    4e98:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4e9a:	683b      	ldr	r3, [r7, #0]
    4e9c:	4619      	mov	r1, r3
    4e9e:	483c      	ldr	r0, [pc, #240]	; (4f90 <_ext_irq_handler+0x10c>)
    4ea0:	4b3d      	ldr	r3, [pc, #244]	; (4f98 <_ext_irq_handler+0x114>)
    4ea2:	4798      	blx	r3

	ASSERT(callback);
    4ea4:	4b3d      	ldr	r3, [pc, #244]	; (4f9c <_ext_irq_handler+0x118>)
    4ea6:	681b      	ldr	r3, [r3, #0]
    4ea8:	2b00      	cmp	r3, #0
    4eaa:	bf14      	ite	ne
    4eac:	2301      	movne	r3, #1
    4eae:	2300      	moveq	r3, #0
    4eb0:	b2db      	uxtb	r3, r3
    4eb2:	f44f 7284 	mov.w	r2, #264	; 0x108
    4eb6:	493a      	ldr	r1, [pc, #232]	; (4fa0 <_ext_irq_handler+0x11c>)
    4eb8:	4618      	mov	r0, r3
    4eba:	4b3a      	ldr	r3, [pc, #232]	; (4fa4 <_ext_irq_handler+0x120>)
    4ebc:	4798      	blx	r3

	while (flags) {
    4ebe:	e060      	b.n	4f82 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4ec0:	683b      	ldr	r3, [r7, #0]
    4ec2:	4618      	mov	r0, r3
    4ec4:	4b38      	ldr	r3, [pc, #224]	; (4fa8 <_ext_irq_handler+0x124>)
    4ec6:	4798      	blx	r3
    4ec8:	4603      	mov	r3, r0
    4eca:	b2db      	uxtb	r3, r3
    4ecc:	3b01      	subs	r3, #1
    4ece:	b2db      	uxtb	r3, r3
    4ed0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4ed2:	e047      	b.n	4f64 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4ed4:	2300      	movs	r3, #0
    4ed6:	71fb      	strb	r3, [r7, #7]
    4ed8:	2309      	movs	r3, #9
    4eda:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4edc:	e024      	b.n	4f28 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4ede:	79ba      	ldrb	r2, [r7, #6]
    4ee0:	79fb      	ldrb	r3, [r7, #7]
    4ee2:	4413      	add	r3, r2
    4ee4:	105b      	asrs	r3, r3, #1
    4ee6:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4ee8:	797b      	ldrb	r3, [r7, #5]
    4eea:	4a30      	ldr	r2, [pc, #192]	; (4fac <_ext_irq_handler+0x128>)
    4eec:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4ef0:	461a      	mov	r2, r3
    4ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ef6:	429a      	cmp	r2, r3
    4ef8:	d106      	bne.n	4f08 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4efa:	797b      	ldrb	r3, [r7, #5]
    4efc:	4a2b      	ldr	r2, [pc, #172]	; (4fac <_ext_irq_handler+0x128>)
    4efe:	00db      	lsls	r3, r3, #3
    4f00:	4413      	add	r3, r2
    4f02:	685b      	ldr	r3, [r3, #4]
    4f04:	60bb      	str	r3, [r7, #8]
					break;
    4f06:	e013      	b.n	4f30 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4f08:	797b      	ldrb	r3, [r7, #5]
    4f0a:	4a28      	ldr	r2, [pc, #160]	; (4fac <_ext_irq_handler+0x128>)
    4f0c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4f10:	461a      	mov	r2, r3
    4f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4f16:	429a      	cmp	r2, r3
    4f18:	da03      	bge.n	4f22 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4f1a:	797b      	ldrb	r3, [r7, #5]
    4f1c:	3301      	adds	r3, #1
    4f1e:	71fb      	strb	r3, [r7, #7]
    4f20:	e002      	b.n	4f28 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4f22:	797b      	ldrb	r3, [r7, #5]
    4f24:	3b01      	subs	r3, #1
    4f26:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4f28:	79ba      	ldrb	r2, [r7, #6]
    4f2a:	79fb      	ldrb	r3, [r7, #7]
    4f2c:	429a      	cmp	r2, r3
    4f2e:	d2d6      	bcs.n	4ede <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4f30:	68bb      	ldr	r3, [r7, #8]
    4f32:	f1b3 3fff 	cmp.w	r3, #4294967295
    4f36:	d003      	beq.n	4f40 <_ext_irq_handler+0xbc>
				callback(pin);
    4f38:	4b18      	ldr	r3, [pc, #96]	; (4f9c <_ext_irq_handler+0x118>)
    4f3a:	681b      	ldr	r3, [r3, #0]
    4f3c:	68b8      	ldr	r0, [r7, #8]
    4f3e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4f44:	2201      	movs	r2, #1
    4f46:	fa02 f303 	lsl.w	r3, r2, r3
    4f4a:	43da      	mvns	r2, r3
    4f4c:	683b      	ldr	r3, [r7, #0]
    4f4e:	4013      	ands	r3, r2
    4f50:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4f52:	683b      	ldr	r3, [r7, #0]
    4f54:	4618      	mov	r0, r3
    4f56:	4b14      	ldr	r3, [pc, #80]	; (4fa8 <_ext_irq_handler+0x124>)
    4f58:	4798      	blx	r3
    4f5a:	4603      	mov	r3, r0
    4f5c:	b2db      	uxtb	r3, r3
    4f5e:	3b01      	subs	r3, #1
    4f60:	b2db      	uxtb	r3, r3
    4f62:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4f68:	f1b3 3fff 	cmp.w	r3, #4294967295
    4f6c:	d1b2      	bne.n	4ed4 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4f6e:	4808      	ldr	r0, [pc, #32]	; (4f90 <_ext_irq_handler+0x10c>)
    4f70:	4b08      	ldr	r3, [pc, #32]	; (4f94 <_ext_irq_handler+0x110>)
    4f72:	4798      	blx	r3
    4f74:	4603      	mov	r3, r0
    4f76:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4f78:	683b      	ldr	r3, [r7, #0]
    4f7a:	4619      	mov	r1, r3
    4f7c:	4804      	ldr	r0, [pc, #16]	; (4f90 <_ext_irq_handler+0x10c>)
    4f7e:	4b06      	ldr	r3, [pc, #24]	; (4f98 <_ext_irq_handler+0x114>)
    4f80:	4798      	blx	r3
	while (flags) {
    4f82:	683b      	ldr	r3, [r7, #0]
    4f84:	2b00      	cmp	r3, #0
    4f86:	d19b      	bne.n	4ec0 <_ext_irq_handler+0x3c>
	}
}
    4f88:	bf00      	nop
    4f8a:	3710      	adds	r7, #16
    4f8c:	46bd      	mov	sp, r7
    4f8e:	bd80      	pop	{r7, pc}
    4f90:	40002800 	.word	0x40002800
    4f94:	00004a39 	.word	0x00004a39
    4f98:	00004a51 	.word	0x00004a51
    4f9c:	200009c8 	.word	0x200009c8
    4fa0:	00011c54 	.word	0x00011c54
    4fa4:	00003cad 	.word	0x00003cad
    4fa8:	00011649 	.word	0x00011649
    4fac:	00011c0c 	.word	0x00011c0c

00004fb0 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4fb0:	b580      	push	{r7, lr}
    4fb2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4fb4:	4b01      	ldr	r3, [pc, #4]	; (4fbc <EIC_0_Handler+0xc>)
    4fb6:	4798      	blx	r3
} /**
    4fb8:	bf00      	nop
    4fba:	bd80      	pop	{r7, pc}
    4fbc:	00004e85 	.word	0x00004e85

00004fc0 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4fc0:	b580      	push	{r7, lr}
    4fc2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4fc4:	4b01      	ldr	r3, [pc, #4]	; (4fcc <EIC_1_Handler+0xc>)
    4fc6:	4798      	blx	r3
} /**
    4fc8:	bf00      	nop
    4fca:	bd80      	pop	{r7, pc}
    4fcc:	00004e85 	.word	0x00004e85

00004fd0 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4fd0:	b580      	push	{r7, lr}
    4fd2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4fd4:	4b01      	ldr	r3, [pc, #4]	; (4fdc <EIC_3_Handler+0xc>)
    4fd6:	4798      	blx	r3
} /**
    4fd8:	bf00      	nop
    4fda:	bd80      	pop	{r7, pc}
    4fdc:	00004e85 	.word	0x00004e85

00004fe0 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4fe0:	b580      	push	{r7, lr}
    4fe2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4fe4:	4b01      	ldr	r3, [pc, #4]	; (4fec <EIC_4_Handler+0xc>)
    4fe6:	4798      	blx	r3
} /**
    4fe8:	bf00      	nop
    4fea:	bd80      	pop	{r7, pc}
    4fec:	00004e85 	.word	0x00004e85

00004ff0 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4ff0:	b580      	push	{r7, lr}
    4ff2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ff4:	4b01      	ldr	r3, [pc, #4]	; (4ffc <EIC_5_Handler+0xc>)
    4ff6:	4798      	blx	r3
} /**
    4ff8:	bf00      	nop
    4ffa:	bd80      	pop	{r7, pc}
    4ffc:	00004e85 	.word	0x00004e85

00005000 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5000:	b580      	push	{r7, lr}
    5002:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5004:	4b01      	ldr	r3, [pc, #4]	; (500c <EIC_6_Handler+0xc>)
    5006:	4798      	blx	r3
} /**
    5008:	bf00      	nop
    500a:	bd80      	pop	{r7, pc}
    500c:	00004e85 	.word	0x00004e85

00005010 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    5010:	b580      	push	{r7, lr}
    5012:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5014:	4b01      	ldr	r3, [pc, #4]	; (501c <EIC_7_Handler+0xc>)
    5016:	4798      	blx	r3
} /**
    5018:	bf00      	nop
    501a:	bd80      	pop	{r7, pc}
    501c:	00004e85 	.word	0x00004e85

00005020 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    5020:	b580      	push	{r7, lr}
    5022:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5024:	4b01      	ldr	r3, [pc, #4]	; (502c <EIC_8_Handler+0xc>)
    5026:	4798      	blx	r3
} /**
    5028:	bf00      	nop
    502a:	bd80      	pop	{r7, pc}
    502c:	00004e85 	.word	0x00004e85

00005030 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    5030:	b580      	push	{r7, lr}
    5032:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5034:	4b01      	ldr	r3, [pc, #4]	; (503c <EIC_9_Handler+0xc>)
    5036:	4798      	blx	r3
}
    5038:	bf00      	nop
    503a:	bd80      	pop	{r7, pc}
    503c:	00004e85 	.word	0x00004e85

00005040 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    5040:	b480      	push	{r7}
    5042:	b085      	sub	sp, #20
    5044:	af00      	add	r7, sp, #0
    5046:	60f8      	str	r0, [r7, #12]
    5048:	460b      	mov	r3, r1
    504a:	607a      	str	r2, [r7, #4]
    504c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    504e:	7afa      	ldrb	r2, [r7, #11]
    5050:	68fb      	ldr	r3, [r7, #12]
    5052:	3248      	adds	r2, #72	; 0x48
    5054:	6879      	ldr	r1, [r7, #4]
    5056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    505a:	bf00      	nop
    505c:	3714      	adds	r7, #20
    505e:	46bd      	mov	sp, r7
    5060:	f85d 7b04 	ldr.w	r7, [sp], #4
    5064:	4770      	bx	lr

00005066 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    5066:	b480      	push	{r7}
    5068:	b083      	sub	sp, #12
    506a:	af00      	add	r7, sp, #0
    506c:	6078      	str	r0, [r7, #4]
    506e:	460b      	mov	r3, r1
    5070:	70fb      	strb	r3, [r7, #3]
    5072:	4613      	mov	r3, r2
    5074:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    5076:	78fb      	ldrb	r3, [r7, #3]
    5078:	687a      	ldr	r2, [r7, #4]
    507a:	3304      	adds	r3, #4
    507c:	00db      	lsls	r3, r3, #3
    507e:	4413      	add	r3, r2
    5080:	78ba      	ldrb	r2, [r7, #2]
    5082:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    5084:	78fb      	ldrb	r3, [r7, #3]
    5086:	78ba      	ldrb	r2, [r7, #2]
    5088:	43d2      	mvns	r2, r2
    508a:	b2d1      	uxtb	r1, r2
    508c:	687a      	ldr	r2, [r7, #4]
    508e:	3304      	adds	r3, #4
    5090:	00db      	lsls	r3, r3, #3
    5092:	4413      	add	r3, r2
    5094:	460a      	mov	r2, r1
    5096:	711a      	strb	r2, [r3, #4]
}
    5098:	bf00      	nop
    509a:	370c      	adds	r7, #12
    509c:	46bd      	mov	sp, r7
    509e:	f85d 7b04 	ldr.w	r7, [sp], #4
    50a2:	4770      	bx	lr

000050a4 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    50a4:	b480      	push	{r7}
    50a6:	b085      	sub	sp, #20
    50a8:	af00      	add	r7, sp, #0
    50aa:	60f8      	str	r0, [r7, #12]
    50ac:	460b      	mov	r3, r1
    50ae:	607a      	str	r2, [r7, #4]
    50b0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    50b2:	7afa      	ldrb	r2, [r7, #11]
    50b4:	68fb      	ldr	r3, [r7, #12]
    50b6:	3204      	adds	r2, #4
    50b8:	6879      	ldr	r1, [r7, #4]
    50ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    50be:	bf00      	nop
    50c0:	3714      	adds	r7, #20
    50c2:	46bd      	mov	sp, r7
    50c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    50c8:	4770      	bx	lr
	...

000050cc <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    50cc:	b580      	push	{r7, lr}
    50ce:	b082      	sub	sp, #8
    50d0:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    50d2:	2300      	movs	r3, #0
    50d4:	71fb      	strb	r3, [r7, #7]
    50d6:	e00b      	b.n	50f0 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    50d8:	79fb      	ldrb	r3, [r7, #7]
    50da:	4a18      	ldr	r2, [pc, #96]	; (513c <_event_system_init+0x70>)
    50dc:	5cd3      	ldrb	r3, [r2, r3]
    50de:	461a      	mov	r2, r3
    50e0:	79fb      	ldrb	r3, [r7, #7]
    50e2:	4619      	mov	r1, r3
    50e4:	4816      	ldr	r0, [pc, #88]	; (5140 <_event_system_init+0x74>)
    50e6:	4b17      	ldr	r3, [pc, #92]	; (5144 <_event_system_init+0x78>)
    50e8:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    50ea:	79fb      	ldrb	r3, [r7, #7]
    50ec:	3301      	adds	r3, #1
    50ee:	71fb      	strb	r3, [r7, #7]
    50f0:	79fb      	ldrb	r3, [r7, #7]
    50f2:	2b42      	cmp	r3, #66	; 0x42
    50f4:	d9f0      	bls.n	50d8 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    50f6:	2300      	movs	r3, #0
    50f8:	71fb      	strb	r3, [r7, #7]
    50fa:	e016      	b.n	512a <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    50fc:	79fb      	ldrb	r3, [r7, #7]
    50fe:	4a12      	ldr	r2, [pc, #72]	; (5148 <_event_system_init+0x7c>)
    5100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    5104:	461a      	mov	r2, r3
    5106:	79fb      	ldrb	r3, [r7, #7]
    5108:	4619      	mov	r1, r3
    510a:	480d      	ldr	r0, [pc, #52]	; (5140 <_event_system_init+0x74>)
    510c:	4b0f      	ldr	r3, [pc, #60]	; (514c <_event_system_init+0x80>)
    510e:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5110:	79fb      	ldrb	r3, [r7, #7]
    5112:	4a0f      	ldr	r2, [pc, #60]	; (5150 <_event_system_init+0x84>)
    5114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5118:	b2da      	uxtb	r2, r3
    511a:	79fb      	ldrb	r3, [r7, #7]
    511c:	4619      	mov	r1, r3
    511e:	4808      	ldr	r0, [pc, #32]	; (5140 <_event_system_init+0x74>)
    5120:	4b0c      	ldr	r3, [pc, #48]	; (5154 <_event_system_init+0x88>)
    5122:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    5124:	79fb      	ldrb	r3, [r7, #7]
    5126:	3301      	adds	r3, #1
    5128:	71fb      	strb	r3, [r7, #7]
    512a:	79fb      	ldrb	r3, [r7, #7]
    512c:	2b1f      	cmp	r3, #31
    512e:	d9e5      	bls.n	50fc <_event_system_init+0x30>
	}

	return ERR_NONE;
    5130:	2300      	movs	r3, #0
}
    5132:	4618      	mov	r0, r3
    5134:	3708      	adds	r7, #8
    5136:	46bd      	mov	sp, r7
    5138:	bd80      	pop	{r7, pc}
    513a:	bf00      	nop
    513c:	00011c6c 	.word	0x00011c6c
    5140:	4100e000 	.word	0x4100e000
    5144:	00005041 	.word	0x00005041
    5148:	00011cb0 	.word	0x00011cb0
    514c:	000050a5 	.word	0x000050a5
    5150:	00011cf0 	.word	0x00011cf0
    5154:	00005067 	.word	0x00005067

00005158 <hri_gclk_wait_for_sync>:
{
    5158:	b480      	push	{r7}
    515a:	b083      	sub	sp, #12
    515c:	af00      	add	r7, sp, #0
    515e:	6078      	str	r0, [r7, #4]
    5160:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5162:	bf00      	nop
    5164:	687b      	ldr	r3, [r7, #4]
    5166:	685a      	ldr	r2, [r3, #4]
    5168:	683b      	ldr	r3, [r7, #0]
    516a:	4013      	ands	r3, r2
    516c:	2b00      	cmp	r3, #0
    516e:	d1f9      	bne.n	5164 <hri_gclk_wait_for_sync+0xc>
}
    5170:	bf00      	nop
    5172:	370c      	adds	r7, #12
    5174:	46bd      	mov	sp, r7
    5176:	f85d 7b04 	ldr.w	r7, [sp], #4
    517a:	4770      	bx	lr

0000517c <hri_gclk_write_GENCTRL_reg>:
{
    517c:	b580      	push	{r7, lr}
    517e:	b084      	sub	sp, #16
    5180:	af00      	add	r7, sp, #0
    5182:	60f8      	str	r0, [r7, #12]
    5184:	460b      	mov	r3, r1
    5186:	607a      	str	r2, [r7, #4]
    5188:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    518a:	7afa      	ldrb	r2, [r7, #11]
    518c:	68fb      	ldr	r3, [r7, #12]
    518e:	3208      	adds	r2, #8
    5190:	6879      	ldr	r1, [r7, #4]
    5192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5196:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    519a:	68f8      	ldr	r0, [r7, #12]
    519c:	4b02      	ldr	r3, [pc, #8]	; (51a8 <hri_gclk_write_GENCTRL_reg+0x2c>)
    519e:	4798      	blx	r3
}
    51a0:	bf00      	nop
    51a2:	3710      	adds	r7, #16
    51a4:	46bd      	mov	sp, r7
    51a6:	bd80      	pop	{r7, pc}
    51a8:	00005159 	.word	0x00005159

000051ac <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    51ac:	b580      	push	{r7, lr}
    51ae:	b082      	sub	sp, #8
    51b0:	af00      	add	r7, sp, #0
    51b2:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	f003 0301 	and.w	r3, r3, #1
    51ba:	2b00      	cmp	r3, #0
    51bc:	d004      	beq.n	51c8 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    51be:	4a36      	ldr	r2, [pc, #216]	; (5298 <_gclk_init_generators_by_fref+0xec>)
    51c0:	2100      	movs	r1, #0
    51c2:	4836      	ldr	r0, [pc, #216]	; (529c <_gclk_init_generators_by_fref+0xf0>)
    51c4:	4b36      	ldr	r3, [pc, #216]	; (52a0 <_gclk_init_generators_by_fref+0xf4>)
    51c6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	f003 0302 	and.w	r3, r3, #2
    51ce:	2b00      	cmp	r3, #0
    51d0:	d004      	beq.n	51dc <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    51d2:	4a34      	ldr	r2, [pc, #208]	; (52a4 <_gclk_init_generators_by_fref+0xf8>)
    51d4:	2101      	movs	r1, #1
    51d6:	4831      	ldr	r0, [pc, #196]	; (529c <_gclk_init_generators_by_fref+0xf0>)
    51d8:	4b31      	ldr	r3, [pc, #196]	; (52a0 <_gclk_init_generators_by_fref+0xf4>)
    51da:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    51dc:	687b      	ldr	r3, [r7, #4]
    51de:	f003 0304 	and.w	r3, r3, #4
    51e2:	2b00      	cmp	r3, #0
    51e4:	d004      	beq.n	51f0 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    51e6:	4a30      	ldr	r2, [pc, #192]	; (52a8 <_gclk_init_generators_by_fref+0xfc>)
    51e8:	2102      	movs	r1, #2
    51ea:	482c      	ldr	r0, [pc, #176]	; (529c <_gclk_init_generators_by_fref+0xf0>)
    51ec:	4b2c      	ldr	r3, [pc, #176]	; (52a0 <_gclk_init_generators_by_fref+0xf4>)
    51ee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    51f0:	687b      	ldr	r3, [r7, #4]
    51f2:	f003 0308 	and.w	r3, r3, #8
    51f6:	2b00      	cmp	r3, #0
    51f8:	d004      	beq.n	5204 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    51fa:	4a2c      	ldr	r2, [pc, #176]	; (52ac <_gclk_init_generators_by_fref+0x100>)
    51fc:	2103      	movs	r1, #3
    51fe:	4827      	ldr	r0, [pc, #156]	; (529c <_gclk_init_generators_by_fref+0xf0>)
    5200:	4b27      	ldr	r3, [pc, #156]	; (52a0 <_gclk_init_generators_by_fref+0xf4>)
    5202:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	f003 0310 	and.w	r3, r3, #16
    520a:	2b00      	cmp	r3, #0
    520c:	d004      	beq.n	5218 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    520e:	4a28      	ldr	r2, [pc, #160]	; (52b0 <_gclk_init_generators_by_fref+0x104>)
    5210:	2104      	movs	r1, #4
    5212:	4822      	ldr	r0, [pc, #136]	; (529c <_gclk_init_generators_by_fref+0xf0>)
    5214:	4b22      	ldr	r3, [pc, #136]	; (52a0 <_gclk_init_generators_by_fref+0xf4>)
    5216:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	f003 0320 	and.w	r3, r3, #32
    521e:	2b00      	cmp	r3, #0
    5220:	d004      	beq.n	522c <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    5222:	4a24      	ldr	r2, [pc, #144]	; (52b4 <_gclk_init_generators_by_fref+0x108>)
    5224:	2105      	movs	r1, #5
    5226:	481d      	ldr	r0, [pc, #116]	; (529c <_gclk_init_generators_by_fref+0xf0>)
    5228:	4b1d      	ldr	r3, [pc, #116]	; (52a0 <_gclk_init_generators_by_fref+0xf4>)
    522a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    522c:	687b      	ldr	r3, [r7, #4]
    522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5232:	2b00      	cmp	r3, #0
    5234:	d004      	beq.n	5240 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    5236:	4a20      	ldr	r2, [pc, #128]	; (52b8 <_gclk_init_generators_by_fref+0x10c>)
    5238:	2106      	movs	r1, #6
    523a:	4818      	ldr	r0, [pc, #96]	; (529c <_gclk_init_generators_by_fref+0xf0>)
    523c:	4b18      	ldr	r3, [pc, #96]	; (52a0 <_gclk_init_generators_by_fref+0xf4>)
    523e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    5240:	687b      	ldr	r3, [r7, #4]
    5242:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5246:	2b00      	cmp	r3, #0
    5248:	d004      	beq.n	5254 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    524a:	4a1c      	ldr	r2, [pc, #112]	; (52bc <_gclk_init_generators_by_fref+0x110>)
    524c:	2107      	movs	r1, #7
    524e:	4813      	ldr	r0, [pc, #76]	; (529c <_gclk_init_generators_by_fref+0xf0>)
    5250:	4b13      	ldr	r3, [pc, #76]	; (52a0 <_gclk_init_generators_by_fref+0xf4>)
    5252:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    5254:	687b      	ldr	r3, [r7, #4]
    5256:	f403 7380 	and.w	r3, r3, #256	; 0x100
    525a:	2b00      	cmp	r3, #0
    525c:	d004      	beq.n	5268 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    525e:	4a18      	ldr	r2, [pc, #96]	; (52c0 <_gclk_init_generators_by_fref+0x114>)
    5260:	2108      	movs	r1, #8
    5262:	480e      	ldr	r0, [pc, #56]	; (529c <_gclk_init_generators_by_fref+0xf0>)
    5264:	4b0e      	ldr	r3, [pc, #56]	; (52a0 <_gclk_init_generators_by_fref+0xf4>)
    5266:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    5268:	687b      	ldr	r3, [r7, #4]
    526a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    526e:	2b00      	cmp	r3, #0
    5270:	d004      	beq.n	527c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    5272:	4a14      	ldr	r2, [pc, #80]	; (52c4 <_gclk_init_generators_by_fref+0x118>)
    5274:	210a      	movs	r1, #10
    5276:	4809      	ldr	r0, [pc, #36]	; (529c <_gclk_init_generators_by_fref+0xf0>)
    5278:	4b09      	ldr	r3, [pc, #36]	; (52a0 <_gclk_init_generators_by_fref+0xf4>)
    527a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    527c:	687b      	ldr	r3, [r7, #4]
    527e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    5282:	2b00      	cmp	r3, #0
    5284:	d004      	beq.n	5290 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    5286:	4a10      	ldr	r2, [pc, #64]	; (52c8 <_gclk_init_generators_by_fref+0x11c>)
    5288:	210b      	movs	r1, #11
    528a:	4804      	ldr	r0, [pc, #16]	; (529c <_gclk_init_generators_by_fref+0xf0>)
    528c:	4b04      	ldr	r3, [pc, #16]	; (52a0 <_gclk_init_generators_by_fref+0xf4>)
    528e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    5290:	bf00      	nop
    5292:	3708      	adds	r7, #8
    5294:	46bd      	mov	sp, r7
    5296:	bd80      	pop	{r7, pc}
    5298:	00010107 	.word	0x00010107
    529c:	40001c00 	.word	0x40001c00
    52a0:	0000517d 	.word	0x0000517d
    52a4:	00010907 	.word	0x00010907
    52a8:	00010906 	.word	0x00010906
    52ac:	00020908 	.word	0x00020908
    52b0:	00010901 	.word	0x00010901
    52b4:	00062901 	.word	0x00062901
    52b8:	000c2901 	.word	0x000c2901
    52bc:	00082908 	.word	0x00082908
    52c0:	00032901 	.word	0x00032901
    52c4:	00010905 	.word	0x00010905
    52c8:	00041905 	.word	0x00041905

000052cc <hri_mclk_write_CPUDIV_reg>:
{
    52cc:	b480      	push	{r7}
    52ce:	b083      	sub	sp, #12
    52d0:	af00      	add	r7, sp, #0
    52d2:	6078      	str	r0, [r7, #4]
    52d4:	460b      	mov	r3, r1
    52d6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	78fa      	ldrb	r2, [r7, #3]
    52dc:	715a      	strb	r2, [r3, #5]
}
    52de:	bf00      	nop
    52e0:	370c      	adds	r7, #12
    52e2:	46bd      	mov	sp, r7
    52e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    52e8:	4770      	bx	lr
	...

000052ec <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    52ec:	b580      	push	{r7, lr}
    52ee:	b082      	sub	sp, #8
    52f0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    52f2:	4b05      	ldr	r3, [pc, #20]	; (5308 <_mclk_init+0x1c>)
    52f4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    52f6:	2101      	movs	r1, #1
    52f8:	6878      	ldr	r0, [r7, #4]
    52fa:	4b04      	ldr	r3, [pc, #16]	; (530c <_mclk_init+0x20>)
    52fc:	4798      	blx	r3
}
    52fe:	bf00      	nop
    5300:	3708      	adds	r7, #8
    5302:	46bd      	mov	sp, r7
    5304:	bd80      	pop	{r7, pc}
    5306:	bf00      	nop
    5308:	40000800 	.word	0x40000800
    530c:	000052cd 	.word	0x000052cd

00005310 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    5310:	b480      	push	{r7}
    5312:	b083      	sub	sp, #12
    5314:	af00      	add	r7, sp, #0
    5316:	6078      	str	r0, [r7, #4]
    5318:	460b      	mov	r3, r1
    531a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    531c:	687b      	ldr	r3, [r7, #4]
    531e:	78fa      	ldrb	r2, [r7, #3]
    5320:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5322:	bf00      	nop
    5324:	370c      	adds	r7, #12
    5326:	46bd      	mov	sp, r7
    5328:	f85d 7b04 	ldr.w	r7, [sp], #4
    532c:	4770      	bx	lr

0000532e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    532e:	b480      	push	{r7}
    5330:	b083      	sub	sp, #12
    5332:	af00      	add	r7, sp, #0
    5334:	6078      	str	r0, [r7, #4]
    5336:	460b      	mov	r3, r1
    5338:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    533a:	687b      	ldr	r3, [r7, #4]
    533c:	887a      	ldrh	r2, [r7, #2]
    533e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5340:	bf00      	nop
    5342:	370c      	adds	r7, #12
    5344:	46bd      	mov	sp, r7
    5346:	f85d 7b04 	ldr.w	r7, [sp], #4
    534a:	4770      	bx	lr

0000534c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    534c:	b480      	push	{r7}
    534e:	b083      	sub	sp, #12
    5350:	af00      	add	r7, sp, #0
    5352:	6078      	str	r0, [r7, #4]
    5354:	460b      	mov	r3, r1
    5356:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5358:	687b      	ldr	r3, [r7, #4]
    535a:	78fa      	ldrb	r2, [r7, #3]
    535c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    535e:	bf00      	nop
    5360:	370c      	adds	r7, #12
    5362:	46bd      	mov	sp, r7
    5364:	f85d 7b04 	ldr.w	r7, [sp], #4
    5368:	4770      	bx	lr

0000536a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    536a:	b480      	push	{r7}
    536c:	b083      	sub	sp, #12
    536e:	af00      	add	r7, sp, #0
    5370:	6078      	str	r0, [r7, #4]
    5372:	460b      	mov	r3, r1
    5374:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    5376:	687b      	ldr	r3, [r7, #4]
    5378:	78fa      	ldrb	r2, [r7, #3]
    537a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    537c:	bf00      	nop
    537e:	370c      	adds	r7, #12
    5380:	46bd      	mov	sp, r7
    5382:	f85d 7b04 	ldr.w	r7, [sp], #4
    5386:	4770      	bx	lr

00005388 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5388:	b480      	push	{r7}
    538a:	b085      	sub	sp, #20
    538c:	af00      	add	r7, sp, #0
    538e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5390:	687b      	ldr	r3, [r7, #4]
    5392:	69db      	ldr	r3, [r3, #28]
    5394:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    5396:	68fb      	ldr	r3, [r7, #12]
    5398:	0a1b      	lsrs	r3, r3, #8
    539a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    539e:	60fb      	str	r3, [r7, #12]
	return tmp;
    53a0:	68fb      	ldr	r3, [r7, #12]
}
    53a2:	4618      	mov	r0, r3
    53a4:	3714      	adds	r7, #20
    53a6:	46bd      	mov	sp, r7
    53a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    53ac:	4770      	bx	lr

000053ae <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    53ae:	b480      	push	{r7}
    53b0:	b083      	sub	sp, #12
    53b2:	af00      	add	r7, sp, #0
    53b4:	6078      	str	r0, [r7, #4]
    53b6:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    53b8:	687b      	ldr	r3, [r7, #4]
    53ba:	683a      	ldr	r2, [r7, #0]
    53bc:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    53be:	bf00      	nop
    53c0:	370c      	adds	r7, #12
    53c2:	46bd      	mov	sp, r7
    53c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    53c8:	4770      	bx	lr
	...

000053cc <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    53cc:	b580      	push	{r7, lr}
    53ce:	b082      	sub	sp, #8
    53d0:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    53d2:	4b13      	ldr	r3, [pc, #76]	; (5420 <_osc32kctrl_init_sources+0x54>)
    53d4:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    53d6:	2300      	movs	r3, #0
    53d8:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    53da:	f242 018e 	movw	r1, #8334	; 0x208e
    53de:	6878      	ldr	r0, [r7, #4]
    53e0:	4b10      	ldr	r3, [pc, #64]	; (5424 <_osc32kctrl_init_sources+0x58>)
    53e2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    53e4:	2100      	movs	r1, #0
    53e6:	6878      	ldr	r0, [r7, #4]
    53e8:	4b0f      	ldr	r3, [pc, #60]	; (5428 <_osc32kctrl_init_sources+0x5c>)
    53ea:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    53ec:	2100      	movs	r1, #0
    53ee:	6878      	ldr	r0, [r7, #4]
    53f0:	4b0e      	ldr	r3, [pc, #56]	; (542c <_osc32kctrl_init_sources+0x60>)
    53f2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    53f4:	6878      	ldr	r0, [r7, #4]
    53f6:	4b0e      	ldr	r3, [pc, #56]	; (5430 <_osc32kctrl_init_sources+0x64>)
    53f8:	4798      	blx	r3
    53fa:	4603      	mov	r3, r0
    53fc:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    53fe:	887b      	ldrh	r3, [r7, #2]
    5400:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    5402:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    5406:	4619      	mov	r1, r3
    5408:	6878      	ldr	r0, [r7, #4]
    540a:	4b0a      	ldr	r3, [pc, #40]	; (5434 <_osc32kctrl_init_sources+0x68>)
    540c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    540e:	2100      	movs	r1, #0
    5410:	6878      	ldr	r0, [r7, #4]
    5412:	4b09      	ldr	r3, [pc, #36]	; (5438 <_osc32kctrl_init_sources+0x6c>)
    5414:	4798      	blx	r3
	(void)calib;
}
    5416:	bf00      	nop
    5418:	3708      	adds	r7, #8
    541a:	46bd      	mov	sp, r7
    541c:	bd80      	pop	{r7, pc}
    541e:	bf00      	nop
    5420:	40001400 	.word	0x40001400
    5424:	0000532f 	.word	0x0000532f
    5428:	0000534d 	.word	0x0000534d
    542c:	0000536b 	.word	0x0000536b
    5430:	00005389 	.word	0x00005389
    5434:	000053af 	.word	0x000053af
    5438:	00005311 	.word	0x00005311

0000543c <hri_gclk_wait_for_sync>:
{
    543c:	b480      	push	{r7}
    543e:	b083      	sub	sp, #12
    5440:	af00      	add	r7, sp, #0
    5442:	6078      	str	r0, [r7, #4]
    5444:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5446:	bf00      	nop
    5448:	687b      	ldr	r3, [r7, #4]
    544a:	685a      	ldr	r2, [r3, #4]
    544c:	683b      	ldr	r3, [r7, #0]
    544e:	4013      	ands	r3, r2
    5450:	2b00      	cmp	r3, #0
    5452:	d1f9      	bne.n	5448 <hri_gclk_wait_for_sync+0xc>
}
    5454:	bf00      	nop
    5456:	370c      	adds	r7, #12
    5458:	46bd      	mov	sp, r7
    545a:	f85d 7b04 	ldr.w	r7, [sp], #4
    545e:	4770      	bx	lr

00005460 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5460:	b480      	push	{r7}
    5462:	b083      	sub	sp, #12
    5464:	af00      	add	r7, sp, #0
    5466:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5468:	687b      	ldr	r3, [r7, #4]
    546a:	685b      	ldr	r3, [r3, #4]
    546c:	089b      	lsrs	r3, r3, #2
    546e:	f003 0301 	and.w	r3, r3, #1
    5472:	2b00      	cmp	r3, #0
    5474:	bf14      	ite	ne
    5476:	2301      	movne	r3, #1
    5478:	2300      	moveq	r3, #0
    547a:	b2db      	uxtb	r3, r3
}
    547c:	4618      	mov	r0, r3
    547e:	370c      	adds	r7, #12
    5480:	46bd      	mov	sp, r7
    5482:	f85d 7b04 	ldr.w	r7, [sp], #4
    5486:	4770      	bx	lr

00005488 <hri_gclk_read_SYNCBUSY_reg>:
{
    5488:	b480      	push	{r7}
    548a:	b083      	sub	sp, #12
    548c:	af00      	add	r7, sp, #0
    548e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5490:	687b      	ldr	r3, [r7, #4]
    5492:	685b      	ldr	r3, [r3, #4]
}
    5494:	4618      	mov	r0, r3
    5496:	370c      	adds	r7, #12
    5498:	46bd      	mov	sp, r7
    549a:	f85d 7b04 	ldr.w	r7, [sp], #4
    549e:	4770      	bx	lr

000054a0 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    54a0:	b580      	push	{r7, lr}
    54a2:	b086      	sub	sp, #24
    54a4:	af00      	add	r7, sp, #0
    54a6:	60f8      	str	r0, [r7, #12]
    54a8:	460b      	mov	r3, r1
    54aa:	607a      	str	r2, [r7, #4]
    54ac:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    54ae:	7afa      	ldrb	r2, [r7, #11]
    54b0:	68fb      	ldr	r3, [r7, #12]
    54b2:	3208      	adds	r2, #8
    54b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54b8:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    54ba:	697b      	ldr	r3, [r7, #20]
    54bc:	f023 030f 	bic.w	r3, r3, #15
    54c0:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    54c2:	687b      	ldr	r3, [r7, #4]
    54c4:	f003 030f 	and.w	r3, r3, #15
    54c8:	697a      	ldr	r2, [r7, #20]
    54ca:	4313      	orrs	r3, r2
    54cc:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    54ce:	7afa      	ldrb	r2, [r7, #11]
    54d0:	68fb      	ldr	r3, [r7, #12]
    54d2:	3208      	adds	r2, #8
    54d4:	6979      	ldr	r1, [r7, #20]
    54d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    54da:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    54de:	68f8      	ldr	r0, [r7, #12]
    54e0:	4b02      	ldr	r3, [pc, #8]	; (54ec <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    54e2:	4798      	blx	r3
}
    54e4:	bf00      	nop
    54e6:	3718      	adds	r7, #24
    54e8:	46bd      	mov	sp, r7
    54ea:	bd80      	pop	{r7, pc}
    54ec:	0000543d 	.word	0x0000543d

000054f0 <hri_gclk_write_PCHCTRL_reg>:
{
    54f0:	b480      	push	{r7}
    54f2:	b085      	sub	sp, #20
    54f4:	af00      	add	r7, sp, #0
    54f6:	60f8      	str	r0, [r7, #12]
    54f8:	460b      	mov	r3, r1
    54fa:	607a      	str	r2, [r7, #4]
    54fc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    54fe:	7afa      	ldrb	r2, [r7, #11]
    5500:	68fb      	ldr	r3, [r7, #12]
    5502:	3220      	adds	r2, #32
    5504:	6879      	ldr	r1, [r7, #4]
    5506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    550a:	bf00      	nop
    550c:	3714      	adds	r7, #20
    550e:	46bd      	mov	sp, r7
    5510:	f85d 7b04 	ldr.w	r7, [sp], #4
    5514:	4770      	bx	lr

00005516 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    5516:	b480      	push	{r7}
    5518:	b085      	sub	sp, #20
    551a:	af00      	add	r7, sp, #0
    551c:	60f8      	str	r0, [r7, #12]
    551e:	460b      	mov	r3, r1
    5520:	607a      	str	r2, [r7, #4]
    5522:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5524:	bf00      	nop
    5526:	7afa      	ldrb	r2, [r7, #11]
    5528:	68f9      	ldr	r1, [r7, #12]
    552a:	4613      	mov	r3, r2
    552c:	009b      	lsls	r3, r3, #2
    552e:	4413      	add	r3, r2
    5530:	009b      	lsls	r3, r3, #2
    5532:	440b      	add	r3, r1
    5534:	333c      	adds	r3, #60	; 0x3c
    5536:	681a      	ldr	r2, [r3, #0]
    5538:	687b      	ldr	r3, [r7, #4]
    553a:	4013      	ands	r3, r2
    553c:	2b00      	cmp	r3, #0
    553e:	d1f2      	bne.n	5526 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5540:	bf00      	nop
    5542:	3714      	adds	r7, #20
    5544:	46bd      	mov	sp, r7
    5546:	f85d 7b04 	ldr.w	r7, [sp], #4
    554a:	4770      	bx	lr

0000554c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    554c:	b480      	push	{r7}
    554e:	b083      	sub	sp, #12
    5550:	af00      	add	r7, sp, #0
    5552:	6078      	str	r0, [r7, #4]
    5554:	460b      	mov	r3, r1
    5556:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5558:	78fa      	ldrb	r2, [r7, #3]
    555a:	6879      	ldr	r1, [r7, #4]
    555c:	4613      	mov	r3, r2
    555e:	009b      	lsls	r3, r3, #2
    5560:	4413      	add	r3, r2
    5562:	009b      	lsls	r3, r3, #2
    5564:	440b      	add	r3, r1
    5566:	3340      	adds	r3, #64	; 0x40
    5568:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    556a:	f003 0301 	and.w	r3, r3, #1
    556e:	2b00      	cmp	r3, #0
    5570:	bf14      	ite	ne
    5572:	2301      	movne	r3, #1
    5574:	2300      	moveq	r3, #0
    5576:	b2db      	uxtb	r3, r3
}
    5578:	4618      	mov	r0, r3
    557a:	370c      	adds	r7, #12
    557c:	46bd      	mov	sp, r7
    557e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5582:	4770      	bx	lr

00005584 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5584:	b480      	push	{r7}
    5586:	b083      	sub	sp, #12
    5588:	af00      	add	r7, sp, #0
    558a:	6078      	str	r0, [r7, #4]
    558c:	460b      	mov	r3, r1
    558e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5590:	78fa      	ldrb	r2, [r7, #3]
    5592:	6879      	ldr	r1, [r7, #4]
    5594:	4613      	mov	r3, r2
    5596:	009b      	lsls	r3, r3, #2
    5598:	4413      	add	r3, r2
    559a:	009b      	lsls	r3, r3, #2
    559c:	440b      	add	r3, r1
    559e:	3340      	adds	r3, #64	; 0x40
    55a0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    55a2:	085b      	lsrs	r3, r3, #1
    55a4:	f003 0301 	and.w	r3, r3, #1
    55a8:	2b00      	cmp	r3, #0
    55aa:	bf14      	ite	ne
    55ac:	2301      	movne	r3, #1
    55ae:	2300      	moveq	r3, #0
    55b0:	b2db      	uxtb	r3, r3
}
    55b2:	4618      	mov	r0, r3
    55b4:	370c      	adds	r7, #12
    55b6:	46bd      	mov	sp, r7
    55b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    55bc:	4770      	bx	lr
	...

000055c0 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    55c0:	b580      	push	{r7, lr}
    55c2:	b082      	sub	sp, #8
    55c4:	af00      	add	r7, sp, #0
    55c6:	6078      	str	r0, [r7, #4]
    55c8:	460b      	mov	r3, r1
    55ca:	70fb      	strb	r3, [r7, #3]
    55cc:	4613      	mov	r3, r2
    55ce:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    55d0:	78fa      	ldrb	r2, [r7, #3]
    55d2:	6879      	ldr	r1, [r7, #4]
    55d4:	4613      	mov	r3, r2
    55d6:	009b      	lsls	r3, r3, #2
    55d8:	4413      	add	r3, r2
    55da:	009b      	lsls	r3, r3, #2
    55dc:	440b      	add	r3, r1
    55de:	3330      	adds	r3, #48	; 0x30
    55e0:	78ba      	ldrb	r2, [r7, #2]
    55e2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    55e4:	78fb      	ldrb	r3, [r7, #3]
    55e6:	2202      	movs	r2, #2
    55e8:	4619      	mov	r1, r3
    55ea:	6878      	ldr	r0, [r7, #4]
    55ec:	4b02      	ldr	r3, [pc, #8]	; (55f8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    55ee:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    55f0:	bf00      	nop
    55f2:	3708      	adds	r7, #8
    55f4:	46bd      	mov	sp, r7
    55f6:	bd80      	pop	{r7, pc}
    55f8:	00005517 	.word	0x00005517

000055fc <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    55fc:	b580      	push	{r7, lr}
    55fe:	b084      	sub	sp, #16
    5600:	af00      	add	r7, sp, #0
    5602:	60f8      	str	r0, [r7, #12]
    5604:	460b      	mov	r3, r1
    5606:	607a      	str	r2, [r7, #4]
    5608:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    560a:	7afa      	ldrb	r2, [r7, #11]
    560c:	68f9      	ldr	r1, [r7, #12]
    560e:	4613      	mov	r3, r2
    5610:	009b      	lsls	r3, r3, #2
    5612:	4413      	add	r3, r2
    5614:	009b      	lsls	r3, r3, #2
    5616:	440b      	add	r3, r1
    5618:	3334      	adds	r3, #52	; 0x34
    561a:	687a      	ldr	r2, [r7, #4]
    561c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    561e:	7afb      	ldrb	r3, [r7, #11]
    5620:	2206      	movs	r2, #6
    5622:	4619      	mov	r1, r3
    5624:	68f8      	ldr	r0, [r7, #12]
    5626:	4b03      	ldr	r3, [pc, #12]	; (5634 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5628:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    562a:	bf00      	nop
    562c:	3710      	adds	r7, #16
    562e:	46bd      	mov	sp, r7
    5630:	bd80      	pop	{r7, pc}
    5632:	bf00      	nop
    5634:	00005517 	.word	0x00005517

00005638 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5638:	b480      	push	{r7}
    563a:	b085      	sub	sp, #20
    563c:	af00      	add	r7, sp, #0
    563e:	60f8      	str	r0, [r7, #12]
    5640:	460b      	mov	r3, r1
    5642:	607a      	str	r2, [r7, #4]
    5644:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5646:	7afa      	ldrb	r2, [r7, #11]
    5648:	68f9      	ldr	r1, [r7, #12]
    564a:	4613      	mov	r3, r2
    564c:	009b      	lsls	r3, r3, #2
    564e:	4413      	add	r3, r2
    5650:	009b      	lsls	r3, r3, #2
    5652:	440b      	add	r3, r1
    5654:	3338      	adds	r3, #56	; 0x38
    5656:	687a      	ldr	r2, [r7, #4]
    5658:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    565a:	bf00      	nop
    565c:	3714      	adds	r7, #20
    565e:	46bd      	mov	sp, r7
    5660:	f85d 7b04 	ldr.w	r7, [sp], #4
    5664:	4770      	bx	lr

00005666 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5666:	b480      	push	{r7}
    5668:	b083      	sub	sp, #12
    566a:	af00      	add	r7, sp, #0
    566c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    566e:	687b      	ldr	r3, [r7, #4]
    5670:	691b      	ldr	r3, [r3, #16]
    5672:	085b      	lsrs	r3, r3, #1
    5674:	f003 0301 	and.w	r3, r3, #1
    5678:	2b00      	cmp	r3, #0
    567a:	bf14      	ite	ne
    567c:	2301      	movne	r3, #1
    567e:	2300      	moveq	r3, #0
    5680:	b2db      	uxtb	r3, r3
}
    5682:	4618      	mov	r0, r3
    5684:	370c      	adds	r7, #12
    5686:	46bd      	mov	sp, r7
    5688:	f85d 7b04 	ldr.w	r7, [sp], #4
    568c:	4770      	bx	lr

0000568e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    568e:	b480      	push	{r7}
    5690:	b083      	sub	sp, #12
    5692:	af00      	add	r7, sp, #0
    5694:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5696:	687b      	ldr	r3, [r7, #4]
    5698:	691b      	ldr	r3, [r3, #16]
    569a:	0a1b      	lsrs	r3, r3, #8
    569c:	f003 0301 	and.w	r3, r3, #1
    56a0:	2b00      	cmp	r3, #0
    56a2:	bf14      	ite	ne
    56a4:	2301      	movne	r3, #1
    56a6:	2300      	moveq	r3, #0
    56a8:	b2db      	uxtb	r3, r3
}
    56aa:	4618      	mov	r0, r3
    56ac:	370c      	adds	r7, #12
    56ae:	46bd      	mov	sp, r7
    56b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    56b4:	4770      	bx	lr

000056b6 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    56b6:	b480      	push	{r7}
    56b8:	b085      	sub	sp, #20
    56ba:	af00      	add	r7, sp, #0
    56bc:	6078      	str	r0, [r7, #4]
    56be:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    56c0:	687b      	ldr	r3, [r7, #4]
    56c2:	691b      	ldr	r3, [r3, #16]
    56c4:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    56c6:	68fa      	ldr	r2, [r7, #12]
    56c8:	683b      	ldr	r3, [r7, #0]
    56ca:	4013      	ands	r3, r2
    56cc:	60fb      	str	r3, [r7, #12]
	return tmp;
    56ce:	68fb      	ldr	r3, [r7, #12]
}
    56d0:	4618      	mov	r0, r3
    56d2:	3714      	adds	r7, #20
    56d4:	46bd      	mov	sp, r7
    56d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56da:	4770      	bx	lr

000056dc <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    56dc:	b480      	push	{r7}
    56de:	b085      	sub	sp, #20
    56e0:	af00      	add	r7, sp, #0
    56e2:	60f8      	str	r0, [r7, #12]
    56e4:	460b      	mov	r3, r1
    56e6:	607a      	str	r2, [r7, #4]
    56e8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    56ea:	7afb      	ldrb	r3, [r7, #11]
    56ec:	68fa      	ldr	r2, [r7, #12]
    56ee:	3304      	adds	r3, #4
    56f0:	009b      	lsls	r3, r3, #2
    56f2:	4413      	add	r3, r2
    56f4:	687a      	ldr	r2, [r7, #4]
    56f6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    56f8:	bf00      	nop
    56fa:	3714      	adds	r7, #20
    56fc:	46bd      	mov	sp, r7
    56fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5702:	4770      	bx	lr

00005704 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    5704:	b480      	push	{r7}
    5706:	b083      	sub	sp, #12
    5708:	af00      	add	r7, sp, #0
    570a:	6078      	str	r0, [r7, #4]
    570c:	460b      	mov	r3, r1
    570e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5710:	687b      	ldr	r3, [r7, #4]
    5712:	78fa      	ldrb	r2, [r7, #3]
    5714:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5716:	bf00      	nop
    5718:	370c      	adds	r7, #12
    571a:	46bd      	mov	sp, r7
    571c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5720:	4770      	bx	lr

00005722 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    5722:	b480      	push	{r7}
    5724:	b085      	sub	sp, #20
    5726:	af00      	add	r7, sp, #0
    5728:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    572a:	687b      	ldr	r3, [r7, #4]
    572c:	f893 3020 	ldrb.w	r3, [r3, #32]
    5730:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5732:	7bfb      	ldrb	r3, [r7, #15]
    5734:	f003 0301 	and.w	r3, r3, #1
    5738:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    573a:	7bfb      	ldrb	r3, [r7, #15]
    573c:	2b00      	cmp	r3, #0
    573e:	bf14      	ite	ne
    5740:	2301      	movne	r3, #1
    5742:	2300      	moveq	r3, #0
    5744:	b2db      	uxtb	r3, r3
}
    5746:	4618      	mov	r0, r3
    5748:	3714      	adds	r7, #20
    574a:	46bd      	mov	sp, r7
    574c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5750:	4770      	bx	lr

00005752 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5752:	b480      	push	{r7}
    5754:	b083      	sub	sp, #12
    5756:	af00      	add	r7, sp, #0
    5758:	6078      	str	r0, [r7, #4]
    575a:	460b      	mov	r3, r1
    575c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    575e:	687b      	ldr	r3, [r7, #4]
    5760:	78fa      	ldrb	r2, [r7, #3]
    5762:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5766:	bf00      	nop
    5768:	370c      	adds	r7, #12
    576a:	46bd      	mov	sp, r7
    576c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5770:	4770      	bx	lr

00005772 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5772:	b480      	push	{r7}
    5774:	b083      	sub	sp, #12
    5776:	af00      	add	r7, sp, #0
    5778:	6078      	str	r0, [r7, #4]
    577a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    577c:	687b      	ldr	r3, [r7, #4]
    577e:	683a      	ldr	r2, [r7, #0]
    5780:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5782:	bf00      	nop
    5784:	370c      	adds	r7, #12
    5786:	46bd      	mov	sp, r7
    5788:	f85d 7b04 	ldr.w	r7, [sp], #4
    578c:	4770      	bx	lr

0000578e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    578e:	b480      	push	{r7}
    5790:	b083      	sub	sp, #12
    5792:	af00      	add	r7, sp, #0
    5794:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5796:	687b      	ldr	r3, [r7, #4]
    5798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    579a:	4618      	mov	r0, r3
    579c:	370c      	adds	r7, #12
    579e:	46bd      	mov	sp, r7
    57a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    57a4:	4770      	bx	lr

000057a6 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    57a6:	b480      	push	{r7}
    57a8:	b083      	sub	sp, #12
    57aa:	af00      	add	r7, sp, #0
    57ac:	6078      	str	r0, [r7, #4]
    57ae:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    57b0:	687b      	ldr	r3, [r7, #4]
    57b2:	683a      	ldr	r2, [r7, #0]
    57b4:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    57b6:	bf00      	nop
    57b8:	370c      	adds	r7, #12
    57ba:	46bd      	mov	sp, r7
    57bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    57c0:	4770      	bx	lr

000057c2 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    57c2:	b480      	push	{r7}
    57c4:	b085      	sub	sp, #20
    57c6:	af00      	add	r7, sp, #0
    57c8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    57ca:	687b      	ldr	r3, [r7, #4]
    57cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    57d0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    57d2:	7bfb      	ldrb	r3, [r7, #15]
    57d4:	085b      	lsrs	r3, r3, #1
    57d6:	b2db      	uxtb	r3, r3
    57d8:	f003 0301 	and.w	r3, r3, #1
    57dc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    57de:	7bfb      	ldrb	r3, [r7, #15]
    57e0:	2b00      	cmp	r3, #0
    57e2:	bf14      	ite	ne
    57e4:	2301      	movne	r3, #1
    57e6:	2300      	moveq	r3, #0
    57e8:	b2db      	uxtb	r3, r3
}
    57ea:	4618      	mov	r0, r3
    57ec:	3714      	adds	r7, #20
    57ee:	46bd      	mov	sp, r7
    57f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    57f4:	4770      	bx	lr

000057f6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    57f6:	b480      	push	{r7}
    57f8:	b085      	sub	sp, #20
    57fa:	af00      	add	r7, sp, #0
    57fc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    57fe:	687b      	ldr	r3, [r7, #4]
    5800:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5804:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5806:	7bfb      	ldrb	r3, [r7, #15]
    5808:	089b      	lsrs	r3, r3, #2
    580a:	b2db      	uxtb	r3, r3
    580c:	f003 0301 	and.w	r3, r3, #1
    5810:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5812:	7bfb      	ldrb	r3, [r7, #15]
    5814:	2b00      	cmp	r3, #0
    5816:	bf14      	ite	ne
    5818:	2301      	movne	r3, #1
    581a:	2300      	moveq	r3, #0
    581c:	b2db      	uxtb	r3, r3
}
    581e:	4618      	mov	r0, r3
    5820:	3714      	adds	r7, #20
    5822:	46bd      	mov	sp, r7
    5824:	f85d 7b04 	ldr.w	r7, [sp], #4
    5828:	4770      	bx	lr

0000582a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    582a:	b480      	push	{r7}
    582c:	b085      	sub	sp, #20
    582e:	af00      	add	r7, sp, #0
    5830:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5832:	687b      	ldr	r3, [r7, #4]
    5834:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5838:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    583a:	7bfb      	ldrb	r3, [r7, #15]
    583c:	08db      	lsrs	r3, r3, #3
    583e:	b2db      	uxtb	r3, r3
    5840:	f003 0301 	and.w	r3, r3, #1
    5844:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5846:	7bfb      	ldrb	r3, [r7, #15]
    5848:	2b00      	cmp	r3, #0
    584a:	bf14      	ite	ne
    584c:	2301      	movne	r3, #1
    584e:	2300      	moveq	r3, #0
    5850:	b2db      	uxtb	r3, r3
}
    5852:	4618      	mov	r0, r3
    5854:	3714      	adds	r7, #20
    5856:	46bd      	mov	sp, r7
    5858:	f85d 7b04 	ldr.w	r7, [sp], #4
    585c:	4770      	bx	lr

0000585e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    585e:	b480      	push	{r7}
    5860:	b085      	sub	sp, #20
    5862:	af00      	add	r7, sp, #0
    5864:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5866:	687b      	ldr	r3, [r7, #4]
    5868:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    586c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    586e:	7bfb      	ldrb	r3, [r7, #15]
    5870:	091b      	lsrs	r3, r3, #4
    5872:	b2db      	uxtb	r3, r3
    5874:	f003 0301 	and.w	r3, r3, #1
    5878:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    587a:	7bfb      	ldrb	r3, [r7, #15]
    587c:	2b00      	cmp	r3, #0
    587e:	bf14      	ite	ne
    5880:	2301      	movne	r3, #1
    5882:	2300      	moveq	r3, #0
    5884:	b2db      	uxtb	r3, r3
}
    5886:	4618      	mov	r0, r3
    5888:	3714      	adds	r7, #20
    588a:	46bd      	mov	sp, r7
    588c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5890:	4770      	bx	lr
	...

00005894 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5894:	b580      	push	{r7, lr}
    5896:	b082      	sub	sp, #8
    5898:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    589a:	4b0a      	ldr	r3, [pc, #40]	; (58c4 <_oscctrl_init_sources+0x30>)
    589c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    589e:	4a0a      	ldr	r2, [pc, #40]	; (58c8 <_oscctrl_init_sources+0x34>)
    58a0:	2101      	movs	r1, #1
    58a2:	6878      	ldr	r0, [r7, #4]
    58a4:	4b09      	ldr	r3, [pc, #36]	; (58cc <_oscctrl_init_sources+0x38>)
    58a6:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    58a8:	bf00      	nop
    58aa:	6878      	ldr	r0, [r7, #4]
    58ac:	4b08      	ldr	r3, [pc, #32]	; (58d0 <_oscctrl_init_sources+0x3c>)
    58ae:	4798      	blx	r3
    58b0:	4603      	mov	r3, r0
    58b2:	f083 0301 	eor.w	r3, r3, #1
    58b6:	b2db      	uxtb	r3, r3
    58b8:	2b00      	cmp	r3, #0
    58ba:	d1f6      	bne.n	58aa <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    58bc:	bf00      	nop
    58be:	3708      	adds	r7, #8
    58c0:	46bd      	mov	sp, r7
    58c2:	bd80      	pop	{r7, pc}
    58c4:	40001000 	.word	0x40001000
    58c8:	03002646 	.word	0x03002646
    58cc:	000056dd 	.word	0x000056dd
    58d0:	00005667 	.word	0x00005667

000058d4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    58d4:	b580      	push	{r7, lr}
    58d6:	b084      	sub	sp, #16
    58d8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    58da:	4b6b      	ldr	r3, [pc, #428]	; (5a88 <_oscctrl_init_referenced_generators+0x1b4>)
    58dc:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    58de:	2204      	movs	r2, #4
    58e0:	2100      	movs	r1, #0
    58e2:	486a      	ldr	r0, [pc, #424]	; (5a8c <_oscctrl_init_referenced_generators+0x1b8>)
    58e4:	4b6a      	ldr	r3, [pc, #424]	; (5a90 <_oscctrl_init_referenced_generators+0x1bc>)
    58e6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    58e8:	bf00      	nop
    58ea:	4868      	ldr	r0, [pc, #416]	; (5a8c <_oscctrl_init_referenced_generators+0x1b8>)
    58ec:	4b69      	ldr	r3, [pc, #420]	; (5a94 <_oscctrl_init_referenced_generators+0x1c0>)
    58ee:	4798      	blx	r3
    58f0:	4603      	mov	r3, r0
    58f2:	2b00      	cmp	r3, #0
    58f4:	d1f9      	bne.n	58ea <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    58f6:	2100      	movs	r1, #0
    58f8:	68f8      	ldr	r0, [r7, #12]
    58fa:	4b67      	ldr	r3, [pc, #412]	; (5a98 <_oscctrl_init_referenced_generators+0x1c4>)
    58fc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    58fe:	4967      	ldr	r1, [pc, #412]	; (5a9c <_oscctrl_init_referenced_generators+0x1c8>)
    5900:	68f8      	ldr	r0, [r7, #12]
    5902:	4b67      	ldr	r3, [pc, #412]	; (5aa0 <_oscctrl_init_referenced_generators+0x1cc>)
    5904:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5906:	bf00      	nop
    5908:	68f8      	ldr	r0, [r7, #12]
    590a:	4b66      	ldr	r3, [pc, #408]	; (5aa4 <_oscctrl_init_referenced_generators+0x1d0>)
    590c:	4798      	blx	r3
    590e:	4603      	mov	r3, r0
    5910:	2b00      	cmp	r3, #0
    5912:	d1f9      	bne.n	5908 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5914:	2100      	movs	r1, #0
    5916:	68f8      	ldr	r0, [r7, #12]
    5918:	4b63      	ldr	r3, [pc, #396]	; (5aa8 <_oscctrl_init_referenced_generators+0x1d4>)
    591a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    591c:	bf00      	nop
    591e:	68f8      	ldr	r0, [r7, #12]
    5920:	4b62      	ldr	r3, [pc, #392]	; (5aac <_oscctrl_init_referenced_generators+0x1d8>)
    5922:	4798      	blx	r3
    5924:	4603      	mov	r3, r0
    5926:	2b00      	cmp	r3, #0
    5928:	d1f9      	bne.n	591e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    592a:	2302      	movs	r3, #2
    592c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    592e:	7afb      	ldrb	r3, [r7, #11]
    5930:	4619      	mov	r1, r3
    5932:	68f8      	ldr	r0, [r7, #12]
    5934:	4b58      	ldr	r3, [pc, #352]	; (5a98 <_oscctrl_init_referenced_generators+0x1c4>)
    5936:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5938:	bf00      	nop
    593a:	68f8      	ldr	r0, [r7, #12]
    593c:	4b5c      	ldr	r3, [pc, #368]	; (5ab0 <_oscctrl_init_referenced_generators+0x1dc>)
    593e:	4798      	blx	r3
    5940:	4603      	mov	r3, r0
    5942:	2b00      	cmp	r3, #0
    5944:	d1f9      	bne.n	593a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5946:	68f8      	ldr	r0, [r7, #12]
    5948:	4b5a      	ldr	r3, [pc, #360]	; (5ab4 <_oscctrl_init_referenced_generators+0x1e0>)
    594a:	4798      	blx	r3
    594c:	4603      	mov	r3, r0
    594e:	4619      	mov	r1, r3
    5950:	68f8      	ldr	r0, [r7, #12]
    5952:	4b59      	ldr	r3, [pc, #356]	; (5ab8 <_oscctrl_init_referenced_generators+0x1e4>)
    5954:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5956:	bf00      	nop
    5958:	68f8      	ldr	r0, [r7, #12]
    595a:	4b58      	ldr	r3, [pc, #352]	; (5abc <_oscctrl_init_referenced_generators+0x1e8>)
    595c:	4798      	blx	r3
    595e:	4603      	mov	r3, r0
    5960:	2b00      	cmp	r3, #0
    5962:	d1f9      	bne.n	5958 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5964:	2319      	movs	r3, #25
    5966:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5968:	7afb      	ldrb	r3, [r7, #11]
    596a:	4619      	mov	r1, r3
    596c:	68f8      	ldr	r0, [r7, #12]
    596e:	4b4e      	ldr	r3, [pc, #312]	; (5aa8 <_oscctrl_init_referenced_generators+0x1d4>)
    5970:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5972:	bf00      	nop
    5974:	68f8      	ldr	r0, [r7, #12]
    5976:	4b4d      	ldr	r3, [pc, #308]	; (5aac <_oscctrl_init_referenced_generators+0x1d8>)
    5978:	4798      	blx	r3
    597a:	4603      	mov	r3, r0
    597c:	2b00      	cmp	r3, #0
    597e:	d1f9      	bne.n	5974 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5980:	2245      	movs	r2, #69	; 0x45
    5982:	2101      	movs	r1, #1
    5984:	4841      	ldr	r0, [pc, #260]	; (5a8c <_oscctrl_init_referenced_generators+0x1b8>)
    5986:	4b4e      	ldr	r3, [pc, #312]	; (5ac0 <_oscctrl_init_referenced_generators+0x1ec>)
    5988:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    598a:	223b      	movs	r2, #59	; 0x3b
    598c:	2100      	movs	r1, #0
    598e:	68f8      	ldr	r0, [r7, #12]
    5990:	4b4c      	ldr	r3, [pc, #304]	; (5ac4 <_oscctrl_init_referenced_generators+0x1f0>)
    5992:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5994:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5998:	2100      	movs	r1, #0
    599a:	68f8      	ldr	r0, [r7, #12]
    599c:	4b4a      	ldr	r3, [pc, #296]	; (5ac8 <_oscctrl_init_referenced_generators+0x1f4>)
    599e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    59a0:	2242      	movs	r2, #66	; 0x42
    59a2:	2100      	movs	r1, #0
    59a4:	68f8      	ldr	r0, [r7, #12]
    59a6:	4b49      	ldr	r3, [pc, #292]	; (5acc <_oscctrl_init_referenced_generators+0x1f8>)
    59a8:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    59aa:	4a49      	ldr	r2, [pc, #292]	; (5ad0 <_oscctrl_init_referenced_generators+0x1fc>)
    59ac:	2101      	movs	r1, #1
    59ae:	68f8      	ldr	r0, [r7, #12]
    59b0:	4b44      	ldr	r3, [pc, #272]	; (5ac4 <_oscctrl_init_referenced_generators+0x1f0>)
    59b2:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    59b4:	f44f 6203 	mov.w	r2, #2096	; 0x830
    59b8:	2101      	movs	r1, #1
    59ba:	68f8      	ldr	r0, [r7, #12]
    59bc:	4b42      	ldr	r3, [pc, #264]	; (5ac8 <_oscctrl_init_referenced_generators+0x1f4>)
    59be:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    59c0:	2202      	movs	r2, #2
    59c2:	2101      	movs	r1, #1
    59c4:	68f8      	ldr	r0, [r7, #12]
    59c6:	4b41      	ldr	r3, [pc, #260]	; (5acc <_oscctrl_init_referenced_generators+0x1f8>)
    59c8:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    59ca:	68f8      	ldr	r0, [r7, #12]
    59cc:	4b41      	ldr	r3, [pc, #260]	; (5ad4 <_oscctrl_init_referenced_generators+0x200>)
    59ce:	4798      	blx	r3
    59d0:	4603      	mov	r3, r0
    59d2:	2b00      	cmp	r3, #0
    59d4:	d00c      	beq.n	59f0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    59d6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    59da:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    59dc:	bf00      	nop
    59de:	6879      	ldr	r1, [r7, #4]
    59e0:	68f8      	ldr	r0, [r7, #12]
    59e2:	4b3d      	ldr	r3, [pc, #244]	; (5ad8 <_oscctrl_init_referenced_generators+0x204>)
    59e4:	4798      	blx	r3
    59e6:	4602      	mov	r2, r0
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	429a      	cmp	r2, r3
    59ec:	d1f7      	bne.n	59de <_oscctrl_init_referenced_generators+0x10a>
    59ee:	e009      	b.n	5a04 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    59f0:	bf00      	nop
    59f2:	68f8      	ldr	r0, [r7, #12]
    59f4:	4b39      	ldr	r3, [pc, #228]	; (5adc <_oscctrl_init_referenced_generators+0x208>)
    59f6:	4798      	blx	r3
    59f8:	4603      	mov	r3, r0
    59fa:	f083 0301 	eor.w	r3, r3, #1
    59fe:	b2db      	uxtb	r3, r3
    5a00:	2b00      	cmp	r3, #0
    5a02:	d1f6      	bne.n	59f2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5a04:	bf00      	nop
    5a06:	2100      	movs	r1, #0
    5a08:	68f8      	ldr	r0, [r7, #12]
    5a0a:	4b35      	ldr	r3, [pc, #212]	; (5ae0 <_oscctrl_init_referenced_generators+0x20c>)
    5a0c:	4798      	blx	r3
    5a0e:	4603      	mov	r3, r0
    5a10:	f083 0301 	eor.w	r3, r3, #1
    5a14:	b2db      	uxtb	r3, r3
    5a16:	2b00      	cmp	r3, #0
    5a18:	d009      	beq.n	5a2e <_oscctrl_init_referenced_generators+0x15a>
    5a1a:	2100      	movs	r1, #0
    5a1c:	68f8      	ldr	r0, [r7, #12]
    5a1e:	4b31      	ldr	r3, [pc, #196]	; (5ae4 <_oscctrl_init_referenced_generators+0x210>)
    5a20:	4798      	blx	r3
    5a22:	4603      	mov	r3, r0
    5a24:	f083 0301 	eor.w	r3, r3, #1
    5a28:	b2db      	uxtb	r3, r3
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	d1eb      	bne.n	5a06 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5a2e:	bf00      	nop
    5a30:	2101      	movs	r1, #1
    5a32:	68f8      	ldr	r0, [r7, #12]
    5a34:	4b2a      	ldr	r3, [pc, #168]	; (5ae0 <_oscctrl_init_referenced_generators+0x20c>)
    5a36:	4798      	blx	r3
    5a38:	4603      	mov	r3, r0
    5a3a:	f083 0301 	eor.w	r3, r3, #1
    5a3e:	b2db      	uxtb	r3, r3
    5a40:	2b00      	cmp	r3, #0
    5a42:	d009      	beq.n	5a58 <_oscctrl_init_referenced_generators+0x184>
    5a44:	2101      	movs	r1, #1
    5a46:	68f8      	ldr	r0, [r7, #12]
    5a48:	4b26      	ldr	r3, [pc, #152]	; (5ae4 <_oscctrl_init_referenced_generators+0x210>)
    5a4a:	4798      	blx	r3
    5a4c:	4603      	mov	r3, r0
    5a4e:	f083 0301 	eor.w	r3, r3, #1
    5a52:	b2db      	uxtb	r3, r3
    5a54:	2b00      	cmp	r3, #0
    5a56:	d1eb      	bne.n	5a30 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5a58:	bf00      	nop
    5a5a:	480c      	ldr	r0, [pc, #48]	; (5a8c <_oscctrl_init_referenced_generators+0x1b8>)
    5a5c:	4b22      	ldr	r3, [pc, #136]	; (5ae8 <_oscctrl_init_referenced_generators+0x214>)
    5a5e:	4798      	blx	r3
    5a60:	4603      	mov	r3, r0
    5a62:	2b00      	cmp	r3, #0
    5a64:	d1f9      	bne.n	5a5a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5a66:	2207      	movs	r2, #7
    5a68:	2100      	movs	r1, #0
    5a6a:	4808      	ldr	r0, [pc, #32]	; (5a8c <_oscctrl_init_referenced_generators+0x1b8>)
    5a6c:	4b08      	ldr	r3, [pc, #32]	; (5a90 <_oscctrl_init_referenced_generators+0x1bc>)
    5a6e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5a70:	bf00      	nop
    5a72:	4806      	ldr	r0, [pc, #24]	; (5a8c <_oscctrl_init_referenced_generators+0x1b8>)
    5a74:	4b07      	ldr	r3, [pc, #28]	; (5a94 <_oscctrl_init_referenced_generators+0x1c0>)
    5a76:	4798      	blx	r3
    5a78:	4603      	mov	r3, r0
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	d1f9      	bne.n	5a72 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5a7e:	bf00      	nop
    5a80:	3710      	adds	r7, #16
    5a82:	46bd      	mov	sp, r7
    5a84:	bd80      	pop	{r7, pc}
    5a86:	bf00      	nop
    5a88:	40001000 	.word	0x40001000
    5a8c:	40001c00 	.word	0x40001c00
    5a90:	000054a1 	.word	0x000054a1
    5a94:	00005461 	.word	0x00005461
    5a98:	00005705 	.word	0x00005705
    5a9c:	0401bb80 	.word	0x0401bb80
    5aa0:	000057a7 	.word	0x000057a7
    5aa4:	0000585f 	.word	0x0000585f
    5aa8:	00005753 	.word	0x00005753
    5aac:	000057f7 	.word	0x000057f7
    5ab0:	000057c3 	.word	0x000057c3
    5ab4:	0000578f 	.word	0x0000578f
    5ab8:	00005773 	.word	0x00005773
    5abc:	0000582b 	.word	0x0000582b
    5ac0:	000054f1 	.word	0x000054f1
    5ac4:	000055fd 	.word	0x000055fd
    5ac8:	00005639 	.word	0x00005639
    5acc:	000055c1 	.word	0x000055c1
    5ad0:	000407a0 	.word	0x000407a0
    5ad4:	00005723 	.word	0x00005723
    5ad8:	000056b7 	.word	0x000056b7
    5adc:	0000568f 	.word	0x0000568f
    5ae0:	0000554d 	.word	0x0000554d
    5ae4:	00005585 	.word	0x00005585
    5ae8:	00005489 	.word	0x00005489

00005aec <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5aec:	b480      	push	{r7}
    5aee:	b083      	sub	sp, #12
    5af0:	af00      	add	r7, sp, #0
    5af2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5af4:	687b      	ldr	r3, [r7, #4]
    5af6:	69db      	ldr	r3, [r3, #28]
    5af8:	0a9b      	lsrs	r3, r3, #10
    5afa:	f003 0301 	and.w	r3, r3, #1
    5afe:	2b00      	cmp	r3, #0
    5b00:	bf14      	ite	ne
    5b02:	2301      	movne	r3, #1
    5b04:	2300      	moveq	r3, #0
    5b06:	b2db      	uxtb	r3, r3
}
    5b08:	4618      	mov	r0, r3
    5b0a:	370c      	adds	r7, #12
    5b0c:	46bd      	mov	sp, r7
    5b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b12:	4770      	bx	lr

00005b14 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5b14:	b480      	push	{r7}
    5b16:	b083      	sub	sp, #12
    5b18:	af00      	add	r7, sp, #0
    5b1a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5b1c:	687b      	ldr	r3, [r7, #4]
    5b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5b22:	61da      	str	r2, [r3, #28]
}
    5b24:	bf00      	nop
    5b26:	370c      	adds	r7, #12
    5b28:	46bd      	mov	sp, r7
    5b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b2e:	4770      	bx	lr

00005b30 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5b30:	b480      	push	{r7}
    5b32:	b083      	sub	sp, #12
    5b34:	af00      	add	r7, sp, #0
    5b36:	6078      	str	r0, [r7, #4]
    5b38:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	683a      	ldr	r2, [r7, #0]
    5b3e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5b40:	bf00      	nop
    5b42:	370c      	adds	r7, #12
    5b44:	46bd      	mov	sp, r7
    5b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b4a:	4770      	bx	lr

00005b4c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5b4c:	b480      	push	{r7}
    5b4e:	b083      	sub	sp, #12
    5b50:	af00      	add	r7, sp, #0
    5b52:	6078      	str	r0, [r7, #4]
    5b54:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	683a      	ldr	r2, [r7, #0]
    5b5a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5b5c:	bf00      	nop
    5b5e:	370c      	adds	r7, #12
    5b60:	46bd      	mov	sp, r7
    5b62:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b66:	4770      	bx	lr

00005b68 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5b68:	b480      	push	{r7}
    5b6a:	b083      	sub	sp, #12
    5b6c:	af00      	add	r7, sp, #0
    5b6e:	6078      	str	r0, [r7, #4]
    5b70:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5b72:	687b      	ldr	r3, [r7, #4]
    5b74:	683a      	ldr	r2, [r7, #0]
    5b76:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5b78:	bf00      	nop
    5b7a:	370c      	adds	r7, #12
    5b7c:	46bd      	mov	sp, r7
    5b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b82:	4770      	bx	lr

00005b84 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5b84:	b480      	push	{r7}
    5b86:	b083      	sub	sp, #12
    5b88:	af00      	add	r7, sp, #0
    5b8a:	6078      	str	r0, [r7, #4]
    5b8c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5b8e:	687b      	ldr	r3, [r7, #4]
    5b90:	683a      	ldr	r2, [r7, #0]
    5b92:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5b94:	bf00      	nop
    5b96:	370c      	adds	r7, #12
    5b98:	46bd      	mov	sp, r7
    5b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b9e:	4770      	bx	lr

00005ba0 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5ba0:	b480      	push	{r7}
    5ba2:	b085      	sub	sp, #20
    5ba4:	af00      	add	r7, sp, #0
    5ba6:	6078      	str	r0, [r7, #4]
    5ba8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5baa:	687b      	ldr	r3, [r7, #4]
    5bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5bae:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5bb0:	68fb      	ldr	r3, [r7, #12]
    5bb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5bb6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5bb8:	683b      	ldr	r3, [r7, #0]
    5bba:	b2db      	uxtb	r3, r3
    5bbc:	68fa      	ldr	r2, [r7, #12]
    5bbe:	4313      	orrs	r3, r2
    5bc0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5bc2:	687b      	ldr	r3, [r7, #4]
    5bc4:	68fa      	ldr	r2, [r7, #12]
    5bc6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5bc8:	bf00      	nop
    5bca:	3714      	adds	r7, #20
    5bcc:	46bd      	mov	sp, r7
    5bce:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bd2:	4770      	bx	lr

00005bd4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5bd4:	b480      	push	{r7}
    5bd6:	b085      	sub	sp, #20
    5bd8:	af00      	add	r7, sp, #0
    5bda:	6078      	str	r0, [r7, #4]
    5bdc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5bde:	687b      	ldr	r3, [r7, #4]
    5be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5be2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5be4:	68fb      	ldr	r3, [r7, #12]
    5be6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5bea:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5bec:	683b      	ldr	r3, [r7, #0]
    5bee:	041b      	lsls	r3, r3, #16
    5bf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5bf4:	68fa      	ldr	r2, [r7, #12]
    5bf6:	4313      	orrs	r3, r2
    5bf8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5bfa:	687b      	ldr	r3, [r7, #4]
    5bfc:	68fa      	ldr	r2, [r7, #12]
    5bfe:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5c00:	bf00      	nop
    5c02:	3714      	adds	r7, #20
    5c04:	46bd      	mov	sp, r7
    5c06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c0a:	4770      	bx	lr

00005c0c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5c0c:	b480      	push	{r7}
    5c0e:	b083      	sub	sp, #12
    5c10:	af00      	add	r7, sp, #0
    5c12:	6078      	str	r0, [r7, #4]
    5c14:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	683a      	ldr	r2, [r7, #0]
    5c1a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5c1c:	bf00      	nop
    5c1e:	370c      	adds	r7, #12
    5c20:	46bd      	mov	sp, r7
    5c22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c26:	4770      	bx	lr

00005c28 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5c28:	b480      	push	{r7}
    5c2a:	b083      	sub	sp, #12
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5c30:	687b      	ldr	r3, [r7, #4]
    5c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5c34:	4618      	mov	r0, r3
    5c36:	370c      	adds	r7, #12
    5c38:	46bd      	mov	sp, r7
    5c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c3e:	4770      	bx	lr

00005c40 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5c40:	b480      	push	{r7}
    5c42:	b085      	sub	sp, #20
    5c44:	af00      	add	r7, sp, #0
    5c46:	60f8      	str	r0, [r7, #12]
    5c48:	60b9      	str	r1, [r7, #8]
    5c4a:	607a      	str	r2, [r7, #4]
	while (count--) {
    5c4c:	e007      	b.n	5c5e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5c4e:	68fb      	ldr	r3, [r7, #12]
    5c50:	1c5a      	adds	r2, r3, #1
    5c52:	60fa      	str	r2, [r7, #12]
    5c54:	68ba      	ldr	r2, [r7, #8]
    5c56:	1c51      	adds	r1, r2, #1
    5c58:	60b9      	str	r1, [r7, #8]
    5c5a:	7812      	ldrb	r2, [r2, #0]
    5c5c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	1e5a      	subs	r2, r3, #1
    5c62:	607a      	str	r2, [r7, #4]
    5c64:	2b00      	cmp	r3, #0
    5c66:	d1f2      	bne.n	5c4e <_qspi_memcpy+0xe>
	}
}
    5c68:	bf00      	nop
    5c6a:	3714      	adds	r7, #20
    5c6c:	46bd      	mov	sp, r7
    5c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c72:	4770      	bx	lr

00005c74 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5c74:	b580      	push	{r7, lr}
    5c76:	b082      	sub	sp, #8
    5c78:	af00      	add	r7, sp, #0
    5c7a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5c7c:	4903      	ldr	r1, [pc, #12]	; (5c8c <_qspi_end_transfer+0x18>)
    5c7e:	6878      	ldr	r0, [r7, #4]
    5c80:	4b03      	ldr	r3, [pc, #12]	; (5c90 <_qspi_end_transfer+0x1c>)
    5c82:	4798      	blx	r3
}
    5c84:	bf00      	nop
    5c86:	3708      	adds	r7, #8
    5c88:	46bd      	mov	sp, r7
    5c8a:	bd80      	pop	{r7, pc}
    5c8c:	01000002 	.word	0x01000002
    5c90:	00005b31 	.word	0x00005b31

00005c94 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5c94:	b580      	push	{r7, lr}
    5c96:	b082      	sub	sp, #8
    5c98:	af00      	add	r7, sp, #0
    5c9a:	6078      	str	r0, [r7, #4]
    5c9c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5c9e:	687b      	ldr	r3, [r7, #4]
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d004      	beq.n	5cae <_qspi_sync_init+0x1a>
    5ca4:	683b      	ldr	r3, [r7, #0]
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	d001      	beq.n	5cae <_qspi_sync_init+0x1a>
    5caa:	2301      	movs	r3, #1
    5cac:	e000      	b.n	5cb0 <_qspi_sync_init+0x1c>
    5cae:	2300      	movs	r3, #0
    5cb0:	f003 0301 	and.w	r3, r3, #1
    5cb4:	b2db      	uxtb	r3, r3
    5cb6:	2240      	movs	r2, #64	; 0x40
    5cb8:	490c      	ldr	r1, [pc, #48]	; (5cec <_qspi_sync_init+0x58>)
    5cba:	4618      	mov	r0, r3
    5cbc:	4b0c      	ldr	r3, [pc, #48]	; (5cf0 <_qspi_sync_init+0x5c>)
    5cbe:	4798      	blx	r3
	dev->prvt = hw;
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	683a      	ldr	r2, [r7, #0]
    5cc4:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5cc6:	687b      	ldr	r3, [r7, #4]
    5cc8:	681b      	ldr	r3, [r3, #0]
    5cca:	2101      	movs	r1, #1
    5ccc:	4618      	mov	r0, r3
    5cce:	4b09      	ldr	r3, [pc, #36]	; (5cf4 <_qspi_sync_init+0x60>)
    5cd0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5cd2:	4909      	ldr	r1, [pc, #36]	; (5cf8 <_qspi_sync_init+0x64>)
    5cd4:	6838      	ldr	r0, [r7, #0]
    5cd6:	4b09      	ldr	r3, [pc, #36]	; (5cfc <_qspi_sync_init+0x68>)
    5cd8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5cda:	4909      	ldr	r1, [pc, #36]	; (5d00 <_qspi_sync_init+0x6c>)
    5cdc:	6838      	ldr	r0, [r7, #0]
    5cde:	4b09      	ldr	r3, [pc, #36]	; (5d04 <_qspi_sync_init+0x70>)
    5ce0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5ce2:	2300      	movs	r3, #0
}
    5ce4:	4618      	mov	r0, r3
    5ce6:	3708      	adds	r7, #8
    5ce8:	46bd      	mov	sp, r7
    5cea:	bd80      	pop	{r7, pc}
    5cec:	00011d70 	.word	0x00011d70
    5cf0:	00003cad 	.word	0x00003cad
    5cf4:	00005b31 	.word	0x00005b31
    5cf8:	06000011 	.word	0x06000011
    5cfc:	00005b4d 	.word	0x00005b4d
    5d00:	00241300 	.word	0x00241300
    5d04:	00005b69 	.word	0x00005b69

00005d08 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5d08:	b580      	push	{r7, lr}
    5d0a:	b082      	sub	sp, #8
    5d0c:	af00      	add	r7, sp, #0
    5d0e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5d10:	687b      	ldr	r3, [r7, #4]
    5d12:	681b      	ldr	r3, [r3, #0]
    5d14:	2102      	movs	r1, #2
    5d16:	4618      	mov	r0, r3
    5d18:	4b03      	ldr	r3, [pc, #12]	; (5d28 <_qspi_sync_enable+0x20>)
    5d1a:	4798      	blx	r3
	return ERR_NONE;
    5d1c:	2300      	movs	r3, #0
}
    5d1e:	4618      	mov	r0, r3
    5d20:	3708      	adds	r7, #8
    5d22:	46bd      	mov	sp, r7
    5d24:	bd80      	pop	{r7, pc}
    5d26:	bf00      	nop
    5d28:	00005b31 	.word	0x00005b31

00005d2c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	b082      	sub	sp, #8
    5d30:	af00      	add	r7, sp, #0
    5d32:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5d34:	687b      	ldr	r3, [r7, #4]
    5d36:	681b      	ldr	r3, [r3, #0]
    5d38:	2100      	movs	r1, #0
    5d3a:	4618      	mov	r0, r3
    5d3c:	4b03      	ldr	r3, [pc, #12]	; (5d4c <_qspi_sync_disable+0x20>)
    5d3e:	4798      	blx	r3
	return ERR_NONE;
    5d40:	2300      	movs	r3, #0
}
    5d42:	4618      	mov	r0, r3
    5d44:	3708      	adds	r7, #8
    5d46:	46bd      	mov	sp, r7
    5d48:	bd80      	pop	{r7, pc}
    5d4a:	bf00      	nop
    5d4c:	00005b31 	.word	0x00005b31

00005d50 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5d50:	b580      	push	{r7, lr}
    5d52:	b084      	sub	sp, #16
    5d54:	af00      	add	r7, sp, #0
    5d56:	6078      	str	r0, [r7, #4]
    5d58:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5d5a:	687b      	ldr	r3, [r7, #4]
    5d5c:	681b      	ldr	r3, [r3, #0]
    5d5e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5d60:	683b      	ldr	r3, [r7, #0]
    5d62:	781b      	ldrb	r3, [r3, #0]
    5d64:	f003 0320 	and.w	r3, r3, #32
    5d68:	b2db      	uxtb	r3, r3
    5d6a:	2b00      	cmp	r3, #0
    5d6c:	d005      	beq.n	5d7a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5d6e:	683b      	ldr	r3, [r7, #0]
    5d70:	689b      	ldr	r3, [r3, #8]
    5d72:	4619      	mov	r1, r3
    5d74:	68f8      	ldr	r0, [r7, #12]
    5d76:	4b13      	ldr	r3, [pc, #76]	; (5dc4 <_qspi_sync_command_set_ifr+0x74>)
    5d78:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5d7a:	683b      	ldr	r3, [r7, #0]
    5d7c:	781b      	ldrb	r3, [r3, #0]
    5d7e:	f003 0310 	and.w	r3, r3, #16
    5d82:	b2db      	uxtb	r3, r3
    5d84:	2b00      	cmp	r3, #0
    5d86:	d005      	beq.n	5d94 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5d88:	683b      	ldr	r3, [r7, #0]
    5d8a:	791b      	ldrb	r3, [r3, #4]
    5d8c:	4619      	mov	r1, r3
    5d8e:	68f8      	ldr	r0, [r7, #12]
    5d90:	4b0d      	ldr	r3, [pc, #52]	; (5dc8 <_qspi_sync_command_set_ifr+0x78>)
    5d92:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5d94:	683b      	ldr	r3, [r7, #0]
    5d96:	781b      	ldrb	r3, [r3, #0]
    5d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5d9c:	b2db      	uxtb	r3, r3
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d005      	beq.n	5dae <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5da2:	683b      	ldr	r3, [r7, #0]
    5da4:	795b      	ldrb	r3, [r3, #5]
    5da6:	4619      	mov	r1, r3
    5da8:	68f8      	ldr	r0, [r7, #12]
    5daa:	4b08      	ldr	r3, [pc, #32]	; (5dcc <_qspi_sync_command_set_ifr+0x7c>)
    5dac:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5dae:	683b      	ldr	r3, [r7, #0]
    5db0:	681b      	ldr	r3, [r3, #0]
    5db2:	4619      	mov	r1, r3
    5db4:	68f8      	ldr	r0, [r7, #12]
    5db6:	4b06      	ldr	r3, [pc, #24]	; (5dd0 <_qspi_sync_command_set_ifr+0x80>)
    5db8:	4798      	blx	r3
}
    5dba:	bf00      	nop
    5dbc:	3710      	adds	r7, #16
    5dbe:	46bd      	mov	sp, r7
    5dc0:	bd80      	pop	{r7, pc}
    5dc2:	bf00      	nop
    5dc4:	00005b85 	.word	0x00005b85
    5dc8:	00005ba1 	.word	0x00005ba1
    5dcc:	00005bd5 	.word	0x00005bd5
    5dd0:	00005c0d 	.word	0x00005c0d

00005dd4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5dd4:	b580      	push	{r7, lr}
    5dd6:	b084      	sub	sp, #16
    5dd8:	af00      	add	r7, sp, #0
    5dda:	6078      	str	r0, [r7, #4]
    5ddc:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5dde:	687b      	ldr	r3, [r7, #4]
    5de0:	681b      	ldr	r3, [r3, #0]
    5de2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5de4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5de8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5dea:	683b      	ldr	r3, [r7, #0]
    5dec:	781b      	ldrb	r3, [r3, #0]
    5dee:	f003 0320 	and.w	r3, r3, #32
    5df2:	b2db      	uxtb	r3, r3
    5df4:	2b00      	cmp	r3, #0
    5df6:	d004      	beq.n	5e02 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5df8:	683b      	ldr	r3, [r7, #0]
    5dfa:	689b      	ldr	r3, [r3, #8]
    5dfc:	68fa      	ldr	r2, [r7, #12]
    5dfe:	4413      	add	r3, r2
    5e00:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5e02:	68b8      	ldr	r0, [r7, #8]
    5e04:	4b18      	ldr	r3, [pc, #96]	; (5e68 <_qspi_sync_run_transfer+0x94>)
    5e06:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5e08:	683b      	ldr	r3, [r7, #0]
    5e0a:	691b      	ldr	r3, [r3, #16]
    5e0c:	2b00      	cmp	r3, #0
    5e0e:	d103      	bne.n	5e18 <_qspi_sync_run_transfer+0x44>
    5e10:	683b      	ldr	r3, [r7, #0]
    5e12:	695b      	ldr	r3, [r3, #20]
    5e14:	2b00      	cmp	r3, #0
    5e16:	d001      	beq.n	5e1c <_qspi_sync_run_transfer+0x48>
    5e18:	2301      	movs	r3, #1
    5e1a:	e000      	b.n	5e1e <_qspi_sync_run_transfer+0x4a>
    5e1c:	2300      	movs	r3, #0
    5e1e:	f003 0301 	and.w	r3, r3, #1
    5e22:	b2db      	uxtb	r3, r3
    5e24:	2282      	movs	r2, #130	; 0x82
    5e26:	4911      	ldr	r1, [pc, #68]	; (5e6c <_qspi_sync_run_transfer+0x98>)
    5e28:	4618      	mov	r0, r3
    5e2a:	4b11      	ldr	r3, [pc, #68]	; (5e70 <_qspi_sync_run_transfer+0x9c>)
    5e2c:	4798      	blx	r3

	if (cmd->tx_buf) {
    5e2e:	683b      	ldr	r3, [r7, #0]
    5e30:	691b      	ldr	r3, [r3, #16]
    5e32:	2b00      	cmp	r3, #0
    5e34:	d008      	beq.n	5e48 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5e36:	683b      	ldr	r3, [r7, #0]
    5e38:	6919      	ldr	r1, [r3, #16]
    5e3a:	683b      	ldr	r3, [r7, #0]
    5e3c:	68db      	ldr	r3, [r3, #12]
    5e3e:	461a      	mov	r2, r3
    5e40:	68f8      	ldr	r0, [r7, #12]
    5e42:	4b0c      	ldr	r3, [pc, #48]	; (5e74 <_qspi_sync_run_transfer+0xa0>)
    5e44:	4798      	blx	r3
    5e46:	e007      	b.n	5e58 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5e48:	683b      	ldr	r3, [r7, #0]
    5e4a:	6958      	ldr	r0, [r3, #20]
    5e4c:	683b      	ldr	r3, [r7, #0]
    5e4e:	68db      	ldr	r3, [r3, #12]
    5e50:	461a      	mov	r2, r3
    5e52:	68f9      	ldr	r1, [r7, #12]
    5e54:	4b07      	ldr	r3, [pc, #28]	; (5e74 <_qspi_sync_run_transfer+0xa0>)
    5e56:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5e58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5e5c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5e60:	bf00      	nop
    5e62:	3710      	adds	r7, #16
    5e64:	46bd      	mov	sp, r7
    5e66:	bd80      	pop	{r7, pc}
    5e68:	00005c29 	.word	0x00005c29
    5e6c:	00011d70 	.word	0x00011d70
    5e70:	00003cad 	.word	0x00003cad
    5e74:	00005c41 	.word	0x00005c41

00005e78 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5e78:	b580      	push	{r7, lr}
    5e7a:	b082      	sub	sp, #8
    5e7c:	af00      	add	r7, sp, #0
    5e7e:	6078      	str	r0, [r7, #4]
    5e80:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5e82:	6839      	ldr	r1, [r7, #0]
    5e84:	6878      	ldr	r0, [r7, #4]
    5e86:	4b14      	ldr	r3, [pc, #80]	; (5ed8 <_qspi_sync_serial_run_command+0x60>)
    5e88:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5e8a:	683b      	ldr	r3, [r7, #0]
    5e8c:	781b      	ldrb	r3, [r3, #0]
    5e8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5e92:	b2db      	uxtb	r3, r3
    5e94:	2b00      	cmp	r3, #0
    5e96:	d003      	beq.n	5ea0 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5e98:	6839      	ldr	r1, [r7, #0]
    5e9a:	6878      	ldr	r0, [r7, #4]
    5e9c:	4b0f      	ldr	r3, [pc, #60]	; (5edc <_qspi_sync_serial_run_command+0x64>)
    5e9e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5ea0:	687b      	ldr	r3, [r7, #4]
    5ea2:	681b      	ldr	r3, [r3, #0]
    5ea4:	4618      	mov	r0, r3
    5ea6:	4b0e      	ldr	r3, [pc, #56]	; (5ee0 <_qspi_sync_serial_run_command+0x68>)
    5ea8:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5eaa:	bf00      	nop
    5eac:	687b      	ldr	r3, [r7, #4]
    5eae:	681b      	ldr	r3, [r3, #0]
    5eb0:	4618      	mov	r0, r3
    5eb2:	4b0c      	ldr	r3, [pc, #48]	; (5ee4 <_qspi_sync_serial_run_command+0x6c>)
    5eb4:	4798      	blx	r3
    5eb6:	4603      	mov	r3, r0
    5eb8:	f083 0301 	eor.w	r3, r3, #1
    5ebc:	b2db      	uxtb	r3, r3
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	d1f4      	bne.n	5eac <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5ec2:	687b      	ldr	r3, [r7, #4]
    5ec4:	681b      	ldr	r3, [r3, #0]
    5ec6:	4618      	mov	r0, r3
    5ec8:	4b07      	ldr	r3, [pc, #28]	; (5ee8 <_qspi_sync_serial_run_command+0x70>)
    5eca:	4798      	blx	r3
	return ERR_NONE;
    5ecc:	2300      	movs	r3, #0
}
    5ece:	4618      	mov	r0, r3
    5ed0:	3708      	adds	r7, #8
    5ed2:	46bd      	mov	sp, r7
    5ed4:	bd80      	pop	{r7, pc}
    5ed6:	bf00      	nop
    5ed8:	00005d51 	.word	0x00005d51
    5edc:	00005dd5 	.word	0x00005dd5
    5ee0:	00005c75 	.word	0x00005c75
    5ee4:	00005aed 	.word	0x00005aed
    5ee8:	00005b15 	.word	0x00005b15

00005eec <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5eec:	b480      	push	{r7}
    5eee:	b083      	sub	sp, #12
    5ef0:	af00      	add	r7, sp, #0
    5ef2:	6078      	str	r0, [r7, #4]
    5ef4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5ef6:	bf00      	nop
    5ef8:	687b      	ldr	r3, [r7, #4]
    5efa:	691a      	ldr	r2, [r3, #16]
    5efc:	683b      	ldr	r3, [r7, #0]
    5efe:	4013      	ands	r3, r2
    5f00:	2b00      	cmp	r3, #0
    5f02:	d1f9      	bne.n	5ef8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5f04:	bf00      	nop
    5f06:	370c      	adds	r7, #12
    5f08:	46bd      	mov	sp, r7
    5f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f0e:	4770      	bx	lr

00005f10 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5f10:	b480      	push	{r7}
    5f12:	b083      	sub	sp, #12
    5f14:	af00      	add	r7, sp, #0
    5f16:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5f18:	687b      	ldr	r3, [r7, #4]
    5f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f1e:	819a      	strh	r2, [r3, #12]
}
    5f20:	bf00      	nop
    5f22:	370c      	adds	r7, #12
    5f24:	46bd      	mov	sp, r7
    5f26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f2a:	4770      	bx	lr

00005f2c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5f2c:	b480      	push	{r7}
    5f2e:	b083      	sub	sp, #12
    5f30:	af00      	add	r7, sp, #0
    5f32:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5f34:	687b      	ldr	r3, [r7, #4]
    5f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5f3a:	819a      	strh	r2, [r3, #12]
}
    5f3c:	bf00      	nop
    5f3e:	370c      	adds	r7, #12
    5f40:	46bd      	mov	sp, r7
    5f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f46:	4770      	bx	lr

00005f48 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5f48:	b480      	push	{r7}
    5f4a:	b083      	sub	sp, #12
    5f4c:	af00      	add	r7, sp, #0
    5f4e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	899b      	ldrh	r3, [r3, #12]
    5f54:	b29b      	uxth	r3, r3
}
    5f56:	4618      	mov	r0, r3
    5f58:	370c      	adds	r7, #12
    5f5a:	46bd      	mov	sp, r7
    5f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f60:	4770      	bx	lr

00005f62 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5f62:	b480      	push	{r7}
    5f64:	b083      	sub	sp, #12
    5f66:	af00      	add	r7, sp, #0
    5f68:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5f6a:	687b      	ldr	r3, [r7, #4]
    5f6c:	895b      	ldrh	r3, [r3, #10]
    5f6e:	b29b      	uxth	r3, r3
}
    5f70:	4618      	mov	r0, r3
    5f72:	370c      	adds	r7, #12
    5f74:	46bd      	mov	sp, r7
    5f76:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f7a:	4770      	bx	lr

00005f7c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5f7c:	b580      	push	{r7, lr}
    5f7e:	b082      	sub	sp, #8
    5f80:	af00      	add	r7, sp, #0
    5f82:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	881b      	ldrh	r3, [r3, #0]
    5f88:	b29b      	uxth	r3, r3
    5f8a:	f043 0301 	orr.w	r3, r3, #1
    5f8e:	b29a      	uxth	r2, r3
    5f90:	687b      	ldr	r3, [r7, #4]
    5f92:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5f94:	2101      	movs	r1, #1
    5f96:	6878      	ldr	r0, [r7, #4]
    5f98:	4b02      	ldr	r3, [pc, #8]	; (5fa4 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5f9a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5f9c:	bf00      	nop
    5f9e:	3708      	adds	r7, #8
    5fa0:	46bd      	mov	sp, r7
    5fa2:	bd80      	pop	{r7, pc}
    5fa4:	00005eed 	.word	0x00005eed

00005fa8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5fa8:	b580      	push	{r7, lr}
    5faa:	b084      	sub	sp, #16
    5fac:	af00      	add	r7, sp, #0
    5fae:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5fb0:	f248 0103 	movw	r1, #32771	; 0x8003
    5fb4:	6878      	ldr	r0, [r7, #4]
    5fb6:	4b0a      	ldr	r3, [pc, #40]	; (5fe0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5fb8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5fba:	687b      	ldr	r3, [r7, #4]
    5fbc:	881b      	ldrh	r3, [r3, #0]
    5fbe:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5fc0:	89fb      	ldrh	r3, [r7, #14]
    5fc2:	085b      	lsrs	r3, r3, #1
    5fc4:	b29b      	uxth	r3, r3
    5fc6:	f003 0301 	and.w	r3, r3, #1
    5fca:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5fcc:	89fb      	ldrh	r3, [r7, #14]
    5fce:	2b00      	cmp	r3, #0
    5fd0:	bf14      	ite	ne
    5fd2:	2301      	movne	r3, #1
    5fd4:	2300      	moveq	r3, #0
    5fd6:	b2db      	uxtb	r3, r3
}
    5fd8:	4618      	mov	r0, r3
    5fda:	3710      	adds	r7, #16
    5fdc:	46bd      	mov	sp, r7
    5fde:	bd80      	pop	{r7, pc}
    5fe0:	00005eed 	.word	0x00005eed

00005fe4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5fe4:	b580      	push	{r7, lr}
    5fe6:	b082      	sub	sp, #8
    5fe8:	af00      	add	r7, sp, #0
    5fea:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	881b      	ldrh	r3, [r3, #0]
    5ff0:	b29b      	uxth	r3, r3
    5ff2:	f023 0302 	bic.w	r3, r3, #2
    5ff6:	b29a      	uxth	r2, r3
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5ffc:	f248 0103 	movw	r1, #32771	; 0x8003
    6000:	6878      	ldr	r0, [r7, #4]
    6002:	4b03      	ldr	r3, [pc, #12]	; (6010 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    6004:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6006:	bf00      	nop
    6008:	3708      	adds	r7, #8
    600a:	46bd      	mov	sp, r7
    600c:	bd80      	pop	{r7, pc}
    600e:	bf00      	nop
    6010:	00005eed 	.word	0x00005eed

00006014 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    6014:	b580      	push	{r7, lr}
    6016:	b082      	sub	sp, #8
    6018:	af00      	add	r7, sp, #0
    601a:	6078      	str	r0, [r7, #4]
    601c:	460b      	mov	r3, r1
    601e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	887a      	ldrh	r2, [r7, #2]
    6024:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6026:	f248 0103 	movw	r1, #32771	; 0x8003
    602a:	6878      	ldr	r0, [r7, #4]
    602c:	4b02      	ldr	r3, [pc, #8]	; (6038 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    602e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6030:	bf00      	nop
    6032:	3708      	adds	r7, #8
    6034:	46bd      	mov	sp, r7
    6036:	bd80      	pop	{r7, pc}
    6038:	00005eed 	.word	0x00005eed

0000603c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    603c:	b480      	push	{r7}
    603e:	b083      	sub	sp, #12
    6040:	af00      	add	r7, sp, #0
    6042:	6078      	str	r0, [r7, #4]
    6044:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    6046:	687b      	ldr	r3, [r7, #4]
    6048:	683a      	ldr	r2, [r7, #0]
    604a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    604c:	bf00      	nop
    604e:	370c      	adds	r7, #12
    6050:	46bd      	mov	sp, r7
    6052:	f85d 7b04 	ldr.w	r7, [sp], #4
    6056:	4770      	bx	lr

00006058 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    6058:	b580      	push	{r7, lr}
    605a:	b082      	sub	sp, #8
    605c:	af00      	add	r7, sp, #0
    605e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    6060:	687b      	ldr	r3, [r7, #4]
    6062:	2b00      	cmp	r3, #0
    6064:	d005      	beq.n	6072 <_calendar_init+0x1a>
    6066:	687b      	ldr	r3, [r7, #4]
    6068:	681b      	ldr	r3, [r3, #0]
    606a:	2b00      	cmp	r3, #0
    606c:	d001      	beq.n	6072 <_calendar_init+0x1a>
    606e:	2301      	movs	r3, #1
    6070:	e000      	b.n	6074 <_calendar_init+0x1c>
    6072:	2300      	movs	r3, #0
    6074:	f003 0301 	and.w	r3, r3, #1
    6078:	b2db      	uxtb	r3, r3
    607a:	222f      	movs	r2, #47	; 0x2f
    607c:	491b      	ldr	r1, [pc, #108]	; (60ec <_calendar_init+0x94>)
    607e:	4618      	mov	r0, r3
    6080:	4b1b      	ldr	r3, [pc, #108]	; (60f0 <_calendar_init+0x98>)
    6082:	4798      	blx	r3

	_rtc_dev = dev;
    6084:	4a1b      	ldr	r2, [pc, #108]	; (60f4 <_calendar_init+0x9c>)
    6086:	687b      	ldr	r3, [r7, #4]
    6088:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    608a:	687b      	ldr	r3, [r7, #4]
    608c:	681b      	ldr	r3, [r3, #0]
    608e:	4618      	mov	r0, r3
    6090:	4b19      	ldr	r3, [pc, #100]	; (60f8 <_calendar_init+0xa0>)
    6092:	4798      	blx	r3
    6094:	4603      	mov	r3, r0
    6096:	2b00      	cmp	r3, #0
    6098:	d00a      	beq.n	60b0 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    609a:	687b      	ldr	r3, [r7, #4]
    609c:	681b      	ldr	r3, [r3, #0]
    609e:	4618      	mov	r0, r3
    60a0:	4b16      	ldr	r3, [pc, #88]	; (60fc <_calendar_init+0xa4>)
    60a2:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    60a4:	687b      	ldr	r3, [r7, #4]
    60a6:	681b      	ldr	r3, [r3, #0]
    60a8:	2102      	movs	r1, #2
    60aa:	4618      	mov	r0, r3
    60ac:	4b14      	ldr	r3, [pc, #80]	; (6100 <_calendar_init+0xa8>)
    60ae:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    60b0:	687b      	ldr	r3, [r7, #4]
    60b2:	681b      	ldr	r3, [r3, #0]
    60b4:	4618      	mov	r0, r3
    60b6:	4b13      	ldr	r3, [pc, #76]	; (6104 <_calendar_init+0xac>)
    60b8:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    60ba:	687b      	ldr	r3, [r7, #4]
    60bc:	681b      	ldr	r3, [r3, #0]
    60be:	2101      	movs	r1, #1
    60c0:	4618      	mov	r0, r3
    60c2:	4b0f      	ldr	r3, [pc, #60]	; (6100 <_calendar_init+0xa8>)
    60c4:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    60c6:	687b      	ldr	r3, [r7, #4]
    60c8:	681b      	ldr	r3, [r3, #0]
    60ca:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    60ce:	4618      	mov	r0, r3
    60d0:	4b0d      	ldr	r3, [pc, #52]	; (6108 <_calendar_init+0xb0>)
    60d2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    60d4:	687b      	ldr	r3, [r7, #4]
    60d6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    60d8:	2100      	movs	r1, #0
    60da:	4618      	mov	r0, r3
    60dc:	4b0b      	ldr	r3, [pc, #44]	; (610c <_calendar_init+0xb4>)
    60de:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    60e0:	2300      	movs	r3, #0
}
    60e2:	4618      	mov	r0, r3
    60e4:	3708      	adds	r7, #8
    60e6:	46bd      	mov	sp, r7
    60e8:	bd80      	pop	{r7, pc}
    60ea:	bf00      	nop
    60ec:	00011d88 	.word	0x00011d88
    60f0:	00003cad 	.word	0x00003cad
    60f4:	200009cc 	.word	0x200009cc
    60f8:	00005fa9 	.word	0x00005fa9
    60fc:	00005fe5 	.word	0x00005fe5
    6100:	00005eed 	.word	0x00005eed
    6104:	00005f7d 	.word	0x00005f7d
    6108:	00006015 	.word	0x00006015
    610c:	0000603d 	.word	0x0000603d

00006110 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    6110:	b580      	push	{r7, lr}
    6112:	b084      	sub	sp, #16
    6114:	af00      	add	r7, sp, #0
    6116:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6118:	687b      	ldr	r3, [r7, #4]
    611a:	681b      	ldr	r3, [r3, #0]
    611c:	4618      	mov	r0, r3
    611e:	4b19      	ldr	r3, [pc, #100]	; (6184 <_rtc_interrupt_handler+0x74>)
    6120:	4798      	blx	r3
    6122:	4603      	mov	r3, r0
    6124:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    6126:	687b      	ldr	r3, [r7, #4]
    6128:	681b      	ldr	r3, [r3, #0]
    612a:	4618      	mov	r0, r3
    612c:	4b16      	ldr	r3, [pc, #88]	; (6188 <_rtc_interrupt_handler+0x78>)
    612e:	4798      	blx	r3
    6130:	4603      	mov	r3, r0
    6132:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    6134:	89fa      	ldrh	r2, [r7, #14]
    6136:	89bb      	ldrh	r3, [r7, #12]
    6138:	4013      	ands	r3, r2
    613a:	b29b      	uxth	r3, r3
    613c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6140:	2b00      	cmp	r3, #0
    6142:	d009      	beq.n	6158 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    6144:	687b      	ldr	r3, [r7, #4]
    6146:	685b      	ldr	r3, [r3, #4]
    6148:	6878      	ldr	r0, [r7, #4]
    614a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    614c:	687b      	ldr	r3, [r7, #4]
    614e:	681b      	ldr	r3, [r3, #0]
    6150:	4618      	mov	r0, r3
    6152:	4b0e      	ldr	r3, [pc, #56]	; (618c <_rtc_interrupt_handler+0x7c>)
    6154:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    6156:	e010      	b.n	617a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    6158:	89fa      	ldrh	r2, [r7, #14]
    615a:	89bb      	ldrh	r3, [r7, #12]
    615c:	4013      	ands	r3, r2
    615e:	b29b      	uxth	r3, r3
    6160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6164:	2b00      	cmp	r3, #0
    6166:	d008      	beq.n	617a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    6168:	687b      	ldr	r3, [r7, #4]
    616a:	689b      	ldr	r3, [r3, #8]
    616c:	6878      	ldr	r0, [r7, #4]
    616e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    6170:	687b      	ldr	r3, [r7, #4]
    6172:	681b      	ldr	r3, [r3, #0]
    6174:	4618      	mov	r0, r3
    6176:	4b06      	ldr	r3, [pc, #24]	; (6190 <_rtc_interrupt_handler+0x80>)
    6178:	4798      	blx	r3
}
    617a:	bf00      	nop
    617c:	3710      	adds	r7, #16
    617e:	46bd      	mov	sp, r7
    6180:	bd80      	pop	{r7, pc}
    6182:	bf00      	nop
    6184:	00005f49 	.word	0x00005f49
    6188:	00005f63 	.word	0x00005f63
    618c:	00005f11 	.word	0x00005f11
    6190:	00005f2d 	.word	0x00005f2d

00006194 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6194:	b580      	push	{r7, lr}
    6196:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    6198:	4b03      	ldr	r3, [pc, #12]	; (61a8 <RTC_Handler+0x14>)
    619a:	681b      	ldr	r3, [r3, #0]
    619c:	4618      	mov	r0, r3
    619e:	4b03      	ldr	r3, [pc, #12]	; (61ac <RTC_Handler+0x18>)
    61a0:	4798      	blx	r3
}
    61a2:	bf00      	nop
    61a4:	bd80      	pop	{r7, pc}
    61a6:	bf00      	nop
    61a8:	200009cc 	.word	0x200009cc
    61ac:	00006111 	.word	0x00006111

000061b0 <__NVIC_EnableIRQ>:
{
    61b0:	b480      	push	{r7}
    61b2:	b083      	sub	sp, #12
    61b4:	af00      	add	r7, sp, #0
    61b6:	4603      	mov	r3, r0
    61b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    61ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    61be:	2b00      	cmp	r3, #0
    61c0:	db0b      	blt.n	61da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    61c2:	4909      	ldr	r1, [pc, #36]	; (61e8 <__NVIC_EnableIRQ+0x38>)
    61c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    61c8:	095b      	lsrs	r3, r3, #5
    61ca:	88fa      	ldrh	r2, [r7, #6]
    61cc:	f002 021f 	and.w	r2, r2, #31
    61d0:	2001      	movs	r0, #1
    61d2:	fa00 f202 	lsl.w	r2, r0, r2
    61d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    61da:	bf00      	nop
    61dc:	370c      	adds	r7, #12
    61de:	46bd      	mov	sp, r7
    61e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    61e4:	4770      	bx	lr
    61e6:	bf00      	nop
    61e8:	e000e100 	.word	0xe000e100

000061ec <__NVIC_DisableIRQ>:
{
    61ec:	b480      	push	{r7}
    61ee:	b083      	sub	sp, #12
    61f0:	af00      	add	r7, sp, #0
    61f2:	4603      	mov	r3, r0
    61f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    61f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    61fa:	2b00      	cmp	r3, #0
    61fc:	db10      	blt.n	6220 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    61fe:	490b      	ldr	r1, [pc, #44]	; (622c <__NVIC_DisableIRQ+0x40>)
    6200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6204:	095b      	lsrs	r3, r3, #5
    6206:	88fa      	ldrh	r2, [r7, #6]
    6208:	f002 021f 	and.w	r2, r2, #31
    620c:	2001      	movs	r0, #1
    620e:	fa00 f202 	lsl.w	r2, r0, r2
    6212:	3320      	adds	r3, #32
    6214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6218:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    621c:	f3bf 8f6f 	isb	sy
}
    6220:	bf00      	nop
    6222:	370c      	adds	r7, #12
    6224:	46bd      	mov	sp, r7
    6226:	f85d 7b04 	ldr.w	r7, [sp], #4
    622a:	4770      	bx	lr
    622c:	e000e100 	.word	0xe000e100

00006230 <__NVIC_ClearPendingIRQ>:
{
    6230:	b480      	push	{r7}
    6232:	b083      	sub	sp, #12
    6234:	af00      	add	r7, sp, #0
    6236:	4603      	mov	r3, r0
    6238:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    623a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    623e:	2b00      	cmp	r3, #0
    6240:	db0c      	blt.n	625c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6242:	4909      	ldr	r1, [pc, #36]	; (6268 <__NVIC_ClearPendingIRQ+0x38>)
    6244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6248:	095b      	lsrs	r3, r3, #5
    624a:	88fa      	ldrh	r2, [r7, #6]
    624c:	f002 021f 	and.w	r2, r2, #31
    6250:	2001      	movs	r0, #1
    6252:	fa00 f202 	lsl.w	r2, r0, r2
    6256:	3360      	adds	r3, #96	; 0x60
    6258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    625c:	bf00      	nop
    625e:	370c      	adds	r7, #12
    6260:	46bd      	mov	sp, r7
    6262:	f85d 7b04 	ldr.w	r7, [sp], #4
    6266:	4770      	bx	lr
    6268:	e000e100 	.word	0xe000e100

0000626c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    626c:	b480      	push	{r7}
    626e:	b083      	sub	sp, #12
    6270:	af00      	add	r7, sp, #0
    6272:	6078      	str	r0, [r7, #4]
    6274:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6276:	bf00      	nop
    6278:	687b      	ldr	r3, [r7, #4]
    627a:	69da      	ldr	r2, [r3, #28]
    627c:	683b      	ldr	r3, [r7, #0]
    627e:	4013      	ands	r3, r2
    6280:	2b00      	cmp	r3, #0
    6282:	d1f9      	bne.n	6278 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6284:	bf00      	nop
    6286:	370c      	adds	r7, #12
    6288:	46bd      	mov	sp, r7
    628a:	f85d 7b04 	ldr.w	r7, [sp], #4
    628e:	4770      	bx	lr

00006290 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6290:	b480      	push	{r7}
    6292:	b083      	sub	sp, #12
    6294:	af00      	add	r7, sp, #0
    6296:	6078      	str	r0, [r7, #4]
    6298:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    629a:	687b      	ldr	r3, [r7, #4]
    629c:	69da      	ldr	r2, [r3, #28]
    629e:	683b      	ldr	r3, [r7, #0]
    62a0:	4013      	ands	r3, r2
    62a2:	2b00      	cmp	r3, #0
    62a4:	bf14      	ite	ne
    62a6:	2301      	movne	r3, #1
    62a8:	2300      	moveq	r3, #0
    62aa:	b2db      	uxtb	r3, r3
}
    62ac:	4618      	mov	r0, r3
    62ae:	370c      	adds	r7, #12
    62b0:	46bd      	mov	sp, r7
    62b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    62b6:	4770      	bx	lr

000062b8 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    62b8:	b480      	push	{r7}
    62ba:	b083      	sub	sp, #12
    62bc:	af00      	add	r7, sp, #0
    62be:	6078      	str	r0, [r7, #4]
    62c0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    62c2:	bf00      	nop
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	69da      	ldr	r2, [r3, #28]
    62c8:	683b      	ldr	r3, [r7, #0]
    62ca:	4013      	ands	r3, r2
    62cc:	2b00      	cmp	r3, #0
    62ce:	d1f9      	bne.n	62c4 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    62d0:	bf00      	nop
    62d2:	370c      	adds	r7, #12
    62d4:	46bd      	mov	sp, r7
    62d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    62da:	4770      	bx	lr

000062dc <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    62dc:	b480      	push	{r7}
    62de:	b083      	sub	sp, #12
    62e0:	af00      	add	r7, sp, #0
    62e2:	6078      	str	r0, [r7, #4]
    62e4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    62e6:	687b      	ldr	r3, [r7, #4]
    62e8:	69da      	ldr	r2, [r3, #28]
    62ea:	683b      	ldr	r3, [r7, #0]
    62ec:	4013      	ands	r3, r2
    62ee:	2b00      	cmp	r3, #0
    62f0:	bf14      	ite	ne
    62f2:	2301      	movne	r3, #1
    62f4:	2300      	moveq	r3, #0
    62f6:	b2db      	uxtb	r3, r3
}
    62f8:	4618      	mov	r0, r3
    62fa:	370c      	adds	r7, #12
    62fc:	46bd      	mov	sp, r7
    62fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6302:	4770      	bx	lr

00006304 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    6304:	b480      	push	{r7}
    6306:	b083      	sub	sp, #12
    6308:	af00      	add	r7, sp, #0
    630a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    630c:	687b      	ldr	r3, [r7, #4]
    630e:	2201      	movs	r2, #1
    6310:	761a      	strb	r2, [r3, #24]
}
    6312:	bf00      	nop
    6314:	370c      	adds	r7, #12
    6316:	46bd      	mov	sp, r7
    6318:	f85d 7b04 	ldr.w	r7, [sp], #4
    631c:	4770      	bx	lr

0000631e <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    631e:	b480      	push	{r7}
    6320:	b083      	sub	sp, #12
    6322:	af00      	add	r7, sp, #0
    6324:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6326:	687b      	ldr	r3, [r7, #4]
    6328:	2202      	movs	r2, #2
    632a:	761a      	strb	r2, [r3, #24]
}
    632c:	bf00      	nop
    632e:	370c      	adds	r7, #12
    6330:	46bd      	mov	sp, r7
    6332:	f85d 7b04 	ldr.w	r7, [sp], #4
    6336:	4770      	bx	lr

00006338 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    6338:	b480      	push	{r7}
    633a:	b083      	sub	sp, #12
    633c:	af00      	add	r7, sp, #0
    633e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6340:	687b      	ldr	r3, [r7, #4]
    6342:	7e1b      	ldrb	r3, [r3, #24]
    6344:	b2db      	uxtb	r3, r3
}
    6346:	4618      	mov	r0, r3
    6348:	370c      	adds	r7, #12
    634a:	46bd      	mov	sp, r7
    634c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6350:	4770      	bx	lr

00006352 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    6352:	b480      	push	{r7}
    6354:	b083      	sub	sp, #12
    6356:	af00      	add	r7, sp, #0
    6358:	6078      	str	r0, [r7, #4]
    635a:	460b      	mov	r3, r1
    635c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    635e:	687b      	ldr	r3, [r7, #4]
    6360:	78fa      	ldrb	r2, [r7, #3]
    6362:	761a      	strb	r2, [r3, #24]
}
    6364:	bf00      	nop
    6366:	370c      	adds	r7, #12
    6368:	46bd      	mov	sp, r7
    636a:	f85d 7b04 	ldr.w	r7, [sp], #4
    636e:	4770      	bx	lr

00006370 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6370:	b480      	push	{r7}
    6372:	b085      	sub	sp, #20
    6374:	af00      	add	r7, sp, #0
    6376:	6078      	str	r0, [r7, #4]
    6378:	460b      	mov	r3, r1
    637a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    637c:	687b      	ldr	r3, [r7, #4]
    637e:	7e1b      	ldrb	r3, [r3, #24]
    6380:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6382:	7bfa      	ldrb	r2, [r7, #15]
    6384:	78fb      	ldrb	r3, [r7, #3]
    6386:	4013      	ands	r3, r2
    6388:	73fb      	strb	r3, [r7, #15]
	return tmp;
    638a:	7bfb      	ldrb	r3, [r7, #15]
}
    638c:	4618      	mov	r0, r3
    638e:	3714      	adds	r7, #20
    6390:	46bd      	mov	sp, r7
    6392:	f85d 7b04 	ldr.w	r7, [sp], #4
    6396:	4770      	bx	lr

00006398 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6398:	b480      	push	{r7}
    639a:	b083      	sub	sp, #12
    639c:	af00      	add	r7, sp, #0
    639e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    63a0:	687b      	ldr	r3, [r7, #4]
    63a2:	7e1b      	ldrb	r3, [r3, #24]
    63a4:	b2db      	uxtb	r3, r3
}
    63a6:	4618      	mov	r0, r3
    63a8:	370c      	adds	r7, #12
    63aa:	46bd      	mov	sp, r7
    63ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    63b0:	4770      	bx	lr

000063b2 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    63b2:	b480      	push	{r7}
    63b4:	b083      	sub	sp, #12
    63b6:	af00      	add	r7, sp, #0
    63b8:	6078      	str	r0, [r7, #4]
    63ba:	460b      	mov	r3, r1
    63bc:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    63be:	687b      	ldr	r3, [r7, #4]
    63c0:	78fa      	ldrb	r2, [r7, #3]
    63c2:	761a      	strb	r2, [r3, #24]
}
    63c4:	bf00      	nop
    63c6:	370c      	adds	r7, #12
    63c8:	46bd      	mov	sp, r7
    63ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ce:	4770      	bx	lr

000063d0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    63d0:	b580      	push	{r7, lr}
    63d2:	b082      	sub	sp, #8
    63d4:	af00      	add	r7, sp, #0
    63d6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    63d8:	687b      	ldr	r3, [r7, #4]
    63da:	681b      	ldr	r3, [r3, #0]
    63dc:	f043 0202 	orr.w	r2, r3, #2
    63e0:	687b      	ldr	r3, [r7, #4]
    63e2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    63e4:	2103      	movs	r1, #3
    63e6:	6878      	ldr	r0, [r7, #4]
    63e8:	4b02      	ldr	r3, [pc, #8]	; (63f4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    63ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63ec:	bf00      	nop
    63ee:	3708      	adds	r7, #8
    63f0:	46bd      	mov	sp, r7
    63f2:	bd80      	pop	{r7, pc}
    63f4:	0000626d 	.word	0x0000626d

000063f8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    63f8:	b580      	push	{r7, lr}
    63fa:	b082      	sub	sp, #8
    63fc:	af00      	add	r7, sp, #0
    63fe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6400:	687b      	ldr	r3, [r7, #4]
    6402:	681b      	ldr	r3, [r3, #0]
    6404:	f023 0202 	bic.w	r2, r3, #2
    6408:	687b      	ldr	r3, [r7, #4]
    640a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    640c:	2103      	movs	r1, #3
    640e:	6878      	ldr	r0, [r7, #4]
    6410:	4b02      	ldr	r3, [pc, #8]	; (641c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    6412:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6414:	bf00      	nop
    6416:	3708      	adds	r7, #8
    6418:	46bd      	mov	sp, r7
    641a:	bd80      	pop	{r7, pc}
    641c:	0000626d 	.word	0x0000626d

00006420 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6420:	b480      	push	{r7}
    6422:	b085      	sub	sp, #20
    6424:	af00      	add	r7, sp, #0
    6426:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6428:	687b      	ldr	r3, [r7, #4]
    642a:	681b      	ldr	r3, [r3, #0]
    642c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    642e:	68fb      	ldr	r3, [r7, #12]
    6430:	0edb      	lsrs	r3, r3, #27
    6432:	f003 0301 	and.w	r3, r3, #1
    6436:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6438:	68fb      	ldr	r3, [r7, #12]
    643a:	2b00      	cmp	r3, #0
    643c:	bf14      	ite	ne
    643e:	2301      	movne	r3, #1
    6440:	2300      	moveq	r3, #0
    6442:	b2db      	uxtb	r3, r3
}
    6444:	4618      	mov	r0, r3
    6446:	3714      	adds	r7, #20
    6448:	46bd      	mov	sp, r7
    644a:	f85d 7b04 	ldr.w	r7, [sp], #4
    644e:	4770      	bx	lr

00006450 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6450:	b580      	push	{r7, lr}
    6452:	b084      	sub	sp, #16
    6454:	af00      	add	r7, sp, #0
    6456:	6078      	str	r0, [r7, #4]
    6458:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    645a:	2103      	movs	r1, #3
    645c:	6878      	ldr	r0, [r7, #4]
    645e:	4b07      	ldr	r3, [pc, #28]	; (647c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6460:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6462:	687b      	ldr	r3, [r7, #4]
    6464:	681b      	ldr	r3, [r3, #0]
    6466:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6468:	68fa      	ldr	r2, [r7, #12]
    646a:	683b      	ldr	r3, [r7, #0]
    646c:	4013      	ands	r3, r2
    646e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6470:	68fb      	ldr	r3, [r7, #12]
}
    6472:	4618      	mov	r0, r3
    6474:	3710      	adds	r7, #16
    6476:	46bd      	mov	sp, r7
    6478:	bd80      	pop	{r7, pc}
    647a:	bf00      	nop
    647c:	0000626d 	.word	0x0000626d

00006480 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6480:	b580      	push	{r7, lr}
    6482:	b082      	sub	sp, #8
    6484:	af00      	add	r7, sp, #0
    6486:	6078      	str	r0, [r7, #4]
    6488:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    648a:	687b      	ldr	r3, [r7, #4]
    648c:	683a      	ldr	r2, [r7, #0]
    648e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6490:	2103      	movs	r1, #3
    6492:	6878      	ldr	r0, [r7, #4]
    6494:	4b02      	ldr	r3, [pc, #8]	; (64a0 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6496:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6498:	bf00      	nop
    649a:	3708      	adds	r7, #8
    649c:	46bd      	mov	sp, r7
    649e:	bd80      	pop	{r7, pc}
    64a0:	0000626d 	.word	0x0000626d

000064a4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    64a4:	b580      	push	{r7, lr}
    64a6:	b084      	sub	sp, #16
    64a8:	af00      	add	r7, sp, #0
    64aa:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    64ac:	2103      	movs	r1, #3
    64ae:	6878      	ldr	r0, [r7, #4]
    64b0:	4b09      	ldr	r3, [pc, #36]	; (64d8 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    64b2:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    64b4:	687b      	ldr	r3, [r7, #4]
    64b6:	681b      	ldr	r3, [r3, #0]
    64b8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    64ba:	68fb      	ldr	r3, [r7, #12]
    64bc:	085b      	lsrs	r3, r3, #1
    64be:	f003 0301 	and.w	r3, r3, #1
    64c2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    64c4:	68fb      	ldr	r3, [r7, #12]
    64c6:	2b00      	cmp	r3, #0
    64c8:	bf14      	ite	ne
    64ca:	2301      	movne	r3, #1
    64cc:	2300      	moveq	r3, #0
    64ce:	b2db      	uxtb	r3, r3
}
    64d0:	4618      	mov	r0, r3
    64d2:	3710      	adds	r7, #16
    64d4:	46bd      	mov	sp, r7
    64d6:	bd80      	pop	{r7, pc}
    64d8:	000062b9 	.word	0x000062b9

000064dc <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    64dc:	b580      	push	{r7, lr}
    64de:	b082      	sub	sp, #8
    64e0:	af00      	add	r7, sp, #0
    64e2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    64e4:	687b      	ldr	r3, [r7, #4]
    64e6:	681b      	ldr	r3, [r3, #0]
    64e8:	f023 0202 	bic.w	r2, r3, #2
    64ec:	687b      	ldr	r3, [r7, #4]
    64ee:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    64f0:	2103      	movs	r1, #3
    64f2:	6878      	ldr	r0, [r7, #4]
    64f4:	4b02      	ldr	r3, [pc, #8]	; (6500 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    64f6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64f8:	bf00      	nop
    64fa:	3708      	adds	r7, #8
    64fc:	46bd      	mov	sp, r7
    64fe:	bd80      	pop	{r7, pc}
    6500:	000062b9 	.word	0x000062b9

00006504 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    6504:	b580      	push	{r7, lr}
    6506:	b084      	sub	sp, #16
    6508:	af00      	add	r7, sp, #0
    650a:	6078      	str	r0, [r7, #4]
    650c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    650e:	2103      	movs	r1, #3
    6510:	6878      	ldr	r0, [r7, #4]
    6512:	4b07      	ldr	r3, [pc, #28]	; (6530 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    6514:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6516:	687b      	ldr	r3, [r7, #4]
    6518:	681b      	ldr	r3, [r3, #0]
    651a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    651c:	68fa      	ldr	r2, [r7, #12]
    651e:	683b      	ldr	r3, [r7, #0]
    6520:	4013      	ands	r3, r2
    6522:	60fb      	str	r3, [r7, #12]
	return tmp;
    6524:	68fb      	ldr	r3, [r7, #12]
}
    6526:	4618      	mov	r0, r3
    6528:	3710      	adds	r7, #16
    652a:	46bd      	mov	sp, r7
    652c:	bd80      	pop	{r7, pc}
    652e:	bf00      	nop
    6530:	000062b9 	.word	0x000062b9

00006534 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    6534:	b580      	push	{r7, lr}
    6536:	b082      	sub	sp, #8
    6538:	af00      	add	r7, sp, #0
    653a:	6078      	str	r0, [r7, #4]
    653c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	683a      	ldr	r2, [r7, #0]
    6542:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6544:	2103      	movs	r1, #3
    6546:	6878      	ldr	r0, [r7, #4]
    6548:	4b02      	ldr	r3, [pc, #8]	; (6554 <hri_sercomspi_write_CTRLA_reg+0x20>)
    654a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    654c:	bf00      	nop
    654e:	3708      	adds	r7, #8
    6550:	46bd      	mov	sp, r7
    6552:	bd80      	pop	{r7, pc}
    6554:	000062b9 	.word	0x000062b9

00006558 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6558:	b580      	push	{r7, lr}
    655a:	b082      	sub	sp, #8
    655c:	af00      	add	r7, sp, #0
    655e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6560:	687b      	ldr	r3, [r7, #4]
    6562:	685b      	ldr	r3, [r3, #4]
    6564:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6568:	687b      	ldr	r3, [r7, #4]
    656a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    656c:	2104      	movs	r1, #4
    656e:	6878      	ldr	r0, [r7, #4]
    6570:	4b02      	ldr	r3, [pc, #8]	; (657c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    6572:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6574:	bf00      	nop
    6576:	3708      	adds	r7, #8
    6578:	46bd      	mov	sp, r7
    657a:	bd80      	pop	{r7, pc}
    657c:	0000626d 	.word	0x0000626d

00006580 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6580:	b580      	push	{r7, lr}
    6582:	b082      	sub	sp, #8
    6584:	af00      	add	r7, sp, #0
    6586:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6588:	687b      	ldr	r3, [r7, #4]
    658a:	685b      	ldr	r3, [r3, #4]
    658c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6590:	687b      	ldr	r3, [r7, #4]
    6592:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6594:	2104      	movs	r1, #4
    6596:	6878      	ldr	r0, [r7, #4]
    6598:	4b02      	ldr	r3, [pc, #8]	; (65a4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    659a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    659c:	bf00      	nop
    659e:	3708      	adds	r7, #8
    65a0:	46bd      	mov	sp, r7
    65a2:	bd80      	pop	{r7, pc}
    65a4:	0000626d 	.word	0x0000626d

000065a8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    65a8:	b580      	push	{r7, lr}
    65aa:	b082      	sub	sp, #8
    65ac:	af00      	add	r7, sp, #0
    65ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	685b      	ldr	r3, [r3, #4]
    65b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    65b8:	687b      	ldr	r3, [r7, #4]
    65ba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    65bc:	2104      	movs	r1, #4
    65be:	6878      	ldr	r0, [r7, #4]
    65c0:	4b02      	ldr	r3, [pc, #8]	; (65cc <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    65c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65c4:	bf00      	nop
    65c6:	3708      	adds	r7, #8
    65c8:	46bd      	mov	sp, r7
    65ca:	bd80      	pop	{r7, pc}
    65cc:	0000626d 	.word	0x0000626d

000065d0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    65d0:	b580      	push	{r7, lr}
    65d2:	b082      	sub	sp, #8
    65d4:	af00      	add	r7, sp, #0
    65d6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    65d8:	687b      	ldr	r3, [r7, #4]
    65da:	685b      	ldr	r3, [r3, #4]
    65dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    65e0:	687b      	ldr	r3, [r7, #4]
    65e2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    65e4:	2104      	movs	r1, #4
    65e6:	6878      	ldr	r0, [r7, #4]
    65e8:	4b02      	ldr	r3, [pc, #8]	; (65f4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    65ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65ec:	bf00      	nop
    65ee:	3708      	adds	r7, #8
    65f0:	46bd      	mov	sp, r7
    65f2:	bd80      	pop	{r7, pc}
    65f4:	0000626d 	.word	0x0000626d

000065f8 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    65f8:	b580      	push	{r7, lr}
    65fa:	b082      	sub	sp, #8
    65fc:	af00      	add	r7, sp, #0
    65fe:	6078      	str	r0, [r7, #4]
    6600:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6602:	687b      	ldr	r3, [r7, #4]
    6604:	685a      	ldr	r2, [r3, #4]
    6606:	683b      	ldr	r3, [r7, #0]
    6608:	041b      	lsls	r3, r3, #16
    660a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    660e:	431a      	orrs	r2, r3
    6610:	687b      	ldr	r3, [r7, #4]
    6612:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6614:	2104      	movs	r1, #4
    6616:	6878      	ldr	r0, [r7, #4]
    6618:	4b02      	ldr	r3, [pc, #8]	; (6624 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    661a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    661c:	bf00      	nop
    661e:	3708      	adds	r7, #8
    6620:	46bd      	mov	sp, r7
    6622:	bd80      	pop	{r7, pc}
    6624:	0000626d 	.word	0x0000626d

00006628 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6628:	b580      	push	{r7, lr}
    662a:	b082      	sub	sp, #8
    662c:	af00      	add	r7, sp, #0
    662e:	6078      	str	r0, [r7, #4]
    6630:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6632:	687b      	ldr	r3, [r7, #4]
    6634:	683a      	ldr	r2, [r7, #0]
    6636:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6638:	2104      	movs	r1, #4
    663a:	6878      	ldr	r0, [r7, #4]
    663c:	4b02      	ldr	r3, [pc, #8]	; (6648 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    663e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6640:	bf00      	nop
    6642:	3708      	adds	r7, #8
    6644:	46bd      	mov	sp, r7
    6646:	bd80      	pop	{r7, pc}
    6648:	0000626d 	.word	0x0000626d

0000664c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    664c:	b580      	push	{r7, lr}
    664e:	b082      	sub	sp, #8
    6650:	af00      	add	r7, sp, #0
    6652:	6078      	str	r0, [r7, #4]
    6654:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6656:	687b      	ldr	r3, [r7, #4]
    6658:	683a      	ldr	r2, [r7, #0]
    665a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    665c:	2117      	movs	r1, #23
    665e:	6878      	ldr	r0, [r7, #4]
    6660:	4b02      	ldr	r3, [pc, #8]	; (666c <hri_sercomspi_write_CTRLB_reg+0x20>)
    6662:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6664:	bf00      	nop
    6666:	3708      	adds	r7, #8
    6668:	46bd      	mov	sp, r7
    666a:	bd80      	pop	{r7, pc}
    666c:	000062b9 	.word	0x000062b9

00006670 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6670:	b480      	push	{r7}
    6672:	b083      	sub	sp, #12
    6674:	af00      	add	r7, sp, #0
    6676:	6078      	str	r0, [r7, #4]
    6678:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    667a:	687b      	ldr	r3, [r7, #4]
    667c:	683a      	ldr	r2, [r7, #0]
    667e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6680:	bf00      	nop
    6682:	370c      	adds	r7, #12
    6684:	46bd      	mov	sp, r7
    6686:	f85d 7b04 	ldr.w	r7, [sp], #4
    668a:	4770      	bx	lr

0000668c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    668c:	b480      	push	{r7}
    668e:	b083      	sub	sp, #12
    6690:	af00      	add	r7, sp, #0
    6692:	6078      	str	r0, [r7, #4]
    6694:	460b      	mov	r3, r1
    6696:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6698:	687b      	ldr	r3, [r7, #4]
    669a:	78fa      	ldrb	r2, [r7, #3]
    669c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    669e:	bf00      	nop
    66a0:	370c      	adds	r7, #12
    66a2:	46bd      	mov	sp, r7
    66a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    66a8:	4770      	bx	lr
	...

000066ac <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    66ac:	b580      	push	{r7, lr}
    66ae:	b084      	sub	sp, #16
    66b0:	af00      	add	r7, sp, #0
    66b2:	6078      	str	r0, [r7, #4]
    66b4:	460b      	mov	r3, r1
    66b6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    66b8:	687b      	ldr	r3, [r7, #4]
    66ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66bc:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    66be:	68fb      	ldr	r3, [r7, #12]
    66c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    66c4:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    66c6:	78fb      	ldrb	r3, [r7, #3]
    66c8:	039b      	lsls	r3, r3, #14
    66ca:	461a      	mov	r2, r3
    66cc:	68fb      	ldr	r3, [r7, #12]
    66ce:	4313      	orrs	r3, r2
    66d0:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    66d2:	687b      	ldr	r3, [r7, #4]
    66d4:	68fa      	ldr	r2, [r7, #12]
    66d6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    66d8:	2104      	movs	r1, #4
    66da:	6878      	ldr	r0, [r7, #4]
    66dc:	4b02      	ldr	r3, [pc, #8]	; (66e8 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    66de:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66e0:	bf00      	nop
    66e2:	3710      	adds	r7, #16
    66e4:	46bd      	mov	sp, r7
    66e6:	bd80      	pop	{r7, pc}
    66e8:	0000626d 	.word	0x0000626d

000066ec <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    66ec:	b580      	push	{r7, lr}
    66ee:	b082      	sub	sp, #8
    66f0:	af00      	add	r7, sp, #0
    66f2:	6078      	str	r0, [r7, #4]
    66f4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    66f6:	687b      	ldr	r3, [r7, #4]
    66f8:	683a      	ldr	r2, [r7, #0]
    66fa:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    66fc:	2104      	movs	r1, #4
    66fe:	6878      	ldr	r0, [r7, #4]
    6700:	4b02      	ldr	r3, [pc, #8]	; (670c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    6702:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6704:	bf00      	nop
    6706:	3708      	adds	r7, #8
    6708:	46bd      	mov	sp, r7
    670a:	bd80      	pop	{r7, pc}
    670c:	0000626d 	.word	0x0000626d

00006710 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6710:	b580      	push	{r7, lr}
    6712:	b082      	sub	sp, #8
    6714:	af00      	add	r7, sp, #0
    6716:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6718:	2104      	movs	r1, #4
    671a:	6878      	ldr	r0, [r7, #4]
    671c:	4b03      	ldr	r3, [pc, #12]	; (672c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    671e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6720:	687b      	ldr	r3, [r7, #4]
    6722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6724:	4618      	mov	r0, r3
    6726:	3708      	adds	r7, #8
    6728:	46bd      	mov	sp, r7
    672a:	bd80      	pop	{r7, pc}
    672c:	0000626d 	.word	0x0000626d

00006730 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6730:	b480      	push	{r7}
    6732:	b083      	sub	sp, #12
    6734:	af00      	add	r7, sp, #0
    6736:	6078      	str	r0, [r7, #4]
    6738:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    673a:	687b      	ldr	r3, [r7, #4]
    673c:	683a      	ldr	r2, [r7, #0]
    673e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6740:	bf00      	nop
    6742:	370c      	adds	r7, #12
    6744:	46bd      	mov	sp, r7
    6746:	f85d 7b04 	ldr.w	r7, [sp], #4
    674a:	4770      	bx	lr

0000674c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    674c:	b580      	push	{r7, lr}
    674e:	b082      	sub	sp, #8
    6750:	af00      	add	r7, sp, #0
    6752:	6078      	str	r0, [r7, #4]
    6754:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6756:	687b      	ldr	r3, [r7, #4]
    6758:	683a      	ldr	r2, [r7, #0]
    675a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    675c:	2104      	movs	r1, #4
    675e:	6878      	ldr	r0, [r7, #4]
    6760:	4b02      	ldr	r3, [pc, #8]	; (676c <hri_sercomi2cm_write_DATA_reg+0x20>)
    6762:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6764:	bf00      	nop
    6766:	3708      	adds	r7, #8
    6768:	46bd      	mov	sp, r7
    676a:	bd80      	pop	{r7, pc}
    676c:	0000626d 	.word	0x0000626d

00006770 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6770:	b580      	push	{r7, lr}
    6772:	b082      	sub	sp, #8
    6774:	af00      	add	r7, sp, #0
    6776:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6778:	2104      	movs	r1, #4
    677a:	6878      	ldr	r0, [r7, #4]
    677c:	4b03      	ldr	r3, [pc, #12]	; (678c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    677e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6780:	687b      	ldr	r3, [r7, #4]
    6782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6784:	4618      	mov	r0, r3
    6786:	3708      	adds	r7, #8
    6788:	46bd      	mov	sp, r7
    678a:	bd80      	pop	{r7, pc}
    678c:	0000626d 	.word	0x0000626d

00006790 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6790:	b480      	push	{r7}
    6792:	b083      	sub	sp, #12
    6794:	af00      	add	r7, sp, #0
    6796:	6078      	str	r0, [r7, #4]
    6798:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    679a:	687b      	ldr	r3, [r7, #4]
    679c:	683a      	ldr	r2, [r7, #0]
    679e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67a0:	bf00      	nop
    67a2:	370c      	adds	r7, #12
    67a4:	46bd      	mov	sp, r7
    67a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    67aa:	4770      	bx	lr

000067ac <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    67ac:	b480      	push	{r7}
    67ae:	b083      	sub	sp, #12
    67b0:	af00      	add	r7, sp, #0
    67b2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    67b4:	687b      	ldr	r3, [r7, #4]
    67b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    67b8:	4618      	mov	r0, r3
    67ba:	370c      	adds	r7, #12
    67bc:	46bd      	mov	sp, r7
    67be:	f85d 7b04 	ldr.w	r7, [sp], #4
    67c2:	4770      	bx	lr

000067c4 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    67c4:	b480      	push	{r7}
    67c6:	b083      	sub	sp, #12
    67c8:	af00      	add	r7, sp, #0
    67ca:	6078      	str	r0, [r7, #4]
    67cc:	460b      	mov	r3, r1
    67ce:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    67d0:	687b      	ldr	r3, [r7, #4]
    67d2:	78fa      	ldrb	r2, [r7, #3]
    67d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67d8:	bf00      	nop
    67da:	370c      	adds	r7, #12
    67dc:	46bd      	mov	sp, r7
    67de:	f85d 7b04 	ldr.w	r7, [sp], #4
    67e2:	4770      	bx	lr

000067e4 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    67e4:	b480      	push	{r7}
    67e6:	b083      	sub	sp, #12
    67e8:	af00      	add	r7, sp, #0
    67ea:	6078      	str	r0, [r7, #4]
    67ec:	460b      	mov	r3, r1
    67ee:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    67f0:	687b      	ldr	r3, [r7, #4]
    67f2:	887a      	ldrh	r2, [r7, #2]
    67f4:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67f6:	bf00      	nop
    67f8:	370c      	adds	r7, #12
    67fa:	46bd      	mov	sp, r7
    67fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6800:	4770      	bx	lr
	...

00006804 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    6804:	b580      	push	{r7, lr}
    6806:	b082      	sub	sp, #8
    6808:	af00      	add	r7, sp, #0
    680a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    680c:	2104      	movs	r1, #4
    680e:	6878      	ldr	r0, [r7, #4]
    6810:	4b06      	ldr	r3, [pc, #24]	; (682c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    6812:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6814:	687b      	ldr	r3, [r7, #4]
    6816:	8b5b      	ldrh	r3, [r3, #26]
    6818:	b29b      	uxth	r3, r3
    681a:	091b      	lsrs	r3, r3, #4
    681c:	b29b      	uxth	r3, r3
    681e:	f003 0303 	and.w	r3, r3, #3
    6822:	b29b      	uxth	r3, r3
}
    6824:	4618      	mov	r0, r3
    6826:	3708      	adds	r7, #8
    6828:	46bd      	mov	sp, r7
    682a:	bd80      	pop	{r7, pc}
    682c:	0000626d 	.word	0x0000626d

00006830 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6830:	b580      	push	{r7, lr}
    6832:	b082      	sub	sp, #8
    6834:	af00      	add	r7, sp, #0
    6836:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6838:	2104      	movs	r1, #4
    683a:	6878      	ldr	r0, [r7, #4]
    683c:	4b04      	ldr	r3, [pc, #16]	; (6850 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    683e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6840:	687b      	ldr	r3, [r7, #4]
    6842:	8b5b      	ldrh	r3, [r3, #26]
    6844:	b29b      	uxth	r3, r3
}
    6846:	4618      	mov	r0, r3
    6848:	3708      	adds	r7, #8
    684a:	46bd      	mov	sp, r7
    684c:	bd80      	pop	{r7, pc}
    684e:	bf00      	nop
    6850:	0000626d 	.word	0x0000626d

00006854 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6854:	b580      	push	{r7, lr}
    6856:	b082      	sub	sp, #8
    6858:	af00      	add	r7, sp, #0
    685a:	6078      	str	r0, [r7, #4]
    685c:	460b      	mov	r3, r1
    685e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6860:	687b      	ldr	r3, [r7, #4]
    6862:	887a      	ldrh	r2, [r7, #2]
    6864:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6866:	2104      	movs	r1, #4
    6868:	6878      	ldr	r0, [r7, #4]
    686a:	4b03      	ldr	r3, [pc, #12]	; (6878 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    686c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    686e:	bf00      	nop
    6870:	3708      	adds	r7, #8
    6872:	46bd      	mov	sp, r7
    6874:	bd80      	pop	{r7, pc}
    6876:	bf00      	nop
    6878:	0000626d 	.word	0x0000626d

0000687c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    687c:	b4b0      	push	{r4, r5, r7}
    687e:	b08d      	sub	sp, #52	; 0x34
    6880:	af00      	add	r7, sp, #0
    6882:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6884:	4b13      	ldr	r3, [pc, #76]	; (68d4 <_sercom_get_hardware_index+0x58>)
    6886:	f107 040c 	add.w	r4, r7, #12
    688a:	461d      	mov	r5, r3
    688c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    688e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6890:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6898:	2300      	movs	r3, #0
    689a:	62fb      	str	r3, [r7, #44]	; 0x2c
    689c:	e010      	b.n	68c0 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    68a0:	009b      	lsls	r3, r3, #2
    68a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    68a6:	4413      	add	r3, r2
    68a8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    68ac:	461a      	mov	r2, r3
    68ae:	687b      	ldr	r3, [r7, #4]
    68b0:	429a      	cmp	r2, r3
    68b2:	d102      	bne.n	68ba <_sercom_get_hardware_index+0x3e>
			return i;
    68b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    68b6:	b2db      	uxtb	r3, r3
    68b8:	e006      	b.n	68c8 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    68ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    68bc:	3301      	adds	r3, #1
    68be:	62fb      	str	r3, [r7, #44]	; 0x2c
    68c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    68c2:	2b07      	cmp	r3, #7
    68c4:	d9eb      	bls.n	689e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    68c6:	2300      	movs	r3, #0
}
    68c8:	4618      	mov	r0, r3
    68ca:	3734      	adds	r7, #52	; 0x34
    68cc:	46bd      	mov	sp, r7
    68ce:	bcb0      	pop	{r4, r5, r7}
    68d0:	4770      	bx	lr
    68d2:	bf00      	nop
    68d4:	00011dbc 	.word	0x00011dbc

000068d8 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    68d8:	b480      	push	{r7}
    68da:	b083      	sub	sp, #12
    68dc:	af00      	add	r7, sp, #0
    68de:	6078      	str	r0, [r7, #4]
    68e0:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    68e2:	687b      	ldr	r3, [r7, #4]
    68e4:	4a05      	ldr	r2, [pc, #20]	; (68fc <_sercom_init_irq_param+0x24>)
    68e6:	4293      	cmp	r3, r2
    68e8:	d102      	bne.n	68f0 <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    68ea:	4a05      	ldr	r2, [pc, #20]	; (6900 <_sercom_init_irq_param+0x28>)
    68ec:	683b      	ldr	r3, [r7, #0]
    68ee:	6013      	str	r3, [r2, #0]
	}
}
    68f0:	bf00      	nop
    68f2:	370c      	adds	r7, #12
    68f4:	46bd      	mov	sp, r7
    68f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    68fa:	4770      	bx	lr
    68fc:	43000c00 	.word	0x43000c00
    6900:	200009e8 	.word	0x200009e8

00006904 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6904:	b580      	push	{r7, lr}
    6906:	b084      	sub	sp, #16
    6908:	af00      	add	r7, sp, #0
    690a:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    690c:	6878      	ldr	r0, [r7, #4]
    690e:	4b13      	ldr	r3, [pc, #76]	; (695c <_get_i2cm_index+0x58>)
    6910:	4798      	blx	r3
    6912:	4603      	mov	r3, r0
    6914:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6916:	2300      	movs	r3, #0
    6918:	73fb      	strb	r3, [r7, #15]
    691a:	e010      	b.n	693e <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    691c:	7bfa      	ldrb	r2, [r7, #15]
    691e:	4910      	ldr	r1, [pc, #64]	; (6960 <_get_i2cm_index+0x5c>)
    6920:	4613      	mov	r3, r2
    6922:	005b      	lsls	r3, r3, #1
    6924:	4413      	add	r3, r2
    6926:	00db      	lsls	r3, r3, #3
    6928:	440b      	add	r3, r1
    692a:	781b      	ldrb	r3, [r3, #0]
    692c:	7bba      	ldrb	r2, [r7, #14]
    692e:	429a      	cmp	r2, r3
    6930:	d102      	bne.n	6938 <_get_i2cm_index+0x34>
			return i;
    6932:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6936:	e00d      	b.n	6954 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6938:	7bfb      	ldrb	r3, [r7, #15]
    693a:	3301      	adds	r3, #1
    693c:	73fb      	strb	r3, [r7, #15]
    693e:	7bfb      	ldrb	r3, [r7, #15]
    6940:	2b02      	cmp	r3, #2
    6942:	d9eb      	bls.n	691c <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6944:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    6948:	4906      	ldr	r1, [pc, #24]	; (6964 <_get_i2cm_index+0x60>)
    694a:	2000      	movs	r0, #0
    694c:	4b06      	ldr	r3, [pc, #24]	; (6968 <_get_i2cm_index+0x64>)
    694e:	4798      	blx	r3
	return -1;
    6950:	f04f 33ff 	mov.w	r3, #4294967295
}
    6954:	4618      	mov	r0, r3
    6956:	3710      	adds	r7, #16
    6958:	46bd      	mov	sp, r7
    695a:	bd80      	pop	{r7, pc}
    695c:	0000687d 	.word	0x0000687d
    6960:	20000018 	.word	0x20000018
    6964:	00011da0 	.word	0x00011da0
    6968:	00003cad 	.word	0x00003cad

0000696c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    696c:	b580      	push	{r7, lr}
    696e:	b082      	sub	sp, #8
    6970:	af00      	add	r7, sp, #0
    6972:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6974:	2103      	movs	r1, #3
    6976:	6878      	ldr	r0, [r7, #4]
    6978:	4b02      	ldr	r3, [pc, #8]	; (6984 <_sercom_i2c_send_stop+0x18>)
    697a:	4798      	blx	r3
}
    697c:	bf00      	nop
    697e:	3708      	adds	r7, #8
    6980:	46bd      	mov	sp, r7
    6982:	bd80      	pop	{r7, pc}
    6984:	000065f9 	.word	0x000065f9

00006988 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6988:	b590      	push	{r4, r7, lr}
    698a:	b087      	sub	sp, #28
    698c:	af00      	add	r7, sp, #0
    698e:	60f8      	str	r0, [r7, #12]
    6990:	60b9      	str	r1, [r7, #8]
    6992:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6994:	68f8      	ldr	r0, [r7, #12]
    6996:	4b7d      	ldr	r3, [pc, #500]	; (6b8c <_sercom_i2c_sync_analyse_flags+0x204>)
    6998:	4798      	blx	r3
    699a:	4603      	mov	r3, r0
    699c:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    699e:	68f8      	ldr	r0, [r7, #12]
    69a0:	4b7b      	ldr	r3, [pc, #492]	; (6b90 <_sercom_i2c_sync_analyse_flags+0x208>)
    69a2:	4798      	blx	r3
    69a4:	4603      	mov	r3, r0
    69a6:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    69a8:	68bb      	ldr	r3, [r7, #8]
    69aa:	f003 0301 	and.w	r3, r3, #1
    69ae:	2b00      	cmp	r3, #0
    69b0:	f000 8095 	beq.w	6ade <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    69b4:	8a7b      	ldrh	r3, [r7, #18]
    69b6:	f003 0302 	and.w	r3, r3, #2
    69ba:	2b00      	cmp	r3, #0
    69bc:	d01d      	beq.n	69fa <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    69be:	68f8      	ldr	r0, [r7, #12]
    69c0:	4b74      	ldr	r3, [pc, #464]	; (6b94 <_sercom_i2c_sync_analyse_flags+0x20c>)
    69c2:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    69c4:	687b      	ldr	r3, [r7, #4]
    69c6:	885b      	ldrh	r3, [r3, #2]
    69c8:	b29b      	uxth	r3, r3
    69ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    69ce:	b29a      	uxth	r2, r3
    69d0:	687b      	ldr	r3, [r7, #4]
    69d2:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    69d4:	687b      	ldr	r3, [r7, #4]
    69d6:	885b      	ldrh	r3, [r3, #2]
    69d8:	b29b      	uxth	r3, r3
    69da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    69de:	b29a      	uxth	r2, r3
    69e0:	687b      	ldr	r3, [r7, #4]
    69e2:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    69e4:	8a7b      	ldrh	r3, [r7, #18]
    69e6:	f003 0301 	and.w	r3, r3, #1
    69ea:	2b00      	cmp	r3, #0
    69ec:	d002      	beq.n	69f4 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    69ee:	f06f 0304 	mvn.w	r3, #4
    69f2:	e0c6      	b.n	6b82 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    69f4:	f06f 0303 	mvn.w	r3, #3
    69f8:	e0c3      	b.n	6b82 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    69fa:	8a7b      	ldrh	r3, [r7, #18]
    69fc:	f003 0304 	and.w	r3, r3, #4
    6a00:	2b00      	cmp	r3, #0
    6a02:	d01f      	beq.n	6a44 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6a04:	687b      	ldr	r3, [r7, #4]
    6a06:	685b      	ldr	r3, [r3, #4]
    6a08:	2b00      	cmp	r3, #0
    6a0a:	dd07      	ble.n	6a1c <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6a0c:	687b      	ldr	r3, [r7, #4]
    6a0e:	885b      	ldrh	r3, [r3, #2]
    6a10:	b29b      	uxth	r3, r3
    6a12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6a16:	b29a      	uxth	r2, r3
    6a18:	687b      	ldr	r3, [r7, #4]
    6a1a:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6a1c:	687b      	ldr	r3, [r7, #4]
    6a1e:	885b      	ldrh	r3, [r3, #2]
    6a20:	b29b      	uxth	r3, r3
    6a22:	b21b      	sxth	r3, r3
    6a24:	2b00      	cmp	r3, #0
    6a26:	da02      	bge.n	6a2e <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6a28:	68f8      	ldr	r0, [r7, #12]
    6a2a:	4b5b      	ldr	r3, [pc, #364]	; (6b98 <_sercom_i2c_sync_analyse_flags+0x210>)
    6a2c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6a2e:	687b      	ldr	r3, [r7, #4]
    6a30:	885b      	ldrh	r3, [r3, #2]
    6a32:	b29b      	uxth	r3, r3
    6a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a38:	b29a      	uxth	r2, r3
    6a3a:	687b      	ldr	r3, [r7, #4]
    6a3c:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6a3e:	f06f 0301 	mvn.w	r3, #1
    6a42:	e09e      	b.n	6b82 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6a44:	687b      	ldr	r3, [r7, #4]
    6a46:	885b      	ldrh	r3, [r3, #2]
    6a48:	b29b      	uxth	r3, r3
    6a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6a4e:	2b00      	cmp	r3, #0
    6a50:	d01c      	beq.n	6a8c <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6a52:	687b      	ldr	r3, [r7, #4]
    6a54:	881b      	ldrh	r3, [r3, #0]
    6a56:	121b      	asrs	r3, r3, #8
    6a58:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6a5a:	f003 0406 	and.w	r4, r3, #6
    6a5e:	68f8      	ldr	r0, [r7, #12]
    6a60:	4b4e      	ldr	r3, [pc, #312]	; (6b9c <_sercom_i2c_sync_analyse_flags+0x214>)
    6a62:	4798      	blx	r3
    6a64:	4603      	mov	r3, r0
    6a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6a6a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6a6c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6a70:	4619      	mov	r1, r3
    6a72:	68f8      	ldr	r0, [r7, #12]
    6a74:	4b4a      	ldr	r3, [pc, #296]	; (6ba0 <_sercom_i2c_sync_analyse_flags+0x218>)
    6a76:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6a78:	687b      	ldr	r3, [r7, #4]
    6a7a:	885b      	ldrh	r3, [r3, #2]
    6a7c:	b29b      	uxth	r3, r3
    6a7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6a82:	b29a      	uxth	r2, r3
    6a84:	687b      	ldr	r3, [r7, #4]
    6a86:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6a88:	2300      	movs	r3, #0
    6a8a:	e07a      	b.n	6b82 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6a8c:	687b      	ldr	r3, [r7, #4]
    6a8e:	685b      	ldr	r3, [r3, #4]
    6a90:	2b00      	cmp	r3, #0
    6a92:	d111      	bne.n	6ab8 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6a94:	687b      	ldr	r3, [r7, #4]
    6a96:	885b      	ldrh	r3, [r3, #2]
    6a98:	b29b      	uxth	r3, r3
    6a9a:	b21b      	sxth	r3, r3
    6a9c:	2b00      	cmp	r3, #0
    6a9e:	da02      	bge.n	6aa6 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6aa0:	68f8      	ldr	r0, [r7, #12]
    6aa2:	4b3d      	ldr	r3, [pc, #244]	; (6b98 <_sercom_i2c_sync_analyse_flags+0x210>)
    6aa4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	885b      	ldrh	r3, [r3, #2]
    6aaa:	b29b      	uxth	r3, r3
    6aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ab0:	b29a      	uxth	r2, r3
    6ab2:	687b      	ldr	r3, [r7, #4]
    6ab4:	805a      	strh	r2, [r3, #2]
    6ab6:	e010      	b.n	6ada <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6ab8:	687b      	ldr	r3, [r7, #4]
    6aba:	689b      	ldr	r3, [r3, #8]
    6abc:	781b      	ldrb	r3, [r3, #0]
    6abe:	4619      	mov	r1, r3
    6ac0:	68f8      	ldr	r0, [r7, #12]
    6ac2:	4b38      	ldr	r3, [pc, #224]	; (6ba4 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6ac4:	4798      	blx	r3
				msg->buffer++;
    6ac6:	687b      	ldr	r3, [r7, #4]
    6ac8:	689b      	ldr	r3, [r3, #8]
    6aca:	1c5a      	adds	r2, r3, #1
    6acc:	687b      	ldr	r3, [r7, #4]
    6ace:	609a      	str	r2, [r3, #8]
				msg->len--;
    6ad0:	687b      	ldr	r3, [r7, #4]
    6ad2:	685b      	ldr	r3, [r3, #4]
    6ad4:	1e5a      	subs	r2, r3, #1
    6ad6:	687b      	ldr	r3, [r7, #4]
    6ad8:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6ada:	2300      	movs	r3, #0
    6adc:	e051      	b.n	6b82 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6ade:	68bb      	ldr	r3, [r7, #8]
    6ae0:	f003 0302 	and.w	r3, r3, #2
    6ae4:	2b00      	cmp	r3, #0
    6ae6:	d04b      	beq.n	6b80 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6ae8:	687b      	ldr	r3, [r7, #4]
    6aea:	685b      	ldr	r3, [r3, #4]
    6aec:	2b00      	cmp	r3, #0
    6aee:	d041      	beq.n	6b74 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6af0:	8a7b      	ldrh	r3, [r7, #18]
    6af2:	f003 0304 	and.w	r3, r3, #4
    6af6:	2b00      	cmp	r3, #0
    6af8:	d13c      	bne.n	6b74 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6afa:	687b      	ldr	r3, [r7, #4]
    6afc:	685b      	ldr	r3, [r3, #4]
    6afe:	1e5a      	subs	r2, r3, #1
    6b00:	687b      	ldr	r3, [r7, #4]
    6b02:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6b04:	687b      	ldr	r3, [r7, #4]
    6b06:	685b      	ldr	r3, [r3, #4]
    6b08:	2b00      	cmp	r3, #0
    6b0a:	d102      	bne.n	6b12 <_sercom_i2c_sync_analyse_flags+0x18a>
    6b0c:	697b      	ldr	r3, [r7, #20]
    6b0e:	2b00      	cmp	r3, #0
    6b10:	d006      	beq.n	6b20 <_sercom_i2c_sync_analyse_flags+0x198>
    6b12:	687b      	ldr	r3, [r7, #4]
    6b14:	685b      	ldr	r3, [r3, #4]
    6b16:	2b01      	cmp	r3, #1
    6b18:	d105      	bne.n	6b26 <_sercom_i2c_sync_analyse_flags+0x19e>
    6b1a:	697b      	ldr	r3, [r7, #20]
    6b1c:	2b00      	cmp	r3, #0
    6b1e:	d002      	beq.n	6b26 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6b20:	68f8      	ldr	r0, [r7, #12]
    6b22:	4b21      	ldr	r3, [pc, #132]	; (6ba8 <_sercom_i2c_sync_analyse_flags+0x220>)
    6b24:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6b26:	687b      	ldr	r3, [r7, #4]
    6b28:	685b      	ldr	r3, [r3, #4]
    6b2a:	2b00      	cmp	r3, #0
    6b2c:	d113      	bne.n	6b56 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6b2e:	687b      	ldr	r3, [r7, #4]
    6b30:	885b      	ldrh	r3, [r3, #2]
    6b32:	b29b      	uxth	r3, r3
    6b34:	b21b      	sxth	r3, r3
    6b36:	2b00      	cmp	r3, #0
    6b38:	da05      	bge.n	6b46 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6b3a:	68f8      	ldr	r0, [r7, #12]
    6b3c:	4b1b      	ldr	r3, [pc, #108]	; (6bac <_sercom_i2c_sync_analyse_flags+0x224>)
    6b3e:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6b40:	68f8      	ldr	r0, [r7, #12]
    6b42:	4b15      	ldr	r3, [pc, #84]	; (6b98 <_sercom_i2c_sync_analyse_flags+0x210>)
    6b44:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6b46:	687b      	ldr	r3, [r7, #4]
    6b48:	885b      	ldrh	r3, [r3, #2]
    6b4a:	b29b      	uxth	r3, r3
    6b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6b50:	b29a      	uxth	r2, r3
    6b52:	687b      	ldr	r3, [r7, #4]
    6b54:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6b56:	687b      	ldr	r3, [r7, #4]
    6b58:	689c      	ldr	r4, [r3, #8]
    6b5a:	1c62      	adds	r2, r4, #1
    6b5c:	687b      	ldr	r3, [r7, #4]
    6b5e:	609a      	str	r2, [r3, #8]
    6b60:	68f8      	ldr	r0, [r7, #12]
    6b62:	4b13      	ldr	r3, [pc, #76]	; (6bb0 <_sercom_i2c_sync_analyse_flags+0x228>)
    6b64:	4798      	blx	r3
    6b66:	4603      	mov	r3, r0
    6b68:	b2db      	uxtb	r3, r3
    6b6a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6b6c:	68f8      	ldr	r0, [r7, #12]
    6b6e:	4b11      	ldr	r3, [pc, #68]	; (6bb4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6b70:	4798      	blx	r3
    6b72:	e005      	b.n	6b80 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6b74:	68f8      	ldr	r0, [r7, #12]
    6b76:	4b0f      	ldr	r3, [pc, #60]	; (6bb4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6b78:	4798      	blx	r3
			return I2C_NACK;
    6b7a:	f06f 0301 	mvn.w	r3, #1
    6b7e:	e000      	b.n	6b82 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6b80:	2300      	movs	r3, #0
}
    6b82:	4618      	mov	r0, r3
    6b84:	371c      	adds	r7, #28
    6b86:	46bd      	mov	sp, r7
    6b88:	bd90      	pop	{r4, r7, pc}
    6b8a:	bf00      	nop
    6b8c:	00006421 	.word	0x00006421
    6b90:	00006831 	.word	0x00006831
    6b94:	00006305 	.word	0x00006305
    6b98:	0000696d 	.word	0x0000696d
    6b9c:	00006711 	.word	0x00006711
    6ba0:	000066ed 	.word	0x000066ed
    6ba4:	0000674d 	.word	0x0000674d
    6ba8:	000065a9 	.word	0x000065a9
    6bac:	00006581 	.word	0x00006581
    6bb0:	00006771 	.word	0x00006771
    6bb4:	0000631f 	.word	0x0000631f

00006bb8 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6bb8:	b580      	push	{r7, lr}
    6bba:	b086      	sub	sp, #24
    6bbc:	af00      	add	r7, sp, #0
    6bbe:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6bc0:	687b      	ldr	r3, [r7, #4]
    6bc2:	691b      	ldr	r3, [r3, #16]
    6bc4:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6bc6:	6938      	ldr	r0, [r7, #16]
    6bc8:	4b37      	ldr	r3, [pc, #220]	; (6ca8 <_sercom_i2c_m_irq_handler+0xf0>)
    6bca:	4798      	blx	r3
    6bcc:	4603      	mov	r3, r0
    6bce:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    6bd0:	2300      	movs	r3, #0
    6bd2:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6bd4:	687b      	ldr	r3, [r7, #4]
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	bf14      	ite	ne
    6bda:	2301      	movne	r3, #1
    6bdc:	2300      	moveq	r3, #0
    6bde:	b2db      	uxtb	r3, r3
    6be0:	f240 421e 	movw	r2, #1054	; 0x41e
    6be4:	4931      	ldr	r1, [pc, #196]	; (6cac <_sercom_i2c_m_irq_handler+0xf4>)
    6be6:	4618      	mov	r0, r3
    6be8:	4b31      	ldr	r3, [pc, #196]	; (6cb0 <_sercom_i2c_m_irq_handler+0xf8>)
    6bea:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6bec:	687b      	ldr	r3, [r7, #4]
    6bee:	691b      	ldr	r3, [r3, #16]
    6bf0:	2b00      	cmp	r3, #0
    6bf2:	bf14      	ite	ne
    6bf4:	2301      	movne	r3, #1
    6bf6:	2300      	moveq	r3, #0
    6bf8:	b2db      	uxtb	r3, r3
    6bfa:	f240 421f 	movw	r2, #1055	; 0x41f
    6bfe:	492b      	ldr	r1, [pc, #172]	; (6cac <_sercom_i2c_m_irq_handler+0xf4>)
    6c00:	4618      	mov	r0, r3
    6c02:	4b2b      	ldr	r3, [pc, #172]	; (6cb0 <_sercom_i2c_m_irq_handler+0xf8>)
    6c04:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    6c06:	bf00      	nop
    6c08:	68fb      	ldr	r3, [r7, #12]
    6c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6c0e:	2b00      	cmp	r3, #0
    6c10:	d126      	bne.n	6c60 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6c12:	687b      	ldr	r3, [r7, #4]
    6c14:	461a      	mov	r2, r3
    6c16:	68f9      	ldr	r1, [r7, #12]
    6c18:	6938      	ldr	r0, [r7, #16]
    6c1a:	4b26      	ldr	r3, [pc, #152]	; (6cb4 <_sercom_i2c_m_irq_handler+0xfc>)
    6c1c:	4798      	blx	r3
    6c1e:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6c20:	697b      	ldr	r3, [r7, #20]
    6c22:	2b00      	cmp	r3, #0
    6c24:	d11b      	bne.n	6c5e <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6c26:	68fb      	ldr	r3, [r7, #12]
    6c28:	f003 0301 	and.w	r3, r3, #1
    6c2c:	2b00      	cmp	r3, #0
    6c2e:	d008      	beq.n	6c42 <_sercom_i2c_m_irq_handler+0x8a>
    6c30:	687b      	ldr	r3, [r7, #4]
    6c32:	699b      	ldr	r3, [r3, #24]
    6c34:	2b00      	cmp	r3, #0
    6c36:	d004      	beq.n	6c42 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6c38:	687b      	ldr	r3, [r7, #4]
    6c3a:	699b      	ldr	r3, [r3, #24]
    6c3c:	6878      	ldr	r0, [r7, #4]
    6c3e:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6c40:	e02e      	b.n	6ca0 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6c42:	68fb      	ldr	r3, [r7, #12]
    6c44:	f003 0302 	and.w	r3, r3, #2
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d029      	beq.n	6ca0 <_sercom_i2c_m_irq_handler+0xe8>
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	69db      	ldr	r3, [r3, #28]
    6c50:	2b00      	cmp	r3, #0
    6c52:	d025      	beq.n	6ca0 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6c54:	687b      	ldr	r3, [r7, #4]
    6c56:	69db      	ldr	r3, [r3, #28]
    6c58:	6878      	ldr	r0, [r7, #4]
    6c5a:	4798      	blx	r3
		return;
    6c5c:	e020      	b.n	6ca0 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    6c5e:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6c60:	687b      	ldr	r3, [r7, #4]
    6c62:	885b      	ldrh	r3, [r3, #2]
    6c64:	b29b      	uxth	r3, r3
    6c66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6c6a:	b29a      	uxth	r2, r3
    6c6c:	687b      	ldr	r3, [r7, #4]
    6c6e:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    6c70:	687b      	ldr	r3, [r7, #4]
    6c72:	695b      	ldr	r3, [r3, #20]
    6c74:	2b00      	cmp	r3, #0
    6c76:	d014      	beq.n	6ca2 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6c78:	697b      	ldr	r3, [r7, #20]
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	d005      	beq.n	6c8a <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    6c7e:	687b      	ldr	r3, [r7, #4]
    6c80:	695b      	ldr	r3, [r3, #20]
    6c82:	6979      	ldr	r1, [r7, #20]
    6c84:	6878      	ldr	r0, [r7, #4]
    6c86:	4798      	blx	r3
    6c88:	e005      	b.n	6c96 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6c8a:	687b      	ldr	r3, [r7, #4]
    6c8c:	695b      	ldr	r3, [r3, #20]
    6c8e:	f06f 0104 	mvn.w	r1, #4
    6c92:	6878      	ldr	r0, [r7, #4]
    6c94:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    6c96:	2180      	movs	r1, #128	; 0x80
    6c98:	6938      	ldr	r0, [r7, #16]
    6c9a:	4b07      	ldr	r3, [pc, #28]	; (6cb8 <_sercom_i2c_m_irq_handler+0x100>)
    6c9c:	4798      	blx	r3
    6c9e:	e000      	b.n	6ca2 <_sercom_i2c_m_irq_handler+0xea>
		return;
    6ca0:	bf00      	nop
	}
}
    6ca2:	3718      	adds	r7, #24
    6ca4:	46bd      	mov	sp, r7
    6ca6:	bd80      	pop	{r7, pc}
    6ca8:	00006339 	.word	0x00006339
    6cac:	00011da0 	.word	0x00011da0
    6cb0:	00003cad 	.word	0x00003cad
    6cb4:	00006989 	.word	0x00006989
    6cb8:	00006353 	.word	0x00006353

00006cbc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6cbc:	b580      	push	{r7, lr}
    6cbe:	b082      	sub	sp, #8
    6cc0:	af00      	add	r7, sp, #0
    6cc2:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6cc4:	6878      	ldr	r0, [r7, #4]
    6cc6:	4b05      	ldr	r3, [pc, #20]	; (6cdc <_sercom_get_irq_num+0x20>)
    6cc8:	4798      	blx	r3
    6cca:	4603      	mov	r3, r0
    6ccc:	009b      	lsls	r3, r3, #2
    6cce:	b2db      	uxtb	r3, r3
    6cd0:	332e      	adds	r3, #46	; 0x2e
    6cd2:	b2db      	uxtb	r3, r3
}
    6cd4:	4618      	mov	r0, r3
    6cd6:	3708      	adds	r7, #8
    6cd8:	46bd      	mov	sp, r7
    6cda:	bd80      	pop	{r7, pc}
    6cdc:	0000687d 	.word	0x0000687d

00006ce0 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6ce0:	b580      	push	{r7, lr}
    6ce2:	b086      	sub	sp, #24
    6ce4:	af00      	add	r7, sp, #0
    6ce6:	6078      	str	r0, [r7, #4]
    6ce8:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    6cea:	687b      	ldr	r3, [r7, #4]
    6cec:	2b00      	cmp	r3, #0
    6cee:	bf14      	ite	ne
    6cf0:	2301      	movne	r3, #1
    6cf2:	2300      	moveq	r3, #0
    6cf4:	b2db      	uxtb	r3, r3
    6cf6:	f240 4292 	movw	r2, #1170	; 0x492
    6cfa:	491d      	ldr	r1, [pc, #116]	; (6d70 <_i2c_m_async_init+0x90>)
    6cfc:	4618      	mov	r0, r3
    6cfe:	4b1d      	ldr	r3, [pc, #116]	; (6d74 <_i2c_m_async_init+0x94>)
    6d00:	4798      	blx	r3

	i2c_dev->hw = hw;
    6d02:	687b      	ldr	r3, [r7, #4]
    6d04:	683a      	ldr	r2, [r7, #0]
    6d06:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6d08:	687b      	ldr	r3, [r7, #4]
    6d0a:	6839      	ldr	r1, [r7, #0]
    6d0c:	4618      	mov	r0, r3
    6d0e:	4b1a      	ldr	r3, [pc, #104]	; (6d78 <_i2c_m_async_init+0x98>)
    6d10:	4798      	blx	r3
    6d12:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6d14:	68fb      	ldr	r3, [r7, #12]
    6d16:	2b00      	cmp	r3, #0
    6d18:	d001      	beq.n	6d1e <_i2c_m_async_init+0x3e>
		return init_status;
    6d1a:	68fb      	ldr	r3, [r7, #12]
    6d1c:	e024      	b.n	6d68 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    6d1e:	6879      	ldr	r1, [r7, #4]
    6d20:	6838      	ldr	r0, [r7, #0]
    6d22:	4b16      	ldr	r3, [pc, #88]	; (6d7c <_i2c_m_async_init+0x9c>)
    6d24:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6d26:	6838      	ldr	r0, [r7, #0]
    6d28:	4b15      	ldr	r3, [pc, #84]	; (6d80 <_i2c_m_async_init+0xa0>)
    6d2a:	4798      	blx	r3
    6d2c:	4603      	mov	r3, r0
    6d2e:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6d30:	2300      	movs	r3, #0
    6d32:	613b      	str	r3, [r7, #16]
    6d34:	e014      	b.n	6d60 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6d36:	7dfb      	ldrb	r3, [r7, #23]
    6d38:	b21b      	sxth	r3, r3
    6d3a:	4618      	mov	r0, r3
    6d3c:	4b11      	ldr	r3, [pc, #68]	; (6d84 <_i2c_m_async_init+0xa4>)
    6d3e:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6d40:	7dfb      	ldrb	r3, [r7, #23]
    6d42:	b21b      	sxth	r3, r3
    6d44:	4618      	mov	r0, r3
    6d46:	4b10      	ldr	r3, [pc, #64]	; (6d88 <_i2c_m_async_init+0xa8>)
    6d48:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    6d4a:	7dfb      	ldrb	r3, [r7, #23]
    6d4c:	b21b      	sxth	r3, r3
    6d4e:	4618      	mov	r0, r3
    6d50:	4b0e      	ldr	r3, [pc, #56]	; (6d8c <_i2c_m_async_init+0xac>)
    6d52:	4798      	blx	r3
		irq++;
    6d54:	7dfb      	ldrb	r3, [r7, #23]
    6d56:	3301      	adds	r3, #1
    6d58:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6d5a:	693b      	ldr	r3, [r7, #16]
    6d5c:	3301      	adds	r3, #1
    6d5e:	613b      	str	r3, [r7, #16]
    6d60:	693b      	ldr	r3, [r7, #16]
    6d62:	2b03      	cmp	r3, #3
    6d64:	d9e7      	bls.n	6d36 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6d66:	2300      	movs	r3, #0
}
    6d68:	4618      	mov	r0, r3
    6d6a:	3718      	adds	r7, #24
    6d6c:	46bd      	mov	sp, r7
    6d6e:	bd80      	pop	{r7, pc}
    6d70:	00011da0 	.word	0x00011da0
    6d74:	00003cad 	.word	0x00003cad
    6d78:	00007365 	.word	0x00007365
    6d7c:	000068d9 	.word	0x000068d9
    6d80:	00006cbd 	.word	0x00006cbd
    6d84:	000061ed 	.word	0x000061ed
    6d88:	00006231 	.word	0x00006231
    6d8c:	000061b1 	.word	0x000061b1

00006d90 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    6d90:	b590      	push	{r4, r7, lr}
    6d92:	b087      	sub	sp, #28
    6d94:	af00      	add	r7, sp, #0
    6d96:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6d98:	687b      	ldr	r3, [r7, #4]
    6d9a:	691b      	ldr	r3, [r3, #16]
    6d9c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6d9e:	687b      	ldr	r3, [r7, #4]
    6da0:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6da2:	6978      	ldr	r0, [r7, #20]
    6da4:	4b33      	ldr	r3, [pc, #204]	; (6e74 <_sercom_i2c_send_address+0xe4>)
    6da6:	4798      	blx	r3
    6da8:	4603      	mov	r3, r0
    6daa:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6dac:	687b      	ldr	r3, [r7, #4]
    6dae:	2b00      	cmp	r3, #0
    6db0:	bf14      	ite	ne
    6db2:	2301      	movne	r3, #1
    6db4:	2300      	moveq	r3, #0
    6db6:	b2db      	uxtb	r3, r3
    6db8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    6dbc:	492e      	ldr	r1, [pc, #184]	; (6e78 <_sercom_i2c_send_address+0xe8>)
    6dbe:	4618      	mov	r0, r3
    6dc0:	4b2e      	ldr	r3, [pc, #184]	; (6e7c <_sercom_i2c_send_address+0xec>)
    6dc2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6dc4:	693b      	ldr	r3, [r7, #16]
    6dc6:	685b      	ldr	r3, [r3, #4]
    6dc8:	2b01      	cmp	r3, #1
    6dca:	d106      	bne.n	6dda <_sercom_i2c_send_address+0x4a>
    6dcc:	68fb      	ldr	r3, [r7, #12]
    6dce:	2b00      	cmp	r3, #0
    6dd0:	d003      	beq.n	6dda <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6dd2:	6978      	ldr	r0, [r7, #20]
    6dd4:	4b2a      	ldr	r3, [pc, #168]	; (6e80 <_sercom_i2c_send_address+0xf0>)
    6dd6:	4798      	blx	r3
    6dd8:	e002      	b.n	6de0 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6dda:	6978      	ldr	r0, [r7, #20]
    6ddc:	4b29      	ldr	r3, [pc, #164]	; (6e84 <_sercom_i2c_send_address+0xf4>)
    6dde:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6de0:	693b      	ldr	r3, [r7, #16]
    6de2:	881b      	ldrh	r3, [r3, #0]
    6de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6de8:	2b00      	cmp	r3, #0
    6dea:	d022      	beq.n	6e32 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6dec:	693b      	ldr	r3, [r7, #16]
    6dee:	885b      	ldrh	r3, [r3, #2]
    6df0:	b29b      	uxth	r3, r3
    6df2:	f003 0301 	and.w	r3, r3, #1
    6df6:	2b00      	cmp	r3, #0
    6df8:	d007      	beq.n	6e0a <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6dfa:	693b      	ldr	r3, [r7, #16]
    6dfc:	885b      	ldrh	r3, [r3, #2]
    6dfe:	b29b      	uxth	r3, r3
    6e00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6e04:	b29a      	uxth	r2, r3
    6e06:	693b      	ldr	r3, [r7, #16]
    6e08:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6e0a:	693b      	ldr	r3, [r7, #16]
    6e0c:	881b      	ldrh	r3, [r3, #0]
    6e0e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6e10:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6e14:	401c      	ands	r4, r3
    6e16:	6978      	ldr	r0, [r7, #20]
    6e18:	4b1b      	ldr	r3, [pc, #108]	; (6e88 <_sercom_i2c_send_address+0xf8>)
    6e1a:	4798      	blx	r3
    6e1c:	4603      	mov	r3, r0
    6e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6e22:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6e28:	4619      	mov	r1, r3
    6e2a:	6978      	ldr	r0, [r7, #20]
    6e2c:	4b17      	ldr	r3, [pc, #92]	; (6e8c <_sercom_i2c_send_address+0xfc>)
    6e2e:	4798      	blx	r3
    6e30:	e01a      	b.n	6e68 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6e32:	693b      	ldr	r3, [r7, #16]
    6e34:	881b      	ldrh	r3, [r3, #0]
    6e36:	005b      	lsls	r3, r3, #1
    6e38:	b2db      	uxtb	r3, r3
    6e3a:	693a      	ldr	r2, [r7, #16]
    6e3c:	8852      	ldrh	r2, [r2, #2]
    6e3e:	b292      	uxth	r2, r2
    6e40:	f002 0201 	and.w	r2, r2, #1
    6e44:	2a00      	cmp	r2, #0
    6e46:	bf14      	ite	ne
    6e48:	2201      	movne	r2, #1
    6e4a:	2200      	moveq	r2, #0
    6e4c:	b2d2      	uxtb	r2, r2
    6e4e:	4313      	orrs	r3, r2
    6e50:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6e52:	6978      	ldr	r0, [r7, #20]
    6e54:	4b0c      	ldr	r3, [pc, #48]	; (6e88 <_sercom_i2c_send_address+0xf8>)
    6e56:	4798      	blx	r3
    6e58:	4603      	mov	r3, r0
    6e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6e5e:	4323      	orrs	r3, r4
    6e60:	4619      	mov	r1, r3
    6e62:	6978      	ldr	r0, [r7, #20]
    6e64:	4b09      	ldr	r3, [pc, #36]	; (6e8c <_sercom_i2c_send_address+0xfc>)
    6e66:	4798      	blx	r3
	}

	return ERR_NONE;
    6e68:	2300      	movs	r3, #0
}
    6e6a:	4618      	mov	r0, r3
    6e6c:	371c      	adds	r7, #28
    6e6e:	46bd      	mov	sp, r7
    6e70:	bd90      	pop	{r4, r7, pc}
    6e72:	bf00      	nop
    6e74:	00006421 	.word	0x00006421
    6e78:	00011da0 	.word	0x00011da0
    6e7c:	00003cad 	.word	0x00003cad
    6e80:	000065a9 	.word	0x000065a9
    6e84:	000065d1 	.word	0x000065d1
    6e88:	00006711 	.word	0x00006711
    6e8c:	000066ed 	.word	0x000066ed

00006e90 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    6e90:	b580      	push	{r7, lr}
    6e92:	b084      	sub	sp, #16
    6e94:	af00      	add	r7, sp, #0
    6e96:	6078      	str	r0, [r7, #4]
    6e98:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    6e9a:	687b      	ldr	r3, [r7, #4]
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	bf14      	ite	ne
    6ea0:	2301      	movne	r3, #1
    6ea2:	2300      	moveq	r3, #0
    6ea4:	b2db      	uxtb	r3, r3
    6ea6:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    6eaa:	492a      	ldr	r1, [pc, #168]	; (6f54 <_i2c_m_async_transfer+0xc4>)
    6eac:	4618      	mov	r0, r3
    6eae:	4b2a      	ldr	r3, [pc, #168]	; (6f58 <_i2c_m_async_transfer+0xc8>)
    6eb0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6eb2:	687b      	ldr	r3, [r7, #4]
    6eb4:	691b      	ldr	r3, [r3, #16]
    6eb6:	2b00      	cmp	r3, #0
    6eb8:	bf14      	ite	ne
    6eba:	2301      	movne	r3, #1
    6ebc:	2300      	moveq	r3, #0
    6ebe:	b2db      	uxtb	r3, r3
    6ec0:	f240 42e9 	movw	r2, #1257	; 0x4e9
    6ec4:	4923      	ldr	r1, [pc, #140]	; (6f54 <_i2c_m_async_transfer+0xc4>)
    6ec6:	4618      	mov	r0, r3
    6ec8:	4b23      	ldr	r3, [pc, #140]	; (6f58 <_i2c_m_async_transfer+0xc8>)
    6eca:	4798      	blx	r3
	ASSERT(msg);
    6ecc:	683b      	ldr	r3, [r7, #0]
    6ece:	2b00      	cmp	r3, #0
    6ed0:	bf14      	ite	ne
    6ed2:	2301      	movne	r3, #1
    6ed4:	2300      	moveq	r3, #0
    6ed6:	b2db      	uxtb	r3, r3
    6ed8:	f240 42ea 	movw	r2, #1258	; 0x4ea
    6edc:	491d      	ldr	r1, [pc, #116]	; (6f54 <_i2c_m_async_transfer+0xc4>)
    6ede:	4618      	mov	r0, r3
    6ee0:	4b1d      	ldr	r3, [pc, #116]	; (6f58 <_i2c_m_async_transfer+0xc8>)
    6ee2:	4798      	blx	r3

	if (msg->len == 0) {
    6ee4:	683b      	ldr	r3, [r7, #0]
    6ee6:	685b      	ldr	r3, [r3, #4]
    6ee8:	2b00      	cmp	r3, #0
    6eea:	d101      	bne.n	6ef0 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6eec:	2300      	movs	r3, #0
    6eee:	e02d      	b.n	6f4c <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6ef0:	687b      	ldr	r3, [r7, #4]
    6ef2:	885b      	ldrh	r3, [r3, #2]
    6ef4:	b29b      	uxth	r3, r3
    6ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6efa:	2b00      	cmp	r3, #0
    6efc:	d002      	beq.n	6f04 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    6efe:	f06f 0303 	mvn.w	r3, #3
    6f02:	e023      	b.n	6f4c <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6f04:	683b      	ldr	r3, [r7, #0]
    6f06:	885b      	ldrh	r3, [r3, #2]
    6f08:	b29b      	uxth	r3, r3
    6f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6f0e:	b29a      	uxth	r2, r3
    6f10:	683b      	ldr	r3, [r7, #0]
    6f12:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6f14:	687b      	ldr	r3, [r7, #4]
    6f16:	683a      	ldr	r2, [r7, #0]
    6f18:	ca07      	ldmia	r2, {r0, r1, r2}
    6f1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6f1e:	687b      	ldr	r3, [r7, #4]
    6f20:	691b      	ldr	r3, [r3, #16]
    6f22:	4618      	mov	r0, r3
    6f24:	4b0d      	ldr	r3, [pc, #52]	; (6f5c <_i2c_m_async_transfer+0xcc>)
    6f26:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6f28:	6878      	ldr	r0, [r7, #4]
    6f2a:	4b0d      	ldr	r3, [pc, #52]	; (6f60 <_i2c_m_async_transfer+0xd0>)
    6f2c:	4798      	blx	r3
    6f2e:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6f30:	68fb      	ldr	r3, [r7, #12]
    6f32:	2b00      	cmp	r3, #0
    6f34:	d009      	beq.n	6f4a <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6f36:	687b      	ldr	r3, [r7, #4]
    6f38:	885b      	ldrh	r3, [r3, #2]
    6f3a:	b29b      	uxth	r3, r3
    6f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6f40:	b29a      	uxth	r2, r3
    6f42:	687b      	ldr	r3, [r7, #4]
    6f44:	805a      	strh	r2, [r3, #2]

		return ret;
    6f46:	68fb      	ldr	r3, [r7, #12]
    6f48:	e000      	b.n	6f4c <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6f4a:	2300      	movs	r3, #0
}
    6f4c:	4618      	mov	r0, r3
    6f4e:	3710      	adds	r7, #16
    6f50:	46bd      	mov	sp, r7
    6f52:	bd80      	pop	{r7, pc}
    6f54:	00011da0 	.word	0x00011da0
    6f58:	00003cad 	.word	0x00003cad
    6f5c:	00006559 	.word	0x00006559
    6f60:	00006d91 	.word	0x00006d91

00006f64 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6f64:	b480      	push	{r7}
    6f66:	b085      	sub	sp, #20
    6f68:	af00      	add	r7, sp, #0
    6f6a:	60f8      	str	r0, [r7, #12]
    6f6c:	460b      	mov	r3, r1
    6f6e:	607a      	str	r2, [r7, #4]
    6f70:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6f72:	7afb      	ldrb	r3, [r7, #11]
    6f74:	2b01      	cmp	r3, #1
    6f76:	d008      	beq.n	6f8a <_i2c_m_async_register_callback+0x26>
    6f78:	2b02      	cmp	r3, #2
    6f7a:	d00a      	beq.n	6f92 <_i2c_m_async_register_callback+0x2e>
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d000      	beq.n	6f82 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    6f80:	e00b      	b.n	6f9a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    6f82:	68fb      	ldr	r3, [r7, #12]
    6f84:	687a      	ldr	r2, [r7, #4]
    6f86:	615a      	str	r2, [r3, #20]
		break;
    6f88:	e007      	b.n	6f9a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6f8a:	68fb      	ldr	r3, [r7, #12]
    6f8c:	687a      	ldr	r2, [r7, #4]
    6f8e:	619a      	str	r2, [r3, #24]
		break;
    6f90:	e003      	b.n	6f9a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    6f92:	68fb      	ldr	r3, [r7, #12]
    6f94:	687a      	ldr	r2, [r7, #4]
    6f96:	61da      	str	r2, [r3, #28]
		break;
    6f98:	bf00      	nop
	}

	return ERR_NONE;
    6f9a:	2300      	movs	r3, #0
}
    6f9c:	4618      	mov	r0, r3
    6f9e:	3714      	adds	r7, #20
    6fa0:	46bd      	mov	sp, r7
    6fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fa6:	4770      	bx	lr

00006fa8 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6fa8:	b580      	push	{r7, lr}
    6faa:	b082      	sub	sp, #8
    6fac:	af00      	add	r7, sp, #0
    6fae:	6078      	str	r0, [r7, #4]
    6fb0:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6fb2:	687b      	ldr	r3, [r7, #4]
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	bf14      	ite	ne
    6fb8:	2301      	movne	r3, #1
    6fba:	2300      	moveq	r3, #0
    6fbc:	b2db      	uxtb	r3, r3
    6fbe:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    6fc2:	4908      	ldr	r1, [pc, #32]	; (6fe4 <_i2c_m_sync_init+0x3c>)
    6fc4:	4618      	mov	r0, r3
    6fc6:	4b08      	ldr	r3, [pc, #32]	; (6fe8 <_i2c_m_sync_init+0x40>)
    6fc8:	4798      	blx	r3

	i2c_dev->hw = hw;
    6fca:	687b      	ldr	r3, [r7, #4]
    6fcc:	683a      	ldr	r2, [r7, #0]
    6fce:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6fd0:	687b      	ldr	r3, [r7, #4]
    6fd2:	6839      	ldr	r1, [r7, #0]
    6fd4:	4618      	mov	r0, r3
    6fd6:	4b05      	ldr	r3, [pc, #20]	; (6fec <_i2c_m_sync_init+0x44>)
    6fd8:	4798      	blx	r3
    6fda:	4603      	mov	r3, r0
}
    6fdc:	4618      	mov	r0, r3
    6fde:	3708      	adds	r7, #8
    6fe0:	46bd      	mov	sp, r7
    6fe2:	bd80      	pop	{r7, pc}
    6fe4:	00011da0 	.word	0x00011da0
    6fe8:	00003cad 	.word	0x00003cad
    6fec:	00007365 	.word	0x00007365

00006ff0 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6ff0:	b580      	push	{r7, lr}
    6ff2:	b082      	sub	sp, #8
    6ff4:	af00      	add	r7, sp, #0
    6ff6:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6ff8:	687b      	ldr	r3, [r7, #4]
    6ffa:	2b00      	cmp	r3, #0
    6ffc:	bf14      	ite	ne
    6ffe:	2301      	movne	r3, #1
    7000:	2300      	moveq	r3, #0
    7002:	b2db      	uxtb	r3, r3
    7004:	f240 5265 	movw	r2, #1381	; 0x565
    7008:	4906      	ldr	r1, [pc, #24]	; (7024 <_i2c_m_sync_enable+0x34>)
    700a:	4618      	mov	r0, r3
    700c:	4b06      	ldr	r3, [pc, #24]	; (7028 <_i2c_m_sync_enable+0x38>)
    700e:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    7010:	687b      	ldr	r3, [r7, #4]
    7012:	691b      	ldr	r3, [r3, #16]
    7014:	4618      	mov	r0, r3
    7016:	4b05      	ldr	r3, [pc, #20]	; (702c <_i2c_m_sync_enable+0x3c>)
    7018:	4798      	blx	r3
    701a:	4603      	mov	r3, r0
}
    701c:	4618      	mov	r0, r3
    701e:	3708      	adds	r7, #8
    7020:	46bd      	mov	sp, r7
    7022:	bd80      	pop	{r7, pc}
    7024:	00011da0 	.word	0x00011da0
    7028:	00003cad 	.word	0x00003cad
    702c:	000072d9 	.word	0x000072d9

00007030 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    7030:	b580      	push	{r7, lr}
    7032:	b084      	sub	sp, #16
    7034:	af00      	add	r7, sp, #0
    7036:	6078      	str	r0, [r7, #4]
    7038:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    703a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    703e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	691b      	ldr	r3, [r3, #16]
    7044:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    7046:	68b8      	ldr	r0, [r7, #8]
    7048:	4b0f      	ldr	r3, [pc, #60]	; (7088 <_sercom_i2c_sync_wait_bus+0x58>)
    704a:	4798      	blx	r3
    704c:	4603      	mov	r3, r0
    704e:	461a      	mov	r2, r3
    7050:	683b      	ldr	r3, [r7, #0]
    7052:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    7054:	68fb      	ldr	r3, [r7, #12]
    7056:	1e5a      	subs	r2, r3, #1
    7058:	60fa      	str	r2, [r7, #12]
    705a:	2b00      	cmp	r3, #0
    705c:	d102      	bne.n	7064 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    705e:	f06f 0304 	mvn.w	r3, #4
    7062:	e00c      	b.n	707e <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    7064:	683b      	ldr	r3, [r7, #0]
    7066:	681b      	ldr	r3, [r3, #0]
    7068:	f003 0301 	and.w	r3, r3, #1
    706c:	2b00      	cmp	r3, #0
    706e:	d105      	bne.n	707c <_sercom_i2c_sync_wait_bus+0x4c>
    7070:	683b      	ldr	r3, [r7, #0]
    7072:	681b      	ldr	r3, [r3, #0]
    7074:	f003 0302 	and.w	r3, r3, #2
    7078:	2b00      	cmp	r3, #0
    707a:	d0e4      	beq.n	7046 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    707c:	2300      	movs	r3, #0
}
    707e:	4618      	mov	r0, r3
    7080:	3710      	adds	r7, #16
    7082:	46bd      	mov	sp, r7
    7084:	bd80      	pop	{r7, pc}
    7086:	bf00      	nop
    7088:	00006339 	.word	0x00006339

0000708c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    708c:	b590      	push	{r4, r7, lr}
    708e:	b087      	sub	sp, #28
    7090:	af00      	add	r7, sp, #0
    7092:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    7094:	687b      	ldr	r3, [r7, #4]
    7096:	691b      	ldr	r3, [r3, #16]
    7098:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    709a:	687b      	ldr	r3, [r7, #4]
    709c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    709e:	6978      	ldr	r0, [r7, #20]
    70a0:	4b39      	ldr	r3, [pc, #228]	; (7188 <_sercom_i2c_sync_send_address+0xfc>)
    70a2:	4798      	blx	r3
    70a4:	4603      	mov	r3, r0
    70a6:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    70a8:	687b      	ldr	r3, [r7, #4]
    70aa:	2b00      	cmp	r3, #0
    70ac:	bf14      	ite	ne
    70ae:	2301      	movne	r3, #1
    70b0:	2300      	moveq	r3, #0
    70b2:	b2db      	uxtb	r3, r3
    70b4:	f240 52d5 	movw	r2, #1493	; 0x5d5
    70b8:	4934      	ldr	r1, [pc, #208]	; (718c <_sercom_i2c_sync_send_address+0x100>)
    70ba:	4618      	mov	r0, r3
    70bc:	4b34      	ldr	r3, [pc, #208]	; (7190 <_sercom_i2c_sync_send_address+0x104>)
    70be:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    70c0:	693b      	ldr	r3, [r7, #16]
    70c2:	685b      	ldr	r3, [r3, #4]
    70c4:	2b01      	cmp	r3, #1
    70c6:	d106      	bne.n	70d6 <_sercom_i2c_sync_send_address+0x4a>
    70c8:	68fb      	ldr	r3, [r7, #12]
    70ca:	2b00      	cmp	r3, #0
    70cc:	d003      	beq.n	70d6 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    70ce:	6978      	ldr	r0, [r7, #20]
    70d0:	4b30      	ldr	r3, [pc, #192]	; (7194 <_sercom_i2c_sync_send_address+0x108>)
    70d2:	4798      	blx	r3
    70d4:	e002      	b.n	70dc <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    70d6:	6978      	ldr	r0, [r7, #20]
    70d8:	4b2f      	ldr	r3, [pc, #188]	; (7198 <_sercom_i2c_sync_send_address+0x10c>)
    70da:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    70dc:	693b      	ldr	r3, [r7, #16]
    70de:	881b      	ldrh	r3, [r3, #0]
    70e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    70e4:	2b00      	cmp	r3, #0
    70e6:	d022      	beq.n	712e <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    70e8:	693b      	ldr	r3, [r7, #16]
    70ea:	885b      	ldrh	r3, [r3, #2]
    70ec:	b29b      	uxth	r3, r3
    70ee:	f003 0301 	and.w	r3, r3, #1
    70f2:	2b00      	cmp	r3, #0
    70f4:	d007      	beq.n	7106 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    70f6:	693b      	ldr	r3, [r7, #16]
    70f8:	885b      	ldrh	r3, [r3, #2]
    70fa:	b29b      	uxth	r3, r3
    70fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    7100:	b29a      	uxth	r2, r3
    7102:	693b      	ldr	r3, [r7, #16]
    7104:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    7106:	693b      	ldr	r3, [r7, #16]
    7108:	881b      	ldrh	r3, [r3, #0]
    710a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    710c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    7110:	401c      	ands	r4, r3
    7112:	6978      	ldr	r0, [r7, #20]
    7114:	4b21      	ldr	r3, [pc, #132]	; (719c <_sercom_i2c_sync_send_address+0x110>)
    7116:	4798      	blx	r3
    7118:	4603      	mov	r3, r0
    711a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    711e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    7120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7124:	4619      	mov	r1, r3
    7126:	6978      	ldr	r0, [r7, #20]
    7128:	4b1d      	ldr	r3, [pc, #116]	; (71a0 <_sercom_i2c_sync_send_address+0x114>)
    712a:	4798      	blx	r3
    712c:	e01a      	b.n	7164 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    712e:	693b      	ldr	r3, [r7, #16]
    7130:	881b      	ldrh	r3, [r3, #0]
    7132:	005b      	lsls	r3, r3, #1
    7134:	b2db      	uxtb	r3, r3
    7136:	693a      	ldr	r2, [r7, #16]
    7138:	8852      	ldrh	r2, [r2, #2]
    713a:	b292      	uxth	r2, r2
    713c:	f002 0201 	and.w	r2, r2, #1
    7140:	2a00      	cmp	r2, #0
    7142:	bf14      	ite	ne
    7144:	2201      	movne	r2, #1
    7146:	2200      	moveq	r2, #0
    7148:	b2d2      	uxtb	r2, r2
    714a:	4313      	orrs	r3, r2
    714c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    714e:	6978      	ldr	r0, [r7, #20]
    7150:	4b12      	ldr	r3, [pc, #72]	; (719c <_sercom_i2c_sync_send_address+0x110>)
    7152:	4798      	blx	r3
    7154:	4603      	mov	r3, r0
    7156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    715a:	4323      	orrs	r3, r4
    715c:	4619      	mov	r1, r3
    715e:	6978      	ldr	r0, [r7, #20]
    7160:	4b0f      	ldr	r3, [pc, #60]	; (71a0 <_sercom_i2c_sync_send_address+0x114>)
    7162:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    7164:	f107 0308 	add.w	r3, r7, #8
    7168:	4619      	mov	r1, r3
    716a:	6878      	ldr	r0, [r7, #4]
    716c:	4b0d      	ldr	r3, [pc, #52]	; (71a4 <_sercom_i2c_sync_send_address+0x118>)
    716e:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    7170:	68bb      	ldr	r3, [r7, #8]
    7172:	693a      	ldr	r2, [r7, #16]
    7174:	4619      	mov	r1, r3
    7176:	6978      	ldr	r0, [r7, #20]
    7178:	4b0b      	ldr	r3, [pc, #44]	; (71a8 <_sercom_i2c_sync_send_address+0x11c>)
    717a:	4798      	blx	r3
    717c:	4603      	mov	r3, r0
}
    717e:	4618      	mov	r0, r3
    7180:	371c      	adds	r7, #28
    7182:	46bd      	mov	sp, r7
    7184:	bd90      	pop	{r4, r7, pc}
    7186:	bf00      	nop
    7188:	00006421 	.word	0x00006421
    718c:	00011da0 	.word	0x00011da0
    7190:	00003cad 	.word	0x00003cad
    7194:	000065a9 	.word	0x000065a9
    7198:	000065d1 	.word	0x000065d1
    719c:	00006711 	.word	0x00006711
    71a0:	000066ed 	.word	0x000066ed
    71a4:	00007031 	.word	0x00007031
    71a8:	00006989 	.word	0x00006989

000071ac <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    71ac:	b580      	push	{r7, lr}
    71ae:	b086      	sub	sp, #24
    71b0:	af00      	add	r7, sp, #0
    71b2:	6078      	str	r0, [r7, #4]
    71b4:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    71b6:	687b      	ldr	r3, [r7, #4]
    71b8:	691b      	ldr	r3, [r3, #16]
    71ba:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    71bc:	687b      	ldr	r3, [r7, #4]
    71be:	2b00      	cmp	r3, #0
    71c0:	bf14      	ite	ne
    71c2:	2301      	movne	r3, #1
    71c4:	2300      	moveq	r3, #0
    71c6:	b2db      	uxtb	r3, r3
    71c8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    71cc:	493b      	ldr	r1, [pc, #236]	; (72bc <_i2c_m_sync_transfer+0x110>)
    71ce:	4618      	mov	r0, r3
    71d0:	4b3b      	ldr	r3, [pc, #236]	; (72c0 <_i2c_m_sync_transfer+0x114>)
    71d2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    71d4:	687b      	ldr	r3, [r7, #4]
    71d6:	691b      	ldr	r3, [r3, #16]
    71d8:	2b00      	cmp	r3, #0
    71da:	bf14      	ite	ne
    71dc:	2301      	movne	r3, #1
    71de:	2300      	moveq	r3, #0
    71e0:	b2db      	uxtb	r3, r3
    71e2:	f240 6201 	movw	r2, #1537	; 0x601
    71e6:	4935      	ldr	r1, [pc, #212]	; (72bc <_i2c_m_sync_transfer+0x110>)
    71e8:	4618      	mov	r0, r3
    71ea:	4b35      	ldr	r3, [pc, #212]	; (72c0 <_i2c_m_sync_transfer+0x114>)
    71ec:	4798      	blx	r3
	ASSERT(msg);
    71ee:	683b      	ldr	r3, [r7, #0]
    71f0:	2b00      	cmp	r3, #0
    71f2:	bf14      	ite	ne
    71f4:	2301      	movne	r3, #1
    71f6:	2300      	moveq	r3, #0
    71f8:	b2db      	uxtb	r3, r3
    71fa:	f240 6202 	movw	r2, #1538	; 0x602
    71fe:	492f      	ldr	r1, [pc, #188]	; (72bc <_i2c_m_sync_transfer+0x110>)
    7200:	4618      	mov	r0, r3
    7202:	4b2f      	ldr	r3, [pc, #188]	; (72c0 <_i2c_m_sync_transfer+0x114>)
    7204:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7206:	687b      	ldr	r3, [r7, #4]
    7208:	885b      	ldrh	r3, [r3, #2]
    720a:	b29b      	uxth	r3, r3
    720c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7210:	2b00      	cmp	r3, #0
    7212:	d002      	beq.n	721a <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    7214:	f06f 0305 	mvn.w	r3, #5
    7218:	e04c      	b.n	72b4 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    721a:	683b      	ldr	r3, [r7, #0]
    721c:	885b      	ldrh	r3, [r3, #2]
    721e:	b29b      	uxth	r3, r3
    7220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7224:	b29a      	uxth	r2, r3
    7226:	683b      	ldr	r3, [r7, #0]
    7228:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    722a:	687b      	ldr	r3, [r7, #4]
    722c:	683a      	ldr	r2, [r7, #0]
    722e:	ca07      	ldmia	r2, {r0, r1, r2}
    7230:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    7234:	6938      	ldr	r0, [r7, #16]
    7236:	4b23      	ldr	r3, [pc, #140]	; (72c4 <_i2c_m_sync_transfer+0x118>)
    7238:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    723a:	6878      	ldr	r0, [r7, #4]
    723c:	4b22      	ldr	r3, [pc, #136]	; (72c8 <_i2c_m_sync_transfer+0x11c>)
    723e:	4798      	blx	r3
    7240:	6178      	str	r0, [r7, #20]

	if (ret) {
    7242:	697b      	ldr	r3, [r7, #20]
    7244:	2b00      	cmp	r3, #0
    7246:	d02d      	beq.n	72a4 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7248:	687b      	ldr	r3, [r7, #4]
    724a:	885b      	ldrh	r3, [r3, #2]
    724c:	b29b      	uxth	r3, r3
    724e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7252:	b29a      	uxth	r2, r3
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	805a      	strh	r2, [r3, #2]

		return ret;
    7258:	697b      	ldr	r3, [r7, #20]
    725a:	e02b      	b.n	72b4 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    725c:	f107 030c 	add.w	r3, r7, #12
    7260:	4619      	mov	r1, r3
    7262:	6878      	ldr	r0, [r7, #4]
    7264:	4b19      	ldr	r3, [pc, #100]	; (72cc <_i2c_m_sync_transfer+0x120>)
    7266:	4798      	blx	r3
    7268:	6178      	str	r0, [r7, #20]

		if (ret) {
    726a:	697b      	ldr	r3, [r7, #20]
    726c:	2b00      	cmp	r3, #0
    726e:	d012      	beq.n	7296 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    7270:	683b      	ldr	r3, [r7, #0]
    7272:	885b      	ldrh	r3, [r3, #2]
    7274:	b29b      	uxth	r3, r3
    7276:	b21b      	sxth	r3, r3
    7278:	2b00      	cmp	r3, #0
    727a:	da02      	bge.n	7282 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    727c:	6938      	ldr	r0, [r7, #16]
    727e:	4b14      	ldr	r3, [pc, #80]	; (72d0 <_i2c_m_sync_transfer+0x124>)
    7280:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7282:	687b      	ldr	r3, [r7, #4]
    7284:	885b      	ldrh	r3, [r3, #2]
    7286:	b29b      	uxth	r3, r3
    7288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    728c:	b29a      	uxth	r2, r3
    728e:	687b      	ldr	r3, [r7, #4]
    7290:	805a      	strh	r2, [r3, #2]

			return ret;
    7292:	697b      	ldr	r3, [r7, #20]
    7294:	e00e      	b.n	72b4 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    7296:	68fb      	ldr	r3, [r7, #12]
    7298:	687a      	ldr	r2, [r7, #4]
    729a:	4619      	mov	r1, r3
    729c:	6938      	ldr	r0, [r7, #16]
    729e:	4b0d      	ldr	r3, [pc, #52]	; (72d4 <_i2c_m_sync_transfer+0x128>)
    72a0:	4798      	blx	r3
    72a2:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    72a4:	687b      	ldr	r3, [r7, #4]
    72a6:	885b      	ldrh	r3, [r3, #2]
    72a8:	b29b      	uxth	r3, r3
    72aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
    72ae:	2b00      	cmp	r3, #0
    72b0:	d1d4      	bne.n	725c <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    72b2:	697b      	ldr	r3, [r7, #20]
}
    72b4:	4618      	mov	r0, r3
    72b6:	3718      	adds	r7, #24
    72b8:	46bd      	mov	sp, r7
    72ba:	bd80      	pop	{r7, pc}
    72bc:	00011da0 	.word	0x00011da0
    72c0:	00003cad 	.word	0x00003cad
    72c4:	00006559 	.word	0x00006559
    72c8:	0000708d 	.word	0x0000708d
    72cc:	00007031 	.word	0x00007031
    72d0:	0000696d 	.word	0x0000696d
    72d4:	00006989 	.word	0x00006989

000072d8 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    72d8:	b580      	push	{r7, lr}
    72da:	b084      	sub	sp, #16
    72dc:	af00      	add	r7, sp, #0
    72de:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    72e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    72e4:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    72e6:	2304      	movs	r3, #4
    72e8:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    72ea:	687b      	ldr	r3, [r7, #4]
    72ec:	2b00      	cmp	r3, #0
    72ee:	bf14      	ite	ne
    72f0:	2301      	movne	r3, #1
    72f2:	2300      	moveq	r3, #0
    72f4:	b2db      	uxtb	r3, r3
    72f6:	f240 6235 	movw	r2, #1589	; 0x635
    72fa:	4915      	ldr	r1, [pc, #84]	; (7350 <_i2c_m_enable_implementation+0x78>)
    72fc:	4618      	mov	r0, r3
    72fe:	4b15      	ldr	r3, [pc, #84]	; (7354 <_i2c_m_enable_implementation+0x7c>)
    7300:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    7302:	6878      	ldr	r0, [r7, #4]
    7304:	4b14      	ldr	r3, [pc, #80]	; (7358 <_i2c_m_enable_implementation+0x80>)
    7306:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7308:	e016      	b.n	7338 <_i2c_m_enable_implementation+0x60>
		timeout--;
    730a:	68fb      	ldr	r3, [r7, #12]
    730c:	3b01      	subs	r3, #1
    730e:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    7310:	68fb      	ldr	r3, [r7, #12]
    7312:	2b00      	cmp	r3, #0
    7314:	dc10      	bgt.n	7338 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    7316:	68bb      	ldr	r3, [r7, #8]
    7318:	3b01      	subs	r3, #1
    731a:	60bb      	str	r3, [r7, #8]
    731c:	68bb      	ldr	r3, [r7, #8]
    731e:	2b00      	cmp	r3, #0
    7320:	d007      	beq.n	7332 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    7322:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7326:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    7328:	2110      	movs	r1, #16
    732a:	6878      	ldr	r0, [r7, #4]
    732c:	4b0b      	ldr	r3, [pc, #44]	; (735c <_i2c_m_enable_implementation+0x84>)
    732e:	4798      	blx	r3
    7330:	e002      	b.n	7338 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    7332:	f06f 0305 	mvn.w	r3, #5
    7336:	e006      	b.n	7346 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7338:	6878      	ldr	r0, [r7, #4]
    733a:	4b09      	ldr	r3, [pc, #36]	; (7360 <_i2c_m_enable_implementation+0x88>)
    733c:	4798      	blx	r3
    733e:	4603      	mov	r3, r0
    7340:	2b01      	cmp	r3, #1
    7342:	d1e2      	bne.n	730a <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    7344:	2300      	movs	r3, #0
}
    7346:	4618      	mov	r0, r3
    7348:	3710      	adds	r7, #16
    734a:	46bd      	mov	sp, r7
    734c:	bd80      	pop	{r7, pc}
    734e:	bf00      	nop
    7350:	00011da0 	.word	0x00011da0
    7354:	00003cad 	.word	0x00003cad
    7358:	000063d1 	.word	0x000063d1
    735c:	00006855 	.word	0x00006855
    7360:	00006805 	.word	0x00006805

00007364 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    7364:	b580      	push	{r7, lr}
    7366:	b084      	sub	sp, #16
    7368:	af00      	add	r7, sp, #0
    736a:	6078      	str	r0, [r7, #4]
    736c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    736e:	6838      	ldr	r0, [r7, #0]
    7370:	4b42      	ldr	r3, [pc, #264]	; (747c <_i2c_m_sync_init_impl+0x118>)
    7372:	4798      	blx	r3
    7374:	4603      	mov	r3, r0
    7376:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7378:	2101      	movs	r1, #1
    737a:	6838      	ldr	r0, [r7, #0]
    737c:	4b40      	ldr	r3, [pc, #256]	; (7480 <_i2c_m_sync_init_impl+0x11c>)
    737e:	4798      	blx	r3
    7380:	4603      	mov	r3, r0
    7382:	f083 0301 	eor.w	r3, r3, #1
    7386:	b2db      	uxtb	r3, r3
    7388:	2b00      	cmp	r3, #0
    738a:	d020      	beq.n	73ce <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    738c:	7bfa      	ldrb	r2, [r7, #15]
    738e:	493d      	ldr	r1, [pc, #244]	; (7484 <_i2c_m_sync_init_impl+0x120>)
    7390:	4613      	mov	r3, r2
    7392:	005b      	lsls	r3, r3, #1
    7394:	4413      	add	r3, r2
    7396:	00db      	lsls	r3, r3, #3
    7398:	440b      	add	r3, r1
    739a:	3304      	adds	r3, #4
    739c:	681b      	ldr	r3, [r3, #0]
    739e:	f003 031c 	and.w	r3, r3, #28
    73a2:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    73a4:	2102      	movs	r1, #2
    73a6:	6838      	ldr	r0, [r7, #0]
    73a8:	4b37      	ldr	r3, [pc, #220]	; (7488 <_i2c_m_sync_init_impl+0x124>)
    73aa:	4798      	blx	r3
    73ac:	4603      	mov	r3, r0
    73ae:	2b00      	cmp	r3, #0
    73b0:	d006      	beq.n	73c0 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    73b2:	6838      	ldr	r0, [r7, #0]
    73b4:	4b35      	ldr	r3, [pc, #212]	; (748c <_i2c_m_sync_init_impl+0x128>)
    73b6:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    73b8:	2102      	movs	r1, #2
    73ba:	6838      	ldr	r0, [r7, #0]
    73bc:	4b34      	ldr	r3, [pc, #208]	; (7490 <_i2c_m_sync_init_impl+0x12c>)
    73be:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    73c0:	68bb      	ldr	r3, [r7, #8]
    73c2:	f043 0301 	orr.w	r3, r3, #1
    73c6:	4619      	mov	r1, r3
    73c8:	6838      	ldr	r0, [r7, #0]
    73ca:	4b32      	ldr	r3, [pc, #200]	; (7494 <_i2c_m_sync_init_impl+0x130>)
    73cc:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    73ce:	2101      	movs	r1, #1
    73d0:	6838      	ldr	r0, [r7, #0]
    73d2:	4b2f      	ldr	r3, [pc, #188]	; (7490 <_i2c_m_sync_init_impl+0x12c>)
    73d4:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    73d6:	7bfa      	ldrb	r2, [r7, #15]
    73d8:	492a      	ldr	r1, [pc, #168]	; (7484 <_i2c_m_sync_init_impl+0x120>)
    73da:	4613      	mov	r3, r2
    73dc:	005b      	lsls	r3, r3, #1
    73de:	4413      	add	r3, r2
    73e0:	00db      	lsls	r3, r3, #3
    73e2:	440b      	add	r3, r1
    73e4:	3304      	adds	r3, #4
    73e6:	681b      	ldr	r3, [r3, #0]
    73e8:	4619      	mov	r1, r3
    73ea:	6838      	ldr	r0, [r7, #0]
    73ec:	4b29      	ldr	r3, [pc, #164]	; (7494 <_i2c_m_sync_init_impl+0x130>)
    73ee:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    73f0:	7bfa      	ldrb	r2, [r7, #15]
    73f2:	4924      	ldr	r1, [pc, #144]	; (7484 <_i2c_m_sync_init_impl+0x120>)
    73f4:	4613      	mov	r3, r2
    73f6:	005b      	lsls	r3, r3, #1
    73f8:	4413      	add	r3, r2
    73fa:	00db      	lsls	r3, r3, #3
    73fc:	440b      	add	r3, r1
    73fe:	3308      	adds	r3, #8
    7400:	681b      	ldr	r3, [r3, #0]
    7402:	4619      	mov	r1, r3
    7404:	6838      	ldr	r0, [r7, #0]
    7406:	4b24      	ldr	r3, [pc, #144]	; (7498 <_i2c_m_sync_init_impl+0x134>)
    7408:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    740a:	7bfa      	ldrb	r2, [r7, #15]
    740c:	491d      	ldr	r1, [pc, #116]	; (7484 <_i2c_m_sync_init_impl+0x120>)
    740e:	4613      	mov	r3, r2
    7410:	005b      	lsls	r3, r3, #1
    7412:	4413      	add	r3, r2
    7414:	00db      	lsls	r3, r3, #3
    7416:	440b      	add	r3, r1
    7418:	330c      	adds	r3, #12
    741a:	681b      	ldr	r3, [r3, #0]
    741c:	4619      	mov	r1, r3
    741e:	6838      	ldr	r0, [r7, #0]
    7420:	4b1e      	ldr	r3, [pc, #120]	; (749c <_i2c_m_sync_init_impl+0x138>)
    7422:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    7424:	7bfa      	ldrb	r2, [r7, #15]
    7426:	4917      	ldr	r1, [pc, #92]	; (7484 <_i2c_m_sync_init_impl+0x120>)
    7428:	4613      	mov	r3, r2
    742a:	005b      	lsls	r3, r3, #1
    742c:	4413      	add	r3, r2
    742e:	00db      	lsls	r3, r3, #3
    7430:	440b      	add	r3, r1
    7432:	3304      	adds	r3, #4
    7434:	681b      	ldr	r3, [r3, #0]
    7436:	0e1b      	lsrs	r3, r3, #24
    7438:	b29b      	uxth	r3, r3
    743a:	f003 0303 	and.w	r3, r3, #3
    743e:	b29a      	uxth	r2, r3
    7440:	687b      	ldr	r3, [r7, #4]
    7442:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    7444:	687b      	ldr	r3, [r7, #4]
    7446:	899b      	ldrh	r3, [r3, #12]
    7448:	2b01      	cmp	r3, #1
    744a:	bf8c      	ite	hi
    744c:	2301      	movhi	r3, #1
    744e:	2300      	movls	r3, #0
    7450:	b2db      	uxtb	r3, r3
    7452:	4619      	mov	r1, r3
    7454:	6838      	ldr	r0, [r7, #0]
    7456:	4b12      	ldr	r3, [pc, #72]	; (74a0 <_i2c_m_sync_init_impl+0x13c>)
    7458:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    745a:	7bfa      	ldrb	r2, [r7, #15]
    745c:	4909      	ldr	r1, [pc, #36]	; (7484 <_i2c_m_sync_init_impl+0x120>)
    745e:	4613      	mov	r3, r2
    7460:	005b      	lsls	r3, r3, #1
    7462:	4413      	add	r3, r2
    7464:	00db      	lsls	r3, r3, #3
    7466:	440b      	add	r3, r1
    7468:	3312      	adds	r3, #18
    746a:	881a      	ldrh	r2, [r3, #0]
    746c:	687b      	ldr	r3, [r7, #4]
    746e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7470:	2300      	movs	r3, #0
}
    7472:	4618      	mov	r0, r3
    7474:	3710      	adds	r7, #16
    7476:	46bd      	mov	sp, r7
    7478:	bd80      	pop	{r7, pc}
    747a:	bf00      	nop
    747c:	00006905 	.word	0x00006905
    7480:	00006291 	.word	0x00006291
    7484:	20000018 	.word	0x20000018
    7488:	00006451 	.word	0x00006451
    748c:	000063f9 	.word	0x000063f9
    7490:	0000626d 	.word	0x0000626d
    7494:	00006481 	.word	0x00006481
    7498:	00006629 	.word	0x00006629
    749c:	00006671 	.word	0x00006671
    74a0:	000066ad 	.word	0x000066ad

000074a4 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    74a4:	b580      	push	{r7, lr}
    74a6:	b082      	sub	sp, #8
    74a8:	af00      	add	r7, sp, #0
    74aa:	6078      	str	r0, [r7, #4]
    74ac:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    74ae:	687b      	ldr	r3, [r7, #4]
    74b0:	2b00      	cmp	r3, #0
    74b2:	d004      	beq.n	74be <_spi_load_regs_master+0x1a>
    74b4:	683b      	ldr	r3, [r7, #0]
    74b6:	2b00      	cmp	r3, #0
    74b8:	d001      	beq.n	74be <_spi_load_regs_master+0x1a>
    74ba:	2301      	movs	r3, #1
    74bc:	e000      	b.n	74c0 <_spi_load_regs_master+0x1c>
    74be:	2300      	movs	r3, #0
    74c0:	f003 0301 	and.w	r3, r3, #1
    74c4:	b2db      	uxtb	r3, r3
    74c6:	f640 1239 	movw	r2, #2361	; 0x939
    74ca:	4915      	ldr	r1, [pc, #84]	; (7520 <_spi_load_regs_master+0x7c>)
    74cc:	4618      	mov	r0, r3
    74ce:	4b15      	ldr	r3, [pc, #84]	; (7524 <_spi_load_regs_master+0x80>)
    74d0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    74d2:	683b      	ldr	r3, [r7, #0]
    74d4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    74d6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    74da:	f023 0301 	bic.w	r3, r3, #1
    74de:	4619      	mov	r1, r3
    74e0:	6878      	ldr	r0, [r7, #4]
    74e2:	4b11      	ldr	r3, [pc, #68]	; (7528 <_spi_load_regs_master+0x84>)
    74e4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    74e6:	683b      	ldr	r3, [r7, #0]
    74e8:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    74ea:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    74ee:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    74f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    74f6:	4619      	mov	r1, r3
    74f8:	6878      	ldr	r0, [r7, #4]
    74fa:	4b0c      	ldr	r3, [pc, #48]	; (752c <_spi_load_regs_master+0x88>)
    74fc:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    74fe:	683b      	ldr	r3, [r7, #0]
    7500:	7b1b      	ldrb	r3, [r3, #12]
    7502:	4619      	mov	r1, r3
    7504:	6878      	ldr	r0, [r7, #4]
    7506:	4b0a      	ldr	r3, [pc, #40]	; (7530 <_spi_load_regs_master+0x8c>)
    7508:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    750a:	683b      	ldr	r3, [r7, #0]
    750c:	7b5b      	ldrb	r3, [r3, #13]
    750e:	4619      	mov	r1, r3
    7510:	6878      	ldr	r0, [r7, #4]
    7512:	4b08      	ldr	r3, [pc, #32]	; (7534 <_spi_load_regs_master+0x90>)
    7514:	4798      	blx	r3
}
    7516:	bf00      	nop
    7518:	3708      	adds	r7, #8
    751a:	46bd      	mov	sp, r7
    751c:	bd80      	pop	{r7, pc}
    751e:	bf00      	nop
    7520:	00011da0 	.word	0x00011da0
    7524:	00003cad 	.word	0x00003cad
    7528:	00006535 	.word	0x00006535
    752c:	0000664d 	.word	0x0000664d
    7530:	0000668d 	.word	0x0000668d
    7534:	000067c5 	.word	0x000067c5

00007538 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7538:	b580      	push	{r7, lr}
    753a:	b082      	sub	sp, #8
    753c:	af00      	add	r7, sp, #0
    753e:	6078      	str	r0, [r7, #4]
    7540:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    7542:	687b      	ldr	r3, [r7, #4]
    7544:	2b00      	cmp	r3, #0
    7546:	d004      	beq.n	7552 <_spi_load_regs_slave+0x1a>
    7548:	683b      	ldr	r3, [r7, #0]
    754a:	2b00      	cmp	r3, #0
    754c:	d001      	beq.n	7552 <_spi_load_regs_slave+0x1a>
    754e:	2301      	movs	r3, #1
    7550:	e000      	b.n	7554 <_spi_load_regs_slave+0x1c>
    7552:	2300      	movs	r3, #0
    7554:	f003 0301 	and.w	r3, r3, #1
    7558:	b2db      	uxtb	r3, r3
    755a:	f640 124d 	movw	r2, #2381	; 0x94d
    755e:	491a      	ldr	r1, [pc, #104]	; (75c8 <_spi_load_regs_slave+0x90>)
    7560:	4618      	mov	r0, r3
    7562:	4b1a      	ldr	r3, [pc, #104]	; (75cc <_spi_load_regs_slave+0x94>)
    7564:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7566:	683b      	ldr	r3, [r7, #0]
    7568:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    756a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    756e:	f023 0301 	bic.w	r3, r3, #1
    7572:	4619      	mov	r1, r3
    7574:	6878      	ldr	r0, [r7, #4]
    7576:	4b16      	ldr	r3, [pc, #88]	; (75d0 <_spi_load_regs_slave+0x98>)
    7578:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    757a:	683b      	ldr	r3, [r7, #0]
    757c:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    757e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    7582:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    7586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    758a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    758e:	4619      	mov	r1, r3
    7590:	6878      	ldr	r0, [r7, #4]
    7592:	4b10      	ldr	r3, [pc, #64]	; (75d4 <_spi_load_regs_slave+0x9c>)
    7594:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7596:	683b      	ldr	r3, [r7, #0]
    7598:	689b      	ldr	r3, [r3, #8]
    759a:	4619      	mov	r1, r3
    759c:	6878      	ldr	r0, [r7, #4]
    759e:	4b0e      	ldr	r3, [pc, #56]	; (75d8 <_spi_load_regs_slave+0xa0>)
    75a0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    75a2:	683b      	ldr	r3, [r7, #0]
    75a4:	7b5b      	ldrb	r3, [r3, #13]
    75a6:	4619      	mov	r1, r3
    75a8:	6878      	ldr	r0, [r7, #4]
    75aa:	4b0c      	ldr	r3, [pc, #48]	; (75dc <_spi_load_regs_slave+0xa4>)
    75ac:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    75ae:	bf00      	nop
    75b0:	f04f 31ff 	mov.w	r1, #4294967295
    75b4:	6878      	ldr	r0, [r7, #4]
    75b6:	4b0a      	ldr	r3, [pc, #40]	; (75e0 <_spi_load_regs_slave+0xa8>)
    75b8:	4798      	blx	r3
    75ba:	4603      	mov	r3, r0
    75bc:	2b00      	cmp	r3, #0
    75be:	d1f7      	bne.n	75b0 <_spi_load_regs_slave+0x78>
		;
}
    75c0:	bf00      	nop
    75c2:	3708      	adds	r7, #8
    75c4:	46bd      	mov	sp, r7
    75c6:	bd80      	pop	{r7, pc}
    75c8:	00011da0 	.word	0x00011da0
    75cc:	00003cad 	.word	0x00003cad
    75d0:	00006535 	.word	0x00006535
    75d4:	0000664d 	.word	0x0000664d
    75d8:	00006731 	.word	0x00006731
    75dc:	000067c5 	.word	0x000067c5
    75e0:	000062dd 	.word	0x000062dd

000075e4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    75e4:	b580      	push	{r7, lr}
    75e6:	b084      	sub	sp, #16
    75e8:	af00      	add	r7, sp, #0
    75ea:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    75ec:	687b      	ldr	r3, [r7, #4]
    75ee:	4618      	mov	r0, r3
    75f0:	4b11      	ldr	r3, [pc, #68]	; (7638 <_spi_get_regs+0x54>)
    75f2:	4798      	blx	r3
    75f4:	4603      	mov	r3, r0
    75f6:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    75f8:	2300      	movs	r3, #0
    75fa:	73fb      	strb	r3, [r7, #15]
    75fc:	e014      	b.n	7628 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    75fe:	7bfa      	ldrb	r2, [r7, #15]
    7600:	490e      	ldr	r1, [pc, #56]	; (763c <_spi_get_regs+0x58>)
    7602:	4613      	mov	r3, r2
    7604:	011b      	lsls	r3, r3, #4
    7606:	4413      	add	r3, r2
    7608:	440b      	add	r3, r1
    760a:	3310      	adds	r3, #16
    760c:	781b      	ldrb	r3, [r3, #0]
    760e:	7bba      	ldrb	r2, [r7, #14]
    7610:	429a      	cmp	r2, r3
    7612:	d106      	bne.n	7622 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7614:	7bfa      	ldrb	r2, [r7, #15]
    7616:	4613      	mov	r3, r2
    7618:	011b      	lsls	r3, r3, #4
    761a:	4413      	add	r3, r2
    761c:	4a07      	ldr	r2, [pc, #28]	; (763c <_spi_get_regs+0x58>)
    761e:	4413      	add	r3, r2
    7620:	e006      	b.n	7630 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7622:	7bfb      	ldrb	r3, [r7, #15]
    7624:	3301      	adds	r3, #1
    7626:	73fb      	strb	r3, [r7, #15]
    7628:	7bfb      	ldrb	r3, [r7, #15]
    762a:	2b01      	cmp	r3, #1
    762c:	d9e7      	bls.n	75fe <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    762e:	2300      	movs	r3, #0
}
    7630:	4618      	mov	r0, r3
    7632:	3710      	adds	r7, #16
    7634:	46bd      	mov	sp, r7
    7636:	bd80      	pop	{r7, pc}
    7638:	0000687d 	.word	0x0000687d
    763c:	00011ddc 	.word	0x00011ddc

00007640 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    7640:	b580      	push	{r7, lr}
    7642:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7644:	4b03      	ldr	r3, [pc, #12]	; (7654 <SERCOM7_0_Handler+0x14>)
    7646:	681b      	ldr	r3, [r3, #0]
    7648:	4618      	mov	r0, r3
    764a:	4b03      	ldr	r3, [pc, #12]	; (7658 <SERCOM7_0_Handler+0x18>)
    764c:	4798      	blx	r3
}
    764e:	bf00      	nop
    7650:	bd80      	pop	{r7, pc}
    7652:	bf00      	nop
    7654:	200009e8 	.word	0x200009e8
    7658:	00006bb9 	.word	0x00006bb9

0000765c <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    765c:	b580      	push	{r7, lr}
    765e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7660:	4b03      	ldr	r3, [pc, #12]	; (7670 <SERCOM7_1_Handler+0x14>)
    7662:	681b      	ldr	r3, [r3, #0]
    7664:	4618      	mov	r0, r3
    7666:	4b03      	ldr	r3, [pc, #12]	; (7674 <SERCOM7_1_Handler+0x18>)
    7668:	4798      	blx	r3
}
    766a:	bf00      	nop
    766c:	bd80      	pop	{r7, pc}
    766e:	bf00      	nop
    7670:	200009e8 	.word	0x200009e8
    7674:	00006bb9 	.word	0x00006bb9

00007678 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    7678:	b580      	push	{r7, lr}
    767a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    767c:	4b03      	ldr	r3, [pc, #12]	; (768c <SERCOM7_2_Handler+0x14>)
    767e:	681b      	ldr	r3, [r3, #0]
    7680:	4618      	mov	r0, r3
    7682:	4b03      	ldr	r3, [pc, #12]	; (7690 <SERCOM7_2_Handler+0x18>)
    7684:	4798      	blx	r3
}
    7686:	bf00      	nop
    7688:	bd80      	pop	{r7, pc}
    768a:	bf00      	nop
    768c:	200009e8 	.word	0x200009e8
    7690:	00006bb9 	.word	0x00006bb9

00007694 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    7694:	b580      	push	{r7, lr}
    7696:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7698:	4b03      	ldr	r3, [pc, #12]	; (76a8 <SERCOM7_3_Handler+0x14>)
    769a:	681b      	ldr	r3, [r3, #0]
    769c:	4618      	mov	r0, r3
    769e:	4b03      	ldr	r3, [pc, #12]	; (76ac <SERCOM7_3_Handler+0x18>)
    76a0:	4798      	blx	r3
}
    76a2:	bf00      	nop
    76a4:	bd80      	pop	{r7, pc}
    76a6:	bf00      	nop
    76a8:	200009e8 	.word	0x200009e8
    76ac:	00006bb9 	.word	0x00006bb9

000076b0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    76b0:	b580      	push	{r7, lr}
    76b2:	b084      	sub	sp, #16
    76b4:	af00      	add	r7, sp, #0
    76b6:	6078      	str	r0, [r7, #4]
    76b8:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    76ba:	683b      	ldr	r3, [r7, #0]
    76bc:	4618      	mov	r0, r3
    76be:	4b35      	ldr	r3, [pc, #212]	; (7794 <_spi_m_sync_init+0xe4>)
    76c0:	4798      	blx	r3
    76c2:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    76c4:	687b      	ldr	r3, [r7, #4]
    76c6:	2b00      	cmp	r3, #0
    76c8:	d004      	beq.n	76d4 <_spi_m_sync_init+0x24>
    76ca:	683b      	ldr	r3, [r7, #0]
    76cc:	2b00      	cmp	r3, #0
    76ce:	d001      	beq.n	76d4 <_spi_m_sync_init+0x24>
    76d0:	2301      	movs	r3, #1
    76d2:	e000      	b.n	76d6 <_spi_m_sync_init+0x26>
    76d4:	2300      	movs	r3, #0
    76d6:	f003 0301 	and.w	r3, r3, #1
    76da:	b2db      	uxtb	r3, r3
    76dc:	f640 128c 	movw	r2, #2444	; 0x98c
    76e0:	492d      	ldr	r1, [pc, #180]	; (7798 <_spi_m_sync_init+0xe8>)
    76e2:	4618      	mov	r0, r3
    76e4:	4b2d      	ldr	r3, [pc, #180]	; (779c <_spi_m_sync_init+0xec>)
    76e6:	4798      	blx	r3

	if (regs == NULL) {
    76e8:	68fb      	ldr	r3, [r7, #12]
    76ea:	2b00      	cmp	r3, #0
    76ec:	d102      	bne.n	76f4 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    76ee:	f06f 030c 	mvn.w	r3, #12
    76f2:	e04a      	b.n	778a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    76f4:	2101      	movs	r1, #1
    76f6:	6838      	ldr	r0, [r7, #0]
    76f8:	4b29      	ldr	r3, [pc, #164]	; (77a0 <_spi_m_sync_init+0xf0>)
    76fa:	4798      	blx	r3
    76fc:	4603      	mov	r3, r0
    76fe:	f083 0301 	eor.w	r3, r3, #1
    7702:	b2db      	uxtb	r3, r3
    7704:	2b00      	cmp	r3, #0
    7706:	d019      	beq.n	773c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7708:	68fb      	ldr	r3, [r7, #12]
    770a:	681b      	ldr	r3, [r3, #0]
    770c:	f003 031c 	and.w	r3, r3, #28
    7710:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7712:	2102      	movs	r1, #2
    7714:	6838      	ldr	r0, [r7, #0]
    7716:	4b23      	ldr	r3, [pc, #140]	; (77a4 <_spi_m_sync_init+0xf4>)
    7718:	4798      	blx	r3
    771a:	4603      	mov	r3, r0
    771c:	2b00      	cmp	r3, #0
    771e:	d006      	beq.n	772e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7720:	6838      	ldr	r0, [r7, #0]
    7722:	4b21      	ldr	r3, [pc, #132]	; (77a8 <_spi_m_sync_init+0xf8>)
    7724:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    7726:	2102      	movs	r1, #2
    7728:	6838      	ldr	r0, [r7, #0]
    772a:	4b20      	ldr	r3, [pc, #128]	; (77ac <_spi_m_sync_init+0xfc>)
    772c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    772e:	68bb      	ldr	r3, [r7, #8]
    7730:	f043 0301 	orr.w	r3, r3, #1
    7734:	4619      	mov	r1, r3
    7736:	6838      	ldr	r0, [r7, #0]
    7738:	4b1d      	ldr	r3, [pc, #116]	; (77b0 <_spi_m_sync_init+0x100>)
    773a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    773c:	2101      	movs	r1, #1
    773e:	6838      	ldr	r0, [r7, #0]
    7740:	4b1a      	ldr	r3, [pc, #104]	; (77ac <_spi_m_sync_init+0xfc>)
    7742:	4798      	blx	r3

	dev->prvt = hw;
    7744:	687b      	ldr	r3, [r7, #4]
    7746:	683a      	ldr	r2, [r7, #0]
    7748:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    774a:	68fb      	ldr	r3, [r7, #12]
    774c:	681b      	ldr	r3, [r3, #0]
    774e:	f003 031c 	and.w	r3, r3, #28
    7752:	2b08      	cmp	r3, #8
    7754:	d104      	bne.n	7760 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    7756:	68f9      	ldr	r1, [r7, #12]
    7758:	6838      	ldr	r0, [r7, #0]
    775a:	4b16      	ldr	r3, [pc, #88]	; (77b4 <_spi_m_sync_init+0x104>)
    775c:	4798      	blx	r3
    775e:	e003      	b.n	7768 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7760:	68f9      	ldr	r1, [r7, #12]
    7762:	6838      	ldr	r0, [r7, #0]
    7764:	4b14      	ldr	r3, [pc, #80]	; (77b8 <_spi_m_sync_init+0x108>)
    7766:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7768:	68fb      	ldr	r3, [r7, #12]
    776a:	685b      	ldr	r3, [r3, #4]
    776c:	f003 0307 	and.w	r3, r3, #7
    7770:	2b00      	cmp	r3, #0
    7772:	d101      	bne.n	7778 <_spi_m_sync_init+0xc8>
    7774:	2201      	movs	r2, #1
    7776:	e000      	b.n	777a <_spi_m_sync_init+0xca>
    7778:	2202      	movs	r2, #2
    777a:	687b      	ldr	r3, [r7, #4]
    777c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    777e:	68fb      	ldr	r3, [r7, #12]
    7780:	89db      	ldrh	r3, [r3, #14]
    7782:	b29a      	uxth	r2, r3
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    7788:	2300      	movs	r3, #0
}
    778a:	4618      	mov	r0, r3
    778c:	3710      	adds	r7, #16
    778e:	46bd      	mov	sp, r7
    7790:	bd80      	pop	{r7, pc}
    7792:	bf00      	nop
    7794:	000075e5 	.word	0x000075e5
    7798:	00011da0 	.word	0x00011da0
    779c:	00003cad 	.word	0x00003cad
    77a0:	000062dd 	.word	0x000062dd
    77a4:	00006505 	.word	0x00006505
    77a8:	000064dd 	.word	0x000064dd
    77ac:	000062b9 	.word	0x000062b9
    77b0:	00006535 	.word	0x00006535
    77b4:	00007539 	.word	0x00007539
    77b8:	000074a5 	.word	0x000074a5

000077bc <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    77bc:	b580      	push	{r7, lr}
    77be:	b082      	sub	sp, #8
    77c0:	af00      	add	r7, sp, #0
    77c2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    77c4:	bf00      	nop
    77c6:	2103      	movs	r1, #3
    77c8:	6878      	ldr	r0, [r7, #4]
    77ca:	4b06      	ldr	r3, [pc, #24]	; (77e4 <_spi_wait_bus_idle+0x28>)
    77cc:	4798      	blx	r3
    77ce:	4603      	mov	r3, r0
    77d0:	2b00      	cmp	r3, #0
    77d2:	d0f8      	beq.n	77c6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    77d4:	2103      	movs	r1, #3
    77d6:	6878      	ldr	r0, [r7, #4]
    77d8:	4b03      	ldr	r3, [pc, #12]	; (77e8 <_spi_wait_bus_idle+0x2c>)
    77da:	4798      	blx	r3
}
    77dc:	bf00      	nop
    77de:	3708      	adds	r7, #8
    77e0:	46bd      	mov	sp, r7
    77e2:	bd80      	pop	{r7, pc}
    77e4:	00006371 	.word	0x00006371
    77e8:	000063b3 	.word	0x000063b3

000077ec <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    77ec:	b580      	push	{r7, lr}
    77ee:	b086      	sub	sp, #24
    77f0:	af00      	add	r7, sp, #0
    77f2:	60f8      	str	r0, [r7, #12]
    77f4:	60b9      	str	r1, [r7, #8]
    77f6:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    77f8:	68bb      	ldr	r3, [r7, #8]
    77fa:	f003 0304 	and.w	r3, r3, #4
    77fe:	2b00      	cmp	r3, #0
    7800:	d101      	bne.n	7806 <_spi_rx_check_and_receive+0x1a>
		return false;
    7802:	2300      	movs	r3, #0
    7804:	e022      	b.n	784c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    7806:	68f8      	ldr	r0, [r7, #12]
    7808:	4b12      	ldr	r3, [pc, #72]	; (7854 <_spi_rx_check_and_receive+0x68>)
    780a:	4798      	blx	r3
    780c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    780e:	687b      	ldr	r3, [r7, #4]
    7810:	685b      	ldr	r3, [r3, #4]
    7812:	2b00      	cmp	r3, #0
    7814:	d014      	beq.n	7840 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    7816:	687b      	ldr	r3, [r7, #4]
    7818:	685b      	ldr	r3, [r3, #4]
    781a:	1c59      	adds	r1, r3, #1
    781c:	687a      	ldr	r2, [r7, #4]
    781e:	6051      	str	r1, [r2, #4]
    7820:	697a      	ldr	r2, [r7, #20]
    7822:	b2d2      	uxtb	r2, r2
    7824:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    7826:	687b      	ldr	r3, [r7, #4]
    7828:	7c1b      	ldrb	r3, [r3, #16]
    782a:	2b01      	cmp	r3, #1
    782c:	d908      	bls.n	7840 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    782e:	687b      	ldr	r3, [r7, #4]
    7830:	685b      	ldr	r3, [r3, #4]
    7832:	1c59      	adds	r1, r3, #1
    7834:	687a      	ldr	r2, [r7, #4]
    7836:	6051      	str	r1, [r2, #4]
    7838:	697a      	ldr	r2, [r7, #20]
    783a:	0a12      	lsrs	r2, r2, #8
    783c:	b2d2      	uxtb	r2, r2
    783e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	68db      	ldr	r3, [r3, #12]
    7844:	1c5a      	adds	r2, r3, #1
    7846:	687b      	ldr	r3, [r7, #4]
    7848:	60da      	str	r2, [r3, #12]

	return true;
    784a:	2301      	movs	r3, #1
}
    784c:	4618      	mov	r0, r3
    784e:	3718      	adds	r7, #24
    7850:	46bd      	mov	sp, r7
    7852:	bd80      	pop	{r7, pc}
    7854:	000067ad 	.word	0x000067ad

00007858 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7858:	b580      	push	{r7, lr}
    785a:	b086      	sub	sp, #24
    785c:	af00      	add	r7, sp, #0
    785e:	60f8      	str	r0, [r7, #12]
    7860:	60b9      	str	r1, [r7, #8]
    7862:	607a      	str	r2, [r7, #4]
    7864:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7866:	68bb      	ldr	r3, [r7, #8]
    7868:	f003 0301 	and.w	r3, r3, #1
    786c:	2b00      	cmp	r3, #0
    786e:	d028      	beq.n	78c2 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7870:	687b      	ldr	r3, [r7, #4]
    7872:	681b      	ldr	r3, [r3, #0]
    7874:	2b00      	cmp	r3, #0
    7876:	d018      	beq.n	78aa <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7878:	687b      	ldr	r3, [r7, #4]
    787a:	681b      	ldr	r3, [r3, #0]
    787c:	1c59      	adds	r1, r3, #1
    787e:	687a      	ldr	r2, [r7, #4]
    7880:	6011      	str	r1, [r2, #0]
    7882:	781b      	ldrb	r3, [r3, #0]
    7884:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7886:	687b      	ldr	r3, [r7, #4]
    7888:	7c1b      	ldrb	r3, [r3, #16]
    788a:	2b01      	cmp	r3, #1
    788c:	d90f      	bls.n	78ae <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    788e:	687b      	ldr	r3, [r7, #4]
    7890:	681b      	ldr	r3, [r3, #0]
    7892:	781b      	ldrb	r3, [r3, #0]
    7894:	021b      	lsls	r3, r3, #8
    7896:	461a      	mov	r2, r3
    7898:	697b      	ldr	r3, [r7, #20]
    789a:	4313      	orrs	r3, r2
    789c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    789e:	687b      	ldr	r3, [r7, #4]
    78a0:	681b      	ldr	r3, [r3, #0]
    78a2:	1c5a      	adds	r2, r3, #1
    78a4:	687b      	ldr	r3, [r7, #4]
    78a6:	601a      	str	r2, [r3, #0]
    78a8:	e001      	b.n	78ae <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    78aa:	887b      	ldrh	r3, [r7, #2]
    78ac:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    78ae:	687b      	ldr	r3, [r7, #4]
    78b0:	689b      	ldr	r3, [r3, #8]
    78b2:	1c5a      	adds	r2, r3, #1
    78b4:	687b      	ldr	r3, [r7, #4]
    78b6:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    78b8:	6979      	ldr	r1, [r7, #20]
    78ba:	68f8      	ldr	r0, [r7, #12]
    78bc:	4b03      	ldr	r3, [pc, #12]	; (78cc <_spi_tx_check_and_send+0x74>)
    78be:	4798      	blx	r3
    78c0:	e000      	b.n	78c4 <_spi_tx_check_and_send+0x6c>
		return;
    78c2:	bf00      	nop
}
    78c4:	3718      	adds	r7, #24
    78c6:	46bd      	mov	sp, r7
    78c8:	bd80      	pop	{r7, pc}
    78ca:	bf00      	nop
    78cc:	00006791 	.word	0x00006791

000078d0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    78d0:	b580      	push	{r7, lr}
    78d2:	b082      	sub	sp, #8
    78d4:	af00      	add	r7, sp, #0
    78d6:	6078      	str	r0, [r7, #4]
    78d8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    78da:	687b      	ldr	r3, [r7, #4]
    78dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    78e0:	2b00      	cmp	r3, #0
    78e2:	d00b      	beq.n	78fc <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    78e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    78e8:	6838      	ldr	r0, [r7, #0]
    78ea:	4b07      	ldr	r3, [pc, #28]	; (7908 <_spi_err_check+0x38>)
    78ec:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    78ee:	2180      	movs	r1, #128	; 0x80
    78f0:	6838      	ldr	r0, [r7, #0]
    78f2:	4b06      	ldr	r3, [pc, #24]	; (790c <_spi_err_check+0x3c>)
    78f4:	4798      	blx	r3
		return ERR_OVERFLOW;
    78f6:	f06f 0312 	mvn.w	r3, #18
    78fa:	e000      	b.n	78fe <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    78fc:	2300      	movs	r3, #0
}
    78fe:	4618      	mov	r0, r3
    7900:	3708      	adds	r7, #8
    7902:	46bd      	mov	sp, r7
    7904:	bd80      	pop	{r7, pc}
    7906:	bf00      	nop
    7908:	000067e5 	.word	0x000067e5
    790c:	000063b3 	.word	0x000063b3

00007910 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7910:	b590      	push	{r4, r7, lr}
    7912:	b08b      	sub	sp, #44	; 0x2c
    7914:	af00      	add	r7, sp, #0
    7916:	6078      	str	r0, [r7, #4]
    7918:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    791a:	687b      	ldr	r3, [r7, #4]
    791c:	681b      	ldr	r3, [r3, #0]
    791e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7920:	2300      	movs	r3, #0
    7922:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7924:	683b      	ldr	r3, [r7, #0]
    7926:	681b      	ldr	r3, [r3, #0]
    7928:	60bb      	str	r3, [r7, #8]
    792a:	683b      	ldr	r3, [r7, #0]
    792c:	685b      	ldr	r3, [r3, #4]
    792e:	60fb      	str	r3, [r7, #12]
    7930:	2300      	movs	r3, #0
    7932:	613b      	str	r3, [r7, #16]
    7934:	2300      	movs	r3, #0
    7936:	617b      	str	r3, [r7, #20]
    7938:	687b      	ldr	r3, [r7, #4]
    793a:	791b      	ldrb	r3, [r3, #4]
    793c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    793e:	687b      	ldr	r3, [r7, #4]
    7940:	2b00      	cmp	r3, #0
    7942:	d004      	beq.n	794e <_spi_m_sync_trans+0x3e>
    7944:	6a3b      	ldr	r3, [r7, #32]
    7946:	2b00      	cmp	r3, #0
    7948:	d001      	beq.n	794e <_spi_m_sync_trans+0x3e>
    794a:	2301      	movs	r3, #1
    794c:	e000      	b.n	7950 <_spi_m_sync_trans+0x40>
    794e:	2300      	movs	r3, #0
    7950:	f003 0301 	and.w	r3, r3, #1
    7954:	b2db      	uxtb	r3, r3
    7956:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    795a:	492b      	ldr	r1, [pc, #172]	; (7a08 <_spi_m_sync_trans+0xf8>)
    795c:	4618      	mov	r0, r3
    795e:	4b2b      	ldr	r3, [pc, #172]	; (7a0c <_spi_m_sync_trans+0xfc>)
    7960:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7962:	2107      	movs	r1, #7
    7964:	6a38      	ldr	r0, [r7, #32]
    7966:	4b2a      	ldr	r3, [pc, #168]	; (7a10 <_spi_m_sync_trans+0x100>)
    7968:	4798      	blx	r3
    796a:	4603      	mov	r3, r0
    796c:	2b00      	cmp	r3, #0
    796e:	d002      	beq.n	7976 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7970:	f06f 0303 	mvn.w	r3, #3
    7974:	e043      	b.n	79fe <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7976:	6a38      	ldr	r0, [r7, #32]
    7978:	4b26      	ldr	r3, [pc, #152]	; (7a14 <_spi_m_sync_trans+0x104>)
    797a:	4798      	blx	r3
    797c:	4603      	mov	r3, r0
    797e:	f083 0301 	eor.w	r3, r3, #1
    7982:	b2db      	uxtb	r3, r3
    7984:	2b00      	cmp	r3, #0
    7986:	d002      	beq.n	798e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7988:	f06f 0313 	mvn.w	r3, #19
    798c:	e037      	b.n	79fe <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    798e:	6a38      	ldr	r0, [r7, #32]
    7990:	4b21      	ldr	r3, [pc, #132]	; (7a18 <_spi_m_sync_trans+0x108>)
    7992:	4798      	blx	r3
    7994:	4603      	mov	r3, r0
    7996:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7998:	f107 0308 	add.w	r3, r7, #8
    799c:	461a      	mov	r2, r3
    799e:	69f9      	ldr	r1, [r7, #28]
    79a0:	6a38      	ldr	r0, [r7, #32]
    79a2:	4b1e      	ldr	r3, [pc, #120]	; (7a1c <_spi_m_sync_trans+0x10c>)
    79a4:	4798      	blx	r3
    79a6:	4603      	mov	r3, r0
    79a8:	f083 0301 	eor.w	r3, r3, #1
    79ac:	b2db      	uxtb	r3, r3
    79ae:	2b00      	cmp	r3, #0
    79b0:	d00b      	beq.n	79ca <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    79b2:	697a      	ldr	r2, [r7, #20]
    79b4:	693b      	ldr	r3, [r7, #16]
    79b6:	429a      	cmp	r2, r3
    79b8:	d307      	bcc.n	79ca <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    79ba:	687b      	ldr	r3, [r7, #4]
    79bc:	88db      	ldrh	r3, [r3, #6]
    79be:	f107 0208 	add.w	r2, r7, #8
    79c2:	69f9      	ldr	r1, [r7, #28]
    79c4:	6a38      	ldr	r0, [r7, #32]
    79c6:	4c16      	ldr	r4, [pc, #88]	; (7a20 <_spi_m_sync_trans+0x110>)
    79c8:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    79ca:	6a39      	ldr	r1, [r7, #32]
    79cc:	69f8      	ldr	r0, [r7, #28]
    79ce:	4b15      	ldr	r3, [pc, #84]	; (7a24 <_spi_m_sync_trans+0x114>)
    79d0:	4798      	blx	r3
    79d2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    79d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    79d6:	2b00      	cmp	r3, #0
    79d8:	db0c      	blt.n	79f4 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    79da:	693a      	ldr	r2, [r7, #16]
    79dc:	683b      	ldr	r3, [r7, #0]
    79de:	689b      	ldr	r3, [r3, #8]
    79e0:	429a      	cmp	r2, r3
    79e2:	d3d4      	bcc.n	798e <_spi_m_sync_trans+0x7e>
    79e4:	697a      	ldr	r2, [r7, #20]
    79e6:	683b      	ldr	r3, [r7, #0]
    79e8:	689b      	ldr	r3, [r3, #8]
    79ea:	429a      	cmp	r2, r3
    79ec:	d3cf      	bcc.n	798e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    79ee:	693b      	ldr	r3, [r7, #16]
    79f0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    79f2:	e000      	b.n	79f6 <_spi_m_sync_trans+0xe6>
			break;
    79f4:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    79f6:	6a38      	ldr	r0, [r7, #32]
    79f8:	4b0b      	ldr	r3, [pc, #44]	; (7a28 <_spi_m_sync_trans+0x118>)
    79fa:	4798      	blx	r3

	return rc;
    79fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    79fe:	4618      	mov	r0, r3
    7a00:	372c      	adds	r7, #44	; 0x2c
    7a02:	46bd      	mov	sp, r7
    7a04:	bd90      	pop	{r4, r7, pc}
    7a06:	bf00      	nop
    7a08:	00011da0 	.word	0x00011da0
    7a0c:	00003cad 	.word	0x00003cad
    7a10:	000062dd 	.word	0x000062dd
    7a14:	000064a5 	.word	0x000064a5
    7a18:	00006399 	.word	0x00006399
    7a1c:	000077ed 	.word	0x000077ed
    7a20:	00007859 	.word	0x00007859
    7a24:	000078d1 	.word	0x000078d1
    7a28:	000077bd 	.word	0x000077bd

00007a2c <__NVIC_EnableIRQ>:
{
    7a2c:	b480      	push	{r7}
    7a2e:	b083      	sub	sp, #12
    7a30:	af00      	add	r7, sp, #0
    7a32:	4603      	mov	r3, r0
    7a34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a3a:	2b00      	cmp	r3, #0
    7a3c:	db0b      	blt.n	7a56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a3e:	4909      	ldr	r1, [pc, #36]	; (7a64 <__NVIC_EnableIRQ+0x38>)
    7a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a44:	095b      	lsrs	r3, r3, #5
    7a46:	88fa      	ldrh	r2, [r7, #6]
    7a48:	f002 021f 	and.w	r2, r2, #31
    7a4c:	2001      	movs	r0, #1
    7a4e:	fa00 f202 	lsl.w	r2, r0, r2
    7a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a56:	bf00      	nop
    7a58:	370c      	adds	r7, #12
    7a5a:	46bd      	mov	sp, r7
    7a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a60:	4770      	bx	lr
    7a62:	bf00      	nop
    7a64:	e000e100 	.word	0xe000e100

00007a68 <__NVIC_DisableIRQ>:
{
    7a68:	b480      	push	{r7}
    7a6a:	b083      	sub	sp, #12
    7a6c:	af00      	add	r7, sp, #0
    7a6e:	4603      	mov	r3, r0
    7a70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a76:	2b00      	cmp	r3, #0
    7a78:	db10      	blt.n	7a9c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a7a:	490b      	ldr	r1, [pc, #44]	; (7aa8 <__NVIC_DisableIRQ+0x40>)
    7a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a80:	095b      	lsrs	r3, r3, #5
    7a82:	88fa      	ldrh	r2, [r7, #6]
    7a84:	f002 021f 	and.w	r2, r2, #31
    7a88:	2001      	movs	r0, #1
    7a8a:	fa00 f202 	lsl.w	r2, r0, r2
    7a8e:	3320      	adds	r3, #32
    7a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7a94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7a98:	f3bf 8f6f 	isb	sy
}
    7a9c:	bf00      	nop
    7a9e:	370c      	adds	r7, #12
    7aa0:	46bd      	mov	sp, r7
    7aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aa6:	4770      	bx	lr
    7aa8:	e000e100 	.word	0xe000e100

00007aac <__NVIC_ClearPendingIRQ>:
{
    7aac:	b480      	push	{r7}
    7aae:	b083      	sub	sp, #12
    7ab0:	af00      	add	r7, sp, #0
    7ab2:	4603      	mov	r3, r0
    7ab4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7aba:	2b00      	cmp	r3, #0
    7abc:	db0c      	blt.n	7ad8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7abe:	4909      	ldr	r1, [pc, #36]	; (7ae4 <__NVIC_ClearPendingIRQ+0x38>)
    7ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7ac4:	095b      	lsrs	r3, r3, #5
    7ac6:	88fa      	ldrh	r2, [r7, #6]
    7ac8:	f002 021f 	and.w	r2, r2, #31
    7acc:	2001      	movs	r0, #1
    7ace:	fa00 f202 	lsl.w	r2, r0, r2
    7ad2:	3360      	adds	r3, #96	; 0x60
    7ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7ad8:	bf00      	nop
    7ada:	370c      	adds	r7, #12
    7adc:	46bd      	mov	sp, r7
    7ade:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ae2:	4770      	bx	lr
    7ae4:	e000e100 	.word	0xe000e100

00007ae8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7ae8:	b480      	push	{r7}
    7aea:	b083      	sub	sp, #12
    7aec:	af00      	add	r7, sp, #0
    7aee:	6078      	str	r0, [r7, #4]
    7af0:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7af2:	bf00      	nop
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	689a      	ldr	r2, [r3, #8]
    7af8:	683b      	ldr	r3, [r7, #0]
    7afa:	4013      	ands	r3, r2
    7afc:	2b00      	cmp	r3, #0
    7afe:	d1f9      	bne.n	7af4 <hri_tcc_wait_for_sync+0xc>
	};
}
    7b00:	bf00      	nop
    7b02:	370c      	adds	r7, #12
    7b04:	46bd      	mov	sp, r7
    7b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b0a:	4770      	bx	lr

00007b0c <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7b0c:	b480      	push	{r7}
    7b0e:	b083      	sub	sp, #12
    7b10:	af00      	add	r7, sp, #0
    7b12:	6078      	str	r0, [r7, #4]
    7b14:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7b16:	687b      	ldr	r3, [r7, #4]
    7b18:	689a      	ldr	r2, [r3, #8]
    7b1a:	683b      	ldr	r3, [r7, #0]
    7b1c:	4013      	ands	r3, r2
    7b1e:	2b00      	cmp	r3, #0
    7b20:	bf14      	ite	ne
    7b22:	2301      	movne	r3, #1
    7b24:	2300      	moveq	r3, #0
    7b26:	b2db      	uxtb	r3, r3
}
    7b28:	4618      	mov	r0, r3
    7b2a:	370c      	adds	r7, #12
    7b2c:	46bd      	mov	sp, r7
    7b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b32:	4770      	bx	lr

00007b34 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7b34:	b480      	push	{r7}
    7b36:	b083      	sub	sp, #12
    7b38:	af00      	add	r7, sp, #0
    7b3a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7b3c:	687b      	ldr	r3, [r7, #4]
    7b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b40:	f003 0301 	and.w	r3, r3, #1
    7b44:	2b00      	cmp	r3, #0
    7b46:	bf14      	ite	ne
    7b48:	2301      	movne	r3, #1
    7b4a:	2300      	moveq	r3, #0
    7b4c:	b2db      	uxtb	r3, r3
}
    7b4e:	4618      	mov	r0, r3
    7b50:	370c      	adds	r7, #12
    7b52:	46bd      	mov	sp, r7
    7b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b58:	4770      	bx	lr

00007b5a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7b5a:	b480      	push	{r7}
    7b5c:	b083      	sub	sp, #12
    7b5e:	af00      	add	r7, sp, #0
    7b60:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7b62:	687b      	ldr	r3, [r7, #4]
    7b64:	2201      	movs	r2, #1
    7b66:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7b68:	bf00      	nop
    7b6a:	370c      	adds	r7, #12
    7b6c:	46bd      	mov	sp, r7
    7b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b72:	4770      	bx	lr

00007b74 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7b74:	b480      	push	{r7}
    7b76:	b083      	sub	sp, #12
    7b78:	af00      	add	r7, sp, #0
    7b7a:	6078      	str	r0, [r7, #4]
    7b7c:	460b      	mov	r3, r1
    7b7e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7b80:	687b      	ldr	r3, [r7, #4]
    7b82:	78fa      	ldrb	r2, [r7, #3]
    7b84:	715a      	strb	r2, [r3, #5]
}
    7b86:	bf00      	nop
    7b88:	370c      	adds	r7, #12
    7b8a:	46bd      	mov	sp, r7
    7b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b90:	4770      	bx	lr

00007b92 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7b92:	b480      	push	{r7}
    7b94:	b083      	sub	sp, #12
    7b96:	af00      	add	r7, sp, #0
    7b98:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7b9a:	687b      	ldr	r3, [r7, #4]
    7b9c:	2201      	movs	r2, #1
    7b9e:	629a      	str	r2, [r3, #40]	; 0x28
}
    7ba0:	bf00      	nop
    7ba2:	370c      	adds	r7, #12
    7ba4:	46bd      	mov	sp, r7
    7ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7baa:	4770      	bx	lr

00007bac <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7bac:	b580      	push	{r7, lr}
    7bae:	b082      	sub	sp, #8
    7bb0:	af00      	add	r7, sp, #0
    7bb2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7bb4:	687b      	ldr	r3, [r7, #4]
    7bb6:	681b      	ldr	r3, [r3, #0]
    7bb8:	f043 0201 	orr.w	r2, r3, #1
    7bbc:	687b      	ldr	r3, [r7, #4]
    7bbe:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7bc0:	2101      	movs	r1, #1
    7bc2:	6878      	ldr	r0, [r7, #4]
    7bc4:	4b02      	ldr	r3, [pc, #8]	; (7bd0 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7bc6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7bc8:	bf00      	nop
    7bca:	3708      	adds	r7, #8
    7bcc:	46bd      	mov	sp, r7
    7bce:	bd80      	pop	{r7, pc}
    7bd0:	00007ae9 	.word	0x00007ae9

00007bd4 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7bd4:	b580      	push	{r7, lr}
    7bd6:	b082      	sub	sp, #8
    7bd8:	af00      	add	r7, sp, #0
    7bda:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7bdc:	687b      	ldr	r3, [r7, #4]
    7bde:	681b      	ldr	r3, [r3, #0]
    7be0:	f043 0202 	orr.w	r2, r3, #2
    7be4:	687b      	ldr	r3, [r7, #4]
    7be6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7be8:	2103      	movs	r1, #3
    7bea:	6878      	ldr	r0, [r7, #4]
    7bec:	4b02      	ldr	r3, [pc, #8]	; (7bf8 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7bee:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7bf0:	bf00      	nop
    7bf2:	3708      	adds	r7, #8
    7bf4:	46bd      	mov	sp, r7
    7bf6:	bd80      	pop	{r7, pc}
    7bf8:	00007ae9 	.word	0x00007ae9

00007bfc <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7bfc:	b580      	push	{r7, lr}
    7bfe:	b084      	sub	sp, #16
    7c00:	af00      	add	r7, sp, #0
    7c02:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c04:	2103      	movs	r1, #3
    7c06:	6878      	ldr	r0, [r7, #4]
    7c08:	4b09      	ldr	r3, [pc, #36]	; (7c30 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7c0a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7c0c:	687b      	ldr	r3, [r7, #4]
    7c0e:	681b      	ldr	r3, [r3, #0]
    7c10:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7c12:	68fb      	ldr	r3, [r7, #12]
    7c14:	085b      	lsrs	r3, r3, #1
    7c16:	f003 0301 	and.w	r3, r3, #1
    7c1a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7c1c:	68fb      	ldr	r3, [r7, #12]
    7c1e:	2b00      	cmp	r3, #0
    7c20:	bf14      	ite	ne
    7c22:	2301      	movne	r3, #1
    7c24:	2300      	moveq	r3, #0
    7c26:	b2db      	uxtb	r3, r3
}
    7c28:	4618      	mov	r0, r3
    7c2a:	3710      	adds	r7, #16
    7c2c:	46bd      	mov	sp, r7
    7c2e:	bd80      	pop	{r7, pc}
    7c30:	00007ae9 	.word	0x00007ae9

00007c34 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7c34:	b580      	push	{r7, lr}
    7c36:	b082      	sub	sp, #8
    7c38:	af00      	add	r7, sp, #0
    7c3a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	681b      	ldr	r3, [r3, #0]
    7c40:	f023 0202 	bic.w	r2, r3, #2
    7c44:	687b      	ldr	r3, [r7, #4]
    7c46:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c48:	2103      	movs	r1, #3
    7c4a:	6878      	ldr	r0, [r7, #4]
    7c4c:	4b02      	ldr	r3, [pc, #8]	; (7c58 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7c4e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c50:	bf00      	nop
    7c52:	3708      	adds	r7, #8
    7c54:	46bd      	mov	sp, r7
    7c56:	bd80      	pop	{r7, pc}
    7c58:	00007ae9 	.word	0x00007ae9

00007c5c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7c5c:	b580      	push	{r7, lr}
    7c5e:	b084      	sub	sp, #16
    7c60:	af00      	add	r7, sp, #0
    7c62:	6078      	str	r0, [r7, #4]
    7c64:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c66:	2103      	movs	r1, #3
    7c68:	6878      	ldr	r0, [r7, #4]
    7c6a:	4b07      	ldr	r3, [pc, #28]	; (7c88 <hri_tcc_get_CTRLA_reg+0x2c>)
    7c6c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7c6e:	687b      	ldr	r3, [r7, #4]
    7c70:	681b      	ldr	r3, [r3, #0]
    7c72:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7c74:	68fa      	ldr	r2, [r7, #12]
    7c76:	683b      	ldr	r3, [r7, #0]
    7c78:	4013      	ands	r3, r2
    7c7a:	60fb      	str	r3, [r7, #12]
	return tmp;
    7c7c:	68fb      	ldr	r3, [r7, #12]
}
    7c7e:	4618      	mov	r0, r3
    7c80:	3710      	adds	r7, #16
    7c82:	46bd      	mov	sp, r7
    7c84:	bd80      	pop	{r7, pc}
    7c86:	bf00      	nop
    7c88:	00007ae9 	.word	0x00007ae9

00007c8c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7c8c:	b580      	push	{r7, lr}
    7c8e:	b082      	sub	sp, #8
    7c90:	af00      	add	r7, sp, #0
    7c92:	6078      	str	r0, [r7, #4]
    7c94:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7c96:	687b      	ldr	r3, [r7, #4]
    7c98:	683a      	ldr	r2, [r7, #0]
    7c9a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c9c:	2103      	movs	r1, #3
    7c9e:	6878      	ldr	r0, [r7, #4]
    7ca0:	4b02      	ldr	r3, [pc, #8]	; (7cac <hri_tcc_write_CTRLA_reg+0x20>)
    7ca2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7ca4:	bf00      	nop
    7ca6:	3708      	adds	r7, #8
    7ca8:	46bd      	mov	sp, r7
    7caa:	bd80      	pop	{r7, pc}
    7cac:	00007ae9 	.word	0x00007ae9

00007cb0 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7cb0:	b480      	push	{r7}
    7cb2:	b083      	sub	sp, #12
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	6078      	str	r0, [r7, #4]
    7cb8:	460b      	mov	r3, r1
    7cba:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	78fa      	ldrb	r2, [r7, #3]
    7cc0:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7cc2:	bf00      	nop
    7cc4:	370c      	adds	r7, #12
    7cc6:	46bd      	mov	sp, r7
    7cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ccc:	4770      	bx	lr

00007cce <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7cce:	b480      	push	{r7}
    7cd0:	b083      	sub	sp, #12
    7cd2:	af00      	add	r7, sp, #0
    7cd4:	6078      	str	r0, [r7, #4]
    7cd6:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7cd8:	687b      	ldr	r3, [r7, #4]
    7cda:	683a      	ldr	r2, [r7, #0]
    7cdc:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7cde:	bf00      	nop
    7ce0:	370c      	adds	r7, #12
    7ce2:	46bd      	mov	sp, r7
    7ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ce8:	4770      	bx	lr
	...

00007cec <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7cec:	b580      	push	{r7, lr}
    7cee:	b082      	sub	sp, #8
    7cf0:	af00      	add	r7, sp, #0
    7cf2:	6078      	str	r0, [r7, #4]
    7cf4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7cf6:	687b      	ldr	r3, [r7, #4]
    7cf8:	683a      	ldr	r2, [r7, #0]
    7cfa:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7cfc:	2180      	movs	r1, #128	; 0x80
    7cfe:	6878      	ldr	r0, [r7, #4]
    7d00:	4b02      	ldr	r3, [pc, #8]	; (7d0c <hri_tcc_write_PER_reg+0x20>)
    7d02:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d04:	bf00      	nop
    7d06:	3708      	adds	r7, #8
    7d08:	46bd      	mov	sp, r7
    7d0a:	bd80      	pop	{r7, pc}
    7d0c:	00007ae9 	.word	0x00007ae9

00007d10 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7d10:	b580      	push	{r7, lr}
    7d12:	b082      	sub	sp, #8
    7d14:	af00      	add	r7, sp, #0
    7d16:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7d18:	2180      	movs	r1, #128	; 0x80
    7d1a:	6878      	ldr	r0, [r7, #4]
    7d1c:	4b03      	ldr	r3, [pc, #12]	; (7d2c <hri_tcc_read_PER_reg+0x1c>)
    7d1e:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7d20:	687b      	ldr	r3, [r7, #4]
    7d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7d24:	4618      	mov	r0, r3
    7d26:	3708      	adds	r7, #8
    7d28:	46bd      	mov	sp, r7
    7d2a:	bd80      	pop	{r7, pc}
    7d2c:	00007ae9 	.word	0x00007ae9

00007d30 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7d30:	b480      	push	{r7}
    7d32:	b083      	sub	sp, #12
    7d34:	af00      	add	r7, sp, #0
    7d36:	6078      	str	r0, [r7, #4]
    7d38:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7d3a:	687b      	ldr	r3, [r7, #4]
    7d3c:	4a09      	ldr	r2, [pc, #36]	; (7d64 <_tcc_init_irq_param+0x34>)
    7d3e:	4293      	cmp	r3, r2
    7d40:	d102      	bne.n	7d48 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7d42:	4a09      	ldr	r2, [pc, #36]	; (7d68 <_tcc_init_irq_param+0x38>)
    7d44:	683b      	ldr	r3, [r7, #0]
    7d46:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7d48:	687b      	ldr	r3, [r7, #4]
    7d4a:	4a08      	ldr	r2, [pc, #32]	; (7d6c <_tcc_init_irq_param+0x3c>)
    7d4c:	4293      	cmp	r3, r2
    7d4e:	d102      	bne.n	7d56 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7d50:	4a07      	ldr	r2, [pc, #28]	; (7d70 <_tcc_init_irq_param+0x40>)
    7d52:	683b      	ldr	r3, [r7, #0]
    7d54:	6013      	str	r3, [r2, #0]
	}
}
    7d56:	bf00      	nop
    7d58:	370c      	adds	r7, #12
    7d5a:	46bd      	mov	sp, r7
    7d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d60:	4770      	bx	lr
    7d62:	bf00      	nop
    7d64:	41016000 	.word	0x41016000
    7d68:	200009fc 	.word	0x200009fc
    7d6c:	41018000 	.word	0x41018000
    7d70:	20000a00 	.word	0x20000a00

00007d74 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7d74:	b580      	push	{r7, lr}
    7d76:	b084      	sub	sp, #16
    7d78:	af00      	add	r7, sp, #0
    7d7a:	6078      	str	r0, [r7, #4]
    7d7c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7d7e:	6838      	ldr	r0, [r7, #0]
    7d80:	4b33      	ldr	r3, [pc, #204]	; (7e50 <_tcc_timer_init+0xdc>)
    7d82:	4798      	blx	r3
    7d84:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7d86:	68fb      	ldr	r3, [r7, #12]
    7d88:	2b00      	cmp	r3, #0
    7d8a:	d102      	bne.n	7d92 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7d8c:	f06f 0309 	mvn.w	r3, #9
    7d90:	e05a      	b.n	7e48 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7d92:	687b      	ldr	r3, [r7, #4]
    7d94:	683a      	ldr	r2, [r7, #0]
    7d96:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7d98:	2101      	movs	r1, #1
    7d9a:	6838      	ldr	r0, [r7, #0]
    7d9c:	4b2d      	ldr	r3, [pc, #180]	; (7e54 <_tcc_timer_init+0xe0>)
    7d9e:	4798      	blx	r3
    7da0:	4603      	mov	r3, r0
    7da2:	f083 0301 	eor.w	r3, r3, #1
    7da6:	b2db      	uxtb	r3, r3
    7da8:	2b00      	cmp	r3, #0
    7daa:	d011      	beq.n	7dd0 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7dac:	2102      	movs	r1, #2
    7dae:	6838      	ldr	r0, [r7, #0]
    7db0:	4b29      	ldr	r3, [pc, #164]	; (7e58 <_tcc_timer_init+0xe4>)
    7db2:	4798      	blx	r3
    7db4:	4603      	mov	r3, r0
    7db6:	2b00      	cmp	r3, #0
    7db8:	d006      	beq.n	7dc8 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7dba:	6838      	ldr	r0, [r7, #0]
    7dbc:	4b27      	ldr	r3, [pc, #156]	; (7e5c <_tcc_timer_init+0xe8>)
    7dbe:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7dc0:	2102      	movs	r1, #2
    7dc2:	6838      	ldr	r0, [r7, #0]
    7dc4:	4b26      	ldr	r3, [pc, #152]	; (7e60 <_tcc_timer_init+0xec>)
    7dc6:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7dc8:	2101      	movs	r1, #1
    7dca:	6838      	ldr	r0, [r7, #0]
    7dcc:	4b25      	ldr	r3, [pc, #148]	; (7e64 <_tcc_timer_init+0xf0>)
    7dce:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7dd0:	2101      	movs	r1, #1
    7dd2:	6838      	ldr	r0, [r7, #0]
    7dd4:	4b22      	ldr	r3, [pc, #136]	; (7e60 <_tcc_timer_init+0xec>)
    7dd6:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7dd8:	68fb      	ldr	r3, [r7, #12]
    7dda:	689b      	ldr	r3, [r3, #8]
    7ddc:	4619      	mov	r1, r3
    7dde:	6838      	ldr	r0, [r7, #0]
    7de0:	4b20      	ldr	r3, [pc, #128]	; (7e64 <_tcc_timer_init+0xf0>)
    7de2:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7de4:	68fb      	ldr	r3, [r7, #12]
    7de6:	7b1b      	ldrb	r3, [r3, #12]
    7de8:	4619      	mov	r1, r3
    7dea:	6838      	ldr	r0, [r7, #0]
    7dec:	4b1e      	ldr	r3, [pc, #120]	; (7e68 <_tcc_timer_init+0xf4>)
    7dee:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7df0:	68fb      	ldr	r3, [r7, #12]
    7df2:	7b5b      	ldrb	r3, [r3, #13]
    7df4:	4619      	mov	r1, r3
    7df6:	6838      	ldr	r0, [r7, #0]
    7df8:	4b1c      	ldr	r3, [pc, #112]	; (7e6c <_tcc_timer_init+0xf8>)
    7dfa:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7dfc:	68fb      	ldr	r3, [r7, #12]
    7dfe:	691b      	ldr	r3, [r3, #16]
    7e00:	4619      	mov	r1, r3
    7e02:	6838      	ldr	r0, [r7, #0]
    7e04:	4b1a      	ldr	r3, [pc, #104]	; (7e70 <_tcc_timer_init+0xfc>)
    7e06:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7e08:	68fb      	ldr	r3, [r7, #12]
    7e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7e0c:	4619      	mov	r1, r3
    7e0e:	6838      	ldr	r0, [r7, #0]
    7e10:	4b18      	ldr	r3, [pc, #96]	; (7e74 <_tcc_timer_init+0x100>)
    7e12:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7e14:	6838      	ldr	r0, [r7, #0]
    7e16:	4b18      	ldr	r3, [pc, #96]	; (7e78 <_tcc_timer_init+0x104>)
    7e18:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7e1a:	6879      	ldr	r1, [r7, #4]
    7e1c:	6838      	ldr	r0, [r7, #0]
    7e1e:	4b17      	ldr	r3, [pc, #92]	; (7e7c <_tcc_timer_init+0x108>)
    7e20:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7e22:	68fb      	ldr	r3, [r7, #12]
    7e24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7e28:	4618      	mov	r0, r3
    7e2a:	4b15      	ldr	r3, [pc, #84]	; (7e80 <_tcc_timer_init+0x10c>)
    7e2c:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7e2e:	68fb      	ldr	r3, [r7, #12]
    7e30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7e34:	4618      	mov	r0, r3
    7e36:	4b13      	ldr	r3, [pc, #76]	; (7e84 <_tcc_timer_init+0x110>)
    7e38:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7e3a:	68fb      	ldr	r3, [r7, #12]
    7e3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7e40:	4618      	mov	r0, r3
    7e42:	4b11      	ldr	r3, [pc, #68]	; (7e88 <_tcc_timer_init+0x114>)
    7e44:	4798      	blx	r3

	return ERR_NONE;
    7e46:	2300      	movs	r3, #0
}
    7e48:	4618      	mov	r0, r3
    7e4a:	3710      	adds	r7, #16
    7e4c:	46bd      	mov	sp, r7
    7e4e:	bd80      	pop	{r7, pc}
    7e50:	0000803d 	.word	0x0000803d
    7e54:	00007b0d 	.word	0x00007b0d
    7e58:	00007c5d 	.word	0x00007c5d
    7e5c:	00007c35 	.word	0x00007c35
    7e60:	00007ae9 	.word	0x00007ae9
    7e64:	00007c8d 	.word	0x00007c8d
    7e68:	00007b75 	.word	0x00007b75
    7e6c:	00007cb1 	.word	0x00007cb1
    7e70:	00007ccf 	.word	0x00007ccf
    7e74:	00007ced 	.word	0x00007ced
    7e78:	00007b93 	.word	0x00007b93
    7e7c:	00007d31 	.word	0x00007d31
    7e80:	00007a69 	.word	0x00007a69
    7e84:	00007aad 	.word	0x00007aad
    7e88:	00007a2d 	.word	0x00007a2d

00007e8c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7e8c:	b580      	push	{r7, lr}
    7e8e:	b084      	sub	sp, #16
    7e90:	af00      	add	r7, sp, #0
    7e92:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7e94:	687b      	ldr	r3, [r7, #4]
    7e96:	68db      	ldr	r3, [r3, #12]
    7e98:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7e9a:	68f8      	ldr	r0, [r7, #12]
    7e9c:	4b0a      	ldr	r3, [pc, #40]	; (7ec8 <_tcc_timer_deinit+0x3c>)
    7e9e:	4798      	blx	r3
    7ea0:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7ea2:	68bb      	ldr	r3, [r7, #8]
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d00b      	beq.n	7ec0 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7ea8:	68bb      	ldr	r3, [r7, #8]
    7eaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7eae:	4618      	mov	r0, r3
    7eb0:	4b06      	ldr	r3, [pc, #24]	; (7ecc <_tcc_timer_deinit+0x40>)
    7eb2:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7eb4:	68f8      	ldr	r0, [r7, #12]
    7eb6:	4b06      	ldr	r3, [pc, #24]	; (7ed0 <_tcc_timer_deinit+0x44>)
    7eb8:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7eba:	68f8      	ldr	r0, [r7, #12]
    7ebc:	4b05      	ldr	r3, [pc, #20]	; (7ed4 <_tcc_timer_deinit+0x48>)
    7ebe:	4798      	blx	r3
	}
}
    7ec0:	bf00      	nop
    7ec2:	3710      	adds	r7, #16
    7ec4:	46bd      	mov	sp, r7
    7ec6:	bd80      	pop	{r7, pc}
    7ec8:	0000803d 	.word	0x0000803d
    7ecc:	00007a69 	.word	0x00007a69
    7ed0:	00007c35 	.word	0x00007c35
    7ed4:	00007bad 	.word	0x00007bad

00007ed8 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7ed8:	b580      	push	{r7, lr}
    7eda:	b082      	sub	sp, #8
    7edc:	af00      	add	r7, sp, #0
    7ede:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7ee0:	687b      	ldr	r3, [r7, #4]
    7ee2:	68db      	ldr	r3, [r3, #12]
    7ee4:	4618      	mov	r0, r3
    7ee6:	4b03      	ldr	r3, [pc, #12]	; (7ef4 <_tcc_timer_start+0x1c>)
    7ee8:	4798      	blx	r3
}
    7eea:	bf00      	nop
    7eec:	3708      	adds	r7, #8
    7eee:	46bd      	mov	sp, r7
    7ef0:	bd80      	pop	{r7, pc}
    7ef2:	bf00      	nop
    7ef4:	00007bd5 	.word	0x00007bd5

00007ef8 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7ef8:	b580      	push	{r7, lr}
    7efa:	b082      	sub	sp, #8
    7efc:	af00      	add	r7, sp, #0
    7efe:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	68db      	ldr	r3, [r3, #12]
    7f04:	4618      	mov	r0, r3
    7f06:	4b03      	ldr	r3, [pc, #12]	; (7f14 <_tcc_timer_stop+0x1c>)
    7f08:	4798      	blx	r3
}
    7f0a:	bf00      	nop
    7f0c:	3708      	adds	r7, #8
    7f0e:	46bd      	mov	sp, r7
    7f10:	bd80      	pop	{r7, pc}
    7f12:	bf00      	nop
    7f14:	00007c35 	.word	0x00007c35

00007f18 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7f18:	b580      	push	{r7, lr}
    7f1a:	b082      	sub	sp, #8
    7f1c:	af00      	add	r7, sp, #0
    7f1e:	6078      	str	r0, [r7, #4]
    7f20:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7f22:	687b      	ldr	r3, [r7, #4]
    7f24:	68db      	ldr	r3, [r3, #12]
    7f26:	6839      	ldr	r1, [r7, #0]
    7f28:	4618      	mov	r0, r3
    7f2a:	4b03      	ldr	r3, [pc, #12]	; (7f38 <_tcc_timer_set_period+0x20>)
    7f2c:	4798      	blx	r3
}
    7f2e:	bf00      	nop
    7f30:	3708      	adds	r7, #8
    7f32:	46bd      	mov	sp, r7
    7f34:	bd80      	pop	{r7, pc}
    7f36:	bf00      	nop
    7f38:	00007ced 	.word	0x00007ced

00007f3c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7f3c:	b580      	push	{r7, lr}
    7f3e:	b082      	sub	sp, #8
    7f40:	af00      	add	r7, sp, #0
    7f42:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7f44:	687b      	ldr	r3, [r7, #4]
    7f46:	68db      	ldr	r3, [r3, #12]
    7f48:	4618      	mov	r0, r3
    7f4a:	4b03      	ldr	r3, [pc, #12]	; (7f58 <_tcc_timer_get_period+0x1c>)
    7f4c:	4798      	blx	r3
    7f4e:	4603      	mov	r3, r0
}
    7f50:	4618      	mov	r0, r3
    7f52:	3708      	adds	r7, #8
    7f54:	46bd      	mov	sp, r7
    7f56:	bd80      	pop	{r7, pc}
    7f58:	00007d11 	.word	0x00007d11

00007f5c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7f5c:	b580      	push	{r7, lr}
    7f5e:	b082      	sub	sp, #8
    7f60:	af00      	add	r7, sp, #0
    7f62:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7f64:	687b      	ldr	r3, [r7, #4]
    7f66:	68db      	ldr	r3, [r3, #12]
    7f68:	4618      	mov	r0, r3
    7f6a:	4b03      	ldr	r3, [pc, #12]	; (7f78 <_tcc_timer_is_started+0x1c>)
    7f6c:	4798      	blx	r3
    7f6e:	4603      	mov	r3, r0
}
    7f70:	4618      	mov	r0, r3
    7f72:	3708      	adds	r7, #8
    7f74:	46bd      	mov	sp, r7
    7f76:	bd80      	pop	{r7, pc}
    7f78:	00007bfd 	.word	0x00007bfd

00007f7c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7f7c:	b480      	push	{r7}
    7f7e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7f80:	4b02      	ldr	r3, [pc, #8]	; (7f8c <_tcc_get_timer+0x10>)
}
    7f82:	4618      	mov	r0, r3
    7f84:	46bd      	mov	sp, r7
    7f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f8a:	4770      	bx	lr
    7f8c:	200000c0 	.word	0x200000c0

00007f90 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7f90:	b580      	push	{r7, lr}
    7f92:	b084      	sub	sp, #16
    7f94:	af00      	add	r7, sp, #0
    7f96:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7f98:	687b      	ldr	r3, [r7, #4]
    7f9a:	68db      	ldr	r3, [r3, #12]
    7f9c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7f9e:	68f8      	ldr	r0, [r7, #12]
    7fa0:	4b08      	ldr	r3, [pc, #32]	; (7fc4 <_tcc_timer_set_irq+0x34>)
    7fa2:	4798      	blx	r3
    7fa4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7fa6:	68bb      	ldr	r3, [r7, #8]
    7fa8:	2b00      	cmp	r3, #0
    7faa:	d006      	beq.n	7fba <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7fac:	68bb      	ldr	r3, [r7, #8]
    7fae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7fb2:	b2db      	uxtb	r3, r3
    7fb4:	4618      	mov	r0, r3
    7fb6:	4b04      	ldr	r3, [pc, #16]	; (7fc8 <_tcc_timer_set_irq+0x38>)
    7fb8:	4798      	blx	r3
	}
}
    7fba:	bf00      	nop
    7fbc:	3710      	adds	r7, #16
    7fbe:	46bd      	mov	sp, r7
    7fc0:	bd80      	pop	{r7, pc}
    7fc2:	bf00      	nop
    7fc4:	0000803d 	.word	0x0000803d
    7fc8:	000044f9 	.word	0x000044f9

00007fcc <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7fcc:	b580      	push	{r7, lr}
    7fce:	b084      	sub	sp, #16
    7fd0:	af00      	add	r7, sp, #0
    7fd2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7fd4:	687b      	ldr	r3, [r7, #4]
    7fd6:	68db      	ldr	r3, [r3, #12]
    7fd8:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7fda:	68f8      	ldr	r0, [r7, #12]
    7fdc:	4b07      	ldr	r3, [pc, #28]	; (7ffc <tcc_interrupt_handler+0x30>)
    7fde:	4798      	blx	r3
    7fe0:	4603      	mov	r3, r0
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d006      	beq.n	7ff4 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7fe6:	68f8      	ldr	r0, [r7, #12]
    7fe8:	4b05      	ldr	r3, [pc, #20]	; (8000 <tcc_interrupt_handler+0x34>)
    7fea:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7fec:	687b      	ldr	r3, [r7, #4]
    7fee:	681b      	ldr	r3, [r3, #0]
    7ff0:	6878      	ldr	r0, [r7, #4]
    7ff2:	4798      	blx	r3
	}
}
    7ff4:	bf00      	nop
    7ff6:	3710      	adds	r7, #16
    7ff8:	46bd      	mov	sp, r7
    7ffa:	bd80      	pop	{r7, pc}
    7ffc:	00007b35 	.word	0x00007b35
    8000:	00007b5b 	.word	0x00007b5b

00008004 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    8004:	b580      	push	{r7, lr}
    8006:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    8008:	4b03      	ldr	r3, [pc, #12]	; (8018 <TCC0_0_Handler+0x14>)
    800a:	681b      	ldr	r3, [r3, #0]
    800c:	4618      	mov	r0, r3
    800e:	4b03      	ldr	r3, [pc, #12]	; (801c <TCC0_0_Handler+0x18>)
    8010:	4798      	blx	r3
}
    8012:	bf00      	nop
    8014:	bd80      	pop	{r7, pc}
    8016:	bf00      	nop
    8018:	200009fc 	.word	0x200009fc
    801c:	00007fcd 	.word	0x00007fcd

00008020 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    8020:	b580      	push	{r7, lr}
    8022:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    8024:	4b03      	ldr	r3, [pc, #12]	; (8034 <TCC1_0_Handler+0x14>)
    8026:	681b      	ldr	r3, [r3, #0]
    8028:	4618      	mov	r0, r3
    802a:	4b03      	ldr	r3, [pc, #12]	; (8038 <TCC1_0_Handler+0x18>)
    802c:	4798      	blx	r3
}
    802e:	bf00      	nop
    8030:	bd80      	pop	{r7, pc}
    8032:	bf00      	nop
    8034:	20000a00 	.word	0x20000a00
    8038:	00007fcd 	.word	0x00007fcd

0000803c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    803c:	b480      	push	{r7}
    803e:	b085      	sub	sp, #20
    8040:	af00      	add	r7, sp, #0
    8042:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8044:	2300      	movs	r3, #0
    8046:	73fb      	strb	r3, [r7, #15]
    8048:	e015      	b.n	8076 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    804a:	7bfa      	ldrb	r2, [r7, #15]
    804c:	490f      	ldr	r1, [pc, #60]	; (808c <_get_tcc_cfg+0x50>)
    804e:	4613      	mov	r3, r2
    8050:	005b      	lsls	r3, r3, #1
    8052:	4413      	add	r3, r2
    8054:	011b      	lsls	r3, r3, #4
    8056:	440b      	add	r3, r1
    8058:	681a      	ldr	r2, [r3, #0]
    805a:	687b      	ldr	r3, [r7, #4]
    805c:	429a      	cmp	r2, r3
    805e:	d107      	bne.n	8070 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    8060:	7bfa      	ldrb	r2, [r7, #15]
    8062:	4613      	mov	r3, r2
    8064:	005b      	lsls	r3, r3, #1
    8066:	4413      	add	r3, r2
    8068:	011b      	lsls	r3, r3, #4
    806a:	4a08      	ldr	r2, [pc, #32]	; (808c <_get_tcc_cfg+0x50>)
    806c:	4413      	add	r3, r2
    806e:	e006      	b.n	807e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8070:	7bfb      	ldrb	r3, [r7, #15]
    8072:	3301      	adds	r3, #1
    8074:	73fb      	strb	r3, [r7, #15]
    8076:	7bfb      	ldrb	r3, [r7, #15]
    8078:	2b01      	cmp	r3, #1
    807a:	d9e6      	bls.n	804a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    807c:	2300      	movs	r3, #0
}
    807e:	4618      	mov	r0, r3
    8080:	3714      	adds	r7, #20
    8082:	46bd      	mov	sp, r7
    8084:	f85d 7b04 	ldr.w	r7, [sp], #4
    8088:	4770      	bx	lr
    808a:	bf00      	nop
    808c:	20000060 	.word	0x20000060

00008090 <__NVIC_EnableIRQ>:
{
    8090:	b480      	push	{r7}
    8092:	b083      	sub	sp, #12
    8094:	af00      	add	r7, sp, #0
    8096:	4603      	mov	r3, r0
    8098:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    809a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    809e:	2b00      	cmp	r3, #0
    80a0:	db0b      	blt.n	80ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    80a2:	4909      	ldr	r1, [pc, #36]	; (80c8 <__NVIC_EnableIRQ+0x38>)
    80a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80a8:	095b      	lsrs	r3, r3, #5
    80aa:	88fa      	ldrh	r2, [r7, #6]
    80ac:	f002 021f 	and.w	r2, r2, #31
    80b0:	2001      	movs	r0, #1
    80b2:	fa00 f202 	lsl.w	r2, r0, r2
    80b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    80ba:	bf00      	nop
    80bc:	370c      	adds	r7, #12
    80be:	46bd      	mov	sp, r7
    80c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    80c4:	4770      	bx	lr
    80c6:	bf00      	nop
    80c8:	e000e100 	.word	0xe000e100

000080cc <__NVIC_DisableIRQ>:
{
    80cc:	b480      	push	{r7}
    80ce:	b083      	sub	sp, #12
    80d0:	af00      	add	r7, sp, #0
    80d2:	4603      	mov	r3, r0
    80d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    80d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80da:	2b00      	cmp	r3, #0
    80dc:	db10      	blt.n	8100 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    80de:	490b      	ldr	r1, [pc, #44]	; (810c <__NVIC_DisableIRQ+0x40>)
    80e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80e4:	095b      	lsrs	r3, r3, #5
    80e6:	88fa      	ldrh	r2, [r7, #6]
    80e8:	f002 021f 	and.w	r2, r2, #31
    80ec:	2001      	movs	r0, #1
    80ee:	fa00 f202 	lsl.w	r2, r0, r2
    80f2:	3320      	adds	r3, #32
    80f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    80f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    80fc:	f3bf 8f6f 	isb	sy
}
    8100:	bf00      	nop
    8102:	370c      	adds	r7, #12
    8104:	46bd      	mov	sp, r7
    8106:	f85d 7b04 	ldr.w	r7, [sp], #4
    810a:	4770      	bx	lr
    810c:	e000e100 	.word	0xe000e100

00008110 <__NVIC_ClearPendingIRQ>:
{
    8110:	b480      	push	{r7}
    8112:	b083      	sub	sp, #12
    8114:	af00      	add	r7, sp, #0
    8116:	4603      	mov	r3, r0
    8118:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    811a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    811e:	2b00      	cmp	r3, #0
    8120:	db0c      	blt.n	813c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8122:	4909      	ldr	r1, [pc, #36]	; (8148 <__NVIC_ClearPendingIRQ+0x38>)
    8124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8128:	095b      	lsrs	r3, r3, #5
    812a:	88fa      	ldrh	r2, [r7, #6]
    812c:	f002 021f 	and.w	r2, r2, #31
    8130:	2001      	movs	r0, #1
    8132:	fa00 f202 	lsl.w	r2, r0, r2
    8136:	3360      	adds	r3, #96	; 0x60
    8138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    813c:	bf00      	nop
    813e:	370c      	adds	r7, #12
    8140:	46bd      	mov	sp, r7
    8142:	f85d 7b04 	ldr.w	r7, [sp], #4
    8146:	4770      	bx	lr
    8148:	e000e100 	.word	0xe000e100

0000814c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    814c:	b480      	push	{r7}
    814e:	b083      	sub	sp, #12
    8150:	af00      	add	r7, sp, #0
    8152:	6078      	str	r0, [r7, #4]
    8154:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8156:	bf00      	nop
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	691a      	ldr	r2, [r3, #16]
    815c:	683b      	ldr	r3, [r7, #0]
    815e:	4013      	ands	r3, r2
    8160:	2b00      	cmp	r3, #0
    8162:	d1f9      	bne.n	8158 <hri_tc_wait_for_sync+0xc>
	};
}
    8164:	bf00      	nop
    8166:	370c      	adds	r7, #12
    8168:	46bd      	mov	sp, r7
    816a:	f85d 7b04 	ldr.w	r7, [sp], #4
    816e:	4770      	bx	lr

00008170 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8170:	b480      	push	{r7}
    8172:	b083      	sub	sp, #12
    8174:	af00      	add	r7, sp, #0
    8176:	6078      	str	r0, [r7, #4]
    8178:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    817a:	687b      	ldr	r3, [r7, #4]
    817c:	691a      	ldr	r2, [r3, #16]
    817e:	683b      	ldr	r3, [r7, #0]
    8180:	4013      	ands	r3, r2
    8182:	2b00      	cmp	r3, #0
    8184:	bf14      	ite	ne
    8186:	2301      	movne	r3, #1
    8188:	2300      	moveq	r3, #0
    818a:	b2db      	uxtb	r3, r3
}
    818c:	4618      	mov	r0, r3
    818e:	370c      	adds	r7, #12
    8190:	46bd      	mov	sp, r7
    8192:	f85d 7b04 	ldr.w	r7, [sp], #4
    8196:	4770      	bx	lr

00008198 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    8198:	b480      	push	{r7}
    819a:	b083      	sub	sp, #12
    819c:	af00      	add	r7, sp, #0
    819e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    81a0:	687b      	ldr	r3, [r7, #4]
    81a2:	7a9b      	ldrb	r3, [r3, #10]
    81a4:	b2db      	uxtb	r3, r3
    81a6:	f003 0301 	and.w	r3, r3, #1
    81aa:	2b00      	cmp	r3, #0
    81ac:	bf14      	ite	ne
    81ae:	2301      	movne	r3, #1
    81b0:	2300      	moveq	r3, #0
    81b2:	b2db      	uxtb	r3, r3
}
    81b4:	4618      	mov	r0, r3
    81b6:	370c      	adds	r7, #12
    81b8:	46bd      	mov	sp, r7
    81ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    81be:	4770      	bx	lr

000081c0 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    81c0:	b480      	push	{r7}
    81c2:	b083      	sub	sp, #12
    81c4:	af00      	add	r7, sp, #0
    81c6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    81c8:	687b      	ldr	r3, [r7, #4]
    81ca:	2201      	movs	r2, #1
    81cc:	729a      	strb	r2, [r3, #10]
}
    81ce:	bf00      	nop
    81d0:	370c      	adds	r7, #12
    81d2:	46bd      	mov	sp, r7
    81d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81d8:	4770      	bx	lr

000081da <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    81da:	b480      	push	{r7}
    81dc:	b083      	sub	sp, #12
    81de:	af00      	add	r7, sp, #0
    81e0:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    81e2:	687b      	ldr	r3, [r7, #4]
    81e4:	2202      	movs	r2, #2
    81e6:	729a      	strb	r2, [r3, #10]
}
    81e8:	bf00      	nop
    81ea:	370c      	adds	r7, #12
    81ec:	46bd      	mov	sp, r7
    81ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    81f2:	4770      	bx	lr

000081f4 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    81f4:	b480      	push	{r7}
    81f6:	b083      	sub	sp, #12
    81f8:	af00      	add	r7, sp, #0
    81fa:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    81fc:	687b      	ldr	r3, [r7, #4]
    81fe:	2201      	movs	r2, #1
    8200:	725a      	strb	r2, [r3, #9]
}
    8202:	bf00      	nop
    8204:	370c      	adds	r7, #12
    8206:	46bd      	mov	sp, r7
    8208:	f85d 7b04 	ldr.w	r7, [sp], #4
    820c:	4770      	bx	lr

0000820e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    820e:	b480      	push	{r7}
    8210:	b083      	sub	sp, #12
    8212:	af00      	add	r7, sp, #0
    8214:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    8216:	687b      	ldr	r3, [r7, #4]
    8218:	7a5b      	ldrb	r3, [r3, #9]
    821a:	b2db      	uxtb	r3, r3
    821c:	085b      	lsrs	r3, r3, #1
    821e:	f003 0301 	and.w	r3, r3, #1
    8222:	2b00      	cmp	r3, #0
    8224:	bf14      	ite	ne
    8226:	2301      	movne	r3, #1
    8228:	2300      	moveq	r3, #0
    822a:	b2db      	uxtb	r3, r3
}
    822c:	4618      	mov	r0, r3
    822e:	370c      	adds	r7, #12
    8230:	46bd      	mov	sp, r7
    8232:	f85d 7b04 	ldr.w	r7, [sp], #4
    8236:	4770      	bx	lr

00008238 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8238:	b580      	push	{r7, lr}
    823a:	b082      	sub	sp, #8
    823c:	af00      	add	r7, sp, #0
    823e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8240:	687b      	ldr	r3, [r7, #4]
    8242:	681b      	ldr	r3, [r3, #0]
    8244:	f043 0201 	orr.w	r2, r3, #1
    8248:	687b      	ldr	r3, [r7, #4]
    824a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    824c:	2101      	movs	r1, #1
    824e:	6878      	ldr	r0, [r7, #4]
    8250:	4b02      	ldr	r3, [pc, #8]	; (825c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    8252:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8254:	bf00      	nop
    8256:	3708      	adds	r7, #8
    8258:	46bd      	mov	sp, r7
    825a:	bd80      	pop	{r7, pc}
    825c:	0000814d 	.word	0x0000814d

00008260 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8260:	b580      	push	{r7, lr}
    8262:	b082      	sub	sp, #8
    8264:	af00      	add	r7, sp, #0
    8266:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8268:	687b      	ldr	r3, [r7, #4]
    826a:	681b      	ldr	r3, [r3, #0]
    826c:	f043 0202 	orr.w	r2, r3, #2
    8270:	687b      	ldr	r3, [r7, #4]
    8272:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8274:	2103      	movs	r1, #3
    8276:	6878      	ldr	r0, [r7, #4]
    8278:	4b02      	ldr	r3, [pc, #8]	; (8284 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    827a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    827c:	bf00      	nop
    827e:	3708      	adds	r7, #8
    8280:	46bd      	mov	sp, r7
    8282:	bd80      	pop	{r7, pc}
    8284:	0000814d 	.word	0x0000814d

00008288 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8288:	b580      	push	{r7, lr}
    828a:	b084      	sub	sp, #16
    828c:	af00      	add	r7, sp, #0
    828e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8290:	2103      	movs	r1, #3
    8292:	6878      	ldr	r0, [r7, #4]
    8294:	4b09      	ldr	r3, [pc, #36]	; (82bc <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    8296:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8298:	687b      	ldr	r3, [r7, #4]
    829a:	681b      	ldr	r3, [r3, #0]
    829c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    829e:	68fb      	ldr	r3, [r7, #12]
    82a0:	085b      	lsrs	r3, r3, #1
    82a2:	f003 0301 	and.w	r3, r3, #1
    82a6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    82a8:	68fb      	ldr	r3, [r7, #12]
    82aa:	2b00      	cmp	r3, #0
    82ac:	bf14      	ite	ne
    82ae:	2301      	movne	r3, #1
    82b0:	2300      	moveq	r3, #0
    82b2:	b2db      	uxtb	r3, r3
}
    82b4:	4618      	mov	r0, r3
    82b6:	3710      	adds	r7, #16
    82b8:	46bd      	mov	sp, r7
    82ba:	bd80      	pop	{r7, pc}
    82bc:	0000814d 	.word	0x0000814d

000082c0 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    82c0:	b580      	push	{r7, lr}
    82c2:	b082      	sub	sp, #8
    82c4:	af00      	add	r7, sp, #0
    82c6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    82c8:	687b      	ldr	r3, [r7, #4]
    82ca:	681b      	ldr	r3, [r3, #0]
    82cc:	f023 0202 	bic.w	r2, r3, #2
    82d0:	687b      	ldr	r3, [r7, #4]
    82d2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    82d4:	2103      	movs	r1, #3
    82d6:	6878      	ldr	r0, [r7, #4]
    82d8:	4b02      	ldr	r3, [pc, #8]	; (82e4 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    82da:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    82dc:	bf00      	nop
    82de:	3708      	adds	r7, #8
    82e0:	46bd      	mov	sp, r7
    82e2:	bd80      	pop	{r7, pc}
    82e4:	0000814d 	.word	0x0000814d

000082e8 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    82e8:	b480      	push	{r7}
    82ea:	b085      	sub	sp, #20
    82ec:	af00      	add	r7, sp, #0
    82ee:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    82f0:	687b      	ldr	r3, [r7, #4]
    82f2:	681b      	ldr	r3, [r3, #0]
    82f4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    82f6:	68fb      	ldr	r3, [r7, #12]
    82f8:	089b      	lsrs	r3, r3, #2
    82fa:	f003 0303 	and.w	r3, r3, #3
    82fe:	60fb      	str	r3, [r7, #12]
	return tmp;
    8300:	68fb      	ldr	r3, [r7, #12]
}
    8302:	4618      	mov	r0, r3
    8304:	3714      	adds	r7, #20
    8306:	46bd      	mov	sp, r7
    8308:	f85d 7b04 	ldr.w	r7, [sp], #4
    830c:	4770      	bx	lr
	...

00008310 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    8310:	b580      	push	{r7, lr}
    8312:	b084      	sub	sp, #16
    8314:	af00      	add	r7, sp, #0
    8316:	6078      	str	r0, [r7, #4]
    8318:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    831a:	2103      	movs	r1, #3
    831c:	6878      	ldr	r0, [r7, #4]
    831e:	4b07      	ldr	r3, [pc, #28]	; (833c <hri_tc_get_CTRLA_reg+0x2c>)
    8320:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8322:	687b      	ldr	r3, [r7, #4]
    8324:	681b      	ldr	r3, [r3, #0]
    8326:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8328:	68fa      	ldr	r2, [r7, #12]
    832a:	683b      	ldr	r3, [r7, #0]
    832c:	4013      	ands	r3, r2
    832e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8330:	68fb      	ldr	r3, [r7, #12]
}
    8332:	4618      	mov	r0, r3
    8334:	3710      	adds	r7, #16
    8336:	46bd      	mov	sp, r7
    8338:	bd80      	pop	{r7, pc}
    833a:	bf00      	nop
    833c:	0000814d 	.word	0x0000814d

00008340 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8340:	b580      	push	{r7, lr}
    8342:	b082      	sub	sp, #8
    8344:	af00      	add	r7, sp, #0
    8346:	6078      	str	r0, [r7, #4]
    8348:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    834a:	687b      	ldr	r3, [r7, #4]
    834c:	683a      	ldr	r2, [r7, #0]
    834e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8350:	2103      	movs	r1, #3
    8352:	6878      	ldr	r0, [r7, #4]
    8354:	4b02      	ldr	r3, [pc, #8]	; (8360 <hri_tc_write_CTRLA_reg+0x20>)
    8356:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8358:	bf00      	nop
    835a:	3708      	adds	r7, #8
    835c:	46bd      	mov	sp, r7
    835e:	bd80      	pop	{r7, pc}
    8360:	0000814d 	.word	0x0000814d

00008364 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8364:	b480      	push	{r7}
    8366:	b083      	sub	sp, #12
    8368:	af00      	add	r7, sp, #0
    836a:	6078      	str	r0, [r7, #4]
    836c:	460b      	mov	r3, r1
    836e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8370:	687b      	ldr	r3, [r7, #4]
    8372:	887a      	ldrh	r2, [r7, #2]
    8374:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    8376:	bf00      	nop
    8378:	370c      	adds	r7, #12
    837a:	46bd      	mov	sp, r7
    837c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8380:	4770      	bx	lr

00008382 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    8382:	b480      	push	{r7}
    8384:	b083      	sub	sp, #12
    8386:	af00      	add	r7, sp, #0
    8388:	6078      	str	r0, [r7, #4]
    838a:	460b      	mov	r3, r1
    838c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    838e:	687b      	ldr	r3, [r7, #4]
    8390:	78fa      	ldrb	r2, [r7, #3]
    8392:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    8394:	bf00      	nop
    8396:	370c      	adds	r7, #12
    8398:	46bd      	mov	sp, r7
    839a:	f85d 7b04 	ldr.w	r7, [sp], #4
    839e:	4770      	bx	lr

000083a0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    83a0:	b480      	push	{r7}
    83a2:	b083      	sub	sp, #12
    83a4:	af00      	add	r7, sp, #0
    83a6:	6078      	str	r0, [r7, #4]
    83a8:	460b      	mov	r3, r1
    83aa:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    83ac:	687b      	ldr	r3, [r7, #4]
    83ae:	78fa      	ldrb	r2, [r7, #3]
    83b0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    83b2:	bf00      	nop
    83b4:	370c      	adds	r7, #12
    83b6:	46bd      	mov	sp, r7
    83b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83bc:	4770      	bx	lr
	...

000083c0 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    83c0:	b580      	push	{r7, lr}
    83c2:	b082      	sub	sp, #8
    83c4:	af00      	add	r7, sp, #0
    83c6:	6078      	str	r0, [r7, #4]
    83c8:	460b      	mov	r3, r1
    83ca:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    83cc:	687b      	ldr	r3, [r7, #4]
    83ce:	78fa      	ldrb	r2, [r7, #3]
    83d0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    83d2:	2120      	movs	r1, #32
    83d4:	6878      	ldr	r0, [r7, #4]
    83d6:	4b03      	ldr	r3, [pc, #12]	; (83e4 <hri_tccount8_write_PER_reg+0x24>)
    83d8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    83da:	bf00      	nop
    83dc:	3708      	adds	r7, #8
    83de:	46bd      	mov	sp, r7
    83e0:	bd80      	pop	{r7, pc}
    83e2:	bf00      	nop
    83e4:	0000814d 	.word	0x0000814d

000083e8 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    83e8:	b580      	push	{r7, lr}
    83ea:	b082      	sub	sp, #8
    83ec:	af00      	add	r7, sp, #0
    83ee:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    83f0:	2120      	movs	r1, #32
    83f2:	6878      	ldr	r0, [r7, #4]
    83f4:	4b04      	ldr	r3, [pc, #16]	; (8408 <hri_tccount8_read_PER_reg+0x20>)
    83f6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    83f8:	687b      	ldr	r3, [r7, #4]
    83fa:	7edb      	ldrb	r3, [r3, #27]
    83fc:	b2db      	uxtb	r3, r3
}
    83fe:	4618      	mov	r0, r3
    8400:	3708      	adds	r7, #8
    8402:	46bd      	mov	sp, r7
    8404:	bd80      	pop	{r7, pc}
    8406:	bf00      	nop
    8408:	0000814d 	.word	0x0000814d

0000840c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    840c:	b580      	push	{r7, lr}
    840e:	b082      	sub	sp, #8
    8410:	af00      	add	r7, sp, #0
    8412:	6078      	str	r0, [r7, #4]
    8414:	460b      	mov	r3, r1
    8416:	70fb      	strb	r3, [r7, #3]
    8418:	4613      	mov	r3, r2
    841a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    841c:	78fb      	ldrb	r3, [r7, #3]
    841e:	687a      	ldr	r2, [r7, #4]
    8420:	4413      	add	r3, r2
    8422:	78ba      	ldrb	r2, [r7, #2]
    8424:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8426:	21c0      	movs	r1, #192	; 0xc0
    8428:	6878      	ldr	r0, [r7, #4]
    842a:	4b03      	ldr	r3, [pc, #12]	; (8438 <hri_tccount8_write_CC_reg+0x2c>)
    842c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    842e:	bf00      	nop
    8430:	3708      	adds	r7, #8
    8432:	46bd      	mov	sp, r7
    8434:	bd80      	pop	{r7, pc}
    8436:	bf00      	nop
    8438:	0000814d 	.word	0x0000814d

0000843c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    843c:	b580      	push	{r7, lr}
    843e:	b082      	sub	sp, #8
    8440:	af00      	add	r7, sp, #0
    8442:	6078      	str	r0, [r7, #4]
    8444:	460b      	mov	r3, r1
    8446:	70fb      	strb	r3, [r7, #3]
    8448:	4613      	mov	r3, r2
    844a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    844c:	78fb      	ldrb	r3, [r7, #3]
    844e:	687a      	ldr	r2, [r7, #4]
    8450:	330c      	adds	r3, #12
    8452:	005b      	lsls	r3, r3, #1
    8454:	4413      	add	r3, r2
    8456:	883a      	ldrh	r2, [r7, #0]
    8458:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    845a:	21c0      	movs	r1, #192	; 0xc0
    845c:	6878      	ldr	r0, [r7, #4]
    845e:	4b03      	ldr	r3, [pc, #12]	; (846c <hri_tccount16_write_CC_reg+0x30>)
    8460:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8462:	bf00      	nop
    8464:	3708      	adds	r7, #8
    8466:	46bd      	mov	sp, r7
    8468:	bd80      	pop	{r7, pc}
    846a:	bf00      	nop
    846c:	0000814d 	.word	0x0000814d

00008470 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8470:	b580      	push	{r7, lr}
    8472:	b082      	sub	sp, #8
    8474:	af00      	add	r7, sp, #0
    8476:	6078      	str	r0, [r7, #4]
    8478:	460b      	mov	r3, r1
    847a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    847c:	21c0      	movs	r1, #192	; 0xc0
    847e:	6878      	ldr	r0, [r7, #4]
    8480:	4b06      	ldr	r3, [pc, #24]	; (849c <hri_tccount16_read_CC_reg+0x2c>)
    8482:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8484:	78fb      	ldrb	r3, [r7, #3]
    8486:	687a      	ldr	r2, [r7, #4]
    8488:	330c      	adds	r3, #12
    848a:	005b      	lsls	r3, r3, #1
    848c:	4413      	add	r3, r2
    848e:	889b      	ldrh	r3, [r3, #4]
    8490:	b29b      	uxth	r3, r3
}
    8492:	4618      	mov	r0, r3
    8494:	3708      	adds	r7, #8
    8496:	46bd      	mov	sp, r7
    8498:	bd80      	pop	{r7, pc}
    849a:	bf00      	nop
    849c:	0000814d 	.word	0x0000814d

000084a0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    84a0:	b580      	push	{r7, lr}
    84a2:	b084      	sub	sp, #16
    84a4:	af00      	add	r7, sp, #0
    84a6:	60f8      	str	r0, [r7, #12]
    84a8:	460b      	mov	r3, r1
    84aa:	607a      	str	r2, [r7, #4]
    84ac:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    84ae:	7afb      	ldrb	r3, [r7, #11]
    84b0:	68fa      	ldr	r2, [r7, #12]
    84b2:	3306      	adds	r3, #6
    84b4:	009b      	lsls	r3, r3, #2
    84b6:	4413      	add	r3, r2
    84b8:	687a      	ldr	r2, [r7, #4]
    84ba:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    84bc:	21c0      	movs	r1, #192	; 0xc0
    84be:	68f8      	ldr	r0, [r7, #12]
    84c0:	4b02      	ldr	r3, [pc, #8]	; (84cc <hri_tccount32_write_CC_reg+0x2c>)
    84c2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    84c4:	bf00      	nop
    84c6:	3710      	adds	r7, #16
    84c8:	46bd      	mov	sp, r7
    84ca:	bd80      	pop	{r7, pc}
    84cc:	0000814d 	.word	0x0000814d

000084d0 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    84d0:	b580      	push	{r7, lr}
    84d2:	b082      	sub	sp, #8
    84d4:	af00      	add	r7, sp, #0
    84d6:	6078      	str	r0, [r7, #4]
    84d8:	460b      	mov	r3, r1
    84da:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    84dc:	21c0      	movs	r1, #192	; 0xc0
    84de:	6878      	ldr	r0, [r7, #4]
    84e0:	4b05      	ldr	r3, [pc, #20]	; (84f8 <hri_tccount32_read_CC_reg+0x28>)
    84e2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    84e4:	78fb      	ldrb	r3, [r7, #3]
    84e6:	687a      	ldr	r2, [r7, #4]
    84e8:	3306      	adds	r3, #6
    84ea:	009b      	lsls	r3, r3, #2
    84ec:	4413      	add	r3, r2
    84ee:	685b      	ldr	r3, [r3, #4]
}
    84f0:	4618      	mov	r0, r3
    84f2:	3708      	adds	r7, #8
    84f4:	46bd      	mov	sp, r7
    84f6:	bd80      	pop	{r7, pc}
    84f8:	0000814d 	.word	0x0000814d

000084fc <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    84fc:	b580      	push	{r7, lr}
    84fe:	b084      	sub	sp, #16
    8500:	af00      	add	r7, sp, #0
    8502:	6078      	str	r0, [r7, #4]
    8504:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    8506:	6838      	ldr	r0, [r7, #0]
    8508:	4b93      	ldr	r3, [pc, #588]	; (8758 <_tc_timer_init+0x25c>)
    850a:	4798      	blx	r3
    850c:	4603      	mov	r3, r0
    850e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    8510:	687b      	ldr	r3, [r7, #4]
    8512:	683a      	ldr	r2, [r7, #0]
    8514:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    8516:	22a4      	movs	r2, #164	; 0xa4
    8518:	4990      	ldr	r1, [pc, #576]	; (875c <_tc_timer_init+0x260>)
    851a:	2001      	movs	r0, #1
    851c:	4b90      	ldr	r3, [pc, #576]	; (8760 <_tc_timer_init+0x264>)
    851e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8520:	2101      	movs	r1, #1
    8522:	6838      	ldr	r0, [r7, #0]
    8524:	4b8f      	ldr	r3, [pc, #572]	; (8764 <_tc_timer_init+0x268>)
    8526:	4798      	blx	r3
    8528:	4603      	mov	r3, r0
    852a:	f083 0301 	eor.w	r3, r3, #1
    852e:	b2db      	uxtb	r3, r3
    8530:	2b00      	cmp	r3, #0
    8532:	d011      	beq.n	8558 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8534:	2102      	movs	r1, #2
    8536:	6838      	ldr	r0, [r7, #0]
    8538:	4b8b      	ldr	r3, [pc, #556]	; (8768 <_tc_timer_init+0x26c>)
    853a:	4798      	blx	r3
    853c:	4603      	mov	r3, r0
    853e:	2b00      	cmp	r3, #0
    8540:	d006      	beq.n	8550 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8542:	6838      	ldr	r0, [r7, #0]
    8544:	4b89      	ldr	r3, [pc, #548]	; (876c <_tc_timer_init+0x270>)
    8546:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8548:	2102      	movs	r1, #2
    854a:	6838      	ldr	r0, [r7, #0]
    854c:	4b88      	ldr	r3, [pc, #544]	; (8770 <_tc_timer_init+0x274>)
    854e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8550:	2101      	movs	r1, #1
    8552:	6838      	ldr	r0, [r7, #0]
    8554:	4b87      	ldr	r3, [pc, #540]	; (8774 <_tc_timer_init+0x278>)
    8556:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8558:	2101      	movs	r1, #1
    855a:	6838      	ldr	r0, [r7, #0]
    855c:	4b84      	ldr	r3, [pc, #528]	; (8770 <_tc_timer_init+0x274>)
    855e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8560:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8564:	4984      	ldr	r1, [pc, #528]	; (8778 <_tc_timer_init+0x27c>)
    8566:	4613      	mov	r3, r2
    8568:	009b      	lsls	r3, r3, #2
    856a:	4413      	add	r3, r2
    856c:	009b      	lsls	r3, r3, #2
    856e:	440b      	add	r3, r1
    8570:	3304      	adds	r3, #4
    8572:	681b      	ldr	r3, [r3, #0]
    8574:	4619      	mov	r1, r3
    8576:	6838      	ldr	r0, [r7, #0]
    8578:	4b7e      	ldr	r3, [pc, #504]	; (8774 <_tc_timer_init+0x278>)
    857a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    857c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8580:	497d      	ldr	r1, [pc, #500]	; (8778 <_tc_timer_init+0x27c>)
    8582:	4613      	mov	r3, r2
    8584:	009b      	lsls	r3, r3, #2
    8586:	4413      	add	r3, r2
    8588:	009b      	lsls	r3, r3, #2
    858a:	440b      	add	r3, r1
    858c:	330a      	adds	r3, #10
    858e:	781b      	ldrb	r3, [r3, #0]
    8590:	4619      	mov	r1, r3
    8592:	6838      	ldr	r0, [r7, #0]
    8594:	4b79      	ldr	r3, [pc, #484]	; (877c <_tc_timer_init+0x280>)
    8596:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8598:	f997 200f 	ldrsb.w	r2, [r7, #15]
    859c:	4976      	ldr	r1, [pc, #472]	; (8778 <_tc_timer_init+0x27c>)
    859e:	4613      	mov	r3, r2
    85a0:	009b      	lsls	r3, r3, #2
    85a2:	4413      	add	r3, r2
    85a4:	009b      	lsls	r3, r3, #2
    85a6:	440b      	add	r3, r1
    85a8:	3308      	adds	r3, #8
    85aa:	881b      	ldrh	r3, [r3, #0]
    85ac:	4619      	mov	r1, r3
    85ae:	6838      	ldr	r0, [r7, #0]
    85b0:	4b73      	ldr	r3, [pc, #460]	; (8780 <_tc_timer_init+0x284>)
    85b2:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    85b4:	2101      	movs	r1, #1
    85b6:	6838      	ldr	r0, [r7, #0]
    85b8:	4b72      	ldr	r3, [pc, #456]	; (8784 <_tc_timer_init+0x288>)
    85ba:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    85bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85c0:	496d      	ldr	r1, [pc, #436]	; (8778 <_tc_timer_init+0x27c>)
    85c2:	4613      	mov	r3, r2
    85c4:	009b      	lsls	r3, r3, #2
    85c6:	4413      	add	r3, r2
    85c8:	009b      	lsls	r3, r3, #2
    85ca:	440b      	add	r3, r1
    85cc:	3304      	adds	r3, #4
    85ce:	681b      	ldr	r3, [r3, #0]
    85d0:	f003 030c 	and.w	r3, r3, #12
    85d4:	2b08      	cmp	r3, #8
    85d6:	d11e      	bne.n	8616 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    85d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85dc:	4966      	ldr	r1, [pc, #408]	; (8778 <_tc_timer_init+0x27c>)
    85de:	4613      	mov	r3, r2
    85e0:	009b      	lsls	r3, r3, #2
    85e2:	4413      	add	r3, r2
    85e4:	009b      	lsls	r3, r3, #2
    85e6:	440b      	add	r3, r1
    85e8:	330c      	adds	r3, #12
    85ea:	681b      	ldr	r3, [r3, #0]
    85ec:	461a      	mov	r2, r3
    85ee:	2100      	movs	r1, #0
    85f0:	6838      	ldr	r0, [r7, #0]
    85f2:	4b65      	ldr	r3, [pc, #404]	; (8788 <_tc_timer_init+0x28c>)
    85f4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    85f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85fa:	495f      	ldr	r1, [pc, #380]	; (8778 <_tc_timer_init+0x27c>)
    85fc:	4613      	mov	r3, r2
    85fe:	009b      	lsls	r3, r3, #2
    8600:	4413      	add	r3, r2
    8602:	009b      	lsls	r3, r3, #2
    8604:	440b      	add	r3, r1
    8606:	3310      	adds	r3, #16
    8608:	681b      	ldr	r3, [r3, #0]
    860a:	461a      	mov	r2, r3
    860c:	2101      	movs	r1, #1
    860e:	6838      	ldr	r0, [r7, #0]
    8610:	4b5d      	ldr	r3, [pc, #372]	; (8788 <_tc_timer_init+0x28c>)
    8612:	4798      	blx	r3
    8614:	e06a      	b.n	86ec <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8616:	f997 200f 	ldrsb.w	r2, [r7, #15]
    861a:	4957      	ldr	r1, [pc, #348]	; (8778 <_tc_timer_init+0x27c>)
    861c:	4613      	mov	r3, r2
    861e:	009b      	lsls	r3, r3, #2
    8620:	4413      	add	r3, r2
    8622:	009b      	lsls	r3, r3, #2
    8624:	440b      	add	r3, r1
    8626:	3304      	adds	r3, #4
    8628:	681b      	ldr	r3, [r3, #0]
    862a:	f003 030c 	and.w	r3, r3, #12
    862e:	2b00      	cmp	r3, #0
    8630:	d120      	bne.n	8674 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8632:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8636:	4950      	ldr	r1, [pc, #320]	; (8778 <_tc_timer_init+0x27c>)
    8638:	4613      	mov	r3, r2
    863a:	009b      	lsls	r3, r3, #2
    863c:	4413      	add	r3, r2
    863e:	009b      	lsls	r3, r3, #2
    8640:	440b      	add	r3, r1
    8642:	330c      	adds	r3, #12
    8644:	681b      	ldr	r3, [r3, #0]
    8646:	b29b      	uxth	r3, r3
    8648:	461a      	mov	r2, r3
    864a:	2100      	movs	r1, #0
    864c:	6838      	ldr	r0, [r7, #0]
    864e:	4b4f      	ldr	r3, [pc, #316]	; (878c <_tc_timer_init+0x290>)
    8650:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8652:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8656:	4948      	ldr	r1, [pc, #288]	; (8778 <_tc_timer_init+0x27c>)
    8658:	4613      	mov	r3, r2
    865a:	009b      	lsls	r3, r3, #2
    865c:	4413      	add	r3, r2
    865e:	009b      	lsls	r3, r3, #2
    8660:	440b      	add	r3, r1
    8662:	3310      	adds	r3, #16
    8664:	681b      	ldr	r3, [r3, #0]
    8666:	b29b      	uxth	r3, r3
    8668:	461a      	mov	r2, r3
    866a:	2101      	movs	r1, #1
    866c:	6838      	ldr	r0, [r7, #0]
    866e:	4b47      	ldr	r3, [pc, #284]	; (878c <_tc_timer_init+0x290>)
    8670:	4798      	blx	r3
    8672:	e03b      	b.n	86ec <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8674:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8678:	493f      	ldr	r1, [pc, #252]	; (8778 <_tc_timer_init+0x27c>)
    867a:	4613      	mov	r3, r2
    867c:	009b      	lsls	r3, r3, #2
    867e:	4413      	add	r3, r2
    8680:	009b      	lsls	r3, r3, #2
    8682:	440b      	add	r3, r1
    8684:	3304      	adds	r3, #4
    8686:	681b      	ldr	r3, [r3, #0]
    8688:	f003 030c 	and.w	r3, r3, #12
    868c:	2b04      	cmp	r3, #4
    868e:	d12d      	bne.n	86ec <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8690:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8694:	4938      	ldr	r1, [pc, #224]	; (8778 <_tc_timer_init+0x27c>)
    8696:	4613      	mov	r3, r2
    8698:	009b      	lsls	r3, r3, #2
    869a:	4413      	add	r3, r2
    869c:	009b      	lsls	r3, r3, #2
    869e:	440b      	add	r3, r1
    86a0:	330c      	adds	r3, #12
    86a2:	681b      	ldr	r3, [r3, #0]
    86a4:	b2db      	uxtb	r3, r3
    86a6:	461a      	mov	r2, r3
    86a8:	2100      	movs	r1, #0
    86aa:	6838      	ldr	r0, [r7, #0]
    86ac:	4b38      	ldr	r3, [pc, #224]	; (8790 <_tc_timer_init+0x294>)
    86ae:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    86b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86b4:	4930      	ldr	r1, [pc, #192]	; (8778 <_tc_timer_init+0x27c>)
    86b6:	4613      	mov	r3, r2
    86b8:	009b      	lsls	r3, r3, #2
    86ba:	4413      	add	r3, r2
    86bc:	009b      	lsls	r3, r3, #2
    86be:	440b      	add	r3, r1
    86c0:	3310      	adds	r3, #16
    86c2:	681b      	ldr	r3, [r3, #0]
    86c4:	b2db      	uxtb	r3, r3
    86c6:	461a      	mov	r2, r3
    86c8:	2101      	movs	r1, #1
    86ca:	6838      	ldr	r0, [r7, #0]
    86cc:	4b30      	ldr	r3, [pc, #192]	; (8790 <_tc_timer_init+0x294>)
    86ce:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    86d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86d4:	4928      	ldr	r1, [pc, #160]	; (8778 <_tc_timer_init+0x27c>)
    86d6:	4613      	mov	r3, r2
    86d8:	009b      	lsls	r3, r3, #2
    86da:	4413      	add	r3, r2
    86dc:	009b      	lsls	r3, r3, #2
    86de:	440b      	add	r3, r1
    86e0:	330b      	adds	r3, #11
    86e2:	781b      	ldrb	r3, [r3, #0]
    86e4:	4619      	mov	r1, r3
    86e6:	6838      	ldr	r0, [r7, #0]
    86e8:	4b2a      	ldr	r3, [pc, #168]	; (8794 <_tc_timer_init+0x298>)
    86ea:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    86ec:	6838      	ldr	r0, [r7, #0]
    86ee:	4b2a      	ldr	r3, [pc, #168]	; (8798 <_tc_timer_init+0x29c>)
    86f0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    86f2:	6879      	ldr	r1, [r7, #4]
    86f4:	6838      	ldr	r0, [r7, #0]
    86f6:	4b29      	ldr	r3, [pc, #164]	; (879c <_tc_timer_init+0x2a0>)
    86f8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    86fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86fe:	491e      	ldr	r1, [pc, #120]	; (8778 <_tc_timer_init+0x27c>)
    8700:	4613      	mov	r3, r2
    8702:	009b      	lsls	r3, r3, #2
    8704:	4413      	add	r3, r2
    8706:	009b      	lsls	r3, r3, #2
    8708:	440b      	add	r3, r1
    870a:	3302      	adds	r3, #2
    870c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8710:	4618      	mov	r0, r3
    8712:	4b23      	ldr	r3, [pc, #140]	; (87a0 <_tc_timer_init+0x2a4>)
    8714:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8716:	f997 200f 	ldrsb.w	r2, [r7, #15]
    871a:	4917      	ldr	r1, [pc, #92]	; (8778 <_tc_timer_init+0x27c>)
    871c:	4613      	mov	r3, r2
    871e:	009b      	lsls	r3, r3, #2
    8720:	4413      	add	r3, r2
    8722:	009b      	lsls	r3, r3, #2
    8724:	440b      	add	r3, r1
    8726:	3302      	adds	r3, #2
    8728:	f9b3 3000 	ldrsh.w	r3, [r3]
    872c:	4618      	mov	r0, r3
    872e:	4b1d      	ldr	r3, [pc, #116]	; (87a4 <_tc_timer_init+0x2a8>)
    8730:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8732:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8736:	4910      	ldr	r1, [pc, #64]	; (8778 <_tc_timer_init+0x27c>)
    8738:	4613      	mov	r3, r2
    873a:	009b      	lsls	r3, r3, #2
    873c:	4413      	add	r3, r2
    873e:	009b      	lsls	r3, r3, #2
    8740:	440b      	add	r3, r1
    8742:	3302      	adds	r3, #2
    8744:	f9b3 3000 	ldrsh.w	r3, [r3]
    8748:	4618      	mov	r0, r3
    874a:	4b17      	ldr	r3, [pc, #92]	; (87a8 <_tc_timer_init+0x2ac>)
    874c:	4798      	blx	r3

	return ERR_NONE;
    874e:	2300      	movs	r3, #0
}
    8750:	4618      	mov	r0, r3
    8752:	3710      	adds	r7, #16
    8754:	46bd      	mov	sp, r7
    8756:	bd80      	pop	{r7, pc}
    8758:	00008d4d 	.word	0x00008d4d
    875c:	00011e00 	.word	0x00011e00
    8760:	00003cad 	.word	0x00003cad
    8764:	00008171 	.word	0x00008171
    8768:	00008311 	.word	0x00008311
    876c:	000082c1 	.word	0x000082c1
    8770:	0000814d 	.word	0x0000814d
    8774:	00008341 	.word	0x00008341
    8778:	200000e0 	.word	0x200000e0
    877c:	000083a1 	.word	0x000083a1
    8780:	00008365 	.word	0x00008365
    8784:	00008383 	.word	0x00008383
    8788:	000084a1 	.word	0x000084a1
    878c:	0000843d 	.word	0x0000843d
    8790:	0000840d 	.word	0x0000840d
    8794:	000083c1 	.word	0x000083c1
    8798:	000081f5 	.word	0x000081f5
    879c:	00008db5 	.word	0x00008db5
    87a0:	000080cd 	.word	0x000080cd
    87a4:	00008111 	.word	0x00008111
    87a8:	00008091 	.word	0x00008091

000087ac <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    87ac:	b580      	push	{r7, lr}
    87ae:	b084      	sub	sp, #16
    87b0:	af00      	add	r7, sp, #0
    87b2:	6078      	str	r0, [r7, #4]
    87b4:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    87b6:	6838      	ldr	r0, [r7, #0]
    87b8:	4b73      	ldr	r3, [pc, #460]	; (8988 <_pwm_init+0x1dc>)
    87ba:	4798      	blx	r3
    87bc:	4603      	mov	r3, r0
    87be:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    87c0:	687b      	ldr	r3, [r7, #4]
    87c2:	683a      	ldr	r2, [r7, #0]
    87c4:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    87c6:	2101      	movs	r1, #1
    87c8:	6838      	ldr	r0, [r7, #0]
    87ca:	4b70      	ldr	r3, [pc, #448]	; (898c <_pwm_init+0x1e0>)
    87cc:	4798      	blx	r3
    87ce:	4603      	mov	r3, r0
    87d0:	f083 0301 	eor.w	r3, r3, #1
    87d4:	b2db      	uxtb	r3, r3
    87d6:	2b00      	cmp	r3, #0
    87d8:	d011      	beq.n	87fe <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    87da:	2102      	movs	r1, #2
    87dc:	6838      	ldr	r0, [r7, #0]
    87de:	4b6c      	ldr	r3, [pc, #432]	; (8990 <_pwm_init+0x1e4>)
    87e0:	4798      	blx	r3
    87e2:	4603      	mov	r3, r0
    87e4:	2b00      	cmp	r3, #0
    87e6:	d006      	beq.n	87f6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    87e8:	6838      	ldr	r0, [r7, #0]
    87ea:	4b6a      	ldr	r3, [pc, #424]	; (8994 <_pwm_init+0x1e8>)
    87ec:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    87ee:	2102      	movs	r1, #2
    87f0:	6838      	ldr	r0, [r7, #0]
    87f2:	4b69      	ldr	r3, [pc, #420]	; (8998 <_pwm_init+0x1ec>)
    87f4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    87f6:	2101      	movs	r1, #1
    87f8:	6838      	ldr	r0, [r7, #0]
    87fa:	4b68      	ldr	r3, [pc, #416]	; (899c <_pwm_init+0x1f0>)
    87fc:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    87fe:	2101      	movs	r1, #1
    8800:	6838      	ldr	r0, [r7, #0]
    8802:	4b65      	ldr	r3, [pc, #404]	; (8998 <_pwm_init+0x1ec>)
    8804:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8806:	f997 200f 	ldrsb.w	r2, [r7, #15]
    880a:	4965      	ldr	r1, [pc, #404]	; (89a0 <_pwm_init+0x1f4>)
    880c:	4613      	mov	r3, r2
    880e:	009b      	lsls	r3, r3, #2
    8810:	4413      	add	r3, r2
    8812:	009b      	lsls	r3, r3, #2
    8814:	440b      	add	r3, r1
    8816:	3304      	adds	r3, #4
    8818:	681b      	ldr	r3, [r3, #0]
    881a:	4619      	mov	r1, r3
    881c:	6838      	ldr	r0, [r7, #0]
    881e:	4b5f      	ldr	r3, [pc, #380]	; (899c <_pwm_init+0x1f0>)
    8820:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8822:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8826:	495e      	ldr	r1, [pc, #376]	; (89a0 <_pwm_init+0x1f4>)
    8828:	4613      	mov	r3, r2
    882a:	009b      	lsls	r3, r3, #2
    882c:	4413      	add	r3, r2
    882e:	009b      	lsls	r3, r3, #2
    8830:	440b      	add	r3, r1
    8832:	330a      	adds	r3, #10
    8834:	781b      	ldrb	r3, [r3, #0]
    8836:	4619      	mov	r1, r3
    8838:	6838      	ldr	r0, [r7, #0]
    883a:	4b5a      	ldr	r3, [pc, #360]	; (89a4 <_pwm_init+0x1f8>)
    883c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    883e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8842:	4957      	ldr	r1, [pc, #348]	; (89a0 <_pwm_init+0x1f4>)
    8844:	4613      	mov	r3, r2
    8846:	009b      	lsls	r3, r3, #2
    8848:	4413      	add	r3, r2
    884a:	009b      	lsls	r3, r3, #2
    884c:	440b      	add	r3, r1
    884e:	3308      	adds	r3, #8
    8850:	881b      	ldrh	r3, [r3, #0]
    8852:	4619      	mov	r1, r3
    8854:	6838      	ldr	r0, [r7, #0]
    8856:	4b54      	ldr	r3, [pc, #336]	; (89a8 <_pwm_init+0x1fc>)
    8858:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    885a:	2103      	movs	r1, #3
    885c:	6838      	ldr	r0, [r7, #0]
    885e:	4b53      	ldr	r3, [pc, #332]	; (89ac <_pwm_init+0x200>)
    8860:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8862:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8866:	494e      	ldr	r1, [pc, #312]	; (89a0 <_pwm_init+0x1f4>)
    8868:	4613      	mov	r3, r2
    886a:	009b      	lsls	r3, r3, #2
    886c:	4413      	add	r3, r2
    886e:	009b      	lsls	r3, r3, #2
    8870:	440b      	add	r3, r1
    8872:	3304      	adds	r3, #4
    8874:	681b      	ldr	r3, [r3, #0]
    8876:	f003 030c 	and.w	r3, r3, #12
    887a:	2b08      	cmp	r3, #8
    887c:	d11e      	bne.n	88bc <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    887e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8882:	4947      	ldr	r1, [pc, #284]	; (89a0 <_pwm_init+0x1f4>)
    8884:	4613      	mov	r3, r2
    8886:	009b      	lsls	r3, r3, #2
    8888:	4413      	add	r3, r2
    888a:	009b      	lsls	r3, r3, #2
    888c:	440b      	add	r3, r1
    888e:	330c      	adds	r3, #12
    8890:	681b      	ldr	r3, [r3, #0]
    8892:	461a      	mov	r2, r3
    8894:	2100      	movs	r1, #0
    8896:	6838      	ldr	r0, [r7, #0]
    8898:	4b45      	ldr	r3, [pc, #276]	; (89b0 <_pwm_init+0x204>)
    889a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    889c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88a0:	493f      	ldr	r1, [pc, #252]	; (89a0 <_pwm_init+0x1f4>)
    88a2:	4613      	mov	r3, r2
    88a4:	009b      	lsls	r3, r3, #2
    88a6:	4413      	add	r3, r2
    88a8:	009b      	lsls	r3, r3, #2
    88aa:	440b      	add	r3, r1
    88ac:	3310      	adds	r3, #16
    88ae:	681b      	ldr	r3, [r3, #0]
    88b0:	461a      	mov	r2, r3
    88b2:	2101      	movs	r1, #1
    88b4:	6838      	ldr	r0, [r7, #0]
    88b6:	4b3e      	ldr	r3, [pc, #248]	; (89b0 <_pwm_init+0x204>)
    88b8:	4798      	blx	r3
    88ba:	e031      	b.n	8920 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    88bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88c0:	4937      	ldr	r1, [pc, #220]	; (89a0 <_pwm_init+0x1f4>)
    88c2:	4613      	mov	r3, r2
    88c4:	009b      	lsls	r3, r3, #2
    88c6:	4413      	add	r3, r2
    88c8:	009b      	lsls	r3, r3, #2
    88ca:	440b      	add	r3, r1
    88cc:	3304      	adds	r3, #4
    88ce:	681b      	ldr	r3, [r3, #0]
    88d0:	f003 030c 	and.w	r3, r3, #12
    88d4:	2b00      	cmp	r3, #0
    88d6:	d120      	bne.n	891a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    88d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88dc:	4930      	ldr	r1, [pc, #192]	; (89a0 <_pwm_init+0x1f4>)
    88de:	4613      	mov	r3, r2
    88e0:	009b      	lsls	r3, r3, #2
    88e2:	4413      	add	r3, r2
    88e4:	009b      	lsls	r3, r3, #2
    88e6:	440b      	add	r3, r1
    88e8:	330c      	adds	r3, #12
    88ea:	681b      	ldr	r3, [r3, #0]
    88ec:	b29b      	uxth	r3, r3
    88ee:	461a      	mov	r2, r3
    88f0:	2100      	movs	r1, #0
    88f2:	6838      	ldr	r0, [r7, #0]
    88f4:	4b2f      	ldr	r3, [pc, #188]	; (89b4 <_pwm_init+0x208>)
    88f6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    88f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88fc:	4928      	ldr	r1, [pc, #160]	; (89a0 <_pwm_init+0x1f4>)
    88fe:	4613      	mov	r3, r2
    8900:	009b      	lsls	r3, r3, #2
    8902:	4413      	add	r3, r2
    8904:	009b      	lsls	r3, r3, #2
    8906:	440b      	add	r3, r1
    8908:	3310      	adds	r3, #16
    890a:	681b      	ldr	r3, [r3, #0]
    890c:	b29b      	uxth	r3, r3
    890e:	461a      	mov	r2, r3
    8910:	2101      	movs	r1, #1
    8912:	6838      	ldr	r0, [r7, #0]
    8914:	4b27      	ldr	r3, [pc, #156]	; (89b4 <_pwm_init+0x208>)
    8916:	4798      	blx	r3
    8918:	e002      	b.n	8920 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    891a:	f04f 33ff 	mov.w	r3, #4294967295
    891e:	e02e      	b.n	897e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8920:	6879      	ldr	r1, [r7, #4]
    8922:	6838      	ldr	r0, [r7, #0]
    8924:	4b24      	ldr	r3, [pc, #144]	; (89b8 <_pwm_init+0x20c>)
    8926:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8928:	f997 200f 	ldrsb.w	r2, [r7, #15]
    892c:	491c      	ldr	r1, [pc, #112]	; (89a0 <_pwm_init+0x1f4>)
    892e:	4613      	mov	r3, r2
    8930:	009b      	lsls	r3, r3, #2
    8932:	4413      	add	r3, r2
    8934:	009b      	lsls	r3, r3, #2
    8936:	440b      	add	r3, r1
    8938:	3302      	adds	r3, #2
    893a:	f9b3 3000 	ldrsh.w	r3, [r3]
    893e:	4618      	mov	r0, r3
    8940:	4b1e      	ldr	r3, [pc, #120]	; (89bc <_pwm_init+0x210>)
    8942:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8944:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8948:	4915      	ldr	r1, [pc, #84]	; (89a0 <_pwm_init+0x1f4>)
    894a:	4613      	mov	r3, r2
    894c:	009b      	lsls	r3, r3, #2
    894e:	4413      	add	r3, r2
    8950:	009b      	lsls	r3, r3, #2
    8952:	440b      	add	r3, r1
    8954:	3302      	adds	r3, #2
    8956:	f9b3 3000 	ldrsh.w	r3, [r3]
    895a:	4618      	mov	r0, r3
    895c:	4b18      	ldr	r3, [pc, #96]	; (89c0 <_pwm_init+0x214>)
    895e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8960:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8964:	490e      	ldr	r1, [pc, #56]	; (89a0 <_pwm_init+0x1f4>)
    8966:	4613      	mov	r3, r2
    8968:	009b      	lsls	r3, r3, #2
    896a:	4413      	add	r3, r2
    896c:	009b      	lsls	r3, r3, #2
    896e:	440b      	add	r3, r1
    8970:	3302      	adds	r3, #2
    8972:	f9b3 3000 	ldrsh.w	r3, [r3]
    8976:	4618      	mov	r0, r3
    8978:	4b12      	ldr	r3, [pc, #72]	; (89c4 <_pwm_init+0x218>)
    897a:	4798      	blx	r3

	return 0;
    897c:	2300      	movs	r3, #0
}
    897e:	4618      	mov	r0, r3
    8980:	3710      	adds	r7, #16
    8982:	46bd      	mov	sp, r7
    8984:	bd80      	pop	{r7, pc}
    8986:	bf00      	nop
    8988:	00008d4d 	.word	0x00008d4d
    898c:	00008171 	.word	0x00008171
    8990:	00008311 	.word	0x00008311
    8994:	000082c1 	.word	0x000082c1
    8998:	0000814d 	.word	0x0000814d
    899c:	00008341 	.word	0x00008341
    89a0:	200000e0 	.word	0x200000e0
    89a4:	000083a1 	.word	0x000083a1
    89a8:	00008365 	.word	0x00008365
    89ac:	00008383 	.word	0x00008383
    89b0:	000084a1 	.word	0x000084a1
    89b4:	0000843d 	.word	0x0000843d
    89b8:	00008db5 	.word	0x00008db5
    89bc:	000080cd 	.word	0x000080cd
    89c0:	00008111 	.word	0x00008111
    89c4:	00008091 	.word	0x00008091

000089c8 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    89c8:	b580      	push	{r7, lr}
    89ca:	b084      	sub	sp, #16
    89cc:	af00      	add	r7, sp, #0
    89ce:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    89d0:	687b      	ldr	r3, [r7, #4]
    89d2:	68db      	ldr	r3, [r3, #12]
    89d4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    89d6:	68f8      	ldr	r0, [r7, #12]
    89d8:	4b10      	ldr	r3, [pc, #64]	; (8a1c <_tc_timer_deinit+0x54>)
    89da:	4798      	blx	r3
    89dc:	4603      	mov	r3, r0
    89de:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    89e0:	22f9      	movs	r2, #249	; 0xf9
    89e2:	490f      	ldr	r1, [pc, #60]	; (8a20 <_tc_timer_deinit+0x58>)
    89e4:	2001      	movs	r0, #1
    89e6:	4b0f      	ldr	r3, [pc, #60]	; (8a24 <_tc_timer_deinit+0x5c>)
    89e8:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    89ea:	f997 200b 	ldrsb.w	r2, [r7, #11]
    89ee:	490e      	ldr	r1, [pc, #56]	; (8a28 <_tc_timer_deinit+0x60>)
    89f0:	4613      	mov	r3, r2
    89f2:	009b      	lsls	r3, r3, #2
    89f4:	4413      	add	r3, r2
    89f6:	009b      	lsls	r3, r3, #2
    89f8:	440b      	add	r3, r1
    89fa:	3302      	adds	r3, #2
    89fc:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a00:	4618      	mov	r0, r3
    8a02:	4b0a      	ldr	r3, [pc, #40]	; (8a2c <_tc_timer_deinit+0x64>)
    8a04:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8a06:	68f8      	ldr	r0, [r7, #12]
    8a08:	4b09      	ldr	r3, [pc, #36]	; (8a30 <_tc_timer_deinit+0x68>)
    8a0a:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8a0c:	68f8      	ldr	r0, [r7, #12]
    8a0e:	4b09      	ldr	r3, [pc, #36]	; (8a34 <_tc_timer_deinit+0x6c>)
    8a10:	4798      	blx	r3
}
    8a12:	bf00      	nop
    8a14:	3710      	adds	r7, #16
    8a16:	46bd      	mov	sp, r7
    8a18:	bd80      	pop	{r7, pc}
    8a1a:	bf00      	nop
    8a1c:	00008d4d 	.word	0x00008d4d
    8a20:	00011e00 	.word	0x00011e00
    8a24:	00003cad 	.word	0x00003cad
    8a28:	200000e0 	.word	0x200000e0
    8a2c:	000080cd 	.word	0x000080cd
    8a30:	000082c1 	.word	0x000082c1
    8a34:	00008239 	.word	0x00008239

00008a38 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8a38:	b580      	push	{r7, lr}
    8a3a:	b082      	sub	sp, #8
    8a3c:	af00      	add	r7, sp, #0
    8a3e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8a40:	687b      	ldr	r3, [r7, #4]
    8a42:	68db      	ldr	r3, [r3, #12]
    8a44:	4618      	mov	r0, r3
    8a46:	4b03      	ldr	r3, [pc, #12]	; (8a54 <_tc_timer_start+0x1c>)
    8a48:	4798      	blx	r3
}
    8a4a:	bf00      	nop
    8a4c:	3708      	adds	r7, #8
    8a4e:	46bd      	mov	sp, r7
    8a50:	bd80      	pop	{r7, pc}
    8a52:	bf00      	nop
    8a54:	00008261 	.word	0x00008261

00008a58 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8a58:	b580      	push	{r7, lr}
    8a5a:	b082      	sub	sp, #8
    8a5c:	af00      	add	r7, sp, #0
    8a5e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8a60:	687b      	ldr	r3, [r7, #4]
    8a62:	68db      	ldr	r3, [r3, #12]
    8a64:	4618      	mov	r0, r3
    8a66:	4b03      	ldr	r3, [pc, #12]	; (8a74 <_tc_timer_stop+0x1c>)
    8a68:	4798      	blx	r3
}
    8a6a:	bf00      	nop
    8a6c:	3708      	adds	r7, #8
    8a6e:	46bd      	mov	sp, r7
    8a70:	bd80      	pop	{r7, pc}
    8a72:	bf00      	nop
    8a74:	000082c1 	.word	0x000082c1

00008a78 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8a78:	b580      	push	{r7, lr}
    8a7a:	b084      	sub	sp, #16
    8a7c:	af00      	add	r7, sp, #0
    8a7e:	6078      	str	r0, [r7, #4]
    8a80:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8a82:	687b      	ldr	r3, [r7, #4]
    8a84:	68db      	ldr	r3, [r3, #12]
    8a86:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8a88:	68f8      	ldr	r0, [r7, #12]
    8a8a:	4b14      	ldr	r3, [pc, #80]	; (8adc <_tc_timer_set_period+0x64>)
    8a8c:	4798      	blx	r3
    8a8e:	4603      	mov	r3, r0
    8a90:	2b02      	cmp	r3, #2
    8a92:	d105      	bne.n	8aa0 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8a94:	683a      	ldr	r2, [r7, #0]
    8a96:	2100      	movs	r1, #0
    8a98:	68f8      	ldr	r0, [r7, #12]
    8a9a:	4b11      	ldr	r3, [pc, #68]	; (8ae0 <_tc_timer_set_period+0x68>)
    8a9c:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8a9e:	e019      	b.n	8ad4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8aa0:	68f8      	ldr	r0, [r7, #12]
    8aa2:	4b0e      	ldr	r3, [pc, #56]	; (8adc <_tc_timer_set_period+0x64>)
    8aa4:	4798      	blx	r3
    8aa6:	4603      	mov	r3, r0
    8aa8:	2b00      	cmp	r3, #0
    8aaa:	d107      	bne.n	8abc <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8aac:	683b      	ldr	r3, [r7, #0]
    8aae:	b29b      	uxth	r3, r3
    8ab0:	461a      	mov	r2, r3
    8ab2:	2100      	movs	r1, #0
    8ab4:	68f8      	ldr	r0, [r7, #12]
    8ab6:	4b0b      	ldr	r3, [pc, #44]	; (8ae4 <_tc_timer_set_period+0x6c>)
    8ab8:	4798      	blx	r3
}
    8aba:	e00b      	b.n	8ad4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8abc:	68f8      	ldr	r0, [r7, #12]
    8abe:	4b07      	ldr	r3, [pc, #28]	; (8adc <_tc_timer_set_period+0x64>)
    8ac0:	4798      	blx	r3
    8ac2:	4603      	mov	r3, r0
    8ac4:	2b01      	cmp	r3, #1
    8ac6:	d105      	bne.n	8ad4 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8ac8:	683b      	ldr	r3, [r7, #0]
    8aca:	b2db      	uxtb	r3, r3
    8acc:	4619      	mov	r1, r3
    8ace:	68f8      	ldr	r0, [r7, #12]
    8ad0:	4b05      	ldr	r3, [pc, #20]	; (8ae8 <_tc_timer_set_period+0x70>)
    8ad2:	4798      	blx	r3
}
    8ad4:	bf00      	nop
    8ad6:	3710      	adds	r7, #16
    8ad8:	46bd      	mov	sp, r7
    8ada:	bd80      	pop	{r7, pc}
    8adc:	000082e9 	.word	0x000082e9
    8ae0:	000084a1 	.word	0x000084a1
    8ae4:	0000843d 	.word	0x0000843d
    8ae8:	000083c1 	.word	0x000083c1

00008aec <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8aec:	b580      	push	{r7, lr}
    8aee:	b084      	sub	sp, #16
    8af0:	af00      	add	r7, sp, #0
    8af2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8af4:	687b      	ldr	r3, [r7, #4]
    8af6:	68db      	ldr	r3, [r3, #12]
    8af8:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8afa:	68f8      	ldr	r0, [r7, #12]
    8afc:	4b13      	ldr	r3, [pc, #76]	; (8b4c <_tc_timer_get_period+0x60>)
    8afe:	4798      	blx	r3
    8b00:	4603      	mov	r3, r0
    8b02:	2b02      	cmp	r3, #2
    8b04:	d105      	bne.n	8b12 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8b06:	2100      	movs	r1, #0
    8b08:	68f8      	ldr	r0, [r7, #12]
    8b0a:	4b11      	ldr	r3, [pc, #68]	; (8b50 <_tc_timer_get_period+0x64>)
    8b0c:	4798      	blx	r3
    8b0e:	4603      	mov	r3, r0
    8b10:	e017      	b.n	8b42 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b12:	68f8      	ldr	r0, [r7, #12]
    8b14:	4b0d      	ldr	r3, [pc, #52]	; (8b4c <_tc_timer_get_period+0x60>)
    8b16:	4798      	blx	r3
    8b18:	4603      	mov	r3, r0
    8b1a:	2b00      	cmp	r3, #0
    8b1c:	d105      	bne.n	8b2a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8b1e:	2100      	movs	r1, #0
    8b20:	68f8      	ldr	r0, [r7, #12]
    8b22:	4b0c      	ldr	r3, [pc, #48]	; (8b54 <_tc_timer_get_period+0x68>)
    8b24:	4798      	blx	r3
    8b26:	4603      	mov	r3, r0
    8b28:	e00b      	b.n	8b42 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b2a:	68f8      	ldr	r0, [r7, #12]
    8b2c:	4b07      	ldr	r3, [pc, #28]	; (8b4c <_tc_timer_get_period+0x60>)
    8b2e:	4798      	blx	r3
    8b30:	4603      	mov	r3, r0
    8b32:	2b01      	cmp	r3, #1
    8b34:	d104      	bne.n	8b40 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8b36:	68f8      	ldr	r0, [r7, #12]
    8b38:	4b07      	ldr	r3, [pc, #28]	; (8b58 <_tc_timer_get_period+0x6c>)
    8b3a:	4798      	blx	r3
    8b3c:	4603      	mov	r3, r0
    8b3e:	e000      	b.n	8b42 <_tc_timer_get_period+0x56>
	}

	return 0;
    8b40:	2300      	movs	r3, #0
}
    8b42:	4618      	mov	r0, r3
    8b44:	3710      	adds	r7, #16
    8b46:	46bd      	mov	sp, r7
    8b48:	bd80      	pop	{r7, pc}
    8b4a:	bf00      	nop
    8b4c:	000082e9 	.word	0x000082e9
    8b50:	000084d1 	.word	0x000084d1
    8b54:	00008471 	.word	0x00008471
    8b58:	000083e9 	.word	0x000083e9

00008b5c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8b5c:	b580      	push	{r7, lr}
    8b5e:	b082      	sub	sp, #8
    8b60:	af00      	add	r7, sp, #0
    8b62:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8b64:	687b      	ldr	r3, [r7, #4]
    8b66:	68db      	ldr	r3, [r3, #12]
    8b68:	4618      	mov	r0, r3
    8b6a:	4b03      	ldr	r3, [pc, #12]	; (8b78 <_tc_timer_is_started+0x1c>)
    8b6c:	4798      	blx	r3
    8b6e:	4603      	mov	r3, r0
}
    8b70:	4618      	mov	r0, r3
    8b72:	3708      	adds	r7, #8
    8b74:	46bd      	mov	sp, r7
    8b76:	bd80      	pop	{r7, pc}
    8b78:	00008289 	.word	0x00008289

00008b7c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8b7c:	b480      	push	{r7}
    8b7e:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8b80:	4b02      	ldr	r3, [pc, #8]	; (8b8c <_tc_get_timer+0x10>)
}
    8b82:	4618      	mov	r0, r3
    8b84:	46bd      	mov	sp, r7
    8b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b8a:	4770      	bx	lr
    8b8c:	20000158 	.word	0x20000158

00008b90 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8b90:	b480      	push	{r7}
    8b92:	af00      	add	r7, sp, #0
	return NULL;
    8b94:	2300      	movs	r3, #0
}
    8b96:	4618      	mov	r0, r3
    8b98:	46bd      	mov	sp, r7
    8b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b9e:	4770      	bx	lr

00008ba0 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8ba0:	b580      	push	{r7, lr}
    8ba2:	b084      	sub	sp, #16
    8ba4:	af00      	add	r7, sp, #0
    8ba6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8ba8:	687b      	ldr	r3, [r7, #4]
    8baa:	68db      	ldr	r3, [r3, #12]
    8bac:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8bae:	68f8      	ldr	r0, [r7, #12]
    8bb0:	4b0e      	ldr	r3, [pc, #56]	; (8bec <_tc_timer_set_irq+0x4c>)
    8bb2:	4798      	blx	r3
    8bb4:	4603      	mov	r3, r0
    8bb6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8bb8:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8bbc:	490c      	ldr	r1, [pc, #48]	; (8bf0 <_tc_timer_set_irq+0x50>)
    8bbe:	2001      	movs	r0, #1
    8bc0:	4b0c      	ldr	r3, [pc, #48]	; (8bf4 <_tc_timer_set_irq+0x54>)
    8bc2:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8bc4:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8bc8:	490b      	ldr	r1, [pc, #44]	; (8bf8 <_tc_timer_set_irq+0x58>)
    8bca:	4613      	mov	r3, r2
    8bcc:	009b      	lsls	r3, r3, #2
    8bce:	4413      	add	r3, r2
    8bd0:	009b      	lsls	r3, r3, #2
    8bd2:	440b      	add	r3, r1
    8bd4:	3302      	adds	r3, #2
    8bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
    8bda:	b2db      	uxtb	r3, r3
    8bdc:	4618      	mov	r0, r3
    8bde:	4b07      	ldr	r3, [pc, #28]	; (8bfc <_tc_timer_set_irq+0x5c>)
    8be0:	4798      	blx	r3
}
    8be2:	bf00      	nop
    8be4:	3710      	adds	r7, #16
    8be6:	46bd      	mov	sp, r7
    8be8:	bd80      	pop	{r7, pc}
    8bea:	bf00      	nop
    8bec:	00008d4d 	.word	0x00008d4d
    8bf0:	00011e00 	.word	0x00011e00
    8bf4:	00003cad 	.word	0x00003cad
    8bf8:	200000e0 	.word	0x200000e0
    8bfc:	000044f9 	.word	0x000044f9

00008c00 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8c00:	b580      	push	{r7, lr}
    8c02:	b084      	sub	sp, #16
    8c04:	af00      	add	r7, sp, #0
    8c06:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8c08:	687b      	ldr	r3, [r7, #4]
    8c0a:	68db      	ldr	r3, [r3, #12]
    8c0c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8c0e:	68f8      	ldr	r0, [r7, #12]
    8c10:	4b07      	ldr	r3, [pc, #28]	; (8c30 <tc_interrupt_handler+0x30>)
    8c12:	4798      	blx	r3
    8c14:	4603      	mov	r3, r0
    8c16:	2b00      	cmp	r3, #0
    8c18:	d006      	beq.n	8c28 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8c1a:	68f8      	ldr	r0, [r7, #12]
    8c1c:	4b05      	ldr	r3, [pc, #20]	; (8c34 <tc_interrupt_handler+0x34>)
    8c1e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8c20:	687b      	ldr	r3, [r7, #4]
    8c22:	681b      	ldr	r3, [r3, #0]
    8c24:	6878      	ldr	r0, [r7, #4]
    8c26:	4798      	blx	r3
	}
}
    8c28:	bf00      	nop
    8c2a:	3710      	adds	r7, #16
    8c2c:	46bd      	mov	sp, r7
    8c2e:	bd80      	pop	{r7, pc}
    8c30:	00008199 	.word	0x00008199
    8c34:	000081c1 	.word	0x000081c1

00008c38 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8c38:	b580      	push	{r7, lr}
    8c3a:	b084      	sub	sp, #16
    8c3c:	af00      	add	r7, sp, #0
    8c3e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	691b      	ldr	r3, [r3, #16]
    8c44:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8c46:	68f8      	ldr	r0, [r7, #12]
    8c48:	4b12      	ldr	r3, [pc, #72]	; (8c94 <tc_pwm_interrupt_handler+0x5c>)
    8c4a:	4798      	blx	r3
    8c4c:	4603      	mov	r3, r0
    8c4e:	2b00      	cmp	r3, #0
    8c50:	d00a      	beq.n	8c68 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8c52:	68f8      	ldr	r0, [r7, #12]
    8c54:	4b10      	ldr	r3, [pc, #64]	; (8c98 <tc_pwm_interrupt_handler+0x60>)
    8c56:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8c58:	687b      	ldr	r3, [r7, #4]
    8c5a:	681b      	ldr	r3, [r3, #0]
    8c5c:	2b00      	cmp	r3, #0
    8c5e:	d003      	beq.n	8c68 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8c60:	687b      	ldr	r3, [r7, #4]
    8c62:	681b      	ldr	r3, [r3, #0]
    8c64:	6878      	ldr	r0, [r7, #4]
    8c66:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8c68:	68f8      	ldr	r0, [r7, #12]
    8c6a:	4b0c      	ldr	r3, [pc, #48]	; (8c9c <tc_pwm_interrupt_handler+0x64>)
    8c6c:	4798      	blx	r3
    8c6e:	4603      	mov	r3, r0
    8c70:	2b00      	cmp	r3, #0
    8c72:	d00a      	beq.n	8c8a <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8c74:	68f8      	ldr	r0, [r7, #12]
    8c76:	4b0a      	ldr	r3, [pc, #40]	; (8ca0 <tc_pwm_interrupt_handler+0x68>)
    8c78:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8c7a:	687b      	ldr	r3, [r7, #4]
    8c7c:	685b      	ldr	r3, [r3, #4]
    8c7e:	2b00      	cmp	r3, #0
    8c80:	d003      	beq.n	8c8a <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8c82:	687b      	ldr	r3, [r7, #4]
    8c84:	685b      	ldr	r3, [r3, #4]
    8c86:	6878      	ldr	r0, [r7, #4]
    8c88:	4798      	blx	r3
		}
	}
}
    8c8a:	bf00      	nop
    8c8c:	3710      	adds	r7, #16
    8c8e:	46bd      	mov	sp, r7
    8c90:	bd80      	pop	{r7, pc}
    8c92:	bf00      	nop
    8c94:	00008199 	.word	0x00008199
    8c98:	000081c1 	.word	0x000081c1
    8c9c:	0000820f 	.word	0x0000820f
    8ca0:	000081db 	.word	0x000081db

00008ca4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8ca4:	b580      	push	{r7, lr}
    8ca6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8ca8:	4b03      	ldr	r3, [pc, #12]	; (8cb8 <TC0_Handler+0x14>)
    8caa:	681b      	ldr	r3, [r3, #0]
    8cac:	4618      	mov	r0, r3
    8cae:	4b03      	ldr	r3, [pc, #12]	; (8cbc <TC0_Handler+0x18>)
    8cb0:	4798      	blx	r3
}
    8cb2:	bf00      	nop
    8cb4:	bd80      	pop	{r7, pc}
    8cb6:	bf00      	nop
    8cb8:	20000a04 	.word	0x20000a04
    8cbc:	00008c01 	.word	0x00008c01

00008cc0 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8cc0:	b580      	push	{r7, lr}
    8cc2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8cc4:	4b03      	ldr	r3, [pc, #12]	; (8cd4 <TC2_Handler+0x14>)
    8cc6:	681b      	ldr	r3, [r3, #0]
    8cc8:	4618      	mov	r0, r3
    8cca:	4b03      	ldr	r3, [pc, #12]	; (8cd8 <TC2_Handler+0x18>)
    8ccc:	4798      	blx	r3
}
    8cce:	bf00      	nop
    8cd0:	bd80      	pop	{r7, pc}
    8cd2:	bf00      	nop
    8cd4:	20000a08 	.word	0x20000a08
    8cd8:	00008c01 	.word	0x00008c01

00008cdc <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8cdc:	b580      	push	{r7, lr}
    8cde:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8ce0:	4b03      	ldr	r3, [pc, #12]	; (8cf0 <TC4_Handler+0x14>)
    8ce2:	681b      	ldr	r3, [r3, #0]
    8ce4:	4618      	mov	r0, r3
    8ce6:	4b03      	ldr	r3, [pc, #12]	; (8cf4 <TC4_Handler+0x18>)
    8ce8:	4798      	blx	r3
}
    8cea:	bf00      	nop
    8cec:	bd80      	pop	{r7, pc}
    8cee:	bf00      	nop
    8cf0:	20000a0c 	.word	0x20000a0c
    8cf4:	00008c01 	.word	0x00008c01

00008cf8 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8cf8:	b580      	push	{r7, lr}
    8cfa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8cfc:	4b03      	ldr	r3, [pc, #12]	; (8d0c <TC5_Handler+0x14>)
    8cfe:	681b      	ldr	r3, [r3, #0]
    8d00:	4618      	mov	r0, r3
    8d02:	4b03      	ldr	r3, [pc, #12]	; (8d10 <TC5_Handler+0x18>)
    8d04:	4798      	blx	r3
}
    8d06:	bf00      	nop
    8d08:	bd80      	pop	{r7, pc}
    8d0a:	bf00      	nop
    8d0c:	20000a10 	.word	0x20000a10
    8d10:	00008c01 	.word	0x00008c01

00008d14 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8d14:	b580      	push	{r7, lr}
    8d16:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8d18:	4b03      	ldr	r3, [pc, #12]	; (8d28 <TC6_Handler+0x14>)
    8d1a:	681b      	ldr	r3, [r3, #0]
    8d1c:	4618      	mov	r0, r3
    8d1e:	4b03      	ldr	r3, [pc, #12]	; (8d2c <TC6_Handler+0x18>)
    8d20:	4798      	blx	r3
}
    8d22:	bf00      	nop
    8d24:	bd80      	pop	{r7, pc}
    8d26:	bf00      	nop
    8d28:	20000a14 	.word	0x20000a14
    8d2c:	00008c01 	.word	0x00008c01

00008d30 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8d30:	b580      	push	{r7, lr}
    8d32:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8d34:	4b03      	ldr	r3, [pc, #12]	; (8d44 <TC7_Handler+0x14>)
    8d36:	681b      	ldr	r3, [r3, #0]
    8d38:	4618      	mov	r0, r3
    8d3a:	4b03      	ldr	r3, [pc, #12]	; (8d48 <TC7_Handler+0x18>)
    8d3c:	4798      	blx	r3
}
    8d3e:	bf00      	nop
    8d40:	bd80      	pop	{r7, pc}
    8d42:	bf00      	nop
    8d44:	20000a18 	.word	0x20000a18
    8d48:	00008c39 	.word	0x00008c39

00008d4c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8d4c:	b580      	push	{r7, lr}
    8d4e:	b084      	sub	sp, #16
    8d50:	af00      	add	r7, sp, #0
    8d52:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8d54:	6878      	ldr	r0, [r7, #4]
    8d56:	4b13      	ldr	r3, [pc, #76]	; (8da4 <get_tc_index+0x58>)
    8d58:	4798      	blx	r3
    8d5a:	4603      	mov	r3, r0
    8d5c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8d5e:	2300      	movs	r3, #0
    8d60:	73fb      	strb	r3, [r7, #15]
    8d62:	e010      	b.n	8d86 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8d64:	7bfa      	ldrb	r2, [r7, #15]
    8d66:	4910      	ldr	r1, [pc, #64]	; (8da8 <get_tc_index+0x5c>)
    8d68:	4613      	mov	r3, r2
    8d6a:	009b      	lsls	r3, r3, #2
    8d6c:	4413      	add	r3, r2
    8d6e:	009b      	lsls	r3, r3, #2
    8d70:	440b      	add	r3, r1
    8d72:	781b      	ldrb	r3, [r3, #0]
    8d74:	7bba      	ldrb	r2, [r7, #14]
    8d76:	429a      	cmp	r2, r3
    8d78:	d102      	bne.n	8d80 <get_tc_index+0x34>
			return i;
    8d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8d7e:	e00d      	b.n	8d9c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8d80:	7bfb      	ldrb	r3, [r7, #15]
    8d82:	3301      	adds	r3, #1
    8d84:	73fb      	strb	r3, [r7, #15]
    8d86:	7bfb      	ldrb	r3, [r7, #15]
    8d88:	2b05      	cmp	r3, #5
    8d8a:	d9eb      	bls.n	8d64 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8d8c:	f240 221d 	movw	r2, #541	; 0x21d
    8d90:	4906      	ldr	r1, [pc, #24]	; (8dac <get_tc_index+0x60>)
    8d92:	2000      	movs	r0, #0
    8d94:	4b06      	ldr	r3, [pc, #24]	; (8db0 <get_tc_index+0x64>)
    8d96:	4798      	blx	r3
	return -1;
    8d98:	f04f 33ff 	mov.w	r3, #4294967295
}
    8d9c:	4618      	mov	r0, r3
    8d9e:	3710      	adds	r7, #16
    8da0:	46bd      	mov	sp, r7
    8da2:	bd80      	pop	{r7, pc}
    8da4:	00008e51 	.word	0x00008e51
    8da8:	200000e0 	.word	0x200000e0
    8dac:	00011e00 	.word	0x00011e00
    8db0:	00003cad 	.word	0x00003cad

00008db4 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8db4:	b480      	push	{r7}
    8db6:	b083      	sub	sp, #12
    8db8:	af00      	add	r7, sp, #0
    8dba:	6078      	str	r0, [r7, #4]
    8dbc:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8dbe:	687b      	ldr	r3, [r7, #4]
    8dc0:	4a17      	ldr	r2, [pc, #92]	; (8e20 <_tc_init_irq_param+0x6c>)
    8dc2:	4293      	cmp	r3, r2
    8dc4:	d102      	bne.n	8dcc <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8dc6:	4a17      	ldr	r2, [pc, #92]	; (8e24 <_tc_init_irq_param+0x70>)
    8dc8:	683b      	ldr	r3, [r7, #0]
    8dca:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8dcc:	687b      	ldr	r3, [r7, #4]
    8dce:	4a16      	ldr	r2, [pc, #88]	; (8e28 <_tc_init_irq_param+0x74>)
    8dd0:	4293      	cmp	r3, r2
    8dd2:	d102      	bne.n	8dda <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8dd4:	4a15      	ldr	r2, [pc, #84]	; (8e2c <_tc_init_irq_param+0x78>)
    8dd6:	683b      	ldr	r3, [r7, #0]
    8dd8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8dda:	687b      	ldr	r3, [r7, #4]
    8ddc:	4a14      	ldr	r2, [pc, #80]	; (8e30 <_tc_init_irq_param+0x7c>)
    8dde:	4293      	cmp	r3, r2
    8de0:	d102      	bne.n	8de8 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8de2:	4a14      	ldr	r2, [pc, #80]	; (8e34 <_tc_init_irq_param+0x80>)
    8de4:	683b      	ldr	r3, [r7, #0]
    8de6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8de8:	687b      	ldr	r3, [r7, #4]
    8dea:	4a13      	ldr	r2, [pc, #76]	; (8e38 <_tc_init_irq_param+0x84>)
    8dec:	4293      	cmp	r3, r2
    8dee:	d102      	bne.n	8df6 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8df0:	4a12      	ldr	r2, [pc, #72]	; (8e3c <_tc_init_irq_param+0x88>)
    8df2:	683b      	ldr	r3, [r7, #0]
    8df4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8df6:	687b      	ldr	r3, [r7, #4]
    8df8:	4a11      	ldr	r2, [pc, #68]	; (8e40 <_tc_init_irq_param+0x8c>)
    8dfa:	4293      	cmp	r3, r2
    8dfc:	d102      	bne.n	8e04 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8dfe:	4a11      	ldr	r2, [pc, #68]	; (8e44 <_tc_init_irq_param+0x90>)
    8e00:	683b      	ldr	r3, [r7, #0]
    8e02:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8e04:	687b      	ldr	r3, [r7, #4]
    8e06:	4a10      	ldr	r2, [pc, #64]	; (8e48 <_tc_init_irq_param+0x94>)
    8e08:	4293      	cmp	r3, r2
    8e0a:	d102      	bne.n	8e12 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8e0c:	4a0f      	ldr	r2, [pc, #60]	; (8e4c <_tc_init_irq_param+0x98>)
    8e0e:	683b      	ldr	r3, [r7, #0]
    8e10:	6013      	str	r3, [r2, #0]
	}
}
    8e12:	bf00      	nop
    8e14:	370c      	adds	r7, #12
    8e16:	46bd      	mov	sp, r7
    8e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e1c:	4770      	bx	lr
    8e1e:	bf00      	nop
    8e20:	40003800 	.word	0x40003800
    8e24:	20000a04 	.word	0x20000a04
    8e28:	4101a000 	.word	0x4101a000
    8e2c:	20000a08 	.word	0x20000a08
    8e30:	42001400 	.word	0x42001400
    8e34:	20000a0c 	.word	0x20000a0c
    8e38:	42001800 	.word	0x42001800
    8e3c:	20000a10 	.word	0x20000a10
    8e40:	43001400 	.word	0x43001400
    8e44:	20000a14 	.word	0x20000a14
    8e48:	43001800 	.word	0x43001800
    8e4c:	20000a18 	.word	0x20000a18

00008e50 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8e50:	b4b0      	push	{r4, r5, r7}
    8e52:	b08d      	sub	sp, #52	; 0x34
    8e54:	af00      	add	r7, sp, #0
    8e56:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8e58:	4b13      	ldr	r3, [pc, #76]	; (8ea8 <_get_hardware_offset+0x58>)
    8e5a:	f107 040c 	add.w	r4, r7, #12
    8e5e:	461d      	mov	r5, r3
    8e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8e64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8e6c:	2300      	movs	r3, #0
    8e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8e70:	e010      	b.n	8e94 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8e74:	009b      	lsls	r3, r3, #2
    8e76:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8e7a:	4413      	add	r3, r2
    8e7c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8e80:	461a      	mov	r2, r3
    8e82:	687b      	ldr	r3, [r7, #4]
    8e84:	429a      	cmp	r2, r3
    8e86:	d102      	bne.n	8e8e <_get_hardware_offset+0x3e>
			return i;
    8e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8e8a:	b2db      	uxtb	r3, r3
    8e8c:	e006      	b.n	8e9c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8e90:	3301      	adds	r3, #1
    8e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    8e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8e96:	2b07      	cmp	r3, #7
    8e98:	d9eb      	bls.n	8e72 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8e9a:	2300      	movs	r3, #0
}
    8e9c:	4618      	mov	r0, r3
    8e9e:	3734      	adds	r7, #52	; 0x34
    8ea0:	46bd      	mov	sp, r7
    8ea2:	bcb0      	pop	{r4, r5, r7}
    8ea4:	4770      	bx	lr
    8ea6:	bf00      	nop
    8ea8:	00011e14 	.word	0x00011e14

00008eac <__NVIC_EnableIRQ>:
{
    8eac:	b480      	push	{r7}
    8eae:	b083      	sub	sp, #12
    8eb0:	af00      	add	r7, sp, #0
    8eb2:	4603      	mov	r3, r0
    8eb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8eba:	2b00      	cmp	r3, #0
    8ebc:	db0b      	blt.n	8ed6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8ebe:	4909      	ldr	r1, [pc, #36]	; (8ee4 <__NVIC_EnableIRQ+0x38>)
    8ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8ec4:	095b      	lsrs	r3, r3, #5
    8ec6:	88fa      	ldrh	r2, [r7, #6]
    8ec8:	f002 021f 	and.w	r2, r2, #31
    8ecc:	2001      	movs	r0, #1
    8ece:	fa00 f202 	lsl.w	r2, r0, r2
    8ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8ed6:	bf00      	nop
    8ed8:	370c      	adds	r7, #12
    8eda:	46bd      	mov	sp, r7
    8edc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ee0:	4770      	bx	lr
    8ee2:	bf00      	nop
    8ee4:	e000e100 	.word	0xe000e100

00008ee8 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8ee8:	b480      	push	{r7}
    8eea:	b087      	sub	sp, #28
    8eec:	af00      	add	r7, sp, #0
    8eee:	60f8      	str	r0, [r7, #12]
    8ef0:	460b      	mov	r3, r1
    8ef2:	607a      	str	r2, [r7, #4]
    8ef4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8ef6:	7afa      	ldrb	r2, [r7, #11]
    8ef8:	68f9      	ldr	r1, [r7, #12]
    8efa:	4613      	mov	r3, r2
    8efc:	009b      	lsls	r3, r3, #2
    8efe:	4413      	add	r3, r2
    8f00:	009b      	lsls	r3, r3, #2
    8f02:	440b      	add	r3, r1
    8f04:	3340      	adds	r3, #64	; 0x40
    8f06:	681b      	ldr	r3, [r3, #0]
    8f08:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8f0a:	697a      	ldr	r2, [r7, #20]
    8f0c:	687b      	ldr	r3, [r7, #4]
    8f0e:	4013      	ands	r3, r2
    8f10:	617b      	str	r3, [r7, #20]
	return tmp;
    8f12:	697b      	ldr	r3, [r7, #20]
}
    8f14:	4618      	mov	r0, r3
    8f16:	371c      	adds	r7, #28
    8f18:	46bd      	mov	sp, r7
    8f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f1e:	4770      	bx	lr

00008f20 <hri_oscctrl_get_STATUS_reg>:
{
    8f20:	b480      	push	{r7}
    8f22:	b085      	sub	sp, #20
    8f24:	af00      	add	r7, sp, #0
    8f26:	6078      	str	r0, [r7, #4]
    8f28:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8f2a:	687b      	ldr	r3, [r7, #4]
    8f2c:	691b      	ldr	r3, [r3, #16]
    8f2e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8f30:	68fa      	ldr	r2, [r7, #12]
    8f32:	683b      	ldr	r3, [r7, #0]
    8f34:	4013      	ands	r3, r2
    8f36:	60fb      	str	r3, [r7, #12]
	return tmp;
    8f38:	68fb      	ldr	r3, [r7, #12]
}
    8f3a:	4618      	mov	r0, r3
    8f3c:	3714      	adds	r7, #20
    8f3e:	46bd      	mov	sp, r7
    8f40:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f44:	4770      	bx	lr

00008f46 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8f46:	b480      	push	{r7}
    8f48:	b085      	sub	sp, #20
    8f4a:	af00      	add	r7, sp, #0
    8f4c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8f4e:	687b      	ldr	r3, [r7, #4]
    8f50:	f893 3020 	ldrb.w	r3, [r3, #32]
    8f54:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8f56:	7bfb      	ldrb	r3, [r7, #15]
    8f58:	f003 0301 	and.w	r3, r3, #1
    8f5c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8f5e:	7bfb      	ldrb	r3, [r7, #15]
    8f60:	2b00      	cmp	r3, #0
    8f62:	bf14      	ite	ne
    8f64:	2301      	movne	r3, #1
    8f66:	2300      	moveq	r3, #0
    8f68:	b2db      	uxtb	r3, r3
}
    8f6a:	4618      	mov	r0, r3
    8f6c:	3714      	adds	r7, #20
    8f6e:	46bd      	mov	sp, r7
    8f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f74:	4770      	bx	lr

00008f76 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8f76:	b480      	push	{r7}
    8f78:	b083      	sub	sp, #12
    8f7a:	af00      	add	r7, sp, #0
    8f7c:	6078      	str	r0, [r7, #4]
    8f7e:	460b      	mov	r3, r1
    8f80:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8f82:	bf00      	nop
    8f84:	687b      	ldr	r3, [r7, #4]
    8f86:	789b      	ldrb	r3, [r3, #2]
    8f88:	b2da      	uxtb	r2, r3
    8f8a:	78fb      	ldrb	r3, [r7, #3]
    8f8c:	4013      	ands	r3, r2
    8f8e:	b2db      	uxtb	r3, r3
    8f90:	2b00      	cmp	r3, #0
    8f92:	d1f7      	bne.n	8f84 <hri_usb_wait_for_sync+0xe>
	};
}
    8f94:	bf00      	nop
    8f96:	370c      	adds	r7, #12
    8f98:	46bd      	mov	sp, r7
    8f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f9e:	4770      	bx	lr

00008fa0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8fa0:	b480      	push	{r7}
    8fa2:	b083      	sub	sp, #12
    8fa4:	af00      	add	r7, sp, #0
    8fa6:	6078      	str	r0, [r7, #4]
    8fa8:	460b      	mov	r3, r1
    8faa:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8fac:	687b      	ldr	r3, [r7, #4]
    8fae:	789b      	ldrb	r3, [r3, #2]
    8fb0:	b2da      	uxtb	r2, r3
    8fb2:	78fb      	ldrb	r3, [r7, #3]
    8fb4:	4013      	ands	r3, r2
    8fb6:	b2db      	uxtb	r3, r3
    8fb8:	2b00      	cmp	r3, #0
    8fba:	bf14      	ite	ne
    8fbc:	2301      	movne	r3, #1
    8fbe:	2300      	moveq	r3, #0
    8fc0:	b2db      	uxtb	r3, r3
}
    8fc2:	4618      	mov	r0, r3
    8fc4:	370c      	adds	r7, #12
    8fc6:	46bd      	mov	sp, r7
    8fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fcc:	4770      	bx	lr

00008fce <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8fce:	b480      	push	{r7}
    8fd0:	b085      	sub	sp, #20
    8fd2:	af00      	add	r7, sp, #0
    8fd4:	6078      	str	r0, [r7, #4]
    8fd6:	460b      	mov	r3, r1
    8fd8:	70fb      	strb	r3, [r7, #3]
    8fda:	4613      	mov	r3, r2
    8fdc:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8fde:	78fb      	ldrb	r3, [r7, #3]
    8fe0:	687a      	ldr	r2, [r7, #4]
    8fe2:	3308      	adds	r3, #8
    8fe4:	015b      	lsls	r3, r3, #5
    8fe6:	4413      	add	r3, r2
    8fe8:	3307      	adds	r3, #7
    8fea:	781b      	ldrb	r3, [r3, #0]
    8fec:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8fee:	7bfa      	ldrb	r2, [r7, #15]
    8ff0:	78bb      	ldrb	r3, [r7, #2]
    8ff2:	4013      	ands	r3, r2
    8ff4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8ff6:	7bfb      	ldrb	r3, [r7, #15]
}
    8ff8:	4618      	mov	r0, r3
    8ffa:	3714      	adds	r7, #20
    8ffc:	46bd      	mov	sp, r7
    8ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    9002:	4770      	bx	lr

00009004 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    9004:	b480      	push	{r7}
    9006:	b083      	sub	sp, #12
    9008:	af00      	add	r7, sp, #0
    900a:	6078      	str	r0, [r7, #4]
    900c:	460b      	mov	r3, r1
    900e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9010:	78fb      	ldrb	r3, [r7, #3]
    9012:	687a      	ldr	r2, [r7, #4]
    9014:	3308      	adds	r3, #8
    9016:	015b      	lsls	r3, r3, #5
    9018:	4413      	add	r3, r2
    901a:	3307      	adds	r3, #7
    901c:	781b      	ldrb	r3, [r3, #0]
    901e:	b2db      	uxtb	r3, r3
}
    9020:	4618      	mov	r0, r3
    9022:	370c      	adds	r7, #12
    9024:	46bd      	mov	sp, r7
    9026:	f85d 7b04 	ldr.w	r7, [sp], #4
    902a:	4770      	bx	lr

0000902c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    902c:	b480      	push	{r7}
    902e:	b083      	sub	sp, #12
    9030:	af00      	add	r7, sp, #0
    9032:	6078      	str	r0, [r7, #4]
    9034:	460b      	mov	r3, r1
    9036:	70fb      	strb	r3, [r7, #3]
    9038:	4613      	mov	r3, r2
    903a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    903c:	78fb      	ldrb	r3, [r7, #3]
    903e:	687a      	ldr	r2, [r7, #4]
    9040:	3308      	adds	r3, #8
    9042:	015b      	lsls	r3, r3, #5
    9044:	4413      	add	r3, r2
    9046:	3307      	adds	r3, #7
    9048:	78ba      	ldrb	r2, [r7, #2]
    904a:	701a      	strb	r2, [r3, #0]
}
    904c:	bf00      	nop
    904e:	370c      	adds	r7, #12
    9050:	46bd      	mov	sp, r7
    9052:	f85d 7b04 	ldr.w	r7, [sp], #4
    9056:	4770      	bx	lr

00009058 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    9058:	b480      	push	{r7}
    905a:	b083      	sub	sp, #12
    905c:	af00      	add	r7, sp, #0
    905e:	6078      	str	r0, [r7, #4]
    9060:	460b      	mov	r3, r1
    9062:	70fb      	strb	r3, [r7, #3]
    9064:	4613      	mov	r3, r2
    9066:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9068:	78fb      	ldrb	r3, [r7, #3]
    906a:	687a      	ldr	r2, [r7, #4]
    906c:	3308      	adds	r3, #8
    906e:	015b      	lsls	r3, r3, #5
    9070:	4413      	add	r3, r2
    9072:	3305      	adds	r3, #5
    9074:	78ba      	ldrb	r2, [r7, #2]
    9076:	701a      	strb	r2, [r3, #0]
}
    9078:	bf00      	nop
    907a:	370c      	adds	r7, #12
    907c:	46bd      	mov	sp, r7
    907e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9082:	4770      	bx	lr

00009084 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    9084:	b480      	push	{r7}
    9086:	b083      	sub	sp, #12
    9088:	af00      	add	r7, sp, #0
    908a:	6078      	str	r0, [r7, #4]
    908c:	460b      	mov	r3, r1
    908e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9090:	78fb      	ldrb	r3, [r7, #3]
    9092:	687a      	ldr	r2, [r7, #4]
    9094:	3308      	adds	r3, #8
    9096:	015b      	lsls	r3, r3, #5
    9098:	4413      	add	r3, r2
    909a:	3306      	adds	r3, #6
    909c:	781b      	ldrb	r3, [r3, #0]
    909e:	b2db      	uxtb	r3, r3
}
    90a0:	4618      	mov	r0, r3
    90a2:	370c      	adds	r7, #12
    90a4:	46bd      	mov	sp, r7
    90a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    90aa:	4770      	bx	lr

000090ac <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    90ac:	b480      	push	{r7}
    90ae:	b083      	sub	sp, #12
    90b0:	af00      	add	r7, sp, #0
    90b2:	6078      	str	r0, [r7, #4]
    90b4:	460b      	mov	r3, r1
    90b6:	70fb      	strb	r3, [r7, #3]
    90b8:	4613      	mov	r3, r2
    90ba:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    90bc:	78fb      	ldrb	r3, [r7, #3]
    90be:	687a      	ldr	r2, [r7, #4]
    90c0:	3308      	adds	r3, #8
    90c2:	015b      	lsls	r3, r3, #5
    90c4:	4413      	add	r3, r2
    90c6:	3304      	adds	r3, #4
    90c8:	78ba      	ldrb	r2, [r7, #2]
    90ca:	701a      	strb	r2, [r3, #0]
}
    90cc:	bf00      	nop
    90ce:	370c      	adds	r7, #12
    90d0:	46bd      	mov	sp, r7
    90d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    90d6:	4770      	bx	lr

000090d8 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    90d8:	b480      	push	{r7}
    90da:	b083      	sub	sp, #12
    90dc:	af00      	add	r7, sp, #0
    90de:	6078      	str	r0, [r7, #4]
    90e0:	460b      	mov	r3, r1
    90e2:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    90e4:	78fb      	ldrb	r3, [r7, #3]
    90e6:	687a      	ldr	r2, [r7, #4]
    90e8:	015b      	lsls	r3, r3, #5
    90ea:	4413      	add	r3, r2
    90ec:	f503 7384 	add.w	r3, r3, #264	; 0x108
    90f0:	2210      	movs	r2, #16
    90f2:	701a      	strb	r2, [r3, #0]
}
    90f4:	bf00      	nop
    90f6:	370c      	adds	r7, #12
    90f8:	46bd      	mov	sp, r7
    90fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    90fe:	4770      	bx	lr

00009100 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    9100:	b480      	push	{r7}
    9102:	b083      	sub	sp, #12
    9104:	af00      	add	r7, sp, #0
    9106:	6078      	str	r0, [r7, #4]
    9108:	460b      	mov	r3, r1
    910a:	70fb      	strb	r3, [r7, #3]
    910c:	4613      	mov	r3, r2
    910e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9110:	78fb      	ldrb	r3, [r7, #3]
    9112:	687a      	ldr	r2, [r7, #4]
    9114:	015b      	lsls	r3, r3, #5
    9116:	4413      	add	r3, r2
    9118:	f203 1309 	addw	r3, r3, #265	; 0x109
    911c:	78ba      	ldrb	r2, [r7, #2]
    911e:	701a      	strb	r2, [r3, #0]
}
    9120:	bf00      	nop
    9122:	370c      	adds	r7, #12
    9124:	46bd      	mov	sp, r7
    9126:	f85d 7b04 	ldr.w	r7, [sp], #4
    912a:	4770      	bx	lr

0000912c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    912c:	b480      	push	{r7}
    912e:	b083      	sub	sp, #12
    9130:	af00      	add	r7, sp, #0
    9132:	6078      	str	r0, [r7, #4]
    9134:	460b      	mov	r3, r1
    9136:	70fb      	strb	r3, [r7, #3]
    9138:	4613      	mov	r3, r2
    913a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    913c:	78fb      	ldrb	r3, [r7, #3]
    913e:	687a      	ldr	r2, [r7, #4]
    9140:	015b      	lsls	r3, r3, #5
    9142:	4413      	add	r3, r2
    9144:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9148:	78ba      	ldrb	r2, [r7, #2]
    914a:	701a      	strb	r2, [r3, #0]
}
    914c:	bf00      	nop
    914e:	370c      	adds	r7, #12
    9150:	46bd      	mov	sp, r7
    9152:	f85d 7b04 	ldr.w	r7, [sp], #4
    9156:	4770      	bx	lr

00009158 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9158:	b480      	push	{r7}
    915a:	b085      	sub	sp, #20
    915c:	af00      	add	r7, sp, #0
    915e:	6078      	str	r0, [r7, #4]
    9160:	460b      	mov	r3, r1
    9162:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9164:	78fb      	ldrb	r3, [r7, #3]
    9166:	687a      	ldr	r2, [r7, #4]
    9168:	3308      	adds	r3, #8
    916a:	015b      	lsls	r3, r3, #5
    916c:	4413      	add	r3, r2
    916e:	781b      	ldrb	r3, [r3, #0]
    9170:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    9172:	7bfb      	ldrb	r3, [r7, #15]
    9174:	f003 0307 	and.w	r3, r3, #7
    9178:	73fb      	strb	r3, [r7, #15]
	return tmp;
    917a:	7bfb      	ldrb	r3, [r7, #15]
}
    917c:	4618      	mov	r0, r3
    917e:	3714      	adds	r7, #20
    9180:	46bd      	mov	sp, r7
    9182:	f85d 7b04 	ldr.w	r7, [sp], #4
    9186:	4770      	bx	lr

00009188 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9188:	b480      	push	{r7}
    918a:	b085      	sub	sp, #20
    918c:	af00      	add	r7, sp, #0
    918e:	6078      	str	r0, [r7, #4]
    9190:	460b      	mov	r3, r1
    9192:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9194:	78fb      	ldrb	r3, [r7, #3]
    9196:	687a      	ldr	r2, [r7, #4]
    9198:	3308      	adds	r3, #8
    919a:	015b      	lsls	r3, r3, #5
    919c:	4413      	add	r3, r2
    919e:	781b      	ldrb	r3, [r3, #0]
    91a0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    91a2:	7bfb      	ldrb	r3, [r7, #15]
    91a4:	091b      	lsrs	r3, r3, #4
    91a6:	b2db      	uxtb	r3, r3
    91a8:	f003 0307 	and.w	r3, r3, #7
    91ac:	73fb      	strb	r3, [r7, #15]
	return tmp;
    91ae:	7bfb      	ldrb	r3, [r7, #15]
}
    91b0:	4618      	mov	r0, r3
    91b2:	3714      	adds	r7, #20
    91b4:	46bd      	mov	sp, r7
    91b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    91ba:	4770      	bx	lr

000091bc <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    91bc:	b480      	push	{r7}
    91be:	b083      	sub	sp, #12
    91c0:	af00      	add	r7, sp, #0
    91c2:	6078      	str	r0, [r7, #4]
    91c4:	460b      	mov	r3, r1
    91c6:	70fb      	strb	r3, [r7, #3]
    91c8:	4613      	mov	r3, r2
    91ca:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    91cc:	78fb      	ldrb	r3, [r7, #3]
    91ce:	687a      	ldr	r2, [r7, #4]
    91d0:	3308      	adds	r3, #8
    91d2:	015b      	lsls	r3, r3, #5
    91d4:	4413      	add	r3, r2
    91d6:	78ba      	ldrb	r2, [r7, #2]
    91d8:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    91da:	bf00      	nop
    91dc:	370c      	adds	r7, #12
    91de:	46bd      	mov	sp, r7
    91e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    91e4:	4770      	bx	lr

000091e6 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    91e6:	b480      	push	{r7}
    91e8:	b083      	sub	sp, #12
    91ea:	af00      	add	r7, sp, #0
    91ec:	6078      	str	r0, [r7, #4]
    91ee:	460b      	mov	r3, r1
    91f0:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    91f2:	78fb      	ldrb	r3, [r7, #3]
    91f4:	687a      	ldr	r2, [r7, #4]
    91f6:	3308      	adds	r3, #8
    91f8:	015b      	lsls	r3, r3, #5
    91fa:	4413      	add	r3, r2
    91fc:	781b      	ldrb	r3, [r3, #0]
    91fe:	b2db      	uxtb	r3, r3
}
    9200:	4618      	mov	r0, r3
    9202:	370c      	adds	r7, #12
    9204:	46bd      	mov	sp, r7
    9206:	f85d 7b04 	ldr.w	r7, [sp], #4
    920a:	4770      	bx	lr

0000920c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    920c:	b480      	push	{r7}
    920e:	b083      	sub	sp, #12
    9210:	af00      	add	r7, sp, #0
    9212:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    9214:	687b      	ldr	r3, [r7, #4]
    9216:	8b9b      	ldrh	r3, [r3, #28]
    9218:	b29b      	uxth	r3, r3
}
    921a:	4618      	mov	r0, r3
    921c:	370c      	adds	r7, #12
    921e:	46bd      	mov	sp, r7
    9220:	f85d 7b04 	ldr.w	r7, [sp], #4
    9224:	4770      	bx	lr

00009226 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    9226:	b480      	push	{r7}
    9228:	b083      	sub	sp, #12
    922a:	af00      	add	r7, sp, #0
    922c:	6078      	str	r0, [r7, #4]
    922e:	460b      	mov	r3, r1
    9230:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9232:	687b      	ldr	r3, [r7, #4]
    9234:	887a      	ldrh	r2, [r7, #2]
    9236:	839a      	strh	r2, [r3, #28]
}
    9238:	bf00      	nop
    923a:	370c      	adds	r7, #12
    923c:	46bd      	mov	sp, r7
    923e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9242:	4770      	bx	lr

00009244 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9244:	b480      	push	{r7}
    9246:	b083      	sub	sp, #12
    9248:	af00      	add	r7, sp, #0
    924a:	6078      	str	r0, [r7, #4]
    924c:	460b      	mov	r3, r1
    924e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9250:	687b      	ldr	r3, [r7, #4]
    9252:	887a      	ldrh	r2, [r7, #2]
    9254:	831a      	strh	r2, [r3, #24]
}
    9256:	bf00      	nop
    9258:	370c      	adds	r7, #12
    925a:	46bd      	mov	sp, r7
    925c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9260:	4770      	bx	lr

00009262 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    9262:	b480      	push	{r7}
    9264:	b083      	sub	sp, #12
    9266:	af00      	add	r7, sp, #0
    9268:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    926a:	687b      	ldr	r3, [r7, #4]
    926c:	8b1b      	ldrh	r3, [r3, #24]
    926e:	b29b      	uxth	r3, r3
}
    9270:	4618      	mov	r0, r3
    9272:	370c      	adds	r7, #12
    9274:	46bd      	mov	sp, r7
    9276:	f85d 7b04 	ldr.w	r7, [sp], #4
    927a:	4770      	bx	lr

0000927c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    927c:	b480      	push	{r7}
    927e:	b083      	sub	sp, #12
    9280:	af00      	add	r7, sp, #0
    9282:	6078      	str	r0, [r7, #4]
    9284:	460b      	mov	r3, r1
    9286:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9288:	687b      	ldr	r3, [r7, #4]
    928a:	887a      	ldrh	r2, [r7, #2]
    928c:	829a      	strh	r2, [r3, #20]
}
    928e:	bf00      	nop
    9290:	370c      	adds	r7, #12
    9292:	46bd      	mov	sp, r7
    9294:	f85d 7b04 	ldr.w	r7, [sp], #4
    9298:	4770      	bx	lr

0000929a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    929a:	b480      	push	{r7}
    929c:	b085      	sub	sp, #20
    929e:	af00      	add	r7, sp, #0
    92a0:	6078      	str	r0, [r7, #4]
    92a2:	460b      	mov	r3, r1
    92a4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    92a6:	687b      	ldr	r3, [r7, #4]
    92a8:	789b      	ldrb	r3, [r3, #2]
    92aa:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    92ac:	7bfa      	ldrb	r2, [r7, #15]
    92ae:	78fb      	ldrb	r3, [r7, #3]
    92b0:	4013      	ands	r3, r2
    92b2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    92b4:	7bfb      	ldrb	r3, [r7, #15]
}
    92b6:	4618      	mov	r0, r3
    92b8:	3714      	adds	r7, #20
    92ba:	46bd      	mov	sp, r7
    92bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    92c0:	4770      	bx	lr
	...

000092c4 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    92c4:	b580      	push	{r7, lr}
    92c6:	b082      	sub	sp, #8
    92c8:	af00      	add	r7, sp, #0
    92ca:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    92cc:	687b      	ldr	r3, [r7, #4]
    92ce:	781b      	ldrb	r3, [r3, #0]
    92d0:	b2db      	uxtb	r3, r3
    92d2:	f023 0302 	bic.w	r3, r3, #2
    92d6:	b2da      	uxtb	r2, r3
    92d8:	687b      	ldr	r3, [r7, #4]
    92da:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    92dc:	2103      	movs	r1, #3
    92de:	6878      	ldr	r0, [r7, #4]
    92e0:	4b02      	ldr	r3, [pc, #8]	; (92ec <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    92e2:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    92e4:	bf00      	nop
    92e6:	3708      	adds	r7, #8
    92e8:	46bd      	mov	sp, r7
    92ea:	bd80      	pop	{r7, pc}
    92ec:	00008f77 	.word	0x00008f77

000092f0 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    92f0:	b580      	push	{r7, lr}
    92f2:	b084      	sub	sp, #16
    92f4:	af00      	add	r7, sp, #0
    92f6:	6078      	str	r0, [r7, #4]
    92f8:	460b      	mov	r3, r1
    92fa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    92fc:	2103      	movs	r1, #3
    92fe:	6878      	ldr	r0, [r7, #4]
    9300:	4b06      	ldr	r3, [pc, #24]	; (931c <hri_usb_get_CTRLA_reg+0x2c>)
    9302:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    9304:	687b      	ldr	r3, [r7, #4]
    9306:	781b      	ldrb	r3, [r3, #0]
    9308:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    930a:	7bfa      	ldrb	r2, [r7, #15]
    930c:	78fb      	ldrb	r3, [r7, #3]
    930e:	4013      	ands	r3, r2
    9310:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9312:	7bfb      	ldrb	r3, [r7, #15]
}
    9314:	4618      	mov	r0, r3
    9316:	3710      	adds	r7, #16
    9318:	46bd      	mov	sp, r7
    931a:	bd80      	pop	{r7, pc}
    931c:	00008f77 	.word	0x00008f77

00009320 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    9320:	b580      	push	{r7, lr}
    9322:	b082      	sub	sp, #8
    9324:	af00      	add	r7, sp, #0
    9326:	6078      	str	r0, [r7, #4]
    9328:	460b      	mov	r3, r1
    932a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    932c:	687b      	ldr	r3, [r7, #4]
    932e:	78fa      	ldrb	r2, [r7, #3]
    9330:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9332:	2103      	movs	r1, #3
    9334:	6878      	ldr	r0, [r7, #4]
    9336:	4b03      	ldr	r3, [pc, #12]	; (9344 <hri_usb_write_CTRLA_reg+0x24>)
    9338:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    933a:	bf00      	nop
    933c:	3708      	adds	r7, #8
    933e:	46bd      	mov	sp, r7
    9340:	bd80      	pop	{r7, pc}
    9342:	bf00      	nop
    9344:	00008f77 	.word	0x00008f77

00009348 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    9348:	b580      	push	{r7, lr}
    934a:	b082      	sub	sp, #8
    934c:	af00      	add	r7, sp, #0
    934e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9350:	2103      	movs	r1, #3
    9352:	6878      	ldr	r0, [r7, #4]
    9354:	4b04      	ldr	r3, [pc, #16]	; (9368 <hri_usb_read_CTRLA_reg+0x20>)
    9356:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    9358:	687b      	ldr	r3, [r7, #4]
    935a:	781b      	ldrb	r3, [r3, #0]
    935c:	b2db      	uxtb	r3, r3
}
    935e:	4618      	mov	r0, r3
    9360:	3708      	adds	r7, #8
    9362:	46bd      	mov	sp, r7
    9364:	bd80      	pop	{r7, pc}
    9366:	bf00      	nop
    9368:	00008f77 	.word	0x00008f77

0000936c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    936c:	b480      	push	{r7}
    936e:	b083      	sub	sp, #12
    9370:	af00      	add	r7, sp, #0
    9372:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9374:	687b      	ldr	r3, [r7, #4]
    9376:	891b      	ldrh	r3, [r3, #8]
    9378:	b29b      	uxth	r3, r3
    937a:	f023 0301 	bic.w	r3, r3, #1
    937e:	b29a      	uxth	r2, r3
    9380:	687b      	ldr	r3, [r7, #4]
    9382:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9384:	bf00      	nop
    9386:	370c      	adds	r7, #12
    9388:	46bd      	mov	sp, r7
    938a:	f85d 7b04 	ldr.w	r7, [sp], #4
    938e:	4770      	bx	lr

00009390 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    9390:	b480      	push	{r7}
    9392:	b083      	sub	sp, #12
    9394:	af00      	add	r7, sp, #0
    9396:	6078      	str	r0, [r7, #4]
    9398:	460b      	mov	r3, r1
    939a:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    939c:	687b      	ldr	r3, [r7, #4]
    939e:	887a      	ldrh	r2, [r7, #2]
    93a0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    93a2:	bf00      	nop
    93a4:	370c      	adds	r7, #12
    93a6:	46bd      	mov	sp, r7
    93a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    93ac:	4770      	bx	lr

000093ae <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    93ae:	b480      	push	{r7}
    93b0:	b083      	sub	sp, #12
    93b2:	af00      	add	r7, sp, #0
    93b4:	6078      	str	r0, [r7, #4]
    93b6:	460b      	mov	r3, r1
    93b8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    93ba:	687b      	ldr	r3, [r7, #4]
    93bc:	78fa      	ldrb	r2, [r7, #3]
    93be:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    93c0:	bf00      	nop
    93c2:	370c      	adds	r7, #12
    93c4:	46bd      	mov	sp, r7
    93c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    93ca:	4770      	bx	lr

000093cc <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    93cc:	b480      	push	{r7}
    93ce:	b083      	sub	sp, #12
    93d0:	af00      	add	r7, sp, #0
    93d2:	6078      	str	r0, [r7, #4]
    93d4:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    93d6:	687b      	ldr	r3, [r7, #4]
    93d8:	683a      	ldr	r2, [r7, #0]
    93da:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    93dc:	bf00      	nop
    93de:	370c      	adds	r7, #12
    93e0:	46bd      	mov	sp, r7
    93e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    93e6:	4770      	bx	lr

000093e8 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    93e8:	b480      	push	{r7}
    93ea:	b083      	sub	sp, #12
    93ec:	af00      	add	r7, sp, #0
    93ee:	6078      	str	r0, [r7, #4]
    93f0:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    93f2:	2300      	movs	r3, #0
}
    93f4:	4618      	mov	r0, r3
    93f6:	370c      	adds	r7, #12
    93f8:	46bd      	mov	sp, r7
    93fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    93fe:	4770      	bx	lr

00009400 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9400:	b480      	push	{r7}
    9402:	b085      	sub	sp, #20
    9404:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    9406:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    940a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    940c:	4b28      	ldr	r3, [pc, #160]	; (94b0 <_usb_load_calib+0xb0>)
    940e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    9410:	f003 031f 	and.w	r3, r3, #31
    9414:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    9416:	4b26      	ldr	r3, [pc, #152]	; (94b0 <_usb_load_calib+0xb0>)
    9418:	681b      	ldr	r3, [r3, #0]
    941a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    941c:	f003 031f 	and.w	r3, r3, #31
    9420:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9422:	4b23      	ldr	r3, [pc, #140]	; (94b0 <_usb_load_calib+0xb0>)
    9424:	681b      	ldr	r3, [r3, #0]
    9426:	0a9b      	lsrs	r3, r3, #10
    9428:	f003 0307 	and.w	r3, r3, #7
    942c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    942e:	68fb      	ldr	r3, [r7, #12]
    9430:	2b00      	cmp	r3, #0
    9432:	d002      	beq.n	943a <_usb_load_calib+0x3a>
    9434:	68fb      	ldr	r3, [r7, #12]
    9436:	2b1f      	cmp	r3, #31
    9438:	d101      	bne.n	943e <_usb_load_calib+0x3e>
		pad_transn = 9;
    943a:	2309      	movs	r3, #9
    943c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    943e:	68bb      	ldr	r3, [r7, #8]
    9440:	2b00      	cmp	r3, #0
    9442:	d002      	beq.n	944a <_usb_load_calib+0x4a>
    9444:	68bb      	ldr	r3, [r7, #8]
    9446:	2b1f      	cmp	r3, #31
    9448:	d101      	bne.n	944e <_usb_load_calib+0x4e>
		pad_transp = 25;
    944a:	2319      	movs	r3, #25
    944c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    944e:	687b      	ldr	r3, [r7, #4]
    9450:	2b00      	cmp	r3, #0
    9452:	d002      	beq.n	945a <_usb_load_calib+0x5a>
    9454:	687b      	ldr	r3, [r7, #4]
    9456:	2b07      	cmp	r3, #7
    9458:	d101      	bne.n	945e <_usb_load_calib+0x5e>
		pad_trim = 6;
    945a:	2306      	movs	r3, #6
    945c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    945e:	68fb      	ldr	r3, [r7, #12]
    9460:	b29b      	uxth	r3, r3
    9462:	019b      	lsls	r3, r3, #6
    9464:	b29b      	uxth	r3, r3
    9466:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    946a:	b29a      	uxth	r2, r3
    946c:	68bb      	ldr	r3, [r7, #8]
    946e:	b29b      	uxth	r3, r3
    9470:	f003 031f 	and.w	r3, r3, #31
    9474:	b29b      	uxth	r3, r3
    9476:	4313      	orrs	r3, r2
    9478:	b29a      	uxth	r2, r3
    947a:	687b      	ldr	r3, [r7, #4]
    947c:	b29b      	uxth	r3, r3
    947e:	031b      	lsls	r3, r3, #12
    9480:	b29b      	uxth	r3, r3
    9482:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    9486:	b29b      	uxth	r3, r3
    9488:	4313      	orrs	r3, r2
    948a:	b29a      	uxth	r2, r3
    948c:	683b      	ldr	r3, [r7, #0]
    948e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    9490:	683a      	ldr	r2, [r7, #0]
    9492:	78d3      	ldrb	r3, [r2, #3]
    9494:	f043 0303 	orr.w	r3, r3, #3
    9498:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    949a:	683a      	ldr	r2, [r7, #0]
    949c:	78d3      	ldrb	r3, [r2, #3]
    949e:	f043 030c 	orr.w	r3, r3, #12
    94a2:	70d3      	strb	r3, [r2, #3]
}
    94a4:	bf00      	nop
    94a6:	3714      	adds	r7, #20
    94a8:	46bd      	mov	sp, r7
    94aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    94ae:	4770      	bx	lr
    94b0:	00800084 	.word	0x00800084

000094b4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    94b4:	b580      	push	{r7, lr}
    94b6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    94b8:	bf00      	nop
    94ba:	2203      	movs	r2, #3
    94bc:	2100      	movs	r1, #0
    94be:	4804      	ldr	r0, [pc, #16]	; (94d0 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    94c0:	4b04      	ldr	r3, [pc, #16]	; (94d4 <_usb_d_dev_wait_dpll_rdy+0x20>)
    94c2:	4798      	blx	r3
    94c4:	4603      	mov	r3, r0
    94c6:	2b03      	cmp	r3, #3
    94c8:	d1f7      	bne.n	94ba <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    94ca:	bf00      	nop
    94cc:	bd80      	pop	{r7, pc}
    94ce:	bf00      	nop
    94d0:	40001000 	.word	0x40001000
    94d4:	00008ee9 	.word	0x00008ee9

000094d8 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    94d8:	b580      	push	{r7, lr}
    94da:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    94dc:	480e      	ldr	r0, [pc, #56]	; (9518 <_usb_d_dev_wait_dfll_rdy+0x40>)
    94de:	4b0f      	ldr	r3, [pc, #60]	; (951c <_usb_d_dev_wait_dfll_rdy+0x44>)
    94e0:	4798      	blx	r3
    94e2:	4603      	mov	r3, r0
    94e4:	2b00      	cmp	r3, #0
    94e6:	d00a      	beq.n	94fe <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    94e8:	bf00      	nop
    94ea:	f44f 6110 	mov.w	r1, #2304	; 0x900
    94ee:	480a      	ldr	r0, [pc, #40]	; (9518 <_usb_d_dev_wait_dfll_rdy+0x40>)
    94f0:	4b0b      	ldr	r3, [pc, #44]	; (9520 <_usb_d_dev_wait_dfll_rdy+0x48>)
    94f2:	4798      	blx	r3
    94f4:	4603      	mov	r3, r0
    94f6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    94fa:	d1f6      	bne.n	94ea <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    94fc:	e009      	b.n	9512 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    94fe:	bf00      	nop
    9500:	f44f 7180 	mov.w	r1, #256	; 0x100
    9504:	4804      	ldr	r0, [pc, #16]	; (9518 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9506:	4b06      	ldr	r3, [pc, #24]	; (9520 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9508:	4798      	blx	r3
    950a:	4603      	mov	r3, r0
    950c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9510:	d1f6      	bne.n	9500 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    9512:	bf00      	nop
    9514:	bd80      	pop	{r7, pc}
    9516:	bf00      	nop
    9518:	40001000 	.word	0x40001000
    951c:	00008f47 	.word	0x00008f47
    9520:	00008f21 	.word	0x00008f21

00009524 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    9524:	b580      	push	{r7, lr}
    9526:	b082      	sub	sp, #8
    9528:	af00      	add	r7, sp, #0
    952a:	4603      	mov	r3, r0
    952c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    952e:	79fb      	ldrb	r3, [r7, #7]
    9530:	2b00      	cmp	r3, #0
    9532:	d102      	bne.n	953a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    9534:	4b05      	ldr	r3, [pc, #20]	; (954c <_usb_d_dev_wait_clk_rdy+0x28>)
    9536:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    9538:	e004      	b.n	9544 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    953a:	79fb      	ldrb	r3, [r7, #7]
    953c:	2b01      	cmp	r3, #1
    953e:	d101      	bne.n	9544 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9540:	4b03      	ldr	r3, [pc, #12]	; (9550 <_usb_d_dev_wait_clk_rdy+0x2c>)
    9542:	4798      	blx	r3
}
    9544:	bf00      	nop
    9546:	3708      	adds	r7, #8
    9548:	46bd      	mov	sp, r7
    954a:	bd80      	pop	{r7, pc}
    954c:	000094d9 	.word	0x000094d9
    9550:	000094b5 	.word	0x000094b5

00009554 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9554:	b580      	push	{r7, lr}
    9556:	b082      	sub	sp, #8
    9558:	af00      	add	r7, sp, #0
    955a:	4603      	mov	r3, r0
    955c:	6039      	str	r1, [r7, #0]
    955e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    9560:	683b      	ldr	r3, [r7, #0]
    9562:	b2da      	uxtb	r2, r3
    9564:	79fb      	ldrb	r3, [r7, #7]
    9566:	4619      	mov	r1, r3
    9568:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    956c:	4b02      	ldr	r3, [pc, #8]	; (9578 <_usbd_ep_int_ack+0x24>)
    956e:	4798      	blx	r3
}
    9570:	bf00      	nop
    9572:	3708      	adds	r7, #8
    9574:	46bd      	mov	sp, r7
    9576:	bd80      	pop	{r7, pc}
    9578:	0000902d 	.word	0x0000902d

0000957c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    957c:	b580      	push	{r7, lr}
    957e:	b082      	sub	sp, #8
    9580:	af00      	add	r7, sp, #0
    9582:	4603      	mov	r3, r0
    9584:	6039      	str	r1, [r7, #0]
    9586:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9588:	683b      	ldr	r3, [r7, #0]
    958a:	b2da      	uxtb	r2, r3
    958c:	79fb      	ldrb	r3, [r7, #7]
    958e:	4619      	mov	r1, r3
    9590:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9594:	4b02      	ldr	r3, [pc, #8]	; (95a0 <_usbd_ep_int_en+0x24>)
    9596:	4798      	blx	r3
}
    9598:	bf00      	nop
    959a:	3708      	adds	r7, #8
    959c:	46bd      	mov	sp, r7
    959e:	bd80      	pop	{r7, pc}
    95a0:	00009101 	.word	0x00009101

000095a4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    95a4:	b580      	push	{r7, lr}
    95a6:	b082      	sub	sp, #8
    95a8:	af00      	add	r7, sp, #0
    95aa:	4603      	mov	r3, r0
    95ac:	6039      	str	r1, [r7, #0]
    95ae:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    95b0:	683b      	ldr	r3, [r7, #0]
    95b2:	b2da      	uxtb	r2, r3
    95b4:	79fb      	ldrb	r3, [r7, #7]
    95b6:	4619      	mov	r1, r3
    95b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95bc:	4b02      	ldr	r3, [pc, #8]	; (95c8 <_usbd_ep_int_dis+0x24>)
    95be:	4798      	blx	r3
}
    95c0:	bf00      	nop
    95c2:	3708      	adds	r7, #8
    95c4:	46bd      	mov	sp, r7
    95c6:	bd80      	pop	{r7, pc}
    95c8:	0000912d 	.word	0x0000912d

000095cc <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    95cc:	b580      	push	{r7, lr}
    95ce:	b082      	sub	sp, #8
    95d0:	af00      	add	r7, sp, #0
    95d2:	4603      	mov	r3, r0
    95d4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    95d6:	79fb      	ldrb	r3, [r7, #7]
    95d8:	4619      	mov	r1, r3
    95da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95de:	4b06      	ldr	r3, [pc, #24]	; (95f8 <_usbd_ep_is_ctrl+0x2c>)
    95e0:	4798      	blx	r3
    95e2:	4603      	mov	r3, r0
    95e4:	2b11      	cmp	r3, #17
    95e6:	bf0c      	ite	eq
    95e8:	2301      	moveq	r3, #1
    95ea:	2300      	movne	r3, #0
    95ec:	b2db      	uxtb	r3, r3
}
    95ee:	4618      	mov	r0, r3
    95f0:	3708      	adds	r7, #8
    95f2:	46bd      	mov	sp, r7
    95f4:	bd80      	pop	{r7, pc}
    95f6:	bf00      	nop
    95f8:	000091e7 	.word	0x000091e7

000095fc <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    95fc:	b580      	push	{r7, lr}
    95fe:	b082      	sub	sp, #8
    9600:	af00      	add	r7, sp, #0
    9602:	4603      	mov	r3, r0
    9604:	71fb      	strb	r3, [r7, #7]
    9606:	460b      	mov	r3, r1
    9608:	71bb      	strb	r3, [r7, #6]
    960a:	4613      	mov	r3, r2
    960c:	717b      	strb	r3, [r7, #5]
	if (st) {
    960e:	797b      	ldrb	r3, [r7, #5]
    9610:	2b00      	cmp	r3, #0
    9612:	d00b      	beq.n	962c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9614:	79bb      	ldrb	r3, [r7, #6]
    9616:	2210      	movs	r2, #16
    9618:	fa02 f303 	lsl.w	r3, r2, r3
    961c:	b2da      	uxtb	r2, r3
    961e:	79fb      	ldrb	r3, [r7, #7]
    9620:	4619      	mov	r1, r3
    9622:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9626:	4b09      	ldr	r3, [pc, #36]	; (964c <_usbd_ep_set_stall+0x50>)
    9628:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    962a:	e00a      	b.n	9642 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    962c:	79bb      	ldrb	r3, [r7, #6]
    962e:	2210      	movs	r2, #16
    9630:	fa02 f303 	lsl.w	r3, r2, r3
    9634:	b2da      	uxtb	r2, r3
    9636:	79fb      	ldrb	r3, [r7, #7]
    9638:	4619      	mov	r1, r3
    963a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    963e:	4b04      	ldr	r3, [pc, #16]	; (9650 <_usbd_ep_set_stall+0x54>)
    9640:	4798      	blx	r3
}
    9642:	bf00      	nop
    9644:	3708      	adds	r7, #8
    9646:	46bd      	mov	sp, r7
    9648:	bd80      	pop	{r7, pc}
    964a:	bf00      	nop
    964c:	00009059 	.word	0x00009059
    9650:	000090ad 	.word	0x000090ad

00009654 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9654:	b580      	push	{r7, lr}
    9656:	b084      	sub	sp, #16
    9658:	af00      	add	r7, sp, #0
    965a:	4603      	mov	r3, r0
    965c:	460a      	mov	r2, r1
    965e:	71fb      	strb	r3, [r7, #7]
    9660:	4613      	mov	r3, r2
    9662:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9664:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9668:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    966a:	79fb      	ldrb	r3, [r7, #7]
    966c:	4619      	mov	r1, r3
    966e:	68f8      	ldr	r0, [r7, #12]
    9670:	4b08      	ldr	r3, [pc, #32]	; (9694 <_usbd_ep_is_stalled+0x40>)
    9672:	4798      	blx	r3
    9674:	4603      	mov	r3, r0
    9676:	4619      	mov	r1, r3
    9678:	79bb      	ldrb	r3, [r7, #6]
    967a:	2210      	movs	r2, #16
    967c:	fa02 f303 	lsl.w	r3, r2, r3
    9680:	400b      	ands	r3, r1
    9682:	2b00      	cmp	r3, #0
    9684:	bf14      	ite	ne
    9686:	2301      	movne	r3, #1
    9688:	2300      	moveq	r3, #0
    968a:	b2db      	uxtb	r3, r3
}
    968c:	4618      	mov	r0, r3
    968e:	3710      	adds	r7, #16
    9690:	46bd      	mov	sp, r7
    9692:	bd80      	pop	{r7, pc}
    9694:	00009085 	.word	0x00009085

00009698 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    9698:	b580      	push	{r7, lr}
    969a:	b084      	sub	sp, #16
    969c:	af00      	add	r7, sp, #0
    969e:	4603      	mov	r3, r0
    96a0:	460a      	mov	r2, r1
    96a2:	71fb      	strb	r3, [r7, #7]
    96a4:	4613      	mov	r3, r2
    96a6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    96a8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    96ac:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    96ae:	79fb      	ldrb	r3, [r7, #7]
    96b0:	4619      	mov	r1, r3
    96b2:	68f8      	ldr	r0, [r7, #12]
    96b4:	4b08      	ldr	r3, [pc, #32]	; (96d8 <_usbd_ep_is_stall_sent+0x40>)
    96b6:	4798      	blx	r3
    96b8:	4603      	mov	r3, r0
    96ba:	4619      	mov	r1, r3
    96bc:	79bb      	ldrb	r3, [r7, #6]
    96be:	2220      	movs	r2, #32
    96c0:	fa02 f303 	lsl.w	r3, r2, r3
    96c4:	400b      	ands	r3, r1
    96c6:	2b00      	cmp	r3, #0
    96c8:	bf14      	ite	ne
    96ca:	2301      	movne	r3, #1
    96cc:	2300      	moveq	r3, #0
    96ce:	b2db      	uxtb	r3, r3
}
    96d0:	4618      	mov	r0, r3
    96d2:	3710      	adds	r7, #16
    96d4:	46bd      	mov	sp, r7
    96d6:	bd80      	pop	{r7, pc}
    96d8:	00009005 	.word	0x00009005

000096dc <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    96dc:	b580      	push	{r7, lr}
    96de:	b082      	sub	sp, #8
    96e0:	af00      	add	r7, sp, #0
    96e2:	4603      	mov	r3, r0
    96e4:	460a      	mov	r2, r1
    96e6:	71fb      	strb	r3, [r7, #7]
    96e8:	4613      	mov	r3, r2
    96ea:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    96ec:	79bb      	ldrb	r3, [r7, #6]
    96ee:	2220      	movs	r2, #32
    96f0:	409a      	lsls	r2, r3
    96f2:	79fb      	ldrb	r3, [r7, #7]
    96f4:	4611      	mov	r1, r2
    96f6:	4618      	mov	r0, r3
    96f8:	4b02      	ldr	r3, [pc, #8]	; (9704 <_usbd_ep_ack_stall+0x28>)
    96fa:	4798      	blx	r3
}
    96fc:	bf00      	nop
    96fe:	3708      	adds	r7, #8
    9700:	46bd      	mov	sp, r7
    9702:	bd80      	pop	{r7, pc}
    9704:	00009555 	.word	0x00009555

00009708 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    9708:	b580      	push	{r7, lr}
    970a:	b082      	sub	sp, #8
    970c:	af00      	add	r7, sp, #0
    970e:	4603      	mov	r3, r0
    9710:	71fb      	strb	r3, [r7, #7]
    9712:	460b      	mov	r3, r1
    9714:	71bb      	strb	r3, [r7, #6]
    9716:	4613      	mov	r3, r2
    9718:	717b      	strb	r3, [r7, #5]
	if (en) {
    971a:	797b      	ldrb	r3, [r7, #5]
    971c:	2b00      	cmp	r3, #0
    971e:	d008      	beq.n	9732 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9720:	79bb      	ldrb	r3, [r7, #6]
    9722:	2220      	movs	r2, #32
    9724:	409a      	lsls	r2, r3
    9726:	79fb      	ldrb	r3, [r7, #7]
    9728:	4611      	mov	r1, r2
    972a:	4618      	mov	r0, r3
    972c:	4b07      	ldr	r3, [pc, #28]	; (974c <_usbd_ep_int_stall_en+0x44>)
    972e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9730:	e007      	b.n	9742 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9732:	79bb      	ldrb	r3, [r7, #6]
    9734:	2220      	movs	r2, #32
    9736:	409a      	lsls	r2, r3
    9738:	79fb      	ldrb	r3, [r7, #7]
    973a:	4611      	mov	r1, r2
    973c:	4618      	mov	r0, r3
    973e:	4b04      	ldr	r3, [pc, #16]	; (9750 <_usbd_ep_int_stall_en+0x48>)
    9740:	4798      	blx	r3
}
    9742:	bf00      	nop
    9744:	3708      	adds	r7, #8
    9746:	46bd      	mov	sp, r7
    9748:	bd80      	pop	{r7, pc}
    974a:	bf00      	nop
    974c:	0000957d 	.word	0x0000957d
    9750:	000095a5 	.word	0x000095a5

00009754 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9754:	b580      	push	{r7, lr}
    9756:	b082      	sub	sp, #8
    9758:	af00      	add	r7, sp, #0
    975a:	4603      	mov	r3, r0
    975c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    975e:	79fb      	ldrb	r3, [r7, #7]
    9760:	4619      	mov	r1, r3
    9762:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9766:	4b03      	ldr	r3, [pc, #12]	; (9774 <_usbd_ep_stop_setup+0x20>)
    9768:	4798      	blx	r3
}
    976a:	bf00      	nop
    976c:	3708      	adds	r7, #8
    976e:	46bd      	mov	sp, r7
    9770:	bd80      	pop	{r7, pc}
    9772:	bf00      	nop
    9774:	000090d9 	.word	0x000090d9

00009778 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9778:	b580      	push	{r7, lr}
    977a:	b082      	sub	sp, #8
    977c:	af00      	add	r7, sp, #0
    977e:	4603      	mov	r3, r0
    9780:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9782:	79fb      	ldrb	r3, [r7, #7]
    9784:	2210      	movs	r2, #16
    9786:	4619      	mov	r1, r3
    9788:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    978c:	4b05      	ldr	r3, [pc, #20]	; (97a4 <_usbd_ep_is_setup+0x2c>)
    978e:	4798      	blx	r3
    9790:	4603      	mov	r3, r0
    9792:	2b00      	cmp	r3, #0
    9794:	bf14      	ite	ne
    9796:	2301      	movne	r3, #1
    9798:	2300      	moveq	r3, #0
    979a:	b2db      	uxtb	r3, r3
}
    979c:	4618      	mov	r0, r3
    979e:	3708      	adds	r7, #8
    97a0:	46bd      	mov	sp, r7
    97a2:	bd80      	pop	{r7, pc}
    97a4:	00008fcf 	.word	0x00008fcf

000097a8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    97a8:	b580      	push	{r7, lr}
    97aa:	b082      	sub	sp, #8
    97ac:	af00      	add	r7, sp, #0
    97ae:	4603      	mov	r3, r0
    97b0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    97b2:	79fb      	ldrb	r3, [r7, #7]
    97b4:	2110      	movs	r1, #16
    97b6:	4618      	mov	r0, r3
    97b8:	4b02      	ldr	r3, [pc, #8]	; (97c4 <_usbd_ep_ack_setup+0x1c>)
    97ba:	4798      	blx	r3
}
    97bc:	bf00      	nop
    97be:	3708      	adds	r7, #8
    97c0:	46bd      	mov	sp, r7
    97c2:	bd80      	pop	{r7, pc}
    97c4:	00009555 	.word	0x00009555

000097c8 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    97c8:	b580      	push	{r7, lr}
    97ca:	b082      	sub	sp, #8
    97cc:	af00      	add	r7, sp, #0
    97ce:	4603      	mov	r3, r0
    97d0:	71fb      	strb	r3, [r7, #7]
    97d2:	460b      	mov	r3, r1
    97d4:	71bb      	strb	r3, [r7, #6]
    97d6:	4613      	mov	r3, r2
    97d8:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    97da:	797b      	ldrb	r3, [r7, #5]
    97dc:	2b00      	cmp	r3, #0
    97de:	d00b      	beq.n	97f8 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    97e0:	79bb      	ldrb	r3, [r7, #6]
    97e2:	2201      	movs	r2, #1
    97e4:	fa02 f303 	lsl.w	r3, r2, r3
    97e8:	b2da      	uxtb	r2, r3
    97ea:	79fb      	ldrb	r3, [r7, #7]
    97ec:	4619      	mov	r1, r3
    97ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97f2:	4b09      	ldr	r3, [pc, #36]	; (9818 <_usbd_ep_set_toggle+0x50>)
    97f4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    97f6:	e00a      	b.n	980e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    97f8:	79bb      	ldrb	r3, [r7, #6]
    97fa:	2201      	movs	r2, #1
    97fc:	fa02 f303 	lsl.w	r3, r2, r3
    9800:	b2da      	uxtb	r2, r3
    9802:	79fb      	ldrb	r3, [r7, #7]
    9804:	4619      	mov	r1, r3
    9806:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    980a:	4b04      	ldr	r3, [pc, #16]	; (981c <_usbd_ep_set_toggle+0x54>)
    980c:	4798      	blx	r3
}
    980e:	bf00      	nop
    9810:	3708      	adds	r7, #8
    9812:	46bd      	mov	sp, r7
    9814:	bd80      	pop	{r7, pc}
    9816:	bf00      	nop
    9818:	00009059 	.word	0x00009059
    981c:	000090ad 	.word	0x000090ad

00009820 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9820:	b580      	push	{r7, lr}
    9822:	b082      	sub	sp, #8
    9824:	af00      	add	r7, sp, #0
    9826:	4603      	mov	r3, r0
    9828:	460a      	mov	r2, r1
    982a:	71fb      	strb	r3, [r7, #7]
    982c:	4613      	mov	r3, r2
    982e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9830:	79bb      	ldrb	r3, [r7, #6]
    9832:	2201      	movs	r2, #1
    9834:	409a      	lsls	r2, r3
    9836:	79fb      	ldrb	r3, [r7, #7]
    9838:	4611      	mov	r1, r2
    983a:	4618      	mov	r0, r3
    983c:	4b02      	ldr	r3, [pc, #8]	; (9848 <_usbd_ep_ack_io_cpt+0x28>)
    983e:	4798      	blx	r3
}
    9840:	bf00      	nop
    9842:	3708      	adds	r7, #8
    9844:	46bd      	mov	sp, r7
    9846:	bd80      	pop	{r7, pc}
    9848:	00009555 	.word	0x00009555

0000984c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    984c:	b480      	push	{r7}
    984e:	b085      	sub	sp, #20
    9850:	af00      	add	r7, sp, #0
    9852:	4603      	mov	r3, r0
    9854:	603a      	str	r2, [r7, #0]
    9856:	71fb      	strb	r3, [r7, #7]
    9858:	460b      	mov	r3, r1
    985a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    985c:	79fa      	ldrb	r2, [r7, #7]
    985e:	79bb      	ldrb	r3, [r7, #6]
    9860:	0052      	lsls	r2, r2, #1
    9862:	4413      	add	r3, r2
    9864:	011b      	lsls	r3, r3, #4
    9866:	4a06      	ldr	r2, [pc, #24]	; (9880 <_usbd_ep_set_buf+0x34>)
    9868:	4413      	add	r3, r2
    986a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    986c:	68fb      	ldr	r3, [r7, #12]
    986e:	683a      	ldr	r2, [r7, #0]
    9870:	601a      	str	r2, [r3, #0]
}
    9872:	bf00      	nop
    9874:	3714      	adds	r7, #20
    9876:	46bd      	mov	sp, r7
    9878:	f85d 7b04 	ldr.w	r7, [sp], #4
    987c:	4770      	bx	lr
    987e:	bf00      	nop
    9880:	20000d24 	.word	0x20000d24

00009884 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9884:	b480      	push	{r7}
    9886:	b085      	sub	sp, #20
    9888:	af00      	add	r7, sp, #0
    988a:	4603      	mov	r3, r0
    988c:	71fb      	strb	r3, [r7, #7]
    988e:	460b      	mov	r3, r1
    9890:	71bb      	strb	r3, [r7, #6]
    9892:	4613      	mov	r3, r2
    9894:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9896:	79fa      	ldrb	r2, [r7, #7]
    9898:	79bb      	ldrb	r3, [r7, #6]
    989a:	0052      	lsls	r2, r2, #1
    989c:	4413      	add	r3, r2
    989e:	011b      	lsls	r3, r3, #4
    98a0:	4a08      	ldr	r2, [pc, #32]	; (98c4 <_usbd_ep_set_in_count+0x40>)
    98a2:	4413      	add	r3, r2
    98a4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    98a6:	88bb      	ldrh	r3, [r7, #4]
    98a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    98ac:	b299      	uxth	r1, r3
    98ae:	68fa      	ldr	r2, [r7, #12]
    98b0:	6853      	ldr	r3, [r2, #4]
    98b2:	f361 339b 	bfi	r3, r1, #14, #14
    98b6:	6053      	str	r3, [r2, #4]
}
    98b8:	bf00      	nop
    98ba:	3714      	adds	r7, #20
    98bc:	46bd      	mov	sp, r7
    98be:	f85d 7b04 	ldr.w	r7, [sp], #4
    98c2:	4770      	bx	lr
    98c4:	20000d24 	.word	0x20000d24

000098c8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    98c8:	b480      	push	{r7}
    98ca:	b085      	sub	sp, #20
    98cc:	af00      	add	r7, sp, #0
    98ce:	4603      	mov	r3, r0
    98d0:	71fb      	strb	r3, [r7, #7]
    98d2:	460b      	mov	r3, r1
    98d4:	71bb      	strb	r3, [r7, #6]
    98d6:	4613      	mov	r3, r2
    98d8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    98da:	79fa      	ldrb	r2, [r7, #7]
    98dc:	79bb      	ldrb	r3, [r7, #6]
    98de:	0052      	lsls	r2, r2, #1
    98e0:	4413      	add	r3, r2
    98e2:	011b      	lsls	r3, r3, #4
    98e4:	4a08      	ldr	r2, [pc, #32]	; (9908 <_usbd_ep_set_in_size+0x40>)
    98e6:	4413      	add	r3, r2
    98e8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    98ea:	88bb      	ldrh	r3, [r7, #4]
    98ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
    98f0:	b299      	uxth	r1, r3
    98f2:	68fa      	ldr	r2, [r7, #12]
    98f4:	6853      	ldr	r3, [r2, #4]
    98f6:	f361 030d 	bfi	r3, r1, #0, #14
    98fa:	6053      	str	r3, [r2, #4]
}
    98fc:	bf00      	nop
    98fe:	3714      	adds	r7, #20
    9900:	46bd      	mov	sp, r7
    9902:	f85d 7b04 	ldr.w	r7, [sp], #4
    9906:	4770      	bx	lr
    9908:	20000d24 	.word	0x20000d24

0000990c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    990c:	b480      	push	{r7}
    990e:	b085      	sub	sp, #20
    9910:	af00      	add	r7, sp, #0
    9912:	4603      	mov	r3, r0
    9914:	71fb      	strb	r3, [r7, #7]
    9916:	460b      	mov	r3, r1
    9918:	71bb      	strb	r3, [r7, #6]
    991a:	4613      	mov	r3, r2
    991c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    991e:	79fa      	ldrb	r2, [r7, #7]
    9920:	79bb      	ldrb	r3, [r7, #6]
    9922:	0052      	lsls	r2, r2, #1
    9924:	4413      	add	r3, r2
    9926:	011b      	lsls	r3, r3, #4
    9928:	4a08      	ldr	r2, [pc, #32]	; (994c <_usbd_ep_set_out_count+0x40>)
    992a:	4413      	add	r3, r2
    992c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    992e:	88bb      	ldrh	r3, [r7, #4]
    9930:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9934:	b299      	uxth	r1, r3
    9936:	68fa      	ldr	r2, [r7, #12]
    9938:	6853      	ldr	r3, [r2, #4]
    993a:	f361 030d 	bfi	r3, r1, #0, #14
    993e:	6053      	str	r3, [r2, #4]
}
    9940:	bf00      	nop
    9942:	3714      	adds	r7, #20
    9944:	46bd      	mov	sp, r7
    9946:	f85d 7b04 	ldr.w	r7, [sp], #4
    994a:	4770      	bx	lr
    994c:	20000d24 	.word	0x20000d24

00009950 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9950:	b480      	push	{r7}
    9952:	b085      	sub	sp, #20
    9954:	af00      	add	r7, sp, #0
    9956:	4603      	mov	r3, r0
    9958:	71fb      	strb	r3, [r7, #7]
    995a:	460b      	mov	r3, r1
    995c:	71bb      	strb	r3, [r7, #6]
    995e:	4613      	mov	r3, r2
    9960:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9962:	79fa      	ldrb	r2, [r7, #7]
    9964:	79bb      	ldrb	r3, [r7, #6]
    9966:	0052      	lsls	r2, r2, #1
    9968:	4413      	add	r3, r2
    996a:	011b      	lsls	r3, r3, #4
    996c:	4a08      	ldr	r2, [pc, #32]	; (9990 <_usbd_ep_set_out_size+0x40>)
    996e:	4413      	add	r3, r2
    9970:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9972:	88bb      	ldrh	r3, [r7, #4]
    9974:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9978:	b299      	uxth	r1, r3
    997a:	68fa      	ldr	r2, [r7, #12]
    997c:	6853      	ldr	r3, [r2, #4]
    997e:	f361 339b 	bfi	r3, r1, #14, #14
    9982:	6053      	str	r3, [r2, #4]
}
    9984:	bf00      	nop
    9986:	3714      	adds	r7, #20
    9988:	46bd      	mov	sp, r7
    998a:	f85d 7b04 	ldr.w	r7, [sp], #4
    998e:	4770      	bx	lr
    9990:	20000d24 	.word	0x20000d24

00009994 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9994:	b580      	push	{r7, lr}
    9996:	b084      	sub	sp, #16
    9998:	af00      	add	r7, sp, #0
    999a:	60ba      	str	r2, [r7, #8]
    999c:	607b      	str	r3, [r7, #4]
    999e:	4603      	mov	r3, r0
    99a0:	73fb      	strb	r3, [r7, #15]
    99a2:	460b      	mov	r3, r1
    99a4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    99a6:	68bb      	ldr	r3, [r7, #8]
    99a8:	b29a      	uxth	r2, r3
    99aa:	7bb9      	ldrb	r1, [r7, #14]
    99ac:	7bfb      	ldrb	r3, [r7, #15]
    99ae:	4618      	mov	r0, r3
    99b0:	4b06      	ldr	r3, [pc, #24]	; (99cc <_usbd_ep_set_in_trans+0x38>)
    99b2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    99b4:	687b      	ldr	r3, [r7, #4]
    99b6:	b29a      	uxth	r2, r3
    99b8:	7bb9      	ldrb	r1, [r7, #14]
    99ba:	7bfb      	ldrb	r3, [r7, #15]
    99bc:	4618      	mov	r0, r3
    99be:	4b04      	ldr	r3, [pc, #16]	; (99d0 <_usbd_ep_set_in_trans+0x3c>)
    99c0:	4798      	blx	r3
}
    99c2:	bf00      	nop
    99c4:	3710      	adds	r7, #16
    99c6:	46bd      	mov	sp, r7
    99c8:	bd80      	pop	{r7, pc}
    99ca:	bf00      	nop
    99cc:	000098c9 	.word	0x000098c9
    99d0:	00009885 	.word	0x00009885

000099d4 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    99d4:	b580      	push	{r7, lr}
    99d6:	b084      	sub	sp, #16
    99d8:	af00      	add	r7, sp, #0
    99da:	60ba      	str	r2, [r7, #8]
    99dc:	607b      	str	r3, [r7, #4]
    99de:	4603      	mov	r3, r0
    99e0:	73fb      	strb	r3, [r7, #15]
    99e2:	460b      	mov	r3, r1
    99e4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    99e6:	68bb      	ldr	r3, [r7, #8]
    99e8:	b29a      	uxth	r2, r3
    99ea:	7bb9      	ldrb	r1, [r7, #14]
    99ec:	7bfb      	ldrb	r3, [r7, #15]
    99ee:	4618      	mov	r0, r3
    99f0:	4b06      	ldr	r3, [pc, #24]	; (9a0c <_usbd_ep_set_out_trans+0x38>)
    99f2:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    99f4:	687b      	ldr	r3, [r7, #4]
    99f6:	b29a      	uxth	r2, r3
    99f8:	7bb9      	ldrb	r1, [r7, #14]
    99fa:	7bfb      	ldrb	r3, [r7, #15]
    99fc:	4618      	mov	r0, r3
    99fe:	4b04      	ldr	r3, [pc, #16]	; (9a10 <_usbd_ep_set_out_trans+0x3c>)
    9a00:	4798      	blx	r3
}
    9a02:	bf00      	nop
    9a04:	3710      	adds	r7, #16
    9a06:	46bd      	mov	sp, r7
    9a08:	bd80      	pop	{r7, pc}
    9a0a:	bf00      	nop
    9a0c:	00009951 	.word	0x00009951
    9a10:	0000990d 	.word	0x0000990d

00009a14 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9a14:	b480      	push	{r7}
    9a16:	b085      	sub	sp, #20
    9a18:	af00      	add	r7, sp, #0
    9a1a:	4603      	mov	r3, r0
    9a1c:	460a      	mov	r2, r1
    9a1e:	71fb      	strb	r3, [r7, #7]
    9a20:	4613      	mov	r3, r2
    9a22:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9a24:	79fa      	ldrb	r2, [r7, #7]
    9a26:	79bb      	ldrb	r3, [r7, #6]
    9a28:	0052      	lsls	r2, r2, #1
    9a2a:	4413      	add	r3, r2
    9a2c:	011b      	lsls	r3, r3, #4
    9a2e:	4a06      	ldr	r2, [pc, #24]	; (9a48 <_usbd_ep_clear_bank_status+0x34>)
    9a30:	4413      	add	r3, r2
    9a32:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9a34:	68fb      	ldr	r3, [r7, #12]
    9a36:	2200      	movs	r2, #0
    9a38:	729a      	strb	r2, [r3, #10]
}
    9a3a:	bf00      	nop
    9a3c:	3714      	adds	r7, #20
    9a3e:	46bd      	mov	sp, r7
    9a40:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a44:	4770      	bx	lr
    9a46:	bf00      	nop
    9a48:	20000d24 	.word	0x20000d24

00009a4c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9a4c:	b580      	push	{r7, lr}
    9a4e:	b082      	sub	sp, #8
    9a50:	af00      	add	r7, sp, #0
    9a52:	4603      	mov	r3, r0
    9a54:	71fb      	strb	r3, [r7, #7]
    9a56:	460b      	mov	r3, r1
    9a58:	71bb      	strb	r3, [r7, #6]
    9a5a:	4613      	mov	r3, r2
    9a5c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9a5e:	797b      	ldrb	r3, [r7, #5]
    9a60:	2b00      	cmp	r3, #0
    9a62:	d00b      	beq.n	9a7c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9a64:	79bb      	ldrb	r3, [r7, #6]
    9a66:	2240      	movs	r2, #64	; 0x40
    9a68:	fa02 f303 	lsl.w	r3, r2, r3
    9a6c:	b2da      	uxtb	r2, r3
    9a6e:	79fb      	ldrb	r3, [r7, #7]
    9a70:	4619      	mov	r1, r3
    9a72:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a76:	4b09      	ldr	r3, [pc, #36]	; (9a9c <_usbd_ep_set_in_rdy+0x50>)
    9a78:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9a7a:	e00a      	b.n	9a92 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9a7c:	79bb      	ldrb	r3, [r7, #6]
    9a7e:	2240      	movs	r2, #64	; 0x40
    9a80:	fa02 f303 	lsl.w	r3, r2, r3
    9a84:	b2da      	uxtb	r2, r3
    9a86:	79fb      	ldrb	r3, [r7, #7]
    9a88:	4619      	mov	r1, r3
    9a8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a8e:	4b04      	ldr	r3, [pc, #16]	; (9aa0 <_usbd_ep_set_in_rdy+0x54>)
    9a90:	4798      	blx	r3
}
    9a92:	bf00      	nop
    9a94:	3708      	adds	r7, #8
    9a96:	46bd      	mov	sp, r7
    9a98:	bd80      	pop	{r7, pc}
    9a9a:	bf00      	nop
    9a9c:	00009059 	.word	0x00009059
    9aa0:	000090ad 	.word	0x000090ad

00009aa4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9aa4:	b580      	push	{r7, lr}
    9aa6:	b082      	sub	sp, #8
    9aa8:	af00      	add	r7, sp, #0
    9aaa:	4603      	mov	r3, r0
    9aac:	71fb      	strb	r3, [r7, #7]
    9aae:	460b      	mov	r3, r1
    9ab0:	71bb      	strb	r3, [r7, #6]
    9ab2:	4613      	mov	r3, r2
    9ab4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9ab6:	797b      	ldrb	r3, [r7, #5]
    9ab8:	2b00      	cmp	r3, #0
    9aba:	d00b      	beq.n	9ad4 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9abc:	79bb      	ldrb	r3, [r7, #6]
    9abe:	2240      	movs	r2, #64	; 0x40
    9ac0:	fa02 f303 	lsl.w	r3, r2, r3
    9ac4:	b2da      	uxtb	r2, r3
    9ac6:	79fb      	ldrb	r3, [r7, #7]
    9ac8:	4619      	mov	r1, r3
    9aca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ace:	4b09      	ldr	r3, [pc, #36]	; (9af4 <_usbd_ep_set_out_rdy+0x50>)
    9ad0:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9ad2:	e00a      	b.n	9aea <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9ad4:	79bb      	ldrb	r3, [r7, #6]
    9ad6:	2240      	movs	r2, #64	; 0x40
    9ad8:	fa02 f303 	lsl.w	r3, r2, r3
    9adc:	b2da      	uxtb	r2, r3
    9ade:	79fb      	ldrb	r3, [r7, #7]
    9ae0:	4619      	mov	r1, r3
    9ae2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ae6:	4b04      	ldr	r3, [pc, #16]	; (9af8 <_usbd_ep_set_out_rdy+0x54>)
    9ae8:	4798      	blx	r3
}
    9aea:	bf00      	nop
    9aec:	3708      	adds	r7, #8
    9aee:	46bd      	mov	sp, r7
    9af0:	bd80      	pop	{r7, pc}
    9af2:	bf00      	nop
    9af4:	000090ad 	.word	0x000090ad
    9af8:	00009059 	.word	0x00009059

00009afc <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9afc:	b480      	push	{r7}
    9afe:	b083      	sub	sp, #12
    9b00:	af00      	add	r7, sp, #0
    9b02:	4603      	mov	r3, r0
    9b04:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9b06:	88fb      	ldrh	r3, [r7, #6]
    9b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9b0c:	d820      	bhi.n	9b50 <_usbd_ep_pcksize_size+0x54>
    9b0e:	88fb      	ldrh	r3, [r7, #6]
    9b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9b14:	d81a      	bhi.n	9b4c <_usbd_ep_pcksize_size+0x50>
    9b16:	88fb      	ldrh	r3, [r7, #6]
    9b18:	2b80      	cmp	r3, #128	; 0x80
    9b1a:	d815      	bhi.n	9b48 <_usbd_ep_pcksize_size+0x4c>
    9b1c:	88fb      	ldrh	r3, [r7, #6]
    9b1e:	2b40      	cmp	r3, #64	; 0x40
    9b20:	d810      	bhi.n	9b44 <_usbd_ep_pcksize_size+0x48>
    9b22:	88fb      	ldrh	r3, [r7, #6]
    9b24:	2b20      	cmp	r3, #32
    9b26:	d80b      	bhi.n	9b40 <_usbd_ep_pcksize_size+0x44>
    9b28:	88fb      	ldrh	r3, [r7, #6]
    9b2a:	2b10      	cmp	r3, #16
    9b2c:	d806      	bhi.n	9b3c <_usbd_ep_pcksize_size+0x40>
    9b2e:	88fb      	ldrh	r3, [r7, #6]
    9b30:	2b08      	cmp	r3, #8
    9b32:	bf8c      	ite	hi
    9b34:	2301      	movhi	r3, #1
    9b36:	2300      	movls	r3, #0
    9b38:	b2db      	uxtb	r3, r3
    9b3a:	e00a      	b.n	9b52 <_usbd_ep_pcksize_size+0x56>
    9b3c:	2302      	movs	r3, #2
    9b3e:	e008      	b.n	9b52 <_usbd_ep_pcksize_size+0x56>
    9b40:	2303      	movs	r3, #3
    9b42:	e006      	b.n	9b52 <_usbd_ep_pcksize_size+0x56>
    9b44:	2304      	movs	r3, #4
    9b46:	e004      	b.n	9b52 <_usbd_ep_pcksize_size+0x56>
    9b48:	2305      	movs	r3, #5
    9b4a:	e002      	b.n	9b52 <_usbd_ep_pcksize_size+0x56>
    9b4c:	2306      	movs	r3, #6
    9b4e:	e000      	b.n	9b52 <_usbd_ep_pcksize_size+0x56>
    9b50:	2307      	movs	r3, #7
}
    9b52:	4618      	mov	r0, r3
    9b54:	370c      	adds	r7, #12
    9b56:	46bd      	mov	sp, r7
    9b58:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b5c:	4770      	bx	lr
	...

00009b60 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9b60:	b480      	push	{r7}
    9b62:	b085      	sub	sp, #20
    9b64:	af00      	add	r7, sp, #0
    9b66:	4603      	mov	r3, r0
    9b68:	460a      	mov	r2, r1
    9b6a:	71fb      	strb	r3, [r7, #7]
    9b6c:	4613      	mov	r3, r2
    9b6e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9b70:	79fb      	ldrb	r3, [r7, #7]
    9b72:	2b00      	cmp	r3, #0
    9b74:	d008      	beq.n	9b88 <_usb_d_dev_ept+0x28>
    9b76:	79bb      	ldrb	r3, [r7, #6]
    9b78:	2b00      	cmp	r3, #0
    9b7a:	d003      	beq.n	9b84 <_usb_d_dev_ept+0x24>
    9b7c:	79fb      	ldrb	r3, [r7, #7]
    9b7e:	3304      	adds	r3, #4
    9b80:	b2db      	uxtb	r3, r3
    9b82:	e002      	b.n	9b8a <_usb_d_dev_ept+0x2a>
    9b84:	79fb      	ldrb	r3, [r7, #7]
    9b86:	e000      	b.n	9b8a <_usb_d_dev_ept+0x2a>
    9b88:	2300      	movs	r3, #0
    9b8a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9b8c:	7bfa      	ldrb	r2, [r7, #15]
    9b8e:	4613      	mov	r3, r2
    9b90:	009b      	lsls	r3, r3, #2
    9b92:	4413      	add	r3, r2
    9b94:	009b      	lsls	r3, r3, #2
    9b96:	3310      	adds	r3, #16
    9b98:	4a04      	ldr	r2, [pc, #16]	; (9bac <_usb_d_dev_ept+0x4c>)
    9b9a:	4413      	add	r3, r2
    9b9c:	3304      	adds	r3, #4
}
    9b9e:	4618      	mov	r0, r3
    9ba0:	3714      	adds	r7, #20
    9ba2:	46bd      	mov	sp, r7
    9ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ba8:	4770      	bx	lr
    9baa:	bf00      	nop
    9bac:	20000c5c 	.word	0x20000c5c

00009bb0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9bb0:	b580      	push	{r7, lr}
    9bb2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9bb4:	2104      	movs	r1, #4
    9bb6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9bba:	4b03      	ldr	r3, [pc, #12]	; (9bc8 <_usb_d_dev_sof+0x18>)
    9bbc:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9bbe:	4b03      	ldr	r3, [pc, #12]	; (9bcc <_usb_d_dev_sof+0x1c>)
    9bc0:	681b      	ldr	r3, [r3, #0]
    9bc2:	4798      	blx	r3
}
    9bc4:	bf00      	nop
    9bc6:	bd80      	pop	{r7, pc}
    9bc8:	00009227 	.word	0x00009227
    9bcc:	20000c5c 	.word	0x20000c5c

00009bd0 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9bd0:	b580      	push	{r7, lr}
    9bd2:	b084      	sub	sp, #16
    9bd4:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9bd6:	2300      	movs	r3, #0
    9bd8:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9bda:	f240 2101 	movw	r1, #513	; 0x201
    9bde:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9be2:	4b1a      	ldr	r3, [pc, #104]	; (9c4c <_usb_d_dev_lpmsusp+0x7c>)
    9be4:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9be6:	f240 2101 	movw	r1, #513	; 0x201
    9bea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9bee:	4b18      	ldr	r3, [pc, #96]	; (9c50 <_usb_d_dev_lpmsusp+0x80>)
    9bf0:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9bf2:	2170      	movs	r1, #112	; 0x70
    9bf4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9bf8:	4b16      	ldr	r3, [pc, #88]	; (9c54 <_usb_d_dev_lpmsusp+0x84>)
    9bfa:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9bfc:	2300      	movs	r3, #0
    9bfe:	73fb      	strb	r3, [r7, #15]
    9c00:	e018      	b.n	9c34 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9c02:	7bfb      	ldrb	r3, [r7, #15]
    9c04:	015b      	lsls	r3, r3, #5
    9c06:	4a14      	ldr	r2, [pc, #80]	; (9c58 <_usb_d_dev_lpmsusp+0x88>)
    9c08:	4413      	add	r3, r2
    9c0a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9c0c:	687b      	ldr	r3, [r7, #4]
    9c0e:	891b      	ldrh	r3, [r3, #8]
    9c10:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9c14:	b2db      	uxtb	r3, r3
    9c16:	2b03      	cmp	r3, #3
    9c18:	d109      	bne.n	9c2e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9c1a:	687b      	ldr	r3, [r7, #4]
    9c1c:	891b      	ldrh	r3, [r3, #8]
    9c1e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9c22:	b29b      	uxth	r3, r3
    9c24:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9c26:	687b      	ldr	r3, [r7, #4]
    9c28:	2200      	movs	r2, #0
    9c2a:	811a      	strh	r2, [r3, #8]
			break;
    9c2c:	e005      	b.n	9c3a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9c2e:	7bfb      	ldrb	r3, [r7, #15]
    9c30:	3301      	adds	r3, #1
    9c32:	73fb      	strb	r3, [r7, #15]
    9c34:	7bfb      	ldrb	r3, [r7, #15]
    9c36:	2b03      	cmp	r3, #3
    9c38:	d9e3      	bls.n	9c02 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9c3a:	4b08      	ldr	r3, [pc, #32]	; (9c5c <_usb_d_dev_lpmsusp+0x8c>)
    9c3c:	685b      	ldr	r3, [r3, #4]
    9c3e:	68b9      	ldr	r1, [r7, #8]
    9c40:	2003      	movs	r0, #3
    9c42:	4798      	blx	r3
}
    9c44:	bf00      	nop
    9c46:	3710      	adds	r7, #16
    9c48:	46bd      	mov	sp, r7
    9c4a:	bd80      	pop	{r7, pc}
    9c4c:	00009227 	.word	0x00009227
    9c50:	0000927d 	.word	0x0000927d
    9c54:	00009245 	.word	0x00009245
    9c58:	20000d24 	.word	0x20000d24
    9c5c:	20000c5c 	.word	0x20000c5c

00009c60 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9c60:	b580      	push	{r7, lr}
    9c62:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9c64:	2180      	movs	r1, #128	; 0x80
    9c66:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c6a:	4b04      	ldr	r3, [pc, #16]	; (9c7c <_usb_d_dev_ramerr+0x1c>)
    9c6c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9c6e:	4b04      	ldr	r3, [pc, #16]	; (9c80 <_usb_d_dev_ramerr+0x20>)
    9c70:	685b      	ldr	r3, [r3, #4]
    9c72:	2100      	movs	r1, #0
    9c74:	2005      	movs	r0, #5
    9c76:	4798      	blx	r3
}
    9c78:	bf00      	nop
    9c7a:	bd80      	pop	{r7, pc}
    9c7c:	00009227 	.word	0x00009227
    9c80:	20000c5c 	.word	0x20000c5c

00009c84 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9c84:	b580      	push	{r7, lr}
    9c86:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9c88:	2170      	movs	r1, #112	; 0x70
    9c8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c8e:	4b0b      	ldr	r3, [pc, #44]	; (9cbc <_usb_d_dev_wakeup+0x38>)
    9c90:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9c92:	2170      	movs	r1, #112	; 0x70
    9c94:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c98:	4b09      	ldr	r3, [pc, #36]	; (9cc0 <_usb_d_dev_wakeup+0x3c>)
    9c9a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9c9c:	f240 2101 	movw	r1, #513	; 0x201
    9ca0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ca4:	4b07      	ldr	r3, [pc, #28]	; (9cc4 <_usb_d_dev_wakeup+0x40>)
    9ca6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9ca8:	2000      	movs	r0, #0
    9caa:	4b07      	ldr	r3, [pc, #28]	; (9cc8 <_usb_d_dev_wakeup+0x44>)
    9cac:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9cae:	4b07      	ldr	r3, [pc, #28]	; (9ccc <_usb_d_dev_wakeup+0x48>)
    9cb0:	685b      	ldr	r3, [r3, #4]
    9cb2:	2100      	movs	r1, #0
    9cb4:	2002      	movs	r0, #2
    9cb6:	4798      	blx	r3
}
    9cb8:	bf00      	nop
    9cba:	bd80      	pop	{r7, pc}
    9cbc:	00009227 	.word	0x00009227
    9cc0:	0000927d 	.word	0x0000927d
    9cc4:	00009245 	.word	0x00009245
    9cc8:	00009525 	.word	0x00009525
    9ccc:	20000c5c 	.word	0x20000c5c

00009cd0 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9cd0:	b580      	push	{r7, lr}
    9cd2:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9cd4:	2200      	movs	r2, #0
    9cd6:	2100      	movs	r1, #0
    9cd8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cdc:	4b0d      	ldr	r3, [pc, #52]	; (9d14 <_usb_d_dev_reset+0x44>)
    9cde:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9ce0:	2108      	movs	r1, #8
    9ce2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ce6:	4b0c      	ldr	r3, [pc, #48]	; (9d18 <_usb_d_dev_reset+0x48>)
    9ce8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9cea:	2170      	movs	r1, #112	; 0x70
    9cec:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cf0:	4b0a      	ldr	r3, [pc, #40]	; (9d1c <_usb_d_dev_reset+0x4c>)
    9cf2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9cf4:	f240 2101 	movw	r1, #513	; 0x201
    9cf8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cfc:	4b08      	ldr	r3, [pc, #32]	; (9d20 <_usb_d_dev_reset+0x50>)
    9cfe:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9d00:	4b08      	ldr	r3, [pc, #32]	; (9d24 <_usb_d_dev_reset+0x54>)
    9d02:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9d04:	4b08      	ldr	r3, [pc, #32]	; (9d28 <_usb_d_dev_reset+0x58>)
    9d06:	685b      	ldr	r3, [r3, #4]
    9d08:	2100      	movs	r1, #0
    9d0a:	2001      	movs	r0, #1
    9d0c:	4798      	blx	r3
}
    9d0e:	bf00      	nop
    9d10:	bd80      	pop	{r7, pc}
    9d12:	bf00      	nop
    9d14:	000091bd 	.word	0x000091bd
    9d18:	00009227 	.word	0x00009227
    9d1c:	0000927d 	.word	0x0000927d
    9d20:	00009245 	.word	0x00009245
    9d24:	0000a88d 	.word	0x0000a88d
    9d28:	20000c5c 	.word	0x20000c5c

00009d2c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9d2c:	b580      	push	{r7, lr}
    9d2e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9d30:	f240 2101 	movw	r1, #513	; 0x201
    9d34:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d38:	4b09      	ldr	r3, [pc, #36]	; (9d60 <_usb_d_dev_suspend+0x34>)
    9d3a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9d3c:	f240 2101 	movw	r1, #513	; 0x201
    9d40:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d44:	4b07      	ldr	r3, [pc, #28]	; (9d64 <_usb_d_dev_suspend+0x38>)
    9d46:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9d48:	2170      	movs	r1, #112	; 0x70
    9d4a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d4e:	4b06      	ldr	r3, [pc, #24]	; (9d68 <_usb_d_dev_suspend+0x3c>)
    9d50:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9d52:	4b06      	ldr	r3, [pc, #24]	; (9d6c <_usb_d_dev_suspend+0x40>)
    9d54:	685b      	ldr	r3, [r3, #4]
    9d56:	2100      	movs	r1, #0
    9d58:	2004      	movs	r0, #4
    9d5a:	4798      	blx	r3
}
    9d5c:	bf00      	nop
    9d5e:	bd80      	pop	{r7, pc}
    9d60:	00009227 	.word	0x00009227
    9d64:	0000927d 	.word	0x0000927d
    9d68:	00009245 	.word	0x00009245
    9d6c:	20000c5c 	.word	0x20000c5c

00009d70 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9d70:	b580      	push	{r7, lr}
    9d72:	b082      	sub	sp, #8
    9d74:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9d76:	2301      	movs	r3, #1
    9d78:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9d7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d7e:	4b22      	ldr	r3, [pc, #136]	; (9e08 <_usb_d_dev_handle_nep+0x98>)
    9d80:	4798      	blx	r3
    9d82:	4603      	mov	r3, r0
    9d84:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9d86:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d8a:	4b20      	ldr	r3, [pc, #128]	; (9e0c <_usb_d_dev_handle_nep+0x9c>)
    9d8c:	4798      	blx	r3
    9d8e:	4603      	mov	r3, r0
    9d90:	461a      	mov	r2, r3
    9d92:	88bb      	ldrh	r3, [r7, #4]
    9d94:	4013      	ands	r3, r2
    9d96:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9d98:	88bb      	ldrh	r3, [r7, #4]
    9d9a:	f003 0304 	and.w	r3, r3, #4
    9d9e:	2b00      	cmp	r3, #0
    9da0:	d003      	beq.n	9daa <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9da2:	4b1b      	ldr	r3, [pc, #108]	; (9e10 <_usb_d_dev_handle_nep+0xa0>)
    9da4:	4798      	blx	r3
		return true;
    9da6:	2301      	movs	r3, #1
    9da8:	e02a      	b.n	9e00 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9daa:	88bb      	ldrh	r3, [r7, #4]
    9dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9db0:	2b00      	cmp	r3, #0
    9db2:	d002      	beq.n	9dba <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9db4:	4b17      	ldr	r3, [pc, #92]	; (9e14 <_usb_d_dev_handle_nep+0xa4>)
    9db6:	4798      	blx	r3
    9db8:	e021      	b.n	9dfe <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9dba:	88bb      	ldrh	r3, [r7, #4]
    9dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d002      	beq.n	9dca <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9dc4:	4b14      	ldr	r3, [pc, #80]	; (9e18 <_usb_d_dev_handle_nep+0xa8>)
    9dc6:	4798      	blx	r3
    9dc8:	e019      	b.n	9dfe <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9dca:	88bb      	ldrh	r3, [r7, #4]
    9dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9dd0:	2b00      	cmp	r3, #0
    9dd2:	d002      	beq.n	9dda <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9dd4:	4b11      	ldr	r3, [pc, #68]	; (9e1c <_usb_d_dev_handle_nep+0xac>)
    9dd6:	4798      	blx	r3
    9dd8:	e011      	b.n	9dfe <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9dda:	88bb      	ldrh	r3, [r7, #4]
    9ddc:	f003 0308 	and.w	r3, r3, #8
    9de0:	2b00      	cmp	r3, #0
    9de2:	d002      	beq.n	9dea <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9de4:	4b0e      	ldr	r3, [pc, #56]	; (9e20 <_usb_d_dev_handle_nep+0xb0>)
    9de6:	4798      	blx	r3
    9de8:	e009      	b.n	9dfe <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9dea:	88bb      	ldrh	r3, [r7, #4]
    9dec:	f003 0301 	and.w	r3, r3, #1
    9df0:	2b00      	cmp	r3, #0
    9df2:	d002      	beq.n	9dfa <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9df4:	4b0b      	ldr	r3, [pc, #44]	; (9e24 <_usb_d_dev_handle_nep+0xb4>)
    9df6:	4798      	blx	r3
    9df8:	e001      	b.n	9dfe <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9dfa:	2300      	movs	r3, #0
    9dfc:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9dfe:	79fb      	ldrb	r3, [r7, #7]
}
    9e00:	4618      	mov	r0, r3
    9e02:	3708      	adds	r7, #8
    9e04:	46bd      	mov	sp, r7
    9e06:	bd80      	pop	{r7, pc}
    9e08:	0000920d 	.word	0x0000920d
    9e0c:	00009263 	.word	0x00009263
    9e10:	00009bb1 	.word	0x00009bb1
    9e14:	00009bd1 	.word	0x00009bd1
    9e18:	00009c61 	.word	0x00009c61
    9e1c:	00009c85 	.word	0x00009c85
    9e20:	00009cd1 	.word	0x00009cd1
    9e24:	00009d2d 	.word	0x00009d2d

00009e28 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9e28:	b590      	push	{r4, r7, lr}
    9e2a:	b089      	sub	sp, #36	; 0x24
    9e2c:	af00      	add	r7, sp, #0
    9e2e:	6078      	str	r0, [r7, #4]
    9e30:	460b      	mov	r3, r1
    9e32:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9e34:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e38:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9e3a:	687b      	ldr	r3, [r7, #4]
    9e3c:	7c9b      	ldrb	r3, [r3, #18]
    9e3e:	f003 030f 	and.w	r3, r3, #15
    9e42:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9e44:	7dfb      	ldrb	r3, [r7, #23]
    9e46:	015b      	lsls	r3, r3, #5
    9e48:	4a73      	ldr	r2, [pc, #460]	; (a018 <_usb_d_dev_in_next+0x1f0>)
    9e4a:	4413      	add	r3, r2
    9e4c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9e4e:	78fb      	ldrb	r3, [r7, #3]
    9e50:	2b00      	cmp	r3, #0
    9e52:	d006      	beq.n	9e62 <_usb_d_dev_in_next+0x3a>
    9e54:	693b      	ldr	r3, [r7, #16]
    9e56:	3310      	adds	r3, #16
    9e58:	685b      	ldr	r3, [r3, #4]
    9e5a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9e5e:	b29b      	uxth	r3, r3
    9e60:	e000      	b.n	9e64 <_usb_d_dev_in_next+0x3c>
    9e62:	2300      	movs	r3, #0
    9e64:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9e66:	687b      	ldr	r3, [r7, #4]
    9e68:	8a1b      	ldrh	r3, [r3, #16]
    9e6a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9e6e:	4293      	cmp	r3, r2
    9e70:	d103      	bne.n	9e7a <_usb_d_dev_in_next+0x52>
    9e72:	687b      	ldr	r3, [r7, #4]
    9e74:	8a1b      	ldrh	r3, [r3, #16]
    9e76:	b21b      	sxth	r3, r3
    9e78:	e004      	b.n	9e84 <_usb_d_dev_in_next+0x5c>
    9e7a:	687b      	ldr	r3, [r7, #4]
    9e7c:	8a1b      	ldrh	r3, [r3, #16]
    9e7e:	3b01      	subs	r3, #1
    9e80:	b29b      	uxth	r3, r3
    9e82:	b21b      	sxth	r3, r3
    9e84:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9e88:	4013      	ands	r3, r2
    9e8a:	b21b      	sxth	r3, r3
    9e8c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9e8e:	2300      	movs	r3, #0
    9e90:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9e92:	687b      	ldr	r3, [r7, #4]
    9e94:	7cdb      	ldrb	r3, [r3, #19]
    9e96:	f003 0307 	and.w	r3, r3, #7
    9e9a:	b2db      	uxtb	r3, r3
    9e9c:	2b01      	cmp	r3, #1
    9e9e:	bf0c      	ite	eq
    9ea0:	2301      	moveq	r3, #1
    9ea2:	2300      	movne	r3, #0
    9ea4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9ea6:	78fb      	ldrb	r3, [r7, #3]
    9ea8:	2b00      	cmp	r3, #0
    9eaa:	d004      	beq.n	9eb6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9eac:	7dfb      	ldrb	r3, [r7, #23]
    9eae:	2101      	movs	r1, #1
    9eb0:	4618      	mov	r0, r3
    9eb2:	4b5a      	ldr	r3, [pc, #360]	; (a01c <_usb_d_dev_in_next+0x1f4>)
    9eb4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9eb6:	687b      	ldr	r3, [r7, #4]
    9eb8:	689a      	ldr	r2, [r3, #8]
    9eba:	89fb      	ldrh	r3, [r7, #14]
    9ebc:	441a      	add	r2, r3
    9ebe:	687b      	ldr	r3, [r7, #4]
    9ec0:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9ec2:	687b      	ldr	r3, [r7, #4]
    9ec4:	689a      	ldr	r2, [r3, #8]
    9ec6:	687b      	ldr	r3, [r7, #4]
    9ec8:	685b      	ldr	r3, [r3, #4]
    9eca:	429a      	cmp	r2, r3
    9ecc:	d243      	bcs.n	9f56 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9ece:	687b      	ldr	r3, [r7, #4]
    9ed0:	685b      	ldr	r3, [r3, #4]
    9ed2:	b29a      	uxth	r2, r3
    9ed4:	687b      	ldr	r3, [r7, #4]
    9ed6:	689b      	ldr	r3, [r3, #8]
    9ed8:	b29b      	uxth	r3, r3
    9eda:	1ad3      	subs	r3, r2, r3
    9edc:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9ede:	687b      	ldr	r3, [r7, #4]
    9ee0:	7cdb      	ldrb	r3, [r3, #19]
    9ee2:	f003 0320 	and.w	r3, r3, #32
    9ee6:	b2db      	uxtb	r3, r3
    9ee8:	2b00      	cmp	r3, #0
    9eea:	d01b      	beq.n	9f24 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9eec:	687b      	ldr	r3, [r7, #4]
    9eee:	8a1b      	ldrh	r3, [r3, #16]
    9ef0:	8bfa      	ldrh	r2, [r7, #30]
    9ef2:	429a      	cmp	r2, r3
    9ef4:	d902      	bls.n	9efc <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9ef6:	687b      	ldr	r3, [r7, #4]
    9ef8:	8a1b      	ldrh	r3, [r3, #16]
    9efa:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9efc:	687b      	ldr	r3, [r7, #4]
    9efe:	68d8      	ldr	r0, [r3, #12]
    9f00:	687b      	ldr	r3, [r7, #4]
    9f02:	681a      	ldr	r2, [r3, #0]
    9f04:	687b      	ldr	r3, [r7, #4]
    9f06:	689b      	ldr	r3, [r3, #8]
    9f08:	4413      	add	r3, r2
    9f0a:	8bfa      	ldrh	r2, [r7, #30]
    9f0c:	4619      	mov	r1, r3
    9f0e:	4b44      	ldr	r3, [pc, #272]	; (a020 <_usb_d_dev_in_next+0x1f8>)
    9f10:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9f12:	687b      	ldr	r3, [r7, #4]
    9f14:	68db      	ldr	r3, [r3, #12]
    9f16:	461a      	mov	r2, r3
    9f18:	7dfb      	ldrb	r3, [r7, #23]
    9f1a:	2101      	movs	r1, #1
    9f1c:	4618      	mov	r0, r3
    9f1e:	4b41      	ldr	r3, [pc, #260]	; (a024 <_usb_d_dev_in_next+0x1fc>)
    9f20:	4798      	blx	r3
    9f22:	e011      	b.n	9f48 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9f24:	8bfb      	ldrh	r3, [r7, #30]
    9f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9f2a:	d902      	bls.n	9f32 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9f30:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9f32:	687b      	ldr	r3, [r7, #4]
    9f34:	681a      	ldr	r2, [r3, #0]
    9f36:	687b      	ldr	r3, [r7, #4]
    9f38:	689b      	ldr	r3, [r3, #8]
    9f3a:	4413      	add	r3, r2
    9f3c:	461a      	mov	r2, r3
    9f3e:	7dfb      	ldrb	r3, [r7, #23]
    9f40:	2101      	movs	r1, #1
    9f42:	4618      	mov	r0, r3
    9f44:	4b37      	ldr	r3, [pc, #220]	; (a024 <_usb_d_dev_in_next+0x1fc>)
    9f46:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9f48:	8bfa      	ldrh	r2, [r7, #30]
    9f4a:	7df8      	ldrb	r0, [r7, #23]
    9f4c:	2300      	movs	r3, #0
    9f4e:	2101      	movs	r1, #1
    9f50:	4c35      	ldr	r4, [pc, #212]	; (a028 <_usb_d_dev_in_next+0x200>)
    9f52:	47a0      	blx	r4
		goto _in_tx_exec;
    9f54:	e041      	b.n	9fda <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9f56:	687b      	ldr	r3, [r7, #4]
    9f58:	7cdb      	ldrb	r3, [r3, #19]
    9f5a:	f003 0310 	and.w	r3, r3, #16
    9f5e:	b2db      	uxtb	r3, r3
    9f60:	2b00      	cmp	r3, #0
    9f62:	d00b      	beq.n	9f7c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9f64:	687a      	ldr	r2, [r7, #4]
    9f66:	7cd3      	ldrb	r3, [r2, #19]
    9f68:	f36f 1304 	bfc	r3, #4, #1
    9f6c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9f6e:	7df8      	ldrb	r0, [r7, #23]
    9f70:	2300      	movs	r3, #0
    9f72:	2200      	movs	r2, #0
    9f74:	2101      	movs	r1, #1
    9f76:	4c2c      	ldr	r4, [pc, #176]	; (a028 <_usb_d_dev_in_next+0x200>)
    9f78:	47a0      	blx	r4
		goto _in_tx_exec;
    9f7a:	e02e      	b.n	9fda <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9f7c:	7afb      	ldrb	r3, [r7, #11]
    9f7e:	2b00      	cmp	r3, #0
    9f80:	d006      	beq.n	9f90 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9f82:	7dfb      	ldrb	r3, [r7, #23]
    9f84:	224b      	movs	r2, #75	; 0x4b
    9f86:	4619      	mov	r1, r3
    9f88:	69b8      	ldr	r0, [r7, #24]
    9f8a:	4b28      	ldr	r3, [pc, #160]	; (a02c <_usb_d_dev_in_next+0x204>)
    9f8c:	4798      	blx	r3
    9f8e:	e005      	b.n	9f9c <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9f90:	7dfb      	ldrb	r3, [r7, #23]
    9f92:	224a      	movs	r2, #74	; 0x4a
    9f94:	4619      	mov	r1, r3
    9f96:	69b8      	ldr	r0, [r7, #24]
    9f98:	4b24      	ldr	r3, [pc, #144]	; (a02c <_usb_d_dev_in_next+0x204>)
    9f9a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9f9c:	687b      	ldr	r3, [r7, #4]
    9f9e:	8a1b      	ldrh	r3, [r3, #16]
    9fa0:	89ba      	ldrh	r2, [r7, #12]
    9fa2:	429a      	cmp	r2, r3
    9fa4:	d114      	bne.n	9fd0 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9fa6:	687a      	ldr	r2, [r7, #4]
    9fa8:	7cd3      	ldrb	r3, [r2, #19]
    9faa:	f36f 1386 	bfc	r3, #6, #1
    9fae:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9fb0:	4b1f      	ldr	r3, [pc, #124]	; (a030 <_usb_d_dev_in_next+0x208>)
    9fb2:	68db      	ldr	r3, [r3, #12]
    9fb4:	687a      	ldr	r2, [r7, #4]
    9fb6:	7c90      	ldrb	r0, [r2, #18]
    9fb8:	687a      	ldr	r2, [r7, #4]
    9fba:	6892      	ldr	r2, [r2, #8]
    9fbc:	4611      	mov	r1, r2
    9fbe:	4798      	blx	r3
    9fc0:	4603      	mov	r3, r0
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	d124      	bne.n	a010 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9fc6:	687a      	ldr	r2, [r7, #4]
    9fc8:	7cd3      	ldrb	r3, [r2, #19]
    9fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9fce:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9fd0:	2100      	movs	r1, #0
    9fd2:	6878      	ldr	r0, [r7, #4]
    9fd4:	4b17      	ldr	r3, [pc, #92]	; (a034 <_usb_d_dev_in_next+0x20c>)
    9fd6:	4798      	blx	r3
	return;
    9fd8:	e01b      	b.n	a012 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9fda:	78fb      	ldrb	r3, [r7, #3]
    9fdc:	f083 0301 	eor.w	r3, r3, #1
    9fe0:	b2db      	uxtb	r3, r3
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d00d      	beq.n	a002 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9fe6:	7afb      	ldrb	r3, [r7, #11]
    9fe8:	2b00      	cmp	r3, #0
    9fea:	d002      	beq.n	9ff2 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9fec:	234e      	movs	r3, #78	; 0x4e
    9fee:	777b      	strb	r3, [r7, #29]
    9ff0:	e001      	b.n	9ff6 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9ff2:	234a      	movs	r3, #74	; 0x4a
    9ff4:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9ff6:	7f7a      	ldrb	r2, [r7, #29]
    9ff8:	7dfb      	ldrb	r3, [r7, #23]
    9ffa:	4619      	mov	r1, r3
    9ffc:	69b8      	ldr	r0, [r7, #24]
    9ffe:	4b0e      	ldr	r3, [pc, #56]	; (a038 <_usb_d_dev_in_next+0x210>)
    a000:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    a002:	7dfb      	ldrb	r3, [r7, #23]
    a004:	2201      	movs	r2, #1
    a006:	2101      	movs	r1, #1
    a008:	4618      	mov	r0, r3
    a00a:	4b0c      	ldr	r3, [pc, #48]	; (a03c <_usb_d_dev_in_next+0x214>)
    a00c:	4798      	blx	r3
    a00e:	e000      	b.n	a012 <_usb_d_dev_in_next+0x1ea>
			return;
    a010:	bf00      	nop
}
    a012:	3724      	adds	r7, #36	; 0x24
    a014:	46bd      	mov	sp, r7
    a016:	bd90      	pop	{r4, r7, pc}
    a018:	20000d24 	.word	0x20000d24
    a01c:	00009821 	.word	0x00009821
    a020:	000116b5 	.word	0x000116b5
    a024:	0000984d 	.word	0x0000984d
    a028:	00009995 	.word	0x00009995
    a02c:	0000912d 	.word	0x0000912d
    a030:	20000c5c 	.word	0x20000c5c
    a034:	0000b151 	.word	0x0000b151
    a038:	00009101 	.word	0x00009101
    a03c:	00009a4d 	.word	0x00009a4d

0000a040 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a040:	b590      	push	{r4, r7, lr}
    a042:	b08b      	sub	sp, #44	; 0x2c
    a044:	af00      	add	r7, sp, #0
    a046:	6078      	str	r0, [r7, #4]
    a048:	460b      	mov	r3, r1
    a04a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a04c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a050:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a052:	687b      	ldr	r3, [r7, #4]
    a054:	7c9b      	ldrb	r3, [r3, #18]
    a056:	f003 030f 	and.w	r3, r3, #15
    a05a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a05c:	7ffb      	ldrb	r3, [r7, #31]
    a05e:	015b      	lsls	r3, r3, #5
    a060:	4a94      	ldr	r2, [pc, #592]	; (a2b4 <_usb_d_dev_out_next+0x274>)
    a062:	4413      	add	r3, r2
    a064:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a066:	78fb      	ldrb	r3, [r7, #3]
    a068:	2b00      	cmp	r3, #0
    a06a:	d005      	beq.n	a078 <_usb_d_dev_out_next+0x38>
    a06c:	69bb      	ldr	r3, [r7, #24]
    a06e:	685b      	ldr	r3, [r3, #4]
    a070:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a074:	b29b      	uxth	r3, r3
    a076:	e000      	b.n	a07a <_usb_d_dev_out_next+0x3a>
    a078:	2300      	movs	r3, #0
    a07a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a07c:	78fb      	ldrb	r3, [r7, #3]
    a07e:	2b00      	cmp	r3, #0
    a080:	d005      	beq.n	a08e <_usb_d_dev_out_next+0x4e>
    a082:	69bb      	ldr	r3, [r7, #24]
    a084:	685b      	ldr	r3, [r3, #4]
    a086:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a08a:	b29b      	uxth	r3, r3
    a08c:	e000      	b.n	a090 <_usb_d_dev_out_next+0x50>
    a08e:	2300      	movs	r3, #0
    a090:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a092:	687b      	ldr	r3, [r7, #4]
    a094:	8a1b      	ldrh	r3, [r3, #16]
    a096:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a09a:	4293      	cmp	r3, r2
    a09c:	d004      	beq.n	a0a8 <_usb_d_dev_out_next+0x68>
    a09e:	687b      	ldr	r3, [r7, #4]
    a0a0:	8a1b      	ldrh	r3, [r3, #16]
    a0a2:	3b01      	subs	r3, #1
    a0a4:	b29b      	uxth	r3, r3
    a0a6:	e001      	b.n	a0ac <_usb_d_dev_out_next+0x6c>
    a0a8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a0ac:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a0ae:	8aba      	ldrh	r2, [r7, #20]
    a0b0:	8a7b      	ldrh	r3, [r7, #18]
    a0b2:	4013      	ands	r3, r2
    a0b4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a0b6:	687b      	ldr	r3, [r7, #4]
    a0b8:	7cdb      	ldrb	r3, [r3, #19]
    a0ba:	f003 0307 	and.w	r3, r3, #7
    a0be:	b2db      	uxtb	r3, r3
    a0c0:	2b01      	cmp	r3, #1
    a0c2:	bf0c      	ite	eq
    a0c4:	2301      	moveq	r3, #1
    a0c6:	2300      	movne	r3, #0
    a0c8:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a0ca:	78fb      	ldrb	r3, [r7, #3]
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	d004      	beq.n	a0da <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a0d0:	7ffb      	ldrb	r3, [r7, #31]
    a0d2:	2100      	movs	r1, #0
    a0d4:	4618      	mov	r0, r3
    a0d6:	4b78      	ldr	r3, [pc, #480]	; (a2b8 <_usb_d_dev_out_next+0x278>)
    a0d8:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a0da:	687b      	ldr	r3, [r7, #4]
    a0dc:	7cdb      	ldrb	r3, [r3, #19]
    a0de:	f003 0320 	and.w	r3, r3, #32
    a0e2:	b2db      	uxtb	r3, r3
    a0e4:	2b00      	cmp	r3, #0
    a0e6:	d01c      	beq.n	a122 <_usb_d_dev_out_next+0xe2>
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	685b      	ldr	r3, [r3, #4]
    a0ec:	2b00      	cmp	r3, #0
    a0ee:	d018      	beq.n	a122 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a0f0:	687b      	ldr	r3, [r7, #4]
    a0f2:	685b      	ldr	r3, [r3, #4]
    a0f4:	b29a      	uxth	r2, r3
    a0f6:	687b      	ldr	r3, [r7, #4]
    a0f8:	689b      	ldr	r3, [r3, #8]
    a0fa:	b29b      	uxth	r3, r3
    a0fc:	1ad3      	subs	r3, r2, r3
    a0fe:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a100:	687b      	ldr	r3, [r7, #4]
    a102:	681a      	ldr	r2, [r3, #0]
    a104:	687b      	ldr	r3, [r7, #4]
    a106:	689b      	ldr	r3, [r3, #8]
    a108:	18d0      	adds	r0, r2, r3
    a10a:	687b      	ldr	r3, [r7, #4]
    a10c:	68d9      	ldr	r1, [r3, #12]
    a10e:	89ba      	ldrh	r2, [r7, #12]
    a110:	8a3b      	ldrh	r3, [r7, #16]
    a112:	429a      	cmp	r2, r3
    a114:	d901      	bls.n	a11a <_usb_d_dev_out_next+0xda>
    a116:	8a3b      	ldrh	r3, [r7, #16]
    a118:	e000      	b.n	a11c <_usb_d_dev_out_next+0xdc>
    a11a:	89bb      	ldrh	r3, [r7, #12]
    a11c:	461a      	mov	r2, r3
    a11e:	4b67      	ldr	r3, [pc, #412]	; (a2bc <_usb_d_dev_out_next+0x27c>)
    a120:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a122:	687b      	ldr	r3, [r7, #4]
    a124:	685b      	ldr	r3, [r3, #4]
    a126:	2b00      	cmp	r3, #0
    a128:	d121      	bne.n	a16e <_usb_d_dev_out_next+0x12e>
    a12a:	687b      	ldr	r3, [r7, #4]
    a12c:	7cdb      	ldrb	r3, [r3, #19]
    a12e:	f003 0310 	and.w	r3, r3, #16
    a132:	b2db      	uxtb	r3, r3
    a134:	2b00      	cmp	r3, #0
    a136:	d01a      	beq.n	a16e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a138:	687a      	ldr	r2, [r7, #4]
    a13a:	7cd3      	ldrb	r3, [r2, #19]
    a13c:	f36f 1304 	bfc	r3, #4, #1
    a140:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a142:	687a      	ldr	r2, [r7, #4]
    a144:	7cd3      	ldrb	r3, [r2, #19]
    a146:	f043 0320 	orr.w	r3, r3, #32
    a14a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a14c:	687b      	ldr	r3, [r7, #4]
    a14e:	68db      	ldr	r3, [r3, #12]
    a150:	461a      	mov	r2, r3
    a152:	7ffb      	ldrb	r3, [r7, #31]
    a154:	2100      	movs	r1, #0
    a156:	4618      	mov	r0, r3
    a158:	4b59      	ldr	r3, [pc, #356]	; (a2c0 <_usb_d_dev_out_next+0x280>)
    a15a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a15c:	687b      	ldr	r3, [r7, #4]
    a15e:	8a1b      	ldrh	r3, [r3, #16]
    a160:	461a      	mov	r2, r3
    a162:	7ff8      	ldrb	r0, [r7, #31]
    a164:	2300      	movs	r3, #0
    a166:	2100      	movs	r1, #0
    a168:	4c56      	ldr	r4, [pc, #344]	; (a2c4 <_usb_d_dev_out_next+0x284>)
    a16a:	47a0      	blx	r4
		goto _out_rx_exec;
    a16c:	e090      	b.n	a290 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a16e:	78fb      	ldrb	r3, [r7, #3]
    a170:	2b00      	cmp	r3, #0
    a172:	d010      	beq.n	a196 <_usb_d_dev_out_next+0x156>
    a174:	687b      	ldr	r3, [r7, #4]
    a176:	8a1b      	ldrh	r3, [r3, #16]
    a178:	8a3a      	ldrh	r2, [r7, #16]
    a17a:	429a      	cmp	r2, r3
    a17c:	d20b      	bcs.n	a196 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a17e:	687a      	ldr	r2, [r7, #4]
    a180:	7cd3      	ldrb	r3, [r2, #19]
    a182:	f36f 1304 	bfc	r3, #4, #1
    a186:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a188:	687b      	ldr	r3, [r7, #4]
    a18a:	689a      	ldr	r2, [r3, #8]
    a18c:	8abb      	ldrh	r3, [r7, #20]
    a18e:	441a      	add	r2, r3
    a190:	687b      	ldr	r3, [r7, #4]
    a192:	609a      	str	r2, [r3, #8]
    a194:	e05c      	b.n	a250 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a196:	687b      	ldr	r3, [r7, #4]
    a198:	689a      	ldr	r2, [r3, #8]
    a19a:	8afb      	ldrh	r3, [r7, #22]
    a19c:	441a      	add	r2, r3
    a19e:	687b      	ldr	r3, [r7, #4]
    a1a0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a1a2:	687b      	ldr	r3, [r7, #4]
    a1a4:	689a      	ldr	r2, [r3, #8]
    a1a6:	687b      	ldr	r3, [r7, #4]
    a1a8:	685b      	ldr	r3, [r3, #4]
    a1aa:	429a      	cmp	r2, r3
    a1ac:	d250      	bcs.n	a250 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a1ae:	687b      	ldr	r3, [r7, #4]
    a1b0:	685b      	ldr	r3, [r3, #4]
    a1b2:	b29a      	uxth	r2, r3
    a1b4:	687b      	ldr	r3, [r7, #4]
    a1b6:	689b      	ldr	r3, [r3, #8]
    a1b8:	b29b      	uxth	r3, r3
    a1ba:	1ad3      	subs	r3, r2, r3
    a1bc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a1be:	687b      	ldr	r3, [r7, #4]
    a1c0:	7cdb      	ldrb	r3, [r3, #19]
    a1c2:	f003 0320 	and.w	r3, r3, #32
    a1c6:	b2db      	uxtb	r3, r3
    a1c8:	2b00      	cmp	r3, #0
    a1ca:	d010      	beq.n	a1ee <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a1cc:	687b      	ldr	r3, [r7, #4]
    a1ce:	8a1b      	ldrh	r3, [r3, #16]
    a1d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a1d2:	429a      	cmp	r2, r3
    a1d4:	d902      	bls.n	a1dc <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a1d6:	687b      	ldr	r3, [r7, #4]
    a1d8:	8a1b      	ldrh	r3, [r3, #16]
    a1da:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a1dc:	687b      	ldr	r3, [r7, #4]
    a1de:	68db      	ldr	r3, [r3, #12]
    a1e0:	461a      	mov	r2, r3
    a1e2:	7ffb      	ldrb	r3, [r7, #31]
    a1e4:	2100      	movs	r1, #0
    a1e6:	4618      	mov	r0, r3
    a1e8:	4b35      	ldr	r3, [pc, #212]	; (a2c0 <_usb_d_dev_out_next+0x280>)
    a1ea:	4798      	blx	r3
    a1ec:	e029      	b.n	a242 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a1ee:	687b      	ldr	r3, [r7, #4]
    a1f0:	8a1b      	ldrh	r3, [r3, #16]
    a1f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a1f4:	429a      	cmp	r2, r3
    a1f6:	d90f      	bls.n	a218 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a1f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a1fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a1fe:	d903      	bls.n	a208 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a204:	84fb      	strh	r3, [r7, #38]	; 0x26
    a206:	e011      	b.n	a22c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a208:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a20a:	8a7b      	ldrh	r3, [r7, #18]
    a20c:	4013      	ands	r3, r2
    a20e:	b29b      	uxth	r3, r3
    a210:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a212:	1ad3      	subs	r3, r2, r3
    a214:	84fb      	strh	r3, [r7, #38]	; 0x26
    a216:	e009      	b.n	a22c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a218:	687b      	ldr	r3, [r7, #4]
    a21a:	8a1b      	ldrh	r3, [r3, #16]
    a21c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a21e:	429a      	cmp	r2, r3
    a220:	d204      	bcs.n	a22c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a222:	687a      	ldr	r2, [r7, #4]
    a224:	7cd3      	ldrb	r3, [r2, #19]
    a226:	f043 0320 	orr.w	r3, r3, #32
    a22a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a22c:	687b      	ldr	r3, [r7, #4]
    a22e:	681a      	ldr	r2, [r3, #0]
    a230:	687b      	ldr	r3, [r7, #4]
    a232:	689b      	ldr	r3, [r3, #8]
    a234:	4413      	add	r3, r2
    a236:	461a      	mov	r2, r3
    a238:	7ffb      	ldrb	r3, [r7, #31]
    a23a:	2100      	movs	r1, #0
    a23c:	4618      	mov	r0, r3
    a23e:	4b20      	ldr	r3, [pc, #128]	; (a2c0 <_usb_d_dev_out_next+0x280>)
    a240:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a242:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a244:	7ff8      	ldrb	r0, [r7, #31]
    a246:	2300      	movs	r3, #0
    a248:	2100      	movs	r1, #0
    a24a:	4c1e      	ldr	r4, [pc, #120]	; (a2c4 <_usb_d_dev_out_next+0x284>)
    a24c:	47a0      	blx	r4
			goto _out_rx_exec;
    a24e:	e01f      	b.n	a290 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a250:	7bfb      	ldrb	r3, [r7, #15]
    a252:	2b00      	cmp	r3, #0
    a254:	d006      	beq.n	a264 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a256:	7ffb      	ldrb	r3, [r7, #31]
    a258:	222d      	movs	r2, #45	; 0x2d
    a25a:	4619      	mov	r1, r3
    a25c:	6a38      	ldr	r0, [r7, #32]
    a25e:	4b1a      	ldr	r3, [pc, #104]	; (a2c8 <_usb_d_dev_out_next+0x288>)
    a260:	4798      	blx	r3
    a262:	e005      	b.n	a270 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a264:	7ffb      	ldrb	r3, [r7, #31]
    a266:	2225      	movs	r2, #37	; 0x25
    a268:	4619      	mov	r1, r3
    a26a:	6a38      	ldr	r0, [r7, #32]
    a26c:	4b16      	ldr	r3, [pc, #88]	; (a2c8 <_usb_d_dev_out_next+0x288>)
    a26e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a270:	7ffb      	ldrb	r3, [r7, #31]
    a272:	2b00      	cmp	r3, #0
    a274:	d107      	bne.n	a286 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a276:	687b      	ldr	r3, [r7, #4]
    a278:	68db      	ldr	r3, [r3, #12]
    a27a:	461a      	mov	r2, r3
    a27c:	7ffb      	ldrb	r3, [r7, #31]
    a27e:	2100      	movs	r1, #0
    a280:	4618      	mov	r0, r3
    a282:	4b0f      	ldr	r3, [pc, #60]	; (a2c0 <_usb_d_dev_out_next+0x280>)
    a284:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a286:	2100      	movs	r1, #0
    a288:	6878      	ldr	r0, [r7, #4]
    a28a:	4b10      	ldr	r3, [pc, #64]	; (a2cc <_usb_d_dev_out_next+0x28c>)
    a28c:	4798      	blx	r3
	return;
    a28e:	e031      	b.n	a2f4 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a290:	78fb      	ldrb	r3, [r7, #3]
    a292:	f083 0301 	eor.w	r3, r3, #1
    a296:	b2db      	uxtb	r3, r3
    a298:	2b00      	cmp	r3, #0
    a29a:	d025      	beq.n	a2e8 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a29c:	7bfb      	ldrb	r3, [r7, #15]
    a29e:	2b00      	cmp	r3, #0
    a2a0:	d018      	beq.n	a2d4 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a2a2:	7ffb      	ldrb	r3, [r7, #31]
    a2a4:	2101      	movs	r1, #1
    a2a6:	4618      	mov	r0, r3
    a2a8:	4b09      	ldr	r3, [pc, #36]	; (a2d0 <_usb_d_dev_out_next+0x290>)
    a2aa:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a2ac:	232d      	movs	r3, #45	; 0x2d
    a2ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a2b2:	e012      	b.n	a2da <_usb_d_dev_out_next+0x29a>
    a2b4:	20000d24 	.word	0x20000d24
    a2b8:	00009821 	.word	0x00009821
    a2bc:	000116b5 	.word	0x000116b5
    a2c0:	0000984d 	.word	0x0000984d
    a2c4:	000099d5 	.word	0x000099d5
    a2c8:	0000912d 	.word	0x0000912d
    a2cc:	0000b151 	.word	0x0000b151
    a2d0:	00009a15 	.word	0x00009a15
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a2d4:	2325      	movs	r3, #37	; 0x25
    a2d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a2da:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a2de:	7ffb      	ldrb	r3, [r7, #31]
    a2e0:	4619      	mov	r1, r3
    a2e2:	6a38      	ldr	r0, [r7, #32]
    a2e4:	4b05      	ldr	r3, [pc, #20]	; (a2fc <_usb_d_dev_out_next+0x2bc>)
    a2e6:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a2e8:	7ffb      	ldrb	r3, [r7, #31]
    a2ea:	2201      	movs	r2, #1
    a2ec:	2100      	movs	r1, #0
    a2ee:	4618      	mov	r0, r3
    a2f0:	4b03      	ldr	r3, [pc, #12]	; (a300 <_usb_d_dev_out_next+0x2c0>)
    a2f2:	4798      	blx	r3
}
    a2f4:	372c      	adds	r7, #44	; 0x2c
    a2f6:	46bd      	mov	sp, r7
    a2f8:	bd90      	pop	{r4, r7, pc}
    a2fa:	bf00      	nop
    a2fc:	00009101 	.word	0x00009101
    a300:	00009aa5 	.word	0x00009aa5

0000a304 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a304:	b580      	push	{r7, lr}
    a306:	b084      	sub	sp, #16
    a308:	af00      	add	r7, sp, #0
    a30a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a30c:	687b      	ldr	r3, [r7, #4]
    a30e:	7c9b      	ldrb	r3, [r3, #18]
    a310:	f003 030f 	and.w	r3, r3, #15
    a314:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a316:	687b      	ldr	r3, [r7, #4]
    a318:	7cdb      	ldrb	r3, [r3, #19]
    a31a:	f003 0307 	and.w	r3, r3, #7
    a31e:	b2db      	uxtb	r3, r3
    a320:	2b01      	cmp	r3, #1
    a322:	bf0c      	ite	eq
    a324:	2301      	moveq	r3, #1
    a326:	2300      	movne	r3, #0
    a328:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a32a:	7bbb      	ldrb	r3, [r7, #14]
    a32c:	f083 0301 	eor.w	r3, r3, #1
    a330:	b2db      	uxtb	r3, r3
    a332:	2b00      	cmp	r3, #0
    a334:	d008      	beq.n	a348 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a336:	7bfb      	ldrb	r3, [r7, #15]
    a338:	4618      	mov	r0, r3
    a33a:	4b20      	ldr	r3, [pc, #128]	; (a3bc <_usb_d_dev_handle_setup+0xb8>)
    a33c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a33e:	7bfb      	ldrb	r3, [r7, #15]
    a340:	4618      	mov	r0, r3
    a342:	4b1f      	ldr	r3, [pc, #124]	; (a3c0 <_usb_d_dev_handle_setup+0xbc>)
    a344:	4798      	blx	r3
		return;
    a346:	e036      	b.n	a3b6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a348:	687b      	ldr	r3, [r7, #4]
    a34a:	7cdb      	ldrb	r3, [r3, #19]
    a34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a350:	b2db      	uxtb	r3, r3
    a352:	2b00      	cmp	r3, #0
    a354:	d010      	beq.n	a378 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a356:	687a      	ldr	r2, [r7, #4]
    a358:	7cd3      	ldrb	r3, [r2, #19]
    a35a:	f36f 1386 	bfc	r3, #6, #1
    a35e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a360:	7bfb      	ldrb	r3, [r7, #15]
    a362:	2200      	movs	r2, #0
    a364:	2101      	movs	r1, #1
    a366:	4618      	mov	r0, r3
    a368:	4b16      	ldr	r3, [pc, #88]	; (a3c4 <_usb_d_dev_handle_setup+0xc0>)
    a36a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a36c:	7bfb      	ldrb	r3, [r7, #15]
    a36e:	2200      	movs	r2, #0
    a370:	2100      	movs	r1, #0
    a372:	4618      	mov	r0, r3
    a374:	4b14      	ldr	r3, [pc, #80]	; (a3c8 <_usb_d_dev_handle_setup+0xc4>)
    a376:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a378:	687a      	ldr	r2, [r7, #4]
    a37a:	7cd3      	ldrb	r3, [r2, #19]
    a37c:	f36f 03c3 	bfc	r3, #3, #1
    a380:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a382:	7bfb      	ldrb	r3, [r7, #15]
    a384:	2100      	movs	r1, #0
    a386:	4618      	mov	r0, r3
    a388:	4b10      	ldr	r3, [pc, #64]	; (a3cc <_usb_d_dev_handle_setup+0xc8>)
    a38a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a38c:	7bfb      	ldrb	r3, [r7, #15]
    a38e:	2101      	movs	r1, #1
    a390:	4618      	mov	r0, r3
    a392:	4b0e      	ldr	r3, [pc, #56]	; (a3cc <_usb_d_dev_handle_setup+0xc8>)
    a394:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a396:	7bfb      	ldrb	r3, [r7, #15]
    a398:	216f      	movs	r1, #111	; 0x6f
    a39a:	4618      	mov	r0, r3
    a39c:	4b0c      	ldr	r3, [pc, #48]	; (a3d0 <_usb_d_dev_handle_setup+0xcc>)
    a39e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a3a0:	7bfb      	ldrb	r3, [r7, #15]
    a3a2:	216f      	movs	r1, #111	; 0x6f
    a3a4:	4618      	mov	r0, r3
    a3a6:	4b0b      	ldr	r3, [pc, #44]	; (a3d4 <_usb_d_dev_handle_setup+0xd0>)
    a3a8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a3aa:	4b0b      	ldr	r3, [pc, #44]	; (a3d8 <_usb_d_dev_handle_setup+0xd4>)
    a3ac:	689b      	ldr	r3, [r3, #8]
    a3ae:	687a      	ldr	r2, [r7, #4]
    a3b0:	7c92      	ldrb	r2, [r2, #18]
    a3b2:	4610      	mov	r0, r2
    a3b4:	4798      	blx	r3
}
    a3b6:	3710      	adds	r7, #16
    a3b8:	46bd      	mov	sp, r7
    a3ba:	bd80      	pop	{r7, pc}
    a3bc:	000097a9 	.word	0x000097a9
    a3c0:	00009755 	.word	0x00009755
    a3c4:	00009a4d 	.word	0x00009a4d
    a3c8:	00009aa5 	.word	0x00009aa5
    a3cc:	00009a15 	.word	0x00009a15
    a3d0:	00009555 	.word	0x00009555
    a3d4:	000095a5 	.word	0x000095a5
    a3d8:	20000c5c 	.word	0x20000c5c

0000a3dc <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a3dc:	b580      	push	{r7, lr}
    a3de:	b084      	sub	sp, #16
    a3e0:	af00      	add	r7, sp, #0
    a3e2:	6078      	str	r0, [r7, #4]
    a3e4:	460b      	mov	r3, r1
    a3e6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a3e8:	687b      	ldr	r3, [r7, #4]
    a3ea:	7c9b      	ldrb	r3, [r3, #18]
    a3ec:	f003 030f 	and.w	r3, r3, #15
    a3f0:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a3f2:	78f9      	ldrb	r1, [r7, #3]
    a3f4:	7bfb      	ldrb	r3, [r7, #15]
    a3f6:	2200      	movs	r2, #0
    a3f8:	4618      	mov	r0, r3
    a3fa:	4b07      	ldr	r3, [pc, #28]	; (a418 <_usb_d_dev_handle_stall+0x3c>)
    a3fc:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a3fe:	4b07      	ldr	r3, [pc, #28]	; (a41c <_usb_d_dev_handle_stall+0x40>)
    a400:	691b      	ldr	r3, [r3, #16]
    a402:	687a      	ldr	r2, [r7, #4]
    a404:	7c90      	ldrb	r0, [r2, #18]
    a406:	687a      	ldr	r2, [r7, #4]
    a408:	6892      	ldr	r2, [r2, #8]
    a40a:	2101      	movs	r1, #1
    a40c:	4798      	blx	r3
}
    a40e:	bf00      	nop
    a410:	3710      	adds	r7, #16
    a412:	46bd      	mov	sp, r7
    a414:	bd80      	pop	{r7, pc}
    a416:	bf00      	nop
    a418:	00009709 	.word	0x00009709
    a41c:	20000c5c 	.word	0x20000c5c

0000a420 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a420:	b580      	push	{r7, lr}
    a422:	b088      	sub	sp, #32
    a424:	af00      	add	r7, sp, #0
    a426:	6078      	str	r0, [r7, #4]
    a428:	460b      	mov	r3, r1
    a42a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a42c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a430:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a432:	687b      	ldr	r3, [r7, #4]
    a434:	7c9b      	ldrb	r3, [r3, #18]
    a436:	f003 030f 	and.w	r3, r3, #15
    a43a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a43c:	4b61      	ldr	r3, [pc, #388]	; (a5c4 <_usb_d_dev_handle_trfail+0x1a4>)
    a43e:	881b      	ldrh	r3, [r3, #0]
    a440:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a442:	7efb      	ldrb	r3, [r7, #27]
    a444:	015b      	lsls	r3, r3, #5
    a446:	4a60      	ldr	r2, [pc, #384]	; (a5c8 <_usb_d_dev_handle_trfail+0x1a8>)
    a448:	4413      	add	r3, r2
    a44a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a44c:	78fb      	ldrb	r3, [r7, #3]
    a44e:	2b00      	cmp	r3, #0
    a450:	d006      	beq.n	a460 <_usb_d_dev_handle_trfail+0x40>
    a452:	7efb      	ldrb	r3, [r7, #27]
    a454:	4619      	mov	r1, r3
    a456:	69f8      	ldr	r0, [r7, #28]
    a458:	4b5c      	ldr	r3, [pc, #368]	; (a5cc <_usb_d_dev_handle_trfail+0x1ac>)
    a45a:	4798      	blx	r3
    a45c:	4603      	mov	r3, r0
    a45e:	e005      	b.n	a46c <_usb_d_dev_handle_trfail+0x4c>
    a460:	7efb      	ldrb	r3, [r7, #27]
    a462:	4619      	mov	r1, r3
    a464:	69f8      	ldr	r0, [r7, #28]
    a466:	4b5a      	ldr	r3, [pc, #360]	; (a5d0 <_usb_d_dev_handle_trfail+0x1b0>)
    a468:	4798      	blx	r3
    a46a:	4603      	mov	r3, r0
    a46c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a46e:	687b      	ldr	r3, [r7, #4]
    a470:	7cdb      	ldrb	r3, [r3, #19]
    a472:	f003 0307 	and.w	r3, r3, #7
    a476:	b2db      	uxtb	r3, r3
    a478:	2b01      	cmp	r3, #1
    a47a:	bf0c      	ite	eq
    a47c:	2301      	moveq	r3, #1
    a47e:	2300      	movne	r3, #0
    a480:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a482:	78fb      	ldrb	r3, [r7, #3]
    a484:	011b      	lsls	r3, r3, #4
    a486:	697a      	ldr	r2, [r7, #20]
    a488:	4413      	add	r3, r2
    a48a:	7a9b      	ldrb	r3, [r3, #10]
    a48c:	b2db      	uxtb	r3, r3
    a48e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a490:	7cfb      	ldrb	r3, [r7, #19]
    a492:	2b02      	cmp	r3, #2
    a494:	d12f      	bne.n	a4f6 <_usb_d_dev_handle_trfail+0xd6>
    a496:	7b3b      	ldrb	r3, [r7, #12]
    a498:	f003 0301 	and.w	r3, r3, #1
    a49c:	b2db      	uxtb	r3, r3
    a49e:	2b00      	cmp	r3, #0
    a4a0:	d029      	beq.n	a4f6 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a4a2:	78fb      	ldrb	r3, [r7, #3]
    a4a4:	011b      	lsls	r3, r3, #4
    a4a6:	697a      	ldr	r2, [r7, #20]
    a4a8:	441a      	add	r2, r3
    a4aa:	7a93      	ldrb	r3, [r2, #10]
    a4ac:	f36f 0300 	bfc	r3, #0, #1
    a4b0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a4b2:	78fb      	ldrb	r3, [r7, #3]
    a4b4:	f107 0220 	add.w	r2, r7, #32
    a4b8:	4413      	add	r3, r2
    a4ba:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a4be:	7efb      	ldrb	r3, [r7, #27]
    a4c0:	4619      	mov	r1, r3
    a4c2:	69f8      	ldr	r0, [r7, #28]
    a4c4:	4b43      	ldr	r3, [pc, #268]	; (a5d4 <_usb_d_dev_handle_trfail+0x1b4>)
    a4c6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a4c8:	78fb      	ldrb	r3, [r7, #3]
    a4ca:	f107 0220 	add.w	r2, r7, #32
    a4ce:	4413      	add	r3, r2
    a4d0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a4d4:	7efb      	ldrb	r3, [r7, #27]
    a4d6:	4619      	mov	r1, r3
    a4d8:	69f8      	ldr	r0, [r7, #28]
    a4da:	4b3f      	ldr	r3, [pc, #252]	; (a5d8 <_usb_d_dev_handle_trfail+0x1b8>)
    a4dc:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a4de:	78fb      	ldrb	r3, [r7, #3]
    a4e0:	2b00      	cmp	r3, #0
    a4e2:	bf14      	ite	ne
    a4e4:	2301      	movne	r3, #1
    a4e6:	2300      	moveq	r3, #0
    a4e8:	b2db      	uxtb	r3, r3
    a4ea:	2204      	movs	r2, #4
    a4ec:	4619      	mov	r1, r3
    a4ee:	6878      	ldr	r0, [r7, #4]
    a4f0:	4b3a      	ldr	r3, [pc, #232]	; (a5dc <_usb_d_dev_handle_trfail+0x1bc>)
    a4f2:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a4f4:	e062      	b.n	a5bc <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a4f6:	7b3b      	ldrb	r3, [r7, #12]
    a4f8:	f003 0302 	and.w	r3, r3, #2
    a4fc:	b2db      	uxtb	r3, r3
    a4fe:	2b00      	cmp	r3, #0
    a500:	d040      	beq.n	a584 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a502:	78fb      	ldrb	r3, [r7, #3]
    a504:	011b      	lsls	r3, r3, #4
    a506:	697a      	ldr	r2, [r7, #20]
    a508:	441a      	add	r2, r3
    a50a:	7a93      	ldrb	r3, [r2, #10]
    a50c:	f36f 0341 	bfc	r3, #1, #1
    a510:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a512:	78fb      	ldrb	r3, [r7, #3]
    a514:	f107 0220 	add.w	r2, r7, #32
    a518:	4413      	add	r3, r2
    a51a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a51e:	7efb      	ldrb	r3, [r7, #27]
    a520:	4619      	mov	r1, r3
    a522:	69f8      	ldr	r0, [r7, #28]
    a524:	4b2b      	ldr	r3, [pc, #172]	; (a5d4 <_usb_d_dev_handle_trfail+0x1b4>)
    a526:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a528:	78fb      	ldrb	r3, [r7, #3]
    a52a:	f107 0220 	add.w	r2, r7, #32
    a52e:	4413      	add	r3, r2
    a530:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a534:	7efb      	ldrb	r3, [r7, #27]
    a536:	4619      	mov	r1, r3
    a538:	69f8      	ldr	r0, [r7, #28]
    a53a:	4b27      	ldr	r3, [pc, #156]	; (a5d8 <_usb_d_dev_handle_trfail+0x1b8>)
    a53c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a53e:	7cbb      	ldrb	r3, [r7, #18]
    a540:	2b00      	cmp	r3, #0
    a542:	d03b      	beq.n	a5bc <_usb_d_dev_handle_trfail+0x19c>
    a544:	687b      	ldr	r3, [r7, #4]
    a546:	7cdb      	ldrb	r3, [r3, #19]
    a548:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a54c:	b2db      	uxtb	r3, r3
    a54e:	2b00      	cmp	r3, #0
    a550:	d034      	beq.n	a5bc <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a552:	687b      	ldr	r3, [r7, #4]
    a554:	7cdb      	ldrb	r3, [r3, #19]
    a556:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a55a:	b2db      	uxtb	r3, r3
    a55c:	461a      	mov	r2, r3
    a55e:	78fb      	ldrb	r3, [r7, #3]
    a560:	4293      	cmp	r3, r2
    a562:	d02b      	beq.n	a5bc <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a564:	687b      	ldr	r3, [r7, #4]
    a566:	7cdb      	ldrb	r3, [r3, #19]
    a568:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a56c:	b2db      	uxtb	r3, r3
    a56e:	2b00      	cmp	r3, #0
    a570:	bf14      	ite	ne
    a572:	2301      	movne	r3, #1
    a574:	2300      	moveq	r3, #0
    a576:	b2db      	uxtb	r3, r3
    a578:	2200      	movs	r2, #0
    a57a:	4619      	mov	r1, r3
    a57c:	6878      	ldr	r0, [r7, #4]
    a57e:	4b17      	ldr	r3, [pc, #92]	; (a5dc <_usb_d_dev_handle_trfail+0x1bc>)
    a580:	4798      	blx	r3
}
    a582:	e01b      	b.n	a5bc <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a584:	78fa      	ldrb	r2, [r7, #3]
    a586:	7efb      	ldrb	r3, [r7, #27]
    a588:	4611      	mov	r1, r2
    a58a:	4618      	mov	r0, r3
    a58c:	4b14      	ldr	r3, [pc, #80]	; (a5e0 <_usb_d_dev_handle_trfail+0x1c0>)
    a58e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a590:	78fb      	ldrb	r3, [r7, #3]
    a592:	f107 0220 	add.w	r2, r7, #32
    a596:	4413      	add	r3, r2
    a598:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a59c:	7efb      	ldrb	r3, [r7, #27]
    a59e:	4619      	mov	r1, r3
    a5a0:	69f8      	ldr	r0, [r7, #28]
    a5a2:	4b0c      	ldr	r3, [pc, #48]	; (a5d4 <_usb_d_dev_handle_trfail+0x1b4>)
    a5a4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a5a6:	78fb      	ldrb	r3, [r7, #3]
    a5a8:	f107 0220 	add.w	r2, r7, #32
    a5ac:	4413      	add	r3, r2
    a5ae:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a5b2:	7efb      	ldrb	r3, [r7, #27]
    a5b4:	4619      	mov	r1, r3
    a5b6:	69f8      	ldr	r0, [r7, #28]
    a5b8:	4b07      	ldr	r3, [pc, #28]	; (a5d8 <_usb_d_dev_handle_trfail+0x1b8>)
    a5ba:	4798      	blx	r3
}
    a5bc:	bf00      	nop
    a5be:	3720      	adds	r7, #32
    a5c0:	46bd      	mov	sp, r7
    a5c2:	bd80      	pop	{r7, pc}
    a5c4:	00011e70 	.word	0x00011e70
    a5c8:	20000d24 	.word	0x20000d24
    a5cc:	00009189 	.word	0x00009189
    a5d0:	00009159 	.word	0x00009159
    a5d4:	0000902d 	.word	0x0000902d
    a5d8:	0000912d 	.word	0x0000912d
    a5dc:	0000b199 	.word	0x0000b199
    a5e0:	00009a15 	.word	0x00009a15

0000a5e4 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a5e4:	b580      	push	{r7, lr}
    a5e6:	b082      	sub	sp, #8
    a5e8:	af00      	add	r7, sp, #0
    a5ea:	6078      	str	r0, [r7, #4]
    a5ec:	460b      	mov	r3, r1
    a5ee:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a5f0:	78fb      	ldrb	r3, [r7, #3]
    a5f2:	f003 0310 	and.w	r3, r3, #16
    a5f6:	2b00      	cmp	r3, #0
    a5f8:	d003      	beq.n	a602 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a5fa:	6878      	ldr	r0, [r7, #4]
    a5fc:	4b0c      	ldr	r3, [pc, #48]	; (a630 <_usb_d_dev_trans_setup_isr+0x4c>)
    a5fe:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a600:	e012      	b.n	a628 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a602:	78fb      	ldrb	r3, [r7, #3]
    a604:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a608:	2b00      	cmp	r3, #0
    a60a:	d004      	beq.n	a616 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a60c:	2101      	movs	r1, #1
    a60e:	6878      	ldr	r0, [r7, #4]
    a610:	4b08      	ldr	r3, [pc, #32]	; (a634 <_usb_d_dev_trans_setup_isr+0x50>)
    a612:	4798      	blx	r3
}
    a614:	e008      	b.n	a628 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a616:	78fb      	ldrb	r3, [r7, #3]
    a618:	f003 0320 	and.w	r3, r3, #32
    a61c:	2b00      	cmp	r3, #0
    a61e:	d003      	beq.n	a628 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a620:	2100      	movs	r1, #0
    a622:	6878      	ldr	r0, [r7, #4]
    a624:	4b03      	ldr	r3, [pc, #12]	; (a634 <_usb_d_dev_trans_setup_isr+0x50>)
    a626:	4798      	blx	r3
}
    a628:	bf00      	nop
    a62a:	3708      	adds	r7, #8
    a62c:	46bd      	mov	sp, r7
    a62e:	bd80      	pop	{r7, pc}
    a630:	0000a305 	.word	0x0000a305
    a634:	0000a3dd 	.word	0x0000a3dd

0000a638 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a638:	b580      	push	{r7, lr}
    a63a:	b082      	sub	sp, #8
    a63c:	af00      	add	r7, sp, #0
    a63e:	6078      	str	r0, [r7, #4]
    a640:	460b      	mov	r3, r1
    a642:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a644:	78fb      	ldrb	r3, [r7, #3]
    a646:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a64a:	2b00      	cmp	r3, #0
    a64c:	d004      	beq.n	a658 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a64e:	2101      	movs	r1, #1
    a650:	6878      	ldr	r0, [r7, #4]
    a652:	4b1a      	ldr	r3, [pc, #104]	; (a6bc <_usb_d_dev_trans_in_isr+0x84>)
    a654:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a656:	e02c      	b.n	a6b2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a658:	78fb      	ldrb	r3, [r7, #3]
    a65a:	f003 0308 	and.w	r3, r3, #8
    a65e:	2b00      	cmp	r3, #0
    a660:	d004      	beq.n	a66c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a662:	2101      	movs	r1, #1
    a664:	6878      	ldr	r0, [r7, #4]
    a666:	4b16      	ldr	r3, [pc, #88]	; (a6c0 <_usb_d_dev_trans_in_isr+0x88>)
    a668:	4798      	blx	r3
}
    a66a:	e022      	b.n	a6b2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a66c:	78fb      	ldrb	r3, [r7, #3]
    a66e:	f003 0302 	and.w	r3, r3, #2
    a672:	2b00      	cmp	r3, #0
    a674:	d004      	beq.n	a680 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a676:	2101      	movs	r1, #1
    a678:	6878      	ldr	r0, [r7, #4]
    a67a:	4b12      	ldr	r3, [pc, #72]	; (a6c4 <_usb_d_dev_trans_in_isr+0x8c>)
    a67c:	4798      	blx	r3
}
    a67e:	e018      	b.n	a6b2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a680:	687b      	ldr	r3, [r7, #4]
    a682:	7cdb      	ldrb	r3, [r3, #19]
    a684:	f003 0307 	and.w	r3, r3, #7
    a688:	b2db      	uxtb	r3, r3
    a68a:	2b01      	cmp	r3, #1
    a68c:	d111      	bne.n	a6b2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a68e:	78fb      	ldrb	r3, [r7, #3]
    a690:	f003 0304 	and.w	r3, r3, #4
    a694:	2b00      	cmp	r3, #0
    a696:	d004      	beq.n	a6a2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a698:	2100      	movs	r1, #0
    a69a:	6878      	ldr	r0, [r7, #4]
    a69c:	4b08      	ldr	r3, [pc, #32]	; (a6c0 <_usb_d_dev_trans_in_isr+0x88>)
    a69e:	4798      	blx	r3
}
    a6a0:	e007      	b.n	a6b2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a6a2:	78fb      	ldrb	r3, [r7, #3]
    a6a4:	f003 0310 	and.w	r3, r3, #16
    a6a8:	2b00      	cmp	r3, #0
    a6aa:	d002      	beq.n	a6b2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a6ac:	6878      	ldr	r0, [r7, #4]
    a6ae:	4b06      	ldr	r3, [pc, #24]	; (a6c8 <_usb_d_dev_trans_in_isr+0x90>)
    a6b0:	4798      	blx	r3
}
    a6b2:	bf00      	nop
    a6b4:	3708      	adds	r7, #8
    a6b6:	46bd      	mov	sp, r7
    a6b8:	bd80      	pop	{r7, pc}
    a6ba:	bf00      	nop
    a6bc:	0000a3dd 	.word	0x0000a3dd
    a6c0:	0000a421 	.word	0x0000a421
    a6c4:	00009e29 	.word	0x00009e29
    a6c8:	0000a305 	.word	0x0000a305

0000a6cc <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a6cc:	b580      	push	{r7, lr}
    a6ce:	b082      	sub	sp, #8
    a6d0:	af00      	add	r7, sp, #0
    a6d2:	6078      	str	r0, [r7, #4]
    a6d4:	460b      	mov	r3, r1
    a6d6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a6d8:	78fb      	ldrb	r3, [r7, #3]
    a6da:	f003 0320 	and.w	r3, r3, #32
    a6de:	2b00      	cmp	r3, #0
    a6e0:	d004      	beq.n	a6ec <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a6e2:	2100      	movs	r1, #0
    a6e4:	6878      	ldr	r0, [r7, #4]
    a6e6:	4b1a      	ldr	r3, [pc, #104]	; (a750 <_usb_d_dev_trans_out_isr+0x84>)
    a6e8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a6ea:	e02c      	b.n	a746 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a6ec:	78fb      	ldrb	r3, [r7, #3]
    a6ee:	f003 0304 	and.w	r3, r3, #4
    a6f2:	2b00      	cmp	r3, #0
    a6f4:	d004      	beq.n	a700 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a6f6:	2100      	movs	r1, #0
    a6f8:	6878      	ldr	r0, [r7, #4]
    a6fa:	4b16      	ldr	r3, [pc, #88]	; (a754 <_usb_d_dev_trans_out_isr+0x88>)
    a6fc:	4798      	blx	r3
}
    a6fe:	e022      	b.n	a746 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a700:	78fb      	ldrb	r3, [r7, #3]
    a702:	f003 0301 	and.w	r3, r3, #1
    a706:	2b00      	cmp	r3, #0
    a708:	d004      	beq.n	a714 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a70a:	2101      	movs	r1, #1
    a70c:	6878      	ldr	r0, [r7, #4]
    a70e:	4b12      	ldr	r3, [pc, #72]	; (a758 <_usb_d_dev_trans_out_isr+0x8c>)
    a710:	4798      	blx	r3
}
    a712:	e018      	b.n	a746 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a714:	687b      	ldr	r3, [r7, #4]
    a716:	7cdb      	ldrb	r3, [r3, #19]
    a718:	f003 0307 	and.w	r3, r3, #7
    a71c:	b2db      	uxtb	r3, r3
    a71e:	2b01      	cmp	r3, #1
    a720:	d111      	bne.n	a746 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a722:	78fb      	ldrb	r3, [r7, #3]
    a724:	f003 0308 	and.w	r3, r3, #8
    a728:	2b00      	cmp	r3, #0
    a72a:	d004      	beq.n	a736 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a72c:	2101      	movs	r1, #1
    a72e:	6878      	ldr	r0, [r7, #4]
    a730:	4b08      	ldr	r3, [pc, #32]	; (a754 <_usb_d_dev_trans_out_isr+0x88>)
    a732:	4798      	blx	r3
}
    a734:	e007      	b.n	a746 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a736:	78fb      	ldrb	r3, [r7, #3]
    a738:	f003 0310 	and.w	r3, r3, #16
    a73c:	2b00      	cmp	r3, #0
    a73e:	d002      	beq.n	a746 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a740:	6878      	ldr	r0, [r7, #4]
    a742:	4b06      	ldr	r3, [pc, #24]	; (a75c <_usb_d_dev_trans_out_isr+0x90>)
    a744:	4798      	blx	r3
}
    a746:	bf00      	nop
    a748:	3708      	adds	r7, #8
    a74a:	46bd      	mov	sp, r7
    a74c:	bd80      	pop	{r7, pc}
    a74e:	bf00      	nop
    a750:	0000a3dd 	.word	0x0000a3dd
    a754:	0000a421 	.word	0x0000a421
    a758:	0000a041 	.word	0x0000a041
    a75c:	0000a305 	.word	0x0000a305

0000a760 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a760:	b580      	push	{r7, lr}
    a762:	b084      	sub	sp, #16
    a764:	af00      	add	r7, sp, #0
    a766:	6078      	str	r0, [r7, #4]
    a768:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a76a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a76e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a770:	683b      	ldr	r3, [r7, #0]
    a772:	7c9b      	ldrb	r3, [r3, #18]
    a774:	f003 030f 	and.w	r3, r3, #15
    a778:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a77a:	7afb      	ldrb	r3, [r7, #11]
    a77c:	2201      	movs	r2, #1
    a77e:	409a      	lsls	r2, r3
    a780:	687b      	ldr	r3, [r7, #4]
    a782:	4013      	ands	r3, r2
    a784:	2b00      	cmp	r3, #0
    a786:	d03d      	beq.n	a804 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a788:	7afb      	ldrb	r3, [r7, #11]
    a78a:	68fa      	ldr	r2, [r7, #12]
    a78c:	3308      	adds	r3, #8
    a78e:	015b      	lsls	r3, r3, #5
    a790:	4413      	add	r3, r2
    a792:	3307      	adds	r3, #7
    a794:	781b      	ldrb	r3, [r3, #0]
    a796:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a798:	7afb      	ldrb	r3, [r7, #11]
    a79a:	68fa      	ldr	r2, [r7, #12]
    a79c:	015b      	lsls	r3, r3, #5
    a79e:	4413      	add	r3, r2
    a7a0:	f203 1309 	addw	r3, r3, #265	; 0x109
    a7a4:	781b      	ldrb	r3, [r3, #0]
    a7a6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a7a8:	7aba      	ldrb	r2, [r7, #10]
    a7aa:	7a7b      	ldrb	r3, [r7, #9]
    a7ac:	4013      	ands	r3, r2
    a7ae:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a7b0:	7abb      	ldrb	r3, [r7, #10]
    a7b2:	2b00      	cmp	r3, #0
    a7b4:	d027      	beq.n	a806 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a7b6:	683b      	ldr	r3, [r7, #0]
    a7b8:	7cdb      	ldrb	r3, [r3, #19]
    a7ba:	f003 0307 	and.w	r3, r3, #7
    a7be:	b2db      	uxtb	r3, r3
    a7c0:	2b01      	cmp	r3, #1
    a7c2:	d10c      	bne.n	a7de <_usb_d_dev_handle_eps+0x7e>
    a7c4:	683b      	ldr	r3, [r7, #0]
    a7c6:	7cdb      	ldrb	r3, [r3, #19]
    a7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a7cc:	b2db      	uxtb	r3, r3
    a7ce:	2b00      	cmp	r3, #0
    a7d0:	d105      	bne.n	a7de <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a7d2:	7abb      	ldrb	r3, [r7, #10]
    a7d4:	4619      	mov	r1, r3
    a7d6:	6838      	ldr	r0, [r7, #0]
    a7d8:	4b0c      	ldr	r3, [pc, #48]	; (a80c <_usb_d_dev_handle_eps+0xac>)
    a7da:	4798      	blx	r3
    a7dc:	e013      	b.n	a806 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a7de:	683b      	ldr	r3, [r7, #0]
    a7e0:	7cdb      	ldrb	r3, [r3, #19]
    a7e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a7e6:	b2db      	uxtb	r3, r3
    a7e8:	2b00      	cmp	r3, #0
    a7ea:	d005      	beq.n	a7f8 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a7ec:	7abb      	ldrb	r3, [r7, #10]
    a7ee:	4619      	mov	r1, r3
    a7f0:	6838      	ldr	r0, [r7, #0]
    a7f2:	4b07      	ldr	r3, [pc, #28]	; (a810 <_usb_d_dev_handle_eps+0xb0>)
    a7f4:	4798      	blx	r3
    a7f6:	e006      	b.n	a806 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a7f8:	7abb      	ldrb	r3, [r7, #10]
    a7fa:	4619      	mov	r1, r3
    a7fc:	6838      	ldr	r0, [r7, #0]
    a7fe:	4b05      	ldr	r3, [pc, #20]	; (a814 <_usb_d_dev_handle_eps+0xb4>)
    a800:	4798      	blx	r3
    a802:	e000      	b.n	a806 <_usb_d_dev_handle_eps+0xa6>
		return;
    a804:	bf00      	nop
		}
	}
}
    a806:	3710      	adds	r7, #16
    a808:	46bd      	mov	sp, r7
    a80a:	bd80      	pop	{r7, pc}
    a80c:	0000a5e5 	.word	0x0000a5e5
    a810:	0000a639 	.word	0x0000a639
    a814:	0000a6cd 	.word	0x0000a6cd

0000a818 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a818:	b580      	push	{r7, lr}
    a81a:	b084      	sub	sp, #16
    a81c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a81e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a822:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a824:	68bb      	ldr	r3, [r7, #8]
    a826:	8c1b      	ldrh	r3, [r3, #32]
    a828:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a82a:	88fb      	ldrh	r3, [r7, #6]
    a82c:	2b00      	cmp	r3, #0
    a82e:	d104      	bne.n	a83a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a830:	4b13      	ldr	r3, [pc, #76]	; (a880 <_usb_d_dev_handler+0x68>)
    a832:	4798      	blx	r3
    a834:	4603      	mov	r3, r0
    a836:	2b00      	cmp	r3, #0
    a838:	d11e      	bne.n	a878 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a83a:	2300      	movs	r3, #0
    a83c:	73fb      	strb	r3, [r7, #15]
    a83e:	e017      	b.n	a870 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a840:	7bfa      	ldrb	r2, [r7, #15]
    a842:	4613      	mov	r3, r2
    a844:	009b      	lsls	r3, r3, #2
    a846:	4413      	add	r3, r2
    a848:	009b      	lsls	r3, r3, #2
    a84a:	3310      	adds	r3, #16
    a84c:	4a0d      	ldr	r2, [pc, #52]	; (a884 <_usb_d_dev_handler+0x6c>)
    a84e:	4413      	add	r3, r2
    a850:	3304      	adds	r3, #4
    a852:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a854:	683b      	ldr	r3, [r7, #0]
    a856:	7c9b      	ldrb	r3, [r3, #18]
    a858:	2bff      	cmp	r3, #255	; 0xff
    a85a:	d005      	beq.n	a868 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a85c:	88fb      	ldrh	r3, [r7, #6]
    a85e:	6839      	ldr	r1, [r7, #0]
    a860:	4618      	mov	r0, r3
    a862:	4b09      	ldr	r3, [pc, #36]	; (a888 <_usb_d_dev_handler+0x70>)
    a864:	4798      	blx	r3
    a866:	e000      	b.n	a86a <_usb_d_dev_handler+0x52>
			continue;
    a868:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a86a:	7bfb      	ldrb	r3, [r7, #15]
    a86c:	3301      	adds	r3, #1
    a86e:	73fb      	strb	r3, [r7, #15]
    a870:	7bfb      	ldrb	r3, [r7, #15]
    a872:	2b08      	cmp	r3, #8
    a874:	d9e4      	bls.n	a840 <_usb_d_dev_handler+0x28>
    a876:	e000      	b.n	a87a <_usb_d_dev_handler+0x62>
			return;
    a878:	bf00      	nop
	}
}
    a87a:	3710      	adds	r7, #16
    a87c:	46bd      	mov	sp, r7
    a87e:	bd80      	pop	{r7, pc}
    a880:	00009d71 	.word	0x00009d71
    a884:	20000c5c 	.word	0x20000c5c
    a888:	0000a761 	.word	0x0000a761

0000a88c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a88c:	b580      	push	{r7, lr}
    a88e:	b082      	sub	sp, #8
    a890:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a892:	2300      	movs	r3, #0
    a894:	71fb      	strb	r3, [r7, #7]
    a896:	e023      	b.n	a8e0 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a898:	79fa      	ldrb	r2, [r7, #7]
    a89a:	4613      	mov	r3, r2
    a89c:	009b      	lsls	r3, r3, #2
    a89e:	4413      	add	r3, r2
    a8a0:	009b      	lsls	r3, r3, #2
    a8a2:	3310      	adds	r3, #16
    a8a4:	4a14      	ldr	r2, [pc, #80]	; (a8f8 <_usb_d_dev_reset_epts+0x6c>)
    a8a6:	4413      	add	r3, r2
    a8a8:	3304      	adds	r3, #4
    a8aa:	2103      	movs	r1, #3
    a8ac:	4618      	mov	r0, r3
    a8ae:	4b13      	ldr	r3, [pc, #76]	; (a8fc <_usb_d_dev_reset_epts+0x70>)
    a8b0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a8b2:	79fa      	ldrb	r2, [r7, #7]
    a8b4:	4910      	ldr	r1, [pc, #64]	; (a8f8 <_usb_d_dev_reset_epts+0x6c>)
    a8b6:	4613      	mov	r3, r2
    a8b8:	009b      	lsls	r3, r3, #2
    a8ba:	4413      	add	r3, r2
    a8bc:	009b      	lsls	r3, r3, #2
    a8be:	440b      	add	r3, r1
    a8c0:	3326      	adds	r3, #38	; 0x26
    a8c2:	22ff      	movs	r2, #255	; 0xff
    a8c4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a8c6:	79fa      	ldrb	r2, [r7, #7]
    a8c8:	490b      	ldr	r1, [pc, #44]	; (a8f8 <_usb_d_dev_reset_epts+0x6c>)
    a8ca:	4613      	mov	r3, r2
    a8cc:	009b      	lsls	r3, r3, #2
    a8ce:	4413      	add	r3, r2
    a8d0:	009b      	lsls	r3, r3, #2
    a8d2:	440b      	add	r3, r1
    a8d4:	3327      	adds	r3, #39	; 0x27
    a8d6:	2200      	movs	r2, #0
    a8d8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a8da:	79fb      	ldrb	r3, [r7, #7]
    a8dc:	3301      	adds	r3, #1
    a8de:	71fb      	strb	r3, [r7, #7]
    a8e0:	79fb      	ldrb	r3, [r7, #7]
    a8e2:	2b08      	cmp	r3, #8
    a8e4:	d9d8      	bls.n	a898 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a8e6:	22a0      	movs	r2, #160	; 0xa0
    a8e8:	2100      	movs	r1, #0
    a8ea:	4805      	ldr	r0, [pc, #20]	; (a900 <_usb_d_dev_reset_epts+0x74>)
    a8ec:	4b05      	ldr	r3, [pc, #20]	; (a904 <_usb_d_dev_reset_epts+0x78>)
    a8ee:	4798      	blx	r3
}
    a8f0:	bf00      	nop
    a8f2:	3708      	adds	r7, #8
    a8f4:	46bd      	mov	sp, r7
    a8f6:	bd80      	pop	{r7, pc}
    a8f8:	20000c5c 	.word	0x20000c5c
    a8fc:	0000b151 	.word	0x0000b151
    a900:	20000d24 	.word	0x20000d24
    a904:	000117e9 	.word	0x000117e9

0000a908 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a908:	b580      	push	{r7, lr}
    a90a:	b084      	sub	sp, #16
    a90c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a90e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a912:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a914:	2301      	movs	r3, #1
    a916:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a918:	2304      	movs	r3, #4
    a91a:	713b      	strb	r3, [r7, #4]
    a91c:	2300      	movs	r3, #0
    a91e:	717b      	strb	r3, [r7, #5]
    a920:	2300      	movs	r3, #0
    a922:	71bb      	strb	r3, [r7, #6]
    a924:	2300      	movs	r3, #0
    a926:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a928:	2101      	movs	r1, #1
    a92a:	68f8      	ldr	r0, [r7, #12]
    a92c:	4b26      	ldr	r3, [pc, #152]	; (a9c8 <_usb_d_dev_init+0xc0>)
    a92e:	4798      	blx	r3
    a930:	4603      	mov	r3, r0
    a932:	f083 0301 	eor.w	r3, r3, #1
    a936:	b2db      	uxtb	r3, r3
    a938:	2b00      	cmp	r3, #0
    a93a:	d011      	beq.n	a960 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a93c:	2102      	movs	r1, #2
    a93e:	68f8      	ldr	r0, [r7, #12]
    a940:	4b22      	ldr	r3, [pc, #136]	; (a9cc <_usb_d_dev_init+0xc4>)
    a942:	4798      	blx	r3
    a944:	4603      	mov	r3, r0
    a946:	2b00      	cmp	r3, #0
    a948:	d006      	beq.n	a958 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a94a:	68f8      	ldr	r0, [r7, #12]
    a94c:	4b20      	ldr	r3, [pc, #128]	; (a9d0 <_usb_d_dev_init+0xc8>)
    a94e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a950:	2102      	movs	r1, #2
    a952:	68f8      	ldr	r0, [r7, #12]
    a954:	4b1f      	ldr	r3, [pc, #124]	; (a9d4 <_usb_d_dev_init+0xcc>)
    a956:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a958:	2101      	movs	r1, #1
    a95a:	68f8      	ldr	r0, [r7, #12]
    a95c:	4b1e      	ldr	r3, [pc, #120]	; (a9d8 <_usb_d_dev_init+0xd0>)
    a95e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a960:	2101      	movs	r1, #1
    a962:	68f8      	ldr	r0, [r7, #12]
    a964:	4b1b      	ldr	r3, [pc, #108]	; (a9d4 <_usb_d_dev_init+0xcc>)
    a966:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a968:	4b1c      	ldr	r3, [pc, #112]	; (a9dc <_usb_d_dev_init+0xd4>)
    a96a:	4a1d      	ldr	r2, [pc, #116]	; (a9e0 <_usb_d_dev_init+0xd8>)
    a96c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a96e:	4b1b      	ldr	r3, [pc, #108]	; (a9dc <_usb_d_dev_init+0xd4>)
    a970:	4a1b      	ldr	r2, [pc, #108]	; (a9e0 <_usb_d_dev_init+0xd8>)
    a972:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a974:	4b19      	ldr	r3, [pc, #100]	; (a9dc <_usb_d_dev_init+0xd4>)
    a976:	4a1a      	ldr	r2, [pc, #104]	; (a9e0 <_usb_d_dev_init+0xd8>)
    a978:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a97a:	4b18      	ldr	r3, [pc, #96]	; (a9dc <_usb_d_dev_init+0xd4>)
    a97c:	4a18      	ldr	r2, [pc, #96]	; (a9e0 <_usb_d_dev_init+0xd8>)
    a97e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a980:	4b16      	ldr	r3, [pc, #88]	; (a9dc <_usb_d_dev_init+0xd4>)
    a982:	4a17      	ldr	r2, [pc, #92]	; (a9e0 <_usb_d_dev_init+0xd8>)
    a984:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a986:	4b17      	ldr	r3, [pc, #92]	; (a9e4 <_usb_d_dev_init+0xdc>)
    a988:	4798      	blx	r3

	_usb_load_calib();
    a98a:	4b17      	ldr	r3, [pc, #92]	; (a9e8 <_usb_d_dev_init+0xe0>)
    a98c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a98e:	2104      	movs	r1, #4
    a990:	68f8      	ldr	r0, [r7, #12]
    a992:	4b11      	ldr	r3, [pc, #68]	; (a9d8 <_usb_d_dev_init+0xd0>)
    a994:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a996:	4b15      	ldr	r3, [pc, #84]	; (a9ec <_usb_d_dev_init+0xe4>)
    a998:	4619      	mov	r1, r3
    a99a:	68f8      	ldr	r0, [r7, #12]
    a99c:	4b14      	ldr	r3, [pc, #80]	; (a9f0 <_usb_d_dev_init+0xe8>)
    a99e:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a9a0:	7afb      	ldrb	r3, [r7, #11]
    a9a2:	f107 0210 	add.w	r2, r7, #16
    a9a6:	4413      	add	r3, r2
    a9a8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a9ac:	f043 0301 	orr.w	r3, r3, #1
    a9b0:	b2db      	uxtb	r3, r3
    a9b2:	b29b      	uxth	r3, r3
    a9b4:	4619      	mov	r1, r3
    a9b6:	68f8      	ldr	r0, [r7, #12]
    a9b8:	4b0e      	ldr	r3, [pc, #56]	; (a9f4 <_usb_d_dev_init+0xec>)
    a9ba:	4798      	blx	r3

	return ERR_NONE;
    a9bc:	2300      	movs	r3, #0
}
    a9be:	4618      	mov	r0, r3
    a9c0:	3710      	adds	r7, #16
    a9c2:	46bd      	mov	sp, r7
    a9c4:	bd80      	pop	{r7, pc}
    a9c6:	bf00      	nop
    a9c8:	00008fa1 	.word	0x00008fa1
    a9cc:	000092f1 	.word	0x000092f1
    a9d0:	000092c5 	.word	0x000092c5
    a9d4:	00008f77 	.word	0x00008f77
    a9d8:	00009321 	.word	0x00009321
    a9dc:	20000c5c 	.word	0x20000c5c
    a9e0:	000093e9 	.word	0x000093e9
    a9e4:	0000a88d 	.word	0x0000a88d
    a9e8:	00009401 	.word	0x00009401
    a9ec:	20000d24 	.word	0x20000d24
    a9f0:	000093cd 	.word	0x000093cd
    a9f4:	00009391 	.word	0x00009391

0000a9f8 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a9f8:	b580      	push	{r7, lr}
    a9fa:	b082      	sub	sp, #8
    a9fc:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a9fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa02:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    aa04:	2103      	movs	r1, #3
    aa06:	6878      	ldr	r0, [r7, #4]
    aa08:	4b17      	ldr	r3, [pc, #92]	; (aa68 <_usb_d_dev_enable+0x70>)
    aa0a:	4798      	blx	r3
    aa0c:	4603      	mov	r3, r0
    aa0e:	2b00      	cmp	r3, #0
    aa10:	d002      	beq.n	aa18 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    aa12:	f06f 0310 	mvn.w	r3, #16
    aa16:	e023      	b.n	aa60 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    aa18:	6878      	ldr	r0, [r7, #4]
    aa1a:	4b14      	ldr	r3, [pc, #80]	; (aa6c <_usb_d_dev_enable+0x74>)
    aa1c:	4798      	blx	r3
    aa1e:	4603      	mov	r3, r0
    aa20:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    aa22:	78fb      	ldrb	r3, [r7, #3]
    aa24:	f003 0302 	and.w	r3, r3, #2
    aa28:	2b00      	cmp	r3, #0
    aa2a:	d107      	bne.n	aa3c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    aa2c:	78fb      	ldrb	r3, [r7, #3]
    aa2e:	f043 0302 	orr.w	r3, r3, #2
    aa32:	b2db      	uxtb	r3, r3
    aa34:	4619      	mov	r1, r3
    aa36:	6878      	ldr	r0, [r7, #4]
    aa38:	4b0d      	ldr	r3, [pc, #52]	; (aa70 <_usb_d_dev_enable+0x78>)
    aa3a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    aa3c:	2050      	movs	r0, #80	; 0x50
    aa3e:	4b0d      	ldr	r3, [pc, #52]	; (aa74 <_usb_d_dev_enable+0x7c>)
    aa40:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    aa42:	2051      	movs	r0, #81	; 0x51
    aa44:	4b0b      	ldr	r3, [pc, #44]	; (aa74 <_usb_d_dev_enable+0x7c>)
    aa46:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    aa48:	2052      	movs	r0, #82	; 0x52
    aa4a:	4b0a      	ldr	r3, [pc, #40]	; (aa74 <_usb_d_dev_enable+0x7c>)
    aa4c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    aa4e:	2053      	movs	r0, #83	; 0x53
    aa50:	4b08      	ldr	r3, [pc, #32]	; (aa74 <_usb_d_dev_enable+0x7c>)
    aa52:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    aa54:	f240 218d 	movw	r1, #653	; 0x28d
    aa58:	6878      	ldr	r0, [r7, #4]
    aa5a:	4b07      	ldr	r3, [pc, #28]	; (aa78 <_usb_d_dev_enable+0x80>)
    aa5c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    aa5e:	2300      	movs	r3, #0
}
    aa60:	4618      	mov	r0, r3
    aa62:	3708      	adds	r7, #8
    aa64:	46bd      	mov	sp, r7
    aa66:	bd80      	pop	{r7, pc}
    aa68:	0000929b 	.word	0x0000929b
    aa6c:	00009349 	.word	0x00009349
    aa70:	00009321 	.word	0x00009321
    aa74:	00008ead 	.word	0x00008ead
    aa78:	00009245 	.word	0x00009245

0000aa7c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    aa7c:	b580      	push	{r7, lr}
    aa7e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    aa80:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa84:	4b01      	ldr	r3, [pc, #4]	; (aa8c <_usb_d_dev_attach+0x10>)
    aa86:	4798      	blx	r3
}
    aa88:	bf00      	nop
    aa8a:	bd80      	pop	{r7, pc}
    aa8c:	0000936d 	.word	0x0000936d

0000aa90 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    aa90:	b580      	push	{r7, lr}
    aa92:	b082      	sub	sp, #8
    aa94:	af00      	add	r7, sp, #0
    aa96:	4603      	mov	r3, r0
    aa98:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    aa9a:	79fb      	ldrb	r3, [r7, #7]
    aa9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    aaa0:	b2db      	uxtb	r3, r3
    aaa2:	4619      	mov	r1, r3
    aaa4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aaa8:	4b02      	ldr	r3, [pc, #8]	; (aab4 <_usb_d_dev_set_address+0x24>)
    aaaa:	4798      	blx	r3
}
    aaac:	bf00      	nop
    aaae:	3708      	adds	r7, #8
    aab0:	46bd      	mov	sp, r7
    aab2:	bd80      	pop	{r7, pc}
    aab4:	000093af 	.word	0x000093af

0000aab8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    aab8:	b590      	push	{r4, r7, lr}
    aaba:	b085      	sub	sp, #20
    aabc:	af00      	add	r7, sp, #0
    aabe:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    aac0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aac4:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aac6:	687b      	ldr	r3, [r7, #4]
    aac8:	7c9b      	ldrb	r3, [r3, #18]
    aaca:	f003 030f 	and.w	r3, r3, #15
    aace:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    aad0:	687b      	ldr	r3, [r7, #4]
    aad2:	68db      	ldr	r3, [r3, #12]
    aad4:	461a      	mov	r2, r3
    aad6:	7afb      	ldrb	r3, [r7, #11]
    aad8:	2100      	movs	r1, #0
    aada:	4618      	mov	r0, r3
    aadc:	4b0f      	ldr	r3, [pc, #60]	; (ab1c <_usb_d_dev_trans_setup+0x64>)
    aade:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    aae0:	687b      	ldr	r3, [r7, #4]
    aae2:	8a1b      	ldrh	r3, [r3, #16]
    aae4:	461a      	mov	r2, r3
    aae6:	7af8      	ldrb	r0, [r7, #11]
    aae8:	2300      	movs	r3, #0
    aaea:	2100      	movs	r1, #0
    aaec:	4c0c      	ldr	r4, [pc, #48]	; (ab20 <_usb_d_dev_trans_setup+0x68>)
    aaee:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    aaf0:	7afb      	ldrb	r3, [r7, #11]
    aaf2:	22b0      	movs	r2, #176	; 0xb0
    aaf4:	4619      	mov	r1, r3
    aaf6:	68f8      	ldr	r0, [r7, #12]
    aaf8:	4b0a      	ldr	r3, [pc, #40]	; (ab24 <_usb_d_dev_trans_setup+0x6c>)
    aafa:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    aafc:	7afb      	ldrb	r3, [r7, #11]
    aafe:	2200      	movs	r2, #0
    ab00:	2100      	movs	r1, #0
    ab02:	4618      	mov	r0, r3
    ab04:	4b08      	ldr	r3, [pc, #32]	; (ab28 <_usb_d_dev_trans_setup+0x70>)
    ab06:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    ab08:	7afb      	ldrb	r3, [r7, #11]
    ab0a:	2210      	movs	r2, #16
    ab0c:	4619      	mov	r1, r3
    ab0e:	68f8      	ldr	r0, [r7, #12]
    ab10:	4b06      	ldr	r3, [pc, #24]	; (ab2c <_usb_d_dev_trans_setup+0x74>)
    ab12:	4798      	blx	r3
}
    ab14:	bf00      	nop
    ab16:	3714      	adds	r7, #20
    ab18:	46bd      	mov	sp, r7
    ab1a:	bd90      	pop	{r4, r7, pc}
    ab1c:	0000984d 	.word	0x0000984d
    ab20:	000099d5 	.word	0x000099d5
    ab24:	000090ad 	.word	0x000090ad
    ab28:	00009aa5 	.word	0x00009aa5
    ab2c:	00009101 	.word	0x00009101

0000ab30 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    ab30:	b580      	push	{r7, lr}
    ab32:	b088      	sub	sp, #32
    ab34:	af00      	add	r7, sp, #0
    ab36:	4603      	mov	r3, r0
    ab38:	71fb      	strb	r3, [r7, #7]
    ab3a:	460b      	mov	r3, r1
    ab3c:	71bb      	strb	r3, [r7, #6]
    ab3e:	4613      	mov	r3, r2
    ab40:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    ab42:	79fb      	ldrb	r3, [r7, #7]
    ab44:	f003 030f 	and.w	r3, r3, #15
    ab48:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    ab4a:	79fb      	ldrb	r3, [r7, #7]
    ab4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab50:	2b00      	cmp	r3, #0
    ab52:	bf14      	ite	ne
    ab54:	2301      	movne	r3, #1
    ab56:	2300      	moveq	r3, #0
    ab58:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ab5a:	7fba      	ldrb	r2, [r7, #30]
    ab5c:	7ffb      	ldrb	r3, [r7, #31]
    ab5e:	4611      	mov	r1, r2
    ab60:	4618      	mov	r0, r3
    ab62:	4b3e      	ldr	r3, [pc, #248]	; (ac5c <_usb_d_dev_ep_init+0x12c>)
    ab64:	4798      	blx	r3
    ab66:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    ab68:	79bb      	ldrb	r3, [r7, #6]
    ab6a:	f003 0303 	and.w	r3, r3, #3
    ab6e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    ab70:	7ffa      	ldrb	r2, [r7, #31]
    ab72:	4613      	mov	r3, r2
    ab74:	005b      	lsls	r3, r3, #1
    ab76:	4413      	add	r3, r2
    ab78:	009b      	lsls	r3, r3, #2
    ab7a:	4a39      	ldr	r2, [pc, #228]	; (ac60 <_usb_d_dev_ep_init+0x130>)
    ab7c:	4413      	add	r3, r2
    ab7e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    ab80:	7ffb      	ldrb	r3, [r7, #31]
    ab82:	2b04      	cmp	r3, #4
    ab84:	d902      	bls.n	ab8c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    ab86:	f06f 0311 	mvn.w	r3, #17
    ab8a:	e063      	b.n	ac54 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    ab8c:	69bb      	ldr	r3, [r7, #24]
    ab8e:	7c9b      	ldrb	r3, [r3, #18]
    ab90:	2bff      	cmp	r3, #255	; 0xff
    ab92:	d002      	beq.n	ab9a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    ab94:	f06f 0313 	mvn.w	r3, #19
    ab98:	e05c      	b.n	ac54 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    ab9a:	7dfb      	ldrb	r3, [r7, #23]
    ab9c:	2b00      	cmp	r3, #0
    ab9e:	d11f      	bne.n	abe0 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    aba0:	7fbb      	ldrb	r3, [r7, #30]
    aba2:	2b00      	cmp	r3, #0
    aba4:	bf14      	ite	ne
    aba6:	2301      	movne	r3, #1
    aba8:	2300      	moveq	r3, #0
    abaa:	b2db      	uxtb	r3, r3
    abac:	f083 0301 	eor.w	r3, r3, #1
    abb0:	b2db      	uxtb	r3, r3
    abb2:	f003 0301 	and.w	r3, r3, #1
    abb6:	b2da      	uxtb	r2, r3
    abb8:	7ffb      	ldrb	r3, [r7, #31]
    abba:	4611      	mov	r1, r2
    abbc:	4618      	mov	r0, r3
    abbe:	4b27      	ldr	r3, [pc, #156]	; (ac5c <_usb_d_dev_ep_init+0x12c>)
    abc0:	4798      	blx	r3
    abc2:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    abc4:	68fb      	ldr	r3, [r7, #12]
    abc6:	7c9b      	ldrb	r3, [r3, #18]
    abc8:	2bff      	cmp	r3, #255	; 0xff
    abca:	d002      	beq.n	abd2 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    abcc:	f06f 0313 	mvn.w	r3, #19
    abd0:	e040      	b.n	ac54 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    abd2:	693b      	ldr	r3, [r7, #16]
    abd4:	681b      	ldr	r3, [r3, #0]
    abd6:	2b00      	cmp	r3, #0
    abd8:	d102      	bne.n	abe0 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    abda:	f06f 0312 	mvn.w	r3, #18
    abde:	e039      	b.n	ac54 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    abe0:	7fbb      	ldrb	r3, [r7, #30]
    abe2:	2b00      	cmp	r3, #0
    abe4:	d007      	beq.n	abf6 <_usb_d_dev_ep_init+0xc6>
    abe6:	693b      	ldr	r3, [r7, #16]
    abe8:	685b      	ldr	r3, [r3, #4]
    abea:	2b00      	cmp	r3, #0
    abec:	bf14      	ite	ne
    abee:	2301      	movne	r3, #1
    abf0:	2300      	moveq	r3, #0
    abf2:	b2db      	uxtb	r3, r3
    abf4:	e006      	b.n	ac04 <_usb_d_dev_ep_init+0xd4>
    abf6:	693b      	ldr	r3, [r7, #16]
    abf8:	681b      	ldr	r3, [r3, #0]
    abfa:	2b00      	cmp	r3, #0
    abfc:	bf14      	ite	ne
    abfe:	2301      	movne	r3, #1
    ac00:	2300      	moveq	r3, #0
    ac02:	b2db      	uxtb	r3, r3
    ac04:	2b00      	cmp	r3, #0
    ac06:	d00f      	beq.n	ac28 <_usb_d_dev_ep_init+0xf8>
    ac08:	7fbb      	ldrb	r3, [r7, #30]
    ac0a:	2b00      	cmp	r3, #0
    ac0c:	d003      	beq.n	ac16 <_usb_d_dev_ep_init+0xe6>
    ac0e:	693b      	ldr	r3, [r7, #16]
    ac10:	895b      	ldrh	r3, [r3, #10]
    ac12:	461a      	mov	r2, r3
    ac14:	e002      	b.n	ac1c <_usb_d_dev_ep_init+0xec>
    ac16:	693b      	ldr	r3, [r7, #16]
    ac18:	891b      	ldrh	r3, [r3, #8]
    ac1a:	461a      	mov	r2, r3
    ac1c:	88bb      	ldrh	r3, [r7, #4]
    ac1e:	429a      	cmp	r2, r3
    ac20:	da02      	bge.n	ac28 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    ac22:	f06f 0312 	mvn.w	r3, #18
    ac26:	e015      	b.n	ac54 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    ac28:	7fbb      	ldrb	r3, [r7, #30]
    ac2a:	2b00      	cmp	r3, #0
    ac2c:	d002      	beq.n	ac34 <_usb_d_dev_ep_init+0x104>
    ac2e:	693b      	ldr	r3, [r7, #16]
    ac30:	685b      	ldr	r3, [r3, #4]
    ac32:	e001      	b.n	ac38 <_usb_d_dev_ep_init+0x108>
    ac34:	693b      	ldr	r3, [r7, #16]
    ac36:	681b      	ldr	r3, [r3, #0]
    ac38:	69ba      	ldr	r2, [r7, #24]
    ac3a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    ac3c:	69bb      	ldr	r3, [r7, #24]
    ac3e:	88ba      	ldrh	r2, [r7, #4]
    ac40:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    ac42:	7dfb      	ldrb	r3, [r7, #23]
    ac44:	3301      	adds	r3, #1
    ac46:	b2da      	uxtb	r2, r3
    ac48:	69bb      	ldr	r3, [r7, #24]
    ac4a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    ac4c:	69bb      	ldr	r3, [r7, #24]
    ac4e:	79fa      	ldrb	r2, [r7, #7]
    ac50:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    ac52:	2300      	movs	r3, #0
}
    ac54:	4618      	mov	r0, r3
    ac56:	3720      	adds	r7, #32
    ac58:	46bd      	mov	sp, r7
    ac5a:	bd80      	pop	{r7, pc}
    ac5c:	00009b61 	.word	0x00009b61
    ac60:	00011e34 	.word	0x00011e34

0000ac64 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    ac64:	b580      	push	{r7, lr}
    ac66:	b086      	sub	sp, #24
    ac68:	af00      	add	r7, sp, #0
    ac6a:	4603      	mov	r3, r0
    ac6c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    ac6e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ac72:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    ac74:	79fb      	ldrb	r3, [r7, #7]
    ac76:	f003 030f 	and.w	r3, r3, #15
    ac7a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ac7c:	79fb      	ldrb	r3, [r7, #7]
    ac7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ac82:	2b00      	cmp	r3, #0
    ac84:	bf14      	ite	ne
    ac86:	2301      	movne	r3, #1
    ac88:	2300      	moveq	r3, #0
    ac8a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ac8c:	7cba      	ldrb	r2, [r7, #18]
    ac8e:	7cfb      	ldrb	r3, [r7, #19]
    ac90:	4611      	mov	r1, r2
    ac92:	4618      	mov	r0, r3
    ac94:	4b2a      	ldr	r3, [pc, #168]	; (ad40 <_usb_d_dev_ep_deinit+0xdc>)
    ac96:	4798      	blx	r3
    ac98:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ac9a:	7cfb      	ldrb	r3, [r7, #19]
    ac9c:	2b04      	cmp	r3, #4
    ac9e:	d84a      	bhi.n	ad36 <_usb_d_dev_ep_deinit+0xd2>
    aca0:	68fb      	ldr	r3, [r7, #12]
    aca2:	7c9b      	ldrb	r3, [r3, #18]
    aca4:	2bff      	cmp	r3, #255	; 0xff
    aca6:	d046      	beq.n	ad36 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    aca8:	7cbb      	ldrb	r3, [r7, #18]
    acaa:	2203      	movs	r2, #3
    acac:	4619      	mov	r1, r3
    acae:	68f8      	ldr	r0, [r7, #12]
    acb0:	4b24      	ldr	r3, [pc, #144]	; (ad44 <_usb_d_dev_ep_deinit+0xe0>)
    acb2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    acb4:	68fb      	ldr	r3, [r7, #12]
    acb6:	7cdb      	ldrb	r3, [r3, #19]
    acb8:	f003 0307 	and.w	r3, r3, #7
    acbc:	b2db      	uxtb	r3, r3
    acbe:	2b01      	cmp	r3, #1
    acc0:	d107      	bne.n	acd2 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    acc2:	79fb      	ldrb	r3, [r7, #7]
    acc4:	697a      	ldr	r2, [r7, #20]
    acc6:	3308      	adds	r3, #8
    acc8:	015b      	lsls	r3, r3, #5
    acca:	4413      	add	r3, r2
    accc:	2200      	movs	r2, #0
    acce:	701a      	strb	r2, [r3, #0]
    acd0:	e02a      	b.n	ad28 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    acd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    acd6:	2b00      	cmp	r3, #0
    acd8:	da15      	bge.n	ad06 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    acda:	79fb      	ldrb	r3, [r7, #7]
    acdc:	f003 030f 	and.w	r3, r3, #15
    ace0:	79fa      	ldrb	r2, [r7, #7]
    ace2:	f002 020f 	and.w	r2, r2, #15
    ace6:	6979      	ldr	r1, [r7, #20]
    ace8:	3208      	adds	r2, #8
    acea:	0152      	lsls	r2, r2, #5
    acec:	440a      	add	r2, r1
    acee:	7812      	ldrb	r2, [r2, #0]
    acf0:	b2d2      	uxtb	r2, r2
    acf2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    acf6:	b2d1      	uxtb	r1, r2
    acf8:	697a      	ldr	r2, [r7, #20]
    acfa:	3308      	adds	r3, #8
    acfc:	015b      	lsls	r3, r3, #5
    acfe:	4413      	add	r3, r2
    ad00:	460a      	mov	r2, r1
    ad02:	701a      	strb	r2, [r3, #0]
    ad04:	e010      	b.n	ad28 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    ad06:	79fb      	ldrb	r3, [r7, #7]
    ad08:	79fa      	ldrb	r2, [r7, #7]
    ad0a:	6979      	ldr	r1, [r7, #20]
    ad0c:	3208      	adds	r2, #8
    ad0e:	0152      	lsls	r2, r2, #5
    ad10:	440a      	add	r2, r1
    ad12:	7812      	ldrb	r2, [r2, #0]
    ad14:	b2d2      	uxtb	r2, r2
    ad16:	f022 0207 	bic.w	r2, r2, #7
    ad1a:	b2d1      	uxtb	r1, r2
    ad1c:	697a      	ldr	r2, [r7, #20]
    ad1e:	3308      	adds	r3, #8
    ad20:	015b      	lsls	r3, r3, #5
    ad22:	4413      	add	r3, r2
    ad24:	460a      	mov	r2, r1
    ad26:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    ad28:	68fb      	ldr	r3, [r7, #12]
    ad2a:	2200      	movs	r2, #0
    ad2c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    ad2e:	68fb      	ldr	r3, [r7, #12]
    ad30:	22ff      	movs	r2, #255	; 0xff
    ad32:	749a      	strb	r2, [r3, #18]
    ad34:	e000      	b.n	ad38 <_usb_d_dev_ep_deinit+0xd4>
		return;
    ad36:	bf00      	nop
}
    ad38:	3718      	adds	r7, #24
    ad3a:	46bd      	mov	sp, r7
    ad3c:	bd80      	pop	{r7, pc}
    ad3e:	bf00      	nop
    ad40:	00009b61 	.word	0x00009b61
    ad44:	0000b199 	.word	0x0000b199

0000ad48 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    ad48:	b5b0      	push	{r4, r5, r7, lr}
    ad4a:	b088      	sub	sp, #32
    ad4c:	af00      	add	r7, sp, #0
    ad4e:	4603      	mov	r3, r0
    ad50:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    ad52:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ad56:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    ad58:	79fb      	ldrb	r3, [r7, #7]
    ad5a:	f003 030f 	and.w	r3, r3, #15
    ad5e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    ad60:	79fb      	ldrb	r3, [r7, #7]
    ad62:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad66:	2b00      	cmp	r3, #0
    ad68:	bf14      	ite	ne
    ad6a:	2301      	movne	r3, #1
    ad6c:	2300      	moveq	r3, #0
    ad6e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    ad70:	7eba      	ldrb	r2, [r7, #26]
    ad72:	7efb      	ldrb	r3, [r7, #27]
    ad74:	4611      	mov	r1, r2
    ad76:	4618      	mov	r0, r3
    ad78:	4b70      	ldr	r3, [pc, #448]	; (af3c <_usb_d_dev_ep_enable+0x1f4>)
    ad7a:	4798      	blx	r3
    ad7c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    ad7e:	7efb      	ldrb	r3, [r7, #27]
    ad80:	4619      	mov	r1, r3
    ad82:	69f8      	ldr	r0, [r7, #28]
    ad84:	4b6e      	ldr	r3, [pc, #440]	; (af40 <_usb_d_dev_ep_enable+0x1f8>)
    ad86:	4798      	blx	r3
    ad88:	4603      	mov	r3, r0
    ad8a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ad8c:	7efb      	ldrb	r3, [r7, #27]
    ad8e:	2b04      	cmp	r3, #4
    ad90:	d803      	bhi.n	ad9a <_usb_d_dev_ep_enable+0x52>
    ad92:	697b      	ldr	r3, [r7, #20]
    ad94:	7c9b      	ldrb	r3, [r3, #18]
    ad96:	2bff      	cmp	r3, #255	; 0xff
    ad98:	d102      	bne.n	ada0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    ad9a:	f06f 0311 	mvn.w	r3, #17
    ad9e:	e0c8      	b.n	af32 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    ada0:	7efb      	ldrb	r3, [r7, #27]
    ada2:	015b      	lsls	r3, r3, #5
    ada4:	4a67      	ldr	r2, [pc, #412]	; (af44 <_usb_d_dev_ep_enable+0x1fc>)
    ada6:	4413      	add	r3, r2
    ada8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    adaa:	697b      	ldr	r3, [r7, #20]
    adac:	7cdb      	ldrb	r3, [r3, #19]
    adae:	f003 0307 	and.w	r3, r3, #7
    adb2:	b2db      	uxtb	r3, r3
    adb4:	2b01      	cmp	r3, #1
    adb6:	d14b      	bne.n	ae50 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    adb8:	7cfb      	ldrb	r3, [r7, #19]
    adba:	f003 0377 	and.w	r3, r3, #119	; 0x77
    adbe:	2b00      	cmp	r3, #0
    adc0:	d002      	beq.n	adc8 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    adc2:	f06f 0313 	mvn.w	r3, #19
    adc6:	e0b4      	b.n	af32 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    adc8:	7efb      	ldrb	r3, [r7, #27]
    adca:	2211      	movs	r2, #17
    adcc:	4619      	mov	r1, r3
    adce:	69f8      	ldr	r0, [r7, #28]
    add0:	4b5d      	ldr	r3, [pc, #372]	; (af48 <_usb_d_dev_ep_enable+0x200>)
    add2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    add4:	697b      	ldr	r3, [r7, #20]
    add6:	8a1b      	ldrh	r3, [r3, #16]
    add8:	039b      	lsls	r3, r3, #14
    adda:	4c5c      	ldr	r4, [pc, #368]	; (af4c <_usb_d_dev_ep_enable+0x204>)
    addc:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    adde:	697b      	ldr	r3, [r7, #20]
    ade0:	8a1b      	ldrh	r3, [r3, #16]
    ade2:	4618      	mov	r0, r3
    ade4:	4b5a      	ldr	r3, [pc, #360]	; (af50 <_usb_d_dev_ep_enable+0x208>)
    ade6:	4798      	blx	r3
    ade8:	4603      	mov	r3, r0
    adea:	071b      	lsls	r3, r3, #28
    adec:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    adf0:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    adf4:	68fb      	ldr	r3, [r7, #12]
    adf6:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    adf8:	68fb      	ldr	r3, [r7, #12]
    adfa:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    adfe:	697b      	ldr	r3, [r7, #20]
    ae00:	8a1b      	ldrh	r3, [r3, #16]
    ae02:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ae06:	697b      	ldr	r3, [r7, #20]
    ae08:	8a1b      	ldrh	r3, [r3, #16]
    ae0a:	4618      	mov	r0, r3
    ae0c:	4b50      	ldr	r3, [pc, #320]	; (af50 <_usb_d_dev_ep_enable+0x208>)
    ae0e:	4798      	blx	r3
    ae10:	4603      	mov	r3, r0
    ae12:	071b      	lsls	r3, r3, #28
    ae14:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ae18:	432b      	orrs	r3, r5
    ae1a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ae1c:	7efb      	ldrb	r3, [r7, #27]
    ae1e:	2200      	movs	r2, #0
    ae20:	2100      	movs	r1, #0
    ae22:	4618      	mov	r0, r3
    ae24:	4b4b      	ldr	r3, [pc, #300]	; (af54 <_usb_d_dev_ep_enable+0x20c>)
    ae26:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    ae28:	7efb      	ldrb	r3, [r7, #27]
    ae2a:	2200      	movs	r2, #0
    ae2c:	2101      	movs	r1, #1
    ae2e:	4618      	mov	r0, r3
    ae30:	4b49      	ldr	r3, [pc, #292]	; (af58 <_usb_d_dev_ep_enable+0x210>)
    ae32:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    ae34:	7efb      	ldrb	r3, [r7, #27]
    ae36:	2100      	movs	r1, #0
    ae38:	4618      	mov	r0, r3
    ae3a:	4b48      	ldr	r3, [pc, #288]	; (af5c <_usb_d_dev_ep_enable+0x214>)
    ae3c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    ae3e:	7efb      	ldrb	r3, [r7, #27]
    ae40:	2101      	movs	r1, #1
    ae42:	4618      	mov	r0, r3
    ae44:	4b45      	ldr	r3, [pc, #276]	; (af5c <_usb_d_dev_ep_enable+0x214>)
    ae46:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    ae48:	6978      	ldr	r0, [r7, #20]
    ae4a:	4b45      	ldr	r3, [pc, #276]	; (af60 <_usb_d_dev_ep_enable+0x218>)
    ae4c:	4798      	blx	r3
    ae4e:	e06f      	b.n	af30 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    ae50:	7ebb      	ldrb	r3, [r7, #26]
    ae52:	2b00      	cmp	r3, #0
    ae54:	d038      	beq.n	aec8 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    ae56:	7cfb      	ldrb	r3, [r7, #19]
    ae58:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ae5c:	2b00      	cmp	r3, #0
    ae5e:	d002      	beq.n	ae66 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    ae60:	f06f 0313 	mvn.w	r3, #19
    ae64:	e065      	b.n	af32 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    ae66:	697b      	ldr	r3, [r7, #20]
    ae68:	7cdb      	ldrb	r3, [r3, #19]
    ae6a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae6e:	b2db      	uxtb	r3, r3
    ae70:	011b      	lsls	r3, r3, #4
    ae72:	b2db      	uxtb	r3, r3
    ae74:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ae78:	b2da      	uxtb	r2, r3
    ae7a:	7cfb      	ldrb	r3, [r7, #19]
    ae7c:	4313      	orrs	r3, r2
    ae7e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    ae80:	7cfa      	ldrb	r2, [r7, #19]
    ae82:	7efb      	ldrb	r3, [r7, #27]
    ae84:	4619      	mov	r1, r3
    ae86:	69f8      	ldr	r0, [r7, #28]
    ae88:	4b2f      	ldr	r3, [pc, #188]	; (af48 <_usb_d_dev_ep_enable+0x200>)
    ae8a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    ae8c:	68fb      	ldr	r3, [r7, #12]
    ae8e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ae92:	697b      	ldr	r3, [r7, #20]
    ae94:	8a1b      	ldrh	r3, [r3, #16]
    ae96:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ae9a:	697b      	ldr	r3, [r7, #20]
    ae9c:	8a1b      	ldrh	r3, [r3, #16]
    ae9e:	4618      	mov	r0, r3
    aea0:	4b2b      	ldr	r3, [pc, #172]	; (af50 <_usb_d_dev_ep_enable+0x208>)
    aea2:	4798      	blx	r3
    aea4:	4603      	mov	r3, r0
    aea6:	071b      	lsls	r3, r3, #28
    aea8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    aeac:	432b      	orrs	r3, r5
    aeae:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    aeb0:	7efb      	ldrb	r3, [r7, #27]
    aeb2:	2200      	movs	r2, #0
    aeb4:	2101      	movs	r1, #1
    aeb6:	4618      	mov	r0, r3
    aeb8:	4b27      	ldr	r3, [pc, #156]	; (af58 <_usb_d_dev_ep_enable+0x210>)
    aeba:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    aebc:	7efb      	ldrb	r3, [r7, #27]
    aebe:	2101      	movs	r1, #1
    aec0:	4618      	mov	r0, r3
    aec2:	4b26      	ldr	r3, [pc, #152]	; (af5c <_usb_d_dev_ep_enable+0x214>)
    aec4:	4798      	blx	r3
    aec6:	e033      	b.n	af30 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    aec8:	7cfb      	ldrb	r3, [r7, #19]
    aeca:	f003 0307 	and.w	r3, r3, #7
    aece:	2b00      	cmp	r3, #0
    aed0:	d002      	beq.n	aed8 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    aed2:	f06f 0313 	mvn.w	r3, #19
    aed6:	e02c      	b.n	af32 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    aed8:	697b      	ldr	r3, [r7, #20]
    aeda:	7cdb      	ldrb	r3, [r3, #19]
    aedc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aee0:	b2db      	uxtb	r3, r3
    aee2:	461a      	mov	r2, r3
    aee4:	7cfb      	ldrb	r3, [r7, #19]
    aee6:	4313      	orrs	r3, r2
    aee8:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    aeea:	7cfa      	ldrb	r2, [r7, #19]
    aeec:	7efb      	ldrb	r3, [r7, #27]
    aeee:	4619      	mov	r1, r3
    aef0:	69f8      	ldr	r0, [r7, #28]
    aef2:	4b15      	ldr	r3, [pc, #84]	; (af48 <_usb_d_dev_ep_enable+0x200>)
    aef4:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aef6:	697b      	ldr	r3, [r7, #20]
    aef8:	8a1b      	ldrh	r3, [r3, #16]
    aefa:	039b      	lsls	r3, r3, #14
    aefc:	4c13      	ldr	r4, [pc, #76]	; (af4c <_usb_d_dev_ep_enable+0x204>)
    aefe:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    af00:	697b      	ldr	r3, [r7, #20]
    af02:	8a1b      	ldrh	r3, [r3, #16]
    af04:	4618      	mov	r0, r3
    af06:	4b12      	ldr	r3, [pc, #72]	; (af50 <_usb_d_dev_ep_enable+0x208>)
    af08:	4798      	blx	r3
    af0a:	4603      	mov	r3, r0
    af0c:	071b      	lsls	r3, r3, #28
    af0e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    af12:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    af16:	68fb      	ldr	r3, [r7, #12]
    af18:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    af1a:	7efb      	ldrb	r3, [r7, #27]
    af1c:	2200      	movs	r2, #0
    af1e:	2100      	movs	r1, #0
    af20:	4618      	mov	r0, r3
    af22:	4b0c      	ldr	r3, [pc, #48]	; (af54 <_usb_d_dev_ep_enable+0x20c>)
    af24:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    af26:	7efb      	ldrb	r3, [r7, #27]
    af28:	2100      	movs	r1, #0
    af2a:	4618      	mov	r0, r3
    af2c:	4b0b      	ldr	r3, [pc, #44]	; (af5c <_usb_d_dev_ep_enable+0x214>)
    af2e:	4798      	blx	r3
	}

	return USB_OK;
    af30:	2300      	movs	r3, #0
}
    af32:	4618      	mov	r0, r3
    af34:	3720      	adds	r7, #32
    af36:	46bd      	mov	sp, r7
    af38:	bdb0      	pop	{r4, r5, r7, pc}
    af3a:	bf00      	nop
    af3c:	00009b61 	.word	0x00009b61
    af40:	000091e7 	.word	0x000091e7
    af44:	20000d24 	.word	0x20000d24
    af48:	000091bd 	.word	0x000091bd
    af4c:	0fffc000 	.word	0x0fffc000
    af50:	00009afd 	.word	0x00009afd
    af54:	00009aa5 	.word	0x00009aa5
    af58:	00009a4d 	.word	0x00009a4d
    af5c:	00009a15 	.word	0x00009a15
    af60:	0000aab9 	.word	0x0000aab9

0000af64 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    af64:	b580      	push	{r7, lr}
    af66:	b084      	sub	sp, #16
    af68:	af00      	add	r7, sp, #0
    af6a:	6078      	str	r0, [r7, #4]
    af6c:	460b      	mov	r3, r1
    af6e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    af70:	687b      	ldr	r3, [r7, #4]
    af72:	7c9b      	ldrb	r3, [r3, #18]
    af74:	f003 030f 	and.w	r3, r3, #15
    af78:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    af7a:	78fa      	ldrb	r2, [r7, #3]
    af7c:	7bfb      	ldrb	r3, [r7, #15]
    af7e:	4611      	mov	r1, r2
    af80:	4618      	mov	r0, r3
    af82:	4b03      	ldr	r3, [pc, #12]	; (af90 <_usb_d_dev_ep_stall_get+0x2c>)
    af84:	4798      	blx	r3
    af86:	4603      	mov	r3, r0
}
    af88:	4618      	mov	r0, r3
    af8a:	3710      	adds	r7, #16
    af8c:	46bd      	mov	sp, r7
    af8e:	bd80      	pop	{r7, pc}
    af90:	00009655 	.word	0x00009655

0000af94 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    af94:	b580      	push	{r7, lr}
    af96:	b084      	sub	sp, #16
    af98:	af00      	add	r7, sp, #0
    af9a:	6078      	str	r0, [r7, #4]
    af9c:	460b      	mov	r3, r1
    af9e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    afa0:	687b      	ldr	r3, [r7, #4]
    afa2:	7c9b      	ldrb	r3, [r3, #18]
    afa4:	f003 030f 	and.w	r3, r3, #15
    afa8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    afaa:	78f9      	ldrb	r1, [r7, #3]
    afac:	7bfb      	ldrb	r3, [r7, #15]
    afae:	2201      	movs	r2, #1
    afb0:	4618      	mov	r0, r3
    afb2:	4b0a      	ldr	r3, [pc, #40]	; (afdc <_usb_d_dev_ep_stall_set+0x48>)
    afb4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    afb6:	78fb      	ldrb	r3, [r7, #3]
    afb8:	2220      	movs	r2, #32
    afba:	409a      	lsls	r2, r3
    afbc:	7bfb      	ldrb	r3, [r7, #15]
    afbe:	4611      	mov	r1, r2
    afc0:	4618      	mov	r0, r3
    afc2:	4b07      	ldr	r3, [pc, #28]	; (afe0 <_usb_d_dev_ep_stall_set+0x4c>)
    afc4:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    afc6:	687a      	ldr	r2, [r7, #4]
    afc8:	7cd3      	ldrb	r3, [r2, #19]
    afca:	f043 0308 	orr.w	r3, r3, #8
    afce:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    afd0:	2300      	movs	r3, #0
}
    afd2:	4618      	mov	r0, r3
    afd4:	3710      	adds	r7, #16
    afd6:	46bd      	mov	sp, r7
    afd8:	bd80      	pop	{r7, pc}
    afda:	bf00      	nop
    afdc:	000095fd 	.word	0x000095fd
    afe0:	0000957d 	.word	0x0000957d

0000afe4 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    afe4:	b580      	push	{r7, lr}
    afe6:	b084      	sub	sp, #16
    afe8:	af00      	add	r7, sp, #0
    afea:	6078      	str	r0, [r7, #4]
    afec:	460b      	mov	r3, r1
    afee:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    aff0:	687b      	ldr	r3, [r7, #4]
    aff2:	7c9b      	ldrb	r3, [r3, #18]
    aff4:	f003 030f 	and.w	r3, r3, #15
    aff8:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    affa:	78fa      	ldrb	r2, [r7, #3]
    affc:	7bfb      	ldrb	r3, [r7, #15]
    affe:	4611      	mov	r1, r2
    b000:	4618      	mov	r0, r3
    b002:	4b28      	ldr	r3, [pc, #160]	; (b0a4 <_usb_d_dev_ep_stall_clr+0xc0>)
    b004:	4798      	blx	r3
    b006:	4603      	mov	r3, r0
    b008:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    b00a:	7bbb      	ldrb	r3, [r7, #14]
    b00c:	f083 0301 	eor.w	r3, r3, #1
    b010:	b2db      	uxtb	r3, r3
    b012:	2b00      	cmp	r3, #0
    b014:	d001      	beq.n	b01a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    b016:	2300      	movs	r3, #0
    b018:	e040      	b.n	b09c <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    b01a:	78f9      	ldrb	r1, [r7, #3]
    b01c:	7bfb      	ldrb	r3, [r7, #15]
    b01e:	2200      	movs	r2, #0
    b020:	4618      	mov	r0, r3
    b022:	4b21      	ldr	r3, [pc, #132]	; (b0a8 <_usb_d_dev_ep_stall_clr+0xc4>)
    b024:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b026:	78fb      	ldrb	r3, [r7, #3]
    b028:	2220      	movs	r2, #32
    b02a:	409a      	lsls	r2, r3
    b02c:	7bfb      	ldrb	r3, [r7, #15]
    b02e:	4611      	mov	r1, r2
    b030:	4618      	mov	r0, r3
    b032:	4b1e      	ldr	r3, [pc, #120]	; (b0ac <_usb_d_dev_ep_stall_clr+0xc8>)
    b034:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b036:	78fa      	ldrb	r2, [r7, #3]
    b038:	7bfb      	ldrb	r3, [r7, #15]
    b03a:	4611      	mov	r1, r2
    b03c:	4618      	mov	r0, r3
    b03e:	4b1c      	ldr	r3, [pc, #112]	; (b0b0 <_usb_d_dev_ep_stall_clr+0xcc>)
    b040:	4798      	blx	r3
    b042:	4603      	mov	r3, r0
    b044:	2b00      	cmp	r3, #0
    b046:	d00b      	beq.n	b060 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b048:	78fa      	ldrb	r2, [r7, #3]
    b04a:	7bfb      	ldrb	r3, [r7, #15]
    b04c:	4611      	mov	r1, r2
    b04e:	4618      	mov	r0, r3
    b050:	4b18      	ldr	r3, [pc, #96]	; (b0b4 <_usb_d_dev_ep_stall_clr+0xd0>)
    b052:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b054:	78f9      	ldrb	r1, [r7, #3]
    b056:	7bfb      	ldrb	r3, [r7, #15]
    b058:	2200      	movs	r2, #0
    b05a:	4618      	mov	r0, r3
    b05c:	4b16      	ldr	r3, [pc, #88]	; (b0b8 <_usb_d_dev_ep_stall_clr+0xd4>)
    b05e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b060:	687b      	ldr	r3, [r7, #4]
    b062:	7cdb      	ldrb	r3, [r3, #19]
    b064:	f003 0307 	and.w	r3, r3, #7
    b068:	b2db      	uxtb	r3, r3
    b06a:	2b01      	cmp	r3, #1
    b06c:	d110      	bne.n	b090 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b06e:	7bfb      	ldrb	r3, [r7, #15]
    b070:	4619      	mov	r1, r3
    b072:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b076:	4b11      	ldr	r3, [pc, #68]	; (b0bc <_usb_d_dev_ep_stall_clr+0xd8>)
    b078:	4798      	blx	r3
    b07a:	4603      	mov	r3, r0
    b07c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b080:	2b00      	cmp	r3, #0
    b082:	d10a      	bne.n	b09a <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b084:	687a      	ldr	r2, [r7, #4]
    b086:	7cd3      	ldrb	r3, [r2, #19]
    b088:	f36f 03c3 	bfc	r3, #3, #1
    b08c:	74d3      	strb	r3, [r2, #19]
    b08e:	e004      	b.n	b09a <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b090:	687a      	ldr	r2, [r7, #4]
    b092:	7cd3      	ldrb	r3, [r2, #19]
    b094:	f36f 03c3 	bfc	r3, #3, #1
    b098:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b09a:	2300      	movs	r3, #0
}
    b09c:	4618      	mov	r0, r3
    b09e:	3710      	adds	r7, #16
    b0a0:	46bd      	mov	sp, r7
    b0a2:	bd80      	pop	{r7, pc}
    b0a4:	00009655 	.word	0x00009655
    b0a8:	000095fd 	.word	0x000095fd
    b0ac:	000095a5 	.word	0x000095a5
    b0b0:	00009699 	.word	0x00009699
    b0b4:	000096dd 	.word	0x000096dd
    b0b8:	000097c9 	.word	0x000097c9
    b0bc:	00009085 	.word	0x00009085

0000b0c0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b0c0:	b580      	push	{r7, lr}
    b0c2:	b086      	sub	sp, #24
    b0c4:	af00      	add	r7, sp, #0
    b0c6:	4603      	mov	r3, r0
    b0c8:	460a      	mov	r2, r1
    b0ca:	71fb      	strb	r3, [r7, #7]
    b0cc:	4613      	mov	r3, r2
    b0ce:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b0d0:	79fb      	ldrb	r3, [r7, #7]
    b0d2:	f003 030f 	and.w	r3, r3, #15
    b0d6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b0d8:	79fb      	ldrb	r3, [r7, #7]
    b0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b0de:	2b00      	cmp	r3, #0
    b0e0:	bf14      	ite	ne
    b0e2:	2301      	movne	r3, #1
    b0e4:	2300      	moveq	r3, #0
    b0e6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b0e8:	7cba      	ldrb	r2, [r7, #18]
    b0ea:	7cfb      	ldrb	r3, [r7, #19]
    b0ec:	4611      	mov	r1, r2
    b0ee:	4618      	mov	r0, r3
    b0f0:	4b13      	ldr	r3, [pc, #76]	; (b140 <_usb_d_dev_ep_stall+0x80>)
    b0f2:	4798      	blx	r3
    b0f4:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b0f6:	7cfb      	ldrb	r3, [r7, #19]
    b0f8:	2b04      	cmp	r3, #4
    b0fa:	d902      	bls.n	b102 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b0fc:	f06f 0311 	mvn.w	r3, #17
    b100:	e01a      	b.n	b138 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b102:	79bb      	ldrb	r3, [r7, #6]
    b104:	2b01      	cmp	r3, #1
    b106:	d106      	bne.n	b116 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b108:	7cbb      	ldrb	r3, [r7, #18]
    b10a:	4619      	mov	r1, r3
    b10c:	68f8      	ldr	r0, [r7, #12]
    b10e:	4b0d      	ldr	r3, [pc, #52]	; (b144 <_usb_d_dev_ep_stall+0x84>)
    b110:	4798      	blx	r3
    b112:	6178      	str	r0, [r7, #20]
    b114:	e00f      	b.n	b136 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b116:	79bb      	ldrb	r3, [r7, #6]
    b118:	2b00      	cmp	r3, #0
    b11a:	d106      	bne.n	b12a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b11c:	7cbb      	ldrb	r3, [r7, #18]
    b11e:	4619      	mov	r1, r3
    b120:	68f8      	ldr	r0, [r7, #12]
    b122:	4b09      	ldr	r3, [pc, #36]	; (b148 <_usb_d_dev_ep_stall+0x88>)
    b124:	4798      	blx	r3
    b126:	6178      	str	r0, [r7, #20]
    b128:	e005      	b.n	b136 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b12a:	7cbb      	ldrb	r3, [r7, #18]
    b12c:	4619      	mov	r1, r3
    b12e:	68f8      	ldr	r0, [r7, #12]
    b130:	4b06      	ldr	r3, [pc, #24]	; (b14c <_usb_d_dev_ep_stall+0x8c>)
    b132:	4798      	blx	r3
    b134:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b136:	697b      	ldr	r3, [r7, #20]
}
    b138:	4618      	mov	r0, r3
    b13a:	3718      	adds	r7, #24
    b13c:	46bd      	mov	sp, r7
    b13e:	bd80      	pop	{r7, pc}
    b140:	00009b61 	.word	0x00009b61
    b144:	0000af95 	.word	0x0000af95
    b148:	0000afe5 	.word	0x0000afe5
    b14c:	0000af65 	.word	0x0000af65

0000b150 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b150:	b580      	push	{r7, lr}
    b152:	b082      	sub	sp, #8
    b154:	af00      	add	r7, sp, #0
    b156:	6078      	str	r0, [r7, #4]
    b158:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b15a:	687b      	ldr	r3, [r7, #4]
    b15c:	7c9b      	ldrb	r3, [r3, #18]
    b15e:	2bff      	cmp	r3, #255	; 0xff
    b160:	d014      	beq.n	b18c <_usb_d_dev_trans_done+0x3c>
    b162:	687b      	ldr	r3, [r7, #4]
    b164:	7cdb      	ldrb	r3, [r3, #19]
    b166:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b16a:	b2db      	uxtb	r3, r3
    b16c:	2b00      	cmp	r3, #0
    b16e:	d00d      	beq.n	b18c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b170:	687a      	ldr	r2, [r7, #4]
    b172:	7cd3      	ldrb	r3, [r2, #19]
    b174:	f36f 1386 	bfc	r3, #6, #1
    b178:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b17a:	4b06      	ldr	r3, [pc, #24]	; (b194 <_usb_d_dev_trans_done+0x44>)
    b17c:	691b      	ldr	r3, [r3, #16]
    b17e:	687a      	ldr	r2, [r7, #4]
    b180:	7c90      	ldrb	r0, [r2, #18]
    b182:	687a      	ldr	r2, [r7, #4]
    b184:	6892      	ldr	r2, [r2, #8]
    b186:	6839      	ldr	r1, [r7, #0]
    b188:	4798      	blx	r3
    b18a:	e000      	b.n	b18e <_usb_d_dev_trans_done+0x3e>
		return;
    b18c:	bf00      	nop
}
    b18e:	3708      	adds	r7, #8
    b190:	46bd      	mov	sp, r7
    b192:	bd80      	pop	{r7, pc}
    b194:	20000c5c 	.word	0x20000c5c

0000b198 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b198:	b580      	push	{r7, lr}
    b19a:	b086      	sub	sp, #24
    b19c:	af00      	add	r7, sp, #0
    b19e:	60f8      	str	r0, [r7, #12]
    b1a0:	460b      	mov	r3, r1
    b1a2:	607a      	str	r2, [r7, #4]
    b1a4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b1a6:	68fb      	ldr	r3, [r7, #12]
    b1a8:	7c9b      	ldrb	r3, [r3, #18]
    b1aa:	f003 030f 	and.w	r3, r3, #15
    b1ae:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b1b0:	4b1f      	ldr	r3, [pc, #124]	; (b230 <_usb_d_dev_trans_stop+0x98>)
    b1b2:	881b      	ldrh	r3, [r3, #0]
    b1b4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b1b6:	68fb      	ldr	r3, [r7, #12]
    b1b8:	7c9b      	ldrb	r3, [r3, #18]
    b1ba:	2bff      	cmp	r3, #255	; 0xff
    b1bc:	d033      	beq.n	b226 <_usb_d_dev_trans_stop+0x8e>
    b1be:	68fb      	ldr	r3, [r7, #12]
    b1c0:	7cdb      	ldrb	r3, [r3, #19]
    b1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b1c6:	b2db      	uxtb	r3, r3
    b1c8:	2b00      	cmp	r3, #0
    b1ca:	d02c      	beq.n	b226 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b1cc:	7afb      	ldrb	r3, [r7, #11]
    b1ce:	2b00      	cmp	r3, #0
    b1d0:	d006      	beq.n	b1e0 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b1d2:	7dfb      	ldrb	r3, [r7, #23]
    b1d4:	2200      	movs	r2, #0
    b1d6:	2101      	movs	r1, #1
    b1d8:	4618      	mov	r0, r3
    b1da:	4b16      	ldr	r3, [pc, #88]	; (b234 <_usb_d_dev_trans_stop+0x9c>)
    b1dc:	4798      	blx	r3
    b1de:	e005      	b.n	b1ec <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b1e0:	7dfb      	ldrb	r3, [r7, #23]
    b1e2:	2200      	movs	r2, #0
    b1e4:	2100      	movs	r1, #0
    b1e6:	4618      	mov	r0, r3
    b1e8:	4b13      	ldr	r3, [pc, #76]	; (b238 <_usb_d_dev_trans_stop+0xa0>)
    b1ea:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b1ec:	7afb      	ldrb	r3, [r7, #11]
    b1ee:	f107 0218 	add.w	r2, r7, #24
    b1f2:	4413      	add	r3, r2
    b1f4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b1f8:	461a      	mov	r2, r3
    b1fa:	7dfb      	ldrb	r3, [r7, #23]
    b1fc:	4611      	mov	r1, r2
    b1fe:	4618      	mov	r0, r3
    b200:	4b0e      	ldr	r3, [pc, #56]	; (b23c <_usb_d_dev_trans_stop+0xa4>)
    b202:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b204:	7afb      	ldrb	r3, [r7, #11]
    b206:	f107 0218 	add.w	r2, r7, #24
    b20a:	4413      	add	r3, r2
    b20c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b210:	461a      	mov	r2, r3
    b212:	7dfb      	ldrb	r3, [r7, #23]
    b214:	4611      	mov	r1, r2
    b216:	4618      	mov	r0, r3
    b218:	4b09      	ldr	r3, [pc, #36]	; (b240 <_usb_d_dev_trans_stop+0xa8>)
    b21a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b21c:	6879      	ldr	r1, [r7, #4]
    b21e:	68f8      	ldr	r0, [r7, #12]
    b220:	4b08      	ldr	r3, [pc, #32]	; (b244 <_usb_d_dev_trans_stop+0xac>)
    b222:	4798      	blx	r3
    b224:	e000      	b.n	b228 <_usb_d_dev_trans_stop+0x90>
		return;
    b226:	bf00      	nop
}
    b228:	3718      	adds	r7, #24
    b22a:	46bd      	mov	sp, r7
    b22c:	bd80      	pop	{r7, pc}
    b22e:	bf00      	nop
    b230:	00011e74 	.word	0x00011e74
    b234:	00009a4d 	.word	0x00009a4d
    b238:	00009aa5 	.word	0x00009aa5
    b23c:	00009555 	.word	0x00009555
    b240:	000095a5 	.word	0x000095a5
    b244:	0000b151 	.word	0x0000b151

0000b248 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b248:	b580      	push	{r7, lr}
    b24a:	b086      	sub	sp, #24
    b24c:	af00      	add	r7, sp, #0
    b24e:	4603      	mov	r3, r0
    b250:	6039      	str	r1, [r7, #0]
    b252:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b254:	79fb      	ldrb	r3, [r7, #7]
    b256:	f003 030f 	and.w	r3, r3, #15
    b25a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b25c:	7dfb      	ldrb	r3, [r7, #23]
    b25e:	015b      	lsls	r3, r3, #5
    b260:	4a1e      	ldr	r2, [pc, #120]	; (b2dc <_usb_d_dev_ep_read_req+0x94>)
    b262:	4413      	add	r3, r2
    b264:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b266:	693b      	ldr	r3, [r7, #16]
    b268:	681b      	ldr	r3, [r3, #0]
    b26a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b26c:	693b      	ldr	r3, [r7, #16]
    b26e:	685b      	ldr	r3, [r3, #4]
    b270:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b274:	b29b      	uxth	r3, r3
    b276:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b278:	7dfb      	ldrb	r3, [r7, #23]
    b27a:	2b04      	cmp	r3, #4
    b27c:	d802      	bhi.n	b284 <_usb_d_dev_ep_read_req+0x3c>
    b27e:	683b      	ldr	r3, [r7, #0]
    b280:	2b00      	cmp	r3, #0
    b282:	d102      	bne.n	b28a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b284:	f06f 0311 	mvn.w	r3, #17
    b288:	e023      	b.n	b2d2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b28a:	7dfb      	ldrb	r3, [r7, #23]
    b28c:	4618      	mov	r0, r3
    b28e:	4b14      	ldr	r3, [pc, #80]	; (b2e0 <_usb_d_dev_ep_read_req+0x98>)
    b290:	4798      	blx	r3
    b292:	4603      	mov	r3, r0
    b294:	f083 0301 	eor.w	r3, r3, #1
    b298:	b2db      	uxtb	r3, r3
    b29a:	2b00      	cmp	r3, #0
    b29c:	d002      	beq.n	b2a4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b29e:	f06f 0312 	mvn.w	r3, #18
    b2a2:	e016      	b.n	b2d2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b2a4:	7dfb      	ldrb	r3, [r7, #23]
    b2a6:	4618      	mov	r0, r3
    b2a8:	4b0e      	ldr	r3, [pc, #56]	; (b2e4 <_usb_d_dev_ep_read_req+0x9c>)
    b2aa:	4798      	blx	r3
    b2ac:	4603      	mov	r3, r0
    b2ae:	f083 0301 	eor.w	r3, r3, #1
    b2b2:	b2db      	uxtb	r3, r3
    b2b4:	2b00      	cmp	r3, #0
    b2b6:	d001      	beq.n	b2bc <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b2b8:	2300      	movs	r3, #0
    b2ba:	e00a      	b.n	b2d2 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b2bc:	68fb      	ldr	r3, [r7, #12]
    b2be:	2208      	movs	r2, #8
    b2c0:	4619      	mov	r1, r3
    b2c2:	6838      	ldr	r0, [r7, #0]
    b2c4:	4b08      	ldr	r3, [pc, #32]	; (b2e8 <_usb_d_dev_ep_read_req+0xa0>)
    b2c6:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b2c8:	7dfb      	ldrb	r3, [r7, #23]
    b2ca:	4618      	mov	r0, r3
    b2cc:	4b07      	ldr	r3, [pc, #28]	; (b2ec <_usb_d_dev_ep_read_req+0xa4>)
    b2ce:	4798      	blx	r3

	return bytes;
    b2d0:	897b      	ldrh	r3, [r7, #10]
}
    b2d2:	4618      	mov	r0, r3
    b2d4:	3718      	adds	r7, #24
    b2d6:	46bd      	mov	sp, r7
    b2d8:	bd80      	pop	{r7, pc}
    b2da:	bf00      	nop
    b2dc:	20000d24 	.word	0x20000d24
    b2e0:	000095cd 	.word	0x000095cd
    b2e4:	00009779 	.word	0x00009779
    b2e8:	000116b5 	.word	0x000116b5
    b2ec:	000097a9 	.word	0x000097a9

0000b2f0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b2f0:	b580      	push	{r7, lr}
    b2f2:	b086      	sub	sp, #24
    b2f4:	af00      	add	r7, sp, #0
    b2f6:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b2f8:	687b      	ldr	r3, [r7, #4]
    b2fa:	7a1b      	ldrb	r3, [r3, #8]
    b2fc:	f003 030f 	and.w	r3, r3, #15
    b300:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b302:	687b      	ldr	r3, [r7, #4]
    b304:	7a1b      	ldrb	r3, [r3, #8]
    b306:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b30a:	2b00      	cmp	r3, #0
    b30c:	bf14      	ite	ne
    b30e:	2301      	movne	r3, #1
    b310:	2300      	moveq	r3, #0
    b312:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b314:	7d7a      	ldrb	r2, [r7, #21]
    b316:	7dbb      	ldrb	r3, [r7, #22]
    b318:	4611      	mov	r1, r2
    b31a:	4618      	mov	r0, r3
    b31c:	4b5f      	ldr	r3, [pc, #380]	; (b49c <_usb_d_dev_ep_trans+0x1ac>)
    b31e:	4798      	blx	r3
    b320:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b322:	693b      	ldr	r3, [r7, #16]
    b324:	8a1b      	ldrh	r3, [r3, #16]
    b326:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b32a:	4293      	cmp	r3, r2
    b32c:	d004      	beq.n	b338 <_usb_d_dev_ep_trans+0x48>
    b32e:	693b      	ldr	r3, [r7, #16]
    b330:	8a1b      	ldrh	r3, [r3, #16]
    b332:	3b01      	subs	r3, #1
    b334:	b29b      	uxth	r3, r3
    b336:	e001      	b.n	b33c <_usb_d_dev_ep_trans+0x4c>
    b338:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b33c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b33e:	687b      	ldr	r3, [r7, #4]
    b340:	685a      	ldr	r2, [r3, #4]
    b342:	89fb      	ldrh	r3, [r7, #14]
    b344:	4013      	ands	r3, r2
    b346:	2b00      	cmp	r3, #0
    b348:	bf14      	ite	ne
    b34a:	2301      	movne	r3, #1
    b34c:	2300      	moveq	r3, #0
    b34e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b350:	2300      	movs	r3, #0
    b352:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b354:	7dbb      	ldrb	r3, [r7, #22]
    b356:	2b04      	cmp	r3, #4
    b358:	d902      	bls.n	b360 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b35a:	f06f 0311 	mvn.w	r3, #17
    b35e:	e098      	b.n	b492 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b360:	687b      	ldr	r3, [r7, #4]
    b362:	681b      	ldr	r3, [r3, #0]
    b364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b368:	d31a      	bcc.n	b3a0 <_usb_d_dev_ep_trans+0xb0>
    b36a:	687b      	ldr	r3, [r7, #4]
    b36c:	681b      	ldr	r3, [r3, #0]
    b36e:	461a      	mov	r2, r3
    b370:	687b      	ldr	r3, [r7, #4]
    b372:	685b      	ldr	r3, [r3, #4]
    b374:	4413      	add	r3, r2
    b376:	4a4a      	ldr	r2, [pc, #296]	; (b4a0 <_usb_d_dev_ep_trans+0x1b0>)
    b378:	4293      	cmp	r3, r2
    b37a:	d811      	bhi.n	b3a0 <_usb_d_dev_ep_trans+0xb0>
    b37c:	687b      	ldr	r3, [r7, #4]
    b37e:	681b      	ldr	r3, [r3, #0]
    b380:	f003 0303 	and.w	r3, r3, #3
    b384:	2b00      	cmp	r3, #0
    b386:	d10b      	bne.n	b3a0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b388:	7d7b      	ldrb	r3, [r7, #21]
    b38a:	f083 0301 	eor.w	r3, r3, #1
    b38e:	b2db      	uxtb	r3, r3
    b390:	2b00      	cmp	r3, #0
    b392:	d00e      	beq.n	b3b2 <_usb_d_dev_ep_trans+0xc2>
    b394:	687b      	ldr	r3, [r7, #4]
    b396:	685b      	ldr	r3, [r3, #4]
    b398:	693a      	ldr	r2, [r7, #16]
    b39a:	8a12      	ldrh	r2, [r2, #16]
    b39c:	4293      	cmp	r3, r2
    b39e:	d208      	bcs.n	b3b2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b3a0:	693b      	ldr	r3, [r7, #16]
    b3a2:	68db      	ldr	r3, [r3, #12]
    b3a4:	2b00      	cmp	r3, #0
    b3a6:	d102      	bne.n	b3ae <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b3a8:	f06f 0312 	mvn.w	r3, #18
    b3ac:	e071      	b.n	b492 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b3ae:	2301      	movs	r3, #1
    b3b0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b3b2:	7d7b      	ldrb	r3, [r7, #21]
    b3b4:	f083 0301 	eor.w	r3, r3, #1
    b3b8:	b2db      	uxtb	r3, r3
    b3ba:	2b00      	cmp	r3, #0
    b3bc:	d009      	beq.n	b3d2 <_usb_d_dev_ep_trans+0xe2>
    b3be:	7b7b      	ldrb	r3, [r7, #13]
    b3c0:	2b00      	cmp	r3, #0
    b3c2:	d006      	beq.n	b3d2 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b3c4:	693b      	ldr	r3, [r7, #16]
    b3c6:	68db      	ldr	r3, [r3, #12]
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	d102      	bne.n	b3d2 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b3cc:	f06f 0311 	mvn.w	r3, #17
    b3d0:	e05f      	b.n	b492 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b3d2:	693b      	ldr	r3, [r7, #16]
    b3d4:	7cdb      	ldrb	r3, [r3, #19]
    b3d6:	f003 0308 	and.w	r3, r3, #8
    b3da:	b2db      	uxtb	r3, r3
    b3dc:	2b00      	cmp	r3, #0
    b3de:	d001      	beq.n	b3e4 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b3e0:	2302      	movs	r3, #2
    b3e2:	e056      	b.n	b492 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b3e4:	f107 0308 	add.w	r3, r7, #8
    b3e8:	4618      	mov	r0, r3
    b3ea:	4b2e      	ldr	r3, [pc, #184]	; (b4a4 <_usb_d_dev_ep_trans+0x1b4>)
    b3ec:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b3ee:	693b      	ldr	r3, [r7, #16]
    b3f0:	7cdb      	ldrb	r3, [r3, #19]
    b3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b3f6:	b2db      	uxtb	r3, r3
    b3f8:	2b00      	cmp	r3, #0
    b3fa:	d006      	beq.n	b40a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b3fc:	f107 0308 	add.w	r3, r7, #8
    b400:	4618      	mov	r0, r3
    b402:	4b29      	ldr	r3, [pc, #164]	; (b4a8 <_usb_d_dev_ep_trans+0x1b8>)
    b404:	4798      	blx	r3
		return USB_BUSY;
    b406:	2301      	movs	r3, #1
    b408:	e043      	b.n	b492 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b40a:	693a      	ldr	r2, [r7, #16]
    b40c:	7cd3      	ldrb	r3, [r2, #19]
    b40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b412:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b414:	f107 0308 	add.w	r3, r7, #8
    b418:	4618      	mov	r0, r3
    b41a:	4b23      	ldr	r3, [pc, #140]	; (b4a8 <_usb_d_dev_ep_trans+0x1b8>)
    b41c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b41e:	687b      	ldr	r3, [r7, #4]
    b420:	681a      	ldr	r2, [r3, #0]
    b422:	693b      	ldr	r3, [r7, #16]
    b424:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b426:	687b      	ldr	r3, [r7, #4]
    b428:	685a      	ldr	r2, [r3, #4]
    b42a:	693b      	ldr	r3, [r7, #16]
    b42c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b42e:	693b      	ldr	r3, [r7, #16]
    b430:	2200      	movs	r2, #0
    b432:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b434:	693a      	ldr	r2, [r7, #16]
    b436:	7cd3      	ldrb	r3, [r2, #19]
    b438:	7d79      	ldrb	r1, [r7, #21]
    b43a:	f361 13c7 	bfi	r3, r1, #7, #1
    b43e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b440:	693a      	ldr	r2, [r7, #16]
    b442:	7cd3      	ldrb	r3, [r2, #19]
    b444:	7df9      	ldrb	r1, [r7, #23]
    b446:	f361 1345 	bfi	r3, r1, #5, #1
    b44a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b44c:	687b      	ldr	r3, [r7, #4]
    b44e:	7a5b      	ldrb	r3, [r3, #9]
    b450:	2b00      	cmp	r3, #0
    b452:	d007      	beq.n	b464 <_usb_d_dev_ep_trans+0x174>
    b454:	7b7b      	ldrb	r3, [r7, #13]
    b456:	f083 0301 	eor.w	r3, r3, #1
    b45a:	b2db      	uxtb	r3, r3
    b45c:	2b00      	cmp	r3, #0
    b45e:	d001      	beq.n	b464 <_usb_d_dev_ep_trans+0x174>
    b460:	2301      	movs	r3, #1
    b462:	e000      	b.n	b466 <_usb_d_dev_ep_trans+0x176>
    b464:	2300      	movs	r3, #0
    b466:	b2db      	uxtb	r3, r3
    b468:	f003 0301 	and.w	r3, r3, #1
    b46c:	b2d9      	uxtb	r1, r3
    b46e:	693a      	ldr	r2, [r7, #16]
    b470:	7cd3      	ldrb	r3, [r2, #19]
    b472:	f361 1304 	bfi	r3, r1, #4, #1
    b476:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b478:	7d7b      	ldrb	r3, [r7, #21]
    b47a:	2b00      	cmp	r3, #0
    b47c:	d004      	beq.n	b488 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b47e:	2100      	movs	r1, #0
    b480:	6938      	ldr	r0, [r7, #16]
    b482:	4b0a      	ldr	r3, [pc, #40]	; (b4ac <_usb_d_dev_ep_trans+0x1bc>)
    b484:	4798      	blx	r3
    b486:	e003      	b.n	b490 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b488:	2100      	movs	r1, #0
    b48a:	6938      	ldr	r0, [r7, #16]
    b48c:	4b08      	ldr	r3, [pc, #32]	; (b4b0 <_usb_d_dev_ep_trans+0x1c0>)
    b48e:	4798      	blx	r3
	}

	return ERR_NONE;
    b490:	2300      	movs	r3, #0
}
    b492:	4618      	mov	r0, r3
    b494:	3718      	adds	r7, #24
    b496:	46bd      	mov	sp, r7
    b498:	bd80      	pop	{r7, pc}
    b49a:	bf00      	nop
    b49c:	00009b61 	.word	0x00009b61
    b4a0:	20041fff 	.word	0x20041fff
    b4a4:	0000bcbd 	.word	0x0000bcbd
    b4a8:	0000bce3 	.word	0x0000bce3
    b4ac:	00009e29 	.word	0x00009e29
    b4b0:	0000a041 	.word	0x0000a041

0000b4b4 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b4b4:	b580      	push	{r7, lr}
    b4b6:	b084      	sub	sp, #16
    b4b8:	af00      	add	r7, sp, #0
    b4ba:	4603      	mov	r3, r0
    b4bc:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b4be:	79fb      	ldrb	r3, [r7, #7]
    b4c0:	f003 030f 	and.w	r3, r3, #15
    b4c4:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b4c6:	79fb      	ldrb	r3, [r7, #7]
    b4c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b4cc:	2b00      	cmp	r3, #0
    b4ce:	bf14      	ite	ne
    b4d0:	2301      	movne	r3, #1
    b4d2:	2300      	moveq	r3, #0
    b4d4:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b4d6:	7bba      	ldrb	r2, [r7, #14]
    b4d8:	7bfb      	ldrb	r3, [r7, #15]
    b4da:	4611      	mov	r1, r2
    b4dc:	4618      	mov	r0, r3
    b4de:	4b08      	ldr	r3, [pc, #32]	; (b500 <_usb_d_dev_ep_abort+0x4c>)
    b4e0:	4798      	blx	r3
    b4e2:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b4e4:	7bfb      	ldrb	r3, [r7, #15]
    b4e6:	2b04      	cmp	r3, #4
    b4e8:	d806      	bhi.n	b4f8 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b4ea:	7bbb      	ldrb	r3, [r7, #14]
    b4ec:	2202      	movs	r2, #2
    b4ee:	4619      	mov	r1, r3
    b4f0:	68b8      	ldr	r0, [r7, #8]
    b4f2:	4b04      	ldr	r3, [pc, #16]	; (b504 <_usb_d_dev_ep_abort+0x50>)
    b4f4:	4798      	blx	r3
    b4f6:	e000      	b.n	b4fa <_usb_d_dev_ep_abort+0x46>
		return;
    b4f8:	bf00      	nop
}
    b4fa:	3710      	adds	r7, #16
    b4fc:	46bd      	mov	sp, r7
    b4fe:	bd80      	pop	{r7, pc}
    b500:	00009b61 	.word	0x00009b61
    b504:	0000b199 	.word	0x0000b199

0000b508 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b508:	b480      	push	{r7}
    b50a:	b085      	sub	sp, #20
    b50c:	af00      	add	r7, sp, #0
    b50e:	4603      	mov	r3, r0
    b510:	6039      	str	r1, [r7, #0]
    b512:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b514:	683b      	ldr	r3, [r7, #0]
    b516:	2b00      	cmp	r3, #0
    b518:	d001      	beq.n	b51e <_usb_d_dev_register_callback+0x16>
    b51a:	683b      	ldr	r3, [r7, #0]
    b51c:	e000      	b.n	b520 <_usb_d_dev_register_callback+0x18>
    b51e:	4b0a      	ldr	r3, [pc, #40]	; (b548 <_usb_d_dev_register_callback+0x40>)
    b520:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b522:	79fb      	ldrb	r3, [r7, #7]
    b524:	2b01      	cmp	r3, #1
    b526:	d103      	bne.n	b530 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b528:	4a08      	ldr	r2, [pc, #32]	; (b54c <_usb_d_dev_register_callback+0x44>)
    b52a:	68fb      	ldr	r3, [r7, #12]
    b52c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b52e:	e005      	b.n	b53c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b530:	79fb      	ldrb	r3, [r7, #7]
    b532:	2b00      	cmp	r3, #0
    b534:	d102      	bne.n	b53c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b536:	4a05      	ldr	r2, [pc, #20]	; (b54c <_usb_d_dev_register_callback+0x44>)
    b538:	68fb      	ldr	r3, [r7, #12]
    b53a:	6013      	str	r3, [r2, #0]
}
    b53c:	bf00      	nop
    b53e:	3714      	adds	r7, #20
    b540:	46bd      	mov	sp, r7
    b542:	f85d 7b04 	ldr.w	r7, [sp], #4
    b546:	4770      	bx	lr
    b548:	000093e9 	.word	0x000093e9
    b54c:	20000c5c 	.word	0x20000c5c

0000b550 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b550:	b480      	push	{r7}
    b552:	b085      	sub	sp, #20
    b554:	af00      	add	r7, sp, #0
    b556:	4603      	mov	r3, r0
    b558:	6039      	str	r1, [r7, #0]
    b55a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b55c:	683b      	ldr	r3, [r7, #0]
    b55e:	2b00      	cmp	r3, #0
    b560:	d001      	beq.n	b566 <_usb_d_dev_register_ep_callback+0x16>
    b562:	683b      	ldr	r3, [r7, #0]
    b564:	e000      	b.n	b568 <_usb_d_dev_register_ep_callback+0x18>
    b566:	4b0e      	ldr	r3, [pc, #56]	; (b5a0 <_usb_d_dev_register_ep_callback+0x50>)
    b568:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b56a:	79fb      	ldrb	r3, [r7, #7]
    b56c:	2b00      	cmp	r3, #0
    b56e:	d103      	bne.n	b578 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b570:	4a0c      	ldr	r2, [pc, #48]	; (b5a4 <_usb_d_dev_register_ep_callback+0x54>)
    b572:	68fb      	ldr	r3, [r7, #12]
    b574:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b576:	e00c      	b.n	b592 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b578:	79fb      	ldrb	r3, [r7, #7]
    b57a:	2b01      	cmp	r3, #1
    b57c:	d103      	bne.n	b586 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b57e:	4a09      	ldr	r2, [pc, #36]	; (b5a4 <_usb_d_dev_register_ep_callback+0x54>)
    b580:	68fb      	ldr	r3, [r7, #12]
    b582:	60d3      	str	r3, [r2, #12]
}
    b584:	e005      	b.n	b592 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b586:	79fb      	ldrb	r3, [r7, #7]
    b588:	2b02      	cmp	r3, #2
    b58a:	d102      	bne.n	b592 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b58c:	4a05      	ldr	r2, [pc, #20]	; (b5a4 <_usb_d_dev_register_ep_callback+0x54>)
    b58e:	68fb      	ldr	r3, [r7, #12]
    b590:	6113      	str	r3, [r2, #16]
}
    b592:	bf00      	nop
    b594:	3714      	adds	r7, #20
    b596:	46bd      	mov	sp, r7
    b598:	f85d 7b04 	ldr.w	r7, [sp], #4
    b59c:	4770      	bx	lr
    b59e:	bf00      	nop
    b5a0:	000093e9 	.word	0x000093e9
    b5a4:	20000c5c 	.word	0x20000c5c

0000b5a8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b5a8:	b580      	push	{r7, lr}
    b5aa:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b5ac:	4b01      	ldr	r3, [pc, #4]	; (b5b4 <USB_0_Handler+0xc>)
    b5ae:	4798      	blx	r3
}
    b5b0:	bf00      	nop
    b5b2:	bd80      	pop	{r7, pc}
    b5b4:	0000a819 	.word	0x0000a819

0000b5b8 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b5b8:	b580      	push	{r7, lr}
    b5ba:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b5bc:	4b01      	ldr	r3, [pc, #4]	; (b5c4 <USB_1_Handler+0xc>)
    b5be:	4798      	blx	r3
}
    b5c0:	bf00      	nop
    b5c2:	bd80      	pop	{r7, pc}
    b5c4:	0000a819 	.word	0x0000a819

0000b5c8 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b5c8:	b580      	push	{r7, lr}
    b5ca:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b5cc:	4b01      	ldr	r3, [pc, #4]	; (b5d4 <USB_2_Handler+0xc>)
    b5ce:	4798      	blx	r3
}
    b5d0:	bf00      	nop
    b5d2:	bd80      	pop	{r7, pc}
    b5d4:	0000a819 	.word	0x0000a819

0000b5d8 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b5d8:	b580      	push	{r7, lr}
    b5da:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b5dc:	4b01      	ldr	r3, [pc, #4]	; (b5e4 <USB_3_Handler+0xc>)
    b5de:	4798      	blx	r3
}
    b5e0:	bf00      	nop
    b5e2:	bd80      	pop	{r7, pc}
    b5e4:	0000a819 	.word	0x0000a819

0000b5e8 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b5e8:	b480      	push	{r7}
    b5ea:	b083      	sub	sp, #12
    b5ec:	af00      	add	r7, sp, #0
    b5ee:	6078      	str	r0, [r7, #4]
    b5f0:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b5f2:	bf00      	nop
    b5f4:	687b      	ldr	r3, [r7, #4]
    b5f6:	689a      	ldr	r2, [r3, #8]
    b5f8:	683b      	ldr	r3, [r7, #0]
    b5fa:	4013      	ands	r3, r2
    b5fc:	2b00      	cmp	r3, #0
    b5fe:	d1f9      	bne.n	b5f4 <hri_wdt_wait_for_sync+0xc>
	};
}
    b600:	bf00      	nop
    b602:	370c      	adds	r7, #12
    b604:	46bd      	mov	sp, r7
    b606:	f85d 7b04 	ldr.w	r7, [sp], #4
    b60a:	4770      	bx	lr

0000b60c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b60c:	b580      	push	{r7, lr}
    b60e:	b084      	sub	sp, #16
    b610:	af00      	add	r7, sp, #0
    b612:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b614:	210e      	movs	r1, #14
    b616:	6878      	ldr	r0, [r7, #4]
    b618:	4b0a      	ldr	r3, [pc, #40]	; (b644 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b61a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b61c:	687b      	ldr	r3, [r7, #4]
    b61e:	781b      	ldrb	r3, [r3, #0]
    b620:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b622:	7bfb      	ldrb	r3, [r7, #15]
    b624:	085b      	lsrs	r3, r3, #1
    b626:	b2db      	uxtb	r3, r3
    b628:	f003 0301 	and.w	r3, r3, #1
    b62c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b62e:	7bfb      	ldrb	r3, [r7, #15]
    b630:	2b00      	cmp	r3, #0
    b632:	bf14      	ite	ne
    b634:	2301      	movne	r3, #1
    b636:	2300      	moveq	r3, #0
    b638:	b2db      	uxtb	r3, r3
}
    b63a:	4618      	mov	r0, r3
    b63c:	3710      	adds	r7, #16
    b63e:	46bd      	mov	sp, r7
    b640:	bd80      	pop	{r7, pc}
    b642:	bf00      	nop
    b644:	0000b5e9 	.word	0x0000b5e9

0000b648 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b648:	b580      	push	{r7, lr}
    b64a:	b082      	sub	sp, #8
    b64c:	af00      	add	r7, sp, #0
    b64e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b650:	687b      	ldr	r3, [r7, #4]
    b652:	781b      	ldrb	r3, [r3, #0]
    b654:	b2db      	uxtb	r3, r3
    b656:	f023 0304 	bic.w	r3, r3, #4
    b65a:	b2da      	uxtb	r2, r3
    b65c:	687b      	ldr	r3, [r7, #4]
    b65e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b660:	210e      	movs	r1, #14
    b662:	6878      	ldr	r0, [r7, #4]
    b664:	4b02      	ldr	r3, [pc, #8]	; (b670 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b666:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b668:	bf00      	nop
    b66a:	3708      	adds	r7, #8
    b66c:	46bd      	mov	sp, r7
    b66e:	bd80      	pop	{r7, pc}
    b670:	0000b5e9 	.word	0x0000b5e9

0000b674 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b674:	b580      	push	{r7, lr}
    b676:	b084      	sub	sp, #16
    b678:	af00      	add	r7, sp, #0
    b67a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b67c:	210e      	movs	r1, #14
    b67e:	6878      	ldr	r0, [r7, #4]
    b680:	4b08      	ldr	r3, [pc, #32]	; (b6a4 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b682:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b684:	687b      	ldr	r3, [r7, #4]
    b686:	781b      	ldrb	r3, [r3, #0]
    b688:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b68a:	7bfb      	ldrb	r3, [r7, #15]
    b68c:	09db      	lsrs	r3, r3, #7
    b68e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b690:	7bfb      	ldrb	r3, [r7, #15]
    b692:	2b00      	cmp	r3, #0
    b694:	bf14      	ite	ne
    b696:	2301      	movne	r3, #1
    b698:	2300      	moveq	r3, #0
    b69a:	b2db      	uxtb	r3, r3
}
    b69c:	4618      	mov	r0, r3
    b69e:	3710      	adds	r7, #16
    b6a0:	46bd      	mov	sp, r7
    b6a2:	bd80      	pop	{r7, pc}
    b6a4:	0000b5e9 	.word	0x0000b5e9

0000b6a8 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b6a8:	b480      	push	{r7}
    b6aa:	b085      	sub	sp, #20
    b6ac:	af00      	add	r7, sp, #0
    b6ae:	6078      	str	r0, [r7, #4]
    b6b0:	460b      	mov	r3, r1
    b6b2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b6b4:	687b      	ldr	r3, [r7, #4]
    b6b6:	785b      	ldrb	r3, [r3, #1]
    b6b8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b6ba:	7bfb      	ldrb	r3, [r7, #15]
    b6bc:	f023 030f 	bic.w	r3, r3, #15
    b6c0:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b6c2:	78fb      	ldrb	r3, [r7, #3]
    b6c4:	f003 030f 	and.w	r3, r3, #15
    b6c8:	b2da      	uxtb	r2, r3
    b6ca:	7bfb      	ldrb	r3, [r7, #15]
    b6cc:	4313      	orrs	r3, r2
    b6ce:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b6d0:	687b      	ldr	r3, [r7, #4]
    b6d2:	7bfa      	ldrb	r2, [r7, #15]
    b6d4:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b6d6:	bf00      	nop
    b6d8:	3714      	adds	r7, #20
    b6da:	46bd      	mov	sp, r7
    b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6e0:	4770      	bx	lr
	...

0000b6e4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b6e4:	b580      	push	{r7, lr}
    b6e6:	b082      	sub	sp, #8
    b6e8:	af00      	add	r7, sp, #0
    b6ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b6ec:	687b      	ldr	r3, [r7, #4]
    b6ee:	2b00      	cmp	r3, #0
    b6f0:	d005      	beq.n	b6fe <_wdt_init+0x1a>
    b6f2:	687b      	ldr	r3, [r7, #4]
    b6f4:	681b      	ldr	r3, [r3, #0]
    b6f6:	2b00      	cmp	r3, #0
    b6f8:	d001      	beq.n	b6fe <_wdt_init+0x1a>
    b6fa:	2301      	movs	r3, #1
    b6fc:	e000      	b.n	b700 <_wdt_init+0x1c>
    b6fe:	2300      	movs	r3, #0
    b700:	f003 0301 	and.w	r3, r3, #1
    b704:	b2db      	uxtb	r3, r3
    b706:	2250      	movs	r2, #80	; 0x50
    b708:	4913      	ldr	r1, [pc, #76]	; (b758 <_wdt_init+0x74>)
    b70a:	4618      	mov	r0, r3
    b70c:	4b13      	ldr	r3, [pc, #76]	; (b75c <_wdt_init+0x78>)
    b70e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b710:	687b      	ldr	r3, [r7, #4]
    b712:	681b      	ldr	r3, [r3, #0]
    b714:	4618      	mov	r0, r3
    b716:	4b12      	ldr	r3, [pc, #72]	; (b760 <_wdt_init+0x7c>)
    b718:	4798      	blx	r3
    b71a:	4603      	mov	r3, r0
    b71c:	2b00      	cmp	r3, #0
    b71e:	d107      	bne.n	b730 <_wdt_init+0x4c>
    b720:	687b      	ldr	r3, [r7, #4]
    b722:	681b      	ldr	r3, [r3, #0]
    b724:	4618      	mov	r0, r3
    b726:	4b0f      	ldr	r3, [pc, #60]	; (b764 <_wdt_init+0x80>)
    b728:	4798      	blx	r3
    b72a:	4603      	mov	r3, r0
    b72c:	2b00      	cmp	r3, #0
    b72e:	d002      	beq.n	b736 <_wdt_init+0x52>
		return ERR_DENIED;
    b730:	f06f 0310 	mvn.w	r3, #16
    b734:	e00b      	b.n	b74e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b736:	687b      	ldr	r3, [r7, #4]
    b738:	681b      	ldr	r3, [r3, #0]
    b73a:	4618      	mov	r0, r3
    b73c:	4b0a      	ldr	r3, [pc, #40]	; (b768 <_wdt_init+0x84>)
    b73e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b740:	687b      	ldr	r3, [r7, #4]
    b742:	681b      	ldr	r3, [r3, #0]
    b744:	210b      	movs	r1, #11
    b746:	4618      	mov	r0, r3
    b748:	4b08      	ldr	r3, [pc, #32]	; (b76c <_wdt_init+0x88>)
    b74a:	4798      	blx	r3
	}

	return ERR_NONE;
    b74c:	2300      	movs	r3, #0
}
    b74e:	4618      	mov	r0, r3
    b750:	3708      	adds	r7, #8
    b752:	46bd      	mov	sp, r7
    b754:	bd80      	pop	{r7, pc}
    b756:	bf00      	nop
    b758:	00011e78 	.word	0x00011e78
    b75c:	00003cad 	.word	0x00003cad
    b760:	0000b675 	.word	0x0000b675
    b764:	0000b60d 	.word	0x0000b60d
    b768:	0000b649 	.word	0x0000b649
    b76c:	0000b6a9 	.word	0x0000b6a9

0000b770 <hri_port_set_DIR_reg>:
{
    b770:	b480      	push	{r7}
    b772:	b085      	sub	sp, #20
    b774:	af00      	add	r7, sp, #0
    b776:	60f8      	str	r0, [r7, #12]
    b778:	460b      	mov	r3, r1
    b77a:	607a      	str	r2, [r7, #4]
    b77c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b77e:	7afb      	ldrb	r3, [r7, #11]
    b780:	68fa      	ldr	r2, [r7, #12]
    b782:	01db      	lsls	r3, r3, #7
    b784:	4413      	add	r3, r2
    b786:	3308      	adds	r3, #8
    b788:	687a      	ldr	r2, [r7, #4]
    b78a:	601a      	str	r2, [r3, #0]
}
    b78c:	bf00      	nop
    b78e:	3714      	adds	r7, #20
    b790:	46bd      	mov	sp, r7
    b792:	f85d 7b04 	ldr.w	r7, [sp], #4
    b796:	4770      	bx	lr

0000b798 <hri_port_clear_DIR_reg>:
{
    b798:	b480      	push	{r7}
    b79a:	b085      	sub	sp, #20
    b79c:	af00      	add	r7, sp, #0
    b79e:	60f8      	str	r0, [r7, #12]
    b7a0:	460b      	mov	r3, r1
    b7a2:	607a      	str	r2, [r7, #4]
    b7a4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b7a6:	7afb      	ldrb	r3, [r7, #11]
    b7a8:	68fa      	ldr	r2, [r7, #12]
    b7aa:	01db      	lsls	r3, r3, #7
    b7ac:	4413      	add	r3, r2
    b7ae:	3304      	adds	r3, #4
    b7b0:	687a      	ldr	r2, [r7, #4]
    b7b2:	601a      	str	r2, [r3, #0]
}
    b7b4:	bf00      	nop
    b7b6:	3714      	adds	r7, #20
    b7b8:	46bd      	mov	sp, r7
    b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7be:	4770      	bx	lr

0000b7c0 <hri_port_set_OUT_reg>:
{
    b7c0:	b480      	push	{r7}
    b7c2:	b085      	sub	sp, #20
    b7c4:	af00      	add	r7, sp, #0
    b7c6:	60f8      	str	r0, [r7, #12]
    b7c8:	460b      	mov	r3, r1
    b7ca:	607a      	str	r2, [r7, #4]
    b7cc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b7ce:	7afb      	ldrb	r3, [r7, #11]
    b7d0:	68fa      	ldr	r2, [r7, #12]
    b7d2:	01db      	lsls	r3, r3, #7
    b7d4:	4413      	add	r3, r2
    b7d6:	3318      	adds	r3, #24
    b7d8:	687a      	ldr	r2, [r7, #4]
    b7da:	601a      	str	r2, [r3, #0]
}
    b7dc:	bf00      	nop
    b7de:	3714      	adds	r7, #20
    b7e0:	46bd      	mov	sp, r7
    b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7e6:	4770      	bx	lr

0000b7e8 <hri_port_clear_OUT_reg>:
{
    b7e8:	b480      	push	{r7}
    b7ea:	b085      	sub	sp, #20
    b7ec:	af00      	add	r7, sp, #0
    b7ee:	60f8      	str	r0, [r7, #12]
    b7f0:	460b      	mov	r3, r1
    b7f2:	607a      	str	r2, [r7, #4]
    b7f4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b7f6:	7afb      	ldrb	r3, [r7, #11]
    b7f8:	68fa      	ldr	r2, [r7, #12]
    b7fa:	01db      	lsls	r3, r3, #7
    b7fc:	4413      	add	r3, r2
    b7fe:	3314      	adds	r3, #20
    b800:	687a      	ldr	r2, [r7, #4]
    b802:	601a      	str	r2, [r3, #0]
}
    b804:	bf00      	nop
    b806:	3714      	adds	r7, #20
    b808:	46bd      	mov	sp, r7
    b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b80e:	4770      	bx	lr

0000b810 <hri_port_write_PMUX_PMUXE_bf>:
{
    b810:	b480      	push	{r7}
    b812:	b085      	sub	sp, #20
    b814:	af00      	add	r7, sp, #0
    b816:	6078      	str	r0, [r7, #4]
    b818:	4608      	mov	r0, r1
    b81a:	4611      	mov	r1, r2
    b81c:	461a      	mov	r2, r3
    b81e:	4603      	mov	r3, r0
    b820:	70fb      	strb	r3, [r7, #3]
    b822:	460b      	mov	r3, r1
    b824:	70bb      	strb	r3, [r7, #2]
    b826:	4613      	mov	r3, r2
    b828:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b82a:	78fa      	ldrb	r2, [r7, #3]
    b82c:	78bb      	ldrb	r3, [r7, #2]
    b82e:	6879      	ldr	r1, [r7, #4]
    b830:	01d2      	lsls	r2, r2, #7
    b832:	440a      	add	r2, r1
    b834:	4413      	add	r3, r2
    b836:	3330      	adds	r3, #48	; 0x30
    b838:	781b      	ldrb	r3, [r3, #0]
    b83a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b83c:	7bfb      	ldrb	r3, [r7, #15]
    b83e:	f023 030f 	bic.w	r3, r3, #15
    b842:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b844:	787b      	ldrb	r3, [r7, #1]
    b846:	f003 030f 	and.w	r3, r3, #15
    b84a:	b2da      	uxtb	r2, r3
    b84c:	7bfb      	ldrb	r3, [r7, #15]
    b84e:	4313      	orrs	r3, r2
    b850:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b852:	78fa      	ldrb	r2, [r7, #3]
    b854:	78bb      	ldrb	r3, [r7, #2]
    b856:	6879      	ldr	r1, [r7, #4]
    b858:	01d2      	lsls	r2, r2, #7
    b85a:	440a      	add	r2, r1
    b85c:	4413      	add	r3, r2
    b85e:	3330      	adds	r3, #48	; 0x30
    b860:	7bfa      	ldrb	r2, [r7, #15]
    b862:	701a      	strb	r2, [r3, #0]
}
    b864:	bf00      	nop
    b866:	3714      	adds	r7, #20
    b868:	46bd      	mov	sp, r7
    b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b86e:	4770      	bx	lr

0000b870 <hri_port_write_PMUX_PMUXO_bf>:
{
    b870:	b480      	push	{r7}
    b872:	b085      	sub	sp, #20
    b874:	af00      	add	r7, sp, #0
    b876:	6078      	str	r0, [r7, #4]
    b878:	4608      	mov	r0, r1
    b87a:	4611      	mov	r1, r2
    b87c:	461a      	mov	r2, r3
    b87e:	4603      	mov	r3, r0
    b880:	70fb      	strb	r3, [r7, #3]
    b882:	460b      	mov	r3, r1
    b884:	70bb      	strb	r3, [r7, #2]
    b886:	4613      	mov	r3, r2
    b888:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b88a:	78fa      	ldrb	r2, [r7, #3]
    b88c:	78bb      	ldrb	r3, [r7, #2]
    b88e:	6879      	ldr	r1, [r7, #4]
    b890:	01d2      	lsls	r2, r2, #7
    b892:	440a      	add	r2, r1
    b894:	4413      	add	r3, r2
    b896:	3330      	adds	r3, #48	; 0x30
    b898:	781b      	ldrb	r3, [r3, #0]
    b89a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b89c:	7bfb      	ldrb	r3, [r7, #15]
    b89e:	f003 030f 	and.w	r3, r3, #15
    b8a2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b8a4:	787b      	ldrb	r3, [r7, #1]
    b8a6:	011b      	lsls	r3, r3, #4
    b8a8:	b2da      	uxtb	r2, r3
    b8aa:	7bfb      	ldrb	r3, [r7, #15]
    b8ac:	4313      	orrs	r3, r2
    b8ae:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b8b0:	78fa      	ldrb	r2, [r7, #3]
    b8b2:	78bb      	ldrb	r3, [r7, #2]
    b8b4:	6879      	ldr	r1, [r7, #4]
    b8b6:	01d2      	lsls	r2, r2, #7
    b8b8:	440a      	add	r2, r1
    b8ba:	4413      	add	r3, r2
    b8bc:	3330      	adds	r3, #48	; 0x30
    b8be:	7bfa      	ldrb	r2, [r7, #15]
    b8c0:	701a      	strb	r2, [r3, #0]
}
    b8c2:	bf00      	nop
    b8c4:	3714      	adds	r7, #20
    b8c6:	46bd      	mov	sp, r7
    b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8cc:	4770      	bx	lr

0000b8ce <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b8ce:	b480      	push	{r7}
    b8d0:	b085      	sub	sp, #20
    b8d2:	af00      	add	r7, sp, #0
    b8d4:	6078      	str	r0, [r7, #4]
    b8d6:	4608      	mov	r0, r1
    b8d8:	4611      	mov	r1, r2
    b8da:	461a      	mov	r2, r3
    b8dc:	4603      	mov	r3, r0
    b8de:	70fb      	strb	r3, [r7, #3]
    b8e0:	460b      	mov	r3, r1
    b8e2:	70bb      	strb	r3, [r7, #2]
    b8e4:	4613      	mov	r3, r2
    b8e6:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b8e8:	78fa      	ldrb	r2, [r7, #3]
    b8ea:	78bb      	ldrb	r3, [r7, #2]
    b8ec:	6879      	ldr	r1, [r7, #4]
    b8ee:	01d2      	lsls	r2, r2, #7
    b8f0:	440a      	add	r2, r1
    b8f2:	4413      	add	r3, r2
    b8f4:	3340      	adds	r3, #64	; 0x40
    b8f6:	781b      	ldrb	r3, [r3, #0]
    b8f8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b8fa:	7bfb      	ldrb	r3, [r7, #15]
    b8fc:	f023 0301 	bic.w	r3, r3, #1
    b900:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b902:	787a      	ldrb	r2, [r7, #1]
    b904:	7bfb      	ldrb	r3, [r7, #15]
    b906:	4313      	orrs	r3, r2
    b908:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b90a:	78fa      	ldrb	r2, [r7, #3]
    b90c:	78bb      	ldrb	r3, [r7, #2]
    b90e:	6879      	ldr	r1, [r7, #4]
    b910:	01d2      	lsls	r2, r2, #7
    b912:	440a      	add	r2, r1
    b914:	4413      	add	r3, r2
    b916:	3340      	adds	r3, #64	; 0x40
    b918:	7bfa      	ldrb	r2, [r7, #15]
    b91a:	701a      	strb	r2, [r3, #0]
}
    b91c:	bf00      	nop
    b91e:	3714      	adds	r7, #20
    b920:	46bd      	mov	sp, r7
    b922:	f85d 7b04 	ldr.w	r7, [sp], #4
    b926:	4770      	bx	lr

0000b928 <hri_port_write_WRCONFIG_reg>:
{
    b928:	b480      	push	{r7}
    b92a:	b085      	sub	sp, #20
    b92c:	af00      	add	r7, sp, #0
    b92e:	60f8      	str	r0, [r7, #12]
    b930:	460b      	mov	r3, r1
    b932:	607a      	str	r2, [r7, #4]
    b934:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b936:	7afb      	ldrb	r3, [r7, #11]
    b938:	68fa      	ldr	r2, [r7, #12]
    b93a:	01db      	lsls	r3, r3, #7
    b93c:	4413      	add	r3, r2
    b93e:	3328      	adds	r3, #40	; 0x28
    b940:	687a      	ldr	r2, [r7, #4]
    b942:	601a      	str	r2, [r3, #0]
}
    b944:	bf00      	nop
    b946:	3714      	adds	r7, #20
    b948:	46bd      	mov	sp, r7
    b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b94e:	4770      	bx	lr

0000b950 <_gpio_set_direction>:
{
    b950:	b580      	push	{r7, lr}
    b952:	b082      	sub	sp, #8
    b954:	af00      	add	r7, sp, #0
    b956:	4603      	mov	r3, r0
    b958:	6039      	str	r1, [r7, #0]
    b95a:	71fb      	strb	r3, [r7, #7]
    b95c:	4613      	mov	r3, r2
    b95e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b960:	79bb      	ldrb	r3, [r7, #6]
    b962:	2b01      	cmp	r3, #1
    b964:	d01c      	beq.n	b9a0 <_gpio_set_direction+0x50>
    b966:	2b02      	cmp	r3, #2
    b968:	d037      	beq.n	b9da <_gpio_set_direction+0x8a>
    b96a:	2b00      	cmp	r3, #0
    b96c:	d14e      	bne.n	ba0c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b96e:	79fb      	ldrb	r3, [r7, #7]
    b970:	683a      	ldr	r2, [r7, #0]
    b972:	4619      	mov	r1, r3
    b974:	482a      	ldr	r0, [pc, #168]	; (ba20 <_gpio_set_direction+0xd0>)
    b976:	4b2b      	ldr	r3, [pc, #172]	; (ba24 <_gpio_set_direction+0xd4>)
    b978:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b97a:	683b      	ldr	r3, [r7, #0]
    b97c:	b29b      	uxth	r3, r3
    b97e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b982:	79fb      	ldrb	r3, [r7, #7]
    b984:	4619      	mov	r1, r3
    b986:	4826      	ldr	r0, [pc, #152]	; (ba20 <_gpio_set_direction+0xd0>)
    b988:	4b27      	ldr	r3, [pc, #156]	; (ba28 <_gpio_set_direction+0xd8>)
    b98a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b98c:	683b      	ldr	r3, [r7, #0]
    b98e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b990:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b994:	79fb      	ldrb	r3, [r7, #7]
    b996:	4619      	mov	r1, r3
    b998:	4821      	ldr	r0, [pc, #132]	; (ba20 <_gpio_set_direction+0xd0>)
    b99a:	4b23      	ldr	r3, [pc, #140]	; (ba28 <_gpio_set_direction+0xd8>)
    b99c:	4798      	blx	r3
		break;
    b99e:	e03a      	b.n	ba16 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b9a0:	79fb      	ldrb	r3, [r7, #7]
    b9a2:	683a      	ldr	r2, [r7, #0]
    b9a4:	4619      	mov	r1, r3
    b9a6:	481e      	ldr	r0, [pc, #120]	; (ba20 <_gpio_set_direction+0xd0>)
    b9a8:	4b1e      	ldr	r3, [pc, #120]	; (ba24 <_gpio_set_direction+0xd4>)
    b9aa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b9ac:	683b      	ldr	r3, [r7, #0]
    b9ae:	b29b      	uxth	r3, r3
    b9b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b9b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b9b8:	79f9      	ldrb	r1, [r7, #7]
    b9ba:	461a      	mov	r2, r3
    b9bc:	4818      	ldr	r0, [pc, #96]	; (ba20 <_gpio_set_direction+0xd0>)
    b9be:	4b1a      	ldr	r3, [pc, #104]	; (ba28 <_gpio_set_direction+0xd8>)
    b9c0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b9c2:	683b      	ldr	r3, [r7, #0]
    b9c4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b9c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b9ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b9ce:	79f9      	ldrb	r1, [r7, #7]
    b9d0:	461a      	mov	r2, r3
    b9d2:	4813      	ldr	r0, [pc, #76]	; (ba20 <_gpio_set_direction+0xd0>)
    b9d4:	4b14      	ldr	r3, [pc, #80]	; (ba28 <_gpio_set_direction+0xd8>)
    b9d6:	4798      	blx	r3
		break;
    b9d8:	e01d      	b.n	ba16 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b9da:	79fb      	ldrb	r3, [r7, #7]
    b9dc:	683a      	ldr	r2, [r7, #0]
    b9de:	4619      	mov	r1, r3
    b9e0:	480f      	ldr	r0, [pc, #60]	; (ba20 <_gpio_set_direction+0xd0>)
    b9e2:	4b12      	ldr	r3, [pc, #72]	; (ba2c <_gpio_set_direction+0xdc>)
    b9e4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b9e6:	683b      	ldr	r3, [r7, #0]
    b9e8:	b29b      	uxth	r3, r3
    b9ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b9ee:	79fb      	ldrb	r3, [r7, #7]
    b9f0:	4619      	mov	r1, r3
    b9f2:	480b      	ldr	r0, [pc, #44]	; (ba20 <_gpio_set_direction+0xd0>)
    b9f4:	4b0c      	ldr	r3, [pc, #48]	; (ba28 <_gpio_set_direction+0xd8>)
    b9f6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b9f8:	683b      	ldr	r3, [r7, #0]
    b9fa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b9fc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ba00:	79fb      	ldrb	r3, [r7, #7]
    ba02:	4619      	mov	r1, r3
    ba04:	4806      	ldr	r0, [pc, #24]	; (ba20 <_gpio_set_direction+0xd0>)
    ba06:	4b08      	ldr	r3, [pc, #32]	; (ba28 <_gpio_set_direction+0xd8>)
    ba08:	4798      	blx	r3
		break;
    ba0a:	e004      	b.n	ba16 <_gpio_set_direction+0xc6>
		ASSERT(false);
    ba0c:	2246      	movs	r2, #70	; 0x46
    ba0e:	4908      	ldr	r1, [pc, #32]	; (ba30 <_gpio_set_direction+0xe0>)
    ba10:	2000      	movs	r0, #0
    ba12:	4b08      	ldr	r3, [pc, #32]	; (ba34 <_gpio_set_direction+0xe4>)
    ba14:	4798      	blx	r3
}
    ba16:	bf00      	nop
    ba18:	3708      	adds	r7, #8
    ba1a:	46bd      	mov	sp, r7
    ba1c:	bd80      	pop	{r7, pc}
    ba1e:	bf00      	nop
    ba20:	41008000 	.word	0x41008000
    ba24:	0000b799 	.word	0x0000b799
    ba28:	0000b929 	.word	0x0000b929
    ba2c:	0000b771 	.word	0x0000b771
    ba30:	00011e90 	.word	0x00011e90
    ba34:	00003cad 	.word	0x00003cad

0000ba38 <_gpio_set_level>:
{
    ba38:	b580      	push	{r7, lr}
    ba3a:	b082      	sub	sp, #8
    ba3c:	af00      	add	r7, sp, #0
    ba3e:	4603      	mov	r3, r0
    ba40:	6039      	str	r1, [r7, #0]
    ba42:	71fb      	strb	r3, [r7, #7]
    ba44:	4613      	mov	r3, r2
    ba46:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ba48:	79bb      	ldrb	r3, [r7, #6]
    ba4a:	2b00      	cmp	r3, #0
    ba4c:	d006      	beq.n	ba5c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ba4e:	79fb      	ldrb	r3, [r7, #7]
    ba50:	683a      	ldr	r2, [r7, #0]
    ba52:	4619      	mov	r1, r3
    ba54:	4806      	ldr	r0, [pc, #24]	; (ba70 <_gpio_set_level+0x38>)
    ba56:	4b07      	ldr	r3, [pc, #28]	; (ba74 <_gpio_set_level+0x3c>)
    ba58:	4798      	blx	r3
}
    ba5a:	e005      	b.n	ba68 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ba5c:	79fb      	ldrb	r3, [r7, #7]
    ba5e:	683a      	ldr	r2, [r7, #0]
    ba60:	4619      	mov	r1, r3
    ba62:	4803      	ldr	r0, [pc, #12]	; (ba70 <_gpio_set_level+0x38>)
    ba64:	4b04      	ldr	r3, [pc, #16]	; (ba78 <_gpio_set_level+0x40>)
    ba66:	4798      	blx	r3
}
    ba68:	bf00      	nop
    ba6a:	3708      	adds	r7, #8
    ba6c:	46bd      	mov	sp, r7
    ba6e:	bd80      	pop	{r7, pc}
    ba70:	41008000 	.word	0x41008000
    ba74:	0000b7c1 	.word	0x0000b7c1
    ba78:	0000b7e9 	.word	0x0000b7e9

0000ba7c <_gpio_set_pin_function>:
{
    ba7c:	b590      	push	{r4, r7, lr}
    ba7e:	b085      	sub	sp, #20
    ba80:	af00      	add	r7, sp, #0
    ba82:	6078      	str	r0, [r7, #4]
    ba84:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    ba86:	687b      	ldr	r3, [r7, #4]
    ba88:	095b      	lsrs	r3, r3, #5
    ba8a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    ba8c:	687b      	ldr	r3, [r7, #4]
    ba8e:	b2db      	uxtb	r3, r3
    ba90:	f003 031f 	and.w	r3, r3, #31
    ba94:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    ba96:	683b      	ldr	r3, [r7, #0]
    ba98:	f1b3 3fff 	cmp.w	r3, #4294967295
    ba9c:	d106      	bne.n	baac <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    ba9e:	7bba      	ldrb	r2, [r7, #14]
    baa0:	7bf9      	ldrb	r1, [r7, #15]
    baa2:	2300      	movs	r3, #0
    baa4:	4812      	ldr	r0, [pc, #72]	; (baf0 <_gpio_set_pin_function+0x74>)
    baa6:	4c13      	ldr	r4, [pc, #76]	; (baf4 <_gpio_set_pin_function+0x78>)
    baa8:	47a0      	blx	r4
}
    baaa:	e01d      	b.n	bae8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    baac:	7bba      	ldrb	r2, [r7, #14]
    baae:	7bf9      	ldrb	r1, [r7, #15]
    bab0:	2301      	movs	r3, #1
    bab2:	480f      	ldr	r0, [pc, #60]	; (baf0 <_gpio_set_pin_function+0x74>)
    bab4:	4c0f      	ldr	r4, [pc, #60]	; (baf4 <_gpio_set_pin_function+0x78>)
    bab6:	47a0      	blx	r4
		if (pin & 1) {
    bab8:	7bbb      	ldrb	r3, [r7, #14]
    baba:	f003 0301 	and.w	r3, r3, #1
    babe:	2b00      	cmp	r3, #0
    bac0:	d009      	beq.n	bad6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    bac2:	7bbb      	ldrb	r3, [r7, #14]
    bac4:	085b      	lsrs	r3, r3, #1
    bac6:	b2da      	uxtb	r2, r3
    bac8:	683b      	ldr	r3, [r7, #0]
    baca:	b2db      	uxtb	r3, r3
    bacc:	7bf9      	ldrb	r1, [r7, #15]
    bace:	4808      	ldr	r0, [pc, #32]	; (baf0 <_gpio_set_pin_function+0x74>)
    bad0:	4c09      	ldr	r4, [pc, #36]	; (baf8 <_gpio_set_pin_function+0x7c>)
    bad2:	47a0      	blx	r4
}
    bad4:	e008      	b.n	bae8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    bad6:	7bbb      	ldrb	r3, [r7, #14]
    bad8:	085b      	lsrs	r3, r3, #1
    bada:	b2da      	uxtb	r2, r3
    badc:	683b      	ldr	r3, [r7, #0]
    bade:	b2db      	uxtb	r3, r3
    bae0:	7bf9      	ldrb	r1, [r7, #15]
    bae2:	4803      	ldr	r0, [pc, #12]	; (baf0 <_gpio_set_pin_function+0x74>)
    bae4:	4c05      	ldr	r4, [pc, #20]	; (bafc <_gpio_set_pin_function+0x80>)
    bae6:	47a0      	blx	r4
}
    bae8:	bf00      	nop
    baea:	3714      	adds	r7, #20
    baec:	46bd      	mov	sp, r7
    baee:	bd90      	pop	{r4, r7, pc}
    baf0:	41008000 	.word	0x41008000
    baf4:	0000b8cf 	.word	0x0000b8cf
    baf8:	0000b871 	.word	0x0000b871
    bafc:	0000b811 	.word	0x0000b811

0000bb00 <gpio_set_pin_function>:
{
    bb00:	b580      	push	{r7, lr}
    bb02:	b082      	sub	sp, #8
    bb04:	af00      	add	r7, sp, #0
    bb06:	6078      	str	r0, [r7, #4]
    bb08:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    bb0a:	6839      	ldr	r1, [r7, #0]
    bb0c:	6878      	ldr	r0, [r7, #4]
    bb0e:	4b03      	ldr	r3, [pc, #12]	; (bb1c <gpio_set_pin_function+0x1c>)
    bb10:	4798      	blx	r3
}
    bb12:	bf00      	nop
    bb14:	3708      	adds	r7, #8
    bb16:	46bd      	mov	sp, r7
    bb18:	bd80      	pop	{r7, pc}
    bb1a:	bf00      	nop
    bb1c:	0000ba7d 	.word	0x0000ba7d

0000bb20 <gpio_set_pin_direction>:
{
    bb20:	b580      	push	{r7, lr}
    bb22:	b082      	sub	sp, #8
    bb24:	af00      	add	r7, sp, #0
    bb26:	4603      	mov	r3, r0
    bb28:	460a      	mov	r2, r1
    bb2a:	71fb      	strb	r3, [r7, #7]
    bb2c:	4613      	mov	r3, r2
    bb2e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    bb30:	79fb      	ldrb	r3, [r7, #7]
    bb32:	095b      	lsrs	r3, r3, #5
    bb34:	b2d8      	uxtb	r0, r3
    bb36:	79fb      	ldrb	r3, [r7, #7]
    bb38:	f003 031f 	and.w	r3, r3, #31
    bb3c:	2201      	movs	r2, #1
    bb3e:	fa02 f303 	lsl.w	r3, r2, r3
    bb42:	79ba      	ldrb	r2, [r7, #6]
    bb44:	4619      	mov	r1, r3
    bb46:	4b03      	ldr	r3, [pc, #12]	; (bb54 <gpio_set_pin_direction+0x34>)
    bb48:	4798      	blx	r3
}
    bb4a:	bf00      	nop
    bb4c:	3708      	adds	r7, #8
    bb4e:	46bd      	mov	sp, r7
    bb50:	bd80      	pop	{r7, pc}
    bb52:	bf00      	nop
    bb54:	0000b951 	.word	0x0000b951

0000bb58 <gpio_set_pin_level>:
{
    bb58:	b580      	push	{r7, lr}
    bb5a:	b082      	sub	sp, #8
    bb5c:	af00      	add	r7, sp, #0
    bb5e:	4603      	mov	r3, r0
    bb60:	460a      	mov	r2, r1
    bb62:	71fb      	strb	r3, [r7, #7]
    bb64:	4613      	mov	r3, r2
    bb66:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    bb68:	79fb      	ldrb	r3, [r7, #7]
    bb6a:	095b      	lsrs	r3, r3, #5
    bb6c:	b2d8      	uxtb	r0, r3
    bb6e:	79fb      	ldrb	r3, [r7, #7]
    bb70:	f003 031f 	and.w	r3, r3, #31
    bb74:	2201      	movs	r2, #1
    bb76:	fa02 f303 	lsl.w	r3, r2, r3
    bb7a:	79ba      	ldrb	r2, [r7, #6]
    bb7c:	4619      	mov	r1, r3
    bb7e:	4b03      	ldr	r3, [pc, #12]	; (bb8c <gpio_set_pin_level+0x34>)
    bb80:	4798      	blx	r3
}
    bb82:	bf00      	nop
    bb84:	3708      	adds	r7, #8
    bb86:	46bd      	mov	sp, r7
    bb88:	bd80      	pop	{r7, pc}
    bb8a:	bf00      	nop
    bb8c:	0000ba39 	.word	0x0000ba39

0000bb90 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    bb90:	b580      	push	{r7, lr}
    bb92:	b082      	sub	sp, #8
    bb94:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    bb96:	2100      	movs	r1, #0
    bb98:	2008      	movs	r0, #8
    bb9a:	4b24      	ldr	r3, [pc, #144]	; (bc2c <QSPI_N25Q256_exit_xip+0x9c>)
    bb9c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    bb9e:	2100      	movs	r1, #0
    bba0:	202b      	movs	r0, #43	; 0x2b
    bba2:	4b22      	ldr	r3, [pc, #136]	; (bc2c <QSPI_N25Q256_exit_xip+0x9c>)
    bba4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    bba6:	2100      	movs	r1, #0
    bba8:	202a      	movs	r0, #42	; 0x2a
    bbaa:	4b20      	ldr	r3, [pc, #128]	; (bc2c <QSPI_N25Q256_exit_xip+0x9c>)
    bbac:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    bbae:	2102      	movs	r1, #2
    bbb0:	2008      	movs	r0, #8
    bbb2:	4b1f      	ldr	r3, [pc, #124]	; (bc30 <QSPI_N25Q256_exit_xip+0xa0>)
    bbb4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    bbb6:	2102      	movs	r1, #2
    bbb8:	202b      	movs	r0, #43	; 0x2b
    bbba:	4b1d      	ldr	r3, [pc, #116]	; (bc30 <QSPI_N25Q256_exit_xip+0xa0>)
    bbbc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    bbbe:	2102      	movs	r1, #2
    bbc0:	202a      	movs	r0, #42	; 0x2a
    bbc2:	4b1b      	ldr	r3, [pc, #108]	; (bc30 <QSPI_N25Q256_exit_xip+0xa0>)
    bbc4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    bbc6:	2101      	movs	r1, #1
    bbc8:	2008      	movs	r0, #8
    bbca:	4b1a      	ldr	r3, [pc, #104]	; (bc34 <QSPI_N25Q256_exit_xip+0xa4>)
    bbcc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    bbce:	2100      	movs	r1, #0
    bbd0:	202b      	movs	r0, #43	; 0x2b
    bbd2:	4b18      	ldr	r3, [pc, #96]	; (bc34 <QSPI_N25Q256_exit_xip+0xa4>)
    bbd4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    bbd6:	2100      	movs	r1, #0
    bbd8:	202a      	movs	r0, #42	; 0x2a
    bbda:	4b16      	ldr	r3, [pc, #88]	; (bc34 <QSPI_N25Q256_exit_xip+0xa4>)
    bbdc:	4798      	blx	r3

	delay_us(1);
    bbde:	2001      	movs	r0, #1
    bbe0:	4b15      	ldr	r3, [pc, #84]	; (bc38 <QSPI_N25Q256_exit_xip+0xa8>)
    bbe2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    bbe4:	2300      	movs	r3, #0
    bbe6:	607b      	str	r3, [r7, #4]
    bbe8:	e010      	b.n	bc0c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    bbea:	2101      	movs	r1, #1
    bbec:	202a      	movs	r0, #42	; 0x2a
    bbee:	4b11      	ldr	r3, [pc, #68]	; (bc34 <QSPI_N25Q256_exit_xip+0xa4>)
    bbf0:	4798      	blx	r3
		delay_us(1);
    bbf2:	2001      	movs	r0, #1
    bbf4:	4b10      	ldr	r3, [pc, #64]	; (bc38 <QSPI_N25Q256_exit_xip+0xa8>)
    bbf6:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    bbf8:	2100      	movs	r1, #0
    bbfa:	202a      	movs	r0, #42	; 0x2a
    bbfc:	4b0d      	ldr	r3, [pc, #52]	; (bc34 <QSPI_N25Q256_exit_xip+0xa4>)
    bbfe:	4798      	blx	r3
		delay_us(1);
    bc00:	2001      	movs	r0, #1
    bc02:	4b0d      	ldr	r3, [pc, #52]	; (bc38 <QSPI_N25Q256_exit_xip+0xa8>)
    bc04:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    bc06:	687b      	ldr	r3, [r7, #4]
    bc08:	3301      	adds	r3, #1
    bc0a:	607b      	str	r3, [r7, #4]
    bc0c:	687b      	ldr	r3, [r7, #4]
    bc0e:	2b06      	cmp	r3, #6
    bc10:	ddeb      	ble.n	bbea <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    bc12:	2101      	movs	r1, #1
    bc14:	202b      	movs	r0, #43	; 0x2b
    bc16:	4b07      	ldr	r3, [pc, #28]	; (bc34 <QSPI_N25Q256_exit_xip+0xa4>)
    bc18:	4798      	blx	r3
	delay_us(1);
    bc1a:	2001      	movs	r0, #1
    bc1c:	4b06      	ldr	r3, [pc, #24]	; (bc38 <QSPI_N25Q256_exit_xip+0xa8>)
    bc1e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    bc20:	4b06      	ldr	r3, [pc, #24]	; (bc3c <QSPI_N25Q256_exit_xip+0xac>)
    bc22:	4798      	blx	r3
}
    bc24:	bf00      	nop
    bc26:	3708      	adds	r7, #8
    bc28:	46bd      	mov	sp, r7
    bc2a:	bd80      	pop	{r7, pc}
    bc2c:	0000bb01 	.word	0x0000bb01
    bc30:	0000bb21 	.word	0x0000bb21
    bc34:	0000bb59 	.word	0x0000bb59
    bc38:	0000252d 	.word	0x0000252d
    bc3c:	000018e9 	.word	0x000018e9

0000bc40 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    bc40:	b598      	push	{r3, r4, r7, lr}
    bc42:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    bc44:	4806      	ldr	r0, [pc, #24]	; (bc60 <spi_nor_flash_init+0x20>)
    bc46:	4b07      	ldr	r3, [pc, #28]	; (bc64 <spi_nor_flash_init+0x24>)
    bc48:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    bc4a:	2300      	movs	r3, #0
    bc4c:	4a06      	ldr	r2, [pc, #24]	; (bc68 <spi_nor_flash_init+0x28>)
    bc4e:	4904      	ldr	r1, [pc, #16]	; (bc60 <spi_nor_flash_init+0x20>)
    bc50:	4806      	ldr	r0, [pc, #24]	; (bc6c <spi_nor_flash_init+0x2c>)
    bc52:	4c07      	ldr	r4, [pc, #28]	; (bc70 <spi_nor_flash_init+0x30>)
    bc54:	47a0      	blx	r4
    bc56:	4602      	mov	r2, r0
    bc58:	4b06      	ldr	r3, [pc, #24]	; (bc74 <spi_nor_flash_init+0x34>)
    bc5a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    bc5c:	bf00      	nop
    bc5e:	bd98      	pop	{r3, r4, r7, pc}
    bc60:	20007f58 	.word	0x20007f58
    bc64:	00002c15 	.word	0x00002c15
    bc68:	0000bb91 	.word	0x0000bb91
    bc6c:	20000dc4 	.word	0x20000dc4
    bc70:	0000c0ad 	.word	0x0000c0ad
    bc74:	20008178 	.word	0x20008178

0000bc78 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    bc78:	b580      	push	{r7, lr}
    bc7a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    bc7c:	4805      	ldr	r0, [pc, #20]	; (bc94 <cdc_device_acm_init+0x1c>)
    bc7e:	4b06      	ldr	r3, [pc, #24]	; (bc98 <cdc_device_acm_init+0x20>)
    bc80:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    bc82:	4b06      	ldr	r3, [pc, #24]	; (bc9c <cdc_device_acm_init+0x24>)
    bc84:	4798      	blx	r3

	usbdc_start(single_desc);
    bc86:	4806      	ldr	r0, [pc, #24]	; (bca0 <cdc_device_acm_init+0x28>)
    bc88:	4b06      	ldr	r3, [pc, #24]	; (bca4 <cdc_device_acm_init+0x2c>)
    bc8a:	4798      	blx	r3
	usbdc_attach();
    bc8c:	4b06      	ldr	r3, [pc, #24]	; (bca8 <cdc_device_acm_init+0x30>)
    bc8e:	4798      	blx	r3
}
    bc90:	bf00      	nop
    bc92:	bd80      	pop	{r7, pc}
    bc94:	20000e14 	.word	0x20000e14
    bc98:	0000d7d5 	.word	0x0000d7d5
    bc9c:	0000ca4d 	.word	0x0000ca4d
    bca0:	200001d0 	.word	0x200001d0
    bca4:	0000d871 	.word	0x0000d871
    bca8:	0000d8c1 	.word	0x0000d8c1

0000bcac <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    bcac:	b580      	push	{r7, lr}
    bcae:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    bcb0:	4b01      	ldr	r3, [pc, #4]	; (bcb8 <usb_init+0xc>)
    bcb2:	4798      	blx	r3
}
    bcb4:	bf00      	nop
    bcb6:	bd80      	pop	{r7, pc}
    bcb8:	0000bc79 	.word	0x0000bc79

0000bcbc <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    bcbc:	b480      	push	{r7}
    bcbe:	b085      	sub	sp, #20
    bcc0:	af00      	add	r7, sp, #0
    bcc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    bcc4:	f3ef 8310 	mrs	r3, PRIMASK
    bcc8:	60fb      	str	r3, [r7, #12]
  return(result);
    bcca:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    bccc:	687b      	ldr	r3, [r7, #4]
    bcce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    bcd0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    bcd2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    bcd6:	bf00      	nop
    bcd8:	3714      	adds	r7, #20
    bcda:	46bd      	mov	sp, r7
    bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    bce0:	4770      	bx	lr

0000bce2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    bce2:	b480      	push	{r7}
    bce4:	b085      	sub	sp, #20
    bce6:	af00      	add	r7, sp, #0
    bce8:	6078      	str	r0, [r7, #4]
    bcea:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    bcee:	687b      	ldr	r3, [r7, #4]
    bcf0:	681b      	ldr	r3, [r3, #0]
    bcf2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    bcf4:	68fb      	ldr	r3, [r7, #12]
    bcf6:	f383 8810 	msr	PRIMASK, r3
}
    bcfa:	bf00      	nop
    bcfc:	3714      	adds	r7, #20
    bcfe:	46bd      	mov	sp, r7
    bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd04:	4770      	bx	lr
	...

0000bd08 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    bd08:	b580      	push	{r7, lr}
    bd0a:	b08c      	sub	sp, #48	; 0x30
    bd0c:	af00      	add	r7, sp, #0
    bd0e:	6078      	str	r0, [r7, #4]
    bd10:	460b      	mov	r3, r1
    bd12:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bd14:	687b      	ldr	r3, [r7, #4]
    bd16:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bd18:	687b      	ldr	r3, [r7, #4]
    bd1a:	681b      	ldr	r3, [r3, #0]
    bd1c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    bd1e:	f107 030c 	add.w	r3, r7, #12
    bd22:	2200      	movs	r2, #0
    bd24:	601a      	str	r2, [r3, #0]
    bd26:	605a      	str	r2, [r3, #4]
    bd28:	609a      	str	r2, [r3, #8]
    bd2a:	60da      	str	r2, [r3, #12]
    bd2c:	611a      	str	r2, [r3, #16]
    bd2e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd32:	7b1b      	ldrb	r3, [r3, #12]
    bd34:	2b00      	cmp	r3, #0
    bd36:	d001      	beq.n	bd3c <n25q256a_xip_confirm+0x34>
    bd38:	2206      	movs	r2, #6
    bd3a:	e000      	b.n	bd3e <n25q256a_xip_confirm+0x36>
    bd3c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bd3e:	7b3b      	ldrb	r3, [r7, #12]
    bd40:	f362 0302 	bfi	r3, r2, #0, #3
    bd44:	733b      	strb	r3, [r7, #12]
    bd46:	7b3b      	ldrb	r3, [r7, #12]
    bd48:	f043 0310 	orr.w	r3, r3, #16
    bd4c:	733b      	strb	r3, [r7, #12]
    bd4e:	7b3b      	ldrb	r3, [r7, #12]
    bd50:	f043 0320 	orr.w	r3, r3, #32
    bd54:	733b      	strb	r3, [r7, #12]
    bd56:	7b3b      	ldrb	r3, [r7, #12]
    bd58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd5c:	733b      	strb	r3, [r7, #12]
    bd5e:	7b3b      	ldrb	r3, [r7, #12]
    bd60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bd64:	733b      	strb	r3, [r7, #12]
    bd66:	7b7b      	ldrb	r3, [r7, #13]
    bd68:	f043 0303 	orr.w	r3, r3, #3
    bd6c:	737b      	strb	r3, [r7, #13]
    bd6e:	7b7b      	ldrb	r3, [r7, #13]
    bd70:	2201      	movs	r2, #1
    bd72:	f362 1305 	bfi	r3, r2, #4, #2
    bd76:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    bd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd7a:	7b1b      	ldrb	r3, [r3, #12]
    bd7c:	2b00      	cmp	r3, #0
    bd7e:	d001      	beq.n	bd84 <n25q256a_xip_confirm+0x7c>
    bd80:	2208      	movs	r2, #8
    bd82:	e000      	b.n	bd86 <n25q256a_xip_confirm+0x7e>
    bd84:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bd86:	7bbb      	ldrb	r3, [r7, #14]
    bd88:	f362 0304 	bfi	r3, r2, #0, #5
    bd8c:	73bb      	strb	r3, [r7, #14]
    bd8e:	230b      	movs	r3, #11
    bd90:	743b      	strb	r3, [r7, #16]
    bd92:	78fb      	ldrb	r3, [r7, #3]
    bd94:	2b00      	cmp	r3, #0
    bd96:	d001      	beq.n	bd9c <n25q256a_xip_confirm+0x94>
    bd98:	2300      	movs	r3, #0
    bd9a:	e000      	b.n	bd9e <n25q256a_xip_confirm+0x96>
    bd9c:	23ff      	movs	r3, #255	; 0xff
    bd9e:	747b      	strb	r3, [r7, #17]
    bda0:	2301      	movs	r3, #1
    bda2:	61bb      	str	r3, [r7, #24]
    bda4:	f107 0327 	add.w	r3, r7, #39	; 0x27
    bda8:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    bdaa:	f107 030c 	add.w	r3, r7, #12
    bdae:	4619      	mov	r1, r3
    bdb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bdb2:	4b07      	ldr	r3, [pc, #28]	; (bdd0 <n25q256a_xip_confirm+0xc8>)
    bdb4:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    bdb6:	78fb      	ldrb	r3, [r7, #3]
    bdb8:	2b00      	cmp	r3, #0
    bdba:	d001      	beq.n	bdc0 <n25q256a_xip_confirm+0xb8>
    bdbc:	2202      	movs	r2, #2
    bdbe:	e000      	b.n	bdc2 <n25q256a_xip_confirm+0xba>
    bdc0:	2201      	movs	r2, #1
    bdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bdc4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bdc6:	2300      	movs	r3, #0
}
    bdc8:	4618      	mov	r0, r3
    bdca:	3730      	adds	r7, #48	; 0x30
    bdcc:	46bd      	mov	sp, r7
    bdce:	bd80      	pop	{r7, pc}
    bdd0:	00002c8d 	.word	0x00002c8d

0000bdd4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    bdd4:	b580      	push	{r7, lr}
    bdd6:	b08c      	sub	sp, #48	; 0x30
    bdd8:	af00      	add	r7, sp, #0
    bdda:	6078      	str	r0, [r7, #4]
    bddc:	460b      	mov	r3, r1
    bdde:	70fb      	strb	r3, [r7, #3]
    bde0:	4613      	mov	r3, r2
    bde2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    bde4:	2300      	movs	r3, #0
    bde6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    bde8:	687b      	ldr	r3, [r7, #4]
    bdea:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    bdec:	687b      	ldr	r3, [r7, #4]
    bdee:	681b      	ldr	r3, [r3, #0]
    bdf0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    bdf2:	f107 030c 	add.w	r3, r7, #12
    bdf6:	2200      	movs	r2, #0
    bdf8:	601a      	str	r2, [r3, #0]
    bdfa:	605a      	str	r2, [r3, #4]
    bdfc:	609a      	str	r2, [r3, #8]
    bdfe:	60da      	str	r2, [r3, #12]
    be00:	611a      	str	r2, [r3, #16]
    be02:	615a      	str	r2, [r3, #20]
    be04:	78fb      	ldrb	r3, [r7, #3]
    be06:	f003 0307 	and.w	r3, r3, #7
    be0a:	b2da      	uxtb	r2, r3
    be0c:	7b3b      	ldrb	r3, [r7, #12]
    be0e:	f362 0302 	bfi	r3, r2, #0, #3
    be12:	733b      	strb	r3, [r7, #12]
    be14:	7b3b      	ldrb	r3, [r7, #12]
    be16:	f043 0310 	orr.w	r3, r3, #16
    be1a:	733b      	strb	r3, [r7, #12]
    be1c:	7b3b      	ldrb	r3, [r7, #12]
    be1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    be22:	733b      	strb	r3, [r7, #12]
    be24:	78bb      	ldrb	r3, [r7, #2]
    be26:	743b      	strb	r3, [r7, #16]
    be28:	2301      	movs	r3, #1
    be2a:	61bb      	str	r3, [r7, #24]
    be2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    be30:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    be32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be34:	7b5b      	ldrb	r3, [r3, #13]
    be36:	2b00      	cmp	r3, #0
    be38:	d003      	beq.n	be42 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    be3a:	2100      	movs	r1, #0
    be3c:	6878      	ldr	r0, [r7, #4]
    be3e:	4b0a      	ldr	r3, [pc, #40]	; (be68 <n25q256a_read_reg+0x94>)
    be40:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    be42:	f107 030c 	add.w	r3, r7, #12
    be46:	4619      	mov	r1, r3
    be48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    be4a:	4b08      	ldr	r3, [pc, #32]	; (be6c <n25q256a_read_reg+0x98>)
    be4c:	4798      	blx	r3
	if (n25q->xip_mode) {
    be4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be50:	7b5b      	ldrb	r3, [r3, #13]
    be52:	2b00      	cmp	r3, #0
    be54:	d003      	beq.n	be5e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    be56:	2101      	movs	r1, #1
    be58:	6878      	ldr	r0, [r7, #4]
    be5a:	4b03      	ldr	r3, [pc, #12]	; (be68 <n25q256a_read_reg+0x94>)
    be5c:	4798      	blx	r3
	}
	return status;
    be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    be60:	4618      	mov	r0, r3
    be62:	3730      	adds	r7, #48	; 0x30
    be64:	46bd      	mov	sp, r7
    be66:	bd80      	pop	{r7, pc}
    be68:	0000bd09 	.word	0x0000bd09
    be6c:	00002c8d 	.word	0x00002c8d

0000be70 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    be70:	b580      	push	{r7, lr}
    be72:	b08c      	sub	sp, #48	; 0x30
    be74:	af00      	add	r7, sp, #0
    be76:	60f8      	str	r0, [r7, #12]
    be78:	607b      	str	r3, [r7, #4]
    be7a:	460b      	mov	r3, r1
    be7c:	72fb      	strb	r3, [r7, #11]
    be7e:	4613      	mov	r3, r2
    be80:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    be82:	68fb      	ldr	r3, [r7, #12]
    be84:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    be86:	68fb      	ldr	r3, [r7, #12]
    be88:	681b      	ldr	r3, [r3, #0]
    be8a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    be8c:	f107 0310 	add.w	r3, r7, #16
    be90:	2200      	movs	r2, #0
    be92:	601a      	str	r2, [r3, #0]
    be94:	605a      	str	r2, [r3, #4]
    be96:	609a      	str	r2, [r3, #8]
    be98:	60da      	str	r2, [r3, #12]
    be9a:	611a      	str	r2, [r3, #16]
    be9c:	615a      	str	r2, [r3, #20]
    be9e:	7afb      	ldrb	r3, [r7, #11]
    bea0:	f003 0307 	and.w	r3, r3, #7
    bea4:	b2da      	uxtb	r2, r3
    bea6:	7c3b      	ldrb	r3, [r7, #16]
    bea8:	f362 0302 	bfi	r3, r2, #0, #3
    beac:	743b      	strb	r3, [r7, #16]
    beae:	7c3b      	ldrb	r3, [r7, #16]
    beb0:	f043 0310 	orr.w	r3, r3, #16
    beb4:	743b      	strb	r3, [r7, #16]
    beb6:	7c3b      	ldrb	r3, [r7, #16]
    beb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bebc:	743b      	strb	r3, [r7, #16]
    bebe:	7c7b      	ldrb	r3, [r7, #17]
    bec0:	2202      	movs	r2, #2
    bec2:	f362 1305 	bfi	r3, r2, #4, #2
    bec6:	747b      	strb	r3, [r7, #17]
    bec8:	7abb      	ldrb	r3, [r7, #10]
    beca:	753b      	strb	r3, [r7, #20]
    becc:	2301      	movs	r3, #1
    bece:	61fb      	str	r3, [r7, #28]
    bed0:	1d3b      	adds	r3, r7, #4
    bed2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    bed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bed6:	7b5b      	ldrb	r3, [r3, #13]
    bed8:	2b00      	cmp	r3, #0
    beda:	d003      	beq.n	bee4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    bedc:	2100      	movs	r1, #0
    bede:	68f8      	ldr	r0, [r7, #12]
    bee0:	4b09      	ldr	r3, [pc, #36]	; (bf08 <n25q256a_write_reg+0x98>)
    bee2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bee4:	f107 0310 	add.w	r3, r7, #16
    bee8:	4619      	mov	r1, r3
    beea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    beec:	4b07      	ldr	r3, [pc, #28]	; (bf0c <n25q256a_write_reg+0x9c>)
    beee:	4798      	blx	r3
	if (n25q->xip_mode) {
    bef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bef2:	7b5b      	ldrb	r3, [r3, #13]
    bef4:	2b00      	cmp	r3, #0
    bef6:	d003      	beq.n	bf00 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    bef8:	2101      	movs	r1, #1
    befa:	68f8      	ldr	r0, [r7, #12]
    befc:	4b02      	ldr	r3, [pc, #8]	; (bf08 <n25q256a_write_reg+0x98>)
    befe:	4798      	blx	r3
	}
}
    bf00:	bf00      	nop
    bf02:	3730      	adds	r7, #48	; 0x30
    bf04:	46bd      	mov	sp, r7
    bf06:	bd80      	pop	{r7, pc}
    bf08:	0000bd09 	.word	0x0000bd09
    bf0c:	00002c8d 	.word	0x00002c8d

0000bf10 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    bf10:	b580      	push	{r7, lr}
    bf12:	b090      	sub	sp, #64	; 0x40
    bf14:	af00      	add	r7, sp, #0
    bf16:	6078      	str	r0, [r7, #4]
    bf18:	460b      	mov	r3, r1
    bf1a:	70fb      	strb	r3, [r7, #3]
    bf1c:	4613      	mov	r3, r2
    bf1e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bf20:	687b      	ldr	r3, [r7, #4]
    bf22:	681b      	ldr	r3, [r3, #0]
    bf24:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    bf26:	78bb      	ldrb	r3, [r7, #2]
    bf28:	2b00      	cmp	r3, #0
    bf2a:	d001      	beq.n	bf30 <n25q256a_write_enable+0x20>
    bf2c:	2306      	movs	r3, #6
    bf2e:	e000      	b.n	bf32 <n25q256a_write_enable+0x22>
    bf30:	2304      	movs	r3, #4
    bf32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    bf36:	f107 0320 	add.w	r3, r7, #32
    bf3a:	2200      	movs	r2, #0
    bf3c:	601a      	str	r2, [r3, #0]
    bf3e:	605a      	str	r2, [r3, #4]
    bf40:	609a      	str	r2, [r3, #8]
    bf42:	60da      	str	r2, [r3, #12]
    bf44:	611a      	str	r2, [r3, #16]
    bf46:	615a      	str	r2, [r3, #20]
    bf48:	78fb      	ldrb	r3, [r7, #3]
    bf4a:	f003 0307 	and.w	r3, r3, #7
    bf4e:	b2da      	uxtb	r2, r3
    bf50:	f897 3020 	ldrb.w	r3, [r7, #32]
    bf54:	f362 0302 	bfi	r3, r2, #0, #3
    bf58:	f887 3020 	strb.w	r3, [r7, #32]
    bf5c:	f897 3020 	ldrb.w	r3, [r7, #32]
    bf60:	f043 0310 	orr.w	r3, r3, #16
    bf64:	f887 3020 	strb.w	r3, [r7, #32]
    bf68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    bf6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    bf70:	f107 0308 	add.w	r3, r7, #8
    bf74:	2200      	movs	r2, #0
    bf76:	601a      	str	r2, [r3, #0]
    bf78:	605a      	str	r2, [r3, #4]
    bf7a:	609a      	str	r2, [r3, #8]
    bf7c:	60da      	str	r2, [r3, #12]
    bf7e:	611a      	str	r2, [r3, #16]
    bf80:	615a      	str	r2, [r3, #20]
    bf82:	78fb      	ldrb	r3, [r7, #3]
    bf84:	f003 0307 	and.w	r3, r3, #7
    bf88:	b2da      	uxtb	r2, r3
    bf8a:	7a3b      	ldrb	r3, [r7, #8]
    bf8c:	f362 0302 	bfi	r3, r2, #0, #3
    bf90:	723b      	strb	r3, [r7, #8]
    bf92:	7a3b      	ldrb	r3, [r7, #8]
    bf94:	f043 0310 	orr.w	r3, r3, #16
    bf98:	723b      	strb	r3, [r7, #8]
    bf9a:	7a3b      	ldrb	r3, [r7, #8]
    bf9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bfa0:	723b      	strb	r3, [r7, #8]
    bfa2:	2305      	movs	r3, #5
    bfa4:	733b      	strb	r3, [r7, #12]
    bfa6:	2301      	movs	r3, #1
    bfa8:	617b      	str	r3, [r7, #20]
    bfaa:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    bfae:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    bfb0:	f107 0320 	add.w	r3, r7, #32
    bfb4:	4619      	mov	r1, r3
    bfb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bfb8:	4b08      	ldr	r3, [pc, #32]	; (bfdc <n25q256a_write_enable+0xcc>)
    bfba:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    bfbc:	f107 0308 	add.w	r3, r7, #8
    bfc0:	4619      	mov	r1, r3
    bfc2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bfc4:	4b05      	ldr	r3, [pc, #20]	; (bfdc <n25q256a_write_enable+0xcc>)
    bfc6:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    bfc8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    bfcc:	f003 0302 	and.w	r3, r3, #2
    bfd0:	2b00      	cmp	r3, #0
    bfd2:	d0ed      	beq.n	bfb0 <n25q256a_write_enable+0xa0>
}
    bfd4:	bf00      	nop
    bfd6:	3740      	adds	r7, #64	; 0x40
    bfd8:	46bd      	mov	sp, r7
    bfda:	bd80      	pop	{r7, pc}
    bfdc:	00002c8d 	.word	0x00002c8d

0000bfe0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    bfe0:	b590      	push	{r4, r7, lr}
    bfe2:	b087      	sub	sp, #28
    bfe4:	af00      	add	r7, sp, #0
    bfe6:	6078      	str	r0, [r7, #4]
    bfe8:	460b      	mov	r3, r1
    bfea:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    bfec:	687b      	ldr	r3, [r7, #4]
    bfee:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bff0:	68fb      	ldr	r3, [r7, #12]
    bff2:	7b1b      	ldrb	r3, [r3, #12]
    bff4:	2b00      	cmp	r3, #0
    bff6:	d001      	beq.n	bffc <n25q256a_switch_mode+0x1c>
    bff8:	2306      	movs	r3, #6
    bffa:	e000      	b.n	bffe <n25q256a_switch_mode+0x1e>
    bffc:	2300      	movs	r3, #0
    bffe:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c000:	7afb      	ldrb	r3, [r7, #11]
    c002:	2265      	movs	r2, #101	; 0x65
    c004:	4619      	mov	r1, r3
    c006:	6878      	ldr	r0, [r7, #4]
    c008:	4b25      	ldr	r3, [pc, #148]	; (c0a0 <n25q256a_switch_mode+0xc0>)
    c00a:	4798      	blx	r3
    c00c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c00e:	2300      	movs	r3, #0
    c010:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c012:	68fb      	ldr	r3, [r7, #12]
    c014:	7b1b      	ldrb	r3, [r3, #12]
    c016:	78fa      	ldrb	r2, [r7, #3]
    c018:	429a      	cmp	r2, r3
    c01a:	d03d      	beq.n	c098 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c01c:	78fb      	ldrb	r3, [r7, #3]
    c01e:	2b00      	cmp	r3, #0
    c020:	d00b      	beq.n	c03a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c022:	697b      	ldr	r3, [r7, #20]
    c024:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c028:	2b00      	cmp	r3, #0
    c02a:	d011      	beq.n	c050 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c02c:	697b      	ldr	r3, [r7, #20]
    c02e:	f003 031f 	and.w	r3, r3, #31
    c032:	617b      	str	r3, [r7, #20]
			modify = 1;
    c034:	2301      	movs	r3, #1
    c036:	74fb      	strb	r3, [r7, #19]
    c038:	e00a      	b.n	c050 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c03a:	697b      	ldr	r3, [r7, #20]
    c03c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c040:	2b00      	cmp	r3, #0
    c042:	d105      	bne.n	c050 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c044:	697b      	ldr	r3, [r7, #20]
    c046:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c04a:	617b      	str	r3, [r7, #20]
			modify = 1;
    c04c:	2301      	movs	r3, #1
    c04e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c050:	7cfb      	ldrb	r3, [r7, #19]
    c052:	2b00      	cmp	r3, #0
    c054:	d021      	beq.n	c09a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c056:	68fb      	ldr	r3, [r7, #12]
    c058:	78fa      	ldrb	r2, [r7, #3]
    c05a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c05c:	7afb      	ldrb	r3, [r7, #11]
    c05e:	2201      	movs	r2, #1
    c060:	4619      	mov	r1, r3
    c062:	6878      	ldr	r0, [r7, #4]
    c064:	4b0f      	ldr	r3, [pc, #60]	; (c0a4 <n25q256a_switch_mode+0xc4>)
    c066:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c068:	7af9      	ldrb	r1, [r7, #11]
    c06a:	697b      	ldr	r3, [r7, #20]
    c06c:	2261      	movs	r2, #97	; 0x61
    c06e:	6878      	ldr	r0, [r7, #4]
    c070:	4c0d      	ldr	r4, [pc, #52]	; (c0a8 <n25q256a_switch_mode+0xc8>)
    c072:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c074:	78fb      	ldrb	r3, [r7, #3]
    c076:	2b00      	cmp	r3, #0
    c078:	d001      	beq.n	c07e <n25q256a_switch_mode+0x9e>
    c07a:	2306      	movs	r3, #6
    c07c:	e000      	b.n	c080 <n25q256a_switch_mode+0xa0>
    c07e:	2300      	movs	r3, #0
    c080:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c082:	7afb      	ldrb	r3, [r7, #11]
    c084:	2265      	movs	r2, #101	; 0x65
    c086:	4619      	mov	r1, r3
    c088:	6878      	ldr	r0, [r7, #4]
    c08a:	4b05      	ldr	r3, [pc, #20]	; (c0a0 <n25q256a_switch_mode+0xc0>)
    c08c:	4798      	blx	r3
    c08e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c090:	68fb      	ldr	r3, [r7, #12]
    c092:	78fa      	ldrb	r2, [r7, #3]
    c094:	731a      	strb	r2, [r3, #12]
    c096:	e000      	b.n	c09a <n25q256a_switch_mode+0xba>
		return;
    c098:	bf00      	nop
	}
}
    c09a:	371c      	adds	r7, #28
    c09c:	46bd      	mov	sp, r7
    c09e:	bd90      	pop	{r4, r7, pc}
    c0a0:	0000bdd5 	.word	0x0000bdd5
    c0a4:	0000bf11 	.word	0x0000bf11
    c0a8:	0000be71 	.word	0x0000be71

0000c0ac <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c0ac:	b580      	push	{r7, lr}
    c0ae:	b086      	sub	sp, #24
    c0b0:	af00      	add	r7, sp, #0
    c0b2:	60f8      	str	r0, [r7, #12]
    c0b4:	60b9      	str	r1, [r7, #8]
    c0b6:	607a      	str	r2, [r7, #4]
    c0b8:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c0ba:	68fb      	ldr	r3, [r7, #12]
    c0bc:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c0be:	4a0c      	ldr	r2, [pc, #48]	; (c0f0 <n25q256a_construct+0x44>)
    c0c0:	68b9      	ldr	r1, [r7, #8]
    c0c2:	68f8      	ldr	r0, [r7, #12]
    c0c4:	4b0b      	ldr	r3, [pc, #44]	; (c0f4 <n25q256a_construct+0x48>)
    c0c6:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c0c8:	697b      	ldr	r3, [r7, #20]
    c0ca:	2200      	movs	r2, #0
    c0cc:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c0ce:	697b      	ldr	r3, [r7, #20]
    c0d0:	2200      	movs	r2, #0
    c0d2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c0d4:	697b      	ldr	r3, [r7, #20]
    c0d6:	687a      	ldr	r2, [r7, #4]
    c0d8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c0da:	78fb      	ldrb	r3, [r7, #3]
    c0dc:	4619      	mov	r1, r3
    c0de:	68f8      	ldr	r0, [r7, #12]
    c0e0:	4b05      	ldr	r3, [pc, #20]	; (c0f8 <n25q256a_construct+0x4c>)
    c0e2:	4798      	blx	r3
	return me;
    c0e4:	68fb      	ldr	r3, [r7, #12]
}
    c0e6:	4618      	mov	r0, r3
    c0e8:	3718      	adds	r7, #24
    c0ea:	46bd      	mov	sp, r7
    c0ec:	bd80      	pop	{r7, pc}
    c0ee:	bf00      	nop
    c0f0:	00011eac 	.word	0x00011eac
    c0f4:	0000c589 	.word	0x0000c589
    c0f8:	0000bfe1 	.word	0x0000bfe1

0000c0fc <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c0fc:	b580      	push	{r7, lr}
    c0fe:	b08c      	sub	sp, #48	; 0x30
    c100:	af00      	add	r7, sp, #0
    c102:	60f8      	str	r0, [r7, #12]
    c104:	60b9      	str	r1, [r7, #8]
    c106:	607a      	str	r2, [r7, #4]
    c108:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c10a:	68fb      	ldr	r3, [r7, #12]
    c10c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c10e:	68fb      	ldr	r3, [r7, #12]
    c110:	681b      	ldr	r3, [r3, #0]
    c112:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c114:	f107 0310 	add.w	r3, r7, #16
    c118:	2200      	movs	r2, #0
    c11a:	601a      	str	r2, [r3, #0]
    c11c:	605a      	str	r2, [r3, #4]
    c11e:	609a      	str	r2, [r3, #8]
    c120:	60da      	str	r2, [r3, #12]
    c122:	611a      	str	r2, [r3, #16]
    c124:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c128:	7b1b      	ldrb	r3, [r3, #12]
    c12a:	2b00      	cmp	r3, #0
    c12c:	d001      	beq.n	c132 <n25q256a_read+0x36>
    c12e:	2206      	movs	r2, #6
    c130:	e000      	b.n	c134 <n25q256a_read+0x38>
    c132:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c134:	7c3b      	ldrb	r3, [r7, #16]
    c136:	f362 0302 	bfi	r3, r2, #0, #3
    c13a:	743b      	strb	r3, [r7, #16]
    c13c:	7c3b      	ldrb	r3, [r7, #16]
    c13e:	f043 0310 	orr.w	r3, r3, #16
    c142:	743b      	strb	r3, [r7, #16]
    c144:	7c3b      	ldrb	r3, [r7, #16]
    c146:	f043 0320 	orr.w	r3, r3, #32
    c14a:	743b      	strb	r3, [r7, #16]
    c14c:	7c3b      	ldrb	r3, [r7, #16]
    c14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c152:	743b      	strb	r3, [r7, #16]
    c154:	7c7b      	ldrb	r3, [r7, #17]
    c156:	2201      	movs	r2, #1
    c158:	f362 1305 	bfi	r3, r2, #4, #2
    c15c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c160:	7b1b      	ldrb	r3, [r3, #12]
    c162:	2b00      	cmp	r3, #0
    c164:	d001      	beq.n	c16a <n25q256a_read+0x6e>
    c166:	220a      	movs	r2, #10
    c168:	e000      	b.n	c16c <n25q256a_read+0x70>
    c16a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c16c:	7cbb      	ldrb	r3, [r7, #18]
    c16e:	f362 0304 	bfi	r3, r2, #0, #5
    c172:	74bb      	strb	r3, [r7, #18]
    c174:	230b      	movs	r3, #11
    c176:	753b      	strb	r3, [r7, #20]
    c178:	687b      	ldr	r3, [r7, #4]
    c17a:	61bb      	str	r3, [r7, #24]
    c17c:	683b      	ldr	r3, [r7, #0]
    c17e:	61fb      	str	r3, [r7, #28]
    c180:	68bb      	ldr	r3, [r7, #8]
    c182:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c184:	f107 0310 	add.w	r3, r7, #16
    c188:	4619      	mov	r1, r3
    c18a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c18c:	4b03      	ldr	r3, [pc, #12]	; (c19c <n25q256a_read+0xa0>)
    c18e:	4798      	blx	r3
	return ERR_NONE;
    c190:	2300      	movs	r3, #0
}
    c192:	4618      	mov	r0, r3
    c194:	3730      	adds	r7, #48	; 0x30
    c196:	46bd      	mov	sp, r7
    c198:	bd80      	pop	{r7, pc}
    c19a:	bf00      	nop
    c19c:	00002c8d 	.word	0x00002c8d

0000c1a0 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	b08c      	sub	sp, #48	; 0x30
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	60f8      	str	r0, [r7, #12]
    c1a8:	60b9      	str	r1, [r7, #8]
    c1aa:	607a      	str	r2, [r7, #4]
    c1ac:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c1ae:	68fb      	ldr	r3, [r7, #12]
    c1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c1b2:	68fb      	ldr	r3, [r7, #12]
    c1b4:	681b      	ldr	r3, [r3, #0]
    c1b6:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c1b8:	f107 0310 	add.w	r3, r7, #16
    c1bc:	2200      	movs	r2, #0
    c1be:	601a      	str	r2, [r3, #0]
    c1c0:	605a      	str	r2, [r3, #4]
    c1c2:	609a      	str	r2, [r3, #8]
    c1c4:	60da      	str	r2, [r3, #12]
    c1c6:	611a      	str	r2, [r3, #16]
    c1c8:	615a      	str	r2, [r3, #20]
    c1ca:	7c3b      	ldrb	r3, [r7, #16]
    c1cc:	f043 0310 	orr.w	r3, r3, #16
    c1d0:	743b      	strb	r3, [r7, #16]
    c1d2:	7c3b      	ldrb	r3, [r7, #16]
    c1d4:	f043 0320 	orr.w	r3, r3, #32
    c1d8:	743b      	strb	r3, [r7, #16]
    c1da:	7c3b      	ldrb	r3, [r7, #16]
    c1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c1e0:	743b      	strb	r3, [r7, #16]
    c1e2:	7c7b      	ldrb	r3, [r7, #17]
    c1e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c1e8:	747b      	strb	r3, [r7, #17]
    c1ea:	2302      	movs	r3, #2
    c1ec:	753b      	strb	r3, [r7, #20]
    c1ee:	687b      	ldr	r3, [r7, #4]
    c1f0:	61bb      	str	r3, [r7, #24]
    c1f2:	683b      	ldr	r3, [r7, #0]
    c1f4:	61fb      	str	r3, [r7, #28]
    c1f6:	68bb      	ldr	r3, [r7, #8]
    c1f8:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1fc:	7b1b      	ldrb	r3, [r3, #12]
    c1fe:	2b00      	cmp	r3, #0
    c200:	d001      	beq.n	c206 <n25q256a_write+0x66>
    c202:	2206      	movs	r2, #6
    c204:	e000      	b.n	c208 <n25q256a_write+0x68>
    c206:	2200      	movs	r2, #0
    c208:	7c3b      	ldrb	r3, [r7, #16]
    c20a:	f362 0302 	bfi	r3, r2, #0, #3
    c20e:	743b      	strb	r3, [r7, #16]
	while (length) {
    c210:	e035      	b.n	c27e <n25q256a_write+0xde>
		cmd.address = address;
    c212:	687b      	ldr	r3, [r7, #4]
    c214:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c216:	683b      	ldr	r3, [r7, #0]
    c218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c21c:	d802      	bhi.n	c224 <n25q256a_write+0x84>
			cmd.buf_len = length;
    c21e:	683b      	ldr	r3, [r7, #0]
    c220:	61fb      	str	r3, [r7, #28]
    c222:	e002      	b.n	c22a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c224:	f44f 7380 	mov.w	r3, #256	; 0x100
    c228:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c22a:	7c3b      	ldrb	r3, [r7, #16]
    c22c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c230:	b2db      	uxtb	r3, r3
    c232:	2201      	movs	r2, #1
    c234:	4619      	mov	r1, r3
    c236:	68f8      	ldr	r0, [r7, #12]
    c238:	4b19      	ldr	r3, [pc, #100]	; (c2a0 <n25q256a_write+0x100>)
    c23a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c23c:	f107 0310 	add.w	r3, r7, #16
    c240:	4619      	mov	r1, r3
    c242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c244:	4b17      	ldr	r3, [pc, #92]	; (c2a4 <n25q256a_write+0x104>)
    c246:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c248:	bf00      	nop
    c24a:	7c3b      	ldrb	r3, [r7, #16]
    c24c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c250:	b2db      	uxtb	r3, r3
    c252:	2270      	movs	r2, #112	; 0x70
    c254:	4619      	mov	r1, r3
    c256:	68f8      	ldr	r0, [r7, #12]
    c258:	4b13      	ldr	r3, [pc, #76]	; (c2a8 <n25q256a_write+0x108>)
    c25a:	4798      	blx	r3
    c25c:	4603      	mov	r3, r0
    c25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c262:	2b00      	cmp	r3, #0
    c264:	d0f1      	beq.n	c24a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c266:	6a3a      	ldr	r2, [r7, #32]
    c268:	69fb      	ldr	r3, [r7, #28]
    c26a:	4413      	add	r3, r2
    c26c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c26e:	69fb      	ldr	r3, [r7, #28]
    c270:	683a      	ldr	r2, [r7, #0]
    c272:	1ad3      	subs	r3, r2, r3
    c274:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c276:	69fb      	ldr	r3, [r7, #28]
    c278:	687a      	ldr	r2, [r7, #4]
    c27a:	4413      	add	r3, r2
    c27c:	607b      	str	r3, [r7, #4]
	while (length) {
    c27e:	683b      	ldr	r3, [r7, #0]
    c280:	2b00      	cmp	r3, #0
    c282:	d1c6      	bne.n	c212 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c286:	7b5b      	ldrb	r3, [r3, #13]
    c288:	2b00      	cmp	r3, #0
    c28a:	d003      	beq.n	c294 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c28c:	2101      	movs	r1, #1
    c28e:	68f8      	ldr	r0, [r7, #12]
    c290:	4b06      	ldr	r3, [pc, #24]	; (c2ac <n25q256a_write+0x10c>)
    c292:	4798      	blx	r3
	}
	return ERR_NONE;
    c294:	2300      	movs	r3, #0
}
    c296:	4618      	mov	r0, r3
    c298:	3730      	adds	r7, #48	; 0x30
    c29a:	46bd      	mov	sp, r7
    c29c:	bd80      	pop	{r7, pc}
    c29e:	bf00      	nop
    c2a0:	0000bf11 	.word	0x0000bf11
    c2a4:	00002c8d 	.word	0x00002c8d
    c2a8:	0000bdd5 	.word	0x0000bdd5
    c2ac:	0000bd09 	.word	0x0000bd09

0000c2b0 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c2b0:	b580      	push	{r7, lr}
    c2b2:	b090      	sub	sp, #64	; 0x40
    c2b4:	af00      	add	r7, sp, #0
    c2b6:	60f8      	str	r0, [r7, #12]
    c2b8:	60b9      	str	r1, [r7, #8]
    c2ba:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c2bc:	68fb      	ldr	r3, [r7, #12]
    c2be:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c2c0:	68fb      	ldr	r3, [r7, #12]
    c2c2:	681b      	ldr	r3, [r3, #0]
    c2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c2c6:	f107 0314 	add.w	r3, r7, #20
    c2ca:	2200      	movs	r2, #0
    c2cc:	601a      	str	r2, [r3, #0]
    c2ce:	605a      	str	r2, [r3, #4]
    c2d0:	609a      	str	r2, [r3, #8]
    c2d2:	60da      	str	r2, [r3, #12]
    c2d4:	611a      	str	r2, [r3, #16]
    c2d6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c2da:	7b1b      	ldrb	r3, [r3, #12]
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d001      	beq.n	c2e4 <n25q256a_erase+0x34>
    c2e0:	2206      	movs	r2, #6
    c2e2:	e000      	b.n	c2e6 <n25q256a_erase+0x36>
    c2e4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c2e6:	7d3b      	ldrb	r3, [r7, #20]
    c2e8:	f362 0302 	bfi	r3, r2, #0, #3
    c2ec:	753b      	strb	r3, [r7, #20]
    c2ee:	7d3b      	ldrb	r3, [r7, #20]
    c2f0:	f043 0310 	orr.w	r3, r3, #16
    c2f4:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c2f6:	687b      	ldr	r3, [r7, #4]
    c2f8:	4a56      	ldr	r2, [pc, #344]	; (c454 <n25q256a_erase+0x1a4>)
    c2fa:	4293      	cmp	r3, r2
    c2fc:	bf94      	ite	ls
    c2fe:	2301      	movls	r3, #1
    c300:	2300      	movhi	r3, #0
    c302:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c304:	7d3b      	ldrb	r3, [r7, #20]
    c306:	f362 1345 	bfi	r3, r2, #5, #1
    c30a:	753b      	strb	r3, [r7, #20]
    c30c:	7d7b      	ldrb	r3, [r7, #21]
    c30e:	2202      	movs	r2, #2
    c310:	f362 1305 	bfi	r3, r2, #4, #2
    c314:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c316:	68bb      	ldr	r3, [r7, #8]
    c318:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c31a:	687b      	ldr	r3, [r7, #4]
    c31c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c31e:	2300      	movs	r3, #0
    c320:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c322:	687b      	ldr	r3, [r7, #4]
    c324:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c328:	2b00      	cmp	r3, #0
    c32a:	d104      	bne.n	c336 <n25q256a_erase+0x86>
    c32c:	68bb      	ldr	r3, [r7, #8]
    c32e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c332:	2b00      	cmp	r3, #0
    c334:	d002      	beq.n	c33c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c336:	f06f 030c 	mvn.w	r3, #12
    c33a:	e087      	b.n	c44c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c33c:	687b      	ldr	r3, [r7, #4]
    c33e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c342:	d368      	bcc.n	c416 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c344:	23c7      	movs	r3, #199	; 0xc7
    c346:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c348:	7d3b      	ldrb	r3, [r7, #20]
    c34a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c34e:	b2db      	uxtb	r3, r3
    c350:	2201      	movs	r2, #1
    c352:	4619      	mov	r1, r3
    c354:	68f8      	ldr	r0, [r7, #12]
    c356:	4b40      	ldr	r3, [pc, #256]	; (c458 <n25q256a_erase+0x1a8>)
    c358:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c35a:	f107 0314 	add.w	r3, r7, #20
    c35e:	4619      	mov	r1, r3
    c360:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c362:	4b3e      	ldr	r3, [pc, #248]	; (c45c <n25q256a_erase+0x1ac>)
    c364:	4798      	blx	r3
    c366:	e059      	b.n	c41c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c36a:	b29b      	uxth	r3, r3
    c36c:	2b00      	cmp	r3, #0
    c36e:	d11f      	bne.n	c3b0 <n25q256a_erase+0x100>
    c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c376:	d31b      	bcc.n	c3b0 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c37a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c37c:	23d8      	movs	r3, #216	; 0xd8
    c37e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c380:	7d3b      	ldrb	r3, [r7, #20]
    c382:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c386:	b2db      	uxtb	r3, r3
    c388:	2201      	movs	r2, #1
    c38a:	4619      	mov	r1, r3
    c38c:	68f8      	ldr	r0, [r7, #12]
    c38e:	4b32      	ldr	r3, [pc, #200]	; (c458 <n25q256a_erase+0x1a8>)
    c390:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c392:	f107 0314 	add.w	r3, r7, #20
    c396:	4619      	mov	r1, r3
    c398:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c39a:	4b30      	ldr	r3, [pc, #192]	; (c45c <n25q256a_erase+0x1ac>)
    c39c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c3a0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c3a8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c3ac:	63bb      	str	r3, [r7, #56]	; 0x38
    c3ae:	e023      	b.n	c3f8 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c3b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c3b6:	d31b      	bcc.n	c3f0 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c3ba:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c3bc:	2320      	movs	r3, #32
    c3be:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c3c0:	7d3b      	ldrb	r3, [r7, #20]
    c3c2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c3c6:	b2db      	uxtb	r3, r3
    c3c8:	2201      	movs	r2, #1
    c3ca:	4619      	mov	r1, r3
    c3cc:	68f8      	ldr	r0, [r7, #12]
    c3ce:	4b22      	ldr	r3, [pc, #136]	; (c458 <n25q256a_erase+0x1a8>)
    c3d0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c3d2:	f107 0314 	add.w	r3, r7, #20
    c3d6:	4619      	mov	r1, r3
    c3d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c3da:	4b20      	ldr	r3, [pc, #128]	; (c45c <n25q256a_erase+0x1ac>)
    c3dc:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c3e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c3e8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c3ec:	63bb      	str	r3, [r7, #56]	; 0x38
    c3ee:	e003      	b.n	c3f8 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c3f0:	f06f 030c 	mvn.w	r3, #12
    c3f4:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c3f6:	e011      	b.n	c41c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c3f8:	bf00      	nop
    c3fa:	7d3b      	ldrb	r3, [r7, #20]
    c3fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c400:	b2db      	uxtb	r3, r3
    c402:	2270      	movs	r2, #112	; 0x70
    c404:	4619      	mov	r1, r3
    c406:	68f8      	ldr	r0, [r7, #12]
    c408:	4b15      	ldr	r3, [pc, #84]	; (c460 <n25q256a_erase+0x1b0>)
    c40a:	4798      	blx	r3
    c40c:	4603      	mov	r3, r0
    c40e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c412:	2b00      	cmp	r3, #0
    c414:	d0f1      	beq.n	c3fa <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c418:	2b00      	cmp	r3, #0
    c41a:	d1a5      	bne.n	c368 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c41c:	bf00      	nop
    c41e:	7d3b      	ldrb	r3, [r7, #20]
    c420:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c424:	b2db      	uxtb	r3, r3
    c426:	2270      	movs	r2, #112	; 0x70
    c428:	4619      	mov	r1, r3
    c42a:	68f8      	ldr	r0, [r7, #12]
    c42c:	4b0c      	ldr	r3, [pc, #48]	; (c460 <n25q256a_erase+0x1b0>)
    c42e:	4798      	blx	r3
    c430:	4603      	mov	r3, r0
    c432:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c436:	2b00      	cmp	r3, #0
    c438:	d0f1      	beq.n	c41e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c43c:	7b5b      	ldrb	r3, [r3, #13]
    c43e:	2b00      	cmp	r3, #0
    c440:	d003      	beq.n	c44a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c442:	2101      	movs	r1, #1
    c444:	68f8      	ldr	r0, [r7, #12]
    c446:	4b07      	ldr	r3, [pc, #28]	; (c464 <n25q256a_erase+0x1b4>)
    c448:	4798      	blx	r3
	}
	return rc;
    c44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c44c:	4618      	mov	r0, r3
    c44e:	3740      	adds	r7, #64	; 0x40
    c450:	46bd      	mov	sp, r7
    c452:	bd80      	pop	{r7, pc}
    c454:	001fffff 	.word	0x001fffff
    c458:	0000bf11 	.word	0x0000bf11
    c45c:	00002c8d 	.word	0x00002c8d
    c460:	0000bdd5 	.word	0x0000bdd5
    c464:	0000bd09 	.word	0x0000bd09

0000c468 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c468:	b590      	push	{r4, r7, lr}
    c46a:	b085      	sub	sp, #20
    c46c:	af00      	add	r7, sp, #0
    c46e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c470:	687b      	ldr	r3, [r7, #4]
    c472:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c474:	68fb      	ldr	r3, [r7, #12]
    c476:	7b1b      	ldrb	r3, [r3, #12]
    c478:	2b00      	cmp	r3, #0
    c47a:	d001      	beq.n	c480 <n25q256a_enable_xip+0x18>
    c47c:	2306      	movs	r3, #6
    c47e:	e000      	b.n	c482 <n25q256a_enable_xip+0x1a>
    c480:	2300      	movs	r3, #0
    c482:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c484:	68fb      	ldr	r3, [r7, #12]
    c486:	7b5b      	ldrb	r3, [r3, #13]
    c488:	2b00      	cmp	r3, #0
    c48a:	d129      	bne.n	c4e0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c48c:	7afb      	ldrb	r3, [r7, #11]
    c48e:	2285      	movs	r2, #133	; 0x85
    c490:	4619      	mov	r1, r3
    c492:	6878      	ldr	r0, [r7, #4]
    c494:	4b15      	ldr	r3, [pc, #84]	; (c4ec <n25q256a_enable_xip+0x84>)
    c496:	4798      	blx	r3
    c498:	4603      	mov	r3, r0
    c49a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c49c:	7abb      	ldrb	r3, [r7, #10]
    c49e:	f003 0308 	and.w	r3, r3, #8
    c4a2:	2b00      	cmp	r3, #0
    c4a4:	d015      	beq.n	c4d2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c4a6:	7abb      	ldrb	r3, [r7, #10]
    c4a8:	f023 0308 	bic.w	r3, r3, #8
    c4ac:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c4ae:	7abb      	ldrb	r3, [r7, #10]
    c4b0:	7af9      	ldrb	r1, [r7, #11]
    c4b2:	2281      	movs	r2, #129	; 0x81
    c4b4:	6878      	ldr	r0, [r7, #4]
    c4b6:	4c0e      	ldr	r4, [pc, #56]	; (c4f0 <n25q256a_enable_xip+0x88>)
    c4b8:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c4ba:	bf00      	nop
    c4bc:	7afb      	ldrb	r3, [r7, #11]
    c4be:	2270      	movs	r2, #112	; 0x70
    c4c0:	4619      	mov	r1, r3
    c4c2:	6878      	ldr	r0, [r7, #4]
    c4c4:	4b09      	ldr	r3, [pc, #36]	; (c4ec <n25q256a_enable_xip+0x84>)
    c4c6:	4798      	blx	r3
    c4c8:	4603      	mov	r3, r0
    c4ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c4ce:	2b00      	cmp	r3, #0
    c4d0:	d0f4      	beq.n	c4bc <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c4d2:	68fb      	ldr	r3, [r7, #12]
    c4d4:	2201      	movs	r2, #1
    c4d6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c4d8:	2101      	movs	r1, #1
    c4da:	6878      	ldr	r0, [r7, #4]
    c4dc:	4b05      	ldr	r3, [pc, #20]	; (c4f4 <n25q256a_enable_xip+0x8c>)
    c4de:	4798      	blx	r3
	}
	return ERR_NONE;
    c4e0:	2300      	movs	r3, #0
}
    c4e2:	4618      	mov	r0, r3
    c4e4:	3714      	adds	r7, #20
    c4e6:	46bd      	mov	sp, r7
    c4e8:	bd90      	pop	{r4, r7, pc}
    c4ea:	bf00      	nop
    c4ec:	0000bdd5 	.word	0x0000bdd5
    c4f0:	0000be71 	.word	0x0000be71
    c4f4:	0000bd09 	.word	0x0000bd09

0000c4f8 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c4f8:	b580      	push	{r7, lr}
    c4fa:	b086      	sub	sp, #24
    c4fc:	af00      	add	r7, sp, #0
    c4fe:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c500:	687b      	ldr	r3, [r7, #4]
    c502:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c504:	687b      	ldr	r3, [r7, #4]
    c506:	681b      	ldr	r3, [r3, #0]
    c508:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c50a:	697b      	ldr	r3, [r7, #20]
    c50c:	7b1b      	ldrb	r3, [r3, #12]
    c50e:	2b00      	cmp	r3, #0
    c510:	d001      	beq.n	c516 <n25q256a_disable_xip+0x1e>
    c512:	2306      	movs	r3, #6
    c514:	e000      	b.n	c518 <n25q256a_disable_xip+0x20>
    c516:	2300      	movs	r3, #0
    c518:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c51a:	2100      	movs	r1, #0
    c51c:	6878      	ldr	r0, [r7, #4]
    c51e:	4b15      	ldr	r3, [pc, #84]	; (c574 <n25q256a_disable_xip+0x7c>)
    c520:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c522:	7bfb      	ldrb	r3, [r7, #15]
    c524:	2285      	movs	r2, #133	; 0x85
    c526:	4619      	mov	r1, r3
    c528:	6878      	ldr	r0, [r7, #4]
    c52a:	4b13      	ldr	r3, [pc, #76]	; (c578 <n25q256a_disable_xip+0x80>)
    c52c:	4798      	blx	r3
    c52e:	4603      	mov	r3, r0
    c530:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c532:	7bbb      	ldrb	r3, [r7, #14]
    c534:	f003 0308 	and.w	r3, r3, #8
    c538:	2b00      	cmp	r3, #0
    c53a:	d113      	bne.n	c564 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c53c:	697b      	ldr	r3, [r7, #20]
    c53e:	689b      	ldr	r3, [r3, #8]
    c540:	2b00      	cmp	r3, #0
    c542:	d00f      	beq.n	c564 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c544:	693b      	ldr	r3, [r7, #16]
    c546:	681b      	ldr	r3, [r3, #0]
    c548:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c54a:	6938      	ldr	r0, [r7, #16]
    c54c:	4b0b      	ldr	r3, [pc, #44]	; (c57c <n25q256a_disable_xip+0x84>)
    c54e:	4798      	blx	r3
			n25q->pin_exit_xip();
    c550:	697b      	ldr	r3, [r7, #20]
    c552:	689b      	ldr	r3, [r3, #8]
    c554:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c556:	68b9      	ldr	r1, [r7, #8]
    c558:	6938      	ldr	r0, [r7, #16]
    c55a:	4b09      	ldr	r3, [pc, #36]	; (c580 <n25q256a_disable_xip+0x88>)
    c55c:	4798      	blx	r3
			qspi_sync_enable(descr);
    c55e:	6938      	ldr	r0, [r7, #16]
    c560:	4b08      	ldr	r3, [pc, #32]	; (c584 <n25q256a_disable_xip+0x8c>)
    c562:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c564:	697b      	ldr	r3, [r7, #20]
    c566:	2200      	movs	r2, #0
    c568:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c56a:	2300      	movs	r3, #0
}
    c56c:	4618      	mov	r0, r3
    c56e:	3718      	adds	r7, #24
    c570:	46bd      	mov	sp, r7
    c572:	bd80      	pop	{r7, pc}
    c574:	0000bd09 	.word	0x0000bd09
    c578:	0000bdd5 	.word	0x0000bdd5
    c57c:	00002c51 	.word	0x00002c51
    c580:	00002bc9 	.word	0x00002bc9
    c584:	00002c15 	.word	0x00002c15

0000c588 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c588:	b480      	push	{r7}
    c58a:	b085      	sub	sp, #20
    c58c:	af00      	add	r7, sp, #0
    c58e:	60f8      	str	r0, [r7, #12]
    c590:	60b9      	str	r1, [r7, #8]
    c592:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c594:	68fb      	ldr	r3, [r7, #12]
    c596:	68ba      	ldr	r2, [r7, #8]
    c598:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c59a:	68fb      	ldr	r3, [r7, #12]
    c59c:	687a      	ldr	r2, [r7, #4]
    c59e:	605a      	str	r2, [r3, #4]

	return me;
    c5a0:	68fb      	ldr	r3, [r7, #12]
}
    c5a2:	4618      	mov	r0, r3
    c5a4:	3714      	adds	r7, #20
    c5a6:	46bd      	mov	sp, r7
    c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5ac:	4770      	bx	lr

0000c5ae <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c5ae:	b480      	push	{r7}
    c5b0:	b083      	sub	sp, #12
    c5b2:	af00      	add	r7, sp, #0
    c5b4:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c5b6:	687b      	ldr	r3, [r7, #4]
    c5b8:	781b      	ldrb	r3, [r3, #0]
    c5ba:	b29a      	uxth	r2, r3
    c5bc:	687b      	ldr	r3, [r7, #4]
    c5be:	3301      	adds	r3, #1
    c5c0:	781b      	ldrb	r3, [r3, #0]
    c5c2:	b29b      	uxth	r3, r3
    c5c4:	021b      	lsls	r3, r3, #8
    c5c6:	b29b      	uxth	r3, r3
    c5c8:	4413      	add	r3, r2
    c5ca:	b29b      	uxth	r3, r3
}
    c5cc:	4618      	mov	r0, r3
    c5ce:	370c      	adds	r7, #12
    c5d0:	46bd      	mov	sp, r7
    c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5d6:	4770      	bx	lr

0000c5d8 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c5d8:	b480      	push	{r7}
    c5da:	b083      	sub	sp, #12
    c5dc:	af00      	add	r7, sp, #0
    c5de:	6078      	str	r0, [r7, #4]
	return desc[0];
    c5e0:	687b      	ldr	r3, [r7, #4]
    c5e2:	781b      	ldrb	r3, [r3, #0]
}
    c5e4:	4618      	mov	r0, r3
    c5e6:	370c      	adds	r7, #12
    c5e8:	46bd      	mov	sp, r7
    c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5ee:	4770      	bx	lr

0000c5f0 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c5f0:	b580      	push	{r7, lr}
    c5f2:	b082      	sub	sp, #8
    c5f4:	af00      	add	r7, sp, #0
    c5f6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c5f8:	6878      	ldr	r0, [r7, #4]
    c5fa:	4b05      	ldr	r3, [pc, #20]	; (c610 <usb_desc_next+0x20>)
    c5fc:	4798      	blx	r3
    c5fe:	4603      	mov	r3, r0
    c600:	461a      	mov	r2, r3
    c602:	687b      	ldr	r3, [r7, #4]
    c604:	4413      	add	r3, r2
}
    c606:	4618      	mov	r0, r3
    c608:	3708      	adds	r7, #8
    c60a:	46bd      	mov	sp, r7
    c60c:	bd80      	pop	{r7, pc}
    c60e:	bf00      	nop
    c610:	0000c5d9 	.word	0x0000c5d9

0000c614 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c614:	b580      	push	{r7, lr}
    c616:	b08c      	sub	sp, #48	; 0x30
    c618:	af00      	add	r7, sp, #0
    c61a:	6078      	str	r0, [r7, #4]
    c61c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c61e:	687b      	ldr	r3, [r7, #4]
    c620:	689b      	ldr	r3, [r3, #8]
    c622:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c624:	683b      	ldr	r3, [r7, #0]
    c626:	681b      	ldr	r3, [r3, #0]
    c628:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c62a:	2300      	movs	r3, #0
    c62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c630:	e08f      	b.n	c752 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c634:	2b00      	cmp	r3, #0
    c636:	d102      	bne.n	c63e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c638:	f06f 0309 	mvn.w	r3, #9
    c63c:	e092      	b.n	c764 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c640:	789b      	ldrb	r3, [r3, #2]
    c642:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c646:	795b      	ldrb	r3, [r3, #5]
    c648:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c64a:	7c7b      	ldrb	r3, [r7, #17]
    c64c:	2b02      	cmp	r3, #2
    c64e:	d002      	beq.n	c656 <cdcdf_acm_enable+0x42>
    c650:	7c7b      	ldrb	r3, [r7, #17]
    c652:	2b0a      	cmp	r3, #10
    c654:	d121      	bne.n	c69a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c65a:	6a3a      	ldr	r2, [r7, #32]
    c65c:	5cd2      	ldrb	r2, [r2, r3]
    c65e:	7bbb      	ldrb	r3, [r7, #14]
    c660:	429a      	cmp	r2, r3
    c662:	d102      	bne.n	c66a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c664:	f06f 0311 	mvn.w	r3, #17
    c668:	e07c      	b.n	c764 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c66a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c66e:	6a3a      	ldr	r2, [r7, #32]
    c670:	5cd3      	ldrb	r3, [r2, r3]
    c672:	2bff      	cmp	r3, #255	; 0xff
    c674:	d002      	beq.n	c67c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c676:	f06f 031b 	mvn.w	r3, #27
    c67a:	e073      	b.n	c764 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c680:	7bb9      	ldrb	r1, [r7, #14]
    c682:	6a3a      	ldr	r2, [r7, #32]
    c684:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c686:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c688:	683b      	ldr	r3, [r7, #0]
    c68a:	685b      	ldr	r3, [r3, #4]
    c68c:	2205      	movs	r2, #5
    c68e:	4619      	mov	r1, r3
    c690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c692:	4b36      	ldr	r3, [pc, #216]	; (c76c <cdcdf_acm_enable+0x158>)
    c694:	4798      	blx	r3
    c696:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c698:	e047      	b.n	c72a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c69a:	f06f 0309 	mvn.w	r3, #9
    c69e:	e061      	b.n	c764 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c6a2:	789b      	ldrb	r3, [r3, #2]
    c6a4:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c6a8:	78db      	ldrb	r3, [r3, #3]
    c6aa:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c6ae:	3304      	adds	r3, #4
    c6b0:	4618      	mov	r0, r3
    c6b2:	4b2f      	ldr	r3, [pc, #188]	; (c770 <cdcdf_acm_enable+0x15c>)
    c6b4:	4798      	blx	r3
    c6b6:	4603      	mov	r3, r0
    c6b8:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c6ba:	7ebb      	ldrb	r3, [r7, #26]
    c6bc:	7ef9      	ldrb	r1, [r7, #27]
    c6be:	8bba      	ldrh	r2, [r7, #28]
    c6c0:	4618      	mov	r0, r3
    c6c2:	4b2c      	ldr	r3, [pc, #176]	; (c774 <cdcdf_acm_enable+0x160>)
    c6c4:	4798      	blx	r3
    c6c6:	4603      	mov	r3, r0
    c6c8:	2b00      	cmp	r3, #0
    c6ca:	d002      	beq.n	c6d2 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c6cc:	f06f 0313 	mvn.w	r3, #19
    c6d0:	e048      	b.n	c764 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c6d2:	7ebb      	ldrb	r3, [r7, #26]
    c6d4:	b25b      	sxtb	r3, r3
    c6d6:	2b00      	cmp	r3, #0
    c6d8:	da0f      	bge.n	c6fa <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c6da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c6de:	7eb9      	ldrb	r1, [r7, #26]
    c6e0:	6a3a      	ldr	r2, [r7, #32]
    c6e2:	4413      	add	r3, r2
    c6e4:	460a      	mov	r2, r1
    c6e6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c6ec:	6a3a      	ldr	r2, [r7, #32]
    c6ee:	4413      	add	r3, r2
    c6f0:	789b      	ldrb	r3, [r3, #2]
    c6f2:	4618      	mov	r0, r3
    c6f4:	4b20      	ldr	r3, [pc, #128]	; (c778 <cdcdf_acm_enable+0x164>)
    c6f6:	4798      	blx	r3
    c6f8:	e007      	b.n	c70a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c6fa:	7eba      	ldrb	r2, [r7, #26]
    c6fc:	6a3b      	ldr	r3, [r7, #32]
    c6fe:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c700:	6a3b      	ldr	r3, [r7, #32]
    c702:	791b      	ldrb	r3, [r3, #4]
    c704:	4618      	mov	r0, r3
    c706:	4b1c      	ldr	r3, [pc, #112]	; (c778 <cdcdf_acm_enable+0x164>)
    c708:	4798      	blx	r3
			}
			desc->sod = ep;
    c70a:	683b      	ldr	r3, [r7, #0]
    c70c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c70e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c710:	683b      	ldr	r3, [r7, #0]
    c712:	681b      	ldr	r3, [r3, #0]
    c714:	4618      	mov	r0, r3
    c716:	4b19      	ldr	r3, [pc, #100]	; (c77c <cdcdf_acm_enable+0x168>)
    c718:	4798      	blx	r3
    c71a:	4602      	mov	r2, r0
    c71c:	683b      	ldr	r3, [r7, #0]
    c71e:	685b      	ldr	r3, [r3, #4]
    c720:	4619      	mov	r1, r3
    c722:	4610      	mov	r0, r2
    c724:	4b16      	ldr	r3, [pc, #88]	; (c780 <cdcdf_acm_enable+0x16c>)
    c726:	4798      	blx	r3
    c728:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c72c:	2b00      	cmp	r3, #0
    c72e:	d1b7      	bne.n	c6a0 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c730:	683b      	ldr	r3, [r7, #0]
    c732:	681b      	ldr	r3, [r3, #0]
    c734:	4618      	mov	r0, r3
    c736:	4b11      	ldr	r3, [pc, #68]	; (c77c <cdcdf_acm_enable+0x168>)
    c738:	4798      	blx	r3
    c73a:	683b      	ldr	r3, [r7, #0]
    c73c:	685b      	ldr	r3, [r3, #4]
    c73e:	2204      	movs	r2, #4
    c740:	4619      	mov	r1, r3
    c742:	4b0a      	ldr	r3, [pc, #40]	; (c76c <cdcdf_acm_enable+0x158>)
    c744:	4798      	blx	r3
    c746:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c74c:	3301      	adds	r3, #1
    c74e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c756:	2b01      	cmp	r3, #1
    c758:	f67f af6b 	bls.w	c632 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c75c:	4b09      	ldr	r3, [pc, #36]	; (c784 <cdcdf_acm_enable+0x170>)
    c75e:	2201      	movs	r2, #1
    c760:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c762:	2300      	movs	r3, #0
}
    c764:	4618      	mov	r0, r3
    c766:	3730      	adds	r7, #48	; 0x30
    c768:	46bd      	mov	sp, r7
    c76a:	bd80      	pop	{r7, pc}
    c76c:	0000d9d5 	.word	0x0000d9d5
    c770:	0000c5af 	.word	0x0000c5af
    c774:	00003841 	.word	0x00003841
    c778:	0000392d 	.word	0x0000392d
    c77c:	0000c5f1 	.word	0x0000c5f1
    c780:	0000da31 	.word	0x0000da31
    c784:	20000e60 	.word	0x20000e60

0000c788 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c788:	b580      	push	{r7, lr}
    c78a:	b088      	sub	sp, #32
    c78c:	af00      	add	r7, sp, #0
    c78e:	6078      	str	r0, [r7, #4]
    c790:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c792:	687b      	ldr	r3, [r7, #4]
    c794:	689b      	ldr	r3, [r3, #8]
    c796:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c798:	683b      	ldr	r3, [r7, #0]
    c79a:	2b00      	cmp	r3, #0
    c79c:	d00c      	beq.n	c7b8 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c79e:	683b      	ldr	r3, [r7, #0]
    c7a0:	681b      	ldr	r3, [r3, #0]
    c7a2:	795b      	ldrb	r3, [r3, #5]
    c7a4:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c7a6:	7c7b      	ldrb	r3, [r7, #17]
    c7a8:	2b02      	cmp	r3, #2
    c7aa:	d005      	beq.n	c7b8 <cdcdf_acm_disable+0x30>
    c7ac:	7c7b      	ldrb	r3, [r7, #17]
    c7ae:	2b0a      	cmp	r3, #10
    c7b0:	d002      	beq.n	c7b8 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c7b2:	f06f 0309 	mvn.w	r3, #9
    c7b6:	e035      	b.n	c824 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c7b8:	2300      	movs	r3, #0
    c7ba:	77fb      	strb	r3, [r7, #31]
    c7bc:	e01f      	b.n	c7fe <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c7be:	7ffb      	ldrb	r3, [r7, #31]
    c7c0:	69ba      	ldr	r2, [r7, #24]
    c7c2:	5cd3      	ldrb	r3, [r2, r3]
    c7c4:	2bff      	cmp	r3, #255	; 0xff
    c7c6:	d016      	beq.n	c7f6 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c7c8:	7ffb      	ldrb	r3, [r7, #31]
    c7ca:	69ba      	ldr	r2, [r7, #24]
    c7cc:	21ff      	movs	r1, #255	; 0xff
    c7ce:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c7d0:	7ffb      	ldrb	r3, [r7, #31]
    c7d2:	69ba      	ldr	r2, [r7, #24]
    c7d4:	4413      	add	r3, r2
    c7d6:	789b      	ldrb	r3, [r3, #2]
    c7d8:	2bff      	cmp	r3, #255	; 0xff
    c7da:	d00d      	beq.n	c7f8 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c7dc:	7ffb      	ldrb	r3, [r7, #31]
    c7de:	69ba      	ldr	r2, [r7, #24]
    c7e0:	4413      	add	r3, r2
    c7e2:	789b      	ldrb	r3, [r3, #2]
    c7e4:	4618      	mov	r0, r3
    c7e6:	4b11      	ldr	r3, [pc, #68]	; (c82c <cdcdf_acm_disable+0xa4>)
    c7e8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c7ea:	7ffb      	ldrb	r3, [r7, #31]
    c7ec:	69ba      	ldr	r2, [r7, #24]
    c7ee:	4413      	add	r3, r2
    c7f0:	22ff      	movs	r2, #255	; 0xff
    c7f2:	709a      	strb	r2, [r3, #2]
    c7f4:	e000      	b.n	c7f8 <cdcdf_acm_disable+0x70>
			continue;
    c7f6:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c7f8:	7ffb      	ldrb	r3, [r7, #31]
    c7fa:	3301      	adds	r3, #1
    c7fc:	77fb      	strb	r3, [r7, #31]
    c7fe:	7ffb      	ldrb	r3, [r7, #31]
    c800:	2b01      	cmp	r3, #1
    c802:	d9dc      	bls.n	c7be <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c804:	69bb      	ldr	r3, [r7, #24]
    c806:	791b      	ldrb	r3, [r3, #4]
    c808:	2bff      	cmp	r3, #255	; 0xff
    c80a:	d007      	beq.n	c81c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c80c:	69bb      	ldr	r3, [r7, #24]
    c80e:	791b      	ldrb	r3, [r3, #4]
    c810:	4618      	mov	r0, r3
    c812:	4b06      	ldr	r3, [pc, #24]	; (c82c <cdcdf_acm_disable+0xa4>)
    c814:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c816:	69bb      	ldr	r3, [r7, #24]
    c818:	22ff      	movs	r2, #255	; 0xff
    c81a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c81c:	4b04      	ldr	r3, [pc, #16]	; (c830 <cdcdf_acm_disable+0xa8>)
    c81e:	2200      	movs	r2, #0
    c820:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c822:	2300      	movs	r3, #0
}
    c824:	4618      	mov	r0, r3
    c826:	3720      	adds	r7, #32
    c828:	46bd      	mov	sp, r7
    c82a:	bd80      	pop	{r7, pc}
    c82c:	000038dd 	.word	0x000038dd
    c830:	20000e60 	.word	0x20000e60

0000c834 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c834:	b580      	push	{r7, lr}
    c836:	b084      	sub	sp, #16
    c838:	af00      	add	r7, sp, #0
    c83a:	60f8      	str	r0, [r7, #12]
    c83c:	460b      	mov	r3, r1
    c83e:	607a      	str	r2, [r7, #4]
    c840:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c842:	7afb      	ldrb	r3, [r7, #11]
    c844:	2b01      	cmp	r3, #1
    c846:	d009      	beq.n	c85c <cdcdf_acm_ctrl+0x28>
    c848:	2b02      	cmp	r3, #2
    c84a:	d00d      	beq.n	c868 <cdcdf_acm_ctrl+0x34>
    c84c:	2b00      	cmp	r3, #0
    c84e:	d10e      	bne.n	c86e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c850:	6879      	ldr	r1, [r7, #4]
    c852:	68f8      	ldr	r0, [r7, #12]
    c854:	4b09      	ldr	r3, [pc, #36]	; (c87c <cdcdf_acm_ctrl+0x48>)
    c856:	4798      	blx	r3
    c858:	4603      	mov	r3, r0
    c85a:	e00a      	b.n	c872 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c85c:	6879      	ldr	r1, [r7, #4]
    c85e:	68f8      	ldr	r0, [r7, #12]
    c860:	4b07      	ldr	r3, [pc, #28]	; (c880 <cdcdf_acm_ctrl+0x4c>)
    c862:	4798      	blx	r3
    c864:	4603      	mov	r3, r0
    c866:	e004      	b.n	c872 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c868:	f06f 031a 	mvn.w	r3, #26
    c86c:	e001      	b.n	c872 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c86e:	f06f 030c 	mvn.w	r3, #12
	}
}
    c872:	4618      	mov	r0, r3
    c874:	3710      	adds	r7, #16
    c876:	46bd      	mov	sp, r7
    c878:	bd80      	pop	{r7, pc}
    c87a:	bf00      	nop
    c87c:	0000c615 	.word	0x0000c615
    c880:	0000c789 	.word	0x0000c789

0000c884 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c884:	b590      	push	{r4, r7, lr}
    c886:	b087      	sub	sp, #28
    c888:	af00      	add	r7, sp, #0
    c88a:	4603      	mov	r3, r0
    c88c:	6039      	str	r1, [r7, #0]
    c88e:	71fb      	strb	r3, [r7, #7]
    c890:	4613      	mov	r3, r2
    c892:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c894:	683b      	ldr	r3, [r7, #0]
    c896:	799a      	ldrb	r2, [r3, #6]
    c898:	79db      	ldrb	r3, [r3, #7]
    c89a:	021b      	lsls	r3, r3, #8
    c89c:	4313      	orrs	r3, r2
    c89e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c8a0:	4b2b      	ldr	r3, [pc, #172]	; (c950 <cdcdf_acm_set_req+0xcc>)
    c8a2:	4798      	blx	r3
    c8a4:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c8a6:	683b      	ldr	r3, [r7, #0]
    c8a8:	785b      	ldrb	r3, [r3, #1]
    c8aa:	2b20      	cmp	r3, #32
    c8ac:	d002      	beq.n	c8b4 <cdcdf_acm_set_req+0x30>
    c8ae:	2b22      	cmp	r3, #34	; 0x22
    c8b0:	d034      	beq.n	c91c <cdcdf_acm_set_req+0x98>
    c8b2:	e046      	b.n	c942 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c8b4:	8afb      	ldrh	r3, [r7, #22]
    c8b6:	2b07      	cmp	r3, #7
    c8b8:	d002      	beq.n	c8c0 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c8ba:	f04f 33ff 	mov.w	r3, #4294967295
    c8be:	e042      	b.n	c946 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c8c0:	79bb      	ldrb	r3, [r7, #6]
    c8c2:	2b00      	cmp	r3, #0
    c8c4:	d107      	bne.n	c8d6 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c8c6:	8afa      	ldrh	r2, [r7, #22]
    c8c8:	79f8      	ldrb	r0, [r7, #7]
    c8ca:	2300      	movs	r3, #0
    c8cc:	6939      	ldr	r1, [r7, #16]
    c8ce:	4c21      	ldr	r4, [pc, #132]	; (c954 <cdcdf_acm_set_req+0xd0>)
    c8d0:	47a0      	blx	r4
    c8d2:	4603      	mov	r3, r0
    c8d4:	e037      	b.n	c946 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c8d6:	693a      	ldr	r2, [r7, #16]
    c8d8:	f107 0308 	add.w	r3, r7, #8
    c8dc:	6810      	ldr	r0, [r2, #0]
    c8de:	6018      	str	r0, [r3, #0]
    c8e0:	8891      	ldrh	r1, [r2, #4]
    c8e2:	7992      	ldrb	r2, [r2, #6]
    c8e4:	8099      	strh	r1, [r3, #4]
    c8e6:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c8e8:	4b1b      	ldr	r3, [pc, #108]	; (c958 <cdcdf_acm_set_req+0xd4>)
    c8ea:	681b      	ldr	r3, [r3, #0]
    c8ec:	2b00      	cmp	r3, #0
    c8ee:	d008      	beq.n	c902 <cdcdf_acm_set_req+0x7e>
    c8f0:	4b19      	ldr	r3, [pc, #100]	; (c958 <cdcdf_acm_set_req+0xd4>)
    c8f2:	681b      	ldr	r3, [r3, #0]
    c8f4:	f107 0208 	add.w	r2, r7, #8
    c8f8:	4610      	mov	r0, r2
    c8fa:	4798      	blx	r3
    c8fc:	4603      	mov	r3, r0
    c8fe:	2b00      	cmp	r3, #0
    c900:	d00a      	beq.n	c918 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c902:	4b16      	ldr	r3, [pc, #88]	; (c95c <cdcdf_acm_set_req+0xd8>)
    c904:	f107 0208 	add.w	r2, r7, #8
    c908:	e892 0003 	ldmia.w	r2, {r0, r1}
    c90c:	6018      	str	r0, [r3, #0]
    c90e:	3304      	adds	r3, #4
    c910:	8019      	strh	r1, [r3, #0]
    c912:	3302      	adds	r3, #2
    c914:	0c0a      	lsrs	r2, r1, #16
    c916:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c918:	2300      	movs	r3, #0
    c91a:	e014      	b.n	c946 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c91c:	2300      	movs	r3, #0
    c91e:	2200      	movs	r2, #0
    c920:	2100      	movs	r1, #0
    c922:	2000      	movs	r0, #0
    c924:	4c0b      	ldr	r4, [pc, #44]	; (c954 <cdcdf_acm_set_req+0xd0>)
    c926:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c928:	4b0d      	ldr	r3, [pc, #52]	; (c960 <cdcdf_acm_set_req+0xdc>)
    c92a:	681b      	ldr	r3, [r3, #0]
    c92c:	2b00      	cmp	r3, #0
    c92e:	d006      	beq.n	c93e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c930:	4b0b      	ldr	r3, [pc, #44]	; (c960 <cdcdf_acm_set_req+0xdc>)
    c932:	681b      	ldr	r3, [r3, #0]
    c934:	683a      	ldr	r2, [r7, #0]
    c936:	8852      	ldrh	r2, [r2, #2]
    c938:	b292      	uxth	r2, r2
    c93a:	4610      	mov	r0, r2
    c93c:	4798      	blx	r3
		}
		return ERR_NONE;
    c93e:	2300      	movs	r3, #0
    c940:	e001      	b.n	c946 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c942:	f06f 030c 	mvn.w	r3, #12
	}
}
    c946:	4618      	mov	r0, r3
    c948:	371c      	adds	r7, #28
    c94a:	46bd      	mov	sp, r7
    c94c:	bd90      	pop	{r4, r7, pc}
    c94e:	bf00      	nop
    c950:	0000d8d1 	.word	0x0000d8d1
    c954:	0000d745 	.word	0x0000d745
    c958:	20000e74 	.word	0x20000e74
    c95c:	20000e68 	.word	0x20000e68
    c960:	20000e70 	.word	0x20000e70

0000c964 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c964:	b590      	push	{r4, r7, lr}
    c966:	b085      	sub	sp, #20
    c968:	af00      	add	r7, sp, #0
    c96a:	4603      	mov	r3, r0
    c96c:	6039      	str	r1, [r7, #0]
    c96e:	71fb      	strb	r3, [r7, #7]
    c970:	4613      	mov	r3, r2
    c972:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c974:	683b      	ldr	r3, [r7, #0]
    c976:	799a      	ldrb	r2, [r3, #6]
    c978:	79db      	ldrb	r3, [r3, #7]
    c97a:	021b      	lsls	r3, r3, #8
    c97c:	4313      	orrs	r3, r2
    c97e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c980:	79bb      	ldrb	r3, [r7, #6]
    c982:	2b01      	cmp	r3, #1
    c984:	d101      	bne.n	c98a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c986:	2300      	movs	r3, #0
    c988:	e013      	b.n	c9b2 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c98a:	683b      	ldr	r3, [r7, #0]
    c98c:	785b      	ldrb	r3, [r3, #1]
    c98e:	2b21      	cmp	r3, #33	; 0x21
    c990:	d10d      	bne.n	c9ae <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c992:	89fb      	ldrh	r3, [r7, #14]
    c994:	2b07      	cmp	r3, #7
    c996:	d002      	beq.n	c99e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c998:	f04f 33ff 	mov.w	r3, #4294967295
    c99c:	e009      	b.n	c9b2 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c99e:	89fa      	ldrh	r2, [r7, #14]
    c9a0:	79f8      	ldrb	r0, [r7, #7]
    c9a2:	2300      	movs	r3, #0
    c9a4:	4905      	ldr	r1, [pc, #20]	; (c9bc <cdcdf_acm_get_req+0x58>)
    c9a6:	4c06      	ldr	r4, [pc, #24]	; (c9c0 <cdcdf_acm_get_req+0x5c>)
    c9a8:	47a0      	blx	r4
    c9aa:	4603      	mov	r3, r0
    c9ac:	e001      	b.n	c9b2 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c9ae:	f06f 030c 	mvn.w	r3, #12
	}
}
    c9b2:	4618      	mov	r0, r3
    c9b4:	3714      	adds	r7, #20
    c9b6:	46bd      	mov	sp, r7
    c9b8:	bd90      	pop	{r4, r7, pc}
    c9ba:	bf00      	nop
    c9bc:	20000e68 	.word	0x20000e68
    c9c0:	0000d745 	.word	0x0000d745

0000c9c4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c9c4:	b580      	push	{r7, lr}
    c9c6:	b082      	sub	sp, #8
    c9c8:	af00      	add	r7, sp, #0
    c9ca:	4603      	mov	r3, r0
    c9cc:	6039      	str	r1, [r7, #0]
    c9ce:	71fb      	strb	r3, [r7, #7]
    c9d0:	4613      	mov	r3, r2
    c9d2:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c9d4:	683b      	ldr	r3, [r7, #0]
    c9d6:	781b      	ldrb	r3, [r3, #0]
    c9d8:	095b      	lsrs	r3, r3, #5
    c9da:	b2db      	uxtb	r3, r3
    c9dc:	f003 0303 	and.w	r3, r3, #3
    c9e0:	2b01      	cmp	r3, #1
    c9e2:	d002      	beq.n	c9ea <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c9e4:	f06f 0309 	mvn.w	r3, #9
    c9e8:	e026      	b.n	ca38 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c9ea:	683b      	ldr	r3, [r7, #0]
    c9ec:	889b      	ldrh	r3, [r3, #4]
    c9ee:	b29a      	uxth	r2, r3
    c9f0:	4b13      	ldr	r3, [pc, #76]	; (ca40 <cdcdf_acm_req+0x7c>)
    c9f2:	781b      	ldrb	r3, [r3, #0]
    c9f4:	b29b      	uxth	r3, r3
    c9f6:	429a      	cmp	r2, r3
    c9f8:	d007      	beq.n	ca0a <cdcdf_acm_req+0x46>
    c9fa:	683b      	ldr	r3, [r7, #0]
    c9fc:	889b      	ldrh	r3, [r3, #4]
    c9fe:	b29a      	uxth	r2, r3
    ca00:	4b0f      	ldr	r3, [pc, #60]	; (ca40 <cdcdf_acm_req+0x7c>)
    ca02:	785b      	ldrb	r3, [r3, #1]
    ca04:	b29b      	uxth	r3, r3
    ca06:	429a      	cmp	r2, r3
    ca08:	d114      	bne.n	ca34 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    ca0a:	683b      	ldr	r3, [r7, #0]
    ca0c:	781b      	ldrb	r3, [r3, #0]
    ca0e:	b25b      	sxtb	r3, r3
    ca10:	2b00      	cmp	r3, #0
    ca12:	da07      	bge.n	ca24 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    ca14:	79ba      	ldrb	r2, [r7, #6]
    ca16:	79fb      	ldrb	r3, [r7, #7]
    ca18:	6839      	ldr	r1, [r7, #0]
    ca1a:	4618      	mov	r0, r3
    ca1c:	4b09      	ldr	r3, [pc, #36]	; (ca44 <cdcdf_acm_req+0x80>)
    ca1e:	4798      	blx	r3
    ca20:	4603      	mov	r3, r0
    ca22:	e009      	b.n	ca38 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    ca24:	79ba      	ldrb	r2, [r7, #6]
    ca26:	79fb      	ldrb	r3, [r7, #7]
    ca28:	6839      	ldr	r1, [r7, #0]
    ca2a:	4618      	mov	r0, r3
    ca2c:	4b06      	ldr	r3, [pc, #24]	; (ca48 <cdcdf_acm_req+0x84>)
    ca2e:	4798      	blx	r3
    ca30:	4603      	mov	r3, r0
    ca32:	e001      	b.n	ca38 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    ca34:	f06f 0309 	mvn.w	r3, #9
	}
}
    ca38:	4618      	mov	r0, r3
    ca3a:	3708      	adds	r7, #8
    ca3c:	46bd      	mov	sp, r7
    ca3e:	bd80      	pop	{r7, pc}
    ca40:	20000e60 	.word	0x20000e60
    ca44:	0000c965 	.word	0x0000c965
    ca48:	0000c885 	.word	0x0000c885

0000ca4c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    ca4c:	b580      	push	{r7, lr}
    ca4e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    ca50:	4b0b      	ldr	r3, [pc, #44]	; (ca80 <cdcdf_acm_init+0x34>)
    ca52:	4798      	blx	r3
    ca54:	4603      	mov	r3, r0
    ca56:	2b01      	cmp	r3, #1
    ca58:	d902      	bls.n	ca60 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    ca5a:	f06f 0310 	mvn.w	r3, #16
    ca5e:	e00d      	b.n	ca7c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    ca60:	4b08      	ldr	r3, [pc, #32]	; (ca84 <cdcdf_acm_init+0x38>)
    ca62:	4a09      	ldr	r2, [pc, #36]	; (ca88 <cdcdf_acm_init+0x3c>)
    ca64:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    ca66:	4b07      	ldr	r3, [pc, #28]	; (ca84 <cdcdf_acm_init+0x38>)
    ca68:	4a08      	ldr	r2, [pc, #32]	; (ca8c <cdcdf_acm_init+0x40>)
    ca6a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    ca6c:	4805      	ldr	r0, [pc, #20]	; (ca84 <cdcdf_acm_init+0x38>)
    ca6e:	4b08      	ldr	r3, [pc, #32]	; (ca90 <cdcdf_acm_init+0x44>)
    ca70:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    ca72:	4908      	ldr	r1, [pc, #32]	; (ca94 <cdcdf_acm_init+0x48>)
    ca74:	2001      	movs	r0, #1
    ca76:	4b08      	ldr	r3, [pc, #32]	; (ca98 <cdcdf_acm_init+0x4c>)
    ca78:	4798      	blx	r3
	return ERR_NONE;
    ca7a:	2300      	movs	r3, #0
}
    ca7c:	4618      	mov	r0, r3
    ca7e:	bd80      	pop	{r7, pc}
    ca80:	0000d8e9 	.word	0x0000d8e9
    ca84:	20000e54 	.word	0x20000e54
    ca88:	0000c835 	.word	0x0000c835
    ca8c:	20000e60 	.word	0x20000e60
    ca90:	0000d851 	.word	0x0000d851
    ca94:	200001d8 	.word	0x200001d8
    ca98:	0000d781 	.word	0x0000d781

0000ca9c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    ca9c:	b590      	push	{r4, r7, lr}
    ca9e:	b083      	sub	sp, #12
    caa0:	af00      	add	r7, sp, #0
    caa2:	6078      	str	r0, [r7, #4]
    caa4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    caa6:	4b0b      	ldr	r3, [pc, #44]	; (cad4 <cdcdf_acm_read+0x38>)
    caa8:	4798      	blx	r3
    caaa:	4603      	mov	r3, r0
    caac:	f083 0301 	eor.w	r3, r3, #1
    cab0:	b2db      	uxtb	r3, r3
    cab2:	2b00      	cmp	r3, #0
    cab4:	d002      	beq.n	cabc <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    cab6:	f06f 0310 	mvn.w	r3, #16
    caba:	e007      	b.n	cacc <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    cabc:	4b06      	ldr	r3, [pc, #24]	; (cad8 <cdcdf_acm_read+0x3c>)
    cabe:	7918      	ldrb	r0, [r3, #4]
    cac0:	2300      	movs	r3, #0
    cac2:	683a      	ldr	r2, [r7, #0]
    cac4:	6879      	ldr	r1, [r7, #4]
    cac6:	4c05      	ldr	r4, [pc, #20]	; (cadc <cdcdf_acm_read+0x40>)
    cac8:	47a0      	blx	r4
    caca:	4603      	mov	r3, r0
}
    cacc:	4618      	mov	r0, r3
    cace:	370c      	adds	r7, #12
    cad0:	46bd      	mov	sp, r7
    cad2:	bd90      	pop	{r4, r7, pc}
    cad4:	0000cbc1 	.word	0x0000cbc1
    cad8:	20000e60 	.word	0x20000e60
    cadc:	0000d745 	.word	0x0000d745

0000cae0 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    cae0:	b590      	push	{r4, r7, lr}
    cae2:	b083      	sub	sp, #12
    cae4:	af00      	add	r7, sp, #0
    cae6:	6078      	str	r0, [r7, #4]
    cae8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    caea:	4b0b      	ldr	r3, [pc, #44]	; (cb18 <cdcdf_acm_write+0x38>)
    caec:	4798      	blx	r3
    caee:	4603      	mov	r3, r0
    caf0:	f083 0301 	eor.w	r3, r3, #1
    caf4:	b2db      	uxtb	r3, r3
    caf6:	2b00      	cmp	r3, #0
    caf8:	d002      	beq.n	cb00 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    cafa:	f06f 0310 	mvn.w	r3, #16
    cafe:	e007      	b.n	cb10 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    cb00:	4b06      	ldr	r3, [pc, #24]	; (cb1c <cdcdf_acm_write+0x3c>)
    cb02:	78d8      	ldrb	r0, [r3, #3]
    cb04:	2301      	movs	r3, #1
    cb06:	683a      	ldr	r2, [r7, #0]
    cb08:	6879      	ldr	r1, [r7, #4]
    cb0a:	4c05      	ldr	r4, [pc, #20]	; (cb20 <cdcdf_acm_write+0x40>)
    cb0c:	47a0      	blx	r4
    cb0e:	4603      	mov	r3, r0
}
    cb10:	4618      	mov	r0, r3
    cb12:	370c      	adds	r7, #12
    cb14:	46bd      	mov	sp, r7
    cb16:	bd90      	pop	{r4, r7, pc}
    cb18:	0000cbc1 	.word	0x0000cbc1
    cb1c:	20000e60 	.word	0x20000e60
    cb20:	0000d745 	.word	0x0000d745

0000cb24 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    cb24:	b580      	push	{r7, lr}
    cb26:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    cb28:	4b05      	ldr	r3, [pc, #20]	; (cb40 <cdcdf_acm_stop_xfer+0x1c>)
    cb2a:	78db      	ldrb	r3, [r3, #3]
    cb2c:	4618      	mov	r0, r3
    cb2e:	4b05      	ldr	r3, [pc, #20]	; (cb44 <cdcdf_acm_stop_xfer+0x20>)
    cb30:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    cb32:	4b03      	ldr	r3, [pc, #12]	; (cb40 <cdcdf_acm_stop_xfer+0x1c>)
    cb34:	791b      	ldrb	r3, [r3, #4]
    cb36:	4618      	mov	r0, r3
    cb38:	4b02      	ldr	r3, [pc, #8]	; (cb44 <cdcdf_acm_stop_xfer+0x20>)
    cb3a:	4798      	blx	r3
}
    cb3c:	bf00      	nop
    cb3e:	bd80      	pop	{r7, pc}
    cb40:	20000e60 	.word	0x20000e60
    cb44:	00003b05 	.word	0x00003b05

0000cb48 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    cb48:	b580      	push	{r7, lr}
    cb4a:	b082      	sub	sp, #8
    cb4c:	af00      	add	r7, sp, #0
    cb4e:	4603      	mov	r3, r0
    cb50:	6039      	str	r1, [r7, #0]
    cb52:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    cb54:	79fb      	ldrb	r3, [r7, #7]
    cb56:	2b03      	cmp	r3, #3
    cb58:	d822      	bhi.n	cba0 <cdcdf_acm_register_callback+0x58>
    cb5a:	a201      	add	r2, pc, #4	; (adr r2, cb60 <cdcdf_acm_register_callback+0x18>)
    cb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb60:	0000cb71 	.word	0x0000cb71
    cb64:	0000cb81 	.word	0x0000cb81
    cb68:	0000cb91 	.word	0x0000cb91
    cb6c:	0000cb99 	.word	0x0000cb99
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    cb70:	4b0f      	ldr	r3, [pc, #60]	; (cbb0 <cdcdf_acm_register_callback+0x68>)
    cb72:	791b      	ldrb	r3, [r3, #4]
    cb74:	683a      	ldr	r2, [r7, #0]
    cb76:	2102      	movs	r1, #2
    cb78:	4618      	mov	r0, r3
    cb7a:	4b0e      	ldr	r3, [pc, #56]	; (cbb4 <cdcdf_acm_register_callback+0x6c>)
    cb7c:	4798      	blx	r3
		break;
    cb7e:	e012      	b.n	cba6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    cb80:	4b0b      	ldr	r3, [pc, #44]	; (cbb0 <cdcdf_acm_register_callback+0x68>)
    cb82:	78db      	ldrb	r3, [r3, #3]
    cb84:	683a      	ldr	r2, [r7, #0]
    cb86:	2102      	movs	r1, #2
    cb88:	4618      	mov	r0, r3
    cb8a:	4b0a      	ldr	r3, [pc, #40]	; (cbb4 <cdcdf_acm_register_callback+0x6c>)
    cb8c:	4798      	blx	r3
		break;
    cb8e:	e00a      	b.n	cba6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    cb90:	4a09      	ldr	r2, [pc, #36]	; (cbb8 <cdcdf_acm_register_callback+0x70>)
    cb92:	683b      	ldr	r3, [r7, #0]
    cb94:	6013      	str	r3, [r2, #0]
		break;
    cb96:	e006      	b.n	cba6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    cb98:	4a08      	ldr	r2, [pc, #32]	; (cbbc <cdcdf_acm_register_callback+0x74>)
    cb9a:	683b      	ldr	r3, [r7, #0]
    cb9c:	6013      	str	r3, [r2, #0]
		break;
    cb9e:	e002      	b.n	cba6 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    cba0:	f06f 030c 	mvn.w	r3, #12
    cba4:	e000      	b.n	cba8 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    cba6:	2300      	movs	r3, #0
}
    cba8:	4618      	mov	r0, r3
    cbaa:	3708      	adds	r7, #8
    cbac:	46bd      	mov	sp, r7
    cbae:	bd80      	pop	{r7, pc}
    cbb0:	20000e60 	.word	0x20000e60
    cbb4:	00003c31 	.word	0x00003c31
    cbb8:	20000e74 	.word	0x20000e74
    cbbc:	20000e70 	.word	0x20000e70

0000cbc0 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    cbc0:	b480      	push	{r7}
    cbc2:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    cbc4:	4b03      	ldr	r3, [pc, #12]	; (cbd4 <cdcdf_acm_is_enabled+0x14>)
    cbc6:	795b      	ldrb	r3, [r3, #5]
}
    cbc8:	4618      	mov	r0, r3
    cbca:	46bd      	mov	sp, r7
    cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbd0:	4770      	bx	lr
    cbd2:	bf00      	nop
    cbd4:	20000e60 	.word	0x20000e60

0000cbd8 <usb_get_u16>:
{
    cbd8:	b480      	push	{r7}
    cbda:	b083      	sub	sp, #12
    cbdc:	af00      	add	r7, sp, #0
    cbde:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cbe0:	687b      	ldr	r3, [r7, #4]
    cbe2:	781b      	ldrb	r3, [r3, #0]
    cbe4:	b29a      	uxth	r2, r3
    cbe6:	687b      	ldr	r3, [r7, #4]
    cbe8:	3301      	adds	r3, #1
    cbea:	781b      	ldrb	r3, [r3, #0]
    cbec:	b29b      	uxth	r3, r3
    cbee:	021b      	lsls	r3, r3, #8
    cbf0:	b29b      	uxth	r3, r3
    cbf2:	4413      	add	r3, r2
    cbf4:	b29b      	uxth	r3, r3
}
    cbf6:	4618      	mov	r0, r3
    cbf8:	370c      	adds	r7, #12
    cbfa:	46bd      	mov	sp, r7
    cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc00:	4770      	bx	lr

0000cc02 <usb_desc_len>:
{
    cc02:	b480      	push	{r7}
    cc04:	b083      	sub	sp, #12
    cc06:	af00      	add	r7, sp, #0
    cc08:	6078      	str	r0, [r7, #4]
	return desc[0];
    cc0a:	687b      	ldr	r3, [r7, #4]
    cc0c:	781b      	ldrb	r3, [r3, #0]
}
    cc0e:	4618      	mov	r0, r3
    cc10:	370c      	adds	r7, #12
    cc12:	46bd      	mov	sp, r7
    cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc18:	4770      	bx	lr
	...

0000cc1c <usb_desc_next>:
{
    cc1c:	b580      	push	{r7, lr}
    cc1e:	b082      	sub	sp, #8
    cc20:	af00      	add	r7, sp, #0
    cc22:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cc24:	6878      	ldr	r0, [r7, #4]
    cc26:	4b05      	ldr	r3, [pc, #20]	; (cc3c <usb_desc_next+0x20>)
    cc28:	4798      	blx	r3
    cc2a:	4603      	mov	r3, r0
    cc2c:	461a      	mov	r2, r3
    cc2e:	687b      	ldr	r3, [r7, #4]
    cc30:	4413      	add	r3, r2
}
    cc32:	4618      	mov	r0, r3
    cc34:	3708      	adds	r7, #8
    cc36:	46bd      	mov	sp, r7
    cc38:	bd80      	pop	{r7, pc}
    cc3a:	bf00      	nop
    cc3c:	0000cc03 	.word	0x0000cc03

0000cc40 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    cc40:	b580      	push	{r7, lr}
    cc42:	b082      	sub	sp, #8
    cc44:	af00      	add	r7, sp, #0
    cc46:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cc48:	687b      	ldr	r3, [r7, #4]
    cc4a:	3302      	adds	r3, #2
    cc4c:	4618      	mov	r0, r3
    cc4e:	4b03      	ldr	r3, [pc, #12]	; (cc5c <usb_cfg_desc_total_len+0x1c>)
    cc50:	4798      	blx	r3
    cc52:	4603      	mov	r3, r0
}
    cc54:	4618      	mov	r0, r3
    cc56:	3708      	adds	r7, #8
    cc58:	46bd      	mov	sp, r7
    cc5a:	bd80      	pop	{r7, pc}
    cc5c:	0000cbd9 	.word	0x0000cbd9

0000cc60 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    cc60:	b590      	push	{r4, r7, lr}
    cc62:	b085      	sub	sp, #20
    cc64:	af00      	add	r7, sp, #0
    cc66:	4603      	mov	r3, r0
    cc68:	6039      	str	r1, [r7, #0]
    cc6a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    cc6c:	2300      	movs	r3, #0
    cc6e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    cc70:	683b      	ldr	r3, [r7, #0]
    cc72:	799a      	ldrb	r2, [r3, #6]
    cc74:	79db      	ldrb	r3, [r3, #7]
    cc76:	021b      	lsls	r3, r3, #8
    cc78:	4313      	orrs	r3, r2
    cc7a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    cc7c:	897b      	ldrh	r3, [r7, #10]
    cc7e:	2b12      	cmp	r3, #18
    cc80:	d901      	bls.n	cc86 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    cc82:	2312      	movs	r3, #18
    cc84:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    cc86:	68fb      	ldr	r3, [r7, #12]
    cc88:	2b00      	cmp	r3, #0
    cc8a:	d10a      	bne.n	cca2 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    cc8c:	4b0f      	ldr	r3, [pc, #60]	; (cccc <usbdc_get_dev_desc+0x6c>)
    cc8e:	681b      	ldr	r3, [r3, #0]
    cc90:	6818      	ldr	r0, [r3, #0]
    cc92:	4b0e      	ldr	r3, [pc, #56]	; (cccc <usbdc_get_dev_desc+0x6c>)
    cc94:	681b      	ldr	r3, [r3, #0]
    cc96:	685b      	ldr	r3, [r3, #4]
    cc98:	2201      	movs	r2, #1
    cc9a:	4619      	mov	r1, r3
    cc9c:	4b0c      	ldr	r3, [pc, #48]	; (ccd0 <usbdc_get_dev_desc+0x70>)
    cc9e:	4798      	blx	r3
    cca0:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    cca2:	68fb      	ldr	r3, [r7, #12]
    cca4:	2b00      	cmp	r3, #0
    cca6:	d101      	bne.n	ccac <usbdc_get_dev_desc+0x4c>
		return false;
    cca8:	2300      	movs	r3, #0
    ccaa:	e00b      	b.n	ccc4 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    ccac:	897a      	ldrh	r2, [r7, #10]
    ccae:	79f8      	ldrb	r0, [r7, #7]
    ccb0:	2300      	movs	r3, #0
    ccb2:	68f9      	ldr	r1, [r7, #12]
    ccb4:	4c07      	ldr	r4, [pc, #28]	; (ccd4 <usbdc_get_dev_desc+0x74>)
    ccb6:	47a0      	blx	r4
    ccb8:	4603      	mov	r3, r0
    ccba:	2b00      	cmp	r3, #0
    ccbc:	d001      	beq.n	ccc2 <usbdc_get_dev_desc+0x62>
		return false;
    ccbe:	2300      	movs	r3, #0
    ccc0:	e000      	b.n	ccc4 <usbdc_get_dev_desc+0x64>
	}
	return true;
    ccc2:	2301      	movs	r3, #1
}
    ccc4:	4618      	mov	r0, r3
    ccc6:	3714      	adds	r7, #20
    ccc8:	46bd      	mov	sp, r7
    ccca:	bd90      	pop	{r4, r7, pc}
    cccc:	20000e78 	.word	0x20000e78
    ccd0:	0000d9d5 	.word	0x0000d9d5
    ccd4:	0000d745 	.word	0x0000d745

0000ccd8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    ccd8:	b590      	push	{r4, r7, lr}
    ccda:	b087      	sub	sp, #28
    ccdc:	af00      	add	r7, sp, #0
    ccde:	4603      	mov	r3, r0
    cce0:	6039      	str	r1, [r7, #0]
    cce2:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    cce4:	2300      	movs	r3, #0
    cce6:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    cce8:	683b      	ldr	r3, [r7, #0]
    ccea:	799a      	ldrb	r2, [r3, #6]
    ccec:	79db      	ldrb	r3, [r3, #7]
    ccee:	021b      	lsls	r3, r3, #8
    ccf0:	4313      	orrs	r3, r2
    ccf2:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    ccf4:	683b      	ldr	r3, [r7, #0]
    ccf6:	885b      	ldrh	r3, [r3, #2]
    ccf8:	b29b      	uxth	r3, r3
    ccfa:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ccfc:	8a7a      	ldrh	r2, [r7, #18]
    ccfe:	4b1e      	ldr	r3, [pc, #120]	; (cd78 <usbdc_get_cfg_desc+0xa0>)
    cd00:	7f1b      	ldrb	r3, [r3, #28]
    cd02:	3b01      	subs	r3, #1
    cd04:	4013      	ands	r3, r2
    cd06:	2b00      	cmp	r3, #0
    cd08:	bf0c      	ite	eq
    cd0a:	2301      	moveq	r3, #1
    cd0c:	2300      	movne	r3, #0
    cd0e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cd10:	697b      	ldr	r3, [r7, #20]
    cd12:	2b00      	cmp	r3, #0
    cd14:	d10c      	bne.n	cd30 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    cd16:	4b18      	ldr	r3, [pc, #96]	; (cd78 <usbdc_get_cfg_desc+0xa0>)
    cd18:	681b      	ldr	r3, [r3, #0]
    cd1a:	6818      	ldr	r0, [r3, #0]
    cd1c:	4b16      	ldr	r3, [pc, #88]	; (cd78 <usbdc_get_cfg_desc+0xa0>)
    cd1e:	681b      	ldr	r3, [r3, #0]
    cd20:	6859      	ldr	r1, [r3, #4]
    cd22:	7c3b      	ldrb	r3, [r7, #16]
    cd24:	3301      	adds	r3, #1
    cd26:	b2db      	uxtb	r3, r3
    cd28:	461a      	mov	r2, r3
    cd2a:	4b14      	ldr	r3, [pc, #80]	; (cd7c <usbdc_get_cfg_desc+0xa4>)
    cd2c:	4798      	blx	r3
    cd2e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    cd30:	697b      	ldr	r3, [r7, #20]
    cd32:	2b00      	cmp	r3, #0
    cd34:	d101      	bne.n	cd3a <usbdc_get_cfg_desc+0x62>
		return false;
    cd36:	2300      	movs	r3, #0
    cd38:	e019      	b.n	cd6e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    cd3a:	6978      	ldr	r0, [r7, #20]
    cd3c:	4b10      	ldr	r3, [pc, #64]	; (cd80 <usbdc_get_cfg_desc+0xa8>)
    cd3e:	4798      	blx	r3
    cd40:	4603      	mov	r3, r0
    cd42:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    cd44:	8a7a      	ldrh	r2, [r7, #18]
    cd46:	89fb      	ldrh	r3, [r7, #14]
    cd48:	429a      	cmp	r2, r3
    cd4a:	d802      	bhi.n	cd52 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    cd4c:	2300      	movs	r3, #0
    cd4e:	747b      	strb	r3, [r7, #17]
    cd50:	e001      	b.n	cd56 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    cd52:	89fb      	ldrh	r3, [r7, #14]
    cd54:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    cd56:	8a7a      	ldrh	r2, [r7, #18]
    cd58:	7c7b      	ldrb	r3, [r7, #17]
    cd5a:	79f8      	ldrb	r0, [r7, #7]
    cd5c:	6979      	ldr	r1, [r7, #20]
    cd5e:	4c09      	ldr	r4, [pc, #36]	; (cd84 <usbdc_get_cfg_desc+0xac>)
    cd60:	47a0      	blx	r4
    cd62:	4603      	mov	r3, r0
    cd64:	2b00      	cmp	r3, #0
    cd66:	d001      	beq.n	cd6c <usbdc_get_cfg_desc+0x94>
		return false;
    cd68:	2300      	movs	r3, #0
    cd6a:	e000      	b.n	cd6e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    cd6c:	2301      	movs	r3, #1
}
    cd6e:	4618      	mov	r0, r3
    cd70:	371c      	adds	r7, #28
    cd72:	46bd      	mov	sp, r7
    cd74:	bd90      	pop	{r4, r7, pc}
    cd76:	bf00      	nop
    cd78:	20000e78 	.word	0x20000e78
    cd7c:	0000da95 	.word	0x0000da95
    cd80:	0000cc41 	.word	0x0000cc41
    cd84:	0000d745 	.word	0x0000d745

0000cd88 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    cd88:	b590      	push	{r4, r7, lr}
    cd8a:	b085      	sub	sp, #20
    cd8c:	af00      	add	r7, sp, #0
    cd8e:	4603      	mov	r3, r0
    cd90:	6039      	str	r1, [r7, #0]
    cd92:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    cd94:	683b      	ldr	r3, [r7, #0]
    cd96:	799a      	ldrb	r2, [r3, #6]
    cd98:	79db      	ldrb	r3, [r3, #7]
    cd9a:	021b      	lsls	r3, r3, #8
    cd9c:	4313      	orrs	r3, r2
    cd9e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    cda0:	683b      	ldr	r3, [r7, #0]
    cda2:	885b      	ldrh	r3, [r3, #2]
    cda4:	b29b      	uxth	r3, r3
    cda6:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cda8:	89fa      	ldrh	r2, [r7, #14]
    cdaa:	4b1a      	ldr	r3, [pc, #104]	; (ce14 <usbdc_get_str_desc+0x8c>)
    cdac:	7f1b      	ldrb	r3, [r3, #28]
    cdae:	3b01      	subs	r3, #1
    cdb0:	4013      	ands	r3, r2
    cdb2:	2b00      	cmp	r3, #0
    cdb4:	bf0c      	ite	eq
    cdb6:	2301      	moveq	r3, #1
    cdb8:	2300      	movne	r3, #0
    cdba:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    cdbc:	4b15      	ldr	r3, [pc, #84]	; (ce14 <usbdc_get_str_desc+0x8c>)
    cdbe:	681b      	ldr	r3, [r3, #0]
    cdc0:	6818      	ldr	r0, [r3, #0]
    cdc2:	4b14      	ldr	r3, [pc, #80]	; (ce14 <usbdc_get_str_desc+0x8c>)
    cdc4:	681b      	ldr	r3, [r3, #0]
    cdc6:	685b      	ldr	r3, [r3, #4]
    cdc8:	7b3a      	ldrb	r2, [r7, #12]
    cdca:	4619      	mov	r1, r3
    cdcc:	4b12      	ldr	r3, [pc, #72]	; (ce18 <usbdc_get_str_desc+0x90>)
    cdce:	4798      	blx	r3
    cdd0:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    cdd2:	68bb      	ldr	r3, [r7, #8]
    cdd4:	2b00      	cmp	r3, #0
    cdd6:	d101      	bne.n	cddc <usbdc_get_str_desc+0x54>
		return false;
    cdd8:	2300      	movs	r3, #0
    cdda:	e017      	b.n	ce0c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    cddc:	68bb      	ldr	r3, [r7, #8]
    cdde:	781b      	ldrb	r3, [r3, #0]
    cde0:	b29b      	uxth	r3, r3
    cde2:	89fa      	ldrh	r2, [r7, #14]
    cde4:	429a      	cmp	r2, r3
    cde6:	d802      	bhi.n	cdee <usbdc_get_str_desc+0x66>
		need_zlp = false;
    cde8:	2300      	movs	r3, #0
    cdea:	737b      	strb	r3, [r7, #13]
    cdec:	e002      	b.n	cdf4 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    cdee:	68bb      	ldr	r3, [r7, #8]
    cdf0:	781b      	ldrb	r3, [r3, #0]
    cdf2:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    cdf4:	89fa      	ldrh	r2, [r7, #14]
    cdf6:	7b7b      	ldrb	r3, [r7, #13]
    cdf8:	79f8      	ldrb	r0, [r7, #7]
    cdfa:	68b9      	ldr	r1, [r7, #8]
    cdfc:	4c07      	ldr	r4, [pc, #28]	; (ce1c <usbdc_get_str_desc+0x94>)
    cdfe:	47a0      	blx	r4
    ce00:	4603      	mov	r3, r0
    ce02:	2b00      	cmp	r3, #0
    ce04:	d001      	beq.n	ce0a <usbdc_get_str_desc+0x82>
		return false;
    ce06:	2300      	movs	r3, #0
    ce08:	e000      	b.n	ce0c <usbdc_get_str_desc+0x84>
	}
	return true;
    ce0a:	2301      	movs	r3, #1
}
    ce0c:	4618      	mov	r0, r3
    ce0e:	3714      	adds	r7, #20
    ce10:	46bd      	mov	sp, r7
    ce12:	bd90      	pop	{r4, r7, pc}
    ce14:	20000e78 	.word	0x20000e78
    ce18:	0000db0d 	.word	0x0000db0d
    ce1c:	0000d745 	.word	0x0000d745

0000ce20 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    ce20:	b580      	push	{r7, lr}
    ce22:	b084      	sub	sp, #16
    ce24:	af00      	add	r7, sp, #0
    ce26:	4603      	mov	r3, r0
    ce28:	6039      	str	r1, [r7, #0]
    ce2a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    ce2c:	683b      	ldr	r3, [r7, #0]
    ce2e:	885b      	ldrh	r3, [r3, #2]
    ce30:	b29b      	uxth	r3, r3
    ce32:	0a1b      	lsrs	r3, r3, #8
    ce34:	b29b      	uxth	r3, r3
    ce36:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    ce38:	7bfb      	ldrb	r3, [r7, #15]
    ce3a:	2b02      	cmp	r3, #2
    ce3c:	d00d      	beq.n	ce5a <usbdc_get_desc_req+0x3a>
    ce3e:	2b03      	cmp	r3, #3
    ce40:	d012      	beq.n	ce68 <usbdc_get_desc_req+0x48>
    ce42:	2b01      	cmp	r3, #1
    ce44:	d002      	beq.n	ce4c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    ce46:	bf00      	nop
	}
	return false;
    ce48:	2300      	movs	r3, #0
    ce4a:	e013      	b.n	ce74 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    ce4c:	79fb      	ldrb	r3, [r7, #7]
    ce4e:	6839      	ldr	r1, [r7, #0]
    ce50:	4618      	mov	r0, r3
    ce52:	4b0a      	ldr	r3, [pc, #40]	; (ce7c <usbdc_get_desc_req+0x5c>)
    ce54:	4798      	blx	r3
    ce56:	4603      	mov	r3, r0
    ce58:	e00c      	b.n	ce74 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    ce5a:	79fb      	ldrb	r3, [r7, #7]
    ce5c:	6839      	ldr	r1, [r7, #0]
    ce5e:	4618      	mov	r0, r3
    ce60:	4b07      	ldr	r3, [pc, #28]	; (ce80 <usbdc_get_desc_req+0x60>)
    ce62:	4798      	blx	r3
    ce64:	4603      	mov	r3, r0
    ce66:	e005      	b.n	ce74 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    ce68:	79fb      	ldrb	r3, [r7, #7]
    ce6a:	6839      	ldr	r1, [r7, #0]
    ce6c:	4618      	mov	r0, r3
    ce6e:	4b05      	ldr	r3, [pc, #20]	; (ce84 <usbdc_get_desc_req+0x64>)
    ce70:	4798      	blx	r3
    ce72:	4603      	mov	r3, r0
}
    ce74:	4618      	mov	r0, r3
    ce76:	3710      	adds	r7, #16
    ce78:	46bd      	mov	sp, r7
    ce7a:	bd80      	pop	{r7, pc}
    ce7c:	0000cc61 	.word	0x0000cc61
    ce80:	0000ccd9 	.word	0x0000ccd9
    ce84:	0000cd89 	.word	0x0000cd89

0000ce88 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    ce88:	b590      	push	{r4, r7, lr}
    ce8a:	b085      	sub	sp, #20
    ce8c:	af00      	add	r7, sp, #0
    ce8e:	4603      	mov	r3, r0
    ce90:	6039      	str	r1, [r7, #0]
    ce92:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ce94:	683b      	ldr	r3, [r7, #0]
    ce96:	781b      	ldrb	r3, [r3, #0]
    ce98:	f003 031f 	and.w	r3, r3, #31
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	db1b      	blt.n	ced8 <usbdc_get_status_req+0x50>
    cea0:	2b01      	cmp	r3, #1
    cea2:	dd02      	ble.n	ceaa <usbdc_get_status_req+0x22>
    cea4:	2b02      	cmp	r3, #2
    cea6:	d003      	beq.n	ceb0 <usbdc_get_status_req+0x28>
    cea8:	e016      	b.n	ced8 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    ceaa:	2300      	movs	r3, #0
    ceac:	60fb      	str	r3, [r7, #12]
		break;
    ceae:	e015      	b.n	cedc <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ceb0:	683b      	ldr	r3, [r7, #0]
    ceb2:	889b      	ldrh	r3, [r3, #4]
    ceb4:	b29b      	uxth	r3, r3
    ceb6:	b2db      	uxtb	r3, r3
    ceb8:	2102      	movs	r1, #2
    ceba:	4618      	mov	r0, r3
    cebc:	4b0f      	ldr	r3, [pc, #60]	; (cefc <usbdc_get_status_req+0x74>)
    cebe:	4798      	blx	r3
    cec0:	4603      	mov	r3, r0
    cec2:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    cec4:	68fb      	ldr	r3, [r7, #12]
    cec6:	2b00      	cmp	r3, #0
    cec8:	da01      	bge.n	cece <usbdc_get_status_req+0x46>
			return false;
    ceca:	2300      	movs	r3, #0
    cecc:	e012      	b.n	cef4 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    cece:	68fb      	ldr	r3, [r7, #12]
    ced0:	f003 0301 	and.w	r3, r3, #1
    ced4:	60fb      	str	r3, [r7, #12]
		break;
    ced6:	e001      	b.n	cedc <usbdc_get_status_req+0x54>
	default:
		return false;
    ced8:	2300      	movs	r3, #0
    ceda:	e00b      	b.n	cef4 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    cedc:	4b08      	ldr	r3, [pc, #32]	; (cf00 <usbdc_get_status_req+0x78>)
    cede:	695b      	ldr	r3, [r3, #20]
    cee0:	89ba      	ldrh	r2, [r7, #12]
    cee2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    cee4:	4b06      	ldr	r3, [pc, #24]	; (cf00 <usbdc_get_status_req+0x78>)
    cee6:	6959      	ldr	r1, [r3, #20]
    cee8:	79f8      	ldrb	r0, [r7, #7]
    ceea:	2300      	movs	r3, #0
    ceec:	2202      	movs	r2, #2
    ceee:	4c05      	ldr	r4, [pc, #20]	; (cf04 <usbdc_get_status_req+0x7c>)
    cef0:	47a0      	blx	r4
	return true;
    cef2:	2301      	movs	r3, #1
}
    cef4:	4618      	mov	r0, r3
    cef6:	3714      	adds	r7, #20
    cef8:	46bd      	mov	sp, r7
    cefa:	bd90      	pop	{r4, r7, pc}
    cefc:	00003bdd 	.word	0x00003bdd
    cf00:	20000e78 	.word	0x20000e78
    cf04:	0000d745 	.word	0x0000d745

0000cf08 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    cf08:	b590      	push	{r4, r7, lr}
    cf0a:	b085      	sub	sp, #20
    cf0c:	af00      	add	r7, sp, #0
    cf0e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cf10:	4b1f      	ldr	r3, [pc, #124]	; (cf90 <usbdc_get_interface+0x88>)
    cf12:	691b      	ldr	r3, [r3, #16]
    cf14:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    cf16:	4b1e      	ldr	r3, [pc, #120]	; (cf90 <usbdc_get_interface+0x88>)
    cf18:	7f5b      	ldrb	r3, [r3, #29]
    cf1a:	461a      	mov	r2, r3
    cf1c:	687b      	ldr	r3, [r7, #4]
    cf1e:	889b      	ldrh	r3, [r3, #4]
    cf20:	b29b      	uxth	r3, r3
    cf22:	fa42 f303 	asr.w	r3, r2, r3
    cf26:	f003 0301 	and.w	r3, r3, #1
    cf2a:	2b00      	cmp	r3, #0
    cf2c:	d128      	bne.n	cf80 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    cf2e:	4b18      	ldr	r3, [pc, #96]	; (cf90 <usbdc_get_interface+0x88>)
    cf30:	695b      	ldr	r3, [r3, #20]
    cf32:	2200      	movs	r2, #0
    cf34:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cf36:	4b16      	ldr	r3, [pc, #88]	; (cf90 <usbdc_get_interface+0x88>)
    cf38:	6959      	ldr	r1, [r3, #20]
    cf3a:	2300      	movs	r3, #0
    cf3c:	2201      	movs	r2, #1
    cf3e:	2000      	movs	r0, #0
    cf40:	4c14      	ldr	r4, [pc, #80]	; (cf94 <usbdc_get_interface+0x8c>)
    cf42:	47a0      	blx	r4
		return true;
    cf44:	2301      	movs	r3, #1
    cf46:	e01f      	b.n	cf88 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    cf48:	68fb      	ldr	r3, [r7, #12]
    cf4a:	685b      	ldr	r3, [r3, #4]
    cf4c:	687a      	ldr	r2, [r7, #4]
    cf4e:	2102      	movs	r1, #2
    cf50:	68f8      	ldr	r0, [r7, #12]
    cf52:	4798      	blx	r3
    cf54:	60b8      	str	r0, [r7, #8]
    cf56:	68bb      	ldr	r3, [r7, #8]
    cf58:	2b00      	cmp	r3, #0
    cf5a:	da03      	bge.n	cf64 <usbdc_get_interface+0x5c>
			func = func->next;
    cf5c:	68fb      	ldr	r3, [r7, #12]
    cf5e:	681b      	ldr	r3, [r3, #0]
    cf60:	60fb      	str	r3, [r7, #12]
    cf62:	e00d      	b.n	cf80 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    cf64:	4b0a      	ldr	r3, [pc, #40]	; (cf90 <usbdc_get_interface+0x88>)
    cf66:	695b      	ldr	r3, [r3, #20]
    cf68:	68ba      	ldr	r2, [r7, #8]
    cf6a:	b2d2      	uxtb	r2, r2
    cf6c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cf6e:	4b08      	ldr	r3, [pc, #32]	; (cf90 <usbdc_get_interface+0x88>)
    cf70:	6959      	ldr	r1, [r3, #20]
    cf72:	2300      	movs	r3, #0
    cf74:	2201      	movs	r2, #1
    cf76:	2000      	movs	r0, #0
    cf78:	4c06      	ldr	r4, [pc, #24]	; (cf94 <usbdc_get_interface+0x8c>)
    cf7a:	47a0      	blx	r4
			return true;
    cf7c:	2301      	movs	r3, #1
    cf7e:	e003      	b.n	cf88 <usbdc_get_interface+0x80>
	while (NULL != func) {
    cf80:	68fb      	ldr	r3, [r7, #12]
    cf82:	2b00      	cmp	r3, #0
    cf84:	d1e0      	bne.n	cf48 <usbdc_get_interface+0x40>
		}
	}
	return false;
    cf86:	2300      	movs	r3, #0
}
    cf88:	4618      	mov	r0, r3
    cf8a:	3714      	adds	r7, #20
    cf8c:	46bd      	mov	sp, r7
    cf8e:	bd90      	pop	{r4, r7, pc}
    cf90:	20000e78 	.word	0x20000e78
    cf94:	0000d745 	.word	0x0000d745

0000cf98 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    cf98:	b590      	push	{r4, r7, lr}
    cf9a:	b083      	sub	sp, #12
    cf9c:	af00      	add	r7, sp, #0
    cf9e:	4603      	mov	r3, r0
    cfa0:	6039      	str	r1, [r7, #0]
    cfa2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cfa4:	683b      	ldr	r3, [r7, #0]
    cfa6:	785b      	ldrb	r3, [r3, #1]
    cfa8:	2b0a      	cmp	r3, #10
    cfaa:	d83a      	bhi.n	d022 <usbdc_get_req+0x8a>
    cfac:	a201      	add	r2, pc, #4	; (adr r2, cfb4 <usbdc_get_req+0x1c>)
    cfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cfb2:	bf00      	nop
    cfb4:	0000d00b 	.word	0x0000d00b
    cfb8:	0000d023 	.word	0x0000d023
    cfbc:	0000d023 	.word	0x0000d023
    cfc0:	0000d023 	.word	0x0000d023
    cfc4:	0000d023 	.word	0x0000d023
    cfc8:	0000d023 	.word	0x0000d023
    cfcc:	0000cfe1 	.word	0x0000cfe1
    cfd0:	0000d023 	.word	0x0000d023
    cfd4:	0000cfef 	.word	0x0000cfef
    cfd8:	0000d023 	.word	0x0000d023
    cfdc:	0000d019 	.word	0x0000d019
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    cfe0:	79fb      	ldrb	r3, [r7, #7]
    cfe2:	6839      	ldr	r1, [r7, #0]
    cfe4:	4618      	mov	r0, r3
    cfe6:	4b11      	ldr	r3, [pc, #68]	; (d02c <usbdc_get_req+0x94>)
    cfe8:	4798      	blx	r3
    cfea:	4603      	mov	r3, r0
    cfec:	e01a      	b.n	d024 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    cfee:	4b10      	ldr	r3, [pc, #64]	; (d030 <usbdc_get_req+0x98>)
    cff0:	695b      	ldr	r3, [r3, #20]
    cff2:	4a0f      	ldr	r2, [pc, #60]	; (d030 <usbdc_get_req+0x98>)
    cff4:	7ed2      	ldrb	r2, [r2, #27]
    cff6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    cff8:	4b0d      	ldr	r3, [pc, #52]	; (d030 <usbdc_get_req+0x98>)
    cffa:	6959      	ldr	r1, [r3, #20]
    cffc:	79f8      	ldrb	r0, [r7, #7]
    cffe:	2300      	movs	r3, #0
    d000:	2201      	movs	r2, #1
    d002:	4c0c      	ldr	r4, [pc, #48]	; (d034 <usbdc_get_req+0x9c>)
    d004:	47a0      	blx	r4
		return true;
    d006:	2301      	movs	r3, #1
    d008:	e00c      	b.n	d024 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    d00a:	79fb      	ldrb	r3, [r7, #7]
    d00c:	6839      	ldr	r1, [r7, #0]
    d00e:	4618      	mov	r0, r3
    d010:	4b09      	ldr	r3, [pc, #36]	; (d038 <usbdc_get_req+0xa0>)
    d012:	4798      	blx	r3
    d014:	4603      	mov	r3, r0
    d016:	e005      	b.n	d024 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    d018:	6838      	ldr	r0, [r7, #0]
    d01a:	4b08      	ldr	r3, [pc, #32]	; (d03c <usbdc_get_req+0xa4>)
    d01c:	4798      	blx	r3
    d01e:	4603      	mov	r3, r0
    d020:	e000      	b.n	d024 <usbdc_get_req+0x8c>
	default:
		return false;
    d022:	2300      	movs	r3, #0
	}
}
    d024:	4618      	mov	r0, r3
    d026:	370c      	adds	r7, #12
    d028:	46bd      	mov	sp, r7
    d02a:	bd90      	pop	{r4, r7, pc}
    d02c:	0000ce21 	.word	0x0000ce21
    d030:	20000e78 	.word	0x20000e78
    d034:	0000d745 	.word	0x0000d745
    d038:	0000ce89 	.word	0x0000ce89
    d03c:	0000cf09 	.word	0x0000cf09

0000d040 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d040:	b590      	push	{r4, r7, lr}
    d042:	b083      	sub	sp, #12
    d044:	af00      	add	r7, sp, #0
    d046:	4603      	mov	r3, r0
    d048:	6039      	str	r1, [r7, #0]
    d04a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d04c:	683b      	ldr	r3, [r7, #0]
    d04e:	781b      	ldrb	r3, [r3, #0]
    d050:	f003 031f 	and.w	r3, r3, #31
    d054:	2b02      	cmp	r3, #2
    d056:	d116      	bne.n	d086 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d058:	683b      	ldr	r3, [r7, #0]
    d05a:	88db      	ldrh	r3, [r3, #6]
    d05c:	b29b      	uxth	r3, r3
    d05e:	2b00      	cmp	r3, #0
    d060:	d001      	beq.n	d066 <usbdc_clear_ftr_req+0x26>
			return false;
    d062:	2300      	movs	r3, #0
    d064:	e010      	b.n	d088 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d066:	683b      	ldr	r3, [r7, #0]
    d068:	889b      	ldrh	r3, [r3, #4]
    d06a:	b29b      	uxth	r3, r3
    d06c:	b2db      	uxtb	r3, r3
    d06e:	2100      	movs	r1, #0
    d070:	4618      	mov	r0, r3
    d072:	4b07      	ldr	r3, [pc, #28]	; (d090 <usbdc_clear_ftr_req+0x50>)
    d074:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d076:	79f8      	ldrb	r0, [r7, #7]
    d078:	2301      	movs	r3, #1
    d07a:	2200      	movs	r2, #0
    d07c:	2100      	movs	r1, #0
    d07e:	4c05      	ldr	r4, [pc, #20]	; (d094 <usbdc_clear_ftr_req+0x54>)
    d080:	47a0      	blx	r4
		return true;
    d082:	2301      	movs	r3, #1
    d084:	e000      	b.n	d088 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d086:	2300      	movs	r3, #0
	}
}
    d088:	4618      	mov	r0, r3
    d08a:	370c      	adds	r7, #12
    d08c:	46bd      	mov	sp, r7
    d08e:	bd90      	pop	{r4, r7, pc}
    d090:	00003bdd 	.word	0x00003bdd
    d094:	0000d745 	.word	0x0000d745

0000d098 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d098:	b590      	push	{r4, r7, lr}
    d09a:	b083      	sub	sp, #12
    d09c:	af00      	add	r7, sp, #0
    d09e:	4603      	mov	r3, r0
    d0a0:	6039      	str	r1, [r7, #0]
    d0a2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d0a4:	683b      	ldr	r3, [r7, #0]
    d0a6:	781b      	ldrb	r3, [r3, #0]
    d0a8:	f003 031f 	and.w	r3, r3, #31
    d0ac:	2b02      	cmp	r3, #2
    d0ae:	d116      	bne.n	d0de <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d0b0:	683b      	ldr	r3, [r7, #0]
    d0b2:	88db      	ldrh	r3, [r3, #6]
    d0b4:	b29b      	uxth	r3, r3
    d0b6:	2b00      	cmp	r3, #0
    d0b8:	d001      	beq.n	d0be <usbdc_set_ftr_req+0x26>
			return false;
    d0ba:	2300      	movs	r3, #0
    d0bc:	e010      	b.n	d0e0 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d0be:	683b      	ldr	r3, [r7, #0]
    d0c0:	889b      	ldrh	r3, [r3, #4]
    d0c2:	b29b      	uxth	r3, r3
    d0c4:	b2db      	uxtb	r3, r3
    d0c6:	2101      	movs	r1, #1
    d0c8:	4618      	mov	r0, r3
    d0ca:	4b07      	ldr	r3, [pc, #28]	; (d0e8 <usbdc_set_ftr_req+0x50>)
    d0cc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d0ce:	79f8      	ldrb	r0, [r7, #7]
    d0d0:	2301      	movs	r3, #1
    d0d2:	2200      	movs	r2, #0
    d0d4:	2100      	movs	r1, #0
    d0d6:	4c05      	ldr	r4, [pc, #20]	; (d0ec <usbdc_set_ftr_req+0x54>)
    d0d8:	47a0      	blx	r4
		return true;
    d0da:	2301      	movs	r3, #1
    d0dc:	e000      	b.n	d0e0 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d0de:	2300      	movs	r3, #0
	}
}
    d0e0:	4618      	mov	r0, r3
    d0e2:	370c      	adds	r7, #12
    d0e4:	46bd      	mov	sp, r7
    d0e6:	bd90      	pop	{r4, r7, pc}
    d0e8:	00003bdd 	.word	0x00003bdd
    d0ec:	0000d745 	.word	0x0000d745

0000d0f0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d0f0:	b580      	push	{r7, lr}
    d0f2:	b082      	sub	sp, #8
    d0f4:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d0f6:	4b0a      	ldr	r3, [pc, #40]	; (d120 <usbdc_unconfig+0x30>)
    d0f8:	691b      	ldr	r3, [r3, #16]
    d0fa:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d0fc:	e008      	b.n	d110 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d0fe:	687b      	ldr	r3, [r7, #4]
    d100:	685b      	ldr	r3, [r3, #4]
    d102:	2200      	movs	r2, #0
    d104:	2101      	movs	r1, #1
    d106:	6878      	ldr	r0, [r7, #4]
    d108:	4798      	blx	r3
		func = func->next;
    d10a:	687b      	ldr	r3, [r7, #4]
    d10c:	681b      	ldr	r3, [r3, #0]
    d10e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d110:	687b      	ldr	r3, [r7, #4]
    d112:	2b00      	cmp	r3, #0
    d114:	d1f3      	bne.n	d0fe <usbdc_unconfig+0xe>
	}
}
    d116:	bf00      	nop
    d118:	3708      	adds	r7, #8
    d11a:	46bd      	mov	sp, r7
    d11c:	bd80      	pop	{r7, pc}
    d11e:	bf00      	nop
    d120:	20000e78 	.word	0x20000e78

0000d124 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d124:	b580      	push	{r7, lr}
    d126:	b088      	sub	sp, #32
    d128:	af00      	add	r7, sp, #0
    d12a:	4603      	mov	r3, r0
    d12c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d12e:	2300      	movs	r3, #0
    d130:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d132:	23ff      	movs	r3, #255	; 0xff
    d134:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d136:	79fb      	ldrb	r3, [r7, #7]
    d138:	2b00      	cmp	r3, #0
    d13a:	d103      	bne.n	d144 <usbdc_set_config+0x20>
		usbdc_unconfig();
    d13c:	4b2e      	ldr	r3, [pc, #184]	; (d1f8 <usbdc_set_config+0xd4>)
    d13e:	4798      	blx	r3
		return true;
    d140:	2301      	movs	r3, #1
    d142:	e055      	b.n	d1f0 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d144:	69bb      	ldr	r3, [r7, #24]
    d146:	2b00      	cmp	r3, #0
    d148:	d10a      	bne.n	d160 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d14a:	4b2c      	ldr	r3, [pc, #176]	; (d1fc <usbdc_set_config+0xd8>)
    d14c:	681b      	ldr	r3, [r3, #0]
    d14e:	6818      	ldr	r0, [r3, #0]
    d150:	4b2a      	ldr	r3, [pc, #168]	; (d1fc <usbdc_set_config+0xd8>)
    d152:	681b      	ldr	r3, [r3, #0]
    d154:	685b      	ldr	r3, [r3, #4]
    d156:	79fa      	ldrb	r2, [r7, #7]
    d158:	4619      	mov	r1, r3
    d15a:	4b29      	ldr	r3, [pc, #164]	; (d200 <usbdc_set_config+0xdc>)
    d15c:	4798      	blx	r3
    d15e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d160:	69bb      	ldr	r3, [r7, #24]
    d162:	2b00      	cmp	r3, #0
    d164:	d101      	bne.n	d16a <usbdc_set_config+0x46>
		return false;
    d166:	2300      	movs	r3, #0
    d168:	e042      	b.n	d1f0 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d16a:	69b8      	ldr	r0, [r7, #24]
    d16c:	4b25      	ldr	r3, [pc, #148]	; (d204 <usbdc_set_config+0xe0>)
    d16e:	4798      	blx	r3
    d170:	4603      	mov	r3, r0
    d172:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d174:	8abb      	ldrh	r3, [r7, #20]
    d176:	69ba      	ldr	r2, [r7, #24]
    d178:	4413      	add	r3, r2
    d17a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d17c:	693b      	ldr	r3, [r7, #16]
    d17e:	2204      	movs	r2, #4
    d180:	4619      	mov	r1, r3
    d182:	69b8      	ldr	r0, [r7, #24]
    d184:	4b20      	ldr	r3, [pc, #128]	; (d208 <usbdc_set_config+0xe4>)
    d186:	4798      	blx	r3
    d188:	4603      	mov	r3, r0
    d18a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d18c:	e02c      	b.n	d1e8 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d18e:	68fb      	ldr	r3, [r7, #12]
    d190:	3302      	adds	r3, #2
    d192:	781b      	ldrb	r3, [r3, #0]
    d194:	7dfa      	ldrb	r2, [r7, #23]
    d196:	429a      	cmp	r2, r3
    d198:	d018      	beq.n	d1cc <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d19a:	68fb      	ldr	r3, [r7, #12]
    d19c:	789b      	ldrb	r3, [r3, #2]
    d19e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d1a0:	4b16      	ldr	r3, [pc, #88]	; (d1fc <usbdc_set_config+0xd8>)
    d1a2:	691b      	ldr	r3, [r3, #16]
    d1a4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d1a6:	e00c      	b.n	d1c2 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d1a8:	69fb      	ldr	r3, [r7, #28]
    d1aa:	685b      	ldr	r3, [r3, #4]
    d1ac:	f107 020c 	add.w	r2, r7, #12
    d1b0:	2100      	movs	r1, #0
    d1b2:	69f8      	ldr	r0, [r7, #28]
    d1b4:	4798      	blx	r3
    d1b6:	4603      	mov	r3, r0
    d1b8:	2b00      	cmp	r3, #0
    d1ba:	d006      	beq.n	d1ca <usbdc_set_config+0xa6>
					func = func->next;
    d1bc:	69fb      	ldr	r3, [r7, #28]
    d1be:	681b      	ldr	r3, [r3, #0]
    d1c0:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d1c2:	69fb      	ldr	r3, [r7, #28]
    d1c4:	2b00      	cmp	r3, #0
    d1c6:	d1ef      	bne.n	d1a8 <usbdc_set_config+0x84>
    d1c8:	e000      	b.n	d1cc <usbdc_set_config+0xa8>
				} else {
					break;
    d1ca:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d1cc:	68fb      	ldr	r3, [r7, #12]
    d1ce:	4618      	mov	r0, r3
    d1d0:	4b0e      	ldr	r3, [pc, #56]	; (d20c <usbdc_set_config+0xe8>)
    d1d2:	4798      	blx	r3
    d1d4:	4603      	mov	r3, r0
    d1d6:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d1d8:	68fb      	ldr	r3, [r7, #12]
    d1da:	6939      	ldr	r1, [r7, #16]
    d1dc:	2204      	movs	r2, #4
    d1de:	4618      	mov	r0, r3
    d1e0:	4b09      	ldr	r3, [pc, #36]	; (d208 <usbdc_set_config+0xe4>)
    d1e2:	4798      	blx	r3
    d1e4:	4603      	mov	r3, r0
    d1e6:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d1e8:	68fb      	ldr	r3, [r7, #12]
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	d1cf      	bne.n	d18e <usbdc_set_config+0x6a>
	}
	return true;
    d1ee:	2301      	movs	r3, #1
}
    d1f0:	4618      	mov	r0, r3
    d1f2:	3720      	adds	r7, #32
    d1f4:	46bd      	mov	sp, r7
    d1f6:	bd80      	pop	{r7, pc}
    d1f8:	0000d0f1 	.word	0x0000d0f1
    d1fc:	20000e78 	.word	0x20000e78
    d200:	0000da95 	.word	0x0000da95
    d204:	0000cc41 	.word	0x0000cc41
    d208:	0000d9d5 	.word	0x0000d9d5
    d20c:	0000cc1d 	.word	0x0000cc1d

0000d210 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d210:	b580      	push	{r7, lr}
    d212:	b082      	sub	sp, #8
    d214:	af00      	add	r7, sp, #0
    d216:	4603      	mov	r3, r0
    d218:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d21a:	79fb      	ldrb	r3, [r7, #7]
    d21c:	4618      	mov	r0, r3
    d21e:	4b03      	ldr	r3, [pc, #12]	; (d22c <usbdc_set_address+0x1c>)
    d220:	4798      	blx	r3
}
    d222:	bf00      	nop
    d224:	3708      	adds	r7, #8
    d226:	46bd      	mov	sp, r7
    d228:	bd80      	pop	{r7, pc}
    d22a:	bf00      	nop
    d22c:	000037f9 	.word	0x000037f9

0000d230 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d230:	b590      	push	{r4, r7, lr}
    d232:	b087      	sub	sp, #28
    d234:	af00      	add	r7, sp, #0
    d236:	4603      	mov	r3, r0
    d238:	460a      	mov	r2, r1
    d23a:	80fb      	strh	r3, [r7, #6]
    d23c:	4613      	mov	r3, r2
    d23e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d240:	2300      	movs	r3, #0
    d242:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d244:	693b      	ldr	r3, [r7, #16]
    d246:	2b00      	cmp	r3, #0
    d248:	d10b      	bne.n	d262 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d24a:	4b43      	ldr	r3, [pc, #268]	; (d358 <usbdc_set_interface+0x128>)
    d24c:	681b      	ldr	r3, [r3, #0]
    d24e:	6818      	ldr	r0, [r3, #0]
    d250:	4b41      	ldr	r3, [pc, #260]	; (d358 <usbdc_set_interface+0x128>)
    d252:	681b      	ldr	r3, [r3, #0]
    d254:	6859      	ldr	r1, [r3, #4]
    d256:	4b40      	ldr	r3, [pc, #256]	; (d358 <usbdc_set_interface+0x128>)
    d258:	7edb      	ldrb	r3, [r3, #27]
    d25a:	461a      	mov	r2, r3
    d25c:	4b3f      	ldr	r3, [pc, #252]	; (d35c <usbdc_set_interface+0x12c>)
    d25e:	4798      	blx	r3
    d260:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d262:	693b      	ldr	r3, [r7, #16]
    d264:	2b00      	cmp	r3, #0
    d266:	d101      	bne.n	d26c <usbdc_set_interface+0x3c>
		return false;
    d268:	2300      	movs	r3, #0
    d26a:	e071      	b.n	d350 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d26c:	693b      	ldr	r3, [r7, #16]
    d26e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d270:	6938      	ldr	r0, [r7, #16]
    d272:	4b3b      	ldr	r3, [pc, #236]	; (d360 <usbdc_set_interface+0x130>)
    d274:	4798      	blx	r3
    d276:	4603      	mov	r3, r0
    d278:	461a      	mov	r2, r3
    d27a:	693b      	ldr	r3, [r7, #16]
    d27c:	4413      	add	r3, r2
    d27e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d280:	68bb      	ldr	r3, [r7, #8]
    d282:	68f9      	ldr	r1, [r7, #12]
    d284:	2204      	movs	r2, #4
    d286:	4618      	mov	r0, r3
    d288:	4b36      	ldr	r3, [pc, #216]	; (d364 <usbdc_set_interface+0x134>)
    d28a:	4798      	blx	r3
    d28c:	6138      	str	r0, [r7, #16]
    d28e:	693b      	ldr	r3, [r7, #16]
    d290:	2b00      	cmp	r3, #0
    d292:	d113      	bne.n	d2bc <usbdc_set_interface+0x8c>
		return false;
    d294:	2300      	movs	r3, #0
    d296:	e05b      	b.n	d350 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d298:	68bb      	ldr	r3, [r7, #8]
    d29a:	4618      	mov	r0, r3
    d29c:	4b32      	ldr	r3, [pc, #200]	; (d368 <usbdc_set_interface+0x138>)
    d29e:	4798      	blx	r3
    d2a0:	4603      	mov	r3, r0
    d2a2:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d2a4:	68bb      	ldr	r3, [r7, #8]
    d2a6:	68f9      	ldr	r1, [r7, #12]
    d2a8:	2204      	movs	r2, #4
    d2aa:	4618      	mov	r0, r3
    d2ac:	4b2d      	ldr	r3, [pc, #180]	; (d364 <usbdc_set_interface+0x134>)
    d2ae:	4798      	blx	r3
    d2b0:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d2b2:	693b      	ldr	r3, [r7, #16]
    d2b4:	2b00      	cmp	r3, #0
    d2b6:	d101      	bne.n	d2bc <usbdc_set_interface+0x8c>
			return false;
    d2b8:	2300      	movs	r3, #0
    d2ba:	e049      	b.n	d350 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d2bc:	693b      	ldr	r3, [r7, #16]
    d2be:	3302      	adds	r3, #2
    d2c0:	781b      	ldrb	r3, [r3, #0]
    d2c2:	b29b      	uxth	r3, r3
    d2c4:	88ba      	ldrh	r2, [r7, #4]
    d2c6:	429a      	cmp	r2, r3
    d2c8:	d1e6      	bne.n	d298 <usbdc_set_interface+0x68>
    d2ca:	693b      	ldr	r3, [r7, #16]
    d2cc:	3303      	adds	r3, #3
    d2ce:	781b      	ldrb	r3, [r3, #0]
    d2d0:	b29b      	uxth	r3, r3
    d2d2:	88fa      	ldrh	r2, [r7, #6]
    d2d4:	429a      	cmp	r2, r3
    d2d6:	d1df      	bne.n	d298 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d2d8:	693b      	ldr	r3, [r7, #16]
    d2da:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d2dc:	4b1e      	ldr	r3, [pc, #120]	; (d358 <usbdc_set_interface+0x128>)
    d2de:	691b      	ldr	r3, [r3, #16]
    d2e0:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d2e2:	e031      	b.n	d348 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d2e4:	697b      	ldr	r3, [r7, #20]
    d2e6:	685b      	ldr	r3, [r3, #4]
    d2e8:	f107 0208 	add.w	r2, r7, #8
    d2ec:	2101      	movs	r1, #1
    d2ee:	6978      	ldr	r0, [r7, #20]
    d2f0:	4798      	blx	r3
    d2f2:	4603      	mov	r3, r0
    d2f4:	2b00      	cmp	r3, #0
    d2f6:	d003      	beq.n	d300 <usbdc_set_interface+0xd0>
			func = func->next;
    d2f8:	697b      	ldr	r3, [r7, #20]
    d2fa:	681b      	ldr	r3, [r3, #0]
    d2fc:	617b      	str	r3, [r7, #20]
    d2fe:	e023      	b.n	d348 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d300:	697b      	ldr	r3, [r7, #20]
    d302:	685b      	ldr	r3, [r3, #4]
    d304:	f107 0208 	add.w	r2, r7, #8
    d308:	2100      	movs	r1, #0
    d30a:	6978      	ldr	r0, [r7, #20]
    d30c:	4798      	blx	r3
    d30e:	4603      	mov	r3, r0
    d310:	2b00      	cmp	r3, #0
    d312:	d117      	bne.n	d344 <usbdc_set_interface+0x114>
			if (alt_set) {
    d314:	88fb      	ldrh	r3, [r7, #6]
    d316:	2b00      	cmp	r3, #0
    d318:	d00c      	beq.n	d334 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d31a:	4b0f      	ldr	r3, [pc, #60]	; (d358 <usbdc_set_interface+0x128>)
    d31c:	7f5b      	ldrb	r3, [r3, #29]
    d31e:	b25a      	sxtb	r2, r3
    d320:	88bb      	ldrh	r3, [r7, #4]
    d322:	2101      	movs	r1, #1
    d324:	fa01 f303 	lsl.w	r3, r1, r3
    d328:	b25b      	sxtb	r3, r3
    d32a:	4313      	orrs	r3, r2
    d32c:	b25b      	sxtb	r3, r3
    d32e:	b2da      	uxtb	r2, r3
    d330:	4b09      	ldr	r3, [pc, #36]	; (d358 <usbdc_set_interface+0x128>)
    d332:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d334:	2300      	movs	r3, #0
    d336:	2200      	movs	r2, #0
    d338:	2100      	movs	r1, #0
    d33a:	2000      	movs	r0, #0
    d33c:	4c0b      	ldr	r4, [pc, #44]	; (d36c <usbdc_set_interface+0x13c>)
    d33e:	47a0      	blx	r4
			return true;
    d340:	2301      	movs	r3, #1
    d342:	e005      	b.n	d350 <usbdc_set_interface+0x120>
		} else {
			return false;
    d344:	2300      	movs	r3, #0
    d346:	e003      	b.n	d350 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d348:	697b      	ldr	r3, [r7, #20]
    d34a:	2b00      	cmp	r3, #0
    d34c:	d1ca      	bne.n	d2e4 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d34e:	2300      	movs	r3, #0
}
    d350:	4618      	mov	r0, r3
    d352:	371c      	adds	r7, #28
    d354:	46bd      	mov	sp, r7
    d356:	bd90      	pop	{r4, r7, pc}
    d358:	20000e78 	.word	0x20000e78
    d35c:	0000da95 	.word	0x0000da95
    d360:	0000cc41 	.word	0x0000cc41
    d364:	0000d9d5 	.word	0x0000d9d5
    d368:	0000cc1d 	.word	0x0000cc1d
    d36c:	0000d745 	.word	0x0000d745

0000d370 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d370:	b590      	push	{r4, r7, lr}
    d372:	b083      	sub	sp, #12
    d374:	af00      	add	r7, sp, #0
    d376:	4603      	mov	r3, r0
    d378:	6039      	str	r1, [r7, #0]
    d37a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d37c:	683b      	ldr	r3, [r7, #0]
    d37e:	785b      	ldrb	r3, [r3, #1]
    d380:	3b01      	subs	r3, #1
    d382:	2b0a      	cmp	r3, #10
    d384:	d85b      	bhi.n	d43e <usbdc_set_req+0xce>
    d386:	a201      	add	r2, pc, #4	; (adr r2, d38c <usbdc_set_req+0x1c>)
    d388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d38c:	0000d40b 	.word	0x0000d40b
    d390:	0000d43f 	.word	0x0000d43f
    d394:	0000d419 	.word	0x0000d419
    d398:	0000d43f 	.word	0x0000d43f
    d39c:	0000d3b9 	.word	0x0000d3b9
    d3a0:	0000d43f 	.word	0x0000d43f
    d3a4:	0000d43f 	.word	0x0000d43f
    d3a8:	0000d43f 	.word	0x0000d43f
    d3ac:	0000d3d3 	.word	0x0000d3d3
    d3b0:	0000d43f 	.word	0x0000d43f
    d3b4:	0000d427 	.word	0x0000d427
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d3b8:	79f8      	ldrb	r0, [r7, #7]
    d3ba:	2301      	movs	r3, #1
    d3bc:	2200      	movs	r2, #0
    d3be:	2100      	movs	r1, #0
    d3c0:	4c21      	ldr	r4, [pc, #132]	; (d448 <usbdc_set_req+0xd8>)
    d3c2:	47a0      	blx	r4
    d3c4:	4603      	mov	r3, r0
    d3c6:	2b00      	cmp	r3, #0
    d3c8:	bf0c      	ite	eq
    d3ca:	2301      	moveq	r3, #1
    d3cc:	2300      	movne	r3, #0
    d3ce:	b2db      	uxtb	r3, r3
    d3d0:	e036      	b.n	d440 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d3d2:	683b      	ldr	r3, [r7, #0]
    d3d4:	885b      	ldrh	r3, [r3, #2]
    d3d6:	b29b      	uxth	r3, r3
    d3d8:	b2db      	uxtb	r3, r3
    d3da:	4618      	mov	r0, r3
    d3dc:	4b1b      	ldr	r3, [pc, #108]	; (d44c <usbdc_set_req+0xdc>)
    d3de:	4798      	blx	r3
    d3e0:	4603      	mov	r3, r0
    d3e2:	f083 0301 	eor.w	r3, r3, #1
    d3e6:	b2db      	uxtb	r3, r3
    d3e8:	2b00      	cmp	r3, #0
    d3ea:	d001      	beq.n	d3f0 <usbdc_set_req+0x80>
			return false;
    d3ec:	2300      	movs	r3, #0
    d3ee:	e027      	b.n	d440 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d3f0:	79f8      	ldrb	r0, [r7, #7]
    d3f2:	2301      	movs	r3, #1
    d3f4:	2200      	movs	r2, #0
    d3f6:	2100      	movs	r1, #0
    d3f8:	4c13      	ldr	r4, [pc, #76]	; (d448 <usbdc_set_req+0xd8>)
    d3fa:	47a0      	blx	r4
    d3fc:	4603      	mov	r3, r0
    d3fe:	2b00      	cmp	r3, #0
    d400:	bf0c      	ite	eq
    d402:	2301      	moveq	r3, #1
    d404:	2300      	movne	r3, #0
    d406:	b2db      	uxtb	r3, r3
    d408:	e01a      	b.n	d440 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d40a:	79fb      	ldrb	r3, [r7, #7]
    d40c:	6839      	ldr	r1, [r7, #0]
    d40e:	4618      	mov	r0, r3
    d410:	4b0f      	ldr	r3, [pc, #60]	; (d450 <usbdc_set_req+0xe0>)
    d412:	4798      	blx	r3
    d414:	4603      	mov	r3, r0
    d416:	e013      	b.n	d440 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d418:	79fb      	ldrb	r3, [r7, #7]
    d41a:	6839      	ldr	r1, [r7, #0]
    d41c:	4618      	mov	r0, r3
    d41e:	4b0d      	ldr	r3, [pc, #52]	; (d454 <usbdc_set_req+0xe4>)
    d420:	4798      	blx	r3
    d422:	4603      	mov	r3, r0
    d424:	e00c      	b.n	d440 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d426:	683b      	ldr	r3, [r7, #0]
    d428:	885b      	ldrh	r3, [r3, #2]
    d42a:	b29a      	uxth	r2, r3
    d42c:	683b      	ldr	r3, [r7, #0]
    d42e:	889b      	ldrh	r3, [r3, #4]
    d430:	b29b      	uxth	r3, r3
    d432:	4619      	mov	r1, r3
    d434:	4610      	mov	r0, r2
    d436:	4b08      	ldr	r3, [pc, #32]	; (d458 <usbdc_set_req+0xe8>)
    d438:	4798      	blx	r3
    d43a:	4603      	mov	r3, r0
    d43c:	e000      	b.n	d440 <usbdc_set_req+0xd0>
	default:
		return false;
    d43e:	2300      	movs	r3, #0
	}
}
    d440:	4618      	mov	r0, r3
    d442:	370c      	adds	r7, #12
    d444:	46bd      	mov	sp, r7
    d446:	bd90      	pop	{r4, r7, pc}
    d448:	0000d745 	.word	0x0000d745
    d44c:	0000d125 	.word	0x0000d125
    d450:	0000d041 	.word	0x0000d041
    d454:	0000d099 	.word	0x0000d099
    d458:	0000d231 	.word	0x0000d231

0000d45c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d45c:	b580      	push	{r7, lr}
    d45e:	b082      	sub	sp, #8
    d460:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d462:	4b0a      	ldr	r3, [pc, #40]	; (d48c <usbdc_sof_notify+0x30>)
    d464:	685b      	ldr	r3, [r3, #4]
    d466:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d468:	e009      	b.n	d47e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d46a:	687b      	ldr	r3, [r7, #4]
    d46c:	685b      	ldr	r3, [r3, #4]
    d46e:	2b00      	cmp	r3, #0
    d470:	d002      	beq.n	d478 <usbdc_sof_notify+0x1c>
			sof->cb();
    d472:	687b      	ldr	r3, [r7, #4]
    d474:	685b      	ldr	r3, [r3, #4]
    d476:	4798      	blx	r3
		}
		sof = sof->next;
    d478:	687b      	ldr	r3, [r7, #4]
    d47a:	681b      	ldr	r3, [r3, #0]
    d47c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d47e:	687b      	ldr	r3, [r7, #4]
    d480:	2b00      	cmp	r3, #0
    d482:	d1f2      	bne.n	d46a <usbdc_sof_notify+0xe>
	}
}
    d484:	bf00      	nop
    d486:	3708      	adds	r7, #8
    d488:	46bd      	mov	sp, r7
    d48a:	bd80      	pop	{r7, pc}
    d48c:	20000e78 	.word	0x20000e78

0000d490 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d490:	b580      	push	{r7, lr}
    d492:	b084      	sub	sp, #16
    d494:	af00      	add	r7, sp, #0
    d496:	4603      	mov	r3, r0
    d498:	6039      	str	r1, [r7, #0]
    d49a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d49c:	4b0b      	ldr	r3, [pc, #44]	; (d4cc <usbdc_change_notify+0x3c>)
    d49e:	68db      	ldr	r3, [r3, #12]
    d4a0:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d4a2:	e00c      	b.n	d4be <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d4a4:	68fb      	ldr	r3, [r7, #12]
    d4a6:	685b      	ldr	r3, [r3, #4]
    d4a8:	2b00      	cmp	r3, #0
    d4aa:	d005      	beq.n	d4b8 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d4ac:	68fb      	ldr	r3, [r7, #12]
    d4ae:	685b      	ldr	r3, [r3, #4]
    d4b0:	79fa      	ldrb	r2, [r7, #7]
    d4b2:	6839      	ldr	r1, [r7, #0]
    d4b4:	4610      	mov	r0, r2
    d4b6:	4798      	blx	r3
		}
		cg = cg->next;
    d4b8:	68fb      	ldr	r3, [r7, #12]
    d4ba:	681b      	ldr	r3, [r3, #0]
    d4bc:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d4be:	68fb      	ldr	r3, [r7, #12]
    d4c0:	2b00      	cmp	r3, #0
    d4c2:	d1ef      	bne.n	d4a4 <usbdc_change_notify+0x14>
	}
}
    d4c4:	bf00      	nop
    d4c6:	3710      	adds	r7, #16
    d4c8:	46bd      	mov	sp, r7
    d4ca:	bd80      	pop	{r7, pc}
    d4cc:	20000e78 	.word	0x20000e78

0000d4d0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d4d0:	b580      	push	{r7, lr}
    d4d2:	b084      	sub	sp, #16
    d4d4:	af00      	add	r7, sp, #0
    d4d6:	4603      	mov	r3, r0
    d4d8:	6039      	str	r1, [r7, #0]
    d4da:	71fb      	strb	r3, [r7, #7]
    d4dc:	4613      	mov	r3, r2
    d4de:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d4e0:	4b12      	ldr	r3, [pc, #72]	; (d52c <usbdc_request_handler+0x5c>)
    d4e2:	689b      	ldr	r3, [r3, #8]
    d4e4:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d4e6:	e019      	b.n	d51c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d4e8:	68fb      	ldr	r3, [r7, #12]
    d4ea:	685b      	ldr	r3, [r3, #4]
    d4ec:	2b00      	cmp	r3, #0
    d4ee:	d012      	beq.n	d516 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d4f0:	68fb      	ldr	r3, [r7, #12]
    d4f2:	685b      	ldr	r3, [r3, #4]
    d4f4:	79ba      	ldrb	r2, [r7, #6]
    d4f6:	79f8      	ldrb	r0, [r7, #7]
    d4f8:	6839      	ldr	r1, [r7, #0]
    d4fa:	4798      	blx	r3
    d4fc:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d4fe:	68bb      	ldr	r3, [r7, #8]
    d500:	2b00      	cmp	r3, #0
    d502:	d101      	bne.n	d508 <usbdc_request_handler+0x38>
				return true;
    d504:	2301      	movs	r3, #1
    d506:	e00d      	b.n	d524 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d508:	68bb      	ldr	r3, [r7, #8]
    d50a:	f113 0f0a 	cmn.w	r3, #10
    d50e:	d002      	beq.n	d516 <usbdc_request_handler+0x46>
				return -1;
    d510:	f04f 33ff 	mov.w	r3, #4294967295
    d514:	e006      	b.n	d524 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d516:	68fb      	ldr	r3, [r7, #12]
    d518:	681b      	ldr	r3, [r3, #0]
    d51a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d51c:	68fb      	ldr	r3, [r7, #12]
    d51e:	2b00      	cmp	r3, #0
    d520:	d1e2      	bne.n	d4e8 <usbdc_request_handler+0x18>
	}
	return false;
    d522:	2300      	movs	r3, #0
}
    d524:	4618      	mov	r0, r3
    d526:	3710      	adds	r7, #16
    d528:	46bd      	mov	sp, r7
    d52a:	bd80      	pop	{r7, pc}
    d52c:	20000e78 	.word	0x20000e78

0000d530 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d530:	b580      	push	{r7, lr}
    d532:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d534:	4b01      	ldr	r3, [pc, #4]	; (d53c <usbd_sof_cb+0xc>)
    d536:	4798      	blx	r3
}
    d538:	bf00      	nop
    d53a:	bd80      	pop	{r7, pc}
    d53c:	0000d45d 	.word	0x0000d45d

0000d540 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d540:	b580      	push	{r7, lr}
    d542:	b082      	sub	sp, #8
    d544:	af00      	add	r7, sp, #0
    d546:	4603      	mov	r3, r0
    d548:	6039      	str	r1, [r7, #0]
    d54a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d54c:	79fb      	ldrb	r3, [r7, #7]
    d54e:	2200      	movs	r2, #0
    d550:	6839      	ldr	r1, [r7, #0]
    d552:	4618      	mov	r0, r3
    d554:	4b14      	ldr	r3, [pc, #80]	; (d5a8 <usbdc_cb_ctl_req+0x68>)
    d556:	4798      	blx	r3
    d558:	4603      	mov	r3, r0
    d55a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d55e:	d00b      	beq.n	d578 <usbdc_cb_ctl_req+0x38>
    d560:	2b01      	cmp	r3, #1
    d562:	d007      	beq.n	d574 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d564:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d566:	683b      	ldr	r3, [r7, #0]
    d568:	781b      	ldrb	r3, [r3, #0]
    d56a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d56e:	2b00      	cmp	r3, #0
    d570:	d007      	beq.n	d582 <usbdc_cb_ctl_req+0x42>
    d572:	e003      	b.n	d57c <usbdc_cb_ctl_req+0x3c>
		return true;
    d574:	2301      	movs	r3, #1
    d576:	e013      	b.n	d5a0 <usbdc_cb_ctl_req+0x60>
		return false;
    d578:	2300      	movs	r3, #0
    d57a:	e011      	b.n	d5a0 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d57c:	2b80      	cmp	r3, #128	; 0x80
    d57e:	d007      	beq.n	d590 <usbdc_cb_ctl_req+0x50>
    d580:	e00d      	b.n	d59e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d582:	79fb      	ldrb	r3, [r7, #7]
    d584:	6839      	ldr	r1, [r7, #0]
    d586:	4618      	mov	r0, r3
    d588:	4b08      	ldr	r3, [pc, #32]	; (d5ac <usbdc_cb_ctl_req+0x6c>)
    d58a:	4798      	blx	r3
    d58c:	4603      	mov	r3, r0
    d58e:	e007      	b.n	d5a0 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d590:	79fb      	ldrb	r3, [r7, #7]
    d592:	6839      	ldr	r1, [r7, #0]
    d594:	4618      	mov	r0, r3
    d596:	4b06      	ldr	r3, [pc, #24]	; (d5b0 <usbdc_cb_ctl_req+0x70>)
    d598:	4798      	blx	r3
    d59a:	4603      	mov	r3, r0
    d59c:	e000      	b.n	d5a0 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d59e:	2300      	movs	r3, #0
	}
}
    d5a0:	4618      	mov	r0, r3
    d5a2:	3708      	adds	r7, #8
    d5a4:	46bd      	mov	sp, r7
    d5a6:	bd80      	pop	{r7, pc}
    d5a8:	0000d4d1 	.word	0x0000d4d1
    d5ac:	0000d371 	.word	0x0000d371
    d5b0:	0000cf99 	.word	0x0000cf99

0000d5b4 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d5b4:	b580      	push	{r7, lr}
    d5b6:	b082      	sub	sp, #8
    d5b8:	af00      	add	r7, sp, #0
    d5ba:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d5bc:	687b      	ldr	r3, [r7, #4]
    d5be:	781b      	ldrb	r3, [r3, #0]
    d5c0:	2b00      	cmp	r3, #0
    d5c2:	d135      	bne.n	d630 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d5c4:	687b      	ldr	r3, [r7, #4]
    d5c6:	785b      	ldrb	r3, [r3, #1]
    d5c8:	2b05      	cmp	r3, #5
    d5ca:	d019      	beq.n	d600 <usbdc_ctrl_status_end+0x4c>
    d5cc:	2b09      	cmp	r3, #9
    d5ce:	d000      	beq.n	d5d2 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d5d0:	e02f      	b.n	d632 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d5d2:	687b      	ldr	r3, [r7, #4]
    d5d4:	885b      	ldrh	r3, [r3, #2]
    d5d6:	b29b      	uxth	r3, r3
    d5d8:	b2da      	uxtb	r2, r3
    d5da:	4b17      	ldr	r3, [pc, #92]	; (d638 <usbdc_ctrl_status_end+0x84>)
    d5dc:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d5de:	687b      	ldr	r3, [r7, #4]
    d5e0:	885b      	ldrh	r3, [r3, #2]
    d5e2:	b29b      	uxth	r3, r3
    d5e4:	2b00      	cmp	r3, #0
    d5e6:	d001      	beq.n	d5ec <usbdc_ctrl_status_end+0x38>
    d5e8:	2204      	movs	r2, #4
    d5ea:	e000      	b.n	d5ee <usbdc_ctrl_status_end+0x3a>
    d5ec:	2203      	movs	r2, #3
    d5ee:	4b12      	ldr	r3, [pc, #72]	; (d638 <usbdc_ctrl_status_end+0x84>)
    d5f0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d5f2:	4b11      	ldr	r3, [pc, #68]	; (d638 <usbdc_ctrl_status_end+0x84>)
    d5f4:	7e9b      	ldrb	r3, [r3, #26]
    d5f6:	4619      	mov	r1, r3
    d5f8:	2001      	movs	r0, #1
    d5fa:	4b10      	ldr	r3, [pc, #64]	; (d63c <usbdc_ctrl_status_end+0x88>)
    d5fc:	4798      	blx	r3
		break;
    d5fe:	e018      	b.n	d632 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d600:	687b      	ldr	r3, [r7, #4]
    d602:	885b      	ldrh	r3, [r3, #2]
    d604:	b29b      	uxth	r3, r3
    d606:	b2db      	uxtb	r3, r3
    d608:	4618      	mov	r0, r3
    d60a:	4b0d      	ldr	r3, [pc, #52]	; (d640 <usbdc_ctrl_status_end+0x8c>)
    d60c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d60e:	687b      	ldr	r3, [r7, #4]
    d610:	885b      	ldrh	r3, [r3, #2]
    d612:	b29b      	uxth	r3, r3
    d614:	2b00      	cmp	r3, #0
    d616:	d001      	beq.n	d61c <usbdc_ctrl_status_end+0x68>
    d618:	2203      	movs	r2, #3
    d61a:	e000      	b.n	d61e <usbdc_ctrl_status_end+0x6a>
    d61c:	2202      	movs	r2, #2
    d61e:	4b06      	ldr	r3, [pc, #24]	; (d638 <usbdc_ctrl_status_end+0x84>)
    d620:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d622:	4b05      	ldr	r3, [pc, #20]	; (d638 <usbdc_ctrl_status_end+0x84>)
    d624:	7e9b      	ldrb	r3, [r3, #26]
    d626:	4619      	mov	r1, r3
    d628:	2001      	movs	r0, #1
    d62a:	4b04      	ldr	r3, [pc, #16]	; (d63c <usbdc_ctrl_status_end+0x88>)
    d62c:	4798      	blx	r3
		break;
    d62e:	e000      	b.n	d632 <usbdc_ctrl_status_end+0x7e>
		return;
    d630:	bf00      	nop
	}
}
    d632:	3708      	adds	r7, #8
    d634:	46bd      	mov	sp, r7
    d636:	bd80      	pop	{r7, pc}
    d638:	20000e78 	.word	0x20000e78
    d63c:	0000d491 	.word	0x0000d491
    d640:	0000d211 	.word	0x0000d211

0000d644 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d644:	b580      	push	{r7, lr}
    d646:	b082      	sub	sp, #8
    d648:	af00      	add	r7, sp, #0
    d64a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d64c:	2201      	movs	r2, #1
    d64e:	6879      	ldr	r1, [r7, #4]
    d650:	2000      	movs	r0, #0
    d652:	4b03      	ldr	r3, [pc, #12]	; (d660 <usbdc_ctrl_data_end+0x1c>)
    d654:	4798      	blx	r3
	return false;
    d656:	2300      	movs	r3, #0
}
    d658:	4618      	mov	r0, r3
    d65a:	3708      	adds	r7, #8
    d65c:	46bd      	mov	sp, r7
    d65e:	bd80      	pop	{r7, pc}
    d660:	0000d4d1 	.word	0x0000d4d1

0000d664 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d664:	b580      	push	{r7, lr}
    d666:	b082      	sub	sp, #8
    d668:	af00      	add	r7, sp, #0
    d66a:	4603      	mov	r3, r0
    d66c:	603a      	str	r2, [r7, #0]
    d66e:	71fb      	strb	r3, [r7, #7]
    d670:	460b      	mov	r3, r1
    d672:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d674:	79bb      	ldrb	r3, [r7, #6]
    d676:	2b00      	cmp	r3, #0
    d678:	d002      	beq.n	d680 <usbdc_cb_ctl_done+0x1c>
    d67a:	2b01      	cmp	r3, #1
    d67c:	d004      	beq.n	d688 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d67e:	e008      	b.n	d692 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d680:	6838      	ldr	r0, [r7, #0]
    d682:	4b06      	ldr	r3, [pc, #24]	; (d69c <usbdc_cb_ctl_done+0x38>)
    d684:	4798      	blx	r3
		break;
    d686:	e004      	b.n	d692 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d688:	6838      	ldr	r0, [r7, #0]
    d68a:	4b05      	ldr	r3, [pc, #20]	; (d6a0 <usbdc_cb_ctl_done+0x3c>)
    d68c:	4798      	blx	r3
    d68e:	4603      	mov	r3, r0
    d690:	e000      	b.n	d694 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d692:	2300      	movs	r3, #0
}
    d694:	4618      	mov	r0, r3
    d696:	3708      	adds	r7, #8
    d698:	46bd      	mov	sp, r7
    d69a:	bd80      	pop	{r7, pc}
    d69c:	0000d5b5 	.word	0x0000d5b5
    d6a0:	0000d645 	.word	0x0000d645

0000d6a4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d6a4:	b580      	push	{r7, lr}
    d6a6:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d6a8:	4b10      	ldr	r3, [pc, #64]	; (d6ec <usbdc_reset+0x48>)
    d6aa:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d6ac:	4b10      	ldr	r3, [pc, #64]	; (d6f0 <usbdc_reset+0x4c>)
    d6ae:	2202      	movs	r2, #2
    d6b0:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d6b2:	4b0f      	ldr	r3, [pc, #60]	; (d6f0 <usbdc_reset+0x4c>)
    d6b4:	2200      	movs	r2, #0
    d6b6:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d6b8:	4b0d      	ldr	r3, [pc, #52]	; (d6f0 <usbdc_reset+0x4c>)
    d6ba:	2200      	movs	r2, #0
    d6bc:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d6be:	2000      	movs	r0, #0
    d6c0:	4b0c      	ldr	r3, [pc, #48]	; (d6f4 <usbdc_reset+0x50>)
    d6c2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d6c4:	4b0a      	ldr	r3, [pc, #40]	; (d6f0 <usbdc_reset+0x4c>)
    d6c6:	7f1b      	ldrb	r3, [r3, #28]
    d6c8:	4618      	mov	r0, r3
    d6ca:	4b0b      	ldr	r3, [pc, #44]	; (d6f8 <usbdc_reset+0x54>)
    d6cc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d6ce:	4a0b      	ldr	r2, [pc, #44]	; (d6fc <usbdc_reset+0x58>)
    d6d0:	2100      	movs	r1, #0
    d6d2:	2000      	movs	r0, #0
    d6d4:	4b0a      	ldr	r3, [pc, #40]	; (d700 <usbdc_reset+0x5c>)
    d6d6:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d6d8:	4a0a      	ldr	r2, [pc, #40]	; (d704 <usbdc_reset+0x60>)
    d6da:	2102      	movs	r1, #2
    d6dc:	2000      	movs	r0, #0
    d6de:	4b08      	ldr	r3, [pc, #32]	; (d700 <usbdc_reset+0x5c>)
    d6e0:	4798      	blx	r3
	usb_d_ep_enable(0);
    d6e2:	2000      	movs	r0, #0
    d6e4:	4b08      	ldr	r3, [pc, #32]	; (d708 <usbdc_reset+0x64>)
    d6e6:	4798      	blx	r3
}
    d6e8:	bf00      	nop
    d6ea:	bd80      	pop	{r7, pc}
    d6ec:	0000d0f1 	.word	0x0000d0f1
    d6f0:	20000e78 	.word	0x20000e78
    d6f4:	000038dd 	.word	0x000038dd
    d6f8:	00003819 	.word	0x00003819
    d6fc:	0000d541 	.word	0x0000d541
    d700:	00003c31 	.word	0x00003c31
    d704:	0000d665 	.word	0x0000d665
    d708:	0000392d 	.word	0x0000392d

0000d70c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d70c:	b580      	push	{r7, lr}
    d70e:	b082      	sub	sp, #8
    d710:	af00      	add	r7, sp, #0
    d712:	4603      	mov	r3, r0
    d714:	6039      	str	r1, [r7, #0]
    d716:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d718:	79fb      	ldrb	r3, [r7, #7]
    d71a:	2b00      	cmp	r3, #0
    d71c:	d002      	beq.n	d724 <usbd_event_cb+0x18>
    d71e:	2b01      	cmp	r3, #1
    d720:	d005      	beq.n	d72e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d722:	e007      	b.n	d734 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d724:	6839      	ldr	r1, [r7, #0]
    d726:	2000      	movs	r0, #0
    d728:	4b04      	ldr	r3, [pc, #16]	; (d73c <usbd_event_cb+0x30>)
    d72a:	4798      	blx	r3
		break;
    d72c:	e002      	b.n	d734 <usbd_event_cb+0x28>
		usbdc_reset();
    d72e:	4b04      	ldr	r3, [pc, #16]	; (d740 <usbd_event_cb+0x34>)
    d730:	4798      	blx	r3
		break;
    d732:	bf00      	nop
	}
}
    d734:	bf00      	nop
    d736:	3708      	adds	r7, #8
    d738:	46bd      	mov	sp, r7
    d73a:	bd80      	pop	{r7, pc}
    d73c:	0000d491 	.word	0x0000d491
    d740:	0000d6a5 	.word	0x0000d6a5

0000d744 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d744:	b580      	push	{r7, lr}
    d746:	b088      	sub	sp, #32
    d748:	af00      	add	r7, sp, #0
    d74a:	60b9      	str	r1, [r7, #8]
    d74c:	607a      	str	r2, [r7, #4]
    d74e:	461a      	mov	r2, r3
    d750:	4603      	mov	r3, r0
    d752:	73fb      	strb	r3, [r7, #15]
    d754:	4613      	mov	r3, r2
    d756:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d758:	68bb      	ldr	r3, [r7, #8]
    d75a:	617b      	str	r3, [r7, #20]
    d75c:	687b      	ldr	r3, [r7, #4]
    d75e:	61bb      	str	r3, [r7, #24]
    d760:	7bfb      	ldrb	r3, [r7, #15]
    d762:	773b      	strb	r3, [r7, #28]
    d764:	7bbb      	ldrb	r3, [r7, #14]
    d766:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d768:	f107 0314 	add.w	r3, r7, #20
    d76c:	4618      	mov	r0, r3
    d76e:	4b03      	ldr	r3, [pc, #12]	; (d77c <usbdc_xfer+0x38>)
    d770:	4798      	blx	r3
    d772:	4603      	mov	r3, r0
}
    d774:	4618      	mov	r0, r3
    d776:	3720      	adds	r7, #32
    d778:	46bd      	mov	sp, r7
    d77a:	bd80      	pop	{r7, pc}
    d77c:	0000399d 	.word	0x0000399d

0000d780 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d780:	b580      	push	{r7, lr}
    d782:	b082      	sub	sp, #8
    d784:	af00      	add	r7, sp, #0
    d786:	4603      	mov	r3, r0
    d788:	6039      	str	r1, [r7, #0]
    d78a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d78c:	79fb      	ldrb	r3, [r7, #7]
    d78e:	2b01      	cmp	r3, #1
    d790:	d009      	beq.n	d7a6 <usbdc_register_handler+0x26>
    d792:	2b02      	cmp	r3, #2
    d794:	d00c      	beq.n	d7b0 <usbdc_register_handler+0x30>
    d796:	2b00      	cmp	r3, #0
    d798:	d000      	beq.n	d79c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d79a:	e00e      	b.n	d7ba <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d79c:	6839      	ldr	r1, [r7, #0]
    d79e:	4809      	ldr	r0, [pc, #36]	; (d7c4 <usbdc_register_handler+0x44>)
    d7a0:	4b09      	ldr	r3, [pc, #36]	; (d7c8 <usbdc_register_handler+0x48>)
    d7a2:	4798      	blx	r3
		break;
    d7a4:	e009      	b.n	d7ba <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d7a6:	6839      	ldr	r1, [r7, #0]
    d7a8:	4808      	ldr	r0, [pc, #32]	; (d7cc <usbdc_register_handler+0x4c>)
    d7aa:	4b07      	ldr	r3, [pc, #28]	; (d7c8 <usbdc_register_handler+0x48>)
    d7ac:	4798      	blx	r3
		break;
    d7ae:	e004      	b.n	d7ba <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d7b0:	6839      	ldr	r1, [r7, #0]
    d7b2:	4807      	ldr	r0, [pc, #28]	; (d7d0 <usbdc_register_handler+0x50>)
    d7b4:	4b04      	ldr	r3, [pc, #16]	; (d7c8 <usbdc_register_handler+0x48>)
    d7b6:	4798      	blx	r3
		break;
    d7b8:	bf00      	nop
	}
}
    d7ba:	bf00      	nop
    d7bc:	3708      	adds	r7, #8
    d7be:	46bd      	mov	sp, r7
    d7c0:	bd80      	pop	{r7, pc}
    d7c2:	bf00      	nop
    d7c4:	20000e7c 	.word	0x20000e7c
    d7c8:	00003d89 	.word	0x00003d89
    d7cc:	20000e80 	.word	0x20000e80
    d7d0:	20000e84 	.word	0x20000e84

0000d7d4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d7d4:	b580      	push	{r7, lr}
    d7d6:	b084      	sub	sp, #16
    d7d8:	af00      	add	r7, sp, #0
    d7da:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d7dc:	687b      	ldr	r3, [r7, #4]
    d7de:	2b00      	cmp	r3, #0
    d7e0:	bf14      	ite	ne
    d7e2:	2301      	movne	r3, #1
    d7e4:	2300      	moveq	r3, #0
    d7e6:	b2db      	uxtb	r3, r3
    d7e8:	f240 3255 	movw	r2, #853	; 0x355
    d7ec:	4910      	ldr	r1, [pc, #64]	; (d830 <usbdc_init+0x5c>)
    d7ee:	4618      	mov	r0, r3
    d7f0:	4b10      	ldr	r3, [pc, #64]	; (d834 <usbdc_init+0x60>)
    d7f2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d7f4:	4b10      	ldr	r3, [pc, #64]	; (d838 <usbdc_init+0x64>)
    d7f6:	4798      	blx	r3
    d7f8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d7fa:	68fb      	ldr	r3, [r7, #12]
    d7fc:	2b00      	cmp	r3, #0
    d7fe:	da01      	bge.n	d804 <usbdc_init+0x30>
		return rc;
    d800:	68fb      	ldr	r3, [r7, #12]
    d802:	e010      	b.n	d826 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d804:	2220      	movs	r2, #32
    d806:	2100      	movs	r1, #0
    d808:	480c      	ldr	r0, [pc, #48]	; (d83c <usbdc_init+0x68>)
    d80a:	4b0d      	ldr	r3, [pc, #52]	; (d840 <usbdc_init+0x6c>)
    d80c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d80e:	4a0b      	ldr	r2, [pc, #44]	; (d83c <usbdc_init+0x68>)
    d810:	687b      	ldr	r3, [r7, #4]
    d812:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d814:	490b      	ldr	r1, [pc, #44]	; (d844 <usbdc_init+0x70>)
    d816:	2000      	movs	r0, #0
    d818:	4b0b      	ldr	r3, [pc, #44]	; (d848 <usbdc_init+0x74>)
    d81a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d81c:	490b      	ldr	r1, [pc, #44]	; (d84c <usbdc_init+0x78>)
    d81e:	2001      	movs	r0, #1
    d820:	4b09      	ldr	r3, [pc, #36]	; (d848 <usbdc_init+0x74>)
    d822:	4798      	blx	r3

	return 0;
    d824:	2300      	movs	r3, #0
}
    d826:	4618      	mov	r0, r3
    d828:	3710      	adds	r7, #16
    d82a:	46bd      	mov	sp, r7
    d82c:	bd80      	pop	{r7, pc}
    d82e:	bf00      	nop
    d830:	00011ec0 	.word	0x00011ec0
    d834:	00003cad 	.word	0x00003cad
    d838:	00003705 	.word	0x00003705
    d83c:	20000e78 	.word	0x20000e78
    d840:	000117e9 	.word	0x000117e9
    d844:	0000d531 	.word	0x0000d531
    d848:	000037b1 	.word	0x000037b1
    d84c:	0000d70d 	.word	0x0000d70d

0000d850 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d850:	b580      	push	{r7, lr}
    d852:	b082      	sub	sp, #8
    d854:	af00      	add	r7, sp, #0
    d856:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d858:	6879      	ldr	r1, [r7, #4]
    d85a:	4803      	ldr	r0, [pc, #12]	; (d868 <usbdc_register_function+0x18>)
    d85c:	4b03      	ldr	r3, [pc, #12]	; (d86c <usbdc_register_function+0x1c>)
    d85e:	4798      	blx	r3
}
    d860:	bf00      	nop
    d862:	3708      	adds	r7, #8
    d864:	46bd      	mov	sp, r7
    d866:	bd80      	pop	{r7, pc}
    d868:	20000e88 	.word	0x20000e88
    d86c:	00003d89 	.word	0x00003d89

0000d870 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d870:	b580      	push	{r7, lr}
    d872:	b082      	sub	sp, #8
    d874:	af00      	add	r7, sp, #0
    d876:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d878:	4b0f      	ldr	r3, [pc, #60]	; (d8b8 <usbdc_start+0x48>)
    d87a:	7e9b      	ldrb	r3, [r3, #26]
    d87c:	2b00      	cmp	r3, #0
    d87e:	d002      	beq.n	d886 <usbdc_start+0x16>
		return ERR_BUSY;
    d880:	f06f 0303 	mvn.w	r3, #3
    d884:	e013      	b.n	d8ae <usbdc_start+0x3e>
	}

	if (desces) {
    d886:	687b      	ldr	r3, [r7, #4]
    d888:	2b00      	cmp	r3, #0
    d88a:	d00e      	beq.n	d8aa <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d88c:	4a0a      	ldr	r2, [pc, #40]	; (d8b8 <usbdc_start+0x48>)
    d88e:	687b      	ldr	r3, [r7, #4]
    d890:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d892:	687b      	ldr	r3, [r7, #4]
    d894:	681b      	ldr	r3, [r3, #0]
    d896:	79da      	ldrb	r2, [r3, #7]
    d898:	4b07      	ldr	r3, [pc, #28]	; (d8b8 <usbdc_start+0x48>)
    d89a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d89c:	4b06      	ldr	r3, [pc, #24]	; (d8b8 <usbdc_start+0x48>)
    d89e:	2201      	movs	r2, #1
    d8a0:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d8a2:	4b06      	ldr	r3, [pc, #24]	; (d8bc <usbdc_start+0x4c>)
    d8a4:	4798      	blx	r3
	return ERR_NONE;
    d8a6:	2300      	movs	r3, #0
    d8a8:	e001      	b.n	d8ae <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d8aa:	f06f 0308 	mvn.w	r3, #8
}
    d8ae:	4618      	mov	r0, r3
    d8b0:	3708      	adds	r7, #8
    d8b2:	46bd      	mov	sp, r7
    d8b4:	bd80      	pop	{r7, pc}
    d8b6:	bf00      	nop
    d8b8:	20000e78 	.word	0x20000e78
    d8bc:	000037d5 	.word	0x000037d5

0000d8c0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d8c0:	b580      	push	{r7, lr}
    d8c2:	af00      	add	r7, sp, #0
	usb_d_attach();
    d8c4:	4b01      	ldr	r3, [pc, #4]	; (d8cc <usbdc_attach+0xc>)
    d8c6:	4798      	blx	r3
}
    d8c8:	bf00      	nop
    d8ca:	bd80      	pop	{r7, pc}
    d8cc:	000037e9 	.word	0x000037e9

0000d8d0 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d8d0:	b480      	push	{r7}
    d8d2:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d8d4:	4b03      	ldr	r3, [pc, #12]	; (d8e4 <usbdc_get_ctrl_buffer+0x14>)
    d8d6:	695b      	ldr	r3, [r3, #20]
}
    d8d8:	4618      	mov	r0, r3
    d8da:	46bd      	mov	sp, r7
    d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8e0:	4770      	bx	lr
    d8e2:	bf00      	nop
    d8e4:	20000e78 	.word	0x20000e78

0000d8e8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d8e8:	b480      	push	{r7}
    d8ea:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d8ec:	4b07      	ldr	r3, [pc, #28]	; (d90c <usbdc_get_state+0x24>)
    d8ee:	7e9b      	ldrb	r3, [r3, #26]
    d8f0:	f003 0310 	and.w	r3, r3, #16
    d8f4:	2b00      	cmp	r3, #0
    d8f6:	d001      	beq.n	d8fc <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d8f8:	2310      	movs	r3, #16
    d8fa:	e001      	b.n	d900 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d8fc:	4b03      	ldr	r3, [pc, #12]	; (d90c <usbdc_get_state+0x24>)
    d8fe:	7e9b      	ldrb	r3, [r3, #26]
}
    d900:	4618      	mov	r0, r3
    d902:	46bd      	mov	sp, r7
    d904:	f85d 7b04 	ldr.w	r7, [sp], #4
    d908:	4770      	bx	lr
    d90a:	bf00      	nop
    d90c:	20000e78 	.word	0x20000e78

0000d910 <usb_get_u16>:
{
    d910:	b480      	push	{r7}
    d912:	b083      	sub	sp, #12
    d914:	af00      	add	r7, sp, #0
    d916:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d918:	687b      	ldr	r3, [r7, #4]
    d91a:	781b      	ldrb	r3, [r3, #0]
    d91c:	b29a      	uxth	r2, r3
    d91e:	687b      	ldr	r3, [r7, #4]
    d920:	3301      	adds	r3, #1
    d922:	781b      	ldrb	r3, [r3, #0]
    d924:	b29b      	uxth	r3, r3
    d926:	021b      	lsls	r3, r3, #8
    d928:	b29b      	uxth	r3, r3
    d92a:	4413      	add	r3, r2
    d92c:	b29b      	uxth	r3, r3
}
    d92e:	4618      	mov	r0, r3
    d930:	370c      	adds	r7, #12
    d932:	46bd      	mov	sp, r7
    d934:	f85d 7b04 	ldr.w	r7, [sp], #4
    d938:	4770      	bx	lr

0000d93a <usb_desc_len>:
{
    d93a:	b480      	push	{r7}
    d93c:	b083      	sub	sp, #12
    d93e:	af00      	add	r7, sp, #0
    d940:	6078      	str	r0, [r7, #4]
	return desc[0];
    d942:	687b      	ldr	r3, [r7, #4]
    d944:	781b      	ldrb	r3, [r3, #0]
}
    d946:	4618      	mov	r0, r3
    d948:	370c      	adds	r7, #12
    d94a:	46bd      	mov	sp, r7
    d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d950:	4770      	bx	lr

0000d952 <usb_desc_type>:
{
    d952:	b480      	push	{r7}
    d954:	b083      	sub	sp, #12
    d956:	af00      	add	r7, sp, #0
    d958:	6078      	str	r0, [r7, #4]
	return desc[1];
    d95a:	687b      	ldr	r3, [r7, #4]
    d95c:	3301      	adds	r3, #1
    d95e:	781b      	ldrb	r3, [r3, #0]
}
    d960:	4618      	mov	r0, r3
    d962:	370c      	adds	r7, #12
    d964:	46bd      	mov	sp, r7
    d966:	f85d 7b04 	ldr.w	r7, [sp], #4
    d96a:	4770      	bx	lr

0000d96c <usb_desc_next>:
{
    d96c:	b580      	push	{r7, lr}
    d96e:	b082      	sub	sp, #8
    d970:	af00      	add	r7, sp, #0
    d972:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d974:	6878      	ldr	r0, [r7, #4]
    d976:	4b05      	ldr	r3, [pc, #20]	; (d98c <usb_desc_next+0x20>)
    d978:	4798      	blx	r3
    d97a:	4603      	mov	r3, r0
    d97c:	461a      	mov	r2, r3
    d97e:	687b      	ldr	r3, [r7, #4]
    d980:	4413      	add	r3, r2
}
    d982:	4618      	mov	r0, r3
    d984:	3708      	adds	r7, #8
    d986:	46bd      	mov	sp, r7
    d988:	bd80      	pop	{r7, pc}
    d98a:	bf00      	nop
    d98c:	0000d93b 	.word	0x0000d93b

0000d990 <usb_cfg_desc_total_len>:
{
    d990:	b580      	push	{r7, lr}
    d992:	b082      	sub	sp, #8
    d994:	af00      	add	r7, sp, #0
    d996:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d998:	687b      	ldr	r3, [r7, #4]
    d99a:	3302      	adds	r3, #2
    d99c:	4618      	mov	r0, r3
    d99e:	4b03      	ldr	r3, [pc, #12]	; (d9ac <usb_cfg_desc_total_len+0x1c>)
    d9a0:	4798      	blx	r3
    d9a2:	4603      	mov	r3, r0
}
    d9a4:	4618      	mov	r0, r3
    d9a6:	3708      	adds	r7, #8
    d9a8:	46bd      	mov	sp, r7
    d9aa:	bd80      	pop	{r7, pc}
    d9ac:	0000d911 	.word	0x0000d911

0000d9b0 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d9b0:	b580      	push	{r7, lr}
    d9b2:	b082      	sub	sp, #8
    d9b4:	af00      	add	r7, sp, #0
    d9b6:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d9b8:	6878      	ldr	r0, [r7, #4]
    d9ba:	4b05      	ldr	r3, [pc, #20]	; (d9d0 <usb_cfg_desc_next+0x20>)
    d9bc:	4798      	blx	r3
    d9be:	4603      	mov	r3, r0
    d9c0:	461a      	mov	r2, r3
    d9c2:	687b      	ldr	r3, [r7, #4]
    d9c4:	4413      	add	r3, r2
}
    d9c6:	4618      	mov	r0, r3
    d9c8:	3708      	adds	r7, #8
    d9ca:	46bd      	mov	sp, r7
    d9cc:	bd80      	pop	{r7, pc}
    d9ce:	bf00      	nop
    d9d0:	0000d991 	.word	0x0000d991

0000d9d4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d9d4:	b580      	push	{r7, lr}
    d9d6:	b084      	sub	sp, #16
    d9d8:	af00      	add	r7, sp, #0
    d9da:	60f8      	str	r0, [r7, #12]
    d9dc:	60b9      	str	r1, [r7, #8]
    d9de:	4613      	mov	r3, r2
    d9e0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d9e2:	e015      	b.n	da10 <usb_find_desc+0x3c>
		_desc_len_check();
    d9e4:	68f8      	ldr	r0, [r7, #12]
    d9e6:	4b0f      	ldr	r3, [pc, #60]	; (da24 <usb_find_desc+0x50>)
    d9e8:	4798      	blx	r3
    d9ea:	4603      	mov	r3, r0
    d9ec:	2b01      	cmp	r3, #1
    d9ee:	d801      	bhi.n	d9f4 <usb_find_desc+0x20>
    d9f0:	2300      	movs	r3, #0
    d9f2:	e012      	b.n	da1a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d9f4:	68f8      	ldr	r0, [r7, #12]
    d9f6:	4b0c      	ldr	r3, [pc, #48]	; (da28 <usb_find_desc+0x54>)
    d9f8:	4798      	blx	r3
    d9fa:	4603      	mov	r3, r0
    d9fc:	461a      	mov	r2, r3
    d9fe:	79fb      	ldrb	r3, [r7, #7]
    da00:	4293      	cmp	r3, r2
    da02:	d101      	bne.n	da08 <usb_find_desc+0x34>
			return desc;
    da04:	68fb      	ldr	r3, [r7, #12]
    da06:	e008      	b.n	da1a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    da08:	68f8      	ldr	r0, [r7, #12]
    da0a:	4b08      	ldr	r3, [pc, #32]	; (da2c <usb_find_desc+0x58>)
    da0c:	4798      	blx	r3
    da0e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    da10:	68fa      	ldr	r2, [r7, #12]
    da12:	68bb      	ldr	r3, [r7, #8]
    da14:	429a      	cmp	r2, r3
    da16:	d3e5      	bcc.n	d9e4 <usb_find_desc+0x10>
	}
	return NULL;
    da18:	2300      	movs	r3, #0
}
    da1a:	4618      	mov	r0, r3
    da1c:	3710      	adds	r7, #16
    da1e:	46bd      	mov	sp, r7
    da20:	bd80      	pop	{r7, pc}
    da22:	bf00      	nop
    da24:	0000d93b 	.word	0x0000d93b
    da28:	0000d953 	.word	0x0000d953
    da2c:	0000d96d 	.word	0x0000d96d

0000da30 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    da30:	b580      	push	{r7, lr}
    da32:	b082      	sub	sp, #8
    da34:	af00      	add	r7, sp, #0
    da36:	6078      	str	r0, [r7, #4]
    da38:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    da3a:	e019      	b.n	da70 <usb_find_ep_desc+0x40>
		_desc_len_check();
    da3c:	6878      	ldr	r0, [r7, #4]
    da3e:	4b12      	ldr	r3, [pc, #72]	; (da88 <usb_find_ep_desc+0x58>)
    da40:	4798      	blx	r3
    da42:	4603      	mov	r3, r0
    da44:	2b01      	cmp	r3, #1
    da46:	d801      	bhi.n	da4c <usb_find_ep_desc+0x1c>
    da48:	2300      	movs	r3, #0
    da4a:	e018      	b.n	da7e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    da4c:	6878      	ldr	r0, [r7, #4]
    da4e:	4b0f      	ldr	r3, [pc, #60]	; (da8c <usb_find_ep_desc+0x5c>)
    da50:	4798      	blx	r3
    da52:	4603      	mov	r3, r0
    da54:	2b04      	cmp	r3, #4
    da56:	d010      	beq.n	da7a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    da58:	6878      	ldr	r0, [r7, #4]
    da5a:	4b0c      	ldr	r3, [pc, #48]	; (da8c <usb_find_ep_desc+0x5c>)
    da5c:	4798      	blx	r3
    da5e:	4603      	mov	r3, r0
    da60:	2b05      	cmp	r3, #5
    da62:	d101      	bne.n	da68 <usb_find_ep_desc+0x38>
			return desc;
    da64:	687b      	ldr	r3, [r7, #4]
    da66:	e00a      	b.n	da7e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    da68:	6878      	ldr	r0, [r7, #4]
    da6a:	4b09      	ldr	r3, [pc, #36]	; (da90 <usb_find_ep_desc+0x60>)
    da6c:	4798      	blx	r3
    da6e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    da70:	687a      	ldr	r2, [r7, #4]
    da72:	683b      	ldr	r3, [r7, #0]
    da74:	429a      	cmp	r2, r3
    da76:	d3e1      	bcc.n	da3c <usb_find_ep_desc+0xc>
    da78:	e000      	b.n	da7c <usb_find_ep_desc+0x4c>
			break;
    da7a:	bf00      	nop
	}
	return NULL;
    da7c:	2300      	movs	r3, #0
}
    da7e:	4618      	mov	r0, r3
    da80:	3708      	adds	r7, #8
    da82:	46bd      	mov	sp, r7
    da84:	bd80      	pop	{r7, pc}
    da86:	bf00      	nop
    da88:	0000d93b 	.word	0x0000d93b
    da8c:	0000d953 	.word	0x0000d953
    da90:	0000d96d 	.word	0x0000d96d

0000da94 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    da94:	b580      	push	{r7, lr}
    da96:	b084      	sub	sp, #16
    da98:	af00      	add	r7, sp, #0
    da9a:	60f8      	str	r0, [r7, #12]
    da9c:	60b9      	str	r1, [r7, #8]
    da9e:	4613      	mov	r3, r2
    daa0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    daa2:	2202      	movs	r2, #2
    daa4:	68b9      	ldr	r1, [r7, #8]
    daa6:	68f8      	ldr	r0, [r7, #12]
    daa8:	4b15      	ldr	r3, [pc, #84]	; (db00 <usb_find_cfg_desc+0x6c>)
    daaa:	4798      	blx	r3
    daac:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    daae:	68fb      	ldr	r3, [r7, #12]
    dab0:	2b00      	cmp	r3, #0
    dab2:	d11a      	bne.n	daea <usb_find_cfg_desc+0x56>
		return NULL;
    dab4:	2300      	movs	r3, #0
    dab6:	e01f      	b.n	daf8 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    dab8:	68f8      	ldr	r0, [r7, #12]
    daba:	4b12      	ldr	r3, [pc, #72]	; (db04 <usb_find_cfg_desc+0x70>)
    dabc:	4798      	blx	r3
    dabe:	4603      	mov	r3, r0
    dac0:	2b01      	cmp	r3, #1
    dac2:	d801      	bhi.n	dac8 <usb_find_cfg_desc+0x34>
    dac4:	2300      	movs	r3, #0
    dac6:	e017      	b.n	daf8 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    dac8:	68fb      	ldr	r3, [r7, #12]
    daca:	3301      	adds	r3, #1
    dacc:	781b      	ldrb	r3, [r3, #0]
    dace:	2b02      	cmp	r3, #2
    dad0:	d110      	bne.n	daf4 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    dad2:	68fb      	ldr	r3, [r7, #12]
    dad4:	3305      	adds	r3, #5
    dad6:	781b      	ldrb	r3, [r3, #0]
    dad8:	79fa      	ldrb	r2, [r7, #7]
    dada:	429a      	cmp	r2, r3
    dadc:	d101      	bne.n	dae2 <usb_find_cfg_desc+0x4e>
			return desc;
    dade:	68fb      	ldr	r3, [r7, #12]
    dae0:	e00a      	b.n	daf8 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    dae2:	68f8      	ldr	r0, [r7, #12]
    dae4:	4b08      	ldr	r3, [pc, #32]	; (db08 <usb_find_cfg_desc+0x74>)
    dae6:	4798      	blx	r3
    dae8:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    daea:	68fa      	ldr	r2, [r7, #12]
    daec:	68bb      	ldr	r3, [r7, #8]
    daee:	429a      	cmp	r2, r3
    daf0:	d3e2      	bcc.n	dab8 <usb_find_cfg_desc+0x24>
    daf2:	e000      	b.n	daf6 <usb_find_cfg_desc+0x62>
			break;
    daf4:	bf00      	nop
	}
	return NULL;
    daf6:	2300      	movs	r3, #0
}
    daf8:	4618      	mov	r0, r3
    dafa:	3710      	adds	r7, #16
    dafc:	46bd      	mov	sp, r7
    dafe:	bd80      	pop	{r7, pc}
    db00:	0000d9d5 	.word	0x0000d9d5
    db04:	0000d93b 	.word	0x0000d93b
    db08:	0000d9b1 	.word	0x0000d9b1

0000db0c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    db0c:	b580      	push	{r7, lr}
    db0e:	b086      	sub	sp, #24
    db10:	af00      	add	r7, sp, #0
    db12:	60f8      	str	r0, [r7, #12]
    db14:	60b9      	str	r1, [r7, #8]
    db16:	4613      	mov	r3, r2
    db18:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    db1a:	2300      	movs	r3, #0
    db1c:	75fb      	strb	r3, [r7, #23]
    db1e:	e020      	b.n	db62 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    db20:	2203      	movs	r2, #3
    db22:	68b9      	ldr	r1, [r7, #8]
    db24:	68f8      	ldr	r0, [r7, #12]
    db26:	4b13      	ldr	r3, [pc, #76]	; (db74 <usb_find_str_desc+0x68>)
    db28:	4798      	blx	r3
    db2a:	60f8      	str	r0, [r7, #12]
		if (desc) {
    db2c:	68fb      	ldr	r3, [r7, #12]
    db2e:	2b00      	cmp	r3, #0
    db30:	d015      	beq.n	db5e <usb_find_str_desc+0x52>
			_desc_len_check();
    db32:	68f8      	ldr	r0, [r7, #12]
    db34:	4b10      	ldr	r3, [pc, #64]	; (db78 <usb_find_str_desc+0x6c>)
    db36:	4798      	blx	r3
    db38:	4603      	mov	r3, r0
    db3a:	2b01      	cmp	r3, #1
    db3c:	d801      	bhi.n	db42 <usb_find_str_desc+0x36>
    db3e:	2300      	movs	r3, #0
    db40:	e014      	b.n	db6c <usb_find_str_desc+0x60>
			if (i == str_index) {
    db42:	7dfa      	ldrb	r2, [r7, #23]
    db44:	79fb      	ldrb	r3, [r7, #7]
    db46:	429a      	cmp	r2, r3
    db48:	d101      	bne.n	db4e <usb_find_str_desc+0x42>
				return desc;
    db4a:	68fb      	ldr	r3, [r7, #12]
    db4c:	e00e      	b.n	db6c <usb_find_str_desc+0x60>
			}
			i++;
    db4e:	7dfb      	ldrb	r3, [r7, #23]
    db50:	3301      	adds	r3, #1
    db52:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    db54:	68f8      	ldr	r0, [r7, #12]
    db56:	4b09      	ldr	r3, [pc, #36]	; (db7c <usb_find_str_desc+0x70>)
    db58:	4798      	blx	r3
    db5a:	60f8      	str	r0, [r7, #12]
    db5c:	e001      	b.n	db62 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    db5e:	2300      	movs	r3, #0
    db60:	e004      	b.n	db6c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    db62:	68fa      	ldr	r2, [r7, #12]
    db64:	68bb      	ldr	r3, [r7, #8]
    db66:	429a      	cmp	r2, r3
    db68:	d3da      	bcc.n	db20 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    db6a:	2300      	movs	r3, #0
}
    db6c:	4618      	mov	r0, r3
    db6e:	3718      	adds	r7, #24
    db70:	46bd      	mov	sp, r7
    db72:	bd80      	pop	{r7, pc}
    db74:	0000d9d5 	.word	0x0000d9d5
    db78:	0000d93b 	.word	0x0000d93b
    db7c:	0000d96d 	.word	0x0000d96d

0000db80 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    db80:	b480      	push	{r7}
    db82:	b083      	sub	sp, #12
    db84:	af00      	add	r7, sp, #0
    db86:	6078      	str	r0, [r7, #4]
    db88:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    db8a:	687b      	ldr	r3, [r7, #4]
    db8c:	683a      	ldr	r2, [r7, #0]
    db8e:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    db90:	4a06      	ldr	r2, [pc, #24]	; (dbac <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    db92:	687b      	ldr	r3, [r7, #4]
    db94:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    db96:	687b      	ldr	r3, [r7, #4]
    db98:	f44f 6280 	mov.w	r2, #1024	; 0x400
    db9c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    db9e:	687b      	ldr	r3, [r7, #4]
    dba0:	4618      	mov	r0, r3
    dba2:	370c      	adds	r7, #12
    dba4:	46bd      	mov	sp, r7
    dba6:	bc80      	pop	{r7}
    dba8:	4770      	bx	lr
    dbaa:	bf00      	nop
    dbac:	20000e98 	.word	0x20000e98

0000dbb0 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    dbb0:	b480      	push	{r7}
    dbb2:	b083      	sub	sp, #12
    dbb4:	af00      	add	r7, sp, #0
    dbb6:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    dbb8:	687b      	ldr	r3, [r7, #4]
    dbba:	2200      	movs	r2, #0
    dbbc:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    dbbe:	687b      	ldr	r3, [r7, #4]
    dbc0:	4618      	mov	r0, r3
    dbc2:	370c      	adds	r7, #12
    dbc4:	46bd      	mov	sp, r7
    dbc6:	bc80      	pop	{r7}
    dbc8:	4770      	bx	lr
	...

0000dbcc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    dbcc:	b580      	push	{r7, lr}
    dbce:	b086      	sub	sp, #24
    dbd0:	af00      	add	r7, sp, #0
    dbd2:	60f8      	str	r0, [r7, #12]
    dbd4:	60b9      	str	r1, [r7, #8]
    dbd6:	607a      	str	r2, [r7, #4]
    dbd8:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    dbda:	68f8      	ldr	r0, [r7, #12]
    dbdc:	4b0d      	ldr	r3, [pc, #52]	; (dc14 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    dbde:	4798      	blx	r3
	task->interval = interval;
    dbe0:	68fb      	ldr	r3, [r7, #12]
    dbe2:	699b      	ldr	r3, [r3, #24]
    dbe4:	687a      	ldr	r2, [r7, #4]
    dbe6:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    dbe8:	68fb      	ldr	r3, [r7, #12]
    dbea:	699b      	ldr	r3, [r3, #24]
    dbec:	68ba      	ldr	r2, [r7, #8]
    dbee:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    dbf0:	68fb      	ldr	r3, [r7, #12]
    dbf2:	699b      	ldr	r3, [r3, #24]
    dbf4:	78fa      	ldrb	r2, [r7, #3]
    dbf6:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    dbf8:	68fb      	ldr	r3, [r7, #12]
    dbfa:	68da      	ldr	r2, [r3, #12]
    dbfc:	68fb      	ldr	r3, [r7, #12]
    dbfe:	699b      	ldr	r3, [r3, #24]
    dc00:	4619      	mov	r1, r3
    dc02:	4610      	mov	r0, r2
    dc04:	4b04      	ldr	r3, [pc, #16]	; (dc18 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    dc06:	4798      	blx	r3
    dc08:	6178      	str	r0, [r7, #20]
	
	return status;
    dc0a:	697b      	ldr	r3, [r7, #20]
}
    dc0c:	4618      	mov	r0, r3
    dc0e:	3718      	adds	r7, #24
    dc10:	46bd      	mov	sp, r7
    dc12:	bd80      	pop	{r7, pc}
    dc14:	0000dd39 	.word	0x0000dd39
    dc18:	00002fe9 	.word	0x00002fe9

0000dc1c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    dc1c:	b580      	push	{r7, lr}
    dc1e:	b086      	sub	sp, #24
    dc20:	af00      	add	r7, sp, #0
    dc22:	60f8      	str	r0, [r7, #12]
    dc24:	60b9      	str	r1, [r7, #8]
    dc26:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    dc28:	687a      	ldr	r2, [r7, #4]
    dc2a:	68b9      	ldr	r1, [r7, #8]
    dc2c:	68f8      	ldr	r0, [r7, #12]
    dc2e:	4b0c      	ldr	r3, [pc, #48]	; (dc60 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    dc30:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    dc32:	68fb      	ldr	r3, [r7, #12]
    dc34:	68db      	ldr	r3, [r3, #12]
    dc36:	681b      	ldr	r3, [r3, #0]
    dc38:	699b      	ldr	r3, [r3, #24]
    dc3a:	68fa      	ldr	r2, [r7, #12]
    dc3c:	68d2      	ldr	r2, [r2, #12]
    dc3e:	3204      	adds	r2, #4
    dc40:	4610      	mov	r0, r2
    dc42:	4798      	blx	r3
    dc44:	4603      	mov	r3, r0
    dc46:	2b00      	cmp	r3, #0
    dc48:	d105      	bne.n	dc56 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    dc4a:	68fb      	ldr	r3, [r7, #12]
    dc4c:	68db      	ldr	r3, [r3, #12]
    dc4e:	4618      	mov	r0, r3
    dc50:	4b04      	ldr	r3, [pc, #16]	; (dc64 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    dc52:	4798      	blx	r3
    dc54:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    dc56:	697b      	ldr	r3, [r7, #20]
}
    dc58:	4618      	mov	r0, r3
    dc5a:	3718      	adds	r7, #24
    dc5c:	46bd      	mov	sp, r7
    dc5e:	bd80      	pop	{r7, pc}
    dc60:	0000dc69 	.word	0x0000dc69
    dc64:	00002f15 	.word	0x00002f15

0000dc68 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    dc68:	b590      	push	{r4, r7, lr}
    dc6a:	b087      	sub	sp, #28
    dc6c:	af00      	add	r7, sp, #0
    dc6e:	60f8      	str	r0, [r7, #12]
    dc70:	60b9      	str	r1, [r7, #8]
    dc72:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    dc74:	2301      	movs	r3, #1
    dc76:	687a      	ldr	r2, [r7, #4]
    dc78:	68b9      	ldr	r1, [r7, #8]
    dc7a:	68f8      	ldr	r0, [r7, #12]
    dc7c:	4c03      	ldr	r4, [pc, #12]	; (dc8c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    dc7e:	47a0      	blx	r4
    dc80:	6178      	str	r0, [r7, #20]
		return status;
    dc82:	697b      	ldr	r3, [r7, #20]
}
    dc84:	4618      	mov	r0, r3
    dc86:	371c      	adds	r7, #28
    dc88:	46bd      	mov	sp, r7
    dc8a:	bd90      	pop	{r4, r7, pc}
    dc8c:	0000dbcd 	.word	0x0000dbcd

0000dc90 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    dc90:	b580      	push	{r7, lr}
    dc92:	b082      	sub	sp, #8
    dc94:	af00      	add	r7, sp, #0
    dc96:	6078      	str	r0, [r7, #4]
    dc98:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    dc9a:	6839      	ldr	r1, [r7, #0]
    dc9c:	6878      	ldr	r0, [r7, #4]
    dc9e:	4b0f      	ldr	r3, [pc, #60]	; (dcdc <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    dca0:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    dca2:	687b      	ldr	r3, [r7, #4]
    dca4:	68db      	ldr	r3, [r3, #12]
    dca6:	f103 0218 	add.w	r2, r3, #24
    dcaa:	687b      	ldr	r3, [r7, #4]
    dcac:	699b      	ldr	r3, [r3, #24]
    dcae:	4619      	mov	r1, r3
    dcb0:	4610      	mov	r0, r2
    dcb2:	4b0b      	ldr	r3, [pc, #44]	; (dce0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    dcb4:	4798      	blx	r3
    dcb6:	4603      	mov	r3, r0
    dcb8:	2b00      	cmp	r3, #0
    dcba:	d007      	beq.n	dccc <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    dcbc:	687b      	ldr	r3, [r7, #4]
    dcbe:	68da      	ldr	r2, [r3, #12]
    dcc0:	687b      	ldr	r3, [r7, #4]
    dcc2:	699b      	ldr	r3, [r3, #24]
    dcc4:	4619      	mov	r1, r3
    dcc6:	4610      	mov	r0, r2
    dcc8:	4b06      	ldr	r3, [pc, #24]	; (dce4 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    dcca:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    dccc:	687b      	ldr	r3, [r7, #4]
    dcce:	699b      	ldr	r3, [r3, #24]
    dcd0:	2200      	movs	r2, #0
    dcd2:	60da      	str	r2, [r3, #12]
}
    dcd4:	bf00      	nop
    dcd6:	3708      	adds	r7, #8
    dcd8:	46bd      	mov	sp, r7
    dcda:	bd80      	pop	{r7, pc}
    dcdc:	0000dd99 	.word	0x0000dd99
    dce0:	00003cd5 	.word	0x00003cd5
    dce4:	000030ed 	.word	0x000030ed

0000dce8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    dce8:	b590      	push	{r4, r7, lr}
    dcea:	b087      	sub	sp, #28
    dcec:	af00      	add	r7, sp, #0
    dcee:	60f8      	str	r0, [r7, #12]
    dcf0:	60b9      	str	r1, [r7, #8]
    dcf2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    dcf4:	2300      	movs	r3, #0
    dcf6:	687a      	ldr	r2, [r7, #4]
    dcf8:	68b9      	ldr	r1, [r7, #8]
    dcfa:	68f8      	ldr	r0, [r7, #12]
    dcfc:	4c0c      	ldr	r4, [pc, #48]	; (dd30 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    dcfe:	47a0      	blx	r4
    dd00:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    dd02:	68fb      	ldr	r3, [r7, #12]
    dd04:	68db      	ldr	r3, [r3, #12]
    dd06:	681b      	ldr	r3, [r3, #0]
    dd08:	699b      	ldr	r3, [r3, #24]
    dd0a:	68fa      	ldr	r2, [r7, #12]
    dd0c:	68d2      	ldr	r2, [r2, #12]
    dd0e:	3204      	adds	r2, #4
    dd10:	4610      	mov	r0, r2
    dd12:	4798      	blx	r3
    dd14:	4603      	mov	r3, r0
    dd16:	2b00      	cmp	r3, #0
    dd18:	d105      	bne.n	dd26 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    dd1a:	68fb      	ldr	r3, [r7, #12]
    dd1c:	68db      	ldr	r3, [r3, #12]
    dd1e:	4618      	mov	r0, r3
    dd20:	4b04      	ldr	r3, [pc, #16]	; (dd34 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    dd22:	4798      	blx	r3
    dd24:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    dd26:	697b      	ldr	r3, [r7, #20]
}
    dd28:	4618      	mov	r0, r3
    dd2a:	371c      	adds	r7, #28
    dd2c:	46bd      	mov	sp, r7
    dd2e:	bd90      	pop	{r4, r7, pc}
    dd30:	0000dbcd 	.word	0x0000dbcd
    dd34:	00002f15 	.word	0x00002f15

0000dd38 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    dd38:	b480      	push	{r7}
    dd3a:	b085      	sub	sp, #20
    dd3c:	af00      	add	r7, sp, #0
    dd3e:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dd40:	2300      	movs	r3, #0
    dd42:	73fb      	strb	r3, [r7, #15]
    dd44:	7bfb      	ldrb	r3, [r7, #15]
    dd46:	2b0f      	cmp	r3, #15
    dd48:	dc1c      	bgt.n	dd84 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    dd4a:	7bfb      	ldrb	r3, [r7, #15]
    dd4c:	f003 030f 	and.w	r3, r3, #15
    dd50:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    dd52:	7bba      	ldrb	r2, [r7, #14]
    dd54:	490f      	ldr	r1, [pc, #60]	; (dd94 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    dd56:	4613      	mov	r3, r2
    dd58:	009b      	lsls	r3, r3, #2
    dd5a:	4413      	add	r3, r2
    dd5c:	009b      	lsls	r3, r3, #2
    dd5e:	440b      	add	r3, r1
    dd60:	330c      	adds	r3, #12
    dd62:	681b      	ldr	r3, [r3, #0]
    dd64:	2b00      	cmp	r3, #0
    dd66:	d109      	bne.n	dd7c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    dd68:	7bba      	ldrb	r2, [r7, #14]
    dd6a:	4613      	mov	r3, r2
    dd6c:	009b      	lsls	r3, r3, #2
    dd6e:	4413      	add	r3, r2
    dd70:	009b      	lsls	r3, r3, #2
    dd72:	4a08      	ldr	r2, [pc, #32]	; (dd94 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    dd74:	441a      	add	r2, r3
    dd76:	687b      	ldr	r3, [r7, #4]
    dd78:	619a      	str	r2, [r3, #24]
			return;
    dd7a:	e006      	b.n	dd8a <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dd7c:	7bfb      	ldrb	r3, [r7, #15]
    dd7e:	3301      	adds	r3, #1
    dd80:	73fb      	strb	r3, [r7, #15]
    dd82:	e7df      	b.n	dd44 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    dd84:	687b      	ldr	r3, [r7, #4]
    dd86:	4a03      	ldr	r2, [pc, #12]	; (dd94 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    dd88:	619a      	str	r2, [r3, #24]

}
    dd8a:	3714      	adds	r7, #20
    dd8c:	46bd      	mov	sp, r7
    dd8e:	bc80      	pop	{r7}
    dd90:	4770      	bx	lr
    dd92:	bf00      	nop
    dd94:	20000e9c 	.word	0x20000e9c

0000dd98 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    dd98:	b480      	push	{r7}
    dd9a:	b085      	sub	sp, #20
    dd9c:	af00      	add	r7, sp, #0
    dd9e:	6078      	str	r0, [r7, #4]
    dda0:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dda2:	2300      	movs	r3, #0
    dda4:	73fb      	strb	r3, [r7, #15]
    dda6:	7bfb      	ldrb	r3, [r7, #15]
    dda8:	2b0f      	cmp	r3, #15
    ddaa:	dc19      	bgt.n	dde0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    ddac:	7bfa      	ldrb	r2, [r7, #15]
    ddae:	490f      	ldr	r1, [pc, #60]	; (ddec <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    ddb0:	4613      	mov	r3, r2
    ddb2:	009b      	lsls	r3, r3, #2
    ddb4:	4413      	add	r3, r2
    ddb6:	009b      	lsls	r3, r3, #2
    ddb8:	440b      	add	r3, r1
    ddba:	330c      	adds	r3, #12
    ddbc:	681a      	ldr	r2, [r3, #0]
    ddbe:	683b      	ldr	r3, [r7, #0]
    ddc0:	429a      	cmp	r2, r3
    ddc2:	d109      	bne.n	ddd8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    ddc4:	7bfa      	ldrb	r2, [r7, #15]
    ddc6:	4613      	mov	r3, r2
    ddc8:	009b      	lsls	r3, r3, #2
    ddca:	4413      	add	r3, r2
    ddcc:	009b      	lsls	r3, r3, #2
    ddce:	4a07      	ldr	r2, [pc, #28]	; (ddec <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    ddd0:	441a      	add	r2, r3
    ddd2:	687b      	ldr	r3, [r7, #4]
    ddd4:	619a      	str	r2, [r3, #24]
			return;
    ddd6:	e004      	b.n	dde2 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    ddd8:	7bfb      	ldrb	r3, [r7, #15]
    ddda:	3301      	adds	r3, #1
    dddc:	73fb      	strb	r3, [r7, #15]
    ddde:	e7e2      	b.n	dda6 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    dde0:	bf00      	nop
}
    dde2:	3714      	adds	r7, #20
    dde4:	46bd      	mov	sp, r7
    dde6:	bc80      	pop	{r7}
    dde8:	4770      	bx	lr
    ddea:	bf00      	nop
    ddec:	20000e9c 	.word	0x20000e9c

0000ddf0 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    ddf0:	b580      	push	{r7, lr}
    ddf2:	b082      	sub	sp, #8
    ddf4:	af00      	add	r7, sp, #0
    ddf6:	6078      	str	r0, [r7, #4]
    ddf8:	6039      	str	r1, [r7, #0]
    ddfa:	687b      	ldr	r3, [r7, #4]
    ddfc:	2b01      	cmp	r3, #1
    ddfe:	d131      	bne.n	de64 <_Z41__static_initialization_and_destruction_0ii+0x74>
    de00:	683b      	ldr	r3, [r7, #0]
    de02:	f64f 72ff 	movw	r2, #65535	; 0xffff
    de06:	4293      	cmp	r3, r2
    de08:	d12c      	bne.n	de64 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    de0a:	4918      	ldr	r1, [pc, #96]	; (de6c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    de0c:	4818      	ldr	r0, [pc, #96]	; (de70 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    de0e:	4b19      	ldr	r3, [pc, #100]	; (de74 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    de10:	4798      	blx	r3
    de12:	4a19      	ldr	r2, [pc, #100]	; (de78 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    de14:	4919      	ldr	r1, [pc, #100]	; (de7c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    de16:	4816      	ldr	r0, [pc, #88]	; (de70 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    de18:	4b19      	ldr	r3, [pc, #100]	; (de80 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    de1a:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    de1c:	4919      	ldr	r1, [pc, #100]	; (de84 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    de1e:	481a      	ldr	r0, [pc, #104]	; (de88 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    de20:	4b14      	ldr	r3, [pc, #80]	; (de74 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    de22:	4798      	blx	r3
    de24:	4a14      	ldr	r2, [pc, #80]	; (de78 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    de26:	4915      	ldr	r1, [pc, #84]	; (de7c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    de28:	4817      	ldr	r0, [pc, #92]	; (de88 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    de2a:	4b15      	ldr	r3, [pc, #84]	; (de80 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    de2c:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    de2e:	4917      	ldr	r1, [pc, #92]	; (de8c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    de30:	4817      	ldr	r0, [pc, #92]	; (de90 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    de32:	4b10      	ldr	r3, [pc, #64]	; (de74 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    de34:	4798      	blx	r3
    de36:	4a10      	ldr	r2, [pc, #64]	; (de78 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    de38:	4910      	ldr	r1, [pc, #64]	; (de7c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    de3a:	4815      	ldr	r0, [pc, #84]	; (de90 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    de3c:	4b10      	ldr	r3, [pc, #64]	; (de80 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    de3e:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    de40:	4914      	ldr	r1, [pc, #80]	; (de94 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    de42:	4815      	ldr	r0, [pc, #84]	; (de98 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    de44:	4b0b      	ldr	r3, [pc, #44]	; (de74 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    de46:	4798      	blx	r3
    de48:	4a0b      	ldr	r2, [pc, #44]	; (de78 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    de4a:	490c      	ldr	r1, [pc, #48]	; (de7c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    de4c:	4812      	ldr	r0, [pc, #72]	; (de98 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    de4e:	4b0c      	ldr	r3, [pc, #48]	; (de80 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    de50:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    de52:	4912      	ldr	r1, [pc, #72]	; (de9c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    de54:	4812      	ldr	r0, [pc, #72]	; (dea0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    de56:	4b07      	ldr	r3, [pc, #28]	; (de74 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    de58:	4798      	blx	r3
    de5a:	4a07      	ldr	r2, [pc, #28]	; (de78 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    de5c:	4907      	ldr	r1, [pc, #28]	; (de7c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    de5e:	4810      	ldr	r0, [pc, #64]	; (dea0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    de60:	4b07      	ldr	r3, [pc, #28]	; (de80 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    de62:	4798      	blx	r3
    de64:	bf00      	nop
    de66:	3708      	adds	r7, #8
    de68:	46bd      	mov	sp, r7
    de6a:	bd80      	pop	{r7, pc}
    de6c:	20007ee8 	.word	0x20007ee8
    de70:	20000fe0 	.word	0x20000fe0
    de74:	0000db81 	.word	0x0000db81
    de78:	20000000 	.word	0x20000000
    de7c:	0000dbb1 	.word	0x0000dbb1
    de80:	000113d5 	.word	0x000113d5
    de84:	20007f5c 	.word	0x20007f5c
    de88:	20000ffc 	.word	0x20000ffc
    de8c:	20008060 	.word	0x20008060
    de90:	20001018 	.word	0x20001018
    de94:	20007f7c 	.word	0x20007f7c
    de98:	20001034 	.word	0x20001034
    de9c:	20007fe0 	.word	0x20007fe0
    dea0:	20001050 	.word	0x20001050

0000dea4 <_GLOBAL__sub_I_ptrTimerClass>:
    dea4:	b580      	push	{r7, lr}
    dea6:	af00      	add	r7, sp, #0
    dea8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    deac:	2001      	movs	r0, #1
    deae:	4b01      	ldr	r3, [pc, #4]	; (deb4 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    deb0:	4798      	blx	r3
    deb2:	bd80      	pop	{r7, pc}
    deb4:	0000ddf1 	.word	0x0000ddf1

0000deb8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    deb8:	b480      	push	{r7}
    deba:	b083      	sub	sp, #12
    debc:	af00      	add	r7, sp, #0
    debe:	6078      	str	r0, [r7, #4]
    dec0:	4a05      	ldr	r2, [pc, #20]	; (ded8 <_ZN5PrintC1Ev+0x20>)
    dec2:	687b      	ldr	r3, [r7, #4]
    dec4:	601a      	str	r2, [r3, #0]
    dec6:	687b      	ldr	r3, [r7, #4]
    dec8:	2200      	movs	r2, #0
    deca:	605a      	str	r2, [r3, #4]
    decc:	687b      	ldr	r3, [r7, #4]
    dece:	4618      	mov	r0, r3
    ded0:	370c      	adds	r7, #12
    ded2:	46bd      	mov	sp, r7
    ded4:	bc80      	pop	{r7}
    ded6:	4770      	bx	lr
    ded8:	00011f4c 	.word	0x00011f4c

0000dedc <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    dedc:	b480      	push	{r7}
    dede:	b083      	sub	sp, #12
    dee0:	af00      	add	r7, sp, #0
    dee2:	6078      	str	r0, [r7, #4]
    dee4:	2300      	movs	r3, #0
    dee6:	4618      	mov	r0, r3
    dee8:	370c      	adds	r7, #12
    deea:	46bd      	mov	sp, r7
    deec:	bc80      	pop	{r7}
    deee:	4770      	bx	lr

0000def0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    def0:	b480      	push	{r7}
    def2:	b083      	sub	sp, #12
    def4:	af00      	add	r7, sp, #0
    def6:	6078      	str	r0, [r7, #4]
    def8:	bf00      	nop
    defa:	370c      	adds	r7, #12
    defc:	46bd      	mov	sp, r7
    defe:	bc80      	pop	{r7}
    df00:	4770      	bx	lr
	...

0000df04 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    df04:	b580      	push	{r7, lr}
    df06:	b082      	sub	sp, #8
    df08:	af00      	add	r7, sp, #0
    df0a:	6078      	str	r0, [r7, #4]
    df0c:	687b      	ldr	r3, [r7, #4]
    df0e:	4618      	mov	r0, r3
    df10:	4b06      	ldr	r3, [pc, #24]	; (df2c <_ZN6StreamC1Ev+0x28>)
    df12:	4798      	blx	r3
    df14:	4a06      	ldr	r2, [pc, #24]	; (df30 <_ZN6StreamC1Ev+0x2c>)
    df16:	687b      	ldr	r3, [r7, #4]
    df18:	601a      	str	r2, [r3, #0]
    df1a:	687b      	ldr	r3, [r7, #4]
    df1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    df20:	609a      	str	r2, [r3, #8]
    df22:	687b      	ldr	r3, [r7, #4]
    df24:	4618      	mov	r0, r3
    df26:	3708      	adds	r7, #8
    df28:	46bd      	mov	sp, r7
    df2a:	bd80      	pop	{r7, pc}
    df2c:	0000deb9 	.word	0x0000deb9
    df30:	00011f10 	.word	0x00011f10

0000df34 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    df34:	b480      	push	{r7}
    df36:	b083      	sub	sp, #12
    df38:	af00      	add	r7, sp, #0
    df3a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    df3c:	4b06      	ldr	r3, [pc, #24]	; (df58 <_ZL10USBTimeoutPK10timer_task+0x24>)
    df3e:	681b      	ldr	r3, [r3, #0]
    df40:	2201      	movs	r2, #1
    df42:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    df44:	4b04      	ldr	r3, [pc, #16]	; (df58 <_ZL10USBTimeoutPK10timer_task+0x24>)
    df46:	681b      	ldr	r3, [r3, #0]
    df48:	2200      	movs	r2, #0
    df4a:	741a      	strb	r2, [r3, #16]
	
}
    df4c:	bf00      	nop
    df4e:	370c      	adds	r7, #12
    df50:	46bd      	mov	sp, r7
    df52:	bc80      	pop	{r7}
    df54:	4770      	bx	lr
    df56:	bf00      	nop
    df58:	2000106c 	.word	0x2000106c

0000df5c <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    df5c:	b480      	push	{r7}
    df5e:	b083      	sub	sp, #12
    df60:	af00      	add	r7, sp, #0
    df62:	4603      	mov	r3, r0
    df64:	603a      	str	r2, [r7, #0]
    df66:	71fb      	strb	r3, [r7, #7]
    df68:	460b      	mov	r3, r1
    df6a:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    df6c:	4b08      	ldr	r3, [pc, #32]	; (df90 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    df6e:	681b      	ldr	r3, [r3, #0]
    df70:	2201      	movs	r2, #1
    df72:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    df74:	4b06      	ldr	r3, [pc, #24]	; (df90 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    df76:	681b      	ldr	r3, [r3, #0]
    df78:	2201      	movs	r2, #1
    df7a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    df7c:	4b04      	ldr	r3, [pc, #16]	; (df90 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    df7e:	681b      	ldr	r3, [r3, #0]
    df80:	2201      	movs	r2, #1
    df82:	741a      	strb	r2, [r3, #16]


	return false;
    df84:	2300      	movs	r3, #0
}
    df86:	4618      	mov	r0, r3
    df88:	370c      	adds	r7, #12
    df8a:	46bd      	mov	sp, r7
    df8c:	bc80      	pop	{r7}
    df8e:	4770      	bx	lr
    df90:	2000106c 	.word	0x2000106c

0000df94 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    df94:	b480      	push	{r7}
    df96:	b083      	sub	sp, #12
    df98:	af00      	add	r7, sp, #0
    df9a:	4603      	mov	r3, r0
    df9c:	603a      	str	r2, [r7, #0]
    df9e:	71fb      	strb	r3, [r7, #7]
    dfa0:	460b      	mov	r3, r1
    dfa2:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    dfa4:	4b08      	ldr	r3, [pc, #32]	; (dfc8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dfa6:	681b      	ldr	r3, [r3, #0]
    dfa8:	2201      	movs	r2, #1
    dfaa:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    dfac:	4b06      	ldr	r3, [pc, #24]	; (dfc8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dfae:	681b      	ldr	r3, [r3, #0]
    dfb0:	2201      	movs	r2, #1
    dfb2:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    dfb4:	4b04      	ldr	r3, [pc, #16]	; (dfc8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dfb6:	681b      	ldr	r3, [r3, #0]
    dfb8:	2201      	movs	r2, #1
    dfba:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    dfbc:	2300      	movs	r3, #0
}
    dfbe:	4618      	mov	r0, r3
    dfc0:	370c      	adds	r7, #12
    dfc2:	46bd      	mov	sp, r7
    dfc4:	bc80      	pop	{r7}
    dfc6:	4770      	bx	lr
    dfc8:	2000106c 	.word	0x2000106c

0000dfcc <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    dfcc:	b580      	push	{r7, lr}
    dfce:	b082      	sub	sp, #8
    dfd0:	af00      	add	r7, sp, #0
    dfd2:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    dfd4:	793b      	ldrb	r3, [r7, #4]
    dfd6:	f003 0301 	and.w	r3, r3, #1
    dfda:	b2db      	uxtb	r3, r3
    dfdc:	2b00      	cmp	r3, #0
    dfde:	d013      	beq.n	e008 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    dfe0:	490c      	ldr	r1, [pc, #48]	; (e014 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    dfe2:	2000      	movs	r0, #0
    dfe4:	4b0c      	ldr	r3, [pc, #48]	; (e018 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    dfe6:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    dfe8:	490c      	ldr	r1, [pc, #48]	; (e01c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    dfea:	2001      	movs	r0, #1
    dfec:	4b0a      	ldr	r3, [pc, #40]	; (e018 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    dfee:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    dff0:	4b0b      	ldr	r3, [pc, #44]	; (e020 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    dff2:	681b      	ldr	r3, [r3, #0]
    dff4:	2201      	movs	r2, #1
    dff6:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    dff8:	4b09      	ldr	r3, [pc, #36]	; (e020 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    dffa:	681b      	ldr	r3, [r3, #0]
    dffc:	2201      	movs	r2, #1
    dffe:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    e000:	4b07      	ldr	r3, [pc, #28]	; (e020 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e002:	681b      	ldr	r3, [r3, #0]
    e004:	2201      	movs	r2, #1
    e006:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    e008:	2300      	movs	r3, #0
}
    e00a:	4618      	mov	r0, r3
    e00c:	3708      	adds	r7, #8
    e00e:	46bd      	mov	sp, r7
    e010:	bd80      	pop	{r7, pc}
    e012:	bf00      	nop
    e014:	0000df5d 	.word	0x0000df5d
    e018:	0000cb49 	.word	0x0000cb49
    e01c:	0000df95 	.word	0x0000df95
    e020:	2000106c 	.word	0x2000106c

0000e024 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    e024:	b580      	push	{r7, lr}
    e026:	b082      	sub	sp, #8
    e028:	af00      	add	r7, sp, #0
    e02a:	6078      	str	r0, [r7, #4]
    e02c:	687b      	ldr	r3, [r7, #4]
    e02e:	4618      	mov	r0, r3
    e030:	4b0a      	ldr	r3, [pc, #40]	; (e05c <_ZN9CDC_ClassC1Ev+0x38>)
    e032:	4798      	blx	r3
    e034:	687b      	ldr	r3, [r7, #4]
    e036:	3310      	adds	r3, #16
    e038:	4618      	mov	r0, r3
    e03a:	4b09      	ldr	r3, [pc, #36]	; (e060 <_ZN9CDC_ClassC1Ev+0x3c>)
    e03c:	4798      	blx	r3
    e03e:	4a09      	ldr	r2, [pc, #36]	; (e064 <_ZN9CDC_ClassC1Ev+0x40>)
    e040:	687b      	ldr	r3, [r7, #4]
    e042:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    e044:	687b      	ldr	r3, [r7, #4]
    e046:	f04f 32ff 	mov.w	r2, #4294967295
    e04a:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    e04c:	4a06      	ldr	r2, [pc, #24]	; (e068 <_ZN9CDC_ClassC1Ev+0x44>)
    e04e:	687b      	ldr	r3, [r7, #4]
    e050:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    e052:	687b      	ldr	r3, [r7, #4]
    e054:	4618      	mov	r0, r3
    e056:	3708      	adds	r7, #8
    e058:	46bd      	mov	sp, r7
    e05a:	bd80      	pop	{r7, pc}
    e05c:	0000df05 	.word	0x0000df05
    e060:	0000e6c5 	.word	0x0000e6c5
    e064:	00011ee0 	.word	0x00011ee0
    e068:	2000106c 	.word	0x2000106c

0000e06c <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    e06c:	b580      	push	{r7, lr}
    e06e:	b082      	sub	sp, #8
    e070:	af00      	add	r7, sp, #0
    e072:	6078      	str	r0, [r7, #4]
    e074:	4a06      	ldr	r2, [pc, #24]	; (e090 <_ZN9CDC_ClassD1Ev+0x24>)
    e076:	687b      	ldr	r3, [r7, #4]
    e078:	601a      	str	r2, [r3, #0]
    e07a:	687b      	ldr	r3, [r7, #4]
    e07c:	3310      	adds	r3, #16
    e07e:	4618      	mov	r0, r3
    e080:	4b04      	ldr	r3, [pc, #16]	; (e094 <_ZN9CDC_ClassD1Ev+0x28>)
    e082:	4798      	blx	r3
{
} //~CDC_Class
    e084:	687b      	ldr	r3, [r7, #4]
    e086:	4618      	mov	r0, r3
    e088:	3708      	adds	r7, #8
    e08a:	46bd      	mov	sp, r7
    e08c:	bd80      	pop	{r7, pc}
    e08e:	bf00      	nop
    e090:	00011ee0 	.word	0x00011ee0
    e094:	0000e6e5 	.word	0x0000e6e5

0000e098 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    e098:	b580      	push	{r7, lr}
    e09a:	b082      	sub	sp, #8
    e09c:	af00      	add	r7, sp, #0
    e09e:	6078      	str	r0, [r7, #4]
	
	OnInit();
    e0a0:	687b      	ldr	r3, [r7, #4]
    e0a2:	3310      	adds	r3, #16
    e0a4:	4618      	mov	r0, r3
    e0a6:	4b09      	ldr	r3, [pc, #36]	; (e0cc <_ZN9CDC_Class4InitEv+0x34>)
    e0a8:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    e0aa:	4909      	ldr	r1, [pc, #36]	; (e0d0 <_ZN9CDC_Class4InitEv+0x38>)
    e0ac:	2003      	movs	r0, #3
    e0ae:	4b09      	ldr	r3, [pc, #36]	; (e0d4 <_ZN9CDC_Class4InitEv+0x3c>)
    e0b0:	4798      	blx	r3
	delay_ms(100);
    e0b2:	2064      	movs	r0, #100	; 0x64
    e0b4:	4b08      	ldr	r3, [pc, #32]	; (e0d8 <_ZN9CDC_Class4InitEv+0x40>)
    e0b6:	4798      	blx	r3
		
	if (connected)
    e0b8:	687b      	ldr	r3, [r7, #4]
    e0ba:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    e0bc:	2064      	movs	r0, #100	; 0x64
    e0be:	4b06      	ldr	r3, [pc, #24]	; (e0d8 <_ZN9CDC_Class4InitEv+0x40>)
    e0c0:	4798      	blx	r3

	

}
    e0c2:	bf00      	nop
    e0c4:	3708      	adds	r7, #8
    e0c6:	46bd      	mov	sp, r7
    e0c8:	bd80      	pop	{r7, pc}
    e0ca:	bf00      	nop
    e0cc:	0000e6f9 	.word	0x0000e6f9
    e0d0:	0000dfcd 	.word	0x0000dfcd
    e0d4:	0000cb49 	.word	0x0000cb49
    e0d8:	00002561 	.word	0x00002561

0000e0dc <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    e0dc:	b580      	push	{r7, lr}
    e0de:	b082      	sub	sp, #8
    e0e0:	af00      	add	r7, sp, #0
    e0e2:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    e0e4:	4b03      	ldr	r3, [pc, #12]	; (e0f4 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    e0e6:	4798      	blx	r3
    e0e8:	4603      	mov	r3, r0
	
}
    e0ea:	4618      	mov	r0, r3
    e0ec:	3708      	adds	r7, #8
    e0ee:	46bd      	mov	sp, r7
    e0f0:	bd80      	pop	{r7, pc}
    e0f2:	bf00      	nop
    e0f4:	0000cbc1 	.word	0x0000cbc1

0000e0f8 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    e0f8:	b580      	push	{r7, lr}
    e0fa:	b084      	sub	sp, #16
    e0fc:	af00      	add	r7, sp, #0
    e0fe:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    e100:	687b      	ldr	r3, [r7, #4]
    e102:	699b      	ldr	r3, [r3, #24]
    e104:	f1b3 3fff 	cmp.w	r3, #4294967295
    e108:	bf14      	ite	ne
    e10a:	2301      	movne	r3, #1
    e10c:	2300      	moveq	r3, #0
    e10e:	b2db      	uxtb	r3, r3
    e110:	2b00      	cmp	r3, #0
    e112:	d002      	beq.n	e11a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    e114:	687b      	ldr	r3, [r7, #4]
    e116:	699b      	ldr	r3, [r3, #24]
    e118:	e011      	b.n	e13e <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    e11a:	687b      	ldr	r3, [r7, #4]
    e11c:	681b      	ldr	r3, [r3, #0]
    e11e:	331c      	adds	r3, #28
    e120:	681b      	ldr	r3, [r3, #0]
    e122:	f107 010f 	add.w	r1, r7, #15
    e126:	2201      	movs	r2, #1
    e128:	6878      	ldr	r0, [r7, #4]
    e12a:	4798      	blx	r3
    e12c:	4602      	mov	r2, r0
    e12e:	687b      	ldr	r3, [r7, #4]
    e130:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    e132:	7bfb      	ldrb	r3, [r7, #15]
    e134:	461a      	mov	r2, r3
    e136:	687b      	ldr	r3, [r7, #4]
    e138:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    e13a:	687b      	ldr	r3, [r7, #4]
    e13c:	699b      	ldr	r3, [r3, #24]
}
    e13e:	4618      	mov	r0, r3
    e140:	3710      	adds	r7, #16
    e142:	46bd      	mov	sp, r7
    e144:	bd80      	pop	{r7, pc}
	...

0000e148 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    e148:	b580      	push	{r7, lr}
    e14a:	b086      	sub	sp, #24
    e14c:	af00      	add	r7, sp, #0
    e14e:	60f8      	str	r0, [r7, #12]
    e150:	60b9      	str	r1, [r7, #8]
    e152:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    e154:	68fb      	ldr	r3, [r7, #12]
    e156:	7c1b      	ldrb	r3, [r3, #16]
    e158:	b2db      	uxtb	r3, r3
    e15a:	2b00      	cmp	r3, #0
    e15c:	d02e      	beq.n	e1bc <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e15e:	687a      	ldr	r2, [r7, #4]
    e160:	4613      	mov	r3, r2
    e162:	009b      	lsls	r3, r3, #2
    e164:	4413      	add	r3, r2
    e166:	005b      	lsls	r3, r3, #1
    e168:	461a      	mov	r2, r3
    e16a:	4918      	ldr	r1, [pc, #96]	; (e1cc <_ZN9CDC_Class8readDataEPvl+0x84>)
    e16c:	4818      	ldr	r0, [pc, #96]	; (e1d0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e16e:	4b19      	ldr	r3, [pc, #100]	; (e1d4 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e170:	4798      	blx	r3
		rxReady=false;
    e172:	68fb      	ldr	r3, [r7, #12]
    e174:	2200      	movs	r2, #0
    e176:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e178:	687b      	ldr	r3, [r7, #4]
    e17a:	4619      	mov	r1, r3
    e17c:	68b8      	ldr	r0, [r7, #8]
    e17e:	4b16      	ldr	r3, [pc, #88]	; (e1d8 <_ZN9CDC_Class8readDataEPvl+0x90>)
    e180:	4798      	blx	r3
    e182:	4603      	mov	r3, r0
    e184:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e186:	68fb      	ldr	r3, [r7, #12]
    e188:	7d5b      	ldrb	r3, [r3, #21]
    e18a:	b2db      	uxtb	r3, r3
    e18c:	f083 0301 	eor.w	r3, r3, #1
    e190:	b2db      	uxtb	r3, r3
    e192:	2b00      	cmp	r3, #0
    e194:	d006      	beq.n	e1a4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e196:	68fb      	ldr	r3, [r7, #12]
    e198:	7c1b      	ldrb	r3, [r3, #16]
    e19a:	b2db      	uxtb	r3, r3
    e19c:	2b00      	cmp	r3, #0
    e19e:	d001      	beq.n	e1a4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e1a0:	2301      	movs	r3, #1
    e1a2:	e000      	b.n	e1a6 <_ZN9CDC_Class8readDataEPvl+0x5e>
    e1a4:	2300      	movs	r3, #0
    e1a6:	2b00      	cmp	r3, #0
    e1a8:	d000      	beq.n	e1ac <_ZN9CDC_Class8readDataEPvl+0x64>
    e1aa:	e7ec      	b.n	e186 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e1ac:	4808      	ldr	r0, [pc, #32]	; (e1d0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e1ae:	4b0b      	ldr	r3, [pc, #44]	; (e1dc <_ZN9CDC_Class8readDataEPvl+0x94>)
    e1b0:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e1b2:	4906      	ldr	r1, [pc, #24]	; (e1cc <_ZN9CDC_Class8readDataEPvl+0x84>)
    e1b4:	4806      	ldr	r0, [pc, #24]	; (e1d0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e1b6:	4b0a      	ldr	r3, [pc, #40]	; (e1e0 <_ZN9CDC_Class8readDataEPvl+0x98>)
    e1b8:	4798      	blx	r3
    e1ba:	e001      	b.n	e1c0 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e1bc:	2300      	movs	r3, #0
    e1be:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e1c0:	7dfb      	ldrb	r3, [r7, #23]
}
    e1c2:	4618      	mov	r0, r3
    e1c4:	3718      	adds	r7, #24
    e1c6:	46bd      	mov	sp, r7
    e1c8:	bd80      	pop	{r7, pc}
    e1ca:	bf00      	nop
    e1cc:	0000df35 	.word	0x0000df35
    e1d0:	20001128 	.word	0x20001128
    e1d4:	0000e965 	.word	0x0000e965
    e1d8:	0000ca9d 	.word	0x0000ca9d
    e1dc:	0000e885 	.word	0x0000e885
    e1e0:	0000e9c9 	.word	0x0000e9c9

0000e1e4 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    e1e4:	b580      	push	{r7, lr}
    e1e6:	b086      	sub	sp, #24
    e1e8:	af00      	add	r7, sp, #0
    e1ea:	60f8      	str	r0, [r7, #12]
    e1ec:	60b9      	str	r1, [r7, #8]
    e1ee:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    e1f0:	68fb      	ldr	r3, [r7, #12]
    e1f2:	2200      	movs	r2, #0
    e1f4:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    e1f6:	687b      	ldr	r3, [r7, #4]
    e1f8:	4619      	mov	r1, r3
    e1fa:	68b8      	ldr	r0, [r7, #8]
    e1fc:	4b04      	ldr	r3, [pc, #16]	; (e210 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    e1fe:	4798      	blx	r3
    e200:	4603      	mov	r3, r0
    e202:	617b      	str	r3, [r7, #20]
	return r;
    e204:	697b      	ldr	r3, [r7, #20]
}
    e206:	4618      	mov	r0, r3
    e208:	3718      	adds	r7, #24
    e20a:	46bd      	mov	sp, r7
    e20c:	bd80      	pop	{r7, pc}
    e20e:	bf00      	nop
    e210:	0000ca9d 	.word	0x0000ca9d

0000e214 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    e214:	b580      	push	{r7, lr}
    e216:	b084      	sub	sp, #16
    e218:	af00      	add	r7, sp, #0
    e21a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e21c:	687b      	ldr	r3, [r7, #4]
    e21e:	2200      	movs	r2, #0
    e220:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e222:	f107 030f 	add.w	r3, r7, #15
    e226:	2101      	movs	r1, #1
    e228:	4618      	mov	r0, r3
    e22a:	4b08      	ldr	r3, [pc, #32]	; (e24c <_ZN9CDC_Class4readEv+0x38>)
    e22c:	4798      	blx	r3
	while(!rxReady);
    e22e:	687b      	ldr	r3, [r7, #4]
    e230:	7d5b      	ldrb	r3, [r3, #21]
    e232:	b2db      	uxtb	r3, r3
    e234:	f083 0301 	eor.w	r3, r3, #1
    e238:	b2db      	uxtb	r3, r3
    e23a:	2b00      	cmp	r3, #0
    e23c:	d000      	beq.n	e240 <_ZN9CDC_Class4readEv+0x2c>
    e23e:	e7f6      	b.n	e22e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e240:	7bfb      	ldrb	r3, [r7, #15]
}
    e242:	4618      	mov	r0, r3
    e244:	3710      	adds	r7, #16
    e246:	46bd      	mov	sp, r7
    e248:	bd80      	pop	{r7, pc}
    e24a:	bf00      	nop
    e24c:	0000ca9d 	.word	0x0000ca9d

0000e250 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e250:	b580      	push	{r7, lr}
    e252:	b082      	sub	sp, #8
    e254:	af00      	add	r7, sp, #0
    e256:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e258:	687b      	ldr	r3, [r7, #4]
    e25a:	331c      	adds	r3, #28
    e25c:	2140      	movs	r1, #64	; 0x40
    e25e:	4618      	mov	r0, r3
    e260:	4b02      	ldr	r3, [pc, #8]	; (e26c <_ZN9CDC_Class5flushEv+0x1c>)
    e262:	4798      	blx	r3
}
    e264:	bf00      	nop
    e266:	3708      	adds	r7, #8
    e268:	46bd      	mov	sp, r7
    e26a:	bd80      	pop	{r7, pc}
    e26c:	0000cae1 	.word	0x0000cae1

0000e270 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e270:	b580      	push	{r7, lr}
    e272:	b082      	sub	sp, #8
    e274:	af00      	add	r7, sp, #0
    e276:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e278:	4b02      	ldr	r3, [pc, #8]	; (e284 <_ZN9CDC_Class5clearEv+0x14>)
    e27a:	4798      	blx	r3
}
    e27c:	bf00      	nop
    e27e:	3708      	adds	r7, #8
    e280:	46bd      	mov	sp, r7
    e282:	bd80      	pop	{r7, pc}
    e284:	0000cb25 	.word	0x0000cb25

0000e288 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e288:	b580      	push	{r7, lr}
    e28a:	b082      	sub	sp, #8
    e28c:	af00      	add	r7, sp, #0
    e28e:	6078      	str	r0, [r7, #4]
    e290:	460b      	mov	r3, r1
    e292:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e294:	687b      	ldr	r3, [r7, #4]
    e296:	7c1b      	ldrb	r3, [r3, #16]
    e298:	b2db      	uxtb	r3, r3
    e29a:	2b00      	cmp	r3, #0
    e29c:	d012      	beq.n	e2c4 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e29e:	687b      	ldr	r3, [r7, #4]
    e2a0:	7d1b      	ldrb	r3, [r3, #20]
    e2a2:	b2db      	uxtb	r3, r3
    e2a4:	f083 0301 	eor.w	r3, r3, #1
    e2a8:	b2db      	uxtb	r3, r3
    e2aa:	2b00      	cmp	r3, #0
    e2ac:	d000      	beq.n	e2b0 <_ZN9CDC_Class5writeEh+0x28>
    e2ae:	e7f6      	b.n	e29e <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e2b0:	687b      	ldr	r3, [r7, #4]
    e2b2:	681b      	ldr	r3, [r3, #0]
    e2b4:	3324      	adds	r3, #36	; 0x24
    e2b6:	681b      	ldr	r3, [r3, #0]
    e2b8:	1cf9      	adds	r1, r7, #3
    e2ba:	2201      	movs	r2, #1
    e2bc:	6878      	ldr	r0, [r7, #4]
    e2be:	4798      	blx	r3
    e2c0:	4603      	mov	r3, r0
    e2c2:	e000      	b.n	e2c6 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e2c4:	2300      	movs	r3, #0
	}
		
}
    e2c6:	4618      	mov	r0, r3
    e2c8:	3708      	adds	r7, #8
    e2ca:	46bd      	mov	sp, r7
    e2cc:	bd80      	pop	{r7, pc}
	...

0000e2d0 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e2d0:	b580      	push	{r7, lr}
    e2d2:	b086      	sub	sp, #24
    e2d4:	af00      	add	r7, sp, #0
    e2d6:	60f8      	str	r0, [r7, #12]
    e2d8:	60b9      	str	r1, [r7, #8]
    e2da:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e2dc:	68fb      	ldr	r3, [r7, #12]
    e2de:	7c1b      	ldrb	r3, [r3, #16]
    e2e0:	b2db      	uxtb	r3, r3
    e2e2:	2b00      	cmp	r3, #0
    e2e4:	d02f      	beq.n	e346 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e2e6:	687a      	ldr	r2, [r7, #4]
    e2e8:	4613      	mov	r3, r2
    e2ea:	009b      	lsls	r3, r3, #2
    e2ec:	4413      	add	r3, r2
    e2ee:	005b      	lsls	r3, r3, #1
    e2f0:	461a      	mov	r2, r3
    e2f2:	4917      	ldr	r1, [pc, #92]	; (e350 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e2f4:	4817      	ldr	r0, [pc, #92]	; (e354 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e2f6:	4b18      	ldr	r3, [pc, #96]	; (e358 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e2f8:	4798      	blx	r3
		txReady=false;
    e2fa:	68fb      	ldr	r3, [r7, #12]
    e2fc:	2200      	movs	r2, #0
    e2fe:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e300:	687b      	ldr	r3, [r7, #4]
    e302:	4619      	mov	r1, r3
    e304:	68b8      	ldr	r0, [r7, #8]
    e306:	4b15      	ldr	r3, [pc, #84]	; (e35c <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e308:	4798      	blx	r3
    e30a:	4603      	mov	r3, r0
    e30c:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e30e:	68fb      	ldr	r3, [r7, #12]
    e310:	7d1b      	ldrb	r3, [r3, #20]
    e312:	b2db      	uxtb	r3, r3
    e314:	f083 0301 	eor.w	r3, r3, #1
    e318:	b2db      	uxtb	r3, r3
    e31a:	2b00      	cmp	r3, #0
    e31c:	d006      	beq.n	e32c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e31e:	68fb      	ldr	r3, [r7, #12]
    e320:	7c1b      	ldrb	r3, [r3, #16]
    e322:	b2db      	uxtb	r3, r3
    e324:	2b00      	cmp	r3, #0
    e326:	d001      	beq.n	e32c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e328:	2301      	movs	r3, #1
    e32a:	e000      	b.n	e32e <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e32c:	2300      	movs	r3, #0
    e32e:	2b00      	cmp	r3, #0
    e330:	d000      	beq.n	e334 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e332:	e7ec      	b.n	e30e <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e334:	4807      	ldr	r0, [pc, #28]	; (e354 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e336:	4b0a      	ldr	r3, [pc, #40]	; (e360 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e338:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e33a:	4905      	ldr	r1, [pc, #20]	; (e350 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e33c:	4805      	ldr	r0, [pc, #20]	; (e354 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e33e:	4b09      	ldr	r3, [pc, #36]	; (e364 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e340:	4798      	blx	r3
		return r;
    e342:	697b      	ldr	r3, [r7, #20]
    e344:	e000      	b.n	e348 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e346:	2300      	movs	r3, #0
	}
	

}
    e348:	4618      	mov	r0, r3
    e34a:	3718      	adds	r7, #24
    e34c:	46bd      	mov	sp, r7
    e34e:	bd80      	pop	{r7, pc}
    e350:	0000df35 	.word	0x0000df35
    e354:	20001128 	.word	0x20001128
    e358:	0000e965 	.word	0x0000e965
    e35c:	0000cae1 	.word	0x0000cae1
    e360:	0000e885 	.word	0x0000e885
    e364:	0000e9c9 	.word	0x0000e9c9

0000e368 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e368:	b580      	push	{r7, lr}
    e36a:	b086      	sub	sp, #24
    e36c:	af00      	add	r7, sp, #0
    e36e:	60f8      	str	r0, [r7, #12]
    e370:	60b9      	str	r1, [r7, #8]
    e372:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e374:	68fb      	ldr	r3, [r7, #12]
    e376:	2200      	movs	r2, #0
    e378:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e37a:	68fb      	ldr	r3, [r7, #12]
    e37c:	7c1b      	ldrb	r3, [r3, #16]
    e37e:	b2db      	uxtb	r3, r3
    e380:	2b00      	cmp	r3, #0
    e382:	d02a      	beq.n	e3da <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e384:	687a      	ldr	r2, [r7, #4]
    e386:	4613      	mov	r3, r2
    e388:	009b      	lsls	r3, r3, #2
    e38a:	4413      	add	r3, r2
    e38c:	005b      	lsls	r3, r3, #1
    e38e:	461a      	mov	r2, r3
    e390:	4915      	ldr	r1, [pc, #84]	; (e3e8 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e392:	4816      	ldr	r0, [pc, #88]	; (e3ec <_ZN9CDC_Class5writeEPKhj+0x84>)
    e394:	4b16      	ldr	r3, [pc, #88]	; (e3f0 <_ZN9CDC_Class5writeEPKhj+0x88>)
    e396:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e398:	6879      	ldr	r1, [r7, #4]
    e39a:	68b8      	ldr	r0, [r7, #8]
    e39c:	4b15      	ldr	r3, [pc, #84]	; (e3f4 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e39e:	4798      	blx	r3
    e3a0:	4603      	mov	r3, r0
    e3a2:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e3a4:	68fb      	ldr	r3, [r7, #12]
    e3a6:	7d1b      	ldrb	r3, [r3, #20]
    e3a8:	b2db      	uxtb	r3, r3
    e3aa:	f083 0301 	eor.w	r3, r3, #1
    e3ae:	b2db      	uxtb	r3, r3
    e3b0:	2b00      	cmp	r3, #0
    e3b2:	d006      	beq.n	e3c2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e3b4:	68fb      	ldr	r3, [r7, #12]
    e3b6:	7c1b      	ldrb	r3, [r3, #16]
    e3b8:	b2db      	uxtb	r3, r3
    e3ba:	2b00      	cmp	r3, #0
    e3bc:	d001      	beq.n	e3c2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e3be:	2301      	movs	r3, #1
    e3c0:	e000      	b.n	e3c4 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e3c2:	2300      	movs	r3, #0
    e3c4:	2b00      	cmp	r3, #0
    e3c6:	d000      	beq.n	e3ca <_ZN9CDC_Class5writeEPKhj+0x62>
    e3c8:	e7ec      	b.n	e3a4 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e3ca:	4808      	ldr	r0, [pc, #32]	; (e3ec <_ZN9CDC_Class5writeEPKhj+0x84>)
    e3cc:	4b0a      	ldr	r3, [pc, #40]	; (e3f8 <_ZN9CDC_Class5writeEPKhj+0x90>)
    e3ce:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e3d0:	4905      	ldr	r1, [pc, #20]	; (e3e8 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e3d2:	4806      	ldr	r0, [pc, #24]	; (e3ec <_ZN9CDC_Class5writeEPKhj+0x84>)
    e3d4:	4b09      	ldr	r3, [pc, #36]	; (e3fc <_ZN9CDC_Class5writeEPKhj+0x94>)
    e3d6:	4798      	blx	r3
    e3d8:	e001      	b.n	e3de <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e3da:	2300      	movs	r3, #0
    e3dc:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e3de:	697b      	ldr	r3, [r7, #20]
}
    e3e0:	4618      	mov	r0, r3
    e3e2:	3718      	adds	r7, #24
    e3e4:	46bd      	mov	sp, r7
    e3e6:	bd80      	pop	{r7, pc}
    e3e8:	0000df35 	.word	0x0000df35
    e3ec:	20001128 	.word	0x20001128
    e3f0:	0000e965 	.word	0x0000e965
    e3f4:	0000cae1 	.word	0x0000cae1
    e3f8:	0000e885 	.word	0x0000e885
    e3fc:	0000e9c9 	.word	0x0000e9c9

0000e400 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e400:	b480      	push	{r7}
    e402:	b083      	sub	sp, #12
    e404:	af00      	add	r7, sp, #0
    e406:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e408:	687b      	ldr	r3, [r7, #4]
    e40a:	7d5b      	ldrb	r3, [r3, #21]
    e40c:	b2db      	uxtb	r3, r3
    e40e:	2b00      	cmp	r3, #0
    e410:	d006      	beq.n	e420 <_ZN9CDC_Class9availableEv+0x20>
    e412:	687b      	ldr	r3, [r7, #4]
    e414:	7d1b      	ldrb	r3, [r3, #20]
    e416:	b2db      	uxtb	r3, r3
    e418:	2b00      	cmp	r3, #0
    e41a:	d001      	beq.n	e420 <_ZN9CDC_Class9availableEv+0x20>
    e41c:	2301      	movs	r3, #1
    e41e:	e000      	b.n	e422 <_ZN9CDC_Class9availableEv+0x22>
    e420:	2300      	movs	r3, #0
    e422:	2b00      	cmp	r3, #0
    e424:	d001      	beq.n	e42a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e426:	2301      	movs	r3, #1
    e428:	e000      	b.n	e42c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e42a:	2300      	movs	r3, #0
	}
	
}
    e42c:	4618      	mov	r0, r3
    e42e:	370c      	adds	r7, #12
    e430:	46bd      	mov	sp, r7
    e432:	bc80      	pop	{r7}
    e434:	4770      	bx	lr
	...

0000e438 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e438:	b580      	push	{r7, lr}
    e43a:	b082      	sub	sp, #8
    e43c:	af00      	add	r7, sp, #0
    e43e:	6078      	str	r0, [r7, #4]
    e440:	6039      	str	r1, [r7, #0]
    e442:	687b      	ldr	r3, [r7, #4]
    e444:	2b01      	cmp	r3, #1
    e446:	d10c      	bne.n	e462 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    e448:	683b      	ldr	r3, [r7, #0]
    e44a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e44e:	4293      	cmp	r3, r2
    e450:	d107      	bne.n	e462 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    e452:	4806      	ldr	r0, [pc, #24]	; (e46c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e454:	4b06      	ldr	r3, [pc, #24]	; (e470 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e456:	4798      	blx	r3
    e458:	4a06      	ldr	r2, [pc, #24]	; (e474 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e45a:	4907      	ldr	r1, [pc, #28]	; (e478 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e45c:	4803      	ldr	r0, [pc, #12]	; (e46c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e45e:	4b07      	ldr	r3, [pc, #28]	; (e47c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e460:	4798      	blx	r3
    e462:	bf00      	nop
    e464:	3708      	adds	r7, #8
    e466:	46bd      	mov	sp, r7
    e468:	bd80      	pop	{r7, pc}
    e46a:	bf00      	nop
    e46c:	20001070 	.word	0x20001070
    e470:	0000e025 	.word	0x0000e025
    e474:	20000000 	.word	0x20000000
    e478:	0000e06d 	.word	0x0000e06d
    e47c:	000113d5 	.word	0x000113d5

0000e480 <_GLOBAL__sub_I_ptrCDCClass>:
    e480:	b580      	push	{r7, lr}
    e482:	af00      	add	r7, sp, #0
    e484:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e488:	2001      	movs	r0, #1
    e48a:	4b01      	ldr	r3, [pc, #4]	; (e490 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e48c:	4798      	blx	r3
    e48e:	bd80      	pop	{r7, pc}
    e490:	0000e439 	.word	0x0000e439

0000e494 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    e494:	b590      	push	{r4, r7, lr}
    e496:	b083      	sub	sp, #12
    e498:	af00      	add	r7, sp, #0
    e49a:	6078      	str	r0, [r7, #4]
    e49c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    e49e:	683b      	ldr	r3, [r7, #0]
    e4a0:	2b00      	cmp	r3, #0
    e4a2:	d101      	bne.n	e4a8 <_ZN5Print5writeEPKc+0x14>
    e4a4:	2300      	movs	r3, #0
    e4a6:	e00c      	b.n	e4c2 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    e4a8:	687b      	ldr	r3, [r7, #4]
    e4aa:	681b      	ldr	r3, [r3, #0]
    e4ac:	3304      	adds	r3, #4
    e4ae:	681c      	ldr	r4, [r3, #0]
    e4b0:	6838      	ldr	r0, [r7, #0]
    e4b2:	4b06      	ldr	r3, [pc, #24]	; (e4cc <_ZN5Print5writeEPKc+0x38>)
    e4b4:	4798      	blx	r3
    e4b6:	4603      	mov	r3, r0
    e4b8:	461a      	mov	r2, r3
    e4ba:	6839      	ldr	r1, [r7, #0]
    e4bc:	6878      	ldr	r0, [r7, #4]
    e4be:	47a0      	blx	r4
    e4c0:	4603      	mov	r3, r0
    }
    e4c2:	4618      	mov	r0, r3
    e4c4:	370c      	adds	r7, #12
    e4c6:	46bd      	mov	sp, r7
    e4c8:	bd90      	pop	{r4, r7, pc}
    e4ca:	bf00      	nop
    e4cc:	000118c1 	.word	0x000118c1

0000e4d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e4d0:	b580      	push	{r7, lr}
    e4d2:	b086      	sub	sp, #24
    e4d4:	af00      	add	r7, sp, #0
    e4d6:	60f8      	str	r0, [r7, #12]
    e4d8:	60b9      	str	r1, [r7, #8]
    e4da:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e4dc:	2300      	movs	r3, #0
    e4de:	617b      	str	r3, [r7, #20]
  while (size--) {
    e4e0:	687b      	ldr	r3, [r7, #4]
    e4e2:	1e5a      	subs	r2, r3, #1
    e4e4:	607a      	str	r2, [r7, #4]
    e4e6:	2b00      	cmp	r3, #0
    e4e8:	bf14      	ite	ne
    e4ea:	2301      	movne	r3, #1
    e4ec:	2300      	moveq	r3, #0
    e4ee:	b2db      	uxtb	r3, r3
    e4f0:	2b00      	cmp	r3, #0
    e4f2:	d016      	beq.n	e522 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e4f4:	68fb      	ldr	r3, [r7, #12]
    e4f6:	681b      	ldr	r3, [r3, #0]
    e4f8:	681a      	ldr	r2, [r3, #0]
    e4fa:	68bb      	ldr	r3, [r7, #8]
    e4fc:	1c59      	adds	r1, r3, #1
    e4fe:	60b9      	str	r1, [r7, #8]
    e500:	781b      	ldrb	r3, [r3, #0]
    e502:	4619      	mov	r1, r3
    e504:	68f8      	ldr	r0, [r7, #12]
    e506:	4790      	blx	r2
    e508:	4603      	mov	r3, r0
    e50a:	2b00      	cmp	r3, #0
    e50c:	bf14      	ite	ne
    e50e:	2301      	movne	r3, #1
    e510:	2300      	moveq	r3, #0
    e512:	b2db      	uxtb	r3, r3
    e514:	2b00      	cmp	r3, #0
    e516:	d003      	beq.n	e520 <_ZN5Print5writeEPKhj+0x50>
    e518:	697b      	ldr	r3, [r7, #20]
    e51a:	3301      	adds	r3, #1
    e51c:	617b      	str	r3, [r7, #20]
  while (size--) {
    e51e:	e7df      	b.n	e4e0 <_ZN5Print5writeEPKhj+0x10>
    else break;
    e520:	bf00      	nop
  }
  return n;
    e522:	697b      	ldr	r3, [r7, #20]
}
    e524:	4618      	mov	r0, r3
    e526:	3718      	adds	r7, #24
    e528:	46bd      	mov	sp, r7
    e52a:	bd80      	pop	{r7, pc}

0000e52c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    e52c:	b580      	push	{r7, lr}
    e52e:	b082      	sub	sp, #8
    e530:	af00      	add	r7, sp, #0
    e532:	6078      	str	r0, [r7, #4]
    e534:	6039      	str	r1, [r7, #0]
  return write(str);
    e536:	6839      	ldr	r1, [r7, #0]
    e538:	6878      	ldr	r0, [r7, #4]
    e53a:	4b03      	ldr	r3, [pc, #12]	; (e548 <_ZN5Print5printEPKc+0x1c>)
    e53c:	4798      	blx	r3
    e53e:	4603      	mov	r3, r0
}
    e540:	4618      	mov	r0, r3
    e542:	3708      	adds	r7, #8
    e544:	46bd      	mov	sp, r7
    e546:	bd80      	pop	{r7, pc}
    e548:	0000e495 	.word	0x0000e495

0000e54c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e54c:	b480      	push	{r7}
    e54e:	b083      	sub	sp, #12
    e550:	af00      	add	r7, sp, #0
    e552:	6078      	str	r0, [r7, #4]
    e554:	460b      	mov	r3, r1
    e556:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e558:	78fb      	ldrb	r3, [r7, #3]
    e55a:	687a      	ldr	r2, [r7, #4]
    e55c:	01db      	lsls	r3, r3, #7
    e55e:	4413      	add	r3, r2
    e560:	681b      	ldr	r3, [r3, #0]
}
    e562:	4618      	mov	r0, r3
    e564:	370c      	adds	r7, #12
    e566:	46bd      	mov	sp, r7
    e568:	bc80      	pop	{r7}
    e56a:	4770      	bx	lr

0000e56c <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e56c:	b480      	push	{r7}
    e56e:	b083      	sub	sp, #12
    e570:	af00      	add	r7, sp, #0
    e572:	6078      	str	r0, [r7, #4]
    e574:	460b      	mov	r3, r1
    e576:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e578:	78fb      	ldrb	r3, [r7, #3]
    e57a:	687a      	ldr	r2, [r7, #4]
    e57c:	01db      	lsls	r3, r3, #7
    e57e:	4413      	add	r3, r2
    e580:	3310      	adds	r3, #16
    e582:	681b      	ldr	r3, [r3, #0]
}
    e584:	4618      	mov	r0, r3
    e586:	370c      	adds	r7, #12
    e588:	46bd      	mov	sp, r7
    e58a:	bc80      	pop	{r7}
    e58c:	4770      	bx	lr

0000e58e <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e58e:	b480      	push	{r7}
    e590:	b083      	sub	sp, #12
    e592:	af00      	add	r7, sp, #0
    e594:	6078      	str	r0, [r7, #4]
    e596:	460b      	mov	r3, r1
    e598:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e59a:	78fb      	ldrb	r3, [r7, #3]
    e59c:	687a      	ldr	r2, [r7, #4]
    e59e:	01db      	lsls	r3, r3, #7
    e5a0:	4413      	add	r3, r2
    e5a2:	3320      	adds	r3, #32
    e5a4:	681b      	ldr	r3, [r3, #0]
}
    e5a6:	4618      	mov	r0, r3
    e5a8:	370c      	adds	r7, #12
    e5aa:	46bd      	mov	sp, r7
    e5ac:	bc80      	pop	{r7}
    e5ae:	4770      	bx	lr

0000e5b0 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e5b0:	b580      	push	{r7, lr}
    e5b2:	b086      	sub	sp, #24
    e5b4:	af00      	add	r7, sp, #0
    e5b6:	4603      	mov	r3, r0
    e5b8:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e5ba:	f107 030c 	add.w	r3, r7, #12
    e5be:	4618      	mov	r0, r3
    e5c0:	4b13      	ldr	r3, [pc, #76]	; (e610 <_gpio_get_level+0x60>)
    e5c2:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e5c4:	79fb      	ldrb	r3, [r7, #7]
    e5c6:	4619      	mov	r1, r3
    e5c8:	4812      	ldr	r0, [pc, #72]	; (e614 <_gpio_get_level+0x64>)
    e5ca:	4b13      	ldr	r3, [pc, #76]	; (e618 <_gpio_get_level+0x68>)
    e5cc:	4798      	blx	r3
    e5ce:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e5d0:	79fb      	ldrb	r3, [r7, #7]
    e5d2:	4619      	mov	r1, r3
    e5d4:	480f      	ldr	r0, [pc, #60]	; (e614 <_gpio_get_level+0x64>)
    e5d6:	4b11      	ldr	r3, [pc, #68]	; (e61c <_gpio_get_level+0x6c>)
    e5d8:	4798      	blx	r3
    e5da:	4602      	mov	r2, r0
    e5dc:	697b      	ldr	r3, [r7, #20]
    e5de:	43db      	mvns	r3, r3
    e5e0:	4013      	ands	r3, r2
    e5e2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e5e4:	79fb      	ldrb	r3, [r7, #7]
    e5e6:	4619      	mov	r1, r3
    e5e8:	480a      	ldr	r0, [pc, #40]	; (e614 <_gpio_get_level+0x64>)
    e5ea:	4b0d      	ldr	r3, [pc, #52]	; (e620 <_gpio_get_level+0x70>)
    e5ec:	4798      	blx	r3
    e5ee:	4602      	mov	r2, r0
    e5f0:	697b      	ldr	r3, [r7, #20]
    e5f2:	4013      	ands	r3, r2
    e5f4:	693a      	ldr	r2, [r7, #16]
    e5f6:	4313      	orrs	r3, r2
    e5f8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e5fa:	f107 030c 	add.w	r3, r7, #12
    e5fe:	4618      	mov	r0, r3
    e600:	4b08      	ldr	r3, [pc, #32]	; (e624 <_gpio_get_level+0x74>)
    e602:	4798      	blx	r3

	return tmp;
    e604:	693b      	ldr	r3, [r7, #16]
}
    e606:	4618      	mov	r0, r3
    e608:	3718      	adds	r7, #24
    e60a:	46bd      	mov	sp, r7
    e60c:	bd80      	pop	{r7, pc}
    e60e:	bf00      	nop
    e610:	0000bcbd 	.word	0x0000bcbd
    e614:	41008000 	.word	0x41008000
    e618:	0000e54d 	.word	0x0000e54d
    e61c:	0000e58f 	.word	0x0000e58f
    e620:	0000e56d 	.word	0x0000e56d
    e624:	0000bce3 	.word	0x0000bce3

0000e628 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e628:	b580      	push	{r7, lr}
    e62a:	b082      	sub	sp, #8
    e62c:	af00      	add	r7, sp, #0
    e62e:	4603      	mov	r3, r0
    e630:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e632:	79fb      	ldrb	r3, [r7, #7]
    e634:	115b      	asrs	r3, r3, #5
    e636:	b2db      	uxtb	r3, r3
    e638:	4618      	mov	r0, r3
    e63a:	4b09      	ldr	r3, [pc, #36]	; (e660 <gpio_get_pin_level+0x38>)
    e63c:	4798      	blx	r3
    e63e:	4601      	mov	r1, r0
    e640:	79fb      	ldrb	r3, [r7, #7]
    e642:	f003 031f 	and.w	r3, r3, #31
    e646:	2201      	movs	r2, #1
    e648:	fa02 f303 	lsl.w	r3, r2, r3
    e64c:	400b      	ands	r3, r1
    e64e:	2b00      	cmp	r3, #0
    e650:	bf14      	ite	ne
    e652:	2301      	movne	r3, #1
    e654:	2300      	moveq	r3, #0
    e656:	b2db      	uxtb	r3, r3
}
    e658:	4618      	mov	r0, r3
    e65a:	3708      	adds	r7, #8
    e65c:	46bd      	mov	sp, r7
    e65e:	bd80      	pop	{r7, pc}
    e660:	0000e5b1 	.word	0x0000e5b1

0000e664 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e664:	b480      	push	{r7}
    e666:	b083      	sub	sp, #12
    e668:	af00      	add	r7, sp, #0
    e66a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e66c:	4b06      	ldr	r3, [pc, #24]	; (e688 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e66e:	681b      	ldr	r3, [r3, #0]
    e670:	2201      	movs	r2, #1
    e672:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    e674:	4b04      	ldr	r3, [pc, #16]	; (e688 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e676:	681b      	ldr	r3, [r3, #0]
    e678:	2200      	movs	r2, #0
    e67a:	705a      	strb	r2, [r3, #1]
}
    e67c:	bf00      	nop
    e67e:	370c      	adds	r7, #12
    e680:	46bd      	mov	sp, r7
    e682:	bc80      	pop	{r7}
    e684:	4770      	bx	lr
    e686:	bf00      	nop
    e688:	200010d0 	.word	0x200010d0

0000e68c <_ZL10USBPluggedv>:

static void USBPlugged(void){
    e68c:	b580      	push	{r7, lr}
    e68e:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    e690:	2040      	movs	r0, #64	; 0x40
    e692:	4b0a      	ldr	r3, [pc, #40]	; (e6bc <_ZL10USBPluggedv+0x30>)
    e694:	4798      	blx	r3
    e696:	4603      	mov	r3, r0
    e698:	2b00      	cmp	r3, #0
    e69a:	d004      	beq.n	e6a6 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    e69c:	4b08      	ldr	r3, [pc, #32]	; (e6c0 <_ZL10USBPluggedv+0x34>)
    e69e:	681b      	ldr	r3, [r3, #0]
    e6a0:	2201      	movs	r2, #1
    e6a2:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    e6a4:	e007      	b.n	e6b6 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    e6a6:	4b06      	ldr	r3, [pc, #24]	; (e6c0 <_ZL10USBPluggedv+0x34>)
    e6a8:	681b      	ldr	r3, [r3, #0]
    e6aa:	2200      	movs	r2, #0
    e6ac:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    e6ae:	4b04      	ldr	r3, [pc, #16]	; (e6c0 <_ZL10USBPluggedv+0x34>)
    e6b0:	681b      	ldr	r3, [r3, #0]
    e6b2:	2200      	movs	r2, #0
    e6b4:	701a      	strb	r2, [r3, #0]
}
    e6b6:	bf00      	nop
    e6b8:	bd80      	pop	{r7, pc}
    e6ba:	bf00      	nop
    e6bc:	0000e629 	.word	0x0000e629
    e6c0:	200010d0 	.word	0x200010d0

0000e6c4 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e6c4:	b480      	push	{r7}
    e6c6:	b083      	sub	sp, #12
    e6c8:	af00      	add	r7, sp, #0
    e6ca:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e6cc:	4a04      	ldr	r2, [pc, #16]	; (e6e0 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e6ce:	687b      	ldr	r3, [r7, #4]
    e6d0:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    e6d2:	687b      	ldr	r3, [r7, #4]
    e6d4:	4618      	mov	r0, r3
    e6d6:	370c      	adds	r7, #12
    e6d8:	46bd      	mov	sp, r7
    e6da:	bc80      	pop	{r7}
    e6dc:	4770      	bx	lr
    e6de:	bf00      	nop
    e6e0:	200010d0 	.word	0x200010d0

0000e6e4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e6e4:	b480      	push	{r7}
    e6e6:	b083      	sub	sp, #12
    e6e8:	af00      	add	r7, sp, #0
    e6ea:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e6ec:	687b      	ldr	r3, [r7, #4]
    e6ee:	4618      	mov	r0, r3
    e6f0:	370c      	adds	r7, #12
    e6f2:	46bd      	mov	sp, r7
    e6f4:	bc80      	pop	{r7}
    e6f6:	4770      	bx	lr

0000e6f8 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e6f8:	b580      	push	{r7, lr}
    e6fa:	b082      	sub	sp, #8
    e6fc:	af00      	add	r7, sp, #0
    e6fe:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e700:	491f      	ldr	r1, [pc, #124]	; (e780 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e702:	2040      	movs	r0, #64	; 0x40
    e704:	4b1f      	ldr	r3, [pc, #124]	; (e784 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e706:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e708:	481f      	ldr	r0, [pc, #124]	; (e788 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e70a:	4b20      	ldr	r3, [pc, #128]	; (e78c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e70c:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e70e:	2040      	movs	r0, #64	; 0x40
    e710:	4b1f      	ldr	r3, [pc, #124]	; (e790 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e712:	4798      	blx	r3
    e714:	4603      	mov	r3, r0
    e716:	461a      	mov	r2, r3
    e718:	687b      	ldr	r3, [r7, #4]
    e71a:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e71c:	687b      	ldr	r3, [r7, #4]
    e71e:	78db      	ldrb	r3, [r3, #3]
    e720:	2b00      	cmp	r3, #0
    e722:	d024      	beq.n	e76e <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    e724:	687b      	ldr	r3, [r7, #4]
    e726:	2200      	movs	r2, #0
    e728:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e72a:	687b      	ldr	r3, [r7, #4]
    e72c:	2201      	movs	r2, #1
    e72e:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e730:	f44f 7216 	mov.w	r2, #600	; 0x258
    e734:	4917      	ldr	r1, [pc, #92]	; (e794 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e736:	4814      	ldr	r0, [pc, #80]	; (e788 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e738:	4b17      	ldr	r3, [pc, #92]	; (e798 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e73a:	4798      	blx	r3
			usbTerminalTimer.Start();
    e73c:	4812      	ldr	r0, [pc, #72]	; (e788 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e73e:	4b17      	ldr	r3, [pc, #92]	; (e79c <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e740:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e742:	4817      	ldr	r0, [pc, #92]	; (e7a0 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e744:	4b17      	ldr	r3, [pc, #92]	; (e7a4 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    e746:	4798      	blx	r3
    e748:	4603      	mov	r3, r0
    e74a:	f083 0301 	eor.w	r3, r3, #1
    e74e:	b2db      	uxtb	r3, r3
    e750:	2b00      	cmp	r3, #0
    e752:	d008      	beq.n	e766 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    e754:	687b      	ldr	r3, [r7, #4]
    e756:	789b      	ldrb	r3, [r3, #2]
    e758:	b2db      	uxtb	r3, r3
    e75a:	2b00      	cmp	r3, #0
    e75c:	d0f1      	beq.n	e742 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    e75e:	687b      	ldr	r3, [r7, #4]
    e760:	2200      	movs	r2, #0
    e762:	701a      	strb	r2, [r3, #0]
					return;
    e764:	e009      	b.n	e77a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e766:	4808      	ldr	r0, [pc, #32]	; (e788 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e768:	4b0f      	ldr	r3, [pc, #60]	; (e7a8 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    e76a:	4798      	blx	r3
    e76c:	e005      	b.n	e77a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    e76e:	687b      	ldr	r3, [r7, #4]
    e770:	2200      	movs	r2, #0
    e772:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e774:	687b      	ldr	r3, [r7, #4]
    e776:	2200      	movs	r2, #0
    e778:	705a      	strb	r2, [r3, #1]
		}
		
}
    e77a:	3708      	adds	r7, #8
    e77c:	46bd      	mov	sp, r7
    e77e:	bd80      	pop	{r7, pc}
    e780:	0000e68d 	.word	0x0000e68d
    e784:	000025f5 	.word	0x000025f5
    e788:	20001128 	.word	0x20001128
    e78c:	0000e829 	.word	0x0000e829
    e790:	0000e629 	.word	0x0000e629
    e794:	0000e665 	.word	0x0000e665
    e798:	0000e93d 	.word	0x0000e93d
    e79c:	0000e861 	.word	0x0000e861
    e7a0:	20001070 	.word	0x20001070
    e7a4:	0000e0dd 	.word	0x0000e0dd
    e7a8:	0000e885 	.word	0x0000e885

0000e7ac <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    e7ac:	b580      	push	{r7, lr}
    e7ae:	b082      	sub	sp, #8
    e7b0:	af00      	add	r7, sp, #0
    e7b2:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    e7b4:	4b04      	ldr	r3, [pc, #16]	; (e7c8 <_ZL7task_cbPK10timer_task+0x1c>)
    e7b6:	681b      	ldr	r3, [r3, #0]
    e7b8:	4618      	mov	r0, r3
    e7ba:	4b04      	ldr	r3, [pc, #16]	; (e7cc <_ZL7task_cbPK10timer_task+0x20>)
    e7bc:	4798      	blx	r3
}
    e7be:	bf00      	nop
    e7c0:	3708      	adds	r7, #8
    e7c2:	46bd      	mov	sp, r7
    e7c4:	bd80      	pop	{r7, pc}
    e7c6:	bf00      	nop
    e7c8:	200010d4 	.word	0x200010d4
    e7cc:	0000e8ad 	.word	0x0000e8ad

0000e7d0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    e7d0:	b480      	push	{r7}
    e7d2:	b083      	sub	sp, #12
    e7d4:	af00      	add	r7, sp, #0
    e7d6:	6078      	str	r0, [r7, #4]
    e7d8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e7da:	687b      	ldr	r3, [r7, #4]
    e7dc:	683a      	ldr	r2, [r7, #0]
    e7de:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    e7e0:	4a08      	ldr	r2, [pc, #32]	; (e804 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    e7e2:	687b      	ldr	r3, [r7, #4]
    e7e4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e7e6:	687b      	ldr	r3, [r7, #4]
    e7e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e7ec:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    e7ee:	687b      	ldr	r3, [r7, #4]
    e7f0:	689b      	ldr	r3, [r3, #8]
    e7f2:	4a05      	ldr	r2, [pc, #20]	; (e808 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    e7f4:	60da      	str	r2, [r3, #12]
} //Timer_Class
    e7f6:	687b      	ldr	r3, [r7, #4]
    e7f8:	4618      	mov	r0, r3
    e7fa:	370c      	adds	r7, #12
    e7fc:	46bd      	mov	sp, r7
    e7fe:	bc80      	pop	{r7}
    e800:	4770      	bx	lr
    e802:	bf00      	nop
    e804:	200010d4 	.word	0x200010d4
    e808:	0000e7ad 	.word	0x0000e7ad

0000e80c <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    e80c:	b480      	push	{r7}
    e80e:	b083      	sub	sp, #12
    e810:	af00      	add	r7, sp, #0
    e812:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e814:	687b      	ldr	r3, [r7, #4]
    e816:	2200      	movs	r2, #0
    e818:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e81a:	687b      	ldr	r3, [r7, #4]
    e81c:	4618      	mov	r0, r3
    e81e:	370c      	adds	r7, #12
    e820:	46bd      	mov	sp, r7
    e822:	bc80      	pop	{r7}
    e824:	4770      	bx	lr
	...

0000e828 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    e828:	b580      	push	{r7, lr}
    e82a:	b082      	sub	sp, #8
    e82c:	af00      	add	r7, sp, #0
    e82e:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    e830:	687b      	ldr	r3, [r7, #4]
    e832:	2200      	movs	r2, #0
    e834:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    e836:	6878      	ldr	r0, [r7, #4]
    e838:	4b08      	ldr	r3, [pc, #32]	; (e85c <_ZN17TimerSerial_Class4InitEv+0x34>)
    e83a:	4798      	blx	r3
    e83c:	4603      	mov	r3, r0
    e83e:	2b00      	cmp	r3, #0
    e840:	bf0c      	ite	eq
    e842:	2301      	moveq	r3, #1
    e844:	2300      	movne	r3, #0
    e846:	b2da      	uxtb	r2, r3
    e848:	687b      	ldr	r3, [r7, #4]
    e84a:	709a      	strb	r2, [r3, #2]
	return isOK;
    e84c:	687b      	ldr	r3, [r7, #4]
    e84e:	789b      	ldrb	r3, [r3, #2]
    e850:	b2db      	uxtb	r3, r3
}
    e852:	4618      	mov	r0, r3
    e854:	3708      	adds	r7, #8
    e856:	46bd      	mov	sp, r7
    e858:	bd80      	pop	{r7, pc}
    e85a:	bf00      	nop
    e85c:	0000e861 	.word	0x0000e861

0000e860 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    e860:	b580      	push	{r7, lr}
    e862:	b084      	sub	sp, #16
    e864:	af00      	add	r7, sp, #0
    e866:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e868:	687b      	ldr	r3, [r7, #4]
    e86a:	691b      	ldr	r3, [r3, #16]
    e86c:	4618      	mov	r0, r3
    e86e:	4b04      	ldr	r3, [pc, #16]	; (e880 <_ZN17TimerSerial_Class5StartEv+0x20>)
    e870:	4798      	blx	r3
    e872:	60f8      	str	r0, [r7, #12]
	return status;
    e874:	68fb      	ldr	r3, [r7, #12]
	
}
    e876:	4618      	mov	r0, r3
    e878:	3710      	adds	r7, #16
    e87a:	46bd      	mov	sp, r7
    e87c:	bd80      	pop	{r7, pc}
    e87e:	bf00      	nop
    e880:	00002f15 	.word	0x00002f15

0000e884 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    e884:	b580      	push	{r7, lr}
    e886:	b084      	sub	sp, #16
    e888:	af00      	add	r7, sp, #0
    e88a:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e88c:	687b      	ldr	r3, [r7, #4]
    e88e:	691b      	ldr	r3, [r3, #16]
    e890:	4618      	mov	r0, r3
    e892:	4b05      	ldr	r3, [pc, #20]	; (e8a8 <_ZN17TimerSerial_Class4StopEv+0x24>)
    e894:	4798      	blx	r3
    e896:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e898:	687b      	ldr	r3, [r7, #4]
    e89a:	2200      	movs	r2, #0
    e89c:	705a      	strb	r2, [r3, #1]
	return status;
    e89e:	68fb      	ldr	r3, [r7, #12]
}
    e8a0:	4618      	mov	r0, r3
    e8a2:	3710      	adds	r7, #16
    e8a4:	46bd      	mov	sp, r7
    e8a6:	bd80      	pop	{r7, pc}
    e8a8:	00002f7d 	.word	0x00002f7d

0000e8ac <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    e8ac:	b480      	push	{r7}
    e8ae:	b083      	sub	sp, #12
    e8b0:	af00      	add	r7, sp, #0
    e8b2:	6078      	str	r0, [r7, #4]
	timeout=1;
    e8b4:	687b      	ldr	r3, [r7, #4]
    e8b6:	2201      	movs	r2, #1
    e8b8:	705a      	strb	r2, [r3, #1]
}
    e8ba:	bf00      	nop
    e8bc:	370c      	adds	r7, #12
    e8be:	46bd      	mov	sp, r7
    e8c0:	bc80      	pop	{r7}
    e8c2:	4770      	bx	lr

0000e8c4 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e8c4:	b580      	push	{r7, lr}
    e8c6:	b086      	sub	sp, #24
    e8c8:	af00      	add	r7, sp, #0
    e8ca:	60f8      	str	r0, [r7, #12]
    e8cc:	60b9      	str	r1, [r7, #8]
    e8ce:	607a      	str	r2, [r7, #4]
    e8d0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    e8d2:	68f8      	ldr	r0, [r7, #12]
    e8d4:	4b0d      	ldr	r3, [pc, #52]	; (e90c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    e8d6:	4798      	blx	r3
	task->interval = interval;
    e8d8:	68fb      	ldr	r3, [r7, #12]
    e8da:	689b      	ldr	r3, [r3, #8]
    e8dc:	687a      	ldr	r2, [r7, #4]
    e8de:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e8e0:	68fb      	ldr	r3, [r7, #12]
    e8e2:	689b      	ldr	r3, [r3, #8]
    e8e4:	68ba      	ldr	r2, [r7, #8]
    e8e6:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e8e8:	68fb      	ldr	r3, [r7, #12]
    e8ea:	689b      	ldr	r3, [r3, #8]
    e8ec:	78fa      	ldrb	r2, [r7, #3]
    e8ee:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e8f0:	68fb      	ldr	r3, [r7, #12]
    e8f2:	691a      	ldr	r2, [r3, #16]
    e8f4:	68fb      	ldr	r3, [r7, #12]
    e8f6:	689b      	ldr	r3, [r3, #8]
    e8f8:	4619      	mov	r1, r3
    e8fa:	4610      	mov	r0, r2
    e8fc:	4b04      	ldr	r3, [pc, #16]	; (e910 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e8fe:	4798      	blx	r3
    e900:	6178      	str	r0, [r7, #20]
	
	return status;
    e902:	697b      	ldr	r3, [r7, #20]
}
    e904:	4618      	mov	r0, r3
    e906:	3718      	adds	r7, #24
    e908:	46bd      	mov	sp, r7
    e90a:	bd80      	pop	{r7, pc}
    e90c:	0000ea21 	.word	0x0000ea21
    e910:	00002fe9 	.word	0x00002fe9

0000e914 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    e914:	b590      	push	{r4, r7, lr}
    e916:	b087      	sub	sp, #28
    e918:	af00      	add	r7, sp, #0
    e91a:	60f8      	str	r0, [r7, #12]
    e91c:	60b9      	str	r1, [r7, #8]
    e91e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    e920:	2301      	movs	r3, #1
    e922:	687a      	ldr	r2, [r7, #4]
    e924:	68b9      	ldr	r1, [r7, #8]
    e926:	68f8      	ldr	r0, [r7, #12]
    e928:	4c03      	ldr	r4, [pc, #12]	; (e938 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
    e92a:	47a0      	blx	r4
    e92c:	6178      	str	r0, [r7, #20]
		return status;
    e92e:	697b      	ldr	r3, [r7, #20]
}
    e930:	4618      	mov	r0, r3
    e932:	371c      	adds	r7, #28
    e934:	46bd      	mov	sp, r7
    e936:	bd90      	pop	{r4, r7, pc}
    e938:	0000e8c5 	.word	0x0000e8c5

0000e93c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    e93c:	b590      	push	{r4, r7, lr}
    e93e:	b087      	sub	sp, #28
    e940:	af00      	add	r7, sp, #0
    e942:	60f8      	str	r0, [r7, #12]
    e944:	60b9      	str	r1, [r7, #8]
    e946:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e948:	2300      	movs	r3, #0
    e94a:	687a      	ldr	r2, [r7, #4]
    e94c:	68b9      	ldr	r1, [r7, #8]
    e94e:	68f8      	ldr	r0, [r7, #12]
    e950:	4c03      	ldr	r4, [pc, #12]	; (e960 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    e952:	47a0      	blx	r4
    e954:	6178      	str	r0, [r7, #20]
	return status;
    e956:	697b      	ldr	r3, [r7, #20]
}
    e958:	4618      	mov	r0, r3
    e95a:	371c      	adds	r7, #28
    e95c:	46bd      	mov	sp, r7
    e95e:	bd90      	pop	{r4, r7, pc}
    e960:	0000e8c5 	.word	0x0000e8c5

0000e964 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e964:	b590      	push	{r4, r7, lr}
    e966:	b087      	sub	sp, #28
    e968:	af00      	add	r7, sp, #0
    e96a:	60f8      	str	r0, [r7, #12]
    e96c:	60b9      	str	r1, [r7, #8]
    e96e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e970:	2300      	movs	r3, #0
    e972:	687a      	ldr	r2, [r7, #4]
    e974:	68b9      	ldr	r1, [r7, #8]
    e976:	68f8      	ldr	r0, [r7, #12]
    e978:	4c06      	ldr	r4, [pc, #24]	; (e994 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    e97a:	47a0      	blx	r4
    e97c:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    e97e:	68fb      	ldr	r3, [r7, #12]
    e980:	691b      	ldr	r3, [r3, #16]
    e982:	4618      	mov	r0, r3
    e984:	4b04      	ldr	r3, [pc, #16]	; (e998 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    e986:	4798      	blx	r3
    e988:	6178      	str	r0, [r7, #20]
	return status;
    e98a:	697b      	ldr	r3, [r7, #20]
}
    e98c:	4618      	mov	r0, r3
    e98e:	371c      	adds	r7, #28
    e990:	46bd      	mov	sp, r7
    e992:	bd90      	pop	{r4, r7, pc}
    e994:	0000e8c5 	.word	0x0000e8c5
    e998:	00002f15 	.word	0x00002f15

0000e99c <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
    e99c:	b580      	push	{r7, lr}
    e99e:	b082      	sub	sp, #8
    e9a0:	af00      	add	r7, sp, #0
    e9a2:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
    e9a4:	687b      	ldr	r3, [r7, #4]
    e9a6:	691a      	ldr	r2, [r3, #16]
    e9a8:	687b      	ldr	r3, [r7, #4]
    e9aa:	689b      	ldr	r3, [r3, #8]
    e9ac:	4619      	mov	r1, r3
    e9ae:	4610      	mov	r0, r2
    e9b0:	4b04      	ldr	r3, [pc, #16]	; (e9c4 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
    e9b2:	4798      	blx	r3
	task->cb=NULL;
    e9b4:	687b      	ldr	r3, [r7, #4]
    e9b6:	689b      	ldr	r3, [r3, #8]
    e9b8:	2200      	movs	r2, #0
    e9ba:	60da      	str	r2, [r3, #12]
}
    e9bc:	bf00      	nop
    e9be:	3708      	adds	r7, #8
    e9c0:	46bd      	mov	sp, r7
    e9c2:	bd80      	pop	{r7, pc}
    e9c4:	000030ed 	.word	0x000030ed

0000e9c8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    e9c8:	b580      	push	{r7, lr}
    e9ca:	b082      	sub	sp, #8
    e9cc:	af00      	add	r7, sp, #0
    e9ce:	6078      	str	r0, [r7, #4]
    e9d0:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e9d2:	6839      	ldr	r1, [r7, #0]
    e9d4:	6878      	ldr	r0, [r7, #4]
    e9d6:	4b0f      	ldr	r3, [pc, #60]	; (ea14 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    e9d8:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e9da:	687b      	ldr	r3, [r7, #4]
    e9dc:	691b      	ldr	r3, [r3, #16]
    e9de:	f103 0218 	add.w	r2, r3, #24
    e9e2:	687b      	ldr	r3, [r7, #4]
    e9e4:	689b      	ldr	r3, [r3, #8]
    e9e6:	4619      	mov	r1, r3
    e9e8:	4610      	mov	r0, r2
    e9ea:	4b0b      	ldr	r3, [pc, #44]	; (ea18 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    e9ec:	4798      	blx	r3
    e9ee:	4603      	mov	r3, r0
    e9f0:	2b00      	cmp	r3, #0
    e9f2:	d007      	beq.n	ea04 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e9f4:	687b      	ldr	r3, [r7, #4]
    e9f6:	691a      	ldr	r2, [r3, #16]
    e9f8:	687b      	ldr	r3, [r7, #4]
    e9fa:	689b      	ldr	r3, [r3, #8]
    e9fc:	4619      	mov	r1, r3
    e9fe:	4610      	mov	r0, r2
    ea00:	4b06      	ldr	r3, [pc, #24]	; (ea1c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    ea02:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    ea04:	687b      	ldr	r3, [r7, #4]
    ea06:	689b      	ldr	r3, [r3, #8]
    ea08:	2200      	movs	r2, #0
    ea0a:	60da      	str	r2, [r3, #12]
}
    ea0c:	bf00      	nop
    ea0e:	3708      	adds	r7, #8
    ea10:	46bd      	mov	sp, r7
    ea12:	bd80      	pop	{r7, pc}
    ea14:	0000ea79 	.word	0x0000ea79
    ea18:	00003cd5 	.word	0x00003cd5
    ea1c:	000030ed 	.word	0x000030ed

0000ea20 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    ea20:	b480      	push	{r7}
    ea22:	b085      	sub	sp, #20
    ea24:	af00      	add	r7, sp, #0
    ea26:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    ea28:	2300      	movs	r3, #0
    ea2a:	73fb      	strb	r3, [r7, #15]
    ea2c:	7bfb      	ldrb	r3, [r7, #15]
    ea2e:	2b03      	cmp	r3, #3
    ea30:	dc18      	bgt.n	ea64 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    ea32:	7bfa      	ldrb	r2, [r7, #15]
    ea34:	490f      	ldr	r1, [pc, #60]	; (ea74 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    ea36:	4613      	mov	r3, r2
    ea38:	009b      	lsls	r3, r3, #2
    ea3a:	4413      	add	r3, r2
    ea3c:	009b      	lsls	r3, r3, #2
    ea3e:	440b      	add	r3, r1
    ea40:	330c      	adds	r3, #12
    ea42:	681b      	ldr	r3, [r3, #0]
    ea44:	2b00      	cmp	r3, #0
    ea46:	d109      	bne.n	ea5c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    ea48:	7bfa      	ldrb	r2, [r7, #15]
    ea4a:	4613      	mov	r3, r2
    ea4c:	009b      	lsls	r3, r3, #2
    ea4e:	4413      	add	r3, r2
    ea50:	009b      	lsls	r3, r3, #2
    ea52:	4a08      	ldr	r2, [pc, #32]	; (ea74 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    ea54:	441a      	add	r2, r3
    ea56:	687b      	ldr	r3, [r7, #4]
    ea58:	609a      	str	r2, [r3, #8]
			return;
    ea5a:	e006      	b.n	ea6a <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    ea5c:	7bfb      	ldrb	r3, [r7, #15]
    ea5e:	3301      	adds	r3, #1
    ea60:	73fb      	strb	r3, [r7, #15]
    ea62:	e7e3      	b.n	ea2c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    ea64:	687b      	ldr	r3, [r7, #4]
    ea66:	4a03      	ldr	r2, [pc, #12]	; (ea74 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    ea68:	609a      	str	r2, [r3, #8]

}
    ea6a:	3714      	adds	r7, #20
    ea6c:	46bd      	mov	sp, r7
    ea6e:	bc80      	pop	{r7}
    ea70:	4770      	bx	lr
    ea72:	bf00      	nop
    ea74:	200010d8 	.word	0x200010d8

0000ea78 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    ea78:	b480      	push	{r7}
    ea7a:	b085      	sub	sp, #20
    ea7c:	af00      	add	r7, sp, #0
    ea7e:	6078      	str	r0, [r7, #4]
    ea80:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    ea82:	2300      	movs	r3, #0
    ea84:	73fb      	strb	r3, [r7, #15]
    ea86:	7bfb      	ldrb	r3, [r7, #15]
    ea88:	2b03      	cmp	r3, #3
    ea8a:	dc19      	bgt.n	eac0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    ea8c:	7bfa      	ldrb	r2, [r7, #15]
    ea8e:	490e      	ldr	r1, [pc, #56]	; (eac8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    ea90:	4613      	mov	r3, r2
    ea92:	009b      	lsls	r3, r3, #2
    ea94:	4413      	add	r3, r2
    ea96:	009b      	lsls	r3, r3, #2
    ea98:	440b      	add	r3, r1
    ea9a:	330c      	adds	r3, #12
    ea9c:	681a      	ldr	r2, [r3, #0]
    ea9e:	683b      	ldr	r3, [r7, #0]
    eaa0:	429a      	cmp	r2, r3
    eaa2:	d109      	bne.n	eab8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    eaa4:	7bfa      	ldrb	r2, [r7, #15]
    eaa6:	4613      	mov	r3, r2
    eaa8:	009b      	lsls	r3, r3, #2
    eaaa:	4413      	add	r3, r2
    eaac:	009b      	lsls	r3, r3, #2
    eaae:	4a06      	ldr	r2, [pc, #24]	; (eac8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    eab0:	441a      	add	r2, r3
    eab2:	687b      	ldr	r3, [r7, #4]
    eab4:	609a      	str	r2, [r3, #8]
			return;
    eab6:	e003      	b.n	eac0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    eab8:	7bfb      	ldrb	r3, [r7, #15]
    eaba:	3301      	adds	r3, #1
    eabc:	73fb      	strb	r3, [r7, #15]
    eabe:	e7e2      	b.n	ea86 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    eac0:	3714      	adds	r7, #20
    eac2:	46bd      	mov	sp, r7
    eac4:	bc80      	pop	{r7}
    eac6:	4770      	bx	lr
    eac8:	200010d8 	.word	0x200010d8

0000eacc <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    eacc:	b580      	push	{r7, lr}
    eace:	b082      	sub	sp, #8
    ead0:	af00      	add	r7, sp, #0
    ead2:	6078      	str	r0, [r7, #4]
    ead4:	6039      	str	r1, [r7, #0]
    ead6:	687b      	ldr	r3, [r7, #4]
    ead8:	2b01      	cmp	r3, #1
    eada:	d116      	bne.n	eb0a <_Z41__static_initialization_and_destruction_0ii+0x3e>
    eadc:	683b      	ldr	r3, [r7, #0]
    eade:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eae2:	4293      	cmp	r3, r2
    eae4:	d111      	bne.n	eb0a <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    eae6:	490b      	ldr	r1, [pc, #44]	; (eb14 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    eae8:	480b      	ldr	r0, [pc, #44]	; (eb18 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    eaea:	4b0c      	ldr	r3, [pc, #48]	; (eb1c <_Z41__static_initialization_and_destruction_0ii+0x50>)
    eaec:	4798      	blx	r3
    eaee:	4a0c      	ldr	r2, [pc, #48]	; (eb20 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    eaf0:	490c      	ldr	r1, [pc, #48]	; (eb24 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    eaf2:	4809      	ldr	r0, [pc, #36]	; (eb18 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    eaf4:	4b0c      	ldr	r3, [pc, #48]	; (eb28 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    eaf6:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    eaf8:	490c      	ldr	r1, [pc, #48]	; (eb2c <_Z41__static_initialization_and_destruction_0ii+0x60>)
    eafa:	480d      	ldr	r0, [pc, #52]	; (eb30 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    eafc:	4b07      	ldr	r3, [pc, #28]	; (eb1c <_Z41__static_initialization_and_destruction_0ii+0x50>)
    eafe:	4798      	blx	r3
    eb00:	4a07      	ldr	r2, [pc, #28]	; (eb20 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    eb02:	4908      	ldr	r1, [pc, #32]	; (eb24 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    eb04:	480a      	ldr	r0, [pc, #40]	; (eb30 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    eb06:	4b08      	ldr	r3, [pc, #32]	; (eb28 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    eb08:	4798      	blx	r3
    eb0a:	bf00      	nop
    eb0c:	3708      	adds	r7, #8
    eb0e:	46bd      	mov	sp, r7
    eb10:	bd80      	pop	{r7, pc}
    eb12:	bf00      	nop
    eb14:	20008000 	.word	0x20008000
    eb18:	20001128 	.word	0x20001128
    eb1c:	0000e7d1 	.word	0x0000e7d1
    eb20:	20000000 	.word	0x20000000
    eb24:	0000e80d 	.word	0x0000e80d
    eb28:	000113d5 	.word	0x000113d5
    eb2c:	20007f38 	.word	0x20007f38
    eb30:	20001148 	.word	0x20001148

0000eb34 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    eb34:	b580      	push	{r7, lr}
    eb36:	af00      	add	r7, sp, #0
    eb38:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eb3c:	2001      	movs	r0, #1
    eb3e:	4b01      	ldr	r3, [pc, #4]	; (eb44 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    eb40:	4798      	blx	r3
    eb42:	bd80      	pop	{r7, pc}
    eb44:	0000eacd 	.word	0x0000eacd

0000eb48 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    eb48:	b480      	push	{r7}
    eb4a:	b083      	sub	sp, #12
    eb4c:	af00      	add	r7, sp, #0
    eb4e:	6078      	str	r0, [r7, #4]
    return (void *)0;
    eb50:	2300      	movs	r3, #0
	}
    eb52:	4618      	mov	r0, r3
    eb54:	370c      	adds	r7, #12
    eb56:	46bd      	mov	sp, r7
    eb58:	bc80      	pop	{r7}
    eb5a:	4770      	bx	lr

0000eb5c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    eb5c:	b480      	push	{r7}
    eb5e:	af00      	add	r7, sp, #0
		}
    eb60:	bf00      	nop
    eb62:	46bd      	mov	sp, r7
    eb64:	bc80      	pop	{r7}
    eb66:	4770      	bx	lr

0000eb68 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
    eb68:	4770      	bx	lr

0000eb6a <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
    eb6a:	4770      	bx	lr

0000eb6c <_ZN19CondesatorFan_Class9SetEnableEb>:
}
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
    eb6c:	b510      	push	{r4, lr}
    eb6e:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(2,state);
    eb70:	460a      	mov	r2, r1
    eb72:	2102      	movs	r1, #2
    eb74:	68c0      	ldr	r0, [r0, #12]
    eb76:	4b02      	ldr	r3, [pc, #8]	; (eb80 <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
    eb78:	4798      	blx	r3
    eb7a:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
    eb7c:	bd10      	pop	{r4, pc}
    eb7e:	bf00      	nop
    eb80:	000108c5 	.word	0x000108c5

0000eb84 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
    eb84:	b510      	push	{r4, lr}
    eb86:	4604      	mov	r4, r0
    eb88:	302c      	adds	r0, #44	; 0x2c
    eb8a:	4b03      	ldr	r3, [pc, #12]	; (eb98 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
    eb8c:	4798      	blx	r3
    eb8e:	4620      	mov	r0, r4
    eb90:	4b02      	ldr	r3, [pc, #8]	; (eb9c <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
    eb92:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
    eb94:	4620      	mov	r0, r4
    eb96:	bd10      	pop	{r4, pc}
    eb98:	0000eb6b 	.word	0x0000eb6b
    eb9c:	0000ecf1 	.word	0x0000ecf1

0000eba0 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    eba0:	b570      	push	{r4, r5, r6, lr}
    eba2:	4c05      	ldr	r4, [pc, #20]	; (ebb8 <__tcf_1+0x18>)
    eba4:	4e05      	ldr	r6, [pc, #20]	; (ebbc <__tcf_1+0x1c>)
    eba6:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
    ebaa:	3c1c      	subs	r4, #28
    ebac:	4620      	mov	r0, r4
    ebae:	47b0      	blx	r6
    ebb0:	42ac      	cmp	r4, r5
    ebb2:	d1fa      	bne.n	ebaa <__tcf_1+0xa>
    ebb4:	bd70      	pop	{r4, r5, r6, pc}
    ebb6:	bf00      	nop
    ebb8:	2000122c 	.word	0x2000122c
    ebbc:	00010557 	.word	0x00010557

0000ebc0 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
    ebc0:	b510      	push	{r4, lr}
    ebc2:	4803      	ldr	r0, [pc, #12]	; (ebd0 <__tcf_0+0x10>)
    ebc4:	4c03      	ldr	r4, [pc, #12]	; (ebd4 <__tcf_0+0x14>)
    ebc6:	47a0      	blx	r4
    ebc8:	4803      	ldr	r0, [pc, #12]	; (ebd8 <__tcf_0+0x18>)
    ebca:	47a0      	blx	r4
    ebcc:	bd10      	pop	{r4, pc}
    ebce:	bf00      	nop
    ebd0:	20001258 	.word	0x20001258
    ebd4:	0000ecf1 	.word	0x0000ecf1
    ebd8:	2000122c 	.word	0x2000122c

0000ebdc <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
    ebdc:	b510      	push	{r4, lr}
    ebde:	4604      	mov	r4, r0
    ebe0:	4b0d      	ldr	r3, [pc, #52]	; (ec18 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
    ebe2:	4798      	blx	r3
    ebe4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ebe8:	4b0c      	ldr	r3, [pc, #48]	; (ec1c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
    ebea:	4798      	blx	r3
	i2c=&i2cSharedStatic;
    ebec:	4b0c      	ldr	r3, [pc, #48]	; (ec20 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
    ebee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
    ebf2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
    ebf6:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
    ebfa:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
    ebfc:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
    ec00:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
    ec02:	f503 7298 	add.w	r2, r3, #304	; 0x130
    ec06:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
    ec08:	f8c3 415c 	str.w	r4, [r3, #348]	; 0x15c
	somethingChanged=false;
    ec0c:	2300      	movs	r3, #0
    ec0e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
    ec12:	4620      	mov	r0, r4
    ec14:	bd10      	pop	{r4, pc}
    ec16:	bf00      	nop
    ec18:	0000ecd9 	.word	0x0000ecd9
    ec1c:	0000eb69 	.word	0x0000eb69
    ec20:	20001168 	.word	0x20001168

0000ec24 <_GLOBAL__sub_I_ptrFansClass>:
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
	}
	return 0;
}

EvaporatorAndCondesatorFans_Class  fans;
    ec24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
    ec28:	4c1c      	ldr	r4, [pc, #112]	; (ec9c <_GLOBAL__sub_I_ptrFansClass+0x78>)
    ec2a:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    ec2e:	491c      	ldr	r1, [pc, #112]	; (eca0 <_GLOBAL__sub_I_ptrFansClass+0x7c>)
    ec30:	4628      	mov	r0, r5
    ec32:	4b1c      	ldr	r3, [pc, #112]	; (eca4 <_GLOBAL__sub_I_ptrFansClass+0x80>)
    ec34:	4798      	blx	r3
    ec36:	4f1c      	ldr	r7, [pc, #112]	; (eca8 <_GLOBAL__sub_I_ptrFansClass+0x84>)
    ec38:	463a      	mov	r2, r7
    ec3a:	491c      	ldr	r1, [pc, #112]	; (ecac <_GLOBAL__sub_I_ptrFansClass+0x88>)
    ec3c:	4628      	mov	r0, r5
    ec3e:	4e1c      	ldr	r6, [pc, #112]	; (ecb0 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    ec40:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
    ec42:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    ec46:	4628      	mov	r0, r5
    ec48:	f8df 8088 	ldr.w	r8, [pc, #136]	; ecd4 <_GLOBAL__sub_I_ptrFansClass+0xb0>
    ec4c:	47c0      	blx	r8
    ec4e:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    ec52:	47c0      	blx	r8
    ec54:	463a      	mov	r2, r7
    ec56:	4917      	ldr	r1, [pc, #92]	; (ecb4 <_GLOBAL__sub_I_ptrFansClass+0x90>)
    ec58:	2000      	movs	r0, #0
    ec5a:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
    ec5c:	f504 7898 	add.w	r8, r4, #304	; 0x130
    ec60:	4640      	mov	r0, r8
    ec62:	4b15      	ldr	r3, [pc, #84]	; (ecb8 <_GLOBAL__sub_I_ptrFansClass+0x94>)
    ec64:	4798      	blx	r3
    ec66:	463a      	mov	r2, r7
    ec68:	4914      	ldr	r1, [pc, #80]	; (ecbc <_GLOBAL__sub_I_ptrFansClass+0x98>)
    ec6a:	4640      	mov	r0, r8
    ec6c:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    ec6e:	4e14      	ldr	r6, [pc, #80]	; (ecc0 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
    ec70:	4620      	mov	r0, r4
    ec72:	47b0      	blx	r6
    ec74:	341c      	adds	r4, #28
    ec76:	42a5      	cmp	r5, r4
    ec78:	d1fa      	bne.n	ec70 <_GLOBAL__sub_I_ptrFansClass+0x4c>
    ec7a:	4e0b      	ldr	r6, [pc, #44]	; (eca8 <_GLOBAL__sub_I_ptrFansClass+0x84>)
    ec7c:	4632      	mov	r2, r6
    ec7e:	4911      	ldr	r1, [pc, #68]	; (ecc4 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
    ec80:	2000      	movs	r0, #0
    ec82:	4c0b      	ldr	r4, [pc, #44]	; (ecb0 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    ec84:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
    ec86:	4d10      	ldr	r5, [pc, #64]	; (ecc8 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
    ec88:	4628      	mov	r0, r5
    ec8a:	4b10      	ldr	r3, [pc, #64]	; (eccc <_GLOBAL__sub_I_ptrFansClass+0xa8>)
    ec8c:	4798      	blx	r3
    ec8e:	4632      	mov	r2, r6
    ec90:	490f      	ldr	r1, [pc, #60]	; (ecd0 <_GLOBAL__sub_I_ptrFansClass+0xac>)
    ec92:	4628      	mov	r0, r5
    ec94:	47a0      	blx	r4
    ec96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec9a:	bf00      	nop
    ec9c:	20001168 	.word	0x20001168
    eca0:	20008020 	.word	0x20008020
    eca4:	00010201 	.word	0x00010201
    eca8:	20000000 	.word	0x20000000
    ecac:	0001021d 	.word	0x0001021d
    ecb0:	000113d5 	.word	0x000113d5
    ecb4:	0000ebc1 	.word	0x0000ebc1
    ecb8:	0000eb69 	.word	0x0000eb69
    ecbc:	0000eb6b 	.word	0x0000eb6b
    ecc0:	00010543 	.word	0x00010543
    ecc4:	0000eba1 	.word	0x0000eba1
    ecc8:	200012c8 	.word	0x200012c8
    eccc:	0000ebdd 	.word	0x0000ebdd
    ecd0:	0000eb85 	.word	0x0000eb85
    ecd4:	0000ecd9 	.word	0x0000ecd9

0000ecd8 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
    ecd8:	b510      	push	{r4, lr}
    ecda:	4604      	mov	r4, r0
    ecdc:	4b02      	ldr	r3, [pc, #8]	; (ece8 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
    ecde:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
    ece0:	4b02      	ldr	r3, [pc, #8]	; (ecec <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
    ece2:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
    ece4:	4620      	mov	r0, r4
    ece6:	bd10      	pop	{r4, pc}
    ece8:	0000ed21 	.word	0x0000ed21
    ecec:	20001354 	.word	0x20001354

0000ecf0 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
    ecf0:	b510      	push	{r4, lr}
    ecf2:	4604      	mov	r4, r0
    ecf4:	4b01      	ldr	r3, [pc, #4]	; (ecfc <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
    ecf6:	4798      	blx	r3
{
} //~EvaporatorFan_Class
    ecf8:	4620      	mov	r0, r4
    ecfa:	bd10      	pop	{r4, pc}
    ecfc:	0000ed23 	.word	0x0000ed23

0000ed00 <_ZN19EvaporatorFan_Class9SetEnableEb>:
}
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
    ed00:	b510      	push	{r4, lr}
    ed02:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(1-fanNumber,!state);
    ed04:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ed08:	f1c3 0301 	rsb	r3, r3, #1
    ed0c:	f081 0201 	eor.w	r2, r1, #1
    ed10:	b2d9      	uxtb	r1, r3
    ed12:	68c0      	ldr	r0, [r0, #12]
    ed14:	4b01      	ldr	r3, [pc, #4]	; (ed1c <_ZN19EvaporatorFan_Class9SetEnableEb+0x1c>)
    ed16:	4798      	blx	r3
    ed18:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
    ed1a:	bd10      	pop	{r4, pc}
    ed1c:	000108c5 	.word	0x000108c5

0000ed20 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
    ed20:	4770      	bx	lr

0000ed22 <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
    ed22:	4770      	bx	lr

0000ed24 <_ZL29TimeoutFlapperValveControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController;

static SingleFlapperValve_Class fvStatic(0);

static void TimeoutFlapperValveController(const struct timer_task *const timer_task)
{
    ed24:	b480      	push	{r7}
    ed26:	b083      	sub	sp, #12
    ed28:	af00      	add	r7, sp, #0
    ed2a:	6078      	str	r0, [r7, #4]
//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController->unLockTimeout=true;
    ed2c:	4b04      	ldr	r3, [pc, #16]	; (ed40 <_ZL29TimeoutFlapperValveControllerPK10timer_task+0x1c>)
    ed2e:	681b      	ldr	r3, [r3, #0]
    ed30:	2201      	movs	r2, #1
    ed32:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	
}
    ed36:	bf00      	nop
    ed38:	370c      	adds	r7, #12
    ed3a:	46bd      	mov	sp, r7
    ed3c:	bc80      	pop	{r7}
    ed3e:	4770      	bx	lr
    ed40:	20001358 	.word	0x20001358

0000ed44 <_ZL31TimeoutFlapperValveFullyClossedPK10timer_task>:
static void TimeoutFlapperValveFullyClossed(const struct timer_task *const timer_task)
{
    ed44:	b480      	push	{r7}
    ed46:	b083      	sub	sp, #12
    ed48:	af00      	add	r7, sp, #0
    ed4a:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController->fullClosedTimeout=true;
    ed4c:	4b04      	ldr	r3, [pc, #16]	; (ed60 <_ZL31TimeoutFlapperValveFullyClossedPK10timer_task+0x1c>)
    ed4e:	681b      	ldr	r3, [r3, #0]
    ed50:	2201      	movs	r2, #1
    ed52:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	
}
    ed56:	bf00      	nop
    ed58:	370c      	adds	r7, #12
    ed5a:	46bd      	mov	sp, r7
    ed5c:	bc80      	pop	{r7}
    ed5e:	4770      	bx	lr
    ed60:	20001358 	.word	0x20001358

0000ed64 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
    ed64:	b580      	push	{r7, lr}
    ed66:	b082      	sub	sp, #8
    ed68:	af00      	add	r7, sp, #0
    ed6a:	6078      	str	r0, [r7, #4]
    ed6c:	687b      	ldr	r3, [r7, #4]
    ed6e:	4618      	mov	r0, r3
    ed70:	4b1a      	ldr	r3, [pc, #104]	; (eddc <_ZN22FlapperValveControllerC1Ev+0x78>)
    ed72:	4798      	blx	r3
{
	fv=&fvStatic;
    ed74:	687b      	ldr	r3, [r7, #4]
    ed76:	4a1a      	ldr	r2, [pc, #104]	; (ede0 <_ZN22FlapperValveControllerC1Ev+0x7c>)
    ed78:	679a      	str	r2, [r3, #120]	; 0x78
	ptrFlapperValveController=this;
    ed7a:	4a1a      	ldr	r2, [pc, #104]	; (ede4 <_ZN22FlapperValveControllerC1Ev+0x80>)
    ed7c:	687b      	ldr	r3, [r7, #4]
    ed7e:	6013      	str	r3, [r2, #0]
	doPeriodicTask=false;
    ed80:	687b      	ldr	r3, [r7, #4]
    ed82:	2200      	movs	r2, #0
    ed84:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	isControlling=false;
    ed88:	687b      	ldr	r3, [r7, #4]
    ed8a:	2200      	movs	r2, #0
    ed8c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	gotSetpoint=false;
    ed90:	687b      	ldr	r3, [r7, #4]
    ed92:	2200      	movs	r2, #0
    ed94:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	controllerEnabled=false;
    ed98:	687b      	ldr	r3, [r7, #4]
    ed9a:	2200      	movs	r2, #0
    ed9c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	closing=false;
    eda0:	687b      	ldr	r3, [r7, #4]
    eda2:	2200      	movs	r2, #0
    eda4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUNL_AIR;
    eda8:	687b      	ldr	r3, [r7, #4]
    edaa:	22da      	movs	r2, #218	; 0xda
    edac:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	NBC_Mode=false;
    edb0:	687b      	ldr	r3, [r7, #4]
    edb2:	2200      	movs	r2, #0
    edb4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
	NBC_Activated=false;
    edb8:	687b      	ldr	r3, [r7, #4]
    edba:	2200      	movs	r2, #0
    edbc:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
	standAloneActivated=false;
    edc0:	687b      	ldr	r3, [r7, #4]
    edc2:	2200      	movs	r2, #0
    edc4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	standAloneMode=false;
    edc8:	687b      	ldr	r3, [r7, #4]
    edca:	2200      	movs	r2, #0
    edcc:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	
} //FlapperValveController
    edd0:	687b      	ldr	r3, [r7, #4]
    edd2:	4618      	mov	r0, r3
    edd4:	3708      	adds	r7, #8
    edd6:	46bd      	mov	sp, r7
    edd8:	bd80      	pop	{r7, pc}
    edda:	bf00      	nop
    eddc:	0000f8cd 	.word	0x0000f8cd
    ede0:	2000135c 	.word	0x2000135c
    ede4:	20001358 	.word	0x20001358

0000ede8 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
    ede8:	b580      	push	{r7, lr}
    edea:	b082      	sub	sp, #8
    edec:	af00      	add	r7, sp, #0
    edee:	6078      	str	r0, [r7, #4]
    edf0:	687b      	ldr	r3, [r7, #4]
    edf2:	4618      	mov	r0, r3
    edf4:	4b03      	ldr	r3, [pc, #12]	; (ee04 <_ZN22FlapperValveControllerD1Ev+0x1c>)
    edf6:	4798      	blx	r3
{
} //~FlapperValveController
    edf8:	687b      	ldr	r3, [r7, #4]
    edfa:	4618      	mov	r0, r3
    edfc:	3708      	adds	r7, #8
    edfe:	46bd      	mov	sp, r7
    ee00:	bd80      	pop	{r7, pc}
    ee02:	bf00      	nop
    ee04:	0000f919 	.word	0x0000f919

0000ee08 <_ZN22FlapperValveController14InitControllerEv>:

bool FlapperValveController::InitController(){
    ee08:	b580      	push	{r7, lr}
    ee0a:	b082      	sub	sp, #8
    ee0c:	af00      	add	r7, sp, #0
    ee0e:	6078      	str	r0, [r7, #4]
	fv=&fvStatic;
    ee10:	687b      	ldr	r3, [r7, #4]
    ee12:	4a06      	ldr	r2, [pc, #24]	; (ee2c <_ZN22FlapperValveController14InitControllerEv+0x24>)
    ee14:	679a      	str	r2, [r3, #120]	; 0x78
	return	fv->Init();	
    ee16:	687b      	ldr	r3, [r7, #4]
    ee18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    ee1a:	4618      	mov	r0, r3
    ee1c:	4b04      	ldr	r3, [pc, #16]	; (ee30 <_ZN22FlapperValveController14InitControllerEv+0x28>)
    ee1e:	4798      	blx	r3
    ee20:	4603      	mov	r3, r0
}
    ee22:	4618      	mov	r0, r3
    ee24:	3708      	adds	r7, #8
    ee26:	46bd      	mov	sp, r7
    ee28:	bd80      	pop	{r7, pc}
    ee2a:	bf00      	nop
    ee2c:	2000135c 	.word	0x2000135c
    ee30:	0000f939 	.word	0x0000f939

0000ee34 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	fv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
    ee34:	b580      	push	{r7, lr}
    ee36:	b082      	sub	sp, #8
    ee38:	af00      	add	r7, sp, #0
    ee3a:	6078      	str	r0, [r7, #4]
    ee3c:	460b      	mov	r3, r1
    ee3e:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
    ee40:	687b      	ldr	r3, [r7, #4]
    ee42:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    ee46:	687b      	ldr	r3, [r7, #4]
    ee48:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	direction=fv->ReadActualPosition()>sp;
    ee4c:	687b      	ldr	r3, [r7, #4]
    ee4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    ee50:	4618      	mov	r0, r3
    ee52:	4b0a      	ldr	r3, [pc, #40]	; (ee7c <_ZN22FlapperValveController18CalculateDirectionEh+0x48>)
    ee54:	4798      	blx	r3
    ee56:	4603      	mov	r3, r0
    ee58:	461a      	mov	r2, r3
    ee5a:	78fb      	ldrb	r3, [r7, #3]
    ee5c:	429a      	cmp	r2, r3
    ee5e:	bfcc      	ite	gt
    ee60:	2301      	movgt	r3, #1
    ee62:	2300      	movle	r3, #0
    ee64:	b2da      	uxtb	r2, r3
    ee66:	687b      	ldr	r3, [r7, #4]
    ee68:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return direction;
    ee6c:	687b      	ldr	r3, [r7, #4]
    ee6e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
	
}
    ee72:	4618      	mov	r0, r3
    ee74:	3708      	adds	r7, #8
    ee76:	46bd      	mov	sp, r7
    ee78:	bd80      	pop	{r7, pc}
    ee7a:	bf00      	nop
    ee7c:	0000fc95 	.word	0x0000fc95

0000ee80 <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
    ee80:	b580      	push	{r7, lr}
    ee82:	b082      	sub	sp, #8
    ee84:	af00      	add	r7, sp, #0
    ee86:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
    ee88:	687b      	ldr	r3, [r7, #4]
    ee8a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
    ee8e:	4619      	mov	r1, r3
    ee90:	6878      	ldr	r0, [r7, #4]
    ee92:	4b03      	ldr	r3, [pc, #12]	; (eea0 <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
    ee94:	4798      	blx	r3
    ee96:	4603      	mov	r3, r0
	
}
    ee98:	4618      	mov	r0, r3
    ee9a:	3708      	adds	r7, #8
    ee9c:	46bd      	mov	sp, r7
    ee9e:	bd80      	pop	{r7, pc}
    eea0:	0000ee35 	.word	0x0000ee35

0000eea4 <_ZN22FlapperValveController16StatusHadChangedEv>:
bool	FlapperValveController::StatusHadChanged(){
    eea4:	b480      	push	{r7}
    eea6:	b083      	sub	sp, #12
    eea8:	af00      	add	r7, sp, #0
    eeaa:	6078      	str	r0, [r7, #4]
	return	fv->fv1StatusChanged;
    eeac:	687b      	ldr	r3, [r7, #4]
    eeae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    eeb0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    eeb4:	b2db      	uxtb	r3, r3
}
    eeb6:	4618      	mov	r0, r3
    eeb8:	370c      	adds	r7, #12
    eeba:	46bd      	mov	sp, r7
    eebc:	bc80      	pop	{r7}
    eebe:	4770      	bx	lr

0000eec0 <_ZN22FlapperValveController22StartMovingOnDirectionEv>:

uint8_t FlapperValveController::StartMovingOnDirection(){
    eec0:	b590      	push	{r4, r7, lr}
    eec2:	b083      	sub	sp, #12
    eec4:	af00      	add	r7, sp, #0
    eec6:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
    eec8:	687b      	ldr	r3, [r7, #4]
    eeca:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
    eece:	687b      	ldr	r3, [r7, #4]
    eed0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
//	floatLastPosition=(float)lastPosition;
	if (fv->controlOutputs.niAlcFvMotorEnable)
    eed4:	687b      	ldr	r3, [r7, #4]
    eed6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    eed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    eedc:	2b00      	cmp	r3, #0
    eede:	d008      	beq.n	eef2 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x32>
	{
		fv->SetEnable(false);
    eee0:	687b      	ldr	r3, [r7, #4]
    eee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    eee4:	2100      	movs	r1, #0
    eee6:	4618      	mov	r0, r3
    eee8:	4b0b      	ldr	r3, [pc, #44]	; (ef18 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x58>)
    eeea:	4798      	blx	r3
		delay_ms(10);
    eeec:	200a      	movs	r0, #10
    eeee:	4b0b      	ldr	r3, [pc, #44]	; (ef1c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
    eef0:	4798      	blx	r3
	} 
	else
	{
	}
	fv->SetDirection(CalculateDirection());
    eef2:	687b      	ldr	r3, [r7, #4]
    eef4:	6f9c      	ldr	r4, [r3, #120]	; 0x78
    eef6:	6878      	ldr	r0, [r7, #4]
    eef8:	4b09      	ldr	r3, [pc, #36]	; (ef20 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
    eefa:	4798      	blx	r3
    eefc:	4603      	mov	r3, r0
    eefe:	4619      	mov	r1, r3
    ef00:	4620      	mov	r0, r4
    ef02:	4b08      	ldr	r3, [pc, #32]	; (ef24 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
    ef04:	4798      	blx	r3
	StartMotor();
    ef06:	6878      	ldr	r0, [r7, #4]
    ef08:	4b07      	ldr	r3, [pc, #28]	; (ef28 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
    ef0a:	4798      	blx	r3
	return 0;
    ef0c:	2300      	movs	r3, #0
}
    ef0e:	4618      	mov	r0, r3
    ef10:	370c      	adds	r7, #12
    ef12:	46bd      	mov	sp, r7
    ef14:	bd90      	pop	{r4, r7, pc}
    ef16:	bf00      	nop
    ef18:	0000faed 	.word	0x0000faed
    ef1c:	00002561 	.word	0x00002561
    ef20:	0000ee81 	.word	0x0000ee81
    ef24:	0000fb6d 	.word	0x0000fb6d
    ef28:	0000f501 	.word	0x0000f501

0000ef2c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
    ef2c:	b580      	push	{r7, lr}
    ef2e:	b082      	sub	sp, #8
    ef30:	af00      	add	r7, sp, #0
    ef32:	6078      	str	r0, [r7, #4]
	UpdateFlapperValveData();
    ef34:	6878      	ldr	r0, [r7, #4]
    ef36:	4b15      	ldr	r3, [pc, #84]	; (ef8c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
    ef38:	4798      	blx	r3
	if (IsNBCMode())
    ef3a:	6878      	ldr	r0, [r7, #4]
    ef3c:	4b14      	ldr	r3, [pc, #80]	; (ef90 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
    ef3e:	4798      	blx	r3
    ef40:	4603      	mov	r3, r0
    ef42:	2b00      	cmp	r3, #0
    ef44:	d003      	beq.n	ef4e <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x22>
	{
		CommandNBC_Mode();
    ef46:	6878      	ldr	r0, [r7, #4]
    ef48:	4b12      	ldr	r3, [pc, #72]	; (ef94 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x68>)
    ef4a:	4798      	blx	r3
    ef4c:	e013      	b.n	ef76 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x4a>
	} 
	else
	{
		if (NBC_Activated)
    ef4e:	687b      	ldr	r3, [r7, #4]
    ef50:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    ef54:	2b00      	cmp	r3, #0
    ef56:	d00b      	beq.n	ef70 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    ef58:	687b      	ldr	r3, [r7, #4]
    ef5a:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
    ef5e:	4619      	mov	r1, r3
    ef60:	6878      	ldr	r0, [r7, #4]
    ef62:	4b0d      	ldr	r3, [pc, #52]	; (ef98 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x6c>)
    ef64:	4798      	blx	r3
			NBC_Activated=false;
    ef66:	687b      	ldr	r3, [r7, #4]
    ef68:	2200      	movs	r2, #0
    ef6a:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    ef6e:	e002      	b.n	ef76 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x4a>
		} 
		else
		{
			ControlMovement();
    ef70:	6878      	ldr	r0, [r7, #4]
    ef72:	4b0a      	ldr	r3, [pc, #40]	; (ef9c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x70>)
    ef74:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
    ef76:	687b      	ldr	r3, [r7, #4]
    ef78:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
    ef7c:	f083 0301 	eor.w	r3, r3, #1
    ef80:	b2db      	uxtb	r3, r3
}
    ef82:	4618      	mov	r0, r3
    ef84:	3708      	adds	r7, #8
    ef86:	46bd      	mov	sp, r7
    ef88:	bd80      	pop	{r7, pc}
    ef8a:	bf00      	nop
    ef8c:	0000f759 	.word	0x0000f759
    ef90:	0000f359 	.word	0x0000f359
    ef94:	0000f2f9 	.word	0x0000f2f9
    ef98:	0000f591 	.word	0x0000f591
    ef9c:	0000f06d 	.word	0x0000f06d

0000efa0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
    efa0:	b580      	push	{r7, lr}
    efa2:	b082      	sub	sp, #8
    efa4:	af00      	add	r7, sp, #0
    efa6:	6078      	str	r0, [r7, #4]
	memory.ReadParameters(parameters);
    efa8:	687b      	ldr	r3, [r7, #4]
    efaa:	33ba      	adds	r3, #186	; 0xba
    efac:	4619      	mov	r1, r3
    efae:	4829      	ldr	r0, [pc, #164]	; (f054 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    efb0:	4b29      	ldr	r3, [pc, #164]	; (f058 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
    efb2:	4798      	blx	r3
	UpdateFlapperValveData();
    efb4:	6878      	ldr	r0, [r7, #4]
    efb6:	4b29      	ldr	r3, [pc, #164]	; (f05c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xbc>)
    efb8:	4798      	blx	r3
	if (dataStruct.controlOutputs.iAlcFvStandAloneOut)
    efba:	687b      	ldr	r3, [r7, #4]
    efbc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
    efc0:	2b00      	cmp	r3, #0
    efc2:	d02d      	beq.n	f020 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x80>
	{	
		if (IsNBCMode())
    efc4:	6878      	ldr	r0, [r7, #4]
    efc6:	4b26      	ldr	r3, [pc, #152]	; (f060 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xc0>)
    efc8:	4798      	blx	r3
    efca:	4603      	mov	r3, r0
    efcc:	2b00      	cmp	r3, #0
    efce:	d003      	beq.n	efd8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x38>
		{
			ControlMovement_AND_NBC();
    efd0:	6878      	ldr	r0, [r7, #4]
    efd2:	4b24      	ldr	r3, [pc, #144]	; (f064 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xc4>)
    efd4:	4798      	blx	r3
    efd6:	e037      	b.n	f048 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa8>
		} 
		else
		{
			standAloneMode=true;
    efd8:	687b      	ldr	r3, [r7, #4]
    efda:	2201      	movs	r2, #1
    efdc:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
			if (standAloneActivated)
    efe0:	687b      	ldr	r3, [r7, #4]
    efe2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    efe6:	2b00      	cmp	r3, #0
    efe8:	d003      	beq.n	eff2 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x52>
			{
				ControlMovement_AND_NBC();
    efea:	6878      	ldr	r0, [r7, #4]
    efec:	4b1d      	ldr	r3, [pc, #116]	; (f064 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xc4>)
    efee:	4798      	blx	r3
    eff0:	e02a      	b.n	f048 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa8>
			}
			else
			{
				
				if (currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition)
    eff2:	687b      	ldr	r3, [r7, #4]
    eff4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
    eff8:	461a      	mov	r2, r3
    effa:	687b      	ldr	r3, [r7, #4]
    effc:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    f000:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    f004:	429a      	cmp	r2, r3
    f006:	dd1f      	ble.n	f048 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa8>
				{
					StartControlling(parameters.flapperValveStandAloneMinimumPosition);
    f008:	687b      	ldr	r3, [r7, #4]
    f00a:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    f00e:	4619      	mov	r1, r3
    f010:	6878      	ldr	r0, [r7, #4]
    f012:	4b15      	ldr	r3, [pc, #84]	; (f068 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xc8>)
    f014:	4798      	blx	r3
					standAloneActivated=true;
    f016:	687b      	ldr	r3, [r7, #4]
    f018:	2201      	movs	r2, #1
    f01a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    f01e:	e013      	b.n	f048 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa8>
		
		
	} 
	else
	{
		standAloneMode=false;
    f020:	687b      	ldr	r3, [r7, #4]
    f022:	2200      	movs	r2, #0
    f024:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		if (standAloneActivated)
    f028:	687b      	ldr	r3, [r7, #4]
    f02a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    f02e:	2b00      	cmp	r3, #0
    f030:	d007      	beq.n	f042 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa2>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			ControlMovement_AND_NBC();
    f032:	6878      	ldr	r0, [r7, #4]
    f034:	4b0b      	ldr	r3, [pc, #44]	; (f064 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xc4>)
    f036:	4798      	blx	r3
			standAloneActivated=false;
    f038:	687b      	ldr	r3, [r7, #4]
    f03a:	2200      	movs	r2, #0
    f03c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    f040:	e002      	b.n	f048 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa8>
			
		} 
		else
		{
			ControlMovement_AND_NBC();
    f042:	6878      	ldr	r0, [r7, #4]
    f044:	4b07      	ldr	r3, [pc, #28]	; (f064 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xc4>)
    f046:	4798      	blx	r3
		}
		
	}
}
    f048:	bf00      	nop
    f04a:	4618      	mov	r0, r3
    f04c:	3708      	adds	r7, #8
    f04e:	46bd      	mov	sp, r7
    f050:	bd80      	pop	{r7, pc}
    f052:	bf00      	nop
    f054:	200025f8 	.word	0x200025f8
    f058:	0000ffa5 	.word	0x0000ffa5
    f05c:	0000f759 	.word	0x0000f759
    f060:	0000f359 	.word	0x0000f359
    f064:	0000ef2d 	.word	0x0000ef2d
    f068:	0000f591 	.word	0x0000f591

0000f06c <_ZN22FlapperValveController15ControlMovementEv>:


uint8_t FlapperValveController::ControlMovement(){
    f06c:	b590      	push	{r4, r7, lr}
    f06e:	b083      	sub	sp, #12
    f070:	af00      	add	r7, sp, #0
    f072:	6078      	str	r0, [r7, #4]
	if (isControlling)
    f074:	687b      	ldr	r3, [r7, #4]
    f076:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
    f07a:	2b00      	cmp	r3, #0
    f07c:	f000 8121 	beq.w	f2c2 <_ZN22FlapperValveController15ControlMovementEv+0x256>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
    f080:	687b      	ldr	r3, [r7, #4]
    f082:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
    f086:	687b      	ldr	r3, [r7, #4]
    f088:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    f08c:	4313      	orrs	r3, r2
    f08e:	b2db      	uxtb	r3, r3
    f090:	461a      	mov	r2, r3
    f092:	687b      	ldr	r3, [r7, #4]
    f094:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f098:	4013      	ands	r3, r2
    f09a:	687a      	ldr	r2, [r7, #4]
    f09c:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
    f0a0:	b2d2      	uxtb	r2, r2
    f0a2:	4013      	ands	r3, r2
    f0a4:	2b00      	cmp	r3, #0
    f0a6:	bf14      	ite	ne
    f0a8:	2301      	movne	r3, #1
    f0aa:	2300      	moveq	r3, #0
    f0ac:	b2db      	uxtb	r3, r3
    f0ae:	2b00      	cmp	r3, #0
    f0b0:	d003      	beq.n	f0ba <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
    f0b2:	6878      	ldr	r0, [r7, #4]
    f0b4:	4b85      	ldr	r3, [pc, #532]	; (f2cc <_ZN22FlapperValveController15ControlMovementEv+0x260>)
    f0b6:	4798      	blx	r3
    f0b8:	e103      	b.n	f2c2 <_ZN22FlapperValveController15ControlMovementEv+0x256>

		} 
		else
		{
			
			currentPosition=fv->ReadActualPosition();
    f0ba:	687b      	ldr	r3, [r7, #4]
    f0bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f0be:	4618      	mov	r0, r3
    f0c0:	4b83      	ldr	r3, [pc, #524]	; (f2d0 <_ZN22FlapperValveController15ControlMovementEv+0x264>)
    f0c2:	4798      	blx	r3
    f0c4:	4603      	mov	r3, r0
    f0c6:	461a      	mov	r2, r3
    f0c8:	687b      	ldr	r3, [r7, #4]
    f0ca:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			if ((((setpoint<2)&(currentPosition<2))|((setpoint>250)&(currentPosition>245)))&((!closing)&(isMoving)))
    f0ce:	687b      	ldr	r3, [r7, #4]
    f0d0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
    f0d4:	2b01      	cmp	r3, #1
    f0d6:	bfd4      	ite	le
    f0d8:	2301      	movle	r3, #1
    f0da:	2300      	movgt	r3, #0
    f0dc:	b2da      	uxtb	r2, r3
    f0de:	687b      	ldr	r3, [r7, #4]
    f0e0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
    f0e4:	2b01      	cmp	r3, #1
    f0e6:	bfd4      	ite	le
    f0e8:	2301      	movle	r3, #1
    f0ea:	2300      	movgt	r3, #0
    f0ec:	b2db      	uxtb	r3, r3
    f0ee:	4013      	ands	r3, r2
    f0f0:	b2da      	uxtb	r2, r3
    f0f2:	687b      	ldr	r3, [r7, #4]
    f0f4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
    f0f8:	2bfa      	cmp	r3, #250	; 0xfa
    f0fa:	bfcc      	ite	gt
    f0fc:	2301      	movgt	r3, #1
    f0fe:	2300      	movle	r3, #0
    f100:	b2d9      	uxtb	r1, r3
    f102:	687b      	ldr	r3, [r7, #4]
    f104:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
    f108:	2bf5      	cmp	r3, #245	; 0xf5
    f10a:	bfcc      	ite	gt
    f10c:	2301      	movgt	r3, #1
    f10e:	2300      	movle	r3, #0
    f110:	b2db      	uxtb	r3, r3
    f112:	400b      	ands	r3, r1
    f114:	b2db      	uxtb	r3, r3
    f116:	4313      	orrs	r3, r2
    f118:	b2db      	uxtb	r3, r3
    f11a:	461a      	mov	r2, r3
    f11c:	687b      	ldr	r3, [r7, #4]
    f11e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f122:	f083 0301 	eor.w	r3, r3, #1
    f126:	b2db      	uxtb	r3, r3
    f128:	4619      	mov	r1, r3
    f12a:	687b      	ldr	r3, [r7, #4]
    f12c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    f130:	b2db      	uxtb	r3, r3
    f132:	400b      	ands	r3, r1
    f134:	4013      	ands	r3, r2
    f136:	2b00      	cmp	r3, #0
    f138:	bf14      	ite	ne
    f13a:	2301      	movne	r3, #1
    f13c:	2300      	moveq	r3, #0
    f13e:	b2db      	uxtb	r3, r3
    f140:	2b00      	cmp	r3, #0
    f142:	d014      	beq.n	f16e <_ZN22FlapperValveController15ControlMovementEv+0x102>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveFullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    f144:	22c8      	movs	r2, #200	; 0xc8
    f146:	4963      	ldr	r1, [pc, #396]	; (f2d4 <_ZN22FlapperValveController15ControlMovementEv+0x268>)
    f148:	4863      	ldr	r0, [pc, #396]	; (f2d8 <_ZN22FlapperValveController15ControlMovementEv+0x26c>)
    f14a:	4b64      	ldr	r3, [pc, #400]	; (f2dc <_ZN22FlapperValveController15ControlMovementEv+0x270>)
    f14c:	4798      	blx	r3
				fullClosedTimeout=false;
    f14e:	687b      	ldr	r3, [r7, #4]
    f150:	2200      	movs	r2, #0
    f152:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
				gotSetpoint=false;
    f156:	687b      	ldr	r3, [r7, #4]
    f158:	2200      	movs	r2, #0
    f15a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				closing=true;
    f15e:	687b      	ldr	r3, [r7, #4]
    f160:	2201      	movs	r2, #1
    f162:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
				unLockTimeout=true;
    f166:	687b      	ldr	r3, [r7, #4]
    f168:	2201      	movs	r2, #1
    f16a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			}
			//floatCurrentPosition=(float)currentPosition;
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
    f16e:	687b      	ldr	r3, [r7, #4]
    f170:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
    f174:	461a      	mov	r2, r3
    f176:	687b      	ldr	r3, [r7, #4]
    f178:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
    f17c:	1ad3      	subs	r3, r2, r3
    f17e:	2b00      	cmp	r3, #0
    f180:	bfb8      	it	lt
    f182:	425b      	neglt	r3, r3
    f184:	687a      	ldr	r2, [r7, #4]
    f186:	f892 2095 	ldrb.w	r2, [r2, #149]	; 0x95
    f18a:	4293      	cmp	r3, r2
    f18c:	bfcc      	ite	gt
    f18e:	2301      	movgt	r3, #1
    f190:	2300      	movle	r3, #0
    f192:	b2db      	uxtb	r3, r3
    f194:	461a      	mov	r2, r3
    f196:	687b      	ldr	r3, [r7, #4]
    f198:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f19c:	4313      	orrs	r3, r2
    f19e:	2b00      	cmp	r3, #0
    f1a0:	d079      	beq.n	f296 <_ZN22FlapperValveController15ControlMovementEv+0x22a>
			{
				if (isMoving)
    f1a2:	687b      	ldr	r3, [r7, #4]
    f1a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    f1a8:	b2db      	uxtb	r3, r3
    f1aa:	2b00      	cmp	r3, #0
    f1ac:	d04b      	beq.n	f246 <_ZN22FlapperValveController15ControlMovementEv+0x1da>
				{
					if (closing)
    f1ae:	687b      	ldr	r3, [r7, #4]
    f1b0:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f1b4:	2b00      	cmp	r3, #0
    f1b6:	d00e      	beq.n	f1d6 <_ZN22FlapperValveController15ControlMovementEv+0x16a>
					{
						if (keepControlling)
    f1b8:	687b      	ldr	r3, [r7, #4]
    f1ba:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
    f1be:	2b00      	cmp	r3, #0
    f1c0:	d054      	beq.n	f26c <_ZN22FlapperValveController15ControlMovementEv+0x200>
						{
							if (fullClosedTimeout)
    f1c2:	687b      	ldr	r3, [r7, #4]
    f1c4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
    f1c8:	b2db      	uxtb	r3, r3
    f1ca:	2b00      	cmp	r3, #0
    f1cc:	d04e      	beq.n	f26c <_ZN22FlapperValveController15ControlMovementEv+0x200>
							{
								StopValveAtLimit();
    f1ce:	6878      	ldr	r0, [r7, #4]
    f1d0:	4b3e      	ldr	r3, [pc, #248]	; (f2cc <_ZN22FlapperValveController15ControlMovementEv+0x260>)
    f1d2:	4798      	blx	r3
    f1d4:	e04a      	b.n	f26c <_ZN22FlapperValveController15ControlMovementEv+0x200>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
    f1d6:	687b      	ldr	r3, [r7, #4]
    f1d8:	f893 40a9 	ldrb.w	r4, [r3, #169]	; 0xa9
    f1dc:	6878      	ldr	r0, [r7, #4]
    f1de:	4b40      	ldr	r3, [pc, #256]	; (f2e0 <_ZN22FlapperValveController15ControlMovementEv+0x274>)
    f1e0:	4798      	blx	r3
    f1e2:	4603      	mov	r3, r0
    f1e4:	429c      	cmp	r4, r3
    f1e6:	bf14      	ite	ne
    f1e8:	2301      	movne	r3, #1
    f1ea:	2300      	moveq	r3, #0
    f1ec:	b2db      	uxtb	r3, r3
    f1ee:	2b00      	cmp	r3, #0
    f1f0:	d00b      	beq.n	f20a <_ZN22FlapperValveController15ControlMovementEv+0x19e>
						{
							StopMotor();
    f1f2:	6878      	ldr	r0, [r7, #4]
    f1f4:	4b3b      	ldr	r3, [pc, #236]	; (f2e4 <_ZN22FlapperValveController15ControlMovementEv+0x278>)
    f1f6:	4798      	blx	r3
							hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
    f1f8:	493b      	ldr	r1, [pc, #236]	; (f2e8 <_ZN22FlapperValveController15ControlMovementEv+0x27c>)
    f1fa:	4837      	ldr	r0, [pc, #220]	; (f2d8 <_ZN22FlapperValveController15ControlMovementEv+0x26c>)
    f1fc:	4b3b      	ldr	r3, [pc, #236]	; (f2ec <_ZN22FlapperValveController15ControlMovementEv+0x280>)
    f1fe:	4798      	blx	r3
							keepControlling=true;
    f200:	687b      	ldr	r3, [r7, #4]
    f202:	2201      	movs	r2, #1
    f204:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    f208:	e030      	b.n	f26c <_ZN22FlapperValveController15ControlMovementEv+0x200>
						}
						else
						{
							if (timeoutFlapperValveController)
    f20a:	687b      	ldr	r3, [r7, #4]
    f20c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    f210:	b2db      	uxtb	r3, r3
    f212:	2b00      	cmp	r3, #0
    f214:	d003      	beq.n	f21e <_ZN22FlapperValveController15ControlMovementEv+0x1b2>
							{
								StopMotor();
    f216:	6878      	ldr	r0, [r7, #4]
    f218:	4b32      	ldr	r3, [pc, #200]	; (f2e4 <_ZN22FlapperValveController15ControlMovementEv+0x278>)
    f21a:	4798      	blx	r3
    f21c:	e026      	b.n	f26c <_ZN22FlapperValveController15ControlMovementEv+0x200>
								
							}
							else
							{
								if (keepControlling)
    f21e:	687b      	ldr	r3, [r7, #4]
    f220:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
    f224:	2b00      	cmp	r3, #0
    f226:	d021      	beq.n	f26c <_ZN22FlapperValveController15ControlMovementEv+0x200>
								{
									if (timeoutKeepControlling)
    f228:	687b      	ldr	r3, [r7, #4]
    f22a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    f22e:	b2db      	uxtb	r3, r3
    f230:	2b00      	cmp	r3, #0
    f232:	d003      	beq.n	f23c <_ZN22FlapperValveController15ControlMovementEv+0x1d0>
									{
										StopMotor();
    f234:	6878      	ldr	r0, [r7, #4]
    f236:	4b2b      	ldr	r3, [pc, #172]	; (f2e4 <_ZN22FlapperValveController15ControlMovementEv+0x278>)
    f238:	4798      	blx	r3
    f23a:	e017      	b.n	f26c <_ZN22FlapperValveController15ControlMovementEv+0x200>
									}
									else
									{
										KeepControlling();
    f23c:	2100      	movs	r1, #0
    f23e:	6878      	ldr	r0, [r7, #4]
    f240:	4b2b      	ldr	r3, [pc, #172]	; (f2f0 <_ZN22FlapperValveController15ControlMovementEv+0x284>)
    f242:	4798      	blx	r3
    f244:	e012      	b.n	f26c <_ZN22FlapperValveController15ControlMovementEv+0x200>
					}
					
				}
				else
				{
					if (keepControlling)
    f246:	687b      	ldr	r3, [r7, #4]
    f248:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
    f24c:	2b00      	cmp	r3, #0
    f24e:	d00d      	beq.n	f26c <_ZN22FlapperValveController15ControlMovementEv+0x200>
					{
						if (timeoutKeepControlling)
    f250:	687b      	ldr	r3, [r7, #4]
    f252:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    f256:	b2db      	uxtb	r3, r3
    f258:	2b00      	cmp	r3, #0
    f25a:	d003      	beq.n	f264 <_ZN22FlapperValveController15ControlMovementEv+0x1f8>
						{
							StopValveinBetween();
    f25c:	6878      	ldr	r0, [r7, #4]
    f25e:	4b25      	ldr	r3, [pc, #148]	; (f2f4 <_ZN22FlapperValveController15ControlMovementEv+0x288>)
    f260:	4798      	blx	r3
    f262:	e003      	b.n	f26c <_ZN22FlapperValveController15ControlMovementEv+0x200>
						}
						else
						{
							KeepControlling();
    f264:	2100      	movs	r1, #0
    f266:	6878      	ldr	r0, [r7, #4]
    f268:	4b21      	ldr	r3, [pc, #132]	; (f2f0 <_ZN22FlapperValveController15ControlMovementEv+0x284>)
    f26a:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
    f26c:	687b      	ldr	r3, [r7, #4]
    f26e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
    f272:	461a      	mov	r2, r3
    f274:	687b      	ldr	r3, [r7, #4]
    f276:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
    f27a:	1ad3      	subs	r3, r2, r3
    f27c:	2b00      	cmp	r3, #0
    f27e:	bfb8      	it	lt
    f280:	425b      	neglt	r3, r3
    f282:	687a      	ldr	r2, [r7, #4]
    f284:	f892 2095 	ldrb.w	r2, [r2, #149]	; 0x95
    f288:	4293      	cmp	r3, r2
    f28a:	dd1a      	ble.n	f2c2 <_ZN22FlapperValveController15ControlMovementEv+0x256>
				{
					gotSetpoint=false;
    f28c:	687b      	ldr	r3, [r7, #4]
    f28e:	2200      	movs	r2, #0
    f290:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    f294:	e015      	b.n	f2c2 <_ZN22FlapperValveController15ControlMovementEv+0x256>
				
				
			}
			else
			{
				if (closing)
    f296:	687b      	ldr	r3, [r7, #4]
    f298:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f29c:	2b00      	cmp	r3, #0
    f29e:	d009      	beq.n	f2b4 <_ZN22FlapperValveController15ControlMovementEv+0x248>
				{
					if (fullClosedTimeout)
    f2a0:	687b      	ldr	r3, [r7, #4]
    f2a2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
    f2a6:	b2db      	uxtb	r3, r3
    f2a8:	2b00      	cmp	r3, #0
    f2aa:	d00a      	beq.n	f2c2 <_ZN22FlapperValveController15ControlMovementEv+0x256>
					{
						StopValveAtLimit();
    f2ac:	6878      	ldr	r0, [r7, #4]
    f2ae:	4b07      	ldr	r3, [pc, #28]	; (f2cc <_ZN22FlapperValveController15ControlMovementEv+0x260>)
    f2b0:	4798      	blx	r3
    f2b2:	e006      	b.n	f2c2 <_ZN22FlapperValveController15ControlMovementEv+0x256>
					{
					}
				} 
				else
				{
					StopValveinBetween();
    f2b4:	6878      	ldr	r0, [r7, #4]
    f2b6:	4b0f      	ldr	r3, [pc, #60]	; (f2f4 <_ZN22FlapperValveController15ControlMovementEv+0x288>)
    f2b8:	4798      	blx	r3
					gotSetpoint=true;
    f2ba:	687b      	ldr	r3, [r7, #4]
    f2bc:	2201      	movs	r2, #1
    f2be:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		
	} 
	else
	{
	}
	return 0;
    f2c2:	2300      	movs	r3, #0
	
}
    f2c4:	4618      	mov	r0, r3
    f2c6:	370c      	adds	r7, #12
    f2c8:	46bd      	mov	sp, r7
    f2ca:	bd90      	pop	{r4, r7, pc}
    f2cc:	0000f3bd 	.word	0x0000f3bd
    f2d0:	0000fc95 	.word	0x0000fc95
    f2d4:	0000ed45 	.word	0x0000ed45
    f2d8:	20001018 	.word	0x20001018
    f2dc:	0000dce9 	.word	0x0000dce9
    f2e0:	0000ee81 	.word	0x0000ee81
    f2e4:	0000f391 	.word	0x0000f391
    f2e8:	0000ed25 	.word	0x0000ed25
    f2ec:	0000dc91 	.word	0x0000dc91
    f2f0:	0000f721 	.word	0x0000f721
    f2f4:	0000f431 	.word	0x0000f431

0000f2f8 <_ZN22FlapperValveController15CommandNBC_ModeEv>:
uint8_t FlapperValveController::CommandNBC_Mode(void){
    f2f8:	b580      	push	{r7, lr}
    f2fa:	b082      	sub	sp, #8
    f2fc:	af00      	add	r7, sp, #0
    f2fe:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
    f300:	687b      	ldr	r3, [r7, #4]
    f302:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    f306:	2b00      	cmp	r3, #0
    f308:	d014      	beq.n	f334 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
    f30a:	687b      	ldr	r3, [r7, #4]
    f30c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
    f310:	2b00      	cmp	r3, #0
    f312:	d003      	beq.n	f31c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
    f314:	6878      	ldr	r0, [r7, #4]
    f316:	4b0e      	ldr	r3, [pc, #56]	; (f350 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
    f318:	4798      	blx	r3
    f31a:	e013      	b.n	f344 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    f31c:	687b      	ldr	r3, [r7, #4]
    f31e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
    f322:	4619      	mov	r1, r3
    f324:	6878      	ldr	r0, [r7, #4]
    f326:	4b0b      	ldr	r3, [pc, #44]	; (f354 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    f328:	4798      	blx	r3
			NBC_Activated=false;
    f32a:	687b      	ldr	r3, [r7, #4]
    f32c:	2200      	movs	r2, #0
    f32e:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    f332:	e007      	b.n	f344 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
    f334:	21ff      	movs	r1, #255	; 0xff
    f336:	6878      	ldr	r0, [r7, #4]
    f338:	4b06      	ldr	r3, [pc, #24]	; (f354 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    f33a:	4798      	blx	r3
			NBC_Activated=true;
    f33c:	687b      	ldr	r3, [r7, #4]
    f33e:	2201      	movs	r2, #1
    f340:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
	}

	return 0;
    f344:	2300      	movs	r3, #0
	
}
    f346:	4618      	mov	r0, r3
    f348:	3708      	adds	r7, #8
    f34a:	46bd      	mov	sp, r7
    f34c:	bd80      	pop	{r7, pc}
    f34e:	bf00      	nop
    f350:	0000f06d 	.word	0x0000f06d
    f354:	0000f591 	.word	0x0000f591

0000f358 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
    f358:	b480      	push	{r7}
    f35a:	b083      	sub	sp, #12
    f35c:	af00      	add	r7, sp, #0
    f35e:	6078      	str	r0, [r7, #4]
	NBC_Mode=(dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1]);
    f360:	687b      	ldr	r3, [r7, #4]
    f362:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    f366:	461a      	mov	r2, r3
    f368:	687b      	ldr	r3, [r7, #4]
    f36a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
    f36e:	4013      	ands	r3, r2
    f370:	2b00      	cmp	r3, #0
    f372:	bf14      	ite	ne
    f374:	2301      	movne	r3, #1
    f376:	2300      	moveq	r3, #0
    f378:	b2da      	uxtb	r2, r3
    f37a:	687b      	ldr	r3, [r7, #4]
    f37c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad

	return NBC_Mode;
    f380:	687b      	ldr	r3, [r7, #4]
    f382:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
}
    f386:	4618      	mov	r0, r3
    f388:	370c      	adds	r7, #12
    f38a:	46bd      	mov	sp, r7
    f38c:	bc80      	pop	{r7}
    f38e:	4770      	bx	lr

0000f390 <_ZN22FlapperValveController9StopMotorEv>:


uint8_t	FlapperValveController::StopMotor(){
    f390:	b580      	push	{r7, lr}
    f392:	b082      	sub	sp, #8
    f394:	af00      	add	r7, sp, #0
    f396:	6078      	str	r0, [r7, #4]
	fv->SetEnable(false);
    f398:	687b      	ldr	r3, [r7, #4]
    f39a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f39c:	2100      	movs	r1, #0
    f39e:	4618      	mov	r0, r3
    f3a0:	4b05      	ldr	r3, [pc, #20]	; (f3b8 <_ZN22FlapperValveController9StopMotorEv+0x28>)
    f3a2:	4798      	blx	r3
	isMoving=false;
    f3a4:	687b      	ldr	r3, [r7, #4]
    f3a6:	2200      	movs	r2, #0
    f3a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	
	return 0;
    f3ac:	2300      	movs	r3, #0
}
    f3ae:	4618      	mov	r0, r3
    f3b0:	3708      	adds	r7, #8
    f3b2:	46bd      	mov	sp, r7
    f3b4:	bd80      	pop	{r7, pc}
    f3b6:	bf00      	nop
    f3b8:	0000faed 	.word	0x0000faed

0000f3bc <_ZN22FlapperValveController16StopValveAtLimitEv>:
void	FlapperValveController::StopValveAtLimit(void){
    f3bc:	b580      	push	{r7, lr}
    f3be:	b082      	sub	sp, #8
    f3c0:	af00      	add	r7, sp, #0
    f3c2:	6078      	str	r0, [r7, #4]
		if (closing)
    f3c4:	687b      	ldr	r3, [r7, #4]
    f3c6:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f3ca:	2b00      	cmp	r3, #0
    f3cc:	d003      	beq.n	f3d6 <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
    f3ce:	687b      	ldr	r3, [r7, #4]
    f3d0:	2200      	movs	r2, #0
    f3d2:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
	
		StopMotor();
    f3d6:	6878      	ldr	r0, [r7, #4]
    f3d8:	4b10      	ldr	r3, [pc, #64]	; (f41c <_ZN22FlapperValveController16StopValveAtLimitEv+0x60>)
    f3da:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
    f3dc:	4910      	ldr	r1, [pc, #64]	; (f420 <_ZN22FlapperValveController16StopValveAtLimitEv+0x64>)
    f3de:	4811      	ldr	r0, [pc, #68]	; (f424 <_ZN22FlapperValveController16StopValveAtLimitEv+0x68>)
    f3e0:	4b11      	ldr	r3, [pc, #68]	; (f428 <_ZN22FlapperValveController16StopValveAtLimitEv+0x6c>)
    f3e2:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveFullyClossed));
    f3e4:	4911      	ldr	r1, [pc, #68]	; (f42c <_ZN22FlapperValveController16StopValveAtLimitEv+0x70>)
    f3e6:	480f      	ldr	r0, [pc, #60]	; (f424 <_ZN22FlapperValveController16StopValveAtLimitEv+0x68>)
    f3e8:	4b0f      	ldr	r3, [pc, #60]	; (f428 <_ZN22FlapperValveController16StopValveAtLimitEv+0x6c>)
    f3ea:	4798      	blx	r3
		timeoutFlapperValveController=false;
    f3ec:	687b      	ldr	r3, [r7, #4]
    f3ee:	2200      	movs	r2, #0
    f3f0:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
    f3f4:	687b      	ldr	r3, [r7, #4]
    f3f6:	2200      	movs	r2, #0
    f3f8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		unLockTimeout=false;
    f3fc:	687b      	ldr	r3, [r7, #4]
    f3fe:	2200      	movs	r2, #0
    f400:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		paused=false;
    f404:	687b      	ldr	r3, [r7, #4]
    f406:	2200      	movs	r2, #0
    f408:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		keepControlling=false;
    f40c:	687b      	ldr	r3, [r7, #4]
    f40e:	2200      	movs	r2, #0
    f410:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
}
    f414:	bf00      	nop
    f416:	3708      	adds	r7, #8
    f418:	46bd      	mov	sp, r7
    f41a:	bd80      	pop	{r7, pc}
    f41c:	0000f391 	.word	0x0000f391
    f420:	0000ed25 	.word	0x0000ed25
    f424:	20001018 	.word	0x20001018
    f428:	0000dc91 	.word	0x0000dc91
    f42c:	0000ed45 	.word	0x0000ed45

0000f430 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
    f430:	b580      	push	{r7, lr}
    f432:	b082      	sub	sp, #8
    f434:	af00      	add	r7, sp, #0
    f436:	6078      	str	r0, [r7, #4]
		StopMotor();
    f438:	6878      	ldr	r0, [r7, #4]
    f43a:	4b0d      	ldr	r3, [pc, #52]	; (f470 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
    f43c:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
    f43e:	490d      	ldr	r1, [pc, #52]	; (f474 <_ZN22FlapperValveController18StopValveinBetweenEv+0x44>)
    f440:	480d      	ldr	r0, [pc, #52]	; (f478 <_ZN22FlapperValveController18StopValveinBetweenEv+0x48>)
    f442:	4b0e      	ldr	r3, [pc, #56]	; (f47c <_ZN22FlapperValveController18StopValveinBetweenEv+0x4c>)
    f444:	4798      	blx	r3
		timeoutFlapperValveController=false;
    f446:	687b      	ldr	r3, [r7, #4]
    f448:	2200      	movs	r2, #0
    f44a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		paused=false;
    f44e:	687b      	ldr	r3, [r7, #4]
    f450:	2200      	movs	r2, #0
    f452:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		timeoutKeepControlling=false;
    f456:	687b      	ldr	r3, [r7, #4]
    f458:	2200      	movs	r2, #0
    f45a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=true;
    f45e:	687b      	ldr	r3, [r7, #4]
    f460:	2201      	movs	r2, #1
    f462:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
}
    f466:	bf00      	nop
    f468:	3708      	adds	r7, #8
    f46a:	46bd      	mov	sp, r7
    f46c:	bd80      	pop	{r7, pc}
    f46e:	bf00      	nop
    f470:	0000f391 	.word	0x0000f391
    f474:	0000ed25 	.word	0x0000ed25
    f478:	20001018 	.word	0x20001018
    f47c:	0000dc91 	.word	0x0000dc91

0000f480 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
    f480:	b580      	push	{r7, lr}
    f482:	b084      	sub	sp, #16
    f484:	af00      	add	r7, sp, #0
    f486:	6078      	str	r0, [r7, #4]
    f488:	460b      	mov	r3, r1
    f48a:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
    f48c:	78fb      	ldrb	r3, [r7, #3]
    f48e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
    f492:	2b00      	cmp	r3, #0
    f494:	dd0f      	ble.n	f4b6 <_ZN22FlapperValveController16CorrectToleranceEh+0x36>
    f496:	78fb      	ldrb	r3, [r7, #3]
    f498:	43da      	mvns	r2, r3
    f49a:	4613      	mov	r3, r2
    f49c:	005b      	lsls	r3, r3, #1
    f49e:	4413      	add	r3, r2
    f4a0:	005b      	lsls	r3, r3, #1
    f4a2:	2b00      	cmp	r3, #0
    f4a4:	da00      	bge.n	f4a8 <_ZN22FlapperValveController16CorrectToleranceEh+0x28>
    f4a6:	33ff      	adds	r3, #255	; 0xff
    f4a8:	121b      	asrs	r3, r3, #8
    f4aa:	461a      	mov	r2, r3
    f4ac:	4b12      	ldr	r3, [pc, #72]	; (f4f8 <_ZN22FlapperValveController16CorrectToleranceEh+0x78>)
    f4ae:	4610      	mov	r0, r2
    f4b0:	4798      	blx	r3
    f4b2:	4603      	mov	r3, r0
    f4b4:	e00f      	b.n	f4d6 <_ZN22FlapperValveController16CorrectToleranceEh+0x56>
    f4b6:	78fb      	ldrb	r3, [r7, #3]
    f4b8:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
    f4bc:	4613      	mov	r3, r2
    f4be:	005b      	lsls	r3, r3, #1
    f4c0:	4413      	add	r3, r2
    f4c2:	005b      	lsls	r3, r3, #1
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	da00      	bge.n	f4ca <_ZN22FlapperValveController16CorrectToleranceEh+0x4a>
    f4c8:	33ff      	adds	r3, #255	; 0xff
    f4ca:	121b      	asrs	r3, r3, #8
    f4cc:	461a      	mov	r2, r3
    f4ce:	4b0a      	ldr	r3, [pc, #40]	; (f4f8 <_ZN22FlapperValveController16CorrectToleranceEh+0x78>)
    f4d0:	4610      	mov	r0, r2
    f4d2:	4798      	blx	r3
    f4d4:	4603      	mov	r3, r0
    f4d6:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
    f4d8:	4b08      	ldr	r3, [pc, #32]	; (f4fc <_ZN22FlapperValveController16CorrectToleranceEh+0x7c>)
    f4da:	68f8      	ldr	r0, [r7, #12]
    f4dc:	4798      	blx	r3
    f4de:	4603      	mov	r3, r0
    f4e0:	b2da      	uxtb	r2, r3
    f4e2:	687b      	ldr	r3, [r7, #4]
    f4e4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	return tolerance;
    f4e8:	687b      	ldr	r3, [r7, #4]
    f4ea:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
}
    f4ee:	4618      	mov	r0, r3
    f4f0:	3710      	adds	r7, #16
    f4f2:	46bd      	mov	sp, r7
    f4f4:	bd80      	pop	{r7, pc}
    f4f6:	bf00      	nop
    f4f8:	00011555 	.word	0x00011555
    f4fc:	000115fd 	.word	0x000115fd

0000f500 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
    f500:	b580      	push	{r7, lr}
    f502:	b082      	sub	sp, #8
    f504:	af00      	add	r7, sp, #0
    f506:	6078      	str	r0, [r7, #4]
	if (fv->controlOutputs.niAlcFvMotorEnable)
    f508:	687b      	ldr	r3, [r7, #4]
    f50a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f50c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    f510:	2b00      	cmp	r3, #0
    f512:	d008      	beq.n	f526 <_ZN22FlapperValveController10StartMotorEv+0x26>
	{
		fv->SetEnable(false);
    f514:	687b      	ldr	r3, [r7, #4]
    f516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f518:	2100      	movs	r1, #0
    f51a:	4618      	mov	r0, r3
    f51c:	4b09      	ldr	r3, [pc, #36]	; (f544 <_ZN22FlapperValveController10StartMotorEv+0x44>)
    f51e:	4798      	blx	r3
		delay_ms(10);
    f520:	200a      	movs	r0, #10
    f522:	4b09      	ldr	r3, [pc, #36]	; (f548 <_ZN22FlapperValveController10StartMotorEv+0x48>)
    f524:	4798      	blx	r3
	}
	
		
	fv->SetEnable(true);
    f526:	687b      	ldr	r3, [r7, #4]
    f528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f52a:	2101      	movs	r1, #1
    f52c:	4618      	mov	r0, r3
    f52e:	4b05      	ldr	r3, [pc, #20]	; (f544 <_ZN22FlapperValveController10StartMotorEv+0x44>)
    f530:	4798      	blx	r3
	isMoving=true;
    f532:	687b      	ldr	r3, [r7, #4]
    f534:	2201      	movs	r2, #1
    f536:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	return 0;
    f53a:	2300      	movs	r3, #0
}
    f53c:	4618      	mov	r0, r3
    f53e:	3708      	adds	r7, #8
    f540:	46bd      	mov	sp, r7
    f542:	bd80      	pop	{r7, pc}
    f544:	0000faed 	.word	0x0000faed
    f548:	00002561 	.word	0x00002561

0000f54c <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
    f54c:	b580      	push	{r7, lr}
    f54e:	b082      	sub	sp, #8
    f550:	af00      	add	r7, sp, #0
    f552:	6078      	str	r0, [r7, #4]
	StopMotor();
    f554:	6878      	ldr	r0, [r7, #4]
    f556:	4b0d      	ldr	r3, [pc, #52]	; (f58c <_ZN22FlapperValveController15StopControllingEv+0x40>)
    f558:	4798      	blx	r3
	timeoutKeepControlling=false;
    f55a:	687b      	ldr	r3, [r7, #4]
    f55c:	2200      	movs	r2, #0
    f55e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	timeoutFlapperValveController=false;
    f562:	687b      	ldr	r3, [r7, #4]
    f564:	2200      	movs	r2, #0
    f566:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	isControlling=false;
    f56a:	687b      	ldr	r3, [r7, #4]
    f56c:	2200      	movs	r2, #0
    f56e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	keepControlling=false;
    f572:	687b      	ldr	r3, [r7, #4]
    f574:	2200      	movs	r2, #0
    f576:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	controllerEnabled=false;
    f57a:	687b      	ldr	r3, [r7, #4]
    f57c:	2200      	movs	r2, #0
    f57e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	return 0;
    f582:	2300      	movs	r3, #0
}
    f584:	4618      	mov	r0, r3
    f586:	3708      	adds	r7, #8
    f588:	46bd      	mov	sp, r7
    f58a:	bd80      	pop	{r7, pc}
    f58c:	0000f391 	.word	0x0000f391

0000f590 <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
    f590:	b580      	push	{r7, lr}
    f592:	b082      	sub	sp, #8
    f594:	af00      	add	r7, sp, #0
    f596:	6078      	str	r0, [r7, #4]
    f598:	460b      	mov	r3, r1
    f59a:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
    f59c:	78fb      	ldrb	r3, [r7, #3]
    f59e:	4619      	mov	r1, r3
    f5a0:	6878      	ldr	r0, [r7, #4]
    f5a2:	4b25      	ldr	r3, [pc, #148]	; (f638 <_ZN22FlapperValveController16StartControllingEh+0xa8>)
    f5a4:	4798      	blx	r3
    f5a6:	4603      	mov	r3, r0
    f5a8:	461a      	mov	r2, r3
    f5aa:	687b      	ldr	r3, [r7, #4]
    f5ac:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		CorrectTolerance(setpoint);
    f5b0:	687b      	ldr	r3, [r7, #4]
    f5b2:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
    f5b6:	4619      	mov	r1, r3
    f5b8:	6878      	ldr	r0, [r7, #4]
    f5ba:	4b20      	ldr	r3, [pc, #128]	; (f63c <_ZN22FlapperValveController16StartControllingEh+0xac>)
    f5bc:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
    f5be:	687b      	ldr	r3, [r7, #4]
    f5c0:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
    f5c4:	4b1e      	ldr	r3, [pc, #120]	; (f640 <_ZN22FlapperValveController16StartControllingEh+0xb0>)
    f5c6:	4610      	mov	r0, r2
    f5c8:	4798      	blx	r3
    f5ca:	4602      	mov	r2, r0
    f5cc:	687b      	ldr	r3, [r7, #4]
    f5ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		timeoutFlapperValveController=false;
    f5d2:	687b      	ldr	r3, [r7, #4]
    f5d4:	2200      	movs	r2, #0
    f5d6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
    f5da:	687b      	ldr	r3, [r7, #4]
    f5dc:	2200      	movs	r2, #0
    f5de:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=false;
    f5e2:	687b      	ldr	r3, [r7, #4]
    f5e4:	2200      	movs	r2, #0
    f5e6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		controllerEnabled=true;
    f5ea:	687b      	ldr	r3, [r7, #4]
    f5ec:	2201      	movs	r2, #1
    f5ee:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		unLockTimeout=false;
    f5f2:	687b      	ldr	r3, [r7, #4]
    f5f4:	2200      	movs	r2, #0
    f5f6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_UNLOCK_TIMEOUT);
    f5fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    f5fe:	4911      	ldr	r1, [pc, #68]	; (f644 <_ZN22FlapperValveController16StartControllingEh+0xb4>)
    f600:	4811      	ldr	r0, [pc, #68]	; (f648 <_ZN22FlapperValveController16StartControllingEh+0xb8>)
    f602:	4b12      	ldr	r3, [pc, #72]	; (f64c <_ZN22FlapperValveController16StartControllingEh+0xbc>)
    f604:	4798      	blx	r3
		isControlling=true;
    f606:	687b      	ldr	r3, [r7, #4]
    f608:	2201      	movs	r2, #1
    f60a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
		StartMovingOnDirection();
    f60e:	6878      	ldr	r0, [r7, #4]
    f610:	4b0f      	ldr	r3, [pc, #60]	; (f650 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
    f612:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
    f614:	6878      	ldr	r0, [r7, #4]
    f616:	4b0f      	ldr	r3, [pc, #60]	; (f654 <_ZN22FlapperValveController16StartControllingEh+0xc4>)
    f618:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
    f61a:	687b      	ldr	r3, [r7, #4]
    f61c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    f620:	b2db      	uxtb	r3, r3
    f622:	2b00      	cmp	r3, #0
    f624:	d003      	beq.n	f62e <_ZN22FlapperValveController16StartControllingEh+0x9e>
		{
			paused=true;
    f626:	687b      	ldr	r3, [r7, #4]
    f628:	2201      	movs	r2, #1
    f62a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		}
		return 0;
    f62e:	2300      	movs	r3, #0
	
}
    f630:	4618      	mov	r0, r3
    f632:	3708      	adds	r7, #8
    f634:	46bd      	mov	sp, r7
    f636:	bd80      	pop	{r7, pc}
    f638:	0000f659 	.word	0x0000f659
    f63c:	0000f481 	.word	0x0000f481
    f640:	0001154d 	.word	0x0001154d
    f644:	0000ed25 	.word	0x0000ed25
    f648:	20001018 	.word	0x20001018
    f64c:	0000dce9 	.word	0x0000dce9
    f650:	0000eec1 	.word	0x0000eec1
    f654:	0000f06d 	.word	0x0000f06d

0000f658 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
    f658:	b580      	push	{r7, lr}
    f65a:	b082      	sub	sp, #8
    f65c:	af00      	add	r7, sp, #0
    f65e:	6078      	str	r0, [r7, #4]
    f660:	460b      	mov	r3, r1
    f662:	70fb      	strb	r3, [r7, #3]
	//memory.ReadParameters(parameters);
	if (IsNBCMode())
    f664:	6878      	ldr	r0, [r7, #4]
    f666:	4b24      	ldr	r3, [pc, #144]	; (f6f8 <_ZN22FlapperValveController14VerifySetpointEh+0xa0>)
    f668:	4798      	blx	r3
    f66a:	4603      	mov	r3, r0
    f66c:	2b00      	cmp	r3, #0
    f66e:	d004      	beq.n	f67a <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
    f670:	687b      	ldr	r3, [r7, #4]
    f672:	78fa      	ldrb	r2, [r7, #3]
    f674:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    f678:	e037      	b.n	f6ea <_ZN22FlapperValveController14VerifySetpointEh+0x92>
	} 
	else
	{
		if (dataStruct.controlOutputs.iAlcFvStandAloneOut)
    f67a:	687b      	ldr	r3, [r7, #4]
    f67c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
    f680:	2b00      	cmp	r3, #0
    f682:	d019      	beq.n	f6b8 <_ZN22FlapperValveController14VerifySetpointEh+0x60>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
    f684:	687b      	ldr	r3, [r7, #4]
    f686:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    f68a:	43db      	mvns	r3, r3
    f68c:	b2da      	uxtb	r2, r3
    f68e:	687b      	ldr	r3, [r7, #4]
    f690:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			if (sp>standAlonePosition)
    f694:	78fb      	ldrb	r3, [r7, #3]
    f696:	687a      	ldr	r2, [r7, #4]
    f698:	f892 20b9 	ldrb.w	r2, [r2, #185]	; 0xb9
    f69c:	4293      	cmp	r3, r2
    f69e:	dd06      	ble.n	f6ae <_ZN22FlapperValveController14VerifySetpointEh+0x56>
			{
				setpoint=standAlonePosition;
    f6a0:	687b      	ldr	r3, [r7, #4]
    f6a2:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
    f6a6:	687b      	ldr	r3, [r7, #4]
    f6a8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    f6ac:	e01d      	b.n	f6ea <_ZN22FlapperValveController14VerifySetpointEh+0x92>
			}
			else
			{
				setpoint=sp;
    f6ae:	687b      	ldr	r3, [r7, #4]
    f6b0:	78fa      	ldrb	r2, [r7, #3]
    f6b2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    f6b6:	e018      	b.n	f6ea <_ZN22FlapperValveController14VerifySetpointEh+0x92>
			}
		}
		else
		{
			minimumPosition=0xff-parameters.flapperValveMinimumPosition;
    f6b8:	687b      	ldr	r3, [r7, #4]
    f6ba:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    f6be:	43db      	mvns	r3, r3
    f6c0:	b2da      	uxtb	r2, r3
    f6c2:	687b      	ldr	r3, [r7, #4]
    f6c4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
			if (sp>minimumPosition)
    f6c8:	78fb      	ldrb	r3, [r7, #3]
    f6ca:	687a      	ldr	r2, [r7, #4]
    f6cc:	f892 20b8 	ldrb.w	r2, [r2, #184]	; 0xb8
    f6d0:	4293      	cmp	r3, r2
    f6d2:	dd06      	ble.n	f6e2 <_ZN22FlapperValveController14VerifySetpointEh+0x8a>
			{
				setpoint=minimumPosition;
    f6d4:	687b      	ldr	r3, [r7, #4]
    f6d6:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
    f6da:	687b      	ldr	r3, [r7, #4]
    f6dc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    f6e0:	e003      	b.n	f6ea <_ZN22FlapperValveController14VerifySetpointEh+0x92>
			}
			else
			{
				setpoint=sp;
    f6e2:	687b      	ldr	r3, [r7, #4]
    f6e4:	78fa      	ldrb	r2, [r7, #3]
    f6e6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			}
		}
	}
	
	return setpoint;
    f6ea:	687b      	ldr	r3, [r7, #4]
    f6ec:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
	
}
    f6f0:	4618      	mov	r0, r3
    f6f2:	3708      	adds	r7, #8
    f6f4:	46bd      	mov	sp, r7
    f6f6:	bd80      	pop	{r7, pc}
    f6f8:	0000f359 	.word	0x0000f359

0000f6fc <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=fv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
    f6fc:	b580      	push	{r7, lr}
    f6fe:	b082      	sub	sp, #8
    f700:	af00      	add	r7, sp, #0
    f702:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
    f704:	687b      	ldr	r3, [r7, #4]
    f706:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
    f70a:	4619      	mov	r1, r3
    f70c:	6878      	ldr	r0, [r7, #4]
    f70e:	4b03      	ldr	r3, [pc, #12]	; (f71c <_ZN22FlapperValveController16StartControllingEv+0x20>)
    f710:	4798      	blx	r3
    f712:	4603      	mov	r3, r0
	
}
    f714:	4618      	mov	r0, r3
    f716:	3708      	adds	r7, #8
    f718:	46bd      	mov	sp, r7
    f71a:	bd80      	pop	{r7, pc}
    f71c:	0000f591 	.word	0x0000f591

0000f720 <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
    f720:	b580      	push	{r7, lr}
    f722:	b082      	sub	sp, #8
    f724:	af00      	add	r7, sp, #0
    f726:	6078      	str	r0, [r7, #4]
    f728:	460b      	mov	r3, r1
    f72a:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
    f72c:	687b      	ldr	r3, [r7, #4]
    f72e:	2200      	movs	r2, #0
    f730:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
    f734:	687b      	ldr	r3, [r7, #4]
    f736:	2201      	movs	r2, #1
    f738:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
		StartMovingOnDirection();
    f73c:	6878      	ldr	r0, [r7, #4]
    f73e:	4b05      	ldr	r3, [pc, #20]	; (f754 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
    f740:	4798      	blx	r3
		keepControlling=false;
    f742:	687b      	ldr	r3, [r7, #4]
    f744:	2200      	movs	r2, #0
    f746:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	return 0;
    f74a:	2300      	movs	r3, #0
	
}
    f74c:	4618      	mov	r0, r3
    f74e:	3708      	adds	r7, #8
    f750:	46bd      	mov	sp, r7
    f752:	bd80      	pop	{r7, pc}
    f754:	0000eec1 	.word	0x0000eec1

0000f758 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
    f758:	b590      	push	{r4, r7, lr}
    f75a:	b085      	sub	sp, #20
    f75c:	af00      	add	r7, sp, #0
    f75e:	60f8      	str	r0, [r7, #12]
	currentPosition=fv->ReadActualPosition();
    f760:	68fb      	ldr	r3, [r7, #12]
    f762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f764:	4618      	mov	r0, r3
    f766:	4b24      	ldr	r3, [pc, #144]	; (f7f8 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xa0>)
    f768:	4798      	blx	r3
    f76a:	4603      	mov	r3, r0
    f76c:	461a      	mov	r2, r3
    f76e:	68fb      	ldr	r3, [r7, #12]
    f770:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	dataStruct.actualPosition=currentPosition;
    f774:	68fb      	ldr	r3, [r7, #12]
    f776:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
    f77a:	68fb      	ldr	r3, [r7, #12]
    f77c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	dataStruct.setPointPosition=setpoint;
    f780:	68fb      	ldr	r3, [r7, #12]
    f782:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
    f786:	68fb      	ldr	r3, [r7, #12]
    f788:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	dataStruct.inputStatus=fv->ReadStatusInputs();
    f78c:	68fb      	ldr	r3, [r7, #12]
    f78e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    f790:	68fc      	ldr	r4, [r7, #12]
    f792:	463b      	mov	r3, r7
    f794:	4611      	mov	r1, r2
    f796:	4618      	mov	r0, r3
    f798:	4b18      	ldr	r3, [pc, #96]	; (f7fc <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xa4>)
    f79a:	4798      	blx	r3
    f79c:	f104 037c 	add.w	r3, r4, #124	; 0x7c
    f7a0:	463a      	mov	r2, r7
    f7a2:	6810      	ldr	r0, [r2, #0]
    f7a4:	6018      	str	r0, [r3, #0]
    f7a6:	8892      	ldrh	r2, [r2, #4]
    f7a8:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=fv->ReadControlStatus();
    f7aa:	68fb      	ldr	r3, [r7, #12]
    f7ac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    f7ae:	68fc      	ldr	r4, [r7, #12]
    f7b0:	463b      	mov	r3, r7
    f7b2:	4611      	mov	r1, r2
    f7b4:	4618      	mov	r0, r3
    f7b6:	4b12      	ldr	r3, [pc, #72]	; (f800 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xa8>)
    f7b8:	4798      	blx	r3
    f7ba:	f104 0382 	add.w	r3, r4, #130	; 0x82
    f7be:	463a      	mov	r2, r7
    f7c0:	6811      	ldr	r1, [r2, #0]
    f7c2:	6852      	ldr	r2, [r2, #4]
    f7c4:	6019      	str	r1, [r3, #0]
    f7c6:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=isMoving;
    f7c8:	68fb      	ldr	r3, [r7, #12]
    f7ca:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    f7ce:	b2da      	uxtb	r2, r3
    f7d0:	68fb      	ldr	r3, [r7, #12]
    f7d2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	dataStruct.controllerStatus.isControlling=isControlling;
    f7d6:	68fb      	ldr	r3, [r7, #12]
    f7d8:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
    f7dc:	68fb      	ldr	r3, [r7, #12]
    f7de:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
    f7e2:	68fb      	ldr	r3, [r7, #12]
    f7e4:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
    f7e8:	68fb      	ldr	r3, [r7, #12]
    f7ea:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
    f7ee:	bf00      	nop
    f7f0:	3714      	adds	r7, #20
    f7f2:	46bd      	mov	sp, r7
    f7f4:	bd90      	pop	{r4, r7, pc}
    f7f6:	bf00      	nop
    f7f8:	0000fc95 	.word	0x0000fc95
    f7fc:	0000fa91 	.word	0x0000fa91
    f800:	0000fa35 	.word	0x0000fa35

0000f804 <_Z41__static_initialization_and_destruction_0ii>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return fv->ReadActualPosition();
}

    f804:	b580      	push	{r7, lr}
    f806:	b082      	sub	sp, #8
    f808:	af00      	add	r7, sp, #0
    f80a:	6078      	str	r0, [r7, #4]
    f80c:	6039      	str	r1, [r7, #0]
    f80e:	687b      	ldr	r3, [r7, #4]
    f810:	2b01      	cmp	r3, #1
    f812:	d115      	bne.n	f840 <_Z41__static_initialization_and_destruction_0ii+0x3c>
    f814:	683b      	ldr	r3, [r7, #0]
    f816:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f81a:	4293      	cmp	r3, r2
    f81c:	d110      	bne.n	f840 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static SingleFlapperValve_Class fvStatic(0);
    f81e:	2100      	movs	r1, #0
    f820:	4809      	ldr	r0, [pc, #36]	; (f848 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    f822:	4b0a      	ldr	r3, [pc, #40]	; (f84c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    f824:	4798      	blx	r3
    f826:	4a0a      	ldr	r2, [pc, #40]	; (f850 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f828:	490a      	ldr	r1, [pc, #40]	; (f854 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f82a:	4807      	ldr	r0, [pc, #28]	; (f848 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    f82c:	4b0a      	ldr	r3, [pc, #40]	; (f858 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f82e:	4798      	blx	r3
    f830:	480a      	ldr	r0, [pc, #40]	; (f85c <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f832:	4b0b      	ldr	r3, [pc, #44]	; (f860 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f834:	4798      	blx	r3
    f836:	4a06      	ldr	r2, [pc, #24]	; (f850 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f838:	490a      	ldr	r1, [pc, #40]	; (f864 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f83a:	4808      	ldr	r0, [pc, #32]	; (f85c <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f83c:	4b06      	ldr	r3, [pc, #24]	; (f858 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f83e:	4798      	blx	r3
    f840:	bf00      	nop
    f842:	3708      	adds	r7, #8
    f844:	46bd      	mov	sp, r7
    f846:	bd80      	pop	{r7, pc}
    f848:	2000135c 	.word	0x2000135c
    f84c:	0000f87d 	.word	0x0000f87d
    f850:	20000000 	.word	0x20000000
    f854:	0000f919 	.word	0x0000f919
    f858:	000113d5 	.word	0x000113d5
    f85c:	200013d0 	.word	0x200013d0
    f860:	0000ed65 	.word	0x0000ed65
    f864:	0000ede9 	.word	0x0000ede9

0000f868 <_GLOBAL__sub_I_ptrFlapperValveController>:
    f868:	b580      	push	{r7, lr}
    f86a:	af00      	add	r7, sp, #0
    f86c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f870:	2001      	movs	r0, #1
    f872:	4b01      	ldr	r3, [pc, #4]	; (f878 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
    f874:	4798      	blx	r3
    f876:	bd80      	pop	{r7, pc}
    f878:	0000f805 	.word	0x0000f805

0000f87c <_ZN24SingleFlapperValve_ClassC1Eh>:
static void	RegulatorTimeout(const struct timer_task *const timer_task){
	ptrSingleFlapperValveClass->regulatorTimeout=true;
	asm("nop");
}

SingleFlapperValve_Class::SingleFlapperValve_Class(uint8_t _iD)
    f87c:	b580      	push	{r7, lr}
    f87e:	b082      	sub	sp, #8
    f880:	af00      	add	r7, sp, #0
    f882:	6078      	str	r0, [r7, #4]
    f884:	460b      	mov	r3, r1
    f886:	70fb      	strb	r3, [r7, #3]
    f888:	687b      	ldr	r3, [r7, #4]
    f88a:	4618      	mov	r0, r3
    f88c:	4b0c      	ldr	r3, [pc, #48]	; (f8c0 <_ZN24SingleFlapperValve_ClassC1Eh+0x44>)
    f88e:	4798      	blx	r3
{	
	valveID=_iD;
    f890:	687b      	ldr	r3, [r7, #4]
    f892:	78fa      	ldrb	r2, [r7, #3]
    f894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
    f898:	687b      	ldr	r3, [r7, #4]
    f89a:	4a0a      	ldr	r2, [pc, #40]	; (f8c4 <_ZN24SingleFlapperValve_ClassC1Eh+0x48>)
    f89c:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
    f89e:	687b      	ldr	r3, [r7, #4]
    f8a0:	2200      	movs	r2, #0
    f8a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
    f8a6:	4a08      	ldr	r2, [pc, #32]	; (f8c8 <_ZN24SingleFlapperValve_ClassC1Eh+0x4c>)
    f8a8:	687b      	ldr	r3, [r7, #4]
    f8aa:	6013      	str	r3, [r2, #0]
	isOK=false;
    f8ac:	687b      	ldr	r3, [r7, #4]
    f8ae:	2200      	movs	r2, #0
    f8b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
    f8b4:	687b      	ldr	r3, [r7, #4]
    f8b6:	4618      	mov	r0, r3
    f8b8:	3708      	adds	r7, #8
    f8ba:	46bd      	mov	sp, r7
    f8bc:	bd80      	pop	{r7, pc}
    f8be:	bf00      	nop
    f8c0:	00010375 	.word	0x00010375
    f8c4:	20001490 	.word	0x20001490
    f8c8:	2000148c 	.word	0x2000148c

0000f8cc <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
    f8cc:	b580      	push	{r7, lr}
    f8ce:	b082      	sub	sp, #8
    f8d0:	af00      	add	r7, sp, #0
    f8d2:	6078      	str	r0, [r7, #4]
    f8d4:	687b      	ldr	r3, [r7, #4]
    f8d6:	4618      	mov	r0, r3
    f8d8:	4b0c      	ldr	r3, [pc, #48]	; (f90c <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
    f8da:	4798      	blx	r3
{
	valveID=0;
    f8dc:	687b      	ldr	r3, [r7, #4]
    f8de:	2200      	movs	r2, #0
    f8e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
    f8e4:	687b      	ldr	r3, [r7, #4]
    f8e6:	4a0a      	ldr	r2, [pc, #40]	; (f910 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
    f8e8:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
    f8ea:	687b      	ldr	r3, [r7, #4]
    f8ec:	2200      	movs	r2, #0
    f8ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
    f8f2:	4a08      	ldr	r2, [pc, #32]	; (f914 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
    f8f4:	687b      	ldr	r3, [r7, #4]
    f8f6:	6013      	str	r3, [r2, #0]
	isOK=false;
    f8f8:	687b      	ldr	r3, [r7, #4]
    f8fa:	2200      	movs	r2, #0
    f8fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
    f900:	687b      	ldr	r3, [r7, #4]
    f902:	4618      	mov	r0, r3
    f904:	3708      	adds	r7, #8
    f906:	46bd      	mov	sp, r7
    f908:	bd80      	pop	{r7, pc}
    f90a:	bf00      	nop
    f90c:	00010375 	.word	0x00010375
    f910:	20001490 	.word	0x20001490
    f914:	2000148c 	.word	0x2000148c

0000f918 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
    f918:	b580      	push	{r7, lr}
    f91a:	b082      	sub	sp, #8
    f91c:	af00      	add	r7, sp, #0
    f91e:	6078      	str	r0, [r7, #4]
    f920:	687b      	ldr	r3, [r7, #4]
    f922:	4618      	mov	r0, r3
    f924:	4b03      	ldr	r3, [pc, #12]	; (f934 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
    f926:	4798      	blx	r3
{
} //~FlapperValve_Class
    f928:	687b      	ldr	r3, [r7, #4]
    f92a:	4618      	mov	r0, r3
    f92c:	3708      	adds	r7, #8
    f92e:	46bd      	mov	sp, r7
    f930:	bd80      	pop	{r7, pc}
    f932:	bf00      	nop
    f934:	00010389 	.word	0x00010389

0000f938 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
    f938:	b580      	push	{r7, lr}
    f93a:	b082      	sub	sp, #8
    f93c:	af00      	add	r7, sp, #0
    f93e:	6078      	str	r0, [r7, #4]
	
		i2c->Init();
    f940:	687b      	ldr	r3, [r7, #4]
    f942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f944:	4618      	mov	r0, r3
    f946:	4b19      	ldr	r3, [pc, #100]	; (f9ac <_ZN24SingleFlapperValve_Class4InitEv+0x74>)
    f948:	4798      	blx	r3

		if (i2c->isOK)
    f94a:	687b      	ldr	r3, [r7, #4]
    f94c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f94e:	7a5b      	ldrb	r3, [r3, #9]
    f950:	b2db      	uxtb	r3, r3
    f952:	2b00      	cmp	r3, #0
    f954:	d01b      	beq.n	f98e <_ZN24SingleFlapperValve_Class4InitEv+0x56>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
    f956:	687b      	ldr	r3, [r7, #4]
    f958:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    f95c:	4619      	mov	r1, r3
    f95e:	6878      	ldr	r0, [r7, #4]
    f960:	4b13      	ldr	r3, [pc, #76]	; (f9b0 <_ZN24SingleFlapperValve_Class4InitEv+0x78>)
    f962:	4798      	blx	r3
			expanders[0]->SetPortInput();
    f964:	687b      	ldr	r3, [r7, #4]
    f966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f968:	4618      	mov	r0, r3
    f96a:	4b12      	ldr	r3, [pc, #72]	; (f9b4 <_ZN24SingleFlapperValve_Class4InitEv+0x7c>)
    f96c:	4798      	blx	r3
			expanders[1]->SetPortInput(0x80);
    f96e:	687b      	ldr	r3, [r7, #4]
    f970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    f972:	2180      	movs	r1, #128	; 0x80
    f974:	4618      	mov	r0, r3
    f976:	4b10      	ldr	r3, [pc, #64]	; (f9b8 <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
    f978:	4798      	blx	r3
			expanders[2]->SetPortOutput();
    f97a:	687b      	ldr	r3, [r7, #4]
    f97c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    f97e:	4618      	mov	r0, r3
    f980:	4b0e      	ldr	r3, [pc, #56]	; (f9bc <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
    f982:	4798      	blx	r3
			expanders[3]->SetPortInput();
    f984:	687b      	ldr	r3, [r7, #4]
    f986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    f988:	4618      	mov	r0, r3
    f98a:	4b0a      	ldr	r3, [pc, #40]	; (f9b4 <_ZN24SingleFlapperValve_Class4InitEv+0x7c>)
    f98c:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
    f98e:	687b      	ldr	r3, [r7, #4]
    f990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f992:	7a5b      	ldrb	r3, [r3, #9]
    f994:	b2da      	uxtb	r2, r3
    f996:	687b      	ldr	r3, [r7, #4]
    f998:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		
		return isOK;
    f99c:	687b      	ldr	r3, [r7, #4]
    f99e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f9a2:	b2db      	uxtb	r3, r3
// 			asm("nop");
// 		}
// 		return isOK;	


}
    f9a4:	4618      	mov	r0, r3
    f9a6:	3708      	adds	r7, #8
    f9a8:	46bd      	mov	sp, r7
    f9aa:	bd80      	pop	{r7, pc}
    f9ac:	00010231 	.word	0x00010231
    f9b0:	0000f9c1 	.word	0x0000f9c1
    f9b4:	00010715 	.word	0x00010715
    f9b8:	00010759 	.word	0x00010759
    f9bc:	000107cd 	.word	0x000107cd

0000f9c0 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
    f9c0:	b580      	push	{r7, lr}
    f9c2:	b084      	sub	sp, #16
    f9c4:	af00      	add	r7, sp, #0
    f9c6:	6078      	str	r0, [r7, #4]
    f9c8:	460b      	mov	r3, r1
    f9ca:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    f9cc:	2300      	movs	r3, #0
    f9ce:	60fb      	str	r3, [r7, #12]
    f9d0:	68fb      	ldr	r3, [r7, #12]
    f9d2:	2b03      	cmp	r3, #3
    f9d4:	dc24      	bgt.n	fa20 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x60>
	{
		currentExpander=&(expandersStatic[i]);
    f9d6:	68fa      	ldr	r2, [r7, #12]
    f9d8:	4613      	mov	r3, r2
    f9da:	00db      	lsls	r3, r3, #3
    f9dc:	1a9b      	subs	r3, r3, r2
    f9de:	009b      	lsls	r3, r3, #2
    f9e0:	4a12      	ldr	r2, [pc, #72]	; (fa2c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x6c>)
    f9e2:	441a      	add	r2, r3
    f9e4:	687b      	ldr	r3, [r7, #4]
    f9e6:	665a      	str	r2, [r3, #100]	; 0x64
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
    f9e8:	687b      	ldr	r3, [r7, #4]
    f9ea:	6e58      	ldr	r0, [r3, #100]	; 0x64
    f9ec:	68fb      	ldr	r3, [r7, #12]
    f9ee:	b2da      	uxtb	r2, r3
    f9f0:	78fb      	ldrb	r3, [r7, #3]
    f9f2:	009b      	lsls	r3, r3, #2
    f9f4:	b2db      	uxtb	r3, r3
    f9f6:	4413      	add	r3, r2
    f9f8:	b2db      	uxtb	r3, r3
    f9fa:	3320      	adds	r3, #32
    f9fc:	b2d9      	uxtb	r1, r3
    f9fe:	687b      	ldr	r3, [r7, #4]
    fa00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    fa02:	461a      	mov	r2, r3
    fa04:	4b0a      	ldr	r3, [pc, #40]	; (fa30 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x70>)
    fa06:	4798      	blx	r3
		expanders[i]=currentExpander;
    fa08:	687b      	ldr	r3, [r7, #4]
    fa0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    fa0c:	6879      	ldr	r1, [r7, #4]
    fa0e:	68fb      	ldr	r3, [r7, #12]
    fa10:	3314      	adds	r3, #20
    fa12:	009b      	lsls	r3, r3, #2
    fa14:	440b      	add	r3, r1
    fa16:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    fa18:	68fb      	ldr	r3, [r7, #12]
    fa1a:	3301      	adds	r3, #1
    fa1c:	60fb      	str	r3, [r7, #12]
    fa1e:	e7d7      	b.n	f9d0 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
    fa20:	2300      	movs	r3, #0
}
    fa22:	4618      	mov	r0, r3
    fa24:	3710      	adds	r7, #16
    fa26:	46bd      	mov	sp, r7
    fa28:	bd80      	pop	{r7, pc}
    fa2a:	bf00      	nop
    fa2c:	200014a4 	.word	0x200014a4
    fa30:	0001056b 	.word	0x0001056b

0000fa34 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
    fa34:	b590      	push	{r4, r7, lr}
    fa36:	b085      	sub	sp, #20
    fa38:	af00      	add	r7, sp, #0
    fa3a:	60f8      	str	r0, [r7, #12]
    fa3c:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
    fa3e:	68bb      	ldr	r3, [r7, #8]
    fa40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    fa42:	4618      	mov	r0, r3
    fa44:	4b10      	ldr	r3, [pc, #64]	; (fa88 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
    fa46:	4798      	blx	r3
    fa48:	4603      	mov	r3, r0
    fa4a:	461a      	mov	r2, r3
    fa4c:	68bb      	ldr	r3, [r7, #8]
    fa4e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	controlOutputs=FillControlOutputs(value);
    fa52:	68b9      	ldr	r1, [r7, #8]
    fa54:	68bb      	ldr	r3, [r7, #8]
    fa56:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
    fa5a:	68bc      	ldr	r4, [r7, #8]
    fa5c:	463b      	mov	r3, r7
    fa5e:	4618      	mov	r0, r3
    fa60:	4b0a      	ldr	r3, [pc, #40]	; (fa8c <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x58>)
    fa62:	4798      	blx	r3
    fa64:	f104 033a 	add.w	r3, r4, #58	; 0x3a
    fa68:	463a      	mov	r2, r7
    fa6a:	6811      	ldr	r1, [r2, #0]
    fa6c:	6852      	ldr	r2, [r2, #4]
    fa6e:	6019      	str	r1, [r3, #0]
    fa70:	605a      	str	r2, [r3, #4]
	return controlOutputs;
    fa72:	68fa      	ldr	r2, [r7, #12]
    fa74:	68bb      	ldr	r3, [r7, #8]
    fa76:	333a      	adds	r3, #58	; 0x3a
    fa78:	6819      	ldr	r1, [r3, #0]
    fa7a:	685b      	ldr	r3, [r3, #4]
    fa7c:	6011      	str	r1, [r2, #0]
    fa7e:	6053      	str	r3, [r2, #4]
}
    fa80:	68f8      	ldr	r0, [r7, #12]
    fa82:	3714      	adds	r7, #20
    fa84:	46bd      	mov	sp, r7
    fa86:	bd90      	pop	{r4, r7, pc}
    fa88:	00010655 	.word	0x00010655
    fa8c:	00010485 	.word	0x00010485

0000fa90 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
    fa90:	b590      	push	{r4, r7, lr}
    fa92:	b085      	sub	sp, #20
    fa94:	af00      	add	r7, sp, #0
    fa96:	60f8      	str	r0, [r7, #12]
    fa98:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
    fa9a:	68bb      	ldr	r3, [r7, #8]
    fa9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    fa9e:	4618      	mov	r0, r3
    faa0:	4b10      	ldr	r3, [pc, #64]	; (fae4 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
    faa2:	4798      	blx	r3
    faa4:	4603      	mov	r3, r0
    faa6:	461a      	mov	r2, r3
    faa8:	68bb      	ldr	r3, [r7, #8]
    faaa:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	statusInputs=FillInputStatus(value);
    faae:	68b9      	ldr	r1, [r7, #8]
    fab0:	68bb      	ldr	r3, [r7, #8]
    fab2:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
    fab6:	68bc      	ldr	r4, [r7, #8]
    fab8:	463b      	mov	r3, r7
    faba:	4618      	mov	r0, r3
    fabc:	4b0a      	ldr	r3, [pc, #40]	; (fae8 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
    fabe:	4798      	blx	r3
    fac0:	f104 0342 	add.w	r3, r4, #66	; 0x42
    fac4:	463a      	mov	r2, r7
    fac6:	6811      	ldr	r1, [r2, #0]
    fac8:	6019      	str	r1, [r3, #0]
    faca:	8892      	ldrh	r2, [r2, #4]
    facc:	809a      	strh	r2, [r3, #4]
	return statusInputs;
    face:	68fa      	ldr	r2, [r7, #12]
    fad0:	68bb      	ldr	r3, [r7, #8]
    fad2:	3342      	adds	r3, #66	; 0x42
    fad4:	6819      	ldr	r1, [r3, #0]
    fad6:	6011      	str	r1, [r2, #0]
    fad8:	889b      	ldrh	r3, [r3, #4]
    fada:	8093      	strh	r3, [r2, #4]
}
    fadc:	68f8      	ldr	r0, [r7, #12]
    fade:	3714      	adds	r7, #20
    fae0:	46bd      	mov	sp, r7
    fae2:	bd90      	pop	{r4, r7, pc}
    fae4:	00010655 	.word	0x00010655
    fae8:	00010431 	.word	0x00010431

0000faec <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
    faec:	b580      	push	{r7, lr}
    faee:	b082      	sub	sp, #8
    faf0:	af00      	add	r7, sp, #0
    faf2:	6078      	str	r0, [r7, #4]
    faf4:	460b      	mov	r3, r1
    faf6:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    faf8:	687b      	ldr	r3, [r7, #4]
    fafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    fafc:	4618      	mov	r0, r3
    fafe:	4b19      	ldr	r3, [pc, #100]	; (fb64 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
    fb00:	4798      	blx	r3
    fb02:	4603      	mov	r3, r0
    fb04:	461a      	mov	r2, r3
    fb06:	687b      	ldr	r3, [r7, #4]
    fb08:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value&0xfe:value|0x01;
    fb0c:	78fb      	ldrb	r3, [r7, #3]
    fb0e:	2b00      	cmp	r3, #0
    fb10:	d006      	beq.n	fb20 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
    fb12:	687b      	ldr	r3, [r7, #4]
    fb14:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    fb18:	f023 0301 	bic.w	r3, r3, #1
    fb1c:	b2db      	uxtb	r3, r3
    fb1e:	e005      	b.n	fb2c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
    fb20:	687b      	ldr	r3, [r7, #4]
    fb22:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    fb26:	f043 0301 	orr.w	r3, r3, #1
    fb2a:	b2db      	uxtb	r3, r3
    fb2c:	687a      	ldr	r2, [r7, #4]
    fb2e:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	controlOutputs.niAlcFvMotorEnable=b;
    fb32:	687b      	ldr	r3, [r7, #4]
    fb34:	78fa      	ldrb	r2, [r7, #3]
    fb36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	value=expanders[1]->WriteGPIORegister(value);
    fb3a:	687b      	ldr	r3, [r7, #4]
    fb3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    fb3e:	687b      	ldr	r3, [r7, #4]
    fb40:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    fb44:	4619      	mov	r1, r3
    fb46:	4610      	mov	r0, r2
    fb48:	4b07      	ldr	r3, [pc, #28]	; (fb68 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
    fb4a:	4798      	blx	r3
    fb4c:	4603      	mov	r3, r0
    fb4e:	461a      	mov	r2, r3
    fb50:	687b      	ldr	r3, [r7, #4]
    fb52:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
    fb56:	687b      	ldr	r3, [r7, #4]
    fb58:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
    fb5c:	4618      	mov	r0, r3
    fb5e:	3708      	adds	r7, #8
    fb60:	46bd      	mov	sp, r7
    fb62:	bd80      	pop	{r7, pc}
    fb64:	00010655 	.word	0x00010655
    fb68:	000106d9 	.word	0x000106d9

0000fb6c <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
    fb6c:	b580      	push	{r7, lr}
    fb6e:	b082      	sub	sp, #8
    fb70:	af00      	add	r7, sp, #0
    fb72:	6078      	str	r0, [r7, #4]
    fb74:	460b      	mov	r3, r1
    fb76:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    fb78:	687b      	ldr	r3, [r7, #4]
    fb7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    fb7c:	4618      	mov	r0, r3
    fb7e:	4b17      	ldr	r3, [pc, #92]	; (fbdc <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
    fb80:	4798      	blx	r3
    fb82:	4603      	mov	r3, r0
    fb84:	461a      	mov	r2, r3
    fb86:	687b      	ldr	r3, [r7, #4]
    fb88:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x20:value&0xdf;
    fb8c:	78fb      	ldrb	r3, [r7, #3]
    fb8e:	2b00      	cmp	r3, #0
    fb90:	d006      	beq.n	fba0 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
    fb92:	687b      	ldr	r3, [r7, #4]
    fb94:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    fb98:	f043 0320 	orr.w	r3, r3, #32
    fb9c:	b2db      	uxtb	r3, r3
    fb9e:	e005      	b.n	fbac <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
    fba0:	687b      	ldr	r3, [r7, #4]
    fba2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    fba6:	f023 0320 	bic.w	r3, r3, #32
    fbaa:	b2db      	uxtb	r3, r3
    fbac:	687a      	ldr	r2, [r7, #4]
    fbae:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
    fbb2:	687b      	ldr	r3, [r7, #4]
    fbb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    fbb6:	687b      	ldr	r3, [r7, #4]
    fbb8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    fbbc:	4619      	mov	r1, r3
    fbbe:	4610      	mov	r0, r2
    fbc0:	4b07      	ldr	r3, [pc, #28]	; (fbe0 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
    fbc2:	4798      	blx	r3
    fbc4:	4603      	mov	r3, r0
    fbc6:	461a      	mov	r2, r3
    fbc8:	687b      	ldr	r3, [r7, #4]
    fbca:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
    fbce:	687b      	ldr	r3, [r7, #4]
    fbd0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
    fbd4:	4618      	mov	r0, r3
    fbd6:	3708      	adds	r7, #8
    fbd8:	46bd      	mov	sp, r7
    fbda:	bd80      	pop	{r7, pc}
    fbdc:	00010655 	.word	0x00010655
    fbe0:	000106d9 	.word	0x000106d9

0000fbe4 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
    fbe4:	b580      	push	{r7, lr}
    fbe6:	b082      	sub	sp, #8
    fbe8:	af00      	add	r7, sp, #0
    fbea:	6078      	str	r0, [r7, #4]
    fbec:	460b      	mov	r3, r1
    fbee:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    fbf0:	687b      	ldr	r3, [r7, #4]
    fbf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    fbf4:	4618      	mov	r0, r3
    fbf6:	4b17      	ldr	r3, [pc, #92]	; (fc54 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
    fbf8:	4798      	blx	r3
    fbfa:	4603      	mov	r3, r0
    fbfc:	461a      	mov	r2, r3
    fbfe:	687b      	ldr	r3, [r7, #4]
    fc00:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x40:value&0xbf;
    fc04:	78fb      	ldrb	r3, [r7, #3]
    fc06:	2b00      	cmp	r3, #0
    fc08:	d006      	beq.n	fc18 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
    fc0a:	687b      	ldr	r3, [r7, #4]
    fc0c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    fc10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fc14:	b2db      	uxtb	r3, r3
    fc16:	e005      	b.n	fc24 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
    fc18:	687b      	ldr	r3, [r7, #4]
    fc1a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    fc1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    fc22:	b2db      	uxtb	r3, r3
    fc24:	687a      	ldr	r2, [r7, #4]
    fc26:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
    fc2a:	687b      	ldr	r3, [r7, #4]
    fc2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    fc2e:	687b      	ldr	r3, [r7, #4]
    fc30:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    fc34:	4619      	mov	r1, r3
    fc36:	4610      	mov	r0, r2
    fc38:	4b07      	ldr	r3, [pc, #28]	; (fc58 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
    fc3a:	4798      	blx	r3
    fc3c:	4603      	mov	r3, r0
    fc3e:	461a      	mov	r2, r3
    fc40:	687b      	ldr	r3, [r7, #4]
    fc42:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
    fc46:	687b      	ldr	r3, [r7, #4]
    fc48:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
    fc4c:	4618      	mov	r0, r3
    fc4e:	3708      	adds	r7, #8
    fc50:	46bd      	mov	sp, r7
    fc52:	bd80      	pop	{r7, pc}
    fc54:	00010655 	.word	0x00010655
    fc58:	000106d9 	.word	0x000106d9

0000fc5c <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
    fc5c:	b580      	push	{r7, lr}
    fc5e:	b082      	sub	sp, #8
    fc60:	af00      	add	r7, sp, #0
    fc62:	6078      	str	r0, [r7, #4]
    fc64:	460b      	mov	r3, r1
    fc66:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
    fc68:	687b      	ldr	r3, [r7, #4]
    fc6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    fc6c:	78fa      	ldrb	r2, [r7, #3]
    fc6e:	4611      	mov	r1, r2
    fc70:	4618      	mov	r0, r3
    fc72:	4b07      	ldr	r3, [pc, #28]	; (fc90 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
    fc74:	4798      	blx	r3
    fc76:	4603      	mov	r3, r0
    fc78:	461a      	mov	r2, r3
    fc7a:	687b      	ldr	r3, [r7, #4]
    fc7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
    fc80:	687b      	ldr	r3, [r7, #4]
    fc82:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
    fc86:	4618      	mov	r0, r3
    fc88:	3708      	adds	r7, #8
    fc8a:	46bd      	mov	sp, r7
    fc8c:	bd80      	pop	{r7, pc}
    fc8e:	bf00      	nop
    fc90:	000106d9 	.word	0x000106d9

0000fc94 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
    fc94:	b580      	push	{r7, lr}
    fc96:	b082      	sub	sp, #8
    fc98:	af00      	add	r7, sp, #0
    fc9a:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
    fc9c:	687b      	ldr	r3, [r7, #4]
    fc9e:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
    fca2:	687b      	ldr	r3, [r7, #4]
    fca4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
    fca8:	687b      	ldr	r3, [r7, #4]
    fcaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    fcac:	4618      	mov	r0, r3
    fcae:	4b13      	ldr	r3, [pc, #76]	; (fcfc <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x68>)
    fcb0:	4798      	blx	r3
    fcb2:	4603      	mov	r3, r0
    fcb4:	461a      	mov	r2, r3
    fcb6:	687b      	ldr	r3, [r7, #4]
    fcb8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	if (actualPosition>200)
    fcbc:	687b      	ldr	r3, [r7, #4]
    fcbe:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    fcc2:	2bc8      	cmp	r3, #200	; 0xc8
    fcc4:	dd04      	ble.n	fcd0 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=RECYCLE;
    fcc6:	687b      	ldr	r3, [r7, #4]
    fcc8:	2202      	movs	r2, #2
    fcca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    fcce:	e00d      	b.n	fcec <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x58>
	}else if (actualPosition>100)
    fcd0:	687b      	ldr	r3, [r7, #4]
    fcd2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    fcd6:	2b64      	cmp	r3, #100	; 0x64
    fcd8:	dd04      	ble.n	fce4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=INTERM;
    fcda:	687b      	ldr	r3, [r7, #4]
    fcdc:	2201      	movs	r2, #1
    fcde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    fce2:	e003      	b.n	fcec <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x58>
	} 
	else
	{
		statusFlapperValve=FRESHAIR;
    fce4:	687b      	ldr	r3, [r7, #4]
    fce6:	2200      	movs	r2, #0
    fce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}
	return actualPosition;
    fcec:	687b      	ldr	r3, [r7, #4]
    fcee:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
}
    fcf2:	4618      	mov	r0, r3
    fcf4:	3708      	adds	r7, #8
    fcf6:	46bd      	mov	sp, r7
    fcf8:	bd80      	pop	{r7, pc}
    fcfa:	bf00      	nop
    fcfc:	00010655 	.word	0x00010655

0000fd00 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_EXPANDERS];
    fd00:	b590      	push	{r4, r7, lr}
    fd02:	b083      	sub	sp, #12
    fd04:	af00      	add	r7, sp, #0
    fd06:	6078      	str	r0, [r7, #4]
    fd08:	4c05      	ldr	r4, [pc, #20]	; (fd20 <__tcf_0+0x20>)
    fd0a:	4b06      	ldr	r3, [pc, #24]	; (fd24 <__tcf_0+0x24>)
    fd0c:	429c      	cmp	r4, r3
    fd0e:	d004      	beq.n	fd1a <__tcf_0+0x1a>
    fd10:	3c1c      	subs	r4, #28
    fd12:	4620      	mov	r0, r4
    fd14:	4b04      	ldr	r3, [pc, #16]	; (fd28 <__tcf_0+0x28>)
    fd16:	4798      	blx	r3
    fd18:	e7f7      	b.n	fd0a <__tcf_0+0xa>
    fd1a:	370c      	adds	r7, #12
    fd1c:	46bd      	mov	sp, r7
    fd1e:	bd90      	pop	{r4, r7, pc}
    fd20:	20001514 	.word	0x20001514
    fd24:	200014a4 	.word	0x200014a4
    fd28:	00010557 	.word	0x00010557

0000fd2c <_Z41__static_initialization_and_destruction_0ii>:

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}

    fd2c:	b5b0      	push	{r4, r5, r7, lr}
    fd2e:	b082      	sub	sp, #8
    fd30:	af00      	add	r7, sp, #0
    fd32:	6078      	str	r0, [r7, #4]
    fd34:	6039      	str	r1, [r7, #0]
    fd36:	687b      	ldr	r3, [r7, #4]
    fd38:	2b01      	cmp	r3, #1
    fd3a:	d125      	bne.n	fd88 <_Z41__static_initialization_and_destruction_0ii+0x5c>
    fd3c:	683b      	ldr	r3, [r7, #0]
    fd3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fd42:	4293      	cmp	r3, r2
    fd44:	d120      	bne.n	fd88 <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class		i2cStatic(&I2C_EXPANDER);
    fd46:	4912      	ldr	r1, [pc, #72]	; (fd90 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    fd48:	4812      	ldr	r0, [pc, #72]	; (fd94 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    fd4a:	4b13      	ldr	r3, [pc, #76]	; (fd98 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    fd4c:	4798      	blx	r3
    fd4e:	4a13      	ldr	r2, [pc, #76]	; (fd9c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    fd50:	4913      	ldr	r1, [pc, #76]	; (fda0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    fd52:	4810      	ldr	r0, [pc, #64]	; (fd94 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    fd54:	4b13      	ldr	r3, [pc, #76]	; (fda4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    fd56:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_EXPANDERS];
    fd58:	4b13      	ldr	r3, [pc, #76]	; (fda8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    fd5a:	2403      	movs	r4, #3
    fd5c:	461d      	mov	r5, r3
    fd5e:	2c00      	cmp	r4, #0
    fd60:	db05      	blt.n	fd6e <_Z41__static_initialization_and_destruction_0ii+0x42>
    fd62:	4628      	mov	r0, r5
    fd64:	4b11      	ldr	r3, [pc, #68]	; (fdac <_Z41__static_initialization_and_destruction_0ii+0x80>)
    fd66:	4798      	blx	r3
    fd68:	351c      	adds	r5, #28
    fd6a:	3c01      	subs	r4, #1
    fd6c:	e7f7      	b.n	fd5e <_Z41__static_initialization_and_destruction_0ii+0x32>
    fd6e:	4a0b      	ldr	r2, [pc, #44]	; (fd9c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    fd70:	490f      	ldr	r1, [pc, #60]	; (fdb0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    fd72:	2000      	movs	r0, #0
    fd74:	4b0b      	ldr	r3, [pc, #44]	; (fda4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    fd76:	4798      	blx	r3
    fd78:	480e      	ldr	r0, [pc, #56]	; (fdb4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    fd7a:	4b0f      	ldr	r3, [pc, #60]	; (fdb8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    fd7c:	4798      	blx	r3
    fd7e:	4a07      	ldr	r2, [pc, #28]	; (fd9c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    fd80:	490e      	ldr	r1, [pc, #56]	; (fdbc <_Z41__static_initialization_and_destruction_0ii+0x90>)
    fd82:	480c      	ldr	r0, [pc, #48]	; (fdb4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    fd84:	4b07      	ldr	r3, [pc, #28]	; (fda4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    fd86:	4798      	blx	r3
    fd88:	bf00      	nop
    fd8a:	3708      	adds	r7, #8
    fd8c:	46bd      	mov	sp, r7
    fd8e:	bdb0      	pop	{r4, r5, r7, pc}
    fd90:	20008020 	.word	0x20008020
    fd94:	20001490 	.word	0x20001490
    fd98:	00010201 	.word	0x00010201
    fd9c:	20000000 	.word	0x20000000
    fda0:	0001021d 	.word	0x0001021d
    fda4:	000113d5 	.word	0x000113d5
    fda8:	200014a4 	.word	0x200014a4
    fdac:	00010543 	.word	0x00010543
    fdb0:	0000fd01 	.word	0x0000fd01
    fdb4:	20001514 	.word	0x20001514
    fdb8:	0000f8cd 	.word	0x0000f8cd
    fdbc:	0000f919 	.word	0x0000f919

0000fdc0 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
    fdc0:	b580      	push	{r7, lr}
    fdc2:	af00      	add	r7, sp, #0
    fdc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fdc8:	2001      	movs	r0, #1
    fdca:	4b01      	ldr	r3, [pc, #4]	; (fdd0 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
    fdcc:	4798      	blx	r3
    fdce:	bd80      	pop	{r7, pc}
    fdd0:	0000fd2d 	.word	0x0000fd2d

0000fdd4 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
    fdd4:	b480      	push	{r7}
    fdd6:	b083      	sub	sp, #12
    fdd8:	af00      	add	r7, sp, #0
    fdda:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
    fddc:	4a05      	ldr	r2, [pc, #20]	; (fdf4 <_ZN18SingleHeater_ClassC1Ev+0x20>)
    fdde:	687b      	ldr	r3, [r7, #4]
    fde0:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
    fde2:	687b      	ldr	r3, [r7, #4]
    fde4:	4a04      	ldr	r2, [pc, #16]	; (fdf8 <_ZN18SingleHeater_ClassC1Ev+0x24>)
    fde6:	619a      	str	r2, [r3, #24]
} //SingleHeater_Class
    fde8:	687b      	ldr	r3, [r7, #4]
    fdea:	4618      	mov	r0, r3
    fdec:	370c      	adds	r7, #12
    fdee:	46bd      	mov	sp, r7
    fdf0:	bc80      	pop	{r7}
    fdf2:	4770      	bx	lr
    fdf4:	20001588 	.word	0x20001588
    fdf8:	2000158c 	.word	0x2000158c

0000fdfc <_ZN18SingleHeater_ClassD1Ev>:
	statusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
    fdfc:	b480      	push	{r7}
    fdfe:	b083      	sub	sp, #12
    fe00:	af00      	add	r7, sp, #0
    fe02:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
    fe04:	687b      	ldr	r3, [r7, #4]
    fe06:	4618      	mov	r0, r3
    fe08:	370c      	adds	r7, #12
    fe0a:	46bd      	mov	sp, r7
    fe0c:	bc80      	pop	{r7}
    fe0e:	4770      	bx	lr

0000fe10 <_ZN18SingleHeater_Class10ReadStatusEv>:
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
	}
	
}

uint8_t	SingleHeater_Class::ReadStatus(void){
    fe10:	b580      	push	{r7, lr}
    fe12:	b084      	sub	sp, #16
    fe14:	af00      	add	r7, sp, #0
    fe16:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
    fe18:	687b      	ldr	r3, [r7, #4]
    fe1a:	68db      	ldr	r3, [r3, #12]
    fe1c:	4618      	mov	r0, r3
    fe1e:	4b16      	ldr	r3, [pc, #88]	; (fe78 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
    fe20:	4798      	blx	r3
    fe22:	4603      	mov	r3, r0
    fe24:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
    fe26:	7bbb      	ldrb	r3, [r7, #14]
    fe28:	f003 0301 	and.w	r3, r3, #1
    fe2c:	2b00      	cmp	r3, #0
    fe2e:	bf14      	ite	ne
    fe30:	2301      	movne	r3, #1
    fe32:	2300      	moveq	r3, #0
    fe34:	b2da      	uxtb	r2, r3
    fe36:	687b      	ldr	r3, [r7, #4]
    fe38:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
    fe3a:	2300      	movs	r3, #0
    fe3c:	73fb      	strb	r3, [r7, #15]
    fe3e:	7bfb      	ldrb	r3, [r7, #15]
    fe40:	2b03      	cmp	r3, #3
    fe42:	dc14      	bgt.n	fe6e <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
    fe44:	7bfb      	ldrb	r3, [r7, #15]
    fe46:	7bb9      	ldrb	r1, [r7, #14]
    fe48:	7bfa      	ldrb	r2, [r7, #15]
    fe4a:	3201      	adds	r2, #1
    fe4c:	fa41 f202 	asr.w	r2, r1, r2
    fe50:	f002 0201 	and.w	r2, r2, #1
    fe54:	2a00      	cmp	r2, #0
    fe56:	bf14      	ite	ne
    fe58:	2201      	movne	r2, #1
    fe5a:	2200      	moveq	r2, #0
    fe5c:	b2d1      	uxtb	r1, r2
    fe5e:	687a      	ldr	r2, [r7, #4]
    fe60:	4413      	add	r3, r2
    fe62:	460a      	mov	r2, r1
    fe64:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
    fe66:	7bfb      	ldrb	r3, [r7, #15]
    fe68:	3301      	adds	r3, #1
    fe6a:	73fb      	strb	r3, [r7, #15]
    fe6c:	e7e7      	b.n	fe3e <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
    fe6e:	7bbb      	ldrb	r3, [r7, #14]
}
    fe70:	4618      	mov	r0, r3
    fe72:	3710      	adds	r7, #16
    fe74:	46bd      	mov	sp, r7
    fe76:	bd80      	pop	{r7, pc}
    fe78:	00010655 	.word	0x00010655

0000fe7c <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::Enable(uint8_t indexHeater){
	enabled=expanders[1]->WriteDigit(indexHeater,false);
	return uint8_t(enabled);
}
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
    fe7c:	b580      	push	{r7, lr}
    fe7e:	b082      	sub	sp, #8
    fe80:	af00      	add	r7, sp, #0
    fe82:	6078      	str	r0, [r7, #4]
    fe84:	460b      	mov	r3, r1
    fe86:	70fb      	strb	r3, [r7, #3]
    fe88:	4613      	mov	r3, r2
    fe8a:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
    fe8c:	687b      	ldr	r3, [r7, #4]
    fe8e:	6918      	ldr	r0, [r3, #16]
    fe90:	78bb      	ldrb	r3, [r7, #2]
    fe92:	f083 0301 	eor.w	r3, r3, #1
    fe96:	b2da      	uxtb	r2, r3
    fe98:	78fb      	ldrb	r3, [r7, #3]
    fe9a:	4619      	mov	r1, r3
    fe9c:	4b05      	ldr	r3, [pc, #20]	; (feb4 <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
    fe9e:	4798      	blx	r3
    fea0:	4603      	mov	r3, r0
    fea2:	461a      	mov	r2, r3
    fea4:	687b      	ldr	r3, [r7, #4]
    fea6:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
    fea8:	687b      	ldr	r3, [r7, #4]
    feaa:	7adb      	ldrb	r3, [r3, #11]
}
    feac:	4618      	mov	r0, r3
    feae:	3708      	adds	r7, #8
    feb0:	46bd      	mov	sp, r7
    feb2:	bd80      	pop	{r7, pc}
    feb4:	000108c5 	.word	0x000108c5

0000feb8 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
    feb8:	b590      	push	{r4, r7, lr}
    feba:	b083      	sub	sp, #12
    febc:	af00      	add	r7, sp, #0
    febe:	6078      	str	r0, [r7, #4]
    fec0:	4c05      	ldr	r4, [pc, #20]	; (fed8 <__tcf_0+0x20>)
    fec2:	4b06      	ldr	r3, [pc, #24]	; (fedc <__tcf_0+0x24>)
    fec4:	429c      	cmp	r4, r3
    fec6:	d004      	beq.n	fed2 <__tcf_0+0x1a>
    fec8:	3c1c      	subs	r4, #28
    feca:	4620      	mov	r0, r4
    fecc:	4b04      	ldr	r3, [pc, #16]	; (fee0 <__tcf_0+0x28>)
    fece:	4798      	blx	r3
    fed0:	e7f7      	b.n	fec2 <__tcf_0+0xa>
    fed2:	370c      	adds	r7, #12
    fed4:	46bd      	mov	sp, r7
    fed6:	bd90      	pop	{r4, r7, pc}
    fed8:	200015d8 	.word	0x200015d8
    fedc:	200015a0 	.word	0x200015a0
    fee0:	00010557 	.word	0x00010557

0000fee4 <_Z41__static_initialization_and_destruction_0ii>:

bool SingleHeater_Class::SelfTest(void){
	return true;
}

    fee4:	b5b0      	push	{r4, r5, r7, lr}
    fee6:	b082      	sub	sp, #8
    fee8:	af00      	add	r7, sp, #0
    feea:	6078      	str	r0, [r7, #4]
    feec:	6039      	str	r1, [r7, #0]
    feee:	687b      	ldr	r3, [r7, #4]
    fef0:	2b01      	cmp	r3, #1
    fef2:	d125      	bne.n	ff40 <_Z41__static_initialization_and_destruction_0ii+0x5c>
    fef4:	683b      	ldr	r3, [r7, #0]
    fef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fefa:	4293      	cmp	r3, r2
    fefc:	d120      	bne.n	ff40 <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
    fefe:	4912      	ldr	r1, [pc, #72]	; (ff48 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    ff00:	4812      	ldr	r0, [pc, #72]	; (ff4c <_Z41__static_initialization_and_destruction_0ii+0x68>)
    ff02:	4b13      	ldr	r3, [pc, #76]	; (ff50 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    ff04:	4798      	blx	r3
    ff06:	4a13      	ldr	r2, [pc, #76]	; (ff54 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    ff08:	4913      	ldr	r1, [pc, #76]	; (ff58 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    ff0a:	4810      	ldr	r0, [pc, #64]	; (ff4c <_Z41__static_initialization_and_destruction_0ii+0x68>)
    ff0c:	4b13      	ldr	r3, [pc, #76]	; (ff5c <_Z41__static_initialization_and_destruction_0ii+0x78>)
    ff0e:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
    ff10:	4b13      	ldr	r3, [pc, #76]	; (ff60 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    ff12:	2401      	movs	r4, #1
    ff14:	461d      	mov	r5, r3
    ff16:	2c00      	cmp	r4, #0
    ff18:	db05      	blt.n	ff26 <_Z41__static_initialization_and_destruction_0ii+0x42>
    ff1a:	4628      	mov	r0, r5
    ff1c:	4b11      	ldr	r3, [pc, #68]	; (ff64 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    ff1e:	4798      	blx	r3
    ff20:	351c      	adds	r5, #28
    ff22:	3c01      	subs	r4, #1
    ff24:	e7f7      	b.n	ff16 <_Z41__static_initialization_and_destruction_0ii+0x32>
    ff26:	4a0b      	ldr	r2, [pc, #44]	; (ff54 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    ff28:	490f      	ldr	r1, [pc, #60]	; (ff68 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ff2a:	2000      	movs	r0, #0
    ff2c:	4b0b      	ldr	r3, [pc, #44]	; (ff5c <_Z41__static_initialization_and_destruction_0ii+0x78>)
    ff2e:	4798      	blx	r3
    ff30:	480e      	ldr	r0, [pc, #56]	; (ff6c <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ff32:	4b0f      	ldr	r3, [pc, #60]	; (ff70 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ff34:	4798      	blx	r3
    ff36:	4a07      	ldr	r2, [pc, #28]	; (ff54 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    ff38:	490e      	ldr	r1, [pc, #56]	; (ff74 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ff3a:	480c      	ldr	r0, [pc, #48]	; (ff6c <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ff3c:	4b07      	ldr	r3, [pc, #28]	; (ff5c <_Z41__static_initialization_and_destruction_0ii+0x78>)
    ff3e:	4798      	blx	r3
    ff40:	bf00      	nop
    ff42:	3708      	adds	r7, #8
    ff44:	46bd      	mov	sp, r7
    ff46:	bdb0      	pop	{r4, r5, r7, pc}
    ff48:	20008020 	.word	0x20008020
    ff4c:	2000158c 	.word	0x2000158c
    ff50:	00010201 	.word	0x00010201
    ff54:	20000000 	.word	0x20000000
    ff58:	0001021d 	.word	0x0001021d
    ff5c:	000113d5 	.word	0x000113d5
    ff60:	200015a0 	.word	0x200015a0
    ff64:	00010543 	.word	0x00010543
    ff68:	0000feb9 	.word	0x0000feb9
    ff6c:	200015d8 	.word	0x200015d8
    ff70:	0000fdd5 	.word	0x0000fdd5
    ff74:	0000fdfd 	.word	0x0000fdfd

0000ff78 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
    ff78:	b580      	push	{r7, lr}
    ff7a:	af00      	add	r7, sp, #0
    ff7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ff80:	2001      	movs	r0, #1
    ff82:	4b01      	ldr	r3, [pc, #4]	; (ff88 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
    ff84:	4798      	blx	r3
    ff86:	bd80      	pop	{r7, pc}
    ff88:	0000fee5 	.word	0x0000fee5

0000ff8c <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
    ff8c:	4770      	bx	lr

0000ff8e <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
    ff8e:	4770      	bx	lr

0000ff90 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
    ff90:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
    ff92:	2302      	movs	r3, #2
    ff94:	4801      	ldr	r0, [pc, #4]	; (ff9c <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
    ff96:	4c02      	ldr	r4, [pc, #8]	; (ffa0 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
    ff98:	47a0      	blx	r4
	return	r;
}
    ff9a:	bd10      	pop	{r4, pc}
    ff9c:	20007cb8 	.word	0x20007cb8
    ffa0:	0001105d 	.word	0x0001105d

0000ffa4 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
    ffa4:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
    ffa6:	4b03      	ldr	r3, [pc, #12]	; (ffb4 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
    ffa8:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
    ffaa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    ffae:	4b02      	ldr	r3, [pc, #8]	; (ffb8 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
    ffb0:	4798      	blx	r3
}
    ffb2:	bd08      	pop	{r3, pc}
    ffb4:	200015f4 	.word	0x200015f4
    ffb8:	0000ff91 	.word	0x0000ff91

0000ffbc <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    ffbc:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    ffbe:	2302      	movs	r3, #2
    ffc0:	4801      	ldr	r0, [pc, #4]	; (ffc8 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
    ffc2:	4c02      	ldr	r4, [pc, #8]	; (ffcc <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
    ffc4:	47a0      	blx	r4
	return	w;
}
    ffc6:	bd10      	pop	{r4, pc}
    ffc8:	20007cb8 	.word	0x20007cb8
    ffcc:	00011029 	.word	0x00011029

0000ffd0 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    ffd0:	b500      	push	{lr}
    ffd2:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
    ffd4:	4b07      	ldr	r3, [pc, #28]	; (fff4 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
    ffd6:	881b      	ldrh	r3, [r3, #0]
    ffd8:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    ffdc:	4b06      	ldr	r3, [pc, #24]	; (fff8 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
    ffde:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
    ffe0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    ffe4:	3202      	adds	r2, #2
    ffe6:	a901      	add	r1, sp, #4
    ffe8:	4b04      	ldr	r3, [pc, #16]	; (fffc <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
    ffea:	4798      	blx	r3
	return	w;
}
    ffec:	b003      	add	sp, #12
    ffee:	f85d fb04 	ldr.w	pc, [sp], #4
    fff2:	bf00      	nop
    fff4:	00011fd8 	.word	0x00011fd8
    fff8:	200015f4 	.word	0x200015f4
    fffc:	0000ffbd 	.word	0x0000ffbd

00010000 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   10000:	b510      	push	{r4, lr}
   10002:	4604      	mov	r4, r0
   10004:	30b8      	adds	r0, #184	; 0xb8
   10006:	4b03      	ldr	r3, [pc, #12]	; (10014 <STACK_SIZE+0x14>)
   10008:	4798      	blx	r3
   1000a:	4620      	mov	r0, r4
   1000c:	4b02      	ldr	r3, [pc, #8]	; (10018 <STACK_SIZE+0x18>)
   1000e:	4798      	blx	r3
{
} //~MemoryManagment_Class
   10010:	4620      	mov	r0, r4
   10012:	bd10      	pop	{r4, pc}
   10014:	0001014b 	.word	0x0001014b
   10018:	0000ff8f 	.word	0x0000ff8f

0001001c <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   1001c:	b538      	push	{r3, r4, r5, lr}
   1001e:	4604      	mov	r4, r0
   10020:	4b10      	ldr	r3, [pc, #64]	; (10064 <_ZN17MemoryFlash_ClassC1Ev+0x48>)
   10022:	4798      	blx	r3
   10024:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   10028:	4b0f      	ldr	r3, [pc, #60]	; (10068 <_ZN17MemoryFlash_ClassC1Ev+0x4c>)
   1002a:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   1002c:	f44f 7500 	mov.w	r5, #512	; 0x200
   10030:	462a      	mov	r2, r5
   10032:	2100      	movs	r1, #0
   10034:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   10038:	4b0c      	ldr	r3, [pc, #48]	; (1006c <_ZN17MemoryFlash_ClassC1Ev+0x50>)
   1003a:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   1003c:	2300      	movs	r3, #0
   1003e:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
   10042:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   10046:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
	_currentAddress=0;
   1004a:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	head=512;
   1004e:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	tail=0;
   10052:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	flashBuffer=&flashBufferStatic[0];
   10056:	4a06      	ldr	r2, [pc, #24]	; (10070 <_ZN17MemoryFlash_ClassC1Ev+0x54>)
   10058:	f245 33b4 	movw	r3, #21428	; 0x53b4
   1005c:	50e2      	str	r2, [r4, r3]
} //MemoryManagment_Class
   1005e:	4620      	mov	r0, r4
   10060:	bd38      	pop	{r3, r4, r5, pc}
   10062:	bf00      	nop
   10064:	0000ff8d 	.word	0x0000ff8d
   10068:	00010149 	.word	0x00010149
   1006c:	000117e9 	.word	0x000117e9
   10070:	200015f8 	.word	0x200015f8

00010074 <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   10074:	b538      	push	{r3, r4, r5, lr}
		if (qspiFlash.Init())
   10076:	480b      	ldr	r0, [pc, #44]	; (100a4 <_ZN17MemoryFlash_Class4InitEm+0x30>)
   10078:	4b0b      	ldr	r3, [pc, #44]	; (100a8 <_ZN17MemoryFlash_Class4InitEm+0x34>)
   1007a:	4798      	blx	r3
   1007c:	b940      	cbnz	r0, 10090 <_ZN17MemoryFlash_Class4InitEm+0x1c>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
   1007e:	4d0b      	ldr	r5, [pc, #44]	; (100ac <_ZN17MemoryFlash_Class4InitEm+0x38>)
   10080:	490b      	ldr	r1, [pc, #44]	; (100b0 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   10082:	4628      	mov	r0, r5
   10084:	4c0b      	ldr	r4, [pc, #44]	; (100b4 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   10086:	47a0      	blx	r4
   10088:	490b      	ldr	r1, [pc, #44]	; (100b8 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   1008a:	4628      	mov	r0, r5
   1008c:	47a0      	blx	r4
		{
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
}
   1008e:	bd38      	pop	{r3, r4, r5, pc}
   10090:	4d06      	ldr	r5, [pc, #24]	; (100ac <_ZN17MemoryFlash_Class4InitEm+0x38>)
   10092:	490a      	ldr	r1, [pc, #40]	; (100bc <_ZN17MemoryFlash_Class4InitEm+0x48>)
   10094:	4628      	mov	r0, r5
   10096:	4c07      	ldr	r4, [pc, #28]	; (100b4 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   10098:	47a0      	blx	r4
   1009a:	4907      	ldr	r1, [pc, #28]	; (100b8 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   1009c:	4628      	mov	r0, r5
   1009e:	47a0      	blx	r4
   100a0:	bd38      	pop	{r3, r4, r5, pc}
   100a2:	bf00      	nop
   100a4:	20007cb8 	.word	0x20007cb8
   100a8:	00010f8d 	.word	0x00010f8d
   100ac:	20001070 	.word	0x20001070
   100b0:	00011f80 	.word	0x00011f80
   100b4:	0000e52d 	.word	0x0000e52d
   100b8:	00011f7c 	.word	0x00011f7c
   100bc:	00011f5c 	.word	0x00011f5c

000100c0 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
		  return	w;
	 }

	 return	r;
 }
  uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   100c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   100c2:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   100c4:	4b10      	ldr	r3, [pc, #64]	; (10108 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   100c6:	681c      	ldr	r4, [r3, #0]
   100c8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   100cc:	f245 33b4 	movw	r3, #21428	; 0x53b4
   100d0:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   100d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   100d6:	4622      	mov	r2, r4
   100d8:	4629      	mov	r1, r5
   100da:	480c      	ldr	r0, [pc, #48]	; (1010c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   100dc:	4e0c      	ldr	r6, [pc, #48]	; (10110 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   100de:	47b0      	blx	r6
	  if (r==0)
   100e0:	4603      	mov	r3, r0
   100e2:	b108      	cbz	r0, 100e8 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   100e4:	4618      	mov	r0, r3
   100e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   100e8:	883b      	ldrh	r3, [r7, #0]
   100ea:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
   100ec:	4e07      	ldr	r6, [pc, #28]	; (1010c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   100ee:	4621      	mov	r1, r4
   100f0:	4630      	mov	r0, r6
   100f2:	4b08      	ldr	r3, [pc, #32]	; (10114 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   100f4:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   100f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   100fa:	4622      	mov	r2, r4
   100fc:	4629      	mov	r1, r5
   100fe:	4630      	mov	r0, r6
   10100:	4c05      	ldr	r4, [pc, #20]	; (10118 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   10102:	47a0      	blx	r4
   10104:	4603      	mov	r3, r0
		  return	w;
   10106:	e7ed      	b.n	100e4 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   10108:	200015f4 	.word	0x200015f4
   1010c:	20007cb8 	.word	0x20007cb8
   10110:	0001105d 	.word	0x0001105d
   10114:	00010ff9 	.word	0x00010ff9
   10118:	00011029 	.word	0x00011029

0001011c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
   1011c:	b510      	push	{r4, lr}
   1011e:	4c05      	ldr	r4, [pc, #20]	; (10134 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x18>)
   10120:	4620      	mov	r0, r4
   10122:	4b05      	ldr	r3, [pc, #20]	; (10138 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x1c>)
   10124:	4798      	blx	r3
   10126:	4a05      	ldr	r2, [pc, #20]	; (1013c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x20>)
   10128:	4905      	ldr	r1, [pc, #20]	; (10140 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x24>)
   1012a:	4620      	mov	r0, r4
   1012c:	4b05      	ldr	r3, [pc, #20]	; (10144 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x28>)
   1012e:	4798      	blx	r3
   10130:	bd10      	pop	{r4, pc}
   10132:	bf00      	nop
   10134:	200025f8 	.word	0x200025f8
   10138:	0001001d 	.word	0x0001001d
   1013c:	20000000 	.word	0x20000000
   10140:	00010001 	.word	0x00010001
   10144:	000113d5 	.word	0x000113d5

00010148 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   10148:	4770      	bx	lr

0001014a <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   1014a:	4770      	bx	lr

0001014c <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   1014c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1014e:	4607      	mov	r7, r0
   10150:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   10154:	d007      	beq.n	10166 <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   10156:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   1015a:	4e05      	ldr	r6, [pc, #20]	; (10170 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   1015c:	3c68      	subs	r4, #104	; 0x68
   1015e:	4620      	mov	r0, r4
   10160:	47b0      	blx	r6
   10162:	42a5      	cmp	r5, r4
   10164:	d1fa      	bne.n	1015c <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   10166:	4638      	mov	r0, r7
   10168:	4b02      	ldr	r3, [pc, #8]	; (10174 <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   1016a:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   1016c:	4638      	mov	r0, r7
   1016e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10170:	000109b1 	.word	0x000109b1
   10174:	000109b1 	.word	0x000109b1

00010178 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   10178:	b570      	push	{r4, r5, r6, lr}
   1017a:	4604      	mov	r4, r0
   1017c:	460e      	mov	r6, r1
   1017e:	4b0a      	ldr	r3, [pc, #40]	; (101a8 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x30>)
   10180:	4798      	blx	r3
   10182:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   10186:	4d09      	ldr	r5, [pc, #36]	; (101ac <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   10188:	47a8      	blx	r5
   1018a:	f504 7088 	add.w	r0, r4, #272	; 0x110
   1018e:	47a8      	blx	r5
   10190:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   10194:	47a8      	blx	r5
		spiLite=&ltSPI;
   10196:	4b06      	ldr	r3, [pc, #24]	; (101b0 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   10198:	1d1a      	adds	r2, r3, #4
   1019a:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   1019e:	601c      	str	r4, [r3, #0]
		SPIA=SPI_LTC;
   101a0:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   101a4:	4620      	mov	r0, r4
   101a6:	bd70      	pop	{r4, r5, r6, pc}
   101a8:	0001099d 	.word	0x0001099d
   101ac:	0001099d 	.word	0x0001099d
   101b0:	200079b0 	.word	0x200079b0

000101b4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
	return module[m].ready;
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   101b4:	b570      	push	{r4, r5, r6, lr}
static LT_SPI	ltSPI;
   101b6:	4c0a      	ldr	r4, [pc, #40]	; (101e0 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x2c>)
   101b8:	1d25      	adds	r5, r4, #4
   101ba:	4628      	mov	r0, r5
   101bc:	4b09      	ldr	r3, [pc, #36]	; (101e4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x30>)
   101be:	4798      	blx	r3
   101c0:	4e09      	ldr	r6, [pc, #36]	; (101e8 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x34>)
   101c2:	4632      	mov	r2, r6
   101c4:	4909      	ldr	r1, [pc, #36]	; (101ec <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x38>)
   101c6:	4628      	mov	r0, r5
   101c8:	4d09      	ldr	r5, [pc, #36]	; (101f0 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x3c>)
   101ca:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   101cc:	3418      	adds	r4, #24
   101ce:	4909      	ldr	r1, [pc, #36]	; (101f4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x40>)
   101d0:	4620      	mov	r0, r4
   101d2:	4b09      	ldr	r3, [pc, #36]	; (101f8 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x44>)
   101d4:	4798      	blx	r3
   101d6:	4632      	mov	r2, r6
   101d8:	4908      	ldr	r1, [pc, #32]	; (101fc <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x48>)
   101da:	4620      	mov	r0, r4
   101dc:	47a8      	blx	r5
   101de:	bd70      	pop	{r4, r5, r6, pc}
   101e0:	200079b0 	.word	0x200079b0
   101e4:	000109c5 	.word	0x000109c5
   101e8:	20000000 	.word	0x20000000
   101ec:	000109ed 	.word	0x000109ed
   101f0:	000113d5 	.word	0x000113d5
   101f4:	20007f20 	.word	0x20007f20
   101f8:	00010179 	.word	0x00010179
   101fc:	0001014d 	.word	0x0001014d

00010200 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
   10200:	b480      	push	{r7}
   10202:	b083      	sub	sp, #12
   10204:	af00      	add	r7, sp, #0
   10206:	6078      	str	r0, [r7, #4]
   10208:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
   1020a:	687b      	ldr	r3, [r7, #4]
   1020c:	683a      	ldr	r2, [r7, #0]
   1020e:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
   10210:	687b      	ldr	r3, [r7, #4]
   10212:	4618      	mov	r0, r3
   10214:	370c      	adds	r7, #12
   10216:	46bd      	mov	sp, r7
   10218:	bc80      	pop	{r7}
   1021a:	4770      	bx	lr

0001021c <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
   1021c:	b480      	push	{r7}
   1021e:	b083      	sub	sp, #12
   10220:	af00      	add	r7, sp, #0
   10222:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
   10224:	687b      	ldr	r3, [r7, #4]
   10226:	4618      	mov	r0, r3
   10228:	370c      	adds	r7, #12
   1022a:	46bd      	mov	sp, r7
   1022c:	bc80      	pop	{r7}
   1022e:	4770      	bx	lr

00010230 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
   10230:	b580      	push	{r7, lr}
   10232:	b084      	sub	sp, #16
   10234:	af00      	add	r7, sp, #0
   10236:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
   10238:	687b      	ldr	r3, [r7, #4]
   1023a:	4a14      	ldr	r2, [pc, #80]	; (1028c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   1023c:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
   1023e:	687b      	ldr	r3, [r7, #4]
   10240:	4a12      	ldr	r2, [pc, #72]	; (1028c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   10242:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
   10244:	687b      	ldr	r3, [r7, #4]
   10246:	691a      	ldr	r2, [r3, #16]
   10248:	687b      	ldr	r3, [r7, #4]
   1024a:	330c      	adds	r3, #12
   1024c:	4619      	mov	r1, r3
   1024e:	4610      	mov	r0, r2
   10250:	4b0f      	ldr	r3, [pc, #60]	; (10290 <_ZN14I2C_Sync_Class4InitEv+0x60>)
   10252:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   10254:	687b      	ldr	r3, [r7, #4]
   10256:	691b      	ldr	r3, [r3, #16]
   10258:	4618      	mov	r0, r3
   1025a:	4b0e      	ldr	r3, [pc, #56]	; (10294 <_ZN14I2C_Sync_Class4InitEv+0x64>)
   1025c:	4798      	blx	r3
   1025e:	4603      	mov	r3, r0
   10260:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
   10262:	7bfb      	ldrb	r3, [r7, #15]
   10264:	2b00      	cmp	r3, #0
   10266:	bf0c      	ite	eq
   10268:	2301      	moveq	r3, #1
   1026a:	2300      	movne	r3, #0
   1026c:	b2da      	uxtb	r2, r3
   1026e:	687b      	ldr	r3, [r7, #4]
   10270:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
   10272:	687b      	ldr	r3, [r7, #4]
   10274:	7a5b      	ldrb	r3, [r3, #9]
   10276:	b2da      	uxtb	r2, r3
   10278:	687b      	ldr	r3, [r7, #4]
   1027a:	721a      	strb	r2, [r3, #8]
	return isOK;
   1027c:	687b      	ldr	r3, [r7, #4]
   1027e:	7a5b      	ldrb	r3, [r3, #9]
   10280:	b2db      	uxtb	r3, r3
	
}
   10282:	4618      	mov	r0, r3
   10284:	3710      	adds	r7, #16
   10286:	46bd      	mov	sp, r7
   10288:	bd80      	pop	{r7, pc}
   1028a:	bf00      	nop
   1028c:	20007bc0 	.word	0x20007bc0
   10290:	00002afb 	.word	0x00002afb
   10294:	00002aa1 	.word	0x00002aa1

00010298 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
   10298:	b580      	push	{r7, lr}
   1029a:	b082      	sub	sp, #8
   1029c:	af00      	add	r7, sp, #0
   1029e:	6078      	str	r0, [r7, #4]
   102a0:	460b      	mov	r3, r1
   102a2:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
   102a4:	687b      	ldr	r3, [r7, #4]
   102a6:	691b      	ldr	r3, [r3, #16]
   102a8:	78fa      	ldrb	r2, [r7, #3]
   102aa:	b211      	sxth	r1, r2
   102ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   102b0:	4618      	mov	r0, r3
   102b2:	4b03      	ldr	r3, [pc, #12]	; (102c0 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
   102b4:	4798      	blx	r3
   102b6:	4603      	mov	r3, r0
}
   102b8:	4618      	mov	r0, r3
   102ba:	3708      	adds	r7, #8
   102bc:	46bd      	mov	sp, r7
   102be:	bd80      	pop	{r7, pc}
   102c0:	00002ac1 	.word	0x00002ac1

000102c4 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
   102c4:	b580      	push	{r7, lr}
   102c6:	b086      	sub	sp, #24
   102c8:	af00      	add	r7, sp, #0
   102ca:	60f8      	str	r0, [r7, #12]
   102cc:	60b9      	str	r1, [r7, #8]
   102ce:	4613      	mov	r3, r2
   102d0:	80fb      	strh	r3, [r7, #6]
	Irq_Disable();
   102d2:	68f8      	ldr	r0, [r7, #12]
   102d4:	4b08      	ldr	r3, [pc, #32]	; (102f8 <_ZN14I2C_Sync_Class5WriteEPht+0x34>)
   102d6:	4798      	blx	r3
	int32_t w= io_write(I2C_io, buffer, lenght);
   102d8:	68fb      	ldr	r3, [r7, #12]
   102da:	68db      	ldr	r3, [r3, #12]
   102dc:	88fa      	ldrh	r2, [r7, #6]
   102de:	68b9      	ldr	r1, [r7, #8]
   102e0:	4618      	mov	r0, r3
   102e2:	4b06      	ldr	r3, [pc, #24]	; (102fc <_ZN14I2C_Sync_Class5WriteEPht+0x38>)
   102e4:	4798      	blx	r3
   102e6:	6178      	str	r0, [r7, #20]
	Irq_Enable();
   102e8:	68f8      	ldr	r0, [r7, #12]
   102ea:	4b05      	ldr	r3, [pc, #20]	; (10300 <_ZN14I2C_Sync_Class5WriteEPht+0x3c>)
   102ec:	4798      	blx	r3
	return w;
   102ee:	697b      	ldr	r3, [r7, #20]
}
   102f0:	4618      	mov	r0, r3
   102f2:	3718      	adds	r7, #24
   102f4:	46bd      	mov	sp, r7
   102f6:	bd80      	pop	{r7, pc}
   102f8:	0001035d 	.word	0x0001035d
   102fc:	00011335 	.word	0x00011335
   10300:	00010345 	.word	0x00010345

00010304 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
   10304:	b580      	push	{r7, lr}
   10306:	b086      	sub	sp, #24
   10308:	af00      	add	r7, sp, #0
   1030a:	60f8      	str	r0, [r7, #12]
   1030c:	60b9      	str	r1, [r7, #8]
   1030e:	4613      	mov	r3, r2
   10310:	80fb      	strh	r3, [r7, #6]
	Irq_Disable();
   10312:	68f8      	ldr	r0, [r7, #12]
   10314:	4b08      	ldr	r3, [pc, #32]	; (10338 <_ZN14I2C_Sync_Class4ReadEPht+0x34>)
   10316:	4798      	blx	r3
	int32_t r= io_read(I2C_io, buffer, lenght);
   10318:	68fb      	ldr	r3, [r7, #12]
   1031a:	68db      	ldr	r3, [r3, #12]
   1031c:	88fa      	ldrh	r2, [r7, #6]
   1031e:	68b9      	ldr	r1, [r7, #8]
   10320:	4618      	mov	r0, r3
   10322:	4b06      	ldr	r3, [pc, #24]	; (1033c <_ZN14I2C_Sync_Class4ReadEPht+0x38>)
   10324:	4798      	blx	r3
   10326:	6178      	str	r0, [r7, #20]
	Irq_Enable();
   10328:	68f8      	ldr	r0, [r7, #12]
   1032a:	4b05      	ldr	r3, [pc, #20]	; (10340 <_ZN14I2C_Sync_Class4ReadEPht+0x3c>)
   1032c:	4798      	blx	r3
	return r;
   1032e:	697b      	ldr	r3, [r7, #20]
}
   10330:	4618      	mov	r0, r3
   10332:	3718      	adds	r7, #24
   10334:	46bd      	mov	sp, r7
   10336:	bd80      	pop	{r7, pc}
   10338:	0001035d 	.word	0x0001035d
   1033c:	00011385 	.word	0x00011385
   10340:	00010345 	.word	0x00010345

00010344 <_ZN14I2C_Sync_Class10Irq_EnableEv>:
	Irq_Disable();
	int32_t w= i2c_m_sync_cmd_write(ptrI2CDescr,cmd,buffer,lenght);
	Irq_Enable();
	return w;
}
void	I2C_Sync_Class::Irq_Enable(void){
   10344:	b480      	push	{r7}
   10346:	b083      	sub	sp, #12
   10348:	af00      	add	r7, sp, #0
   1034a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   1034c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10350:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
   10352:	bf00      	nop
   10354:	370c      	adds	r7, #12
   10356:	46bd      	mov	sp, r7
   10358:	bc80      	pop	{r7}
   1035a:	4770      	bx	lr

0001035c <_ZN14I2C_Sync_Class11Irq_DisableEv>:
void	I2C_Sync_Class::Irq_Disable(void){
   1035c:	b480      	push	{r7}
   1035e:	b083      	sub	sp, #12
   10360:	af00      	add	r7, sp, #0
   10362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   10364:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   10368:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
   1036a:	bf00      	nop
   1036c:	370c      	adds	r7, #12
   1036e:	46bd      	mov	sp, r7
   10370:	bc80      	pop	{r7}
   10372:	4770      	bx	lr

00010374 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   10374:	b480      	push	{r7}
   10376:	b083      	sub	sp, #12
   10378:	af00      	add	r7, sp, #0
   1037a:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   1037c:	687b      	ldr	r3, [r7, #4]
   1037e:	4618      	mov	r0, r3
   10380:	370c      	adds	r7, #12
   10382:	46bd      	mov	sp, r7
   10384:	bc80      	pop	{r7}
   10386:	4770      	bx	lr

00010388 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   10388:	b480      	push	{r7}
   1038a:	b083      	sub	sp, #12
   1038c:	af00      	add	r7, sp, #0
   1038e:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   10390:	687b      	ldr	r3, [r7, #4]
   10392:	4618      	mov	r0, r3
   10394:	370c      	adds	r7, #12
   10396:	46bd      	mov	sp, r7
   10398:	bc80      	pop	{r7}
   1039a:	4770      	bx	lr

0001039c <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   1039c:	b480      	push	{r7}
   1039e:	b085      	sub	sp, #20
   103a0:	af00      	add	r7, sp, #0
   103a2:	6078      	str	r0, [r7, #4]
   103a4:	460b      	mov	r3, r1
   103a6:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   103a8:	2300      	movs	r3, #0
   103aa:	73fb      	strb	r3, [r7, #15]
   103ac:	7bfb      	ldrb	r3, [r7, #15]
   103ae:	2b01      	cmp	r3, #1
   103b0:	dc13      	bgt.n	103da <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   103b2:	7bfb      	ldrb	r3, [r7, #15]
   103b4:	78f9      	ldrb	r1, [r7, #3]
   103b6:	7bfa      	ldrb	r2, [r7, #15]
   103b8:	2080      	movs	r0, #128	; 0x80
   103ba:	fa40 f202 	asr.w	r2, r0, r2
   103be:	400a      	ands	r2, r1
   103c0:	2a00      	cmp	r2, #0
   103c2:	bfcc      	ite	gt
   103c4:	2201      	movgt	r2, #1
   103c6:	2200      	movle	r2, #0
   103c8:	b2d1      	uxtb	r1, r2
   103ca:	687a      	ldr	r2, [r7, #4]
   103cc:	4413      	add	r3, r2
   103ce:	460a      	mov	r2, r1
   103d0:	751a      	strb	r2, [r3, #20]
	for (uint8_t ii = 0; ii < 2; ii++)
   103d2:	7bfb      	ldrb	r3, [r7, #15]
   103d4:	3301      	adds	r3, #1
   103d6:	73fb      	strb	r3, [r7, #15]
   103d8:	e7e8      	b.n	103ac <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   103da:	bf00      	nop
   103dc:	3714      	adds	r7, #20
   103de:	46bd      	mov	sp, r7
   103e0:	bc80      	pop	{r7}
   103e2:	4770      	bx	lr

000103e4 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   103e4:	b480      	push	{r7}
   103e6:	b085      	sub	sp, #20
   103e8:	af00      	add	r7, sp, #0
   103ea:	6078      	str	r0, [r7, #4]
   103ec:	460b      	mov	r3, r1
   103ee:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   103f0:	2300      	movs	r3, #0
   103f2:	73fb      	strb	r3, [r7, #15]
   103f4:	7bfb      	ldrb	r3, [r7, #15]
   103f6:	2b02      	cmp	r3, #2
   103f8:	dc15      	bgt.n	10426 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   103fa:	7bfb      	ldrb	r3, [r7, #15]
   103fc:	f1c3 0302 	rsb	r3, r3, #2
   10400:	78f9      	ldrb	r1, [r7, #3]
   10402:	7bfa      	ldrb	r2, [r7, #15]
   10404:	2020      	movs	r0, #32
   10406:	fa40 f202 	asr.w	r2, r0, r2
   1040a:	400a      	ands	r2, r1
   1040c:	2a00      	cmp	r2, #0
   1040e:	bfcc      	ite	gt
   10410:	2201      	movgt	r2, #1
   10412:	2200      	movle	r2, #0
   10414:	b2d1      	uxtb	r1, r2
   10416:	687a      	ldr	r2, [r7, #4]
   10418:	4413      	add	r3, r2
   1041a:	460a      	mov	r2, r1
   1041c:	759a      	strb	r2, [r3, #22]
	for (uint8_t ii = 0; ii < 3; ii++)
   1041e:	7bfb      	ldrb	r3, [r7, #15]
   10420:	3301      	adds	r3, #1
   10422:	73fb      	strb	r3, [r7, #15]
   10424:	e7e6      	b.n	103f4 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   10426:	bf00      	nop
   10428:	3714      	adds	r7, #20
   1042a:	46bd      	mov	sp, r7
   1042c:	bc80      	pop	{r7}
   1042e:	4770      	bx	lr

00010430 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   10430:	b580      	push	{r7, lr}
   10432:	b084      	sub	sp, #16
   10434:	af00      	add	r7, sp, #0
   10436:	60f8      	str	r0, [r7, #12]
   10438:	60b9      	str	r1, [r7, #8]
   1043a:	4613      	mov	r3, r2
   1043c:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   1043e:	79fb      	ldrb	r3, [r7, #7]
   10440:	4619      	mov	r1, r3
   10442:	68b8      	ldr	r0, [r7, #8]
   10444:	4b0d      	ldr	r3, [pc, #52]	; (1047c <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   10446:	4798      	blx	r3
	FillLimitSwitch(v);
   10448:	79fb      	ldrb	r3, [r7, #7]
   1044a:	4619      	mov	r1, r3
   1044c:	68b8      	ldr	r0, [r7, #8]
   1044e:	4b0c      	ldr	r3, [pc, #48]	; (10480 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   10450:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   10452:	79fb      	ldrb	r3, [r7, #7]
   10454:	f003 0301 	and.w	r3, r3, #1
   10458:	2b00      	cmp	r3, #0
   1045a:	bfcc      	ite	gt
   1045c:	2301      	movgt	r3, #1
   1045e:	2300      	movle	r3, #0
   10460:	b2da      	uxtb	r2, r3
   10462:	68bb      	ldr	r3, [r7, #8]
   10464:	765a      	strb	r2, [r3, #25]
	return controlStatus;
   10466:	68fa      	ldr	r2, [r7, #12]
   10468:	68bb      	ldr	r3, [r7, #8]
   1046a:	3314      	adds	r3, #20
   1046c:	6819      	ldr	r1, [r3, #0]
   1046e:	6011      	str	r1, [r2, #0]
   10470:	889b      	ldrh	r3, [r3, #4]
   10472:	8093      	strh	r3, [r2, #4]
}
   10474:	68f8      	ldr	r0, [r7, #12]
   10476:	3710      	adds	r7, #16
   10478:	46bd      	mov	sp, r7
   1047a:	bd80      	pop	{r7, pc}
   1047c:	0001039d 	.word	0x0001039d
   10480:	000103e5 	.word	0x000103e5

00010484 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   10484:	b480      	push	{r7}
   10486:	b085      	sub	sp, #20
   10488:	af00      	add	r7, sp, #0
   1048a:	60f8      	str	r0, [r7, #12]
   1048c:	60b9      	str	r1, [r7, #8]
   1048e:	4613      	mov	r3, r2
   10490:	71fb      	strb	r3, [r7, #7]
	
	if ( STANDALONE > 0)
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
   10492:	68bb      	ldr	r3, [r7, #8]
   10494:	7d1a      	ldrb	r2, [r3, #20]
   10496:	68bb      	ldr	r3, [r7, #8]
   10498:	769a      	strb	r2, [r3, #26]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   1049a:	79fb      	ldrb	r3, [r7, #7]
   1049c:	f003 0340 	and.w	r3, r3, #64	; 0x40
   104a0:	2b00      	cmp	r3, #0
   104a2:	bfcc      	ite	gt
   104a4:	2301      	movgt	r3, #1
   104a6:	2300      	movle	r3, #0
   104a8:	b2da      	uxtb	r2, r3
   104aa:	68bb      	ldr	r3, [r7, #8]
   104ac:	76da      	strb	r2, [r3, #27]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   104ae:	79fb      	ldrb	r3, [r7, #7]
   104b0:	f003 0320 	and.w	r3, r3, #32
   104b4:	2b00      	cmp	r3, #0
   104b6:	bfcc      	ite	gt
   104b8:	2301      	movgt	r3, #1
   104ba:	2300      	movle	r3, #0
   104bc:	b2da      	uxtb	r2, r3
   104be:	68bb      	ldr	r3, [r7, #8]
   104c0:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   104c2:	79fb      	ldrb	r3, [r7, #7]
   104c4:	f003 0310 	and.w	r3, r3, #16
   104c8:	2b00      	cmp	r3, #0
   104ca:	bfcc      	ite	gt
   104cc:	2301      	movgt	r3, #1
   104ce:	2300      	movle	r3, #0
   104d0:	b2da      	uxtb	r2, r3
   104d2:	68bb      	ldr	r3, [r7, #8]
   104d4:	771a      	strb	r2, [r3, #28]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   104d6:	79fb      	ldrb	r3, [r7, #7]
   104d8:	f003 0308 	and.w	r3, r3, #8
   104dc:	2b00      	cmp	r3, #0
   104de:	bfcc      	ite	gt
   104e0:	2301      	movgt	r3, #1
   104e2:	2300      	movle	r3, #0
   104e4:	b2da      	uxtb	r2, r3
   104e6:	68bb      	ldr	r3, [r7, #8]
   104e8:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   104ea:	79fb      	ldrb	r3, [r7, #7]
   104ec:	f003 0304 	and.w	r3, r3, #4
   104f0:	2b00      	cmp	r3, #0
   104f2:	bfcc      	ite	gt
   104f4:	2301      	movgt	r3, #1
   104f6:	2300      	movle	r3, #0
   104f8:	b2da      	uxtb	r2, r3
   104fa:	68bb      	ldr	r3, [r7, #8]
   104fc:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   104fe:	79fb      	ldrb	r3, [r7, #7]
   10500:	f003 0302 	and.w	r3, r3, #2
   10504:	2b00      	cmp	r3, #0
   10506:	bfcc      	ite	gt
   10508:	2301      	movgt	r3, #1
   1050a:	2300      	movle	r3, #0
   1050c:	b2da      	uxtb	r2, r3
   1050e:	68bb      	ldr	r3, [r7, #8]
   10510:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   10514:	79fb      	ldrb	r3, [r7, #7]
   10516:	f003 0301 	and.w	r3, r3, #1
   1051a:	2b00      	cmp	r3, #0
   1051c:	bfcc      	ite	gt
   1051e:	2301      	movgt	r3, #1
   10520:	2300      	movle	r3, #0
   10522:	b2da      	uxtb	r2, r3
   10524:	68bb      	ldr	r3, [r7, #8]
   10526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return controlOutputs;
   1052a:	68fa      	ldr	r2, [r7, #12]
   1052c:	68bb      	ldr	r3, [r7, #8]
   1052e:	331a      	adds	r3, #26
   10530:	6819      	ldr	r1, [r3, #0]
   10532:	685b      	ldr	r3, [r3, #4]
   10534:	6011      	str	r1, [r2, #0]
   10536:	6053      	str	r3, [r2, #4]
   10538:	68f8      	ldr	r0, [r7, #12]
   1053a:	3714      	adds	r7, #20
   1053c:	46bd      	mov	sp, r7
   1053e:	bc80      	pop	{r7}
   10540:	4770      	bx	lr

00010542 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   10542:	b480      	push	{r7}
   10544:	b083      	sub	sp, #12
   10546:	af00      	add	r7, sp, #0
   10548:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   1054a:	687b      	ldr	r3, [r7, #4]
   1054c:	4618      	mov	r0, r3
   1054e:	370c      	adds	r7, #12
   10550:	46bd      	mov	sp, r7
   10552:	bc80      	pop	{r7}
   10554:	4770      	bx	lr

00010556 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   10556:	b480      	push	{r7}
   10558:	b083      	sub	sp, #12
   1055a:	af00      	add	r7, sp, #0
   1055c:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   1055e:	687b      	ldr	r3, [r7, #4]
   10560:	4618      	mov	r0, r3
   10562:	370c      	adds	r7, #12
   10564:	46bd      	mov	sp, r7
   10566:	bc80      	pop	{r7}
   10568:	4770      	bx	lr

0001056a <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
	//i2cClass=i2c;
	isOK=i2cClass->isOK;
	return isOK;
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
   1056a:	b480      	push	{r7}
   1056c:	b085      	sub	sp, #20
   1056e:	af00      	add	r7, sp, #0
   10570:	60f8      	str	r0, [r7, #12]
   10572:	460b      	mov	r3, r1
   10574:	607a      	str	r2, [r7, #4]
   10576:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   10578:	687b      	ldr	r3, [r7, #4]
   1057a:	681a      	ldr	r2, [r3, #0]
   1057c:	68fb      	ldr	r3, [r7, #12]
   1057e:	615a      	str	r2, [r3, #20]
	rxBuffer=i2c->rxBuffer;
   10580:	687b      	ldr	r3, [r7, #4]
   10582:	685a      	ldr	r2, [r3, #4]
   10584:	68fb      	ldr	r3, [r7, #12]
   10586:	619a      	str	r2, [r3, #24]
	i2cAddress=addr;
   10588:	68fb      	ldr	r3, [r7, #12]
   1058a:	7afa      	ldrb	r2, [r7, #11]
   1058c:	731a      	strb	r2, [r3, #12]
	i2cClass=i2c;
   1058e:	68fb      	ldr	r3, [r7, #12]
   10590:	687a      	ldr	r2, [r7, #4]
   10592:	611a      	str	r2, [r3, #16]
	isOK=i2cClass->isOK;
   10594:	68fb      	ldr	r3, [r7, #12]
   10596:	691b      	ldr	r3, [r3, #16]
   10598:	7a5b      	ldrb	r3, [r3, #9]
   1059a:	b2da      	uxtb	r2, r3
   1059c:	68fb      	ldr	r3, [r7, #12]
   1059e:	729a      	strb	r2, [r3, #10]
	return isOK;
   105a0:	68fb      	ldr	r3, [r7, #12]
   105a2:	7a9b      	ldrb	r3, [r3, #10]
   105a4:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   105a6:	4618      	mov	r0, r3
   105a8:	3714      	adds	r7, #20
   105aa:	46bd      	mov	sp, r7
   105ac:	bc80      	pop	{r7}
   105ae:	4770      	bx	lr

000105b0 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   105b0:	b480      	push	{r7}
   105b2:	b083      	sub	sp, #12
   105b4:	af00      	add	r7, sp, #0
   105b6:	6078      	str	r0, [r7, #4]
   105b8:	460b      	mov	r3, r1
   105ba:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   105bc:	78fb      	ldrb	r3, [r7, #3]
   105be:	f003 0307 	and.w	r3, r3, #7
   105c2:	b2db      	uxtb	r3, r3
}
   105c4:	4618      	mov	r0, r3
   105c6:	370c      	adds	r7, #12
   105c8:	46bd      	mov	sp, r7
   105ca:	bc80      	pop	{r7}
   105cc:	4770      	bx	lr

000105ce <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   105ce:	b480      	push	{r7}
   105d0:	b083      	sub	sp, #12
   105d2:	af00      	add	r7, sp, #0
   105d4:	6078      	str	r0, [r7, #4]
   105d6:	4608      	mov	r0, r1
   105d8:	4611      	mov	r1, r2
   105da:	461a      	mov	r2, r3
   105dc:	4603      	mov	r3, r0
   105de:	70fb      	strb	r3, [r7, #3]
   105e0:	460b      	mov	r3, r1
   105e2:	70bb      	strb	r3, [r7, #2]
   105e4:	4613      	mov	r3, r2
   105e6:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
   105e8:	78fb      	ldrb	r3, [r7, #3]
   105ea:	2b07      	cmp	r3, #7
   105ec:	dc01      	bgt.n	105f2 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
   105ee:	78bb      	ldrb	r3, [r7, #2]
   105f0:	e000      	b.n	105f4 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
   105f2:	787b      	ldrb	r3, [r7, #1]
}
   105f4:	4618      	mov	r0, r3
   105f6:	370c      	adds	r7, #12
   105f8:	46bd      	mov	sp, r7
   105fa:	bc80      	pop	{r7}
   105fc:	4770      	bx	lr
	...

00010600 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   10600:	b580      	push	{r7, lr}
   10602:	b082      	sub	sp, #8
   10604:	af00      	add	r7, sp, #0
   10606:	6078      	str	r0, [r7, #4]
   10608:	460b      	mov	r3, r1
   1060a:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   1060c:	687b      	ldr	r3, [r7, #4]
   1060e:	691a      	ldr	r2, [r3, #16]
   10610:	687b      	ldr	r3, [r7, #4]
   10612:	7b1b      	ldrb	r3, [r3, #12]
   10614:	4619      	mov	r1, r3
   10616:	4610      	mov	r0, r2
   10618:	4b0b      	ldr	r3, [pc, #44]	; (10648 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   1061a:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   1061c:	687b      	ldr	r3, [r7, #4]
   1061e:	691b      	ldr	r3, [r3, #16]
   10620:	1cf9      	adds	r1, r7, #3
   10622:	2201      	movs	r2, #1
   10624:	4618      	mov	r0, r3
   10626:	4b09      	ldr	r3, [pc, #36]	; (1064c <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   10628:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   1062a:	687b      	ldr	r3, [r7, #4]
   1062c:	6918      	ldr	r0, [r3, #16]
   1062e:	687b      	ldr	r3, [r7, #4]
   10630:	3304      	adds	r3, #4
   10632:	2201      	movs	r2, #1
   10634:	4619      	mov	r1, r3
   10636:	4b06      	ldr	r3, [pc, #24]	; (10650 <_ZN14MCP23008_Class12readRegisterEh+0x50>)
   10638:	4798      	blx	r3

	return registerValue;
   1063a:	687b      	ldr	r3, [r7, #4]
   1063c:	791b      	ldrb	r3, [r3, #4]
}
   1063e:	4618      	mov	r0, r3
   10640:	3708      	adds	r7, #8
   10642:	46bd      	mov	sp, r7
   10644:	bd80      	pop	{r7, pc}
   10646:	bf00      	nop
   10648:	00010299 	.word	0x00010299
   1064c:	000102c5 	.word	0x000102c5
   10650:	00010305 	.word	0x00010305

00010654 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   10654:	b580      	push	{r7, lr}
   10656:	b084      	sub	sp, #16
   10658:	af00      	add	r7, sp, #0
   1065a:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   1065c:	687b      	ldr	r3, [r7, #4]
   1065e:	691a      	ldr	r2, [r3, #16]
   10660:	687b      	ldr	r3, [r7, #4]
   10662:	7b1b      	ldrb	r3, [r3, #12]
   10664:	4619      	mov	r1, r3
   10666:	4610      	mov	r0, r2
   10668:	4b06      	ldr	r3, [pc, #24]	; (10684 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   1066a:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
   1066c:	2109      	movs	r1, #9
   1066e:	6878      	ldr	r0, [r7, #4]
   10670:	4b05      	ldr	r3, [pc, #20]	; (10688 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
   10672:	4798      	blx	r3
   10674:	4603      	mov	r3, r0
   10676:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
   10678:	7bfb      	ldrb	r3, [r7, #15]
}
   1067a:	4618      	mov	r0, r3
   1067c:	3710      	adds	r7, #16
   1067e:	46bd      	mov	sp, r7
   10680:	bd80      	pop	{r7, pc}
   10682:	bf00      	nop
   10684:	00010299 	.word	0x00010299
   10688:	00010601 	.word	0x00010601

0001068c <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   1068c:	b580      	push	{r7, lr}
   1068e:	b084      	sub	sp, #16
   10690:	af00      	add	r7, sp, #0
   10692:	6078      	str	r0, [r7, #4]
   10694:	460b      	mov	r3, r1
   10696:	70fb      	strb	r3, [r7, #3]
   10698:	4613      	mov	r3, r2
   1069a:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   1069c:	687b      	ldr	r3, [r7, #4]
   1069e:	691a      	ldr	r2, [r3, #16]
   106a0:	687b      	ldr	r3, [r7, #4]
   106a2:	7b1b      	ldrb	r3, [r3, #12]
   106a4:	4619      	mov	r1, r3
   106a6:	4610      	mov	r0, r2
   106a8:	4b09      	ldr	r3, [pc, #36]	; (106d0 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   106aa:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   106ac:	78fb      	ldrb	r3, [r7, #3]
   106ae:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   106b0:	78bb      	ldrb	r3, [r7, #2]
   106b2:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   106b4:	687b      	ldr	r3, [r7, #4]
   106b6:	691b      	ldr	r3, [r3, #16]
   106b8:	f107 010c 	add.w	r1, r7, #12
   106bc:	2202      	movs	r2, #2
   106be:	4618      	mov	r0, r3
   106c0:	4b04      	ldr	r3, [pc, #16]	; (106d4 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   106c2:	4798      	blx	r3
   106c4:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   106c6:	4618      	mov	r0, r3
   106c8:	3710      	adds	r7, #16
   106ca:	46bd      	mov	sp, r7
   106cc:	bd80      	pop	{r7, pc}
   106ce:	bf00      	nop
   106d0:	00010299 	.word	0x00010299
   106d4:	000102c5 	.word	0x000102c5

000106d8 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   106d8:	b580      	push	{r7, lr}
   106da:	b082      	sub	sp, #8
   106dc:	af00      	add	r7, sp, #0
   106de:	6078      	str	r0, [r7, #4]
   106e0:	460b      	mov	r3, r1
   106e2:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   106e4:	687b      	ldr	r3, [r7, #4]
   106e6:	691a      	ldr	r2, [r3, #16]
   106e8:	687b      	ldr	r3, [r7, #4]
   106ea:	7b1b      	ldrb	r3, [r3, #12]
   106ec:	4619      	mov	r1, r3
   106ee:	4610      	mov	r0, r2
   106f0:	4b06      	ldr	r3, [pc, #24]	; (1070c <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
   106f2:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   106f4:	78fb      	ldrb	r3, [r7, #3]
   106f6:	461a      	mov	r2, r3
   106f8:	2109      	movs	r1, #9
   106fa:	6878      	ldr	r0, [r7, #4]
   106fc:	4b04      	ldr	r3, [pc, #16]	; (10710 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
   106fe:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
   10700:	78fb      	ldrb	r3, [r7, #3]
}
   10702:	4618      	mov	r0, r3
   10704:	3708      	adds	r7, #8
   10706:	46bd      	mov	sp, r7
   10708:	bd80      	pop	{r7, pc}
   1070a:	bf00      	nop
   1070c:	00010299 	.word	0x00010299
   10710:	0001068d 	.word	0x0001068d

00010714 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
   10714:	b580      	push	{r7, lr}
   10716:	b084      	sub	sp, #16
   10718:	af00      	add	r7, sp, #0
   1071a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   1071c:	2300      	movs	r3, #0
   1071e:	73fb      	strb	r3, [r7, #15]
   10720:	7bfb      	ldrb	r3, [r7, #15]
   10722:	2b07      	cmp	r3, #7
   10724:	dc0f      	bgt.n	10746 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
   10726:	7bfb      	ldrb	r3, [r7, #15]
   10728:	2201      	movs	r2, #1
   1072a:	4619      	mov	r1, r3
   1072c:	6878      	ldr	r0, [r7, #4]
   1072e:	4b08      	ldr	r3, [pc, #32]	; (10750 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
   10730:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
   10732:	7bfb      	ldrb	r3, [r7, #15]
   10734:	2201      	movs	r2, #1
   10736:	4619      	mov	r1, r3
   10738:	6878      	ldr	r0, [r7, #4]
   1073a:	4b06      	ldr	r3, [pc, #24]	; (10754 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
   1073c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   1073e:	7bfb      	ldrb	r3, [r7, #15]
   10740:	3301      	adds	r3, #1
   10742:	73fb      	strb	r3, [r7, #15]
   10744:	e7ec      	b.n	10720 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
   10746:	bf00      	nop
   10748:	3710      	adds	r7, #16
   1074a:	46bd      	mov	sp, r7
   1074c:	bd80      	pop	{r7, pc}
   1074e:	bf00      	nop
   10750:	0001088d 	.word	0x0001088d
   10754:	00010971 	.word	0x00010971

00010758 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   10758:	b580      	push	{r7, lr}
   1075a:	b084      	sub	sp, #16
   1075c:	af00      	add	r7, sp, #0
   1075e:	6078      	str	r0, [r7, #4]
   10760:	460b      	mov	r3, r1
   10762:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   10764:	78fb      	ldrb	r3, [r7, #3]
   10766:	2b00      	cmp	r3, #0
   10768:	dd23      	ble.n	107b2 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   1076a:	2300      	movs	r3, #0
   1076c:	73fb      	strb	r3, [r7, #15]
   1076e:	7bfb      	ldrb	r3, [r7, #15]
   10770:	2b07      	cmp	r3, #7
   10772:	dc21      	bgt.n	107b8 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   10774:	78fa      	ldrb	r2, [r7, #3]
   10776:	7bfb      	ldrb	r3, [r7, #15]
   10778:	fa42 f303 	asr.w	r3, r2, r3
   1077c:	f003 0301 	and.w	r3, r3, #1
   10780:	2b00      	cmp	r3, #0
   10782:	d00c      	beq.n	1079e <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   10784:	7bfb      	ldrb	r3, [r7, #15]
   10786:	2201      	movs	r2, #1
   10788:	4619      	mov	r1, r3
   1078a:	6878      	ldr	r0, [r7, #4]
   1078c:	4b0c      	ldr	r3, [pc, #48]	; (107c0 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   1078e:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   10790:	7bfb      	ldrb	r3, [r7, #15]
   10792:	2201      	movs	r2, #1
   10794:	4619      	mov	r1, r3
   10796:	6878      	ldr	r0, [r7, #4]
   10798:	4b0a      	ldr	r3, [pc, #40]	; (107c4 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   1079a:	4798      	blx	r3
   1079c:	e005      	b.n	107aa <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   1079e:	7bfb      	ldrb	r3, [r7, #15]
   107a0:	2200      	movs	r2, #0
   107a2:	4619      	mov	r1, r3
   107a4:	6878      	ldr	r0, [r7, #4]
   107a6:	4b06      	ldr	r3, [pc, #24]	; (107c0 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   107a8:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   107aa:	7bfb      	ldrb	r3, [r7, #15]
   107ac:	3301      	adds	r3, #1
   107ae:	73fb      	strb	r3, [r7, #15]
   107b0:	e7dd      	b.n	1076e <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   107b2:	6878      	ldr	r0, [r7, #4]
   107b4:	4b04      	ldr	r3, [pc, #16]	; (107c8 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   107b6:	4798      	blx	r3
	}
	
}
   107b8:	bf00      	nop
   107ba:	3710      	adds	r7, #16
   107bc:	46bd      	mov	sp, r7
   107be:	bd80      	pop	{r7, pc}
   107c0:	0001088d 	.word	0x0001088d
   107c4:	00010971 	.word	0x00010971
   107c8:	000107cd 	.word	0x000107cd

000107cc <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   107cc:	b580      	push	{r7, lr}
   107ce:	b084      	sub	sp, #16
   107d0:	af00      	add	r7, sp, #0
   107d2:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   107d4:	2300      	movs	r3, #0
   107d6:	73fb      	strb	r3, [r7, #15]
   107d8:	7bfb      	ldrb	r3, [r7, #15]
   107da:	2b07      	cmp	r3, #7
   107dc:	dc09      	bgt.n	107f2 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   107de:	7bfb      	ldrb	r3, [r7, #15]
   107e0:	2200      	movs	r2, #0
   107e2:	4619      	mov	r1, r3
   107e4:	6878      	ldr	r0, [r7, #4]
   107e6:	4b05      	ldr	r3, [pc, #20]	; (107fc <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   107e8:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   107ea:	7bfb      	ldrb	r3, [r7, #15]
   107ec:	3301      	adds	r3, #1
   107ee:	73fb      	strb	r3, [r7, #15]
   107f0:	e7f2      	b.n	107d8 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   107f2:	bf00      	nop
   107f4:	3710      	adds	r7, #16
   107f6:	46bd      	mov	sp, r7
   107f8:	bd80      	pop	{r7, pc}
   107fa:	bf00      	nop
   107fc:	0001088d 	.word	0x0001088d

00010800 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   10800:	b580      	push	{r7, lr}
   10802:	b084      	sub	sp, #16
   10804:	af00      	add	r7, sp, #0
   10806:	6078      	str	r0, [r7, #4]
   10808:	4608      	mov	r0, r1
   1080a:	4611      	mov	r1, r2
   1080c:	461a      	mov	r2, r3
   1080e:	4603      	mov	r3, r0
   10810:	70fb      	strb	r3, [r7, #3]
   10812:	460b      	mov	r3, r1
   10814:	70bb      	strb	r3, [r7, #2]
   10816:	4613      	mov	r3, r2
   10818:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   1081a:	787b      	ldrb	r3, [r7, #1]
   1081c:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   1081e:	78fb      	ldrb	r3, [r7, #3]
   10820:	4619      	mov	r1, r3
   10822:	6878      	ldr	r0, [r7, #4]
   10824:	4b16      	ldr	r3, [pc, #88]	; (10880 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   10826:	4798      	blx	r3
   10828:	4603      	mov	r3, r0
   1082a:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   1082c:	7bfb      	ldrb	r3, [r7, #15]
   1082e:	4619      	mov	r1, r3
   10830:	6878      	ldr	r0, [r7, #4]
   10832:	4b14      	ldr	r3, [pc, #80]	; (10884 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   10834:	4798      	blx	r3
   10836:	4603      	mov	r3, r0
   10838:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   1083a:	78bb      	ldrb	r3, [r7, #2]
   1083c:	2b00      	cmp	r3, #0
   1083e:	d009      	beq.n	10854 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   10840:	7bba      	ldrb	r2, [r7, #14]
   10842:	7b7b      	ldrb	r3, [r7, #13]
   10844:	4619      	mov	r1, r3
   10846:	2301      	movs	r3, #1
   10848:	408b      	lsls	r3, r1
   1084a:	b2db      	uxtb	r3, r3
   1084c:	4313      	orrs	r3, r2
   1084e:	b2db      	uxtb	r3, r3
   10850:	73bb      	strb	r3, [r7, #14]
   10852:	e00a      	b.n	1086a <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   10854:	7bba      	ldrb	r2, [r7, #14]
   10856:	7b7b      	ldrb	r3, [r7, #13]
   10858:	4619      	mov	r1, r3
   1085a:	2301      	movs	r3, #1
   1085c:	408b      	lsls	r3, r1
   1085e:	b2db      	uxtb	r3, r3
   10860:	43db      	mvns	r3, r3
   10862:	b2db      	uxtb	r3, r3
   10864:	4013      	ands	r3, r2
   10866:	b2db      	uxtb	r3, r3
   10868:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   1086a:	7bba      	ldrb	r2, [r7, #14]
   1086c:	7bfb      	ldrb	r3, [r7, #15]
   1086e:	4619      	mov	r1, r3
   10870:	6878      	ldr	r0, [r7, #4]
   10872:	4b05      	ldr	r3, [pc, #20]	; (10888 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   10874:	4798      	blx	r3
}
   10876:	bf00      	nop
   10878:	3710      	adds	r7, #16
   1087a:	46bd      	mov	sp, r7
   1087c:	bd80      	pop	{r7, pc}
   1087e:	bf00      	nop
   10880:	000105b1 	.word	0x000105b1
   10884:	00010601 	.word	0x00010601
   10888:	0001068d 	.word	0x0001068d

0001088c <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   1088c:	b590      	push	{r4, r7, lr}
   1088e:	b085      	sub	sp, #20
   10890:	af02      	add	r7, sp, #8
   10892:	6078      	str	r0, [r7, #4]
   10894:	460b      	mov	r3, r1
   10896:	70fb      	strb	r3, [r7, #3]
   10898:	4613      	mov	r3, r2
   1089a:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   1089c:	78bb      	ldrb	r3, [r7, #2]
   1089e:	2b01      	cmp	r3, #1
   108a0:	bf0c      	ite	eq
   108a2:	2301      	moveq	r3, #1
   108a4:	2300      	movne	r3, #0
   108a6:	b2db      	uxtb	r3, r3
   108a8:	461a      	mov	r2, r3
   108aa:	78f9      	ldrb	r1, [r7, #3]
   108ac:	2300      	movs	r3, #0
   108ae:	9300      	str	r3, [sp, #0]
   108b0:	2300      	movs	r3, #0
   108b2:	6878      	ldr	r0, [r7, #4]
   108b4:	4c02      	ldr	r4, [pc, #8]	; (108c0 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   108b6:	47a0      	blx	r4
}
   108b8:	bf00      	nop
   108ba:	370c      	adds	r7, #12
   108bc:	46bd      	mov	sp, r7
   108be:	bd90      	pop	{r4, r7, pc}
   108c0:	00010801 	.word	0x00010801

000108c4 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   108c4:	b590      	push	{r4, r7, lr}
   108c6:	b085      	sub	sp, #20
   108c8:	af00      	add	r7, sp, #0
   108ca:	6078      	str	r0, [r7, #4]
   108cc:	460b      	mov	r3, r1
   108ce:	70fb      	strb	r3, [r7, #3]
   108d0:	4613      	mov	r3, r2
   108d2:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   108d4:	78fb      	ldrb	r3, [r7, #3]
   108d6:	4619      	mov	r1, r3
   108d8:	6878      	ldr	r0, [r7, #4]
   108da:	4b21      	ldr	r3, [pc, #132]	; (10960 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   108dc:	4798      	blx	r3
   108de:	4603      	mov	r3, r0
   108e0:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   108e2:	78f9      	ldrb	r1, [r7, #3]
   108e4:	230a      	movs	r3, #10
   108e6:	220a      	movs	r2, #10
   108e8:	6878      	ldr	r0, [r7, #4]
   108ea:	4c1e      	ldr	r4, [pc, #120]	; (10964 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   108ec:	47a0      	blx	r4
   108ee:	4603      	mov	r3, r0
   108f0:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   108f2:	7bfb      	ldrb	r3, [r7, #15]
   108f4:	4619      	mov	r1, r3
   108f6:	6878      	ldr	r0, [r7, #4]
   108f8:	4b1b      	ldr	r3, [pc, #108]	; (10968 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   108fa:	4798      	blx	r3
   108fc:	4603      	mov	r3, r0
   108fe:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   10900:	78bb      	ldrb	r3, [r7, #2]
   10902:	2b00      	cmp	r3, #0
   10904:	d009      	beq.n	1091a <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   10906:	7bba      	ldrb	r2, [r7, #14]
   10908:	7b7b      	ldrb	r3, [r7, #13]
   1090a:	4619      	mov	r1, r3
   1090c:	2301      	movs	r3, #1
   1090e:	408b      	lsls	r3, r1
   10910:	b2db      	uxtb	r3, r3
   10912:	4313      	orrs	r3, r2
   10914:	b2db      	uxtb	r3, r3
   10916:	73bb      	strb	r3, [r7, #14]
   10918:	e00a      	b.n	10930 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   1091a:	7bba      	ldrb	r2, [r7, #14]
   1091c:	7b7b      	ldrb	r3, [r7, #13]
   1091e:	4619      	mov	r1, r3
   10920:	2301      	movs	r3, #1
   10922:	408b      	lsls	r3, r1
   10924:	b2db      	uxtb	r3, r3
   10926:	43db      	mvns	r3, r3
   10928:	b2db      	uxtb	r3, r3
   1092a:	4013      	ands	r3, r2
   1092c:	b2db      	uxtb	r3, r3
   1092e:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   10930:	78f9      	ldrb	r1, [r7, #3]
   10932:	2309      	movs	r3, #9
   10934:	2209      	movs	r2, #9
   10936:	6878      	ldr	r0, [r7, #4]
   10938:	4c0a      	ldr	r4, [pc, #40]	; (10964 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   1093a:	47a0      	blx	r4
   1093c:	4603      	mov	r3, r0
   1093e:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   10940:	7bba      	ldrb	r2, [r7, #14]
   10942:	7bfb      	ldrb	r3, [r7, #15]
   10944:	4619      	mov	r1, r3
   10946:	6878      	ldr	r0, [r7, #4]
   10948:	4b08      	ldr	r3, [pc, #32]	; (1096c <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   1094a:	4798      	blx	r3
   1094c:	4603      	mov	r3, r0
   1094e:	2b00      	cmp	r3, #0
   10950:	bf0c      	ite	eq
   10952:	2301      	moveq	r3, #1
   10954:	2300      	movne	r3, #0
   10956:	b2db      	uxtb	r3, r3
}
   10958:	4618      	mov	r0, r3
   1095a:	3714      	adds	r7, #20
   1095c:	46bd      	mov	sp, r7
   1095e:	bd90      	pop	{r4, r7, pc}
   10960:	000105b1 	.word	0x000105b1
   10964:	000105cf 	.word	0x000105cf
   10968:	00010601 	.word	0x00010601
   1096c:	0001068d 	.word	0x0001068d

00010970 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   10970:	b590      	push	{r4, r7, lr}
   10972:	b085      	sub	sp, #20
   10974:	af02      	add	r7, sp, #8
   10976:	6078      	str	r0, [r7, #4]
   10978:	460b      	mov	r3, r1
   1097a:	70fb      	strb	r3, [r7, #3]
   1097c:	4613      	mov	r3, r2
   1097e:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   10980:	78ba      	ldrb	r2, [r7, #2]
   10982:	78f9      	ldrb	r1, [r7, #3]
   10984:	2306      	movs	r3, #6
   10986:	9300      	str	r3, [sp, #0]
   10988:	2306      	movs	r3, #6
   1098a:	6878      	ldr	r0, [r7, #4]
   1098c:	4c02      	ldr	r4, [pc, #8]	; (10998 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   1098e:	47a0      	blx	r4
}
   10990:	bf00      	nop
   10992:	370c      	adds	r7, #12
   10994:	46bd      	mov	sp, r7
   10996:	bd90      	pop	{r4, r7, pc}
   10998:	00010801 	.word	0x00010801

0001099c <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   1099c:	b480      	push	{r7}
   1099e:	b083      	sub	sp, #12
   109a0:	af00      	add	r7, sp, #0
   109a2:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   109a4:	687b      	ldr	r3, [r7, #4]
   109a6:	4618      	mov	r0, r3
   109a8:	370c      	adds	r7, #12
   109aa:	46bd      	mov	sp, r7
   109ac:	bc80      	pop	{r7}
   109ae:	4770      	bx	lr

000109b0 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   109b0:	b480      	push	{r7}
   109b2:	b083      	sub	sp, #12
   109b4:	af00      	add	r7, sp, #0
   109b6:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   109b8:	687b      	ldr	r3, [r7, #4]
   109ba:	4618      	mov	r0, r3
   109bc:	370c      	adds	r7, #12
   109be:	46bd      	mov	sp, r7
   109c0:	bc80      	pop	{r7}
   109c2:	4770      	bx	lr

000109c4 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   109c4:	b480      	push	{r7}
   109c6:	b083      	sub	sp, #12
   109c8:	af00      	add	r7, sp, #0
   109ca:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   109cc:	4a05      	ldr	r2, [pc, #20]	; (109e4 <_ZN6LT_SPIC1Ev+0x20>)
   109ce:	687b      	ldr	r3, [r7, #4]
   109d0:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   109d2:	687b      	ldr	r3, [r7, #4]
   109d4:	4a04      	ldr	r2, [pc, #16]	; (109e8 <_ZN6LT_SPIC1Ev+0x24>)
   109d6:	605a      	str	r2, [r3, #4]
} //LT_SPI
   109d8:	687b      	ldr	r3, [r7, #4]
   109da:	4618      	mov	r0, r3
   109dc:	370c      	adds	r7, #12
   109de:	46bd      	mov	sp, r7
   109e0:	bc80      	pop	{r7}
   109e2:	4770      	bx	lr
   109e4:	20007c40 	.word	0x20007c40
   109e8:	20007c44 	.word	0x20007c44

000109ec <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   109ec:	b480      	push	{r7}
   109ee:	b083      	sub	sp, #12
   109f0:	af00      	add	r7, sp, #0
   109f2:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   109f4:	687b      	ldr	r3, [r7, #4]
   109f6:	4618      	mov	r0, r3
   109f8:	370c      	adds	r7, #12
   109fa:	46bd      	mov	sp, r7
   109fc:	bc80      	pop	{r7}
   109fe:	4770      	bx	lr

00010a00 <_Z41__static_initialization_and_destruction_0ii>:
	delay_us(10);
	gpio_set_pin_level(cs_pin,true);
	__DMB();
	__enable_irq();
	 
   10a00:	b580      	push	{r7, lr}
   10a02:	b082      	sub	sp, #8
   10a04:	af00      	add	r7, sp, #0
   10a06:	6078      	str	r0, [r7, #4]
   10a08:	6039      	str	r1, [r7, #0]
   10a0a:	687b      	ldr	r3, [r7, #4]
   10a0c:	2b01      	cmp	r3, #1
   10a0e:	d10c      	bne.n	10a2a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   10a10:	683b      	ldr	r3, [r7, #0]
   10a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10a16:	4293      	cmp	r3, r2
   10a18:	d107      	bne.n	10a2a <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   10a1a:	4806      	ldr	r0, [pc, #24]	; (10a34 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10a1c:	4b06      	ldr	r3, [pc, #24]	; (10a38 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10a1e:	4798      	blx	r3
   10a20:	4a06      	ldr	r2, [pc, #24]	; (10a3c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   10a22:	4907      	ldr	r1, [pc, #28]	; (10a40 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   10a24:	4803      	ldr	r0, [pc, #12]	; (10a34 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10a26:	4b07      	ldr	r3, [pc, #28]	; (10a44 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   10a28:	4798      	blx	r3
   10a2a:	bf00      	nop
   10a2c:	3708      	adds	r7, #8
   10a2e:	46bd      	mov	sp, r7
   10a30:	bd80      	pop	{r7, pc}
   10a32:	bf00      	nop
   10a34:	20007c44 	.word	0x20007c44
   10a38:	00010a5d 	.word	0x00010a5d
   10a3c:	20000000 	.word	0x20000000
   10a40:	00010a7d 	.word	0x00010a7d
   10a44:	000113d5 	.word	0x000113d5

00010a48 <_GLOBAL__sub_I_ptrLTSPIClass>:
   10a48:	b580      	push	{r7, lr}
   10a4a:	af00      	add	r7, sp, #0
   10a4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10a50:	2001      	movs	r0, #1
   10a52:	4b01      	ldr	r3, [pc, #4]	; (10a58 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   10a54:	4798      	blx	r3
   10a56:	bd80      	pop	{r7, pc}
   10a58:	00010a01 	.word	0x00010a01

00010a5c <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   10a5c:	b480      	push	{r7}
   10a5e:	b083      	sub	sp, #12
   10a60:	af00      	add	r7, sp, #0
   10a62:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   10a64:	4a04      	ldr	r2, [pc, #16]	; (10a78 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   10a66:	687b      	ldr	r3, [r7, #4]
   10a68:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   10a6a:	687b      	ldr	r3, [r7, #4]
   10a6c:	4618      	mov	r0, r3
   10a6e:	370c      	adds	r7, #12
   10a70:	46bd      	mov	sp, r7
   10a72:	bc80      	pop	{r7}
   10a74:	4770      	bx	lr
   10a76:	bf00      	nop
   10a78:	20007c60 	.word	0x20007c60

00010a7c <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   10a7c:	b480      	push	{r7}
   10a7e:	b083      	sub	sp, #12
   10a80:	af00      	add	r7, sp, #0
   10a82:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   10a84:	687b      	ldr	r3, [r7, #4]
   10a86:	4618      	mov	r0, r3
   10a88:	370c      	adds	r7, #12
   10a8a:	46bd      	mov	sp, r7
   10a8c:	bc80      	pop	{r7}
   10a8e:	4770      	bx	lr

00010a90 <hri_port_set_DIR_reg>:
{
   10a90:	b480      	push	{r7}
   10a92:	b085      	sub	sp, #20
   10a94:	af00      	add	r7, sp, #0
   10a96:	60f8      	str	r0, [r7, #12]
   10a98:	460b      	mov	r3, r1
   10a9a:	607a      	str	r2, [r7, #4]
   10a9c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   10a9e:	7afb      	ldrb	r3, [r7, #11]
   10aa0:	68fa      	ldr	r2, [r7, #12]
   10aa2:	01db      	lsls	r3, r3, #7
   10aa4:	4413      	add	r3, r2
   10aa6:	3308      	adds	r3, #8
   10aa8:	687a      	ldr	r2, [r7, #4]
   10aaa:	601a      	str	r2, [r3, #0]
}
   10aac:	bf00      	nop
   10aae:	3714      	adds	r7, #20
   10ab0:	46bd      	mov	sp, r7
   10ab2:	bc80      	pop	{r7}
   10ab4:	4770      	bx	lr

00010ab6 <hri_port_clear_DIR_reg>:
{
   10ab6:	b480      	push	{r7}
   10ab8:	b085      	sub	sp, #20
   10aba:	af00      	add	r7, sp, #0
   10abc:	60f8      	str	r0, [r7, #12]
   10abe:	460b      	mov	r3, r1
   10ac0:	607a      	str	r2, [r7, #4]
   10ac2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   10ac4:	7afb      	ldrb	r3, [r7, #11]
   10ac6:	68fa      	ldr	r2, [r7, #12]
   10ac8:	01db      	lsls	r3, r3, #7
   10aca:	4413      	add	r3, r2
   10acc:	3304      	adds	r3, #4
   10ace:	687a      	ldr	r2, [r7, #4]
   10ad0:	601a      	str	r2, [r3, #0]
}
   10ad2:	bf00      	nop
   10ad4:	3714      	adds	r7, #20
   10ad6:	46bd      	mov	sp, r7
   10ad8:	bc80      	pop	{r7}
   10ada:	4770      	bx	lr

00010adc <hri_port_set_OUT_reg>:
{
   10adc:	b480      	push	{r7}
   10ade:	b085      	sub	sp, #20
   10ae0:	af00      	add	r7, sp, #0
   10ae2:	60f8      	str	r0, [r7, #12]
   10ae4:	460b      	mov	r3, r1
   10ae6:	607a      	str	r2, [r7, #4]
   10ae8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   10aea:	7afb      	ldrb	r3, [r7, #11]
   10aec:	68fa      	ldr	r2, [r7, #12]
   10aee:	01db      	lsls	r3, r3, #7
   10af0:	4413      	add	r3, r2
   10af2:	3318      	adds	r3, #24
   10af4:	687a      	ldr	r2, [r7, #4]
   10af6:	601a      	str	r2, [r3, #0]
}
   10af8:	bf00      	nop
   10afa:	3714      	adds	r7, #20
   10afc:	46bd      	mov	sp, r7
   10afe:	bc80      	pop	{r7}
   10b00:	4770      	bx	lr

00010b02 <hri_port_clear_OUT_reg>:
{
   10b02:	b480      	push	{r7}
   10b04:	b085      	sub	sp, #20
   10b06:	af00      	add	r7, sp, #0
   10b08:	60f8      	str	r0, [r7, #12]
   10b0a:	460b      	mov	r3, r1
   10b0c:	607a      	str	r2, [r7, #4]
   10b0e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   10b10:	7afb      	ldrb	r3, [r7, #11]
   10b12:	68fa      	ldr	r2, [r7, #12]
   10b14:	01db      	lsls	r3, r3, #7
   10b16:	4413      	add	r3, r2
   10b18:	3314      	adds	r3, #20
   10b1a:	687a      	ldr	r2, [r7, #4]
   10b1c:	601a      	str	r2, [r3, #0]
}
   10b1e:	bf00      	nop
   10b20:	3714      	adds	r7, #20
   10b22:	46bd      	mov	sp, r7
   10b24:	bc80      	pop	{r7}
   10b26:	4770      	bx	lr

00010b28 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   10b28:	b480      	push	{r7}
   10b2a:	b085      	sub	sp, #20
   10b2c:	af00      	add	r7, sp, #0
   10b2e:	6078      	str	r0, [r7, #4]
   10b30:	4608      	mov	r0, r1
   10b32:	4611      	mov	r1, r2
   10b34:	461a      	mov	r2, r3
   10b36:	4603      	mov	r3, r0
   10b38:	70fb      	strb	r3, [r7, #3]
   10b3a:	460b      	mov	r3, r1
   10b3c:	70bb      	strb	r3, [r7, #2]
   10b3e:	4613      	mov	r3, r2
   10b40:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   10b42:	78fa      	ldrb	r2, [r7, #3]
   10b44:	78bb      	ldrb	r3, [r7, #2]
   10b46:	6879      	ldr	r1, [r7, #4]
   10b48:	01d2      	lsls	r2, r2, #7
   10b4a:	440a      	add	r2, r1
   10b4c:	4413      	add	r3, r2
   10b4e:	3330      	adds	r3, #48	; 0x30
   10b50:	781b      	ldrb	r3, [r3, #0]
   10b52:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   10b54:	7bfb      	ldrb	r3, [r7, #15]
   10b56:	f023 030f 	bic.w	r3, r3, #15
   10b5a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   10b5c:	787b      	ldrb	r3, [r7, #1]
   10b5e:	f003 030f 	and.w	r3, r3, #15
   10b62:	b2da      	uxtb	r2, r3
   10b64:	7bfb      	ldrb	r3, [r7, #15]
   10b66:	4313      	orrs	r3, r2
   10b68:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   10b6a:	78fa      	ldrb	r2, [r7, #3]
   10b6c:	78bb      	ldrb	r3, [r7, #2]
   10b6e:	6879      	ldr	r1, [r7, #4]
   10b70:	01d2      	lsls	r2, r2, #7
   10b72:	440a      	add	r2, r1
   10b74:	4413      	add	r3, r2
   10b76:	3330      	adds	r3, #48	; 0x30
   10b78:	7bfa      	ldrb	r2, [r7, #15]
   10b7a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   10b7c:	bf00      	nop
   10b7e:	3714      	adds	r7, #20
   10b80:	46bd      	mov	sp, r7
   10b82:	bc80      	pop	{r7}
   10b84:	4770      	bx	lr

00010b86 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   10b86:	b480      	push	{r7}
   10b88:	b085      	sub	sp, #20
   10b8a:	af00      	add	r7, sp, #0
   10b8c:	6078      	str	r0, [r7, #4]
   10b8e:	4608      	mov	r0, r1
   10b90:	4611      	mov	r1, r2
   10b92:	461a      	mov	r2, r3
   10b94:	4603      	mov	r3, r0
   10b96:	70fb      	strb	r3, [r7, #3]
   10b98:	460b      	mov	r3, r1
   10b9a:	70bb      	strb	r3, [r7, #2]
   10b9c:	4613      	mov	r3, r2
   10b9e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   10ba0:	78fa      	ldrb	r2, [r7, #3]
   10ba2:	78bb      	ldrb	r3, [r7, #2]
   10ba4:	6879      	ldr	r1, [r7, #4]
   10ba6:	01d2      	lsls	r2, r2, #7
   10ba8:	440a      	add	r2, r1
   10baa:	4413      	add	r3, r2
   10bac:	3330      	adds	r3, #48	; 0x30
   10bae:	781b      	ldrb	r3, [r3, #0]
   10bb0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   10bb2:	7bfb      	ldrb	r3, [r7, #15]
   10bb4:	f003 030f 	and.w	r3, r3, #15
   10bb8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   10bba:	787b      	ldrb	r3, [r7, #1]
   10bbc:	011b      	lsls	r3, r3, #4
   10bbe:	b2da      	uxtb	r2, r3
   10bc0:	7bfb      	ldrb	r3, [r7, #15]
   10bc2:	4313      	orrs	r3, r2
   10bc4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   10bc6:	78fa      	ldrb	r2, [r7, #3]
   10bc8:	78bb      	ldrb	r3, [r7, #2]
   10bca:	6879      	ldr	r1, [r7, #4]
   10bcc:	01d2      	lsls	r2, r2, #7
   10bce:	440a      	add	r2, r1
   10bd0:	4413      	add	r3, r2
   10bd2:	3330      	adds	r3, #48	; 0x30
   10bd4:	7bfa      	ldrb	r2, [r7, #15]
   10bd6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   10bd8:	bf00      	nop
   10bda:	3714      	adds	r7, #20
   10bdc:	46bd      	mov	sp, r7
   10bde:	bc80      	pop	{r7}
   10be0:	4770      	bx	lr

00010be2 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   10be2:	b480      	push	{r7}
   10be4:	b085      	sub	sp, #20
   10be6:	af00      	add	r7, sp, #0
   10be8:	6078      	str	r0, [r7, #4]
   10bea:	4608      	mov	r0, r1
   10bec:	4611      	mov	r1, r2
   10bee:	461a      	mov	r2, r3
   10bf0:	4603      	mov	r3, r0
   10bf2:	70fb      	strb	r3, [r7, #3]
   10bf4:	460b      	mov	r3, r1
   10bf6:	70bb      	strb	r3, [r7, #2]
   10bf8:	4613      	mov	r3, r2
   10bfa:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   10bfc:	78fa      	ldrb	r2, [r7, #3]
   10bfe:	78bb      	ldrb	r3, [r7, #2]
   10c00:	6879      	ldr	r1, [r7, #4]
   10c02:	01d2      	lsls	r2, r2, #7
   10c04:	440a      	add	r2, r1
   10c06:	4413      	add	r3, r2
   10c08:	3340      	adds	r3, #64	; 0x40
   10c0a:	781b      	ldrb	r3, [r3, #0]
   10c0c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   10c0e:	7bfb      	ldrb	r3, [r7, #15]
   10c10:	f023 0301 	bic.w	r3, r3, #1
   10c14:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   10c16:	787a      	ldrb	r2, [r7, #1]
   10c18:	7bfb      	ldrb	r3, [r7, #15]
   10c1a:	4313      	orrs	r3, r2
   10c1c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   10c1e:	78fa      	ldrb	r2, [r7, #3]
   10c20:	78bb      	ldrb	r3, [r7, #2]
   10c22:	6879      	ldr	r1, [r7, #4]
   10c24:	01d2      	lsls	r2, r2, #7
   10c26:	440a      	add	r2, r1
   10c28:	4413      	add	r3, r2
   10c2a:	3340      	adds	r3, #64	; 0x40
   10c2c:	7bfa      	ldrb	r2, [r7, #15]
   10c2e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   10c30:	bf00      	nop
   10c32:	3714      	adds	r7, #20
   10c34:	46bd      	mov	sp, r7
   10c36:	bc80      	pop	{r7}
   10c38:	4770      	bx	lr

00010c3a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   10c3a:	b480      	push	{r7}
   10c3c:	b085      	sub	sp, #20
   10c3e:	af00      	add	r7, sp, #0
   10c40:	60f8      	str	r0, [r7, #12]
   10c42:	460b      	mov	r3, r1
   10c44:	607a      	str	r2, [r7, #4]
   10c46:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   10c48:	7afb      	ldrb	r3, [r7, #11]
   10c4a:	68fa      	ldr	r2, [r7, #12]
   10c4c:	01db      	lsls	r3, r3, #7
   10c4e:	4413      	add	r3, r2
   10c50:	3328      	adds	r3, #40	; 0x28
   10c52:	687a      	ldr	r2, [r7, #4]
   10c54:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   10c56:	bf00      	nop
   10c58:	3714      	adds	r7, #20
   10c5a:	46bd      	mov	sp, r7
   10c5c:	bc80      	pop	{r7}
   10c5e:	4770      	bx	lr

00010c60 <_gpio_set_direction>:
{
   10c60:	b580      	push	{r7, lr}
   10c62:	b082      	sub	sp, #8
   10c64:	af00      	add	r7, sp, #0
   10c66:	4603      	mov	r3, r0
   10c68:	6039      	str	r1, [r7, #0]
   10c6a:	71fb      	strb	r3, [r7, #7]
   10c6c:	4613      	mov	r3, r2
   10c6e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   10c70:	79bb      	ldrb	r3, [r7, #6]
   10c72:	2b01      	cmp	r3, #1
   10c74:	d01c      	beq.n	10cb0 <_gpio_set_direction+0x50>
   10c76:	2b02      	cmp	r3, #2
   10c78:	d037      	beq.n	10cea <_gpio_set_direction+0x8a>
   10c7a:	2b00      	cmp	r3, #0
   10c7c:	d14e      	bne.n	10d1c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10c7e:	79fb      	ldrb	r3, [r7, #7]
   10c80:	683a      	ldr	r2, [r7, #0]
   10c82:	4619      	mov	r1, r3
   10c84:	482a      	ldr	r0, [pc, #168]	; (10d30 <_gpio_set_direction+0xd0>)
   10c86:	4b2b      	ldr	r3, [pc, #172]	; (10d34 <_gpio_set_direction+0xd4>)
   10c88:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   10c8a:	683b      	ldr	r3, [r7, #0]
   10c8c:	b29b      	uxth	r3, r3
   10c8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   10c92:	79fb      	ldrb	r3, [r7, #7]
   10c94:	4619      	mov	r1, r3
   10c96:	4826      	ldr	r0, [pc, #152]	; (10d30 <_gpio_set_direction+0xd0>)
   10c98:	4b27      	ldr	r3, [pc, #156]	; (10d38 <_gpio_set_direction+0xd8>)
   10c9a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10c9c:	683b      	ldr	r3, [r7, #0]
   10c9e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10ca0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10ca4:	79fb      	ldrb	r3, [r7, #7]
   10ca6:	4619      	mov	r1, r3
   10ca8:	4821      	ldr	r0, [pc, #132]	; (10d30 <_gpio_set_direction+0xd0>)
   10caa:	4b23      	ldr	r3, [pc, #140]	; (10d38 <_gpio_set_direction+0xd8>)
   10cac:	4798      	blx	r3
		break;
   10cae:	e03a      	b.n	10d26 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10cb0:	79fb      	ldrb	r3, [r7, #7]
   10cb2:	683a      	ldr	r2, [r7, #0]
   10cb4:	4619      	mov	r1, r3
   10cb6:	481e      	ldr	r0, [pc, #120]	; (10d30 <_gpio_set_direction+0xd0>)
   10cb8:	4b1e      	ldr	r3, [pc, #120]	; (10d34 <_gpio_set_direction+0xd4>)
   10cba:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   10cbc:	683b      	ldr	r3, [r7, #0]
   10cbe:	b29b      	uxth	r3, r3
   10cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10cc8:	79f9      	ldrb	r1, [r7, #7]
   10cca:	461a      	mov	r2, r3
   10ccc:	4818      	ldr	r0, [pc, #96]	; (10d30 <_gpio_set_direction+0xd0>)
   10cce:	4b1a      	ldr	r3, [pc, #104]	; (10d38 <_gpio_set_direction+0xd8>)
   10cd0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   10cd2:	683b      	ldr	r3, [r7, #0]
   10cd4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   10cd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   10cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   10cde:	79f9      	ldrb	r1, [r7, #7]
   10ce0:	461a      	mov	r2, r3
   10ce2:	4813      	ldr	r0, [pc, #76]	; (10d30 <_gpio_set_direction+0xd0>)
   10ce4:	4b14      	ldr	r3, [pc, #80]	; (10d38 <_gpio_set_direction+0xd8>)
   10ce6:	4798      	blx	r3
		break;
   10ce8:	e01d      	b.n	10d26 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   10cea:	79fb      	ldrb	r3, [r7, #7]
   10cec:	683a      	ldr	r2, [r7, #0]
   10cee:	4619      	mov	r1, r3
   10cf0:	480f      	ldr	r0, [pc, #60]	; (10d30 <_gpio_set_direction+0xd0>)
   10cf2:	4b12      	ldr	r3, [pc, #72]	; (10d3c <_gpio_set_direction+0xdc>)
   10cf4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   10cf6:	683b      	ldr	r3, [r7, #0]
   10cf8:	b29b      	uxth	r3, r3
   10cfa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   10cfe:	79fb      	ldrb	r3, [r7, #7]
   10d00:	4619      	mov	r1, r3
   10d02:	480b      	ldr	r0, [pc, #44]	; (10d30 <_gpio_set_direction+0xd0>)
   10d04:	4b0c      	ldr	r3, [pc, #48]	; (10d38 <_gpio_set_direction+0xd8>)
   10d06:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10d08:	683b      	ldr	r3, [r7, #0]
   10d0a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10d0c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10d10:	79fb      	ldrb	r3, [r7, #7]
   10d12:	4619      	mov	r1, r3
   10d14:	4806      	ldr	r0, [pc, #24]	; (10d30 <_gpio_set_direction+0xd0>)
   10d16:	4b08      	ldr	r3, [pc, #32]	; (10d38 <_gpio_set_direction+0xd8>)
   10d18:	4798      	blx	r3
		break;
   10d1a:	e004      	b.n	10d26 <_gpio_set_direction+0xc6>
		ASSERT(false);
   10d1c:	2246      	movs	r2, #70	; 0x46
   10d1e:	4908      	ldr	r1, [pc, #32]	; (10d40 <_gpio_set_direction+0xe0>)
   10d20:	2000      	movs	r0, #0
   10d22:	4b08      	ldr	r3, [pc, #32]	; (10d44 <_gpio_set_direction+0xe4>)
   10d24:	4798      	blx	r3
}
   10d26:	bf00      	nop
   10d28:	3708      	adds	r7, #8
   10d2a:	46bd      	mov	sp, r7
   10d2c:	bd80      	pop	{r7, pc}
   10d2e:	bf00      	nop
   10d30:	41008000 	.word	0x41008000
   10d34:	00010ab7 	.word	0x00010ab7
   10d38:	00010c3b 	.word	0x00010c3b
   10d3c:	00010a91 	.word	0x00010a91
   10d40:	00011fa0 	.word	0x00011fa0
   10d44:	00003cad 	.word	0x00003cad

00010d48 <_gpio_set_level>:
{
   10d48:	b580      	push	{r7, lr}
   10d4a:	b082      	sub	sp, #8
   10d4c:	af00      	add	r7, sp, #0
   10d4e:	4603      	mov	r3, r0
   10d50:	6039      	str	r1, [r7, #0]
   10d52:	71fb      	strb	r3, [r7, #7]
   10d54:	4613      	mov	r3, r2
   10d56:	71bb      	strb	r3, [r7, #6]
	if (level) {
   10d58:	79bb      	ldrb	r3, [r7, #6]
   10d5a:	2b00      	cmp	r3, #0
   10d5c:	d006      	beq.n	10d6c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   10d5e:	79fb      	ldrb	r3, [r7, #7]
   10d60:	683a      	ldr	r2, [r7, #0]
   10d62:	4619      	mov	r1, r3
   10d64:	4806      	ldr	r0, [pc, #24]	; (10d80 <_gpio_set_level+0x38>)
   10d66:	4b07      	ldr	r3, [pc, #28]	; (10d84 <_gpio_set_level+0x3c>)
   10d68:	4798      	blx	r3
}
   10d6a:	e005      	b.n	10d78 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   10d6c:	79fb      	ldrb	r3, [r7, #7]
   10d6e:	683a      	ldr	r2, [r7, #0]
   10d70:	4619      	mov	r1, r3
   10d72:	4803      	ldr	r0, [pc, #12]	; (10d80 <_gpio_set_level+0x38>)
   10d74:	4b04      	ldr	r3, [pc, #16]	; (10d88 <_gpio_set_level+0x40>)
   10d76:	4798      	blx	r3
}
   10d78:	bf00      	nop
   10d7a:	3708      	adds	r7, #8
   10d7c:	46bd      	mov	sp, r7
   10d7e:	bd80      	pop	{r7, pc}
   10d80:	41008000 	.word	0x41008000
   10d84:	00010add 	.word	0x00010add
   10d88:	00010b03 	.word	0x00010b03

00010d8c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   10d8c:	b590      	push	{r4, r7, lr}
   10d8e:	b085      	sub	sp, #20
   10d90:	af00      	add	r7, sp, #0
   10d92:	6078      	str	r0, [r7, #4]
   10d94:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   10d96:	687b      	ldr	r3, [r7, #4]
   10d98:	095b      	lsrs	r3, r3, #5
   10d9a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   10d9c:	687b      	ldr	r3, [r7, #4]
   10d9e:	b2db      	uxtb	r3, r3
   10da0:	f003 031f 	and.w	r3, r3, #31
   10da4:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   10da6:	683b      	ldr	r3, [r7, #0]
   10da8:	f1b3 3fff 	cmp.w	r3, #4294967295
   10dac:	d106      	bne.n	10dbc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   10dae:	7bba      	ldrb	r2, [r7, #14]
   10db0:	7bf9      	ldrb	r1, [r7, #15]
   10db2:	2300      	movs	r3, #0
   10db4:	4812      	ldr	r0, [pc, #72]	; (10e00 <_gpio_set_pin_function+0x74>)
   10db6:	4c13      	ldr	r4, [pc, #76]	; (10e04 <_gpio_set_pin_function+0x78>)
   10db8:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   10dba:	e01d      	b.n	10df8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   10dbc:	7bba      	ldrb	r2, [r7, #14]
   10dbe:	7bf9      	ldrb	r1, [r7, #15]
   10dc0:	2301      	movs	r3, #1
   10dc2:	480f      	ldr	r0, [pc, #60]	; (10e00 <_gpio_set_pin_function+0x74>)
   10dc4:	4c0f      	ldr	r4, [pc, #60]	; (10e04 <_gpio_set_pin_function+0x78>)
   10dc6:	47a0      	blx	r4
		if (pin & 1) {
   10dc8:	7bbb      	ldrb	r3, [r7, #14]
   10dca:	f003 0301 	and.w	r3, r3, #1
   10dce:	2b00      	cmp	r3, #0
   10dd0:	d009      	beq.n	10de6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   10dd2:	7bbb      	ldrb	r3, [r7, #14]
   10dd4:	105b      	asrs	r3, r3, #1
   10dd6:	b2da      	uxtb	r2, r3
   10dd8:	683b      	ldr	r3, [r7, #0]
   10dda:	b2db      	uxtb	r3, r3
   10ddc:	7bf9      	ldrb	r1, [r7, #15]
   10dde:	4808      	ldr	r0, [pc, #32]	; (10e00 <_gpio_set_pin_function+0x74>)
   10de0:	4c09      	ldr	r4, [pc, #36]	; (10e08 <_gpio_set_pin_function+0x7c>)
   10de2:	47a0      	blx	r4
}
   10de4:	e008      	b.n	10df8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   10de6:	7bbb      	ldrb	r3, [r7, #14]
   10de8:	105b      	asrs	r3, r3, #1
   10dea:	b2da      	uxtb	r2, r3
   10dec:	683b      	ldr	r3, [r7, #0]
   10dee:	b2db      	uxtb	r3, r3
   10df0:	7bf9      	ldrb	r1, [r7, #15]
   10df2:	4803      	ldr	r0, [pc, #12]	; (10e00 <_gpio_set_pin_function+0x74>)
   10df4:	4c05      	ldr	r4, [pc, #20]	; (10e0c <_gpio_set_pin_function+0x80>)
   10df6:	47a0      	blx	r4
}
   10df8:	bf00      	nop
   10dfa:	3714      	adds	r7, #20
   10dfc:	46bd      	mov	sp, r7
   10dfe:	bd90      	pop	{r4, r7, pc}
   10e00:	41008000 	.word	0x41008000
   10e04:	00010be3 	.word	0x00010be3
   10e08:	00010b87 	.word	0x00010b87
   10e0c:	00010b29 	.word	0x00010b29

00010e10 <gpio_set_pin_function>:
{
   10e10:	b580      	push	{r7, lr}
   10e12:	b082      	sub	sp, #8
   10e14:	af00      	add	r7, sp, #0
   10e16:	6078      	str	r0, [r7, #4]
   10e18:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   10e1a:	6839      	ldr	r1, [r7, #0]
   10e1c:	6878      	ldr	r0, [r7, #4]
   10e1e:	4b03      	ldr	r3, [pc, #12]	; (10e2c <gpio_set_pin_function+0x1c>)
   10e20:	4798      	blx	r3
}
   10e22:	bf00      	nop
   10e24:	3708      	adds	r7, #8
   10e26:	46bd      	mov	sp, r7
   10e28:	bd80      	pop	{r7, pc}
   10e2a:	bf00      	nop
   10e2c:	00010d8d 	.word	0x00010d8d

00010e30 <gpio_set_pin_direction>:
{
   10e30:	b580      	push	{r7, lr}
   10e32:	b082      	sub	sp, #8
   10e34:	af00      	add	r7, sp, #0
   10e36:	4603      	mov	r3, r0
   10e38:	460a      	mov	r2, r1
   10e3a:	71fb      	strb	r3, [r7, #7]
   10e3c:	4613      	mov	r3, r2
   10e3e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   10e40:	79fb      	ldrb	r3, [r7, #7]
   10e42:	115b      	asrs	r3, r3, #5
   10e44:	b2d8      	uxtb	r0, r3
   10e46:	79fb      	ldrb	r3, [r7, #7]
   10e48:	f003 031f 	and.w	r3, r3, #31
   10e4c:	2201      	movs	r2, #1
   10e4e:	fa02 f303 	lsl.w	r3, r2, r3
   10e52:	79ba      	ldrb	r2, [r7, #6]
   10e54:	4619      	mov	r1, r3
   10e56:	4b03      	ldr	r3, [pc, #12]	; (10e64 <gpio_set_pin_direction+0x34>)
   10e58:	4798      	blx	r3
}
   10e5a:	bf00      	nop
   10e5c:	3708      	adds	r7, #8
   10e5e:	46bd      	mov	sp, r7
   10e60:	bd80      	pop	{r7, pc}
   10e62:	bf00      	nop
   10e64:	00010c61 	.word	0x00010c61

00010e68 <gpio_set_pin_level>:
{
   10e68:	b580      	push	{r7, lr}
   10e6a:	b082      	sub	sp, #8
   10e6c:	af00      	add	r7, sp, #0
   10e6e:	4603      	mov	r3, r0
   10e70:	460a      	mov	r2, r1
   10e72:	71fb      	strb	r3, [r7, #7]
   10e74:	4613      	mov	r3, r2
   10e76:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   10e78:	79fb      	ldrb	r3, [r7, #7]
   10e7a:	115b      	asrs	r3, r3, #5
   10e7c:	b2d8      	uxtb	r0, r3
   10e7e:	79fb      	ldrb	r3, [r7, #7]
   10e80:	f003 031f 	and.w	r3, r3, #31
   10e84:	2201      	movs	r2, #1
   10e86:	fa02 f303 	lsl.w	r3, r2, r3
   10e8a:	79ba      	ldrb	r2, [r7, #6]
   10e8c:	4619      	mov	r1, r3
   10e8e:	4b03      	ldr	r3, [pc, #12]	; (10e9c <gpio_set_pin_level+0x34>)
   10e90:	4798      	blx	r3
}
   10e92:	bf00      	nop
   10e94:	3708      	adds	r7, #8
   10e96:	46bd      	mov	sp, r7
   10e98:	bd80      	pop	{r7, pc}
   10e9a:	bf00      	nop
   10e9c:	00010d49 	.word	0x00010d49

00010ea0 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   10ea0:	b580      	push	{r7, lr}
   10ea2:	b082      	sub	sp, #8
   10ea4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   10ea6:	2100      	movs	r1, #0
   10ea8:	2008      	movs	r0, #8
   10eaa:	4b24      	ldr	r3, [pc, #144]	; (10f3c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   10eac:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   10eae:	2100      	movs	r1, #0
   10eb0:	202b      	movs	r0, #43	; 0x2b
   10eb2:	4b22      	ldr	r3, [pc, #136]	; (10f3c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   10eb4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   10eb6:	2100      	movs	r1, #0
   10eb8:	202a      	movs	r0, #42	; 0x2a
   10eba:	4b20      	ldr	r3, [pc, #128]	; (10f3c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   10ebc:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   10ebe:	2102      	movs	r1, #2
   10ec0:	2008      	movs	r0, #8
   10ec2:	4b1f      	ldr	r3, [pc, #124]	; (10f40 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   10ec4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   10ec6:	2102      	movs	r1, #2
   10ec8:	202b      	movs	r0, #43	; 0x2b
   10eca:	4b1d      	ldr	r3, [pc, #116]	; (10f40 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   10ecc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   10ece:	2102      	movs	r1, #2
   10ed0:	202a      	movs	r0, #42	; 0x2a
   10ed2:	4b1b      	ldr	r3, [pc, #108]	; (10f40 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   10ed4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   10ed6:	2101      	movs	r1, #1
   10ed8:	2008      	movs	r0, #8
   10eda:	4b1a      	ldr	r3, [pc, #104]	; (10f44 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10edc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   10ede:	2100      	movs	r1, #0
   10ee0:	202b      	movs	r0, #43	; 0x2b
   10ee2:	4b18      	ldr	r3, [pc, #96]	; (10f44 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10ee4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   10ee6:	2100      	movs	r1, #0
   10ee8:	202a      	movs	r0, #42	; 0x2a
   10eea:	4b16      	ldr	r3, [pc, #88]	; (10f44 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10eec:	4798      	blx	r3

	delay_us(1);
   10eee:	2001      	movs	r0, #1
   10ef0:	4b15      	ldr	r3, [pc, #84]	; (10f48 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   10ef2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   10ef4:	2300      	movs	r3, #0
   10ef6:	607b      	str	r3, [r7, #4]
   10ef8:	687b      	ldr	r3, [r7, #4]
   10efa:	2b06      	cmp	r3, #6
   10efc:	dc11      	bgt.n	10f22 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   10efe:	2101      	movs	r1, #1
   10f00:	202a      	movs	r0, #42	; 0x2a
   10f02:	4b10      	ldr	r3, [pc, #64]	; (10f44 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10f04:	4798      	blx	r3
		delay_us(1);
   10f06:	2001      	movs	r0, #1
   10f08:	4b0f      	ldr	r3, [pc, #60]	; (10f48 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   10f0a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   10f0c:	2100      	movs	r1, #0
   10f0e:	202a      	movs	r0, #42	; 0x2a
   10f10:	4b0c      	ldr	r3, [pc, #48]	; (10f44 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10f12:	4798      	blx	r3
		delay_us(1);
   10f14:	2001      	movs	r0, #1
   10f16:	4b0c      	ldr	r3, [pc, #48]	; (10f48 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   10f18:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   10f1a:	687b      	ldr	r3, [r7, #4]
   10f1c:	3301      	adds	r3, #1
   10f1e:	607b      	str	r3, [r7, #4]
   10f20:	e7ea      	b.n	10ef8 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   10f22:	2101      	movs	r1, #1
   10f24:	202b      	movs	r0, #43	; 0x2b
   10f26:	4b07      	ldr	r3, [pc, #28]	; (10f44 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10f28:	4798      	blx	r3
	delay_us(1);
   10f2a:	2001      	movs	r0, #1
   10f2c:	4b06      	ldr	r3, [pc, #24]	; (10f48 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   10f2e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   10f30:	4b06      	ldr	r3, [pc, #24]	; (10f4c <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   10f32:	4798      	blx	r3
}
   10f34:	bf00      	nop
   10f36:	3708      	adds	r7, #8
   10f38:	46bd      	mov	sp, r7
   10f3a:	bd80      	pop	{r7, pc}
   10f3c:	00010e11 	.word	0x00010e11
   10f40:	00010e31 	.word	0x00010e31
   10f44:	00010e69 	.word	0x00010e69
   10f48:	0000252d 	.word	0x0000252d
   10f4c:	000018e9 	.word	0x000018e9

00010f50 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   10f50:	b480      	push	{r7}
   10f52:	b083      	sub	sp, #12
   10f54:	af00      	add	r7, sp, #0
   10f56:	6078      	str	r0, [r7, #4]
   10f58:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   10f5a:	687b      	ldr	r3, [r7, #4]
   10f5c:	683a      	ldr	r2, [r7, #0]
   10f5e:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   10f60:	687b      	ldr	r3, [r7, #4]
   10f62:	4a04      	ldr	r2, [pc, #16]	; (10f74 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   10f64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   10f68:	687b      	ldr	r3, [r7, #4]
   10f6a:	4618      	mov	r0, r3
   10f6c:	370c      	adds	r7, #12
   10f6e:	46bd      	mov	sp, r7
   10f70:	bc80      	pop	{r7}
   10f72:	4770      	bx	lr
   10f74:	001fff00 	.word	0x001fff00

00010f78 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   10f78:	b480      	push	{r7}
   10f7a:	b083      	sub	sp, #12
   10f7c:	af00      	add	r7, sp, #0
   10f7e:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   10f80:	687b      	ldr	r3, [r7, #4]
   10f82:	4618      	mov	r0, r3
   10f84:	370c      	adds	r7, #12
   10f86:	46bd      	mov	sp, r7
   10f88:	bc80      	pop	{r7}
   10f8a:	4770      	bx	lr

00010f8c <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   10f8c:	b580      	push	{r7, lr}
   10f8e:	b082      	sub	sp, #8
   10f90:	af00      	add	r7, sp, #0
   10f92:	6078      	str	r0, [r7, #4]
	xferDone=false;
   10f94:	687b      	ldr	r3, [r7, #4]
   10f96:	2200      	movs	r2, #0
   10f98:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   10f9a:	6878      	ldr	r0, [r7, #4]
   10f9c:	4b04      	ldr	r3, [pc, #16]	; (10fb0 <_ZN13N25Q256_Class4InitEv+0x24>)
   10f9e:	4798      	blx	r3
	return SelfTest();
   10fa0:	6878      	ldr	r0, [r7, #4]
   10fa2:	4b04      	ldr	r3, [pc, #16]	; (10fb4 <_ZN13N25Q256_Class4InitEv+0x28>)
   10fa4:	4798      	blx	r3
   10fa6:	4603      	mov	r3, r0
}
   10fa8:	4618      	mov	r0, r3
   10faa:	3708      	adds	r7, #8
   10fac:	46bd      	mov	sp, r7
   10fae:	bd80      	pop	{r7, pc}
   10fb0:	00010fb9 	.word	0x00010fb9
   10fb4:	00011155 	.word	0x00011155

00010fb8 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   10fb8:	b590      	push	{r4, r7, lr}
   10fba:	b083      	sub	sp, #12
   10fbc:	af00      	add	r7, sp, #0
   10fbe:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   10fc0:	687b      	ldr	r3, [r7, #4]
   10fc2:	685b      	ldr	r3, [r3, #4]
   10fc4:	4618      	mov	r0, r3
   10fc6:	4b08      	ldr	r3, [pc, #32]	; (10fe8 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   10fc8:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   10fca:	687b      	ldr	r3, [r7, #4]
   10fcc:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   10fce:	2300      	movs	r3, #0
   10fd0:	4a06      	ldr	r2, [pc, #24]	; (10fec <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   10fd2:	4807      	ldr	r0, [pc, #28]	; (10ff0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   10fd4:	4c07      	ldr	r4, [pc, #28]	; (10ff4 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   10fd6:	47a0      	blx	r4
   10fd8:	4602      	mov	r2, r0
   10fda:	687b      	ldr	r3, [r7, #4]
   10fdc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   10fe0:	bf00      	nop
   10fe2:	370c      	adds	r7, #12
   10fe4:	46bd      	mov	sp, r7
   10fe6:	bd90      	pop	{r4, r7, pc}
   10fe8:	00002c15 	.word	0x00002c15
   10fec:	00010ea1 	.word	0x00010ea1
   10ff0:	20007ca8 	.word	0x20007ca8
   10ff4:	0000c0ad 	.word	0x0000c0ad

00010ff8 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   10ff8:	b580      	push	{r7, lr}
   10ffa:	b084      	sub	sp, #16
   10ffc:	af00      	add	r7, sp, #0
   10ffe:	6078      	str	r0, [r7, #4]
   11000:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   11002:	687b      	ldr	r3, [r7, #4]
   11004:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   11008:	685b      	ldr	r3, [r3, #4]
   1100a:	689b      	ldr	r3, [r3, #8]
   1100c:	687a      	ldr	r2, [r7, #4]
   1100e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   11012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11016:	6839      	ldr	r1, [r7, #0]
   11018:	4798      	blx	r3
   1101a:	4603      	mov	r3, r0
   1101c:	60fb      	str	r3, [r7, #12]
	return	e;
   1101e:	68fb      	ldr	r3, [r7, #12]
}
   11020:	4618      	mov	r0, r3
   11022:	3710      	adds	r7, #16
   11024:	46bd      	mov	sp, r7
   11026:	bd80      	pop	{r7, pc}

00011028 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   11028:	b590      	push	{r4, r7, lr}
   1102a:	b087      	sub	sp, #28
   1102c:	af00      	add	r7, sp, #0
   1102e:	60f8      	str	r0, [r7, #12]
   11030:	60b9      	str	r1, [r7, #8]
   11032:	607a      	str	r2, [r7, #4]
   11034:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   11036:	68fb      	ldr	r3, [r7, #12]
   11038:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1103c:	685b      	ldr	r3, [r3, #4]
   1103e:	685c      	ldr	r4, [r3, #4]
   11040:	68fb      	ldr	r3, [r7, #12]
   11042:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   11046:	683b      	ldr	r3, [r7, #0]
   11048:	687a      	ldr	r2, [r7, #4]
   1104a:	68b9      	ldr	r1, [r7, #8]
   1104c:	47a0      	blx	r4
   1104e:	4603      	mov	r3, r0
   11050:	617b      	str	r3, [r7, #20]
	return	w;
   11052:	697b      	ldr	r3, [r7, #20]
}
   11054:	4618      	mov	r0, r3
   11056:	371c      	adds	r7, #28
   11058:	46bd      	mov	sp, r7
   1105a:	bd90      	pop	{r4, r7, pc}

0001105c <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   1105c:	b590      	push	{r4, r7, lr}
   1105e:	b087      	sub	sp, #28
   11060:	af00      	add	r7, sp, #0
   11062:	60f8      	str	r0, [r7, #12]
   11064:	60b9      	str	r1, [r7, #8]
   11066:	607a      	str	r2, [r7, #4]
   11068:	603b      	str	r3, [r7, #0]
	xferDone=false;
   1106a:	68fb      	ldr	r3, [r7, #12]
   1106c:	2200      	movs	r2, #0
   1106e:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   11070:	68fb      	ldr	r3, [r7, #12]
   11072:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   11076:	685b      	ldr	r3, [r3, #4]
   11078:	681c      	ldr	r4, [r3, #0]
   1107a:	68fb      	ldr	r3, [r7, #12]
   1107c:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   11080:	683b      	ldr	r3, [r7, #0]
   11082:	687a      	ldr	r2, [r7, #4]
   11084:	68b9      	ldr	r1, [r7, #8]
   11086:	47a0      	blx	r4
   11088:	4603      	mov	r3, r0
   1108a:	617b      	str	r3, [r7, #20]
	return	r;
   1108c:	697b      	ldr	r3, [r7, #20]
}
   1108e:	4618      	mov	r0, r3
   11090:	371c      	adds	r7, #28
   11092:	46bd      	mov	sp, r7
   11094:	bd90      	pop	{r4, r7, pc}
	...

00011098 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   11098:	b580      	push	{r7, lr}
   1109a:	b082      	sub	sp, #8
   1109c:	af00      	add	r7, sp, #0
   1109e:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   110a0:	687a      	ldr	r2, [r7, #4]
   110a2:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   110a6:	f043 0310 	orr.w	r3, r3, #16
   110aa:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   110ae:	687a      	ldr	r2, [r7, #4]
   110b0:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   110b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   110b8:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   110bc:	687a      	ldr	r2, [r7, #4]
   110be:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   110c2:	f36f 1305 	bfc	r3, #4, #2
   110c6:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   110ca:	687b      	ldr	r3, [r7, #4]
   110cc:	2205      	movs	r2, #5
   110ce:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   110d2:	687b      	ldr	r3, [r7, #4]
   110d4:	2201      	movs	r2, #1
   110d6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   110da:	687b      	ldr	r3, [r7, #4]
   110dc:	f203 2212 	addw	r2, r3, #530	; 0x212
   110e0:	687b      	ldr	r3, [r7, #4]
   110e2:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   110e6:	687b      	ldr	r3, [r7, #4]
   110e8:	685a      	ldr	r2, [r3, #4]
   110ea:	687b      	ldr	r3, [r7, #4]
   110ec:	f503 7305 	add.w	r3, r3, #532	; 0x214
   110f0:	4619      	mov	r1, r3
   110f2:	4610      	mov	r0, r2
   110f4:	4b04      	ldr	r3, [pc, #16]	; (11108 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   110f6:	4798      	blx	r3
		return status;
   110f8:	687b      	ldr	r3, [r7, #4]
   110fa:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   110fe:	4618      	mov	r0, r3
   11100:	3708      	adds	r7, #8
   11102:	46bd      	mov	sp, r7
   11104:	bd80      	pop	{r7, pc}
   11106:	bf00      	nop
   11108:	00002c8d 	.word	0x00002c8d

0001110c <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   1110c:	b580      	push	{r7, lr}
   1110e:	b082      	sub	sp, #8
   11110:	af00      	add	r7, sp, #0
   11112:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   11114:	6878      	ldr	r0, [r7, #4]
   11116:	4b0e      	ldr	r3, [pc, #56]	; (11150 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   11118:	4798      	blx	r3
   1111a:	4603      	mov	r3, r0
   1111c:	461a      	mov	r2, r3
   1111e:	687b      	ldr	r3, [r7, #4]
   11120:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   11124:	687b      	ldr	r3, [r7, #4]
   11126:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1112a:	f003 0301 	and.w	r3, r3, #1
   1112e:	2b00      	cmp	r3, #0
   11130:	d000      	beq.n	11134 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   11132:	e7ef      	b.n	11114 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   11134:	687b      	ldr	r3, [r7, #4]
   11136:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1113a:	f003 0301 	and.w	r3, r3, #1
   1113e:	2b00      	cmp	r3, #0
   11140:	bf0c      	ite	eq
   11142:	2301      	moveq	r3, #1
   11144:	2300      	movne	r3, #0
   11146:	b2db      	uxtb	r3, r3
}
   11148:	4618      	mov	r0, r3
   1114a:	3708      	adds	r7, #8
   1114c:	46bd      	mov	sp, r7
   1114e:	bd80      	pop	{r7, pc}
   11150:	00011099 	.word	0x00011099

00011154 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   11154:	b590      	push	{r4, r7, lr}
   11156:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   1115a:	b085      	sub	sp, #20
   1115c:	af00      	add	r7, sp, #0
   1115e:	f107 0310 	add.w	r3, r7, #16
   11162:	3b0c      	subs	r3, #12
   11164:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   11166:	f107 0310 	add.w	r3, r7, #16
   1116a:	3b0c      	subs	r3, #12
   1116c:	681b      	ldr	r3, [r3, #0]
   1116e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   11172:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   11176:	f107 0310 	add.w	r3, r7, #16
   1117a:	3b0c      	subs	r3, #12
   1117c:	681b      	ldr	r3, [r3, #0]
   1117e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   11182:	f107 0110 	add.w	r1, r7, #16
   11186:	3904      	subs	r1, #4
   11188:	f107 0010 	add.w	r0, r7, #16
   1118c:	380c      	subs	r0, #12
   1118e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   11192:	6800      	ldr	r0, [r0, #0]
   11194:	4c4b      	ldr	r4, [pc, #300]	; (112c4 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   11196:	47a0      	blx	r4
	WaitOnBusy();
   11198:	f107 0310 	add.w	r3, r7, #16
   1119c:	3b0c      	subs	r3, #12
   1119e:	6818      	ldr	r0, [r3, #0]
   111a0:	4b49      	ldr	r3, [pc, #292]	; (112c8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   111a2:	4798      	blx	r3
	Erase(currentAddress);
   111a4:	f107 0310 	add.w	r3, r7, #16
   111a8:	3b0c      	subs	r3, #12
   111aa:	681b      	ldr	r3, [r3, #0]
   111ac:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   111b0:	f107 0310 	add.w	r3, r7, #16
   111b4:	3b0c      	subs	r3, #12
   111b6:	4611      	mov	r1, r2
   111b8:	6818      	ldr	r0, [r3, #0]
   111ba:	4b44      	ldr	r3, [pc, #272]	; (112cc <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   111bc:	4798      	blx	r3
	WaitOnBusy();
   111be:	f107 0310 	add.w	r3, r7, #16
   111c2:	3b0c      	subs	r3, #12
   111c4:	6818      	ldr	r0, [r3, #0]
   111c6:	4b40      	ldr	r3, [pc, #256]	; (112c8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   111c8:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   111ca:	f107 0310 	add.w	r3, r7, #16
   111ce:	3b0c      	subs	r3, #12
   111d0:	681b      	ldr	r3, [r3, #0]
   111d2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   111d6:	f107 0110 	add.w	r1, r7, #16
   111da:	3904      	subs	r1, #4
   111dc:	f107 0010 	add.w	r0, r7, #16
   111e0:	380c      	subs	r0, #12
   111e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   111e6:	6800      	ldr	r0, [r0, #0]
   111e8:	4c39      	ldr	r4, [pc, #228]	; (112d0 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   111ea:	47a0      	blx	r4
	WaitOnBusy();
   111ec:	f107 0310 	add.w	r3, r7, #16
   111f0:	3b0c      	subs	r3, #12
   111f2:	6818      	ldr	r0, [r3, #0]
   111f4:	4b34      	ldr	r3, [pc, #208]	; (112c8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   111f6:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   111f8:	f107 0310 	add.w	r3, r7, #16
   111fc:	3b0c      	subs	r3, #12
   111fe:	681b      	ldr	r3, [r3, #0]
   11200:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   11204:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   11208:	f101 0110 	add.w	r1, r1, #16
   1120c:	3904      	subs	r1, #4
   1120e:	f107 0010 	add.w	r0, r7, #16
   11212:	380c      	subs	r0, #12
   11214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   11218:	6800      	ldr	r0, [r0, #0]
   1121a:	4c2a      	ldr	r4, [pc, #168]	; (112c4 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   1121c:	47a0      	blx	r4
	WaitOnBusy();
   1121e:	f107 0310 	add.w	r3, r7, #16
   11222:	3b0c      	subs	r3, #12
   11224:	6818      	ldr	r0, [r3, #0]
   11226:	4b28      	ldr	r3, [pc, #160]	; (112c8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   11228:	4798      	blx	r3
	isOK	 = true;
   1122a:	f107 0310 	add.w	r3, r7, #16
   1122e:	3b0c      	subs	r3, #12
   11230:	681b      	ldr	r3, [r3, #0]
   11232:	2201      	movs	r2, #1
   11234:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   11238:	2300      	movs	r3, #0
   1123a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1123e:	f102 020c 	add.w	r2, r2, #12
   11242:	6013      	str	r3, [r2, #0]
   11244:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   11248:	f103 030c 	add.w	r3, r3, #12
   1124c:	681b      	ldr	r3, [r3, #0]
   1124e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   11252:	da2b      	bge.n	112ac <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   11254:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   11258:	f103 0310 	add.w	r3, r3, #16
   1125c:	3b04      	subs	r3, #4
   1125e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   11262:	f102 020c 	add.w	r2, r2, #12
   11266:	6812      	ldr	r2, [r2, #0]
   11268:	4413      	add	r3, r2
   1126a:	781a      	ldrb	r2, [r3, #0]
   1126c:	f107 0310 	add.w	r3, r7, #16
   11270:	3b04      	subs	r3, #4
   11272:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   11276:	f101 010c 	add.w	r1, r1, #12
   1127a:	6809      	ldr	r1, [r1, #0]
   1127c:	440b      	add	r3, r1
   1127e:	781b      	ldrb	r3, [r3, #0]
   11280:	429a      	cmp	r2, r3
   11282:	d007      	beq.n	11294 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   11284:	f107 0310 	add.w	r3, r7, #16
   11288:	3b0c      	subs	r3, #12
   1128a:	681b      	ldr	r3, [r3, #0]
   1128c:	2200      	movs	r2, #0
   1128e:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   11292:	e00b      	b.n	112ac <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   11294:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   11298:	f103 030c 	add.w	r3, r3, #12
   1129c:	681b      	ldr	r3, [r3, #0]
   1129e:	3301      	adds	r3, #1
   112a0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   112a4:	f102 020c 	add.w	r2, r2, #12
   112a8:	6013      	str	r3, [r2, #0]
   112aa:	e7cb      	b.n	11244 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   112ac:	f107 0310 	add.w	r3, r7, #16
   112b0:	3b0c      	subs	r3, #12
   112b2:	681b      	ldr	r3, [r3, #0]
   112b4:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   112b8:	4618      	mov	r0, r3
   112ba:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   112be:	3714      	adds	r7, #20
   112c0:	46bd      	mov	sp, r7
   112c2:	bd90      	pop	{r4, r7, pc}
   112c4:	0001105d 	.word	0x0001105d
   112c8:	0001110d 	.word	0x0001110d
   112cc:	00010ff9 	.word	0x00010ff9
   112d0:	00011029 	.word	0x00011029

000112d4 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   112d4:	b580      	push	{r7, lr}
   112d6:	b082      	sub	sp, #8
   112d8:	af00      	add	r7, sp, #0
   112da:	6078      	str	r0, [r7, #4]
   112dc:	6039      	str	r1, [r7, #0]
   112de:	687b      	ldr	r3, [r7, #4]
   112e0:	2b01      	cmp	r3, #1
   112e2:	d10d      	bne.n	11300 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   112e4:	683b      	ldr	r3, [r7, #0]
   112e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   112ea:	4293      	cmp	r3, r2
   112ec:	d108      	bne.n	11300 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   112ee:	4906      	ldr	r1, [pc, #24]	; (11308 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   112f0:	4806      	ldr	r0, [pc, #24]	; (1130c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   112f2:	4b07      	ldr	r3, [pc, #28]	; (11310 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   112f4:	4798      	blx	r3
   112f6:	4a07      	ldr	r2, [pc, #28]	; (11314 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   112f8:	4907      	ldr	r1, [pc, #28]	; (11318 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   112fa:	4804      	ldr	r0, [pc, #16]	; (1130c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   112fc:	4b07      	ldr	r3, [pc, #28]	; (1131c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   112fe:	4798      	blx	r3
   11300:	bf00      	nop
   11302:	3708      	adds	r7, #8
   11304:	46bd      	mov	sp, r7
   11306:	bd80      	pop	{r7, pc}
   11308:	20007f58 	.word	0x20007f58
   1130c:	20007cb8 	.word	0x20007cb8
   11310:	00010f51 	.word	0x00010f51
   11314:	20000000 	.word	0x20000000
   11318:	00010f79 	.word	0x00010f79
   1131c:	000113d5 	.word	0x000113d5

00011320 <_GLOBAL__sub_I_ptrN25Q256Class>:
   11320:	b580      	push	{r7, lr}
   11322:	af00      	add	r7, sp, #0
   11324:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11328:	2001      	movs	r0, #1
   1132a:	4b01      	ldr	r3, [pc, #4]	; (11330 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   1132c:	4798      	blx	r3
   1132e:	bd80      	pop	{r7, pc}
   11330:	000112d5 	.word	0x000112d5

00011334 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   11334:	b580      	push	{r7, lr}
   11336:	b084      	sub	sp, #16
   11338:	af00      	add	r7, sp, #0
   1133a:	60f8      	str	r0, [r7, #12]
   1133c:	60b9      	str	r1, [r7, #8]
   1133e:	4613      	mov	r3, r2
   11340:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   11342:	68fb      	ldr	r3, [r7, #12]
   11344:	2b00      	cmp	r3, #0
   11346:	d004      	beq.n	11352 <io_write+0x1e>
   11348:	68bb      	ldr	r3, [r7, #8]
   1134a:	2b00      	cmp	r3, #0
   1134c:	d001      	beq.n	11352 <io_write+0x1e>
   1134e:	2301      	movs	r3, #1
   11350:	e000      	b.n	11354 <io_write+0x20>
   11352:	2300      	movs	r3, #0
   11354:	f003 0301 	and.w	r3, r3, #1
   11358:	b2db      	uxtb	r3, r3
   1135a:	2234      	movs	r2, #52	; 0x34
   1135c:	4907      	ldr	r1, [pc, #28]	; (1137c <io_write+0x48>)
   1135e:	4618      	mov	r0, r3
   11360:	4b07      	ldr	r3, [pc, #28]	; (11380 <io_write+0x4c>)
   11362:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   11364:	68fb      	ldr	r3, [r7, #12]
   11366:	681b      	ldr	r3, [r3, #0]
   11368:	88fa      	ldrh	r2, [r7, #6]
   1136a:	68b9      	ldr	r1, [r7, #8]
   1136c:	68f8      	ldr	r0, [r7, #12]
   1136e:	4798      	blx	r3
   11370:	4603      	mov	r3, r0
}
   11372:	4618      	mov	r0, r3
   11374:	3710      	adds	r7, #16
   11376:	46bd      	mov	sp, r7
   11378:	bd80      	pop	{r7, pc}
   1137a:	bf00      	nop
   1137c:	00011fe4 	.word	0x00011fe4
   11380:	00003cad 	.word	0x00003cad

00011384 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   11384:	b580      	push	{r7, lr}
   11386:	b084      	sub	sp, #16
   11388:	af00      	add	r7, sp, #0
   1138a:	60f8      	str	r0, [r7, #12]
   1138c:	60b9      	str	r1, [r7, #8]
   1138e:	4613      	mov	r3, r2
   11390:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   11392:	68fb      	ldr	r3, [r7, #12]
   11394:	2b00      	cmp	r3, #0
   11396:	d004      	beq.n	113a2 <io_read+0x1e>
   11398:	68bb      	ldr	r3, [r7, #8]
   1139a:	2b00      	cmp	r3, #0
   1139c:	d001      	beq.n	113a2 <io_read+0x1e>
   1139e:	2301      	movs	r3, #1
   113a0:	e000      	b.n	113a4 <io_read+0x20>
   113a2:	2300      	movs	r3, #0
   113a4:	f003 0301 	and.w	r3, r3, #1
   113a8:	b2db      	uxtb	r3, r3
   113aa:	223d      	movs	r2, #61	; 0x3d
   113ac:	4907      	ldr	r1, [pc, #28]	; (113cc <io_read+0x48>)
   113ae:	4618      	mov	r0, r3
   113b0:	4b07      	ldr	r3, [pc, #28]	; (113d0 <io_read+0x4c>)
   113b2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   113b4:	68fb      	ldr	r3, [r7, #12]
   113b6:	685b      	ldr	r3, [r3, #4]
   113b8:	88fa      	ldrh	r2, [r7, #6]
   113ba:	68b9      	ldr	r1, [r7, #8]
   113bc:	68f8      	ldr	r0, [r7, #12]
   113be:	4798      	blx	r3
   113c0:	4603      	mov	r3, r0
}
   113c2:	4618      	mov	r0, r3
   113c4:	3710      	adds	r7, #16
   113c6:	46bd      	mov	sp, r7
   113c8:	bd80      	pop	{r7, pc}
   113ca:	bf00      	nop
   113cc:	00011fe4 	.word	0x00011fe4
   113d0:	00003cad 	.word	0x00003cad

000113d4 <__aeabi_atexit>:
   113d4:	460b      	mov	r3, r1
   113d6:	4601      	mov	r1, r0
   113d8:	4618      	mov	r0, r3
   113da:	f000 b92f 	b.w	1163c <__cxa_atexit>
   113de:	bf00      	nop

000113e0 <__aeabi_frsub>:
   113e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   113e4:	e002      	b.n	113ec <__addsf3>
   113e6:	bf00      	nop

000113e8 <__aeabi_fsub>:
   113e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000113ec <__addsf3>:
   113ec:	0042      	lsls	r2, r0, #1
   113ee:	bf1f      	itttt	ne
   113f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   113f4:	ea92 0f03 	teqne	r2, r3
   113f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   113fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   11400:	d06a      	beq.n	114d8 <__addsf3+0xec>
   11402:	ea4f 6212 	mov.w	r2, r2, lsr #24
   11406:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1140a:	bfc1      	itttt	gt
   1140c:	18d2      	addgt	r2, r2, r3
   1140e:	4041      	eorgt	r1, r0
   11410:	4048      	eorgt	r0, r1
   11412:	4041      	eorgt	r1, r0
   11414:	bfb8      	it	lt
   11416:	425b      	neglt	r3, r3
   11418:	2b19      	cmp	r3, #25
   1141a:	bf88      	it	hi
   1141c:	4770      	bxhi	lr
   1141e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   11422:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   11426:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1142a:	bf18      	it	ne
   1142c:	4240      	negne	r0, r0
   1142e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   11432:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   11436:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1143a:	bf18      	it	ne
   1143c:	4249      	negne	r1, r1
   1143e:	ea92 0f03 	teq	r2, r3
   11442:	d03f      	beq.n	114c4 <__addsf3+0xd8>
   11444:	f1a2 0201 	sub.w	r2, r2, #1
   11448:	fa41 fc03 	asr.w	ip, r1, r3
   1144c:	eb10 000c 	adds.w	r0, r0, ip
   11450:	f1c3 0320 	rsb	r3, r3, #32
   11454:	fa01 f103 	lsl.w	r1, r1, r3
   11458:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1145c:	d502      	bpl.n	11464 <__addsf3+0x78>
   1145e:	4249      	negs	r1, r1
   11460:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   11464:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11468:	d313      	bcc.n	11492 <__addsf3+0xa6>
   1146a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1146e:	d306      	bcc.n	1147e <__addsf3+0x92>
   11470:	0840      	lsrs	r0, r0, #1
   11472:	ea4f 0131 	mov.w	r1, r1, rrx
   11476:	f102 0201 	add.w	r2, r2, #1
   1147a:	2afe      	cmp	r2, #254	; 0xfe
   1147c:	d251      	bcs.n	11522 <__addsf3+0x136>
   1147e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   11482:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   11486:	bf08      	it	eq
   11488:	f020 0001 	biceq.w	r0, r0, #1
   1148c:	ea40 0003 	orr.w	r0, r0, r3
   11490:	4770      	bx	lr
   11492:	0049      	lsls	r1, r1, #1
   11494:	eb40 0000 	adc.w	r0, r0, r0
   11498:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1149c:	f1a2 0201 	sub.w	r2, r2, #1
   114a0:	d1ed      	bne.n	1147e <__addsf3+0x92>
   114a2:	fab0 fc80 	clz	ip, r0
   114a6:	f1ac 0c08 	sub.w	ip, ip, #8
   114aa:	ebb2 020c 	subs.w	r2, r2, ip
   114ae:	fa00 f00c 	lsl.w	r0, r0, ip
   114b2:	bfaa      	itet	ge
   114b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   114b8:	4252      	neglt	r2, r2
   114ba:	4318      	orrge	r0, r3
   114bc:	bfbc      	itt	lt
   114be:	40d0      	lsrlt	r0, r2
   114c0:	4318      	orrlt	r0, r3
   114c2:	4770      	bx	lr
   114c4:	f092 0f00 	teq	r2, #0
   114c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   114cc:	bf06      	itte	eq
   114ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   114d2:	3201      	addeq	r2, #1
   114d4:	3b01      	subne	r3, #1
   114d6:	e7b5      	b.n	11444 <__addsf3+0x58>
   114d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   114dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   114e0:	bf18      	it	ne
   114e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   114e6:	d021      	beq.n	1152c <__addsf3+0x140>
   114e8:	ea92 0f03 	teq	r2, r3
   114ec:	d004      	beq.n	114f8 <__addsf3+0x10c>
   114ee:	f092 0f00 	teq	r2, #0
   114f2:	bf08      	it	eq
   114f4:	4608      	moveq	r0, r1
   114f6:	4770      	bx	lr
   114f8:	ea90 0f01 	teq	r0, r1
   114fc:	bf1c      	itt	ne
   114fe:	2000      	movne	r0, #0
   11500:	4770      	bxne	lr
   11502:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   11506:	d104      	bne.n	11512 <__addsf3+0x126>
   11508:	0040      	lsls	r0, r0, #1
   1150a:	bf28      	it	cs
   1150c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   11510:	4770      	bx	lr
   11512:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   11516:	bf3c      	itt	cc
   11518:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1151c:	4770      	bxcc	lr
   1151e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   11522:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   11526:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1152a:	4770      	bx	lr
   1152c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   11530:	bf16      	itet	ne
   11532:	4608      	movne	r0, r1
   11534:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   11538:	4601      	movne	r1, r0
   1153a:	0242      	lsls	r2, r0, #9
   1153c:	bf06      	itte	eq
   1153e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   11542:	ea90 0f01 	teqeq	r0, r1
   11546:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1154a:	4770      	bx	lr

0001154c <__aeabi_ui2f>:
   1154c:	f04f 0300 	mov.w	r3, #0
   11550:	e004      	b.n	1155c <__aeabi_i2f+0x8>
   11552:	bf00      	nop

00011554 <__aeabi_i2f>:
   11554:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   11558:	bf48      	it	mi
   1155a:	4240      	negmi	r0, r0
   1155c:	ea5f 0c00 	movs.w	ip, r0
   11560:	bf08      	it	eq
   11562:	4770      	bxeq	lr
   11564:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   11568:	4601      	mov	r1, r0
   1156a:	f04f 0000 	mov.w	r0, #0
   1156e:	e01c      	b.n	115aa <__aeabi_l2f+0x2a>

00011570 <__aeabi_ul2f>:
   11570:	ea50 0201 	orrs.w	r2, r0, r1
   11574:	bf08      	it	eq
   11576:	4770      	bxeq	lr
   11578:	f04f 0300 	mov.w	r3, #0
   1157c:	e00a      	b.n	11594 <__aeabi_l2f+0x14>
   1157e:	bf00      	nop

00011580 <__aeabi_l2f>:
   11580:	ea50 0201 	orrs.w	r2, r0, r1
   11584:	bf08      	it	eq
   11586:	4770      	bxeq	lr
   11588:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1158c:	d502      	bpl.n	11594 <__aeabi_l2f+0x14>
   1158e:	4240      	negs	r0, r0
   11590:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11594:	ea5f 0c01 	movs.w	ip, r1
   11598:	bf02      	ittt	eq
   1159a:	4684      	moveq	ip, r0
   1159c:	4601      	moveq	r1, r0
   1159e:	2000      	moveq	r0, #0
   115a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   115a4:	bf08      	it	eq
   115a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   115aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   115ae:	fabc f28c 	clz	r2, ip
   115b2:	3a08      	subs	r2, #8
   115b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   115b8:	db10      	blt.n	115dc <__aeabi_l2f+0x5c>
   115ba:	fa01 fc02 	lsl.w	ip, r1, r2
   115be:	4463      	add	r3, ip
   115c0:	fa00 fc02 	lsl.w	ip, r0, r2
   115c4:	f1c2 0220 	rsb	r2, r2, #32
   115c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   115cc:	fa20 f202 	lsr.w	r2, r0, r2
   115d0:	eb43 0002 	adc.w	r0, r3, r2
   115d4:	bf08      	it	eq
   115d6:	f020 0001 	biceq.w	r0, r0, #1
   115da:	4770      	bx	lr
   115dc:	f102 0220 	add.w	r2, r2, #32
   115e0:	fa01 fc02 	lsl.w	ip, r1, r2
   115e4:	f1c2 0220 	rsb	r2, r2, #32
   115e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   115ec:	fa21 f202 	lsr.w	r2, r1, r2
   115f0:	eb43 0002 	adc.w	r0, r3, r2
   115f4:	bf08      	it	eq
   115f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   115fa:	4770      	bx	lr

000115fc <__aeabi_f2uiz>:
   115fc:	0042      	lsls	r2, r0, #1
   115fe:	d20e      	bcs.n	1161e <__aeabi_f2uiz+0x22>
   11600:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   11604:	d30b      	bcc.n	1161e <__aeabi_f2uiz+0x22>
   11606:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1160a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1160e:	d409      	bmi.n	11624 <__aeabi_f2uiz+0x28>
   11610:	ea4f 2300 	mov.w	r3, r0, lsl #8
   11614:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11618:	fa23 f002 	lsr.w	r0, r3, r2
   1161c:	4770      	bx	lr
   1161e:	f04f 0000 	mov.w	r0, #0
   11622:	4770      	bx	lr
   11624:	f112 0f61 	cmn.w	r2, #97	; 0x61
   11628:	d101      	bne.n	1162e <__aeabi_f2uiz+0x32>
   1162a:	0242      	lsls	r2, r0, #9
   1162c:	d102      	bne.n	11634 <__aeabi_f2uiz+0x38>
   1162e:	f04f 30ff 	mov.w	r0, #4294967295
   11632:	4770      	bx	lr
   11634:	f04f 0000 	mov.w	r0, #0
   11638:	4770      	bx	lr
   1163a:	bf00      	nop

0001163c <__cxa_atexit>:
   1163c:	4613      	mov	r3, r2
   1163e:	460a      	mov	r2, r1
   11640:	4601      	mov	r1, r0
   11642:	2002      	movs	r0, #2
   11644:	f000 b9aa 	b.w	1199c <__register_exitproc>

00011648 <ffs>:
   11648:	b140      	cbz	r0, 1165c <ffs+0x14>
   1164a:	2300      	movs	r3, #0
   1164c:	fa40 f103 	asr.w	r1, r0, r3
   11650:	1c5a      	adds	r2, r3, #1
   11652:	07c9      	lsls	r1, r1, #31
   11654:	4613      	mov	r3, r2
   11656:	d5f9      	bpl.n	1164c <ffs+0x4>
   11658:	4610      	mov	r0, r2
   1165a:	4770      	bx	lr
   1165c:	4602      	mov	r2, r0
   1165e:	4610      	mov	r0, r2
   11660:	4770      	bx	lr
   11662:	bf00      	nop

00011664 <__libc_init_array>:
   11664:	b570      	push	{r4, r5, r6, lr}
   11666:	4e0f      	ldr	r6, [pc, #60]	; (116a4 <__libc_init_array+0x40>)
   11668:	4d0f      	ldr	r5, [pc, #60]	; (116a8 <__libc_init_array+0x44>)
   1166a:	1b76      	subs	r6, r6, r5
   1166c:	10b6      	asrs	r6, r6, #2
   1166e:	bf18      	it	ne
   11670:	2400      	movne	r4, #0
   11672:	d005      	beq.n	11680 <__libc_init_array+0x1c>
   11674:	3401      	adds	r4, #1
   11676:	f855 3b04 	ldr.w	r3, [r5], #4
   1167a:	4798      	blx	r3
   1167c:	42a6      	cmp	r6, r4
   1167e:	d1f9      	bne.n	11674 <__libc_init_array+0x10>
   11680:	4e0a      	ldr	r6, [pc, #40]	; (116ac <__libc_init_array+0x48>)
   11682:	4d0b      	ldr	r5, [pc, #44]	; (116b0 <__libc_init_array+0x4c>)
   11684:	1b76      	subs	r6, r6, r5
   11686:	f000 fcb9 	bl	11ffc <_init>
   1168a:	10b6      	asrs	r6, r6, #2
   1168c:	bf18      	it	ne
   1168e:	2400      	movne	r4, #0
   11690:	d006      	beq.n	116a0 <__libc_init_array+0x3c>
   11692:	3401      	adds	r4, #1
   11694:	f855 3b04 	ldr.w	r3, [r5], #4
   11698:	4798      	blx	r3
   1169a:	42a6      	cmp	r6, r4
   1169c:	d1f9      	bne.n	11692 <__libc_init_array+0x2e>
   1169e:	bd70      	pop	{r4, r5, r6, pc}
   116a0:	bd70      	pop	{r4, r5, r6, pc}
   116a2:	bf00      	nop
   116a4:	00012008 	.word	0x00012008
   116a8:	00012008 	.word	0x00012008
   116ac:	00012044 	.word	0x00012044
   116b0:	00012008 	.word	0x00012008

000116b4 <memcpy>:
   116b4:	4684      	mov	ip, r0
   116b6:	ea41 0300 	orr.w	r3, r1, r0
   116ba:	f013 0303 	ands.w	r3, r3, #3
   116be:	d16d      	bne.n	1179c <memcpy+0xe8>
   116c0:	3a40      	subs	r2, #64	; 0x40
   116c2:	d341      	bcc.n	11748 <memcpy+0x94>
   116c4:	f851 3b04 	ldr.w	r3, [r1], #4
   116c8:	f840 3b04 	str.w	r3, [r0], #4
   116cc:	f851 3b04 	ldr.w	r3, [r1], #4
   116d0:	f840 3b04 	str.w	r3, [r0], #4
   116d4:	f851 3b04 	ldr.w	r3, [r1], #4
   116d8:	f840 3b04 	str.w	r3, [r0], #4
   116dc:	f851 3b04 	ldr.w	r3, [r1], #4
   116e0:	f840 3b04 	str.w	r3, [r0], #4
   116e4:	f851 3b04 	ldr.w	r3, [r1], #4
   116e8:	f840 3b04 	str.w	r3, [r0], #4
   116ec:	f851 3b04 	ldr.w	r3, [r1], #4
   116f0:	f840 3b04 	str.w	r3, [r0], #4
   116f4:	f851 3b04 	ldr.w	r3, [r1], #4
   116f8:	f840 3b04 	str.w	r3, [r0], #4
   116fc:	f851 3b04 	ldr.w	r3, [r1], #4
   11700:	f840 3b04 	str.w	r3, [r0], #4
   11704:	f851 3b04 	ldr.w	r3, [r1], #4
   11708:	f840 3b04 	str.w	r3, [r0], #4
   1170c:	f851 3b04 	ldr.w	r3, [r1], #4
   11710:	f840 3b04 	str.w	r3, [r0], #4
   11714:	f851 3b04 	ldr.w	r3, [r1], #4
   11718:	f840 3b04 	str.w	r3, [r0], #4
   1171c:	f851 3b04 	ldr.w	r3, [r1], #4
   11720:	f840 3b04 	str.w	r3, [r0], #4
   11724:	f851 3b04 	ldr.w	r3, [r1], #4
   11728:	f840 3b04 	str.w	r3, [r0], #4
   1172c:	f851 3b04 	ldr.w	r3, [r1], #4
   11730:	f840 3b04 	str.w	r3, [r0], #4
   11734:	f851 3b04 	ldr.w	r3, [r1], #4
   11738:	f840 3b04 	str.w	r3, [r0], #4
   1173c:	f851 3b04 	ldr.w	r3, [r1], #4
   11740:	f840 3b04 	str.w	r3, [r0], #4
   11744:	3a40      	subs	r2, #64	; 0x40
   11746:	d2bd      	bcs.n	116c4 <memcpy+0x10>
   11748:	3230      	adds	r2, #48	; 0x30
   1174a:	d311      	bcc.n	11770 <memcpy+0xbc>
   1174c:	f851 3b04 	ldr.w	r3, [r1], #4
   11750:	f840 3b04 	str.w	r3, [r0], #4
   11754:	f851 3b04 	ldr.w	r3, [r1], #4
   11758:	f840 3b04 	str.w	r3, [r0], #4
   1175c:	f851 3b04 	ldr.w	r3, [r1], #4
   11760:	f840 3b04 	str.w	r3, [r0], #4
   11764:	f851 3b04 	ldr.w	r3, [r1], #4
   11768:	f840 3b04 	str.w	r3, [r0], #4
   1176c:	3a10      	subs	r2, #16
   1176e:	d2ed      	bcs.n	1174c <memcpy+0x98>
   11770:	320c      	adds	r2, #12
   11772:	d305      	bcc.n	11780 <memcpy+0xcc>
   11774:	f851 3b04 	ldr.w	r3, [r1], #4
   11778:	f840 3b04 	str.w	r3, [r0], #4
   1177c:	3a04      	subs	r2, #4
   1177e:	d2f9      	bcs.n	11774 <memcpy+0xc0>
   11780:	3204      	adds	r2, #4
   11782:	d008      	beq.n	11796 <memcpy+0xe2>
   11784:	07d2      	lsls	r2, r2, #31
   11786:	bf1c      	itt	ne
   11788:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1178c:	f800 3b01 	strbne.w	r3, [r0], #1
   11790:	d301      	bcc.n	11796 <memcpy+0xe2>
   11792:	880b      	ldrh	r3, [r1, #0]
   11794:	8003      	strh	r3, [r0, #0]
   11796:	4660      	mov	r0, ip
   11798:	4770      	bx	lr
   1179a:	bf00      	nop
   1179c:	2a08      	cmp	r2, #8
   1179e:	d313      	bcc.n	117c8 <memcpy+0x114>
   117a0:	078b      	lsls	r3, r1, #30
   117a2:	d08d      	beq.n	116c0 <memcpy+0xc>
   117a4:	f010 0303 	ands.w	r3, r0, #3
   117a8:	d08a      	beq.n	116c0 <memcpy+0xc>
   117aa:	f1c3 0304 	rsb	r3, r3, #4
   117ae:	1ad2      	subs	r2, r2, r3
   117b0:	07db      	lsls	r3, r3, #31
   117b2:	bf1c      	itt	ne
   117b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   117b8:	f800 3b01 	strbne.w	r3, [r0], #1
   117bc:	d380      	bcc.n	116c0 <memcpy+0xc>
   117be:	f831 3b02 	ldrh.w	r3, [r1], #2
   117c2:	f820 3b02 	strh.w	r3, [r0], #2
   117c6:	e77b      	b.n	116c0 <memcpy+0xc>
   117c8:	3a04      	subs	r2, #4
   117ca:	d3d9      	bcc.n	11780 <memcpy+0xcc>
   117cc:	3a01      	subs	r2, #1
   117ce:	f811 3b01 	ldrb.w	r3, [r1], #1
   117d2:	f800 3b01 	strb.w	r3, [r0], #1
   117d6:	d2f9      	bcs.n	117cc <memcpy+0x118>
   117d8:	780b      	ldrb	r3, [r1, #0]
   117da:	7003      	strb	r3, [r0, #0]
   117dc:	784b      	ldrb	r3, [r1, #1]
   117de:	7043      	strb	r3, [r0, #1]
   117e0:	788b      	ldrb	r3, [r1, #2]
   117e2:	7083      	strb	r3, [r0, #2]
   117e4:	4660      	mov	r0, ip
   117e6:	4770      	bx	lr

000117e8 <memset>:
   117e8:	b470      	push	{r4, r5, r6}
   117ea:	0786      	lsls	r6, r0, #30
   117ec:	d046      	beq.n	1187c <memset+0x94>
   117ee:	1e54      	subs	r4, r2, #1
   117f0:	2a00      	cmp	r2, #0
   117f2:	d041      	beq.n	11878 <memset+0x90>
   117f4:	b2ca      	uxtb	r2, r1
   117f6:	4603      	mov	r3, r0
   117f8:	e002      	b.n	11800 <memset+0x18>
   117fa:	f114 34ff 	adds.w	r4, r4, #4294967295
   117fe:	d33b      	bcc.n	11878 <memset+0x90>
   11800:	f803 2b01 	strb.w	r2, [r3], #1
   11804:	079d      	lsls	r5, r3, #30
   11806:	d1f8      	bne.n	117fa <memset+0x12>
   11808:	2c03      	cmp	r4, #3
   1180a:	d92e      	bls.n	1186a <memset+0x82>
   1180c:	b2cd      	uxtb	r5, r1
   1180e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   11812:	2c0f      	cmp	r4, #15
   11814:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   11818:	d919      	bls.n	1184e <memset+0x66>
   1181a:	f103 0210 	add.w	r2, r3, #16
   1181e:	4626      	mov	r6, r4
   11820:	3e10      	subs	r6, #16
   11822:	2e0f      	cmp	r6, #15
   11824:	f842 5c10 	str.w	r5, [r2, #-16]
   11828:	f842 5c0c 	str.w	r5, [r2, #-12]
   1182c:	f842 5c08 	str.w	r5, [r2, #-8]
   11830:	f842 5c04 	str.w	r5, [r2, #-4]
   11834:	f102 0210 	add.w	r2, r2, #16
   11838:	d8f2      	bhi.n	11820 <memset+0x38>
   1183a:	f1a4 0210 	sub.w	r2, r4, #16
   1183e:	f022 020f 	bic.w	r2, r2, #15
   11842:	f004 040f 	and.w	r4, r4, #15
   11846:	3210      	adds	r2, #16
   11848:	2c03      	cmp	r4, #3
   1184a:	4413      	add	r3, r2
   1184c:	d90d      	bls.n	1186a <memset+0x82>
   1184e:	461e      	mov	r6, r3
   11850:	4622      	mov	r2, r4
   11852:	3a04      	subs	r2, #4
   11854:	2a03      	cmp	r2, #3
   11856:	f846 5b04 	str.w	r5, [r6], #4
   1185a:	d8fa      	bhi.n	11852 <memset+0x6a>
   1185c:	1f22      	subs	r2, r4, #4
   1185e:	f022 0203 	bic.w	r2, r2, #3
   11862:	3204      	adds	r2, #4
   11864:	4413      	add	r3, r2
   11866:	f004 0403 	and.w	r4, r4, #3
   1186a:	b12c      	cbz	r4, 11878 <memset+0x90>
   1186c:	b2c9      	uxtb	r1, r1
   1186e:	441c      	add	r4, r3
   11870:	f803 1b01 	strb.w	r1, [r3], #1
   11874:	429c      	cmp	r4, r3
   11876:	d1fb      	bne.n	11870 <memset+0x88>
   11878:	bc70      	pop	{r4, r5, r6}
   1187a:	4770      	bx	lr
   1187c:	4614      	mov	r4, r2
   1187e:	4603      	mov	r3, r0
   11880:	e7c2      	b.n	11808 <memset+0x20>
   11882:	bf00      	nop
	...

000118c0 <strlen>:
   118c0:	f890 f000 	pld	[r0]
   118c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   118c8:	f020 0107 	bic.w	r1, r0, #7
   118cc:	f06f 0c00 	mvn.w	ip, #0
   118d0:	f010 0407 	ands.w	r4, r0, #7
   118d4:	f891 f020 	pld	[r1, #32]
   118d8:	f040 8049 	bne.w	1196e <strlen+0xae>
   118dc:	f04f 0400 	mov.w	r4, #0
   118e0:	f06f 0007 	mvn.w	r0, #7
   118e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   118e8:	f891 f040 	pld	[r1, #64]	; 0x40
   118ec:	f100 0008 	add.w	r0, r0, #8
   118f0:	fa82 f24c 	uadd8	r2, r2, ip
   118f4:	faa4 f28c 	sel	r2, r4, ip
   118f8:	fa83 f34c 	uadd8	r3, r3, ip
   118fc:	faa2 f38c 	sel	r3, r2, ip
   11900:	bb4b      	cbnz	r3, 11956 <strlen+0x96>
   11902:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   11906:	fa82 f24c 	uadd8	r2, r2, ip
   1190a:	f100 0008 	add.w	r0, r0, #8
   1190e:	faa4 f28c 	sel	r2, r4, ip
   11912:	fa83 f34c 	uadd8	r3, r3, ip
   11916:	faa2 f38c 	sel	r3, r2, ip
   1191a:	b9e3      	cbnz	r3, 11956 <strlen+0x96>
   1191c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   11920:	fa82 f24c 	uadd8	r2, r2, ip
   11924:	f100 0008 	add.w	r0, r0, #8
   11928:	faa4 f28c 	sel	r2, r4, ip
   1192c:	fa83 f34c 	uadd8	r3, r3, ip
   11930:	faa2 f38c 	sel	r3, r2, ip
   11934:	b97b      	cbnz	r3, 11956 <strlen+0x96>
   11936:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1193a:	f101 0120 	add.w	r1, r1, #32
   1193e:	fa82 f24c 	uadd8	r2, r2, ip
   11942:	f100 0008 	add.w	r0, r0, #8
   11946:	faa4 f28c 	sel	r2, r4, ip
   1194a:	fa83 f34c 	uadd8	r3, r3, ip
   1194e:	faa2 f38c 	sel	r3, r2, ip
   11952:	2b00      	cmp	r3, #0
   11954:	d0c6      	beq.n	118e4 <strlen+0x24>
   11956:	2a00      	cmp	r2, #0
   11958:	bf04      	itt	eq
   1195a:	3004      	addeq	r0, #4
   1195c:	461a      	moveq	r2, r3
   1195e:	ba12      	rev	r2, r2
   11960:	fab2 f282 	clz	r2, r2
   11964:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   11968:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1196c:	4770      	bx	lr
   1196e:	e9d1 2300 	ldrd	r2, r3, [r1]
   11972:	f004 0503 	and.w	r5, r4, #3
   11976:	f1c4 0000 	rsb	r0, r4, #0
   1197a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1197e:	f014 0f04 	tst.w	r4, #4
   11982:	f891 f040 	pld	[r1, #64]	; 0x40
   11986:	fa0c f505 	lsl.w	r5, ip, r5
   1198a:	ea62 0205 	orn	r2, r2, r5
   1198e:	bf1c      	itt	ne
   11990:	ea63 0305 	ornne	r3, r3, r5
   11994:	4662      	movne	r2, ip
   11996:	f04f 0400 	mov.w	r4, #0
   1199a:	e7a9      	b.n	118f0 <strlen+0x30>

0001199c <__register_exitproc>:
   1199c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   119a0:	4d2c      	ldr	r5, [pc, #176]	; (11a54 <__register_exitproc+0xb8>)
   119a2:	4606      	mov	r6, r0
   119a4:	6828      	ldr	r0, [r5, #0]
   119a6:	4698      	mov	r8, r3
   119a8:	460f      	mov	r7, r1
   119aa:	4691      	mov	r9, r2
   119ac:	f000 f882 	bl	11ab4 <__retarget_lock_acquire_recursive>
   119b0:	4b29      	ldr	r3, [pc, #164]	; (11a58 <__register_exitproc+0xbc>)
   119b2:	681c      	ldr	r4, [r3, #0]
   119b4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   119b8:	2b00      	cmp	r3, #0
   119ba:	d03e      	beq.n	11a3a <__register_exitproc+0x9e>
   119bc:	685a      	ldr	r2, [r3, #4]
   119be:	2a1f      	cmp	r2, #31
   119c0:	dc1c      	bgt.n	119fc <__register_exitproc+0x60>
   119c2:	f102 0e01 	add.w	lr, r2, #1
   119c6:	b176      	cbz	r6, 119e6 <__register_exitproc+0x4a>
   119c8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   119cc:	2401      	movs	r4, #1
   119ce:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   119d2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   119d6:	4094      	lsls	r4, r2
   119d8:	4320      	orrs	r0, r4
   119da:	2e02      	cmp	r6, #2
   119dc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   119e0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   119e4:	d023      	beq.n	11a2e <__register_exitproc+0x92>
   119e6:	3202      	adds	r2, #2
   119e8:	f8c3 e004 	str.w	lr, [r3, #4]
   119ec:	6828      	ldr	r0, [r5, #0]
   119ee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   119f2:	f000 f861 	bl	11ab8 <__retarget_lock_release_recursive>
   119f6:	2000      	movs	r0, #0
   119f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   119fc:	4b17      	ldr	r3, [pc, #92]	; (11a5c <__register_exitproc+0xc0>)
   119fe:	b30b      	cbz	r3, 11a44 <__register_exitproc+0xa8>
   11a00:	f44f 70c8 	mov.w	r0, #400	; 0x190
   11a04:	f7fd f8a0 	bl	eb48 <malloc>
   11a08:	4603      	mov	r3, r0
   11a0a:	b1d8      	cbz	r0, 11a44 <__register_exitproc+0xa8>
   11a0c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   11a10:	6002      	str	r2, [r0, #0]
   11a12:	2100      	movs	r1, #0
   11a14:	6041      	str	r1, [r0, #4]
   11a16:	460a      	mov	r2, r1
   11a18:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   11a1c:	f04f 0e01 	mov.w	lr, #1
   11a20:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   11a24:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   11a28:	2e00      	cmp	r6, #0
   11a2a:	d0dc      	beq.n	119e6 <__register_exitproc+0x4a>
   11a2c:	e7cc      	b.n	119c8 <__register_exitproc+0x2c>
   11a2e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   11a32:	430c      	orrs	r4, r1
   11a34:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   11a38:	e7d5      	b.n	119e6 <__register_exitproc+0x4a>
   11a3a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   11a3e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   11a42:	e7bb      	b.n	119bc <__register_exitproc+0x20>
   11a44:	6828      	ldr	r0, [r5, #0]
   11a46:	f000 f837 	bl	11ab8 <__retarget_lock_release_recursive>
   11a4a:	f04f 30ff 	mov.w	r0, #4294967295
   11a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11a52:	bf00      	nop
   11a54:	20000608 	.word	0x20000608
   11a58:	00011ff8 	.word	0x00011ff8
   11a5c:	0000eb49 	.word	0x0000eb49

00011a60 <register_fini>:
   11a60:	4b02      	ldr	r3, [pc, #8]	; (11a6c <register_fini+0xc>)
   11a62:	b113      	cbz	r3, 11a6a <register_fini+0xa>
   11a64:	4802      	ldr	r0, [pc, #8]	; (11a70 <register_fini+0x10>)
   11a66:	f000 b805 	b.w	11a74 <atexit>
   11a6a:	4770      	bx	lr
   11a6c:	00000000 	.word	0x00000000
   11a70:	00011a81 	.word	0x00011a81

00011a74 <atexit>:
   11a74:	2300      	movs	r3, #0
   11a76:	4601      	mov	r1, r0
   11a78:	461a      	mov	r2, r3
   11a7a:	4618      	mov	r0, r3
   11a7c:	f7ff bf8e 	b.w	1199c <__register_exitproc>

00011a80 <__libc_fini_array>:
   11a80:	b538      	push	{r3, r4, r5, lr}
   11a82:	4c0a      	ldr	r4, [pc, #40]	; (11aac <__libc_fini_array+0x2c>)
   11a84:	4d0a      	ldr	r5, [pc, #40]	; (11ab0 <__libc_fini_array+0x30>)
   11a86:	1b64      	subs	r4, r4, r5
   11a88:	10a4      	asrs	r4, r4, #2
   11a8a:	d00a      	beq.n	11aa2 <__libc_fini_array+0x22>
   11a8c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   11a90:	3b01      	subs	r3, #1
   11a92:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   11a96:	3c01      	subs	r4, #1
   11a98:	f855 3904 	ldr.w	r3, [r5], #-4
   11a9c:	4798      	blx	r3
   11a9e:	2c00      	cmp	r4, #0
   11aa0:	d1f9      	bne.n	11a96 <__libc_fini_array+0x16>
   11aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11aa6:	f000 bacd 	b.w	12044 <_fini>
   11aaa:	bf00      	nop
   11aac:	00012054 	.word	0x00012054
   11ab0:	00012050 	.word	0x00012050

00011ab4 <__retarget_lock_acquire_recursive>:
   11ab4:	4770      	bx	lr
   11ab6:	bf00      	nop

00011ab8 <__retarget_lock_release_recursive>:
   11ab8:	4770      	bx	lr
   11aba:	bf00      	nop
   11abc:	682f2e2e 	.word	0x682f2e2e
   11ac0:	702f6c70 	.word	0x702f6c70
   11ac4:	2f74726f 	.word	0x2f74726f
   11ac8:	5f6c7068 	.word	0x5f6c7068
   11acc:	6f697067 	.word	0x6f697067
   11ad0:	7361625f 	.word	0x7361625f
   11ad4:	00682e65 	.word	0x00682e65
   11ad8:	682f2e2e 	.word	0x682f2e2e
   11adc:	692f6c61 	.word	0x692f6c61
   11ae0:	756c636e 	.word	0x756c636e
   11ae4:	682f6564 	.word	0x682f6564
   11ae8:	775f6c61 	.word	0x775f6c61
   11aec:	682e7464 	.word	0x682e7464
   11af0:	00000000 	.word	0x00000000
   11af4:	682f2e2e 	.word	0x682f2e2e
   11af8:	732f6c61 	.word	0x732f6c61
   11afc:	682f6372 	.word	0x682f6372
   11b00:	635f6c61 	.word	0x635f6c61
   11b04:	6e656c61 	.word	0x6e656c61
   11b08:	2e726164 	.word	0x2e726164
   11b0c:	00000063 	.word	0x00000063
   11b10:	682f2e2e 	.word	0x682f2e2e
   11b14:	732f6c61 	.word	0x732f6c61
   11b18:	682f6372 	.word	0x682f6372
   11b1c:	635f6c61 	.word	0x635f6c61
   11b20:	615f6e61 	.word	0x615f6e61
   11b24:	636e7973 	.word	0x636e7973
   11b28:	0000632e 	.word	0x0000632e
   11b2c:	682f2e2e 	.word	0x682f2e2e
   11b30:	732f6c61 	.word	0x732f6c61
   11b34:	682f6372 	.word	0x682f6372
   11b38:	635f6c61 	.word	0x635f6c61
   11b3c:	735f6372 	.word	0x735f6372
   11b40:	2e636e79 	.word	0x2e636e79
   11b44:	00000063 	.word	0x00000063
   11b48:	682f2e2e 	.word	0x682f2e2e
   11b4c:	732f6c61 	.word	0x732f6c61
   11b50:	682f6372 	.word	0x682f6372
   11b54:	695f6c61 	.word	0x695f6c61
   11b58:	6d5f6332 	.word	0x6d5f6332
   11b5c:	7973615f 	.word	0x7973615f
   11b60:	632e636e 	.word	0x632e636e
   11b64:	00000000 	.word	0x00000000
   11b68:	682f2e2e 	.word	0x682f2e2e
   11b6c:	732f6c61 	.word	0x732f6c61
   11b70:	682f6372 	.word	0x682f6372
   11b74:	695f6c61 	.word	0x695f6c61
   11b78:	6d5f6332 	.word	0x6d5f6332
   11b7c:	6e79735f 	.word	0x6e79735f
   11b80:	00632e63 	.word	0x00632e63
   11b84:	682f2e2e 	.word	0x682f2e2e
   11b88:	732f6c61 	.word	0x732f6c61
   11b8c:	682f6372 	.word	0x682f6372
   11b90:	705f6c61 	.word	0x705f6c61
   11b94:	632e6d77 	.word	0x632e6d77
   11b98:	00000000 	.word	0x00000000
   11b9c:	682f2e2e 	.word	0x682f2e2e
   11ba0:	732f6c61 	.word	0x732f6c61
   11ba4:	682f6372 	.word	0x682f6372
   11ba8:	715f6c61 	.word	0x715f6c61
   11bac:	5f697073 	.word	0x5f697073
   11bb0:	636e7973 	.word	0x636e7973
   11bb4:	0000632e 	.word	0x0000632e
   11bb8:	682f2e2e 	.word	0x682f2e2e
   11bbc:	732f6c61 	.word	0x732f6c61
   11bc0:	682f6372 	.word	0x682f6372
   11bc4:	735f6c61 	.word	0x735f6c61
   11bc8:	6d5f6970 	.word	0x6d5f6970
   11bcc:	6e79735f 	.word	0x6e79735f
   11bd0:	00632e63 	.word	0x00632e63
   11bd4:	682f2e2e 	.word	0x682f2e2e
   11bd8:	732f6c61 	.word	0x732f6c61
   11bdc:	682f6372 	.word	0x682f6372
   11be0:	745f6c61 	.word	0x745f6c61
   11be4:	72656d69 	.word	0x72656d69
   11be8:	0000632e 	.word	0x0000632e
   11bec:	682f2e2e 	.word	0x682f2e2e
   11bf0:	752f6c61 	.word	0x752f6c61
   11bf4:	736c6974 	.word	0x736c6974
   11bf8:	6372732f 	.word	0x6372732f
   11bfc:	6974752f 	.word	0x6974752f
   11c00:	6c5f736c 	.word	0x6c5f736c
   11c04:	2e747369 	.word	0x2e747369
   11c08:	00000063 	.word	0x00000063

00011c0c <_map>:
   11c0c:	00000000 00000040 00000001 00000021     ....@.......!...
   11c1c:	00000003 00000003 00000004 00000004     ................
   11c2c:	00000005 00000005 00000006 00000056     ............V...
   11c3c:	00000007 00000057 00000008 00000028     ....W.......(...
   11c4c:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   11c5c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00011c6c <user_mux_confs>:
   11c6c:	00020100 00000000 00000000 00000000     ................
	...

00011cb0 <channel_confs>:
   11cb0:	0660065f 00000000 00000000 00000000     _.`.............
	...

00011cf0 <interrupt_cfg>:
	...
   11d70:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   11d80:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   11d90:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   11da0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   11db0:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   11dc0:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   11dd0:	43000400 43000800 43000c00              ...C...C...C

00011ddc <sercomspi_regs>:
   11ddc:	0020000c 00020000 00000000 01ff0001     .. .............
   11dec:	30000c04 02000000 00000000 ff00ef00     ...0............
   11dfc:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   11e0c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   11e1c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   11e2c:	43001400 43001800                       ...C...C

00011e34 <_usb_ep_cfgs>:
   11e34:	20000a1c 00000000 00000040 20000a5c     ... ....@...\.. 
   11e44:	20000a9c 00400040 20000adc 20000b1c     ... @.@.... ... 
   11e54:	00400040 20000b5c 20000b9c 00400040     @.@.\.. ... @.@.
   11e64:	20000bdc 20000c1c 00400040 00000804     ... ... @.@.....
   11e74:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   11e84:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   11e94:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   11ea4:	7361625f 00682e65                       _base.h.

00011eac <n25q256a_interface>:
   11eac:	0000c0fd 0000c1a1 0000c2b1 0000c469     ............i...
   11ebc:	0000c4f9 752f2e2e 642f6273 63697665     ....../usb/devic
   11ecc:	73752f65 2e636462 00000063              e/usbdc.c...

00011ed8 <_ZTV9CDC_Class>:
	...
   11ee0:	0000e289 0000e369 0000dedd 0000e251     ....i.......Q...
   11ef0:	0000e401 0000e215 0000e0f9 0000e149     ............I...
   11f00:	0000e271 0000e2d1                       q.......

00011f08 <_ZTV6Stream>:
	...
   11f10:	0000eb5d 0000e4d1 0000dedd 0000def1     ]...............
   11f20:	0000eb5d 0000eb5d 0000eb5d 2e257830     ]...]...]...0x%.
   11f30:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   11f40:	0066766f                                ovf.

00011f44 <_ZTV5Print>:
	...
   11f4c:	0000eb5d 0000e4d1 0000dedd 0000def1     ]...............
   11f5c:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   11f6c:	73655466 41502074 44455353 00000000     fTest PASSED....
   11f7c:	00000a0d 73616c46 654d2068 79726f6d     ....Flash Memory
   11f8c:	6c655320 73655466 41462074 44454c49      SelfTest FAILED
   11f9c:	00000000 2e2f2e2e 2e2e2f2e 554c412f     ....../../../ALU
   11fac:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   11fbc:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   11fcc:	6f697067 7361625f 00682e65              gpio_base.h.

00011fd8 <defaultParameters>:
   11fd8:	00004020                                 @..

00011fdc <defaultPreferences>:
   11fdc:	000000fa 00000032 682f2e2e 732f6c61     ....2...../hal/s
   11fec:	682f6372 695f6c61 00632e6f              rc/hal_io.c.

00011ff8 <_global_impure_ptr>:
   11ff8:	200001e0                                ... 

00011ffc <_init>:
   11ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ffe:	bf00      	nop
   12000:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12002:	bc08      	pop	{r3}
   12004:	469e      	mov	lr, r3
   12006:	4770      	bx	lr

00012008 <__init_array_start>:
   12008:	00011a61 	.word	0x00011a61

0001200c <__frame_dummy_init_array_entry>:
   1200c:	00000289 000004e5 0000099d 0000dea5     ................
   1201c:	0000e481 0000eb35 0000ec25 0000f869     ....5...%...i...
   1202c:	0000fdc1 0000ff79 0001011d 000101b5     ....y...........
   1203c:	00010a49 00011321                       I...!...

00012044 <_fini>:
   12044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12046:	bf00      	nop
   12048:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1204a:	bc08      	pop	{r3}
   1204c:	469e      	mov	lr, r3
   1204e:	4770      	bx	lr

00012050 <__fini_array_start>:
   12050:	00000265 	.word	0x00000265
