
Main_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034f8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  000034f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003a4  20000068  00003560  00020068  2**2
                  ALLOC
  3 .stack        00002004  2000040c  00003904  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002f734  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038ce  00000000  00000000  0004f81d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001389a  00000000  00000000  000530eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000cc8  00000000  00000000  00066985  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000016e0  00000000  00000000  0006764d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b13a  00000000  00000000  00068d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011ba6  00000000  00000000  00083e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d94e  00000000  00000000  00095a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002238  00000000  00000000  0012335c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 24 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .$. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      5c:	f1 25 00 00 29 01 00 00 31 11 00 00 29 01 00 00     .%..)...1...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	000034f8 	.word	0x000034f8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	000034f8 	.word	0x000034f8
     10c:	000034f8 	.word	0x000034f8
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	00000481 	.word	0x00000481
     124:	00003379 	.word	0x00003379

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a2a      	ldr	r2, [pc, #168]	; (1d8 <Reset_Handler+0xac>)
     130:	4b2a      	ldr	r3, [pc, #168]	; (1dc <Reset_Handler+0xb0>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b29      	ldr	r3, [pc, #164]	; (1e0 <Reset_Handler+0xb4>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a29      	ldr	r2, [pc, #164]	; (1e4 <Reset_Handler+0xb8>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4823      	ldr	r0, [pc, #140]	; (1dc <Reset_Handler+0xb0>)
     14e:	4922      	ldr	r1, [pc, #136]	; (1d8 <Reset_Handler+0xac>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a23      	ldr	r2, [pc, #140]	; (1e8 <Reset_Handler+0xbc>)
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xc0>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <Reset_Handler+0xc0>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a1d      	ldr	r2, [pc, #116]	; (1f0 <Reset_Handler+0xc4>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b1d      	ldr	r3, [pc, #116]	; (1f4 <Reset_Handler+0xc8>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     182:	39fd      	subs	r1, #253	; 0xfd
     184:	2390      	movs	r3, #144	; 0x90
     186:	005b      	lsls	r3, r3, #1
     188:	4a1b      	ldr	r2, [pc, #108]	; (1f8 <Reset_Handler+0xcc>)
     18a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     18c:	4a1b      	ldr	r2, [pc, #108]	; (1fc <Reset_Handler+0xd0>)
     18e:	78d3      	ldrb	r3, [r2, #3]
     190:	2503      	movs	r5, #3
     192:	43ab      	bics	r3, r5
     194:	2402      	movs	r4, #2
     196:	4323      	orrs	r3, r4
     198:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	270c      	movs	r7, #12
     19e:	43bb      	bics	r3, r7
     1a0:	2608      	movs	r6, #8
     1a2:	4333      	orrs	r3, r6
     1a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <Reset_Handler+0xd4>)
     1a8:	7b98      	ldrb	r0, [r3, #14]
     1aa:	2230      	movs	r2, #48	; 0x30
     1ac:	4390      	bics	r0, r2
     1ae:	2220      	movs	r2, #32
     1b0:	4310      	orrs	r0, r2
     1b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b4:	7b99      	ldrb	r1, [r3, #14]
     1b6:	43b9      	bics	r1, r7
     1b8:	4331      	orrs	r1, r6
     1ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1bc:	7b9a      	ldrb	r2, [r3, #14]
     1be:	43aa      	bics	r2, r5
     1c0:	4322      	orrs	r2, r4
     1c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0f      	ldr	r2, [pc, #60]	; (204 <Reset_Handler+0xd8>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <Reset_Handler+0xdc>)
     1d0:	4798      	blx	r3
        main();
     1d2:	4b0e      	ldr	r3, [pc, #56]	; (20c <Reset_Handler+0xe0>)
     1d4:	4798      	blx	r3
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xaa>
     1d8:	000034f8 	.word	0x000034f8
     1dc:	20000000 	.word	0x20000000
     1e0:	20000068 	.word	0x20000068
     1e4:	20000004 	.word	0x20000004
     1e8:	20000068 	.word	0x20000068
     1ec:	2000040c 	.word	0x2000040c
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00003385 	.word	0x00003385
     20c:	0000282d 	.word	0x0000282d

00000210 <SPI_0_PORT_init>:
struct spi_m_async_descriptor SPI_0;

struct usart_sync_descriptor USART_0;

void SPI_0_PORT_init(void)
{
     210:	b5f0      	push	{r4, r5, r6, r7, lr}
     212:	46ce      	mov	lr, r9
     214:	4647      	mov	r7, r8
     216:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     218:	21c0      	movs	r1, #192	; 0xc0
     21a:	05c9      	lsls	r1, r1, #23
     21c:	2380      	movs	r3, #128	; 0x80
     21e:	009b      	lsls	r3, r3, #2
     220:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     222:	4b25      	ldr	r3, [pc, #148]	; (2b8 <SPI_0_PORT_init+0xa8>)
     224:	4a25      	ldr	r2, [pc, #148]	; (2bc <SPI_0_PORT_init+0xac>)
     226:	629a      	str	r2, [r3, #40]	; 0x28
     228:	4a25      	ldr	r2, [pc, #148]	; (2c0 <SPI_0_PORT_init+0xb0>)
     22a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     22c:	2449      	movs	r4, #73	; 0x49
     22e:	5d1a      	ldrb	r2, [r3, r4]
     230:	2004      	movs	r0, #4
     232:	4382      	bics	r2, r0
     234:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     236:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     238:	2601      	movs	r6, #1
     23a:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     23c:	2201      	movs	r2, #1
     23e:	4310      	orrs	r0, r2
     240:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     242:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     244:	2734      	movs	r7, #52	; 0x34
     246:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     248:	250f      	movs	r5, #15
     24a:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     24c:	2420      	movs	r4, #32
     24e:	46a1      	mov	r9, r4
     250:	464c      	mov	r4, r9
     252:	4320      	orrs	r0, r4
     254:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     256:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     258:	2080      	movs	r0, #128	; 0x80
     25a:	00c0      	lsls	r0, r0, #3
     25c:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     25e:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     260:	4818      	ldr	r0, [pc, #96]	; (2c4 <SPI_0_PORT_init+0xb4>)
     262:	6298      	str	r0, [r3, #40]	; 0x28
     264:	20c0      	movs	r0, #192	; 0xc0
     266:	0600      	lsls	r0, r0, #24
     268:	4684      	mov	ip, r0
     26a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     26c:	3716      	adds	r7, #22
     26e:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     270:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     272:	4310      	orrs	r0, r2
     274:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     276:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     278:	2035      	movs	r0, #53	; 0x35
     27a:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     27c:	240f      	movs	r4, #15
     27e:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
     280:	3c0d      	subs	r4, #13
     282:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     284:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     286:	2780      	movs	r7, #128	; 0x80
     288:	013f      	lsls	r7, r7, #4
     28a:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     28c:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     28e:	490e      	ldr	r1, [pc, #56]	; (2c8 <SPI_0_PORT_init+0xb8>)
     290:	6299      	str	r1, [r3, #40]	; 0x28
     292:	4661      	mov	r1, ip
     294:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     296:	274b      	movs	r7, #75	; 0x4b
     298:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     29a:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     29c:	4311      	orrs	r1, r2
     29e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a0:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2a4:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     2a6:	4649      	mov	r1, r9
     2a8:	430a      	orrs	r2, r1
     2aa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ac:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
     2ae:	bc0c      	pop	{r2, r3}
     2b0:	4690      	mov	r8, r2
     2b2:	4699      	mov	r9, r3
     2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	41004400 	.word	0x41004400
     2bc:	40020200 	.word	0x40020200
     2c0:	c0020000 	.word	0xc0020000
     2c4:	40000400 	.word	0x40000400
     2c8:	40000800 	.word	0x40000800

000002cc <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2cc:	4a04      	ldr	r2, [pc, #16]	; (2e0 <SPI_0_CLOCK_init+0x14>)
     2ce:	6a13      	ldr	r3, [r2, #32]
     2d0:	2104      	movs	r1, #4
     2d2:	430b      	orrs	r3, r1
     2d4:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2d6:	4a03      	ldr	r2, [pc, #12]	; (2e4 <SPI_0_CLOCK_init+0x18>)
     2d8:	4b03      	ldr	r3, [pc, #12]	; (2e8 <SPI_0_CLOCK_init+0x1c>)
     2da:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     2dc:	4770      	bx	lr
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	40000400 	.word	0x40000400
     2e4:	00004014 	.word	0x00004014
     2e8:	40000c00 	.word	0x40000c00

000002ec <SPI_0_init>:

void SPI_0_init(void)
{
     2ec:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     2ee:	4b04      	ldr	r3, [pc, #16]	; (300 <SPI_0_init+0x14>)
     2f0:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     2f2:	4904      	ldr	r1, [pc, #16]	; (304 <SPI_0_init+0x18>)
     2f4:	4804      	ldr	r0, [pc, #16]	; (308 <SPI_0_init+0x1c>)
     2f6:	4b05      	ldr	r3, [pc, #20]	; (30c <SPI_0_init+0x20>)
     2f8:	4798      	blx	r3
	SPI_0_PORT_init();
     2fa:	4b05      	ldr	r3, [pc, #20]	; (310 <SPI_0_init+0x24>)
     2fc:	4798      	blx	r3
}
     2fe:	bd10      	pop	{r4, pc}
     300:	000002cd 	.word	0x000002cd
     304:	42000800 	.word	0x42000800
     308:	200003b8 	.word	0x200003b8
     30c:	00000771 	.word	0x00000771
     310:	00000211 	.word	0x00000211

00000314 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     314:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     316:	4b0e      	ldr	r3, [pc, #56]	; (350 <USART_0_PORT_init+0x3c>)
     318:	224c      	movs	r2, #76	; 0x4c
     31a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     31c:	2501      	movs	r5, #1
     31e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     320:	2401      	movs	r4, #1
     322:	4321      	orrs	r1, r4
     324:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     326:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     328:	2036      	movs	r0, #54	; 0x36
     32a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     32c:	3a3d      	subs	r2, #61	; 0x3d
     32e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     330:	3a0d      	subs	r2, #13
     332:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     334:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     336:	214d      	movs	r1, #77	; 0x4d
     338:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     33a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     33c:	4322      	orrs	r2, r4
     33e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     340:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     342:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     344:	393e      	subs	r1, #62	; 0x3e
     346:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     348:	3111      	adds	r1, #17
     34a:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     34c:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
}
     34e:	bd30      	pop	{r4, r5, pc}
     350:	41004400 	.word	0x41004400

00000354 <USART_0_CLOCK_init>:
     354:	4a04      	ldr	r2, [pc, #16]	; (368 <USART_0_CLOCK_init+0x14>)
     356:	6a13      	ldr	r3, [r2, #32]
     358:	2110      	movs	r1, #16
     35a:	430b      	orrs	r3, r1
     35c:	6213      	str	r3, [r2, #32]
     35e:	4a03      	ldr	r2, [pc, #12]	; (36c <USART_0_CLOCK_init+0x18>)
     360:	4b03      	ldr	r3, [pc, #12]	; (370 <USART_0_CLOCK_init+0x1c>)
     362:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
}
     364:	4770      	bx	lr
     366:	46c0      	nop			; (mov r8, r8)
     368:	40000400 	.word	0x40000400
     36c:	00004016 	.word	0x00004016
     370:	40000c00 	.word	0x40000c00

00000374 <USART_0_init>:

void USART_0_init(void)
{
     374:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     376:	4b05      	ldr	r3, [pc, #20]	; (38c <USART_0_init+0x18>)
     378:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM2, (void *)NULL);
     37a:	2200      	movs	r2, #0
     37c:	4904      	ldr	r1, [pc, #16]	; (390 <USART_0_init+0x1c>)
     37e:	4805      	ldr	r0, [pc, #20]	; (394 <USART_0_init+0x20>)
     380:	4b05      	ldr	r3, [pc, #20]	; (398 <USART_0_init+0x24>)
     382:	4798      	blx	r3
	USART_0_PORT_init();
     384:	4b05      	ldr	r3, [pc, #20]	; (39c <USART_0_init+0x28>)
     386:	4798      	blx	r3
}
     388:	bd10      	pop	{r4, pc}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	00000355 	.word	0x00000355
     390:	42001000 	.word	0x42001000
     394:	20000400 	.word	0x20000400
     398:	000008d9 	.word	0x000008d9
     39c:	00000315 	.word	0x00000315

000003a0 <delay_driver_init>:

void delay_driver_init(void)
{
     3a0:	b510      	push	{r4, lr}
	delay_init(SysTick);
     3a2:	4802      	ldr	r0, [pc, #8]	; (3ac <delay_driver_init+0xc>)
     3a4:	4b02      	ldr	r3, [pc, #8]	; (3b0 <delay_driver_init+0x10>)
     3a6:	4798      	blx	r3
}
     3a8:	bd10      	pop	{r4, pc}
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	e000e010 	.word	0xe000e010
     3b0:	00000561 	.word	0x00000561

000003b4 <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
     3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b6:	46c6      	mov	lr, r8
     3b8:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3ba:	24c0      	movs	r4, #192	; 0xc0
     3bc:	05e4      	lsls	r4, r4, #23
     3be:	2280      	movs	r2, #128	; 0x80
     3c0:	0452      	lsls	r2, r2, #17
     3c2:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	4b1a      	ldr	r3, [pc, #104]	; (430 <USB_0_PORT_init+0x7c>)
     3c6:	2780      	movs	r7, #128	; 0x80
     3c8:	05ff      	lsls	r7, r7, #23
     3ca:	629f      	str	r7, [r3, #40]	; 0x28
     3cc:	4919      	ldr	r1, [pc, #100]	; (434 <USB_0_PORT_init+0x80>)
     3ce:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3d0:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3d2:	2058      	movs	r0, #88	; 0x58
     3d4:	5c19      	ldrb	r1, [r3, r0]
     3d6:	2204      	movs	r2, #4
     3d8:	4690      	mov	r8, r2
     3da:	4391      	bics	r1, r2
     3dc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3de:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3e0:	2601      	movs	r6, #1
     3e2:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e4:	2501      	movs	r5, #1
     3e6:	4329      	orrs	r1, r5
     3e8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ea:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ec:	381c      	subs	r0, #28
     3ee:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3f0:	320b      	adds	r2, #11
     3f2:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3f4:	3a09      	subs	r2, #9
     3f6:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f8:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3fa:	2180      	movs	r1, #128	; 0x80
     3fc:	0489      	lsls	r1, r1, #18
     3fe:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     400:	629f      	str	r7, [r3, #40]	; 0x28
     402:	4f0d      	ldr	r7, [pc, #52]	; (438 <USB_0_PORT_init+0x84>)
     404:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     406:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     408:	2159      	movs	r1, #89	; 0x59
     40a:	5c5c      	ldrb	r4, [r3, r1]
     40c:	4642      	mov	r2, r8
     40e:	4394      	bics	r4, r2
     410:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     412:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     414:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     416:	432a      	orrs	r2, r5
     418:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     41a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     41c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     41e:	394a      	subs	r1, #74	; 0x4a
     420:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     422:	3151      	adds	r1, #81	; 0x51
     424:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     426:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     428:	bc04      	pop	{r2}
     42a:	4690      	mov	r8, r2
     42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	41004400 	.word	0x41004400
     434:	c0000100 	.word	0xc0000100
     438:	c0000200 	.word	0xc0000200

0000043c <USB_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     43c:	4b06      	ldr	r3, [pc, #24]	; (458 <USB_0_CLOCK_init+0x1c>)
     43e:	69da      	ldr	r2, [r3, #28]
     440:	2120      	movs	r1, #32
     442:	430a      	orrs	r2, r1
     444:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     446:	695a      	ldr	r2, [r3, #20]
     448:	3120      	adds	r1, #32
     44a:	430a      	orrs	r2, r1
     44c:	615a      	str	r2, [r3, #20]
     44e:	4a03      	ldr	r2, [pc, #12]	; (45c <USB_0_CLOCK_init+0x20>)
     450:	4b03      	ldr	r3, [pc, #12]	; (460 <USB_0_CLOCK_init+0x24>)
     452:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     454:	4770      	bx	lr
     456:	46c0      	nop			; (mov r8, r8)
     458:	40000400 	.word	0x40000400
     45c:	00004206 	.word	0x00004206
     460:	40000c00 	.word	0x40000c00

00000464 <USB_0_init>:

void USB_0_init(void)
{
     464:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     466:	4b03      	ldr	r3, [pc, #12]	; (474 <USB_0_init+0x10>)
     468:	4798      	blx	r3
	usb_d_init();
     46a:	4b03      	ldr	r3, [pc, #12]	; (478 <USB_0_init+0x14>)
     46c:	4798      	blx	r3
	USB_0_PORT_init();
     46e:	4b03      	ldr	r3, [pc, #12]	; (47c <USB_0_init+0x18>)
     470:	4798      	blx	r3
}
     472:	bd10      	pop	{r4, pc}
     474:	0000043d 	.word	0x0000043d
     478:	00000b95 	.word	0x00000b95
     47c:	000003b5 	.word	0x000003b5

00000480 <system_init>:

void system_init(void)
{
     480:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     482:	4b25      	ldr	r3, [pc, #148]	; (518 <system_init+0x98>)
     484:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     486:	22c0      	movs	r2, #192	; 0xc0
     488:	05d2      	lsls	r2, r2, #23
     48a:	2304      	movs	r3, #4
     48c:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     48e:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     490:	4b22      	ldr	r3, [pc, #136]	; (51c <system_init+0x9c>)
     492:	4923      	ldr	r1, [pc, #140]	; (520 <system_init+0xa0>)
     494:	6299      	str	r1, [r3, #40]	; 0x28
     496:	20c0      	movs	r0, #192	; 0xc0
     498:	0600      	lsls	r0, r0, #24
     49a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     49c:	2542      	movs	r5, #66	; 0x42
     49e:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a0:	2101      	movs	r1, #1
     4a2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a4:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4a6:	2408      	movs	r4, #8
     4a8:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4aa:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4ac:	4c1d      	ldr	r4, [pc, #116]	; (524 <system_init+0xa4>)
     4ae:	629c      	str	r4, [r3, #40]	; 0x28
     4b0:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b2:	3501      	adds	r5, #1
     4b4:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b6:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4b8:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ba:	2410      	movs	r4, #16
     4bc:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4be:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c0:	4c19      	ldr	r4, [pc, #100]	; (528 <system_init+0xa8>)
     4c2:	629c      	str	r4, [r3, #40]	; 0x28
     4c4:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c6:	3501      	adds	r5, #1
     4c8:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ca:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4cc:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4ce:	2480      	movs	r4, #128	; 0x80
     4d0:	0524      	lsls	r4, r4, #20
     4d2:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4d4:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4d6:	2480      	movs	r4, #128	; 0x80
     4d8:	05e4      	lsls	r4, r4, #23
     4da:	629c      	str	r4, [r3, #40]	; 0x28
     4dc:	4c13      	ldr	r4, [pc, #76]	; (52c <system_init+0xac>)
     4de:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e0:	3517      	adds	r5, #23
     4e2:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4e4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4e6:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4e8:	2480      	movs	r4, #128	; 0x80
     4ea:	00a4      	lsls	r4, r4, #2
     4ec:	3539      	adds	r5, #57	; 0x39
     4ee:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4f0:	3d0c      	subs	r5, #12
     4f2:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4f4:	22a8      	movs	r2, #168	; 0xa8
     4f6:	4c0e      	ldr	r4, [pc, #56]	; (530 <system_init+0xb0>)
     4f8:	509c      	str	r4, [r3, r2]
     4fa:	5098      	str	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4fc:	20c9      	movs	r0, #201	; 0xc9
     4fe:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     500:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     502:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(Write_Fail, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(Write_Fail, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
     504:	4b0b      	ldr	r3, [pc, #44]	; (534 <system_init+0xb4>)
     506:	4798      	blx	r3

	USART_0_init();
     508:	4b0b      	ldr	r3, [pc, #44]	; (538 <system_init+0xb8>)
     50a:	4798      	blx	r3

	delay_driver_init();
     50c:	4b0b      	ldr	r3, [pc, #44]	; (53c <system_init+0xbc>)
     50e:	4798      	blx	r3

	USB_0_init();
     510:	4b0b      	ldr	r3, [pc, #44]	; (540 <system_init+0xc0>)
     512:	4798      	blx	r3
}
     514:	bd70      	pop	{r4, r5, r6, pc}
     516:	46c0      	nop			; (mov r8, r8)
     518:	00000f55 	.word	0x00000f55
     51c:	41004400 	.word	0x41004400
     520:	40000004 	.word	0x40000004
     524:	40000008 	.word	0x40000008
     528:	40000010 	.word	0x40000010
     52c:	c0000800 	.word	0xc0000800
     530:	40000200 	.word	0x40000200
     534:	000002ed 	.word	0x000002ed
     538:	00000375 	.word	0x00000375
     53c:	000003a1 	.word	0x000003a1
     540:	00000465 	.word	0x00000465

00000544 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     544:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     548:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     54a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     54c:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     550:	4770      	bx	lr

00000552 <atomic_leave_critical>:
     552:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     556:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     558:	f383 8810 	msr	PRIMASK, r3
}
     55c:	4770      	bx	lr
	...

00000560 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     560:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     562:	4b02      	ldr	r3, [pc, #8]	; (56c <delay_init+0xc>)
     564:	6018      	str	r0, [r3, #0]
     566:	4b02      	ldr	r3, [pc, #8]	; (570 <delay_init+0x10>)
     568:	4798      	blx	r3
}
     56a:	bd10      	pop	{r4, pc}
     56c:	20000084 	.word	0x20000084
     570:	0000150d 	.word	0x0000150d

00000574 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     574:	b570      	push	{r4, r5, r6, lr}
     576:	0004      	movs	r4, r0
     578:	000e      	movs	r6, r1
     57a:	0015      	movs	r5, r2
	ASSERT(io);
     57c:	1e43      	subs	r3, r0, #1
     57e:	4198      	sbcs	r0, r3
     580:	b2c0      	uxtb	r0, r0
     582:	2228      	movs	r2, #40	; 0x28
     584:	32ff      	adds	r2, #255	; 0xff
     586:	490a      	ldr	r1, [pc, #40]	; (5b0 <_spi_m_async_io_write+0x3c>)
     588:	4b0a      	ldr	r3, [pc, #40]	; (5b4 <_spi_m_async_io_write+0x40>)
     58a:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     58c:	0023      	movs	r3, r4
     58e:	2200      	movs	r2, #0
     590:	61a2      	str	r2, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     592:	6166      	str	r6, [r4, #20]
	spi->xfer.size  = length;
     594:	61e5      	str	r5, [r4, #28]
	spi->xfercnt    = 0;
     596:	6222      	str	r2, [r4, #32]
	spi->xfer.rxbuf = NULL;
     598:	3b24      	subs	r3, #36	; 0x24

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     59a:	2110      	movs	r1, #16
     59c:	322c      	adds	r2, #44	; 0x2c
     59e:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_tx(&spi->dev, true);
     5a0:	0020      	movs	r0, r4
     5a2:	3820      	subs	r0, #32
     5a4:	390f      	subs	r1, #15
     5a6:	4b04      	ldr	r3, [pc, #16]	; (5b8 <_spi_m_async_io_write+0x44>)
     5a8:	4798      	blx	r3

	return ERR_NONE;
}
     5aa:	2000      	movs	r0, #0
     5ac:	bd70      	pop	{r4, r5, r6, pc}
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	000033f0 	.word	0x000033f0
     5b4:	00000ee9 	.word	0x00000ee9
     5b8:	000012f1 	.word	0x000012f1

000005bc <_spi_m_async_io_read>:
{
     5bc:	b570      	push	{r4, r5, r6, lr}
     5be:	0004      	movs	r4, r0
     5c0:	000e      	movs	r6, r1
     5c2:	0015      	movs	r5, r2
	ASSERT(io);
     5c4:	1e43      	subs	r3, r0, #1
     5c6:	4198      	sbcs	r0, r3
     5c8:	b2c0      	uxtb	r0, r0
     5ca:	2206      	movs	r2, #6
     5cc:	32ff      	adds	r2, #255	; 0xff
     5ce:	490c      	ldr	r1, [pc, #48]	; (600 <_spi_m_async_io_read+0x44>)
     5d0:	4b0c      	ldr	r3, [pc, #48]	; (604 <_spi_m_async_io_read+0x48>)
     5d2:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     5d4:	0023      	movs	r3, r4
     5d6:	61a6      	str	r6, [r4, #24]
	spi->xfer.txbuf = NULL;
     5d8:	2200      	movs	r2, #0
     5da:	6162      	str	r2, [r4, #20]
	spi->xfer.size  = length;
     5dc:	61e5      	str	r5, [r4, #28]
	spi->xfercnt    = 0;
     5de:	6222      	str	r2, [r4, #32]
	spi->xfer.rxbuf = buf;
     5e0:	3b24      	subs	r3, #36	; 0x24
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     5e2:	2110      	movs	r1, #16
     5e4:	322c      	adds	r2, #44	; 0x2c
     5e6:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_rx(&spi->dev, true);
     5e8:	3c20      	subs	r4, #32
     5ea:	390f      	subs	r1, #15
     5ec:	0020      	movs	r0, r4
     5ee:	4b06      	ldr	r3, [pc, #24]	; (608 <_spi_m_async_io_read+0x4c>)
     5f0:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     5f2:	4906      	ldr	r1, [pc, #24]	; (60c <_spi_m_async_io_read+0x50>)
     5f4:	0020      	movs	r0, r4
     5f6:	4b06      	ldr	r3, [pc, #24]	; (610 <_spi_m_async_io_read+0x54>)
     5f8:	4798      	blx	r3
}
     5fa:	2000      	movs	r0, #0
     5fc:	bd70      	pop	{r4, r5, r6, pc}
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	000033f0 	.word	0x000033f0
     604:	00000ee9 	.word	0x00000ee9
     608:	0000132d 	.word	0x0000132d
     60c:	000001ff 	.word	0x000001ff
     610:	000013b1 	.word	0x000013b1

00000614 <_spi_dev_error>:
{
     614:	b570      	push	{r4, r5, r6, lr}
     616:	0004      	movs	r4, r0
     618:	000e      	movs	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     61a:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     61c:	2100      	movs	r1, #0
     61e:	4b0a      	ldr	r3, [pc, #40]	; (648 <_spi_dev_error+0x34>)
     620:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     622:	2100      	movs	r1, #0
     624:	0020      	movs	r0, r4
     626:	4b09      	ldr	r3, [pc, #36]	; (64c <_spi_dev_error+0x38>)
     628:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     62a:	2100      	movs	r1, #0
     62c:	0020      	movs	r0, r4
     62e:	4b08      	ldr	r3, [pc, #32]	; (650 <_spi_dev_error+0x3c>)
     630:	4798      	blx	r3
	spi->stat = 0;
     632:	2200      	movs	r2, #0
     634:	232c      	movs	r3, #44	; 0x2c
     636:	54ea      	strb	r2, [r5, r3]
	if (spi->callbacks.cb_error) {
     638:	6b23      	ldr	r3, [r4, #48]	; 0x30
     63a:	2b00      	cmp	r3, #0
     63c:	d002      	beq.n	644 <_spi_dev_error+0x30>
		spi->callbacks.cb_error(spi, status);
     63e:	0031      	movs	r1, r6
     640:	0028      	movs	r0, r5
     642:	4798      	blx	r3
}
     644:	bd70      	pop	{r4, r5, r6, pc}
     646:	46c0      	nop			; (mov r8, r8)
     648:	000012f1 	.word	0x000012f1
     64c:	0000132d 	.word	0x0000132d
     650:	00001371 	.word	0x00001371

00000654 <_spi_dev_complete>:
{
     654:	b510      	push	{r4, lr}
     656:	0004      	movs	r4, r0
	if (spi->xfercnt >= spi->xfer.size) {
     658:	6c02      	ldr	r2, [r0, #64]	; 0x40
     65a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     65c:	429a      	cmp	r2, r3
     65e:	d200      	bcs.n	662 <_spi_dev_complete+0xe>
}
     660:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx_complete(dev, false);
     662:	2100      	movs	r1, #0
     664:	4b05      	ldr	r3, [pc, #20]	; (67c <_spi_dev_complete+0x28>)
     666:	4798      	blx	r3
		spi->stat = 0;
     668:	1f23      	subs	r3, r4, #4
     66a:	2100      	movs	r1, #0
     66c:	222c      	movs	r2, #44	; 0x2c
     66e:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
     670:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     672:	2b00      	cmp	r3, #0
     674:	d0f4      	beq.n	660 <_spi_dev_complete+0xc>
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     676:	1f20      	subs	r0, r4, #4
			spi->callbacks.cb_xfer(spi);
     678:	4798      	blx	r3
}
     67a:	e7f1      	b.n	660 <_spi_dev_complete+0xc>
     67c:	00001371 	.word	0x00001371

00000680 <_spi_dev_tx>:
{
     680:	b510      	push	{r4, lr}
     682:	0004      	movs	r4, r0
	if (!(dev->char_size > 1)) {
     684:	7903      	ldrb	r3, [r0, #4]
     686:	2b01      	cmp	r3, #1
     688:	d90d      	bls.n	6a6 <_spi_dev_tx+0x26>
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     68a:	6b41      	ldr	r1, [r0, #52]	; 0x34
     68c:	6c03      	ldr	r3, [r0, #64]	; 0x40
     68e:	1c58      	adds	r0, r3, #1
     690:	6420      	str	r0, [r4, #64]	; 0x40
     692:	005b      	lsls	r3, r3, #1
     694:	5a59      	ldrh	r1, [r3, r1]
     696:	0020      	movs	r0, r4
     698:	4b0c      	ldr	r3, [pc, #48]	; (6cc <_spi_dev_tx+0x4c>)
     69a:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     69c:	6c22      	ldr	r2, [r4, #64]	; 0x40
     69e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     6a0:	429a      	cmp	r2, r3
     6a2:	d009      	beq.n	6b8 <_spi_dev_tx+0x38>
}
     6a4:	bd10      	pop	{r4, pc}
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     6a6:	6b41      	ldr	r1, [r0, #52]	; 0x34
     6a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
     6aa:	1c50      	adds	r0, r2, #1
     6ac:	6420      	str	r0, [r4, #64]	; 0x40
     6ae:	5c89      	ldrb	r1, [r1, r2]
     6b0:	0020      	movs	r0, r4
     6b2:	4b06      	ldr	r3, [pc, #24]	; (6cc <_spi_dev_tx+0x4c>)
     6b4:	4798      	blx	r3
     6b6:	e7f1      	b.n	69c <_spi_dev_tx+0x1c>
		_spi_m_async_enable_tx(dev, false);
     6b8:	2100      	movs	r1, #0
     6ba:	0020      	movs	r0, r4
     6bc:	4b04      	ldr	r3, [pc, #16]	; (6d0 <_spi_dev_tx+0x50>)
     6be:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     6c0:	2101      	movs	r1, #1
     6c2:	0020      	movs	r0, r4
     6c4:	4b03      	ldr	r3, [pc, #12]	; (6d4 <_spi_dev_tx+0x54>)
     6c6:	4798      	blx	r3
}
     6c8:	e7ec      	b.n	6a4 <_spi_dev_tx+0x24>
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	000013b1 	.word	0x000013b1
     6d0:	000012f1 	.word	0x000012f1
     6d4:	00001371 	.word	0x00001371

000006d8 <_spi_dev_rx>:
{
     6d8:	b570      	push	{r4, r5, r6, lr}
     6da:	0004      	movs	r4, r0
	if (spi->xfer.rxbuf) {
     6dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
     6de:	2b00      	cmp	r3, #0
     6e0:	d022      	beq.n	728 <_spi_dev_rx+0x50>
		if (!(dev->char_size > 1)) {
     6e2:	7902      	ldrb	r2, [r0, #4]
     6e4:	2a01      	cmp	r2, #1
     6e6:	d917      	bls.n	718 <_spi_dev_rx+0x40>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     6e8:	6c05      	ldr	r5, [r0, #64]	; 0x40
     6ea:	1c69      	adds	r1, r5, #1
     6ec:	6401      	str	r1, [r0, #64]	; 0x40
     6ee:	006d      	lsls	r5, r5, #1
     6f0:	195d      	adds	r5, r3, r5
     6f2:	4b1c      	ldr	r3, [pc, #112]	; (764 <_spi_dev_rx+0x8c>)
     6f4:	4798      	blx	r3
     6f6:	8028      	strh	r0, [r5, #0]
	if (spi->xfercnt < spi->xfer.size) {
     6f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
     6fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     6fc:	4293      	cmp	r3, r2
     6fe:	d223      	bcs.n	748 <_spi_dev_rx+0x70>
		if (spi->xfer.txbuf) {
     700:	6b62      	ldr	r2, [r4, #52]	; 0x34
     702:	2a00      	cmp	r2, #0
     704:	d01b      	beq.n	73e <_spi_dev_rx+0x66>
			if (!(dev->char_size > 1)) {
     706:	7921      	ldrb	r1, [r4, #4]
     708:	2901      	cmp	r1, #1
     70a:	d913      	bls.n	734 <_spi_dev_rx+0x5c>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     70c:	005b      	lsls	r3, r3, #1
     70e:	5a99      	ldrh	r1, [r3, r2]
     710:	0020      	movs	r0, r4
     712:	4b15      	ldr	r3, [pc, #84]	; (768 <_spi_dev_rx+0x90>)
     714:	4798      	blx	r3
}
     716:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     718:	6c05      	ldr	r5, [r0, #64]	; 0x40
     71a:	1c69      	adds	r1, r5, #1
     71c:	6401      	str	r1, [r0, #64]	; 0x40
     71e:	195d      	adds	r5, r3, r5
     720:	4b10      	ldr	r3, [pc, #64]	; (764 <_spi_dev_rx+0x8c>)
     722:	4798      	blx	r3
     724:	7028      	strb	r0, [r5, #0]
     726:	e7e7      	b.n	6f8 <_spi_dev_rx+0x20>
		_spi_m_async_read_one(dev);
     728:	4b0e      	ldr	r3, [pc, #56]	; (764 <_spi_dev_rx+0x8c>)
     72a:	4798      	blx	r3
		spi->xfercnt++;
     72c:	6c23      	ldr	r3, [r4, #64]	; 0x40
     72e:	3301      	adds	r3, #1
     730:	6423      	str	r3, [r4, #64]	; 0x40
     732:	e7e1      	b.n	6f8 <_spi_dev_rx+0x20>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     734:	5cd1      	ldrb	r1, [r2, r3]
     736:	0020      	movs	r0, r4
     738:	4b0b      	ldr	r3, [pc, #44]	; (768 <_spi_dev_rx+0x90>)
     73a:	4798      	blx	r3
     73c:	e7eb      	b.n	716 <_spi_dev_rx+0x3e>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     73e:	88e1      	ldrh	r1, [r4, #6]
     740:	0020      	movs	r0, r4
     742:	4b09      	ldr	r3, [pc, #36]	; (768 <_spi_dev_rx+0x90>)
     744:	4798      	blx	r3
     746:	e7e6      	b.n	716 <_spi_dev_rx+0x3e>
		_spi_m_async_enable_rx(dev, false);
     748:	2100      	movs	r1, #0
     74a:	0020      	movs	r0, r4
     74c:	4b07      	ldr	r3, [pc, #28]	; (76c <_spi_dev_rx+0x94>)
     74e:	4798      	blx	r3
		spi->stat = 0;
     750:	1f23      	subs	r3, r4, #4
     752:	2100      	movs	r1, #0
     754:	222c      	movs	r2, #44	; 0x2c
     756:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
     758:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     75a:	2b00      	cmp	r3, #0
     75c:	d0db      	beq.n	716 <_spi_dev_rx+0x3e>
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     75e:	1f20      	subs	r0, r4, #4
			spi->callbacks.cb_xfer(spi);
     760:	4798      	blx	r3
}
     762:	e7d8      	b.n	716 <_spi_dev_rx+0x3e>
     764:	000013e5 	.word	0x000013e5
     768:	000013b1 	.word	0x000013b1
     76c:	0000132d 	.word	0x0000132d

00000770 <spi_m_async_init>:
{
     770:	b570      	push	{r4, r5, r6, lr}
     772:	0004      	movs	r4, r0
     774:	000e      	movs	r6, r1
	ASSERT(spi && hw);
     776:	2800      	cmp	r0, #0
     778:	d026      	beq.n	7c8 <spi_m_async_init+0x58>
     77a:	0008      	movs	r0, r1
     77c:	1e43      	subs	r3, r0, #1
     77e:	4198      	sbcs	r0, r3
     780:	b2c0      	uxtb	r0, r0
     782:	22a5      	movs	r2, #165	; 0xa5
     784:	4911      	ldr	r1, [pc, #68]	; (7cc <spi_m_async_init+0x5c>)
     786:	4b12      	ldr	r3, [pc, #72]	; (7d0 <spi_m_async_init+0x60>)
     788:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     78a:	6066      	str	r6, [r4, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
     78c:	1d25      	adds	r5, r4, #4
     78e:	0031      	movs	r1, r6
     790:	0028      	movs	r0, r5
     792:	4b10      	ldr	r3, [pc, #64]	; (7d4 <spi_m_async_init+0x64>)
     794:	4798      	blx	r3
	if (rc >= 0) {
     796:	2800      	cmp	r0, #0
     798:	db15      	blt.n	7c6 <spi_m_async_init+0x56>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     79a:	4a0f      	ldr	r2, [pc, #60]	; (7d8 <spi_m_async_init+0x68>)
     79c:	2100      	movs	r1, #0
     79e:	0028      	movs	r0, r5
     7a0:	4e0e      	ldr	r6, [pc, #56]	; (7dc <spi_m_async_init+0x6c>)
     7a2:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     7a4:	4a0e      	ldr	r2, [pc, #56]	; (7e0 <spi_m_async_init+0x70>)
     7a6:	2101      	movs	r1, #1
     7a8:	0028      	movs	r0, r5
     7aa:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     7ac:	4a0d      	ldr	r2, [pc, #52]	; (7e4 <spi_m_async_init+0x74>)
     7ae:	2102      	movs	r1, #2
     7b0:	0028      	movs	r0, r5
     7b2:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     7b4:	4a0c      	ldr	r2, [pc, #48]	; (7e8 <spi_m_async_init+0x78>)
     7b6:	2103      	movs	r1, #3
     7b8:	0028      	movs	r0, r5
     7ba:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
     7bc:	4b0b      	ldr	r3, [pc, #44]	; (7ec <spi_m_async_init+0x7c>)
     7be:	62a3      	str	r3, [r4, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     7c0:	4b0b      	ldr	r3, [pc, #44]	; (7f0 <spi_m_async_init+0x80>)
     7c2:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
     7c4:	2000      	movs	r0, #0
}
     7c6:	bd70      	pop	{r4, r5, r6, pc}
     7c8:	2000      	movs	r0, #0
     7ca:	e7da      	b.n	782 <spi_m_async_init+0x12>
     7cc:	000033f0 	.word	0x000033f0
     7d0:	00000ee9 	.word	0x00000ee9
     7d4:	0000127d 	.word	0x0000127d
     7d8:	00000681 	.word	0x00000681
     7dc:	00001411 	.word	0x00001411
     7e0:	000006d9 	.word	0x000006d9
     7e4:	00000655 	.word	0x00000655
     7e8:	00000615 	.word	0x00000615
     7ec:	000005bd 	.word	0x000005bd
     7f0:	00000575 	.word	0x00000575

000007f4 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7f6:	46ce      	mov	lr, r9
     7f8:	4647      	mov	r7, r8
     7fa:	b580      	push	{r7, lr}
     7fc:	0004      	movs	r4, r0
     7fe:	000f      	movs	r7, r1
     800:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     802:	2800      	cmp	r0, #0
     804:	d026      	beq.n	854 <usart_sync_write+0x60>
     806:	2900      	cmp	r1, #0
     808:	d026      	beq.n	858 <usart_sync_write+0x64>
     80a:	0010      	movs	r0, r2
     80c:	1e43      	subs	r3, r0, #1
     80e:	4198      	sbcs	r0, r3
     810:	22f1      	movs	r2, #241	; 0xf1
     812:	4912      	ldr	r1, [pc, #72]	; (85c <usart_sync_write+0x68>)
     814:	4b12      	ldr	r3, [pc, #72]	; (860 <usart_sync_write+0x6c>)
     816:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     818:	3408      	adds	r4, #8
     81a:	4d12      	ldr	r5, [pc, #72]	; (864 <usart_sync_write+0x70>)
     81c:	0020      	movs	r0, r4
     81e:	47a8      	blx	r5
     820:	2800      	cmp	r0, #0
     822:	d0fb      	beq.n	81c <usart_sync_write+0x28>
     824:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     826:	4b10      	ldr	r3, [pc, #64]	; (868 <usart_sync_write+0x74>)
     828:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     82a:	4d0e      	ldr	r5, [pc, #56]	; (864 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     82c:	5db9      	ldrb	r1, [r7, r6]
     82e:	0020      	movs	r0, r4
     830:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     832:	0020      	movs	r0, r4
     834:	47a8      	blx	r5
     836:	2800      	cmp	r0, #0
     838:	d0fb      	beq.n	832 <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     83a:	3601      	adds	r6, #1
     83c:	4546      	cmp	r6, r8
     83e:	d3f5      	bcc.n	82c <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     840:	4d0a      	ldr	r5, [pc, #40]	; (86c <usart_sync_write+0x78>)
     842:	0020      	movs	r0, r4
     844:	47a8      	blx	r5
     846:	2800      	cmp	r0, #0
     848:	d0fb      	beq.n	842 <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     84a:	0030      	movs	r0, r6
     84c:	bc0c      	pop	{r2, r3}
     84e:	4690      	mov	r8, r2
     850:	4699      	mov	r9, r3
     852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     854:	2000      	movs	r0, #0
     856:	e7db      	b.n	810 <usart_sync_write+0x1c>
     858:	2000      	movs	r0, #0
     85a:	e7d9      	b.n	810 <usart_sync_write+0x1c>
     85c:	00003410 	.word	0x00003410
     860:	00000ee9 	.word	0x00000ee9
     864:	00001111 	.word	0x00001111
     868:	00001101 	.word	0x00001101
     86c:	0000111b 	.word	0x0000111b

00000870 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     872:	46ce      	mov	lr, r9
     874:	4647      	mov	r7, r8
     876:	b580      	push	{r7, lr}
     878:	0004      	movs	r4, r0
     87a:	000f      	movs	r7, r1
     87c:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     87e:	2800      	cmp	r0, #0
     880:	d01d      	beq.n	8be <usart_sync_read+0x4e>
     882:	2900      	cmp	r1, #0
     884:	d01d      	beq.n	8c2 <usart_sync_read+0x52>
     886:	0010      	movs	r0, r2
     888:	1e43      	subs	r3, r0, #1
     88a:	4198      	sbcs	r0, r3
     88c:	2286      	movs	r2, #134	; 0x86
     88e:	0052      	lsls	r2, r2, #1
     890:	490d      	ldr	r1, [pc, #52]	; (8c8 <usart_sync_read+0x58>)
     892:	4b0e      	ldr	r3, [pc, #56]	; (8cc <usart_sync_read+0x5c>)
     894:	4798      	blx	r3
	uint32_t                      offset = 0;
     896:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     898:	3408      	adds	r4, #8
     89a:	4d0d      	ldr	r5, [pc, #52]	; (8d0 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     89c:	4b0d      	ldr	r3, [pc, #52]	; (8d4 <usart_sync_read+0x64>)
     89e:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     8a0:	0020      	movs	r0, r4
     8a2:	47a8      	blx	r5
     8a4:	2800      	cmp	r0, #0
     8a6:	d0fb      	beq.n	8a0 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     8a8:	0020      	movs	r0, r4
     8aa:	47c8      	blx	r9
     8ac:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     8ae:	3601      	adds	r6, #1
     8b0:	4546      	cmp	r6, r8
     8b2:	d3f5      	bcc.n	8a0 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     8b4:	0030      	movs	r0, r6
     8b6:	bc0c      	pop	{r2, r3}
     8b8:	4690      	mov	r8, r2
     8ba:	4699      	mov	r9, r3
     8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     8be:	2000      	movs	r0, #0
     8c0:	e7e4      	b.n	88c <usart_sync_read+0x1c>
     8c2:	2000      	movs	r0, #0
     8c4:	e7e2      	b.n	88c <usart_sync_read+0x1c>
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	00003410 	.word	0x00003410
     8cc:	00000ee9 	.word	0x00000ee9
     8d0:	00001125 	.word	0x00001125
     8d4:	00001109 	.word	0x00001109

000008d8 <usart_sync_init>:
{
     8d8:	b570      	push	{r4, r5, r6, lr}
     8da:	0005      	movs	r5, r0
     8dc:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     8de:	2800      	cmp	r0, #0
     8e0:	d013      	beq.n	90a <usart_sync_init+0x32>
     8e2:	0008      	movs	r0, r1
     8e4:	1e43      	subs	r3, r0, #1
     8e6:	4198      	sbcs	r0, r3
     8e8:	b2c0      	uxtb	r0, r0
     8ea:	2234      	movs	r2, #52	; 0x34
     8ec:	4908      	ldr	r1, [pc, #32]	; (910 <usart_sync_init+0x38>)
     8ee:	4b09      	ldr	r3, [pc, #36]	; (914 <usart_sync_init+0x3c>)
     8f0:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     8f2:	0028      	movs	r0, r5
     8f4:	3008      	adds	r0, #8
     8f6:	0021      	movs	r1, r4
     8f8:	4b07      	ldr	r3, [pc, #28]	; (918 <usart_sync_init+0x40>)
     8fa:	4798      	blx	r3
	if (init_status) {
     8fc:	2800      	cmp	r0, #0
     8fe:	d103      	bne.n	908 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     900:	4b06      	ldr	r3, [pc, #24]	; (91c <usart_sync_init+0x44>)
     902:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     904:	4b06      	ldr	r3, [pc, #24]	; (920 <usart_sync_init+0x48>)
     906:	602b      	str	r3, [r5, #0]
}
     908:	bd70      	pop	{r4, r5, r6, pc}
     90a:	2000      	movs	r0, #0
     90c:	e7ed      	b.n	8ea <usart_sync_init+0x12>
     90e:	46c0      	nop			; (mov r8, r8)
     910:	00003410 	.word	0x00003410
     914:	00000ee9 	.word	0x00000ee9
     918:	000010d5 	.word	0x000010d5
     91c:	00000871 	.word	0x00000871
     920:	000007f5 	.word	0x000007f5

00000924 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     924:	b5f0      	push	{r4, r5, r6, r7, lr}
     926:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     928:	4b0e      	ldr	r3, [pc, #56]	; (964 <_usb_d_find_ep+0x40>)
     92a:	785a      	ldrb	r2, [r3, #1]
     92c:	4290      	cmp	r0, r2
     92e:	d017      	beq.n	960 <_usb_d_find_ep+0x3c>
     930:	2300      	movs	r3, #0
     932:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     934:	4f0b      	ldr	r7, [pc, #44]	; (964 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     936:	260f      	movs	r6, #15
     938:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     93a:	003d      	movs	r5, r7
     93c:	e008      	b.n	950 <_usb_d_find_ep+0x2c>
     93e:	3001      	adds	r0, #1
     940:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     942:	2804      	cmp	r0, #4
     944:	d00a      	beq.n	95c <_usb_d_find_ep+0x38>
     946:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     948:	18ea      	adds	r2, r5, r3
     94a:	7852      	ldrb	r2, [r2, #1]
     94c:	42a2      	cmp	r2, r4
     94e:	d006      	beq.n	95e <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     950:	5dd9      	ldrb	r1, [r3, r7]
     952:	2900      	cmp	r1, #0
     954:	d1f3      	bne.n	93e <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     956:	4296      	cmp	r6, r2
     958:	d1f1      	bne.n	93e <_usb_d_find_ep+0x1a>
     95a:	e000      	b.n	95e <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     95c:	3805      	subs	r0, #5
}
     95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     960:	2000      	movs	r0, #0
     962:	e7fc      	b.n	95e <_usb_d_find_ep+0x3a>
     964:	20000088 	.word	0x20000088

00000968 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     968:	2000      	movs	r0, #0
     96a:	4770      	bx	lr

0000096c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     96c:	b570      	push	{r4, r5, r6, lr}
     96e:	0004      	movs	r4, r0
     970:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     972:	4b0a      	ldr	r3, [pc, #40]	; (99c <usb_d_cb_trans_more+0x30>)
     974:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     976:	0142      	lsls	r2, r0, #5
     978:	4b09      	ldr	r3, [pc, #36]	; (9a0 <usb_d_cb_trans_more+0x34>)
     97a:	189b      	adds	r3, r3, r2
     97c:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     97e:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     980:	2a03      	cmp	r2, #3
     982:	d001      	beq.n	988 <usb_d_cb_trans_more+0x1c>
}
     984:	0018      	movs	r0, r3
     986:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     988:	0140      	lsls	r0, r0, #5
     98a:	4b05      	ldr	r3, [pc, #20]	; (9a0 <usb_d_cb_trans_more+0x34>)
     98c:	1818      	adds	r0, r3, r0
     98e:	6983      	ldr	r3, [r0, #24]
     990:	0029      	movs	r1, r5
     992:	0020      	movs	r0, r4
     994:	4798      	blx	r3
     996:	0003      	movs	r3, r0
     998:	e7f4      	b.n	984 <usb_d_cb_trans_more+0x18>
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	00000925 	.word	0x00000925
     9a0:	20000088 	.word	0x20000088

000009a4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9a6:	b085      	sub	sp, #20
     9a8:	0005      	movs	r5, r0
     9aa:	000f      	movs	r7, r1
     9ac:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     9ae:	4b51      	ldr	r3, [pc, #324]	; (af4 <_usb_d_cb_trans_done+0x150>)
     9b0:	4798      	blx	r3
     9b2:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     9b4:	2f00      	cmp	r7, #0
     9b6:	d162      	bne.n	a7e <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     9b8:	4b4f      	ldr	r3, [pc, #316]	; (af8 <_usb_d_cb_trans_done+0x154>)
     9ba:	0142      	lsls	r2, r0, #5
     9bc:	1899      	adds	r1, r3, r2
     9be:	2000      	movs	r0, #0
     9c0:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     9c2:	5cd3      	ldrb	r3, [r2, r3]
     9c4:	2b00      	cmp	r3, #0
     9c6:	d00e      	beq.n	9e6 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     9c8:	0162      	lsls	r2, r4, #5
     9ca:	4b4b      	ldr	r3, [pc, #300]	; (af8 <_usb_d_cb_trans_done+0x154>)
     9cc:	189b      	adds	r3, r3, r2
     9ce:	2201      	movs	r2, #1
     9d0:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     9d2:	0164      	lsls	r4, r4, #5
     9d4:	4b48      	ldr	r3, [pc, #288]	; (af8 <_usb_d_cb_trans_done+0x154>)
     9d6:	191c      	adds	r4, r3, r4
     9d8:	78e1      	ldrb	r1, [r4, #3]
     9da:	69e3      	ldr	r3, [r4, #28]
     9dc:	0032      	movs	r2, r6
     9de:	0028      	movs	r0, r5
     9e0:	4798      	blx	r3
}
     9e2:	b005      	add	sp, #20
     9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     9e6:	788b      	ldrb	r3, [r1, #2]
     9e8:	2b03      	cmp	r3, #3
     9ea:	d00c      	beq.n	a06 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     9ec:	4b42      	ldr	r3, [pc, #264]	; (af8 <_usb_d_cb_trans_done+0x154>)
     9ee:	0162      	lsls	r2, r4, #5
     9f0:	320c      	adds	r2, #12
     9f2:	189a      	adds	r2, r3, r2
     9f4:	0164      	lsls	r4, r4, #5
     9f6:	191c      	adds	r4, r3, r4
     9f8:	7860      	ldrb	r0, [r4, #1]
     9fa:	2100      	movs	r1, #0
     9fc:	69e3      	ldr	r3, [r4, #28]
     9fe:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     a00:	2302      	movs	r3, #2
     a02:	70a3      	strb	r3, [r4, #2]
     a04:	e7ed      	b.n	9e2 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     a06:	4a3c      	ldr	r2, [pc, #240]	; (af8 <_usb_d_cb_trans_done+0x154>)
     a08:	000b      	movs	r3, r1
     a0a:	250c      	movs	r5, #12
     a0c:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     a0e:	0161      	lsls	r1, r4, #5
     a10:	310c      	adds	r1, #12
     a12:	1852      	adds	r2, r2, r1
     a14:	7858      	ldrb	r0, [r3, #1]
     a16:	69db      	ldr	r3, [r3, #28]
     a18:	2101      	movs	r1, #1
     a1a:	4798      	blx	r3
		if (err) {
     a1c:	2800      	cmp	r0, #0
     a1e:	d017      	beq.n	a50 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     a20:	0162      	lsls	r2, r4, #5
     a22:	4b35      	ldr	r3, [pc, #212]	; (af8 <_usb_d_cb_trans_done+0x154>)
     a24:	189b      	adds	r3, r3, r2
     a26:	2205      	movs	r2, #5
     a28:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     a2a:	3a03      	subs	r2, #3
     a2c:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     a2e:	2d00      	cmp	r5, #0
     a30:	db09      	blt.n	a46 <_usb_d_cb_trans_done+0xa2>
     a32:	0164      	lsls	r4, r4, #5
     a34:	4b30      	ldr	r3, [pc, #192]	; (af8 <_usb_d_cb_trans_done+0x154>)
     a36:	191c      	adds	r4, r3, r4
     a38:	7860      	ldrb	r0, [r4, #1]
     a3a:	2380      	movs	r3, #128	; 0x80
     a3c:	4318      	orrs	r0, r3
     a3e:	2101      	movs	r1, #1
     a40:	4b2e      	ldr	r3, [pc, #184]	; (afc <_usb_d_cb_trans_done+0x158>)
     a42:	4798      	blx	r3
     a44:	e7cd      	b.n	9e2 <_usb_d_cb_trans_done+0x3e>
     a46:	0164      	lsls	r4, r4, #5
     a48:	4b2b      	ldr	r3, [pc, #172]	; (af8 <_usb_d_cb_trans_done+0x154>)
     a4a:	191c      	adds	r4, r3, r4
     a4c:	7860      	ldrb	r0, [r4, #1]
     a4e:	e7f6      	b.n	a3e <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     a50:	0164      	lsls	r4, r4, #5
     a52:	4b29      	ldr	r3, [pc, #164]	; (af8 <_usb_d_cb_trans_done+0x154>)
     a54:	191c      	adds	r4, r3, r4
     a56:	2304      	movs	r3, #4
     a58:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     a5a:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     a5c:	2200      	movs	r2, #0
     a5e:	9201      	str	r2, [sp, #4]
     a60:	9202      	str	r2, [sp, #8]
     a62:	2d00      	cmp	r5, #0
     a64:	db08      	blt.n	a78 <_usb_d_cb_trans_done+0xd4>
     a66:	3280      	adds	r2, #128	; 0x80
     a68:	4313      	orrs	r3, r2
     a6a:	a801      	add	r0, sp, #4
     a6c:	7203      	strb	r3, [r0, #8]
     a6e:	2301      	movs	r3, #1
     a70:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     a72:	4b23      	ldr	r3, [pc, #140]	; (b00 <_usb_d_cb_trans_done+0x15c>)
     a74:	4798      	blx	r3
     a76:	e7b4      	b.n	9e2 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     a78:	220f      	movs	r2, #15
     a7a:	4013      	ands	r3, r2
     a7c:	e7f5      	b.n	a6a <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     a7e:	2f01      	cmp	r7, #1
     a80:	d00a      	beq.n	a98 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     a82:	2f02      	cmp	r7, #2
     a84:	d01d      	beq.n	ac2 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     a86:	2f03      	cmp	r7, #3
     a88:	d02c      	beq.n	ae4 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     a8a:	0142      	lsls	r2, r0, #5
     a8c:	4b1a      	ldr	r3, [pc, #104]	; (af8 <_usb_d_cb_trans_done+0x154>)
     a8e:	189b      	adds	r3, r3, r2
     a90:	2206      	movs	r2, #6
     a92:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     a94:	70da      	strb	r2, [r3, #3]
     a96:	e79c      	b.n	9d2 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     a98:	4b17      	ldr	r3, [pc, #92]	; (af8 <_usb_d_cb_trans_done+0x154>)
     a9a:	0142      	lsls	r2, r0, #5
     a9c:	1899      	adds	r1, r3, r2
     a9e:	2002      	movs	r0, #2
     aa0:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     aa2:	5cd3      	ldrb	r3, [r2, r3]
     aa4:	2b00      	cmp	r3, #0
     aa6:	d005      	beq.n	ab4 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     aa8:	0162      	lsls	r2, r4, #5
     aaa:	4b13      	ldr	r3, [pc, #76]	; (af8 <_usb_d_cb_trans_done+0x154>)
     aac:	189b      	adds	r3, r3, r2
     aae:	2205      	movs	r2, #5
     ab0:	709a      	strb	r2, [r3, #2]
     ab2:	e78e      	b.n	9d2 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     ab4:	2202      	movs	r2, #2
     ab6:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     ab8:	2100      	movs	r1, #0
     aba:	0028      	movs	r0, r5
     abc:	4b0f      	ldr	r3, [pc, #60]	; (afc <_usb_d_cb_trans_done+0x158>)
     abe:	4798      	blx	r3
     ac0:	e787      	b.n	9d2 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     ac2:	4b0d      	ldr	r3, [pc, #52]	; (af8 <_usb_d_cb_trans_done+0x154>)
     ac4:	0142      	lsls	r2, r0, #5
     ac6:	1899      	adds	r1, r3, r2
     ac8:	2004      	movs	r0, #4
     aca:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     acc:	5cd3      	ldrb	r3, [r2, r3]
     ace:	2b00      	cmp	r3, #0
     ad0:	d005      	beq.n	ade <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     ad2:	0162      	lsls	r2, r4, #5
     ad4:	4b08      	ldr	r3, [pc, #32]	; (af8 <_usb_d_cb_trans_done+0x154>)
     ad6:	189b      	adds	r3, r3, r2
     ad8:	2201      	movs	r2, #1
     ada:	709a      	strb	r2, [r3, #2]
     adc:	e779      	b.n	9d2 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     ade:	2302      	movs	r3, #2
     ae0:	708b      	strb	r3, [r1, #2]
			return;
     ae2:	e77e      	b.n	9e2 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     ae4:	0142      	lsls	r2, r0, #5
     ae6:	4b04      	ldr	r3, [pc, #16]	; (af8 <_usb_d_cb_trans_done+0x154>)
     ae8:	189b      	adds	r3, r3, r2
     aea:	2200      	movs	r2, #0
     aec:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     aee:	3205      	adds	r2, #5
     af0:	70da      	strb	r2, [r3, #3]
     af2:	e76e      	b.n	9d2 <_usb_d_cb_trans_done+0x2e>
     af4:	00000925 	.word	0x00000925
     af8:	20000088 	.word	0x20000088
     afc:	000021b5 	.word	0x000021b5
     b00:	00002389 	.word	0x00002389

00000b04 <usb_d_cb_trans_setup>:
{
     b04:	b5f0      	push	{r4, r5, r6, r7, lr}
     b06:	46c6      	mov	lr, r8
     b08:	b500      	push	{lr}
     b0a:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     b0c:	4b1d      	ldr	r3, [pc, #116]	; (b84 <usb_d_cb_trans_setup+0x80>)
     b0e:	4798      	blx	r3
     b10:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     b12:	0145      	lsls	r5, r0, #5
     b14:	350c      	adds	r5, #12
     b16:	4b1c      	ldr	r3, [pc, #112]	; (b88 <usb_d_cb_trans_setup+0x84>)
     b18:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     b1a:	0029      	movs	r1, r5
     b1c:	0020      	movs	r0, r4
     b1e:	4b1b      	ldr	r3, [pc, #108]	; (b8c <usb_d_cb_trans_setup+0x88>)
     b20:	4798      	blx	r3
	if (n != 8) {
     b22:	b2c0      	uxtb	r0, r0
     b24:	2808      	cmp	r0, #8
     b26:	d00a      	beq.n	b3e <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b28:	2101      	movs	r1, #1
     b2a:	0020      	movs	r0, r4
     b2c:	4d18      	ldr	r5, [pc, #96]	; (b90 <usb_d_cb_trans_setup+0x8c>)
     b2e:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     b30:	2080      	movs	r0, #128	; 0x80
     b32:	4320      	orrs	r0, r4
     b34:	2101      	movs	r1, #1
     b36:	47a8      	blx	r5
}
     b38:	bc04      	pop	{r2}
     b3a:	4690      	mov	r8, r2
     b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     b3e:	2100      	movs	r1, #0
     b40:	0020      	movs	r0, r4
     b42:	4b13      	ldr	r3, [pc, #76]	; (b90 <usb_d_cb_trans_setup+0x8c>)
     b44:	4698      	mov	r8, r3
     b46:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     b48:	2780      	movs	r7, #128	; 0x80
     b4a:	4327      	orrs	r7, r4
     b4c:	2100      	movs	r1, #0
     b4e:	0038      	movs	r0, r7
     b50:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     b52:	0172      	lsls	r2, r6, #5
     b54:	4b0c      	ldr	r3, [pc, #48]	; (b88 <usb_d_cb_trans_setup+0x84>)
     b56:	189b      	adds	r3, r3, r2
     b58:	2201      	movs	r2, #1
     b5a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     b5c:	695b      	ldr	r3, [r3, #20]
     b5e:	0029      	movs	r1, r5
     b60:	0020      	movs	r0, r4
     b62:	4798      	blx	r3
     b64:	2800      	cmp	r0, #0
     b66:	d1e7      	bne.n	b38 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     b68:	0176      	lsls	r6, r6, #5
     b6a:	4b07      	ldr	r3, [pc, #28]	; (b88 <usb_d_cb_trans_setup+0x84>)
     b6c:	199e      	adds	r6, r3, r6
     b6e:	2305      	movs	r3, #5
     b70:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b72:	2101      	movs	r1, #1
     b74:	0020      	movs	r0, r4
     b76:	4c06      	ldr	r4, [pc, #24]	; (b90 <usb_d_cb_trans_setup+0x8c>)
     b78:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     b7a:	2101      	movs	r1, #1
     b7c:	0038      	movs	r0, r7
     b7e:	47a0      	blx	r4
     b80:	e7da      	b.n	b38 <usb_d_cb_trans_setup+0x34>
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	00000925 	.word	0x00000925
     b88:	20000088 	.word	0x20000088
     b8c:	00002319 	.word	0x00002319
     b90:	000021b5 	.word	0x000021b5

00000b94 <usb_d_init>:

int32_t usb_d_init(void)
{
     b94:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     b96:	4b10      	ldr	r3, [pc, #64]	; (bd8 <usb_d_init+0x44>)
     b98:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     b9a:	2800      	cmp	r0, #0
     b9c:	db1b      	blt.n	bd6 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     b9e:	4c0f      	ldr	r4, [pc, #60]	; (bdc <usb_d_init+0x48>)
     ba0:	2280      	movs	r2, #128	; 0x80
     ba2:	2100      	movs	r1, #0
     ba4:	0020      	movs	r0, r4
     ba6:	4b0e      	ldr	r3, [pc, #56]	; (be0 <usb_d_init+0x4c>)
     ba8:	4798      	blx	r3
     baa:	0023      	movs	r3, r4
     bac:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     bae:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     bb0:	4a0c      	ldr	r2, [pc, #48]	; (be4 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     bb2:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     bb4:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     bb6:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     bb8:	61da      	str	r2, [r3, #28]
     bba:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     bbc:	42a3      	cmp	r3, r4
     bbe:	d1f8      	bne.n	bb2 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     bc0:	4909      	ldr	r1, [pc, #36]	; (be8 <usb_d_init+0x54>)
     bc2:	2000      	movs	r0, #0
     bc4:	4c09      	ldr	r4, [pc, #36]	; (bec <usb_d_init+0x58>)
     bc6:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     bc8:	4909      	ldr	r1, [pc, #36]	; (bf0 <usb_d_init+0x5c>)
     bca:	2001      	movs	r0, #1
     bcc:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     bce:	4909      	ldr	r1, [pc, #36]	; (bf4 <usb_d_init+0x60>)
     bd0:	2002      	movs	r0, #2
     bd2:	47a0      	blx	r4
	return ERR_NONE;
     bd4:	2000      	movs	r0, #0
}
     bd6:	bd10      	pop	{r4, pc}
     bd8:	00001b95 	.word	0x00001b95
     bdc:	20000088 	.word	0x20000088
     be0:	000033df 	.word	0x000033df
     be4:	00000969 	.word	0x00000969
     be8:	00000b05 	.word	0x00000b05
     bec:	000025c1 	.word	0x000025c1
     bf0:	0000096d 	.word	0x0000096d
     bf4:	000009a5 	.word	0x000009a5

00000bf8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     bf8:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     bfa:	4b01      	ldr	r3, [pc, #4]	; (c00 <usb_d_register_callback+0x8>)
     bfc:	4798      	blx	r3
}
     bfe:	bd10      	pop	{r4, pc}
     c00:	0000259d 	.word	0x0000259d

00000c04 <usb_d_enable>:

int32_t usb_d_enable(void)
{
     c04:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     c06:	4b01      	ldr	r3, [pc, #4]	; (c0c <usb_d_enable+0x8>)
     c08:	4798      	blx	r3
}
     c0a:	bd10      	pop	{r4, pc}
     c0c:	00001c71 	.word	0x00001c71

00000c10 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     c10:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     c12:	4b01      	ldr	r3, [pc, #4]	; (c18 <usb_d_attach+0x8>)
     c14:	4798      	blx	r3
}
     c16:	bd10      	pop	{r4, pc}
     c18:	00001cc1 	.word	0x00001cc1

00000c1c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     c1c:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     c1e:	4b01      	ldr	r3, [pc, #4]	; (c24 <usb_d_set_address+0x8>)
     c20:	4798      	blx	r3
}
     c22:	bd10      	pop	{r4, pc}
     c24:	00001cd1 	.word	0x00001cd1

00000c28 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c2a:	0005      	movs	r5, r0
     c2c:	000e      	movs	r6, r1
     c2e:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     c30:	4b0f      	ldr	r3, [pc, #60]	; (c70 <usb_d_ep_init+0x48>)
     c32:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     c34:	2800      	cmp	r0, #0
     c36:	da14      	bge.n	c62 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     c38:	20ff      	movs	r0, #255	; 0xff
     c3a:	4b0d      	ldr	r3, [pc, #52]	; (c70 <usb_d_ep_init+0x48>)
     c3c:	4798      	blx	r3
     c3e:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     c40:	db12      	blt.n	c68 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     c42:	003a      	movs	r2, r7
     c44:	0031      	movs	r1, r6
     c46:	0028      	movs	r0, r5
     c48:	4b0a      	ldr	r3, [pc, #40]	; (c74 <usb_d_ep_init+0x4c>)
     c4a:	4798      	blx	r3
	if (rc < 0) {
     c4c:	2800      	cmp	r0, #0
     c4e:	db07      	blt.n	c60 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     c50:	4a09      	ldr	r2, [pc, #36]	; (c78 <usb_d_ep_init+0x50>)
     c52:	0164      	lsls	r4, r4, #5
     c54:	1913      	adds	r3, r2, r4
     c56:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     c58:	2303      	movs	r3, #3
     c5a:	401e      	ands	r6, r3
     c5c:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     c5e:	2000      	movs	r0, #0
}
     c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     c62:	2014      	movs	r0, #20
     c64:	4240      	negs	r0, r0
     c66:	e7fb      	b.n	c60 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     c68:	2015      	movs	r0, #21
     c6a:	4240      	negs	r0, r0
     c6c:	e7f8      	b.n	c60 <usb_d_ep_init+0x38>
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	00000925 	.word	0x00000925
     c74:	00001ce1 	.word	0x00001ce1
     c78:	20000088 	.word	0x20000088

00000c7c <usb_d_ep0_init>:
{
     c7c:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     c7e:	b282      	uxth	r2, r0
     c80:	2100      	movs	r1, #0
     c82:	2000      	movs	r0, #0
     c84:	4b01      	ldr	r3, [pc, #4]	; (c8c <usb_d_ep0_init+0x10>)
     c86:	4798      	blx	r3
}
     c88:	bd10      	pop	{r4, pc}
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	00000c29 	.word	0x00000c29

00000c90 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     c90:	b570      	push	{r4, r5, r6, lr}
     c92:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     c94:	4b06      	ldr	r3, [pc, #24]	; (cb0 <usb_d_ep_deinit+0x20>)
     c96:	4798      	blx	r3
     c98:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     c9a:	db07      	blt.n	cac <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     c9c:	0028      	movs	r0, r5
     c9e:	4b05      	ldr	r3, [pc, #20]	; (cb4 <usb_d_ep_deinit+0x24>)
     ca0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     ca2:	0164      	lsls	r4, r4, #5
     ca4:	4b04      	ldr	r3, [pc, #16]	; (cb8 <usb_d_ep_deinit+0x28>)
     ca6:	191c      	adds	r4, r3, r4
     ca8:	23ff      	movs	r3, #255	; 0xff
     caa:	7063      	strb	r3, [r4, #1]
}
     cac:	bd70      	pop	{r4, r5, r6, pc}
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	00000925 	.word	0x00000925
     cb4:	00001e0d 	.word	0x00001e0d
     cb8:	20000088 	.word	0x20000088

00000cbc <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     cbc:	b570      	push	{r4, r5, r6, lr}
     cbe:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     cc0:	4b0e      	ldr	r3, [pc, #56]	; (cfc <usb_d_ep_enable+0x40>)
     cc2:	4798      	blx	r3
     cc4:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     cc6:	db15      	blt.n	cf4 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     cc8:	0143      	lsls	r3, r0, #5
     cca:	4a0d      	ldr	r2, [pc, #52]	; (d00 <usb_d_ep_enable+0x44>)
     ccc:	5c9b      	ldrb	r3, [r3, r2]
     cce:	425a      	negs	r2, r3
     cd0:	4153      	adcs	r3, r2
     cd2:	3301      	adds	r3, #1
     cd4:	0141      	lsls	r1, r0, #5
     cd6:	4a0a      	ldr	r2, [pc, #40]	; (d00 <usb_d_ep_enable+0x44>)
     cd8:	1852      	adds	r2, r2, r1
     cda:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     cdc:	0020      	movs	r0, r4
     cde:	4b09      	ldr	r3, [pc, #36]	; (d04 <usb_d_ep_enable+0x48>)
     ce0:	4798      	blx	r3
	if (rc < 0) {
     ce2:	2800      	cmp	r0, #0
     ce4:	db00      	blt.n	ce8 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     ce6:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     ce8:	016d      	lsls	r5, r5, #5
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <usb_d_ep_enable+0x44>)
     cec:	195d      	adds	r5, r3, r5
     cee:	2300      	movs	r3, #0
     cf0:	70ab      	strb	r3, [r5, #2]
     cf2:	e7f8      	b.n	ce6 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     cf4:	2012      	movs	r0, #18
     cf6:	4240      	negs	r0, r0
     cf8:	e7f5      	b.n	ce6 <usb_d_ep_enable+0x2a>
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	00000925 	.word	0x00000925
     d00:	20000088 	.word	0x20000088
     d04:	00001ed9 	.word	0x00001ed9

00000d08 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     d08:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0a:	46d6      	mov	lr, sl
     d0c:	464f      	mov	r7, r9
     d0e:	4646      	mov	r6, r8
     d10:	b5c0      	push	{r6, r7, lr}
     d12:	b086      	sub	sp, #24
     d14:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     d16:	7a07      	ldrb	r7, [r0, #8]
     d18:	0038      	movs	r0, r7
     d1a:	4b40      	ldr	r3, [pc, #256]	; (e1c <usb_d_ep_transfer+0x114>)
     d1c:	4798      	blx	r3
     d1e:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     d20:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
     d22:	6863      	ldr	r3, [r4, #4]
     d24:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     d26:	2800      	cmp	r0, #0
     d28:	da00      	bge.n	d2c <usb_d_ep_transfer+0x24>
     d2a:	e071      	b.n	e10 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     d2c:	a804      	add	r0, sp, #16
     d2e:	4b3c      	ldr	r3, [pc, #240]	; (e20 <usb_d_ep_transfer+0x118>)
     d30:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     d32:	016a      	lsls	r2, r5, #5
     d34:	4b3b      	ldr	r3, [pc, #236]	; (e24 <usb_d_ep_transfer+0x11c>)
     d36:	189b      	adds	r3, r3, r2
     d38:	789a      	ldrb	r2, [r3, #2]
     d3a:	2317      	movs	r3, #23
     d3c:	446b      	add	r3, sp
     d3e:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     d40:	781b      	ldrb	r3, [r3, #0]
     d42:	2b01      	cmp	r3, #1
     d44:	d010      	beq.n	d68 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     d46:	a804      	add	r0, sp, #16
     d48:	4b37      	ldr	r3, [pc, #220]	; (e28 <usb_d_ep_transfer+0x120>)
     d4a:	4798      	blx	r3
		switch (state) {
     d4c:	2317      	movs	r3, #23
     d4e:	446b      	add	r3, sp
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	2b05      	cmp	r3, #5
     d56:	d05e      	beq.n	e16 <usb_d_ep_transfer+0x10e>
     d58:	2b06      	cmp	r3, #6
     d5a:	d023      	beq.n	da4 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     d5c:	2001      	movs	r0, #1
		switch (state) {
     d5e:	2b00      	cmp	r3, #0
     d60:	d13c      	bne.n	ddc <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
     d62:	2013      	movs	r0, #19
     d64:	4240      	negs	r0, r0
     d66:	e039      	b.n	ddc <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     d68:	4b2e      	ldr	r3, [pc, #184]	; (e24 <usb_d_ep_transfer+0x11c>)
     d6a:	4699      	mov	r9, r3
     d6c:	016b      	lsls	r3, r5, #5
     d6e:	469a      	mov	sl, r3
     d70:	464b      	mov	r3, r9
     d72:	4453      	add	r3, sl
     d74:	2203      	movs	r2, #3
     d76:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     d78:	a804      	add	r0, sp, #16
     d7a:	4b2b      	ldr	r3, [pc, #172]	; (e28 <usb_d_ep_transfer+0x120>)
     d7c:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d7e:	464b      	mov	r3, r9
     d80:	4652      	mov	r2, sl
     d82:	5cd3      	ldrb	r3, [r2, r3]
     d84:	2b00      	cmp	r3, #0
     d86:	d010      	beq.n	daa <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d88:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     d8a:	1e72      	subs	r2, r6, #1
     d8c:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d8e:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
     d90:	6822      	ldr	r2, [r4, #0]
     d92:	9201      	str	r2, [sp, #4]
     d94:	4642      	mov	r2, r8
     d96:	9202      	str	r2, [sp, #8]
     d98:	b27f      	sxtb	r7, r7
     d9a:	2f00      	cmp	r7, #0
     d9c:	db17      	blt.n	dce <usb_d_ep_transfer+0xc6>
     d9e:	220f      	movs	r2, #15
     da0:	4013      	ands	r3, r2
     da2:	e016      	b.n	dd2 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
     da4:	2010      	movs	r0, #16
     da6:	4240      	negs	r0, r0
     da8:	e018      	b.n	ddc <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     daa:	016b      	lsls	r3, r5, #5
     dac:	4a1d      	ldr	r2, [pc, #116]	; (e24 <usb_d_ep_transfer+0x11c>)
     dae:	18d2      	adds	r2, r2, r3
     db0:	7cd1      	ldrb	r1, [r2, #19]
     db2:	0209      	lsls	r1, r1, #8
     db4:	7c93      	ldrb	r3, [r2, #18]
     db6:	185b      	adds	r3, r3, r1
     db8:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     dba:	2b00      	cmp	r3, #0
     dbc:	d114      	bne.n	de8 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     dbe:	2304      	movs	r3, #4
     dc0:	7093      	strb	r3, [r2, #2]
			len                 = 0;
     dc2:	2200      	movs	r2, #0
			zlp                 = true;
     dc4:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     dc6:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     dc8:	6821      	ldr	r1, [r4, #0]
     dca:	9101      	str	r1, [sp, #4]
     dcc:	9202      	str	r2, [sp, #8]
     dce:	2280      	movs	r2, #128	; 0x80
     dd0:	4313      	orrs	r3, r2
     dd2:	a801      	add	r0, sp, #4
     dd4:	7203      	strb	r3, [r0, #8]
     dd6:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     dd8:	4b14      	ldr	r3, [pc, #80]	; (e2c <usb_d_ep_transfer+0x124>)
     dda:	4798      	blx	r3
	return rc;
}
     ddc:	b006      	add	sp, #24
     dde:	bc1c      	pop	{r2, r3, r4}
     de0:	4690      	mov	r8, r2
     de2:	4699      	mov	r9, r3
     de4:	46a2      	mov	sl, r4
     de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     de8:	4642      	mov	r2, r8
     dea:	429a      	cmp	r2, r3
     dec:	d900      	bls.n	df0 <usb_d_ep_transfer+0xe8>
     dee:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     df0:	016d      	lsls	r5, r5, #5
     df2:	490c      	ldr	r1, [pc, #48]	; (e24 <usb_d_ep_transfer+0x11c>)
     df4:	194d      	adds	r5, r1, r5
			if (dir) {
     df6:	7b29      	ldrb	r1, [r5, #12]
     df8:	297f      	cmp	r1, #127	; 0x7f
     dfa:	d805      	bhi.n	e08 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     dfc:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     dfe:	6821      	ldr	r1, [r4, #0]
     e00:	9101      	str	r1, [sp, #4]
     e02:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     e04:	2600      	movs	r6, #0
     e06:	e7ca      	b.n	d9e <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
     e08:	429a      	cmp	r2, r3
     e0a:	41b6      	sbcs	r6, r6
     e0c:	4276      	negs	r6, r6
     e0e:	e7da      	b.n	dc6 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
     e10:	2012      	movs	r0, #18
     e12:	4240      	negs	r0, r0
     e14:	e7e2      	b.n	ddc <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
     e16:	2002      	movs	r0, #2
     e18:	e7e0      	b.n	ddc <usb_d_ep_transfer+0xd4>
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	00000925 	.word	0x00000925
     e20:	00000545 	.word	0x00000545
     e24:	20000088 	.word	0x20000088
     e28:	00000553 	.word	0x00000553
     e2c:	00002389 	.word	0x00002389

00000e30 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     e30:	b570      	push	{r4, r5, r6, lr}
     e32:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     e34:	2900      	cmp	r1, #0
     e36:	d005      	beq.n	e44 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     e38:	2901      	cmp	r1, #1
     e3a:	d021      	beq.n	e80 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     e3c:	2102      	movs	r1, #2
     e3e:	4b13      	ldr	r3, [pc, #76]	; (e8c <usb_d_ep_halt+0x5c>)
     e40:	4798      	blx	r3
	}
}
     e42:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     e44:	4b12      	ldr	r3, [pc, #72]	; (e90 <usb_d_ep_halt+0x60>)
     e46:	4798      	blx	r3
     e48:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
     e4a:	db1c      	blt.n	e86 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     e4c:	2102      	movs	r1, #2
     e4e:	0020      	movs	r0, r4
     e50:	4b0e      	ldr	r3, [pc, #56]	; (e8c <usb_d_ep_halt+0x5c>)
     e52:	4798      	blx	r3
     e54:	2800      	cmp	r0, #0
     e56:	d0f4      	beq.n	e42 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     e58:	2100      	movs	r1, #0
     e5a:	0020      	movs	r0, r4
     e5c:	4b0b      	ldr	r3, [pc, #44]	; (e8c <usb_d_ep_halt+0x5c>)
     e5e:	4798      	blx	r3
		if (rc < 0) {
     e60:	2800      	cmp	r0, #0
     e62:	dbee      	blt.n	e42 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     e64:	016d      	lsls	r5, r5, #5
     e66:	4b0b      	ldr	r3, [pc, #44]	; (e94 <usb_d_ep_halt+0x64>)
     e68:	195d      	adds	r5, r3, r5
     e6a:	2301      	movs	r3, #1
     e6c:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     e6e:	3302      	adds	r3, #2
     e70:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     e72:	69eb      	ldr	r3, [r5, #28]
     e74:	2200      	movs	r2, #0
     e76:	2103      	movs	r1, #3
     e78:	0020      	movs	r0, r4
     e7a:	4798      	blx	r3
	return ERR_NONE;
     e7c:	2000      	movs	r0, #0
     e7e:	e7e0      	b.n	e42 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     e80:	4b02      	ldr	r3, [pc, #8]	; (e8c <usb_d_ep_halt+0x5c>)
     e82:	4798      	blx	r3
     e84:	e7dd      	b.n	e42 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
     e86:	2012      	movs	r0, #18
     e88:	4240      	negs	r0, r0
     e8a:	e7da      	b.n	e42 <usb_d_ep_halt+0x12>
     e8c:	000021b5 	.word	0x000021b5
     e90:	00000925 	.word	0x00000925
     e94:	20000088 	.word	0x20000088

00000e98 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     e98:	b570      	push	{r4, r5, r6, lr}
     e9a:	000d      	movs	r5, r1
     e9c:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     e9e:	4b0f      	ldr	r3, [pc, #60]	; (edc <usb_d_ep_register_callback+0x44>)
     ea0:	4798      	blx	r3
     ea2:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     ea4:	1e22      	subs	r2, r4, #0
     ea6:	d008      	beq.n	eba <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
     ea8:	2b00      	cmp	r3, #0
     eaa:	db05      	blt.n	eb8 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     eac:	2d01      	cmp	r5, #1
     eae:	d00b      	beq.n	ec8 <usb_d_ep_register_callback+0x30>
     eb0:	2d00      	cmp	r5, #0
     eb2:	d004      	beq.n	ebe <usb_d_ep_register_callback+0x26>
     eb4:	2d02      	cmp	r5, #2
     eb6:	d00c      	beq.n	ed2 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     eb8:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     eba:	4a09      	ldr	r2, [pc, #36]	; (ee0 <usb_d_ep_register_callback+0x48>)
     ebc:	e7f4      	b.n	ea8 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     ebe:	0140      	lsls	r0, r0, #5
     ec0:	4b08      	ldr	r3, [pc, #32]	; (ee4 <usb_d_ep_register_callback+0x4c>)
     ec2:	1818      	adds	r0, r3, r0
     ec4:	6142      	str	r2, [r0, #20]
		break;
     ec6:	e7f7      	b.n	eb8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     ec8:	0140      	lsls	r0, r0, #5
     eca:	4b06      	ldr	r3, [pc, #24]	; (ee4 <usb_d_ep_register_callback+0x4c>)
     ecc:	1818      	adds	r0, r3, r0
     ece:	6182      	str	r2, [r0, #24]
		break;
     ed0:	e7f2      	b.n	eb8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     ed2:	0140      	lsls	r0, r0, #5
     ed4:	4b03      	ldr	r3, [pc, #12]	; (ee4 <usb_d_ep_register_callback+0x4c>)
     ed6:	1818      	adds	r0, r3, r0
     ed8:	61c2      	str	r2, [r0, #28]
		break;
     eda:	e7ed      	b.n	eb8 <usb_d_ep_register_callback+0x20>
     edc:	00000925 	.word	0x00000925
     ee0:	00000969 	.word	0x00000969
     ee4:	20000088 	.word	0x20000088

00000ee8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ee8:	2800      	cmp	r0, #0
     eea:	d100      	bne.n	eee <assert+0x6>
		__asm("BKPT #0");
     eec:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     eee:	4770      	bx	lr

00000ef0 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     ef0:	6803      	ldr	r3, [r0, #0]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d00a      	beq.n	f0c <is_list_element+0x1c>
		if (it == element) {
     ef6:	428b      	cmp	r3, r1
     ef8:	d00a      	beq.n	f10 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     efa:	681b      	ldr	r3, [r3, #0]
     efc:	2b00      	cmp	r3, #0
     efe:	d003      	beq.n	f08 <is_list_element+0x18>
		if (it == element) {
     f00:	4299      	cmp	r1, r3
     f02:	d1fa      	bne.n	efa <is_list_element+0xa>
			return true;
     f04:	2001      	movs	r0, #1
     f06:	e000      	b.n	f0a <is_list_element+0x1a>
		}
	}

	return false;
     f08:	2000      	movs	r0, #0
}
     f0a:	4770      	bx	lr
	return false;
     f0c:	2000      	movs	r0, #0
     f0e:	e7fc      	b.n	f0a <is_list_element+0x1a>
			return true;
     f10:	2001      	movs	r0, #1
     f12:	e7fa      	b.n	f0a <is_list_element+0x1a>

00000f14 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     f14:	b570      	push	{r4, r5, r6, lr}
     f16:	0005      	movs	r5, r0
     f18:	000e      	movs	r6, r1
	struct list_element *it = list->head;
     f1a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     f1c:	4b0a      	ldr	r3, [pc, #40]	; (f48 <list_insert_at_end+0x34>)
     f1e:	4798      	blx	r3
     f20:	2301      	movs	r3, #1
     f22:	4058      	eors	r0, r3
     f24:	b2c0      	uxtb	r0, r0
     f26:	224f      	movs	r2, #79	; 0x4f
     f28:	4908      	ldr	r1, [pc, #32]	; (f4c <list_insert_at_end+0x38>)
     f2a:	4b09      	ldr	r3, [pc, #36]	; (f50 <list_insert_at_end+0x3c>)
     f2c:	4798      	blx	r3

	if (!list->head) {
     f2e:	682b      	ldr	r3, [r5, #0]
     f30:	2b00      	cmp	r3, #0
     f32:	d103      	bne.n	f3c <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
     f34:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     f36:	6033      	str	r3, [r6, #0]
		return;
     f38:	e005      	b.n	f46 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
     f3a:	001c      	movs	r4, r3
	while (it->next) {
     f3c:	6823      	ldr	r3, [r4, #0]
     f3e:	2b00      	cmp	r3, #0
     f40:	d1fb      	bne.n	f3a <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
     f42:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     f44:	6033      	str	r3, [r6, #0]
}
     f46:	bd70      	pop	{r4, r5, r6, pc}
     f48:	00000ef1 	.word	0x00000ef1
     f4c:	0000342c 	.word	0x0000342c
     f50:	00000ee9 	.word	0x00000ee9

00000f54 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f54:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     f56:	4b06      	ldr	r3, [pc, #24]	; (f70 <_init_chip+0x1c>)
     f58:	685a      	ldr	r2, [r3, #4]
     f5a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     f5c:	4b05      	ldr	r3, [pc, #20]	; (f74 <_init_chip+0x20>)
     f5e:	4798      	blx	r3
	_sysctrl_init_sources();
     f60:	4b05      	ldr	r3, [pc, #20]	; (f78 <_init_chip+0x24>)
     f62:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     f64:	4b05      	ldr	r3, [pc, #20]	; (f7c <_init_chip+0x28>)
     f66:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     f68:	20ff      	movs	r0, #255	; 0xff
     f6a:	4b05      	ldr	r3, [pc, #20]	; (f80 <_init_chip+0x2c>)
     f6c:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     f6e:	bd10      	pop	{r4, pc}
     f70:	41004000 	.word	0x41004000
     f74:	00001019 	.word	0x00001019
     f78:	0000144d 	.word	0x0000144d
     f7c:	00001495 	.word	0x00001495
     f80:	00000f85 	.word	0x00000f85

00000f84 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     f84:	07c3      	lsls	r3, r0, #31
     f86:	d509      	bpl.n	f9c <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     f88:	4b1d      	ldr	r3, [pc, #116]	; (1000 <_gclk_init_generators_by_fref+0x7c>)
     f8a:	2280      	movs	r2, #128	; 0x80
     f8c:	0052      	lsls	r2, r2, #1
     f8e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     f90:	4a1c      	ldr	r2, [pc, #112]	; (1004 <_gclk_init_generators_by_fref+0x80>)
     f92:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     f94:	001a      	movs	r2, r3
     f96:	7853      	ldrb	r3, [r2, #1]
     f98:	09db      	lsrs	r3, r3, #7
     f9a:	d1fc      	bne.n	f96 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     f9c:	0783      	lsls	r3, r0, #30
     f9e:	d509      	bpl.n	fb4 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     fa0:	4b17      	ldr	r3, [pc, #92]	; (1000 <_gclk_init_generators_by_fref+0x7c>)
     fa2:	2202      	movs	r2, #2
     fa4:	32ff      	adds	r2, #255	; 0xff
     fa6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     fa8:	4a17      	ldr	r2, [pc, #92]	; (1008 <_gclk_init_generators_by_fref+0x84>)
     faa:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     fac:	001a      	movs	r2, r3
     fae:	7853      	ldrb	r3, [r2, #1]
     fb0:	09db      	lsrs	r3, r3, #7
     fb2:	d1fc      	bne.n	fae <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     fb4:	0743      	lsls	r3, r0, #29
     fb6:	d509      	bpl.n	fcc <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
     fb8:	4b11      	ldr	r3, [pc, #68]	; (1000 <_gclk_init_generators_by_fref+0x7c>)
     fba:	2281      	movs	r2, #129	; 0x81
     fbc:	0052      	lsls	r2, r2, #1
     fbe:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     fc0:	4a12      	ldr	r2, [pc, #72]	; (100c <_gclk_init_generators_by_fref+0x88>)
     fc2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     fc4:	001a      	movs	r2, r3
     fc6:	7853      	ldrb	r3, [r2, #1]
     fc8:	09db      	lsrs	r3, r3, #7
     fca:	d1fc      	bne.n	fc6 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     fcc:	0703      	lsls	r3, r0, #28
     fce:	d509      	bpl.n	fe4 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENDIV.reg = data;
     fd0:	4b0b      	ldr	r3, [pc, #44]	; (1000 <_gclk_init_generators_by_fref+0x7c>)
     fd2:	2204      	movs	r2, #4
     fd4:	32ff      	adds	r2, #255	; 0xff
     fd6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     fd8:	4a0d      	ldr	r2, [pc, #52]	; (1010 <_gclk_init_generators_by_fref+0x8c>)
     fda:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     fdc:	001a      	movs	r2, r3
     fde:	7853      	ldrb	r3, [r2, #1]
     fe0:	09db      	lsrs	r3, r3, #7
     fe2:	d1fc      	bne.n	fde <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
     fe4:	06c3      	lsls	r3, r0, #27
     fe6:	d509      	bpl.n	ffc <_gclk_init_generators_by_fref+0x78>
	((Gclk *)hw)->GENDIV.reg = data;
     fe8:	4b05      	ldr	r3, [pc, #20]	; (1000 <_gclk_init_generators_by_fref+0x7c>)
     fea:	2282      	movs	r2, #130	; 0x82
     fec:	0052      	lsls	r2, r2, #1
     fee:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     ff0:	4a08      	ldr	r2, [pc, #32]	; (1014 <_gclk_init_generators_by_fref+0x90>)
     ff2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     ff4:	001a      	movs	r2, r3
     ff6:	7853      	ldrb	r3, [r2, #1]
     ff8:	09db      	lsrs	r3, r3, #7
     ffa:	d1fc      	bne.n	ff6 <_gclk_init_generators_by_fref+0x72>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     ffc:	4770      	bx	lr
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	40000c00 	.word	0x40000c00
    1004:	00090600 	.word	0x00090600
    1008:	00010401 	.word	0x00010401
    100c:	00090702 	.word	0x00090702
    1010:	00010303 	.word	0x00010303
    1014:	00090604 	.word	0x00090604

00001018 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1018:	4b06      	ldr	r3, [pc, #24]	; (1034 <_pm_init+0x1c>)
    101a:	7a1a      	ldrb	r2, [r3, #8]
    101c:	b2d2      	uxtb	r2, r2
    101e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1020:	7a5a      	ldrb	r2, [r3, #9]
    1022:	b2d2      	uxtb	r2, r2
    1024:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1026:	7a9a      	ldrb	r2, [r3, #10]
    1028:	b2d2      	uxtb	r2, r2
    102a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    102c:	7ada      	ldrb	r2, [r3, #11]
    102e:	b2d2      	uxtb	r2, r2
    1030:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1032:	4770      	bx	lr
    1034:	40000400 	.word	0x40000400

00001038 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1038:	b510      	push	{r4, lr}
    103a:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    103c:	4b20      	ldr	r3, [pc, #128]	; (10c0 <_usart_init+0x88>)
    103e:	18c3      	adds	r3, r0, r3
    1040:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    1042:	b2db      	uxtb	r3, r3
    1044:	2b02      	cmp	r3, #2
    1046:	d005      	beq.n	1054 <_usart_init+0x1c>
	ASSERT(false);
    1048:	228f      	movs	r2, #143	; 0x8f
    104a:	0092      	lsls	r2, r2, #2
    104c:	491d      	ldr	r1, [pc, #116]	; (10c4 <_usart_init+0x8c>)
    104e:	2000      	movs	r0, #0
    1050:	4b1d      	ldr	r3, [pc, #116]	; (10c8 <_usart_init+0x90>)
    1052:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1054:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1056:	07db      	lsls	r3, r3, #31
    1058:	d418      	bmi.n	108c <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    105a:	2203      	movs	r2, #3
    105c:	69e3      	ldr	r3, [r4, #28]
    105e:	421a      	tst	r2, r3
    1060:	d1fc      	bne.n	105c <_usart_init+0x24>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1062:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1064:	079b      	lsls	r3, r3, #30
    1066:	d50b      	bpl.n	1080 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1068:	6823      	ldr	r3, [r4, #0]
    106a:	2202      	movs	r2, #2
    106c:	4393      	bics	r3, r2
    106e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1070:	3201      	adds	r2, #1
    1072:	69e3      	ldr	r3, [r4, #28]
    1074:	421a      	tst	r2, r3
    1076:	d1fc      	bne.n	1072 <_usart_init+0x3a>
    1078:	2202      	movs	r2, #2
    107a:	69e3      	ldr	r3, [r4, #28]
    107c:	421a      	tst	r2, r3
    107e:	d1fc      	bne.n	107a <_usart_init+0x42>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1080:	2305      	movs	r3, #5
    1082:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1084:	2203      	movs	r2, #3
    1086:	69e3      	ldr	r3, [r4, #28]
    1088:	421a      	tst	r2, r3
    108a:	d1fc      	bne.n	1086 <_usart_init+0x4e>
    108c:	2201      	movs	r2, #1
    108e:	69e3      	ldr	r3, [r4, #28]
    1090:	421a      	tst	r2, r3
    1092:	d1fc      	bne.n	108e <_usart_init+0x56>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1094:	4b0d      	ldr	r3, [pc, #52]	; (10cc <_usart_init+0x94>)
    1096:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1098:	2203      	movs	r2, #3
    109a:	69e3      	ldr	r3, [r4, #28]
    109c:	421a      	tst	r2, r3
    109e:	d1fc      	bne.n	109a <_usart_init+0x62>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    10a0:	23c0      	movs	r3, #192	; 0xc0
    10a2:	029b      	lsls	r3, r3, #10
    10a4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10a6:	2207      	movs	r2, #7
    10a8:	69e3      	ldr	r3, [r4, #28]
    10aa:	421a      	tst	r2, r3
    10ac:	d1fc      	bne.n	10a8 <_usart_init+0x70>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    10ae:	4b08      	ldr	r3, [pc, #32]	; (10d0 <_usart_init+0x98>)
    10b0:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    10b2:	2300      	movs	r3, #0
    10b4:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    10b6:	2230      	movs	r2, #48	; 0x30
    10b8:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    10ba:	2000      	movs	r0, #0
    10bc:	bd10      	pop	{r4, pc}
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	bdfff800 	.word	0xbdfff800
    10c4:	0000344c 	.word	0x0000344c
    10c8:	00000ee9 	.word	0x00000ee9
    10cc:	40100004 	.word	0x40100004
    10d0:	ffffd8ad 	.word	0xffffd8ad

000010d4 <_usart_sync_init>:
{
    10d4:	b570      	push	{r4, r5, r6, lr}
    10d6:	0005      	movs	r5, r0
    10d8:	000c      	movs	r4, r1
	ASSERT(device);
    10da:	1e43      	subs	r3, r0, #1
    10dc:	4198      	sbcs	r0, r3
    10de:	b2c0      	uxtb	r0, r0
    10e0:	22b6      	movs	r2, #182	; 0xb6
    10e2:	4904      	ldr	r1, [pc, #16]	; (10f4 <_usart_sync_init+0x20>)
    10e4:	4b04      	ldr	r3, [pc, #16]	; (10f8 <_usart_sync_init+0x24>)
    10e6:	4798      	blx	r3
	device->hw = hw;
    10e8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    10ea:	0020      	movs	r0, r4
    10ec:	4b03      	ldr	r3, [pc, #12]	; (10fc <_usart_sync_init+0x28>)
    10ee:	4798      	blx	r3
}
    10f0:	bd70      	pop	{r4, r5, r6, pc}
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	0000344c 	.word	0x0000344c
    10f8:	00000ee9 	.word	0x00000ee9
    10fc:	00001039 	.word	0x00001039

00001100 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1100:	6803      	ldr	r3, [r0, #0]
    1102:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1104:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1106:	4770      	bx	lr

00001108 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1108:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    110a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    110c:	b2c0      	uxtb	r0, r0
}
    110e:	4770      	bx	lr

00001110 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1110:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1112:	7e18      	ldrb	r0, [r3, #24]
    1114:	2301      	movs	r3, #1
    1116:	4018      	ands	r0, r3
}
    1118:	4770      	bx	lr

0000111a <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    111a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    111c:	7e18      	ldrb	r0, [r3, #24]
    111e:	0780      	lsls	r0, r0, #30
    1120:	0fc0      	lsrs	r0, r0, #31
}
    1122:	4770      	bx	lr

00001124 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1124:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1126:	7e18      	ldrb	r0, [r3, #24]
    1128:	0740      	lsls	r0, r0, #29
    112a:	0fc0      	lsrs	r0, r0, #31
}
    112c:	4770      	bx	lr
	...

00001130 <SERCOM0_Handler>:
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}

void SERCOM0_Handler(void)
{
    1130:	b510      	push	{r4, lr}
	_spi_handler(_sercom0_dev);
    1132:	4b12      	ldr	r3, [pc, #72]	; (117c <SERCOM0_Handler+0x4c>)
    1134:	6818      	ldr	r0, [r3, #0]
	void *                      hw = dev->prvt;
    1136:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1138:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    113a:	7d93      	ldrb	r3, [r2, #22]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    113c:	400b      	ands	r3, r1
	if (st & SERCOM_SPI_INTFLAG_DRE) {
    113e:	07d9      	lsls	r1, r3, #31
    1140:	d407      	bmi.n	1152 <SERCOM0_Handler+0x22>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    1142:	0759      	lsls	r1, r3, #29
    1144:	d408      	bmi.n	1158 <SERCOM0_Handler+0x28>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    1146:	0799      	lsls	r1, r3, #30
    1148:	d409      	bmi.n	115e <SERCOM0_Handler+0x2e>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    114a:	b25b      	sxtb	r3, r3
    114c:	2b00      	cmp	r3, #0
    114e:	db0b      	blt.n	1168 <SERCOM0_Handler+0x38>
}
    1150:	bd10      	pop	{r4, pc}
		dev->callbacks.tx(dev);
    1152:	6883      	ldr	r3, [r0, #8]
    1154:	4798      	blx	r3
    1156:	e7fb      	b.n	1150 <SERCOM0_Handler+0x20>
		dev->callbacks.rx(dev);
    1158:	68c3      	ldr	r3, [r0, #12]
    115a:	4798      	blx	r3
    115c:	e7f8      	b.n	1150 <SERCOM0_Handler+0x20>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    115e:	2302      	movs	r3, #2
    1160:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    1162:	6903      	ldr	r3, [r0, #16]
    1164:	4798      	blx	r3
    1166:	e7f3      	b.n	1150 <SERCOM0_Handler+0x20>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1168:	2304      	movs	r3, #4
    116a:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    116c:	337c      	adds	r3, #124	; 0x7c
    116e:	7613      	strb	r3, [r2, #24]
		dev->callbacks.err(dev, ERR_OVERFLOW);
    1170:	6943      	ldr	r3, [r0, #20]
    1172:	2113      	movs	r1, #19
    1174:	4249      	negs	r1, r1
    1176:	4798      	blx	r3
}
    1178:	e7ea      	b.n	1150 <SERCOM0_Handler+0x20>
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	20000108 	.word	0x20000108

00001180 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1180:	b570      	push	{r4, r5, r6, lr}
    1182:	0005      	movs	r5, r0
    1184:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1186:	4b37      	ldr	r3, [pc, #220]	; (1264 <_spi_m_sync_init+0xe4>)
    1188:	18cb      	adds	r3, r1, r3
    118a:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    118c:	b2db      	uxtb	r3, r3
    118e:	2b00      	cmp	r3, #0
    1190:	d00c      	beq.n	11ac <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1192:	2800      	cmp	r0, #0
    1194:	d053      	beq.n	123e <_spi_m_sync_init+0xbe>
    1196:	1e60      	subs	r0, r4, #1
    1198:	4184      	sbcs	r4, r0
    119a:	b2e0      	uxtb	r0, r4
    119c:	2294      	movs	r2, #148	; 0x94
    119e:	0112      	lsls	r2, r2, #4
    11a0:	4931      	ldr	r1, [pc, #196]	; (1268 <_spi_m_sync_init+0xe8>)
    11a2:	4b32      	ldr	r3, [pc, #200]	; (126c <_spi_m_sync_init+0xec>)
    11a4:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    11a6:	200d      	movs	r0, #13
    11a8:	4240      	negs	r0, r0
    11aa:	e047      	b.n	123c <_spi_m_sync_init+0xbc>
	ASSERT(dev && hw);
    11ac:	2800      	cmp	r0, #0
    11ae:	d14f      	bne.n	1250 <_spi_m_sync_init+0xd0>
    11b0:	2294      	movs	r2, #148	; 0x94
    11b2:	0112      	lsls	r2, r2, #4
    11b4:	492c      	ldr	r1, [pc, #176]	; (1268 <_spi_m_sync_init+0xe8>)
    11b6:	2000      	movs	r0, #0
    11b8:	4b2c      	ldr	r3, [pc, #176]	; (126c <_spi_m_sync_init+0xec>)
    11ba:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    11bc:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    11be:	07db      	lsls	r3, r3, #31
    11c0:	d418      	bmi.n	11f4 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    11c2:	2203      	movs	r2, #3
    11c4:	69e3      	ldr	r3, [r4, #28]
    11c6:	421a      	tst	r2, r3
    11c8:	d1fc      	bne.n	11c4 <_spi_m_sync_init+0x44>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    11ca:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    11cc:	079b      	lsls	r3, r3, #30
    11ce:	d50b      	bpl.n	11e8 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    11d0:	6823      	ldr	r3, [r4, #0]
    11d2:	2202      	movs	r2, #2
    11d4:	4393      	bics	r3, r2
    11d6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    11d8:	3201      	adds	r2, #1
    11da:	69e3      	ldr	r3, [r4, #28]
    11dc:	421a      	tst	r2, r3
    11de:	d1fc      	bne.n	11da <_spi_m_sync_init+0x5a>
    11e0:	2202      	movs	r2, #2
    11e2:	69e3      	ldr	r3, [r4, #28]
    11e4:	421a      	tst	r2, r3
    11e6:	d1fc      	bne.n	11e2 <_spi_m_sync_init+0x62>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    11e8:	230d      	movs	r3, #13
    11ea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    11ec:	2203      	movs	r2, #3
    11ee:	69e3      	ldr	r3, [r4, #28]
    11f0:	421a      	tst	r2, r3
    11f2:	d1fc      	bne.n	11ee <_spi_m_sync_init+0x6e>
    11f4:	2201      	movs	r2, #1
    11f6:	69e3      	ldr	r3, [r4, #28]
    11f8:	421a      	tst	r2, r3
    11fa:	d1fc      	bne.n	11f6 <_spi_m_sync_init+0x76>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    11fc:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    11fe:	0020      	movs	r0, r4
    1200:	1e43      	subs	r3, r0, #1
    1202:	4198      	sbcs	r0, r3
    1204:	b2c0      	uxtb	r0, r0
    1206:	4a1a      	ldr	r2, [pc, #104]	; (1270 <_spi_m_sync_init+0xf0>)
    1208:	4917      	ldr	r1, [pc, #92]	; (1268 <_spi_m_sync_init+0xe8>)
    120a:	4b18      	ldr	r3, [pc, #96]	; (126c <_spi_m_sync_init+0xec>)
    120c:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    120e:	4b19      	ldr	r3, [pc, #100]	; (1274 <_spi_m_sync_init+0xf4>)
    1210:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1212:	2203      	movs	r2, #3
    1214:	69e3      	ldr	r3, [r4, #28]
    1216:	421a      	tst	r2, r3
    1218:	d1fc      	bne.n	1214 <_spi_m_sync_init+0x94>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    121a:	2380      	movs	r3, #128	; 0x80
    121c:	029b      	lsls	r3, r3, #10
    121e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1220:	2207      	movs	r2, #7
    1222:	69e3      	ldr	r3, [r4, #28]
    1224:	421a      	tst	r2, r3
    1226:	d1fc      	bne.n	1222 <_spi_m_sync_init+0xa2>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1228:	2331      	movs	r3, #49	; 0x31
    122a:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    122c:	2200      	movs	r2, #0
    122e:	3b01      	subs	r3, #1
    1230:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1232:	3b2f      	subs	r3, #47	; 0x2f
    1234:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1236:	4b10      	ldr	r3, [pc, #64]	; (1278 <_spi_m_sync_init+0xf8>)
    1238:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    123a:	2000      	movs	r0, #0
}
    123c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    123e:	2294      	movs	r2, #148	; 0x94
    1240:	0112      	lsls	r2, r2, #4
    1242:	4909      	ldr	r1, [pc, #36]	; (1268 <_spi_m_sync_init+0xe8>)
    1244:	2000      	movs	r0, #0
    1246:	4b09      	ldr	r3, [pc, #36]	; (126c <_spi_m_sync_init+0xec>)
    1248:	4798      	blx	r3
		return ERR_INVALID_ARG;
    124a:	200d      	movs	r0, #13
    124c:	4240      	negs	r0, r0
    124e:	e7f5      	b.n	123c <_spi_m_sync_init+0xbc>
	ASSERT(dev && hw);
    1250:	0008      	movs	r0, r1
    1252:	1e43      	subs	r3, r0, #1
    1254:	4198      	sbcs	r0, r3
    1256:	b2c0      	uxtb	r0, r0
    1258:	2294      	movs	r2, #148	; 0x94
    125a:	0112      	lsls	r2, r2, #4
    125c:	4902      	ldr	r1, [pc, #8]	; (1268 <_spi_m_sync_init+0xe8>)
    125e:	4b03      	ldr	r3, [pc, #12]	; (126c <_spi_m_sync_init+0xec>)
    1260:	4798      	blx	r3
    1262:	e7ab      	b.n	11bc <_spi_m_sync_init+0x3c>
    1264:	bdfff800 	.word	0xbdfff800
    1268:	0000344c 	.word	0x0000344c
    126c:	00000ee9 	.word	0x00000ee9
    1270:	000008eb 	.word	0x000008eb
    1274:	0011000c 	.word	0x0011000c
    1278:	000001ff 	.word	0x000001ff

0000127c <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    127c:	b570      	push	{r4, r5, r6, lr}
    127e:	0005      	movs	r5, r0
    1280:	000c      	movs	r4, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    1282:	4b16      	ldr	r3, [pc, #88]	; (12dc <_spi_m_async_init+0x60>)
    1284:	4798      	blx	r3

	if (rc < 0) {
    1286:	2800      	cmp	r0, #0
    1288:	db1d      	blt.n	12c6 <_spi_m_async_init+0x4a>
	if (hw == SERCOM0) {
    128a:	4b15      	ldr	r3, [pc, #84]	; (12e0 <_spi_m_async_init+0x64>)
    128c:	429c      	cmp	r4, r3
    128e:	d01b      	beq.n	12c8 <_spi_m_async_init+0x4c>
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    1290:	2300      	movs	r3, #0
    1292:	612b      	str	r3, [r5, #16]
	spid->callbacks.rx       = NULL;
    1294:	60eb      	str	r3, [r5, #12]
	spid->callbacks.tx       = NULL;
    1296:	60ab      	str	r3, [r5, #8]
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1298:	4b12      	ldr	r3, [pc, #72]	; (12e4 <_spi_m_async_init+0x68>)
    129a:	469c      	mov	ip, r3
    129c:	4464      	add	r4, ip
    129e:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    12a0:	3409      	adds	r4, #9
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    12a2:	b2e3      	uxtb	r3, r4
    12a4:	0622      	lsls	r2, r4, #24
    12a6:	d417      	bmi.n	12d8 <_spi_m_async_init+0x5c>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12a8:	221f      	movs	r2, #31
    12aa:	401a      	ands	r2, r3
    12ac:	2301      	movs	r3, #1
    12ae:	4093      	lsls	r3, r2
    12b0:	4a0d      	ldr	r2, [pc, #52]	; (12e8 <_spi_m_async_init+0x6c>)
    12b2:	2180      	movs	r1, #128	; 0x80
    12b4:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    12b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12ba:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12be:	3101      	adds	r1, #1
    12c0:	31ff      	adds	r1, #255	; 0xff
    12c2:	5053      	str	r3, [r2, r1]
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));

	return ERR_NONE;
    12c4:	2000      	movs	r0, #0
}
    12c6:	bd70      	pop	{r4, r5, r6, pc}
		_sercom0_dev = (struct _spi_async_dev *)dev;
    12c8:	4b08      	ldr	r3, [pc, #32]	; (12ec <_spi_m_async_init+0x70>)
    12ca:	601d      	str	r5, [r3, #0]
	spid->callbacks.complete = NULL;
    12cc:	2300      	movs	r3, #0
    12ce:	612b      	str	r3, [r5, #16]
	spid->callbacks.rx       = NULL;
    12d0:	60eb      	str	r3, [r5, #12]
	spid->callbacks.tx       = NULL;
    12d2:	60ab      	str	r3, [r5, #8]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    12d4:	3309      	adds	r3, #9
    12d6:	e7e7      	b.n	12a8 <_spi_m_async_init+0x2c>
	return ERR_NONE;
    12d8:	2000      	movs	r0, #0
    12da:	e7f4      	b.n	12c6 <_spi_m_async_init+0x4a>
    12dc:	00001181 	.word	0x00001181
    12e0:	42000800 	.word	0x42000800
    12e4:	bdfff800 	.word	0xbdfff800
    12e8:	e000e100 	.word	0xe000e100
    12ec:	20000108 	.word	0x20000108

000012f0 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    12f0:	b570      	push	{r4, r5, r6, lr}
    12f2:	000d      	movs	r5, r1
	void *hw = dev->prvt;
    12f4:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    12f6:	2800      	cmp	r0, #0
    12f8:	d00d      	beq.n	1316 <_spi_m_async_enable_tx+0x26>
    12fa:	0020      	movs	r0, r4
    12fc:	1e43      	subs	r3, r0, #1
    12fe:	4198      	sbcs	r0, r3
    1300:	b2c0      	uxtb	r0, r0
    1302:	4a07      	ldr	r2, [pc, #28]	; (1320 <_spi_m_async_enable_tx+0x30>)
    1304:	4907      	ldr	r1, [pc, #28]	; (1324 <_spi_m_async_enable_tx+0x34>)
    1306:	4b08      	ldr	r3, [pc, #32]	; (1328 <_spi_m_async_enable_tx+0x38>)
    1308:	4798      	blx	r3

	if (state) {
    130a:	2d00      	cmp	r5, #0
    130c:	d105      	bne.n	131a <_spi_m_async_enable_tx+0x2a>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    130e:	2301      	movs	r3, #1
    1310:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    1312:	2000      	movs	r0, #0
    1314:	bd70      	pop	{r4, r5, r6, pc}
    1316:	2000      	movs	r0, #0
    1318:	e7f3      	b.n	1302 <_spi_m_async_enable_tx+0x12>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    131a:	2301      	movs	r3, #1
    131c:	75a3      	strb	r3, [r4, #22]
    131e:	e7f8      	b.n	1312 <_spi_m_async_enable_tx+0x22>
    1320:	00000acc 	.word	0x00000acc
    1324:	0000344c 	.word	0x0000344c
    1328:	00000ee9 	.word	0x00000ee9

0000132c <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    132e:	000e      	movs	r6, r1
	void *hw = dev->prvt;
    1330:	6805      	ldr	r5, [r0, #0]

	ASSERT(dev);
    1332:	4c0c      	ldr	r4, [pc, #48]	; (1364 <_spi_m_async_enable_rx+0x38>)
    1334:	1e43      	subs	r3, r0, #1
    1336:	4198      	sbcs	r0, r3
    1338:	b2c0      	uxtb	r0, r0
    133a:	22ae      	movs	r2, #174	; 0xae
    133c:	0112      	lsls	r2, r2, #4
    133e:	0021      	movs	r1, r4
    1340:	4f09      	ldr	r7, [pc, #36]	; (1368 <_spi_m_async_enable_rx+0x3c>)
    1342:	47b8      	blx	r7
	ASSERT(hw);
    1344:	0028      	movs	r0, r5
    1346:	1e43      	subs	r3, r0, #1
    1348:	4198      	sbcs	r0, r3
    134a:	b2c0      	uxtb	r0, r0
    134c:	4a07      	ldr	r2, [pc, #28]	; (136c <_spi_m_async_enable_rx+0x40>)
    134e:	0021      	movs	r1, r4
    1350:	47b8      	blx	r7

	if (state) {
    1352:	2e00      	cmp	r6, #0
    1354:	d103      	bne.n	135e <_spi_m_async_enable_rx+0x32>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    1356:	2304      	movs	r3, #4
    1358:	752b      	strb	r3, [r5, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    135a:	2000      	movs	r0, #0
    135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    135e:	2304      	movs	r3, #4
    1360:	75ab      	strb	r3, [r5, #22]
    1362:	e7fa      	b.n	135a <_spi_m_async_enable_rx+0x2e>
    1364:	0000344c 	.word	0x0000344c
    1368:	00000ee9 	.word	0x00000ee9
    136c:	00000ae1 	.word	0x00000ae1

00001370 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    1370:	b570      	push	{r4, r5, r6, lr}
    1372:	0004      	movs	r4, r0
    1374:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    1376:	2800      	cmp	r0, #0
    1378:	d00e      	beq.n	1398 <_spi_m_async_enable_tx_complete+0x28>
    137a:	6800      	ldr	r0, [r0, #0]
    137c:	1e43      	subs	r3, r0, #1
    137e:	4198      	sbcs	r0, r3
    1380:	b2c0      	uxtb	r0, r0
    1382:	4a08      	ldr	r2, [pc, #32]	; (13a4 <_spi_m_async_enable_tx_complete+0x34>)
    1384:	4908      	ldr	r1, [pc, #32]	; (13a8 <_spi_m_async_enable_tx_complete+0x38>)
    1386:	4b09      	ldr	r3, [pc, #36]	; (13ac <_spi_m_async_enable_tx_complete+0x3c>)
    1388:	4798      	blx	r3

	if (state) {
    138a:	2d00      	cmp	r5, #0
    138c:	d106      	bne.n	139c <_spi_m_async_enable_tx_complete+0x2c>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    138e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    1390:	2202      	movs	r2, #2
    1392:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    1394:	2000      	movs	r0, #0
    1396:	bd70      	pop	{r4, r5, r6, pc}
    1398:	2000      	movs	r0, #0
    139a:	e7f2      	b.n	1382 <_spi_m_async_enable_tx_complete+0x12>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    139c:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    139e:	2202      	movs	r2, #2
    13a0:	759a      	strb	r2, [r3, #22]
    13a2:	e7f7      	b.n	1394 <_spi_m_async_enable_tx_complete+0x24>
    13a4:	00000af3 	.word	0x00000af3
    13a8:	0000344c 	.word	0x0000344c
    13ac:	00000ee9 	.word	0x00000ee9

000013b0 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    13b0:	b570      	push	{r4, r5, r6, lr}
    13b2:	0004      	movs	r4, r0
    13b4:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    13b6:	2800      	cmp	r0, #0
    13b8:	d00b      	beq.n	13d2 <_spi_m_async_write_one+0x22>
    13ba:	6800      	ldr	r0, [r0, #0]
    13bc:	1e43      	subs	r3, r0, #1
    13be:	4198      	sbcs	r0, r3
    13c0:	b2c0      	uxtb	r0, r0
    13c2:	4a05      	ldr	r2, [pc, #20]	; (13d8 <_spi_m_async_write_one+0x28>)
    13c4:	4905      	ldr	r1, [pc, #20]	; (13dc <_spi_m_async_write_one+0x2c>)
    13c6:	4b06      	ldr	r3, [pc, #24]	; (13e0 <_spi_m_async_write_one+0x30>)
    13c8:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    13ca:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    13cc:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    13ce:	2000      	movs	r0, #0
    13d0:	bd70      	pop	{r4, r5, r6, pc}
    13d2:	2000      	movs	r0, #0
    13d4:	e7f5      	b.n	13c2 <_spi_m_async_write_one+0x12>
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	00000b05 	.word	0x00000b05
    13dc:	0000344c 	.word	0x0000344c
    13e0:	00000ee9 	.word	0x00000ee9

000013e4 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    13e4:	b510      	push	{r4, lr}
    13e6:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    13e8:	d00c      	beq.n	1404 <_spi_m_async_read_one+0x20>
    13ea:	6800      	ldr	r0, [r0, #0]
    13ec:	1e43      	subs	r3, r0, #1
    13ee:	4198      	sbcs	r0, r3
    13f0:	b2c0      	uxtb	r0, r0
    13f2:	22b2      	movs	r2, #178	; 0xb2
    13f4:	0112      	lsls	r2, r2, #4
    13f6:	4904      	ldr	r1, [pc, #16]	; (1408 <_spi_m_async_read_one+0x24>)
    13f8:	4b04      	ldr	r3, [pc, #16]	; (140c <_spi_m_async_read_one+0x28>)
    13fa:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    13fc:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    13fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1400:	b280      	uxth	r0, r0
}
    1402:	bd10      	pop	{r4, pc}
    1404:	2000      	movs	r0, #0
    1406:	e7f4      	b.n	13f2 <_spi_m_async_read_one+0xe>
    1408:	0000344c 	.word	0x0000344c
    140c:	00000ee9 	.word	0x00000ee9

00001410 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    1410:	b570      	push	{r4, r5, r6, lr}
    1412:	0004      	movs	r4, r0
    1414:	000d      	movs	r5, r1
    1416:	0016      	movs	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    1418:	2800      	cmp	r0, #0
    141a:	d00f      	beq.n	143c <_spi_m_async_register_callback+0x2c>
    141c:	2000      	movs	r0, #0
    141e:	2303      	movs	r3, #3
    1420:	428b      	cmp	r3, r1
    1422:	4140      	adcs	r0, r0
    1424:	b2c0      	uxtb	r0, r0
    1426:	2301      	movs	r3, #1
    1428:	4018      	ands	r0, r3
    142a:	4a05      	ldr	r2, [pc, #20]	; (1440 <_spi_m_async_register_callback+0x30>)
    142c:	4905      	ldr	r1, [pc, #20]	; (1444 <_spi_m_async_register_callback+0x34>)
    142e:	4b06      	ldr	r3, [pc, #24]	; (1448 <_spi_m_async_register_callback+0x38>)
    1430:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    1432:	00ad      	lsls	r5, r5, #2
    1434:	1964      	adds	r4, r4, r5
    1436:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    1438:	2000      	movs	r0, #0
    143a:	bd70      	pop	{r4, r5, r6, pc}
    143c:	2000      	movs	r0, #0
    143e:	e7f2      	b.n	1426 <_spi_m_async_register_callback+0x16>
    1440:	00000b39 	.word	0x00000b39
    1444:	0000344c 	.word	0x0000344c
    1448:	00000ee9 	.word	0x00000ee9

0000144c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    144c:	4b0e      	ldr	r3, [pc, #56]	; (1488 <_sysctrl_init_sources+0x3c>)
    144e:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1450:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1452:	480e      	ldr	r0, [pc, #56]	; (148c <_sysctrl_init_sources+0x40>)
    1454:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1456:	0f89      	lsrs	r1, r1, #30
    1458:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    145a:	480d      	ldr	r0, [pc, #52]	; (1490 <_sysctrl_init_sources+0x44>)
    145c:	4301      	orrs	r1, r0
    145e:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1460:	621a      	str	r2, [r3, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    1462:	699a      	ldr	r2, [r3, #24]
	((Sysctrl *)hw)->OSC32K.reg = data;
    1464:	220a      	movs	r2, #10
    1466:	619a      	str	r2, [r3, #24]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    1468:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    146a:	3a06      	subs	r2, #6
    146c:	68cb      	ldr	r3, [r1, #12]
    146e:	421a      	tst	r2, r3
    1470:	d0fc      	beq.n	146c <_sysctrl_init_sources+0x20>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1472:	4905      	ldr	r1, [pc, #20]	; (1488 <_sysctrl_init_sources+0x3c>)
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1474:	2208      	movs	r2, #8
    1476:	68cb      	ldr	r3, [r1, #12]
    1478:	421a      	tst	r2, r3
    147a:	d0fc      	beq.n	1476 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    147c:	4a02      	ldr	r2, [pc, #8]	; (1488 <_sysctrl_init_sources+0x3c>)
    147e:	6a13      	ldr	r3, [r2, #32]
    1480:	2180      	movs	r1, #128	; 0x80
    1482:	430b      	orrs	r3, r1
    1484:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1486:	4770      	bx	lr
    1488:	40000800 	.word	0x40000800
    148c:	0fff0000 	.word	0x0fff0000
    1490:	00000302 	.word	0x00000302

00001494 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1494:	2202      	movs	r2, #2
    1496:	4b19      	ldr	r3, [pc, #100]	; (14fc <_sysctrl_init_referenced_generators+0x68>)
    1498:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    149a:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    149c:	320e      	adds	r2, #14
    149e:	68cb      	ldr	r3, [r1, #12]
    14a0:	421a      	tst	r2, r3
    14a2:	d0fc      	beq.n	149e <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    14a4:	4a16      	ldr	r2, [pc, #88]	; (1500 <_sysctrl_init_referenced_generators+0x6c>)
    14a6:	4b15      	ldr	r3, [pc, #84]	; (14fc <_sysctrl_init_referenced_generators+0x68>)
    14a8:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    14aa:	4b16      	ldr	r3, [pc, #88]	; (1504 <_sysctrl_init_referenced_generators+0x70>)
    14ac:	681b      	ldr	r3, [r3, #0]
    14ae:	0e9b      	lsrs	r3, r3, #26
    14b0:	2b3f      	cmp	r3, #63	; 0x3f
    14b2:	d01a      	beq.n	14ea <_sysctrl_init_referenced_generators+0x56>
    14b4:	029b      	lsls	r3, r3, #10
    14b6:	2280      	movs	r2, #128	; 0x80
    14b8:	0092      	lsls	r2, r2, #2
    14ba:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    14bc:	4a0f      	ldr	r2, [pc, #60]	; (14fc <_sysctrl_init_referenced_generators+0x68>)
    14be:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    14c0:	2393      	movs	r3, #147	; 0x93
    14c2:	005b      	lsls	r3, r3, #1
    14c4:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    14c6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    14c8:	075b      	lsls	r3, r3, #29
    14ca:	d511      	bpl.n	14f0 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    14cc:	0011      	movs	r1, r2
	tmp &= mask;
    14ce:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    14d0:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    14d2:	421a      	tst	r2, r3
    14d4:	d0fc      	beq.n	14d0 <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    14d6:	4a09      	ldr	r2, [pc, #36]	; (14fc <_sysctrl_init_referenced_generators+0x68>)
    14d8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    14da:	2180      	movs	r1, #128	; 0x80
    14dc:	430b      	orrs	r3, r1
    14de:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    14e0:	4a09      	ldr	r2, [pc, #36]	; (1508 <_sysctrl_init_referenced_generators+0x74>)
    14e2:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    14e4:	09db      	lsrs	r3, r3, #7
    14e6:	d1fc      	bne.n	14e2 <_sysctrl_init_referenced_generators+0x4e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    14e8:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    14ea:	23fc      	movs	r3, #252	; 0xfc
    14ec:	01db      	lsls	r3, r3, #7
    14ee:	e7e5      	b.n	14bc <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    14f0:	4902      	ldr	r1, [pc, #8]	; (14fc <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    14f2:	2210      	movs	r2, #16
    14f4:	68cb      	ldr	r3, [r1, #12]
    14f6:	421a      	tst	r2, r3
    14f8:	d0fc      	beq.n	14f4 <_sysctrl_init_referenced_generators+0x60>
    14fa:	e7ec      	b.n	14d6 <_sysctrl_init_referenced_generators+0x42>
    14fc:	40000800 	.word	0x40000800
    1500:	0401bb80 	.word	0x0401bb80
    1504:	00806024 	.word	0x00806024
    1508:	40000c00 	.word	0x40000c00

0000150c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    150c:	4b02      	ldr	r3, [pc, #8]	; (1518 <_delay_init+0xc>)
    150e:	4a03      	ldr	r2, [pc, #12]	; (151c <_delay_init+0x10>)
    1510:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1512:	2205      	movs	r2, #5
    1514:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    1516:	4770      	bx	lr
    1518:	e000e010 	.word	0xe000e010
    151c:	00ffffff 	.word	0x00ffffff

00001520 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1520:	2000      	movs	r0, #0
    1522:	4770      	bx	lr

00001524 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1524:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1526:	7c83      	ldrb	r3, [r0, #18]
    1528:	220f      	movs	r2, #15
    152a:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    152c:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    152e:	3a08      	subs	r2, #8
    1530:	400a      	ands	r2, r1
    1532:	2a01      	cmp	r2, #1
    1534:	d00b      	beq.n	154e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1536:	015a      	lsls	r2, r3, #5
    1538:	4919      	ldr	r1, [pc, #100]	; (15a0 <_usb_d_dev_handle_setup+0x7c>)
    153a:	468c      	mov	ip, r1
    153c:	4462      	add	r2, ip
    153e:	2110      	movs	r1, #16
    1540:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1542:	015b      	lsls	r3, r3, #5
    1544:	4a17      	ldr	r2, [pc, #92]	; (15a4 <_usb_d_dev_handle_setup+0x80>)
    1546:	4694      	mov	ip, r2
    1548:	4463      	add	r3, ip
    154a:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    154c:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    154e:	064a      	lsls	r2, r1, #25
    1550:	d50e      	bpl.n	1570 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    1552:	7cc2      	ldrb	r2, [r0, #19]
    1554:	2140      	movs	r1, #64	; 0x40
    1556:	438a      	bics	r2, r1
    1558:	74c2      	strb	r2, [r0, #19]
    155a:	015a      	lsls	r2, r3, #5
    155c:	4c12      	ldr	r4, [pc, #72]	; (15a8 <_usb_d_dev_handle_setup+0x84>)
    155e:	46a4      	mov	ip, r4
    1560:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1562:	2580      	movs	r5, #128	; 0x80
    1564:	2482      	movs	r4, #130	; 0x82
    1566:	0064      	lsls	r4, r4, #1
    1568:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    156a:	2406      	movs	r4, #6
    156c:	34ff      	adds	r4, #255	; 0xff
    156e:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    1570:	7cc2      	ldrb	r2, [r0, #19]
    1572:	2108      	movs	r1, #8
    1574:	438a      	bics	r2, r1
    1576:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1578:	490c      	ldr	r1, [pc, #48]	; (15ac <_usb_d_dev_handle_setup+0x88>)
    157a:	015a      	lsls	r2, r3, #5
    157c:	188c      	adds	r4, r1, r2
    157e:	2500      	movs	r5, #0
    1580:	72a5      	strb	r5, [r4, #10]
    1582:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1584:	0013      	movs	r3, r2
    1586:	4c06      	ldr	r4, [pc, #24]	; (15a0 <_usb_d_dev_handle_setup+0x7c>)
    1588:	46a4      	mov	ip, r4
    158a:	4463      	add	r3, ip
    158c:	246f      	movs	r4, #111	; 0x6f
    158e:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1590:	4b04      	ldr	r3, [pc, #16]	; (15a4 <_usb_d_dev_handle_setup+0x80>)
    1592:	469c      	mov	ip, r3
    1594:	4462      	add	r2, ip
    1596:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    1598:	7c80      	ldrb	r0, [r0, #18]
    159a:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    159c:	4798      	blx	r3
    159e:	e7d5      	b.n	154c <_usb_d_dev_handle_setup+0x28>
    15a0:	41005100 	.word	0x41005100
    15a4:	41005108 	.word	0x41005108
    15a8:	41005000 	.word	0x41005000
    15ac:	2000010c 	.word	0x2000010c

000015b0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    15b0:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    15b2:	2220      	movs	r2, #32
    15b4:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    15b6:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    15b8:	7c81      	ldrb	r1, [r0, #18]
    15ba:	230f      	movs	r3, #15
    15bc:	400b      	ands	r3, r1
    15be:	015b      	lsls	r3, r3, #5
    15c0:	4905      	ldr	r1, [pc, #20]	; (15d8 <_usb_d_dev_handle_stall+0x28>)
    15c2:	468c      	mov	ip, r1
    15c4:	4463      	add	r3, ip
    15c6:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    15c8:	6882      	ldr	r2, [r0, #8]
    15ca:	7c80      	ldrb	r0, [r0, #18]
    15cc:	4b03      	ldr	r3, [pc, #12]	; (15dc <_usb_d_dev_handle_stall+0x2c>)
    15ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    15d0:	2101      	movs	r1, #1
    15d2:	4798      	blx	r3
}
    15d4:	bd10      	pop	{r4, pc}
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	41005108 	.word	0x41005108
    15dc:	2000010c 	.word	0x2000010c

000015e0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    15e0:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    15e2:	7c83      	ldrb	r3, [r0, #18]
    15e4:	2bff      	cmp	r3, #255	; 0xff
    15e6:	d002      	beq.n	15ee <_usb_d_dev_trans_done+0xe>
    15e8:	7cc2      	ldrb	r2, [r0, #19]
    15ea:	0652      	lsls	r2, r2, #25
    15ec:	d400      	bmi.n	15f0 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    15ee:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    15f0:	7cc2      	ldrb	r2, [r0, #19]
    15f2:	2440      	movs	r4, #64	; 0x40
    15f4:	43a2      	bics	r2, r4
    15f6:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    15f8:	6882      	ldr	r2, [r0, #8]
    15fa:	4802      	ldr	r0, [pc, #8]	; (1604 <_usb_d_dev_trans_done+0x24>)
    15fc:	6f04      	ldr	r4, [r0, #112]	; 0x70
    15fe:	0018      	movs	r0, r3
    1600:	47a0      	blx	r4
    1602:	e7f4      	b.n	15ee <_usb_d_dev_trans_done+0xe>
    1604:	2000010c 	.word	0x2000010c

00001608 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1608:	b530      	push	{r4, r5, lr}
    160a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    160c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    160e:	ac01      	add	r4, sp, #4
    1610:	2525      	movs	r5, #37	; 0x25
    1612:	7025      	strb	r5, [r4, #0]
    1614:	3525      	adds	r5, #37	; 0x25
    1616:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1618:	2bff      	cmp	r3, #255	; 0xff
    161a:	d01b      	beq.n	1654 <_usb_d_dev_trans_stop+0x4c>
    161c:	7cc4      	ldrb	r4, [r0, #19]
    161e:	0664      	lsls	r4, r4, #25
    1620:	d518      	bpl.n	1654 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1622:	240f      	movs	r4, #15
    1624:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    1626:	2900      	cmp	r1, #0
    1628:	d016      	beq.n	1658 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    162a:	015c      	lsls	r4, r3, #5
    162c:	4d0e      	ldr	r5, [pc, #56]	; (1668 <_usb_d_dev_trans_stop+0x60>)
    162e:	46ac      	mov	ip, r5
    1630:	4464      	add	r4, ip
    1632:	2580      	movs	r5, #128	; 0x80
    1634:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1636:	ac01      	add	r4, sp, #4
    1638:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    163a:	0159      	lsls	r1, r3, #5
    163c:	4d0a      	ldr	r5, [pc, #40]	; (1668 <_usb_d_dev_trans_stop+0x60>)
    163e:	46ac      	mov	ip, r5
    1640:	4461      	add	r1, ip
    1642:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1644:	015b      	lsls	r3, r3, #5
    1646:	4909      	ldr	r1, [pc, #36]	; (166c <_usb_d_dev_trans_stop+0x64>)
    1648:	468c      	mov	ip, r1
    164a:	4463      	add	r3, ip
    164c:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    164e:	0011      	movs	r1, r2
    1650:	4b07      	ldr	r3, [pc, #28]	; (1670 <_usb_d_dev_trans_stop+0x68>)
    1652:	4798      	blx	r3
}
    1654:	b003      	add	sp, #12
    1656:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1658:	015c      	lsls	r4, r3, #5
    165a:	4d03      	ldr	r5, [pc, #12]	; (1668 <_usb_d_dev_trans_stop+0x60>)
    165c:	46ac      	mov	ip, r5
    165e:	4464      	add	r4, ip
    1660:	2540      	movs	r5, #64	; 0x40
    1662:	7165      	strb	r5, [r4, #5]
    1664:	e7e7      	b.n	1636 <_usb_d_dev_trans_stop+0x2e>
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	41005100 	.word	0x41005100
    166c:	41005108 	.word	0x41005108
    1670:	000015e1 	.word	0x000015e1

00001674 <_usb_d_dev_handle_trfail>:
{
    1674:	b570      	push	{r4, r5, r6, lr}
    1676:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1678:	7c83      	ldrb	r3, [r0, #18]
    167a:	220f      	movs	r2, #15
    167c:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    167e:	aa01      	add	r2, sp, #4
    1680:	2404      	movs	r4, #4
    1682:	7014      	strb	r4, [r2, #0]
    1684:	3404      	adds	r4, #4
    1686:	7054      	strb	r4, [r2, #1]
    1688:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    168a:	2900      	cmp	r1, #0
    168c:	d031      	beq.n	16f2 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    168e:	001a      	movs	r2, r3
    1690:	3208      	adds	r2, #8
    1692:	0152      	lsls	r2, r2, #5
    1694:	4c32      	ldr	r4, [pc, #200]	; (1760 <_usb_d_dev_handle_trfail+0xec>)
    1696:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1698:	0664      	lsls	r4, r4, #25
    169a:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    169c:	010a      	lsls	r2, r1, #4
    169e:	1952      	adds	r2, r2, r5
    16a0:	4d30      	ldr	r5, [pc, #192]	; (1764 <_usb_d_dev_handle_trfail+0xf0>)
    16a2:	18aa      	adds	r2, r5, r2
    16a4:	7a95      	ldrb	r5, [r2, #10]
    16a6:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    16a8:	2c02      	cmp	r4, #2
    16aa:	d02a      	beq.n	1702 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    16ac:	07ac      	lsls	r4, r5, #30
    16ae:	d541      	bpl.n	1734 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    16b0:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    16b2:	7a94      	ldrb	r4, [r2, #10]
    16b4:	2602      	movs	r6, #2
    16b6:	43b4      	bics	r4, r6
    16b8:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    16ba:	aa01      	add	r2, sp, #4
    16bc:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    16be:	015a      	lsls	r2, r3, #5
    16c0:	4e29      	ldr	r6, [pc, #164]	; (1768 <_usb_d_dev_handle_trfail+0xf4>)
    16c2:	46b4      	mov	ip, r6
    16c4:	4462      	add	r2, ip
    16c6:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    16c8:	015b      	lsls	r3, r3, #5
    16ca:	4a28      	ldr	r2, [pc, #160]	; (176c <_usb_d_dev_handle_trfail+0xf8>)
    16cc:	4694      	mov	ip, r2
    16ce:	4463      	add	r3, ip
    16d0:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    16d2:	2307      	movs	r3, #7
    16d4:	402b      	ands	r3, r5
    16d6:	2b01      	cmp	r3, #1
    16d8:	d13f      	bne.n	175a <_usb_d_dev_handle_trfail+0xe6>
    16da:	7cc3      	ldrb	r3, [r0, #19]
    16dc:	065b      	lsls	r3, r3, #25
    16de:	d53c      	bpl.n	175a <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    16e0:	7cc3      	ldrb	r3, [r0, #19]
    16e2:	09db      	lsrs	r3, r3, #7
    16e4:	4299      	cmp	r1, r3
    16e6:	d038      	beq.n	175a <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    16e8:	2200      	movs	r2, #0
    16ea:	0019      	movs	r1, r3
    16ec:	4b20      	ldr	r3, [pc, #128]	; (1770 <_usb_d_dev_handle_trfail+0xfc>)
    16ee:	4798      	blx	r3
    16f0:	e033      	b.n	175a <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    16f2:	001a      	movs	r2, r3
    16f4:	3208      	adds	r2, #8
    16f6:	0152      	lsls	r2, r2, #5
    16f8:	4c19      	ldr	r4, [pc, #100]	; (1760 <_usb_d_dev_handle_trfail+0xec>)
    16fa:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    16fc:	2207      	movs	r2, #7
    16fe:	4014      	ands	r4, r2
    1700:	e7cc      	b.n	169c <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1702:	07ec      	lsls	r4, r5, #31
    1704:	d5d2      	bpl.n	16ac <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1706:	7a94      	ldrb	r4, [r2, #10]
    1708:	2501      	movs	r5, #1
    170a:	43ac      	bics	r4, r5
    170c:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    170e:	aa01      	add	r2, sp, #4
    1710:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1712:	015a      	lsls	r2, r3, #5
    1714:	4d14      	ldr	r5, [pc, #80]	; (1768 <_usb_d_dev_handle_trfail+0xf4>)
    1716:	46ac      	mov	ip, r5
    1718:	4462      	add	r2, ip
    171a:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    171c:	015b      	lsls	r3, r3, #5
    171e:	4a13      	ldr	r2, [pc, #76]	; (176c <_usb_d_dev_handle_trfail+0xf8>)
    1720:	4694      	mov	ip, r2
    1722:	4463      	add	r3, ip
    1724:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1726:	1e4b      	subs	r3, r1, #1
    1728:	4199      	sbcs	r1, r3
    172a:	b2c9      	uxtb	r1, r1
    172c:	2204      	movs	r2, #4
    172e:	4b10      	ldr	r3, [pc, #64]	; (1770 <_usb_d_dev_handle_trfail+0xfc>)
    1730:	4798      	blx	r3
    1732:	e012      	b.n	175a <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    1734:	005a      	lsls	r2, r3, #1
    1736:	1852      	adds	r2, r2, r1
    1738:	0112      	lsls	r2, r2, #4
    173a:	480a      	ldr	r0, [pc, #40]	; (1764 <_usb_d_dev_handle_trfail+0xf0>)
    173c:	1882      	adds	r2, r0, r2
    173e:	2000      	movs	r0, #0
    1740:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1742:	aa01      	add	r2, sp, #4
    1744:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1746:	015a      	lsls	r2, r3, #5
    1748:	4807      	ldr	r0, [pc, #28]	; (1768 <_usb_d_dev_handle_trfail+0xf4>)
    174a:	4684      	mov	ip, r0
    174c:	4462      	add	r2, ip
    174e:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1750:	015b      	lsls	r3, r3, #5
    1752:	4a06      	ldr	r2, [pc, #24]	; (176c <_usb_d_dev_handle_trfail+0xf8>)
    1754:	4694      	mov	ip, r2
    1756:	4463      	add	r3, ip
    1758:	7019      	strb	r1, [r3, #0]
}
    175a:	b002      	add	sp, #8
    175c:	bd70      	pop	{r4, r5, r6, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	41005000 	.word	0x41005000
    1764:	2000010c 	.word	0x2000010c
    1768:	41005100 	.word	0x41005100
    176c:	41005108 	.word	0x41005108
    1770:	00001609 	.word	0x00001609

00001774 <_usb_d_dev_reset_epts>:
{
    1774:	b5f0      	push	{r4, r5, r6, r7, lr}
    1776:	46c6      	mov	lr, r8
    1778:	b500      	push	{lr}
    177a:	4d0c      	ldr	r5, [pc, #48]	; (17ac <_usb_d_dev_reset_epts+0x38>)
    177c:	002c      	movs	r4, r5
    177e:	3474      	adds	r4, #116	; 0x74
    1780:	3529      	adds	r5, #41	; 0x29
    1782:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1784:	4b0a      	ldr	r3, [pc, #40]	; (17b0 <_usb_d_dev_reset_epts+0x3c>)
    1786:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    1788:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    178a:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    178c:	2103      	movs	r1, #3
    178e:	0020      	movs	r0, r4
    1790:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    1792:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1794:	74e6      	strb	r6, [r4, #19]
    1796:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1798:	42ac      	cmp	r4, r5
    179a:	d1f7      	bne.n	178c <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    179c:	2260      	movs	r2, #96	; 0x60
    179e:	2100      	movs	r1, #0
    17a0:	4802      	ldr	r0, [pc, #8]	; (17ac <_usb_d_dev_reset_epts+0x38>)
    17a2:	4b04      	ldr	r3, [pc, #16]	; (17b4 <_usb_d_dev_reset_epts+0x40>)
    17a4:	4798      	blx	r3
}
    17a6:	bc04      	pop	{r2}
    17a8:	4690      	mov	r8, r2
    17aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17ac:	2000010c 	.word	0x2000010c
    17b0:	000015e1 	.word	0x000015e1
    17b4:	000033df 	.word	0x000033df

000017b8 <_usb_d_dev_in_next>:
{
    17b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ba:	46c6      	mov	lr, r8
    17bc:	b500      	push	{lr}
    17be:	0004      	movs	r4, r0
    17c0:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    17c2:	7c83      	ldrb	r3, [r0, #18]
    17c4:	250f      	movs	r5, #15
    17c6:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    17c8:	2900      	cmp	r1, #0
    17ca:	d100      	bne.n	17ce <_usb_d_dev_in_next+0x16>
    17cc:	e0aa      	b.n	1924 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    17ce:	016a      	lsls	r2, r5, #5
    17d0:	4b5a      	ldr	r3, [pc, #360]	; (193c <_usb_d_dev_in_next+0x184>)
    17d2:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    17d4:	6958      	ldr	r0, [r3, #20]
    17d6:	0480      	lsls	r0, r0, #18
    17d8:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    17da:	8a23      	ldrh	r3, [r4, #16]
    17dc:	4a58      	ldr	r2, [pc, #352]	; (1940 <_usb_d_dev_in_next+0x188>)
    17de:	4293      	cmp	r3, r2
    17e0:	d100      	bne.n	17e4 <_usb_d_dev_in_next+0x2c>
    17e2:	e09a      	b.n	191a <_usb_d_dev_in_next+0x162>
    17e4:	3b01      	subs	r3, #1
    17e6:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    17e8:	7ce3      	ldrb	r3, [r4, #19]
    17ea:	2707      	movs	r7, #7
    17ec:	401f      	ands	r7, r3
	if (isr) {
    17ee:	2e00      	cmp	r6, #0
    17f0:	d005      	beq.n	17fe <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    17f2:	016b      	lsls	r3, r5, #5
    17f4:	4953      	ldr	r1, [pc, #332]	; (1944 <_usb_d_dev_in_next+0x18c>)
    17f6:	468c      	mov	ip, r1
    17f8:	4463      	add	r3, ip
    17fa:	2102      	movs	r1, #2
    17fc:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    17fe:	68a3      	ldr	r3, [r4, #8]
    1800:	18c1      	adds	r1, r0, r3
    1802:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    1804:	6863      	ldr	r3, [r4, #4]
    1806:	4299      	cmp	r1, r3
    1808:	d24a      	bcs.n	18a0 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    180a:	1a5b      	subs	r3, r3, r1
    180c:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    180e:	7ce2      	ldrb	r2, [r4, #19]
    1810:	0692      	lsls	r2, r2, #26
    1812:	d535      	bpl.n	1880 <_usb_d_dev_in_next+0xc8>
    1814:	8a22      	ldrh	r2, [r4, #16]
    1816:	1c10      	adds	r0, r2, #0
    1818:	b292      	uxth	r2, r2
    181a:	429a      	cmp	r2, r3
    181c:	d900      	bls.n	1820 <_usb_d_dev_in_next+0x68>
    181e:	1c18      	adds	r0, r3, #0
    1820:	b283      	uxth	r3, r0
    1822:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1824:	6823      	ldr	r3, [r4, #0]
    1826:	469c      	mov	ip, r3
    1828:	4461      	add	r1, ip
    182a:	4642      	mov	r2, r8
    182c:	68e0      	ldr	r0, [r4, #12]
    182e:	4b46      	ldr	r3, [pc, #280]	; (1948 <_usb_d_dev_in_next+0x190>)
    1830:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1832:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    1834:	016a      	lsls	r2, r5, #5
    1836:	4b41      	ldr	r3, [pc, #260]	; (193c <_usb_d_dev_in_next+0x184>)
    1838:	189b      	adds	r3, r3, r2
    183a:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    183c:	016a      	lsls	r2, r5, #5
    183e:	4b3f      	ldr	r3, [pc, #252]	; (193c <_usb_d_dev_in_next+0x184>)
    1840:	189b      	adds	r3, r3, r2
    1842:	695a      	ldr	r2, [r3, #20]
    1844:	4641      	mov	r1, r8
    1846:	0489      	lsls	r1, r1, #18
    1848:	0c89      	lsrs	r1, r1, #18
    184a:	0b92      	lsrs	r2, r2, #14
    184c:	0392      	lsls	r2, r2, #14
    184e:	430a      	orrs	r2, r1
    1850:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1852:	695a      	ldr	r2, [r3, #20]
    1854:	493d      	ldr	r1, [pc, #244]	; (194c <_usb_d_dev_in_next+0x194>)
    1856:	400a      	ands	r2, r1
    1858:	615a      	str	r2, [r3, #20]
	if (!isr) {
    185a:	2e00      	cmp	r6, #0
    185c:	d107      	bne.n	186e <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    185e:	2f01      	cmp	r7, #1
    1860:	d059      	beq.n	1916 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    1862:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1864:	016b      	lsls	r3, r5, #5
    1866:	493a      	ldr	r1, [pc, #232]	; (1950 <_usb_d_dev_in_next+0x198>)
    1868:	468c      	mov	ip, r1
    186a:	4463      	add	r3, ip
    186c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    186e:	016d      	lsls	r5, r5, #5
    1870:	4b34      	ldr	r3, [pc, #208]	; (1944 <_usb_d_dev_in_next+0x18c>)
    1872:	469c      	mov	ip, r3
    1874:	4465      	add	r5, ip
    1876:	2380      	movs	r3, #128	; 0x80
    1878:	716b      	strb	r3, [r5, #5]
}
    187a:	bc04      	pop	{r2}
    187c:	4690      	mov	r8, r2
    187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1880:	1c1a      	adds	r2, r3, #0
    1882:	2080      	movs	r0, #128	; 0x80
    1884:	0180      	lsls	r0, r0, #6
    1886:	4283      	cmp	r3, r0
    1888:	d901      	bls.n	188e <_usb_d_dev_in_next+0xd6>
    188a:	4b32      	ldr	r3, [pc, #200]	; (1954 <_usb_d_dev_in_next+0x19c>)
    188c:	881a      	ldrh	r2, [r3, #0]
    188e:	b293      	uxth	r3, r2
    1890:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1892:	6823      	ldr	r3, [r4, #0]
    1894:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1896:	016a      	lsls	r2, r5, #5
    1898:	4b28      	ldr	r3, [pc, #160]	; (193c <_usb_d_dev_in_next+0x184>)
    189a:	189b      	adds	r3, r3, r2
    189c:	6119      	str	r1, [r3, #16]
    189e:	e7cd      	b.n	183c <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    18a0:	7ce3      	ldrb	r3, [r4, #19]
    18a2:	06db      	lsls	r3, r3, #27
    18a4:	d50f      	bpl.n	18c6 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    18a6:	7ce3      	ldrb	r3, [r4, #19]
    18a8:	2210      	movs	r2, #16
    18aa:	4393      	bics	r3, r2
    18ac:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    18ae:	016a      	lsls	r2, r5, #5
    18b0:	4b22      	ldr	r3, [pc, #136]	; (193c <_usb_d_dev_in_next+0x184>)
    18b2:	189b      	adds	r3, r3, r2
    18b4:	695a      	ldr	r2, [r3, #20]
    18b6:	0b92      	lsrs	r2, r2, #14
    18b8:	0392      	lsls	r2, r2, #14
    18ba:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    18bc:	695a      	ldr	r2, [r3, #20]
    18be:	4923      	ldr	r1, [pc, #140]	; (194c <_usb_d_dev_in_next+0x194>)
    18c0:	400a      	ands	r2, r1
    18c2:	615a      	str	r2, [r3, #20]
    18c4:	e7c9      	b.n	185a <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    18c6:	2f01      	cmp	r7, #1
    18c8:	d00e      	beq.n	18e8 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    18ca:	016d      	lsls	r5, r5, #5
    18cc:	4b22      	ldr	r3, [pc, #136]	; (1958 <_usb_d_dev_in_next+0x1a0>)
    18ce:	469c      	mov	ip, r3
    18d0:	4465      	add	r5, ip
    18d2:	234a      	movs	r3, #74	; 0x4a
    18d4:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    18d6:	8a21      	ldrh	r1, [r4, #16]
    18d8:	4002      	ands	r2, r0
    18da:	4291      	cmp	r1, r2
    18dc:	d00b      	beq.n	18f6 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    18de:	2100      	movs	r1, #0
    18e0:	0020      	movs	r0, r4
    18e2:	4b1e      	ldr	r3, [pc, #120]	; (195c <_usb_d_dev_in_next+0x1a4>)
    18e4:	4798      	blx	r3
	return;
    18e6:	e7c8      	b.n	187a <_usb_d_dev_in_next+0xc2>
    18e8:	016d      	lsls	r5, r5, #5
    18ea:	4b1b      	ldr	r3, [pc, #108]	; (1958 <_usb_d_dev_in_next+0x1a0>)
    18ec:	469c      	mov	ip, r3
    18ee:	4465      	add	r5, ip
    18f0:	234b      	movs	r3, #75	; 0x4b
    18f2:	702b      	strb	r3, [r5, #0]
    18f4:	e7ef      	b.n	18d6 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    18f6:	7ce3      	ldrb	r3, [r4, #19]
    18f8:	2240      	movs	r2, #64	; 0x40
    18fa:	4393      	bics	r3, r2
    18fc:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    18fe:	7ca0      	ldrb	r0, [r4, #18]
    1900:	4b0e      	ldr	r3, [pc, #56]	; (193c <_usb_d_dev_in_next+0x184>)
    1902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1904:	68a1      	ldr	r1, [r4, #8]
    1906:	4798      	blx	r3
    1908:	2800      	cmp	r0, #0
    190a:	d1b6      	bne.n	187a <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    190c:	7ce3      	ldrb	r3, [r4, #19]
    190e:	2240      	movs	r2, #64	; 0x40
    1910:	4313      	orrs	r3, r2
    1912:	74e3      	strb	r3, [r4, #19]
    1914:	e7e3      	b.n	18de <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1916:	224e      	movs	r2, #78	; 0x4e
    1918:	e7a4      	b.n	1864 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    191a:	7ce7      	ldrb	r7, [r4, #19]
    191c:	2307      	movs	r3, #7
    191e:	401f      	ands	r7, r3
    1920:	4a07      	ldr	r2, [pc, #28]	; (1940 <_usb_d_dev_in_next+0x188>)
    1922:	e766      	b.n	17f2 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1924:	8a03      	ldrh	r3, [r0, #16]
    1926:	4a06      	ldr	r2, [pc, #24]	; (1940 <_usb_d_dev_in_next+0x188>)
    1928:	2000      	movs	r0, #0
    192a:	4293      	cmp	r3, r2
    192c:	d000      	beq.n	1930 <_usb_d_dev_in_next+0x178>
    192e:	e759      	b.n	17e4 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1930:	7ce3      	ldrb	r3, [r4, #19]
    1932:	2707      	movs	r7, #7
    1934:	401f      	ands	r7, r3
    1936:	2000      	movs	r0, #0
    1938:	4a01      	ldr	r2, [pc, #4]	; (1940 <_usb_d_dev_in_next+0x188>)
    193a:	e760      	b.n	17fe <_usb_d_dev_in_next+0x46>
    193c:	2000010c 	.word	0x2000010c
    1940:	000003ff 	.word	0x000003ff
    1944:	41005100 	.word	0x41005100
    1948:	000033cd 	.word	0x000033cd
    194c:	f0003fff 	.word	0xf0003fff
    1950:	41005109 	.word	0x41005109
    1954:	00003468 	.word	0x00003468
    1958:	41005108 	.word	0x41005108
    195c:	000015e1 	.word	0x000015e1

00001960 <_usb_d_dev_out_next>:
{
    1960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1962:	46de      	mov	lr, fp
    1964:	4657      	mov	r7, sl
    1966:	464e      	mov	r6, r9
    1968:	4645      	mov	r5, r8
    196a:	b5e0      	push	{r5, r6, r7, lr}
    196c:	0004      	movs	r4, r0
    196e:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1970:	7c83      	ldrb	r3, [r0, #18]
    1972:	250f      	movs	r5, #15
    1974:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1976:	2900      	cmp	r1, #0
    1978:	d057      	beq.n	1a2a <_usb_d_dev_out_next+0xca>
    197a:	016a      	lsls	r2, r5, #5
    197c:	4b7d      	ldr	r3, [pc, #500]	; (1b74 <_usb_d_dev_out_next+0x214>)
    197e:	189b      	adds	r3, r3, r2
    1980:	685a      	ldr	r2, [r3, #4]
    1982:	0112      	lsls	r2, r2, #4
    1984:	0c92      	lsrs	r2, r2, #18
    1986:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1988:	685f      	ldr	r7, [r3, #4]
    198a:	04bf      	lsls	r7, r7, #18
    198c:	0cbf      	lsrs	r7, r7, #18
    198e:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1990:	8a06      	ldrh	r6, [r0, #16]
    1992:	4b79      	ldr	r3, [pc, #484]	; (1b78 <_usb_d_dev_out_next+0x218>)
    1994:	429e      	cmp	r6, r3
    1996:	d100      	bne.n	199a <_usb_d_dev_out_next+0x3a>
    1998:	e0cd      	b.n	1b36 <_usb_d_dev_out_next+0x1d6>
    199a:	3e01      	subs	r6, #1
    199c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    199e:	465f      	mov	r7, fp
    19a0:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    19a2:	7ce3      	ldrb	r3, [r4, #19]
    19a4:	2207      	movs	r2, #7
    19a6:	401a      	ands	r2, r3
    19a8:	4691      	mov	r9, r2
	if (isr) {
    19aa:	4643      	mov	r3, r8
    19ac:	2b00      	cmp	r3, #0
    19ae:	d005      	beq.n	19bc <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    19b0:	016b      	lsls	r3, r5, #5
    19b2:	4a72      	ldr	r2, [pc, #456]	; (1b7c <_usb_d_dev_out_next+0x21c>)
    19b4:	4694      	mov	ip, r2
    19b6:	4463      	add	r3, ip
    19b8:	2201      	movs	r2, #1
    19ba:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    19bc:	7ce3      	ldrb	r3, [r4, #19]
    19be:	069b      	lsls	r3, r3, #26
    19c0:	d50f      	bpl.n	19e2 <_usb_d_dev_out_next+0x82>
    19c2:	6863      	ldr	r3, [r4, #4]
    19c4:	2b00      	cmp	r3, #0
    19c6:	d039      	beq.n	1a3c <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    19c8:	68a0      	ldr	r0, [r4, #8]
    19ca:	1a1b      	subs	r3, r3, r0
    19cc:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    19ce:	6822      	ldr	r2, [r4, #0]
    19d0:	4694      	mov	ip, r2
    19d2:	4460      	add	r0, ip
    19d4:	68e1      	ldr	r1, [r4, #12]
    19d6:	001a      	movs	r2, r3
    19d8:	42bb      	cmp	r3, r7
    19da:	d900      	bls.n	19de <_usb_d_dev_out_next+0x7e>
    19dc:	003a      	movs	r2, r7
    19de:	4b68      	ldr	r3, [pc, #416]	; (1b80 <_usb_d_dev_out_next+0x220>)
    19e0:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    19e2:	6863      	ldr	r3, [r4, #4]
    19e4:	2b00      	cmp	r3, #0
    19e6:	d029      	beq.n	1a3c <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    19e8:	4642      	mov	r2, r8
    19ea:	2a00      	cmp	r2, #0
    19ec:	d042      	beq.n	1a74 <_usb_d_dev_out_next+0x114>
    19ee:	8a22      	ldrh	r2, [r4, #16]
    19f0:	42ba      	cmp	r2, r7
    19f2:	d93f      	bls.n	1a74 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    19f4:	7ce3      	ldrb	r3, [r4, #19]
    19f6:	2210      	movs	r2, #16
    19f8:	4393      	bics	r3, r2
    19fa:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    19fc:	68a3      	ldr	r3, [r4, #8]
    19fe:	445b      	add	r3, fp
    1a00:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1a02:	464b      	mov	r3, r9
    1a04:	2b01      	cmp	r3, #1
    1a06:	d100      	bne.n	1a0a <_usb_d_dev_out_next+0xaa>
    1a08:	e087      	b.n	1b1a <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1a0a:	016b      	lsls	r3, r5, #5
    1a0c:	4a5d      	ldr	r2, [pc, #372]	; (1b84 <_usb_d_dev_out_next+0x224>)
    1a0e:	4694      	mov	ip, r2
    1a10:	4463      	add	r3, ip
    1a12:	2225      	movs	r2, #37	; 0x25
    1a14:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    1a16:	2d00      	cmp	r5, #0
    1a18:	d102      	bne.n	1a20 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    1a1a:	4b56      	ldr	r3, [pc, #344]	; (1b74 <_usb_d_dev_out_next+0x214>)
    1a1c:	68e2      	ldr	r2, [r4, #12]
    1a1e:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1a20:	2100      	movs	r1, #0
    1a22:	0020      	movs	r0, r4
    1a24:	4b58      	ldr	r3, [pc, #352]	; (1b88 <_usb_d_dev_out_next+0x228>)
    1a26:	4798      	blx	r3
	return;
    1a28:	e059      	b.n	1ade <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1a2a:	8a06      	ldrh	r6, [r0, #16]
    1a2c:	4b52      	ldr	r3, [pc, #328]	; (1b78 <_usb_d_dev_out_next+0x218>)
    1a2e:	429e      	cmp	r6, r3
    1a30:	d100      	bne.n	1a34 <_usb_d_dev_out_next+0xd4>
    1a32:	e08e      	b.n	1b52 <_usb_d_dev_out_next+0x1f2>
    1a34:	2300      	movs	r3, #0
    1a36:	469b      	mov	fp, r3
    1a38:	469a      	mov	sl, r3
    1a3a:	e7ae      	b.n	199a <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1a3c:	7ce3      	ldrb	r3, [r4, #19]
    1a3e:	06db      	lsls	r3, r3, #27
    1a40:	d400      	bmi.n	1a44 <_usb_d_dev_out_next+0xe4>
    1a42:	e07f      	b.n	1b44 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    1a44:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1a46:	2210      	movs	r2, #16
    1a48:	4393      	bics	r3, r2
    1a4a:	2220      	movs	r2, #32
    1a4c:	4313      	orrs	r3, r2
    1a4e:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1a50:	4a48      	ldr	r2, [pc, #288]	; (1b74 <_usb_d_dev_out_next+0x214>)
    1a52:	016b      	lsls	r3, r5, #5
    1a54:	68e1      	ldr	r1, [r4, #12]
    1a56:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1a58:	8a21      	ldrh	r1, [r4, #16]
    1a5a:	18d3      	adds	r3, r2, r3
    1a5c:	685a      	ldr	r2, [r3, #4]
    1a5e:	0489      	lsls	r1, r1, #18
    1a60:	0909      	lsrs	r1, r1, #4
    1a62:	484a      	ldr	r0, [pc, #296]	; (1b8c <_usb_d_dev_out_next+0x22c>)
    1a64:	4002      	ands	r2, r0
    1a66:	430a      	orrs	r2, r1
    1a68:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1a6a:	685a      	ldr	r2, [r3, #4]
    1a6c:	0b92      	lsrs	r2, r2, #14
    1a6e:	0392      	lsls	r2, r2, #14
    1a70:	605a      	str	r2, [r3, #4]
    1a72:	e022      	b.n	1aba <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    1a74:	68a2      	ldr	r2, [r4, #8]
    1a76:	4452      	add	r2, sl
    1a78:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1a7a:	4293      	cmp	r3, r2
    1a7c:	d9c1      	bls.n	1a02 <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    1a7e:	1a9b      	subs	r3, r3, r2
    1a80:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1a82:	7ce1      	ldrb	r1, [r4, #19]
    1a84:	0689      	lsls	r1, r1, #26
    1a86:	d530      	bpl.n	1aea <_usb_d_dev_out_next+0x18a>
    1a88:	8a22      	ldrh	r2, [r4, #16]
    1a8a:	1c11      	adds	r1, r2, #0
    1a8c:	b292      	uxth	r2, r2
    1a8e:	429a      	cmp	r2, r3
    1a90:	d900      	bls.n	1a94 <_usb_d_dev_out_next+0x134>
    1a92:	1c19      	adds	r1, r3, #0
    1a94:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1a96:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1a98:	016a      	lsls	r2, r5, #5
    1a9a:	4936      	ldr	r1, [pc, #216]	; (1b74 <_usb_d_dev_out_next+0x214>)
    1a9c:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1a9e:	016a      	lsls	r2, r5, #5
    1aa0:	4934      	ldr	r1, [pc, #208]	; (1b74 <_usb_d_dev_out_next+0x214>)
    1aa2:	1889      	adds	r1, r1, r2
    1aa4:	684a      	ldr	r2, [r1, #4]
    1aa6:	049b      	lsls	r3, r3, #18
    1aa8:	091b      	lsrs	r3, r3, #4
    1aaa:	4838      	ldr	r0, [pc, #224]	; (1b8c <_usb_d_dev_out_next+0x22c>)
    1aac:	4002      	ands	r2, r0
    1aae:	4313      	orrs	r3, r2
    1ab0:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1ab2:	684b      	ldr	r3, [r1, #4]
    1ab4:	0b9b      	lsrs	r3, r3, #14
    1ab6:	039b      	lsls	r3, r3, #14
    1ab8:	604b      	str	r3, [r1, #4]
	if (!isr) {
    1aba:	4643      	mov	r3, r8
    1abc:	2b00      	cmp	r3, #0
    1abe:	d108      	bne.n	1ad2 <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    1ac0:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    1ac2:	464b      	mov	r3, r9
    1ac4:	2b01      	cmp	r3, #1
    1ac6:	d02f      	beq.n	1b28 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1ac8:	016b      	lsls	r3, r5, #5
    1aca:	4931      	ldr	r1, [pc, #196]	; (1b90 <_usb_d_dev_out_next+0x230>)
    1acc:	468c      	mov	ip, r1
    1ace:	4463      	add	r3, ip
    1ad0:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1ad2:	016d      	lsls	r5, r5, #5
    1ad4:	4b29      	ldr	r3, [pc, #164]	; (1b7c <_usb_d_dev_out_next+0x21c>)
    1ad6:	469c      	mov	ip, r3
    1ad8:	4465      	add	r5, ip
    1ada:	2340      	movs	r3, #64	; 0x40
    1adc:	712b      	strb	r3, [r5, #4]
}
    1ade:	bc3c      	pop	{r2, r3, r4, r5}
    1ae0:	4690      	mov	r8, r2
    1ae2:	4699      	mov	r9, r3
    1ae4:	46a2      	mov	sl, r4
    1ae6:	46ab      	mov	fp, r5
    1ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    1aea:	8a21      	ldrh	r1, [r4, #16]
    1aec:	428b      	cmp	r3, r1
    1aee:	d90a      	bls.n	1b06 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1af0:	2180      	movs	r1, #128	; 0x80
    1af2:	0189      	lsls	r1, r1, #6
    1af4:	428b      	cmp	r3, r1
    1af6:	d80d      	bhi.n	1b14 <_usb_d_dev_out_next+0x1b4>
    1af8:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1afa:	6821      	ldr	r1, [r4, #0]
    1afc:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    1afe:	0169      	lsls	r1, r5, #5
    1b00:	481c      	ldr	r0, [pc, #112]	; (1b74 <_usb_d_dev_out_next+0x214>)
    1b02:	500a      	str	r2, [r1, r0]
    1b04:	e7cb      	b.n	1a9e <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    1b06:	428b      	cmp	r3, r1
    1b08:	d2f7      	bcs.n	1afa <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    1b0a:	7ce1      	ldrb	r1, [r4, #19]
    1b0c:	2020      	movs	r0, #32
    1b0e:	4301      	orrs	r1, r0
    1b10:	74e1      	strb	r1, [r4, #19]
    1b12:	e7f2      	b.n	1afa <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    1b14:	2380      	movs	r3, #128	; 0x80
    1b16:	019b      	lsls	r3, r3, #6
    1b18:	e7ef      	b.n	1afa <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b1a:	016b      	lsls	r3, r5, #5
    1b1c:	4a19      	ldr	r2, [pc, #100]	; (1b84 <_usb_d_dev_out_next+0x224>)
    1b1e:	4694      	mov	ip, r2
    1b20:	4463      	add	r3, ip
    1b22:	222d      	movs	r2, #45	; 0x2d
    1b24:	701a      	strb	r2, [r3, #0]
    1b26:	e776      	b.n	1a16 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    1b28:	016a      	lsls	r2, r5, #5
    1b2a:	4b12      	ldr	r3, [pc, #72]	; (1b74 <_usb_d_dev_out_next+0x214>)
    1b2c:	189b      	adds	r3, r3, r2
    1b2e:	2200      	movs	r2, #0
    1b30:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1b32:	322d      	adds	r2, #45	; 0x2d
    1b34:	e7c8      	b.n	1ac8 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    1b36:	05bf      	lsls	r7, r7, #22
    1b38:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1b3a:	7cc3      	ldrb	r3, [r0, #19]
    1b3c:	2207      	movs	r2, #7
    1b3e:	401a      	ands	r2, r3
    1b40:	4691      	mov	r9, r2
    1b42:	e735      	b.n	19b0 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    1b44:	4643      	mov	r3, r8
    1b46:	2b00      	cmp	r3, #0
    1b48:	d10c      	bne.n	1b64 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    1b4a:	68a3      	ldr	r3, [r4, #8]
    1b4c:	4453      	add	r3, sl
    1b4e:	60a3      	str	r3, [r4, #8]
    1b50:	e757      	b.n	1a02 <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1b52:	7cc3      	ldrb	r3, [r0, #19]
    1b54:	2207      	movs	r2, #7
    1b56:	401a      	ands	r2, r3
    1b58:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    1b5a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1b5c:	2300      	movs	r3, #0
    1b5e:	469b      	mov	fp, r3
    1b60:	469a      	mov	sl, r3
    1b62:	e72b      	b.n	19bc <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1b64:	8a23      	ldrh	r3, [r4, #16]
    1b66:	42bb      	cmp	r3, r7
    1b68:	d900      	bls.n	1b6c <_usb_d_dev_out_next+0x20c>
    1b6a:	e743      	b.n	19f4 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    1b6c:	68a3      	ldr	r3, [r4, #8]
    1b6e:	4453      	add	r3, sl
    1b70:	60a3      	str	r3, [r4, #8]
    1b72:	e746      	b.n	1a02 <_usb_d_dev_out_next+0xa2>
    1b74:	2000010c 	.word	0x2000010c
    1b78:	000003ff 	.word	0x000003ff
    1b7c:	41005100 	.word	0x41005100
    1b80:	000033cd 	.word	0x000033cd
    1b84:	41005108 	.word	0x41005108
    1b88:	000015e1 	.word	0x000015e1
    1b8c:	f0003fff 	.word	0xf0003fff
    1b90:	41005109 	.word	0x41005109

00001b94 <_usb_d_dev_init>:
{
    1b94:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1b96:	4b31      	ldr	r3, [pc, #196]	; (1c5c <_usb_d_dev_init+0xc8>)
    1b98:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1b9a:	07db      	lsls	r3, r3, #31
    1b9c:	d41f      	bmi.n	1bde <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1b9e:	492f      	ldr	r1, [pc, #188]	; (1c5c <_usb_d_dev_init+0xc8>)
    1ba0:	2203      	movs	r2, #3
    1ba2:	788b      	ldrb	r3, [r1, #2]
    1ba4:	4213      	tst	r3, r2
    1ba6:	d1fc      	bne.n	1ba2 <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1ba8:	4b2c      	ldr	r3, [pc, #176]	; (1c5c <_usb_d_dev_init+0xc8>)
    1baa:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1bac:	079b      	lsls	r3, r3, #30
    1bae:	d50e      	bpl.n	1bce <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1bb0:	4a2a      	ldr	r2, [pc, #168]	; (1c5c <_usb_d_dev_init+0xc8>)
    1bb2:	7813      	ldrb	r3, [r2, #0]
    1bb4:	2102      	movs	r1, #2
    1bb6:	438b      	bics	r3, r1
    1bb8:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1bba:	0011      	movs	r1, r2
    1bbc:	2203      	movs	r2, #3
    1bbe:	788b      	ldrb	r3, [r1, #2]
    1bc0:	4213      	tst	r3, r2
    1bc2:	d1fc      	bne.n	1bbe <_usb_d_dev_init+0x2a>
    1bc4:	4925      	ldr	r1, [pc, #148]	; (1c5c <_usb_d_dev_init+0xc8>)
    1bc6:	2202      	movs	r2, #2
    1bc8:	788b      	ldrb	r3, [r1, #2]
    1bca:	4213      	tst	r3, r2
    1bcc:	d1fc      	bne.n	1bc8 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1bce:	2201      	movs	r2, #1
    1bd0:	4b22      	ldr	r3, [pc, #136]	; (1c5c <_usb_d_dev_init+0xc8>)
    1bd2:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1bd4:	0019      	movs	r1, r3
    1bd6:	3202      	adds	r2, #2
    1bd8:	788b      	ldrb	r3, [r1, #2]
    1bda:	4213      	tst	r3, r2
    1bdc:	d1fc      	bne.n	1bd8 <_usb_d_dev_init+0x44>
    1bde:	491f      	ldr	r1, [pc, #124]	; (1c5c <_usb_d_dev_init+0xc8>)
    1be0:	2201      	movs	r2, #1
    1be2:	788b      	ldrb	r3, [r1, #2]
    1be4:	4213      	tst	r3, r2
    1be6:	d1fc      	bne.n	1be2 <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1be8:	4b1d      	ldr	r3, [pc, #116]	; (1c60 <_usb_d_dev_init+0xcc>)
    1bea:	4a1e      	ldr	r2, [pc, #120]	; (1c64 <_usb_d_dev_init+0xd0>)
    1bec:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1bee:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1bf0:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1bf2:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1bf4:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1bf6:	4b1c      	ldr	r3, [pc, #112]	; (1c68 <_usb_d_dev_init+0xd4>)
    1bf8:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1bfa:	4b1c      	ldr	r3, [pc, #112]	; (1c6c <_usb_d_dev_init+0xd8>)
    1bfc:	681b      	ldr	r3, [r3, #0]
    1bfe:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    1c00:	211f      	movs	r1, #31
    1c02:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    1c04:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    1c06:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1c08:	019b      	lsls	r3, r3, #6
    1c0a:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    1c0c:	2a1f      	cmp	r2, #31
    1c0e:	d01f      	beq.n	1c50 <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    1c10:	291f      	cmp	r1, #31
    1c12:	d01f      	beq.n	1c54 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    1c14:	2b07      	cmp	r3, #7
    1c16:	d01f      	beq.n	1c58 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1c18:	0192      	lsls	r2, r2, #6
    1c1a:	430a      	orrs	r2, r1
    1c1c:	031b      	lsls	r3, r3, #12
    1c1e:	4313      	orrs	r3, r2
    1c20:	4a0e      	ldr	r2, [pc, #56]	; (1c5c <_usb_d_dev_init+0xc8>)
    1c22:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1c24:	78d3      	ldrb	r3, [r2, #3]
    1c26:	2103      	movs	r1, #3
    1c28:	430b      	orrs	r3, r1
    1c2a:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1c2c:	78d3      	ldrb	r3, [r2, #3]
    1c2e:	210c      	movs	r1, #12
    1c30:	430b      	orrs	r3, r1
    1c32:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1c34:	2304      	movs	r3, #4
    1c36:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1c38:	0011      	movs	r1, r2
    1c3a:	2203      	movs	r2, #3
    1c3c:	788b      	ldrb	r3, [r1, #2]
    1c3e:	4213      	tst	r3, r2
    1c40:	d1fc      	bne.n	1c3c <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1c42:	4b06      	ldr	r3, [pc, #24]	; (1c5c <_usb_d_dev_init+0xc8>)
    1c44:	4a06      	ldr	r2, [pc, #24]	; (1c60 <_usb_d_dev_init+0xcc>)
    1c46:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1c48:	2201      	movs	r2, #1
    1c4a:	811a      	strh	r2, [r3, #8]
}
    1c4c:	2000      	movs	r0, #0
    1c4e:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    1c50:	3a1a      	subs	r2, #26
    1c52:	e7dd      	b.n	1c10 <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    1c54:	3902      	subs	r1, #2
    1c56:	e7dd      	b.n	1c14 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    1c58:	3b02      	subs	r3, #2
    1c5a:	e7dd      	b.n	1c18 <_usb_d_dev_init+0x84>
    1c5c:	41005000 	.word	0x41005000
    1c60:	2000010c 	.word	0x2000010c
    1c64:	00001521 	.word	0x00001521
    1c68:	00001775 	.word	0x00001775
    1c6c:	00806024 	.word	0x00806024

00001c70 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1c70:	4b10      	ldr	r3, [pc, #64]	; (1cb4 <_usb_d_dev_enable+0x44>)
    1c72:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1c74:	079b      	lsls	r3, r3, #30
    1c76:	d11a      	bne.n	1cae <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1c78:	490e      	ldr	r1, [pc, #56]	; (1cb4 <_usb_d_dev_enable+0x44>)
    1c7a:	2203      	movs	r2, #3
    1c7c:	788b      	ldrb	r3, [r1, #2]
    1c7e:	4213      	tst	r3, r2
    1c80:	d1fc      	bne.n	1c7c <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1c82:	4b0c      	ldr	r3, [pc, #48]	; (1cb4 <_usb_d_dev_enable+0x44>)
    1c84:	781b      	ldrb	r3, [r3, #0]
    1c86:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    1c88:	079a      	lsls	r2, r3, #30
    1c8a:	d408      	bmi.n	1c9e <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1c8c:	2202      	movs	r2, #2
    1c8e:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1c90:	4a08      	ldr	r2, [pc, #32]	; (1cb4 <_usb_d_dev_enable+0x44>)
    1c92:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1c94:	0011      	movs	r1, r2
    1c96:	2203      	movs	r2, #3
    1c98:	788b      	ldrb	r3, [r1, #2]
    1c9a:	4213      	tst	r3, r2
    1c9c:	d1fc      	bne.n	1c98 <_usb_d_dev_enable+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c9e:	2280      	movs	r2, #128	; 0x80
    1ca0:	4b05      	ldr	r3, [pc, #20]	; (1cb8 <_usb_d_dev_enable+0x48>)
    1ca2:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1ca4:	4a05      	ldr	r2, [pc, #20]	; (1cbc <_usb_d_dev_enable+0x4c>)
    1ca6:	4b03      	ldr	r3, [pc, #12]	; (1cb4 <_usb_d_dev_enable+0x44>)
    1ca8:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1caa:	2000      	movs	r0, #0
}
    1cac:	4770      	bx	lr
		return -USB_ERR_DENIED;
    1cae:	2011      	movs	r0, #17
    1cb0:	4240      	negs	r0, r0
    1cb2:	e7fb      	b.n	1cac <_usb_d_dev_enable+0x3c>
    1cb4:	41005000 	.word	0x41005000
    1cb8:	e000e100 	.word	0xe000e100
    1cbc:	0000028d 	.word	0x0000028d

00001cc0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1cc0:	4a02      	ldr	r2, [pc, #8]	; (1ccc <_usb_d_dev_attach+0xc>)
    1cc2:	8913      	ldrh	r3, [r2, #8]
    1cc4:	2101      	movs	r1, #1
    1cc6:	438b      	bics	r3, r1
    1cc8:	8113      	strh	r3, [r2, #8]
}
    1cca:	4770      	bx	lr
    1ccc:	41005000 	.word	0x41005000

00001cd0 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    1cd0:	2380      	movs	r3, #128	; 0x80
    1cd2:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1cd4:	4b01      	ldr	r3, [pc, #4]	; (1cdc <_usb_d_dev_set_address+0xc>)
    1cd6:	7298      	strb	r0, [r3, #10]
}
    1cd8:	4770      	bx	lr
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	41005000 	.word	0x41005000

00001ce0 <_usb_d_dev_ep_init>:
{
    1ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1ce2:	240f      	movs	r4, #15
    1ce4:	4004      	ands	r4, r0
    1ce6:	b243      	sxtb	r3, r0
    1ce8:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1cea:	2c00      	cmp	r4, #0
    1cec:	d054      	beq.n	1d98 <_usb_d_dev_ep_init+0xb8>
    1cee:	0025      	movs	r5, r4
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	db07      	blt.n	1d04 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1cf4:	2303      	movs	r3, #3
    1cf6:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1cf8:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    1cfa:	2c02      	cmp	r4, #2
    1cfc:	d950      	bls.n	1da0 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    1cfe:	2012      	movs	r0, #18
    1d00:	4240      	negs	r0, r0
    1d02:	e025      	b.n	1d50 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1d04:	1ca5      	adds	r5, r4, #2
    1d06:	e7f5      	b.n	1cf4 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1d08:	4663      	mov	r3, ip
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	db21      	blt.n	1d52 <_usb_d_dev_ep_init+0x72>
    1d0e:	007b      	lsls	r3, r7, #1
    1d10:	19db      	adds	r3, r3, r7
    1d12:	009b      	lsls	r3, r3, #2
    1d14:	4c3b      	ldr	r4, [pc, #236]	; (1e04 <_usb_d_dev_ep_init+0x124>)
    1d16:	591b      	ldr	r3, [r3, r4]
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d166      	bne.n	1dea <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1d1c:	007b      	lsls	r3, r7, #1
    1d1e:	19df      	adds	r7, r3, r7
    1d20:	00bf      	lsls	r7, r7, #2
    1d22:	4b38      	ldr	r3, [pc, #224]	; (1e04 <_usb_d_dev_ep_init+0x124>)
    1d24:	58ff      	ldr	r7, [r7, r3]
    1d26:	4b38      	ldr	r3, [pc, #224]	; (1e08 <_usb_d_dev_ep_init+0x128>)
    1d28:	00ae      	lsls	r6, r5, #2
    1d2a:	1974      	adds	r4, r6, r5
    1d2c:	00a4      	lsls	r4, r4, #2
    1d2e:	191c      	adds	r4, r3, r4
    1d30:	3480      	adds	r4, #128	; 0x80
    1d32:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    1d34:	3360      	adds	r3, #96	; 0x60
    1d36:	1974      	adds	r4, r6, r5
    1d38:	00a4      	lsls	r4, r4, #2
    1d3a:	191c      	adds	r4, r3, r4
    1d3c:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    1d3e:	3427      	adds	r4, #39	; 0x27
    1d40:	3101      	adds	r1, #1
    1d42:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    1d44:	1975      	adds	r5, r6, r5
    1d46:	00ad      	lsls	r5, r5, #2
    1d48:	195b      	adds	r3, r3, r5
    1d4a:	3326      	adds	r3, #38	; 0x26
    1d4c:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    1d4e:	2000      	movs	r0, #0
}
    1d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1d52:	007b      	lsls	r3, r7, #1
    1d54:	19db      	adds	r3, r3, r7
    1d56:	009b      	lsls	r3, r3, #2
    1d58:	4c2a      	ldr	r4, [pc, #168]	; (1e04 <_usb_d_dev_ep_init+0x124>)
    1d5a:	18e3      	adds	r3, r4, r3
    1d5c:	685b      	ldr	r3, [r3, #4]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d106      	bne.n	1d70 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1d62:	007b      	lsls	r3, r7, #1
    1d64:	19df      	adds	r7, r3, r7
    1d66:	00bf      	lsls	r7, r7, #2
    1d68:	4b26      	ldr	r3, [pc, #152]	; (1e04 <_usb_d_dev_ep_init+0x124>)
    1d6a:	19df      	adds	r7, r3, r7
    1d6c:	687f      	ldr	r7, [r7, #4]
    1d6e:	e7da      	b.n	1d26 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1d70:	007b      	lsls	r3, r7, #1
    1d72:	19db      	adds	r3, r3, r7
    1d74:	009b      	lsls	r3, r3, #2
    1d76:	4c23      	ldr	r4, [pc, #140]	; (1e04 <_usb_d_dev_ep_init+0x124>)
    1d78:	18e3      	adds	r3, r4, r3
    1d7a:	895b      	ldrh	r3, [r3, #10]
    1d7c:	4293      	cmp	r3, r2
    1d7e:	daf0      	bge.n	1d62 <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    1d80:	2013      	movs	r0, #19
    1d82:	4240      	negs	r0, r0
    1d84:	e7e4      	b.n	1d50 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    1d86:	2014      	movs	r0, #20
    1d88:	4240      	negs	r0, r0
    1d8a:	e7e1      	b.n	1d50 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    1d8c:	2014      	movs	r0, #20
    1d8e:	4240      	negs	r0, r0
    1d90:	e7de      	b.n	1d50 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    1d92:	2013      	movs	r0, #19
    1d94:	4240      	negs	r0, r0
    1d96:	e7db      	b.n	1d50 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1d98:	2303      	movs	r3, #3
    1d9a:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    1d9c:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1d9e:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    1da0:	00ab      	lsls	r3, r5, #2
    1da2:	195b      	adds	r3, r3, r5
    1da4:	009e      	lsls	r6, r3, #2
    1da6:	4b18      	ldr	r3, [pc, #96]	; (1e08 <_usb_d_dev_ep_init+0x128>)
    1da8:	199b      	adds	r3, r3, r6
    1daa:	3386      	adds	r3, #134	; 0x86
    1dac:	781b      	ldrb	r3, [r3, #0]
    1dae:	2bff      	cmp	r3, #255	; 0xff
    1db0:	d1e9      	bne.n	1d86 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    1db2:	2900      	cmp	r1, #0
    1db4:	d1a8      	bne.n	1d08 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1db6:	2c00      	cmp	r4, #0
    1db8:	d004      	beq.n	1dc4 <_usb_d_dev_ep_init+0xe4>
    1dba:	4663      	mov	r3, ip
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	db01      	blt.n	1dc4 <_usb_d_dev_ep_init+0xe4>
    1dc0:	3402      	adds	r4, #2
    1dc2:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    1dc4:	00a3      	lsls	r3, r4, #2
    1dc6:	191b      	adds	r3, r3, r4
    1dc8:	009b      	lsls	r3, r3, #2
    1dca:	4c0f      	ldr	r4, [pc, #60]	; (1e08 <_usb_d_dev_ep_init+0x128>)
    1dcc:	18e4      	adds	r4, r4, r3
    1dce:	3486      	adds	r4, #134	; 0x86
    1dd0:	7823      	ldrb	r3, [r4, #0]
    1dd2:	2bff      	cmp	r3, #255	; 0xff
    1dd4:	d1da      	bne.n	1d8c <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    1dd6:	007b      	lsls	r3, r7, #1
    1dd8:	19db      	adds	r3, r3, r7
    1dda:	009b      	lsls	r3, r3, #2
    1ddc:	4c09      	ldr	r4, [pc, #36]	; (1e04 <_usb_d_dev_ep_init+0x124>)
    1dde:	591b      	ldr	r3, [r3, r4]
    1de0:	2b00      	cmp	r3, #0
    1de2:	d0d6      	beq.n	1d92 <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1de4:	4663      	mov	r3, ip
    1de6:	2b00      	cmp	r3, #0
    1de8:	dbb3      	blt.n	1d52 <_usb_d_dev_ep_init+0x72>
    1dea:	007b      	lsls	r3, r7, #1
    1dec:	19db      	adds	r3, r3, r7
    1dee:	009b      	lsls	r3, r3, #2
    1df0:	4c04      	ldr	r4, [pc, #16]	; (1e04 <_usb_d_dev_ep_init+0x124>)
    1df2:	18e3      	adds	r3, r4, r3
    1df4:	891b      	ldrh	r3, [r3, #8]
    1df6:	4293      	cmp	r3, r2
    1df8:	db00      	blt.n	1dfc <_usb_d_dev_ep_init+0x11c>
    1dfa:	e78f      	b.n	1d1c <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    1dfc:	2013      	movs	r0, #19
    1dfe:	4240      	negs	r0, r0
    1e00:	e7a6      	b.n	1d50 <_usb_d_dev_ep_init+0x70>
    1e02:	46c0      	nop			; (mov r8, r8)
    1e04:	0000346c 	.word	0x0000346c
    1e08:	2000010c 	.word	0x2000010c

00001e0c <_usb_d_dev_ep_deinit>:
{
    1e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e0e:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    1e10:	240f      	movs	r4, #15
    1e12:	4004      	ands	r4, r0
    1e14:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e16:	2c00      	cmp	r4, #0
    1e18:	d010      	beq.n	1e3c <_usb_d_dev_ep_deinit+0x30>
    1e1a:	0020      	movs	r0, r4
    1e1c:	2f00      	cmp	r7, #0
    1e1e:	db02      	blt.n	1e26 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1e20:	2c02      	cmp	r4, #2
    1e22:	d902      	bls.n	1e2a <_usb_d_dev_ep_deinit+0x1e>
}
    1e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e26:	1ca0      	adds	r0, r4, #2
    1e28:	e7fa      	b.n	1e20 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    1e2a:	0006      	movs	r6, r0
    1e2c:	3001      	adds	r0, #1
    1e2e:	0083      	lsls	r3, r0, #2
    1e30:	1818      	adds	r0, r3, r0
    1e32:	0080      	lsls	r0, r0, #2
    1e34:	4b25      	ldr	r3, [pc, #148]	; (1ecc <_usb_d_dev_ep_deinit+0xc0>)
    1e36:	3360      	adds	r3, #96	; 0x60
    1e38:	1818      	adds	r0, r3, r0
    1e3a:	e002      	b.n	1e42 <_usb_d_dev_ep_deinit+0x36>
    1e3c:	4823      	ldr	r0, [pc, #140]	; (1ecc <_usb_d_dev_ep_deinit+0xc0>)
    1e3e:	3074      	adds	r0, #116	; 0x74
    1e40:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1e42:	00b3      	lsls	r3, r6, #2
    1e44:	199b      	adds	r3, r3, r6
    1e46:	009a      	lsls	r2, r3, #2
    1e48:	4b20      	ldr	r3, [pc, #128]	; (1ecc <_usb_d_dev_ep_deinit+0xc0>)
    1e4a:	189b      	adds	r3, r3, r2
    1e4c:	3386      	adds	r3, #134	; 0x86
    1e4e:	781b      	ldrb	r3, [r3, #0]
    1e50:	2bff      	cmp	r3, #255	; 0xff
    1e52:	d0e7      	beq.n	1e24 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    1e54:	0ff9      	lsrs	r1, r7, #31
    1e56:	2203      	movs	r2, #3
    1e58:	4b1d      	ldr	r3, [pc, #116]	; (1ed0 <_usb_d_dev_ep_deinit+0xc4>)
    1e5a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1e5c:	00b3      	lsls	r3, r6, #2
    1e5e:	199b      	adds	r3, r3, r6
    1e60:	009a      	lsls	r2, r3, #2
    1e62:	4b1a      	ldr	r3, [pc, #104]	; (1ecc <_usb_d_dev_ep_deinit+0xc0>)
    1e64:	189b      	adds	r3, r3, r2
    1e66:	3380      	adds	r3, #128	; 0x80
    1e68:	79da      	ldrb	r2, [r3, #7]
    1e6a:	2307      	movs	r3, #7
    1e6c:	4013      	ands	r3, r2
    1e6e:	2b01      	cmp	r3, #1
    1e70:	d01b      	beq.n	1eaa <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    1e72:	2f00      	cmp	r7, #0
    1e74:	db1f      	blt.n	1eb6 <_usb_d_dev_ep_deinit+0xaa>
    1e76:	016d      	lsls	r5, r5, #5
    1e78:	4b16      	ldr	r3, [pc, #88]	; (1ed4 <_usb_d_dev_ep_deinit+0xc8>)
    1e7a:	469c      	mov	ip, r3
    1e7c:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    1e7e:	2280      	movs	r2, #128	; 0x80
    1e80:	0052      	lsls	r2, r2, #1
    1e82:	5cab      	ldrb	r3, [r5, r2]
    1e84:	2107      	movs	r1, #7
    1e86:	438b      	bics	r3, r1
    1e88:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    1e8a:	4b10      	ldr	r3, [pc, #64]	; (1ecc <_usb_d_dev_ep_deinit+0xc0>)
    1e8c:	3360      	adds	r3, #96	; 0x60
    1e8e:	00b1      	lsls	r1, r6, #2
    1e90:	198a      	adds	r2, r1, r6
    1e92:	0092      	lsls	r2, r2, #2
    1e94:	189a      	adds	r2, r3, r2
    1e96:	3227      	adds	r2, #39	; 0x27
    1e98:	2000      	movs	r0, #0
    1e9a:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    1e9c:	198e      	adds	r6, r1, r6
    1e9e:	00b6      	lsls	r6, r6, #2
    1ea0:	199b      	adds	r3, r3, r6
    1ea2:	3326      	adds	r3, #38	; 0x26
    1ea4:	22ff      	movs	r2, #255	; 0xff
    1ea6:	701a      	strb	r2, [r3, #0]
    1ea8:	e7bc      	b.n	1e24 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    1eaa:	3508      	adds	r5, #8
    1eac:	016d      	lsls	r5, r5, #5
    1eae:	2200      	movs	r2, #0
    1eb0:	4b08      	ldr	r3, [pc, #32]	; (1ed4 <_usb_d_dev_ep_deinit+0xc8>)
    1eb2:	54ea      	strb	r2, [r5, r3]
    1eb4:	e7e9      	b.n	1e8a <_usb_d_dev_ep_deinit+0x7e>
    1eb6:	0164      	lsls	r4, r4, #5
    1eb8:	4b06      	ldr	r3, [pc, #24]	; (1ed4 <_usb_d_dev_ep_deinit+0xc8>)
    1eba:	469c      	mov	ip, r3
    1ebc:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    1ebe:	2280      	movs	r2, #128	; 0x80
    1ec0:	0052      	lsls	r2, r2, #1
    1ec2:	5ca3      	ldrb	r3, [r4, r2]
    1ec4:	2170      	movs	r1, #112	; 0x70
    1ec6:	438b      	bics	r3, r1
    1ec8:	54a3      	strb	r3, [r4, r2]
    1eca:	e7de      	b.n	1e8a <_usb_d_dev_ep_deinit+0x7e>
    1ecc:	2000010c 	.word	0x2000010c
    1ed0:	00001609 	.word	0x00001609
    1ed4:	41005000 	.word	0x41005000

00001ed8 <_usb_d_dev_ep_enable>:
{
    1ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eda:	46c6      	mov	lr, r8
    1edc:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    1ede:	220f      	movs	r2, #15
    1ee0:	4002      	ands	r2, r0
    1ee2:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1ee4:	2a00      	cmp	r2, #0
    1ee6:	d100      	bne.n	1eea <_usb_d_dev_ep_enable+0x12>
    1ee8:	e092      	b.n	2010 <STACK_SIZE+0x10>
    1eea:	0013      	movs	r3, r2
    1eec:	2800      	cmp	r0, #0
    1eee:	db0b      	blt.n	1f08 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1ef0:	0011      	movs	r1, r2
    1ef2:	3208      	adds	r2, #8
    1ef4:	0152      	lsls	r2, r2, #5
    1ef6:	4caa      	ldr	r4, [pc, #680]	; (21a0 <STACK_SIZE+0x1a0>)
    1ef8:	5d15      	ldrb	r5, [r2, r4]
    1efa:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1efc:	2902      	cmp	r1, #2
    1efe:	d800      	bhi.n	1f02 <_usb_d_dev_ep_enable+0x2a>
    1f00:	e08d      	b.n	201e <STACK_SIZE+0x1e>
		return -USB_ERR_PARAM;
    1f02:	2012      	movs	r0, #18
    1f04:	4240      	negs	r0, r0
    1f06:	e0e5      	b.n	20d4 <STACK_SIZE+0xd4>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1f08:	1c93      	adds	r3, r2, #2
    1f0a:	e7f1      	b.n	1ef0 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    1f0c:	3276      	adds	r2, #118	; 0x76
    1f0e:	422a      	tst	r2, r5
    1f10:	d175      	bne.n	1ffe <_usb_d_dev_ep_enable+0x126>
    1f12:	4aa3      	ldr	r2, [pc, #652]	; (21a0 <STACK_SIZE+0x1a0>)
    1f14:	4690      	mov	r8, r2
    1f16:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1f18:	2011      	movs	r0, #17
    1f1a:	2280      	movs	r2, #128	; 0x80
    1f1c:	0052      	lsls	r2, r2, #1
    1f1e:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1f20:	009a      	lsls	r2, r3, #2
    1f22:	18d2      	adds	r2, r2, r3
    1f24:	0095      	lsls	r5, r2, #2
    1f26:	4a9f      	ldr	r2, [pc, #636]	; (21a4 <STACK_SIZE+0x1a4>)
    1f28:	3260      	adds	r2, #96	; 0x60
    1f2a:	1952      	adds	r2, r2, r5
    1f2c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    1f2e:	0395      	lsls	r5, r2, #14
    1f30:	489d      	ldr	r0, [pc, #628]	; (21a8 <STACK_SIZE+0x1a8>)
    1f32:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1f34:	2080      	movs	r0, #128	; 0x80
    1f36:	0080      	lsls	r0, r0, #2
    1f38:	4282      	cmp	r2, r0
    1f3a:	d900      	bls.n	1f3e <_usb_d_dev_ep_enable+0x66>
    1f3c:	e0cd      	b.n	20da <STACK_SIZE+0xda>
    1f3e:	3801      	subs	r0, #1
    1f40:	38ff      	subs	r0, #255	; 0xff
    1f42:	4282      	cmp	r2, r0
    1f44:	d900      	bls.n	1f48 <_usb_d_dev_ep_enable+0x70>
    1f46:	e113      	b.n	2170 <STACK_SIZE+0x170>
    1f48:	2a80      	cmp	r2, #128	; 0x80
    1f4a:	d900      	bls.n	1f4e <_usb_d_dev_ep_enable+0x76>
    1f4c:	e100      	b.n	2150 <STACK_SIZE+0x150>
    1f4e:	2a40      	cmp	r2, #64	; 0x40
    1f50:	d900      	bls.n	1f54 <_usb_d_dev_ep_enable+0x7c>
    1f52:	e115      	b.n	2180 <STACK_SIZE+0x180>
    1f54:	2a20      	cmp	r2, #32
    1f56:	d900      	bls.n	1f5a <_usb_d_dev_ep_enable+0x82>
    1f58:	e102      	b.n	2160 <STACK_SIZE+0x160>
    1f5a:	2a10      	cmp	r2, #16
    1f5c:	d900      	bls.n	1f60 <_usb_d_dev_ep_enable+0x88>
    1f5e:	e117      	b.n	2190 <STACK_SIZE+0x190>
    1f60:	38f8      	subs	r0, #248	; 0xf8
    1f62:	4290      	cmp	r0, r2
    1f64:	4180      	sbcs	r0, r0
    1f66:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1f68:	0706      	lsls	r6, r0, #28
    1f6a:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1f6c:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1f6e:	0495      	lsls	r5, r2, #18
    1f70:	0cad      	lsrs	r5, r5, #18
    1f72:	e0b9      	b.n	20e8 <STACK_SIZE+0xe8>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    1f74:	2270      	movs	r2, #112	; 0x70
    1f76:	422a      	tst	r2, r5
    1f78:	d144      	bne.n	2004 <STACK_SIZE+0x4>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    1f7a:	488a      	ldr	r0, [pc, #552]	; (21a4 <STACK_SIZE+0x1a4>)
    1f7c:	009e      	lsls	r6, r3, #2
    1f7e:	18f2      	adds	r2, r6, r3
    1f80:	0092      	lsls	r2, r2, #2
    1f82:	1882      	adds	r2, r0, r2
    1f84:	3280      	adds	r2, #128	; 0x80
    1f86:	79d2      	ldrb	r2, [r2, #7]
    1f88:	0752      	lsls	r2, r2, #29
    1f8a:	0e52      	lsrs	r2, r2, #25
    1f8c:	4315      	orrs	r5, r2
    1f8e:	4a84      	ldr	r2, [pc, #528]	; (21a0 <STACK_SIZE+0x1a0>)
    1f90:	4694      	mov	ip, r2
    1f92:	4464      	add	r4, ip
    1f94:	2280      	movs	r2, #128	; 0x80
    1f96:	0052      	lsls	r2, r2, #1
    1f98:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1f9a:	3060      	adds	r0, #96	; 0x60
    1f9c:	18f6      	adds	r6, r6, r3
    1f9e:	00b6      	lsls	r6, r6, #2
    1fa0:	1980      	adds	r0, r0, r6
    1fa2:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    1fa4:	0485      	lsls	r5, r0, #18
    1fa6:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1fa8:	3201      	adds	r2, #1
    1faa:	32ff      	adds	r2, #255	; 0xff
    1fac:	2307      	movs	r3, #7
    1fae:	4290      	cmp	r0, r2
    1fb0:	d814      	bhi.n	1fdc <_usb_d_dev_ep_enable+0x104>
    1fb2:	3a01      	subs	r2, #1
    1fb4:	3aff      	subs	r2, #255	; 0xff
    1fb6:	3b01      	subs	r3, #1
    1fb8:	4290      	cmp	r0, r2
    1fba:	d80f      	bhi.n	1fdc <_usb_d_dev_ep_enable+0x104>
    1fbc:	3b01      	subs	r3, #1
    1fbe:	2880      	cmp	r0, #128	; 0x80
    1fc0:	d80c      	bhi.n	1fdc <_usb_d_dev_ep_enable+0x104>
    1fc2:	3b01      	subs	r3, #1
    1fc4:	2840      	cmp	r0, #64	; 0x40
    1fc6:	d809      	bhi.n	1fdc <_usb_d_dev_ep_enable+0x104>
    1fc8:	3b01      	subs	r3, #1
    1fca:	2820      	cmp	r0, #32
    1fcc:	d806      	bhi.n	1fdc <_usb_d_dev_ep_enable+0x104>
    1fce:	3b01      	subs	r3, #1
    1fd0:	2810      	cmp	r0, #16
    1fd2:	d803      	bhi.n	1fdc <_usb_d_dev_ep_enable+0x104>
    1fd4:	3af8      	subs	r2, #248	; 0xf8
    1fd6:	4282      	cmp	r2, r0
    1fd8:	4192      	sbcs	r2, r2
    1fda:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1fdc:	071b      	lsls	r3, r3, #28
    1fde:	432b      	orrs	r3, r5
    1fe0:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1fe2:	2280      	movs	r2, #128	; 0x80
    1fe4:	2382      	movs	r3, #130	; 0x82
    1fe6:	005b      	lsls	r3, r3, #1
    1fe8:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    1fea:	0149      	lsls	r1, r1, #5
    1fec:	4b6d      	ldr	r3, [pc, #436]	; (21a4 <STACK_SIZE+0x1a4>)
    1fee:	1859      	adds	r1, r3, r1
    1ff0:	2300      	movs	r3, #0
    1ff2:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    1ff4:	2000      	movs	r0, #0
    1ff6:	e06d      	b.n	20d4 <STACK_SIZE+0xd4>
		return -USB_ERR_PARAM;
    1ff8:	2012      	movs	r0, #18
    1ffa:	4240      	negs	r0, r0
    1ffc:	e06a      	b.n	20d4 <STACK_SIZE+0xd4>
			return -USB_ERR_REDO;
    1ffe:	2014      	movs	r0, #20
    2000:	4240      	negs	r0, r0
    2002:	e067      	b.n	20d4 <STACK_SIZE+0xd4>
			return -USB_ERR_REDO;
    2004:	2014      	movs	r0, #20
    2006:	4240      	negs	r0, r0
    2008:	e064      	b.n	20d4 <STACK_SIZE+0xd4>
			return -USB_ERR_REDO;
    200a:	2014      	movs	r0, #20
    200c:	4240      	negs	r0, r0
    200e:	e061      	b.n	20d4 <STACK_SIZE+0xd4>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2010:	2380      	movs	r3, #128	; 0x80
    2012:	005b      	lsls	r3, r3, #1
    2014:	4a62      	ldr	r2, [pc, #392]	; (21a0 <STACK_SIZE+0x1a0>)
    2016:	5cd5      	ldrb	r5, [r2, r3]
    2018:	b2ed      	uxtb	r5, r5
    201a:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    201c:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    201e:	009a      	lsls	r2, r3, #2
    2020:	18d2      	adds	r2, r2, r3
    2022:	0094      	lsls	r4, r2, #2
    2024:	4a5f      	ldr	r2, [pc, #380]	; (21a4 <STACK_SIZE+0x1a4>)
    2026:	1912      	adds	r2, r2, r4
    2028:	3286      	adds	r2, #134	; 0x86
    202a:	7812      	ldrb	r2, [r2, #0]
    202c:	4694      	mov	ip, r2
    202e:	2aff      	cmp	r2, #255	; 0xff
    2030:	d0e2      	beq.n	1ff8 <_usb_d_dev_ep_enable+0x120>
    2032:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2034:	4a5b      	ldr	r2, [pc, #364]	; (21a4 <STACK_SIZE+0x1a4>)
    2036:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2038:	009e      	lsls	r6, r3, #2
    203a:	18f6      	adds	r6, r6, r3
    203c:	00b6      	lsls	r6, r6, #2
    203e:	1992      	adds	r2, r2, r6
    2040:	3280      	adds	r2, #128	; 0x80
    2042:	79d6      	ldrb	r6, [r2, #7]
    2044:	2207      	movs	r2, #7
    2046:	4032      	ands	r2, r6
    2048:	2a01      	cmp	r2, #1
    204a:	d100      	bne.n	204e <STACK_SIZE+0x4e>
    204c:	e75e      	b.n	1f0c <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    204e:	2800      	cmp	r0, #0
    2050:	db90      	blt.n	1f74 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    2052:	076a      	lsls	r2, r5, #29
    2054:	d1d9      	bne.n	200a <STACK_SIZE+0xa>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    2056:	4853      	ldr	r0, [pc, #332]	; (21a4 <STACK_SIZE+0x1a4>)
    2058:	009e      	lsls	r6, r3, #2
    205a:	18f2      	adds	r2, r6, r3
    205c:	0092      	lsls	r2, r2, #2
    205e:	1882      	adds	r2, r0, r2
    2060:	3280      	adds	r2, #128	; 0x80
    2062:	79d2      	ldrb	r2, [r2, #7]
    2064:	0752      	lsls	r2, r2, #29
    2066:	0f52      	lsrs	r2, r2, #29
    2068:	4315      	orrs	r5, r2
    206a:	4a4d      	ldr	r2, [pc, #308]	; (21a0 <STACK_SIZE+0x1a0>)
    206c:	4694      	mov	ip, r2
    206e:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2070:	2280      	movs	r2, #128	; 0x80
    2072:	0052      	lsls	r2, r2, #1
    2074:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2076:	3060      	adds	r0, #96	; 0x60
    2078:	18f6      	adds	r6, r6, r3
    207a:	00b6      	lsls	r6, r6, #2
    207c:	1980      	adds	r0, r0, r6
    207e:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    2080:	03ab      	lsls	r3, r5, #14
    2082:	4849      	ldr	r0, [pc, #292]	; (21a8 <STACK_SIZE+0x1a8>)
    2084:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2086:	3201      	adds	r2, #1
    2088:	32ff      	adds	r2, #255	; 0xff
    208a:	2307      	movs	r3, #7
    208c:	4295      	cmp	r5, r2
    208e:	d814      	bhi.n	20ba <STACK_SIZE+0xba>
    2090:	3a01      	subs	r2, #1
    2092:	3aff      	subs	r2, #255	; 0xff
    2094:	3b01      	subs	r3, #1
    2096:	4295      	cmp	r5, r2
    2098:	d80f      	bhi.n	20ba <STACK_SIZE+0xba>
    209a:	3b01      	subs	r3, #1
    209c:	2d80      	cmp	r5, #128	; 0x80
    209e:	d80c      	bhi.n	20ba <STACK_SIZE+0xba>
    20a0:	3b01      	subs	r3, #1
    20a2:	2d40      	cmp	r5, #64	; 0x40
    20a4:	d809      	bhi.n	20ba <STACK_SIZE+0xba>
    20a6:	3b01      	subs	r3, #1
    20a8:	2d20      	cmp	r5, #32
    20aa:	d806      	bhi.n	20ba <STACK_SIZE+0xba>
    20ac:	3b01      	subs	r3, #1
    20ae:	2d10      	cmp	r5, #16
    20b0:	d803      	bhi.n	20ba <STACK_SIZE+0xba>
    20b2:	3af8      	subs	r2, #248	; 0xf8
    20b4:	42aa      	cmp	r2, r5
    20b6:	4192      	sbcs	r2, r2
    20b8:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20ba:	071b      	lsls	r3, r3, #28
    20bc:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    20be:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    20c0:	2240      	movs	r2, #64	; 0x40
    20c2:	2306      	movs	r3, #6
    20c4:	33ff      	adds	r3, #255	; 0xff
    20c6:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    20c8:	0149      	lsls	r1, r1, #5
    20ca:	4b36      	ldr	r3, [pc, #216]	; (21a4 <STACK_SIZE+0x1a4>)
    20cc:	1859      	adds	r1, r3, r1
    20ce:	2300      	movs	r3, #0
    20d0:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    20d2:	2000      	movs	r0, #0
}
    20d4:	bc04      	pop	{r2}
    20d6:	4690      	mov	r8, r2
    20d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20da:	20e0      	movs	r0, #224	; 0xe0
    20dc:	05c0      	lsls	r0, r0, #23
    20de:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    20e0:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20e2:	0495      	lsls	r5, r2, #18
    20e4:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    20e6:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20e8:	0700      	lsls	r0, r0, #28
    20ea:	4328      	orrs	r0, r5
    20ec:	6178      	str	r0, [r7, #20]
    20ee:	2506      	movs	r5, #6
    20f0:	35ff      	adds	r5, #255	; 0xff
    20f2:	2640      	movs	r6, #64	; 0x40
    20f4:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    20f6:	2782      	movs	r7, #130	; 0x82
    20f8:	007f      	lsls	r7, r7, #1
    20fa:	2080      	movs	r0, #128	; 0x80
    20fc:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    20fe:	4829      	ldr	r0, [pc, #164]	; (21a4 <STACK_SIZE+0x1a4>)
    2100:	0149      	lsls	r1, r1, #5
    2102:	1841      	adds	r1, r0, r1
    2104:	2400      	movs	r4, #0
    2106:	728c      	strb	r4, [r1, #10]
    2108:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    210a:	340f      	adds	r4, #15
    210c:	4661      	mov	r1, ip
    210e:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2110:	0099      	lsls	r1, r3, #2
    2112:	18c9      	adds	r1, r1, r3
    2114:	0089      	lsls	r1, r1, #2
    2116:	1841      	adds	r1, r0, r1
    2118:	3180      	adds	r1, #128	; 0x80
    211a:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    211c:	0163      	lsls	r3, r4, #5
    211e:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2120:	18c0      	adds	r0, r0, r3
    2122:	6841      	ldr	r1, [r0, #4]
    2124:	0492      	lsls	r2, r2, #18
    2126:	0914      	lsrs	r4, r2, #4
    2128:	4a20      	ldr	r2, [pc, #128]	; (21ac <STACK_SIZE+0x1ac>)
    212a:	400a      	ands	r2, r1
    212c:	4322      	orrs	r2, r4
    212e:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2130:	6842      	ldr	r2, [r0, #4]
    2132:	0b92      	lsrs	r2, r2, #14
    2134:	0392      	lsls	r2, r2, #14
    2136:	6042      	str	r2, [r0, #4]
    2138:	4a19      	ldr	r2, [pc, #100]	; (21a0 <STACK_SIZE+0x1a0>)
    213a:	189a      	adds	r2, r3, r2
    213c:	21b0      	movs	r1, #176	; 0xb0
    213e:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2140:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2142:	4a1b      	ldr	r2, [pc, #108]	; (21b0 <STACK_SIZE+0x1b0>)
    2144:	4694      	mov	ip, r2
    2146:	4463      	add	r3, ip
    2148:	2210      	movs	r2, #16
    214a:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    214c:	2000      	movs	r0, #0
    214e:	e7c1      	b.n	20d4 <STACK_SIZE+0xd4>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2150:	20a0      	movs	r0, #160	; 0xa0
    2152:	05c0      	lsls	r0, r0, #23
    2154:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2156:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2158:	0495      	lsls	r5, r2, #18
    215a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    215c:	2005      	movs	r0, #5
    215e:	e7c3      	b.n	20e8 <STACK_SIZE+0xe8>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2160:	20c0      	movs	r0, #192	; 0xc0
    2162:	0580      	lsls	r0, r0, #22
    2164:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2166:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2168:	0495      	lsls	r5, r2, #18
    216a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    216c:	2003      	movs	r0, #3
    216e:	e7bb      	b.n	20e8 <STACK_SIZE+0xe8>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2170:	20c0      	movs	r0, #192	; 0xc0
    2172:	05c0      	lsls	r0, r0, #23
    2174:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2176:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2178:	0495      	lsls	r5, r2, #18
    217a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    217c:	2006      	movs	r0, #6
    217e:	e7b3      	b.n	20e8 <STACK_SIZE+0xe8>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2180:	2080      	movs	r0, #128	; 0x80
    2182:	05c0      	lsls	r0, r0, #23
    2184:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2186:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2188:	0495      	lsls	r5, r2, #18
    218a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    218c:	2004      	movs	r0, #4
    218e:	e7ab      	b.n	20e8 <STACK_SIZE+0xe8>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2190:	2080      	movs	r0, #128	; 0x80
    2192:	0580      	lsls	r0, r0, #22
    2194:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2196:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2198:	0495      	lsls	r5, r2, #18
    219a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    219c:	2002      	movs	r0, #2
    219e:	e7a3      	b.n	20e8 <STACK_SIZE+0xe8>
    21a0:	41005000 	.word	0x41005000
    21a4:	2000010c 	.word	0x2000010c
    21a8:	0fffc000 	.word	0x0fffc000
    21ac:	f0003fff 	.word	0xf0003fff
    21b0:	41005109 	.word	0x41005109

000021b4 <_usb_d_dev_ep_stall>:
{
    21b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    21b6:	230f      	movs	r3, #15
    21b8:	4003      	ands	r3, r0
    21ba:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    21bc:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    21be:	2b00      	cmp	r3, #0
    21c0:	d009      	beq.n	21d6 <_usb_d_dev_ep_stall+0x22>
    21c2:	001a      	movs	r2, r3
    21c4:	2800      	cmp	r0, #0
    21c6:	db04      	blt.n	21d2 <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    21c8:	2b02      	cmp	r3, #2
    21ca:	d905      	bls.n	21d8 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    21cc:	2012      	movs	r0, #18
    21ce:	4240      	negs	r0, r0
    21d0:	e019      	b.n	2206 <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    21d2:	1c9a      	adds	r2, r3, #2
    21d4:	e7f8      	b.n	21c8 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    21d6:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    21d8:	2901      	cmp	r1, #1
    21da:	d015      	beq.n	2208 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    21dc:	2900      	cmp	r1, #0
    21de:	d036      	beq.n	224e <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    21e0:	0093      	lsls	r3, r2, #2
    21e2:	189b      	adds	r3, r3, r2
    21e4:	009b      	lsls	r3, r3, #2
    21e6:	4a47      	ldr	r2, [pc, #284]	; (2304 <_usb_d_dev_ep_stall+0x150>)
    21e8:	18d2      	adds	r2, r2, r3
    21ea:	3286      	adds	r2, #134	; 0x86
    21ec:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    21ee:	230f      	movs	r3, #15
    21f0:	4013      	ands	r3, r2
    21f2:	015b      	lsls	r3, r3, #5
    21f4:	4a44      	ldr	r2, [pc, #272]	; (2308 <_usb_d_dev_ep_stall+0x154>)
    21f6:	4694      	mov	ip, r2
    21f8:	4463      	add	r3, ip
    21fa:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    21fc:	2310      	movs	r3, #16
    21fe:	40a3      	lsls	r3, r4
    2200:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    2202:	1e43      	subs	r3, r0, #1
    2204:	4198      	sbcs	r0, r3
}
    2206:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2208:	2510      	movs	r5, #16
    220a:	40a5      	lsls	r5, r4
    220c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    220e:	493d      	ldr	r1, [pc, #244]	; (2304 <_usb_d_dev_ep_stall+0x150>)
    2210:	0090      	lsls	r0, r2, #2
    2212:	1883      	adds	r3, r0, r2
    2214:	009b      	lsls	r3, r3, #2
    2216:	18cb      	adds	r3, r1, r3
    2218:	3386      	adds	r3, #134	; 0x86
    221a:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    221c:	230f      	movs	r3, #15
    221e:	4033      	ands	r3, r6
    2220:	015e      	lsls	r6, r3, #5
    2222:	4f39      	ldr	r7, [pc, #228]	; (2308 <_usb_d_dev_ep_stall+0x154>)
    2224:	46bc      	mov	ip, r7
    2226:	4466      	add	r6, ip
    2228:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    222a:	2520      	movs	r5, #32
    222c:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    222e:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2230:	015b      	lsls	r3, r3, #5
    2232:	4d36      	ldr	r5, [pc, #216]	; (230c <_usb_d_dev_ep_stall+0x158>)
    2234:	46ac      	mov	ip, r5
    2236:	4463      	add	r3, ip
    2238:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    223a:	1882      	adds	r2, r0, r2
    223c:	0092      	lsls	r2, r2, #2
    223e:	188a      	adds	r2, r1, r2
    2240:	3280      	adds	r2, #128	; 0x80
    2242:	79d3      	ldrb	r3, [r2, #7]
    2244:	2108      	movs	r1, #8
    2246:	430b      	orrs	r3, r1
    2248:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    224a:	2000      	movs	r0, #0
    224c:	e7db      	b.n	2206 <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    224e:	0093      	lsls	r3, r2, #2
    2250:	189b      	adds	r3, r3, r2
    2252:	0099      	lsls	r1, r3, #2
    2254:	4b2b      	ldr	r3, [pc, #172]	; (2304 <_usb_d_dev_ep_stall+0x150>)
    2256:	185b      	adds	r3, r3, r1
    2258:	3386      	adds	r3, #134	; 0x86
    225a:	781b      	ldrb	r3, [r3, #0]
    225c:	210f      	movs	r1, #15
    225e:	400b      	ands	r3, r1
    2260:	015d      	lsls	r5, r3, #5
    2262:	492b      	ldr	r1, [pc, #172]	; (2310 <_usb_d_dev_ep_stall+0x15c>)
    2264:	468c      	mov	ip, r1
    2266:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2268:	2183      	movs	r1, #131	; 0x83
    226a:	0049      	lsls	r1, r1, #1
    226c:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    226e:	39f6      	subs	r1, #246	; 0xf6
    2270:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2272:	2000      	movs	r0, #0
	if (!is_stalled) {
    2274:	420e      	tst	r6, r1
    2276:	d0c6      	beq.n	2206 <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2278:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    227a:	3005      	adds	r0, #5
    227c:	30ff      	adds	r0, #255	; 0xff
    227e:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2280:	2120      	movs	r1, #32
    2282:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2284:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2286:	015b      	lsls	r3, r3, #5
    2288:	4e22      	ldr	r6, [pc, #136]	; (2314 <_usb_d_dev_ep_stall+0x160>)
    228a:	46b4      	mov	ip, r6
    228c:	4463      	add	r3, ip
    228e:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2290:	2308      	movs	r3, #8
    2292:	33ff      	adds	r3, #255	; 0xff
    2294:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2296:	420b      	tst	r3, r1
    2298:	d009      	beq.n	22ae <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    229a:	2308      	movs	r3, #8
    229c:	33ff      	adds	r3, #255	; 0xff
    229e:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    22a0:	3b07      	subs	r3, #7
    22a2:	3bff      	subs	r3, #255	; 0xff
    22a4:	40a3      	lsls	r3, r4
    22a6:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    22a8:	2182      	movs	r1, #130	; 0x82
    22aa:	0049      	lsls	r1, r1, #1
    22ac:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    22ae:	0093      	lsls	r3, r2, #2
    22b0:	189b      	adds	r3, r3, r2
    22b2:	0099      	lsls	r1, r3, #2
    22b4:	4b13      	ldr	r3, [pc, #76]	; (2304 <_usb_d_dev_ep_stall+0x150>)
    22b6:	185b      	adds	r3, r3, r1
    22b8:	3380      	adds	r3, #128	; 0x80
    22ba:	79d9      	ldrb	r1, [r3, #7]
    22bc:	2307      	movs	r3, #7
    22be:	400b      	ands	r3, r1
    22c0:	2b01      	cmp	r3, #1
    22c2:	d00b      	beq.n	22dc <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    22c4:	0093      	lsls	r3, r2, #2
    22c6:	189a      	adds	r2, r3, r2
    22c8:	0092      	lsls	r2, r2, #2
    22ca:	4b0e      	ldr	r3, [pc, #56]	; (2304 <_usb_d_dev_ep_stall+0x150>)
    22cc:	189b      	adds	r3, r3, r2
    22ce:	3380      	adds	r3, #128	; 0x80
    22d0:	79da      	ldrb	r2, [r3, #7]
    22d2:	2108      	movs	r1, #8
    22d4:	438a      	bics	r2, r1
    22d6:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    22d8:	2000      	movs	r0, #0
    22da:	e794      	b.n	2206 <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    22dc:	3306      	adds	r3, #6
    22de:	33ff      	adds	r3, #255	; 0xff
    22e0:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    22e2:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    22e4:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    22e6:	4219      	tst	r1, r3
    22e8:	d000      	beq.n	22ec <_usb_d_dev_ep_stall+0x138>
    22ea:	e78c      	b.n	2206 <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    22ec:	0093      	lsls	r3, r2, #2
    22ee:	189a      	adds	r2, r3, r2
    22f0:	0092      	lsls	r2, r2, #2
    22f2:	4b04      	ldr	r3, [pc, #16]	; (2304 <_usb_d_dev_ep_stall+0x150>)
    22f4:	189b      	adds	r3, r3, r2
    22f6:	3380      	adds	r3, #128	; 0x80
    22f8:	79da      	ldrb	r2, [r3, #7]
    22fa:	2108      	movs	r1, #8
    22fc:	438a      	bics	r2, r1
    22fe:	71da      	strb	r2, [r3, #7]
    2300:	e781      	b.n	2206 <_usb_d_dev_ep_stall+0x52>
    2302:	46c0      	nop			; (mov r8, r8)
    2304:	2000010c 	.word	0x2000010c
    2308:	41005100 	.word	0x41005100
    230c:	41005109 	.word	0x41005109
    2310:	41005000 	.word	0x41005000
    2314:	41005108 	.word	0x41005108

00002318 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2318:	b570      	push	{r4, r5, r6, lr}
    231a:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    231c:	230f      	movs	r3, #15
    231e:	4018      	ands	r0, r3
    2320:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2322:	4b16      	ldr	r3, [pc, #88]	; (237c <_usb_d_dev_ep_read_req+0x64>)
    2324:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    2326:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2328:	685b      	ldr	r3, [r3, #4]
    232a:	049b      	lsls	r3, r3, #18
    232c:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    232e:	2802      	cmp	r0, #2
    2330:	d81a      	bhi.n	2368 <_usb_d_dev_ep_read_req+0x50>
    2332:	2d00      	cmp	r5, #0
    2334:	d01b      	beq.n	236e <_usb_d_dev_ep_read_req+0x56>
    2336:	4b12      	ldr	r3, [pc, #72]	; (2380 <_usb_d_dev_ep_read_req+0x68>)
    2338:	469c      	mov	ip, r3
    233a:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    233c:	2380      	movs	r3, #128	; 0x80
    233e:	005b      	lsls	r3, r3, #1
    2340:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    2342:	2b11      	cmp	r3, #17
    2344:	d116      	bne.n	2374 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2346:	2308      	movs	r3, #8
    2348:	33ff      	adds	r3, #255	; 0xff
    234a:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    234c:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    234e:	06db      	lsls	r3, r3, #27
    2350:	d400      	bmi.n	2354 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    2352:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    2354:	2208      	movs	r2, #8
    2356:	0028      	movs	r0, r5
    2358:	4b0a      	ldr	r3, [pc, #40]	; (2384 <_usb_d_dev_ep_read_req+0x6c>)
    235a:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    235c:	2210      	movs	r2, #16
    235e:	2308      	movs	r3, #8
    2360:	33ff      	adds	r3, #255	; 0xff
    2362:	54e2      	strb	r2, [r4, r3]
	return bytes;
    2364:	0030      	movs	r0, r6
    2366:	e7f4      	b.n	2352 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    2368:	2012      	movs	r0, #18
    236a:	4240      	negs	r0, r0
    236c:	e7f1      	b.n	2352 <_usb_d_dev_ep_read_req+0x3a>
    236e:	2012      	movs	r0, #18
    2370:	4240      	negs	r0, r0
    2372:	e7ee      	b.n	2352 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    2374:	2013      	movs	r0, #19
    2376:	4240      	negs	r0, r0
    2378:	e7eb      	b.n	2352 <_usb_d_dev_ep_read_req+0x3a>
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	2000010c 	.word	0x2000010c
    2380:	41005000 	.word	0x41005000
    2384:	000033cd 	.word	0x000033cd

00002388 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2388:	b5f0      	push	{r4, r5, r6, r7, lr}
    238a:	46de      	mov	lr, fp
    238c:	4657      	mov	r7, sl
    238e:	464e      	mov	r6, r9
    2390:	4645      	mov	r5, r8
    2392:	b5e0      	push	{r5, r6, r7, lr}
    2394:	b085      	sub	sp, #20
    2396:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2398:	7a06      	ldrb	r6, [r0, #8]
    239a:	230f      	movs	r3, #15
    239c:	4033      	ands	r3, r6
    239e:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    23a0:	2b00      	cmp	r3, #0
    23a2:	d100      	bne.n	23a6 <_usb_d_dev_ep_trans+0x1e>
    23a4:	e0d3      	b.n	254e <_usb_d_dev_ep_trans+0x1c6>
    23a6:	0018      	movs	r0, r3
    23a8:	2e00      	cmp	r6, #0
    23aa:	db39      	blt.n	2420 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    23ac:	0004      	movs	r4, r0
    23ae:	4a73      	ldr	r2, [pc, #460]	; (257c <_usb_d_dev_ep_trans+0x1f4>)
    23b0:	3260      	adds	r2, #96	; 0x60
    23b2:	1c41      	adds	r1, r0, #1
    23b4:	008d      	lsls	r5, r1, #2
    23b6:	186d      	adds	r5, r5, r1
    23b8:	00ad      	lsls	r5, r5, #2
    23ba:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    23bc:	0081      	lsls	r1, r0, #2
    23be:	1809      	adds	r1, r1, r0
    23c0:	0089      	lsls	r1, r1, #2
    23c2:	1852      	adds	r2, r2, r1
    23c4:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    23c6:	4a6e      	ldr	r2, [pc, #440]	; (2580 <_usb_d_dev_ep_trans+0x1f8>)
    23c8:	4291      	cmp	r1, r2
    23ca:	d02b      	beq.n	2424 <_usb_d_dev_ep_trans+0x9c>
    23cc:	1e4f      	subs	r7, r1, #1
    23ce:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    23d0:	4642      	mov	r2, r8
    23d2:	6852      	ldr	r2, [r2, #4]
    23d4:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    23d6:	2b02      	cmp	r3, #2
    23d8:	d900      	bls.n	23dc <_usb_d_dev_ep_trans+0x54>
    23da:	e0a4      	b.n	2526 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    23dc:	4643      	mov	r3, r8
    23de:	681b      	ldr	r3, [r3, #0]
    23e0:	4868      	ldr	r0, [pc, #416]	; (2584 <_usb_d_dev_ep_trans+0x1fc>)
    23e2:	4283      	cmp	r3, r0
    23e4:	d920      	bls.n	2428 <_usb_d_dev_ep_trans+0xa0>
    23e6:	1898      	adds	r0, r3, r2
    23e8:	9001      	str	r0, [sp, #4]
    23ea:	4867      	ldr	r0, [pc, #412]	; (2588 <_usb_d_dev_ep_trans+0x200>)
    23ec:	4684      	mov	ip, r0
    23ee:	9801      	ldr	r0, [sp, #4]
    23f0:	4560      	cmp	r0, ip
    23f2:	d819      	bhi.n	2428 <_usb_d_dev_ep_trans+0xa0>
    23f4:	079b      	lsls	r3, r3, #30
    23f6:	d117      	bne.n	2428 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    23f8:	2e00      	cmp	r6, #0
    23fa:	db32      	blt.n	2462 <_usb_d_dev_ep_trans+0xda>
    23fc:	4291      	cmp	r1, r2
    23fe:	d900      	bls.n	2402 <_usb_d_dev_ep_trans+0x7a>
    2400:	e0af      	b.n	2562 <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2402:	2f00      	cmp	r7, #0
    2404:	d030      	beq.n	2468 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    2406:	00a3      	lsls	r3, r4, #2
    2408:	191b      	adds	r3, r3, r4
    240a:	009a      	lsls	r2, r3, #2
    240c:	4b5b      	ldr	r3, [pc, #364]	; (257c <_usb_d_dev_ep_trans+0x1f4>)
    240e:	189b      	adds	r3, r3, r2
    2410:	3380      	adds	r3, #128	; 0x80
    2412:	681b      	ldr	r3, [r3, #0]
    2414:	2b00      	cmp	r3, #0
    2416:	d100      	bne.n	241a <_usb_d_dev_ep_trans+0x92>
    2418:	e08b      	b.n	2532 <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    241a:	2300      	movs	r3, #0
    241c:	4699      	mov	r9, r3
    241e:	e00f      	b.n	2440 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2420:	1c98      	adds	r0, r3, #2
    2422:	e7c3      	b.n	23ac <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2424:	000f      	movs	r7, r1
    2426:	e7d3      	b.n	23d0 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    2428:	00a3      	lsls	r3, r4, #2
    242a:	191b      	adds	r3, r3, r4
    242c:	009a      	lsls	r2, r3, #2
    242e:	4b53      	ldr	r3, [pc, #332]	; (257c <_usb_d_dev_ep_trans+0x1f4>)
    2430:	189b      	adds	r3, r3, r2
    2432:	3380      	adds	r3, #128	; 0x80
    2434:	681b      	ldr	r3, [r3, #0]
    2436:	2b00      	cmp	r3, #0
    2438:	d100      	bne.n	243c <_usb_d_dev_ep_trans+0xb4>
    243a:	e077      	b.n	252c <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    243c:	2301      	movs	r3, #1
    243e:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2440:	00a3      	lsls	r3, r4, #2
    2442:	191b      	adds	r3, r3, r4
    2444:	009a      	lsls	r2, r3, #2
    2446:	4b4d      	ldr	r3, [pc, #308]	; (257c <_usb_d_dev_ep_trans+0x1f4>)
    2448:	189b      	adds	r3, r3, r2
    244a:	3380      	adds	r3, #128	; 0x80
    244c:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    244e:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    2450:	071b      	lsls	r3, r3, #28
    2452:	d50c      	bpl.n	246e <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2454:	b005      	add	sp, #20
    2456:	bc3c      	pop	{r2, r3, r4, r5}
    2458:	4690      	mov	r8, r2
    245a:	4699      	mov	r9, r3
    245c:	46a2      	mov	sl, r4
    245e:	46ab      	mov	fp, r5
    2460:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    2462:	2300      	movs	r3, #0
    2464:	4699      	mov	r9, r3
    2466:	e7eb      	b.n	2440 <_usb_d_dev_ep_trans+0xb8>
    2468:	2300      	movs	r3, #0
    246a:	4699      	mov	r9, r3
    246c:	e7e8      	b.n	2440 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    246e:	a803      	add	r0, sp, #12
    2470:	4b46      	ldr	r3, [pc, #280]	; (258c <_usb_d_dev_ep_trans+0x204>)
    2472:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2474:	00a3      	lsls	r3, r4, #2
    2476:	191b      	adds	r3, r3, r4
    2478:	009a      	lsls	r2, r3, #2
    247a:	4b40      	ldr	r3, [pc, #256]	; (257c <_usb_d_dev_ep_trans+0x1f4>)
    247c:	189b      	adds	r3, r3, r2
    247e:	3380      	adds	r3, #128	; 0x80
    2480:	79db      	ldrb	r3, [r3, #7]
    2482:	065b      	lsls	r3, r3, #25
    2484:	d444      	bmi.n	2510 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    2486:	00a3      	lsls	r3, r4, #2
    2488:	191b      	adds	r3, r3, r4
    248a:	009b      	lsls	r3, r3, #2
    248c:	4a3b      	ldr	r2, [pc, #236]	; (257c <_usb_d_dev_ep_trans+0x1f4>)
    248e:	4693      	mov	fp, r2
    2490:	449b      	add	fp, r3
    2492:	2380      	movs	r3, #128	; 0x80
    2494:	445b      	add	r3, fp
    2496:	469a      	mov	sl, r3
    2498:	79db      	ldrb	r3, [r3, #7]
    249a:	2240      	movs	r2, #64	; 0x40
    249c:	4313      	orrs	r3, r2
    249e:	4652      	mov	r2, sl
    24a0:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    24a2:	a803      	add	r0, sp, #12
    24a4:	4b3a      	ldr	r3, [pc, #232]	; (2590 <_usb_d_dev_ep_trans+0x208>)
    24a6:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    24a8:	465b      	mov	r3, fp
    24aa:	4642      	mov	r2, r8
    24ac:	6812      	ldr	r2, [r2, #0]
    24ae:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    24b0:	4642      	mov	r2, r8
    24b2:	6852      	ldr	r2, [r2, #4]
    24b4:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    24b6:	2300      	movs	r3, #0
    24b8:	465a      	mov	r2, fp
    24ba:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    24bc:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    24be:	01d2      	lsls	r2, r2, #7
    24c0:	4653      	mov	r3, sl
    24c2:	79d9      	ldrb	r1, [r3, #7]
    24c4:	237f      	movs	r3, #127	; 0x7f
    24c6:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    24c8:	4649      	mov	r1, r9
    24ca:	0149      	lsls	r1, r1, #5
    24cc:	4313      	orrs	r3, r2
    24ce:	2220      	movs	r2, #32
    24d0:	4393      	bics	r3, r2
    24d2:	430b      	orrs	r3, r1
    24d4:	4652      	mov	r2, sl
    24d6:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    24d8:	4643      	mov	r3, r8
    24da:	7a5b      	ldrb	r3, [r3, #9]
    24dc:	2200      	movs	r2, #0
    24de:	2b00      	cmp	r3, #0
    24e0:	d002      	beq.n	24e8 <_usb_d_dev_ep_trans+0x160>
    24e2:	427a      	negs	r2, r7
    24e4:	417a      	adcs	r2, r7
    24e6:	b2d2      	uxtb	r2, r2
    24e8:	00a3      	lsls	r3, r4, #2
    24ea:	191c      	adds	r4, r3, r4
    24ec:	00a4      	lsls	r4, r4, #2
    24ee:	4b23      	ldr	r3, [pc, #140]	; (257c <_usb_d_dev_ep_trans+0x1f4>)
    24f0:	191b      	adds	r3, r3, r4
    24f2:	3380      	adds	r3, #128	; 0x80
    24f4:	0112      	lsls	r2, r2, #4
    24f6:	79df      	ldrb	r7, [r3, #7]
    24f8:	2110      	movs	r1, #16
    24fa:	438f      	bics	r7, r1
    24fc:	4317      	orrs	r7, r2
    24fe:	71df      	strb	r7, [r3, #7]
	if (dir) {
    2500:	2e00      	cmp	r6, #0
    2502:	db0a      	blt.n	251a <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    2504:	2100      	movs	r1, #0
    2506:	0028      	movs	r0, r5
    2508:	4b22      	ldr	r3, [pc, #136]	; (2594 <_usb_d_dev_ep_trans+0x20c>)
    250a:	4798      	blx	r3
	return ERR_NONE;
    250c:	2000      	movs	r0, #0
    250e:	e7a1      	b.n	2454 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    2510:	a803      	add	r0, sp, #12
    2512:	4b1f      	ldr	r3, [pc, #124]	; (2590 <_usb_d_dev_ep_trans+0x208>)
    2514:	4798      	blx	r3
		return USB_BUSY;
    2516:	2001      	movs	r0, #1
    2518:	e79c      	b.n	2454 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    251a:	2100      	movs	r1, #0
    251c:	0028      	movs	r0, r5
    251e:	4b1e      	ldr	r3, [pc, #120]	; (2598 <_usb_d_dev_ep_trans+0x210>)
    2520:	4798      	blx	r3
	return ERR_NONE;
    2522:	2000      	movs	r0, #0
    2524:	e796      	b.n	2454 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    2526:	2012      	movs	r0, #18
    2528:	4240      	negs	r0, r0
    252a:	e793      	b.n	2454 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    252c:	2013      	movs	r0, #19
    252e:	4240      	negs	r0, r0
    2530:	e790      	b.n	2454 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    2532:	2012      	movs	r0, #18
    2534:	4240      	negs	r0, r0
    2536:	e78d      	b.n	2454 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    2538:	2013      	movs	r0, #19
    253a:	4240      	negs	r0, r0
    253c:	e78a      	b.n	2454 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    253e:	4643      	mov	r3, r8
    2540:	685a      	ldr	r2, [r3, #4]
    2542:	0597      	lsls	r7, r2, #22
    2544:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    2546:	4d0d      	ldr	r5, [pc, #52]	; (257c <_usb_d_dev_ep_trans+0x1f4>)
    2548:	3574      	adds	r5, #116	; 0x74
    254a:	2400      	movs	r4, #0
    254c:	e746      	b.n	23dc <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    254e:	4a0b      	ldr	r2, [pc, #44]	; (257c <_usb_d_dev_ep_trans+0x1f4>)
    2550:	3260      	adds	r2, #96	; 0x60
    2552:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    2554:	4a0a      	ldr	r2, [pc, #40]	; (2580 <_usb_d_dev_ep_trans+0x1f8>)
    2556:	4291      	cmp	r1, r2
    2558:	d0f1      	beq.n	253e <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    255a:	4d08      	ldr	r5, [pc, #32]	; (257c <_usb_d_dev_ep_trans+0x1f4>)
    255c:	3574      	adds	r5, #116	; 0x74
    255e:	2400      	movs	r4, #0
    2560:	e734      	b.n	23cc <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    2562:	00a3      	lsls	r3, r4, #2
    2564:	191b      	adds	r3, r3, r4
    2566:	009a      	lsls	r2, r3, #2
    2568:	4b04      	ldr	r3, [pc, #16]	; (257c <_usb_d_dev_ep_trans+0x1f4>)
    256a:	189b      	adds	r3, r3, r2
    256c:	3380      	adds	r3, #128	; 0x80
    256e:	681b      	ldr	r3, [r3, #0]
    2570:	2b00      	cmp	r3, #0
    2572:	d0e1      	beq.n	2538 <_usb_d_dev_ep_trans+0x1b0>
    2574:	2301      	movs	r3, #1
    2576:	4699      	mov	r9, r3
    2578:	e762      	b.n	2440 <_usb_d_dev_ep_trans+0xb8>
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	2000010c 	.word	0x2000010c
    2580:	000003ff 	.word	0x000003ff
    2584:	1fffffff 	.word	0x1fffffff
    2588:	20007fff 	.word	0x20007fff
    258c:	00000545 	.word	0x00000545
    2590:	00000553 	.word	0x00000553
    2594:	00001961 	.word	0x00001961
    2598:	000017b9 	.word	0x000017b9

0000259c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    259c:	1e0b      	subs	r3, r1, #0
    259e:	d006      	beq.n	25ae <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    25a0:	2801      	cmp	r0, #1
    25a2:	d006      	beq.n	25b2 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    25a4:	2800      	cmp	r0, #0
    25a6:	d101      	bne.n	25ac <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    25a8:	4a03      	ldr	r2, [pc, #12]	; (25b8 <_usb_d_dev_register_callback+0x1c>)
    25aa:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    25ac:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    25ae:	4b03      	ldr	r3, [pc, #12]	; (25bc <_usb_d_dev_register_callback+0x20>)
    25b0:	e7f6      	b.n	25a0 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    25b2:	4a01      	ldr	r2, [pc, #4]	; (25b8 <_usb_d_dev_register_callback+0x1c>)
    25b4:	6653      	str	r3, [r2, #100]	; 0x64
    25b6:	e7f9      	b.n	25ac <_usb_d_dev_register_callback+0x10>
    25b8:	2000010c 	.word	0x2000010c
    25bc:	00001521 	.word	0x00001521

000025c0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    25c0:	1e0b      	subs	r3, r1, #0
    25c2:	d008      	beq.n	25d6 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    25c4:	2800      	cmp	r0, #0
    25c6:	d008      	beq.n	25da <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    25c8:	2801      	cmp	r0, #1
    25ca:	d009      	beq.n	25e0 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    25cc:	2802      	cmp	r0, #2
    25ce:	d106      	bne.n	25de <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    25d0:	4a05      	ldr	r2, [pc, #20]	; (25e8 <_usb_d_dev_register_ep_callback+0x28>)
    25d2:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    25d4:	e003      	b.n	25de <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    25d6:	4b05      	ldr	r3, [pc, #20]	; (25ec <_usb_d_dev_register_ep_callback+0x2c>)
    25d8:	e7f4      	b.n	25c4 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    25da:	4a03      	ldr	r2, [pc, #12]	; (25e8 <_usb_d_dev_register_ep_callback+0x28>)
    25dc:	6693      	str	r3, [r2, #104]	; 0x68
}
    25de:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    25e0:	4a01      	ldr	r2, [pc, #4]	; (25e8 <_usb_d_dev_register_ep_callback+0x28>)
    25e2:	66d3      	str	r3, [r2, #108]	; 0x6c
    25e4:	e7fb      	b.n	25de <_usb_d_dev_register_ep_callback+0x1e>
    25e6:	46c0      	nop			; (mov r8, r8)
    25e8:	2000010c 	.word	0x2000010c
    25ec:	00001521 	.word	0x00001521

000025f0 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    25f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    25f2:	4b82      	ldr	r3, [pc, #520]	; (27fc <USB_Handler+0x20c>)
    25f4:	8c1e      	ldrh	r6, [r3, #32]
    25f6:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    25f8:	2e00      	cmp	r6, #0
    25fa:	d003      	beq.n	2604 <USB_Handler+0x14>
    25fc:	4c80      	ldr	r4, [pc, #512]	; (2800 <USB_Handler+0x210>)
    25fe:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    2600:	2500      	movs	r5, #0
    2602:	e0b9      	b.n	2778 <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2604:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2606:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2608:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    260a:	075a      	lsls	r2, r3, #29
    260c:	d417      	bmi.n	263e <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    260e:	059a      	lsls	r2, r3, #22
    2610:	d41c      	bmi.n	264c <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2612:	061a      	lsls	r2, r3, #24
    2614:	d43e      	bmi.n	2694 <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2616:	2270      	movs	r2, #112	; 0x70
    2618:	421a      	tst	r2, r3
    261a:	d144      	bne.n	26a6 <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    261c:	071a      	lsls	r2, r3, #28
    261e:	d45e      	bmi.n	26de <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2620:	07db      	lsls	r3, r3, #31
    2622:	d5eb      	bpl.n	25fc <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2624:	4b75      	ldr	r3, [pc, #468]	; (27fc <USB_Handler+0x20c>)
    2626:	4a77      	ldr	r2, [pc, #476]	; (2804 <USB_Handler+0x214>)
    2628:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    262a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    262c:	3a92      	subs	r2, #146	; 0x92
    262e:	3aff      	subs	r2, #255	; 0xff
    2630:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2632:	4b73      	ldr	r3, [pc, #460]	; (2800 <USB_Handler+0x210>)
    2634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2636:	2100      	movs	r1, #0
    2638:	2004      	movs	r0, #4
    263a:	4798      	blx	r3
    263c:	e005      	b.n	264a <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    263e:	2204      	movs	r2, #4
    2640:	4b6e      	ldr	r3, [pc, #440]	; (27fc <USB_Handler+0x20c>)
    2642:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2644:	4b6e      	ldr	r3, [pc, #440]	; (2800 <USB_Handler+0x210>)
    2646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2648:	4798      	blx	r3

	_usb_d_dev_handler();
}
    264a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    264c:	4b6b      	ldr	r3, [pc, #428]	; (27fc <USB_Handler+0x20c>)
    264e:	4a6d      	ldr	r2, [pc, #436]	; (2804 <USB_Handler+0x214>)
    2650:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2652:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2654:	3a92      	subs	r2, #146	; 0x92
    2656:	3aff      	subs	r2, #255	; 0xff
    2658:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    265a:	4b69      	ldr	r3, [pc, #420]	; (2800 <USB_Handler+0x210>)
    265c:	891b      	ldrh	r3, [r3, #8]
    265e:	071b      	lsls	r3, r3, #28
    2660:	0f1b      	lsrs	r3, r3, #28
    2662:	2b03      	cmp	r3, #3
    2664:	d00c      	beq.n	2680 <USB_Handler+0x90>
    2666:	4b66      	ldr	r3, [pc, #408]	; (2800 <USB_Handler+0x210>)
    2668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    266a:	071b      	lsls	r3, r3, #28
    266c:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    266e:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2670:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2672:	2b03      	cmp	r3, #3
    2674:	d005      	beq.n	2682 <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2676:	4b62      	ldr	r3, [pc, #392]	; (2800 <USB_Handler+0x210>)
    2678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    267a:	2003      	movs	r0, #3
    267c:	4798      	blx	r3
    267e:	e7e4      	b.n	264a <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2680:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2682:	0152      	lsls	r2, r2, #5
    2684:	4b5e      	ldr	r3, [pc, #376]	; (2800 <USB_Handler+0x210>)
    2686:	189b      	adds	r3, r3, r2
    2688:	8919      	ldrh	r1, [r3, #8]
    268a:	0449      	lsls	r1, r1, #17
    268c:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    268e:	2200      	movs	r2, #0
    2690:	811a      	strh	r2, [r3, #8]
    2692:	e7f0      	b.n	2676 <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2694:	2280      	movs	r2, #128	; 0x80
    2696:	4b59      	ldr	r3, [pc, #356]	; (27fc <USB_Handler+0x20c>)
    2698:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    269a:	4b59      	ldr	r3, [pc, #356]	; (2800 <USB_Handler+0x210>)
    269c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    269e:	2100      	movs	r1, #0
    26a0:	2005      	movs	r0, #5
    26a2:	4798      	blx	r3
    26a4:	e7d1      	b.n	264a <USB_Handler+0x5a>
    26a6:	4b55      	ldr	r3, [pc, #340]	; (27fc <USB_Handler+0x20c>)
    26a8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    26aa:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    26ac:	4a55      	ldr	r2, [pc, #340]	; (2804 <USB_Handler+0x214>)
    26ae:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    26b0:	4b55      	ldr	r3, [pc, #340]	; (2808 <USB_Handler+0x218>)
    26b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    26b4:	069b      	lsls	r3, r3, #26
    26b6:	d40c      	bmi.n	26d2 <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    26b8:	4953      	ldr	r1, [pc, #332]	; (2808 <USB_Handler+0x218>)
	tmp &= mask;
    26ba:	3a32      	subs	r2, #50	; 0x32
    26bc:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    26be:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    26c0:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    26c2:	2bd0      	cmp	r3, #208	; 0xd0
    26c4:	d1fb      	bne.n	26be <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    26c6:	4b4e      	ldr	r3, [pc, #312]	; (2800 <USB_Handler+0x210>)
    26c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    26ca:	2100      	movs	r1, #0
    26cc:	2002      	movs	r0, #2
    26ce:	4798      	blx	r3
    26d0:	e7bb      	b.n	264a <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    26d2:	494d      	ldr	r1, [pc, #308]	; (2808 <USB_Handler+0x218>)
	tmp &= mask;
    26d4:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    26d6:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    26d8:	421a      	tst	r2, r3
    26da:	d0fc      	beq.n	26d6 <USB_Handler+0xe6>
    26dc:	e7f3      	b.n	26c6 <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    26de:	4b47      	ldr	r3, [pc, #284]	; (27fc <USB_Handler+0x20c>)
    26e0:	2100      	movs	r1, #0
    26e2:	2280      	movs	r2, #128	; 0x80
    26e4:	0052      	lsls	r2, r2, #1
    26e6:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    26e8:	3af8      	subs	r2, #248	; 0xf8
    26ea:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    26ec:	3268      	adds	r2, #104	; 0x68
    26ee:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    26f0:	4a44      	ldr	r2, [pc, #272]	; (2804 <USB_Handler+0x214>)
    26f2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    26f4:	4b45      	ldr	r3, [pc, #276]	; (280c <USB_Handler+0x21c>)
    26f6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    26f8:	4b41      	ldr	r3, [pc, #260]	; (2800 <USB_Handler+0x210>)
    26fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    26fc:	2100      	movs	r1, #0
    26fe:	2001      	movs	r0, #1
    2700:	4798      	blx	r3
    2702:	e7a2      	b.n	264a <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2704:	06cb      	lsls	r3, r1, #27
    2706:	d407      	bmi.n	2718 <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2708:	064b      	lsls	r3, r1, #25
    270a:	d408      	bmi.n	271e <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    270c:	068b      	lsls	r3, r1, #26
    270e:	d52e      	bpl.n	276e <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    2710:	2100      	movs	r1, #0
    2712:	4b3f      	ldr	r3, [pc, #252]	; (2810 <USB_Handler+0x220>)
    2714:	4798      	blx	r3
    2716:	e02a      	b.n	276e <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    2718:	4b3e      	ldr	r3, [pc, #248]	; (2814 <USB_Handler+0x224>)
    271a:	4798      	blx	r3
    271c:	e027      	b.n	276e <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    271e:	2101      	movs	r1, #1
    2720:	4b3b      	ldr	r3, [pc, #236]	; (2810 <USB_Handler+0x220>)
    2722:	4798      	blx	r3
    2724:	e023      	b.n	276e <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2726:	064b      	lsls	r3, r1, #25
    2728:	d40e      	bmi.n	2748 <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    272a:	070b      	lsls	r3, r1, #28
    272c:	d410      	bmi.n	2750 <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    272e:	078b      	lsls	r3, r1, #30
    2730:	d412      	bmi.n	2758 <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2732:	2307      	movs	r3, #7
    2734:	401a      	ands	r2, r3
    2736:	2a01      	cmp	r2, #1
    2738:	d119      	bne.n	276e <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    273a:	074b      	lsls	r3, r1, #29
    273c:	d410      	bmi.n	2760 <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    273e:	06cb      	lsls	r3, r1, #27
    2740:	d515      	bpl.n	276e <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    2742:	4b34      	ldr	r3, [pc, #208]	; (2814 <USB_Handler+0x224>)
    2744:	4798      	blx	r3
    2746:	e012      	b.n	276e <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    2748:	2101      	movs	r1, #1
    274a:	4b31      	ldr	r3, [pc, #196]	; (2810 <USB_Handler+0x220>)
    274c:	4798      	blx	r3
    274e:	e00e      	b.n	276e <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    2750:	2101      	movs	r1, #1
    2752:	4b31      	ldr	r3, [pc, #196]	; (2818 <USB_Handler+0x228>)
    2754:	4798      	blx	r3
    2756:	e00a      	b.n	276e <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    2758:	2101      	movs	r1, #1
    275a:	4b30      	ldr	r3, [pc, #192]	; (281c <USB_Handler+0x22c>)
    275c:	4798      	blx	r3
    275e:	e006      	b.n	276e <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    2760:	2100      	movs	r1, #0
    2762:	4b2d      	ldr	r3, [pc, #180]	; (2818 <USB_Handler+0x228>)
    2764:	4798      	blx	r3
    2766:	e002      	b.n	276e <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    2768:	2100      	movs	r1, #0
    276a:	4b29      	ldr	r3, [pc, #164]	; (2810 <USB_Handler+0x220>)
    276c:	4798      	blx	r3
    276e:	3501      	adds	r5, #1
    2770:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2772:	2d09      	cmp	r5, #9
    2774:	d100      	bne.n	2778 <USB_Handler+0x188>
    2776:	e768      	b.n	264a <USB_Handler+0x5a>
    2778:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    277a:	7ca1      	ldrb	r1, [r4, #18]
    277c:	29ff      	cmp	r1, #255	; 0xff
    277e:	d0f6      	beq.n	276e <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    2780:	230f      	movs	r3, #15
    2782:	400b      	ands	r3, r1
    2784:	2101      	movs	r1, #1
    2786:	4099      	lsls	r1, r3
    2788:	420e      	tst	r6, r1
    278a:	d0f0      	beq.n	276e <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    278c:	0159      	lsls	r1, r3, #5
    278e:	4f24      	ldr	r7, [pc, #144]	; (2820 <USB_Handler+0x230>)
    2790:	46bc      	mov	ip, r7
    2792:	4461      	add	r1, ip
    2794:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2796:	015b      	lsls	r3, r3, #5
    2798:	4f22      	ldr	r7, [pc, #136]	; (2824 <USB_Handler+0x234>)
    279a:	46bc      	mov	ip, r7
    279c:	4463      	add	r3, ip
    279e:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    27a0:	4019      	ands	r1, r3
	if (flags) {
    27a2:	d0e4      	beq.n	276e <USB_Handler+0x17e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    27a4:	00ab      	lsls	r3, r5, #2
    27a6:	195a      	adds	r2, r3, r5
    27a8:	0092      	lsls	r2, r2, #2
    27aa:	4b15      	ldr	r3, [pc, #84]	; (2800 <USB_Handler+0x210>)
    27ac:	469c      	mov	ip, r3
    27ae:	4462      	add	r2, ip
    27b0:	3270      	adds	r2, #112	; 0x70
    27b2:	7dd2      	ldrb	r2, [r2, #23]
    27b4:	2347      	movs	r3, #71	; 0x47
    27b6:	4013      	ands	r3, r2
    27b8:	2b01      	cmp	r3, #1
    27ba:	d0a3      	beq.n	2704 <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    27bc:	b253      	sxtb	r3, r2
    27be:	2b00      	cmp	r3, #0
    27c0:	dbb1      	blt.n	2726 <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    27c2:	068b      	lsls	r3, r1, #26
    27c4:	d4d0      	bmi.n	2768 <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    27c6:	074b      	lsls	r3, r1, #29
    27c8:	d40c      	bmi.n	27e4 <USB_Handler+0x1f4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    27ca:	07cb      	lsls	r3, r1, #31
    27cc:	d40e      	bmi.n	27ec <USB_Handler+0x1fc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    27ce:	2307      	movs	r3, #7
    27d0:	401a      	ands	r2, r3
    27d2:	2a01      	cmp	r2, #1
    27d4:	d1cb      	bne.n	276e <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    27d6:	070b      	lsls	r3, r1, #28
    27d8:	d40c      	bmi.n	27f4 <USB_Handler+0x204>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    27da:	06cb      	lsls	r3, r1, #27
    27dc:	d5c7      	bpl.n	276e <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    27de:	4b0d      	ldr	r3, [pc, #52]	; (2814 <USB_Handler+0x224>)
    27e0:	4798      	blx	r3
    27e2:	e7c4      	b.n	276e <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    27e4:	2100      	movs	r1, #0
    27e6:	4b0c      	ldr	r3, [pc, #48]	; (2818 <USB_Handler+0x228>)
    27e8:	4798      	blx	r3
    27ea:	e7c0      	b.n	276e <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    27ec:	2101      	movs	r1, #1
    27ee:	4b0e      	ldr	r3, [pc, #56]	; (2828 <USB_Handler+0x238>)
    27f0:	4798      	blx	r3
    27f2:	e7bc      	b.n	276e <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    27f4:	2101      	movs	r1, #1
    27f6:	4b08      	ldr	r3, [pc, #32]	; (2818 <USB_Handler+0x228>)
    27f8:	4798      	blx	r3
    27fa:	e7b8      	b.n	276e <USB_Handler+0x17e>
    27fc:	41005000 	.word	0x41005000
    2800:	2000010c 	.word	0x2000010c
    2804:	00000201 	.word	0x00000201
    2808:	40000800 	.word	0x40000800
    280c:	00001775 	.word	0x00001775
    2810:	000015b1 	.word	0x000015b1
    2814:	00001525 	.word	0x00001525
    2818:	00001675 	.word	0x00001675
    281c:	000017b9 	.word	0x000017b9
    2820:	41005100 	.word	0x41005100
    2824:	41005109 	.word	0x41005109
    2828:	00001961 	.word	0x00001961

0000282c <main>:
#include <atmel_start.h>

int main(void)
{
    282c:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    282e:	4b01      	ldr	r3, [pc, #4]	; (2834 <main+0x8>)
    2830:	4798      	blx	r3
    2832:	e7fe      	b.n	2832 <main+0x6>
    2834:	00000115 	.word	0x00000115

00002838 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2838:	b5f0      	push	{r4, r5, r6, r7, lr}
    283a:	b083      	sub	sp, #12
    283c:	0006      	movs	r6, r0
    283e:	000c      	movs	r4, r1
    2840:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2842:	780a      	ldrb	r2, [r1, #0]
    2844:	0653      	lsls	r3, r2, #25
    2846:	0f9b      	lsrs	r3, r3, #30
    2848:	2b01      	cmp	r3, #1
    284a:	d000      	beq.n	284e <cdcdf_acm_req+0x16>
    284c:	e06c      	b.n	2928 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    284e:	7909      	ldrb	r1, [r1, #4]
    2850:	7963      	ldrb	r3, [r4, #5]
    2852:	021b      	lsls	r3, r3, #8
    2854:	430b      	orrs	r3, r1
    2856:	493b      	ldr	r1, [pc, #236]	; (2944 <cdcdf_acm_req+0x10c>)
    2858:	7809      	ldrb	r1, [r1, #0]
    285a:	4299      	cmp	r1, r3
    285c:	d003      	beq.n	2866 <cdcdf_acm_req+0x2e>
    285e:	4939      	ldr	r1, [pc, #228]	; (2944 <cdcdf_acm_req+0x10c>)
    2860:	7849      	ldrb	r1, [r1, #1]
    2862:	4299      	cmp	r1, r3
    2864:	d163      	bne.n	292e <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2866:	b252      	sxtb	r2, r2
    2868:	2a00      	cmp	r2, #0
    286a:	db0e      	blt.n	288a <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    286c:	79a7      	ldrb	r7, [r4, #6]
    286e:	79e3      	ldrb	r3, [r4, #7]
    2870:	021b      	lsls	r3, r3, #8
    2872:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2874:	4b34      	ldr	r3, [pc, #208]	; (2948 <cdcdf_acm_req+0x110>)
    2876:	4798      	blx	r3
	switch (req->bRequest) {
    2878:	7863      	ldrb	r3, [r4, #1]
    287a:	2b20      	cmp	r3, #32
    287c:	d018      	beq.n	28b0 <cdcdf_acm_req+0x78>
    287e:	2b22      	cmp	r3, #34	; 0x22
    2880:	d03c      	beq.n	28fc <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    2882:	200d      	movs	r0, #13
    2884:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2886:	b003      	add	sp, #12
    2888:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    288a:	2d01      	cmp	r5, #1
    288c:	d052      	beq.n	2934 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    288e:	7863      	ldrb	r3, [r4, #1]
    2890:	2b21      	cmp	r3, #33	; 0x21
    2892:	d151      	bne.n	2938 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    2894:	79a2      	ldrb	r2, [r4, #6]
    2896:	79e3      	ldrb	r3, [r4, #7]
    2898:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    289a:	4313      	orrs	r3, r2
    289c:	2b07      	cmp	r3, #7
    289e:	d14e      	bne.n	293e <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    28a0:	2300      	movs	r3, #0
    28a2:	2207      	movs	r2, #7
    28a4:	4927      	ldr	r1, [pc, #156]	; (2944 <cdcdf_acm_req+0x10c>)
    28a6:	3108      	adds	r1, #8
    28a8:	0030      	movs	r0, r6
    28aa:	4c28      	ldr	r4, [pc, #160]	; (294c <cdcdf_acm_req+0x114>)
    28ac:	47a0      	blx	r4
    28ae:	e7ea      	b.n	2886 <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    28b0:	2f07      	cmp	r7, #7
    28b2:	d134      	bne.n	291e <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    28b4:	2d00      	cmp	r5, #0
    28b6:	d01a      	beq.n	28ee <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    28b8:	2207      	movs	r2, #7
    28ba:	0001      	movs	r1, r0
    28bc:	4668      	mov	r0, sp
    28be:	4b24      	ldr	r3, [pc, #144]	; (2950 <cdcdf_acm_req+0x118>)
    28c0:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    28c2:	4b20      	ldr	r3, [pc, #128]	; (2944 <cdcdf_acm_req+0x10c>)
    28c4:	691b      	ldr	r3, [r3, #16]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d005      	beq.n	28d6 <cdcdf_acm_req+0x9e>
    28ca:	4668      	mov	r0, sp
    28cc:	4798      	blx	r3
    28ce:	0003      	movs	r3, r0
			return ERR_NONE;
    28d0:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    28d2:	2b00      	cmp	r3, #0
    28d4:	d0d7      	beq.n	2886 <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    28d6:	4a1b      	ldr	r2, [pc, #108]	; (2944 <cdcdf_acm_req+0x10c>)
    28d8:	0013      	movs	r3, r2
    28da:	9900      	ldr	r1, [sp, #0]
    28dc:	6091      	str	r1, [r2, #8]
    28de:	466a      	mov	r2, sp
    28e0:	8892      	ldrh	r2, [r2, #4]
    28e2:	819a      	strh	r2, [r3, #12]
    28e4:	466a      	mov	r2, sp
    28e6:	7992      	ldrb	r2, [r2, #6]
    28e8:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    28ea:	2000      	movs	r0, #0
    28ec:	e7cb      	b.n	2886 <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    28ee:	2300      	movs	r3, #0
    28f0:	2207      	movs	r2, #7
    28f2:	0001      	movs	r1, r0
    28f4:	0030      	movs	r0, r6
    28f6:	4c15      	ldr	r4, [pc, #84]	; (294c <cdcdf_acm_req+0x114>)
    28f8:	47a0      	blx	r4
    28fa:	e7c4      	b.n	2886 <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    28fc:	2300      	movs	r3, #0
    28fe:	2200      	movs	r2, #0
    2900:	2100      	movs	r1, #0
    2902:	2000      	movs	r0, #0
    2904:	4d11      	ldr	r5, [pc, #68]	; (294c <cdcdf_acm_req+0x114>)
    2906:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2908:	4b0e      	ldr	r3, [pc, #56]	; (2944 <cdcdf_acm_req+0x10c>)
    290a:	695b      	ldr	r3, [r3, #20]
    290c:	2b00      	cmp	r3, #0
    290e:	d009      	beq.n	2924 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    2910:	78a2      	ldrb	r2, [r4, #2]
    2912:	78e0      	ldrb	r0, [r4, #3]
    2914:	0200      	lsls	r0, r0, #8
    2916:	4310      	orrs	r0, r2
    2918:	4798      	blx	r3
		return ERR_NONE;
    291a:	2000      	movs	r0, #0
    291c:	e7b3      	b.n	2886 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    291e:	2001      	movs	r0, #1
    2920:	4240      	negs	r0, r0
    2922:	e7b0      	b.n	2886 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2924:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    2926:	e7ae      	b.n	2886 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2928:	200a      	movs	r0, #10
    292a:	4240      	negs	r0, r0
    292c:	e7ab      	b.n	2886 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    292e:	200a      	movs	r0, #10
    2930:	4240      	negs	r0, r0
    2932:	e7a8      	b.n	2886 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2934:	2000      	movs	r0, #0
    2936:	e7a6      	b.n	2886 <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    2938:	200d      	movs	r0, #13
    293a:	4240      	negs	r0, r0
    293c:	e7a3      	b.n	2886 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    293e:	2001      	movs	r0, #1
    2940:	4240      	negs	r0, r0
    2942:	e7a0      	b.n	2886 <cdcdf_acm_req+0x4e>
    2944:	200002f4 	.word	0x200002f4
    2948:	00003209 	.word	0x00003209
    294c:	00002cb9 	.word	0x00002cb9
    2950:	000033cd 	.word	0x000033cd

00002954 <cdcdf_acm_ctrl>:
{
    2954:	b5f0      	push	{r4, r5, r6, r7, lr}
    2956:	46de      	mov	lr, fp
    2958:	4657      	mov	r7, sl
    295a:	464e      	mov	r6, r9
    295c:	4645      	mov	r5, r8
    295e:	b5e0      	push	{r5, r6, r7, lr}
    2960:	b083      	sub	sp, #12
    2962:	0016      	movs	r6, r2
	switch (ctrl) {
    2964:	2901      	cmp	r1, #1
    2966:	d068      	beq.n	2a3a <cdcdf_acm_ctrl+0xe6>
    2968:	2900      	cmp	r1, #0
    296a:	d00b      	beq.n	2984 <cdcdf_acm_ctrl+0x30>
    296c:	2902      	cmp	r1, #2
    296e:	d100      	bne.n	2972 <cdcdf_acm_ctrl+0x1e>
    2970:	e093      	b.n	2a9a <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    2972:	200d      	movs	r0, #13
    2974:	4240      	negs	r0, r0
}
    2976:	b003      	add	sp, #12
    2978:	bc3c      	pop	{r2, r3, r4, r5}
    297a:	4690      	mov	r8, r2
    297c:	4699      	mov	r9, r3
    297e:	46a2      	mov	sl, r4
    2980:	46ab      	mov	fp, r5
    2982:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2984:	6883      	ldr	r3, [r0, #8]
    2986:	4698      	mov	r8, r3
	ifc = desc->sod;
    2988:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    298a:	2800      	cmp	r0, #0
    298c:	d100      	bne.n	2990 <cdcdf_acm_ctrl+0x3c>
    298e:	e087      	b.n	2aa0 <cdcdf_acm_ctrl+0x14c>
    2990:	9301      	str	r3, [sp, #4]
    2992:	2301      	movs	r3, #1
    2994:	4443      	add	r3, r8
    2996:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2998:	4f47      	ldr	r7, [pc, #284]	; (2ab8 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    299a:	4b48      	ldr	r3, [pc, #288]	; (2abc <cdcdf_acm_ctrl+0x168>)
    299c:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    299e:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    29a0:	7943      	ldrb	r3, [r0, #5]
    29a2:	2108      	movs	r1, #8
    29a4:	438b      	bics	r3, r1
    29a6:	2b02      	cmp	r3, #2
    29a8:	d002      	beq.n	29b0 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    29aa:	200a      	movs	r0, #10
    29ac:	4240      	negs	r0, r0
    29ae:	e7e2      	b.n	2976 <cdcdf_acm_ctrl+0x22>
    29b0:	9901      	ldr	r1, [sp, #4]
    29b2:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    29b4:	780b      	ldrb	r3, [r1, #0]
    29b6:	429a      	cmp	r2, r3
    29b8:	d075      	beq.n	2aa6 <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    29ba:	2bff      	cmp	r3, #255	; 0xff
    29bc:	d176      	bne.n	2aac <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    29be:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    29c0:	2205      	movs	r2, #5
    29c2:	6871      	ldr	r1, [r6, #4]
    29c4:	4b3e      	ldr	r3, [pc, #248]	; (2ac0 <cdcdf_acm_ctrl+0x16c>)
    29c6:	4798      	blx	r3
    29c8:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    29ca:	d11e      	bne.n	2a0a <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    29cc:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    29ce:	7803      	ldrb	r3, [r0, #0]
    29d0:	18c0      	adds	r0, r0, r3
    29d2:	2204      	movs	r2, #4
    29d4:	6871      	ldr	r1, [r6, #4]
    29d6:	4b3a      	ldr	r3, [pc, #232]	; (2ac0 <cdcdf_acm_ctrl+0x16c>)
    29d8:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    29da:	9b01      	ldr	r3, [sp, #4]
    29dc:	455b      	cmp	r3, fp
    29de:	d027      	beq.n	2a30 <cdcdf_acm_ctrl+0xdc>
    29e0:	9b01      	ldr	r3, [sp, #4]
    29e2:	3301      	adds	r3, #1
    29e4:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    29e6:	2800      	cmp	r0, #0
    29e8:	d1d9      	bne.n	299e <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    29ea:	200a      	movs	r0, #10
    29ec:	4240      	negs	r0, r0
    29ee:	e7c2      	b.n	2976 <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    29f0:	4653      	mov	r3, sl
    29f2:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    29f4:	0028      	movs	r0, r5
    29f6:	4b31      	ldr	r3, [pc, #196]	; (2abc <cdcdf_acm_ctrl+0x168>)
    29f8:	4798      	blx	r3
			desc->sod = ep;
    29fa:	6034      	str	r4, [r6, #0]
    29fc:	7820      	ldrb	r0, [r4, #0]
    29fe:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2a00:	6871      	ldr	r1, [r6, #4]
    2a02:	4b30      	ldr	r3, [pc, #192]	; (2ac4 <cdcdf_acm_ctrl+0x170>)
    2a04:	4798      	blx	r3
    2a06:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2a08:	d0e0      	beq.n	29cc <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    2a0a:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    2a0c:	7963      	ldrb	r3, [r4, #5]
    2a0e:	021b      	lsls	r3, r3, #8
    2a10:	7922      	ldrb	r2, [r4, #4]
    2a12:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2a14:	b292      	uxth	r2, r2
    2a16:	78e1      	ldrb	r1, [r4, #3]
    2a18:	0028      	movs	r0, r5
    2a1a:	47b8      	blx	r7
    2a1c:	2800      	cmp	r0, #0
    2a1e:	d148      	bne.n	2ab2 <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2a20:	b26b      	sxtb	r3, r5
    2a22:	2b00      	cmp	r3, #0
    2a24:	dbe4      	blt.n	29f0 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2a26:	4643      	mov	r3, r8
    2a28:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2a2a:	0028      	movs	r0, r5
    2a2c:	47c8      	blx	r9
    2a2e:	e7e4      	b.n	29fa <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    2a30:	2201      	movs	r2, #1
    2a32:	4b25      	ldr	r3, [pc, #148]	; (2ac8 <cdcdf_acm_ctrl+0x174>)
    2a34:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2a36:	2000      	movs	r0, #0
    2a38:	e79d      	b.n	2976 <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2a3a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2a3c:	2a00      	cmp	r2, #0
    2a3e:	d008      	beq.n	2a52 <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2a40:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2a42:	795b      	ldrb	r3, [r3, #5]
    2a44:	2208      	movs	r2, #8
    2a46:	4393      	bics	r3, r2
    2a48:	2b02      	cmp	r3, #2
    2a4a:	d002      	beq.n	2a52 <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    2a4c:	200a      	movs	r0, #10
    2a4e:	4240      	negs	r0, r0
    2a50:	e791      	b.n	2976 <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    2a52:	7823      	ldrb	r3, [r4, #0]
    2a54:	2bff      	cmp	r3, #255	; 0xff
    2a56:	d008      	beq.n	2a6a <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    2a58:	23ff      	movs	r3, #255	; 0xff
    2a5a:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    2a5c:	78a0      	ldrb	r0, [r4, #2]
    2a5e:	28ff      	cmp	r0, #255	; 0xff
    2a60:	d003      	beq.n	2a6a <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2a62:	4b1a      	ldr	r3, [pc, #104]	; (2acc <cdcdf_acm_ctrl+0x178>)
    2a64:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2a66:	23ff      	movs	r3, #255	; 0xff
    2a68:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2a6a:	7863      	ldrb	r3, [r4, #1]
    2a6c:	2bff      	cmp	r3, #255	; 0xff
    2a6e:	d008      	beq.n	2a82 <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    2a70:	23ff      	movs	r3, #255	; 0xff
    2a72:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2a74:	78e0      	ldrb	r0, [r4, #3]
    2a76:	28ff      	cmp	r0, #255	; 0xff
    2a78:	d003      	beq.n	2a82 <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2a7a:	4b14      	ldr	r3, [pc, #80]	; (2acc <cdcdf_acm_ctrl+0x178>)
    2a7c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2a7e:	23ff      	movs	r3, #255	; 0xff
    2a80:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2a82:	7920      	ldrb	r0, [r4, #4]
    2a84:	28ff      	cmp	r0, #255	; 0xff
    2a86:	d003      	beq.n	2a90 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    2a88:	4b10      	ldr	r3, [pc, #64]	; (2acc <cdcdf_acm_ctrl+0x178>)
    2a8a:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2a8c:	23ff      	movs	r3, #255	; 0xff
    2a8e:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2a90:	2200      	movs	r2, #0
    2a92:	4b0d      	ldr	r3, [pc, #52]	; (2ac8 <cdcdf_acm_ctrl+0x174>)
    2a94:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2a96:	2000      	movs	r0, #0
    2a98:	e76d      	b.n	2976 <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    2a9a:	201b      	movs	r0, #27
    2a9c:	4240      	negs	r0, r0
    2a9e:	e76a      	b.n	2976 <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    2aa0:	200a      	movs	r0, #10
    2aa2:	4240      	negs	r0, r0
    2aa4:	e767      	b.n	2976 <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    2aa6:	2012      	movs	r0, #18
    2aa8:	4240      	negs	r0, r0
    2aaa:	e764      	b.n	2976 <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    2aac:	201c      	movs	r0, #28
    2aae:	4240      	negs	r0, r0
    2ab0:	e761      	b.n	2976 <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    2ab2:	2014      	movs	r0, #20
    2ab4:	4240      	negs	r0, r0
    2ab6:	e75e      	b.n	2976 <cdcdf_acm_ctrl+0x22>
    2ab8:	00000c29 	.word	0x00000c29
    2abc:	00000cbd 	.word	0x00000cbd
    2ac0:	00003225 	.word	0x00003225
    2ac4:	0000325b 	.word	0x0000325b
    2ac8:	200002f4 	.word	0x200002f4
    2acc:	00000c91 	.word	0x00000c91

00002ad0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2ad0:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2ad2:	4b0a      	ldr	r3, [pc, #40]	; (2afc <cdcdf_acm_init+0x2c>)
    2ad4:	4798      	blx	r3
    2ad6:	2801      	cmp	r0, #1
    2ad8:	d80c      	bhi.n	2af4 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2ada:	4809      	ldr	r0, [pc, #36]	; (2b00 <cdcdf_acm_init+0x30>)
    2adc:	4b09      	ldr	r3, [pc, #36]	; (2b04 <cdcdf_acm_init+0x34>)
    2ade:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2ae0:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2ae2:	3018      	adds	r0, #24
    2ae4:	4b08      	ldr	r3, [pc, #32]	; (2b08 <cdcdf_acm_init+0x38>)
    2ae6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2ae8:	4908      	ldr	r1, [pc, #32]	; (2b0c <cdcdf_acm_init+0x3c>)
    2aea:	2001      	movs	r0, #1
    2aec:	4b08      	ldr	r3, [pc, #32]	; (2b10 <cdcdf_acm_init+0x40>)
    2aee:	4798      	blx	r3
	return ERR_NONE;
    2af0:	2000      	movs	r0, #0
}
    2af2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2af4:	2011      	movs	r0, #17
    2af6:	4240      	negs	r0, r0
    2af8:	e7fb      	b.n	2af2 <cdcdf_acm_init+0x22>
    2afa:	46c0      	nop			; (mov r8, r8)
    2afc:	00003215 	.word	0x00003215
    2b00:	200002f4 	.word	0x200002f4
    2b04:	00002955 	.word	0x00002955
    2b08:	000031ad 	.word	0x000031ad
    2b0c:	20000000 	.word	0x20000000
    2b10:	00003115 	.word	0x00003115

00002b14 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2b14:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2b16:	4b06      	ldr	r3, [pc, #24]	; (2b30 <usbdc_unconfig+0x1c>)
    2b18:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2b1a:	2c00      	cmp	r4, #0
    2b1c:	d007      	beq.n	2b2e <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2b1e:	2200      	movs	r2, #0
    2b20:	2101      	movs	r1, #1
    2b22:	0020      	movs	r0, r4
    2b24:	6863      	ldr	r3, [r4, #4]
    2b26:	4798      	blx	r3
		func = func->next;
    2b28:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2b2a:	2c00      	cmp	r4, #0
    2b2c:	d1f7      	bne.n	2b1e <usbdc_unconfig+0xa>
	}
}
    2b2e:	bd10      	pop	{r4, pc}
    2b30:	20000318 	.word	0x20000318

00002b34 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    2b34:	b570      	push	{r4, r5, r6, lr}
    2b36:	0006      	movs	r6, r0
    2b38:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    2b3a:	4b07      	ldr	r3, [pc, #28]	; (2b58 <usbdc_change_notify+0x24>)
    2b3c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    2b3e:	2c00      	cmp	r4, #0
    2b40:	d103      	bne.n	2b4a <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    2b42:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    2b44:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    2b46:	2c00      	cmp	r4, #0
    2b48:	d0fb      	beq.n	2b42 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    2b4a:	6863      	ldr	r3, [r4, #4]
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d0f9      	beq.n	2b44 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    2b50:	0029      	movs	r1, r5
    2b52:	0030      	movs	r0, r6
    2b54:	4798      	blx	r3
    2b56:	e7f5      	b.n	2b44 <usbdc_change_notify+0x10>
    2b58:	20000318 	.word	0x20000318

00002b5c <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b5e:	0007      	movs	r7, r0
    2b60:	000e      	movs	r6, r1
    2b62:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    2b64:	4b0d      	ldr	r3, [pc, #52]	; (2b9c <usbdc_request_handler+0x40>)
    2b66:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    2b68:	2c00      	cmp	r4, #0
    2b6a:	d104      	bne.n	2b76 <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    2b6c:	2000      	movs	r0, #0
    2b6e:	e011      	b.n	2b94 <usbdc_request_handler+0x38>
		h = h->next;
    2b70:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    2b72:	2c00      	cmp	r4, #0
    2b74:	d00d      	beq.n	2b92 <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    2b76:	6863      	ldr	r3, [r4, #4]
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d0f9      	beq.n	2b70 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    2b7c:	002a      	movs	r2, r5
    2b7e:	0031      	movs	r1, r6
    2b80:	0038      	movs	r0, r7
    2b82:	4798      	blx	r3
			if (0 == rc) {
    2b84:	2800      	cmp	r0, #0
    2b86:	d006      	beq.n	2b96 <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    2b88:	300a      	adds	r0, #10
    2b8a:	d0f1      	beq.n	2b70 <usbdc_request_handler+0x14>
				return -1;
    2b8c:	2001      	movs	r0, #1
    2b8e:	4240      	negs	r0, r0
    2b90:	e000      	b.n	2b94 <usbdc_request_handler+0x38>
	return false;
    2b92:	2000      	movs	r0, #0
}
    2b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    2b96:	2001      	movs	r0, #1
    2b98:	e7fc      	b.n	2b94 <usbdc_request_handler+0x38>
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	20000318 	.word	0x20000318

00002ba0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2ba0:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    2ba2:	4b06      	ldr	r3, [pc, #24]	; (2bbc <usbd_sof_cb+0x1c>)
    2ba4:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    2ba6:	2c00      	cmp	r4, #0
    2ba8:	d103      	bne.n	2bb2 <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    2baa:	bd10      	pop	{r4, pc}
		sof = sof->next;
    2bac:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    2bae:	2c00      	cmp	r4, #0
    2bb0:	d0fb      	beq.n	2baa <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    2bb2:	6863      	ldr	r3, [r4, #4]
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d0f9      	beq.n	2bac <usbd_sof_cb+0xc>
			sof->cb();
    2bb8:	4798      	blx	r3
    2bba:	e7f7      	b.n	2bac <usbd_sof_cb+0xc>
    2bbc:	20000318 	.word	0x20000318

00002bc0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2bc0:	b510      	push	{r4, lr}
    2bc2:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    2bc4:	2900      	cmp	r1, #0
    2bc6:	d003      	beq.n	2bd0 <usbdc_cb_ctl_done+0x10>
    2bc8:	2901      	cmp	r1, #1
    2bca:	d029      	beq.n	2c20 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2bcc:	2000      	movs	r0, #0
    2bce:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2bd0:	7813      	ldrb	r3, [r2, #0]
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	d1fa      	bne.n	2bcc <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    2bd6:	7853      	ldrb	r3, [r2, #1]
    2bd8:	2b05      	cmp	r3, #5
    2bda:	d011      	beq.n	2c00 <usbdc_cb_ctl_done+0x40>
    2bdc:	2b09      	cmp	r3, #9
    2bde:	d1f5      	bne.n	2bcc <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    2be0:	7892      	ldrb	r2, [r2, #2]
    2be2:	4b12      	ldr	r3, [pc, #72]	; (2c2c <usbdc_cb_ctl_done+0x6c>)
    2be4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2be6:	78a3      	ldrb	r3, [r4, #2]
    2be8:	78e1      	ldrb	r1, [r4, #3]
    2bea:	0209      	lsls	r1, r1, #8
    2bec:	4319      	orrs	r1, r3
    2bee:	1e4b      	subs	r3, r1, #1
    2bf0:	4199      	sbcs	r1, r3
    2bf2:	3103      	adds	r1, #3
    2bf4:	4b0d      	ldr	r3, [pc, #52]	; (2c2c <usbdc_cb_ctl_done+0x6c>)
    2bf6:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2bf8:	2001      	movs	r0, #1
    2bfa:	4b0d      	ldr	r3, [pc, #52]	; (2c30 <usbdc_cb_ctl_done+0x70>)
    2bfc:	4798      	blx	r3
    2bfe:	e7e5      	b.n	2bcc <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    2c00:	7890      	ldrb	r0, [r2, #2]
    2c02:	4b0c      	ldr	r3, [pc, #48]	; (2c34 <usbdc_cb_ctl_done+0x74>)
    2c04:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    2c06:	78a3      	ldrb	r3, [r4, #2]
    2c08:	78e1      	ldrb	r1, [r4, #3]
    2c0a:	0209      	lsls	r1, r1, #8
    2c0c:	4319      	orrs	r1, r3
    2c0e:	1e4b      	subs	r3, r1, #1
    2c10:	4199      	sbcs	r1, r3
    2c12:	3102      	adds	r1, #2
    2c14:	4b05      	ldr	r3, [pc, #20]	; (2c2c <usbdc_cb_ctl_done+0x6c>)
    2c16:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2c18:	2001      	movs	r0, #1
    2c1a:	4b05      	ldr	r3, [pc, #20]	; (2c30 <usbdc_cb_ctl_done+0x70>)
    2c1c:	4798      	blx	r3
    2c1e:	e7d5      	b.n	2bcc <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2c20:	2201      	movs	r2, #1
    2c22:	0021      	movs	r1, r4
    2c24:	2000      	movs	r0, #0
    2c26:	4b04      	ldr	r3, [pc, #16]	; (2c38 <usbdc_cb_ctl_done+0x78>)
    2c28:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    2c2a:	e7cf      	b.n	2bcc <usbdc_cb_ctl_done+0xc>
    2c2c:	20000318 	.word	0x20000318
    2c30:	00002b35 	.word	0x00002b35
    2c34:	00000c1d 	.word	0x00000c1d
    2c38:	00002b5d 	.word	0x00002b5d

00002c3c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2c3c:	b510      	push	{r4, lr}
	usbdc_unconfig();
    2c3e:	4b0d      	ldr	r3, [pc, #52]	; (2c74 <usbdc_reset+0x38>)
    2c40:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    2c42:	4c0d      	ldr	r4, [pc, #52]	; (2c78 <usbdc_reset+0x3c>)
    2c44:	2302      	movs	r3, #2
    2c46:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    2c48:	2300      	movs	r3, #0
    2c4a:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    2c4c:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    2c4e:	2000      	movs	r0, #0
    2c50:	4b0a      	ldr	r3, [pc, #40]	; (2c7c <usbdc_reset+0x40>)
    2c52:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    2c54:	7f20      	ldrb	r0, [r4, #28]
    2c56:	4b0a      	ldr	r3, [pc, #40]	; (2c80 <usbdc_reset+0x44>)
    2c58:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    2c5a:	4a0a      	ldr	r2, [pc, #40]	; (2c84 <usbdc_reset+0x48>)
    2c5c:	2100      	movs	r1, #0
    2c5e:	2000      	movs	r0, #0
    2c60:	4c09      	ldr	r4, [pc, #36]	; (2c88 <usbdc_reset+0x4c>)
    2c62:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    2c64:	4a09      	ldr	r2, [pc, #36]	; (2c8c <usbdc_reset+0x50>)
    2c66:	2102      	movs	r1, #2
    2c68:	2000      	movs	r0, #0
    2c6a:	47a0      	blx	r4
	usb_d_ep_enable(0);
    2c6c:	2000      	movs	r0, #0
    2c6e:	4b08      	ldr	r3, [pc, #32]	; (2c90 <usbdc_reset+0x54>)
    2c70:	4798      	blx	r3
}
    2c72:	bd10      	pop	{r4, pc}
    2c74:	00002b15 	.word	0x00002b15
    2c78:	20000318 	.word	0x20000318
    2c7c:	00000c91 	.word	0x00000c91
    2c80:	00000c7d 	.word	0x00000c7d
    2c84:	00002cd5 	.word	0x00002cd5
    2c88:	00000e99 	.word	0x00000e99
    2c8c:	00002bc1 	.word	0x00002bc1
    2c90:	00000cbd 	.word	0x00000cbd

00002c94 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2c94:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    2c96:	2800      	cmp	r0, #0
    2c98:	d002      	beq.n	2ca0 <usbd_event_cb+0xc>
    2c9a:	2801      	cmp	r0, #1
    2c9c:	d004      	beq.n	2ca8 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    2c9e:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    2ca0:	2000      	movs	r0, #0
    2ca2:	4b03      	ldr	r3, [pc, #12]	; (2cb0 <usbd_event_cb+0x1c>)
    2ca4:	4798      	blx	r3
		break;
    2ca6:	e7fa      	b.n	2c9e <usbd_event_cb+0xa>
		usbdc_reset();
    2ca8:	4b02      	ldr	r3, [pc, #8]	; (2cb4 <usbd_event_cb+0x20>)
    2caa:	4798      	blx	r3
}
    2cac:	e7f7      	b.n	2c9e <usbd_event_cb+0xa>
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	00002b35 	.word	0x00002b35
    2cb4:	00002c3d 	.word	0x00002c3d

00002cb8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2cb8:	b510      	push	{r4, lr}
    2cba:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2cbc:	ac01      	add	r4, sp, #4
    2cbe:	9101      	str	r1, [sp, #4]
    2cc0:	9202      	str	r2, [sp, #8]
    2cc2:	7220      	strb	r0, [r4, #8]
    2cc4:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    2cc6:	0020      	movs	r0, r4
    2cc8:	4b01      	ldr	r3, [pc, #4]	; (2cd0 <usbdc_xfer+0x18>)
    2cca:	4798      	blx	r3
}
    2ccc:	b004      	add	sp, #16
    2cce:	bd10      	pop	{r4, pc}
    2cd0:	00000d09 	.word	0x00000d09

00002cd4 <usbdc_cb_ctl_req>:
{
    2cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cd6:	46c6      	mov	lr, r8
    2cd8:	b500      	push	{lr}
    2cda:	b084      	sub	sp, #16
    2cdc:	0005      	movs	r5, r0
    2cde:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2ce0:	2200      	movs	r2, #0
    2ce2:	4bb5      	ldr	r3, [pc, #724]	; (2fb8 <usbdc_cb_ctl_req+0x2e4>)
    2ce4:	4798      	blx	r3
    2ce6:	1c43      	adds	r3, r0, #1
    2ce8:	d00d      	beq.n	2d06 <usbdc_cb_ctl_req+0x32>
		return true;
    2cea:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2cec:	2801      	cmp	r0, #1
    2cee:	d00b      	beq.n	2d08 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2cf0:	7822      	ldrb	r2, [r4, #0]
    2cf2:	231f      	movs	r3, #31
    2cf4:	0011      	movs	r1, r2
    2cf6:	4399      	bics	r1, r3
    2cf8:	d00b      	beq.n	2d12 <usbdc_cb_ctl_req+0x3e>
    2cfa:	b2cb      	uxtb	r3, r1
    2cfc:	2b80      	cmp	r3, #128	; 0x80
    2cfe:	d100      	bne.n	2d02 <usbdc_cb_ctl_req+0x2e>
    2d00:	e0f8      	b.n	2ef4 <usbdc_cb_ctl_req+0x220>
		return false;
    2d02:	2300      	movs	r3, #0
    2d04:	e000      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		return false;
    2d06:	2300      	movs	r3, #0
}
    2d08:	0018      	movs	r0, r3
    2d0a:	b004      	add	sp, #16
    2d0c:	bc04      	pop	{r2}
    2d0e:	4690      	mov	r8, r2
    2d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    2d12:	7863      	ldrb	r3, [r4, #1]
    2d14:	2b0b      	cmp	r3, #11
    2d16:	d900      	bls.n	2d1a <usbdc_cb_ctl_req+0x46>
    2d18:	e1e4      	b.n	30e4 <usbdc_cb_ctl_req+0x410>
    2d1a:	009b      	lsls	r3, r3, #2
    2d1c:	49a7      	ldr	r1, [pc, #668]	; (2fbc <usbdc_cb_ctl_req+0x2e8>)
    2d1e:	58cb      	ldr	r3, [r1, r3]
    2d20:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2d22:	2301      	movs	r3, #1
    2d24:	2200      	movs	r2, #0
    2d26:	2100      	movs	r1, #0
    2d28:	0028      	movs	r0, r5
    2d2a:	4ca5      	ldr	r4, [pc, #660]	; (2fc0 <usbdc_cb_ctl_req+0x2ec>)
    2d2c:	47a0      	blx	r4
    2d2e:	4243      	negs	r3, r0
    2d30:	4143      	adcs	r3, r0
    2d32:	b2db      	uxtb	r3, r3
    2d34:	e7e8      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    2d36:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    2d38:	2a00      	cmp	r2, #0
    2d3a:	d01a      	beq.n	2d72 <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2d3c:	4ba1      	ldr	r3, [pc, #644]	; (2fc4 <usbdc_cb_ctl_req+0x2f0>)
    2d3e:	681b      	ldr	r3, [r3, #0]
    2d40:	6859      	ldr	r1, [r3, #4]
    2d42:	6818      	ldr	r0, [r3, #0]
    2d44:	4ba0      	ldr	r3, [pc, #640]	; (2fc8 <usbdc_cb_ctl_req+0x2f4>)
    2d46:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2d48:	2800      	cmp	r0, #0
    2d4a:	d100      	bne.n	2d4e <usbdc_cb_ctl_req+0x7a>
    2d4c:	e1d4      	b.n	30f8 <usbdc_cb_ctl_req+0x424>
    2d4e:	78c3      	ldrb	r3, [r0, #3]
    2d50:	021b      	lsls	r3, r3, #8
    2d52:	7881      	ldrb	r1, [r0, #2]
    2d54:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    2d56:	b289      	uxth	r1, r1
    2d58:	1841      	adds	r1, r0, r1
    2d5a:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    2d5c:	2204      	movs	r2, #4
    2d5e:	4b9b      	ldr	r3, [pc, #620]	; (2fcc <usbdc_cb_ctl_req+0x2f8>)
    2d60:	4798      	blx	r3
    2d62:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    2d64:	2800      	cmp	r0, #0
    2d66:	d006      	beq.n	2d76 <usbdc_cb_ctl_req+0xa2>
    2d68:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2d6a:	4f96      	ldr	r7, [pc, #600]	; (2fc4 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2d6c:	4b97      	ldr	r3, [pc, #604]	; (2fcc <usbdc_cb_ctl_req+0x2f8>)
    2d6e:	4698      	mov	r8, r3
    2d70:	e01a      	b.n	2da8 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    2d72:	4b97      	ldr	r3, [pc, #604]	; (2fd0 <usbdc_cb_ctl_req+0x2fc>)
    2d74:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2d76:	2301      	movs	r3, #1
    2d78:	2200      	movs	r2, #0
    2d7a:	2100      	movs	r1, #0
    2d7c:	0028      	movs	r0, r5
    2d7e:	4c90      	ldr	r4, [pc, #576]	; (2fc0 <usbdc_cb_ctl_req+0x2ec>)
    2d80:	47a0      	blx	r4
    2d82:	4243      	negs	r3, r0
    2d84:	4143      	adcs	r3, r0
    2d86:	b2db      	uxtb	r3, r3
    2d88:	e7be      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    2d8a:	0034      	movs	r4, r6
    2d8c:	e000      	b.n	2d90 <usbdc_cb_ctl_req+0xbc>
    2d8e:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    2d90:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    2d92:	7803      	ldrb	r3, [r0, #0]
    2d94:	18c0      	adds	r0, r0, r3
    2d96:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2d98:	9b03      	ldr	r3, [sp, #12]
    2d9a:	9301      	str	r3, [sp, #4]
    2d9c:	2204      	movs	r2, #4
    2d9e:	0019      	movs	r1, r3
    2da0:	47c0      	blx	r8
    2da2:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    2da4:	2800      	cmp	r0, #0
    2da6:	d0e6      	beq.n	2d76 <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2da8:	7886      	ldrb	r6, [r0, #2]
    2daa:	42a6      	cmp	r6, r4
    2dac:	d0f0      	beq.n	2d90 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2dae:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    2db0:	2c00      	cmp	r4, #0
    2db2:	d0ea      	beq.n	2d8a <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    2db4:	aa02      	add	r2, sp, #8
    2db6:	2100      	movs	r1, #0
    2db8:	0020      	movs	r0, r4
    2dba:	6863      	ldr	r3, [r4, #4]
    2dbc:	4798      	blx	r3
    2dbe:	2800      	cmp	r0, #0
    2dc0:	d0e5      	beq.n	2d8e <usbdc_cb_ctl_req+0xba>
					func = func->next;
    2dc2:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    2dc4:	2c00      	cmp	r4, #0
    2dc6:	d1f5      	bne.n	2db4 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    2dc8:	0034      	movs	r4, r6
    2dca:	e7e1      	b.n	2d90 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2dcc:	231f      	movs	r3, #31
    2dce:	401a      	ands	r2, r3
		return false;
    2dd0:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2dd2:	2a02      	cmp	r2, #2
    2dd4:	d198      	bne.n	2d08 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    2dd6:	79a3      	ldrb	r3, [r4, #6]
    2dd8:	79e2      	ldrb	r2, [r4, #7]
    2dda:	0212      	lsls	r2, r2, #8
    2ddc:	431a      	orrs	r2, r3
			return false;
    2dde:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    2de0:	2a00      	cmp	r2, #0
    2de2:	d000      	beq.n	2de6 <usbdc_cb_ctl_req+0x112>
    2de4:	e790      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    2de6:	7920      	ldrb	r0, [r4, #4]
    2de8:	2100      	movs	r1, #0
    2dea:	4b7a      	ldr	r3, [pc, #488]	; (2fd4 <usbdc_cb_ctl_req+0x300>)
    2dec:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2dee:	2301      	movs	r3, #1
    2df0:	2200      	movs	r2, #0
    2df2:	2100      	movs	r1, #0
    2df4:	0028      	movs	r0, r5
    2df6:	4c72      	ldr	r4, [pc, #456]	; (2fc0 <usbdc_cb_ctl_req+0x2ec>)
    2df8:	47a0      	blx	r4
		return true;
    2dfa:	2301      	movs	r3, #1
    2dfc:	e784      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2dfe:	231f      	movs	r3, #31
    2e00:	401a      	ands	r2, r3
		return false;
    2e02:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2e04:	2a02      	cmp	r2, #2
    2e06:	d000      	beq.n	2e0a <usbdc_cb_ctl_req+0x136>
    2e08:	e77e      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    2e0a:	79a3      	ldrb	r3, [r4, #6]
    2e0c:	79e2      	ldrb	r2, [r4, #7]
    2e0e:	0212      	lsls	r2, r2, #8
    2e10:	431a      	orrs	r2, r3
			return false;
    2e12:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    2e14:	2a00      	cmp	r2, #0
    2e16:	d000      	beq.n	2e1a <usbdc_cb_ctl_req+0x146>
    2e18:	e776      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    2e1a:	7920      	ldrb	r0, [r4, #4]
    2e1c:	2101      	movs	r1, #1
    2e1e:	4b6d      	ldr	r3, [pc, #436]	; (2fd4 <usbdc_cb_ctl_req+0x300>)
    2e20:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2e22:	2301      	movs	r3, #1
    2e24:	2200      	movs	r2, #0
    2e26:	2100      	movs	r1, #0
    2e28:	0028      	movs	r0, r5
    2e2a:	4c65      	ldr	r4, [pc, #404]	; (2fc0 <usbdc_cb_ctl_req+0x2ec>)
    2e2c:	47a0      	blx	r4
		return true;
    2e2e:	2301      	movs	r3, #1
    2e30:	e76a      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    2e32:	78a3      	ldrb	r3, [r4, #2]
    2e34:	78e5      	ldrb	r5, [r4, #3]
    2e36:	022d      	lsls	r5, r5, #8
    2e38:	431d      	orrs	r5, r3
    2e3a:	7923      	ldrb	r3, [r4, #4]
    2e3c:	7964      	ldrb	r4, [r4, #5]
    2e3e:	0224      	lsls	r4, r4, #8
    2e40:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    2e42:	4a60      	ldr	r2, [pc, #384]	; (2fc4 <usbdc_cb_ctl_req+0x2f0>)
    2e44:	6813      	ldr	r3, [r2, #0]
    2e46:	7ed2      	ldrb	r2, [r2, #27]
    2e48:	6859      	ldr	r1, [r3, #4]
    2e4a:	6818      	ldr	r0, [r3, #0]
    2e4c:	4b5e      	ldr	r3, [pc, #376]	; (2fc8 <usbdc_cb_ctl_req+0x2f4>)
    2e4e:	4798      	blx	r3
	if (NULL == ifc) {
    2e50:	2800      	cmp	r0, #0
    2e52:	d047      	beq.n	2ee4 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    2e54:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    2e56:	78c3      	ldrb	r3, [r0, #3]
    2e58:	021b      	lsls	r3, r3, #8
    2e5a:	7881      	ldrb	r1, [r0, #2]
    2e5c:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    2e5e:	b289      	uxth	r1, r1
    2e60:	1841      	adds	r1, r0, r1
    2e62:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2e64:	2204      	movs	r2, #4
    2e66:	4b59      	ldr	r3, [pc, #356]	; (2fcc <usbdc_cb_ctl_req+0x2f8>)
    2e68:	4798      	blx	r3
    2e6a:	2800      	cmp	r0, #0
    2e6c:	d03c      	beq.n	2ee8 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2e6e:	4e57      	ldr	r6, [pc, #348]	; (2fcc <usbdc_cb_ctl_req+0x2f8>)
    2e70:	e008      	b.n	2e84 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    2e72:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    2e74:	7803      	ldrb	r3, [r0, #0]
    2e76:	18c0      	adds	r0, r0, r3
    2e78:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2e7a:	2204      	movs	r2, #4
    2e7c:	9903      	ldr	r1, [sp, #12]
    2e7e:	47b0      	blx	r6
		if (NULL == ifc) {
    2e80:	2800      	cmp	r0, #0
    2e82:	d033      	beq.n	2eec <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    2e84:	7883      	ldrb	r3, [r0, #2]
    2e86:	42a3      	cmp	r3, r4
    2e88:	d1f3      	bne.n	2e72 <usbdc_cb_ctl_req+0x19e>
    2e8a:	78c3      	ldrb	r3, [r0, #3]
    2e8c:	42ab      	cmp	r3, r5
    2e8e:	d1f0      	bne.n	2e72 <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    2e90:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    2e92:	4b4c      	ldr	r3, [pc, #304]	; (2fc4 <usbdc_cb_ctl_req+0x2f0>)
    2e94:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    2e96:	2e00      	cmp	r6, #0
    2e98:	d02a      	beq.n	2ef0 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    2e9a:	aa02      	add	r2, sp, #8
    2e9c:	2101      	movs	r1, #1
    2e9e:	0030      	movs	r0, r6
    2ea0:	6873      	ldr	r3, [r6, #4]
    2ea2:	4798      	blx	r3
    2ea4:	2800      	cmp	r0, #0
    2ea6:	d004      	beq.n	2eb2 <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    2ea8:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    2eaa:	2e00      	cmp	r6, #0
    2eac:	d1f5      	bne.n	2e9a <usbdc_cb_ctl_req+0x1c6>
	return false;
    2eae:	2300      	movs	r3, #0
    2eb0:	e72a      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2eb2:	6873      	ldr	r3, [r6, #4]
    2eb4:	aa02      	add	r2, sp, #8
    2eb6:	2100      	movs	r1, #0
    2eb8:	0030      	movs	r0, r6
    2eba:	4798      	blx	r3
			return false;
    2ebc:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2ebe:	2800      	cmp	r0, #0
    2ec0:	d000      	beq.n	2ec4 <usbdc_cb_ctl_req+0x1f0>
    2ec2:	e721      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    2ec4:	2d00      	cmp	r5, #0
    2ec6:	d005      	beq.n	2ed4 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    2ec8:	493e      	ldr	r1, [pc, #248]	; (2fc4 <usbdc_cb_ctl_req+0x2f0>)
    2eca:	2201      	movs	r2, #1
    2ecc:	40a2      	lsls	r2, r4
    2ece:	7f4b      	ldrb	r3, [r1, #29]
    2ed0:	4313      	orrs	r3, r2
    2ed2:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    2ed4:	2300      	movs	r3, #0
    2ed6:	2200      	movs	r2, #0
    2ed8:	2100      	movs	r1, #0
    2eda:	2000      	movs	r0, #0
    2edc:	4c38      	ldr	r4, [pc, #224]	; (2fc0 <usbdc_cb_ctl_req+0x2ec>)
    2ede:	47a0      	blx	r4
			return true;
    2ee0:	2301      	movs	r3, #1
    2ee2:	e711      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		return false;
    2ee4:	2300      	movs	r3, #0
    2ee6:	e70f      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		return false;
    2ee8:	2300      	movs	r3, #0
    2eea:	e70d      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
			return false;
    2eec:	2300      	movs	r3, #0
    2eee:	e70b      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
	return false;
    2ef0:	2300      	movs	r3, #0
    2ef2:	e709      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    2ef4:	7863      	ldrb	r3, [r4, #1]
    2ef6:	2b06      	cmp	r3, #6
    2ef8:	d033      	beq.n	2f62 <usbdc_cb_ctl_req+0x28e>
    2efa:	b2d9      	uxtb	r1, r3
    2efc:	2906      	cmp	r1, #6
    2efe:	d922      	bls.n	2f46 <usbdc_cb_ctl_req+0x272>
    2f00:	2b08      	cmp	r3, #8
    2f02:	d100      	bne.n	2f06 <usbdc_cb_ctl_req+0x232>
    2f04:	e0af      	b.n	3066 <usbdc_cb_ctl_req+0x392>
    2f06:	2b0a      	cmp	r3, #10
    2f08:	d000      	beq.n	2f0c <usbdc_cb_ctl_req+0x238>
    2f0a:	e0ed      	b.n	30e8 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    2f0c:	4b2d      	ldr	r3, [pc, #180]	; (2fc4 <usbdc_cb_ctl_req+0x2f0>)
    2f0e:	7f5a      	ldrb	r2, [r3, #29]
    2f10:	7921      	ldrb	r1, [r4, #4]
    2f12:	7963      	ldrb	r3, [r4, #5]
    2f14:	021b      	lsls	r3, r3, #8
    2f16:	430b      	orrs	r3, r1
    2f18:	411a      	asrs	r2, r3
    2f1a:	07d3      	lsls	r3, r2, #31
    2f1c:	d400      	bmi.n	2f20 <usbdc_cb_ctl_req+0x24c>
    2f1e:	e0ca      	b.n	30b6 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2f20:	4b28      	ldr	r3, [pc, #160]	; (2fc4 <usbdc_cb_ctl_req+0x2f0>)
    2f22:	691d      	ldr	r5, [r3, #16]
	return false;
    2f24:	2300      	movs	r3, #0
	while (NULL != func) {
    2f26:	2d00      	cmp	r5, #0
    2f28:	d100      	bne.n	2f2c <usbdc_cb_ctl_req+0x258>
    2f2a:	e6ed      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    2f2c:	0022      	movs	r2, r4
    2f2e:	2102      	movs	r1, #2
    2f30:	0028      	movs	r0, r5
    2f32:	686b      	ldr	r3, [r5, #4]
    2f34:	4798      	blx	r3
    2f36:	2800      	cmp	r0, #0
    2f38:	db00      	blt.n	2f3c <usbdc_cb_ctl_req+0x268>
    2f3a:	e0c8      	b.n	30ce <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    2f3c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2f3e:	2d00      	cmp	r5, #0
    2f40:	d1f4      	bne.n	2f2c <usbdc_cb_ctl_req+0x258>
	return false;
    2f42:	2300      	movs	r3, #0
    2f44:	e6e0      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    2f46:	2b00      	cmp	r3, #0
    2f48:	d000      	beq.n	2f4c <usbdc_cb_ctl_req+0x278>
    2f4a:	e0cd      	b.n	30e8 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2f4c:	231f      	movs	r3, #31
    2f4e:	401a      	ands	r2, r3
    2f50:	b2d3      	uxtb	r3, r2
    2f52:	2b01      	cmp	r3, #1
    2f54:	d800      	bhi.n	2f58 <usbdc_cb_ctl_req+0x284>
    2f56:	e092      	b.n	307e <usbdc_cb_ctl_req+0x3aa>
    2f58:	2a02      	cmp	r2, #2
    2f5a:	d100      	bne.n	2f5e <usbdc_cb_ctl_req+0x28a>
    2f5c:	e09f      	b.n	309e <usbdc_cb_ctl_req+0x3ca>
		return false;
    2f5e:	2300      	movs	r3, #0
    2f60:	e6d2      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    2f62:	78a3      	ldrb	r3, [r4, #2]
    2f64:	78e2      	ldrb	r2, [r4, #3]
    2f66:	0212      	lsls	r2, r2, #8
    2f68:	431a      	orrs	r2, r3
    2f6a:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    2f6c:	2b02      	cmp	r3, #2
    2f6e:	d033      	beq.n	2fd8 <usbdc_cb_ctl_req+0x304>
    2f70:	2b03      	cmp	r3, #3
    2f72:	d056      	beq.n	3022 <usbdc_cb_ctl_req+0x34e>
    2f74:	2b01      	cmp	r3, #1
    2f76:	d001      	beq.n	2f7c <usbdc_cb_ctl_req+0x2a8>
	return false;
    2f78:	2300      	movs	r3, #0
    2f7a:	e6c5      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    2f7c:	79a2      	ldrb	r2, [r4, #6]
    2f7e:	79e3      	ldrb	r3, [r4, #7]
    2f80:	021b      	lsls	r3, r3, #8
    2f82:	4313      	orrs	r3, r2
    2f84:	1c1a      	adds	r2, r3, #0
    2f86:	2b12      	cmp	r3, #18
    2f88:	d900      	bls.n	2f8c <usbdc_cb_ctl_req+0x2b8>
    2f8a:	2212      	movs	r2, #18
    2f8c:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2f8e:	4b0d      	ldr	r3, [pc, #52]	; (2fc4 <usbdc_cb_ctl_req+0x2f0>)
    2f90:	681b      	ldr	r3, [r3, #0]
    2f92:	6859      	ldr	r1, [r3, #4]
    2f94:	6818      	ldr	r0, [r3, #0]
    2f96:	2201      	movs	r2, #1
    2f98:	4b0c      	ldr	r3, [pc, #48]	; (2fcc <usbdc_cb_ctl_req+0x2f8>)
    2f9a:	4798      	blx	r3
	if (!dev_desc) {
    2f9c:	2800      	cmp	r0, #0
    2f9e:	d100      	bne.n	2fa2 <usbdc_cb_ctl_req+0x2ce>
    2fa0:	e0a4      	b.n	30ec <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2fa2:	2300      	movs	r3, #0
    2fa4:	0022      	movs	r2, r4
    2fa6:	0001      	movs	r1, r0
    2fa8:	0028      	movs	r0, r5
    2faa:	4c05      	ldr	r4, [pc, #20]	; (2fc0 <usbdc_cb_ctl_req+0x2ec>)
    2fac:	47a0      	blx	r4
    2fae:	4243      	negs	r3, r0
    2fb0:	4143      	adcs	r3, r0
    2fb2:	b2db      	uxtb	r3, r3
    2fb4:	e6a8      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	00002b5d 	.word	0x00002b5d
    2fbc:	00003490 	.word	0x00003490
    2fc0:	00002cb9 	.word	0x00002cb9
    2fc4:	20000318 	.word	0x20000318
    2fc8:	000032a1 	.word	0x000032a1
    2fcc:	00003225 	.word	0x00003225
    2fd0:	00002b15 	.word	0x00002b15
    2fd4:	00000e31 	.word	0x00000e31
	uint16_t length   = req->wLength;
    2fd8:	79a3      	ldrb	r3, [r4, #6]
    2fda:	79e6      	ldrb	r6, [r4, #7]
    2fdc:	0236      	lsls	r6, r6, #8
    2fde:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2fe0:	4b46      	ldr	r3, [pc, #280]	; (30fc <usbdc_cb_ctl_req+0x428>)
    2fe2:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2fe4:	681b      	ldr	r3, [r3, #0]
    2fe6:	3201      	adds	r2, #1
    2fe8:	b2d2      	uxtb	r2, r2
    2fea:	6859      	ldr	r1, [r3, #4]
    2fec:	6818      	ldr	r0, [r3, #0]
    2fee:	4b44      	ldr	r3, [pc, #272]	; (3100 <usbdc_cb_ctl_req+0x42c>)
    2ff0:	4798      	blx	r3
    2ff2:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    2ff4:	d07c      	beq.n	30f0 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    2ff6:	78c3      	ldrb	r3, [r0, #3]
    2ff8:	021b      	lsls	r3, r3, #8
    2ffa:	7884      	ldrb	r4, [r0, #2]
    2ffc:	18e4      	adds	r4, r4, r3
    2ffe:	b2a4      	uxth	r4, r4
		need_zlp = false;
    3000:	2300      	movs	r3, #0
	if (length <= total_len) {
    3002:	42a6      	cmp	r6, r4
    3004:	d905      	bls.n	3012 <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3006:	3f01      	subs	r7, #1
    3008:	403e      	ands	r6, r7
    300a:	4273      	negs	r3, r6
    300c:	4173      	adcs	r3, r6
    300e:	b2db      	uxtb	r3, r3
		length = total_len;
    3010:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    3012:	0032      	movs	r2, r6
    3014:	0028      	movs	r0, r5
    3016:	4c3b      	ldr	r4, [pc, #236]	; (3104 <usbdc_cb_ctl_req+0x430>)
    3018:	47a0      	blx	r4
    301a:	4243      	negs	r3, r0
    301c:	4143      	adcs	r3, r0
    301e:	b2db      	uxtb	r3, r3
    3020:	e672      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3022:	79a3      	ldrb	r3, [r4, #6]
    3024:	79e1      	ldrb	r1, [r4, #7]
    3026:	0209      	lsls	r1, r1, #8
    3028:	4319      	orrs	r1, r3
    302a:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    302c:	4b33      	ldr	r3, [pc, #204]	; (30fc <usbdc_cb_ctl_req+0x428>)
    302e:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3030:	681b      	ldr	r3, [r3, #0]
    3032:	b2d2      	uxtb	r2, r2
    3034:	6859      	ldr	r1, [r3, #4]
    3036:	6818      	ldr	r0, [r3, #0]
    3038:	4b33      	ldr	r3, [pc, #204]	; (3108 <usbdc_cb_ctl_req+0x434>)
    303a:	4798      	blx	r3
    303c:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    303e:	d059      	beq.n	30f4 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    3040:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    3042:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    3044:	4294      	cmp	r4, r2
    3046:	d906      	bls.n	3056 <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3048:	1e73      	subs	r3, r6, #1
    304a:	4023      	ands	r3, r4
    304c:	0018      	movs	r0, r3
    304e:	4243      	negs	r3, r0
    3050:	4143      	adcs	r3, r0
    3052:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    3054:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    3056:	0022      	movs	r2, r4
    3058:	0028      	movs	r0, r5
    305a:	4c2a      	ldr	r4, [pc, #168]	; (3104 <usbdc_cb_ctl_req+0x430>)
    305c:	47a0      	blx	r4
    305e:	4243      	negs	r3, r0
    3060:	4143      	adcs	r3, r0
    3062:	b2db      	uxtb	r3, r3
    3064:	e650      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    3066:	4b25      	ldr	r3, [pc, #148]	; (30fc <usbdc_cb_ctl_req+0x428>)
    3068:	7eda      	ldrb	r2, [r3, #27]
    306a:	6959      	ldr	r1, [r3, #20]
    306c:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    306e:	6959      	ldr	r1, [r3, #20]
    3070:	2300      	movs	r3, #0
    3072:	2201      	movs	r2, #1
    3074:	0028      	movs	r0, r5
    3076:	4c23      	ldr	r4, [pc, #140]	; (3104 <usbdc_cb_ctl_req+0x430>)
    3078:	47a0      	blx	r4
		return true;
    307a:	2301      	movs	r3, #1
    307c:	e644      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		st = 0;
    307e:	2300      	movs	r3, #0
    3080:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    3082:	4c1e      	ldr	r4, [pc, #120]	; (30fc <usbdc_cb_ctl_req+0x428>)
    3084:	2202      	movs	r2, #2
    3086:	a902      	add	r1, sp, #8
    3088:	6960      	ldr	r0, [r4, #20]
    308a:	4b20      	ldr	r3, [pc, #128]	; (310c <usbdc_cb_ctl_req+0x438>)
    308c:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    308e:	6961      	ldr	r1, [r4, #20]
    3090:	2300      	movs	r3, #0
    3092:	2202      	movs	r2, #2
    3094:	0028      	movs	r0, r5
    3096:	4c1b      	ldr	r4, [pc, #108]	; (3104 <usbdc_cb_ctl_req+0x430>)
    3098:	47a0      	blx	r4
	return true;
    309a:	2301      	movs	r3, #1
    309c:	e634      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    309e:	7920      	ldrb	r0, [r4, #4]
    30a0:	2102      	movs	r1, #2
    30a2:	4b1b      	ldr	r3, [pc, #108]	; (3110 <usbdc_cb_ctl_req+0x43c>)
    30a4:	4798      	blx	r3
		if (st < 0) {
    30a6:	2800      	cmp	r0, #0
    30a8:	db03      	blt.n	30b2 <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    30aa:	2301      	movs	r3, #1
    30ac:	4018      	ands	r0, r3
    30ae:	9002      	str	r0, [sp, #8]
    30b0:	e7e7      	b.n	3082 <usbdc_cb_ctl_req+0x3ae>
			return false;
    30b2:	2300      	movs	r3, #0
    30b4:	e628      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    30b6:	4b11      	ldr	r3, [pc, #68]	; (30fc <usbdc_cb_ctl_req+0x428>)
    30b8:	2200      	movs	r2, #0
    30ba:	6959      	ldr	r1, [r3, #20]
    30bc:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    30be:	6959      	ldr	r1, [r3, #20]
    30c0:	2300      	movs	r3, #0
    30c2:	3201      	adds	r2, #1
    30c4:	2000      	movs	r0, #0
    30c6:	4c0f      	ldr	r4, [pc, #60]	; (3104 <usbdc_cb_ctl_req+0x430>)
    30c8:	47a0      	blx	r4
		return true;
    30ca:	2301      	movs	r3, #1
    30cc:	e61c      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    30ce:	4b0b      	ldr	r3, [pc, #44]	; (30fc <usbdc_cb_ctl_req+0x428>)
    30d0:	695a      	ldr	r2, [r3, #20]
    30d2:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    30d4:	6959      	ldr	r1, [r3, #20]
    30d6:	2300      	movs	r3, #0
    30d8:	2201      	movs	r2, #1
    30da:	2000      	movs	r0, #0
    30dc:	4c09      	ldr	r4, [pc, #36]	; (3104 <usbdc_cb_ctl_req+0x430>)
    30de:	47a0      	blx	r4
			return true;
    30e0:	2301      	movs	r3, #1
    30e2:	e611      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		return false;
    30e4:	2300      	movs	r3, #0
    30e6:	e60f      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		return false;
    30e8:	2300      	movs	r3, #0
    30ea:	e60d      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		return false;
    30ec:	2300      	movs	r3, #0
    30ee:	e60b      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		return false;
    30f0:	2300      	movs	r3, #0
    30f2:	e609      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
		return false;
    30f4:	2300      	movs	r3, #0
    30f6:	e607      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
			return false;
    30f8:	2300      	movs	r3, #0
    30fa:	e605      	b.n	2d08 <usbdc_cb_ctl_req+0x34>
    30fc:	20000318 	.word	0x20000318
    3100:	000032a1 	.word	0x000032a1
    3104:	00002cb9 	.word	0x00002cb9
    3108:	00003309 	.word	0x00003309
    310c:	000033cd 	.word	0x000033cd
    3110:	00000e31 	.word	0x00000e31

00003114 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3114:	b510      	push	{r4, lr}
	switch (type) {
    3116:	2801      	cmp	r0, #1
    3118:	d009      	beq.n	312e <usbdc_register_handler+0x1a>
    311a:	2800      	cmp	r0, #0
    311c:	d002      	beq.n	3124 <usbdc_register_handler+0x10>
    311e:	2802      	cmp	r0, #2
    3120:	d00a      	beq.n	3138 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    3122:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3124:	4807      	ldr	r0, [pc, #28]	; (3144 <usbdc_register_handler+0x30>)
    3126:	3004      	adds	r0, #4
    3128:	4b07      	ldr	r3, [pc, #28]	; (3148 <usbdc_register_handler+0x34>)
    312a:	4798      	blx	r3
		break;
    312c:	e7f9      	b.n	3122 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    312e:	4805      	ldr	r0, [pc, #20]	; (3144 <usbdc_register_handler+0x30>)
    3130:	3008      	adds	r0, #8
    3132:	4b05      	ldr	r3, [pc, #20]	; (3148 <usbdc_register_handler+0x34>)
    3134:	4798      	blx	r3
		break;
    3136:	e7f4      	b.n	3122 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    3138:	4802      	ldr	r0, [pc, #8]	; (3144 <usbdc_register_handler+0x30>)
    313a:	300c      	adds	r0, #12
    313c:	4b02      	ldr	r3, [pc, #8]	; (3148 <usbdc_register_handler+0x34>)
    313e:	4798      	blx	r3
}
    3140:	e7ef      	b.n	3122 <usbdc_register_handler+0xe>
    3142:	46c0      	nop			; (mov r8, r8)
    3144:	20000318 	.word	0x20000318
    3148:	00000f15 	.word	0x00000f15

0000314c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    314c:	b570      	push	{r4, r5, r6, lr}
    314e:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    3150:	1e43      	subs	r3, r0, #1
    3152:	4198      	sbcs	r0, r3
    3154:	b2c0      	uxtb	r0, r0
    3156:	4a0c      	ldr	r2, [pc, #48]	; (3188 <usbdc_init+0x3c>)
    3158:	490c      	ldr	r1, [pc, #48]	; (318c <usbdc_init+0x40>)
    315a:	4b0d      	ldr	r3, [pc, #52]	; (3190 <usbdc_init+0x44>)
    315c:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    315e:	4b0d      	ldr	r3, [pc, #52]	; (3194 <usbdc_init+0x48>)
    3160:	4798      	blx	r3
	if (rc < 0) {
    3162:	2800      	cmp	r0, #0
    3164:	db0e      	blt.n	3184 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    3166:	4d0c      	ldr	r5, [pc, #48]	; (3198 <usbdc_init+0x4c>)
    3168:	2220      	movs	r2, #32
    316a:	2100      	movs	r1, #0
    316c:	0028      	movs	r0, r5
    316e:	4b0b      	ldr	r3, [pc, #44]	; (319c <usbdc_init+0x50>)
    3170:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3172:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3174:	490a      	ldr	r1, [pc, #40]	; (31a0 <usbdc_init+0x54>)
    3176:	2000      	movs	r0, #0
    3178:	4c0a      	ldr	r4, [pc, #40]	; (31a4 <usbdc_init+0x58>)
    317a:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    317c:	490a      	ldr	r1, [pc, #40]	; (31a8 <usbdc_init+0x5c>)
    317e:	2001      	movs	r0, #1
    3180:	47a0      	blx	r4

	return 0;
    3182:	2000      	movs	r0, #0
}
    3184:	bd70      	pop	{r4, r5, r6, pc}
    3186:	46c0      	nop			; (mov r8, r8)
    3188:	00000355 	.word	0x00000355
    318c:	000034c0 	.word	0x000034c0
    3190:	00000ee9 	.word	0x00000ee9
    3194:	00000b95 	.word	0x00000b95
    3198:	20000318 	.word	0x20000318
    319c:	000033df 	.word	0x000033df
    31a0:	00002ba1 	.word	0x00002ba1
    31a4:	00000bf9 	.word	0x00000bf9
    31a8:	00002c95 	.word	0x00002c95

000031ac <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    31ac:	b510      	push	{r4, lr}
    31ae:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    31b0:	4802      	ldr	r0, [pc, #8]	; (31bc <usbdc_register_function+0x10>)
    31b2:	3010      	adds	r0, #16
    31b4:	4b02      	ldr	r3, [pc, #8]	; (31c0 <usbdc_register_function+0x14>)
    31b6:	4798      	blx	r3
}
    31b8:	bd10      	pop	{r4, pc}
    31ba:	46c0      	nop			; (mov r8, r8)
    31bc:	20000318 	.word	0x20000318
    31c0:	00000f15 	.word	0x00000f15

000031c4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    31c4:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    31c6:	4b0b      	ldr	r3, [pc, #44]	; (31f4 <usbdc_start+0x30>)
    31c8:	7e9b      	ldrb	r3, [r3, #26]
    31ca:	2b00      	cmp	r3, #0
    31cc:	d10c      	bne.n	31e8 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    31ce:	2800      	cmp	r0, #0
    31d0:	d00d      	beq.n	31ee <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    31d2:	4b08      	ldr	r3, [pc, #32]	; (31f4 <usbdc_start+0x30>)
    31d4:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    31d6:	6802      	ldr	r2, [r0, #0]
    31d8:	79d2      	ldrb	r2, [r2, #7]
    31da:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    31dc:	2201      	movs	r2, #1
    31de:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    31e0:	4b05      	ldr	r3, [pc, #20]	; (31f8 <usbdc_start+0x34>)
    31e2:	4798      	blx	r3
	return ERR_NONE;
    31e4:	2000      	movs	r0, #0
}
    31e6:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    31e8:	2004      	movs	r0, #4
    31ea:	4240      	negs	r0, r0
    31ec:	e7fb      	b.n	31e6 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    31ee:	2009      	movs	r0, #9
    31f0:	4240      	negs	r0, r0
    31f2:	e7f8      	b.n	31e6 <usbdc_start+0x22>
    31f4:	20000318 	.word	0x20000318
    31f8:	00000c05 	.word	0x00000c05

000031fc <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    31fc:	b510      	push	{r4, lr}
	usb_d_attach();
    31fe:	4b01      	ldr	r3, [pc, #4]	; (3204 <usbdc_attach+0x8>)
    3200:	4798      	blx	r3
}
    3202:	bd10      	pop	{r4, pc}
    3204:	00000c11 	.word	0x00000c11

00003208 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    3208:	4b01      	ldr	r3, [pc, #4]	; (3210 <usbdc_get_ctrl_buffer+0x8>)
    320a:	6958      	ldr	r0, [r3, #20]
}
    320c:	4770      	bx	lr
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	20000318 	.word	0x20000318

00003214 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    3214:	4b02      	ldr	r3, [pc, #8]	; (3220 <usbdc_get_state+0xc>)
    3216:	7e98      	ldrb	r0, [r3, #26]
    3218:	06c3      	lsls	r3, r0, #27
    321a:	d500      	bpl.n	321e <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    321c:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    321e:	4770      	bx	lr
    3220:	20000318 	.word	0x20000318

00003224 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    3224:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3226:	4288      	cmp	r0, r1
    3228:	d211      	bcs.n	324e <usb_find_desc+0x2a>
	return desc[0];
    322a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    322c:	2b01      	cmp	r3, #1
    322e:	d910      	bls.n	3252 <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    3230:	7844      	ldrb	r4, [r0, #1]
    3232:	4294      	cmp	r4, r2
    3234:	d00a      	beq.n	324c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    3236:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3238:	4281      	cmp	r1, r0
    323a:	d906      	bls.n	324a <usb_find_desc+0x26>
	return desc[0];
    323c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    323e:	2b01      	cmp	r3, #1
    3240:	d909      	bls.n	3256 <usb_find_desc+0x32>
	return desc[1];
    3242:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3244:	4294      	cmp	r4, r2
    3246:	d1f6      	bne.n	3236 <usb_find_desc+0x12>
    3248:	e000      	b.n	324c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    324a:	2000      	movs	r0, #0
}
    324c:	bd10      	pop	{r4, pc}
	return NULL;
    324e:	2000      	movs	r0, #0
    3250:	e7fc      	b.n	324c <usb_find_desc+0x28>
		_desc_len_check();
    3252:	2000      	movs	r0, #0
    3254:	e7fa      	b.n	324c <usb_find_desc+0x28>
    3256:	2000      	movs	r0, #0
    3258:	e7f8      	b.n	324c <usb_find_desc+0x28>

0000325a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    325a:	4288      	cmp	r0, r1
    325c:	d215      	bcs.n	328a <usb_find_ep_desc+0x30>
	return desc[0];
    325e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3260:	2b01      	cmp	r3, #1
    3262:	d914      	bls.n	328e <usb_find_ep_desc+0x34>
	return desc[1];
    3264:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3266:	2a04      	cmp	r2, #4
    3268:	d013      	beq.n	3292 <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    326a:	2a05      	cmp	r2, #5
    326c:	d00c      	beq.n	3288 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    326e:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3270:	4281      	cmp	r1, r0
    3272:	d908      	bls.n	3286 <usb_find_ep_desc+0x2c>
	return desc[0];
    3274:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3276:	2b01      	cmp	r3, #1
    3278:	d90d      	bls.n	3296 <usb_find_ep_desc+0x3c>
	return desc[1];
    327a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    327c:	2a04      	cmp	r2, #4
    327e:	d00c      	beq.n	329a <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3280:	2a05      	cmp	r2, #5
    3282:	d1f4      	bne.n	326e <usb_find_ep_desc+0x14>
    3284:	e000      	b.n	3288 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3286:	2000      	movs	r0, #0
}
    3288:	4770      	bx	lr
	return NULL;
    328a:	2000      	movs	r0, #0
    328c:	e7fc      	b.n	3288 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    328e:	2000      	movs	r0, #0
    3290:	e7fa      	b.n	3288 <usb_find_ep_desc+0x2e>
	return NULL;
    3292:	2000      	movs	r0, #0
    3294:	e7f8      	b.n	3288 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    3296:	2000      	movs	r0, #0
    3298:	e7f6      	b.n	3288 <usb_find_ep_desc+0x2e>
	return NULL;
    329a:	2000      	movs	r0, #0
    329c:	e7f4      	b.n	3288 <usb_find_ep_desc+0x2e>
	...

000032a0 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    32a0:	b570      	push	{r4, r5, r6, lr}
    32a2:	000c      	movs	r4, r1
    32a4:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    32a6:	2202      	movs	r2, #2
    32a8:	4b16      	ldr	r3, [pc, #88]	; (3304 <usb_find_cfg_desc+0x64>)
    32aa:	4798      	blx	r3
	if (!desc) {
    32ac:	2800      	cmp	r0, #0
    32ae:	d01d      	beq.n	32ec <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    32b0:	4284      	cmp	r4, r0
    32b2:	d91c      	bls.n	32ee <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    32b4:	7803      	ldrb	r3, [r0, #0]
    32b6:	2b01      	cmp	r3, #1
    32b8:	d91b      	bls.n	32f2 <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    32ba:	7843      	ldrb	r3, [r0, #1]
    32bc:	2b02      	cmp	r3, #2
    32be:	d11a      	bne.n	32f6 <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    32c0:	7943      	ldrb	r3, [r0, #5]
    32c2:	42ab      	cmp	r3, r5
    32c4:	d012      	beq.n	32ec <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    32c6:	78c2      	ldrb	r2, [r0, #3]
    32c8:	0212      	lsls	r2, r2, #8
    32ca:	7883      	ldrb	r3, [r0, #2]
    32cc:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    32ce:	b29b      	uxth	r3, r3
    32d0:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    32d2:	4284      	cmp	r4, r0
    32d4:	d909      	bls.n	32ea <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    32d6:	7803      	ldrb	r3, [r0, #0]
    32d8:	2b01      	cmp	r3, #1
    32da:	d90e      	bls.n	32fa <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    32dc:	7843      	ldrb	r3, [r0, #1]
    32de:	2b02      	cmp	r3, #2
    32e0:	d10d      	bne.n	32fe <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    32e2:	7943      	ldrb	r3, [r0, #5]
    32e4:	42ab      	cmp	r3, r5
    32e6:	d1ee      	bne.n	32c6 <usb_find_cfg_desc+0x26>
    32e8:	e000      	b.n	32ec <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    32ea:	2000      	movs	r0, #0
}
    32ec:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    32ee:	2000      	movs	r0, #0
    32f0:	e7fc      	b.n	32ec <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    32f2:	2000      	movs	r0, #0
    32f4:	e7fa      	b.n	32ec <usb_find_cfg_desc+0x4c>
	return NULL;
    32f6:	2000      	movs	r0, #0
    32f8:	e7f8      	b.n	32ec <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    32fa:	2000      	movs	r0, #0
    32fc:	e7f6      	b.n	32ec <usb_find_cfg_desc+0x4c>
	return NULL;
    32fe:	2000      	movs	r0, #0
    3300:	e7f4      	b.n	32ec <usb_find_cfg_desc+0x4c>
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	00003225 	.word	0x00003225

00003308 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    3308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    330a:	000d      	movs	r5, r1
    330c:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    330e:	4288      	cmp	r0, r1
    3310:	d212      	bcs.n	3338 <usb_find_str_desc+0x30>
    3312:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3314:	4e0a      	ldr	r6, [pc, #40]	; (3340 <usb_find_str_desc+0x38>)
    3316:	2203      	movs	r2, #3
    3318:	0029      	movs	r1, r5
    331a:	47b0      	blx	r6
		if (desc) {
    331c:	2800      	cmp	r0, #0
    331e:	d00e      	beq.n	333e <usb_find_str_desc+0x36>
	return desc[0];
    3320:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    3322:	2b01      	cmp	r3, #1
    3324:	d90a      	bls.n	333c <usb_find_str_desc+0x34>
			if (i == str_index) {
    3326:	42a7      	cmp	r7, r4
    3328:	d009      	beq.n	333e <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    332a:	3401      	adds	r4, #1
    332c:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    332e:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    3330:	4285      	cmp	r5, r0
    3332:	d8f0      	bhi.n	3316 <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3334:	2000      	movs	r0, #0
    3336:	e002      	b.n	333e <usb_find_str_desc+0x36>
    3338:	2000      	movs	r0, #0
    333a:	e000      	b.n	333e <usb_find_str_desc+0x36>
			_desc_len_check();
    333c:	2000      	movs	r0, #0
}
    333e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3340:	00003225 	.word	0x00003225

00003344 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3344:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    3346:	4806      	ldr	r0, [pc, #24]	; (3360 <cdc_device_acm_init+0x1c>)
    3348:	3040      	adds	r0, #64	; 0x40
    334a:	4b06      	ldr	r3, [pc, #24]	; (3364 <cdc_device_acm_init+0x20>)
    334c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    334e:	4b06      	ldr	r3, [pc, #24]	; (3368 <cdc_device_acm_init+0x24>)
    3350:	4798      	blx	r3

	usbdc_start(single_desc);
    3352:	4806      	ldr	r0, [pc, #24]	; (336c <cdc_device_acm_init+0x28>)
    3354:	4b06      	ldr	r3, [pc, #24]	; (3370 <cdc_device_acm_init+0x2c>)
    3356:	4798      	blx	r3
	usbdc_attach();
    3358:	4b06      	ldr	r3, [pc, #24]	; (3374 <cdc_device_acm_init+0x30>)
    335a:	4798      	blx	r3
}
    335c:	bd10      	pop	{r4, pc}
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	20000338 	.word	0x20000338
    3364:	0000314d 	.word	0x0000314d
    3368:	00002ad1 	.word	0x00002ad1
    336c:	20000008 	.word	0x20000008
    3370:	000031c5 	.word	0x000031c5
    3374:	000031fd 	.word	0x000031fd

00003378 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3378:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    337a:	4b01      	ldr	r3, [pc, #4]	; (3380 <usb_init+0x8>)
    337c:	4798      	blx	r3
}
    337e:	bd10      	pop	{r4, pc}
    3380:	00003345 	.word	0x00003345

00003384 <__libc_init_array>:
    3384:	b570      	push	{r4, r5, r6, lr}
    3386:	2600      	movs	r6, #0
    3388:	4d0c      	ldr	r5, [pc, #48]	; (33bc <__libc_init_array+0x38>)
    338a:	4c0d      	ldr	r4, [pc, #52]	; (33c0 <__libc_init_array+0x3c>)
    338c:	1b64      	subs	r4, r4, r5
    338e:	10a4      	asrs	r4, r4, #2
    3390:	42a6      	cmp	r6, r4
    3392:	d109      	bne.n	33a8 <__libc_init_array+0x24>
    3394:	2600      	movs	r6, #0
    3396:	f000 f89f 	bl	34d8 <_init>
    339a:	4d0a      	ldr	r5, [pc, #40]	; (33c4 <__libc_init_array+0x40>)
    339c:	4c0a      	ldr	r4, [pc, #40]	; (33c8 <__libc_init_array+0x44>)
    339e:	1b64      	subs	r4, r4, r5
    33a0:	10a4      	asrs	r4, r4, #2
    33a2:	42a6      	cmp	r6, r4
    33a4:	d105      	bne.n	33b2 <__libc_init_array+0x2e>
    33a6:	bd70      	pop	{r4, r5, r6, pc}
    33a8:	00b3      	lsls	r3, r6, #2
    33aa:	58eb      	ldr	r3, [r5, r3]
    33ac:	4798      	blx	r3
    33ae:	3601      	adds	r6, #1
    33b0:	e7ee      	b.n	3390 <__libc_init_array+0xc>
    33b2:	00b3      	lsls	r3, r6, #2
    33b4:	58eb      	ldr	r3, [r5, r3]
    33b6:	4798      	blx	r3
    33b8:	3601      	adds	r6, #1
    33ba:	e7f2      	b.n	33a2 <__libc_init_array+0x1e>
    33bc:	000034e4 	.word	0x000034e4
    33c0:	000034e4 	.word	0x000034e4
    33c4:	000034e4 	.word	0x000034e4
    33c8:	000034e8 	.word	0x000034e8

000033cc <memcpy>:
    33cc:	2300      	movs	r3, #0
    33ce:	b510      	push	{r4, lr}
    33d0:	429a      	cmp	r2, r3
    33d2:	d100      	bne.n	33d6 <memcpy+0xa>
    33d4:	bd10      	pop	{r4, pc}
    33d6:	5ccc      	ldrb	r4, [r1, r3]
    33d8:	54c4      	strb	r4, [r0, r3]
    33da:	3301      	adds	r3, #1
    33dc:	e7f8      	b.n	33d0 <memcpy+0x4>

000033de <memset>:
    33de:	0003      	movs	r3, r0
    33e0:	1882      	adds	r2, r0, r2
    33e2:	4293      	cmp	r3, r2
    33e4:	d100      	bne.n	33e8 <memset+0xa>
    33e6:	4770      	bx	lr
    33e8:	7019      	strb	r1, [r3, #0]
    33ea:	3301      	adds	r3, #1
    33ec:	e7f9      	b.n	33e2 <memset+0x4>
    33ee:	0000      	movs	r0, r0
    33f0:	682f2e2e 	.word	0x682f2e2e
    33f4:	732f6c61 	.word	0x732f6c61
    33f8:	682f6372 	.word	0x682f6372
    33fc:	735f6c61 	.word	0x735f6c61
    3400:	6d5f6970 	.word	0x6d5f6970
    3404:	7973615f 	.word	0x7973615f
    3408:	632e636e 	.word	0x632e636e
    340c:	00000000 	.word	0x00000000
    3410:	682f2e2e 	.word	0x682f2e2e
    3414:	732f6c61 	.word	0x732f6c61
    3418:	682f6372 	.word	0x682f6372
    341c:	755f6c61 	.word	0x755f6c61
    3420:	74726173 	.word	0x74726173
    3424:	6e79735f 	.word	0x6e79735f
    3428:	00632e63 	.word	0x00632e63
    342c:	682f2e2e 	.word	0x682f2e2e
    3430:	752f6c61 	.word	0x752f6c61
    3434:	736c6974 	.word	0x736c6974
    3438:	6372732f 	.word	0x6372732f
    343c:	6974752f 	.word	0x6974752f
    3440:	6c5f736c 	.word	0x6c5f736c
    3444:	2e747369 	.word	0x2e747369
    3448:	00000063 	.word	0x00000063
    344c:	682f2e2e 	.word	0x682f2e2e
    3450:	732f6c70 	.word	0x732f6c70
    3454:	6f637265 	.word	0x6f637265
    3458:	70682f6d 	.word	0x70682f6d
    345c:	65735f6c 	.word	0x65735f6c
    3460:	6d6f6372 	.word	0x6d6f6372
    3464:	0000632e 	.word	0x0000632e
    3468:	00002000 	.word	0x00002000

0000346c <_usb_ep_cfgs>:
    346c:	200002b4 00000000 00000040 20000274     ... ....@...t.. 
    347c:	00000000 00000040 20000234 00000000     ....@...4.. ....
    348c:	00000040 000030e4 00002dcc 000030e4     @....0...-...0..
    349c:	00002dfe 000030e4 00002d22 000030e4     .-...0.."-...0..
    34ac:	000030e4 000030e4 00002d36 000030e4     .0...0..6-...0..
    34bc:	00002e32 752f2e2e 642f6273 63697665     2...../usb/devic
    34cc:	73752f65 2e636462 00000063              e/usbdc.c...

000034d8 <_init>:
    34d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    34de:	bc08      	pop	{r3}
    34e0:	469e      	mov	lr, r3
    34e2:	4770      	bx	lr

000034e4 <__init_array_start>:
    34e4:	000000dd 	.word	0x000000dd

000034e8 <_fini>:
    34e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    34ee:	bc08      	pop	{r3}
    34f0:	469e      	mov	lr, r3
    34f2:	4770      	bx	lr

000034f4 <__fini_array_start>:
    34f4:	000000b5 	.word	0x000000b5
