
CppTestDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d50  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004ac  20000000  00003d50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000420  200004ac  000041fc  000204ac  2**2
                  ALLOC
  3 .stack        00002004  200008cc  0000461c  000204ac  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00031dde  00000000  00000000  0002052d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003efa  00000000  00000000  0005230b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00014acc  00000000  00000000  00056205  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000df8  00000000  00000000  0006acd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001758  00000000  00000000  0006bac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d62f  00000000  00000000  0006d221  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013edf  00000000  00000000  0008a850  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e5cf  00000000  00000000  0009e72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000026a0  00000000  00000000  0012cd00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 28 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .(. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	19 27 00 00 15 01 00 00 a5 11 00 00 15 01 00 00     .'..............
      6c:	f5 11 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004ac 	.word	0x200004ac
      d4:	00000000 	.word	0x00000000
      d8:	00003d50 	.word	0x00003d50

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004b0 	.word	0x200004b0
     108:	00003d50 	.word	0x00003d50
     10c:	00003d50 	.word	0x00003d50
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00003d50 	.word	0x00003d50
     1c8:	20000000 	.word	0x20000000
     1cc:	200004ac 	.word	0x200004ac
     1d0:	20000004 	.word	0x20000004
     1d4:	200004ac 	.word	0x200004ac
     1d8:	200008cc 	.word	0x200008cc
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	0000394d 	.word	0x0000394d
     1f8:	00000209 	.word	0x00000209

000001fc <_ZL13tx_cb_USART_0PK22usart_async_descriptor>:
static uint8_t example_SPI_0[] = "Hello World!";
bool ready=true;

static void tx_cb_USART_0(const struct usart_async_descriptor *const io_descr)
{
	ready=true;
     1fc:	2201      	movs	r2, #1
     1fe:	4b01      	ldr	r3, [pc, #4]	; (204 <_ZL13tx_cb_USART_0PK22usart_async_descriptor+0x8>)
     200:	701a      	strb	r2, [r3, #0]
	/* Transfer completed */
}
     202:	4770      	bx	lr
     204:	20000000 	.word	0x20000000

00000208 <main>:
int main(void)
{
     208:	b5f0      	push	{r4, r5, r6, r7, lr}
     20a:	b083      	sub	sp, #12
	/* Replace with your application code */
	atmel_start_init();
     20c:	4b10      	ldr	r3, [pc, #64]	; (250 <main+0x48>)
     20e:	4798      	blx	r3
	while (1)
	{
		struct io_descriptor *io;

		usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, tx_cb_USART_0);
     210:	4e10      	ldr	r6, [pc, #64]	; (254 <main+0x4c>)
	/*usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, rx_cb);
	usart_async_register_callback(&USART_0, USART_ASYNC_ERROR_CB, err_cb);*/
	usart_async_get_io_descriptor(&USART_0, &io);
	usart_async_enable(&USART_0);
	while(!ready);
	ready=false;
     212:	4f11      	ldr	r7, [pc, #68]	; (258 <main+0x50>)
		io_write(io, example_SPI_0, 12);
     214:	1d3d      	adds	r5, r7, #4
		usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, tx_cb_USART_0);
     216:	4c11      	ldr	r4, [pc, #68]	; (25c <main+0x54>)
     218:	0032      	movs	r2, r6
     21a:	2101      	movs	r1, #1
     21c:	0020      	movs	r0, r4
     21e:	4b10      	ldr	r3, [pc, #64]	; (260 <main+0x58>)
     220:	4798      	blx	r3
	usart_async_get_io_descriptor(&USART_0, &io);
     222:	a901      	add	r1, sp, #4
     224:	0020      	movs	r0, r4
     226:	4b0f      	ldr	r3, [pc, #60]	; (264 <main+0x5c>)
     228:	4798      	blx	r3
	usart_async_enable(&USART_0);
     22a:	0020      	movs	r0, r4
     22c:	4b0e      	ldr	r3, [pc, #56]	; (268 <main+0x60>)
     22e:	4798      	blx	r3
	while(!ready);
     230:	4b09      	ldr	r3, [pc, #36]	; (258 <main+0x50>)
     232:	781b      	ldrb	r3, [r3, #0]
     234:	2b00      	cmp	r3, #0
     236:	d0fd      	beq.n	234 <main+0x2c>
	ready=false;
     238:	2300      	movs	r3, #0
     23a:	703b      	strb	r3, [r7, #0]
		io_write(io, example_SPI_0, 12);
     23c:	220c      	movs	r2, #12
     23e:	0029      	movs	r1, r5
     240:	9801      	ldr	r0, [sp, #4]
     242:	4b0a      	ldr	r3, [pc, #40]	; (26c <main+0x64>)
     244:	4798      	blx	r3
		delay_ms(100);
     246:	2064      	movs	r0, #100	; 0x64
     248:	4b09      	ldr	r3, [pc, #36]	; (270 <main+0x68>)
     24a:	4798      	blx	r3
	}
     24c:	e7e3      	b.n	216 <main+0xe>
     24e:	46c0      	nop			; (mov r8, r8)
     250:	00000275 	.word	0x00000275
     254:	000001fd 	.word	0x000001fd
     258:	20000000 	.word	0x20000000
     25c:	20000858 	.word	0x20000858
     260:	00002c49 	.word	0x00002c49
     264:	00002c1d 	.word	0x00002c1d
     268:	00002bf1 	.word	0x00002bf1
     26c:	0000067d 	.word	0x0000067d
     270:	0000065d 	.word	0x0000065d

00000274 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     274:	b510      	push	{r4, lr}
	system_init();
     276:	4b02      	ldr	r3, [pc, #8]	; (280 <atmel_start_init+0xc>)
     278:	4798      	blx	r3
	usb_init();
     27a:	4b02      	ldr	r3, [pc, #8]	; (284 <atmel_start_init+0x10>)
     27c:	4798      	blx	r3
}
     27e:	bd10      	pop	{r4, pc}
     280:	00000505 	.word	0x00000505
     284:	00002989 	.word	0x00002989

00000288 <SPI_0_PORT_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct spi_m_async_descriptor SPI_0;

void SPI_0_PORT_init(void)
{
     288:	b5f0      	push	{r4, r5, r6, r7, lr}
     28a:	46ce      	mov	lr, r9
     28c:	4647      	mov	r7, r8
     28e:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     290:	21c0      	movs	r1, #192	; 0xc0
     292:	05c9      	lsls	r1, r1, #23
     294:	2380      	movs	r3, #128	; 0x80
     296:	009b      	lsls	r3, r3, #2
     298:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     29a:	4b25      	ldr	r3, [pc, #148]	; (330 <SPI_0_PORT_init+0xa8>)
     29c:	4a25      	ldr	r2, [pc, #148]	; (334 <SPI_0_PORT_init+0xac>)
     29e:	629a      	str	r2, [r3, #40]	; 0x28
     2a0:	4a25      	ldr	r2, [pc, #148]	; (338 <SPI_0_PORT_init+0xb0>)
     2a2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     2a4:	2449      	movs	r4, #73	; 0x49
     2a6:	5d1a      	ldrb	r2, [r3, r4]
     2a8:	2004      	movs	r0, #4
     2aa:	4382      	bics	r2, r0
     2ac:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2ae:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2b0:	2601      	movs	r6, #1
     2b2:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2b4:	2201      	movs	r2, #1
     2b6:	4310      	orrs	r0, r2
     2b8:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2ba:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2bc:	2734      	movs	r7, #52	; 0x34
     2be:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2c0:	250f      	movs	r5, #15
     2c2:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     2c4:	2420      	movs	r4, #32
     2c6:	46a1      	mov	r9, r4
     2c8:	464c      	mov	r4, r9
     2ca:	4320      	orrs	r0, r4
     2cc:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ce:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2d0:	2080      	movs	r0, #128	; 0x80
     2d2:	00c0      	lsls	r0, r0, #3
     2d4:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2d6:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2d8:	4818      	ldr	r0, [pc, #96]	; (33c <SPI_0_PORT_init+0xb4>)
     2da:	6298      	str	r0, [r3, #40]	; 0x28
     2dc:	20c0      	movs	r0, #192	; 0xc0
     2de:	0600      	lsls	r0, r0, #24
     2e0:	4684      	mov	ip, r0
     2e2:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2e4:	3716      	adds	r7, #22
     2e6:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2e8:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2ea:	4310      	orrs	r0, r2
     2ec:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2ee:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2f0:	2035      	movs	r0, #53	; 0x35
     2f2:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2f4:	240f      	movs	r4, #15
     2f6:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
     2f8:	3c0d      	subs	r4, #13
     2fa:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2fc:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2fe:	2780      	movs	r7, #128	; 0x80
     300:	013f      	lsls	r7, r7, #4
     302:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     304:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     306:	490e      	ldr	r1, [pc, #56]	; (340 <SPI_0_PORT_init+0xb8>)
     308:	6299      	str	r1, [r3, #40]	; 0x28
     30a:	4661      	mov	r1, ip
     30c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     30e:	274b      	movs	r7, #75	; 0x4b
     310:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     312:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     314:	4311      	orrs	r1, r2
     316:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     318:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     31a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     31c:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     31e:	4649      	mov	r1, r9
     320:	430a      	orrs	r2, r1
     322:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     324:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
     326:	bc0c      	pop	{r2, r3}
     328:	4690      	mov	r8, r2
     32a:	4699      	mov	r9, r3
     32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     32e:	46c0      	nop			; (mov r8, r8)
     330:	41004400 	.word	0x41004400
     334:	40020200 	.word	0x40020200
     338:	c0020000 	.word	0xc0020000
     33c:	40000400 	.word	0x40000400
     340:	40000800 	.word	0x40000800

00000344 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     344:	4a04      	ldr	r2, [pc, #16]	; (358 <SPI_0_CLOCK_init+0x14>)
     346:	6a13      	ldr	r3, [r2, #32]
     348:	2104      	movs	r1, #4
     34a:	430b      	orrs	r3, r1
     34c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     34e:	4a03      	ldr	r2, [pc, #12]	; (35c <SPI_0_CLOCK_init+0x18>)
     350:	4b03      	ldr	r3, [pc, #12]	; (360 <SPI_0_CLOCK_init+0x1c>)
     352:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     354:	4770      	bx	lr
     356:	46c0      	nop			; (mov r8, r8)
     358:	40000400 	.word	0x40000400
     35c:	00004014 	.word	0x00004014
     360:	40000c00 	.word	0x40000c00

00000364 <SPI_0_init>:

void SPI_0_init(void)
{
     364:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     366:	4b04      	ldr	r3, [pc, #16]	; (378 <SPI_0_init+0x14>)
     368:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     36a:	4904      	ldr	r1, [pc, #16]	; (37c <SPI_0_init+0x18>)
     36c:	4804      	ldr	r0, [pc, #16]	; (380 <SPI_0_init+0x1c>)
     36e:	4b05      	ldr	r3, [pc, #20]	; (384 <SPI_0_init+0x20>)
     370:	4798      	blx	r3
	SPI_0_PORT_init();
     372:	4b05      	ldr	r3, [pc, #20]	; (388 <SPI_0_init+0x24>)
     374:	4798      	blx	r3
}
     376:	bd10      	pop	{r4, pc}
     378:	00000345 	.word	0x00000345
     37c:	42000800 	.word	0x42000800
     380:	20000810 	.word	0x20000810
     384:	000008ad 	.word	0x000008ad
     388:	00000289 	.word	0x00000289

0000038c <USART_0_CLOCK_init>:
     38c:	4a04      	ldr	r2, [pc, #16]	; (3a0 <USART_0_CLOCK_init+0x14>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	2110      	movs	r1, #16
     392:	430b      	orrs	r3, r1
     394:	6213      	str	r3, [r2, #32]
     396:	4a03      	ldr	r2, [pc, #12]	; (3a4 <USART_0_CLOCK_init+0x18>)
     398:	4b03      	ldr	r3, [pc, #12]	; (3a8 <USART_0_CLOCK_init+0x1c>)
     39a:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
}
     39c:	4770      	bx	lr
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	40000400 	.word	0x40000400
     3a4:	00004016 	.word	0x00004016
     3a8:	40000c00 	.word	0x40000c00

000003ac <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     3ac:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ae:	4b0e      	ldr	r3, [pc, #56]	; (3e8 <USART_0_PORT_init+0x3c>)
     3b0:	224c      	movs	r2, #76	; 0x4c
     3b2:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b4:	2501      	movs	r5, #1
     3b6:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b8:	2401      	movs	r4, #1
     3ba:	4321      	orrs	r1, r4
     3bc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c0:	2036      	movs	r0, #54	; 0x36
     3c2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c4:	3a3d      	subs	r2, #61	; 0x3d
     3c6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3c8:	3a0d      	subs	r2, #13
     3ca:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3cc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ce:	214d      	movs	r1, #77	; 0x4d
     3d0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d2:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d4:	4322      	orrs	r2, r4
     3d6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3da:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3dc:	393e      	subs	r1, #62	; 0x3e
     3de:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3e0:	3111      	adds	r1, #17
     3e2:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e4:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
}
     3e6:	bd30      	pop	{r4, r5, pc}
     3e8:	41004400 	.word	0x41004400

000003ec <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     3ec:	b510      	push	{r4, lr}
     3ee:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     3f0:	4b06      	ldr	r3, [pc, #24]	; (40c <USART_0_init+0x20>)
     3f2:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM2, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     3f4:	2300      	movs	r3, #0
     3f6:	9300      	str	r3, [sp, #0]
     3f8:	3310      	adds	r3, #16
     3fa:	4a05      	ldr	r2, [pc, #20]	; (410 <USART_0_init+0x24>)
     3fc:	4905      	ldr	r1, [pc, #20]	; (414 <USART_0_init+0x28>)
     3fe:	4806      	ldr	r0, [pc, #24]	; (418 <USART_0_init+0x2c>)
     400:	4c06      	ldr	r4, [pc, #24]	; (41c <USART_0_init+0x30>)
     402:	47a0      	blx	r4
	USART_0_PORT_init();
     404:	4b06      	ldr	r3, [pc, #24]	; (420 <USART_0_init+0x34>)
     406:	4798      	blx	r3
}
     408:	b002      	add	sp, #8
     40a:	bd10      	pop	{r4, pc}
     40c:	0000038d 	.word	0x0000038d
     410:	200004c8 	.word	0x200004c8
     414:	42001000 	.word	0x42001000
     418:	20000858 	.word	0x20000858
     41c:	00002b59 	.word	0x00002b59
     420:	000003ad 	.word	0x000003ad

00000424 <delay_driver_init>:

void delay_driver_init(void)
{
     424:	b510      	push	{r4, lr}
	delay_init(SysTick);
     426:	4802      	ldr	r0, [pc, #8]	; (430 <delay_driver_init+0xc>)
     428:	4b02      	ldr	r3, [pc, #8]	; (434 <delay_driver_init+0x10>)
     42a:	4798      	blx	r3
}
     42c:	bd10      	pop	{r4, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	e000e010 	.word	0xe000e010
     434:	00000649 	.word	0x00000649

00000438 <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
     438:	b5f0      	push	{r4, r5, r6, r7, lr}
     43a:	46c6      	mov	lr, r8
     43c:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     43e:	24c0      	movs	r4, #192	; 0xc0
     440:	05e4      	lsls	r4, r4, #23
     442:	2280      	movs	r2, #128	; 0x80
     444:	0452      	lsls	r2, r2, #17
     446:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     448:	4b1a      	ldr	r3, [pc, #104]	; (4b4 <USB_0_PORT_init+0x7c>)
     44a:	2780      	movs	r7, #128	; 0x80
     44c:	05ff      	lsls	r7, r7, #23
     44e:	629f      	str	r7, [r3, #40]	; 0x28
     450:	4919      	ldr	r1, [pc, #100]	; (4b8 <USB_0_PORT_init+0x80>)
     452:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     454:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     456:	2058      	movs	r0, #88	; 0x58
     458:	5c19      	ldrb	r1, [r3, r0]
     45a:	2204      	movs	r2, #4
     45c:	4690      	mov	r8, r2
     45e:	4391      	bics	r1, r2
     460:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     462:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     464:	2601      	movs	r6, #1
     466:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     468:	2501      	movs	r5, #1
     46a:	4329      	orrs	r1, r5
     46c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     46e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     470:	381c      	subs	r0, #28
     472:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     474:	320b      	adds	r2, #11
     476:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     478:	3a09      	subs	r2, #9
     47a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     47c:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     47e:	2180      	movs	r1, #128	; 0x80
     480:	0489      	lsls	r1, r1, #18
     482:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     484:	629f      	str	r7, [r3, #40]	; 0x28
     486:	4f0d      	ldr	r7, [pc, #52]	; (4bc <USB_0_PORT_init+0x84>)
     488:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     48a:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     48c:	2159      	movs	r1, #89	; 0x59
     48e:	5c5c      	ldrb	r4, [r3, r1]
     490:	4642      	mov	r2, r8
     492:	4394      	bics	r4, r2
     494:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     496:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     498:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     49a:	432a      	orrs	r2, r5
     49c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a2:	394a      	subs	r1, #74	; 0x4a
     4a4:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     4a6:	3151      	adds	r1, #81	; 0x51
     4a8:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4aa:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     4ac:	bc04      	pop	{r2}
     4ae:	4690      	mov	r8, r2
     4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4b2:	46c0      	nop			; (mov r8, r8)
     4b4:	41004400 	.word	0x41004400
     4b8:	c0000100 	.word	0xc0000100
     4bc:	c0000200 	.word	0xc0000200

000004c0 <USB_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     4c0:	4b06      	ldr	r3, [pc, #24]	; (4dc <USB_0_CLOCK_init+0x1c>)
     4c2:	69da      	ldr	r2, [r3, #28]
     4c4:	2120      	movs	r1, #32
     4c6:	430a      	orrs	r2, r1
     4c8:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     4ca:	695a      	ldr	r2, [r3, #20]
     4cc:	3120      	adds	r1, #32
     4ce:	430a      	orrs	r2, r1
     4d0:	615a      	str	r2, [r3, #20]
     4d2:	4a03      	ldr	r2, [pc, #12]	; (4e0 <USB_0_CLOCK_init+0x20>)
     4d4:	4b03      	ldr	r3, [pc, #12]	; (4e4 <USB_0_CLOCK_init+0x24>)
     4d6:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     4d8:	4770      	bx	lr
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	40000400 	.word	0x40000400
     4e0:	00004206 	.word	0x00004206
     4e4:	40000c00 	.word	0x40000c00

000004e8 <USB_0_init>:

void USB_0_init(void)
{
     4e8:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     4ea:	4b03      	ldr	r3, [pc, #12]	; (4f8 <USB_0_init+0x10>)
     4ec:	4798      	blx	r3
	usb_d_init();
     4ee:	4b03      	ldr	r3, [pc, #12]	; (4fc <USB_0_init+0x14>)
     4f0:	4798      	blx	r3
	USB_0_PORT_init();
     4f2:	4b03      	ldr	r3, [pc, #12]	; (500 <USB_0_init+0x18>)
     4f4:	4798      	blx	r3
}
     4f6:	bd10      	pop	{r4, pc}
     4f8:	000004c1 	.word	0x000004c1
     4fc:	00000ba1 	.word	0x00000ba1
     500:	00000439 	.word	0x00000439

00000504 <system_init>:

void system_init(void)
{
     504:	b5f0      	push	{r4, r5, r6, r7, lr}
     506:	46d6      	mov	lr, sl
     508:	464f      	mov	r7, r9
     50a:	4646      	mov	r6, r8
     50c:	b5c0      	push	{r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     50e:	4b40      	ldr	r3, [pc, #256]	; (610 <system_init+0x10c>)
     510:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     512:	22c0      	movs	r2, #192	; 0xc0
     514:	05d2      	lsls	r2, r2, #23
     516:	2304      	movs	r3, #4
     518:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     51a:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     51c:	4b3d      	ldr	r3, [pc, #244]	; (614 <system_init+0x110>)
     51e:	493e      	ldr	r1, [pc, #248]	; (618 <system_init+0x114>)
     520:	6299      	str	r1, [r3, #40]	; 0x28
     522:	24c0      	movs	r4, #192	; 0xc0
     524:	0624      	lsls	r4, r4, #24
     526:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     528:	2542      	movs	r5, #66	; 0x42
     52a:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     52c:	2101      	movs	r1, #1
     52e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     530:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     532:	2008      	movs	r0, #8
     534:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     536:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     538:	4838      	ldr	r0, [pc, #224]	; (61c <system_init+0x118>)
     53a:	6298      	str	r0, [r3, #40]	; 0x28
     53c:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     53e:	3501      	adds	r5, #1
     540:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     542:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     544:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     546:	2010      	movs	r0, #16
     548:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     54a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     54c:	4834      	ldr	r0, [pc, #208]	; (620 <system_init+0x11c>)
     54e:	6298      	str	r0, [r3, #40]	; 0x28
     550:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     552:	3501      	adds	r5, #1
     554:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     556:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     558:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     55a:	2080      	movs	r0, #128	; 0x80
     55c:	0040      	lsls	r0, r0, #1
     55e:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     560:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     562:	4830      	ldr	r0, [pc, #192]	; (624 <system_init+0x120>)
     564:	6298      	str	r0, [r3, #40]	; 0x28
     566:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     568:	3504      	adds	r5, #4
     56a:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     56c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     56e:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     570:	2080      	movs	r0, #128	; 0x80
     572:	0500      	lsls	r0, r0, #20
     574:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     576:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     578:	2080      	movs	r0, #128	; 0x80
     57a:	05c0      	lsls	r0, r0, #23
     57c:	6298      	str	r0, [r3, #40]	; 0x28
     57e:	4d2a      	ldr	r5, [pc, #168]	; (628 <system_init+0x124>)
     580:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     582:	265b      	movs	r6, #91	; 0x5b
     584:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     586:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     588:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     58a:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     58c:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     58e:	6298      	str	r0, [r3, #40]	; 0x28
     590:	4d26      	ldr	r5, [pc, #152]	; (62c <system_init+0x128>)
     592:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     594:	3603      	adds	r6, #3
     596:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     598:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     59c:	2680      	movs	r6, #128	; 0x80
     59e:	0636      	lsls	r6, r6, #24
     5a0:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5a2:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5a4:	6298      	str	r0, [r3, #40]	; 0x28
     5a6:	4d22      	ldr	r5, [pc, #136]	; (630 <system_init+0x12c>)
     5a8:	46aa      	mov	sl, r5
     5aa:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ac:	255f      	movs	r5, #95	; 0x5f
     5ae:	46ac      	mov	ip, r5
     5b0:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b2:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5b4:	4667      	mov	r7, ip
     5b6:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5b8:	2594      	movs	r5, #148	; 0x94
     5ba:	46a8      	mov	r8, r5
     5bc:	356d      	adds	r5, #109	; 0x6d
     5be:	35ff      	adds	r5, #255	; 0xff
     5c0:	4647      	mov	r7, r8
     5c2:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5c4:	3f0c      	subs	r7, #12
     5c6:	46bc      	mov	ip, r7
     5c8:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5ca:	3d59      	subs	r5, #89	; 0x59
     5cc:	3dff      	subs	r5, #255	; 0xff
     5ce:	4f19      	ldr	r7, [pc, #100]	; (634 <system_init+0x130>)
     5d0:	515f      	str	r7, [r3, r5]
     5d2:	515c      	str	r4, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5d4:	24c9      	movs	r4, #201	; 0xc9
     5d6:	46a1      	mov	r9, r4
     5d8:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5da:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5dc:	464f      	mov	r7, r9
     5de:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	4644      	mov	r4, r8
     5e2:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5e4:	4664      	mov	r4, ip
     5e6:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5e8:	5158      	str	r0, [r3, r5]
     5ea:	4652      	mov	r2, sl
     5ec:	515a      	str	r2, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	20df      	movs	r0, #223	; 0xdf
     5f0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5f4:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(pb31, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(pb31, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
     5f6:	4b10      	ldr	r3, [pc, #64]	; (638 <system_init+0x134>)
     5f8:	4798      	blx	r3
	USART_0_init();
     5fa:	4b10      	ldr	r3, [pc, #64]	; (63c <system_init+0x138>)
     5fc:	4798      	blx	r3

	delay_driver_init();
     5fe:	4b10      	ldr	r3, [pc, #64]	; (640 <system_init+0x13c>)
     600:	4798      	blx	r3

	USB_0_init();
     602:	4b10      	ldr	r3, [pc, #64]	; (644 <system_init+0x140>)
     604:	4798      	blx	r3
}
     606:	bc1c      	pop	{r2, r3, r4}
     608:	4690      	mov	r8, r2
     60a:	4699      	mov	r9, r3
     60c:	46a2      	mov	sl, r4
     60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     610:	00000f05 	.word	0x00000f05
     614:	41004400 	.word	0x41004400
     618:	40000004 	.word	0x40000004
     61c:	40000008 	.word	0x40000008
     620:	40000010 	.word	0x40000010
     624:	40000100 	.word	0x40000100
     628:	c0000800 	.word	0xc0000800
     62c:	c0004000 	.word	0xc0004000
     630:	c0008000 	.word	0xc0008000
     634:	40000200 	.word	0x40000200
     638:	00000365 	.word	0x00000365
     63c:	000003ed 	.word	0x000003ed
     640:	00000425 	.word	0x00000425
     644:	000004e9 	.word	0x000004e9

00000648 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     648:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     64a:	4b02      	ldr	r3, [pc, #8]	; (654 <delay_init+0xc>)
     64c:	6018      	str	r0, [r3, #0]
     64e:	4b02      	ldr	r3, [pc, #8]	; (658 <delay_init+0x10>)
     650:	4798      	blx	r3
}
     652:	bd10      	pop	{r4, pc}
     654:	200004d8 	.word	0x200004d8
     658:	000015e1 	.word	0x000015e1

0000065c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     65c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     65e:	4b04      	ldr	r3, [pc, #16]	; (670 <delay_ms+0x14>)
     660:	681c      	ldr	r4, [r3, #0]
     662:	4b04      	ldr	r3, [pc, #16]	; (674 <delay_ms+0x18>)
     664:	4798      	blx	r3
     666:	0001      	movs	r1, r0
     668:	0020      	movs	r0, r4
     66a:	4b03      	ldr	r3, [pc, #12]	; (678 <delay_ms+0x1c>)
     66c:	4798      	blx	r3
}
     66e:	bd10      	pop	{r4, pc}
     670:	200004d8 	.word	0x200004d8
     674:	00000efd 	.word	0x00000efd
     678:	000015f5 	.word	0x000015f5

0000067c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     67c:	b570      	push	{r4, r5, r6, lr}
     67e:	0006      	movs	r6, r0
     680:	000c      	movs	r4, r1
     682:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     684:	2800      	cmp	r0, #0
     686:	d00d      	beq.n	6a4 <io_write+0x28>
     688:	0008      	movs	r0, r1
     68a:	1e43      	subs	r3, r0, #1
     68c:	4198      	sbcs	r0, r3
     68e:	b2c0      	uxtb	r0, r0
     690:	2234      	movs	r2, #52	; 0x34
     692:	4905      	ldr	r1, [pc, #20]	; (6a8 <io_write+0x2c>)
     694:	4b05      	ldr	r3, [pc, #20]	; (6ac <io_write+0x30>)
     696:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     698:	6833      	ldr	r3, [r6, #0]
     69a:	002a      	movs	r2, r5
     69c:	0021      	movs	r1, r4
     69e:	0030      	movs	r0, r6
     6a0:	4798      	blx	r3
}
     6a2:	bd70      	pop	{r4, r5, r6, pc}
     6a4:	2000      	movs	r0, #0
     6a6:	e7f3      	b.n	690 <io_write+0x14>
     6a8:	00003c04 	.word	0x00003c04
     6ac:	00000ef5 	.word	0x00000ef5

000006b0 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     6b0:	b570      	push	{r4, r5, r6, lr}
     6b2:	0004      	movs	r4, r0
     6b4:	000e      	movs	r6, r1
     6b6:	0015      	movs	r5, r2
	ASSERT(io);
     6b8:	1e43      	subs	r3, r0, #1
     6ba:	4198      	sbcs	r0, r3
     6bc:	b2c0      	uxtb	r0, r0
     6be:	2228      	movs	r2, #40	; 0x28
     6c0:	32ff      	adds	r2, #255	; 0xff
     6c2:	490a      	ldr	r1, [pc, #40]	; (6ec <_spi_m_async_io_write+0x3c>)
     6c4:	4b0a      	ldr	r3, [pc, #40]	; (6f0 <_spi_m_async_io_write+0x40>)
     6c6:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     6c8:	0023      	movs	r3, r4
     6ca:	2200      	movs	r2, #0
     6cc:	61a2      	str	r2, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     6ce:	6166      	str	r6, [r4, #20]
	spi->xfer.size  = length;
     6d0:	61e5      	str	r5, [r4, #28]
	spi->xfercnt    = 0;
     6d2:	6222      	str	r2, [r4, #32]
	spi->xfer.rxbuf = NULL;
     6d4:	3b24      	subs	r3, #36	; 0x24

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     6d6:	2110      	movs	r1, #16
     6d8:	322c      	adds	r2, #44	; 0x2c
     6da:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_tx(&spi->dev, true);
     6dc:	0020      	movs	r0, r4
     6de:	3820      	subs	r0, #32
     6e0:	390f      	subs	r1, #15
     6e2:	4b04      	ldr	r3, [pc, #16]	; (6f4 <_spi_m_async_io_write+0x44>)
     6e4:	4798      	blx	r3

	return ERR_NONE;
}
     6e6:	2000      	movs	r0, #0
     6e8:	bd70      	pop	{r4, r5, r6, pc}
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	00003c18 	.word	0x00003c18
     6f0:	00000ef5 	.word	0x00000ef5
     6f4:	000013bd 	.word	0x000013bd

000006f8 <_spi_m_async_io_read>:
{
     6f8:	b570      	push	{r4, r5, r6, lr}
     6fa:	0004      	movs	r4, r0
     6fc:	000e      	movs	r6, r1
     6fe:	0015      	movs	r5, r2
	ASSERT(io);
     700:	1e43      	subs	r3, r0, #1
     702:	4198      	sbcs	r0, r3
     704:	b2c0      	uxtb	r0, r0
     706:	2206      	movs	r2, #6
     708:	32ff      	adds	r2, #255	; 0xff
     70a:	490c      	ldr	r1, [pc, #48]	; (73c <_spi_m_async_io_read+0x44>)
     70c:	4b0c      	ldr	r3, [pc, #48]	; (740 <_spi_m_async_io_read+0x48>)
     70e:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     710:	0023      	movs	r3, r4
     712:	61a6      	str	r6, [r4, #24]
	spi->xfer.txbuf = NULL;
     714:	2200      	movs	r2, #0
     716:	6162      	str	r2, [r4, #20]
	spi->xfer.size  = length;
     718:	61e5      	str	r5, [r4, #28]
	spi->xfercnt    = 0;
     71a:	6222      	str	r2, [r4, #32]
	spi->xfer.rxbuf = buf;
     71c:	3b24      	subs	r3, #36	; 0x24
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     71e:	2110      	movs	r1, #16
     720:	322c      	adds	r2, #44	; 0x2c
     722:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_rx(&spi->dev, true);
     724:	3c20      	subs	r4, #32
     726:	390f      	subs	r1, #15
     728:	0020      	movs	r0, r4
     72a:	4b06      	ldr	r3, [pc, #24]	; (744 <_spi_m_async_io_read+0x4c>)
     72c:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     72e:	4906      	ldr	r1, [pc, #24]	; (748 <_spi_m_async_io_read+0x50>)
     730:	0020      	movs	r0, r4
     732:	4b06      	ldr	r3, [pc, #24]	; (74c <_spi_m_async_io_read+0x54>)
     734:	4798      	blx	r3
}
     736:	2000      	movs	r0, #0
     738:	bd70      	pop	{r4, r5, r6, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	00003c18 	.word	0x00003c18
     740:	00000ef5 	.word	0x00000ef5
     744:	000013f9 	.word	0x000013f9
     748:	000001ff 	.word	0x000001ff
     74c:	00001481 	.word	0x00001481

00000750 <_spi_dev_error>:
{
     750:	b570      	push	{r4, r5, r6, lr}
     752:	0004      	movs	r4, r0
     754:	000e      	movs	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     756:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     758:	2100      	movs	r1, #0
     75a:	4b0a      	ldr	r3, [pc, #40]	; (784 <_spi_dev_error+0x34>)
     75c:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     75e:	2100      	movs	r1, #0
     760:	0020      	movs	r0, r4
     762:	4b09      	ldr	r3, [pc, #36]	; (788 <_spi_dev_error+0x38>)
     764:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     766:	2100      	movs	r1, #0
     768:	0020      	movs	r0, r4
     76a:	4b08      	ldr	r3, [pc, #32]	; (78c <_spi_dev_error+0x3c>)
     76c:	4798      	blx	r3
	spi->stat = 0;
     76e:	2200      	movs	r2, #0
     770:	232c      	movs	r3, #44	; 0x2c
     772:	54ea      	strb	r2, [r5, r3]
	if (spi->callbacks.cb_error) {
     774:	6b23      	ldr	r3, [r4, #48]	; 0x30
     776:	2b00      	cmp	r3, #0
     778:	d002      	beq.n	780 <_spi_dev_error+0x30>
		spi->callbacks.cb_error(spi, status);
     77a:	0031      	movs	r1, r6
     77c:	0028      	movs	r0, r5
     77e:	4798      	blx	r3
}
     780:	bd70      	pop	{r4, r5, r6, pc}
     782:	46c0      	nop			; (mov r8, r8)
     784:	000013bd 	.word	0x000013bd
     788:	000013f9 	.word	0x000013f9
     78c:	00001441 	.word	0x00001441

00000790 <_spi_dev_complete>:
{
     790:	b510      	push	{r4, lr}
     792:	0004      	movs	r4, r0
	if (spi->xfercnt >= spi->xfer.size) {
     794:	6c02      	ldr	r2, [r0, #64]	; 0x40
     796:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     798:	429a      	cmp	r2, r3
     79a:	d200      	bcs.n	79e <_spi_dev_complete+0xe>
}
     79c:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx_complete(dev, false);
     79e:	2100      	movs	r1, #0
     7a0:	4b05      	ldr	r3, [pc, #20]	; (7b8 <_spi_dev_complete+0x28>)
     7a2:	4798      	blx	r3
		spi->stat = 0;
     7a4:	1f23      	subs	r3, r4, #4
     7a6:	2100      	movs	r1, #0
     7a8:	222c      	movs	r2, #44	; 0x2c
     7aa:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
     7ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     7ae:	2b00      	cmp	r3, #0
     7b0:	d0f4      	beq.n	79c <_spi_dev_complete+0xc>
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     7b2:	1f20      	subs	r0, r4, #4
			spi->callbacks.cb_xfer(spi);
     7b4:	4798      	blx	r3
}
     7b6:	e7f1      	b.n	79c <_spi_dev_complete+0xc>
     7b8:	00001441 	.word	0x00001441

000007bc <_spi_dev_tx>:
{
     7bc:	b510      	push	{r4, lr}
     7be:	0004      	movs	r4, r0
	if (!(dev->char_size > 1)) {
     7c0:	7903      	ldrb	r3, [r0, #4]
     7c2:	2b01      	cmp	r3, #1
     7c4:	d90d      	bls.n	7e2 <_spi_dev_tx+0x26>
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     7c6:	6b41      	ldr	r1, [r0, #52]	; 0x34
     7c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
     7ca:	1c58      	adds	r0, r3, #1
     7cc:	6420      	str	r0, [r4, #64]	; 0x40
     7ce:	005b      	lsls	r3, r3, #1
     7d0:	5a59      	ldrh	r1, [r3, r1]
     7d2:	0020      	movs	r0, r4
     7d4:	4b0c      	ldr	r3, [pc, #48]	; (808 <_spi_dev_tx+0x4c>)
     7d6:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     7d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
     7da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     7dc:	429a      	cmp	r2, r3
     7de:	d009      	beq.n	7f4 <_spi_dev_tx+0x38>
}
     7e0:	bd10      	pop	{r4, pc}
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     7e2:	6b41      	ldr	r1, [r0, #52]	; 0x34
     7e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
     7e6:	1c50      	adds	r0, r2, #1
     7e8:	6420      	str	r0, [r4, #64]	; 0x40
     7ea:	5c89      	ldrb	r1, [r1, r2]
     7ec:	0020      	movs	r0, r4
     7ee:	4b06      	ldr	r3, [pc, #24]	; (808 <_spi_dev_tx+0x4c>)
     7f0:	4798      	blx	r3
     7f2:	e7f1      	b.n	7d8 <_spi_dev_tx+0x1c>
		_spi_m_async_enable_tx(dev, false);
     7f4:	2100      	movs	r1, #0
     7f6:	0020      	movs	r0, r4
     7f8:	4b04      	ldr	r3, [pc, #16]	; (80c <_spi_dev_tx+0x50>)
     7fa:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     7fc:	2101      	movs	r1, #1
     7fe:	0020      	movs	r0, r4
     800:	4b03      	ldr	r3, [pc, #12]	; (810 <_spi_dev_tx+0x54>)
     802:	4798      	blx	r3
}
     804:	e7ec      	b.n	7e0 <_spi_dev_tx+0x24>
     806:	46c0      	nop			; (mov r8, r8)
     808:	00001481 	.word	0x00001481
     80c:	000013bd 	.word	0x000013bd
     810:	00001441 	.word	0x00001441

00000814 <_spi_dev_rx>:
{
     814:	b570      	push	{r4, r5, r6, lr}
     816:	0004      	movs	r4, r0
	if (spi->xfer.rxbuf) {
     818:	6b83      	ldr	r3, [r0, #56]	; 0x38
     81a:	2b00      	cmp	r3, #0
     81c:	d022      	beq.n	864 <_spi_dev_rx+0x50>
		if (!(dev->char_size > 1)) {
     81e:	7902      	ldrb	r2, [r0, #4]
     820:	2a01      	cmp	r2, #1
     822:	d917      	bls.n	854 <_spi_dev_rx+0x40>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     824:	6c05      	ldr	r5, [r0, #64]	; 0x40
     826:	1c69      	adds	r1, r5, #1
     828:	6401      	str	r1, [r0, #64]	; 0x40
     82a:	006d      	lsls	r5, r5, #1
     82c:	195d      	adds	r5, r3, r5
     82e:	4b1c      	ldr	r3, [pc, #112]	; (8a0 <_spi_dev_rx+0x8c>)
     830:	4798      	blx	r3
     832:	8028      	strh	r0, [r5, #0]
	if (spi->xfercnt < spi->xfer.size) {
     834:	6c23      	ldr	r3, [r4, #64]	; 0x40
     836:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     838:	4293      	cmp	r3, r2
     83a:	d223      	bcs.n	884 <_spi_dev_rx+0x70>
		if (spi->xfer.txbuf) {
     83c:	6b62      	ldr	r2, [r4, #52]	; 0x34
     83e:	2a00      	cmp	r2, #0
     840:	d01b      	beq.n	87a <_spi_dev_rx+0x66>
			if (!(dev->char_size > 1)) {
     842:	7921      	ldrb	r1, [r4, #4]
     844:	2901      	cmp	r1, #1
     846:	d913      	bls.n	870 <_spi_dev_rx+0x5c>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     848:	005b      	lsls	r3, r3, #1
     84a:	5a99      	ldrh	r1, [r3, r2]
     84c:	0020      	movs	r0, r4
     84e:	4b15      	ldr	r3, [pc, #84]	; (8a4 <_spi_dev_rx+0x90>)
     850:	4798      	blx	r3
}
     852:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     854:	6c05      	ldr	r5, [r0, #64]	; 0x40
     856:	1c69      	adds	r1, r5, #1
     858:	6401      	str	r1, [r0, #64]	; 0x40
     85a:	195d      	adds	r5, r3, r5
     85c:	4b10      	ldr	r3, [pc, #64]	; (8a0 <_spi_dev_rx+0x8c>)
     85e:	4798      	blx	r3
     860:	7028      	strb	r0, [r5, #0]
     862:	e7e7      	b.n	834 <_spi_dev_rx+0x20>
		_spi_m_async_read_one(dev);
     864:	4b0e      	ldr	r3, [pc, #56]	; (8a0 <_spi_dev_rx+0x8c>)
     866:	4798      	blx	r3
		spi->xfercnt++;
     868:	6c23      	ldr	r3, [r4, #64]	; 0x40
     86a:	3301      	adds	r3, #1
     86c:	6423      	str	r3, [r4, #64]	; 0x40
     86e:	e7e1      	b.n	834 <_spi_dev_rx+0x20>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     870:	5cd1      	ldrb	r1, [r2, r3]
     872:	0020      	movs	r0, r4
     874:	4b0b      	ldr	r3, [pc, #44]	; (8a4 <_spi_dev_rx+0x90>)
     876:	4798      	blx	r3
     878:	e7eb      	b.n	852 <_spi_dev_rx+0x3e>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     87a:	88e1      	ldrh	r1, [r4, #6]
     87c:	0020      	movs	r0, r4
     87e:	4b09      	ldr	r3, [pc, #36]	; (8a4 <_spi_dev_rx+0x90>)
     880:	4798      	blx	r3
     882:	e7e6      	b.n	852 <_spi_dev_rx+0x3e>
		_spi_m_async_enable_rx(dev, false);
     884:	2100      	movs	r1, #0
     886:	0020      	movs	r0, r4
     888:	4b07      	ldr	r3, [pc, #28]	; (8a8 <_spi_dev_rx+0x94>)
     88a:	4798      	blx	r3
		spi->stat = 0;
     88c:	1f23      	subs	r3, r4, #4
     88e:	2100      	movs	r1, #0
     890:	222c      	movs	r2, #44	; 0x2c
     892:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
     894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     896:	2b00      	cmp	r3, #0
     898:	d0db      	beq.n	852 <_spi_dev_rx+0x3e>
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     89a:	1f20      	subs	r0, r4, #4
			spi->callbacks.cb_xfer(spi);
     89c:	4798      	blx	r3
}
     89e:	e7d8      	b.n	852 <_spi_dev_rx+0x3e>
     8a0:	000014b5 	.word	0x000014b5
     8a4:	00001481 	.word	0x00001481
     8a8:	000013f9 	.word	0x000013f9

000008ac <spi_m_async_init>:
{
     8ac:	b570      	push	{r4, r5, r6, lr}
     8ae:	0004      	movs	r4, r0
     8b0:	000e      	movs	r6, r1
	ASSERT(spi && hw);
     8b2:	2800      	cmp	r0, #0
     8b4:	d026      	beq.n	904 <spi_m_async_init+0x58>
     8b6:	0008      	movs	r0, r1
     8b8:	1e43      	subs	r3, r0, #1
     8ba:	4198      	sbcs	r0, r3
     8bc:	b2c0      	uxtb	r0, r0
     8be:	22a5      	movs	r2, #165	; 0xa5
     8c0:	4911      	ldr	r1, [pc, #68]	; (908 <spi_m_async_init+0x5c>)
     8c2:	4b12      	ldr	r3, [pc, #72]	; (90c <spi_m_async_init+0x60>)
     8c4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     8c6:	6066      	str	r6, [r4, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
     8c8:	1d25      	adds	r5, r4, #4
     8ca:	0031      	movs	r1, r6
     8cc:	0028      	movs	r0, r5
     8ce:	4b10      	ldr	r3, [pc, #64]	; (910 <spi_m_async_init+0x64>)
     8d0:	4798      	blx	r3
	if (rc >= 0) {
     8d2:	2800      	cmp	r0, #0
     8d4:	db15      	blt.n	902 <spi_m_async_init+0x56>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     8d6:	4a0f      	ldr	r2, [pc, #60]	; (914 <spi_m_async_init+0x68>)
     8d8:	2100      	movs	r1, #0
     8da:	0028      	movs	r0, r5
     8dc:	4e0e      	ldr	r6, [pc, #56]	; (918 <spi_m_async_init+0x6c>)
     8de:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     8e0:	4a0e      	ldr	r2, [pc, #56]	; (91c <spi_m_async_init+0x70>)
     8e2:	2101      	movs	r1, #1
     8e4:	0028      	movs	r0, r5
     8e6:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     8e8:	4a0d      	ldr	r2, [pc, #52]	; (920 <spi_m_async_init+0x74>)
     8ea:	2102      	movs	r1, #2
     8ec:	0028      	movs	r0, r5
     8ee:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     8f0:	4a0c      	ldr	r2, [pc, #48]	; (924 <spi_m_async_init+0x78>)
     8f2:	2103      	movs	r1, #3
     8f4:	0028      	movs	r0, r5
     8f6:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
     8f8:	4b0b      	ldr	r3, [pc, #44]	; (928 <spi_m_async_init+0x7c>)
     8fa:	62a3      	str	r3, [r4, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     8fc:	4b0b      	ldr	r3, [pc, #44]	; (92c <spi_m_async_init+0x80>)
     8fe:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
     900:	2000      	movs	r0, #0
}
     902:	bd70      	pop	{r4, r5, r6, pc}
     904:	2000      	movs	r0, #0
     906:	e7da      	b.n	8be <spi_m_async_init+0x12>
     908:	00003c18 	.word	0x00003c18
     90c:	00000ef5 	.word	0x00000ef5
     910:	00001359 	.word	0x00001359
     914:	000007bd 	.word	0x000007bd
     918:	000014e5 	.word	0x000014e5
     91c:	00000815 	.word	0x00000815
     920:	00000791 	.word	0x00000791
     924:	00000751 	.word	0x00000751
     928:	000006f9 	.word	0x000006f9
     92c:	000006b1 	.word	0x000006b1

00000930 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     930:	b5f0      	push	{r4, r5, r6, r7, lr}
     932:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     934:	4b0e      	ldr	r3, [pc, #56]	; (970 <_usb_d_find_ep+0x40>)
     936:	785a      	ldrb	r2, [r3, #1]
     938:	4290      	cmp	r0, r2
     93a:	d017      	beq.n	96c <_usb_d_find_ep+0x3c>
     93c:	2300      	movs	r3, #0
     93e:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     940:	4f0b      	ldr	r7, [pc, #44]	; (970 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     942:	260f      	movs	r6, #15
     944:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     946:	003d      	movs	r5, r7
     948:	e008      	b.n	95c <_usb_d_find_ep+0x2c>
     94a:	3001      	adds	r0, #1
     94c:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     94e:	2804      	cmp	r0, #4
     950:	d00a      	beq.n	968 <_usb_d_find_ep+0x38>
     952:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     954:	18ea      	adds	r2, r5, r3
     956:	7852      	ldrb	r2, [r2, #1]
     958:	42a2      	cmp	r2, r4
     95a:	d006      	beq.n	96a <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     95c:	5dd9      	ldrb	r1, [r3, r7]
     95e:	2900      	cmp	r1, #0
     960:	d1f3      	bne.n	94a <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     962:	4296      	cmp	r6, r2
     964:	d1f1      	bne.n	94a <_usb_d_find_ep+0x1a>
     966:	e000      	b.n	96a <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     968:	3805      	subs	r0, #5
}
     96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     96c:	2000      	movs	r0, #0
     96e:	e7fc      	b.n	96a <_usb_d_find_ep+0x3a>
     970:	200004dc 	.word	0x200004dc

00000974 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     974:	2000      	movs	r0, #0
     976:	4770      	bx	lr

00000978 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     978:	b570      	push	{r4, r5, r6, lr}
     97a:	0004      	movs	r4, r0
     97c:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     97e:	4b0a      	ldr	r3, [pc, #40]	; (9a8 <usb_d_cb_trans_more+0x30>)
     980:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     982:	0142      	lsls	r2, r0, #5
     984:	4b09      	ldr	r3, [pc, #36]	; (9ac <usb_d_cb_trans_more+0x34>)
     986:	189b      	adds	r3, r3, r2
     988:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     98a:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     98c:	2a03      	cmp	r2, #3
     98e:	d001      	beq.n	994 <usb_d_cb_trans_more+0x1c>
}
     990:	0018      	movs	r0, r3
     992:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     994:	0140      	lsls	r0, r0, #5
     996:	4b05      	ldr	r3, [pc, #20]	; (9ac <usb_d_cb_trans_more+0x34>)
     998:	1818      	adds	r0, r3, r0
     99a:	6983      	ldr	r3, [r0, #24]
     99c:	0029      	movs	r1, r5
     99e:	0020      	movs	r0, r4
     9a0:	4798      	blx	r3
     9a2:	0003      	movs	r3, r0
     9a4:	e7f4      	b.n	990 <usb_d_cb_trans_more+0x18>
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	00000931 	.word	0x00000931
     9ac:	200004dc 	.word	0x200004dc

000009b0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9b2:	b085      	sub	sp, #20
     9b4:	0005      	movs	r5, r0
     9b6:	000f      	movs	r7, r1
     9b8:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     9ba:	4b51      	ldr	r3, [pc, #324]	; (b00 <_usb_d_cb_trans_done+0x150>)
     9bc:	4798      	blx	r3
     9be:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     9c0:	2f00      	cmp	r7, #0
     9c2:	d162      	bne.n	a8a <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     9c4:	4b4f      	ldr	r3, [pc, #316]	; (b04 <_usb_d_cb_trans_done+0x154>)
     9c6:	0142      	lsls	r2, r0, #5
     9c8:	1899      	adds	r1, r3, r2
     9ca:	2000      	movs	r0, #0
     9cc:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     9ce:	5cd3      	ldrb	r3, [r2, r3]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d00e      	beq.n	9f2 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     9d4:	0162      	lsls	r2, r4, #5
     9d6:	4b4b      	ldr	r3, [pc, #300]	; (b04 <_usb_d_cb_trans_done+0x154>)
     9d8:	189b      	adds	r3, r3, r2
     9da:	2201      	movs	r2, #1
     9dc:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     9de:	0164      	lsls	r4, r4, #5
     9e0:	4b48      	ldr	r3, [pc, #288]	; (b04 <_usb_d_cb_trans_done+0x154>)
     9e2:	191c      	adds	r4, r3, r4
     9e4:	78e1      	ldrb	r1, [r4, #3]
     9e6:	69e3      	ldr	r3, [r4, #28]
     9e8:	0032      	movs	r2, r6
     9ea:	0028      	movs	r0, r5
     9ec:	4798      	blx	r3
}
     9ee:	b005      	add	sp, #20
     9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     9f2:	788b      	ldrb	r3, [r1, #2]
     9f4:	2b03      	cmp	r3, #3
     9f6:	d00c      	beq.n	a12 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     9f8:	4b42      	ldr	r3, [pc, #264]	; (b04 <_usb_d_cb_trans_done+0x154>)
     9fa:	0162      	lsls	r2, r4, #5
     9fc:	320c      	adds	r2, #12
     9fe:	189a      	adds	r2, r3, r2
     a00:	0164      	lsls	r4, r4, #5
     a02:	191c      	adds	r4, r3, r4
     a04:	7860      	ldrb	r0, [r4, #1]
     a06:	2100      	movs	r1, #0
     a08:	69e3      	ldr	r3, [r4, #28]
     a0a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     a0c:	2302      	movs	r3, #2
     a0e:	70a3      	strb	r3, [r4, #2]
     a10:	e7ed      	b.n	9ee <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     a12:	4a3c      	ldr	r2, [pc, #240]	; (b04 <_usb_d_cb_trans_done+0x154>)
     a14:	000b      	movs	r3, r1
     a16:	250c      	movs	r5, #12
     a18:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     a1a:	0161      	lsls	r1, r4, #5
     a1c:	310c      	adds	r1, #12
     a1e:	1852      	adds	r2, r2, r1
     a20:	7858      	ldrb	r0, [r3, #1]
     a22:	69db      	ldr	r3, [r3, #28]
     a24:	2101      	movs	r1, #1
     a26:	4798      	blx	r3
		if (err) {
     a28:	2800      	cmp	r0, #0
     a2a:	d017      	beq.n	a5c <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     a2c:	0162      	lsls	r2, r4, #5
     a2e:	4b35      	ldr	r3, [pc, #212]	; (b04 <_usb_d_cb_trans_done+0x154>)
     a30:	189b      	adds	r3, r3, r2
     a32:	2205      	movs	r2, #5
     a34:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     a36:	3a03      	subs	r2, #3
     a38:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     a3a:	2d00      	cmp	r5, #0
     a3c:	db09      	blt.n	a52 <_usb_d_cb_trans_done+0xa2>
     a3e:	0164      	lsls	r4, r4, #5
     a40:	4b30      	ldr	r3, [pc, #192]	; (b04 <_usb_d_cb_trans_done+0x154>)
     a42:	191c      	adds	r4, r3, r4
     a44:	7860      	ldrb	r0, [r4, #1]
     a46:	2380      	movs	r3, #128	; 0x80
     a48:	4318      	orrs	r0, r3
     a4a:	2101      	movs	r1, #1
     a4c:	4b2e      	ldr	r3, [pc, #184]	; (b08 <_usb_d_cb_trans_done+0x158>)
     a4e:	4798      	blx	r3
     a50:	e7cd      	b.n	9ee <_usb_d_cb_trans_done+0x3e>
     a52:	0164      	lsls	r4, r4, #5
     a54:	4b2b      	ldr	r3, [pc, #172]	; (b04 <_usb_d_cb_trans_done+0x154>)
     a56:	191c      	adds	r4, r3, r4
     a58:	7860      	ldrb	r0, [r4, #1]
     a5a:	e7f6      	b.n	a4a <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     a5c:	0164      	lsls	r4, r4, #5
     a5e:	4b29      	ldr	r3, [pc, #164]	; (b04 <_usb_d_cb_trans_done+0x154>)
     a60:	191c      	adds	r4, r3, r4
     a62:	2304      	movs	r3, #4
     a64:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     a66:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     a68:	2200      	movs	r2, #0
     a6a:	9201      	str	r2, [sp, #4]
     a6c:	9202      	str	r2, [sp, #8]
     a6e:	2d00      	cmp	r5, #0
     a70:	db08      	blt.n	a84 <_usb_d_cb_trans_done+0xd4>
     a72:	3280      	adds	r2, #128	; 0x80
     a74:	4313      	orrs	r3, r2
     a76:	a801      	add	r0, sp, #4
     a78:	7203      	strb	r3, [r0, #8]
     a7a:	2301      	movs	r3, #1
     a7c:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     a7e:	4b23      	ldr	r3, [pc, #140]	; (b0c <_usb_d_cb_trans_done+0x15c>)
     a80:	4798      	blx	r3
     a82:	e7b4      	b.n	9ee <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     a84:	220f      	movs	r2, #15
     a86:	4013      	ands	r3, r2
     a88:	e7f5      	b.n	a76 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     a8a:	2f01      	cmp	r7, #1
     a8c:	d00a      	beq.n	aa4 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     a8e:	2f02      	cmp	r7, #2
     a90:	d01d      	beq.n	ace <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     a92:	2f03      	cmp	r7, #3
     a94:	d02c      	beq.n	af0 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     a96:	0142      	lsls	r2, r0, #5
     a98:	4b1a      	ldr	r3, [pc, #104]	; (b04 <_usb_d_cb_trans_done+0x154>)
     a9a:	189b      	adds	r3, r3, r2
     a9c:	2206      	movs	r2, #6
     a9e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     aa0:	70da      	strb	r2, [r3, #3]
     aa2:	e79c      	b.n	9de <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     aa4:	4b17      	ldr	r3, [pc, #92]	; (b04 <_usb_d_cb_trans_done+0x154>)
     aa6:	0142      	lsls	r2, r0, #5
     aa8:	1899      	adds	r1, r3, r2
     aaa:	2002      	movs	r0, #2
     aac:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     aae:	5cd3      	ldrb	r3, [r2, r3]
     ab0:	2b00      	cmp	r3, #0
     ab2:	d005      	beq.n	ac0 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     ab4:	0162      	lsls	r2, r4, #5
     ab6:	4b13      	ldr	r3, [pc, #76]	; (b04 <_usb_d_cb_trans_done+0x154>)
     ab8:	189b      	adds	r3, r3, r2
     aba:	2205      	movs	r2, #5
     abc:	709a      	strb	r2, [r3, #2]
     abe:	e78e      	b.n	9de <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     ac0:	2202      	movs	r2, #2
     ac2:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     ac4:	2100      	movs	r1, #0
     ac6:	0028      	movs	r0, r5
     ac8:	4b0f      	ldr	r3, [pc, #60]	; (b08 <_usb_d_cb_trans_done+0x158>)
     aca:	4798      	blx	r3
     acc:	e787      	b.n	9de <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     ace:	4b0d      	ldr	r3, [pc, #52]	; (b04 <_usb_d_cb_trans_done+0x154>)
     ad0:	0142      	lsls	r2, r0, #5
     ad2:	1899      	adds	r1, r3, r2
     ad4:	2004      	movs	r0, #4
     ad6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     ad8:	5cd3      	ldrb	r3, [r2, r3]
     ada:	2b00      	cmp	r3, #0
     adc:	d005      	beq.n	aea <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     ade:	0162      	lsls	r2, r4, #5
     ae0:	4b08      	ldr	r3, [pc, #32]	; (b04 <_usb_d_cb_trans_done+0x154>)
     ae2:	189b      	adds	r3, r3, r2
     ae4:	2201      	movs	r2, #1
     ae6:	709a      	strb	r2, [r3, #2]
     ae8:	e779      	b.n	9de <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     aea:	2302      	movs	r3, #2
     aec:	708b      	strb	r3, [r1, #2]
			return;
     aee:	e77e      	b.n	9ee <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     af0:	0142      	lsls	r2, r0, #5
     af2:	4b04      	ldr	r3, [pc, #16]	; (b04 <_usb_d_cb_trans_done+0x154>)
     af4:	189b      	adds	r3, r3, r2
     af6:	2200      	movs	r2, #0
     af8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     afa:	3205      	adds	r2, #5
     afc:	70da      	strb	r2, [r3, #3]
     afe:	e76e      	b.n	9de <_usb_d_cb_trans_done+0x2e>
     b00:	00000931 	.word	0x00000931
     b04:	200004dc 	.word	0x200004dc
     b08:	000022dd 	.word	0x000022dd
     b0c:	000024b1 	.word	0x000024b1

00000b10 <usb_d_cb_trans_setup>:
{
     b10:	b5f0      	push	{r4, r5, r6, r7, lr}
     b12:	46c6      	mov	lr, r8
     b14:	b500      	push	{lr}
     b16:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     b18:	4b1d      	ldr	r3, [pc, #116]	; (b90 <usb_d_cb_trans_setup+0x80>)
     b1a:	4798      	blx	r3
     b1c:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     b1e:	0145      	lsls	r5, r0, #5
     b20:	350c      	adds	r5, #12
     b22:	4b1c      	ldr	r3, [pc, #112]	; (b94 <usb_d_cb_trans_setup+0x84>)
     b24:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     b26:	0029      	movs	r1, r5
     b28:	0020      	movs	r0, r4
     b2a:	4b1b      	ldr	r3, [pc, #108]	; (b98 <usb_d_cb_trans_setup+0x88>)
     b2c:	4798      	blx	r3
	if (n != 8) {
     b2e:	b2c0      	uxtb	r0, r0
     b30:	2808      	cmp	r0, #8
     b32:	d00a      	beq.n	b4a <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b34:	2101      	movs	r1, #1
     b36:	0020      	movs	r0, r4
     b38:	4d18      	ldr	r5, [pc, #96]	; (b9c <usb_d_cb_trans_setup+0x8c>)
     b3a:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     b3c:	2080      	movs	r0, #128	; 0x80
     b3e:	4320      	orrs	r0, r4
     b40:	2101      	movs	r1, #1
     b42:	47a8      	blx	r5
}
     b44:	bc04      	pop	{r2}
     b46:	4690      	mov	r8, r2
     b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     b4a:	2100      	movs	r1, #0
     b4c:	0020      	movs	r0, r4
     b4e:	4b13      	ldr	r3, [pc, #76]	; (b9c <usb_d_cb_trans_setup+0x8c>)
     b50:	4698      	mov	r8, r3
     b52:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     b54:	2780      	movs	r7, #128	; 0x80
     b56:	4327      	orrs	r7, r4
     b58:	2100      	movs	r1, #0
     b5a:	0038      	movs	r0, r7
     b5c:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     b5e:	0172      	lsls	r2, r6, #5
     b60:	4b0c      	ldr	r3, [pc, #48]	; (b94 <usb_d_cb_trans_setup+0x84>)
     b62:	189b      	adds	r3, r3, r2
     b64:	2201      	movs	r2, #1
     b66:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     b68:	695b      	ldr	r3, [r3, #20]
     b6a:	0029      	movs	r1, r5
     b6c:	0020      	movs	r0, r4
     b6e:	4798      	blx	r3
     b70:	2800      	cmp	r0, #0
     b72:	d1e7      	bne.n	b44 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     b74:	0176      	lsls	r6, r6, #5
     b76:	4b07      	ldr	r3, [pc, #28]	; (b94 <usb_d_cb_trans_setup+0x84>)
     b78:	199e      	adds	r6, r3, r6
     b7a:	2305      	movs	r3, #5
     b7c:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b7e:	2101      	movs	r1, #1
     b80:	0020      	movs	r0, r4
     b82:	4c06      	ldr	r4, [pc, #24]	; (b9c <usb_d_cb_trans_setup+0x8c>)
     b84:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     b86:	2101      	movs	r1, #1
     b88:	0038      	movs	r0, r7
     b8a:	47a0      	blx	r4
     b8c:	e7da      	b.n	b44 <usb_d_cb_trans_setup+0x34>
     b8e:	46c0      	nop			; (mov r8, r8)
     b90:	00000931 	.word	0x00000931
     b94:	200004dc 	.word	0x200004dc
     b98:	00002441 	.word	0x00002441
     b9c:	000022dd 	.word	0x000022dd

00000ba0 <usb_d_init>:

int32_t usb_d_init(void)
{
     ba0:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     ba2:	4b10      	ldr	r3, [pc, #64]	; (be4 <usb_d_init+0x44>)
     ba4:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     ba6:	2800      	cmp	r0, #0
     ba8:	db1b      	blt.n	be2 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     baa:	4c0f      	ldr	r4, [pc, #60]	; (be8 <usb_d_init+0x48>)
     bac:	2280      	movs	r2, #128	; 0x80
     bae:	2100      	movs	r1, #0
     bb0:	0020      	movs	r0, r4
     bb2:	4b0e      	ldr	r3, [pc, #56]	; (bec <usb_d_init+0x4c>)
     bb4:	4798      	blx	r3
     bb6:	0023      	movs	r3, r4
     bb8:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     bba:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     bbc:	4a0c      	ldr	r2, [pc, #48]	; (bf0 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     bbe:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     bc0:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     bc2:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     bc4:	61da      	str	r2, [r3, #28]
     bc6:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     bc8:	42a3      	cmp	r3, r4
     bca:	d1f8      	bne.n	bbe <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     bcc:	4909      	ldr	r1, [pc, #36]	; (bf4 <usb_d_init+0x54>)
     bce:	2000      	movs	r0, #0
     bd0:	4c09      	ldr	r4, [pc, #36]	; (bf8 <usb_d_init+0x58>)
     bd2:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     bd4:	4909      	ldr	r1, [pc, #36]	; (bfc <usb_d_init+0x5c>)
     bd6:	2001      	movs	r0, #1
     bd8:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     bda:	4909      	ldr	r1, [pc, #36]	; (c00 <usb_d_init+0x60>)
     bdc:	2002      	movs	r0, #2
     bde:	47a0      	blx	r4
	return ERR_NONE;
     be0:	2000      	movs	r0, #0
}
     be2:	bd10      	pop	{r4, pc}
     be4:	00001cbd 	.word	0x00001cbd
     be8:	200004dc 	.word	0x200004dc
     bec:	00003a19 	.word	0x00003a19
     bf0:	00000975 	.word	0x00000975
     bf4:	00000b11 	.word	0x00000b11
     bf8:	000026e9 	.word	0x000026e9
     bfc:	00000979 	.word	0x00000979
     c00:	000009b1 	.word	0x000009b1

00000c04 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     c04:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     c06:	4b01      	ldr	r3, [pc, #4]	; (c0c <usb_d_register_callback+0x8>)
     c08:	4798      	blx	r3
}
     c0a:	bd10      	pop	{r4, pc}
     c0c:	000026c5 	.word	0x000026c5

00000c10 <usb_d_enable>:

int32_t usb_d_enable(void)
{
     c10:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     c12:	4b01      	ldr	r3, [pc, #4]	; (c18 <usb_d_enable+0x8>)
     c14:	4798      	blx	r3
}
     c16:	bd10      	pop	{r4, pc}
     c18:	00001d99 	.word	0x00001d99

00000c1c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     c1c:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     c1e:	4b01      	ldr	r3, [pc, #4]	; (c24 <usb_d_attach+0x8>)
     c20:	4798      	blx	r3
}
     c22:	bd10      	pop	{r4, pc}
     c24:	00001de9 	.word	0x00001de9

00000c28 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     c28:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <usb_d_set_address+0x8>)
     c2c:	4798      	blx	r3
}
     c2e:	bd10      	pop	{r4, pc}
     c30:	00001df9 	.word	0x00001df9

00000c34 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c36:	0005      	movs	r5, r0
     c38:	000e      	movs	r6, r1
     c3a:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     c3c:	4b0f      	ldr	r3, [pc, #60]	; (c7c <usb_d_ep_init+0x48>)
     c3e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     c40:	2800      	cmp	r0, #0
     c42:	da14      	bge.n	c6e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     c44:	20ff      	movs	r0, #255	; 0xff
     c46:	4b0d      	ldr	r3, [pc, #52]	; (c7c <usb_d_ep_init+0x48>)
     c48:	4798      	blx	r3
     c4a:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     c4c:	db12      	blt.n	c74 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     c4e:	003a      	movs	r2, r7
     c50:	0031      	movs	r1, r6
     c52:	0028      	movs	r0, r5
     c54:	4b0a      	ldr	r3, [pc, #40]	; (c80 <usb_d_ep_init+0x4c>)
     c56:	4798      	blx	r3
	if (rc < 0) {
     c58:	2800      	cmp	r0, #0
     c5a:	db07      	blt.n	c6c <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     c5c:	4a09      	ldr	r2, [pc, #36]	; (c84 <usb_d_ep_init+0x50>)
     c5e:	0164      	lsls	r4, r4, #5
     c60:	1913      	adds	r3, r2, r4
     c62:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     c64:	2303      	movs	r3, #3
     c66:	401e      	ands	r6, r3
     c68:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     c6a:	2000      	movs	r0, #0
}
     c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     c6e:	2014      	movs	r0, #20
     c70:	4240      	negs	r0, r0
     c72:	e7fb      	b.n	c6c <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     c74:	2015      	movs	r0, #21
     c76:	4240      	negs	r0, r0
     c78:	e7f8      	b.n	c6c <usb_d_ep_init+0x38>
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	00000931 	.word	0x00000931
     c80:	00001e09 	.word	0x00001e09
     c84:	200004dc 	.word	0x200004dc

00000c88 <usb_d_ep0_init>:
{
     c88:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     c8a:	b282      	uxth	r2, r0
     c8c:	2100      	movs	r1, #0
     c8e:	2000      	movs	r0, #0
     c90:	4b01      	ldr	r3, [pc, #4]	; (c98 <usb_d_ep0_init+0x10>)
     c92:	4798      	blx	r3
}
     c94:	bd10      	pop	{r4, pc}
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	00000c35 	.word	0x00000c35

00000c9c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     c9c:	b570      	push	{r4, r5, r6, lr}
     c9e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     ca0:	4b06      	ldr	r3, [pc, #24]	; (cbc <usb_d_ep_deinit+0x20>)
     ca2:	4798      	blx	r3
     ca4:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     ca6:	db07      	blt.n	cb8 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     ca8:	0028      	movs	r0, r5
     caa:	4b05      	ldr	r3, [pc, #20]	; (cc0 <usb_d_ep_deinit+0x24>)
     cac:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     cae:	0164      	lsls	r4, r4, #5
     cb0:	4b04      	ldr	r3, [pc, #16]	; (cc4 <usb_d_ep_deinit+0x28>)
     cb2:	191c      	adds	r4, r3, r4
     cb4:	23ff      	movs	r3, #255	; 0xff
     cb6:	7063      	strb	r3, [r4, #1]
}
     cb8:	bd70      	pop	{r4, r5, r6, pc}
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	00000931 	.word	0x00000931
     cc0:	00001f35 	.word	0x00001f35
     cc4:	200004dc 	.word	0x200004dc

00000cc8 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     cc8:	b570      	push	{r4, r5, r6, lr}
     cca:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     ccc:	4b0e      	ldr	r3, [pc, #56]	; (d08 <usb_d_ep_enable+0x40>)
     cce:	4798      	blx	r3
     cd0:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     cd2:	db15      	blt.n	d00 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     cd4:	0143      	lsls	r3, r0, #5
     cd6:	4a0d      	ldr	r2, [pc, #52]	; (d0c <usb_d_ep_enable+0x44>)
     cd8:	5c9b      	ldrb	r3, [r3, r2]
     cda:	425a      	negs	r2, r3
     cdc:	4153      	adcs	r3, r2
     cde:	3301      	adds	r3, #1
     ce0:	0141      	lsls	r1, r0, #5
     ce2:	4a0a      	ldr	r2, [pc, #40]	; (d0c <usb_d_ep_enable+0x44>)
     ce4:	1852      	adds	r2, r2, r1
     ce6:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     ce8:	0020      	movs	r0, r4
     cea:	4b09      	ldr	r3, [pc, #36]	; (d10 <usb_d_ep_enable+0x48>)
     cec:	4798      	blx	r3
	if (rc < 0) {
     cee:	2800      	cmp	r0, #0
     cf0:	db00      	blt.n	cf4 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     cf2:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     cf4:	016d      	lsls	r5, r5, #5
     cf6:	4b05      	ldr	r3, [pc, #20]	; (d0c <usb_d_ep_enable+0x44>)
     cf8:	195d      	adds	r5, r3, r5
     cfa:	2300      	movs	r3, #0
     cfc:	70ab      	strb	r3, [r5, #2]
     cfe:	e7f8      	b.n	cf2 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     d00:	2012      	movs	r0, #18
     d02:	4240      	negs	r0, r0
     d04:	e7f5      	b.n	cf2 <usb_d_ep_enable+0x2a>
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00000931 	.word	0x00000931
     d0c:	200004dc 	.word	0x200004dc
     d10:	00002001 	.word	0x00002001

00000d14 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     d14:	b5f0      	push	{r4, r5, r6, r7, lr}
     d16:	46d6      	mov	lr, sl
     d18:	464f      	mov	r7, r9
     d1a:	4646      	mov	r6, r8
     d1c:	b5c0      	push	{r6, r7, lr}
     d1e:	b086      	sub	sp, #24
     d20:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     d22:	7a07      	ldrb	r7, [r0, #8]
     d24:	0038      	movs	r0, r7
     d26:	4b40      	ldr	r3, [pc, #256]	; (e28 <usb_d_ep_transfer+0x114>)
     d28:	4798      	blx	r3
     d2a:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     d2c:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
     d2e:	6863      	ldr	r3, [r4, #4]
     d30:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     d32:	2800      	cmp	r0, #0
     d34:	da00      	bge.n	d38 <usb_d_ep_transfer+0x24>
     d36:	e071      	b.n	e1c <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     d38:	a804      	add	r0, sp, #16
     d3a:	4b3c      	ldr	r3, [pc, #240]	; (e2c <usb_d_ep_transfer+0x118>)
     d3c:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     d3e:	016a      	lsls	r2, r5, #5
     d40:	4b3b      	ldr	r3, [pc, #236]	; (e30 <usb_d_ep_transfer+0x11c>)
     d42:	189b      	adds	r3, r3, r2
     d44:	789a      	ldrb	r2, [r3, #2]
     d46:	2317      	movs	r3, #23
     d48:	446b      	add	r3, sp
     d4a:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	2b01      	cmp	r3, #1
     d50:	d010      	beq.n	d74 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     d52:	a804      	add	r0, sp, #16
     d54:	4b37      	ldr	r3, [pc, #220]	; (e34 <usb_d_ep_transfer+0x120>)
     d56:	4798      	blx	r3
		switch (state) {
     d58:	2317      	movs	r3, #23
     d5a:	446b      	add	r3, sp
     d5c:	781b      	ldrb	r3, [r3, #0]
     d5e:	b2db      	uxtb	r3, r3
     d60:	2b05      	cmp	r3, #5
     d62:	d05e      	beq.n	e22 <usb_d_ep_transfer+0x10e>
     d64:	2b06      	cmp	r3, #6
     d66:	d023      	beq.n	db0 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     d68:	2001      	movs	r0, #1
		switch (state) {
     d6a:	2b00      	cmp	r3, #0
     d6c:	d13c      	bne.n	de8 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
     d6e:	2013      	movs	r0, #19
     d70:	4240      	negs	r0, r0
     d72:	e039      	b.n	de8 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     d74:	4b2e      	ldr	r3, [pc, #184]	; (e30 <usb_d_ep_transfer+0x11c>)
     d76:	4699      	mov	r9, r3
     d78:	016b      	lsls	r3, r5, #5
     d7a:	469a      	mov	sl, r3
     d7c:	464b      	mov	r3, r9
     d7e:	4453      	add	r3, sl
     d80:	2203      	movs	r2, #3
     d82:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     d84:	a804      	add	r0, sp, #16
     d86:	4b2b      	ldr	r3, [pc, #172]	; (e34 <usb_d_ep_transfer+0x120>)
     d88:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d8a:	464b      	mov	r3, r9
     d8c:	4652      	mov	r2, sl
     d8e:	5cd3      	ldrb	r3, [r2, r3]
     d90:	2b00      	cmp	r3, #0
     d92:	d010      	beq.n	db6 <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d94:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     d96:	1e72      	subs	r2, r6, #1
     d98:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d9a:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
     d9c:	6822      	ldr	r2, [r4, #0]
     d9e:	9201      	str	r2, [sp, #4]
     da0:	4642      	mov	r2, r8
     da2:	9202      	str	r2, [sp, #8]
     da4:	b27f      	sxtb	r7, r7
     da6:	2f00      	cmp	r7, #0
     da8:	db17      	blt.n	dda <usb_d_ep_transfer+0xc6>
     daa:	220f      	movs	r2, #15
     dac:	4013      	ands	r3, r2
     dae:	e016      	b.n	dde <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
     db0:	2010      	movs	r0, #16
     db2:	4240      	negs	r0, r0
     db4:	e018      	b.n	de8 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     db6:	016b      	lsls	r3, r5, #5
     db8:	4a1d      	ldr	r2, [pc, #116]	; (e30 <usb_d_ep_transfer+0x11c>)
     dba:	18d2      	adds	r2, r2, r3
     dbc:	7cd1      	ldrb	r1, [r2, #19]
     dbe:	0209      	lsls	r1, r1, #8
     dc0:	7c93      	ldrb	r3, [r2, #18]
     dc2:	185b      	adds	r3, r3, r1
     dc4:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     dc6:	2b00      	cmp	r3, #0
     dc8:	d114      	bne.n	df4 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     dca:	2304      	movs	r3, #4
     dcc:	7093      	strb	r3, [r2, #2]
			len                 = 0;
     dce:	2200      	movs	r2, #0
			zlp                 = true;
     dd0:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     dd2:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     dd4:	6821      	ldr	r1, [r4, #0]
     dd6:	9101      	str	r1, [sp, #4]
     dd8:	9202      	str	r2, [sp, #8]
     dda:	2280      	movs	r2, #128	; 0x80
     ddc:	4313      	orrs	r3, r2
     dde:	a801      	add	r0, sp, #4
     de0:	7203      	strb	r3, [r0, #8]
     de2:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     de4:	4b14      	ldr	r3, [pc, #80]	; (e38 <usb_d_ep_transfer+0x124>)
     de6:	4798      	blx	r3
	return rc;
}
     de8:	b006      	add	sp, #24
     dea:	bc1c      	pop	{r2, r3, r4}
     dec:	4690      	mov	r8, r2
     dee:	4699      	mov	r9, r3
     df0:	46a2      	mov	sl, r4
     df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     df4:	4642      	mov	r2, r8
     df6:	429a      	cmp	r2, r3
     df8:	d900      	bls.n	dfc <usb_d_ep_transfer+0xe8>
     dfa:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     dfc:	016d      	lsls	r5, r5, #5
     dfe:	490c      	ldr	r1, [pc, #48]	; (e30 <usb_d_ep_transfer+0x11c>)
     e00:	194d      	adds	r5, r1, r5
			if (dir) {
     e02:	7b29      	ldrb	r1, [r5, #12]
     e04:	297f      	cmp	r1, #127	; 0x7f
     e06:	d805      	bhi.n	e14 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     e08:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     e0a:	6821      	ldr	r1, [r4, #0]
     e0c:	9101      	str	r1, [sp, #4]
     e0e:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     e10:	2600      	movs	r6, #0
     e12:	e7ca      	b.n	daa <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
     e14:	429a      	cmp	r2, r3
     e16:	41b6      	sbcs	r6, r6
     e18:	4276      	negs	r6, r6
     e1a:	e7da      	b.n	dd2 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
     e1c:	2012      	movs	r0, #18
     e1e:	4240      	negs	r0, r0
     e20:	e7e2      	b.n	de8 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
     e22:	2002      	movs	r0, #2
     e24:	e7e0      	b.n	de8 <usb_d_ep_transfer+0xd4>
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	00000931 	.word	0x00000931
     e2c:	00002dc1 	.word	0x00002dc1
     e30:	200004dc 	.word	0x200004dc
     e34:	00002dcf 	.word	0x00002dcf
     e38:	000024b1 	.word	0x000024b1

00000e3c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     e3c:	b570      	push	{r4, r5, r6, lr}
     e3e:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     e40:	2900      	cmp	r1, #0
     e42:	d005      	beq.n	e50 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     e44:	2901      	cmp	r1, #1
     e46:	d021      	beq.n	e8c <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     e48:	2102      	movs	r1, #2
     e4a:	4b13      	ldr	r3, [pc, #76]	; (e98 <usb_d_ep_halt+0x5c>)
     e4c:	4798      	blx	r3
	}
}
     e4e:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     e50:	4b12      	ldr	r3, [pc, #72]	; (e9c <usb_d_ep_halt+0x60>)
     e52:	4798      	blx	r3
     e54:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
     e56:	db1c      	blt.n	e92 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     e58:	2102      	movs	r1, #2
     e5a:	0020      	movs	r0, r4
     e5c:	4b0e      	ldr	r3, [pc, #56]	; (e98 <usb_d_ep_halt+0x5c>)
     e5e:	4798      	blx	r3
     e60:	2800      	cmp	r0, #0
     e62:	d0f4      	beq.n	e4e <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     e64:	2100      	movs	r1, #0
     e66:	0020      	movs	r0, r4
     e68:	4b0b      	ldr	r3, [pc, #44]	; (e98 <usb_d_ep_halt+0x5c>)
     e6a:	4798      	blx	r3
		if (rc < 0) {
     e6c:	2800      	cmp	r0, #0
     e6e:	dbee      	blt.n	e4e <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     e70:	016d      	lsls	r5, r5, #5
     e72:	4b0b      	ldr	r3, [pc, #44]	; (ea0 <usb_d_ep_halt+0x64>)
     e74:	195d      	adds	r5, r3, r5
     e76:	2301      	movs	r3, #1
     e78:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     e7a:	3302      	adds	r3, #2
     e7c:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     e7e:	69eb      	ldr	r3, [r5, #28]
     e80:	2200      	movs	r2, #0
     e82:	2103      	movs	r1, #3
     e84:	0020      	movs	r0, r4
     e86:	4798      	blx	r3
	return ERR_NONE;
     e88:	2000      	movs	r0, #0
     e8a:	e7e0      	b.n	e4e <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     e8c:	4b02      	ldr	r3, [pc, #8]	; (e98 <usb_d_ep_halt+0x5c>)
     e8e:	4798      	blx	r3
     e90:	e7dd      	b.n	e4e <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
     e92:	2012      	movs	r0, #18
     e94:	4240      	negs	r0, r0
     e96:	e7da      	b.n	e4e <usb_d_ep_halt+0x12>
     e98:	000022dd 	.word	0x000022dd
     e9c:	00000931 	.word	0x00000931
     ea0:	200004dc 	.word	0x200004dc

00000ea4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     ea4:	b570      	push	{r4, r5, r6, lr}
     ea6:	000d      	movs	r5, r1
     ea8:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     eaa:	4b0f      	ldr	r3, [pc, #60]	; (ee8 <usb_d_ep_register_callback+0x44>)
     eac:	4798      	blx	r3
     eae:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     eb0:	1e22      	subs	r2, r4, #0
     eb2:	d008      	beq.n	ec6 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
     eb4:	2b00      	cmp	r3, #0
     eb6:	db05      	blt.n	ec4 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     eb8:	2d01      	cmp	r5, #1
     eba:	d00b      	beq.n	ed4 <usb_d_ep_register_callback+0x30>
     ebc:	2d00      	cmp	r5, #0
     ebe:	d004      	beq.n	eca <usb_d_ep_register_callback+0x26>
     ec0:	2d02      	cmp	r5, #2
     ec2:	d00c      	beq.n	ede <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     ec4:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     ec6:	4a09      	ldr	r2, [pc, #36]	; (eec <usb_d_ep_register_callback+0x48>)
     ec8:	e7f4      	b.n	eb4 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     eca:	0140      	lsls	r0, r0, #5
     ecc:	4b08      	ldr	r3, [pc, #32]	; (ef0 <usb_d_ep_register_callback+0x4c>)
     ece:	1818      	adds	r0, r3, r0
     ed0:	6142      	str	r2, [r0, #20]
		break;
     ed2:	e7f7      	b.n	ec4 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     ed4:	0140      	lsls	r0, r0, #5
     ed6:	4b06      	ldr	r3, [pc, #24]	; (ef0 <usb_d_ep_register_callback+0x4c>)
     ed8:	1818      	adds	r0, r3, r0
     eda:	6182      	str	r2, [r0, #24]
		break;
     edc:	e7f2      	b.n	ec4 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     ede:	0140      	lsls	r0, r0, #5
     ee0:	4b03      	ldr	r3, [pc, #12]	; (ef0 <usb_d_ep_register_callback+0x4c>)
     ee2:	1818      	adds	r0, r3, r0
     ee4:	61c2      	str	r2, [r0, #28]
		break;
     ee6:	e7ed      	b.n	ec4 <usb_d_ep_register_callback+0x20>
     ee8:	00000931 	.word	0x00000931
     eec:	00000975 	.word	0x00000975
     ef0:	200004dc 	.word	0x200004dc

00000ef4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ef4:	2800      	cmp	r0, #0
     ef6:	d100      	bne.n	efa <assert+0x6>
		__asm("BKPT #0");
     ef8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     efa:	4770      	bx	lr

00000efc <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     efc:	23fa      	movs	r3, #250	; 0xfa
     efe:	009b      	lsls	r3, r3, #2
     f00:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     f02:	4770      	bx	lr

00000f04 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f04:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     f06:	4b06      	ldr	r3, [pc, #24]	; (f20 <_init_chip+0x1c>)
     f08:	685a      	ldr	r2, [r3, #4]
     f0a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     f0c:	4b05      	ldr	r3, [pc, #20]	; (f24 <_init_chip+0x20>)
     f0e:	4798      	blx	r3
	_sysctrl_init_sources();
     f10:	4b05      	ldr	r3, [pc, #20]	; (f28 <_init_chip+0x24>)
     f12:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     f14:	4b05      	ldr	r3, [pc, #20]	; (f2c <_init_chip+0x28>)
     f16:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     f18:	20ff      	movs	r0, #255	; 0xff
     f1a:	4b05      	ldr	r3, [pc, #20]	; (f30 <_init_chip+0x2c>)
     f1c:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     f1e:	bd10      	pop	{r4, pc}
     f20:	41004000 	.word	0x41004000
     f24:	00000fad 	.word	0x00000fad
     f28:	00001521 	.word	0x00001521
     f2c:	00001569 	.word	0x00001569
     f30:	00000f35 	.word	0x00000f35

00000f34 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     f34:	07c3      	lsls	r3, r0, #31
     f36:	d509      	bpl.n	f4c <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     f38:	4b17      	ldr	r3, [pc, #92]	; (f98 <_gclk_init_generators_by_fref+0x64>)
     f3a:	2280      	movs	r2, #128	; 0x80
     f3c:	0052      	lsls	r2, r2, #1
     f3e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     f40:	4a16      	ldr	r2, [pc, #88]	; (f9c <_gclk_init_generators_by_fref+0x68>)
     f42:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     f44:	001a      	movs	r2, r3
     f46:	7853      	ldrb	r3, [r2, #1]
     f48:	09db      	lsrs	r3, r3, #7
     f4a:	d1fc      	bne.n	f46 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     f4c:	0783      	lsls	r3, r0, #30
     f4e:	d509      	bpl.n	f64 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     f50:	4b11      	ldr	r3, [pc, #68]	; (f98 <_gclk_init_generators_by_fref+0x64>)
     f52:	2202      	movs	r2, #2
     f54:	32ff      	adds	r2, #255	; 0xff
     f56:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     f58:	4a11      	ldr	r2, [pc, #68]	; (fa0 <_gclk_init_generators_by_fref+0x6c>)
     f5a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     f5c:	001a      	movs	r2, r3
     f5e:	7853      	ldrb	r3, [r2, #1]
     f60:	09db      	lsrs	r3, r3, #7
     f62:	d1fc      	bne.n	f5e <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     f64:	0743      	lsls	r3, r0, #29
     f66:	d509      	bpl.n	f7c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
     f68:	4b0b      	ldr	r3, [pc, #44]	; (f98 <_gclk_init_generators_by_fref+0x64>)
     f6a:	2281      	movs	r2, #129	; 0x81
     f6c:	0052      	lsls	r2, r2, #1
     f6e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     f70:	4a0c      	ldr	r2, [pc, #48]	; (fa4 <_gclk_init_generators_by_fref+0x70>)
     f72:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     f74:	001a      	movs	r2, r3
     f76:	7853      	ldrb	r3, [r2, #1]
     f78:	09db      	lsrs	r3, r3, #7
     f7a:	d1fc      	bne.n	f76 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     f7c:	0703      	lsls	r3, r0, #28
     f7e:	d509      	bpl.n	f94 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENDIV.reg = data;
     f80:	4b05      	ldr	r3, [pc, #20]	; (f98 <_gclk_init_generators_by_fref+0x64>)
     f82:	2204      	movs	r2, #4
     f84:	32ff      	adds	r2, #255	; 0xff
     f86:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     f88:	4a07      	ldr	r2, [pc, #28]	; (fa8 <_gclk_init_generators_by_fref+0x74>)
     f8a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     f8c:	001a      	movs	r2, r3
     f8e:	7853      	ldrb	r3, [r2, #1]
     f90:	09db      	lsrs	r3, r3, #7
     f92:	d1fc      	bne.n	f8e <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     f94:	4770      	bx	lr
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	40000c00 	.word	0x40000c00
     f9c:	00090600 	.word	0x00090600
     fa0:	00010401 	.word	0x00010401
     fa4:	00090702 	.word	0x00090702
     fa8:	00010303 	.word	0x00010303

00000fac <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     fac:	4b06      	ldr	r3, [pc, #24]	; (fc8 <_pm_init+0x1c>)
     fae:	7a1a      	ldrb	r2, [r3, #8]
     fb0:	b2d2      	uxtb	r2, r2
     fb2:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     fb4:	7a5a      	ldrb	r2, [r3, #9]
     fb6:	b2d2      	uxtb	r2, r2
     fb8:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     fba:	7a9a      	ldrb	r2, [r3, #10]
     fbc:	b2d2      	uxtb	r2, r2
     fbe:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     fc0:	7ada      	ldrb	r2, [r3, #11]
     fc2:	b2d2      	uxtb	r2, r2
     fc4:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     fc6:	4770      	bx	lr
     fc8:	40000400 	.word	0x40000400

00000fcc <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
     fcc:	4b06      	ldr	r3, [pc, #24]	; (fe8 <_sercom_init_irq_param+0x1c>)
     fce:	4298      	cmp	r0, r3
     fd0:	d003      	beq.n	fda <_sercom_init_irq_param+0xe>
		_sercom0_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM2) {
     fd2:	4b06      	ldr	r3, [pc, #24]	; (fec <_sercom_init_irq_param+0x20>)
     fd4:	4298      	cmp	r0, r3
     fd6:	d003      	beq.n	fe0 <_sercom_init_irq_param+0x14>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}
}
     fd8:	4770      	bx	lr
		_sercom0_dev = (struct _spi_async_dev *)dev;
     fda:	4b05      	ldr	r3, [pc, #20]	; (ff0 <_sercom_init_irq_param+0x24>)
     fdc:	6019      	str	r1, [r3, #0]
     fde:	e7fb      	b.n	fd8 <_sercom_init_irq_param+0xc>
		_sercom2_dev = (struct _usart_async_device *)dev;
     fe0:	4b03      	ldr	r3, [pc, #12]	; (ff0 <_sercom_init_irq_param+0x24>)
     fe2:	6059      	str	r1, [r3, #4]
}
     fe4:	e7f8      	b.n	fd8 <_sercom_init_irq_param+0xc>
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	42000800 	.word	0x42000800
     fec:	42001000 	.word	0x42001000
     ff0:	2000055c 	.word	0x2000055c

00000ff4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     ff4:	b510      	push	{r4, lr}
     ff6:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     ff8:	4b20      	ldr	r3, [pc, #128]	; (107c <_usart_init+0x88>)
     ffa:	18c3      	adds	r3, r0, r3
     ffc:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     ffe:	b2db      	uxtb	r3, r3
    1000:	2b02      	cmp	r3, #2
    1002:	d005      	beq.n	1010 <_usart_init+0x1c>
	ASSERT(false);
    1004:	2298      	movs	r2, #152	; 0x98
    1006:	0092      	lsls	r2, r2, #2
    1008:	491d      	ldr	r1, [pc, #116]	; (1080 <_usart_init+0x8c>)
    100a:	2000      	movs	r0, #0
    100c:	4b1d      	ldr	r3, [pc, #116]	; (1084 <_usart_init+0x90>)
    100e:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1010:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1012:	07db      	lsls	r3, r3, #31
    1014:	d418      	bmi.n	1048 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1016:	2203      	movs	r2, #3
    1018:	69e3      	ldr	r3, [r4, #28]
    101a:	421a      	tst	r2, r3
    101c:	d1fc      	bne.n	1018 <_usart_init+0x24>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    101e:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1020:	079b      	lsls	r3, r3, #30
    1022:	d50b      	bpl.n	103c <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1024:	6823      	ldr	r3, [r4, #0]
    1026:	2202      	movs	r2, #2
    1028:	4393      	bics	r3, r2
    102a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    102c:	3201      	adds	r2, #1
    102e:	69e3      	ldr	r3, [r4, #28]
    1030:	421a      	tst	r2, r3
    1032:	d1fc      	bne.n	102e <_usart_init+0x3a>
    1034:	2202      	movs	r2, #2
    1036:	69e3      	ldr	r3, [r4, #28]
    1038:	421a      	tst	r2, r3
    103a:	d1fc      	bne.n	1036 <_usart_init+0x42>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    103c:	2305      	movs	r3, #5
    103e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1040:	2203      	movs	r2, #3
    1042:	69e3      	ldr	r3, [r4, #28]
    1044:	421a      	tst	r2, r3
    1046:	d1fc      	bne.n	1042 <_usart_init+0x4e>
    1048:	2201      	movs	r2, #1
    104a:	69e3      	ldr	r3, [r4, #28]
    104c:	421a      	tst	r2, r3
    104e:	d1fc      	bne.n	104a <_usart_init+0x56>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1050:	4b0d      	ldr	r3, [pc, #52]	; (1088 <_usart_init+0x94>)
    1052:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1054:	2203      	movs	r2, #3
    1056:	69e3      	ldr	r3, [r4, #28]
    1058:	421a      	tst	r2, r3
    105a:	d1fc      	bne.n	1056 <_usart_init+0x62>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    105c:	23c0      	movs	r3, #192	; 0xc0
    105e:	029b      	lsls	r3, r3, #10
    1060:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1062:	2207      	movs	r2, #7
    1064:	69e3      	ldr	r3, [r4, #28]
    1066:	421a      	tst	r2, r3
    1068:	d1fc      	bne.n	1064 <_usart_init+0x70>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    106a:	4b08      	ldr	r3, [pc, #32]	; (108c <_usart_init+0x98>)
    106c:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    106e:	2300      	movs	r3, #0
    1070:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1072:	2230      	movs	r2, #48	; 0x30
    1074:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    1076:	2000      	movs	r0, #0
    1078:	bd10      	pop	{r4, pc}
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	bdfff800 	.word	0xbdfff800
    1080:	00003c38 	.word	0x00003c38
    1084:	00000ef5 	.word	0x00000ef5
    1088:	40100004 	.word	0x40100004
    108c:	ffffd8ad 	.word	0xffffd8ad

00001090 <_usart_async_init>:
{
    1090:	b570      	push	{r4, r5, r6, lr}
    1092:	0006      	movs	r6, r0
    1094:	000c      	movs	r4, r1
	ASSERT(device);
    1096:	1e43      	subs	r3, r0, #1
    1098:	4198      	sbcs	r0, r3
    109a:	b2c0      	uxtb	r0, r0
    109c:	22c6      	movs	r2, #198	; 0xc6
    109e:	4913      	ldr	r1, [pc, #76]	; (10ec <_usart_async_init+0x5c>)
    10a0:	4b13      	ldr	r3, [pc, #76]	; (10f0 <_usart_async_init+0x60>)
    10a2:	4798      	blx	r3
	init_status = _usart_init(hw);
    10a4:	0020      	movs	r0, r4
    10a6:	4b13      	ldr	r3, [pc, #76]	; (10f4 <_usart_async_init+0x64>)
    10a8:	4798      	blx	r3
    10aa:	1e05      	subs	r5, r0, #0
	if (init_status) {
    10ac:	d001      	beq.n	10b2 <_usart_async_init+0x22>
}
    10ae:	0028      	movs	r0, r5
    10b0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    10b2:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    10b4:	0031      	movs	r1, r6
    10b6:	0020      	movs	r0, r4
    10b8:	4b0f      	ldr	r3, [pc, #60]	; (10f8 <_usart_async_init+0x68>)
    10ba:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    10bc:	4b0f      	ldr	r3, [pc, #60]	; (10fc <_usart_async_init+0x6c>)
    10be:	469c      	mov	ip, r3
    10c0:	4464      	add	r4, ip
    10c2:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    10c4:	3409      	adds	r4, #9
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    10c6:	b2e3      	uxtb	r3, r4
    10c8:	0622      	lsls	r2, r4, #24
    10ca:	d4f0      	bmi.n	10ae <_usart_async_init+0x1e>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10cc:	221f      	movs	r2, #31
    10ce:	401a      	ands	r2, r3
    10d0:	2301      	movs	r3, #1
    10d2:	4093      	lsls	r3, r2
    10d4:	4a0a      	ldr	r2, [pc, #40]	; (1100 <_usart_async_init+0x70>)
    10d6:	2180      	movs	r1, #128	; 0x80
    10d8:	5053      	str	r3, [r2, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    10da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10de:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10e2:	3101      	adds	r1, #1
    10e4:	31ff      	adds	r1, #255	; 0xff
    10e6:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10e8:	6013      	str	r3, [r2, #0]
    10ea:	e7e0      	b.n	10ae <_usart_async_init+0x1e>
    10ec:	00003c38 	.word	0x00003c38
    10f0:	00000ef5 	.word	0x00000ef5
    10f4:	00000ff5 	.word	0x00000ff5
    10f8:	00000fcd 	.word	0x00000fcd
    10fc:	bdfff800 	.word	0xbdfff800
    1100:	e000e100 	.word	0xe000e100

00001104 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1104:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1106:	6813      	ldr	r3, [r2, #0]
    1108:	2102      	movs	r1, #2
    110a:	430b      	orrs	r3, r1
    110c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    110e:	3101      	adds	r1, #1
    1110:	69d3      	ldr	r3, [r2, #28]
    1112:	4219      	tst	r1, r3
    1114:	d1fc      	bne.n	1110 <_usart_async_enable+0xc>
}
    1116:	4770      	bx	lr

00001118 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1118:	6983      	ldr	r3, [r0, #24]
    111a:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    111c:	8519      	strh	r1, [r3, #40]	; 0x28
}
    111e:	4770      	bx	lr

00001120 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1120:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1122:	2201      	movs	r2, #1
    1124:	759a      	strb	r2, [r3, #22]
}
    1126:	4770      	bx	lr

00001128 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1128:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    112a:	2202      	movs	r2, #2
    112c:	759a      	strb	r2, [r3, #22]
}
    112e:	4770      	bx	lr

00001130 <_usart_async_set_irq_state>:
{
    1130:	b570      	push	{r4, r5, r6, lr}
    1132:	0004      	movs	r4, r0
    1134:	000d      	movs	r5, r1
    1136:	0016      	movs	r6, r2
	ASSERT(device);
    1138:	1e43      	subs	r3, r0, #1
    113a:	4198      	sbcs	r0, r3
    113c:	b2c0      	uxtb	r0, r0
    113e:	2288      	movs	r2, #136	; 0x88
    1140:	0092      	lsls	r2, r2, #2
    1142:	4916      	ldr	r1, [pc, #88]	; (119c <_usart_async_set_irq_state+0x6c>)
    1144:	4b16      	ldr	r3, [pc, #88]	; (11a0 <_usart_async_set_irq_state+0x70>)
    1146:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1148:	2302      	movs	r3, #2
    114a:	002a      	movs	r2, r5
    114c:	439a      	bics	r2, r3
    114e:	d10e      	bne.n	116e <_usart_async_set_irq_state+0x3e>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1150:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1152:	2e00      	cmp	r6, #0
    1154:	d105      	bne.n	1162 <_usart_async_set_irq_state+0x32>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1156:	2201      	movs	r2, #1
    1158:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    115a:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    115c:	3201      	adds	r2, #1
    115e:	751a      	strb	r2, [r3, #20]
}
    1160:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1162:	2201      	movs	r2, #1
    1164:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1166:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1168:	3201      	adds	r2, #1
    116a:	759a      	strb	r2, [r3, #22]
    116c:	e7f8      	b.n	1160 <_usart_async_set_irq_state+0x30>
	} else if (USART_ASYNC_RX_DONE == type) {
    116e:	2d01      	cmp	r5, #1
    1170:	d007      	beq.n	1182 <_usart_async_set_irq_state+0x52>
	} else if (USART_ASYNC_ERROR == type) {
    1172:	2d03      	cmp	r5, #3
    1174:	d1f4      	bne.n	1160 <_usart_async_set_irq_state+0x30>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1176:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1178:	2e00      	cmp	r6, #0
    117a:	d00b      	beq.n	1194 <_usart_async_set_irq_state+0x64>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    117c:	2280      	movs	r2, #128	; 0x80
    117e:	759a      	strb	r2, [r3, #22]
}
    1180:	e7ee      	b.n	1160 <_usart_async_set_irq_state+0x30>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1182:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1184:	2e00      	cmp	r6, #0
    1186:	d102      	bne.n	118e <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1188:	2204      	movs	r2, #4
    118a:	751a      	strb	r2, [r3, #20]
    118c:	e7e8      	b.n	1160 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    118e:	2204      	movs	r2, #4
    1190:	759a      	strb	r2, [r3, #22]
    1192:	e7e5      	b.n	1160 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1194:	2280      	movs	r2, #128	; 0x80
    1196:	751a      	strb	r2, [r3, #20]
    1198:	e7e2      	b.n	1160 <_usart_async_set_irq_state+0x30>
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	00003c38 	.word	0x00003c38
    11a0:	00000ef5 	.word	0x00000ef5

000011a4 <SERCOM0_Handler>:
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}

void SERCOM0_Handler(void)
{
    11a4:	b510      	push	{r4, lr}
	_spi_handler(_sercom0_dev);
    11a6:	4b12      	ldr	r3, [pc, #72]	; (11f0 <SERCOM0_Handler+0x4c>)
    11a8:	6818      	ldr	r0, [r3, #0]
	void *                      hw = dev->prvt;
    11aa:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    11ac:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    11ae:	7d93      	ldrb	r3, [r2, #22]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    11b0:	400b      	ands	r3, r1
	if (st & SERCOM_SPI_INTFLAG_DRE) {
    11b2:	07d9      	lsls	r1, r3, #31
    11b4:	d407      	bmi.n	11c6 <SERCOM0_Handler+0x22>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    11b6:	0759      	lsls	r1, r3, #29
    11b8:	d408      	bmi.n	11cc <SERCOM0_Handler+0x28>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    11ba:	0799      	lsls	r1, r3, #30
    11bc:	d409      	bmi.n	11d2 <SERCOM0_Handler+0x2e>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    11be:	b25b      	sxtb	r3, r3
    11c0:	2b00      	cmp	r3, #0
    11c2:	db0b      	blt.n	11dc <SERCOM0_Handler+0x38>
}
    11c4:	bd10      	pop	{r4, pc}
		dev->callbacks.tx(dev);
    11c6:	6883      	ldr	r3, [r0, #8]
    11c8:	4798      	blx	r3
    11ca:	e7fb      	b.n	11c4 <SERCOM0_Handler+0x20>
		dev->callbacks.rx(dev);
    11cc:	68c3      	ldr	r3, [r0, #12]
    11ce:	4798      	blx	r3
    11d0:	e7f8      	b.n	11c4 <SERCOM0_Handler+0x20>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    11d2:	2302      	movs	r3, #2
    11d4:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    11d6:	6903      	ldr	r3, [r0, #16]
    11d8:	4798      	blx	r3
    11da:	e7f3      	b.n	11c4 <SERCOM0_Handler+0x20>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    11dc:	2304      	movs	r3, #4
    11de:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    11e0:	337c      	adds	r3, #124	; 0x7c
    11e2:	7613      	strb	r3, [r2, #24]
		dev->callbacks.err(dev, ERR_OVERFLOW);
    11e4:	6943      	ldr	r3, [r0, #20]
    11e6:	2113      	movs	r1, #19
    11e8:	4249      	negs	r1, r1
    11ea:	4798      	blx	r3
}
    11ec:	e7ea      	b.n	11c4 <SERCOM0_Handler+0x20>
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	2000055c 	.word	0x2000055c

000011f4 <SERCOM2_Handler>:

void SERCOM2_Handler(void)
{
    11f4:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    11f6:	4b19      	ldr	r3, [pc, #100]	; (125c <SERCOM2_Handler+0x68>)
    11f8:	6858      	ldr	r0, [r3, #4]
	void *hw = device->hw;
    11fa:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    11fc:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    11fe:	07db      	lsls	r3, r3, #31
    1200:	d502      	bpl.n	1208 <SERCOM2_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1202:	7da3      	ldrb	r3, [r4, #22]
    1204:	07db      	lsls	r3, r3, #31
    1206:	d40f      	bmi.n	1228 <SERCOM2_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1208:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    120a:	079b      	lsls	r3, r3, #30
    120c:	d502      	bpl.n	1214 <SERCOM2_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    120e:	7da3      	ldrb	r3, [r4, #22]
    1210:	079b      	lsls	r3, r3, #30
    1212:	d40e      	bmi.n	1232 <SERCOM2_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1214:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1216:	075b      	lsls	r3, r3, #29
    1218:	d515      	bpl.n	1246 <SERCOM2_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    121a:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    121c:	2337      	movs	r3, #55	; 0x37
    121e:	421a      	tst	r2, r3
    1220:	d00c      	beq.n	123c <SERCOM2_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1222:	3308      	adds	r3, #8
    1224:	8363      	strh	r3, [r4, #26]
}
    1226:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1228:	2301      	movs	r3, #1
    122a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    122c:	6803      	ldr	r3, [r0, #0]
    122e:	4798      	blx	r3
    1230:	e7f9      	b.n	1226 <SERCOM2_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1232:	2302      	movs	r3, #2
    1234:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1236:	6883      	ldr	r3, [r0, #8]
    1238:	4798      	blx	r3
    123a:	e7f4      	b.n	1226 <SERCOM2_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    123c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    123e:	b2c9      	uxtb	r1, r1
    1240:	6843      	ldr	r3, [r0, #4]
    1242:	4798      	blx	r3
    1244:	e7ef      	b.n	1226 <SERCOM2_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1246:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1248:	09db      	lsrs	r3, r3, #7
    124a:	d0ec      	beq.n	1226 <SERCOM2_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    124c:	2380      	movs	r3, #128	; 0x80
    124e:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1250:	68c3      	ldr	r3, [r0, #12]
    1252:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1254:	8b63      	ldrh	r3, [r4, #26]
    1256:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1258:	8363      	strh	r3, [r4, #26]
}
    125a:	e7e4      	b.n	1226 <SERCOM2_Handler+0x32>
    125c:	2000055c 	.word	0x2000055c

00001260 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1260:	b570      	push	{r4, r5, r6, lr}
    1262:	0005      	movs	r5, r0
    1264:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1266:	4b35      	ldr	r3, [pc, #212]	; (133c <_spi_m_sync_init+0xdc>)
    1268:	18cb      	adds	r3, r1, r3
    126a:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    126c:	b2db      	uxtb	r3, r3
    126e:	2b00      	cmp	r3, #0
    1270:	d00b      	beq.n	128a <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1272:	2800      	cmp	r0, #0
    1274:	d051      	beq.n	131a <_spi_m_sync_init+0xba>
    1276:	1e60      	subs	r0, r4, #1
    1278:	4184      	sbcs	r4, r0
    127a:	b2e0      	uxtb	r0, r4
    127c:	4a30      	ldr	r2, [pc, #192]	; (1340 <_spi_m_sync_init+0xe0>)
    127e:	4931      	ldr	r1, [pc, #196]	; (1344 <_spi_m_sync_init+0xe4>)
    1280:	4b31      	ldr	r3, [pc, #196]	; (1348 <_spi_m_sync_init+0xe8>)
    1282:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1284:	200d      	movs	r0, #13
    1286:	4240      	negs	r0, r0
    1288:	e046      	b.n	1318 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    128a:	2800      	cmp	r0, #0
    128c:	d14d      	bne.n	132a <_spi_m_sync_init+0xca>
    128e:	4a2c      	ldr	r2, [pc, #176]	; (1340 <_spi_m_sync_init+0xe0>)
    1290:	492c      	ldr	r1, [pc, #176]	; (1344 <_spi_m_sync_init+0xe4>)
    1292:	2000      	movs	r0, #0
    1294:	4b2c      	ldr	r3, [pc, #176]	; (1348 <_spi_m_sync_init+0xe8>)
    1296:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1298:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    129a:	07db      	lsls	r3, r3, #31
    129c:	d418      	bmi.n	12d0 <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    129e:	2203      	movs	r2, #3
    12a0:	69e3      	ldr	r3, [r4, #28]
    12a2:	421a      	tst	r2, r3
    12a4:	d1fc      	bne.n	12a0 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    12a6:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    12a8:	079b      	lsls	r3, r3, #30
    12aa:	d50b      	bpl.n	12c4 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    12ac:	6823      	ldr	r3, [r4, #0]
    12ae:	2202      	movs	r2, #2
    12b0:	4393      	bics	r3, r2
    12b2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    12b4:	3201      	adds	r2, #1
    12b6:	69e3      	ldr	r3, [r4, #28]
    12b8:	421a      	tst	r2, r3
    12ba:	d1fc      	bne.n	12b6 <_spi_m_sync_init+0x56>
    12bc:	2202      	movs	r2, #2
    12be:	69e3      	ldr	r3, [r4, #28]
    12c0:	421a      	tst	r2, r3
    12c2:	d1fc      	bne.n	12be <_spi_m_sync_init+0x5e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    12c4:	230d      	movs	r3, #13
    12c6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    12c8:	2203      	movs	r2, #3
    12ca:	69e3      	ldr	r3, [r4, #28]
    12cc:	421a      	tst	r2, r3
    12ce:	d1fc      	bne.n	12ca <_spi_m_sync_init+0x6a>
    12d0:	2201      	movs	r2, #1
    12d2:	69e3      	ldr	r3, [r4, #28]
    12d4:	421a      	tst	r2, r3
    12d6:	d1fc      	bne.n	12d2 <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    12d8:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    12da:	0020      	movs	r0, r4
    12dc:	1e43      	subs	r3, r0, #1
    12de:	4198      	sbcs	r0, r3
    12e0:	b2c0      	uxtb	r0, r0
    12e2:	4a1a      	ldr	r2, [pc, #104]	; (134c <_spi_m_sync_init+0xec>)
    12e4:	4917      	ldr	r1, [pc, #92]	; (1344 <_spi_m_sync_init+0xe4>)
    12e6:	4b18      	ldr	r3, [pc, #96]	; (1348 <_spi_m_sync_init+0xe8>)
    12e8:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    12ea:	4b19      	ldr	r3, [pc, #100]	; (1350 <_spi_m_sync_init+0xf0>)
    12ec:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    12ee:	2203      	movs	r2, #3
    12f0:	69e3      	ldr	r3, [r4, #28]
    12f2:	421a      	tst	r2, r3
    12f4:	d1fc      	bne.n	12f0 <_spi_m_sync_init+0x90>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    12f6:	2380      	movs	r3, #128	; 0x80
    12f8:	029b      	lsls	r3, r3, #10
    12fa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    12fc:	2207      	movs	r2, #7
    12fe:	69e3      	ldr	r3, [r4, #28]
    1300:	421a      	tst	r2, r3
    1302:	d1fc      	bne.n	12fe <_spi_m_sync_init+0x9e>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1304:	2331      	movs	r3, #49	; 0x31
    1306:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1308:	2200      	movs	r2, #0
    130a:	3b01      	subs	r3, #1
    130c:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    130e:	3b2f      	subs	r3, #47	; 0x2f
    1310:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1312:	4b10      	ldr	r3, [pc, #64]	; (1354 <_spi_m_sync_init+0xf4>)
    1314:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1316:	2000      	movs	r0, #0
}
    1318:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    131a:	4a09      	ldr	r2, [pc, #36]	; (1340 <_spi_m_sync_init+0xe0>)
    131c:	4909      	ldr	r1, [pc, #36]	; (1344 <_spi_m_sync_init+0xe4>)
    131e:	2000      	movs	r0, #0
    1320:	4b09      	ldr	r3, [pc, #36]	; (1348 <_spi_m_sync_init+0xe8>)
    1322:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1324:	200d      	movs	r0, #13
    1326:	4240      	negs	r0, r0
    1328:	e7f6      	b.n	1318 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    132a:	0008      	movs	r0, r1
    132c:	1e43      	subs	r3, r0, #1
    132e:	4198      	sbcs	r0, r3
    1330:	b2c0      	uxtb	r0, r0
    1332:	4a03      	ldr	r2, [pc, #12]	; (1340 <_spi_m_sync_init+0xe0>)
    1334:	4903      	ldr	r1, [pc, #12]	; (1344 <_spi_m_sync_init+0xe4>)
    1336:	4b04      	ldr	r3, [pc, #16]	; (1348 <_spi_m_sync_init+0xe8>)
    1338:	4798      	blx	r3
    133a:	e7ad      	b.n	1298 <_spi_m_sync_init+0x38>
    133c:	bdfff800 	.word	0xbdfff800
    1340:	0000096d 	.word	0x0000096d
    1344:	00003c38 	.word	0x00003c38
    1348:	00000ef5 	.word	0x00000ef5
    134c:	00000913 	.word	0x00000913
    1350:	0011000c 	.word	0x0011000c
    1354:	000001ff 	.word	0x000001ff

00001358 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    1358:	b570      	push	{r4, r5, r6, lr}
    135a:	0005      	movs	r5, r0
    135c:	000c      	movs	r4, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    135e:	4b13      	ldr	r3, [pc, #76]	; (13ac <_spi_m_async_init+0x54>)
    1360:	4798      	blx	r3

	if (rc < 0) {
    1362:	2800      	cmp	r0, #0
    1364:	db1e      	blt.n	13a4 <_spi_m_async_init+0x4c>
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
    1366:	0029      	movs	r1, r5
    1368:	0020      	movs	r0, r4
    136a:	4b11      	ldr	r3, [pc, #68]	; (13b0 <_spi_m_async_init+0x58>)
    136c:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    136e:	2300      	movs	r3, #0
    1370:	612b      	str	r3, [r5, #16]
	spid->callbacks.rx       = NULL;
    1372:	60eb      	str	r3, [r5, #12]
	spid->callbacks.tx       = NULL;
    1374:	60ab      	str	r3, [r5, #8]
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1376:	4b0f      	ldr	r3, [pc, #60]	; (13b4 <_spi_m_async_init+0x5c>)
    1378:	469c      	mov	ip, r3
    137a:	4464      	add	r4, ip
    137c:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    137e:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    1380:	b2e3      	uxtb	r3, r4
    1382:	0622      	lsls	r2, r4, #24
    1384:	d40f      	bmi.n	13a6 <_spi_m_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1386:	221f      	movs	r2, #31
    1388:	401a      	ands	r2, r3
    138a:	2301      	movs	r3, #1
    138c:	4093      	lsls	r3, r2
    138e:	4a0a      	ldr	r2, [pc, #40]	; (13b8 <_spi_m_async_init+0x60>)
    1390:	2180      	movs	r1, #128	; 0x80
    1392:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1394:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1398:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    139c:	3101      	adds	r1, #1
    139e:	31ff      	adds	r1, #255	; 0xff
    13a0:	5053      	str	r3, [r2, r1]
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));

	return ERR_NONE;
    13a2:	2000      	movs	r0, #0
}
    13a4:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    13a6:	2000      	movs	r0, #0
    13a8:	e7fc      	b.n	13a4 <_spi_m_async_init+0x4c>
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	00001261 	.word	0x00001261
    13b0:	00000fcd 	.word	0x00000fcd
    13b4:	bdfff800 	.word	0xbdfff800
    13b8:	e000e100 	.word	0xe000e100

000013bc <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    13bc:	b570      	push	{r4, r5, r6, lr}
    13be:	000d      	movs	r5, r1
	void *hw = dev->prvt;
    13c0:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    13c2:	2800      	cmp	r0, #0
    13c4:	d00d      	beq.n	13e2 <_spi_m_async_enable_tx+0x26>
    13c6:	0020      	movs	r0, r4
    13c8:	1e43      	subs	r3, r0, #1
    13ca:	4198      	sbcs	r0, r3
    13cc:	b2c0      	uxtb	r0, r0
    13ce:	4a07      	ldr	r2, [pc, #28]	; (13ec <_spi_m_async_enable_tx+0x30>)
    13d0:	4907      	ldr	r1, [pc, #28]	; (13f0 <_spi_m_async_enable_tx+0x34>)
    13d2:	4b08      	ldr	r3, [pc, #32]	; (13f4 <_spi_m_async_enable_tx+0x38>)
    13d4:	4798      	blx	r3

	if (state) {
    13d6:	2d00      	cmp	r5, #0
    13d8:	d105      	bne.n	13e6 <_spi_m_async_enable_tx+0x2a>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    13da:	2301      	movs	r3, #1
    13dc:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    13de:	2000      	movs	r0, #0
    13e0:	bd70      	pop	{r4, r5, r6, pc}
    13e2:	2000      	movs	r0, #0
    13e4:	e7f3      	b.n	13ce <_spi_m_async_enable_tx+0x12>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    13e6:	2301      	movs	r3, #1
    13e8:	75a3      	strb	r3, [r4, #22]
    13ea:	e7f8      	b.n	13de <_spi_m_async_enable_tx+0x22>
    13ec:	00000af9 	.word	0x00000af9
    13f0:	00003c38 	.word	0x00003c38
    13f4:	00000ef5 	.word	0x00000ef5

000013f8 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    13f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13fa:	000e      	movs	r6, r1
	void *hw = dev->prvt;
    13fc:	6805      	ldr	r5, [r0, #0]

	ASSERT(dev);
    13fe:	4c0c      	ldr	r4, [pc, #48]	; (1430 <_spi_m_async_enable_rx+0x38>)
    1400:	1e43      	subs	r3, r0, #1
    1402:	4198      	sbcs	r0, r3
    1404:	b2c0      	uxtb	r0, r0
    1406:	4a0b      	ldr	r2, [pc, #44]	; (1434 <_spi_m_async_enable_rx+0x3c>)
    1408:	0021      	movs	r1, r4
    140a:	4f0b      	ldr	r7, [pc, #44]	; (1438 <_spi_m_async_enable_rx+0x40>)
    140c:	47b8      	blx	r7
	ASSERT(hw);
    140e:	0028      	movs	r0, r5
    1410:	1e43      	subs	r3, r0, #1
    1412:	4198      	sbcs	r0, r3
    1414:	b2c0      	uxtb	r0, r0
    1416:	4a09      	ldr	r2, [pc, #36]	; (143c <_spi_m_async_enable_rx+0x44>)
    1418:	0021      	movs	r1, r4
    141a:	47b8      	blx	r7

	if (state) {
    141c:	2e00      	cmp	r6, #0
    141e:	d103      	bne.n	1428 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    1420:	2304      	movs	r3, #4
    1422:	752b      	strb	r3, [r5, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    1424:	2000      	movs	r0, #0
    1426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    1428:	2304      	movs	r3, #4
    142a:	75ab      	strb	r3, [r5, #22]
    142c:	e7fa      	b.n	1424 <_spi_m_async_enable_rx+0x2c>
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	00003c38 	.word	0x00003c38
    1434:	00000b0d 	.word	0x00000b0d
    1438:	00000ef5 	.word	0x00000ef5
    143c:	00000b0e 	.word	0x00000b0e

00001440 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    1440:	b570      	push	{r4, r5, r6, lr}
    1442:	0004      	movs	r4, r0
    1444:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    1446:	2800      	cmp	r0, #0
    1448:	d00f      	beq.n	146a <_spi_m_async_enable_tx_complete+0x2a>
    144a:	6800      	ldr	r0, [r0, #0]
    144c:	1e43      	subs	r3, r0, #1
    144e:	4198      	sbcs	r0, r3
    1450:	b2c0      	uxtb	r0, r0
    1452:	22b2      	movs	r2, #178	; 0xb2
    1454:	0112      	lsls	r2, r2, #4
    1456:	4908      	ldr	r1, [pc, #32]	; (1478 <_spi_m_async_enable_tx_complete+0x38>)
    1458:	4b08      	ldr	r3, [pc, #32]	; (147c <_spi_m_async_enable_tx_complete+0x3c>)
    145a:	4798      	blx	r3

	if (state) {
    145c:	2d00      	cmp	r5, #0
    145e:	d106      	bne.n	146e <_spi_m_async_enable_tx_complete+0x2e>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    1460:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    1462:	2202      	movs	r2, #2
    1464:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    1466:	2000      	movs	r0, #0
    1468:	bd70      	pop	{r4, r5, r6, pc}
    146a:	2000      	movs	r0, #0
    146c:	e7f1      	b.n	1452 <_spi_m_async_enable_tx_complete+0x12>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    146e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    1470:	2202      	movs	r2, #2
    1472:	759a      	strb	r2, [r3, #22]
    1474:	e7f7      	b.n	1466 <_spi_m_async_enable_tx_complete+0x26>
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	00003c38 	.word	0x00003c38
    147c:	00000ef5 	.word	0x00000ef5

00001480 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    1480:	b570      	push	{r4, r5, r6, lr}
    1482:	0004      	movs	r4, r0
    1484:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    1486:	2800      	cmp	r0, #0
    1488:	d00b      	beq.n	14a2 <_spi_m_async_write_one+0x22>
    148a:	6800      	ldr	r0, [r0, #0]
    148c:	1e43      	subs	r3, r0, #1
    148e:	4198      	sbcs	r0, r3
    1490:	b2c0      	uxtb	r0, r0
    1492:	4a05      	ldr	r2, [pc, #20]	; (14a8 <_spi_m_async_write_one+0x28>)
    1494:	4905      	ldr	r1, [pc, #20]	; (14ac <_spi_m_async_write_one+0x2c>)
    1496:	4b06      	ldr	r3, [pc, #24]	; (14b0 <_spi_m_async_write_one+0x30>)
    1498:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    149a:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    149c:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    149e:	2000      	movs	r0, #0
    14a0:	bd70      	pop	{r4, r5, r6, pc}
    14a2:	2000      	movs	r0, #0
    14a4:	e7f5      	b.n	1492 <_spi_m_async_write_one+0x12>
    14a6:	46c0      	nop			; (mov r8, r8)
    14a8:	00000b32 	.word	0x00000b32
    14ac:	00003c38 	.word	0x00003c38
    14b0:	00000ef5 	.word	0x00000ef5

000014b4 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    14b4:	b510      	push	{r4, lr}
    14b6:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    14b8:	d00b      	beq.n	14d2 <_spi_m_async_read_one+0x1e>
    14ba:	6800      	ldr	r0, [r0, #0]
    14bc:	1e43      	subs	r3, r0, #1
    14be:	4198      	sbcs	r0, r3
    14c0:	b2c0      	uxtb	r0, r0
    14c2:	4a05      	ldr	r2, [pc, #20]	; (14d8 <_spi_m_async_read_one+0x24>)
    14c4:	4905      	ldr	r1, [pc, #20]	; (14dc <_spi_m_async_read_one+0x28>)
    14c6:	4b06      	ldr	r3, [pc, #24]	; (14e0 <_spi_m_async_read_one+0x2c>)
    14c8:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    14ca:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    14cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    14ce:	b280      	uxth	r0, r0
}
    14d0:	bd10      	pop	{r4, pc}
    14d2:	2000      	movs	r0, #0
    14d4:	e7f5      	b.n	14c2 <_spi_m_async_read_one+0xe>
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	00000b4d 	.word	0x00000b4d
    14dc:	00003c38 	.word	0x00003c38
    14e0:	00000ef5 	.word	0x00000ef5

000014e4 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    14e4:	b570      	push	{r4, r5, r6, lr}
    14e6:	0004      	movs	r4, r0
    14e8:	000d      	movs	r5, r1
    14ea:	0016      	movs	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    14ec:	2800      	cmp	r0, #0
    14ee:	d00f      	beq.n	1510 <_spi_m_async_register_callback+0x2c>
    14f0:	2000      	movs	r0, #0
    14f2:	2303      	movs	r3, #3
    14f4:	428b      	cmp	r3, r1
    14f6:	4140      	adcs	r0, r0
    14f8:	b2c0      	uxtb	r0, r0
    14fa:	2301      	movs	r3, #1
    14fc:	4018      	ands	r0, r3
    14fe:	4a05      	ldr	r2, [pc, #20]	; (1514 <_spi_m_async_register_callback+0x30>)
    1500:	4905      	ldr	r1, [pc, #20]	; (1518 <_spi_m_async_register_callback+0x34>)
    1502:	4b06      	ldr	r3, [pc, #24]	; (151c <_spi_m_async_register_callback+0x38>)
    1504:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    1506:	00ad      	lsls	r5, r5, #2
    1508:	1964      	adds	r4, r4, r5
    150a:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    150c:	2000      	movs	r0, #0
    150e:	bd70      	pop	{r4, r5, r6, pc}
    1510:	2000      	movs	r0, #0
    1512:	e7f2      	b.n	14fa <_spi_m_async_register_callback+0x16>
    1514:	00000b66 	.word	0x00000b66
    1518:	00003c38 	.word	0x00003c38
    151c:	00000ef5 	.word	0x00000ef5

00001520 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1520:	4b0e      	ldr	r3, [pc, #56]	; (155c <_sysctrl_init_sources+0x3c>)
    1522:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1524:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1526:	480e      	ldr	r0, [pc, #56]	; (1560 <_sysctrl_init_sources+0x40>)
    1528:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    152a:	0f89      	lsrs	r1, r1, #30
    152c:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    152e:	480d      	ldr	r0, [pc, #52]	; (1564 <_sysctrl_init_sources+0x44>)
    1530:	4301      	orrs	r1, r0
    1532:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1534:	621a      	str	r2, [r3, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    1536:	699a      	ldr	r2, [r3, #24]
	((Sysctrl *)hw)->OSC32K.reg = data;
    1538:	220a      	movs	r2, #10
    153a:	619a      	str	r2, [r3, #24]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    153c:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    153e:	3a06      	subs	r2, #6
    1540:	68cb      	ldr	r3, [r1, #12]
    1542:	421a      	tst	r2, r3
    1544:	d0fc      	beq.n	1540 <_sysctrl_init_sources+0x20>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1546:	4905      	ldr	r1, [pc, #20]	; (155c <_sysctrl_init_sources+0x3c>)
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1548:	2208      	movs	r2, #8
    154a:	68cb      	ldr	r3, [r1, #12]
    154c:	421a      	tst	r2, r3
    154e:	d0fc      	beq.n	154a <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1550:	4a02      	ldr	r2, [pc, #8]	; (155c <_sysctrl_init_sources+0x3c>)
    1552:	6a13      	ldr	r3, [r2, #32]
    1554:	2180      	movs	r1, #128	; 0x80
    1556:	430b      	orrs	r3, r1
    1558:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    155a:	4770      	bx	lr
    155c:	40000800 	.word	0x40000800
    1560:	0fff0000 	.word	0x0fff0000
    1564:	00000302 	.word	0x00000302

00001568 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1568:	2202      	movs	r2, #2
    156a:	4b19      	ldr	r3, [pc, #100]	; (15d0 <_sysctrl_init_referenced_generators+0x68>)
    156c:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    156e:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1570:	320e      	adds	r2, #14
    1572:	68cb      	ldr	r3, [r1, #12]
    1574:	421a      	tst	r2, r3
    1576:	d0fc      	beq.n	1572 <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1578:	4a16      	ldr	r2, [pc, #88]	; (15d4 <_sysctrl_init_referenced_generators+0x6c>)
    157a:	4b15      	ldr	r3, [pc, #84]	; (15d0 <_sysctrl_init_referenced_generators+0x68>)
    157c:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    157e:	4b16      	ldr	r3, [pc, #88]	; (15d8 <_sysctrl_init_referenced_generators+0x70>)
    1580:	681b      	ldr	r3, [r3, #0]
    1582:	0e9b      	lsrs	r3, r3, #26
    1584:	2b3f      	cmp	r3, #63	; 0x3f
    1586:	d01a      	beq.n	15be <_sysctrl_init_referenced_generators+0x56>
    1588:	029b      	lsls	r3, r3, #10
    158a:	2280      	movs	r2, #128	; 0x80
    158c:	0092      	lsls	r2, r2, #2
    158e:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1590:	4a0f      	ldr	r2, [pc, #60]	; (15d0 <_sysctrl_init_referenced_generators+0x68>)
    1592:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1594:	2393      	movs	r3, #147	; 0x93
    1596:	005b      	lsls	r3, r3, #1
    1598:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    159a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    159c:	075b      	lsls	r3, r3, #29
    159e:	d511      	bpl.n	15c4 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    15a0:	0011      	movs	r1, r2
	tmp &= mask;
    15a2:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    15a4:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    15a6:	421a      	tst	r2, r3
    15a8:	d0fc      	beq.n	15a4 <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    15aa:	4a09      	ldr	r2, [pc, #36]	; (15d0 <_sysctrl_init_referenced_generators+0x68>)
    15ac:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    15ae:	2180      	movs	r1, #128	; 0x80
    15b0:	430b      	orrs	r3, r1
    15b2:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    15b4:	4a09      	ldr	r2, [pc, #36]	; (15dc <_sysctrl_init_referenced_generators+0x74>)
    15b6:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    15b8:	09db      	lsrs	r3, r3, #7
    15ba:	d1fc      	bne.n	15b6 <_sysctrl_init_referenced_generators+0x4e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    15bc:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    15be:	23fc      	movs	r3, #252	; 0xfc
    15c0:	01db      	lsls	r3, r3, #7
    15c2:	e7e5      	b.n	1590 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    15c4:	4902      	ldr	r1, [pc, #8]	; (15d0 <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    15c6:	2210      	movs	r2, #16
    15c8:	68cb      	ldr	r3, [r1, #12]
    15ca:	421a      	tst	r2, r3
    15cc:	d0fc      	beq.n	15c8 <_sysctrl_init_referenced_generators+0x60>
    15ce:	e7ec      	b.n	15aa <_sysctrl_init_referenced_generators+0x42>
    15d0:	40000800 	.word	0x40000800
    15d4:	0401bb80 	.word	0x0401bb80
    15d8:	00806024 	.word	0x00806024
    15dc:	40000c00 	.word	0x40000c00

000015e0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    15e0:	4b02      	ldr	r3, [pc, #8]	; (15ec <_delay_init+0xc>)
    15e2:	4a03      	ldr	r2, [pc, #12]	; (15f0 <_delay_init+0x10>)
    15e4:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    15e6:	2205      	movs	r2, #5
    15e8:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    15ea:	4770      	bx	lr
    15ec:	e000e010 	.word	0xe000e010
    15f0:	00ffffff 	.word	0x00ffffff

000015f4 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    15f4:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    15f6:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    15f8:	1e5e      	subs	r6, r3, #1
    15fa:	b2f6      	uxtb	r6, r6
    15fc:	2b00      	cmp	r3, #0
    15fe:	d013      	beq.n	1628 <_delay_cycles+0x34>
    1600:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    1602:	4a0e      	ldr	r2, [pc, #56]	; (163c <_delay_cycles+0x48>)
    1604:	4d0e      	ldr	r5, [pc, #56]	; (1640 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1606:	2080      	movs	r0, #128	; 0x80
    1608:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    160a:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    160c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    160e:	6813      	ldr	r3, [r2, #0]
    1610:	4203      	tst	r3, r0
    1612:	d0fc      	beq.n	160e <_delay_cycles+0x1a>
	while (n--) {
    1614:	3c01      	subs	r4, #1
    1616:	b2e4      	uxtb	r4, r4
    1618:	2cff      	cmp	r4, #255	; 0xff
    161a:	d1f6      	bne.n	160a <_delay_cycles+0x16>
    161c:	0633      	lsls	r3, r6, #24
    161e:	1af6      	subs	r6, r6, r3
    1620:	4b08      	ldr	r3, [pc, #32]	; (1644 <_delay_cycles+0x50>)
    1622:	469c      	mov	ip, r3
    1624:	4461      	add	r1, ip
    1626:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1628:	4b04      	ldr	r3, [pc, #16]	; (163c <_delay_cycles+0x48>)
    162a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    162c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    162e:	0019      	movs	r1, r3
    1630:	2280      	movs	r2, #128	; 0x80
    1632:	0252      	lsls	r2, r2, #9
    1634:	680b      	ldr	r3, [r1, #0]
    1636:	4213      	tst	r3, r2
    1638:	d0fc      	beq.n	1634 <_delay_cycles+0x40>
		;
}
    163a:	bd70      	pop	{r4, r5, r6, pc}
    163c:	e000e010 	.word	0xe000e010
    1640:	00ffffff 	.word	0x00ffffff
    1644:	ff000001 	.word	0xff000001

00001648 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1648:	2000      	movs	r0, #0
    164a:	4770      	bx	lr

0000164c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    164c:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    164e:	7c83      	ldrb	r3, [r0, #18]
    1650:	220f      	movs	r2, #15
    1652:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1654:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    1656:	3a08      	subs	r2, #8
    1658:	400a      	ands	r2, r1
    165a:	2a01      	cmp	r2, #1
    165c:	d00b      	beq.n	1676 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    165e:	015a      	lsls	r2, r3, #5
    1660:	4919      	ldr	r1, [pc, #100]	; (16c8 <_usb_d_dev_handle_setup+0x7c>)
    1662:	468c      	mov	ip, r1
    1664:	4462      	add	r2, ip
    1666:	2110      	movs	r1, #16
    1668:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    166a:	015b      	lsls	r3, r3, #5
    166c:	4a17      	ldr	r2, [pc, #92]	; (16cc <_usb_d_dev_handle_setup+0x80>)
    166e:	4694      	mov	ip, r2
    1670:	4463      	add	r3, ip
    1672:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    1674:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    1676:	064a      	lsls	r2, r1, #25
    1678:	d50e      	bpl.n	1698 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    167a:	7cc2      	ldrb	r2, [r0, #19]
    167c:	2140      	movs	r1, #64	; 0x40
    167e:	438a      	bics	r2, r1
    1680:	74c2      	strb	r2, [r0, #19]
    1682:	015a      	lsls	r2, r3, #5
    1684:	4c12      	ldr	r4, [pc, #72]	; (16d0 <_usb_d_dev_handle_setup+0x84>)
    1686:	46a4      	mov	ip, r4
    1688:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    168a:	2580      	movs	r5, #128	; 0x80
    168c:	2482      	movs	r4, #130	; 0x82
    168e:	0064      	lsls	r4, r4, #1
    1690:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1692:	2406      	movs	r4, #6
    1694:	34ff      	adds	r4, #255	; 0xff
    1696:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    1698:	7cc2      	ldrb	r2, [r0, #19]
    169a:	2108      	movs	r1, #8
    169c:	438a      	bics	r2, r1
    169e:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    16a0:	490c      	ldr	r1, [pc, #48]	; (16d4 <_usb_d_dev_handle_setup+0x88>)
    16a2:	015a      	lsls	r2, r3, #5
    16a4:	188c      	adds	r4, r1, r2
    16a6:	2500      	movs	r5, #0
    16a8:	72a5      	strb	r5, [r4, #10]
    16aa:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    16ac:	0013      	movs	r3, r2
    16ae:	4c06      	ldr	r4, [pc, #24]	; (16c8 <_usb_d_dev_handle_setup+0x7c>)
    16b0:	46a4      	mov	ip, r4
    16b2:	4463      	add	r3, ip
    16b4:	246f      	movs	r4, #111	; 0x6f
    16b6:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    16b8:	4b04      	ldr	r3, [pc, #16]	; (16cc <_usb_d_dev_handle_setup+0x80>)
    16ba:	469c      	mov	ip, r3
    16bc:	4462      	add	r2, ip
    16be:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    16c0:	7c80      	ldrb	r0, [r0, #18]
    16c2:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    16c4:	4798      	blx	r3
    16c6:	e7d5      	b.n	1674 <_usb_d_dev_handle_setup+0x28>
    16c8:	41005100 	.word	0x41005100
    16cc:	41005108 	.word	0x41005108
    16d0:	41005000 	.word	0x41005000
    16d4:	20000564 	.word	0x20000564

000016d8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    16d8:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    16da:	2220      	movs	r2, #32
    16dc:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    16de:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    16e0:	7c81      	ldrb	r1, [r0, #18]
    16e2:	230f      	movs	r3, #15
    16e4:	400b      	ands	r3, r1
    16e6:	015b      	lsls	r3, r3, #5
    16e8:	4905      	ldr	r1, [pc, #20]	; (1700 <_usb_d_dev_handle_stall+0x28>)
    16ea:	468c      	mov	ip, r1
    16ec:	4463      	add	r3, ip
    16ee:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    16f0:	6882      	ldr	r2, [r0, #8]
    16f2:	7c80      	ldrb	r0, [r0, #18]
    16f4:	4b03      	ldr	r3, [pc, #12]	; (1704 <_usb_d_dev_handle_stall+0x2c>)
    16f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    16f8:	2101      	movs	r1, #1
    16fa:	4798      	blx	r3
}
    16fc:	bd10      	pop	{r4, pc}
    16fe:	46c0      	nop			; (mov r8, r8)
    1700:	41005108 	.word	0x41005108
    1704:	20000564 	.word	0x20000564

00001708 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1708:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    170a:	7c83      	ldrb	r3, [r0, #18]
    170c:	2bff      	cmp	r3, #255	; 0xff
    170e:	d002      	beq.n	1716 <_usb_d_dev_trans_done+0xe>
    1710:	7cc2      	ldrb	r2, [r0, #19]
    1712:	0652      	lsls	r2, r2, #25
    1714:	d400      	bmi.n	1718 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    1716:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    1718:	7cc2      	ldrb	r2, [r0, #19]
    171a:	2440      	movs	r4, #64	; 0x40
    171c:	43a2      	bics	r2, r4
    171e:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1720:	6882      	ldr	r2, [r0, #8]
    1722:	4802      	ldr	r0, [pc, #8]	; (172c <_usb_d_dev_trans_done+0x24>)
    1724:	6f04      	ldr	r4, [r0, #112]	; 0x70
    1726:	0018      	movs	r0, r3
    1728:	47a0      	blx	r4
    172a:	e7f4      	b.n	1716 <_usb_d_dev_trans_done+0xe>
    172c:	20000564 	.word	0x20000564

00001730 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1730:	b530      	push	{r4, r5, lr}
    1732:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1734:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1736:	ac01      	add	r4, sp, #4
    1738:	2525      	movs	r5, #37	; 0x25
    173a:	7025      	strb	r5, [r4, #0]
    173c:	3525      	adds	r5, #37	; 0x25
    173e:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1740:	2bff      	cmp	r3, #255	; 0xff
    1742:	d01b      	beq.n	177c <_usb_d_dev_trans_stop+0x4c>
    1744:	7cc4      	ldrb	r4, [r0, #19]
    1746:	0664      	lsls	r4, r4, #25
    1748:	d518      	bpl.n	177c <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    174a:	240f      	movs	r4, #15
    174c:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    174e:	2900      	cmp	r1, #0
    1750:	d016      	beq.n	1780 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1752:	015c      	lsls	r4, r3, #5
    1754:	4d0e      	ldr	r5, [pc, #56]	; (1790 <_usb_d_dev_trans_stop+0x60>)
    1756:	46ac      	mov	ip, r5
    1758:	4464      	add	r4, ip
    175a:	2580      	movs	r5, #128	; 0x80
    175c:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    175e:	ac01      	add	r4, sp, #4
    1760:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1762:	0159      	lsls	r1, r3, #5
    1764:	4d0a      	ldr	r5, [pc, #40]	; (1790 <_usb_d_dev_trans_stop+0x60>)
    1766:	46ac      	mov	ip, r5
    1768:	4461      	add	r1, ip
    176a:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    176c:	015b      	lsls	r3, r3, #5
    176e:	4909      	ldr	r1, [pc, #36]	; (1794 <_usb_d_dev_trans_stop+0x64>)
    1770:	468c      	mov	ip, r1
    1772:	4463      	add	r3, ip
    1774:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1776:	0011      	movs	r1, r2
    1778:	4b07      	ldr	r3, [pc, #28]	; (1798 <_usb_d_dev_trans_stop+0x68>)
    177a:	4798      	blx	r3
}
    177c:	b003      	add	sp, #12
    177e:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1780:	015c      	lsls	r4, r3, #5
    1782:	4d03      	ldr	r5, [pc, #12]	; (1790 <_usb_d_dev_trans_stop+0x60>)
    1784:	46ac      	mov	ip, r5
    1786:	4464      	add	r4, ip
    1788:	2540      	movs	r5, #64	; 0x40
    178a:	7165      	strb	r5, [r4, #5]
    178c:	e7e7      	b.n	175e <_usb_d_dev_trans_stop+0x2e>
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	41005100 	.word	0x41005100
    1794:	41005108 	.word	0x41005108
    1798:	00001709 	.word	0x00001709

0000179c <_usb_d_dev_handle_trfail>:
{
    179c:	b570      	push	{r4, r5, r6, lr}
    179e:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    17a0:	7c83      	ldrb	r3, [r0, #18]
    17a2:	220f      	movs	r2, #15
    17a4:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    17a6:	aa01      	add	r2, sp, #4
    17a8:	2404      	movs	r4, #4
    17aa:	7014      	strb	r4, [r2, #0]
    17ac:	3404      	adds	r4, #4
    17ae:	7054      	strb	r4, [r2, #1]
    17b0:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    17b2:	2900      	cmp	r1, #0
    17b4:	d031      	beq.n	181a <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    17b6:	001a      	movs	r2, r3
    17b8:	3208      	adds	r2, #8
    17ba:	0152      	lsls	r2, r2, #5
    17bc:	4c32      	ldr	r4, [pc, #200]	; (1888 <_usb_d_dev_handle_trfail+0xec>)
    17be:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    17c0:	0664      	lsls	r4, r4, #25
    17c2:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    17c4:	010a      	lsls	r2, r1, #4
    17c6:	1952      	adds	r2, r2, r5
    17c8:	4d30      	ldr	r5, [pc, #192]	; (188c <_usb_d_dev_handle_trfail+0xf0>)
    17ca:	18aa      	adds	r2, r5, r2
    17cc:	7a95      	ldrb	r5, [r2, #10]
    17ce:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    17d0:	2c02      	cmp	r4, #2
    17d2:	d02a      	beq.n	182a <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    17d4:	07ac      	lsls	r4, r5, #30
    17d6:	d541      	bpl.n	185c <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    17d8:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    17da:	7a94      	ldrb	r4, [r2, #10]
    17dc:	2602      	movs	r6, #2
    17de:	43b4      	bics	r4, r6
    17e0:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    17e2:	aa01      	add	r2, sp, #4
    17e4:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    17e6:	015a      	lsls	r2, r3, #5
    17e8:	4e29      	ldr	r6, [pc, #164]	; (1890 <_usb_d_dev_handle_trfail+0xf4>)
    17ea:	46b4      	mov	ip, r6
    17ec:	4462      	add	r2, ip
    17ee:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    17f0:	015b      	lsls	r3, r3, #5
    17f2:	4a28      	ldr	r2, [pc, #160]	; (1894 <_usb_d_dev_handle_trfail+0xf8>)
    17f4:	4694      	mov	ip, r2
    17f6:	4463      	add	r3, ip
    17f8:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    17fa:	2307      	movs	r3, #7
    17fc:	402b      	ands	r3, r5
    17fe:	2b01      	cmp	r3, #1
    1800:	d13f      	bne.n	1882 <_usb_d_dev_handle_trfail+0xe6>
    1802:	7cc3      	ldrb	r3, [r0, #19]
    1804:	065b      	lsls	r3, r3, #25
    1806:	d53c      	bpl.n	1882 <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1808:	7cc3      	ldrb	r3, [r0, #19]
    180a:	09db      	lsrs	r3, r3, #7
    180c:	4299      	cmp	r1, r3
    180e:	d038      	beq.n	1882 <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1810:	2200      	movs	r2, #0
    1812:	0019      	movs	r1, r3
    1814:	4b20      	ldr	r3, [pc, #128]	; (1898 <_usb_d_dev_handle_trfail+0xfc>)
    1816:	4798      	blx	r3
    1818:	e033      	b.n	1882 <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    181a:	001a      	movs	r2, r3
    181c:	3208      	adds	r2, #8
    181e:	0152      	lsls	r2, r2, #5
    1820:	4c19      	ldr	r4, [pc, #100]	; (1888 <_usb_d_dev_handle_trfail+0xec>)
    1822:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1824:	2207      	movs	r2, #7
    1826:	4014      	ands	r4, r2
    1828:	e7cc      	b.n	17c4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    182a:	07ec      	lsls	r4, r5, #31
    182c:	d5d2      	bpl.n	17d4 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    182e:	7a94      	ldrb	r4, [r2, #10]
    1830:	2501      	movs	r5, #1
    1832:	43ac      	bics	r4, r5
    1834:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1836:	aa01      	add	r2, sp, #4
    1838:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    183a:	015a      	lsls	r2, r3, #5
    183c:	4d14      	ldr	r5, [pc, #80]	; (1890 <_usb_d_dev_handle_trfail+0xf4>)
    183e:	46ac      	mov	ip, r5
    1840:	4462      	add	r2, ip
    1842:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1844:	015b      	lsls	r3, r3, #5
    1846:	4a13      	ldr	r2, [pc, #76]	; (1894 <_usb_d_dev_handle_trfail+0xf8>)
    1848:	4694      	mov	ip, r2
    184a:	4463      	add	r3, ip
    184c:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    184e:	1e4b      	subs	r3, r1, #1
    1850:	4199      	sbcs	r1, r3
    1852:	b2c9      	uxtb	r1, r1
    1854:	2204      	movs	r2, #4
    1856:	4b10      	ldr	r3, [pc, #64]	; (1898 <_usb_d_dev_handle_trfail+0xfc>)
    1858:	4798      	blx	r3
    185a:	e012      	b.n	1882 <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    185c:	005a      	lsls	r2, r3, #1
    185e:	1852      	adds	r2, r2, r1
    1860:	0112      	lsls	r2, r2, #4
    1862:	480a      	ldr	r0, [pc, #40]	; (188c <_usb_d_dev_handle_trfail+0xf0>)
    1864:	1882      	adds	r2, r0, r2
    1866:	2000      	movs	r0, #0
    1868:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    186a:	aa01      	add	r2, sp, #4
    186c:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    186e:	015a      	lsls	r2, r3, #5
    1870:	4807      	ldr	r0, [pc, #28]	; (1890 <_usb_d_dev_handle_trfail+0xf4>)
    1872:	4684      	mov	ip, r0
    1874:	4462      	add	r2, ip
    1876:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1878:	015b      	lsls	r3, r3, #5
    187a:	4a06      	ldr	r2, [pc, #24]	; (1894 <_usb_d_dev_handle_trfail+0xf8>)
    187c:	4694      	mov	ip, r2
    187e:	4463      	add	r3, ip
    1880:	7019      	strb	r1, [r3, #0]
}
    1882:	b002      	add	sp, #8
    1884:	bd70      	pop	{r4, r5, r6, pc}
    1886:	46c0      	nop			; (mov r8, r8)
    1888:	41005000 	.word	0x41005000
    188c:	20000564 	.word	0x20000564
    1890:	41005100 	.word	0x41005100
    1894:	41005108 	.word	0x41005108
    1898:	00001731 	.word	0x00001731

0000189c <_usb_d_dev_reset_epts>:
{
    189c:	b5f0      	push	{r4, r5, r6, r7, lr}
    189e:	46c6      	mov	lr, r8
    18a0:	b500      	push	{lr}
    18a2:	4d0c      	ldr	r5, [pc, #48]	; (18d4 <_usb_d_dev_reset_epts+0x38>)
    18a4:	002c      	movs	r4, r5
    18a6:	3474      	adds	r4, #116	; 0x74
    18a8:	3529      	adds	r5, #41	; 0x29
    18aa:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    18ac:	4b0a      	ldr	r3, [pc, #40]	; (18d8 <_usb_d_dev_reset_epts+0x3c>)
    18ae:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    18b0:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    18b2:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    18b4:	2103      	movs	r1, #3
    18b6:	0020      	movs	r0, r4
    18b8:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    18ba:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    18bc:	74e6      	strb	r6, [r4, #19]
    18be:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    18c0:	42ac      	cmp	r4, r5
    18c2:	d1f7      	bne.n	18b4 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    18c4:	2260      	movs	r2, #96	; 0x60
    18c6:	2100      	movs	r1, #0
    18c8:	4802      	ldr	r0, [pc, #8]	; (18d4 <_usb_d_dev_reset_epts+0x38>)
    18ca:	4b04      	ldr	r3, [pc, #16]	; (18dc <_usb_d_dev_reset_epts+0x40>)
    18cc:	4798      	blx	r3
}
    18ce:	bc04      	pop	{r2}
    18d0:	4690      	mov	r8, r2
    18d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18d4:	20000564 	.word	0x20000564
    18d8:	00001709 	.word	0x00001709
    18dc:	00003a19 	.word	0x00003a19

000018e0 <_usb_d_dev_in_next>:
{
    18e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18e2:	46c6      	mov	lr, r8
    18e4:	b500      	push	{lr}
    18e6:	0004      	movs	r4, r0
    18e8:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    18ea:	7c83      	ldrb	r3, [r0, #18]
    18ec:	250f      	movs	r5, #15
    18ee:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    18f0:	2900      	cmp	r1, #0
    18f2:	d100      	bne.n	18f6 <_usb_d_dev_in_next+0x16>
    18f4:	e0aa      	b.n	1a4c <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    18f6:	016a      	lsls	r2, r5, #5
    18f8:	4b5a      	ldr	r3, [pc, #360]	; (1a64 <_usb_d_dev_in_next+0x184>)
    18fa:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    18fc:	6958      	ldr	r0, [r3, #20]
    18fe:	0480      	lsls	r0, r0, #18
    1900:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1902:	8a23      	ldrh	r3, [r4, #16]
    1904:	4a58      	ldr	r2, [pc, #352]	; (1a68 <_usb_d_dev_in_next+0x188>)
    1906:	4293      	cmp	r3, r2
    1908:	d100      	bne.n	190c <_usb_d_dev_in_next+0x2c>
    190a:	e09a      	b.n	1a42 <_usb_d_dev_in_next+0x162>
    190c:	3b01      	subs	r3, #1
    190e:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1910:	7ce3      	ldrb	r3, [r4, #19]
    1912:	2707      	movs	r7, #7
    1914:	401f      	ands	r7, r3
	if (isr) {
    1916:	2e00      	cmp	r6, #0
    1918:	d005      	beq.n	1926 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    191a:	016b      	lsls	r3, r5, #5
    191c:	4953      	ldr	r1, [pc, #332]	; (1a6c <_usb_d_dev_in_next+0x18c>)
    191e:	468c      	mov	ip, r1
    1920:	4463      	add	r3, ip
    1922:	2102      	movs	r1, #2
    1924:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    1926:	68a3      	ldr	r3, [r4, #8]
    1928:	18c1      	adds	r1, r0, r3
    192a:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    192c:	6863      	ldr	r3, [r4, #4]
    192e:	4299      	cmp	r1, r3
    1930:	d24a      	bcs.n	19c8 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    1932:	1a5b      	subs	r3, r3, r1
    1934:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    1936:	7ce2      	ldrb	r2, [r4, #19]
    1938:	0692      	lsls	r2, r2, #26
    193a:	d535      	bpl.n	19a8 <_usb_d_dev_in_next+0xc8>
    193c:	8a22      	ldrh	r2, [r4, #16]
    193e:	1c10      	adds	r0, r2, #0
    1940:	b292      	uxth	r2, r2
    1942:	429a      	cmp	r2, r3
    1944:	d900      	bls.n	1948 <_usb_d_dev_in_next+0x68>
    1946:	1c18      	adds	r0, r3, #0
    1948:	b283      	uxth	r3, r0
    194a:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    194c:	6823      	ldr	r3, [r4, #0]
    194e:	469c      	mov	ip, r3
    1950:	4461      	add	r1, ip
    1952:	4642      	mov	r2, r8
    1954:	68e0      	ldr	r0, [r4, #12]
    1956:	4b46      	ldr	r3, [pc, #280]	; (1a70 <_usb_d_dev_in_next+0x190>)
    1958:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    195a:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    195c:	016a      	lsls	r2, r5, #5
    195e:	4b41      	ldr	r3, [pc, #260]	; (1a64 <_usb_d_dev_in_next+0x184>)
    1960:	189b      	adds	r3, r3, r2
    1962:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1964:	016a      	lsls	r2, r5, #5
    1966:	4b3f      	ldr	r3, [pc, #252]	; (1a64 <_usb_d_dev_in_next+0x184>)
    1968:	189b      	adds	r3, r3, r2
    196a:	695a      	ldr	r2, [r3, #20]
    196c:	4641      	mov	r1, r8
    196e:	0489      	lsls	r1, r1, #18
    1970:	0c89      	lsrs	r1, r1, #18
    1972:	0b92      	lsrs	r2, r2, #14
    1974:	0392      	lsls	r2, r2, #14
    1976:	430a      	orrs	r2, r1
    1978:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    197a:	695a      	ldr	r2, [r3, #20]
    197c:	493d      	ldr	r1, [pc, #244]	; (1a74 <_usb_d_dev_in_next+0x194>)
    197e:	400a      	ands	r2, r1
    1980:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1982:	2e00      	cmp	r6, #0
    1984:	d107      	bne.n	1996 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    1986:	2f01      	cmp	r7, #1
    1988:	d059      	beq.n	1a3e <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    198a:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    198c:	016b      	lsls	r3, r5, #5
    198e:	493a      	ldr	r1, [pc, #232]	; (1a78 <_usb_d_dev_in_next+0x198>)
    1990:	468c      	mov	ip, r1
    1992:	4463      	add	r3, ip
    1994:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1996:	016d      	lsls	r5, r5, #5
    1998:	4b34      	ldr	r3, [pc, #208]	; (1a6c <_usb_d_dev_in_next+0x18c>)
    199a:	469c      	mov	ip, r3
    199c:	4465      	add	r5, ip
    199e:	2380      	movs	r3, #128	; 0x80
    19a0:	716b      	strb	r3, [r5, #5]
}
    19a2:	bc04      	pop	{r2}
    19a4:	4690      	mov	r8, r2
    19a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19a8:	1c1a      	adds	r2, r3, #0
    19aa:	2080      	movs	r0, #128	; 0x80
    19ac:	0180      	lsls	r0, r0, #6
    19ae:	4283      	cmp	r3, r0
    19b0:	d901      	bls.n	19b6 <_usb_d_dev_in_next+0xd6>
    19b2:	4b32      	ldr	r3, [pc, #200]	; (1a7c <_usb_d_dev_in_next+0x19c>)
    19b4:	881a      	ldrh	r2, [r3, #0]
    19b6:	b293      	uxth	r3, r2
    19b8:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    19ba:	6823      	ldr	r3, [r4, #0]
    19bc:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    19be:	016a      	lsls	r2, r5, #5
    19c0:	4b28      	ldr	r3, [pc, #160]	; (1a64 <_usb_d_dev_in_next+0x184>)
    19c2:	189b      	adds	r3, r3, r2
    19c4:	6119      	str	r1, [r3, #16]
    19c6:	e7cd      	b.n	1964 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    19c8:	7ce3      	ldrb	r3, [r4, #19]
    19ca:	06db      	lsls	r3, r3, #27
    19cc:	d50f      	bpl.n	19ee <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    19ce:	7ce3      	ldrb	r3, [r4, #19]
    19d0:	2210      	movs	r2, #16
    19d2:	4393      	bics	r3, r2
    19d4:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    19d6:	016a      	lsls	r2, r5, #5
    19d8:	4b22      	ldr	r3, [pc, #136]	; (1a64 <_usb_d_dev_in_next+0x184>)
    19da:	189b      	adds	r3, r3, r2
    19dc:	695a      	ldr	r2, [r3, #20]
    19de:	0b92      	lsrs	r2, r2, #14
    19e0:	0392      	lsls	r2, r2, #14
    19e2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    19e4:	695a      	ldr	r2, [r3, #20]
    19e6:	4923      	ldr	r1, [pc, #140]	; (1a74 <_usb_d_dev_in_next+0x194>)
    19e8:	400a      	ands	r2, r1
    19ea:	615a      	str	r2, [r3, #20]
    19ec:	e7c9      	b.n	1982 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    19ee:	2f01      	cmp	r7, #1
    19f0:	d00e      	beq.n	1a10 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    19f2:	016d      	lsls	r5, r5, #5
    19f4:	4b22      	ldr	r3, [pc, #136]	; (1a80 <_usb_d_dev_in_next+0x1a0>)
    19f6:	469c      	mov	ip, r3
    19f8:	4465      	add	r5, ip
    19fa:	234a      	movs	r3, #74	; 0x4a
    19fc:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    19fe:	8a21      	ldrh	r1, [r4, #16]
    1a00:	4002      	ands	r2, r0
    1a02:	4291      	cmp	r1, r2
    1a04:	d00b      	beq.n	1a1e <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1a06:	2100      	movs	r1, #0
    1a08:	0020      	movs	r0, r4
    1a0a:	4b1e      	ldr	r3, [pc, #120]	; (1a84 <_usb_d_dev_in_next+0x1a4>)
    1a0c:	4798      	blx	r3
	return;
    1a0e:	e7c8      	b.n	19a2 <_usb_d_dev_in_next+0xc2>
    1a10:	016d      	lsls	r5, r5, #5
    1a12:	4b1b      	ldr	r3, [pc, #108]	; (1a80 <_usb_d_dev_in_next+0x1a0>)
    1a14:	469c      	mov	ip, r3
    1a16:	4465      	add	r5, ip
    1a18:	234b      	movs	r3, #75	; 0x4b
    1a1a:	702b      	strb	r3, [r5, #0]
    1a1c:	e7ef      	b.n	19fe <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    1a1e:	7ce3      	ldrb	r3, [r4, #19]
    1a20:	2240      	movs	r2, #64	; 0x40
    1a22:	4393      	bics	r3, r2
    1a24:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1a26:	7ca0      	ldrb	r0, [r4, #18]
    1a28:	4b0e      	ldr	r3, [pc, #56]	; (1a64 <_usb_d_dev_in_next+0x184>)
    1a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1a2c:	68a1      	ldr	r1, [r4, #8]
    1a2e:	4798      	blx	r3
    1a30:	2800      	cmp	r0, #0
    1a32:	d1b6      	bne.n	19a2 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1a34:	7ce3      	ldrb	r3, [r4, #19]
    1a36:	2240      	movs	r2, #64	; 0x40
    1a38:	4313      	orrs	r3, r2
    1a3a:	74e3      	strb	r3, [r4, #19]
    1a3c:	e7e3      	b.n	1a06 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1a3e:	224e      	movs	r2, #78	; 0x4e
    1a40:	e7a4      	b.n	198c <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1a42:	7ce7      	ldrb	r7, [r4, #19]
    1a44:	2307      	movs	r3, #7
    1a46:	401f      	ands	r7, r3
    1a48:	4a07      	ldr	r2, [pc, #28]	; (1a68 <_usb_d_dev_in_next+0x188>)
    1a4a:	e766      	b.n	191a <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1a4c:	8a03      	ldrh	r3, [r0, #16]
    1a4e:	4a06      	ldr	r2, [pc, #24]	; (1a68 <_usb_d_dev_in_next+0x188>)
    1a50:	2000      	movs	r0, #0
    1a52:	4293      	cmp	r3, r2
    1a54:	d000      	beq.n	1a58 <_usb_d_dev_in_next+0x178>
    1a56:	e759      	b.n	190c <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1a58:	7ce3      	ldrb	r3, [r4, #19]
    1a5a:	2707      	movs	r7, #7
    1a5c:	401f      	ands	r7, r3
    1a5e:	2000      	movs	r0, #0
    1a60:	4a01      	ldr	r2, [pc, #4]	; (1a68 <_usb_d_dev_in_next+0x188>)
    1a62:	e760      	b.n	1926 <_usb_d_dev_in_next+0x46>
    1a64:	20000564 	.word	0x20000564
    1a68:	000003ff 	.word	0x000003ff
    1a6c:	41005100 	.word	0x41005100
    1a70:	00003995 	.word	0x00003995
    1a74:	f0003fff 	.word	0xf0003fff
    1a78:	41005109 	.word	0x41005109
    1a7c:	00003c54 	.word	0x00003c54
    1a80:	41005108 	.word	0x41005108
    1a84:	00001709 	.word	0x00001709

00001a88 <_usb_d_dev_out_next>:
{
    1a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a8a:	46de      	mov	lr, fp
    1a8c:	4657      	mov	r7, sl
    1a8e:	464e      	mov	r6, r9
    1a90:	4645      	mov	r5, r8
    1a92:	b5e0      	push	{r5, r6, r7, lr}
    1a94:	0004      	movs	r4, r0
    1a96:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1a98:	7c83      	ldrb	r3, [r0, #18]
    1a9a:	250f      	movs	r5, #15
    1a9c:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1a9e:	2900      	cmp	r1, #0
    1aa0:	d057      	beq.n	1b52 <_usb_d_dev_out_next+0xca>
    1aa2:	016a      	lsls	r2, r5, #5
    1aa4:	4b7d      	ldr	r3, [pc, #500]	; (1c9c <_usb_d_dev_out_next+0x214>)
    1aa6:	189b      	adds	r3, r3, r2
    1aa8:	685a      	ldr	r2, [r3, #4]
    1aaa:	0112      	lsls	r2, r2, #4
    1aac:	0c92      	lsrs	r2, r2, #18
    1aae:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1ab0:	685f      	ldr	r7, [r3, #4]
    1ab2:	04bf      	lsls	r7, r7, #18
    1ab4:	0cbf      	lsrs	r7, r7, #18
    1ab6:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1ab8:	8a06      	ldrh	r6, [r0, #16]
    1aba:	4b79      	ldr	r3, [pc, #484]	; (1ca0 <_usb_d_dev_out_next+0x218>)
    1abc:	429e      	cmp	r6, r3
    1abe:	d100      	bne.n	1ac2 <_usb_d_dev_out_next+0x3a>
    1ac0:	e0cd      	b.n	1c5e <_usb_d_dev_out_next+0x1d6>
    1ac2:	3e01      	subs	r6, #1
    1ac4:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1ac6:	465f      	mov	r7, fp
    1ac8:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1aca:	7ce3      	ldrb	r3, [r4, #19]
    1acc:	2207      	movs	r2, #7
    1ace:	401a      	ands	r2, r3
    1ad0:	4691      	mov	r9, r2
	if (isr) {
    1ad2:	4643      	mov	r3, r8
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	d005      	beq.n	1ae4 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1ad8:	016b      	lsls	r3, r5, #5
    1ada:	4a72      	ldr	r2, [pc, #456]	; (1ca4 <_usb_d_dev_out_next+0x21c>)
    1adc:	4694      	mov	ip, r2
    1ade:	4463      	add	r3, ip
    1ae0:	2201      	movs	r2, #1
    1ae2:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1ae4:	7ce3      	ldrb	r3, [r4, #19]
    1ae6:	069b      	lsls	r3, r3, #26
    1ae8:	d50f      	bpl.n	1b0a <_usb_d_dev_out_next+0x82>
    1aea:	6863      	ldr	r3, [r4, #4]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d039      	beq.n	1b64 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1af0:	68a0      	ldr	r0, [r4, #8]
    1af2:	1a1b      	subs	r3, r3, r0
    1af4:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1af6:	6822      	ldr	r2, [r4, #0]
    1af8:	4694      	mov	ip, r2
    1afa:	4460      	add	r0, ip
    1afc:	68e1      	ldr	r1, [r4, #12]
    1afe:	001a      	movs	r2, r3
    1b00:	42bb      	cmp	r3, r7
    1b02:	d900      	bls.n	1b06 <_usb_d_dev_out_next+0x7e>
    1b04:	003a      	movs	r2, r7
    1b06:	4b68      	ldr	r3, [pc, #416]	; (1ca8 <_usb_d_dev_out_next+0x220>)
    1b08:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1b0a:	6863      	ldr	r3, [r4, #4]
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d029      	beq.n	1b64 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    1b10:	4642      	mov	r2, r8
    1b12:	2a00      	cmp	r2, #0
    1b14:	d042      	beq.n	1b9c <_usb_d_dev_out_next+0x114>
    1b16:	8a22      	ldrh	r2, [r4, #16]
    1b18:	42ba      	cmp	r2, r7
    1b1a:	d93f      	bls.n	1b9c <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    1b1c:	7ce3      	ldrb	r3, [r4, #19]
    1b1e:	2210      	movs	r2, #16
    1b20:	4393      	bics	r3, r2
    1b22:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1b24:	68a3      	ldr	r3, [r4, #8]
    1b26:	445b      	add	r3, fp
    1b28:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1b2a:	464b      	mov	r3, r9
    1b2c:	2b01      	cmp	r3, #1
    1b2e:	d100      	bne.n	1b32 <_usb_d_dev_out_next+0xaa>
    1b30:	e087      	b.n	1c42 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b32:	016b      	lsls	r3, r5, #5
    1b34:	4a5d      	ldr	r2, [pc, #372]	; (1cac <_usb_d_dev_out_next+0x224>)
    1b36:	4694      	mov	ip, r2
    1b38:	4463      	add	r3, ip
    1b3a:	2225      	movs	r2, #37	; 0x25
    1b3c:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    1b3e:	2d00      	cmp	r5, #0
    1b40:	d102      	bne.n	1b48 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    1b42:	4b56      	ldr	r3, [pc, #344]	; (1c9c <_usb_d_dev_out_next+0x214>)
    1b44:	68e2      	ldr	r2, [r4, #12]
    1b46:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1b48:	2100      	movs	r1, #0
    1b4a:	0020      	movs	r0, r4
    1b4c:	4b58      	ldr	r3, [pc, #352]	; (1cb0 <_usb_d_dev_out_next+0x228>)
    1b4e:	4798      	blx	r3
	return;
    1b50:	e059      	b.n	1c06 <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1b52:	8a06      	ldrh	r6, [r0, #16]
    1b54:	4b52      	ldr	r3, [pc, #328]	; (1ca0 <_usb_d_dev_out_next+0x218>)
    1b56:	429e      	cmp	r6, r3
    1b58:	d100      	bne.n	1b5c <_usb_d_dev_out_next+0xd4>
    1b5a:	e08e      	b.n	1c7a <_usb_d_dev_out_next+0x1f2>
    1b5c:	2300      	movs	r3, #0
    1b5e:	469b      	mov	fp, r3
    1b60:	469a      	mov	sl, r3
    1b62:	e7ae      	b.n	1ac2 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1b64:	7ce3      	ldrb	r3, [r4, #19]
    1b66:	06db      	lsls	r3, r3, #27
    1b68:	d400      	bmi.n	1b6c <_usb_d_dev_out_next+0xe4>
    1b6a:	e07f      	b.n	1c6c <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    1b6c:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1b6e:	2210      	movs	r2, #16
    1b70:	4393      	bics	r3, r2
    1b72:	2220      	movs	r2, #32
    1b74:	4313      	orrs	r3, r2
    1b76:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1b78:	4a48      	ldr	r2, [pc, #288]	; (1c9c <_usb_d_dev_out_next+0x214>)
    1b7a:	016b      	lsls	r3, r5, #5
    1b7c:	68e1      	ldr	r1, [r4, #12]
    1b7e:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1b80:	8a21      	ldrh	r1, [r4, #16]
    1b82:	18d3      	adds	r3, r2, r3
    1b84:	685a      	ldr	r2, [r3, #4]
    1b86:	0489      	lsls	r1, r1, #18
    1b88:	0909      	lsrs	r1, r1, #4
    1b8a:	484a      	ldr	r0, [pc, #296]	; (1cb4 <_usb_d_dev_out_next+0x22c>)
    1b8c:	4002      	ands	r2, r0
    1b8e:	430a      	orrs	r2, r1
    1b90:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1b92:	685a      	ldr	r2, [r3, #4]
    1b94:	0b92      	lsrs	r2, r2, #14
    1b96:	0392      	lsls	r2, r2, #14
    1b98:	605a      	str	r2, [r3, #4]
    1b9a:	e022      	b.n	1be2 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    1b9c:	68a2      	ldr	r2, [r4, #8]
    1b9e:	4452      	add	r2, sl
    1ba0:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1ba2:	4293      	cmp	r3, r2
    1ba4:	d9c1      	bls.n	1b2a <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    1ba6:	1a9b      	subs	r3, r3, r2
    1ba8:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1baa:	7ce1      	ldrb	r1, [r4, #19]
    1bac:	0689      	lsls	r1, r1, #26
    1bae:	d530      	bpl.n	1c12 <_usb_d_dev_out_next+0x18a>
    1bb0:	8a22      	ldrh	r2, [r4, #16]
    1bb2:	1c11      	adds	r1, r2, #0
    1bb4:	b292      	uxth	r2, r2
    1bb6:	429a      	cmp	r2, r3
    1bb8:	d900      	bls.n	1bbc <_usb_d_dev_out_next+0x134>
    1bba:	1c19      	adds	r1, r3, #0
    1bbc:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1bbe:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1bc0:	016a      	lsls	r2, r5, #5
    1bc2:	4936      	ldr	r1, [pc, #216]	; (1c9c <_usb_d_dev_out_next+0x214>)
    1bc4:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1bc6:	016a      	lsls	r2, r5, #5
    1bc8:	4934      	ldr	r1, [pc, #208]	; (1c9c <_usb_d_dev_out_next+0x214>)
    1bca:	1889      	adds	r1, r1, r2
    1bcc:	684a      	ldr	r2, [r1, #4]
    1bce:	049b      	lsls	r3, r3, #18
    1bd0:	091b      	lsrs	r3, r3, #4
    1bd2:	4838      	ldr	r0, [pc, #224]	; (1cb4 <_usb_d_dev_out_next+0x22c>)
    1bd4:	4002      	ands	r2, r0
    1bd6:	4313      	orrs	r3, r2
    1bd8:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1bda:	684b      	ldr	r3, [r1, #4]
    1bdc:	0b9b      	lsrs	r3, r3, #14
    1bde:	039b      	lsls	r3, r3, #14
    1be0:	604b      	str	r3, [r1, #4]
	if (!isr) {
    1be2:	4643      	mov	r3, r8
    1be4:	2b00      	cmp	r3, #0
    1be6:	d108      	bne.n	1bfa <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    1be8:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    1bea:	464b      	mov	r3, r9
    1bec:	2b01      	cmp	r3, #1
    1bee:	d02f      	beq.n	1c50 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1bf0:	016b      	lsls	r3, r5, #5
    1bf2:	4931      	ldr	r1, [pc, #196]	; (1cb8 <_usb_d_dev_out_next+0x230>)
    1bf4:	468c      	mov	ip, r1
    1bf6:	4463      	add	r3, ip
    1bf8:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1bfa:	016d      	lsls	r5, r5, #5
    1bfc:	4b29      	ldr	r3, [pc, #164]	; (1ca4 <_usb_d_dev_out_next+0x21c>)
    1bfe:	469c      	mov	ip, r3
    1c00:	4465      	add	r5, ip
    1c02:	2340      	movs	r3, #64	; 0x40
    1c04:	712b      	strb	r3, [r5, #4]
}
    1c06:	bc3c      	pop	{r2, r3, r4, r5}
    1c08:	4690      	mov	r8, r2
    1c0a:	4699      	mov	r9, r3
    1c0c:	46a2      	mov	sl, r4
    1c0e:	46ab      	mov	fp, r5
    1c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    1c12:	8a21      	ldrh	r1, [r4, #16]
    1c14:	428b      	cmp	r3, r1
    1c16:	d90a      	bls.n	1c2e <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1c18:	2180      	movs	r1, #128	; 0x80
    1c1a:	0189      	lsls	r1, r1, #6
    1c1c:	428b      	cmp	r3, r1
    1c1e:	d80d      	bhi.n	1c3c <_usb_d_dev_out_next+0x1b4>
    1c20:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1c22:	6821      	ldr	r1, [r4, #0]
    1c24:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    1c26:	0169      	lsls	r1, r5, #5
    1c28:	481c      	ldr	r0, [pc, #112]	; (1c9c <_usb_d_dev_out_next+0x214>)
    1c2a:	500a      	str	r2, [r1, r0]
    1c2c:	e7cb      	b.n	1bc6 <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    1c2e:	428b      	cmp	r3, r1
    1c30:	d2f7      	bcs.n	1c22 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    1c32:	7ce1      	ldrb	r1, [r4, #19]
    1c34:	2020      	movs	r0, #32
    1c36:	4301      	orrs	r1, r0
    1c38:	74e1      	strb	r1, [r4, #19]
    1c3a:	e7f2      	b.n	1c22 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    1c3c:	2380      	movs	r3, #128	; 0x80
    1c3e:	019b      	lsls	r3, r3, #6
    1c40:	e7ef      	b.n	1c22 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1c42:	016b      	lsls	r3, r5, #5
    1c44:	4a19      	ldr	r2, [pc, #100]	; (1cac <_usb_d_dev_out_next+0x224>)
    1c46:	4694      	mov	ip, r2
    1c48:	4463      	add	r3, ip
    1c4a:	222d      	movs	r2, #45	; 0x2d
    1c4c:	701a      	strb	r2, [r3, #0]
    1c4e:	e776      	b.n	1b3e <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    1c50:	016a      	lsls	r2, r5, #5
    1c52:	4b12      	ldr	r3, [pc, #72]	; (1c9c <_usb_d_dev_out_next+0x214>)
    1c54:	189b      	adds	r3, r3, r2
    1c56:	2200      	movs	r2, #0
    1c58:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1c5a:	322d      	adds	r2, #45	; 0x2d
    1c5c:	e7c8      	b.n	1bf0 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    1c5e:	05bf      	lsls	r7, r7, #22
    1c60:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1c62:	7cc3      	ldrb	r3, [r0, #19]
    1c64:	2207      	movs	r2, #7
    1c66:	401a      	ands	r2, r3
    1c68:	4691      	mov	r9, r2
    1c6a:	e735      	b.n	1ad8 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    1c6c:	4643      	mov	r3, r8
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d10c      	bne.n	1c8c <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    1c72:	68a3      	ldr	r3, [r4, #8]
    1c74:	4453      	add	r3, sl
    1c76:	60a3      	str	r3, [r4, #8]
    1c78:	e757      	b.n	1b2a <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1c7a:	7cc3      	ldrb	r3, [r0, #19]
    1c7c:	2207      	movs	r2, #7
    1c7e:	401a      	ands	r2, r3
    1c80:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    1c82:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1c84:	2300      	movs	r3, #0
    1c86:	469b      	mov	fp, r3
    1c88:	469a      	mov	sl, r3
    1c8a:	e72b      	b.n	1ae4 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1c8c:	8a23      	ldrh	r3, [r4, #16]
    1c8e:	42bb      	cmp	r3, r7
    1c90:	d900      	bls.n	1c94 <_usb_d_dev_out_next+0x20c>
    1c92:	e743      	b.n	1b1c <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    1c94:	68a3      	ldr	r3, [r4, #8]
    1c96:	4453      	add	r3, sl
    1c98:	60a3      	str	r3, [r4, #8]
    1c9a:	e746      	b.n	1b2a <_usb_d_dev_out_next+0xa2>
    1c9c:	20000564 	.word	0x20000564
    1ca0:	000003ff 	.word	0x000003ff
    1ca4:	41005100 	.word	0x41005100
    1ca8:	00003995 	.word	0x00003995
    1cac:	41005108 	.word	0x41005108
    1cb0:	00001709 	.word	0x00001709
    1cb4:	f0003fff 	.word	0xf0003fff
    1cb8:	41005109 	.word	0x41005109

00001cbc <_usb_d_dev_init>:
{
    1cbc:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1cbe:	4b31      	ldr	r3, [pc, #196]	; (1d84 <_usb_d_dev_init+0xc8>)
    1cc0:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1cc2:	07db      	lsls	r3, r3, #31
    1cc4:	d41f      	bmi.n	1d06 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1cc6:	492f      	ldr	r1, [pc, #188]	; (1d84 <_usb_d_dev_init+0xc8>)
    1cc8:	2203      	movs	r2, #3
    1cca:	788b      	ldrb	r3, [r1, #2]
    1ccc:	4213      	tst	r3, r2
    1cce:	d1fc      	bne.n	1cca <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1cd0:	4b2c      	ldr	r3, [pc, #176]	; (1d84 <_usb_d_dev_init+0xc8>)
    1cd2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1cd4:	079b      	lsls	r3, r3, #30
    1cd6:	d50e      	bpl.n	1cf6 <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1cd8:	4a2a      	ldr	r2, [pc, #168]	; (1d84 <_usb_d_dev_init+0xc8>)
    1cda:	7813      	ldrb	r3, [r2, #0]
    1cdc:	2102      	movs	r1, #2
    1cde:	438b      	bics	r3, r1
    1ce0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1ce2:	0011      	movs	r1, r2
    1ce4:	2203      	movs	r2, #3
    1ce6:	788b      	ldrb	r3, [r1, #2]
    1ce8:	4213      	tst	r3, r2
    1cea:	d1fc      	bne.n	1ce6 <_usb_d_dev_init+0x2a>
    1cec:	4925      	ldr	r1, [pc, #148]	; (1d84 <_usb_d_dev_init+0xc8>)
    1cee:	2202      	movs	r2, #2
    1cf0:	788b      	ldrb	r3, [r1, #2]
    1cf2:	4213      	tst	r3, r2
    1cf4:	d1fc      	bne.n	1cf0 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1cf6:	2201      	movs	r2, #1
    1cf8:	4b22      	ldr	r3, [pc, #136]	; (1d84 <_usb_d_dev_init+0xc8>)
    1cfa:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1cfc:	0019      	movs	r1, r3
    1cfe:	3202      	adds	r2, #2
    1d00:	788b      	ldrb	r3, [r1, #2]
    1d02:	4213      	tst	r3, r2
    1d04:	d1fc      	bne.n	1d00 <_usb_d_dev_init+0x44>
    1d06:	491f      	ldr	r1, [pc, #124]	; (1d84 <_usb_d_dev_init+0xc8>)
    1d08:	2201      	movs	r2, #1
    1d0a:	788b      	ldrb	r3, [r1, #2]
    1d0c:	4213      	tst	r3, r2
    1d0e:	d1fc      	bne.n	1d0a <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1d10:	4b1d      	ldr	r3, [pc, #116]	; (1d88 <_usb_d_dev_init+0xcc>)
    1d12:	4a1e      	ldr	r2, [pc, #120]	; (1d8c <_usb_d_dev_init+0xd0>)
    1d14:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1d16:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1d18:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1d1a:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1d1c:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1d1e:	4b1c      	ldr	r3, [pc, #112]	; (1d90 <_usb_d_dev_init+0xd4>)
    1d20:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1d22:	4b1c      	ldr	r3, [pc, #112]	; (1d94 <_usb_d_dev_init+0xd8>)
    1d24:	681b      	ldr	r3, [r3, #0]
    1d26:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    1d28:	211f      	movs	r1, #31
    1d2a:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    1d2c:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    1d2e:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1d30:	019b      	lsls	r3, r3, #6
    1d32:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    1d34:	2a1f      	cmp	r2, #31
    1d36:	d01f      	beq.n	1d78 <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    1d38:	291f      	cmp	r1, #31
    1d3a:	d01f      	beq.n	1d7c <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    1d3c:	2b07      	cmp	r3, #7
    1d3e:	d01f      	beq.n	1d80 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1d40:	0192      	lsls	r2, r2, #6
    1d42:	430a      	orrs	r2, r1
    1d44:	031b      	lsls	r3, r3, #12
    1d46:	4313      	orrs	r3, r2
    1d48:	4a0e      	ldr	r2, [pc, #56]	; (1d84 <_usb_d_dev_init+0xc8>)
    1d4a:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1d4c:	78d3      	ldrb	r3, [r2, #3]
    1d4e:	2103      	movs	r1, #3
    1d50:	430b      	orrs	r3, r1
    1d52:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1d54:	78d3      	ldrb	r3, [r2, #3]
    1d56:	210c      	movs	r1, #12
    1d58:	430b      	orrs	r3, r1
    1d5a:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1d5c:	2304      	movs	r3, #4
    1d5e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1d60:	0011      	movs	r1, r2
    1d62:	2203      	movs	r2, #3
    1d64:	788b      	ldrb	r3, [r1, #2]
    1d66:	4213      	tst	r3, r2
    1d68:	d1fc      	bne.n	1d64 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1d6a:	4b06      	ldr	r3, [pc, #24]	; (1d84 <_usb_d_dev_init+0xc8>)
    1d6c:	4a06      	ldr	r2, [pc, #24]	; (1d88 <_usb_d_dev_init+0xcc>)
    1d6e:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1d70:	2201      	movs	r2, #1
    1d72:	811a      	strh	r2, [r3, #8]
}
    1d74:	2000      	movs	r0, #0
    1d76:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    1d78:	3a1a      	subs	r2, #26
    1d7a:	e7dd      	b.n	1d38 <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    1d7c:	3902      	subs	r1, #2
    1d7e:	e7dd      	b.n	1d3c <_usb_d_dev_init+0x80>
		pad_trim = 5;
    1d80:	3b02      	subs	r3, #2
    1d82:	e7dd      	b.n	1d40 <_usb_d_dev_init+0x84>
    1d84:	41005000 	.word	0x41005000
    1d88:	20000564 	.word	0x20000564
    1d8c:	00001649 	.word	0x00001649
    1d90:	0000189d 	.word	0x0000189d
    1d94:	00806024 	.word	0x00806024

00001d98 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1d98:	4b10      	ldr	r3, [pc, #64]	; (1ddc <_usb_d_dev_enable+0x44>)
    1d9a:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1d9c:	079b      	lsls	r3, r3, #30
    1d9e:	d11a      	bne.n	1dd6 <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1da0:	490e      	ldr	r1, [pc, #56]	; (1ddc <_usb_d_dev_enable+0x44>)
    1da2:	2203      	movs	r2, #3
    1da4:	788b      	ldrb	r3, [r1, #2]
    1da6:	4213      	tst	r3, r2
    1da8:	d1fc      	bne.n	1da4 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1daa:	4b0c      	ldr	r3, [pc, #48]	; (1ddc <_usb_d_dev_enable+0x44>)
    1dac:	781b      	ldrb	r3, [r3, #0]
    1dae:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    1db0:	079a      	lsls	r2, r3, #30
    1db2:	d408      	bmi.n	1dc6 <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1db4:	2202      	movs	r2, #2
    1db6:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1db8:	4a08      	ldr	r2, [pc, #32]	; (1ddc <_usb_d_dev_enable+0x44>)
    1dba:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1dbc:	0011      	movs	r1, r2
    1dbe:	2203      	movs	r2, #3
    1dc0:	788b      	ldrb	r3, [r1, #2]
    1dc2:	4213      	tst	r3, r2
    1dc4:	d1fc      	bne.n	1dc0 <_usb_d_dev_enable+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dc6:	2280      	movs	r2, #128	; 0x80
    1dc8:	4b05      	ldr	r3, [pc, #20]	; (1de0 <_usb_d_dev_enable+0x48>)
    1dca:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1dcc:	4a05      	ldr	r2, [pc, #20]	; (1de4 <_usb_d_dev_enable+0x4c>)
    1dce:	4b03      	ldr	r3, [pc, #12]	; (1ddc <_usb_d_dev_enable+0x44>)
    1dd0:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1dd2:	2000      	movs	r0, #0
}
    1dd4:	4770      	bx	lr
		return -USB_ERR_DENIED;
    1dd6:	2011      	movs	r0, #17
    1dd8:	4240      	negs	r0, r0
    1dda:	e7fb      	b.n	1dd4 <_usb_d_dev_enable+0x3c>
    1ddc:	41005000 	.word	0x41005000
    1de0:	e000e100 	.word	0xe000e100
    1de4:	0000028d 	.word	0x0000028d

00001de8 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1de8:	4a02      	ldr	r2, [pc, #8]	; (1df4 <_usb_d_dev_attach+0xc>)
    1dea:	8913      	ldrh	r3, [r2, #8]
    1dec:	2101      	movs	r1, #1
    1dee:	438b      	bics	r3, r1
    1df0:	8113      	strh	r3, [r2, #8]
}
    1df2:	4770      	bx	lr
    1df4:	41005000 	.word	0x41005000

00001df8 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    1df8:	2380      	movs	r3, #128	; 0x80
    1dfa:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1dfc:	4b01      	ldr	r3, [pc, #4]	; (1e04 <_usb_d_dev_set_address+0xc>)
    1dfe:	7298      	strb	r0, [r3, #10]
}
    1e00:	4770      	bx	lr
    1e02:	46c0      	nop			; (mov r8, r8)
    1e04:	41005000 	.word	0x41005000

00001e08 <_usb_d_dev_ep_init>:
{
    1e08:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1e0a:	240f      	movs	r4, #15
    1e0c:	4004      	ands	r4, r0
    1e0e:	b243      	sxtb	r3, r0
    1e10:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e12:	2c00      	cmp	r4, #0
    1e14:	d054      	beq.n	1ec0 <_usb_d_dev_ep_init+0xb8>
    1e16:	0025      	movs	r5, r4
    1e18:	2b00      	cmp	r3, #0
    1e1a:	db07      	blt.n	1e2c <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1e1c:	2303      	movs	r3, #3
    1e1e:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1e20:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    1e22:	2c02      	cmp	r4, #2
    1e24:	d950      	bls.n	1ec8 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    1e26:	2012      	movs	r0, #18
    1e28:	4240      	negs	r0, r0
    1e2a:	e025      	b.n	1e78 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e2c:	1ca5      	adds	r5, r4, #2
    1e2e:	e7f5      	b.n	1e1c <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1e30:	4663      	mov	r3, ip
    1e32:	2b00      	cmp	r3, #0
    1e34:	db21      	blt.n	1e7a <_usb_d_dev_ep_init+0x72>
    1e36:	007b      	lsls	r3, r7, #1
    1e38:	19db      	adds	r3, r3, r7
    1e3a:	009b      	lsls	r3, r3, #2
    1e3c:	4c3b      	ldr	r4, [pc, #236]	; (1f2c <_usb_d_dev_ep_init+0x124>)
    1e3e:	591b      	ldr	r3, [r3, r4]
    1e40:	2b00      	cmp	r3, #0
    1e42:	d166      	bne.n	1f12 <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1e44:	007b      	lsls	r3, r7, #1
    1e46:	19df      	adds	r7, r3, r7
    1e48:	00bf      	lsls	r7, r7, #2
    1e4a:	4b38      	ldr	r3, [pc, #224]	; (1f2c <_usb_d_dev_ep_init+0x124>)
    1e4c:	58ff      	ldr	r7, [r7, r3]
    1e4e:	4b38      	ldr	r3, [pc, #224]	; (1f30 <_usb_d_dev_ep_init+0x128>)
    1e50:	00ae      	lsls	r6, r5, #2
    1e52:	1974      	adds	r4, r6, r5
    1e54:	00a4      	lsls	r4, r4, #2
    1e56:	191c      	adds	r4, r3, r4
    1e58:	3480      	adds	r4, #128	; 0x80
    1e5a:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    1e5c:	3360      	adds	r3, #96	; 0x60
    1e5e:	1974      	adds	r4, r6, r5
    1e60:	00a4      	lsls	r4, r4, #2
    1e62:	191c      	adds	r4, r3, r4
    1e64:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    1e66:	3427      	adds	r4, #39	; 0x27
    1e68:	3101      	adds	r1, #1
    1e6a:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    1e6c:	1975      	adds	r5, r6, r5
    1e6e:	00ad      	lsls	r5, r5, #2
    1e70:	195b      	adds	r3, r3, r5
    1e72:	3326      	adds	r3, #38	; 0x26
    1e74:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    1e76:	2000      	movs	r0, #0
}
    1e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1e7a:	007b      	lsls	r3, r7, #1
    1e7c:	19db      	adds	r3, r3, r7
    1e7e:	009b      	lsls	r3, r3, #2
    1e80:	4c2a      	ldr	r4, [pc, #168]	; (1f2c <_usb_d_dev_ep_init+0x124>)
    1e82:	18e3      	adds	r3, r4, r3
    1e84:	685b      	ldr	r3, [r3, #4]
    1e86:	2b00      	cmp	r3, #0
    1e88:	d106      	bne.n	1e98 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1e8a:	007b      	lsls	r3, r7, #1
    1e8c:	19df      	adds	r7, r3, r7
    1e8e:	00bf      	lsls	r7, r7, #2
    1e90:	4b26      	ldr	r3, [pc, #152]	; (1f2c <_usb_d_dev_ep_init+0x124>)
    1e92:	19df      	adds	r7, r3, r7
    1e94:	687f      	ldr	r7, [r7, #4]
    1e96:	e7da      	b.n	1e4e <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1e98:	007b      	lsls	r3, r7, #1
    1e9a:	19db      	adds	r3, r3, r7
    1e9c:	009b      	lsls	r3, r3, #2
    1e9e:	4c23      	ldr	r4, [pc, #140]	; (1f2c <_usb_d_dev_ep_init+0x124>)
    1ea0:	18e3      	adds	r3, r4, r3
    1ea2:	895b      	ldrh	r3, [r3, #10]
    1ea4:	4293      	cmp	r3, r2
    1ea6:	daf0      	bge.n	1e8a <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    1ea8:	2013      	movs	r0, #19
    1eaa:	4240      	negs	r0, r0
    1eac:	e7e4      	b.n	1e78 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    1eae:	2014      	movs	r0, #20
    1eb0:	4240      	negs	r0, r0
    1eb2:	e7e1      	b.n	1e78 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    1eb4:	2014      	movs	r0, #20
    1eb6:	4240      	negs	r0, r0
    1eb8:	e7de      	b.n	1e78 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    1eba:	2013      	movs	r0, #19
    1ebc:	4240      	negs	r0, r0
    1ebe:	e7db      	b.n	1e78 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1ec0:	2303      	movs	r3, #3
    1ec2:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    1ec4:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1ec6:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    1ec8:	00ab      	lsls	r3, r5, #2
    1eca:	195b      	adds	r3, r3, r5
    1ecc:	009e      	lsls	r6, r3, #2
    1ece:	4b18      	ldr	r3, [pc, #96]	; (1f30 <_usb_d_dev_ep_init+0x128>)
    1ed0:	199b      	adds	r3, r3, r6
    1ed2:	3386      	adds	r3, #134	; 0x86
    1ed4:	781b      	ldrb	r3, [r3, #0]
    1ed6:	2bff      	cmp	r3, #255	; 0xff
    1ed8:	d1e9      	bne.n	1eae <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    1eda:	2900      	cmp	r1, #0
    1edc:	d1a8      	bne.n	1e30 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1ede:	2c00      	cmp	r4, #0
    1ee0:	d004      	beq.n	1eec <_usb_d_dev_ep_init+0xe4>
    1ee2:	4663      	mov	r3, ip
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	db01      	blt.n	1eec <_usb_d_dev_ep_init+0xe4>
    1ee8:	3402      	adds	r4, #2
    1eea:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    1eec:	00a3      	lsls	r3, r4, #2
    1eee:	191b      	adds	r3, r3, r4
    1ef0:	009b      	lsls	r3, r3, #2
    1ef2:	4c0f      	ldr	r4, [pc, #60]	; (1f30 <_usb_d_dev_ep_init+0x128>)
    1ef4:	18e4      	adds	r4, r4, r3
    1ef6:	3486      	adds	r4, #134	; 0x86
    1ef8:	7823      	ldrb	r3, [r4, #0]
    1efa:	2bff      	cmp	r3, #255	; 0xff
    1efc:	d1da      	bne.n	1eb4 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    1efe:	007b      	lsls	r3, r7, #1
    1f00:	19db      	adds	r3, r3, r7
    1f02:	009b      	lsls	r3, r3, #2
    1f04:	4c09      	ldr	r4, [pc, #36]	; (1f2c <_usb_d_dev_ep_init+0x124>)
    1f06:	591b      	ldr	r3, [r3, r4]
    1f08:	2b00      	cmp	r3, #0
    1f0a:	d0d6      	beq.n	1eba <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1f0c:	4663      	mov	r3, ip
    1f0e:	2b00      	cmp	r3, #0
    1f10:	dbb3      	blt.n	1e7a <_usb_d_dev_ep_init+0x72>
    1f12:	007b      	lsls	r3, r7, #1
    1f14:	19db      	adds	r3, r3, r7
    1f16:	009b      	lsls	r3, r3, #2
    1f18:	4c04      	ldr	r4, [pc, #16]	; (1f2c <_usb_d_dev_ep_init+0x124>)
    1f1a:	18e3      	adds	r3, r4, r3
    1f1c:	891b      	ldrh	r3, [r3, #8]
    1f1e:	4293      	cmp	r3, r2
    1f20:	db00      	blt.n	1f24 <_usb_d_dev_ep_init+0x11c>
    1f22:	e78f      	b.n	1e44 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    1f24:	2013      	movs	r0, #19
    1f26:	4240      	negs	r0, r0
    1f28:	e7a6      	b.n	1e78 <_usb_d_dev_ep_init+0x70>
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	00003c58 	.word	0x00003c58
    1f30:	20000564 	.word	0x20000564

00001f34 <_usb_d_dev_ep_deinit>:
{
    1f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f36:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    1f38:	240f      	movs	r4, #15
    1f3a:	4004      	ands	r4, r0
    1f3c:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1f3e:	2c00      	cmp	r4, #0
    1f40:	d010      	beq.n	1f64 <_usb_d_dev_ep_deinit+0x30>
    1f42:	0020      	movs	r0, r4
    1f44:	2f00      	cmp	r7, #0
    1f46:	db02      	blt.n	1f4e <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1f48:	2c02      	cmp	r4, #2
    1f4a:	d902      	bls.n	1f52 <_usb_d_dev_ep_deinit+0x1e>
}
    1f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1f4e:	1ca0      	adds	r0, r4, #2
    1f50:	e7fa      	b.n	1f48 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    1f52:	0006      	movs	r6, r0
    1f54:	3001      	adds	r0, #1
    1f56:	0083      	lsls	r3, r0, #2
    1f58:	1818      	adds	r0, r3, r0
    1f5a:	0080      	lsls	r0, r0, #2
    1f5c:	4b25      	ldr	r3, [pc, #148]	; (1ff4 <_usb_d_dev_ep_deinit+0xc0>)
    1f5e:	3360      	adds	r3, #96	; 0x60
    1f60:	1818      	adds	r0, r3, r0
    1f62:	e002      	b.n	1f6a <_usb_d_dev_ep_deinit+0x36>
    1f64:	4823      	ldr	r0, [pc, #140]	; (1ff4 <_usb_d_dev_ep_deinit+0xc0>)
    1f66:	3074      	adds	r0, #116	; 0x74
    1f68:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1f6a:	00b3      	lsls	r3, r6, #2
    1f6c:	199b      	adds	r3, r3, r6
    1f6e:	009a      	lsls	r2, r3, #2
    1f70:	4b20      	ldr	r3, [pc, #128]	; (1ff4 <_usb_d_dev_ep_deinit+0xc0>)
    1f72:	189b      	adds	r3, r3, r2
    1f74:	3386      	adds	r3, #134	; 0x86
    1f76:	781b      	ldrb	r3, [r3, #0]
    1f78:	2bff      	cmp	r3, #255	; 0xff
    1f7a:	d0e7      	beq.n	1f4c <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    1f7c:	0ff9      	lsrs	r1, r7, #31
    1f7e:	2203      	movs	r2, #3
    1f80:	4b1d      	ldr	r3, [pc, #116]	; (1ff8 <_usb_d_dev_ep_deinit+0xc4>)
    1f82:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1f84:	00b3      	lsls	r3, r6, #2
    1f86:	199b      	adds	r3, r3, r6
    1f88:	009a      	lsls	r2, r3, #2
    1f8a:	4b1a      	ldr	r3, [pc, #104]	; (1ff4 <_usb_d_dev_ep_deinit+0xc0>)
    1f8c:	189b      	adds	r3, r3, r2
    1f8e:	3380      	adds	r3, #128	; 0x80
    1f90:	79da      	ldrb	r2, [r3, #7]
    1f92:	2307      	movs	r3, #7
    1f94:	4013      	ands	r3, r2
    1f96:	2b01      	cmp	r3, #1
    1f98:	d01b      	beq.n	1fd2 <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    1f9a:	2f00      	cmp	r7, #0
    1f9c:	db1f      	blt.n	1fde <_usb_d_dev_ep_deinit+0xaa>
    1f9e:	016d      	lsls	r5, r5, #5
    1fa0:	4b16      	ldr	r3, [pc, #88]	; (1ffc <_usb_d_dev_ep_deinit+0xc8>)
    1fa2:	469c      	mov	ip, r3
    1fa4:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    1fa6:	2280      	movs	r2, #128	; 0x80
    1fa8:	0052      	lsls	r2, r2, #1
    1faa:	5cab      	ldrb	r3, [r5, r2]
    1fac:	2107      	movs	r1, #7
    1fae:	438b      	bics	r3, r1
    1fb0:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    1fb2:	4b10      	ldr	r3, [pc, #64]	; (1ff4 <_usb_d_dev_ep_deinit+0xc0>)
    1fb4:	3360      	adds	r3, #96	; 0x60
    1fb6:	00b1      	lsls	r1, r6, #2
    1fb8:	198a      	adds	r2, r1, r6
    1fba:	0092      	lsls	r2, r2, #2
    1fbc:	189a      	adds	r2, r3, r2
    1fbe:	3227      	adds	r2, #39	; 0x27
    1fc0:	2000      	movs	r0, #0
    1fc2:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    1fc4:	198e      	adds	r6, r1, r6
    1fc6:	00b6      	lsls	r6, r6, #2
    1fc8:	199b      	adds	r3, r3, r6
    1fca:	3326      	adds	r3, #38	; 0x26
    1fcc:	22ff      	movs	r2, #255	; 0xff
    1fce:	701a      	strb	r2, [r3, #0]
    1fd0:	e7bc      	b.n	1f4c <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    1fd2:	3508      	adds	r5, #8
    1fd4:	016d      	lsls	r5, r5, #5
    1fd6:	2200      	movs	r2, #0
    1fd8:	4b08      	ldr	r3, [pc, #32]	; (1ffc <_usb_d_dev_ep_deinit+0xc8>)
    1fda:	54ea      	strb	r2, [r5, r3]
    1fdc:	e7e9      	b.n	1fb2 <_usb_d_dev_ep_deinit+0x7e>
    1fde:	0164      	lsls	r4, r4, #5
    1fe0:	4b06      	ldr	r3, [pc, #24]	; (1ffc <_usb_d_dev_ep_deinit+0xc8>)
    1fe2:	469c      	mov	ip, r3
    1fe4:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    1fe6:	2280      	movs	r2, #128	; 0x80
    1fe8:	0052      	lsls	r2, r2, #1
    1fea:	5ca3      	ldrb	r3, [r4, r2]
    1fec:	2170      	movs	r1, #112	; 0x70
    1fee:	438b      	bics	r3, r1
    1ff0:	54a3      	strb	r3, [r4, r2]
    1ff2:	e7de      	b.n	1fb2 <_usb_d_dev_ep_deinit+0x7e>
    1ff4:	20000564 	.word	0x20000564
    1ff8:	00001731 	.word	0x00001731
    1ffc:	41005000 	.word	0x41005000

00002000 <_usb_d_dev_ep_enable>:
{
    2000:	b5f0      	push	{r4, r5, r6, r7, lr}
    2002:	46c6      	mov	lr, r8
    2004:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    2006:	220f      	movs	r2, #15
    2008:	4002      	ands	r2, r0
    200a:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    200c:	2a00      	cmp	r2, #0
    200e:	d100      	bne.n	2012 <_usb_d_dev_ep_enable+0x12>
    2010:	e092      	b.n	2138 <STACK_SIZE+0x138>
    2012:	0013      	movs	r3, r2
    2014:	2800      	cmp	r0, #0
    2016:	db0b      	blt.n	2030 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2018:	0011      	movs	r1, r2
    201a:	3208      	adds	r2, #8
    201c:	0152      	lsls	r2, r2, #5
    201e:	4caa      	ldr	r4, [pc, #680]	; (22c8 <STACK_SIZE+0x2c8>)
    2020:	5d15      	ldrb	r5, [r2, r4]
    2022:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2024:	2902      	cmp	r1, #2
    2026:	d800      	bhi.n	202a <_usb_d_dev_ep_enable+0x2a>
    2028:	e08d      	b.n	2146 <STACK_SIZE+0x146>
		return -USB_ERR_PARAM;
    202a:	2012      	movs	r0, #18
    202c:	4240      	negs	r0, r0
    202e:	e0e5      	b.n	21fc <STACK_SIZE+0x1fc>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2030:	1c93      	adds	r3, r2, #2
    2032:	e7f1      	b.n	2018 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2034:	3276      	adds	r2, #118	; 0x76
    2036:	422a      	tst	r2, r5
    2038:	d175      	bne.n	2126 <STACK_SIZE+0x126>
    203a:	4aa3      	ldr	r2, [pc, #652]	; (22c8 <STACK_SIZE+0x2c8>)
    203c:	4690      	mov	r8, r2
    203e:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2040:	2011      	movs	r0, #17
    2042:	2280      	movs	r2, #128	; 0x80
    2044:	0052      	lsls	r2, r2, #1
    2046:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2048:	009a      	lsls	r2, r3, #2
    204a:	18d2      	adds	r2, r2, r3
    204c:	0095      	lsls	r5, r2, #2
    204e:	4a9f      	ldr	r2, [pc, #636]	; (22cc <STACK_SIZE+0x2cc>)
    2050:	3260      	adds	r2, #96	; 0x60
    2052:	1952      	adds	r2, r2, r5
    2054:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    2056:	0395      	lsls	r5, r2, #14
    2058:	489d      	ldr	r0, [pc, #628]	; (22d0 <STACK_SIZE+0x2d0>)
    205a:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    205c:	2080      	movs	r0, #128	; 0x80
    205e:	0080      	lsls	r0, r0, #2
    2060:	4282      	cmp	r2, r0
    2062:	d900      	bls.n	2066 <_usb_d_dev_ep_enable+0x66>
    2064:	e0cd      	b.n	2202 <STACK_SIZE+0x202>
    2066:	3801      	subs	r0, #1
    2068:	38ff      	subs	r0, #255	; 0xff
    206a:	4282      	cmp	r2, r0
    206c:	d900      	bls.n	2070 <_usb_d_dev_ep_enable+0x70>
    206e:	e113      	b.n	2298 <STACK_SIZE+0x298>
    2070:	2a80      	cmp	r2, #128	; 0x80
    2072:	d900      	bls.n	2076 <_usb_d_dev_ep_enable+0x76>
    2074:	e100      	b.n	2278 <STACK_SIZE+0x278>
    2076:	2a40      	cmp	r2, #64	; 0x40
    2078:	d900      	bls.n	207c <_usb_d_dev_ep_enable+0x7c>
    207a:	e115      	b.n	22a8 <STACK_SIZE+0x2a8>
    207c:	2a20      	cmp	r2, #32
    207e:	d900      	bls.n	2082 <_usb_d_dev_ep_enable+0x82>
    2080:	e102      	b.n	2288 <STACK_SIZE+0x288>
    2082:	2a10      	cmp	r2, #16
    2084:	d900      	bls.n	2088 <_usb_d_dev_ep_enable+0x88>
    2086:	e117      	b.n	22b8 <STACK_SIZE+0x2b8>
    2088:	38f8      	subs	r0, #248	; 0xf8
    208a:	4290      	cmp	r0, r2
    208c:	4180      	sbcs	r0, r0
    208e:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2090:	0706      	lsls	r6, r0, #28
    2092:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2094:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2096:	0495      	lsls	r5, r2, #18
    2098:	0cad      	lsrs	r5, r5, #18
    209a:	e0b9      	b.n	2210 <STACK_SIZE+0x210>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    209c:	2270      	movs	r2, #112	; 0x70
    209e:	422a      	tst	r2, r5
    20a0:	d144      	bne.n	212c <STACK_SIZE+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    20a2:	488a      	ldr	r0, [pc, #552]	; (22cc <STACK_SIZE+0x2cc>)
    20a4:	009e      	lsls	r6, r3, #2
    20a6:	18f2      	adds	r2, r6, r3
    20a8:	0092      	lsls	r2, r2, #2
    20aa:	1882      	adds	r2, r0, r2
    20ac:	3280      	adds	r2, #128	; 0x80
    20ae:	79d2      	ldrb	r2, [r2, #7]
    20b0:	0752      	lsls	r2, r2, #29
    20b2:	0e52      	lsrs	r2, r2, #25
    20b4:	4315      	orrs	r5, r2
    20b6:	4a84      	ldr	r2, [pc, #528]	; (22c8 <STACK_SIZE+0x2c8>)
    20b8:	4694      	mov	ip, r2
    20ba:	4464      	add	r4, ip
    20bc:	2280      	movs	r2, #128	; 0x80
    20be:	0052      	lsls	r2, r2, #1
    20c0:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20c2:	3060      	adds	r0, #96	; 0x60
    20c4:	18f6      	adds	r6, r6, r3
    20c6:	00b6      	lsls	r6, r6, #2
    20c8:	1980      	adds	r0, r0, r6
    20ca:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    20cc:	0485      	lsls	r5, r0, #18
    20ce:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    20d0:	3201      	adds	r2, #1
    20d2:	32ff      	adds	r2, #255	; 0xff
    20d4:	2307      	movs	r3, #7
    20d6:	4290      	cmp	r0, r2
    20d8:	d814      	bhi.n	2104 <STACK_SIZE+0x104>
    20da:	3a01      	subs	r2, #1
    20dc:	3aff      	subs	r2, #255	; 0xff
    20de:	3b01      	subs	r3, #1
    20e0:	4290      	cmp	r0, r2
    20e2:	d80f      	bhi.n	2104 <STACK_SIZE+0x104>
    20e4:	3b01      	subs	r3, #1
    20e6:	2880      	cmp	r0, #128	; 0x80
    20e8:	d80c      	bhi.n	2104 <STACK_SIZE+0x104>
    20ea:	3b01      	subs	r3, #1
    20ec:	2840      	cmp	r0, #64	; 0x40
    20ee:	d809      	bhi.n	2104 <STACK_SIZE+0x104>
    20f0:	3b01      	subs	r3, #1
    20f2:	2820      	cmp	r0, #32
    20f4:	d806      	bhi.n	2104 <STACK_SIZE+0x104>
    20f6:	3b01      	subs	r3, #1
    20f8:	2810      	cmp	r0, #16
    20fa:	d803      	bhi.n	2104 <STACK_SIZE+0x104>
    20fc:	3af8      	subs	r2, #248	; 0xf8
    20fe:	4282      	cmp	r2, r0
    2100:	4192      	sbcs	r2, r2
    2102:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2104:	071b      	lsls	r3, r3, #28
    2106:	432b      	orrs	r3, r5
    2108:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    210a:	2280      	movs	r2, #128	; 0x80
    210c:	2382      	movs	r3, #130	; 0x82
    210e:	005b      	lsls	r3, r3, #1
    2110:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    2112:	0149      	lsls	r1, r1, #5
    2114:	4b6d      	ldr	r3, [pc, #436]	; (22cc <STACK_SIZE+0x2cc>)
    2116:	1859      	adds	r1, r3, r1
    2118:	2300      	movs	r3, #0
    211a:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    211c:	2000      	movs	r0, #0
    211e:	e06d      	b.n	21fc <STACK_SIZE+0x1fc>
		return -USB_ERR_PARAM;
    2120:	2012      	movs	r0, #18
    2122:	4240      	negs	r0, r0
    2124:	e06a      	b.n	21fc <STACK_SIZE+0x1fc>
			return -USB_ERR_REDO;
    2126:	2014      	movs	r0, #20
    2128:	4240      	negs	r0, r0
    212a:	e067      	b.n	21fc <STACK_SIZE+0x1fc>
			return -USB_ERR_REDO;
    212c:	2014      	movs	r0, #20
    212e:	4240      	negs	r0, r0
    2130:	e064      	b.n	21fc <STACK_SIZE+0x1fc>
			return -USB_ERR_REDO;
    2132:	2014      	movs	r0, #20
    2134:	4240      	negs	r0, r0
    2136:	e061      	b.n	21fc <STACK_SIZE+0x1fc>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2138:	2380      	movs	r3, #128	; 0x80
    213a:	005b      	lsls	r3, r3, #1
    213c:	4a62      	ldr	r2, [pc, #392]	; (22c8 <STACK_SIZE+0x2c8>)
    213e:	5cd5      	ldrb	r5, [r2, r3]
    2140:	b2ed      	uxtb	r5, r5
    2142:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    2144:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2146:	009a      	lsls	r2, r3, #2
    2148:	18d2      	adds	r2, r2, r3
    214a:	0094      	lsls	r4, r2, #2
    214c:	4a5f      	ldr	r2, [pc, #380]	; (22cc <STACK_SIZE+0x2cc>)
    214e:	1912      	adds	r2, r2, r4
    2150:	3286      	adds	r2, #134	; 0x86
    2152:	7812      	ldrb	r2, [r2, #0]
    2154:	4694      	mov	ip, r2
    2156:	2aff      	cmp	r2, #255	; 0xff
    2158:	d0e2      	beq.n	2120 <STACK_SIZE+0x120>
    215a:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    215c:	4a5b      	ldr	r2, [pc, #364]	; (22cc <STACK_SIZE+0x2cc>)
    215e:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2160:	009e      	lsls	r6, r3, #2
    2162:	18f6      	adds	r6, r6, r3
    2164:	00b6      	lsls	r6, r6, #2
    2166:	1992      	adds	r2, r2, r6
    2168:	3280      	adds	r2, #128	; 0x80
    216a:	79d6      	ldrb	r6, [r2, #7]
    216c:	2207      	movs	r2, #7
    216e:	4032      	ands	r2, r6
    2170:	2a01      	cmp	r2, #1
    2172:	d100      	bne.n	2176 <STACK_SIZE+0x176>
    2174:	e75e      	b.n	2034 <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    2176:	2800      	cmp	r0, #0
    2178:	db90      	blt.n	209c <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    217a:	076a      	lsls	r2, r5, #29
    217c:	d1d9      	bne.n	2132 <STACK_SIZE+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    217e:	4853      	ldr	r0, [pc, #332]	; (22cc <STACK_SIZE+0x2cc>)
    2180:	009e      	lsls	r6, r3, #2
    2182:	18f2      	adds	r2, r6, r3
    2184:	0092      	lsls	r2, r2, #2
    2186:	1882      	adds	r2, r0, r2
    2188:	3280      	adds	r2, #128	; 0x80
    218a:	79d2      	ldrb	r2, [r2, #7]
    218c:	0752      	lsls	r2, r2, #29
    218e:	0f52      	lsrs	r2, r2, #29
    2190:	4315      	orrs	r5, r2
    2192:	4a4d      	ldr	r2, [pc, #308]	; (22c8 <STACK_SIZE+0x2c8>)
    2194:	4694      	mov	ip, r2
    2196:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2198:	2280      	movs	r2, #128	; 0x80
    219a:	0052      	lsls	r2, r2, #1
    219c:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    219e:	3060      	adds	r0, #96	; 0x60
    21a0:	18f6      	adds	r6, r6, r3
    21a2:	00b6      	lsls	r6, r6, #2
    21a4:	1980      	adds	r0, r0, r6
    21a6:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    21a8:	03ab      	lsls	r3, r5, #14
    21aa:	4849      	ldr	r0, [pc, #292]	; (22d0 <STACK_SIZE+0x2d0>)
    21ac:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    21ae:	3201      	adds	r2, #1
    21b0:	32ff      	adds	r2, #255	; 0xff
    21b2:	2307      	movs	r3, #7
    21b4:	4295      	cmp	r5, r2
    21b6:	d814      	bhi.n	21e2 <STACK_SIZE+0x1e2>
    21b8:	3a01      	subs	r2, #1
    21ba:	3aff      	subs	r2, #255	; 0xff
    21bc:	3b01      	subs	r3, #1
    21be:	4295      	cmp	r5, r2
    21c0:	d80f      	bhi.n	21e2 <STACK_SIZE+0x1e2>
    21c2:	3b01      	subs	r3, #1
    21c4:	2d80      	cmp	r5, #128	; 0x80
    21c6:	d80c      	bhi.n	21e2 <STACK_SIZE+0x1e2>
    21c8:	3b01      	subs	r3, #1
    21ca:	2d40      	cmp	r5, #64	; 0x40
    21cc:	d809      	bhi.n	21e2 <STACK_SIZE+0x1e2>
    21ce:	3b01      	subs	r3, #1
    21d0:	2d20      	cmp	r5, #32
    21d2:	d806      	bhi.n	21e2 <STACK_SIZE+0x1e2>
    21d4:	3b01      	subs	r3, #1
    21d6:	2d10      	cmp	r5, #16
    21d8:	d803      	bhi.n	21e2 <STACK_SIZE+0x1e2>
    21da:	3af8      	subs	r2, #248	; 0xf8
    21dc:	42aa      	cmp	r2, r5
    21de:	4192      	sbcs	r2, r2
    21e0:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21e2:	071b      	lsls	r3, r3, #28
    21e4:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    21e6:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    21e8:	2240      	movs	r2, #64	; 0x40
    21ea:	2306      	movs	r3, #6
    21ec:	33ff      	adds	r3, #255	; 0xff
    21ee:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    21f0:	0149      	lsls	r1, r1, #5
    21f2:	4b36      	ldr	r3, [pc, #216]	; (22cc <STACK_SIZE+0x2cc>)
    21f4:	1859      	adds	r1, r3, r1
    21f6:	2300      	movs	r3, #0
    21f8:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    21fa:	2000      	movs	r0, #0
}
    21fc:	bc04      	pop	{r2}
    21fe:	4690      	mov	r8, r2
    2200:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2202:	20e0      	movs	r0, #224	; 0xe0
    2204:	05c0      	lsls	r0, r0, #23
    2206:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2208:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    220a:	0495      	lsls	r5, r2, #18
    220c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    220e:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2210:	0700      	lsls	r0, r0, #28
    2212:	4328      	orrs	r0, r5
    2214:	6178      	str	r0, [r7, #20]
    2216:	2506      	movs	r5, #6
    2218:	35ff      	adds	r5, #255	; 0xff
    221a:	2640      	movs	r6, #64	; 0x40
    221c:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    221e:	2782      	movs	r7, #130	; 0x82
    2220:	007f      	lsls	r7, r7, #1
    2222:	2080      	movs	r0, #128	; 0x80
    2224:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    2226:	4829      	ldr	r0, [pc, #164]	; (22cc <STACK_SIZE+0x2cc>)
    2228:	0149      	lsls	r1, r1, #5
    222a:	1841      	adds	r1, r0, r1
    222c:	2400      	movs	r4, #0
    222e:	728c      	strb	r4, [r1, #10]
    2230:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2232:	340f      	adds	r4, #15
    2234:	4661      	mov	r1, ip
    2236:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2238:	0099      	lsls	r1, r3, #2
    223a:	18c9      	adds	r1, r1, r3
    223c:	0089      	lsls	r1, r1, #2
    223e:	1841      	adds	r1, r0, r1
    2240:	3180      	adds	r1, #128	; 0x80
    2242:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    2244:	0163      	lsls	r3, r4, #5
    2246:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2248:	18c0      	adds	r0, r0, r3
    224a:	6841      	ldr	r1, [r0, #4]
    224c:	0492      	lsls	r2, r2, #18
    224e:	0914      	lsrs	r4, r2, #4
    2250:	4a20      	ldr	r2, [pc, #128]	; (22d4 <STACK_SIZE+0x2d4>)
    2252:	400a      	ands	r2, r1
    2254:	4322      	orrs	r2, r4
    2256:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2258:	6842      	ldr	r2, [r0, #4]
    225a:	0b92      	lsrs	r2, r2, #14
    225c:	0392      	lsls	r2, r2, #14
    225e:	6042      	str	r2, [r0, #4]
    2260:	4a19      	ldr	r2, [pc, #100]	; (22c8 <STACK_SIZE+0x2c8>)
    2262:	189a      	adds	r2, r3, r2
    2264:	21b0      	movs	r1, #176	; 0xb0
    2266:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2268:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    226a:	4a1b      	ldr	r2, [pc, #108]	; (22d8 <STACK_SIZE+0x2d8>)
    226c:	4694      	mov	ip, r2
    226e:	4463      	add	r3, ip
    2270:	2210      	movs	r2, #16
    2272:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    2274:	2000      	movs	r0, #0
    2276:	e7c1      	b.n	21fc <STACK_SIZE+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2278:	20a0      	movs	r0, #160	; 0xa0
    227a:	05c0      	lsls	r0, r0, #23
    227c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    227e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2280:	0495      	lsls	r5, r2, #18
    2282:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2284:	2005      	movs	r0, #5
    2286:	e7c3      	b.n	2210 <STACK_SIZE+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2288:	20c0      	movs	r0, #192	; 0xc0
    228a:	0580      	lsls	r0, r0, #22
    228c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    228e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2290:	0495      	lsls	r5, r2, #18
    2292:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2294:	2003      	movs	r0, #3
    2296:	e7bb      	b.n	2210 <STACK_SIZE+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2298:	20c0      	movs	r0, #192	; 0xc0
    229a:	05c0      	lsls	r0, r0, #23
    229c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    229e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22a0:	0495      	lsls	r5, r2, #18
    22a2:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22a4:	2006      	movs	r0, #6
    22a6:	e7b3      	b.n	2210 <STACK_SIZE+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22a8:	2080      	movs	r0, #128	; 0x80
    22aa:	05c0      	lsls	r0, r0, #23
    22ac:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    22ae:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22b0:	0495      	lsls	r5, r2, #18
    22b2:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22b4:	2004      	movs	r0, #4
    22b6:	e7ab      	b.n	2210 <STACK_SIZE+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22b8:	2080      	movs	r0, #128	; 0x80
    22ba:	0580      	lsls	r0, r0, #22
    22bc:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    22be:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22c0:	0495      	lsls	r5, r2, #18
    22c2:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22c4:	2002      	movs	r0, #2
    22c6:	e7a3      	b.n	2210 <STACK_SIZE+0x210>
    22c8:	41005000 	.word	0x41005000
    22cc:	20000564 	.word	0x20000564
    22d0:	0fffc000 	.word	0x0fffc000
    22d4:	f0003fff 	.word	0xf0003fff
    22d8:	41005109 	.word	0x41005109

000022dc <_usb_d_dev_ep_stall>:
{
    22dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    22de:	230f      	movs	r3, #15
    22e0:	4003      	ands	r3, r0
    22e2:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    22e4:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    22e6:	2b00      	cmp	r3, #0
    22e8:	d009      	beq.n	22fe <_usb_d_dev_ep_stall+0x22>
    22ea:	001a      	movs	r2, r3
    22ec:	2800      	cmp	r0, #0
    22ee:	db04      	blt.n	22fa <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    22f0:	2b02      	cmp	r3, #2
    22f2:	d905      	bls.n	2300 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    22f4:	2012      	movs	r0, #18
    22f6:	4240      	negs	r0, r0
    22f8:	e019      	b.n	232e <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    22fa:	1c9a      	adds	r2, r3, #2
    22fc:	e7f8      	b.n	22f0 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    22fe:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    2300:	2901      	cmp	r1, #1
    2302:	d015      	beq.n	2330 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2304:	2900      	cmp	r1, #0
    2306:	d036      	beq.n	2376 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2308:	0093      	lsls	r3, r2, #2
    230a:	189b      	adds	r3, r3, r2
    230c:	009b      	lsls	r3, r3, #2
    230e:	4a47      	ldr	r2, [pc, #284]	; (242c <_usb_d_dev_ep_stall+0x150>)
    2310:	18d2      	adds	r2, r2, r3
    2312:	3286      	adds	r2, #134	; 0x86
    2314:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2316:	230f      	movs	r3, #15
    2318:	4013      	ands	r3, r2
    231a:	015b      	lsls	r3, r3, #5
    231c:	4a44      	ldr	r2, [pc, #272]	; (2430 <_usb_d_dev_ep_stall+0x154>)
    231e:	4694      	mov	ip, r2
    2320:	4463      	add	r3, ip
    2322:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2324:	2310      	movs	r3, #16
    2326:	40a3      	lsls	r3, r4
    2328:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    232a:	1e43      	subs	r3, r0, #1
    232c:	4198      	sbcs	r0, r3
}
    232e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2330:	2510      	movs	r5, #16
    2332:	40a5      	lsls	r5, r4
    2334:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2336:	493d      	ldr	r1, [pc, #244]	; (242c <_usb_d_dev_ep_stall+0x150>)
    2338:	0090      	lsls	r0, r2, #2
    233a:	1883      	adds	r3, r0, r2
    233c:	009b      	lsls	r3, r3, #2
    233e:	18cb      	adds	r3, r1, r3
    2340:	3386      	adds	r3, #134	; 0x86
    2342:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2344:	230f      	movs	r3, #15
    2346:	4033      	ands	r3, r6
    2348:	015e      	lsls	r6, r3, #5
    234a:	4f39      	ldr	r7, [pc, #228]	; (2430 <_usb_d_dev_ep_stall+0x154>)
    234c:	46bc      	mov	ip, r7
    234e:	4466      	add	r6, ip
    2350:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2352:	2520      	movs	r5, #32
    2354:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2356:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2358:	015b      	lsls	r3, r3, #5
    235a:	4d36      	ldr	r5, [pc, #216]	; (2434 <_usb_d_dev_ep_stall+0x158>)
    235c:	46ac      	mov	ip, r5
    235e:	4463      	add	r3, ip
    2360:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    2362:	1882      	adds	r2, r0, r2
    2364:	0092      	lsls	r2, r2, #2
    2366:	188a      	adds	r2, r1, r2
    2368:	3280      	adds	r2, #128	; 0x80
    236a:	79d3      	ldrb	r3, [r2, #7]
    236c:	2108      	movs	r1, #8
    236e:	430b      	orrs	r3, r1
    2370:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2372:	2000      	movs	r0, #0
    2374:	e7db      	b.n	232e <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2376:	0093      	lsls	r3, r2, #2
    2378:	189b      	adds	r3, r3, r2
    237a:	0099      	lsls	r1, r3, #2
    237c:	4b2b      	ldr	r3, [pc, #172]	; (242c <_usb_d_dev_ep_stall+0x150>)
    237e:	185b      	adds	r3, r3, r1
    2380:	3386      	adds	r3, #134	; 0x86
    2382:	781b      	ldrb	r3, [r3, #0]
    2384:	210f      	movs	r1, #15
    2386:	400b      	ands	r3, r1
    2388:	015d      	lsls	r5, r3, #5
    238a:	492b      	ldr	r1, [pc, #172]	; (2438 <_usb_d_dev_ep_stall+0x15c>)
    238c:	468c      	mov	ip, r1
    238e:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2390:	2183      	movs	r1, #131	; 0x83
    2392:	0049      	lsls	r1, r1, #1
    2394:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2396:	39f6      	subs	r1, #246	; 0xf6
    2398:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    239a:	2000      	movs	r0, #0
	if (!is_stalled) {
    239c:	420e      	tst	r6, r1
    239e:	d0c6      	beq.n	232e <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    23a0:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    23a2:	3005      	adds	r0, #5
    23a4:	30ff      	adds	r0, #255	; 0xff
    23a6:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    23a8:	2120      	movs	r1, #32
    23aa:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    23ac:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    23ae:	015b      	lsls	r3, r3, #5
    23b0:	4e22      	ldr	r6, [pc, #136]	; (243c <_usb_d_dev_ep_stall+0x160>)
    23b2:	46b4      	mov	ip, r6
    23b4:	4463      	add	r3, ip
    23b6:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    23b8:	2308      	movs	r3, #8
    23ba:	33ff      	adds	r3, #255	; 0xff
    23bc:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    23be:	420b      	tst	r3, r1
    23c0:	d009      	beq.n	23d6 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    23c2:	2308      	movs	r3, #8
    23c4:	33ff      	adds	r3, #255	; 0xff
    23c6:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    23c8:	3b07      	subs	r3, #7
    23ca:	3bff      	subs	r3, #255	; 0xff
    23cc:	40a3      	lsls	r3, r4
    23ce:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    23d0:	2182      	movs	r1, #130	; 0x82
    23d2:	0049      	lsls	r1, r1, #1
    23d4:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    23d6:	0093      	lsls	r3, r2, #2
    23d8:	189b      	adds	r3, r3, r2
    23da:	0099      	lsls	r1, r3, #2
    23dc:	4b13      	ldr	r3, [pc, #76]	; (242c <_usb_d_dev_ep_stall+0x150>)
    23de:	185b      	adds	r3, r3, r1
    23e0:	3380      	adds	r3, #128	; 0x80
    23e2:	79d9      	ldrb	r1, [r3, #7]
    23e4:	2307      	movs	r3, #7
    23e6:	400b      	ands	r3, r1
    23e8:	2b01      	cmp	r3, #1
    23ea:	d00b      	beq.n	2404 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    23ec:	0093      	lsls	r3, r2, #2
    23ee:	189a      	adds	r2, r3, r2
    23f0:	0092      	lsls	r2, r2, #2
    23f2:	4b0e      	ldr	r3, [pc, #56]	; (242c <_usb_d_dev_ep_stall+0x150>)
    23f4:	189b      	adds	r3, r3, r2
    23f6:	3380      	adds	r3, #128	; 0x80
    23f8:	79da      	ldrb	r2, [r3, #7]
    23fa:	2108      	movs	r1, #8
    23fc:	438a      	bics	r2, r1
    23fe:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2400:	2000      	movs	r0, #0
    2402:	e794      	b.n	232e <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2404:	3306      	adds	r3, #6
    2406:	33ff      	adds	r3, #255	; 0xff
    2408:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    240a:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    240c:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    240e:	4219      	tst	r1, r3
    2410:	d000      	beq.n	2414 <_usb_d_dev_ep_stall+0x138>
    2412:	e78c      	b.n	232e <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    2414:	0093      	lsls	r3, r2, #2
    2416:	189a      	adds	r2, r3, r2
    2418:	0092      	lsls	r2, r2, #2
    241a:	4b04      	ldr	r3, [pc, #16]	; (242c <_usb_d_dev_ep_stall+0x150>)
    241c:	189b      	adds	r3, r3, r2
    241e:	3380      	adds	r3, #128	; 0x80
    2420:	79da      	ldrb	r2, [r3, #7]
    2422:	2108      	movs	r1, #8
    2424:	438a      	bics	r2, r1
    2426:	71da      	strb	r2, [r3, #7]
    2428:	e781      	b.n	232e <_usb_d_dev_ep_stall+0x52>
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	20000564 	.word	0x20000564
    2430:	41005100 	.word	0x41005100
    2434:	41005109 	.word	0x41005109
    2438:	41005000 	.word	0x41005000
    243c:	41005108 	.word	0x41005108

00002440 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2440:	b570      	push	{r4, r5, r6, lr}
    2442:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    2444:	230f      	movs	r3, #15
    2446:	4018      	ands	r0, r3
    2448:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    244a:	4b16      	ldr	r3, [pc, #88]	; (24a4 <_usb_d_dev_ep_read_req+0x64>)
    244c:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    244e:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2450:	685b      	ldr	r3, [r3, #4]
    2452:	049b      	lsls	r3, r3, #18
    2454:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    2456:	2802      	cmp	r0, #2
    2458:	d81a      	bhi.n	2490 <_usb_d_dev_ep_read_req+0x50>
    245a:	2d00      	cmp	r5, #0
    245c:	d01b      	beq.n	2496 <_usb_d_dev_ep_read_req+0x56>
    245e:	4b12      	ldr	r3, [pc, #72]	; (24a8 <_usb_d_dev_ep_read_req+0x68>)
    2460:	469c      	mov	ip, r3
    2462:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2464:	2380      	movs	r3, #128	; 0x80
    2466:	005b      	lsls	r3, r3, #1
    2468:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    246a:	2b11      	cmp	r3, #17
    246c:	d116      	bne.n	249c <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    246e:	2308      	movs	r3, #8
    2470:	33ff      	adds	r3, #255	; 0xff
    2472:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    2474:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    2476:	06db      	lsls	r3, r3, #27
    2478:	d400      	bmi.n	247c <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    247a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    247c:	2208      	movs	r2, #8
    247e:	0028      	movs	r0, r5
    2480:	4b0a      	ldr	r3, [pc, #40]	; (24ac <_usb_d_dev_ep_read_req+0x6c>)
    2482:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2484:	2210      	movs	r2, #16
    2486:	2308      	movs	r3, #8
    2488:	33ff      	adds	r3, #255	; 0xff
    248a:	54e2      	strb	r2, [r4, r3]
	return bytes;
    248c:	0030      	movs	r0, r6
    248e:	e7f4      	b.n	247a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    2490:	2012      	movs	r0, #18
    2492:	4240      	negs	r0, r0
    2494:	e7f1      	b.n	247a <_usb_d_dev_ep_read_req+0x3a>
    2496:	2012      	movs	r0, #18
    2498:	4240      	negs	r0, r0
    249a:	e7ee      	b.n	247a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    249c:	2013      	movs	r0, #19
    249e:	4240      	negs	r0, r0
    24a0:	e7eb      	b.n	247a <_usb_d_dev_ep_read_req+0x3a>
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	20000564 	.word	0x20000564
    24a8:	41005000 	.word	0x41005000
    24ac:	00003995 	.word	0x00003995

000024b0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    24b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24b2:	46de      	mov	lr, fp
    24b4:	4657      	mov	r7, sl
    24b6:	464e      	mov	r6, r9
    24b8:	4645      	mov	r5, r8
    24ba:	b5e0      	push	{r5, r6, r7, lr}
    24bc:	b085      	sub	sp, #20
    24be:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    24c0:	7a06      	ldrb	r6, [r0, #8]
    24c2:	230f      	movs	r3, #15
    24c4:	4033      	ands	r3, r6
    24c6:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    24c8:	2b00      	cmp	r3, #0
    24ca:	d100      	bne.n	24ce <_usb_d_dev_ep_trans+0x1e>
    24cc:	e0d3      	b.n	2676 <_usb_d_dev_ep_trans+0x1c6>
    24ce:	0018      	movs	r0, r3
    24d0:	2e00      	cmp	r6, #0
    24d2:	db39      	blt.n	2548 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    24d4:	0004      	movs	r4, r0
    24d6:	4a73      	ldr	r2, [pc, #460]	; (26a4 <_usb_d_dev_ep_trans+0x1f4>)
    24d8:	3260      	adds	r2, #96	; 0x60
    24da:	1c41      	adds	r1, r0, #1
    24dc:	008d      	lsls	r5, r1, #2
    24de:	186d      	adds	r5, r5, r1
    24e0:	00ad      	lsls	r5, r5, #2
    24e2:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    24e4:	0081      	lsls	r1, r0, #2
    24e6:	1809      	adds	r1, r1, r0
    24e8:	0089      	lsls	r1, r1, #2
    24ea:	1852      	adds	r2, r2, r1
    24ec:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    24ee:	4a6e      	ldr	r2, [pc, #440]	; (26a8 <_usb_d_dev_ep_trans+0x1f8>)
    24f0:	4291      	cmp	r1, r2
    24f2:	d02b      	beq.n	254c <_usb_d_dev_ep_trans+0x9c>
    24f4:	1e4f      	subs	r7, r1, #1
    24f6:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    24f8:	4642      	mov	r2, r8
    24fa:	6852      	ldr	r2, [r2, #4]
    24fc:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    24fe:	2b02      	cmp	r3, #2
    2500:	d900      	bls.n	2504 <_usb_d_dev_ep_trans+0x54>
    2502:	e0a4      	b.n	264e <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2504:	4643      	mov	r3, r8
    2506:	681b      	ldr	r3, [r3, #0]
    2508:	4868      	ldr	r0, [pc, #416]	; (26ac <_usb_d_dev_ep_trans+0x1fc>)
    250a:	4283      	cmp	r3, r0
    250c:	d920      	bls.n	2550 <_usb_d_dev_ep_trans+0xa0>
    250e:	1898      	adds	r0, r3, r2
    2510:	9001      	str	r0, [sp, #4]
    2512:	4867      	ldr	r0, [pc, #412]	; (26b0 <_usb_d_dev_ep_trans+0x200>)
    2514:	4684      	mov	ip, r0
    2516:	9801      	ldr	r0, [sp, #4]
    2518:	4560      	cmp	r0, ip
    251a:	d819      	bhi.n	2550 <_usb_d_dev_ep_trans+0xa0>
    251c:	079b      	lsls	r3, r3, #30
    251e:	d117      	bne.n	2550 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    2520:	2e00      	cmp	r6, #0
    2522:	db32      	blt.n	258a <_usb_d_dev_ep_trans+0xda>
    2524:	4291      	cmp	r1, r2
    2526:	d900      	bls.n	252a <_usb_d_dev_ep_trans+0x7a>
    2528:	e0af      	b.n	268a <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    252a:	2f00      	cmp	r7, #0
    252c:	d030      	beq.n	2590 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    252e:	00a3      	lsls	r3, r4, #2
    2530:	191b      	adds	r3, r3, r4
    2532:	009a      	lsls	r2, r3, #2
    2534:	4b5b      	ldr	r3, [pc, #364]	; (26a4 <_usb_d_dev_ep_trans+0x1f4>)
    2536:	189b      	adds	r3, r3, r2
    2538:	3380      	adds	r3, #128	; 0x80
    253a:	681b      	ldr	r3, [r3, #0]
    253c:	2b00      	cmp	r3, #0
    253e:	d100      	bne.n	2542 <_usb_d_dev_ep_trans+0x92>
    2540:	e08b      	b.n	265a <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    2542:	2300      	movs	r3, #0
    2544:	4699      	mov	r9, r3
    2546:	e00f      	b.n	2568 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2548:	1c98      	adds	r0, r3, #2
    254a:	e7c3      	b.n	24d4 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    254c:	000f      	movs	r7, r1
    254e:	e7d3      	b.n	24f8 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    2550:	00a3      	lsls	r3, r4, #2
    2552:	191b      	adds	r3, r3, r4
    2554:	009a      	lsls	r2, r3, #2
    2556:	4b53      	ldr	r3, [pc, #332]	; (26a4 <_usb_d_dev_ep_trans+0x1f4>)
    2558:	189b      	adds	r3, r3, r2
    255a:	3380      	adds	r3, #128	; 0x80
    255c:	681b      	ldr	r3, [r3, #0]
    255e:	2b00      	cmp	r3, #0
    2560:	d100      	bne.n	2564 <_usb_d_dev_ep_trans+0xb4>
    2562:	e077      	b.n	2654 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    2564:	2301      	movs	r3, #1
    2566:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2568:	00a3      	lsls	r3, r4, #2
    256a:	191b      	adds	r3, r3, r4
    256c:	009a      	lsls	r2, r3, #2
    256e:	4b4d      	ldr	r3, [pc, #308]	; (26a4 <_usb_d_dev_ep_trans+0x1f4>)
    2570:	189b      	adds	r3, r3, r2
    2572:	3380      	adds	r3, #128	; 0x80
    2574:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    2576:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    2578:	071b      	lsls	r3, r3, #28
    257a:	d50c      	bpl.n	2596 <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    257c:	b005      	add	sp, #20
    257e:	bc3c      	pop	{r2, r3, r4, r5}
    2580:	4690      	mov	r8, r2
    2582:	4699      	mov	r9, r3
    2584:	46a2      	mov	sl, r4
    2586:	46ab      	mov	fp, r5
    2588:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    258a:	2300      	movs	r3, #0
    258c:	4699      	mov	r9, r3
    258e:	e7eb      	b.n	2568 <_usb_d_dev_ep_trans+0xb8>
    2590:	2300      	movs	r3, #0
    2592:	4699      	mov	r9, r3
    2594:	e7e8      	b.n	2568 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    2596:	a803      	add	r0, sp, #12
    2598:	4b46      	ldr	r3, [pc, #280]	; (26b4 <_usb_d_dev_ep_trans+0x204>)
    259a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    259c:	00a3      	lsls	r3, r4, #2
    259e:	191b      	adds	r3, r3, r4
    25a0:	009a      	lsls	r2, r3, #2
    25a2:	4b40      	ldr	r3, [pc, #256]	; (26a4 <_usb_d_dev_ep_trans+0x1f4>)
    25a4:	189b      	adds	r3, r3, r2
    25a6:	3380      	adds	r3, #128	; 0x80
    25a8:	79db      	ldrb	r3, [r3, #7]
    25aa:	065b      	lsls	r3, r3, #25
    25ac:	d444      	bmi.n	2638 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    25ae:	00a3      	lsls	r3, r4, #2
    25b0:	191b      	adds	r3, r3, r4
    25b2:	009b      	lsls	r3, r3, #2
    25b4:	4a3b      	ldr	r2, [pc, #236]	; (26a4 <_usb_d_dev_ep_trans+0x1f4>)
    25b6:	4693      	mov	fp, r2
    25b8:	449b      	add	fp, r3
    25ba:	2380      	movs	r3, #128	; 0x80
    25bc:	445b      	add	r3, fp
    25be:	469a      	mov	sl, r3
    25c0:	79db      	ldrb	r3, [r3, #7]
    25c2:	2240      	movs	r2, #64	; 0x40
    25c4:	4313      	orrs	r3, r2
    25c6:	4652      	mov	r2, sl
    25c8:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    25ca:	a803      	add	r0, sp, #12
    25cc:	4b3a      	ldr	r3, [pc, #232]	; (26b8 <_usb_d_dev_ep_trans+0x208>)
    25ce:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    25d0:	465b      	mov	r3, fp
    25d2:	4642      	mov	r2, r8
    25d4:	6812      	ldr	r2, [r2, #0]
    25d6:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    25d8:	4642      	mov	r2, r8
    25da:	6852      	ldr	r2, [r2, #4]
    25dc:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    25de:	2300      	movs	r3, #0
    25e0:	465a      	mov	r2, fp
    25e2:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    25e4:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    25e6:	01d2      	lsls	r2, r2, #7
    25e8:	4653      	mov	r3, sl
    25ea:	79d9      	ldrb	r1, [r3, #7]
    25ec:	237f      	movs	r3, #127	; 0x7f
    25ee:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    25f0:	4649      	mov	r1, r9
    25f2:	0149      	lsls	r1, r1, #5
    25f4:	4313      	orrs	r3, r2
    25f6:	2220      	movs	r2, #32
    25f8:	4393      	bics	r3, r2
    25fa:	430b      	orrs	r3, r1
    25fc:	4652      	mov	r2, sl
    25fe:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2600:	4643      	mov	r3, r8
    2602:	7a5b      	ldrb	r3, [r3, #9]
    2604:	2200      	movs	r2, #0
    2606:	2b00      	cmp	r3, #0
    2608:	d002      	beq.n	2610 <_usb_d_dev_ep_trans+0x160>
    260a:	427a      	negs	r2, r7
    260c:	417a      	adcs	r2, r7
    260e:	b2d2      	uxtb	r2, r2
    2610:	00a3      	lsls	r3, r4, #2
    2612:	191c      	adds	r4, r3, r4
    2614:	00a4      	lsls	r4, r4, #2
    2616:	4b23      	ldr	r3, [pc, #140]	; (26a4 <_usb_d_dev_ep_trans+0x1f4>)
    2618:	191b      	adds	r3, r3, r4
    261a:	3380      	adds	r3, #128	; 0x80
    261c:	0112      	lsls	r2, r2, #4
    261e:	79df      	ldrb	r7, [r3, #7]
    2620:	2110      	movs	r1, #16
    2622:	438f      	bics	r7, r1
    2624:	4317      	orrs	r7, r2
    2626:	71df      	strb	r7, [r3, #7]
	if (dir) {
    2628:	2e00      	cmp	r6, #0
    262a:	db0a      	blt.n	2642 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    262c:	2100      	movs	r1, #0
    262e:	0028      	movs	r0, r5
    2630:	4b22      	ldr	r3, [pc, #136]	; (26bc <_usb_d_dev_ep_trans+0x20c>)
    2632:	4798      	blx	r3
	return ERR_NONE;
    2634:	2000      	movs	r0, #0
    2636:	e7a1      	b.n	257c <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    2638:	a803      	add	r0, sp, #12
    263a:	4b1f      	ldr	r3, [pc, #124]	; (26b8 <_usb_d_dev_ep_trans+0x208>)
    263c:	4798      	blx	r3
		return USB_BUSY;
    263e:	2001      	movs	r0, #1
    2640:	e79c      	b.n	257c <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    2642:	2100      	movs	r1, #0
    2644:	0028      	movs	r0, r5
    2646:	4b1e      	ldr	r3, [pc, #120]	; (26c0 <_usb_d_dev_ep_trans+0x210>)
    2648:	4798      	blx	r3
	return ERR_NONE;
    264a:	2000      	movs	r0, #0
    264c:	e796      	b.n	257c <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    264e:	2012      	movs	r0, #18
    2650:	4240      	negs	r0, r0
    2652:	e793      	b.n	257c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    2654:	2013      	movs	r0, #19
    2656:	4240      	negs	r0, r0
    2658:	e790      	b.n	257c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    265a:	2012      	movs	r0, #18
    265c:	4240      	negs	r0, r0
    265e:	e78d      	b.n	257c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    2660:	2013      	movs	r0, #19
    2662:	4240      	negs	r0, r0
    2664:	e78a      	b.n	257c <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    2666:	4643      	mov	r3, r8
    2668:	685a      	ldr	r2, [r3, #4]
    266a:	0597      	lsls	r7, r2, #22
    266c:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    266e:	4d0d      	ldr	r5, [pc, #52]	; (26a4 <_usb_d_dev_ep_trans+0x1f4>)
    2670:	3574      	adds	r5, #116	; 0x74
    2672:	2400      	movs	r4, #0
    2674:	e746      	b.n	2504 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2676:	4a0b      	ldr	r2, [pc, #44]	; (26a4 <_usb_d_dev_ep_trans+0x1f4>)
    2678:	3260      	adds	r2, #96	; 0x60
    267a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    267c:	4a0a      	ldr	r2, [pc, #40]	; (26a8 <_usb_d_dev_ep_trans+0x1f8>)
    267e:	4291      	cmp	r1, r2
    2680:	d0f1      	beq.n	2666 <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    2682:	4d08      	ldr	r5, [pc, #32]	; (26a4 <_usb_d_dev_ep_trans+0x1f4>)
    2684:	3574      	adds	r5, #116	; 0x74
    2686:	2400      	movs	r4, #0
    2688:	e734      	b.n	24f4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    268a:	00a3      	lsls	r3, r4, #2
    268c:	191b      	adds	r3, r3, r4
    268e:	009a      	lsls	r2, r3, #2
    2690:	4b04      	ldr	r3, [pc, #16]	; (26a4 <_usb_d_dev_ep_trans+0x1f4>)
    2692:	189b      	adds	r3, r3, r2
    2694:	3380      	adds	r3, #128	; 0x80
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	2b00      	cmp	r3, #0
    269a:	d0e1      	beq.n	2660 <_usb_d_dev_ep_trans+0x1b0>
    269c:	2301      	movs	r3, #1
    269e:	4699      	mov	r9, r3
    26a0:	e762      	b.n	2568 <_usb_d_dev_ep_trans+0xb8>
    26a2:	46c0      	nop			; (mov r8, r8)
    26a4:	20000564 	.word	0x20000564
    26a8:	000003ff 	.word	0x000003ff
    26ac:	1fffffff 	.word	0x1fffffff
    26b0:	20007fff 	.word	0x20007fff
    26b4:	00002dc1 	.word	0x00002dc1
    26b8:	00002dcf 	.word	0x00002dcf
    26bc:	00001a89 	.word	0x00001a89
    26c0:	000018e1 	.word	0x000018e1

000026c4 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    26c4:	1e0b      	subs	r3, r1, #0
    26c6:	d006      	beq.n	26d6 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    26c8:	2801      	cmp	r0, #1
    26ca:	d006      	beq.n	26da <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    26cc:	2800      	cmp	r0, #0
    26ce:	d101      	bne.n	26d4 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    26d0:	4a03      	ldr	r2, [pc, #12]	; (26e0 <_usb_d_dev_register_callback+0x1c>)
    26d2:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    26d4:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    26d6:	4b03      	ldr	r3, [pc, #12]	; (26e4 <_usb_d_dev_register_callback+0x20>)
    26d8:	e7f6      	b.n	26c8 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    26da:	4a01      	ldr	r2, [pc, #4]	; (26e0 <_usb_d_dev_register_callback+0x1c>)
    26dc:	6653      	str	r3, [r2, #100]	; 0x64
    26de:	e7f9      	b.n	26d4 <_usb_d_dev_register_callback+0x10>
    26e0:	20000564 	.word	0x20000564
    26e4:	00001649 	.word	0x00001649

000026e8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    26e8:	1e0b      	subs	r3, r1, #0
    26ea:	d008      	beq.n	26fe <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    26ec:	2800      	cmp	r0, #0
    26ee:	d008      	beq.n	2702 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    26f0:	2801      	cmp	r0, #1
    26f2:	d009      	beq.n	2708 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    26f4:	2802      	cmp	r0, #2
    26f6:	d106      	bne.n	2706 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    26f8:	4a05      	ldr	r2, [pc, #20]	; (2710 <_usb_d_dev_register_ep_callback+0x28>)
    26fa:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    26fc:	e003      	b.n	2706 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    26fe:	4b05      	ldr	r3, [pc, #20]	; (2714 <_usb_d_dev_register_ep_callback+0x2c>)
    2700:	e7f4      	b.n	26ec <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2702:	4a03      	ldr	r2, [pc, #12]	; (2710 <_usb_d_dev_register_ep_callback+0x28>)
    2704:	6693      	str	r3, [r2, #104]	; 0x68
}
    2706:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2708:	4a01      	ldr	r2, [pc, #4]	; (2710 <_usb_d_dev_register_ep_callback+0x28>)
    270a:	66d3      	str	r3, [r2, #108]	; 0x6c
    270c:	e7fb      	b.n	2706 <_usb_d_dev_register_ep_callback+0x1e>
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	20000564 	.word	0x20000564
    2714:	00001649 	.word	0x00001649

00002718 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    2718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    271a:	4b82      	ldr	r3, [pc, #520]	; (2924 <USB_Handler+0x20c>)
    271c:	8c1e      	ldrh	r6, [r3, #32]
    271e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2720:	2e00      	cmp	r6, #0
    2722:	d003      	beq.n	272c <USB_Handler+0x14>
    2724:	4c80      	ldr	r4, [pc, #512]	; (2928 <USB_Handler+0x210>)
    2726:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    2728:	2500      	movs	r5, #0
    272a:	e0b9      	b.n	28a0 <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    272c:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    272e:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2730:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2732:	075a      	lsls	r2, r3, #29
    2734:	d417      	bmi.n	2766 <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2736:	059a      	lsls	r2, r3, #22
    2738:	d41c      	bmi.n	2774 <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    273a:	061a      	lsls	r2, r3, #24
    273c:	d43e      	bmi.n	27bc <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    273e:	2270      	movs	r2, #112	; 0x70
    2740:	421a      	tst	r2, r3
    2742:	d144      	bne.n	27ce <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2744:	071a      	lsls	r2, r3, #28
    2746:	d45e      	bmi.n	2806 <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2748:	07db      	lsls	r3, r3, #31
    274a:	d5eb      	bpl.n	2724 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    274c:	4b75      	ldr	r3, [pc, #468]	; (2924 <USB_Handler+0x20c>)
    274e:	4a77      	ldr	r2, [pc, #476]	; (292c <USB_Handler+0x214>)
    2750:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2752:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2754:	3a92      	subs	r2, #146	; 0x92
    2756:	3aff      	subs	r2, #255	; 0xff
    2758:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    275a:	4b73      	ldr	r3, [pc, #460]	; (2928 <USB_Handler+0x210>)
    275c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    275e:	2100      	movs	r1, #0
    2760:	2004      	movs	r0, #4
    2762:	4798      	blx	r3
    2764:	e005      	b.n	2772 <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2766:	2204      	movs	r2, #4
    2768:	4b6e      	ldr	r3, [pc, #440]	; (2924 <USB_Handler+0x20c>)
    276a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    276c:	4b6e      	ldr	r3, [pc, #440]	; (2928 <USB_Handler+0x210>)
    276e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2770:	4798      	blx	r3

	_usb_d_dev_handler();
}
    2772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2774:	4b6b      	ldr	r3, [pc, #428]	; (2924 <USB_Handler+0x20c>)
    2776:	4a6d      	ldr	r2, [pc, #436]	; (292c <USB_Handler+0x214>)
    2778:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    277a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    277c:	3a92      	subs	r2, #146	; 0x92
    277e:	3aff      	subs	r2, #255	; 0xff
    2780:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2782:	4b69      	ldr	r3, [pc, #420]	; (2928 <USB_Handler+0x210>)
    2784:	891b      	ldrh	r3, [r3, #8]
    2786:	071b      	lsls	r3, r3, #28
    2788:	0f1b      	lsrs	r3, r3, #28
    278a:	2b03      	cmp	r3, #3
    278c:	d00c      	beq.n	27a8 <USB_Handler+0x90>
    278e:	4b66      	ldr	r3, [pc, #408]	; (2928 <USB_Handler+0x210>)
    2790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2792:	071b      	lsls	r3, r3, #28
    2794:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    2796:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2798:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    279a:	2b03      	cmp	r3, #3
    279c:	d005      	beq.n	27aa <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    279e:	4b62      	ldr	r3, [pc, #392]	; (2928 <USB_Handler+0x210>)
    27a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    27a2:	2003      	movs	r0, #3
    27a4:	4798      	blx	r3
    27a6:	e7e4      	b.n	2772 <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    27a8:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    27aa:	0152      	lsls	r2, r2, #5
    27ac:	4b5e      	ldr	r3, [pc, #376]	; (2928 <USB_Handler+0x210>)
    27ae:	189b      	adds	r3, r3, r2
    27b0:	8919      	ldrh	r1, [r3, #8]
    27b2:	0449      	lsls	r1, r1, #17
    27b4:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    27b6:	2200      	movs	r2, #0
    27b8:	811a      	strh	r2, [r3, #8]
    27ba:	e7f0      	b.n	279e <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    27bc:	2280      	movs	r2, #128	; 0x80
    27be:	4b59      	ldr	r3, [pc, #356]	; (2924 <USB_Handler+0x20c>)
    27c0:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    27c2:	4b59      	ldr	r3, [pc, #356]	; (2928 <USB_Handler+0x210>)
    27c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    27c6:	2100      	movs	r1, #0
    27c8:	2005      	movs	r0, #5
    27ca:	4798      	blx	r3
    27cc:	e7d1      	b.n	2772 <USB_Handler+0x5a>
    27ce:	4b55      	ldr	r3, [pc, #340]	; (2924 <USB_Handler+0x20c>)
    27d0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    27d2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    27d4:	4a55      	ldr	r2, [pc, #340]	; (292c <USB_Handler+0x214>)
    27d6:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    27d8:	4b55      	ldr	r3, [pc, #340]	; (2930 <USB_Handler+0x218>)
    27da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    27dc:	069b      	lsls	r3, r3, #26
    27de:	d40c      	bmi.n	27fa <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    27e0:	4953      	ldr	r1, [pc, #332]	; (2930 <USB_Handler+0x218>)
	tmp &= mask;
    27e2:	3a32      	subs	r2, #50	; 0x32
    27e4:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    27e6:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    27e8:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    27ea:	2bd0      	cmp	r3, #208	; 0xd0
    27ec:	d1fb      	bne.n	27e6 <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    27ee:	4b4e      	ldr	r3, [pc, #312]	; (2928 <USB_Handler+0x210>)
    27f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    27f2:	2100      	movs	r1, #0
    27f4:	2002      	movs	r0, #2
    27f6:	4798      	blx	r3
    27f8:	e7bb      	b.n	2772 <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    27fa:	494d      	ldr	r1, [pc, #308]	; (2930 <USB_Handler+0x218>)
	tmp &= mask;
    27fc:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    27fe:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    2800:	421a      	tst	r2, r3
    2802:	d0fc      	beq.n	27fe <USB_Handler+0xe6>
    2804:	e7f3      	b.n	27ee <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2806:	4b47      	ldr	r3, [pc, #284]	; (2924 <USB_Handler+0x20c>)
    2808:	2100      	movs	r1, #0
    280a:	2280      	movs	r2, #128	; 0x80
    280c:	0052      	lsls	r2, r2, #1
    280e:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2810:	3af8      	subs	r2, #248	; 0xf8
    2812:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2814:	3268      	adds	r2, #104	; 0x68
    2816:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2818:	4a44      	ldr	r2, [pc, #272]	; (292c <USB_Handler+0x214>)
    281a:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    281c:	4b45      	ldr	r3, [pc, #276]	; (2934 <USB_Handler+0x21c>)
    281e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2820:	4b41      	ldr	r3, [pc, #260]	; (2928 <USB_Handler+0x210>)
    2822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2824:	2100      	movs	r1, #0
    2826:	2001      	movs	r0, #1
    2828:	4798      	blx	r3
    282a:	e7a2      	b.n	2772 <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    282c:	06cb      	lsls	r3, r1, #27
    282e:	d407      	bmi.n	2840 <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2830:	064b      	lsls	r3, r1, #25
    2832:	d408      	bmi.n	2846 <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2834:	068b      	lsls	r3, r1, #26
    2836:	d52e      	bpl.n	2896 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    2838:	2100      	movs	r1, #0
    283a:	4b3f      	ldr	r3, [pc, #252]	; (2938 <USB_Handler+0x220>)
    283c:	4798      	blx	r3
    283e:	e02a      	b.n	2896 <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    2840:	4b3e      	ldr	r3, [pc, #248]	; (293c <USB_Handler+0x224>)
    2842:	4798      	blx	r3
    2844:	e027      	b.n	2896 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    2846:	2101      	movs	r1, #1
    2848:	4b3b      	ldr	r3, [pc, #236]	; (2938 <USB_Handler+0x220>)
    284a:	4798      	blx	r3
    284c:	e023      	b.n	2896 <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    284e:	064b      	lsls	r3, r1, #25
    2850:	d40e      	bmi.n	2870 <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2852:	070b      	lsls	r3, r1, #28
    2854:	d410      	bmi.n	2878 <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2856:	078b      	lsls	r3, r1, #30
    2858:	d412      	bmi.n	2880 <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    285a:	2307      	movs	r3, #7
    285c:	401a      	ands	r2, r3
    285e:	2a01      	cmp	r2, #1
    2860:	d119      	bne.n	2896 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2862:	074b      	lsls	r3, r1, #29
    2864:	d410      	bmi.n	2888 <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2866:	06cb      	lsls	r3, r1, #27
    2868:	d515      	bpl.n	2896 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    286a:	4b34      	ldr	r3, [pc, #208]	; (293c <USB_Handler+0x224>)
    286c:	4798      	blx	r3
    286e:	e012      	b.n	2896 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    2870:	2101      	movs	r1, #1
    2872:	4b31      	ldr	r3, [pc, #196]	; (2938 <USB_Handler+0x220>)
    2874:	4798      	blx	r3
    2876:	e00e      	b.n	2896 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    2878:	2101      	movs	r1, #1
    287a:	4b31      	ldr	r3, [pc, #196]	; (2940 <USB_Handler+0x228>)
    287c:	4798      	blx	r3
    287e:	e00a      	b.n	2896 <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    2880:	2101      	movs	r1, #1
    2882:	4b30      	ldr	r3, [pc, #192]	; (2944 <USB_Handler+0x22c>)
    2884:	4798      	blx	r3
    2886:	e006      	b.n	2896 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    2888:	2100      	movs	r1, #0
    288a:	4b2d      	ldr	r3, [pc, #180]	; (2940 <USB_Handler+0x228>)
    288c:	4798      	blx	r3
    288e:	e002      	b.n	2896 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    2890:	2100      	movs	r1, #0
    2892:	4b29      	ldr	r3, [pc, #164]	; (2938 <USB_Handler+0x220>)
    2894:	4798      	blx	r3
    2896:	3501      	adds	r5, #1
    2898:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    289a:	2d09      	cmp	r5, #9
    289c:	d100      	bne.n	28a0 <USB_Handler+0x188>
    289e:	e768      	b.n	2772 <USB_Handler+0x5a>
    28a0:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    28a2:	7ca1      	ldrb	r1, [r4, #18]
    28a4:	29ff      	cmp	r1, #255	; 0xff
    28a6:	d0f6      	beq.n	2896 <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    28a8:	230f      	movs	r3, #15
    28aa:	400b      	ands	r3, r1
    28ac:	2101      	movs	r1, #1
    28ae:	4099      	lsls	r1, r3
    28b0:	420e      	tst	r6, r1
    28b2:	d0f0      	beq.n	2896 <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    28b4:	0159      	lsls	r1, r3, #5
    28b6:	4f24      	ldr	r7, [pc, #144]	; (2948 <USB_Handler+0x230>)
    28b8:	46bc      	mov	ip, r7
    28ba:	4461      	add	r1, ip
    28bc:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    28be:	015b      	lsls	r3, r3, #5
    28c0:	4f22      	ldr	r7, [pc, #136]	; (294c <USB_Handler+0x234>)
    28c2:	46bc      	mov	ip, r7
    28c4:	4463      	add	r3, ip
    28c6:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    28c8:	4019      	ands	r1, r3
	if (flags) {
    28ca:	d0e4      	beq.n	2896 <USB_Handler+0x17e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    28cc:	00ab      	lsls	r3, r5, #2
    28ce:	195a      	adds	r2, r3, r5
    28d0:	0092      	lsls	r2, r2, #2
    28d2:	4b15      	ldr	r3, [pc, #84]	; (2928 <USB_Handler+0x210>)
    28d4:	469c      	mov	ip, r3
    28d6:	4462      	add	r2, ip
    28d8:	3270      	adds	r2, #112	; 0x70
    28da:	7dd2      	ldrb	r2, [r2, #23]
    28dc:	2347      	movs	r3, #71	; 0x47
    28de:	4013      	ands	r3, r2
    28e0:	2b01      	cmp	r3, #1
    28e2:	d0a3      	beq.n	282c <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    28e4:	b253      	sxtb	r3, r2
    28e6:	2b00      	cmp	r3, #0
    28e8:	dbb1      	blt.n	284e <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    28ea:	068b      	lsls	r3, r1, #26
    28ec:	d4d0      	bmi.n	2890 <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    28ee:	074b      	lsls	r3, r1, #29
    28f0:	d40c      	bmi.n	290c <USB_Handler+0x1f4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    28f2:	07cb      	lsls	r3, r1, #31
    28f4:	d40e      	bmi.n	2914 <USB_Handler+0x1fc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    28f6:	2307      	movs	r3, #7
    28f8:	401a      	ands	r2, r3
    28fa:	2a01      	cmp	r2, #1
    28fc:	d1cb      	bne.n	2896 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    28fe:	070b      	lsls	r3, r1, #28
    2900:	d40c      	bmi.n	291c <USB_Handler+0x204>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2902:	06cb      	lsls	r3, r1, #27
    2904:	d5c7      	bpl.n	2896 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    2906:	4b0d      	ldr	r3, [pc, #52]	; (293c <USB_Handler+0x224>)
    2908:	4798      	blx	r3
    290a:	e7c4      	b.n	2896 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    290c:	2100      	movs	r1, #0
    290e:	4b0c      	ldr	r3, [pc, #48]	; (2940 <USB_Handler+0x228>)
    2910:	4798      	blx	r3
    2912:	e7c0      	b.n	2896 <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    2914:	2101      	movs	r1, #1
    2916:	4b0e      	ldr	r3, [pc, #56]	; (2950 <USB_Handler+0x238>)
    2918:	4798      	blx	r3
    291a:	e7bc      	b.n	2896 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    291c:	2101      	movs	r1, #1
    291e:	4b08      	ldr	r3, [pc, #32]	; (2940 <USB_Handler+0x228>)
    2920:	4798      	blx	r3
    2922:	e7b8      	b.n	2896 <USB_Handler+0x17e>
    2924:	41005000 	.word	0x41005000
    2928:	20000564 	.word	0x20000564
    292c:	00000201 	.word	0x00000201
    2930:	40000800 	.word	0x40000800
    2934:	0000189d 	.word	0x0000189d
    2938:	000016d9 	.word	0x000016d9
    293c:	0000164d 	.word	0x0000164d
    2940:	0000179d 	.word	0x0000179d
    2944:	000018e1 	.word	0x000018e1
    2948:	41005100 	.word	0x41005100
    294c:	41005109 	.word	0x41005109
    2950:	00001a89 	.word	0x00001a89

00002954 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2954:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2956:	4806      	ldr	r0, [pc, #24]	; (2970 <cdc_device_acm_init+0x1c>)
    2958:	3040      	adds	r0, #64	; 0x40
    295a:	4b06      	ldr	r3, [pc, #24]	; (2974 <cdc_device_acm_init+0x20>)
    295c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    295e:	4b06      	ldr	r3, [pc, #24]	; (2978 <cdc_device_acm_init+0x24>)
    2960:	4798      	blx	r3

	usbdc_start(single_desc);
    2962:	4806      	ldr	r0, [pc, #24]	; (297c <cdc_device_acm_init+0x28>)
    2964:	4b06      	ldr	r3, [pc, #24]	; (2980 <cdc_device_acm_init+0x2c>)
    2966:	4798      	blx	r3
	usbdc_attach();
    2968:	4b06      	ldr	r3, [pc, #24]	; (2984 <cdc_device_acm_init+0x30>)
    296a:	4798      	blx	r3
}
    296c:	bd10      	pop	{r4, pc}
    296e:	46c0      	nop			; (mov r8, r8)
    2970:	2000074c 	.word	0x2000074c
    2974:	000036f1 	.word	0x000036f1
    2978:	00003075 	.word	0x00003075
    297c:	20000014 	.word	0x20000014
    2980:	00003769 	.word	0x00003769
    2984:	000037a1 	.word	0x000037a1

00002988 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2988:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    298a:	4b01      	ldr	r3, [pc, #4]	; (2990 <usb_init+0x8>)
    298c:	4798      	blx	r3
}
    298e:	bd10      	pop	{r4, pc}
    2990:	00002955 	.word	0x00002955

00002994 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    2994:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2996:	3808      	subs	r0, #8

	descr->stat = 0;
    2998:	2300      	movs	r3, #0
    299a:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    299c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    299e:	2b00      	cmp	r3, #0
    29a0:	d000      	beq.n	29a4 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    29a2:	4798      	blx	r3
	}
}
    29a4:	bd10      	pop	{r4, pc}

000029a6 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    29a6:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    29a8:	3808      	subs	r0, #8

	descr->stat = 0;
    29aa:	2300      	movs	r3, #0
    29ac:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    29ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    29b0:	2b00      	cmp	r3, #0
    29b2:	d000      	beq.n	29b6 <usart_error+0x10>
		descr->usart_cb.error(descr);
    29b4:	4798      	blx	r3
	}
}
    29b6:	bd10      	pop	{r4, pc}

000029b8 <usart_fill_rx_buffer>:
{
    29b8:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    29ba:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    29bc:	302c      	adds	r0, #44	; 0x2c
    29be:	4b04      	ldr	r3, [pc, #16]	; (29d0 <usart_fill_rx_buffer+0x18>)
    29c0:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    29c2:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    29c4:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    29c6:	2b00      	cmp	r3, #0
    29c8:	d001      	beq.n	29ce <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    29ca:	0020      	movs	r0, r4
    29cc:	4798      	blx	r3
}
    29ce:	bd10      	pop	{r4, pc}
    29d0:	00002d5d 	.word	0x00002d5d

000029d4 <usart_async_write>:
{
    29d4:	b570      	push	{r4, r5, r6, lr}
    29d6:	0004      	movs	r4, r0
    29d8:	000e      	movs	r6, r1
    29da:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    29dc:	2800      	cmp	r0, #0
    29de:	d01d      	beq.n	2a1c <usart_async_write+0x48>
    29e0:	2900      	cmp	r1, #0
    29e2:	d01d      	beq.n	2a20 <usart_async_write+0x4c>
    29e4:	0010      	movs	r0, r2
    29e6:	1e43      	subs	r3, r0, #1
    29e8:	4198      	sbcs	r0, r3
    29ea:	223c      	movs	r2, #60	; 0x3c
    29ec:	32ff      	adds	r2, #255	; 0xff
    29ee:	490f      	ldr	r1, [pc, #60]	; (2a2c <usart_async_write+0x58>)
    29f0:	4b0f      	ldr	r3, [pc, #60]	; (2a30 <usart_async_write+0x5c>)
    29f2:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    29f4:	2344      	movs	r3, #68	; 0x44
    29f6:	5ae2      	ldrh	r2, [r4, r3]
    29f8:	3308      	adds	r3, #8
    29fa:	5ae3      	ldrh	r3, [r4, r3]
    29fc:	429a      	cmp	r2, r3
    29fe:	d111      	bne.n	2a24 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
    2a00:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    2a02:	234c      	movs	r3, #76	; 0x4c
    2a04:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
    2a06:	2200      	movs	r2, #0
    2a08:	3b08      	subs	r3, #8
    2a0a:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    2a0c:	3b43      	subs	r3, #67	; 0x43
    2a0e:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    2a10:	0020      	movs	r0, r4
    2a12:	3008      	adds	r0, #8
    2a14:	4b07      	ldr	r3, [pc, #28]	; (2a34 <usart_async_write+0x60>)
    2a16:	4798      	blx	r3
	return (int32_t)length;
    2a18:	0028      	movs	r0, r5
}
    2a1a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    2a1c:	2000      	movs	r0, #0
    2a1e:	e7e4      	b.n	29ea <usart_async_write+0x16>
    2a20:	2000      	movs	r0, #0
    2a22:	e7e2      	b.n	29ea <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
    2a24:	201c      	movs	r0, #28
    2a26:	4240      	negs	r0, r0
    2a28:	e7f7      	b.n	2a1a <usart_async_write+0x46>
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	00003c7c 	.word	0x00003c7c
    2a30:	00000ef5 	.word	0x00000ef5
    2a34:	00001121 	.word	0x00001121

00002a38 <usart_process_byte_sent>:
{
    2a38:	b570      	push	{r4, r5, r6, lr}
    2a3a:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    2a3c:	0001      	movs	r1, r0
    2a3e:	3908      	subs	r1, #8
    2a40:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    2a42:	224c      	movs	r2, #76	; 0x4c
    2a44:	5a8a      	ldrh	r2, [r1, r2]
    2a46:	429a      	cmp	r2, r3
    2a48:	d00c      	beq.n	2a64 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    2a4a:	000a      	movs	r2, r1
    2a4c:	6c89      	ldr	r1, [r1, #72]	; 0x48
    2a4e:	1c5d      	adds	r5, r3, #1
    2a50:	2044      	movs	r0, #68	; 0x44
    2a52:	5215      	strh	r5, [r2, r0]
    2a54:	5cc9      	ldrb	r1, [r1, r3]
    2a56:	0020      	movs	r0, r4
    2a58:	4b04      	ldr	r3, [pc, #16]	; (2a6c <usart_process_byte_sent+0x34>)
    2a5a:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    2a5c:	0020      	movs	r0, r4
    2a5e:	4b04      	ldr	r3, [pc, #16]	; (2a70 <usart_process_byte_sent+0x38>)
    2a60:	4798      	blx	r3
}
    2a62:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    2a64:	4b03      	ldr	r3, [pc, #12]	; (2a74 <usart_process_byte_sent+0x3c>)
    2a66:	4798      	blx	r3
}
    2a68:	e7fb      	b.n	2a62 <usart_process_byte_sent+0x2a>
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	00001119 	.word	0x00001119
    2a70:	00001121 	.word	0x00001121
    2a74:	00001129 	.word	0x00001129

00002a78 <usart_async_read>:
{
    2a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a7a:	46ce      	mov	lr, r9
    2a7c:	4647      	mov	r7, r8
    2a7e:	b580      	push	{r7, lr}
    2a80:	b085      	sub	sp, #20
    2a82:	0005      	movs	r5, r0
    2a84:	000e      	movs	r6, r1
    2a86:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
    2a88:	2800      	cmp	r0, #0
    2a8a:	d015      	beq.n	2ab8 <usart_async_read+0x40>
    2a8c:	2900      	cmp	r1, #0
    2a8e:	d013      	beq.n	2ab8 <usart_async_read+0x40>
    2a90:	2a00      	cmp	r2, #0
    2a92:	d12a      	bne.n	2aea <usart_async_read+0x72>
    2a94:	22ac      	movs	r2, #172	; 0xac
    2a96:	0052      	lsls	r2, r2, #1
    2a98:	4929      	ldr	r1, [pc, #164]	; (2b40 <usart_async_read+0xc8>)
    2a9a:	2000      	movs	r0, #0
    2a9c:	4b29      	ldr	r3, [pc, #164]	; (2b44 <usart_async_read+0xcc>)
    2a9e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    2aa0:	a803      	add	r0, sp, #12
    2aa2:	4b29      	ldr	r3, [pc, #164]	; (2b48 <usart_async_read+0xd0>)
    2aa4:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    2aa6:	0028      	movs	r0, r5
    2aa8:	3034      	adds	r0, #52	; 0x34
    2aaa:	4b28      	ldr	r3, [pc, #160]	; (2b4c <usart_async_read+0xd4>)
    2aac:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    2aae:	a803      	add	r0, sp, #12
    2ab0:	4b27      	ldr	r3, [pc, #156]	; (2b50 <usart_async_read+0xd8>)
    2ab2:	4798      	blx	r3
	uint16_t                       was_read = 0;
    2ab4:	2500      	movs	r5, #0
	return (int32_t)was_read;
    2ab6:	e03c      	b.n	2b32 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
    2ab8:	22ac      	movs	r2, #172	; 0xac
    2aba:	0052      	lsls	r2, r2, #1
    2abc:	4920      	ldr	r1, [pc, #128]	; (2b40 <usart_async_read+0xc8>)
    2abe:	2000      	movs	r0, #0
    2ac0:	4b20      	ldr	r3, [pc, #128]	; (2b44 <usart_async_read+0xcc>)
    2ac2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    2ac4:	a803      	add	r0, sp, #12
    2ac6:	4b20      	ldr	r3, [pc, #128]	; (2b48 <usart_async_read+0xd0>)
    2ac8:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    2aca:	3534      	adds	r5, #52	; 0x34
    2acc:	0028      	movs	r0, r5
    2ace:	9501      	str	r5, [sp, #4]
    2ad0:	4b1e      	ldr	r3, [pc, #120]	; (2b4c <usart_async_read+0xd4>)
    2ad2:	4798      	blx	r3
    2ad4:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    2ad6:	a803      	add	r0, sp, #12
    2ad8:	4b1d      	ldr	r3, [pc, #116]	; (2b50 <usart_async_read+0xd8>)
    2ada:	4798      	blx	r3
	uint16_t                       was_read = 0;
    2adc:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    2ade:	4643      	mov	r3, r8
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d026      	beq.n	2b32 <usart_async_read+0xba>
    2ae4:	2f00      	cmp	r7, #0
    2ae6:	d116      	bne.n	2b16 <usart_async_read+0x9e>
    2ae8:	e023      	b.n	2b32 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
    2aea:	22ac      	movs	r2, #172	; 0xac
    2aec:	0052      	lsls	r2, r2, #1
    2aee:	4914      	ldr	r1, [pc, #80]	; (2b40 <usart_async_read+0xc8>)
    2af0:	2001      	movs	r0, #1
    2af2:	4b14      	ldr	r3, [pc, #80]	; (2b44 <usart_async_read+0xcc>)
    2af4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    2af6:	a803      	add	r0, sp, #12
    2af8:	4b13      	ldr	r3, [pc, #76]	; (2b48 <usart_async_read+0xd0>)
    2afa:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    2afc:	3534      	adds	r5, #52	; 0x34
    2afe:	0028      	movs	r0, r5
    2b00:	9501      	str	r5, [sp, #4]
    2b02:	4b12      	ldr	r3, [pc, #72]	; (2b4c <usart_async_read+0xd4>)
    2b04:	4798      	blx	r3
    2b06:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    2b08:	a803      	add	r0, sp, #12
    2b0a:	4b11      	ldr	r3, [pc, #68]	; (2b50 <usart_async_read+0xd8>)
    2b0c:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    2b0e:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
    2b10:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    2b12:	2b00      	cmp	r3, #0
    2b14:	d00d      	beq.n	2b32 <usart_async_read+0xba>
{
    2b16:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    2b18:	4b0e      	ldr	r3, [pc, #56]	; (2b54 <usart_async_read+0xdc>)
    2b1a:	4699      	mov	r9, r3
    2b1c:	1c65      	adds	r5, r4, #1
    2b1e:	b2ad      	uxth	r5, r5
    2b20:	1931      	adds	r1, r6, r4
    2b22:	9801      	ldr	r0, [sp, #4]
    2b24:	47c8      	blx	r9
    2b26:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    2b28:	4544      	cmp	r4, r8
    2b2a:	d202      	bcs.n	2b32 <usart_async_read+0xba>
    2b2c:	b2a3      	uxth	r3, r4
    2b2e:	429f      	cmp	r7, r3
    2b30:	d8f4      	bhi.n	2b1c <usart_async_read+0xa4>
}
    2b32:	0028      	movs	r0, r5
    2b34:	b005      	add	sp, #20
    2b36:	bc0c      	pop	{r2, r3}
    2b38:	4690      	mov	r8, r2
    2b3a:	4699      	mov	r9, r3
    2b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b3e:	46c0      	nop			; (mov r8, r8)
    2b40:	00003c7c 	.word	0x00003c7c
    2b44:	00000ef5 	.word	0x00000ef5
    2b48:	00002dc1 	.word	0x00002dc1
    2b4c:	00002d9d 	.word	0x00002d9d
    2b50:	00002dcf 	.word	0x00002dcf
    2b54:	00002d15 	.word	0x00002d15

00002b58 <usart_async_init>:
{
    2b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b5a:	0004      	movs	r4, r0
    2b5c:	000d      	movs	r5, r1
    2b5e:	0016      	movs	r6, r2
    2b60:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    2b62:	2800      	cmp	r0, #0
    2b64:	d026      	beq.n	2bb4 <usart_async_init+0x5c>
    2b66:	2900      	cmp	r1, #0
    2b68:	d026      	beq.n	2bb8 <usart_async_init+0x60>
    2b6a:	2a00      	cmp	r2, #0
    2b6c:	d026      	beq.n	2bbc <usart_async_init+0x64>
    2b6e:	0018      	movs	r0, r3
    2b70:	1e43      	subs	r3, r0, #1
    2b72:	4198      	sbcs	r0, r3
    2b74:	223a      	movs	r2, #58	; 0x3a
    2b76:	4914      	ldr	r1, [pc, #80]	; (2bc8 <usart_async_init+0x70>)
    2b78:	4b14      	ldr	r3, [pc, #80]	; (2bcc <usart_async_init+0x74>)
    2b7a:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    2b7c:	0020      	movs	r0, r4
    2b7e:	3034      	adds	r0, #52	; 0x34
    2b80:	003a      	movs	r2, r7
    2b82:	0031      	movs	r1, r6
    2b84:	4b12      	ldr	r3, [pc, #72]	; (2bd0 <usart_async_init+0x78>)
    2b86:	4798      	blx	r3
    2b88:	2800      	cmp	r0, #0
    2b8a:	d119      	bne.n	2bc0 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
    2b8c:	0020      	movs	r0, r4
    2b8e:	3008      	adds	r0, #8
    2b90:	0029      	movs	r1, r5
    2b92:	4b10      	ldr	r3, [pc, #64]	; (2bd4 <usart_async_init+0x7c>)
    2b94:	4798      	blx	r3
	if (init_status) {
    2b96:	2800      	cmp	r0, #0
    2b98:	d10b      	bne.n	2bb2 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    2b9a:	4b0f      	ldr	r3, [pc, #60]	; (2bd8 <usart_async_init+0x80>)
    2b9c:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    2b9e:	4b0f      	ldr	r3, [pc, #60]	; (2bdc <usart_async_init+0x84>)
    2ba0:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    2ba2:	4b0f      	ldr	r3, [pc, #60]	; (2be0 <usart_async_init+0x88>)
    2ba4:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    2ba6:	4b0f      	ldr	r3, [pc, #60]	; (2be4 <usart_async_init+0x8c>)
    2ba8:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    2baa:	4b0f      	ldr	r3, [pc, #60]	; (2be8 <usart_async_init+0x90>)
    2bac:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    2bae:	4b0f      	ldr	r3, [pc, #60]	; (2bec <usart_async_init+0x94>)
    2bb0:	6163      	str	r3, [r4, #20]
}
    2bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    2bb4:	2000      	movs	r0, #0
    2bb6:	e7dd      	b.n	2b74 <usart_async_init+0x1c>
    2bb8:	2000      	movs	r0, #0
    2bba:	e7db      	b.n	2b74 <usart_async_init+0x1c>
    2bbc:	2000      	movs	r0, #0
    2bbe:	e7d9      	b.n	2b74 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
    2bc0:	200d      	movs	r0, #13
    2bc2:	4240      	negs	r0, r0
    2bc4:	e7f5      	b.n	2bb2 <usart_async_init+0x5a>
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	00003c7c 	.word	0x00003c7c
    2bcc:	00000ef5 	.word	0x00000ef5
    2bd0:	00002cc1 	.word	0x00002cc1
    2bd4:	00001091 	.word	0x00001091
    2bd8:	00002a79 	.word	0x00002a79
    2bdc:	000029d5 	.word	0x000029d5
    2be0:	00002a39 	.word	0x00002a39
    2be4:	000029b9 	.word	0x000029b9
    2be8:	00002995 	.word	0x00002995
    2bec:	000029a7 	.word	0x000029a7

00002bf0 <usart_async_enable>:
{
    2bf0:	b510      	push	{r4, lr}
    2bf2:	0004      	movs	r4, r0
	ASSERT(descr);
    2bf4:	1e43      	subs	r3, r0, #1
    2bf6:	4198      	sbcs	r0, r3
    2bf8:	b2c0      	uxtb	r0, r0
    2bfa:	2261      	movs	r2, #97	; 0x61
    2bfc:	4904      	ldr	r1, [pc, #16]	; (2c10 <usart_async_enable+0x20>)
    2bfe:	4b05      	ldr	r3, [pc, #20]	; (2c14 <usart_async_enable+0x24>)
    2c00:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    2c02:	0020      	movs	r0, r4
    2c04:	3008      	adds	r0, #8
    2c06:	4b04      	ldr	r3, [pc, #16]	; (2c18 <usart_async_enable+0x28>)
    2c08:	4798      	blx	r3
}
    2c0a:	2000      	movs	r0, #0
    2c0c:	bd10      	pop	{r4, pc}
    2c0e:	46c0      	nop			; (mov r8, r8)
    2c10:	00003c7c 	.word	0x00003c7c
    2c14:	00000ef5 	.word	0x00000ef5
    2c18:	00001105 	.word	0x00001105

00002c1c <usart_async_get_io_descriptor>:
{
    2c1c:	b570      	push	{r4, r5, r6, lr}
    2c1e:	0004      	movs	r4, r0
    2c20:	000d      	movs	r5, r1
	ASSERT(descr && io);
    2c22:	2800      	cmp	r0, #0
    2c24:	d00a      	beq.n	2c3c <usart_async_get_io_descriptor+0x20>
    2c26:	0008      	movs	r0, r1
    2c28:	1e43      	subs	r3, r0, #1
    2c2a:	4198      	sbcs	r0, r3
    2c2c:	b2c0      	uxtb	r0, r0
    2c2e:	2277      	movs	r2, #119	; 0x77
    2c30:	4903      	ldr	r1, [pc, #12]	; (2c40 <usart_async_get_io_descriptor+0x24>)
    2c32:	4b04      	ldr	r3, [pc, #16]	; (2c44 <usart_async_get_io_descriptor+0x28>)
    2c34:	4798      	blx	r3
	*io = &descr->io;
    2c36:	602c      	str	r4, [r5, #0]
}
    2c38:	2000      	movs	r0, #0
    2c3a:	bd70      	pop	{r4, r5, r6, pc}
    2c3c:	2000      	movs	r0, #0
    2c3e:	e7f6      	b.n	2c2e <usart_async_get_io_descriptor+0x12>
    2c40:	00003c7c 	.word	0x00003c7c
    2c44:	00000ef5 	.word	0x00000ef5

00002c48 <usart_async_register_callback>:
{
    2c48:	b570      	push	{r4, r5, r6, lr}
    2c4a:	0005      	movs	r5, r0
    2c4c:	000e      	movs	r6, r1
    2c4e:	0014      	movs	r4, r2
	ASSERT(descr);
    2c50:	1e43      	subs	r3, r0, #1
    2c52:	4198      	sbcs	r0, r3
    2c54:	b2c0      	uxtb	r0, r0
    2c56:	2283      	movs	r2, #131	; 0x83
    2c58:	4916      	ldr	r1, [pc, #88]	; (2cb4 <usart_async_register_callback+0x6c>)
    2c5a:	4b17      	ldr	r3, [pc, #92]	; (2cb8 <usart_async_register_callback+0x70>)
    2c5c:	4798      	blx	r3
	switch (type) {
    2c5e:	2e01      	cmp	r6, #1
    2c60:	d011      	beq.n	2c86 <usart_async_register_callback+0x3e>
    2c62:	2e00      	cmp	r6, #0
    2c64:	d004      	beq.n	2c70 <usart_async_register_callback+0x28>
    2c66:	2e02      	cmp	r6, #2
    2c68:	d018      	beq.n	2c9c <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
    2c6a:	200d      	movs	r0, #13
    2c6c:	4240      	negs	r0, r0
    2c6e:	e009      	b.n	2c84 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
    2c70:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    2c72:	1e62      	subs	r2, r4, #1
    2c74:	4194      	sbcs	r4, r2
    2c76:	b2e2      	uxtb	r2, r4
    2c78:	0028      	movs	r0, r5
    2c7a:	3008      	adds	r0, #8
    2c7c:	2101      	movs	r1, #1
    2c7e:	4b0f      	ldr	r3, [pc, #60]	; (2cbc <usart_async_register_callback+0x74>)
    2c80:	4798      	blx	r3
	return ERR_NONE;
    2c82:	2000      	movs	r0, #0
}
    2c84:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    2c86:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    2c88:	1e62      	subs	r2, r4, #1
    2c8a:	4194      	sbcs	r4, r2
    2c8c:	b2e2      	uxtb	r2, r4
    2c8e:	0028      	movs	r0, r5
    2c90:	3008      	adds	r0, #8
    2c92:	2102      	movs	r1, #2
    2c94:	4b09      	ldr	r3, [pc, #36]	; (2cbc <usart_async_register_callback+0x74>)
    2c96:	4798      	blx	r3
	return ERR_NONE;
    2c98:	2000      	movs	r0, #0
		break;
    2c9a:	e7f3      	b.n	2c84 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
    2c9c:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    2c9e:	1e62      	subs	r2, r4, #1
    2ca0:	4194      	sbcs	r4, r2
    2ca2:	b2e2      	uxtb	r2, r4
    2ca4:	0028      	movs	r0, r5
    2ca6:	3008      	adds	r0, #8
    2ca8:	2103      	movs	r1, #3
    2caa:	4b04      	ldr	r3, [pc, #16]	; (2cbc <usart_async_register_callback+0x74>)
    2cac:	4798      	blx	r3
	return ERR_NONE;
    2cae:	2000      	movs	r0, #0
		break;
    2cb0:	e7e8      	b.n	2c84 <usart_async_register_callback+0x3c>
    2cb2:	46c0      	nop			; (mov r8, r8)
    2cb4:	00003c7c 	.word	0x00003c7c
    2cb8:	00000ef5 	.word	0x00000ef5
    2cbc:	00001131 	.word	0x00001131

00002cc0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2cc0:	b570      	push	{r4, r5, r6, lr}
    2cc2:	0004      	movs	r4, r0
    2cc4:	000e      	movs	r6, r1
    2cc6:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    2cc8:	2800      	cmp	r0, #0
    2cca:	d00b      	beq.n	2ce4 <ringbuffer_init+0x24>
    2ccc:	2900      	cmp	r1, #0
    2cce:	d018      	beq.n	2d02 <ringbuffer_init+0x42>
    2cd0:	2001      	movs	r0, #1
    2cd2:	2a00      	cmp	r2, #0
    2cd4:	d107      	bne.n	2ce6 <ringbuffer_init+0x26>
    2cd6:	2228      	movs	r2, #40	; 0x28
    2cd8:	490c      	ldr	r1, [pc, #48]	; (2d0c <ringbuffer_init+0x4c>)
    2cda:	2000      	movs	r0, #0
    2cdc:	4b0c      	ldr	r3, [pc, #48]	; (2d10 <ringbuffer_init+0x50>)
    2cde:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    2ce0:	1e6b      	subs	r3, r5, #1
    2ce2:	e007      	b.n	2cf4 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
    2ce4:	2000      	movs	r0, #0
    2ce6:	2228      	movs	r2, #40	; 0x28
    2ce8:	4908      	ldr	r1, [pc, #32]	; (2d0c <ringbuffer_init+0x4c>)
    2cea:	4b09      	ldr	r3, [pc, #36]	; (2d10 <ringbuffer_init+0x50>)
    2cec:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    2cee:	1e6b      	subs	r3, r5, #1
    2cf0:	422b      	tst	r3, r5
    2cf2:	d108      	bne.n	2d06 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    2cf4:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    2cf6:	2300      	movs	r3, #0
    2cf8:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    2cfa:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    2cfc:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    2cfe:	2000      	movs	r0, #0
}
    2d00:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    2d02:	2000      	movs	r0, #0
    2d04:	e7ef      	b.n	2ce6 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
    2d06:	200d      	movs	r0, #13
    2d08:	4240      	negs	r0, r0
    2d0a:	e7f9      	b.n	2d00 <ringbuffer_init+0x40>
    2d0c:	00003c9c 	.word	0x00003c9c
    2d10:	00000ef5 	.word	0x00000ef5

00002d14 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    2d14:	b570      	push	{r4, r5, r6, lr}
    2d16:	0004      	movs	r4, r0
    2d18:	000d      	movs	r5, r1
	ASSERT(rb && data);
    2d1a:	2800      	cmp	r0, #0
    2d1c:	d015      	beq.n	2d4a <ringbuffer_get+0x36>
    2d1e:	0008      	movs	r0, r1
    2d20:	1e43      	subs	r3, r0, #1
    2d22:	4198      	sbcs	r0, r3
    2d24:	b2c0      	uxtb	r0, r0
    2d26:	2240      	movs	r2, #64	; 0x40
    2d28:	490a      	ldr	r1, [pc, #40]	; (2d54 <ringbuffer_get+0x40>)
    2d2a:	4b0b      	ldr	r3, [pc, #44]	; (2d58 <ringbuffer_get+0x44>)
    2d2c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    2d2e:	68a3      	ldr	r3, [r4, #8]
    2d30:	68e2      	ldr	r2, [r4, #12]
    2d32:	429a      	cmp	r2, r3
    2d34:	d00b      	beq.n	2d4e <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
    2d36:	6862      	ldr	r2, [r4, #4]
    2d38:	4013      	ands	r3, r2
    2d3a:	6822      	ldr	r2, [r4, #0]
    2d3c:	5cd3      	ldrb	r3, [r2, r3]
    2d3e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    2d40:	68a3      	ldr	r3, [r4, #8]
    2d42:	3301      	adds	r3, #1
    2d44:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    2d46:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    2d48:	bd70      	pop	{r4, r5, r6, pc}
    2d4a:	2000      	movs	r0, #0
    2d4c:	e7eb      	b.n	2d26 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
    2d4e:	200a      	movs	r0, #10
    2d50:	4240      	negs	r0, r0
    2d52:	e7f9      	b.n	2d48 <ringbuffer_get+0x34>
    2d54:	00003c9c 	.word	0x00003c9c
    2d58:	00000ef5 	.word	0x00000ef5

00002d5c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2d5c:	b570      	push	{r4, r5, r6, lr}
    2d5e:	0004      	movs	r4, r0
    2d60:	000d      	movs	r5, r1
	ASSERT(rb);
    2d62:	1e43      	subs	r3, r0, #1
    2d64:	4198      	sbcs	r0, r3
    2d66:	b2c0      	uxtb	r0, r0
    2d68:	2251      	movs	r2, #81	; 0x51
    2d6a:	490a      	ldr	r1, [pc, #40]	; (2d94 <ringbuffer_put+0x38>)
    2d6c:	4b0a      	ldr	r3, [pc, #40]	; (2d98 <ringbuffer_put+0x3c>)
    2d6e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    2d70:	6863      	ldr	r3, [r4, #4]
    2d72:	68e2      	ldr	r2, [r4, #12]
    2d74:	4013      	ands	r3, r2
    2d76:	6822      	ldr	r2, [r4, #0]
    2d78:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2d7a:	68e3      	ldr	r3, [r4, #12]
    2d7c:	6861      	ldr	r1, [r4, #4]
    2d7e:	68a2      	ldr	r2, [r4, #8]
    2d80:	1a9a      	subs	r2, r3, r2
    2d82:	428a      	cmp	r2, r1
    2d84:	d901      	bls.n	2d8a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    2d86:	1a59      	subs	r1, r3, r1
    2d88:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    2d8a:	3301      	adds	r3, #1
    2d8c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    2d8e:	2000      	movs	r0, #0
    2d90:	bd70      	pop	{r4, r5, r6, pc}
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	00003c9c 	.word	0x00003c9c
    2d98:	00000ef5 	.word	0x00000ef5

00002d9c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2d9c:	b510      	push	{r4, lr}
    2d9e:	0004      	movs	r4, r0
	ASSERT(rb);
    2da0:	1e43      	subs	r3, r0, #1
    2da2:	4198      	sbcs	r0, r3
    2da4:	b2c0      	uxtb	r0, r0
    2da6:	2267      	movs	r2, #103	; 0x67
    2da8:	4903      	ldr	r1, [pc, #12]	; (2db8 <ringbuffer_num+0x1c>)
    2daa:	4b04      	ldr	r3, [pc, #16]	; (2dbc <ringbuffer_num+0x20>)
    2dac:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    2dae:	68e0      	ldr	r0, [r4, #12]
    2db0:	68a3      	ldr	r3, [r4, #8]
    2db2:	1ac0      	subs	r0, r0, r3
}
    2db4:	bd10      	pop	{r4, pc}
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	00003c9c 	.word	0x00003c9c
    2dbc:	00000ef5 	.word	0x00000ef5

00002dc0 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2dc0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2dc4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2dc6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2dc8:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    2dcc:	4770      	bx	lr

00002dce <atomic_leave_critical>:
    2dce:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2dd2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2dd4:	f383 8810 	msr	PRIMASK, r3
}
    2dd8:	4770      	bx	lr
	...

00002ddc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dde:	b083      	sub	sp, #12
    2de0:	0006      	movs	r6, r0
    2de2:	000c      	movs	r4, r1
    2de4:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2de6:	780a      	ldrb	r2, [r1, #0]
    2de8:	0653      	lsls	r3, r2, #25
    2dea:	0f9b      	lsrs	r3, r3, #30
    2dec:	2b01      	cmp	r3, #1
    2dee:	d000      	beq.n	2df2 <cdcdf_acm_req+0x16>
    2df0:	e06c      	b.n	2ecc <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2df2:	7909      	ldrb	r1, [r1, #4]
    2df4:	7963      	ldrb	r3, [r4, #5]
    2df6:	021b      	lsls	r3, r3, #8
    2df8:	430b      	orrs	r3, r1
    2dfa:	493b      	ldr	r1, [pc, #236]	; (2ee8 <cdcdf_acm_req+0x10c>)
    2dfc:	7809      	ldrb	r1, [r1, #0]
    2dfe:	4299      	cmp	r1, r3
    2e00:	d003      	beq.n	2e0a <cdcdf_acm_req+0x2e>
    2e02:	4939      	ldr	r1, [pc, #228]	; (2ee8 <cdcdf_acm_req+0x10c>)
    2e04:	7849      	ldrb	r1, [r1, #1]
    2e06:	4299      	cmp	r1, r3
    2e08:	d163      	bne.n	2ed2 <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2e0a:	b252      	sxtb	r2, r2
    2e0c:	2a00      	cmp	r2, #0
    2e0e:	db0e      	blt.n	2e2e <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    2e10:	79a7      	ldrb	r7, [r4, #6]
    2e12:	79e3      	ldrb	r3, [r4, #7]
    2e14:	021b      	lsls	r3, r3, #8
    2e16:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2e18:	4b34      	ldr	r3, [pc, #208]	; (2eec <cdcdf_acm_req+0x110>)
    2e1a:	4798      	blx	r3
	switch (req->bRequest) {
    2e1c:	7863      	ldrb	r3, [r4, #1]
    2e1e:	2b20      	cmp	r3, #32
    2e20:	d018      	beq.n	2e54 <cdcdf_acm_req+0x78>
    2e22:	2b22      	cmp	r3, #34	; 0x22
    2e24:	d03c      	beq.n	2ea0 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    2e26:	200d      	movs	r0, #13
    2e28:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2e2a:	b003      	add	sp, #12
    2e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2e2e:	2d01      	cmp	r5, #1
    2e30:	d052      	beq.n	2ed8 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    2e32:	7863      	ldrb	r3, [r4, #1]
    2e34:	2b21      	cmp	r3, #33	; 0x21
    2e36:	d151      	bne.n	2edc <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    2e38:	79a2      	ldrb	r2, [r4, #6]
    2e3a:	79e3      	ldrb	r3, [r4, #7]
    2e3c:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2e3e:	4313      	orrs	r3, r2
    2e40:	2b07      	cmp	r3, #7
    2e42:	d14e      	bne.n	2ee2 <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2e44:	2300      	movs	r3, #0
    2e46:	2207      	movs	r2, #7
    2e48:	4927      	ldr	r1, [pc, #156]	; (2ee8 <cdcdf_acm_req+0x10c>)
    2e4a:	3108      	adds	r1, #8
    2e4c:	0030      	movs	r0, r6
    2e4e:	4c28      	ldr	r4, [pc, #160]	; (2ef0 <cdcdf_acm_req+0x114>)
    2e50:	47a0      	blx	r4
    2e52:	e7ea      	b.n	2e2a <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2e54:	2f07      	cmp	r7, #7
    2e56:	d134      	bne.n	2ec2 <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    2e58:	2d00      	cmp	r5, #0
    2e5a:	d01a      	beq.n	2e92 <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2e5c:	2207      	movs	r2, #7
    2e5e:	0001      	movs	r1, r0
    2e60:	4668      	mov	r0, sp
    2e62:	4b24      	ldr	r3, [pc, #144]	; (2ef4 <cdcdf_acm_req+0x118>)
    2e64:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2e66:	4b20      	ldr	r3, [pc, #128]	; (2ee8 <cdcdf_acm_req+0x10c>)
    2e68:	691b      	ldr	r3, [r3, #16]
    2e6a:	2b00      	cmp	r3, #0
    2e6c:	d005      	beq.n	2e7a <cdcdf_acm_req+0x9e>
    2e6e:	4668      	mov	r0, sp
    2e70:	4798      	blx	r3
    2e72:	0003      	movs	r3, r0
			return ERR_NONE;
    2e74:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2e76:	2b00      	cmp	r3, #0
    2e78:	d0d7      	beq.n	2e2a <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    2e7a:	4a1b      	ldr	r2, [pc, #108]	; (2ee8 <cdcdf_acm_req+0x10c>)
    2e7c:	0013      	movs	r3, r2
    2e7e:	9900      	ldr	r1, [sp, #0]
    2e80:	6091      	str	r1, [r2, #8]
    2e82:	466a      	mov	r2, sp
    2e84:	8892      	ldrh	r2, [r2, #4]
    2e86:	819a      	strh	r2, [r3, #12]
    2e88:	466a      	mov	r2, sp
    2e8a:	7992      	ldrb	r2, [r2, #6]
    2e8c:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    2e8e:	2000      	movs	r0, #0
    2e90:	e7cb      	b.n	2e2a <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2e92:	2300      	movs	r3, #0
    2e94:	2207      	movs	r2, #7
    2e96:	0001      	movs	r1, r0
    2e98:	0030      	movs	r0, r6
    2e9a:	4c15      	ldr	r4, [pc, #84]	; (2ef0 <cdcdf_acm_req+0x114>)
    2e9c:	47a0      	blx	r4
    2e9e:	e7c4      	b.n	2e2a <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    2ea0:	2300      	movs	r3, #0
    2ea2:	2200      	movs	r2, #0
    2ea4:	2100      	movs	r1, #0
    2ea6:	2000      	movs	r0, #0
    2ea8:	4d11      	ldr	r5, [pc, #68]	; (2ef0 <cdcdf_acm_req+0x114>)
    2eaa:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2eac:	4b0e      	ldr	r3, [pc, #56]	; (2ee8 <cdcdf_acm_req+0x10c>)
    2eae:	695b      	ldr	r3, [r3, #20]
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	d009      	beq.n	2ec8 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    2eb4:	78a2      	ldrb	r2, [r4, #2]
    2eb6:	78e0      	ldrb	r0, [r4, #3]
    2eb8:	0200      	lsls	r0, r0, #8
    2eba:	4310      	orrs	r0, r2
    2ebc:	4798      	blx	r3
		return ERR_NONE;
    2ebe:	2000      	movs	r0, #0
    2ec0:	e7b3      	b.n	2e2a <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2ec2:	2001      	movs	r0, #1
    2ec4:	4240      	negs	r0, r0
    2ec6:	e7b0      	b.n	2e2a <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2ec8:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    2eca:	e7ae      	b.n	2e2a <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2ecc:	200a      	movs	r0, #10
    2ece:	4240      	negs	r0, r0
    2ed0:	e7ab      	b.n	2e2a <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2ed2:	200a      	movs	r0, #10
    2ed4:	4240      	negs	r0, r0
    2ed6:	e7a8      	b.n	2e2a <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2ed8:	2000      	movs	r0, #0
    2eda:	e7a6      	b.n	2e2a <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    2edc:	200d      	movs	r0, #13
    2ede:	4240      	negs	r0, r0
    2ee0:	e7a3      	b.n	2e2a <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2ee2:	2001      	movs	r0, #1
    2ee4:	4240      	negs	r0, r0
    2ee6:	e7a0      	b.n	2e2a <cdcdf_acm_req+0x4e>
    2ee8:	200007cc 	.word	0x200007cc
    2eec:	000037ad 	.word	0x000037ad
    2ef0:	0000325d 	.word	0x0000325d
    2ef4:	00003995 	.word	0x00003995

00002ef8 <cdcdf_acm_ctrl>:
{
    2ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2efa:	46de      	mov	lr, fp
    2efc:	4657      	mov	r7, sl
    2efe:	464e      	mov	r6, r9
    2f00:	4645      	mov	r5, r8
    2f02:	b5e0      	push	{r5, r6, r7, lr}
    2f04:	b083      	sub	sp, #12
    2f06:	0016      	movs	r6, r2
	switch (ctrl) {
    2f08:	2901      	cmp	r1, #1
    2f0a:	d068      	beq.n	2fde <cdcdf_acm_ctrl+0xe6>
    2f0c:	2900      	cmp	r1, #0
    2f0e:	d00b      	beq.n	2f28 <cdcdf_acm_ctrl+0x30>
    2f10:	2902      	cmp	r1, #2
    2f12:	d100      	bne.n	2f16 <cdcdf_acm_ctrl+0x1e>
    2f14:	e093      	b.n	303e <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    2f16:	200d      	movs	r0, #13
    2f18:	4240      	negs	r0, r0
}
    2f1a:	b003      	add	sp, #12
    2f1c:	bc3c      	pop	{r2, r3, r4, r5}
    2f1e:	4690      	mov	r8, r2
    2f20:	4699      	mov	r9, r3
    2f22:	46a2      	mov	sl, r4
    2f24:	46ab      	mov	fp, r5
    2f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2f28:	6883      	ldr	r3, [r0, #8]
    2f2a:	4698      	mov	r8, r3
	ifc = desc->sod;
    2f2c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    2f2e:	2800      	cmp	r0, #0
    2f30:	d100      	bne.n	2f34 <cdcdf_acm_ctrl+0x3c>
    2f32:	e087      	b.n	3044 <cdcdf_acm_ctrl+0x14c>
    2f34:	9301      	str	r3, [sp, #4]
    2f36:	2301      	movs	r3, #1
    2f38:	4443      	add	r3, r8
    2f3a:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2f3c:	4f47      	ldr	r7, [pc, #284]	; (305c <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    2f3e:	4b48      	ldr	r3, [pc, #288]	; (3060 <cdcdf_acm_ctrl+0x168>)
    2f40:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    2f42:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2f44:	7943      	ldrb	r3, [r0, #5]
    2f46:	2108      	movs	r1, #8
    2f48:	438b      	bics	r3, r1
    2f4a:	2b02      	cmp	r3, #2
    2f4c:	d002      	beq.n	2f54 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    2f4e:	200a      	movs	r0, #10
    2f50:	4240      	negs	r0, r0
    2f52:	e7e2      	b.n	2f1a <cdcdf_acm_ctrl+0x22>
    2f54:	9901      	ldr	r1, [sp, #4]
    2f56:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2f58:	780b      	ldrb	r3, [r1, #0]
    2f5a:	429a      	cmp	r2, r3
    2f5c:	d075      	beq.n	304a <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2f5e:	2bff      	cmp	r3, #255	; 0xff
    2f60:	d176      	bne.n	3050 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2f62:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2f64:	2205      	movs	r2, #5
    2f66:	6871      	ldr	r1, [r6, #4]
    2f68:	4b3e      	ldr	r3, [pc, #248]	; (3064 <cdcdf_acm_ctrl+0x16c>)
    2f6a:	4798      	blx	r3
    2f6c:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2f6e:	d11e      	bne.n	2fae <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2f70:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2f72:	7803      	ldrb	r3, [r0, #0]
    2f74:	18c0      	adds	r0, r0, r3
    2f76:	2204      	movs	r2, #4
    2f78:	6871      	ldr	r1, [r6, #4]
    2f7a:	4b3a      	ldr	r3, [pc, #232]	; (3064 <cdcdf_acm_ctrl+0x16c>)
    2f7c:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2f7e:	9b01      	ldr	r3, [sp, #4]
    2f80:	455b      	cmp	r3, fp
    2f82:	d027      	beq.n	2fd4 <cdcdf_acm_ctrl+0xdc>
    2f84:	9b01      	ldr	r3, [sp, #4]
    2f86:	3301      	adds	r3, #1
    2f88:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    2f8a:	2800      	cmp	r0, #0
    2f8c:	d1d9      	bne.n	2f42 <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    2f8e:	200a      	movs	r0, #10
    2f90:	4240      	negs	r0, r0
    2f92:	e7c2      	b.n	2f1a <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2f94:	4653      	mov	r3, sl
    2f96:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    2f98:	0028      	movs	r0, r5
    2f9a:	4b31      	ldr	r3, [pc, #196]	; (3060 <cdcdf_acm_ctrl+0x168>)
    2f9c:	4798      	blx	r3
			desc->sod = ep;
    2f9e:	6034      	str	r4, [r6, #0]
    2fa0:	7820      	ldrb	r0, [r4, #0]
    2fa2:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2fa4:	6871      	ldr	r1, [r6, #4]
    2fa6:	4b30      	ldr	r3, [pc, #192]	; (3068 <cdcdf_acm_ctrl+0x170>)
    2fa8:	4798      	blx	r3
    2faa:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2fac:	d0e0      	beq.n	2f70 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    2fae:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    2fb0:	7963      	ldrb	r3, [r4, #5]
    2fb2:	021b      	lsls	r3, r3, #8
    2fb4:	7922      	ldrb	r2, [r4, #4]
    2fb6:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2fb8:	b292      	uxth	r2, r2
    2fba:	78e1      	ldrb	r1, [r4, #3]
    2fbc:	0028      	movs	r0, r5
    2fbe:	47b8      	blx	r7
    2fc0:	2800      	cmp	r0, #0
    2fc2:	d148      	bne.n	3056 <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2fc4:	b26b      	sxtb	r3, r5
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	dbe4      	blt.n	2f94 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2fca:	4643      	mov	r3, r8
    2fcc:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2fce:	0028      	movs	r0, r5
    2fd0:	47c8      	blx	r9
    2fd2:	e7e4      	b.n	2f9e <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    2fd4:	2201      	movs	r2, #1
    2fd6:	4b25      	ldr	r3, [pc, #148]	; (306c <cdcdf_acm_ctrl+0x174>)
    2fd8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2fda:	2000      	movs	r0, #0
    2fdc:	e79d      	b.n	2f1a <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2fde:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2fe0:	2a00      	cmp	r2, #0
    2fe2:	d008      	beq.n	2ff6 <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2fe4:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2fe6:	795b      	ldrb	r3, [r3, #5]
    2fe8:	2208      	movs	r2, #8
    2fea:	4393      	bics	r3, r2
    2fec:	2b02      	cmp	r3, #2
    2fee:	d002      	beq.n	2ff6 <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    2ff0:	200a      	movs	r0, #10
    2ff2:	4240      	negs	r0, r0
    2ff4:	e791      	b.n	2f1a <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    2ff6:	7823      	ldrb	r3, [r4, #0]
    2ff8:	2bff      	cmp	r3, #255	; 0xff
    2ffa:	d008      	beq.n	300e <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    2ffc:	23ff      	movs	r3, #255	; 0xff
    2ffe:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    3000:	78a0      	ldrb	r0, [r4, #2]
    3002:	28ff      	cmp	r0, #255	; 0xff
    3004:	d003      	beq.n	300e <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3006:	4b1a      	ldr	r3, [pc, #104]	; (3070 <cdcdf_acm_ctrl+0x178>)
    3008:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    300a:	23ff      	movs	r3, #255	; 0xff
    300c:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    300e:	7863      	ldrb	r3, [r4, #1]
    3010:	2bff      	cmp	r3, #255	; 0xff
    3012:	d008      	beq.n	3026 <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    3014:	23ff      	movs	r3, #255	; 0xff
    3016:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3018:	78e0      	ldrb	r0, [r4, #3]
    301a:	28ff      	cmp	r0, #255	; 0xff
    301c:	d003      	beq.n	3026 <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    301e:	4b14      	ldr	r3, [pc, #80]	; (3070 <cdcdf_acm_ctrl+0x178>)
    3020:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3022:	23ff      	movs	r3, #255	; 0xff
    3024:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3026:	7920      	ldrb	r0, [r4, #4]
    3028:	28ff      	cmp	r0, #255	; 0xff
    302a:	d003      	beq.n	3034 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    302c:	4b10      	ldr	r3, [pc, #64]	; (3070 <cdcdf_acm_ctrl+0x178>)
    302e:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3030:	23ff      	movs	r3, #255	; 0xff
    3032:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3034:	2200      	movs	r2, #0
    3036:	4b0d      	ldr	r3, [pc, #52]	; (306c <cdcdf_acm_ctrl+0x174>)
    3038:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    303a:	2000      	movs	r0, #0
    303c:	e76d      	b.n	2f1a <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    303e:	201b      	movs	r0, #27
    3040:	4240      	negs	r0, r0
    3042:	e76a      	b.n	2f1a <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    3044:	200a      	movs	r0, #10
    3046:	4240      	negs	r0, r0
    3048:	e767      	b.n	2f1a <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    304a:	2012      	movs	r0, #18
    304c:	4240      	negs	r0, r0
    304e:	e764      	b.n	2f1a <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    3050:	201c      	movs	r0, #28
    3052:	4240      	negs	r0, r0
    3054:	e761      	b.n	2f1a <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    3056:	2014      	movs	r0, #20
    3058:	4240      	negs	r0, r0
    305a:	e75e      	b.n	2f1a <cdcdf_acm_ctrl+0x22>
    305c:	00000c35 	.word	0x00000c35
    3060:	00000cc9 	.word	0x00000cc9
    3064:	000037c9 	.word	0x000037c9
    3068:	000037ff 	.word	0x000037ff
    306c:	200007cc 	.word	0x200007cc
    3070:	00000c9d 	.word	0x00000c9d

00003074 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    3074:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    3076:	4b0a      	ldr	r3, [pc, #40]	; (30a0 <cdcdf_acm_init+0x2c>)
    3078:	4798      	blx	r3
    307a:	2801      	cmp	r0, #1
    307c:	d80c      	bhi.n	3098 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    307e:	4809      	ldr	r0, [pc, #36]	; (30a4 <cdcdf_acm_init+0x30>)
    3080:	4b09      	ldr	r3, [pc, #36]	; (30a8 <cdcdf_acm_init+0x34>)
    3082:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    3084:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    3086:	3018      	adds	r0, #24
    3088:	4b08      	ldr	r3, [pc, #32]	; (30ac <cdcdf_acm_init+0x38>)
    308a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    308c:	4908      	ldr	r1, [pc, #32]	; (30b0 <cdcdf_acm_init+0x3c>)
    308e:	2001      	movs	r0, #1
    3090:	4b08      	ldr	r3, [pc, #32]	; (30b4 <cdcdf_acm_init+0x40>)
    3092:	4798      	blx	r3
	return ERR_NONE;
    3094:	2000      	movs	r0, #0
}
    3096:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3098:	2011      	movs	r0, #17
    309a:	4240      	negs	r0, r0
    309c:	e7fb      	b.n	3096 <cdcdf_acm_init+0x22>
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	000037b9 	.word	0x000037b9
    30a4:	200007cc 	.word	0x200007cc
    30a8:	00002ef9 	.word	0x00002ef9
    30ac:	00003751 	.word	0x00003751
    30b0:	20000074 	.word	0x20000074
    30b4:	000036b9 	.word	0x000036b9

000030b8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    30b8:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    30ba:	4b06      	ldr	r3, [pc, #24]	; (30d4 <usbdc_unconfig+0x1c>)
    30bc:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    30be:	2c00      	cmp	r4, #0
    30c0:	d007      	beq.n	30d2 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    30c2:	2200      	movs	r2, #0
    30c4:	2101      	movs	r1, #1
    30c6:	0020      	movs	r0, r4
    30c8:	6863      	ldr	r3, [r4, #4]
    30ca:	4798      	blx	r3
		func = func->next;
    30cc:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    30ce:	2c00      	cmp	r4, #0
    30d0:	d1f7      	bne.n	30c2 <usbdc_unconfig+0xa>
	}
}
    30d2:	bd10      	pop	{r4, pc}
    30d4:	200007f0 	.word	0x200007f0

000030d8 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    30d8:	b570      	push	{r4, r5, r6, lr}
    30da:	0006      	movs	r6, r0
    30dc:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    30de:	4b07      	ldr	r3, [pc, #28]	; (30fc <usbdc_change_notify+0x24>)
    30e0:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    30e2:	2c00      	cmp	r4, #0
    30e4:	d103      	bne.n	30ee <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    30e6:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    30e8:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    30ea:	2c00      	cmp	r4, #0
    30ec:	d0fb      	beq.n	30e6 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    30ee:	6863      	ldr	r3, [r4, #4]
    30f0:	2b00      	cmp	r3, #0
    30f2:	d0f9      	beq.n	30e8 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    30f4:	0029      	movs	r1, r5
    30f6:	0030      	movs	r0, r6
    30f8:	4798      	blx	r3
    30fa:	e7f5      	b.n	30e8 <usbdc_change_notify+0x10>
    30fc:	200007f0 	.word	0x200007f0

00003100 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3102:	0007      	movs	r7, r0
    3104:	000e      	movs	r6, r1
    3106:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3108:	4b0d      	ldr	r3, [pc, #52]	; (3140 <usbdc_request_handler+0x40>)
    310a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    310c:	2c00      	cmp	r4, #0
    310e:	d104      	bne.n	311a <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    3110:	2000      	movs	r0, #0
    3112:	e011      	b.n	3138 <usbdc_request_handler+0x38>
		h = h->next;
    3114:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3116:	2c00      	cmp	r4, #0
    3118:	d00d      	beq.n	3136 <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    311a:	6863      	ldr	r3, [r4, #4]
    311c:	2b00      	cmp	r3, #0
    311e:	d0f9      	beq.n	3114 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    3120:	002a      	movs	r2, r5
    3122:	0031      	movs	r1, r6
    3124:	0038      	movs	r0, r7
    3126:	4798      	blx	r3
			if (0 == rc) {
    3128:	2800      	cmp	r0, #0
    312a:	d006      	beq.n	313a <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    312c:	300a      	adds	r0, #10
    312e:	d0f1      	beq.n	3114 <usbdc_request_handler+0x14>
				return -1;
    3130:	2001      	movs	r0, #1
    3132:	4240      	negs	r0, r0
    3134:	e000      	b.n	3138 <usbdc_request_handler+0x38>
	return false;
    3136:	2000      	movs	r0, #0
}
    3138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    313a:	2001      	movs	r0, #1
    313c:	e7fc      	b.n	3138 <usbdc_request_handler+0x38>
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	200007f0 	.word	0x200007f0

00003144 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    3144:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    3146:	4b06      	ldr	r3, [pc, #24]	; (3160 <usbd_sof_cb+0x1c>)
    3148:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    314a:	2c00      	cmp	r4, #0
    314c:	d103      	bne.n	3156 <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    314e:	bd10      	pop	{r4, pc}
		sof = sof->next;
    3150:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    3152:	2c00      	cmp	r4, #0
    3154:	d0fb      	beq.n	314e <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    3156:	6863      	ldr	r3, [r4, #4]
    3158:	2b00      	cmp	r3, #0
    315a:	d0f9      	beq.n	3150 <usbd_sof_cb+0xc>
			sof->cb();
    315c:	4798      	blx	r3
    315e:	e7f7      	b.n	3150 <usbd_sof_cb+0xc>
    3160:	200007f0 	.word	0x200007f0

00003164 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3164:	b510      	push	{r4, lr}
    3166:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    3168:	2900      	cmp	r1, #0
    316a:	d003      	beq.n	3174 <usbdc_cb_ctl_done+0x10>
    316c:	2901      	cmp	r1, #1
    316e:	d029      	beq.n	31c4 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    3170:	2000      	movs	r0, #0
    3172:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    3174:	7813      	ldrb	r3, [r2, #0]
    3176:	2b00      	cmp	r3, #0
    3178:	d1fa      	bne.n	3170 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    317a:	7853      	ldrb	r3, [r2, #1]
    317c:	2b05      	cmp	r3, #5
    317e:	d011      	beq.n	31a4 <usbdc_cb_ctl_done+0x40>
    3180:	2b09      	cmp	r3, #9
    3182:	d1f5      	bne.n	3170 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    3184:	7892      	ldrb	r2, [r2, #2]
    3186:	4b12      	ldr	r3, [pc, #72]	; (31d0 <usbdc_cb_ctl_done+0x6c>)
    3188:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    318a:	78a3      	ldrb	r3, [r4, #2]
    318c:	78e1      	ldrb	r1, [r4, #3]
    318e:	0209      	lsls	r1, r1, #8
    3190:	4319      	orrs	r1, r3
    3192:	1e4b      	subs	r3, r1, #1
    3194:	4199      	sbcs	r1, r3
    3196:	3103      	adds	r1, #3
    3198:	4b0d      	ldr	r3, [pc, #52]	; (31d0 <usbdc_cb_ctl_done+0x6c>)
    319a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    319c:	2001      	movs	r0, #1
    319e:	4b0d      	ldr	r3, [pc, #52]	; (31d4 <usbdc_cb_ctl_done+0x70>)
    31a0:	4798      	blx	r3
    31a2:	e7e5      	b.n	3170 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    31a4:	7890      	ldrb	r0, [r2, #2]
    31a6:	4b0c      	ldr	r3, [pc, #48]	; (31d8 <usbdc_cb_ctl_done+0x74>)
    31a8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    31aa:	78a3      	ldrb	r3, [r4, #2]
    31ac:	78e1      	ldrb	r1, [r4, #3]
    31ae:	0209      	lsls	r1, r1, #8
    31b0:	4319      	orrs	r1, r3
    31b2:	1e4b      	subs	r3, r1, #1
    31b4:	4199      	sbcs	r1, r3
    31b6:	3102      	adds	r1, #2
    31b8:	4b05      	ldr	r3, [pc, #20]	; (31d0 <usbdc_cb_ctl_done+0x6c>)
    31ba:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    31bc:	2001      	movs	r0, #1
    31be:	4b05      	ldr	r3, [pc, #20]	; (31d4 <usbdc_cb_ctl_done+0x70>)
    31c0:	4798      	blx	r3
    31c2:	e7d5      	b.n	3170 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    31c4:	2201      	movs	r2, #1
    31c6:	0021      	movs	r1, r4
    31c8:	2000      	movs	r0, #0
    31ca:	4b04      	ldr	r3, [pc, #16]	; (31dc <usbdc_cb_ctl_done+0x78>)
    31cc:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    31ce:	e7cf      	b.n	3170 <usbdc_cb_ctl_done+0xc>
    31d0:	200007f0 	.word	0x200007f0
    31d4:	000030d9 	.word	0x000030d9
    31d8:	00000c29 	.word	0x00000c29
    31dc:	00003101 	.word	0x00003101

000031e0 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    31e0:	b510      	push	{r4, lr}
	usbdc_unconfig();
    31e2:	4b0d      	ldr	r3, [pc, #52]	; (3218 <usbdc_reset+0x38>)
    31e4:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    31e6:	4c0d      	ldr	r4, [pc, #52]	; (321c <usbdc_reset+0x3c>)
    31e8:	2302      	movs	r3, #2
    31ea:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    31ec:	2300      	movs	r3, #0
    31ee:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    31f0:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    31f2:	2000      	movs	r0, #0
    31f4:	4b0a      	ldr	r3, [pc, #40]	; (3220 <usbdc_reset+0x40>)
    31f6:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    31f8:	7f20      	ldrb	r0, [r4, #28]
    31fa:	4b0a      	ldr	r3, [pc, #40]	; (3224 <usbdc_reset+0x44>)
    31fc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    31fe:	4a0a      	ldr	r2, [pc, #40]	; (3228 <usbdc_reset+0x48>)
    3200:	2100      	movs	r1, #0
    3202:	2000      	movs	r0, #0
    3204:	4c09      	ldr	r4, [pc, #36]	; (322c <usbdc_reset+0x4c>)
    3206:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3208:	4a09      	ldr	r2, [pc, #36]	; (3230 <usbdc_reset+0x50>)
    320a:	2102      	movs	r1, #2
    320c:	2000      	movs	r0, #0
    320e:	47a0      	blx	r4
	usb_d_ep_enable(0);
    3210:	2000      	movs	r0, #0
    3212:	4b08      	ldr	r3, [pc, #32]	; (3234 <usbdc_reset+0x54>)
    3214:	4798      	blx	r3
}
    3216:	bd10      	pop	{r4, pc}
    3218:	000030b9 	.word	0x000030b9
    321c:	200007f0 	.word	0x200007f0
    3220:	00000c9d 	.word	0x00000c9d
    3224:	00000c89 	.word	0x00000c89
    3228:	00003279 	.word	0x00003279
    322c:	00000ea5 	.word	0x00000ea5
    3230:	00003165 	.word	0x00003165
    3234:	00000cc9 	.word	0x00000cc9

00003238 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3238:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    323a:	2800      	cmp	r0, #0
    323c:	d002      	beq.n	3244 <usbd_event_cb+0xc>
    323e:	2801      	cmp	r0, #1
    3240:	d004      	beq.n	324c <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    3242:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    3244:	2000      	movs	r0, #0
    3246:	4b03      	ldr	r3, [pc, #12]	; (3254 <usbd_event_cb+0x1c>)
    3248:	4798      	blx	r3
		break;
    324a:	e7fa      	b.n	3242 <usbd_event_cb+0xa>
		usbdc_reset();
    324c:	4b02      	ldr	r3, [pc, #8]	; (3258 <usbd_event_cb+0x20>)
    324e:	4798      	blx	r3
}
    3250:	e7f7      	b.n	3242 <usbd_event_cb+0xa>
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	000030d9 	.word	0x000030d9
    3258:	000031e1 	.word	0x000031e1

0000325c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    325c:	b510      	push	{r4, lr}
    325e:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    3260:	ac01      	add	r4, sp, #4
    3262:	9101      	str	r1, [sp, #4]
    3264:	9202      	str	r2, [sp, #8]
    3266:	7220      	strb	r0, [r4, #8]
    3268:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    326a:	0020      	movs	r0, r4
    326c:	4b01      	ldr	r3, [pc, #4]	; (3274 <usbdc_xfer+0x18>)
    326e:	4798      	blx	r3
}
    3270:	b004      	add	sp, #16
    3272:	bd10      	pop	{r4, pc}
    3274:	00000d15 	.word	0x00000d15

00003278 <usbdc_cb_ctl_req>:
{
    3278:	b5f0      	push	{r4, r5, r6, r7, lr}
    327a:	46c6      	mov	lr, r8
    327c:	b500      	push	{lr}
    327e:	b084      	sub	sp, #16
    3280:	0005      	movs	r5, r0
    3282:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3284:	2200      	movs	r2, #0
    3286:	4bb5      	ldr	r3, [pc, #724]	; (355c <usbdc_cb_ctl_req+0x2e4>)
    3288:	4798      	blx	r3
    328a:	1c43      	adds	r3, r0, #1
    328c:	d00d      	beq.n	32aa <usbdc_cb_ctl_req+0x32>
		return true;
    328e:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3290:	2801      	cmp	r0, #1
    3292:	d00b      	beq.n	32ac <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3294:	7822      	ldrb	r2, [r4, #0]
    3296:	231f      	movs	r3, #31
    3298:	0011      	movs	r1, r2
    329a:	4399      	bics	r1, r3
    329c:	d00b      	beq.n	32b6 <usbdc_cb_ctl_req+0x3e>
    329e:	b2cb      	uxtb	r3, r1
    32a0:	2b80      	cmp	r3, #128	; 0x80
    32a2:	d100      	bne.n	32a6 <usbdc_cb_ctl_req+0x2e>
    32a4:	e0f8      	b.n	3498 <usbdc_cb_ctl_req+0x220>
		return false;
    32a6:	2300      	movs	r3, #0
    32a8:	e000      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		return false;
    32aa:	2300      	movs	r3, #0
}
    32ac:	0018      	movs	r0, r3
    32ae:	b004      	add	sp, #16
    32b0:	bc04      	pop	{r2}
    32b2:	4690      	mov	r8, r2
    32b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    32b6:	7863      	ldrb	r3, [r4, #1]
    32b8:	2b0b      	cmp	r3, #11
    32ba:	d900      	bls.n	32be <usbdc_cb_ctl_req+0x46>
    32bc:	e1e4      	b.n	3688 <usbdc_cb_ctl_req+0x410>
    32be:	009b      	lsls	r3, r3, #2
    32c0:	49a7      	ldr	r1, [pc, #668]	; (3560 <usbdc_cb_ctl_req+0x2e8>)
    32c2:	58cb      	ldr	r3, [r1, r3]
    32c4:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    32c6:	2301      	movs	r3, #1
    32c8:	2200      	movs	r2, #0
    32ca:	2100      	movs	r1, #0
    32cc:	0028      	movs	r0, r5
    32ce:	4ca5      	ldr	r4, [pc, #660]	; (3564 <usbdc_cb_ctl_req+0x2ec>)
    32d0:	47a0      	blx	r4
    32d2:	4243      	negs	r3, r0
    32d4:	4143      	adcs	r3, r0
    32d6:	b2db      	uxtb	r3, r3
    32d8:	e7e8      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    32da:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    32dc:	2a00      	cmp	r2, #0
    32de:	d01a      	beq.n	3316 <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    32e0:	4ba1      	ldr	r3, [pc, #644]	; (3568 <usbdc_cb_ctl_req+0x2f0>)
    32e2:	681b      	ldr	r3, [r3, #0]
    32e4:	6859      	ldr	r1, [r3, #4]
    32e6:	6818      	ldr	r0, [r3, #0]
    32e8:	4ba0      	ldr	r3, [pc, #640]	; (356c <usbdc_cb_ctl_req+0x2f4>)
    32ea:	4798      	blx	r3
	if (NULL == cfg_desc) {
    32ec:	2800      	cmp	r0, #0
    32ee:	d100      	bne.n	32f2 <usbdc_cb_ctl_req+0x7a>
    32f0:	e1d4      	b.n	369c <usbdc_cb_ctl_req+0x424>
    32f2:	78c3      	ldrb	r3, [r0, #3]
    32f4:	021b      	lsls	r3, r3, #8
    32f6:	7881      	ldrb	r1, [r0, #2]
    32f8:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    32fa:	b289      	uxth	r1, r1
    32fc:	1841      	adds	r1, r0, r1
    32fe:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3300:	2204      	movs	r2, #4
    3302:	4b9b      	ldr	r3, [pc, #620]	; (3570 <usbdc_cb_ctl_req+0x2f8>)
    3304:	4798      	blx	r3
    3306:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    3308:	2800      	cmp	r0, #0
    330a:	d006      	beq.n	331a <usbdc_cb_ctl_req+0xa2>
    330c:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    330e:	4f96      	ldr	r7, [pc, #600]	; (3568 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3310:	4b97      	ldr	r3, [pc, #604]	; (3570 <usbdc_cb_ctl_req+0x2f8>)
    3312:	4698      	mov	r8, r3
    3314:	e01a      	b.n	334c <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    3316:	4b97      	ldr	r3, [pc, #604]	; (3574 <usbdc_cb_ctl_req+0x2fc>)
    3318:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    331a:	2301      	movs	r3, #1
    331c:	2200      	movs	r2, #0
    331e:	2100      	movs	r1, #0
    3320:	0028      	movs	r0, r5
    3322:	4c90      	ldr	r4, [pc, #576]	; (3564 <usbdc_cb_ctl_req+0x2ec>)
    3324:	47a0      	blx	r4
    3326:	4243      	negs	r3, r0
    3328:	4143      	adcs	r3, r0
    332a:	b2db      	uxtb	r3, r3
    332c:	e7be      	b.n	32ac <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    332e:	0034      	movs	r4, r6
    3330:	e000      	b.n	3334 <usbdc_cb_ctl_req+0xbc>
    3332:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    3334:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    3336:	7803      	ldrb	r3, [r0, #0]
    3338:	18c0      	adds	r0, r0, r3
    333a:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    333c:	9b03      	ldr	r3, [sp, #12]
    333e:	9301      	str	r3, [sp, #4]
    3340:	2204      	movs	r2, #4
    3342:	0019      	movs	r1, r3
    3344:	47c0      	blx	r8
    3346:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    3348:	2800      	cmp	r0, #0
    334a:	d0e6      	beq.n	331a <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    334c:	7886      	ldrb	r6, [r0, #2]
    334e:	42a6      	cmp	r6, r4
    3350:	d0f0      	beq.n	3334 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3352:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    3354:	2c00      	cmp	r4, #0
    3356:	d0ea      	beq.n	332e <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    3358:	aa02      	add	r2, sp, #8
    335a:	2100      	movs	r1, #0
    335c:	0020      	movs	r0, r4
    335e:	6863      	ldr	r3, [r4, #4]
    3360:	4798      	blx	r3
    3362:	2800      	cmp	r0, #0
    3364:	d0e5      	beq.n	3332 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    3366:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    3368:	2c00      	cmp	r4, #0
    336a:	d1f5      	bne.n	3358 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    336c:	0034      	movs	r4, r6
    336e:	e7e1      	b.n	3334 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3370:	231f      	movs	r3, #31
    3372:	401a      	ands	r2, r3
		return false;
    3374:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3376:	2a02      	cmp	r2, #2
    3378:	d198      	bne.n	32ac <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    337a:	79a3      	ldrb	r3, [r4, #6]
    337c:	79e2      	ldrb	r2, [r4, #7]
    337e:	0212      	lsls	r2, r2, #8
    3380:	431a      	orrs	r2, r3
			return false;
    3382:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    3384:	2a00      	cmp	r2, #0
    3386:	d000      	beq.n	338a <usbdc_cb_ctl_req+0x112>
    3388:	e790      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    338a:	7920      	ldrb	r0, [r4, #4]
    338c:	2100      	movs	r1, #0
    338e:	4b7a      	ldr	r3, [pc, #488]	; (3578 <usbdc_cb_ctl_req+0x300>)
    3390:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3392:	2301      	movs	r3, #1
    3394:	2200      	movs	r2, #0
    3396:	2100      	movs	r1, #0
    3398:	0028      	movs	r0, r5
    339a:	4c72      	ldr	r4, [pc, #456]	; (3564 <usbdc_cb_ctl_req+0x2ec>)
    339c:	47a0      	blx	r4
		return true;
    339e:	2301      	movs	r3, #1
    33a0:	e784      	b.n	32ac <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    33a2:	231f      	movs	r3, #31
    33a4:	401a      	ands	r2, r3
		return false;
    33a6:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    33a8:	2a02      	cmp	r2, #2
    33aa:	d000      	beq.n	33ae <usbdc_cb_ctl_req+0x136>
    33ac:	e77e      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    33ae:	79a3      	ldrb	r3, [r4, #6]
    33b0:	79e2      	ldrb	r2, [r4, #7]
    33b2:	0212      	lsls	r2, r2, #8
    33b4:	431a      	orrs	r2, r3
			return false;
    33b6:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    33b8:	2a00      	cmp	r2, #0
    33ba:	d000      	beq.n	33be <usbdc_cb_ctl_req+0x146>
    33bc:	e776      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    33be:	7920      	ldrb	r0, [r4, #4]
    33c0:	2101      	movs	r1, #1
    33c2:	4b6d      	ldr	r3, [pc, #436]	; (3578 <usbdc_cb_ctl_req+0x300>)
    33c4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    33c6:	2301      	movs	r3, #1
    33c8:	2200      	movs	r2, #0
    33ca:	2100      	movs	r1, #0
    33cc:	0028      	movs	r0, r5
    33ce:	4c65      	ldr	r4, [pc, #404]	; (3564 <usbdc_cb_ctl_req+0x2ec>)
    33d0:	47a0      	blx	r4
		return true;
    33d2:	2301      	movs	r3, #1
    33d4:	e76a      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    33d6:	78a3      	ldrb	r3, [r4, #2]
    33d8:	78e5      	ldrb	r5, [r4, #3]
    33da:	022d      	lsls	r5, r5, #8
    33dc:	431d      	orrs	r5, r3
    33de:	7923      	ldrb	r3, [r4, #4]
    33e0:	7964      	ldrb	r4, [r4, #5]
    33e2:	0224      	lsls	r4, r4, #8
    33e4:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    33e6:	4a60      	ldr	r2, [pc, #384]	; (3568 <usbdc_cb_ctl_req+0x2f0>)
    33e8:	6813      	ldr	r3, [r2, #0]
    33ea:	7ed2      	ldrb	r2, [r2, #27]
    33ec:	6859      	ldr	r1, [r3, #4]
    33ee:	6818      	ldr	r0, [r3, #0]
    33f0:	4b5e      	ldr	r3, [pc, #376]	; (356c <usbdc_cb_ctl_req+0x2f4>)
    33f2:	4798      	blx	r3
	if (NULL == ifc) {
    33f4:	2800      	cmp	r0, #0
    33f6:	d047      	beq.n	3488 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    33f8:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    33fa:	78c3      	ldrb	r3, [r0, #3]
    33fc:	021b      	lsls	r3, r3, #8
    33fe:	7881      	ldrb	r1, [r0, #2]
    3400:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3402:	b289      	uxth	r1, r1
    3404:	1841      	adds	r1, r0, r1
    3406:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3408:	2204      	movs	r2, #4
    340a:	4b59      	ldr	r3, [pc, #356]	; (3570 <usbdc_cb_ctl_req+0x2f8>)
    340c:	4798      	blx	r3
    340e:	2800      	cmp	r0, #0
    3410:	d03c      	beq.n	348c <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3412:	4e57      	ldr	r6, [pc, #348]	; (3570 <usbdc_cb_ctl_req+0x2f8>)
    3414:	e008      	b.n	3428 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    3416:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    3418:	7803      	ldrb	r3, [r0, #0]
    341a:	18c0      	adds	r0, r0, r3
    341c:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    341e:	2204      	movs	r2, #4
    3420:	9903      	ldr	r1, [sp, #12]
    3422:	47b0      	blx	r6
		if (NULL == ifc) {
    3424:	2800      	cmp	r0, #0
    3426:	d033      	beq.n	3490 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3428:	7883      	ldrb	r3, [r0, #2]
    342a:	42a3      	cmp	r3, r4
    342c:	d1f3      	bne.n	3416 <usbdc_cb_ctl_req+0x19e>
    342e:	78c3      	ldrb	r3, [r0, #3]
    3430:	42ab      	cmp	r3, r5
    3432:	d1f0      	bne.n	3416 <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    3434:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3436:	4b4c      	ldr	r3, [pc, #304]	; (3568 <usbdc_cb_ctl_req+0x2f0>)
    3438:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    343a:	2e00      	cmp	r6, #0
    343c:	d02a      	beq.n	3494 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    343e:	aa02      	add	r2, sp, #8
    3440:	2101      	movs	r1, #1
    3442:	0030      	movs	r0, r6
    3444:	6873      	ldr	r3, [r6, #4]
    3446:	4798      	blx	r3
    3448:	2800      	cmp	r0, #0
    344a:	d004      	beq.n	3456 <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    344c:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    344e:	2e00      	cmp	r6, #0
    3450:	d1f5      	bne.n	343e <usbdc_cb_ctl_req+0x1c6>
	return false;
    3452:	2300      	movs	r3, #0
    3454:	e72a      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3456:	6873      	ldr	r3, [r6, #4]
    3458:	aa02      	add	r2, sp, #8
    345a:	2100      	movs	r1, #0
    345c:	0030      	movs	r0, r6
    345e:	4798      	blx	r3
			return false;
    3460:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3462:	2800      	cmp	r0, #0
    3464:	d000      	beq.n	3468 <usbdc_cb_ctl_req+0x1f0>
    3466:	e721      	b.n	32ac <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    3468:	2d00      	cmp	r5, #0
    346a:	d005      	beq.n	3478 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    346c:	493e      	ldr	r1, [pc, #248]	; (3568 <usbdc_cb_ctl_req+0x2f0>)
    346e:	2201      	movs	r2, #1
    3470:	40a2      	lsls	r2, r4
    3472:	7f4b      	ldrb	r3, [r1, #29]
    3474:	4313      	orrs	r3, r2
    3476:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    3478:	2300      	movs	r3, #0
    347a:	2200      	movs	r2, #0
    347c:	2100      	movs	r1, #0
    347e:	2000      	movs	r0, #0
    3480:	4c38      	ldr	r4, [pc, #224]	; (3564 <usbdc_cb_ctl_req+0x2ec>)
    3482:	47a0      	blx	r4
			return true;
    3484:	2301      	movs	r3, #1
    3486:	e711      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		return false;
    3488:	2300      	movs	r3, #0
    348a:	e70f      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		return false;
    348c:	2300      	movs	r3, #0
    348e:	e70d      	b.n	32ac <usbdc_cb_ctl_req+0x34>
			return false;
    3490:	2300      	movs	r3, #0
    3492:	e70b      	b.n	32ac <usbdc_cb_ctl_req+0x34>
	return false;
    3494:	2300      	movs	r3, #0
    3496:	e709      	b.n	32ac <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    3498:	7863      	ldrb	r3, [r4, #1]
    349a:	2b06      	cmp	r3, #6
    349c:	d033      	beq.n	3506 <usbdc_cb_ctl_req+0x28e>
    349e:	b2d9      	uxtb	r1, r3
    34a0:	2906      	cmp	r1, #6
    34a2:	d922      	bls.n	34ea <usbdc_cb_ctl_req+0x272>
    34a4:	2b08      	cmp	r3, #8
    34a6:	d100      	bne.n	34aa <usbdc_cb_ctl_req+0x232>
    34a8:	e0af      	b.n	360a <usbdc_cb_ctl_req+0x392>
    34aa:	2b0a      	cmp	r3, #10
    34ac:	d000      	beq.n	34b0 <usbdc_cb_ctl_req+0x238>
    34ae:	e0ed      	b.n	368c <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    34b0:	4b2d      	ldr	r3, [pc, #180]	; (3568 <usbdc_cb_ctl_req+0x2f0>)
    34b2:	7f5a      	ldrb	r2, [r3, #29]
    34b4:	7921      	ldrb	r1, [r4, #4]
    34b6:	7963      	ldrb	r3, [r4, #5]
    34b8:	021b      	lsls	r3, r3, #8
    34ba:	430b      	orrs	r3, r1
    34bc:	411a      	asrs	r2, r3
    34be:	07d3      	lsls	r3, r2, #31
    34c0:	d400      	bmi.n	34c4 <usbdc_cb_ctl_req+0x24c>
    34c2:	e0ca      	b.n	365a <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    34c4:	4b28      	ldr	r3, [pc, #160]	; (3568 <usbdc_cb_ctl_req+0x2f0>)
    34c6:	691d      	ldr	r5, [r3, #16]
	return false;
    34c8:	2300      	movs	r3, #0
	while (NULL != func) {
    34ca:	2d00      	cmp	r5, #0
    34cc:	d100      	bne.n	34d0 <usbdc_cb_ctl_req+0x258>
    34ce:	e6ed      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    34d0:	0022      	movs	r2, r4
    34d2:	2102      	movs	r1, #2
    34d4:	0028      	movs	r0, r5
    34d6:	686b      	ldr	r3, [r5, #4]
    34d8:	4798      	blx	r3
    34da:	2800      	cmp	r0, #0
    34dc:	db00      	blt.n	34e0 <usbdc_cb_ctl_req+0x268>
    34de:	e0c8      	b.n	3672 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    34e0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    34e2:	2d00      	cmp	r5, #0
    34e4:	d1f4      	bne.n	34d0 <usbdc_cb_ctl_req+0x258>
	return false;
    34e6:	2300      	movs	r3, #0
    34e8:	e6e0      	b.n	32ac <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    34ea:	2b00      	cmp	r3, #0
    34ec:	d000      	beq.n	34f0 <usbdc_cb_ctl_req+0x278>
    34ee:	e0cd      	b.n	368c <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    34f0:	231f      	movs	r3, #31
    34f2:	401a      	ands	r2, r3
    34f4:	b2d3      	uxtb	r3, r2
    34f6:	2b01      	cmp	r3, #1
    34f8:	d800      	bhi.n	34fc <usbdc_cb_ctl_req+0x284>
    34fa:	e092      	b.n	3622 <usbdc_cb_ctl_req+0x3aa>
    34fc:	2a02      	cmp	r2, #2
    34fe:	d100      	bne.n	3502 <usbdc_cb_ctl_req+0x28a>
    3500:	e09f      	b.n	3642 <usbdc_cb_ctl_req+0x3ca>
		return false;
    3502:	2300      	movs	r3, #0
    3504:	e6d2      	b.n	32ac <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    3506:	78a3      	ldrb	r3, [r4, #2]
    3508:	78e2      	ldrb	r2, [r4, #3]
    350a:	0212      	lsls	r2, r2, #8
    350c:	431a      	orrs	r2, r3
    350e:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    3510:	2b02      	cmp	r3, #2
    3512:	d033      	beq.n	357c <usbdc_cb_ctl_req+0x304>
    3514:	2b03      	cmp	r3, #3
    3516:	d056      	beq.n	35c6 <usbdc_cb_ctl_req+0x34e>
    3518:	2b01      	cmp	r3, #1
    351a:	d001      	beq.n	3520 <usbdc_cb_ctl_req+0x2a8>
	return false;
    351c:	2300      	movs	r3, #0
    351e:	e6c5      	b.n	32ac <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3520:	79a2      	ldrb	r2, [r4, #6]
    3522:	79e3      	ldrb	r3, [r4, #7]
    3524:	021b      	lsls	r3, r3, #8
    3526:	4313      	orrs	r3, r2
    3528:	1c1a      	adds	r2, r3, #0
    352a:	2b12      	cmp	r3, #18
    352c:	d900      	bls.n	3530 <usbdc_cb_ctl_req+0x2b8>
    352e:	2212      	movs	r2, #18
    3530:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    3532:	4b0d      	ldr	r3, [pc, #52]	; (3568 <usbdc_cb_ctl_req+0x2f0>)
    3534:	681b      	ldr	r3, [r3, #0]
    3536:	6859      	ldr	r1, [r3, #4]
    3538:	6818      	ldr	r0, [r3, #0]
    353a:	2201      	movs	r2, #1
    353c:	4b0c      	ldr	r3, [pc, #48]	; (3570 <usbdc_cb_ctl_req+0x2f8>)
    353e:	4798      	blx	r3
	if (!dev_desc) {
    3540:	2800      	cmp	r0, #0
    3542:	d100      	bne.n	3546 <usbdc_cb_ctl_req+0x2ce>
    3544:	e0a4      	b.n	3690 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    3546:	2300      	movs	r3, #0
    3548:	0022      	movs	r2, r4
    354a:	0001      	movs	r1, r0
    354c:	0028      	movs	r0, r5
    354e:	4c05      	ldr	r4, [pc, #20]	; (3564 <usbdc_cb_ctl_req+0x2ec>)
    3550:	47a0      	blx	r4
    3552:	4243      	negs	r3, r0
    3554:	4143      	adcs	r3, r0
    3556:	b2db      	uxtb	r3, r3
    3558:	e6a8      	b.n	32ac <usbdc_cb_ctl_req+0x34>
    355a:	46c0      	nop			; (mov r8, r8)
    355c:	00003101 	.word	0x00003101
    3560:	00003cc0 	.word	0x00003cc0
    3564:	0000325d 	.word	0x0000325d
    3568:	200007f0 	.word	0x200007f0
    356c:	00003845 	.word	0x00003845
    3570:	000037c9 	.word	0x000037c9
    3574:	000030b9 	.word	0x000030b9
    3578:	00000e3d 	.word	0x00000e3d
	uint16_t length   = req->wLength;
    357c:	79a3      	ldrb	r3, [r4, #6]
    357e:	79e6      	ldrb	r6, [r4, #7]
    3580:	0236      	lsls	r6, r6, #8
    3582:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3584:	4b46      	ldr	r3, [pc, #280]	; (36a0 <usbdc_cb_ctl_req+0x428>)
    3586:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    3588:	681b      	ldr	r3, [r3, #0]
    358a:	3201      	adds	r2, #1
    358c:	b2d2      	uxtb	r2, r2
    358e:	6859      	ldr	r1, [r3, #4]
    3590:	6818      	ldr	r0, [r3, #0]
    3592:	4b44      	ldr	r3, [pc, #272]	; (36a4 <usbdc_cb_ctl_req+0x42c>)
    3594:	4798      	blx	r3
    3596:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    3598:	d07c      	beq.n	3694 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    359a:	78c3      	ldrb	r3, [r0, #3]
    359c:	021b      	lsls	r3, r3, #8
    359e:	7884      	ldrb	r4, [r0, #2]
    35a0:	18e4      	adds	r4, r4, r3
    35a2:	b2a4      	uxth	r4, r4
		need_zlp = false;
    35a4:	2300      	movs	r3, #0
	if (length <= total_len) {
    35a6:	42a6      	cmp	r6, r4
    35a8:	d905      	bls.n	35b6 <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    35aa:	3f01      	subs	r7, #1
    35ac:	403e      	ands	r6, r7
    35ae:	4273      	negs	r3, r6
    35b0:	4173      	adcs	r3, r6
    35b2:	b2db      	uxtb	r3, r3
		length = total_len;
    35b4:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    35b6:	0032      	movs	r2, r6
    35b8:	0028      	movs	r0, r5
    35ba:	4c3b      	ldr	r4, [pc, #236]	; (36a8 <usbdc_cb_ctl_req+0x430>)
    35bc:	47a0      	blx	r4
    35be:	4243      	negs	r3, r0
    35c0:	4143      	adcs	r3, r0
    35c2:	b2db      	uxtb	r3, r3
    35c4:	e672      	b.n	32ac <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    35c6:	79a3      	ldrb	r3, [r4, #6]
    35c8:	79e1      	ldrb	r1, [r4, #7]
    35ca:	0209      	lsls	r1, r1, #8
    35cc:	4319      	orrs	r1, r3
    35ce:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    35d0:	4b33      	ldr	r3, [pc, #204]	; (36a0 <usbdc_cb_ctl_req+0x428>)
    35d2:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    35d4:	681b      	ldr	r3, [r3, #0]
    35d6:	b2d2      	uxtb	r2, r2
    35d8:	6859      	ldr	r1, [r3, #4]
    35da:	6818      	ldr	r0, [r3, #0]
    35dc:	4b33      	ldr	r3, [pc, #204]	; (36ac <usbdc_cb_ctl_req+0x434>)
    35de:	4798      	blx	r3
    35e0:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    35e2:	d059      	beq.n	3698 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    35e4:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    35e6:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    35e8:	4294      	cmp	r4, r2
    35ea:	d906      	bls.n	35fa <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    35ec:	1e73      	subs	r3, r6, #1
    35ee:	4023      	ands	r3, r4
    35f0:	0018      	movs	r0, r3
    35f2:	4243      	negs	r3, r0
    35f4:	4143      	adcs	r3, r0
    35f6:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    35f8:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    35fa:	0022      	movs	r2, r4
    35fc:	0028      	movs	r0, r5
    35fe:	4c2a      	ldr	r4, [pc, #168]	; (36a8 <usbdc_cb_ctl_req+0x430>)
    3600:	47a0      	blx	r4
    3602:	4243      	negs	r3, r0
    3604:	4143      	adcs	r3, r0
    3606:	b2db      	uxtb	r3, r3
    3608:	e650      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    360a:	4b25      	ldr	r3, [pc, #148]	; (36a0 <usbdc_cb_ctl_req+0x428>)
    360c:	7eda      	ldrb	r2, [r3, #27]
    360e:	6959      	ldr	r1, [r3, #20]
    3610:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3612:	6959      	ldr	r1, [r3, #20]
    3614:	2300      	movs	r3, #0
    3616:	2201      	movs	r2, #1
    3618:	0028      	movs	r0, r5
    361a:	4c23      	ldr	r4, [pc, #140]	; (36a8 <usbdc_cb_ctl_req+0x430>)
    361c:	47a0      	blx	r4
		return true;
    361e:	2301      	movs	r3, #1
    3620:	e644      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		st = 0;
    3622:	2300      	movs	r3, #0
    3624:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    3626:	4c1e      	ldr	r4, [pc, #120]	; (36a0 <usbdc_cb_ctl_req+0x428>)
    3628:	2202      	movs	r2, #2
    362a:	a902      	add	r1, sp, #8
    362c:	6960      	ldr	r0, [r4, #20]
    362e:	4b20      	ldr	r3, [pc, #128]	; (36b0 <usbdc_cb_ctl_req+0x438>)
    3630:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3632:	6961      	ldr	r1, [r4, #20]
    3634:	2300      	movs	r3, #0
    3636:	2202      	movs	r2, #2
    3638:	0028      	movs	r0, r5
    363a:	4c1b      	ldr	r4, [pc, #108]	; (36a8 <usbdc_cb_ctl_req+0x430>)
    363c:	47a0      	blx	r4
	return true;
    363e:	2301      	movs	r3, #1
    3640:	e634      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3642:	7920      	ldrb	r0, [r4, #4]
    3644:	2102      	movs	r1, #2
    3646:	4b1b      	ldr	r3, [pc, #108]	; (36b4 <usbdc_cb_ctl_req+0x43c>)
    3648:	4798      	blx	r3
		if (st < 0) {
    364a:	2800      	cmp	r0, #0
    364c:	db03      	blt.n	3656 <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    364e:	2301      	movs	r3, #1
    3650:	4018      	ands	r0, r3
    3652:	9002      	str	r0, [sp, #8]
    3654:	e7e7      	b.n	3626 <usbdc_cb_ctl_req+0x3ae>
			return false;
    3656:	2300      	movs	r3, #0
    3658:	e628      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    365a:	4b11      	ldr	r3, [pc, #68]	; (36a0 <usbdc_cb_ctl_req+0x428>)
    365c:	2200      	movs	r2, #0
    365e:	6959      	ldr	r1, [r3, #20]
    3660:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3662:	6959      	ldr	r1, [r3, #20]
    3664:	2300      	movs	r3, #0
    3666:	3201      	adds	r2, #1
    3668:	2000      	movs	r0, #0
    366a:	4c0f      	ldr	r4, [pc, #60]	; (36a8 <usbdc_cb_ctl_req+0x430>)
    366c:	47a0      	blx	r4
		return true;
    366e:	2301      	movs	r3, #1
    3670:	e61c      	b.n	32ac <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3672:	4b0b      	ldr	r3, [pc, #44]	; (36a0 <usbdc_cb_ctl_req+0x428>)
    3674:	695a      	ldr	r2, [r3, #20]
    3676:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3678:	6959      	ldr	r1, [r3, #20]
    367a:	2300      	movs	r3, #0
    367c:	2201      	movs	r2, #1
    367e:	2000      	movs	r0, #0
    3680:	4c09      	ldr	r4, [pc, #36]	; (36a8 <usbdc_cb_ctl_req+0x430>)
    3682:	47a0      	blx	r4
			return true;
    3684:	2301      	movs	r3, #1
    3686:	e611      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		return false;
    3688:	2300      	movs	r3, #0
    368a:	e60f      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		return false;
    368c:	2300      	movs	r3, #0
    368e:	e60d      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		return false;
    3690:	2300      	movs	r3, #0
    3692:	e60b      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		return false;
    3694:	2300      	movs	r3, #0
    3696:	e609      	b.n	32ac <usbdc_cb_ctl_req+0x34>
		return false;
    3698:	2300      	movs	r3, #0
    369a:	e607      	b.n	32ac <usbdc_cb_ctl_req+0x34>
			return false;
    369c:	2300      	movs	r3, #0
    369e:	e605      	b.n	32ac <usbdc_cb_ctl_req+0x34>
    36a0:	200007f0 	.word	0x200007f0
    36a4:	00003845 	.word	0x00003845
    36a8:	0000325d 	.word	0x0000325d
    36ac:	000038ad 	.word	0x000038ad
    36b0:	00003995 	.word	0x00003995
    36b4:	00000e3d 	.word	0x00000e3d

000036b8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    36b8:	b510      	push	{r4, lr}
	switch (type) {
    36ba:	2801      	cmp	r0, #1
    36bc:	d009      	beq.n	36d2 <usbdc_register_handler+0x1a>
    36be:	2800      	cmp	r0, #0
    36c0:	d002      	beq.n	36c8 <usbdc_register_handler+0x10>
    36c2:	2802      	cmp	r0, #2
    36c4:	d00a      	beq.n	36dc <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    36c6:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    36c8:	4807      	ldr	r0, [pc, #28]	; (36e8 <usbdc_register_handler+0x30>)
    36ca:	3004      	adds	r0, #4
    36cc:	4b07      	ldr	r3, [pc, #28]	; (36ec <usbdc_register_handler+0x34>)
    36ce:	4798      	blx	r3
		break;
    36d0:	e7f9      	b.n	36c6 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    36d2:	4805      	ldr	r0, [pc, #20]	; (36e8 <usbdc_register_handler+0x30>)
    36d4:	3008      	adds	r0, #8
    36d6:	4b05      	ldr	r3, [pc, #20]	; (36ec <usbdc_register_handler+0x34>)
    36d8:	4798      	blx	r3
		break;
    36da:	e7f4      	b.n	36c6 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    36dc:	4802      	ldr	r0, [pc, #8]	; (36e8 <usbdc_register_handler+0x30>)
    36de:	300c      	adds	r0, #12
    36e0:	4b02      	ldr	r3, [pc, #8]	; (36ec <usbdc_register_handler+0x34>)
    36e2:	4798      	blx	r3
}
    36e4:	e7ef      	b.n	36c6 <usbdc_register_handler+0xe>
    36e6:	46c0      	nop			; (mov r8, r8)
    36e8:	200007f0 	.word	0x200007f0
    36ec:	0000390d 	.word	0x0000390d

000036f0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    36f0:	b570      	push	{r4, r5, r6, lr}
    36f2:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    36f4:	1e43      	subs	r3, r0, #1
    36f6:	4198      	sbcs	r0, r3
    36f8:	b2c0      	uxtb	r0, r0
    36fa:	4a0c      	ldr	r2, [pc, #48]	; (372c <usbdc_init+0x3c>)
    36fc:	490c      	ldr	r1, [pc, #48]	; (3730 <usbdc_init+0x40>)
    36fe:	4b0d      	ldr	r3, [pc, #52]	; (3734 <usbdc_init+0x44>)
    3700:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3702:	4b0d      	ldr	r3, [pc, #52]	; (3738 <usbdc_init+0x48>)
    3704:	4798      	blx	r3
	if (rc < 0) {
    3706:	2800      	cmp	r0, #0
    3708:	db0e      	blt.n	3728 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    370a:	4d0c      	ldr	r5, [pc, #48]	; (373c <usbdc_init+0x4c>)
    370c:	2220      	movs	r2, #32
    370e:	2100      	movs	r1, #0
    3710:	0028      	movs	r0, r5
    3712:	4b0b      	ldr	r3, [pc, #44]	; (3740 <usbdc_init+0x50>)
    3714:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3716:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3718:	490a      	ldr	r1, [pc, #40]	; (3744 <usbdc_init+0x54>)
    371a:	2000      	movs	r0, #0
    371c:	4c0a      	ldr	r4, [pc, #40]	; (3748 <usbdc_init+0x58>)
    371e:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3720:	490a      	ldr	r1, [pc, #40]	; (374c <usbdc_init+0x5c>)
    3722:	2001      	movs	r0, #1
    3724:	47a0      	blx	r4

	return 0;
    3726:	2000      	movs	r0, #0
}
    3728:	bd70      	pop	{r4, r5, r6, pc}
    372a:	46c0      	nop			; (mov r8, r8)
    372c:	00000355 	.word	0x00000355
    3730:	00003cf0 	.word	0x00003cf0
    3734:	00000ef5 	.word	0x00000ef5
    3738:	00000ba1 	.word	0x00000ba1
    373c:	200007f0 	.word	0x200007f0
    3740:	00003a19 	.word	0x00003a19
    3744:	00003145 	.word	0x00003145
    3748:	00000c05 	.word	0x00000c05
    374c:	00003239 	.word	0x00003239

00003750 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3750:	b510      	push	{r4, lr}
    3752:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    3754:	4802      	ldr	r0, [pc, #8]	; (3760 <usbdc_register_function+0x10>)
    3756:	3010      	adds	r0, #16
    3758:	4b02      	ldr	r3, [pc, #8]	; (3764 <usbdc_register_function+0x14>)
    375a:	4798      	blx	r3
}
    375c:	bd10      	pop	{r4, pc}
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	200007f0 	.word	0x200007f0
    3764:	0000390d 	.word	0x0000390d

00003768 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    3768:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    376a:	4b0b      	ldr	r3, [pc, #44]	; (3798 <usbdc_start+0x30>)
    376c:	7e9b      	ldrb	r3, [r3, #26]
    376e:	2b00      	cmp	r3, #0
    3770:	d10c      	bne.n	378c <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    3772:	2800      	cmp	r0, #0
    3774:	d00d      	beq.n	3792 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    3776:	4b08      	ldr	r3, [pc, #32]	; (3798 <usbdc_start+0x30>)
    3778:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    377a:	6802      	ldr	r2, [r0, #0]
    377c:	79d2      	ldrb	r2, [r2, #7]
    377e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3780:	2201      	movs	r2, #1
    3782:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3784:	4b05      	ldr	r3, [pc, #20]	; (379c <usbdc_start+0x34>)
    3786:	4798      	blx	r3
	return ERR_NONE;
    3788:	2000      	movs	r0, #0
}
    378a:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    378c:	2004      	movs	r0, #4
    378e:	4240      	negs	r0, r0
    3790:	e7fb      	b.n	378a <usbdc_start+0x22>
		return ERR_BAD_DATA;
    3792:	2009      	movs	r0, #9
    3794:	4240      	negs	r0, r0
    3796:	e7f8      	b.n	378a <usbdc_start+0x22>
    3798:	200007f0 	.word	0x200007f0
    379c:	00000c11 	.word	0x00000c11

000037a0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    37a0:	b510      	push	{r4, lr}
	usb_d_attach();
    37a2:	4b01      	ldr	r3, [pc, #4]	; (37a8 <usbdc_attach+0x8>)
    37a4:	4798      	blx	r3
}
    37a6:	bd10      	pop	{r4, pc}
    37a8:	00000c1d 	.word	0x00000c1d

000037ac <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    37ac:	4b01      	ldr	r3, [pc, #4]	; (37b4 <usbdc_get_ctrl_buffer+0x8>)
    37ae:	6958      	ldr	r0, [r3, #20]
}
    37b0:	4770      	bx	lr
    37b2:	46c0      	nop			; (mov r8, r8)
    37b4:	200007f0 	.word	0x200007f0

000037b8 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    37b8:	4b02      	ldr	r3, [pc, #8]	; (37c4 <usbdc_get_state+0xc>)
    37ba:	7e98      	ldrb	r0, [r3, #26]
    37bc:	06c3      	lsls	r3, r0, #27
    37be:	d500      	bpl.n	37c2 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    37c0:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    37c2:	4770      	bx	lr
    37c4:	200007f0 	.word	0x200007f0

000037c8 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    37c8:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    37ca:	4288      	cmp	r0, r1
    37cc:	d211      	bcs.n	37f2 <usb_find_desc+0x2a>
	return desc[0];
    37ce:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    37d0:	2b01      	cmp	r3, #1
    37d2:	d910      	bls.n	37f6 <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    37d4:	7844      	ldrb	r4, [r0, #1]
    37d6:	4294      	cmp	r4, r2
    37d8:	d00a      	beq.n	37f0 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    37da:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    37dc:	4281      	cmp	r1, r0
    37de:	d906      	bls.n	37ee <usb_find_desc+0x26>
	return desc[0];
    37e0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    37e2:	2b01      	cmp	r3, #1
    37e4:	d909      	bls.n	37fa <usb_find_desc+0x32>
	return desc[1];
    37e6:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    37e8:	4294      	cmp	r4, r2
    37ea:	d1f6      	bne.n	37da <usb_find_desc+0x12>
    37ec:	e000      	b.n	37f0 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    37ee:	2000      	movs	r0, #0
}
    37f0:	bd10      	pop	{r4, pc}
	return NULL;
    37f2:	2000      	movs	r0, #0
    37f4:	e7fc      	b.n	37f0 <usb_find_desc+0x28>
		_desc_len_check();
    37f6:	2000      	movs	r0, #0
    37f8:	e7fa      	b.n	37f0 <usb_find_desc+0x28>
    37fa:	2000      	movs	r0, #0
    37fc:	e7f8      	b.n	37f0 <usb_find_desc+0x28>

000037fe <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    37fe:	4288      	cmp	r0, r1
    3800:	d215      	bcs.n	382e <usb_find_ep_desc+0x30>
	return desc[0];
    3802:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3804:	2b01      	cmp	r3, #1
    3806:	d914      	bls.n	3832 <usb_find_ep_desc+0x34>
	return desc[1];
    3808:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    380a:	2a04      	cmp	r2, #4
    380c:	d013      	beq.n	3836 <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    380e:	2a05      	cmp	r2, #5
    3810:	d00c      	beq.n	382c <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    3812:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3814:	4281      	cmp	r1, r0
    3816:	d908      	bls.n	382a <usb_find_ep_desc+0x2c>
	return desc[0];
    3818:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    381a:	2b01      	cmp	r3, #1
    381c:	d90d      	bls.n	383a <usb_find_ep_desc+0x3c>
	return desc[1];
    381e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3820:	2a04      	cmp	r2, #4
    3822:	d00c      	beq.n	383e <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3824:	2a05      	cmp	r2, #5
    3826:	d1f4      	bne.n	3812 <usb_find_ep_desc+0x14>
    3828:	e000      	b.n	382c <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    382a:	2000      	movs	r0, #0
}
    382c:	4770      	bx	lr
	return NULL;
    382e:	2000      	movs	r0, #0
    3830:	e7fc      	b.n	382c <usb_find_ep_desc+0x2e>
		_desc_len_check();
    3832:	2000      	movs	r0, #0
    3834:	e7fa      	b.n	382c <usb_find_ep_desc+0x2e>
	return NULL;
    3836:	2000      	movs	r0, #0
    3838:	e7f8      	b.n	382c <usb_find_ep_desc+0x2e>
		_desc_len_check();
    383a:	2000      	movs	r0, #0
    383c:	e7f6      	b.n	382c <usb_find_ep_desc+0x2e>
	return NULL;
    383e:	2000      	movs	r0, #0
    3840:	e7f4      	b.n	382c <usb_find_ep_desc+0x2e>
	...

00003844 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    3844:	b570      	push	{r4, r5, r6, lr}
    3846:	000c      	movs	r4, r1
    3848:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    384a:	2202      	movs	r2, #2
    384c:	4b16      	ldr	r3, [pc, #88]	; (38a8 <usb_find_cfg_desc+0x64>)
    384e:	4798      	blx	r3
	if (!desc) {
    3850:	2800      	cmp	r0, #0
    3852:	d01d      	beq.n	3890 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    3854:	4284      	cmp	r4, r0
    3856:	d91c      	bls.n	3892 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    3858:	7803      	ldrb	r3, [r0, #0]
    385a:	2b01      	cmp	r3, #1
    385c:	d91b      	bls.n	3896 <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    385e:	7843      	ldrb	r3, [r0, #1]
    3860:	2b02      	cmp	r3, #2
    3862:	d11a      	bne.n	389a <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    3864:	7943      	ldrb	r3, [r0, #5]
    3866:	42ab      	cmp	r3, r5
    3868:	d012      	beq.n	3890 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    386a:	78c2      	ldrb	r2, [r0, #3]
    386c:	0212      	lsls	r2, r2, #8
    386e:	7883      	ldrb	r3, [r0, #2]
    3870:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    3872:	b29b      	uxth	r3, r3
    3874:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3876:	4284      	cmp	r4, r0
    3878:	d909      	bls.n	388e <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    387a:	7803      	ldrb	r3, [r0, #0]
    387c:	2b01      	cmp	r3, #1
    387e:	d90e      	bls.n	389e <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    3880:	7843      	ldrb	r3, [r0, #1]
    3882:	2b02      	cmp	r3, #2
    3884:	d10d      	bne.n	38a2 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    3886:	7943      	ldrb	r3, [r0, #5]
    3888:	42ab      	cmp	r3, r5
    388a:	d1ee      	bne.n	386a <usb_find_cfg_desc+0x26>
    388c:	e000      	b.n	3890 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    388e:	2000      	movs	r0, #0
}
    3890:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    3892:	2000      	movs	r0, #0
    3894:	e7fc      	b.n	3890 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3896:	2000      	movs	r0, #0
    3898:	e7fa      	b.n	3890 <usb_find_cfg_desc+0x4c>
	return NULL;
    389a:	2000      	movs	r0, #0
    389c:	e7f8      	b.n	3890 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    389e:	2000      	movs	r0, #0
    38a0:	e7f6      	b.n	3890 <usb_find_cfg_desc+0x4c>
	return NULL;
    38a2:	2000      	movs	r0, #0
    38a4:	e7f4      	b.n	3890 <usb_find_cfg_desc+0x4c>
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	000037c9 	.word	0x000037c9

000038ac <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    38ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ae:	000d      	movs	r5, r1
    38b0:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    38b2:	4288      	cmp	r0, r1
    38b4:	d212      	bcs.n	38dc <usb_find_str_desc+0x30>
    38b6:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    38b8:	4e0a      	ldr	r6, [pc, #40]	; (38e4 <usb_find_str_desc+0x38>)
    38ba:	2203      	movs	r2, #3
    38bc:	0029      	movs	r1, r5
    38be:	47b0      	blx	r6
		if (desc) {
    38c0:	2800      	cmp	r0, #0
    38c2:	d00e      	beq.n	38e2 <usb_find_str_desc+0x36>
	return desc[0];
    38c4:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    38c6:	2b01      	cmp	r3, #1
    38c8:	d90a      	bls.n	38e0 <usb_find_str_desc+0x34>
			if (i == str_index) {
    38ca:	42a7      	cmp	r7, r4
    38cc:	d009      	beq.n	38e2 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    38ce:	3401      	adds	r4, #1
    38d0:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    38d2:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    38d4:	4285      	cmp	r5, r0
    38d6:	d8f0      	bhi.n	38ba <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    38d8:	2000      	movs	r0, #0
    38da:	e002      	b.n	38e2 <usb_find_str_desc+0x36>
    38dc:	2000      	movs	r0, #0
    38de:	e000      	b.n	38e2 <usb_find_str_desc+0x36>
			_desc_len_check();
    38e0:	2000      	movs	r0, #0
}
    38e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38e4:	000037c9 	.word	0x000037c9

000038e8 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    38e8:	6803      	ldr	r3, [r0, #0]
    38ea:	2b00      	cmp	r3, #0
    38ec:	d00a      	beq.n	3904 <is_list_element+0x1c>
		if (it == element) {
    38ee:	428b      	cmp	r3, r1
    38f0:	d00a      	beq.n	3908 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    38f2:	681b      	ldr	r3, [r3, #0]
    38f4:	2b00      	cmp	r3, #0
    38f6:	d003      	beq.n	3900 <is_list_element+0x18>
		if (it == element) {
    38f8:	4299      	cmp	r1, r3
    38fa:	d1fa      	bne.n	38f2 <is_list_element+0xa>
			return true;
    38fc:	2001      	movs	r0, #1
    38fe:	e000      	b.n	3902 <is_list_element+0x1a>
		}
	}

	return false;
    3900:	2000      	movs	r0, #0
}
    3902:	4770      	bx	lr
	return false;
    3904:	2000      	movs	r0, #0
    3906:	e7fc      	b.n	3902 <is_list_element+0x1a>
			return true;
    3908:	2001      	movs	r0, #1
    390a:	e7fa      	b.n	3902 <is_list_element+0x1a>

0000390c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    390c:	b570      	push	{r4, r5, r6, lr}
    390e:	0005      	movs	r5, r0
    3910:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    3912:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    3914:	4b0a      	ldr	r3, [pc, #40]	; (3940 <list_insert_at_end+0x34>)
    3916:	4798      	blx	r3
    3918:	2301      	movs	r3, #1
    391a:	4058      	eors	r0, r3
    391c:	b2c0      	uxtb	r0, r0
    391e:	224f      	movs	r2, #79	; 0x4f
    3920:	4908      	ldr	r1, [pc, #32]	; (3944 <list_insert_at_end+0x38>)
    3922:	4b09      	ldr	r3, [pc, #36]	; (3948 <list_insert_at_end+0x3c>)
    3924:	4798      	blx	r3

	if (!list->head) {
    3926:	682b      	ldr	r3, [r5, #0]
    3928:	2b00      	cmp	r3, #0
    392a:	d103      	bne.n	3934 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    392c:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    392e:	6033      	str	r3, [r6, #0]
		return;
    3930:	e005      	b.n	393e <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    3932:	001c      	movs	r4, r3
	while (it->next) {
    3934:	6823      	ldr	r3, [r4, #0]
    3936:	2b00      	cmp	r3, #0
    3938:	d1fb      	bne.n	3932 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    393a:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    393c:	6033      	str	r3, [r6, #0]
}
    393e:	bd70      	pop	{r4, r5, r6, pc}
    3940:	000038e9 	.word	0x000038e9
    3944:	00003d08 	.word	0x00003d08
    3948:	00000ef5 	.word	0x00000ef5

0000394c <__libc_init_array>:
    394c:	b570      	push	{r4, r5, r6, lr}
    394e:	4e0d      	ldr	r6, [pc, #52]	; (3984 <__libc_init_array+0x38>)
    3950:	4d0d      	ldr	r5, [pc, #52]	; (3988 <__libc_init_array+0x3c>)
    3952:	2400      	movs	r4, #0
    3954:	1bad      	subs	r5, r5, r6
    3956:	10ad      	asrs	r5, r5, #2
    3958:	d005      	beq.n	3966 <__libc_init_array+0x1a>
    395a:	00a3      	lsls	r3, r4, #2
    395c:	58f3      	ldr	r3, [r6, r3]
    395e:	3401      	adds	r4, #1
    3960:	4798      	blx	r3
    3962:	42a5      	cmp	r5, r4
    3964:	d1f9      	bne.n	395a <__libc_init_array+0xe>
    3966:	f000 f9e1 	bl	3d2c <_init>
    396a:	4e08      	ldr	r6, [pc, #32]	; (398c <__libc_init_array+0x40>)
    396c:	4d08      	ldr	r5, [pc, #32]	; (3990 <__libc_init_array+0x44>)
    396e:	2400      	movs	r4, #0
    3970:	1bad      	subs	r5, r5, r6
    3972:	10ad      	asrs	r5, r5, #2
    3974:	d005      	beq.n	3982 <__libc_init_array+0x36>
    3976:	00a3      	lsls	r3, r4, #2
    3978:	58f3      	ldr	r3, [r6, r3]
    397a:	3401      	adds	r4, #1
    397c:	4798      	blx	r3
    397e:	42a5      	cmp	r5, r4
    3980:	d1f9      	bne.n	3976 <__libc_init_array+0x2a>
    3982:	bd70      	pop	{r4, r5, r6, pc}
    3984:	00003d38 	.word	0x00003d38
    3988:	00003d38 	.word	0x00003d38
    398c:	00003d38 	.word	0x00003d38
    3990:	00003d40 	.word	0x00003d40

00003994 <memcpy>:
    3994:	b5f0      	push	{r4, r5, r6, r7, lr}
    3996:	0005      	movs	r5, r0
    3998:	2a0f      	cmp	r2, #15
    399a:	d92f      	bls.n	39fc <memcpy+0x68>
    399c:	000b      	movs	r3, r1
    399e:	4303      	orrs	r3, r0
    39a0:	079b      	lsls	r3, r3, #30
    39a2:	d134      	bne.n	3a0e <memcpy+0x7a>
    39a4:	0016      	movs	r6, r2
    39a6:	000c      	movs	r4, r1
    39a8:	0003      	movs	r3, r0
    39aa:	3e10      	subs	r6, #16
    39ac:	0935      	lsrs	r5, r6, #4
    39ae:	3501      	adds	r5, #1
    39b0:	012d      	lsls	r5, r5, #4
    39b2:	1945      	adds	r5, r0, r5
    39b4:	6827      	ldr	r7, [r4, #0]
    39b6:	601f      	str	r7, [r3, #0]
    39b8:	6867      	ldr	r7, [r4, #4]
    39ba:	605f      	str	r7, [r3, #4]
    39bc:	68a7      	ldr	r7, [r4, #8]
    39be:	609f      	str	r7, [r3, #8]
    39c0:	68e7      	ldr	r7, [r4, #12]
    39c2:	3410      	adds	r4, #16
    39c4:	60df      	str	r7, [r3, #12]
    39c6:	3310      	adds	r3, #16
    39c8:	429d      	cmp	r5, r3
    39ca:	d1f3      	bne.n	39b4 <memcpy+0x20>
    39cc:	230f      	movs	r3, #15
    39ce:	439e      	bics	r6, r3
    39d0:	3610      	adds	r6, #16
    39d2:	1985      	adds	r5, r0, r6
    39d4:	1989      	adds	r1, r1, r6
    39d6:	4013      	ands	r3, r2
    39d8:	2b03      	cmp	r3, #3
    39da:	d91a      	bls.n	3a12 <memcpy+0x7e>
    39dc:	1f1e      	subs	r6, r3, #4
    39de:	2300      	movs	r3, #0
    39e0:	08b4      	lsrs	r4, r6, #2
    39e2:	3401      	adds	r4, #1
    39e4:	00a4      	lsls	r4, r4, #2
    39e6:	58cf      	ldr	r7, [r1, r3]
    39e8:	50ef      	str	r7, [r5, r3]
    39ea:	3304      	adds	r3, #4
    39ec:	42a3      	cmp	r3, r4
    39ee:	d1fa      	bne.n	39e6 <memcpy+0x52>
    39f0:	2403      	movs	r4, #3
    39f2:	43a6      	bics	r6, r4
    39f4:	1d33      	adds	r3, r6, #4
    39f6:	4022      	ands	r2, r4
    39f8:	18c9      	adds	r1, r1, r3
    39fa:	18ed      	adds	r5, r5, r3
    39fc:	2a00      	cmp	r2, #0
    39fe:	d005      	beq.n	3a0c <memcpy+0x78>
    3a00:	2300      	movs	r3, #0
    3a02:	5ccc      	ldrb	r4, [r1, r3]
    3a04:	54ec      	strb	r4, [r5, r3]
    3a06:	3301      	adds	r3, #1
    3a08:	4293      	cmp	r3, r2
    3a0a:	d1fa      	bne.n	3a02 <memcpy+0x6e>
    3a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a0e:	0005      	movs	r5, r0
    3a10:	e7f6      	b.n	3a00 <memcpy+0x6c>
    3a12:	001a      	movs	r2, r3
    3a14:	e7f2      	b.n	39fc <memcpy+0x68>
    3a16:	46c0      	nop			; (mov r8, r8)

00003a18 <memset>:
    3a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a1a:	0783      	lsls	r3, r0, #30
    3a1c:	d043      	beq.n	3aa6 <memset+0x8e>
    3a1e:	1e54      	subs	r4, r2, #1
    3a20:	2a00      	cmp	r2, #0
    3a22:	d03f      	beq.n	3aa4 <memset+0x8c>
    3a24:	b2ce      	uxtb	r6, r1
    3a26:	0002      	movs	r2, r0
    3a28:	2503      	movs	r5, #3
    3a2a:	e002      	b.n	3a32 <memset+0x1a>
    3a2c:	001a      	movs	r2, r3
    3a2e:	3c01      	subs	r4, #1
    3a30:	d338      	bcc.n	3aa4 <memset+0x8c>
    3a32:	1c53      	adds	r3, r2, #1
    3a34:	7016      	strb	r6, [r2, #0]
    3a36:	422b      	tst	r3, r5
    3a38:	d1f8      	bne.n	3a2c <memset+0x14>
    3a3a:	2c03      	cmp	r4, #3
    3a3c:	d92a      	bls.n	3a94 <memset+0x7c>
    3a3e:	22ff      	movs	r2, #255	; 0xff
    3a40:	400a      	ands	r2, r1
    3a42:	0215      	lsls	r5, r2, #8
    3a44:	4315      	orrs	r5, r2
    3a46:	042a      	lsls	r2, r5, #16
    3a48:	4315      	orrs	r5, r2
    3a4a:	2c0f      	cmp	r4, #15
    3a4c:	d914      	bls.n	3a78 <memset+0x60>
    3a4e:	0027      	movs	r7, r4
    3a50:	001a      	movs	r2, r3
    3a52:	3f10      	subs	r7, #16
    3a54:	093e      	lsrs	r6, r7, #4
    3a56:	3601      	adds	r6, #1
    3a58:	0136      	lsls	r6, r6, #4
    3a5a:	199e      	adds	r6, r3, r6
    3a5c:	6015      	str	r5, [r2, #0]
    3a5e:	6055      	str	r5, [r2, #4]
    3a60:	6095      	str	r5, [r2, #8]
    3a62:	60d5      	str	r5, [r2, #12]
    3a64:	3210      	adds	r2, #16
    3a66:	4296      	cmp	r6, r2
    3a68:	d1f8      	bne.n	3a5c <memset+0x44>
    3a6a:	220f      	movs	r2, #15
    3a6c:	4397      	bics	r7, r2
    3a6e:	3710      	adds	r7, #16
    3a70:	19db      	adds	r3, r3, r7
    3a72:	4014      	ands	r4, r2
    3a74:	2c03      	cmp	r4, #3
    3a76:	d90d      	bls.n	3a94 <memset+0x7c>
    3a78:	001a      	movs	r2, r3
    3a7a:	1f27      	subs	r7, r4, #4
    3a7c:	08be      	lsrs	r6, r7, #2
    3a7e:	3601      	adds	r6, #1
    3a80:	00b6      	lsls	r6, r6, #2
    3a82:	199e      	adds	r6, r3, r6
    3a84:	c220      	stmia	r2!, {r5}
    3a86:	42b2      	cmp	r2, r6
    3a88:	d1fc      	bne.n	3a84 <memset+0x6c>
    3a8a:	2203      	movs	r2, #3
    3a8c:	4397      	bics	r7, r2
    3a8e:	3704      	adds	r7, #4
    3a90:	19db      	adds	r3, r3, r7
    3a92:	4014      	ands	r4, r2
    3a94:	2c00      	cmp	r4, #0
    3a96:	d005      	beq.n	3aa4 <memset+0x8c>
    3a98:	b2c9      	uxtb	r1, r1
    3a9a:	191c      	adds	r4, r3, r4
    3a9c:	7019      	strb	r1, [r3, #0]
    3a9e:	3301      	adds	r3, #1
    3aa0:	429c      	cmp	r4, r3
    3aa2:	d1fb      	bne.n	3a9c <memset+0x84>
    3aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aa6:	0014      	movs	r4, r2
    3aa8:	0003      	movs	r3, r0
    3aaa:	e7c6      	b.n	3a3a <memset+0x22>

00003aac <register_fini>:
    3aac:	4b03      	ldr	r3, [pc, #12]	; (3abc <register_fini+0x10>)
    3aae:	b510      	push	{r4, lr}
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d002      	beq.n	3aba <register_fini+0xe>
    3ab4:	4802      	ldr	r0, [pc, #8]	; (3ac0 <register_fini+0x14>)
    3ab6:	f000 f805 	bl	3ac4 <atexit>
    3aba:	bd10      	pop	{r4, pc}
    3abc:	00000000 	.word	0x00000000
    3ac0:	00003ad5 	.word	0x00003ad5

00003ac4 <atexit>:
    3ac4:	b510      	push	{r4, lr}
    3ac6:	0001      	movs	r1, r0
    3ac8:	2300      	movs	r3, #0
    3aca:	2200      	movs	r2, #0
    3acc:	2000      	movs	r0, #0
    3ace:	f000 f81f 	bl	3b10 <__register_exitproc>
    3ad2:	bd10      	pop	{r4, pc}

00003ad4 <__libc_fini_array>:
    3ad4:	b570      	push	{r4, r5, r6, lr}
    3ad6:	4b09      	ldr	r3, [pc, #36]	; (3afc <__libc_fini_array+0x28>)
    3ad8:	4c09      	ldr	r4, [pc, #36]	; (3b00 <__libc_fini_array+0x2c>)
    3ada:	1ae4      	subs	r4, r4, r3
    3adc:	10a4      	asrs	r4, r4, #2
    3ade:	d009      	beq.n	3af4 <__libc_fini_array+0x20>
    3ae0:	4a08      	ldr	r2, [pc, #32]	; (3b04 <__libc_fini_array+0x30>)
    3ae2:	18a5      	adds	r5, r4, r2
    3ae4:	00ad      	lsls	r5, r5, #2
    3ae6:	18ed      	adds	r5, r5, r3
    3ae8:	682b      	ldr	r3, [r5, #0]
    3aea:	3c01      	subs	r4, #1
    3aec:	4798      	blx	r3
    3aee:	3d04      	subs	r5, #4
    3af0:	2c00      	cmp	r4, #0
    3af2:	d1f9      	bne.n	3ae8 <__libc_fini_array+0x14>
    3af4:	f000 f924 	bl	3d40 <_fini>
    3af8:	bd70      	pop	{r4, r5, r6, pc}
    3afa:	46c0      	nop			; (mov r8, r8)
    3afc:	00003d4c 	.word	0x00003d4c
    3b00:	00003d50 	.word	0x00003d50
    3b04:	3fffffff 	.word	0x3fffffff

00003b08 <__retarget_lock_acquire_recursive>:
    3b08:	4770      	bx	lr
    3b0a:	46c0      	nop			; (mov r8, r8)

00003b0c <__retarget_lock_release_recursive>:
    3b0c:	4770      	bx	lr
    3b0e:	46c0      	nop			; (mov r8, r8)

00003b10 <__register_exitproc>:
    3b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b12:	464e      	mov	r6, r9
    3b14:	4645      	mov	r5, r8
    3b16:	46de      	mov	lr, fp
    3b18:	4657      	mov	r7, sl
    3b1a:	b5e0      	push	{r5, r6, r7, lr}
    3b1c:	4d36      	ldr	r5, [pc, #216]	; (3bf8 <__register_exitproc+0xe8>)
    3b1e:	b083      	sub	sp, #12
    3b20:	0006      	movs	r6, r0
    3b22:	6828      	ldr	r0, [r5, #0]
    3b24:	4698      	mov	r8, r3
    3b26:	000f      	movs	r7, r1
    3b28:	4691      	mov	r9, r2
    3b2a:	f7ff ffed 	bl	3b08 <__retarget_lock_acquire_recursive>
    3b2e:	4b33      	ldr	r3, [pc, #204]	; (3bfc <__register_exitproc+0xec>)
    3b30:	681c      	ldr	r4, [r3, #0]
    3b32:	23a4      	movs	r3, #164	; 0xa4
    3b34:	005b      	lsls	r3, r3, #1
    3b36:	58e0      	ldr	r0, [r4, r3]
    3b38:	2800      	cmp	r0, #0
    3b3a:	d052      	beq.n	3be2 <__register_exitproc+0xd2>
    3b3c:	6843      	ldr	r3, [r0, #4]
    3b3e:	2b1f      	cmp	r3, #31
    3b40:	dc13      	bgt.n	3b6a <__register_exitproc+0x5a>
    3b42:	1c5a      	adds	r2, r3, #1
    3b44:	9201      	str	r2, [sp, #4]
    3b46:	2e00      	cmp	r6, #0
    3b48:	d128      	bne.n	3b9c <__register_exitproc+0x8c>
    3b4a:	9a01      	ldr	r2, [sp, #4]
    3b4c:	3302      	adds	r3, #2
    3b4e:	009b      	lsls	r3, r3, #2
    3b50:	6042      	str	r2, [r0, #4]
    3b52:	501f      	str	r7, [r3, r0]
    3b54:	6828      	ldr	r0, [r5, #0]
    3b56:	f7ff ffd9 	bl	3b0c <__retarget_lock_release_recursive>
    3b5a:	2000      	movs	r0, #0
    3b5c:	b003      	add	sp, #12
    3b5e:	bc3c      	pop	{r2, r3, r4, r5}
    3b60:	4690      	mov	r8, r2
    3b62:	4699      	mov	r9, r3
    3b64:	46a2      	mov	sl, r4
    3b66:	46ab      	mov	fp, r5
    3b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b6a:	4b25      	ldr	r3, [pc, #148]	; (3c00 <__register_exitproc+0xf0>)
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d03d      	beq.n	3bec <__register_exitproc+0xdc>
    3b70:	20c8      	movs	r0, #200	; 0xc8
    3b72:	0040      	lsls	r0, r0, #1
    3b74:	e000      	b.n	3b78 <__register_exitproc+0x68>
    3b76:	bf00      	nop
    3b78:	2800      	cmp	r0, #0
    3b7a:	d037      	beq.n	3bec <__register_exitproc+0xdc>
    3b7c:	22a4      	movs	r2, #164	; 0xa4
    3b7e:	2300      	movs	r3, #0
    3b80:	0052      	lsls	r2, r2, #1
    3b82:	58a1      	ldr	r1, [r4, r2]
    3b84:	6043      	str	r3, [r0, #4]
    3b86:	6001      	str	r1, [r0, #0]
    3b88:	50a0      	str	r0, [r4, r2]
    3b8a:	3240      	adds	r2, #64	; 0x40
    3b8c:	5083      	str	r3, [r0, r2]
    3b8e:	3204      	adds	r2, #4
    3b90:	5083      	str	r3, [r0, r2]
    3b92:	3301      	adds	r3, #1
    3b94:	9301      	str	r3, [sp, #4]
    3b96:	2300      	movs	r3, #0
    3b98:	2e00      	cmp	r6, #0
    3b9a:	d0d6      	beq.n	3b4a <__register_exitproc+0x3a>
    3b9c:	009a      	lsls	r2, r3, #2
    3b9e:	4692      	mov	sl, r2
    3ba0:	4482      	add	sl, r0
    3ba2:	464a      	mov	r2, r9
    3ba4:	2188      	movs	r1, #136	; 0x88
    3ba6:	4654      	mov	r4, sl
    3ba8:	5062      	str	r2, [r4, r1]
    3baa:	22c4      	movs	r2, #196	; 0xc4
    3bac:	0052      	lsls	r2, r2, #1
    3bae:	4691      	mov	r9, r2
    3bb0:	4481      	add	r9, r0
    3bb2:	464a      	mov	r2, r9
    3bb4:	3987      	subs	r1, #135	; 0x87
    3bb6:	4099      	lsls	r1, r3
    3bb8:	6812      	ldr	r2, [r2, #0]
    3bba:	468b      	mov	fp, r1
    3bbc:	430a      	orrs	r2, r1
    3bbe:	4694      	mov	ip, r2
    3bc0:	464a      	mov	r2, r9
    3bc2:	4661      	mov	r1, ip
    3bc4:	6011      	str	r1, [r2, #0]
    3bc6:	2284      	movs	r2, #132	; 0x84
    3bc8:	4641      	mov	r1, r8
    3bca:	0052      	lsls	r2, r2, #1
    3bcc:	50a1      	str	r1, [r4, r2]
    3bce:	2e02      	cmp	r6, #2
    3bd0:	d1bb      	bne.n	3b4a <__register_exitproc+0x3a>
    3bd2:	0002      	movs	r2, r0
    3bd4:	465c      	mov	r4, fp
    3bd6:	328d      	adds	r2, #141	; 0x8d
    3bd8:	32ff      	adds	r2, #255	; 0xff
    3bda:	6811      	ldr	r1, [r2, #0]
    3bdc:	430c      	orrs	r4, r1
    3bde:	6014      	str	r4, [r2, #0]
    3be0:	e7b3      	b.n	3b4a <__register_exitproc+0x3a>
    3be2:	0020      	movs	r0, r4
    3be4:	304d      	adds	r0, #77	; 0x4d
    3be6:	30ff      	adds	r0, #255	; 0xff
    3be8:	50e0      	str	r0, [r4, r3]
    3bea:	e7a7      	b.n	3b3c <__register_exitproc+0x2c>
    3bec:	6828      	ldr	r0, [r5, #0]
    3bee:	f7ff ff8d 	bl	3b0c <__retarget_lock_release_recursive>
    3bf2:	2001      	movs	r0, #1
    3bf4:	4240      	negs	r0, r0
    3bf6:	e7b1      	b.n	3b5c <__register_exitproc+0x4c>
    3bf8:	200004a8 	.word	0x200004a8
    3bfc:	00003d28 	.word	0x00003d28
    3c00:	00000000 	.word	0x00000000
    3c04:	682f2e2e 	.word	0x682f2e2e
    3c08:	732f6c61 	.word	0x732f6c61
    3c0c:	682f6372 	.word	0x682f6372
    3c10:	695f6c61 	.word	0x695f6c61
    3c14:	00632e6f 	.word	0x00632e6f
    3c18:	682f2e2e 	.word	0x682f2e2e
    3c1c:	732f6c61 	.word	0x732f6c61
    3c20:	682f6372 	.word	0x682f6372
    3c24:	735f6c61 	.word	0x735f6c61
    3c28:	6d5f6970 	.word	0x6d5f6970
    3c2c:	7973615f 	.word	0x7973615f
    3c30:	632e636e 	.word	0x632e636e
    3c34:	00000000 	.word	0x00000000
    3c38:	682f2e2e 	.word	0x682f2e2e
    3c3c:	732f6c70 	.word	0x732f6c70
    3c40:	6f637265 	.word	0x6f637265
    3c44:	70682f6d 	.word	0x70682f6d
    3c48:	65735f6c 	.word	0x65735f6c
    3c4c:	6d6f6372 	.word	0x6d6f6372
    3c50:	0000632e 	.word	0x0000632e
    3c54:	00002000 	.word	0x00002000

00003c58 <_usb_ep_cfgs>:
    3c58:	2000070c 00000000 00000040 200006cc     ... ....@...... 
    3c68:	00000000 00000040 2000068c 00000000     ....@...... ....
    3c78:	00000040 682f2e2e 732f6c61 682f6372     @...../hal/src/h
    3c88:	755f6c61 74726173 7973615f 632e636e     al_usart_async.c
    3c98:	00000000 682f2e2e 752f6c61 736c6974     ....../hal/utils
    3ca8:	6372732f 6974752f 725f736c 62676e69     /src/utils_ringb
    3cb8:	65666675 00632e72 00003688 00003370     uffer.c..6..p3..
    3cc8:	00003688 000033a2 00003688 000032c6     .6...3...6...2..
    3cd8:	00003688 00003688 00003688 000032da     .6...6...6...2..
    3ce8:	00003688 000033d6 752f2e2e 642f6273     .6...3..../usb/d
    3cf8:	63697665 73752f65 2e636462 00000063     evice/usbdc.c...
    3d08:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    3d18:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...

00003d28 <_global_impure_ptr>:
    3d28:	20000080                                ... 

00003d2c <_init>:
    3d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d2e:	46c0      	nop			; (mov r8, r8)
    3d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d32:	bc08      	pop	{r3}
    3d34:	469e      	mov	lr, r3
    3d36:	4770      	bx	lr

00003d38 <__init_array_start>:
    3d38:	00003aad 	.word	0x00003aad

00003d3c <__frame_dummy_init_array_entry>:
    3d3c:	000000dd                                ....

00003d40 <_fini>:
    3d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d42:	46c0      	nop			; (mov r8, r8)
    3d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d46:	bc08      	pop	{r3}
    3d48:	469e      	mov	lr, r3
    3d4a:	4770      	bx	lr

00003d4c <__fini_array_start>:
    3d4c:	000000b5 	.word	0x000000b5
