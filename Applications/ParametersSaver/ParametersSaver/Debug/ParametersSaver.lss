
ParametersSaver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cd0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00004cd0  00004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000004b4  20000000  00004cd8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000498  200004b4  0000518c  000204b4  2**2
                  ALLOC
  4 .stack        00002004  2000094c  00005624  000204b4  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000204b4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204dc  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003b726  00000000  00000000  00020535  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004d93  00000000  00000000  0005bc5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00015b08  00000000  00000000  000609ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001030  00000000  00000000  000764f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001948  00000000  00000000  00077526  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020811  00000000  00000000  00078e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016f72  00000000  00000000  0009967f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008fb15  00000000  00000000  000b05f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002e2c  00000000  00000000  00140108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 29 00 20 15 01 00 00 0d 02 00 00 0d 02 00 00     P). ............
	...
      2c:	0d 02 00 00 00 00 00 00 00 00 00 00 0d 02 00 00     ................
      3c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      4c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      5c:	59 38 00 00 0d 02 00 00 41 22 00 00 0d 02 00 00     Y8......A"......
      6c:	91 22 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ."..............
      7c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      8c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      9c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
      ac:	0d 02 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004b4 	.word	0x200004b4
      d4:	00000000 	.word	0x00000000
      d8:	00004cd8 	.word	0x00004cd8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004b8 	.word	0x200004b8
     108:	00004cd8 	.word	0x00004cd8
     10c:	00004cd8 	.word	0x00004cd8
     110:	00000000 	.word	0x00000000

00000114 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     11a:	4b2f      	ldr	r3, [pc, #188]	; (1d8 <Reset_Handler+0xc4>)
     11c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     11e:	4b2f      	ldr	r3, [pc, #188]	; (1dc <Reset_Handler+0xc8>)
     120:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     122:	687a      	ldr	r2, [r7, #4]
     124:	683b      	ldr	r3, [r7, #0]
     126:	429a      	cmp	r2, r3
     128:	d00c      	beq.n	144 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     12a:	e007      	b.n	13c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     12c:	683b      	ldr	r3, [r7, #0]
     12e:	1d1a      	adds	r2, r3, #4
     130:	603a      	str	r2, [r7, #0]
     132:	687a      	ldr	r2, [r7, #4]
     134:	1d11      	adds	r1, r2, #4
     136:	6079      	str	r1, [r7, #4]
     138:	6812      	ldr	r2, [r2, #0]
     13a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     13c:	683a      	ldr	r2, [r7, #0]
     13e:	4b28      	ldr	r3, [pc, #160]	; (1e0 <Reset_Handler+0xcc>)
     140:	429a      	cmp	r2, r3
     142:	d3f3      	bcc.n	12c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     144:	4b27      	ldr	r3, [pc, #156]	; (1e4 <Reset_Handler+0xd0>)
     146:	603b      	str	r3, [r7, #0]
     148:	e004      	b.n	154 <Reset_Handler+0x40>
                *pDest++ = 0;
     14a:	683b      	ldr	r3, [r7, #0]
     14c:	1d1a      	adds	r2, r3, #4
     14e:	603a      	str	r2, [r7, #0]
     150:	2200      	movs	r2, #0
     152:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     154:	683a      	ldr	r2, [r7, #0]
     156:	4b24      	ldr	r3, [pc, #144]	; (1e8 <Reset_Handler+0xd4>)
     158:	429a      	cmp	r2, r3
     15a:	d3f6      	bcc.n	14a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xd8>)
     15e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     160:	4b23      	ldr	r3, [pc, #140]	; (1f0 <Reset_Handler+0xdc>)
     162:	687a      	ldr	r2, [r7, #4]
     164:	21ff      	movs	r1, #255	; 0xff
     166:	438a      	bics	r2, r1
     168:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16a:	4a22      	ldr	r2, [pc, #136]	; (1f4 <Reset_Handler+0xe0>)
     16c:	2390      	movs	r3, #144	; 0x90
     16e:	005b      	lsls	r3, r3, #1
     170:	2102      	movs	r1, #2
     172:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     174:	4a20      	ldr	r2, [pc, #128]	; (1f8 <Reset_Handler+0xe4>)
     176:	78d3      	ldrb	r3, [r2, #3]
     178:	2103      	movs	r1, #3
     17a:	438b      	bics	r3, r1
     17c:	1c19      	adds	r1, r3, #0
     17e:	2302      	movs	r3, #2
     180:	430b      	orrs	r3, r1
     182:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     184:	4a1c      	ldr	r2, [pc, #112]	; (1f8 <Reset_Handler+0xe4>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	210c      	movs	r1, #12
     18a:	438b      	bics	r3, r1
     18c:	1c19      	adds	r1, r3, #0
     18e:	2308      	movs	r3, #8
     190:	430b      	orrs	r3, r1
     192:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     194:	4a19      	ldr	r2, [pc, #100]	; (1fc <Reset_Handler+0xe8>)
     196:	7b93      	ldrb	r3, [r2, #14]
     198:	2130      	movs	r1, #48	; 0x30
     19a:	438b      	bics	r3, r1
     19c:	1c19      	adds	r1, r3, #0
     19e:	2320      	movs	r3, #32
     1a0:	430b      	orrs	r3, r1
     1a2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a4:	4a15      	ldr	r2, [pc, #84]	; (1fc <Reset_Handler+0xe8>)
     1a6:	7b93      	ldrb	r3, [r2, #14]
     1a8:	210c      	movs	r1, #12
     1aa:	438b      	bics	r3, r1
     1ac:	1c19      	adds	r1, r3, #0
     1ae:	2308      	movs	r3, #8
     1b0:	430b      	orrs	r3, r1
     1b2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	4a11      	ldr	r2, [pc, #68]	; (1fc <Reset_Handler+0xe8>)
     1b6:	7b93      	ldrb	r3, [r2, #14]
     1b8:	2103      	movs	r1, #3
     1ba:	438b      	bics	r3, r1
     1bc:	1c19      	adds	r1, r3, #0
     1be:	2302      	movs	r3, #2
     1c0:	430b      	orrs	r3, r1
     1c2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0e      	ldr	r2, [pc, #56]	; (200 <Reset_Handler+0xec>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ce:	4b0d      	ldr	r3, [pc, #52]	; (204 <Reset_Handler+0xf0>)
     1d0:	4798      	blx	r3

        /* Branch to main function */
        main();
     1d2:	4b0d      	ldr	r3, [pc, #52]	; (208 <Reset_Handler+0xf4>)
     1d4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xc2>
     1d8:	00004cd8 	.word	0x00004cd8
     1dc:	20000000 	.word	0x20000000
     1e0:	200004b4 	.word	0x200004b4
     1e4:	200004b4 	.word	0x200004b4
     1e8:	2000094c 	.word	0x2000094c
     1ec:	00000000 	.word	0x00000000
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	41007000 	.word	0x41007000
     1f8:	41005000 	.word	0x41005000
     1fc:	41004800 	.word	0x41004800
     200:	41004000 	.word	0x41004000
     204:	00004845 	.word	0x00004845
     208:	000002fd 	.word	0x000002fd

0000020c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     20c:	b580      	push	{r7, lr}
     20e:	af00      	add	r7, sp, #0
        while (1) {
     210:	e7fe      	b.n	210 <Dummy_Handler+0x4>

00000212 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     212:	b580      	push	{r7, lr}
     214:	b084      	sub	sp, #16
     216:	af00      	add	r7, sp, #0
     218:	60f8      	str	r0, [r7, #12]
     21a:	607a      	str	r2, [r7, #4]
     21c:	230b      	movs	r3, #11
     21e:	18fb      	adds	r3, r7, r3
     220:	1c0a      	adds	r2, r1, #0
     222:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     224:	230b      	movs	r3, #11
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	68fa      	ldr	r2, [r7, #12]
     22c:	01db      	lsls	r3, r3, #7
     22e:	18d3      	adds	r3, r2, r3
     230:	3318      	adds	r3, #24
     232:	687a      	ldr	r2, [r7, #4]
     234:	601a      	str	r2, [r3, #0]
}
     236:	46c0      	nop			; (mov r8, r8)
     238:	46bd      	mov	sp, r7
     23a:	b004      	add	sp, #16
     23c:	bd80      	pop	{r7, pc}

0000023e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     23e:	b580      	push	{r7, lr}
     240:	b084      	sub	sp, #16
     242:	af00      	add	r7, sp, #0
     244:	60f8      	str	r0, [r7, #12]
     246:	607a      	str	r2, [r7, #4]
     248:	230b      	movs	r3, #11
     24a:	18fb      	adds	r3, r7, r3
     24c:	1c0a      	adds	r2, r1, #0
     24e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     250:	230b      	movs	r3, #11
     252:	18fb      	adds	r3, r7, r3
     254:	781b      	ldrb	r3, [r3, #0]
     256:	68fa      	ldr	r2, [r7, #12]
     258:	01db      	lsls	r3, r3, #7
     25a:	18d3      	adds	r3, r2, r3
     25c:	3314      	adds	r3, #20
     25e:	687a      	ldr	r2, [r7, #4]
     260:	601a      	str	r2, [r3, #0]
}
     262:	46c0      	nop			; (mov r8, r8)
     264:	46bd      	mov	sp, r7
     266:	b004      	add	sp, #16
     268:	bd80      	pop	{r7, pc}
	...

0000026c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     26c:	b580      	push	{r7, lr}
     26e:	b082      	sub	sp, #8
     270:	af00      	add	r7, sp, #0
     272:	6039      	str	r1, [r7, #0]
     274:	0011      	movs	r1, r2
     276:	1dfb      	adds	r3, r7, #7
     278:	1c02      	adds	r2, r0, #0
     27a:	701a      	strb	r2, [r3, #0]
     27c:	1dbb      	adds	r3, r7, #6
     27e:	1c0a      	adds	r2, r1, #0
     280:	701a      	strb	r2, [r3, #0]
	if (level) {
     282:	1dbb      	adds	r3, r7, #6
     284:	781b      	ldrb	r3, [r3, #0]
     286:	2b00      	cmp	r3, #0
     288:	d008      	beq.n	29c <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     28a:	683a      	ldr	r2, [r7, #0]
     28c:	1dfb      	adds	r3, r7, #7
     28e:	7819      	ldrb	r1, [r3, #0]
     290:	23c0      	movs	r3, #192	; 0xc0
     292:	05db      	lsls	r3, r3, #23
     294:	0018      	movs	r0, r3
     296:	4b07      	ldr	r3, [pc, #28]	; (2b4 <_gpio_set_level+0x48>)
     298:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     29a:	e007      	b.n	2ac <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     29c:	683a      	ldr	r2, [r7, #0]
     29e:	1dfb      	adds	r3, r7, #7
     2a0:	7819      	ldrb	r1, [r3, #0]
     2a2:	23c0      	movs	r3, #192	; 0xc0
     2a4:	05db      	lsls	r3, r3, #23
     2a6:	0018      	movs	r0, r3
     2a8:	4b03      	ldr	r3, [pc, #12]	; (2b8 <_gpio_set_level+0x4c>)
     2aa:	4798      	blx	r3
}
     2ac:	46c0      	nop			; (mov r8, r8)
     2ae:	46bd      	mov	sp, r7
     2b0:	b002      	add	sp, #8
     2b2:	bd80      	pop	{r7, pc}
     2b4:	00000213 	.word	0x00000213
     2b8:	0000023f 	.word	0x0000023f

000002bc <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     2bc:	b580      	push	{r7, lr}
     2be:	b082      	sub	sp, #8
     2c0:	af00      	add	r7, sp, #0
     2c2:	0002      	movs	r2, r0
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	701a      	strb	r2, [r3, #0]
     2c8:	1dbb      	adds	r3, r7, #6
     2ca:	1c0a      	adds	r2, r1, #0
     2cc:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     2ce:	1dfb      	adds	r3, r7, #7
     2d0:	781b      	ldrb	r3, [r3, #0]
     2d2:	115b      	asrs	r3, r3, #5
     2d4:	b2d8      	uxtb	r0, r3
     2d6:	1dfb      	adds	r3, r7, #7
     2d8:	781b      	ldrb	r3, [r3, #0]
     2da:	001a      	movs	r2, r3
     2dc:	231f      	movs	r3, #31
     2de:	4013      	ands	r3, r2
     2e0:	2201      	movs	r2, #1
     2e2:	409a      	lsls	r2, r3
     2e4:	0011      	movs	r1, r2
     2e6:	1dbb      	adds	r3, r7, #6
     2e8:	781b      	ldrb	r3, [r3, #0]
     2ea:	001a      	movs	r2, r3
     2ec:	4b02      	ldr	r3, [pc, #8]	; (2f8 <gpio_set_pin_level+0x3c>)
     2ee:	4798      	blx	r3
}
     2f0:	46c0      	nop			; (mov r8, r8)
     2f2:	46bd      	mov	sp, r7
     2f4:	b002      	add	sp, #8
     2f6:	bd80      	pop	{r7, pc}
     2f8:	0000026d 	.word	0x0000026d

000002fc <main>:
#include "Usart_Asyn_Class.h"

static uint8_t		banner[]="The Parameters are: \r\n";

int main(void)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	4f42      	ldr	r7, [pc, #264]	; (408 <main+0x10c>)
     300:	44bd      	add	sp, r7
     302:	af00      	add	r7, sp, #0
		atmel_start_init();
     304:	4b41      	ldr	r3, [pc, #260]	; (40c <main+0x110>)
     306:	4798      	blx	r3
		
		userParameters	oldParameters, storedParameters, newParameters;
		FRAM_Memory_Class	cypress;
     308:	23dc      	movs	r3, #220	; 0xdc
     30a:	18fb      	adds	r3, r7, r3
     30c:	0018      	movs	r0, r3
     30e:	4b40      	ldr	r3, [pc, #256]	; (410 <main+0x114>)
     310:	4798      	blx	r3
		Usart_Asyn_Class	usart0(0);
     312:	237c      	movs	r3, #124	; 0x7c
     314:	18fb      	adds	r3, r7, r3
     316:	2100      	movs	r1, #0
     318:	0018      	movs	r0, r3
     31a:	4b3e      	ldr	r3, [pc, #248]	; (414 <main+0x118>)
     31c:	4798      	blx	r3
		
				
		
	
		oldParameters	 =	defaultParameters;
     31e:	2397      	movs	r3, #151	; 0x97
     320:	009b      	lsls	r3, r3, #2
     322:	18fa      	adds	r2, r7, r3
     324:	4b3c      	ldr	r3, [pc, #240]	; (418 <main+0x11c>)
     326:	0010      	movs	r0, r2
     328:	0019      	movs	r1, r3
     32a:	237c      	movs	r3, #124	; 0x7c
     32c:	001a      	movs	r2, r3
     32e:	4b3b      	ldr	r3, [pc, #236]	; (41c <main+0x120>)
     330:	4798      	blx	r3
		uint8_t		dataToSend[sizeof(oldParameters)];

		cypress.init(&oldParameters);
     332:	2397      	movs	r3, #151	; 0x97
     334:	009b      	lsls	r3, r3, #2
     336:	18fa      	adds	r2, r7, r3
     338:	23dc      	movs	r3, #220	; 0xdc
     33a:	18fb      	adds	r3, r7, r3
     33c:	0011      	movs	r1, r2
     33e:	0018      	movs	r0, r3
     340:	4b37      	ldr	r3, [pc, #220]	; (420 <main+0x124>)
     342:	4798      	blx	r3
		cypress.flushParameters(&oldParameters);
     344:	2397      	movs	r3, #151	; 0x97
     346:	009b      	lsls	r3, r3, #2
     348:	18fa      	adds	r2, r7, r3
     34a:	23dc      	movs	r3, #220	; 0xdc
     34c:	18fb      	adds	r3, r7, r3
     34e:	0011      	movs	r1, r2
     350:	0018      	movs	r0, r3
     352:	4b34      	ldr	r3, [pc, #208]	; (424 <main+0x128>)
     354:	4798      	blx	r3
		usart0.init();
     356:	237c      	movs	r3, #124	; 0x7c
     358:	18fb      	adds	r3, r7, r3
     35a:	0018      	movs	r0, r3
     35c:	4b32      	ldr	r3, [pc, #200]	; (428 <main+0x12c>)
     35e:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
		cypress.readParameters(&storedParameters);
     360:	23f0      	movs	r3, #240	; 0xf0
     362:	005b      	lsls	r3, r3, #1
     364:	18fa      	adds	r2, r7, r3
     366:	23dc      	movs	r3, #220	; 0xdc
     368:	18fb      	adds	r3, r7, r3
     36a:	0011      	movs	r1, r2
     36c:	0018      	movs	r0, r3
     36e:	4b2f      	ldr	r3, [pc, #188]	; (42c <main+0x130>)
     370:	4798      	blx	r3
		delay_ms(500);
     372:	23fa      	movs	r3, #250	; 0xfa
     374:	005b      	lsls	r3, r3, #1
     376:	0018      	movs	r0, r3
     378:	4b2d      	ldr	r3, [pc, #180]	; (430 <main+0x134>)
     37a:	4798      	blx	r3
		gpio_set_pin_level(Read_OK,false);
     37c:	2100      	movs	r1, #0
     37e:	2003      	movs	r0, #3
     380:	4b2c      	ldr	r3, [pc, #176]	; (434 <main+0x138>)
     382:	4798      	blx	r3
		gpio_set_pin_level(Read_Fail,false);
     384:	2100      	movs	r1, #0
     386:	2002      	movs	r0, #2
     388:	4b2a      	ldr	r3, [pc, #168]	; (434 <main+0x138>)
     38a:	4798      	blx	r3
		gpio_set_pin_level(Write_Fail,false);
     38c:	2100      	movs	r1, #0
     38e:	2029      	movs	r0, #41	; 0x29
     390:	4b28      	ldr	r3, [pc, #160]	; (434 <main+0x138>)
     392:	4798      	blx	r3
		gpio_set_pin_level(Write_OK,false);
     394:	2100      	movs	r1, #0
     396:	2004      	movs	r0, #4
     398:	4b26      	ldr	r3, [pc, #152]	; (434 <main+0x138>)
     39a:	4798      	blx	r3
		memcpy(&dataToSend,&storedParameters,sizeof(storedParameters));
     39c:	4b1a      	ldr	r3, [pc, #104]	; (408 <main+0x10c>)
     39e:	22b6      	movs	r2, #182	; 0xb6
     3a0:	0092      	lsls	r2, r2, #2
     3a2:	18ba      	adds	r2, r7, r2
     3a4:	18d2      	adds	r2, r2, r3
     3a6:	23f0      	movs	r3, #240	; 0xf0
     3a8:	005b      	lsls	r3, r3, #1
     3aa:	18fb      	adds	r3, r7, r3
     3ac:	0010      	movs	r0, r2
     3ae:	0019      	movs	r1, r3
     3b0:	237c      	movs	r3, #124	; 0x7c
     3b2:	001a      	movs	r2, r3
     3b4:	4b19      	ldr	r3, [pc, #100]	; (41c <main+0x120>)
     3b6:	4798      	blx	r3
		usart0.enable();
     3b8:	237c      	movs	r3, #124	; 0x7c
     3ba:	18fb      	adds	r3, r7, r3
     3bc:	0018      	movs	r0, r3
     3be:	4b1e      	ldr	r3, [pc, #120]	; (438 <main+0x13c>)
     3c0:	4798      	blx	r3
		usart0.write(banner,sizeof(banner));
     3c2:	491e      	ldr	r1, [pc, #120]	; (43c <main+0x140>)
     3c4:	237c      	movs	r3, #124	; 0x7c
     3c6:	18fb      	adds	r3, r7, r3
     3c8:	2217      	movs	r2, #23
     3ca:	0018      	movs	r0, r3
     3cc:	4b1c      	ldr	r3, [pc, #112]	; (440 <main+0x144>)
     3ce:	4798      	blx	r3
		usart0.write(dataToSend,sizeof(storedParameters));
     3d0:	0039      	movs	r1, r7
     3d2:	237c      	movs	r3, #124	; 0x7c
     3d4:	18fb      	adds	r3, r7, r3
     3d6:	227c      	movs	r2, #124	; 0x7c
     3d8:	0018      	movs	r0, r3
     3da:	4b19      	ldr	r3, [pc, #100]	; (440 <main+0x144>)
     3dc:	4798      	blx	r3
		delay_ms(500);
     3de:	23fa      	movs	r3, #250	; 0xfa
     3e0:	005b      	lsls	r3, r3, #1
     3e2:	0018      	movs	r0, r3
     3e4:	4b12      	ldr	r3, [pc, #72]	; (430 <main+0x134>)
     3e6:	4798      	blx	r3
		usart0.disable();
     3e8:	237c      	movs	r3, #124	; 0x7c
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	0018      	movs	r0, r3
     3ee:	4b15      	ldr	r3, [pc, #84]	; (444 <main+0x148>)
     3f0:	4798      	blx	r3
		cypress.flushParameters(&oldParameters);
     3f2:	2397      	movs	r3, #151	; 0x97
     3f4:	009b      	lsls	r3, r3, #2
     3f6:	18fa      	adds	r2, r7, r3
     3f8:	23dc      	movs	r3, #220	; 0xdc
     3fa:	18fb      	adds	r3, r7, r3
     3fc:	0011      	movs	r1, r2
     3fe:	0018      	movs	r0, r3
     400:	4b08      	ldr	r3, [pc, #32]	; (424 <main+0x128>)
     402:	4798      	blx	r3
		cypress.readParameters(&storedParameters);
     404:	e7ac      	b.n	360 <main+0x64>
     406:	46c0      	nop			; (mov r8, r8)
     408:	fffffd28 	.word	0xfffffd28
     40c:	00000cb5 	.word	0x00000cb5
     410:	00000531 	.word	0x00000531
     414:	00000bb9 	.word	0x00000bb9
     418:	00004afc 	.word	0x00004afc
     41c:	0000488d 	.word	0x0000488d
     420:	00000571 	.word	0x00000571
     424:	000005dd 	.word	0x000005dd
     428:	00000c65 	.word	0x00000c65
     42c:	00000651 	.word	0x00000651
     430:	000010b9 	.word	0x000010b9
     434:	000002bd 	.word	0x000002bd
     438:	00000be1 	.word	0x00000be1
     43c:	20000004 	.word	0x20000004
     440:	00000c29 	.word	0x00000c29
     444:	00000c45 	.word	0x00000c45

00000448 <hri_port_set_OUT_reg>:
{
     448:	b580      	push	{r7, lr}
     44a:	b084      	sub	sp, #16
     44c:	af00      	add	r7, sp, #0
     44e:	60f8      	str	r0, [r7, #12]
     450:	607a      	str	r2, [r7, #4]
     452:	230b      	movs	r3, #11
     454:	18fb      	adds	r3, r7, r3
     456:	1c0a      	adds	r2, r1, #0
     458:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     45a:	230b      	movs	r3, #11
     45c:	18fb      	adds	r3, r7, r3
     45e:	781b      	ldrb	r3, [r3, #0]
     460:	68fa      	ldr	r2, [r7, #12]
     462:	01db      	lsls	r3, r3, #7
     464:	18d3      	adds	r3, r2, r3
     466:	3318      	adds	r3, #24
     468:	687a      	ldr	r2, [r7, #4]
     46a:	601a      	str	r2, [r3, #0]
}
     46c:	46c0      	nop			; (mov r8, r8)
     46e:	46bd      	mov	sp, r7
     470:	b004      	add	sp, #16
     472:	bd80      	pop	{r7, pc}

00000474 <hri_port_clear_OUT_reg>:
{
     474:	b580      	push	{r7, lr}
     476:	b084      	sub	sp, #16
     478:	af00      	add	r7, sp, #0
     47a:	60f8      	str	r0, [r7, #12]
     47c:	607a      	str	r2, [r7, #4]
     47e:	230b      	movs	r3, #11
     480:	18fb      	adds	r3, r7, r3
     482:	1c0a      	adds	r2, r1, #0
     484:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     486:	230b      	movs	r3, #11
     488:	18fb      	adds	r3, r7, r3
     48a:	781b      	ldrb	r3, [r3, #0]
     48c:	68fa      	ldr	r2, [r7, #12]
     48e:	01db      	lsls	r3, r3, #7
     490:	18d3      	adds	r3, r2, r3
     492:	3314      	adds	r3, #20
     494:	687a      	ldr	r2, [r7, #4]
     496:	601a      	str	r2, [r3, #0]
}
     498:	46c0      	nop			; (mov r8, r8)
     49a:	46bd      	mov	sp, r7
     49c:	b004      	add	sp, #16
     49e:	bd80      	pop	{r7, pc}

000004a0 <_gpio_set_level>:
{
     4a0:	b580      	push	{r7, lr}
     4a2:	b082      	sub	sp, #8
     4a4:	af00      	add	r7, sp, #0
     4a6:	6039      	str	r1, [r7, #0]
     4a8:	0011      	movs	r1, r2
     4aa:	1dfb      	adds	r3, r7, #7
     4ac:	1c02      	adds	r2, r0, #0
     4ae:	701a      	strb	r2, [r3, #0]
     4b0:	1dbb      	adds	r3, r7, #6
     4b2:	1c0a      	adds	r2, r1, #0
     4b4:	701a      	strb	r2, [r3, #0]
	if (level) {
     4b6:	1dbb      	adds	r3, r7, #6
     4b8:	781b      	ldrb	r3, [r3, #0]
     4ba:	2b00      	cmp	r3, #0
     4bc:	d008      	beq.n	4d0 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     4be:	683a      	ldr	r2, [r7, #0]
     4c0:	1dfb      	adds	r3, r7, #7
     4c2:	7819      	ldrb	r1, [r3, #0]
     4c4:	23c0      	movs	r3, #192	; 0xc0
     4c6:	05db      	lsls	r3, r3, #23
     4c8:	0018      	movs	r0, r3
     4ca:	4b07      	ldr	r3, [pc, #28]	; (4e8 <_gpio_set_level+0x48>)
     4cc:	4798      	blx	r3
}
     4ce:	e007      	b.n	4e0 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     4d0:	683a      	ldr	r2, [r7, #0]
     4d2:	1dfb      	adds	r3, r7, #7
     4d4:	7819      	ldrb	r1, [r3, #0]
     4d6:	23c0      	movs	r3, #192	; 0xc0
     4d8:	05db      	lsls	r3, r3, #23
     4da:	0018      	movs	r0, r3
     4dc:	4b03      	ldr	r3, [pc, #12]	; (4ec <_gpio_set_level+0x4c>)
     4de:	4798      	blx	r3
}
     4e0:	46c0      	nop			; (mov r8, r8)
     4e2:	46bd      	mov	sp, r7
     4e4:	b002      	add	sp, #8
     4e6:	bd80      	pop	{r7, pc}
     4e8:	00000449 	.word	0x00000449
     4ec:	00000475 	.word	0x00000475

000004f0 <gpio_set_pin_level>:
{
     4f0:	b580      	push	{r7, lr}
     4f2:	b082      	sub	sp, #8
     4f4:	af00      	add	r7, sp, #0
     4f6:	0002      	movs	r2, r0
     4f8:	1dfb      	adds	r3, r7, #7
     4fa:	701a      	strb	r2, [r3, #0]
     4fc:	1dbb      	adds	r3, r7, #6
     4fe:	1c0a      	adds	r2, r1, #0
     500:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     502:	1dfb      	adds	r3, r7, #7
     504:	781b      	ldrb	r3, [r3, #0]
     506:	115b      	asrs	r3, r3, #5
     508:	b2d8      	uxtb	r0, r3
     50a:	1dfb      	adds	r3, r7, #7
     50c:	781b      	ldrb	r3, [r3, #0]
     50e:	001a      	movs	r2, r3
     510:	231f      	movs	r3, #31
     512:	4013      	ands	r3, r2
     514:	2201      	movs	r2, #1
     516:	409a      	lsls	r2, r3
     518:	0011      	movs	r1, r2
     51a:	1dbb      	adds	r3, r7, #6
     51c:	781b      	ldrb	r3, [r3, #0]
     51e:	001a      	movs	r2, r3
     520:	4b02      	ldr	r3, [pc, #8]	; (52c <gpio_set_pin_level+0x3c>)
     522:	4798      	blx	r3
}
     524:	46c0      	nop			; (mov r8, r8)
     526:	46bd      	mov	sp, r7
     528:	b002      	add	sp, #8
     52a:	bd80      	pop	{r7, pc}
     52c:	000004a1 	.word	0x000004a1

00000530 <_ZN17FRAM_Memory_ClassC1Ev>:

#include "FRAM_Memory_Class.h"
#include "SPI_Asyn_Class.h"

// default constructor
FRAM_Memory_Class::FRAM_Memory_Class()
     530:	b580      	push	{r7, lr}
     532:	b082      	sub	sp, #8
     534:	af00      	add	r7, sp, #0
     536:	6078      	str	r0, [r7, #4]
{
		appParameters=defaultParameters;
     538:	687b      	ldr	r3, [r7, #4]
     53a:	4a0a      	ldr	r2, [pc, #40]	; (564 <_ZN17FRAM_Memory_ClassC1Ev+0x34>)
     53c:	3304      	adds	r3, #4
     53e:	0011      	movs	r1, r2
     540:	227c      	movs	r2, #124	; 0x7c
     542:	0018      	movs	r0, r3
     544:	4b08      	ldr	r3, [pc, #32]	; (568 <_ZN17FRAM_Memory_ClassC1Ev+0x38>)
     546:	4798      	blx	r3
		spiPort=0;
     548:	687b      	ldr	r3, [r7, #4]
     54a:	2280      	movs	r2, #128	; 0x80
     54c:	2100      	movs	r1, #0
     54e:	5499      	strb	r1, [r3, r2]
		memory=framMemory;
     550:	4b06      	ldr	r3, [pc, #24]	; (56c <_ZN17FRAM_Memory_ClassC1Ev+0x3c>)
     552:	681a      	ldr	r2, [r3, #0]
     554:	687b      	ldr	r3, [r7, #4]
     556:	601a      	str	r2, [r3, #0]
} //FRAM_Memory_Class
     558:	687b      	ldr	r3, [r7, #4]
     55a:	0018      	movs	r0, r3
     55c:	46bd      	mov	sp, r7
     55e:	b002      	add	sp, #8
     560:	bd80      	pop	{r7, pc}
     562:	46c0      	nop			; (mov r8, r8)
     564:	00004afc 	.word	0x00004afc
     568:	0000488d 	.word	0x0000488d
     56c:	200004d0 	.word	0x200004d0

00000570 <_ZN17FRAM_Memory_Class4initEP14userParameters>:
	spiPort=0;
	memory=framMemory;
}


void	FRAM_Memory_Class::init(userParameters* p){
     570:	b580      	push	{r7, lr}
     572:	b082      	sub	sp, #8
     574:	af00      	add	r7, sp, #0
     576:	6078      	str	r0, [r7, #4]
     578:	6039      	str	r1, [r7, #0]
		appParameters=*p;
     57a:	687b      	ldr	r3, [r7, #4]
     57c:	683a      	ldr	r2, [r7, #0]
     57e:	3304      	adds	r3, #4
     580:	0011      	movs	r1, r2
     582:	227c      	movs	r2, #124	; 0x7c
     584:	0018      	movs	r0, r3
     586:	4b0f      	ldr	r3, [pc, #60]	; (5c4 <_ZN17FRAM_Memory_Class4initEP14userParameters+0x54>)
     588:	4798      	blx	r3
		spiPort=0;
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	2280      	movs	r2, #128	; 0x80
     58e:	2100      	movs	r1, #0
     590:	5499      	strb	r1, [r3, r2]
	memory=0x00;
     592:	687b      	ldr	r3, [r7, #4]
     594:	2200      	movs	r2, #0
     596:	601a      	str	r2, [r3, #0]
	
	spi0.init();
     598:	4b0b      	ldr	r3, [pc, #44]	; (5c8 <_ZN17FRAM_Memory_Class4initEP14userParameters+0x58>)
     59a:	0018      	movs	r0, r3
     59c:	4b0b      	ldr	r3, [pc, #44]	; (5cc <_ZN17FRAM_Memory_Class4initEP14userParameters+0x5c>)
     59e:	4798      	blx	r3
	flashOpen();
     5a0:	687b      	ldr	r3, [r7, #4]
     5a2:	0018      	movs	r0, r3
     5a4:	4b0a      	ldr	r3, [pc, #40]	; (5d0 <_ZN17FRAM_Memory_Class4initEP14userParameters+0x60>)
     5a6:	4798      	blx	r3
	WriteStatusRegister(0x00);
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	2100      	movs	r1, #0
     5ac:	0018      	movs	r0, r3
     5ae:	4b09      	ldr	r3, [pc, #36]	; (5d4 <_ZN17FRAM_Memory_Class4initEP14userParameters+0x64>)
     5b0:	4798      	blx	r3
	flashClose();
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	0018      	movs	r0, r3
     5b6:	4b08      	ldr	r3, [pc, #32]	; (5d8 <_ZN17FRAM_Memory_Class4initEP14userParameters+0x68>)
     5b8:	4798      	blx	r3
	
}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	46bd      	mov	sp, r7
     5be:	b002      	add	sp, #8
     5c0:	bd80      	pop	{r7, pc}
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	0000488d 	.word	0x0000488d
     5c8:	200004d4 	.word	0x200004d4
     5cc:	00000ae1 	.word	0x00000ae1
     5d0:	000006d5 	.word	0x000006d5
     5d4:	000009c5 	.word	0x000009c5
     5d8:	00000a15 	.word	0x00000a15

000005dc <_ZN17FRAM_Memory_Class15flushParametersEP14userParameters>:
	writeFRAM((uint32_t)&memory->parameters, &appData, sizeof(userParameters));
	flashClose();
	gpio_set_pin_level(Write_OK,true);
}
void FRAM_Memory_Class::flushParameters(userParameters *data)
{
     5dc:	b590      	push	{r4, r7, lr}
     5de:	b0a3      	sub	sp, #140	; 0x8c
     5e0:	af00      	add	r7, sp, #0
     5e2:	6078      	str	r0, [r7, #4]
     5e4:	6039      	str	r1, [r7, #0]
	gpio_set_pin_level(Write_Fail,true);
     5e6:	2101      	movs	r1, #1
     5e8:	2029      	movs	r0, #41	; 0x29
     5ea:	4b14      	ldr	r3, [pc, #80]	; (63c <_ZN17FRAM_Memory_Class15flushParametersEP14userParameters+0x60>)
     5ec:	4798      	blx	r3
	userParameters	appData;
	appData=*data;
     5ee:	230c      	movs	r3, #12
     5f0:	18fa      	adds	r2, r7, r3
     5f2:	683b      	ldr	r3, [r7, #0]
     5f4:	0010      	movs	r0, r2
     5f6:	0019      	movs	r1, r3
     5f8:	237c      	movs	r3, #124	; 0x7c
     5fa:	001a      	movs	r2, r3
     5fc:	4b10      	ldr	r3, [pc, #64]	; (640 <_ZN17FRAM_Memory_Class15flushParametersEP14userParameters+0x64>)
     5fe:	4798      	blx	r3
	flashOpen();
     600:	687b      	ldr	r3, [r7, #4]
     602:	0018      	movs	r0, r3
     604:	4b0f      	ldr	r3, [pc, #60]	; (644 <_ZN17FRAM_Memory_Class15flushParametersEP14userParameters+0x68>)
     606:	4798      	blx	r3
	
	//eraseFlash((uint32_t)&memory->parameters, sizeof(userParameters));
	writeFRAM((uint32_t)&memory->parameters, &appData, sizeof(userParameters));
     608:	687b      	ldr	r3, [r7, #4]
     60a:	681b      	ldr	r3, [r3, #0]
     60c:	2280      	movs	r2, #128	; 0x80
     60e:	00d2      	lsls	r2, r2, #3
     610:	4694      	mov	ip, r2
     612:	4463      	add	r3, ip
     614:	0019      	movs	r1, r3
     616:	230c      	movs	r3, #12
     618:	18fa      	adds	r2, r7, r3
     61a:	6878      	ldr	r0, [r7, #4]
     61c:	237c      	movs	r3, #124	; 0x7c
     61e:	4c0a      	ldr	r4, [pc, #40]	; (648 <_ZN17FRAM_Memory_Class15flushParametersEP14userParameters+0x6c>)
     620:	47a0      	blx	r4
	flashClose();
     622:	687b      	ldr	r3, [r7, #4]
     624:	0018      	movs	r0, r3
     626:	4b09      	ldr	r3, [pc, #36]	; (64c <_ZN17FRAM_Memory_Class15flushParametersEP14userParameters+0x70>)
     628:	4798      	blx	r3
	gpio_set_pin_level(Write_OK,true);
     62a:	2101      	movs	r1, #1
     62c:	2004      	movs	r0, #4
     62e:	4b03      	ldr	r3, [pc, #12]	; (63c <_ZN17FRAM_Memory_Class15flushParametersEP14userParameters+0x60>)
     630:	4798      	blx	r3
}
     632:	46c0      	nop			; (mov r8, r8)
     634:	46bd      	mov	sp, r7
     636:	b023      	add	sp, #140	; 0x8c
     638:	bd90      	pop	{r4, r7, pc}
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	000004f1 	.word	0x000004f1
     640:	0000488d 	.word	0x0000488d
     644:	000006d5 	.word	0x000006d5
     648:	00000871 	.word	0x00000871
     64c:	00000a15 	.word	0x00000a15

00000650 <_ZN17FRAM_Memory_Class14readParametersEP14userParameters>:
		memcpy(data, &appParameters, sizeof(userParameters));
		
	}
}
void FRAM_Memory_Class::readParameters(userParameters *framParameters)
{
     650:	b590      	push	{r4, r7, lr}
     652:	b0a3      	sub	sp, #140	; 0x8c
     654:	af00      	add	r7, sp, #0
     656:	6078      	str	r0, [r7, #4]
     658:	6039      	str	r1, [r7, #0]
	userParameters	appData;

	flashOpen();
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	0018      	movs	r0, r3
     65e:	4b16      	ldr	r3, [pc, #88]	; (6b8 <_ZN17FRAM_Memory_Class14readParametersEP14userParameters+0x68>)
     660:	4798      	blx	r3
	readFRAM(&appData, (uint32_t)&memory->parameters, sizeof(userParameters));
     662:	687b      	ldr	r3, [r7, #4]
     664:	681b      	ldr	r3, [r3, #0]
     666:	2280      	movs	r2, #128	; 0x80
     668:	00d2      	lsls	r2, r2, #3
     66a:	4694      	mov	ip, r2
     66c:	4463      	add	r3, ip
     66e:	001a      	movs	r2, r3
     670:	230c      	movs	r3, #12
     672:	18f9      	adds	r1, r7, r3
     674:	6878      	ldr	r0, [r7, #4]
     676:	237c      	movs	r3, #124	; 0x7c
     678:	4c10      	ldr	r4, [pc, #64]	; (6bc <_ZN17FRAM_Memory_Class14readParametersEP14userParameters+0x6c>)
     67a:	47a0      	blx	r4
	flashClose();
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	0018      	movs	r0, r3
     680:	4b0f      	ldr	r3, [pc, #60]	; (6c0 <_ZN17FRAM_Memory_Class14readParametersEP14userParameters+0x70>)
     682:	4798      	blx	r3

	if  ((appData.deployParkingLimit == 4600)){
     684:	230c      	movs	r3, #12
     686:	18fb      	adds	r3, r7, r3
     688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     68a:	4b0e      	ldr	r3, [pc, #56]	; (6c4 <_ZN17FRAM_Memory_Class14readParametersEP14userParameters+0x74>)
     68c:	490e      	ldr	r1, [pc, #56]	; (6c8 <_ZN17FRAM_Memory_Class14readParametersEP14userParameters+0x78>)
     68e:	1c10      	adds	r0, r2, #0
     690:	4798      	blx	r3
     692:	1e03      	subs	r3, r0, #0
     694:	d100      	bne.n	698 <_ZN17FRAM_Memory_Class14readParametersEP14userParameters+0x48>
		memcpy(framParameters, &appData, sizeof(userParameters));
		gpio_set_pin_level(Read_OK,true);
		
		
	}
}
     696:	e00a      	b.n	6ae <_ZN17FRAM_Memory_Class14readParametersEP14userParameters+0x5e>
		memcpy(framParameters, &appData, sizeof(userParameters));
     698:	230c      	movs	r3, #12
     69a:	18f9      	adds	r1, r7, r3
     69c:	683b      	ldr	r3, [r7, #0]
     69e:	227c      	movs	r2, #124	; 0x7c
     6a0:	0018      	movs	r0, r3
     6a2:	4b0a      	ldr	r3, [pc, #40]	; (6cc <_ZN17FRAM_Memory_Class14readParametersEP14userParameters+0x7c>)
     6a4:	4798      	blx	r3
		gpio_set_pin_level(Read_OK,true);
     6a6:	2101      	movs	r1, #1
     6a8:	2003      	movs	r0, #3
     6aa:	4b09      	ldr	r3, [pc, #36]	; (6d0 <_ZN17FRAM_Memory_Class14readParametersEP14userParameters+0x80>)
     6ac:	4798      	blx	r3
}
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	46bd      	mov	sp, r7
     6b2:	b023      	add	sp, #140	; 0x8c
     6b4:	bd90      	pop	{r4, r7, pc}
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	000006d5 	.word	0x000006d5
     6bc:	000006f5 	.word	0x000006f5
     6c0:	00000a15 	.word	0x00000a15
     6c4:	00004689 	.word	0x00004689
     6c8:	458fc000 	.word	0x458fc000
     6cc:	0000488d 	.word	0x0000488d
     6d0:	000004f1 	.word	0x000004f1

000006d4 <_ZN17FRAM_Memory_Class9flashOpenEv>:
}



void FRAM_Memory_Class::flashOpen(void)
{
     6d4:	b580      	push	{r7, lr}
     6d6:	b082      	sub	sp, #8
     6d8:	af00      	add	r7, sp, #0
     6da:	6078      	str	r0, [r7, #4]
	spi0.enable();
     6dc:	4b03      	ldr	r3, [pc, #12]	; (6ec <_ZN17FRAM_Memory_Class9flashOpenEv+0x18>)
     6de:	0018      	movs	r0, r3
     6e0:	4b03      	ldr	r3, [pc, #12]	; (6f0 <_ZN17FRAM_Memory_Class9flashOpenEv+0x1c>)
     6e2:	4798      	blx	r3
	
	
}
     6e4:	46c0      	nop			; (mov r8, r8)
     6e6:	46bd      	mov	sp, r7
     6e8:	b002      	add	sp, #8
     6ea:	bd80      	pop	{r7, pc}
     6ec:	200004d4 	.word	0x200004d4
     6f0:	00000b19 	.word	0x00000b19

000006f4 <_ZN17FRAM_Memory_Class8readFRAMEPvmm>:
uint8_t FRAM_Memory_Class::readFRAM(void* dest, uint32_t src, uint32_t size)
{
     6f4:	b580      	push	{r7, lr}
     6f6:	b084      	sub	sp, #16
     6f8:	af00      	add	r7, sp, #0
     6fa:	60f8      	str	r0, [r7, #12]
     6fc:	60b9      	str	r1, [r7, #8]
     6fe:	607a      	str	r2, [r7, #4]
     700:	603b      	str	r3, [r7, #0]
	CE_Low_FRAM();
     702:	68fb      	ldr	r3, [r7, #12]
     704:	0018      	movs	r0, r3
     706:	4b14      	ldr	r3, [pc, #80]	; (758 <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x64>)
     708:	4798      	blx	r3
	Send_Byte(kFlashRead);
     70a:	68fb      	ldr	r3, [r7, #12]
     70c:	2103      	movs	r1, #3
     70e:	0018      	movs	r0, r3
     710:	4b12      	ldr	r3, [pc, #72]	; (75c <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x68>)
     712:	4798      	blx	r3
	//	send 3 address bytes
	//Send_Byte(((src & 0xFFFFFF) >> 16));
	Send_Byte(((src & 0xFFFF) >> 8));
     714:	687b      	ldr	r3, [r7, #4]
     716:	0a1b      	lsrs	r3, r3, #8
     718:	b2da      	uxtb	r2, r3
     71a:	68fb      	ldr	r3, [r7, #12]
     71c:	0011      	movs	r1, r2
     71e:	0018      	movs	r0, r3
     720:	4b0e      	ldr	r3, [pc, #56]	; (75c <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x68>)
     722:	4798      	blx	r3
	Send_Byte(src & 0xFF);
     724:	687b      	ldr	r3, [r7, #4]
     726:	b2da      	uxtb	r2, r3
     728:	68fb      	ldr	r3, [r7, #12]
     72a:	0011      	movs	r1, r2
     72c:	0018      	movs	r0, r3
     72e:	4b0b      	ldr	r3, [pc, #44]	; (75c <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x68>)
     730:	4798      	blx	r3
	spi0.read((uint8_t *)dest, (uint16_t)size);
     732:	683b      	ldr	r3, [r7, #0]
     734:	b29b      	uxth	r3, r3
     736:	001a      	movs	r2, r3
     738:	68b9      	ldr	r1, [r7, #8]
     73a:	4b09      	ldr	r3, [pc, #36]	; (760 <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x6c>)
     73c:	0018      	movs	r0, r3
     73e:	4b09      	ldr	r3, [pc, #36]	; (764 <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x70>)
     740:	4798      	blx	r3
	CE_High_FRAM();
     742:	68fb      	ldr	r3, [r7, #12]
     744:	0018      	movs	r0, r3
     746:	4b08      	ldr	r3, [pc, #32]	; (768 <_ZN17FRAM_Memory_Class8readFRAMEPvmm+0x74>)
     748:	4798      	blx	r3
	return (uint8_t)src;
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	b2db      	uxtb	r3, r3
}
     74e:	0018      	movs	r0, r3
     750:	46bd      	mov	sp, r7
     752:	b004      	add	sp, #16
     754:	bd80      	pop	{r7, pc}
     756:	46c0      	nop			; (mov r8, r8)
     758:	0000076d 	.word	0x0000076d
     75c:	000007a5 	.word	0x000007a5
     760:	200004d4 	.word	0x200004d4
     764:	00000b6d 	.word	0x00000b6d
     768:	00000789 	.word	0x00000789

0000076c <_ZN17FRAM_Memory_Class11CE_Low_FRAMEv>:
void FRAM_Memory_Class::CE_Low_FRAM(void)
{
     76c:	b580      	push	{r7, lr}
     76e:	b082      	sub	sp, #8
     770:	af00      	add	r7, sp, #0
     772:	6078      	str	r0, [r7, #4]
		gpio_set_pin_level(Flash_CS,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
     774:	2100      	movs	r1, #0
     776:	201b      	movs	r0, #27
     778:	4b02      	ldr	r3, [pc, #8]	; (784 <_ZN17FRAM_Memory_Class11CE_Low_FRAMEv+0x18>)
     77a:	4798      	blx	r3
}
     77c:	46c0      	nop			; (mov r8, r8)
     77e:	46bd      	mov	sp, r7
     780:	b002      	add	sp, #8
     782:	bd80      	pop	{r7, pc}
     784:	000004f1 	.word	0x000004f1

00000788 <_ZN17FRAM_Memory_Class12CE_High_FRAMEv>:

void FRAM_Memory_Class::CE_High_FRAM(void)
{
     788:	b580      	push	{r7, lr}
     78a:	b082      	sub	sp, #8
     78c:	af00      	add	r7, sp, #0
     78e:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(Flash_CS,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
     790:	2101      	movs	r1, #1
     792:	201b      	movs	r0, #27
     794:	4b02      	ldr	r3, [pc, #8]	; (7a0 <_ZN17FRAM_Memory_Class12CE_High_FRAMEv+0x18>)
     796:	4798      	blx	r3
}
     798:	46c0      	nop			; (mov r8, r8)
     79a:	46bd      	mov	sp, r7
     79c:	b002      	add	sp, #8
     79e:	bd80      	pop	{r7, pc}
     7a0:	000004f1 	.word	0x000004f1

000007a4 <_ZN17FRAM_Memory_Class9Send_ByteEh>:
uint8_t FRAM_Memory_Class::Send_Byte(uint8_t byte)
{
     7a4:	b580      	push	{r7, lr}
     7a6:	b082      	sub	sp, #8
     7a8:	af00      	add	r7, sp, #0
     7aa:	6078      	str	r0, [r7, #4]
     7ac:	000a      	movs	r2, r1
     7ae:	1cfb      	adds	r3, r7, #3
     7b0:	701a      	strb	r2, [r3, #0]
	
	spi0.write(&byte,1);
     7b2:	1cf9      	adds	r1, r7, #3
     7b4:	4b05      	ldr	r3, [pc, #20]	; (7cc <_ZN17FRAM_Memory_Class9Send_ByteEh+0x28>)
     7b6:	2201      	movs	r2, #1
     7b8:	0018      	movs	r0, r3
     7ba:	4b05      	ldr	r3, [pc, #20]	; (7d0 <_ZN17FRAM_Memory_Class9Send_ByteEh+0x2c>)
     7bc:	4798      	blx	r3
	return byte;
     7be:	1cfb      	adds	r3, r7, #3
     7c0:	781b      	ldrb	r3, [r3, #0]
}
     7c2:	0018      	movs	r0, r3
     7c4:	46bd      	mov	sp, r7
     7c6:	b002      	add	sp, #8
     7c8:	bd80      	pop	{r7, pc}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	200004d4 	.word	0x200004d4
     7d0:	00000b51 	.word	0x00000b51

000007d4 <_ZN17FRAM_Memory_Class8Get_ByteEv>:

uint8_t FRAM_Memory_Class::Get_Byte(void)
{
     7d4:	b580      	push	{r7, lr}
     7d6:	b084      	sub	sp, #16
     7d8:	af00      	add	r7, sp, #0
     7da:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	spi0.read(&byte,1);
     7dc:	230f      	movs	r3, #15
     7de:	18f9      	adds	r1, r7, r3
     7e0:	4b05      	ldr	r3, [pc, #20]	; (7f8 <_ZN17FRAM_Memory_Class8Get_ByteEv+0x24>)
     7e2:	2201      	movs	r2, #1
     7e4:	0018      	movs	r0, r3
     7e6:	4b05      	ldr	r3, [pc, #20]	; (7fc <_ZN17FRAM_Memory_Class8Get_ByteEv+0x28>)
     7e8:	4798      	blx	r3
	
	return byte;
     7ea:	230f      	movs	r3, #15
     7ec:	18fb      	adds	r3, r7, r3
     7ee:	781b      	ldrb	r3, [r3, #0]
}
     7f0:	0018      	movs	r0, r3
     7f2:	46bd      	mov	sp, r7
     7f4:	b004      	add	sp, #16
     7f6:	bd80      	pop	{r7, pc}
     7f8:	200004d4 	.word	0x200004d4
     7fc:	00000b6d 	.word	0x00000b6d

00000800 <_ZN17FRAM_Memory_Class4WRENEv>:

void FRAM_Memory_Class::WREN(void)
{
     800:	b580      	push	{r7, lr}
     802:	b082      	sub	sp, #8
     804:	af00      	add	r7, sp, #0
     806:	6078      	str	r0, [r7, #4]
	CE_Low_FRAM();			// enable device
     808:	687b      	ldr	r3, [r7, #4]
     80a:	0018      	movs	r0, r3
     80c:	4b07      	ldr	r3, [pc, #28]	; (82c <_ZN17FRAM_Memory_Class4WRENEv+0x2c>)
     80e:	4798      	blx	r3
	Send_Byte(kFlashWREnable);	// send WREN command
     810:	687b      	ldr	r3, [r7, #4]
     812:	2106      	movs	r1, #6
     814:	0018      	movs	r0, r3
     816:	4b06      	ldr	r3, [pc, #24]	; (830 <_ZN17FRAM_Memory_Class4WRENEv+0x30>)
     818:	4798      	blx	r3
	CE_High_FRAM();			// disable device
     81a:	687b      	ldr	r3, [r7, #4]
     81c:	0018      	movs	r0, r3
     81e:	4b05      	ldr	r3, [pc, #20]	; (834 <_ZN17FRAM_Memory_Class4WRENEv+0x34>)
     820:	4798      	blx	r3
}
     822:	46c0      	nop			; (mov r8, r8)
     824:	46bd      	mov	sp, r7
     826:	b002      	add	sp, #8
     828:	bd80      	pop	{r7, pc}
     82a:	46c0      	nop			; (mov r8, r8)
     82c:	0000076d 	.word	0x0000076d
     830:	000007a5 	.word	0x000007a5
     834:	00000789 	.word	0x00000789

00000838 <_ZN17FRAM_Memory_Class4WRDIEv>:


void FRAM_Memory_Class::WRDI(void)
{
     838:	b580      	push	{r7, lr}
     83a:	b082      	sub	sp, #8
     83c:	af00      	add	r7, sp, #0
     83e:	6078      	str	r0, [r7, #4]
	CE_Low_FRAM();			// enable device
     840:	687b      	ldr	r3, [r7, #4]
     842:	0018      	movs	r0, r3
     844:	4b07      	ldr	r3, [pc, #28]	; (864 <_ZN17FRAM_Memory_Class4WRDIEv+0x2c>)
     846:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
     848:	687b      	ldr	r3, [r7, #4]
     84a:	2104      	movs	r1, #4
     84c:	0018      	movs	r0, r3
     84e:	4b06      	ldr	r3, [pc, #24]	; (868 <_ZN17FRAM_Memory_Class4WRDIEv+0x30>)
     850:	4798      	blx	r3
	CE_High_FRAM();			// disable device
     852:	687b      	ldr	r3, [r7, #4]
     854:	0018      	movs	r0, r3
     856:	4b05      	ldr	r3, [pc, #20]	; (86c <_ZN17FRAM_Memory_Class4WRDIEv+0x34>)
     858:	4798      	blx	r3
}
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	46bd      	mov	sp, r7
     85e:	b002      	add	sp, #8
     860:	bd80      	pop	{r7, pc}
     862:	46c0      	nop			; (mov r8, r8)
     864:	0000076d 	.word	0x0000076d
     868:	000007a5 	.word	0x000007a5
     86c:	00000789 	.word	0x00000789

00000870 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm>:
uint8_t FRAM_Memory_Class::writeFRAM(uint32_t dest, const void* src, uint32_t size){
     870:	b580      	push	{r7, lr}
     872:	b086      	sub	sp, #24
     874:	af00      	add	r7, sp, #0
     876:	60f8      	str	r0, [r7, #12]
     878:	60b9      	str	r1, [r7, #8]
     87a:	607a      	str	r2, [r7, #4]
     87c:	603b      	str	r3, [r7, #0]
	const uint8_t*	srcPtr = (const uint8_t*)src;
     87e:	687b      	ldr	r3, [r7, #4]
     880:	617b      	str	r3, [r7, #20]
		WREN();
     882:	68fb      	ldr	r3, [r7, #12]
     884:	0018      	movs	r0, r3
     886:	4b33      	ldr	r3, [pc, #204]	; (954 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xe4>)
     888:	4798      	blx	r3
		
		while ((ReadStatusRegister()&0x02)==0);
     88a:	68fb      	ldr	r3, [r7, #12]
     88c:	0018      	movs	r0, r3
     88e:	4b32      	ldr	r3, [pc, #200]	; (958 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xe8>)
     890:	4798      	blx	r3
     892:	0003      	movs	r3, r0
     894:	001a      	movs	r2, r3
     896:	2302      	movs	r3, #2
     898:	4013      	ands	r3, r2
     89a:	425a      	negs	r2, r3
     89c:	4153      	adcs	r3, r2
     89e:	b2db      	uxtb	r3, r3
     8a0:	2b00      	cmp	r3, #0
     8a2:	d000      	beq.n	8a6 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0x36>
     8a4:	e7f1      	b.n	88a <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0x1a>
	
	while (size > 0){
     8a6:	683b      	ldr	r3, [r7, #0]
     8a8:	2b00      	cmp	r3, #0
     8aa:	d04c      	beq.n	946 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xd6>
		uint16_t	i;
		

		
		CE_Low_FRAM();
     8ac:	68fb      	ldr	r3, [r7, #12]
     8ae:	0018      	movs	r0, r3
     8b0:	4b2a      	ldr	r3, [pc, #168]	; (95c <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xec>)
     8b2:	4798      	blx	r3
		Send_Byte(kFRAMWrite);
     8b4:	68fb      	ldr	r3, [r7, #12]
     8b6:	2102      	movs	r1, #2
     8b8:	0018      	movs	r0, r3
     8ba:	4b29      	ldr	r3, [pc, #164]	; (960 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xf0>)
     8bc:	4798      	blx	r3
		//Send_Byte(((dest & 0xFFFFFF) >> 16));
		Send_Byte(((dest & 0xFFFF) >> 8));
     8be:	68bb      	ldr	r3, [r7, #8]
     8c0:	0a1b      	lsrs	r3, r3, #8
     8c2:	b2da      	uxtb	r2, r3
     8c4:	68fb      	ldr	r3, [r7, #12]
     8c6:	0011      	movs	r1, r2
     8c8:	0018      	movs	r0, r3
     8ca:	4b25      	ldr	r3, [pc, #148]	; (960 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xf0>)
     8cc:	4798      	blx	r3
		Send_Byte(dest & 0xFF);
     8ce:	68bb      	ldr	r3, [r7, #8]
     8d0:	b2da      	uxtb	r2, r3
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	0011      	movs	r1, r2
     8d6:	0018      	movs	r0, r3
     8d8:	4b21      	ldr	r3, [pc, #132]	; (960 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xf0>)
     8da:	4798      	blx	r3
	
		for (i=0; (i < 256) && (i<size); i++){
     8dc:	2312      	movs	r3, #18
     8de:	18fb      	adds	r3, r7, r3
     8e0:	2200      	movs	r2, #0
     8e2:	801a      	strh	r2, [r3, #0]
     8e4:	2312      	movs	r3, #18
     8e6:	18fb      	adds	r3, r7, r3
     8e8:	881b      	ldrh	r3, [r3, #0]
     8ea:	2bff      	cmp	r3, #255	; 0xff
     8ec:	dc16      	bgt.n	91c <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xac>
     8ee:	2312      	movs	r3, #18
     8f0:	18fb      	adds	r3, r7, r3
     8f2:	881a      	ldrh	r2, [r3, #0]
     8f4:	683b      	ldr	r3, [r7, #0]
     8f6:	429a      	cmp	r2, r3
     8f8:	d210      	bcs.n	91c <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xac>
			Send_Byte(*srcPtr++);
     8fa:	697b      	ldr	r3, [r7, #20]
     8fc:	1c5a      	adds	r2, r3, #1
     8fe:	617a      	str	r2, [r7, #20]
     900:	781a      	ldrb	r2, [r3, #0]
     902:	68fb      	ldr	r3, [r7, #12]
     904:	0011      	movs	r1, r2
     906:	0018      	movs	r0, r3
     908:	4b15      	ldr	r3, [pc, #84]	; (960 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xf0>)
     90a:	4798      	blx	r3
		for (i=0; (i < 256) && (i<size); i++){
     90c:	2312      	movs	r3, #18
     90e:	18fb      	adds	r3, r7, r3
     910:	881a      	ldrh	r2, [r3, #0]
     912:	2312      	movs	r3, #18
     914:	18fb      	adds	r3, r7, r3
     916:	3201      	adds	r2, #1
     918:	801a      	strh	r2, [r3, #0]
     91a:	e7e3      	b.n	8e4 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0x74>
		}
		CE_High_FRAM();
     91c:	68fb      	ldr	r3, [r7, #12]
     91e:	0018      	movs	r0, r3
     920:	4b10      	ldr	r3, [pc, #64]	; (964 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xf4>)
     922:	4798      	blx	r3
		WRDI();
     924:	68fb      	ldr	r3, [r7, #12]
     926:	0018      	movs	r0, r3
     928:	4b0f      	ldr	r3, [pc, #60]	; (968 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0xf8>)
     92a:	4798      	blx	r3
		size -= i;
     92c:	2312      	movs	r3, #18
     92e:	18fb      	adds	r3, r7, r3
     930:	881b      	ldrh	r3, [r3, #0]
     932:	683a      	ldr	r2, [r7, #0]
     934:	1ad3      	subs	r3, r2, r3
     936:	603b      	str	r3, [r7, #0]
		dest += i;
     938:	2312      	movs	r3, #18
     93a:	18fb      	adds	r3, r7, r3
     93c:	881b      	ldrh	r3, [r3, #0]
     93e:	68ba      	ldr	r2, [r7, #8]
     940:	18d3      	adds	r3, r2, r3
     942:	60bb      	str	r3, [r7, #8]
	while (size > 0){
     944:	e7af      	b.n	8a6 <_ZN17FRAM_Memory_Class9writeFRAMEmPKvm+0x36>
		}
		return *srcPtr;
     946:	697b      	ldr	r3, [r7, #20]
     948:	781b      	ldrb	r3, [r3, #0]

	}
     94a:	0018      	movs	r0, r3
     94c:	46bd      	mov	sp, r7
     94e:	b006      	add	sp, #24
     950:	bd80      	pop	{r7, pc}
     952:	46c0      	nop			; (mov r8, r8)
     954:	00000801 	.word	0x00000801
     958:	0000096d 	.word	0x0000096d
     95c:	0000076d 	.word	0x0000076d
     960:	000007a5 	.word	0x000007a5
     964:	00000789 	.word	0x00000789
     968:	00000839 	.word	0x00000839

0000096c <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv>:
		uint8_t	status = ReadStatusRegister();
		
		while ((status & kFlashRead) == kFlashRead)	// waste time until not busy
		status = ReadStatusRegister();
	}
uint8_t  FRAM_Memory_Class::ReadStatusRegister(void){
     96c:	b590      	push	{r4, r7, lr}
     96e:	b085      	sub	sp, #20
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
		uint8_t byte = 0;
     974:	230f      	movs	r3, #15
     976:	18fb      	adds	r3, r7, r3
     978:	2200      	movs	r2, #0
     97a:	701a      	strb	r2, [r3, #0]
		CE_Low_FRAM();			// enable device
     97c:	687b      	ldr	r3, [r7, #4]
     97e:	0018      	movs	r0, r3
     980:	4b0c      	ldr	r3, [pc, #48]	; (9b4 <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv+0x48>)
     982:	4798      	blx	r3
		Send_Byte(kFlashReadSR);	// send RDSR command
     984:	687b      	ldr	r3, [r7, #4]
     986:	2105      	movs	r1, #5
     988:	0018      	movs	r0, r3
     98a:	4b0b      	ldr	r3, [pc, #44]	; (9b8 <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv+0x4c>)
     98c:	4798      	blx	r3
		byte = Get_Byte();		/* receive byte */
     98e:	230f      	movs	r3, #15
     990:	18fc      	adds	r4, r7, r3
     992:	687b      	ldr	r3, [r7, #4]
     994:	0018      	movs	r0, r3
     996:	4b09      	ldr	r3, [pc, #36]	; (9bc <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv+0x50>)
     998:	4798      	blx	r3
     99a:	0003      	movs	r3, r0
     99c:	7023      	strb	r3, [r4, #0]
		CE_High_FRAM();			// disable device
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	0018      	movs	r0, r3
     9a2:	4b07      	ldr	r3, [pc, #28]	; (9c0 <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv+0x54>)
     9a4:	4798      	blx	r3
		return byte;
     9a6:	230f      	movs	r3, #15
     9a8:	18fb      	adds	r3, r7, r3
     9aa:	781b      	ldrb	r3, [r3, #0]
	}
     9ac:	0018      	movs	r0, r3
     9ae:	46bd      	mov	sp, r7
     9b0:	b005      	add	sp, #20
     9b2:	bd90      	pop	{r4, r7, pc}
     9b4:	0000076d 	.word	0x0000076d
     9b8:	000007a5 	.word	0x000007a5
     9bc:	000007d5 	.word	0x000007d5
     9c0:	00000789 	.word	0x00000789

000009c4 <_ZN17FRAM_Memory_Class19WriteStatusRegisterEh>:
uint8_t  FRAM_Memory_Class::WriteStatusRegister(uint8_t byte){
     9c4:	b580      	push	{r7, lr}
     9c6:	b082      	sub	sp, #8
     9c8:	af00      	add	r7, sp, #0
     9ca:	6078      	str	r0, [r7, #4]
     9cc:	000a      	movs	r2, r1
     9ce:	1cfb      	adds	r3, r7, #3
     9d0:	701a      	strb	r2, [r3, #0]
		
		CE_Low_FRAM();			// enable device
     9d2:	687b      	ldr	r3, [r7, #4]
     9d4:	0018      	movs	r0, r3
     9d6:	4b0c      	ldr	r3, [pc, #48]	; (a08 <_ZN17FRAM_Memory_Class19WriteStatusRegisterEh+0x44>)
     9d8:	4798      	blx	r3
		Send_Byte(kFlashWriteSR);	// send RDSR command
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	2101      	movs	r1, #1
     9de:	0018      	movs	r0, r3
     9e0:	4b0a      	ldr	r3, [pc, #40]	; (a0c <_ZN17FRAM_Memory_Class19WriteStatusRegisterEh+0x48>)
     9e2:	4798      	blx	r3
		Send_Byte(byte);
     9e4:	1cfb      	adds	r3, r7, #3
     9e6:	781a      	ldrb	r2, [r3, #0]
     9e8:	687b      	ldr	r3, [r7, #4]
     9ea:	0011      	movs	r1, r2
     9ec:	0018      	movs	r0, r3
     9ee:	4b07      	ldr	r3, [pc, #28]	; (a0c <_ZN17FRAM_Memory_Class19WriteStatusRegisterEh+0x48>)
     9f0:	4798      	blx	r3
		CE_High_FRAM();			// disable device
     9f2:	687b      	ldr	r3, [r7, #4]
     9f4:	0018      	movs	r0, r3
     9f6:	4b06      	ldr	r3, [pc, #24]	; (a10 <_ZN17FRAM_Memory_Class19WriteStatusRegisterEh+0x4c>)
     9f8:	4798      	blx	r3
		return byte;
     9fa:	1cfb      	adds	r3, r7, #3
     9fc:	781b      	ldrb	r3, [r3, #0]
	}
     9fe:	0018      	movs	r0, r3
     a00:	46bd      	mov	sp, r7
     a02:	b002      	add	sp, #8
     a04:	bd80      	pop	{r7, pc}
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	0000076d 	.word	0x0000076d
     a0c:	000007a5 	.word	0x000007a5
     a10:	00000789 	.word	0x00000789

00000a14 <_ZN17FRAM_Memory_Class10flashCloseEv>:
void FRAM_Memory_Class::flashClose(void){
     a14:	b580      	push	{r7, lr}
     a16:	b082      	sub	sp, #8
     a18:	af00      	add	r7, sp, #0
     a1a:	6078      	str	r0, [r7, #4]
	
		spi0.disable();
     a1c:	4b03      	ldr	r3, [pc, #12]	; (a2c <_ZN17FRAM_Memory_Class10flashCloseEv+0x18>)
     a1e:	0018      	movs	r0, r3
     a20:	4b03      	ldr	r3, [pc, #12]	; (a30 <_ZN17FRAM_Memory_Class10flashCloseEv+0x1c>)
     a22:	4798      	blx	r3
	}
     a24:	46c0      	nop			; (mov r8, r8)
     a26:	46bd      	mov	sp, r7
     a28:	b002      	add	sp, #8
     a2a:	bd80      	pop	{r7, pc}
     a2c:	200004d4 	.word	0x200004d4
     a30:	00000b89 	.word	0x00000b89

00000a34 <_Z41__static_initialization_and_destruction_0ii>:
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
	Send_Byte(((Dst & 0xFFFF) >> 8));
	Send_Byte(Dst & 0xFF);
	CE_High_FRAM();				// disable device
     a34:	b580      	push	{r7, lr}
     a36:	b082      	sub	sp, #8
     a38:	af00      	add	r7, sp, #0
     a3a:	6078      	str	r0, [r7, #4]
     a3c:	6039      	str	r1, [r7, #0]
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	2b01      	cmp	r3, #1
     a42:	d10e      	bne.n	a62 <_Z41__static_initialization_and_destruction_0ii+0x2e>
     a44:	683b      	ldr	r3, [r7, #0]
     a46:	4a09      	ldr	r2, [pc, #36]	; (a6c <_Z41__static_initialization_and_destruction_0ii+0x38>)
     a48:	4293      	cmp	r3, r2
     a4a:	d10a      	bne.n	a62 <_Z41__static_initialization_and_destruction_0ii+0x2e>
SPI_Asyn_Class FRAM_Memory_Class::spi0(0);
     a4c:	4b08      	ldr	r3, [pc, #32]	; (a70 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     a4e:	2100      	movs	r1, #0
     a50:	0018      	movs	r0, r3
     a52:	4b08      	ldr	r3, [pc, #32]	; (a74 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     a54:	4798      	blx	r3
     a56:	4a08      	ldr	r2, [pc, #32]	; (a78 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     a58:	4908      	ldr	r1, [pc, #32]	; (a7c <_Z41__static_initialization_and_destruction_0ii+0x48>)
     a5a:	4b05      	ldr	r3, [pc, #20]	; (a70 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     a5c:	0018      	movs	r0, r3
     a5e:	4b08      	ldr	r3, [pc, #32]	; (a80 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     a60:	4798      	blx	r3
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	46bd      	mov	sp, r7
     a66:	b002      	add	sp, #8
     a68:	bd80      	pop	{r7, pc}
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	0000ffff 	.word	0x0000ffff
     a70:	200004d4 	.word	0x200004d4
     a74:	00000ab9 	.word	0x00000ab9
     a78:	20000000 	.word	0x20000000
     a7c:	00000ab5 	.word	0x00000ab5
     a80:	00004661 	.word	0x00004661

00000a84 <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev>:
     a84:	b580      	push	{r7, lr}
     a86:	af00      	add	r7, sp, #0
     a88:	4b03      	ldr	r3, [pc, #12]	; (a98 <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev+0x14>)
     a8a:	0019      	movs	r1, r3
     a8c:	2001      	movs	r0, #1
     a8e:	4b03      	ldr	r3, [pc, #12]	; (a9c <_GLOBAL__sub_I__ZN17FRAM_Memory_ClassC2Ev+0x18>)
     a90:	4798      	blx	r3
     a92:	46bd      	mov	sp, r7
     a94:	bd80      	pop	{r7, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	0000ffff 	.word	0x0000ffff
     a9c:	00000a35 	.word	0x00000a35

00000aa0 <_ZL17complete_cb_SPI_0PK22spi_m_async_descriptor>:
static void complete_cb_SPI_0(const struct spi_m_async_descriptor *const io_descr)
{
	//SPI_Asyn_Class spiHandler;
	//ptrSPIClass=pSPIClass;
	//ptrSPIClass->ready=true;
	asm("nop");
     aa0:	46c0      	nop			; (mov r8, r8)
	ptrSPIClass->setSPIReady();
     aa2:	4b03      	ldr	r3, [pc, #12]	; (ab0 <_ZL17complete_cb_SPI_0PK22spi_m_async_descriptor+0x10>)
     aa4:	681b      	ldr	r3, [r3, #0]
	spi_m_async_disable(&SPI0);
	
}
void  SPI_Asyn_Class::setSPIReady(void)
{
	ready=true;
     aa6:	2201      	movs	r2, #1
     aa8:	701a      	strb	r2, [r3, #0]
	ready=true;
     aaa:	701a      	strb	r2, [r3, #0]
	asm("nop");
     aac:	46c0      	nop			; (mov r8, r8)
}
     aae:	4770      	bx	lr
     ab0:	20000530 	.word	0x20000530

00000ab4 <_ZN14SPI_Asyn_ClassD1Ev>:
} //~SPI_Asyn_Class
     ab4:	4770      	bx	lr
	...

00000ab8 <_ZN14SPI_Asyn_ClassC1Eh>:
SPI_Asyn_Class::SPI_Asyn_Class(uint8_t p){
     ab8:	b510      	push	{r4, lr}
     aba:	0004      	movs	r4, r0
	portNumber=p;
     abc:	2350      	movs	r3, #80	; 0x50
     abe:	54c1      	strb	r1, [r0, r3]
	SPI0=SPI_0;
     ac0:	3008      	adds	r0, #8
     ac2:	2248      	movs	r2, #72	; 0x48
     ac4:	4903      	ldr	r1, [pc, #12]	; (ad4 <_ZN14SPI_Asyn_ClassC1Eh+0x1c>)
     ac6:	4b04      	ldr	r3, [pc, #16]	; (ad8 <_ZN14SPI_Asyn_ClassC1Eh+0x20>)
     ac8:	4798      	blx	r3
	ptrSPIClass=this;
     aca:	4b04      	ldr	r3, [pc, #16]	; (adc <_ZN14SPI_Asyn_ClassC1Eh+0x24>)
     acc:	601c      	str	r4, [r3, #0]
}
     ace:	0020      	movs	r0, r4
     ad0:	bd10      	pop	{r4, pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	20000890 	.word	0x20000890
     ad8:	0000488d 	.word	0x0000488d
     adc:	20000530 	.word	0x20000530

00000ae0 <_ZN14SPI_Asyn_Class4initEv>:
void SPI_Asyn_Class::init(){
     ae0:	b510      	push	{r4, lr}
     ae2:	0004      	movs	r4, r0
	SPI_0_CLOCK_init();
     ae4:	4b07      	ldr	r3, [pc, #28]	; (b04 <_ZN14SPI_Asyn_Class4initEv+0x24>)
     ae6:	4798      	blx	r3
	spi_m_async_init(&SPI0, SERCOM0);
     ae8:	0020      	movs	r0, r4
     aea:	3008      	adds	r0, #8
     aec:	4906      	ldr	r1, [pc, #24]	; (b08 <_ZN14SPI_Asyn_Class4initEv+0x28>)
     aee:	4b07      	ldr	r3, [pc, #28]	; (b0c <_ZN14SPI_Asyn_Class4initEv+0x2c>)
     af0:	4798      	blx	r3
	SPI_0_PORT_init();
     af2:	4b07      	ldr	r3, [pc, #28]	; (b10 <_ZN14SPI_Asyn_Class4initEv+0x30>)
     af4:	4798      	blx	r3
	pSPIClass=this;
     af6:	65a4      	str	r4, [r4, #88]	; 0x58
	ptrSPIClass=pSPIClass;
     af8:	4b06      	ldr	r3, [pc, #24]	; (b14 <_ZN14SPI_Asyn_Class4initEv+0x34>)
     afa:	601c      	str	r4, [r3, #0]
	ready=true;
     afc:	2301      	movs	r3, #1
     afe:	7023      	strb	r3, [r4, #0]
}
     b00:	bd10      	pop	{r4, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	00000d85 	.word	0x00000d85
     b08:	42000800 	.word	0x42000800
     b0c:	0000133d 	.word	0x0000133d
     b10:	00000cc9 	.word	0x00000cc9
     b14:	20000530 	.word	0x20000530

00000b18 <_ZN14SPI_Asyn_Class6enableEv>:
int32_t SPI_Asyn_Class::enable(){
     b18:	b570      	push	{r4, r5, r6, lr}
     b1a:	0004      	movs	r4, r0
	spi_m_async_get_io_descriptor(&SPI0, &spio);
     b1c:	0005      	movs	r5, r0
     b1e:	3508      	adds	r5, #8
     b20:	1d01      	adds	r1, r0, #4
     b22:	0028      	movs	r0, r5
     b24:	4b06      	ldr	r3, [pc, #24]	; (b40 <_ZN14SPI_Asyn_Class6enableEv+0x28>)
     b26:	4798      	blx	r3
	spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(complete_cb_SPI_0));
     b28:	4a06      	ldr	r2, [pc, #24]	; (b44 <_ZN14SPI_Asyn_Class6enableEv+0x2c>)
     b2a:	2100      	movs	r1, #0
     b2c:	0028      	movs	r0, r5
     b2e:	4b06      	ldr	r3, [pc, #24]	; (b48 <_ZN14SPI_Asyn_Class6enableEv+0x30>)
     b30:	4798      	blx	r3
	spi_m_async_enable(&SPI0);
     b32:	0028      	movs	r0, r5
     b34:	4b05      	ldr	r3, [pc, #20]	; (b4c <_ZN14SPI_Asyn_Class6enableEv+0x34>)
     b36:	4798      	blx	r3
	ready=true;
     b38:	2301      	movs	r3, #1
     b3a:	7023      	strb	r3, [r4, #0]
}
     b3c:	2000      	movs	r0, #0
     b3e:	bd70      	pop	{r4, r5, r6, pc}
     b40:	00001479 	.word	0x00001479
     b44:	00000aa1 	.word	0x00000aa1
     b48:	00001429 	.word	0x00001429
     b4c:	000013c1 	.word	0x000013c1

00000b50 <_ZN14SPI_Asyn_Class5writeEPKhl>:
int32_t  SPI_Asyn_Class::write(const uint8_t * p, int32_t n){
     b50:	b510      	push	{r4, lr}
		while(!ready){
     b52:	7803      	ldrb	r3, [r0, #0]
     b54:	2b00      	cmp	r3, #0
     b56:	d0fc      	beq.n	b52 <_ZN14SPI_Asyn_Class5writeEPKhl+0x2>
	ready=false;
     b58:	2300      	movs	r3, #0
     b5a:	7003      	strb	r3, [r0, #0]
	w= io_write(spio,p,(uint16_t)n);
     b5c:	b292      	uxth	r2, r2
     b5e:	6840      	ldr	r0, [r0, #4]
     b60:	4b01      	ldr	r3, [pc, #4]	; (b68 <_ZN14SPI_Asyn_Class5writeEPKhl+0x18>)
     b62:	4798      	blx	r3
}
     b64:	bd10      	pop	{r4, pc}
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	000010d9 	.word	0x000010d9

00000b6c <_ZN14SPI_Asyn_Class4readEPhl>:
int32_t  SPI_Asyn_Class::read(uint8_t * p, int32_t n){
     b6c:	b510      	push	{r4, lr}
		while(!ready){
     b6e:	7803      	ldrb	r3, [r0, #0]
     b70:	2b00      	cmp	r3, #0
     b72:	d0fc      	beq.n	b6e <_ZN14SPI_Asyn_Class4readEPhl+0x2>
	ready=false;
     b74:	2300      	movs	r3, #0
     b76:	7003      	strb	r3, [r0, #0]
	r=io_read(spio,p,(uint16_t)n);
     b78:	b292      	uxth	r2, r2
     b7a:	6840      	ldr	r0, [r0, #4]
     b7c:	4b01      	ldr	r3, [pc, #4]	; (b84 <_ZN14SPI_Asyn_Class4readEPhl+0x18>)
     b7e:	4798      	blx	r3
}
     b80:	bd10      	pop	{r4, pc}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	0000110d 	.word	0x0000110d

00000b88 <_ZN14SPI_Asyn_Class7disableEv>:
void SPI_Asyn_Class::disable(void){
     b88:	b510      	push	{r4, lr}
	spi_m_async_disable(&SPI0);
     b8a:	3008      	adds	r0, #8
     b8c:	4b01      	ldr	r3, [pc, #4]	; (b94 <_ZN14SPI_Asyn_Class7disableEv+0xc>)
     b8e:	4798      	blx	r3
}
     b90:	bd10      	pop	{r4, pc}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	000013e9 	.word	0x000013e9

00000b98 <_ZL13rx_cb_USART_0PK22usart_async_descriptor>:
{
		ptrUsartClass->setUsartTxReady();
}
static void rx_cb_USART_0(const struct usart_async_descriptor *const io_descr)
{
	ptrUsartClass->setUsartRxReady();
     b98:	4b02      	ldr	r3, [pc, #8]	; (ba4 <_ZL13rx_cb_USART_0PK22usart_async_descriptor+0xc>)
     b9a:	681b      	ldr	r3, [r3, #0]

}

void  Usart_Asyn_Class::setUsartRxReady(void)
{
	rxReady=true;
     b9c:	2201      	movs	r2, #1
     b9e:	705a      	strb	r2, [r3, #1]
}
     ba0:	4770      	bx	lr
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	20000534 	.word	0x20000534

00000ba8 <_ZL13tx_cb_USART_0PK22usart_async_descriptor>:
		ptrUsartClass->setUsartTxReady();
     ba8:	4b02      	ldr	r3, [pc, #8]	; (bb4 <_ZL13tx_cb_USART_0PK22usart_async_descriptor+0xc>)
     baa:	681b      	ldr	r3, [r3, #0]
	txReady=true;
     bac:	2201      	movs	r2, #1
     bae:	701a      	strb	r2, [r3, #0]
}
     bb0:	4770      	bx	lr
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	20000534 	.word	0x20000534

00000bb8 <_ZN16Usart_Asyn_ClassC1Eh>:
Usart_Asyn_Class::Usart_Asyn_Class(uint8_t p)
     bb8:	b510      	push	{r4, lr}
     bba:	0004      	movs	r4, r0
	portNumber=p;
     bbc:	2358      	movs	r3, #88	; 0x58
     bbe:	54c1      	strb	r1, [r0, r3]
	USART0=USART_0;
     bc0:	3008      	adds	r0, #8
     bc2:	2250      	movs	r2, #80	; 0x50
     bc4:	4903      	ldr	r1, [pc, #12]	; (bd4 <_ZN16Usart_Asyn_ClassC1Eh+0x1c>)
     bc6:	4b04      	ldr	r3, [pc, #16]	; (bd8 <_ZN16Usart_Asyn_ClassC1Eh+0x20>)
     bc8:	4798      	blx	r3
	ptrUsartClass=this;
     bca:	4b04      	ldr	r3, [pc, #16]	; (bdc <_ZN16Usart_Asyn_ClassC1Eh+0x24>)
     bcc:	601c      	str	r4, [r3, #0]
} //Usart_Asyn_Class
     bce:	0020      	movs	r0, r4
     bd0:	bd10      	pop	{r4, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	200008d8 	.word	0x200008d8
     bd8:	0000488d 	.word	0x0000488d
     bdc:	20000534 	.word	0x20000534

00000be0 <_ZN16Usart_Asyn_Class6enableEv>:
int32_t Usart_Asyn_Class::enable(){
     be0:	b570      	push	{r4, r5, r6, lr}
     be2:	0004      	movs	r4, r0
	usart_async_register_callback(&USART0, USART_ASYNC_TXC_CB, tx_cb_USART_0);
     be4:	0005      	movs	r5, r0
     be6:	3508      	adds	r5, #8
     be8:	4a0a      	ldr	r2, [pc, #40]	; (c14 <_ZN16Usart_Asyn_Class6enableEv+0x34>)
     bea:	2101      	movs	r1, #1
     bec:	0028      	movs	r0, r5
     bee:	4e0a      	ldr	r6, [pc, #40]	; (c18 <_ZN16Usart_Asyn_Class6enableEv+0x38>)
     bf0:	47b0      	blx	r6
	usart_async_register_callback(&USART0, USART_ASYNC_RXC_CB, rx_cb_USART_0);
     bf2:	4a0a      	ldr	r2, [pc, #40]	; (c1c <_ZN16Usart_Asyn_Class6enableEv+0x3c>)
     bf4:	2100      	movs	r1, #0
     bf6:	0028      	movs	r0, r5
     bf8:	47b0      	blx	r6
	usart_async_get_io_descriptor(&USART0, &usartio);
     bfa:	1d21      	adds	r1, r4, #4
     bfc:	0028      	movs	r0, r5
     bfe:	4b08      	ldr	r3, [pc, #32]	; (c20 <_ZN16Usart_Asyn_Class6enableEv+0x40>)
     c00:	4798      	blx	r3
	usart_async_enable(&USART0);
     c02:	0028      	movs	r0, r5
     c04:	4b07      	ldr	r3, [pc, #28]	; (c24 <_ZN16Usart_Asyn_Class6enableEv+0x44>)
     c06:	4798      	blx	r3
	rxReady=true;
     c08:	2301      	movs	r3, #1
     c0a:	7063      	strb	r3, [r4, #1]
	txReady=true;
     c0c:	7023      	strb	r3, [r4, #0]
}
     c0e:	2000      	movs	r0, #0
     c10:	bd70      	pop	{r4, r5, r6, pc}
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	00000ba9 	.word	0x00000ba9
     c18:	00001789 	.word	0x00001789
     c1c:	00000b99 	.word	0x00000b99
     c20:	0000175d 	.word	0x0000175d
     c24:	00001705 	.word	0x00001705

00000c28 <_ZN16Usart_Asyn_Class5writeEPKhl>:
int32_t  Usart_Asyn_Class::write(const uint8_t * p, int32_t n){
     c28:	b510      	push	{r4, lr}
		while(!txReady);
     c2a:	7803      	ldrb	r3, [r0, #0]
     c2c:	2b00      	cmp	r3, #0
     c2e:	d0fc      	beq.n	c2a <_ZN16Usart_Asyn_Class5writeEPKhl+0x2>
	txReady=false;
     c30:	2300      	movs	r3, #0
     c32:	7003      	strb	r3, [r0, #0]
	w= io_write(usartio,p,(uint16_t)n);
     c34:	b292      	uxth	r2, r2
     c36:	6840      	ldr	r0, [r0, #4]
     c38:	4b01      	ldr	r3, [pc, #4]	; (c40 <_ZN16Usart_Asyn_Class5writeEPKhl+0x18>)
     c3a:	4798      	blx	r3
}
     c3c:	bd10      	pop	{r4, pc}
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	000010d9 	.word	0x000010d9

00000c44 <_ZN16Usart_Asyn_Class7disableEv>:
void Usart_Asyn_Class::disable(void){
     c44:	b510      	push	{r4, lr}
	usart_async_disable(&USART0);
     c46:	3008      	adds	r0, #8
     c48:	4b01      	ldr	r3, [pc, #4]	; (c50 <_ZN16Usart_Asyn_Class7disableEv+0xc>)
     c4a:	4798      	blx	r3
}
     c4c:	bd10      	pop	{r4, pc}
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	00001731 	.word	0x00001731

00000c54 <_ZN16Usart_Asyn_Class12isUsartReadyEv>:
}


bool Usart_Asyn_Class::isUsartReady(void){
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&Usart_Asyn_Class::complete_cb_SPI_0));
	if ((txReady==true)&&(rxReady==true))
     c54:	7803      	ldrb	r3, [r0, #0]
     c56:	b2db      	uxtb	r3, r3
     c58:	2b00      	cmp	r3, #0
     c5a:	d001      	beq.n	c60 <_ZN16Usart_Asyn_Class12isUsartReadyEv+0xc>
     c5c:	7843      	ldrb	r3, [r0, #1]
     c5e:	b2db      	uxtb	r3, r3
	{
		return false;
	}

	
}
     c60:	0018      	movs	r0, r3
     c62:	4770      	bx	lr

00000c64 <_ZN16Usart_Asyn_Class4initEv>:
void Usart_Asyn_Class::init(){
     c64:	b570      	push	{r4, r5, r6, lr}
     c66:	b082      	sub	sp, #8
     c68:	0004      	movs	r4, r0
	USART_0_CLOCK_init();
     c6a:	4b0c      	ldr	r3, [pc, #48]	; (c9c <_ZN16Usart_Asyn_Class4initEv+0x38>)
     c6c:	4798      	blx	r3
	usart_async_init(&USART0, SERCOM2, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     c6e:	4d0c      	ldr	r5, [pc, #48]	; (ca0 <_ZN16Usart_Asyn_Class4initEv+0x3c>)
     c70:	1d2a      	adds	r2, r5, #4
     c72:	0020      	movs	r0, r4
     c74:	3008      	adds	r0, #8
     c76:	2300      	movs	r3, #0
     c78:	9300      	str	r3, [sp, #0]
     c7a:	3310      	adds	r3, #16
     c7c:	4909      	ldr	r1, [pc, #36]	; (ca4 <_ZN16Usart_Asyn_Class4initEv+0x40>)
     c7e:	4e0a      	ldr	r6, [pc, #40]	; (ca8 <_ZN16Usart_Asyn_Class4initEv+0x44>)
     c80:	47b0      	blx	r6
	USART_0_PORT_init();
     c82:	4b0a      	ldr	r3, [pc, #40]	; (cac <_ZN16Usart_Asyn_Class4initEv+0x48>)
     c84:	4798      	blx	r3
	pUsartClass=this;
     c86:	65e4      	str	r4, [r4, #92]	; 0x5c
	ptrUsartClass=pUsartClass;
     c88:	602c      	str	r4, [r5, #0]
	rxReady=true;
     c8a:	2301      	movs	r3, #1
     c8c:	7063      	strb	r3, [r4, #1]
	txReady=true;
     c8e:	7023      	strb	r3, [r4, #0]
	isUsartReady();
     c90:	0020      	movs	r0, r4
     c92:	4b07      	ldr	r3, [pc, #28]	; (cb0 <_ZN16Usart_Asyn_Class4initEv+0x4c>)
     c94:	4798      	blx	r3
}
     c96:	b002      	add	sp, #8
     c98:	bd70      	pop	{r4, r5, r6, pc}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	00000dcd 	.word	0x00000dcd
     ca0:	20000534 	.word	0x20000534
     ca4:	42001000 	.word	0x42001000
     ca8:	0000166d 	.word	0x0000166d
     cac:	00000ded 	.word	0x00000ded
     cb0:	00000c55 	.word	0x00000c55

00000cb4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     cb4:	b510      	push	{r4, lr}
	system_init();
     cb6:	4b02      	ldr	r3, [pc, #8]	; (cc0 <atmel_start_init+0xc>)
     cb8:	4798      	blx	r3
	usb_init();
     cba:	4b02      	ldr	r3, [pc, #8]	; (cc4 <atmel_start_init+0x10>)
     cbc:	4798      	blx	r3
}
     cbe:	bd10      	pop	{r4, pc}
     cc0:	00000f45 	.word	0x00000f45
     cc4:	00003ac9 	.word	0x00003ac9

00000cc8 <SPI_0_PORT_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct spi_m_async_descriptor SPI_0;

void SPI_0_PORT_init(void)
{
     cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cca:	46ce      	mov	lr, r9
     ccc:	4647      	mov	r7, r8
     cce:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cd0:	21c0      	movs	r1, #192	; 0xc0
     cd2:	05c9      	lsls	r1, r1, #23
     cd4:	2380      	movs	r3, #128	; 0x80
     cd6:	009b      	lsls	r3, r3, #2
     cd8:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cda:	4b25      	ldr	r3, [pc, #148]	; (d70 <SPI_0_PORT_init+0xa8>)
     cdc:	4a25      	ldr	r2, [pc, #148]	; (d74 <SPI_0_PORT_init+0xac>)
     cde:	629a      	str	r2, [r3, #40]	; 0x28
     ce0:	4a25      	ldr	r2, [pc, #148]	; (d78 <SPI_0_PORT_init+0xb0>)
     ce2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ce4:	2449      	movs	r4, #73	; 0x49
     ce6:	5d1a      	ldrb	r2, [r3, r4]
     ce8:	2004      	movs	r0, #4
     cea:	4382      	bics	r2, r0
     cec:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cee:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     cf0:	2601      	movs	r6, #1
     cf2:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cf4:	2201      	movs	r2, #1
     cf6:	4310      	orrs	r0, r2
     cf8:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cfa:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cfc:	2734      	movs	r7, #52	; 0x34
     cfe:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d00:	250f      	movs	r5, #15
     d02:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     d04:	2420      	movs	r4, #32
     d06:	46a1      	mov	r9, r4
     d08:	464c      	mov	r4, r9
     d0a:	4320      	orrs	r0, r4
     d0c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d0e:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d10:	2080      	movs	r0, #128	; 0x80
     d12:	00c0      	lsls	r0, r0, #3
     d14:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d16:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d18:	4818      	ldr	r0, [pc, #96]	; (d7c <SPI_0_PORT_init+0xb4>)
     d1a:	6298      	str	r0, [r3, #40]	; 0x28
     d1c:	20c0      	movs	r0, #192	; 0xc0
     d1e:	0600      	lsls	r0, r0, #24
     d20:	4684      	mov	ip, r0
     d22:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d24:	3716      	adds	r7, #22
     d26:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d28:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d2a:	4310      	orrs	r0, r2
     d2c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d2e:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d30:	2035      	movs	r0, #53	; 0x35
     d32:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d34:	240f      	movs	r4, #15
     d36:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
     d38:	3c0d      	subs	r4, #13
     d3a:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d3c:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d3e:	2780      	movs	r7, #128	; 0x80
     d40:	013f      	lsls	r7, r7, #4
     d42:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d44:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d46:	490e      	ldr	r1, [pc, #56]	; (d80 <SPI_0_PORT_init+0xb8>)
     d48:	6299      	str	r1, [r3, #40]	; 0x28
     d4a:	4661      	mov	r1, ip
     d4c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d4e:	274b      	movs	r7, #75	; 0x4b
     d50:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d52:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d54:	4311      	orrs	r1, r2
     d56:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d58:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d5a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d5c:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     d5e:	4649      	mov	r1, r9
     d60:	430a      	orrs	r2, r1
     d62:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d64:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
     d66:	bc0c      	pop	{r2, r3}
     d68:	4690      	mov	r8, r2
     d6a:	4699      	mov	r9, r3
     d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	41004400 	.word	0x41004400
     d74:	40020200 	.word	0x40020200
     d78:	c0020000 	.word	0xc0020000
     d7c:	40000400 	.word	0x40000400
     d80:	40000800 	.word	0x40000800

00000d84 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     d84:	4a04      	ldr	r2, [pc, #16]	; (d98 <SPI_0_CLOCK_init+0x14>)
     d86:	6a13      	ldr	r3, [r2, #32]
     d88:	2104      	movs	r1, #4
     d8a:	430b      	orrs	r3, r1
     d8c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     d8e:	4a03      	ldr	r2, [pc, #12]	; (d9c <SPI_0_CLOCK_init+0x18>)
     d90:	4b03      	ldr	r3, [pc, #12]	; (da0 <SPI_0_CLOCK_init+0x1c>)
     d92:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     d94:	4770      	bx	lr
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	40000400 	.word	0x40000400
     d9c:	00004014 	.word	0x00004014
     da0:	40000c00 	.word	0x40000c00

00000da4 <SPI_0_init>:

void SPI_0_init(void)
{
     da4:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     da6:	4b04      	ldr	r3, [pc, #16]	; (db8 <SPI_0_init+0x14>)
     da8:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     daa:	4904      	ldr	r1, [pc, #16]	; (dbc <SPI_0_init+0x18>)
     dac:	4804      	ldr	r0, [pc, #16]	; (dc0 <SPI_0_init+0x1c>)
     dae:	4b05      	ldr	r3, [pc, #20]	; (dc4 <SPI_0_init+0x20>)
     db0:	4798      	blx	r3
	SPI_0_PORT_init();
     db2:	4b05      	ldr	r3, [pc, #20]	; (dc8 <SPI_0_init+0x24>)
     db4:	4798      	blx	r3
}
     db6:	bd10      	pop	{r4, pc}
     db8:	00000d85 	.word	0x00000d85
     dbc:	42000800 	.word	0x42000800
     dc0:	20000890 	.word	0x20000890
     dc4:	0000133d 	.word	0x0000133d
     dc8:	00000cc9 	.word	0x00000cc9

00000dcc <USART_0_CLOCK_init>:
     dcc:	4a04      	ldr	r2, [pc, #16]	; (de0 <USART_0_CLOCK_init+0x14>)
     dce:	6a13      	ldr	r3, [r2, #32]
     dd0:	2110      	movs	r1, #16
     dd2:	430b      	orrs	r3, r1
     dd4:	6213      	str	r3, [r2, #32]
     dd6:	4a03      	ldr	r2, [pc, #12]	; (de4 <USART_0_CLOCK_init+0x18>)
     dd8:	4b03      	ldr	r3, [pc, #12]	; (de8 <USART_0_CLOCK_init+0x1c>)
     dda:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
}
     ddc:	4770      	bx	lr
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	40000400 	.word	0x40000400
     de4:	00004016 	.word	0x00004016
     de8:	40000c00 	.word	0x40000c00

00000dec <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     dec:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dee:	4b0e      	ldr	r3, [pc, #56]	; (e28 <USART_0_PORT_init+0x3c>)
     df0:	224c      	movs	r2, #76	; 0x4c
     df2:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     df4:	2501      	movs	r5, #1
     df6:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     df8:	2401      	movs	r4, #1
     dfa:	4321      	orrs	r1, r4
     dfc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dfe:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e00:	2036      	movs	r0, #54	; 0x36
     e02:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e04:	3a3d      	subs	r2, #61	; 0x3d
     e06:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     e08:	3a0d      	subs	r2, #13
     e0a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e0c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e0e:	214d      	movs	r1, #77	; 0x4d
     e10:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e12:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e14:	4322      	orrs	r2, r4
     e16:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e18:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e1a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e1c:	393e      	subs	r1, #62	; 0x3e
     e1e:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     e20:	3111      	adds	r1, #17
     e22:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e24:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
}
     e26:	bd30      	pop	{r4, r5, pc}
     e28:	41004400 	.word	0x41004400

00000e2c <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     e2c:	b510      	push	{r4, lr}
     e2e:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     e30:	4b06      	ldr	r3, [pc, #24]	; (e4c <USART_0_init+0x20>)
     e32:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM2, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     e34:	2300      	movs	r3, #0
     e36:	9300      	str	r3, [sp, #0]
     e38:	3310      	adds	r3, #16
     e3a:	4a05      	ldr	r2, [pc, #20]	; (e50 <USART_0_init+0x24>)
     e3c:	4905      	ldr	r1, [pc, #20]	; (e54 <USART_0_init+0x28>)
     e3e:	4806      	ldr	r0, [pc, #24]	; (e58 <USART_0_init+0x2c>)
     e40:	4c06      	ldr	r4, [pc, #24]	; (e5c <USART_0_init+0x30>)
     e42:	47a0      	blx	r4
	USART_0_PORT_init();
     e44:	4b06      	ldr	r3, [pc, #24]	; (e60 <USART_0_init+0x34>)
     e46:	4798      	blx	r3
}
     e48:	b002      	add	sp, #8
     e4a:	bd10      	pop	{r4, pc}
     e4c:	00000dcd 	.word	0x00000dcd
     e50:	20000548 	.word	0x20000548
     e54:	42001000 	.word	0x42001000
     e58:	200008d8 	.word	0x200008d8
     e5c:	0000166d 	.word	0x0000166d
     e60:	00000ded 	.word	0x00000ded

00000e64 <delay_driver_init>:

void delay_driver_init(void)
{
     e64:	b510      	push	{r4, lr}
	delay_init(SysTick);
     e66:	4802      	ldr	r0, [pc, #8]	; (e70 <delay_driver_init+0xc>)
     e68:	4b02      	ldr	r3, [pc, #8]	; (e74 <delay_driver_init+0x10>)
     e6a:	4798      	blx	r3
}
     e6c:	bd10      	pop	{r4, pc}
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	e000e010 	.word	0xe000e010
     e74:	000010a5 	.word	0x000010a5

00000e78 <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
     e78:	b5f0      	push	{r4, r5, r6, r7, lr}
     e7a:	46c6      	mov	lr, r8
     e7c:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e7e:	24c0      	movs	r4, #192	; 0xc0
     e80:	05e4      	lsls	r4, r4, #23
     e82:	2280      	movs	r2, #128	; 0x80
     e84:	0452      	lsls	r2, r2, #17
     e86:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e88:	4b1a      	ldr	r3, [pc, #104]	; (ef4 <USB_0_PORT_init+0x7c>)
     e8a:	2780      	movs	r7, #128	; 0x80
     e8c:	05ff      	lsls	r7, r7, #23
     e8e:	629f      	str	r7, [r3, #40]	; 0x28
     e90:	4919      	ldr	r1, [pc, #100]	; (ef8 <USB_0_PORT_init+0x80>)
     e92:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e94:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e96:	2058      	movs	r0, #88	; 0x58
     e98:	5c19      	ldrb	r1, [r3, r0]
     e9a:	2204      	movs	r2, #4
     e9c:	4690      	mov	r8, r2
     e9e:	4391      	bics	r1, r2
     ea0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ea2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ea4:	2601      	movs	r6, #1
     ea6:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ea8:	2501      	movs	r5, #1
     eaa:	4329      	orrs	r1, r5
     eac:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     eae:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     eb0:	381c      	subs	r0, #28
     eb2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     eb4:	320b      	adds	r2, #11
     eb6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     eb8:	3a09      	subs	r2, #9
     eba:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ebc:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ebe:	2180      	movs	r1, #128	; 0x80
     ec0:	0489      	lsls	r1, r1, #18
     ec2:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ec4:	629f      	str	r7, [r3, #40]	; 0x28
     ec6:	4f0d      	ldr	r7, [pc, #52]	; (efc <USB_0_PORT_init+0x84>)
     ec8:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     eca:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ecc:	2159      	movs	r1, #89	; 0x59
     ece:	5c5c      	ldrb	r4, [r3, r1]
     ed0:	4642      	mov	r2, r8
     ed2:	4394      	bics	r4, r2
     ed4:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ed6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ed8:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     eda:	432a      	orrs	r2, r5
     edc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ede:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ee0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ee2:	394a      	subs	r1, #74	; 0x4a
     ee4:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     ee6:	3151      	adds	r1, #81	; 0x51
     ee8:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     eea:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     eec:	bc04      	pop	{r2}
     eee:	4690      	mov	r8, r2
     ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ef2:	46c0      	nop			; (mov r8, r8)
     ef4:	41004400 	.word	0x41004400
     ef8:	c0000100 	.word	0xc0000100
     efc:	c0000200 	.word	0xc0000200

00000f00 <USB_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     f00:	4b06      	ldr	r3, [pc, #24]	; (f1c <USB_0_CLOCK_init+0x1c>)
     f02:	69da      	ldr	r2, [r3, #28]
     f04:	2120      	movs	r1, #32
     f06:	430a      	orrs	r2, r1
     f08:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     f0a:	695a      	ldr	r2, [r3, #20]
     f0c:	3120      	adds	r1, #32
     f0e:	430a      	orrs	r2, r1
     f10:	615a      	str	r2, [r3, #20]
     f12:	4a03      	ldr	r2, [pc, #12]	; (f20 <USB_0_CLOCK_init+0x20>)
     f14:	4b03      	ldr	r3, [pc, #12]	; (f24 <USB_0_CLOCK_init+0x24>)
     f16:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     f18:	4770      	bx	lr
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	40000400 	.word	0x40000400
     f20:	00004206 	.word	0x00004206
     f24:	40000c00 	.word	0x40000c00

00000f28 <USB_0_init>:

void USB_0_init(void)
{
     f28:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     f2a:	4b03      	ldr	r3, [pc, #12]	; (f38 <USB_0_init+0x10>)
     f2c:	4798      	blx	r3
	usb_d_init();
     f2e:	4b03      	ldr	r3, [pc, #12]	; (f3c <USB_0_init+0x14>)
     f30:	4798      	blx	r3
	USB_0_PORT_init();
     f32:	4b03      	ldr	r3, [pc, #12]	; (f40 <USB_0_init+0x18>)
     f34:	4798      	blx	r3
}
     f36:	bd10      	pop	{r4, pc}
     f38:	00000f01 	.word	0x00000f01
     f3c:	00001a71 	.word	0x00001a71
     f40:	00000e79 	.word	0x00000e79

00000f44 <system_init>:

void system_init(void)
{
     f44:	b5f0      	push	{r4, r5, r6, r7, lr}
     f46:	46d6      	mov	lr, sl
     f48:	464f      	mov	r7, r9
     f4a:	4646      	mov	r6, r8
     f4c:	b5c0      	push	{r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     f4e:	4b46      	ldr	r3, [pc, #280]	; (1068 <system_init+0x124>)
     f50:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f52:	22c0      	movs	r2, #192	; 0xc0
     f54:	05d2      	lsls	r2, r2, #23
     f56:	2304      	movs	r3, #4
     f58:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f5a:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f5c:	4b43      	ldr	r3, [pc, #268]	; (106c <system_init+0x128>)
     f5e:	4944      	ldr	r1, [pc, #272]	; (1070 <system_init+0x12c>)
     f60:	6299      	str	r1, [r3, #40]	; 0x28
     f62:	24c0      	movs	r4, #192	; 0xc0
     f64:	0624      	lsls	r4, r4, #24
     f66:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f68:	2542      	movs	r5, #66	; 0x42
     f6a:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f6c:	2101      	movs	r1, #1
     f6e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f70:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f72:	2008      	movs	r0, #8
     f74:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f76:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f78:	483e      	ldr	r0, [pc, #248]	; (1074 <system_init+0x130>)
     f7a:	6298      	str	r0, [r3, #40]	; 0x28
     f7c:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f7e:	3501      	adds	r5, #1
     f80:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f82:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f84:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f86:	2010      	movs	r0, #16
     f88:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f8a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f8c:	483a      	ldr	r0, [pc, #232]	; (1078 <system_init+0x134>)
     f8e:	6298      	str	r0, [r3, #40]	; 0x28
     f90:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f92:	3501      	adds	r5, #1
     f94:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f96:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f98:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f9a:	2080      	movs	r0, #128	; 0x80
     f9c:	0040      	lsls	r0, r0, #1
     f9e:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fa0:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fa2:	4836      	ldr	r0, [pc, #216]	; (107c <system_init+0x138>)
     fa4:	6298      	str	r0, [r3, #40]	; 0x28
     fa6:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	3504      	adds	r5, #4
     faa:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fae:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fb0:	2080      	movs	r0, #128	; 0x80
     fb2:	0500      	lsls	r0, r0, #20
     fb4:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fb6:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fb8:	2080      	movs	r0, #128	; 0x80
     fba:	05c0      	lsls	r0, r0, #23
     fbc:	6298      	str	r0, [r3, #40]	; 0x28
     fbe:	4d30      	ldr	r5, [pc, #192]	; (1080 <system_init+0x13c>)
     fc0:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fc2:	265b      	movs	r6, #91	; 0x5b
     fc4:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fc6:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fc8:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fca:	2580      	movs	r5, #128	; 0x80
     fcc:	056d      	lsls	r5, r5, #21
     fce:	6195      	str	r5, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fd0:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fd2:	6298      	str	r0, [r3, #40]	; 0x28
     fd4:	4d2b      	ldr	r5, [pc, #172]	; (1084 <system_init+0x140>)
     fd6:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fd8:	3601      	adds	r6, #1
     fda:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fdc:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fde:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fe0:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fe2:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fe4:	6298      	str	r0, [r3, #40]	; 0x28
     fe6:	4d28      	ldr	r5, [pc, #160]	; (1088 <system_init+0x144>)
     fe8:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fea:	3602      	adds	r6, #2
     fec:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fee:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ff2:	2680      	movs	r6, #128	; 0x80
     ff4:	0636      	lsls	r6, r6, #24
     ff6:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ff8:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ffa:	6298      	str	r0, [r3, #40]	; 0x28
     ffc:	4d23      	ldr	r5, [pc, #140]	; (108c <system_init+0x148>)
     ffe:	46aa      	mov	sl, r5
    1000:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1002:	255f      	movs	r5, #95	; 0x5f
    1004:	46ac      	mov	ip, r5
    1006:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1008:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    100a:	4667      	mov	r7, ip
    100c:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    100e:	2594      	movs	r5, #148	; 0x94
    1010:	46a8      	mov	r8, r5
    1012:	356d      	adds	r5, #109	; 0x6d
    1014:	35ff      	adds	r5, #255	; 0xff
    1016:	4647      	mov	r7, r8
    1018:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    101a:	3f0c      	subs	r7, #12
    101c:	46bc      	mov	ip, r7
    101e:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1020:	3d59      	subs	r5, #89	; 0x59
    1022:	3dff      	subs	r5, #255	; 0xff
    1024:	4f1a      	ldr	r7, [pc, #104]	; (1090 <system_init+0x14c>)
    1026:	515f      	str	r7, [r3, r5]
    1028:	515c      	str	r4, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    102a:	24c9      	movs	r4, #201	; 0xc9
    102c:	46a1      	mov	r9, r4
    102e:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1030:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1032:	464f      	mov	r7, r9
    1034:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1036:	4644      	mov	r4, r8
    1038:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    103a:	4664      	mov	r4, ip
    103c:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    103e:	5158      	str	r0, [r3, r5]
    1040:	4652      	mov	r2, sl
    1042:	515a      	str	r2, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1044:	20df      	movs	r0, #223	; 0xdf
    1046:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1048:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    104a:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(pb31, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(pb31, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
    104c:	4b11      	ldr	r3, [pc, #68]	; (1094 <system_init+0x150>)
    104e:	4798      	blx	r3
	USART_0_init();
    1050:	4b11      	ldr	r3, [pc, #68]	; (1098 <system_init+0x154>)
    1052:	4798      	blx	r3

	delay_driver_init();
    1054:	4b11      	ldr	r3, [pc, #68]	; (109c <system_init+0x158>)
    1056:	4798      	blx	r3

	USB_0_init();
    1058:	4b11      	ldr	r3, [pc, #68]	; (10a0 <system_init+0x15c>)
    105a:	4798      	blx	r3
}
    105c:	bc1c      	pop	{r2, r3, r4}
    105e:	4690      	mov	r8, r2
    1060:	4699      	mov	r9, r3
    1062:	46a2      	mov	sl, r4
    1064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	00001ed5 	.word	0x00001ed5
    106c:	41004400 	.word	0x41004400
    1070:	40000004 	.word	0x40000004
    1074:	40000008 	.word	0x40000008
    1078:	40000010 	.word	0x40000010
    107c:	40000100 	.word	0x40000100
    1080:	c0000800 	.word	0xc0000800
    1084:	c0001000 	.word	0xc0001000
    1088:	c0004000 	.word	0xc0004000
    108c:	c0008000 	.word	0xc0008000
    1090:	40000200 	.word	0x40000200
    1094:	00000da5 	.word	0x00000da5
    1098:	00000e2d 	.word	0x00000e2d
    109c:	00000e65 	.word	0x00000e65
    10a0:	00000f29 	.word	0x00000f29

000010a4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    10a4:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    10a6:	4b02      	ldr	r3, [pc, #8]	; (10b0 <delay_init+0xc>)
    10a8:	6018      	str	r0, [r3, #0]
    10aa:	4b02      	ldr	r3, [pc, #8]	; (10b4 <delay_init+0x10>)
    10ac:	4798      	blx	r3
}
    10ae:	bd10      	pop	{r4, pc}
    10b0:	20000558 	.word	0x20000558
    10b4:	00002721 	.word	0x00002721

000010b8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    10b8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    10ba:	4b04      	ldr	r3, [pc, #16]	; (10cc <delay_ms+0x14>)
    10bc:	681c      	ldr	r4, [r3, #0]
    10be:	4b04      	ldr	r3, [pc, #16]	; (10d0 <delay_ms+0x18>)
    10c0:	4798      	blx	r3
    10c2:	0001      	movs	r1, r0
    10c4:	0020      	movs	r0, r4
    10c6:	4b03      	ldr	r3, [pc, #12]	; (10d4 <delay_ms+0x1c>)
    10c8:	4798      	blx	r3
}
    10ca:	bd10      	pop	{r4, pc}
    10cc:	20000558 	.word	0x20000558
    10d0:	00001ecd 	.word	0x00001ecd
    10d4:	00002735 	.word	0x00002735

000010d8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    10d8:	b570      	push	{r4, r5, r6, lr}
    10da:	0006      	movs	r6, r0
    10dc:	000c      	movs	r4, r1
    10de:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    10e0:	2800      	cmp	r0, #0
    10e2:	d00d      	beq.n	1100 <io_write+0x28>
    10e4:	0008      	movs	r0, r1
    10e6:	1e43      	subs	r3, r0, #1
    10e8:	4198      	sbcs	r0, r3
    10ea:	b2c0      	uxtb	r0, r0
    10ec:	2234      	movs	r2, #52	; 0x34
    10ee:	4905      	ldr	r1, [pc, #20]	; (1104 <io_write+0x2c>)
    10f0:	4b05      	ldr	r3, [pc, #20]	; (1108 <io_write+0x30>)
    10f2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    10f4:	6833      	ldr	r3, [r6, #0]
    10f6:	002a      	movs	r2, r5
    10f8:	0021      	movs	r1, r4
    10fa:	0030      	movs	r0, r6
    10fc:	4798      	blx	r3
}
    10fe:	bd70      	pop	{r4, r5, r6, pc}
    1100:	2000      	movs	r0, #0
    1102:	e7f3      	b.n	10ec <io_write+0x14>
    1104:	00004b80 	.word	0x00004b80
    1108:	00001dc5 	.word	0x00001dc5

0000110c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    110c:	b570      	push	{r4, r5, r6, lr}
    110e:	0006      	movs	r6, r0
    1110:	000c      	movs	r4, r1
    1112:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    1114:	2800      	cmp	r0, #0
    1116:	d00d      	beq.n	1134 <io_read+0x28>
    1118:	0008      	movs	r0, r1
    111a:	1e43      	subs	r3, r0, #1
    111c:	4198      	sbcs	r0, r3
    111e:	b2c0      	uxtb	r0, r0
    1120:	223d      	movs	r2, #61	; 0x3d
    1122:	4905      	ldr	r1, [pc, #20]	; (1138 <io_read+0x2c>)
    1124:	4b05      	ldr	r3, [pc, #20]	; (113c <io_read+0x30>)
    1126:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1128:	6873      	ldr	r3, [r6, #4]
    112a:	002a      	movs	r2, r5
    112c:	0021      	movs	r1, r4
    112e:	0030      	movs	r0, r6
    1130:	4798      	blx	r3
}
    1132:	bd70      	pop	{r4, r5, r6, pc}
    1134:	2000      	movs	r0, #0
    1136:	e7f3      	b.n	1120 <io_read+0x14>
    1138:	00004b80 	.word	0x00004b80
    113c:	00001dc5 	.word	0x00001dc5

00001140 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    1140:	b570      	push	{r4, r5, r6, lr}
    1142:	0004      	movs	r4, r0
    1144:	000e      	movs	r6, r1
    1146:	0015      	movs	r5, r2
	ASSERT(io);
    1148:	1e43      	subs	r3, r0, #1
    114a:	4198      	sbcs	r0, r3
    114c:	b2c0      	uxtb	r0, r0
    114e:	2228      	movs	r2, #40	; 0x28
    1150:	32ff      	adds	r2, #255	; 0xff
    1152:	490a      	ldr	r1, [pc, #40]	; (117c <_spi_m_async_io_write+0x3c>)
    1154:	4b0a      	ldr	r3, [pc, #40]	; (1180 <_spi_m_async_io_write+0x40>)
    1156:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    1158:	0023      	movs	r3, r4
    115a:	2200      	movs	r2, #0
    115c:	61a2      	str	r2, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    115e:	6166      	str	r6, [r4, #20]
	spi->xfer.size  = length;
    1160:	61e5      	str	r5, [r4, #28]
	spi->xfercnt    = 0;
    1162:	6222      	str	r2, [r4, #32]
	spi->xfer.rxbuf = NULL;
    1164:	3b24      	subs	r3, #36	; 0x24

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    1166:	2110      	movs	r1, #16
    1168:	322c      	adds	r2, #44	; 0x2c
    116a:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_tx(&spi->dev, true);
    116c:	0020      	movs	r0, r4
    116e:	3820      	subs	r0, #32
    1170:	390f      	subs	r1, #15
    1172:	4b04      	ldr	r3, [pc, #16]	; (1184 <_spi_m_async_io_write+0x44>)
    1174:	4798      	blx	r3

	return ERR_NONE;
}
    1176:	2000      	movs	r0, #0
    1178:	bd70      	pop	{r4, r5, r6, pc}
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	00004b94 	.word	0x00004b94
    1180:	00001dc5 	.word	0x00001dc5
    1184:	000024c1 	.word	0x000024c1

00001188 <_spi_m_async_io_read>:
{
    1188:	b570      	push	{r4, r5, r6, lr}
    118a:	0004      	movs	r4, r0
    118c:	000e      	movs	r6, r1
    118e:	0015      	movs	r5, r2
	ASSERT(io);
    1190:	1e43      	subs	r3, r0, #1
    1192:	4198      	sbcs	r0, r3
    1194:	b2c0      	uxtb	r0, r0
    1196:	2206      	movs	r2, #6
    1198:	32ff      	adds	r2, #255	; 0xff
    119a:	490c      	ldr	r1, [pc, #48]	; (11cc <_spi_m_async_io_read+0x44>)
    119c:	4b0c      	ldr	r3, [pc, #48]	; (11d0 <_spi_m_async_io_read+0x48>)
    119e:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    11a0:	0023      	movs	r3, r4
    11a2:	61a6      	str	r6, [r4, #24]
	spi->xfer.txbuf = NULL;
    11a4:	2200      	movs	r2, #0
    11a6:	6162      	str	r2, [r4, #20]
	spi->xfer.size  = length;
    11a8:	61e5      	str	r5, [r4, #28]
	spi->xfercnt    = 0;
    11aa:	6222      	str	r2, [r4, #32]
	spi->xfer.rxbuf = buf;
    11ac:	3b24      	subs	r3, #36	; 0x24
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    11ae:	2110      	movs	r1, #16
    11b0:	322c      	adds	r2, #44	; 0x2c
    11b2:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_rx(&spi->dev, true);
    11b4:	3c20      	subs	r4, #32
    11b6:	390f      	subs	r1, #15
    11b8:	0020      	movs	r0, r4
    11ba:	4b06      	ldr	r3, [pc, #24]	; (11d4 <_spi_m_async_io_read+0x4c>)
    11bc:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    11be:	4906      	ldr	r1, [pc, #24]	; (11d8 <_spi_m_async_io_read+0x50>)
    11c0:	0020      	movs	r0, r4
    11c2:	4b06      	ldr	r3, [pc, #24]	; (11dc <_spi_m_async_io_read+0x54>)
    11c4:	4798      	blx	r3
}
    11c6:	2000      	movs	r0, #0
    11c8:	bd70      	pop	{r4, r5, r6, pc}
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	00004b94 	.word	0x00004b94
    11d0:	00001dc5 	.word	0x00001dc5
    11d4:	000024fd 	.word	0x000024fd
    11d8:	000001ff 	.word	0x000001ff
    11dc:	00002585 	.word	0x00002585

000011e0 <_spi_dev_error>:
{
    11e0:	b570      	push	{r4, r5, r6, lr}
    11e2:	0004      	movs	r4, r0
    11e4:	000e      	movs	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    11e6:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    11e8:	2100      	movs	r1, #0
    11ea:	4b0a      	ldr	r3, [pc, #40]	; (1214 <_spi_dev_error+0x34>)
    11ec:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    11ee:	2100      	movs	r1, #0
    11f0:	0020      	movs	r0, r4
    11f2:	4b09      	ldr	r3, [pc, #36]	; (1218 <_spi_dev_error+0x38>)
    11f4:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    11f6:	2100      	movs	r1, #0
    11f8:	0020      	movs	r0, r4
    11fa:	4b08      	ldr	r3, [pc, #32]	; (121c <_spi_dev_error+0x3c>)
    11fc:	4798      	blx	r3
	spi->stat = 0;
    11fe:	2200      	movs	r2, #0
    1200:	232c      	movs	r3, #44	; 0x2c
    1202:	54ea      	strb	r2, [r5, r3]
	if (spi->callbacks.cb_error) {
    1204:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1206:	2b00      	cmp	r3, #0
    1208:	d002      	beq.n	1210 <_spi_dev_error+0x30>
		spi->callbacks.cb_error(spi, status);
    120a:	0031      	movs	r1, r6
    120c:	0028      	movs	r0, r5
    120e:	4798      	blx	r3
}
    1210:	bd70      	pop	{r4, r5, r6, pc}
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	000024c1 	.word	0x000024c1
    1218:	000024fd 	.word	0x000024fd
    121c:	00002545 	.word	0x00002545

00001220 <_spi_dev_complete>:
{
    1220:	b510      	push	{r4, lr}
    1222:	0004      	movs	r4, r0
	if (spi->xfercnt >= spi->xfer.size) {
    1224:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1226:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1228:	429a      	cmp	r2, r3
    122a:	d200      	bcs.n	122e <_spi_dev_complete+0xe>
}
    122c:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx_complete(dev, false);
    122e:	2100      	movs	r1, #0
    1230:	4b05      	ldr	r3, [pc, #20]	; (1248 <_spi_dev_complete+0x28>)
    1232:	4798      	blx	r3
		spi->stat = 0;
    1234:	1f23      	subs	r3, r4, #4
    1236:	2100      	movs	r1, #0
    1238:	222c      	movs	r2, #44	; 0x2c
    123a:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
    123c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    123e:	2b00      	cmp	r3, #0
    1240:	d0f4      	beq.n	122c <_spi_dev_complete+0xc>
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1242:	1f20      	subs	r0, r4, #4
			spi->callbacks.cb_xfer(spi);
    1244:	4798      	blx	r3
}
    1246:	e7f1      	b.n	122c <_spi_dev_complete+0xc>
    1248:	00002545 	.word	0x00002545

0000124c <_spi_dev_tx>:
{
    124c:	b510      	push	{r4, lr}
    124e:	0004      	movs	r4, r0
	if (!(dev->char_size > 1)) {
    1250:	7903      	ldrb	r3, [r0, #4]
    1252:	2b01      	cmp	r3, #1
    1254:	d90d      	bls.n	1272 <_spi_dev_tx+0x26>
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    1256:	6b41      	ldr	r1, [r0, #52]	; 0x34
    1258:	6c03      	ldr	r3, [r0, #64]	; 0x40
    125a:	1c58      	adds	r0, r3, #1
    125c:	6420      	str	r0, [r4, #64]	; 0x40
    125e:	005b      	lsls	r3, r3, #1
    1260:	5a59      	ldrh	r1, [r3, r1]
    1262:	0020      	movs	r0, r4
    1264:	4b0c      	ldr	r3, [pc, #48]	; (1298 <_spi_dev_tx+0x4c>)
    1266:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    1268:	6c22      	ldr	r2, [r4, #64]	; 0x40
    126a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    126c:	429a      	cmp	r2, r3
    126e:	d009      	beq.n	1284 <_spi_dev_tx+0x38>
}
    1270:	bd10      	pop	{r4, pc}
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    1272:	6b41      	ldr	r1, [r0, #52]	; 0x34
    1274:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1276:	1c50      	adds	r0, r2, #1
    1278:	6420      	str	r0, [r4, #64]	; 0x40
    127a:	5c89      	ldrb	r1, [r1, r2]
    127c:	0020      	movs	r0, r4
    127e:	4b06      	ldr	r3, [pc, #24]	; (1298 <_spi_dev_tx+0x4c>)
    1280:	4798      	blx	r3
    1282:	e7f1      	b.n	1268 <_spi_dev_tx+0x1c>
		_spi_m_async_enable_tx(dev, false);
    1284:	2100      	movs	r1, #0
    1286:	0020      	movs	r0, r4
    1288:	4b04      	ldr	r3, [pc, #16]	; (129c <_spi_dev_tx+0x50>)
    128a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    128c:	2101      	movs	r1, #1
    128e:	0020      	movs	r0, r4
    1290:	4b03      	ldr	r3, [pc, #12]	; (12a0 <_spi_dev_tx+0x54>)
    1292:	4798      	blx	r3
}
    1294:	e7ec      	b.n	1270 <_spi_dev_tx+0x24>
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	00002585 	.word	0x00002585
    129c:	000024c1 	.word	0x000024c1
    12a0:	00002545 	.word	0x00002545

000012a4 <_spi_dev_rx>:
{
    12a4:	b570      	push	{r4, r5, r6, lr}
    12a6:	0004      	movs	r4, r0
	if (spi->xfer.rxbuf) {
    12a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    12aa:	2b00      	cmp	r3, #0
    12ac:	d022      	beq.n	12f4 <_spi_dev_rx+0x50>
		if (!(dev->char_size > 1)) {
    12ae:	7902      	ldrb	r2, [r0, #4]
    12b0:	2a01      	cmp	r2, #1
    12b2:	d917      	bls.n	12e4 <_spi_dev_rx+0x40>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    12b4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    12b6:	1c69      	adds	r1, r5, #1
    12b8:	6401      	str	r1, [r0, #64]	; 0x40
    12ba:	006d      	lsls	r5, r5, #1
    12bc:	195d      	adds	r5, r3, r5
    12be:	4b1c      	ldr	r3, [pc, #112]	; (1330 <_spi_dev_rx+0x8c>)
    12c0:	4798      	blx	r3
    12c2:	8028      	strh	r0, [r5, #0]
	if (spi->xfercnt < spi->xfer.size) {
    12c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    12c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    12c8:	4293      	cmp	r3, r2
    12ca:	d223      	bcs.n	1314 <_spi_dev_rx+0x70>
		if (spi->xfer.txbuf) {
    12cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    12ce:	2a00      	cmp	r2, #0
    12d0:	d01b      	beq.n	130a <_spi_dev_rx+0x66>
			if (!(dev->char_size > 1)) {
    12d2:	7921      	ldrb	r1, [r4, #4]
    12d4:	2901      	cmp	r1, #1
    12d6:	d913      	bls.n	1300 <_spi_dev_rx+0x5c>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    12d8:	005b      	lsls	r3, r3, #1
    12da:	5a99      	ldrh	r1, [r3, r2]
    12dc:	0020      	movs	r0, r4
    12de:	4b15      	ldr	r3, [pc, #84]	; (1334 <_spi_dev_rx+0x90>)
    12e0:	4798      	blx	r3
}
    12e2:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    12e4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    12e6:	1c69      	adds	r1, r5, #1
    12e8:	6401      	str	r1, [r0, #64]	; 0x40
    12ea:	195d      	adds	r5, r3, r5
    12ec:	4b10      	ldr	r3, [pc, #64]	; (1330 <_spi_dev_rx+0x8c>)
    12ee:	4798      	blx	r3
    12f0:	7028      	strb	r0, [r5, #0]
    12f2:	e7e7      	b.n	12c4 <_spi_dev_rx+0x20>
		_spi_m_async_read_one(dev);
    12f4:	4b0e      	ldr	r3, [pc, #56]	; (1330 <_spi_dev_rx+0x8c>)
    12f6:	4798      	blx	r3
		spi->xfercnt++;
    12f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    12fa:	3301      	adds	r3, #1
    12fc:	6423      	str	r3, [r4, #64]	; 0x40
    12fe:	e7e1      	b.n	12c4 <_spi_dev_rx+0x20>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    1300:	5cd1      	ldrb	r1, [r2, r3]
    1302:	0020      	movs	r0, r4
    1304:	4b0b      	ldr	r3, [pc, #44]	; (1334 <_spi_dev_rx+0x90>)
    1306:	4798      	blx	r3
    1308:	e7eb      	b.n	12e2 <_spi_dev_rx+0x3e>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    130a:	88e1      	ldrh	r1, [r4, #6]
    130c:	0020      	movs	r0, r4
    130e:	4b09      	ldr	r3, [pc, #36]	; (1334 <_spi_dev_rx+0x90>)
    1310:	4798      	blx	r3
    1312:	e7e6      	b.n	12e2 <_spi_dev_rx+0x3e>
		_spi_m_async_enable_rx(dev, false);
    1314:	2100      	movs	r1, #0
    1316:	0020      	movs	r0, r4
    1318:	4b07      	ldr	r3, [pc, #28]	; (1338 <_spi_dev_rx+0x94>)
    131a:	4798      	blx	r3
		spi->stat = 0;
    131c:	1f23      	subs	r3, r4, #4
    131e:	2100      	movs	r1, #0
    1320:	222c      	movs	r2, #44	; 0x2c
    1322:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
    1324:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1326:	2b00      	cmp	r3, #0
    1328:	d0db      	beq.n	12e2 <_spi_dev_rx+0x3e>
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    132a:	1f20      	subs	r0, r4, #4
			spi->callbacks.cb_xfer(spi);
    132c:	4798      	blx	r3
}
    132e:	e7d8      	b.n	12e2 <_spi_dev_rx+0x3e>
    1330:	000025b9 	.word	0x000025b9
    1334:	00002585 	.word	0x00002585
    1338:	000024fd 	.word	0x000024fd

0000133c <spi_m_async_init>:
{
    133c:	b570      	push	{r4, r5, r6, lr}
    133e:	0004      	movs	r4, r0
    1340:	000e      	movs	r6, r1
	ASSERT(spi && hw);
    1342:	2800      	cmp	r0, #0
    1344:	d026      	beq.n	1394 <spi_m_async_init+0x58>
    1346:	0008      	movs	r0, r1
    1348:	1e43      	subs	r3, r0, #1
    134a:	4198      	sbcs	r0, r3
    134c:	b2c0      	uxtb	r0, r0
    134e:	22a5      	movs	r2, #165	; 0xa5
    1350:	4911      	ldr	r1, [pc, #68]	; (1398 <spi_m_async_init+0x5c>)
    1352:	4b12      	ldr	r3, [pc, #72]	; (139c <spi_m_async_init+0x60>)
    1354:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1356:	6066      	str	r6, [r4, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    1358:	1d25      	adds	r5, r4, #4
    135a:	0031      	movs	r1, r6
    135c:	0028      	movs	r0, r5
    135e:	4b10      	ldr	r3, [pc, #64]	; (13a0 <spi_m_async_init+0x64>)
    1360:	4798      	blx	r3
	if (rc >= 0) {
    1362:	2800      	cmp	r0, #0
    1364:	db15      	blt.n	1392 <spi_m_async_init+0x56>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    1366:	4a0f      	ldr	r2, [pc, #60]	; (13a4 <spi_m_async_init+0x68>)
    1368:	2100      	movs	r1, #0
    136a:	0028      	movs	r0, r5
    136c:	4e0e      	ldr	r6, [pc, #56]	; (13a8 <spi_m_async_init+0x6c>)
    136e:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    1370:	4a0e      	ldr	r2, [pc, #56]	; (13ac <spi_m_async_init+0x70>)
    1372:	2101      	movs	r1, #1
    1374:	0028      	movs	r0, r5
    1376:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    1378:	4a0d      	ldr	r2, [pc, #52]	; (13b0 <spi_m_async_init+0x74>)
    137a:	2102      	movs	r1, #2
    137c:	0028      	movs	r0, r5
    137e:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    1380:	4a0c      	ldr	r2, [pc, #48]	; (13b4 <spi_m_async_init+0x78>)
    1382:	2103      	movs	r1, #3
    1384:	0028      	movs	r0, r5
    1386:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
    1388:	4b0b      	ldr	r3, [pc, #44]	; (13b8 <spi_m_async_init+0x7c>)
    138a:	62a3      	str	r3, [r4, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    138c:	4b0b      	ldr	r3, [pc, #44]	; (13bc <spi_m_async_init+0x80>)
    138e:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
    1390:	2000      	movs	r0, #0
}
    1392:	bd70      	pop	{r4, r5, r6, pc}
    1394:	2000      	movs	r0, #0
    1396:	e7da      	b.n	134e <spi_m_async_init+0x12>
    1398:	00004b94 	.word	0x00004b94
    139c:	00001dc5 	.word	0x00001dc5
    13a0:	000023f5 	.word	0x000023f5
    13a4:	0000124d 	.word	0x0000124d
    13a8:	000025e9 	.word	0x000025e9
    13ac:	000012a5 	.word	0x000012a5
    13b0:	00001221 	.word	0x00001221
    13b4:	000011e1 	.word	0x000011e1
    13b8:	00001189 	.word	0x00001189
    13bc:	00001141 	.word	0x00001141

000013c0 <spi_m_async_enable>:
{
    13c0:	b510      	push	{r4, lr}
    13c2:	0004      	movs	r4, r0
	ASSERT(spi);
    13c4:	1e43      	subs	r3, r0, #1
    13c6:	4198      	sbcs	r0, r3
    13c8:	b2c0      	uxtb	r0, r0
    13ca:	22c1      	movs	r2, #193	; 0xc1
    13cc:	4903      	ldr	r1, [pc, #12]	; (13dc <spi_m_async_enable+0x1c>)
    13ce:	4b04      	ldr	r3, [pc, #16]	; (13e0 <spi_m_async_enable+0x20>)
    13d0:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    13d2:	1d20      	adds	r0, r4, #4
    13d4:	4b03      	ldr	r3, [pc, #12]	; (13e4 <spi_m_async_enable+0x24>)
    13d6:	4798      	blx	r3
}
    13d8:	bd10      	pop	{r4, pc}
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	00004b94 	.word	0x00004b94
    13e0:	00001dc5 	.word	0x00001dc5
    13e4:	00002459 	.word	0x00002459

000013e8 <spi_m_async_disable>:
{
    13e8:	b510      	push	{r4, lr}
    13ea:	0004      	movs	r4, r0
	ASSERT(spi);
    13ec:	1e43      	subs	r3, r0, #1
    13ee:	4198      	sbcs	r0, r3
    13f0:	b2c0      	uxtb	r0, r0
    13f2:	22c7      	movs	r2, #199	; 0xc7
    13f4:	4907      	ldr	r1, [pc, #28]	; (1414 <spi_m_async_disable+0x2c>)
    13f6:	4b08      	ldr	r3, [pc, #32]	; (1418 <spi_m_async_disable+0x30>)
    13f8:	4798      	blx	r3
	_spi_m_async_enable_tx(&spi->dev, false);
    13fa:	3404      	adds	r4, #4
    13fc:	2100      	movs	r1, #0
    13fe:	0020      	movs	r0, r4
    1400:	4b06      	ldr	r3, [pc, #24]	; (141c <spi_m_async_disable+0x34>)
    1402:	4798      	blx	r3
	_spi_m_async_enable_rx(&spi->dev, false);
    1404:	2100      	movs	r1, #0
    1406:	0020      	movs	r0, r4
    1408:	4b05      	ldr	r3, [pc, #20]	; (1420 <spi_m_async_disable+0x38>)
    140a:	4798      	blx	r3
	_spi_m_async_disable(&spi->dev);
    140c:	0020      	movs	r0, r4
    140e:	4b05      	ldr	r3, [pc, #20]	; (1424 <spi_m_async_disable+0x3c>)
    1410:	4798      	blx	r3
}
    1412:	bd10      	pop	{r4, pc}
    1414:	00004b94 	.word	0x00004b94
    1418:	00001dc5 	.word	0x00001dc5
    141c:	000024c1 	.word	0x000024c1
    1420:	000024fd 	.word	0x000024fd
    1424:	0000248d 	.word	0x0000248d

00001428 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    1428:	b570      	push	{r4, r5, r6, lr}
    142a:	0004      	movs	r4, r0
    142c:	000e      	movs	r6, r1
    142e:	0015      	movs	r5, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    1430:	2800      	cmp	r0, #0
    1432:	d00f      	beq.n	1454 <spi_m_async_register_callback+0x2c>
    1434:	2000      	movs	r0, #0
    1436:	2301      	movs	r3, #1
    1438:	428b      	cmp	r3, r1
    143a:	4140      	adcs	r0, r0
    143c:	b2c0      	uxtb	r0, r0
    143e:	2301      	movs	r3, #1
    1440:	4018      	ands	r0, r3
    1442:	2264      	movs	r2, #100	; 0x64
    1444:	32ff      	adds	r2, #255	; 0xff
    1446:	4909      	ldr	r1, [pc, #36]	; (146c <spi_m_async_register_callback+0x44>)
    1448:	4b09      	ldr	r3, [pc, #36]	; (1470 <spi_m_async_register_callback+0x48>)
    144a:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    144c:	2e00      	cmp	r6, #0
    144e:	d103      	bne.n	1458 <spi_m_async_register_callback+0x30>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    1450:	6325      	str	r5, [r4, #48]	; 0x30
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
	}
}
    1452:	bd70      	pop	{r4, r5, r6, pc}
    1454:	2000      	movs	r0, #0
    1456:	e7f2      	b.n	143e <spi_m_async_register_callback+0x16>
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    1458:	6365      	str	r5, [r4, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    145a:	1e6a      	subs	r2, r5, #1
    145c:	4195      	sbcs	r5, r2
    145e:	b2ea      	uxtb	r2, r5
    1460:	1d20      	adds	r0, r4, #4
    1462:	2103      	movs	r1, #3
    1464:	4b03      	ldr	r3, [pc, #12]	; (1474 <spi_m_async_register_callback+0x4c>)
    1466:	4798      	blx	r3
}
    1468:	e7f3      	b.n	1452 <spi_m_async_register_callback+0x2a>
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	00004b94 	.word	0x00004b94
    1470:	00001dc5 	.word	0x00001dc5
    1474:	00002625 	.word	0x00002625

00001478 <spi_m_async_get_io_descriptor>:

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    1478:	b570      	push	{r4, r5, r6, lr}
    147a:	0004      	movs	r4, r0
    147c:	000d      	movs	r5, r1
	ASSERT(spi && io);
    147e:	2800      	cmp	r0, #0
    1480:	d00c      	beq.n	149c <spi_m_async_get_io_descriptor+0x24>
    1482:	0008      	movs	r0, r1
    1484:	1e43      	subs	r3, r0, #1
    1486:	4198      	sbcs	r0, r3
    1488:	b2c0      	uxtb	r0, r0
    148a:	2270      	movs	r2, #112	; 0x70
    148c:	32ff      	adds	r2, #255	; 0xff
    148e:	4904      	ldr	r1, [pc, #16]	; (14a0 <spi_m_async_get_io_descriptor+0x28>)
    1490:	4b04      	ldr	r3, [pc, #16]	; (14a4 <spi_m_async_get_io_descriptor+0x2c>)
    1492:	4798      	blx	r3
	*io = &spi->io;
    1494:	3424      	adds	r4, #36	; 0x24
    1496:	602c      	str	r4, [r5, #0]
	return 0;
}
    1498:	2000      	movs	r0, #0
    149a:	bd70      	pop	{r4, r5, r6, pc}
    149c:	2000      	movs	r0, #0
    149e:	e7f4      	b.n	148a <spi_m_async_get_io_descriptor+0x12>
    14a0:	00004b94 	.word	0x00004b94
    14a4:	00001dc5 	.word	0x00001dc5

000014a8 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    14a8:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    14aa:	3808      	subs	r0, #8

	descr->stat = 0;
    14ac:	2300      	movs	r3, #0
    14ae:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    14b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    14b2:	2b00      	cmp	r3, #0
    14b4:	d000      	beq.n	14b8 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    14b6:	4798      	blx	r3
	}
}
    14b8:	bd10      	pop	{r4, pc}

000014ba <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    14ba:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    14bc:	3808      	subs	r0, #8

	descr->stat = 0;
    14be:	2300      	movs	r3, #0
    14c0:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    14c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    14c4:	2b00      	cmp	r3, #0
    14c6:	d000      	beq.n	14ca <usart_error+0x10>
		descr->usart_cb.error(descr);
    14c8:	4798      	blx	r3
	}
}
    14ca:	bd10      	pop	{r4, pc}

000014cc <usart_fill_rx_buffer>:
{
    14cc:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    14ce:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    14d0:	302c      	adds	r0, #44	; 0x2c
    14d2:	4b04      	ldr	r3, [pc, #16]	; (14e4 <usart_fill_rx_buffer+0x18>)
    14d4:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    14d6:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    14d8:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    14da:	2b00      	cmp	r3, #0
    14dc:	d001      	beq.n	14e2 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    14de:	0020      	movs	r0, r4
    14e0:	4798      	blx	r3
}
    14e2:	bd10      	pop	{r4, pc}
    14e4:	00001e69 	.word	0x00001e69

000014e8 <usart_async_write>:
{
    14e8:	b570      	push	{r4, r5, r6, lr}
    14ea:	0004      	movs	r4, r0
    14ec:	000e      	movs	r6, r1
    14ee:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    14f0:	2800      	cmp	r0, #0
    14f2:	d01d      	beq.n	1530 <usart_async_write+0x48>
    14f4:	2900      	cmp	r1, #0
    14f6:	d01d      	beq.n	1534 <usart_async_write+0x4c>
    14f8:	0010      	movs	r0, r2
    14fa:	1e43      	subs	r3, r0, #1
    14fc:	4198      	sbcs	r0, r3
    14fe:	223c      	movs	r2, #60	; 0x3c
    1500:	32ff      	adds	r2, #255	; 0xff
    1502:	490f      	ldr	r1, [pc, #60]	; (1540 <usart_async_write+0x58>)
    1504:	4b0f      	ldr	r3, [pc, #60]	; (1544 <usart_async_write+0x5c>)
    1506:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1508:	2344      	movs	r3, #68	; 0x44
    150a:	5ae2      	ldrh	r2, [r4, r3]
    150c:	3308      	adds	r3, #8
    150e:	5ae3      	ldrh	r3, [r4, r3]
    1510:	429a      	cmp	r2, r3
    1512:	d111      	bne.n	1538 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
    1514:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1516:	234c      	movs	r3, #76	; 0x4c
    1518:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
    151a:	2200      	movs	r2, #0
    151c:	3b08      	subs	r3, #8
    151e:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1520:	3b43      	subs	r3, #67	; 0x43
    1522:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1524:	0020      	movs	r0, r4
    1526:	3008      	adds	r0, #8
    1528:	4b07      	ldr	r3, [pc, #28]	; (1548 <usart_async_write+0x60>)
    152a:	4798      	blx	r3
	return (int32_t)length;
    152c:	0028      	movs	r0, r5
}
    152e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1530:	2000      	movs	r0, #0
    1532:	e7e4      	b.n	14fe <usart_async_write+0x16>
    1534:	2000      	movs	r0, #0
    1536:	e7e2      	b.n	14fe <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
    1538:	201c      	movs	r0, #28
    153a:	4240      	negs	r0, r0
    153c:	e7f7      	b.n	152e <usart_async_write+0x46>
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	00004bb4 	.word	0x00004bb4
    1544:	00001dc5 	.word	0x00001dc5
    1548:	000021bd 	.word	0x000021bd

0000154c <usart_process_byte_sent>:
{
    154c:	b570      	push	{r4, r5, r6, lr}
    154e:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1550:	0001      	movs	r1, r0
    1552:	3908      	subs	r1, #8
    1554:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1556:	224c      	movs	r2, #76	; 0x4c
    1558:	5a8a      	ldrh	r2, [r1, r2]
    155a:	429a      	cmp	r2, r3
    155c:	d00c      	beq.n	1578 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    155e:	000a      	movs	r2, r1
    1560:	6c89      	ldr	r1, [r1, #72]	; 0x48
    1562:	1c5d      	adds	r5, r3, #1
    1564:	2044      	movs	r0, #68	; 0x44
    1566:	5215      	strh	r5, [r2, r0]
    1568:	5cc9      	ldrb	r1, [r1, r3]
    156a:	0020      	movs	r0, r4
    156c:	4b04      	ldr	r3, [pc, #16]	; (1580 <usart_process_byte_sent+0x34>)
    156e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1570:	0020      	movs	r0, r4
    1572:	4b04      	ldr	r3, [pc, #16]	; (1584 <usart_process_byte_sent+0x38>)
    1574:	4798      	blx	r3
}
    1576:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1578:	4b03      	ldr	r3, [pc, #12]	; (1588 <usart_process_byte_sent+0x3c>)
    157a:	4798      	blx	r3
}
    157c:	e7fb      	b.n	1576 <usart_process_byte_sent+0x2a>
    157e:	46c0      	nop			; (mov r8, r8)
    1580:	000021b5 	.word	0x000021b5
    1584:	000021bd 	.word	0x000021bd
    1588:	000021c5 	.word	0x000021c5

0000158c <usart_async_read>:
{
    158c:	b5f0      	push	{r4, r5, r6, r7, lr}
    158e:	46ce      	mov	lr, r9
    1590:	4647      	mov	r7, r8
    1592:	b580      	push	{r7, lr}
    1594:	b085      	sub	sp, #20
    1596:	0005      	movs	r5, r0
    1598:	000e      	movs	r6, r1
    159a:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
    159c:	2800      	cmp	r0, #0
    159e:	d015      	beq.n	15cc <usart_async_read+0x40>
    15a0:	2900      	cmp	r1, #0
    15a2:	d013      	beq.n	15cc <usart_async_read+0x40>
    15a4:	2a00      	cmp	r2, #0
    15a6:	d12a      	bne.n	15fe <usart_async_read+0x72>
    15a8:	22ac      	movs	r2, #172	; 0xac
    15aa:	0052      	lsls	r2, r2, #1
    15ac:	4929      	ldr	r1, [pc, #164]	; (1654 <usart_async_read+0xc8>)
    15ae:	2000      	movs	r0, #0
    15b0:	4b29      	ldr	r3, [pc, #164]	; (1658 <usart_async_read+0xcc>)
    15b2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    15b4:	a803      	add	r0, sp, #12
    15b6:	4b29      	ldr	r3, [pc, #164]	; (165c <usart_async_read+0xd0>)
    15b8:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    15ba:	0028      	movs	r0, r5
    15bc:	3034      	adds	r0, #52	; 0x34
    15be:	4b28      	ldr	r3, [pc, #160]	; (1660 <usart_async_read+0xd4>)
    15c0:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    15c2:	a803      	add	r0, sp, #12
    15c4:	4b27      	ldr	r3, [pc, #156]	; (1664 <usart_async_read+0xd8>)
    15c6:	4798      	blx	r3
	uint16_t                       was_read = 0;
    15c8:	2500      	movs	r5, #0
	return (int32_t)was_read;
    15ca:	e03c      	b.n	1646 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
    15cc:	22ac      	movs	r2, #172	; 0xac
    15ce:	0052      	lsls	r2, r2, #1
    15d0:	4920      	ldr	r1, [pc, #128]	; (1654 <usart_async_read+0xc8>)
    15d2:	2000      	movs	r0, #0
    15d4:	4b20      	ldr	r3, [pc, #128]	; (1658 <usart_async_read+0xcc>)
    15d6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    15d8:	a803      	add	r0, sp, #12
    15da:	4b20      	ldr	r3, [pc, #128]	; (165c <usart_async_read+0xd0>)
    15dc:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    15de:	3534      	adds	r5, #52	; 0x34
    15e0:	0028      	movs	r0, r5
    15e2:	9501      	str	r5, [sp, #4]
    15e4:	4b1e      	ldr	r3, [pc, #120]	; (1660 <usart_async_read+0xd4>)
    15e6:	4798      	blx	r3
    15e8:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    15ea:	a803      	add	r0, sp, #12
    15ec:	4b1d      	ldr	r3, [pc, #116]	; (1664 <usart_async_read+0xd8>)
    15ee:	4798      	blx	r3
	uint16_t                       was_read = 0;
    15f0:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    15f2:	4643      	mov	r3, r8
    15f4:	2b00      	cmp	r3, #0
    15f6:	d026      	beq.n	1646 <usart_async_read+0xba>
    15f8:	2f00      	cmp	r7, #0
    15fa:	d116      	bne.n	162a <usart_async_read+0x9e>
    15fc:	e023      	b.n	1646 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
    15fe:	22ac      	movs	r2, #172	; 0xac
    1600:	0052      	lsls	r2, r2, #1
    1602:	4914      	ldr	r1, [pc, #80]	; (1654 <usart_async_read+0xc8>)
    1604:	2001      	movs	r0, #1
    1606:	4b14      	ldr	r3, [pc, #80]	; (1658 <usart_async_read+0xcc>)
    1608:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    160a:	a803      	add	r0, sp, #12
    160c:	4b13      	ldr	r3, [pc, #76]	; (165c <usart_async_read+0xd0>)
    160e:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1610:	3534      	adds	r5, #52	; 0x34
    1612:	0028      	movs	r0, r5
    1614:	9501      	str	r5, [sp, #4]
    1616:	4b12      	ldr	r3, [pc, #72]	; (1660 <usart_async_read+0xd4>)
    1618:	4798      	blx	r3
    161a:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    161c:	a803      	add	r0, sp, #12
    161e:	4b11      	ldr	r3, [pc, #68]	; (1664 <usart_async_read+0xd8>)
    1620:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1622:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
    1624:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1626:	2b00      	cmp	r3, #0
    1628:	d00d      	beq.n	1646 <usart_async_read+0xba>
{
    162a:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    162c:	4b0e      	ldr	r3, [pc, #56]	; (1668 <usart_async_read+0xdc>)
    162e:	4699      	mov	r9, r3
    1630:	1c65      	adds	r5, r4, #1
    1632:	b2ad      	uxth	r5, r5
    1634:	1931      	adds	r1, r6, r4
    1636:	9801      	ldr	r0, [sp, #4]
    1638:	47c8      	blx	r9
    163a:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    163c:	4544      	cmp	r4, r8
    163e:	d202      	bcs.n	1646 <usart_async_read+0xba>
    1640:	b2a3      	uxth	r3, r4
    1642:	429f      	cmp	r7, r3
    1644:	d8f4      	bhi.n	1630 <usart_async_read+0xa4>
}
    1646:	0028      	movs	r0, r5
    1648:	b005      	add	sp, #20
    164a:	bc0c      	pop	{r2, r3}
    164c:	4690      	mov	r8, r2
    164e:	4699      	mov	r9, r3
    1650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1652:	46c0      	nop			; (mov r8, r8)
    1654:	00004bb4 	.word	0x00004bb4
    1658:	00001dc5 	.word	0x00001dc5
    165c:	00003ad5 	.word	0x00003ad5
    1660:	00001ea9 	.word	0x00001ea9
    1664:	00003ae3 	.word	0x00003ae3
    1668:	00001e21 	.word	0x00001e21

0000166c <usart_async_init>:
{
    166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    166e:	0004      	movs	r4, r0
    1670:	000d      	movs	r5, r1
    1672:	0016      	movs	r6, r2
    1674:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1676:	2800      	cmp	r0, #0
    1678:	d026      	beq.n	16c8 <usart_async_init+0x5c>
    167a:	2900      	cmp	r1, #0
    167c:	d026      	beq.n	16cc <usart_async_init+0x60>
    167e:	2a00      	cmp	r2, #0
    1680:	d026      	beq.n	16d0 <usart_async_init+0x64>
    1682:	0018      	movs	r0, r3
    1684:	1e43      	subs	r3, r0, #1
    1686:	4198      	sbcs	r0, r3
    1688:	223a      	movs	r2, #58	; 0x3a
    168a:	4914      	ldr	r1, [pc, #80]	; (16dc <usart_async_init+0x70>)
    168c:	4b14      	ldr	r3, [pc, #80]	; (16e0 <usart_async_init+0x74>)
    168e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1690:	0020      	movs	r0, r4
    1692:	3034      	adds	r0, #52	; 0x34
    1694:	003a      	movs	r2, r7
    1696:	0031      	movs	r1, r6
    1698:	4b12      	ldr	r3, [pc, #72]	; (16e4 <usart_async_init+0x78>)
    169a:	4798      	blx	r3
    169c:	2800      	cmp	r0, #0
    169e:	d119      	bne.n	16d4 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
    16a0:	0020      	movs	r0, r4
    16a2:	3008      	adds	r0, #8
    16a4:	0029      	movs	r1, r5
    16a6:	4b10      	ldr	r3, [pc, #64]	; (16e8 <usart_async_init+0x7c>)
    16a8:	4798      	blx	r3
	if (init_status) {
    16aa:	2800      	cmp	r0, #0
    16ac:	d10b      	bne.n	16c6 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    16ae:	4b0f      	ldr	r3, [pc, #60]	; (16ec <usart_async_init+0x80>)
    16b0:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    16b2:	4b0f      	ldr	r3, [pc, #60]	; (16f0 <usart_async_init+0x84>)
    16b4:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    16b6:	4b0f      	ldr	r3, [pc, #60]	; (16f4 <usart_async_init+0x88>)
    16b8:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    16ba:	4b0f      	ldr	r3, [pc, #60]	; (16f8 <usart_async_init+0x8c>)
    16bc:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    16be:	4b0f      	ldr	r3, [pc, #60]	; (16fc <usart_async_init+0x90>)
    16c0:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    16c2:	4b0f      	ldr	r3, [pc, #60]	; (1700 <usart_async_init+0x94>)
    16c4:	6163      	str	r3, [r4, #20]
}
    16c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    16c8:	2000      	movs	r0, #0
    16ca:	e7dd      	b.n	1688 <usart_async_init+0x1c>
    16cc:	2000      	movs	r0, #0
    16ce:	e7db      	b.n	1688 <usart_async_init+0x1c>
    16d0:	2000      	movs	r0, #0
    16d2:	e7d9      	b.n	1688 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
    16d4:	200d      	movs	r0, #13
    16d6:	4240      	negs	r0, r0
    16d8:	e7f5      	b.n	16c6 <usart_async_init+0x5a>
    16da:	46c0      	nop			; (mov r8, r8)
    16dc:	00004bb4 	.word	0x00004bb4
    16e0:	00001dc5 	.word	0x00001dc5
    16e4:	00001dcd 	.word	0x00001dcd
    16e8:	00002119 	.word	0x00002119
    16ec:	0000158d 	.word	0x0000158d
    16f0:	000014e9 	.word	0x000014e9
    16f4:	0000154d 	.word	0x0000154d
    16f8:	000014cd 	.word	0x000014cd
    16fc:	000014a9 	.word	0x000014a9
    1700:	000014bb 	.word	0x000014bb

00001704 <usart_async_enable>:
{
    1704:	b510      	push	{r4, lr}
    1706:	0004      	movs	r4, r0
	ASSERT(descr);
    1708:	1e43      	subs	r3, r0, #1
    170a:	4198      	sbcs	r0, r3
    170c:	b2c0      	uxtb	r0, r0
    170e:	2261      	movs	r2, #97	; 0x61
    1710:	4904      	ldr	r1, [pc, #16]	; (1724 <usart_async_enable+0x20>)
    1712:	4b05      	ldr	r3, [pc, #20]	; (1728 <usart_async_enable+0x24>)
    1714:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1716:	0020      	movs	r0, r4
    1718:	3008      	adds	r0, #8
    171a:	4b04      	ldr	r3, [pc, #16]	; (172c <usart_async_enable+0x28>)
    171c:	4798      	blx	r3
}
    171e:	2000      	movs	r0, #0
    1720:	bd10      	pop	{r4, pc}
    1722:	46c0      	nop			; (mov r8, r8)
    1724:	00004bb4 	.word	0x00004bb4
    1728:	00001dc5 	.word	0x00001dc5
    172c:	0000218d 	.word	0x0000218d

00001730 <usart_async_disable>:
{
    1730:	b510      	push	{r4, lr}
    1732:	0004      	movs	r4, r0
	ASSERT(descr);
    1734:	1e43      	subs	r3, r0, #1
    1736:	4198      	sbcs	r0, r3
    1738:	b2c0      	uxtb	r0, r0
    173a:	226c      	movs	r2, #108	; 0x6c
    173c:	4904      	ldr	r1, [pc, #16]	; (1750 <usart_async_disable+0x20>)
    173e:	4b05      	ldr	r3, [pc, #20]	; (1754 <usart_async_disable+0x24>)
    1740:	4798      	blx	r3
	_usart_async_disable(&descr->device);
    1742:	0020      	movs	r0, r4
    1744:	3008      	adds	r0, #8
    1746:	4b04      	ldr	r3, [pc, #16]	; (1758 <usart_async_disable+0x28>)
    1748:	4798      	blx	r3
}
    174a:	2000      	movs	r0, #0
    174c:	bd10      	pop	{r4, pc}
    174e:	46c0      	nop			; (mov r8, r8)
    1750:	00004bb4 	.word	0x00004bb4
    1754:	00001dc5 	.word	0x00001dc5
    1758:	000021a1 	.word	0x000021a1

0000175c <usart_async_get_io_descriptor>:
{
    175c:	b570      	push	{r4, r5, r6, lr}
    175e:	0004      	movs	r4, r0
    1760:	000d      	movs	r5, r1
	ASSERT(descr && io);
    1762:	2800      	cmp	r0, #0
    1764:	d00a      	beq.n	177c <usart_async_get_io_descriptor+0x20>
    1766:	0008      	movs	r0, r1
    1768:	1e43      	subs	r3, r0, #1
    176a:	4198      	sbcs	r0, r3
    176c:	b2c0      	uxtb	r0, r0
    176e:	2277      	movs	r2, #119	; 0x77
    1770:	4903      	ldr	r1, [pc, #12]	; (1780 <usart_async_get_io_descriptor+0x24>)
    1772:	4b04      	ldr	r3, [pc, #16]	; (1784 <usart_async_get_io_descriptor+0x28>)
    1774:	4798      	blx	r3
	*io = &descr->io;
    1776:	602c      	str	r4, [r5, #0]
}
    1778:	2000      	movs	r0, #0
    177a:	bd70      	pop	{r4, r5, r6, pc}
    177c:	2000      	movs	r0, #0
    177e:	e7f6      	b.n	176e <usart_async_get_io_descriptor+0x12>
    1780:	00004bb4 	.word	0x00004bb4
    1784:	00001dc5 	.word	0x00001dc5

00001788 <usart_async_register_callback>:
{
    1788:	b570      	push	{r4, r5, r6, lr}
    178a:	0005      	movs	r5, r0
    178c:	000e      	movs	r6, r1
    178e:	0014      	movs	r4, r2
	ASSERT(descr);
    1790:	1e43      	subs	r3, r0, #1
    1792:	4198      	sbcs	r0, r3
    1794:	b2c0      	uxtb	r0, r0
    1796:	2283      	movs	r2, #131	; 0x83
    1798:	4916      	ldr	r1, [pc, #88]	; (17f4 <usart_async_register_callback+0x6c>)
    179a:	4b17      	ldr	r3, [pc, #92]	; (17f8 <usart_async_register_callback+0x70>)
    179c:	4798      	blx	r3
	switch (type) {
    179e:	2e01      	cmp	r6, #1
    17a0:	d011      	beq.n	17c6 <usart_async_register_callback+0x3e>
    17a2:	2e00      	cmp	r6, #0
    17a4:	d004      	beq.n	17b0 <usart_async_register_callback+0x28>
    17a6:	2e02      	cmp	r6, #2
    17a8:	d018      	beq.n	17dc <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
    17aa:	200d      	movs	r0, #13
    17ac:	4240      	negs	r0, r0
    17ae:	e009      	b.n	17c4 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
    17b0:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    17b2:	1e62      	subs	r2, r4, #1
    17b4:	4194      	sbcs	r4, r2
    17b6:	b2e2      	uxtb	r2, r4
    17b8:	0028      	movs	r0, r5
    17ba:	3008      	adds	r0, #8
    17bc:	2101      	movs	r1, #1
    17be:	4b0f      	ldr	r3, [pc, #60]	; (17fc <usart_async_register_callback+0x74>)
    17c0:	4798      	blx	r3
	return ERR_NONE;
    17c2:	2000      	movs	r0, #0
}
    17c4:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    17c6:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    17c8:	1e62      	subs	r2, r4, #1
    17ca:	4194      	sbcs	r4, r2
    17cc:	b2e2      	uxtb	r2, r4
    17ce:	0028      	movs	r0, r5
    17d0:	3008      	adds	r0, #8
    17d2:	2102      	movs	r1, #2
    17d4:	4b09      	ldr	r3, [pc, #36]	; (17fc <usart_async_register_callback+0x74>)
    17d6:	4798      	blx	r3
	return ERR_NONE;
    17d8:	2000      	movs	r0, #0
		break;
    17da:	e7f3      	b.n	17c4 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
    17dc:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    17de:	1e62      	subs	r2, r4, #1
    17e0:	4194      	sbcs	r4, r2
    17e2:	b2e2      	uxtb	r2, r4
    17e4:	0028      	movs	r0, r5
    17e6:	3008      	adds	r0, #8
    17e8:	2103      	movs	r1, #3
    17ea:	4b04      	ldr	r3, [pc, #16]	; (17fc <usart_async_register_callback+0x74>)
    17ec:	4798      	blx	r3
	return ERR_NONE;
    17ee:	2000      	movs	r0, #0
		break;
    17f0:	e7e8      	b.n	17c4 <usart_async_register_callback+0x3c>
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	00004bb4 	.word	0x00004bb4
    17f8:	00001dc5 	.word	0x00001dc5
    17fc:	000021cd 	.word	0x000021cd

00001800 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    1800:	b5f0      	push	{r4, r5, r6, r7, lr}
    1802:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1804:	4b0e      	ldr	r3, [pc, #56]	; (1840 <_usb_d_find_ep+0x40>)
    1806:	785a      	ldrb	r2, [r3, #1]
    1808:	4290      	cmp	r0, r2
    180a:	d017      	beq.n	183c <_usb_d_find_ep+0x3c>
    180c:	2300      	movs	r3, #0
    180e:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1810:	4f0b      	ldr	r7, [pc, #44]	; (1840 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1812:	260f      	movs	r6, #15
    1814:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1816:	003d      	movs	r5, r7
    1818:	e008      	b.n	182c <_usb_d_find_ep+0x2c>
    181a:	3001      	adds	r0, #1
    181c:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    181e:	2804      	cmp	r0, #4
    1820:	d00a      	beq.n	1838 <_usb_d_find_ep+0x38>
    1822:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1824:	18ea      	adds	r2, r5, r3
    1826:	7852      	ldrb	r2, [r2, #1]
    1828:	42a2      	cmp	r2, r4
    182a:	d006      	beq.n	183a <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    182c:	5dd9      	ldrb	r1, [r3, r7]
    182e:	2900      	cmp	r1, #0
    1830:	d1f3      	bne.n	181a <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1832:	4296      	cmp	r6, r2
    1834:	d1f1      	bne.n	181a <_usb_d_find_ep+0x1a>
    1836:	e000      	b.n	183a <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
    1838:	3805      	subs	r0, #5
}
    183a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    183c:	2000      	movs	r0, #0
    183e:	e7fc      	b.n	183a <_usb_d_find_ep+0x3a>
    1840:	2000055c 	.word	0x2000055c

00001844 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1844:	2000      	movs	r0, #0
    1846:	4770      	bx	lr

00001848 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1848:	b570      	push	{r4, r5, r6, lr}
    184a:	0004      	movs	r4, r0
    184c:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    184e:	4b0a      	ldr	r3, [pc, #40]	; (1878 <usb_d_cb_trans_more+0x30>)
    1850:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1852:	0142      	lsls	r2, r0, #5
    1854:	4b09      	ldr	r3, [pc, #36]	; (187c <usb_d_cb_trans_more+0x34>)
    1856:	189b      	adds	r3, r3, r2
    1858:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    185a:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    185c:	2a03      	cmp	r2, #3
    185e:	d001      	beq.n	1864 <usb_d_cb_trans_more+0x1c>
}
    1860:	0018      	movs	r0, r3
    1862:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    1864:	0140      	lsls	r0, r0, #5
    1866:	4b05      	ldr	r3, [pc, #20]	; (187c <usb_d_cb_trans_more+0x34>)
    1868:	1818      	adds	r0, r3, r0
    186a:	6983      	ldr	r3, [r0, #24]
    186c:	0029      	movs	r1, r5
    186e:	0020      	movs	r0, r4
    1870:	4798      	blx	r3
    1872:	0003      	movs	r3, r0
    1874:	e7f4      	b.n	1860 <usb_d_cb_trans_more+0x18>
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	00001801 	.word	0x00001801
    187c:	2000055c 	.word	0x2000055c

00001880 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1880:	b5f0      	push	{r4, r5, r6, r7, lr}
    1882:	b085      	sub	sp, #20
    1884:	0005      	movs	r5, r0
    1886:	000f      	movs	r7, r1
    1888:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    188a:	4b51      	ldr	r3, [pc, #324]	; (19d0 <_usb_d_cb_trans_done+0x150>)
    188c:	4798      	blx	r3
    188e:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1890:	2f00      	cmp	r7, #0
    1892:	d162      	bne.n	195a <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1894:	4b4f      	ldr	r3, [pc, #316]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    1896:	0142      	lsls	r2, r0, #5
    1898:	1899      	adds	r1, r3, r2
    189a:	2000      	movs	r0, #0
    189c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    189e:	5cd3      	ldrb	r3, [r2, r3]
    18a0:	2b00      	cmp	r3, #0
    18a2:	d00e      	beq.n	18c2 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    18a4:	0162      	lsls	r2, r4, #5
    18a6:	4b4b      	ldr	r3, [pc, #300]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    18a8:	189b      	adds	r3, r3, r2
    18aa:	2201      	movs	r2, #1
    18ac:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    18ae:	0164      	lsls	r4, r4, #5
    18b0:	4b48      	ldr	r3, [pc, #288]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    18b2:	191c      	adds	r4, r3, r4
    18b4:	78e1      	ldrb	r1, [r4, #3]
    18b6:	69e3      	ldr	r3, [r4, #28]
    18b8:	0032      	movs	r2, r6
    18ba:	0028      	movs	r0, r5
    18bc:	4798      	blx	r3
}
    18be:	b005      	add	sp, #20
    18c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    18c2:	788b      	ldrb	r3, [r1, #2]
    18c4:	2b03      	cmp	r3, #3
    18c6:	d00c      	beq.n	18e2 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    18c8:	4b42      	ldr	r3, [pc, #264]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    18ca:	0162      	lsls	r2, r4, #5
    18cc:	320c      	adds	r2, #12
    18ce:	189a      	adds	r2, r3, r2
    18d0:	0164      	lsls	r4, r4, #5
    18d2:	191c      	adds	r4, r3, r4
    18d4:	7860      	ldrb	r0, [r4, #1]
    18d6:	2100      	movs	r1, #0
    18d8:	69e3      	ldr	r3, [r4, #28]
    18da:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    18dc:	2302      	movs	r3, #2
    18de:	70a3      	strb	r3, [r4, #2]
    18e0:	e7ed      	b.n	18be <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    18e2:	4a3c      	ldr	r2, [pc, #240]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    18e4:	000b      	movs	r3, r1
    18e6:	250c      	movs	r5, #12
    18e8:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    18ea:	0161      	lsls	r1, r4, #5
    18ec:	310c      	adds	r1, #12
    18ee:	1852      	adds	r2, r2, r1
    18f0:	7858      	ldrb	r0, [r3, #1]
    18f2:	69db      	ldr	r3, [r3, #28]
    18f4:	2101      	movs	r1, #1
    18f6:	4798      	blx	r3
		if (err) {
    18f8:	2800      	cmp	r0, #0
    18fa:	d017      	beq.n	192c <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    18fc:	0162      	lsls	r2, r4, #5
    18fe:	4b35      	ldr	r3, [pc, #212]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    1900:	189b      	adds	r3, r3, r2
    1902:	2205      	movs	r2, #5
    1904:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1906:	3a03      	subs	r2, #3
    1908:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    190a:	2d00      	cmp	r5, #0
    190c:	db09      	blt.n	1922 <_usb_d_cb_trans_done+0xa2>
    190e:	0164      	lsls	r4, r4, #5
    1910:	4b30      	ldr	r3, [pc, #192]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    1912:	191c      	adds	r4, r3, r4
    1914:	7860      	ldrb	r0, [r4, #1]
    1916:	2380      	movs	r3, #128	; 0x80
    1918:	4318      	orrs	r0, r3
    191a:	2101      	movs	r1, #1
    191c:	4b2e      	ldr	r3, [pc, #184]	; (19d8 <_usb_d_cb_trans_done+0x158>)
    191e:	4798      	blx	r3
    1920:	e7cd      	b.n	18be <_usb_d_cb_trans_done+0x3e>
    1922:	0164      	lsls	r4, r4, #5
    1924:	4b2b      	ldr	r3, [pc, #172]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    1926:	191c      	adds	r4, r3, r4
    1928:	7860      	ldrb	r0, [r4, #1]
    192a:	e7f6      	b.n	191a <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    192c:	0164      	lsls	r4, r4, #5
    192e:	4b29      	ldr	r3, [pc, #164]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    1930:	191c      	adds	r4, r3, r4
    1932:	2304      	movs	r3, #4
    1934:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1936:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    1938:	2200      	movs	r2, #0
    193a:	9201      	str	r2, [sp, #4]
    193c:	9202      	str	r2, [sp, #8]
    193e:	2d00      	cmp	r5, #0
    1940:	db08      	blt.n	1954 <_usb_d_cb_trans_done+0xd4>
    1942:	3280      	adds	r2, #128	; 0x80
    1944:	4313      	orrs	r3, r2
    1946:	a801      	add	r0, sp, #4
    1948:	7203      	strb	r3, [r0, #8]
    194a:	2301      	movs	r3, #1
    194c:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    194e:	4b23      	ldr	r3, [pc, #140]	; (19dc <_usb_d_cb_trans_done+0x15c>)
    1950:	4798      	blx	r3
    1952:	e7b4      	b.n	18be <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
    1954:	220f      	movs	r2, #15
    1956:	4013      	ands	r3, r2
    1958:	e7f5      	b.n	1946 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
    195a:	2f01      	cmp	r7, #1
    195c:	d00a      	beq.n	1974 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
    195e:	2f02      	cmp	r7, #2
    1960:	d01d      	beq.n	199e <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
    1962:	2f03      	cmp	r7, #3
    1964:	d02c      	beq.n	19c0 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1966:	0142      	lsls	r2, r0, #5
    1968:	4b1a      	ldr	r3, [pc, #104]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    196a:	189b      	adds	r3, r3, r2
    196c:	2206      	movs	r2, #6
    196e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1970:	70da      	strb	r2, [r3, #3]
    1972:	e79c      	b.n	18ae <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1974:	4b17      	ldr	r3, [pc, #92]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    1976:	0142      	lsls	r2, r0, #5
    1978:	1899      	adds	r1, r3, r2
    197a:	2002      	movs	r0, #2
    197c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    197e:	5cd3      	ldrb	r3, [r2, r3]
    1980:	2b00      	cmp	r3, #0
    1982:	d005      	beq.n	1990 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1984:	0162      	lsls	r2, r4, #5
    1986:	4b13      	ldr	r3, [pc, #76]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    1988:	189b      	adds	r3, r3, r2
    198a:	2205      	movs	r2, #5
    198c:	709a      	strb	r2, [r3, #2]
    198e:	e78e      	b.n	18ae <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1990:	2202      	movs	r2, #2
    1992:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1994:	2100      	movs	r1, #0
    1996:	0028      	movs	r0, r5
    1998:	4b0f      	ldr	r3, [pc, #60]	; (19d8 <_usb_d_cb_trans_done+0x158>)
    199a:	4798      	blx	r3
    199c:	e787      	b.n	18ae <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    199e:	4b0d      	ldr	r3, [pc, #52]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    19a0:	0142      	lsls	r2, r0, #5
    19a2:	1899      	adds	r1, r3, r2
    19a4:	2004      	movs	r0, #4
    19a6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    19a8:	5cd3      	ldrb	r3, [r2, r3]
    19aa:	2b00      	cmp	r3, #0
    19ac:	d005      	beq.n	19ba <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    19ae:	0162      	lsls	r2, r4, #5
    19b0:	4b08      	ldr	r3, [pc, #32]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    19b2:	189b      	adds	r3, r3, r2
    19b4:	2201      	movs	r2, #1
    19b6:	709a      	strb	r2, [r3, #2]
    19b8:	e779      	b.n	18ae <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    19ba:	2302      	movs	r3, #2
    19bc:	708b      	strb	r3, [r1, #2]
			return;
    19be:	e77e      	b.n	18be <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    19c0:	0142      	lsls	r2, r0, #5
    19c2:	4b04      	ldr	r3, [pc, #16]	; (19d4 <_usb_d_cb_trans_done+0x154>)
    19c4:	189b      	adds	r3, r3, r2
    19c6:	2200      	movs	r2, #0
    19c8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    19ca:	3205      	adds	r2, #5
    19cc:	70da      	strb	r2, [r3, #3]
    19ce:	e76e      	b.n	18ae <_usb_d_cb_trans_done+0x2e>
    19d0:	00001801 	.word	0x00001801
    19d4:	2000055c 	.word	0x2000055c
    19d8:	0000341d 	.word	0x0000341d
    19dc:	000035f1 	.word	0x000035f1

000019e0 <usb_d_cb_trans_setup>:
{
    19e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19e2:	46c6      	mov	lr, r8
    19e4:	b500      	push	{lr}
    19e6:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    19e8:	4b1d      	ldr	r3, [pc, #116]	; (1a60 <usb_d_cb_trans_setup+0x80>)
    19ea:	4798      	blx	r3
    19ec:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    19ee:	0145      	lsls	r5, r0, #5
    19f0:	350c      	adds	r5, #12
    19f2:	4b1c      	ldr	r3, [pc, #112]	; (1a64 <usb_d_cb_trans_setup+0x84>)
    19f4:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    19f6:	0029      	movs	r1, r5
    19f8:	0020      	movs	r0, r4
    19fa:	4b1b      	ldr	r3, [pc, #108]	; (1a68 <usb_d_cb_trans_setup+0x88>)
    19fc:	4798      	blx	r3
	if (n != 8) {
    19fe:	b2c0      	uxtb	r0, r0
    1a00:	2808      	cmp	r0, #8
    1a02:	d00a      	beq.n	1a1a <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1a04:	2101      	movs	r1, #1
    1a06:	0020      	movs	r0, r4
    1a08:	4d18      	ldr	r5, [pc, #96]	; (1a6c <usb_d_cb_trans_setup+0x8c>)
    1a0a:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1a0c:	2080      	movs	r0, #128	; 0x80
    1a0e:	4320      	orrs	r0, r4
    1a10:	2101      	movs	r1, #1
    1a12:	47a8      	blx	r5
}
    1a14:	bc04      	pop	{r2}
    1a16:	4690      	mov	r8, r2
    1a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1a1a:	2100      	movs	r1, #0
    1a1c:	0020      	movs	r0, r4
    1a1e:	4b13      	ldr	r3, [pc, #76]	; (1a6c <usb_d_cb_trans_setup+0x8c>)
    1a20:	4698      	mov	r8, r3
    1a22:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1a24:	2780      	movs	r7, #128	; 0x80
    1a26:	4327      	orrs	r7, r4
    1a28:	2100      	movs	r1, #0
    1a2a:	0038      	movs	r0, r7
    1a2c:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1a2e:	0172      	lsls	r2, r6, #5
    1a30:	4b0c      	ldr	r3, [pc, #48]	; (1a64 <usb_d_cb_trans_setup+0x84>)
    1a32:	189b      	adds	r3, r3, r2
    1a34:	2201      	movs	r2, #1
    1a36:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1a38:	695b      	ldr	r3, [r3, #20]
    1a3a:	0029      	movs	r1, r5
    1a3c:	0020      	movs	r0, r4
    1a3e:	4798      	blx	r3
    1a40:	2800      	cmp	r0, #0
    1a42:	d1e7      	bne.n	1a14 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1a44:	0176      	lsls	r6, r6, #5
    1a46:	4b07      	ldr	r3, [pc, #28]	; (1a64 <usb_d_cb_trans_setup+0x84>)
    1a48:	199e      	adds	r6, r3, r6
    1a4a:	2305      	movs	r3, #5
    1a4c:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1a4e:	2101      	movs	r1, #1
    1a50:	0020      	movs	r0, r4
    1a52:	4c06      	ldr	r4, [pc, #24]	; (1a6c <usb_d_cb_trans_setup+0x8c>)
    1a54:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1a56:	2101      	movs	r1, #1
    1a58:	0038      	movs	r0, r7
    1a5a:	47a0      	blx	r4
    1a5c:	e7da      	b.n	1a14 <usb_d_cb_trans_setup+0x34>
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	00001801 	.word	0x00001801
    1a64:	2000055c 	.word	0x2000055c
    1a68:	00003581 	.word	0x00003581
    1a6c:	0000341d 	.word	0x0000341d

00001a70 <usb_d_init>:

int32_t usb_d_init(void)
{
    1a70:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1a72:	4b10      	ldr	r3, [pc, #64]	; (1ab4 <usb_d_init+0x44>)
    1a74:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1a76:	2800      	cmp	r0, #0
    1a78:	db1b      	blt.n	1ab2 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1a7a:	4c0f      	ldr	r4, [pc, #60]	; (1ab8 <usb_d_init+0x48>)
    1a7c:	2280      	movs	r2, #128	; 0x80
    1a7e:	2100      	movs	r1, #0
    1a80:	0020      	movs	r0, r4
    1a82:	4b0e      	ldr	r3, [pc, #56]	; (1abc <usb_d_init+0x4c>)
    1a84:	4798      	blx	r3
    1a86:	0023      	movs	r3, r4
    1a88:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1a8a:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1a8c:	4a0c      	ldr	r2, [pc, #48]	; (1ac0 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1a8e:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1a90:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1a92:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1a94:	61da      	str	r2, [r3, #28]
    1a96:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1a98:	42a3      	cmp	r3, r4
    1a9a:	d1f8      	bne.n	1a8e <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1a9c:	4909      	ldr	r1, [pc, #36]	; (1ac4 <usb_d_init+0x54>)
    1a9e:	2000      	movs	r0, #0
    1aa0:	4c09      	ldr	r4, [pc, #36]	; (1ac8 <usb_d_init+0x58>)
    1aa2:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1aa4:	4909      	ldr	r1, [pc, #36]	; (1acc <usb_d_init+0x5c>)
    1aa6:	2001      	movs	r0, #1
    1aa8:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1aaa:	4909      	ldr	r1, [pc, #36]	; (1ad0 <usb_d_init+0x60>)
    1aac:	2002      	movs	r0, #2
    1aae:	47a0      	blx	r4
	return ERR_NONE;
    1ab0:	2000      	movs	r0, #0
}
    1ab2:	bd10      	pop	{r4, pc}
    1ab4:	00002dfd 	.word	0x00002dfd
    1ab8:	2000055c 	.word	0x2000055c
    1abc:	00004911 	.word	0x00004911
    1ac0:	00001845 	.word	0x00001845
    1ac4:	000019e1 	.word	0x000019e1
    1ac8:	00003829 	.word	0x00003829
    1acc:	00001849 	.word	0x00001849
    1ad0:	00001881 	.word	0x00001881

00001ad4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1ad4:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1ad6:	4b01      	ldr	r3, [pc, #4]	; (1adc <usb_d_register_callback+0x8>)
    1ad8:	4798      	blx	r3
}
    1ada:	bd10      	pop	{r4, pc}
    1adc:	00003805 	.word	0x00003805

00001ae0 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    1ae0:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    1ae2:	4b01      	ldr	r3, [pc, #4]	; (1ae8 <usb_d_enable+0x8>)
    1ae4:	4798      	blx	r3
}
    1ae6:	bd10      	pop	{r4, pc}
    1ae8:	00002ed9 	.word	0x00002ed9

00001aec <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    1aec:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    1aee:	4b01      	ldr	r3, [pc, #4]	; (1af4 <usb_d_attach+0x8>)
    1af0:	4798      	blx	r3
}
    1af2:	bd10      	pop	{r4, pc}
    1af4:	00002f29 	.word	0x00002f29

00001af8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1af8:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    1afa:	4b01      	ldr	r3, [pc, #4]	; (1b00 <usb_d_set_address+0x8>)
    1afc:	4798      	blx	r3
}
    1afe:	bd10      	pop	{r4, pc}
    1b00:	00002f39 	.word	0x00002f39

00001b04 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b06:	0005      	movs	r5, r0
    1b08:	000e      	movs	r6, r1
    1b0a:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b0c:	4b0f      	ldr	r3, [pc, #60]	; (1b4c <usb_d_ep_init+0x48>)
    1b0e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1b10:	2800      	cmp	r0, #0
    1b12:	da14      	bge.n	1b3e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1b14:	20ff      	movs	r0, #255	; 0xff
    1b16:	4b0d      	ldr	r3, [pc, #52]	; (1b4c <usb_d_ep_init+0x48>)
    1b18:	4798      	blx	r3
    1b1a:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    1b1c:	db12      	blt.n	1b44 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1b1e:	003a      	movs	r2, r7
    1b20:	0031      	movs	r1, r6
    1b22:	0028      	movs	r0, r5
    1b24:	4b0a      	ldr	r3, [pc, #40]	; (1b50 <usb_d_ep_init+0x4c>)
    1b26:	4798      	blx	r3
	if (rc < 0) {
    1b28:	2800      	cmp	r0, #0
    1b2a:	db07      	blt.n	1b3c <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1b2c:	4a09      	ldr	r2, [pc, #36]	; (1b54 <usb_d_ep_init+0x50>)
    1b2e:	0164      	lsls	r4, r4, #5
    1b30:	1913      	adds	r3, r2, r4
    1b32:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1b34:	2303      	movs	r3, #3
    1b36:	401e      	ands	r6, r3
    1b38:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    1b3a:	2000      	movs	r0, #0
}
    1b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1b3e:	2014      	movs	r0, #20
    1b40:	4240      	negs	r0, r0
    1b42:	e7fb      	b.n	1b3c <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    1b44:	2015      	movs	r0, #21
    1b46:	4240      	negs	r0, r0
    1b48:	e7f8      	b.n	1b3c <usb_d_ep_init+0x38>
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	00001801 	.word	0x00001801
    1b50:	00002f49 	.word	0x00002f49
    1b54:	2000055c 	.word	0x2000055c

00001b58 <usb_d_ep0_init>:
{
    1b58:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1b5a:	b282      	uxth	r2, r0
    1b5c:	2100      	movs	r1, #0
    1b5e:	2000      	movs	r0, #0
    1b60:	4b01      	ldr	r3, [pc, #4]	; (1b68 <usb_d_ep0_init+0x10>)
    1b62:	4798      	blx	r3
}
    1b64:	bd10      	pop	{r4, pc}
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	00001b05 	.word	0x00001b05

00001b6c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1b6c:	b570      	push	{r4, r5, r6, lr}
    1b6e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b70:	4b06      	ldr	r3, [pc, #24]	; (1b8c <usb_d_ep_deinit+0x20>)
    1b72:	4798      	blx	r3
    1b74:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1b76:	db07      	blt.n	1b88 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1b78:	0028      	movs	r0, r5
    1b7a:	4b05      	ldr	r3, [pc, #20]	; (1b90 <usb_d_ep_deinit+0x24>)
    1b7c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1b7e:	0164      	lsls	r4, r4, #5
    1b80:	4b04      	ldr	r3, [pc, #16]	; (1b94 <usb_d_ep_deinit+0x28>)
    1b82:	191c      	adds	r4, r3, r4
    1b84:	23ff      	movs	r3, #255	; 0xff
    1b86:	7063      	strb	r3, [r4, #1]
}
    1b88:	bd70      	pop	{r4, r5, r6, pc}
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	00001801 	.word	0x00001801
    1b90:	00003075 	.word	0x00003075
    1b94:	2000055c 	.word	0x2000055c

00001b98 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1b98:	b570      	push	{r4, r5, r6, lr}
    1b9a:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b9c:	4b0e      	ldr	r3, [pc, #56]	; (1bd8 <usb_d_ep_enable+0x40>)
    1b9e:	4798      	blx	r3
    1ba0:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1ba2:	db15      	blt.n	1bd0 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1ba4:	0143      	lsls	r3, r0, #5
    1ba6:	4a0d      	ldr	r2, [pc, #52]	; (1bdc <usb_d_ep_enable+0x44>)
    1ba8:	5c9b      	ldrb	r3, [r3, r2]
    1baa:	425a      	negs	r2, r3
    1bac:	4153      	adcs	r3, r2
    1bae:	3301      	adds	r3, #1
    1bb0:	0141      	lsls	r1, r0, #5
    1bb2:	4a0a      	ldr	r2, [pc, #40]	; (1bdc <usb_d_ep_enable+0x44>)
    1bb4:	1852      	adds	r2, r2, r1
    1bb6:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1bb8:	0020      	movs	r0, r4
    1bba:	4b09      	ldr	r3, [pc, #36]	; (1be0 <usb_d_ep_enable+0x48>)
    1bbc:	4798      	blx	r3
	if (rc < 0) {
    1bbe:	2800      	cmp	r0, #0
    1bc0:	db00      	blt.n	1bc4 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1bc2:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1bc4:	016d      	lsls	r5, r5, #5
    1bc6:	4b05      	ldr	r3, [pc, #20]	; (1bdc <usb_d_ep_enable+0x44>)
    1bc8:	195d      	adds	r5, r3, r5
    1bca:	2300      	movs	r3, #0
    1bcc:	70ab      	strb	r3, [r5, #2]
    1bce:	e7f8      	b.n	1bc2 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    1bd0:	2012      	movs	r0, #18
    1bd2:	4240      	negs	r0, r0
    1bd4:	e7f5      	b.n	1bc2 <usb_d_ep_enable+0x2a>
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	00001801 	.word	0x00001801
    1bdc:	2000055c 	.word	0x2000055c
    1be0:	00003141 	.word	0x00003141

00001be4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1be6:	46d6      	mov	lr, sl
    1be8:	464f      	mov	r7, r9
    1bea:	4646      	mov	r6, r8
    1bec:	b5c0      	push	{r6, r7, lr}
    1bee:	b086      	sub	sp, #24
    1bf0:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1bf2:	7a07      	ldrb	r7, [r0, #8]
    1bf4:	0038      	movs	r0, r7
    1bf6:	4b40      	ldr	r3, [pc, #256]	; (1cf8 <usb_d_ep_transfer+0x114>)
    1bf8:	4798      	blx	r3
    1bfa:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1bfc:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
    1bfe:	6863      	ldr	r3, [r4, #4]
    1c00:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1c02:	2800      	cmp	r0, #0
    1c04:	da00      	bge.n	1c08 <usb_d_ep_transfer+0x24>
    1c06:	e071      	b.n	1cec <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    1c08:	a804      	add	r0, sp, #16
    1c0a:	4b3c      	ldr	r3, [pc, #240]	; (1cfc <usb_d_ep_transfer+0x118>)
    1c0c:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1c0e:	016a      	lsls	r2, r5, #5
    1c10:	4b3b      	ldr	r3, [pc, #236]	; (1d00 <usb_d_ep_transfer+0x11c>)
    1c12:	189b      	adds	r3, r3, r2
    1c14:	789a      	ldrb	r2, [r3, #2]
    1c16:	2317      	movs	r3, #23
    1c18:	446b      	add	r3, sp
    1c1a:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    1c1c:	781b      	ldrb	r3, [r3, #0]
    1c1e:	2b01      	cmp	r3, #1
    1c20:	d010      	beq.n	1c44 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1c22:	a804      	add	r0, sp, #16
    1c24:	4b37      	ldr	r3, [pc, #220]	; (1d04 <usb_d_ep_transfer+0x120>)
    1c26:	4798      	blx	r3
		switch (state) {
    1c28:	2317      	movs	r3, #23
    1c2a:	446b      	add	r3, sp
    1c2c:	781b      	ldrb	r3, [r3, #0]
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	2b05      	cmp	r3, #5
    1c32:	d05e      	beq.n	1cf2 <usb_d_ep_transfer+0x10e>
    1c34:	2b06      	cmp	r3, #6
    1c36:	d023      	beq.n	1c80 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1c38:	2001      	movs	r0, #1
		switch (state) {
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	d13c      	bne.n	1cb8 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    1c3e:	2013      	movs	r0, #19
    1c40:	4240      	negs	r0, r0
    1c42:	e039      	b.n	1cb8 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1c44:	4b2e      	ldr	r3, [pc, #184]	; (1d00 <usb_d_ep_transfer+0x11c>)
    1c46:	4699      	mov	r9, r3
    1c48:	016b      	lsls	r3, r5, #5
    1c4a:	469a      	mov	sl, r3
    1c4c:	464b      	mov	r3, r9
    1c4e:	4453      	add	r3, sl
    1c50:	2203      	movs	r2, #3
    1c52:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1c54:	a804      	add	r0, sp, #16
    1c56:	4b2b      	ldr	r3, [pc, #172]	; (1d04 <usb_d_ep_transfer+0x120>)
    1c58:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c5a:	464b      	mov	r3, r9
    1c5c:	4652      	mov	r2, sl
    1c5e:	5cd3      	ldrb	r3, [r2, r3]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d010      	beq.n	1c86 <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1c64:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1c66:	1e72      	subs	r2, r6, #1
    1c68:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1c6a:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    1c6c:	6822      	ldr	r2, [r4, #0]
    1c6e:	9201      	str	r2, [sp, #4]
    1c70:	4642      	mov	r2, r8
    1c72:	9202      	str	r2, [sp, #8]
    1c74:	b27f      	sxtb	r7, r7
    1c76:	2f00      	cmp	r7, #0
    1c78:	db17      	blt.n	1caa <usb_d_ep_transfer+0xc6>
    1c7a:	220f      	movs	r2, #15
    1c7c:	4013      	ands	r3, r2
    1c7e:	e016      	b.n	1cae <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    1c80:	2010      	movs	r0, #16
    1c82:	4240      	negs	r0, r0
    1c84:	e018      	b.n	1cb8 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1c86:	016b      	lsls	r3, r5, #5
    1c88:	4a1d      	ldr	r2, [pc, #116]	; (1d00 <usb_d_ep_transfer+0x11c>)
    1c8a:	18d2      	adds	r2, r2, r3
    1c8c:	7cd1      	ldrb	r1, [r2, #19]
    1c8e:	0209      	lsls	r1, r1, #8
    1c90:	7c93      	ldrb	r3, [r2, #18]
    1c92:	185b      	adds	r3, r3, r1
    1c94:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    1c96:	2b00      	cmp	r3, #0
    1c98:	d114      	bne.n	1cc4 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1c9a:	2304      	movs	r3, #4
    1c9c:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    1c9e:	2200      	movs	r2, #0
			zlp                 = true;
    1ca0:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1ca2:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    1ca4:	6821      	ldr	r1, [r4, #0]
    1ca6:	9101      	str	r1, [sp, #4]
    1ca8:	9202      	str	r2, [sp, #8]
    1caa:	2280      	movs	r2, #128	; 0x80
    1cac:	4313      	orrs	r3, r2
    1cae:	a801      	add	r0, sp, #4
    1cb0:	7203      	strb	r3, [r0, #8]
    1cb2:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1cb4:	4b14      	ldr	r3, [pc, #80]	; (1d08 <usb_d_ep_transfer+0x124>)
    1cb6:	4798      	blx	r3
	return rc;
}
    1cb8:	b006      	add	sp, #24
    1cba:	bc1c      	pop	{r2, r3, r4}
    1cbc:	4690      	mov	r8, r2
    1cbe:	4699      	mov	r9, r3
    1cc0:	46a2      	mov	sl, r4
    1cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cc4:	4642      	mov	r2, r8
    1cc6:	429a      	cmp	r2, r3
    1cc8:	d900      	bls.n	1ccc <usb_d_ep_transfer+0xe8>
    1cca:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1ccc:	016d      	lsls	r5, r5, #5
    1cce:	490c      	ldr	r1, [pc, #48]	; (1d00 <usb_d_ep_transfer+0x11c>)
    1cd0:	194d      	adds	r5, r1, r5
			if (dir) {
    1cd2:	7b29      	ldrb	r1, [r5, #12]
    1cd4:	297f      	cmp	r1, #127	; 0x7f
    1cd6:	d805      	bhi.n	1ce4 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1cd8:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    1cda:	6821      	ldr	r1, [r4, #0]
    1cdc:	9101      	str	r1, [sp, #4]
    1cde:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1ce0:	2600      	movs	r6, #0
    1ce2:	e7ca      	b.n	1c7a <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    1ce4:	429a      	cmp	r2, r3
    1ce6:	41b6      	sbcs	r6, r6
    1ce8:	4276      	negs	r6, r6
    1cea:	e7da      	b.n	1ca2 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    1cec:	2012      	movs	r0, #18
    1cee:	4240      	negs	r0, r0
    1cf0:	e7e2      	b.n	1cb8 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    1cf2:	2002      	movs	r0, #2
    1cf4:	e7e0      	b.n	1cb8 <usb_d_ep_transfer+0xd4>
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	00001801 	.word	0x00001801
    1cfc:	00003ad5 	.word	0x00003ad5
    1d00:	2000055c 	.word	0x2000055c
    1d04:	00003ae3 	.word	0x00003ae3
    1d08:	000035f1 	.word	0x000035f1

00001d0c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1d0c:	b570      	push	{r4, r5, r6, lr}
    1d0e:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1d10:	2900      	cmp	r1, #0
    1d12:	d005      	beq.n	1d20 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1d14:	2901      	cmp	r1, #1
    1d16:	d021      	beq.n	1d5c <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1d18:	2102      	movs	r1, #2
    1d1a:	4b13      	ldr	r3, [pc, #76]	; (1d68 <usb_d_ep_halt+0x5c>)
    1d1c:	4798      	blx	r3
	}
}
    1d1e:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1d20:	4b12      	ldr	r3, [pc, #72]	; (1d6c <usb_d_ep_halt+0x60>)
    1d22:	4798      	blx	r3
    1d24:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    1d26:	db1c      	blt.n	1d62 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1d28:	2102      	movs	r1, #2
    1d2a:	0020      	movs	r0, r4
    1d2c:	4b0e      	ldr	r3, [pc, #56]	; (1d68 <usb_d_ep_halt+0x5c>)
    1d2e:	4798      	blx	r3
    1d30:	2800      	cmp	r0, #0
    1d32:	d0f4      	beq.n	1d1e <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1d34:	2100      	movs	r1, #0
    1d36:	0020      	movs	r0, r4
    1d38:	4b0b      	ldr	r3, [pc, #44]	; (1d68 <usb_d_ep_halt+0x5c>)
    1d3a:	4798      	blx	r3
		if (rc < 0) {
    1d3c:	2800      	cmp	r0, #0
    1d3e:	dbee      	blt.n	1d1e <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1d40:	016d      	lsls	r5, r5, #5
    1d42:	4b0b      	ldr	r3, [pc, #44]	; (1d70 <usb_d_ep_halt+0x64>)
    1d44:	195d      	adds	r5, r3, r5
    1d46:	2301      	movs	r3, #1
    1d48:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1d4a:	3302      	adds	r3, #2
    1d4c:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1d4e:	69eb      	ldr	r3, [r5, #28]
    1d50:	2200      	movs	r2, #0
    1d52:	2103      	movs	r1, #3
    1d54:	0020      	movs	r0, r4
    1d56:	4798      	blx	r3
	return ERR_NONE;
    1d58:	2000      	movs	r0, #0
    1d5a:	e7e0      	b.n	1d1e <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1d5c:	4b02      	ldr	r3, [pc, #8]	; (1d68 <usb_d_ep_halt+0x5c>)
    1d5e:	4798      	blx	r3
    1d60:	e7dd      	b.n	1d1e <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    1d62:	2012      	movs	r0, #18
    1d64:	4240      	negs	r0, r0
    1d66:	e7da      	b.n	1d1e <usb_d_ep_halt+0x12>
    1d68:	0000341d 	.word	0x0000341d
    1d6c:	00001801 	.word	0x00001801
    1d70:	2000055c 	.word	0x2000055c

00001d74 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1d74:	b570      	push	{r4, r5, r6, lr}
    1d76:	000d      	movs	r5, r1
    1d78:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1d7a:	4b0f      	ldr	r3, [pc, #60]	; (1db8 <usb_d_ep_register_callback+0x44>)
    1d7c:	4798      	blx	r3
    1d7e:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1d80:	1e22      	subs	r2, r4, #0
    1d82:	d008      	beq.n	1d96 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    1d84:	2b00      	cmp	r3, #0
    1d86:	db05      	blt.n	1d94 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    1d88:	2d01      	cmp	r5, #1
    1d8a:	d00b      	beq.n	1da4 <usb_d_ep_register_callback+0x30>
    1d8c:	2d00      	cmp	r5, #0
    1d8e:	d004      	beq.n	1d9a <usb_d_ep_register_callback+0x26>
    1d90:	2d02      	cmp	r5, #2
    1d92:	d00c      	beq.n	1dae <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    1d94:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1d96:	4a09      	ldr	r2, [pc, #36]	; (1dbc <usb_d_ep_register_callback+0x48>)
    1d98:	e7f4      	b.n	1d84 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1d9a:	0140      	lsls	r0, r0, #5
    1d9c:	4b08      	ldr	r3, [pc, #32]	; (1dc0 <usb_d_ep_register_callback+0x4c>)
    1d9e:	1818      	adds	r0, r3, r0
    1da0:	6142      	str	r2, [r0, #20]
		break;
    1da2:	e7f7      	b.n	1d94 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1da4:	0140      	lsls	r0, r0, #5
    1da6:	4b06      	ldr	r3, [pc, #24]	; (1dc0 <usb_d_ep_register_callback+0x4c>)
    1da8:	1818      	adds	r0, r3, r0
    1daa:	6182      	str	r2, [r0, #24]
		break;
    1dac:	e7f2      	b.n	1d94 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1dae:	0140      	lsls	r0, r0, #5
    1db0:	4b03      	ldr	r3, [pc, #12]	; (1dc0 <usb_d_ep_register_callback+0x4c>)
    1db2:	1818      	adds	r0, r3, r0
    1db4:	61c2      	str	r2, [r0, #28]
		break;
    1db6:	e7ed      	b.n	1d94 <usb_d_ep_register_callback+0x20>
    1db8:	00001801 	.word	0x00001801
    1dbc:	00001845 	.word	0x00001845
    1dc0:	2000055c 	.word	0x2000055c

00001dc4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1dc4:	2800      	cmp	r0, #0
    1dc6:	d100      	bne.n	1dca <assert+0x6>
		__asm("BKPT #0");
    1dc8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1dca:	4770      	bx	lr

00001dcc <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1dcc:	b570      	push	{r4, r5, r6, lr}
    1dce:	0004      	movs	r4, r0
    1dd0:	000e      	movs	r6, r1
    1dd2:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    1dd4:	2800      	cmp	r0, #0
    1dd6:	d00b      	beq.n	1df0 <ringbuffer_init+0x24>
    1dd8:	2900      	cmp	r1, #0
    1dda:	d018      	beq.n	1e0e <ringbuffer_init+0x42>
    1ddc:	2001      	movs	r0, #1
    1dde:	2a00      	cmp	r2, #0
    1de0:	d107      	bne.n	1df2 <ringbuffer_init+0x26>
    1de2:	2228      	movs	r2, #40	; 0x28
    1de4:	490c      	ldr	r1, [pc, #48]	; (1e18 <ringbuffer_init+0x4c>)
    1de6:	2000      	movs	r0, #0
    1de8:	4b0c      	ldr	r3, [pc, #48]	; (1e1c <ringbuffer_init+0x50>)
    1dea:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1dec:	1e6b      	subs	r3, r5, #1
    1dee:	e007      	b.n	1e00 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
    1df0:	2000      	movs	r0, #0
    1df2:	2228      	movs	r2, #40	; 0x28
    1df4:	4908      	ldr	r1, [pc, #32]	; (1e18 <ringbuffer_init+0x4c>)
    1df6:	4b09      	ldr	r3, [pc, #36]	; (1e1c <ringbuffer_init+0x50>)
    1df8:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1dfa:	1e6b      	subs	r3, r5, #1
    1dfc:	422b      	tst	r3, r5
    1dfe:	d108      	bne.n	1e12 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1e00:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1e02:	2300      	movs	r3, #0
    1e04:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    1e06:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1e08:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1e0a:	2000      	movs	r0, #0
}
    1e0c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1e0e:	2000      	movs	r0, #0
    1e10:	e7ef      	b.n	1df2 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
    1e12:	200d      	movs	r0, #13
    1e14:	4240      	negs	r0, r0
    1e16:	e7f9      	b.n	1e0c <ringbuffer_init+0x40>
    1e18:	00004bd4 	.word	0x00004bd4
    1e1c:	00001dc5 	.word	0x00001dc5

00001e20 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1e20:	b570      	push	{r4, r5, r6, lr}
    1e22:	0004      	movs	r4, r0
    1e24:	000d      	movs	r5, r1
	ASSERT(rb && data);
    1e26:	2800      	cmp	r0, #0
    1e28:	d015      	beq.n	1e56 <ringbuffer_get+0x36>
    1e2a:	0008      	movs	r0, r1
    1e2c:	1e43      	subs	r3, r0, #1
    1e2e:	4198      	sbcs	r0, r3
    1e30:	b2c0      	uxtb	r0, r0
    1e32:	2240      	movs	r2, #64	; 0x40
    1e34:	490a      	ldr	r1, [pc, #40]	; (1e60 <ringbuffer_get+0x40>)
    1e36:	4b0b      	ldr	r3, [pc, #44]	; (1e64 <ringbuffer_get+0x44>)
    1e38:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1e3a:	68a3      	ldr	r3, [r4, #8]
    1e3c:	68e2      	ldr	r2, [r4, #12]
    1e3e:	429a      	cmp	r2, r3
    1e40:	d00b      	beq.n	1e5a <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
    1e42:	6862      	ldr	r2, [r4, #4]
    1e44:	4013      	ands	r3, r2
    1e46:	6822      	ldr	r2, [r4, #0]
    1e48:	5cd3      	ldrb	r3, [r2, r3]
    1e4a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1e4c:	68a3      	ldr	r3, [r4, #8]
    1e4e:	3301      	adds	r3, #1
    1e50:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1e52:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    1e54:	bd70      	pop	{r4, r5, r6, pc}
    1e56:	2000      	movs	r0, #0
    1e58:	e7eb      	b.n	1e32 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
    1e5a:	200a      	movs	r0, #10
    1e5c:	4240      	negs	r0, r0
    1e5e:	e7f9      	b.n	1e54 <ringbuffer_get+0x34>
    1e60:	00004bd4 	.word	0x00004bd4
    1e64:	00001dc5 	.word	0x00001dc5

00001e68 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1e68:	b570      	push	{r4, r5, r6, lr}
    1e6a:	0004      	movs	r4, r0
    1e6c:	000d      	movs	r5, r1
	ASSERT(rb);
    1e6e:	1e43      	subs	r3, r0, #1
    1e70:	4198      	sbcs	r0, r3
    1e72:	b2c0      	uxtb	r0, r0
    1e74:	2251      	movs	r2, #81	; 0x51
    1e76:	490a      	ldr	r1, [pc, #40]	; (1ea0 <ringbuffer_put+0x38>)
    1e78:	4b0a      	ldr	r3, [pc, #40]	; (1ea4 <ringbuffer_put+0x3c>)
    1e7a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1e7c:	6863      	ldr	r3, [r4, #4]
    1e7e:	68e2      	ldr	r2, [r4, #12]
    1e80:	4013      	ands	r3, r2
    1e82:	6822      	ldr	r2, [r4, #0]
    1e84:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1e86:	68e3      	ldr	r3, [r4, #12]
    1e88:	6861      	ldr	r1, [r4, #4]
    1e8a:	68a2      	ldr	r2, [r4, #8]
    1e8c:	1a9a      	subs	r2, r3, r2
    1e8e:	428a      	cmp	r2, r1
    1e90:	d901      	bls.n	1e96 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    1e92:	1a59      	subs	r1, r3, r1
    1e94:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    1e96:	3301      	adds	r3, #1
    1e98:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1e9a:	2000      	movs	r0, #0
    1e9c:	bd70      	pop	{r4, r5, r6, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	00004bd4 	.word	0x00004bd4
    1ea4:	00001dc5 	.word	0x00001dc5

00001ea8 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1ea8:	b510      	push	{r4, lr}
    1eaa:	0004      	movs	r4, r0
	ASSERT(rb);
    1eac:	1e43      	subs	r3, r0, #1
    1eae:	4198      	sbcs	r0, r3
    1eb0:	b2c0      	uxtb	r0, r0
    1eb2:	2267      	movs	r2, #103	; 0x67
    1eb4:	4903      	ldr	r1, [pc, #12]	; (1ec4 <ringbuffer_num+0x1c>)
    1eb6:	4b04      	ldr	r3, [pc, #16]	; (1ec8 <ringbuffer_num+0x20>)
    1eb8:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1eba:	68e0      	ldr	r0, [r4, #12]
    1ebc:	68a3      	ldr	r3, [r4, #8]
    1ebe:	1ac0      	subs	r0, r0, r3
}
    1ec0:	bd10      	pop	{r4, pc}
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	00004bd4 	.word	0x00004bd4
    1ec8:	00001dc5 	.word	0x00001dc5

00001ecc <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    1ecc:	23fa      	movs	r3, #250	; 0xfa
    1ece:	009b      	lsls	r3, r3, #2
    1ed0:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1ed2:	4770      	bx	lr

00001ed4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1ed4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1ed6:	4b06      	ldr	r3, [pc, #24]	; (1ef0 <_init_chip+0x1c>)
    1ed8:	685a      	ldr	r2, [r3, #4]
    1eda:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1edc:	4b05      	ldr	r3, [pc, #20]	; (1ef4 <_init_chip+0x20>)
    1ede:	4798      	blx	r3
	_sysctrl_init_sources();
    1ee0:	4b05      	ldr	r3, [pc, #20]	; (1ef8 <_init_chip+0x24>)
    1ee2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    1ee4:	4b05      	ldr	r3, [pc, #20]	; (1efc <_init_chip+0x28>)
    1ee6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1ee8:	20ff      	movs	r0, #255	; 0xff
    1eea:	4b05      	ldr	r3, [pc, #20]	; (1f00 <_init_chip+0x2c>)
    1eec:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    1eee:	bd10      	pop	{r4, pc}
    1ef0:	41004000 	.word	0x41004000
    1ef4:	00001f7d 	.word	0x00001f7d
    1ef8:	00002661 	.word	0x00002661
    1efc:	000026a9 	.word	0x000026a9
    1f00:	00001f05 	.word	0x00001f05

00001f04 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1f04:	07c3      	lsls	r3, r0, #31
    1f06:	d509      	bpl.n	1f1c <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1f08:	4b17      	ldr	r3, [pc, #92]	; (1f68 <_gclk_init_generators_by_fref+0x64>)
    1f0a:	2280      	movs	r2, #128	; 0x80
    1f0c:	0052      	lsls	r2, r2, #1
    1f0e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1f10:	4a16      	ldr	r2, [pc, #88]	; (1f6c <_gclk_init_generators_by_fref+0x68>)
    1f12:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1f14:	001a      	movs	r2, r3
    1f16:	7853      	ldrb	r3, [r2, #1]
    1f18:	09db      	lsrs	r3, r3, #7
    1f1a:	d1fc      	bne.n	1f16 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1f1c:	0783      	lsls	r3, r0, #30
    1f1e:	d509      	bpl.n	1f34 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    1f20:	4b11      	ldr	r3, [pc, #68]	; (1f68 <_gclk_init_generators_by_fref+0x64>)
    1f22:	2202      	movs	r2, #2
    1f24:	32ff      	adds	r2, #255	; 0xff
    1f26:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1f28:	4a11      	ldr	r2, [pc, #68]	; (1f70 <_gclk_init_generators_by_fref+0x6c>)
    1f2a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1f2c:	001a      	movs	r2, r3
    1f2e:	7853      	ldrb	r3, [r2, #1]
    1f30:	09db      	lsrs	r3, r3, #7
    1f32:	d1fc      	bne.n	1f2e <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1f34:	0743      	lsls	r3, r0, #29
    1f36:	d509      	bpl.n	1f4c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    1f38:	4b0b      	ldr	r3, [pc, #44]	; (1f68 <_gclk_init_generators_by_fref+0x64>)
    1f3a:	2281      	movs	r2, #129	; 0x81
    1f3c:	0052      	lsls	r2, r2, #1
    1f3e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1f40:	4a0c      	ldr	r2, [pc, #48]	; (1f74 <_gclk_init_generators_by_fref+0x70>)
    1f42:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1f44:	001a      	movs	r2, r3
    1f46:	7853      	ldrb	r3, [r2, #1]
    1f48:	09db      	lsrs	r3, r3, #7
    1f4a:	d1fc      	bne.n	1f46 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1f4c:	0703      	lsls	r3, r0, #28
    1f4e:	d509      	bpl.n	1f64 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENDIV.reg = data;
    1f50:	4b05      	ldr	r3, [pc, #20]	; (1f68 <_gclk_init_generators_by_fref+0x64>)
    1f52:	2204      	movs	r2, #4
    1f54:	32ff      	adds	r2, #255	; 0xff
    1f56:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1f58:	4a07      	ldr	r2, [pc, #28]	; (1f78 <_gclk_init_generators_by_fref+0x74>)
    1f5a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1f5c:	001a      	movs	r2, r3
    1f5e:	7853      	ldrb	r3, [r2, #1]
    1f60:	09db      	lsrs	r3, r3, #7
    1f62:	d1fc      	bne.n	1f5e <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    1f64:	4770      	bx	lr
    1f66:	46c0      	nop			; (mov r8, r8)
    1f68:	40000c00 	.word	0x40000c00
    1f6c:	00090600 	.word	0x00090600
    1f70:	00010401 	.word	0x00010401
    1f74:	00090702 	.word	0x00090702
    1f78:	00010303 	.word	0x00010303

00001f7c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1f7c:	4b06      	ldr	r3, [pc, #24]	; (1f98 <_pm_init+0x1c>)
    1f7e:	7a1a      	ldrb	r2, [r3, #8]
    1f80:	b2d2      	uxtb	r2, r2
    1f82:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1f84:	7a5a      	ldrb	r2, [r3, #9]
    1f86:	b2d2      	uxtb	r2, r2
    1f88:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1f8a:	7a9a      	ldrb	r2, [r3, #10]
    1f8c:	b2d2      	uxtb	r2, r2
    1f8e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1f90:	7ada      	ldrb	r2, [r3, #11]
    1f92:	b2d2      	uxtb	r2, r2
    1f94:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1f96:	4770      	bx	lr
    1f98:	40000400 	.word	0x40000400

00001f9c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    1f9c:	4b06      	ldr	r3, [pc, #24]	; (1fb8 <_sercom_init_irq_param+0x1c>)
    1f9e:	4298      	cmp	r0, r3
    1fa0:	d003      	beq.n	1faa <_sercom_init_irq_param+0xe>
		_sercom0_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM2) {
    1fa2:	4b06      	ldr	r3, [pc, #24]	; (1fbc <_sercom_init_irq_param+0x20>)
    1fa4:	4298      	cmp	r0, r3
    1fa6:	d003      	beq.n	1fb0 <_sercom_init_irq_param+0x14>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}
}
    1fa8:	4770      	bx	lr
		_sercom0_dev = (struct _spi_async_dev *)dev;
    1faa:	4b05      	ldr	r3, [pc, #20]	; (1fc0 <_sercom_init_irq_param+0x24>)
    1fac:	6019      	str	r1, [r3, #0]
    1fae:	e7fb      	b.n	1fa8 <_sercom_init_irq_param+0xc>
		_sercom2_dev = (struct _usart_async_device *)dev;
    1fb0:	4b03      	ldr	r3, [pc, #12]	; (1fc0 <_sercom_init_irq_param+0x24>)
    1fb2:	6059      	str	r1, [r3, #4]
}
    1fb4:	e7f8      	b.n	1fa8 <_sercom_init_irq_param+0xc>
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	42000800 	.word	0x42000800
    1fbc:	42001000 	.word	0x42001000
    1fc0:	200005dc 	.word	0x200005dc

00001fc4 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1fc4:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1fc6:	07db      	lsls	r3, r3, #31
    1fc8:	d409      	bmi.n	1fde <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1fca:	6803      	ldr	r3, [r0, #0]
    1fcc:	2202      	movs	r2, #2
    1fce:	4313      	orrs	r3, r2
    1fd0:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1fd2:	3201      	adds	r2, #1
    1fd4:	69c3      	ldr	r3, [r0, #28]
    1fd6:	421a      	tst	r2, r3
    1fd8:	d1fc      	bne.n	1fd4 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1fda:	2000      	movs	r0, #0
}
    1fdc:	4770      	bx	lr
		return ERR_BUSY;
    1fde:	2004      	movs	r0, #4
    1fe0:	4240      	negs	r0, r0
    1fe2:	e7fb      	b.n	1fdc <_spi_sync_enable+0x18>

00001fe4 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    1fe4:	b510      	push	{r4, lr}
    1fe6:	0004      	movs	r4, r0
	_spi_sync_enable(hw);
    1fe8:	4b08      	ldr	r3, [pc, #32]	; (200c <STACK_SIZE+0xc>)
    1fea:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1fec:	4b08      	ldr	r3, [pc, #32]	; (2010 <STACK_SIZE+0x10>)
    1fee:	469c      	mov	ip, r3
    1ff0:	4464      	add	r4, ip
    1ff2:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1ff4:	3409      	adds	r4, #9
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1ff6:	b2e3      	uxtb	r3, r4
    1ff8:	0622      	lsls	r2, r4, #24
    1ffa:	d405      	bmi.n	2008 <STACK_SIZE+0x8>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ffc:	221f      	movs	r2, #31
    1ffe:	401a      	ands	r2, r3
    2000:	2301      	movs	r3, #1
    2002:	4093      	lsls	r3, r2
    2004:	4a03      	ldr	r2, [pc, #12]	; (2014 <STACK_SIZE+0x14>)
    2006:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));

	return ERR_NONE;
}
    2008:	2000      	movs	r0, #0
    200a:	bd10      	pop	{r4, pc}
    200c:	00001fc5 	.word	0x00001fc5
    2010:	bdfff800 	.word	0xbdfff800
    2014:	e000e100 	.word	0xe000e100

00002018 <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2018:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    201a:	07db      	lsls	r3, r3, #31
    201c:	d409      	bmi.n	2032 <_spi_sync_disable+0x1a>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    201e:	6803      	ldr	r3, [r0, #0]
    2020:	2202      	movs	r2, #2
    2022:	4393      	bics	r3, r2
    2024:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2026:	3201      	adds	r2, #1
    2028:	69c3      	ldr	r3, [r0, #28]
    202a:	421a      	tst	r2, r3
    202c:	d1fc      	bne.n	2028 <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    202e:	2000      	movs	r0, #0
}
    2030:	4770      	bx	lr
		return ERR_BUSY;
    2032:	2004      	movs	r0, #4
    2034:	4240      	negs	r0, r0
    2036:	e7fb      	b.n	2030 <_spi_sync_disable+0x18>

00002038 <_usart_init>:
{
    2038:	b510      	push	{r4, lr}
    203a:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    203c:	4b20      	ldr	r3, [pc, #128]	; (20c0 <_usart_init+0x88>)
    203e:	18c3      	adds	r3, r0, r3
    2040:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    2042:	b2db      	uxtb	r3, r3
    2044:	2b02      	cmp	r3, #2
    2046:	d005      	beq.n	2054 <_usart_init+0x1c>
	ASSERT(false);
    2048:	2298      	movs	r2, #152	; 0x98
    204a:	0092      	lsls	r2, r2, #2
    204c:	491d      	ldr	r1, [pc, #116]	; (20c4 <_usart_init+0x8c>)
    204e:	2000      	movs	r0, #0
    2050:	4b1d      	ldr	r3, [pc, #116]	; (20c8 <_usart_init+0x90>)
    2052:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2054:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2056:	07db      	lsls	r3, r3, #31
    2058:	d418      	bmi.n	208c <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    205a:	2203      	movs	r2, #3
    205c:	69e3      	ldr	r3, [r4, #28]
    205e:	421a      	tst	r2, r3
    2060:	d1fc      	bne.n	205c <_usart_init+0x24>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2062:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2064:	079b      	lsls	r3, r3, #30
    2066:	d50b      	bpl.n	2080 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2068:	6823      	ldr	r3, [r4, #0]
    206a:	2202      	movs	r2, #2
    206c:	4393      	bics	r3, r2
    206e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2070:	3201      	adds	r2, #1
    2072:	69e3      	ldr	r3, [r4, #28]
    2074:	421a      	tst	r2, r3
    2076:	d1fc      	bne.n	2072 <_usart_init+0x3a>
    2078:	2202      	movs	r2, #2
    207a:	69e3      	ldr	r3, [r4, #28]
    207c:	421a      	tst	r2, r3
    207e:	d1fc      	bne.n	207a <_usart_init+0x42>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2080:	2305      	movs	r3, #5
    2082:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2084:	2203      	movs	r2, #3
    2086:	69e3      	ldr	r3, [r4, #28]
    2088:	421a      	tst	r2, r3
    208a:	d1fc      	bne.n	2086 <_usart_init+0x4e>
    208c:	2201      	movs	r2, #1
    208e:	69e3      	ldr	r3, [r4, #28]
    2090:	421a      	tst	r2, r3
    2092:	d1fc      	bne.n	208e <_usart_init+0x56>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2094:	4b0d      	ldr	r3, [pc, #52]	; (20cc <_usart_init+0x94>)
    2096:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2098:	2203      	movs	r2, #3
    209a:	69e3      	ldr	r3, [r4, #28]
    209c:	421a      	tst	r2, r3
    209e:	d1fc      	bne.n	209a <_usart_init+0x62>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    20a0:	23c0      	movs	r3, #192	; 0xc0
    20a2:	029b      	lsls	r3, r3, #10
    20a4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    20a6:	2207      	movs	r2, #7
    20a8:	69e3      	ldr	r3, [r4, #28]
    20aa:	421a      	tst	r2, r3
    20ac:	d1fc      	bne.n	20a8 <_usart_init+0x70>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    20ae:	4b08      	ldr	r3, [pc, #32]	; (20d0 <_usart_init+0x98>)
    20b0:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    20b2:	2300      	movs	r3, #0
    20b4:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    20b6:	2230      	movs	r2, #48	; 0x30
    20b8:	54a3      	strb	r3, [r4, r2]
}
    20ba:	2000      	movs	r0, #0
    20bc:	bd10      	pop	{r4, pc}
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	bdfff800 	.word	0xbdfff800
    20c4:	00004bf8 	.word	0x00004bf8
    20c8:	00001dc5 	.word	0x00001dc5
    20cc:	40100004 	.word	0x40100004
    20d0:	ffffd8ad 	.word	0xffffd8ad

000020d4 <_spi_async_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_async_disable(void *const hw)
{
    20d4:	b510      	push	{r4, lr}
    20d6:	0004      	movs	r4, r0
	_spi_sync_disable(hw);
    20d8:	4b0c      	ldr	r3, [pc, #48]	; (210c <_spi_async_disable+0x38>)
    20da:	4798      	blx	r3
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
    20dc:	2387      	movs	r3, #135	; 0x87
    20de:	7523      	strb	r3, [r4, #20]
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    20e0:	4b0b      	ldr	r3, [pc, #44]	; (2110 <_spi_async_disable+0x3c>)
    20e2:	469c      	mov	ip, r3
    20e4:	4464      	add	r4, ip
    20e6:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    20e8:	3409      	adds	r4, #9
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    20ea:	b2e3      	uxtb	r3, r4
    20ec:	0622      	lsls	r2, r4, #24
    20ee:	d40a      	bmi.n	2106 <_spi_async_disable+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20f0:	221f      	movs	r2, #31
    20f2:	401a      	ands	r2, r3
    20f4:	2301      	movs	r3, #1
    20f6:	4093      	lsls	r3, r2
    20f8:	2280      	movs	r2, #128	; 0x80
    20fa:	4906      	ldr	r1, [pc, #24]	; (2114 <_spi_async_disable+0x40>)
    20fc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    20fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2102:	f3bf 8f6f 	isb	sy
	hri_sercomspi_clear_INTEN_reg(
	    hw, SERCOM_SPI_INTFLAG_ERROR | SERCOM_SPI_INTFLAG_RXC | SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));

	return ERR_NONE;
}
    2106:	2000      	movs	r0, #0
    2108:	bd10      	pop	{r4, pc}
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	00002019 	.word	0x00002019
    2110:	bdfff800 	.word	0xbdfff800
    2114:	e000e100 	.word	0xe000e100

00002118 <_usart_async_init>:
{
    2118:	b570      	push	{r4, r5, r6, lr}
    211a:	0006      	movs	r6, r0
    211c:	000c      	movs	r4, r1
	ASSERT(device);
    211e:	1e43      	subs	r3, r0, #1
    2120:	4198      	sbcs	r0, r3
    2122:	b2c0      	uxtb	r0, r0
    2124:	22c6      	movs	r2, #198	; 0xc6
    2126:	4913      	ldr	r1, [pc, #76]	; (2174 <_usart_async_init+0x5c>)
    2128:	4b13      	ldr	r3, [pc, #76]	; (2178 <_usart_async_init+0x60>)
    212a:	4798      	blx	r3
	init_status = _usart_init(hw);
    212c:	0020      	movs	r0, r4
    212e:	4b13      	ldr	r3, [pc, #76]	; (217c <_usart_async_init+0x64>)
    2130:	4798      	blx	r3
    2132:	1e05      	subs	r5, r0, #0
	if (init_status) {
    2134:	d001      	beq.n	213a <_usart_async_init+0x22>
}
    2136:	0028      	movs	r0, r5
    2138:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    213a:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    213c:	0031      	movs	r1, r6
    213e:	0020      	movs	r0, r4
    2140:	4b0f      	ldr	r3, [pc, #60]	; (2180 <_usart_async_init+0x68>)
    2142:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2144:	4b0f      	ldr	r3, [pc, #60]	; (2184 <_usart_async_init+0x6c>)
    2146:	469c      	mov	ip, r3
    2148:	4464      	add	r4, ip
    214a:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    214c:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    214e:	b2e3      	uxtb	r3, r4
    2150:	0622      	lsls	r2, r4, #24
    2152:	d4f0      	bmi.n	2136 <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2154:	221f      	movs	r2, #31
    2156:	401a      	ands	r2, r3
    2158:	2301      	movs	r3, #1
    215a:	4093      	lsls	r3, r2
    215c:	4a0a      	ldr	r2, [pc, #40]	; (2188 <_usart_async_init+0x70>)
    215e:	2180      	movs	r1, #128	; 0x80
    2160:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2162:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2166:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    216a:	3101      	adds	r1, #1
    216c:	31ff      	adds	r1, #255	; 0xff
    216e:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2170:	6013      	str	r3, [r2, #0]
    2172:	e7e0      	b.n	2136 <_usart_async_init+0x1e>
    2174:	00004bf8 	.word	0x00004bf8
    2178:	00001dc5 	.word	0x00001dc5
    217c:	00002039 	.word	0x00002039
    2180:	00001f9d 	.word	0x00001f9d
    2184:	bdfff800 	.word	0xbdfff800
    2188:	e000e100 	.word	0xe000e100

0000218c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    218c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    218e:	6813      	ldr	r3, [r2, #0]
    2190:	2102      	movs	r1, #2
    2192:	430b      	orrs	r3, r1
    2194:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2196:	3101      	adds	r1, #1
    2198:	69d3      	ldr	r3, [r2, #28]
    219a:	4219      	tst	r1, r3
    219c:	d1fc      	bne.n	2198 <_usart_async_enable+0xc>
}
    219e:	4770      	bx	lr

000021a0 <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    21a0:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    21a2:	6813      	ldr	r3, [r2, #0]
    21a4:	2102      	movs	r1, #2
    21a6:	438b      	bics	r3, r1
    21a8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    21aa:	3101      	adds	r1, #1
    21ac:	69d3      	ldr	r3, [r2, #28]
    21ae:	4219      	tst	r1, r3
    21b0:	d1fc      	bne.n	21ac <_usart_async_disable+0xc>
}
    21b2:	4770      	bx	lr

000021b4 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    21b4:	6983      	ldr	r3, [r0, #24]
    21b6:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    21b8:	8519      	strh	r1, [r3, #40]	; 0x28
}
    21ba:	4770      	bx	lr

000021bc <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    21bc:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    21be:	2201      	movs	r2, #1
    21c0:	759a      	strb	r2, [r3, #22]
}
    21c2:	4770      	bx	lr

000021c4 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    21c4:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    21c6:	2202      	movs	r2, #2
    21c8:	759a      	strb	r2, [r3, #22]
}
    21ca:	4770      	bx	lr

000021cc <_usart_async_set_irq_state>:
{
    21cc:	b570      	push	{r4, r5, r6, lr}
    21ce:	0004      	movs	r4, r0
    21d0:	000d      	movs	r5, r1
    21d2:	0016      	movs	r6, r2
	ASSERT(device);
    21d4:	1e43      	subs	r3, r0, #1
    21d6:	4198      	sbcs	r0, r3
    21d8:	b2c0      	uxtb	r0, r0
    21da:	2288      	movs	r2, #136	; 0x88
    21dc:	0092      	lsls	r2, r2, #2
    21de:	4916      	ldr	r1, [pc, #88]	; (2238 <_usart_async_set_irq_state+0x6c>)
    21e0:	4b16      	ldr	r3, [pc, #88]	; (223c <_usart_async_set_irq_state+0x70>)
    21e2:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    21e4:	2302      	movs	r3, #2
    21e6:	002a      	movs	r2, r5
    21e8:	439a      	bics	r2, r3
    21ea:	d10e      	bne.n	220a <_usart_async_set_irq_state+0x3e>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    21ec:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    21ee:	2e00      	cmp	r6, #0
    21f0:	d105      	bne.n	21fe <_usart_async_set_irq_state+0x32>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    21f2:	2201      	movs	r2, #1
    21f4:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    21f6:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    21f8:	3201      	adds	r2, #1
    21fa:	751a      	strb	r2, [r3, #20]
}
    21fc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    21fe:	2201      	movs	r2, #1
    2200:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    2202:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2204:	3201      	adds	r2, #1
    2206:	759a      	strb	r2, [r3, #22]
    2208:	e7f8      	b.n	21fc <_usart_async_set_irq_state+0x30>
	} else if (USART_ASYNC_RX_DONE == type) {
    220a:	2d01      	cmp	r5, #1
    220c:	d007      	beq.n	221e <_usart_async_set_irq_state+0x52>
	} else if (USART_ASYNC_ERROR == type) {
    220e:	2d03      	cmp	r5, #3
    2210:	d1f4      	bne.n	21fc <_usart_async_set_irq_state+0x30>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    2212:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    2214:	2e00      	cmp	r6, #0
    2216:	d00b      	beq.n	2230 <_usart_async_set_irq_state+0x64>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    2218:	2280      	movs	r2, #128	; 0x80
    221a:	759a      	strb	r2, [r3, #22]
}
    221c:	e7ee      	b.n	21fc <_usart_async_set_irq_state+0x30>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    221e:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    2220:	2e00      	cmp	r6, #0
    2222:	d102      	bne.n	222a <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    2224:	2204      	movs	r2, #4
    2226:	751a      	strb	r2, [r3, #20]
    2228:	e7e8      	b.n	21fc <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    222a:	2204      	movs	r2, #4
    222c:	759a      	strb	r2, [r3, #22]
    222e:	e7e5      	b.n	21fc <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    2230:	2280      	movs	r2, #128	; 0x80
    2232:	751a      	strb	r2, [r3, #20]
    2234:	e7e2      	b.n	21fc <_usart_async_set_irq_state+0x30>
    2236:	46c0      	nop			; (mov r8, r8)
    2238:	00004bf8 	.word	0x00004bf8
    223c:	00001dc5 	.word	0x00001dc5

00002240 <SERCOM0_Handler>:
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}

void SERCOM0_Handler(void)
{
    2240:	b510      	push	{r4, lr}
	_spi_handler(_sercom0_dev);
    2242:	4b12      	ldr	r3, [pc, #72]	; (228c <SERCOM0_Handler+0x4c>)
    2244:	6818      	ldr	r0, [r3, #0]
	void *                      hw = dev->prvt;
    2246:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2248:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    224a:	7d93      	ldrb	r3, [r2, #22]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    224c:	400b      	ands	r3, r1
	if (st & SERCOM_SPI_INTFLAG_DRE) {
    224e:	07d9      	lsls	r1, r3, #31
    2250:	d407      	bmi.n	2262 <SERCOM0_Handler+0x22>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    2252:	0759      	lsls	r1, r3, #29
    2254:	d408      	bmi.n	2268 <SERCOM0_Handler+0x28>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    2256:	0799      	lsls	r1, r3, #30
    2258:	d409      	bmi.n	226e <SERCOM0_Handler+0x2e>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    225a:	b25b      	sxtb	r3, r3
    225c:	2b00      	cmp	r3, #0
    225e:	db0b      	blt.n	2278 <SERCOM0_Handler+0x38>
}
    2260:	bd10      	pop	{r4, pc}
		dev->callbacks.tx(dev);
    2262:	6883      	ldr	r3, [r0, #8]
    2264:	4798      	blx	r3
    2266:	e7fb      	b.n	2260 <SERCOM0_Handler+0x20>
		dev->callbacks.rx(dev);
    2268:	68c3      	ldr	r3, [r0, #12]
    226a:	4798      	blx	r3
    226c:	e7f8      	b.n	2260 <SERCOM0_Handler+0x20>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    226e:	2302      	movs	r3, #2
    2270:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    2272:	6903      	ldr	r3, [r0, #16]
    2274:	4798      	blx	r3
    2276:	e7f3      	b.n	2260 <SERCOM0_Handler+0x20>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    2278:	2304      	movs	r3, #4
    227a:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    227c:	337c      	adds	r3, #124	; 0x7c
    227e:	7613      	strb	r3, [r2, #24]
		dev->callbacks.err(dev, ERR_OVERFLOW);
    2280:	6943      	ldr	r3, [r0, #20]
    2282:	2113      	movs	r1, #19
    2284:	4249      	negs	r1, r1
    2286:	4798      	blx	r3
}
    2288:	e7ea      	b.n	2260 <SERCOM0_Handler+0x20>
    228a:	46c0      	nop			; (mov r8, r8)
    228c:	200005dc 	.word	0x200005dc

00002290 <SERCOM2_Handler>:

void SERCOM2_Handler(void)
{
    2290:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2292:	4b19      	ldr	r3, [pc, #100]	; (22f8 <SERCOM2_Handler+0x68>)
    2294:	6858      	ldr	r0, [r3, #4]
	void *hw = device->hw;
    2296:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2298:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    229a:	07db      	lsls	r3, r3, #31
    229c:	d502      	bpl.n	22a4 <SERCOM2_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    229e:	7da3      	ldrb	r3, [r4, #22]
    22a0:	07db      	lsls	r3, r3, #31
    22a2:	d40f      	bmi.n	22c4 <SERCOM2_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    22a4:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    22a6:	079b      	lsls	r3, r3, #30
    22a8:	d502      	bpl.n	22b0 <SERCOM2_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    22aa:	7da3      	ldrb	r3, [r4, #22]
    22ac:	079b      	lsls	r3, r3, #30
    22ae:	d40e      	bmi.n	22ce <SERCOM2_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    22b0:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    22b2:	075b      	lsls	r3, r3, #29
    22b4:	d515      	bpl.n	22e2 <SERCOM2_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    22b6:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    22b8:	2337      	movs	r3, #55	; 0x37
    22ba:	421a      	tst	r2, r3
    22bc:	d00c      	beq.n	22d8 <SERCOM2_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    22be:	3308      	adds	r3, #8
    22c0:	8363      	strh	r3, [r4, #26]
}
    22c2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    22c4:	2301      	movs	r3, #1
    22c6:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    22c8:	6803      	ldr	r3, [r0, #0]
    22ca:	4798      	blx	r3
    22cc:	e7f9      	b.n	22c2 <SERCOM2_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    22ce:	2302      	movs	r3, #2
    22d0:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    22d2:	6883      	ldr	r3, [r0, #8]
    22d4:	4798      	blx	r3
    22d6:	e7f4      	b.n	22c2 <SERCOM2_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    22d8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    22da:	b2c9      	uxtb	r1, r1
    22dc:	6843      	ldr	r3, [r0, #4]
    22de:	4798      	blx	r3
    22e0:	e7ef      	b.n	22c2 <SERCOM2_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    22e2:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    22e4:	09db      	lsrs	r3, r3, #7
    22e6:	d0ec      	beq.n	22c2 <SERCOM2_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    22e8:	2380      	movs	r3, #128	; 0x80
    22ea:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    22ec:	68c3      	ldr	r3, [r0, #12]
    22ee:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    22f0:	8b63      	ldrh	r3, [r4, #26]
    22f2:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    22f4:	8363      	strh	r3, [r4, #26]
}
    22f6:	e7e4      	b.n	22c2 <SERCOM2_Handler+0x32>
    22f8:	200005dc 	.word	0x200005dc

000022fc <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    22fc:	b570      	push	{r4, r5, r6, lr}
    22fe:	0005      	movs	r5, r0
    2300:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2302:	4b35      	ldr	r3, [pc, #212]	; (23d8 <_spi_m_sync_init+0xdc>)
    2304:	18cb      	adds	r3, r1, r3
    2306:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    2308:	b2db      	uxtb	r3, r3
    230a:	2b00      	cmp	r3, #0
    230c:	d00b      	beq.n	2326 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    230e:	2800      	cmp	r0, #0
    2310:	d051      	beq.n	23b6 <_spi_m_sync_init+0xba>
    2312:	1e60      	subs	r0, r4, #1
    2314:	4184      	sbcs	r4, r0
    2316:	b2e0      	uxtb	r0, r4
    2318:	4a30      	ldr	r2, [pc, #192]	; (23dc <_spi_m_sync_init+0xe0>)
    231a:	4931      	ldr	r1, [pc, #196]	; (23e0 <_spi_m_sync_init+0xe4>)
    231c:	4b31      	ldr	r3, [pc, #196]	; (23e4 <_spi_m_sync_init+0xe8>)
    231e:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    2320:	200d      	movs	r0, #13
    2322:	4240      	negs	r0, r0
    2324:	e046      	b.n	23b4 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    2326:	2800      	cmp	r0, #0
    2328:	d14d      	bne.n	23c6 <_spi_m_sync_init+0xca>
    232a:	4a2c      	ldr	r2, [pc, #176]	; (23dc <_spi_m_sync_init+0xe0>)
    232c:	492c      	ldr	r1, [pc, #176]	; (23e0 <_spi_m_sync_init+0xe4>)
    232e:	2000      	movs	r0, #0
    2330:	4b2c      	ldr	r3, [pc, #176]	; (23e4 <_spi_m_sync_init+0xe8>)
    2332:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2334:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2336:	07db      	lsls	r3, r3, #31
    2338:	d418      	bmi.n	236c <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    233a:	2203      	movs	r2, #3
    233c:	69e3      	ldr	r3, [r4, #28]
    233e:	421a      	tst	r2, r3
    2340:	d1fc      	bne.n	233c <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2342:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2344:	079b      	lsls	r3, r3, #30
    2346:	d50b      	bpl.n	2360 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2348:	6823      	ldr	r3, [r4, #0]
    234a:	2202      	movs	r2, #2
    234c:	4393      	bics	r3, r2
    234e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2350:	3201      	adds	r2, #1
    2352:	69e3      	ldr	r3, [r4, #28]
    2354:	421a      	tst	r2, r3
    2356:	d1fc      	bne.n	2352 <_spi_m_sync_init+0x56>
    2358:	2202      	movs	r2, #2
    235a:	69e3      	ldr	r3, [r4, #28]
    235c:	421a      	tst	r2, r3
    235e:	d1fc      	bne.n	235a <_spi_m_sync_init+0x5e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2360:	230d      	movs	r3, #13
    2362:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2364:	2203      	movs	r2, #3
    2366:	69e3      	ldr	r3, [r4, #28]
    2368:	421a      	tst	r2, r3
    236a:	d1fc      	bne.n	2366 <_spi_m_sync_init+0x6a>
    236c:	2201      	movs	r2, #1
    236e:	69e3      	ldr	r3, [r4, #28]
    2370:	421a      	tst	r2, r3
    2372:	d1fc      	bne.n	236e <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2374:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    2376:	0020      	movs	r0, r4
    2378:	1e43      	subs	r3, r0, #1
    237a:	4198      	sbcs	r0, r3
    237c:	b2c0      	uxtb	r0, r0
    237e:	4a1a      	ldr	r2, [pc, #104]	; (23e8 <_spi_m_sync_init+0xec>)
    2380:	4917      	ldr	r1, [pc, #92]	; (23e0 <_spi_m_sync_init+0xe4>)
    2382:	4b18      	ldr	r3, [pc, #96]	; (23e4 <_spi_m_sync_init+0xe8>)
    2384:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2386:	4b19      	ldr	r3, [pc, #100]	; (23ec <_spi_m_sync_init+0xf0>)
    2388:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    238a:	2203      	movs	r2, #3
    238c:	69e3      	ldr	r3, [r4, #28]
    238e:	421a      	tst	r2, r3
    2390:	d1fc      	bne.n	238c <_spi_m_sync_init+0x90>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2392:	2380      	movs	r3, #128	; 0x80
    2394:	029b      	lsls	r3, r3, #10
    2396:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2398:	2207      	movs	r2, #7
    239a:	69e3      	ldr	r3, [r4, #28]
    239c:	421a      	tst	r2, r3
    239e:	d1fc      	bne.n	239a <_spi_m_sync_init+0x9e>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    23a0:	23ff      	movs	r3, #255	; 0xff
    23a2:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    23a4:	2200      	movs	r2, #0
    23a6:	3bcf      	subs	r3, #207	; 0xcf
    23a8:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    23aa:	3b2f      	subs	r3, #47	; 0x2f
    23ac:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    23ae:	4b10      	ldr	r3, [pc, #64]	; (23f0 <_spi_m_sync_init+0xf4>)
    23b0:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    23b2:	2000      	movs	r0, #0
}
    23b4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    23b6:	4a09      	ldr	r2, [pc, #36]	; (23dc <_spi_m_sync_init+0xe0>)
    23b8:	4909      	ldr	r1, [pc, #36]	; (23e0 <_spi_m_sync_init+0xe4>)
    23ba:	2000      	movs	r0, #0
    23bc:	4b09      	ldr	r3, [pc, #36]	; (23e4 <_spi_m_sync_init+0xe8>)
    23be:	4798      	blx	r3
		return ERR_INVALID_ARG;
    23c0:	200d      	movs	r0, #13
    23c2:	4240      	negs	r0, r0
    23c4:	e7f6      	b.n	23b4 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    23c6:	0008      	movs	r0, r1
    23c8:	1e43      	subs	r3, r0, #1
    23ca:	4198      	sbcs	r0, r3
    23cc:	b2c0      	uxtb	r0, r0
    23ce:	4a03      	ldr	r2, [pc, #12]	; (23dc <_spi_m_sync_init+0xe0>)
    23d0:	4903      	ldr	r1, [pc, #12]	; (23e0 <_spi_m_sync_init+0xe4>)
    23d2:	4b04      	ldr	r3, [pc, #16]	; (23e4 <_spi_m_sync_init+0xe8>)
    23d4:	4798      	blx	r3
    23d6:	e7ad      	b.n	2334 <_spi_m_sync_init+0x38>
    23d8:	bdfff800 	.word	0xbdfff800
    23dc:	0000096d 	.word	0x0000096d
    23e0:	00004bf8 	.word	0x00004bf8
    23e4:	00001dc5 	.word	0x00001dc5
    23e8:	00000913 	.word	0x00000913
    23ec:	0011000c 	.word	0x0011000c
    23f0:	000001ff 	.word	0x000001ff

000023f4 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    23f4:	b570      	push	{r4, r5, r6, lr}
    23f6:	0005      	movs	r5, r0
    23f8:	000c      	movs	r4, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    23fa:	4b13      	ldr	r3, [pc, #76]	; (2448 <_spi_m_async_init+0x54>)
    23fc:	4798      	blx	r3

	if (rc < 0) {
    23fe:	2800      	cmp	r0, #0
    2400:	db1e      	blt.n	2440 <_spi_m_async_init+0x4c>
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
    2402:	0029      	movs	r1, r5
    2404:	0020      	movs	r0, r4
    2406:	4b11      	ldr	r3, [pc, #68]	; (244c <_spi_m_async_init+0x58>)
    2408:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    240a:	2300      	movs	r3, #0
    240c:	612b      	str	r3, [r5, #16]
	spid->callbacks.rx       = NULL;
    240e:	60eb      	str	r3, [r5, #12]
	spid->callbacks.tx       = NULL;
    2410:	60ab      	str	r3, [r5, #8]
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2412:	4b0f      	ldr	r3, [pc, #60]	; (2450 <_spi_m_async_init+0x5c>)
    2414:	469c      	mov	ip, r3
    2416:	4464      	add	r4, ip
    2418:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    241a:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    241c:	b2e3      	uxtb	r3, r4
    241e:	0622      	lsls	r2, r4, #24
    2420:	d40f      	bmi.n	2442 <_spi_m_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2422:	221f      	movs	r2, #31
    2424:	401a      	ands	r2, r3
    2426:	2301      	movs	r3, #1
    2428:	4093      	lsls	r3, r2
    242a:	4a0a      	ldr	r2, [pc, #40]	; (2454 <_spi_m_async_init+0x60>)
    242c:	2180      	movs	r1, #128	; 0x80
    242e:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2430:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2434:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2438:	3101      	adds	r1, #1
    243a:	31ff      	adds	r1, #255	; 0xff
    243c:	5053      	str	r3, [r2, r1]
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));

	return ERR_NONE;
    243e:	2000      	movs	r0, #0
}
    2440:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    2442:	2000      	movs	r0, #0
    2444:	e7fc      	b.n	2440 <_spi_m_async_init+0x4c>
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	000022fd 	.word	0x000022fd
    244c:	00001f9d 	.word	0x00001f9d
    2450:	bdfff800 	.word	0xbdfff800
    2454:	e000e100 	.word	0xe000e100

00002458 <_spi_m_async_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_m_async_enable(struct _spi_async_dev *dev)
{
    2458:	b510      	push	{r4, lr}
    245a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    245c:	d00b      	beq.n	2476 <_spi_m_async_enable+0x1e>
    245e:	6800      	ldr	r0, [r0, #0]
    2460:	1e43      	subs	r3, r0, #1
    2462:	4198      	sbcs	r0, r3
    2464:	b2c0      	uxtb	r0, r0
    2466:	4a05      	ldr	r2, [pc, #20]	; (247c <_spi_m_async_enable+0x24>)
    2468:	4905      	ldr	r1, [pc, #20]	; (2480 <_spi_m_async_enable+0x28>)
    246a:	4b06      	ldr	r3, [pc, #24]	; (2484 <_spi_m_async_enable+0x2c>)
    246c:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
    246e:	6820      	ldr	r0, [r4, #0]
    2470:	4b05      	ldr	r3, [pc, #20]	; (2488 <_spi_m_async_enable+0x30>)
    2472:	4798      	blx	r3
}
    2474:	bd10      	pop	{r4, pc}
    2476:	2000      	movs	r0, #0
    2478:	e7f5      	b.n	2466 <_spi_m_async_enable+0xe>
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	000009d6 	.word	0x000009d6
    2480:	00004bf8 	.word	0x00004bf8
    2484:	00001dc5 	.word	0x00001dc5
    2488:	00001fe5 	.word	0x00001fe5

0000248c <_spi_m_async_disable>:

	return _spi_sync_disable(dev->prvt);
}

int32_t _spi_m_async_disable(struct _spi_async_dev *dev)
{
    248c:	b510      	push	{r4, lr}
    248e:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    2490:	d00b      	beq.n	24aa <_spi_m_async_disable+0x1e>
    2492:	6800      	ldr	r0, [r0, #0]
    2494:	1e43      	subs	r3, r0, #1
    2496:	4198      	sbcs	r0, r3
    2498:	b2c0      	uxtb	r0, r0
    249a:	4a05      	ldr	r2, [pc, #20]	; (24b0 <_spi_m_async_disable+0x24>)
    249c:	4905      	ldr	r1, [pc, #20]	; (24b4 <_spi_m_async_disable+0x28>)
    249e:	4b06      	ldr	r3, [pc, #24]	; (24b8 <_spi_m_async_disable+0x2c>)
    24a0:	4798      	blx	r3

	return _spi_async_disable(dev->prvt);
    24a2:	6820      	ldr	r0, [r4, #0]
    24a4:	4b05      	ldr	r3, [pc, #20]	; (24bc <_spi_m_async_disable+0x30>)
    24a6:	4798      	blx	r3
}
    24a8:	bd10      	pop	{r4, pc}
    24aa:	2000      	movs	r0, #0
    24ac:	e7f5      	b.n	249a <_spi_m_async_disable+0xe>
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	000009f2 	.word	0x000009f2
    24b4:	00004bf8 	.word	0x00004bf8
    24b8:	00001dc5 	.word	0x00001dc5
    24bc:	000020d5 	.word	0x000020d5

000024c0 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    24c0:	b570      	push	{r4, r5, r6, lr}
    24c2:	000d      	movs	r5, r1
	void *hw = dev->prvt;
    24c4:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    24c6:	2800      	cmp	r0, #0
    24c8:	d00d      	beq.n	24e6 <_spi_m_async_enable_tx+0x26>
    24ca:	0020      	movs	r0, r4
    24cc:	1e43      	subs	r3, r0, #1
    24ce:	4198      	sbcs	r0, r3
    24d0:	b2c0      	uxtb	r0, r0
    24d2:	4a07      	ldr	r2, [pc, #28]	; (24f0 <_spi_m_async_enable_tx+0x30>)
    24d4:	4907      	ldr	r1, [pc, #28]	; (24f4 <_spi_m_async_enable_tx+0x34>)
    24d6:	4b08      	ldr	r3, [pc, #32]	; (24f8 <_spi_m_async_enable_tx+0x38>)
    24d8:	4798      	blx	r3

	if (state) {
    24da:	2d00      	cmp	r5, #0
    24dc:	d105      	bne.n	24ea <_spi_m_async_enable_tx+0x2a>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    24de:	2301      	movs	r3, #1
    24e0:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    24e2:	2000      	movs	r0, #0
    24e4:	bd70      	pop	{r4, r5, r6, pc}
    24e6:	2000      	movs	r0, #0
    24e8:	e7f3      	b.n	24d2 <_spi_m_async_enable_tx+0x12>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    24ea:	2301      	movs	r3, #1
    24ec:	75a3      	strb	r3, [r4, #22]
    24ee:	e7f8      	b.n	24e2 <_spi_m_async_enable_tx+0x22>
    24f0:	00000af9 	.word	0x00000af9
    24f4:	00004bf8 	.word	0x00004bf8
    24f8:	00001dc5 	.word	0x00001dc5

000024fc <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    24fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24fe:	000e      	movs	r6, r1
	void *hw = dev->prvt;
    2500:	6805      	ldr	r5, [r0, #0]

	ASSERT(dev);
    2502:	4c0c      	ldr	r4, [pc, #48]	; (2534 <_spi_m_async_enable_rx+0x38>)
    2504:	1e43      	subs	r3, r0, #1
    2506:	4198      	sbcs	r0, r3
    2508:	b2c0      	uxtb	r0, r0
    250a:	4a0b      	ldr	r2, [pc, #44]	; (2538 <_spi_m_async_enable_rx+0x3c>)
    250c:	0021      	movs	r1, r4
    250e:	4f0b      	ldr	r7, [pc, #44]	; (253c <_spi_m_async_enable_rx+0x40>)
    2510:	47b8      	blx	r7
	ASSERT(hw);
    2512:	0028      	movs	r0, r5
    2514:	1e43      	subs	r3, r0, #1
    2516:	4198      	sbcs	r0, r3
    2518:	b2c0      	uxtb	r0, r0
    251a:	4a09      	ldr	r2, [pc, #36]	; (2540 <_spi_m_async_enable_rx+0x44>)
    251c:	0021      	movs	r1, r4
    251e:	47b8      	blx	r7

	if (state) {
    2520:	2e00      	cmp	r6, #0
    2522:	d103      	bne.n	252c <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    2524:	2304      	movs	r3, #4
    2526:	752b      	strb	r3, [r5, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    2528:	2000      	movs	r0, #0
    252a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    252c:	2304      	movs	r3, #4
    252e:	75ab      	strb	r3, [r5, #22]
    2530:	e7fa      	b.n	2528 <_spi_m_async_enable_rx+0x2c>
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	00004bf8 	.word	0x00004bf8
    2538:	00000b0d 	.word	0x00000b0d
    253c:	00001dc5 	.word	0x00001dc5
    2540:	00000b0e 	.word	0x00000b0e

00002544 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    2544:	b570      	push	{r4, r5, r6, lr}
    2546:	0004      	movs	r4, r0
    2548:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    254a:	2800      	cmp	r0, #0
    254c:	d00f      	beq.n	256e <_spi_m_async_enable_tx_complete+0x2a>
    254e:	6800      	ldr	r0, [r0, #0]
    2550:	1e43      	subs	r3, r0, #1
    2552:	4198      	sbcs	r0, r3
    2554:	b2c0      	uxtb	r0, r0
    2556:	22b2      	movs	r2, #178	; 0xb2
    2558:	0112      	lsls	r2, r2, #4
    255a:	4908      	ldr	r1, [pc, #32]	; (257c <_spi_m_async_enable_tx_complete+0x38>)
    255c:	4b08      	ldr	r3, [pc, #32]	; (2580 <_spi_m_async_enable_tx_complete+0x3c>)
    255e:	4798      	blx	r3

	if (state) {
    2560:	2d00      	cmp	r5, #0
    2562:	d106      	bne.n	2572 <_spi_m_async_enable_tx_complete+0x2e>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    2564:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    2566:	2202      	movs	r2, #2
    2568:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    256a:	2000      	movs	r0, #0
    256c:	bd70      	pop	{r4, r5, r6, pc}
    256e:	2000      	movs	r0, #0
    2570:	e7f1      	b.n	2556 <_spi_m_async_enable_tx_complete+0x12>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    2572:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    2574:	2202      	movs	r2, #2
    2576:	759a      	strb	r2, [r3, #22]
    2578:	e7f7      	b.n	256a <_spi_m_async_enable_tx_complete+0x26>
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	00004bf8 	.word	0x00004bf8
    2580:	00001dc5 	.word	0x00001dc5

00002584 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    2584:	b570      	push	{r4, r5, r6, lr}
    2586:	0004      	movs	r4, r0
    2588:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    258a:	2800      	cmp	r0, #0
    258c:	d00b      	beq.n	25a6 <_spi_m_async_write_one+0x22>
    258e:	6800      	ldr	r0, [r0, #0]
    2590:	1e43      	subs	r3, r0, #1
    2592:	4198      	sbcs	r0, r3
    2594:	b2c0      	uxtb	r0, r0
    2596:	4a05      	ldr	r2, [pc, #20]	; (25ac <_spi_m_async_write_one+0x28>)
    2598:	4905      	ldr	r1, [pc, #20]	; (25b0 <_spi_m_async_write_one+0x2c>)
    259a:	4b06      	ldr	r3, [pc, #24]	; (25b4 <_spi_m_async_write_one+0x30>)
    259c:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    259e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    25a0:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    25a2:	2000      	movs	r0, #0
    25a4:	bd70      	pop	{r4, r5, r6, pc}
    25a6:	2000      	movs	r0, #0
    25a8:	e7f5      	b.n	2596 <_spi_m_async_write_one+0x12>
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	00000b32 	.word	0x00000b32
    25b0:	00004bf8 	.word	0x00004bf8
    25b4:	00001dc5 	.word	0x00001dc5

000025b8 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    25b8:	b510      	push	{r4, lr}
    25ba:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    25bc:	d00b      	beq.n	25d6 <_spi_m_async_read_one+0x1e>
    25be:	6800      	ldr	r0, [r0, #0]
    25c0:	1e43      	subs	r3, r0, #1
    25c2:	4198      	sbcs	r0, r3
    25c4:	b2c0      	uxtb	r0, r0
    25c6:	4a05      	ldr	r2, [pc, #20]	; (25dc <_spi_m_async_read_one+0x24>)
    25c8:	4905      	ldr	r1, [pc, #20]	; (25e0 <_spi_m_async_read_one+0x28>)
    25ca:	4b06      	ldr	r3, [pc, #24]	; (25e4 <_spi_m_async_read_one+0x2c>)
    25cc:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    25ce:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    25d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    25d2:	b280      	uxth	r0, r0
}
    25d4:	bd10      	pop	{r4, pc}
    25d6:	2000      	movs	r0, #0
    25d8:	e7f5      	b.n	25c6 <_spi_m_async_read_one+0xe>
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	00000b4d 	.word	0x00000b4d
    25e0:	00004bf8 	.word	0x00004bf8
    25e4:	00001dc5 	.word	0x00001dc5

000025e8 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    25e8:	b570      	push	{r4, r5, r6, lr}
    25ea:	0004      	movs	r4, r0
    25ec:	000d      	movs	r5, r1
    25ee:	0016      	movs	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    25f0:	2800      	cmp	r0, #0
    25f2:	d00f      	beq.n	2614 <_spi_m_async_register_callback+0x2c>
    25f4:	2000      	movs	r0, #0
    25f6:	2303      	movs	r3, #3
    25f8:	428b      	cmp	r3, r1
    25fa:	4140      	adcs	r0, r0
    25fc:	b2c0      	uxtb	r0, r0
    25fe:	2301      	movs	r3, #1
    2600:	4018      	ands	r0, r3
    2602:	4a05      	ldr	r2, [pc, #20]	; (2618 <_spi_m_async_register_callback+0x30>)
    2604:	4905      	ldr	r1, [pc, #20]	; (261c <_spi_m_async_register_callback+0x34>)
    2606:	4b06      	ldr	r3, [pc, #24]	; (2620 <_spi_m_async_register_callback+0x38>)
    2608:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    260a:	00ad      	lsls	r5, r5, #2
    260c:	1964      	adds	r4, r4, r5
    260e:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    2610:	2000      	movs	r0, #0
    2612:	bd70      	pop	{r4, r5, r6, pc}
    2614:	2000      	movs	r0, #0
    2616:	e7f2      	b.n	25fe <_spi_m_async_register_callback+0x16>
    2618:	00000b66 	.word	0x00000b66
    261c:	00004bf8 	.word	0x00004bf8
    2620:	00001dc5 	.word	0x00001dc5

00002624 <_spi_m_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_m_async_set_irq_state(struct _spi_async_dev *const device, const enum _spi_async_dev_cb_type type,
                                const bool state)
{
    2624:	b570      	push	{r4, r5, r6, lr}
    2626:	0004      	movs	r4, r0
    2628:	000e      	movs	r6, r1
    262a:	0015      	movs	r5, r2
	ASSERT(device);
    262c:	1e43      	subs	r3, r0, #1
    262e:	4198      	sbcs	r0, r3
    2630:	b2c0      	uxtb	r0, r0
    2632:	4a08      	ldr	r2, [pc, #32]	; (2654 <_spi_m_async_set_irq_state+0x30>)
    2634:	4908      	ldr	r1, [pc, #32]	; (2658 <_spi_m_async_set_irq_state+0x34>)
    2636:	4b09      	ldr	r3, [pc, #36]	; (265c <_spi_m_async_set_irq_state+0x38>)
    2638:	4798      	blx	r3

	if (SPI_DEV_CB_ERROR == type) {
    263a:	2e03      	cmp	r6, #3
    263c:	d000      	beq.n	2640 <_spi_m_async_set_irq_state+0x1c>
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
	}
}
    263e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    2640:	6823      	ldr	r3, [r4, #0]
	if (value == 0x0) {
    2642:	2d00      	cmp	r5, #0
    2644:	d002      	beq.n	264c <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    2646:	2280      	movs	r2, #128	; 0x80
    2648:	759a      	strb	r2, [r3, #22]
}
    264a:	e7f8      	b.n	263e <_spi_m_async_set_irq_state+0x1a>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    264c:	2280      	movs	r2, #128	; 0x80
    264e:	751a      	strb	r2, [r3, #20]
    2650:	e7f5      	b.n	263e <_spi_m_async_set_irq_state+0x1a>
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	00000ba7 	.word	0x00000ba7
    2658:	00004bf8 	.word	0x00004bf8
    265c:	00001dc5 	.word	0x00001dc5

00002660 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2660:	4b0e      	ldr	r3, [pc, #56]	; (269c <_sysctrl_init_sources+0x3c>)
    2662:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2664:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    2666:	480e      	ldr	r0, [pc, #56]	; (26a0 <_sysctrl_init_sources+0x40>)
    2668:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    266a:	0f89      	lsrs	r1, r1, #30
    266c:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    266e:	480d      	ldr	r0, [pc, #52]	; (26a4 <_sysctrl_init_sources+0x44>)
    2670:	4301      	orrs	r1, r0
    2672:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    2674:	621a      	str	r2, [r3, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    2676:	699a      	ldr	r2, [r3, #24]
	((Sysctrl *)hw)->OSC32K.reg = data;
    2678:	220a      	movs	r2, #10
    267a:	619a      	str	r2, [r3, #24]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    267c:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    267e:	3a06      	subs	r2, #6
    2680:	68cb      	ldr	r3, [r1, #12]
    2682:	421a      	tst	r2, r3
    2684:	d0fc      	beq.n	2680 <_sysctrl_init_sources+0x20>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    2686:	4905      	ldr	r1, [pc, #20]	; (269c <_sysctrl_init_sources+0x3c>)
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    2688:	2208      	movs	r2, #8
    268a:	68cb      	ldr	r3, [r1, #12]
    268c:	421a      	tst	r2, r3
    268e:	d0fc      	beq.n	268a <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    2690:	4a02      	ldr	r2, [pc, #8]	; (269c <_sysctrl_init_sources+0x3c>)
    2692:	6a13      	ldr	r3, [r2, #32]
    2694:	2180      	movs	r1, #128	; 0x80
    2696:	430b      	orrs	r3, r1
    2698:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    269a:	4770      	bx	lr
    269c:	40000800 	.word	0x40000800
    26a0:	0fff0000 	.word	0x0fff0000
    26a4:	00000302 	.word	0x00000302

000026a8 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    26a8:	2202      	movs	r2, #2
    26aa:	4b19      	ldr	r3, [pc, #100]	; (2710 <_sysctrl_init_referenced_generators+0x68>)
    26ac:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    26ae:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    26b0:	320e      	adds	r2, #14
    26b2:	68cb      	ldr	r3, [r1, #12]
    26b4:	421a      	tst	r2, r3
    26b6:	d0fc      	beq.n	26b2 <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    26b8:	4a16      	ldr	r2, [pc, #88]	; (2714 <_sysctrl_init_referenced_generators+0x6c>)
    26ba:	4b15      	ldr	r3, [pc, #84]	; (2710 <_sysctrl_init_referenced_generators+0x68>)
    26bc:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    26be:	4b16      	ldr	r3, [pc, #88]	; (2718 <_sysctrl_init_referenced_generators+0x70>)
    26c0:	681b      	ldr	r3, [r3, #0]
    26c2:	0e9b      	lsrs	r3, r3, #26
    26c4:	2b3f      	cmp	r3, #63	; 0x3f
    26c6:	d01a      	beq.n	26fe <_sysctrl_init_referenced_generators+0x56>
    26c8:	029b      	lsls	r3, r3, #10
    26ca:	2280      	movs	r2, #128	; 0x80
    26cc:	0092      	lsls	r2, r2, #2
    26ce:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    26d0:	4a0f      	ldr	r2, [pc, #60]	; (2710 <_sysctrl_init_referenced_generators+0x68>)
    26d2:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    26d4:	2393      	movs	r3, #147	; 0x93
    26d6:	005b      	lsls	r3, r3, #1
    26d8:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    26da:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    26dc:	075b      	lsls	r3, r3, #29
    26de:	d511      	bpl.n	2704 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    26e0:	0011      	movs	r1, r2
	tmp &= mask;
    26e2:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    26e4:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    26e6:	421a      	tst	r2, r3
    26e8:	d0fc      	beq.n	26e4 <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    26ea:	4a09      	ldr	r2, [pc, #36]	; (2710 <_sysctrl_init_referenced_generators+0x68>)
    26ec:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    26ee:	2180      	movs	r1, #128	; 0x80
    26f0:	430b      	orrs	r3, r1
    26f2:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    26f4:	4a09      	ldr	r2, [pc, #36]	; (271c <_sysctrl_init_referenced_generators+0x74>)
    26f6:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    26f8:	09db      	lsrs	r3, r3, #7
    26fa:	d1fc      	bne.n	26f6 <_sysctrl_init_referenced_generators+0x4e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    26fc:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    26fe:	23fc      	movs	r3, #252	; 0xfc
    2700:	01db      	lsls	r3, r3, #7
    2702:	e7e5      	b.n	26d0 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    2704:	4902      	ldr	r1, [pc, #8]	; (2710 <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    2706:	2210      	movs	r2, #16
    2708:	68cb      	ldr	r3, [r1, #12]
    270a:	421a      	tst	r2, r3
    270c:	d0fc      	beq.n	2708 <_sysctrl_init_referenced_generators+0x60>
    270e:	e7ec      	b.n	26ea <_sysctrl_init_referenced_generators+0x42>
    2710:	40000800 	.word	0x40000800
    2714:	0401bb80 	.word	0x0401bb80
    2718:	00806024 	.word	0x00806024
    271c:	40000c00 	.word	0x40000c00

00002720 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2720:	4b02      	ldr	r3, [pc, #8]	; (272c <_delay_init+0xc>)
    2722:	4a03      	ldr	r2, [pc, #12]	; (2730 <_delay_init+0x10>)
    2724:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2726:	2205      	movs	r2, #5
    2728:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    272a:	4770      	bx	lr
    272c:	e000e010 	.word	0xe000e010
    2730:	00ffffff 	.word	0x00ffffff

00002734 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    2734:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2736:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2738:	1e5e      	subs	r6, r3, #1
    273a:	b2f6      	uxtb	r6, r6
    273c:	2b00      	cmp	r3, #0
    273e:	d013      	beq.n	2768 <_delay_cycles+0x34>
    2740:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    2742:	4a0e      	ldr	r2, [pc, #56]	; (277c <_delay_cycles+0x48>)
    2744:	4d0e      	ldr	r5, [pc, #56]	; (2780 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2746:	2080      	movs	r0, #128	; 0x80
    2748:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    274a:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    274c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    274e:	6813      	ldr	r3, [r2, #0]
    2750:	4203      	tst	r3, r0
    2752:	d0fc      	beq.n	274e <_delay_cycles+0x1a>
	while (n--) {
    2754:	3c01      	subs	r4, #1
    2756:	b2e4      	uxtb	r4, r4
    2758:	2cff      	cmp	r4, #255	; 0xff
    275a:	d1f6      	bne.n	274a <_delay_cycles+0x16>
    275c:	0633      	lsls	r3, r6, #24
    275e:	1af6      	subs	r6, r6, r3
    2760:	4b08      	ldr	r3, [pc, #32]	; (2784 <_delay_cycles+0x50>)
    2762:	469c      	mov	ip, r3
    2764:	4461      	add	r1, ip
    2766:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2768:	4b04      	ldr	r3, [pc, #16]	; (277c <_delay_cycles+0x48>)
    276a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    276c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    276e:	0019      	movs	r1, r3
    2770:	2280      	movs	r2, #128	; 0x80
    2772:	0252      	lsls	r2, r2, #9
    2774:	680b      	ldr	r3, [r1, #0]
    2776:	4213      	tst	r3, r2
    2778:	d0fc      	beq.n	2774 <_delay_cycles+0x40>
		;
}
    277a:	bd70      	pop	{r4, r5, r6, pc}
    277c:	e000e010 	.word	0xe000e010
    2780:	00ffffff 	.word	0x00ffffff
    2784:	ff000001 	.word	0xff000001

00002788 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2788:	2000      	movs	r0, #0
    278a:	4770      	bx	lr

0000278c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    278c:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    278e:	7c83      	ldrb	r3, [r0, #18]
    2790:	220f      	movs	r2, #15
    2792:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2794:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    2796:	3a08      	subs	r2, #8
    2798:	400a      	ands	r2, r1
    279a:	2a01      	cmp	r2, #1
    279c:	d00b      	beq.n	27b6 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    279e:	015a      	lsls	r2, r3, #5
    27a0:	4919      	ldr	r1, [pc, #100]	; (2808 <_usb_d_dev_handle_setup+0x7c>)
    27a2:	468c      	mov	ip, r1
    27a4:	4462      	add	r2, ip
    27a6:	2110      	movs	r1, #16
    27a8:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    27aa:	015b      	lsls	r3, r3, #5
    27ac:	4a17      	ldr	r2, [pc, #92]	; (280c <_usb_d_dev_handle_setup+0x80>)
    27ae:	4694      	mov	ip, r2
    27b0:	4463      	add	r3, ip
    27b2:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    27b4:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    27b6:	064a      	lsls	r2, r1, #25
    27b8:	d50e      	bpl.n	27d8 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    27ba:	7cc2      	ldrb	r2, [r0, #19]
    27bc:	2140      	movs	r1, #64	; 0x40
    27be:	438a      	bics	r2, r1
    27c0:	74c2      	strb	r2, [r0, #19]
    27c2:	015a      	lsls	r2, r3, #5
    27c4:	4c12      	ldr	r4, [pc, #72]	; (2810 <_usb_d_dev_handle_setup+0x84>)
    27c6:	46a4      	mov	ip, r4
    27c8:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    27ca:	2580      	movs	r5, #128	; 0x80
    27cc:	2482      	movs	r4, #130	; 0x82
    27ce:	0064      	lsls	r4, r4, #1
    27d0:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    27d2:	2406      	movs	r4, #6
    27d4:	34ff      	adds	r4, #255	; 0xff
    27d6:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    27d8:	7cc2      	ldrb	r2, [r0, #19]
    27da:	2108      	movs	r1, #8
    27dc:	438a      	bics	r2, r1
    27de:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    27e0:	490c      	ldr	r1, [pc, #48]	; (2814 <_usb_d_dev_handle_setup+0x88>)
    27e2:	015a      	lsls	r2, r3, #5
    27e4:	188c      	adds	r4, r1, r2
    27e6:	2500      	movs	r5, #0
    27e8:	72a5      	strb	r5, [r4, #10]
    27ea:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    27ec:	0013      	movs	r3, r2
    27ee:	4c06      	ldr	r4, [pc, #24]	; (2808 <_usb_d_dev_handle_setup+0x7c>)
    27f0:	46a4      	mov	ip, r4
    27f2:	4463      	add	r3, ip
    27f4:	246f      	movs	r4, #111	; 0x6f
    27f6:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    27f8:	4b04      	ldr	r3, [pc, #16]	; (280c <_usb_d_dev_handle_setup+0x80>)
    27fa:	469c      	mov	ip, r3
    27fc:	4462      	add	r2, ip
    27fe:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    2800:	7c80      	ldrb	r0, [r0, #18]
    2802:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    2804:	4798      	blx	r3
    2806:	e7d5      	b.n	27b4 <_usb_d_dev_handle_setup+0x28>
    2808:	41005100 	.word	0x41005100
    280c:	41005108 	.word	0x41005108
    2810:	41005000 	.word	0x41005000
    2814:	200005e4 	.word	0x200005e4

00002818 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    2818:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    281a:	2220      	movs	r2, #32
    281c:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    281e:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2820:	7c81      	ldrb	r1, [r0, #18]
    2822:	230f      	movs	r3, #15
    2824:	400b      	ands	r3, r1
    2826:	015b      	lsls	r3, r3, #5
    2828:	4905      	ldr	r1, [pc, #20]	; (2840 <_usb_d_dev_handle_stall+0x28>)
    282a:	468c      	mov	ip, r1
    282c:	4463      	add	r3, ip
    282e:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    2830:	6882      	ldr	r2, [r0, #8]
    2832:	7c80      	ldrb	r0, [r0, #18]
    2834:	4b03      	ldr	r3, [pc, #12]	; (2844 <_usb_d_dev_handle_stall+0x2c>)
    2836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2838:	2101      	movs	r1, #1
    283a:	4798      	blx	r3
}
    283c:	bd10      	pop	{r4, pc}
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	41005108 	.word	0x41005108
    2844:	200005e4 	.word	0x200005e4

00002848 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2848:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    284a:	7c83      	ldrb	r3, [r0, #18]
    284c:	2bff      	cmp	r3, #255	; 0xff
    284e:	d002      	beq.n	2856 <_usb_d_dev_trans_done+0xe>
    2850:	7cc2      	ldrb	r2, [r0, #19]
    2852:	0652      	lsls	r2, r2, #25
    2854:	d400      	bmi.n	2858 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    2856:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    2858:	7cc2      	ldrb	r2, [r0, #19]
    285a:	2440      	movs	r4, #64	; 0x40
    285c:	43a2      	bics	r2, r4
    285e:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2860:	6882      	ldr	r2, [r0, #8]
    2862:	4802      	ldr	r0, [pc, #8]	; (286c <_usb_d_dev_trans_done+0x24>)
    2864:	6f04      	ldr	r4, [r0, #112]	; 0x70
    2866:	0018      	movs	r0, r3
    2868:	47a0      	blx	r4
    286a:	e7f4      	b.n	2856 <_usb_d_dev_trans_done+0xe>
    286c:	200005e4 	.word	0x200005e4

00002870 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2870:	b530      	push	{r4, r5, lr}
    2872:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2874:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2876:	ac01      	add	r4, sp, #4
    2878:	2525      	movs	r5, #37	; 0x25
    287a:	7025      	strb	r5, [r4, #0]
    287c:	3525      	adds	r5, #37	; 0x25
    287e:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2880:	2bff      	cmp	r3, #255	; 0xff
    2882:	d01b      	beq.n	28bc <_usb_d_dev_trans_stop+0x4c>
    2884:	7cc4      	ldrb	r4, [r0, #19]
    2886:	0664      	lsls	r4, r4, #25
    2888:	d518      	bpl.n	28bc <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    288a:	240f      	movs	r4, #15
    288c:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    288e:	2900      	cmp	r1, #0
    2890:	d016      	beq.n	28c0 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2892:	015c      	lsls	r4, r3, #5
    2894:	4d0e      	ldr	r5, [pc, #56]	; (28d0 <_usb_d_dev_trans_stop+0x60>)
    2896:	46ac      	mov	ip, r5
    2898:	4464      	add	r4, ip
    289a:	2580      	movs	r5, #128	; 0x80
    289c:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    289e:	ac01      	add	r4, sp, #4
    28a0:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    28a2:	0159      	lsls	r1, r3, #5
    28a4:	4d0a      	ldr	r5, [pc, #40]	; (28d0 <_usb_d_dev_trans_stop+0x60>)
    28a6:	46ac      	mov	ip, r5
    28a8:	4461      	add	r1, ip
    28aa:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    28ac:	015b      	lsls	r3, r3, #5
    28ae:	4909      	ldr	r1, [pc, #36]	; (28d4 <_usb_d_dev_trans_stop+0x64>)
    28b0:	468c      	mov	ip, r1
    28b2:	4463      	add	r3, ip
    28b4:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    28b6:	0011      	movs	r1, r2
    28b8:	4b07      	ldr	r3, [pc, #28]	; (28d8 <_usb_d_dev_trans_stop+0x68>)
    28ba:	4798      	blx	r3
}
    28bc:	b003      	add	sp, #12
    28be:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    28c0:	015c      	lsls	r4, r3, #5
    28c2:	4d03      	ldr	r5, [pc, #12]	; (28d0 <_usb_d_dev_trans_stop+0x60>)
    28c4:	46ac      	mov	ip, r5
    28c6:	4464      	add	r4, ip
    28c8:	2540      	movs	r5, #64	; 0x40
    28ca:	7165      	strb	r5, [r4, #5]
    28cc:	e7e7      	b.n	289e <_usb_d_dev_trans_stop+0x2e>
    28ce:	46c0      	nop			; (mov r8, r8)
    28d0:	41005100 	.word	0x41005100
    28d4:	41005108 	.word	0x41005108
    28d8:	00002849 	.word	0x00002849

000028dc <_usb_d_dev_handle_trfail>:
{
    28dc:	b570      	push	{r4, r5, r6, lr}
    28de:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    28e0:	7c83      	ldrb	r3, [r0, #18]
    28e2:	220f      	movs	r2, #15
    28e4:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    28e6:	aa01      	add	r2, sp, #4
    28e8:	2404      	movs	r4, #4
    28ea:	7014      	strb	r4, [r2, #0]
    28ec:	3404      	adds	r4, #4
    28ee:	7054      	strb	r4, [r2, #1]
    28f0:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    28f2:	2900      	cmp	r1, #0
    28f4:	d031      	beq.n	295a <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    28f6:	001a      	movs	r2, r3
    28f8:	3208      	adds	r2, #8
    28fa:	0152      	lsls	r2, r2, #5
    28fc:	4c32      	ldr	r4, [pc, #200]	; (29c8 <_usb_d_dev_handle_trfail+0xec>)
    28fe:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2900:	0664      	lsls	r4, r4, #25
    2902:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    2904:	010a      	lsls	r2, r1, #4
    2906:	1952      	adds	r2, r2, r5
    2908:	4d30      	ldr	r5, [pc, #192]	; (29cc <_usb_d_dev_handle_trfail+0xf0>)
    290a:	18aa      	adds	r2, r5, r2
    290c:	7a95      	ldrb	r5, [r2, #10]
    290e:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2910:	2c02      	cmp	r4, #2
    2912:	d02a      	beq.n	296a <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    2914:	07ac      	lsls	r4, r5, #30
    2916:	d541      	bpl.n	299c <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2918:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    291a:	7a94      	ldrb	r4, [r2, #10]
    291c:	2602      	movs	r6, #2
    291e:	43b4      	bics	r4, r6
    2920:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2922:	aa01      	add	r2, sp, #4
    2924:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2926:	015a      	lsls	r2, r3, #5
    2928:	4e29      	ldr	r6, [pc, #164]	; (29d0 <_usb_d_dev_handle_trfail+0xf4>)
    292a:	46b4      	mov	ip, r6
    292c:	4462      	add	r2, ip
    292e:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2930:	015b      	lsls	r3, r3, #5
    2932:	4a28      	ldr	r2, [pc, #160]	; (29d4 <_usb_d_dev_handle_trfail+0xf8>)
    2934:	4694      	mov	ip, r2
    2936:	4463      	add	r3, ip
    2938:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    293a:	2307      	movs	r3, #7
    293c:	402b      	ands	r3, r5
    293e:	2b01      	cmp	r3, #1
    2940:	d13f      	bne.n	29c2 <_usb_d_dev_handle_trfail+0xe6>
    2942:	7cc3      	ldrb	r3, [r0, #19]
    2944:	065b      	lsls	r3, r3, #25
    2946:	d53c      	bpl.n	29c2 <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2948:	7cc3      	ldrb	r3, [r0, #19]
    294a:	09db      	lsrs	r3, r3, #7
    294c:	4299      	cmp	r1, r3
    294e:	d038      	beq.n	29c2 <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2950:	2200      	movs	r2, #0
    2952:	0019      	movs	r1, r3
    2954:	4b20      	ldr	r3, [pc, #128]	; (29d8 <_usb_d_dev_handle_trfail+0xfc>)
    2956:	4798      	blx	r3
    2958:	e033      	b.n	29c2 <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    295a:	001a      	movs	r2, r3
    295c:	3208      	adds	r2, #8
    295e:	0152      	lsls	r2, r2, #5
    2960:	4c19      	ldr	r4, [pc, #100]	; (29c8 <_usb_d_dev_handle_trfail+0xec>)
    2962:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2964:	2207      	movs	r2, #7
    2966:	4014      	ands	r4, r2
    2968:	e7cc      	b.n	2904 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    296a:	07ec      	lsls	r4, r5, #31
    296c:	d5d2      	bpl.n	2914 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    296e:	7a94      	ldrb	r4, [r2, #10]
    2970:	2501      	movs	r5, #1
    2972:	43ac      	bics	r4, r5
    2974:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2976:	aa01      	add	r2, sp, #4
    2978:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    297a:	015a      	lsls	r2, r3, #5
    297c:	4d14      	ldr	r5, [pc, #80]	; (29d0 <_usb_d_dev_handle_trfail+0xf4>)
    297e:	46ac      	mov	ip, r5
    2980:	4462      	add	r2, ip
    2982:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2984:	015b      	lsls	r3, r3, #5
    2986:	4a13      	ldr	r2, [pc, #76]	; (29d4 <_usb_d_dev_handle_trfail+0xf8>)
    2988:	4694      	mov	ip, r2
    298a:	4463      	add	r3, ip
    298c:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    298e:	1e4b      	subs	r3, r1, #1
    2990:	4199      	sbcs	r1, r3
    2992:	b2c9      	uxtb	r1, r1
    2994:	2204      	movs	r2, #4
    2996:	4b10      	ldr	r3, [pc, #64]	; (29d8 <_usb_d_dev_handle_trfail+0xfc>)
    2998:	4798      	blx	r3
    299a:	e012      	b.n	29c2 <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    299c:	005a      	lsls	r2, r3, #1
    299e:	1852      	adds	r2, r2, r1
    29a0:	0112      	lsls	r2, r2, #4
    29a2:	480a      	ldr	r0, [pc, #40]	; (29cc <_usb_d_dev_handle_trfail+0xf0>)
    29a4:	1882      	adds	r2, r0, r2
    29a6:	2000      	movs	r0, #0
    29a8:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    29aa:	aa01      	add	r2, sp, #4
    29ac:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    29ae:	015a      	lsls	r2, r3, #5
    29b0:	4807      	ldr	r0, [pc, #28]	; (29d0 <_usb_d_dev_handle_trfail+0xf4>)
    29b2:	4684      	mov	ip, r0
    29b4:	4462      	add	r2, ip
    29b6:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    29b8:	015b      	lsls	r3, r3, #5
    29ba:	4a06      	ldr	r2, [pc, #24]	; (29d4 <_usb_d_dev_handle_trfail+0xf8>)
    29bc:	4694      	mov	ip, r2
    29be:	4463      	add	r3, ip
    29c0:	7019      	strb	r1, [r3, #0]
}
    29c2:	b002      	add	sp, #8
    29c4:	bd70      	pop	{r4, r5, r6, pc}
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	41005000 	.word	0x41005000
    29cc:	200005e4 	.word	0x200005e4
    29d0:	41005100 	.word	0x41005100
    29d4:	41005108 	.word	0x41005108
    29d8:	00002871 	.word	0x00002871

000029dc <_usb_d_dev_reset_epts>:
{
    29dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    29de:	46c6      	mov	lr, r8
    29e0:	b500      	push	{lr}
    29e2:	4d0c      	ldr	r5, [pc, #48]	; (2a14 <_usb_d_dev_reset_epts+0x38>)
    29e4:	002c      	movs	r4, r5
    29e6:	3474      	adds	r4, #116	; 0x74
    29e8:	3529      	adds	r5, #41	; 0x29
    29ea:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    29ec:	4b0a      	ldr	r3, [pc, #40]	; (2a18 <_usb_d_dev_reset_epts+0x3c>)
    29ee:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    29f0:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    29f2:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    29f4:	2103      	movs	r1, #3
    29f6:	0020      	movs	r0, r4
    29f8:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    29fa:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    29fc:	74e6      	strb	r6, [r4, #19]
    29fe:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2a00:	42ac      	cmp	r4, r5
    2a02:	d1f7      	bne.n	29f4 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    2a04:	2260      	movs	r2, #96	; 0x60
    2a06:	2100      	movs	r1, #0
    2a08:	4802      	ldr	r0, [pc, #8]	; (2a14 <_usb_d_dev_reset_epts+0x38>)
    2a0a:	4b04      	ldr	r3, [pc, #16]	; (2a1c <_usb_d_dev_reset_epts+0x40>)
    2a0c:	4798      	blx	r3
}
    2a0e:	bc04      	pop	{r2}
    2a10:	4690      	mov	r8, r2
    2a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a14:	200005e4 	.word	0x200005e4
    2a18:	00002849 	.word	0x00002849
    2a1c:	00004911 	.word	0x00004911

00002a20 <_usb_d_dev_in_next>:
{
    2a20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a22:	46c6      	mov	lr, r8
    2a24:	b500      	push	{lr}
    2a26:	0004      	movs	r4, r0
    2a28:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    2a2a:	7c83      	ldrb	r3, [r0, #18]
    2a2c:	250f      	movs	r5, #15
    2a2e:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2a30:	2900      	cmp	r1, #0
    2a32:	d100      	bne.n	2a36 <_usb_d_dev_in_next+0x16>
    2a34:	e0aa      	b.n	2b8c <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2a36:	016a      	lsls	r2, r5, #5
    2a38:	4b5a      	ldr	r3, [pc, #360]	; (2ba4 <_usb_d_dev_in_next+0x184>)
    2a3a:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2a3c:	6958      	ldr	r0, [r3, #20]
    2a3e:	0480      	lsls	r0, r0, #18
    2a40:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2a42:	8a23      	ldrh	r3, [r4, #16]
    2a44:	4a58      	ldr	r2, [pc, #352]	; (2ba8 <_usb_d_dev_in_next+0x188>)
    2a46:	4293      	cmp	r3, r2
    2a48:	d100      	bne.n	2a4c <_usb_d_dev_in_next+0x2c>
    2a4a:	e09a      	b.n	2b82 <_usb_d_dev_in_next+0x162>
    2a4c:	3b01      	subs	r3, #1
    2a4e:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2a50:	7ce3      	ldrb	r3, [r4, #19]
    2a52:	2707      	movs	r7, #7
    2a54:	401f      	ands	r7, r3
	if (isr) {
    2a56:	2e00      	cmp	r6, #0
    2a58:	d005      	beq.n	2a66 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2a5a:	016b      	lsls	r3, r5, #5
    2a5c:	4953      	ldr	r1, [pc, #332]	; (2bac <_usb_d_dev_in_next+0x18c>)
    2a5e:	468c      	mov	ip, r1
    2a60:	4463      	add	r3, ip
    2a62:	2102      	movs	r1, #2
    2a64:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    2a66:	68a3      	ldr	r3, [r4, #8]
    2a68:	18c1      	adds	r1, r0, r3
    2a6a:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    2a6c:	6863      	ldr	r3, [r4, #4]
    2a6e:	4299      	cmp	r1, r3
    2a70:	d24a      	bcs.n	2b08 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    2a72:	1a5b      	subs	r3, r3, r1
    2a74:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    2a76:	7ce2      	ldrb	r2, [r4, #19]
    2a78:	0692      	lsls	r2, r2, #26
    2a7a:	d535      	bpl.n	2ae8 <_usb_d_dev_in_next+0xc8>
    2a7c:	8a22      	ldrh	r2, [r4, #16]
    2a7e:	1c10      	adds	r0, r2, #0
    2a80:	b292      	uxth	r2, r2
    2a82:	429a      	cmp	r2, r3
    2a84:	d900      	bls.n	2a88 <_usb_d_dev_in_next+0x68>
    2a86:	1c18      	adds	r0, r3, #0
    2a88:	b283      	uxth	r3, r0
    2a8a:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    2a8c:	6823      	ldr	r3, [r4, #0]
    2a8e:	469c      	mov	ip, r3
    2a90:	4461      	add	r1, ip
    2a92:	4642      	mov	r2, r8
    2a94:	68e0      	ldr	r0, [r4, #12]
    2a96:	4b46      	ldr	r3, [pc, #280]	; (2bb0 <_usb_d_dev_in_next+0x190>)
    2a98:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2a9a:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    2a9c:	016a      	lsls	r2, r5, #5
    2a9e:	4b41      	ldr	r3, [pc, #260]	; (2ba4 <_usb_d_dev_in_next+0x184>)
    2aa0:	189b      	adds	r3, r3, r2
    2aa2:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2aa4:	016a      	lsls	r2, r5, #5
    2aa6:	4b3f      	ldr	r3, [pc, #252]	; (2ba4 <_usb_d_dev_in_next+0x184>)
    2aa8:	189b      	adds	r3, r3, r2
    2aaa:	695a      	ldr	r2, [r3, #20]
    2aac:	4641      	mov	r1, r8
    2aae:	0489      	lsls	r1, r1, #18
    2ab0:	0c89      	lsrs	r1, r1, #18
    2ab2:	0b92      	lsrs	r2, r2, #14
    2ab4:	0392      	lsls	r2, r2, #14
    2ab6:	430a      	orrs	r2, r1
    2ab8:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2aba:	695a      	ldr	r2, [r3, #20]
    2abc:	493d      	ldr	r1, [pc, #244]	; (2bb4 <_usb_d_dev_in_next+0x194>)
    2abe:	400a      	ands	r2, r1
    2ac0:	615a      	str	r2, [r3, #20]
	if (!isr) {
    2ac2:	2e00      	cmp	r6, #0
    2ac4:	d107      	bne.n	2ad6 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    2ac6:	2f01      	cmp	r7, #1
    2ac8:	d059      	beq.n	2b7e <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    2aca:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2acc:	016b      	lsls	r3, r5, #5
    2ace:	493a      	ldr	r1, [pc, #232]	; (2bb8 <_usb_d_dev_in_next+0x198>)
    2ad0:	468c      	mov	ip, r1
    2ad2:	4463      	add	r3, ip
    2ad4:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2ad6:	016d      	lsls	r5, r5, #5
    2ad8:	4b34      	ldr	r3, [pc, #208]	; (2bac <_usb_d_dev_in_next+0x18c>)
    2ada:	469c      	mov	ip, r3
    2adc:	4465      	add	r5, ip
    2ade:	2380      	movs	r3, #128	; 0x80
    2ae0:	716b      	strb	r3, [r5, #5]
}
    2ae2:	bc04      	pop	{r2}
    2ae4:	4690      	mov	r8, r2
    2ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ae8:	1c1a      	adds	r2, r3, #0
    2aea:	2080      	movs	r0, #128	; 0x80
    2aec:	0180      	lsls	r0, r0, #6
    2aee:	4283      	cmp	r3, r0
    2af0:	d901      	bls.n	2af6 <_usb_d_dev_in_next+0xd6>
    2af2:	4b32      	ldr	r3, [pc, #200]	; (2bbc <_usb_d_dev_in_next+0x19c>)
    2af4:	881a      	ldrh	r2, [r3, #0]
    2af6:	b293      	uxth	r3, r2
    2af8:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2afa:	6823      	ldr	r3, [r4, #0]
    2afc:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    2afe:	016a      	lsls	r2, r5, #5
    2b00:	4b28      	ldr	r3, [pc, #160]	; (2ba4 <_usb_d_dev_in_next+0x184>)
    2b02:	189b      	adds	r3, r3, r2
    2b04:	6119      	str	r1, [r3, #16]
    2b06:	e7cd      	b.n	2aa4 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    2b08:	7ce3      	ldrb	r3, [r4, #19]
    2b0a:	06db      	lsls	r3, r3, #27
    2b0c:	d50f      	bpl.n	2b2e <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    2b0e:	7ce3      	ldrb	r3, [r4, #19]
    2b10:	2210      	movs	r2, #16
    2b12:	4393      	bics	r3, r2
    2b14:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2b16:	016a      	lsls	r2, r5, #5
    2b18:	4b22      	ldr	r3, [pc, #136]	; (2ba4 <_usb_d_dev_in_next+0x184>)
    2b1a:	189b      	adds	r3, r3, r2
    2b1c:	695a      	ldr	r2, [r3, #20]
    2b1e:	0b92      	lsrs	r2, r2, #14
    2b20:	0392      	lsls	r2, r2, #14
    2b22:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2b24:	695a      	ldr	r2, [r3, #20]
    2b26:	4923      	ldr	r1, [pc, #140]	; (2bb4 <_usb_d_dev_in_next+0x194>)
    2b28:	400a      	ands	r2, r1
    2b2a:	615a      	str	r2, [r3, #20]
    2b2c:	e7c9      	b.n	2ac2 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    2b2e:	2f01      	cmp	r7, #1
    2b30:	d00e      	beq.n	2b50 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2b32:	016d      	lsls	r5, r5, #5
    2b34:	4b22      	ldr	r3, [pc, #136]	; (2bc0 <_usb_d_dev_in_next+0x1a0>)
    2b36:	469c      	mov	ip, r3
    2b38:	4465      	add	r5, ip
    2b3a:	234a      	movs	r3, #74	; 0x4a
    2b3c:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    2b3e:	8a21      	ldrh	r1, [r4, #16]
    2b40:	4002      	ands	r2, r0
    2b42:	4291      	cmp	r1, r2
    2b44:	d00b      	beq.n	2b5e <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2b46:	2100      	movs	r1, #0
    2b48:	0020      	movs	r0, r4
    2b4a:	4b1e      	ldr	r3, [pc, #120]	; (2bc4 <_usb_d_dev_in_next+0x1a4>)
    2b4c:	4798      	blx	r3
	return;
    2b4e:	e7c8      	b.n	2ae2 <_usb_d_dev_in_next+0xc2>
    2b50:	016d      	lsls	r5, r5, #5
    2b52:	4b1b      	ldr	r3, [pc, #108]	; (2bc0 <_usb_d_dev_in_next+0x1a0>)
    2b54:	469c      	mov	ip, r3
    2b56:	4465      	add	r5, ip
    2b58:	234b      	movs	r3, #75	; 0x4b
    2b5a:	702b      	strb	r3, [r5, #0]
    2b5c:	e7ef      	b.n	2b3e <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    2b5e:	7ce3      	ldrb	r3, [r4, #19]
    2b60:	2240      	movs	r2, #64	; 0x40
    2b62:	4393      	bics	r3, r2
    2b64:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2b66:	7ca0      	ldrb	r0, [r4, #18]
    2b68:	4b0e      	ldr	r3, [pc, #56]	; (2ba4 <_usb_d_dev_in_next+0x184>)
    2b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    2b6c:	68a1      	ldr	r1, [r4, #8]
    2b6e:	4798      	blx	r3
    2b70:	2800      	cmp	r0, #0
    2b72:	d1b6      	bne.n	2ae2 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    2b74:	7ce3      	ldrb	r3, [r4, #19]
    2b76:	2240      	movs	r2, #64	; 0x40
    2b78:	4313      	orrs	r3, r2
    2b7a:	74e3      	strb	r3, [r4, #19]
    2b7c:	e7e3      	b.n	2b46 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    2b7e:	224e      	movs	r2, #78	; 0x4e
    2b80:	e7a4      	b.n	2acc <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2b82:	7ce7      	ldrb	r7, [r4, #19]
    2b84:	2307      	movs	r3, #7
    2b86:	401f      	ands	r7, r3
    2b88:	4a07      	ldr	r2, [pc, #28]	; (2ba8 <_usb_d_dev_in_next+0x188>)
    2b8a:	e766      	b.n	2a5a <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2b8c:	8a03      	ldrh	r3, [r0, #16]
    2b8e:	4a06      	ldr	r2, [pc, #24]	; (2ba8 <_usb_d_dev_in_next+0x188>)
    2b90:	2000      	movs	r0, #0
    2b92:	4293      	cmp	r3, r2
    2b94:	d000      	beq.n	2b98 <_usb_d_dev_in_next+0x178>
    2b96:	e759      	b.n	2a4c <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2b98:	7ce3      	ldrb	r3, [r4, #19]
    2b9a:	2707      	movs	r7, #7
    2b9c:	401f      	ands	r7, r3
    2b9e:	2000      	movs	r0, #0
    2ba0:	4a01      	ldr	r2, [pc, #4]	; (2ba8 <_usb_d_dev_in_next+0x188>)
    2ba2:	e760      	b.n	2a66 <_usb_d_dev_in_next+0x46>
    2ba4:	200005e4 	.word	0x200005e4
    2ba8:	000003ff 	.word	0x000003ff
    2bac:	41005100 	.word	0x41005100
    2bb0:	0000488d 	.word	0x0000488d
    2bb4:	f0003fff 	.word	0xf0003fff
    2bb8:	41005109 	.word	0x41005109
    2bbc:	00004c14 	.word	0x00004c14
    2bc0:	41005108 	.word	0x41005108
    2bc4:	00002849 	.word	0x00002849

00002bc8 <_usb_d_dev_out_next>:
{
    2bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bca:	46de      	mov	lr, fp
    2bcc:	4657      	mov	r7, sl
    2bce:	464e      	mov	r6, r9
    2bd0:	4645      	mov	r5, r8
    2bd2:	b5e0      	push	{r5, r6, r7, lr}
    2bd4:	0004      	movs	r4, r0
    2bd6:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2bd8:	7c83      	ldrb	r3, [r0, #18]
    2bda:	250f      	movs	r5, #15
    2bdc:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2bde:	2900      	cmp	r1, #0
    2be0:	d057      	beq.n	2c92 <_usb_d_dev_out_next+0xca>
    2be2:	016a      	lsls	r2, r5, #5
    2be4:	4b7d      	ldr	r3, [pc, #500]	; (2ddc <_usb_d_dev_out_next+0x214>)
    2be6:	189b      	adds	r3, r3, r2
    2be8:	685a      	ldr	r2, [r3, #4]
    2bea:	0112      	lsls	r2, r2, #4
    2bec:	0c92      	lsrs	r2, r2, #18
    2bee:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2bf0:	685f      	ldr	r7, [r3, #4]
    2bf2:	04bf      	lsls	r7, r7, #18
    2bf4:	0cbf      	lsrs	r7, r7, #18
    2bf6:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2bf8:	8a06      	ldrh	r6, [r0, #16]
    2bfa:	4b79      	ldr	r3, [pc, #484]	; (2de0 <_usb_d_dev_out_next+0x218>)
    2bfc:	429e      	cmp	r6, r3
    2bfe:	d100      	bne.n	2c02 <_usb_d_dev_out_next+0x3a>
    2c00:	e0cd      	b.n	2d9e <_usb_d_dev_out_next+0x1d6>
    2c02:	3e01      	subs	r6, #1
    2c04:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    2c06:	465f      	mov	r7, fp
    2c08:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2c0a:	7ce3      	ldrb	r3, [r4, #19]
    2c0c:	2207      	movs	r2, #7
    2c0e:	401a      	ands	r2, r3
    2c10:	4691      	mov	r9, r2
	if (isr) {
    2c12:	4643      	mov	r3, r8
    2c14:	2b00      	cmp	r3, #0
    2c16:	d005      	beq.n	2c24 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2c18:	016b      	lsls	r3, r5, #5
    2c1a:	4a72      	ldr	r2, [pc, #456]	; (2de4 <_usb_d_dev_out_next+0x21c>)
    2c1c:	4694      	mov	ip, r2
    2c1e:	4463      	add	r3, ip
    2c20:	2201      	movs	r2, #1
    2c22:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2c24:	7ce3      	ldrb	r3, [r4, #19]
    2c26:	069b      	lsls	r3, r3, #26
    2c28:	d50f      	bpl.n	2c4a <_usb_d_dev_out_next+0x82>
    2c2a:	6863      	ldr	r3, [r4, #4]
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d039      	beq.n	2ca4 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    2c30:	68a0      	ldr	r0, [r4, #8]
    2c32:	1a1b      	subs	r3, r3, r0
    2c34:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2c36:	6822      	ldr	r2, [r4, #0]
    2c38:	4694      	mov	ip, r2
    2c3a:	4460      	add	r0, ip
    2c3c:	68e1      	ldr	r1, [r4, #12]
    2c3e:	001a      	movs	r2, r3
    2c40:	42bb      	cmp	r3, r7
    2c42:	d900      	bls.n	2c46 <_usb_d_dev_out_next+0x7e>
    2c44:	003a      	movs	r2, r7
    2c46:	4b68      	ldr	r3, [pc, #416]	; (2de8 <_usb_d_dev_out_next+0x220>)
    2c48:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2c4a:	6863      	ldr	r3, [r4, #4]
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	d029      	beq.n	2ca4 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    2c50:	4642      	mov	r2, r8
    2c52:	2a00      	cmp	r2, #0
    2c54:	d042      	beq.n	2cdc <_usb_d_dev_out_next+0x114>
    2c56:	8a22      	ldrh	r2, [r4, #16]
    2c58:	42ba      	cmp	r2, r7
    2c5a:	d93f      	bls.n	2cdc <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    2c5c:	7ce3      	ldrb	r3, [r4, #19]
    2c5e:	2210      	movs	r2, #16
    2c60:	4393      	bics	r3, r2
    2c62:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2c64:	68a3      	ldr	r3, [r4, #8]
    2c66:	445b      	add	r3, fp
    2c68:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2c6a:	464b      	mov	r3, r9
    2c6c:	2b01      	cmp	r3, #1
    2c6e:	d100      	bne.n	2c72 <_usb_d_dev_out_next+0xaa>
    2c70:	e087      	b.n	2d82 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2c72:	016b      	lsls	r3, r5, #5
    2c74:	4a5d      	ldr	r2, [pc, #372]	; (2dec <_usb_d_dev_out_next+0x224>)
    2c76:	4694      	mov	ip, r2
    2c78:	4463      	add	r3, ip
    2c7a:	2225      	movs	r2, #37	; 0x25
    2c7c:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    2c7e:	2d00      	cmp	r5, #0
    2c80:	d102      	bne.n	2c88 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    2c82:	4b56      	ldr	r3, [pc, #344]	; (2ddc <_usb_d_dev_out_next+0x214>)
    2c84:	68e2      	ldr	r2, [r4, #12]
    2c86:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2c88:	2100      	movs	r1, #0
    2c8a:	0020      	movs	r0, r4
    2c8c:	4b58      	ldr	r3, [pc, #352]	; (2df0 <_usb_d_dev_out_next+0x228>)
    2c8e:	4798      	blx	r3
	return;
    2c90:	e059      	b.n	2d46 <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2c92:	8a06      	ldrh	r6, [r0, #16]
    2c94:	4b52      	ldr	r3, [pc, #328]	; (2de0 <_usb_d_dev_out_next+0x218>)
    2c96:	429e      	cmp	r6, r3
    2c98:	d100      	bne.n	2c9c <_usb_d_dev_out_next+0xd4>
    2c9a:	e08e      	b.n	2dba <_usb_d_dev_out_next+0x1f2>
    2c9c:	2300      	movs	r3, #0
    2c9e:	469b      	mov	fp, r3
    2ca0:	469a      	mov	sl, r3
    2ca2:	e7ae      	b.n	2c02 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2ca4:	7ce3      	ldrb	r3, [r4, #19]
    2ca6:	06db      	lsls	r3, r3, #27
    2ca8:	d400      	bmi.n	2cac <_usb_d_dev_out_next+0xe4>
    2caa:	e07f      	b.n	2dac <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    2cac:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2cae:	2210      	movs	r2, #16
    2cb0:	4393      	bics	r3, r2
    2cb2:	2220      	movs	r2, #32
    2cb4:	4313      	orrs	r3, r2
    2cb6:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    2cb8:	4a48      	ldr	r2, [pc, #288]	; (2ddc <_usb_d_dev_out_next+0x214>)
    2cba:	016b      	lsls	r3, r5, #5
    2cbc:	68e1      	ldr	r1, [r4, #12]
    2cbe:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2cc0:	8a21      	ldrh	r1, [r4, #16]
    2cc2:	18d3      	adds	r3, r2, r3
    2cc4:	685a      	ldr	r2, [r3, #4]
    2cc6:	0489      	lsls	r1, r1, #18
    2cc8:	0909      	lsrs	r1, r1, #4
    2cca:	484a      	ldr	r0, [pc, #296]	; (2df4 <_usb_d_dev_out_next+0x22c>)
    2ccc:	4002      	ands	r2, r0
    2cce:	430a      	orrs	r2, r1
    2cd0:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2cd2:	685a      	ldr	r2, [r3, #4]
    2cd4:	0b92      	lsrs	r2, r2, #14
    2cd6:	0392      	lsls	r2, r2, #14
    2cd8:	605a      	str	r2, [r3, #4]
    2cda:	e022      	b.n	2d22 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    2cdc:	68a2      	ldr	r2, [r4, #8]
    2cde:	4452      	add	r2, sl
    2ce0:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2ce2:	4293      	cmp	r3, r2
    2ce4:	d9c1      	bls.n	2c6a <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    2ce6:	1a9b      	subs	r3, r3, r2
    2ce8:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2cea:	7ce1      	ldrb	r1, [r4, #19]
    2cec:	0689      	lsls	r1, r1, #26
    2cee:	d530      	bpl.n	2d52 <_usb_d_dev_out_next+0x18a>
    2cf0:	8a22      	ldrh	r2, [r4, #16]
    2cf2:	1c11      	adds	r1, r2, #0
    2cf4:	b292      	uxth	r2, r2
    2cf6:	429a      	cmp	r2, r3
    2cf8:	d900      	bls.n	2cfc <_usb_d_dev_out_next+0x134>
    2cfa:	1c19      	adds	r1, r3, #0
    2cfc:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2cfe:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2d00:	016a      	lsls	r2, r5, #5
    2d02:	4936      	ldr	r1, [pc, #216]	; (2ddc <_usb_d_dev_out_next+0x214>)
    2d04:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2d06:	016a      	lsls	r2, r5, #5
    2d08:	4934      	ldr	r1, [pc, #208]	; (2ddc <_usb_d_dev_out_next+0x214>)
    2d0a:	1889      	adds	r1, r1, r2
    2d0c:	684a      	ldr	r2, [r1, #4]
    2d0e:	049b      	lsls	r3, r3, #18
    2d10:	091b      	lsrs	r3, r3, #4
    2d12:	4838      	ldr	r0, [pc, #224]	; (2df4 <_usb_d_dev_out_next+0x22c>)
    2d14:	4002      	ands	r2, r0
    2d16:	4313      	orrs	r3, r2
    2d18:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2d1a:	684b      	ldr	r3, [r1, #4]
    2d1c:	0b9b      	lsrs	r3, r3, #14
    2d1e:	039b      	lsls	r3, r3, #14
    2d20:	604b      	str	r3, [r1, #4]
	if (!isr) {
    2d22:	4643      	mov	r3, r8
    2d24:	2b00      	cmp	r3, #0
    2d26:	d108      	bne.n	2d3a <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    2d28:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    2d2a:	464b      	mov	r3, r9
    2d2c:	2b01      	cmp	r3, #1
    2d2e:	d02f      	beq.n	2d90 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2d30:	016b      	lsls	r3, r5, #5
    2d32:	4931      	ldr	r1, [pc, #196]	; (2df8 <_usb_d_dev_out_next+0x230>)
    2d34:	468c      	mov	ip, r1
    2d36:	4463      	add	r3, ip
    2d38:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2d3a:	016d      	lsls	r5, r5, #5
    2d3c:	4b29      	ldr	r3, [pc, #164]	; (2de4 <_usb_d_dev_out_next+0x21c>)
    2d3e:	469c      	mov	ip, r3
    2d40:	4465      	add	r5, ip
    2d42:	2340      	movs	r3, #64	; 0x40
    2d44:	712b      	strb	r3, [r5, #4]
}
    2d46:	bc3c      	pop	{r2, r3, r4, r5}
    2d48:	4690      	mov	r8, r2
    2d4a:	4699      	mov	r9, r3
    2d4c:	46a2      	mov	sl, r4
    2d4e:	46ab      	mov	fp, r5
    2d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    2d52:	8a21      	ldrh	r1, [r4, #16]
    2d54:	428b      	cmp	r3, r1
    2d56:	d90a      	bls.n	2d6e <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2d58:	2180      	movs	r1, #128	; 0x80
    2d5a:	0189      	lsls	r1, r1, #6
    2d5c:	428b      	cmp	r3, r1
    2d5e:	d80d      	bhi.n	2d7c <_usb_d_dev_out_next+0x1b4>
    2d60:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2d62:	6821      	ldr	r1, [r4, #0]
    2d64:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    2d66:	0169      	lsls	r1, r5, #5
    2d68:	481c      	ldr	r0, [pc, #112]	; (2ddc <_usb_d_dev_out_next+0x214>)
    2d6a:	500a      	str	r2, [r1, r0]
    2d6c:	e7cb      	b.n	2d06 <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    2d6e:	428b      	cmp	r3, r1
    2d70:	d2f7      	bcs.n	2d62 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    2d72:	7ce1      	ldrb	r1, [r4, #19]
    2d74:	2020      	movs	r0, #32
    2d76:	4301      	orrs	r1, r0
    2d78:	74e1      	strb	r1, [r4, #19]
    2d7a:	e7f2      	b.n	2d62 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    2d7c:	2380      	movs	r3, #128	; 0x80
    2d7e:	019b      	lsls	r3, r3, #6
    2d80:	e7ef      	b.n	2d62 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2d82:	016b      	lsls	r3, r5, #5
    2d84:	4a19      	ldr	r2, [pc, #100]	; (2dec <_usb_d_dev_out_next+0x224>)
    2d86:	4694      	mov	ip, r2
    2d88:	4463      	add	r3, ip
    2d8a:	222d      	movs	r2, #45	; 0x2d
    2d8c:	701a      	strb	r2, [r3, #0]
    2d8e:	e776      	b.n	2c7e <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    2d90:	016a      	lsls	r2, r5, #5
    2d92:	4b12      	ldr	r3, [pc, #72]	; (2ddc <_usb_d_dev_out_next+0x214>)
    2d94:	189b      	adds	r3, r3, r2
    2d96:	2200      	movs	r2, #0
    2d98:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2d9a:	322d      	adds	r2, #45	; 0x2d
    2d9c:	e7c8      	b.n	2d30 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    2d9e:	05bf      	lsls	r7, r7, #22
    2da0:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2da2:	7cc3      	ldrb	r3, [r0, #19]
    2da4:	2207      	movs	r2, #7
    2da6:	401a      	ands	r2, r3
    2da8:	4691      	mov	r9, r2
    2daa:	e735      	b.n	2c18 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    2dac:	4643      	mov	r3, r8
    2dae:	2b00      	cmp	r3, #0
    2db0:	d10c      	bne.n	2dcc <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    2db2:	68a3      	ldr	r3, [r4, #8]
    2db4:	4453      	add	r3, sl
    2db6:	60a3      	str	r3, [r4, #8]
    2db8:	e757      	b.n	2c6a <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2dba:	7cc3      	ldrb	r3, [r0, #19]
    2dbc:	2207      	movs	r2, #7
    2dbe:	401a      	ands	r2, r3
    2dc0:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    2dc2:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2dc4:	2300      	movs	r3, #0
    2dc6:	469b      	mov	fp, r3
    2dc8:	469a      	mov	sl, r3
    2dca:	e72b      	b.n	2c24 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    2dcc:	8a23      	ldrh	r3, [r4, #16]
    2dce:	42bb      	cmp	r3, r7
    2dd0:	d900      	bls.n	2dd4 <_usb_d_dev_out_next+0x20c>
    2dd2:	e743      	b.n	2c5c <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    2dd4:	68a3      	ldr	r3, [r4, #8]
    2dd6:	4453      	add	r3, sl
    2dd8:	60a3      	str	r3, [r4, #8]
    2dda:	e746      	b.n	2c6a <_usb_d_dev_out_next+0xa2>
    2ddc:	200005e4 	.word	0x200005e4
    2de0:	000003ff 	.word	0x000003ff
    2de4:	41005100 	.word	0x41005100
    2de8:	0000488d 	.word	0x0000488d
    2dec:	41005108 	.word	0x41005108
    2df0:	00002849 	.word	0x00002849
    2df4:	f0003fff 	.word	0xf0003fff
    2df8:	41005109 	.word	0x41005109

00002dfc <_usb_d_dev_init>:
{
    2dfc:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2dfe:	4b31      	ldr	r3, [pc, #196]	; (2ec4 <_usb_d_dev_init+0xc8>)
    2e00:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    2e02:	07db      	lsls	r3, r3, #31
    2e04:	d41f      	bmi.n	2e46 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2e06:	492f      	ldr	r1, [pc, #188]	; (2ec4 <_usb_d_dev_init+0xc8>)
    2e08:	2203      	movs	r2, #3
    2e0a:	788b      	ldrb	r3, [r1, #2]
    2e0c:	4213      	tst	r3, r2
    2e0e:	d1fc      	bne.n	2e0a <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2e10:	4b2c      	ldr	r3, [pc, #176]	; (2ec4 <_usb_d_dev_init+0xc8>)
    2e12:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2e14:	079b      	lsls	r3, r3, #30
    2e16:	d50e      	bpl.n	2e36 <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    2e18:	4a2a      	ldr	r2, [pc, #168]	; (2ec4 <_usb_d_dev_init+0xc8>)
    2e1a:	7813      	ldrb	r3, [r2, #0]
    2e1c:	2102      	movs	r1, #2
    2e1e:	438b      	bics	r3, r1
    2e20:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2e22:	0011      	movs	r1, r2
    2e24:	2203      	movs	r2, #3
    2e26:	788b      	ldrb	r3, [r1, #2]
    2e28:	4213      	tst	r3, r2
    2e2a:	d1fc      	bne.n	2e26 <_usb_d_dev_init+0x2a>
    2e2c:	4925      	ldr	r1, [pc, #148]	; (2ec4 <_usb_d_dev_init+0xc8>)
    2e2e:	2202      	movs	r2, #2
    2e30:	788b      	ldrb	r3, [r1, #2]
    2e32:	4213      	tst	r3, r2
    2e34:	d1fc      	bne.n	2e30 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2e36:	2201      	movs	r2, #1
    2e38:	4b22      	ldr	r3, [pc, #136]	; (2ec4 <_usb_d_dev_init+0xc8>)
    2e3a:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2e3c:	0019      	movs	r1, r3
    2e3e:	3202      	adds	r2, #2
    2e40:	788b      	ldrb	r3, [r1, #2]
    2e42:	4213      	tst	r3, r2
    2e44:	d1fc      	bne.n	2e40 <_usb_d_dev_init+0x44>
    2e46:	491f      	ldr	r1, [pc, #124]	; (2ec4 <_usb_d_dev_init+0xc8>)
    2e48:	2201      	movs	r2, #1
    2e4a:	788b      	ldrb	r3, [r1, #2]
    2e4c:	4213      	tst	r3, r2
    2e4e:	d1fc      	bne.n	2e4a <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2e50:	4b1d      	ldr	r3, [pc, #116]	; (2ec8 <_usb_d_dev_init+0xcc>)
    2e52:	4a1e      	ldr	r2, [pc, #120]	; (2ecc <_usb_d_dev_init+0xd0>)
    2e54:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2e56:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2e58:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2e5a:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2e5c:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2e5e:	4b1c      	ldr	r3, [pc, #112]	; (2ed0 <_usb_d_dev_init+0xd4>)
    2e60:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2e62:	4b1c      	ldr	r3, [pc, #112]	; (2ed4 <_usb_d_dev_init+0xd8>)
    2e64:	681b      	ldr	r3, [r3, #0]
    2e66:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    2e68:	211f      	movs	r1, #31
    2e6a:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    2e6c:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    2e6e:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    2e70:	019b      	lsls	r3, r3, #6
    2e72:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    2e74:	2a1f      	cmp	r2, #31
    2e76:	d01f      	beq.n	2eb8 <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    2e78:	291f      	cmp	r1, #31
    2e7a:	d01f      	beq.n	2ebc <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    2e7c:	2b07      	cmp	r3, #7
    2e7e:	d01f      	beq.n	2ec0 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2e80:	0192      	lsls	r2, r2, #6
    2e82:	430a      	orrs	r2, r1
    2e84:	031b      	lsls	r3, r3, #12
    2e86:	4313      	orrs	r3, r2
    2e88:	4a0e      	ldr	r2, [pc, #56]	; (2ec4 <_usb_d_dev_init+0xc8>)
    2e8a:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2e8c:	78d3      	ldrb	r3, [r2, #3]
    2e8e:	2103      	movs	r1, #3
    2e90:	430b      	orrs	r3, r1
    2e92:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    2e94:	78d3      	ldrb	r3, [r2, #3]
    2e96:	210c      	movs	r1, #12
    2e98:	430b      	orrs	r3, r1
    2e9a:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2e9c:	2304      	movs	r3, #4
    2e9e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2ea0:	0011      	movs	r1, r2
    2ea2:	2203      	movs	r2, #3
    2ea4:	788b      	ldrb	r3, [r1, #2]
    2ea6:	4213      	tst	r3, r2
    2ea8:	d1fc      	bne.n	2ea4 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    2eaa:	4b06      	ldr	r3, [pc, #24]	; (2ec4 <_usb_d_dev_init+0xc8>)
    2eac:	4a06      	ldr	r2, [pc, #24]	; (2ec8 <_usb_d_dev_init+0xcc>)
    2eae:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    2eb0:	2201      	movs	r2, #1
    2eb2:	811a      	strh	r2, [r3, #8]
}
    2eb4:	2000      	movs	r0, #0
    2eb6:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    2eb8:	3a1a      	subs	r2, #26
    2eba:	e7dd      	b.n	2e78 <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    2ebc:	3902      	subs	r1, #2
    2ebe:	e7dd      	b.n	2e7c <_usb_d_dev_init+0x80>
		pad_trim = 5;
    2ec0:	3b02      	subs	r3, #2
    2ec2:	e7dd      	b.n	2e80 <_usb_d_dev_init+0x84>
    2ec4:	41005000 	.word	0x41005000
    2ec8:	200005e4 	.word	0x200005e4
    2ecc:	00002789 	.word	0x00002789
    2ed0:	000029dd 	.word	0x000029dd
    2ed4:	00806024 	.word	0x00806024

00002ed8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    2ed8:	4b10      	ldr	r3, [pc, #64]	; (2f1c <_usb_d_dev_enable+0x44>)
    2eda:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2edc:	079b      	lsls	r3, r3, #30
    2ede:	d11a      	bne.n	2f16 <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2ee0:	490e      	ldr	r1, [pc, #56]	; (2f1c <_usb_d_dev_enable+0x44>)
    2ee2:	2203      	movs	r2, #3
    2ee4:	788b      	ldrb	r3, [r1, #2]
    2ee6:	4213      	tst	r3, r2
    2ee8:	d1fc      	bne.n	2ee4 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    2eea:	4b0c      	ldr	r3, [pc, #48]	; (2f1c <_usb_d_dev_enable+0x44>)
    2eec:	781b      	ldrb	r3, [r3, #0]
    2eee:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    2ef0:	079a      	lsls	r2, r3, #30
    2ef2:	d408      	bmi.n	2f06 <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    2ef4:	2202      	movs	r2, #2
    2ef6:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2ef8:	4a08      	ldr	r2, [pc, #32]	; (2f1c <_usb_d_dev_enable+0x44>)
    2efa:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2efc:	0011      	movs	r1, r2
    2efe:	2203      	movs	r2, #3
    2f00:	788b      	ldrb	r3, [r1, #2]
    2f02:	4213      	tst	r3, r2
    2f04:	d1fc      	bne.n	2f00 <_usb_d_dev_enable+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f06:	2280      	movs	r2, #128	; 0x80
    2f08:	4b05      	ldr	r3, [pc, #20]	; (2f20 <_usb_d_dev_enable+0x48>)
    2f0a:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2f0c:	4a05      	ldr	r2, [pc, #20]	; (2f24 <_usb_d_dev_enable+0x4c>)
    2f0e:	4b03      	ldr	r3, [pc, #12]	; (2f1c <_usb_d_dev_enable+0x44>)
    2f10:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    2f12:	2000      	movs	r0, #0
}
    2f14:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2f16:	2011      	movs	r0, #17
    2f18:	4240      	negs	r0, r0
    2f1a:	e7fb      	b.n	2f14 <_usb_d_dev_enable+0x3c>
    2f1c:	41005000 	.word	0x41005000
    2f20:	e000e100 	.word	0xe000e100
    2f24:	0000028d 	.word	0x0000028d

00002f28 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2f28:	4a02      	ldr	r2, [pc, #8]	; (2f34 <_usb_d_dev_attach+0xc>)
    2f2a:	8913      	ldrh	r3, [r2, #8]
    2f2c:	2101      	movs	r1, #1
    2f2e:	438b      	bics	r3, r1
    2f30:	8113      	strh	r3, [r2, #8]
}
    2f32:	4770      	bx	lr
    2f34:	41005000 	.word	0x41005000

00002f38 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    2f38:	2380      	movs	r3, #128	; 0x80
    2f3a:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    2f3c:	4b01      	ldr	r3, [pc, #4]	; (2f44 <_usb_d_dev_set_address+0xc>)
    2f3e:	7298      	strb	r0, [r3, #10]
}
    2f40:	4770      	bx	lr
    2f42:	46c0      	nop			; (mov r8, r8)
    2f44:	41005000 	.word	0x41005000

00002f48 <_usb_d_dev_ep_init>:
{
    2f48:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    2f4a:	240f      	movs	r4, #15
    2f4c:	4004      	ands	r4, r0
    2f4e:	b243      	sxtb	r3, r0
    2f50:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2f52:	2c00      	cmp	r4, #0
    2f54:	d054      	beq.n	3000 <_usb_d_dev_ep_init+0xb8>
    2f56:	0025      	movs	r5, r4
    2f58:	2b00      	cmp	r3, #0
    2f5a:	db07      	blt.n	2f6c <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2f5c:	2303      	movs	r3, #3
    2f5e:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2f60:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    2f62:	2c02      	cmp	r4, #2
    2f64:	d950      	bls.n	3008 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    2f66:	2012      	movs	r0, #18
    2f68:	4240      	negs	r0, r0
    2f6a:	e025      	b.n	2fb8 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2f6c:	1ca5      	adds	r5, r4, #2
    2f6e:	e7f5      	b.n	2f5c <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2f70:	4663      	mov	r3, ip
    2f72:	2b00      	cmp	r3, #0
    2f74:	db21      	blt.n	2fba <_usb_d_dev_ep_init+0x72>
    2f76:	007b      	lsls	r3, r7, #1
    2f78:	19db      	adds	r3, r3, r7
    2f7a:	009b      	lsls	r3, r3, #2
    2f7c:	4c3b      	ldr	r4, [pc, #236]	; (306c <_usb_d_dev_ep_init+0x124>)
    2f7e:	591b      	ldr	r3, [r3, r4]
    2f80:	2b00      	cmp	r3, #0
    2f82:	d166      	bne.n	3052 <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2f84:	007b      	lsls	r3, r7, #1
    2f86:	19df      	adds	r7, r3, r7
    2f88:	00bf      	lsls	r7, r7, #2
    2f8a:	4b38      	ldr	r3, [pc, #224]	; (306c <_usb_d_dev_ep_init+0x124>)
    2f8c:	58ff      	ldr	r7, [r7, r3]
    2f8e:	4b38      	ldr	r3, [pc, #224]	; (3070 <_usb_d_dev_ep_init+0x128>)
    2f90:	00ae      	lsls	r6, r5, #2
    2f92:	1974      	adds	r4, r6, r5
    2f94:	00a4      	lsls	r4, r4, #2
    2f96:	191c      	adds	r4, r3, r4
    2f98:	3480      	adds	r4, #128	; 0x80
    2f9a:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    2f9c:	3360      	adds	r3, #96	; 0x60
    2f9e:	1974      	adds	r4, r6, r5
    2fa0:	00a4      	lsls	r4, r4, #2
    2fa2:	191c      	adds	r4, r3, r4
    2fa4:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    2fa6:	3427      	adds	r4, #39	; 0x27
    2fa8:	3101      	adds	r1, #1
    2faa:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    2fac:	1975      	adds	r5, r6, r5
    2fae:	00ad      	lsls	r5, r5, #2
    2fb0:	195b      	adds	r3, r3, r5
    2fb2:	3326      	adds	r3, #38	; 0x26
    2fb4:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    2fb6:	2000      	movs	r0, #0
}
    2fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2fba:	007b      	lsls	r3, r7, #1
    2fbc:	19db      	adds	r3, r3, r7
    2fbe:	009b      	lsls	r3, r3, #2
    2fc0:	4c2a      	ldr	r4, [pc, #168]	; (306c <_usb_d_dev_ep_init+0x124>)
    2fc2:	18e3      	adds	r3, r4, r3
    2fc4:	685b      	ldr	r3, [r3, #4]
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d106      	bne.n	2fd8 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2fca:	007b      	lsls	r3, r7, #1
    2fcc:	19df      	adds	r7, r3, r7
    2fce:	00bf      	lsls	r7, r7, #2
    2fd0:	4b26      	ldr	r3, [pc, #152]	; (306c <_usb_d_dev_ep_init+0x124>)
    2fd2:	19df      	adds	r7, r3, r7
    2fd4:	687f      	ldr	r7, [r7, #4]
    2fd6:	e7da      	b.n	2f8e <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2fd8:	007b      	lsls	r3, r7, #1
    2fda:	19db      	adds	r3, r3, r7
    2fdc:	009b      	lsls	r3, r3, #2
    2fde:	4c23      	ldr	r4, [pc, #140]	; (306c <_usb_d_dev_ep_init+0x124>)
    2fe0:	18e3      	adds	r3, r4, r3
    2fe2:	895b      	ldrh	r3, [r3, #10]
    2fe4:	4293      	cmp	r3, r2
    2fe6:	daf0      	bge.n	2fca <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    2fe8:	2013      	movs	r0, #19
    2fea:	4240      	negs	r0, r0
    2fec:	e7e4      	b.n	2fb8 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    2fee:	2014      	movs	r0, #20
    2ff0:	4240      	negs	r0, r0
    2ff2:	e7e1      	b.n	2fb8 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    2ff4:	2014      	movs	r0, #20
    2ff6:	4240      	negs	r0, r0
    2ff8:	e7de      	b.n	2fb8 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    2ffa:	2013      	movs	r0, #19
    2ffc:	4240      	negs	r0, r0
    2ffe:	e7db      	b.n	2fb8 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3000:	2303      	movs	r3, #3
    3002:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    3004:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3006:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    3008:	00ab      	lsls	r3, r5, #2
    300a:	195b      	adds	r3, r3, r5
    300c:	009e      	lsls	r6, r3, #2
    300e:	4b18      	ldr	r3, [pc, #96]	; (3070 <_usb_d_dev_ep_init+0x128>)
    3010:	199b      	adds	r3, r3, r6
    3012:	3386      	adds	r3, #134	; 0x86
    3014:	781b      	ldrb	r3, [r3, #0]
    3016:	2bff      	cmp	r3, #255	; 0xff
    3018:	d1e9      	bne.n	2fee <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    301a:	2900      	cmp	r1, #0
    301c:	d1a8      	bne.n	2f70 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    301e:	2c00      	cmp	r4, #0
    3020:	d004      	beq.n	302c <_usb_d_dev_ep_init+0xe4>
    3022:	4663      	mov	r3, ip
    3024:	2b00      	cmp	r3, #0
    3026:	db01      	blt.n	302c <_usb_d_dev_ep_init+0xe4>
    3028:	3402      	adds	r4, #2
    302a:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    302c:	00a3      	lsls	r3, r4, #2
    302e:	191b      	adds	r3, r3, r4
    3030:	009b      	lsls	r3, r3, #2
    3032:	4c0f      	ldr	r4, [pc, #60]	; (3070 <_usb_d_dev_ep_init+0x128>)
    3034:	18e4      	adds	r4, r4, r3
    3036:	3486      	adds	r4, #134	; 0x86
    3038:	7823      	ldrb	r3, [r4, #0]
    303a:	2bff      	cmp	r3, #255	; 0xff
    303c:	d1da      	bne.n	2ff4 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    303e:	007b      	lsls	r3, r7, #1
    3040:	19db      	adds	r3, r3, r7
    3042:	009b      	lsls	r3, r3, #2
    3044:	4c09      	ldr	r4, [pc, #36]	; (306c <_usb_d_dev_ep_init+0x124>)
    3046:	591b      	ldr	r3, [r3, r4]
    3048:	2b00      	cmp	r3, #0
    304a:	d0d6      	beq.n	2ffa <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    304c:	4663      	mov	r3, ip
    304e:	2b00      	cmp	r3, #0
    3050:	dbb3      	blt.n	2fba <_usb_d_dev_ep_init+0x72>
    3052:	007b      	lsls	r3, r7, #1
    3054:	19db      	adds	r3, r3, r7
    3056:	009b      	lsls	r3, r3, #2
    3058:	4c04      	ldr	r4, [pc, #16]	; (306c <_usb_d_dev_ep_init+0x124>)
    305a:	18e3      	adds	r3, r4, r3
    305c:	891b      	ldrh	r3, [r3, #8]
    305e:	4293      	cmp	r3, r2
    3060:	db00      	blt.n	3064 <_usb_d_dev_ep_init+0x11c>
    3062:	e78f      	b.n	2f84 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    3064:	2013      	movs	r0, #19
    3066:	4240      	negs	r0, r0
    3068:	e7a6      	b.n	2fb8 <_usb_d_dev_ep_init+0x70>
    306a:	46c0      	nop			; (mov r8, r8)
    306c:	00004c18 	.word	0x00004c18
    3070:	200005e4 	.word	0x200005e4

00003074 <_usb_d_dev_ep_deinit>:
{
    3074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3076:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    3078:	240f      	movs	r4, #15
    307a:	4004      	ands	r4, r0
    307c:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    307e:	2c00      	cmp	r4, #0
    3080:	d010      	beq.n	30a4 <_usb_d_dev_ep_deinit+0x30>
    3082:	0020      	movs	r0, r4
    3084:	2f00      	cmp	r7, #0
    3086:	db02      	blt.n	308e <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3088:	2c02      	cmp	r4, #2
    308a:	d902      	bls.n	3092 <_usb_d_dev_ep_deinit+0x1e>
}
    308c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    308e:	1ca0      	adds	r0, r4, #2
    3090:	e7fa      	b.n	3088 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    3092:	0006      	movs	r6, r0
    3094:	3001      	adds	r0, #1
    3096:	0083      	lsls	r3, r0, #2
    3098:	1818      	adds	r0, r3, r0
    309a:	0080      	lsls	r0, r0, #2
    309c:	4b25      	ldr	r3, [pc, #148]	; (3134 <_usb_d_dev_ep_deinit+0xc0>)
    309e:	3360      	adds	r3, #96	; 0x60
    30a0:	1818      	adds	r0, r3, r0
    30a2:	e002      	b.n	30aa <_usb_d_dev_ep_deinit+0x36>
    30a4:	4823      	ldr	r0, [pc, #140]	; (3134 <_usb_d_dev_ep_deinit+0xc0>)
    30a6:	3074      	adds	r0, #116	; 0x74
    30a8:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    30aa:	00b3      	lsls	r3, r6, #2
    30ac:	199b      	adds	r3, r3, r6
    30ae:	009a      	lsls	r2, r3, #2
    30b0:	4b20      	ldr	r3, [pc, #128]	; (3134 <_usb_d_dev_ep_deinit+0xc0>)
    30b2:	189b      	adds	r3, r3, r2
    30b4:	3386      	adds	r3, #134	; 0x86
    30b6:	781b      	ldrb	r3, [r3, #0]
    30b8:	2bff      	cmp	r3, #255	; 0xff
    30ba:	d0e7      	beq.n	308c <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    30bc:	0ff9      	lsrs	r1, r7, #31
    30be:	2203      	movs	r2, #3
    30c0:	4b1d      	ldr	r3, [pc, #116]	; (3138 <_usb_d_dev_ep_deinit+0xc4>)
    30c2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    30c4:	00b3      	lsls	r3, r6, #2
    30c6:	199b      	adds	r3, r3, r6
    30c8:	009a      	lsls	r2, r3, #2
    30ca:	4b1a      	ldr	r3, [pc, #104]	; (3134 <_usb_d_dev_ep_deinit+0xc0>)
    30cc:	189b      	adds	r3, r3, r2
    30ce:	3380      	adds	r3, #128	; 0x80
    30d0:	79da      	ldrb	r2, [r3, #7]
    30d2:	2307      	movs	r3, #7
    30d4:	4013      	ands	r3, r2
    30d6:	2b01      	cmp	r3, #1
    30d8:	d01b      	beq.n	3112 <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    30da:	2f00      	cmp	r7, #0
    30dc:	db1f      	blt.n	311e <_usb_d_dev_ep_deinit+0xaa>
    30de:	016d      	lsls	r5, r5, #5
    30e0:	4b16      	ldr	r3, [pc, #88]	; (313c <_usb_d_dev_ep_deinit+0xc8>)
    30e2:	469c      	mov	ip, r3
    30e4:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    30e6:	2280      	movs	r2, #128	; 0x80
    30e8:	0052      	lsls	r2, r2, #1
    30ea:	5cab      	ldrb	r3, [r5, r2]
    30ec:	2107      	movs	r1, #7
    30ee:	438b      	bics	r3, r1
    30f0:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    30f2:	4b10      	ldr	r3, [pc, #64]	; (3134 <_usb_d_dev_ep_deinit+0xc0>)
    30f4:	3360      	adds	r3, #96	; 0x60
    30f6:	00b1      	lsls	r1, r6, #2
    30f8:	198a      	adds	r2, r1, r6
    30fa:	0092      	lsls	r2, r2, #2
    30fc:	189a      	adds	r2, r3, r2
    30fe:	3227      	adds	r2, #39	; 0x27
    3100:	2000      	movs	r0, #0
    3102:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    3104:	198e      	adds	r6, r1, r6
    3106:	00b6      	lsls	r6, r6, #2
    3108:	199b      	adds	r3, r3, r6
    310a:	3326      	adds	r3, #38	; 0x26
    310c:	22ff      	movs	r2, #255	; 0xff
    310e:	701a      	strb	r2, [r3, #0]
    3110:	e7bc      	b.n	308c <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    3112:	3508      	adds	r5, #8
    3114:	016d      	lsls	r5, r5, #5
    3116:	2200      	movs	r2, #0
    3118:	4b08      	ldr	r3, [pc, #32]	; (313c <_usb_d_dev_ep_deinit+0xc8>)
    311a:	54ea      	strb	r2, [r5, r3]
    311c:	e7e9      	b.n	30f2 <_usb_d_dev_ep_deinit+0x7e>
    311e:	0164      	lsls	r4, r4, #5
    3120:	4b06      	ldr	r3, [pc, #24]	; (313c <_usb_d_dev_ep_deinit+0xc8>)
    3122:	469c      	mov	ip, r3
    3124:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3126:	2280      	movs	r2, #128	; 0x80
    3128:	0052      	lsls	r2, r2, #1
    312a:	5ca3      	ldrb	r3, [r4, r2]
    312c:	2170      	movs	r1, #112	; 0x70
    312e:	438b      	bics	r3, r1
    3130:	54a3      	strb	r3, [r4, r2]
    3132:	e7de      	b.n	30f2 <_usb_d_dev_ep_deinit+0x7e>
    3134:	200005e4 	.word	0x200005e4
    3138:	00002871 	.word	0x00002871
    313c:	41005000 	.word	0x41005000

00003140 <_usb_d_dev_ep_enable>:
{
    3140:	b5f0      	push	{r4, r5, r6, r7, lr}
    3142:	46c6      	mov	lr, r8
    3144:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    3146:	220f      	movs	r2, #15
    3148:	4002      	ands	r2, r0
    314a:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    314c:	2a00      	cmp	r2, #0
    314e:	d100      	bne.n	3152 <_usb_d_dev_ep_enable+0x12>
    3150:	e092      	b.n	3278 <_usb_d_dev_ep_enable+0x138>
    3152:	0013      	movs	r3, r2
    3154:	2800      	cmp	r0, #0
    3156:	db0b      	blt.n	3170 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3158:	0011      	movs	r1, r2
    315a:	3208      	adds	r2, #8
    315c:	0152      	lsls	r2, r2, #5
    315e:	4caa      	ldr	r4, [pc, #680]	; (3408 <_usb_d_dev_ep_enable+0x2c8>)
    3160:	5d15      	ldrb	r5, [r2, r4]
    3162:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3164:	2902      	cmp	r1, #2
    3166:	d800      	bhi.n	316a <_usb_d_dev_ep_enable+0x2a>
    3168:	e08d      	b.n	3286 <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    316a:	2012      	movs	r0, #18
    316c:	4240      	negs	r0, r0
    316e:	e0e5      	b.n	333c <_usb_d_dev_ep_enable+0x1fc>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3170:	1c93      	adds	r3, r2, #2
    3172:	e7f1      	b.n	3158 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3174:	3276      	adds	r2, #118	; 0x76
    3176:	422a      	tst	r2, r5
    3178:	d175      	bne.n	3266 <_usb_d_dev_ep_enable+0x126>
    317a:	4aa3      	ldr	r2, [pc, #652]	; (3408 <_usb_d_dev_ep_enable+0x2c8>)
    317c:	4690      	mov	r8, r2
    317e:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3180:	2011      	movs	r0, #17
    3182:	2280      	movs	r2, #128	; 0x80
    3184:	0052      	lsls	r2, r2, #1
    3186:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3188:	009a      	lsls	r2, r3, #2
    318a:	18d2      	adds	r2, r2, r3
    318c:	0095      	lsls	r5, r2, #2
    318e:	4a9f      	ldr	r2, [pc, #636]	; (340c <_usb_d_dev_ep_enable+0x2cc>)
    3190:	3260      	adds	r2, #96	; 0x60
    3192:	1952      	adds	r2, r2, r5
    3194:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    3196:	0395      	lsls	r5, r2, #14
    3198:	489d      	ldr	r0, [pc, #628]	; (3410 <_usb_d_dev_ep_enable+0x2d0>)
    319a:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    319c:	2080      	movs	r0, #128	; 0x80
    319e:	0080      	lsls	r0, r0, #2
    31a0:	4282      	cmp	r2, r0
    31a2:	d900      	bls.n	31a6 <_usb_d_dev_ep_enable+0x66>
    31a4:	e0cd      	b.n	3342 <_usb_d_dev_ep_enable+0x202>
    31a6:	3801      	subs	r0, #1
    31a8:	38ff      	subs	r0, #255	; 0xff
    31aa:	4282      	cmp	r2, r0
    31ac:	d900      	bls.n	31b0 <_usb_d_dev_ep_enable+0x70>
    31ae:	e113      	b.n	33d8 <_usb_d_dev_ep_enable+0x298>
    31b0:	2a80      	cmp	r2, #128	; 0x80
    31b2:	d900      	bls.n	31b6 <_usb_d_dev_ep_enable+0x76>
    31b4:	e100      	b.n	33b8 <_usb_d_dev_ep_enable+0x278>
    31b6:	2a40      	cmp	r2, #64	; 0x40
    31b8:	d900      	bls.n	31bc <_usb_d_dev_ep_enable+0x7c>
    31ba:	e115      	b.n	33e8 <_usb_d_dev_ep_enable+0x2a8>
    31bc:	2a20      	cmp	r2, #32
    31be:	d900      	bls.n	31c2 <_usb_d_dev_ep_enable+0x82>
    31c0:	e102      	b.n	33c8 <_usb_d_dev_ep_enable+0x288>
    31c2:	2a10      	cmp	r2, #16
    31c4:	d900      	bls.n	31c8 <_usb_d_dev_ep_enable+0x88>
    31c6:	e117      	b.n	33f8 <_usb_d_dev_ep_enable+0x2b8>
    31c8:	38f8      	subs	r0, #248	; 0xf8
    31ca:	4290      	cmp	r0, r2
    31cc:	4180      	sbcs	r0, r0
    31ce:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    31d0:	0706      	lsls	r6, r0, #28
    31d2:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    31d4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    31d6:	0495      	lsls	r5, r2, #18
    31d8:	0cad      	lsrs	r5, r5, #18
    31da:	e0b9      	b.n	3350 <_usb_d_dev_ep_enable+0x210>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    31dc:	2270      	movs	r2, #112	; 0x70
    31de:	422a      	tst	r2, r5
    31e0:	d144      	bne.n	326c <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    31e2:	488a      	ldr	r0, [pc, #552]	; (340c <_usb_d_dev_ep_enable+0x2cc>)
    31e4:	009e      	lsls	r6, r3, #2
    31e6:	18f2      	adds	r2, r6, r3
    31e8:	0092      	lsls	r2, r2, #2
    31ea:	1882      	adds	r2, r0, r2
    31ec:	3280      	adds	r2, #128	; 0x80
    31ee:	79d2      	ldrb	r2, [r2, #7]
    31f0:	0752      	lsls	r2, r2, #29
    31f2:	0e52      	lsrs	r2, r2, #25
    31f4:	4315      	orrs	r5, r2
    31f6:	4a84      	ldr	r2, [pc, #528]	; (3408 <_usb_d_dev_ep_enable+0x2c8>)
    31f8:	4694      	mov	ip, r2
    31fa:	4464      	add	r4, ip
    31fc:	2280      	movs	r2, #128	; 0x80
    31fe:	0052      	lsls	r2, r2, #1
    3200:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3202:	3060      	adds	r0, #96	; 0x60
    3204:	18f6      	adds	r6, r6, r3
    3206:	00b6      	lsls	r6, r6, #2
    3208:	1980      	adds	r0, r0, r6
    320a:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    320c:	0485      	lsls	r5, r0, #18
    320e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3210:	3201      	adds	r2, #1
    3212:	32ff      	adds	r2, #255	; 0xff
    3214:	2307      	movs	r3, #7
    3216:	4290      	cmp	r0, r2
    3218:	d814      	bhi.n	3244 <_usb_d_dev_ep_enable+0x104>
    321a:	3a01      	subs	r2, #1
    321c:	3aff      	subs	r2, #255	; 0xff
    321e:	3b01      	subs	r3, #1
    3220:	4290      	cmp	r0, r2
    3222:	d80f      	bhi.n	3244 <_usb_d_dev_ep_enable+0x104>
    3224:	3b01      	subs	r3, #1
    3226:	2880      	cmp	r0, #128	; 0x80
    3228:	d80c      	bhi.n	3244 <_usb_d_dev_ep_enable+0x104>
    322a:	3b01      	subs	r3, #1
    322c:	2840      	cmp	r0, #64	; 0x40
    322e:	d809      	bhi.n	3244 <_usb_d_dev_ep_enable+0x104>
    3230:	3b01      	subs	r3, #1
    3232:	2820      	cmp	r0, #32
    3234:	d806      	bhi.n	3244 <_usb_d_dev_ep_enable+0x104>
    3236:	3b01      	subs	r3, #1
    3238:	2810      	cmp	r0, #16
    323a:	d803      	bhi.n	3244 <_usb_d_dev_ep_enable+0x104>
    323c:	3af8      	subs	r2, #248	; 0xf8
    323e:	4282      	cmp	r2, r0
    3240:	4192      	sbcs	r2, r2
    3242:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3244:	071b      	lsls	r3, r3, #28
    3246:	432b      	orrs	r3, r5
    3248:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    324a:	2280      	movs	r2, #128	; 0x80
    324c:	2382      	movs	r3, #130	; 0x82
    324e:	005b      	lsls	r3, r3, #1
    3250:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    3252:	0149      	lsls	r1, r1, #5
    3254:	4b6d      	ldr	r3, [pc, #436]	; (340c <_usb_d_dev_ep_enable+0x2cc>)
    3256:	1859      	adds	r1, r3, r1
    3258:	2300      	movs	r3, #0
    325a:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    325c:	2000      	movs	r0, #0
    325e:	e06d      	b.n	333c <_usb_d_dev_ep_enable+0x1fc>
		return -USB_ERR_PARAM;
    3260:	2012      	movs	r0, #18
    3262:	4240      	negs	r0, r0
    3264:	e06a      	b.n	333c <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    3266:	2014      	movs	r0, #20
    3268:	4240      	negs	r0, r0
    326a:	e067      	b.n	333c <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    326c:	2014      	movs	r0, #20
    326e:	4240      	negs	r0, r0
    3270:	e064      	b.n	333c <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    3272:	2014      	movs	r0, #20
    3274:	4240      	negs	r0, r0
    3276:	e061      	b.n	333c <_usb_d_dev_ep_enable+0x1fc>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3278:	2380      	movs	r3, #128	; 0x80
    327a:	005b      	lsls	r3, r3, #1
    327c:	4a62      	ldr	r2, [pc, #392]	; (3408 <_usb_d_dev_ep_enable+0x2c8>)
    327e:	5cd5      	ldrb	r5, [r2, r3]
    3280:	b2ed      	uxtb	r5, r5
    3282:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    3284:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3286:	009a      	lsls	r2, r3, #2
    3288:	18d2      	adds	r2, r2, r3
    328a:	0094      	lsls	r4, r2, #2
    328c:	4a5f      	ldr	r2, [pc, #380]	; (340c <_usb_d_dev_ep_enable+0x2cc>)
    328e:	1912      	adds	r2, r2, r4
    3290:	3286      	adds	r2, #134	; 0x86
    3292:	7812      	ldrb	r2, [r2, #0]
    3294:	4694      	mov	ip, r2
    3296:	2aff      	cmp	r2, #255	; 0xff
    3298:	d0e2      	beq.n	3260 <_usb_d_dev_ep_enable+0x120>
    329a:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    329c:	4a5b      	ldr	r2, [pc, #364]	; (340c <_usb_d_dev_ep_enable+0x2cc>)
    329e:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    32a0:	009e      	lsls	r6, r3, #2
    32a2:	18f6      	adds	r6, r6, r3
    32a4:	00b6      	lsls	r6, r6, #2
    32a6:	1992      	adds	r2, r2, r6
    32a8:	3280      	adds	r2, #128	; 0x80
    32aa:	79d6      	ldrb	r6, [r2, #7]
    32ac:	2207      	movs	r2, #7
    32ae:	4032      	ands	r2, r6
    32b0:	2a01      	cmp	r2, #1
    32b2:	d100      	bne.n	32b6 <_usb_d_dev_ep_enable+0x176>
    32b4:	e75e      	b.n	3174 <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    32b6:	2800      	cmp	r0, #0
    32b8:	db90      	blt.n	31dc <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    32ba:	076a      	lsls	r2, r5, #29
    32bc:	d1d9      	bne.n	3272 <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    32be:	4853      	ldr	r0, [pc, #332]	; (340c <_usb_d_dev_ep_enable+0x2cc>)
    32c0:	009e      	lsls	r6, r3, #2
    32c2:	18f2      	adds	r2, r6, r3
    32c4:	0092      	lsls	r2, r2, #2
    32c6:	1882      	adds	r2, r0, r2
    32c8:	3280      	adds	r2, #128	; 0x80
    32ca:	79d2      	ldrb	r2, [r2, #7]
    32cc:	0752      	lsls	r2, r2, #29
    32ce:	0f52      	lsrs	r2, r2, #29
    32d0:	4315      	orrs	r5, r2
    32d2:	4a4d      	ldr	r2, [pc, #308]	; (3408 <_usb_d_dev_ep_enable+0x2c8>)
    32d4:	4694      	mov	ip, r2
    32d6:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    32d8:	2280      	movs	r2, #128	; 0x80
    32da:	0052      	lsls	r2, r2, #1
    32dc:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    32de:	3060      	adds	r0, #96	; 0x60
    32e0:	18f6      	adds	r6, r6, r3
    32e2:	00b6      	lsls	r6, r6, #2
    32e4:	1980      	adds	r0, r0, r6
    32e6:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    32e8:	03ab      	lsls	r3, r5, #14
    32ea:	4849      	ldr	r0, [pc, #292]	; (3410 <_usb_d_dev_ep_enable+0x2d0>)
    32ec:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    32ee:	3201      	adds	r2, #1
    32f0:	32ff      	adds	r2, #255	; 0xff
    32f2:	2307      	movs	r3, #7
    32f4:	4295      	cmp	r5, r2
    32f6:	d814      	bhi.n	3322 <_usb_d_dev_ep_enable+0x1e2>
    32f8:	3a01      	subs	r2, #1
    32fa:	3aff      	subs	r2, #255	; 0xff
    32fc:	3b01      	subs	r3, #1
    32fe:	4295      	cmp	r5, r2
    3300:	d80f      	bhi.n	3322 <_usb_d_dev_ep_enable+0x1e2>
    3302:	3b01      	subs	r3, #1
    3304:	2d80      	cmp	r5, #128	; 0x80
    3306:	d80c      	bhi.n	3322 <_usb_d_dev_ep_enable+0x1e2>
    3308:	3b01      	subs	r3, #1
    330a:	2d40      	cmp	r5, #64	; 0x40
    330c:	d809      	bhi.n	3322 <_usb_d_dev_ep_enable+0x1e2>
    330e:	3b01      	subs	r3, #1
    3310:	2d20      	cmp	r5, #32
    3312:	d806      	bhi.n	3322 <_usb_d_dev_ep_enable+0x1e2>
    3314:	3b01      	subs	r3, #1
    3316:	2d10      	cmp	r5, #16
    3318:	d803      	bhi.n	3322 <_usb_d_dev_ep_enable+0x1e2>
    331a:	3af8      	subs	r2, #248	; 0xf8
    331c:	42aa      	cmp	r2, r5
    331e:	4192      	sbcs	r2, r2
    3320:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3322:	071b      	lsls	r3, r3, #28
    3324:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3326:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3328:	2240      	movs	r2, #64	; 0x40
    332a:	2306      	movs	r3, #6
    332c:	33ff      	adds	r3, #255	; 0xff
    332e:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    3330:	0149      	lsls	r1, r1, #5
    3332:	4b36      	ldr	r3, [pc, #216]	; (340c <_usb_d_dev_ep_enable+0x2cc>)
    3334:	1859      	adds	r1, r3, r1
    3336:	2300      	movs	r3, #0
    3338:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    333a:	2000      	movs	r0, #0
}
    333c:	bc04      	pop	{r2}
    333e:	4690      	mov	r8, r2
    3340:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3342:	20e0      	movs	r0, #224	; 0xe0
    3344:	05c0      	lsls	r0, r0, #23
    3346:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3348:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    334a:	0495      	lsls	r5, r2, #18
    334c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    334e:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3350:	0700      	lsls	r0, r0, #28
    3352:	4328      	orrs	r0, r5
    3354:	6178      	str	r0, [r7, #20]
    3356:	2506      	movs	r5, #6
    3358:	35ff      	adds	r5, #255	; 0xff
    335a:	2640      	movs	r6, #64	; 0x40
    335c:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    335e:	2782      	movs	r7, #130	; 0x82
    3360:	007f      	lsls	r7, r7, #1
    3362:	2080      	movs	r0, #128	; 0x80
    3364:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    3366:	4829      	ldr	r0, [pc, #164]	; (340c <_usb_d_dev_ep_enable+0x2cc>)
    3368:	0149      	lsls	r1, r1, #5
    336a:	1841      	adds	r1, r0, r1
    336c:	2400      	movs	r4, #0
    336e:	728c      	strb	r4, [r1, #10]
    3370:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3372:	340f      	adds	r4, #15
    3374:	4661      	mov	r1, ip
    3376:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3378:	0099      	lsls	r1, r3, #2
    337a:	18c9      	adds	r1, r1, r3
    337c:	0089      	lsls	r1, r1, #2
    337e:	1841      	adds	r1, r0, r1
    3380:	3180      	adds	r1, #128	; 0x80
    3382:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    3384:	0163      	lsls	r3, r4, #5
    3386:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3388:	18c0      	adds	r0, r0, r3
    338a:	6841      	ldr	r1, [r0, #4]
    338c:	0492      	lsls	r2, r2, #18
    338e:	0914      	lsrs	r4, r2, #4
    3390:	4a20      	ldr	r2, [pc, #128]	; (3414 <_usb_d_dev_ep_enable+0x2d4>)
    3392:	400a      	ands	r2, r1
    3394:	4322      	orrs	r2, r4
    3396:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3398:	6842      	ldr	r2, [r0, #4]
    339a:	0b92      	lsrs	r2, r2, #14
    339c:	0392      	lsls	r2, r2, #14
    339e:	6042      	str	r2, [r0, #4]
    33a0:	4a19      	ldr	r2, [pc, #100]	; (3408 <_usb_d_dev_ep_enable+0x2c8>)
    33a2:	189a      	adds	r2, r3, r2
    33a4:	21b0      	movs	r1, #176	; 0xb0
    33a6:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    33a8:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    33aa:	4a1b      	ldr	r2, [pc, #108]	; (3418 <_usb_d_dev_ep_enable+0x2d8>)
    33ac:	4694      	mov	ip, r2
    33ae:	4463      	add	r3, ip
    33b0:	2210      	movs	r2, #16
    33b2:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    33b4:	2000      	movs	r0, #0
    33b6:	e7c1      	b.n	333c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33b8:	20a0      	movs	r0, #160	; 0xa0
    33ba:	05c0      	lsls	r0, r0, #23
    33bc:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    33be:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33c0:	0495      	lsls	r5, r2, #18
    33c2:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    33c4:	2005      	movs	r0, #5
    33c6:	e7c3      	b.n	3350 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33c8:	20c0      	movs	r0, #192	; 0xc0
    33ca:	0580      	lsls	r0, r0, #22
    33cc:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    33ce:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33d0:	0495      	lsls	r5, r2, #18
    33d2:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    33d4:	2003      	movs	r0, #3
    33d6:	e7bb      	b.n	3350 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33d8:	20c0      	movs	r0, #192	; 0xc0
    33da:	05c0      	lsls	r0, r0, #23
    33dc:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    33de:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33e0:	0495      	lsls	r5, r2, #18
    33e2:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    33e4:	2006      	movs	r0, #6
    33e6:	e7b3      	b.n	3350 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33e8:	2080      	movs	r0, #128	; 0x80
    33ea:	05c0      	lsls	r0, r0, #23
    33ec:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    33ee:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33f0:	0495      	lsls	r5, r2, #18
    33f2:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    33f4:	2004      	movs	r0, #4
    33f6:	e7ab      	b.n	3350 <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33f8:	2080      	movs	r0, #128	; 0x80
    33fa:	0580      	lsls	r0, r0, #22
    33fc:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    33fe:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3400:	0495      	lsls	r5, r2, #18
    3402:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3404:	2002      	movs	r0, #2
    3406:	e7a3      	b.n	3350 <_usb_d_dev_ep_enable+0x210>
    3408:	41005000 	.word	0x41005000
    340c:	200005e4 	.word	0x200005e4
    3410:	0fffc000 	.word	0x0fffc000
    3414:	f0003fff 	.word	0xf0003fff
    3418:	41005109 	.word	0x41005109

0000341c <_usb_d_dev_ep_stall>:
{
    341c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    341e:	230f      	movs	r3, #15
    3420:	4003      	ands	r3, r0
    3422:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3424:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3426:	2b00      	cmp	r3, #0
    3428:	d009      	beq.n	343e <_usb_d_dev_ep_stall+0x22>
    342a:	001a      	movs	r2, r3
    342c:	2800      	cmp	r0, #0
    342e:	db04      	blt.n	343a <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    3430:	2b02      	cmp	r3, #2
    3432:	d905      	bls.n	3440 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    3434:	2012      	movs	r0, #18
    3436:	4240      	negs	r0, r0
    3438:	e019      	b.n	346e <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    343a:	1c9a      	adds	r2, r3, #2
    343c:	e7f8      	b.n	3430 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    343e:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    3440:	2901      	cmp	r1, #1
    3442:	d015      	beq.n	3470 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3444:	2900      	cmp	r1, #0
    3446:	d036      	beq.n	34b6 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3448:	0093      	lsls	r3, r2, #2
    344a:	189b      	adds	r3, r3, r2
    344c:	009b      	lsls	r3, r3, #2
    344e:	4a47      	ldr	r2, [pc, #284]	; (356c <_usb_d_dev_ep_stall+0x150>)
    3450:	18d2      	adds	r2, r2, r3
    3452:	3286      	adds	r2, #134	; 0x86
    3454:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3456:	230f      	movs	r3, #15
    3458:	4013      	ands	r3, r2
    345a:	015b      	lsls	r3, r3, #5
    345c:	4a44      	ldr	r2, [pc, #272]	; (3570 <_usb_d_dev_ep_stall+0x154>)
    345e:	4694      	mov	ip, r2
    3460:	4463      	add	r3, ip
    3462:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3464:	2310      	movs	r3, #16
    3466:	40a3      	lsls	r3, r4
    3468:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    346a:	1e43      	subs	r3, r0, #1
    346c:	4198      	sbcs	r0, r3
}
    346e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3470:	2510      	movs	r5, #16
    3472:	40a5      	lsls	r5, r4
    3474:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3476:	493d      	ldr	r1, [pc, #244]	; (356c <_usb_d_dev_ep_stall+0x150>)
    3478:	0090      	lsls	r0, r2, #2
    347a:	1883      	adds	r3, r0, r2
    347c:	009b      	lsls	r3, r3, #2
    347e:	18cb      	adds	r3, r1, r3
    3480:	3386      	adds	r3, #134	; 0x86
    3482:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3484:	230f      	movs	r3, #15
    3486:	4033      	ands	r3, r6
    3488:	015e      	lsls	r6, r3, #5
    348a:	4f39      	ldr	r7, [pc, #228]	; (3570 <_usb_d_dev_ep_stall+0x154>)
    348c:	46bc      	mov	ip, r7
    348e:	4466      	add	r6, ip
    3490:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3492:	2520      	movs	r5, #32
    3494:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3496:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3498:	015b      	lsls	r3, r3, #5
    349a:	4d36      	ldr	r5, [pc, #216]	; (3574 <_usb_d_dev_ep_stall+0x158>)
    349c:	46ac      	mov	ip, r5
    349e:	4463      	add	r3, ip
    34a0:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    34a2:	1882      	adds	r2, r0, r2
    34a4:	0092      	lsls	r2, r2, #2
    34a6:	188a      	adds	r2, r1, r2
    34a8:	3280      	adds	r2, #128	; 0x80
    34aa:	79d3      	ldrb	r3, [r2, #7]
    34ac:	2108      	movs	r1, #8
    34ae:	430b      	orrs	r3, r1
    34b0:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    34b2:	2000      	movs	r0, #0
    34b4:	e7db      	b.n	346e <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    34b6:	0093      	lsls	r3, r2, #2
    34b8:	189b      	adds	r3, r3, r2
    34ba:	0099      	lsls	r1, r3, #2
    34bc:	4b2b      	ldr	r3, [pc, #172]	; (356c <_usb_d_dev_ep_stall+0x150>)
    34be:	185b      	adds	r3, r3, r1
    34c0:	3386      	adds	r3, #134	; 0x86
    34c2:	781b      	ldrb	r3, [r3, #0]
    34c4:	210f      	movs	r1, #15
    34c6:	400b      	ands	r3, r1
    34c8:	015d      	lsls	r5, r3, #5
    34ca:	492b      	ldr	r1, [pc, #172]	; (3578 <_usb_d_dev_ep_stall+0x15c>)
    34cc:	468c      	mov	ip, r1
    34ce:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    34d0:	2183      	movs	r1, #131	; 0x83
    34d2:	0049      	lsls	r1, r1, #1
    34d4:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    34d6:	39f6      	subs	r1, #246	; 0xf6
    34d8:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    34da:	2000      	movs	r0, #0
	if (!is_stalled) {
    34dc:	420e      	tst	r6, r1
    34de:	d0c6      	beq.n	346e <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    34e0:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    34e2:	3005      	adds	r0, #5
    34e4:	30ff      	adds	r0, #255	; 0xff
    34e6:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    34e8:	2120      	movs	r1, #32
    34ea:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    34ec:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    34ee:	015b      	lsls	r3, r3, #5
    34f0:	4e22      	ldr	r6, [pc, #136]	; (357c <_usb_d_dev_ep_stall+0x160>)
    34f2:	46b4      	mov	ip, r6
    34f4:	4463      	add	r3, ip
    34f6:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    34f8:	2308      	movs	r3, #8
    34fa:	33ff      	adds	r3, #255	; 0xff
    34fc:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    34fe:	420b      	tst	r3, r1
    3500:	d009      	beq.n	3516 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3502:	2308      	movs	r3, #8
    3504:	33ff      	adds	r3, #255	; 0xff
    3506:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    3508:	3b07      	subs	r3, #7
    350a:	3bff      	subs	r3, #255	; 0xff
    350c:	40a3      	lsls	r3, r4
    350e:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3510:	2182      	movs	r1, #130	; 0x82
    3512:	0049      	lsls	r1, r1, #1
    3514:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3516:	0093      	lsls	r3, r2, #2
    3518:	189b      	adds	r3, r3, r2
    351a:	0099      	lsls	r1, r3, #2
    351c:	4b13      	ldr	r3, [pc, #76]	; (356c <_usb_d_dev_ep_stall+0x150>)
    351e:	185b      	adds	r3, r3, r1
    3520:	3380      	adds	r3, #128	; 0x80
    3522:	79d9      	ldrb	r1, [r3, #7]
    3524:	2307      	movs	r3, #7
    3526:	400b      	ands	r3, r1
    3528:	2b01      	cmp	r3, #1
    352a:	d00b      	beq.n	3544 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    352c:	0093      	lsls	r3, r2, #2
    352e:	189a      	adds	r2, r3, r2
    3530:	0092      	lsls	r2, r2, #2
    3532:	4b0e      	ldr	r3, [pc, #56]	; (356c <_usb_d_dev_ep_stall+0x150>)
    3534:	189b      	adds	r3, r3, r2
    3536:	3380      	adds	r3, #128	; 0x80
    3538:	79da      	ldrb	r2, [r3, #7]
    353a:	2108      	movs	r1, #8
    353c:	438a      	bics	r2, r1
    353e:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3540:	2000      	movs	r0, #0
    3542:	e794      	b.n	346e <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3544:	3306      	adds	r3, #6
    3546:	33ff      	adds	r3, #255	; 0xff
    3548:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    354a:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    354c:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    354e:	4219      	tst	r1, r3
    3550:	d000      	beq.n	3554 <_usb_d_dev_ep_stall+0x138>
    3552:	e78c      	b.n	346e <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    3554:	0093      	lsls	r3, r2, #2
    3556:	189a      	adds	r2, r3, r2
    3558:	0092      	lsls	r2, r2, #2
    355a:	4b04      	ldr	r3, [pc, #16]	; (356c <_usb_d_dev_ep_stall+0x150>)
    355c:	189b      	adds	r3, r3, r2
    355e:	3380      	adds	r3, #128	; 0x80
    3560:	79da      	ldrb	r2, [r3, #7]
    3562:	2108      	movs	r1, #8
    3564:	438a      	bics	r2, r1
    3566:	71da      	strb	r2, [r3, #7]
    3568:	e781      	b.n	346e <_usb_d_dev_ep_stall+0x52>
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	200005e4 	.word	0x200005e4
    3570:	41005100 	.word	0x41005100
    3574:	41005109 	.word	0x41005109
    3578:	41005000 	.word	0x41005000
    357c:	41005108 	.word	0x41005108

00003580 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3580:	b570      	push	{r4, r5, r6, lr}
    3582:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    3584:	230f      	movs	r3, #15
    3586:	4018      	ands	r0, r3
    3588:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    358a:	4b16      	ldr	r3, [pc, #88]	; (35e4 <_usb_d_dev_ep_read_req+0x64>)
    358c:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    358e:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    3590:	685b      	ldr	r3, [r3, #4]
    3592:	049b      	lsls	r3, r3, #18
    3594:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3596:	2802      	cmp	r0, #2
    3598:	d81a      	bhi.n	35d0 <_usb_d_dev_ep_read_req+0x50>
    359a:	2d00      	cmp	r5, #0
    359c:	d01b      	beq.n	35d6 <_usb_d_dev_ep_read_req+0x56>
    359e:	4b12      	ldr	r3, [pc, #72]	; (35e8 <_usb_d_dev_ep_read_req+0x68>)
    35a0:	469c      	mov	ip, r3
    35a2:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    35a4:	2380      	movs	r3, #128	; 0x80
    35a6:	005b      	lsls	r3, r3, #1
    35a8:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    35aa:	2b11      	cmp	r3, #17
    35ac:	d116      	bne.n	35dc <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    35ae:	2308      	movs	r3, #8
    35b0:	33ff      	adds	r3, #255	; 0xff
    35b2:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    35b4:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    35b6:	06db      	lsls	r3, r3, #27
    35b8:	d400      	bmi.n	35bc <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    35ba:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    35bc:	2208      	movs	r2, #8
    35be:	0028      	movs	r0, r5
    35c0:	4b0a      	ldr	r3, [pc, #40]	; (35ec <_usb_d_dev_ep_read_req+0x6c>)
    35c2:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    35c4:	2210      	movs	r2, #16
    35c6:	2308      	movs	r3, #8
    35c8:	33ff      	adds	r3, #255	; 0xff
    35ca:	54e2      	strb	r2, [r4, r3]
	return bytes;
    35cc:	0030      	movs	r0, r6
    35ce:	e7f4      	b.n	35ba <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    35d0:	2012      	movs	r0, #18
    35d2:	4240      	negs	r0, r0
    35d4:	e7f1      	b.n	35ba <_usb_d_dev_ep_read_req+0x3a>
    35d6:	2012      	movs	r0, #18
    35d8:	4240      	negs	r0, r0
    35da:	e7ee      	b.n	35ba <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    35dc:	2013      	movs	r0, #19
    35de:	4240      	negs	r0, r0
    35e0:	e7eb      	b.n	35ba <_usb_d_dev_ep_read_req+0x3a>
    35e2:	46c0      	nop			; (mov r8, r8)
    35e4:	200005e4 	.word	0x200005e4
    35e8:	41005000 	.word	0x41005000
    35ec:	0000488d 	.word	0x0000488d

000035f0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    35f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    35f2:	46de      	mov	lr, fp
    35f4:	4657      	mov	r7, sl
    35f6:	464e      	mov	r6, r9
    35f8:	4645      	mov	r5, r8
    35fa:	b5e0      	push	{r5, r6, r7, lr}
    35fc:	b085      	sub	sp, #20
    35fe:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    3600:	7a06      	ldrb	r6, [r0, #8]
    3602:	230f      	movs	r3, #15
    3604:	4033      	ands	r3, r6
    3606:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3608:	2b00      	cmp	r3, #0
    360a:	d100      	bne.n	360e <_usb_d_dev_ep_trans+0x1e>
    360c:	e0d3      	b.n	37b6 <_usb_d_dev_ep_trans+0x1c6>
    360e:	0018      	movs	r0, r3
    3610:	2e00      	cmp	r6, #0
    3612:	db39      	blt.n	3688 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    3614:	0004      	movs	r4, r0
    3616:	4a73      	ldr	r2, [pc, #460]	; (37e4 <_usb_d_dev_ep_trans+0x1f4>)
    3618:	3260      	adds	r2, #96	; 0x60
    361a:	1c41      	adds	r1, r0, #1
    361c:	008d      	lsls	r5, r1, #2
    361e:	186d      	adds	r5, r5, r1
    3620:	00ad      	lsls	r5, r5, #2
    3622:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3624:	0081      	lsls	r1, r0, #2
    3626:	1809      	adds	r1, r1, r0
    3628:	0089      	lsls	r1, r1, #2
    362a:	1852      	adds	r2, r2, r1
    362c:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    362e:	4a6e      	ldr	r2, [pc, #440]	; (37e8 <_usb_d_dev_ep_trans+0x1f8>)
    3630:	4291      	cmp	r1, r2
    3632:	d02b      	beq.n	368c <_usb_d_dev_ep_trans+0x9c>
    3634:	1e4f      	subs	r7, r1, #1
    3636:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    3638:	4642      	mov	r2, r8
    363a:	6852      	ldr	r2, [r2, #4]
    363c:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    363e:	2b02      	cmp	r3, #2
    3640:	d900      	bls.n	3644 <_usb_d_dev_ep_trans+0x54>
    3642:	e0a4      	b.n	378e <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    3644:	4643      	mov	r3, r8
    3646:	681b      	ldr	r3, [r3, #0]
    3648:	4868      	ldr	r0, [pc, #416]	; (37ec <_usb_d_dev_ep_trans+0x1fc>)
    364a:	4283      	cmp	r3, r0
    364c:	d920      	bls.n	3690 <_usb_d_dev_ep_trans+0xa0>
    364e:	1898      	adds	r0, r3, r2
    3650:	9001      	str	r0, [sp, #4]
    3652:	4867      	ldr	r0, [pc, #412]	; (37f0 <_usb_d_dev_ep_trans+0x200>)
    3654:	4684      	mov	ip, r0
    3656:	9801      	ldr	r0, [sp, #4]
    3658:	4560      	cmp	r0, ip
    365a:	d819      	bhi.n	3690 <_usb_d_dev_ep_trans+0xa0>
    365c:	079b      	lsls	r3, r3, #30
    365e:	d117      	bne.n	3690 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    3660:	2e00      	cmp	r6, #0
    3662:	db32      	blt.n	36ca <_usb_d_dev_ep_trans+0xda>
    3664:	4291      	cmp	r1, r2
    3666:	d900      	bls.n	366a <_usb_d_dev_ep_trans+0x7a>
    3668:	e0af      	b.n	37ca <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    366a:	2f00      	cmp	r7, #0
    366c:	d030      	beq.n	36d0 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    366e:	00a3      	lsls	r3, r4, #2
    3670:	191b      	adds	r3, r3, r4
    3672:	009a      	lsls	r2, r3, #2
    3674:	4b5b      	ldr	r3, [pc, #364]	; (37e4 <_usb_d_dev_ep_trans+0x1f4>)
    3676:	189b      	adds	r3, r3, r2
    3678:	3380      	adds	r3, #128	; 0x80
    367a:	681b      	ldr	r3, [r3, #0]
    367c:	2b00      	cmp	r3, #0
    367e:	d100      	bne.n	3682 <_usb_d_dev_ep_trans+0x92>
    3680:	e08b      	b.n	379a <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    3682:	2300      	movs	r3, #0
    3684:	4699      	mov	r9, r3
    3686:	e00f      	b.n	36a8 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3688:	1c98      	adds	r0, r3, #2
    368a:	e7c3      	b.n	3614 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    368c:	000f      	movs	r7, r1
    368e:	e7d3      	b.n	3638 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    3690:	00a3      	lsls	r3, r4, #2
    3692:	191b      	adds	r3, r3, r4
    3694:	009a      	lsls	r2, r3, #2
    3696:	4b53      	ldr	r3, [pc, #332]	; (37e4 <_usb_d_dev_ep_trans+0x1f4>)
    3698:	189b      	adds	r3, r3, r2
    369a:	3380      	adds	r3, #128	; 0x80
    369c:	681b      	ldr	r3, [r3, #0]
    369e:	2b00      	cmp	r3, #0
    36a0:	d100      	bne.n	36a4 <_usb_d_dev_ep_trans+0xb4>
    36a2:	e077      	b.n	3794 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    36a4:	2301      	movs	r3, #1
    36a6:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    36a8:	00a3      	lsls	r3, r4, #2
    36aa:	191b      	adds	r3, r3, r4
    36ac:	009a      	lsls	r2, r3, #2
    36ae:	4b4d      	ldr	r3, [pc, #308]	; (37e4 <_usb_d_dev_ep_trans+0x1f4>)
    36b0:	189b      	adds	r3, r3, r2
    36b2:	3380      	adds	r3, #128	; 0x80
    36b4:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    36b6:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    36b8:	071b      	lsls	r3, r3, #28
    36ba:	d50c      	bpl.n	36d6 <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    36bc:	b005      	add	sp, #20
    36be:	bc3c      	pop	{r2, r3, r4, r5}
    36c0:	4690      	mov	r8, r2
    36c2:	4699      	mov	r9, r3
    36c4:	46a2      	mov	sl, r4
    36c6:	46ab      	mov	fp, r5
    36c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    36ca:	2300      	movs	r3, #0
    36cc:	4699      	mov	r9, r3
    36ce:	e7eb      	b.n	36a8 <_usb_d_dev_ep_trans+0xb8>
    36d0:	2300      	movs	r3, #0
    36d2:	4699      	mov	r9, r3
    36d4:	e7e8      	b.n	36a8 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    36d6:	a803      	add	r0, sp, #12
    36d8:	4b46      	ldr	r3, [pc, #280]	; (37f4 <_usb_d_dev_ep_trans+0x204>)
    36da:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    36dc:	00a3      	lsls	r3, r4, #2
    36de:	191b      	adds	r3, r3, r4
    36e0:	009a      	lsls	r2, r3, #2
    36e2:	4b40      	ldr	r3, [pc, #256]	; (37e4 <_usb_d_dev_ep_trans+0x1f4>)
    36e4:	189b      	adds	r3, r3, r2
    36e6:	3380      	adds	r3, #128	; 0x80
    36e8:	79db      	ldrb	r3, [r3, #7]
    36ea:	065b      	lsls	r3, r3, #25
    36ec:	d444      	bmi.n	3778 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    36ee:	00a3      	lsls	r3, r4, #2
    36f0:	191b      	adds	r3, r3, r4
    36f2:	009b      	lsls	r3, r3, #2
    36f4:	4a3b      	ldr	r2, [pc, #236]	; (37e4 <_usb_d_dev_ep_trans+0x1f4>)
    36f6:	4693      	mov	fp, r2
    36f8:	449b      	add	fp, r3
    36fa:	2380      	movs	r3, #128	; 0x80
    36fc:	445b      	add	r3, fp
    36fe:	469a      	mov	sl, r3
    3700:	79db      	ldrb	r3, [r3, #7]
    3702:	2240      	movs	r2, #64	; 0x40
    3704:	4313      	orrs	r3, r2
    3706:	4652      	mov	r2, sl
    3708:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    370a:	a803      	add	r0, sp, #12
    370c:	4b3a      	ldr	r3, [pc, #232]	; (37f8 <_usb_d_dev_ep_trans+0x208>)
    370e:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    3710:	465b      	mov	r3, fp
    3712:	4642      	mov	r2, r8
    3714:	6812      	ldr	r2, [r2, #0]
    3716:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    3718:	4642      	mov	r2, r8
    371a:	6852      	ldr	r2, [r2, #4]
    371c:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    371e:	2300      	movs	r3, #0
    3720:	465a      	mov	r2, fp
    3722:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    3724:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    3726:	01d2      	lsls	r2, r2, #7
    3728:	4653      	mov	r3, sl
    372a:	79d9      	ldrb	r1, [r3, #7]
    372c:	237f      	movs	r3, #127	; 0x7f
    372e:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    3730:	4649      	mov	r1, r9
    3732:	0149      	lsls	r1, r1, #5
    3734:	4313      	orrs	r3, r2
    3736:	2220      	movs	r2, #32
    3738:	4393      	bics	r3, r2
    373a:	430b      	orrs	r3, r1
    373c:	4652      	mov	r2, sl
    373e:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3740:	4643      	mov	r3, r8
    3742:	7a5b      	ldrb	r3, [r3, #9]
    3744:	2200      	movs	r2, #0
    3746:	2b00      	cmp	r3, #0
    3748:	d002      	beq.n	3750 <_usb_d_dev_ep_trans+0x160>
    374a:	427a      	negs	r2, r7
    374c:	417a      	adcs	r2, r7
    374e:	b2d2      	uxtb	r2, r2
    3750:	00a3      	lsls	r3, r4, #2
    3752:	191c      	adds	r4, r3, r4
    3754:	00a4      	lsls	r4, r4, #2
    3756:	4b23      	ldr	r3, [pc, #140]	; (37e4 <_usb_d_dev_ep_trans+0x1f4>)
    3758:	191b      	adds	r3, r3, r4
    375a:	3380      	adds	r3, #128	; 0x80
    375c:	0112      	lsls	r2, r2, #4
    375e:	79df      	ldrb	r7, [r3, #7]
    3760:	2110      	movs	r1, #16
    3762:	438f      	bics	r7, r1
    3764:	4317      	orrs	r7, r2
    3766:	71df      	strb	r7, [r3, #7]
	if (dir) {
    3768:	2e00      	cmp	r6, #0
    376a:	db0a      	blt.n	3782 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    376c:	2100      	movs	r1, #0
    376e:	0028      	movs	r0, r5
    3770:	4b22      	ldr	r3, [pc, #136]	; (37fc <_usb_d_dev_ep_trans+0x20c>)
    3772:	4798      	blx	r3
	return ERR_NONE;
    3774:	2000      	movs	r0, #0
    3776:	e7a1      	b.n	36bc <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    3778:	a803      	add	r0, sp, #12
    377a:	4b1f      	ldr	r3, [pc, #124]	; (37f8 <_usb_d_dev_ep_trans+0x208>)
    377c:	4798      	blx	r3
		return USB_BUSY;
    377e:	2001      	movs	r0, #1
    3780:	e79c      	b.n	36bc <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    3782:	2100      	movs	r1, #0
    3784:	0028      	movs	r0, r5
    3786:	4b1e      	ldr	r3, [pc, #120]	; (3800 <_usb_d_dev_ep_trans+0x210>)
    3788:	4798      	blx	r3
	return ERR_NONE;
    378a:	2000      	movs	r0, #0
    378c:	e796      	b.n	36bc <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    378e:	2012      	movs	r0, #18
    3790:	4240      	negs	r0, r0
    3792:	e793      	b.n	36bc <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    3794:	2013      	movs	r0, #19
    3796:	4240      	negs	r0, r0
    3798:	e790      	b.n	36bc <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    379a:	2012      	movs	r0, #18
    379c:	4240      	negs	r0, r0
    379e:	e78d      	b.n	36bc <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    37a0:	2013      	movs	r0, #19
    37a2:	4240      	negs	r0, r0
    37a4:	e78a      	b.n	36bc <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    37a6:	4643      	mov	r3, r8
    37a8:	685a      	ldr	r2, [r3, #4]
    37aa:	0597      	lsls	r7, r2, #22
    37ac:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    37ae:	4d0d      	ldr	r5, [pc, #52]	; (37e4 <_usb_d_dev_ep_trans+0x1f4>)
    37b0:	3574      	adds	r5, #116	; 0x74
    37b2:	2400      	movs	r4, #0
    37b4:	e746      	b.n	3644 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    37b6:	4a0b      	ldr	r2, [pc, #44]	; (37e4 <_usb_d_dev_ep_trans+0x1f4>)
    37b8:	3260      	adds	r2, #96	; 0x60
    37ba:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    37bc:	4a0a      	ldr	r2, [pc, #40]	; (37e8 <_usb_d_dev_ep_trans+0x1f8>)
    37be:	4291      	cmp	r1, r2
    37c0:	d0f1      	beq.n	37a6 <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    37c2:	4d08      	ldr	r5, [pc, #32]	; (37e4 <_usb_d_dev_ep_trans+0x1f4>)
    37c4:	3574      	adds	r5, #116	; 0x74
    37c6:	2400      	movs	r4, #0
    37c8:	e734      	b.n	3634 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    37ca:	00a3      	lsls	r3, r4, #2
    37cc:	191b      	adds	r3, r3, r4
    37ce:	009a      	lsls	r2, r3, #2
    37d0:	4b04      	ldr	r3, [pc, #16]	; (37e4 <_usb_d_dev_ep_trans+0x1f4>)
    37d2:	189b      	adds	r3, r3, r2
    37d4:	3380      	adds	r3, #128	; 0x80
    37d6:	681b      	ldr	r3, [r3, #0]
    37d8:	2b00      	cmp	r3, #0
    37da:	d0e1      	beq.n	37a0 <_usb_d_dev_ep_trans+0x1b0>
    37dc:	2301      	movs	r3, #1
    37de:	4699      	mov	r9, r3
    37e0:	e762      	b.n	36a8 <_usb_d_dev_ep_trans+0xb8>
    37e2:	46c0      	nop			; (mov r8, r8)
    37e4:	200005e4 	.word	0x200005e4
    37e8:	000003ff 	.word	0x000003ff
    37ec:	1fffffff 	.word	0x1fffffff
    37f0:	20007fff 	.word	0x20007fff
    37f4:	00003ad5 	.word	0x00003ad5
    37f8:	00003ae3 	.word	0x00003ae3
    37fc:	00002bc9 	.word	0x00002bc9
    3800:	00002a21 	.word	0x00002a21

00003804 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3804:	1e0b      	subs	r3, r1, #0
    3806:	d006      	beq.n	3816 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    3808:	2801      	cmp	r0, #1
    380a:	d006      	beq.n	381a <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    380c:	2800      	cmp	r0, #0
    380e:	d101      	bne.n	3814 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    3810:	4a03      	ldr	r2, [pc, #12]	; (3820 <_usb_d_dev_register_callback+0x1c>)
    3812:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    3814:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3816:	4b03      	ldr	r3, [pc, #12]	; (3824 <_usb_d_dev_register_callback+0x20>)
    3818:	e7f6      	b.n	3808 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    381a:	4a01      	ldr	r2, [pc, #4]	; (3820 <_usb_d_dev_register_callback+0x1c>)
    381c:	6653      	str	r3, [r2, #100]	; 0x64
    381e:	e7f9      	b.n	3814 <_usb_d_dev_register_callback+0x10>
    3820:	200005e4 	.word	0x200005e4
    3824:	00002789 	.word	0x00002789

00003828 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3828:	1e0b      	subs	r3, r1, #0
    382a:	d008      	beq.n	383e <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    382c:	2800      	cmp	r0, #0
    382e:	d008      	beq.n	3842 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    3830:	2801      	cmp	r0, #1
    3832:	d009      	beq.n	3848 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    3834:	2802      	cmp	r0, #2
    3836:	d106      	bne.n	3846 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    3838:	4a05      	ldr	r2, [pc, #20]	; (3850 <_usb_d_dev_register_ep_callback+0x28>)
    383a:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    383c:	e003      	b.n	3846 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    383e:	4b05      	ldr	r3, [pc, #20]	; (3854 <_usb_d_dev_register_ep_callback+0x2c>)
    3840:	e7f4      	b.n	382c <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    3842:	4a03      	ldr	r2, [pc, #12]	; (3850 <_usb_d_dev_register_ep_callback+0x28>)
    3844:	6693      	str	r3, [r2, #104]	; 0x68
}
    3846:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    3848:	4a01      	ldr	r2, [pc, #4]	; (3850 <_usb_d_dev_register_ep_callback+0x28>)
    384a:	66d3      	str	r3, [r2, #108]	; 0x6c
    384c:	e7fb      	b.n	3846 <_usb_d_dev_register_ep_callback+0x1e>
    384e:	46c0      	nop			; (mov r8, r8)
    3850:	200005e4 	.word	0x200005e4
    3854:	00002789 	.word	0x00002789

00003858 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    3858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    385a:	4b82      	ldr	r3, [pc, #520]	; (3a64 <USB_Handler+0x20c>)
    385c:	8c1e      	ldrh	r6, [r3, #32]
    385e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    3860:	2e00      	cmp	r6, #0
    3862:	d003      	beq.n	386c <USB_Handler+0x14>
    3864:	4c80      	ldr	r4, [pc, #512]	; (3a68 <USB_Handler+0x210>)
    3866:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    3868:	2500      	movs	r5, #0
    386a:	e0b9      	b.n	39e0 <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    386c:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    386e:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    3870:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3872:	075a      	lsls	r2, r3, #29
    3874:	d417      	bmi.n	38a6 <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    3876:	059a      	lsls	r2, r3, #22
    3878:	d41c      	bmi.n	38b4 <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    387a:	061a      	lsls	r2, r3, #24
    387c:	d43e      	bmi.n	38fc <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    387e:	2270      	movs	r2, #112	; 0x70
    3880:	421a      	tst	r2, r3
    3882:	d144      	bne.n	390e <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    3884:	071a      	lsls	r2, r3, #28
    3886:	d45e      	bmi.n	3946 <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    3888:	07db      	lsls	r3, r3, #31
    388a:	d5eb      	bpl.n	3864 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    388c:	4b75      	ldr	r3, [pc, #468]	; (3a64 <USB_Handler+0x20c>)
    388e:	4a77      	ldr	r2, [pc, #476]	; (3a6c <USB_Handler+0x214>)
    3890:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3892:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3894:	3a92      	subs	r2, #146	; 0x92
    3896:	3aff      	subs	r2, #255	; 0xff
    3898:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    389a:	4b73      	ldr	r3, [pc, #460]	; (3a68 <USB_Handler+0x210>)
    389c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    389e:	2100      	movs	r1, #0
    38a0:	2004      	movs	r0, #4
    38a2:	4798      	blx	r3
    38a4:	e005      	b.n	38b2 <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    38a6:	2204      	movs	r2, #4
    38a8:	4b6e      	ldr	r3, [pc, #440]	; (3a64 <USB_Handler+0x20c>)
    38aa:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    38ac:	4b6e      	ldr	r3, [pc, #440]	; (3a68 <USB_Handler+0x210>)
    38ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    38b0:	4798      	blx	r3

	_usb_d_dev_handler();
}
    38b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38b4:	4b6b      	ldr	r3, [pc, #428]	; (3a64 <USB_Handler+0x20c>)
    38b6:	4a6d      	ldr	r2, [pc, #436]	; (3a6c <USB_Handler+0x214>)
    38b8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    38ba:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    38bc:	3a92      	subs	r2, #146	; 0x92
    38be:	3aff      	subs	r2, #255	; 0xff
    38c0:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    38c2:	4b69      	ldr	r3, [pc, #420]	; (3a68 <USB_Handler+0x210>)
    38c4:	891b      	ldrh	r3, [r3, #8]
    38c6:	071b      	lsls	r3, r3, #28
    38c8:	0f1b      	lsrs	r3, r3, #28
    38ca:	2b03      	cmp	r3, #3
    38cc:	d00c      	beq.n	38e8 <USB_Handler+0x90>
    38ce:	4b66      	ldr	r3, [pc, #408]	; (3a68 <USB_Handler+0x210>)
    38d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    38d2:	071b      	lsls	r3, r3, #28
    38d4:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    38d6:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    38d8:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    38da:	2b03      	cmp	r3, #3
    38dc:	d005      	beq.n	38ea <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    38de:	4b62      	ldr	r3, [pc, #392]	; (3a68 <USB_Handler+0x210>)
    38e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    38e2:	2003      	movs	r0, #3
    38e4:	4798      	blx	r3
    38e6:	e7e4      	b.n	38b2 <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    38e8:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    38ea:	0152      	lsls	r2, r2, #5
    38ec:	4b5e      	ldr	r3, [pc, #376]	; (3a68 <USB_Handler+0x210>)
    38ee:	189b      	adds	r3, r3, r2
    38f0:	8919      	ldrh	r1, [r3, #8]
    38f2:	0449      	lsls	r1, r1, #17
    38f4:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    38f6:	2200      	movs	r2, #0
    38f8:	811a      	strh	r2, [r3, #8]
    38fa:	e7f0      	b.n	38de <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    38fc:	2280      	movs	r2, #128	; 0x80
    38fe:	4b59      	ldr	r3, [pc, #356]	; (3a64 <USB_Handler+0x20c>)
    3900:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    3902:	4b59      	ldr	r3, [pc, #356]	; (3a68 <USB_Handler+0x210>)
    3904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3906:	2100      	movs	r1, #0
    3908:	2005      	movs	r0, #5
    390a:	4798      	blx	r3
    390c:	e7d1      	b.n	38b2 <USB_Handler+0x5a>
    390e:	4b55      	ldr	r3, [pc, #340]	; (3a64 <USB_Handler+0x20c>)
    3910:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3912:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3914:	4a55      	ldr	r2, [pc, #340]	; (3a6c <USB_Handler+0x214>)
    3916:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3918:	4b55      	ldr	r3, [pc, #340]	; (3a70 <USB_Handler+0x218>)
    391a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    391c:	069b      	lsls	r3, r3, #26
    391e:	d40c      	bmi.n	393a <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3920:	4953      	ldr	r1, [pc, #332]	; (3a70 <USB_Handler+0x218>)
	tmp &= mask;
    3922:	3a32      	subs	r2, #50	; 0x32
    3924:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3926:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    3928:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    392a:	2bd0      	cmp	r3, #208	; 0xd0
    392c:	d1fb      	bne.n	3926 <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    392e:	4b4e      	ldr	r3, [pc, #312]	; (3a68 <USB_Handler+0x210>)
    3930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3932:	2100      	movs	r1, #0
    3934:	2002      	movs	r0, #2
    3936:	4798      	blx	r3
    3938:	e7bb      	b.n	38b2 <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    393a:	494d      	ldr	r1, [pc, #308]	; (3a70 <USB_Handler+0x218>)
	tmp &= mask;
    393c:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    393e:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    3940:	421a      	tst	r2, r3
    3942:	d0fc      	beq.n	393e <USB_Handler+0xe6>
    3944:	e7f3      	b.n	392e <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3946:	4b47      	ldr	r3, [pc, #284]	; (3a64 <USB_Handler+0x20c>)
    3948:	2100      	movs	r1, #0
    394a:	2280      	movs	r2, #128	; 0x80
    394c:	0052      	lsls	r2, r2, #1
    394e:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3950:	3af8      	subs	r2, #248	; 0xf8
    3952:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3954:	3268      	adds	r2, #104	; 0x68
    3956:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3958:	4a44      	ldr	r2, [pc, #272]	; (3a6c <USB_Handler+0x214>)
    395a:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    395c:	4b45      	ldr	r3, [pc, #276]	; (3a74 <USB_Handler+0x21c>)
    395e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    3960:	4b41      	ldr	r3, [pc, #260]	; (3a68 <USB_Handler+0x210>)
    3962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3964:	2100      	movs	r1, #0
    3966:	2001      	movs	r0, #1
    3968:	4798      	blx	r3
    396a:	e7a2      	b.n	38b2 <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    396c:	06cb      	lsls	r3, r1, #27
    396e:	d407      	bmi.n	3980 <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3970:	064b      	lsls	r3, r1, #25
    3972:	d408      	bmi.n	3986 <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3974:	068b      	lsls	r3, r1, #26
    3976:	d52e      	bpl.n	39d6 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    3978:	2100      	movs	r1, #0
    397a:	4b3f      	ldr	r3, [pc, #252]	; (3a78 <USB_Handler+0x220>)
    397c:	4798      	blx	r3
    397e:	e02a      	b.n	39d6 <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    3980:	4b3e      	ldr	r3, [pc, #248]	; (3a7c <USB_Handler+0x224>)
    3982:	4798      	blx	r3
    3984:	e027      	b.n	39d6 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    3986:	2101      	movs	r1, #1
    3988:	4b3b      	ldr	r3, [pc, #236]	; (3a78 <USB_Handler+0x220>)
    398a:	4798      	blx	r3
    398c:	e023      	b.n	39d6 <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    398e:	064b      	lsls	r3, r1, #25
    3990:	d40e      	bmi.n	39b0 <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3992:	070b      	lsls	r3, r1, #28
    3994:	d410      	bmi.n	39b8 <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3996:	078b      	lsls	r3, r1, #30
    3998:	d412      	bmi.n	39c0 <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    399a:	2307      	movs	r3, #7
    399c:	401a      	ands	r2, r3
    399e:	2a01      	cmp	r2, #1
    39a0:	d119      	bne.n	39d6 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    39a2:	074b      	lsls	r3, r1, #29
    39a4:	d410      	bmi.n	39c8 <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    39a6:	06cb      	lsls	r3, r1, #27
    39a8:	d515      	bpl.n	39d6 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    39aa:	4b34      	ldr	r3, [pc, #208]	; (3a7c <USB_Handler+0x224>)
    39ac:	4798      	blx	r3
    39ae:	e012      	b.n	39d6 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    39b0:	2101      	movs	r1, #1
    39b2:	4b31      	ldr	r3, [pc, #196]	; (3a78 <USB_Handler+0x220>)
    39b4:	4798      	blx	r3
    39b6:	e00e      	b.n	39d6 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    39b8:	2101      	movs	r1, #1
    39ba:	4b31      	ldr	r3, [pc, #196]	; (3a80 <USB_Handler+0x228>)
    39bc:	4798      	blx	r3
    39be:	e00a      	b.n	39d6 <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    39c0:	2101      	movs	r1, #1
    39c2:	4b30      	ldr	r3, [pc, #192]	; (3a84 <USB_Handler+0x22c>)
    39c4:	4798      	blx	r3
    39c6:	e006      	b.n	39d6 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    39c8:	2100      	movs	r1, #0
    39ca:	4b2d      	ldr	r3, [pc, #180]	; (3a80 <USB_Handler+0x228>)
    39cc:	4798      	blx	r3
    39ce:	e002      	b.n	39d6 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    39d0:	2100      	movs	r1, #0
    39d2:	4b29      	ldr	r3, [pc, #164]	; (3a78 <USB_Handler+0x220>)
    39d4:	4798      	blx	r3
    39d6:	3501      	adds	r5, #1
    39d8:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    39da:	2d09      	cmp	r5, #9
    39dc:	d100      	bne.n	39e0 <USB_Handler+0x188>
    39de:	e768      	b.n	38b2 <USB_Handler+0x5a>
    39e0:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    39e2:	7ca1      	ldrb	r1, [r4, #18]
    39e4:	29ff      	cmp	r1, #255	; 0xff
    39e6:	d0f6      	beq.n	39d6 <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    39e8:	230f      	movs	r3, #15
    39ea:	400b      	ands	r3, r1
    39ec:	2101      	movs	r1, #1
    39ee:	4099      	lsls	r1, r3
    39f0:	420e      	tst	r6, r1
    39f2:	d0f0      	beq.n	39d6 <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    39f4:	0159      	lsls	r1, r3, #5
    39f6:	4f24      	ldr	r7, [pc, #144]	; (3a88 <USB_Handler+0x230>)
    39f8:	46bc      	mov	ip, r7
    39fa:	4461      	add	r1, ip
    39fc:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    39fe:	015b      	lsls	r3, r3, #5
    3a00:	4f22      	ldr	r7, [pc, #136]	; (3a8c <USB_Handler+0x234>)
    3a02:	46bc      	mov	ip, r7
    3a04:	4463      	add	r3, ip
    3a06:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    3a08:	4019      	ands	r1, r3
	if (flags) {
    3a0a:	d0e4      	beq.n	39d6 <USB_Handler+0x17e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3a0c:	00ab      	lsls	r3, r5, #2
    3a0e:	195a      	adds	r2, r3, r5
    3a10:	0092      	lsls	r2, r2, #2
    3a12:	4b15      	ldr	r3, [pc, #84]	; (3a68 <USB_Handler+0x210>)
    3a14:	469c      	mov	ip, r3
    3a16:	4462      	add	r2, ip
    3a18:	3270      	adds	r2, #112	; 0x70
    3a1a:	7dd2      	ldrb	r2, [r2, #23]
    3a1c:	2347      	movs	r3, #71	; 0x47
    3a1e:	4013      	ands	r3, r2
    3a20:	2b01      	cmp	r3, #1
    3a22:	d0a3      	beq.n	396c <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3a24:	b253      	sxtb	r3, r2
    3a26:	2b00      	cmp	r3, #0
    3a28:	dbb1      	blt.n	398e <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3a2a:	068b      	lsls	r3, r1, #26
    3a2c:	d4d0      	bmi.n	39d0 <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3a2e:	074b      	lsls	r3, r1, #29
    3a30:	d40c      	bmi.n	3a4c <USB_Handler+0x1f4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3a32:	07cb      	lsls	r3, r1, #31
    3a34:	d40e      	bmi.n	3a54 <USB_Handler+0x1fc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3a36:	2307      	movs	r3, #7
    3a38:	401a      	ands	r2, r3
    3a3a:	2a01      	cmp	r2, #1
    3a3c:	d1cb      	bne.n	39d6 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3a3e:	070b      	lsls	r3, r1, #28
    3a40:	d40c      	bmi.n	3a5c <USB_Handler+0x204>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3a42:	06cb      	lsls	r3, r1, #27
    3a44:	d5c7      	bpl.n	39d6 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    3a46:	4b0d      	ldr	r3, [pc, #52]	; (3a7c <USB_Handler+0x224>)
    3a48:	4798      	blx	r3
    3a4a:	e7c4      	b.n	39d6 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    3a4c:	2100      	movs	r1, #0
    3a4e:	4b0c      	ldr	r3, [pc, #48]	; (3a80 <USB_Handler+0x228>)
    3a50:	4798      	blx	r3
    3a52:	e7c0      	b.n	39d6 <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    3a54:	2101      	movs	r1, #1
    3a56:	4b0e      	ldr	r3, [pc, #56]	; (3a90 <USB_Handler+0x238>)
    3a58:	4798      	blx	r3
    3a5a:	e7bc      	b.n	39d6 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    3a5c:	2101      	movs	r1, #1
    3a5e:	4b08      	ldr	r3, [pc, #32]	; (3a80 <USB_Handler+0x228>)
    3a60:	4798      	blx	r3
    3a62:	e7b8      	b.n	39d6 <USB_Handler+0x17e>
    3a64:	41005000 	.word	0x41005000
    3a68:	200005e4 	.word	0x200005e4
    3a6c:	00000201 	.word	0x00000201
    3a70:	40000800 	.word	0x40000800
    3a74:	000029dd 	.word	0x000029dd
    3a78:	00002819 	.word	0x00002819
    3a7c:	0000278d 	.word	0x0000278d
    3a80:	000028dd 	.word	0x000028dd
    3a84:	00002a21 	.word	0x00002a21
    3a88:	41005100 	.word	0x41005100
    3a8c:	41005109 	.word	0x41005109
    3a90:	00002bc9 	.word	0x00002bc9

00003a94 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3a94:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    3a96:	4806      	ldr	r0, [pc, #24]	; (3ab0 <cdc_device_acm_init+0x1c>)
    3a98:	3040      	adds	r0, #64	; 0x40
    3a9a:	4b06      	ldr	r3, [pc, #24]	; (3ab4 <cdc_device_acm_init+0x20>)
    3a9c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3a9e:	4b06      	ldr	r3, [pc, #24]	; (3ab8 <cdc_device_acm_init+0x24>)
    3aa0:	4798      	blx	r3

	usbdc_start(single_desc);
    3aa2:	4806      	ldr	r0, [pc, #24]	; (3abc <cdc_device_acm_init+0x28>)
    3aa4:	4b06      	ldr	r3, [pc, #24]	; (3ac0 <cdc_device_acm_init+0x2c>)
    3aa6:	4798      	blx	r3
	usbdc_attach();
    3aa8:	4b06      	ldr	r3, [pc, #24]	; (3ac4 <cdc_device_acm_init+0x30>)
    3aaa:	4798      	blx	r3
}
    3aac:	bd10      	pop	{r4, pc}
    3aae:	46c0      	nop			; (mov r8, r8)
    3ab0:	200007cc 	.word	0x200007cc
    3ab4:	00004405 	.word	0x00004405
    3ab8:	00003d89 	.word	0x00003d89
    3abc:	2000001c 	.word	0x2000001c
    3ac0:	0000447d 	.word	0x0000447d
    3ac4:	000044b5 	.word	0x000044b5

00003ac8 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3ac8:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    3aca:	4b01      	ldr	r3, [pc, #4]	; (3ad0 <usb_init+0x8>)
    3acc:	4798      	blx	r3
}
    3ace:	bd10      	pop	{r4, pc}
    3ad0:	00003a95 	.word	0x00003a95

00003ad4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3ad4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    3ad8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3ada:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3adc:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    3ae0:	4770      	bx	lr

00003ae2 <atomic_leave_critical>:
    3ae2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    3ae6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3ae8:	f383 8810 	msr	PRIMASK, r3
}
    3aec:	4770      	bx	lr
	...

00003af0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3af2:	b083      	sub	sp, #12
    3af4:	0006      	movs	r6, r0
    3af6:	000c      	movs	r4, r1
    3af8:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3afa:	780a      	ldrb	r2, [r1, #0]
    3afc:	0653      	lsls	r3, r2, #25
    3afe:	0f9b      	lsrs	r3, r3, #30
    3b00:	2b01      	cmp	r3, #1
    3b02:	d000      	beq.n	3b06 <cdcdf_acm_req+0x16>
    3b04:	e06c      	b.n	3be0 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    3b06:	7909      	ldrb	r1, [r1, #4]
    3b08:	7963      	ldrb	r3, [r4, #5]
    3b0a:	021b      	lsls	r3, r3, #8
    3b0c:	430b      	orrs	r3, r1
    3b0e:	493b      	ldr	r1, [pc, #236]	; (3bfc <cdcdf_acm_req+0x10c>)
    3b10:	7809      	ldrb	r1, [r1, #0]
    3b12:	4299      	cmp	r1, r3
    3b14:	d003      	beq.n	3b1e <cdcdf_acm_req+0x2e>
    3b16:	4939      	ldr	r1, [pc, #228]	; (3bfc <cdcdf_acm_req+0x10c>)
    3b18:	7849      	ldrb	r1, [r1, #1]
    3b1a:	4299      	cmp	r1, r3
    3b1c:	d163      	bne.n	3be6 <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3b1e:	b252      	sxtb	r2, r2
    3b20:	2a00      	cmp	r2, #0
    3b22:	db0e      	blt.n	3b42 <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    3b24:	79a7      	ldrb	r7, [r4, #6]
    3b26:	79e3      	ldrb	r3, [r4, #7]
    3b28:	021b      	lsls	r3, r3, #8
    3b2a:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    3b2c:	4b34      	ldr	r3, [pc, #208]	; (3c00 <cdcdf_acm_req+0x110>)
    3b2e:	4798      	blx	r3
	switch (req->bRequest) {
    3b30:	7863      	ldrb	r3, [r4, #1]
    3b32:	2b20      	cmp	r3, #32
    3b34:	d018      	beq.n	3b68 <cdcdf_acm_req+0x78>
    3b36:	2b22      	cmp	r3, #34	; 0x22
    3b38:	d03c      	beq.n	3bb4 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    3b3a:	200d      	movs	r0, #13
    3b3c:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    3b3e:	b003      	add	sp, #12
    3b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    3b42:	2d01      	cmp	r5, #1
    3b44:	d052      	beq.n	3bec <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    3b46:	7863      	ldrb	r3, [r4, #1]
    3b48:	2b21      	cmp	r3, #33	; 0x21
    3b4a:	d151      	bne.n	3bf0 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    3b4c:	79a2      	ldrb	r2, [r4, #6]
    3b4e:	79e3      	ldrb	r3, [r4, #7]
    3b50:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3b52:	4313      	orrs	r3, r2
    3b54:	2b07      	cmp	r3, #7
    3b56:	d14e      	bne.n	3bf6 <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    3b58:	2300      	movs	r3, #0
    3b5a:	2207      	movs	r2, #7
    3b5c:	4927      	ldr	r1, [pc, #156]	; (3bfc <cdcdf_acm_req+0x10c>)
    3b5e:	3108      	adds	r1, #8
    3b60:	0030      	movs	r0, r6
    3b62:	4c28      	ldr	r4, [pc, #160]	; (3c04 <cdcdf_acm_req+0x114>)
    3b64:	47a0      	blx	r4
    3b66:	e7ea      	b.n	3b3e <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3b68:	2f07      	cmp	r7, #7
    3b6a:	d134      	bne.n	3bd6 <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    3b6c:	2d00      	cmp	r5, #0
    3b6e:	d01a      	beq.n	3ba6 <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    3b70:	2207      	movs	r2, #7
    3b72:	0001      	movs	r1, r0
    3b74:	4668      	mov	r0, sp
    3b76:	4b24      	ldr	r3, [pc, #144]	; (3c08 <cdcdf_acm_req+0x118>)
    3b78:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    3b7a:	4b20      	ldr	r3, [pc, #128]	; (3bfc <cdcdf_acm_req+0x10c>)
    3b7c:	691b      	ldr	r3, [r3, #16]
    3b7e:	2b00      	cmp	r3, #0
    3b80:	d005      	beq.n	3b8e <cdcdf_acm_req+0x9e>
    3b82:	4668      	mov	r0, sp
    3b84:	4798      	blx	r3
    3b86:	0003      	movs	r3, r0
			return ERR_NONE;
    3b88:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	d0d7      	beq.n	3b3e <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    3b8e:	4a1b      	ldr	r2, [pc, #108]	; (3bfc <cdcdf_acm_req+0x10c>)
    3b90:	0013      	movs	r3, r2
    3b92:	9900      	ldr	r1, [sp, #0]
    3b94:	6091      	str	r1, [r2, #8]
    3b96:	466a      	mov	r2, sp
    3b98:	8892      	ldrh	r2, [r2, #4]
    3b9a:	819a      	strh	r2, [r3, #12]
    3b9c:	466a      	mov	r2, sp
    3b9e:	7992      	ldrb	r2, [r2, #6]
    3ba0:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    3ba2:	2000      	movs	r0, #0
    3ba4:	e7cb      	b.n	3b3e <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    3ba6:	2300      	movs	r3, #0
    3ba8:	2207      	movs	r2, #7
    3baa:	0001      	movs	r1, r0
    3bac:	0030      	movs	r0, r6
    3bae:	4c15      	ldr	r4, [pc, #84]	; (3c04 <cdcdf_acm_req+0x114>)
    3bb0:	47a0      	blx	r4
    3bb2:	e7c4      	b.n	3b3e <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    3bb4:	2300      	movs	r3, #0
    3bb6:	2200      	movs	r2, #0
    3bb8:	2100      	movs	r1, #0
    3bba:	2000      	movs	r0, #0
    3bbc:	4d11      	ldr	r5, [pc, #68]	; (3c04 <cdcdf_acm_req+0x114>)
    3bbe:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    3bc0:	4b0e      	ldr	r3, [pc, #56]	; (3bfc <cdcdf_acm_req+0x10c>)
    3bc2:	695b      	ldr	r3, [r3, #20]
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	d009      	beq.n	3bdc <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    3bc8:	78a2      	ldrb	r2, [r4, #2]
    3bca:	78e0      	ldrb	r0, [r4, #3]
    3bcc:	0200      	lsls	r0, r0, #8
    3bce:	4310      	orrs	r0, r2
    3bd0:	4798      	blx	r3
		return ERR_NONE;
    3bd2:	2000      	movs	r0, #0
    3bd4:	e7b3      	b.n	3b3e <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    3bd6:	2001      	movs	r0, #1
    3bd8:	4240      	negs	r0, r0
    3bda:	e7b0      	b.n	3b3e <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    3bdc:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    3bde:	e7ae      	b.n	3b3e <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    3be0:	200a      	movs	r0, #10
    3be2:	4240      	negs	r0, r0
    3be4:	e7ab      	b.n	3b3e <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    3be6:	200a      	movs	r0, #10
    3be8:	4240      	negs	r0, r0
    3bea:	e7a8      	b.n	3b3e <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    3bec:	2000      	movs	r0, #0
    3bee:	e7a6      	b.n	3b3e <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    3bf0:	200d      	movs	r0, #13
    3bf2:	4240      	negs	r0, r0
    3bf4:	e7a3      	b.n	3b3e <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    3bf6:	2001      	movs	r0, #1
    3bf8:	4240      	negs	r0, r0
    3bfa:	e7a0      	b.n	3b3e <cdcdf_acm_req+0x4e>
    3bfc:	2000084c 	.word	0x2000084c
    3c00:	000044c1 	.word	0x000044c1
    3c04:	00003f71 	.word	0x00003f71
    3c08:	0000488d 	.word	0x0000488d

00003c0c <cdcdf_acm_ctrl>:
{
    3c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c0e:	46de      	mov	lr, fp
    3c10:	4657      	mov	r7, sl
    3c12:	464e      	mov	r6, r9
    3c14:	4645      	mov	r5, r8
    3c16:	b5e0      	push	{r5, r6, r7, lr}
    3c18:	b083      	sub	sp, #12
    3c1a:	0016      	movs	r6, r2
	switch (ctrl) {
    3c1c:	2901      	cmp	r1, #1
    3c1e:	d068      	beq.n	3cf2 <cdcdf_acm_ctrl+0xe6>
    3c20:	2900      	cmp	r1, #0
    3c22:	d00b      	beq.n	3c3c <cdcdf_acm_ctrl+0x30>
    3c24:	2902      	cmp	r1, #2
    3c26:	d100      	bne.n	3c2a <cdcdf_acm_ctrl+0x1e>
    3c28:	e093      	b.n	3d52 <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    3c2a:	200d      	movs	r0, #13
    3c2c:	4240      	negs	r0, r0
}
    3c2e:	b003      	add	sp, #12
    3c30:	bc3c      	pop	{r2, r3, r4, r5}
    3c32:	4690      	mov	r8, r2
    3c34:	4699      	mov	r9, r3
    3c36:	46a2      	mov	sl, r4
    3c38:	46ab      	mov	fp, r5
    3c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3c3c:	6883      	ldr	r3, [r0, #8]
    3c3e:	4698      	mov	r8, r3
	ifc = desc->sod;
    3c40:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    3c42:	2800      	cmp	r0, #0
    3c44:	d100      	bne.n	3c48 <cdcdf_acm_ctrl+0x3c>
    3c46:	e087      	b.n	3d58 <cdcdf_acm_ctrl+0x14c>
    3c48:	9301      	str	r3, [sp, #4]
    3c4a:	2301      	movs	r3, #1
    3c4c:	4443      	add	r3, r8
    3c4e:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3c50:	4f47      	ldr	r7, [pc, #284]	; (3d70 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    3c52:	4b48      	ldr	r3, [pc, #288]	; (3d74 <cdcdf_acm_ctrl+0x168>)
    3c54:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    3c56:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    3c58:	7943      	ldrb	r3, [r0, #5]
    3c5a:	2108      	movs	r1, #8
    3c5c:	438b      	bics	r3, r1
    3c5e:	2b02      	cmp	r3, #2
    3c60:	d002      	beq.n	3c68 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    3c62:	200a      	movs	r0, #10
    3c64:	4240      	negs	r0, r0
    3c66:	e7e2      	b.n	3c2e <cdcdf_acm_ctrl+0x22>
    3c68:	9901      	ldr	r1, [sp, #4]
    3c6a:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    3c6c:	780b      	ldrb	r3, [r1, #0]
    3c6e:	429a      	cmp	r2, r3
    3c70:	d075      	beq.n	3d5e <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    3c72:	2bff      	cmp	r3, #255	; 0xff
    3c74:	d176      	bne.n	3d64 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    3c76:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    3c78:	2205      	movs	r2, #5
    3c7a:	6871      	ldr	r1, [r6, #4]
    3c7c:	4b3e      	ldr	r3, [pc, #248]	; (3d78 <cdcdf_acm_ctrl+0x16c>)
    3c7e:	4798      	blx	r3
    3c80:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    3c82:	d11e      	bne.n	3cc2 <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    3c84:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    3c86:	7803      	ldrb	r3, [r0, #0]
    3c88:	18c0      	adds	r0, r0, r3
    3c8a:	2204      	movs	r2, #4
    3c8c:	6871      	ldr	r1, [r6, #4]
    3c8e:	4b3a      	ldr	r3, [pc, #232]	; (3d78 <cdcdf_acm_ctrl+0x16c>)
    3c90:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    3c92:	9b01      	ldr	r3, [sp, #4]
    3c94:	455b      	cmp	r3, fp
    3c96:	d027      	beq.n	3ce8 <cdcdf_acm_ctrl+0xdc>
    3c98:	9b01      	ldr	r3, [sp, #4]
    3c9a:	3301      	adds	r3, #1
    3c9c:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    3c9e:	2800      	cmp	r0, #0
    3ca0:	d1d9      	bne.n	3c56 <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    3ca2:	200a      	movs	r0, #10
    3ca4:	4240      	negs	r0, r0
    3ca6:	e7c2      	b.n	3c2e <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    3ca8:	4653      	mov	r3, sl
    3caa:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    3cac:	0028      	movs	r0, r5
    3cae:	4b31      	ldr	r3, [pc, #196]	; (3d74 <cdcdf_acm_ctrl+0x168>)
    3cb0:	4798      	blx	r3
			desc->sod = ep;
    3cb2:	6034      	str	r4, [r6, #0]
    3cb4:	7820      	ldrb	r0, [r4, #0]
    3cb6:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3cb8:	6871      	ldr	r1, [r6, #4]
    3cba:	4b30      	ldr	r3, [pc, #192]	; (3d7c <cdcdf_acm_ctrl+0x170>)
    3cbc:	4798      	blx	r3
    3cbe:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    3cc0:	d0e0      	beq.n	3c84 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    3cc2:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    3cc4:	7963      	ldrb	r3, [r4, #5]
    3cc6:	021b      	lsls	r3, r3, #8
    3cc8:	7922      	ldrb	r2, [r4, #4]
    3cca:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3ccc:	b292      	uxth	r2, r2
    3cce:	78e1      	ldrb	r1, [r4, #3]
    3cd0:	0028      	movs	r0, r5
    3cd2:	47b8      	blx	r7
    3cd4:	2800      	cmp	r0, #0
    3cd6:	d148      	bne.n	3d6a <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    3cd8:	b26b      	sxtb	r3, r5
    3cda:	2b00      	cmp	r3, #0
    3cdc:	dbe4      	blt.n	3ca8 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    3cde:	4643      	mov	r3, r8
    3ce0:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    3ce2:	0028      	movs	r0, r5
    3ce4:	47c8      	blx	r9
    3ce6:	e7e4      	b.n	3cb2 <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    3ce8:	2201      	movs	r2, #1
    3cea:	4b25      	ldr	r3, [pc, #148]	; (3d80 <cdcdf_acm_ctrl+0x174>)
    3cec:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3cee:	2000      	movs	r0, #0
    3cf0:	e79d      	b.n	3c2e <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3cf2:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3cf4:	2a00      	cmp	r2, #0
    3cf6:	d008      	beq.n	3d0a <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3cf8:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3cfa:	795b      	ldrb	r3, [r3, #5]
    3cfc:	2208      	movs	r2, #8
    3cfe:	4393      	bics	r3, r2
    3d00:	2b02      	cmp	r3, #2
    3d02:	d002      	beq.n	3d0a <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    3d04:	200a      	movs	r0, #10
    3d06:	4240      	negs	r0, r0
    3d08:	e791      	b.n	3c2e <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    3d0a:	7823      	ldrb	r3, [r4, #0]
    3d0c:	2bff      	cmp	r3, #255	; 0xff
    3d0e:	d008      	beq.n	3d22 <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    3d10:	23ff      	movs	r3, #255	; 0xff
    3d12:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    3d14:	78a0      	ldrb	r0, [r4, #2]
    3d16:	28ff      	cmp	r0, #255	; 0xff
    3d18:	d003      	beq.n	3d22 <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3d1a:	4b1a      	ldr	r3, [pc, #104]	; (3d84 <cdcdf_acm_ctrl+0x178>)
    3d1c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3d1e:	23ff      	movs	r3, #255	; 0xff
    3d20:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    3d22:	7863      	ldrb	r3, [r4, #1]
    3d24:	2bff      	cmp	r3, #255	; 0xff
    3d26:	d008      	beq.n	3d3a <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    3d28:	23ff      	movs	r3, #255	; 0xff
    3d2a:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3d2c:	78e0      	ldrb	r0, [r4, #3]
    3d2e:	28ff      	cmp	r0, #255	; 0xff
    3d30:	d003      	beq.n	3d3a <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3d32:	4b14      	ldr	r3, [pc, #80]	; (3d84 <cdcdf_acm_ctrl+0x178>)
    3d34:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3d36:	23ff      	movs	r3, #255	; 0xff
    3d38:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3d3a:	7920      	ldrb	r0, [r4, #4]
    3d3c:	28ff      	cmp	r0, #255	; 0xff
    3d3e:	d003      	beq.n	3d48 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    3d40:	4b10      	ldr	r3, [pc, #64]	; (3d84 <cdcdf_acm_ctrl+0x178>)
    3d42:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3d44:	23ff      	movs	r3, #255	; 0xff
    3d46:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3d48:	2200      	movs	r2, #0
    3d4a:	4b0d      	ldr	r3, [pc, #52]	; (3d80 <cdcdf_acm_ctrl+0x174>)
    3d4c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3d4e:	2000      	movs	r0, #0
    3d50:	e76d      	b.n	3c2e <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    3d52:	201b      	movs	r0, #27
    3d54:	4240      	negs	r0, r0
    3d56:	e76a      	b.n	3c2e <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    3d58:	200a      	movs	r0, #10
    3d5a:	4240      	negs	r0, r0
    3d5c:	e767      	b.n	3c2e <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    3d5e:	2012      	movs	r0, #18
    3d60:	4240      	negs	r0, r0
    3d62:	e764      	b.n	3c2e <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    3d64:	201c      	movs	r0, #28
    3d66:	4240      	negs	r0, r0
    3d68:	e761      	b.n	3c2e <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    3d6a:	2014      	movs	r0, #20
    3d6c:	4240      	negs	r0, r0
    3d6e:	e75e      	b.n	3c2e <cdcdf_acm_ctrl+0x22>
    3d70:	00001b05 	.word	0x00001b05
    3d74:	00001b99 	.word	0x00001b99
    3d78:	000044dd 	.word	0x000044dd
    3d7c:	00004513 	.word	0x00004513
    3d80:	2000084c 	.word	0x2000084c
    3d84:	00001b6d 	.word	0x00001b6d

00003d88 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    3d88:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    3d8a:	4b0a      	ldr	r3, [pc, #40]	; (3db4 <cdcdf_acm_init+0x2c>)
    3d8c:	4798      	blx	r3
    3d8e:	2801      	cmp	r0, #1
    3d90:	d80c      	bhi.n	3dac <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    3d92:	4809      	ldr	r0, [pc, #36]	; (3db8 <cdcdf_acm_init+0x30>)
    3d94:	4b09      	ldr	r3, [pc, #36]	; (3dbc <cdcdf_acm_init+0x34>)
    3d96:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    3d98:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    3d9a:	3018      	adds	r0, #24
    3d9c:	4b08      	ldr	r3, [pc, #32]	; (3dc0 <cdcdf_acm_init+0x38>)
    3d9e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    3da0:	4908      	ldr	r1, [pc, #32]	; (3dc4 <cdcdf_acm_init+0x3c>)
    3da2:	2001      	movs	r0, #1
    3da4:	4b08      	ldr	r3, [pc, #32]	; (3dc8 <cdcdf_acm_init+0x40>)
    3da6:	4798      	blx	r3
	return ERR_NONE;
    3da8:	2000      	movs	r0, #0
}
    3daa:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3dac:	2011      	movs	r0, #17
    3dae:	4240      	negs	r0, r0
    3db0:	e7fb      	b.n	3daa <cdcdf_acm_init+0x22>
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	000044cd 	.word	0x000044cd
    3db8:	2000084c 	.word	0x2000084c
    3dbc:	00003c0d 	.word	0x00003c0d
    3dc0:	00004465 	.word	0x00004465
    3dc4:	2000007c 	.word	0x2000007c
    3dc8:	000043cd 	.word	0x000043cd

00003dcc <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3dcc:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3dce:	4b06      	ldr	r3, [pc, #24]	; (3de8 <usbdc_unconfig+0x1c>)
    3dd0:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    3dd2:	2c00      	cmp	r4, #0
    3dd4:	d007      	beq.n	3de6 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    3dd6:	2200      	movs	r2, #0
    3dd8:	2101      	movs	r1, #1
    3dda:	0020      	movs	r0, r4
    3ddc:	6863      	ldr	r3, [r4, #4]
    3dde:	4798      	blx	r3
		func = func->next;
    3de0:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    3de2:	2c00      	cmp	r4, #0
    3de4:	d1f7      	bne.n	3dd6 <usbdc_unconfig+0xa>
	}
}
    3de6:	bd10      	pop	{r4, pc}
    3de8:	20000870 	.word	0x20000870

00003dec <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3dec:	b570      	push	{r4, r5, r6, lr}
    3dee:	0006      	movs	r6, r0
    3df0:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    3df2:	4b07      	ldr	r3, [pc, #28]	; (3e10 <usbdc_change_notify+0x24>)
    3df4:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    3df6:	2c00      	cmp	r4, #0
    3df8:	d103      	bne.n	3e02 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    3dfa:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    3dfc:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    3dfe:	2c00      	cmp	r4, #0
    3e00:	d0fb      	beq.n	3dfa <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    3e02:	6863      	ldr	r3, [r4, #4]
    3e04:	2b00      	cmp	r3, #0
    3e06:	d0f9      	beq.n	3dfc <usbdc_change_notify+0x10>
			cg->cb(change, value);
    3e08:	0029      	movs	r1, r5
    3e0a:	0030      	movs	r0, r6
    3e0c:	4798      	blx	r3
    3e0e:	e7f5      	b.n	3dfc <usbdc_change_notify+0x10>
    3e10:	20000870 	.word	0x20000870

00003e14 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e16:	0007      	movs	r7, r0
    3e18:	000e      	movs	r6, r1
    3e1a:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3e1c:	4b0d      	ldr	r3, [pc, #52]	; (3e54 <usbdc_request_handler+0x40>)
    3e1e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    3e20:	2c00      	cmp	r4, #0
    3e22:	d104      	bne.n	3e2e <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    3e24:	2000      	movs	r0, #0
    3e26:	e011      	b.n	3e4c <usbdc_request_handler+0x38>
		h = h->next;
    3e28:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3e2a:	2c00      	cmp	r4, #0
    3e2c:	d00d      	beq.n	3e4a <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    3e2e:	6863      	ldr	r3, [r4, #4]
    3e30:	2b00      	cmp	r3, #0
    3e32:	d0f9      	beq.n	3e28 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    3e34:	002a      	movs	r2, r5
    3e36:	0031      	movs	r1, r6
    3e38:	0038      	movs	r0, r7
    3e3a:	4798      	blx	r3
			if (0 == rc) {
    3e3c:	2800      	cmp	r0, #0
    3e3e:	d006      	beq.n	3e4e <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    3e40:	300a      	adds	r0, #10
    3e42:	d0f1      	beq.n	3e28 <usbdc_request_handler+0x14>
				return -1;
    3e44:	2001      	movs	r0, #1
    3e46:	4240      	negs	r0, r0
    3e48:	e000      	b.n	3e4c <usbdc_request_handler+0x38>
	return false;
    3e4a:	2000      	movs	r0, #0
}
    3e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    3e4e:	2001      	movs	r0, #1
    3e50:	e7fc      	b.n	3e4c <usbdc_request_handler+0x38>
    3e52:	46c0      	nop			; (mov r8, r8)
    3e54:	20000870 	.word	0x20000870

00003e58 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    3e58:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    3e5a:	4b06      	ldr	r3, [pc, #24]	; (3e74 <usbd_sof_cb+0x1c>)
    3e5c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    3e5e:	2c00      	cmp	r4, #0
    3e60:	d103      	bne.n	3e6a <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    3e62:	bd10      	pop	{r4, pc}
		sof = sof->next;
    3e64:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    3e66:	2c00      	cmp	r4, #0
    3e68:	d0fb      	beq.n	3e62 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    3e6a:	6863      	ldr	r3, [r4, #4]
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	d0f9      	beq.n	3e64 <usbd_sof_cb+0xc>
			sof->cb();
    3e70:	4798      	blx	r3
    3e72:	e7f7      	b.n	3e64 <usbd_sof_cb+0xc>
    3e74:	20000870 	.word	0x20000870

00003e78 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3e78:	b510      	push	{r4, lr}
    3e7a:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    3e7c:	2900      	cmp	r1, #0
    3e7e:	d003      	beq.n	3e88 <usbdc_cb_ctl_done+0x10>
    3e80:	2901      	cmp	r1, #1
    3e82:	d029      	beq.n	3ed8 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    3e84:	2000      	movs	r0, #0
    3e86:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    3e88:	7813      	ldrb	r3, [r2, #0]
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	d1fa      	bne.n	3e84 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    3e8e:	7853      	ldrb	r3, [r2, #1]
    3e90:	2b05      	cmp	r3, #5
    3e92:	d011      	beq.n	3eb8 <usbdc_cb_ctl_done+0x40>
    3e94:	2b09      	cmp	r3, #9
    3e96:	d1f5      	bne.n	3e84 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    3e98:	7892      	ldrb	r2, [r2, #2]
    3e9a:	4b12      	ldr	r3, [pc, #72]	; (3ee4 <usbdc_cb_ctl_done+0x6c>)
    3e9c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    3e9e:	78a3      	ldrb	r3, [r4, #2]
    3ea0:	78e1      	ldrb	r1, [r4, #3]
    3ea2:	0209      	lsls	r1, r1, #8
    3ea4:	4319      	orrs	r1, r3
    3ea6:	1e4b      	subs	r3, r1, #1
    3ea8:	4199      	sbcs	r1, r3
    3eaa:	3103      	adds	r1, #3
    3eac:	4b0d      	ldr	r3, [pc, #52]	; (3ee4 <usbdc_cb_ctl_done+0x6c>)
    3eae:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3eb0:	2001      	movs	r0, #1
    3eb2:	4b0d      	ldr	r3, [pc, #52]	; (3ee8 <usbdc_cb_ctl_done+0x70>)
    3eb4:	4798      	blx	r3
    3eb6:	e7e5      	b.n	3e84 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    3eb8:	7890      	ldrb	r0, [r2, #2]
    3eba:	4b0c      	ldr	r3, [pc, #48]	; (3eec <usbdc_cb_ctl_done+0x74>)
    3ebc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3ebe:	78a3      	ldrb	r3, [r4, #2]
    3ec0:	78e1      	ldrb	r1, [r4, #3]
    3ec2:	0209      	lsls	r1, r1, #8
    3ec4:	4319      	orrs	r1, r3
    3ec6:	1e4b      	subs	r3, r1, #1
    3ec8:	4199      	sbcs	r1, r3
    3eca:	3102      	adds	r1, #2
    3ecc:	4b05      	ldr	r3, [pc, #20]	; (3ee4 <usbdc_cb_ctl_done+0x6c>)
    3ece:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3ed0:	2001      	movs	r0, #1
    3ed2:	4b05      	ldr	r3, [pc, #20]	; (3ee8 <usbdc_cb_ctl_done+0x70>)
    3ed4:	4798      	blx	r3
    3ed6:	e7d5      	b.n	3e84 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    3ed8:	2201      	movs	r2, #1
    3eda:	0021      	movs	r1, r4
    3edc:	2000      	movs	r0, #0
    3ede:	4b04      	ldr	r3, [pc, #16]	; (3ef0 <usbdc_cb_ctl_done+0x78>)
    3ee0:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    3ee2:	e7cf      	b.n	3e84 <usbdc_cb_ctl_done+0xc>
    3ee4:	20000870 	.word	0x20000870
    3ee8:	00003ded 	.word	0x00003ded
    3eec:	00001af9 	.word	0x00001af9
    3ef0:	00003e15 	.word	0x00003e15

00003ef4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3ef4:	b510      	push	{r4, lr}
	usbdc_unconfig();
    3ef6:	4b0d      	ldr	r3, [pc, #52]	; (3f2c <usbdc_reset+0x38>)
    3ef8:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    3efa:	4c0d      	ldr	r4, [pc, #52]	; (3f30 <usbdc_reset+0x3c>)
    3efc:	2302      	movs	r3, #2
    3efe:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    3f00:	2300      	movs	r3, #0
    3f02:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    3f04:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    3f06:	2000      	movs	r0, #0
    3f08:	4b0a      	ldr	r3, [pc, #40]	; (3f34 <usbdc_reset+0x40>)
    3f0a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3f0c:	7f20      	ldrb	r0, [r4, #28]
    3f0e:	4b0a      	ldr	r3, [pc, #40]	; (3f38 <usbdc_reset+0x44>)
    3f10:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    3f12:	4a0a      	ldr	r2, [pc, #40]	; (3f3c <usbdc_reset+0x48>)
    3f14:	2100      	movs	r1, #0
    3f16:	2000      	movs	r0, #0
    3f18:	4c09      	ldr	r4, [pc, #36]	; (3f40 <usbdc_reset+0x4c>)
    3f1a:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3f1c:	4a09      	ldr	r2, [pc, #36]	; (3f44 <usbdc_reset+0x50>)
    3f1e:	2102      	movs	r1, #2
    3f20:	2000      	movs	r0, #0
    3f22:	47a0      	blx	r4
	usb_d_ep_enable(0);
    3f24:	2000      	movs	r0, #0
    3f26:	4b08      	ldr	r3, [pc, #32]	; (3f48 <usbdc_reset+0x54>)
    3f28:	4798      	blx	r3
}
    3f2a:	bd10      	pop	{r4, pc}
    3f2c:	00003dcd 	.word	0x00003dcd
    3f30:	20000870 	.word	0x20000870
    3f34:	00001b6d 	.word	0x00001b6d
    3f38:	00001b59 	.word	0x00001b59
    3f3c:	00003f8d 	.word	0x00003f8d
    3f40:	00001d75 	.word	0x00001d75
    3f44:	00003e79 	.word	0x00003e79
    3f48:	00001b99 	.word	0x00001b99

00003f4c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3f4c:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    3f4e:	2800      	cmp	r0, #0
    3f50:	d002      	beq.n	3f58 <usbd_event_cb+0xc>
    3f52:	2801      	cmp	r0, #1
    3f54:	d004      	beq.n	3f60 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    3f56:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    3f58:	2000      	movs	r0, #0
    3f5a:	4b03      	ldr	r3, [pc, #12]	; (3f68 <usbd_event_cb+0x1c>)
    3f5c:	4798      	blx	r3
		break;
    3f5e:	e7fa      	b.n	3f56 <usbd_event_cb+0xa>
		usbdc_reset();
    3f60:	4b02      	ldr	r3, [pc, #8]	; (3f6c <usbd_event_cb+0x20>)
    3f62:	4798      	blx	r3
}
    3f64:	e7f7      	b.n	3f56 <usbd_event_cb+0xa>
    3f66:	46c0      	nop			; (mov r8, r8)
    3f68:	00003ded 	.word	0x00003ded
    3f6c:	00003ef5 	.word	0x00003ef5

00003f70 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    3f70:	b510      	push	{r4, lr}
    3f72:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    3f74:	ac01      	add	r4, sp, #4
    3f76:	9101      	str	r1, [sp, #4]
    3f78:	9202      	str	r2, [sp, #8]
    3f7a:	7220      	strb	r0, [r4, #8]
    3f7c:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    3f7e:	0020      	movs	r0, r4
    3f80:	4b01      	ldr	r3, [pc, #4]	; (3f88 <usbdc_xfer+0x18>)
    3f82:	4798      	blx	r3
}
    3f84:	b004      	add	sp, #16
    3f86:	bd10      	pop	{r4, pc}
    3f88:	00001be5 	.word	0x00001be5

00003f8c <usbdc_cb_ctl_req>:
{
    3f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f8e:	46c6      	mov	lr, r8
    3f90:	b500      	push	{lr}
    3f92:	b084      	sub	sp, #16
    3f94:	0005      	movs	r5, r0
    3f96:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3f98:	2200      	movs	r2, #0
    3f9a:	4bb5      	ldr	r3, [pc, #724]	; (4270 <usbdc_cb_ctl_req+0x2e4>)
    3f9c:	4798      	blx	r3
    3f9e:	1c43      	adds	r3, r0, #1
    3fa0:	d00d      	beq.n	3fbe <usbdc_cb_ctl_req+0x32>
		return true;
    3fa2:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3fa4:	2801      	cmp	r0, #1
    3fa6:	d00b      	beq.n	3fc0 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3fa8:	7822      	ldrb	r2, [r4, #0]
    3faa:	231f      	movs	r3, #31
    3fac:	0011      	movs	r1, r2
    3fae:	4399      	bics	r1, r3
    3fb0:	d00b      	beq.n	3fca <usbdc_cb_ctl_req+0x3e>
    3fb2:	b2cb      	uxtb	r3, r1
    3fb4:	2b80      	cmp	r3, #128	; 0x80
    3fb6:	d100      	bne.n	3fba <usbdc_cb_ctl_req+0x2e>
    3fb8:	e0f8      	b.n	41ac <usbdc_cb_ctl_req+0x220>
		return false;
    3fba:	2300      	movs	r3, #0
    3fbc:	e000      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    3fbe:	2300      	movs	r3, #0
}
    3fc0:	0018      	movs	r0, r3
    3fc2:	b004      	add	sp, #16
    3fc4:	bc04      	pop	{r2}
    3fc6:	4690      	mov	r8, r2
    3fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    3fca:	7863      	ldrb	r3, [r4, #1]
    3fcc:	2b0b      	cmp	r3, #11
    3fce:	d900      	bls.n	3fd2 <usbdc_cb_ctl_req+0x46>
    3fd0:	e1e4      	b.n	439c <usbdc_cb_ctl_req+0x410>
    3fd2:	009b      	lsls	r3, r3, #2
    3fd4:	49a7      	ldr	r1, [pc, #668]	; (4274 <usbdc_cb_ctl_req+0x2e8>)
    3fd6:	58cb      	ldr	r3, [r1, r3]
    3fd8:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3fda:	2301      	movs	r3, #1
    3fdc:	2200      	movs	r2, #0
    3fde:	2100      	movs	r1, #0
    3fe0:	0028      	movs	r0, r5
    3fe2:	4ca5      	ldr	r4, [pc, #660]	; (4278 <usbdc_cb_ctl_req+0x2ec>)
    3fe4:	47a0      	blx	r4
    3fe6:	4243      	negs	r3, r0
    3fe8:	4143      	adcs	r3, r0
    3fea:	b2db      	uxtb	r3, r3
    3fec:	e7e8      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    3fee:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    3ff0:	2a00      	cmp	r2, #0
    3ff2:	d01a      	beq.n	402a <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3ff4:	4ba1      	ldr	r3, [pc, #644]	; (427c <usbdc_cb_ctl_req+0x2f0>)
    3ff6:	681b      	ldr	r3, [r3, #0]
    3ff8:	6859      	ldr	r1, [r3, #4]
    3ffa:	6818      	ldr	r0, [r3, #0]
    3ffc:	4ba0      	ldr	r3, [pc, #640]	; (4280 <usbdc_cb_ctl_req+0x2f4>)
    3ffe:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4000:	2800      	cmp	r0, #0
    4002:	d100      	bne.n	4006 <usbdc_cb_ctl_req+0x7a>
    4004:	e1d4      	b.n	43b0 <usbdc_cb_ctl_req+0x424>
    4006:	78c3      	ldrb	r3, [r0, #3]
    4008:	021b      	lsls	r3, r3, #8
    400a:	7881      	ldrb	r1, [r0, #2]
    400c:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    400e:	b289      	uxth	r1, r1
    4010:	1841      	adds	r1, r0, r1
    4012:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    4014:	2204      	movs	r2, #4
    4016:	4b9b      	ldr	r3, [pc, #620]	; (4284 <usbdc_cb_ctl_req+0x2f8>)
    4018:	4798      	blx	r3
    401a:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    401c:	2800      	cmp	r0, #0
    401e:	d006      	beq.n	402e <usbdc_cb_ctl_req+0xa2>
    4020:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    4022:	4f96      	ldr	r7, [pc, #600]	; (427c <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4024:	4b97      	ldr	r3, [pc, #604]	; (4284 <usbdc_cb_ctl_req+0x2f8>)
    4026:	4698      	mov	r8, r3
    4028:	e01a      	b.n	4060 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    402a:	4b97      	ldr	r3, [pc, #604]	; (4288 <usbdc_cb_ctl_req+0x2fc>)
    402c:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    402e:	2301      	movs	r3, #1
    4030:	2200      	movs	r2, #0
    4032:	2100      	movs	r1, #0
    4034:	0028      	movs	r0, r5
    4036:	4c90      	ldr	r4, [pc, #576]	; (4278 <usbdc_cb_ctl_req+0x2ec>)
    4038:	47a0      	blx	r4
    403a:	4243      	negs	r3, r0
    403c:	4143      	adcs	r3, r0
    403e:	b2db      	uxtb	r3, r3
    4040:	e7be      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    4042:	0034      	movs	r4, r6
    4044:	e000      	b.n	4048 <usbdc_cb_ctl_req+0xbc>
    4046:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    4048:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    404a:	7803      	ldrb	r3, [r0, #0]
    404c:	18c0      	adds	r0, r0, r3
    404e:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4050:	9b03      	ldr	r3, [sp, #12]
    4052:	9301      	str	r3, [sp, #4]
    4054:	2204      	movs	r2, #4
    4056:	0019      	movs	r1, r3
    4058:	47c0      	blx	r8
    405a:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    405c:	2800      	cmp	r0, #0
    405e:	d0e6      	beq.n	402e <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    4060:	7886      	ldrb	r6, [r0, #2]
    4062:	42a6      	cmp	r6, r4
    4064:	d0f0      	beq.n	4048 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    4066:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    4068:	2c00      	cmp	r4, #0
    406a:	d0ea      	beq.n	4042 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    406c:	aa02      	add	r2, sp, #8
    406e:	2100      	movs	r1, #0
    4070:	0020      	movs	r0, r4
    4072:	6863      	ldr	r3, [r4, #4]
    4074:	4798      	blx	r3
    4076:	2800      	cmp	r0, #0
    4078:	d0e5      	beq.n	4046 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    407a:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    407c:	2c00      	cmp	r4, #0
    407e:	d1f5      	bne.n	406c <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    4080:	0034      	movs	r4, r6
    4082:	e7e1      	b.n	4048 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4084:	231f      	movs	r3, #31
    4086:	401a      	ands	r2, r3
		return false;
    4088:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    408a:	2a02      	cmp	r2, #2
    408c:	d198      	bne.n	3fc0 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    408e:	79a3      	ldrb	r3, [r4, #6]
    4090:	79e2      	ldrb	r2, [r4, #7]
    4092:	0212      	lsls	r2, r2, #8
    4094:	431a      	orrs	r2, r3
			return false;
    4096:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    4098:	2a00      	cmp	r2, #0
    409a:	d000      	beq.n	409e <usbdc_cb_ctl_req+0x112>
    409c:	e790      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    409e:	7920      	ldrb	r0, [r4, #4]
    40a0:	2100      	movs	r1, #0
    40a2:	4b7a      	ldr	r3, [pc, #488]	; (428c <usbdc_cb_ctl_req+0x300>)
    40a4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    40a6:	2301      	movs	r3, #1
    40a8:	2200      	movs	r2, #0
    40aa:	2100      	movs	r1, #0
    40ac:	0028      	movs	r0, r5
    40ae:	4c72      	ldr	r4, [pc, #456]	; (4278 <usbdc_cb_ctl_req+0x2ec>)
    40b0:	47a0      	blx	r4
		return true;
    40b2:	2301      	movs	r3, #1
    40b4:	e784      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    40b6:	231f      	movs	r3, #31
    40b8:	401a      	ands	r2, r3
		return false;
    40ba:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    40bc:	2a02      	cmp	r2, #2
    40be:	d000      	beq.n	40c2 <usbdc_cb_ctl_req+0x136>
    40c0:	e77e      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    40c2:	79a3      	ldrb	r3, [r4, #6]
    40c4:	79e2      	ldrb	r2, [r4, #7]
    40c6:	0212      	lsls	r2, r2, #8
    40c8:	431a      	orrs	r2, r3
			return false;
    40ca:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    40cc:	2a00      	cmp	r2, #0
    40ce:	d000      	beq.n	40d2 <usbdc_cb_ctl_req+0x146>
    40d0:	e776      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    40d2:	7920      	ldrb	r0, [r4, #4]
    40d4:	2101      	movs	r1, #1
    40d6:	4b6d      	ldr	r3, [pc, #436]	; (428c <usbdc_cb_ctl_req+0x300>)
    40d8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    40da:	2301      	movs	r3, #1
    40dc:	2200      	movs	r2, #0
    40de:	2100      	movs	r1, #0
    40e0:	0028      	movs	r0, r5
    40e2:	4c65      	ldr	r4, [pc, #404]	; (4278 <usbdc_cb_ctl_req+0x2ec>)
    40e4:	47a0      	blx	r4
		return true;
    40e6:	2301      	movs	r3, #1
    40e8:	e76a      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    40ea:	78a3      	ldrb	r3, [r4, #2]
    40ec:	78e5      	ldrb	r5, [r4, #3]
    40ee:	022d      	lsls	r5, r5, #8
    40f0:	431d      	orrs	r5, r3
    40f2:	7923      	ldrb	r3, [r4, #4]
    40f4:	7964      	ldrb	r4, [r4, #5]
    40f6:	0224      	lsls	r4, r4, #8
    40f8:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    40fa:	4a60      	ldr	r2, [pc, #384]	; (427c <usbdc_cb_ctl_req+0x2f0>)
    40fc:	6813      	ldr	r3, [r2, #0]
    40fe:	7ed2      	ldrb	r2, [r2, #27]
    4100:	6859      	ldr	r1, [r3, #4]
    4102:	6818      	ldr	r0, [r3, #0]
    4104:	4b5e      	ldr	r3, [pc, #376]	; (4280 <usbdc_cb_ctl_req+0x2f4>)
    4106:	4798      	blx	r3
	if (NULL == ifc) {
    4108:	2800      	cmp	r0, #0
    410a:	d047      	beq.n	419c <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    410c:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    410e:	78c3      	ldrb	r3, [r0, #3]
    4110:	021b      	lsls	r3, r3, #8
    4112:	7881      	ldrb	r1, [r0, #2]
    4114:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    4116:	b289      	uxth	r1, r1
    4118:	1841      	adds	r1, r0, r1
    411a:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    411c:	2204      	movs	r2, #4
    411e:	4b59      	ldr	r3, [pc, #356]	; (4284 <usbdc_cb_ctl_req+0x2f8>)
    4120:	4798      	blx	r3
    4122:	2800      	cmp	r0, #0
    4124:	d03c      	beq.n	41a0 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4126:	4e57      	ldr	r6, [pc, #348]	; (4284 <usbdc_cb_ctl_req+0x2f8>)
    4128:	e008      	b.n	413c <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    412a:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    412c:	7803      	ldrb	r3, [r0, #0]
    412e:	18c0      	adds	r0, r0, r3
    4130:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4132:	2204      	movs	r2, #4
    4134:	9903      	ldr	r1, [sp, #12]
    4136:	47b0      	blx	r6
		if (NULL == ifc) {
    4138:	2800      	cmp	r0, #0
    413a:	d033      	beq.n	41a4 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    413c:	7883      	ldrb	r3, [r0, #2]
    413e:	42a3      	cmp	r3, r4
    4140:	d1f3      	bne.n	412a <usbdc_cb_ctl_req+0x19e>
    4142:	78c3      	ldrb	r3, [r0, #3]
    4144:	42ab      	cmp	r3, r5
    4146:	d1f0      	bne.n	412a <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    4148:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    414a:	4b4c      	ldr	r3, [pc, #304]	; (427c <usbdc_cb_ctl_req+0x2f0>)
    414c:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    414e:	2e00      	cmp	r6, #0
    4150:	d02a      	beq.n	41a8 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    4152:	aa02      	add	r2, sp, #8
    4154:	2101      	movs	r1, #1
    4156:	0030      	movs	r0, r6
    4158:	6873      	ldr	r3, [r6, #4]
    415a:	4798      	blx	r3
    415c:	2800      	cmp	r0, #0
    415e:	d004      	beq.n	416a <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    4160:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    4162:	2e00      	cmp	r6, #0
    4164:	d1f5      	bne.n	4152 <usbdc_cb_ctl_req+0x1c6>
	return false;
    4166:	2300      	movs	r3, #0
    4168:	e72a      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    416a:	6873      	ldr	r3, [r6, #4]
    416c:	aa02      	add	r2, sp, #8
    416e:	2100      	movs	r1, #0
    4170:	0030      	movs	r0, r6
    4172:	4798      	blx	r3
			return false;
    4174:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    4176:	2800      	cmp	r0, #0
    4178:	d000      	beq.n	417c <usbdc_cb_ctl_req+0x1f0>
    417a:	e721      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    417c:	2d00      	cmp	r5, #0
    417e:	d005      	beq.n	418c <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    4180:	493e      	ldr	r1, [pc, #248]	; (427c <usbdc_cb_ctl_req+0x2f0>)
    4182:	2201      	movs	r2, #1
    4184:	40a2      	lsls	r2, r4
    4186:	7f4b      	ldrb	r3, [r1, #29]
    4188:	4313      	orrs	r3, r2
    418a:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    418c:	2300      	movs	r3, #0
    418e:	2200      	movs	r2, #0
    4190:	2100      	movs	r1, #0
    4192:	2000      	movs	r0, #0
    4194:	4c38      	ldr	r4, [pc, #224]	; (4278 <usbdc_cb_ctl_req+0x2ec>)
    4196:	47a0      	blx	r4
			return true;
    4198:	2301      	movs	r3, #1
    419a:	e711      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    419c:	2300      	movs	r3, #0
    419e:	e70f      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    41a0:	2300      	movs	r3, #0
    41a2:	e70d      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
			return false;
    41a4:	2300      	movs	r3, #0
    41a6:	e70b      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
	return false;
    41a8:	2300      	movs	r3, #0
    41aa:	e709      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    41ac:	7863      	ldrb	r3, [r4, #1]
    41ae:	2b06      	cmp	r3, #6
    41b0:	d033      	beq.n	421a <usbdc_cb_ctl_req+0x28e>
    41b2:	b2d9      	uxtb	r1, r3
    41b4:	2906      	cmp	r1, #6
    41b6:	d922      	bls.n	41fe <usbdc_cb_ctl_req+0x272>
    41b8:	2b08      	cmp	r3, #8
    41ba:	d100      	bne.n	41be <usbdc_cb_ctl_req+0x232>
    41bc:	e0af      	b.n	431e <usbdc_cb_ctl_req+0x392>
    41be:	2b0a      	cmp	r3, #10
    41c0:	d000      	beq.n	41c4 <usbdc_cb_ctl_req+0x238>
    41c2:	e0ed      	b.n	43a0 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    41c4:	4b2d      	ldr	r3, [pc, #180]	; (427c <usbdc_cb_ctl_req+0x2f0>)
    41c6:	7f5a      	ldrb	r2, [r3, #29]
    41c8:	7921      	ldrb	r1, [r4, #4]
    41ca:	7963      	ldrb	r3, [r4, #5]
    41cc:	021b      	lsls	r3, r3, #8
    41ce:	430b      	orrs	r3, r1
    41d0:	411a      	asrs	r2, r3
    41d2:	07d3      	lsls	r3, r2, #31
    41d4:	d400      	bmi.n	41d8 <usbdc_cb_ctl_req+0x24c>
    41d6:	e0ca      	b.n	436e <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    41d8:	4b28      	ldr	r3, [pc, #160]	; (427c <usbdc_cb_ctl_req+0x2f0>)
    41da:	691d      	ldr	r5, [r3, #16]
	return false;
    41dc:	2300      	movs	r3, #0
	while (NULL != func) {
    41de:	2d00      	cmp	r5, #0
    41e0:	d100      	bne.n	41e4 <usbdc_cb_ctl_req+0x258>
    41e2:	e6ed      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    41e4:	0022      	movs	r2, r4
    41e6:	2102      	movs	r1, #2
    41e8:	0028      	movs	r0, r5
    41ea:	686b      	ldr	r3, [r5, #4]
    41ec:	4798      	blx	r3
    41ee:	2800      	cmp	r0, #0
    41f0:	db00      	blt.n	41f4 <usbdc_cb_ctl_req+0x268>
    41f2:	e0c8      	b.n	4386 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    41f4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    41f6:	2d00      	cmp	r5, #0
    41f8:	d1f4      	bne.n	41e4 <usbdc_cb_ctl_req+0x258>
	return false;
    41fa:	2300      	movs	r3, #0
    41fc:	e6e0      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    41fe:	2b00      	cmp	r3, #0
    4200:	d000      	beq.n	4204 <usbdc_cb_ctl_req+0x278>
    4202:	e0cd      	b.n	43a0 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4204:	231f      	movs	r3, #31
    4206:	401a      	ands	r2, r3
    4208:	b2d3      	uxtb	r3, r2
    420a:	2b01      	cmp	r3, #1
    420c:	d800      	bhi.n	4210 <usbdc_cb_ctl_req+0x284>
    420e:	e092      	b.n	4336 <usbdc_cb_ctl_req+0x3aa>
    4210:	2a02      	cmp	r2, #2
    4212:	d100      	bne.n	4216 <usbdc_cb_ctl_req+0x28a>
    4214:	e09f      	b.n	4356 <usbdc_cb_ctl_req+0x3ca>
		return false;
    4216:	2300      	movs	r3, #0
    4218:	e6d2      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    421a:	78a3      	ldrb	r3, [r4, #2]
    421c:	78e2      	ldrb	r2, [r4, #3]
    421e:	0212      	lsls	r2, r2, #8
    4220:	431a      	orrs	r2, r3
    4222:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    4224:	2b02      	cmp	r3, #2
    4226:	d033      	beq.n	4290 <usbdc_cb_ctl_req+0x304>
    4228:	2b03      	cmp	r3, #3
    422a:	d056      	beq.n	42da <usbdc_cb_ctl_req+0x34e>
    422c:	2b01      	cmp	r3, #1
    422e:	d001      	beq.n	4234 <usbdc_cb_ctl_req+0x2a8>
	return false;
    4230:	2300      	movs	r3, #0
    4232:	e6c5      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    4234:	79a2      	ldrb	r2, [r4, #6]
    4236:	79e3      	ldrb	r3, [r4, #7]
    4238:	021b      	lsls	r3, r3, #8
    423a:	4313      	orrs	r3, r2
    423c:	1c1a      	adds	r2, r3, #0
    423e:	2b12      	cmp	r3, #18
    4240:	d900      	bls.n	4244 <usbdc_cb_ctl_req+0x2b8>
    4242:	2212      	movs	r2, #18
    4244:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    4246:	4b0d      	ldr	r3, [pc, #52]	; (427c <usbdc_cb_ctl_req+0x2f0>)
    4248:	681b      	ldr	r3, [r3, #0]
    424a:	6859      	ldr	r1, [r3, #4]
    424c:	6818      	ldr	r0, [r3, #0]
    424e:	2201      	movs	r2, #1
    4250:	4b0c      	ldr	r3, [pc, #48]	; (4284 <usbdc_cb_ctl_req+0x2f8>)
    4252:	4798      	blx	r3
	if (!dev_desc) {
    4254:	2800      	cmp	r0, #0
    4256:	d100      	bne.n	425a <usbdc_cb_ctl_req+0x2ce>
    4258:	e0a4      	b.n	43a4 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    425a:	2300      	movs	r3, #0
    425c:	0022      	movs	r2, r4
    425e:	0001      	movs	r1, r0
    4260:	0028      	movs	r0, r5
    4262:	4c05      	ldr	r4, [pc, #20]	; (4278 <usbdc_cb_ctl_req+0x2ec>)
    4264:	47a0      	blx	r4
    4266:	4243      	negs	r3, r0
    4268:	4143      	adcs	r3, r0
    426a:	b2db      	uxtb	r3, r3
    426c:	e6a8      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
    426e:	46c0      	nop			; (mov r8, r8)
    4270:	00003e15 	.word	0x00003e15
    4274:	00004c3c 	.word	0x00004c3c
    4278:	00003f71 	.word	0x00003f71
    427c:	20000870 	.word	0x20000870
    4280:	00004559 	.word	0x00004559
    4284:	000044dd 	.word	0x000044dd
    4288:	00003dcd 	.word	0x00003dcd
    428c:	00001d0d 	.word	0x00001d0d
	uint16_t length   = req->wLength;
    4290:	79a3      	ldrb	r3, [r4, #6]
    4292:	79e6      	ldrb	r6, [r4, #7]
    4294:	0236      	lsls	r6, r6, #8
    4296:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4298:	4b46      	ldr	r3, [pc, #280]	; (43b4 <usbdc_cb_ctl_req+0x428>)
    429a:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    429c:	681b      	ldr	r3, [r3, #0]
    429e:	3201      	adds	r2, #1
    42a0:	b2d2      	uxtb	r2, r2
    42a2:	6859      	ldr	r1, [r3, #4]
    42a4:	6818      	ldr	r0, [r3, #0]
    42a6:	4b44      	ldr	r3, [pc, #272]	; (43b8 <usbdc_cb_ctl_req+0x42c>)
    42a8:	4798      	blx	r3
    42aa:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    42ac:	d07c      	beq.n	43a8 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    42ae:	78c3      	ldrb	r3, [r0, #3]
    42b0:	021b      	lsls	r3, r3, #8
    42b2:	7884      	ldrb	r4, [r0, #2]
    42b4:	18e4      	adds	r4, r4, r3
    42b6:	b2a4      	uxth	r4, r4
		need_zlp = false;
    42b8:	2300      	movs	r3, #0
	if (length <= total_len) {
    42ba:	42a6      	cmp	r6, r4
    42bc:	d905      	bls.n	42ca <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    42be:	3f01      	subs	r7, #1
    42c0:	403e      	ands	r6, r7
    42c2:	4273      	negs	r3, r6
    42c4:	4173      	adcs	r3, r6
    42c6:	b2db      	uxtb	r3, r3
		length = total_len;
    42c8:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    42ca:	0032      	movs	r2, r6
    42cc:	0028      	movs	r0, r5
    42ce:	4c3b      	ldr	r4, [pc, #236]	; (43bc <usbdc_cb_ctl_req+0x430>)
    42d0:	47a0      	blx	r4
    42d2:	4243      	negs	r3, r0
    42d4:	4143      	adcs	r3, r0
    42d6:	b2db      	uxtb	r3, r3
    42d8:	e672      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    42da:	79a3      	ldrb	r3, [r4, #6]
    42dc:	79e1      	ldrb	r1, [r4, #7]
    42de:	0209      	lsls	r1, r1, #8
    42e0:	4319      	orrs	r1, r3
    42e2:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    42e4:	4b33      	ldr	r3, [pc, #204]	; (43b4 <usbdc_cb_ctl_req+0x428>)
    42e6:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    42e8:	681b      	ldr	r3, [r3, #0]
    42ea:	b2d2      	uxtb	r2, r2
    42ec:	6859      	ldr	r1, [r3, #4]
    42ee:	6818      	ldr	r0, [r3, #0]
    42f0:	4b33      	ldr	r3, [pc, #204]	; (43c0 <usbdc_cb_ctl_req+0x434>)
    42f2:	4798      	blx	r3
    42f4:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    42f6:	d059      	beq.n	43ac <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    42f8:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    42fa:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    42fc:	4294      	cmp	r4, r2
    42fe:	d906      	bls.n	430e <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4300:	1e73      	subs	r3, r6, #1
    4302:	4023      	ands	r3, r4
    4304:	0018      	movs	r0, r3
    4306:	4243      	negs	r3, r0
    4308:	4143      	adcs	r3, r0
    430a:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    430c:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    430e:	0022      	movs	r2, r4
    4310:	0028      	movs	r0, r5
    4312:	4c2a      	ldr	r4, [pc, #168]	; (43bc <usbdc_cb_ctl_req+0x430>)
    4314:	47a0      	blx	r4
    4316:	4243      	negs	r3, r0
    4318:	4143      	adcs	r3, r0
    431a:	b2db      	uxtb	r3, r3
    431c:	e650      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    431e:	4b25      	ldr	r3, [pc, #148]	; (43b4 <usbdc_cb_ctl_req+0x428>)
    4320:	7eda      	ldrb	r2, [r3, #27]
    4322:	6959      	ldr	r1, [r3, #20]
    4324:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    4326:	6959      	ldr	r1, [r3, #20]
    4328:	2300      	movs	r3, #0
    432a:	2201      	movs	r2, #1
    432c:	0028      	movs	r0, r5
    432e:	4c23      	ldr	r4, [pc, #140]	; (43bc <usbdc_cb_ctl_req+0x430>)
    4330:	47a0      	blx	r4
		return true;
    4332:	2301      	movs	r3, #1
    4334:	e644      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		st = 0;
    4336:	2300      	movs	r3, #0
    4338:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    433a:	4c1e      	ldr	r4, [pc, #120]	; (43b4 <usbdc_cb_ctl_req+0x428>)
    433c:	2202      	movs	r2, #2
    433e:	a902      	add	r1, sp, #8
    4340:	6960      	ldr	r0, [r4, #20]
    4342:	4b20      	ldr	r3, [pc, #128]	; (43c4 <usbdc_cb_ctl_req+0x438>)
    4344:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    4346:	6961      	ldr	r1, [r4, #20]
    4348:	2300      	movs	r3, #0
    434a:	2202      	movs	r2, #2
    434c:	0028      	movs	r0, r5
    434e:	4c1b      	ldr	r4, [pc, #108]	; (43bc <usbdc_cb_ctl_req+0x430>)
    4350:	47a0      	blx	r4
	return true;
    4352:	2301      	movs	r3, #1
    4354:	e634      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    4356:	7920      	ldrb	r0, [r4, #4]
    4358:	2102      	movs	r1, #2
    435a:	4b1b      	ldr	r3, [pc, #108]	; (43c8 <usbdc_cb_ctl_req+0x43c>)
    435c:	4798      	blx	r3
		if (st < 0) {
    435e:	2800      	cmp	r0, #0
    4360:	db03      	blt.n	436a <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    4362:	2301      	movs	r3, #1
    4364:	4018      	ands	r0, r3
    4366:	9002      	str	r0, [sp, #8]
    4368:	e7e7      	b.n	433a <usbdc_cb_ctl_req+0x3ae>
			return false;
    436a:	2300      	movs	r3, #0
    436c:	e628      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    436e:	4b11      	ldr	r3, [pc, #68]	; (43b4 <usbdc_cb_ctl_req+0x428>)
    4370:	2200      	movs	r2, #0
    4372:	6959      	ldr	r1, [r3, #20]
    4374:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    4376:	6959      	ldr	r1, [r3, #20]
    4378:	2300      	movs	r3, #0
    437a:	3201      	adds	r2, #1
    437c:	2000      	movs	r0, #0
    437e:	4c0f      	ldr	r4, [pc, #60]	; (43bc <usbdc_cb_ctl_req+0x430>)
    4380:	47a0      	blx	r4
		return true;
    4382:	2301      	movs	r3, #1
    4384:	e61c      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    4386:	4b0b      	ldr	r3, [pc, #44]	; (43b4 <usbdc_cb_ctl_req+0x428>)
    4388:	695a      	ldr	r2, [r3, #20]
    438a:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    438c:	6959      	ldr	r1, [r3, #20]
    438e:	2300      	movs	r3, #0
    4390:	2201      	movs	r2, #1
    4392:	2000      	movs	r0, #0
    4394:	4c09      	ldr	r4, [pc, #36]	; (43bc <usbdc_cb_ctl_req+0x430>)
    4396:	47a0      	blx	r4
			return true;
    4398:	2301      	movs	r3, #1
    439a:	e611      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    439c:	2300      	movs	r3, #0
    439e:	e60f      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    43a0:	2300      	movs	r3, #0
    43a2:	e60d      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    43a4:	2300      	movs	r3, #0
    43a6:	e60b      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    43a8:	2300      	movs	r3, #0
    43aa:	e609      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    43ac:	2300      	movs	r3, #0
    43ae:	e607      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
			return false;
    43b0:	2300      	movs	r3, #0
    43b2:	e605      	b.n	3fc0 <usbdc_cb_ctl_req+0x34>
    43b4:	20000870 	.word	0x20000870
    43b8:	00004559 	.word	0x00004559
    43bc:	00003f71 	.word	0x00003f71
    43c0:	000045c1 	.word	0x000045c1
    43c4:	0000488d 	.word	0x0000488d
    43c8:	00001d0d 	.word	0x00001d0d

000043cc <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    43cc:	b510      	push	{r4, lr}
	switch (type) {
    43ce:	2801      	cmp	r0, #1
    43d0:	d009      	beq.n	43e6 <usbdc_register_handler+0x1a>
    43d2:	2800      	cmp	r0, #0
    43d4:	d002      	beq.n	43dc <usbdc_register_handler+0x10>
    43d6:	2802      	cmp	r0, #2
    43d8:	d00a      	beq.n	43f0 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    43da:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    43dc:	4807      	ldr	r0, [pc, #28]	; (43fc <usbdc_register_handler+0x30>)
    43de:	3004      	adds	r0, #4
    43e0:	4b07      	ldr	r3, [pc, #28]	; (4400 <usbdc_register_handler+0x34>)
    43e2:	4798      	blx	r3
		break;
    43e4:	e7f9      	b.n	43da <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    43e6:	4805      	ldr	r0, [pc, #20]	; (43fc <usbdc_register_handler+0x30>)
    43e8:	3008      	adds	r0, #8
    43ea:	4b05      	ldr	r3, [pc, #20]	; (4400 <usbdc_register_handler+0x34>)
    43ec:	4798      	blx	r3
		break;
    43ee:	e7f4      	b.n	43da <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    43f0:	4802      	ldr	r0, [pc, #8]	; (43fc <usbdc_register_handler+0x30>)
    43f2:	300c      	adds	r0, #12
    43f4:	4b02      	ldr	r3, [pc, #8]	; (4400 <usbdc_register_handler+0x34>)
    43f6:	4798      	blx	r3
}
    43f8:	e7ef      	b.n	43da <usbdc_register_handler+0xe>
    43fa:	46c0      	nop			; (mov r8, r8)
    43fc:	20000870 	.word	0x20000870
    4400:	00004621 	.word	0x00004621

00004404 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    4404:	b570      	push	{r4, r5, r6, lr}
    4406:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    4408:	1e43      	subs	r3, r0, #1
    440a:	4198      	sbcs	r0, r3
    440c:	b2c0      	uxtb	r0, r0
    440e:	4a0c      	ldr	r2, [pc, #48]	; (4440 <usbdc_init+0x3c>)
    4410:	490c      	ldr	r1, [pc, #48]	; (4444 <usbdc_init+0x40>)
    4412:	4b0d      	ldr	r3, [pc, #52]	; (4448 <usbdc_init+0x44>)
    4414:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    4416:	4b0d      	ldr	r3, [pc, #52]	; (444c <usbdc_init+0x48>)
    4418:	4798      	blx	r3
	if (rc < 0) {
    441a:	2800      	cmp	r0, #0
    441c:	db0e      	blt.n	443c <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    441e:	4d0c      	ldr	r5, [pc, #48]	; (4450 <usbdc_init+0x4c>)
    4420:	2220      	movs	r2, #32
    4422:	2100      	movs	r1, #0
    4424:	0028      	movs	r0, r5
    4426:	4b0b      	ldr	r3, [pc, #44]	; (4454 <usbdc_init+0x50>)
    4428:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    442a:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    442c:	490a      	ldr	r1, [pc, #40]	; (4458 <usbdc_init+0x54>)
    442e:	2000      	movs	r0, #0
    4430:	4c0a      	ldr	r4, [pc, #40]	; (445c <usbdc_init+0x58>)
    4432:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    4434:	490a      	ldr	r1, [pc, #40]	; (4460 <usbdc_init+0x5c>)
    4436:	2001      	movs	r0, #1
    4438:	47a0      	blx	r4

	return 0;
    443a:	2000      	movs	r0, #0
}
    443c:	bd70      	pop	{r4, r5, r6, pc}
    443e:	46c0      	nop			; (mov r8, r8)
    4440:	00000355 	.word	0x00000355
    4444:	00004c6c 	.word	0x00004c6c
    4448:	00001dc5 	.word	0x00001dc5
    444c:	00001a71 	.word	0x00001a71
    4450:	20000870 	.word	0x20000870
    4454:	00004911 	.word	0x00004911
    4458:	00003e59 	.word	0x00003e59
    445c:	00001ad5 	.word	0x00001ad5
    4460:	00003f4d 	.word	0x00003f4d

00004464 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    4464:	b510      	push	{r4, lr}
    4466:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    4468:	4802      	ldr	r0, [pc, #8]	; (4474 <usbdc_register_function+0x10>)
    446a:	3010      	adds	r0, #16
    446c:	4b02      	ldr	r3, [pc, #8]	; (4478 <usbdc_register_function+0x14>)
    446e:	4798      	blx	r3
}
    4470:	bd10      	pop	{r4, pc}
    4472:	46c0      	nop			; (mov r8, r8)
    4474:	20000870 	.word	0x20000870
    4478:	00004621 	.word	0x00004621

0000447c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    447c:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    447e:	4b0b      	ldr	r3, [pc, #44]	; (44ac <usbdc_start+0x30>)
    4480:	7e9b      	ldrb	r3, [r3, #26]
    4482:	2b00      	cmp	r3, #0
    4484:	d10c      	bne.n	44a0 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    4486:	2800      	cmp	r0, #0
    4488:	d00d      	beq.n	44a6 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    448a:	4b08      	ldr	r3, [pc, #32]	; (44ac <usbdc_start+0x30>)
    448c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    448e:	6802      	ldr	r2, [r0, #0]
    4490:	79d2      	ldrb	r2, [r2, #7]
    4492:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    4494:	2201      	movs	r2, #1
    4496:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    4498:	4b05      	ldr	r3, [pc, #20]	; (44b0 <usbdc_start+0x34>)
    449a:	4798      	blx	r3
	return ERR_NONE;
    449c:	2000      	movs	r0, #0
}
    449e:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    44a0:	2004      	movs	r0, #4
    44a2:	4240      	negs	r0, r0
    44a4:	e7fb      	b.n	449e <usbdc_start+0x22>
		return ERR_BAD_DATA;
    44a6:	2009      	movs	r0, #9
    44a8:	4240      	negs	r0, r0
    44aa:	e7f8      	b.n	449e <usbdc_start+0x22>
    44ac:	20000870 	.word	0x20000870
    44b0:	00001ae1 	.word	0x00001ae1

000044b4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    44b4:	b510      	push	{r4, lr}
	usb_d_attach();
    44b6:	4b01      	ldr	r3, [pc, #4]	; (44bc <usbdc_attach+0x8>)
    44b8:	4798      	blx	r3
}
    44ba:	bd10      	pop	{r4, pc}
    44bc:	00001aed 	.word	0x00001aed

000044c0 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    44c0:	4b01      	ldr	r3, [pc, #4]	; (44c8 <usbdc_get_ctrl_buffer+0x8>)
    44c2:	6958      	ldr	r0, [r3, #20]
}
    44c4:	4770      	bx	lr
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	20000870 	.word	0x20000870

000044cc <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    44cc:	4b02      	ldr	r3, [pc, #8]	; (44d8 <usbdc_get_state+0xc>)
    44ce:	7e98      	ldrb	r0, [r3, #26]
    44d0:	06c3      	lsls	r3, r0, #27
    44d2:	d500      	bpl.n	44d6 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    44d4:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    44d6:	4770      	bx	lr
    44d8:	20000870 	.word	0x20000870

000044dc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    44dc:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    44de:	4288      	cmp	r0, r1
    44e0:	d211      	bcs.n	4506 <usb_find_desc+0x2a>
	return desc[0];
    44e2:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    44e4:	2b01      	cmp	r3, #1
    44e6:	d910      	bls.n	450a <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    44e8:	7844      	ldrb	r4, [r0, #1]
    44ea:	4294      	cmp	r4, r2
    44ec:	d00a      	beq.n	4504 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    44ee:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    44f0:	4281      	cmp	r1, r0
    44f2:	d906      	bls.n	4502 <usb_find_desc+0x26>
	return desc[0];
    44f4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    44f6:	2b01      	cmp	r3, #1
    44f8:	d909      	bls.n	450e <usb_find_desc+0x32>
	return desc[1];
    44fa:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    44fc:	4294      	cmp	r4, r2
    44fe:	d1f6      	bne.n	44ee <usb_find_desc+0x12>
    4500:	e000      	b.n	4504 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4502:	2000      	movs	r0, #0
}
    4504:	bd10      	pop	{r4, pc}
	return NULL;
    4506:	2000      	movs	r0, #0
    4508:	e7fc      	b.n	4504 <usb_find_desc+0x28>
		_desc_len_check();
    450a:	2000      	movs	r0, #0
    450c:	e7fa      	b.n	4504 <usb_find_desc+0x28>
    450e:	2000      	movs	r0, #0
    4510:	e7f8      	b.n	4504 <usb_find_desc+0x28>

00004512 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4512:	4288      	cmp	r0, r1
    4514:	d215      	bcs.n	4542 <usb_find_ep_desc+0x30>
	return desc[0];
    4516:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4518:	2b01      	cmp	r3, #1
    451a:	d914      	bls.n	4546 <usb_find_ep_desc+0x34>
	return desc[1];
    451c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    451e:	2a04      	cmp	r2, #4
    4520:	d013      	beq.n	454a <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4522:	2a05      	cmp	r2, #5
    4524:	d00c      	beq.n	4540 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    4526:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    4528:	4281      	cmp	r1, r0
    452a:	d908      	bls.n	453e <usb_find_ep_desc+0x2c>
	return desc[0];
    452c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    452e:	2b01      	cmp	r3, #1
    4530:	d90d      	bls.n	454e <usb_find_ep_desc+0x3c>
	return desc[1];
    4532:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4534:	2a04      	cmp	r2, #4
    4536:	d00c      	beq.n	4552 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4538:	2a05      	cmp	r2, #5
    453a:	d1f4      	bne.n	4526 <usb_find_ep_desc+0x14>
    453c:	e000      	b.n	4540 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    453e:	2000      	movs	r0, #0
}
    4540:	4770      	bx	lr
	return NULL;
    4542:	2000      	movs	r0, #0
    4544:	e7fc      	b.n	4540 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    4546:	2000      	movs	r0, #0
    4548:	e7fa      	b.n	4540 <usb_find_ep_desc+0x2e>
	return NULL;
    454a:	2000      	movs	r0, #0
    454c:	e7f8      	b.n	4540 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    454e:	2000      	movs	r0, #0
    4550:	e7f6      	b.n	4540 <usb_find_ep_desc+0x2e>
	return NULL;
    4552:	2000      	movs	r0, #0
    4554:	e7f4      	b.n	4540 <usb_find_ep_desc+0x2e>
	...

00004558 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4558:	b570      	push	{r4, r5, r6, lr}
    455a:	000c      	movs	r4, r1
    455c:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    455e:	2202      	movs	r2, #2
    4560:	4b16      	ldr	r3, [pc, #88]	; (45bc <usb_find_cfg_desc+0x64>)
    4562:	4798      	blx	r3
	if (!desc) {
    4564:	2800      	cmp	r0, #0
    4566:	d01d      	beq.n	45a4 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    4568:	4284      	cmp	r4, r0
    456a:	d91c      	bls.n	45a6 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    456c:	7803      	ldrb	r3, [r0, #0]
    456e:	2b01      	cmp	r3, #1
    4570:	d91b      	bls.n	45aa <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    4572:	7843      	ldrb	r3, [r0, #1]
    4574:	2b02      	cmp	r3, #2
    4576:	d11a      	bne.n	45ae <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    4578:	7943      	ldrb	r3, [r0, #5]
    457a:	42ab      	cmp	r3, r5
    457c:	d012      	beq.n	45a4 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    457e:	78c2      	ldrb	r2, [r0, #3]
    4580:	0212      	lsls	r2, r2, #8
    4582:	7883      	ldrb	r3, [r0, #2]
    4584:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    4586:	b29b      	uxth	r3, r3
    4588:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    458a:	4284      	cmp	r4, r0
    458c:	d909      	bls.n	45a2 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    458e:	7803      	ldrb	r3, [r0, #0]
    4590:	2b01      	cmp	r3, #1
    4592:	d90e      	bls.n	45b2 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    4594:	7843      	ldrb	r3, [r0, #1]
    4596:	2b02      	cmp	r3, #2
    4598:	d10d      	bne.n	45b6 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    459a:	7943      	ldrb	r3, [r0, #5]
    459c:	42ab      	cmp	r3, r5
    459e:	d1ee      	bne.n	457e <usb_find_cfg_desc+0x26>
    45a0:	e000      	b.n	45a4 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    45a2:	2000      	movs	r0, #0
}
    45a4:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    45a6:	2000      	movs	r0, #0
    45a8:	e7fc      	b.n	45a4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    45aa:	2000      	movs	r0, #0
    45ac:	e7fa      	b.n	45a4 <usb_find_cfg_desc+0x4c>
	return NULL;
    45ae:	2000      	movs	r0, #0
    45b0:	e7f8      	b.n	45a4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    45b2:	2000      	movs	r0, #0
    45b4:	e7f6      	b.n	45a4 <usb_find_cfg_desc+0x4c>
	return NULL;
    45b6:	2000      	movs	r0, #0
    45b8:	e7f4      	b.n	45a4 <usb_find_cfg_desc+0x4c>
    45ba:	46c0      	nop			; (mov r8, r8)
    45bc:	000044dd 	.word	0x000044dd

000045c0 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    45c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45c2:	000d      	movs	r5, r1
    45c4:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    45c6:	4288      	cmp	r0, r1
    45c8:	d212      	bcs.n	45f0 <usb_find_str_desc+0x30>
    45ca:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    45cc:	4e0a      	ldr	r6, [pc, #40]	; (45f8 <usb_find_str_desc+0x38>)
    45ce:	2203      	movs	r2, #3
    45d0:	0029      	movs	r1, r5
    45d2:	47b0      	blx	r6
		if (desc) {
    45d4:	2800      	cmp	r0, #0
    45d6:	d00e      	beq.n	45f6 <usb_find_str_desc+0x36>
	return desc[0];
    45d8:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    45da:	2b01      	cmp	r3, #1
    45dc:	d90a      	bls.n	45f4 <usb_find_str_desc+0x34>
			if (i == str_index) {
    45de:	42a7      	cmp	r7, r4
    45e0:	d009      	beq.n	45f6 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    45e2:	3401      	adds	r4, #1
    45e4:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    45e6:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    45e8:	4285      	cmp	r5, r0
    45ea:	d8f0      	bhi.n	45ce <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    45ec:	2000      	movs	r0, #0
    45ee:	e002      	b.n	45f6 <usb_find_str_desc+0x36>
    45f0:	2000      	movs	r0, #0
    45f2:	e000      	b.n	45f6 <usb_find_str_desc+0x36>
			_desc_len_check();
    45f4:	2000      	movs	r0, #0
}
    45f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45f8:	000044dd 	.word	0x000044dd

000045fc <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    45fc:	6803      	ldr	r3, [r0, #0]
    45fe:	2b00      	cmp	r3, #0
    4600:	d00a      	beq.n	4618 <is_list_element+0x1c>
		if (it == element) {
    4602:	428b      	cmp	r3, r1
    4604:	d00a      	beq.n	461c <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    4606:	681b      	ldr	r3, [r3, #0]
    4608:	2b00      	cmp	r3, #0
    460a:	d003      	beq.n	4614 <is_list_element+0x18>
		if (it == element) {
    460c:	4299      	cmp	r1, r3
    460e:	d1fa      	bne.n	4606 <is_list_element+0xa>
			return true;
    4610:	2001      	movs	r0, #1
    4612:	e000      	b.n	4616 <is_list_element+0x1a>
		}
	}

	return false;
    4614:	2000      	movs	r0, #0
}
    4616:	4770      	bx	lr
	return false;
    4618:	2000      	movs	r0, #0
    461a:	e7fc      	b.n	4616 <is_list_element+0x1a>
			return true;
    461c:	2001      	movs	r0, #1
    461e:	e7fa      	b.n	4616 <is_list_element+0x1a>

00004620 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    4620:	b570      	push	{r4, r5, r6, lr}
    4622:	0005      	movs	r5, r0
    4624:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    4626:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    4628:	4b0a      	ldr	r3, [pc, #40]	; (4654 <list_insert_at_end+0x34>)
    462a:	4798      	blx	r3
    462c:	2301      	movs	r3, #1
    462e:	4058      	eors	r0, r3
    4630:	b2c0      	uxtb	r0, r0
    4632:	224f      	movs	r2, #79	; 0x4f
    4634:	4908      	ldr	r1, [pc, #32]	; (4658 <list_insert_at_end+0x38>)
    4636:	4b09      	ldr	r3, [pc, #36]	; (465c <list_insert_at_end+0x3c>)
    4638:	4798      	blx	r3

	if (!list->head) {
    463a:	682b      	ldr	r3, [r5, #0]
    463c:	2b00      	cmp	r3, #0
    463e:	d103      	bne.n	4648 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    4640:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    4642:	6033      	str	r3, [r6, #0]
		return;
    4644:	e005      	b.n	4652 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    4646:	001c      	movs	r4, r3
	while (it->next) {
    4648:	6823      	ldr	r3, [r4, #0]
    464a:	2b00      	cmp	r3, #0
    464c:	d1fb      	bne.n	4646 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    464e:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    4650:	6033      	str	r3, [r6, #0]
}
    4652:	bd70      	pop	{r4, r5, r6, pc}
    4654:	000045fd 	.word	0x000045fd
    4658:	00004c84 	.word	0x00004c84
    465c:	00001dc5 	.word	0x00001dc5

00004660 <__aeabi_atexit>:
    4660:	000b      	movs	r3, r1
    4662:	b510      	push	{r4, lr}
    4664:	0001      	movs	r1, r0
    4666:	0018      	movs	r0, r3
    4668:	f000 f8e4 	bl	4834 <__cxa_atexit>
    466c:	bd10      	pop	{r4, pc}
    466e:	46c0      	nop			; (mov r8, r8)

00004670 <__aeabi_cfrcmple>:
    4670:	4684      	mov	ip, r0
    4672:	1c08      	adds	r0, r1, #0
    4674:	4661      	mov	r1, ip
    4676:	e7ff      	b.n	4678 <__aeabi_cfcmpeq>

00004678 <__aeabi_cfcmpeq>:
    4678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    467a:	f000 f899 	bl	47b0 <__lesf2>
    467e:	2800      	cmp	r0, #0
    4680:	d401      	bmi.n	4686 <__aeabi_cfcmpeq+0xe>
    4682:	2100      	movs	r1, #0
    4684:	42c8      	cmn	r0, r1
    4686:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004688 <__aeabi_fcmpeq>:
    4688:	b510      	push	{r4, lr}
    468a:	f000 f82b 	bl	46e4 <__eqsf2>
    468e:	4240      	negs	r0, r0
    4690:	3001      	adds	r0, #1
    4692:	bd10      	pop	{r4, pc}

00004694 <__aeabi_fcmplt>:
    4694:	b510      	push	{r4, lr}
    4696:	f000 f88b 	bl	47b0 <__lesf2>
    469a:	2800      	cmp	r0, #0
    469c:	db01      	blt.n	46a2 <__aeabi_fcmplt+0xe>
    469e:	2000      	movs	r0, #0
    46a0:	bd10      	pop	{r4, pc}
    46a2:	2001      	movs	r0, #1
    46a4:	bd10      	pop	{r4, pc}
    46a6:	46c0      	nop			; (mov r8, r8)

000046a8 <__aeabi_fcmple>:
    46a8:	b510      	push	{r4, lr}
    46aa:	f000 f881 	bl	47b0 <__lesf2>
    46ae:	2800      	cmp	r0, #0
    46b0:	dd01      	ble.n	46b6 <__aeabi_fcmple+0xe>
    46b2:	2000      	movs	r0, #0
    46b4:	bd10      	pop	{r4, pc}
    46b6:	2001      	movs	r0, #1
    46b8:	bd10      	pop	{r4, pc}
    46ba:	46c0      	nop			; (mov r8, r8)

000046bc <__aeabi_fcmpgt>:
    46bc:	b510      	push	{r4, lr}
    46be:	f000 f837 	bl	4730 <__gesf2>
    46c2:	2800      	cmp	r0, #0
    46c4:	dc01      	bgt.n	46ca <__aeabi_fcmpgt+0xe>
    46c6:	2000      	movs	r0, #0
    46c8:	bd10      	pop	{r4, pc}
    46ca:	2001      	movs	r0, #1
    46cc:	bd10      	pop	{r4, pc}
    46ce:	46c0      	nop			; (mov r8, r8)

000046d0 <__aeabi_fcmpge>:
    46d0:	b510      	push	{r4, lr}
    46d2:	f000 f82d 	bl	4730 <__gesf2>
    46d6:	2800      	cmp	r0, #0
    46d8:	da01      	bge.n	46de <__aeabi_fcmpge+0xe>
    46da:	2000      	movs	r0, #0
    46dc:	bd10      	pop	{r4, pc}
    46de:	2001      	movs	r0, #1
    46e0:	bd10      	pop	{r4, pc}
    46e2:	46c0      	nop			; (mov r8, r8)

000046e4 <__eqsf2>:
    46e4:	b570      	push	{r4, r5, r6, lr}
    46e6:	0042      	lsls	r2, r0, #1
    46e8:	0245      	lsls	r5, r0, #9
    46ea:	024e      	lsls	r6, r1, #9
    46ec:	004c      	lsls	r4, r1, #1
    46ee:	0fc3      	lsrs	r3, r0, #31
    46f0:	0a6d      	lsrs	r5, r5, #9
    46f2:	0e12      	lsrs	r2, r2, #24
    46f4:	0a76      	lsrs	r6, r6, #9
    46f6:	0e24      	lsrs	r4, r4, #24
    46f8:	0fc9      	lsrs	r1, r1, #31
    46fa:	2001      	movs	r0, #1
    46fc:	2aff      	cmp	r2, #255	; 0xff
    46fe:	d006      	beq.n	470e <__eqsf2+0x2a>
    4700:	2cff      	cmp	r4, #255	; 0xff
    4702:	d003      	beq.n	470c <__eqsf2+0x28>
    4704:	42a2      	cmp	r2, r4
    4706:	d101      	bne.n	470c <__eqsf2+0x28>
    4708:	42b5      	cmp	r5, r6
    470a:	d006      	beq.n	471a <__eqsf2+0x36>
    470c:	bd70      	pop	{r4, r5, r6, pc}
    470e:	2d00      	cmp	r5, #0
    4710:	d1fc      	bne.n	470c <__eqsf2+0x28>
    4712:	2cff      	cmp	r4, #255	; 0xff
    4714:	d1fa      	bne.n	470c <__eqsf2+0x28>
    4716:	2e00      	cmp	r6, #0
    4718:	d1f8      	bne.n	470c <__eqsf2+0x28>
    471a:	428b      	cmp	r3, r1
    471c:	d006      	beq.n	472c <__eqsf2+0x48>
    471e:	2001      	movs	r0, #1
    4720:	2a00      	cmp	r2, #0
    4722:	d1f3      	bne.n	470c <__eqsf2+0x28>
    4724:	0028      	movs	r0, r5
    4726:	1e45      	subs	r5, r0, #1
    4728:	41a8      	sbcs	r0, r5
    472a:	e7ef      	b.n	470c <__eqsf2+0x28>
    472c:	2000      	movs	r0, #0
    472e:	e7ed      	b.n	470c <__eqsf2+0x28>

00004730 <__gesf2>:
    4730:	b5f0      	push	{r4, r5, r6, r7, lr}
    4732:	0042      	lsls	r2, r0, #1
    4734:	0245      	lsls	r5, r0, #9
    4736:	024c      	lsls	r4, r1, #9
    4738:	0fc3      	lsrs	r3, r0, #31
    473a:	0048      	lsls	r0, r1, #1
    473c:	0a6d      	lsrs	r5, r5, #9
    473e:	0e12      	lsrs	r2, r2, #24
    4740:	0a64      	lsrs	r4, r4, #9
    4742:	0e00      	lsrs	r0, r0, #24
    4744:	0fc9      	lsrs	r1, r1, #31
    4746:	2aff      	cmp	r2, #255	; 0xff
    4748:	d01e      	beq.n	4788 <__gesf2+0x58>
    474a:	28ff      	cmp	r0, #255	; 0xff
    474c:	d021      	beq.n	4792 <__gesf2+0x62>
    474e:	2a00      	cmp	r2, #0
    4750:	d10a      	bne.n	4768 <__gesf2+0x38>
    4752:	426e      	negs	r6, r5
    4754:	416e      	adcs	r6, r5
    4756:	b2f6      	uxtb	r6, r6
    4758:	2800      	cmp	r0, #0
    475a:	d10f      	bne.n	477c <__gesf2+0x4c>
    475c:	2c00      	cmp	r4, #0
    475e:	d10d      	bne.n	477c <__gesf2+0x4c>
    4760:	2000      	movs	r0, #0
    4762:	2d00      	cmp	r5, #0
    4764:	d009      	beq.n	477a <__gesf2+0x4a>
    4766:	e005      	b.n	4774 <__gesf2+0x44>
    4768:	2800      	cmp	r0, #0
    476a:	d101      	bne.n	4770 <__gesf2+0x40>
    476c:	2c00      	cmp	r4, #0
    476e:	d001      	beq.n	4774 <__gesf2+0x44>
    4770:	428b      	cmp	r3, r1
    4772:	d011      	beq.n	4798 <__gesf2+0x68>
    4774:	2101      	movs	r1, #1
    4776:	4258      	negs	r0, r3
    4778:	4308      	orrs	r0, r1
    477a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    477c:	2e00      	cmp	r6, #0
    477e:	d0f7      	beq.n	4770 <__gesf2+0x40>
    4780:	2001      	movs	r0, #1
    4782:	3901      	subs	r1, #1
    4784:	4308      	orrs	r0, r1
    4786:	e7f8      	b.n	477a <__gesf2+0x4a>
    4788:	2d00      	cmp	r5, #0
    478a:	d0de      	beq.n	474a <__gesf2+0x1a>
    478c:	2002      	movs	r0, #2
    478e:	4240      	negs	r0, r0
    4790:	e7f3      	b.n	477a <__gesf2+0x4a>
    4792:	2c00      	cmp	r4, #0
    4794:	d0db      	beq.n	474e <__gesf2+0x1e>
    4796:	e7f9      	b.n	478c <__gesf2+0x5c>
    4798:	4282      	cmp	r2, r0
    479a:	dceb      	bgt.n	4774 <__gesf2+0x44>
    479c:	db04      	blt.n	47a8 <__gesf2+0x78>
    479e:	42a5      	cmp	r5, r4
    47a0:	d8e8      	bhi.n	4774 <__gesf2+0x44>
    47a2:	2000      	movs	r0, #0
    47a4:	42a5      	cmp	r5, r4
    47a6:	d2e8      	bcs.n	477a <__gesf2+0x4a>
    47a8:	2101      	movs	r1, #1
    47aa:	1e58      	subs	r0, r3, #1
    47ac:	4308      	orrs	r0, r1
    47ae:	e7e4      	b.n	477a <__gesf2+0x4a>

000047b0 <__lesf2>:
    47b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47b2:	0042      	lsls	r2, r0, #1
    47b4:	024d      	lsls	r5, r1, #9
    47b6:	004c      	lsls	r4, r1, #1
    47b8:	0246      	lsls	r6, r0, #9
    47ba:	0a76      	lsrs	r6, r6, #9
    47bc:	0e12      	lsrs	r2, r2, #24
    47be:	0fc3      	lsrs	r3, r0, #31
    47c0:	0a6d      	lsrs	r5, r5, #9
    47c2:	0e24      	lsrs	r4, r4, #24
    47c4:	0fc9      	lsrs	r1, r1, #31
    47c6:	2aff      	cmp	r2, #255	; 0xff
    47c8:	d016      	beq.n	47f8 <__lesf2+0x48>
    47ca:	2cff      	cmp	r4, #255	; 0xff
    47cc:	d018      	beq.n	4800 <__lesf2+0x50>
    47ce:	2a00      	cmp	r2, #0
    47d0:	d10a      	bne.n	47e8 <__lesf2+0x38>
    47d2:	4270      	negs	r0, r6
    47d4:	4170      	adcs	r0, r6
    47d6:	b2c0      	uxtb	r0, r0
    47d8:	2c00      	cmp	r4, #0
    47da:	d015      	beq.n	4808 <__lesf2+0x58>
    47dc:	2800      	cmp	r0, #0
    47de:	d005      	beq.n	47ec <__lesf2+0x3c>
    47e0:	2001      	movs	r0, #1
    47e2:	3901      	subs	r1, #1
    47e4:	4308      	orrs	r0, r1
    47e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47e8:	2c00      	cmp	r4, #0
    47ea:	d013      	beq.n	4814 <__lesf2+0x64>
    47ec:	4299      	cmp	r1, r3
    47ee:	d014      	beq.n	481a <__lesf2+0x6a>
    47f0:	2001      	movs	r0, #1
    47f2:	425b      	negs	r3, r3
    47f4:	4318      	orrs	r0, r3
    47f6:	e7f6      	b.n	47e6 <__lesf2+0x36>
    47f8:	2002      	movs	r0, #2
    47fa:	2e00      	cmp	r6, #0
    47fc:	d1f3      	bne.n	47e6 <__lesf2+0x36>
    47fe:	e7e4      	b.n	47ca <__lesf2+0x1a>
    4800:	2002      	movs	r0, #2
    4802:	2d00      	cmp	r5, #0
    4804:	d1ef      	bne.n	47e6 <__lesf2+0x36>
    4806:	e7e2      	b.n	47ce <__lesf2+0x1e>
    4808:	2d00      	cmp	r5, #0
    480a:	d1e7      	bne.n	47dc <__lesf2+0x2c>
    480c:	2000      	movs	r0, #0
    480e:	2e00      	cmp	r6, #0
    4810:	d0e9      	beq.n	47e6 <__lesf2+0x36>
    4812:	e7ed      	b.n	47f0 <__lesf2+0x40>
    4814:	2d00      	cmp	r5, #0
    4816:	d1e9      	bne.n	47ec <__lesf2+0x3c>
    4818:	e7ea      	b.n	47f0 <__lesf2+0x40>
    481a:	42a2      	cmp	r2, r4
    481c:	dc06      	bgt.n	482c <__lesf2+0x7c>
    481e:	dbdf      	blt.n	47e0 <__lesf2+0x30>
    4820:	42ae      	cmp	r6, r5
    4822:	d803      	bhi.n	482c <__lesf2+0x7c>
    4824:	2000      	movs	r0, #0
    4826:	42ae      	cmp	r6, r5
    4828:	d3da      	bcc.n	47e0 <__lesf2+0x30>
    482a:	e7dc      	b.n	47e6 <__lesf2+0x36>
    482c:	2001      	movs	r0, #1
    482e:	4249      	negs	r1, r1
    4830:	4308      	orrs	r0, r1
    4832:	e7d8      	b.n	47e6 <__lesf2+0x36>

00004834 <__cxa_atexit>:
    4834:	b510      	push	{r4, lr}
    4836:	0013      	movs	r3, r2
    4838:	000a      	movs	r2, r1
    483a:	0001      	movs	r1, r0
    483c:	2002      	movs	r0, #2
    483e:	f000 f8b1 	bl	49a4 <__register_exitproc>
    4842:	bd10      	pop	{r4, pc}

00004844 <__libc_init_array>:
    4844:	b570      	push	{r4, r5, r6, lr}
    4846:	4e0d      	ldr	r6, [pc, #52]	; (487c <__libc_init_array+0x38>)
    4848:	4d0d      	ldr	r5, [pc, #52]	; (4880 <__libc_init_array+0x3c>)
    484a:	2400      	movs	r4, #0
    484c:	1bad      	subs	r5, r5, r6
    484e:	10ad      	asrs	r5, r5, #2
    4850:	d005      	beq.n	485e <__libc_init_array+0x1a>
    4852:	00a3      	lsls	r3, r4, #2
    4854:	58f3      	ldr	r3, [r6, r3]
    4856:	3401      	adds	r4, #1
    4858:	4798      	blx	r3
    485a:	42a5      	cmp	r5, r4
    485c:	d1f9      	bne.n	4852 <__libc_init_array+0xe>
    485e:	f000 fa23 	bl	4ca8 <_init>
    4862:	4e08      	ldr	r6, [pc, #32]	; (4884 <__libc_init_array+0x40>)
    4864:	4d08      	ldr	r5, [pc, #32]	; (4888 <__libc_init_array+0x44>)
    4866:	2400      	movs	r4, #0
    4868:	1bad      	subs	r5, r5, r6
    486a:	10ad      	asrs	r5, r5, #2
    486c:	d005      	beq.n	487a <__libc_init_array+0x36>
    486e:	00a3      	lsls	r3, r4, #2
    4870:	58f3      	ldr	r3, [r6, r3]
    4872:	3401      	adds	r4, #1
    4874:	4798      	blx	r3
    4876:	42a5      	cmp	r5, r4
    4878:	d1f9      	bne.n	486e <__libc_init_array+0x2a>
    487a:	bd70      	pop	{r4, r5, r6, pc}
    487c:	00004cb4 	.word	0x00004cb4
    4880:	00004cb4 	.word	0x00004cb4
    4884:	00004cb4 	.word	0x00004cb4
    4888:	00004cc0 	.word	0x00004cc0

0000488c <memcpy>:
    488c:	b5f0      	push	{r4, r5, r6, r7, lr}
    488e:	0005      	movs	r5, r0
    4890:	2a0f      	cmp	r2, #15
    4892:	d92f      	bls.n	48f4 <memcpy+0x68>
    4894:	000b      	movs	r3, r1
    4896:	4303      	orrs	r3, r0
    4898:	079b      	lsls	r3, r3, #30
    489a:	d134      	bne.n	4906 <memcpy+0x7a>
    489c:	0016      	movs	r6, r2
    489e:	000c      	movs	r4, r1
    48a0:	0003      	movs	r3, r0
    48a2:	3e10      	subs	r6, #16
    48a4:	0935      	lsrs	r5, r6, #4
    48a6:	3501      	adds	r5, #1
    48a8:	012d      	lsls	r5, r5, #4
    48aa:	1945      	adds	r5, r0, r5
    48ac:	6827      	ldr	r7, [r4, #0]
    48ae:	601f      	str	r7, [r3, #0]
    48b0:	6867      	ldr	r7, [r4, #4]
    48b2:	605f      	str	r7, [r3, #4]
    48b4:	68a7      	ldr	r7, [r4, #8]
    48b6:	609f      	str	r7, [r3, #8]
    48b8:	68e7      	ldr	r7, [r4, #12]
    48ba:	3410      	adds	r4, #16
    48bc:	60df      	str	r7, [r3, #12]
    48be:	3310      	adds	r3, #16
    48c0:	429d      	cmp	r5, r3
    48c2:	d1f3      	bne.n	48ac <memcpy+0x20>
    48c4:	230f      	movs	r3, #15
    48c6:	439e      	bics	r6, r3
    48c8:	3610      	adds	r6, #16
    48ca:	1985      	adds	r5, r0, r6
    48cc:	1989      	adds	r1, r1, r6
    48ce:	4013      	ands	r3, r2
    48d0:	2b03      	cmp	r3, #3
    48d2:	d91a      	bls.n	490a <memcpy+0x7e>
    48d4:	1f1e      	subs	r6, r3, #4
    48d6:	2300      	movs	r3, #0
    48d8:	08b4      	lsrs	r4, r6, #2
    48da:	3401      	adds	r4, #1
    48dc:	00a4      	lsls	r4, r4, #2
    48de:	58cf      	ldr	r7, [r1, r3]
    48e0:	50ef      	str	r7, [r5, r3]
    48e2:	3304      	adds	r3, #4
    48e4:	42a3      	cmp	r3, r4
    48e6:	d1fa      	bne.n	48de <memcpy+0x52>
    48e8:	2403      	movs	r4, #3
    48ea:	43a6      	bics	r6, r4
    48ec:	1d33      	adds	r3, r6, #4
    48ee:	4022      	ands	r2, r4
    48f0:	18c9      	adds	r1, r1, r3
    48f2:	18ed      	adds	r5, r5, r3
    48f4:	2a00      	cmp	r2, #0
    48f6:	d005      	beq.n	4904 <memcpy+0x78>
    48f8:	2300      	movs	r3, #0
    48fa:	5ccc      	ldrb	r4, [r1, r3]
    48fc:	54ec      	strb	r4, [r5, r3]
    48fe:	3301      	adds	r3, #1
    4900:	4293      	cmp	r3, r2
    4902:	d1fa      	bne.n	48fa <memcpy+0x6e>
    4904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4906:	0005      	movs	r5, r0
    4908:	e7f6      	b.n	48f8 <memcpy+0x6c>
    490a:	001a      	movs	r2, r3
    490c:	e7f2      	b.n	48f4 <memcpy+0x68>
    490e:	46c0      	nop			; (mov r8, r8)

00004910 <memset>:
    4910:	b5f0      	push	{r4, r5, r6, r7, lr}
    4912:	0783      	lsls	r3, r0, #30
    4914:	d043      	beq.n	499e <memset+0x8e>
    4916:	1e54      	subs	r4, r2, #1
    4918:	2a00      	cmp	r2, #0
    491a:	d03f      	beq.n	499c <memset+0x8c>
    491c:	b2ce      	uxtb	r6, r1
    491e:	0002      	movs	r2, r0
    4920:	2503      	movs	r5, #3
    4922:	e002      	b.n	492a <memset+0x1a>
    4924:	001a      	movs	r2, r3
    4926:	3c01      	subs	r4, #1
    4928:	d338      	bcc.n	499c <memset+0x8c>
    492a:	1c53      	adds	r3, r2, #1
    492c:	7016      	strb	r6, [r2, #0]
    492e:	422b      	tst	r3, r5
    4930:	d1f8      	bne.n	4924 <memset+0x14>
    4932:	2c03      	cmp	r4, #3
    4934:	d92a      	bls.n	498c <memset+0x7c>
    4936:	22ff      	movs	r2, #255	; 0xff
    4938:	400a      	ands	r2, r1
    493a:	0215      	lsls	r5, r2, #8
    493c:	4315      	orrs	r5, r2
    493e:	042a      	lsls	r2, r5, #16
    4940:	4315      	orrs	r5, r2
    4942:	2c0f      	cmp	r4, #15
    4944:	d914      	bls.n	4970 <memset+0x60>
    4946:	0027      	movs	r7, r4
    4948:	001a      	movs	r2, r3
    494a:	3f10      	subs	r7, #16
    494c:	093e      	lsrs	r6, r7, #4
    494e:	3601      	adds	r6, #1
    4950:	0136      	lsls	r6, r6, #4
    4952:	199e      	adds	r6, r3, r6
    4954:	6015      	str	r5, [r2, #0]
    4956:	6055      	str	r5, [r2, #4]
    4958:	6095      	str	r5, [r2, #8]
    495a:	60d5      	str	r5, [r2, #12]
    495c:	3210      	adds	r2, #16
    495e:	4296      	cmp	r6, r2
    4960:	d1f8      	bne.n	4954 <memset+0x44>
    4962:	220f      	movs	r2, #15
    4964:	4397      	bics	r7, r2
    4966:	3710      	adds	r7, #16
    4968:	19db      	adds	r3, r3, r7
    496a:	4014      	ands	r4, r2
    496c:	2c03      	cmp	r4, #3
    496e:	d90d      	bls.n	498c <memset+0x7c>
    4970:	001a      	movs	r2, r3
    4972:	1f27      	subs	r7, r4, #4
    4974:	08be      	lsrs	r6, r7, #2
    4976:	3601      	adds	r6, #1
    4978:	00b6      	lsls	r6, r6, #2
    497a:	199e      	adds	r6, r3, r6
    497c:	c220      	stmia	r2!, {r5}
    497e:	42b2      	cmp	r2, r6
    4980:	d1fc      	bne.n	497c <memset+0x6c>
    4982:	2203      	movs	r2, #3
    4984:	4397      	bics	r7, r2
    4986:	3704      	adds	r7, #4
    4988:	19db      	adds	r3, r3, r7
    498a:	4014      	ands	r4, r2
    498c:	2c00      	cmp	r4, #0
    498e:	d005      	beq.n	499c <memset+0x8c>
    4990:	b2c9      	uxtb	r1, r1
    4992:	191c      	adds	r4, r3, r4
    4994:	7019      	strb	r1, [r3, #0]
    4996:	3301      	adds	r3, #1
    4998:	429c      	cmp	r4, r3
    499a:	d1fb      	bne.n	4994 <memset+0x84>
    499c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    499e:	0014      	movs	r4, r2
    49a0:	0003      	movs	r3, r0
    49a2:	e7c6      	b.n	4932 <memset+0x22>

000049a4 <__register_exitproc>:
    49a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49a6:	464e      	mov	r6, r9
    49a8:	4645      	mov	r5, r8
    49aa:	46de      	mov	lr, fp
    49ac:	4657      	mov	r7, sl
    49ae:	b5e0      	push	{r5, r6, r7, lr}
    49b0:	4d36      	ldr	r5, [pc, #216]	; (4a8c <__register_exitproc+0xe8>)
    49b2:	b083      	sub	sp, #12
    49b4:	0006      	movs	r6, r0
    49b6:	6828      	ldr	r0, [r5, #0]
    49b8:	4698      	mov	r8, r3
    49ba:	000f      	movs	r7, r1
    49bc:	4691      	mov	r9, r2
    49be:	f000 f899 	bl	4af4 <__retarget_lock_acquire_recursive>
    49c2:	4b33      	ldr	r3, [pc, #204]	; (4a90 <__register_exitproc+0xec>)
    49c4:	681c      	ldr	r4, [r3, #0]
    49c6:	23a4      	movs	r3, #164	; 0xa4
    49c8:	005b      	lsls	r3, r3, #1
    49ca:	58e0      	ldr	r0, [r4, r3]
    49cc:	2800      	cmp	r0, #0
    49ce:	d052      	beq.n	4a76 <__register_exitproc+0xd2>
    49d0:	6843      	ldr	r3, [r0, #4]
    49d2:	2b1f      	cmp	r3, #31
    49d4:	dc13      	bgt.n	49fe <__register_exitproc+0x5a>
    49d6:	1c5a      	adds	r2, r3, #1
    49d8:	9201      	str	r2, [sp, #4]
    49da:	2e00      	cmp	r6, #0
    49dc:	d128      	bne.n	4a30 <__register_exitproc+0x8c>
    49de:	9a01      	ldr	r2, [sp, #4]
    49e0:	3302      	adds	r3, #2
    49e2:	009b      	lsls	r3, r3, #2
    49e4:	6042      	str	r2, [r0, #4]
    49e6:	501f      	str	r7, [r3, r0]
    49e8:	6828      	ldr	r0, [r5, #0]
    49ea:	f000 f885 	bl	4af8 <__retarget_lock_release_recursive>
    49ee:	2000      	movs	r0, #0
    49f0:	b003      	add	sp, #12
    49f2:	bc3c      	pop	{r2, r3, r4, r5}
    49f4:	4690      	mov	r8, r2
    49f6:	4699      	mov	r9, r3
    49f8:	46a2      	mov	sl, r4
    49fa:	46ab      	mov	fp, r5
    49fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49fe:	4b25      	ldr	r3, [pc, #148]	; (4a94 <__register_exitproc+0xf0>)
    4a00:	2b00      	cmp	r3, #0
    4a02:	d03d      	beq.n	4a80 <__register_exitproc+0xdc>
    4a04:	20c8      	movs	r0, #200	; 0xc8
    4a06:	0040      	lsls	r0, r0, #1
    4a08:	e000      	b.n	4a0c <__register_exitproc+0x68>
    4a0a:	bf00      	nop
    4a0c:	2800      	cmp	r0, #0
    4a0e:	d037      	beq.n	4a80 <__register_exitproc+0xdc>
    4a10:	22a4      	movs	r2, #164	; 0xa4
    4a12:	2300      	movs	r3, #0
    4a14:	0052      	lsls	r2, r2, #1
    4a16:	58a1      	ldr	r1, [r4, r2]
    4a18:	6043      	str	r3, [r0, #4]
    4a1a:	6001      	str	r1, [r0, #0]
    4a1c:	50a0      	str	r0, [r4, r2]
    4a1e:	3240      	adds	r2, #64	; 0x40
    4a20:	5083      	str	r3, [r0, r2]
    4a22:	3204      	adds	r2, #4
    4a24:	5083      	str	r3, [r0, r2]
    4a26:	3301      	adds	r3, #1
    4a28:	9301      	str	r3, [sp, #4]
    4a2a:	2300      	movs	r3, #0
    4a2c:	2e00      	cmp	r6, #0
    4a2e:	d0d6      	beq.n	49de <__register_exitproc+0x3a>
    4a30:	009a      	lsls	r2, r3, #2
    4a32:	4692      	mov	sl, r2
    4a34:	4482      	add	sl, r0
    4a36:	464a      	mov	r2, r9
    4a38:	2188      	movs	r1, #136	; 0x88
    4a3a:	4654      	mov	r4, sl
    4a3c:	5062      	str	r2, [r4, r1]
    4a3e:	22c4      	movs	r2, #196	; 0xc4
    4a40:	0052      	lsls	r2, r2, #1
    4a42:	4691      	mov	r9, r2
    4a44:	4481      	add	r9, r0
    4a46:	464a      	mov	r2, r9
    4a48:	3987      	subs	r1, #135	; 0x87
    4a4a:	4099      	lsls	r1, r3
    4a4c:	6812      	ldr	r2, [r2, #0]
    4a4e:	468b      	mov	fp, r1
    4a50:	430a      	orrs	r2, r1
    4a52:	4694      	mov	ip, r2
    4a54:	464a      	mov	r2, r9
    4a56:	4661      	mov	r1, ip
    4a58:	6011      	str	r1, [r2, #0]
    4a5a:	2284      	movs	r2, #132	; 0x84
    4a5c:	4641      	mov	r1, r8
    4a5e:	0052      	lsls	r2, r2, #1
    4a60:	50a1      	str	r1, [r4, r2]
    4a62:	2e02      	cmp	r6, #2
    4a64:	d1bb      	bne.n	49de <__register_exitproc+0x3a>
    4a66:	0002      	movs	r2, r0
    4a68:	465c      	mov	r4, fp
    4a6a:	328d      	adds	r2, #141	; 0x8d
    4a6c:	32ff      	adds	r2, #255	; 0xff
    4a6e:	6811      	ldr	r1, [r2, #0]
    4a70:	430c      	orrs	r4, r1
    4a72:	6014      	str	r4, [r2, #0]
    4a74:	e7b3      	b.n	49de <__register_exitproc+0x3a>
    4a76:	0020      	movs	r0, r4
    4a78:	304d      	adds	r0, #77	; 0x4d
    4a7a:	30ff      	adds	r0, #255	; 0xff
    4a7c:	50e0      	str	r0, [r4, r3]
    4a7e:	e7a7      	b.n	49d0 <__register_exitproc+0x2c>
    4a80:	6828      	ldr	r0, [r5, #0]
    4a82:	f000 f839 	bl	4af8 <__retarget_lock_release_recursive>
    4a86:	2001      	movs	r0, #1
    4a88:	4240      	negs	r0, r0
    4a8a:	e7b1      	b.n	49f0 <__register_exitproc+0x4c>
    4a8c:	200004b0 	.word	0x200004b0
    4a90:	00004ca4 	.word	0x00004ca4
    4a94:	00000000 	.word	0x00000000

00004a98 <register_fini>:
    4a98:	4b03      	ldr	r3, [pc, #12]	; (4aa8 <register_fini+0x10>)
    4a9a:	b510      	push	{r4, lr}
    4a9c:	2b00      	cmp	r3, #0
    4a9e:	d002      	beq.n	4aa6 <register_fini+0xe>
    4aa0:	4802      	ldr	r0, [pc, #8]	; (4aac <register_fini+0x14>)
    4aa2:	f000 f805 	bl	4ab0 <atexit>
    4aa6:	bd10      	pop	{r4, pc}
    4aa8:	00000000 	.word	0x00000000
    4aac:	00004ac1 	.word	0x00004ac1

00004ab0 <atexit>:
    4ab0:	b510      	push	{r4, lr}
    4ab2:	0001      	movs	r1, r0
    4ab4:	2300      	movs	r3, #0
    4ab6:	2200      	movs	r2, #0
    4ab8:	2000      	movs	r0, #0
    4aba:	f7ff ff73 	bl	49a4 <__register_exitproc>
    4abe:	bd10      	pop	{r4, pc}

00004ac0 <__libc_fini_array>:
    4ac0:	b570      	push	{r4, r5, r6, lr}
    4ac2:	4b09      	ldr	r3, [pc, #36]	; (4ae8 <__libc_fini_array+0x28>)
    4ac4:	4c09      	ldr	r4, [pc, #36]	; (4aec <__libc_fini_array+0x2c>)
    4ac6:	1ae4      	subs	r4, r4, r3
    4ac8:	10a4      	asrs	r4, r4, #2
    4aca:	d009      	beq.n	4ae0 <__libc_fini_array+0x20>
    4acc:	4a08      	ldr	r2, [pc, #32]	; (4af0 <__libc_fini_array+0x30>)
    4ace:	18a5      	adds	r5, r4, r2
    4ad0:	00ad      	lsls	r5, r5, #2
    4ad2:	18ed      	adds	r5, r5, r3
    4ad4:	682b      	ldr	r3, [r5, #0]
    4ad6:	3c01      	subs	r4, #1
    4ad8:	4798      	blx	r3
    4ada:	3d04      	subs	r5, #4
    4adc:	2c00      	cmp	r4, #0
    4ade:	d1f9      	bne.n	4ad4 <__libc_fini_array+0x14>
    4ae0:	f000 f8ee 	bl	4cc0 <_fini>
    4ae4:	bd70      	pop	{r4, r5, r6, pc}
    4ae6:	46c0      	nop			; (mov r8, r8)
    4ae8:	00004ccc 	.word	0x00004ccc
    4aec:	00004cd0 	.word	0x00004cd0
    4af0:	3fffffff 	.word	0x3fffffff

00004af4 <__retarget_lock_acquire_recursive>:
    4af4:	4770      	bx	lr
    4af6:	46c0      	nop			; (mov r8, r8)

00004af8 <__retarget_lock_release_recursive>:
    4af8:	4770      	bx	lr
    4afa:	46c0      	nop			; (mov r8, r8)

00004afc <defaultParameters>:
    4afc:	02ee 02bc 07d0 02ee 0320 07d0 e000 450d     ........ ......E
    4b0c:	de6a 400d 0000 4140 0000 429a 0000 40c0     j..@..@A...B...@
    4b1c:	0000 4140 0000 42a4 0000 430c 0000 4302     ..@A...B...C...C
    4b2c:	d289 3e7e 8000 4404 8000 4404 0000 41a0     ..~>...D...D...A
    4b3c:	0000 41f0 0000 3f80 4000 451c c000 458f     ...A...?.@.E...E
    4b4c:	1f40 0000 1f40 0000 1f40 0000 1f40 0000     @...@...@...@...
    4b5c:	1388 0000 1388 0000 0064 0000 0064 0000     ........d...d...
    4b6c:	0000 4100 0000 428c 0000 0000               ...A...B....

00004b78 <defaultPreferences>:
    4b78:	00fa 0000 0032 0000 2e2e 682f 6c61 732f     ....2...../hal/s
    4b88:	6372 682f 6c61 695f 2e6f 0063 2e2e 682f     rc/hal_io.c.../h
    4b98:	6c61 732f 6372 682f 6c61 735f 6970 6d5f     al/src/hal_spi_m
    4ba8:	615f 7973 636e 632e 0000 0000 2e2e 682f     _async.c....../h
    4bb8:	6c61 732f 6372 682f 6c61 755f 6173 7472     al/src/hal_usart
    4bc8:	615f 7973 636e 632e 0000 0000 2e2e 682f     _async.c....../h
    4bd8:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    4be8:	736c 725f 6e69 6267 6675 6566 2e72 0063     ls_ringbuffer.c.
    4bf8:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    4c08:	5f6c 6573 6372 6d6f 632e 0000 2000 0000     l_sercom.c... ..

00004c18 <_usb_ep_cfgs>:
    4c18:	078c 2000 0000 0000 0040 0000 074c 2000     ... ....@...L.. 
    4c28:	0000 0000 0040 0000 070c 2000 0000 0000     ....@...... ....
    4c38:	0040 0000 439c 0000 4084 0000 439c 0000     @....C...@...C..
    4c48:	40b6 0000 439c 0000 3fda 0000 439c 0000     .@...C...?...C..
    4c58:	439c 0000 439c 0000 3fee 0000 439c 0000     .C...C...?...C..
    4c68:	40ea 0000 2e2e 752f 6273 642f 7665 6369     .@..../usb/devic
    4c78:	2f65 7375 6462 2e63 0063 0000 2e2e 682f     e/usbdc.c...../h
    4c88:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    4c98:	736c 6c5f 7369 2e74 0063 0000               ls_list.c...

00004ca4 <_global_impure_ptr>:
    4ca4:	0088 2000                                   ... 

00004ca8 <_init>:
    4ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4caa:	46c0      	nop			; (mov r8, r8)
    4cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4cae:	bc08      	pop	{r3}
    4cb0:	469e      	mov	lr, r3
    4cb2:	4770      	bx	lr

00004cb4 <__init_array_start>:
    4cb4:	00004a99 	.word	0x00004a99

00004cb8 <__frame_dummy_init_array_entry>:
    4cb8:	000000dd 00000a85                       ........

00004cc0 <_fini>:
    4cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cc2:	46c0      	nop			; (mov r8, r8)
    4cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4cc6:	bc08      	pop	{r3}
    4cc8:	469e      	mov	lr, r3
    4cca:	4770      	bx	lr

00004ccc <__fini_array_start>:
    4ccc:	000000b5 	.word	0x000000b5
