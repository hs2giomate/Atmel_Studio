
SingleFlapperValveP0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001111c  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001111c  0001111c  0002111c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  00011124  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003060c  2**0
                  CONTENTS
  5 .bss          00007450  2000060c  00011730  0003060c  2**2
                  ALLOC
  6 .stack        00010004  20007a5c  00018b80  0003060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0007a531  00000000  00000000  00030693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a53c  00000000  00000000  000aabc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001dc36  00000000  00000000  000b5100  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003440  00000000  00000000  000d2d36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000030a8  00000000  00000000  000d6176  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00050382  00000000  00000000  000d921e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003d53f  00000000  00000000  001295a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013f1d3  00000000  00000000  00166adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000da94  00000000  00000000  002a5cb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 7a 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     `z. ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	7d 6f 00 00 99 5d 00 00 a9 5d 00 00 55 03 00 00     }o...]...]..U...
      7c:	b9 5d 00 00 c9 5d 00 00 d9 5d 00 00 e9 5d 00 00     .]...]...]...]..
      8c:	f9 5d 00 00 09 5e 00 00 19 5e 00 00 55 03 00 00     .]...^...^..U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     104:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     114:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     154:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     164:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     174:	55 03 00 00 55 03 00 00 dd 51 00 00 6d be 00 00     U...U....Q..m...
     184:	7d be 00 00 8d be 00 00 9d be 00 00 55 03 00 00     }...........U...
     194:	89 88 00 00 55 03 00 00 55 03 00 00 55 03 00 00     ....U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 a5 88 00 00     U...U...U.......
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 69 95 00 00 55 03 00 00     U...U...i...U...
     1f4:	85 95 00 00 55 03 00 00 a1 95 00 00 bd 95 00 00     ....U...........
     204:	d9 95 00 00 f5 95 00 00 55 03 00 00 55 03 00 00     ........U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	00011124 	.word	0x00011124

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00011124 	.word	0x00011124
     2c4:	20000610 	.word	0x20000610
     2c8:	00011124 	.word	0x00011124
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	00011124 	.word	0x00011124
     334:	20000000 	.word	0x20000000
     338:	2000060c 	.word	0x2000060c
     33c:	2000060c 	.word	0x2000060c
     340:	20007a5c 	.word	0x20007a5c
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	00010779 	.word	0x00010779
     350:	00001c05 	.word	0x00001c05

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>

0000035a <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
     35a:	b480      	push	{r7}
     35c:	b083      	sub	sp, #12
     35e:	af00      	add	r7, sp, #0
     360:	6078      	str	r0, [r7, #4]
     362:	460b      	mov	r3, r1
     364:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     366:	78fb      	ldrb	r3, [r7, #3]
     368:	687a      	ldr	r2, [r7, #4]
     36a:	01db      	lsls	r3, r3, #7
     36c:	4413      	add	r3, r2
     36e:	681b      	ldr	r3, [r3, #0]
}
     370:	4618      	mov	r0, r3
     372:	370c      	adds	r7, #12
     374:	46bd      	mov	sp, r7
     376:	bc80      	pop	{r7}
     378:	4770      	bx	lr

0000037a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     37a:	b480      	push	{r7}
     37c:	b085      	sub	sp, #20
     37e:	af00      	add	r7, sp, #0
     380:	60f8      	str	r0, [r7, #12]
     382:	460b      	mov	r3, r1
     384:	607a      	str	r2, [r7, #4]
     386:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     388:	7afb      	ldrb	r3, [r7, #11]
     38a:	68fa      	ldr	r2, [r7, #12]
     38c:	01db      	lsls	r3, r3, #7
     38e:	4413      	add	r3, r2
     390:	3318      	adds	r3, #24
     392:	687a      	ldr	r2, [r7, #4]
     394:	601a      	str	r2, [r3, #0]
}
     396:	bf00      	nop
     398:	3714      	adds	r7, #20
     39a:	46bd      	mov	sp, r7
     39c:	bc80      	pop	{r7}
     39e:	4770      	bx	lr

000003a0 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
     3a0:	b480      	push	{r7}
     3a2:	b083      	sub	sp, #12
     3a4:	af00      	add	r7, sp, #0
     3a6:	6078      	str	r0, [r7, #4]
     3a8:	460b      	mov	r3, r1
     3aa:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     3ac:	78fb      	ldrb	r3, [r7, #3]
     3ae:	687a      	ldr	r2, [r7, #4]
     3b0:	01db      	lsls	r3, r3, #7
     3b2:	4413      	add	r3, r2
     3b4:	3310      	adds	r3, #16
     3b6:	681b      	ldr	r3, [r3, #0]
}
     3b8:	4618      	mov	r0, r3
     3ba:	370c      	adds	r7, #12
     3bc:	46bd      	mov	sp, r7
     3be:	bc80      	pop	{r7}
     3c0:	4770      	bx	lr

000003c2 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     3c2:	b480      	push	{r7}
     3c4:	b085      	sub	sp, #20
     3c6:	af00      	add	r7, sp, #0
     3c8:	60f8      	str	r0, [r7, #12]
     3ca:	460b      	mov	r3, r1
     3cc:	607a      	str	r2, [r7, #4]
     3ce:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3d0:	7afb      	ldrb	r3, [r7, #11]
     3d2:	68fa      	ldr	r2, [r7, #12]
     3d4:	01db      	lsls	r3, r3, #7
     3d6:	4413      	add	r3, r2
     3d8:	3314      	adds	r3, #20
     3da:	687a      	ldr	r2, [r7, #4]
     3dc:	601a      	str	r2, [r3, #0]
}
     3de:	bf00      	nop
     3e0:	3714      	adds	r7, #20
     3e2:	46bd      	mov	sp, r7
     3e4:	bc80      	pop	{r7}
     3e6:	4770      	bx	lr

000003e8 <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     3e8:	b480      	push	{r7}
     3ea:	b085      	sub	sp, #20
     3ec:	af00      	add	r7, sp, #0
     3ee:	60f8      	str	r0, [r7, #12]
     3f0:	460b      	mov	r3, r1
     3f2:	607a      	str	r2, [r7, #4]
     3f4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     3f6:	7afb      	ldrb	r3, [r7, #11]
     3f8:	68fa      	ldr	r2, [r7, #12]
     3fa:	01db      	lsls	r3, r3, #7
     3fc:	4413      	add	r3, r2
     3fe:	331c      	adds	r3, #28
     400:	687a      	ldr	r2, [r7, #4]
     402:	601a      	str	r2, [r3, #0]
}
     404:	bf00      	nop
     406:	3714      	adds	r7, #20
     408:	46bd      	mov	sp, r7
     40a:	bc80      	pop	{r7}
     40c:	4770      	bx	lr

0000040e <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
     40e:	b480      	push	{r7}
     410:	b083      	sub	sp, #12
     412:	af00      	add	r7, sp, #0
     414:	6078      	str	r0, [r7, #4]
     416:	460b      	mov	r3, r1
     418:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     41a:	78fb      	ldrb	r3, [r7, #3]
     41c:	687a      	ldr	r2, [r7, #4]
     41e:	01db      	lsls	r3, r3, #7
     420:	4413      	add	r3, r2
     422:	3320      	adds	r3, #32
     424:	681b      	ldr	r3, [r3, #0]
}
     426:	4618      	mov	r0, r3
     428:	370c      	adds	r7, #12
     42a:	46bd      	mov	sp, r7
     42c:	bc80      	pop	{r7}
     42e:	4770      	bx	lr

00000430 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     430:	b580      	push	{r7, lr}
     432:	b082      	sub	sp, #8
     434:	af00      	add	r7, sp, #0
     436:	4603      	mov	r3, r0
     438:	6039      	str	r1, [r7, #0]
     43a:	71fb      	strb	r3, [r7, #7]
     43c:	4613      	mov	r3, r2
     43e:	71bb      	strb	r3, [r7, #6]
	if (level) {
     440:	79bb      	ldrb	r3, [r7, #6]
     442:	2b00      	cmp	r3, #0
     444:	d006      	beq.n	454 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     446:	79fb      	ldrb	r3, [r7, #7]
     448:	683a      	ldr	r2, [r7, #0]
     44a:	4619      	mov	r1, r3
     44c:	4806      	ldr	r0, [pc, #24]	; (468 <_gpio_set_level+0x38>)
     44e:	4b07      	ldr	r3, [pc, #28]	; (46c <_gpio_set_level+0x3c>)
     450:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     452:	e005      	b.n	460 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     454:	79fb      	ldrb	r3, [r7, #7]
     456:	683a      	ldr	r2, [r7, #0]
     458:	4619      	mov	r1, r3
     45a:	4803      	ldr	r0, [pc, #12]	; (468 <_gpio_set_level+0x38>)
     45c:	4b04      	ldr	r3, [pc, #16]	; (470 <_gpio_set_level+0x40>)
     45e:	4798      	blx	r3
}
     460:	bf00      	nop
     462:	3708      	adds	r7, #8
     464:	46bd      	mov	sp, r7
     466:	bd80      	pop	{r7, pc}
     468:	41008000 	.word	0x41008000
     46c:	0000037b 	.word	0x0000037b
     470:	000003c3 	.word	0x000003c3

00000474 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
     474:	b580      	push	{r7, lr}
     476:	b082      	sub	sp, #8
     478:	af00      	add	r7, sp, #0
     47a:	4603      	mov	r3, r0
     47c:	6039      	str	r1, [r7, #0]
     47e:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
     480:	79fb      	ldrb	r3, [r7, #7]
     482:	683a      	ldr	r2, [r7, #0]
     484:	4619      	mov	r1, r3
     486:	4803      	ldr	r0, [pc, #12]	; (494 <_gpio_toggle_level+0x20>)
     488:	4b03      	ldr	r3, [pc, #12]	; (498 <_gpio_toggle_level+0x24>)
     48a:	4798      	blx	r3
}
     48c:	bf00      	nop
     48e:	3708      	adds	r7, #8
     490:	46bd      	mov	sp, r7
     492:	bd80      	pop	{r7, pc}
     494:	41008000 	.word	0x41008000
     498:	000003e9 	.word	0x000003e9

0000049c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
     49c:	b580      	push	{r7, lr}
     49e:	b086      	sub	sp, #24
     4a0:	af00      	add	r7, sp, #0
     4a2:	4603      	mov	r3, r0
     4a4:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     4a6:	f107 030c 	add.w	r3, r7, #12
     4aa:	4618      	mov	r0, r3
     4ac:	4b13      	ldr	r3, [pc, #76]	; (4fc <_gpio_get_level+0x60>)
     4ae:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
     4b0:	79fb      	ldrb	r3, [r7, #7]
     4b2:	4619      	mov	r1, r3
     4b4:	4812      	ldr	r0, [pc, #72]	; (500 <_gpio_get_level+0x64>)
     4b6:	4b13      	ldr	r3, [pc, #76]	; (504 <_gpio_get_level+0x68>)
     4b8:	4798      	blx	r3
     4ba:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
     4bc:	79fb      	ldrb	r3, [r7, #7]
     4be:	4619      	mov	r1, r3
     4c0:	480f      	ldr	r0, [pc, #60]	; (500 <_gpio_get_level+0x64>)
     4c2:	4b11      	ldr	r3, [pc, #68]	; (508 <_gpio_get_level+0x6c>)
     4c4:	4798      	blx	r3
     4c6:	4602      	mov	r2, r0
     4c8:	697b      	ldr	r3, [r7, #20]
     4ca:	43db      	mvns	r3, r3
     4cc:	4013      	ands	r3, r2
     4ce:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     4d0:	79fb      	ldrb	r3, [r7, #7]
     4d2:	4619      	mov	r1, r3
     4d4:	480a      	ldr	r0, [pc, #40]	; (500 <_gpio_get_level+0x64>)
     4d6:	4b0d      	ldr	r3, [pc, #52]	; (50c <_gpio_get_level+0x70>)
     4d8:	4798      	blx	r3
     4da:	4602      	mov	r2, r0
     4dc:	697b      	ldr	r3, [r7, #20]
     4de:	4013      	ands	r3, r2
     4e0:	693a      	ldr	r2, [r7, #16]
     4e2:	4313      	orrs	r3, r2
     4e4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
     4e6:	f107 030c 	add.w	r3, r7, #12
     4ea:	4618      	mov	r0, r3
     4ec:	4b08      	ldr	r3, [pc, #32]	; (510 <_gpio_get_level+0x74>)
     4ee:	4798      	blx	r3

	return tmp;
     4f0:	693b      	ldr	r3, [r7, #16]
}
     4f2:	4618      	mov	r0, r3
     4f4:	3718      	adds	r7, #24
     4f6:	46bd      	mov	sp, r7
     4f8:	bd80      	pop	{r7, pc}
     4fa:	bf00      	nop
     4fc:	0000329d 	.word	0x0000329d
     500:	41008000 	.word	0x41008000
     504:	0000035b 	.word	0x0000035b
     508:	0000040f 	.word	0x0000040f
     50c:	000003a1 	.word	0x000003a1
     510:	000032c3 	.word	0x000032c3

00000514 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     514:	b580      	push	{r7, lr}
     516:	b082      	sub	sp, #8
     518:	af00      	add	r7, sp, #0
     51a:	4603      	mov	r3, r0
     51c:	460a      	mov	r2, r1
     51e:	71fb      	strb	r3, [r7, #7]
     520:	4613      	mov	r3, r2
     522:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     524:	79fb      	ldrb	r3, [r7, #7]
     526:	115b      	asrs	r3, r3, #5
     528:	b2d8      	uxtb	r0, r3
     52a:	79fb      	ldrb	r3, [r7, #7]
     52c:	f003 031f 	and.w	r3, r3, #31
     530:	2201      	movs	r2, #1
     532:	fa02 f303 	lsl.w	r3, r2, r3
     536:	79ba      	ldrb	r2, [r7, #6]
     538:	4619      	mov	r1, r3
     53a:	4b03      	ldr	r3, [pc, #12]	; (548 <gpio_set_pin_level+0x34>)
     53c:	4798      	blx	r3
}
     53e:	bf00      	nop
     540:	3708      	adds	r7, #8
     542:	46bd      	mov	sp, r7
     544:	bd80      	pop	{r7, pc}
     546:	bf00      	nop
     548:	00000431 	.word	0x00000431

0000054c <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
     54c:	b580      	push	{r7, lr}
     54e:	b082      	sub	sp, #8
     550:	af00      	add	r7, sp, #0
     552:	4603      	mov	r3, r0
     554:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
     556:	79fb      	ldrb	r3, [r7, #7]
     558:	115b      	asrs	r3, r3, #5
     55a:	b2d8      	uxtb	r0, r3
     55c:	79fb      	ldrb	r3, [r7, #7]
     55e:	f003 031f 	and.w	r3, r3, #31
     562:	2201      	movs	r2, #1
     564:	fa02 f303 	lsl.w	r3, r2, r3
     568:	4619      	mov	r1, r3
     56a:	4b03      	ldr	r3, [pc, #12]	; (578 <gpio_toggle_pin_level+0x2c>)
     56c:	4798      	blx	r3
}
     56e:	bf00      	nop
     570:	3708      	adds	r7, #8
     572:	46bd      	mov	sp, r7
     574:	bd80      	pop	{r7, pc}
     576:	bf00      	nop
     578:	00000475 	.word	0x00000475

0000057c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
     57c:	b580      	push	{r7, lr}
     57e:	b082      	sub	sp, #8
     580:	af00      	add	r7, sp, #0
     582:	4603      	mov	r3, r0
     584:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     586:	79fb      	ldrb	r3, [r7, #7]
     588:	115b      	asrs	r3, r3, #5
     58a:	b2db      	uxtb	r3, r3
     58c:	4618      	mov	r0, r3
     58e:	4b09      	ldr	r3, [pc, #36]	; (5b4 <gpio_get_pin_level+0x38>)
     590:	4798      	blx	r3
     592:	4601      	mov	r1, r0
     594:	79fb      	ldrb	r3, [r7, #7]
     596:	f003 031f 	and.w	r3, r3, #31
     59a:	2201      	movs	r2, #1
     59c:	fa02 f303 	lsl.w	r3, r2, r3
     5a0:	400b      	ands	r3, r1
     5a2:	2b00      	cmp	r3, #0
     5a4:	bf14      	ite	ne
     5a6:	2301      	movne	r3, #1
     5a8:	2300      	moveq	r3, #0
     5aa:	b2db      	uxtb	r3, r3
}
     5ac:	4618      	mov	r0, r3
     5ae:	3708      	adds	r7, #8
     5b0:	46bd      	mov	sp, r7
     5b2:	bd80      	pop	{r7, pc}
     5b4:	0000049d 	.word	0x0000049d

000005b8 <_ZL29TimeoutFlapperValveControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController;

static SingleFlapperValve_Class fvStatic(0);

static void TimeoutFlapperValveController(const struct timer_task *const timer_task)
{
     5b8:	b480      	push	{r7}
     5ba:	b083      	sub	sp, #12
     5bc:	af00      	add	r7, sp, #0
     5be:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController->timeoutFlapperValveController=true;
     5c0:	4b07      	ldr	r3, [pc, #28]	; (5e0 <_ZL29TimeoutFlapperValveControllerPK10timer_task+0x28>)
     5c2:	681b      	ldr	r3, [r3, #0]
     5c4:	2201      	movs	r2, #1
     5c6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController->unLockTimeout=true;
     5ca:	4b05      	ldr	r3, [pc, #20]	; (5e0 <_ZL29TimeoutFlapperValveControllerPK10timer_task+0x28>)
     5cc:	681b      	ldr	r3, [r3, #0]
     5ce:	2201      	movs	r2, #1
     5d0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	
}
     5d4:	bf00      	nop
     5d6:	370c      	adds	r7, #12
     5d8:	46bd      	mov	sp, r7
     5da:	bc80      	pop	{r7}
     5dc:	4770      	bx	lr
     5de:	bf00      	nop
     5e0:	20000628 	.word	0x20000628

000005e4 <_ZL31TimeoutFlapperValveFullyClossedPK10timer_task>:
static void TimeoutFlapperValveFullyClossed(const struct timer_task *const timer_task)
{
     5e4:	b480      	push	{r7}
     5e6:	b083      	sub	sp, #12
     5e8:	af00      	add	r7, sp, #0
     5ea:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController->fullClosedTimeout=true;
     5ec:	4b04      	ldr	r3, [pc, #16]	; (600 <_ZL31TimeoutFlapperValveFullyClossedPK10timer_task+0x1c>)
     5ee:	681b      	ldr	r3, [r3, #0]
     5f0:	2201      	movs	r2, #1
     5f2:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	
}
     5f6:	bf00      	nop
     5f8:	370c      	adds	r7, #12
     5fa:	46bd      	mov	sp, r7
     5fc:	bc80      	pop	{r7}
     5fe:	4770      	bx	lr
     600:	20000628 	.word	0x20000628

00000604 <_ZL17ResetValveTimeoutPK10timer_task>:

static void ResetValveTimeout(const struct timer_task *const timer_task)
{
     604:	b480      	push	{r7}
     606:	b083      	sub	sp, #12
     608:	af00      	add	r7, sp, #0
     60a:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController->resetTimeout=true;
     60c:	4b04      	ldr	r3, [pc, #16]	; (620 <_ZL17ResetValveTimeoutPK10timer_task+0x1c>)
     60e:	681b      	ldr	r3, [r3, #0]
     610:	2201      	movs	r2, #1
     612:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
     616:	bf00      	nop
     618:	370c      	adds	r7, #12
     61a:	46bd      	mov	sp, r7
     61c:	bc80      	pop	{r7}
     61e:	4770      	bx	lr
     620:	20000628 	.word	0x20000628

00000624 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
     624:	b580      	push	{r7, lr}
     626:	b082      	sub	sp, #8
     628:	af00      	add	r7, sp, #0
     62a:	6078      	str	r0, [r7, #4]
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	4618      	mov	r0, r3
     630:	4b1e      	ldr	r3, [pc, #120]	; (6ac <_ZN22FlapperValveControllerC1Ev+0x88>)
     632:	4798      	blx	r3
{
	fv=&fvStatic;
     634:	687b      	ldr	r3, [r7, #4]
     636:	4a1e      	ldr	r2, [pc, #120]	; (6b0 <_ZN22FlapperValveControllerC1Ev+0x8c>)
     638:	67da      	str	r2, [r3, #124]	; 0x7c
	ptrFlapperValveController=this;
     63a:	4a1e      	ldr	r2, [pc, #120]	; (6b4 <_ZN22FlapperValveControllerC1Ev+0x90>)
     63c:	687b      	ldr	r3, [r7, #4]
     63e:	6013      	str	r3, [r2, #0]
	doPeriodicTask=false;
     640:	687b      	ldr	r3, [r7, #4]
     642:	2200      	movs	r2, #0
     644:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	isControlling=false;
     648:	687b      	ldr	r3, [r7, #4]
     64a:	2200      	movs	r2, #0
     64c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	gotSetpoint=false;
     650:	687b      	ldr	r3, [r7, #4]
     652:	2200      	movs	r2, #0
     654:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	controllerEnabled=false;
     658:	687b      	ldr	r3, [r7, #4]
     65a:	2200      	movs	r2, #0
     65c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	closing=false;
     660:	687b      	ldr	r3, [r7, #4]
     662:	2200      	movs	r2, #0
     664:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUNL_AIR;
     668:	687b      	ldr	r3, [r7, #4]
     66a:	22da      	movs	r2, #218	; 0xda
     66c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	NBC_Mode=false;
     670:	687b      	ldr	r3, [r7, #4]
     672:	2200      	movs	r2, #0
     674:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	NBC_Activated=false;
     678:	687b      	ldr	r3, [r7, #4]
     67a:	2200      	movs	r2, #0
     67c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	standAloneActivated=false;
     680:	687b      	ldr	r3, [r7, #4]
     682:	2200      	movs	r2, #0
     684:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	standAloneMode=false;
     688:	687b      	ldr	r3, [r7, #4]
     68a:	2200      	movs	r2, #0
     68c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	resetTimeout=false;
     690:	687b      	ldr	r3, [r7, #4]
     692:	2200      	movs	r2, #0
     694:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	standAloneReturning=false;
     698:	687b      	ldr	r3, [r7, #4]
     69a:	2200      	movs	r2, #0
     69c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	
} //FlapperValveController
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	4618      	mov	r0, r3
     6a4:	3708      	adds	r7, #8
     6a6:	46bd      	mov	sp, r7
     6a8:	bd80      	pop	{r7, pc}
     6aa:	bf00      	nop
     6ac:	000015a1 	.word	0x000015a1
     6b0:	2000062c 	.word	0x2000062c
     6b4:	20000628 	.word	0x20000628

000006b8 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
     6b8:	b580      	push	{r7, lr}
     6ba:	b082      	sub	sp, #8
     6bc:	af00      	add	r7, sp, #0
     6be:	6078      	str	r0, [r7, #4]
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	4618      	mov	r0, r3
     6c4:	4b03      	ldr	r3, [pc, #12]	; (6d4 <_ZN22FlapperValveControllerD1Ev+0x1c>)
     6c6:	4798      	blx	r3
{
} //~FlapperValveController
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	4618      	mov	r0, r3
     6cc:	3708      	adds	r7, #8
     6ce:	46bd      	mov	sp, r7
     6d0:	bd80      	pop	{r7, pc}
     6d2:	bf00      	nop
     6d4:	000015ed 	.word	0x000015ed

000006d8 <_ZN22FlapperValveController14InitControllerEv>:

bool FlapperValveController::InitController(){
     6d8:	b580      	push	{r7, lr}
     6da:	b082      	sub	sp, #8
     6dc:	af00      	add	r7, sp, #0
     6de:	6078      	str	r0, [r7, #4]
	fv=&fvStatic;
     6e0:	687b      	ldr	r3, [r7, #4]
     6e2:	4a0d      	ldr	r2, [pc, #52]	; (718 <_ZN22FlapperValveController14InitControllerEv+0x40>)
     6e4:	67da      	str	r2, [r3, #124]	; 0x7c
	if (fv->Init())
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     6ea:	4618      	mov	r0, r3
     6ec:	4b0b      	ldr	r3, [pc, #44]	; (71c <_ZN22FlapperValveController14InitControllerEv+0x44>)
     6ee:	4798      	blx	r3
     6f0:	4603      	mov	r3, r0
     6f2:	2b00      	cmp	r3, #0
     6f4:	d007      	beq.n	706 <_ZN22FlapperValveController14InitControllerEv+0x2e>
	{
		isOK=Selftest();
     6f6:	6878      	ldr	r0, [r7, #4]
     6f8:	4b09      	ldr	r3, [pc, #36]	; (720 <_ZN22FlapperValveController14InitControllerEv+0x48>)
     6fa:	4798      	blx	r3
     6fc:	4603      	mov	r3, r0
     6fe:	461a      	mov	r2, r3
     700:	687b      	ldr	r3, [r7, #4]
     702:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	}
	return	isOK;	
     706:	687b      	ldr	r3, [r7, #4]
     708:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
     70c:	b2db      	uxtb	r3, r3
}
     70e:	4618      	mov	r0, r3
     710:	3708      	adds	r7, #8
     712:	46bd      	mov	sp, r7
     714:	bd80      	pop	{r7, pc}
     716:	bf00      	nop
     718:	2000062c 	.word	0x2000062c
     71c:	0000160d 	.word	0x0000160d
     720:	00001361 	.word	0x00001361

00000724 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	fv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
     724:	b480      	push	{r7}
     726:	b083      	sub	sp, #12
     728:	af00      	add	r7, sp, #0
     72a:	6078      	str	r0, [r7, #4]
     72c:	460b      	mov	r3, r1
     72e:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
     730:	687b      	ldr	r3, [r7, #4]
     732:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
     736:	687b      	ldr	r3, [r7, #4]
     738:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	direction=currentPosition>sp;
     73c:	687b      	ldr	r3, [r7, #4]
     73e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
     742:	461a      	mov	r2, r3
     744:	78fb      	ldrb	r3, [r7, #3]
     746:	429a      	cmp	r2, r3
     748:	bfcc      	ite	gt
     74a:	2301      	movgt	r3, #1
     74c:	2300      	movle	r3, #0
     74e:	b2da      	uxtb	r2, r3
     750:	687b      	ldr	r3, [r7, #4]
     752:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	return direction;
     756:	687b      	ldr	r3, [r7, #4]
     758:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
	
}
     75c:	4618      	mov	r0, r3
     75e:	370c      	adds	r7, #12
     760:	46bd      	mov	sp, r7
     762:	bc80      	pop	{r7}
     764:	4770      	bx	lr
	...

00000768 <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
     768:	b580      	push	{r7, lr}
     76a:	b082      	sub	sp, #8
     76c:	af00      	add	r7, sp, #0
     76e:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
     770:	687b      	ldr	r3, [r7, #4]
     772:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
     776:	4619      	mov	r1, r3
     778:	6878      	ldr	r0, [r7, #4]
     77a:	4b03      	ldr	r3, [pc, #12]	; (788 <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
     77c:	4798      	blx	r3
     77e:	4603      	mov	r3, r0
	
}
     780:	4618      	mov	r0, r3
     782:	3708      	adds	r7, #8
     784:	46bd      	mov	sp, r7
     786:	bd80      	pop	{r7, pc}
     788:	00000725 	.word	0x00000725

0000078c <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	fv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
     78c:	b590      	push	{r4, r7, lr}
     78e:	b083      	sub	sp, #12
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
     794:	687b      	ldr	r3, [r7, #4]
     796:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
//	floatLastPosition=(float)lastPosition;
	if (fv->controlOutputs.niAlcFvMotorEnable)
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     7a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     7a8:	2b00      	cmp	r3, #0
     7aa:	d008      	beq.n	7be <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x32>
	{
		fv->SetEnable(false);
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     7b0:	2100      	movs	r1, #0
     7b2:	4618      	mov	r0, r3
     7b4:	4b0b      	ldr	r3, [pc, #44]	; (7e4 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x58>)
     7b6:	4798      	blx	r3
		delay_ms(10);
     7b8:	200a      	movs	r0, #10
     7ba:	4b0b      	ldr	r3, [pc, #44]	; (7e8 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
     7bc:	4798      	blx	r3
	} 
	else
	{
	}
	fv->SetDirection(CalculateDirection());
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
     7c2:	6878      	ldr	r0, [r7, #4]
     7c4:	4b09      	ldr	r3, [pc, #36]	; (7ec <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
     7c6:	4798      	blx	r3
     7c8:	4603      	mov	r3, r0
     7ca:	4619      	mov	r1, r3
     7cc:	4620      	mov	r0, r4
     7ce:	4b08      	ldr	r3, [pc, #32]	; (7f0 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
     7d0:	4798      	blx	r3
	StartMotor();
     7d2:	6878      	ldr	r0, [r7, #4]
     7d4:	4b07      	ldr	r3, [pc, #28]	; (7f4 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
     7d6:	4798      	blx	r3
	return 0;
     7d8:	2300      	movs	r3, #0
}
     7da:	4618      	mov	r0, r3
     7dc:	370c      	adds	r7, #12
     7de:	46bd      	mov	sp, r7
     7e0:	bd90      	pop	{r4, r7, pc}
     7e2:	bf00      	nop
     7e4:	000017c1 	.word	0x000017c1
     7e8:	000034c5 	.word	0x000034c5
     7ec:	00000769 	.word	0x00000769
     7f0:	00001841 	.word	0x00001841
     7f4:	0000103d 	.word	0x0000103d

000007f8 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
     7f8:	b580      	push	{r7, lr}
     7fa:	b082      	sub	sp, #8
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
     800:	6878      	ldr	r0, [r7, #4]
     802:	4b13      	ldr	r3, [pc, #76]	; (850 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
     804:	4798      	blx	r3
     806:	4603      	mov	r3, r0
     808:	2b00      	cmp	r3, #0
     80a:	d003      	beq.n	814 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
     80c:	6878      	ldr	r0, [r7, #4]
     80e:	4b11      	ldr	r3, [pc, #68]	; (854 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
     810:	4798      	blx	r3
     812:	e013      	b.n	83c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
     814:	687b      	ldr	r3, [r7, #4]
     816:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
     81a:	2b00      	cmp	r3, #0
     81c:	d00b      	beq.n	836 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
     81e:	687b      	ldr	r3, [r7, #4]
     820:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
     824:	4619      	mov	r1, r3
     826:	6878      	ldr	r0, [r7, #4]
     828:	4b0b      	ldr	r3, [pc, #44]	; (858 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
     82a:	4798      	blx	r3
			NBC_Activated=false;
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	2200      	movs	r2, #0
     830:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
     834:	e002      	b.n	83c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
     836:	6878      	ldr	r0, [r7, #4]
     838:	4b08      	ldr	r3, [pc, #32]	; (85c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
     83a:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
     842:	f083 0301 	eor.w	r3, r3, #1
     846:	b2db      	uxtb	r3, r3
}
     848:	4618      	mov	r0, r3
     84a:	3708      	adds	r7, #8
     84c:	46bd      	mov	sp, r7
     84e:	bd80      	pop	{r7, pc}
     850:	00000e99 	.word	0x00000e99
     854:	00000e39 	.word	0x00000e39
     858:	000010cd 	.word	0x000010cd
     85c:	00000a31 	.word	0x00000a31

00000860 <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
     860:	b590      	push	{r4, r7, lr}
     862:	b085      	sub	sp, #20
     864:	af00      	add	r7, sp, #0
     866:	6078      	str	r0, [r7, #4]
	bool result=false;
     868:	2300      	movs	r3, #0
     86a:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	33bf      	adds	r3, #191	; 0xbf
     870:	4619      	mov	r1, r3
     872:	4817      	ldr	r0, [pc, #92]	; (8d0 <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
     874:	4b17      	ldr	r3, [pc, #92]	; (8d4 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
     876:	4798      	blx	r3
	UpdateFlapperValveData();
     878:	6878      	ldr	r0, [r7, #4]
     87a:	4b17      	ldr	r3, [pc, #92]	; (8d8 <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
     87c:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
     87e:	687b      	ldr	r3, [r7, #4]
     880:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
     884:	f083 0301 	eor.w	r3, r3, #1
     888:	b2db      	uxtb	r3, r3
     88a:	461c      	mov	r4, r3
     88c:	6878      	ldr	r0, [r7, #4]
     88e:	4b13      	ldr	r3, [pc, #76]	; (8dc <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
     890:	4798      	blx	r3
     892:	4603      	mov	r3, r0
     894:	f083 0301 	eor.w	r3, r3, #1
     898:	b2db      	uxtb	r3, r3
     89a:	4023      	ands	r3, r4
     89c:	2b00      	cmp	r3, #0
     89e:	bf14      	ite	ne
     8a0:	2301      	movne	r3, #1
     8a2:	2300      	moveq	r3, #0
     8a4:	b2db      	uxtb	r3, r3
     8a6:	2b00      	cmp	r3, #0
     8a8:	d00d      	beq.n	8c6 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
     8b0:	461a      	mov	r2, r3
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
     8b8:	429a      	cmp	r2, r3
     8ba:	dd02      	ble.n	8c2 <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
     8bc:	2301      	movs	r3, #1
     8be:	73fb      	strb	r3, [r7, #15]
     8c0:	e001      	b.n	8c6 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
     8c2:	2300      	movs	r3, #0
     8c4:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
     8c6:	7bfb      	ldrb	r3, [r7, #15]
}
     8c8:	4618      	mov	r0, r3
     8ca:	3714      	adds	r7, #20
     8cc:	46bd      	mov	sp, r7
     8ce:	bd90      	pop	{r4, r7, pc}
     8d0:	200021c8 	.word	0x200021c8
     8d4:	0000fa59 	.word	0x0000fa59
     8d8:	00001289 	.word	0x00001289
     8dc:	00000e99 	.word	0x00000e99

000008e0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
     8e0:	b580      	push	{r7, lr}
     8e2:	b082      	sub	sp, #8
     8e4:	af00      	add	r7, sp, #0
     8e6:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
     8e8:	6878      	ldr	r0, [r7, #4]
     8ea:	4b11      	ldr	r3, [pc, #68]	; (930 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x50>)
     8ec:	4798      	blx	r3
     8ee:	4603      	mov	r3, r0
     8f0:	461a      	mov	r2, r3
     8f2:	687b      	ldr	r3, [r7, #4]
     8f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
     8f8:	b2db      	uxtb	r3, r3
     8fa:	f083 0301 	eor.w	r3, r3, #1
     8fe:	b2db      	uxtb	r3, r3
     900:	4013      	ands	r3, r2
     902:	2b00      	cmp	r3, #0
     904:	bf14      	ite	ne
     906:	2301      	movne	r3, #1
     908:	2300      	moveq	r3, #0
     90a:	b2db      	uxtb	r3, r3
     90c:	2b00      	cmp	r3, #0
     90e:	d003      	beq.n	918 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
     910:	6878      	ldr	r0, [r7, #4]
     912:	4b08      	ldr	r3, [pc, #32]	; (934 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x54>)
     914:	4798      	blx	r3
     916:	e002      	b.n	91e <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x3e>
	} 
	else
	{
		Control_NBC_StandAlone();
     918:	6878      	ldr	r0, [r7, #4]
     91a:	4b07      	ldr	r3, [pc, #28]	; (938 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x58>)
     91c:	4798      	blx	r3
	}
	return resetTimeout;
     91e:	687b      	ldr	r3, [r7, #4]
     920:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
     924:	b2db      	uxtb	r3, r3
}
     926:	4618      	mov	r0, r3
     928:	3708      	adds	r7, #8
     92a:	46bd      	mov	sp, r7
     92c:	bd80      	pop	{r7, pc}
     92e:	bf00      	nop
     930:	00000861 	.word	0x00000861
     934:	00000ca5 	.word	0x00000ca5
     938:	0000093d 	.word	0x0000093d

0000093c <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
     93c:	b580      	push	{r7, lr}
     93e:	b082      	sub	sp, #8
     940:	af00      	add	r7, sp, #0
     942:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
     944:	6878      	ldr	r0, [r7, #4]
     946:	4b28      	ldr	r3, [pc, #160]	; (9e8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xac>)
     948:	4798      	blx	r3
     94a:	4603      	mov	r3, r0
     94c:	2b00      	cmp	r3, #0
     94e:	d031      	beq.n	9b4 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
     950:	687b      	ldr	r3, [r7, #4]
     952:	2201      	movs	r2, #1
     954:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
			if (standAloneActivated)
     958:	687b      	ldr	r3, [r7, #4]
     95a:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
     95e:	2b00      	cmp	r3, #0
     960:	d003      	beq.n	96a <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
     962:	6878      	ldr	r0, [r7, #4]
     964:	4b21      	ldr	r3, [pc, #132]	; (9ec <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
     966:	4798      	blx	r3
     968:	e038      	b.n	9dc <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
     970:	461a      	mov	r2, r3
     972:	687b      	ldr	r3, [r7, #4]
     974:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
     978:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
     97c:	429a      	cmp	r2, r3
     97e:	dd0c      	ble.n	99a <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
     980:	687b      	ldr	r3, [r7, #4]
     982:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
     986:	43db      	mvns	r3, r3
     988:	b2db      	uxtb	r3, r3
     98a:	4619      	mov	r1, r3
     98c:	6878      	ldr	r0, [r7, #4]
     98e:	4b18      	ldr	r3, [pc, #96]	; (9f0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
     990:	4798      	blx	r3
					standAloneReturning=true;
     992:	687b      	ldr	r3, [r7, #4]
     994:	2201      	movs	r2, #1
     996:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
     9a0:	43db      	mvns	r3, r3
     9a2:	b2da      	uxtb	r2, r3
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
				standAloneActivated=true;
     9aa:	687b      	ldr	r3, [r7, #4]
     9ac:	2201      	movs	r2, #1
     9ae:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
     9b2:	e013      	b.n	9dc <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
     9b4:	687b      	ldr	r3, [r7, #4]
     9b6:	2200      	movs	r2, #0
     9b8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		if (standAloneActivated)
     9bc:	687b      	ldr	r3, [r7, #4]
     9be:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
     9c2:	2b00      	cmp	r3, #0
     9c4:	d007      	beq.n	9d6 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	2200      	movs	r2, #0
     9ca:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
			standAloneReturning=false;
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	2200      	movs	r2, #0
     9d2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
     9d6:	6878      	ldr	r0, [r7, #4]
     9d8:	4b04      	ldr	r3, [pc, #16]	; (9ec <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
     9da:	4798      	blx	r3
		
	}
}
     9dc:	bf00      	nop
     9de:	4618      	mov	r0, r3
     9e0:	3708      	adds	r7, #8
     9e2:	46bd      	mov	sp, r7
     9e4:	bd80      	pop	{r7, pc}
     9e6:	bf00      	nop
     9e8:	000009f5 	.word	0x000009f5
     9ec:	000007f9 	.word	0x000007f9
     9f0:	000010cd 	.word	0x000010cd

000009f4 <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
     9f4:	b480      	push	{r7}
     9f6:	b085      	sub	sp, #20
     9f8:	af00      	add	r7, sp, #0
     9fa:	6078      	str	r0, [r7, #4]
	bool result=false;
     9fc:	2300      	movs	r3, #0
     9fe:	73fb      	strb	r3, [r7, #15]
	if ((dataStruct.controlOutputs.iAlcFvStandAloneOut)&(!dataStruct.inputStatus.cabin[1]))
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
     a06:	461a      	mov	r2, r3
     a08:	687b      	ldr	r3, [r7, #4]
     a0a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
     a0e:	f083 0301 	eor.w	r3, r3, #1
     a12:	b2db      	uxtb	r3, r3
     a14:	4013      	ands	r3, r2
     a16:	2b00      	cmp	r3, #0
     a18:	d002      	beq.n	a20 <_ZN22FlapperValveController16IsStandAloneModeEv+0x2c>
	{
		result=true;
     a1a:	2301      	movs	r3, #1
     a1c:	73fb      	strb	r3, [r7, #15]
     a1e:	e001      	b.n	a24 <_ZN22FlapperValveController16IsStandAloneModeEv+0x30>
	} 
	else
	{
		result=false;
     a20:	2300      	movs	r3, #0
     a22:	73fb      	strb	r3, [r7, #15]
	}
	return result;
     a24:	7bfb      	ldrb	r3, [r7, #15]
}
     a26:	4618      	mov	r0, r3
     a28:	3714      	adds	r7, #20
     a2a:	46bd      	mov	sp, r7
     a2c:	bc80      	pop	{r7}
     a2e:	4770      	bx	lr

00000a30 <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
     a30:	b590      	push	{r4, r7, lr}
     a32:	b083      	sub	sp, #12
     a34:	af00      	add	r7, sp, #0
     a36:	6078      	str	r0, [r7, #4]
	if (isControlling)
     a38:	687b      	ldr	r3, [r7, #4]
     a3a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
     a3e:	2b00      	cmp	r3, #0
     a40:	f000 8117 	beq.w	c72 <_ZN22FlapperValveController15ControlMovementEv+0x242>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
     a4a:	687b      	ldr	r3, [r7, #4]
     a4c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
     a50:	4313      	orrs	r3, r2
     a52:	b2db      	uxtb	r3, r3
     a54:	461a      	mov	r2, r3
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
     a5c:	4013      	ands	r3, r2
     a5e:	687a      	ldr	r2, [r7, #4]
     a60:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
     a64:	b2d2      	uxtb	r2, r2
     a66:	4013      	ands	r3, r2
     a68:	2b00      	cmp	r3, #0
     a6a:	bf14      	ite	ne
     a6c:	2301      	movne	r3, #1
     a6e:	2300      	moveq	r3, #0
     a70:	b2db      	uxtb	r3, r3
     a72:	2b00      	cmp	r3, #0
     a74:	d003      	beq.n	a7e <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
     a76:	6878      	ldr	r0, [r7, #4]
     a78:	4b80      	ldr	r3, [pc, #512]	; (c7c <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
     a7a:	4798      	blx	r3
     a7c:	e0f9      	b.n	c72 <_ZN22FlapperValveController15ControlMovementEv+0x242>
		} 
		else
		{
			
		//	currentPosition=fv->ReadActualPosition();
			if ((((setpoint<2)&(currentPosition<2))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
     a84:	2b01      	cmp	r3, #1
     a86:	bfd4      	ite	le
     a88:	2301      	movle	r3, #1
     a8a:	2300      	movgt	r3, #0
     a8c:	b2da      	uxtb	r2, r3
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
     a94:	2b01      	cmp	r3, #1
     a96:	bfd4      	ite	le
     a98:	2301      	movle	r3, #1
     a9a:	2300      	movgt	r3, #0
     a9c:	b2db      	uxtb	r3, r3
     a9e:	4013      	ands	r3, r2
     aa0:	b2da      	uxtb	r2, r3
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
     aa8:	2bfa      	cmp	r3, #250	; 0xfa
     aaa:	bfcc      	ite	gt
     aac:	2301      	movgt	r3, #1
     aae:	2300      	movle	r3, #0
     ab0:	b2d9      	uxtb	r1, r3
     ab2:	687b      	ldr	r3, [r7, #4]
     ab4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
     ab8:	2bf5      	cmp	r3, #245	; 0xf5
     aba:	bfcc      	ite	gt
     abc:	2301      	movgt	r3, #1
     abe:	2300      	movle	r3, #0
     ac0:	b2db      	uxtb	r3, r3
     ac2:	400b      	ands	r3, r1
     ac4:	b2db      	uxtb	r3, r3
     ac6:	4313      	orrs	r3, r2
     ac8:	b2db      	uxtb	r3, r3
     aca:	461a      	mov	r2, r3
     acc:	687b      	ldr	r3, [r7, #4]
     ace:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
     ad2:	f083 0301 	eor.w	r3, r3, #1
     ad6:	b2db      	uxtb	r3, r3
     ad8:	4619      	mov	r1, r3
     ada:	687b      	ldr	r3, [r7, #4]
     adc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
     ae0:	b2db      	uxtb	r3, r3
     ae2:	400b      	ands	r3, r1
     ae4:	4013      	ands	r3, r2
     ae6:	2b00      	cmp	r3, #0
     ae8:	bf14      	ite	ne
     aea:	2301      	movne	r3, #1
     aec:	2300      	moveq	r3, #0
     aee:	b2db      	uxtb	r3, r3
     af0:	2b00      	cmp	r3, #0
     af2:	d014      	beq.n	b1e <_ZN22FlapperValveController15ControlMovementEv+0xee>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveFullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
     af4:	22c8      	movs	r2, #200	; 0xc8
     af6:	4962      	ldr	r1, [pc, #392]	; (c80 <_ZN22FlapperValveController15ControlMovementEv+0x250>)
     af8:	4862      	ldr	r0, [pc, #392]	; (c84 <_ZN22FlapperValveController15ControlMovementEv+0x254>)
     afa:	4b63      	ldr	r3, [pc, #396]	; (c88 <_ZN22FlapperValveController15ControlMovementEv+0x258>)
     afc:	4798      	blx	r3
				fullClosedTimeout=false;
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	2200      	movs	r2, #0
     b02:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
				gotSetpoint=false;
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	2200      	movs	r2, #0
     b0a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				closing=true;
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	2201      	movs	r2, #1
     b12:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
				unLockTimeout=true;
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	2201      	movs	r2, #1
     b1a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			}
			//floatCurrentPosition=(float)currentPosition;
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
     b1e:	687b      	ldr	r3, [r7, #4]
     b20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
     b24:	461a      	mov	r2, r3
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
     b2c:	1ad3      	subs	r3, r2, r3
     b2e:	2b00      	cmp	r3, #0
     b30:	bfb8      	it	lt
     b32:	425b      	neglt	r3, r3
     b34:	687a      	ldr	r2, [r7, #4]
     b36:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
     b3a:	4293      	cmp	r3, r2
     b3c:	bfcc      	ite	gt
     b3e:	2301      	movgt	r3, #1
     b40:	2300      	movle	r3, #0
     b42:	b2db      	uxtb	r3, r3
     b44:	461a      	mov	r2, r3
     b46:	687b      	ldr	r3, [r7, #4]
     b48:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
     b4c:	4313      	orrs	r3, r2
     b4e:	2b00      	cmp	r3, #0
     b50:	d079      	beq.n	c46 <_ZN22FlapperValveController15ControlMovementEv+0x216>
			{
				if (flapperValveIsMoving)
     b52:	687b      	ldr	r3, [r7, #4]
     b54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
     b58:	b2db      	uxtb	r3, r3
     b5a:	2b00      	cmp	r3, #0
     b5c:	d04b      	beq.n	bf6 <_ZN22FlapperValveController15ControlMovementEv+0x1c6>
				{
					if (closing)
     b5e:	687b      	ldr	r3, [r7, #4]
     b60:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
     b64:	2b00      	cmp	r3, #0
     b66:	d00e      	beq.n	b86 <_ZN22FlapperValveController15ControlMovementEv+0x156>
					{
						if (keepControlling)
     b68:	687b      	ldr	r3, [r7, #4]
     b6a:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
     b6e:	2b00      	cmp	r3, #0
     b70:	d054      	beq.n	c1c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						{
							if (fullClosedTimeout)
     b72:	687b      	ldr	r3, [r7, #4]
     b74:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
     b78:	b2db      	uxtb	r3, r3
     b7a:	2b00      	cmp	r3, #0
     b7c:	d04e      	beq.n	c1c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
							{
								StopValveAtLimit();
     b7e:	6878      	ldr	r0, [r7, #4]
     b80:	4b3e      	ldr	r3, [pc, #248]	; (c7c <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
     b82:	4798      	blx	r3
     b84:	e04a      	b.n	c1c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	f893 40ac 	ldrb.w	r4, [r3, #172]	; 0xac
     b8c:	6878      	ldr	r0, [r7, #4]
     b8e:	4b3f      	ldr	r3, [pc, #252]	; (c8c <_ZN22FlapperValveController15ControlMovementEv+0x25c>)
     b90:	4798      	blx	r3
     b92:	4603      	mov	r3, r0
     b94:	429c      	cmp	r4, r3
     b96:	bf14      	ite	ne
     b98:	2301      	movne	r3, #1
     b9a:	2300      	moveq	r3, #0
     b9c:	b2db      	uxtb	r3, r3
     b9e:	2b00      	cmp	r3, #0
     ba0:	d00b      	beq.n	bba <_ZN22FlapperValveController15ControlMovementEv+0x18a>
						{
							StopMotor();
     ba2:	6878      	ldr	r0, [r7, #4]
     ba4:	4b3a      	ldr	r3, [pc, #232]	; (c90 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
     ba6:	4798      	blx	r3
							hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
     ba8:	493a      	ldr	r1, [pc, #232]	; (c94 <_ZN22FlapperValveController15ControlMovementEv+0x264>)
     baa:	4836      	ldr	r0, [pc, #216]	; (c84 <_ZN22FlapperValveController15ControlMovementEv+0x254>)
     bac:	4b3a      	ldr	r3, [pc, #232]	; (c98 <_ZN22FlapperValveController15ControlMovementEv+0x268>)
     bae:	4798      	blx	r3
							keepControlling=true;
     bb0:	687b      	ldr	r3, [r7, #4]
     bb2:	2201      	movs	r2, #1
     bb4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
     bb8:	e030      	b.n	c1c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
						else
						{
							if (timeoutFlapperValveController)
     bba:	687b      	ldr	r3, [r7, #4]
     bbc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     bc0:	b2db      	uxtb	r3, r3
     bc2:	2b00      	cmp	r3, #0
     bc4:	d003      	beq.n	bce <_ZN22FlapperValveController15ControlMovementEv+0x19e>
							{
								StopMotor();
     bc6:	6878      	ldr	r0, [r7, #4]
     bc8:	4b31      	ldr	r3, [pc, #196]	; (c90 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
     bca:	4798      	blx	r3
     bcc:	e026      	b.n	c1c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
								
							}
							else
							{
								if (keepControlling)
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
     bd4:	2b00      	cmp	r3, #0
     bd6:	d021      	beq.n	c1c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
								{
									if (timeoutKeepControlling)
     bd8:	687b      	ldr	r3, [r7, #4]
     bda:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
     bde:	b2db      	uxtb	r3, r3
     be0:	2b00      	cmp	r3, #0
     be2:	d003      	beq.n	bec <_ZN22FlapperValveController15ControlMovementEv+0x1bc>
									{
										StopMotor();
     be4:	6878      	ldr	r0, [r7, #4]
     be6:	4b2a      	ldr	r3, [pc, #168]	; (c90 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
     be8:	4798      	blx	r3
     bea:	e017      	b.n	c1c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
									}
									else
									{
										KeepControlling();
     bec:	2100      	movs	r1, #0
     bee:	6878      	ldr	r0, [r7, #4]
     bf0:	4b2a      	ldr	r3, [pc, #168]	; (c9c <_ZN22FlapperValveController15ControlMovementEv+0x26c>)
     bf2:	4798      	blx	r3
     bf4:	e012      	b.n	c1c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
					}
					
				}
				else
				{
					if (keepControlling)
     bf6:	687b      	ldr	r3, [r7, #4]
     bf8:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
     bfc:	2b00      	cmp	r3, #0
     bfe:	d00d      	beq.n	c1c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
					{
						if (timeoutKeepControlling)
     c00:	687b      	ldr	r3, [r7, #4]
     c02:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
     c06:	b2db      	uxtb	r3, r3
     c08:	2b00      	cmp	r3, #0
     c0a:	d003      	beq.n	c14 <_ZN22FlapperValveController15ControlMovementEv+0x1e4>
						{
							StopValveinBetween();
     c0c:	6878      	ldr	r0, [r7, #4]
     c0e:	4b24      	ldr	r3, [pc, #144]	; (ca0 <_ZN22FlapperValveController15ControlMovementEv+0x270>)
     c10:	4798      	blx	r3
     c12:	e003      	b.n	c1c <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
						else
						{
							KeepControlling();
     c14:	2100      	movs	r1, #0
     c16:	6878      	ldr	r0, [r7, #4]
     c18:	4b20      	ldr	r3, [pc, #128]	; (c9c <_ZN22FlapperValveController15ControlMovementEv+0x26c>)
     c1a:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
     c1c:	687b      	ldr	r3, [r7, #4]
     c1e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
     c22:	461a      	mov	r2, r3
     c24:	687b      	ldr	r3, [r7, #4]
     c26:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
     c2a:	1ad3      	subs	r3, r2, r3
     c2c:	2b00      	cmp	r3, #0
     c2e:	bfb8      	it	lt
     c30:	425b      	neglt	r3, r3
     c32:	687a      	ldr	r2, [r7, #4]
     c34:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
     c38:	4293      	cmp	r3, r2
     c3a:	dd1a      	ble.n	c72 <_ZN22FlapperValveController15ControlMovementEv+0x242>
				{
					gotSetpoint=false;
     c3c:	687b      	ldr	r3, [r7, #4]
     c3e:	2200      	movs	r2, #0
     c40:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
     c44:	e015      	b.n	c72 <_ZN22FlapperValveController15ControlMovementEv+0x242>
				
				
			}
			else
			{
				if (closing)
     c46:	687b      	ldr	r3, [r7, #4]
     c48:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
     c4c:	2b00      	cmp	r3, #0
     c4e:	d009      	beq.n	c64 <_ZN22FlapperValveController15ControlMovementEv+0x234>
				{
					if (fullClosedTimeout)
     c50:	687b      	ldr	r3, [r7, #4]
     c52:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
     c56:	b2db      	uxtb	r3, r3
     c58:	2b00      	cmp	r3, #0
     c5a:	d00a      	beq.n	c72 <_ZN22FlapperValveController15ControlMovementEv+0x242>
					{
						StopValveAtLimit();
     c5c:	6878      	ldr	r0, [r7, #4]
     c5e:	4b07      	ldr	r3, [pc, #28]	; (c7c <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
     c60:	4798      	blx	r3
     c62:	e006      	b.n	c72 <_ZN22FlapperValveController15ControlMovementEv+0x242>
					{
					}
				} 
				else
				{
					StopValveinBetween();
     c64:	6878      	ldr	r0, [r7, #4]
     c66:	4b0e      	ldr	r3, [pc, #56]	; (ca0 <_ZN22FlapperValveController15ControlMovementEv+0x270>)
     c68:	4798      	blx	r3
					gotSetpoint=true;
     c6a:	687b      	ldr	r3, [r7, #4]
     c6c:	2201      	movs	r2, #1
     c6e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		
	} 
	else
	{
	}
	return 0;
     c72:	2300      	movs	r3, #0
	
}
     c74:	4618      	mov	r0, r3
     c76:	370c      	adds	r7, #12
     c78:	46bd      	mov	sp, r7
     c7a:	bd90      	pop	{r4, r7, pc}
     c7c:	00000f05 	.word	0x00000f05
     c80:	000005e5 	.word	0x000005e5
     c84:	20001074 	.word	0x20001074
     c88:	0000ec45 	.word	0x0000ec45
     c8c:	00000769 	.word	0x00000769
     c90:	00000ed9 	.word	0x00000ed9
     c94:	000005b9 	.word	0x000005b9
     c98:	0000ebed 	.word	0x0000ebed
     c9c:	00001251 	.word	0x00001251
     ca0:	00000f79 	.word	0x00000f79

00000ca4 <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
     ca4:	b580      	push	{r7, lr}
     ca6:	b084      	sub	sp, #16
     ca8:	af00      	add	r7, sp, #0
     caa:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
     cac:	2052      	movs	r0, #82	; 0x52
     cae:	4b54      	ldr	r3, [pc, #336]	; (e00 <_ZN22FlapperValveController18ResetValvePositionEv+0x15c>)
     cb0:	4798      	blx	r3
     cb2:	4603      	mov	r3, r0
     cb4:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
     cb6:	6878      	ldr	r0, [r7, #4]
     cb8:	4b52      	ldr	r3, [pc, #328]	; (e04 <_ZN22FlapperValveController18ResetValvePositionEv+0x160>)
     cba:	4798      	blx	r3
     cbc:	4603      	mov	r3, r0
     cbe:	2b00      	cmp	r3, #0
     cc0:	f000 8099 	beq.w	df6 <_ZN22FlapperValveController18ResetValvePositionEv+0x152>
	{
		
		localSetpoint=currentMaximum;
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
     cca:	73bb      	strb	r3, [r7, #14]
		
		fv->SetEnable(false);
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     cd0:	2100      	movs	r1, #0
     cd2:	4618      	mov	r0, r3
     cd4:	4b4c      	ldr	r3, [pc, #304]	; (e08 <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
     cd6:	4798      	blx	r3
		fv->SetInvalidPosition(false);
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     cdc:	2100      	movs	r1, #0
     cde:	4618      	mov	r0, r3
     ce0:	4b4a      	ldr	r3, [pc, #296]	; (e0c <_ZN22FlapperValveController18ResetValvePositionEv+0x168>)
     ce2:	4798      	blx	r3
		fv->ClearMoveFault(false);
     ce4:	687b      	ldr	r3, [r7, #4]
     ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     ce8:	2100      	movs	r1, #0
     cea:	4618      	mov	r0, r3
     cec:	4b48      	ldr	r3, [pc, #288]	; (e10 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>)
     cee:	4798      	blx	r3
		delay_ms(100);
     cf0:	2064      	movs	r0, #100	; 0x64
     cf2:	4b48      	ldr	r3, [pc, #288]	; (e14 <_ZN22FlapperValveController18ResetValvePositionEv+0x170>)
     cf4:	4798      	blx	r3
		if (fv->ReadActualPosition()>localSetpoint)
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     cfa:	4618      	mov	r0, r3
     cfc:	4b46      	ldr	r3, [pc, #280]	; (e18 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
     cfe:	4798      	blx	r3
     d00:	4603      	mov	r3, r0
     d02:	461a      	mov	r2, r3
     d04:	7bbb      	ldrb	r3, [r7, #14]
     d06:	429a      	cmp	r2, r3
     d08:	bfcc      	ite	gt
     d0a:	2301      	movgt	r3, #1
     d0c:	2300      	movle	r3, #0
     d0e:	b2db      	uxtb	r3, r3
     d10:	2b00      	cmp	r3, #0
     d12:	d006      	beq.n	d22 <_ZN22FlapperValveController18ResetValvePositionEv+0x7e>
		{
			fv->SetDirection(true);
     d14:	687b      	ldr	r3, [r7, #4]
     d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     d18:	2101      	movs	r1, #1
     d1a:	4618      	mov	r0, r3
     d1c:	4b3f      	ldr	r3, [pc, #252]	; (e1c <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
     d1e:	4798      	blx	r3
     d20:	e005      	b.n	d2e <_ZN22FlapperValveController18ResetValvePositionEv+0x8a>
		}
		else
		{
			fv->SetDirection(false);
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     d26:	2100      	movs	r1, #0
     d28:	4618      	mov	r0, r3
     d2a:	4b3c      	ldr	r3, [pc, #240]	; (e1c <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
     d2c:	4798      	blx	r3
		}
		fv->SetInvalidPosition(true);
     d2e:	687b      	ldr	r3, [r7, #4]
     d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     d32:	2101      	movs	r1, #1
     d34:	4618      	mov	r0, r3
     d36:	4b35      	ldr	r3, [pc, #212]	; (e0c <_ZN22FlapperValveController18ResetValvePositionEv+0x168>)
     d38:	4798      	blx	r3
		fv->ClearMoveFault(true);
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     d3e:	2101      	movs	r1, #1
     d40:	4618      	mov	r0, r3
     d42:	4b33      	ldr	r3, [pc, #204]	; (e10 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>)
     d44:	4798      	blx	r3
		fv->WriteSetpoint(localSetpoint);
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     d4a:	7bba      	ldrb	r2, [r7, #14]
     d4c:	4611      	mov	r1, r2
     d4e:	4618      	mov	r0, r3
     d50:	4b33      	ldr	r3, [pc, #204]	; (e20 <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
     d52:	4798      	blx	r3
		

		currentPosition=fv->ReadActualPosition();
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     d58:	4618      	mov	r0, r3
     d5a:	4b2f      	ldr	r3, [pc, #188]	; (e18 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
     d5c:	4798      	blx	r3
     d5e:	4603      	mov	r3, r0
     d60:	461a      	mov	r2, r3
     d62:	687b      	ldr	r3, [r7, #4]
     d64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		
		resetTimeout=false;
     d68:	687b      	ldr	r3, [r7, #4]
     d6a:	2200      	movs	r2, #0
     d6c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValveTimeout),1000);
     d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     d74:	492b      	ldr	r1, [pc, #172]	; (e24 <_ZN22FlapperValveController18ResetValvePositionEv+0x180>)
     d76:	482c      	ldr	r0, [pc, #176]	; (e28 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>)
     d78:	4b2c      	ldr	r3, [pc, #176]	; (e2c <_ZN22FlapperValveController18ResetValvePositionEv+0x188>)
     d7a:	4798      	blx	r3
		
		fv->SetEnable(true);
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     d80:	2101      	movs	r1, #1
     d82:	4618      	mov	r0, r3
     d84:	4b20      	ldr	r3, [pc, #128]	; (e08 <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
     d86:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
     d8e:	461a      	mov	r2, r3
     d90:	7bbb      	ldrb	r3, [r7, #14]
     d92:	1ad3      	subs	r3, r2, r3
     d94:	2b00      	cmp	r3, #0
     d96:	bfb8      	it	lt
     d98:	425b      	neglt	r3, r3
     d9a:	2b06      	cmp	r3, #6
     d9c:	bfcc      	ite	gt
     d9e:	2301      	movgt	r3, #1
     da0:	2300      	movle	r3, #0
     da2:	b2db      	uxtb	r3, r3
     da4:	461a      	mov	r2, r3
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
     dac:	b2db      	uxtb	r3, r3
     dae:	f083 0301 	eor.w	r3, r3, #1
     db2:	b2db      	uxtb	r3, r3
     db4:	4013      	ands	r3, r2
     db6:	2b00      	cmp	r3, #0
     db8:	bf14      	ite	ne
     dba:	2301      	movne	r3, #1
     dbc:	2300      	moveq	r3, #0
     dbe:	b2db      	uxtb	r3, r3
     dc0:	2b00      	cmp	r3, #0
     dc2:	d00d      	beq.n	de0 <_ZN22FlapperValveController18ResetValvePositionEv+0x13c>

		{
			gpio_toggle_pin_level(LED0);
     dc4:	2052      	movs	r0, #82	; 0x52
     dc6:	4b1a      	ldr	r3, [pc, #104]	; (e30 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
     dc8:	4798      	blx	r3
			currentPosition=fv->ReadActualPosition();
     dca:	687b      	ldr	r3, [r7, #4]
     dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     dce:	4618      	mov	r0, r3
     dd0:	4b11      	ldr	r3, [pc, #68]	; (e18 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
     dd2:	4798      	blx	r3
     dd4:	4603      	mov	r3, r0
     dd6:	461a      	mov	r2, r3
     dd8:	687b      	ldr	r3, [r7, #4]
     dda:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
     dde:	e7d3      	b.n	d88 <_ZN22FlapperValveController18ResetValvePositionEv+0xe4>

		}
		fv->SetEnable(false);
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     de4:	2100      	movs	r1, #0
     de6:	4618      	mov	r0, r3
     de8:	4b07      	ldr	r3, [pc, #28]	; (e08 <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
     dea:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
     dec:	7bfb      	ldrb	r3, [r7, #15]
     dee:	4619      	mov	r1, r3
     df0:	2052      	movs	r0, #82	; 0x52
     df2:	4b10      	ldr	r3, [pc, #64]	; (e34 <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
     df4:	4798      	blx	r3
	} 
	else
	{
	}
}
     df6:	bf00      	nop
     df8:	3710      	adds	r7, #16
     dfa:	46bd      	mov	sp, r7
     dfc:	bd80      	pop	{r7, pc}
     dfe:	bf00      	nop
     e00:	0000057d 	.word	0x0000057d
     e04:	00000861 	.word	0x00000861
     e08:	000017c1 	.word	0x000017c1
     e0c:	00001931 	.word	0x00001931
     e10:	000018b9 	.word	0x000018b9
     e14:	000034c5 	.word	0x000034c5
     e18:	000019e1 	.word	0x000019e1
     e1c:	00001841 	.word	0x00001841
     e20:	000019a9 	.word	0x000019a9
     e24:	00000605 	.word	0x00000605
     e28:	20001074 	.word	0x20001074
     e2c:	0000ec45 	.word	0x0000ec45
     e30:	0000054d 	.word	0x0000054d
     e34:	00000515 	.word	0x00000515

00000e38 <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
     e38:	b580      	push	{r7, lr}
     e3a:	b082      	sub	sp, #8
     e3c:	af00      	add	r7, sp, #0
     e3e:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
     e46:	2b00      	cmp	r3, #0
     e48:	d014      	beq.n	e74 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
     e50:	2b00      	cmp	r3, #0
     e52:	d003      	beq.n	e5c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
     e54:	6878      	ldr	r0, [r7, #4]
     e56:	4b0e      	ldr	r3, [pc, #56]	; (e90 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
     e58:	4798      	blx	r3
     e5a:	e013      	b.n	e84 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
     e5c:	687b      	ldr	r3, [r7, #4]
     e5e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
     e62:	4619      	mov	r1, r3
     e64:	6878      	ldr	r0, [r7, #4]
     e66:	4b0b      	ldr	r3, [pc, #44]	; (e94 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
     e68:	4798      	blx	r3
			NBC_Activated=false;
     e6a:	687b      	ldr	r3, [r7, #4]
     e6c:	2200      	movs	r2, #0
     e6e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
     e72:	e007      	b.n	e84 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
     e74:	21ff      	movs	r1, #255	; 0xff
     e76:	6878      	ldr	r0, [r7, #4]
     e78:	4b06      	ldr	r3, [pc, #24]	; (e94 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
     e7a:	4798      	blx	r3
			NBC_Activated=true;
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	2201      	movs	r2, #1
     e80:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}

	return 0;
     e84:	2300      	movs	r3, #0
	
}
     e86:	4618      	mov	r0, r3
     e88:	3708      	adds	r7, #8
     e8a:	46bd      	mov	sp, r7
     e8c:	bd80      	pop	{r7, pc}
     e8e:	bf00      	nop
     e90:	00000a31 	.word	0x00000a31
     e94:	000010cd 	.word	0x000010cd

00000e98 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
     e98:	b480      	push	{r7}
     e9a:	b083      	sub	sp, #12
     e9c:	af00      	add	r7, sp, #0
     e9e:	6078      	str	r0, [r7, #4]
	NBC_Mode=(dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1]);
     ea0:	687b      	ldr	r3, [r7, #4]
     ea2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
     ea6:	461a      	mov	r2, r3
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
     eae:	4013      	ands	r3, r2
     eb0:	2b00      	cmp	r3, #0
     eb2:	bf14      	ite	ne
     eb4:	2301      	movne	r3, #1
     eb6:	2300      	moveq	r3, #0
     eb8:	b2da      	uxtb	r2, r3
     eba:	687b      	ldr	r3, [r7, #4]
     ebc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	currentMaximum=255;
     ec0:	687b      	ldr	r3, [r7, #4]
     ec2:	22ff      	movs	r2, #255	; 0xff
     ec4:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	return NBC_Mode;
     ec8:	687b      	ldr	r3, [r7, #4]
     eca:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
}
     ece:	4618      	mov	r0, r3
     ed0:	370c      	adds	r7, #12
     ed2:	46bd      	mov	sp, r7
     ed4:	bc80      	pop	{r7}
     ed6:	4770      	bx	lr

00000ed8 <_ZN22FlapperValveController9StopMotorEv>:


uint8_t	FlapperValveController::StopMotor(){
     ed8:	b580      	push	{r7, lr}
     eda:	b082      	sub	sp, #8
     edc:	af00      	add	r7, sp, #0
     ede:	6078      	str	r0, [r7, #4]
	fv->SetEnable(false);
     ee0:	687b      	ldr	r3, [r7, #4]
     ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     ee4:	2100      	movs	r1, #0
     ee6:	4618      	mov	r0, r3
     ee8:	4b05      	ldr	r3, [pc, #20]	; (f00 <_ZN22FlapperValveController9StopMotorEv+0x28>)
     eea:	4798      	blx	r3
	flapperValveIsMoving=false;
     eec:	687b      	ldr	r3, [r7, #4]
     eee:	2200      	movs	r2, #0
     ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	
	return 0;
     ef4:	2300      	movs	r3, #0
}
     ef6:	4618      	mov	r0, r3
     ef8:	3708      	adds	r7, #8
     efa:	46bd      	mov	sp, r7
     efc:	bd80      	pop	{r7, pc}
     efe:	bf00      	nop
     f00:	000017c1 	.word	0x000017c1

00000f04 <_ZN22FlapperValveController16StopValveAtLimitEv>:
void	FlapperValveController::StopValveAtLimit(void){
     f04:	b580      	push	{r7, lr}
     f06:	b082      	sub	sp, #8
     f08:	af00      	add	r7, sp, #0
     f0a:	6078      	str	r0, [r7, #4]
		if (closing)
     f0c:	687b      	ldr	r3, [r7, #4]
     f0e:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
     f12:	2b00      	cmp	r3, #0
     f14:	d003      	beq.n	f1e <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	2200      	movs	r2, #0
     f1a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		}
	
		StopMotor();
     f1e:	6878      	ldr	r0, [r7, #4]
     f20:	4b10      	ldr	r3, [pc, #64]	; (f64 <_ZN22FlapperValveController16StopValveAtLimitEv+0x60>)
     f22:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
     f24:	4910      	ldr	r1, [pc, #64]	; (f68 <_ZN22FlapperValveController16StopValveAtLimitEv+0x64>)
     f26:	4811      	ldr	r0, [pc, #68]	; (f6c <_ZN22FlapperValveController16StopValveAtLimitEv+0x68>)
     f28:	4b11      	ldr	r3, [pc, #68]	; (f70 <_ZN22FlapperValveController16StopValveAtLimitEv+0x6c>)
     f2a:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveFullyClossed));
     f2c:	4911      	ldr	r1, [pc, #68]	; (f74 <_ZN22FlapperValveController16StopValveAtLimitEv+0x70>)
     f2e:	480f      	ldr	r0, [pc, #60]	; (f6c <_ZN22FlapperValveController16StopValveAtLimitEv+0x68>)
     f30:	4b0f      	ldr	r3, [pc, #60]	; (f70 <_ZN22FlapperValveController16StopValveAtLimitEv+0x6c>)
     f32:	4798      	blx	r3
		timeoutFlapperValveController=false;
     f34:	687b      	ldr	r3, [r7, #4]
     f36:	2200      	movs	r2, #0
     f38:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
     f3c:	687b      	ldr	r3, [r7, #4]
     f3e:	2200      	movs	r2, #0
     f40:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		unLockTimeout=false;
     f44:	687b      	ldr	r3, [r7, #4]
     f46:	2200      	movs	r2, #0
     f48:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		paused=false;
     f4c:	687b      	ldr	r3, [r7, #4]
     f4e:	2200      	movs	r2, #0
     f50:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		keepControlling=false;
     f54:	687b      	ldr	r3, [r7, #4]
     f56:	2200      	movs	r2, #0
     f58:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
     f5c:	bf00      	nop
     f5e:	3708      	adds	r7, #8
     f60:	46bd      	mov	sp, r7
     f62:	bd80      	pop	{r7, pc}
     f64:	00000ed9 	.word	0x00000ed9
     f68:	000005b9 	.word	0x000005b9
     f6c:	20001074 	.word	0x20001074
     f70:	0000ebed 	.word	0x0000ebed
     f74:	000005e5 	.word	0x000005e5

00000f78 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
     f78:	b580      	push	{r7, lr}
     f7a:	b082      	sub	sp, #8
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
		StopMotor();
     f80:	6878      	ldr	r0, [r7, #4]
     f82:	4b0d      	ldr	r3, [pc, #52]	; (fb8 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
     f84:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
     f86:	490d      	ldr	r1, [pc, #52]	; (fbc <_ZN22FlapperValveController18StopValveinBetweenEv+0x44>)
     f88:	480d      	ldr	r0, [pc, #52]	; (fc0 <_ZN22FlapperValveController18StopValveinBetweenEv+0x48>)
     f8a:	4b0e      	ldr	r3, [pc, #56]	; (fc4 <_ZN22FlapperValveController18StopValveinBetweenEv+0x4c>)
     f8c:	4798      	blx	r3
		timeoutFlapperValveController=false;
     f8e:	687b      	ldr	r3, [r7, #4]
     f90:	2200      	movs	r2, #0
     f92:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		paused=false;
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	2200      	movs	r2, #0
     f9a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		timeoutKeepControlling=false;
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	2200      	movs	r2, #0
     fa2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=true;
     fa6:	687b      	ldr	r3, [r7, #4]
     fa8:	2201      	movs	r2, #1
     faa:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
     fae:	bf00      	nop
     fb0:	3708      	adds	r7, #8
     fb2:	46bd      	mov	sp, r7
     fb4:	bd80      	pop	{r7, pc}
     fb6:	bf00      	nop
     fb8:	00000ed9 	.word	0x00000ed9
     fbc:	000005b9 	.word	0x000005b9
     fc0:	20001074 	.word	0x20001074
     fc4:	0000ebed 	.word	0x0000ebed

00000fc8 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
     fc8:	b580      	push	{r7, lr}
     fca:	b084      	sub	sp, #16
     fcc:	af00      	add	r7, sp, #0
     fce:	6078      	str	r0, [r7, #4]
     fd0:	460b      	mov	r3, r1
     fd2:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
     fd4:	78fb      	ldrb	r3, [r7, #3]
     fd6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
     fda:	2b00      	cmp	r3, #0
     fdc:	dd0c      	ble.n	ff8 <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
     fde:	78fb      	ldrb	r3, [r7, #3]
     fe0:	43db      	mvns	r3, r3
     fe2:	009b      	lsls	r3, r3, #2
     fe4:	2b00      	cmp	r3, #0
     fe6:	da00      	bge.n	fea <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
     fe8:	33ff      	adds	r3, #255	; 0xff
     fea:	121b      	asrs	r3, r3, #8
     fec:	461a      	mov	r2, r3
     fee:	4b11      	ldr	r3, [pc, #68]	; (1034 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
     ff0:	4610      	mov	r0, r2
     ff2:	4798      	blx	r3
     ff4:	4603      	mov	r3, r0
     ff6:	e00b      	b.n	1010 <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
     ff8:	78fb      	ldrb	r3, [r7, #3]
     ffa:	3bff      	subs	r3, #255	; 0xff
     ffc:	009b      	lsls	r3, r3, #2
     ffe:	2b00      	cmp	r3, #0
    1000:	da00      	bge.n	1004 <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
    1002:	33ff      	adds	r3, #255	; 0xff
    1004:	121b      	asrs	r3, r3, #8
    1006:	461a      	mov	r2, r3
    1008:	4b0a      	ldr	r3, [pc, #40]	; (1034 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
    100a:	4610      	mov	r0, r2
    100c:	4798      	blx	r3
    100e:	4603      	mov	r3, r0
    1010:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance+1;
    1012:	4b09      	ldr	r3, [pc, #36]	; (1038 <_ZN22FlapperValveController16CorrectToleranceEh+0x70>)
    1014:	68f8      	ldr	r0, [r7, #12]
    1016:	4798      	blx	r3
    1018:	4603      	mov	r3, r0
    101a:	b2db      	uxtb	r3, r3
    101c:	3301      	adds	r3, #1
    101e:	b2da      	uxtb	r2, r3
    1020:	687b      	ldr	r3, [r7, #4]
    1022:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	return tolerance;
    1026:	687b      	ldr	r3, [r7, #4]
    1028:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
}
    102c:	4618      	mov	r0, r3
    102e:	3710      	adds	r7, #16
    1030:	46bd      	mov	sp, r7
    1032:	bd80      	pop	{r7, pc}
    1034:	00010669 	.word	0x00010669
    1038:	00010711 	.word	0x00010711

0000103c <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
    103c:	b580      	push	{r7, lr}
    103e:	b082      	sub	sp, #8
    1040:	af00      	add	r7, sp, #0
    1042:	6078      	str	r0, [r7, #4]
	if (fv->controlOutputs.niAlcFvMotorEnable)
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    104c:	2b00      	cmp	r3, #0
    104e:	d008      	beq.n	1062 <_ZN22FlapperValveController10StartMotorEv+0x26>
	{
		fv->SetEnable(false);
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1054:	2100      	movs	r1, #0
    1056:	4618      	mov	r0, r3
    1058:	4b09      	ldr	r3, [pc, #36]	; (1080 <_ZN22FlapperValveController10StartMotorEv+0x44>)
    105a:	4798      	blx	r3
		delay_ms(10);
    105c:	200a      	movs	r0, #10
    105e:	4b09      	ldr	r3, [pc, #36]	; (1084 <_ZN22FlapperValveController10StartMotorEv+0x48>)
    1060:	4798      	blx	r3
	}
	
		
	fv->SetEnable(true);
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1066:	2101      	movs	r1, #1
    1068:	4618      	mov	r0, r3
    106a:	4b05      	ldr	r3, [pc, #20]	; (1080 <_ZN22FlapperValveController10StartMotorEv+0x44>)
    106c:	4798      	blx	r3
	flapperValveIsMoving=true;
    106e:	687b      	ldr	r3, [r7, #4]
    1070:	2201      	movs	r2, #1
    1072:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	return 0;
    1076:	2300      	movs	r3, #0
}
    1078:	4618      	mov	r0, r3
    107a:	3708      	adds	r7, #8
    107c:	46bd      	mov	sp, r7
    107e:	bd80      	pop	{r7, pc}
    1080:	000017c1 	.word	0x000017c1
    1084:	000034c5 	.word	0x000034c5

00001088 <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
    1088:	b580      	push	{r7, lr}
    108a:	b082      	sub	sp, #8
    108c:	af00      	add	r7, sp, #0
    108e:	6078      	str	r0, [r7, #4]
	StopMotor();
    1090:	6878      	ldr	r0, [r7, #4]
    1092:	4b0d      	ldr	r3, [pc, #52]	; (10c8 <_ZN22FlapperValveController15StopControllingEv+0x40>)
    1094:	4798      	blx	r3
	timeoutKeepControlling=false;
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	2200      	movs	r2, #0
    109a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	timeoutFlapperValveController=false;
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	2200      	movs	r2, #0
    10a2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	isControlling=false;
    10a6:	687b      	ldr	r3, [r7, #4]
    10a8:	2200      	movs	r2, #0
    10aa:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	keepControlling=false;
    10ae:	687b      	ldr	r3, [r7, #4]
    10b0:	2200      	movs	r2, #0
    10b2:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	controllerEnabled=false;
    10b6:	687b      	ldr	r3, [r7, #4]
    10b8:	2200      	movs	r2, #0
    10ba:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	return 0;
    10be:	2300      	movs	r3, #0
}
    10c0:	4618      	mov	r0, r3
    10c2:	3708      	adds	r7, #8
    10c4:	46bd      	mov	sp, r7
    10c6:	bd80      	pop	{r7, pc}
    10c8:	00000ed9 	.word	0x00000ed9

000010cc <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
    10cc:	b580      	push	{r7, lr}
    10ce:	b082      	sub	sp, #8
    10d0:	af00      	add	r7, sp, #0
    10d2:	6078      	str	r0, [r7, #4]
    10d4:	460b      	mov	r3, r1
    10d6:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
    10d8:	78fb      	ldrb	r3, [r7, #3]
    10da:	4619      	mov	r1, r3
    10dc:	6878      	ldr	r0, [r7, #4]
    10de:	4b25      	ldr	r3, [pc, #148]	; (1174 <_ZN22FlapperValveController16StartControllingEh+0xa8>)
    10e0:	4798      	blx	r3
    10e2:	4603      	mov	r3, r0
    10e4:	461a      	mov	r2, r3
    10e6:	687b      	ldr	r3, [r7, #4]
    10e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		CorrectTolerance(setpoint);
    10ec:	687b      	ldr	r3, [r7, #4]
    10ee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    10f2:	4619      	mov	r1, r3
    10f4:	6878      	ldr	r0, [r7, #4]
    10f6:	4b20      	ldr	r3, [pc, #128]	; (1178 <_ZN22FlapperValveController16StartControllingEh+0xac>)
    10f8:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
    10fa:	687b      	ldr	r3, [r7, #4]
    10fc:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
    1100:	4b1e      	ldr	r3, [pc, #120]	; (117c <_ZN22FlapperValveController16StartControllingEh+0xb0>)
    1102:	4610      	mov	r0, r2
    1104:	4798      	blx	r3
    1106:	4602      	mov	r2, r0
    1108:	687b      	ldr	r3, [r7, #4]
    110a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		timeoutFlapperValveController=false;
    110e:	687b      	ldr	r3, [r7, #4]
    1110:	2200      	movs	r2, #0
    1112:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	2200      	movs	r2, #0
    111a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=false;
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	2200      	movs	r2, #0
    1122:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
		controllerEnabled=true;
    1126:	687b      	ldr	r3, [r7, #4]
    1128:	2201      	movs	r2, #1
    112a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		unLockTimeout=false;
    112e:	687b      	ldr	r3, [r7, #4]
    1130:	2200      	movs	r2, #0
    1132:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_UNLOCK_TIMEOUT);
    1136:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    113a:	4911      	ldr	r1, [pc, #68]	; (1180 <_ZN22FlapperValveController16StartControllingEh+0xb4>)
    113c:	4811      	ldr	r0, [pc, #68]	; (1184 <_ZN22FlapperValveController16StartControllingEh+0xb8>)
    113e:	4b12      	ldr	r3, [pc, #72]	; (1188 <_ZN22FlapperValveController16StartControllingEh+0xbc>)
    1140:	4798      	blx	r3
		isControlling=true;
    1142:	687b      	ldr	r3, [r7, #4]
    1144:	2201      	movs	r2, #1
    1146:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
    114a:	6878      	ldr	r0, [r7, #4]
    114c:	4b0f      	ldr	r3, [pc, #60]	; (118c <_ZN22FlapperValveController16StartControllingEh+0xc0>)
    114e:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
    1150:	6878      	ldr	r0, [r7, #4]
    1152:	4b0f      	ldr	r3, [pc, #60]	; (1190 <_ZN22FlapperValveController16StartControllingEh+0xc4>)
    1154:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
    1156:	687b      	ldr	r3, [r7, #4]
    1158:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    115c:	b2db      	uxtb	r3, r3
    115e:	2b00      	cmp	r3, #0
    1160:	d003      	beq.n	116a <_ZN22FlapperValveController16StartControllingEh+0x9e>
		{
			paused=true;
    1162:	687b      	ldr	r3, [r7, #4]
    1164:	2201      	movs	r2, #1
    1166:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		return 0;
    116a:	2300      	movs	r3, #0
	
}
    116c:	4618      	mov	r0, r3
    116e:	3708      	adds	r7, #8
    1170:	46bd      	mov	sp, r7
    1172:	bd80      	pop	{r7, pc}
    1174:	00001195 	.word	0x00001195
    1178:	00000fc9 	.word	0x00000fc9
    117c:	00010661 	.word	0x00010661
    1180:	000005b9 	.word	0x000005b9
    1184:	20001074 	.word	0x20001074
    1188:	0000ec45 	.word	0x0000ec45
    118c:	0000078d 	.word	0x0000078d
    1190:	00000a31 	.word	0x00000a31

00001194 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
    1194:	b580      	push	{r7, lr}
    1196:	b082      	sub	sp, #8
    1198:	af00      	add	r7, sp, #0
    119a:	6078      	str	r0, [r7, #4]
    119c:	460b      	mov	r3, r1
    119e:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
    11a0:	6878      	ldr	r0, [r7, #4]
    11a2:	4b2a      	ldr	r3, [pc, #168]	; (124c <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
    11a4:	4798      	blx	r3
    11a6:	4603      	mov	r3, r0
    11a8:	2b00      	cmp	r3, #0
    11aa:	d004      	beq.n	11b6 <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
    11ac:	687b      	ldr	r3, [r7, #4]
    11ae:	78fa      	ldrb	r2, [r7, #3]
    11b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    11b4:	e043      	b.n	123e <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
    11b6:	687b      	ldr	r3, [r7, #4]
    11b8:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    11bc:	2b00      	cmp	r3, #0
    11be:	d01f      	beq.n	1200 <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
    11c0:	687b      	ldr	r3, [r7, #4]
    11c2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    11c6:	43db      	mvns	r3, r3
    11c8:	b2da      	uxtb	r2, r3
    11ca:	687b      	ldr	r3, [r7, #4]
    11cc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			if (sp>(standAlonePosition))
    11d0:	78fb      	ldrb	r3, [r7, #3]
    11d2:	687a      	ldr	r2, [r7, #4]
    11d4:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
    11d8:	4293      	cmp	r3, r2
    11da:	dd0c      	ble.n	11f6 <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
    11dc:	687b      	ldr	r3, [r7, #4]
    11de:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
    11e2:	687b      	ldr	r3, [r7, #4]
    11e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=standAlonePosition;
    11e8:	687b      	ldr	r3, [r7, #4]
    11ea:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
    11ee:	687b      	ldr	r3, [r7, #4]
    11f0:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    11f4:	e023      	b.n	123e <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
    11f6:	687b      	ldr	r3, [r7, #4]
    11f8:	78fa      	ldrb	r2, [r7, #3]
    11fa:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    11fe:	e01e      	b.n	123e <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
    1200:	687b      	ldr	r3, [r7, #4]
    1202:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
    1206:	43db      	mvns	r3, r3
    1208:	b2da      	uxtb	r2, r3
    120a:	687b      	ldr	r3, [r7, #4]
    120c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
			if (sp>maximumPosition)
    1210:	78fb      	ldrb	r3, [r7, #3]
    1212:	687a      	ldr	r2, [r7, #4]
    1214:	f892 20bc 	ldrb.w	r2, [r2, #188]	; 0xbc
    1218:	4293      	cmp	r3, r2
    121a:	dd0c      	ble.n	1236 <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
    121c:	687b      	ldr	r3, [r7, #4]
    121e:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
    1222:	687b      	ldr	r3, [r7, #4]
    1224:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=maximumPosition;
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
    122e:	687b      	ldr	r3, [r7, #4]
    1230:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    1234:	e003      	b.n	123e <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
    1236:	687b      	ldr	r3, [r7, #4]
    1238:	78fa      	ldrb	r2, [r7, #3]
    123a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			}
		}
	}
	
	return setpoint;
    123e:	687b      	ldr	r3, [r7, #4]
    1240:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
	
}
    1244:	4618      	mov	r0, r3
    1246:	3708      	adds	r7, #8
    1248:	46bd      	mov	sp, r7
    124a:	bd80      	pop	{r7, pc}
    124c:	00000e99 	.word	0x00000e99

00001250 <_ZN22FlapperValveController15KeepControllingEh>:
	
uint8_t	FlapperValveController::StartControlling(void){
	return	StartControlling(currentPosition);
	
}
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
    1250:	b580      	push	{r7, lr}
    1252:	b082      	sub	sp, #8
    1254:	af00      	add	r7, sp, #0
    1256:	6078      	str	r0, [r7, #4]
    1258:	460b      	mov	r3, r1
    125a:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
    125c:	687b      	ldr	r3, [r7, #4]
    125e:	2200      	movs	r2, #0
    1260:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	2201      	movs	r2, #1
    1268:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
    126c:	6878      	ldr	r0, [r7, #4]
    126e:	4b05      	ldr	r3, [pc, #20]	; (1284 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
    1270:	4798      	blx	r3
		keepControlling=false;
    1272:	687b      	ldr	r3, [r7, #4]
    1274:	2200      	movs	r2, #0
    1276:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

	return 0;
    127a:	2300      	movs	r3, #0
	
}
    127c:	4618      	mov	r0, r3
    127e:	3708      	adds	r7, #8
    1280:	46bd      	mov	sp, r7
    1282:	bd80      	pop	{r7, pc}
    1284:	0000078d 	.word	0x0000078d

00001288 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
    1288:	b590      	push	{r4, r7, lr}
    128a:	b085      	sub	sp, #20
    128c:	af00      	add	r7, sp, #0
    128e:	60f8      	str	r0, [r7, #12]
	currentPosition=fv->ReadActualPosition();
    1290:	68fb      	ldr	r3, [r7, #12]
    1292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1294:	4618      	mov	r0, r3
    1296:	4b2f      	ldr	r3, [pc, #188]	; (1354 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xcc>)
    1298:	4798      	blx	r3
    129a:	4603      	mov	r3, r0
    129c:	461a      	mov	r2, r3
    129e:	68fb      	ldr	r3, [r7, #12]
    12a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	dataStruct.actualPosition=currentPosition;
    12a4:	68fb      	ldr	r3, [r7, #12]
    12a6:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    12aa:	68fb      	ldr	r3, [r7, #12]
    12ac:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	dataStruct.setPointPosition=setpoint;
    12b0:	68fb      	ldr	r3, [r7, #12]
    12b2:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
    12b6:	68fb      	ldr	r3, [r7, #12]
    12b8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	dataStruct.inputStatus=fv->ReadStatusInputs();
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    12c0:	68fc      	ldr	r4, [r7, #12]
    12c2:	463b      	mov	r3, r7
    12c4:	4611      	mov	r1, r2
    12c6:	4618      	mov	r0, r3
    12c8:	4b23      	ldr	r3, [pc, #140]	; (1358 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd0>)
    12ca:	4798      	blx	r3
    12cc:	f104 0380 	add.w	r3, r4, #128	; 0x80
    12d0:	463a      	mov	r2, r7
    12d2:	6810      	ldr	r0, [r2, #0]
    12d4:	6018      	str	r0, [r3, #0]
    12d6:	8892      	ldrh	r2, [r2, #4]
    12d8:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=fv->ReadControlStatus();
    12da:	68fb      	ldr	r3, [r7, #12]
    12dc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    12de:	68fc      	ldr	r4, [r7, #12]
    12e0:	463b      	mov	r3, r7
    12e2:	4611      	mov	r1, r2
    12e4:	4618      	mov	r0, r3
    12e6:	4b1d      	ldr	r3, [pc, #116]	; (135c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd4>)
    12e8:	4798      	blx	r3
    12ea:	f104 0386 	add.w	r3, r4, #134	; 0x86
    12ee:	463a      	mov	r2, r7
    12f0:	6811      	ldr	r1, [r2, #0]
    12f2:	6852      	ldr	r2, [r2, #4]
    12f4:	6019      	str	r1, [r3, #0]
    12f6:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
    12f8:	68fb      	ldr	r3, [r7, #12]
    12fa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    12fe:	b2da      	uxtb	r2, r3
    1300:	68fb      	ldr	r3, [r7, #12]
    1302:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	dataStruct.controllerStatus.isControlling=isControlling;
    1306:	68fb      	ldr	r3, [r7, #12]
    1308:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
    130c:	68fb      	ldr	r3, [r7, #12]
    130e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
    1312:	68fb      	ldr	r3, [r7, #12]
    1314:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
    1318:	68fb      	ldr	r3, [r7, #12]
    131a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	if (standAloneActivated)
    131e:	68fb      	ldr	r3, [r7, #12]
    1320:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    1324:	2b00      	cmp	r3, #0
    1326:	d008      	beq.n	133a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xb2>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    1328:	68fb      	ldr	r3, [r7, #12]
    132a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    132e:	43db      	mvns	r3, r3
    1330:	b2da      	uxtb	r2, r3
    1332:	68fb      	ldr	r3, [r7, #12]
    1334:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
	}
}
    1338:	e007      	b.n	134a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc2>
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
    133a:	68fb      	ldr	r3, [r7, #12]
    133c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
    1340:	43db      	mvns	r3, r3
    1342:	b2da      	uxtb	r2, r3
    1344:	68fb      	ldr	r3, [r7, #12]
    1346:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
}
    134a:	bf00      	nop
    134c:	3714      	adds	r7, #20
    134e:	46bd      	mov	sp, r7
    1350:	bd90      	pop	{r4, r7, pc}
    1352:	bf00      	nop
    1354:	000019e1 	.word	0x000019e1
    1358:	00001765 	.word	0x00001765
    135c:	00001709 	.word	0x00001709

00001360 <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return fv->ReadActualPosition();
}
bool	FlapperValveController::Selftest(void){
    1360:	b580      	push	{r7, lr}
    1362:	b084      	sub	sp, #16
    1364:	af00      	add	r7, sp, #0
    1366:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=210;
    1368:	23d2      	movs	r3, #210	; 0xd2
    136a:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	4a4d      	ldr	r2, [pc, #308]	; (14a4 <_ZN22FlapperValveController8SelftestEv+0x144>)
    1370:	33bf      	adds	r3, #191	; 0xbf
    1372:	8812      	ldrh	r2, [r2, #0]
    1374:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
    1376:	6878      	ldr	r0, [r7, #4]
    1378:	4b4b      	ldr	r3, [pc, #300]	; (14a8 <_ZN22FlapperValveController8SelftestEv+0x148>)
    137a:	4798      	blx	r3
	fv->SetEnable(false);
    137c:	687b      	ldr	r3, [r7, #4]
    137e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1380:	2100      	movs	r1, #0
    1382:	4618      	mov	r0, r3
    1384:	4b49      	ldr	r3, [pc, #292]	; (14ac <_ZN22FlapperValveController8SelftestEv+0x14c>)
    1386:	4798      	blx	r3
	fv->SetInvalidPosition(false);
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    138c:	2100      	movs	r1, #0
    138e:	4618      	mov	r0, r3
    1390:	4b47      	ldr	r3, [pc, #284]	; (14b0 <_ZN22FlapperValveController8SelftestEv+0x150>)
    1392:	4798      	blx	r3
	fv->ClearMoveFault(false);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1398:	2100      	movs	r1, #0
    139a:	4618      	mov	r0, r3
    139c:	4b45      	ldr	r3, [pc, #276]	; (14b4 <_ZN22FlapperValveController8SelftestEv+0x154>)
    139e:	4798      	blx	r3
	delay_ms(100);
    13a0:	2064      	movs	r0, #100	; 0x64
    13a2:	4b45      	ldr	r3, [pc, #276]	; (14b8 <_ZN22FlapperValveController8SelftestEv+0x158>)
    13a4:	4798      	blx	r3
	fv->ClearMoveFault(true);
    13a6:	687b      	ldr	r3, [r7, #4]
    13a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    13aa:	2101      	movs	r1, #1
    13ac:	4618      	mov	r0, r3
    13ae:	4b41      	ldr	r3, [pc, #260]	; (14b4 <_ZN22FlapperValveController8SelftestEv+0x154>)
    13b0:	4798      	blx	r3
	fv->WriteSetpoint(localSetpoint);
    13b2:	687b      	ldr	r3, [r7, #4]
    13b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    13b6:	7bba      	ldrb	r2, [r7, #14]
    13b8:	4611      	mov	r1, r2
    13ba:	4618      	mov	r0, r3
    13bc:	4b3f      	ldr	r3, [pc, #252]	; (14bc <_ZN22FlapperValveController8SelftestEv+0x15c>)
    13be:	4798      	blx	r3
	fv->SetDirection(false);
    13c0:	687b      	ldr	r3, [r7, #4]
    13c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    13c4:	2100      	movs	r1, #0
    13c6:	4618      	mov	r0, r3
    13c8:	4b3d      	ldr	r3, [pc, #244]	; (14c0 <_ZN22FlapperValveController8SelftestEv+0x160>)
    13ca:	4798      	blx	r3
	if (fv->ReadActualPosition()>localSetpoint)
    13cc:	687b      	ldr	r3, [r7, #4]
    13ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    13d0:	4618      	mov	r0, r3
    13d2:	4b3c      	ldr	r3, [pc, #240]	; (14c4 <_ZN22FlapperValveController8SelftestEv+0x164>)
    13d4:	4798      	blx	r3
    13d6:	4603      	mov	r3, r0
    13d8:	461a      	mov	r2, r3
    13da:	7bbb      	ldrb	r3, [r7, #14]
    13dc:	429a      	cmp	r2, r3
    13de:	bfcc      	ite	gt
    13e0:	2301      	movgt	r3, #1
    13e2:	2300      	movle	r3, #0
    13e4:	b2db      	uxtb	r3, r3
    13e6:	2b00      	cmp	r3, #0
    13e8:	d006      	beq.n	13f8 <_ZN22FlapperValveController8SelftestEv+0x98>
	{
		fv->SetDirection(true);
    13ea:	687b      	ldr	r3, [r7, #4]
    13ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    13ee:	2101      	movs	r1, #1
    13f0:	4618      	mov	r0, r3
    13f2:	4b33      	ldr	r3, [pc, #204]	; (14c0 <_ZN22FlapperValveController8SelftestEv+0x160>)
    13f4:	4798      	blx	r3
    13f6:	e005      	b.n	1404 <_ZN22FlapperValveController8SelftestEv+0xa4>
	}
	else
	{
		fv->SetDirection(false);
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    13fc:	2100      	movs	r1, #0
    13fe:	4618      	mov	r0, r3
    1400:	4b2f      	ldr	r3, [pc, #188]	; (14c0 <_ZN22FlapperValveController8SelftestEv+0x160>)
    1402:	4798      	blx	r3
	}
	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),10000);
    1404:	f242 7210 	movw	r2, #10000	; 0x2710
    1408:	492f      	ldr	r1, [pc, #188]	; (14c8 <_ZN22FlapperValveController8SelftestEv+0x168>)
    140a:	4830      	ldr	r0, [pc, #192]	; (14cc <_ZN22FlapperValveController8SelftestEv+0x16c>)
    140c:	4b30      	ldr	r3, [pc, #192]	; (14d0 <_ZN22FlapperValveController8SelftestEv+0x170>)
    140e:	4798      	blx	r3
	fv->SetEnable(true);
    1410:	687b      	ldr	r3, [r7, #4]
    1412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1414:	2101      	movs	r1, #1
    1416:	4618      	mov	r0, r3
    1418:	4b24      	ldr	r3, [pc, #144]	; (14ac <_ZN22FlapperValveController8SelftestEv+0x14c>)
    141a:	4798      	blx	r3

	localPosition=fv->ReadActualPosition();
    141c:	687b      	ldr	r3, [r7, #4]
    141e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1420:	4618      	mov	r0, r3
    1422:	4b28      	ldr	r3, [pc, #160]	; (14c4 <_ZN22FlapperValveController8SelftestEv+0x164>)
    1424:	4798      	blx	r3
    1426:	4603      	mov	r3, r0
    1428:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
    142a:	687b      	ldr	r3, [r7, #4]
    142c:	2200      	movs	r2, #0
    142e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	while ((abs(localPosition-localSetpoint)>6)&(!timeoutFlapperValveController))
    1432:	7bfa      	ldrb	r2, [r7, #15]
    1434:	7bbb      	ldrb	r3, [r7, #14]
    1436:	1ad3      	subs	r3, r2, r3
    1438:	2b00      	cmp	r3, #0
    143a:	bfb8      	it	lt
    143c:	425b      	neglt	r3, r3
    143e:	2b06      	cmp	r3, #6
    1440:	bfcc      	ite	gt
    1442:	2301      	movgt	r3, #1
    1444:	2300      	movle	r3, #0
    1446:	b2db      	uxtb	r3, r3
    1448:	461a      	mov	r2, r3
    144a:	687b      	ldr	r3, [r7, #4]
    144c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1450:	b2db      	uxtb	r3, r3
    1452:	f083 0301 	eor.w	r3, r3, #1
    1456:	b2db      	uxtb	r3, r3
    1458:	4013      	ands	r3, r2
    145a:	2b00      	cmp	r3, #0
    145c:	bf14      	ite	ne
    145e:	2301      	movne	r3, #1
    1460:	2300      	moveq	r3, #0
    1462:	b2db      	uxtb	r3, r3
    1464:	2b00      	cmp	r3, #0
    1466:	d007      	beq.n	1478 <_ZN22FlapperValveController8SelftestEv+0x118>

	{

		localPosition=fv->ReadActualPosition();
    1468:	687b      	ldr	r3, [r7, #4]
    146a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    146c:	4618      	mov	r0, r3
    146e:	4b15      	ldr	r3, [pc, #84]	; (14c4 <_ZN22FlapperValveController8SelftestEv+0x164>)
    1470:	4798      	blx	r3
    1472:	4603      	mov	r3, r0
    1474:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>6)&(!timeoutFlapperValveController))
    1476:	e7dc      	b.n	1432 <_ZN22FlapperValveController8SelftestEv+0xd2>

	}
	hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
    1478:	4913      	ldr	r1, [pc, #76]	; (14c8 <_ZN22FlapperValveController8SelftestEv+0x168>)
    147a:	4814      	ldr	r0, [pc, #80]	; (14cc <_ZN22FlapperValveController8SelftestEv+0x16c>)
    147c:	4b15      	ldr	r3, [pc, #84]	; (14d4 <_ZN22FlapperValveController8SelftestEv+0x174>)
    147e:	4798      	blx	r3
	fv->SetEnable(false);
    1480:	687b      	ldr	r3, [r7, #4]
    1482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1484:	2100      	movs	r1, #0
    1486:	4618      	mov	r0, r3
    1488:	4b08      	ldr	r3, [pc, #32]	; (14ac <_ZN22FlapperValveController8SelftestEv+0x14c>)
    148a:	4798      	blx	r3
	return !timeoutFlapperValveController;
    148c:	687b      	ldr	r3, [r7, #4]
    148e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1492:	b2db      	uxtb	r3, r3
    1494:	f083 0301 	eor.w	r3, r3, #1
    1498:	b2db      	uxtb	r3, r3
}
    149a:	4618      	mov	r0, r3
    149c:	3710      	adds	r7, #16
    149e:	46bd      	mov	sp, r7
    14a0:	bd80      	pop	{r7, pc}
    14a2:	bf00      	nop
    14a4:	00010fb8 	.word	0x00010fb8
    14a8:	00001289 	.word	0x00001289
    14ac:	000017c1 	.word	0x000017c1
    14b0:	00001931 	.word	0x00001931
    14b4:	000018b9 	.word	0x000018b9
    14b8:	000034c5 	.word	0x000034c5
    14bc:	000019a9 	.word	0x000019a9
    14c0:	00001841 	.word	0x00001841
    14c4:	000019e1 	.word	0x000019e1
    14c8:	000005b9 	.word	0x000005b9
    14cc:	20001074 	.word	0x20001074
    14d0:	0000ec45 	.word	0x0000ec45
    14d4:	0000ebed 	.word	0x0000ebed

000014d8 <_Z41__static_initialization_and_destruction_0ii>:

    14d8:	b580      	push	{r7, lr}
    14da:	b082      	sub	sp, #8
    14dc:	af00      	add	r7, sp, #0
    14de:	6078      	str	r0, [r7, #4]
    14e0:	6039      	str	r1, [r7, #0]
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	2b01      	cmp	r3, #1
    14e6:	d115      	bne.n	1514 <_Z41__static_initialization_and_destruction_0ii+0x3c>
    14e8:	683b      	ldr	r3, [r7, #0]
    14ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    14ee:	4293      	cmp	r3, r2
    14f0:	d110      	bne.n	1514 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static SingleFlapperValve_Class fvStatic(0);
    14f2:	2100      	movs	r1, #0
    14f4:	4809      	ldr	r0, [pc, #36]	; (151c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    14f6:	4b0a      	ldr	r3, [pc, #40]	; (1520 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    14f8:	4798      	blx	r3
    14fa:	4a0a      	ldr	r2, [pc, #40]	; (1524 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    14fc:	490a      	ldr	r1, [pc, #40]	; (1528 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    14fe:	4807      	ldr	r0, [pc, #28]	; (151c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1500:	4b0a      	ldr	r3, [pc, #40]	; (152c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    1502:	4798      	blx	r3
    1504:	480a      	ldr	r0, [pc, #40]	; (1530 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    1506:	4b0b      	ldr	r3, [pc, #44]	; (1534 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1508:	4798      	blx	r3
    150a:	4a06      	ldr	r2, [pc, #24]	; (1524 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    150c:	490a      	ldr	r1, [pc, #40]	; (1538 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    150e:	4808      	ldr	r0, [pc, #32]	; (1530 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    1510:	4b06      	ldr	r3, [pc, #24]	; (152c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    1512:	4798      	blx	r3
    1514:	bf00      	nop
    1516:	3708      	adds	r7, #8
    1518:	46bd      	mov	sp, r7
    151a:	bd80      	pop	{r7, pc}
    151c:	2000062c 	.word	0x2000062c
    1520:	00001551 	.word	0x00001551
    1524:	20000000 	.word	0x20000000
    1528:	000015ed 	.word	0x000015ed
    152c:	000104e9 	.word	0x000104e9
    1530:	200006a0 	.word	0x200006a0
    1534:	00000625 	.word	0x00000625
    1538:	000006b9 	.word	0x000006b9

0000153c <_GLOBAL__sub_I_ptrFlapperValveController>:
    153c:	b580      	push	{r7, lr}
    153e:	af00      	add	r7, sp, #0
    1540:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1544:	2001      	movs	r0, #1
    1546:	4b01      	ldr	r3, [pc, #4]	; (154c <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
    1548:	4798      	blx	r3
    154a:	bd80      	pop	{r7, pc}
    154c:	000014d9 	.word	0x000014d9

00001550 <_ZN24SingleFlapperValve_ClassC1Eh>:
static void	RegulatorTimeout(const struct timer_task *const timer_task){
	ptrSingleFlapperValveClass->regulatorTimeout=true;
	asm("nop");
}

SingleFlapperValve_Class::SingleFlapperValve_Class(uint8_t _iD)
    1550:	b580      	push	{r7, lr}
    1552:	b082      	sub	sp, #8
    1554:	af00      	add	r7, sp, #0
    1556:	6078      	str	r0, [r7, #4]
    1558:	460b      	mov	r3, r1
    155a:	70fb      	strb	r3, [r7, #3]
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	4618      	mov	r0, r3
    1560:	4b0c      	ldr	r3, [pc, #48]	; (1594 <_ZN24SingleFlapperValve_ClassC1Eh+0x44>)
    1562:	4798      	blx	r3
{	
	valveID=_iD;
    1564:	687b      	ldr	r3, [r7, #4]
    1566:	78fa      	ldrb	r2, [r7, #3]
    1568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
    156c:	687b      	ldr	r3, [r7, #4]
    156e:	4a0a      	ldr	r2, [pc, #40]	; (1598 <_ZN24SingleFlapperValve_ClassC1Eh+0x48>)
    1570:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
    1572:	687b      	ldr	r3, [r7, #4]
    1574:	2200      	movs	r2, #0
    1576:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
    157a:	4a08      	ldr	r2, [pc, #32]	; (159c <_ZN24SingleFlapperValve_ClassC1Eh+0x4c>)
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	6013      	str	r3, [r2, #0]
	isOK=false;
    1580:	687b      	ldr	r3, [r7, #4]
    1582:	2200      	movs	r2, #0
    1584:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
    1588:	687b      	ldr	r3, [r7, #4]
    158a:	4618      	mov	r0, r3
    158c:	3708      	adds	r7, #8
    158e:	46bd      	mov	sp, r7
    1590:	bd80      	pop	{r7, pc}
    1592:	bf00      	nop
    1594:	0000e56d 	.word	0x0000e56d
    1598:	20000768 	.word	0x20000768
    159c:	20000764 	.word	0x20000764

000015a0 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
    15a0:	b580      	push	{r7, lr}
    15a2:	b082      	sub	sp, #8
    15a4:	af00      	add	r7, sp, #0
    15a6:	6078      	str	r0, [r7, #4]
    15a8:	687b      	ldr	r3, [r7, #4]
    15aa:	4618      	mov	r0, r3
    15ac:	4b0c      	ldr	r3, [pc, #48]	; (15e0 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
    15ae:	4798      	blx	r3
{
	valveID=0;
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	2200      	movs	r2, #0
    15b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	4a0a      	ldr	r2, [pc, #40]	; (15e4 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
    15bc:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	2200      	movs	r2, #0
    15c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
    15c6:	4a08      	ldr	r2, [pc, #32]	; (15e8 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	6013      	str	r3, [r2, #0]
	isOK=false;
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	2200      	movs	r2, #0
    15d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	4618      	mov	r0, r3
    15d8:	3708      	adds	r7, #8
    15da:	46bd      	mov	sp, r7
    15dc:	bd80      	pop	{r7, pc}
    15de:	bf00      	nop
    15e0:	0000e56d 	.word	0x0000e56d
    15e4:	20000768 	.word	0x20000768
    15e8:	20000764 	.word	0x20000764

000015ec <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
    15ec:	b580      	push	{r7, lr}
    15ee:	b082      	sub	sp, #8
    15f0:	af00      	add	r7, sp, #0
    15f2:	6078      	str	r0, [r7, #4]
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	4618      	mov	r0, r3
    15f8:	4b03      	ldr	r3, [pc, #12]	; (1608 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
    15fa:	4798      	blx	r3
{
} //~FlapperValve_Class
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	4618      	mov	r0, r3
    1600:	3708      	adds	r7, #8
    1602:	46bd      	mov	sp, r7
    1604:	bd80      	pop	{r7, pc}
    1606:	bf00      	nop
    1608:	0000e581 	.word	0x0000e581

0000160c <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
    160c:	b580      	push	{r7, lr}
    160e:	b082      	sub	sp, #8
    1610:	af00      	add	r7, sp, #0
    1612:	6078      	str	r0, [r7, #4]
	
		i2c->Init();
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1618:	4618      	mov	r0, r3
    161a:	4b19      	ldr	r3, [pc, #100]	; (1680 <_ZN24SingleFlapperValve_Class4InitEv+0x74>)
    161c:	4798      	blx	r3

		if (i2c->isOK)
    161e:	687b      	ldr	r3, [r7, #4]
    1620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1622:	7a5b      	ldrb	r3, [r3, #9]
    1624:	b2db      	uxtb	r3, r3
    1626:	2b00      	cmp	r3, #0
    1628:	d01b      	beq.n	1662 <_ZN24SingleFlapperValve_Class4InitEv+0x56>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
    162a:	687b      	ldr	r3, [r7, #4]
    162c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    1630:	4619      	mov	r1, r3
    1632:	6878      	ldr	r0, [r7, #4]
    1634:	4b13      	ldr	r3, [pc, #76]	; (1684 <_ZN24SingleFlapperValve_Class4InitEv+0x78>)
    1636:	4798      	blx	r3
			expanders[0]->SetPortInput();
    1638:	687b      	ldr	r3, [r7, #4]
    163a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    163c:	4618      	mov	r0, r3
    163e:	4b12      	ldr	r3, [pc, #72]	; (1688 <_ZN24SingleFlapperValve_Class4InitEv+0x7c>)
    1640:	4798      	blx	r3
			expanders[1]->SetPortInput(0x80);
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1646:	2180      	movs	r1, #128	; 0x80
    1648:	4618      	mov	r0, r3
    164a:	4b10      	ldr	r3, [pc, #64]	; (168c <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
    164c:	4798      	blx	r3
			expanders[2]->SetPortOutput();
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1652:	4618      	mov	r0, r3
    1654:	4b0e      	ldr	r3, [pc, #56]	; (1690 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
    1656:	4798      	blx	r3
			expanders[3]->SetPortInput();
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    165c:	4618      	mov	r0, r3
    165e:	4b0a      	ldr	r3, [pc, #40]	; (1688 <_ZN24SingleFlapperValve_Class4InitEv+0x7c>)
    1660:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
    1662:	687b      	ldr	r3, [r7, #4]
    1664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1666:	7a5b      	ldrb	r3, [r3, #9]
    1668:	b2da      	uxtb	r2, r3
    166a:	687b      	ldr	r3, [r7, #4]
    166c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		
		return isOK;
    1670:	687b      	ldr	r3, [r7, #4]
    1672:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    1676:	b2db      	uxtb	r3, r3
// 			asm("nop");
// 		}
// 		return isOK;	


}
    1678:	4618      	mov	r0, r3
    167a:	3708      	adds	r7, #8
    167c:	46bd      	mov	sp, r7
    167e:	bd80      	pop	{r7, pc}
    1680:	0000e429 	.word	0x0000e429
    1684:	00001695 	.word	0x00001695
    1688:	0000e901 	.word	0x0000e901
    168c:	0000e945 	.word	0x0000e945
    1690:	0000e9b9 	.word	0x0000e9b9

00001694 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
    1694:	b580      	push	{r7, lr}
    1696:	b084      	sub	sp, #16
    1698:	af00      	add	r7, sp, #0
    169a:	6078      	str	r0, [r7, #4]
    169c:	460b      	mov	r3, r1
    169e:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    16a0:	2300      	movs	r3, #0
    16a2:	60fb      	str	r3, [r7, #12]
    16a4:	68fb      	ldr	r3, [r7, #12]
    16a6:	2b03      	cmp	r3, #3
    16a8:	dc24      	bgt.n	16f4 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x60>
	{
		currentExpander=&(expandersStatic[i]);
    16aa:	68fa      	ldr	r2, [r7, #12]
    16ac:	4613      	mov	r3, r2
    16ae:	00db      	lsls	r3, r3, #3
    16b0:	1a9b      	subs	r3, r3, r2
    16b2:	009b      	lsls	r3, r3, #2
    16b4:	4a12      	ldr	r2, [pc, #72]	; (1700 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x6c>)
    16b6:	441a      	add	r2, r3
    16b8:	687b      	ldr	r3, [r7, #4]
    16ba:	665a      	str	r2, [r3, #100]	; 0x64
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	6e58      	ldr	r0, [r3, #100]	; 0x64
    16c0:	68fb      	ldr	r3, [r7, #12]
    16c2:	b2da      	uxtb	r2, r3
    16c4:	78fb      	ldrb	r3, [r7, #3]
    16c6:	009b      	lsls	r3, r3, #2
    16c8:	b2db      	uxtb	r3, r3
    16ca:	4413      	add	r3, r2
    16cc:	b2db      	uxtb	r3, r3
    16ce:	3320      	adds	r3, #32
    16d0:	b2d9      	uxtb	r1, r3
    16d2:	687b      	ldr	r3, [r7, #4]
    16d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    16d6:	461a      	mov	r2, r3
    16d8:	4b0a      	ldr	r3, [pc, #40]	; (1704 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x70>)
    16da:	4798      	blx	r3
		expanders[i]=currentExpander;
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    16e0:	6879      	ldr	r1, [r7, #4]
    16e2:	68fb      	ldr	r3, [r7, #12]
    16e4:	3314      	adds	r3, #20
    16e6:	009b      	lsls	r3, r3, #2
    16e8:	440b      	add	r3, r1
    16ea:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    16ec:	68fb      	ldr	r3, [r7, #12]
    16ee:	3301      	adds	r3, #1
    16f0:	60fb      	str	r3, [r7, #12]
    16f2:	e7d7      	b.n	16a4 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
    16f4:	2300      	movs	r3, #0
}
    16f6:	4618      	mov	r0, r3
    16f8:	3710      	adds	r7, #16
    16fa:	46bd      	mov	sp, r7
    16fc:	bd80      	pop	{r7, pc}
    16fe:	bf00      	nop
    1700:	2000077c 	.word	0x2000077c
    1704:	0000e78b 	.word	0x0000e78b

00001708 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
    1708:	b590      	push	{r4, r7, lr}
    170a:	b085      	sub	sp, #20
    170c:	af00      	add	r7, sp, #0
    170e:	60f8      	str	r0, [r7, #12]
    1710:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
    1712:	68bb      	ldr	r3, [r7, #8]
    1714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1716:	4618      	mov	r0, r3
    1718:	4b10      	ldr	r3, [pc, #64]	; (175c <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
    171a:	4798      	blx	r3
    171c:	4603      	mov	r3, r0
    171e:	461a      	mov	r2, r3
    1720:	68bb      	ldr	r3, [r7, #8]
    1722:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	controlOutputs=FillControlOutputs(value);
    1726:	68b9      	ldr	r1, [r7, #8]
    1728:	68bb      	ldr	r3, [r7, #8]
    172a:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
    172e:	68bc      	ldr	r4, [r7, #8]
    1730:	463b      	mov	r3, r7
    1732:	4618      	mov	r0, r3
    1734:	4b0a      	ldr	r3, [pc, #40]	; (1760 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x58>)
    1736:	4798      	blx	r3
    1738:	f104 033a 	add.w	r3, r4, #58	; 0x3a
    173c:	463a      	mov	r2, r7
    173e:	6811      	ldr	r1, [r2, #0]
    1740:	6852      	ldr	r2, [r2, #4]
    1742:	6019      	str	r1, [r3, #0]
    1744:	605a      	str	r2, [r3, #4]
	return controlOutputs;
    1746:	68fa      	ldr	r2, [r7, #12]
    1748:	68bb      	ldr	r3, [r7, #8]
    174a:	333a      	adds	r3, #58	; 0x3a
    174c:	6819      	ldr	r1, [r3, #0]
    174e:	685b      	ldr	r3, [r3, #4]
    1750:	6011      	str	r1, [r2, #0]
    1752:	6053      	str	r3, [r2, #4]
}
    1754:	68f8      	ldr	r0, [r7, #12]
    1756:	3714      	adds	r7, #20
    1758:	46bd      	mov	sp, r7
    175a:	bd90      	pop	{r4, r7, pc}
    175c:	0000e841 	.word	0x0000e841
    1760:	0000e67d 	.word	0x0000e67d

00001764 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
    1764:	b590      	push	{r4, r7, lr}
    1766:	b085      	sub	sp, #20
    1768:	af00      	add	r7, sp, #0
    176a:	60f8      	str	r0, [r7, #12]
    176c:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
    176e:	68bb      	ldr	r3, [r7, #8]
    1770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    1772:	4618      	mov	r0, r3
    1774:	4b10      	ldr	r3, [pc, #64]	; (17b8 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
    1776:	4798      	blx	r3
    1778:	4603      	mov	r3, r0
    177a:	461a      	mov	r2, r3
    177c:	68bb      	ldr	r3, [r7, #8]
    177e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	statusInputs=FillInputStatus(value);
    1782:	68b9      	ldr	r1, [r7, #8]
    1784:	68bb      	ldr	r3, [r7, #8]
    1786:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
    178a:	68bc      	ldr	r4, [r7, #8]
    178c:	463b      	mov	r3, r7
    178e:	4618      	mov	r0, r3
    1790:	4b0a      	ldr	r3, [pc, #40]	; (17bc <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
    1792:	4798      	blx	r3
    1794:	f104 0342 	add.w	r3, r4, #66	; 0x42
    1798:	463a      	mov	r2, r7
    179a:	6811      	ldr	r1, [r2, #0]
    179c:	6019      	str	r1, [r3, #0]
    179e:	8892      	ldrh	r2, [r2, #4]
    17a0:	809a      	strh	r2, [r3, #4]
	return statusInputs;
    17a2:	68fa      	ldr	r2, [r7, #12]
    17a4:	68bb      	ldr	r3, [r7, #8]
    17a6:	3342      	adds	r3, #66	; 0x42
    17a8:	6819      	ldr	r1, [r3, #0]
    17aa:	6011      	str	r1, [r2, #0]
    17ac:	889b      	ldrh	r3, [r3, #4]
    17ae:	8093      	strh	r3, [r2, #4]
}
    17b0:	68f8      	ldr	r0, [r7, #12]
    17b2:	3714      	adds	r7, #20
    17b4:	46bd      	mov	sp, r7
    17b6:	bd90      	pop	{r4, r7, pc}
    17b8:	0000e841 	.word	0x0000e841
    17bc:	0000e629 	.word	0x0000e629

000017c0 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
    17c0:	b580      	push	{r7, lr}
    17c2:	b082      	sub	sp, #8
    17c4:	af00      	add	r7, sp, #0
    17c6:	6078      	str	r0, [r7, #4]
    17c8:	460b      	mov	r3, r1
    17ca:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    17cc:	687b      	ldr	r3, [r7, #4]
    17ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    17d0:	4618      	mov	r0, r3
    17d2:	4b19      	ldr	r3, [pc, #100]	; (1838 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
    17d4:	4798      	blx	r3
    17d6:	4603      	mov	r3, r0
    17d8:	461a      	mov	r2, r3
    17da:	687b      	ldr	r3, [r7, #4]
    17dc:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value&0xfe:value|0x01;
    17e0:	78fb      	ldrb	r3, [r7, #3]
    17e2:	2b00      	cmp	r3, #0
    17e4:	d006      	beq.n	17f4 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
    17e6:	687b      	ldr	r3, [r7, #4]
    17e8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    17ec:	f023 0301 	bic.w	r3, r3, #1
    17f0:	b2db      	uxtb	r3, r3
    17f2:	e005      	b.n	1800 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
    17f4:	687b      	ldr	r3, [r7, #4]
    17f6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    17fa:	f043 0301 	orr.w	r3, r3, #1
    17fe:	b2db      	uxtb	r3, r3
    1800:	687a      	ldr	r2, [r7, #4]
    1802:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	controlOutputs.niAlcFvMotorEnable=b;
    1806:	687b      	ldr	r3, [r7, #4]
    1808:	78fa      	ldrb	r2, [r7, #3]
    180a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	value=expanders[1]->WriteGPIORegister(value);
    180e:	687b      	ldr	r3, [r7, #4]
    1810:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    1818:	4619      	mov	r1, r3
    181a:	4610      	mov	r0, r2
    181c:	4b07      	ldr	r3, [pc, #28]	; (183c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
    181e:	4798      	blx	r3
    1820:	4603      	mov	r3, r0
    1822:	461a      	mov	r2, r3
    1824:	687b      	ldr	r3, [r7, #4]
    1826:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
    182a:	687b      	ldr	r3, [r7, #4]
    182c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
    1830:	4618      	mov	r0, r3
    1832:	3708      	adds	r7, #8
    1834:	46bd      	mov	sp, r7
    1836:	bd80      	pop	{r7, pc}
    1838:	0000e841 	.word	0x0000e841
    183c:	0000e8c5 	.word	0x0000e8c5

00001840 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
    1840:	b580      	push	{r7, lr}
    1842:	b082      	sub	sp, #8
    1844:	af00      	add	r7, sp, #0
    1846:	6078      	str	r0, [r7, #4]
    1848:	460b      	mov	r3, r1
    184a:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    184c:	687b      	ldr	r3, [r7, #4]
    184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1850:	4618      	mov	r0, r3
    1852:	4b17      	ldr	r3, [pc, #92]	; (18b0 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
    1854:	4798      	blx	r3
    1856:	4603      	mov	r3, r0
    1858:	461a      	mov	r2, r3
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x20:value&0xdf;
    1860:	78fb      	ldrb	r3, [r7, #3]
    1862:	2b00      	cmp	r3, #0
    1864:	d006      	beq.n	1874 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
    1866:	687b      	ldr	r3, [r7, #4]
    1868:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    186c:	f043 0320 	orr.w	r3, r3, #32
    1870:	b2db      	uxtb	r3, r3
    1872:	e005      	b.n	1880 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
    1874:	687b      	ldr	r3, [r7, #4]
    1876:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    187a:	f023 0320 	bic.w	r3, r3, #32
    187e:	b2db      	uxtb	r3, r3
    1880:	687a      	ldr	r2, [r7, #4]
    1882:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
    1886:	687b      	ldr	r3, [r7, #4]
    1888:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    188a:	687b      	ldr	r3, [r7, #4]
    188c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    1890:	4619      	mov	r1, r3
    1892:	4610      	mov	r0, r2
    1894:	4b07      	ldr	r3, [pc, #28]	; (18b4 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
    1896:	4798      	blx	r3
    1898:	4603      	mov	r3, r0
    189a:	461a      	mov	r2, r3
    189c:	687b      	ldr	r3, [r7, #4]
    189e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
    18a2:	687b      	ldr	r3, [r7, #4]
    18a4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
    18a8:	4618      	mov	r0, r3
    18aa:	3708      	adds	r7, #8
    18ac:	46bd      	mov	sp, r7
    18ae:	bd80      	pop	{r7, pc}
    18b0:	0000e841 	.word	0x0000e841
    18b4:	0000e8c5 	.word	0x0000e8c5

000018b8 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
    18b8:	b580      	push	{r7, lr}
    18ba:	b082      	sub	sp, #8
    18bc:	af00      	add	r7, sp, #0
    18be:	6078      	str	r0, [r7, #4]
    18c0:	460b      	mov	r3, r1
    18c2:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    18c8:	4618      	mov	r0, r3
    18ca:	4b17      	ldr	r3, [pc, #92]	; (1928 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
    18cc:	4798      	blx	r3
    18ce:	4603      	mov	r3, r0
    18d0:	461a      	mov	r2, r3
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x40:value&0xbf;
    18d8:	78fb      	ldrb	r3, [r7, #3]
    18da:	2b00      	cmp	r3, #0
    18dc:	d006      	beq.n	18ec <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    18e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    18e8:	b2db      	uxtb	r3, r3
    18ea:	e005      	b.n	18f8 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
    18ec:	687b      	ldr	r3, [r7, #4]
    18ee:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    18f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    18f6:	b2db      	uxtb	r3, r3
    18f8:	687a      	ldr	r2, [r7, #4]
    18fa:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
    18fe:	687b      	ldr	r3, [r7, #4]
    1900:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    1908:	4619      	mov	r1, r3
    190a:	4610      	mov	r0, r2
    190c:	4b07      	ldr	r3, [pc, #28]	; (192c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
    190e:	4798      	blx	r3
    1910:	4603      	mov	r3, r0
    1912:	461a      	mov	r2, r3
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
    191a:	687b      	ldr	r3, [r7, #4]
    191c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
    1920:	4618      	mov	r0, r3
    1922:	3708      	adds	r7, #8
    1924:	46bd      	mov	sp, r7
    1926:	bd80      	pop	{r7, pc}
    1928:	0000e841 	.word	0x0000e841
    192c:	0000e8c5 	.word	0x0000e8c5

00001930 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
    1930:	b580      	push	{r7, lr}
    1932:	b082      	sub	sp, #8
    1934:	af00      	add	r7, sp, #0
    1936:	6078      	str	r0, [r7, #4]
    1938:	460b      	mov	r3, r1
    193a:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    193c:	687b      	ldr	r3, [r7, #4]
    193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1940:	4618      	mov	r0, r3
    1942:	4b17      	ldr	r3, [pc, #92]	; (19a0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
    1944:	4798      	blx	r3
    1946:	4603      	mov	r3, r0
    1948:	461a      	mov	r2, r3
    194a:	687b      	ldr	r3, [r7, #4]
    194c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x04:value&0xfb;
    1950:	78fb      	ldrb	r3, [r7, #3]
    1952:	2b00      	cmp	r3, #0
    1954:	d006      	beq.n	1964 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    195c:	f043 0304 	orr.w	r3, r3, #4
    1960:	b2db      	uxtb	r3, r3
    1962:	e005      	b.n	1970 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
    1964:	687b      	ldr	r3, [r7, #4]
    1966:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    196a:	f023 0304 	bic.w	r3, r3, #4
    196e:	b2db      	uxtb	r3, r3
    1970:	687a      	ldr	r2, [r7, #4]
    1972:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
    1976:	687b      	ldr	r3, [r7, #4]
    1978:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    197a:	687b      	ldr	r3, [r7, #4]
    197c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    1980:	4619      	mov	r1, r3
    1982:	4610      	mov	r0, r2
    1984:	4b07      	ldr	r3, [pc, #28]	; (19a4 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
    1986:	4798      	blx	r3
    1988:	4603      	mov	r3, r0
    198a:	461a      	mov	r2, r3
    198c:	687b      	ldr	r3, [r7, #4]
    198e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
    1998:	4618      	mov	r0, r3
    199a:	3708      	adds	r7, #8
    199c:	46bd      	mov	sp, r7
    199e:	bd80      	pop	{r7, pc}
    19a0:	0000e841 	.word	0x0000e841
    19a4:	0000e8c5 	.word	0x0000e8c5

000019a8 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
    19a8:	b580      	push	{r7, lr}
    19aa:	b082      	sub	sp, #8
    19ac:	af00      	add	r7, sp, #0
    19ae:	6078      	str	r0, [r7, #4]
    19b0:	460b      	mov	r3, r1
    19b2:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
    19b4:	687b      	ldr	r3, [r7, #4]
    19b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    19b8:	78fa      	ldrb	r2, [r7, #3]
    19ba:	4611      	mov	r1, r2
    19bc:	4618      	mov	r0, r3
    19be:	4b07      	ldr	r3, [pc, #28]	; (19dc <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
    19c0:	4798      	blx	r3
    19c2:	4603      	mov	r3, r0
    19c4:	461a      	mov	r2, r3
    19c6:	687b      	ldr	r3, [r7, #4]
    19c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
    19cc:	687b      	ldr	r3, [r7, #4]
    19ce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
    19d2:	4618      	mov	r0, r3
    19d4:	3708      	adds	r7, #8
    19d6:	46bd      	mov	sp, r7
    19d8:	bd80      	pop	{r7, pc}
    19da:	bf00      	nop
    19dc:	0000e8c5 	.word	0x0000e8c5

000019e0 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
    19e0:	b580      	push	{r7, lr}
    19e2:	b082      	sub	sp, #8
    19e4:	af00      	add	r7, sp, #0
    19e6:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
    19e8:	687b      	ldr	r3, [r7, #4]
    19ea:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
    19ee:	687b      	ldr	r3, [r7, #4]
    19f0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    19f8:	4618      	mov	r0, r3
    19fa:	4b13      	ldr	r3, [pc, #76]	; (1a48 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x68>)
    19fc:	4798      	blx	r3
    19fe:	4603      	mov	r3, r0
    1a00:	461a      	mov	r2, r3
    1a02:	687b      	ldr	r3, [r7, #4]
    1a04:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	if (actualPosition>200)
    1a08:	687b      	ldr	r3, [r7, #4]
    1a0a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    1a0e:	2bc8      	cmp	r3, #200	; 0xc8
    1a10:	dd04      	ble.n	1a1c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=RECYCLE;
    1a12:	687b      	ldr	r3, [r7, #4]
    1a14:	2202      	movs	r2, #2
    1a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    1a1a:	e00d      	b.n	1a38 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x58>
	}else if (actualPosition>100)
    1a1c:	687b      	ldr	r3, [r7, #4]
    1a1e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    1a22:	2b64      	cmp	r3, #100	; 0x64
    1a24:	dd04      	ble.n	1a30 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=INTERM;
    1a26:	687b      	ldr	r3, [r7, #4]
    1a28:	2201      	movs	r2, #1
    1a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    1a2e:	e003      	b.n	1a38 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x58>
	} 
	else
	{
		statusFlapperValve=FRESHAIR;
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	2200      	movs	r2, #0
    1a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}
	return actualPosition;
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
}
    1a3e:	4618      	mov	r0, r3
    1a40:	3708      	adds	r7, #8
    1a42:	46bd      	mov	sp, r7
    1a44:	bd80      	pop	{r7, pc}
    1a46:	bf00      	nop
    1a48:	0000e841 	.word	0x0000e841

00001a4c <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_EXPANDERS];
    1a4c:	b590      	push	{r4, r7, lr}
    1a4e:	b083      	sub	sp, #12
    1a50:	af00      	add	r7, sp, #0
    1a52:	6078      	str	r0, [r7, #4]
    1a54:	4c05      	ldr	r4, [pc, #20]	; (1a6c <__tcf_0+0x20>)
    1a56:	4b06      	ldr	r3, [pc, #24]	; (1a70 <__tcf_0+0x24>)
    1a58:	429c      	cmp	r4, r3
    1a5a:	d004      	beq.n	1a66 <__tcf_0+0x1a>
    1a5c:	3c1c      	subs	r4, #28
    1a5e:	4620      	mov	r0, r4
    1a60:	4b04      	ldr	r3, [pc, #16]	; (1a74 <__tcf_0+0x28>)
    1a62:	4798      	blx	r3
    1a64:	e7f7      	b.n	1a56 <__tcf_0+0xa>
    1a66:	370c      	adds	r7, #12
    1a68:	46bd      	mov	sp, r7
    1a6a:	bd90      	pop	{r4, r7, pc}
    1a6c:	200007ec 	.word	0x200007ec
    1a70:	2000077c 	.word	0x2000077c
    1a74:	0000e777 	.word	0x0000e777

00001a78 <_Z41__static_initialization_and_destruction_0ii>:

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}

    1a78:	b5b0      	push	{r4, r5, r7, lr}
    1a7a:	b082      	sub	sp, #8
    1a7c:	af00      	add	r7, sp, #0
    1a7e:	6078      	str	r0, [r7, #4]
    1a80:	6039      	str	r1, [r7, #0]
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	2b01      	cmp	r3, #1
    1a86:	d125      	bne.n	1ad4 <_Z41__static_initialization_and_destruction_0ii+0x5c>
    1a88:	683b      	ldr	r3, [r7, #0]
    1a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1a8e:	4293      	cmp	r3, r2
    1a90:	d120      	bne.n	1ad4 <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
    1a92:	4912      	ldr	r1, [pc, #72]	; (1adc <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1a94:	4812      	ldr	r0, [pc, #72]	; (1ae0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1a96:	4b13      	ldr	r3, [pc, #76]	; (1ae4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1a98:	4798      	blx	r3
    1a9a:	4a13      	ldr	r2, [pc, #76]	; (1ae8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    1a9c:	4913      	ldr	r1, [pc, #76]	; (1aec <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1a9e:	4810      	ldr	r0, [pc, #64]	; (1ae0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1aa0:	4b13      	ldr	r3, [pc, #76]	; (1af0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1aa2:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_EXPANDERS];
    1aa4:	4b13      	ldr	r3, [pc, #76]	; (1af4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1aa6:	2403      	movs	r4, #3
    1aa8:	461d      	mov	r5, r3
    1aaa:	2c00      	cmp	r4, #0
    1aac:	db05      	blt.n	1aba <_Z41__static_initialization_and_destruction_0ii+0x42>
    1aae:	4628      	mov	r0, r5
    1ab0:	4b11      	ldr	r3, [pc, #68]	; (1af8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    1ab2:	4798      	blx	r3
    1ab4:	351c      	adds	r5, #28
    1ab6:	3c01      	subs	r4, #1
    1ab8:	e7f7      	b.n	1aaa <_Z41__static_initialization_and_destruction_0ii+0x32>
    1aba:	4a0b      	ldr	r2, [pc, #44]	; (1ae8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    1abc:	490f      	ldr	r1, [pc, #60]	; (1afc <_Z41__static_initialization_and_destruction_0ii+0x84>)
    1abe:	2000      	movs	r0, #0
    1ac0:	4b0b      	ldr	r3, [pc, #44]	; (1af0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1ac2:	4798      	blx	r3
    1ac4:	480e      	ldr	r0, [pc, #56]	; (1b00 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    1ac6:	4b0f      	ldr	r3, [pc, #60]	; (1b04 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    1ac8:	4798      	blx	r3
    1aca:	4a07      	ldr	r2, [pc, #28]	; (1ae8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    1acc:	490e      	ldr	r1, [pc, #56]	; (1b08 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    1ace:	480c      	ldr	r0, [pc, #48]	; (1b00 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    1ad0:	4b07      	ldr	r3, [pc, #28]	; (1af0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1ad2:	4798      	blx	r3
    1ad4:	bf00      	nop
    1ad6:	3708      	adds	r7, #8
    1ad8:	46bd      	mov	sp, r7
    1ada:	bdb0      	pop	{r4, r5, r7, pc}
    1adc:	20007898 	.word	0x20007898
    1ae0:	20000768 	.word	0x20000768
    1ae4:	0000e3f9 	.word	0x0000e3f9
    1ae8:	20000000 	.word	0x20000000
    1aec:	0000e415 	.word	0x0000e415
    1af0:	000104e9 	.word	0x000104e9
    1af4:	2000077c 	.word	0x2000077c
    1af8:	0000e763 	.word	0x0000e763
    1afc:	00001a4d 	.word	0x00001a4d
    1b00:	200007ec 	.word	0x200007ec
    1b04:	000015a1 	.word	0x000015a1
    1b08:	000015ed 	.word	0x000015ed

00001b0c <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
    1b0c:	b580      	push	{r7, lr}
    1b0e:	af00      	add	r7, sp, #0
    1b10:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1b14:	2001      	movs	r0, #1
    1b16:	4b01      	ldr	r3, [pc, #4]	; (1b1c <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
    1b18:	4798      	blx	r3
    1b1a:	bd80      	pop	{r7, pc}
    1b1c:	00001a79 	.word	0x00001a79

00001b20 <hri_port_set_OUT_reg>:
{
    1b20:	b480      	push	{r7}
    1b22:	b085      	sub	sp, #20
    1b24:	af00      	add	r7, sp, #0
    1b26:	60f8      	str	r0, [r7, #12]
    1b28:	460b      	mov	r3, r1
    1b2a:	607a      	str	r2, [r7, #4]
    1b2c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1b2e:	7afb      	ldrb	r3, [r7, #11]
    1b30:	68fa      	ldr	r2, [r7, #12]
    1b32:	01db      	lsls	r3, r3, #7
    1b34:	4413      	add	r3, r2
    1b36:	3318      	adds	r3, #24
    1b38:	687a      	ldr	r2, [r7, #4]
    1b3a:	601a      	str	r2, [r3, #0]
}
    1b3c:	bf00      	nop
    1b3e:	3714      	adds	r7, #20
    1b40:	46bd      	mov	sp, r7
    1b42:	bc80      	pop	{r7}
    1b44:	4770      	bx	lr

00001b46 <hri_port_clear_OUT_reg>:
{
    1b46:	b480      	push	{r7}
    1b48:	b085      	sub	sp, #20
    1b4a:	af00      	add	r7, sp, #0
    1b4c:	60f8      	str	r0, [r7, #12]
    1b4e:	460b      	mov	r3, r1
    1b50:	607a      	str	r2, [r7, #4]
    1b52:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b54:	7afb      	ldrb	r3, [r7, #11]
    1b56:	68fa      	ldr	r2, [r7, #12]
    1b58:	01db      	lsls	r3, r3, #7
    1b5a:	4413      	add	r3, r2
    1b5c:	3314      	adds	r3, #20
    1b5e:	687a      	ldr	r2, [r7, #4]
    1b60:	601a      	str	r2, [r3, #0]
}
    1b62:	bf00      	nop
    1b64:	3714      	adds	r7, #20
    1b66:	46bd      	mov	sp, r7
    1b68:	bc80      	pop	{r7}
    1b6a:	4770      	bx	lr

00001b6c <_gpio_set_level>:
{
    1b6c:	b580      	push	{r7, lr}
    1b6e:	b082      	sub	sp, #8
    1b70:	af00      	add	r7, sp, #0
    1b72:	4603      	mov	r3, r0
    1b74:	6039      	str	r1, [r7, #0]
    1b76:	71fb      	strb	r3, [r7, #7]
    1b78:	4613      	mov	r3, r2
    1b7a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1b7c:	79bb      	ldrb	r3, [r7, #6]
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d006      	beq.n	1b90 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1b82:	79fb      	ldrb	r3, [r7, #7]
    1b84:	683a      	ldr	r2, [r7, #0]
    1b86:	4619      	mov	r1, r3
    1b88:	4806      	ldr	r0, [pc, #24]	; (1ba4 <_gpio_set_level+0x38>)
    1b8a:	4b07      	ldr	r3, [pc, #28]	; (1ba8 <_gpio_set_level+0x3c>)
    1b8c:	4798      	blx	r3
}
    1b8e:	e005      	b.n	1b9c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1b90:	79fb      	ldrb	r3, [r7, #7]
    1b92:	683a      	ldr	r2, [r7, #0]
    1b94:	4619      	mov	r1, r3
    1b96:	4803      	ldr	r0, [pc, #12]	; (1ba4 <_gpio_set_level+0x38>)
    1b98:	4b04      	ldr	r3, [pc, #16]	; (1bac <_gpio_set_level+0x40>)
    1b9a:	4798      	blx	r3
}
    1b9c:	bf00      	nop
    1b9e:	3708      	adds	r7, #8
    1ba0:	46bd      	mov	sp, r7
    1ba2:	bd80      	pop	{r7, pc}
    1ba4:	41008000 	.word	0x41008000
    1ba8:	00001b21 	.word	0x00001b21
    1bac:	00001b47 	.word	0x00001b47

00001bb0 <gpio_set_pin_level>:
{
    1bb0:	b580      	push	{r7, lr}
    1bb2:	b082      	sub	sp, #8
    1bb4:	af00      	add	r7, sp, #0
    1bb6:	4603      	mov	r3, r0
    1bb8:	460a      	mov	r2, r1
    1bba:	71fb      	strb	r3, [r7, #7]
    1bbc:	4613      	mov	r3, r2
    1bbe:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1bc0:	79fb      	ldrb	r3, [r7, #7]
    1bc2:	115b      	asrs	r3, r3, #5
    1bc4:	b2d8      	uxtb	r0, r3
    1bc6:	79fb      	ldrb	r3, [r7, #7]
    1bc8:	f003 031f 	and.w	r3, r3, #31
    1bcc:	2201      	movs	r2, #1
    1bce:	fa02 f303 	lsl.w	r3, r2, r3
    1bd2:	79ba      	ldrb	r2, [r7, #6]
    1bd4:	4619      	mov	r1, r3
    1bd6:	4b03      	ldr	r3, [pc, #12]	; (1be4 <gpio_set_pin_level+0x34>)
    1bd8:	4798      	blx	r3
}
    1bda:	bf00      	nop
    1bdc:	3708      	adds	r7, #8
    1bde:	46bd      	mov	sp, r7
    1be0:	bd80      	pop	{r7, pc}
    1be2:	bf00      	nop
    1be4:	00001b6d 	.word	0x00001b6d

00001be8 <_ZL13FirmwareAlivePK10timer_task>:
//static EvaporatorAndCondesatorFans_Class fans;
//static SingleFlapperValve_Class fv(0);


static void FirmwareAlive(const struct timer_task *const timer_task)
{
    1be8:	b580      	push	{r7, lr}
    1bea:	b082      	sub	sp, #8
    1bec:	af00      	add	r7, sp, #0
    1bee:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(iAlcFwIsAlive,true);
    1bf0:	2101      	movs	r1, #1
    1bf2:	2007      	movs	r0, #7
    1bf4:	4b02      	ldr	r3, [pc, #8]	; (1c00 <_ZL13FirmwareAlivePK10timer_task+0x18>)
    1bf6:	4798      	blx	r3
}
    1bf8:	bf00      	nop
    1bfa:	3708      	adds	r7, #8
    1bfc:	46bd      	mov	sp, r7
    1bfe:	bd80      	pop	{r7, pc}
    1c00:	00001bb1 	.word	0x00001bb1

00001c04 <main>:


int main(void)
{
    1c04:	b580      	push	{r7, lr}
    1c06:	b082      	sub	sp, #8
    1c08:	af00      	add	r7, sp, #0
	atmel_start_init();
    1c0a:	4b37      	ldr	r3, [pc, #220]	; (1ce8 <main+0xe4>)
    1c0c:	4798      	blx	r3
	uint8_t position;

	usb.Init();
    1c0e:	4837      	ldr	r0, [pc, #220]	; (1cec <main+0xe8>)
    1c10:	4b37      	ldr	r3, [pc, #220]	; (1cf0 <main+0xec>)
    1c12:	4798      	blx	r3
	delay_ms(100);
    1c14:	2064      	movs	r0, #100	; 0x64
    1c16:	4b37      	ldr	r3, [pc, #220]	; (1cf4 <main+0xf0>)
    1c18:	4798      	blx	r3
	//	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	//	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	pwm_enable(&LIVE_PULSE);
    1c1a:	4837      	ldr	r0, [pc, #220]	; (1cf8 <main+0xf4>)
    1c1c:	4b37      	ldr	r3, [pc, #220]	; (1cfc <main+0xf8>)
    1c1e:	4798      	blx	r3
	delay_ms(200);
    1c20:	20c8      	movs	r0, #200	; 0xc8
    1c22:	4b34      	ldr	r3, [pc, #208]	; (1cf4 <main+0xf0>)
    1c24:	4798      	blx	r3
	memory.Init();
    1c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    1c2a:	4835      	ldr	r0, [pc, #212]	; (1d00 <main+0xfc>)
    1c2c:	4b35      	ldr	r3, [pc, #212]	; (1d04 <main+0x100>)
    1c2e:	4798      	blx	r3
	memory.WriteDefaultParameters();
    1c30:	4833      	ldr	r0, [pc, #204]	; (1d00 <main+0xfc>)
    1c32:	4b35      	ldr	r3, [pc, #212]	; (1d08 <main+0x104>)
    1c34:	4798      	blx	r3
	fvc.InitController();
    1c36:	4835      	ldr	r0, [pc, #212]	; (1d0c <main+0x108>)
    1c38:	4b35      	ldr	r3, [pc, #212]	; (1d10 <main+0x10c>)
    1c3a:	4798      	blx	r3

	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
    1c3c:	22fa      	movs	r2, #250	; 0xfa
    1c3e:	4935      	ldr	r1, [pc, #212]	; (1d14 <main+0x110>)
    1c40:	4835      	ldr	r0, [pc, #212]	; (1d18 <main+0x114>)
    1c42:	4b36      	ldr	r3, [pc, #216]	; (1d1c <main+0x118>)
    1c44:	4798      	blx	r3
	//toolApp.Init();
	while (1)
	{
		for (uint8_t i = 0; i < 8; i++)
    1c46:	2300      	movs	r3, #0
    1c48:	71fb      	strb	r3, [r7, #7]
    1c4a:	79fb      	ldrb	r3, [r7, #7]
    1c4c:	2b07      	cmp	r3, #7
    1c4e:	dc22      	bgt.n	1c96 <main+0x92>
		{
					fvc.StartControlling(0x20 +i*30);
    1c50:	79fb      	ldrb	r3, [r7, #7]
    1c52:	461a      	mov	r2, r3
    1c54:	0112      	lsls	r2, r2, #4
    1c56:	1ad3      	subs	r3, r2, r3
    1c58:	005b      	lsls	r3, r3, #1
    1c5a:	b2db      	uxtb	r3, r3
    1c5c:	3320      	adds	r3, #32
    1c5e:	b2db      	uxtb	r3, r3
    1c60:	4619      	mov	r1, r3
    1c62:	482a      	ldr	r0, [pc, #168]	; (1d0c <main+0x108>)
    1c64:	4b2e      	ldr	r3, [pc, #184]	; (1d20 <main+0x11c>)
    1c66:	4798      	blx	r3
					while (!fvc.gotSetpoint)
    1c68:	4b28      	ldr	r3, [pc, #160]	; (1d0c <main+0x108>)
    1c6a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
    1c6e:	b2db      	uxtb	r3, r3
    1c70:	f083 0301 	eor.w	r3, r3, #1
    1c74:	b2db      	uxtb	r3, r3
    1c76:	2b00      	cmp	r3, #0
    1c78:	d003      	beq.n	1c82 <main+0x7e>
					{
						fvc.Control_NBC_StandAlone_Reset();
    1c7a:	4824      	ldr	r0, [pc, #144]	; (1d0c <main+0x108>)
    1c7c:	4b29      	ldr	r3, [pc, #164]	; (1d24 <main+0x120>)
    1c7e:	4798      	blx	r3
					while (!fvc.gotSetpoint)
    1c80:	e7f2      	b.n	1c68 <main+0x64>
					}
					
					delay_ms(100);
    1c82:	2064      	movs	r0, #100	; 0x64
    1c84:	4b1b      	ldr	r3, [pc, #108]	; (1cf4 <main+0xf0>)
    1c86:	4798      	blx	r3
					fvc.StopControlling();
    1c88:	4820      	ldr	r0, [pc, #128]	; (1d0c <main+0x108>)
    1c8a:	4b27      	ldr	r3, [pc, #156]	; (1d28 <main+0x124>)
    1c8c:	4798      	blx	r3
		for (uint8_t i = 0; i < 8; i++)
    1c8e:	79fb      	ldrb	r3, [r7, #7]
    1c90:	3301      	adds	r3, #1
    1c92:	71fb      	strb	r3, [r7, #7]
    1c94:	e7d9      	b.n	1c4a <main+0x46>
		}
			for (uint8_t i = 0; i < 8; i++)
    1c96:	2300      	movs	r3, #0
    1c98:	71bb      	strb	r3, [r7, #6]
    1c9a:	79bb      	ldrb	r3, [r7, #6]
    1c9c:	2b07      	cmp	r3, #7
    1c9e:	dcd2      	bgt.n	1c46 <main+0x42>
			{
				fvc.StartControlling(230 -i*30);
    1ca0:	79bb      	ldrb	r3, [r7, #6]
    1ca2:	461a      	mov	r2, r3
    1ca4:	011b      	lsls	r3, r3, #4
    1ca6:	1ad3      	subs	r3, r2, r3
    1ca8:	005b      	lsls	r3, r3, #1
    1caa:	b2db      	uxtb	r3, r3
    1cac:	3b1a      	subs	r3, #26
    1cae:	b2db      	uxtb	r3, r3
    1cb0:	4619      	mov	r1, r3
    1cb2:	4816      	ldr	r0, [pc, #88]	; (1d0c <main+0x108>)
    1cb4:	4b1a      	ldr	r3, [pc, #104]	; (1d20 <main+0x11c>)
    1cb6:	4798      	blx	r3
				while (!fvc.gotSetpoint)
    1cb8:	4b14      	ldr	r3, [pc, #80]	; (1d0c <main+0x108>)
    1cba:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
    1cbe:	b2db      	uxtb	r3, r3
    1cc0:	f083 0301 	eor.w	r3, r3, #1
    1cc4:	b2db      	uxtb	r3, r3
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	d003      	beq.n	1cd2 <main+0xce>
				{
				fvc.Control_NBC_StandAlone_Reset();
    1cca:	4810      	ldr	r0, [pc, #64]	; (1d0c <main+0x108>)
    1ccc:	4b15      	ldr	r3, [pc, #84]	; (1d24 <main+0x120>)
    1cce:	4798      	blx	r3
				while (!fvc.gotSetpoint)
    1cd0:	e7f2      	b.n	1cb8 <main+0xb4>
				}
				delay_ms(100);
    1cd2:	2064      	movs	r0, #100	; 0x64
    1cd4:	4b07      	ldr	r3, [pc, #28]	; (1cf4 <main+0xf0>)
    1cd6:	4798      	blx	r3
				fvc.StopControlling();
    1cd8:	480c      	ldr	r0, [pc, #48]	; (1d0c <main+0x108>)
    1cda:	4b13      	ldr	r3, [pc, #76]	; (1d28 <main+0x124>)
    1cdc:	4798      	blx	r3
			for (uint8_t i = 0; i < 8; i++)
    1cde:	79bb      	ldrb	r3, [r7, #6]
    1ce0:	3301      	adds	r3, #1
    1ce2:	71bb      	strb	r3, [r7, #6]
    1ce4:	e7d9      	b.n	1c9a <main+0x96>
    1ce6:	bf00      	nop
    1ce8:	00001d2d 	.word	0x00001d2d
    1cec:	200010cc 	.word	0x200010cc
    1cf0:	0000eff5 	.word	0x0000eff5
    1cf4:	000034c5 	.word	0x000034c5
    1cf8:	200078b8 	.word	0x200078b8
    1cfc:	00003915 	.word	0x00003915
    1d00:	200021c8 	.word	0x200021c8
    1d04:	0000fb29 	.word	0x0000fb29
    1d08:	0000fa85 	.word	0x0000fa85
    1d0c:	200006a0 	.word	0x200006a0
    1d10:	000006d9 	.word	0x000006d9
    1d14:	00001be9 	.word	0x00001be9
    1d18:	20001074 	.word	0x20001074
    1d1c:	0000eb79 	.word	0x0000eb79
    1d20:	000010cd 	.word	0x000010cd
    1d24:	000008e1 	.word	0x000008e1
    1d28:	00001089 	.word	0x00001089

00001d2c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1d2c:	b580      	push	{r7, lr}
    1d2e:	af00      	add	r7, sp, #0
	system_init();
    1d30:	4b03      	ldr	r3, [pc, #12]	; (1d40 <atmel_start_init+0x14>)
    1d32:	4798      	blx	r3
	usb_init();
    1d34:	4b03      	ldr	r3, [pc, #12]	; (1d44 <atmel_start_init+0x18>)
    1d36:	4798      	blx	r3
	spi_nor_flash_init();
    1d38:	4b03      	ldr	r3, [pc, #12]	; (1d48 <atmel_start_init+0x1c>)
    1d3a:	4798      	blx	r3
}
    1d3c:	bf00      	nop
    1d3e:	bd80      	pop	{r7, pc}
    1d40:	000030b5 	.word	0x000030b5
    1d44:	0000c571 	.word	0x0000c571
    1d48:	0000c505 	.word	0x0000c505

00001d4c <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    1d4c:	b480      	push	{r7}
    1d4e:	b085      	sub	sp, #20
    1d50:	af00      	add	r7, sp, #0
    1d52:	60f8      	str	r0, [r7, #12]
    1d54:	460b      	mov	r3, r1
    1d56:	607a      	str	r2, [r7, #4]
    1d58:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1d5a:	7afa      	ldrb	r2, [r7, #11]
    1d5c:	68fb      	ldr	r3, [r7, #12]
    1d5e:	3220      	adds	r2, #32
    1d60:	6879      	ldr	r1, [r7, #4]
    1d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    1d66:	bf00      	nop
    1d68:	3714      	adds	r7, #20
    1d6a:	46bd      	mov	sp, r7
    1d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d70:	4770      	bx	lr

00001d72 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    1d72:	b480      	push	{r7}
    1d74:	b083      	sub	sp, #12
    1d76:	af00      	add	r7, sp, #0
    1d78:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    1d7a:	687b      	ldr	r3, [r7, #4]
    1d7c:	691b      	ldr	r3, [r3, #16]
    1d7e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    1d82:	687b      	ldr	r3, [r7, #4]
    1d84:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1d86:	bf00      	nop
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr

00001d92 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    1d92:	b480      	push	{r7}
    1d94:	b083      	sub	sp, #12
    1d96:	af00      	add	r7, sp, #0
    1d98:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    1d9a:	687b      	ldr	r3, [r7, #4]
    1d9c:	691b      	ldr	r3, [r3, #16]
    1d9e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1da6:	bf00      	nop
    1da8:	370c      	adds	r7, #12
    1daa:	46bd      	mov	sp, r7
    1dac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1db0:	4770      	bx	lr

00001db2 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    1db2:	b480      	push	{r7}
    1db4:	b083      	sub	sp, #12
    1db6:	af00      	add	r7, sp, #0
    1db8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    1dba:	687b      	ldr	r3, [r7, #4]
    1dbc:	691b      	ldr	r3, [r3, #16]
    1dbe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1dc6:	bf00      	nop
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr

00001dd2 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    1dd2:	b480      	push	{r7}
    1dd4:	b083      	sub	sp, #12
    1dd6:	af00      	add	r7, sp, #0
    1dd8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	691b      	ldr	r3, [r3, #16]
    1dde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    1de2:	687b      	ldr	r3, [r7, #4]
    1de4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1de6:	bf00      	nop
    1de8:	370c      	adds	r7, #12
    1dea:	46bd      	mov	sp, r7
    1dec:	f85d 7b04 	ldr.w	r7, [sp], #4
    1df0:	4770      	bx	lr

00001df2 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    1df2:	b480      	push	{r7}
    1df4:	b083      	sub	sp, #12
    1df6:	af00      	add	r7, sp, #0
    1df8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	695b      	ldr	r3, [r3, #20]
    1dfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    1e02:	687b      	ldr	r3, [r7, #4]
    1e04:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1e06:	bf00      	nop
    1e08:	370c      	adds	r7, #12
    1e0a:	46bd      	mov	sp, r7
    1e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e10:	4770      	bx	lr

00001e12 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    1e12:	b480      	push	{r7}
    1e14:	b083      	sub	sp, #12
    1e16:	af00      	add	r7, sp, #0
    1e18:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    1e1a:	687b      	ldr	r3, [r7, #4]
    1e1c:	695b      	ldr	r3, [r3, #20]
    1e1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    1e22:	687b      	ldr	r3, [r7, #4]
    1e24:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1e26:	bf00      	nop
    1e28:	370c      	adds	r7, #12
    1e2a:	46bd      	mov	sp, r7
    1e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e30:	4770      	bx	lr

00001e32 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    1e32:	b480      	push	{r7}
    1e34:	b083      	sub	sp, #12
    1e36:	af00      	add	r7, sp, #0
    1e38:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    1e3a:	687b      	ldr	r3, [r7, #4]
    1e3c:	695b      	ldr	r3, [r3, #20]
    1e3e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    1e42:	687b      	ldr	r3, [r7, #4]
    1e44:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1e46:	bf00      	nop
    1e48:	370c      	adds	r7, #12
    1e4a:	46bd      	mov	sp, r7
    1e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e50:	4770      	bx	lr

00001e52 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    1e52:	b480      	push	{r7}
    1e54:	b083      	sub	sp, #12
    1e56:	af00      	add	r7, sp, #0
    1e58:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	695b      	ldr	r3, [r3, #20]
    1e5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1e62:	687b      	ldr	r3, [r7, #4]
    1e64:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1e66:	bf00      	nop
    1e68:	370c      	adds	r7, #12
    1e6a:	46bd      	mov	sp, r7
    1e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e70:	4770      	bx	lr

00001e72 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    1e72:	b480      	push	{r7}
    1e74:	b083      	sub	sp, #12
    1e76:	af00      	add	r7, sp, #0
    1e78:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	695b      	ldr	r3, [r3, #20]
    1e7e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1e86:	bf00      	nop
    1e88:	370c      	adds	r7, #12
    1e8a:	46bd      	mov	sp, r7
    1e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e90:	4770      	bx	lr

00001e92 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    1e92:	b480      	push	{r7}
    1e94:	b083      	sub	sp, #12
    1e96:	af00      	add	r7, sp, #0
    1e98:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	699b      	ldr	r3, [r3, #24]
    1e9e:	f043 0201 	orr.w	r2, r3, #1
    1ea2:	687b      	ldr	r3, [r7, #4]
    1ea4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1ea6:	bf00      	nop
    1ea8:	370c      	adds	r7, #12
    1eaa:	46bd      	mov	sp, r7
    1eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1eb0:	4770      	bx	lr

00001eb2 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    1eb2:	b480      	push	{r7}
    1eb4:	b083      	sub	sp, #12
    1eb6:	af00      	add	r7, sp, #0
    1eb8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    1eba:	687b      	ldr	r3, [r7, #4]
    1ebc:	699b      	ldr	r3, [r3, #24]
    1ebe:	f043 0202 	orr.w	r2, r3, #2
    1ec2:	687b      	ldr	r3, [r7, #4]
    1ec4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1ec6:	bf00      	nop
    1ec8:	370c      	adds	r7, #12
    1eca:	46bd      	mov	sp, r7
    1ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ed0:	4770      	bx	lr

00001ed2 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    1ed2:	b480      	push	{r7}
    1ed4:	b083      	sub	sp, #12
    1ed6:	af00      	add	r7, sp, #0
    1ed8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    1eda:	687b      	ldr	r3, [r7, #4]
    1edc:	699b      	ldr	r3, [r3, #24]
    1ede:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1ee6:	bf00      	nop
    1ee8:	370c      	adds	r7, #12
    1eea:	46bd      	mov	sp, r7
    1eec:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ef0:	4770      	bx	lr

00001ef2 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    1ef2:	b480      	push	{r7}
    1ef4:	b083      	sub	sp, #12
    1ef6:	af00      	add	r7, sp, #0
    1ef8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    1efa:	687b      	ldr	r3, [r7, #4]
    1efc:	699b      	ldr	r3, [r3, #24]
    1efe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    1f02:	687b      	ldr	r3, [r7, #4]
    1f04:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1f06:	bf00      	nop
    1f08:	370c      	adds	r7, #12
    1f0a:	46bd      	mov	sp, r7
    1f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f10:	4770      	bx	lr

00001f12 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    1f12:	b480      	push	{r7}
    1f14:	b083      	sub	sp, #12
    1f16:	af00      	add	r7, sp, #0
    1f18:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    1f1a:	687b      	ldr	r3, [r7, #4]
    1f1c:	699b      	ldr	r3, [r3, #24]
    1f1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1f26:	bf00      	nop
    1f28:	370c      	adds	r7, #12
    1f2a:	46bd      	mov	sp, r7
    1f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f30:	4770      	bx	lr

00001f32 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    1f32:	b480      	push	{r7}
    1f34:	b083      	sub	sp, #12
    1f36:	af00      	add	r7, sp, #0
    1f38:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    1f3a:	687b      	ldr	r3, [r7, #4]
    1f3c:	699b      	ldr	r3, [r3, #24]
    1f3e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1f42:	687b      	ldr	r3, [r7, #4]
    1f44:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1f46:	bf00      	nop
    1f48:	370c      	adds	r7, #12
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr

00001f52 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    1f52:	b480      	push	{r7}
    1f54:	b083      	sub	sp, #12
    1f56:	af00      	add	r7, sp, #0
    1f58:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	69db      	ldr	r3, [r3, #28]
    1f5e:	f043 0220 	orr.w	r2, r3, #32
    1f62:	687b      	ldr	r3, [r7, #4]
    1f64:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1f66:	bf00      	nop
    1f68:	370c      	adds	r7, #12
    1f6a:	46bd      	mov	sp, r7
    1f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f70:	4770      	bx	lr

00001f72 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    1f72:	b480      	push	{r7}
    1f74:	b083      	sub	sp, #12
    1f76:	af00      	add	r7, sp, #0
    1f78:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1f7a:	687b      	ldr	r3, [r7, #4]
    1f7c:	69db      	ldr	r3, [r3, #28]
    1f7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1f82:	687b      	ldr	r3, [r7, #4]
    1f84:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1f86:	bf00      	nop
    1f88:	370c      	adds	r7, #12
    1f8a:	46bd      	mov	sp, r7
    1f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f90:	4770      	bx	lr

00001f92 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    1f92:	b480      	push	{r7}
    1f94:	b083      	sub	sp, #12
    1f96:	af00      	add	r7, sp, #0
    1f98:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    1f9a:	687b      	ldr	r3, [r7, #4]
    1f9c:	69db      	ldr	r3, [r3, #28]
    1f9e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1fa2:	687b      	ldr	r3, [r7, #4]
    1fa4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1fa6:	bf00      	nop
    1fa8:	370c      	adds	r7, #12
    1faa:	46bd      	mov	sp, r7
    1fac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fb0:	4770      	bx	lr

00001fb2 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    1fb2:	b480      	push	{r7}
    1fb4:	b083      	sub	sp, #12
    1fb6:	af00      	add	r7, sp, #0
    1fb8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    1fba:	687b      	ldr	r3, [r7, #4]
    1fbc:	6a1b      	ldr	r3, [r3, #32]
    1fbe:	f043 0201 	orr.w	r2, r3, #1
    1fc2:	687b      	ldr	r3, [r7, #4]
    1fc4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1fc6:	bf00      	nop
    1fc8:	370c      	adds	r7, #12
    1fca:	46bd      	mov	sp, r7
    1fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd0:	4770      	bx	lr

00001fd2 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    1fd2:	b480      	push	{r7}
    1fd4:	b083      	sub	sp, #12
    1fd6:	af00      	add	r7, sp, #0
    1fd8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1fda:	687b      	ldr	r3, [r7, #4]
    1fdc:	6a1b      	ldr	r3, [r3, #32]
    1fde:	f043 0202 	orr.w	r2, r3, #2
    1fe2:	687b      	ldr	r3, [r7, #4]
    1fe4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1fe6:	bf00      	nop
    1fe8:	370c      	adds	r7, #12
    1fea:	46bd      	mov	sp, r7
    1fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ff0:	4770      	bx	lr

00001ff2 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    1ff2:	b480      	push	{r7}
    1ff4:	b083      	sub	sp, #12
    1ff6:	af00      	add	r7, sp, #0
    1ff8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    1ffa:	687b      	ldr	r3, [r7, #4]
    1ffc:	6a1b      	ldr	r3, [r3, #32]
    1ffe:	f043 0204 	orr.w	r2, r3, #4
    2002:	687b      	ldr	r3, [r7, #4]
    2004:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2006:	bf00      	nop
    2008:	370c      	adds	r7, #12
    200a:	46bd      	mov	sp, r7
    200c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2010:	4770      	bx	lr

00002012 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    2012:	b480      	push	{r7}
    2014:	b083      	sub	sp, #12
    2016:	af00      	add	r7, sp, #0
    2018:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    201a:	687b      	ldr	r3, [r7, #4]
    201c:	6a1b      	ldr	r3, [r3, #32]
    201e:	f043 0208 	orr.w	r2, r3, #8
    2022:	687b      	ldr	r3, [r7, #4]
    2024:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2026:	bf00      	nop
    2028:	370c      	adds	r7, #12
    202a:	46bd      	mov	sp, r7
    202c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2030:	4770      	bx	lr

00002032 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    2032:	b480      	push	{r7}
    2034:	b083      	sub	sp, #12
    2036:	af00      	add	r7, sp, #0
    2038:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    203a:	687b      	ldr	r3, [r7, #4]
    203c:	6a1b      	ldr	r3, [r3, #32]
    203e:	f043 0220 	orr.w	r2, r3, #32
    2042:	687b      	ldr	r3, [r7, #4]
    2044:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2046:	bf00      	nop
    2048:	370c      	adds	r7, #12
    204a:	46bd      	mov	sp, r7
    204c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2050:	4770      	bx	lr

00002052 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    2052:	b480      	push	{r7}
    2054:	b083      	sub	sp, #12
    2056:	af00      	add	r7, sp, #0
    2058:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    205a:	687b      	ldr	r3, [r7, #4]
    205c:	6a1b      	ldr	r3, [r3, #32]
    205e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    2062:	687b      	ldr	r3, [r7, #4]
    2064:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2066:	bf00      	nop
    2068:	370c      	adds	r7, #12
    206a:	46bd      	mov	sp, r7
    206c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2070:	4770      	bx	lr

00002072 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2072:	b480      	push	{r7}
    2074:	b085      	sub	sp, #20
    2076:	af00      	add	r7, sp, #0
    2078:	60f8      	str	r0, [r7, #12]
    207a:	460b      	mov	r3, r1
    207c:	607a      	str	r2, [r7, #4]
    207e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2080:	7afb      	ldrb	r3, [r7, #11]
    2082:	68fa      	ldr	r2, [r7, #12]
    2084:	01db      	lsls	r3, r3, #7
    2086:	4413      	add	r3, r2
    2088:	3308      	adds	r3, #8
    208a:	687a      	ldr	r2, [r7, #4]
    208c:	601a      	str	r2, [r3, #0]
}
    208e:	bf00      	nop
    2090:	3714      	adds	r7, #20
    2092:	46bd      	mov	sp, r7
    2094:	f85d 7b04 	ldr.w	r7, [sp], #4
    2098:	4770      	bx	lr

0000209a <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    209a:	b480      	push	{r7}
    209c:	b085      	sub	sp, #20
    209e:	af00      	add	r7, sp, #0
    20a0:	60f8      	str	r0, [r7, #12]
    20a2:	460b      	mov	r3, r1
    20a4:	607a      	str	r2, [r7, #4]
    20a6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    20a8:	7afb      	ldrb	r3, [r7, #11]
    20aa:	68fa      	ldr	r2, [r7, #12]
    20ac:	01db      	lsls	r3, r3, #7
    20ae:	4413      	add	r3, r2
    20b0:	3304      	adds	r3, #4
    20b2:	687a      	ldr	r2, [r7, #4]
    20b4:	601a      	str	r2, [r3, #0]
}
    20b6:	bf00      	nop
    20b8:	3714      	adds	r7, #20
    20ba:	46bd      	mov	sp, r7
    20bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    20c0:	4770      	bx	lr

000020c2 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    20c2:	b480      	push	{r7}
    20c4:	b085      	sub	sp, #20
    20c6:	af00      	add	r7, sp, #0
    20c8:	60f8      	str	r0, [r7, #12]
    20ca:	460b      	mov	r3, r1
    20cc:	607a      	str	r2, [r7, #4]
    20ce:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    20d0:	7afb      	ldrb	r3, [r7, #11]
    20d2:	68fa      	ldr	r2, [r7, #12]
    20d4:	01db      	lsls	r3, r3, #7
    20d6:	4413      	add	r3, r2
    20d8:	3318      	adds	r3, #24
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	601a      	str	r2, [r3, #0]
}
    20de:	bf00      	nop
    20e0:	3714      	adds	r7, #20
    20e2:	46bd      	mov	sp, r7
    20e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    20e8:	4770      	bx	lr

000020ea <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    20ea:	b480      	push	{r7}
    20ec:	b085      	sub	sp, #20
    20ee:	af00      	add	r7, sp, #0
    20f0:	60f8      	str	r0, [r7, #12]
    20f2:	460b      	mov	r3, r1
    20f4:	607a      	str	r2, [r7, #4]
    20f6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    20f8:	7afb      	ldrb	r3, [r7, #11]
    20fa:	68fa      	ldr	r2, [r7, #12]
    20fc:	01db      	lsls	r3, r3, #7
    20fe:	4413      	add	r3, r2
    2100:	3314      	adds	r3, #20
    2102:	687a      	ldr	r2, [r7, #4]
    2104:	601a      	str	r2, [r3, #0]
}
    2106:	bf00      	nop
    2108:	3714      	adds	r7, #20
    210a:	46bd      	mov	sp, r7
    210c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2110:	4770      	bx	lr

00002112 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2112:	b480      	push	{r7}
    2114:	b085      	sub	sp, #20
    2116:	af00      	add	r7, sp, #0
    2118:	6078      	str	r0, [r7, #4]
    211a:	4608      	mov	r0, r1
    211c:	4611      	mov	r1, r2
    211e:	461a      	mov	r2, r3
    2120:	4603      	mov	r3, r0
    2122:	70fb      	strb	r3, [r7, #3]
    2124:	460b      	mov	r3, r1
    2126:	70bb      	strb	r3, [r7, #2]
    2128:	4613      	mov	r3, r2
    212a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    212c:	78fa      	ldrb	r2, [r7, #3]
    212e:	78bb      	ldrb	r3, [r7, #2]
    2130:	6879      	ldr	r1, [r7, #4]
    2132:	01d2      	lsls	r2, r2, #7
    2134:	440a      	add	r2, r1
    2136:	4413      	add	r3, r2
    2138:	3330      	adds	r3, #48	; 0x30
    213a:	781b      	ldrb	r3, [r3, #0]
    213c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    213e:	7bfb      	ldrb	r3, [r7, #15]
    2140:	f023 030f 	bic.w	r3, r3, #15
    2144:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    2146:	787b      	ldrb	r3, [r7, #1]
    2148:	f003 030f 	and.w	r3, r3, #15
    214c:	b2da      	uxtb	r2, r3
    214e:	7bfb      	ldrb	r3, [r7, #15]
    2150:	4313      	orrs	r3, r2
    2152:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2154:	78fa      	ldrb	r2, [r7, #3]
    2156:	78bb      	ldrb	r3, [r7, #2]
    2158:	6879      	ldr	r1, [r7, #4]
    215a:	01d2      	lsls	r2, r2, #7
    215c:	440a      	add	r2, r1
    215e:	4413      	add	r3, r2
    2160:	3330      	adds	r3, #48	; 0x30
    2162:	7bfa      	ldrb	r2, [r7, #15]
    2164:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2166:	bf00      	nop
    2168:	3714      	adds	r7, #20
    216a:	46bd      	mov	sp, r7
    216c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2170:	4770      	bx	lr

00002172 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2172:	b480      	push	{r7}
    2174:	b085      	sub	sp, #20
    2176:	af00      	add	r7, sp, #0
    2178:	6078      	str	r0, [r7, #4]
    217a:	4608      	mov	r0, r1
    217c:	4611      	mov	r1, r2
    217e:	461a      	mov	r2, r3
    2180:	4603      	mov	r3, r0
    2182:	70fb      	strb	r3, [r7, #3]
    2184:	460b      	mov	r3, r1
    2186:	70bb      	strb	r3, [r7, #2]
    2188:	4613      	mov	r3, r2
    218a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    218c:	78fa      	ldrb	r2, [r7, #3]
    218e:	78bb      	ldrb	r3, [r7, #2]
    2190:	6879      	ldr	r1, [r7, #4]
    2192:	01d2      	lsls	r2, r2, #7
    2194:	440a      	add	r2, r1
    2196:	4413      	add	r3, r2
    2198:	3330      	adds	r3, #48	; 0x30
    219a:	781b      	ldrb	r3, [r3, #0]
    219c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    219e:	7bfb      	ldrb	r3, [r7, #15]
    21a0:	f003 030f 	and.w	r3, r3, #15
    21a4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    21a6:	787b      	ldrb	r3, [r7, #1]
    21a8:	011b      	lsls	r3, r3, #4
    21aa:	b2da      	uxtb	r2, r3
    21ac:	7bfb      	ldrb	r3, [r7, #15]
    21ae:	4313      	orrs	r3, r2
    21b0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    21b2:	78fa      	ldrb	r2, [r7, #3]
    21b4:	78bb      	ldrb	r3, [r7, #2]
    21b6:	6879      	ldr	r1, [r7, #4]
    21b8:	01d2      	lsls	r2, r2, #7
    21ba:	440a      	add	r2, r1
    21bc:	4413      	add	r3, r2
    21be:	3330      	adds	r3, #48	; 0x30
    21c0:	7bfa      	ldrb	r2, [r7, #15]
    21c2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    21c4:	bf00      	nop
    21c6:	3714      	adds	r7, #20
    21c8:	46bd      	mov	sp, r7
    21ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ce:	4770      	bx	lr

000021d0 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    21d0:	b480      	push	{r7}
    21d2:	b085      	sub	sp, #20
    21d4:	af00      	add	r7, sp, #0
    21d6:	6078      	str	r0, [r7, #4]
    21d8:	4608      	mov	r0, r1
    21da:	4611      	mov	r1, r2
    21dc:	461a      	mov	r2, r3
    21de:	4603      	mov	r3, r0
    21e0:	70fb      	strb	r3, [r7, #3]
    21e2:	460b      	mov	r3, r1
    21e4:	70bb      	strb	r3, [r7, #2]
    21e6:	4613      	mov	r3, r2
    21e8:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    21ea:	78fa      	ldrb	r2, [r7, #3]
    21ec:	78bb      	ldrb	r3, [r7, #2]
    21ee:	6879      	ldr	r1, [r7, #4]
    21f0:	01d2      	lsls	r2, r2, #7
    21f2:	440a      	add	r2, r1
    21f4:	4413      	add	r3, r2
    21f6:	3340      	adds	r3, #64	; 0x40
    21f8:	781b      	ldrb	r3, [r3, #0]
    21fa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    21fc:	7bfb      	ldrb	r3, [r7, #15]
    21fe:	f023 0301 	bic.w	r3, r3, #1
    2202:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2204:	787a      	ldrb	r2, [r7, #1]
    2206:	7bfb      	ldrb	r3, [r7, #15]
    2208:	4313      	orrs	r3, r2
    220a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    220c:	78fa      	ldrb	r2, [r7, #3]
    220e:	78bb      	ldrb	r3, [r7, #2]
    2210:	6879      	ldr	r1, [r7, #4]
    2212:	01d2      	lsls	r2, r2, #7
    2214:	440a      	add	r2, r1
    2216:	4413      	add	r3, r2
    2218:	3340      	adds	r3, #64	; 0x40
    221a:	7bfa      	ldrb	r2, [r7, #15]
    221c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    221e:	bf00      	nop
    2220:	3714      	adds	r7, #20
    2222:	46bd      	mov	sp, r7
    2224:	f85d 7b04 	ldr.w	r7, [sp], #4
    2228:	4770      	bx	lr

0000222a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    222a:	b490      	push	{r4, r7}
    222c:	b082      	sub	sp, #8
    222e:	af00      	add	r7, sp, #0
    2230:	6078      	str	r0, [r7, #4]
    2232:	460b      	mov	r3, r1
    2234:	70fb      	strb	r3, [r7, #3]
    2236:	4613      	mov	r3, r2
    2238:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    223a:	78fa      	ldrb	r2, [r7, #3]
    223c:	78bb      	ldrb	r3, [r7, #2]
    223e:	78f8      	ldrb	r0, [r7, #3]
    2240:	78b9      	ldrb	r1, [r7, #2]
    2242:	687c      	ldr	r4, [r7, #4]
    2244:	01c0      	lsls	r0, r0, #7
    2246:	4420      	add	r0, r4
    2248:	4401      	add	r1, r0
    224a:	3140      	adds	r1, #64	; 0x40
    224c:	7809      	ldrb	r1, [r1, #0]
    224e:	b2c9      	uxtb	r1, r1
    2250:	f041 0104 	orr.w	r1, r1, #4
    2254:	b2c8      	uxtb	r0, r1
    2256:	6879      	ldr	r1, [r7, #4]
    2258:	01d2      	lsls	r2, r2, #7
    225a:	440a      	add	r2, r1
    225c:	4413      	add	r3, r2
    225e:	3340      	adds	r3, #64	; 0x40
    2260:	4602      	mov	r2, r0
    2262:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2264:	bf00      	nop
    2266:	3708      	adds	r7, #8
    2268:	46bd      	mov	sp, r7
    226a:	bc90      	pop	{r4, r7}
    226c:	4770      	bx	lr

0000226e <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    226e:	b490      	push	{r4, r7}
    2270:	b082      	sub	sp, #8
    2272:	af00      	add	r7, sp, #0
    2274:	6078      	str	r0, [r7, #4]
    2276:	460b      	mov	r3, r1
    2278:	70fb      	strb	r3, [r7, #3]
    227a:	4613      	mov	r3, r2
    227c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    227e:	78fa      	ldrb	r2, [r7, #3]
    2280:	78bb      	ldrb	r3, [r7, #2]
    2282:	78f8      	ldrb	r0, [r7, #3]
    2284:	78b9      	ldrb	r1, [r7, #2]
    2286:	687c      	ldr	r4, [r7, #4]
    2288:	01c0      	lsls	r0, r0, #7
    228a:	4420      	add	r0, r4
    228c:	4401      	add	r1, r0
    228e:	3140      	adds	r1, #64	; 0x40
    2290:	7809      	ldrb	r1, [r1, #0]
    2292:	b2c9      	uxtb	r1, r1
    2294:	f021 0104 	bic.w	r1, r1, #4
    2298:	b2c8      	uxtb	r0, r1
    229a:	6879      	ldr	r1, [r7, #4]
    229c:	01d2      	lsls	r2, r2, #7
    229e:	440a      	add	r2, r1
    22a0:	4413      	add	r3, r2
    22a2:	3340      	adds	r3, #64	; 0x40
    22a4:	4602      	mov	r2, r0
    22a6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    22a8:	bf00      	nop
    22aa:	3708      	adds	r7, #8
    22ac:	46bd      	mov	sp, r7
    22ae:	bc90      	pop	{r4, r7}
    22b0:	4770      	bx	lr

000022b2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    22b2:	b480      	push	{r7}
    22b4:	b085      	sub	sp, #20
    22b6:	af00      	add	r7, sp, #0
    22b8:	60f8      	str	r0, [r7, #12]
    22ba:	460b      	mov	r3, r1
    22bc:	607a      	str	r2, [r7, #4]
    22be:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    22c0:	7afb      	ldrb	r3, [r7, #11]
    22c2:	68fa      	ldr	r2, [r7, #12]
    22c4:	01db      	lsls	r3, r3, #7
    22c6:	4413      	add	r3, r2
    22c8:	3328      	adds	r3, #40	; 0x28
    22ca:	687a      	ldr	r2, [r7, #4]
    22cc:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    22ce:	bf00      	nop
    22d0:	3714      	adds	r7, #20
    22d2:	46bd      	mov	sp, r7
    22d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    22d8:	4770      	bx	lr
	...

000022dc <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    22dc:	b580      	push	{r7, lr}
    22de:	b082      	sub	sp, #8
    22e0:	af00      	add	r7, sp, #0
    22e2:	4603      	mov	r3, r0
    22e4:	6039      	str	r1, [r7, #0]
    22e6:	71fb      	strb	r3, [r7, #7]
    22e8:	4613      	mov	r3, r2
    22ea:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    22ec:	79bb      	ldrb	r3, [r7, #6]
    22ee:	2b01      	cmp	r3, #1
    22f0:	d01c      	beq.n	232c <_gpio_set_direction+0x50>
    22f2:	2b02      	cmp	r3, #2
    22f4:	d037      	beq.n	2366 <_gpio_set_direction+0x8a>
    22f6:	2b00      	cmp	r3, #0
    22f8:	d14e      	bne.n	2398 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    22fa:	79fb      	ldrb	r3, [r7, #7]
    22fc:	683a      	ldr	r2, [r7, #0]
    22fe:	4619      	mov	r1, r3
    2300:	482a      	ldr	r0, [pc, #168]	; (23ac <_gpio_set_direction+0xd0>)
    2302:	4b2b      	ldr	r3, [pc, #172]	; (23b0 <_gpio_set_direction+0xd4>)
    2304:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2306:	683b      	ldr	r3, [r7, #0]
    2308:	b29b      	uxth	r3, r3
    230a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    230e:	79fb      	ldrb	r3, [r7, #7]
    2310:	4619      	mov	r1, r3
    2312:	4826      	ldr	r0, [pc, #152]	; (23ac <_gpio_set_direction+0xd0>)
    2314:	4b27      	ldr	r3, [pc, #156]	; (23b4 <_gpio_set_direction+0xd8>)
    2316:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2318:	683b      	ldr	r3, [r7, #0]
    231a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    231c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    2320:	79fb      	ldrb	r3, [r7, #7]
    2322:	4619      	mov	r1, r3
    2324:	4821      	ldr	r0, [pc, #132]	; (23ac <_gpio_set_direction+0xd0>)
    2326:	4b23      	ldr	r3, [pc, #140]	; (23b4 <_gpio_set_direction+0xd8>)
    2328:	4798      	blx	r3
		break;
    232a:	e03a      	b.n	23a2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    232c:	79fb      	ldrb	r3, [r7, #7]
    232e:	683a      	ldr	r2, [r7, #0]
    2330:	4619      	mov	r1, r3
    2332:	481e      	ldr	r0, [pc, #120]	; (23ac <_gpio_set_direction+0xd0>)
    2334:	4b1e      	ldr	r3, [pc, #120]	; (23b0 <_gpio_set_direction+0xd4>)
    2336:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    2338:	683b      	ldr	r3, [r7, #0]
    233a:	b29b      	uxth	r3, r3
    233c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    2340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2344:	79f9      	ldrb	r1, [r7, #7]
    2346:	461a      	mov	r2, r3
    2348:	4818      	ldr	r0, [pc, #96]	; (23ac <_gpio_set_direction+0xd0>)
    234a:	4b1a      	ldr	r3, [pc, #104]	; (23b4 <_gpio_set_direction+0xd8>)
    234c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    234e:	683b      	ldr	r3, [r7, #0]
    2350:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    2352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    2356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    235a:	79f9      	ldrb	r1, [r7, #7]
    235c:	461a      	mov	r2, r3
    235e:	4813      	ldr	r0, [pc, #76]	; (23ac <_gpio_set_direction+0xd0>)
    2360:	4b14      	ldr	r3, [pc, #80]	; (23b4 <_gpio_set_direction+0xd8>)
    2362:	4798      	blx	r3
		break;
    2364:	e01d      	b.n	23a2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    2366:	79fb      	ldrb	r3, [r7, #7]
    2368:	683a      	ldr	r2, [r7, #0]
    236a:	4619      	mov	r1, r3
    236c:	480f      	ldr	r0, [pc, #60]	; (23ac <_gpio_set_direction+0xd0>)
    236e:	4b12      	ldr	r3, [pc, #72]	; (23b8 <_gpio_set_direction+0xdc>)
    2370:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2372:	683b      	ldr	r3, [r7, #0]
    2374:	b29b      	uxth	r3, r3
    2376:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    237a:	79fb      	ldrb	r3, [r7, #7]
    237c:	4619      	mov	r1, r3
    237e:	480b      	ldr	r0, [pc, #44]	; (23ac <_gpio_set_direction+0xd0>)
    2380:	4b0c      	ldr	r3, [pc, #48]	; (23b4 <_gpio_set_direction+0xd8>)
    2382:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2384:	683b      	ldr	r3, [r7, #0]
    2386:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2388:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    238c:	79fb      	ldrb	r3, [r7, #7]
    238e:	4619      	mov	r1, r3
    2390:	4806      	ldr	r0, [pc, #24]	; (23ac <_gpio_set_direction+0xd0>)
    2392:	4b08      	ldr	r3, [pc, #32]	; (23b4 <_gpio_set_direction+0xd8>)
    2394:	4798      	blx	r3
		break;
    2396:	e004      	b.n	23a2 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    2398:	2246      	movs	r2, #70	; 0x46
    239a:	4908      	ldr	r1, [pc, #32]	; (23bc <_gpio_set_direction+0xe0>)
    239c:	2000      	movs	r0, #0
    239e:	4b08      	ldr	r3, [pc, #32]	; (23c0 <_gpio_set_direction+0xe4>)
    23a0:	4798      	blx	r3
	}
}
    23a2:	bf00      	nop
    23a4:	3708      	adds	r7, #8
    23a6:	46bd      	mov	sp, r7
    23a8:	bd80      	pop	{r7, pc}
    23aa:	bf00      	nop
    23ac:	41008000 	.word	0x41008000
    23b0:	0000209b 	.word	0x0000209b
    23b4:	000022b3 	.word	0x000022b3
    23b8:	00002073 	.word	0x00002073
    23bc:	00010bbc 	.word	0x00010bbc
    23c0:	00004a95 	.word	0x00004a95

000023c4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    23c4:	b580      	push	{r7, lr}
    23c6:	b082      	sub	sp, #8
    23c8:	af00      	add	r7, sp, #0
    23ca:	4603      	mov	r3, r0
    23cc:	6039      	str	r1, [r7, #0]
    23ce:	71fb      	strb	r3, [r7, #7]
    23d0:	4613      	mov	r3, r2
    23d2:	71bb      	strb	r3, [r7, #6]
	if (level) {
    23d4:	79bb      	ldrb	r3, [r7, #6]
    23d6:	2b00      	cmp	r3, #0
    23d8:	d006      	beq.n	23e8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    23da:	79fb      	ldrb	r3, [r7, #7]
    23dc:	683a      	ldr	r2, [r7, #0]
    23de:	4619      	mov	r1, r3
    23e0:	4806      	ldr	r0, [pc, #24]	; (23fc <_gpio_set_level+0x38>)
    23e2:	4b07      	ldr	r3, [pc, #28]	; (2400 <_gpio_set_level+0x3c>)
    23e4:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    23e6:	e005      	b.n	23f4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    23e8:	79fb      	ldrb	r3, [r7, #7]
    23ea:	683a      	ldr	r2, [r7, #0]
    23ec:	4619      	mov	r1, r3
    23ee:	4803      	ldr	r0, [pc, #12]	; (23fc <_gpio_set_level+0x38>)
    23f0:	4b04      	ldr	r3, [pc, #16]	; (2404 <_gpio_set_level+0x40>)
    23f2:	4798      	blx	r3
}
    23f4:	bf00      	nop
    23f6:	3708      	adds	r7, #8
    23f8:	46bd      	mov	sp, r7
    23fa:	bd80      	pop	{r7, pc}
    23fc:	41008000 	.word	0x41008000
    2400:	000020c3 	.word	0x000020c3
    2404:	000020eb 	.word	0x000020eb

00002408 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    2408:	b580      	push	{r7, lr}
    240a:	b082      	sub	sp, #8
    240c:	af00      	add	r7, sp, #0
    240e:	4603      	mov	r3, r0
    2410:	71fb      	strb	r3, [r7, #7]
    2412:	460b      	mov	r3, r1
    2414:	71bb      	strb	r3, [r7, #6]
    2416:	4613      	mov	r3, r2
    2418:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    241a:	797b      	ldrb	r3, [r7, #5]
    241c:	2b01      	cmp	r3, #1
    241e:	d00a      	beq.n	2436 <_gpio_set_pin_pull_mode+0x2e>
    2420:	2b02      	cmp	r3, #2
    2422:	d01f      	beq.n	2464 <_gpio_set_pin_pull_mode+0x5c>
    2424:	2b00      	cmp	r3, #0
    2426:	d134      	bne.n	2492 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    2428:	79ba      	ldrb	r2, [r7, #6]
    242a:	79fb      	ldrb	r3, [r7, #7]
    242c:	4619      	mov	r1, r3
    242e:	481e      	ldr	r0, [pc, #120]	; (24a8 <_gpio_set_pin_pull_mode+0xa0>)
    2430:	4b1e      	ldr	r3, [pc, #120]	; (24ac <_gpio_set_pin_pull_mode+0xa4>)
    2432:	4798      	blx	r3
		break;
    2434:	e033      	b.n	249e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    2436:	79bb      	ldrb	r3, [r7, #6]
    2438:	2201      	movs	r2, #1
    243a:	409a      	lsls	r2, r3
    243c:	79fb      	ldrb	r3, [r7, #7]
    243e:	4619      	mov	r1, r3
    2440:	4819      	ldr	r0, [pc, #100]	; (24a8 <_gpio_set_pin_pull_mode+0xa0>)
    2442:	4b1b      	ldr	r3, [pc, #108]	; (24b0 <_gpio_set_pin_pull_mode+0xa8>)
    2444:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2446:	79ba      	ldrb	r2, [r7, #6]
    2448:	79fb      	ldrb	r3, [r7, #7]
    244a:	4619      	mov	r1, r3
    244c:	4816      	ldr	r0, [pc, #88]	; (24a8 <_gpio_set_pin_pull_mode+0xa0>)
    244e:	4b19      	ldr	r3, [pc, #100]	; (24b4 <_gpio_set_pin_pull_mode+0xac>)
    2450:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    2452:	79bb      	ldrb	r3, [r7, #6]
    2454:	2201      	movs	r2, #1
    2456:	409a      	lsls	r2, r3
    2458:	79fb      	ldrb	r3, [r7, #7]
    245a:	4619      	mov	r1, r3
    245c:	4812      	ldr	r0, [pc, #72]	; (24a8 <_gpio_set_pin_pull_mode+0xa0>)
    245e:	4b16      	ldr	r3, [pc, #88]	; (24b8 <_gpio_set_pin_pull_mode+0xb0>)
    2460:	4798      	blx	r3
		break;
    2462:	e01c      	b.n	249e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    2464:	79bb      	ldrb	r3, [r7, #6]
    2466:	2201      	movs	r2, #1
    2468:	409a      	lsls	r2, r3
    246a:	79fb      	ldrb	r3, [r7, #7]
    246c:	4619      	mov	r1, r3
    246e:	480e      	ldr	r0, [pc, #56]	; (24a8 <_gpio_set_pin_pull_mode+0xa0>)
    2470:	4b0f      	ldr	r3, [pc, #60]	; (24b0 <_gpio_set_pin_pull_mode+0xa8>)
    2472:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2474:	79ba      	ldrb	r2, [r7, #6]
    2476:	79fb      	ldrb	r3, [r7, #7]
    2478:	4619      	mov	r1, r3
    247a:	480b      	ldr	r0, [pc, #44]	; (24a8 <_gpio_set_pin_pull_mode+0xa0>)
    247c:	4b0d      	ldr	r3, [pc, #52]	; (24b4 <_gpio_set_pin_pull_mode+0xac>)
    247e:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    2480:	79bb      	ldrb	r3, [r7, #6]
    2482:	2201      	movs	r2, #1
    2484:	409a      	lsls	r2, r3
    2486:	79fb      	ldrb	r3, [r7, #7]
    2488:	4619      	mov	r1, r3
    248a:	4807      	ldr	r0, [pc, #28]	; (24a8 <_gpio_set_pin_pull_mode+0xa0>)
    248c:	4b0b      	ldr	r3, [pc, #44]	; (24bc <_gpio_set_pin_pull_mode+0xb4>)
    248e:	4798      	blx	r3
		break;
    2490:	e005      	b.n	249e <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    2492:	2289      	movs	r2, #137	; 0x89
    2494:	490a      	ldr	r1, [pc, #40]	; (24c0 <_gpio_set_pin_pull_mode+0xb8>)
    2496:	2000      	movs	r0, #0
    2498:	4b0a      	ldr	r3, [pc, #40]	; (24c4 <_gpio_set_pin_pull_mode+0xbc>)
    249a:	4798      	blx	r3
		break;
    249c:	bf00      	nop
	}
}
    249e:	bf00      	nop
    24a0:	3708      	adds	r7, #8
    24a2:	46bd      	mov	sp, r7
    24a4:	bd80      	pop	{r7, pc}
    24a6:	bf00      	nop
    24a8:	41008000 	.word	0x41008000
    24ac:	0000226f 	.word	0x0000226f
    24b0:	0000209b 	.word	0x0000209b
    24b4:	0000222b 	.word	0x0000222b
    24b8:	000020c3 	.word	0x000020c3
    24bc:	000020eb 	.word	0x000020eb
    24c0:	00010bbc 	.word	0x00010bbc
    24c4:	00004a95 	.word	0x00004a95

000024c8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    24c8:	b590      	push	{r4, r7, lr}
    24ca:	b085      	sub	sp, #20
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    24d2:	687b      	ldr	r3, [r7, #4]
    24d4:	095b      	lsrs	r3, r3, #5
    24d6:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    24d8:	687b      	ldr	r3, [r7, #4]
    24da:	b2db      	uxtb	r3, r3
    24dc:	f003 031f 	and.w	r3, r3, #31
    24e0:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    24e2:	683b      	ldr	r3, [r7, #0]
    24e4:	f1b3 3fff 	cmp.w	r3, #4294967295
    24e8:	d106      	bne.n	24f8 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    24ea:	7bba      	ldrb	r2, [r7, #14]
    24ec:	7bf9      	ldrb	r1, [r7, #15]
    24ee:	2300      	movs	r3, #0
    24f0:	4812      	ldr	r0, [pc, #72]	; (253c <_gpio_set_pin_function+0x74>)
    24f2:	4c13      	ldr	r4, [pc, #76]	; (2540 <_gpio_set_pin_function+0x78>)
    24f4:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    24f6:	e01d      	b.n	2534 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    24f8:	7bba      	ldrb	r2, [r7, #14]
    24fa:	7bf9      	ldrb	r1, [r7, #15]
    24fc:	2301      	movs	r3, #1
    24fe:	480f      	ldr	r0, [pc, #60]	; (253c <_gpio_set_pin_function+0x74>)
    2500:	4c0f      	ldr	r4, [pc, #60]	; (2540 <_gpio_set_pin_function+0x78>)
    2502:	47a0      	blx	r4
		if (pin & 1) {
    2504:	7bbb      	ldrb	r3, [r7, #14]
    2506:	f003 0301 	and.w	r3, r3, #1
    250a:	2b00      	cmp	r3, #0
    250c:	d009      	beq.n	2522 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    250e:	7bbb      	ldrb	r3, [r7, #14]
    2510:	085b      	lsrs	r3, r3, #1
    2512:	b2da      	uxtb	r2, r3
    2514:	683b      	ldr	r3, [r7, #0]
    2516:	b2db      	uxtb	r3, r3
    2518:	7bf9      	ldrb	r1, [r7, #15]
    251a:	4808      	ldr	r0, [pc, #32]	; (253c <_gpio_set_pin_function+0x74>)
    251c:	4c09      	ldr	r4, [pc, #36]	; (2544 <_gpio_set_pin_function+0x7c>)
    251e:	47a0      	blx	r4
}
    2520:	e008      	b.n	2534 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    2522:	7bbb      	ldrb	r3, [r7, #14]
    2524:	085b      	lsrs	r3, r3, #1
    2526:	b2da      	uxtb	r2, r3
    2528:	683b      	ldr	r3, [r7, #0]
    252a:	b2db      	uxtb	r3, r3
    252c:	7bf9      	ldrb	r1, [r7, #15]
    252e:	4803      	ldr	r0, [pc, #12]	; (253c <_gpio_set_pin_function+0x74>)
    2530:	4c05      	ldr	r4, [pc, #20]	; (2548 <_gpio_set_pin_function+0x80>)
    2532:	47a0      	blx	r4
}
    2534:	bf00      	nop
    2536:	3714      	adds	r7, #20
    2538:	46bd      	mov	sp, r7
    253a:	bd90      	pop	{r4, r7, pc}
    253c:	41008000 	.word	0x41008000
    2540:	000021d1 	.word	0x000021d1
    2544:	00002173 	.word	0x00002173
    2548:	00002113 	.word	0x00002113

0000254c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    254c:	b580      	push	{r7, lr}
    254e:	b082      	sub	sp, #8
    2550:	af00      	add	r7, sp, #0
    2552:	4603      	mov	r3, r0
    2554:	460a      	mov	r2, r1
    2556:	71fb      	strb	r3, [r7, #7]
    2558:	4613      	mov	r3, r2
    255a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    255c:	79fb      	ldrb	r3, [r7, #7]
    255e:	095b      	lsrs	r3, r3, #5
    2560:	b2d8      	uxtb	r0, r3
    2562:	79fb      	ldrb	r3, [r7, #7]
    2564:	f003 031f 	and.w	r3, r3, #31
    2568:	b2db      	uxtb	r3, r3
    256a:	79ba      	ldrb	r2, [r7, #6]
    256c:	4619      	mov	r1, r3
    256e:	4b03      	ldr	r3, [pc, #12]	; (257c <gpio_set_pin_pull_mode+0x30>)
    2570:	4798      	blx	r3
}
    2572:	bf00      	nop
    2574:	3708      	adds	r7, #8
    2576:	46bd      	mov	sp, r7
    2578:	bd80      	pop	{r7, pc}
    257a:	bf00      	nop
    257c:	00002409 	.word	0x00002409

00002580 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    2580:	b580      	push	{r7, lr}
    2582:	b082      	sub	sp, #8
    2584:	af00      	add	r7, sp, #0
    2586:	6078      	str	r0, [r7, #4]
    2588:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    258a:	6839      	ldr	r1, [r7, #0]
    258c:	6878      	ldr	r0, [r7, #4]
    258e:	4b03      	ldr	r3, [pc, #12]	; (259c <gpio_set_pin_function+0x1c>)
    2590:	4798      	blx	r3
}
    2592:	bf00      	nop
    2594:	3708      	adds	r7, #8
    2596:	46bd      	mov	sp, r7
    2598:	bd80      	pop	{r7, pc}
    259a:	bf00      	nop
    259c:	000024c9 	.word	0x000024c9

000025a0 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    25a0:	b580      	push	{r7, lr}
    25a2:	b082      	sub	sp, #8
    25a4:	af00      	add	r7, sp, #0
    25a6:	4603      	mov	r3, r0
    25a8:	460a      	mov	r2, r1
    25aa:	71fb      	strb	r3, [r7, #7]
    25ac:	4613      	mov	r3, r2
    25ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    25b0:	79fb      	ldrb	r3, [r7, #7]
    25b2:	095b      	lsrs	r3, r3, #5
    25b4:	b2d8      	uxtb	r0, r3
    25b6:	79fb      	ldrb	r3, [r7, #7]
    25b8:	f003 031f 	and.w	r3, r3, #31
    25bc:	2201      	movs	r2, #1
    25be:	fa02 f303 	lsl.w	r3, r2, r3
    25c2:	79ba      	ldrb	r2, [r7, #6]
    25c4:	4619      	mov	r1, r3
    25c6:	4b03      	ldr	r3, [pc, #12]	; (25d4 <gpio_set_pin_direction+0x34>)
    25c8:	4798      	blx	r3
}
    25ca:	bf00      	nop
    25cc:	3708      	adds	r7, #8
    25ce:	46bd      	mov	sp, r7
    25d0:	bd80      	pop	{r7, pc}
    25d2:	bf00      	nop
    25d4:	000022dd 	.word	0x000022dd

000025d8 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    25d8:	b580      	push	{r7, lr}
    25da:	b082      	sub	sp, #8
    25dc:	af00      	add	r7, sp, #0
    25de:	4603      	mov	r3, r0
    25e0:	460a      	mov	r2, r1
    25e2:	71fb      	strb	r3, [r7, #7]
    25e4:	4613      	mov	r3, r2
    25e6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    25e8:	79fb      	ldrb	r3, [r7, #7]
    25ea:	095b      	lsrs	r3, r3, #5
    25ec:	b2d8      	uxtb	r0, r3
    25ee:	79fb      	ldrb	r3, [r7, #7]
    25f0:	f003 031f 	and.w	r3, r3, #31
    25f4:	2201      	movs	r2, #1
    25f6:	fa02 f303 	lsl.w	r3, r2, r3
    25fa:	79ba      	ldrb	r2, [r7, #6]
    25fc:	4619      	mov	r1, r3
    25fe:	4b03      	ldr	r3, [pc, #12]	; (260c <gpio_set_pin_level+0x34>)
    2600:	4798      	blx	r3
}
    2602:	bf00      	nop
    2604:	3708      	adds	r7, #8
    2606:	46bd      	mov	sp, r7
    2608:	bd80      	pop	{r7, pc}
    260a:	bf00      	nop
    260c:	000023c5 	.word	0x000023c5

00002610 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    2610:	b580      	push	{r7, lr}
    2612:	af00      	add	r7, sp, #0
	_init_chip();
    2614:	4b01      	ldr	r3, [pc, #4]	; (261c <init_mcu+0xc>)
    2616:	4798      	blx	r3
}
    2618:	bf00      	nop
    261a:	bd80      	pop	{r7, pc}
    261c:	000056a5 	.word	0x000056a5

00002620 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    2620:	b580      	push	{r7, lr}
    2622:	b082      	sub	sp, #8
    2624:	af00      	add	r7, sp, #0
    2626:	6078      	str	r0, [r7, #4]
    2628:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	2b00      	cmp	r3, #0
    262e:	d004      	beq.n	263a <wdt_init+0x1a>
    2630:	683b      	ldr	r3, [r7, #0]
    2632:	2b00      	cmp	r3, #0
    2634:	d001      	beq.n	263a <wdt_init+0x1a>
    2636:	2301      	movs	r3, #1
    2638:	e000      	b.n	263c <wdt_init+0x1c>
    263a:	2300      	movs	r3, #0
    263c:	f003 0301 	and.w	r3, r3, #1
    2640:	b2db      	uxtb	r3, r3
    2642:	2248      	movs	r2, #72	; 0x48
    2644:	4907      	ldr	r1, [pc, #28]	; (2664 <wdt_init+0x44>)
    2646:	4618      	mov	r0, r3
    2648:	4b07      	ldr	r3, [pc, #28]	; (2668 <wdt_init+0x48>)
    264a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	683a      	ldr	r2, [r7, #0]
    2650:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    2652:	687b      	ldr	r3, [r7, #4]
    2654:	4618      	mov	r0, r3
    2656:	4b05      	ldr	r3, [pc, #20]	; (266c <wdt_init+0x4c>)
    2658:	4798      	blx	r3
    265a:	4603      	mov	r3, r0
}
    265c:	4618      	mov	r0, r3
    265e:	3708      	adds	r7, #8
    2660:	46bd      	mov	sp, r7
    2662:	bd80      	pop	{r7, pc}
    2664:	00010bd8 	.word	0x00010bd8
    2668:	00004a95 	.word	0x00004a95
    266c:	0000bfa9 	.word	0x0000bfa9

00002670 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    2670:	b580      	push	{r7, lr}
    2672:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    2674:	4804      	ldr	r0, [pc, #16]	; (2688 <CRC_CALC_init+0x18>)
    2676:	4b05      	ldr	r3, [pc, #20]	; (268c <CRC_CALC_init+0x1c>)
    2678:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    267a:	4905      	ldr	r1, [pc, #20]	; (2690 <CRC_CALC_init+0x20>)
    267c:	4805      	ldr	r0, [pc, #20]	; (2694 <CRC_CALC_init+0x24>)
    267e:	4b06      	ldr	r3, [pc, #24]	; (2698 <CRC_CALC_init+0x28>)
    2680:	4798      	blx	r3
}
    2682:	bf00      	nop
    2684:	bd80      	pop	{r7, pc}
    2686:	bf00      	nop
    2688:	40000800 	.word	0x40000800
    268c:	00001eb3 	.word	0x00001eb3
    2690:	41002000 	.word	0x41002000
    2694:	200079a0 	.word	0x200079a0
    2698:	00003445 	.word	0x00003445

0000269c <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    269c:	b580      	push	{r7, lr}
    269e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    26a0:	2244      	movs	r2, #68	; 0x44
    26a2:	2104      	movs	r1, #4
    26a4:	483f      	ldr	r0, [pc, #252]	; (27a4 <EXTERNAL_IRQ_0_init+0x108>)
    26a6:	4b40      	ldr	r3, [pc, #256]	; (27a8 <EXTERNAL_IRQ_0_init+0x10c>)
    26a8:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    26aa:	4840      	ldr	r0, [pc, #256]	; (27ac <EXTERNAL_IRQ_0_init+0x110>)
    26ac:	4b40      	ldr	r3, [pc, #256]	; (27b0 <EXTERNAL_IRQ_0_init+0x114>)
    26ae:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    26b0:	2101      	movs	r1, #1
    26b2:	2040      	movs	r0, #64	; 0x40
    26b4:	4b3f      	ldr	r3, [pc, #252]	; (27b4 <EXTERNAL_IRQ_0_init+0x118>)
    26b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    26b8:	2100      	movs	r1, #0
    26ba:	2040      	movs	r0, #64	; 0x40
    26bc:	4b3e      	ldr	r3, [pc, #248]	; (27b8 <EXTERNAL_IRQ_0_init+0x11c>)
    26be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    26c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    26c4:	2040      	movs	r0, #64	; 0x40
    26c6:	4b3d      	ldr	r3, [pc, #244]	; (27bc <EXTERNAL_IRQ_0_init+0x120>)
    26c8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    26ca:	2101      	movs	r1, #1
    26cc:	2021      	movs	r0, #33	; 0x21
    26ce:	4b39      	ldr	r3, [pc, #228]	; (27b4 <EXTERNAL_IRQ_0_init+0x118>)
    26d0:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    26d2:	2100      	movs	r1, #0
    26d4:	2021      	movs	r0, #33	; 0x21
    26d6:	4b38      	ldr	r3, [pc, #224]	; (27b8 <EXTERNAL_IRQ_0_init+0x11c>)
    26d8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    26da:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    26de:	2021      	movs	r0, #33	; 0x21
    26e0:	4b36      	ldr	r3, [pc, #216]	; (27bc <EXTERNAL_IRQ_0_init+0x120>)
    26e2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    26e4:	2101      	movs	r1, #1
    26e6:	2003      	movs	r0, #3
    26e8:	4b32      	ldr	r3, [pc, #200]	; (27b4 <EXTERNAL_IRQ_0_init+0x118>)
    26ea:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    26ec:	2102      	movs	r1, #2
    26ee:	2003      	movs	r0, #3
    26f0:	4b31      	ldr	r3, [pc, #196]	; (27b8 <EXTERNAL_IRQ_0_init+0x11c>)
    26f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    26f4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    26f8:	2003      	movs	r0, #3
    26fa:	4b30      	ldr	r3, [pc, #192]	; (27bc <EXTERNAL_IRQ_0_init+0x120>)
    26fc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    26fe:	2101      	movs	r1, #1
    2700:	2004      	movs	r0, #4
    2702:	4b2c      	ldr	r3, [pc, #176]	; (27b4 <EXTERNAL_IRQ_0_init+0x118>)
    2704:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    2706:	2102      	movs	r1, #2
    2708:	2004      	movs	r0, #4
    270a:	4b2b      	ldr	r3, [pc, #172]	; (27b8 <EXTERNAL_IRQ_0_init+0x11c>)
    270c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    270e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    2712:	2004      	movs	r0, #4
    2714:	4b29      	ldr	r3, [pc, #164]	; (27bc <EXTERNAL_IRQ_0_init+0x120>)
    2716:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    2718:	2101      	movs	r1, #1
    271a:	2005      	movs	r0, #5
    271c:	4b25      	ldr	r3, [pc, #148]	; (27b4 <EXTERNAL_IRQ_0_init+0x118>)
    271e:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    2720:	2102      	movs	r1, #2
    2722:	2005      	movs	r0, #5
    2724:	4b24      	ldr	r3, [pc, #144]	; (27b8 <EXTERNAL_IRQ_0_init+0x11c>)
    2726:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    2728:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    272c:	2005      	movs	r0, #5
    272e:	4b23      	ldr	r3, [pc, #140]	; (27bc <EXTERNAL_IRQ_0_init+0x120>)
    2730:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    2732:	2101      	movs	r1, #1
    2734:	2056      	movs	r0, #86	; 0x56
    2736:	4b1f      	ldr	r3, [pc, #124]	; (27b4 <EXTERNAL_IRQ_0_init+0x118>)
    2738:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    273a:	2102      	movs	r1, #2
    273c:	2056      	movs	r0, #86	; 0x56
    273e:	4b1e      	ldr	r3, [pc, #120]	; (27b8 <EXTERNAL_IRQ_0_init+0x11c>)
    2740:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    2742:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    2746:	2056      	movs	r0, #86	; 0x56
    2748:	4b1c      	ldr	r3, [pc, #112]	; (27bc <EXTERNAL_IRQ_0_init+0x120>)
    274a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    274c:	2101      	movs	r1, #1
    274e:	2057      	movs	r0, #87	; 0x57
    2750:	4b18      	ldr	r3, [pc, #96]	; (27b4 <EXTERNAL_IRQ_0_init+0x118>)
    2752:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    2754:	2102      	movs	r1, #2
    2756:	2057      	movs	r0, #87	; 0x57
    2758:	4b17      	ldr	r3, [pc, #92]	; (27b8 <EXTERNAL_IRQ_0_init+0x11c>)
    275a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    275c:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    2760:	2057      	movs	r0, #87	; 0x57
    2762:	4b16      	ldr	r3, [pc, #88]	; (27bc <EXTERNAL_IRQ_0_init+0x120>)
    2764:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    2766:	2101      	movs	r1, #1
    2768:	2028      	movs	r0, #40	; 0x28
    276a:	4b12      	ldr	r3, [pc, #72]	; (27b4 <EXTERNAL_IRQ_0_init+0x118>)
    276c:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    276e:	2100      	movs	r1, #0
    2770:	2028      	movs	r0, #40	; 0x28
    2772:	4b11      	ldr	r3, [pc, #68]	; (27b8 <EXTERNAL_IRQ_0_init+0x11c>)
    2774:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    2776:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    277a:	2028      	movs	r0, #40	; 0x28
    277c:	4b0f      	ldr	r3, [pc, #60]	; (27bc <EXTERNAL_IRQ_0_init+0x120>)
    277e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    2780:	2101      	movs	r1, #1
    2782:	2029      	movs	r0, #41	; 0x29
    2784:	4b0b      	ldr	r3, [pc, #44]	; (27b4 <EXTERNAL_IRQ_0_init+0x118>)
    2786:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    2788:	2100      	movs	r1, #0
    278a:	2029      	movs	r0, #41	; 0x29
    278c:	4b0a      	ldr	r3, [pc, #40]	; (27b8 <EXTERNAL_IRQ_0_init+0x11c>)
    278e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    2790:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    2794:	2029      	movs	r0, #41	; 0x29
    2796:	4b09      	ldr	r3, [pc, #36]	; (27bc <EXTERNAL_IRQ_0_init+0x120>)
    2798:	4798      	blx	r3

	ext_irq_init();
    279a:	4b09      	ldr	r3, [pc, #36]	; (27c0 <EXTERNAL_IRQ_0_init+0x124>)
    279c:	4798      	blx	r3
}
    279e:	bf00      	nop
    27a0:	bd80      	pop	{r7, pc}
    27a2:	bf00      	nop
    27a4:	40001c00 	.word	0x40001c00
    27a8:	00001d4d 	.word	0x00001d4d
    27ac:	40000800 	.word	0x40000800
    27b0:	00001e33 	.word	0x00001e33
    27b4:	000025a1 	.word	0x000025a1
    27b8:	0000254d 	.word	0x0000254d
    27bc:	00002581 	.word	0x00002581
    27c0:	0000350d 	.word	0x0000350d

000027c4 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    27c4:	b580      	push	{r7, lr}
    27c6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    27c8:	2244      	movs	r2, #68	; 0x44
    27ca:	210b      	movs	r1, #11
    27cc:	4807      	ldr	r0, [pc, #28]	; (27ec <EVENT_SYSTEM_0_init+0x28>)
    27ce:	4b08      	ldr	r3, [pc, #32]	; (27f0 <EVENT_SYSTEM_0_init+0x2c>)
    27d0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    27d2:	2244      	movs	r2, #68	; 0x44
    27d4:	210c      	movs	r1, #12
    27d6:	4805      	ldr	r0, [pc, #20]	; (27ec <EVENT_SYSTEM_0_init+0x28>)
    27d8:	4b05      	ldr	r3, [pc, #20]	; (27f0 <EVENT_SYSTEM_0_init+0x2c>)
    27da:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    27dc:	4805      	ldr	r0, [pc, #20]	; (27f4 <EVENT_SYSTEM_0_init+0x30>)
    27de:	4b06      	ldr	r3, [pc, #24]	; (27f8 <EVENT_SYSTEM_0_init+0x34>)
    27e0:	4798      	blx	r3

	event_system_init();
    27e2:	4b06      	ldr	r3, [pc, #24]	; (27fc <EVENT_SYSTEM_0_init+0x38>)
    27e4:	4798      	blx	r3
}
    27e6:	bf00      	nop
    27e8:	bd80      	pop	{r7, pc}
    27ea:	bf00      	nop
    27ec:	40001c00 	.word	0x40001c00
    27f0:	00001d4d 	.word	0x00001d4d
    27f4:	40000800 	.word	0x40000800
    27f8:	00001ed3 	.word	0x00001ed3
    27fc:	000034f9 	.word	0x000034f9

00002800 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    2800:	b580      	push	{r7, lr}
    2802:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    2804:	2101      	movs	r1, #1
    2806:	202b      	movs	r0, #43	; 0x2b
    2808:	4b2b      	ldr	r3, [pc, #172]	; (28b8 <QSPI_N25Q256_PORT_init+0xb8>)
    280a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    280c:	2100      	movs	r1, #0
    280e:	202b      	movs	r0, #43	; 0x2b
    2810:	4b2a      	ldr	r3, [pc, #168]	; (28bc <QSPI_N25Q256_PORT_init+0xbc>)
    2812:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    2814:	492a      	ldr	r1, [pc, #168]	; (28c0 <QSPI_N25Q256_PORT_init+0xc0>)
    2816:	202b      	movs	r0, #43	; 0x2b
    2818:	4b2a      	ldr	r3, [pc, #168]	; (28c4 <QSPI_N25Q256_PORT_init+0xc4>)
    281a:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    281c:	2102      	movs	r1, #2
    281e:	2008      	movs	r0, #8
    2820:	4b25      	ldr	r3, [pc, #148]	; (28b8 <QSPI_N25Q256_PORT_init+0xb8>)
    2822:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    2824:	2100      	movs	r1, #0
    2826:	2008      	movs	r0, #8
    2828:	4b27      	ldr	r3, [pc, #156]	; (28c8 <QSPI_N25Q256_PORT_init+0xc8>)
    282a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    282c:	2100      	movs	r1, #0
    282e:	2008      	movs	r0, #8
    2830:	4b22      	ldr	r3, [pc, #136]	; (28bc <QSPI_N25Q256_PORT_init+0xbc>)
    2832:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    2834:	4925      	ldr	r1, [pc, #148]	; (28cc <QSPI_N25Q256_PORT_init+0xcc>)
    2836:	2008      	movs	r0, #8
    2838:	4b22      	ldr	r3, [pc, #136]	; (28c4 <QSPI_N25Q256_PORT_init+0xc4>)
    283a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    283c:	2102      	movs	r1, #2
    283e:	2009      	movs	r0, #9
    2840:	4b1d      	ldr	r3, [pc, #116]	; (28b8 <QSPI_N25Q256_PORT_init+0xb8>)
    2842:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    2844:	2100      	movs	r1, #0
    2846:	2009      	movs	r0, #9
    2848:	4b1f      	ldr	r3, [pc, #124]	; (28c8 <QSPI_N25Q256_PORT_init+0xc8>)
    284a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    284c:	2100      	movs	r1, #0
    284e:	2009      	movs	r0, #9
    2850:	4b1a      	ldr	r3, [pc, #104]	; (28bc <QSPI_N25Q256_PORT_init+0xbc>)
    2852:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    2854:	491e      	ldr	r1, [pc, #120]	; (28d0 <QSPI_N25Q256_PORT_init+0xd0>)
    2856:	2009      	movs	r0, #9
    2858:	4b1a      	ldr	r3, [pc, #104]	; (28c4 <QSPI_N25Q256_PORT_init+0xc4>)
    285a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    285c:	2102      	movs	r1, #2
    285e:	200a      	movs	r0, #10
    2860:	4b15      	ldr	r3, [pc, #84]	; (28b8 <QSPI_N25Q256_PORT_init+0xb8>)
    2862:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    2864:	2100      	movs	r1, #0
    2866:	200a      	movs	r0, #10
    2868:	4b17      	ldr	r3, [pc, #92]	; (28c8 <QSPI_N25Q256_PORT_init+0xc8>)
    286a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    286c:	2100      	movs	r1, #0
    286e:	200a      	movs	r0, #10
    2870:	4b12      	ldr	r3, [pc, #72]	; (28bc <QSPI_N25Q256_PORT_init+0xbc>)
    2872:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    2874:	4917      	ldr	r1, [pc, #92]	; (28d4 <QSPI_N25Q256_PORT_init+0xd4>)
    2876:	200a      	movs	r0, #10
    2878:	4b12      	ldr	r3, [pc, #72]	; (28c4 <QSPI_N25Q256_PORT_init+0xc4>)
    287a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    287c:	2102      	movs	r1, #2
    287e:	200b      	movs	r0, #11
    2880:	4b0d      	ldr	r3, [pc, #52]	; (28b8 <QSPI_N25Q256_PORT_init+0xb8>)
    2882:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    2884:	2100      	movs	r1, #0
    2886:	200b      	movs	r0, #11
    2888:	4b0f      	ldr	r3, [pc, #60]	; (28c8 <QSPI_N25Q256_PORT_init+0xc8>)
    288a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    288c:	2100      	movs	r1, #0
    288e:	200b      	movs	r0, #11
    2890:	4b0a      	ldr	r3, [pc, #40]	; (28bc <QSPI_N25Q256_PORT_init+0xbc>)
    2892:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    2894:	4910      	ldr	r1, [pc, #64]	; (28d8 <QSPI_N25Q256_PORT_init+0xd8>)
    2896:	200b      	movs	r0, #11
    2898:	4b0a      	ldr	r3, [pc, #40]	; (28c4 <QSPI_N25Q256_PORT_init+0xc4>)
    289a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    289c:	2101      	movs	r1, #1
    289e:	202a      	movs	r0, #42	; 0x2a
    28a0:	4b05      	ldr	r3, [pc, #20]	; (28b8 <QSPI_N25Q256_PORT_init+0xb8>)
    28a2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    28a4:	2100      	movs	r1, #0
    28a6:	202a      	movs	r0, #42	; 0x2a
    28a8:	4b04      	ldr	r3, [pc, #16]	; (28bc <QSPI_N25Q256_PORT_init+0xbc>)
    28aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    28ac:	490b      	ldr	r1, [pc, #44]	; (28dc <QSPI_N25Q256_PORT_init+0xdc>)
    28ae:	202a      	movs	r0, #42	; 0x2a
    28b0:	4b04      	ldr	r3, [pc, #16]	; (28c4 <QSPI_N25Q256_PORT_init+0xc4>)
    28b2:	4798      	blx	r3
}
    28b4:	bf00      	nop
    28b6:	bd80      	pop	{r7, pc}
    28b8:	000025a1 	.word	0x000025a1
    28bc:	0000254d 	.word	0x0000254d
    28c0:	002b0007 	.word	0x002b0007
    28c4:	00002581 	.word	0x00002581
    28c8:	000025d9 	.word	0x000025d9
    28cc:	00080007 	.word	0x00080007
    28d0:	00090007 	.word	0x00090007
    28d4:	000a0007 	.word	0x000a0007
    28d8:	000b0007 	.word	0x000b0007
    28dc:	002a0007 	.word	0x002a0007

000028e0 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    28e0:	b580      	push	{r7, lr}
    28e2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    28e4:	4805      	ldr	r0, [pc, #20]	; (28fc <QSPI_N25Q256_CLOCK_init+0x1c>)
    28e6:	4b06      	ldr	r3, [pc, #24]	; (2900 <QSPI_N25Q256_CLOCK_init+0x20>)
    28e8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    28ea:	4804      	ldr	r0, [pc, #16]	; (28fc <QSPI_N25Q256_CLOCK_init+0x1c>)
    28ec:	4b05      	ldr	r3, [pc, #20]	; (2904 <QSPI_N25Q256_CLOCK_init+0x24>)
    28ee:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    28f0:	4802      	ldr	r0, [pc, #8]	; (28fc <QSPI_N25Q256_CLOCK_init+0x1c>)
    28f2:	4b05      	ldr	r3, [pc, #20]	; (2908 <QSPI_N25Q256_CLOCK_init+0x28>)
    28f4:	4798      	blx	r3
}
    28f6:	bf00      	nop
    28f8:	bd80      	pop	{r7, pc}
    28fa:	bf00      	nop
    28fc:	40000800 	.word	0x40000800
    2900:	00001d93 	.word	0x00001d93
    2904:	00001dd3 	.word	0x00001dd3
    2908:	00001f93 	.word	0x00001f93

0000290c <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    290c:	b580      	push	{r7, lr}
    290e:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    2910:	4b04      	ldr	r3, [pc, #16]	; (2924 <QSPI_N25Q256_init+0x18>)
    2912:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    2914:	4904      	ldr	r1, [pc, #16]	; (2928 <QSPI_N25Q256_init+0x1c>)
    2916:	4805      	ldr	r0, [pc, #20]	; (292c <QSPI_N25Q256_init+0x20>)
    2918:	4b05      	ldr	r3, [pc, #20]	; (2930 <QSPI_N25Q256_init+0x24>)
    291a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    291c:	4b05      	ldr	r3, [pc, #20]	; (2934 <QSPI_N25Q256_init+0x28>)
    291e:	4798      	blx	r3
}
    2920:	bf00      	nop
    2922:	bd80      	pop	{r7, pc}
    2924:	000028e1 	.word	0x000028e1
    2928:	42003400 	.word	0x42003400
    292c:	20007854 	.word	0x20007854
    2930:	000039b1 	.word	0x000039b1
    2934:	00002801 	.word	0x00002801

00002938 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    2938:	b580      	push	{r7, lr}
    293a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    293c:	4802      	ldr	r0, [pc, #8]	; (2948 <DATETIME_CLOCK_CLOCK_init+0x10>)
    293e:	4b03      	ldr	r3, [pc, #12]	; (294c <DATETIME_CLOCK_CLOCK_init+0x14>)
    2940:	4798      	blx	r3
}
    2942:	bf00      	nop
    2944:	bd80      	pop	{r7, pc}
    2946:	bf00      	nop
    2948:	40000800 	.word	0x40000800
    294c:	00001e13 	.word	0x00001e13

00002950 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    2950:	b580      	push	{r7, lr}
    2952:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    2954:	4b03      	ldr	r3, [pc, #12]	; (2964 <DATETIME_CLOCK_init+0x14>)
    2956:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    2958:	4903      	ldr	r1, [pc, #12]	; (2968 <DATETIME_CLOCK_init+0x18>)
    295a:	4804      	ldr	r0, [pc, #16]	; (296c <DATETIME_CLOCK_init+0x1c>)
    295c:	4b04      	ldr	r3, [pc, #16]	; (2970 <DATETIME_CLOCK_init+0x20>)
    295e:	4798      	blx	r3
}
    2960:	bf00      	nop
    2962:	bd80      	pop	{r7, pc}
    2964:	00002939 	.word	0x00002939
    2968:	40002400 	.word	0x40002400
    296c:	2000797c 	.word	0x2000797c
    2970:	000032e9 	.word	0x000032e9

00002974 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    2974:	b580      	push	{r7, lr}
    2976:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    2978:	2101      	movs	r1, #1
    297a:	2010      	movs	r0, #16
    297c:	4b07      	ldr	r3, [pc, #28]	; (299c <I2C_HEATERS_PORT_init+0x28>)
    297e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    2980:	4907      	ldr	r1, [pc, #28]	; (29a0 <I2C_HEATERS_PORT_init+0x2c>)
    2982:	2010      	movs	r0, #16
    2984:	4b07      	ldr	r3, [pc, #28]	; (29a4 <I2C_HEATERS_PORT_init+0x30>)
    2986:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    2988:	2101      	movs	r1, #1
    298a:	2011      	movs	r0, #17
    298c:	4b03      	ldr	r3, [pc, #12]	; (299c <I2C_HEATERS_PORT_init+0x28>)
    298e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    2990:	4905      	ldr	r1, [pc, #20]	; (29a8 <I2C_HEATERS_PORT_init+0x34>)
    2992:	2011      	movs	r0, #17
    2994:	4b03      	ldr	r3, [pc, #12]	; (29a4 <I2C_HEATERS_PORT_init+0x30>)
    2996:	4798      	blx	r3
}
    2998:	bf00      	nop
    299a:	bd80      	pop	{r7, pc}
    299c:	0000254d 	.word	0x0000254d
    29a0:	00100002 	.word	0x00100002
    29a4:	00002581 	.word	0x00002581
    29a8:	00110002 	.word	0x00110002

000029ac <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    29ac:	b580      	push	{r7, lr}
    29ae:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    29b0:	2242      	movs	r2, #66	; 0x42
    29b2:	2108      	movs	r1, #8
    29b4:	4806      	ldr	r0, [pc, #24]	; (29d0 <I2C_HEATERS_CLOCK_init+0x24>)
    29b6:	4b07      	ldr	r3, [pc, #28]	; (29d4 <I2C_HEATERS_CLOCK_init+0x28>)
    29b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    29ba:	224a      	movs	r2, #74	; 0x4a
    29bc:	2103      	movs	r1, #3
    29be:	4804      	ldr	r0, [pc, #16]	; (29d0 <I2C_HEATERS_CLOCK_init+0x24>)
    29c0:	4b04      	ldr	r3, [pc, #16]	; (29d4 <I2C_HEATERS_CLOCK_init+0x28>)
    29c2:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    29c4:	4804      	ldr	r0, [pc, #16]	; (29d8 <I2C_HEATERS_CLOCK_init+0x2c>)
    29c6:	4b05      	ldr	r3, [pc, #20]	; (29dc <I2C_HEATERS_CLOCK_init+0x30>)
    29c8:	4798      	blx	r3
}
    29ca:	bf00      	nop
    29cc:	bd80      	pop	{r7, pc}
    29ce:	bf00      	nop
    29d0:	40001c00 	.word	0x40001c00
    29d4:	00001d4d 	.word	0x00001d4d
    29d8:	40000800 	.word	0x40000800
    29dc:	00001e53 	.word	0x00001e53

000029e0 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    29e0:	b580      	push	{r7, lr}
    29e2:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    29e4:	4b04      	ldr	r3, [pc, #16]	; (29f8 <I2C_HEATERS_init+0x18>)
    29e6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    29e8:	4904      	ldr	r1, [pc, #16]	; (29fc <I2C_HEATERS_init+0x1c>)
    29ea:	4805      	ldr	r0, [pc, #20]	; (2a00 <I2C_HEATERS_init+0x20>)
    29ec:	4b05      	ldr	r3, [pc, #20]	; (2a04 <I2C_HEATERS_init+0x24>)
    29ee:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    29f0:	4b05      	ldr	r3, [pc, #20]	; (2a08 <I2C_HEATERS_init+0x28>)
    29f2:	4798      	blx	r3
}
    29f4:	bf00      	nop
    29f6:	bd80      	pop	{r7, pc}
    29f8:	000029ad 	.word	0x000029ad
    29fc:	40003400 	.word	0x40003400
    2a00:	200078d4 	.word	0x200078d4
    2a04:	000037d5 	.word	0x000037d5
    2a08:	00002975 	.word	0x00002975

00002a0c <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    2a0c:	b580      	push	{r7, lr}
    2a0e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    2a10:	2100      	movs	r1, #0
    2a12:	203b      	movs	r0, #59	; 0x3b
    2a14:	4b11      	ldr	r3, [pc, #68]	; (2a5c <SPI_TEMP_PORT_init+0x50>)
    2a16:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    2a18:	2102      	movs	r1, #2
    2a1a:	203b      	movs	r0, #59	; 0x3b
    2a1c:	4b10      	ldr	r3, [pc, #64]	; (2a60 <SPI_TEMP_PORT_init+0x54>)
    2a1e:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    2a20:	4910      	ldr	r1, [pc, #64]	; (2a64 <SPI_TEMP_PORT_init+0x58>)
    2a22:	203b      	movs	r0, #59	; 0x3b
    2a24:	4b10      	ldr	r3, [pc, #64]	; (2a68 <SPI_TEMP_PORT_init+0x5c>)
    2a26:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    2a28:	2100      	movs	r1, #0
    2a2a:	203a      	movs	r0, #58	; 0x3a
    2a2c:	4b0b      	ldr	r3, [pc, #44]	; (2a5c <SPI_TEMP_PORT_init+0x50>)
    2a2e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    2a30:	2102      	movs	r1, #2
    2a32:	203a      	movs	r0, #58	; 0x3a
    2a34:	4b0a      	ldr	r3, [pc, #40]	; (2a60 <SPI_TEMP_PORT_init+0x54>)
    2a36:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    2a38:	490c      	ldr	r1, [pc, #48]	; (2a6c <SPI_TEMP_PORT_init+0x60>)
    2a3a:	203a      	movs	r0, #58	; 0x3a
    2a3c:	4b0a      	ldr	r3, [pc, #40]	; (2a68 <SPI_TEMP_PORT_init+0x5c>)
    2a3e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    2a40:	2101      	movs	r1, #1
    2a42:	203c      	movs	r0, #60	; 0x3c
    2a44:	4b06      	ldr	r3, [pc, #24]	; (2a60 <SPI_TEMP_PORT_init+0x54>)
    2a46:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    2a48:	2100      	movs	r1, #0
    2a4a:	203c      	movs	r0, #60	; 0x3c
    2a4c:	4b08      	ldr	r3, [pc, #32]	; (2a70 <SPI_TEMP_PORT_init+0x64>)
    2a4e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    2a50:	4908      	ldr	r1, [pc, #32]	; (2a74 <SPI_TEMP_PORT_init+0x68>)
    2a52:	203c      	movs	r0, #60	; 0x3c
    2a54:	4b04      	ldr	r3, [pc, #16]	; (2a68 <SPI_TEMP_PORT_init+0x5c>)
    2a56:	4798      	blx	r3
}
    2a58:	bf00      	nop
    2a5a:	bd80      	pop	{r7, pc}
    2a5c:	000025d9 	.word	0x000025d9
    2a60:	000025a1 	.word	0x000025a1
    2a64:	003b0003 	.word	0x003b0003
    2a68:	00002581 	.word	0x00002581
    2a6c:	003a0003 	.word	0x003a0003
    2a70:	0000254d 	.word	0x0000254d
    2a74:	003c0003 	.word	0x003c0003

00002a78 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    2a78:	b580      	push	{r7, lr}
    2a7a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2a7c:	2245      	movs	r2, #69	; 0x45
    2a7e:	2122      	movs	r1, #34	; 0x22
    2a80:	4806      	ldr	r0, [pc, #24]	; (2a9c <SPI_TEMP_CLOCK_init+0x24>)
    2a82:	4b07      	ldr	r3, [pc, #28]	; (2aa0 <SPI_TEMP_CLOCK_init+0x28>)
    2a84:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2a86:	224a      	movs	r2, #74	; 0x4a
    2a88:	2103      	movs	r1, #3
    2a8a:	4804      	ldr	r0, [pc, #16]	; (2a9c <SPI_TEMP_CLOCK_init+0x24>)
    2a8c:	4b04      	ldr	r3, [pc, #16]	; (2aa0 <SPI_TEMP_CLOCK_init+0x28>)
    2a8e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    2a90:	4804      	ldr	r0, [pc, #16]	; (2aa4 <SPI_TEMP_CLOCK_init+0x2c>)
    2a92:	4b05      	ldr	r3, [pc, #20]	; (2aa8 <SPI_TEMP_CLOCK_init+0x30>)
    2a94:	4798      	blx	r3
}
    2a96:	bf00      	nop
    2a98:	bd80      	pop	{r7, pc}
    2a9a:	bf00      	nop
    2a9c:	40001c00 	.word	0x40001c00
    2aa0:	00001d4d 	.word	0x00001d4d
    2aa4:	40000800 	.word	0x40000800
    2aa8:	00001fb3 	.word	0x00001fb3

00002aac <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    2aac:	b580      	push	{r7, lr}
    2aae:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    2ab0:	4b05      	ldr	r3, [pc, #20]	; (2ac8 <SPI_TEMP_init+0x1c>)
    2ab2:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    2ab4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2ab8:	4804      	ldr	r0, [pc, #16]	; (2acc <SPI_TEMP_init+0x20>)
    2aba:	4b05      	ldr	r3, [pc, #20]	; (2ad0 <SPI_TEMP_init+0x24>)
    2abc:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    2abe:	4b05      	ldr	r3, [pc, #20]	; (2ad4 <SPI_TEMP_init+0x28>)
    2ac0:	4798      	blx	r3
}
    2ac2:	bf00      	nop
    2ac4:	bd80      	pop	{r7, pc}
    2ac6:	bf00      	nop
    2ac8:	00002a79 	.word	0x00002a79
    2acc:	200077fc 	.word	0x200077fc
    2ad0:	00003ac1 	.word	0x00003ac1
    2ad4:	00002a0d 	.word	0x00002a0d

00002ad8 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    2adc:	2100      	movs	r1, #0
    2ade:	2017      	movs	r0, #23
    2ae0:	4b07      	ldr	r3, [pc, #28]	; (2b00 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    2ae2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    2ae4:	4907      	ldr	r1, [pc, #28]	; (2b04 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    2ae6:	2017      	movs	r0, #23
    2ae8:	4b07      	ldr	r3, [pc, #28]	; (2b08 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    2aea:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    2aec:	2100      	movs	r1, #0
    2aee:	2016      	movs	r0, #22
    2af0:	4b03      	ldr	r3, [pc, #12]	; (2b00 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    2af2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    2af4:	4905      	ldr	r1, [pc, #20]	; (2b0c <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    2af6:	2016      	movs	r0, #22
    2af8:	4b03      	ldr	r3, [pc, #12]	; (2b08 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    2afa:	4798      	blx	r3
}
    2afc:	bf00      	nop
    2afe:	bd80      	pop	{r7, pc}
    2b00:	0000254d 	.word	0x0000254d
    2b04:	00170003 	.word	0x00170003
    2b08:	00002581 	.word	0x00002581
    2b0c:	00160003 	.word	0x00160003

00002b10 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    2b10:	b580      	push	{r7, lr}
    2b12:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2b14:	2244      	movs	r2, #68	; 0x44
    2b16:	2123      	movs	r1, #35	; 0x23
    2b18:	4806      	ldr	r0, [pc, #24]	; (2b34 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    2b1a:	4b07      	ldr	r3, [pc, #28]	; (2b38 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    2b1c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2b1e:	224a      	movs	r2, #74	; 0x4a
    2b20:	2103      	movs	r1, #3
    2b22:	4804      	ldr	r0, [pc, #16]	; (2b34 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    2b24:	4b04      	ldr	r3, [pc, #16]	; (2b38 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    2b26:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    2b28:	4804      	ldr	r0, [pc, #16]	; (2b3c <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    2b2a:	4b05      	ldr	r3, [pc, #20]	; (2b40 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    2b2c:	4798      	blx	r3
}
    2b2e:	bf00      	nop
    2b30:	bd80      	pop	{r7, pc}
    2b32:	bf00      	nop
    2b34:	40001c00 	.word	0x40001c00
    2b38:	00001d4d 	.word	0x00001d4d
    2b3c:	40000800 	.word	0x40000800
    2b40:	00001fd3 	.word	0x00001fd3

00002b44 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    2b44:	b580      	push	{r7, lr}
    2b46:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    2b48:	4b04      	ldr	r3, [pc, #16]	; (2b5c <I2C_FLAPPER_VALVE_init+0x18>)
    2b4a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    2b4c:	4904      	ldr	r1, [pc, #16]	; (2b60 <I2C_FLAPPER_VALVE_init+0x1c>)
    2b4e:	4805      	ldr	r0, [pc, #20]	; (2b64 <I2C_FLAPPER_VALVE_init+0x20>)
    2b50:	4b05      	ldr	r3, [pc, #20]	; (2b68 <I2C_FLAPPER_VALVE_init+0x24>)
    2b52:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    2b54:	4b05      	ldr	r3, [pc, #20]	; (2b6c <I2C_FLAPPER_VALVE_init+0x28>)
    2b56:	4798      	blx	r3
}
    2b58:	bf00      	nop
    2b5a:	bd80      	pop	{r7, pc}
    2b5c:	00002b11 	.word	0x00002b11
    2b60:	43000400 	.word	0x43000400
    2b64:	20007898 	.word	0x20007898
    2b68:	000037d5 	.word	0x000037d5
    2b6c:	00002ad9 	.word	0x00002ad9

00002b70 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    2b70:	b580      	push	{r7, lr}
    2b72:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    2b74:	2100      	movs	r1, #0
    2b76:	2044      	movs	r0, #68	; 0x44
    2b78:	4b11      	ldr	r3, [pc, #68]	; (2bc0 <SPI_HI3593_PORT_init+0x50>)
    2b7a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    2b7c:	2102      	movs	r1, #2
    2b7e:	2044      	movs	r0, #68	; 0x44
    2b80:	4b10      	ldr	r3, [pc, #64]	; (2bc4 <SPI_HI3593_PORT_init+0x54>)
    2b82:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    2b84:	4910      	ldr	r1, [pc, #64]	; (2bc8 <SPI_HI3593_PORT_init+0x58>)
    2b86:	2044      	movs	r0, #68	; 0x44
    2b88:	4b10      	ldr	r3, [pc, #64]	; (2bcc <SPI_HI3593_PORT_init+0x5c>)
    2b8a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    2b8c:	2100      	movs	r1, #0
    2b8e:	2045      	movs	r0, #69	; 0x45
    2b90:	4b0b      	ldr	r3, [pc, #44]	; (2bc0 <SPI_HI3593_PORT_init+0x50>)
    2b92:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    2b94:	2102      	movs	r1, #2
    2b96:	2045      	movs	r0, #69	; 0x45
    2b98:	4b0a      	ldr	r3, [pc, #40]	; (2bc4 <SPI_HI3593_PORT_init+0x54>)
    2b9a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    2b9c:	490c      	ldr	r1, [pc, #48]	; (2bd0 <SPI_HI3593_PORT_init+0x60>)
    2b9e:	2045      	movs	r0, #69	; 0x45
    2ba0:	4b0a      	ldr	r3, [pc, #40]	; (2bcc <SPI_HI3593_PORT_init+0x5c>)
    2ba2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    2ba4:	2101      	movs	r1, #1
    2ba6:	2047      	movs	r0, #71	; 0x47
    2ba8:	4b06      	ldr	r3, [pc, #24]	; (2bc4 <SPI_HI3593_PORT_init+0x54>)
    2baa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    2bac:	2100      	movs	r1, #0
    2bae:	2047      	movs	r0, #71	; 0x47
    2bb0:	4b08      	ldr	r3, [pc, #32]	; (2bd4 <SPI_HI3593_PORT_init+0x64>)
    2bb2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    2bb4:	4908      	ldr	r1, [pc, #32]	; (2bd8 <SPI_HI3593_PORT_init+0x68>)
    2bb6:	2047      	movs	r0, #71	; 0x47
    2bb8:	4b04      	ldr	r3, [pc, #16]	; (2bcc <SPI_HI3593_PORT_init+0x5c>)
    2bba:	4798      	blx	r3
}
    2bbc:	bf00      	nop
    2bbe:	bd80      	pop	{r7, pc}
    2bc0:	000025d9 	.word	0x000025d9
    2bc4:	000025a1 	.word	0x000025a1
    2bc8:	00440002 	.word	0x00440002
    2bcc:	00002581 	.word	0x00002581
    2bd0:	00450002 	.word	0x00450002
    2bd4:	0000254d 	.word	0x0000254d
    2bd8:	00470002 	.word	0x00470002

00002bdc <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    2bdc:	b580      	push	{r7, lr}
    2bde:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2be0:	2242      	movs	r2, #66	; 0x42
    2be2:	2124      	movs	r1, #36	; 0x24
    2be4:	4806      	ldr	r0, [pc, #24]	; (2c00 <SPI_HI3593_CLOCK_init+0x24>)
    2be6:	4b07      	ldr	r3, [pc, #28]	; (2c04 <SPI_HI3593_CLOCK_init+0x28>)
    2be8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2bea:	224a      	movs	r2, #74	; 0x4a
    2bec:	2103      	movs	r1, #3
    2bee:	4804      	ldr	r0, [pc, #16]	; (2c00 <SPI_HI3593_CLOCK_init+0x24>)
    2bf0:	4b04      	ldr	r3, [pc, #16]	; (2c04 <SPI_HI3593_CLOCK_init+0x28>)
    2bf2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    2bf4:	4804      	ldr	r0, [pc, #16]	; (2c08 <SPI_HI3593_CLOCK_init+0x2c>)
    2bf6:	4b05      	ldr	r3, [pc, #20]	; (2c0c <SPI_HI3593_CLOCK_init+0x30>)
    2bf8:	4798      	blx	r3
}
    2bfa:	bf00      	nop
    2bfc:	bd80      	pop	{r7, pc}
    2bfe:	bf00      	nop
    2c00:	40001c00 	.word	0x40001c00
    2c04:	00001d4d 	.word	0x00001d4d
    2c08:	40000800 	.word	0x40000800
    2c0c:	00001ff3 	.word	0x00001ff3

00002c10 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    2c10:	b580      	push	{r7, lr}
    2c12:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    2c14:	4b04      	ldr	r3, [pc, #16]	; (2c28 <SPI_HI3593_init+0x18>)
    2c16:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    2c18:	4904      	ldr	r1, [pc, #16]	; (2c2c <SPI_HI3593_init+0x1c>)
    2c1a:	4805      	ldr	r0, [pc, #20]	; (2c30 <SPI_HI3593_init+0x20>)
    2c1c:	4b05      	ldr	r3, [pc, #20]	; (2c34 <SPI_HI3593_init+0x24>)
    2c1e:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    2c20:	4b05      	ldr	r3, [pc, #20]	; (2c38 <SPI_HI3593_init+0x28>)
    2c22:	4798      	blx	r3
}
    2c24:	bf00      	nop
    2c26:	bd80      	pop	{r7, pc}
    2c28:	00002bdd 	.word	0x00002bdd
    2c2c:	43000800 	.word	0x43000800
    2c30:	200077e4 	.word	0x200077e4
    2c34:	00003ac1 	.word	0x00003ac1
    2c38:	00002b71 	.word	0x00002b71

00002c3c <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    2c3c:	b580      	push	{r7, lr}
    2c3e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    2c40:	2100      	movs	r1, #0
    2c42:	2068      	movs	r0, #104	; 0x68
    2c44:	4b07      	ldr	r3, [pc, #28]	; (2c64 <I2C_FANS_PORT_init+0x28>)
    2c46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    2c48:	4907      	ldr	r1, [pc, #28]	; (2c68 <I2C_FANS_PORT_init+0x2c>)
    2c4a:	2068      	movs	r0, #104	; 0x68
    2c4c:	4b07      	ldr	r3, [pc, #28]	; (2c6c <I2C_FANS_PORT_init+0x30>)
    2c4e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    2c50:	2100      	movs	r1, #0
    2c52:	2069      	movs	r0, #105	; 0x69
    2c54:	4b03      	ldr	r3, [pc, #12]	; (2c64 <I2C_FANS_PORT_init+0x28>)
    2c56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    2c58:	4905      	ldr	r1, [pc, #20]	; (2c70 <I2C_FANS_PORT_init+0x34>)
    2c5a:	2069      	movs	r0, #105	; 0x69
    2c5c:	4b03      	ldr	r3, [pc, #12]	; (2c6c <I2C_FANS_PORT_init+0x30>)
    2c5e:	4798      	blx	r3
}
    2c60:	bf00      	nop
    2c62:	bd80      	pop	{r7, pc}
    2c64:	0000254d 	.word	0x0000254d
    2c68:	00680002 	.word	0x00680002
    2c6c:	00002581 	.word	0x00002581
    2c70:	00690002 	.word	0x00690002

00002c74 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    2c74:	b580      	push	{r7, lr}
    2c76:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2c78:	2244      	movs	r2, #68	; 0x44
    2c7a:	2125      	movs	r1, #37	; 0x25
    2c7c:	4806      	ldr	r0, [pc, #24]	; (2c98 <I2C_FANS_CLOCK_init+0x24>)
    2c7e:	4b07      	ldr	r3, [pc, #28]	; (2c9c <I2C_FANS_CLOCK_init+0x28>)
    2c80:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2c82:	224a      	movs	r2, #74	; 0x4a
    2c84:	2103      	movs	r1, #3
    2c86:	4804      	ldr	r0, [pc, #16]	; (2c98 <I2C_FANS_CLOCK_init+0x24>)
    2c88:	4b04      	ldr	r3, [pc, #16]	; (2c9c <I2C_FANS_CLOCK_init+0x28>)
    2c8a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    2c8c:	4804      	ldr	r0, [pc, #16]	; (2ca0 <I2C_FANS_CLOCK_init+0x2c>)
    2c8e:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <I2C_FANS_CLOCK_init+0x30>)
    2c90:	4798      	blx	r3
}
    2c92:	bf00      	nop
    2c94:	bd80      	pop	{r7, pc}
    2c96:	bf00      	nop
    2c98:	40001c00 	.word	0x40001c00
    2c9c:	00001d4d 	.word	0x00001d4d
    2ca0:	40000800 	.word	0x40000800
    2ca4:	00002013 	.word	0x00002013

00002ca8 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    2ca8:	b580      	push	{r7, lr}
    2caa:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    2cac:	4b04      	ldr	r3, [pc, #16]	; (2cc0 <I2C_FANS_init+0x18>)
    2cae:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    2cb0:	4904      	ldr	r1, [pc, #16]	; (2cc4 <I2C_FANS_init+0x1c>)
    2cb2:	4805      	ldr	r0, [pc, #20]	; (2cc8 <I2C_FANS_init+0x20>)
    2cb4:	4b05      	ldr	r3, [pc, #20]	; (2ccc <I2C_FANS_init+0x24>)
    2cb6:	4798      	blx	r3
	I2C_FANS_PORT_init();
    2cb8:	4b05      	ldr	r3, [pc, #20]	; (2cd0 <I2C_FANS_init+0x28>)
    2cba:	4798      	blx	r3
}
    2cbc:	bf00      	nop
    2cbe:	bd80      	pop	{r7, pc}
    2cc0:	00002c75 	.word	0x00002c75
    2cc4:	43000c00 	.word	0x43000c00
    2cc8:	20007814 	.word	0x20007814
    2ccc:	000037d5 	.word	0x000037d5
    2cd0:	00002c3d 	.word	0x00002c3d

00002cd4 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    2cd4:	b580      	push	{r7, lr}
    2cd6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    2cd8:	4808      	ldr	r0, [pc, #32]	; (2cfc <TIMER_USB_init+0x28>)
    2cda:	4b09      	ldr	r3, [pc, #36]	; (2d00 <TIMER_USB_init+0x2c>)
    2cdc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2cde:	2243      	movs	r2, #67	; 0x43
    2ce0:	2109      	movs	r1, #9
    2ce2:	4808      	ldr	r0, [pc, #32]	; (2d04 <TIMER_USB_init+0x30>)
    2ce4:	4b08      	ldr	r3, [pc, #32]	; (2d08 <TIMER_USB_init+0x34>)
    2ce6:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    2ce8:	4b08      	ldr	r3, [pc, #32]	; (2d0c <TIMER_USB_init+0x38>)
    2cea:	4798      	blx	r3
    2cec:	4603      	mov	r3, r0
    2cee:	461a      	mov	r2, r3
    2cf0:	4907      	ldr	r1, [pc, #28]	; (2d10 <TIMER_USB_init+0x3c>)
    2cf2:	4808      	ldr	r0, [pc, #32]	; (2d14 <TIMER_USB_init+0x40>)
    2cf4:	4b08      	ldr	r3, [pc, #32]	; (2d18 <TIMER_USB_init+0x44>)
    2cf6:	4798      	blx	r3
}
    2cf8:	bf00      	nop
    2cfa:	bd80      	pop	{r7, pc}
    2cfc:	40000800 	.word	0x40000800
    2d00:	00001e73 	.word	0x00001e73
    2d04:	40001c00 	.word	0x40001c00
    2d08:	00001d4d 	.word	0x00001d4d
    2d0c:	00009441 	.word	0x00009441
    2d10:	40003800 	.word	0x40003800
    2d14:	2000793c 	.word	0x2000793c
    2d18:	00003c91 	.word	0x00003c91

00002d1c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    2d1c:	b580      	push	{r7, lr}
    2d1e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    2d20:	4808      	ldr	r0, [pc, #32]	; (2d44 <TIMER_ARINC_init+0x28>)
    2d22:	4b09      	ldr	r3, [pc, #36]	; (2d48 <TIMER_ARINC_init+0x2c>)
    2d24:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2d26:	2244      	movs	r2, #68	; 0x44
    2d28:	211a      	movs	r1, #26
    2d2a:	4808      	ldr	r0, [pc, #32]	; (2d4c <TIMER_ARINC_init+0x30>)
    2d2c:	4b08      	ldr	r3, [pc, #32]	; (2d50 <TIMER_ARINC_init+0x34>)
    2d2e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    2d30:	4b08      	ldr	r3, [pc, #32]	; (2d54 <TIMER_ARINC_init+0x38>)
    2d32:	4798      	blx	r3
    2d34:	4603      	mov	r3, r0
    2d36:	461a      	mov	r2, r3
    2d38:	4907      	ldr	r1, [pc, #28]	; (2d58 <TIMER_ARINC_init+0x3c>)
    2d3a:	4808      	ldr	r0, [pc, #32]	; (2d5c <TIMER_ARINC_init+0x40>)
    2d3c:	4b08      	ldr	r3, [pc, #32]	; (2d60 <TIMER_ARINC_init+0x44>)
    2d3e:	4798      	blx	r3
}
    2d40:	bf00      	nop
    2d42:	bd80      	pop	{r7, pc}
    2d44:	40000800 	.word	0x40000800
    2d48:	00001f33 	.word	0x00001f33
    2d4c:	40001c00 	.word	0x40001c00
    2d50:	00001d4d 	.word	0x00001d4d
    2d54:	00009441 	.word	0x00009441
    2d58:	4101a000 	.word	0x4101a000
    2d5c:	2000791c 	.word	0x2000791c
    2d60:	00003c91 	.word	0x00003c91

00002d64 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    2d64:	b580      	push	{r7, lr}
    2d66:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    2d68:	4808      	ldr	r0, [pc, #32]	; (2d8c <TIMER_MAINTENANCE_init+0x28>)
    2d6a:	4b09      	ldr	r3, [pc, #36]	; (2d90 <TIMER_MAINTENANCE_init+0x2c>)
    2d6c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2d6e:	2246      	movs	r2, #70	; 0x46
    2d70:	211e      	movs	r1, #30
    2d72:	4808      	ldr	r0, [pc, #32]	; (2d94 <TIMER_MAINTENANCE_init+0x30>)
    2d74:	4b08      	ldr	r3, [pc, #32]	; (2d98 <TIMER_MAINTENANCE_init+0x34>)
    2d76:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    2d78:	4b08      	ldr	r3, [pc, #32]	; (2d9c <TIMER_MAINTENANCE_init+0x38>)
    2d7a:	4798      	blx	r3
    2d7c:	4603      	mov	r3, r0
    2d7e:	461a      	mov	r2, r3
    2d80:	4907      	ldr	r1, [pc, #28]	; (2da0 <TIMER_MAINTENANCE_init+0x3c>)
    2d82:	4808      	ldr	r0, [pc, #32]	; (2da4 <TIMER_MAINTENANCE_init+0x40>)
    2d84:	4b08      	ldr	r3, [pc, #32]	; (2da8 <TIMER_MAINTENANCE_init+0x44>)
    2d86:	4798      	blx	r3
}
    2d88:	bf00      	nop
    2d8a:	bd80      	pop	{r7, pc}
    2d8c:	40000800 	.word	0x40000800
    2d90:	00001f53 	.word	0x00001f53
    2d94:	40001c00 	.word	0x40001c00
    2d98:	00001d4d 	.word	0x00001d4d
    2d9c:	00009441 	.word	0x00009441
    2da0:	42001400 	.word	0x42001400
    2da4:	20007834 	.word	0x20007834
    2da8:	00003c91 	.word	0x00003c91

00002dac <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    2dac:	b580      	push	{r7, lr}
    2dae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    2db0:	4808      	ldr	r0, [pc, #32]	; (2dd4 <TIMER_INTERFACE_init+0x28>)
    2db2:	4b09      	ldr	r3, [pc, #36]	; (2dd8 <TIMER_INTERFACE_init+0x2c>)
    2db4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2db6:	2246      	movs	r2, #70	; 0x46
    2db8:	211e      	movs	r1, #30
    2dba:	4808      	ldr	r0, [pc, #32]	; (2ddc <TIMER_INTERFACE_init+0x30>)
    2dbc:	4b08      	ldr	r3, [pc, #32]	; (2de0 <TIMER_INTERFACE_init+0x34>)
    2dbe:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    2dc0:	4b08      	ldr	r3, [pc, #32]	; (2de4 <TIMER_INTERFACE_init+0x38>)
    2dc2:	4798      	blx	r3
    2dc4:	4603      	mov	r3, r0
    2dc6:	461a      	mov	r2, r3
    2dc8:	4907      	ldr	r1, [pc, #28]	; (2de8 <TIMER_INTERFACE_init+0x3c>)
    2dca:	4808      	ldr	r0, [pc, #32]	; (2dec <TIMER_INTERFACE_init+0x40>)
    2dcc:	4b08      	ldr	r3, [pc, #32]	; (2df0 <TIMER_INTERFACE_init+0x44>)
    2dce:	4798      	blx	r3
}
    2dd0:	bf00      	nop
    2dd2:	bd80      	pop	{r7, pc}
    2dd4:	40000800 	.word	0x40000800
    2dd8:	00001f73 	.word	0x00001f73
    2ddc:	40001c00 	.word	0x40001c00
    2de0:	00001d4d 	.word	0x00001d4d
    2de4:	00009441 	.word	0x00009441
    2de8:	42001800 	.word	0x42001800
    2dec:	20007878 	.word	0x20007878
    2df0:	00003c91 	.word	0x00003c91

00002df4 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    2df4:	b580      	push	{r7, lr}
    2df6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    2df8:	4808      	ldr	r0, [pc, #32]	; (2e1c <TIMER_EVENT_init+0x28>)
    2dfa:	4b09      	ldr	r3, [pc, #36]	; (2e20 <TIMER_EVENT_init+0x2c>)
    2dfc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2dfe:	2246      	movs	r2, #70	; 0x46
    2e00:	2127      	movs	r1, #39	; 0x27
    2e02:	4808      	ldr	r0, [pc, #32]	; (2e24 <TIMER_EVENT_init+0x30>)
    2e04:	4b08      	ldr	r3, [pc, #32]	; (2e28 <TIMER_EVENT_init+0x34>)
    2e06:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    2e08:	4b08      	ldr	r3, [pc, #32]	; (2e2c <TIMER_EVENT_init+0x38>)
    2e0a:	4798      	blx	r3
    2e0c:	4603      	mov	r3, r0
    2e0e:	461a      	mov	r2, r3
    2e10:	4907      	ldr	r1, [pc, #28]	; (2e30 <TIMER_EVENT_init+0x3c>)
    2e12:	4808      	ldr	r0, [pc, #32]	; (2e34 <TIMER_EVENT_init+0x40>)
    2e14:	4b08      	ldr	r3, [pc, #32]	; (2e38 <TIMER_EVENT_init+0x44>)
    2e16:	4798      	blx	r3
}
    2e18:	bf00      	nop
    2e1a:	bd80      	pop	{r7, pc}
    2e1c:	40000800 	.word	0x40000800
    2e20:	00002033 	.word	0x00002033
    2e24:	40001c00 	.word	0x40001c00
    2e28:	00001d4d 	.word	0x00001d4d
    2e2c:	00009441 	.word	0x00009441
    2e30:	43001400 	.word	0x43001400
    2e34:	20007858 	.word	0x20007858
    2e38:	00003c91 	.word	0x00003c91

00002e3c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    2e3c:	b480      	push	{r7}
    2e3e:	af00      	add	r7, sp, #0
}
    2e40:	bf00      	nop
    2e42:	46bd      	mov	sp, r7
    2e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e48:	4770      	bx	lr
	...

00002e4c <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    2e4c:	b580      	push	{r7, lr}
    2e4e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    2e50:	4804      	ldr	r0, [pc, #16]	; (2e64 <LIVE_PULSE_CLOCK_init+0x18>)
    2e52:	4b05      	ldr	r3, [pc, #20]	; (2e68 <LIVE_PULSE_CLOCK_init+0x1c>)
    2e54:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2e56:	2240      	movs	r2, #64	; 0x40
    2e58:	2127      	movs	r1, #39	; 0x27
    2e5a:	4804      	ldr	r0, [pc, #16]	; (2e6c <LIVE_PULSE_CLOCK_init+0x20>)
    2e5c:	4b04      	ldr	r3, [pc, #16]	; (2e70 <LIVE_PULSE_CLOCK_init+0x24>)
    2e5e:	4798      	blx	r3
}
    2e60:	bf00      	nop
    2e62:	bd80      	pop	{r7, pc}
    2e64:	40000800 	.word	0x40000800
    2e68:	00002053 	.word	0x00002053
    2e6c:	40001c00 	.word	0x40001c00
    2e70:	00001d4d 	.word	0x00001d4d

00002e74 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    2e74:	b580      	push	{r7, lr}
    2e76:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    2e78:	4b06      	ldr	r3, [pc, #24]	; (2e94 <LIVE_PULSE_init+0x20>)
    2e7a:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    2e7c:	4b06      	ldr	r3, [pc, #24]	; (2e98 <LIVE_PULSE_init+0x24>)
    2e7e:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    2e80:	4b06      	ldr	r3, [pc, #24]	; (2e9c <LIVE_PULSE_init+0x28>)
    2e82:	4798      	blx	r3
    2e84:	4603      	mov	r3, r0
    2e86:	461a      	mov	r2, r3
    2e88:	4905      	ldr	r1, [pc, #20]	; (2ea0 <LIVE_PULSE_init+0x2c>)
    2e8a:	4806      	ldr	r0, [pc, #24]	; (2ea4 <LIVE_PULSE_init+0x30>)
    2e8c:	4b06      	ldr	r3, [pc, #24]	; (2ea8 <LIVE_PULSE_init+0x34>)
    2e8e:	4798      	blx	r3
}
    2e90:	bf00      	nop
    2e92:	bd80      	pop	{r7, pc}
    2e94:	00002e4d 	.word	0x00002e4d
    2e98:	00002e3d 	.word	0x00002e3d
    2e9c:	00009455 	.word	0x00009455
    2ea0:	43001800 	.word	0x43001800
    2ea4:	200078b8 	.word	0x200078b8
    2ea8:	000038b1 	.word	0x000038b1

00002eac <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    2eac:	b580      	push	{r7, lr}
    2eae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    2eb0:	4804      	ldr	r0, [pc, #16]	; (2ec4 <TIMER_HVAC_CLOCK_init+0x18>)
    2eb2:	4b05      	ldr	r3, [pc, #20]	; (2ec8 <TIMER_HVAC_CLOCK_init+0x1c>)
    2eb4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2eb6:	2244      	movs	r2, #68	; 0x44
    2eb8:	2119      	movs	r1, #25
    2eba:	4804      	ldr	r0, [pc, #16]	; (2ecc <TIMER_HVAC_CLOCK_init+0x20>)
    2ebc:	4b04      	ldr	r3, [pc, #16]	; (2ed0 <TIMER_HVAC_CLOCK_init+0x24>)
    2ebe:	4798      	blx	r3
}
    2ec0:	bf00      	nop
    2ec2:	bd80      	pop	{r7, pc}
    2ec4:	40000800 	.word	0x40000800
    2ec8:	00001ef3 	.word	0x00001ef3
    2ecc:	40001c00 	.word	0x40001c00
    2ed0:	00001d4d 	.word	0x00001d4d

00002ed4 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    2ed4:	b580      	push	{r7, lr}
    2ed6:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    2ed8:	4b05      	ldr	r3, [pc, #20]	; (2ef0 <TIMER_HVAC_init+0x1c>)
    2eda:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    2edc:	4b05      	ldr	r3, [pc, #20]	; (2ef4 <TIMER_HVAC_init+0x20>)
    2ede:	4798      	blx	r3
    2ee0:	4603      	mov	r3, r0
    2ee2:	461a      	mov	r2, r3
    2ee4:	4904      	ldr	r1, [pc, #16]	; (2ef8 <TIMER_HVAC_init+0x24>)
    2ee6:	4805      	ldr	r0, [pc, #20]	; (2efc <TIMER_HVAC_init+0x28>)
    2ee8:	4b05      	ldr	r3, [pc, #20]	; (2f00 <TIMER_HVAC_init+0x2c>)
    2eea:	4798      	blx	r3
}
    2eec:	bf00      	nop
    2eee:	bd80      	pop	{r7, pc}
    2ef0:	00002ead 	.word	0x00002ead
    2ef4:	00008801 	.word	0x00008801
    2ef8:	41016000 	.word	0x41016000
    2efc:	2000795c 	.word	0x2000795c
    2f00:	00003c91 	.word	0x00003c91

00002f04 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    2f04:	b580      	push	{r7, lr}
    2f06:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    2f08:	4804      	ldr	r0, [pc, #16]	; (2f1c <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    2f0a:	4b05      	ldr	r3, [pc, #20]	; (2f20 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    2f0c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2f0e:	2244      	movs	r2, #68	; 0x44
    2f10:	2119      	movs	r1, #25
    2f12:	4804      	ldr	r0, [pc, #16]	; (2f24 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    2f14:	4b04      	ldr	r3, [pc, #16]	; (2f28 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    2f16:	4798      	blx	r3
}
    2f18:	bf00      	nop
    2f1a:	bd80      	pop	{r7, pc}
    2f1c:	40000800 	.word	0x40000800
    2f20:	00001f13 	.word	0x00001f13
    2f24:	40001c00 	.word	0x40001c00
    2f28:	00001d4d 	.word	0x00001d4d

00002f2c <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    2f2c:	b580      	push	{r7, lr}
    2f2e:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    2f30:	4b05      	ldr	r3, [pc, #20]	; (2f48 <TIMER_TEMPERATURES_init+0x1c>)
    2f32:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    2f34:	4b05      	ldr	r3, [pc, #20]	; (2f4c <TIMER_TEMPERATURES_init+0x20>)
    2f36:	4798      	blx	r3
    2f38:	4603      	mov	r3, r0
    2f3a:	461a      	mov	r2, r3
    2f3c:	4904      	ldr	r1, [pc, #16]	; (2f50 <TIMER_TEMPERATURES_init+0x24>)
    2f3e:	4805      	ldr	r0, [pc, #20]	; (2f54 <TIMER_TEMPERATURES_init+0x28>)
    2f40:	4b05      	ldr	r3, [pc, #20]	; (2f58 <TIMER_TEMPERATURES_init+0x2c>)
    2f42:	4798      	blx	r3
}
    2f44:	bf00      	nop
    2f46:	bd80      	pop	{r7, pc}
    2f48:	00002f05 	.word	0x00002f05
    2f4c:	00008801 	.word	0x00008801
    2f50:	41018000 	.word	0x41018000
    2f54:	200077c4 	.word	0x200077c4
    2f58:	00003c91 	.word	0x00003c91

00002f5c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    2f5c:	b580      	push	{r7, lr}
    2f5e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    2f60:	2102      	movs	r1, #2
    2f62:	2018      	movs	r0, #24
    2f64:	4b0f      	ldr	r3, [pc, #60]	; (2fa4 <CDCUSB_PORT_init+0x48>)
    2f66:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    2f68:	2100      	movs	r1, #0
    2f6a:	2018      	movs	r0, #24
    2f6c:	4b0e      	ldr	r3, [pc, #56]	; (2fa8 <CDCUSB_PORT_init+0x4c>)
    2f6e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    2f70:	2100      	movs	r1, #0
    2f72:	2018      	movs	r0, #24
    2f74:	4b0d      	ldr	r3, [pc, #52]	; (2fac <CDCUSB_PORT_init+0x50>)
    2f76:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2f78:	490d      	ldr	r1, [pc, #52]	; (2fb0 <CDCUSB_PORT_init+0x54>)
    2f7a:	2018      	movs	r0, #24
    2f7c:	4b0d      	ldr	r3, [pc, #52]	; (2fb4 <CDCUSB_PORT_init+0x58>)
    2f7e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2f80:	2102      	movs	r1, #2
    2f82:	2019      	movs	r0, #25
    2f84:	4b07      	ldr	r3, [pc, #28]	; (2fa4 <CDCUSB_PORT_init+0x48>)
    2f86:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2f88:	2100      	movs	r1, #0
    2f8a:	2019      	movs	r0, #25
    2f8c:	4b06      	ldr	r3, [pc, #24]	; (2fa8 <CDCUSB_PORT_init+0x4c>)
    2f8e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2f90:	2100      	movs	r1, #0
    2f92:	2019      	movs	r0, #25
    2f94:	4b05      	ldr	r3, [pc, #20]	; (2fac <CDCUSB_PORT_init+0x50>)
    2f96:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2f98:	4907      	ldr	r1, [pc, #28]	; (2fb8 <CDCUSB_PORT_init+0x5c>)
    2f9a:	2019      	movs	r0, #25
    2f9c:	4b05      	ldr	r3, [pc, #20]	; (2fb4 <CDCUSB_PORT_init+0x58>)
    2f9e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    2fa0:	bf00      	nop
    2fa2:	bd80      	pop	{r7, pc}
    2fa4:	000025a1 	.word	0x000025a1
    2fa8:	000025d9 	.word	0x000025d9
    2fac:	0000254d 	.word	0x0000254d
    2fb0:	00180007 	.word	0x00180007
    2fb4:	00002581 	.word	0x00002581
    2fb8:	00190007 	.word	0x00190007

00002fbc <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    2fbc:	b580      	push	{r7, lr}
    2fbe:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    2fc0:	2242      	movs	r2, #66	; 0x42
    2fc2:	210a      	movs	r1, #10
    2fc4:	4805      	ldr	r0, [pc, #20]	; (2fdc <CDCUSB_CLOCK_init+0x20>)
    2fc6:	4b06      	ldr	r3, [pc, #24]	; (2fe0 <CDCUSB_CLOCK_init+0x24>)
    2fc8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    2fca:	4806      	ldr	r0, [pc, #24]	; (2fe4 <CDCUSB_CLOCK_init+0x28>)
    2fcc:	4b06      	ldr	r3, [pc, #24]	; (2fe8 <CDCUSB_CLOCK_init+0x2c>)
    2fce:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2fd0:	4804      	ldr	r0, [pc, #16]	; (2fe4 <CDCUSB_CLOCK_init+0x28>)
    2fd2:	4b06      	ldr	r3, [pc, #24]	; (2fec <CDCUSB_CLOCK_init+0x30>)
    2fd4:	4798      	blx	r3
}
    2fd6:	bf00      	nop
    2fd8:	bd80      	pop	{r7, pc}
    2fda:	bf00      	nop
    2fdc:	40001c00 	.word	0x40001c00
    2fe0:	00001d4d 	.word	0x00001d4d
    2fe4:	40000800 	.word	0x40000800
    2fe8:	00001d73 	.word	0x00001d73
    2fec:	00001e93 	.word	0x00001e93

00002ff0 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    2ff4:	4b03      	ldr	r3, [pc, #12]	; (3004 <CDCUSB_init+0x14>)
    2ff6:	4798      	blx	r3
	usb_d_init();
    2ff8:	4b03      	ldr	r3, [pc, #12]	; (3008 <CDCUSB_init+0x18>)
    2ffa:	4798      	blx	r3
	CDCUSB_PORT_init();
    2ffc:	4b03      	ldr	r3, [pc, #12]	; (300c <CDCUSB_init+0x1c>)
    2ffe:	4798      	blx	r3
}
    3000:	bf00      	nop
    3002:	bd80      	pop	{r7, pc}
    3004:	00002fbd 	.word	0x00002fbd
    3008:	000044ed 	.word	0x000044ed
    300c:	00002f5d 	.word	0x00002f5d

00003010 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    3010:	b580      	push	{r7, lr}
    3012:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    3014:	4802      	ldr	r0, [pc, #8]	; (3020 <WATCHDOG_CLOCK_init+0x10>)
    3016:	4b03      	ldr	r3, [pc, #12]	; (3024 <WATCHDOG_CLOCK_init+0x14>)
    3018:	4798      	blx	r3
}
    301a:	bf00      	nop
    301c:	bd80      	pop	{r7, pc}
    301e:	bf00      	nop
    3020:	40000800 	.word	0x40000800
    3024:	00001df3 	.word	0x00001df3

00003028 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    3028:	b580      	push	{r7, lr}
    302a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    302c:	4b03      	ldr	r3, [pc, #12]	; (303c <WATCHDOG_init+0x14>)
    302e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    3030:	4903      	ldr	r1, [pc, #12]	; (3040 <WATCHDOG_init+0x18>)
    3032:	4804      	ldr	r0, [pc, #16]	; (3044 <WATCHDOG_init+0x1c>)
    3034:	4b04      	ldr	r3, [pc, #16]	; (3048 <WATCHDOG_init+0x20>)
    3036:	4798      	blx	r3
}
    3038:	bf00      	nop
    303a:	bd80      	pop	{r7, pc}
    303c:	00003011 	.word	0x00003011
    3040:	40002000 	.word	0x40002000
    3044:	2000799c 	.word	0x2000799c
    3048:	00002621 	.word	0x00002621

0000304c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    304c:	b580      	push	{r7, lr}
    304e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    3050:	4904      	ldr	r1, [pc, #16]	; (3064 <CAN_CCU_PORT_init+0x18>)
    3052:	202d      	movs	r0, #45	; 0x2d
    3054:	4b04      	ldr	r3, [pc, #16]	; (3068 <CAN_CCU_PORT_init+0x1c>)
    3056:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    3058:	4904      	ldr	r1, [pc, #16]	; (306c <CAN_CCU_PORT_init+0x20>)
    305a:	202c      	movs	r0, #44	; 0x2c
    305c:	4b02      	ldr	r3, [pc, #8]	; (3068 <CAN_CCU_PORT_init+0x1c>)
    305e:	4798      	blx	r3
}
    3060:	bf00      	nop
    3062:	bd80      	pop	{r7, pc}
    3064:	002d0007 	.word	0x002d0007
    3068:	00002581 	.word	0x00002581
    306c:	002c0007 	.word	0x002c0007

00003070 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    3070:	b580      	push	{r7, lr}
    3072:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    3074:	4807      	ldr	r0, [pc, #28]	; (3094 <CAN_CCU_init+0x24>)
    3076:	4b08      	ldr	r3, [pc, #32]	; (3098 <CAN_CCU_init+0x28>)
    3078:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    307a:	2243      	movs	r2, #67	; 0x43
    307c:	211c      	movs	r1, #28
    307e:	4807      	ldr	r0, [pc, #28]	; (309c <CAN_CCU_init+0x2c>)
    3080:	4b07      	ldr	r3, [pc, #28]	; (30a0 <CAN_CCU_init+0x30>)
    3082:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    3084:	4907      	ldr	r1, [pc, #28]	; (30a4 <CAN_CCU_init+0x34>)
    3086:	4808      	ldr	r0, [pc, #32]	; (30a8 <CAN_CCU_init+0x38>)
    3088:	4b08      	ldr	r3, [pc, #32]	; (30ac <CAN_CCU_init+0x3c>)
    308a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    308c:	4b08      	ldr	r3, [pc, #32]	; (30b0 <CAN_CCU_init+0x40>)
    308e:	4798      	blx	r3
}
    3090:	bf00      	nop
    3092:	bd80      	pop	{r7, pc}
    3094:	40000800 	.word	0x40000800
    3098:	00001db3 	.word	0x00001db3
    309c:	40001c00 	.word	0x40001c00
    30a0:	00001d4d 	.word	0x00001d4d
    30a4:	42000400 	.word	0x42000400
    30a8:	200078f4 	.word	0x200078f4
    30ac:	00003359 	.word	0x00003359
    30b0:	0000304d 	.word	0x0000304d

000030b4 <system_init>:

void system_init(void)
{
    30b4:	b580      	push	{r7, lr}
    30b6:	af00      	add	r7, sp, #0
	init_mcu();
    30b8:	4b5e      	ldr	r3, [pc, #376]	; (3234 <system_init+0x180>)
    30ba:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    30bc:	2100      	movs	r1, #0
    30be:	2007      	movs	r0, #7
    30c0:	4b5d      	ldr	r3, [pc, #372]	; (3238 <system_init+0x184>)
    30c2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    30c4:	2102      	movs	r1, #2
    30c6:	2007      	movs	r0, #7
    30c8:	4b5c      	ldr	r3, [pc, #368]	; (323c <system_init+0x188>)
    30ca:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    30cc:	f04f 31ff 	mov.w	r1, #4294967295
    30d0:	2007      	movs	r0, #7
    30d2:	4b5b      	ldr	r3, [pc, #364]	; (3240 <system_init+0x18c>)
    30d4:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    30d6:	2101      	movs	r1, #1
    30d8:	200f      	movs	r0, #15
    30da:	4b57      	ldr	r3, [pc, #348]	; (3238 <system_init+0x184>)
    30dc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    30de:	2102      	movs	r1, #2
    30e0:	200f      	movs	r0, #15
    30e2:	4b56      	ldr	r3, [pc, #344]	; (323c <system_init+0x188>)
    30e4:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    30e6:	f04f 31ff 	mov.w	r1, #4294967295
    30ea:	200f      	movs	r0, #15
    30ec:	4b54      	ldr	r3, [pc, #336]	; (3240 <system_init+0x18c>)
    30ee:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    30f0:	2101      	movs	r1, #1
    30f2:	2013      	movs	r0, #19
    30f4:	4b50      	ldr	r3, [pc, #320]	; (3238 <system_init+0x184>)
    30f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    30f8:	2102      	movs	r1, #2
    30fa:	2013      	movs	r0, #19
    30fc:	4b4f      	ldr	r3, [pc, #316]	; (323c <system_init+0x188>)
    30fe:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    3100:	f04f 31ff 	mov.w	r1, #4294967295
    3104:	2013      	movs	r0, #19
    3106:	4b4e      	ldr	r3, [pc, #312]	; (3240 <system_init+0x18c>)
    3108:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    310a:	2101      	movs	r1, #1
    310c:	201b      	movs	r0, #27
    310e:	4b4a      	ldr	r3, [pc, #296]	; (3238 <system_init+0x184>)
    3110:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    3112:	2102      	movs	r1, #2
    3114:	201b      	movs	r0, #27
    3116:	4b49      	ldr	r3, [pc, #292]	; (323c <system_init+0x188>)
    3118:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    311a:	f04f 31ff 	mov.w	r1, #4294967295
    311e:	201b      	movs	r0, #27
    3120:	4b47      	ldr	r3, [pc, #284]	; (3240 <system_init+0x18c>)
    3122:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    3124:	2101      	movs	r1, #1
    3126:	2027      	movs	r0, #39	; 0x27
    3128:	4b43      	ldr	r3, [pc, #268]	; (3238 <system_init+0x184>)
    312a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    312c:	2102      	movs	r1, #2
    312e:	2027      	movs	r0, #39	; 0x27
    3130:	4b42      	ldr	r3, [pc, #264]	; (323c <system_init+0x188>)
    3132:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    3134:	f04f 31ff 	mov.w	r1, #4294967295
    3138:	2027      	movs	r0, #39	; 0x27
    313a:	4b41      	ldr	r3, [pc, #260]	; (3240 <system_init+0x18c>)
    313c:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    313e:	2101      	movs	r1, #1
    3140:	203d      	movs	r0, #61	; 0x3d
    3142:	4b3d      	ldr	r3, [pc, #244]	; (3238 <system_init+0x184>)
    3144:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    3146:	2102      	movs	r1, #2
    3148:	203d      	movs	r0, #61	; 0x3d
    314a:	4b3c      	ldr	r3, [pc, #240]	; (323c <system_init+0x188>)
    314c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    314e:	f04f 31ff 	mov.w	r1, #4294967295
    3152:	203d      	movs	r0, #61	; 0x3d
    3154:	4b3a      	ldr	r3, [pc, #232]	; (3240 <system_init+0x18c>)
    3156:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    3158:	2101      	movs	r1, #1
    315a:	203f      	movs	r0, #63	; 0x3f
    315c:	4b37      	ldr	r3, [pc, #220]	; (323c <system_init+0x188>)
    315e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    3160:	2101      	movs	r1, #1
    3162:	203f      	movs	r0, #63	; 0x3f
    3164:	4b37      	ldr	r3, [pc, #220]	; (3244 <system_init+0x190>)
    3166:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    3168:	f04f 31ff 	mov.w	r1, #4294967295
    316c:	203f      	movs	r0, #63	; 0x3f
    316e:	4b34      	ldr	r3, [pc, #208]	; (3240 <system_init+0x18c>)
    3170:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    3172:	2100      	movs	r1, #0
    3174:	204d      	movs	r0, #77	; 0x4d
    3176:	4b30      	ldr	r3, [pc, #192]	; (3238 <system_init+0x184>)
    3178:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    317a:	2102      	movs	r1, #2
    317c:	204d      	movs	r0, #77	; 0x4d
    317e:	4b2f      	ldr	r3, [pc, #188]	; (323c <system_init+0x188>)
    3180:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    3182:	f04f 31ff 	mov.w	r1, #4294967295
    3186:	204d      	movs	r0, #77	; 0x4d
    3188:	4b2d      	ldr	r3, [pc, #180]	; (3240 <system_init+0x18c>)
    318a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    318c:	2101      	movs	r1, #1
    318e:	204e      	movs	r0, #78	; 0x4e
    3190:	4b29      	ldr	r3, [pc, #164]	; (3238 <system_init+0x184>)
    3192:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    3194:	2102      	movs	r1, #2
    3196:	204e      	movs	r0, #78	; 0x4e
    3198:	4b28      	ldr	r3, [pc, #160]	; (323c <system_init+0x188>)
    319a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    319c:	f04f 31ff 	mov.w	r1, #4294967295
    31a0:	204e      	movs	r0, #78	; 0x4e
    31a2:	4b27      	ldr	r3, [pc, #156]	; (3240 <system_init+0x18c>)
    31a4:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    31a6:	2100      	movs	r1, #0
    31a8:	204f      	movs	r0, #79	; 0x4f
    31aa:	4b23      	ldr	r3, [pc, #140]	; (3238 <system_init+0x184>)
    31ac:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    31ae:	2102      	movs	r1, #2
    31b0:	204f      	movs	r0, #79	; 0x4f
    31b2:	4b22      	ldr	r3, [pc, #136]	; (323c <system_init+0x188>)
    31b4:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    31b6:	f04f 31ff 	mov.w	r1, #4294967295
    31ba:	204f      	movs	r0, #79	; 0x4f
    31bc:	4b20      	ldr	r3, [pc, #128]	; (3240 <system_init+0x18c>)
    31be:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    31c0:	2100      	movs	r1, #0
    31c2:	2052      	movs	r0, #82	; 0x52
    31c4:	4b1c      	ldr	r3, [pc, #112]	; (3238 <system_init+0x184>)
    31c6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    31c8:	2102      	movs	r1, #2
    31ca:	2052      	movs	r0, #82	; 0x52
    31cc:	4b1b      	ldr	r3, [pc, #108]	; (323c <system_init+0x188>)
    31ce:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    31d0:	f04f 31ff 	mov.w	r1, #4294967295
    31d4:	2052      	movs	r0, #82	; 0x52
    31d6:	4b1a      	ldr	r3, [pc, #104]	; (3240 <system_init+0x18c>)
    31d8:	4798      	blx	r3

	CRC_CALC_init();
    31da:	4b1b      	ldr	r3, [pc, #108]	; (3248 <system_init+0x194>)
    31dc:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    31de:	4b1b      	ldr	r3, [pc, #108]	; (324c <system_init+0x198>)
    31e0:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    31e2:	4b1b      	ldr	r3, [pc, #108]	; (3250 <system_init+0x19c>)
    31e4:	4798      	blx	r3

	QSPI_N25Q256_init();
    31e6:	4b1b      	ldr	r3, [pc, #108]	; (3254 <system_init+0x1a0>)
    31e8:	4798      	blx	r3

	DATETIME_CLOCK_init();
    31ea:	4b1b      	ldr	r3, [pc, #108]	; (3258 <system_init+0x1a4>)
    31ec:	4798      	blx	r3

	I2C_HEATERS_init();
    31ee:	4b1b      	ldr	r3, [pc, #108]	; (325c <system_init+0x1a8>)
    31f0:	4798      	blx	r3

	SPI_TEMP_init();
    31f2:	4b1b      	ldr	r3, [pc, #108]	; (3260 <system_init+0x1ac>)
    31f4:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    31f6:	4b1b      	ldr	r3, [pc, #108]	; (3264 <system_init+0x1b0>)
    31f8:	4798      	blx	r3

	SPI_HI3593_init();
    31fa:	4b1b      	ldr	r3, [pc, #108]	; (3268 <system_init+0x1b4>)
    31fc:	4798      	blx	r3

	I2C_FANS_init();
    31fe:	4b1b      	ldr	r3, [pc, #108]	; (326c <system_init+0x1b8>)
    3200:	4798      	blx	r3

	TIMER_USB_init();
    3202:	4b1b      	ldr	r3, [pc, #108]	; (3270 <system_init+0x1bc>)
    3204:	4798      	blx	r3
	TIMER_ARINC_init();
    3206:	4b1b      	ldr	r3, [pc, #108]	; (3274 <system_init+0x1c0>)
    3208:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    320a:	4b1b      	ldr	r3, [pc, #108]	; (3278 <system_init+0x1c4>)
    320c:	4798      	blx	r3
	TIMER_INTERFACE_init();
    320e:	4b1b      	ldr	r3, [pc, #108]	; (327c <system_init+0x1c8>)
    3210:	4798      	blx	r3
	TIMER_EVENT_init();
    3212:	4b1b      	ldr	r3, [pc, #108]	; (3280 <system_init+0x1cc>)
    3214:	4798      	blx	r3
	LIVE_PULSE_init();
    3216:	4b1b      	ldr	r3, [pc, #108]	; (3284 <system_init+0x1d0>)
    3218:	4798      	blx	r3

	TIMER_HVAC_init();
    321a:	4b1b      	ldr	r3, [pc, #108]	; (3288 <system_init+0x1d4>)
    321c:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    321e:	4b1b      	ldr	r3, [pc, #108]	; (328c <system_init+0x1d8>)
    3220:	4798      	blx	r3

	CDCUSB_init();
    3222:	4b1b      	ldr	r3, [pc, #108]	; (3290 <system_init+0x1dc>)
    3224:	4798      	blx	r3

	WATCHDOG_init();
    3226:	4b1b      	ldr	r3, [pc, #108]	; (3294 <system_init+0x1e0>)
    3228:	4798      	blx	r3
	CAN_CCU_init();
    322a:	4b1b      	ldr	r3, [pc, #108]	; (3298 <system_init+0x1e4>)
    322c:	4798      	blx	r3
}
    322e:	bf00      	nop
    3230:	bd80      	pop	{r7, pc}
    3232:	bf00      	nop
    3234:	00002611 	.word	0x00002611
    3238:	000025d9 	.word	0x000025d9
    323c:	000025a1 	.word	0x000025a1
    3240:	00002581 	.word	0x00002581
    3244:	0000254d 	.word	0x0000254d
    3248:	00002671 	.word	0x00002671
    324c:	0000269d 	.word	0x0000269d
    3250:	000027c5 	.word	0x000027c5
    3254:	0000290d 	.word	0x0000290d
    3258:	00002951 	.word	0x00002951
    325c:	000029e1 	.word	0x000029e1
    3260:	00002aad 	.word	0x00002aad
    3264:	00002b45 	.word	0x00002b45
    3268:	00002c11 	.word	0x00002c11
    326c:	00002ca9 	.word	0x00002ca9
    3270:	00002cd5 	.word	0x00002cd5
    3274:	00002d1d 	.word	0x00002d1d
    3278:	00002d65 	.word	0x00002d65
    327c:	00002dad 	.word	0x00002dad
    3280:	00002df5 	.word	0x00002df5
    3284:	00002e75 	.word	0x00002e75
    3288:	00002ed5 	.word	0x00002ed5
    328c:	00002f2d 	.word	0x00002f2d
    3290:	00002ff1 	.word	0x00002ff1
    3294:	00003029 	.word	0x00003029
    3298:	00003071 	.word	0x00003071

0000329c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    329c:	b480      	push	{r7}
    329e:	b085      	sub	sp, #20
    32a0:	af00      	add	r7, sp, #0
    32a2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    32a4:	f3ef 8310 	mrs	r3, PRIMASK
    32a8:	60fb      	str	r3, [r7, #12]
  return(result);
    32aa:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    32b0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    32b2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    32b6:	bf00      	nop
    32b8:	3714      	adds	r7, #20
    32ba:	46bd      	mov	sp, r7
    32bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    32c0:	4770      	bx	lr

000032c2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    32c2:	b480      	push	{r7}
    32c4:	b085      	sub	sp, #20
    32c6:	af00      	add	r7, sp, #0
    32c8:	6078      	str	r0, [r7, #4]
    32ca:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    32ce:	687b      	ldr	r3, [r7, #4]
    32d0:	681b      	ldr	r3, [r3, #0]
    32d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    32d4:	68fb      	ldr	r3, [r7, #12]
    32d6:	f383 8810 	msr	PRIMASK, r3
}
    32da:	bf00      	nop
    32dc:	3714      	adds	r7, #20
    32de:	46bd      	mov	sp, r7
    32e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32e4:	4770      	bx	lr
	...

000032e8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b084      	sub	sp, #16
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
    32f0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    32f2:	2300      	movs	r3, #0
    32f4:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    32f6:	687b      	ldr	r3, [r7, #4]
    32f8:	2b00      	cmp	r3, #0
    32fa:	bf14      	ite	ne
    32fc:	2301      	movne	r3, #1
    32fe:	2300      	moveq	r3, #0
    3300:	b2db      	uxtb	r3, r3
    3302:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3306:	4911      	ldr	r1, [pc, #68]	; (334c <calendar_init+0x64>)
    3308:	4618      	mov	r0, r3
    330a:	4b11      	ldr	r3, [pc, #68]	; (3350 <calendar_init+0x68>)
    330c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    330e:	687b      	ldr	r3, [r7, #4]
    3310:	681a      	ldr	r2, [r3, #0]
    3312:	683b      	ldr	r3, [r7, #0]
    3314:	429a      	cmp	r2, r3
    3316:	d101      	bne.n	331c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    3318:	2300      	movs	r3, #0
    331a:	e013      	b.n	3344 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	681b      	ldr	r3, [r3, #0]
    3320:	2b00      	cmp	r3, #0
    3322:	d002      	beq.n	332a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    3324:	f06f 0311 	mvn.w	r3, #17
    3328:	e00c      	b.n	3344 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    332a:	687b      	ldr	r3, [r7, #4]
    332c:	683a      	ldr	r2, [r7, #0]
    332e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    3330:	687b      	ldr	r3, [r7, #4]
    3332:	4618      	mov	r0, r3
    3334:	4b07      	ldr	r3, [pc, #28]	; (3354 <calendar_init+0x6c>)
    3336:	4798      	blx	r3
    3338:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    333a:	687b      	ldr	r3, [r7, #4]
    333c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    3340:	619a      	str	r2, [r3, #24]

	return ret;
    3342:	68fb      	ldr	r3, [r7, #12]
}
    3344:	4618      	mov	r0, r3
    3346:	3710      	adds	r7, #16
    3348:	46bd      	mov	sp, r7
    334a:	bd80      	pop	{r7, pc}
    334c:	00010bf4 	.word	0x00010bf4
    3350:	00004a95 	.word	0x00004a95
    3354:	00006e41 	.word	0x00006e41

00003358 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    3358:	b580      	push	{r7, lr}
    335a:	b084      	sub	sp, #16
    335c:	af00      	add	r7, sp, #0
    335e:	6078      	str	r0, [r7, #4]
    3360:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	2b00      	cmp	r3, #0
    3366:	d004      	beq.n	3372 <can_async_init+0x1a>
    3368:	683b      	ldr	r3, [r7, #0]
    336a:	2b00      	cmp	r3, #0
    336c:	d001      	beq.n	3372 <can_async_init+0x1a>
    336e:	2301      	movs	r3, #1
    3370:	e000      	b.n	3374 <can_async_init+0x1c>
    3372:	2300      	movs	r3, #0
    3374:	f003 0301 	and.w	r3, r3, #1
    3378:	b2db      	uxtb	r3, r3
    337a:	2241      	movs	r2, #65	; 0x41
    337c:	490e      	ldr	r1, [pc, #56]	; (33b8 <can_async_init+0x60>)
    337e:	4618      	mov	r0, r3
    3380:	4b0e      	ldr	r3, [pc, #56]	; (33bc <can_async_init+0x64>)
    3382:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    3384:	687b      	ldr	r3, [r7, #4]
    3386:	6839      	ldr	r1, [r7, #0]
    3388:	4618      	mov	r0, r3
    338a:	4b0d      	ldr	r3, [pc, #52]	; (33c0 <can_async_init+0x68>)
    338c:	4798      	blx	r3
    338e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    3390:	68fb      	ldr	r3, [r7, #12]
    3392:	2b00      	cmp	r3, #0
    3394:	d001      	beq.n	339a <can_async_init+0x42>
		return rc;
    3396:	68fb      	ldr	r3, [r7, #12]
    3398:	e009      	b.n	33ae <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    339a:	687b      	ldr	r3, [r7, #4]
    339c:	4a09      	ldr	r2, [pc, #36]	; (33c4 <can_async_init+0x6c>)
    339e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	4a09      	ldr	r2, [pc, #36]	; (33c8 <can_async_init+0x70>)
    33a4:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    33a6:	687b      	ldr	r3, [r7, #4]
    33a8:	4a08      	ldr	r2, [pc, #32]	; (33cc <can_async_init+0x74>)
    33aa:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    33ac:	2300      	movs	r3, #0
}
    33ae:	4618      	mov	r0, r3
    33b0:	3710      	adds	r7, #16
    33b2:	46bd      	mov	sp, r7
    33b4:	bd80      	pop	{r7, pc}
    33b6:	bf00      	nop
    33b8:	00010c10 	.word	0x00010c10
    33bc:	00004a95 	.word	0x00004a95
    33c0:	00004ff1 	.word	0x00004ff1
    33c4:	000033d1 	.word	0x000033d1
    33c8:	000033f5 	.word	0x000033f5
    33cc:	00003419 	.word	0x00003419

000033d0 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    33d0:	b580      	push	{r7, lr}
    33d2:	b084      	sub	sp, #16
    33d4:	af00      	add	r7, sp, #0
    33d6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    33dc:	68fb      	ldr	r3, [r7, #12]
    33de:	69db      	ldr	r3, [r3, #28]
    33e0:	2b00      	cmp	r3, #0
    33e2:	d003      	beq.n	33ec <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    33e4:	68fb      	ldr	r3, [r7, #12]
    33e6:	69db      	ldr	r3, [r3, #28]
    33e8:	68f8      	ldr	r0, [r7, #12]
    33ea:	4798      	blx	r3
	}
}
    33ec:	bf00      	nop
    33ee:	3710      	adds	r7, #16
    33f0:	46bd      	mov	sp, r7
    33f2:	bd80      	pop	{r7, pc}

000033f4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    33f4:	b580      	push	{r7, lr}
    33f6:	b084      	sub	sp, #16
    33f8:	af00      	add	r7, sp, #0
    33fa:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    33fc:	687b      	ldr	r3, [r7, #4]
    33fe:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    3400:	68fb      	ldr	r3, [r7, #12]
    3402:	6a1b      	ldr	r3, [r3, #32]
    3404:	2b00      	cmp	r3, #0
    3406:	d003      	beq.n	3410 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    3408:	68fb      	ldr	r3, [r7, #12]
    340a:	6a1b      	ldr	r3, [r3, #32]
    340c:	68f8      	ldr	r0, [r7, #12]
    340e:	4798      	blx	r3
	}
}
    3410:	bf00      	nop
    3412:	3710      	adds	r7, #16
    3414:	46bd      	mov	sp, r7
    3416:	bd80      	pop	{r7, pc}

00003418 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    3418:	b580      	push	{r7, lr}
    341a:	b084      	sub	sp, #16
    341c:	af00      	add	r7, sp, #0
    341e:	6078      	str	r0, [r7, #4]
    3420:	460b      	mov	r3, r1
    3422:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3424:	687b      	ldr	r3, [r7, #4]
    3426:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    3428:	68fb      	ldr	r3, [r7, #12]
    342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    342c:	2b00      	cmp	r3, #0
    342e:	d005      	beq.n	343c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    3430:	68fb      	ldr	r3, [r7, #12]
    3432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3434:	78fa      	ldrb	r2, [r7, #3]
    3436:	4611      	mov	r1, r2
    3438:	68f8      	ldr	r0, [r7, #12]
    343a:	4798      	blx	r3
	}
}
    343c:	bf00      	nop
    343e:	3710      	adds	r7, #16
    3440:	46bd      	mov	sp, r7
    3442:	bd80      	pop	{r7, pc}

00003444 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    3444:	b580      	push	{r7, lr}
    3446:	b082      	sub	sp, #8
    3448:	af00      	add	r7, sp, #0
    344a:	6078      	str	r0, [r7, #4]
    344c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	2b00      	cmp	r3, #0
    3452:	d004      	beq.n	345e <crc_sync_init+0x1a>
    3454:	683b      	ldr	r3, [r7, #0]
    3456:	2b00      	cmp	r3, #0
    3458:	d001      	beq.n	345e <crc_sync_init+0x1a>
    345a:	2301      	movs	r3, #1
    345c:	e000      	b.n	3460 <crc_sync_init+0x1c>
    345e:	2300      	movs	r3, #0
    3460:	f003 0301 	and.w	r3, r3, #1
    3464:	b2db      	uxtb	r3, r3
    3466:	222b      	movs	r2, #43	; 0x2b
    3468:	4906      	ldr	r1, [pc, #24]	; (3484 <crc_sync_init+0x40>)
    346a:	4618      	mov	r0, r3
    346c:	4b06      	ldr	r3, [pc, #24]	; (3488 <crc_sync_init+0x44>)
    346e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	6839      	ldr	r1, [r7, #0]
    3474:	4618      	mov	r0, r3
    3476:	4b05      	ldr	r3, [pc, #20]	; (348c <crc_sync_init+0x48>)
    3478:	4798      	blx	r3
    347a:	4603      	mov	r3, r0
}
    347c:	4618      	mov	r0, r3
    347e:	3708      	adds	r7, #8
    3480:	46bd      	mov	sp, r7
    3482:	bd80      	pop	{r7, pc}
    3484:	00010c2c 	.word	0x00010c2c
    3488:	00004a95 	.word	0x00004a95
    348c:	000056f9 	.word	0x000056f9

00003490 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    3490:	b590      	push	{r4, r7, lr}
    3492:	b083      	sub	sp, #12
    3494:	af00      	add	r7, sp, #0
    3496:	4603      	mov	r3, r0
    3498:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    349a:	4b07      	ldr	r3, [pc, #28]	; (34b8 <delay_us+0x28>)
    349c:	681c      	ldr	r4, [r3, #0]
    349e:	88fb      	ldrh	r3, [r7, #6]
    34a0:	4618      	mov	r0, r3
    34a2:	4b06      	ldr	r3, [pc, #24]	; (34bc <delay_us+0x2c>)
    34a4:	4798      	blx	r3
    34a6:	4603      	mov	r3, r0
    34a8:	4619      	mov	r1, r3
    34aa:	4620      	mov	r0, r4
    34ac:	4b04      	ldr	r3, [pc, #16]	; (34c0 <delay_us+0x30>)
    34ae:	4798      	blx	r3
}
    34b0:	bf00      	nop
    34b2:	370c      	adds	r7, #12
    34b4:	46bd      	mov	sp, r7
    34b6:	bd90      	pop	{r4, r7, pc}
    34b8:	20000860 	.word	0x20000860
    34bc:	00005449 	.word	0x00005449
    34c0:	000055e1 	.word	0x000055e1

000034c4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    34c4:	b590      	push	{r4, r7, lr}
    34c6:	b083      	sub	sp, #12
    34c8:	af00      	add	r7, sp, #0
    34ca:	4603      	mov	r3, r0
    34cc:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    34ce:	4b07      	ldr	r3, [pc, #28]	; (34ec <delay_ms+0x28>)
    34d0:	681c      	ldr	r4, [r3, #0]
    34d2:	88fb      	ldrh	r3, [r7, #6]
    34d4:	4618      	mov	r0, r3
    34d6:	4b06      	ldr	r3, [pc, #24]	; (34f0 <delay_ms+0x2c>)
    34d8:	4798      	blx	r3
    34da:	4603      	mov	r3, r0
    34dc:	4619      	mov	r1, r3
    34de:	4620      	mov	r0, r4
    34e0:	4b04      	ldr	r3, [pc, #16]	; (34f4 <delay_ms+0x30>)
    34e2:	4798      	blx	r3
}
    34e4:	bf00      	nop
    34e6:	370c      	adds	r7, #12
    34e8:	46bd      	mov	sp, r7
    34ea:	bd90      	pop	{r4, r7, pc}
    34ec:	20000860 	.word	0x20000860
    34f0:	000055b5 	.word	0x000055b5
    34f4:	000055e1 	.word	0x000055e1

000034f8 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    34f8:	b580      	push	{r7, lr}
    34fa:	af00      	add	r7, sp, #0
	return _event_system_init();
    34fc:	4b02      	ldr	r3, [pc, #8]	; (3508 <event_system_init+0x10>)
    34fe:	4798      	blx	r3
    3500:	4603      	mov	r3, r0
}
    3502:	4618      	mov	r0, r3
    3504:	bd80      	pop	{r7, pc}
    3506:	bf00      	nop
    3508:	00005eb5 	.word	0x00005eb5

0000350c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    350c:	b580      	push	{r7, lr}
    350e:	b082      	sub	sp, #8
    3510:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3512:	2300      	movs	r3, #0
    3514:	80fb      	strh	r3, [r7, #6]
    3516:	e00e      	b.n	3536 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    3518:	88fb      	ldrh	r3, [r7, #6]
    351a:	4a0c      	ldr	r2, [pc, #48]	; (354c <ext_irq_init+0x40>)
    351c:	00db      	lsls	r3, r3, #3
    351e:	4413      	add	r3, r2
    3520:	f04f 32ff 	mov.w	r2, #4294967295
    3524:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    3526:	88fb      	ldrh	r3, [r7, #6]
    3528:	4a08      	ldr	r2, [pc, #32]	; (354c <ext_irq_init+0x40>)
    352a:	2100      	movs	r1, #0
    352c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3530:	88fb      	ldrh	r3, [r7, #6]
    3532:	3301      	adds	r3, #1
    3534:	80fb      	strh	r3, [r7, #6]
    3536:	88fb      	ldrh	r3, [r7, #6]
    3538:	2b08      	cmp	r3, #8
    353a:	d9ed      	bls.n	3518 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    353c:	4804      	ldr	r0, [pc, #16]	; (3550 <ext_irq_init+0x44>)
    353e:	4b05      	ldr	r3, [pc, #20]	; (3554 <ext_irq_init+0x48>)
    3540:	4798      	blx	r3
    3542:	4603      	mov	r3, r0
}
    3544:	4618      	mov	r0, r3
    3546:	3708      	adds	r7, #8
    3548:	46bd      	mov	sp, r7
    354a:	bd80      	pop	{r7, pc}
    354c:	20000864 	.word	0x20000864
    3550:	000036b1 	.word	0x000036b1
    3554:	00005a39 	.word	0x00005a39

00003558 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    3558:	b580      	push	{r7, lr}
    355a:	b086      	sub	sp, #24
    355c:	af00      	add	r7, sp, #0
    355e:	6078      	str	r0, [r7, #4]
    3560:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    3562:	2300      	movs	r3, #0
    3564:	75fb      	strb	r3, [r7, #23]
    3566:	2300      	movs	r3, #0
    3568:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    356a:	2300      	movs	r3, #0
    356c:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    356e:	e012      	b.n	3596 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    3570:	7dfb      	ldrb	r3, [r7, #23]
    3572:	4a4d      	ldr	r2, [pc, #308]	; (36a8 <ext_irq_register+0x150>)
    3574:	00db      	lsls	r3, r3, #3
    3576:	4413      	add	r3, r2
    3578:	685a      	ldr	r2, [r3, #4]
    357a:	687b      	ldr	r3, [r7, #4]
    357c:	429a      	cmp	r2, r3
    357e:	d107      	bne.n	3590 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    3580:	7dfb      	ldrb	r3, [r7, #23]
    3582:	4949      	ldr	r1, [pc, #292]	; (36a8 <ext_irq_register+0x150>)
    3584:	683a      	ldr	r2, [r7, #0]
    3586:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    358a:	2301      	movs	r3, #1
    358c:	757b      	strb	r3, [r7, #21]
			break;
    358e:	e005      	b.n	359c <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    3590:	7dfb      	ldrb	r3, [r7, #23]
    3592:	3301      	adds	r3, #1
    3594:	75fb      	strb	r3, [r7, #23]
    3596:	7dfb      	ldrb	r3, [r7, #23]
    3598:	2b08      	cmp	r3, #8
    359a:	d9e9      	bls.n	3570 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    359c:	683b      	ldr	r3, [r7, #0]
    359e:	2b00      	cmp	r3, #0
    35a0:	d10e      	bne.n	35c0 <ext_irq_register+0x68>
		if (!found) {
    35a2:	7d7b      	ldrb	r3, [r7, #21]
    35a4:	f083 0301 	eor.w	r3, r3, #1
    35a8:	b2db      	uxtb	r3, r3
    35aa:	2b00      	cmp	r3, #0
    35ac:	d002      	beq.n	35b4 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    35ae:	f06f 030c 	mvn.w	r3, #12
    35b2:	e074      	b.n	369e <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    35b4:	2100      	movs	r1, #0
    35b6:	6878      	ldr	r0, [r7, #4]
    35b8:	4b3c      	ldr	r3, [pc, #240]	; (36ac <ext_irq_register+0x154>)
    35ba:	4798      	blx	r3
    35bc:	4603      	mov	r3, r0
    35be:	e06e      	b.n	369e <ext_irq_register+0x146>
	}

	if (!found) {
    35c0:	7d7b      	ldrb	r3, [r7, #21]
    35c2:	f083 0301 	eor.w	r3, r3, #1
    35c6:	b2db      	uxtb	r3, r3
    35c8:	2b00      	cmp	r3, #0
    35ca:	d05a      	beq.n	3682 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    35cc:	2300      	movs	r3, #0
    35ce:	75fb      	strb	r3, [r7, #23]
    35d0:	e016      	b.n	3600 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    35d2:	7dfb      	ldrb	r3, [r7, #23]
    35d4:	4a34      	ldr	r2, [pc, #208]	; (36a8 <ext_irq_register+0x150>)
    35d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    35da:	2b00      	cmp	r3, #0
    35dc:	d10d      	bne.n	35fa <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    35de:	7dfb      	ldrb	r3, [r7, #23]
    35e0:	4931      	ldr	r1, [pc, #196]	; (36a8 <ext_irq_register+0x150>)
    35e2:	683a      	ldr	r2, [r7, #0]
    35e4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    35e8:	7dfb      	ldrb	r3, [r7, #23]
    35ea:	4a2f      	ldr	r2, [pc, #188]	; (36a8 <ext_irq_register+0x150>)
    35ec:	00db      	lsls	r3, r3, #3
    35ee:	4413      	add	r3, r2
    35f0:	687a      	ldr	r2, [r7, #4]
    35f2:	605a      	str	r2, [r3, #4]
				found           = true;
    35f4:	2301      	movs	r3, #1
    35f6:	757b      	strb	r3, [r7, #21]
				break;
    35f8:	e005      	b.n	3606 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    35fa:	7dfb      	ldrb	r3, [r7, #23]
    35fc:	3301      	adds	r3, #1
    35fe:	75fb      	strb	r3, [r7, #23]
    3600:	7dfb      	ldrb	r3, [r7, #23]
    3602:	2b08      	cmp	r3, #8
    3604:	d9e5      	bls.n	35d2 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    3606:	e036      	b.n	3676 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    3608:	7dfb      	ldrb	r3, [r7, #23]
    360a:	4a27      	ldr	r2, [pc, #156]	; (36a8 <ext_irq_register+0x150>)
    360c:	00db      	lsls	r3, r3, #3
    360e:	4413      	add	r3, r2
    3610:	685a      	ldr	r2, [r3, #4]
    3612:	7dbb      	ldrb	r3, [r7, #22]
    3614:	4924      	ldr	r1, [pc, #144]	; (36a8 <ext_irq_register+0x150>)
    3616:	00db      	lsls	r3, r3, #3
    3618:	440b      	add	r3, r1
    361a:	685b      	ldr	r3, [r3, #4]
    361c:	429a      	cmp	r2, r3
    361e:	d227      	bcs.n	3670 <ext_irq_register+0x118>
    3620:	7dbb      	ldrb	r3, [r7, #22]
    3622:	4a21      	ldr	r2, [pc, #132]	; (36a8 <ext_irq_register+0x150>)
    3624:	00db      	lsls	r3, r3, #3
    3626:	4413      	add	r3, r2
    3628:	685b      	ldr	r3, [r3, #4]
    362a:	f1b3 3fff 	cmp.w	r3, #4294967295
    362e:	d01f      	beq.n	3670 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    3630:	7dbb      	ldrb	r3, [r7, #22]
    3632:	491d      	ldr	r1, [pc, #116]	; (36a8 <ext_irq_register+0x150>)
    3634:	f107 020c 	add.w	r2, r7, #12
    3638:	00db      	lsls	r3, r3, #3
    363a:	440b      	add	r3, r1
    363c:	e893 0003 	ldmia.w	r3, {r0, r1}
    3640:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    3644:	7dbb      	ldrb	r3, [r7, #22]
    3646:	7dfa      	ldrb	r2, [r7, #23]
    3648:	4817      	ldr	r0, [pc, #92]	; (36a8 <ext_irq_register+0x150>)
    364a:	4917      	ldr	r1, [pc, #92]	; (36a8 <ext_irq_register+0x150>)
    364c:	00db      	lsls	r3, r3, #3
    364e:	4403      	add	r3, r0
    3650:	00d2      	lsls	r2, r2, #3
    3652:	440a      	add	r2, r1
    3654:	e892 0003 	ldmia.w	r2, {r0, r1}
    3658:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    365c:	7dfb      	ldrb	r3, [r7, #23]
    365e:	4a12      	ldr	r2, [pc, #72]	; (36a8 <ext_irq_register+0x150>)
    3660:	00db      	lsls	r3, r3, #3
    3662:	4413      	add	r3, r2
    3664:	f107 020c 	add.w	r2, r7, #12
    3668:	e892 0003 	ldmia.w	r2, {r0, r1}
    366c:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    3670:	7dbb      	ldrb	r3, [r7, #22]
    3672:	3301      	adds	r3, #1
    3674:	75bb      	strb	r3, [r7, #22]
    3676:	7dbb      	ldrb	r3, [r7, #22]
    3678:	2b08      	cmp	r3, #8
    367a:	d802      	bhi.n	3682 <ext_irq_register+0x12a>
    367c:	7dfb      	ldrb	r3, [r7, #23]
    367e:	2b08      	cmp	r3, #8
    3680:	d9c2      	bls.n	3608 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    3682:	7d7b      	ldrb	r3, [r7, #21]
    3684:	f083 0301 	eor.w	r3, r3, #1
    3688:	b2db      	uxtb	r3, r3
    368a:	2b00      	cmp	r3, #0
    368c:	d002      	beq.n	3694 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    368e:	f06f 030c 	mvn.w	r3, #12
    3692:	e004      	b.n	369e <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    3694:	2101      	movs	r1, #1
    3696:	6878      	ldr	r0, [r7, #4]
    3698:	4b04      	ldr	r3, [pc, #16]	; (36ac <ext_irq_register+0x154>)
    369a:	4798      	blx	r3
    369c:	4603      	mov	r3, r0
}
    369e:	4618      	mov	r0, r3
    36a0:	3718      	adds	r7, #24
    36a2:	46bd      	mov	sp, r7
    36a4:	bd80      	pop	{r7, pc}
    36a6:	bf00      	nop
    36a8:	20000864 	.word	0x20000864
    36ac:	00005bcd 	.word	0x00005bcd

000036b0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    36b0:	b580      	push	{r7, lr}
    36b2:	b084      	sub	sp, #16
    36b4:	af00      	add	r7, sp, #0
    36b6:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    36b8:	2300      	movs	r3, #0
    36ba:	73fb      	strb	r3, [r7, #15]
    36bc:	2309      	movs	r3, #9
    36be:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    36c0:	e02a      	b.n	3718 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    36c2:	7bba      	ldrb	r2, [r7, #14]
    36c4:	7bfb      	ldrb	r3, [r7, #15]
    36c6:	4413      	add	r3, r2
    36c8:	105b      	asrs	r3, r3, #1
    36ca:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    36cc:	7b7b      	ldrb	r3, [r7, #13]
    36ce:	2b08      	cmp	r3, #8
    36d0:	d827      	bhi.n	3722 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    36d2:	7b7b      	ldrb	r3, [r7, #13]
    36d4:	4a16      	ldr	r2, [pc, #88]	; (3730 <process_ext_irq+0x80>)
    36d6:	00db      	lsls	r3, r3, #3
    36d8:	4413      	add	r3, r2
    36da:	685a      	ldr	r2, [r3, #4]
    36dc:	687b      	ldr	r3, [r7, #4]
    36de:	429a      	cmp	r2, r3
    36e0:	d10b      	bne.n	36fa <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    36e2:	7b7b      	ldrb	r3, [r7, #13]
    36e4:	4a12      	ldr	r2, [pc, #72]	; (3730 <process_ext_irq+0x80>)
    36e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d01b      	beq.n	3726 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    36ee:	7b7b      	ldrb	r3, [r7, #13]
    36f0:	4a0f      	ldr	r2, [pc, #60]	; (3730 <process_ext_irq+0x80>)
    36f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    36f6:	4798      	blx	r3
			}
			return;
    36f8:	e015      	b.n	3726 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    36fa:	7b7b      	ldrb	r3, [r7, #13]
    36fc:	4a0c      	ldr	r2, [pc, #48]	; (3730 <process_ext_irq+0x80>)
    36fe:	00db      	lsls	r3, r3, #3
    3700:	4413      	add	r3, r2
    3702:	685a      	ldr	r2, [r3, #4]
    3704:	687b      	ldr	r3, [r7, #4]
    3706:	429a      	cmp	r2, r3
    3708:	d203      	bcs.n	3712 <process_ext_irq+0x62>
			lower = middle + 1;
    370a:	7b7b      	ldrb	r3, [r7, #13]
    370c:	3301      	adds	r3, #1
    370e:	73fb      	strb	r3, [r7, #15]
    3710:	e002      	b.n	3718 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    3712:	7b7b      	ldrb	r3, [r7, #13]
    3714:	3b01      	subs	r3, #1
    3716:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    3718:	7bba      	ldrb	r2, [r7, #14]
    371a:	7bfb      	ldrb	r3, [r7, #15]
    371c:	429a      	cmp	r2, r3
    371e:	d2d0      	bcs.n	36c2 <process_ext_irq+0x12>
    3720:	e002      	b.n	3728 <process_ext_irq+0x78>
			return;
    3722:	bf00      	nop
    3724:	e000      	b.n	3728 <process_ext_irq+0x78>
			return;
    3726:	bf00      	nop
		}
	}
}
    3728:	3710      	adds	r7, #16
    372a:	46bd      	mov	sp, r7
    372c:	bd80      	pop	{r7, pc}
    372e:	bf00      	nop
    3730:	20000864 	.word	0x20000864

00003734 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    3734:	b580      	push	{r7, lr}
    3736:	b08a      	sub	sp, #40	; 0x28
    3738:	af00      	add	r7, sp, #0
    373a:	60f8      	str	r0, [r7, #12]
    373c:	60b9      	str	r1, [r7, #8]
    373e:	4613      	mov	r3, r2
    3740:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    3742:	68fb      	ldr	r3, [r7, #12]
    3744:	3b14      	subs	r3, #20
    3746:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    3748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    374a:	8b9b      	ldrh	r3, [r3, #28]
    374c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    374e:	88fb      	ldrh	r3, [r7, #6]
    3750:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    3752:	f248 0301 	movw	r3, #32769	; 0x8001
    3756:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    3758:	68bb      	ldr	r3, [r7, #8]
    375a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    375e:	f107 0214 	add.w	r2, r7, #20
    3762:	4611      	mov	r1, r2
    3764:	4618      	mov	r0, r3
    3766:	4b06      	ldr	r3, [pc, #24]	; (3780 <i2c_m_sync_read+0x4c>)
    3768:	4798      	blx	r3
    376a:	6238      	str	r0, [r7, #32]

	if (ret) {
    376c:	6a3b      	ldr	r3, [r7, #32]
    376e:	2b00      	cmp	r3, #0
    3770:	d001      	beq.n	3776 <i2c_m_sync_read+0x42>
		return ret;
    3772:	6a3b      	ldr	r3, [r7, #32]
    3774:	e000      	b.n	3778 <i2c_m_sync_read+0x44>
	}

	return n;
    3776:	88fb      	ldrh	r3, [r7, #6]
}
    3778:	4618      	mov	r0, r3
    377a:	3728      	adds	r7, #40	; 0x28
    377c:	46bd      	mov	sp, r7
    377e:	bd80      	pop	{r7, pc}
    3780:	00007aa1 	.word	0x00007aa1

00003784 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    3784:	b580      	push	{r7, lr}
    3786:	b08a      	sub	sp, #40	; 0x28
    3788:	af00      	add	r7, sp, #0
    378a:	60f8      	str	r0, [r7, #12]
    378c:	60b9      	str	r1, [r7, #8]
    378e:	4613      	mov	r3, r2
    3790:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    3792:	68fb      	ldr	r3, [r7, #12]
    3794:	3b14      	subs	r3, #20
    3796:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    3798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    379a:	8b9b      	ldrh	r3, [r3, #28]
    379c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    379e:	88fb      	ldrh	r3, [r7, #6]
    37a0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    37a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    37a6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    37a8:	68bb      	ldr	r3, [r7, #8]
    37aa:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    37ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37ae:	f107 0214 	add.w	r2, r7, #20
    37b2:	4611      	mov	r1, r2
    37b4:	4618      	mov	r0, r3
    37b6:	4b06      	ldr	r3, [pc, #24]	; (37d0 <i2c_m_sync_write+0x4c>)
    37b8:	4798      	blx	r3
    37ba:	6238      	str	r0, [r7, #32]

	if (ret) {
    37bc:	6a3b      	ldr	r3, [r7, #32]
    37be:	2b00      	cmp	r3, #0
    37c0:	d001      	beq.n	37c6 <i2c_m_sync_write+0x42>
		return ret;
    37c2:	6a3b      	ldr	r3, [r7, #32]
    37c4:	e000      	b.n	37c8 <i2c_m_sync_write+0x44>
	}

	return n;
    37c6:	88fb      	ldrh	r3, [r7, #6]
}
    37c8:	4618      	mov	r0, r3
    37ca:	3728      	adds	r7, #40	; 0x28
    37cc:	46bd      	mov	sp, r7
    37ce:	bd80      	pop	{r7, pc}
    37d0:	00007aa1 	.word	0x00007aa1

000037d4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    37d4:	b580      	push	{r7, lr}
    37d6:	b084      	sub	sp, #16
    37d8:	af00      	add	r7, sp, #0
    37da:	6078      	str	r0, [r7, #4]
    37dc:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    37de:	687b      	ldr	r3, [r7, #4]
    37e0:	2b00      	cmp	r3, #0
    37e2:	bf14      	ite	ne
    37e4:	2301      	movne	r3, #1
    37e6:	2300      	moveq	r3, #0
    37e8:	b2db      	uxtb	r3, r3
    37ea:	225e      	movs	r2, #94	; 0x5e
    37ec:	490c      	ldr	r1, [pc, #48]	; (3820 <i2c_m_sync_init+0x4c>)
    37ee:	4618      	mov	r0, r3
    37f0:	4b0c      	ldr	r3, [pc, #48]	; (3824 <i2c_m_sync_init+0x50>)
    37f2:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	6839      	ldr	r1, [r7, #0]
    37f8:	4618      	mov	r0, r3
    37fa:	4b0b      	ldr	r3, [pc, #44]	; (3828 <i2c_m_sync_init+0x54>)
    37fc:	4798      	blx	r3
    37fe:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    3800:	68fb      	ldr	r3, [r7, #12]
    3802:	2b00      	cmp	r3, #0
    3804:	d001      	beq.n	380a <i2c_m_sync_init+0x36>
		return init_status;
    3806:	68fb      	ldr	r3, [r7, #12]
    3808:	e006      	b.n	3818 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    380a:	687b      	ldr	r3, [r7, #4]
    380c:	4a07      	ldr	r2, [pc, #28]	; (382c <i2c_m_sync_init+0x58>)
    380e:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    3810:	687b      	ldr	r3, [r7, #4]
    3812:	4a07      	ldr	r2, [pc, #28]	; (3830 <i2c_m_sync_init+0x5c>)
    3814:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    3816:	2300      	movs	r3, #0
}
    3818:	4618      	mov	r0, r3
    381a:	3710      	adds	r7, #16
    381c:	46bd      	mov	sp, r7
    381e:	bd80      	pop	{r7, pc}
    3820:	00010c48 	.word	0x00010c48
    3824:	00004a95 	.word	0x00004a95
    3828:	0000789d 	.word	0x0000789d
    382c:	00003735 	.word	0x00003735
    3830:	00003785 	.word	0x00003785

00003834 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    3834:	b580      	push	{r7, lr}
    3836:	b082      	sub	sp, #8
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	4618      	mov	r0, r3
    3840:	4b03      	ldr	r3, [pc, #12]	; (3850 <i2c_m_sync_enable+0x1c>)
    3842:	4798      	blx	r3
    3844:	4603      	mov	r3, r0
}
    3846:	4618      	mov	r0, r3
    3848:	3708      	adds	r7, #8
    384a:	46bd      	mov	sp, r7
    384c:	bd80      	pop	{r7, pc}
    384e:	bf00      	nop
    3850:	000078e5 	.word	0x000078e5

00003854 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    3854:	b480      	push	{r7}
    3856:	b085      	sub	sp, #20
    3858:	af00      	add	r7, sp, #0
    385a:	60f8      	str	r0, [r7, #12]
    385c:	460b      	mov	r3, r1
    385e:	607a      	str	r2, [r7, #4]
    3860:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    3862:	897b      	ldrh	r3, [r7, #10]
    3864:	f3c3 0309 	ubfx	r3, r3, #0, #10
    3868:	b21a      	sxth	r2, r3
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	b21b      	sxth	r3, r3
    386e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3872:	b21b      	sxth	r3, r3
    3874:	4313      	orrs	r3, r2
    3876:	b21b      	sxth	r3, r3
    3878:	b29a      	uxth	r2, r3
    387a:	68fb      	ldr	r3, [r7, #12]
    387c:	839a      	strh	r2, [r3, #28]
    387e:	68fb      	ldr	r3, [r7, #12]
    3880:	8b9b      	ldrh	r3, [r3, #28]
}
    3882:	4618      	mov	r0, r3
    3884:	3714      	adds	r7, #20
    3886:	46bd      	mov	sp, r7
    3888:	f85d 7b04 	ldr.w	r7, [sp], #4
    388c:	4770      	bx	lr

0000388e <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    388e:	b480      	push	{r7}
    3890:	b083      	sub	sp, #12
    3892:	af00      	add	r7, sp, #0
    3894:	6078      	str	r0, [r7, #4]
    3896:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	f103 0214 	add.w	r2, r3, #20
    389e:	683b      	ldr	r3, [r7, #0]
    38a0:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    38a2:	2300      	movs	r3, #0
}
    38a4:	4618      	mov	r0, r3
    38a6:	370c      	adds	r7, #12
    38a8:	46bd      	mov	sp, r7
    38aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    38ae:	4770      	bx	lr

000038b0 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    38b0:	b580      	push	{r7, lr}
    38b2:	b084      	sub	sp, #16
    38b4:	af00      	add	r7, sp, #0
    38b6:	60f8      	str	r0, [r7, #12]
    38b8:	60b9      	str	r1, [r7, #8]
    38ba:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    38bc:	68fb      	ldr	r3, [r7, #12]
    38be:	2b00      	cmp	r3, #0
    38c0:	d004      	beq.n	38cc <pwm_init+0x1c>
    38c2:	68bb      	ldr	r3, [r7, #8]
    38c4:	2b00      	cmp	r3, #0
    38c6:	d001      	beq.n	38cc <pwm_init+0x1c>
    38c8:	2301      	movs	r3, #1
    38ca:	e000      	b.n	38ce <pwm_init+0x1e>
    38cc:	2300      	movs	r3, #0
    38ce:	f003 0301 	and.w	r3, r3, #1
    38d2:	b2db      	uxtb	r3, r3
    38d4:	2233      	movs	r2, #51	; 0x33
    38d6:	490a      	ldr	r1, [pc, #40]	; (3900 <pwm_init+0x50>)
    38d8:	4618      	mov	r0, r3
    38da:	4b0a      	ldr	r3, [pc, #40]	; (3904 <pwm_init+0x54>)
    38dc:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    38de:	68fb      	ldr	r3, [r7, #12]
    38e0:	68b9      	ldr	r1, [r7, #8]
    38e2:	4618      	mov	r0, r3
    38e4:	4b08      	ldr	r3, [pc, #32]	; (3908 <pwm_init+0x58>)
    38e6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    38e8:	68fb      	ldr	r3, [r7, #12]
    38ea:	4a08      	ldr	r2, [pc, #32]	; (390c <pwm_init+0x5c>)
    38ec:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    38ee:	68fb      	ldr	r3, [r7, #12]
    38f0:	4a07      	ldr	r2, [pc, #28]	; (3910 <pwm_init+0x60>)
    38f2:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    38f4:	2300      	movs	r3, #0
}
    38f6:	4618      	mov	r0, r3
    38f8:	3710      	adds	r7, #16
    38fa:	46bd      	mov	sp, r7
    38fc:	bd80      	pop	{r7, pc}
    38fe:	bf00      	nop
    3900:	00010c64 	.word	0x00010c64
    3904:	00004a95 	.word	0x00004a95
    3908:	00009031 	.word	0x00009031
    390c:	00003969 	.word	0x00003969
    3910:	0000398d 	.word	0x0000398d

00003914 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    3914:	b580      	push	{r7, lr}
    3916:	b082      	sub	sp, #8
    3918:	af00      	add	r7, sp, #0
    391a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    391c:	687b      	ldr	r3, [r7, #4]
    391e:	2b00      	cmp	r3, #0
    3920:	bf14      	ite	ne
    3922:	2301      	movne	r3, #1
    3924:	2300      	moveq	r3, #0
    3926:	b2db      	uxtb	r3, r3
    3928:	224a      	movs	r2, #74	; 0x4a
    392a:	490b      	ldr	r1, [pc, #44]	; (3958 <pwm_enable+0x44>)
    392c:	4618      	mov	r0, r3
    392e:	4b0b      	ldr	r3, [pc, #44]	; (395c <pwm_enable+0x48>)
    3930:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    3932:	687b      	ldr	r3, [r7, #4]
    3934:	4618      	mov	r0, r3
    3936:	4b0a      	ldr	r3, [pc, #40]	; (3960 <pwm_enable+0x4c>)
    3938:	4798      	blx	r3
    393a:	4603      	mov	r3, r0
    393c:	2b00      	cmp	r3, #0
    393e:	d002      	beq.n	3946 <pwm_enable+0x32>
		return ERR_DENIED;
    3940:	f06f 0310 	mvn.w	r3, #16
    3944:	e004      	b.n	3950 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    3946:	687b      	ldr	r3, [r7, #4]
    3948:	4618      	mov	r0, r3
    394a:	4b06      	ldr	r3, [pc, #24]	; (3964 <pwm_enable+0x50>)
    394c:	4798      	blx	r3

	return ERR_NONE;
    394e:	2300      	movs	r3, #0
}
    3950:	4618      	mov	r0, r3
    3952:	3708      	adds	r7, #8
    3954:	46bd      	mov	sp, r7
    3956:	bd80      	pop	{r7, pc}
    3958:	00010c64 	.word	0x00010c64
    395c:	00004a95 	.word	0x00004a95
    3960:	00009421 	.word	0x00009421
    3964:	000092dd 	.word	0x000092dd

00003968 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    3968:	b580      	push	{r7, lr}
    396a:	b084      	sub	sp, #16
    396c:	af00      	add	r7, sp, #0
    396e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3970:	687b      	ldr	r3, [r7, #4]
    3972:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    3974:	68fb      	ldr	r3, [r7, #12]
    3976:	695b      	ldr	r3, [r3, #20]
    3978:	2b00      	cmp	r3, #0
    397a:	d003      	beq.n	3984 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    397c:	68fb      	ldr	r3, [r7, #12]
    397e:	695b      	ldr	r3, [r3, #20]
    3980:	68f8      	ldr	r0, [r7, #12]
    3982:	4798      	blx	r3
	}
}
    3984:	bf00      	nop
    3986:	3710      	adds	r7, #16
    3988:	46bd      	mov	sp, r7
    398a:	bd80      	pop	{r7, pc}

0000398c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    398c:	b580      	push	{r7, lr}
    398e:	b084      	sub	sp, #16
    3990:	af00      	add	r7, sp, #0
    3992:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3994:	687b      	ldr	r3, [r7, #4]
    3996:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    3998:	68fb      	ldr	r3, [r7, #12]
    399a:	699b      	ldr	r3, [r3, #24]
    399c:	2b00      	cmp	r3, #0
    399e:	d003      	beq.n	39a8 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    39a0:	68fb      	ldr	r3, [r7, #12]
    39a2:	699b      	ldr	r3, [r3, #24]
    39a4:	68f8      	ldr	r0, [r7, #12]
    39a6:	4798      	blx	r3
	}
}
    39a8:	bf00      	nop
    39aa:	3710      	adds	r7, #16
    39ac:	46bd      	mov	sp, r7
    39ae:	bd80      	pop	{r7, pc}

000039b0 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    39b0:	b580      	push	{r7, lr}
    39b2:	b082      	sub	sp, #8
    39b4:	af00      	add	r7, sp, #0
    39b6:	6078      	str	r0, [r7, #4]
    39b8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    39ba:	687b      	ldr	r3, [r7, #4]
    39bc:	2b00      	cmp	r3, #0
    39be:	d004      	beq.n	39ca <qspi_sync_init+0x1a>
    39c0:	683b      	ldr	r3, [r7, #0]
    39c2:	2b00      	cmp	r3, #0
    39c4:	d001      	beq.n	39ca <qspi_sync_init+0x1a>
    39c6:	2301      	movs	r3, #1
    39c8:	e000      	b.n	39cc <qspi_sync_init+0x1c>
    39ca:	2300      	movs	r3, #0
    39cc:	f003 0301 	and.w	r3, r3, #1
    39d0:	b2db      	uxtb	r3, r3
    39d2:	2231      	movs	r2, #49	; 0x31
    39d4:	4906      	ldr	r1, [pc, #24]	; (39f0 <qspi_sync_init+0x40>)
    39d6:	4618      	mov	r0, r3
    39d8:	4b06      	ldr	r3, [pc, #24]	; (39f4 <qspi_sync_init+0x44>)
    39da:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    39dc:	687b      	ldr	r3, [r7, #4]
    39de:	6839      	ldr	r1, [r7, #0]
    39e0:	4618      	mov	r0, r3
    39e2:	4b05      	ldr	r3, [pc, #20]	; (39f8 <qspi_sync_init+0x48>)
    39e4:	4798      	blx	r3
    39e6:	4603      	mov	r3, r0
}
    39e8:	4618      	mov	r0, r3
    39ea:	3708      	adds	r7, #8
    39ec:	46bd      	mov	sp, r7
    39ee:	bd80      	pop	{r7, pc}
    39f0:	00010c7c 	.word	0x00010c7c
    39f4:	00004a95 	.word	0x00004a95
    39f8:	00006a7d 	.word	0x00006a7d

000039fc <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    39fc:	b580      	push	{r7, lr}
    39fe:	b082      	sub	sp, #8
    3a00:	af00      	add	r7, sp, #0
    3a02:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3a04:	687b      	ldr	r3, [r7, #4]
    3a06:	2b00      	cmp	r3, #0
    3a08:	bf14      	ite	ne
    3a0a:	2301      	movne	r3, #1
    3a0c:	2300      	moveq	r3, #0
    3a0e:	b2db      	uxtb	r3, r3
    3a10:	223f      	movs	r2, #63	; 0x3f
    3a12:	4906      	ldr	r1, [pc, #24]	; (3a2c <qspi_sync_enable+0x30>)
    3a14:	4618      	mov	r0, r3
    3a16:	4b06      	ldr	r3, [pc, #24]	; (3a30 <qspi_sync_enable+0x34>)
    3a18:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	4618      	mov	r0, r3
    3a1e:	4b05      	ldr	r3, [pc, #20]	; (3a34 <qspi_sync_enable+0x38>)
    3a20:	4798      	blx	r3
    3a22:	4603      	mov	r3, r0
}
    3a24:	4618      	mov	r0, r3
    3a26:	3708      	adds	r7, #8
    3a28:	46bd      	mov	sp, r7
    3a2a:	bd80      	pop	{r7, pc}
    3a2c:	00010c7c 	.word	0x00010c7c
    3a30:	00004a95 	.word	0x00004a95
    3a34:	00006af1 	.word	0x00006af1

00003a38 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    3a38:	b580      	push	{r7, lr}
    3a3a:	b082      	sub	sp, #8
    3a3c:	af00      	add	r7, sp, #0
    3a3e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3a40:	687b      	ldr	r3, [r7, #4]
    3a42:	2b00      	cmp	r3, #0
    3a44:	bf14      	ite	ne
    3a46:	2301      	movne	r3, #1
    3a48:	2300      	moveq	r3, #0
    3a4a:	b2db      	uxtb	r3, r3
    3a4c:	2246      	movs	r2, #70	; 0x46
    3a4e:	4906      	ldr	r1, [pc, #24]	; (3a68 <qspi_sync_disable+0x30>)
    3a50:	4618      	mov	r0, r3
    3a52:	4b06      	ldr	r3, [pc, #24]	; (3a6c <qspi_sync_disable+0x34>)
    3a54:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    3a56:	687b      	ldr	r3, [r7, #4]
    3a58:	4618      	mov	r0, r3
    3a5a:	4b05      	ldr	r3, [pc, #20]	; (3a70 <qspi_sync_disable+0x38>)
    3a5c:	4798      	blx	r3
    3a5e:	4603      	mov	r3, r0
}
    3a60:	4618      	mov	r0, r3
    3a62:	3708      	adds	r7, #8
    3a64:	46bd      	mov	sp, r7
    3a66:	bd80      	pop	{r7, pc}
    3a68:	00010c7c 	.word	0x00010c7c
    3a6c:	00004a95 	.word	0x00004a95
    3a70:	00006b15 	.word	0x00006b15

00003a74 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    3a74:	b580      	push	{r7, lr}
    3a76:	b082      	sub	sp, #8
    3a78:	af00      	add	r7, sp, #0
    3a7a:	6078      	str	r0, [r7, #4]
    3a7c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    3a7e:	687b      	ldr	r3, [r7, #4]
    3a80:	2b00      	cmp	r3, #0
    3a82:	d004      	beq.n	3a8e <qspi_sync_serial_run_command+0x1a>
    3a84:	683b      	ldr	r3, [r7, #0]
    3a86:	2b00      	cmp	r3, #0
    3a88:	d001      	beq.n	3a8e <qspi_sync_serial_run_command+0x1a>
    3a8a:	2301      	movs	r3, #1
    3a8c:	e000      	b.n	3a90 <qspi_sync_serial_run_command+0x1c>
    3a8e:	2300      	movs	r3, #0
    3a90:	f003 0301 	and.w	r3, r3, #1
    3a94:	b2db      	uxtb	r3, r3
    3a96:	224d      	movs	r2, #77	; 0x4d
    3a98:	4906      	ldr	r1, [pc, #24]	; (3ab4 <qspi_sync_serial_run_command+0x40>)
    3a9a:	4618      	mov	r0, r3
    3a9c:	4b06      	ldr	r3, [pc, #24]	; (3ab8 <qspi_sync_serial_run_command+0x44>)
    3a9e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    3aa0:	687b      	ldr	r3, [r7, #4]
    3aa2:	6839      	ldr	r1, [r7, #0]
    3aa4:	4618      	mov	r0, r3
    3aa6:	4b05      	ldr	r3, [pc, #20]	; (3abc <qspi_sync_serial_run_command+0x48>)
    3aa8:	4798      	blx	r3
    3aaa:	4603      	mov	r3, r0
}
    3aac:	4618      	mov	r0, r3
    3aae:	3708      	adds	r7, #8
    3ab0:	46bd      	mov	sp, r7
    3ab2:	bd80      	pop	{r7, pc}
    3ab4:	00010c7c 	.word	0x00010c7c
    3ab8:	00004a95 	.word	0x00004a95
    3abc:	00006c61 	.word	0x00006c61

00003ac0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    3ac0:	b580      	push	{r7, lr}
    3ac2:	b084      	sub	sp, #16
    3ac4:	af00      	add	r7, sp, #0
    3ac6:	6078      	str	r0, [r7, #4]
    3ac8:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    3aca:	2300      	movs	r3, #0
    3acc:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    3ace:	687b      	ldr	r3, [r7, #4]
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d004      	beq.n	3ade <spi_m_sync_init+0x1e>
    3ad4:	683b      	ldr	r3, [r7, #0]
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d001      	beq.n	3ade <spi_m_sync_init+0x1e>
    3ada:	2301      	movs	r3, #1
    3adc:	e000      	b.n	3ae0 <spi_m_sync_init+0x20>
    3ade:	2300      	movs	r3, #0
    3ae0:	f003 0301 	and.w	r3, r3, #1
    3ae4:	b2db      	uxtb	r3, r3
    3ae6:	2240      	movs	r2, #64	; 0x40
    3ae8:	4910      	ldr	r1, [pc, #64]	; (3b2c <spi_m_sync_init+0x6c>)
    3aea:	4618      	mov	r0, r3
    3aec:	4b10      	ldr	r3, [pc, #64]	; (3b30 <spi_m_sync_init+0x70>)
    3aee:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    3af0:	687b      	ldr	r3, [r7, #4]
    3af2:	683a      	ldr	r2, [r7, #0]
    3af4:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    3af6:	687b      	ldr	r3, [r7, #4]
    3af8:	3304      	adds	r3, #4
    3afa:	6839      	ldr	r1, [r7, #0]
    3afc:	4618      	mov	r0, r3
    3afe:	4b0d      	ldr	r3, [pc, #52]	; (3b34 <spi_m_sync_init+0x74>)
    3b00:	4798      	blx	r3
    3b02:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    3b04:	68fb      	ldr	r3, [r7, #12]
    3b06:	2b00      	cmp	r3, #0
    3b08:	da01      	bge.n	3b0e <spi_m_sync_init+0x4e>
		return rc;
    3b0a:	68fb      	ldr	r3, [r7, #12]
    3b0c:	e00a      	b.n	3b24 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    3b0e:	687b      	ldr	r3, [r7, #4]
    3b10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3b14:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    3b16:	687b      	ldr	r3, [r7, #4]
    3b18:	4a07      	ldr	r2, [pc, #28]	; (3b38 <spi_m_sync_init+0x78>)
    3b1a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    3b1c:	687b      	ldr	r3, [r7, #4]
    3b1e:	4a07      	ldr	r2, [pc, #28]	; (3b3c <spi_m_sync_init+0x7c>)
    3b20:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3b22:	2300      	movs	r3, #0
}
    3b24:	4618      	mov	r0, r3
    3b26:	3710      	adds	r7, #16
    3b28:	46bd      	mov	sp, r7
    3b2a:	bd80      	pop	{r7, pc}
    3b2c:	00010c98 	.word	0x00010c98
    3b30:	00004a95 	.word	0x00004a95
    3b34:	00007f35 	.word	0x00007f35
    3b38:	00003b41 	.word	0x00003b41
    3b3c:	00003b99 	.word	0x00003b99

00003b40 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    3b40:	b580      	push	{r7, lr}
    3b42:	b088      	sub	sp, #32
    3b44:	af00      	add	r7, sp, #0
    3b46:	60f8      	str	r0, [r7, #12]
    3b48:	60b9      	str	r1, [r7, #8]
    3b4a:	4613      	mov	r3, r2
    3b4c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3b4e:	68fb      	ldr	r3, [r7, #12]
    3b50:	2b00      	cmp	r3, #0
    3b52:	bf14      	ite	ne
    3b54:	2301      	movne	r3, #1
    3b56:	2300      	moveq	r3, #0
    3b58:	b2db      	uxtb	r3, r3
    3b5a:	2287      	movs	r2, #135	; 0x87
    3b5c:	490b      	ldr	r1, [pc, #44]	; (3b8c <_spi_m_sync_io_read+0x4c>)
    3b5e:	4618      	mov	r0, r3
    3b60:	4b0b      	ldr	r3, [pc, #44]	; (3b90 <_spi_m_sync_io_read+0x50>)
    3b62:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3b64:	68fb      	ldr	r3, [r7, #12]
    3b66:	3b0c      	subs	r3, #12
    3b68:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    3b6a:	68bb      	ldr	r3, [r7, #8]
    3b6c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    3b6e:	2300      	movs	r3, #0
    3b70:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    3b72:	88fb      	ldrh	r3, [r7, #6]
    3b74:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3b76:	f107 0310 	add.w	r3, r7, #16
    3b7a:	4619      	mov	r1, r3
    3b7c:	69f8      	ldr	r0, [r7, #28]
    3b7e:	4b05      	ldr	r3, [pc, #20]	; (3b94 <_spi_m_sync_io_read+0x54>)
    3b80:	4798      	blx	r3
    3b82:	4603      	mov	r3, r0
}
    3b84:	4618      	mov	r0, r3
    3b86:	3720      	adds	r7, #32
    3b88:	46bd      	mov	sp, r7
    3b8a:	bd80      	pop	{r7, pc}
    3b8c:	00010c98 	.word	0x00010c98
    3b90:	00004a95 	.word	0x00004a95
    3b94:	00003bf1 	.word	0x00003bf1

00003b98 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    3b98:	b580      	push	{r7, lr}
    3b9a:	b088      	sub	sp, #32
    3b9c:	af00      	add	r7, sp, #0
    3b9e:	60f8      	str	r0, [r7, #12]
    3ba0:	60b9      	str	r1, [r7, #8]
    3ba2:	4613      	mov	r3, r2
    3ba4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3ba6:	68fb      	ldr	r3, [r7, #12]
    3ba8:	2b00      	cmp	r3, #0
    3baa:	bf14      	ite	ne
    3bac:	2301      	movne	r3, #1
    3bae:	2300      	moveq	r3, #0
    3bb0:	b2db      	uxtb	r3, r3
    3bb2:	22a3      	movs	r2, #163	; 0xa3
    3bb4:	490b      	ldr	r1, [pc, #44]	; (3be4 <_spi_m_sync_io_write+0x4c>)
    3bb6:	4618      	mov	r0, r3
    3bb8:	4b0b      	ldr	r3, [pc, #44]	; (3be8 <_spi_m_sync_io_write+0x50>)
    3bba:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3bbc:	68fb      	ldr	r3, [r7, #12]
    3bbe:	3b0c      	subs	r3, #12
    3bc0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    3bc2:	2300      	movs	r3, #0
    3bc4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    3bc6:	68bb      	ldr	r3, [r7, #8]
    3bc8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    3bca:	88fb      	ldrh	r3, [r7, #6]
    3bcc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3bce:	f107 0310 	add.w	r3, r7, #16
    3bd2:	4619      	mov	r1, r3
    3bd4:	69f8      	ldr	r0, [r7, #28]
    3bd6:	4b05      	ldr	r3, [pc, #20]	; (3bec <_spi_m_sync_io_write+0x54>)
    3bd8:	4798      	blx	r3
    3bda:	4603      	mov	r3, r0
}
    3bdc:	4618      	mov	r0, r3
    3bde:	3720      	adds	r7, #32
    3be0:	46bd      	mov	sp, r7
    3be2:	bd80      	pop	{r7, pc}
    3be4:	00010c98 	.word	0x00010c98
    3be8:	00004a95 	.word	0x00004a95
    3bec:	00003bf1 	.word	0x00003bf1

00003bf0 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    3bf0:	b580      	push	{r7, lr}
    3bf2:	b086      	sub	sp, #24
    3bf4:	af00      	add	r7, sp, #0
    3bf6:	6078      	str	r0, [r7, #4]
    3bf8:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    3bfa:	687b      	ldr	r3, [r7, #4]
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d004      	beq.n	3c0a <spi_m_sync_transfer+0x1a>
    3c00:	683b      	ldr	r3, [r7, #0]
    3c02:	2b00      	cmp	r3, #0
    3c04:	d001      	beq.n	3c0a <spi_m_sync_transfer+0x1a>
    3c06:	2301      	movs	r3, #1
    3c08:	e000      	b.n	3c0c <spi_m_sync_transfer+0x1c>
    3c0a:	2300      	movs	r3, #0
    3c0c:	f003 0301 	and.w	r3, r3, #1
    3c10:	b2db      	uxtb	r3, r3
    3c12:	22b3      	movs	r2, #179	; 0xb3
    3c14:	490c      	ldr	r1, [pc, #48]	; (3c48 <spi_m_sync_transfer+0x58>)
    3c16:	4618      	mov	r0, r3
    3c18:	4b0c      	ldr	r3, [pc, #48]	; (3c4c <spi_m_sync_transfer+0x5c>)
    3c1a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    3c1c:	683b      	ldr	r3, [r7, #0]
    3c1e:	681b      	ldr	r3, [r3, #0]
    3c20:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    3c22:	683b      	ldr	r3, [r7, #0]
    3c24:	685b      	ldr	r3, [r3, #4]
    3c26:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    3c28:	683b      	ldr	r3, [r7, #0]
    3c2a:	689b      	ldr	r3, [r3, #8]
    3c2c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    3c2e:	687b      	ldr	r3, [r7, #4]
    3c30:	3304      	adds	r3, #4
    3c32:	f107 020c 	add.w	r2, r7, #12
    3c36:	4611      	mov	r1, r2
    3c38:	4618      	mov	r0, r3
    3c3a:	4b05      	ldr	r3, [pc, #20]	; (3c50 <spi_m_sync_transfer+0x60>)
    3c3c:	4798      	blx	r3
    3c3e:	4603      	mov	r3, r0
}
    3c40:	4618      	mov	r0, r3
    3c42:	3718      	adds	r7, #24
    3c44:	46bd      	mov	sp, r7
    3c46:	bd80      	pop	{r7, pc}
    3c48:	00010c98 	.word	0x00010c98
    3c4c:	00004a95 	.word	0x00004a95
    3c50:	00008195 	.word	0x00008195

00003c54 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    3c54:	b480      	push	{r7}
    3c56:	b083      	sub	sp, #12
    3c58:	af00      	add	r7, sp, #0
    3c5a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    3c5c:	687b      	ldr	r3, [r7, #4]
    3c5e:	681b      	ldr	r3, [r3, #0]
}
    3c60:	4618      	mov	r0, r3
    3c62:	370c      	adds	r7, #12
    3c64:	46bd      	mov	sp, r7
    3c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c6a:	4770      	bx	lr

00003c6c <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    3c6c:	b480      	push	{r7}
    3c6e:	b083      	sub	sp, #12
    3c70:	af00      	add	r7, sp, #0
    3c72:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    3c74:	687b      	ldr	r3, [r7, #4]
    3c76:	2b00      	cmp	r3, #0
    3c78:	d002      	beq.n	3c80 <list_get_next_element+0x14>
    3c7a:	687b      	ldr	r3, [r7, #4]
    3c7c:	681b      	ldr	r3, [r3, #0]
    3c7e:	e000      	b.n	3c82 <list_get_next_element+0x16>
    3c80:	2300      	movs	r3, #0
}
    3c82:	4618      	mov	r0, r3
    3c84:	370c      	adds	r7, #12
    3c86:	46bd      	mov	sp, r7
    3c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c8c:	4770      	bx	lr
	...

00003c90 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    3c90:	b580      	push	{r7, lr}
    3c92:	b084      	sub	sp, #16
    3c94:	af00      	add	r7, sp, #0
    3c96:	60f8      	str	r0, [r7, #12]
    3c98:	60b9      	str	r1, [r7, #8]
    3c9a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    3c9c:	68fb      	ldr	r3, [r7, #12]
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	d007      	beq.n	3cb2 <timer_init+0x22>
    3ca2:	68bb      	ldr	r3, [r7, #8]
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d004      	beq.n	3cb2 <timer_init+0x22>
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	2b00      	cmp	r3, #0
    3cac:	d001      	beq.n	3cb2 <timer_init+0x22>
    3cae:	2301      	movs	r3, #1
    3cb0:	e000      	b.n	3cb4 <timer_init+0x24>
    3cb2:	2300      	movs	r3, #0
    3cb4:	f003 0301 	and.w	r3, r3, #1
    3cb8:	b2db      	uxtb	r3, r3
    3cba:	223b      	movs	r2, #59	; 0x3b
    3cbc:	490c      	ldr	r1, [pc, #48]	; (3cf0 <timer_init+0x60>)
    3cbe:	4618      	mov	r0, r3
    3cc0:	4b0c      	ldr	r3, [pc, #48]	; (3cf4 <timer_init+0x64>)
    3cc2:	4798      	blx	r3
	descr->func = func;
    3cc4:	68fb      	ldr	r3, [r7, #12]
    3cc6:	687a      	ldr	r2, [r7, #4]
    3cc8:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    3cca:	68fb      	ldr	r3, [r7, #12]
    3ccc:	681b      	ldr	r3, [r3, #0]
    3cce:	681b      	ldr	r3, [r3, #0]
    3cd0:	68fa      	ldr	r2, [r7, #12]
    3cd2:	3204      	adds	r2, #4
    3cd4:	68b9      	ldr	r1, [r7, #8]
    3cd6:	4610      	mov	r0, r2
    3cd8:	4798      	blx	r3
	descr->time                           = 0;
    3cda:	68fb      	ldr	r3, [r7, #12]
    3cdc:	2200      	movs	r2, #0
    3cde:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    3ce0:	68fb      	ldr	r3, [r7, #12]
    3ce2:	4a05      	ldr	r2, [pc, #20]	; (3cf8 <timer_init+0x68>)
    3ce4:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    3ce6:	2300      	movs	r3, #0
}
    3ce8:	4618      	mov	r0, r3
    3cea:	3710      	adds	r7, #16
    3cec:	46bd      	mov	sp, r7
    3cee:	bd80      	pop	{r7, pc}
    3cf0:	00010cb4 	.word	0x00010cb4
    3cf4:	00004a95 	.word	0x00004a95
    3cf8:	00004081 	.word	0x00004081

00003cfc <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    3cfc:	b580      	push	{r7, lr}
    3cfe:	b082      	sub	sp, #8
    3d00:	af00      	add	r7, sp, #0
    3d02:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3d04:	687b      	ldr	r3, [r7, #4]
    3d06:	2b00      	cmp	r3, #0
    3d08:	d005      	beq.n	3d16 <timer_start+0x1a>
    3d0a:	687b      	ldr	r3, [r7, #4]
    3d0c:	681b      	ldr	r3, [r3, #0]
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d001      	beq.n	3d16 <timer_start+0x1a>
    3d12:	2301      	movs	r3, #1
    3d14:	e000      	b.n	3d18 <timer_start+0x1c>
    3d16:	2300      	movs	r3, #0
    3d18:	f003 0301 	and.w	r3, r3, #1
    3d1c:	b2db      	uxtb	r3, r3
    3d1e:	2254      	movs	r2, #84	; 0x54
    3d20:	490e      	ldr	r1, [pc, #56]	; (3d5c <timer_start+0x60>)
    3d22:	4618      	mov	r0, r3
    3d24:	4b0e      	ldr	r3, [pc, #56]	; (3d60 <timer_start+0x64>)
    3d26:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    3d28:	687b      	ldr	r3, [r7, #4]
    3d2a:	681b      	ldr	r3, [r3, #0]
    3d2c:	699b      	ldr	r3, [r3, #24]
    3d2e:	687a      	ldr	r2, [r7, #4]
    3d30:	3204      	adds	r2, #4
    3d32:	4610      	mov	r0, r2
    3d34:	4798      	blx	r3
    3d36:	4603      	mov	r3, r0
    3d38:	2b00      	cmp	r3, #0
    3d3a:	d002      	beq.n	3d42 <timer_start+0x46>
		return ERR_DENIED;
    3d3c:	f06f 0310 	mvn.w	r3, #16
    3d40:	e007      	b.n	3d52 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    3d42:	687b      	ldr	r3, [r7, #4]
    3d44:	681b      	ldr	r3, [r3, #0]
    3d46:	689b      	ldr	r3, [r3, #8]
    3d48:	687a      	ldr	r2, [r7, #4]
    3d4a:	3204      	adds	r2, #4
    3d4c:	4610      	mov	r0, r2
    3d4e:	4798      	blx	r3

	return ERR_NONE;
    3d50:	2300      	movs	r3, #0
}
    3d52:	4618      	mov	r0, r3
    3d54:	3708      	adds	r7, #8
    3d56:	46bd      	mov	sp, r7
    3d58:	bd80      	pop	{r7, pc}
    3d5a:	bf00      	nop
    3d5c:	00010cb4 	.word	0x00010cb4
    3d60:	00004a95 	.word	0x00004a95

00003d64 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    3d64:	b580      	push	{r7, lr}
    3d66:	b082      	sub	sp, #8
    3d68:	af00      	add	r7, sp, #0
    3d6a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3d6c:	687b      	ldr	r3, [r7, #4]
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d005      	beq.n	3d7e <timer_stop+0x1a>
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	681b      	ldr	r3, [r3, #0]
    3d76:	2b00      	cmp	r3, #0
    3d78:	d001      	beq.n	3d7e <timer_stop+0x1a>
    3d7a:	2301      	movs	r3, #1
    3d7c:	e000      	b.n	3d80 <timer_stop+0x1c>
    3d7e:	2300      	movs	r3, #0
    3d80:	f003 0301 	and.w	r3, r3, #1
    3d84:	b2db      	uxtb	r3, r3
    3d86:	2262      	movs	r2, #98	; 0x62
    3d88:	490f      	ldr	r1, [pc, #60]	; (3dc8 <timer_stop+0x64>)
    3d8a:	4618      	mov	r0, r3
    3d8c:	4b0f      	ldr	r3, [pc, #60]	; (3dcc <timer_stop+0x68>)
    3d8e:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    3d90:	687b      	ldr	r3, [r7, #4]
    3d92:	681b      	ldr	r3, [r3, #0]
    3d94:	699b      	ldr	r3, [r3, #24]
    3d96:	687a      	ldr	r2, [r7, #4]
    3d98:	3204      	adds	r2, #4
    3d9a:	4610      	mov	r0, r2
    3d9c:	4798      	blx	r3
    3d9e:	4603      	mov	r3, r0
    3da0:	f083 0301 	eor.w	r3, r3, #1
    3da4:	b2db      	uxtb	r3, r3
    3da6:	2b00      	cmp	r3, #0
    3da8:	d002      	beq.n	3db0 <timer_stop+0x4c>
		return ERR_DENIED;
    3daa:	f06f 0310 	mvn.w	r3, #16
    3dae:	e007      	b.n	3dc0 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    3db0:	687b      	ldr	r3, [r7, #4]
    3db2:	681b      	ldr	r3, [r3, #0]
    3db4:	68db      	ldr	r3, [r3, #12]
    3db6:	687a      	ldr	r2, [r7, #4]
    3db8:	3204      	adds	r2, #4
    3dba:	4610      	mov	r0, r2
    3dbc:	4798      	blx	r3

	return ERR_NONE;
    3dbe:	2300      	movs	r3, #0
}
    3dc0:	4618      	mov	r0, r3
    3dc2:	3708      	adds	r7, #8
    3dc4:	46bd      	mov	sp, r7
    3dc6:	bd80      	pop	{r7, pc}
    3dc8:	00010cb4 	.word	0x00010cb4
    3dcc:	00004a95 	.word	0x00004a95

00003dd0 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    3dd0:	b580      	push	{r7, lr}
    3dd2:	b084      	sub	sp, #16
    3dd4:	af00      	add	r7, sp, #0
    3dd6:	6078      	str	r0, [r7, #4]
    3dd8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    3dda:	687b      	ldr	r3, [r7, #4]
    3ddc:	2b00      	cmp	r3, #0
    3dde:	d008      	beq.n	3df2 <timer_add_task+0x22>
    3de0:	683b      	ldr	r3, [r7, #0]
    3de2:	2b00      	cmp	r3, #0
    3de4:	d005      	beq.n	3df2 <timer_add_task+0x22>
    3de6:	687b      	ldr	r3, [r7, #4]
    3de8:	681b      	ldr	r3, [r3, #0]
    3dea:	2b00      	cmp	r3, #0
    3dec:	d001      	beq.n	3df2 <timer_add_task+0x22>
    3dee:	2301      	movs	r3, #1
    3df0:	e000      	b.n	3df4 <timer_add_task+0x24>
    3df2:	2300      	movs	r3, #0
    3df4:	f003 0301 	and.w	r3, r3, #1
    3df8:	b2db      	uxtb	r3, r3
    3dfa:	227b      	movs	r2, #123	; 0x7b
    3dfc:	492f      	ldr	r1, [pc, #188]	; (3ebc <timer_add_task+0xec>)
    3dfe:	4618      	mov	r0, r3
    3e00:	4b2f      	ldr	r3, [pc, #188]	; (3ec0 <timer_add_task+0xf0>)
    3e02:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3e04:	687b      	ldr	r3, [r7, #4]
    3e06:	7f1b      	ldrb	r3, [r3, #28]
    3e08:	b2db      	uxtb	r3, r3
    3e0a:	f043 0301 	orr.w	r3, r3, #1
    3e0e:	b2da      	uxtb	r2, r3
    3e10:	687b      	ldr	r3, [r7, #4]
    3e12:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    3e14:	687b      	ldr	r3, [r7, #4]
    3e16:	3318      	adds	r3, #24
    3e18:	6839      	ldr	r1, [r7, #0]
    3e1a:	4618      	mov	r0, r3
    3e1c:	4b29      	ldr	r3, [pc, #164]	; (3ec4 <timer_add_task+0xf4>)
    3e1e:	4798      	blx	r3
    3e20:	4603      	mov	r3, r0
    3e22:	2b00      	cmp	r3, #0
    3e24:	d00f      	beq.n	3e46 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	7f1b      	ldrb	r3, [r3, #28]
    3e2a:	b2db      	uxtb	r3, r3
    3e2c:	f023 0301 	bic.w	r3, r3, #1
    3e30:	b2da      	uxtb	r2, r3
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3e36:	2280      	movs	r2, #128	; 0x80
    3e38:	4920      	ldr	r1, [pc, #128]	; (3ebc <timer_add_task+0xec>)
    3e3a:	2000      	movs	r0, #0
    3e3c:	4b20      	ldr	r3, [pc, #128]	; (3ec0 <timer_add_task+0xf0>)
    3e3e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3e40:	f06f 0311 	mvn.w	r3, #17
    3e44:	e035      	b.n	3eb2 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    3e46:	687b      	ldr	r3, [r7, #4]
    3e48:	695a      	ldr	r2, [r3, #20]
    3e4a:	683b      	ldr	r3, [r7, #0]
    3e4c:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    3e4e:	687b      	ldr	r3, [r7, #4]
    3e50:	f103 0018 	add.w	r0, r3, #24
    3e54:	687b      	ldr	r3, [r7, #4]
    3e56:	695b      	ldr	r3, [r3, #20]
    3e58:	461a      	mov	r2, r3
    3e5a:	6839      	ldr	r1, [r7, #0]
    3e5c:	4b1a      	ldr	r3, [pc, #104]	; (3ec8 <timer_add_task+0xf8>)
    3e5e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3e60:	687b      	ldr	r3, [r7, #4]
    3e62:	7f1b      	ldrb	r3, [r3, #28]
    3e64:	b2db      	uxtb	r3, r3
    3e66:	f023 0301 	bic.w	r3, r3, #1
    3e6a:	b2da      	uxtb	r2, r3
    3e6c:	687b      	ldr	r3, [r7, #4]
    3e6e:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3e70:	687b      	ldr	r3, [r7, #4]
    3e72:	7f1b      	ldrb	r3, [r3, #28]
    3e74:	b2db      	uxtb	r3, r3
    3e76:	f003 0302 	and.w	r3, r3, #2
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	d018      	beq.n	3eb0 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    3e7e:	f107 030c 	add.w	r3, r7, #12
    3e82:	4618      	mov	r0, r3
    3e84:	4b11      	ldr	r3, [pc, #68]	; (3ecc <timer_add_task+0xfc>)
    3e86:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3e88:	687b      	ldr	r3, [r7, #4]
    3e8a:	7f1b      	ldrb	r3, [r3, #28]
    3e8c:	b2db      	uxtb	r3, r3
    3e8e:	f023 0302 	bic.w	r3, r3, #2
    3e92:	b2da      	uxtb	r2, r3
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	681b      	ldr	r3, [r3, #0]
    3e9c:	69db      	ldr	r3, [r3, #28]
    3e9e:	687a      	ldr	r2, [r7, #4]
    3ea0:	3204      	adds	r2, #4
    3ea2:	4610      	mov	r0, r2
    3ea4:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3ea6:	f107 030c 	add.w	r3, r7, #12
    3eaa:	4618      	mov	r0, r3
    3eac:	4b08      	ldr	r3, [pc, #32]	; (3ed0 <timer_add_task+0x100>)
    3eae:	4798      	blx	r3
	}

	return ERR_NONE;
    3eb0:	2300      	movs	r3, #0
}
    3eb2:	4618      	mov	r0, r3
    3eb4:	3710      	adds	r7, #16
    3eb6:	46bd      	mov	sp, r7
    3eb8:	bd80      	pop	{r7, pc}
    3eba:	bf00      	nop
    3ebc:	00010cb4 	.word	0x00010cb4
    3ec0:	00004a95 	.word	0x00004a95
    3ec4:	00004abd 	.word	0x00004abd
    3ec8:	00003fd1 	.word	0x00003fd1
    3ecc:	0000329d 	.word	0x0000329d
    3ed0:	000032c3 	.word	0x000032c3

00003ed4 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    3ed4:	b580      	push	{r7, lr}
    3ed6:	b084      	sub	sp, #16
    3ed8:	af00      	add	r7, sp, #0
    3eda:	6078      	str	r0, [r7, #4]
    3edc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    3ede:	687b      	ldr	r3, [r7, #4]
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d008      	beq.n	3ef6 <timer_remove_task+0x22>
    3ee4:	683b      	ldr	r3, [r7, #0]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d005      	beq.n	3ef6 <timer_remove_task+0x22>
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	681b      	ldr	r3, [r3, #0]
    3eee:	2b00      	cmp	r3, #0
    3ef0:	d001      	beq.n	3ef6 <timer_remove_task+0x22>
    3ef2:	2301      	movs	r3, #1
    3ef4:	e000      	b.n	3ef8 <timer_remove_task+0x24>
    3ef6:	2300      	movs	r3, #0
    3ef8:	f003 0301 	and.w	r3, r3, #1
    3efc:	b2db      	uxtb	r3, r3
    3efe:	2296      	movs	r2, #150	; 0x96
    3f00:	492d      	ldr	r1, [pc, #180]	; (3fb8 <timer_remove_task+0xe4>)
    3f02:	4618      	mov	r0, r3
    3f04:	4b2d      	ldr	r3, [pc, #180]	; (3fbc <timer_remove_task+0xe8>)
    3f06:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3f08:	687b      	ldr	r3, [r7, #4]
    3f0a:	7f1b      	ldrb	r3, [r3, #28]
    3f0c:	b2db      	uxtb	r3, r3
    3f0e:	f043 0301 	orr.w	r3, r3, #1
    3f12:	b2da      	uxtb	r2, r3
    3f14:	687b      	ldr	r3, [r7, #4]
    3f16:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	3318      	adds	r3, #24
    3f1c:	6839      	ldr	r1, [r7, #0]
    3f1e:	4618      	mov	r0, r3
    3f20:	4b27      	ldr	r3, [pc, #156]	; (3fc0 <timer_remove_task+0xec>)
    3f22:	4798      	blx	r3
    3f24:	4603      	mov	r3, r0
    3f26:	f083 0301 	eor.w	r3, r3, #1
    3f2a:	b2db      	uxtb	r3, r3
    3f2c:	2b00      	cmp	r3, #0
    3f2e:	d00f      	beq.n	3f50 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3f30:	687b      	ldr	r3, [r7, #4]
    3f32:	7f1b      	ldrb	r3, [r3, #28]
    3f34:	b2db      	uxtb	r3, r3
    3f36:	f023 0301 	bic.w	r3, r3, #1
    3f3a:	b2da      	uxtb	r2, r3
    3f3c:	687b      	ldr	r3, [r7, #4]
    3f3e:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3f40:	229b      	movs	r2, #155	; 0x9b
    3f42:	491d      	ldr	r1, [pc, #116]	; (3fb8 <timer_remove_task+0xe4>)
    3f44:	2000      	movs	r0, #0
    3f46:	4b1d      	ldr	r3, [pc, #116]	; (3fbc <timer_remove_task+0xe8>)
    3f48:	4798      	blx	r3
		return ERR_NOT_FOUND;
    3f4a:	f06f 0309 	mvn.w	r3, #9
    3f4e:	e02e      	b.n	3fae <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    3f50:	687b      	ldr	r3, [r7, #4]
    3f52:	3318      	adds	r3, #24
    3f54:	6839      	ldr	r1, [r7, #0]
    3f56:	4618      	mov	r0, r3
    3f58:	4b1a      	ldr	r3, [pc, #104]	; (3fc4 <timer_remove_task+0xf0>)
    3f5a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	7f1b      	ldrb	r3, [r3, #28]
    3f60:	b2db      	uxtb	r3, r3
    3f62:	f023 0301 	bic.w	r3, r3, #1
    3f66:	b2da      	uxtb	r2, r3
    3f68:	687b      	ldr	r3, [r7, #4]
    3f6a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	7f1b      	ldrb	r3, [r3, #28]
    3f70:	b2db      	uxtb	r3, r3
    3f72:	f003 0302 	and.w	r3, r3, #2
    3f76:	2b00      	cmp	r3, #0
    3f78:	d018      	beq.n	3fac <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    3f7a:	f107 030c 	add.w	r3, r7, #12
    3f7e:	4618      	mov	r0, r3
    3f80:	4b11      	ldr	r3, [pc, #68]	; (3fc8 <timer_remove_task+0xf4>)
    3f82:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	7f1b      	ldrb	r3, [r3, #28]
    3f88:	b2db      	uxtb	r3, r3
    3f8a:	f023 0302 	bic.w	r3, r3, #2
    3f8e:	b2da      	uxtb	r2, r3
    3f90:	687b      	ldr	r3, [r7, #4]
    3f92:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	681b      	ldr	r3, [r3, #0]
    3f98:	69db      	ldr	r3, [r3, #28]
    3f9a:	687a      	ldr	r2, [r7, #4]
    3f9c:	3204      	adds	r2, #4
    3f9e:	4610      	mov	r0, r2
    3fa0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3fa2:	f107 030c 	add.w	r3, r7, #12
    3fa6:	4618      	mov	r0, r3
    3fa8:	4b08      	ldr	r3, [pc, #32]	; (3fcc <timer_remove_task+0xf8>)
    3faa:	4798      	blx	r3
	}

	return ERR_NONE;
    3fac:	2300      	movs	r3, #0
}
    3fae:	4618      	mov	r0, r3
    3fb0:	3710      	adds	r7, #16
    3fb2:	46bd      	mov	sp, r7
    3fb4:	bd80      	pop	{r7, pc}
    3fb6:	bf00      	nop
    3fb8:	00010cb4 	.word	0x00010cb4
    3fbc:	00004a95 	.word	0x00004a95
    3fc0:	00004abd 	.word	0x00004abd
    3fc4:	00004c1f 	.word	0x00004c1f
    3fc8:	0000329d 	.word	0x0000329d
    3fcc:	000032c3 	.word	0x000032c3

00003fd0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    3fd0:	b580      	push	{r7, lr}
    3fd2:	b088      	sub	sp, #32
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	60f8      	str	r0, [r7, #12]
    3fd8:	60b9      	str	r1, [r7, #8]
    3fda:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    3fdc:	2300      	movs	r3, #0
    3fde:	61bb      	str	r3, [r7, #24]
    3fe0:	68f8      	ldr	r0, [r7, #12]
    3fe2:	4b23      	ldr	r3, [pc, #140]	; (4070 <timer_add_timer_task+0xa0>)
    3fe4:	4798      	blx	r3
    3fe6:	6138      	str	r0, [r7, #16]

	if (!head) {
    3fe8:	693b      	ldr	r3, [r7, #16]
    3fea:	2b00      	cmp	r3, #0
    3fec:	d104      	bne.n	3ff8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    3fee:	68b9      	ldr	r1, [r7, #8]
    3ff0:	68f8      	ldr	r0, [r7, #12]
    3ff2:	4b20      	ldr	r3, [pc, #128]	; (4074 <timer_add_timer_task+0xa4>)
    3ff4:	4798      	blx	r3
		return;
    3ff6:	e037      	b.n	4068 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3ff8:	693b      	ldr	r3, [r7, #16]
    3ffa:	61fb      	str	r3, [r7, #28]
    3ffc:	e022      	b.n	4044 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    3ffe:	69fb      	ldr	r3, [r7, #28]
    4000:	685a      	ldr	r2, [r3, #4]
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	429a      	cmp	r2, r3
    4006:	d808      	bhi.n	401a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    4008:	69fb      	ldr	r3, [r7, #28]
    400a:	689a      	ldr	r2, [r3, #8]
    400c:	69fb      	ldr	r3, [r7, #28]
    400e:	6859      	ldr	r1, [r3, #4]
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	1acb      	subs	r3, r1, r3
    4014:	4413      	add	r3, r2
    4016:	617b      	str	r3, [r7, #20]
    4018:	e009      	b.n	402e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    401a:	69fb      	ldr	r3, [r7, #28]
    401c:	689a      	ldr	r2, [r3, #8]
    401e:	69fb      	ldr	r3, [r7, #28]
    4020:	685b      	ldr	r3, [r3, #4]
    4022:	441a      	add	r2, r3
    4024:	687b      	ldr	r3, [r7, #4]
    4026:	425b      	negs	r3, r3
    4028:	4413      	add	r3, r2
    402a:	3301      	adds	r3, #1
    402c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    402e:	68bb      	ldr	r3, [r7, #8]
    4030:	689a      	ldr	r2, [r3, #8]
    4032:	697b      	ldr	r3, [r7, #20]
    4034:	429a      	cmp	r2, r3
    4036:	d909      	bls.n	404c <timer_add_timer_task+0x7c>
			break;
		prev = it;
    4038:	69fb      	ldr	r3, [r7, #28]
    403a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    403c:	69f8      	ldr	r0, [r7, #28]
    403e:	4b0e      	ldr	r3, [pc, #56]	; (4078 <timer_add_timer_task+0xa8>)
    4040:	4798      	blx	r3
    4042:	61f8      	str	r0, [r7, #28]
    4044:	69fb      	ldr	r3, [r7, #28]
    4046:	2b00      	cmp	r3, #0
    4048:	d1d9      	bne.n	3ffe <timer_add_timer_task+0x2e>
    404a:	e000      	b.n	404e <timer_add_timer_task+0x7e>
			break;
    404c:	bf00      	nop
	}

	if (it == head) {
    404e:	69fa      	ldr	r2, [r7, #28]
    4050:	693b      	ldr	r3, [r7, #16]
    4052:	429a      	cmp	r2, r3
    4054:	d104      	bne.n	4060 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    4056:	68b9      	ldr	r1, [r7, #8]
    4058:	68f8      	ldr	r0, [r7, #12]
    405a:	4b06      	ldr	r3, [pc, #24]	; (4074 <timer_add_timer_task+0xa4>)
    405c:	4798      	blx	r3
    405e:	e003      	b.n	4068 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    4060:	68b9      	ldr	r1, [r7, #8]
    4062:	69b8      	ldr	r0, [r7, #24]
    4064:	4b05      	ldr	r3, [pc, #20]	; (407c <timer_add_timer_task+0xac>)
    4066:	4798      	blx	r3
	}
}
    4068:	3720      	adds	r7, #32
    406a:	46bd      	mov	sp, r7
    406c:	bd80      	pop	{r7, pc}
    406e:	bf00      	nop
    4070:	00003c55 	.word	0x00003c55
    4074:	00004af5 	.word	0x00004af5
    4078:	00003c6d 	.word	0x00003c6d
    407c:	00004b4d 	.word	0x00004b4d

00004080 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4080:	b580      	push	{r7, lr}
    4082:	b086      	sub	sp, #24
    4084:	af00      	add	r7, sp, #0
    4086:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    4088:	687b      	ldr	r3, [r7, #4]
    408a:	3b04      	subs	r3, #4
    408c:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    408e:	693b      	ldr	r3, [r7, #16]
    4090:	3318      	adds	r3, #24
    4092:	4618      	mov	r0, r3
    4094:	4b27      	ldr	r3, [pc, #156]	; (4134 <timer_process_counted+0xb4>)
    4096:	4798      	blx	r3
    4098:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    409a:	693b      	ldr	r3, [r7, #16]
    409c:	695b      	ldr	r3, [r3, #20]
    409e:	1c5a      	adds	r2, r3, #1
    40a0:	693b      	ldr	r3, [r7, #16]
    40a2:	615a      	str	r2, [r3, #20]
    40a4:	693b      	ldr	r3, [r7, #16]
    40a6:	695b      	ldr	r3, [r3, #20]
    40a8:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    40aa:	693b      	ldr	r3, [r7, #16]
    40ac:	7f1b      	ldrb	r3, [r3, #28]
    40ae:	b2db      	uxtb	r3, r3
    40b0:	f003 0301 	and.w	r3, r3, #1
    40b4:	2b00      	cmp	r3, #0
    40b6:	d106      	bne.n	40c6 <timer_process_counted+0x46>
    40b8:	693b      	ldr	r3, [r7, #16]
    40ba:	7f1b      	ldrb	r3, [r3, #28]
    40bc:	b2db      	uxtb	r3, r3
    40be:	f003 0302 	and.w	r3, r3, #2
    40c2:	2b00      	cmp	r3, #0
    40c4:	d027      	beq.n	4116 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    40c6:	693b      	ldr	r3, [r7, #16]
    40c8:	7f1b      	ldrb	r3, [r3, #28]
    40ca:	b2db      	uxtb	r3, r3
    40cc:	f043 0302 	orr.w	r3, r3, #2
    40d0:	b2da      	uxtb	r2, r3
    40d2:	693b      	ldr	r3, [r7, #16]
    40d4:	771a      	strb	r2, [r3, #28]
		return;
    40d6:	e029      	b.n	412c <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    40d8:	697b      	ldr	r3, [r7, #20]
    40da:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    40dc:	693b      	ldr	r3, [r7, #16]
    40de:	3318      	adds	r3, #24
    40e0:	4618      	mov	r0, r3
    40e2:	4b15      	ldr	r3, [pc, #84]	; (4138 <timer_process_counted+0xb8>)
    40e4:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    40e6:	68bb      	ldr	r3, [r7, #8]
    40e8:	7c1b      	ldrb	r3, [r3, #16]
    40ea:	2b01      	cmp	r3, #1
    40ec:	d109      	bne.n	4102 <timer_process_counted+0x82>
			tmp->time_label = time;
    40ee:	68bb      	ldr	r3, [r7, #8]
    40f0:	68fa      	ldr	r2, [r7, #12]
    40f2:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    40f4:	693b      	ldr	r3, [r7, #16]
    40f6:	3318      	adds	r3, #24
    40f8:	68fa      	ldr	r2, [r7, #12]
    40fa:	68b9      	ldr	r1, [r7, #8]
    40fc:	4618      	mov	r0, r3
    40fe:	4b0f      	ldr	r3, [pc, #60]	; (413c <timer_process_counted+0xbc>)
    4100:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4102:	693b      	ldr	r3, [r7, #16]
    4104:	3318      	adds	r3, #24
    4106:	4618      	mov	r0, r3
    4108:	4b0a      	ldr	r3, [pc, #40]	; (4134 <timer_process_counted+0xb4>)
    410a:	4798      	blx	r3
    410c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    410e:	68bb      	ldr	r3, [r7, #8]
    4110:	68db      	ldr	r3, [r3, #12]
    4112:	68b8      	ldr	r0, [r7, #8]
    4114:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4116:	697b      	ldr	r3, [r7, #20]
    4118:	2b00      	cmp	r3, #0
    411a:	d007      	beq.n	412c <timer_process_counted+0xac>
    411c:	697b      	ldr	r3, [r7, #20]
    411e:	685b      	ldr	r3, [r3, #4]
    4120:	68fa      	ldr	r2, [r7, #12]
    4122:	1ad2      	subs	r2, r2, r3
    4124:	697b      	ldr	r3, [r7, #20]
    4126:	689b      	ldr	r3, [r3, #8]
    4128:	429a      	cmp	r2, r3
    412a:	d2d5      	bcs.n	40d8 <timer_process_counted+0x58>
	}
}
    412c:	3718      	adds	r7, #24
    412e:	46bd      	mov	sp, r7
    4130:	bd80      	pop	{r7, pc}
    4132:	bf00      	nop
    4134:	00003c55 	.word	0x00003c55
    4138:	00004bed 	.word	0x00004bed
    413c:	00003fd1 	.word	0x00003fd1

00004140 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    4140:	b480      	push	{r7}
    4142:	b085      	sub	sp, #20
    4144:	af00      	add	r7, sp, #0
    4146:	4603      	mov	r3, r0
    4148:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    414a:	2300      	movs	r3, #0
    414c:	73fb      	strb	r3, [r7, #15]
    414e:	e029      	b.n	41a4 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4150:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4154:	4a19      	ldr	r2, [pc, #100]	; (41bc <_usb_d_find_ep+0x7c>)
    4156:	015b      	lsls	r3, r3, #5
    4158:	4413      	add	r3, r2
    415a:	3301      	adds	r3, #1
    415c:	781b      	ldrb	r3, [r3, #0]
    415e:	79fa      	ldrb	r2, [r7, #7]
    4160:	429a      	cmp	r2, r3
    4162:	d102      	bne.n	416a <_usb_d_find_ep+0x2a>
			return i;
    4164:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4168:	e022      	b.n	41b0 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    416a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    416e:	4a13      	ldr	r2, [pc, #76]	; (41bc <_usb_d_find_ep+0x7c>)
    4170:	015b      	lsls	r3, r3, #5
    4172:	4413      	add	r3, r2
    4174:	781b      	ldrb	r3, [r3, #0]
    4176:	2b00      	cmp	r3, #0
    4178:	d10e      	bne.n	4198 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    417a:	79fb      	ldrb	r3, [r7, #7]
    417c:	f003 030f 	and.w	r3, r3, #15
    4180:	f997 200f 	ldrsb.w	r2, [r7, #15]
    4184:	490d      	ldr	r1, [pc, #52]	; (41bc <_usb_d_find_ep+0x7c>)
    4186:	0152      	lsls	r2, r2, #5
    4188:	440a      	add	r2, r1
    418a:	3201      	adds	r2, #1
    418c:	7812      	ldrb	r2, [r2, #0]
    418e:	4293      	cmp	r3, r2
    4190:	d102      	bne.n	4198 <_usb_d_find_ep+0x58>
			return i;
    4192:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4196:	e00b      	b.n	41b0 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4198:	f997 300f 	ldrsb.w	r3, [r7, #15]
    419c:	b2db      	uxtb	r3, r3
    419e:	3301      	adds	r3, #1
    41a0:	b2db      	uxtb	r3, r3
    41a2:	73fb      	strb	r3, [r7, #15]
    41a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    41a8:	2b03      	cmp	r3, #3
    41aa:	ddd1      	ble.n	4150 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    41ac:	f04f 33ff 	mov.w	r3, #4294967295
}
    41b0:	4618      	mov	r0, r3
    41b2:	3714      	adds	r7, #20
    41b4:	46bd      	mov	sp, r7
    41b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    41ba:	4770      	bx	lr
    41bc:	200008ac 	.word	0x200008ac

000041c0 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    41c0:	b580      	push	{r7, lr}
    41c2:	b088      	sub	sp, #32
    41c4:	af00      	add	r7, sp, #0
    41c6:	60ba      	str	r2, [r7, #8]
    41c8:	607b      	str	r3, [r7, #4]
    41ca:	4603      	mov	r3, r0
    41cc:	73fb      	strb	r3, [r7, #15]
    41ce:	460b      	mov	r3, r1
    41d0:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    41d2:	68bb      	ldr	r3, [r7, #8]
    41d4:	617b      	str	r3, [r7, #20]
    41d6:	687b      	ldr	r3, [r7, #4]
    41d8:	61bb      	str	r3, [r7, #24]
    41da:	7bbb      	ldrb	r3, [r7, #14]
    41dc:	2b00      	cmp	r3, #0
    41de:	d004      	beq.n	41ea <_usb_d_trans+0x2a>
    41e0:	7bfb      	ldrb	r3, [r7, #15]
    41e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    41e6:	b2db      	uxtb	r3, r3
    41e8:	e003      	b.n	41f2 <_usb_d_trans+0x32>
    41ea:	7bfb      	ldrb	r3, [r7, #15]
    41ec:	f003 030f 	and.w	r3, r3, #15
    41f0:	b2db      	uxtb	r3, r3
    41f2:	773b      	strb	r3, [r7, #28]
    41f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    41f8:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    41fa:	f107 0314 	add.w	r3, r7, #20
    41fe:	4618      	mov	r0, r3
    4200:	4b03      	ldr	r3, [pc, #12]	; (4210 <_usb_d_trans+0x50>)
    4202:	4798      	blx	r3
    4204:	4603      	mov	r3, r0
}
    4206:	4618      	mov	r0, r3
    4208:	3720      	adds	r7, #32
    420a:	46bd      	mov	sp, r7
    420c:	bd80      	pop	{r7, pc}
    420e:	bf00      	nop
    4210:	0000bbb5 	.word	0x0000bbb5

00004214 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    4214:	b480      	push	{r7}
    4216:	b085      	sub	sp, #20
    4218:	af00      	add	r7, sp, #0
    421a:	60f8      	str	r0, [r7, #12]
    421c:	60b9      	str	r1, [r7, #8]
    421e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    4220:	2300      	movs	r3, #0
}
    4222:	4618      	mov	r0, r3
    4224:	3714      	adds	r7, #20
    4226:	46bd      	mov	sp, r7
    4228:	f85d 7b04 	ldr.w	r7, [sp], #4
    422c:	4770      	bx	lr
	...

00004230 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    4230:	b580      	push	{r7, lr}
    4232:	b086      	sub	sp, #24
    4234:	af00      	add	r7, sp, #0
    4236:	4603      	mov	r3, r0
    4238:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    423a:	79fb      	ldrb	r3, [r7, #7]
    423c:	4618      	mov	r0, r3
    423e:	4b2a      	ldr	r3, [pc, #168]	; (42e8 <usb_d_cb_trans_setup+0xb8>)
    4240:	4798      	blx	r3
    4242:	4603      	mov	r3, r0
    4244:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4246:	f997 3017 	ldrsb.w	r3, [r7, #23]
    424a:	015b      	lsls	r3, r3, #5
    424c:	4a27      	ldr	r2, [pc, #156]	; (42ec <usb_d_cb_trans_setup+0xbc>)
    424e:	4413      	add	r3, r2
    4250:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    4252:	693b      	ldr	r3, [r7, #16]
    4254:	330c      	adds	r3, #12
    4256:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    4258:	79fb      	ldrb	r3, [r7, #7]
    425a:	68f9      	ldr	r1, [r7, #12]
    425c:	4618      	mov	r0, r3
    425e:	4b24      	ldr	r3, [pc, #144]	; (42f0 <usb_d_cb_trans_setup+0xc0>)
    4260:	4798      	blx	r3
    4262:	4603      	mov	r3, r0
    4264:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    4266:	7afb      	ldrb	r3, [r7, #11]
    4268:	2b08      	cmp	r3, #8
    426a:	d00d      	beq.n	4288 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    426c:	79fb      	ldrb	r3, [r7, #7]
    426e:	2101      	movs	r1, #1
    4270:	4618      	mov	r0, r3
    4272:	4b20      	ldr	r3, [pc, #128]	; (42f4 <usb_d_cb_trans_setup+0xc4>)
    4274:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4276:	79fb      	ldrb	r3, [r7, #7]
    4278:	f063 037f 	orn	r3, r3, #127	; 0x7f
    427c:	b2db      	uxtb	r3, r3
    427e:	2101      	movs	r1, #1
    4280:	4618      	mov	r0, r3
    4282:	4b1c      	ldr	r3, [pc, #112]	; (42f4 <usb_d_cb_trans_setup+0xc4>)
    4284:	4798      	blx	r3
		return;
    4286:	e02b      	b.n	42e0 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4288:	79fb      	ldrb	r3, [r7, #7]
    428a:	2100      	movs	r1, #0
    428c:	4618      	mov	r0, r3
    428e:	4b19      	ldr	r3, [pc, #100]	; (42f4 <usb_d_cb_trans_setup+0xc4>)
    4290:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    4292:	79fb      	ldrb	r3, [r7, #7]
    4294:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4298:	b2db      	uxtb	r3, r3
    429a:	2100      	movs	r1, #0
    429c:	4618      	mov	r0, r3
    429e:	4b15      	ldr	r3, [pc, #84]	; (42f4 <usb_d_cb_trans_setup+0xc4>)
    42a0:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    42a2:	693b      	ldr	r3, [r7, #16]
    42a4:	2201      	movs	r2, #1
    42a6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    42a8:	693b      	ldr	r3, [r7, #16]
    42aa:	695b      	ldr	r3, [r3, #20]
    42ac:	79fa      	ldrb	r2, [r7, #7]
    42ae:	68f9      	ldr	r1, [r7, #12]
    42b0:	4610      	mov	r0, r2
    42b2:	4798      	blx	r3
    42b4:	4603      	mov	r3, r0
    42b6:	f083 0301 	eor.w	r3, r3, #1
    42ba:	b2db      	uxtb	r3, r3
    42bc:	2b00      	cmp	r3, #0
    42be:	d00f      	beq.n	42e0 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    42c0:	693b      	ldr	r3, [r7, #16]
    42c2:	2205      	movs	r2, #5
    42c4:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    42c6:	79fb      	ldrb	r3, [r7, #7]
    42c8:	2101      	movs	r1, #1
    42ca:	4618      	mov	r0, r3
    42cc:	4b09      	ldr	r3, [pc, #36]	; (42f4 <usb_d_cb_trans_setup+0xc4>)
    42ce:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    42d0:	79fb      	ldrb	r3, [r7, #7]
    42d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    42d6:	b2db      	uxtb	r3, r3
    42d8:	2101      	movs	r1, #1
    42da:	4618      	mov	r0, r3
    42dc:	4b05      	ldr	r3, [pc, #20]	; (42f4 <usb_d_cb_trans_setup+0xc4>)
    42de:	4798      	blx	r3
	}
}
    42e0:	3718      	adds	r7, #24
    42e2:	46bd      	mov	sp, r7
    42e4:	bd80      	pop	{r7, pc}
    42e6:	bf00      	nop
    42e8:	00004141 	.word	0x00004141
    42ec:	200008ac 	.word	0x200008ac
    42f0:	0000bb0d 	.word	0x0000bb0d
    42f4:	0000b985 	.word	0x0000b985

000042f8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    42f8:	b580      	push	{r7, lr}
    42fa:	b084      	sub	sp, #16
    42fc:	af00      	add	r7, sp, #0
    42fe:	4603      	mov	r3, r0
    4300:	6039      	str	r1, [r7, #0]
    4302:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4304:	79fb      	ldrb	r3, [r7, #7]
    4306:	4618      	mov	r0, r3
    4308:	4b0d      	ldr	r3, [pc, #52]	; (4340 <usb_d_cb_trans_more+0x48>)
    430a:	4798      	blx	r3
    430c:	4603      	mov	r3, r0
    430e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4310:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4314:	015b      	lsls	r3, r3, #5
    4316:	4a0b      	ldr	r2, [pc, #44]	; (4344 <usb_d_cb_trans_more+0x4c>)
    4318:	4413      	add	r3, r2
    431a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    431c:	68bb      	ldr	r3, [r7, #8]
    431e:	789b      	ldrb	r3, [r3, #2]
    4320:	2b03      	cmp	r3, #3
    4322:	d107      	bne.n	4334 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    4324:	68bb      	ldr	r3, [r7, #8]
    4326:	699b      	ldr	r3, [r3, #24]
    4328:	79fa      	ldrb	r2, [r7, #7]
    432a:	6839      	ldr	r1, [r7, #0]
    432c:	4610      	mov	r0, r2
    432e:	4798      	blx	r3
    4330:	4603      	mov	r3, r0
    4332:	e000      	b.n	4336 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    4334:	2300      	movs	r3, #0
}
    4336:	4618      	mov	r0, r3
    4338:	3710      	adds	r7, #16
    433a:	46bd      	mov	sp, r7
    433c:	bd80      	pop	{r7, pc}
    433e:	bf00      	nop
    4340:	00004141 	.word	0x00004141
    4344:	200008ac 	.word	0x200008ac

00004348 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    4348:	b590      	push	{r4, r7, lr}
    434a:	b087      	sub	sp, #28
    434c:	af02      	add	r7, sp, #8
    434e:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    4350:	687b      	ldr	r3, [r7, #4]
    4352:	789b      	ldrb	r3, [r3, #2]
    4354:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    4356:	687b      	ldr	r3, [r7, #4]
    4358:	7b1b      	ldrb	r3, [r3, #12]
    435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    435e:	2b00      	cmp	r3, #0
    4360:	bf14      	ite	ne
    4362:	2301      	movne	r3, #1
    4364:	2300      	moveq	r3, #0
    4366:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    4368:	7bfb      	ldrb	r3, [r7, #15]
    436a:	2b03      	cmp	r3, #3
    436c:	d13a      	bne.n	43e4 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    436e:	687b      	ldr	r3, [r7, #4]
    4370:	69db      	ldr	r3, [r3, #28]
    4372:	687a      	ldr	r2, [r7, #4]
    4374:	7850      	ldrb	r0, [r2, #1]
    4376:	687a      	ldr	r2, [r7, #4]
    4378:	320c      	adds	r2, #12
    437a:	2101      	movs	r1, #1
    437c:	4798      	blx	r3
    437e:	4603      	mov	r3, r0
    4380:	737b      	strb	r3, [r7, #13]
		if (err) {
    4382:	7b7b      	ldrb	r3, [r7, #13]
    4384:	2b00      	cmp	r3, #0
    4386:	d015      	beq.n	43b4 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    4388:	687b      	ldr	r3, [r7, #4]
    438a:	2205      	movs	r2, #5
    438c:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    438e:	687b      	ldr	r3, [r7, #4]
    4390:	2202      	movs	r2, #2
    4392:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    4394:	7bbb      	ldrb	r3, [r7, #14]
    4396:	2b00      	cmp	r3, #0
    4398:	d002      	beq.n	43a0 <usb_d_ctrl_trans_done+0x58>
    439a:	687b      	ldr	r3, [r7, #4]
    439c:	785b      	ldrb	r3, [r3, #1]
    439e:	e004      	b.n	43aa <usb_d_ctrl_trans_done+0x62>
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	785b      	ldrb	r3, [r3, #1]
    43a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    43a8:	b2db      	uxtb	r3, r3
    43aa:	2101      	movs	r1, #1
    43ac:	4618      	mov	r0, r3
    43ae:	4b15      	ldr	r3, [pc, #84]	; (4404 <usb_d_ctrl_trans_done+0xbc>)
    43b0:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    43b2:	e022      	b.n	43fa <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    43b4:	687b      	ldr	r3, [r7, #4]
    43b6:	2204      	movs	r2, #4
    43b8:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    43ba:	687b      	ldr	r3, [r7, #4]
    43bc:	7858      	ldrb	r0, [r3, #1]
    43be:	7bbb      	ldrb	r3, [r7, #14]
    43c0:	2b00      	cmp	r3, #0
    43c2:	bf14      	ite	ne
    43c4:	2301      	movne	r3, #1
    43c6:	2300      	moveq	r3, #0
    43c8:	b2db      	uxtb	r3, r3
    43ca:	f083 0301 	eor.w	r3, r3, #1
    43ce:	b2db      	uxtb	r3, r3
    43d0:	f003 0301 	and.w	r3, r3, #1
    43d4:	b2d9      	uxtb	r1, r3
    43d6:	2301      	movs	r3, #1
    43d8:	9300      	str	r3, [sp, #0]
    43da:	2300      	movs	r3, #0
    43dc:	2200      	movs	r2, #0
    43de:	4c0a      	ldr	r4, [pc, #40]	; (4408 <usb_d_ctrl_trans_done+0xc0>)
    43e0:	47a0      	blx	r4
}
    43e2:	e00a      	b.n	43fa <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    43e4:	687b      	ldr	r3, [r7, #4]
    43e6:	69db      	ldr	r3, [r3, #28]
    43e8:	687a      	ldr	r2, [r7, #4]
    43ea:	7850      	ldrb	r0, [r2, #1]
    43ec:	687a      	ldr	r2, [r7, #4]
    43ee:	320c      	adds	r2, #12
    43f0:	2100      	movs	r1, #0
    43f2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    43f4:	687b      	ldr	r3, [r7, #4]
    43f6:	2202      	movs	r2, #2
    43f8:	709a      	strb	r2, [r3, #2]
}
    43fa:	bf00      	nop
    43fc:	3714      	adds	r7, #20
    43fe:	46bd      	mov	sp, r7
    4400:	bd90      	pop	{r4, r7, pc}
    4402:	bf00      	nop
    4404:	0000b985 	.word	0x0000b985
    4408:	000041c1 	.word	0x000041c1

0000440c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    440c:	b580      	push	{r7, lr}
    440e:	b086      	sub	sp, #24
    4410:	af00      	add	r7, sp, #0
    4412:	4603      	mov	r3, r0
    4414:	60b9      	str	r1, [r7, #8]
    4416:	607a      	str	r2, [r7, #4]
    4418:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    441a:	7bfb      	ldrb	r3, [r7, #15]
    441c:	4618      	mov	r0, r3
    441e:	4b2f      	ldr	r3, [pc, #188]	; (44dc <_usb_d_cb_trans_done+0xd0>)
    4420:	4798      	blx	r3
    4422:	4603      	mov	r3, r0
    4424:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4426:	f997 3017 	ldrsb.w	r3, [r7, #23]
    442a:	015b      	lsls	r3, r3, #5
    442c:	4a2c      	ldr	r2, [pc, #176]	; (44e0 <_usb_d_cb_trans_done+0xd4>)
    442e:	4413      	add	r3, r2
    4430:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    4432:	68bb      	ldr	r3, [r7, #8]
    4434:	2b00      	cmp	r3, #0
    4436:	d10e      	bne.n	4456 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    4438:	693b      	ldr	r3, [r7, #16]
    443a:	2200      	movs	r2, #0
    443c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    443e:	693b      	ldr	r3, [r7, #16]
    4440:	781b      	ldrb	r3, [r3, #0]
    4442:	2b00      	cmp	r3, #0
    4444:	d103      	bne.n	444e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    4446:	6938      	ldr	r0, [r7, #16]
    4448:	4b26      	ldr	r3, [pc, #152]	; (44e4 <_usb_d_cb_trans_done+0xd8>)
    444a:	4798      	blx	r3
			return;
    444c:	e043      	b.n	44d6 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    444e:	693b      	ldr	r3, [r7, #16]
    4450:	2201      	movs	r2, #1
    4452:	709a      	strb	r2, [r3, #2]
    4454:	e038      	b.n	44c8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    4456:	68bb      	ldr	r3, [r7, #8]
    4458:	2b01      	cmp	r3, #1
    445a:	d113      	bne.n	4484 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    445c:	693b      	ldr	r3, [r7, #16]
    445e:	2202      	movs	r2, #2
    4460:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4462:	693b      	ldr	r3, [r7, #16]
    4464:	781b      	ldrb	r3, [r3, #0]
    4466:	2b00      	cmp	r3, #0
    4468:	d108      	bne.n	447c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    446a:	693b      	ldr	r3, [r7, #16]
    446c:	2202      	movs	r2, #2
    446e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4470:	7bfb      	ldrb	r3, [r7, #15]
    4472:	2100      	movs	r1, #0
    4474:	4618      	mov	r0, r3
    4476:	4b1c      	ldr	r3, [pc, #112]	; (44e8 <_usb_d_cb_trans_done+0xdc>)
    4478:	4798      	blx	r3
    447a:	e025      	b.n	44c8 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    447c:	693b      	ldr	r3, [r7, #16]
    447e:	2205      	movs	r2, #5
    4480:	709a      	strb	r2, [r3, #2]
    4482:	e021      	b.n	44c8 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    4484:	68bb      	ldr	r3, [r7, #8]
    4486:	2b02      	cmp	r3, #2
    4488:	d10e      	bne.n	44a8 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    448a:	693b      	ldr	r3, [r7, #16]
    448c:	2204      	movs	r2, #4
    448e:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4490:	693b      	ldr	r3, [r7, #16]
    4492:	781b      	ldrb	r3, [r3, #0]
    4494:	2b00      	cmp	r3, #0
    4496:	d103      	bne.n	44a0 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4498:	693b      	ldr	r3, [r7, #16]
    449a:	2202      	movs	r2, #2
    449c:	709a      	strb	r2, [r3, #2]
			return;
    449e:	e01a      	b.n	44d6 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    44a0:	693b      	ldr	r3, [r7, #16]
    44a2:	2201      	movs	r2, #1
    44a4:	709a      	strb	r2, [r3, #2]
    44a6:	e00f      	b.n	44c8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    44a8:	68bb      	ldr	r3, [r7, #8]
    44aa:	2b03      	cmp	r3, #3
    44ac:	d106      	bne.n	44bc <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    44ae:	693b      	ldr	r3, [r7, #16]
    44b0:	2200      	movs	r2, #0
    44b2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    44b4:	693b      	ldr	r3, [r7, #16]
    44b6:	2205      	movs	r2, #5
    44b8:	70da      	strb	r2, [r3, #3]
    44ba:	e005      	b.n	44c8 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    44bc:	693b      	ldr	r3, [r7, #16]
    44be:	2206      	movs	r2, #6
    44c0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    44c2:	693b      	ldr	r3, [r7, #16]
    44c4:	2206      	movs	r2, #6
    44c6:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    44c8:	693b      	ldr	r3, [r7, #16]
    44ca:	69db      	ldr	r3, [r3, #28]
    44cc:	693a      	ldr	r2, [r7, #16]
    44ce:	78d1      	ldrb	r1, [r2, #3]
    44d0:	687a      	ldr	r2, [r7, #4]
    44d2:	7bf8      	ldrb	r0, [r7, #15]
    44d4:	4798      	blx	r3
}
    44d6:	3718      	adds	r7, #24
    44d8:	46bd      	mov	sp, r7
    44da:	bd80      	pop	{r7, pc}
    44dc:	00004141 	.word	0x00004141
    44e0:	200008ac 	.word	0x200008ac
    44e4:	00004349 	.word	0x00004349
    44e8:	0000b985 	.word	0x0000b985

000044ec <usb_d_init>:

int32_t usb_d_init(void)
{
    44ec:	b580      	push	{r7, lr}
    44ee:	b082      	sub	sp, #8
    44f0:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    44f2:	4b21      	ldr	r3, [pc, #132]	; (4578 <usb_d_init+0x8c>)
    44f4:	4798      	blx	r3
    44f6:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    44f8:	683b      	ldr	r3, [r7, #0]
    44fa:	2b00      	cmp	r3, #0
    44fc:	da01      	bge.n	4502 <usb_d_init+0x16>
		return rc;
    44fe:	683b      	ldr	r3, [r7, #0]
    4500:	e036      	b.n	4570 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    4502:	2280      	movs	r2, #128	; 0x80
    4504:	2100      	movs	r1, #0
    4506:	481d      	ldr	r0, [pc, #116]	; (457c <usb_d_init+0x90>)
    4508:	4b1d      	ldr	r3, [pc, #116]	; (4580 <usb_d_init+0x94>)
    450a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    450c:	2300      	movs	r3, #0
    450e:	71fb      	strb	r3, [r7, #7]
    4510:	e01e      	b.n	4550 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    4512:	79fb      	ldrb	r3, [r7, #7]
    4514:	4a19      	ldr	r2, [pc, #100]	; (457c <usb_d_init+0x90>)
    4516:	015b      	lsls	r3, r3, #5
    4518:	4413      	add	r3, r2
    451a:	3301      	adds	r3, #1
    451c:	22ff      	movs	r2, #255	; 0xff
    451e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    4520:	79fb      	ldrb	r3, [r7, #7]
    4522:	4a16      	ldr	r2, [pc, #88]	; (457c <usb_d_init+0x90>)
    4524:	015b      	lsls	r3, r3, #5
    4526:	4413      	add	r3, r2
    4528:	3314      	adds	r3, #20
    452a:	4a16      	ldr	r2, [pc, #88]	; (4584 <usb_d_init+0x98>)
    452c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    452e:	79fb      	ldrb	r3, [r7, #7]
    4530:	4a12      	ldr	r2, [pc, #72]	; (457c <usb_d_init+0x90>)
    4532:	015b      	lsls	r3, r3, #5
    4534:	4413      	add	r3, r2
    4536:	3318      	adds	r3, #24
    4538:	4a12      	ldr	r2, [pc, #72]	; (4584 <usb_d_init+0x98>)
    453a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    453c:	79fb      	ldrb	r3, [r7, #7]
    453e:	4a0f      	ldr	r2, [pc, #60]	; (457c <usb_d_init+0x90>)
    4540:	015b      	lsls	r3, r3, #5
    4542:	4413      	add	r3, r2
    4544:	331c      	adds	r3, #28
    4546:	4a0f      	ldr	r2, [pc, #60]	; (4584 <usb_d_init+0x98>)
    4548:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    454a:	79fb      	ldrb	r3, [r7, #7]
    454c:	3301      	adds	r3, #1
    454e:	71fb      	strb	r3, [r7, #7]
    4550:	79fb      	ldrb	r3, [r7, #7]
    4552:	2b03      	cmp	r3, #3
    4554:	d9dd      	bls.n	4512 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    4556:	490c      	ldr	r1, [pc, #48]	; (4588 <usb_d_init+0x9c>)
    4558:	2000      	movs	r0, #0
    455a:	4b0c      	ldr	r3, [pc, #48]	; (458c <usb_d_init+0xa0>)
    455c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    455e:	490c      	ldr	r1, [pc, #48]	; (4590 <usb_d_init+0xa4>)
    4560:	2001      	movs	r0, #1
    4562:	4b0a      	ldr	r3, [pc, #40]	; (458c <usb_d_init+0xa0>)
    4564:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    4566:	490b      	ldr	r1, [pc, #44]	; (4594 <usb_d_init+0xa8>)
    4568:	2002      	movs	r0, #2
    456a:	4b08      	ldr	r3, [pc, #32]	; (458c <usb_d_init+0xa0>)
    456c:	4798      	blx	r3
	return ERR_NONE;
    456e:	2300      	movs	r3, #0
}
    4570:	4618      	mov	r0, r3
    4572:	3708      	adds	r7, #8
    4574:	46bd      	mov	sp, r7
    4576:	bd80      	pop	{r7, pc}
    4578:	0000b1cd 	.word	0x0000b1cd
    457c:	200008ac 	.word	0x200008ac
    4580:	000108fd 	.word	0x000108fd
    4584:	00004215 	.word	0x00004215
    4588:	00004231 	.word	0x00004231
    458c:	0000be15 	.word	0x0000be15
    4590:	000042f9 	.word	0x000042f9
    4594:	0000440d 	.word	0x0000440d

00004598 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    4598:	b580      	push	{r7, lr}
    459a:	b082      	sub	sp, #8
    459c:	af00      	add	r7, sp, #0
    459e:	4603      	mov	r3, r0
    45a0:	6039      	str	r1, [r7, #0]
    45a2:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    45a4:	79fb      	ldrb	r3, [r7, #7]
    45a6:	6839      	ldr	r1, [r7, #0]
    45a8:	4618      	mov	r0, r3
    45aa:	4b03      	ldr	r3, [pc, #12]	; (45b8 <usb_d_register_callback+0x20>)
    45ac:	4798      	blx	r3
}
    45ae:	bf00      	nop
    45b0:	3708      	adds	r7, #8
    45b2:	46bd      	mov	sp, r7
    45b4:	bd80      	pop	{r7, pc}
    45b6:	bf00      	nop
    45b8:	0000bdcd 	.word	0x0000bdcd

000045bc <usb_d_enable>:

int32_t usb_d_enable(void)
{
    45bc:	b580      	push	{r7, lr}
    45be:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    45c0:	4b02      	ldr	r3, [pc, #8]	; (45cc <usb_d_enable+0x10>)
    45c2:	4798      	blx	r3
    45c4:	4603      	mov	r3, r0
}
    45c6:	4618      	mov	r0, r3
    45c8:	bd80      	pop	{r7, pc}
    45ca:	bf00      	nop
    45cc:	0000b2bd 	.word	0x0000b2bd

000045d0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    45d0:	b580      	push	{r7, lr}
    45d2:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    45d4:	4b01      	ldr	r3, [pc, #4]	; (45dc <usb_d_attach+0xc>)
    45d6:	4798      	blx	r3
}
    45d8:	bf00      	nop
    45da:	bd80      	pop	{r7, pc}
    45dc:	0000b341 	.word	0x0000b341

000045e0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    45e0:	b580      	push	{r7, lr}
    45e2:	b082      	sub	sp, #8
    45e4:	af00      	add	r7, sp, #0
    45e6:	4603      	mov	r3, r0
    45e8:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    45ea:	79fb      	ldrb	r3, [r7, #7]
    45ec:	4618      	mov	r0, r3
    45ee:	4b03      	ldr	r3, [pc, #12]	; (45fc <usb_d_set_address+0x1c>)
    45f0:	4798      	blx	r3
}
    45f2:	bf00      	nop
    45f4:	3708      	adds	r7, #8
    45f6:	46bd      	mov	sp, r7
    45f8:	bd80      	pop	{r7, pc}
    45fa:	bf00      	nop
    45fc:	0000b355 	.word	0x0000b355

00004600 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    4600:	b580      	push	{r7, lr}
    4602:	b082      	sub	sp, #8
    4604:	af00      	add	r7, sp, #0
    4606:	4603      	mov	r3, r0
    4608:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    460a:	79fb      	ldrb	r3, [r7, #7]
    460c:	b29b      	uxth	r3, r3
    460e:	461a      	mov	r2, r3
    4610:	2100      	movs	r1, #0
    4612:	2000      	movs	r0, #0
    4614:	4b03      	ldr	r3, [pc, #12]	; (4624 <usb_d_ep0_init+0x24>)
    4616:	4798      	blx	r3
    4618:	4603      	mov	r3, r0
}
    461a:	4618      	mov	r0, r3
    461c:	3708      	adds	r7, #8
    461e:	46bd      	mov	sp, r7
    4620:	bd80      	pop	{r7, pc}
    4622:	bf00      	nop
    4624:	00004629 	.word	0x00004629

00004628 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    4628:	b580      	push	{r7, lr}
    462a:	b086      	sub	sp, #24
    462c:	af00      	add	r7, sp, #0
    462e:	4603      	mov	r3, r0
    4630:	71fb      	strb	r3, [r7, #7]
    4632:	460b      	mov	r3, r1
    4634:	71bb      	strb	r3, [r7, #6]
    4636:	4613      	mov	r3, r2
    4638:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    463a:	79fb      	ldrb	r3, [r7, #7]
    463c:	4618      	mov	r0, r3
    463e:	4b1e      	ldr	r3, [pc, #120]	; (46b8 <usb_d_ep_init+0x90>)
    4640:	4798      	blx	r3
    4642:	4603      	mov	r3, r0
    4644:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4646:	f997 3017 	ldrsb.w	r3, [r7, #23]
    464a:	015b      	lsls	r3, r3, #5
    464c:	4a1b      	ldr	r2, [pc, #108]	; (46bc <usb_d_ep_init+0x94>)
    464e:	4413      	add	r3, r2
    4650:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    4652:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4656:	2b00      	cmp	r3, #0
    4658:	db02      	blt.n	4660 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    465a:	f06f 0313 	mvn.w	r3, #19
    465e:	e027      	b.n	46b0 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    4660:	20ff      	movs	r0, #255	; 0xff
    4662:	4b15      	ldr	r3, [pc, #84]	; (46b8 <usb_d_ep_init+0x90>)
    4664:	4798      	blx	r3
    4666:	4603      	mov	r3, r0
    4668:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    466a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    466e:	2b00      	cmp	r3, #0
    4670:	da02      	bge.n	4678 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    4672:	f06f 0314 	mvn.w	r3, #20
    4676:	e01b      	b.n	46b0 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    4678:	f997 3017 	ldrsb.w	r3, [r7, #23]
    467c:	015b      	lsls	r3, r3, #5
    467e:	4a0f      	ldr	r2, [pc, #60]	; (46bc <usb_d_ep_init+0x94>)
    4680:	4413      	add	r3, r2
    4682:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    4684:	88ba      	ldrh	r2, [r7, #4]
    4686:	79b9      	ldrb	r1, [r7, #6]
    4688:	79fb      	ldrb	r3, [r7, #7]
    468a:	4618      	mov	r0, r3
    468c:	4b0c      	ldr	r3, [pc, #48]	; (46c0 <usb_d_ep_init+0x98>)
    468e:	4798      	blx	r3
    4690:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    4692:	68fb      	ldr	r3, [r7, #12]
    4694:	2b00      	cmp	r3, #0
    4696:	da01      	bge.n	469c <usb_d_ep_init+0x74>
		return rc;
    4698:	68fb      	ldr	r3, [r7, #12]
    469a:	e009      	b.n	46b0 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    469c:	693b      	ldr	r3, [r7, #16]
    469e:	79fa      	ldrb	r2, [r7, #7]
    46a0:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    46a2:	79bb      	ldrb	r3, [r7, #6]
    46a4:	f003 0303 	and.w	r3, r3, #3
    46a8:	b2da      	uxtb	r2, r3
    46aa:	693b      	ldr	r3, [r7, #16]
    46ac:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    46ae:	2300      	movs	r3, #0
}
    46b0:	4618      	mov	r0, r3
    46b2:	3718      	adds	r7, #24
    46b4:	46bd      	mov	sp, r7
    46b6:	bd80      	pop	{r7, pc}
    46b8:	00004141 	.word	0x00004141
    46bc:	200008ac 	.word	0x200008ac
    46c0:	0000b3f5 	.word	0x0000b3f5

000046c4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    46c4:	b580      	push	{r7, lr}
    46c6:	b084      	sub	sp, #16
    46c8:	af00      	add	r7, sp, #0
    46ca:	4603      	mov	r3, r0
    46cc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    46ce:	79fb      	ldrb	r3, [r7, #7]
    46d0:	4618      	mov	r0, r3
    46d2:	4b0d      	ldr	r3, [pc, #52]	; (4708 <usb_d_ep_deinit+0x44>)
    46d4:	4798      	blx	r3
    46d6:	4603      	mov	r3, r0
    46d8:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    46da:	f997 300f 	ldrsb.w	r3, [r7, #15]
    46de:	015b      	lsls	r3, r3, #5
    46e0:	4a0a      	ldr	r2, [pc, #40]	; (470c <usb_d_ep_deinit+0x48>)
    46e2:	4413      	add	r3, r2
    46e4:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    46e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    46ea:	2b00      	cmp	r3, #0
    46ec:	db07      	blt.n	46fe <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    46ee:	79fb      	ldrb	r3, [r7, #7]
    46f0:	4618      	mov	r0, r3
    46f2:	4b07      	ldr	r3, [pc, #28]	; (4710 <usb_d_ep_deinit+0x4c>)
    46f4:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    46f6:	68bb      	ldr	r3, [r7, #8]
    46f8:	22ff      	movs	r2, #255	; 0xff
    46fa:	705a      	strb	r2, [r3, #1]
    46fc:	e000      	b.n	4700 <usb_d_ep_deinit+0x3c>
		return;
    46fe:	bf00      	nop
}
    4700:	3710      	adds	r7, #16
    4702:	46bd      	mov	sp, r7
    4704:	bd80      	pop	{r7, pc}
    4706:	bf00      	nop
    4708:	00004141 	.word	0x00004141
    470c:	200008ac 	.word	0x200008ac
    4710:	0000b529 	.word	0x0000b529

00004714 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    4714:	b580      	push	{r7, lr}
    4716:	b086      	sub	sp, #24
    4718:	af00      	add	r7, sp, #0
    471a:	4603      	mov	r3, r0
    471c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    471e:	79fb      	ldrb	r3, [r7, #7]
    4720:	4618      	mov	r0, r3
    4722:	4b15      	ldr	r3, [pc, #84]	; (4778 <usb_d_ep_enable+0x64>)
    4724:	4798      	blx	r3
    4726:	4603      	mov	r3, r0
    4728:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    472a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    472e:	015b      	lsls	r3, r3, #5
    4730:	4a12      	ldr	r2, [pc, #72]	; (477c <usb_d_ep_enable+0x68>)
    4732:	4413      	add	r3, r2
    4734:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    4736:	f997 3017 	ldrsb.w	r3, [r7, #23]
    473a:	2b00      	cmp	r3, #0
    473c:	da02      	bge.n	4744 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    473e:	f06f 0311 	mvn.w	r3, #17
    4742:	e014      	b.n	476e <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    4744:	693b      	ldr	r3, [r7, #16]
    4746:	781b      	ldrb	r3, [r3, #0]
    4748:	2b00      	cmp	r3, #0
    474a:	d101      	bne.n	4750 <usb_d_ep_enable+0x3c>
    474c:	2202      	movs	r2, #2
    474e:	e000      	b.n	4752 <usb_d_ep_enable+0x3e>
    4750:	2201      	movs	r2, #1
    4752:	693b      	ldr	r3, [r7, #16]
    4754:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    4756:	79fb      	ldrb	r3, [r7, #7]
    4758:	4618      	mov	r0, r3
    475a:	4b09      	ldr	r3, [pc, #36]	; (4780 <usb_d_ep_enable+0x6c>)
    475c:	4798      	blx	r3
    475e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    4760:	68fb      	ldr	r3, [r7, #12]
    4762:	2b00      	cmp	r3, #0
    4764:	da02      	bge.n	476c <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    4766:	693b      	ldr	r3, [r7, #16]
    4768:	2200      	movs	r2, #0
    476a:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    476c:	68fb      	ldr	r3, [r7, #12]
}
    476e:	4618      	mov	r0, r3
    4770:	3718      	adds	r7, #24
    4772:	46bd      	mov	sp, r7
    4774:	bd80      	pop	{r7, pc}
    4776:	bf00      	nop
    4778:	00004141 	.word	0x00004141
    477c:	200008ac 	.word	0x200008ac
    4780:	0000b60d 	.word	0x0000b60d

00004784 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    4784:	b590      	push	{r4, r7, lr}
    4786:	b08d      	sub	sp, #52	; 0x34
    4788:	af02      	add	r7, sp, #8
    478a:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	7a1b      	ldrb	r3, [r3, #8]
    4790:	4618      	mov	r0, r3
    4792:	4b51      	ldr	r3, [pc, #324]	; (48d8 <usb_d_ep_transfer+0x154>)
    4794:	4798      	blx	r3
    4796:	4603      	mov	r3, r0
    4798:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    479a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    479e:	015b      	lsls	r3, r3, #5
    47a0:	4a4e      	ldr	r2, [pc, #312]	; (48dc <usb_d_ep_transfer+0x158>)
    47a2:	4413      	add	r3, r2
    47a4:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    47a6:	687b      	ldr	r3, [r7, #4]
    47a8:	7a1b      	ldrb	r3, [r3, #8]
    47aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    47ae:	2b00      	cmp	r3, #0
    47b0:	bf14      	ite	ne
    47b2:	2301      	movne	r3, #1
    47b4:	2300      	moveq	r3, #0
    47b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    47ba:	687b      	ldr	r3, [r7, #4]
    47bc:	7a5b      	ldrb	r3, [r3, #9]
    47be:	2b00      	cmp	r3, #0
    47c0:	bf14      	ite	ne
    47c2:	2301      	movne	r3, #1
    47c4:	2300      	moveq	r3, #0
    47c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	685b      	ldr	r3, [r3, #4]
    47ce:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    47d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
    47d4:	2b00      	cmp	r3, #0
    47d6:	da02      	bge.n	47de <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    47d8:	f06f 0311 	mvn.w	r3, #17
    47dc:	e077      	b.n	48ce <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    47de:	f107 0308 	add.w	r3, r7, #8
    47e2:	4618      	mov	r0, r3
    47e4:	4b3e      	ldr	r3, [pc, #248]	; (48e0 <usb_d_ep_transfer+0x15c>)
    47e6:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    47e8:	69bb      	ldr	r3, [r7, #24]
    47ea:	789b      	ldrb	r3, [r3, #2]
    47ec:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    47ee:	7bfb      	ldrb	r3, [r7, #15]
    47f0:	b2db      	uxtb	r3, r3
    47f2:	2b01      	cmp	r3, #1
    47f4:	d10c      	bne.n	4810 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    47f6:	69bb      	ldr	r3, [r7, #24]
    47f8:	2203      	movs	r2, #3
    47fa:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    47fc:	f107 0308 	add.w	r3, r7, #8
    4800:	4618      	mov	r0, r3
    4802:	4b38      	ldr	r3, [pc, #224]	; (48e4 <usb_d_ep_transfer+0x160>)
    4804:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4806:	69bb      	ldr	r3, [r7, #24]
    4808:	781b      	ldrb	r3, [r3, #0]
    480a:	2b00      	cmp	r3, #0
    480c:	d151      	bne.n	48b2 <usb_d_ep_transfer+0x12e>
    480e:	e017      	b.n	4840 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    4810:	f107 0308 	add.w	r3, r7, #8
    4814:	4618      	mov	r0, r3
    4816:	4b33      	ldr	r3, [pc, #204]	; (48e4 <usb_d_ep_transfer+0x160>)
    4818:	4798      	blx	r3
		switch (state) {
    481a:	7bfb      	ldrb	r3, [r7, #15]
    481c:	b2db      	uxtb	r3, r3
    481e:	2b05      	cmp	r3, #5
    4820:	d004      	beq.n	482c <usb_d_ep_transfer+0xa8>
    4822:	2b06      	cmp	r3, #6
    4824:	d004      	beq.n	4830 <usb_d_ep_transfer+0xac>
    4826:	2b00      	cmp	r3, #0
    4828:	d005      	beq.n	4836 <usb_d_ep_transfer+0xb2>
    482a:	e007      	b.n	483c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    482c:	2302      	movs	r3, #2
    482e:	e04e      	b.n	48ce <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    4830:	f06f 030f 	mvn.w	r3, #15
    4834:	e04b      	b.n	48ce <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    4836:	f06f 0312 	mvn.w	r3, #18
    483a:	e048      	b.n	48ce <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    483c:	2301      	movs	r3, #1
    483e:	e046      	b.n	48ce <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    4840:	69bb      	ldr	r3, [r7, #24]
    4842:	7c9b      	ldrb	r3, [r3, #18]
    4844:	b29a      	uxth	r2, r3
    4846:	69bb      	ldr	r3, [r7, #24]
    4848:	7cdb      	ldrb	r3, [r3, #19]
    484a:	b29b      	uxth	r3, r3
    484c:	021b      	lsls	r3, r3, #8
    484e:	b29b      	uxth	r3, r3
    4850:	4413      	add	r3, r2
    4852:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    4854:	8afb      	ldrh	r3, [r7, #22]
    4856:	2b00      	cmp	r3, #0
    4858:	d10b      	bne.n	4872 <usb_d_ep_transfer+0xee>
			dir                 = true;
    485a:	2301      	movs	r3, #1
    485c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    4860:	2300      	movs	r3, #0
    4862:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    4864:	2301      	movs	r3, #1
    4866:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    486a:	69bb      	ldr	r3, [r7, #24]
    486c:	2204      	movs	r2, #4
    486e:	709a      	strb	r2, [r3, #2]
    4870:	e01f      	b.n	48b2 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    4872:	69bb      	ldr	r3, [r7, #24]
    4874:	7b1b      	ldrb	r3, [r3, #12]
    4876:	f003 0380 	and.w	r3, r3, #128	; 0x80
    487a:	2b00      	cmp	r3, #0
    487c:	bf14      	ite	ne
    487e:	2301      	movne	r3, #1
    4880:	2300      	moveq	r3, #0
    4882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    4886:	8afa      	ldrh	r2, [r7, #22]
    4888:	6a3b      	ldr	r3, [r7, #32]
    488a:	429a      	cmp	r2, r3
    488c:	d201      	bcs.n	4892 <usb_d_ep_transfer+0x10e>
				len = req_len;
    488e:	8afb      	ldrh	r3, [r7, #22]
    4890:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    4892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    4896:	2b00      	cmp	r3, #0
    4898:	d008      	beq.n	48ac <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    489a:	8afa      	ldrh	r2, [r7, #22]
    489c:	6a3b      	ldr	r3, [r7, #32]
    489e:	429a      	cmp	r2, r3
    48a0:	bf8c      	ite	hi
    48a2:	2301      	movhi	r3, #1
    48a4:	2300      	movls	r3, #0
    48a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    48aa:	e002      	b.n	48b2 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    48ac:	2300      	movs	r3, #0
    48ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    48b2:	687b      	ldr	r3, [r7, #4]
    48b4:	7a18      	ldrb	r0, [r3, #8]
    48b6:	687b      	ldr	r3, [r7, #4]
    48b8:	681a      	ldr	r2, [r3, #0]
    48ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    48be:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    48c2:	9300      	str	r3, [sp, #0]
    48c4:	6a3b      	ldr	r3, [r7, #32]
    48c6:	4c08      	ldr	r4, [pc, #32]	; (48e8 <usb_d_ep_transfer+0x164>)
    48c8:	47a0      	blx	r4
    48ca:	6138      	str	r0, [r7, #16]
	return rc;
    48cc:	693b      	ldr	r3, [r7, #16]
}
    48ce:	4618      	mov	r0, r3
    48d0:	372c      	adds	r7, #44	; 0x2c
    48d2:	46bd      	mov	sp, r7
    48d4:	bd90      	pop	{r4, r7, pc}
    48d6:	bf00      	nop
    48d8:	00004141 	.word	0x00004141
    48dc:	200008ac 	.word	0x200008ac
    48e0:	0000329d 	.word	0x0000329d
    48e4:	000032c3 	.word	0x000032c3
    48e8:	000041c1 	.word	0x000041c1

000048ec <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    48ec:	b580      	push	{r7, lr}
    48ee:	b084      	sub	sp, #16
    48f0:	af00      	add	r7, sp, #0
    48f2:	4603      	mov	r3, r0
    48f4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    48f6:	79fb      	ldrb	r3, [r7, #7]
    48f8:	4618      	mov	r0, r3
    48fa:	4b0e      	ldr	r3, [pc, #56]	; (4934 <usb_d_ep_abort+0x48>)
    48fc:	4798      	blx	r3
    48fe:	4603      	mov	r3, r0
    4900:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4902:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4906:	015b      	lsls	r3, r3, #5
    4908:	4a0b      	ldr	r2, [pc, #44]	; (4938 <usb_d_ep_abort+0x4c>)
    490a:	4413      	add	r3, r2
    490c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    490e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4912:	2b00      	cmp	r3, #0
    4914:	db0a      	blt.n	492c <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    4916:	79fb      	ldrb	r3, [r7, #7]
    4918:	4618      	mov	r0, r3
    491a:	4b08      	ldr	r3, [pc, #32]	; (493c <usb_d_ep_abort+0x50>)
    491c:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    491e:	68bb      	ldr	r3, [r7, #8]
    4920:	2201      	movs	r2, #1
    4922:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    4924:	68bb      	ldr	r3, [r7, #8]
    4926:	2204      	movs	r2, #4
    4928:	70da      	strb	r2, [r3, #3]
    492a:	e000      	b.n	492e <usb_d_ep_abort+0x42>
		return;
    492c:	bf00      	nop
}
    492e:	3710      	adds	r7, #16
    4930:	46bd      	mov	sp, r7
    4932:	bd80      	pop	{r7, pc}
    4934:	00004141 	.word	0x00004141
    4938:	200008ac 	.word	0x200008ac
    493c:	0000bd79 	.word	0x0000bd79

00004940 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    4940:	b580      	push	{r7, lr}
    4942:	b086      	sub	sp, #24
    4944:	af00      	add	r7, sp, #0
    4946:	4603      	mov	r3, r0
    4948:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    494a:	79fb      	ldrb	r3, [r7, #7]
    494c:	4618      	mov	r0, r3
    494e:	4b1a      	ldr	r3, [pc, #104]	; (49b8 <_usb_d_ep_halt_clr+0x78>)
    4950:	4798      	blx	r3
    4952:	4603      	mov	r3, r0
    4954:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4956:	f997 3017 	ldrsb.w	r3, [r7, #23]
    495a:	015b      	lsls	r3, r3, #5
    495c:	4a17      	ldr	r2, [pc, #92]	; (49bc <_usb_d_ep_halt_clr+0x7c>)
    495e:	4413      	add	r3, r2
    4960:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    4962:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4966:	2b00      	cmp	r3, #0
    4968:	da02      	bge.n	4970 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    496a:	f06f 0311 	mvn.w	r3, #17
    496e:	e01f      	b.n	49b0 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    4970:	79fb      	ldrb	r3, [r7, #7]
    4972:	2102      	movs	r1, #2
    4974:	4618      	mov	r0, r3
    4976:	4b12      	ldr	r3, [pc, #72]	; (49c0 <_usb_d_ep_halt_clr+0x80>)
    4978:	4798      	blx	r3
    497a:	4603      	mov	r3, r0
    497c:	2b00      	cmp	r3, #0
    497e:	d016      	beq.n	49ae <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4980:	79fb      	ldrb	r3, [r7, #7]
    4982:	2100      	movs	r1, #0
    4984:	4618      	mov	r0, r3
    4986:	4b0e      	ldr	r3, [pc, #56]	; (49c0 <_usb_d_ep_halt_clr+0x80>)
    4988:	4798      	blx	r3
    498a:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    498c:	68fb      	ldr	r3, [r7, #12]
    498e:	2b00      	cmp	r3, #0
    4990:	da01      	bge.n	4996 <_usb_d_ep_halt_clr+0x56>
			return rc;
    4992:	68fb      	ldr	r3, [r7, #12]
    4994:	e00c      	b.n	49b0 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4996:	693b      	ldr	r3, [r7, #16]
    4998:	2201      	movs	r2, #1
    499a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    499c:	693b      	ldr	r3, [r7, #16]
    499e:	2203      	movs	r2, #3
    49a0:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    49a2:	693b      	ldr	r3, [r7, #16]
    49a4:	69db      	ldr	r3, [r3, #28]
    49a6:	79f8      	ldrb	r0, [r7, #7]
    49a8:	2200      	movs	r2, #0
    49aa:	2103      	movs	r1, #3
    49ac:	4798      	blx	r3
	}
	return ERR_NONE;
    49ae:	2300      	movs	r3, #0
}
    49b0:	4618      	mov	r0, r3
    49b2:	3718      	adds	r7, #24
    49b4:	46bd      	mov	sp, r7
    49b6:	bd80      	pop	{r7, pc}
    49b8:	00004141 	.word	0x00004141
    49bc:	200008ac 	.word	0x200008ac
    49c0:	0000b985 	.word	0x0000b985

000049c4 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    49c4:	b580      	push	{r7, lr}
    49c6:	b082      	sub	sp, #8
    49c8:	af00      	add	r7, sp, #0
    49ca:	4603      	mov	r3, r0
    49cc:	460a      	mov	r2, r1
    49ce:	71fb      	strb	r3, [r7, #7]
    49d0:	4613      	mov	r3, r2
    49d2:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    49d4:	79bb      	ldrb	r3, [r7, #6]
    49d6:	2b00      	cmp	r3, #0
    49d8:	d105      	bne.n	49e6 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    49da:	79fb      	ldrb	r3, [r7, #7]
    49dc:	4618      	mov	r0, r3
    49de:	4b0c      	ldr	r3, [pc, #48]	; (4a10 <usb_d_ep_halt+0x4c>)
    49e0:	4798      	blx	r3
    49e2:	4603      	mov	r3, r0
    49e4:	e00f      	b.n	4a06 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    49e6:	79bb      	ldrb	r3, [r7, #6]
    49e8:	2b01      	cmp	r3, #1
    49ea:	d106      	bne.n	49fa <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    49ec:	79fb      	ldrb	r3, [r7, #7]
    49ee:	2101      	movs	r1, #1
    49f0:	4618      	mov	r0, r3
    49f2:	4b08      	ldr	r3, [pc, #32]	; (4a14 <usb_d_ep_halt+0x50>)
    49f4:	4798      	blx	r3
    49f6:	4603      	mov	r3, r0
    49f8:	e005      	b.n	4a06 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    49fa:	79fb      	ldrb	r3, [r7, #7]
    49fc:	2102      	movs	r1, #2
    49fe:	4618      	mov	r0, r3
    4a00:	4b04      	ldr	r3, [pc, #16]	; (4a14 <usb_d_ep_halt+0x50>)
    4a02:	4798      	blx	r3
    4a04:	4603      	mov	r3, r0
	}
}
    4a06:	4618      	mov	r0, r3
    4a08:	3708      	adds	r7, #8
    4a0a:	46bd      	mov	sp, r7
    4a0c:	bd80      	pop	{r7, pc}
    4a0e:	bf00      	nop
    4a10:	00004941 	.word	0x00004941
    4a14:	0000b985 	.word	0x0000b985

00004a18 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    4a18:	b580      	push	{r7, lr}
    4a1a:	b086      	sub	sp, #24
    4a1c:	af00      	add	r7, sp, #0
    4a1e:	4603      	mov	r3, r0
    4a20:	603a      	str	r2, [r7, #0]
    4a22:	71fb      	strb	r3, [r7, #7]
    4a24:	460b      	mov	r3, r1
    4a26:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4a28:	79fb      	ldrb	r3, [r7, #7]
    4a2a:	4618      	mov	r0, r3
    4a2c:	4b16      	ldr	r3, [pc, #88]	; (4a88 <usb_d_ep_register_callback+0x70>)
    4a2e:	4798      	blx	r3
    4a30:	4603      	mov	r3, r0
    4a32:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4a38:	015b      	lsls	r3, r3, #5
    4a3a:	4a14      	ldr	r2, [pc, #80]	; (4a8c <usb_d_ep_register_callback+0x74>)
    4a3c:	4413      	add	r3, r2
    4a3e:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    4a40:	683b      	ldr	r3, [r7, #0]
    4a42:	2b00      	cmp	r3, #0
    4a44:	d001      	beq.n	4a4a <usb_d_ep_register_callback+0x32>
    4a46:	683b      	ldr	r3, [r7, #0]
    4a48:	e000      	b.n	4a4c <usb_d_ep_register_callback+0x34>
    4a4a:	4b11      	ldr	r3, [pc, #68]	; (4a90 <usb_d_ep_register_callback+0x78>)
    4a4c:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    4a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4a52:	2b00      	cmp	r3, #0
    4a54:	db13      	blt.n	4a7e <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    4a56:	79bb      	ldrb	r3, [r7, #6]
    4a58:	2b01      	cmp	r3, #1
    4a5a:	d008      	beq.n	4a6e <usb_d_ep_register_callback+0x56>
    4a5c:	2b02      	cmp	r3, #2
    4a5e:	d00a      	beq.n	4a76 <usb_d_ep_register_callback+0x5e>
    4a60:	2b00      	cmp	r3, #0
    4a62:	d000      	beq.n	4a66 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    4a64:	e00c      	b.n	4a80 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    4a66:	693b      	ldr	r3, [r7, #16]
    4a68:	68fa      	ldr	r2, [r7, #12]
    4a6a:	615a      	str	r2, [r3, #20]
		break;
    4a6c:	e008      	b.n	4a80 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    4a6e:	693b      	ldr	r3, [r7, #16]
    4a70:	68fa      	ldr	r2, [r7, #12]
    4a72:	619a      	str	r2, [r3, #24]
		break;
    4a74:	e004      	b.n	4a80 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    4a76:	693b      	ldr	r3, [r7, #16]
    4a78:	68fa      	ldr	r2, [r7, #12]
    4a7a:	61da      	str	r2, [r3, #28]
		break;
    4a7c:	e000      	b.n	4a80 <usb_d_ep_register_callback+0x68>
		return;
    4a7e:	bf00      	nop
	}
}
    4a80:	3718      	adds	r7, #24
    4a82:	46bd      	mov	sp, r7
    4a84:	bd80      	pop	{r7, pc}
    4a86:	bf00      	nop
    4a88:	00004141 	.word	0x00004141
    4a8c:	200008ac 	.word	0x200008ac
    4a90:	00004215 	.word	0x00004215

00004a94 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    4a94:	b480      	push	{r7}
    4a96:	b085      	sub	sp, #20
    4a98:	af00      	add	r7, sp, #0
    4a9a:	4603      	mov	r3, r0
    4a9c:	60b9      	str	r1, [r7, #8]
    4a9e:	607a      	str	r2, [r7, #4]
    4aa0:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    4aa2:	7bfb      	ldrb	r3, [r7, #15]
    4aa4:	f083 0301 	eor.w	r3, r3, #1
    4aa8:	b2db      	uxtb	r3, r3
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d000      	beq.n	4ab0 <assert+0x1c>
		__asm("BKPT #0");
    4aae:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    4ab0:	bf00      	nop
    4ab2:	3714      	adds	r7, #20
    4ab4:	46bd      	mov	sp, r7
    4ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aba:	4770      	bx	lr

00004abc <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    4abc:	b480      	push	{r7}
    4abe:	b085      	sub	sp, #20
    4ac0:	af00      	add	r7, sp, #0
    4ac2:	6078      	str	r0, [r7, #4]
    4ac4:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    4ac6:	687b      	ldr	r3, [r7, #4]
    4ac8:	681b      	ldr	r3, [r3, #0]
    4aca:	60fb      	str	r3, [r7, #12]
    4acc:	e008      	b.n	4ae0 <is_list_element+0x24>
		if (it == element) {
    4ace:	68fa      	ldr	r2, [r7, #12]
    4ad0:	683b      	ldr	r3, [r7, #0]
    4ad2:	429a      	cmp	r2, r3
    4ad4:	d101      	bne.n	4ada <is_list_element+0x1e>
			return true;
    4ad6:	2301      	movs	r3, #1
    4ad8:	e006      	b.n	4ae8 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    4ada:	68fb      	ldr	r3, [r7, #12]
    4adc:	681b      	ldr	r3, [r3, #0]
    4ade:	60fb      	str	r3, [r7, #12]
    4ae0:	68fb      	ldr	r3, [r7, #12]
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d1f3      	bne.n	4ace <is_list_element+0x12>
		}
	}

	return false;
    4ae6:	2300      	movs	r3, #0
}
    4ae8:	4618      	mov	r0, r3
    4aea:	3714      	adds	r7, #20
    4aec:	46bd      	mov	sp, r7
    4aee:	f85d 7b04 	ldr.w	r7, [sp], #4
    4af2:	4770      	bx	lr

00004af4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    4af4:	b580      	push	{r7, lr}
    4af6:	b082      	sub	sp, #8
    4af8:	af00      	add	r7, sp, #0
    4afa:	6078      	str	r0, [r7, #4]
    4afc:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    4afe:	6839      	ldr	r1, [r7, #0]
    4b00:	6878      	ldr	r0, [r7, #4]
    4b02:	4b0f      	ldr	r3, [pc, #60]	; (4b40 <list_insert_as_head+0x4c>)
    4b04:	4798      	blx	r3
    4b06:	4603      	mov	r3, r0
    4b08:	2b00      	cmp	r3, #0
    4b0a:	bf14      	ite	ne
    4b0c:	2301      	movne	r3, #1
    4b0e:	2300      	moveq	r3, #0
    4b10:	b2db      	uxtb	r3, r3
    4b12:	f083 0301 	eor.w	r3, r3, #1
    4b16:	b2db      	uxtb	r3, r3
    4b18:	f003 0301 	and.w	r3, r3, #1
    4b1c:	b2db      	uxtb	r3, r3
    4b1e:	2239      	movs	r2, #57	; 0x39
    4b20:	4908      	ldr	r1, [pc, #32]	; (4b44 <list_insert_as_head+0x50>)
    4b22:	4618      	mov	r0, r3
    4b24:	4b08      	ldr	r3, [pc, #32]	; (4b48 <list_insert_as_head+0x54>)
    4b26:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	681a      	ldr	r2, [r3, #0]
    4b2c:	683b      	ldr	r3, [r7, #0]
    4b2e:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    4b30:	687b      	ldr	r3, [r7, #4]
    4b32:	683a      	ldr	r2, [r7, #0]
    4b34:	601a      	str	r2, [r3, #0]
}
    4b36:	bf00      	nop
    4b38:	3708      	adds	r7, #8
    4b3a:	46bd      	mov	sp, r7
    4b3c:	bd80      	pop	{r7, pc}
    4b3e:	bf00      	nop
    4b40:	00004abd 	.word	0x00004abd
    4b44:	00010ccc 	.word	0x00010ccc
    4b48:	00004a95 	.word	0x00004a95

00004b4c <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    4b4c:	b480      	push	{r7}
    4b4e:	b083      	sub	sp, #12
    4b50:	af00      	add	r7, sp, #0
    4b52:	6078      	str	r0, [r7, #4]
    4b54:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    4b56:	687b      	ldr	r3, [r7, #4]
    4b58:	681a      	ldr	r2, [r3, #0]
    4b5a:	683b      	ldr	r3, [r7, #0]
    4b5c:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	683a      	ldr	r2, [r7, #0]
    4b62:	601a      	str	r2, [r3, #0]
}
    4b64:	bf00      	nop
    4b66:	370c      	adds	r7, #12
    4b68:	46bd      	mov	sp, r7
    4b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b6e:	4770      	bx	lr

00004b70 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    4b70:	b580      	push	{r7, lr}
    4b72:	b084      	sub	sp, #16
    4b74:	af00      	add	r7, sp, #0
    4b76:	6078      	str	r0, [r7, #4]
    4b78:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    4b7a:	687b      	ldr	r3, [r7, #4]
    4b7c:	681b      	ldr	r3, [r3, #0]
    4b7e:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    4b80:	6839      	ldr	r1, [r7, #0]
    4b82:	6878      	ldr	r0, [r7, #4]
    4b84:	4b16      	ldr	r3, [pc, #88]	; (4be0 <list_insert_at_end+0x70>)
    4b86:	4798      	blx	r3
    4b88:	4603      	mov	r3, r0
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	bf14      	ite	ne
    4b8e:	2301      	movne	r3, #1
    4b90:	2300      	moveq	r3, #0
    4b92:	b2db      	uxtb	r3, r3
    4b94:	f083 0301 	eor.w	r3, r3, #1
    4b98:	b2db      	uxtb	r3, r3
    4b9a:	f003 0301 	and.w	r3, r3, #1
    4b9e:	b2db      	uxtb	r3, r3
    4ba0:	224f      	movs	r2, #79	; 0x4f
    4ba2:	4910      	ldr	r1, [pc, #64]	; (4be4 <list_insert_at_end+0x74>)
    4ba4:	4618      	mov	r0, r3
    4ba6:	4b10      	ldr	r3, [pc, #64]	; (4be8 <list_insert_at_end+0x78>)
    4ba8:	4798      	blx	r3

	if (!list->head) {
    4baa:	687b      	ldr	r3, [r7, #4]
    4bac:	681b      	ldr	r3, [r3, #0]
    4bae:	2b00      	cmp	r3, #0
    4bb0:	d109      	bne.n	4bc6 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    4bb2:	687b      	ldr	r3, [r7, #4]
    4bb4:	683a      	ldr	r2, [r7, #0]
    4bb6:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    4bb8:	683b      	ldr	r3, [r7, #0]
    4bba:	2200      	movs	r2, #0
    4bbc:	601a      	str	r2, [r3, #0]
		return;
    4bbe:	e00c      	b.n	4bda <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    4bc0:	68fb      	ldr	r3, [r7, #12]
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    4bc6:	68fb      	ldr	r3, [r7, #12]
    4bc8:	681b      	ldr	r3, [r3, #0]
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d1f8      	bne.n	4bc0 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    4bce:	68fb      	ldr	r3, [r7, #12]
    4bd0:	683a      	ldr	r2, [r7, #0]
    4bd2:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    4bd4:	683b      	ldr	r3, [r7, #0]
    4bd6:	2200      	movs	r2, #0
    4bd8:	601a      	str	r2, [r3, #0]
}
    4bda:	3710      	adds	r7, #16
    4bdc:	46bd      	mov	sp, r7
    4bde:	bd80      	pop	{r7, pc}
    4be0:	00004abd 	.word	0x00004abd
    4be4:	00010ccc 	.word	0x00010ccc
    4be8:	00004a95 	.word	0x00004a95

00004bec <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    4bec:	b480      	push	{r7}
    4bee:	b085      	sub	sp, #20
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
	if (list->head) {
    4bf4:	687b      	ldr	r3, [r7, #4]
    4bf6:	681b      	ldr	r3, [r3, #0]
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d009      	beq.n	4c10 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    4bfc:	687b      	ldr	r3, [r7, #4]
    4bfe:	681b      	ldr	r3, [r3, #0]
    4c00:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	681b      	ldr	r3, [r3, #0]
    4c06:	681a      	ldr	r2, [r3, #0]
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    4c0c:	68fb      	ldr	r3, [r7, #12]
    4c0e:	e000      	b.n	4c12 <list_remove_head+0x26>
	}

	return NULL;
    4c10:	2300      	movs	r3, #0
}
    4c12:	4618      	mov	r0, r3
    4c14:	3714      	adds	r7, #20
    4c16:	46bd      	mov	sp, r7
    4c18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c1c:	4770      	bx	lr

00004c1e <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    4c1e:	b480      	push	{r7}
    4c20:	b085      	sub	sp, #20
    4c22:	af00      	add	r7, sp, #0
    4c24:	6078      	str	r0, [r7, #4]
    4c26:	6039      	str	r1, [r7, #0]
	if (!element) {
    4c28:	683b      	ldr	r3, [r7, #0]
    4c2a:	2b00      	cmp	r3, #0
    4c2c:	d101      	bne.n	4c32 <list_delete_element+0x14>
		return false;
    4c2e:	2300      	movs	r3, #0
    4c30:	e024      	b.n	4c7c <list_delete_element+0x5e>
	}

	if (list->head == element) {
    4c32:	687b      	ldr	r3, [r7, #4]
    4c34:	681a      	ldr	r2, [r3, #0]
    4c36:	683b      	ldr	r3, [r7, #0]
    4c38:	429a      	cmp	r2, r3
    4c3a:	d106      	bne.n	4c4a <list_delete_element+0x2c>
		list->head = list->head->next;
    4c3c:	687b      	ldr	r3, [r7, #4]
    4c3e:	681b      	ldr	r3, [r3, #0]
    4c40:	681a      	ldr	r2, [r3, #0]
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	601a      	str	r2, [r3, #0]
		return true;
    4c46:	2301      	movs	r3, #1
    4c48:	e018      	b.n	4c7c <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    4c4a:	687b      	ldr	r3, [r7, #4]
    4c4c:	681b      	ldr	r3, [r3, #0]
    4c4e:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    4c50:	e002      	b.n	4c58 <list_delete_element+0x3a>
			it = it->next;
    4c52:	68fb      	ldr	r3, [r7, #12]
    4c54:	681b      	ldr	r3, [r3, #0]
    4c56:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    4c58:	68fb      	ldr	r3, [r7, #12]
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	d004      	beq.n	4c68 <list_delete_element+0x4a>
    4c5e:	68fb      	ldr	r3, [r7, #12]
    4c60:	681a      	ldr	r2, [r3, #0]
    4c62:	683b      	ldr	r3, [r7, #0]
    4c64:	429a      	cmp	r2, r3
    4c66:	d1f4      	bne.n	4c52 <list_delete_element+0x34>
		}
		if (it) {
    4c68:	68fb      	ldr	r3, [r7, #12]
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	d005      	beq.n	4c7a <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    4c6e:	683b      	ldr	r3, [r7, #0]
    4c70:	681a      	ldr	r2, [r3, #0]
    4c72:	68fb      	ldr	r3, [r7, #12]
    4c74:	601a      	str	r2, [r3, #0]
			return true;
    4c76:	2301      	movs	r3, #1
    4c78:	e000      	b.n	4c7c <list_delete_element+0x5e>
		}
	}

	return false;
    4c7a:	2300      	movs	r3, #0
}
    4c7c:	4618      	mov	r0, r3
    4c7e:	3714      	adds	r7, #20
    4c80:	46bd      	mov	sp, r7
    4c82:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c86:	4770      	bx	lr

00004c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4c88:	b480      	push	{r7}
    4c8a:	b083      	sub	sp, #12
    4c8c:	af00      	add	r7, sp, #0
    4c8e:	4603      	mov	r3, r0
    4c90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c96:	2b00      	cmp	r3, #0
    4c98:	db0b      	blt.n	4cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c9a:	4909      	ldr	r1, [pc, #36]	; (4cc0 <__NVIC_EnableIRQ+0x38>)
    4c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4ca0:	095b      	lsrs	r3, r3, #5
    4ca2:	88fa      	ldrh	r2, [r7, #6]
    4ca4:	f002 021f 	and.w	r2, r2, #31
    4ca8:	2001      	movs	r0, #1
    4caa:	fa00 f202 	lsl.w	r2, r0, r2
    4cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4cb2:	bf00      	nop
    4cb4:	370c      	adds	r7, #12
    4cb6:	46bd      	mov	sp, r7
    4cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cbc:	4770      	bx	lr
    4cbe:	bf00      	nop
    4cc0:	e000e100 	.word	0xe000e100

00004cc4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4cc4:	b480      	push	{r7}
    4cc6:	b083      	sub	sp, #12
    4cc8:	af00      	add	r7, sp, #0
    4cca:	4603      	mov	r3, r0
    4ccc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4cd2:	2b00      	cmp	r3, #0
    4cd4:	db10      	blt.n	4cf8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4cd6:	490b      	ldr	r1, [pc, #44]	; (4d04 <__NVIC_DisableIRQ+0x40>)
    4cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4cdc:	095b      	lsrs	r3, r3, #5
    4cde:	88fa      	ldrh	r2, [r7, #6]
    4ce0:	f002 021f 	and.w	r2, r2, #31
    4ce4:	2001      	movs	r0, #1
    4ce6:	fa00 f202 	lsl.w	r2, r0, r2
    4cea:	3320      	adds	r3, #32
    4cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4cf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4cf4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4cf8:	bf00      	nop
    4cfa:	370c      	adds	r7, #12
    4cfc:	46bd      	mov	sp, r7
    4cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d02:	4770      	bx	lr
    4d04:	e000e100 	.word	0xe000e100

00004d08 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4d08:	b480      	push	{r7}
    4d0a:	b083      	sub	sp, #12
    4d0c:	af00      	add	r7, sp, #0
    4d0e:	4603      	mov	r3, r0
    4d10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4d16:	2b00      	cmp	r3, #0
    4d18:	db0c      	blt.n	4d34 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d1a:	4909      	ldr	r1, [pc, #36]	; (4d40 <__NVIC_ClearPendingIRQ+0x38>)
    4d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4d20:	095b      	lsrs	r3, r3, #5
    4d22:	88fa      	ldrh	r2, [r7, #6]
    4d24:	f002 021f 	and.w	r2, r2, #31
    4d28:	2001      	movs	r0, #1
    4d2a:	fa00 f202 	lsl.w	r2, r0, r2
    4d2e:	3360      	adds	r3, #96	; 0x60
    4d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4d34:	bf00      	nop
    4d36:	370c      	adds	r7, #12
    4d38:	46bd      	mov	sp, r7
    4d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d3e:	4770      	bx	lr
    4d40:	e000e100 	.word	0xe000e100

00004d44 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    4d44:	b480      	push	{r7}
    4d46:	b083      	sub	sp, #12
    4d48:	af00      	add	r7, sp, #0
    4d4a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    4d4c:	687b      	ldr	r3, [r7, #4]
    4d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4d50:	095b      	lsrs	r3, r3, #5
    4d52:	f003 0301 	and.w	r3, r3, #1
    4d56:	2b00      	cmp	r3, #0
    4d58:	bf14      	ite	ne
    4d5a:	2301      	movne	r3, #1
    4d5c:	2300      	moveq	r3, #0
    4d5e:	b2db      	uxtb	r3, r3
}
    4d60:	4618      	mov	r0, r3
    4d62:	370c      	adds	r7, #12
    4d64:	46bd      	mov	sp, r7
    4d66:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d6a:	4770      	bx	lr

00004d6c <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    4d6c:	b480      	push	{r7}
    4d6e:	b083      	sub	sp, #12
    4d70:	af00      	add	r7, sp, #0
    4d72:	6078      	str	r0, [r7, #4]
    4d74:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    4d76:	687b      	ldr	r3, [r7, #4]
    4d78:	683a      	ldr	r2, [r7, #0]
    4d7a:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4d7c:	bf00      	nop
    4d7e:	370c      	adds	r7, #12
    4d80:	46bd      	mov	sp, r7
    4d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d86:	4770      	bx	lr

00004d88 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    4d88:	b480      	push	{r7}
    4d8a:	b083      	sub	sp, #12
    4d8c:	af00      	add	r7, sp, #0
    4d8e:	6078      	str	r0, [r7, #4]
    4d90:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    4d92:	687b      	ldr	r3, [r7, #4]
    4d94:	683a      	ldr	r2, [r7, #0]
    4d96:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4d98:	bf00      	nop
    4d9a:	370c      	adds	r7, #12
    4d9c:	46bd      	mov	sp, r7
    4d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4da2:	4770      	bx	lr

00004da4 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    4da4:	b480      	push	{r7}
    4da6:	b083      	sub	sp, #12
    4da8:	af00      	add	r7, sp, #0
    4daa:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    4dac:	687b      	ldr	r3, [r7, #4]
    4dae:	699b      	ldr	r3, [r3, #24]
    4db0:	f043 0201 	orr.w	r2, r3, #1
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4db8:	bf00      	nop
    4dba:	370c      	adds	r7, #12
    4dbc:	46bd      	mov	sp, r7
    4dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dc2:	4770      	bx	lr

00004dc4 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    4dc4:	b480      	push	{r7}
    4dc6:	b085      	sub	sp, #20
    4dc8:	af00      	add	r7, sp, #0
    4dca:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    4dcc:	687b      	ldr	r3, [r7, #4]
    4dce:	699b      	ldr	r3, [r3, #24]
    4dd0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    4dd2:	68fb      	ldr	r3, [r7, #12]
    4dd4:	f003 0301 	and.w	r3, r3, #1
    4dd8:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    4dda:	68fb      	ldr	r3, [r7, #12]
    4ddc:	2b00      	cmp	r3, #0
    4dde:	bf14      	ite	ne
    4de0:	2301      	movne	r3, #1
    4de2:	2300      	moveq	r3, #0
    4de4:	b2db      	uxtb	r3, r3
}
    4de6:	4618      	mov	r0, r3
    4de8:	3714      	adds	r7, #20
    4dea:	46bd      	mov	sp, r7
    4dec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4df0:	4770      	bx	lr

00004df2 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    4df2:	b480      	push	{r7}
    4df4:	b083      	sub	sp, #12
    4df6:	af00      	add	r7, sp, #0
    4df8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    4dfa:	687b      	ldr	r3, [r7, #4]
    4dfc:	699b      	ldr	r3, [r3, #24]
    4dfe:	f023 0201 	bic.w	r2, r3, #1
    4e02:	687b      	ldr	r3, [r7, #4]
    4e04:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4e06:	bf00      	nop
    4e08:	370c      	adds	r7, #12
    4e0a:	46bd      	mov	sp, r7
    4e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e10:	4770      	bx	lr

00004e12 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    4e12:	b480      	push	{r7}
    4e14:	b083      	sub	sp, #12
    4e16:	af00      	add	r7, sp, #0
    4e18:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	699b      	ldr	r3, [r3, #24]
    4e1e:	f043 0202 	orr.w	r2, r3, #2
    4e22:	687b      	ldr	r3, [r7, #4]
    4e24:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4e26:	bf00      	nop
    4e28:	370c      	adds	r7, #12
    4e2a:	46bd      	mov	sp, r7
    4e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e30:	4770      	bx	lr

00004e32 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    4e32:	b480      	push	{r7}
    4e34:	b083      	sub	sp, #12
    4e36:	af00      	add	r7, sp, #0
    4e38:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    4e3a:	687b      	ldr	r3, [r7, #4]
    4e3c:	699b      	ldr	r3, [r3, #24]
    4e3e:	f023 0202 	bic.w	r2, r3, #2
    4e42:	687b      	ldr	r3, [r7, #4]
    4e44:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4e46:	bf00      	nop
    4e48:	370c      	adds	r7, #12
    4e4a:	46bd      	mov	sp, r7
    4e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e50:	4770      	bx	lr

00004e52 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    4e52:	b480      	push	{r7}
    4e54:	b083      	sub	sp, #12
    4e56:	af00      	add	r7, sp, #0
    4e58:	6078      	str	r0, [r7, #4]
    4e5a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	699a      	ldr	r2, [r3, #24]
    4e60:	683b      	ldr	r3, [r7, #0]
    4e62:	431a      	orrs	r2, r3
    4e64:	687b      	ldr	r3, [r7, #4]
    4e66:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4e68:	bf00      	nop
    4e6a:	370c      	adds	r7, #12
    4e6c:	46bd      	mov	sp, r7
    4e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e72:	4770      	bx	lr

00004e74 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    4e74:	b480      	push	{r7}
    4e76:	b083      	sub	sp, #12
    4e78:	af00      	add	r7, sp, #0
    4e7a:	6078      	str	r0, [r7, #4]
    4e7c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	683a      	ldr	r2, [r7, #0]
    4e82:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4e84:	bf00      	nop
    4e86:	370c      	adds	r7, #12
    4e88:	46bd      	mov	sp, r7
    4e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e8e:	4770      	bx	lr

00004e90 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    4e90:	b480      	push	{r7}
    4e92:	b083      	sub	sp, #12
    4e94:	af00      	add	r7, sp, #0
    4e96:	6078      	str	r0, [r7, #4]
    4e98:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    4e9a:	687b      	ldr	r3, [r7, #4]
    4e9c:	683a      	ldr	r2, [r7, #0]
    4e9e:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    4ea0:	bf00      	nop
    4ea2:	370c      	adds	r7, #12
    4ea4:	46bd      	mov	sp, r7
    4ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eaa:	4770      	bx	lr

00004eac <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    4eac:	b480      	push	{r7}
    4eae:	b083      	sub	sp, #12
    4eb0:	af00      	add	r7, sp, #0
    4eb2:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    4eb8:	4618      	mov	r0, r3
    4eba:	370c      	adds	r7, #12
    4ebc:	46bd      	mov	sp, r7
    4ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ec2:	4770      	bx	lr

00004ec4 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    4ec4:	b480      	push	{r7}
    4ec6:	b083      	sub	sp, #12
    4ec8:	af00      	add	r7, sp, #0
    4eca:	6078      	str	r0, [r7, #4]
    4ecc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	683a      	ldr	r2, [r7, #0]
    4ed2:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    4ed4:	bf00      	nop
    4ed6:	370c      	adds	r7, #12
    4ed8:	46bd      	mov	sp, r7
    4eda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ede:	4770      	bx	lr

00004ee0 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    4ee0:	b480      	push	{r7}
    4ee2:	b083      	sub	sp, #12
    4ee4:	af00      	add	r7, sp, #0
    4ee6:	6078      	str	r0, [r7, #4]
    4ee8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    4eea:	687b      	ldr	r3, [r7, #4]
    4eec:	683a      	ldr	r2, [r7, #0]
    4eee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    4ef2:	bf00      	nop
    4ef4:	370c      	adds	r7, #12
    4ef6:	46bd      	mov	sp, r7
    4ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4efc:	4770      	bx	lr

00004efe <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    4efe:	b480      	push	{r7}
    4f00:	b083      	sub	sp, #12
    4f02:	af00      	add	r7, sp, #0
    4f04:	6078      	str	r0, [r7, #4]
    4f06:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	683a      	ldr	r2, [r7, #0]
    4f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    4f10:	bf00      	nop
    4f12:	370c      	adds	r7, #12
    4f14:	46bd      	mov	sp, r7
    4f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f1a:	4770      	bx	lr

00004f1c <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    4f1c:	b480      	push	{r7}
    4f1e:	b083      	sub	sp, #12
    4f20:	af00      	add	r7, sp, #0
    4f22:	6078      	str	r0, [r7, #4]
    4f24:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    4f26:	687b      	ldr	r3, [r7, #4]
    4f28:	683a      	ldr	r2, [r7, #0]
    4f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    4f2e:	bf00      	nop
    4f30:	370c      	adds	r7, #12
    4f32:	46bd      	mov	sp, r7
    4f34:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f38:	4770      	bx	lr

00004f3a <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    4f3a:	b480      	push	{r7}
    4f3c:	b083      	sub	sp, #12
    4f3e:	af00      	add	r7, sp, #0
    4f40:	6078      	str	r0, [r7, #4]
    4f42:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	683a      	ldr	r2, [r7, #0]
    4f48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    4f4c:	bf00      	nop
    4f4e:	370c      	adds	r7, #12
    4f50:	46bd      	mov	sp, r7
    4f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f56:	4770      	bx	lr

00004f58 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    4f58:	b480      	push	{r7}
    4f5a:	b083      	sub	sp, #12
    4f5c:	af00      	add	r7, sp, #0
    4f5e:	6078      	str	r0, [r7, #4]
    4f60:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    4f62:	687b      	ldr	r3, [r7, #4]
    4f64:	683a      	ldr	r2, [r7, #0]
    4f66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4f6a:	bf00      	nop
    4f6c:	370c      	adds	r7, #12
    4f6e:	46bd      	mov	sp, r7
    4f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f74:	4770      	bx	lr

00004f76 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    4f76:	b480      	push	{r7}
    4f78:	b083      	sub	sp, #12
    4f7a:	af00      	add	r7, sp, #0
    4f7c:	6078      	str	r0, [r7, #4]
    4f7e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    4f80:	687b      	ldr	r3, [r7, #4]
    4f82:	683a      	ldr	r2, [r7, #0]
    4f84:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    4f88:	bf00      	nop
    4f8a:	370c      	adds	r7, #12
    4f8c:	46bd      	mov	sp, r7
    4f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f92:	4770      	bx	lr

00004f94 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    4f94:	b480      	push	{r7}
    4f96:	b083      	sub	sp, #12
    4f98:	af00      	add	r7, sp, #0
    4f9a:	6078      	str	r0, [r7, #4]
    4f9c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    4f9e:	687b      	ldr	r3, [r7, #4]
    4fa0:	683a      	ldr	r2, [r7, #0]
    4fa2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4fa6:	bf00      	nop
    4fa8:	370c      	adds	r7, #12
    4faa:	46bd      	mov	sp, r7
    4fac:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fb0:	4770      	bx	lr

00004fb2 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    4fb2:	b480      	push	{r7}
    4fb4:	b083      	sub	sp, #12
    4fb6:	af00      	add	r7, sp, #0
    4fb8:	6078      	str	r0, [r7, #4]
    4fba:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    4fbc:	687b      	ldr	r3, [r7, #4]
    4fbe:	683a      	ldr	r2, [r7, #0]
    4fc0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    4fc4:	bf00      	nop
    4fc6:	370c      	adds	r7, #12
    4fc8:	46bd      	mov	sp, r7
    4fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fce:	4770      	bx	lr

00004fd0 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    4fd0:	b480      	push	{r7}
    4fd2:	b083      	sub	sp, #12
    4fd4:	af00      	add	r7, sp, #0
    4fd6:	6078      	str	r0, [r7, #4]
    4fd8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    4fda:	687b      	ldr	r3, [r7, #4]
    4fdc:	683a      	ldr	r2, [r7, #0]
    4fde:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4fe2:	bf00      	nop
    4fe4:	370c      	adds	r7, #12
    4fe6:	46bd      	mov	sp, r7
    4fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fec:	4770      	bx	lr
	...

00004ff0 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    4ff0:	b580      	push	{r7, lr}
    4ff2:	b082      	sub	sp, #8
    4ff4:	af00      	add	r7, sp, #0
    4ff6:	6078      	str	r0, [r7, #4]
    4ff8:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    4ffa:	687b      	ldr	r3, [r7, #4]
    4ffc:	683a      	ldr	r2, [r7, #0]
    4ffe:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    5000:	687b      	ldr	r3, [r7, #4]
    5002:	681b      	ldr	r3, [r3, #0]
    5004:	4618      	mov	r0, r3
    5006:	4b55      	ldr	r3, [pc, #340]	; (515c <_can_async_init+0x16c>)
    5008:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    500a:	bf00      	nop
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	681b      	ldr	r3, [r3, #0]
    5010:	4618      	mov	r0, r3
    5012:	4b53      	ldr	r3, [pc, #332]	; (5160 <_can_async_init+0x170>)
    5014:	4798      	blx	r3
    5016:	4603      	mov	r3, r0
    5018:	f083 0301 	eor.w	r3, r3, #1
    501c:	b2db      	uxtb	r3, r3
    501e:	2b00      	cmp	r3, #0
    5020:	d1f4      	bne.n	500c <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    5022:	687b      	ldr	r3, [r7, #4]
    5024:	681b      	ldr	r3, [r3, #0]
    5026:	4618      	mov	r0, r3
    5028:	4b4e      	ldr	r3, [pc, #312]	; (5164 <_can_async_init+0x174>)
    502a:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    502c:	683b      	ldr	r3, [r7, #0]
    502e:	4a4e      	ldr	r2, [pc, #312]	; (5168 <_can_async_init+0x178>)
    5030:	4293      	cmp	r3, r2
    5032:	d17a      	bne.n	512a <_can_async_init+0x13a>
		_can1_dev    = dev;
    5034:	4a4d      	ldr	r2, [pc, #308]	; (516c <_can_async_init+0x17c>)
    5036:	687b      	ldr	r3, [r7, #4]
    5038:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    503a:	687b      	ldr	r3, [r7, #4]
    503c:	4a4c      	ldr	r2, [pc, #304]	; (5170 <_can_async_init+0x180>)
    503e:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	681b      	ldr	r3, [r3, #0]
    5044:	f44f 7140 	mov.w	r1, #768	; 0x300
    5048:	4618      	mov	r0, r3
    504a:	4b4a      	ldr	r3, [pc, #296]	; (5174 <_can_async_init+0x184>)
    504c:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    504e:	687b      	ldr	r3, [r7, #4]
    5050:	681b      	ldr	r3, [r3, #0]
    5052:	2102      	movs	r1, #2
    5054:	4618      	mov	r0, r3
    5056:	4b48      	ldr	r3, [pc, #288]	; (5178 <_can_async_init+0x188>)
    5058:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    505a:	687b      	ldr	r3, [r7, #4]
    505c:	681b      	ldr	r3, [r3, #0]
    505e:	4947      	ldr	r1, [pc, #284]	; (517c <_can_async_init+0x18c>)
    5060:	4618      	mov	r0, r3
    5062:	4b47      	ldr	r3, [pc, #284]	; (5180 <_can_async_init+0x190>)
    5064:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    5066:	687b      	ldr	r3, [r7, #4]
    5068:	681b      	ldr	r3, [r3, #0]
    506a:	4946      	ldr	r1, [pc, #280]	; (5184 <_can_async_init+0x194>)
    506c:	4618      	mov	r0, r3
    506e:	4b46      	ldr	r3, [pc, #280]	; (5188 <_can_async_init+0x198>)
    5070:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    5072:	687b      	ldr	r3, [r7, #4]
    5074:	681a      	ldr	r2, [r3, #0]
    5076:	4b45      	ldr	r3, [pc, #276]	; (518c <_can_async_init+0x19c>)
    5078:	b29b      	uxth	r3, r3
    507a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    507e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5082:	4619      	mov	r1, r3
    5084:	4610      	mov	r0, r2
    5086:	4b42      	ldr	r3, [pc, #264]	; (5190 <_can_async_init+0x1a0>)
    5088:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    508a:	687b      	ldr	r3, [r7, #4]
    508c:	681b      	ldr	r3, [r3, #0]
    508e:	2107      	movs	r1, #7
    5090:	4618      	mov	r0, r3
    5092:	4b40      	ldr	r3, [pc, #256]	; (5194 <_can_async_init+0x1a4>)
    5094:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    5096:	687b      	ldr	r3, [r7, #4]
    5098:	681b      	ldr	r3, [r3, #0]
    509a:	2107      	movs	r1, #7
    509c:	4618      	mov	r0, r3
    509e:	4b3e      	ldr	r3, [pc, #248]	; (5198 <_can_async_init+0x1a8>)
    50a0:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    50a2:	687b      	ldr	r3, [r7, #4]
    50a4:	681a      	ldr	r2, [r3, #0]
    50a6:	4b3d      	ldr	r3, [pc, #244]	; (519c <_can_async_init+0x1ac>)
    50a8:	b29b      	uxth	r3, r3
    50aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    50ae:	4619      	mov	r1, r3
    50b0:	4610      	mov	r0, r2
    50b2:	4b3b      	ldr	r3, [pc, #236]	; (51a0 <_can_async_init+0x1b0>)
    50b4:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    50b6:	687b      	ldr	r3, [r7, #4]
    50b8:	681a      	ldr	r2, [r3, #0]
    50ba:	4b3a      	ldr	r3, [pc, #232]	; (51a4 <_can_async_init+0x1b4>)
    50bc:	b29b      	uxth	r3, r3
    50be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    50c2:	4619      	mov	r1, r3
    50c4:	4610      	mov	r0, r2
    50c6:	4b38      	ldr	r3, [pc, #224]	; (51a8 <_can_async_init+0x1b8>)
    50c8:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    50ca:	687b      	ldr	r3, [r7, #4]
    50cc:	681b      	ldr	r3, [r3, #0]
    50ce:	2108      	movs	r1, #8
    50d0:	4618      	mov	r0, r3
    50d2:	4b36      	ldr	r3, [pc, #216]	; (51ac <_can_async_init+0x1bc>)
    50d4:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    50d6:	687b      	ldr	r3, [r7, #4]
    50d8:	681a      	ldr	r2, [r3, #0]
    50da:	4b35      	ldr	r3, [pc, #212]	; (51b0 <_can_async_init+0x1c0>)
    50dc:	b29b      	uxth	r3, r3
    50de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    50e2:	4619      	mov	r1, r3
    50e4:	4610      	mov	r0, r2
    50e6:	4b33      	ldr	r3, [pc, #204]	; (51b4 <_can_async_init+0x1c4>)
    50e8:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    50ea:	687b      	ldr	r3, [r7, #4]
    50ec:	681a      	ldr	r2, [r3, #0]
    50ee:	4b32      	ldr	r3, [pc, #200]	; (51b8 <_can_async_init+0x1c8>)
    50f0:	b29b      	uxth	r3, r3
    50f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    50f6:	4619      	mov	r1, r3
    50f8:	4610      	mov	r0, r2
    50fa:	4b30      	ldr	r3, [pc, #192]	; (51bc <_can_async_init+0x1cc>)
    50fc:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    50fe:	687b      	ldr	r3, [r7, #4]
    5100:	681b      	ldr	r3, [r3, #0]
    5102:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    5106:	4618      	mov	r0, r3
    5108:	4b2d      	ldr	r3, [pc, #180]	; (51c0 <_can_async_init+0x1d0>)
    510a:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    510c:	204f      	movs	r0, #79	; 0x4f
    510e:	4b2d      	ldr	r3, [pc, #180]	; (51c4 <_can_async_init+0x1d4>)
    5110:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    5112:	204f      	movs	r0, #79	; 0x4f
    5114:	4b2c      	ldr	r3, [pc, #176]	; (51c8 <_can_async_init+0x1d8>)
    5116:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    5118:	204f      	movs	r0, #79	; 0x4f
    511a:	4b2c      	ldr	r3, [pc, #176]	; (51cc <_can_async_init+0x1dc>)
    511c:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    511e:	687b      	ldr	r3, [r7, #4]
    5120:	681b      	ldr	r3, [r3, #0]
    5122:	2101      	movs	r1, #1
    5124:	4618      	mov	r0, r3
    5126:	4b2a      	ldr	r3, [pc, #168]	; (51d0 <_can_async_init+0x1e0>)
    5128:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    512a:	687b      	ldr	r3, [r7, #4]
    512c:	681b      	ldr	r3, [r3, #0]
    512e:	4618      	mov	r0, r3
    5130:	4b28      	ldr	r3, [pc, #160]	; (51d4 <_can_async_init+0x1e4>)
    5132:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    5134:	687b      	ldr	r3, [r7, #4]
    5136:	681b      	ldr	r3, [r3, #0]
    5138:	4618      	mov	r0, r3
    513a:	4b27      	ldr	r3, [pc, #156]	; (51d8 <_can_async_init+0x1e8>)
    513c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    513e:	bf00      	nop
    5140:	687b      	ldr	r3, [r7, #4]
    5142:	681b      	ldr	r3, [r3, #0]
    5144:	4618      	mov	r0, r3
    5146:	4b06      	ldr	r3, [pc, #24]	; (5160 <_can_async_init+0x170>)
    5148:	4798      	blx	r3
    514a:	4603      	mov	r3, r0
    514c:	2b00      	cmp	r3, #0
    514e:	d1f7      	bne.n	5140 <_can_async_init+0x150>
	};

	return ERR_NONE;
    5150:	2300      	movs	r3, #0
}
    5152:	4618      	mov	r0, r3
    5154:	3708      	adds	r7, #8
    5156:	46bd      	mov	sp, r7
    5158:	bd80      	pop	{r7, pc}
    515a:	bf00      	nop
    515c:	00004da5 	.word	0x00004da5
    5160:	00004dc5 	.word	0x00004dc5
    5164:	00004e13 	.word	0x00004e13
    5168:	42000400 	.word	0x42000400
    516c:	200009cc 	.word	0x200009cc
    5170:	20000004 	.word	0x20000004
    5174:	00004e53 	.word	0x00004e53
    5178:	00004d6d 	.word	0x00004d6d
    517c:	00010c01 	.word	0x00010c01
    5180:	00004e75 	.word	0x00004e75
    5184:	00010c10 	.word	0x00010c10
    5188:	00004d89 	.word	0x00004d89
    518c:	200079ec 	.word	0x200079ec
    5190:	00004f59 	.word	0x00004f59
    5194:	00004f77 	.word	0x00004f77
    5198:	00004fb3 	.word	0x00004fb3
    519c:	200079a4 	.word	0x200079a4
    51a0:	00004f95 	.word	0x00004f95
    51a4:	2000092c 	.word	0x2000092c
    51a8:	00004fd1 	.word	0x00004fd1
    51ac:	00004ee1 	.word	0x00004ee1
    51b0:	2000093c 	.word	0x2000093c
    51b4:	00004eff 	.word	0x00004eff
    51b8:	200009bc 	.word	0x200009bc
    51bc:	00004f1d 	.word	0x00004f1d
    51c0:	00004f3b 	.word	0x00004f3b
    51c4:	00004cc5 	.word	0x00004cc5
    51c8:	00004d09 	.word	0x00004d09
    51cc:	00004c89 	.word	0x00004c89
    51d0:	00004ec5 	.word	0x00004ec5
    51d4:	00004e33 	.word	0x00004e33
    51d8:	00004df3 	.word	0x00004df3

000051dc <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    51dc:	b590      	push	{r4, r7, lr}
    51de:	b083      	sub	sp, #12
    51e0:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    51e2:	4b2c      	ldr	r3, [pc, #176]	; (5294 <CAN1_Handler+0xb8>)
    51e4:	681b      	ldr	r3, [r3, #0]
    51e6:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    51e8:	687b      	ldr	r3, [r7, #4]
    51ea:	681b      	ldr	r3, [r3, #0]
    51ec:	4618      	mov	r0, r3
    51ee:	4b2a      	ldr	r3, [pc, #168]	; (5298 <CAN1_Handler+0xbc>)
    51f0:	4798      	blx	r3
    51f2:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    51f4:	683b      	ldr	r3, [r7, #0]
    51f6:	f003 0301 	and.w	r3, r3, #1
    51fa:	2b00      	cmp	r3, #0
    51fc:	d003      	beq.n	5206 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    51fe:	687b      	ldr	r3, [r7, #4]
    5200:	689b      	ldr	r3, [r3, #8]
    5202:	6878      	ldr	r0, [r7, #4]
    5204:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    5206:	683b      	ldr	r3, [r7, #0]
    5208:	f403 7300 	and.w	r3, r3, #512	; 0x200
    520c:	2b00      	cmp	r3, #0
    520e:	d003      	beq.n	5218 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    5210:	687b      	ldr	r3, [r7, #4]
    5212:	685b      	ldr	r3, [r3, #4]
    5214:	6878      	ldr	r0, [r7, #4]
    5216:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    5218:	683b      	ldr	r3, [r7, #0]
    521a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    521e:	2b00      	cmp	r3, #0
    5220:	d004      	beq.n	522c <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    5222:	687b      	ldr	r3, [r7, #4]
    5224:	68db      	ldr	r3, [r3, #12]
    5226:	2103      	movs	r1, #3
    5228:	6878      	ldr	r0, [r7, #4]
    522a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    522c:	683b      	ldr	r3, [r7, #0]
    522e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    5232:	2b00      	cmp	r3, #0
    5234:	d004      	beq.n	5240 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    5236:	687b      	ldr	r3, [r7, #4]
    5238:	68db      	ldr	r3, [r3, #12]
    523a:	2100      	movs	r1, #0
    523c:	6878      	ldr	r0, [r7, #4]
    523e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    5240:	683b      	ldr	r3, [r7, #0]
    5242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    5246:	2b00      	cmp	r3, #0
    5248:	d00f      	beq.n	526a <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    524a:	687b      	ldr	r3, [r7, #4]
    524c:	68dc      	ldr	r4, [r3, #12]
    524e:	687b      	ldr	r3, [r7, #4]
    5250:	681b      	ldr	r3, [r3, #0]
    5252:	4618      	mov	r0, r3
    5254:	4b11      	ldr	r3, [pc, #68]	; (529c <CAN1_Handler+0xc0>)
    5256:	4798      	blx	r3
    5258:	4603      	mov	r3, r0
    525a:	2b00      	cmp	r3, #0
    525c:	d001      	beq.n	5262 <CAN1_Handler+0x86>
    525e:	2302      	movs	r3, #2
    5260:	e000      	b.n	5264 <CAN1_Handler+0x88>
    5262:	2301      	movs	r3, #1
    5264:	4619      	mov	r1, r3
    5266:	6878      	ldr	r0, [r7, #4]
    5268:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    526a:	683b      	ldr	r3, [r7, #0]
    526c:	f003 0308 	and.w	r3, r3, #8
    5270:	2b00      	cmp	r3, #0
    5272:	d004      	beq.n	527e <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    5274:	687b      	ldr	r3, [r7, #4]
    5276:	68db      	ldr	r3, [r3, #12]
    5278:	2104      	movs	r1, #4
    527a:	6878      	ldr	r0, [r7, #4]
    527c:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    527e:	687b      	ldr	r3, [r7, #4]
    5280:	681b      	ldr	r3, [r3, #0]
    5282:	6839      	ldr	r1, [r7, #0]
    5284:	4618      	mov	r0, r3
    5286:	4b06      	ldr	r3, [pc, #24]	; (52a0 <CAN1_Handler+0xc4>)
    5288:	4798      	blx	r3
}
    528a:	bf00      	nop
    528c:	370c      	adds	r7, #12
    528e:	46bd      	mov	sp, r7
    5290:	bd90      	pop	{r4, r7, pc}
    5292:	bf00      	nop
    5294:	200009cc 	.word	0x200009cc
    5298:	00004ead 	.word	0x00004ead
    529c:	00004d45 	.word	0x00004d45
    52a0:	00004e91 	.word	0x00004e91

000052a4 <__NVIC_SetPendingIRQ>:
{
    52a4:	b480      	push	{r7}
    52a6:	b083      	sub	sp, #12
    52a8:	af00      	add	r7, sp, #0
    52aa:	4603      	mov	r3, r0
    52ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    52ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    52b2:	2b00      	cmp	r3, #0
    52b4:	db0c      	blt.n	52d0 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    52b6:	4909      	ldr	r1, [pc, #36]	; (52dc <__NVIC_SetPendingIRQ+0x38>)
    52b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    52bc:	095b      	lsrs	r3, r3, #5
    52be:	88fa      	ldrh	r2, [r7, #6]
    52c0:	f002 021f 	and.w	r2, r2, #31
    52c4:	2001      	movs	r0, #1
    52c6:	fa00 f202 	lsl.w	r2, r0, r2
    52ca:	3340      	adds	r3, #64	; 0x40
    52cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    52d0:	bf00      	nop
    52d2:	370c      	adds	r7, #12
    52d4:	46bd      	mov	sp, r7
    52d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    52da:	4770      	bx	lr
    52dc:	e000e100 	.word	0xe000e100

000052e0 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    52e0:	b580      	push	{r7, lr}
    52e2:	b082      	sub	sp, #8
    52e4:	af00      	add	r7, sp, #0
    52e6:	4603      	mov	r3, r0
    52e8:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    52ea:	79fb      	ldrb	r3, [r7, #7]
    52ec:	b21b      	sxth	r3, r3
    52ee:	4618      	mov	r0, r3
    52f0:	4b02      	ldr	r3, [pc, #8]	; (52fc <_irq_set+0x1c>)
    52f2:	4798      	blx	r3
}
    52f4:	bf00      	nop
    52f6:	3708      	adds	r7, #8
    52f8:	46bd      	mov	sp, r7
    52fa:	bd80      	pop	{r7, pc}
    52fc:	000052a5 	.word	0x000052a5

00005300 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    5300:	b480      	push	{r7}
    5302:	b083      	sub	sp, #12
    5304:	af00      	add	r7, sp, #0
    5306:	4603      	mov	r3, r0
    5308:	6039      	str	r1, [r7, #0]
    530a:	80fb      	strh	r3, [r7, #6]
    530c:	4613      	mov	r3, r2
    530e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5310:	797b      	ldrb	r3, [r7, #5]
    5312:	3b04      	subs	r3, #4
    5314:	2b05      	cmp	r3, #5
    5316:	d86b      	bhi.n	53f0 <_get_cycles_for_us_internal+0xf0>
    5318:	a201      	add	r2, pc, #4	; (adr r2, 5320 <_get_cycles_for_us_internal+0x20>)
    531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    531e:	bf00      	nop
    5320:	000053cf 	.word	0x000053cf
    5324:	000053af 	.word	0x000053af
    5328:	00005391 	.word	0x00005391
    532c:	00005373 	.word	0x00005373
    5330:	00005355 	.word	0x00005355
    5334:	00005339 	.word	0x00005339
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    5338:	88fb      	ldrh	r3, [r7, #6]
    533a:	683a      	ldr	r2, [r7, #0]
    533c:	4935      	ldr	r1, [pc, #212]	; (5414 <_get_cycles_for_us_internal+0x114>)
    533e:	fba1 1202 	umull	r1, r2, r1, r2
    5342:	0c92      	lsrs	r2, r2, #18
    5344:	fb02 f303 	mul.w	r3, r2, r3
    5348:	3302      	adds	r3, #2
    534a:	4a33      	ldr	r2, [pc, #204]	; (5418 <_get_cycles_for_us_internal+0x118>)
    534c:	fba2 2303 	umull	r2, r3, r2, r3
    5350:	085b      	lsrs	r3, r3, #1
    5352:	e059      	b.n	5408 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    5354:	88fb      	ldrh	r3, [r7, #6]
    5356:	683a      	ldr	r2, [r7, #0]
    5358:	0952      	lsrs	r2, r2, #5
    535a:	4930      	ldr	r1, [pc, #192]	; (541c <_get_cycles_for_us_internal+0x11c>)
    535c:	fba1 1202 	umull	r1, r2, r1, r2
    5360:	09d2      	lsrs	r2, r2, #7
    5362:	fb02 f303 	mul.w	r3, r2, r3
    5366:	331d      	adds	r3, #29
    5368:	4a2d      	ldr	r2, [pc, #180]	; (5420 <_get_cycles_for_us_internal+0x120>)
    536a:	fba2 2303 	umull	r2, r3, r2, r3
    536e:	091b      	lsrs	r3, r3, #4
    5370:	e04a      	b.n	5408 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    5372:	88fb      	ldrh	r3, [r7, #6]
    5374:	683a      	ldr	r2, [r7, #0]
    5376:	492b      	ldr	r1, [pc, #172]	; (5424 <_get_cycles_for_us_internal+0x124>)
    5378:	fba1 1202 	umull	r1, r2, r1, r2
    537c:	0b52      	lsrs	r2, r2, #13
    537e:	fb02 f303 	mul.w	r3, r2, r3
    5382:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5386:	4a28      	ldr	r2, [pc, #160]	; (5428 <_get_cycles_for_us_internal+0x128>)
    5388:	fba2 2303 	umull	r2, r3, r2, r3
    538c:	095b      	lsrs	r3, r3, #5
    538e:	e03b      	b.n	5408 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    5390:	88fb      	ldrh	r3, [r7, #6]
    5392:	683a      	ldr	r2, [r7, #0]
    5394:	4925      	ldr	r1, [pc, #148]	; (542c <_get_cycles_for_us_internal+0x12c>)
    5396:	fba1 1202 	umull	r1, r2, r1, r2
    539a:	0992      	lsrs	r2, r2, #6
    539c:	fb02 f303 	mul.w	r3, r2, r3
    53a0:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    53a4:	4a22      	ldr	r2, [pc, #136]	; (5430 <_get_cycles_for_us_internal+0x130>)
    53a6:	fba2 2303 	umull	r2, r3, r2, r3
    53aa:	099b      	lsrs	r3, r3, #6
    53ac:	e02c      	b.n	5408 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    53ae:	88fb      	ldrh	r3, [r7, #6]
    53b0:	683a      	ldr	r2, [r7, #0]
    53b2:	4920      	ldr	r1, [pc, #128]	; (5434 <_get_cycles_for_us_internal+0x134>)
    53b4:	fba1 1202 	umull	r1, r2, r1, r2
    53b8:	0952      	lsrs	r2, r2, #5
    53ba:	fb02 f303 	mul.w	r3, r2, r3
    53be:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    53c2:	332f      	adds	r3, #47	; 0x2f
    53c4:	4a1c      	ldr	r2, [pc, #112]	; (5438 <_get_cycles_for_us_internal+0x138>)
    53c6:	fba2 2303 	umull	r2, r3, r2, r3
    53ca:	0b5b      	lsrs	r3, r3, #13
    53cc:	e01c      	b.n	5408 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    53ce:	88fb      	ldrh	r3, [r7, #6]
    53d0:	683a      	ldr	r2, [r7, #0]
    53d2:	491a      	ldr	r1, [pc, #104]	; (543c <_get_cycles_for_us_internal+0x13c>)
    53d4:	fba1 1202 	umull	r1, r2, r1, r2
    53d8:	08d2      	lsrs	r2, r2, #3
    53da:	fb02 f303 	mul.w	r3, r2, r3
    53de:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    53e2:	f203 33df 	addw	r3, r3, #991	; 0x3df
    53e6:	4a16      	ldr	r2, [pc, #88]	; (5440 <_get_cycles_for_us_internal+0x140>)
    53e8:	fba2 2303 	umull	r2, r3, r2, r3
    53ec:	0c5b      	lsrs	r3, r3, #17
    53ee:	e00b      	b.n	5408 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    53f0:	88fb      	ldrh	r3, [r7, #6]
    53f2:	683a      	ldr	r2, [r7, #0]
    53f4:	fb02 f303 	mul.w	r3, r2, r3
    53f8:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    53fc:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    5400:	4a10      	ldr	r2, [pc, #64]	; (5444 <_get_cycles_for_us_internal+0x144>)
    5402:	fba2 2303 	umull	r2, r3, r2, r3
    5406:	0c9b      	lsrs	r3, r3, #18
	}
}
    5408:	4618      	mov	r0, r3
    540a:	370c      	adds	r7, #12
    540c:	46bd      	mov	sp, r7
    540e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5412:	4770      	bx	lr
    5414:	431bde83 	.word	0x431bde83
    5418:	aaaaaaab 	.word	0xaaaaaaab
    541c:	0a7c5ac5 	.word	0x0a7c5ac5
    5420:	88888889 	.word	0x88888889
    5424:	d1b71759 	.word	0xd1b71759
    5428:	1b4e81b5 	.word	0x1b4e81b5
    542c:	10624dd3 	.word	0x10624dd3
    5430:	057619f1 	.word	0x057619f1
    5434:	51eb851f 	.word	0x51eb851f
    5438:	45e7b273 	.word	0x45e7b273
    543c:	cccccccd 	.word	0xcccccccd
    5440:	6fd91d85 	.word	0x6fd91d85
    5444:	165e9f81 	.word	0x165e9f81

00005448 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    5448:	b580      	push	{r7, lr}
    544a:	b082      	sub	sp, #8
    544c:	af00      	add	r7, sp, #0
    544e:	4603      	mov	r3, r0
    5450:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5452:	88fb      	ldrh	r3, [r7, #6]
    5454:	2209      	movs	r2, #9
    5456:	4904      	ldr	r1, [pc, #16]	; (5468 <_get_cycles_for_us+0x20>)
    5458:	4618      	mov	r0, r3
    545a:	4b04      	ldr	r3, [pc, #16]	; (546c <_get_cycles_for_us+0x24>)
    545c:	4798      	blx	r3
    545e:	4603      	mov	r3, r0
}
    5460:	4618      	mov	r0, r3
    5462:	3708      	adds	r7, #8
    5464:	46bd      	mov	sp, r7
    5466:	bd80      	pop	{r7, pc}
    5468:	07270e00 	.word	0x07270e00
    546c:	00005301 	.word	0x00005301

00005470 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    5470:	b480      	push	{r7}
    5472:	b083      	sub	sp, #12
    5474:	af00      	add	r7, sp, #0
    5476:	4603      	mov	r3, r0
    5478:	6039      	str	r1, [r7, #0]
    547a:	80fb      	strh	r3, [r7, #6]
    547c:	4613      	mov	r3, r2
    547e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5480:	797b      	ldrb	r3, [r7, #5]
    5482:	3b04      	subs	r3, #4
    5484:	2b05      	cmp	r3, #5
    5486:	d870      	bhi.n	556a <_get_cycles_for_ms_internal+0xfa>
    5488:	a201      	add	r2, pc, #4	; (adr r2, 5490 <_get_cycles_for_ms_internal+0x20>)
    548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    548e:	bf00      	nop
    5490:	0000554d 	.word	0x0000554d
    5494:	00005531 	.word	0x00005531
    5498:	00005515 	.word	0x00005515
    549c:	000054f1 	.word	0x000054f1
    54a0:	000054cd 	.word	0x000054cd
    54a4:	000054a9 	.word	0x000054a9
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    54a8:	88fb      	ldrh	r3, [r7, #6]
    54aa:	683a      	ldr	r2, [r7, #0]
    54ac:	4937      	ldr	r1, [pc, #220]	; (558c <_get_cycles_for_ms_internal+0x11c>)
    54ae:	fba1 1202 	umull	r1, r2, r1, r2
    54b2:	0c92      	lsrs	r2, r2, #18
    54b4:	fb02 f303 	mul.w	r3, r2, r3
    54b8:	3302      	adds	r3, #2
    54ba:	4a35      	ldr	r2, [pc, #212]	; (5590 <_get_cycles_for_ms_internal+0x120>)
    54bc:	fba2 2303 	umull	r2, r3, r2, r3
    54c0:	085b      	lsrs	r3, r3, #1
    54c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    54c6:	fb02 f303 	mul.w	r3, r2, r3
    54ca:	e058      	b.n	557e <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    54cc:	88fb      	ldrh	r3, [r7, #6]
    54ce:	683a      	ldr	r2, [r7, #0]
    54d0:	0952      	lsrs	r2, r2, #5
    54d2:	4930      	ldr	r1, [pc, #192]	; (5594 <_get_cycles_for_ms_internal+0x124>)
    54d4:	fba1 1202 	umull	r1, r2, r1, r2
    54d8:	09d2      	lsrs	r2, r2, #7
    54da:	fb02 f303 	mul.w	r3, r2, r3
    54de:	3302      	adds	r3, #2
    54e0:	4a2b      	ldr	r2, [pc, #172]	; (5590 <_get_cycles_for_ms_internal+0x120>)
    54e2:	fba2 2303 	umull	r2, r3, r2, r3
    54e6:	085b      	lsrs	r3, r3, #1
    54e8:	2264      	movs	r2, #100	; 0x64
    54ea:	fb02 f303 	mul.w	r3, r2, r3
    54ee:	e046      	b.n	557e <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    54f0:	88fb      	ldrh	r3, [r7, #6]
    54f2:	683a      	ldr	r2, [r7, #0]
    54f4:	4928      	ldr	r1, [pc, #160]	; (5598 <_get_cycles_for_ms_internal+0x128>)
    54f6:	fba1 1202 	umull	r1, r2, r1, r2
    54fa:	0b52      	lsrs	r2, r2, #13
    54fc:	fb02 f303 	mul.w	r3, r2, r3
    5500:	3302      	adds	r3, #2
    5502:	4a23      	ldr	r2, [pc, #140]	; (5590 <_get_cycles_for_ms_internal+0x120>)
    5504:	fba2 2303 	umull	r2, r3, r2, r3
    5508:	085a      	lsrs	r2, r3, #1
    550a:	4613      	mov	r3, r2
    550c:	009b      	lsls	r3, r3, #2
    550e:	4413      	add	r3, r2
    5510:	005b      	lsls	r3, r3, #1
    5512:	e034      	b.n	557e <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    5514:	88fb      	ldrh	r3, [r7, #6]
    5516:	683a      	ldr	r2, [r7, #0]
    5518:	4920      	ldr	r1, [pc, #128]	; (559c <_get_cycles_for_ms_internal+0x12c>)
    551a:	fba1 1202 	umull	r1, r2, r1, r2
    551e:	0992      	lsrs	r2, r2, #6
    5520:	fb02 f303 	mul.w	r3, r2, r3
    5524:	3302      	adds	r3, #2
    5526:	4a1a      	ldr	r2, [pc, #104]	; (5590 <_get_cycles_for_ms_internal+0x120>)
    5528:	fba2 2303 	umull	r2, r3, r2, r3
    552c:	085b      	lsrs	r3, r3, #1
    552e:	e026      	b.n	557e <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    5530:	88fb      	ldrh	r3, [r7, #6]
    5532:	683a      	ldr	r2, [r7, #0]
    5534:	491a      	ldr	r1, [pc, #104]	; (55a0 <_get_cycles_for_ms_internal+0x130>)
    5536:	fba1 1202 	umull	r1, r2, r1, r2
    553a:	0952      	lsrs	r2, r2, #5
    553c:	fb02 f303 	mul.w	r3, r2, r3
    5540:	331d      	adds	r3, #29
    5542:	4a18      	ldr	r2, [pc, #96]	; (55a4 <_get_cycles_for_ms_internal+0x134>)
    5544:	fba2 2303 	umull	r2, r3, r2, r3
    5548:	091b      	lsrs	r3, r3, #4
    554a:	e018      	b.n	557e <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    554c:	88fb      	ldrh	r3, [r7, #6]
    554e:	683a      	ldr	r2, [r7, #0]
    5550:	4915      	ldr	r1, [pc, #84]	; (55a8 <_get_cycles_for_ms_internal+0x138>)
    5552:	fba1 1202 	umull	r1, r2, r1, r2
    5556:	08d2      	lsrs	r2, r2, #3
    5558:	fb02 f303 	mul.w	r3, r2, r3
    555c:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5560:	4a12      	ldr	r2, [pc, #72]	; (55ac <_get_cycles_for_ms_internal+0x13c>)
    5562:	fba2 2303 	umull	r2, r3, r2, r3
    5566:	095b      	lsrs	r3, r3, #5
    5568:	e009      	b.n	557e <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    556a:	88fb      	ldrh	r3, [r7, #6]
    556c:	683a      	ldr	r2, [r7, #0]
    556e:	fb02 f303 	mul.w	r3, r2, r3
    5572:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5576:	4a0e      	ldr	r2, [pc, #56]	; (55b0 <_get_cycles_for_ms_internal+0x140>)
    5578:	fba2 2303 	umull	r2, r3, r2, r3
    557c:	099b      	lsrs	r3, r3, #6
	}
}
    557e:	4618      	mov	r0, r3
    5580:	370c      	adds	r7, #12
    5582:	46bd      	mov	sp, r7
    5584:	f85d 7b04 	ldr.w	r7, [sp], #4
    5588:	4770      	bx	lr
    558a:	bf00      	nop
    558c:	431bde83 	.word	0x431bde83
    5590:	aaaaaaab 	.word	0xaaaaaaab
    5594:	0a7c5ac5 	.word	0x0a7c5ac5
    5598:	d1b71759 	.word	0xd1b71759
    559c:	10624dd3 	.word	0x10624dd3
    55a0:	51eb851f 	.word	0x51eb851f
    55a4:	88888889 	.word	0x88888889
    55a8:	cccccccd 	.word	0xcccccccd
    55ac:	1b4e81b5 	.word	0x1b4e81b5
    55b0:	057619f1 	.word	0x057619f1

000055b4 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    55b4:	b580      	push	{r7, lr}
    55b6:	b082      	sub	sp, #8
    55b8:	af00      	add	r7, sp, #0
    55ba:	4603      	mov	r3, r0
    55bc:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    55be:	88fb      	ldrh	r3, [r7, #6]
    55c0:	2209      	movs	r2, #9
    55c2:	4904      	ldr	r1, [pc, #16]	; (55d4 <_get_cycles_for_ms+0x20>)
    55c4:	4618      	mov	r0, r3
    55c6:	4b04      	ldr	r3, [pc, #16]	; (55d8 <_get_cycles_for_ms+0x24>)
    55c8:	4798      	blx	r3
    55ca:	4603      	mov	r3, r0
}
    55cc:	4618      	mov	r0, r3
    55ce:	3708      	adds	r7, #8
    55d0:	46bd      	mov	sp, r7
    55d2:	bd80      	pop	{r7, pc}
    55d4:	07270e00 	.word	0x07270e00
    55d8:	00005471 	.word	0x00005471
    55dc:	00000000 	.word	0x00000000

000055e0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    55e0:	b480      	push	{r7}
    55e2:	b083      	sub	sp, #12
    55e4:	af00      	add	r7, sp, #0
    55e6:	6078      	str	r0, [r7, #4]
    55e8:	6039      	str	r1, [r7, #0]
    55ea:	bf00      	nop
    55ec:	f3af 8000 	nop.w

000055f0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    55f0:	3901      	subs	r1, #1
    55f2:	d8fd      	bhi.n	55f0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    55f4:	bf00      	nop
    55f6:	370c      	adds	r7, #12
    55f8:	46bd      	mov	sp, r7
    55fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    55fe:	4770      	bx	lr

00005600 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    5600:	b480      	push	{r7}
    5602:	b083      	sub	sp, #12
    5604:	af00      	add	r7, sp, #0
    5606:	6078      	str	r0, [r7, #4]
    5608:	460b      	mov	r3, r1
    560a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    560c:	687b      	ldr	r3, [r7, #4]
    560e:	881b      	ldrh	r3, [r3, #0]
    5610:	b29a      	uxth	r2, r3
    5612:	887b      	ldrh	r3, [r7, #2]
    5614:	021b      	lsls	r3, r3, #8
    5616:	b29b      	uxth	r3, r3
    5618:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    561c:	b29b      	uxth	r3, r3
    561e:	4313      	orrs	r3, r2
    5620:	b29a      	uxth	r2, r3
    5622:	687b      	ldr	r3, [r7, #4]
    5624:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    5626:	bf00      	nop
    5628:	370c      	adds	r7, #12
    562a:	46bd      	mov	sp, r7
    562c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5630:	4770      	bx	lr

00005632 <hri_port_set_EVCTRL_reg>:
{
    5632:	b480      	push	{r7}
    5634:	b085      	sub	sp, #20
    5636:	af00      	add	r7, sp, #0
    5638:	60f8      	str	r0, [r7, #12]
    563a:	460b      	mov	r3, r1
    563c:	607a      	str	r2, [r7, #4]
    563e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    5640:	7afb      	ldrb	r3, [r7, #11]
    5642:	7afa      	ldrb	r2, [r7, #11]
    5644:	68f9      	ldr	r1, [r7, #12]
    5646:	01d2      	lsls	r2, r2, #7
    5648:	440a      	add	r2, r1
    564a:	322c      	adds	r2, #44	; 0x2c
    564c:	6811      	ldr	r1, [r2, #0]
    564e:	687a      	ldr	r2, [r7, #4]
    5650:	430a      	orrs	r2, r1
    5652:	68f9      	ldr	r1, [r7, #12]
    5654:	01db      	lsls	r3, r3, #7
    5656:	440b      	add	r3, r1
    5658:	332c      	adds	r3, #44	; 0x2c
    565a:	601a      	str	r2, [r3, #0]
}
    565c:	bf00      	nop
    565e:	3714      	adds	r7, #20
    5660:	46bd      	mov	sp, r7
    5662:	f85d 7b04 	ldr.w	r7, [sp], #4
    5666:	4770      	bx	lr

00005668 <_port_event_init>:

static inline void _port_event_init()
{
    5668:	b580      	push	{r7, lr}
    566a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    566c:	2200      	movs	r2, #0
    566e:	2100      	movs	r1, #0
    5670:	480a      	ldr	r0, [pc, #40]	; (569c <_port_event_init+0x34>)
    5672:	4b0b      	ldr	r3, [pc, #44]	; (56a0 <_port_event_init+0x38>)
    5674:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    5676:	2200      	movs	r2, #0
    5678:	2101      	movs	r1, #1
    567a:	4808      	ldr	r0, [pc, #32]	; (569c <_port_event_init+0x34>)
    567c:	4b08      	ldr	r3, [pc, #32]	; (56a0 <_port_event_init+0x38>)
    567e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    5680:	f64e 72ef 	movw	r2, #61423	; 0xefef
    5684:	2102      	movs	r1, #2
    5686:	4805      	ldr	r0, [pc, #20]	; (569c <_port_event_init+0x34>)
    5688:	4b05      	ldr	r3, [pc, #20]	; (56a0 <_port_event_init+0x38>)
    568a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    568c:	2200      	movs	r2, #0
    568e:	2103      	movs	r1, #3
    5690:	4802      	ldr	r0, [pc, #8]	; (569c <_port_event_init+0x34>)
    5692:	4b03      	ldr	r3, [pc, #12]	; (56a0 <_port_event_init+0x38>)
    5694:	4798      	blx	r3
}
    5696:	bf00      	nop
    5698:	bd80      	pop	{r7, pc}
    569a:	bf00      	nop
    569c:	41008000 	.word	0x41008000
    56a0:	00005633 	.word	0x00005633

000056a4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    56a4:	b580      	push	{r7, lr}
    56a6:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    56a8:	2104      	movs	r1, #4
    56aa:	480b      	ldr	r0, [pc, #44]	; (56d8 <_init_chip+0x34>)
    56ac:	4b0b      	ldr	r3, [pc, #44]	; (56dc <_init_chip+0x38>)
    56ae:	4798      	blx	r3

	_osc32kctrl_init_sources();
    56b0:	4b0b      	ldr	r3, [pc, #44]	; (56e0 <_init_chip+0x3c>)
    56b2:	4798      	blx	r3
	_oscctrl_init_sources();
    56b4:	4b0b      	ldr	r3, [pc, #44]	; (56e4 <_init_chip+0x40>)
    56b6:	4798      	blx	r3
	_mclk_init();
    56b8:	4b0b      	ldr	r3, [pc, #44]	; (56e8 <_init_chip+0x44>)
    56ba:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    56bc:	f44f 6084 	mov.w	r0, #1056	; 0x420
    56c0:	4b0a      	ldr	r3, [pc, #40]	; (56ec <_init_chip+0x48>)
    56c2:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    56c4:	4b0a      	ldr	r3, [pc, #40]	; (56f0 <_init_chip+0x4c>)
    56c6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    56c8:	f640 30df 	movw	r0, #3039	; 0xbdf
    56cc:	4b07      	ldr	r3, [pc, #28]	; (56ec <_init_chip+0x48>)
    56ce:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    56d0:	4b08      	ldr	r3, [pc, #32]	; (56f4 <_init_chip+0x50>)
    56d2:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    56d4:	bf00      	nop
    56d6:	bd80      	pop	{r7, pc}
    56d8:	41004000 	.word	0x41004000
    56dc:	00005601 	.word	0x00005601
    56e0:	000061b5 	.word	0x000061b5
    56e4:	0000667d 	.word	0x0000667d
    56e8:	000060d5 	.word	0x000060d5
    56ec:	00005f95 	.word	0x00005f95
    56f0:	000066bd 	.word	0x000066bd
    56f4:	00005669 	.word	0x00005669

000056f8 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    56f8:	b480      	push	{r7}
    56fa:	b083      	sub	sp, #12
    56fc:	af00      	add	r7, sp, #0
    56fe:	6078      	str	r0, [r7, #4]
    5700:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    5702:	687b      	ldr	r3, [r7, #4]
    5704:	683a      	ldr	r2, [r7, #0]
    5706:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5708:	2300      	movs	r3, #0
}
    570a:	4618      	mov	r0, r3
    570c:	370c      	adds	r7, #12
    570e:	46bd      	mov	sp, r7
    5710:	f85d 7b04 	ldr.w	r7, [sp], #4
    5714:	4770      	bx	lr
	...

00005718 <__NVIC_EnableIRQ>:
{
    5718:	b480      	push	{r7}
    571a:	b083      	sub	sp, #12
    571c:	af00      	add	r7, sp, #0
    571e:	4603      	mov	r3, r0
    5720:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5726:	2b00      	cmp	r3, #0
    5728:	db0b      	blt.n	5742 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    572a:	4909      	ldr	r1, [pc, #36]	; (5750 <__NVIC_EnableIRQ+0x38>)
    572c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5730:	095b      	lsrs	r3, r3, #5
    5732:	88fa      	ldrh	r2, [r7, #6]
    5734:	f002 021f 	and.w	r2, r2, #31
    5738:	2001      	movs	r0, #1
    573a:	fa00 f202 	lsl.w	r2, r0, r2
    573e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5742:	bf00      	nop
    5744:	370c      	adds	r7, #12
    5746:	46bd      	mov	sp, r7
    5748:	f85d 7b04 	ldr.w	r7, [sp], #4
    574c:	4770      	bx	lr
    574e:	bf00      	nop
    5750:	e000e100 	.word	0xe000e100

00005754 <__NVIC_DisableIRQ>:
{
    5754:	b480      	push	{r7}
    5756:	b083      	sub	sp, #12
    5758:	af00      	add	r7, sp, #0
    575a:	4603      	mov	r3, r0
    575c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    575e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5762:	2b00      	cmp	r3, #0
    5764:	db10      	blt.n	5788 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5766:	490b      	ldr	r1, [pc, #44]	; (5794 <__NVIC_DisableIRQ+0x40>)
    5768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    576c:	095b      	lsrs	r3, r3, #5
    576e:	88fa      	ldrh	r2, [r7, #6]
    5770:	f002 021f 	and.w	r2, r2, #31
    5774:	2001      	movs	r0, #1
    5776:	fa00 f202 	lsl.w	r2, r0, r2
    577a:	3320      	adds	r3, #32
    577c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5780:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5784:	f3bf 8f6f 	isb	sy
}
    5788:	bf00      	nop
    578a:	370c      	adds	r7, #12
    578c:	46bd      	mov	sp, r7
    578e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5792:	4770      	bx	lr
    5794:	e000e100 	.word	0xe000e100

00005798 <__NVIC_ClearPendingIRQ>:
{
    5798:	b480      	push	{r7}
    579a:	b083      	sub	sp, #12
    579c:	af00      	add	r7, sp, #0
    579e:	4603      	mov	r3, r0
    57a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    57a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57a6:	2b00      	cmp	r3, #0
    57a8:	db0c      	blt.n	57c4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57aa:	4909      	ldr	r1, [pc, #36]	; (57d0 <__NVIC_ClearPendingIRQ+0x38>)
    57ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57b0:	095b      	lsrs	r3, r3, #5
    57b2:	88fa      	ldrh	r2, [r7, #6]
    57b4:	f002 021f 	and.w	r2, r2, #31
    57b8:	2001      	movs	r0, #1
    57ba:	fa00 f202 	lsl.w	r2, r0, r2
    57be:	3360      	adds	r3, #96	; 0x60
    57c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    57c4:	bf00      	nop
    57c6:	370c      	adds	r7, #12
    57c8:	46bd      	mov	sp, r7
    57ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ce:	4770      	bx	lr
    57d0:	e000e100 	.word	0xe000e100

000057d4 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    57d4:	b480      	push	{r7}
    57d6:	b083      	sub	sp, #12
    57d8:	af00      	add	r7, sp, #0
    57da:	6078      	str	r0, [r7, #4]
    57dc:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    57de:	bf00      	nop
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	685a      	ldr	r2, [r3, #4]
    57e4:	683b      	ldr	r3, [r7, #0]
    57e6:	4013      	ands	r3, r2
    57e8:	2b00      	cmp	r3, #0
    57ea:	d1f9      	bne.n	57e0 <hri_eic_wait_for_sync+0xc>
	};
}
    57ec:	bf00      	nop
    57ee:	370c      	adds	r7, #12
    57f0:	46bd      	mov	sp, r7
    57f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57f6:	4770      	bx	lr

000057f8 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    57f8:	b480      	push	{r7}
    57fa:	b083      	sub	sp, #12
    57fc:	af00      	add	r7, sp, #0
    57fe:	6078      	str	r0, [r7, #4]
    5800:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    5802:	687b      	ldr	r3, [r7, #4]
    5804:	685a      	ldr	r2, [r3, #4]
    5806:	683b      	ldr	r3, [r7, #0]
    5808:	4013      	ands	r3, r2
    580a:	2b00      	cmp	r3, #0
    580c:	bf14      	ite	ne
    580e:	2301      	movne	r3, #1
    5810:	2300      	moveq	r3, #0
    5812:	b2db      	uxtb	r3, r3
}
    5814:	4618      	mov	r0, r3
    5816:	370c      	adds	r7, #12
    5818:	46bd      	mov	sp, r7
    581a:	f85d 7b04 	ldr.w	r7, [sp], #4
    581e:	4770      	bx	lr

00005820 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    5820:	b480      	push	{r7}
    5822:	b083      	sub	sp, #12
    5824:	af00      	add	r7, sp, #0
    5826:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    5828:	687b      	ldr	r3, [r7, #4]
    582a:	695b      	ldr	r3, [r3, #20]
}
    582c:	4618      	mov	r0, r3
    582e:	370c      	adds	r7, #12
    5830:	46bd      	mov	sp, r7
    5832:	f85d 7b04 	ldr.w	r7, [sp], #4
    5836:	4770      	bx	lr

00005838 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    5838:	b480      	push	{r7}
    583a:	b083      	sub	sp, #12
    583c:	af00      	add	r7, sp, #0
    583e:	6078      	str	r0, [r7, #4]
    5840:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    5842:	687b      	ldr	r3, [r7, #4]
    5844:	683a      	ldr	r2, [r7, #0]
    5846:	615a      	str	r2, [r3, #20]
}
    5848:	bf00      	nop
    584a:	370c      	adds	r7, #12
    584c:	46bd      	mov	sp, r7
    584e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5852:	4770      	bx	lr

00005854 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    5854:	b480      	push	{r7}
    5856:	b083      	sub	sp, #12
    5858:	af00      	add	r7, sp, #0
    585a:	6078      	str	r0, [r7, #4]
    585c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    585e:	687b      	ldr	r3, [r7, #4]
    5860:	683a      	ldr	r2, [r7, #0]
    5862:	611a      	str	r2, [r3, #16]
}
    5864:	bf00      	nop
    5866:	370c      	adds	r7, #12
    5868:	46bd      	mov	sp, r7
    586a:	f85d 7b04 	ldr.w	r7, [sp], #4
    586e:	4770      	bx	lr

00005870 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    5870:	b480      	push	{r7}
    5872:	b083      	sub	sp, #12
    5874:	af00      	add	r7, sp, #0
    5876:	6078      	str	r0, [r7, #4]
    5878:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    587a:	687b      	ldr	r3, [r7, #4]
    587c:	683a      	ldr	r2, [r7, #0]
    587e:	60da      	str	r2, [r3, #12]
}
    5880:	bf00      	nop
    5882:	370c      	adds	r7, #12
    5884:	46bd      	mov	sp, r7
    5886:	f85d 7b04 	ldr.w	r7, [sp], #4
    588a:	4770      	bx	lr

0000588c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    588c:	b580      	push	{r7, lr}
    588e:	b082      	sub	sp, #8
    5890:	af00      	add	r7, sp, #0
    5892:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    5894:	687b      	ldr	r3, [r7, #4]
    5896:	781b      	ldrb	r3, [r3, #0]
    5898:	b2db      	uxtb	r3, r3
    589a:	f043 0302 	orr.w	r3, r3, #2
    589e:	b2da      	uxtb	r2, r3
    58a0:	687b      	ldr	r3, [r7, #4]
    58a2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    58a4:	2103      	movs	r1, #3
    58a6:	6878      	ldr	r0, [r7, #4]
    58a8:	4b02      	ldr	r3, [pc, #8]	; (58b4 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    58aa:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    58ac:	bf00      	nop
    58ae:	3708      	adds	r7, #8
    58b0:	46bd      	mov	sp, r7
    58b2:	bd80      	pop	{r7, pc}
    58b4:	000057d5 	.word	0x000057d5

000058b8 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    58b8:	b580      	push	{r7, lr}
    58ba:	b082      	sub	sp, #8
    58bc:	af00      	add	r7, sp, #0
    58be:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    58c0:	687b      	ldr	r3, [r7, #4]
    58c2:	781b      	ldrb	r3, [r3, #0]
    58c4:	b2db      	uxtb	r3, r3
    58c6:	f023 0302 	bic.w	r3, r3, #2
    58ca:	b2da      	uxtb	r2, r3
    58cc:	687b      	ldr	r3, [r7, #4]
    58ce:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    58d0:	2103      	movs	r1, #3
    58d2:	6878      	ldr	r0, [r7, #4]
    58d4:	4b02      	ldr	r3, [pc, #8]	; (58e0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    58d6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    58d8:	bf00      	nop
    58da:	3708      	adds	r7, #8
    58dc:	46bd      	mov	sp, r7
    58de:	bd80      	pop	{r7, pc}
    58e0:	000057d5 	.word	0x000057d5

000058e4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    58e4:	b580      	push	{r7, lr}
    58e6:	b084      	sub	sp, #16
    58e8:	af00      	add	r7, sp, #0
    58ea:	6078      	str	r0, [r7, #4]
    58ec:	460b      	mov	r3, r1
    58ee:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    58f0:	687b      	ldr	r3, [r7, #4]
    58f2:	781b      	ldrb	r3, [r3, #0]
    58f4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    58f6:	7bfb      	ldrb	r3, [r7, #15]
    58f8:	f023 0310 	bic.w	r3, r3, #16
    58fc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    58fe:	78fb      	ldrb	r3, [r7, #3]
    5900:	011b      	lsls	r3, r3, #4
    5902:	b25a      	sxtb	r2, r3
    5904:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5908:	4313      	orrs	r3, r2
    590a:	b25b      	sxtb	r3, r3
    590c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    590e:	687b      	ldr	r3, [r7, #4]
    5910:	7bfa      	ldrb	r2, [r7, #15]
    5912:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    5914:	2103      	movs	r1, #3
    5916:	6878      	ldr	r0, [r7, #4]
    5918:	4b02      	ldr	r3, [pc, #8]	; (5924 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    591a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    591c:	bf00      	nop
    591e:	3710      	adds	r7, #16
    5920:	46bd      	mov	sp, r7
    5922:	bd80      	pop	{r7, pc}
    5924:	000057d5 	.word	0x000057d5

00005928 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    5928:	b580      	push	{r7, lr}
    592a:	b084      	sub	sp, #16
    592c:	af00      	add	r7, sp, #0
    592e:	6078      	str	r0, [r7, #4]
    5930:	460b      	mov	r3, r1
    5932:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    5934:	2103      	movs	r1, #3
    5936:	6878      	ldr	r0, [r7, #4]
    5938:	4b06      	ldr	r3, [pc, #24]	; (5954 <hri_eic_get_CTRLA_reg+0x2c>)
    593a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    593c:	687b      	ldr	r3, [r7, #4]
    593e:	781b      	ldrb	r3, [r3, #0]
    5940:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5942:	7bfa      	ldrb	r2, [r7, #15]
    5944:	78fb      	ldrb	r3, [r7, #3]
    5946:	4013      	ands	r3, r2
    5948:	73fb      	strb	r3, [r7, #15]
	return tmp;
    594a:	7bfb      	ldrb	r3, [r7, #15]
}
    594c:	4618      	mov	r0, r3
    594e:	3710      	adds	r7, #16
    5950:	46bd      	mov	sp, r7
    5952:	bd80      	pop	{r7, pc}
    5954:	000057d5 	.word	0x000057d5

00005958 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    5958:	b580      	push	{r7, lr}
    595a:	b082      	sub	sp, #8
    595c:	af00      	add	r7, sp, #0
    595e:	6078      	str	r0, [r7, #4]
    5960:	460b      	mov	r3, r1
    5962:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    5964:	687b      	ldr	r3, [r7, #4]
    5966:	78fa      	ldrb	r2, [r7, #3]
    5968:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    596a:	2103      	movs	r1, #3
    596c:	6878      	ldr	r0, [r7, #4]
    596e:	4b03      	ldr	r3, [pc, #12]	; (597c <hri_eic_write_CTRLA_reg+0x24>)
    5970:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    5972:	bf00      	nop
    5974:	3708      	adds	r7, #8
    5976:	46bd      	mov	sp, r7
    5978:	bd80      	pop	{r7, pc}
    597a:	bf00      	nop
    597c:	000057d5 	.word	0x000057d5

00005980 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    5980:	b480      	push	{r7}
    5982:	b083      	sub	sp, #12
    5984:	af00      	add	r7, sp, #0
    5986:	6078      	str	r0, [r7, #4]
    5988:	460b      	mov	r3, r1
    598a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    598c:	687b      	ldr	r3, [r7, #4]
    598e:	78fa      	ldrb	r2, [r7, #3]
    5990:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5992:	bf00      	nop
    5994:	370c      	adds	r7, #12
    5996:	46bd      	mov	sp, r7
    5998:	f85d 7b04 	ldr.w	r7, [sp], #4
    599c:	4770      	bx	lr

0000599e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    599e:	b480      	push	{r7}
    59a0:	b083      	sub	sp, #12
    59a2:	af00      	add	r7, sp, #0
    59a4:	6078      	str	r0, [r7, #4]
    59a6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    59a8:	687b      	ldr	r3, [r7, #4]
    59aa:	683a      	ldr	r2, [r7, #0]
    59ac:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    59ae:	bf00      	nop
    59b0:	370c      	adds	r7, #12
    59b2:	46bd      	mov	sp, r7
    59b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b8:	4770      	bx	lr

000059ba <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    59ba:	b480      	push	{r7}
    59bc:	b083      	sub	sp, #12
    59be:	af00      	add	r7, sp, #0
    59c0:	6078      	str	r0, [r7, #4]
    59c2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    59c4:	687b      	ldr	r3, [r7, #4]
    59c6:	683a      	ldr	r2, [r7, #0]
    59c8:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    59ca:	bf00      	nop
    59cc:	370c      	adds	r7, #12
    59ce:	46bd      	mov	sp, r7
    59d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59d4:	4770      	bx	lr

000059d6 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    59d6:	b480      	push	{r7}
    59d8:	b085      	sub	sp, #20
    59da:	af00      	add	r7, sp, #0
    59dc:	60f8      	str	r0, [r7, #12]
    59de:	460b      	mov	r3, r1
    59e0:	607a      	str	r2, [r7, #4]
    59e2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    59e4:	7afb      	ldrb	r3, [r7, #11]
    59e6:	68fa      	ldr	r2, [r7, #12]
    59e8:	3306      	adds	r3, #6
    59ea:	009b      	lsls	r3, r3, #2
    59ec:	4413      	add	r3, r2
    59ee:	687a      	ldr	r2, [r7, #4]
    59f0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    59f2:	bf00      	nop
    59f4:	3714      	adds	r7, #20
    59f6:	46bd      	mov	sp, r7
    59f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    59fc:	4770      	bx	lr

000059fe <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    59fe:	b480      	push	{r7}
    5a00:	b083      	sub	sp, #12
    5a02:	af00      	add	r7, sp, #0
    5a04:	6078      	str	r0, [r7, #4]
    5a06:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    5a08:	687b      	ldr	r3, [r7, #4]
    5a0a:	683a      	ldr	r2, [r7, #0]
    5a0c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    5a0e:	bf00      	nop
    5a10:	370c      	adds	r7, #12
    5a12:	46bd      	mov	sp, r7
    5a14:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a18:	4770      	bx	lr

00005a1a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    5a1a:	b480      	push	{r7}
    5a1c:	b083      	sub	sp, #12
    5a1e:	af00      	add	r7, sp, #0
    5a20:	6078      	str	r0, [r7, #4]
    5a22:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    5a24:	687b      	ldr	r3, [r7, #4]
    5a26:	683a      	ldr	r2, [r7, #0]
    5a28:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    5a2a:	bf00      	nop
    5a2c:	370c      	adds	r7, #12
    5a2e:	46bd      	mov	sp, r7
    5a30:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a34:	4770      	bx	lr
	...

00005a38 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    5a38:	b580      	push	{r7, lr}
    5a3a:	b082      	sub	sp, #8
    5a3c:	af00      	add	r7, sp, #0
    5a3e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    5a40:	2101      	movs	r1, #1
    5a42:	484f      	ldr	r0, [pc, #316]	; (5b80 <_ext_irq_init+0x148>)
    5a44:	4b4f      	ldr	r3, [pc, #316]	; (5b84 <_ext_irq_init+0x14c>)
    5a46:	4798      	blx	r3
    5a48:	4603      	mov	r3, r0
    5a4a:	f083 0301 	eor.w	r3, r3, #1
    5a4e:	b2db      	uxtb	r3, r3
    5a50:	2b00      	cmp	r3, #0
    5a52:	d011      	beq.n	5a78 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    5a54:	2102      	movs	r1, #2
    5a56:	484a      	ldr	r0, [pc, #296]	; (5b80 <_ext_irq_init+0x148>)
    5a58:	4b4b      	ldr	r3, [pc, #300]	; (5b88 <_ext_irq_init+0x150>)
    5a5a:	4798      	blx	r3
    5a5c:	4603      	mov	r3, r0
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d006      	beq.n	5a70 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    5a62:	4847      	ldr	r0, [pc, #284]	; (5b80 <_ext_irq_init+0x148>)
    5a64:	4b49      	ldr	r3, [pc, #292]	; (5b8c <_ext_irq_init+0x154>)
    5a66:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    5a68:	2102      	movs	r1, #2
    5a6a:	4845      	ldr	r0, [pc, #276]	; (5b80 <_ext_irq_init+0x148>)
    5a6c:	4b48      	ldr	r3, [pc, #288]	; (5b90 <_ext_irq_init+0x158>)
    5a6e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    5a70:	2101      	movs	r1, #1
    5a72:	4843      	ldr	r0, [pc, #268]	; (5b80 <_ext_irq_init+0x148>)
    5a74:	4b47      	ldr	r3, [pc, #284]	; (5b94 <_ext_irq_init+0x15c>)
    5a76:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    5a78:	2101      	movs	r1, #1
    5a7a:	4841      	ldr	r0, [pc, #260]	; (5b80 <_ext_irq_init+0x148>)
    5a7c:	4b44      	ldr	r3, [pc, #272]	; (5b90 <_ext_irq_init+0x158>)
    5a7e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    5a80:	2100      	movs	r1, #0
    5a82:	483f      	ldr	r0, [pc, #252]	; (5b80 <_ext_irq_init+0x148>)
    5a84:	4b44      	ldr	r3, [pc, #272]	; (5b98 <_ext_irq_init+0x160>)
    5a86:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    5a88:	2100      	movs	r1, #0
    5a8a:	483d      	ldr	r0, [pc, #244]	; (5b80 <_ext_irq_init+0x148>)
    5a8c:	4b43      	ldr	r3, [pc, #268]	; (5b9c <_ext_irq_init+0x164>)
    5a8e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    5a90:	2100      	movs	r1, #0
    5a92:	483b      	ldr	r0, [pc, #236]	; (5b80 <_ext_irq_init+0x148>)
    5a94:	4b42      	ldr	r3, [pc, #264]	; (5ba0 <_ext_irq_init+0x168>)
    5a96:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    5a98:	f240 31bb 	movw	r1, #955	; 0x3bb
    5a9c:	4838      	ldr	r0, [pc, #224]	; (5b80 <_ext_irq_init+0x148>)
    5a9e:	4b41      	ldr	r3, [pc, #260]	; (5ba4 <_ext_irq_init+0x16c>)
    5aa0:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    5aa2:	f240 313b 	movw	r1, #827	; 0x33b
    5aa6:	4836      	ldr	r0, [pc, #216]	; (5b80 <_ext_irq_init+0x148>)
    5aa8:	4b3f      	ldr	r3, [pc, #252]	; (5ba8 <_ext_irq_init+0x170>)
    5aaa:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    5aac:	2100      	movs	r1, #0
    5aae:	4834      	ldr	r0, [pc, #208]	; (5b80 <_ext_irq_init+0x148>)
    5ab0:	4b3e      	ldr	r3, [pc, #248]	; (5bac <_ext_irq_init+0x174>)
    5ab2:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    5ab4:	4a3e      	ldr	r2, [pc, #248]	; (5bb0 <_ext_irq_init+0x178>)
    5ab6:	2100      	movs	r1, #0
    5ab8:	4831      	ldr	r0, [pc, #196]	; (5b80 <_ext_irq_init+0x148>)
    5aba:	4b3e      	ldr	r3, [pc, #248]	; (5bb4 <_ext_irq_init+0x17c>)
    5abc:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    5abe:	2211      	movs	r2, #17
    5ac0:	2101      	movs	r1, #1
    5ac2:	482f      	ldr	r0, [pc, #188]	; (5b80 <_ext_irq_init+0x148>)
    5ac4:	4b3b      	ldr	r3, [pc, #236]	; (5bb4 <_ext_irq_init+0x17c>)
    5ac6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    5ac8:	482d      	ldr	r0, [pc, #180]	; (5b80 <_ext_irq_init+0x148>)
    5aca:	4b3b      	ldr	r3, [pc, #236]	; (5bb8 <_ext_irq_init+0x180>)
    5acc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    5ace:	200c      	movs	r0, #12
    5ad0:	4b3a      	ldr	r3, [pc, #232]	; (5bbc <_ext_irq_init+0x184>)
    5ad2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    5ad4:	200c      	movs	r0, #12
    5ad6:	4b3a      	ldr	r3, [pc, #232]	; (5bc0 <_ext_irq_init+0x188>)
    5ad8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    5ada:	200c      	movs	r0, #12
    5adc:	4b39      	ldr	r3, [pc, #228]	; (5bc4 <_ext_irq_init+0x18c>)
    5ade:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    5ae0:	200d      	movs	r0, #13
    5ae2:	4b36      	ldr	r3, [pc, #216]	; (5bbc <_ext_irq_init+0x184>)
    5ae4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    5ae6:	200d      	movs	r0, #13
    5ae8:	4b35      	ldr	r3, [pc, #212]	; (5bc0 <_ext_irq_init+0x188>)
    5aea:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    5aec:	200d      	movs	r0, #13
    5aee:	4b35      	ldr	r3, [pc, #212]	; (5bc4 <_ext_irq_init+0x18c>)
    5af0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    5af2:	200f      	movs	r0, #15
    5af4:	4b31      	ldr	r3, [pc, #196]	; (5bbc <_ext_irq_init+0x184>)
    5af6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    5af8:	200f      	movs	r0, #15
    5afa:	4b31      	ldr	r3, [pc, #196]	; (5bc0 <_ext_irq_init+0x188>)
    5afc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    5afe:	200f      	movs	r0, #15
    5b00:	4b30      	ldr	r3, [pc, #192]	; (5bc4 <_ext_irq_init+0x18c>)
    5b02:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    5b04:	2010      	movs	r0, #16
    5b06:	4b2d      	ldr	r3, [pc, #180]	; (5bbc <_ext_irq_init+0x184>)
    5b08:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    5b0a:	2010      	movs	r0, #16
    5b0c:	4b2c      	ldr	r3, [pc, #176]	; (5bc0 <_ext_irq_init+0x188>)
    5b0e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    5b10:	2010      	movs	r0, #16
    5b12:	4b2c      	ldr	r3, [pc, #176]	; (5bc4 <_ext_irq_init+0x18c>)
    5b14:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    5b16:	2011      	movs	r0, #17
    5b18:	4b28      	ldr	r3, [pc, #160]	; (5bbc <_ext_irq_init+0x184>)
    5b1a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    5b1c:	2011      	movs	r0, #17
    5b1e:	4b28      	ldr	r3, [pc, #160]	; (5bc0 <_ext_irq_init+0x188>)
    5b20:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    5b22:	2011      	movs	r0, #17
    5b24:	4b27      	ldr	r3, [pc, #156]	; (5bc4 <_ext_irq_init+0x18c>)
    5b26:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    5b28:	2012      	movs	r0, #18
    5b2a:	4b24      	ldr	r3, [pc, #144]	; (5bbc <_ext_irq_init+0x184>)
    5b2c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    5b2e:	2012      	movs	r0, #18
    5b30:	4b23      	ldr	r3, [pc, #140]	; (5bc0 <_ext_irq_init+0x188>)
    5b32:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    5b34:	2012      	movs	r0, #18
    5b36:	4b23      	ldr	r3, [pc, #140]	; (5bc4 <_ext_irq_init+0x18c>)
    5b38:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    5b3a:	2013      	movs	r0, #19
    5b3c:	4b1f      	ldr	r3, [pc, #124]	; (5bbc <_ext_irq_init+0x184>)
    5b3e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    5b40:	2013      	movs	r0, #19
    5b42:	4b1f      	ldr	r3, [pc, #124]	; (5bc0 <_ext_irq_init+0x188>)
    5b44:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    5b46:	2013      	movs	r0, #19
    5b48:	4b1e      	ldr	r3, [pc, #120]	; (5bc4 <_ext_irq_init+0x18c>)
    5b4a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    5b4c:	2014      	movs	r0, #20
    5b4e:	4b1b      	ldr	r3, [pc, #108]	; (5bbc <_ext_irq_init+0x184>)
    5b50:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    5b52:	2014      	movs	r0, #20
    5b54:	4b1a      	ldr	r3, [pc, #104]	; (5bc0 <_ext_irq_init+0x188>)
    5b56:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    5b58:	2014      	movs	r0, #20
    5b5a:	4b1a      	ldr	r3, [pc, #104]	; (5bc4 <_ext_irq_init+0x18c>)
    5b5c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    5b5e:	2015      	movs	r0, #21
    5b60:	4b16      	ldr	r3, [pc, #88]	; (5bbc <_ext_irq_init+0x184>)
    5b62:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    5b64:	2015      	movs	r0, #21
    5b66:	4b16      	ldr	r3, [pc, #88]	; (5bc0 <_ext_irq_init+0x188>)
    5b68:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    5b6a:	2015      	movs	r0, #21
    5b6c:	4b15      	ldr	r3, [pc, #84]	; (5bc4 <_ext_irq_init+0x18c>)
    5b6e:	4798      	blx	r3

	callback = cb;
    5b70:	4a15      	ldr	r2, [pc, #84]	; (5bc8 <_ext_irq_init+0x190>)
    5b72:	687b      	ldr	r3, [r7, #4]
    5b74:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    5b76:	2300      	movs	r3, #0
}
    5b78:	4618      	mov	r0, r3
    5b7a:	3708      	adds	r7, #8
    5b7c:	46bd      	mov	sp, r7
    5b7e:	bd80      	pop	{r7, pc}
    5b80:	40002800 	.word	0x40002800
    5b84:	000057f9 	.word	0x000057f9
    5b88:	00005929 	.word	0x00005929
    5b8c:	000058b9 	.word	0x000058b9
    5b90:	000057d5 	.word	0x000057d5
    5b94:	00005959 	.word	0x00005959
    5b98:	000058e5 	.word	0x000058e5
    5b9c:	00005981 	.word	0x00005981
    5ba0:	0000599f 	.word	0x0000599f
    5ba4:	000059bb 	.word	0x000059bb
    5ba8:	000059ff 	.word	0x000059ff
    5bac:	00005a1b 	.word	0x00005a1b
    5bb0:	90999013 	.word	0x90999013
    5bb4:	000059d7 	.word	0x000059d7
    5bb8:	0000588d 	.word	0x0000588d
    5bbc:	00005755 	.word	0x00005755
    5bc0:	00005799 	.word	0x00005799
    5bc4:	00005719 	.word	0x00005719
    5bc8:	200009d0 	.word	0x200009d0

00005bcc <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    5bcc:	b580      	push	{r7, lr}
    5bce:	b084      	sub	sp, #16
    5bd0:	af00      	add	r7, sp, #0
    5bd2:	6078      	str	r0, [r7, #4]
    5bd4:	460b      	mov	r3, r1
    5bd6:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    5bd8:	23ff      	movs	r3, #255	; 0xff
    5bda:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    5bdc:	2300      	movs	r3, #0
    5bde:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    5be0:	e010      	b.n	5c04 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    5be2:	7bbb      	ldrb	r3, [r7, #14]
    5be4:	4a1c      	ldr	r2, [pc, #112]	; (5c58 <_ext_irq_enable+0x8c>)
    5be6:	00db      	lsls	r3, r3, #3
    5be8:	4413      	add	r3, r2
    5bea:	685a      	ldr	r2, [r3, #4]
    5bec:	687b      	ldr	r3, [r7, #4]
    5bee:	429a      	cmp	r2, r3
    5bf0:	d105      	bne.n	5bfe <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    5bf2:	7bbb      	ldrb	r3, [r7, #14]
    5bf4:	4a18      	ldr	r2, [pc, #96]	; (5c58 <_ext_irq_enable+0x8c>)
    5bf6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5bfa:	73fb      	strb	r3, [r7, #15]
			break;
    5bfc:	e005      	b.n	5c0a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    5bfe:	7bbb      	ldrb	r3, [r7, #14]
    5c00:	3301      	adds	r3, #1
    5c02:	73bb      	strb	r3, [r7, #14]
    5c04:	7bbb      	ldrb	r3, [r7, #14]
    5c06:	2b08      	cmp	r3, #8
    5c08:	d9eb      	bls.n	5be2 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    5c0a:	7bfb      	ldrb	r3, [r7, #15]
    5c0c:	2bff      	cmp	r3, #255	; 0xff
    5c0e:	d102      	bne.n	5c16 <_ext_irq_enable+0x4a>
		return -1;
    5c10:	f04f 33ff 	mov.w	r3, #4294967295
    5c14:	e01c      	b.n	5c50 <_ext_irq_enable+0x84>
	}

	if (enable) {
    5c16:	78fb      	ldrb	r3, [r7, #3]
    5c18:	2b00      	cmp	r3, #0
    5c1a:	d008      	beq.n	5c2e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    5c1c:	7bfb      	ldrb	r3, [r7, #15]
    5c1e:	2201      	movs	r2, #1
    5c20:	fa02 f303 	lsl.w	r3, r2, r3
    5c24:	4619      	mov	r1, r3
    5c26:	480d      	ldr	r0, [pc, #52]	; (5c5c <_ext_irq_enable+0x90>)
    5c28:	4b0d      	ldr	r3, [pc, #52]	; (5c60 <_ext_irq_enable+0x94>)
    5c2a:	4798      	blx	r3
    5c2c:	e00f      	b.n	5c4e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    5c2e:	7bfb      	ldrb	r3, [r7, #15]
    5c30:	2201      	movs	r2, #1
    5c32:	fa02 f303 	lsl.w	r3, r2, r3
    5c36:	4619      	mov	r1, r3
    5c38:	4808      	ldr	r0, [pc, #32]	; (5c5c <_ext_irq_enable+0x90>)
    5c3a:	4b0a      	ldr	r3, [pc, #40]	; (5c64 <_ext_irq_enable+0x98>)
    5c3c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    5c3e:	7bfb      	ldrb	r3, [r7, #15]
    5c40:	2201      	movs	r2, #1
    5c42:	fa02 f303 	lsl.w	r3, r2, r3
    5c46:	4619      	mov	r1, r3
    5c48:	4804      	ldr	r0, [pc, #16]	; (5c5c <_ext_irq_enable+0x90>)
    5c4a:	4b07      	ldr	r3, [pc, #28]	; (5c68 <_ext_irq_enable+0x9c>)
    5c4c:	4798      	blx	r3
	}

	return ERR_NONE;
    5c4e:	2300      	movs	r3, #0
}
    5c50:	4618      	mov	r0, r3
    5c52:	3710      	adds	r7, #16
    5c54:	46bd      	mov	sp, r7
    5c56:	bd80      	pop	{r7, pc}
    5c58:	00010cec 	.word	0x00010cec
    5c5c:	40002800 	.word	0x40002800
    5c60:	00005855 	.word	0x00005855
    5c64:	00005871 	.word	0x00005871
    5c68:	00005839 	.word	0x00005839

00005c6c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    5c6c:	b580      	push	{r7, lr}
    5c6e:	b084      	sub	sp, #16
    5c70:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    5c72:	4841      	ldr	r0, [pc, #260]	; (5d78 <_ext_irq_handler+0x10c>)
    5c74:	4b41      	ldr	r3, [pc, #260]	; (5d7c <_ext_irq_handler+0x110>)
    5c76:	4798      	blx	r3
    5c78:	4603      	mov	r3, r0
    5c7a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    5c7c:	f04f 33ff 	mov.w	r3, #4294967295
    5c80:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    5c82:	683b      	ldr	r3, [r7, #0]
    5c84:	4619      	mov	r1, r3
    5c86:	483c      	ldr	r0, [pc, #240]	; (5d78 <_ext_irq_handler+0x10c>)
    5c88:	4b3d      	ldr	r3, [pc, #244]	; (5d80 <_ext_irq_handler+0x114>)
    5c8a:	4798      	blx	r3

	ASSERT(callback);
    5c8c:	4b3d      	ldr	r3, [pc, #244]	; (5d84 <_ext_irq_handler+0x118>)
    5c8e:	681b      	ldr	r3, [r3, #0]
    5c90:	2b00      	cmp	r3, #0
    5c92:	bf14      	ite	ne
    5c94:	2301      	movne	r3, #1
    5c96:	2300      	moveq	r3, #0
    5c98:	b2db      	uxtb	r3, r3
    5c9a:	f44f 7284 	mov.w	r2, #264	; 0x108
    5c9e:	493a      	ldr	r1, [pc, #232]	; (5d88 <_ext_irq_handler+0x11c>)
    5ca0:	4618      	mov	r0, r3
    5ca2:	4b3a      	ldr	r3, [pc, #232]	; (5d8c <_ext_irq_handler+0x120>)
    5ca4:	4798      	blx	r3

	while (flags) {
    5ca6:	e060      	b.n	5d6a <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    5ca8:	683b      	ldr	r3, [r7, #0]
    5caa:	4618      	mov	r0, r3
    5cac:	4b38      	ldr	r3, [pc, #224]	; (5d90 <_ext_irq_handler+0x124>)
    5cae:	4798      	blx	r3
    5cb0:	4603      	mov	r3, r0
    5cb2:	b2db      	uxtb	r3, r3
    5cb4:	3b01      	subs	r3, #1
    5cb6:	b2db      	uxtb	r3, r3
    5cb8:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    5cba:	e047      	b.n	5d4c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    5cbc:	2300      	movs	r3, #0
    5cbe:	71fb      	strb	r3, [r7, #7]
    5cc0:	2309      	movs	r3, #9
    5cc2:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    5cc4:	e024      	b.n	5d10 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    5cc6:	79ba      	ldrb	r2, [r7, #6]
    5cc8:	79fb      	ldrb	r3, [r7, #7]
    5cca:	4413      	add	r3, r2
    5ccc:	105b      	asrs	r3, r3, #1
    5cce:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    5cd0:	797b      	ldrb	r3, [r7, #5]
    5cd2:	4a30      	ldr	r2, [pc, #192]	; (5d94 <_ext_irq_handler+0x128>)
    5cd4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5cd8:	461a      	mov	r2, r3
    5cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5cde:	429a      	cmp	r2, r3
    5ce0:	d106      	bne.n	5cf0 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    5ce2:	797b      	ldrb	r3, [r7, #5]
    5ce4:	4a2b      	ldr	r2, [pc, #172]	; (5d94 <_ext_irq_handler+0x128>)
    5ce6:	00db      	lsls	r3, r3, #3
    5ce8:	4413      	add	r3, r2
    5cea:	685b      	ldr	r3, [r3, #4]
    5cec:	60bb      	str	r3, [r7, #8]
					break;
    5cee:	e013      	b.n	5d18 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    5cf0:	797b      	ldrb	r3, [r7, #5]
    5cf2:	4a28      	ldr	r2, [pc, #160]	; (5d94 <_ext_irq_handler+0x128>)
    5cf4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5cf8:	461a      	mov	r2, r3
    5cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5cfe:	429a      	cmp	r2, r3
    5d00:	da03      	bge.n	5d0a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    5d02:	797b      	ldrb	r3, [r7, #5]
    5d04:	3301      	adds	r3, #1
    5d06:	71fb      	strb	r3, [r7, #7]
    5d08:	e002      	b.n	5d10 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    5d0a:	797b      	ldrb	r3, [r7, #5]
    5d0c:	3b01      	subs	r3, #1
    5d0e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    5d10:	79ba      	ldrb	r2, [r7, #6]
    5d12:	79fb      	ldrb	r3, [r7, #7]
    5d14:	429a      	cmp	r2, r3
    5d16:	d2d6      	bcs.n	5cc6 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    5d18:	68bb      	ldr	r3, [r7, #8]
    5d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
    5d1e:	d003      	beq.n	5d28 <_ext_irq_handler+0xbc>
				callback(pin);
    5d20:	4b18      	ldr	r3, [pc, #96]	; (5d84 <_ext_irq_handler+0x118>)
    5d22:	681b      	ldr	r3, [r3, #0]
    5d24:	68b8      	ldr	r0, [r7, #8]
    5d26:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    5d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5d2c:	2201      	movs	r2, #1
    5d2e:	fa02 f303 	lsl.w	r3, r2, r3
    5d32:	43da      	mvns	r2, r3
    5d34:	683b      	ldr	r3, [r7, #0]
    5d36:	4013      	ands	r3, r2
    5d38:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    5d3a:	683b      	ldr	r3, [r7, #0]
    5d3c:	4618      	mov	r0, r3
    5d3e:	4b14      	ldr	r3, [pc, #80]	; (5d90 <_ext_irq_handler+0x124>)
    5d40:	4798      	blx	r3
    5d42:	4603      	mov	r3, r0
    5d44:	b2db      	uxtb	r3, r3
    5d46:	3b01      	subs	r3, #1
    5d48:	b2db      	uxtb	r3, r3
    5d4a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    5d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5d50:	f1b3 3fff 	cmp.w	r3, #4294967295
    5d54:	d1b2      	bne.n	5cbc <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    5d56:	4808      	ldr	r0, [pc, #32]	; (5d78 <_ext_irq_handler+0x10c>)
    5d58:	4b08      	ldr	r3, [pc, #32]	; (5d7c <_ext_irq_handler+0x110>)
    5d5a:	4798      	blx	r3
    5d5c:	4603      	mov	r3, r0
    5d5e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    5d60:	683b      	ldr	r3, [r7, #0]
    5d62:	4619      	mov	r1, r3
    5d64:	4804      	ldr	r0, [pc, #16]	; (5d78 <_ext_irq_handler+0x10c>)
    5d66:	4b06      	ldr	r3, [pc, #24]	; (5d80 <_ext_irq_handler+0x114>)
    5d68:	4798      	blx	r3
	while (flags) {
    5d6a:	683b      	ldr	r3, [r7, #0]
    5d6c:	2b00      	cmp	r3, #0
    5d6e:	d19b      	bne.n	5ca8 <_ext_irq_handler+0x3c>
	}
}
    5d70:	bf00      	nop
    5d72:	3710      	adds	r7, #16
    5d74:	46bd      	mov	sp, r7
    5d76:	bd80      	pop	{r7, pc}
    5d78:	40002800 	.word	0x40002800
    5d7c:	00005821 	.word	0x00005821
    5d80:	00005839 	.word	0x00005839
    5d84:	200009d0 	.word	0x200009d0
    5d88:	00010d34 	.word	0x00010d34
    5d8c:	00004a95 	.word	0x00004a95
    5d90:	0001075d 	.word	0x0001075d
    5d94:	00010cec 	.word	0x00010cec

00005d98 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5d9c:	4b01      	ldr	r3, [pc, #4]	; (5da4 <EIC_0_Handler+0xc>)
    5d9e:	4798      	blx	r3
} /**
    5da0:	bf00      	nop
    5da2:	bd80      	pop	{r7, pc}
    5da4:	00005c6d 	.word	0x00005c6d

00005da8 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    5da8:	b580      	push	{r7, lr}
    5daa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5dac:	4b01      	ldr	r3, [pc, #4]	; (5db4 <EIC_1_Handler+0xc>)
    5dae:	4798      	blx	r3
} /**
    5db0:	bf00      	nop
    5db2:	bd80      	pop	{r7, pc}
    5db4:	00005c6d 	.word	0x00005c6d

00005db8 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    5db8:	b580      	push	{r7, lr}
    5dba:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5dbc:	4b01      	ldr	r3, [pc, #4]	; (5dc4 <EIC_3_Handler+0xc>)
    5dbe:	4798      	blx	r3
} /**
    5dc0:	bf00      	nop
    5dc2:	bd80      	pop	{r7, pc}
    5dc4:	00005c6d 	.word	0x00005c6d

00005dc8 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5dc8:	b580      	push	{r7, lr}
    5dca:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5dcc:	4b01      	ldr	r3, [pc, #4]	; (5dd4 <EIC_4_Handler+0xc>)
    5dce:	4798      	blx	r3
} /**
    5dd0:	bf00      	nop
    5dd2:	bd80      	pop	{r7, pc}
    5dd4:	00005c6d 	.word	0x00005c6d

00005dd8 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5dd8:	b580      	push	{r7, lr}
    5dda:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5ddc:	4b01      	ldr	r3, [pc, #4]	; (5de4 <EIC_5_Handler+0xc>)
    5dde:	4798      	blx	r3
} /**
    5de0:	bf00      	nop
    5de2:	bd80      	pop	{r7, pc}
    5de4:	00005c6d 	.word	0x00005c6d

00005de8 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5dec:	4b01      	ldr	r3, [pc, #4]	; (5df4 <EIC_6_Handler+0xc>)
    5dee:	4798      	blx	r3
} /**
    5df0:	bf00      	nop
    5df2:	bd80      	pop	{r7, pc}
    5df4:	00005c6d 	.word	0x00005c6d

00005df8 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    5df8:	b580      	push	{r7, lr}
    5dfa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5dfc:	4b01      	ldr	r3, [pc, #4]	; (5e04 <EIC_7_Handler+0xc>)
    5dfe:	4798      	blx	r3
} /**
    5e00:	bf00      	nop
    5e02:	bd80      	pop	{r7, pc}
    5e04:	00005c6d 	.word	0x00005c6d

00005e08 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    5e08:	b580      	push	{r7, lr}
    5e0a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5e0c:	4b01      	ldr	r3, [pc, #4]	; (5e14 <EIC_8_Handler+0xc>)
    5e0e:	4798      	blx	r3
} /**
    5e10:	bf00      	nop
    5e12:	bd80      	pop	{r7, pc}
    5e14:	00005c6d 	.word	0x00005c6d

00005e18 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    5e18:	b580      	push	{r7, lr}
    5e1a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    5e1c:	4b01      	ldr	r3, [pc, #4]	; (5e24 <EIC_9_Handler+0xc>)
    5e1e:	4798      	blx	r3
}
    5e20:	bf00      	nop
    5e22:	bd80      	pop	{r7, pc}
    5e24:	00005c6d 	.word	0x00005c6d

00005e28 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    5e28:	b480      	push	{r7}
    5e2a:	b085      	sub	sp, #20
    5e2c:	af00      	add	r7, sp, #0
    5e2e:	60f8      	str	r0, [r7, #12]
    5e30:	460b      	mov	r3, r1
    5e32:	607a      	str	r2, [r7, #4]
    5e34:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    5e36:	7afa      	ldrb	r2, [r7, #11]
    5e38:	68fb      	ldr	r3, [r7, #12]
    5e3a:	3248      	adds	r2, #72	; 0x48
    5e3c:	6879      	ldr	r1, [r7, #4]
    5e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5e42:	bf00      	nop
    5e44:	3714      	adds	r7, #20
    5e46:	46bd      	mov	sp, r7
    5e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e4c:	4770      	bx	lr

00005e4e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    5e4e:	b480      	push	{r7}
    5e50:	b083      	sub	sp, #12
    5e52:	af00      	add	r7, sp, #0
    5e54:	6078      	str	r0, [r7, #4]
    5e56:	460b      	mov	r3, r1
    5e58:	70fb      	strb	r3, [r7, #3]
    5e5a:	4613      	mov	r3, r2
    5e5c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    5e5e:	78fb      	ldrb	r3, [r7, #3]
    5e60:	687a      	ldr	r2, [r7, #4]
    5e62:	3304      	adds	r3, #4
    5e64:	00db      	lsls	r3, r3, #3
    5e66:	4413      	add	r3, r2
    5e68:	78ba      	ldrb	r2, [r7, #2]
    5e6a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    5e6c:	78fb      	ldrb	r3, [r7, #3]
    5e6e:	78ba      	ldrb	r2, [r7, #2]
    5e70:	43d2      	mvns	r2, r2
    5e72:	b2d1      	uxtb	r1, r2
    5e74:	687a      	ldr	r2, [r7, #4]
    5e76:	3304      	adds	r3, #4
    5e78:	00db      	lsls	r3, r3, #3
    5e7a:	4413      	add	r3, r2
    5e7c:	460a      	mov	r2, r1
    5e7e:	711a      	strb	r2, [r3, #4]
}
    5e80:	bf00      	nop
    5e82:	370c      	adds	r7, #12
    5e84:	46bd      	mov	sp, r7
    5e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e8a:	4770      	bx	lr

00005e8c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    5e8c:	b480      	push	{r7}
    5e8e:	b085      	sub	sp, #20
    5e90:	af00      	add	r7, sp, #0
    5e92:	60f8      	str	r0, [r7, #12]
    5e94:	460b      	mov	r3, r1
    5e96:	607a      	str	r2, [r7, #4]
    5e98:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    5e9a:	7afa      	ldrb	r2, [r7, #11]
    5e9c:	68fb      	ldr	r3, [r7, #12]
    5e9e:	3204      	adds	r2, #4
    5ea0:	6879      	ldr	r1, [r7, #4]
    5ea2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5ea6:	bf00      	nop
    5ea8:	3714      	adds	r7, #20
    5eaa:	46bd      	mov	sp, r7
    5eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eb0:	4770      	bx	lr
	...

00005eb4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    5eb4:	b580      	push	{r7, lr}
    5eb6:	b082      	sub	sp, #8
    5eb8:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    5eba:	2300      	movs	r3, #0
    5ebc:	71fb      	strb	r3, [r7, #7]
    5ebe:	e00b      	b.n	5ed8 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5ec0:	79fb      	ldrb	r3, [r7, #7]
    5ec2:	4a18      	ldr	r2, [pc, #96]	; (5f24 <_event_system_init+0x70>)
    5ec4:	5cd3      	ldrb	r3, [r2, r3]
    5ec6:	461a      	mov	r2, r3
    5ec8:	79fb      	ldrb	r3, [r7, #7]
    5eca:	4619      	mov	r1, r3
    5ecc:	4816      	ldr	r0, [pc, #88]	; (5f28 <_event_system_init+0x74>)
    5ece:	4b17      	ldr	r3, [pc, #92]	; (5f2c <_event_system_init+0x78>)
    5ed0:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    5ed2:	79fb      	ldrb	r3, [r7, #7]
    5ed4:	3301      	adds	r3, #1
    5ed6:	71fb      	strb	r3, [r7, #7]
    5ed8:	79fb      	ldrb	r3, [r7, #7]
    5eda:	2b42      	cmp	r3, #66	; 0x42
    5edc:	d9f0      	bls.n	5ec0 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    5ede:	2300      	movs	r3, #0
    5ee0:	71fb      	strb	r3, [r7, #7]
    5ee2:	e016      	b.n	5f12 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5ee4:	79fb      	ldrb	r3, [r7, #7]
    5ee6:	4a12      	ldr	r2, [pc, #72]	; (5f30 <_event_system_init+0x7c>)
    5ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    5eec:	461a      	mov	r2, r3
    5eee:	79fb      	ldrb	r3, [r7, #7]
    5ef0:	4619      	mov	r1, r3
    5ef2:	480d      	ldr	r0, [pc, #52]	; (5f28 <_event_system_init+0x74>)
    5ef4:	4b0f      	ldr	r3, [pc, #60]	; (5f34 <_event_system_init+0x80>)
    5ef6:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5ef8:	79fb      	ldrb	r3, [r7, #7]
    5efa:	4a0f      	ldr	r2, [pc, #60]	; (5f38 <_event_system_init+0x84>)
    5efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f00:	b2da      	uxtb	r2, r3
    5f02:	79fb      	ldrb	r3, [r7, #7]
    5f04:	4619      	mov	r1, r3
    5f06:	4808      	ldr	r0, [pc, #32]	; (5f28 <_event_system_init+0x74>)
    5f08:	4b0c      	ldr	r3, [pc, #48]	; (5f3c <_event_system_init+0x88>)
    5f0a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    5f0c:	79fb      	ldrb	r3, [r7, #7]
    5f0e:	3301      	adds	r3, #1
    5f10:	71fb      	strb	r3, [r7, #7]
    5f12:	79fb      	ldrb	r3, [r7, #7]
    5f14:	2b1f      	cmp	r3, #31
    5f16:	d9e5      	bls.n	5ee4 <_event_system_init+0x30>
	}

	return ERR_NONE;
    5f18:	2300      	movs	r3, #0
}
    5f1a:	4618      	mov	r0, r3
    5f1c:	3708      	adds	r7, #8
    5f1e:	46bd      	mov	sp, r7
    5f20:	bd80      	pop	{r7, pc}
    5f22:	bf00      	nop
    5f24:	00010d4c 	.word	0x00010d4c
    5f28:	4100e000 	.word	0x4100e000
    5f2c:	00005e29 	.word	0x00005e29
    5f30:	00010d90 	.word	0x00010d90
    5f34:	00005e8d 	.word	0x00005e8d
    5f38:	00010dd0 	.word	0x00010dd0
    5f3c:	00005e4f 	.word	0x00005e4f

00005f40 <hri_gclk_wait_for_sync>:
{
    5f40:	b480      	push	{r7}
    5f42:	b083      	sub	sp, #12
    5f44:	af00      	add	r7, sp, #0
    5f46:	6078      	str	r0, [r7, #4]
    5f48:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5f4a:	bf00      	nop
    5f4c:	687b      	ldr	r3, [r7, #4]
    5f4e:	685a      	ldr	r2, [r3, #4]
    5f50:	683b      	ldr	r3, [r7, #0]
    5f52:	4013      	ands	r3, r2
    5f54:	2b00      	cmp	r3, #0
    5f56:	d1f9      	bne.n	5f4c <hri_gclk_wait_for_sync+0xc>
}
    5f58:	bf00      	nop
    5f5a:	370c      	adds	r7, #12
    5f5c:	46bd      	mov	sp, r7
    5f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f62:	4770      	bx	lr

00005f64 <hri_gclk_write_GENCTRL_reg>:
{
    5f64:	b580      	push	{r7, lr}
    5f66:	b084      	sub	sp, #16
    5f68:	af00      	add	r7, sp, #0
    5f6a:	60f8      	str	r0, [r7, #12]
    5f6c:	460b      	mov	r3, r1
    5f6e:	607a      	str	r2, [r7, #4]
    5f70:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5f72:	7afa      	ldrb	r2, [r7, #11]
    5f74:	68fb      	ldr	r3, [r7, #12]
    5f76:	3208      	adds	r2, #8
    5f78:	6879      	ldr	r1, [r7, #4]
    5f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5f7e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5f82:	68f8      	ldr	r0, [r7, #12]
    5f84:	4b02      	ldr	r3, [pc, #8]	; (5f90 <hri_gclk_write_GENCTRL_reg+0x2c>)
    5f86:	4798      	blx	r3
}
    5f88:	bf00      	nop
    5f8a:	3710      	adds	r7, #16
    5f8c:	46bd      	mov	sp, r7
    5f8e:	bd80      	pop	{r7, pc}
    5f90:	00005f41 	.word	0x00005f41

00005f94 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    5f94:	b580      	push	{r7, lr}
    5f96:	b082      	sub	sp, #8
    5f98:	af00      	add	r7, sp, #0
    5f9a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	f003 0301 	and.w	r3, r3, #1
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d004      	beq.n	5fb0 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    5fa6:	4a36      	ldr	r2, [pc, #216]	; (6080 <_gclk_init_generators_by_fref+0xec>)
    5fa8:	2100      	movs	r1, #0
    5faa:	4836      	ldr	r0, [pc, #216]	; (6084 <_gclk_init_generators_by_fref+0xf0>)
    5fac:	4b36      	ldr	r3, [pc, #216]	; (6088 <_gclk_init_generators_by_fref+0xf4>)
    5fae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	f003 0302 	and.w	r3, r3, #2
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	d004      	beq.n	5fc4 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    5fba:	4a34      	ldr	r2, [pc, #208]	; (608c <_gclk_init_generators_by_fref+0xf8>)
    5fbc:	2101      	movs	r1, #1
    5fbe:	4831      	ldr	r0, [pc, #196]	; (6084 <_gclk_init_generators_by_fref+0xf0>)
    5fc0:	4b31      	ldr	r3, [pc, #196]	; (6088 <_gclk_init_generators_by_fref+0xf4>)
    5fc2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	f003 0304 	and.w	r3, r3, #4
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d004      	beq.n	5fd8 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    5fce:	4a30      	ldr	r2, [pc, #192]	; (6090 <_gclk_init_generators_by_fref+0xfc>)
    5fd0:	2102      	movs	r1, #2
    5fd2:	482c      	ldr	r0, [pc, #176]	; (6084 <_gclk_init_generators_by_fref+0xf0>)
    5fd4:	4b2c      	ldr	r3, [pc, #176]	; (6088 <_gclk_init_generators_by_fref+0xf4>)
    5fd6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5fd8:	687b      	ldr	r3, [r7, #4]
    5fda:	f003 0308 	and.w	r3, r3, #8
    5fde:	2b00      	cmp	r3, #0
    5fe0:	d004      	beq.n	5fec <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    5fe2:	4a2c      	ldr	r2, [pc, #176]	; (6094 <_gclk_init_generators_by_fref+0x100>)
    5fe4:	2103      	movs	r1, #3
    5fe6:	4827      	ldr	r0, [pc, #156]	; (6084 <_gclk_init_generators_by_fref+0xf0>)
    5fe8:	4b27      	ldr	r3, [pc, #156]	; (6088 <_gclk_init_generators_by_fref+0xf4>)
    5fea:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	f003 0310 	and.w	r3, r3, #16
    5ff2:	2b00      	cmp	r3, #0
    5ff4:	d004      	beq.n	6000 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    5ff6:	4a28      	ldr	r2, [pc, #160]	; (6098 <_gclk_init_generators_by_fref+0x104>)
    5ff8:	2104      	movs	r1, #4
    5ffa:	4822      	ldr	r0, [pc, #136]	; (6084 <_gclk_init_generators_by_fref+0xf0>)
    5ffc:	4b22      	ldr	r3, [pc, #136]	; (6088 <_gclk_init_generators_by_fref+0xf4>)
    5ffe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    6000:	687b      	ldr	r3, [r7, #4]
    6002:	f003 0320 	and.w	r3, r3, #32
    6006:	2b00      	cmp	r3, #0
    6008:	d004      	beq.n	6014 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    600a:	4a24      	ldr	r2, [pc, #144]	; (609c <_gclk_init_generators_by_fref+0x108>)
    600c:	2105      	movs	r1, #5
    600e:	481d      	ldr	r0, [pc, #116]	; (6084 <_gclk_init_generators_by_fref+0xf0>)
    6010:	4b1d      	ldr	r3, [pc, #116]	; (6088 <_gclk_init_generators_by_fref+0xf4>)
    6012:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    6014:	687b      	ldr	r3, [r7, #4]
    6016:	f003 0340 	and.w	r3, r3, #64	; 0x40
    601a:	2b00      	cmp	r3, #0
    601c:	d004      	beq.n	6028 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    601e:	4a20      	ldr	r2, [pc, #128]	; (60a0 <_gclk_init_generators_by_fref+0x10c>)
    6020:	2106      	movs	r1, #6
    6022:	4818      	ldr	r0, [pc, #96]	; (6084 <_gclk_init_generators_by_fref+0xf0>)
    6024:	4b18      	ldr	r3, [pc, #96]	; (6088 <_gclk_init_generators_by_fref+0xf4>)
    6026:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    6028:	687b      	ldr	r3, [r7, #4]
    602a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    602e:	2b00      	cmp	r3, #0
    6030:	d004      	beq.n	603c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    6032:	4a1c      	ldr	r2, [pc, #112]	; (60a4 <_gclk_init_generators_by_fref+0x110>)
    6034:	2107      	movs	r1, #7
    6036:	4813      	ldr	r0, [pc, #76]	; (6084 <_gclk_init_generators_by_fref+0xf0>)
    6038:	4b13      	ldr	r3, [pc, #76]	; (6088 <_gclk_init_generators_by_fref+0xf4>)
    603a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    603c:	687b      	ldr	r3, [r7, #4]
    603e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6042:	2b00      	cmp	r3, #0
    6044:	d004      	beq.n	6050 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    6046:	4a18      	ldr	r2, [pc, #96]	; (60a8 <_gclk_init_generators_by_fref+0x114>)
    6048:	2108      	movs	r1, #8
    604a:	480e      	ldr	r0, [pc, #56]	; (6084 <_gclk_init_generators_by_fref+0xf0>)
    604c:	4b0e      	ldr	r3, [pc, #56]	; (6088 <_gclk_init_generators_by_fref+0xf4>)
    604e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6056:	2b00      	cmp	r3, #0
    6058:	d004      	beq.n	6064 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    605a:	4a14      	ldr	r2, [pc, #80]	; (60ac <_gclk_init_generators_by_fref+0x118>)
    605c:	210a      	movs	r1, #10
    605e:	4809      	ldr	r0, [pc, #36]	; (6084 <_gclk_init_generators_by_fref+0xf0>)
    6060:	4b09      	ldr	r3, [pc, #36]	; (6088 <_gclk_init_generators_by_fref+0xf4>)
    6062:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    6064:	687b      	ldr	r3, [r7, #4]
    6066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    606a:	2b00      	cmp	r3, #0
    606c:	d004      	beq.n	6078 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    606e:	4a10      	ldr	r2, [pc, #64]	; (60b0 <_gclk_init_generators_by_fref+0x11c>)
    6070:	210b      	movs	r1, #11
    6072:	4804      	ldr	r0, [pc, #16]	; (6084 <_gclk_init_generators_by_fref+0xf0>)
    6074:	4b04      	ldr	r3, [pc, #16]	; (6088 <_gclk_init_generators_by_fref+0xf4>)
    6076:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    6078:	bf00      	nop
    607a:	3708      	adds	r7, #8
    607c:	46bd      	mov	sp, r7
    607e:	bd80      	pop	{r7, pc}
    6080:	00010107 	.word	0x00010107
    6084:	40001c00 	.word	0x40001c00
    6088:	00005f65 	.word	0x00005f65
    608c:	00010907 	.word	0x00010907
    6090:	00010906 	.word	0x00010906
    6094:	00020908 	.word	0x00020908
    6098:	00010901 	.word	0x00010901
    609c:	00062901 	.word	0x00062901
    60a0:	000c2901 	.word	0x000c2901
    60a4:	00082908 	.word	0x00082908
    60a8:	00032901 	.word	0x00032901
    60ac:	00010905 	.word	0x00010905
    60b0:	00041905 	.word	0x00041905

000060b4 <hri_mclk_write_CPUDIV_reg>:
{
    60b4:	b480      	push	{r7}
    60b6:	b083      	sub	sp, #12
    60b8:	af00      	add	r7, sp, #0
    60ba:	6078      	str	r0, [r7, #4]
    60bc:	460b      	mov	r3, r1
    60be:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    60c0:	687b      	ldr	r3, [r7, #4]
    60c2:	78fa      	ldrb	r2, [r7, #3]
    60c4:	715a      	strb	r2, [r3, #5]
}
    60c6:	bf00      	nop
    60c8:	370c      	adds	r7, #12
    60ca:	46bd      	mov	sp, r7
    60cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    60d0:	4770      	bx	lr
	...

000060d4 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    60d4:	b580      	push	{r7, lr}
    60d6:	b082      	sub	sp, #8
    60d8:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    60da:	4b05      	ldr	r3, [pc, #20]	; (60f0 <_mclk_init+0x1c>)
    60dc:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    60de:	2101      	movs	r1, #1
    60e0:	6878      	ldr	r0, [r7, #4]
    60e2:	4b04      	ldr	r3, [pc, #16]	; (60f4 <_mclk_init+0x20>)
    60e4:	4798      	blx	r3
}
    60e6:	bf00      	nop
    60e8:	3708      	adds	r7, #8
    60ea:	46bd      	mov	sp, r7
    60ec:	bd80      	pop	{r7, pc}
    60ee:	bf00      	nop
    60f0:	40000800 	.word	0x40000800
    60f4:	000060b5 	.word	0x000060b5

000060f8 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    60f8:	b480      	push	{r7}
    60fa:	b083      	sub	sp, #12
    60fc:	af00      	add	r7, sp, #0
    60fe:	6078      	str	r0, [r7, #4]
    6100:	460b      	mov	r3, r1
    6102:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    6104:	687b      	ldr	r3, [r7, #4]
    6106:	78fa      	ldrb	r2, [r7, #3]
    6108:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    610a:	bf00      	nop
    610c:	370c      	adds	r7, #12
    610e:	46bd      	mov	sp, r7
    6110:	f85d 7b04 	ldr.w	r7, [sp], #4
    6114:	4770      	bx	lr

00006116 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    6116:	b480      	push	{r7}
    6118:	b083      	sub	sp, #12
    611a:	af00      	add	r7, sp, #0
    611c:	6078      	str	r0, [r7, #4]
    611e:	460b      	mov	r3, r1
    6120:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    6122:	687b      	ldr	r3, [r7, #4]
    6124:	887a      	ldrh	r2, [r7, #2]
    6126:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6128:	bf00      	nop
    612a:	370c      	adds	r7, #12
    612c:	46bd      	mov	sp, r7
    612e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6132:	4770      	bx	lr

00006134 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    6134:	b480      	push	{r7}
    6136:	b083      	sub	sp, #12
    6138:	af00      	add	r7, sp, #0
    613a:	6078      	str	r0, [r7, #4]
    613c:	460b      	mov	r3, r1
    613e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    6140:	687b      	ldr	r3, [r7, #4]
    6142:	78fa      	ldrb	r2, [r7, #3]
    6144:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6146:	bf00      	nop
    6148:	370c      	adds	r7, #12
    614a:	46bd      	mov	sp, r7
    614c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6150:	4770      	bx	lr

00006152 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    6152:	b480      	push	{r7}
    6154:	b083      	sub	sp, #12
    6156:	af00      	add	r7, sp, #0
    6158:	6078      	str	r0, [r7, #4]
    615a:	460b      	mov	r3, r1
    615c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    615e:	687b      	ldr	r3, [r7, #4]
    6160:	78fa      	ldrb	r2, [r7, #3]
    6162:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6164:	bf00      	nop
    6166:	370c      	adds	r7, #12
    6168:	46bd      	mov	sp, r7
    616a:	f85d 7b04 	ldr.w	r7, [sp], #4
    616e:	4770      	bx	lr

00006170 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    6170:	b480      	push	{r7}
    6172:	b085      	sub	sp, #20
    6174:	af00      	add	r7, sp, #0
    6176:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    6178:	687b      	ldr	r3, [r7, #4]
    617a:	69db      	ldr	r3, [r3, #28]
    617c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    617e:	68fb      	ldr	r3, [r7, #12]
    6180:	0a1b      	lsrs	r3, r3, #8
    6182:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6186:	60fb      	str	r3, [r7, #12]
	return tmp;
    6188:	68fb      	ldr	r3, [r7, #12]
}
    618a:	4618      	mov	r0, r3
    618c:	3714      	adds	r7, #20
    618e:	46bd      	mov	sp, r7
    6190:	f85d 7b04 	ldr.w	r7, [sp], #4
    6194:	4770      	bx	lr

00006196 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    6196:	b480      	push	{r7}
    6198:	b083      	sub	sp, #12
    619a:	af00      	add	r7, sp, #0
    619c:	6078      	str	r0, [r7, #4]
    619e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    61a0:	687b      	ldr	r3, [r7, #4]
    61a2:	683a      	ldr	r2, [r7, #0]
    61a4:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    61a6:	bf00      	nop
    61a8:	370c      	adds	r7, #12
    61aa:	46bd      	mov	sp, r7
    61ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    61b0:	4770      	bx	lr
	...

000061b4 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    61b4:	b580      	push	{r7, lr}
    61b6:	b082      	sub	sp, #8
    61b8:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    61ba:	4b13      	ldr	r3, [pc, #76]	; (6208 <_osc32kctrl_init_sources+0x54>)
    61bc:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    61be:	2300      	movs	r3, #0
    61c0:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    61c2:	f242 018e 	movw	r1, #8334	; 0x208e
    61c6:	6878      	ldr	r0, [r7, #4]
    61c8:	4b10      	ldr	r3, [pc, #64]	; (620c <_osc32kctrl_init_sources+0x58>)
    61ca:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    61cc:	2100      	movs	r1, #0
    61ce:	6878      	ldr	r0, [r7, #4]
    61d0:	4b0f      	ldr	r3, [pc, #60]	; (6210 <_osc32kctrl_init_sources+0x5c>)
    61d2:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    61d4:	2100      	movs	r1, #0
    61d6:	6878      	ldr	r0, [r7, #4]
    61d8:	4b0e      	ldr	r3, [pc, #56]	; (6214 <_osc32kctrl_init_sources+0x60>)
    61da:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    61dc:	6878      	ldr	r0, [r7, #4]
    61de:	4b0e      	ldr	r3, [pc, #56]	; (6218 <_osc32kctrl_init_sources+0x64>)
    61e0:	4798      	blx	r3
    61e2:	4603      	mov	r3, r0
    61e4:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    61e6:	887b      	ldrh	r3, [r7, #2]
    61e8:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    61ea:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    61ee:	4619      	mov	r1, r3
    61f0:	6878      	ldr	r0, [r7, #4]
    61f2:	4b0a      	ldr	r3, [pc, #40]	; (621c <_osc32kctrl_init_sources+0x68>)
    61f4:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    61f6:	2100      	movs	r1, #0
    61f8:	6878      	ldr	r0, [r7, #4]
    61fa:	4b09      	ldr	r3, [pc, #36]	; (6220 <_osc32kctrl_init_sources+0x6c>)
    61fc:	4798      	blx	r3
	(void)calib;
}
    61fe:	bf00      	nop
    6200:	3708      	adds	r7, #8
    6202:	46bd      	mov	sp, r7
    6204:	bd80      	pop	{r7, pc}
    6206:	bf00      	nop
    6208:	40001400 	.word	0x40001400
    620c:	00006117 	.word	0x00006117
    6210:	00006135 	.word	0x00006135
    6214:	00006153 	.word	0x00006153
    6218:	00006171 	.word	0x00006171
    621c:	00006197 	.word	0x00006197
    6220:	000060f9 	.word	0x000060f9

00006224 <hri_gclk_wait_for_sync>:
{
    6224:	b480      	push	{r7}
    6226:	b083      	sub	sp, #12
    6228:	af00      	add	r7, sp, #0
    622a:	6078      	str	r0, [r7, #4]
    622c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    622e:	bf00      	nop
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	685a      	ldr	r2, [r3, #4]
    6234:	683b      	ldr	r3, [r7, #0]
    6236:	4013      	ands	r3, r2
    6238:	2b00      	cmp	r3, #0
    623a:	d1f9      	bne.n	6230 <hri_gclk_wait_for_sync+0xc>
}
    623c:	bf00      	nop
    623e:	370c      	adds	r7, #12
    6240:	46bd      	mov	sp, r7
    6242:	f85d 7b04 	ldr.w	r7, [sp], #4
    6246:	4770      	bx	lr

00006248 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    6248:	b480      	push	{r7}
    624a:	b083      	sub	sp, #12
    624c:	af00      	add	r7, sp, #0
    624e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	685b      	ldr	r3, [r3, #4]
    6254:	089b      	lsrs	r3, r3, #2
    6256:	f003 0301 	and.w	r3, r3, #1
    625a:	2b00      	cmp	r3, #0
    625c:	bf14      	ite	ne
    625e:	2301      	movne	r3, #1
    6260:	2300      	moveq	r3, #0
    6262:	b2db      	uxtb	r3, r3
}
    6264:	4618      	mov	r0, r3
    6266:	370c      	adds	r7, #12
    6268:	46bd      	mov	sp, r7
    626a:	f85d 7b04 	ldr.w	r7, [sp], #4
    626e:	4770      	bx	lr

00006270 <hri_gclk_read_SYNCBUSY_reg>:
{
    6270:	b480      	push	{r7}
    6272:	b083      	sub	sp, #12
    6274:	af00      	add	r7, sp, #0
    6276:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6278:	687b      	ldr	r3, [r7, #4]
    627a:	685b      	ldr	r3, [r3, #4]
}
    627c:	4618      	mov	r0, r3
    627e:	370c      	adds	r7, #12
    6280:	46bd      	mov	sp, r7
    6282:	f85d 7b04 	ldr.w	r7, [sp], #4
    6286:	4770      	bx	lr

00006288 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    6288:	b580      	push	{r7, lr}
    628a:	b086      	sub	sp, #24
    628c:	af00      	add	r7, sp, #0
    628e:	60f8      	str	r0, [r7, #12]
    6290:	460b      	mov	r3, r1
    6292:	607a      	str	r2, [r7, #4]
    6294:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6296:	7afa      	ldrb	r2, [r7, #11]
    6298:	68fb      	ldr	r3, [r7, #12]
    629a:	3208      	adds	r2, #8
    629c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    62a0:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    62a2:	697b      	ldr	r3, [r7, #20]
    62a4:	f023 030f 	bic.w	r3, r3, #15
    62a8:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    62aa:	687b      	ldr	r3, [r7, #4]
    62ac:	f003 030f 	and.w	r3, r3, #15
    62b0:	697a      	ldr	r2, [r7, #20]
    62b2:	4313      	orrs	r3, r2
    62b4:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    62b6:	7afa      	ldrb	r2, [r7, #11]
    62b8:	68fb      	ldr	r3, [r7, #12]
    62ba:	3208      	adds	r2, #8
    62bc:	6979      	ldr	r1, [r7, #20]
    62be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    62c2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    62c6:	68f8      	ldr	r0, [r7, #12]
    62c8:	4b02      	ldr	r3, [pc, #8]	; (62d4 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    62ca:	4798      	blx	r3
}
    62cc:	bf00      	nop
    62ce:	3718      	adds	r7, #24
    62d0:	46bd      	mov	sp, r7
    62d2:	bd80      	pop	{r7, pc}
    62d4:	00006225 	.word	0x00006225

000062d8 <hri_gclk_write_PCHCTRL_reg>:
{
    62d8:	b480      	push	{r7}
    62da:	b085      	sub	sp, #20
    62dc:	af00      	add	r7, sp, #0
    62de:	60f8      	str	r0, [r7, #12]
    62e0:	460b      	mov	r3, r1
    62e2:	607a      	str	r2, [r7, #4]
    62e4:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    62e6:	7afa      	ldrb	r2, [r7, #11]
    62e8:	68fb      	ldr	r3, [r7, #12]
    62ea:	3220      	adds	r2, #32
    62ec:	6879      	ldr	r1, [r7, #4]
    62ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    62f2:	bf00      	nop
    62f4:	3714      	adds	r7, #20
    62f6:	46bd      	mov	sp, r7
    62f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    62fc:	4770      	bx	lr

000062fe <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    62fe:	b480      	push	{r7}
    6300:	b085      	sub	sp, #20
    6302:	af00      	add	r7, sp, #0
    6304:	60f8      	str	r0, [r7, #12]
    6306:	460b      	mov	r3, r1
    6308:	607a      	str	r2, [r7, #4]
    630a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    630c:	bf00      	nop
    630e:	7afa      	ldrb	r2, [r7, #11]
    6310:	68f9      	ldr	r1, [r7, #12]
    6312:	4613      	mov	r3, r2
    6314:	009b      	lsls	r3, r3, #2
    6316:	4413      	add	r3, r2
    6318:	009b      	lsls	r3, r3, #2
    631a:	440b      	add	r3, r1
    631c:	333c      	adds	r3, #60	; 0x3c
    631e:	681a      	ldr	r2, [r3, #0]
    6320:	687b      	ldr	r3, [r7, #4]
    6322:	4013      	ands	r3, r2
    6324:	2b00      	cmp	r3, #0
    6326:	d1f2      	bne.n	630e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    6328:	bf00      	nop
    632a:	3714      	adds	r7, #20
    632c:	46bd      	mov	sp, r7
    632e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6332:	4770      	bx	lr

00006334 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    6334:	b480      	push	{r7}
    6336:	b083      	sub	sp, #12
    6338:	af00      	add	r7, sp, #0
    633a:	6078      	str	r0, [r7, #4]
    633c:	460b      	mov	r3, r1
    633e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    6340:	78fa      	ldrb	r2, [r7, #3]
    6342:	6879      	ldr	r1, [r7, #4]
    6344:	4613      	mov	r3, r2
    6346:	009b      	lsls	r3, r3, #2
    6348:	4413      	add	r3, r2
    634a:	009b      	lsls	r3, r3, #2
    634c:	440b      	add	r3, r1
    634e:	3340      	adds	r3, #64	; 0x40
    6350:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    6352:	f003 0301 	and.w	r3, r3, #1
    6356:	2b00      	cmp	r3, #0
    6358:	bf14      	ite	ne
    635a:	2301      	movne	r3, #1
    635c:	2300      	moveq	r3, #0
    635e:	b2db      	uxtb	r3, r3
}
    6360:	4618      	mov	r0, r3
    6362:	370c      	adds	r7, #12
    6364:	46bd      	mov	sp, r7
    6366:	f85d 7b04 	ldr.w	r7, [sp], #4
    636a:	4770      	bx	lr

0000636c <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    636c:	b480      	push	{r7}
    636e:	b083      	sub	sp, #12
    6370:	af00      	add	r7, sp, #0
    6372:	6078      	str	r0, [r7, #4]
    6374:	460b      	mov	r3, r1
    6376:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6378:	78fa      	ldrb	r2, [r7, #3]
    637a:	6879      	ldr	r1, [r7, #4]
    637c:	4613      	mov	r3, r2
    637e:	009b      	lsls	r3, r3, #2
    6380:	4413      	add	r3, r2
    6382:	009b      	lsls	r3, r3, #2
    6384:	440b      	add	r3, r1
    6386:	3340      	adds	r3, #64	; 0x40
    6388:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    638a:	085b      	lsrs	r3, r3, #1
    638c:	f003 0301 	and.w	r3, r3, #1
    6390:	2b00      	cmp	r3, #0
    6392:	bf14      	ite	ne
    6394:	2301      	movne	r3, #1
    6396:	2300      	moveq	r3, #0
    6398:	b2db      	uxtb	r3, r3
}
    639a:	4618      	mov	r0, r3
    639c:	370c      	adds	r7, #12
    639e:	46bd      	mov	sp, r7
    63a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    63a4:	4770      	bx	lr
	...

000063a8 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    63a8:	b580      	push	{r7, lr}
    63aa:	b082      	sub	sp, #8
    63ac:	af00      	add	r7, sp, #0
    63ae:	6078      	str	r0, [r7, #4]
    63b0:	460b      	mov	r3, r1
    63b2:	70fb      	strb	r3, [r7, #3]
    63b4:	4613      	mov	r3, r2
    63b6:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    63b8:	78fa      	ldrb	r2, [r7, #3]
    63ba:	6879      	ldr	r1, [r7, #4]
    63bc:	4613      	mov	r3, r2
    63be:	009b      	lsls	r3, r3, #2
    63c0:	4413      	add	r3, r2
    63c2:	009b      	lsls	r3, r3, #2
    63c4:	440b      	add	r3, r1
    63c6:	3330      	adds	r3, #48	; 0x30
    63c8:	78ba      	ldrb	r2, [r7, #2]
    63ca:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    63cc:	78fb      	ldrb	r3, [r7, #3]
    63ce:	2202      	movs	r2, #2
    63d0:	4619      	mov	r1, r3
    63d2:	6878      	ldr	r0, [r7, #4]
    63d4:	4b02      	ldr	r3, [pc, #8]	; (63e0 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    63d6:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    63d8:	bf00      	nop
    63da:	3708      	adds	r7, #8
    63dc:	46bd      	mov	sp, r7
    63de:	bd80      	pop	{r7, pc}
    63e0:	000062ff 	.word	0x000062ff

000063e4 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    63e4:	b580      	push	{r7, lr}
    63e6:	b084      	sub	sp, #16
    63e8:	af00      	add	r7, sp, #0
    63ea:	60f8      	str	r0, [r7, #12]
    63ec:	460b      	mov	r3, r1
    63ee:	607a      	str	r2, [r7, #4]
    63f0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    63f2:	7afa      	ldrb	r2, [r7, #11]
    63f4:	68f9      	ldr	r1, [r7, #12]
    63f6:	4613      	mov	r3, r2
    63f8:	009b      	lsls	r3, r3, #2
    63fa:	4413      	add	r3, r2
    63fc:	009b      	lsls	r3, r3, #2
    63fe:	440b      	add	r3, r1
    6400:	3334      	adds	r3, #52	; 0x34
    6402:	687a      	ldr	r2, [r7, #4]
    6404:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    6406:	7afb      	ldrb	r3, [r7, #11]
    6408:	2206      	movs	r2, #6
    640a:	4619      	mov	r1, r3
    640c:	68f8      	ldr	r0, [r7, #12]
    640e:	4b03      	ldr	r3, [pc, #12]	; (641c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    6410:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6412:	bf00      	nop
    6414:	3710      	adds	r7, #16
    6416:	46bd      	mov	sp, r7
    6418:	bd80      	pop	{r7, pc}
    641a:	bf00      	nop
    641c:	000062ff 	.word	0x000062ff

00006420 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    6420:	b480      	push	{r7}
    6422:	b085      	sub	sp, #20
    6424:	af00      	add	r7, sp, #0
    6426:	60f8      	str	r0, [r7, #12]
    6428:	460b      	mov	r3, r1
    642a:	607a      	str	r2, [r7, #4]
    642c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    642e:	7afa      	ldrb	r2, [r7, #11]
    6430:	68f9      	ldr	r1, [r7, #12]
    6432:	4613      	mov	r3, r2
    6434:	009b      	lsls	r3, r3, #2
    6436:	4413      	add	r3, r2
    6438:	009b      	lsls	r3, r3, #2
    643a:	440b      	add	r3, r1
    643c:	3338      	adds	r3, #56	; 0x38
    643e:	687a      	ldr	r2, [r7, #4]
    6440:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6442:	bf00      	nop
    6444:	3714      	adds	r7, #20
    6446:	46bd      	mov	sp, r7
    6448:	f85d 7b04 	ldr.w	r7, [sp], #4
    644c:	4770      	bx	lr

0000644e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    644e:	b480      	push	{r7}
    6450:	b083      	sub	sp, #12
    6452:	af00      	add	r7, sp, #0
    6454:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    6456:	687b      	ldr	r3, [r7, #4]
    6458:	691b      	ldr	r3, [r3, #16]
    645a:	085b      	lsrs	r3, r3, #1
    645c:	f003 0301 	and.w	r3, r3, #1
    6460:	2b00      	cmp	r3, #0
    6462:	bf14      	ite	ne
    6464:	2301      	movne	r3, #1
    6466:	2300      	moveq	r3, #0
    6468:	b2db      	uxtb	r3, r3
}
    646a:	4618      	mov	r0, r3
    646c:	370c      	adds	r7, #12
    646e:	46bd      	mov	sp, r7
    6470:	f85d 7b04 	ldr.w	r7, [sp], #4
    6474:	4770      	bx	lr

00006476 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    6476:	b480      	push	{r7}
    6478:	b083      	sub	sp, #12
    647a:	af00      	add	r7, sp, #0
    647c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    647e:	687b      	ldr	r3, [r7, #4]
    6480:	691b      	ldr	r3, [r3, #16]
    6482:	0a1b      	lsrs	r3, r3, #8
    6484:	f003 0301 	and.w	r3, r3, #1
    6488:	2b00      	cmp	r3, #0
    648a:	bf14      	ite	ne
    648c:	2301      	movne	r3, #1
    648e:	2300      	moveq	r3, #0
    6490:	b2db      	uxtb	r3, r3
}
    6492:	4618      	mov	r0, r3
    6494:	370c      	adds	r7, #12
    6496:	46bd      	mov	sp, r7
    6498:	f85d 7b04 	ldr.w	r7, [sp], #4
    649c:	4770      	bx	lr

0000649e <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    649e:	b480      	push	{r7}
    64a0:	b085      	sub	sp, #20
    64a2:	af00      	add	r7, sp, #0
    64a4:	6078      	str	r0, [r7, #4]
    64a6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    64a8:	687b      	ldr	r3, [r7, #4]
    64aa:	691b      	ldr	r3, [r3, #16]
    64ac:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    64ae:	68fa      	ldr	r2, [r7, #12]
    64b0:	683b      	ldr	r3, [r7, #0]
    64b2:	4013      	ands	r3, r2
    64b4:	60fb      	str	r3, [r7, #12]
	return tmp;
    64b6:	68fb      	ldr	r3, [r7, #12]
}
    64b8:	4618      	mov	r0, r3
    64ba:	3714      	adds	r7, #20
    64bc:	46bd      	mov	sp, r7
    64be:	f85d 7b04 	ldr.w	r7, [sp], #4
    64c2:	4770      	bx	lr

000064c4 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    64c4:	b480      	push	{r7}
    64c6:	b085      	sub	sp, #20
    64c8:	af00      	add	r7, sp, #0
    64ca:	60f8      	str	r0, [r7, #12]
    64cc:	460b      	mov	r3, r1
    64ce:	607a      	str	r2, [r7, #4]
    64d0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    64d2:	7afb      	ldrb	r3, [r7, #11]
    64d4:	68fa      	ldr	r2, [r7, #12]
    64d6:	3304      	adds	r3, #4
    64d8:	009b      	lsls	r3, r3, #2
    64da:	4413      	add	r3, r2
    64dc:	687a      	ldr	r2, [r7, #4]
    64de:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    64e0:	bf00      	nop
    64e2:	3714      	adds	r7, #20
    64e4:	46bd      	mov	sp, r7
    64e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ea:	4770      	bx	lr

000064ec <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    64ec:	b480      	push	{r7}
    64ee:	b083      	sub	sp, #12
    64f0:	af00      	add	r7, sp, #0
    64f2:	6078      	str	r0, [r7, #4]
    64f4:	460b      	mov	r3, r1
    64f6:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    64f8:	687b      	ldr	r3, [r7, #4]
    64fa:	78fa      	ldrb	r2, [r7, #3]
    64fc:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    64fe:	bf00      	nop
    6500:	370c      	adds	r7, #12
    6502:	46bd      	mov	sp, r7
    6504:	f85d 7b04 	ldr.w	r7, [sp], #4
    6508:	4770      	bx	lr

0000650a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    650a:	b480      	push	{r7}
    650c:	b085      	sub	sp, #20
    650e:	af00      	add	r7, sp, #0
    6510:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    6512:	687b      	ldr	r3, [r7, #4]
    6514:	f893 3020 	ldrb.w	r3, [r3, #32]
    6518:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    651a:	7bfb      	ldrb	r3, [r7, #15]
    651c:	f003 0301 	and.w	r3, r3, #1
    6520:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6522:	7bfb      	ldrb	r3, [r7, #15]
    6524:	2b00      	cmp	r3, #0
    6526:	bf14      	ite	ne
    6528:	2301      	movne	r3, #1
    652a:	2300      	moveq	r3, #0
    652c:	b2db      	uxtb	r3, r3
}
    652e:	4618      	mov	r0, r3
    6530:	3714      	adds	r7, #20
    6532:	46bd      	mov	sp, r7
    6534:	f85d 7b04 	ldr.w	r7, [sp], #4
    6538:	4770      	bx	lr

0000653a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    653a:	b480      	push	{r7}
    653c:	b083      	sub	sp, #12
    653e:	af00      	add	r7, sp, #0
    6540:	6078      	str	r0, [r7, #4]
    6542:	460b      	mov	r3, r1
    6544:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6546:	687b      	ldr	r3, [r7, #4]
    6548:	78fa      	ldrb	r2, [r7, #3]
    654a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    654e:	bf00      	nop
    6550:	370c      	adds	r7, #12
    6552:	46bd      	mov	sp, r7
    6554:	f85d 7b04 	ldr.w	r7, [sp], #4
    6558:	4770      	bx	lr

0000655a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    655a:	b480      	push	{r7}
    655c:	b083      	sub	sp, #12
    655e:	af00      	add	r7, sp, #0
    6560:	6078      	str	r0, [r7, #4]
    6562:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6564:	687b      	ldr	r3, [r7, #4]
    6566:	683a      	ldr	r2, [r7, #0]
    6568:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    656a:	bf00      	nop
    656c:	370c      	adds	r7, #12
    656e:	46bd      	mov	sp, r7
    6570:	f85d 7b04 	ldr.w	r7, [sp], #4
    6574:	4770      	bx	lr

00006576 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    6576:	b480      	push	{r7}
    6578:	b083      	sub	sp, #12
    657a:	af00      	add	r7, sp, #0
    657c:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    657e:	687b      	ldr	r3, [r7, #4]
    6580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6582:	4618      	mov	r0, r3
    6584:	370c      	adds	r7, #12
    6586:	46bd      	mov	sp, r7
    6588:	f85d 7b04 	ldr.w	r7, [sp], #4
    658c:	4770      	bx	lr

0000658e <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    658e:	b480      	push	{r7}
    6590:	b083      	sub	sp, #12
    6592:	af00      	add	r7, sp, #0
    6594:	6078      	str	r0, [r7, #4]
    6596:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    6598:	687b      	ldr	r3, [r7, #4]
    659a:	683a      	ldr	r2, [r7, #0]
    659c:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    659e:	bf00      	nop
    65a0:	370c      	adds	r7, #12
    65a2:	46bd      	mov	sp, r7
    65a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    65a8:	4770      	bx	lr

000065aa <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    65aa:	b480      	push	{r7}
    65ac:	b085      	sub	sp, #20
    65ae:	af00      	add	r7, sp, #0
    65b0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    65b2:	687b      	ldr	r3, [r7, #4]
    65b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    65b8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    65ba:	7bfb      	ldrb	r3, [r7, #15]
    65bc:	085b      	lsrs	r3, r3, #1
    65be:	b2db      	uxtb	r3, r3
    65c0:	f003 0301 	and.w	r3, r3, #1
    65c4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    65c6:	7bfb      	ldrb	r3, [r7, #15]
    65c8:	2b00      	cmp	r3, #0
    65ca:	bf14      	ite	ne
    65cc:	2301      	movne	r3, #1
    65ce:	2300      	moveq	r3, #0
    65d0:	b2db      	uxtb	r3, r3
}
    65d2:	4618      	mov	r0, r3
    65d4:	3714      	adds	r7, #20
    65d6:	46bd      	mov	sp, r7
    65d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    65dc:	4770      	bx	lr

000065de <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    65de:	b480      	push	{r7}
    65e0:	b085      	sub	sp, #20
    65e2:	af00      	add	r7, sp, #0
    65e4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    65e6:	687b      	ldr	r3, [r7, #4]
    65e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    65ec:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    65ee:	7bfb      	ldrb	r3, [r7, #15]
    65f0:	089b      	lsrs	r3, r3, #2
    65f2:	b2db      	uxtb	r3, r3
    65f4:	f003 0301 	and.w	r3, r3, #1
    65f8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    65fa:	7bfb      	ldrb	r3, [r7, #15]
    65fc:	2b00      	cmp	r3, #0
    65fe:	bf14      	ite	ne
    6600:	2301      	movne	r3, #1
    6602:	2300      	moveq	r3, #0
    6604:	b2db      	uxtb	r3, r3
}
    6606:	4618      	mov	r0, r3
    6608:	3714      	adds	r7, #20
    660a:	46bd      	mov	sp, r7
    660c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6610:	4770      	bx	lr

00006612 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    6612:	b480      	push	{r7}
    6614:	b085      	sub	sp, #20
    6616:	af00      	add	r7, sp, #0
    6618:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    661a:	687b      	ldr	r3, [r7, #4]
    661c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6620:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    6622:	7bfb      	ldrb	r3, [r7, #15]
    6624:	08db      	lsrs	r3, r3, #3
    6626:	b2db      	uxtb	r3, r3
    6628:	f003 0301 	and.w	r3, r3, #1
    662c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    662e:	7bfb      	ldrb	r3, [r7, #15]
    6630:	2b00      	cmp	r3, #0
    6632:	bf14      	ite	ne
    6634:	2301      	movne	r3, #1
    6636:	2300      	moveq	r3, #0
    6638:	b2db      	uxtb	r3, r3
}
    663a:	4618      	mov	r0, r3
    663c:	3714      	adds	r7, #20
    663e:	46bd      	mov	sp, r7
    6640:	f85d 7b04 	ldr.w	r7, [sp], #4
    6644:	4770      	bx	lr

00006646 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    6646:	b480      	push	{r7}
    6648:	b085      	sub	sp, #20
    664a:	af00      	add	r7, sp, #0
    664c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    664e:	687b      	ldr	r3, [r7, #4]
    6650:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6654:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    6656:	7bfb      	ldrb	r3, [r7, #15]
    6658:	091b      	lsrs	r3, r3, #4
    665a:	b2db      	uxtb	r3, r3
    665c:	f003 0301 	and.w	r3, r3, #1
    6660:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6662:	7bfb      	ldrb	r3, [r7, #15]
    6664:	2b00      	cmp	r3, #0
    6666:	bf14      	ite	ne
    6668:	2301      	movne	r3, #1
    666a:	2300      	moveq	r3, #0
    666c:	b2db      	uxtb	r3, r3
}
    666e:	4618      	mov	r0, r3
    6670:	3714      	adds	r7, #20
    6672:	46bd      	mov	sp, r7
    6674:	f85d 7b04 	ldr.w	r7, [sp], #4
    6678:	4770      	bx	lr
	...

0000667c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    667c:	b580      	push	{r7, lr}
    667e:	b082      	sub	sp, #8
    6680:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6682:	4b0a      	ldr	r3, [pc, #40]	; (66ac <_oscctrl_init_sources+0x30>)
    6684:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    6686:	4a0a      	ldr	r2, [pc, #40]	; (66b0 <_oscctrl_init_sources+0x34>)
    6688:	2101      	movs	r1, #1
    668a:	6878      	ldr	r0, [r7, #4]
    668c:	4b09      	ldr	r3, [pc, #36]	; (66b4 <_oscctrl_init_sources+0x38>)
    668e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    6690:	bf00      	nop
    6692:	6878      	ldr	r0, [r7, #4]
    6694:	4b08      	ldr	r3, [pc, #32]	; (66b8 <_oscctrl_init_sources+0x3c>)
    6696:	4798      	blx	r3
    6698:	4603      	mov	r3, r0
    669a:	f083 0301 	eor.w	r3, r3, #1
    669e:	b2db      	uxtb	r3, r3
    66a0:	2b00      	cmp	r3, #0
    66a2:	d1f6      	bne.n	6692 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    66a4:	bf00      	nop
    66a6:	3708      	adds	r7, #8
    66a8:	46bd      	mov	sp, r7
    66aa:	bd80      	pop	{r7, pc}
    66ac:	40001000 	.word	0x40001000
    66b0:	03002646 	.word	0x03002646
    66b4:	000064c5 	.word	0x000064c5
    66b8:	0000644f 	.word	0x0000644f

000066bc <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    66bc:	b580      	push	{r7, lr}
    66be:	b084      	sub	sp, #16
    66c0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    66c2:	4b6b      	ldr	r3, [pc, #428]	; (6870 <_oscctrl_init_referenced_generators+0x1b4>)
    66c4:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    66c6:	2204      	movs	r2, #4
    66c8:	2100      	movs	r1, #0
    66ca:	486a      	ldr	r0, [pc, #424]	; (6874 <_oscctrl_init_referenced_generators+0x1b8>)
    66cc:	4b6a      	ldr	r3, [pc, #424]	; (6878 <_oscctrl_init_referenced_generators+0x1bc>)
    66ce:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    66d0:	bf00      	nop
    66d2:	4868      	ldr	r0, [pc, #416]	; (6874 <_oscctrl_init_referenced_generators+0x1b8>)
    66d4:	4b69      	ldr	r3, [pc, #420]	; (687c <_oscctrl_init_referenced_generators+0x1c0>)
    66d6:	4798      	blx	r3
    66d8:	4603      	mov	r3, r0
    66da:	2b00      	cmp	r3, #0
    66dc:	d1f9      	bne.n	66d2 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    66de:	2100      	movs	r1, #0
    66e0:	68f8      	ldr	r0, [r7, #12]
    66e2:	4b67      	ldr	r3, [pc, #412]	; (6880 <_oscctrl_init_referenced_generators+0x1c4>)
    66e4:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    66e6:	4967      	ldr	r1, [pc, #412]	; (6884 <_oscctrl_init_referenced_generators+0x1c8>)
    66e8:	68f8      	ldr	r0, [r7, #12]
    66ea:	4b67      	ldr	r3, [pc, #412]	; (6888 <_oscctrl_init_referenced_generators+0x1cc>)
    66ec:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    66ee:	bf00      	nop
    66f0:	68f8      	ldr	r0, [r7, #12]
    66f2:	4b66      	ldr	r3, [pc, #408]	; (688c <_oscctrl_init_referenced_generators+0x1d0>)
    66f4:	4798      	blx	r3
    66f6:	4603      	mov	r3, r0
    66f8:	2b00      	cmp	r3, #0
    66fa:	d1f9      	bne.n	66f0 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    66fc:	2100      	movs	r1, #0
    66fe:	68f8      	ldr	r0, [r7, #12]
    6700:	4b63      	ldr	r3, [pc, #396]	; (6890 <_oscctrl_init_referenced_generators+0x1d4>)
    6702:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6704:	bf00      	nop
    6706:	68f8      	ldr	r0, [r7, #12]
    6708:	4b62      	ldr	r3, [pc, #392]	; (6894 <_oscctrl_init_referenced_generators+0x1d8>)
    670a:	4798      	blx	r3
    670c:	4603      	mov	r3, r0
    670e:	2b00      	cmp	r3, #0
    6710:	d1f9      	bne.n	6706 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    6712:	2302      	movs	r3, #2
    6714:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    6716:	7afb      	ldrb	r3, [r7, #11]
    6718:	4619      	mov	r1, r3
    671a:	68f8      	ldr	r0, [r7, #12]
    671c:	4b58      	ldr	r3, [pc, #352]	; (6880 <_oscctrl_init_referenced_generators+0x1c4>)
    671e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    6720:	bf00      	nop
    6722:	68f8      	ldr	r0, [r7, #12]
    6724:	4b5c      	ldr	r3, [pc, #368]	; (6898 <_oscctrl_init_referenced_generators+0x1dc>)
    6726:	4798      	blx	r3
    6728:	4603      	mov	r3, r0
    672a:	2b00      	cmp	r3, #0
    672c:	d1f9      	bne.n	6722 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    672e:	68f8      	ldr	r0, [r7, #12]
    6730:	4b5a      	ldr	r3, [pc, #360]	; (689c <_oscctrl_init_referenced_generators+0x1e0>)
    6732:	4798      	blx	r3
    6734:	4603      	mov	r3, r0
    6736:	4619      	mov	r1, r3
    6738:	68f8      	ldr	r0, [r7, #12]
    673a:	4b59      	ldr	r3, [pc, #356]	; (68a0 <_oscctrl_init_referenced_generators+0x1e4>)
    673c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    673e:	bf00      	nop
    6740:	68f8      	ldr	r0, [r7, #12]
    6742:	4b58      	ldr	r3, [pc, #352]	; (68a4 <_oscctrl_init_referenced_generators+0x1e8>)
    6744:	4798      	blx	r3
    6746:	4603      	mov	r3, r0
    6748:	2b00      	cmp	r3, #0
    674a:	d1f9      	bne.n	6740 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    674c:	2319      	movs	r3, #25
    674e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    6750:	7afb      	ldrb	r3, [r7, #11]
    6752:	4619      	mov	r1, r3
    6754:	68f8      	ldr	r0, [r7, #12]
    6756:	4b4e      	ldr	r3, [pc, #312]	; (6890 <_oscctrl_init_referenced_generators+0x1d4>)
    6758:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    675a:	bf00      	nop
    675c:	68f8      	ldr	r0, [r7, #12]
    675e:	4b4d      	ldr	r3, [pc, #308]	; (6894 <_oscctrl_init_referenced_generators+0x1d8>)
    6760:	4798      	blx	r3
    6762:	4603      	mov	r3, r0
    6764:	2b00      	cmp	r3, #0
    6766:	d1f9      	bne.n	675c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    6768:	2245      	movs	r2, #69	; 0x45
    676a:	2101      	movs	r1, #1
    676c:	4841      	ldr	r0, [pc, #260]	; (6874 <_oscctrl_init_referenced_generators+0x1b8>)
    676e:	4b4e      	ldr	r3, [pc, #312]	; (68a8 <_oscctrl_init_referenced_generators+0x1ec>)
    6770:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    6772:	223b      	movs	r2, #59	; 0x3b
    6774:	2100      	movs	r1, #0
    6776:	68f8      	ldr	r0, [r7, #12]
    6778:	4b4c      	ldr	r3, [pc, #304]	; (68ac <_oscctrl_init_referenced_generators+0x1f0>)
    677a:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    677c:	f44f 6201 	mov.w	r2, #2064	; 0x810
    6780:	2100      	movs	r1, #0
    6782:	68f8      	ldr	r0, [r7, #12]
    6784:	4b4a      	ldr	r3, [pc, #296]	; (68b0 <_oscctrl_init_referenced_generators+0x1f4>)
    6786:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    6788:	2242      	movs	r2, #66	; 0x42
    678a:	2100      	movs	r1, #0
    678c:	68f8      	ldr	r0, [r7, #12]
    678e:	4b49      	ldr	r3, [pc, #292]	; (68b4 <_oscctrl_init_referenced_generators+0x1f8>)
    6790:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    6792:	4a49      	ldr	r2, [pc, #292]	; (68b8 <_oscctrl_init_referenced_generators+0x1fc>)
    6794:	2101      	movs	r1, #1
    6796:	68f8      	ldr	r0, [r7, #12]
    6798:	4b44      	ldr	r3, [pc, #272]	; (68ac <_oscctrl_init_referenced_generators+0x1f0>)
    679a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    679c:	f44f 6203 	mov.w	r2, #2096	; 0x830
    67a0:	2101      	movs	r1, #1
    67a2:	68f8      	ldr	r0, [r7, #12]
    67a4:	4b42      	ldr	r3, [pc, #264]	; (68b0 <_oscctrl_init_referenced_generators+0x1f4>)
    67a6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    67a8:	2202      	movs	r2, #2
    67aa:	2101      	movs	r1, #1
    67ac:	68f8      	ldr	r0, [r7, #12]
    67ae:	4b41      	ldr	r3, [pc, #260]	; (68b4 <_oscctrl_init_referenced_generators+0x1f8>)
    67b0:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    67b2:	68f8      	ldr	r0, [r7, #12]
    67b4:	4b41      	ldr	r3, [pc, #260]	; (68bc <_oscctrl_init_referenced_generators+0x200>)
    67b6:	4798      	blx	r3
    67b8:	4603      	mov	r3, r0
    67ba:	2b00      	cmp	r3, #0
    67bc:	d00c      	beq.n	67d8 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    67be:	f44f 6310 	mov.w	r3, #2304	; 0x900
    67c2:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    67c4:	bf00      	nop
    67c6:	6879      	ldr	r1, [r7, #4]
    67c8:	68f8      	ldr	r0, [r7, #12]
    67ca:	4b3d      	ldr	r3, [pc, #244]	; (68c0 <_oscctrl_init_referenced_generators+0x204>)
    67cc:	4798      	blx	r3
    67ce:	4602      	mov	r2, r0
    67d0:	687b      	ldr	r3, [r7, #4]
    67d2:	429a      	cmp	r2, r3
    67d4:	d1f7      	bne.n	67c6 <_oscctrl_init_referenced_generators+0x10a>
    67d6:	e009      	b.n	67ec <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    67d8:	bf00      	nop
    67da:	68f8      	ldr	r0, [r7, #12]
    67dc:	4b39      	ldr	r3, [pc, #228]	; (68c4 <_oscctrl_init_referenced_generators+0x208>)
    67de:	4798      	blx	r3
    67e0:	4603      	mov	r3, r0
    67e2:	f083 0301 	eor.w	r3, r3, #1
    67e6:	b2db      	uxtb	r3, r3
    67e8:	2b00      	cmp	r3, #0
    67ea:	d1f6      	bne.n	67da <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    67ec:	bf00      	nop
    67ee:	2100      	movs	r1, #0
    67f0:	68f8      	ldr	r0, [r7, #12]
    67f2:	4b35      	ldr	r3, [pc, #212]	; (68c8 <_oscctrl_init_referenced_generators+0x20c>)
    67f4:	4798      	blx	r3
    67f6:	4603      	mov	r3, r0
    67f8:	f083 0301 	eor.w	r3, r3, #1
    67fc:	b2db      	uxtb	r3, r3
    67fe:	2b00      	cmp	r3, #0
    6800:	d009      	beq.n	6816 <_oscctrl_init_referenced_generators+0x15a>
    6802:	2100      	movs	r1, #0
    6804:	68f8      	ldr	r0, [r7, #12]
    6806:	4b31      	ldr	r3, [pc, #196]	; (68cc <_oscctrl_init_referenced_generators+0x210>)
    6808:	4798      	blx	r3
    680a:	4603      	mov	r3, r0
    680c:	f083 0301 	eor.w	r3, r3, #1
    6810:	b2db      	uxtb	r3, r3
    6812:	2b00      	cmp	r3, #0
    6814:	d1eb      	bne.n	67ee <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    6816:	bf00      	nop
    6818:	2101      	movs	r1, #1
    681a:	68f8      	ldr	r0, [r7, #12]
    681c:	4b2a      	ldr	r3, [pc, #168]	; (68c8 <_oscctrl_init_referenced_generators+0x20c>)
    681e:	4798      	blx	r3
    6820:	4603      	mov	r3, r0
    6822:	f083 0301 	eor.w	r3, r3, #1
    6826:	b2db      	uxtb	r3, r3
    6828:	2b00      	cmp	r3, #0
    682a:	d009      	beq.n	6840 <_oscctrl_init_referenced_generators+0x184>
    682c:	2101      	movs	r1, #1
    682e:	68f8      	ldr	r0, [r7, #12]
    6830:	4b26      	ldr	r3, [pc, #152]	; (68cc <_oscctrl_init_referenced_generators+0x210>)
    6832:	4798      	blx	r3
    6834:	4603      	mov	r3, r0
    6836:	f083 0301 	eor.w	r3, r3, #1
    683a:	b2db      	uxtb	r3, r3
    683c:	2b00      	cmp	r3, #0
    683e:	d1eb      	bne.n	6818 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    6840:	bf00      	nop
    6842:	480c      	ldr	r0, [pc, #48]	; (6874 <_oscctrl_init_referenced_generators+0x1b8>)
    6844:	4b22      	ldr	r3, [pc, #136]	; (68d0 <_oscctrl_init_referenced_generators+0x214>)
    6846:	4798      	blx	r3
    6848:	4603      	mov	r3, r0
    684a:	2b00      	cmp	r3, #0
    684c:	d1f9      	bne.n	6842 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    684e:	2207      	movs	r2, #7
    6850:	2100      	movs	r1, #0
    6852:	4808      	ldr	r0, [pc, #32]	; (6874 <_oscctrl_init_referenced_generators+0x1b8>)
    6854:	4b08      	ldr	r3, [pc, #32]	; (6878 <_oscctrl_init_referenced_generators+0x1bc>)
    6856:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6858:	bf00      	nop
    685a:	4806      	ldr	r0, [pc, #24]	; (6874 <_oscctrl_init_referenced_generators+0x1b8>)
    685c:	4b07      	ldr	r3, [pc, #28]	; (687c <_oscctrl_init_referenced_generators+0x1c0>)
    685e:	4798      	blx	r3
    6860:	4603      	mov	r3, r0
    6862:	2b00      	cmp	r3, #0
    6864:	d1f9      	bne.n	685a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    6866:	bf00      	nop
    6868:	3710      	adds	r7, #16
    686a:	46bd      	mov	sp, r7
    686c:	bd80      	pop	{r7, pc}
    686e:	bf00      	nop
    6870:	40001000 	.word	0x40001000
    6874:	40001c00 	.word	0x40001c00
    6878:	00006289 	.word	0x00006289
    687c:	00006249 	.word	0x00006249
    6880:	000064ed 	.word	0x000064ed
    6884:	0401bb80 	.word	0x0401bb80
    6888:	0000658f 	.word	0x0000658f
    688c:	00006647 	.word	0x00006647
    6890:	0000653b 	.word	0x0000653b
    6894:	000065df 	.word	0x000065df
    6898:	000065ab 	.word	0x000065ab
    689c:	00006577 	.word	0x00006577
    68a0:	0000655b 	.word	0x0000655b
    68a4:	00006613 	.word	0x00006613
    68a8:	000062d9 	.word	0x000062d9
    68ac:	000063e5 	.word	0x000063e5
    68b0:	00006421 	.word	0x00006421
    68b4:	000063a9 	.word	0x000063a9
    68b8:	000407a0 	.word	0x000407a0
    68bc:	0000650b 	.word	0x0000650b
    68c0:	0000649f 	.word	0x0000649f
    68c4:	00006477 	.word	0x00006477
    68c8:	00006335 	.word	0x00006335
    68cc:	0000636d 	.word	0x0000636d
    68d0:	00006271 	.word	0x00006271

000068d4 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    68d4:	b480      	push	{r7}
    68d6:	b083      	sub	sp, #12
    68d8:	af00      	add	r7, sp, #0
    68da:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    68dc:	687b      	ldr	r3, [r7, #4]
    68de:	69db      	ldr	r3, [r3, #28]
    68e0:	0a9b      	lsrs	r3, r3, #10
    68e2:	f003 0301 	and.w	r3, r3, #1
    68e6:	2b00      	cmp	r3, #0
    68e8:	bf14      	ite	ne
    68ea:	2301      	movne	r3, #1
    68ec:	2300      	moveq	r3, #0
    68ee:	b2db      	uxtb	r3, r3
}
    68f0:	4618      	mov	r0, r3
    68f2:	370c      	adds	r7, #12
    68f4:	46bd      	mov	sp, r7
    68f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    68fa:	4770      	bx	lr

000068fc <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    68fc:	b480      	push	{r7}
    68fe:	b083      	sub	sp, #12
    6900:	af00      	add	r7, sp, #0
    6902:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    6904:	687b      	ldr	r3, [r7, #4]
    6906:	f44f 6280 	mov.w	r2, #1024	; 0x400
    690a:	61da      	str	r2, [r3, #28]
}
    690c:	bf00      	nop
    690e:	370c      	adds	r7, #12
    6910:	46bd      	mov	sp, r7
    6912:	f85d 7b04 	ldr.w	r7, [sp], #4
    6916:	4770      	bx	lr

00006918 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    6918:	b480      	push	{r7}
    691a:	b083      	sub	sp, #12
    691c:	af00      	add	r7, sp, #0
    691e:	6078      	str	r0, [r7, #4]
    6920:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    6922:	687b      	ldr	r3, [r7, #4]
    6924:	683a      	ldr	r2, [r7, #0]
    6926:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6928:	bf00      	nop
    692a:	370c      	adds	r7, #12
    692c:	46bd      	mov	sp, r7
    692e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6932:	4770      	bx	lr

00006934 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    6934:	b480      	push	{r7}
    6936:	b083      	sub	sp, #12
    6938:	af00      	add	r7, sp, #0
    693a:	6078      	str	r0, [r7, #4]
    693c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    693e:	687b      	ldr	r3, [r7, #4]
    6940:	683a      	ldr	r2, [r7, #0]
    6942:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6944:	bf00      	nop
    6946:	370c      	adds	r7, #12
    6948:	46bd      	mov	sp, r7
    694a:	f85d 7b04 	ldr.w	r7, [sp], #4
    694e:	4770      	bx	lr

00006950 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    6950:	b480      	push	{r7}
    6952:	b083      	sub	sp, #12
    6954:	af00      	add	r7, sp, #0
    6956:	6078      	str	r0, [r7, #4]
    6958:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    695a:	687b      	ldr	r3, [r7, #4]
    695c:	683a      	ldr	r2, [r7, #0]
    695e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6960:	bf00      	nop
    6962:	370c      	adds	r7, #12
    6964:	46bd      	mov	sp, r7
    6966:	f85d 7b04 	ldr.w	r7, [sp], #4
    696a:	4770      	bx	lr

0000696c <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    696c:	b480      	push	{r7}
    696e:	b083      	sub	sp, #12
    6970:	af00      	add	r7, sp, #0
    6972:	6078      	str	r0, [r7, #4]
    6974:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    6976:	687b      	ldr	r3, [r7, #4]
    6978:	683a      	ldr	r2, [r7, #0]
    697a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    697c:	bf00      	nop
    697e:	370c      	adds	r7, #12
    6980:	46bd      	mov	sp, r7
    6982:	f85d 7b04 	ldr.w	r7, [sp], #4
    6986:	4770      	bx	lr

00006988 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    6988:	b480      	push	{r7}
    698a:	b085      	sub	sp, #20
    698c:	af00      	add	r7, sp, #0
    698e:	6078      	str	r0, [r7, #4]
    6990:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    6992:	687b      	ldr	r3, [r7, #4]
    6994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6996:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    6998:	68fb      	ldr	r3, [r7, #12]
    699a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    699e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    69a0:	683b      	ldr	r3, [r7, #0]
    69a2:	b2db      	uxtb	r3, r3
    69a4:	68fa      	ldr	r2, [r7, #12]
    69a6:	4313      	orrs	r3, r2
    69a8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	68fa      	ldr	r2, [r7, #12]
    69ae:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    69b0:	bf00      	nop
    69b2:	3714      	adds	r7, #20
    69b4:	46bd      	mov	sp, r7
    69b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    69ba:	4770      	bx	lr

000069bc <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    69bc:	b480      	push	{r7}
    69be:	b085      	sub	sp, #20
    69c0:	af00      	add	r7, sp, #0
    69c2:	6078      	str	r0, [r7, #4]
    69c4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    69c6:	687b      	ldr	r3, [r7, #4]
    69c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    69ca:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    69cc:	68fb      	ldr	r3, [r7, #12]
    69ce:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    69d2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    69d4:	683b      	ldr	r3, [r7, #0]
    69d6:	041b      	lsls	r3, r3, #16
    69d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    69dc:	68fa      	ldr	r2, [r7, #12]
    69de:	4313      	orrs	r3, r2
    69e0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    69e2:	687b      	ldr	r3, [r7, #4]
    69e4:	68fa      	ldr	r2, [r7, #12]
    69e6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    69e8:	bf00      	nop
    69ea:	3714      	adds	r7, #20
    69ec:	46bd      	mov	sp, r7
    69ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    69f2:	4770      	bx	lr

000069f4 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    69f4:	b480      	push	{r7}
    69f6:	b083      	sub	sp, #12
    69f8:	af00      	add	r7, sp, #0
    69fa:	6078      	str	r0, [r7, #4]
    69fc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    69fe:	687b      	ldr	r3, [r7, #4]
    6a00:	683a      	ldr	r2, [r7, #0]
    6a02:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6a04:	bf00      	nop
    6a06:	370c      	adds	r7, #12
    6a08:	46bd      	mov	sp, r7
    6a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a0e:	4770      	bx	lr

00006a10 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    6a10:	b480      	push	{r7}
    6a12:	b083      	sub	sp, #12
    6a14:	af00      	add	r7, sp, #0
    6a16:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    6a18:	687b      	ldr	r3, [r7, #4]
    6a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    6a1c:	4618      	mov	r0, r3
    6a1e:	370c      	adds	r7, #12
    6a20:	46bd      	mov	sp, r7
    6a22:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a26:	4770      	bx	lr

00006a28 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    6a28:	b480      	push	{r7}
    6a2a:	b085      	sub	sp, #20
    6a2c:	af00      	add	r7, sp, #0
    6a2e:	60f8      	str	r0, [r7, #12]
    6a30:	60b9      	str	r1, [r7, #8]
    6a32:	607a      	str	r2, [r7, #4]
	while (count--) {
    6a34:	e007      	b.n	6a46 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    6a36:	68fb      	ldr	r3, [r7, #12]
    6a38:	1c5a      	adds	r2, r3, #1
    6a3a:	60fa      	str	r2, [r7, #12]
    6a3c:	68ba      	ldr	r2, [r7, #8]
    6a3e:	1c51      	adds	r1, r2, #1
    6a40:	60b9      	str	r1, [r7, #8]
    6a42:	7812      	ldrb	r2, [r2, #0]
    6a44:	701a      	strb	r2, [r3, #0]
	while (count--) {
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	1e5a      	subs	r2, r3, #1
    6a4a:	607a      	str	r2, [r7, #4]
    6a4c:	2b00      	cmp	r3, #0
    6a4e:	d1f2      	bne.n	6a36 <_qspi_memcpy+0xe>
	}
}
    6a50:	bf00      	nop
    6a52:	3714      	adds	r7, #20
    6a54:	46bd      	mov	sp, r7
    6a56:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a5a:	4770      	bx	lr

00006a5c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    6a5c:	b580      	push	{r7, lr}
    6a5e:	b082      	sub	sp, #8
    6a60:	af00      	add	r7, sp, #0
    6a62:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    6a64:	4903      	ldr	r1, [pc, #12]	; (6a74 <_qspi_end_transfer+0x18>)
    6a66:	6878      	ldr	r0, [r7, #4]
    6a68:	4b03      	ldr	r3, [pc, #12]	; (6a78 <_qspi_end_transfer+0x1c>)
    6a6a:	4798      	blx	r3
}
    6a6c:	bf00      	nop
    6a6e:	3708      	adds	r7, #8
    6a70:	46bd      	mov	sp, r7
    6a72:	bd80      	pop	{r7, pc}
    6a74:	01000002 	.word	0x01000002
    6a78:	00006919 	.word	0x00006919

00006a7c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    6a7c:	b580      	push	{r7, lr}
    6a7e:	b082      	sub	sp, #8
    6a80:	af00      	add	r7, sp, #0
    6a82:	6078      	str	r0, [r7, #4]
    6a84:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    6a86:	687b      	ldr	r3, [r7, #4]
    6a88:	2b00      	cmp	r3, #0
    6a8a:	d004      	beq.n	6a96 <_qspi_sync_init+0x1a>
    6a8c:	683b      	ldr	r3, [r7, #0]
    6a8e:	2b00      	cmp	r3, #0
    6a90:	d001      	beq.n	6a96 <_qspi_sync_init+0x1a>
    6a92:	2301      	movs	r3, #1
    6a94:	e000      	b.n	6a98 <_qspi_sync_init+0x1c>
    6a96:	2300      	movs	r3, #0
    6a98:	f003 0301 	and.w	r3, r3, #1
    6a9c:	b2db      	uxtb	r3, r3
    6a9e:	2240      	movs	r2, #64	; 0x40
    6aa0:	490c      	ldr	r1, [pc, #48]	; (6ad4 <_qspi_sync_init+0x58>)
    6aa2:	4618      	mov	r0, r3
    6aa4:	4b0c      	ldr	r3, [pc, #48]	; (6ad8 <_qspi_sync_init+0x5c>)
    6aa6:	4798      	blx	r3
	dev->prvt = hw;
    6aa8:	687b      	ldr	r3, [r7, #4]
    6aaa:	683a      	ldr	r2, [r7, #0]
    6aac:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    6aae:	687b      	ldr	r3, [r7, #4]
    6ab0:	681b      	ldr	r3, [r3, #0]
    6ab2:	2101      	movs	r1, #1
    6ab4:	4618      	mov	r0, r3
    6ab6:	4b09      	ldr	r3, [pc, #36]	; (6adc <_qspi_sync_init+0x60>)
    6ab8:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    6aba:	4909      	ldr	r1, [pc, #36]	; (6ae0 <_qspi_sync_init+0x64>)
    6abc:	6838      	ldr	r0, [r7, #0]
    6abe:	4b09      	ldr	r3, [pc, #36]	; (6ae4 <_qspi_sync_init+0x68>)
    6ac0:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    6ac2:	4909      	ldr	r1, [pc, #36]	; (6ae8 <_qspi_sync_init+0x6c>)
    6ac4:	6838      	ldr	r0, [r7, #0]
    6ac6:	4b09      	ldr	r3, [pc, #36]	; (6aec <_qspi_sync_init+0x70>)
    6ac8:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    6aca:	2300      	movs	r3, #0
}
    6acc:	4618      	mov	r0, r3
    6ace:	3708      	adds	r7, #8
    6ad0:	46bd      	mov	sp, r7
    6ad2:	bd80      	pop	{r7, pc}
    6ad4:	00010e50 	.word	0x00010e50
    6ad8:	00004a95 	.word	0x00004a95
    6adc:	00006919 	.word	0x00006919
    6ae0:	06000011 	.word	0x06000011
    6ae4:	00006935 	.word	0x00006935
    6ae8:	00241300 	.word	0x00241300
    6aec:	00006951 	.word	0x00006951

00006af0 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    6af0:	b580      	push	{r7, lr}
    6af2:	b082      	sub	sp, #8
    6af4:	af00      	add	r7, sp, #0
    6af6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    6af8:	687b      	ldr	r3, [r7, #4]
    6afa:	681b      	ldr	r3, [r3, #0]
    6afc:	2102      	movs	r1, #2
    6afe:	4618      	mov	r0, r3
    6b00:	4b03      	ldr	r3, [pc, #12]	; (6b10 <_qspi_sync_enable+0x20>)
    6b02:	4798      	blx	r3
	return ERR_NONE;
    6b04:	2300      	movs	r3, #0
}
    6b06:	4618      	mov	r0, r3
    6b08:	3708      	adds	r7, #8
    6b0a:	46bd      	mov	sp, r7
    6b0c:	bd80      	pop	{r7, pc}
    6b0e:	bf00      	nop
    6b10:	00006919 	.word	0x00006919

00006b14 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    6b14:	b580      	push	{r7, lr}
    6b16:	b082      	sub	sp, #8
    6b18:	af00      	add	r7, sp, #0
    6b1a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    6b1c:	687b      	ldr	r3, [r7, #4]
    6b1e:	681b      	ldr	r3, [r3, #0]
    6b20:	2100      	movs	r1, #0
    6b22:	4618      	mov	r0, r3
    6b24:	4b03      	ldr	r3, [pc, #12]	; (6b34 <_qspi_sync_disable+0x20>)
    6b26:	4798      	blx	r3
	return ERR_NONE;
    6b28:	2300      	movs	r3, #0
}
    6b2a:	4618      	mov	r0, r3
    6b2c:	3708      	adds	r7, #8
    6b2e:	46bd      	mov	sp, r7
    6b30:	bd80      	pop	{r7, pc}
    6b32:	bf00      	nop
    6b34:	00006919 	.word	0x00006919

00006b38 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6b38:	b580      	push	{r7, lr}
    6b3a:	b084      	sub	sp, #16
    6b3c:	af00      	add	r7, sp, #0
    6b3e:	6078      	str	r0, [r7, #4]
    6b40:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	681b      	ldr	r3, [r3, #0]
    6b46:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    6b48:	683b      	ldr	r3, [r7, #0]
    6b4a:	781b      	ldrb	r3, [r3, #0]
    6b4c:	f003 0320 	and.w	r3, r3, #32
    6b50:	b2db      	uxtb	r3, r3
    6b52:	2b00      	cmp	r3, #0
    6b54:	d005      	beq.n	6b62 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    6b56:	683b      	ldr	r3, [r7, #0]
    6b58:	689b      	ldr	r3, [r3, #8]
    6b5a:	4619      	mov	r1, r3
    6b5c:	68f8      	ldr	r0, [r7, #12]
    6b5e:	4b13      	ldr	r3, [pc, #76]	; (6bac <_qspi_sync_command_set_ifr+0x74>)
    6b60:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    6b62:	683b      	ldr	r3, [r7, #0]
    6b64:	781b      	ldrb	r3, [r3, #0]
    6b66:	f003 0310 	and.w	r3, r3, #16
    6b6a:	b2db      	uxtb	r3, r3
    6b6c:	2b00      	cmp	r3, #0
    6b6e:	d005      	beq.n	6b7c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    6b70:	683b      	ldr	r3, [r7, #0]
    6b72:	791b      	ldrb	r3, [r3, #4]
    6b74:	4619      	mov	r1, r3
    6b76:	68f8      	ldr	r0, [r7, #12]
    6b78:	4b0d      	ldr	r3, [pc, #52]	; (6bb0 <_qspi_sync_command_set_ifr+0x78>)
    6b7a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    6b7c:	683b      	ldr	r3, [r7, #0]
    6b7e:	781b      	ldrb	r3, [r3, #0]
    6b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6b84:	b2db      	uxtb	r3, r3
    6b86:	2b00      	cmp	r3, #0
    6b88:	d005      	beq.n	6b96 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    6b8a:	683b      	ldr	r3, [r7, #0]
    6b8c:	795b      	ldrb	r3, [r3, #5]
    6b8e:	4619      	mov	r1, r3
    6b90:	68f8      	ldr	r0, [r7, #12]
    6b92:	4b08      	ldr	r3, [pc, #32]	; (6bb4 <_qspi_sync_command_set_ifr+0x7c>)
    6b94:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    6b96:	683b      	ldr	r3, [r7, #0]
    6b98:	681b      	ldr	r3, [r3, #0]
    6b9a:	4619      	mov	r1, r3
    6b9c:	68f8      	ldr	r0, [r7, #12]
    6b9e:	4b06      	ldr	r3, [pc, #24]	; (6bb8 <_qspi_sync_command_set_ifr+0x80>)
    6ba0:	4798      	blx	r3
}
    6ba2:	bf00      	nop
    6ba4:	3710      	adds	r7, #16
    6ba6:	46bd      	mov	sp, r7
    6ba8:	bd80      	pop	{r7, pc}
    6baa:	bf00      	nop
    6bac:	0000696d 	.word	0x0000696d
    6bb0:	00006989 	.word	0x00006989
    6bb4:	000069bd 	.word	0x000069bd
    6bb8:	000069f5 	.word	0x000069f5

00006bbc <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6bbc:	b580      	push	{r7, lr}
    6bbe:	b084      	sub	sp, #16
    6bc0:	af00      	add	r7, sp, #0
    6bc2:	6078      	str	r0, [r7, #4]
    6bc4:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    6bc6:	687b      	ldr	r3, [r7, #4]
    6bc8:	681b      	ldr	r3, [r3, #0]
    6bca:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    6bcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6bd0:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    6bd2:	683b      	ldr	r3, [r7, #0]
    6bd4:	781b      	ldrb	r3, [r3, #0]
    6bd6:	f003 0320 	and.w	r3, r3, #32
    6bda:	b2db      	uxtb	r3, r3
    6bdc:	2b00      	cmp	r3, #0
    6bde:	d004      	beq.n	6bea <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    6be0:	683b      	ldr	r3, [r7, #0]
    6be2:	689b      	ldr	r3, [r3, #8]
    6be4:	68fa      	ldr	r2, [r7, #12]
    6be6:	4413      	add	r3, r2
    6be8:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    6bea:	68b8      	ldr	r0, [r7, #8]
    6bec:	4b18      	ldr	r3, [pc, #96]	; (6c50 <_qspi_sync_run_transfer+0x94>)
    6bee:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    6bf0:	683b      	ldr	r3, [r7, #0]
    6bf2:	691b      	ldr	r3, [r3, #16]
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	d103      	bne.n	6c00 <_qspi_sync_run_transfer+0x44>
    6bf8:	683b      	ldr	r3, [r7, #0]
    6bfa:	695b      	ldr	r3, [r3, #20]
    6bfc:	2b00      	cmp	r3, #0
    6bfe:	d001      	beq.n	6c04 <_qspi_sync_run_transfer+0x48>
    6c00:	2301      	movs	r3, #1
    6c02:	e000      	b.n	6c06 <_qspi_sync_run_transfer+0x4a>
    6c04:	2300      	movs	r3, #0
    6c06:	f003 0301 	and.w	r3, r3, #1
    6c0a:	b2db      	uxtb	r3, r3
    6c0c:	2282      	movs	r2, #130	; 0x82
    6c0e:	4911      	ldr	r1, [pc, #68]	; (6c54 <_qspi_sync_run_transfer+0x98>)
    6c10:	4618      	mov	r0, r3
    6c12:	4b11      	ldr	r3, [pc, #68]	; (6c58 <_qspi_sync_run_transfer+0x9c>)
    6c14:	4798      	blx	r3

	if (cmd->tx_buf) {
    6c16:	683b      	ldr	r3, [r7, #0]
    6c18:	691b      	ldr	r3, [r3, #16]
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	d008      	beq.n	6c30 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    6c1e:	683b      	ldr	r3, [r7, #0]
    6c20:	6919      	ldr	r1, [r3, #16]
    6c22:	683b      	ldr	r3, [r7, #0]
    6c24:	68db      	ldr	r3, [r3, #12]
    6c26:	461a      	mov	r2, r3
    6c28:	68f8      	ldr	r0, [r7, #12]
    6c2a:	4b0c      	ldr	r3, [pc, #48]	; (6c5c <_qspi_sync_run_transfer+0xa0>)
    6c2c:	4798      	blx	r3
    6c2e:	e007      	b.n	6c40 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    6c30:	683b      	ldr	r3, [r7, #0]
    6c32:	6958      	ldr	r0, [r3, #20]
    6c34:	683b      	ldr	r3, [r7, #0]
    6c36:	68db      	ldr	r3, [r3, #12]
    6c38:	461a      	mov	r2, r3
    6c3a:	68f9      	ldr	r1, [r7, #12]
    6c3c:	4b07      	ldr	r3, [pc, #28]	; (6c5c <_qspi_sync_run_transfer+0xa0>)
    6c3e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    6c40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6c44:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    6c48:	bf00      	nop
    6c4a:	3710      	adds	r7, #16
    6c4c:	46bd      	mov	sp, r7
    6c4e:	bd80      	pop	{r7, pc}
    6c50:	00006a11 	.word	0x00006a11
    6c54:	00010e50 	.word	0x00010e50
    6c58:	00004a95 	.word	0x00004a95
    6c5c:	00006a29 	.word	0x00006a29

00006c60 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6c60:	b580      	push	{r7, lr}
    6c62:	b082      	sub	sp, #8
    6c64:	af00      	add	r7, sp, #0
    6c66:	6078      	str	r0, [r7, #4]
    6c68:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    6c6a:	6839      	ldr	r1, [r7, #0]
    6c6c:	6878      	ldr	r0, [r7, #4]
    6c6e:	4b14      	ldr	r3, [pc, #80]	; (6cc0 <_qspi_sync_serial_run_command+0x60>)
    6c70:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    6c72:	683b      	ldr	r3, [r7, #0]
    6c74:	781b      	ldrb	r3, [r3, #0]
    6c76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    6c7a:	b2db      	uxtb	r3, r3
    6c7c:	2b00      	cmp	r3, #0
    6c7e:	d003      	beq.n	6c88 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    6c80:	6839      	ldr	r1, [r7, #0]
    6c82:	6878      	ldr	r0, [r7, #4]
    6c84:	4b0f      	ldr	r3, [pc, #60]	; (6cc4 <_qspi_sync_serial_run_command+0x64>)
    6c86:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    6c88:	687b      	ldr	r3, [r7, #4]
    6c8a:	681b      	ldr	r3, [r3, #0]
    6c8c:	4618      	mov	r0, r3
    6c8e:	4b0e      	ldr	r3, [pc, #56]	; (6cc8 <_qspi_sync_serial_run_command+0x68>)
    6c90:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    6c92:	bf00      	nop
    6c94:	687b      	ldr	r3, [r7, #4]
    6c96:	681b      	ldr	r3, [r3, #0]
    6c98:	4618      	mov	r0, r3
    6c9a:	4b0c      	ldr	r3, [pc, #48]	; (6ccc <_qspi_sync_serial_run_command+0x6c>)
    6c9c:	4798      	blx	r3
    6c9e:	4603      	mov	r3, r0
    6ca0:	f083 0301 	eor.w	r3, r3, #1
    6ca4:	b2db      	uxtb	r3, r3
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	d1f4      	bne.n	6c94 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    6caa:	687b      	ldr	r3, [r7, #4]
    6cac:	681b      	ldr	r3, [r3, #0]
    6cae:	4618      	mov	r0, r3
    6cb0:	4b07      	ldr	r3, [pc, #28]	; (6cd0 <_qspi_sync_serial_run_command+0x70>)
    6cb2:	4798      	blx	r3
	return ERR_NONE;
    6cb4:	2300      	movs	r3, #0
}
    6cb6:	4618      	mov	r0, r3
    6cb8:	3708      	adds	r7, #8
    6cba:	46bd      	mov	sp, r7
    6cbc:	bd80      	pop	{r7, pc}
    6cbe:	bf00      	nop
    6cc0:	00006b39 	.word	0x00006b39
    6cc4:	00006bbd 	.word	0x00006bbd
    6cc8:	00006a5d 	.word	0x00006a5d
    6ccc:	000068d5 	.word	0x000068d5
    6cd0:	000068fd 	.word	0x000068fd

00006cd4 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    6cd4:	b480      	push	{r7}
    6cd6:	b083      	sub	sp, #12
    6cd8:	af00      	add	r7, sp, #0
    6cda:	6078      	str	r0, [r7, #4]
    6cdc:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6cde:	bf00      	nop
    6ce0:	687b      	ldr	r3, [r7, #4]
    6ce2:	691a      	ldr	r2, [r3, #16]
    6ce4:	683b      	ldr	r3, [r7, #0]
    6ce6:	4013      	ands	r3, r2
    6ce8:	2b00      	cmp	r3, #0
    6cea:	d1f9      	bne.n	6ce0 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    6cec:	bf00      	nop
    6cee:	370c      	adds	r7, #12
    6cf0:	46bd      	mov	sp, r7
    6cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cf6:	4770      	bx	lr

00006cf8 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    6cf8:	b480      	push	{r7}
    6cfa:	b083      	sub	sp, #12
    6cfc:	af00      	add	r7, sp, #0
    6cfe:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6d00:	687b      	ldr	r3, [r7, #4]
    6d02:	f44f 7280 	mov.w	r2, #256	; 0x100
    6d06:	819a      	strh	r2, [r3, #12]
}
    6d08:	bf00      	nop
    6d0a:	370c      	adds	r7, #12
    6d0c:	46bd      	mov	sp, r7
    6d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d12:	4770      	bx	lr

00006d14 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    6d14:	b480      	push	{r7}
    6d16:	b083      	sub	sp, #12
    6d18:	af00      	add	r7, sp, #0
    6d1a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    6d1c:	687b      	ldr	r3, [r7, #4]
    6d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6d22:	819a      	strh	r2, [r3, #12]
}
    6d24:	bf00      	nop
    6d26:	370c      	adds	r7, #12
    6d28:	46bd      	mov	sp, r7
    6d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d2e:	4770      	bx	lr

00006d30 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    6d30:	b480      	push	{r7}
    6d32:	b083      	sub	sp, #12
    6d34:	af00      	add	r7, sp, #0
    6d36:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6d38:	687b      	ldr	r3, [r7, #4]
    6d3a:	899b      	ldrh	r3, [r3, #12]
    6d3c:	b29b      	uxth	r3, r3
}
    6d3e:	4618      	mov	r0, r3
    6d40:	370c      	adds	r7, #12
    6d42:	46bd      	mov	sp, r7
    6d44:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d48:	4770      	bx	lr

00006d4a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    6d4a:	b480      	push	{r7}
    6d4c:	b083      	sub	sp, #12
    6d4e:	af00      	add	r7, sp, #0
    6d50:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    6d52:	687b      	ldr	r3, [r7, #4]
    6d54:	895b      	ldrh	r3, [r3, #10]
    6d56:	b29b      	uxth	r3, r3
}
    6d58:	4618      	mov	r0, r3
    6d5a:	370c      	adds	r7, #12
    6d5c:	46bd      	mov	sp, r7
    6d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d62:	4770      	bx	lr

00006d64 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    6d64:	b580      	push	{r7, lr}
    6d66:	b082      	sub	sp, #8
    6d68:	af00      	add	r7, sp, #0
    6d6a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    6d6c:	687b      	ldr	r3, [r7, #4]
    6d6e:	881b      	ldrh	r3, [r3, #0]
    6d70:	b29b      	uxth	r3, r3
    6d72:	f043 0301 	orr.w	r3, r3, #1
    6d76:	b29a      	uxth	r2, r3
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    6d7c:	2101      	movs	r1, #1
    6d7e:	6878      	ldr	r0, [r7, #4]
    6d80:	4b02      	ldr	r3, [pc, #8]	; (6d8c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    6d82:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6d84:	bf00      	nop
    6d86:	3708      	adds	r7, #8
    6d88:	46bd      	mov	sp, r7
    6d8a:	bd80      	pop	{r7, pc}
    6d8c:	00006cd5 	.word	0x00006cd5

00006d90 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6d90:	b580      	push	{r7, lr}
    6d92:	b084      	sub	sp, #16
    6d94:	af00      	add	r7, sp, #0
    6d96:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6d98:	f248 0103 	movw	r1, #32771	; 0x8003
    6d9c:	6878      	ldr	r0, [r7, #4]
    6d9e:	4b0a      	ldr	r3, [pc, #40]	; (6dc8 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    6da0:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6da2:	687b      	ldr	r3, [r7, #4]
    6da4:	881b      	ldrh	r3, [r3, #0]
    6da6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    6da8:	89fb      	ldrh	r3, [r7, #14]
    6daa:	085b      	lsrs	r3, r3, #1
    6dac:	b29b      	uxth	r3, r3
    6dae:	f003 0301 	and.w	r3, r3, #1
    6db2:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    6db4:	89fb      	ldrh	r3, [r7, #14]
    6db6:	2b00      	cmp	r3, #0
    6db8:	bf14      	ite	ne
    6dba:	2301      	movne	r3, #1
    6dbc:	2300      	moveq	r3, #0
    6dbe:	b2db      	uxtb	r3, r3
}
    6dc0:	4618      	mov	r0, r3
    6dc2:	3710      	adds	r7, #16
    6dc4:	46bd      	mov	sp, r7
    6dc6:	bd80      	pop	{r7, pc}
    6dc8:	00006cd5 	.word	0x00006cd5

00006dcc <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6dcc:	b580      	push	{r7, lr}
    6dce:	b082      	sub	sp, #8
    6dd0:	af00      	add	r7, sp, #0
    6dd2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6dd4:	687b      	ldr	r3, [r7, #4]
    6dd6:	881b      	ldrh	r3, [r3, #0]
    6dd8:	b29b      	uxth	r3, r3
    6dda:	f023 0302 	bic.w	r3, r3, #2
    6dde:	b29a      	uxth	r2, r3
    6de0:	687b      	ldr	r3, [r7, #4]
    6de2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6de4:	f248 0103 	movw	r1, #32771	; 0x8003
    6de8:	6878      	ldr	r0, [r7, #4]
    6dea:	4b03      	ldr	r3, [pc, #12]	; (6df8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    6dec:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6dee:	bf00      	nop
    6df0:	3708      	adds	r7, #8
    6df2:	46bd      	mov	sp, r7
    6df4:	bd80      	pop	{r7, pc}
    6df6:	bf00      	nop
    6df8:	00006cd5 	.word	0x00006cd5

00006dfc <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    6dfc:	b580      	push	{r7, lr}
    6dfe:	b082      	sub	sp, #8
    6e00:	af00      	add	r7, sp, #0
    6e02:	6078      	str	r0, [r7, #4]
    6e04:	460b      	mov	r3, r1
    6e06:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6e08:	687b      	ldr	r3, [r7, #4]
    6e0a:	887a      	ldrh	r2, [r7, #2]
    6e0c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6e0e:	f248 0103 	movw	r1, #32771	; 0x8003
    6e12:	6878      	ldr	r0, [r7, #4]
    6e14:	4b02      	ldr	r3, [pc, #8]	; (6e20 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    6e16:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6e18:	bf00      	nop
    6e1a:	3708      	adds	r7, #8
    6e1c:	46bd      	mov	sp, r7
    6e1e:	bd80      	pop	{r7, pc}
    6e20:	00006cd5 	.word	0x00006cd5

00006e24 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    6e24:	b480      	push	{r7}
    6e26:	b083      	sub	sp, #12
    6e28:	af00      	add	r7, sp, #0
    6e2a:	6078      	str	r0, [r7, #4]
    6e2c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    6e2e:	687b      	ldr	r3, [r7, #4]
    6e30:	683a      	ldr	r2, [r7, #0]
    6e32:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    6e34:	bf00      	nop
    6e36:	370c      	adds	r7, #12
    6e38:	46bd      	mov	sp, r7
    6e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e3e:	4770      	bx	lr

00006e40 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    6e40:	b580      	push	{r7, lr}
    6e42:	b082      	sub	sp, #8
    6e44:	af00      	add	r7, sp, #0
    6e46:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    6e48:	687b      	ldr	r3, [r7, #4]
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	d005      	beq.n	6e5a <_calendar_init+0x1a>
    6e4e:	687b      	ldr	r3, [r7, #4]
    6e50:	681b      	ldr	r3, [r3, #0]
    6e52:	2b00      	cmp	r3, #0
    6e54:	d001      	beq.n	6e5a <_calendar_init+0x1a>
    6e56:	2301      	movs	r3, #1
    6e58:	e000      	b.n	6e5c <_calendar_init+0x1c>
    6e5a:	2300      	movs	r3, #0
    6e5c:	f003 0301 	and.w	r3, r3, #1
    6e60:	b2db      	uxtb	r3, r3
    6e62:	222f      	movs	r2, #47	; 0x2f
    6e64:	491b      	ldr	r1, [pc, #108]	; (6ed4 <_calendar_init+0x94>)
    6e66:	4618      	mov	r0, r3
    6e68:	4b1b      	ldr	r3, [pc, #108]	; (6ed8 <_calendar_init+0x98>)
    6e6a:	4798      	blx	r3

	_rtc_dev = dev;
    6e6c:	4a1b      	ldr	r2, [pc, #108]	; (6edc <_calendar_init+0x9c>)
    6e6e:	687b      	ldr	r3, [r7, #4]
    6e70:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    6e72:	687b      	ldr	r3, [r7, #4]
    6e74:	681b      	ldr	r3, [r3, #0]
    6e76:	4618      	mov	r0, r3
    6e78:	4b19      	ldr	r3, [pc, #100]	; (6ee0 <_calendar_init+0xa0>)
    6e7a:	4798      	blx	r3
    6e7c:	4603      	mov	r3, r0
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d00a      	beq.n	6e98 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    6e82:	687b      	ldr	r3, [r7, #4]
    6e84:	681b      	ldr	r3, [r3, #0]
    6e86:	4618      	mov	r0, r3
    6e88:	4b16      	ldr	r3, [pc, #88]	; (6ee4 <_calendar_init+0xa4>)
    6e8a:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    6e8c:	687b      	ldr	r3, [r7, #4]
    6e8e:	681b      	ldr	r3, [r3, #0]
    6e90:	2102      	movs	r1, #2
    6e92:	4618      	mov	r0, r3
    6e94:	4b14      	ldr	r3, [pc, #80]	; (6ee8 <_calendar_init+0xa8>)
    6e96:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    6e98:	687b      	ldr	r3, [r7, #4]
    6e9a:	681b      	ldr	r3, [r3, #0]
    6e9c:	4618      	mov	r0, r3
    6e9e:	4b13      	ldr	r3, [pc, #76]	; (6eec <_calendar_init+0xac>)
    6ea0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6ea2:	687b      	ldr	r3, [r7, #4]
    6ea4:	681b      	ldr	r3, [r3, #0]
    6ea6:	2101      	movs	r1, #1
    6ea8:	4618      	mov	r0, r3
    6eaa:	4b0f      	ldr	r3, [pc, #60]	; (6ee8 <_calendar_init+0xa8>)
    6eac:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    6eae:	687b      	ldr	r3, [r7, #4]
    6eb0:	681b      	ldr	r3, [r3, #0]
    6eb2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    6eb6:	4618      	mov	r0, r3
    6eb8:	4b0d      	ldr	r3, [pc, #52]	; (6ef0 <_calendar_init+0xb0>)
    6eba:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    6ebc:	687b      	ldr	r3, [r7, #4]
    6ebe:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6ec0:	2100      	movs	r1, #0
    6ec2:	4618      	mov	r0, r3
    6ec4:	4b0b      	ldr	r3, [pc, #44]	; (6ef4 <_calendar_init+0xb4>)
    6ec6:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6ec8:	2300      	movs	r3, #0
}
    6eca:	4618      	mov	r0, r3
    6ecc:	3708      	adds	r7, #8
    6ece:	46bd      	mov	sp, r7
    6ed0:	bd80      	pop	{r7, pc}
    6ed2:	bf00      	nop
    6ed4:	00010e68 	.word	0x00010e68
    6ed8:	00004a95 	.word	0x00004a95
    6edc:	200009d4 	.word	0x200009d4
    6ee0:	00006d91 	.word	0x00006d91
    6ee4:	00006dcd 	.word	0x00006dcd
    6ee8:	00006cd5 	.word	0x00006cd5
    6eec:	00006d65 	.word	0x00006d65
    6ef0:	00006dfd 	.word	0x00006dfd
    6ef4:	00006e25 	.word	0x00006e25

00006ef8 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    6ef8:	b580      	push	{r7, lr}
    6efa:	b084      	sub	sp, #16
    6efc:	af00      	add	r7, sp, #0
    6efe:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6f00:	687b      	ldr	r3, [r7, #4]
    6f02:	681b      	ldr	r3, [r3, #0]
    6f04:	4618      	mov	r0, r3
    6f06:	4b19      	ldr	r3, [pc, #100]	; (6f6c <_rtc_interrupt_handler+0x74>)
    6f08:	4798      	blx	r3
    6f0a:	4603      	mov	r3, r0
    6f0c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    6f0e:	687b      	ldr	r3, [r7, #4]
    6f10:	681b      	ldr	r3, [r3, #0]
    6f12:	4618      	mov	r0, r3
    6f14:	4b16      	ldr	r3, [pc, #88]	; (6f70 <_rtc_interrupt_handler+0x78>)
    6f16:	4798      	blx	r3
    6f18:	4603      	mov	r3, r0
    6f1a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    6f1c:	89fa      	ldrh	r2, [r7, #14]
    6f1e:	89bb      	ldrh	r3, [r7, #12]
    6f20:	4013      	ands	r3, r2
    6f22:	b29b      	uxth	r3, r3
    6f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6f28:	2b00      	cmp	r3, #0
    6f2a:	d009      	beq.n	6f40 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    6f2c:	687b      	ldr	r3, [r7, #4]
    6f2e:	685b      	ldr	r3, [r3, #4]
    6f30:	6878      	ldr	r0, [r7, #4]
    6f32:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6f34:	687b      	ldr	r3, [r7, #4]
    6f36:	681b      	ldr	r3, [r3, #0]
    6f38:	4618      	mov	r0, r3
    6f3a:	4b0e      	ldr	r3, [pc, #56]	; (6f74 <_rtc_interrupt_handler+0x7c>)
    6f3c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    6f3e:	e010      	b.n	6f62 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    6f40:	89fa      	ldrh	r2, [r7, #14]
    6f42:	89bb      	ldrh	r3, [r7, #12]
    6f44:	4013      	ands	r3, r2
    6f46:	b29b      	uxth	r3, r3
    6f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d008      	beq.n	6f62 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    6f50:	687b      	ldr	r3, [r7, #4]
    6f52:	689b      	ldr	r3, [r3, #8]
    6f54:	6878      	ldr	r0, [r7, #4]
    6f56:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    6f58:	687b      	ldr	r3, [r7, #4]
    6f5a:	681b      	ldr	r3, [r3, #0]
    6f5c:	4618      	mov	r0, r3
    6f5e:	4b06      	ldr	r3, [pc, #24]	; (6f78 <_rtc_interrupt_handler+0x80>)
    6f60:	4798      	blx	r3
}
    6f62:	bf00      	nop
    6f64:	3710      	adds	r7, #16
    6f66:	46bd      	mov	sp, r7
    6f68:	bd80      	pop	{r7, pc}
    6f6a:	bf00      	nop
    6f6c:	00006d31 	.word	0x00006d31
    6f70:	00006d4b 	.word	0x00006d4b
    6f74:	00006cf9 	.word	0x00006cf9
    6f78:	00006d15 	.word	0x00006d15

00006f7c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6f7c:	b580      	push	{r7, lr}
    6f7e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    6f80:	4b03      	ldr	r3, [pc, #12]	; (6f90 <RTC_Handler+0x14>)
    6f82:	681b      	ldr	r3, [r3, #0]
    6f84:	4618      	mov	r0, r3
    6f86:	4b03      	ldr	r3, [pc, #12]	; (6f94 <RTC_Handler+0x18>)
    6f88:	4798      	blx	r3
}
    6f8a:	bf00      	nop
    6f8c:	bd80      	pop	{r7, pc}
    6f8e:	bf00      	nop
    6f90:	200009d4 	.word	0x200009d4
    6f94:	00006ef9 	.word	0x00006ef9

00006f98 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6f98:	b480      	push	{r7}
    6f9a:	b083      	sub	sp, #12
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	6078      	str	r0, [r7, #4]
    6fa0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6fa2:	bf00      	nop
    6fa4:	687b      	ldr	r3, [r7, #4]
    6fa6:	69da      	ldr	r2, [r3, #28]
    6fa8:	683b      	ldr	r3, [r7, #0]
    6faa:	4013      	ands	r3, r2
    6fac:	2b00      	cmp	r3, #0
    6fae:	d1f9      	bne.n	6fa4 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6fb0:	bf00      	nop
    6fb2:	370c      	adds	r7, #12
    6fb4:	46bd      	mov	sp, r7
    6fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fba:	4770      	bx	lr

00006fbc <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6fbc:	b480      	push	{r7}
    6fbe:	b083      	sub	sp, #12
    6fc0:	af00      	add	r7, sp, #0
    6fc2:	6078      	str	r0, [r7, #4]
    6fc4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    6fc6:	687b      	ldr	r3, [r7, #4]
    6fc8:	69da      	ldr	r2, [r3, #28]
    6fca:	683b      	ldr	r3, [r7, #0]
    6fcc:	4013      	ands	r3, r2
    6fce:	2b00      	cmp	r3, #0
    6fd0:	bf14      	ite	ne
    6fd2:	2301      	movne	r3, #1
    6fd4:	2300      	moveq	r3, #0
    6fd6:	b2db      	uxtb	r3, r3
}
    6fd8:	4618      	mov	r0, r3
    6fda:	370c      	adds	r7, #12
    6fdc:	46bd      	mov	sp, r7
    6fde:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fe2:	4770      	bx	lr

00006fe4 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6fe4:	b480      	push	{r7}
    6fe6:	b083      	sub	sp, #12
    6fe8:	af00      	add	r7, sp, #0
    6fea:	6078      	str	r0, [r7, #4]
    6fec:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6fee:	bf00      	nop
    6ff0:	687b      	ldr	r3, [r7, #4]
    6ff2:	69da      	ldr	r2, [r3, #28]
    6ff4:	683b      	ldr	r3, [r7, #0]
    6ff6:	4013      	ands	r3, r2
    6ff8:	2b00      	cmp	r3, #0
    6ffa:	d1f9      	bne.n	6ff0 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    6ffc:	bf00      	nop
    6ffe:	370c      	adds	r7, #12
    7000:	46bd      	mov	sp, r7
    7002:	f85d 7b04 	ldr.w	r7, [sp], #4
    7006:	4770      	bx	lr

00007008 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    7008:	b480      	push	{r7}
    700a:	b083      	sub	sp, #12
    700c:	af00      	add	r7, sp, #0
    700e:	6078      	str	r0, [r7, #4]
    7010:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7012:	687b      	ldr	r3, [r7, #4]
    7014:	69da      	ldr	r2, [r3, #28]
    7016:	683b      	ldr	r3, [r7, #0]
    7018:	4013      	ands	r3, r2
    701a:	2b00      	cmp	r3, #0
    701c:	bf14      	ite	ne
    701e:	2301      	movne	r3, #1
    7020:	2300      	moveq	r3, #0
    7022:	b2db      	uxtb	r3, r3
}
    7024:	4618      	mov	r0, r3
    7026:	370c      	adds	r7, #12
    7028:	46bd      	mov	sp, r7
    702a:	f85d 7b04 	ldr.w	r7, [sp], #4
    702e:	4770      	bx	lr

00007030 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    7030:	b480      	push	{r7}
    7032:	b083      	sub	sp, #12
    7034:	af00      	add	r7, sp, #0
    7036:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    7038:	687b      	ldr	r3, [r7, #4]
    703a:	2201      	movs	r2, #1
    703c:	761a      	strb	r2, [r3, #24]
}
    703e:	bf00      	nop
    7040:	370c      	adds	r7, #12
    7042:	46bd      	mov	sp, r7
    7044:	f85d 7b04 	ldr.w	r7, [sp], #4
    7048:	4770      	bx	lr

0000704a <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    704a:	b480      	push	{r7}
    704c:	b083      	sub	sp, #12
    704e:	af00      	add	r7, sp, #0
    7050:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7052:	687b      	ldr	r3, [r7, #4]
    7054:	2202      	movs	r2, #2
    7056:	761a      	strb	r2, [r3, #24]
}
    7058:	bf00      	nop
    705a:	370c      	adds	r7, #12
    705c:	46bd      	mov	sp, r7
    705e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7062:	4770      	bx	lr

00007064 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    7064:	b480      	push	{r7}
    7066:	b083      	sub	sp, #12
    7068:	af00      	add	r7, sp, #0
    706a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    706c:	687b      	ldr	r3, [r7, #4]
    706e:	7e1b      	ldrb	r3, [r3, #24]
    7070:	b2db      	uxtb	r3, r3
}
    7072:	4618      	mov	r0, r3
    7074:	370c      	adds	r7, #12
    7076:	46bd      	mov	sp, r7
    7078:	f85d 7b04 	ldr.w	r7, [sp], #4
    707c:	4770      	bx	lr

0000707e <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    707e:	b480      	push	{r7}
    7080:	b085      	sub	sp, #20
    7082:	af00      	add	r7, sp, #0
    7084:	6078      	str	r0, [r7, #4]
    7086:	460b      	mov	r3, r1
    7088:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    708a:	687b      	ldr	r3, [r7, #4]
    708c:	7e1b      	ldrb	r3, [r3, #24]
    708e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7090:	7bfa      	ldrb	r2, [r7, #15]
    7092:	78fb      	ldrb	r3, [r7, #3]
    7094:	4013      	ands	r3, r2
    7096:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7098:	7bfb      	ldrb	r3, [r7, #15]
}
    709a:	4618      	mov	r0, r3
    709c:	3714      	adds	r7, #20
    709e:	46bd      	mov	sp, r7
    70a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    70a4:	4770      	bx	lr

000070a6 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    70a6:	b480      	push	{r7}
    70a8:	b083      	sub	sp, #12
    70aa:	af00      	add	r7, sp, #0
    70ac:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    70ae:	687b      	ldr	r3, [r7, #4]
    70b0:	7e1b      	ldrb	r3, [r3, #24]
    70b2:	b2db      	uxtb	r3, r3
}
    70b4:	4618      	mov	r0, r3
    70b6:	370c      	adds	r7, #12
    70b8:	46bd      	mov	sp, r7
    70ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    70be:	4770      	bx	lr

000070c0 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    70c0:	b480      	push	{r7}
    70c2:	b083      	sub	sp, #12
    70c4:	af00      	add	r7, sp, #0
    70c6:	6078      	str	r0, [r7, #4]
    70c8:	460b      	mov	r3, r1
    70ca:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    70cc:	687b      	ldr	r3, [r7, #4]
    70ce:	78fa      	ldrb	r2, [r7, #3]
    70d0:	761a      	strb	r2, [r3, #24]
}
    70d2:	bf00      	nop
    70d4:	370c      	adds	r7, #12
    70d6:	46bd      	mov	sp, r7
    70d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    70dc:	4770      	bx	lr
	...

000070e0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    70e0:	b580      	push	{r7, lr}
    70e2:	b082      	sub	sp, #8
    70e4:	af00      	add	r7, sp, #0
    70e6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    70e8:	687b      	ldr	r3, [r7, #4]
    70ea:	681b      	ldr	r3, [r3, #0]
    70ec:	f043 0202 	orr.w	r2, r3, #2
    70f0:	687b      	ldr	r3, [r7, #4]
    70f2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    70f4:	2103      	movs	r1, #3
    70f6:	6878      	ldr	r0, [r7, #4]
    70f8:	4b02      	ldr	r3, [pc, #8]	; (7104 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    70fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    70fc:	bf00      	nop
    70fe:	3708      	adds	r7, #8
    7100:	46bd      	mov	sp, r7
    7102:	bd80      	pop	{r7, pc}
    7104:	00006f99 	.word	0x00006f99

00007108 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7108:	b580      	push	{r7, lr}
    710a:	b082      	sub	sp, #8
    710c:	af00      	add	r7, sp, #0
    710e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    7110:	687b      	ldr	r3, [r7, #4]
    7112:	681b      	ldr	r3, [r3, #0]
    7114:	f023 0202 	bic.w	r2, r3, #2
    7118:	687b      	ldr	r3, [r7, #4]
    711a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    711c:	2103      	movs	r1, #3
    711e:	6878      	ldr	r0, [r7, #4]
    7120:	4b02      	ldr	r3, [pc, #8]	; (712c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    7122:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7124:	bf00      	nop
    7126:	3708      	adds	r7, #8
    7128:	46bd      	mov	sp, r7
    712a:	bd80      	pop	{r7, pc}
    712c:	00006f99 	.word	0x00006f99

00007130 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    7130:	b480      	push	{r7}
    7132:	b085      	sub	sp, #20
    7134:	af00      	add	r7, sp, #0
    7136:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7138:	687b      	ldr	r3, [r7, #4]
    713a:	681b      	ldr	r3, [r3, #0]
    713c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    713e:	68fb      	ldr	r3, [r7, #12]
    7140:	0edb      	lsrs	r3, r3, #27
    7142:	f003 0301 	and.w	r3, r3, #1
    7146:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7148:	68fb      	ldr	r3, [r7, #12]
    714a:	2b00      	cmp	r3, #0
    714c:	bf14      	ite	ne
    714e:	2301      	movne	r3, #1
    7150:	2300      	moveq	r3, #0
    7152:	b2db      	uxtb	r3, r3
}
    7154:	4618      	mov	r0, r3
    7156:	3714      	adds	r7, #20
    7158:	46bd      	mov	sp, r7
    715a:	f85d 7b04 	ldr.w	r7, [sp], #4
    715e:	4770      	bx	lr

00007160 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    7160:	b580      	push	{r7, lr}
    7162:	b084      	sub	sp, #16
    7164:	af00      	add	r7, sp, #0
    7166:	6078      	str	r0, [r7, #4]
    7168:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    716a:	2103      	movs	r1, #3
    716c:	6878      	ldr	r0, [r7, #4]
    716e:	4b07      	ldr	r3, [pc, #28]	; (718c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    7170:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7172:	687b      	ldr	r3, [r7, #4]
    7174:	681b      	ldr	r3, [r3, #0]
    7176:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7178:	68fa      	ldr	r2, [r7, #12]
    717a:	683b      	ldr	r3, [r7, #0]
    717c:	4013      	ands	r3, r2
    717e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7180:	68fb      	ldr	r3, [r7, #12]
}
    7182:	4618      	mov	r0, r3
    7184:	3710      	adds	r7, #16
    7186:	46bd      	mov	sp, r7
    7188:	bd80      	pop	{r7, pc}
    718a:	bf00      	nop
    718c:	00006f99 	.word	0x00006f99

00007190 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    7190:	b580      	push	{r7, lr}
    7192:	b082      	sub	sp, #8
    7194:	af00      	add	r7, sp, #0
    7196:	6078      	str	r0, [r7, #4]
    7198:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    719a:	687b      	ldr	r3, [r7, #4]
    719c:	683a      	ldr	r2, [r7, #0]
    719e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    71a0:	2103      	movs	r1, #3
    71a2:	6878      	ldr	r0, [r7, #4]
    71a4:	4b02      	ldr	r3, [pc, #8]	; (71b0 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    71a6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    71a8:	bf00      	nop
    71aa:	3708      	adds	r7, #8
    71ac:	46bd      	mov	sp, r7
    71ae:	bd80      	pop	{r7, pc}
    71b0:	00006f99 	.word	0x00006f99

000071b4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    71b4:	b580      	push	{r7, lr}
    71b6:	b084      	sub	sp, #16
    71b8:	af00      	add	r7, sp, #0
    71ba:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    71bc:	2103      	movs	r1, #3
    71be:	6878      	ldr	r0, [r7, #4]
    71c0:	4b09      	ldr	r3, [pc, #36]	; (71e8 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    71c2:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    71c4:	687b      	ldr	r3, [r7, #4]
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    71ca:	68fb      	ldr	r3, [r7, #12]
    71cc:	085b      	lsrs	r3, r3, #1
    71ce:	f003 0301 	and.w	r3, r3, #1
    71d2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    71d4:	68fb      	ldr	r3, [r7, #12]
    71d6:	2b00      	cmp	r3, #0
    71d8:	bf14      	ite	ne
    71da:	2301      	movne	r3, #1
    71dc:	2300      	moveq	r3, #0
    71de:	b2db      	uxtb	r3, r3
}
    71e0:	4618      	mov	r0, r3
    71e2:	3710      	adds	r7, #16
    71e4:	46bd      	mov	sp, r7
    71e6:	bd80      	pop	{r7, pc}
    71e8:	00006fe5 	.word	0x00006fe5

000071ec <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    71ec:	b580      	push	{r7, lr}
    71ee:	b082      	sub	sp, #8
    71f0:	af00      	add	r7, sp, #0
    71f2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    71f4:	687b      	ldr	r3, [r7, #4]
    71f6:	681b      	ldr	r3, [r3, #0]
    71f8:	f023 0202 	bic.w	r2, r3, #2
    71fc:	687b      	ldr	r3, [r7, #4]
    71fe:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7200:	2103      	movs	r1, #3
    7202:	6878      	ldr	r0, [r7, #4]
    7204:	4b02      	ldr	r3, [pc, #8]	; (7210 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    7206:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7208:	bf00      	nop
    720a:	3708      	adds	r7, #8
    720c:	46bd      	mov	sp, r7
    720e:	bd80      	pop	{r7, pc}
    7210:	00006fe5 	.word	0x00006fe5

00007214 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    7214:	b580      	push	{r7, lr}
    7216:	b084      	sub	sp, #16
    7218:	af00      	add	r7, sp, #0
    721a:	6078      	str	r0, [r7, #4]
    721c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    721e:	2103      	movs	r1, #3
    7220:	6878      	ldr	r0, [r7, #4]
    7222:	4b07      	ldr	r3, [pc, #28]	; (7240 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    7224:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7226:	687b      	ldr	r3, [r7, #4]
    7228:	681b      	ldr	r3, [r3, #0]
    722a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    722c:	68fa      	ldr	r2, [r7, #12]
    722e:	683b      	ldr	r3, [r7, #0]
    7230:	4013      	ands	r3, r2
    7232:	60fb      	str	r3, [r7, #12]
	return tmp;
    7234:	68fb      	ldr	r3, [r7, #12]
}
    7236:	4618      	mov	r0, r3
    7238:	3710      	adds	r7, #16
    723a:	46bd      	mov	sp, r7
    723c:	bd80      	pop	{r7, pc}
    723e:	bf00      	nop
    7240:	00006fe5 	.word	0x00006fe5

00007244 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    7244:	b580      	push	{r7, lr}
    7246:	b082      	sub	sp, #8
    7248:	af00      	add	r7, sp, #0
    724a:	6078      	str	r0, [r7, #4]
    724c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    724e:	687b      	ldr	r3, [r7, #4]
    7250:	683a      	ldr	r2, [r7, #0]
    7252:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7254:	2103      	movs	r1, #3
    7256:	6878      	ldr	r0, [r7, #4]
    7258:	4b02      	ldr	r3, [pc, #8]	; (7264 <hri_sercomspi_write_CTRLA_reg+0x20>)
    725a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    725c:	bf00      	nop
    725e:	3708      	adds	r7, #8
    7260:	46bd      	mov	sp, r7
    7262:	bd80      	pop	{r7, pc}
    7264:	00006fe5 	.word	0x00006fe5

00007268 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    7268:	b580      	push	{r7, lr}
    726a:	b082      	sub	sp, #8
    726c:	af00      	add	r7, sp, #0
    726e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7270:	687b      	ldr	r3, [r7, #4]
    7272:	685b      	ldr	r3, [r3, #4]
    7274:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    7278:	687b      	ldr	r3, [r7, #4]
    727a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    727c:	2104      	movs	r1, #4
    727e:	6878      	ldr	r0, [r7, #4]
    7280:	4b02      	ldr	r3, [pc, #8]	; (728c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    7282:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7284:	bf00      	nop
    7286:	3708      	adds	r7, #8
    7288:	46bd      	mov	sp, r7
    728a:	bd80      	pop	{r7, pc}
    728c:	00006f99 	.word	0x00006f99

00007290 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    7290:	b580      	push	{r7, lr}
    7292:	b082      	sub	sp, #8
    7294:	af00      	add	r7, sp, #0
    7296:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7298:	687b      	ldr	r3, [r7, #4]
    729a:	685b      	ldr	r3, [r3, #4]
    729c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    72a0:	687b      	ldr	r3, [r7, #4]
    72a2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    72a4:	2104      	movs	r1, #4
    72a6:	6878      	ldr	r0, [r7, #4]
    72a8:	4b02      	ldr	r3, [pc, #8]	; (72b4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    72aa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    72ac:	bf00      	nop
    72ae:	3708      	adds	r7, #8
    72b0:	46bd      	mov	sp, r7
    72b2:	bd80      	pop	{r7, pc}
    72b4:	00006f99 	.word	0x00006f99

000072b8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    72b8:	b580      	push	{r7, lr}
    72ba:	b082      	sub	sp, #8
    72bc:	af00      	add	r7, sp, #0
    72be:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    72c0:	687b      	ldr	r3, [r7, #4]
    72c2:	685b      	ldr	r3, [r3, #4]
    72c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    72c8:	687b      	ldr	r3, [r7, #4]
    72ca:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    72cc:	2104      	movs	r1, #4
    72ce:	6878      	ldr	r0, [r7, #4]
    72d0:	4b02      	ldr	r3, [pc, #8]	; (72dc <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    72d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    72d4:	bf00      	nop
    72d6:	3708      	adds	r7, #8
    72d8:	46bd      	mov	sp, r7
    72da:	bd80      	pop	{r7, pc}
    72dc:	00006f99 	.word	0x00006f99

000072e0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    72e0:	b580      	push	{r7, lr}
    72e2:	b082      	sub	sp, #8
    72e4:	af00      	add	r7, sp, #0
    72e6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    72e8:	687b      	ldr	r3, [r7, #4]
    72ea:	685b      	ldr	r3, [r3, #4]
    72ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    72f0:	687b      	ldr	r3, [r7, #4]
    72f2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    72f4:	2104      	movs	r1, #4
    72f6:	6878      	ldr	r0, [r7, #4]
    72f8:	4b02      	ldr	r3, [pc, #8]	; (7304 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    72fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    72fc:	bf00      	nop
    72fe:	3708      	adds	r7, #8
    7300:	46bd      	mov	sp, r7
    7302:	bd80      	pop	{r7, pc}
    7304:	00006f99 	.word	0x00006f99

00007308 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    7308:	b580      	push	{r7, lr}
    730a:	b082      	sub	sp, #8
    730c:	af00      	add	r7, sp, #0
    730e:	6078      	str	r0, [r7, #4]
    7310:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7312:	687b      	ldr	r3, [r7, #4]
    7314:	685a      	ldr	r2, [r3, #4]
    7316:	683b      	ldr	r3, [r7, #0]
    7318:	041b      	lsls	r3, r3, #16
    731a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    731e:	431a      	orrs	r2, r3
    7320:	687b      	ldr	r3, [r7, #4]
    7322:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7324:	2104      	movs	r1, #4
    7326:	6878      	ldr	r0, [r7, #4]
    7328:	4b02      	ldr	r3, [pc, #8]	; (7334 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    732a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    732c:	bf00      	nop
    732e:	3708      	adds	r7, #8
    7330:	46bd      	mov	sp, r7
    7332:	bd80      	pop	{r7, pc}
    7334:	00006f99 	.word	0x00006f99

00007338 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    7338:	b580      	push	{r7, lr}
    733a:	b082      	sub	sp, #8
    733c:	af00      	add	r7, sp, #0
    733e:	6078      	str	r0, [r7, #4]
    7340:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7342:	687b      	ldr	r3, [r7, #4]
    7344:	683a      	ldr	r2, [r7, #0]
    7346:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7348:	2104      	movs	r1, #4
    734a:	6878      	ldr	r0, [r7, #4]
    734c:	4b02      	ldr	r3, [pc, #8]	; (7358 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    734e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7350:	bf00      	nop
    7352:	3708      	adds	r7, #8
    7354:	46bd      	mov	sp, r7
    7356:	bd80      	pop	{r7, pc}
    7358:	00006f99 	.word	0x00006f99

0000735c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    735c:	b580      	push	{r7, lr}
    735e:	b082      	sub	sp, #8
    7360:	af00      	add	r7, sp, #0
    7362:	6078      	str	r0, [r7, #4]
    7364:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7366:	687b      	ldr	r3, [r7, #4]
    7368:	683a      	ldr	r2, [r7, #0]
    736a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    736c:	2117      	movs	r1, #23
    736e:	6878      	ldr	r0, [r7, #4]
    7370:	4b02      	ldr	r3, [pc, #8]	; (737c <hri_sercomspi_write_CTRLB_reg+0x20>)
    7372:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7374:	bf00      	nop
    7376:	3708      	adds	r7, #8
    7378:	46bd      	mov	sp, r7
    737a:	bd80      	pop	{r7, pc}
    737c:	00006fe5 	.word	0x00006fe5

00007380 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    7380:	b480      	push	{r7}
    7382:	b083      	sub	sp, #12
    7384:	af00      	add	r7, sp, #0
    7386:	6078      	str	r0, [r7, #4]
    7388:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    738a:	687b      	ldr	r3, [r7, #4]
    738c:	683a      	ldr	r2, [r7, #0]
    738e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7390:	bf00      	nop
    7392:	370c      	adds	r7, #12
    7394:	46bd      	mov	sp, r7
    7396:	f85d 7b04 	ldr.w	r7, [sp], #4
    739a:	4770      	bx	lr

0000739c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    739c:	b480      	push	{r7}
    739e:	b083      	sub	sp, #12
    73a0:	af00      	add	r7, sp, #0
    73a2:	6078      	str	r0, [r7, #4]
    73a4:	460b      	mov	r3, r1
    73a6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    73a8:	687b      	ldr	r3, [r7, #4]
    73aa:	78fa      	ldrb	r2, [r7, #3]
    73ac:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    73ae:	bf00      	nop
    73b0:	370c      	adds	r7, #12
    73b2:	46bd      	mov	sp, r7
    73b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    73b8:	4770      	bx	lr
	...

000073bc <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    73bc:	b580      	push	{r7, lr}
    73be:	b084      	sub	sp, #16
    73c0:	af00      	add	r7, sp, #0
    73c2:	6078      	str	r0, [r7, #4]
    73c4:	460b      	mov	r3, r1
    73c6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    73c8:	687b      	ldr	r3, [r7, #4]
    73ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    73cc:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    73ce:	68fb      	ldr	r3, [r7, #12]
    73d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    73d4:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    73d6:	78fb      	ldrb	r3, [r7, #3]
    73d8:	039b      	lsls	r3, r3, #14
    73da:	461a      	mov	r2, r3
    73dc:	68fb      	ldr	r3, [r7, #12]
    73de:	4313      	orrs	r3, r2
    73e0:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    73e2:	687b      	ldr	r3, [r7, #4]
    73e4:	68fa      	ldr	r2, [r7, #12]
    73e6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    73e8:	2104      	movs	r1, #4
    73ea:	6878      	ldr	r0, [r7, #4]
    73ec:	4b02      	ldr	r3, [pc, #8]	; (73f8 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    73ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    73f0:	bf00      	nop
    73f2:	3710      	adds	r7, #16
    73f4:	46bd      	mov	sp, r7
    73f6:	bd80      	pop	{r7, pc}
    73f8:	00006f99 	.word	0x00006f99

000073fc <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    73fc:	b580      	push	{r7, lr}
    73fe:	b082      	sub	sp, #8
    7400:	af00      	add	r7, sp, #0
    7402:	6078      	str	r0, [r7, #4]
    7404:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7406:	687b      	ldr	r3, [r7, #4]
    7408:	683a      	ldr	r2, [r7, #0]
    740a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    740c:	2104      	movs	r1, #4
    740e:	6878      	ldr	r0, [r7, #4]
    7410:	4b02      	ldr	r3, [pc, #8]	; (741c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    7412:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7414:	bf00      	nop
    7416:	3708      	adds	r7, #8
    7418:	46bd      	mov	sp, r7
    741a:	bd80      	pop	{r7, pc}
    741c:	00006f99 	.word	0x00006f99

00007420 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    7420:	b580      	push	{r7, lr}
    7422:	b082      	sub	sp, #8
    7424:	af00      	add	r7, sp, #0
    7426:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7428:	2104      	movs	r1, #4
    742a:	6878      	ldr	r0, [r7, #4]
    742c:	4b03      	ldr	r3, [pc, #12]	; (743c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    742e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7430:	687b      	ldr	r3, [r7, #4]
    7432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7434:	4618      	mov	r0, r3
    7436:	3708      	adds	r7, #8
    7438:	46bd      	mov	sp, r7
    743a:	bd80      	pop	{r7, pc}
    743c:	00006f99 	.word	0x00006f99

00007440 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    7440:	b480      	push	{r7}
    7442:	b083      	sub	sp, #12
    7444:	af00      	add	r7, sp, #0
    7446:	6078      	str	r0, [r7, #4]
    7448:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    744a:	687b      	ldr	r3, [r7, #4]
    744c:	683a      	ldr	r2, [r7, #0]
    744e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7450:	bf00      	nop
    7452:	370c      	adds	r7, #12
    7454:	46bd      	mov	sp, r7
    7456:	f85d 7b04 	ldr.w	r7, [sp], #4
    745a:	4770      	bx	lr

0000745c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    745c:	b580      	push	{r7, lr}
    745e:	b082      	sub	sp, #8
    7460:	af00      	add	r7, sp, #0
    7462:	6078      	str	r0, [r7, #4]
    7464:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    7466:	687b      	ldr	r3, [r7, #4]
    7468:	683a      	ldr	r2, [r7, #0]
    746a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    746c:	2104      	movs	r1, #4
    746e:	6878      	ldr	r0, [r7, #4]
    7470:	4b02      	ldr	r3, [pc, #8]	; (747c <hri_sercomi2cm_write_DATA_reg+0x20>)
    7472:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7474:	bf00      	nop
    7476:	3708      	adds	r7, #8
    7478:	46bd      	mov	sp, r7
    747a:	bd80      	pop	{r7, pc}
    747c:	00006f99 	.word	0x00006f99

00007480 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    7480:	b580      	push	{r7, lr}
    7482:	b082      	sub	sp, #8
    7484:	af00      	add	r7, sp, #0
    7486:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7488:	2104      	movs	r1, #4
    748a:	6878      	ldr	r0, [r7, #4]
    748c:	4b03      	ldr	r3, [pc, #12]	; (749c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    748e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    7490:	687b      	ldr	r3, [r7, #4]
    7492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    7494:	4618      	mov	r0, r3
    7496:	3708      	adds	r7, #8
    7498:	46bd      	mov	sp, r7
    749a:	bd80      	pop	{r7, pc}
    749c:	00006f99 	.word	0x00006f99

000074a0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    74a0:	b480      	push	{r7}
    74a2:	b083      	sub	sp, #12
    74a4:	af00      	add	r7, sp, #0
    74a6:	6078      	str	r0, [r7, #4]
    74a8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    74aa:	687b      	ldr	r3, [r7, #4]
    74ac:	683a      	ldr	r2, [r7, #0]
    74ae:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    74b0:	bf00      	nop
    74b2:	370c      	adds	r7, #12
    74b4:	46bd      	mov	sp, r7
    74b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ba:	4770      	bx	lr

000074bc <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    74bc:	b480      	push	{r7}
    74be:	b083      	sub	sp, #12
    74c0:	af00      	add	r7, sp, #0
    74c2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    74c4:	687b      	ldr	r3, [r7, #4]
    74c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    74c8:	4618      	mov	r0, r3
    74ca:	370c      	adds	r7, #12
    74cc:	46bd      	mov	sp, r7
    74ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    74d2:	4770      	bx	lr

000074d4 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    74d4:	b480      	push	{r7}
    74d6:	b083      	sub	sp, #12
    74d8:	af00      	add	r7, sp, #0
    74da:	6078      	str	r0, [r7, #4]
    74dc:	460b      	mov	r3, r1
    74de:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    74e0:	687b      	ldr	r3, [r7, #4]
    74e2:	78fa      	ldrb	r2, [r7, #3]
    74e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    74e8:	bf00      	nop
    74ea:	370c      	adds	r7, #12
    74ec:	46bd      	mov	sp, r7
    74ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    74f2:	4770      	bx	lr

000074f4 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    74f4:	b480      	push	{r7}
    74f6:	b083      	sub	sp, #12
    74f8:	af00      	add	r7, sp, #0
    74fa:	6078      	str	r0, [r7, #4]
    74fc:	460b      	mov	r3, r1
    74fe:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    7500:	687b      	ldr	r3, [r7, #4]
    7502:	887a      	ldrh	r2, [r7, #2]
    7504:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7506:	bf00      	nop
    7508:	370c      	adds	r7, #12
    750a:	46bd      	mov	sp, r7
    750c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7510:	4770      	bx	lr
	...

00007514 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    7514:	b580      	push	{r7, lr}
    7516:	b082      	sub	sp, #8
    7518:	af00      	add	r7, sp, #0
    751a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    751c:	2104      	movs	r1, #4
    751e:	6878      	ldr	r0, [r7, #4]
    7520:	4b06      	ldr	r3, [pc, #24]	; (753c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    7522:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    7524:	687b      	ldr	r3, [r7, #4]
    7526:	8b5b      	ldrh	r3, [r3, #26]
    7528:	b29b      	uxth	r3, r3
    752a:	091b      	lsrs	r3, r3, #4
    752c:	b29b      	uxth	r3, r3
    752e:	f003 0303 	and.w	r3, r3, #3
    7532:	b29b      	uxth	r3, r3
}
    7534:	4618      	mov	r0, r3
    7536:	3708      	adds	r7, #8
    7538:	46bd      	mov	sp, r7
    753a:	bd80      	pop	{r7, pc}
    753c:	00006f99 	.word	0x00006f99

00007540 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    7540:	b580      	push	{r7, lr}
    7542:	b082      	sub	sp, #8
    7544:	af00      	add	r7, sp, #0
    7546:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7548:	2104      	movs	r1, #4
    754a:	6878      	ldr	r0, [r7, #4]
    754c:	4b04      	ldr	r3, [pc, #16]	; (7560 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    754e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    7550:	687b      	ldr	r3, [r7, #4]
    7552:	8b5b      	ldrh	r3, [r3, #26]
    7554:	b29b      	uxth	r3, r3
}
    7556:	4618      	mov	r0, r3
    7558:	3708      	adds	r7, #8
    755a:	46bd      	mov	sp, r7
    755c:	bd80      	pop	{r7, pc}
    755e:	bf00      	nop
    7560:	00006f99 	.word	0x00006f99

00007564 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    7564:	b580      	push	{r7, lr}
    7566:	b082      	sub	sp, #8
    7568:	af00      	add	r7, sp, #0
    756a:	6078      	str	r0, [r7, #4]
    756c:	460b      	mov	r3, r1
    756e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    7570:	687b      	ldr	r3, [r7, #4]
    7572:	887a      	ldrh	r2, [r7, #2]
    7574:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7576:	2104      	movs	r1, #4
    7578:	6878      	ldr	r0, [r7, #4]
    757a:	4b03      	ldr	r3, [pc, #12]	; (7588 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    757c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    757e:	bf00      	nop
    7580:	3708      	adds	r7, #8
    7582:	46bd      	mov	sp, r7
    7584:	bd80      	pop	{r7, pc}
    7586:	bf00      	nop
    7588:	00006f99 	.word	0x00006f99

0000758c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    758c:	b4b0      	push	{r4, r5, r7}
    758e:	b08d      	sub	sp, #52	; 0x34
    7590:	af00      	add	r7, sp, #0
    7592:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    7594:	4b13      	ldr	r3, [pc, #76]	; (75e4 <_sercom_get_hardware_index+0x58>)
    7596:	f107 040c 	add.w	r4, r7, #12
    759a:	461d      	mov	r5, r3
    759c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    759e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    75a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    75a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    75a8:	2300      	movs	r3, #0
    75aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    75ac:	e010      	b.n	75d0 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    75ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    75b0:	009b      	lsls	r3, r3, #2
    75b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    75b6:	4413      	add	r3, r2
    75b8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    75bc:	461a      	mov	r2, r3
    75be:	687b      	ldr	r3, [r7, #4]
    75c0:	429a      	cmp	r2, r3
    75c2:	d102      	bne.n	75ca <_sercom_get_hardware_index+0x3e>
			return i;
    75c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    75c6:	b2db      	uxtb	r3, r3
    75c8:	e006      	b.n	75d8 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    75ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    75cc:	3301      	adds	r3, #1
    75ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    75d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    75d2:	2b07      	cmp	r3, #7
    75d4:	d9eb      	bls.n	75ae <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    75d6:	2300      	movs	r3, #0
}
    75d8:	4618      	mov	r0, r3
    75da:	3734      	adds	r7, #52	; 0x34
    75dc:	46bd      	mov	sp, r7
    75de:	bcb0      	pop	{r4, r5, r7}
    75e0:	4770      	bx	lr
    75e2:	bf00      	nop
    75e4:	00010e9c 	.word	0x00010e9c

000075e8 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    75e8:	b580      	push	{r7, lr}
    75ea:	b084      	sub	sp, #16
    75ec:	af00      	add	r7, sp, #0
    75ee:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    75f0:	6878      	ldr	r0, [r7, #4]
    75f2:	4b13      	ldr	r3, [pc, #76]	; (7640 <_get_i2cm_index+0x58>)
    75f4:	4798      	blx	r3
    75f6:	4603      	mov	r3, r0
    75f8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    75fa:	2300      	movs	r3, #0
    75fc:	73fb      	strb	r3, [r7, #15]
    75fe:	e010      	b.n	7622 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    7600:	7bfa      	ldrb	r2, [r7, #15]
    7602:	4910      	ldr	r1, [pc, #64]	; (7644 <_get_i2cm_index+0x5c>)
    7604:	4613      	mov	r3, r2
    7606:	005b      	lsls	r3, r3, #1
    7608:	4413      	add	r3, r2
    760a:	00db      	lsls	r3, r3, #3
    760c:	440b      	add	r3, r1
    760e:	781b      	ldrb	r3, [r3, #0]
    7610:	7bba      	ldrb	r2, [r7, #14]
    7612:	429a      	cmp	r2, r3
    7614:	d102      	bne.n	761c <_get_i2cm_index+0x34>
			return i;
    7616:	f997 300f 	ldrsb.w	r3, [r7, #15]
    761a:	e00d      	b.n	7638 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    761c:	7bfb      	ldrb	r3, [r7, #15]
    761e:	3301      	adds	r3, #1
    7620:	73fb      	strb	r3, [r7, #15]
    7622:	7bfb      	ldrb	r3, [r7, #15]
    7624:	2b02      	cmp	r3, #2
    7626:	d9eb      	bls.n	7600 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    7628:	f240 32a6 	movw	r2, #934	; 0x3a6
    762c:	4906      	ldr	r1, [pc, #24]	; (7648 <_get_i2cm_index+0x60>)
    762e:	2000      	movs	r0, #0
    7630:	4b06      	ldr	r3, [pc, #24]	; (764c <_get_i2cm_index+0x64>)
    7632:	4798      	blx	r3
	return -1;
    7634:	f04f 33ff 	mov.w	r3, #4294967295
}
    7638:	4618      	mov	r0, r3
    763a:	3710      	adds	r7, #16
    763c:	46bd      	mov	sp, r7
    763e:	bd80      	pop	{r7, pc}
    7640:	0000758d 	.word	0x0000758d
    7644:	20000018 	.word	0x20000018
    7648:	00010e80 	.word	0x00010e80
    764c:	00004a95 	.word	0x00004a95

00007650 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    7650:	b580      	push	{r7, lr}
    7652:	b082      	sub	sp, #8
    7654:	af00      	add	r7, sp, #0
    7656:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    7658:	2103      	movs	r1, #3
    765a:	6878      	ldr	r0, [r7, #4]
    765c:	4b02      	ldr	r3, [pc, #8]	; (7668 <_sercom_i2c_send_stop+0x18>)
    765e:	4798      	blx	r3
}
    7660:	bf00      	nop
    7662:	3708      	adds	r7, #8
    7664:	46bd      	mov	sp, r7
    7666:	bd80      	pop	{r7, pc}
    7668:	00007309 	.word	0x00007309

0000766c <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    766c:	b590      	push	{r4, r7, lr}
    766e:	b087      	sub	sp, #28
    7670:	af00      	add	r7, sp, #0
    7672:	60f8      	str	r0, [r7, #12]
    7674:	60b9      	str	r1, [r7, #8]
    7676:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    7678:	68f8      	ldr	r0, [r7, #12]
    767a:	4b7d      	ldr	r3, [pc, #500]	; (7870 <_sercom_i2c_sync_analyse_flags+0x204>)
    767c:	4798      	blx	r3
    767e:	4603      	mov	r3, r0
    7680:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    7682:	68f8      	ldr	r0, [r7, #12]
    7684:	4b7b      	ldr	r3, [pc, #492]	; (7874 <_sercom_i2c_sync_analyse_flags+0x208>)
    7686:	4798      	blx	r3
    7688:	4603      	mov	r3, r0
    768a:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    768c:	68bb      	ldr	r3, [r7, #8]
    768e:	f003 0301 	and.w	r3, r3, #1
    7692:	2b00      	cmp	r3, #0
    7694:	f000 8095 	beq.w	77c2 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    7698:	8a7b      	ldrh	r3, [r7, #18]
    769a:	f003 0302 	and.w	r3, r3, #2
    769e:	2b00      	cmp	r3, #0
    76a0:	d01d      	beq.n	76de <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    76a2:	68f8      	ldr	r0, [r7, #12]
    76a4:	4b74      	ldr	r3, [pc, #464]	; (7878 <_sercom_i2c_sync_analyse_flags+0x20c>)
    76a6:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    76a8:	687b      	ldr	r3, [r7, #4]
    76aa:	885b      	ldrh	r3, [r3, #2]
    76ac:	b29b      	uxth	r3, r3
    76ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    76b2:	b29a      	uxth	r2, r3
    76b4:	687b      	ldr	r3, [r7, #4]
    76b6:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    76b8:	687b      	ldr	r3, [r7, #4]
    76ba:	885b      	ldrh	r3, [r3, #2]
    76bc:	b29b      	uxth	r3, r3
    76be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    76c2:	b29a      	uxth	r2, r3
    76c4:	687b      	ldr	r3, [r7, #4]
    76c6:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    76c8:	8a7b      	ldrh	r3, [r7, #18]
    76ca:	f003 0301 	and.w	r3, r3, #1
    76ce:	2b00      	cmp	r3, #0
    76d0:	d002      	beq.n	76d8 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    76d2:	f06f 0304 	mvn.w	r3, #4
    76d6:	e0c6      	b.n	7866 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    76d8:	f06f 0303 	mvn.w	r3, #3
    76dc:	e0c3      	b.n	7866 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    76de:	8a7b      	ldrh	r3, [r7, #18]
    76e0:	f003 0304 	and.w	r3, r3, #4
    76e4:	2b00      	cmp	r3, #0
    76e6:	d01f      	beq.n	7728 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    76e8:	687b      	ldr	r3, [r7, #4]
    76ea:	685b      	ldr	r3, [r3, #4]
    76ec:	2b00      	cmp	r3, #0
    76ee:	dd07      	ble.n	7700 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    76f0:	687b      	ldr	r3, [r7, #4]
    76f2:	885b      	ldrh	r3, [r3, #2]
    76f4:	b29b      	uxth	r3, r3
    76f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    76fa:	b29a      	uxth	r2, r3
    76fc:	687b      	ldr	r3, [r7, #4]
    76fe:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    7700:	687b      	ldr	r3, [r7, #4]
    7702:	885b      	ldrh	r3, [r3, #2]
    7704:	b29b      	uxth	r3, r3
    7706:	b21b      	sxth	r3, r3
    7708:	2b00      	cmp	r3, #0
    770a:	da02      	bge.n	7712 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    770c:	68f8      	ldr	r0, [r7, #12]
    770e:	4b5b      	ldr	r3, [pc, #364]	; (787c <_sercom_i2c_sync_analyse_flags+0x210>)
    7710:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    7712:	687b      	ldr	r3, [r7, #4]
    7714:	885b      	ldrh	r3, [r3, #2]
    7716:	b29b      	uxth	r3, r3
    7718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    771c:	b29a      	uxth	r2, r3
    771e:	687b      	ldr	r3, [r7, #4]
    7720:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    7722:	f06f 0301 	mvn.w	r3, #1
    7726:	e09e      	b.n	7866 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    7728:	687b      	ldr	r3, [r7, #4]
    772a:	885b      	ldrh	r3, [r3, #2]
    772c:	b29b      	uxth	r3, r3
    772e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7732:	2b00      	cmp	r3, #0
    7734:	d01c      	beq.n	7770 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    7736:	687b      	ldr	r3, [r7, #4]
    7738:	881b      	ldrh	r3, [r3, #0]
    773a:	121b      	asrs	r3, r3, #8
    773c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    773e:	f003 0406 	and.w	r4, r3, #6
    7742:	68f8      	ldr	r0, [r7, #12]
    7744:	4b4e      	ldr	r3, [pc, #312]	; (7880 <_sercom_i2c_sync_analyse_flags+0x214>)
    7746:	4798      	blx	r3
    7748:	4603      	mov	r3, r0
    774a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    774e:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    7750:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    7754:	4619      	mov	r1, r3
    7756:	68f8      	ldr	r0, [r7, #12]
    7758:	4b4a      	ldr	r3, [pc, #296]	; (7884 <_sercom_i2c_sync_analyse_flags+0x218>)
    775a:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    775c:	687b      	ldr	r3, [r7, #4]
    775e:	885b      	ldrh	r3, [r3, #2]
    7760:	b29b      	uxth	r3, r3
    7762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    7766:	b29a      	uxth	r2, r3
    7768:	687b      	ldr	r3, [r7, #4]
    776a:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    776c:	2300      	movs	r3, #0
    776e:	e07a      	b.n	7866 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    7770:	687b      	ldr	r3, [r7, #4]
    7772:	685b      	ldr	r3, [r3, #4]
    7774:	2b00      	cmp	r3, #0
    7776:	d111      	bne.n	779c <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    7778:	687b      	ldr	r3, [r7, #4]
    777a:	885b      	ldrh	r3, [r3, #2]
    777c:	b29b      	uxth	r3, r3
    777e:	b21b      	sxth	r3, r3
    7780:	2b00      	cmp	r3, #0
    7782:	da02      	bge.n	778a <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    7784:	68f8      	ldr	r0, [r7, #12]
    7786:	4b3d      	ldr	r3, [pc, #244]	; (787c <_sercom_i2c_sync_analyse_flags+0x210>)
    7788:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    778a:	687b      	ldr	r3, [r7, #4]
    778c:	885b      	ldrh	r3, [r3, #2]
    778e:	b29b      	uxth	r3, r3
    7790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7794:	b29a      	uxth	r2, r3
    7796:	687b      	ldr	r3, [r7, #4]
    7798:	805a      	strh	r2, [r3, #2]
    779a:	e010      	b.n	77be <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    779c:	687b      	ldr	r3, [r7, #4]
    779e:	689b      	ldr	r3, [r3, #8]
    77a0:	781b      	ldrb	r3, [r3, #0]
    77a2:	4619      	mov	r1, r3
    77a4:	68f8      	ldr	r0, [r7, #12]
    77a6:	4b38      	ldr	r3, [pc, #224]	; (7888 <_sercom_i2c_sync_analyse_flags+0x21c>)
    77a8:	4798      	blx	r3
				msg->buffer++;
    77aa:	687b      	ldr	r3, [r7, #4]
    77ac:	689b      	ldr	r3, [r3, #8]
    77ae:	1c5a      	adds	r2, r3, #1
    77b0:	687b      	ldr	r3, [r7, #4]
    77b2:	609a      	str	r2, [r3, #8]
				msg->len--;
    77b4:	687b      	ldr	r3, [r7, #4]
    77b6:	685b      	ldr	r3, [r3, #4]
    77b8:	1e5a      	subs	r2, r3, #1
    77ba:	687b      	ldr	r3, [r7, #4]
    77bc:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    77be:	2300      	movs	r3, #0
    77c0:	e051      	b.n	7866 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    77c2:	68bb      	ldr	r3, [r7, #8]
    77c4:	f003 0302 	and.w	r3, r3, #2
    77c8:	2b00      	cmp	r3, #0
    77ca:	d04b      	beq.n	7864 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    77cc:	687b      	ldr	r3, [r7, #4]
    77ce:	685b      	ldr	r3, [r3, #4]
    77d0:	2b00      	cmp	r3, #0
    77d2:	d041      	beq.n	7858 <_sercom_i2c_sync_analyse_flags+0x1ec>
    77d4:	8a7b      	ldrh	r3, [r7, #18]
    77d6:	f003 0304 	and.w	r3, r3, #4
    77da:	2b00      	cmp	r3, #0
    77dc:	d13c      	bne.n	7858 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    77de:	687b      	ldr	r3, [r7, #4]
    77e0:	685b      	ldr	r3, [r3, #4]
    77e2:	1e5a      	subs	r2, r3, #1
    77e4:	687b      	ldr	r3, [r7, #4]
    77e6:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    77e8:	687b      	ldr	r3, [r7, #4]
    77ea:	685b      	ldr	r3, [r3, #4]
    77ec:	2b00      	cmp	r3, #0
    77ee:	d102      	bne.n	77f6 <_sercom_i2c_sync_analyse_flags+0x18a>
    77f0:	697b      	ldr	r3, [r7, #20]
    77f2:	2b00      	cmp	r3, #0
    77f4:	d006      	beq.n	7804 <_sercom_i2c_sync_analyse_flags+0x198>
    77f6:	687b      	ldr	r3, [r7, #4]
    77f8:	685b      	ldr	r3, [r3, #4]
    77fa:	2b01      	cmp	r3, #1
    77fc:	d105      	bne.n	780a <_sercom_i2c_sync_analyse_flags+0x19e>
    77fe:	697b      	ldr	r3, [r7, #20]
    7800:	2b00      	cmp	r3, #0
    7802:	d002      	beq.n	780a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    7804:	68f8      	ldr	r0, [r7, #12]
    7806:	4b21      	ldr	r3, [pc, #132]	; (788c <_sercom_i2c_sync_analyse_flags+0x220>)
    7808:	4798      	blx	r3
			}

			if (msg->len == 0) {
    780a:	687b      	ldr	r3, [r7, #4]
    780c:	685b      	ldr	r3, [r3, #4]
    780e:	2b00      	cmp	r3, #0
    7810:	d113      	bne.n	783a <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    7812:	687b      	ldr	r3, [r7, #4]
    7814:	885b      	ldrh	r3, [r3, #2]
    7816:	b29b      	uxth	r3, r3
    7818:	b21b      	sxth	r3, r3
    781a:	2b00      	cmp	r3, #0
    781c:	da05      	bge.n	782a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    781e:	68f8      	ldr	r0, [r7, #12]
    7820:	4b1b      	ldr	r3, [pc, #108]	; (7890 <_sercom_i2c_sync_analyse_flags+0x224>)
    7822:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    7824:	68f8      	ldr	r0, [r7, #12]
    7826:	4b15      	ldr	r3, [pc, #84]	; (787c <_sercom_i2c_sync_analyse_flags+0x210>)
    7828:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    782a:	687b      	ldr	r3, [r7, #4]
    782c:	885b      	ldrh	r3, [r3, #2]
    782e:	b29b      	uxth	r3, r3
    7830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7834:	b29a      	uxth	r2, r3
    7836:	687b      	ldr	r3, [r7, #4]
    7838:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    783a:	687b      	ldr	r3, [r7, #4]
    783c:	689c      	ldr	r4, [r3, #8]
    783e:	1c62      	adds	r2, r4, #1
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	609a      	str	r2, [r3, #8]
    7844:	68f8      	ldr	r0, [r7, #12]
    7846:	4b13      	ldr	r3, [pc, #76]	; (7894 <_sercom_i2c_sync_analyse_flags+0x228>)
    7848:	4798      	blx	r3
    784a:	4603      	mov	r3, r0
    784c:	b2db      	uxtb	r3, r3
    784e:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    7850:	68f8      	ldr	r0, [r7, #12]
    7852:	4b11      	ldr	r3, [pc, #68]	; (7898 <_sercom_i2c_sync_analyse_flags+0x22c>)
    7854:	4798      	blx	r3
    7856:	e005      	b.n	7864 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    7858:	68f8      	ldr	r0, [r7, #12]
    785a:	4b0f      	ldr	r3, [pc, #60]	; (7898 <_sercom_i2c_sync_analyse_flags+0x22c>)
    785c:	4798      	blx	r3
			return I2C_NACK;
    785e:	f06f 0301 	mvn.w	r3, #1
    7862:	e000      	b.n	7866 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    7864:	2300      	movs	r3, #0
}
    7866:	4618      	mov	r0, r3
    7868:	371c      	adds	r7, #28
    786a:	46bd      	mov	sp, r7
    786c:	bd90      	pop	{r4, r7, pc}
    786e:	bf00      	nop
    7870:	00007131 	.word	0x00007131
    7874:	00007541 	.word	0x00007541
    7878:	00007031 	.word	0x00007031
    787c:	00007651 	.word	0x00007651
    7880:	00007421 	.word	0x00007421
    7884:	000073fd 	.word	0x000073fd
    7888:	0000745d 	.word	0x0000745d
    788c:	000072b9 	.word	0x000072b9
    7890:	00007291 	.word	0x00007291
    7894:	00007481 	.word	0x00007481
    7898:	0000704b 	.word	0x0000704b

0000789c <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    789c:	b580      	push	{r7, lr}
    789e:	b082      	sub	sp, #8
    78a0:	af00      	add	r7, sp, #0
    78a2:	6078      	str	r0, [r7, #4]
    78a4:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    78a6:	687b      	ldr	r3, [r7, #4]
    78a8:	2b00      	cmp	r3, #0
    78aa:	bf14      	ite	ne
    78ac:	2301      	movne	r3, #1
    78ae:	2300      	moveq	r3, #0
    78b0:	b2db      	uxtb	r3, r3
    78b2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    78b6:	4908      	ldr	r1, [pc, #32]	; (78d8 <_i2c_m_sync_init+0x3c>)
    78b8:	4618      	mov	r0, r3
    78ba:	4b08      	ldr	r3, [pc, #32]	; (78dc <_i2c_m_sync_init+0x40>)
    78bc:	4798      	blx	r3

	i2c_dev->hw = hw;
    78be:	687b      	ldr	r3, [r7, #4]
    78c0:	683a      	ldr	r2, [r7, #0]
    78c2:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    78c4:	687b      	ldr	r3, [r7, #4]
    78c6:	6839      	ldr	r1, [r7, #0]
    78c8:	4618      	mov	r0, r3
    78ca:	4b05      	ldr	r3, [pc, #20]	; (78e0 <_i2c_m_sync_init+0x44>)
    78cc:	4798      	blx	r3
    78ce:	4603      	mov	r3, r0
}
    78d0:	4618      	mov	r0, r3
    78d2:	3708      	adds	r7, #8
    78d4:	46bd      	mov	sp, r7
    78d6:	bd80      	pop	{r7, pc}
    78d8:	00010e80 	.word	0x00010e80
    78dc:	00004a95 	.word	0x00004a95
    78e0:	00007c59 	.word	0x00007c59

000078e4 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    78e4:	b580      	push	{r7, lr}
    78e6:	b082      	sub	sp, #8
    78e8:	af00      	add	r7, sp, #0
    78ea:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    78ec:	687b      	ldr	r3, [r7, #4]
    78ee:	2b00      	cmp	r3, #0
    78f0:	bf14      	ite	ne
    78f2:	2301      	movne	r3, #1
    78f4:	2300      	moveq	r3, #0
    78f6:	b2db      	uxtb	r3, r3
    78f8:	f240 5235 	movw	r2, #1333	; 0x535
    78fc:	4906      	ldr	r1, [pc, #24]	; (7918 <_i2c_m_sync_enable+0x34>)
    78fe:	4618      	mov	r0, r3
    7900:	4b06      	ldr	r3, [pc, #24]	; (791c <_i2c_m_sync_enable+0x38>)
    7902:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    7904:	687b      	ldr	r3, [r7, #4]
    7906:	691b      	ldr	r3, [r3, #16]
    7908:	4618      	mov	r0, r3
    790a:	4b05      	ldr	r3, [pc, #20]	; (7920 <_i2c_m_sync_enable+0x3c>)
    790c:	4798      	blx	r3
    790e:	4603      	mov	r3, r0
}
    7910:	4618      	mov	r0, r3
    7912:	3708      	adds	r7, #8
    7914:	46bd      	mov	sp, r7
    7916:	bd80      	pop	{r7, pc}
    7918:	00010e80 	.word	0x00010e80
    791c:	00004a95 	.word	0x00004a95
    7920:	00007bcd 	.word	0x00007bcd

00007924 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    7924:	b580      	push	{r7, lr}
    7926:	b084      	sub	sp, #16
    7928:	af00      	add	r7, sp, #0
    792a:	6078      	str	r0, [r7, #4]
    792c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    792e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7932:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    7934:	687b      	ldr	r3, [r7, #4]
    7936:	691b      	ldr	r3, [r3, #16]
    7938:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    793a:	68b8      	ldr	r0, [r7, #8]
    793c:	4b0f      	ldr	r3, [pc, #60]	; (797c <_sercom_i2c_sync_wait_bus+0x58>)
    793e:	4798      	blx	r3
    7940:	4603      	mov	r3, r0
    7942:	461a      	mov	r2, r3
    7944:	683b      	ldr	r3, [r7, #0]
    7946:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    7948:	68fb      	ldr	r3, [r7, #12]
    794a:	1e5a      	subs	r2, r3, #1
    794c:	60fa      	str	r2, [r7, #12]
    794e:	2b00      	cmp	r3, #0
    7950:	d102      	bne.n	7958 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    7952:	f06f 0304 	mvn.w	r3, #4
    7956:	e00c      	b.n	7972 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    7958:	683b      	ldr	r3, [r7, #0]
    795a:	681b      	ldr	r3, [r3, #0]
    795c:	f003 0301 	and.w	r3, r3, #1
    7960:	2b00      	cmp	r3, #0
    7962:	d105      	bne.n	7970 <_sercom_i2c_sync_wait_bus+0x4c>
    7964:	683b      	ldr	r3, [r7, #0]
    7966:	681b      	ldr	r3, [r3, #0]
    7968:	f003 0302 	and.w	r3, r3, #2
    796c:	2b00      	cmp	r3, #0
    796e:	d0e4      	beq.n	793a <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    7970:	2300      	movs	r3, #0
}
    7972:	4618      	mov	r0, r3
    7974:	3710      	adds	r7, #16
    7976:	46bd      	mov	sp, r7
    7978:	bd80      	pop	{r7, pc}
    797a:	bf00      	nop
    797c:	00007065 	.word	0x00007065

00007980 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    7980:	b590      	push	{r4, r7, lr}
    7982:	b087      	sub	sp, #28
    7984:	af00      	add	r7, sp, #0
    7986:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    7988:	687b      	ldr	r3, [r7, #4]
    798a:	691b      	ldr	r3, [r3, #16]
    798c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    798e:	687b      	ldr	r3, [r7, #4]
    7990:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    7992:	6978      	ldr	r0, [r7, #20]
    7994:	4b39      	ldr	r3, [pc, #228]	; (7a7c <_sercom_i2c_sync_send_address+0xfc>)
    7996:	4798      	blx	r3
    7998:	4603      	mov	r3, r0
    799a:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    799c:	687b      	ldr	r3, [r7, #4]
    799e:	2b00      	cmp	r3, #0
    79a0:	bf14      	ite	ne
    79a2:	2301      	movne	r3, #1
    79a4:	2300      	moveq	r3, #0
    79a6:	b2db      	uxtb	r3, r3
    79a8:	f240 52a5 	movw	r2, #1445	; 0x5a5
    79ac:	4934      	ldr	r1, [pc, #208]	; (7a80 <_sercom_i2c_sync_send_address+0x100>)
    79ae:	4618      	mov	r0, r3
    79b0:	4b34      	ldr	r3, [pc, #208]	; (7a84 <_sercom_i2c_sync_send_address+0x104>)
    79b2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    79b4:	693b      	ldr	r3, [r7, #16]
    79b6:	685b      	ldr	r3, [r3, #4]
    79b8:	2b01      	cmp	r3, #1
    79ba:	d106      	bne.n	79ca <_sercom_i2c_sync_send_address+0x4a>
    79bc:	68fb      	ldr	r3, [r7, #12]
    79be:	2b00      	cmp	r3, #0
    79c0:	d003      	beq.n	79ca <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    79c2:	6978      	ldr	r0, [r7, #20]
    79c4:	4b30      	ldr	r3, [pc, #192]	; (7a88 <_sercom_i2c_sync_send_address+0x108>)
    79c6:	4798      	blx	r3
    79c8:	e002      	b.n	79d0 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    79ca:	6978      	ldr	r0, [r7, #20]
    79cc:	4b2f      	ldr	r3, [pc, #188]	; (7a8c <_sercom_i2c_sync_send_address+0x10c>)
    79ce:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    79d0:	693b      	ldr	r3, [r7, #16]
    79d2:	881b      	ldrh	r3, [r3, #0]
    79d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    79d8:	2b00      	cmp	r3, #0
    79da:	d022      	beq.n	7a22 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    79dc:	693b      	ldr	r3, [r7, #16]
    79de:	885b      	ldrh	r3, [r3, #2]
    79e0:	b29b      	uxth	r3, r3
    79e2:	f003 0301 	and.w	r3, r3, #1
    79e6:	2b00      	cmp	r3, #0
    79e8:	d007      	beq.n	79fa <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    79ea:	693b      	ldr	r3, [r7, #16]
    79ec:	885b      	ldrh	r3, [r3, #2]
    79ee:	b29b      	uxth	r3, r3
    79f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    79f4:	b29a      	uxth	r2, r3
    79f6:	693b      	ldr	r3, [r7, #16]
    79f8:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    79fa:	693b      	ldr	r3, [r7, #16]
    79fc:	881b      	ldrh	r3, [r3, #0]
    79fe:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7a00:	f240 74fe 	movw	r4, #2046	; 0x7fe
    7a04:	401c      	ands	r4, r3
    7a06:	6978      	ldr	r0, [r7, #20]
    7a08:	4b21      	ldr	r3, [pc, #132]	; (7a90 <_sercom_i2c_sync_send_address+0x110>)
    7a0a:	4798      	blx	r3
    7a0c:	4603      	mov	r3, r0
    7a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7a12:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    7a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7a18:	4619      	mov	r1, r3
    7a1a:	6978      	ldr	r0, [r7, #20]
    7a1c:	4b1d      	ldr	r3, [pc, #116]	; (7a94 <_sercom_i2c_sync_send_address+0x114>)
    7a1e:	4798      	blx	r3
    7a20:	e01a      	b.n	7a58 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7a22:	693b      	ldr	r3, [r7, #16]
    7a24:	881b      	ldrh	r3, [r3, #0]
    7a26:	005b      	lsls	r3, r3, #1
    7a28:	b2db      	uxtb	r3, r3
    7a2a:	693a      	ldr	r2, [r7, #16]
    7a2c:	8852      	ldrh	r2, [r2, #2]
    7a2e:	b292      	uxth	r2, r2
    7a30:	f002 0201 	and.w	r2, r2, #1
    7a34:	2a00      	cmp	r2, #0
    7a36:	bf14      	ite	ne
    7a38:	2201      	movne	r2, #1
    7a3a:	2200      	moveq	r2, #0
    7a3c:	b2d2      	uxtb	r2, r2
    7a3e:	4313      	orrs	r3, r2
    7a40:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7a42:	6978      	ldr	r0, [r7, #20]
    7a44:	4b12      	ldr	r3, [pc, #72]	; (7a90 <_sercom_i2c_sync_send_address+0x110>)
    7a46:	4798      	blx	r3
    7a48:	4603      	mov	r3, r0
    7a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7a4e:	4323      	orrs	r3, r4
    7a50:	4619      	mov	r1, r3
    7a52:	6978      	ldr	r0, [r7, #20]
    7a54:	4b0f      	ldr	r3, [pc, #60]	; (7a94 <_sercom_i2c_sync_send_address+0x114>)
    7a56:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    7a58:	f107 0308 	add.w	r3, r7, #8
    7a5c:	4619      	mov	r1, r3
    7a5e:	6878      	ldr	r0, [r7, #4]
    7a60:	4b0d      	ldr	r3, [pc, #52]	; (7a98 <_sercom_i2c_sync_send_address+0x118>)
    7a62:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    7a64:	68bb      	ldr	r3, [r7, #8]
    7a66:	693a      	ldr	r2, [r7, #16]
    7a68:	4619      	mov	r1, r3
    7a6a:	6978      	ldr	r0, [r7, #20]
    7a6c:	4b0b      	ldr	r3, [pc, #44]	; (7a9c <_sercom_i2c_sync_send_address+0x11c>)
    7a6e:	4798      	blx	r3
    7a70:	4603      	mov	r3, r0
}
    7a72:	4618      	mov	r0, r3
    7a74:	371c      	adds	r7, #28
    7a76:	46bd      	mov	sp, r7
    7a78:	bd90      	pop	{r4, r7, pc}
    7a7a:	bf00      	nop
    7a7c:	00007131 	.word	0x00007131
    7a80:	00010e80 	.word	0x00010e80
    7a84:	00004a95 	.word	0x00004a95
    7a88:	000072b9 	.word	0x000072b9
    7a8c:	000072e1 	.word	0x000072e1
    7a90:	00007421 	.word	0x00007421
    7a94:	000073fd 	.word	0x000073fd
    7a98:	00007925 	.word	0x00007925
    7a9c:	0000766d 	.word	0x0000766d

00007aa0 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    7aa0:	b580      	push	{r7, lr}
    7aa2:	b086      	sub	sp, #24
    7aa4:	af00      	add	r7, sp, #0
    7aa6:	6078      	str	r0, [r7, #4]
    7aa8:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    7aaa:	687b      	ldr	r3, [r7, #4]
    7aac:	691b      	ldr	r3, [r3, #16]
    7aae:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    7ab0:	687b      	ldr	r3, [r7, #4]
    7ab2:	2b00      	cmp	r3, #0
    7ab4:	bf14      	ite	ne
    7ab6:	2301      	movne	r3, #1
    7ab8:	2300      	moveq	r3, #0
    7aba:	b2db      	uxtb	r3, r3
    7abc:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    7ac0:	493b      	ldr	r1, [pc, #236]	; (7bb0 <_i2c_m_sync_transfer+0x110>)
    7ac2:	4618      	mov	r0, r3
    7ac4:	4b3b      	ldr	r3, [pc, #236]	; (7bb4 <_i2c_m_sync_transfer+0x114>)
    7ac6:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    7ac8:	687b      	ldr	r3, [r7, #4]
    7aca:	691b      	ldr	r3, [r3, #16]
    7acc:	2b00      	cmp	r3, #0
    7ace:	bf14      	ite	ne
    7ad0:	2301      	movne	r3, #1
    7ad2:	2300      	moveq	r3, #0
    7ad4:	b2db      	uxtb	r3, r3
    7ad6:	f240 52d1 	movw	r2, #1489	; 0x5d1
    7ada:	4935      	ldr	r1, [pc, #212]	; (7bb0 <_i2c_m_sync_transfer+0x110>)
    7adc:	4618      	mov	r0, r3
    7ade:	4b35      	ldr	r3, [pc, #212]	; (7bb4 <_i2c_m_sync_transfer+0x114>)
    7ae0:	4798      	blx	r3
	ASSERT(msg);
    7ae2:	683b      	ldr	r3, [r7, #0]
    7ae4:	2b00      	cmp	r3, #0
    7ae6:	bf14      	ite	ne
    7ae8:	2301      	movne	r3, #1
    7aea:	2300      	moveq	r3, #0
    7aec:	b2db      	uxtb	r3, r3
    7aee:	f240 52d2 	movw	r2, #1490	; 0x5d2
    7af2:	492f      	ldr	r1, [pc, #188]	; (7bb0 <_i2c_m_sync_transfer+0x110>)
    7af4:	4618      	mov	r0, r3
    7af6:	4b2f      	ldr	r3, [pc, #188]	; (7bb4 <_i2c_m_sync_transfer+0x114>)
    7af8:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7afa:	687b      	ldr	r3, [r7, #4]
    7afc:	885b      	ldrh	r3, [r3, #2]
    7afe:	b29b      	uxth	r3, r3
    7b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7b04:	2b00      	cmp	r3, #0
    7b06:	d002      	beq.n	7b0e <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    7b08:	f06f 0305 	mvn.w	r3, #5
    7b0c:	e04c      	b.n	7ba8 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    7b0e:	683b      	ldr	r3, [r7, #0]
    7b10:	885b      	ldrh	r3, [r3, #2]
    7b12:	b29b      	uxth	r3, r3
    7b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7b18:	b29a      	uxth	r2, r3
    7b1a:	683b      	ldr	r3, [r7, #0]
    7b1c:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    7b1e:	687b      	ldr	r3, [r7, #4]
    7b20:	683a      	ldr	r2, [r7, #0]
    7b22:	ca07      	ldmia	r2, {r0, r1, r2}
    7b24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    7b28:	6938      	ldr	r0, [r7, #16]
    7b2a:	4b23      	ldr	r3, [pc, #140]	; (7bb8 <_i2c_m_sync_transfer+0x118>)
    7b2c:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    7b2e:	6878      	ldr	r0, [r7, #4]
    7b30:	4b22      	ldr	r3, [pc, #136]	; (7bbc <_i2c_m_sync_transfer+0x11c>)
    7b32:	4798      	blx	r3
    7b34:	6178      	str	r0, [r7, #20]

	if (ret) {
    7b36:	697b      	ldr	r3, [r7, #20]
    7b38:	2b00      	cmp	r3, #0
    7b3a:	d02d      	beq.n	7b98 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7b3c:	687b      	ldr	r3, [r7, #4]
    7b3e:	885b      	ldrh	r3, [r3, #2]
    7b40:	b29b      	uxth	r3, r3
    7b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7b46:	b29a      	uxth	r2, r3
    7b48:	687b      	ldr	r3, [r7, #4]
    7b4a:	805a      	strh	r2, [r3, #2]

		return ret;
    7b4c:	697b      	ldr	r3, [r7, #20]
    7b4e:	e02b      	b.n	7ba8 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    7b50:	f107 030c 	add.w	r3, r7, #12
    7b54:	4619      	mov	r1, r3
    7b56:	6878      	ldr	r0, [r7, #4]
    7b58:	4b19      	ldr	r3, [pc, #100]	; (7bc0 <_i2c_m_sync_transfer+0x120>)
    7b5a:	4798      	blx	r3
    7b5c:	6178      	str	r0, [r7, #20]

		if (ret) {
    7b5e:	697b      	ldr	r3, [r7, #20]
    7b60:	2b00      	cmp	r3, #0
    7b62:	d012      	beq.n	7b8a <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    7b64:	683b      	ldr	r3, [r7, #0]
    7b66:	885b      	ldrh	r3, [r3, #2]
    7b68:	b29b      	uxth	r3, r3
    7b6a:	b21b      	sxth	r3, r3
    7b6c:	2b00      	cmp	r3, #0
    7b6e:	da02      	bge.n	7b76 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    7b70:	6938      	ldr	r0, [r7, #16]
    7b72:	4b14      	ldr	r3, [pc, #80]	; (7bc4 <_i2c_m_sync_transfer+0x124>)
    7b74:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7b76:	687b      	ldr	r3, [r7, #4]
    7b78:	885b      	ldrh	r3, [r3, #2]
    7b7a:	b29b      	uxth	r3, r3
    7b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7b80:	b29a      	uxth	r2, r3
    7b82:	687b      	ldr	r3, [r7, #4]
    7b84:	805a      	strh	r2, [r3, #2]

			return ret;
    7b86:	697b      	ldr	r3, [r7, #20]
    7b88:	e00e      	b.n	7ba8 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    7b8a:	68fb      	ldr	r3, [r7, #12]
    7b8c:	687a      	ldr	r2, [r7, #4]
    7b8e:	4619      	mov	r1, r3
    7b90:	6938      	ldr	r0, [r7, #16]
    7b92:	4b0d      	ldr	r3, [pc, #52]	; (7bc8 <_i2c_m_sync_transfer+0x128>)
    7b94:	4798      	blx	r3
    7b96:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	885b      	ldrh	r3, [r3, #2]
    7b9c:	b29b      	uxth	r3, r3
    7b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7ba2:	2b00      	cmp	r3, #0
    7ba4:	d1d4      	bne.n	7b50 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    7ba6:	697b      	ldr	r3, [r7, #20]
}
    7ba8:	4618      	mov	r0, r3
    7baa:	3718      	adds	r7, #24
    7bac:	46bd      	mov	sp, r7
    7bae:	bd80      	pop	{r7, pc}
    7bb0:	00010e80 	.word	0x00010e80
    7bb4:	00004a95 	.word	0x00004a95
    7bb8:	00007269 	.word	0x00007269
    7bbc:	00007981 	.word	0x00007981
    7bc0:	00007925 	.word	0x00007925
    7bc4:	00007651 	.word	0x00007651
    7bc8:	0000766d 	.word	0x0000766d

00007bcc <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    7bcc:	b580      	push	{r7, lr}
    7bce:	b084      	sub	sp, #16
    7bd0:	af00      	add	r7, sp, #0
    7bd2:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    7bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7bd8:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    7bda:	2304      	movs	r3, #4
    7bdc:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    7bde:	687b      	ldr	r3, [r7, #4]
    7be0:	2b00      	cmp	r3, #0
    7be2:	bf14      	ite	ne
    7be4:	2301      	movne	r3, #1
    7be6:	2300      	moveq	r3, #0
    7be8:	b2db      	uxtb	r3, r3
    7bea:	f240 6205 	movw	r2, #1541	; 0x605
    7bee:	4915      	ldr	r1, [pc, #84]	; (7c44 <_i2c_m_enable_implementation+0x78>)
    7bf0:	4618      	mov	r0, r3
    7bf2:	4b15      	ldr	r3, [pc, #84]	; (7c48 <_i2c_m_enable_implementation+0x7c>)
    7bf4:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    7bf6:	6878      	ldr	r0, [r7, #4]
    7bf8:	4b14      	ldr	r3, [pc, #80]	; (7c4c <_i2c_m_enable_implementation+0x80>)
    7bfa:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7bfc:	e016      	b.n	7c2c <_i2c_m_enable_implementation+0x60>
		timeout--;
    7bfe:	68fb      	ldr	r3, [r7, #12]
    7c00:	3b01      	subs	r3, #1
    7c02:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    7c04:	68fb      	ldr	r3, [r7, #12]
    7c06:	2b00      	cmp	r3, #0
    7c08:	dc10      	bgt.n	7c2c <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    7c0a:	68bb      	ldr	r3, [r7, #8]
    7c0c:	3b01      	subs	r3, #1
    7c0e:	60bb      	str	r3, [r7, #8]
    7c10:	68bb      	ldr	r3, [r7, #8]
    7c12:	2b00      	cmp	r3, #0
    7c14:	d007      	beq.n	7c26 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    7c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7c1a:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    7c1c:	2110      	movs	r1, #16
    7c1e:	6878      	ldr	r0, [r7, #4]
    7c20:	4b0b      	ldr	r3, [pc, #44]	; (7c50 <_i2c_m_enable_implementation+0x84>)
    7c22:	4798      	blx	r3
    7c24:	e002      	b.n	7c2c <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    7c26:	f06f 0305 	mvn.w	r3, #5
    7c2a:	e006      	b.n	7c3a <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7c2c:	6878      	ldr	r0, [r7, #4]
    7c2e:	4b09      	ldr	r3, [pc, #36]	; (7c54 <_i2c_m_enable_implementation+0x88>)
    7c30:	4798      	blx	r3
    7c32:	4603      	mov	r3, r0
    7c34:	2b01      	cmp	r3, #1
    7c36:	d1e2      	bne.n	7bfe <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    7c38:	2300      	movs	r3, #0
}
    7c3a:	4618      	mov	r0, r3
    7c3c:	3710      	adds	r7, #16
    7c3e:	46bd      	mov	sp, r7
    7c40:	bd80      	pop	{r7, pc}
    7c42:	bf00      	nop
    7c44:	00010e80 	.word	0x00010e80
    7c48:	00004a95 	.word	0x00004a95
    7c4c:	000070e1 	.word	0x000070e1
    7c50:	00007565 	.word	0x00007565
    7c54:	00007515 	.word	0x00007515

00007c58 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    7c58:	b580      	push	{r7, lr}
    7c5a:	b084      	sub	sp, #16
    7c5c:	af00      	add	r7, sp, #0
    7c5e:	6078      	str	r0, [r7, #4]
    7c60:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    7c62:	6838      	ldr	r0, [r7, #0]
    7c64:	4b42      	ldr	r3, [pc, #264]	; (7d70 <_i2c_m_sync_init_impl+0x118>)
    7c66:	4798      	blx	r3
    7c68:	4603      	mov	r3, r0
    7c6a:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7c6c:	2101      	movs	r1, #1
    7c6e:	6838      	ldr	r0, [r7, #0]
    7c70:	4b40      	ldr	r3, [pc, #256]	; (7d74 <_i2c_m_sync_init_impl+0x11c>)
    7c72:	4798      	blx	r3
    7c74:	4603      	mov	r3, r0
    7c76:	f083 0301 	eor.w	r3, r3, #1
    7c7a:	b2db      	uxtb	r3, r3
    7c7c:	2b00      	cmp	r3, #0
    7c7e:	d020      	beq.n	7cc2 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7c80:	7bfa      	ldrb	r2, [r7, #15]
    7c82:	493d      	ldr	r1, [pc, #244]	; (7d78 <_i2c_m_sync_init_impl+0x120>)
    7c84:	4613      	mov	r3, r2
    7c86:	005b      	lsls	r3, r3, #1
    7c88:	4413      	add	r3, r2
    7c8a:	00db      	lsls	r3, r3, #3
    7c8c:	440b      	add	r3, r1
    7c8e:	3304      	adds	r3, #4
    7c90:	681b      	ldr	r3, [r3, #0]
    7c92:	f003 031c 	and.w	r3, r3, #28
    7c96:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    7c98:	2102      	movs	r1, #2
    7c9a:	6838      	ldr	r0, [r7, #0]
    7c9c:	4b37      	ldr	r3, [pc, #220]	; (7d7c <_i2c_m_sync_init_impl+0x124>)
    7c9e:	4798      	blx	r3
    7ca0:	4603      	mov	r3, r0
    7ca2:	2b00      	cmp	r3, #0
    7ca4:	d006      	beq.n	7cb4 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    7ca6:	6838      	ldr	r0, [r7, #0]
    7ca8:	4b35      	ldr	r3, [pc, #212]	; (7d80 <_i2c_m_sync_init_impl+0x128>)
    7caa:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    7cac:	2102      	movs	r1, #2
    7cae:	6838      	ldr	r0, [r7, #0]
    7cb0:	4b34      	ldr	r3, [pc, #208]	; (7d84 <_i2c_m_sync_init_impl+0x12c>)
    7cb2:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    7cb4:	68bb      	ldr	r3, [r7, #8]
    7cb6:	f043 0301 	orr.w	r3, r3, #1
    7cba:	4619      	mov	r1, r3
    7cbc:	6838      	ldr	r0, [r7, #0]
    7cbe:	4b32      	ldr	r3, [pc, #200]	; (7d88 <_i2c_m_sync_init_impl+0x130>)
    7cc0:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    7cc2:	2101      	movs	r1, #1
    7cc4:	6838      	ldr	r0, [r7, #0]
    7cc6:	4b2f      	ldr	r3, [pc, #188]	; (7d84 <_i2c_m_sync_init_impl+0x12c>)
    7cc8:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    7cca:	7bfa      	ldrb	r2, [r7, #15]
    7ccc:	492a      	ldr	r1, [pc, #168]	; (7d78 <_i2c_m_sync_init_impl+0x120>)
    7cce:	4613      	mov	r3, r2
    7cd0:	005b      	lsls	r3, r3, #1
    7cd2:	4413      	add	r3, r2
    7cd4:	00db      	lsls	r3, r3, #3
    7cd6:	440b      	add	r3, r1
    7cd8:	3304      	adds	r3, #4
    7cda:	681b      	ldr	r3, [r3, #0]
    7cdc:	4619      	mov	r1, r3
    7cde:	6838      	ldr	r0, [r7, #0]
    7ce0:	4b29      	ldr	r3, [pc, #164]	; (7d88 <_i2c_m_sync_init_impl+0x130>)
    7ce2:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    7ce4:	7bfa      	ldrb	r2, [r7, #15]
    7ce6:	4924      	ldr	r1, [pc, #144]	; (7d78 <_i2c_m_sync_init_impl+0x120>)
    7ce8:	4613      	mov	r3, r2
    7cea:	005b      	lsls	r3, r3, #1
    7cec:	4413      	add	r3, r2
    7cee:	00db      	lsls	r3, r3, #3
    7cf0:	440b      	add	r3, r1
    7cf2:	3308      	adds	r3, #8
    7cf4:	681b      	ldr	r3, [r3, #0]
    7cf6:	4619      	mov	r1, r3
    7cf8:	6838      	ldr	r0, [r7, #0]
    7cfa:	4b24      	ldr	r3, [pc, #144]	; (7d8c <_i2c_m_sync_init_impl+0x134>)
    7cfc:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    7cfe:	7bfa      	ldrb	r2, [r7, #15]
    7d00:	491d      	ldr	r1, [pc, #116]	; (7d78 <_i2c_m_sync_init_impl+0x120>)
    7d02:	4613      	mov	r3, r2
    7d04:	005b      	lsls	r3, r3, #1
    7d06:	4413      	add	r3, r2
    7d08:	00db      	lsls	r3, r3, #3
    7d0a:	440b      	add	r3, r1
    7d0c:	330c      	adds	r3, #12
    7d0e:	681b      	ldr	r3, [r3, #0]
    7d10:	4619      	mov	r1, r3
    7d12:	6838      	ldr	r0, [r7, #0]
    7d14:	4b1e      	ldr	r3, [pc, #120]	; (7d90 <_i2c_m_sync_init_impl+0x138>)
    7d16:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    7d18:	7bfa      	ldrb	r2, [r7, #15]
    7d1a:	4917      	ldr	r1, [pc, #92]	; (7d78 <_i2c_m_sync_init_impl+0x120>)
    7d1c:	4613      	mov	r3, r2
    7d1e:	005b      	lsls	r3, r3, #1
    7d20:	4413      	add	r3, r2
    7d22:	00db      	lsls	r3, r3, #3
    7d24:	440b      	add	r3, r1
    7d26:	3304      	adds	r3, #4
    7d28:	681b      	ldr	r3, [r3, #0]
    7d2a:	0e1b      	lsrs	r3, r3, #24
    7d2c:	b29b      	uxth	r3, r3
    7d2e:	f003 0303 	and.w	r3, r3, #3
    7d32:	b29a      	uxth	r2, r3
    7d34:	687b      	ldr	r3, [r7, #4]
    7d36:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    7d38:	687b      	ldr	r3, [r7, #4]
    7d3a:	899b      	ldrh	r3, [r3, #12]
    7d3c:	2b01      	cmp	r3, #1
    7d3e:	bf8c      	ite	hi
    7d40:	2301      	movhi	r3, #1
    7d42:	2300      	movls	r3, #0
    7d44:	b2db      	uxtb	r3, r3
    7d46:	4619      	mov	r1, r3
    7d48:	6838      	ldr	r0, [r7, #0]
    7d4a:	4b12      	ldr	r3, [pc, #72]	; (7d94 <_i2c_m_sync_init_impl+0x13c>)
    7d4c:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    7d4e:	7bfa      	ldrb	r2, [r7, #15]
    7d50:	4909      	ldr	r1, [pc, #36]	; (7d78 <_i2c_m_sync_init_impl+0x120>)
    7d52:	4613      	mov	r3, r2
    7d54:	005b      	lsls	r3, r3, #1
    7d56:	4413      	add	r3, r2
    7d58:	00db      	lsls	r3, r3, #3
    7d5a:	440b      	add	r3, r1
    7d5c:	3312      	adds	r3, #18
    7d5e:	881a      	ldrh	r2, [r3, #0]
    7d60:	687b      	ldr	r3, [r7, #4]
    7d62:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7d64:	2300      	movs	r3, #0
}
    7d66:	4618      	mov	r0, r3
    7d68:	3710      	adds	r7, #16
    7d6a:	46bd      	mov	sp, r7
    7d6c:	bd80      	pop	{r7, pc}
    7d6e:	bf00      	nop
    7d70:	000075e9 	.word	0x000075e9
    7d74:	00006fbd 	.word	0x00006fbd
    7d78:	20000018 	.word	0x20000018
    7d7c:	00007161 	.word	0x00007161
    7d80:	00007109 	.word	0x00007109
    7d84:	00006f99 	.word	0x00006f99
    7d88:	00007191 	.word	0x00007191
    7d8c:	00007339 	.word	0x00007339
    7d90:	00007381 	.word	0x00007381
    7d94:	000073bd 	.word	0x000073bd

00007d98 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7d98:	b580      	push	{r7, lr}
    7d9a:	b082      	sub	sp, #8
    7d9c:	af00      	add	r7, sp, #0
    7d9e:	6078      	str	r0, [r7, #4]
    7da0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    7da2:	687b      	ldr	r3, [r7, #4]
    7da4:	2b00      	cmp	r3, #0
    7da6:	d004      	beq.n	7db2 <_spi_load_regs_master+0x1a>
    7da8:	683b      	ldr	r3, [r7, #0]
    7daa:	2b00      	cmp	r3, #0
    7dac:	d001      	beq.n	7db2 <_spi_load_regs_master+0x1a>
    7dae:	2301      	movs	r3, #1
    7db0:	e000      	b.n	7db4 <_spi_load_regs_master+0x1c>
    7db2:	2300      	movs	r3, #0
    7db4:	f003 0301 	and.w	r3, r3, #1
    7db8:	b2db      	uxtb	r3, r3
    7dba:	f640 1209 	movw	r2, #2313	; 0x909
    7dbe:	4915      	ldr	r1, [pc, #84]	; (7e14 <_spi_load_regs_master+0x7c>)
    7dc0:	4618      	mov	r0, r3
    7dc2:	4b15      	ldr	r3, [pc, #84]	; (7e18 <_spi_load_regs_master+0x80>)
    7dc4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7dc6:	683b      	ldr	r3, [r7, #0]
    7dc8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7dca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7dce:	f023 0301 	bic.w	r3, r3, #1
    7dd2:	4619      	mov	r1, r3
    7dd4:	6878      	ldr	r0, [r7, #4]
    7dd6:	4b11      	ldr	r3, [pc, #68]	; (7e1c <_spi_load_regs_master+0x84>)
    7dd8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    7dda:	683b      	ldr	r3, [r7, #0]
    7ddc:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    7dde:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7de2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7dea:	4619      	mov	r1, r3
    7dec:	6878      	ldr	r0, [r7, #4]
    7dee:	4b0c      	ldr	r3, [pc, #48]	; (7e20 <_spi_load_regs_master+0x88>)
    7df0:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7df2:	683b      	ldr	r3, [r7, #0]
    7df4:	7b1b      	ldrb	r3, [r3, #12]
    7df6:	4619      	mov	r1, r3
    7df8:	6878      	ldr	r0, [r7, #4]
    7dfa:	4b0a      	ldr	r3, [pc, #40]	; (7e24 <_spi_load_regs_master+0x8c>)
    7dfc:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7dfe:	683b      	ldr	r3, [r7, #0]
    7e00:	7b5b      	ldrb	r3, [r3, #13]
    7e02:	4619      	mov	r1, r3
    7e04:	6878      	ldr	r0, [r7, #4]
    7e06:	4b08      	ldr	r3, [pc, #32]	; (7e28 <_spi_load_regs_master+0x90>)
    7e08:	4798      	blx	r3
}
    7e0a:	bf00      	nop
    7e0c:	3708      	adds	r7, #8
    7e0e:	46bd      	mov	sp, r7
    7e10:	bd80      	pop	{r7, pc}
    7e12:	bf00      	nop
    7e14:	00010e80 	.word	0x00010e80
    7e18:	00004a95 	.word	0x00004a95
    7e1c:	00007245 	.word	0x00007245
    7e20:	0000735d 	.word	0x0000735d
    7e24:	0000739d 	.word	0x0000739d
    7e28:	000074d5 	.word	0x000074d5

00007e2c <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7e2c:	b580      	push	{r7, lr}
    7e2e:	b082      	sub	sp, #8
    7e30:	af00      	add	r7, sp, #0
    7e32:	6078      	str	r0, [r7, #4]
    7e34:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    7e36:	687b      	ldr	r3, [r7, #4]
    7e38:	2b00      	cmp	r3, #0
    7e3a:	d004      	beq.n	7e46 <_spi_load_regs_slave+0x1a>
    7e3c:	683b      	ldr	r3, [r7, #0]
    7e3e:	2b00      	cmp	r3, #0
    7e40:	d001      	beq.n	7e46 <_spi_load_regs_slave+0x1a>
    7e42:	2301      	movs	r3, #1
    7e44:	e000      	b.n	7e48 <_spi_load_regs_slave+0x1c>
    7e46:	2300      	movs	r3, #0
    7e48:	f003 0301 	and.w	r3, r3, #1
    7e4c:	b2db      	uxtb	r3, r3
    7e4e:	f640 121d 	movw	r2, #2333	; 0x91d
    7e52:	491a      	ldr	r1, [pc, #104]	; (7ebc <_spi_load_regs_slave+0x90>)
    7e54:	4618      	mov	r0, r3
    7e56:	4b1a      	ldr	r3, [pc, #104]	; (7ec0 <_spi_load_regs_slave+0x94>)
    7e58:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7e5a:	683b      	ldr	r3, [r7, #0]
    7e5c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7e5e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7e62:	f023 0301 	bic.w	r3, r3, #1
    7e66:	4619      	mov	r1, r3
    7e68:	6878      	ldr	r0, [r7, #4]
    7e6a:	4b16      	ldr	r3, [pc, #88]	; (7ec4 <_spi_load_regs_slave+0x98>)
    7e6c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    7e6e:	683b      	ldr	r3, [r7, #0]
    7e70:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    7e72:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    7e76:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    7e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7e7e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    7e82:	4619      	mov	r1, r3
    7e84:	6878      	ldr	r0, [r7, #4]
    7e86:	4b10      	ldr	r3, [pc, #64]	; (7ec8 <_spi_load_regs_slave+0x9c>)
    7e88:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7e8a:	683b      	ldr	r3, [r7, #0]
    7e8c:	689b      	ldr	r3, [r3, #8]
    7e8e:	4619      	mov	r1, r3
    7e90:	6878      	ldr	r0, [r7, #4]
    7e92:	4b0e      	ldr	r3, [pc, #56]	; (7ecc <_spi_load_regs_slave+0xa0>)
    7e94:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7e96:	683b      	ldr	r3, [r7, #0]
    7e98:	7b5b      	ldrb	r3, [r3, #13]
    7e9a:	4619      	mov	r1, r3
    7e9c:	6878      	ldr	r0, [r7, #4]
    7e9e:	4b0c      	ldr	r3, [pc, #48]	; (7ed0 <_spi_load_regs_slave+0xa4>)
    7ea0:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7ea2:	bf00      	nop
    7ea4:	f04f 31ff 	mov.w	r1, #4294967295
    7ea8:	6878      	ldr	r0, [r7, #4]
    7eaa:	4b0a      	ldr	r3, [pc, #40]	; (7ed4 <_spi_load_regs_slave+0xa8>)
    7eac:	4798      	blx	r3
    7eae:	4603      	mov	r3, r0
    7eb0:	2b00      	cmp	r3, #0
    7eb2:	d1f7      	bne.n	7ea4 <_spi_load_regs_slave+0x78>
		;
}
    7eb4:	bf00      	nop
    7eb6:	3708      	adds	r7, #8
    7eb8:	46bd      	mov	sp, r7
    7eba:	bd80      	pop	{r7, pc}
    7ebc:	00010e80 	.word	0x00010e80
    7ec0:	00004a95 	.word	0x00004a95
    7ec4:	00007245 	.word	0x00007245
    7ec8:	0000735d 	.word	0x0000735d
    7ecc:	00007441 	.word	0x00007441
    7ed0:	000074d5 	.word	0x000074d5
    7ed4:	00007009 	.word	0x00007009

00007ed8 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    7ed8:	b580      	push	{r7, lr}
    7eda:	b084      	sub	sp, #16
    7edc:	af00      	add	r7, sp, #0
    7ede:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7ee0:	687b      	ldr	r3, [r7, #4]
    7ee2:	4618      	mov	r0, r3
    7ee4:	4b11      	ldr	r3, [pc, #68]	; (7f2c <_spi_get_regs+0x54>)
    7ee6:	4798      	blx	r3
    7ee8:	4603      	mov	r3, r0
    7eea:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7eec:	2300      	movs	r3, #0
    7eee:	73fb      	strb	r3, [r7, #15]
    7ef0:	e014      	b.n	7f1c <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    7ef2:	7bfa      	ldrb	r2, [r7, #15]
    7ef4:	490e      	ldr	r1, [pc, #56]	; (7f30 <_spi_get_regs+0x58>)
    7ef6:	4613      	mov	r3, r2
    7ef8:	011b      	lsls	r3, r3, #4
    7efa:	4413      	add	r3, r2
    7efc:	440b      	add	r3, r1
    7efe:	3310      	adds	r3, #16
    7f00:	781b      	ldrb	r3, [r3, #0]
    7f02:	7bba      	ldrb	r2, [r7, #14]
    7f04:	429a      	cmp	r2, r3
    7f06:	d106      	bne.n	7f16 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7f08:	7bfa      	ldrb	r2, [r7, #15]
    7f0a:	4613      	mov	r3, r2
    7f0c:	011b      	lsls	r3, r3, #4
    7f0e:	4413      	add	r3, r2
    7f10:	4a07      	ldr	r2, [pc, #28]	; (7f30 <_spi_get_regs+0x58>)
    7f12:	4413      	add	r3, r2
    7f14:	e006      	b.n	7f24 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7f16:	7bfb      	ldrb	r3, [r7, #15]
    7f18:	3301      	adds	r3, #1
    7f1a:	73fb      	strb	r3, [r7, #15]
    7f1c:	7bfb      	ldrb	r3, [r7, #15]
    7f1e:	2b01      	cmp	r3, #1
    7f20:	d9e7      	bls.n	7ef2 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    7f22:	2300      	movs	r3, #0
}
    7f24:	4618      	mov	r0, r3
    7f26:	3710      	adds	r7, #16
    7f28:	46bd      	mov	sp, r7
    7f2a:	bd80      	pop	{r7, pc}
    7f2c:	0000758d 	.word	0x0000758d
    7f30:	00010ebc 	.word	0x00010ebc

00007f34 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7f34:	b580      	push	{r7, lr}
    7f36:	b084      	sub	sp, #16
    7f38:	af00      	add	r7, sp, #0
    7f3a:	6078      	str	r0, [r7, #4]
    7f3c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    7f3e:	683b      	ldr	r3, [r7, #0]
    7f40:	4618      	mov	r0, r3
    7f42:	4b35      	ldr	r3, [pc, #212]	; (8018 <_spi_m_sync_init+0xe4>)
    7f44:	4798      	blx	r3
    7f46:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7f48:	687b      	ldr	r3, [r7, #4]
    7f4a:	2b00      	cmp	r3, #0
    7f4c:	d004      	beq.n	7f58 <_spi_m_sync_init+0x24>
    7f4e:	683b      	ldr	r3, [r7, #0]
    7f50:	2b00      	cmp	r3, #0
    7f52:	d001      	beq.n	7f58 <_spi_m_sync_init+0x24>
    7f54:	2301      	movs	r3, #1
    7f56:	e000      	b.n	7f5a <_spi_m_sync_init+0x26>
    7f58:	2300      	movs	r3, #0
    7f5a:	f003 0301 	and.w	r3, r3, #1
    7f5e:	b2db      	uxtb	r3, r3
    7f60:	f640 123f 	movw	r2, #2367	; 0x93f
    7f64:	492d      	ldr	r1, [pc, #180]	; (801c <_spi_m_sync_init+0xe8>)
    7f66:	4618      	mov	r0, r3
    7f68:	4b2d      	ldr	r3, [pc, #180]	; (8020 <_spi_m_sync_init+0xec>)
    7f6a:	4798      	blx	r3

	if (regs == NULL) {
    7f6c:	68fb      	ldr	r3, [r7, #12]
    7f6e:	2b00      	cmp	r3, #0
    7f70:	d102      	bne.n	7f78 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    7f72:	f06f 030c 	mvn.w	r3, #12
    7f76:	e04a      	b.n	800e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7f78:	2101      	movs	r1, #1
    7f7a:	6838      	ldr	r0, [r7, #0]
    7f7c:	4b29      	ldr	r3, [pc, #164]	; (8024 <_spi_m_sync_init+0xf0>)
    7f7e:	4798      	blx	r3
    7f80:	4603      	mov	r3, r0
    7f82:	f083 0301 	eor.w	r3, r3, #1
    7f86:	b2db      	uxtb	r3, r3
    7f88:	2b00      	cmp	r3, #0
    7f8a:	d019      	beq.n	7fc0 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7f8c:	68fb      	ldr	r3, [r7, #12]
    7f8e:	681b      	ldr	r3, [r3, #0]
    7f90:	f003 031c 	and.w	r3, r3, #28
    7f94:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7f96:	2102      	movs	r1, #2
    7f98:	6838      	ldr	r0, [r7, #0]
    7f9a:	4b23      	ldr	r3, [pc, #140]	; (8028 <_spi_m_sync_init+0xf4>)
    7f9c:	4798      	blx	r3
    7f9e:	4603      	mov	r3, r0
    7fa0:	2b00      	cmp	r3, #0
    7fa2:	d006      	beq.n	7fb2 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7fa4:	6838      	ldr	r0, [r7, #0]
    7fa6:	4b21      	ldr	r3, [pc, #132]	; (802c <_spi_m_sync_init+0xf8>)
    7fa8:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    7faa:	2102      	movs	r1, #2
    7fac:	6838      	ldr	r0, [r7, #0]
    7fae:	4b20      	ldr	r3, [pc, #128]	; (8030 <_spi_m_sync_init+0xfc>)
    7fb0:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7fb2:	68bb      	ldr	r3, [r7, #8]
    7fb4:	f043 0301 	orr.w	r3, r3, #1
    7fb8:	4619      	mov	r1, r3
    7fba:	6838      	ldr	r0, [r7, #0]
    7fbc:	4b1d      	ldr	r3, [pc, #116]	; (8034 <_spi_m_sync_init+0x100>)
    7fbe:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    7fc0:	2101      	movs	r1, #1
    7fc2:	6838      	ldr	r0, [r7, #0]
    7fc4:	4b1a      	ldr	r3, [pc, #104]	; (8030 <_spi_m_sync_init+0xfc>)
    7fc6:	4798      	blx	r3

	dev->prvt = hw;
    7fc8:	687b      	ldr	r3, [r7, #4]
    7fca:	683a      	ldr	r2, [r7, #0]
    7fcc:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7fce:	68fb      	ldr	r3, [r7, #12]
    7fd0:	681b      	ldr	r3, [r3, #0]
    7fd2:	f003 031c 	and.w	r3, r3, #28
    7fd6:	2b08      	cmp	r3, #8
    7fd8:	d104      	bne.n	7fe4 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    7fda:	68f9      	ldr	r1, [r7, #12]
    7fdc:	6838      	ldr	r0, [r7, #0]
    7fde:	4b16      	ldr	r3, [pc, #88]	; (8038 <_spi_m_sync_init+0x104>)
    7fe0:	4798      	blx	r3
    7fe2:	e003      	b.n	7fec <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7fe4:	68f9      	ldr	r1, [r7, #12]
    7fe6:	6838      	ldr	r0, [r7, #0]
    7fe8:	4b14      	ldr	r3, [pc, #80]	; (803c <_spi_m_sync_init+0x108>)
    7fea:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7fec:	68fb      	ldr	r3, [r7, #12]
    7fee:	685b      	ldr	r3, [r3, #4]
    7ff0:	f003 0307 	and.w	r3, r3, #7
    7ff4:	2b00      	cmp	r3, #0
    7ff6:	d101      	bne.n	7ffc <_spi_m_sync_init+0xc8>
    7ff8:	2201      	movs	r2, #1
    7ffa:	e000      	b.n	7ffe <_spi_m_sync_init+0xca>
    7ffc:	2202      	movs	r2, #2
    7ffe:	687b      	ldr	r3, [r7, #4]
    8000:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    8002:	68fb      	ldr	r3, [r7, #12]
    8004:	89db      	ldrh	r3, [r3, #14]
    8006:	b29a      	uxth	r2, r3
    8008:	687b      	ldr	r3, [r7, #4]
    800a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    800c:	2300      	movs	r3, #0
}
    800e:	4618      	mov	r0, r3
    8010:	3710      	adds	r7, #16
    8012:	46bd      	mov	sp, r7
    8014:	bd80      	pop	{r7, pc}
    8016:	bf00      	nop
    8018:	00007ed9 	.word	0x00007ed9
    801c:	00010e80 	.word	0x00010e80
    8020:	00004a95 	.word	0x00004a95
    8024:	00007009 	.word	0x00007009
    8028:	00007215 	.word	0x00007215
    802c:	000071ed 	.word	0x000071ed
    8030:	00006fe5 	.word	0x00006fe5
    8034:	00007245 	.word	0x00007245
    8038:	00007e2d 	.word	0x00007e2d
    803c:	00007d99 	.word	0x00007d99

00008040 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    8040:	b580      	push	{r7, lr}
    8042:	b082      	sub	sp, #8
    8044:	af00      	add	r7, sp, #0
    8046:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    8048:	bf00      	nop
    804a:	2103      	movs	r1, #3
    804c:	6878      	ldr	r0, [r7, #4]
    804e:	4b06      	ldr	r3, [pc, #24]	; (8068 <_spi_wait_bus_idle+0x28>)
    8050:	4798      	blx	r3
    8052:	4603      	mov	r3, r0
    8054:	2b00      	cmp	r3, #0
    8056:	d0f8      	beq.n	804a <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    8058:	2103      	movs	r1, #3
    805a:	6878      	ldr	r0, [r7, #4]
    805c:	4b03      	ldr	r3, [pc, #12]	; (806c <_spi_wait_bus_idle+0x2c>)
    805e:	4798      	blx	r3
}
    8060:	bf00      	nop
    8062:	3708      	adds	r7, #8
    8064:	46bd      	mov	sp, r7
    8066:	bd80      	pop	{r7, pc}
    8068:	0000707f 	.word	0x0000707f
    806c:	000070c1 	.word	0x000070c1

00008070 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    8070:	b580      	push	{r7, lr}
    8072:	b086      	sub	sp, #24
    8074:	af00      	add	r7, sp, #0
    8076:	60f8      	str	r0, [r7, #12]
    8078:	60b9      	str	r1, [r7, #8]
    807a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    807c:	68bb      	ldr	r3, [r7, #8]
    807e:	f003 0304 	and.w	r3, r3, #4
    8082:	2b00      	cmp	r3, #0
    8084:	d101      	bne.n	808a <_spi_rx_check_and_receive+0x1a>
		return false;
    8086:	2300      	movs	r3, #0
    8088:	e022      	b.n	80d0 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    808a:	68f8      	ldr	r0, [r7, #12]
    808c:	4b12      	ldr	r3, [pc, #72]	; (80d8 <_spi_rx_check_and_receive+0x68>)
    808e:	4798      	blx	r3
    8090:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    8092:	687b      	ldr	r3, [r7, #4]
    8094:	685b      	ldr	r3, [r3, #4]
    8096:	2b00      	cmp	r3, #0
    8098:	d014      	beq.n	80c4 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    809a:	687b      	ldr	r3, [r7, #4]
    809c:	685b      	ldr	r3, [r3, #4]
    809e:	1c59      	adds	r1, r3, #1
    80a0:	687a      	ldr	r2, [r7, #4]
    80a2:	6051      	str	r1, [r2, #4]
    80a4:	697a      	ldr	r2, [r7, #20]
    80a6:	b2d2      	uxtb	r2, r2
    80a8:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    80aa:	687b      	ldr	r3, [r7, #4]
    80ac:	7c1b      	ldrb	r3, [r3, #16]
    80ae:	2b01      	cmp	r3, #1
    80b0:	d908      	bls.n	80c4 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    80b2:	687b      	ldr	r3, [r7, #4]
    80b4:	685b      	ldr	r3, [r3, #4]
    80b6:	1c59      	adds	r1, r3, #1
    80b8:	687a      	ldr	r2, [r7, #4]
    80ba:	6051      	str	r1, [r2, #4]
    80bc:	697a      	ldr	r2, [r7, #20]
    80be:	0a12      	lsrs	r2, r2, #8
    80c0:	b2d2      	uxtb	r2, r2
    80c2:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    80c4:	687b      	ldr	r3, [r7, #4]
    80c6:	68db      	ldr	r3, [r3, #12]
    80c8:	1c5a      	adds	r2, r3, #1
    80ca:	687b      	ldr	r3, [r7, #4]
    80cc:	60da      	str	r2, [r3, #12]

	return true;
    80ce:	2301      	movs	r3, #1
}
    80d0:	4618      	mov	r0, r3
    80d2:	3718      	adds	r7, #24
    80d4:	46bd      	mov	sp, r7
    80d6:	bd80      	pop	{r7, pc}
    80d8:	000074bd 	.word	0x000074bd

000080dc <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    80dc:	b580      	push	{r7, lr}
    80de:	b086      	sub	sp, #24
    80e0:	af00      	add	r7, sp, #0
    80e2:	60f8      	str	r0, [r7, #12]
    80e4:	60b9      	str	r1, [r7, #8]
    80e6:	607a      	str	r2, [r7, #4]
    80e8:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    80ea:	68bb      	ldr	r3, [r7, #8]
    80ec:	f003 0301 	and.w	r3, r3, #1
    80f0:	2b00      	cmp	r3, #0
    80f2:	d028      	beq.n	8146 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    80f4:	687b      	ldr	r3, [r7, #4]
    80f6:	681b      	ldr	r3, [r3, #0]
    80f8:	2b00      	cmp	r3, #0
    80fa:	d018      	beq.n	812e <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    80fc:	687b      	ldr	r3, [r7, #4]
    80fe:	681b      	ldr	r3, [r3, #0]
    8100:	1c59      	adds	r1, r3, #1
    8102:	687a      	ldr	r2, [r7, #4]
    8104:	6011      	str	r1, [r2, #0]
    8106:	781b      	ldrb	r3, [r3, #0]
    8108:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    810a:	687b      	ldr	r3, [r7, #4]
    810c:	7c1b      	ldrb	r3, [r3, #16]
    810e:	2b01      	cmp	r3, #1
    8110:	d90f      	bls.n	8132 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    8112:	687b      	ldr	r3, [r7, #4]
    8114:	681b      	ldr	r3, [r3, #0]
    8116:	781b      	ldrb	r3, [r3, #0]
    8118:	021b      	lsls	r3, r3, #8
    811a:	461a      	mov	r2, r3
    811c:	697b      	ldr	r3, [r7, #20]
    811e:	4313      	orrs	r3, r2
    8120:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    8122:	687b      	ldr	r3, [r7, #4]
    8124:	681b      	ldr	r3, [r3, #0]
    8126:	1c5a      	adds	r2, r3, #1
    8128:	687b      	ldr	r3, [r7, #4]
    812a:	601a      	str	r2, [r3, #0]
    812c:	e001      	b.n	8132 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    812e:	887b      	ldrh	r3, [r7, #2]
    8130:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    8132:	687b      	ldr	r3, [r7, #4]
    8134:	689b      	ldr	r3, [r3, #8]
    8136:	1c5a      	adds	r2, r3, #1
    8138:	687b      	ldr	r3, [r7, #4]
    813a:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    813c:	6979      	ldr	r1, [r7, #20]
    813e:	68f8      	ldr	r0, [r7, #12]
    8140:	4b03      	ldr	r3, [pc, #12]	; (8150 <_spi_tx_check_and_send+0x74>)
    8142:	4798      	blx	r3
    8144:	e000      	b.n	8148 <_spi_tx_check_and_send+0x6c>
		return;
    8146:	bf00      	nop
}
    8148:	3718      	adds	r7, #24
    814a:	46bd      	mov	sp, r7
    814c:	bd80      	pop	{r7, pc}
    814e:	bf00      	nop
    8150:	000074a1 	.word	0x000074a1

00008154 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    8154:	b580      	push	{r7, lr}
    8156:	b082      	sub	sp, #8
    8158:	af00      	add	r7, sp, #0
    815a:	6078      	str	r0, [r7, #4]
    815c:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    815e:	687b      	ldr	r3, [r7, #4]
    8160:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8164:	2b00      	cmp	r3, #0
    8166:	d00b      	beq.n	8180 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    8168:	f64f 71ff 	movw	r1, #65535	; 0xffff
    816c:	6838      	ldr	r0, [r7, #0]
    816e:	4b07      	ldr	r3, [pc, #28]	; (818c <_spi_err_check+0x38>)
    8170:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    8172:	2180      	movs	r1, #128	; 0x80
    8174:	6838      	ldr	r0, [r7, #0]
    8176:	4b06      	ldr	r3, [pc, #24]	; (8190 <_spi_err_check+0x3c>)
    8178:	4798      	blx	r3
		return ERR_OVERFLOW;
    817a:	f06f 0312 	mvn.w	r3, #18
    817e:	e000      	b.n	8182 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    8180:	2300      	movs	r3, #0
}
    8182:	4618      	mov	r0, r3
    8184:	3708      	adds	r7, #8
    8186:	46bd      	mov	sp, r7
    8188:	bd80      	pop	{r7, pc}
    818a:	bf00      	nop
    818c:	000074f5 	.word	0x000074f5
    8190:	000070c1 	.word	0x000070c1

00008194 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    8194:	b590      	push	{r4, r7, lr}
    8196:	b08b      	sub	sp, #44	; 0x2c
    8198:	af00      	add	r7, sp, #0
    819a:	6078      	str	r0, [r7, #4]
    819c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    819e:	687b      	ldr	r3, [r7, #4]
    81a0:	681b      	ldr	r3, [r3, #0]
    81a2:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    81a4:	2300      	movs	r3, #0
    81a6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    81a8:	683b      	ldr	r3, [r7, #0]
    81aa:	681b      	ldr	r3, [r3, #0]
    81ac:	60bb      	str	r3, [r7, #8]
    81ae:	683b      	ldr	r3, [r7, #0]
    81b0:	685b      	ldr	r3, [r3, #4]
    81b2:	60fb      	str	r3, [r7, #12]
    81b4:	2300      	movs	r3, #0
    81b6:	613b      	str	r3, [r7, #16]
    81b8:	2300      	movs	r3, #0
    81ba:	617b      	str	r3, [r7, #20]
    81bc:	687b      	ldr	r3, [r7, #4]
    81be:	791b      	ldrb	r3, [r3, #4]
    81c0:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    81c2:	687b      	ldr	r3, [r7, #4]
    81c4:	2b00      	cmp	r3, #0
    81c6:	d004      	beq.n	81d2 <_spi_m_sync_trans+0x3e>
    81c8:	6a3b      	ldr	r3, [r7, #32]
    81ca:	2b00      	cmp	r3, #0
    81cc:	d001      	beq.n	81d2 <_spi_m_sync_trans+0x3e>
    81ce:	2301      	movs	r3, #1
    81d0:	e000      	b.n	81d4 <_spi_m_sync_trans+0x40>
    81d2:	2300      	movs	r3, #0
    81d4:	f003 0301 	and.w	r3, r3, #1
    81d8:	b2db      	uxtb	r3, r3
    81da:	f640 22a3 	movw	r2, #2723	; 0xaa3
    81de:	492b      	ldr	r1, [pc, #172]	; (828c <_spi_m_sync_trans+0xf8>)
    81e0:	4618      	mov	r0, r3
    81e2:	4b2b      	ldr	r3, [pc, #172]	; (8290 <_spi_m_sync_trans+0xfc>)
    81e4:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    81e6:	2107      	movs	r1, #7
    81e8:	6a38      	ldr	r0, [r7, #32]
    81ea:	4b2a      	ldr	r3, [pc, #168]	; (8294 <_spi_m_sync_trans+0x100>)
    81ec:	4798      	blx	r3
    81ee:	4603      	mov	r3, r0
    81f0:	2b00      	cmp	r3, #0
    81f2:	d002      	beq.n	81fa <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    81f4:	f06f 0303 	mvn.w	r3, #3
    81f8:	e043      	b.n	8282 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    81fa:	6a38      	ldr	r0, [r7, #32]
    81fc:	4b26      	ldr	r3, [pc, #152]	; (8298 <_spi_m_sync_trans+0x104>)
    81fe:	4798      	blx	r3
    8200:	4603      	mov	r3, r0
    8202:	f083 0301 	eor.w	r3, r3, #1
    8206:	b2db      	uxtb	r3, r3
    8208:	2b00      	cmp	r3, #0
    820a:	d002      	beq.n	8212 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    820c:	f06f 0313 	mvn.w	r3, #19
    8210:	e037      	b.n	8282 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    8212:	6a38      	ldr	r0, [r7, #32]
    8214:	4b21      	ldr	r3, [pc, #132]	; (829c <_spi_m_sync_trans+0x108>)
    8216:	4798      	blx	r3
    8218:	4603      	mov	r3, r0
    821a:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    821c:	f107 0308 	add.w	r3, r7, #8
    8220:	461a      	mov	r2, r3
    8222:	69f9      	ldr	r1, [r7, #28]
    8224:	6a38      	ldr	r0, [r7, #32]
    8226:	4b1e      	ldr	r3, [pc, #120]	; (82a0 <_spi_m_sync_trans+0x10c>)
    8228:	4798      	blx	r3
    822a:	4603      	mov	r3, r0
    822c:	f083 0301 	eor.w	r3, r3, #1
    8230:	b2db      	uxtb	r3, r3
    8232:	2b00      	cmp	r3, #0
    8234:	d00b      	beq.n	824e <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    8236:	697a      	ldr	r2, [r7, #20]
    8238:	693b      	ldr	r3, [r7, #16]
    823a:	429a      	cmp	r2, r3
    823c:	d307      	bcc.n	824e <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    823e:	687b      	ldr	r3, [r7, #4]
    8240:	88db      	ldrh	r3, [r3, #6]
    8242:	f107 0208 	add.w	r2, r7, #8
    8246:	69f9      	ldr	r1, [r7, #28]
    8248:	6a38      	ldr	r0, [r7, #32]
    824a:	4c16      	ldr	r4, [pc, #88]	; (82a4 <_spi_m_sync_trans+0x110>)
    824c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    824e:	6a39      	ldr	r1, [r7, #32]
    8250:	69f8      	ldr	r0, [r7, #28]
    8252:	4b15      	ldr	r3, [pc, #84]	; (82a8 <_spi_m_sync_trans+0x114>)
    8254:	4798      	blx	r3
    8256:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    8258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    825a:	2b00      	cmp	r3, #0
    825c:	db0c      	blt.n	8278 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    825e:	693a      	ldr	r2, [r7, #16]
    8260:	683b      	ldr	r3, [r7, #0]
    8262:	689b      	ldr	r3, [r3, #8]
    8264:	429a      	cmp	r2, r3
    8266:	d3d4      	bcc.n	8212 <_spi_m_sync_trans+0x7e>
    8268:	697a      	ldr	r2, [r7, #20]
    826a:	683b      	ldr	r3, [r7, #0]
    826c:	689b      	ldr	r3, [r3, #8]
    826e:	429a      	cmp	r2, r3
    8270:	d3cf      	bcc.n	8212 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    8272:	693b      	ldr	r3, [r7, #16]
    8274:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    8276:	e000      	b.n	827a <_spi_m_sync_trans+0xe6>
			break;
    8278:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    827a:	6a38      	ldr	r0, [r7, #32]
    827c:	4b0b      	ldr	r3, [pc, #44]	; (82ac <_spi_m_sync_trans+0x118>)
    827e:	4798      	blx	r3

	return rc;
    8280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    8282:	4618      	mov	r0, r3
    8284:	372c      	adds	r7, #44	; 0x2c
    8286:	46bd      	mov	sp, r7
    8288:	bd90      	pop	{r4, r7, pc}
    828a:	bf00      	nop
    828c:	00010e80 	.word	0x00010e80
    8290:	00004a95 	.word	0x00004a95
    8294:	00007009 	.word	0x00007009
    8298:	000071b5 	.word	0x000071b5
    829c:	000070a7 	.word	0x000070a7
    82a0:	00008071 	.word	0x00008071
    82a4:	000080dd 	.word	0x000080dd
    82a8:	00008155 	.word	0x00008155
    82ac:	00008041 	.word	0x00008041

000082b0 <__NVIC_EnableIRQ>:
{
    82b0:	b480      	push	{r7}
    82b2:	b083      	sub	sp, #12
    82b4:	af00      	add	r7, sp, #0
    82b6:	4603      	mov	r3, r0
    82b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    82ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82be:	2b00      	cmp	r3, #0
    82c0:	db0b      	blt.n	82da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82c2:	4909      	ldr	r1, [pc, #36]	; (82e8 <__NVIC_EnableIRQ+0x38>)
    82c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82c8:	095b      	lsrs	r3, r3, #5
    82ca:	88fa      	ldrh	r2, [r7, #6]
    82cc:	f002 021f 	and.w	r2, r2, #31
    82d0:	2001      	movs	r0, #1
    82d2:	fa00 f202 	lsl.w	r2, r0, r2
    82d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    82da:	bf00      	nop
    82dc:	370c      	adds	r7, #12
    82de:	46bd      	mov	sp, r7
    82e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    82e4:	4770      	bx	lr
    82e6:	bf00      	nop
    82e8:	e000e100 	.word	0xe000e100

000082ec <__NVIC_DisableIRQ>:
{
    82ec:	b480      	push	{r7}
    82ee:	b083      	sub	sp, #12
    82f0:	af00      	add	r7, sp, #0
    82f2:	4603      	mov	r3, r0
    82f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    82f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82fa:	2b00      	cmp	r3, #0
    82fc:	db10      	blt.n	8320 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82fe:	490b      	ldr	r1, [pc, #44]	; (832c <__NVIC_DisableIRQ+0x40>)
    8300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8304:	095b      	lsrs	r3, r3, #5
    8306:	88fa      	ldrh	r2, [r7, #6]
    8308:	f002 021f 	and.w	r2, r2, #31
    830c:	2001      	movs	r0, #1
    830e:	fa00 f202 	lsl.w	r2, r0, r2
    8312:	3320      	adds	r3, #32
    8314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8318:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    831c:	f3bf 8f6f 	isb	sy
}
    8320:	bf00      	nop
    8322:	370c      	adds	r7, #12
    8324:	46bd      	mov	sp, r7
    8326:	f85d 7b04 	ldr.w	r7, [sp], #4
    832a:	4770      	bx	lr
    832c:	e000e100 	.word	0xe000e100

00008330 <__NVIC_ClearPendingIRQ>:
{
    8330:	b480      	push	{r7}
    8332:	b083      	sub	sp, #12
    8334:	af00      	add	r7, sp, #0
    8336:	4603      	mov	r3, r0
    8338:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    833a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    833e:	2b00      	cmp	r3, #0
    8340:	db0c      	blt.n	835c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8342:	4909      	ldr	r1, [pc, #36]	; (8368 <__NVIC_ClearPendingIRQ+0x38>)
    8344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8348:	095b      	lsrs	r3, r3, #5
    834a:	88fa      	ldrh	r2, [r7, #6]
    834c:	f002 021f 	and.w	r2, r2, #31
    8350:	2001      	movs	r0, #1
    8352:	fa00 f202 	lsl.w	r2, r0, r2
    8356:	3360      	adds	r3, #96	; 0x60
    8358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    835c:	bf00      	nop
    835e:	370c      	adds	r7, #12
    8360:	46bd      	mov	sp, r7
    8362:	f85d 7b04 	ldr.w	r7, [sp], #4
    8366:	4770      	bx	lr
    8368:	e000e100 	.word	0xe000e100

0000836c <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    836c:	b480      	push	{r7}
    836e:	b083      	sub	sp, #12
    8370:	af00      	add	r7, sp, #0
    8372:	6078      	str	r0, [r7, #4]
    8374:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    8376:	bf00      	nop
    8378:	687b      	ldr	r3, [r7, #4]
    837a:	689a      	ldr	r2, [r3, #8]
    837c:	683b      	ldr	r3, [r7, #0]
    837e:	4013      	ands	r3, r2
    8380:	2b00      	cmp	r3, #0
    8382:	d1f9      	bne.n	8378 <hri_tcc_wait_for_sync+0xc>
	};
}
    8384:	bf00      	nop
    8386:	370c      	adds	r7, #12
    8388:	46bd      	mov	sp, r7
    838a:	f85d 7b04 	ldr.w	r7, [sp], #4
    838e:	4770      	bx	lr

00008390 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    8390:	b480      	push	{r7}
    8392:	b083      	sub	sp, #12
    8394:	af00      	add	r7, sp, #0
    8396:	6078      	str	r0, [r7, #4]
    8398:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    839a:	687b      	ldr	r3, [r7, #4]
    839c:	689a      	ldr	r2, [r3, #8]
    839e:	683b      	ldr	r3, [r7, #0]
    83a0:	4013      	ands	r3, r2
    83a2:	2b00      	cmp	r3, #0
    83a4:	bf14      	ite	ne
    83a6:	2301      	movne	r3, #1
    83a8:	2300      	moveq	r3, #0
    83aa:	b2db      	uxtb	r3, r3
}
    83ac:	4618      	mov	r0, r3
    83ae:	370c      	adds	r7, #12
    83b0:	46bd      	mov	sp, r7
    83b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83b6:	4770      	bx	lr

000083b8 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    83b8:	b480      	push	{r7}
    83ba:	b083      	sub	sp, #12
    83bc:	af00      	add	r7, sp, #0
    83be:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    83c0:	687b      	ldr	r3, [r7, #4]
    83c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    83c4:	f003 0301 	and.w	r3, r3, #1
    83c8:	2b00      	cmp	r3, #0
    83ca:	bf14      	ite	ne
    83cc:	2301      	movne	r3, #1
    83ce:	2300      	moveq	r3, #0
    83d0:	b2db      	uxtb	r3, r3
}
    83d2:	4618      	mov	r0, r3
    83d4:	370c      	adds	r7, #12
    83d6:	46bd      	mov	sp, r7
    83d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83dc:	4770      	bx	lr

000083de <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    83de:	b480      	push	{r7}
    83e0:	b083      	sub	sp, #12
    83e2:	af00      	add	r7, sp, #0
    83e4:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    83e6:	687b      	ldr	r3, [r7, #4]
    83e8:	2201      	movs	r2, #1
    83ea:	62da      	str	r2, [r3, #44]	; 0x2c
}
    83ec:	bf00      	nop
    83ee:	370c      	adds	r7, #12
    83f0:	46bd      	mov	sp, r7
    83f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83f6:	4770      	bx	lr

000083f8 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    83f8:	b480      	push	{r7}
    83fa:	b083      	sub	sp, #12
    83fc:	af00      	add	r7, sp, #0
    83fe:	6078      	str	r0, [r7, #4]
    8400:	460b      	mov	r3, r1
    8402:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    8404:	687b      	ldr	r3, [r7, #4]
    8406:	78fa      	ldrb	r2, [r7, #3]
    8408:	715a      	strb	r2, [r3, #5]
}
    840a:	bf00      	nop
    840c:	370c      	adds	r7, #12
    840e:	46bd      	mov	sp, r7
    8410:	f85d 7b04 	ldr.w	r7, [sp], #4
    8414:	4770      	bx	lr

00008416 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    8416:	b480      	push	{r7}
    8418:	b083      	sub	sp, #12
    841a:	af00      	add	r7, sp, #0
    841c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    841e:	687b      	ldr	r3, [r7, #4]
    8420:	2201      	movs	r2, #1
    8422:	629a      	str	r2, [r3, #40]	; 0x28
}
    8424:	bf00      	nop
    8426:	370c      	adds	r7, #12
    8428:	46bd      	mov	sp, r7
    842a:	f85d 7b04 	ldr.w	r7, [sp], #4
    842e:	4770      	bx	lr

00008430 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8430:	b580      	push	{r7, lr}
    8432:	b082      	sub	sp, #8
    8434:	af00      	add	r7, sp, #0
    8436:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    8438:	687b      	ldr	r3, [r7, #4]
    843a:	681b      	ldr	r3, [r3, #0]
    843c:	f043 0201 	orr.w	r2, r3, #1
    8440:	687b      	ldr	r3, [r7, #4]
    8442:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    8444:	2101      	movs	r1, #1
    8446:	6878      	ldr	r0, [r7, #4]
    8448:	4b02      	ldr	r3, [pc, #8]	; (8454 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    844a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    844c:	bf00      	nop
    844e:	3708      	adds	r7, #8
    8450:	46bd      	mov	sp, r7
    8452:	bd80      	pop	{r7, pc}
    8454:	0000836d 	.word	0x0000836d

00008458 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8458:	b580      	push	{r7, lr}
    845a:	b082      	sub	sp, #8
    845c:	af00      	add	r7, sp, #0
    845e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    8460:	687b      	ldr	r3, [r7, #4]
    8462:	681b      	ldr	r3, [r3, #0]
    8464:	f043 0202 	orr.w	r2, r3, #2
    8468:	687b      	ldr	r3, [r7, #4]
    846a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    846c:	2103      	movs	r1, #3
    846e:	6878      	ldr	r0, [r7, #4]
    8470:	4b02      	ldr	r3, [pc, #8]	; (847c <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    8472:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8474:	bf00      	nop
    8476:	3708      	adds	r7, #8
    8478:	46bd      	mov	sp, r7
    847a:	bd80      	pop	{r7, pc}
    847c:	0000836d 	.word	0x0000836d

00008480 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8480:	b580      	push	{r7, lr}
    8482:	b084      	sub	sp, #16
    8484:	af00      	add	r7, sp, #0
    8486:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8488:	2103      	movs	r1, #3
    848a:	6878      	ldr	r0, [r7, #4]
    848c:	4b09      	ldr	r3, [pc, #36]	; (84b4 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    848e:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    8490:	687b      	ldr	r3, [r7, #4]
    8492:	681b      	ldr	r3, [r3, #0]
    8494:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    8496:	68fb      	ldr	r3, [r7, #12]
    8498:	085b      	lsrs	r3, r3, #1
    849a:	f003 0301 	and.w	r3, r3, #1
    849e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    84a0:	68fb      	ldr	r3, [r7, #12]
    84a2:	2b00      	cmp	r3, #0
    84a4:	bf14      	ite	ne
    84a6:	2301      	movne	r3, #1
    84a8:	2300      	moveq	r3, #0
    84aa:	b2db      	uxtb	r3, r3
}
    84ac:	4618      	mov	r0, r3
    84ae:	3710      	adds	r7, #16
    84b0:	46bd      	mov	sp, r7
    84b2:	bd80      	pop	{r7, pc}
    84b4:	0000836d 	.word	0x0000836d

000084b8 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    84b8:	b580      	push	{r7, lr}
    84ba:	b082      	sub	sp, #8
    84bc:	af00      	add	r7, sp, #0
    84be:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    84c0:	687b      	ldr	r3, [r7, #4]
    84c2:	681b      	ldr	r3, [r3, #0]
    84c4:	f023 0202 	bic.w	r2, r3, #2
    84c8:	687b      	ldr	r3, [r7, #4]
    84ca:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    84cc:	2103      	movs	r1, #3
    84ce:	6878      	ldr	r0, [r7, #4]
    84d0:	4b02      	ldr	r3, [pc, #8]	; (84dc <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    84d2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    84d4:	bf00      	nop
    84d6:	3708      	adds	r7, #8
    84d8:	46bd      	mov	sp, r7
    84da:	bd80      	pop	{r7, pc}
    84dc:	0000836d 	.word	0x0000836d

000084e0 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    84e0:	b580      	push	{r7, lr}
    84e2:	b084      	sub	sp, #16
    84e4:	af00      	add	r7, sp, #0
    84e6:	6078      	str	r0, [r7, #4]
    84e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    84ea:	2103      	movs	r1, #3
    84ec:	6878      	ldr	r0, [r7, #4]
    84ee:	4b07      	ldr	r3, [pc, #28]	; (850c <hri_tcc_get_CTRLA_reg+0x2c>)
    84f0:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    84f2:	687b      	ldr	r3, [r7, #4]
    84f4:	681b      	ldr	r3, [r3, #0]
    84f6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    84f8:	68fa      	ldr	r2, [r7, #12]
    84fa:	683b      	ldr	r3, [r7, #0]
    84fc:	4013      	ands	r3, r2
    84fe:	60fb      	str	r3, [r7, #12]
	return tmp;
    8500:	68fb      	ldr	r3, [r7, #12]
}
    8502:	4618      	mov	r0, r3
    8504:	3710      	adds	r7, #16
    8506:	46bd      	mov	sp, r7
    8508:	bd80      	pop	{r7, pc}
    850a:	bf00      	nop
    850c:	0000836d 	.word	0x0000836d

00008510 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    8510:	b580      	push	{r7, lr}
    8512:	b082      	sub	sp, #8
    8514:	af00      	add	r7, sp, #0
    8516:	6078      	str	r0, [r7, #4]
    8518:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    851a:	687b      	ldr	r3, [r7, #4]
    851c:	683a      	ldr	r2, [r7, #0]
    851e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8520:	2103      	movs	r1, #3
    8522:	6878      	ldr	r0, [r7, #4]
    8524:	4b02      	ldr	r3, [pc, #8]	; (8530 <hri_tcc_write_CTRLA_reg+0x20>)
    8526:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8528:	bf00      	nop
    852a:	3708      	adds	r7, #8
    852c:	46bd      	mov	sp, r7
    852e:	bd80      	pop	{r7, pc}
    8530:	0000836d 	.word	0x0000836d

00008534 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    8534:	b480      	push	{r7}
    8536:	b083      	sub	sp, #12
    8538:	af00      	add	r7, sp, #0
    853a:	6078      	str	r0, [r7, #4]
    853c:	460b      	mov	r3, r1
    853e:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    8540:	687b      	ldr	r3, [r7, #4]
    8542:	78fa      	ldrb	r2, [r7, #3]
    8544:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    8546:	bf00      	nop
    8548:	370c      	adds	r7, #12
    854a:	46bd      	mov	sp, r7
    854c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8550:	4770      	bx	lr

00008552 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    8552:	b480      	push	{r7}
    8554:	b083      	sub	sp, #12
    8556:	af00      	add	r7, sp, #0
    8558:	6078      	str	r0, [r7, #4]
    855a:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    855c:	687b      	ldr	r3, [r7, #4]
    855e:	683a      	ldr	r2, [r7, #0]
    8560:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    8562:	bf00      	nop
    8564:	370c      	adds	r7, #12
    8566:	46bd      	mov	sp, r7
    8568:	f85d 7b04 	ldr.w	r7, [sp], #4
    856c:	4770      	bx	lr
	...

00008570 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    8570:	b580      	push	{r7, lr}
    8572:	b082      	sub	sp, #8
    8574:	af00      	add	r7, sp, #0
    8576:	6078      	str	r0, [r7, #4]
    8578:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    857a:	687b      	ldr	r3, [r7, #4]
    857c:	683a      	ldr	r2, [r7, #0]
    857e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    8580:	2180      	movs	r1, #128	; 0x80
    8582:	6878      	ldr	r0, [r7, #4]
    8584:	4b02      	ldr	r3, [pc, #8]	; (8590 <hri_tcc_write_PER_reg+0x20>)
    8586:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8588:	bf00      	nop
    858a:	3708      	adds	r7, #8
    858c:	46bd      	mov	sp, r7
    858e:	bd80      	pop	{r7, pc}
    8590:	0000836d 	.word	0x0000836d

00008594 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    8594:	b580      	push	{r7, lr}
    8596:	b082      	sub	sp, #8
    8598:	af00      	add	r7, sp, #0
    859a:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    859c:	2180      	movs	r1, #128	; 0x80
    859e:	6878      	ldr	r0, [r7, #4]
    85a0:	4b03      	ldr	r3, [pc, #12]	; (85b0 <hri_tcc_read_PER_reg+0x1c>)
    85a2:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    85a4:	687b      	ldr	r3, [r7, #4]
    85a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    85a8:	4618      	mov	r0, r3
    85aa:	3708      	adds	r7, #8
    85ac:	46bd      	mov	sp, r7
    85ae:	bd80      	pop	{r7, pc}
    85b0:	0000836d 	.word	0x0000836d

000085b4 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    85b4:	b480      	push	{r7}
    85b6:	b083      	sub	sp, #12
    85b8:	af00      	add	r7, sp, #0
    85ba:	6078      	str	r0, [r7, #4]
    85bc:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    85be:	687b      	ldr	r3, [r7, #4]
    85c0:	4a09      	ldr	r2, [pc, #36]	; (85e8 <_tcc_init_irq_param+0x34>)
    85c2:	4293      	cmp	r3, r2
    85c4:	d102      	bne.n	85cc <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    85c6:	4a09      	ldr	r2, [pc, #36]	; (85ec <_tcc_init_irq_param+0x38>)
    85c8:	683b      	ldr	r3, [r7, #0]
    85ca:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    85cc:	687b      	ldr	r3, [r7, #4]
    85ce:	4a08      	ldr	r2, [pc, #32]	; (85f0 <_tcc_init_irq_param+0x3c>)
    85d0:	4293      	cmp	r3, r2
    85d2:	d102      	bne.n	85da <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    85d4:	4a07      	ldr	r2, [pc, #28]	; (85f4 <_tcc_init_irq_param+0x40>)
    85d6:	683b      	ldr	r3, [r7, #0]
    85d8:	6013      	str	r3, [r2, #0]
	}
}
    85da:	bf00      	nop
    85dc:	370c      	adds	r7, #12
    85de:	46bd      	mov	sp, r7
    85e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    85e4:	4770      	bx	lr
    85e6:	bf00      	nop
    85e8:	41016000 	.word	0x41016000
    85ec:	200009d8 	.word	0x200009d8
    85f0:	41018000 	.word	0x41018000
    85f4:	200009dc 	.word	0x200009dc

000085f8 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    85f8:	b580      	push	{r7, lr}
    85fa:	b084      	sub	sp, #16
    85fc:	af00      	add	r7, sp, #0
    85fe:	6078      	str	r0, [r7, #4]
    8600:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8602:	6838      	ldr	r0, [r7, #0]
    8604:	4b33      	ldr	r3, [pc, #204]	; (86d4 <_tcc_timer_init+0xdc>)
    8606:	4798      	blx	r3
    8608:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    860a:	68fb      	ldr	r3, [r7, #12]
    860c:	2b00      	cmp	r3, #0
    860e:	d102      	bne.n	8616 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    8610:	f06f 0309 	mvn.w	r3, #9
    8614:	e05a      	b.n	86cc <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    8616:	687b      	ldr	r3, [r7, #4]
    8618:	683a      	ldr	r2, [r7, #0]
    861a:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    861c:	2101      	movs	r1, #1
    861e:	6838      	ldr	r0, [r7, #0]
    8620:	4b2d      	ldr	r3, [pc, #180]	; (86d8 <_tcc_timer_init+0xe0>)
    8622:	4798      	blx	r3
    8624:	4603      	mov	r3, r0
    8626:	f083 0301 	eor.w	r3, r3, #1
    862a:	b2db      	uxtb	r3, r3
    862c:	2b00      	cmp	r3, #0
    862e:	d011      	beq.n	8654 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    8630:	2102      	movs	r1, #2
    8632:	6838      	ldr	r0, [r7, #0]
    8634:	4b29      	ldr	r3, [pc, #164]	; (86dc <_tcc_timer_init+0xe4>)
    8636:	4798      	blx	r3
    8638:	4603      	mov	r3, r0
    863a:	2b00      	cmp	r3, #0
    863c:	d006      	beq.n	864c <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    863e:	6838      	ldr	r0, [r7, #0]
    8640:	4b27      	ldr	r3, [pc, #156]	; (86e0 <_tcc_timer_init+0xe8>)
    8642:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    8644:	2102      	movs	r1, #2
    8646:	6838      	ldr	r0, [r7, #0]
    8648:	4b26      	ldr	r3, [pc, #152]	; (86e4 <_tcc_timer_init+0xec>)
    864a:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    864c:	2101      	movs	r1, #1
    864e:	6838      	ldr	r0, [r7, #0]
    8650:	4b25      	ldr	r3, [pc, #148]	; (86e8 <_tcc_timer_init+0xf0>)
    8652:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    8654:	2101      	movs	r1, #1
    8656:	6838      	ldr	r0, [r7, #0]
    8658:	4b22      	ldr	r3, [pc, #136]	; (86e4 <_tcc_timer_init+0xec>)
    865a:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    865c:	68fb      	ldr	r3, [r7, #12]
    865e:	689b      	ldr	r3, [r3, #8]
    8660:	4619      	mov	r1, r3
    8662:	6838      	ldr	r0, [r7, #0]
    8664:	4b20      	ldr	r3, [pc, #128]	; (86e8 <_tcc_timer_init+0xf0>)
    8666:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    8668:	68fb      	ldr	r3, [r7, #12]
    866a:	7b1b      	ldrb	r3, [r3, #12]
    866c:	4619      	mov	r1, r3
    866e:	6838      	ldr	r0, [r7, #0]
    8670:	4b1e      	ldr	r3, [pc, #120]	; (86ec <_tcc_timer_init+0xf4>)
    8672:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    8674:	68fb      	ldr	r3, [r7, #12]
    8676:	7b5b      	ldrb	r3, [r3, #13]
    8678:	4619      	mov	r1, r3
    867a:	6838      	ldr	r0, [r7, #0]
    867c:	4b1c      	ldr	r3, [pc, #112]	; (86f0 <_tcc_timer_init+0xf8>)
    867e:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    8680:	68fb      	ldr	r3, [r7, #12]
    8682:	691b      	ldr	r3, [r3, #16]
    8684:	4619      	mov	r1, r3
    8686:	6838      	ldr	r0, [r7, #0]
    8688:	4b1a      	ldr	r3, [pc, #104]	; (86f4 <_tcc_timer_init+0xfc>)
    868a:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    868c:	68fb      	ldr	r3, [r7, #12]
    868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8690:	4619      	mov	r1, r3
    8692:	6838      	ldr	r0, [r7, #0]
    8694:	4b18      	ldr	r3, [pc, #96]	; (86f8 <_tcc_timer_init+0x100>)
    8696:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    8698:	6838      	ldr	r0, [r7, #0]
    869a:	4b18      	ldr	r3, [pc, #96]	; (86fc <_tcc_timer_init+0x104>)
    869c:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    869e:	6879      	ldr	r1, [r7, #4]
    86a0:	6838      	ldr	r0, [r7, #0]
    86a2:	4b17      	ldr	r3, [pc, #92]	; (8700 <_tcc_timer_init+0x108>)
    86a4:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    86a6:	68fb      	ldr	r3, [r7, #12]
    86a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    86ac:	4618      	mov	r0, r3
    86ae:	4b15      	ldr	r3, [pc, #84]	; (8704 <_tcc_timer_init+0x10c>)
    86b0:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    86b2:	68fb      	ldr	r3, [r7, #12]
    86b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    86b8:	4618      	mov	r0, r3
    86ba:	4b13      	ldr	r3, [pc, #76]	; (8708 <_tcc_timer_init+0x110>)
    86bc:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    86be:	68fb      	ldr	r3, [r7, #12]
    86c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    86c4:	4618      	mov	r0, r3
    86c6:	4b11      	ldr	r3, [pc, #68]	; (870c <_tcc_timer_init+0x114>)
    86c8:	4798      	blx	r3

	return ERR_NONE;
    86ca:	2300      	movs	r3, #0
}
    86cc:	4618      	mov	r0, r3
    86ce:	3710      	adds	r7, #16
    86d0:	46bd      	mov	sp, r7
    86d2:	bd80      	pop	{r7, pc}
    86d4:	000088c1 	.word	0x000088c1
    86d8:	00008391 	.word	0x00008391
    86dc:	000084e1 	.word	0x000084e1
    86e0:	000084b9 	.word	0x000084b9
    86e4:	0000836d 	.word	0x0000836d
    86e8:	00008511 	.word	0x00008511
    86ec:	000083f9 	.word	0x000083f9
    86f0:	00008535 	.word	0x00008535
    86f4:	00008553 	.word	0x00008553
    86f8:	00008571 	.word	0x00008571
    86fc:	00008417 	.word	0x00008417
    8700:	000085b5 	.word	0x000085b5
    8704:	000082ed 	.word	0x000082ed
    8708:	00008331 	.word	0x00008331
    870c:	000082b1 	.word	0x000082b1

00008710 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    8710:	b580      	push	{r7, lr}
    8712:	b084      	sub	sp, #16
    8714:	af00      	add	r7, sp, #0
    8716:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    8718:	687b      	ldr	r3, [r7, #4]
    871a:	68db      	ldr	r3, [r3, #12]
    871c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    871e:	68f8      	ldr	r0, [r7, #12]
    8720:	4b0a      	ldr	r3, [pc, #40]	; (874c <_tcc_timer_deinit+0x3c>)
    8722:	4798      	blx	r3
    8724:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    8726:	68bb      	ldr	r3, [r7, #8]
    8728:	2b00      	cmp	r3, #0
    872a:	d00b      	beq.n	8744 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    872c:	68bb      	ldr	r3, [r7, #8]
    872e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8732:	4618      	mov	r0, r3
    8734:	4b06      	ldr	r3, [pc, #24]	; (8750 <_tcc_timer_deinit+0x40>)
    8736:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    8738:	68f8      	ldr	r0, [r7, #12]
    873a:	4b06      	ldr	r3, [pc, #24]	; (8754 <_tcc_timer_deinit+0x44>)
    873c:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    873e:	68f8      	ldr	r0, [r7, #12]
    8740:	4b05      	ldr	r3, [pc, #20]	; (8758 <_tcc_timer_deinit+0x48>)
    8742:	4798      	blx	r3
	}
}
    8744:	bf00      	nop
    8746:	3710      	adds	r7, #16
    8748:	46bd      	mov	sp, r7
    874a:	bd80      	pop	{r7, pc}
    874c:	000088c1 	.word	0x000088c1
    8750:	000082ed 	.word	0x000082ed
    8754:	000084b9 	.word	0x000084b9
    8758:	00008431 	.word	0x00008431

0000875c <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    875c:	b580      	push	{r7, lr}
    875e:	b082      	sub	sp, #8
    8760:	af00      	add	r7, sp, #0
    8762:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    8764:	687b      	ldr	r3, [r7, #4]
    8766:	68db      	ldr	r3, [r3, #12]
    8768:	4618      	mov	r0, r3
    876a:	4b03      	ldr	r3, [pc, #12]	; (8778 <_tcc_timer_start+0x1c>)
    876c:	4798      	blx	r3
}
    876e:	bf00      	nop
    8770:	3708      	adds	r7, #8
    8772:	46bd      	mov	sp, r7
    8774:	bd80      	pop	{r7, pc}
    8776:	bf00      	nop
    8778:	00008459 	.word	0x00008459

0000877c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    877c:	b580      	push	{r7, lr}
    877e:	b082      	sub	sp, #8
    8780:	af00      	add	r7, sp, #0
    8782:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    8784:	687b      	ldr	r3, [r7, #4]
    8786:	68db      	ldr	r3, [r3, #12]
    8788:	4618      	mov	r0, r3
    878a:	4b03      	ldr	r3, [pc, #12]	; (8798 <_tcc_timer_stop+0x1c>)
    878c:	4798      	blx	r3
}
    878e:	bf00      	nop
    8790:	3708      	adds	r7, #8
    8792:	46bd      	mov	sp, r7
    8794:	bd80      	pop	{r7, pc}
    8796:	bf00      	nop
    8798:	000084b9 	.word	0x000084b9

0000879c <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    879c:	b580      	push	{r7, lr}
    879e:	b082      	sub	sp, #8
    87a0:	af00      	add	r7, sp, #0
    87a2:	6078      	str	r0, [r7, #4]
    87a4:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    87a6:	687b      	ldr	r3, [r7, #4]
    87a8:	68db      	ldr	r3, [r3, #12]
    87aa:	6839      	ldr	r1, [r7, #0]
    87ac:	4618      	mov	r0, r3
    87ae:	4b03      	ldr	r3, [pc, #12]	; (87bc <_tcc_timer_set_period+0x20>)
    87b0:	4798      	blx	r3
}
    87b2:	bf00      	nop
    87b4:	3708      	adds	r7, #8
    87b6:	46bd      	mov	sp, r7
    87b8:	bd80      	pop	{r7, pc}
    87ba:	bf00      	nop
    87bc:	00008571 	.word	0x00008571

000087c0 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    87c0:	b580      	push	{r7, lr}
    87c2:	b082      	sub	sp, #8
    87c4:	af00      	add	r7, sp, #0
    87c6:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    87c8:	687b      	ldr	r3, [r7, #4]
    87ca:	68db      	ldr	r3, [r3, #12]
    87cc:	4618      	mov	r0, r3
    87ce:	4b03      	ldr	r3, [pc, #12]	; (87dc <_tcc_timer_get_period+0x1c>)
    87d0:	4798      	blx	r3
    87d2:	4603      	mov	r3, r0
}
    87d4:	4618      	mov	r0, r3
    87d6:	3708      	adds	r7, #8
    87d8:	46bd      	mov	sp, r7
    87da:	bd80      	pop	{r7, pc}
    87dc:	00008595 	.word	0x00008595

000087e0 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    87e0:	b580      	push	{r7, lr}
    87e2:	b082      	sub	sp, #8
    87e4:	af00      	add	r7, sp, #0
    87e6:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    87e8:	687b      	ldr	r3, [r7, #4]
    87ea:	68db      	ldr	r3, [r3, #12]
    87ec:	4618      	mov	r0, r3
    87ee:	4b03      	ldr	r3, [pc, #12]	; (87fc <_tcc_timer_is_started+0x1c>)
    87f0:	4798      	blx	r3
    87f2:	4603      	mov	r3, r0
}
    87f4:	4618      	mov	r0, r3
    87f6:	3708      	adds	r7, #8
    87f8:	46bd      	mov	sp, r7
    87fa:	bd80      	pop	{r7, pc}
    87fc:	00008481 	.word	0x00008481

00008800 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    8800:	b480      	push	{r7}
    8802:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    8804:	4b02      	ldr	r3, [pc, #8]	; (8810 <_tcc_get_timer+0x10>)
}
    8806:	4618      	mov	r0, r3
    8808:	46bd      	mov	sp, r7
    880a:	f85d 7b04 	ldr.w	r7, [sp], #4
    880e:	4770      	bx	lr
    8810:	200000c0 	.word	0x200000c0

00008814 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    8814:	b580      	push	{r7, lr}
    8816:	b084      	sub	sp, #16
    8818:	af00      	add	r7, sp, #0
    881a:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    881c:	687b      	ldr	r3, [r7, #4]
    881e:	68db      	ldr	r3, [r3, #12]
    8820:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8822:	68f8      	ldr	r0, [r7, #12]
    8824:	4b08      	ldr	r3, [pc, #32]	; (8848 <_tcc_timer_set_irq+0x34>)
    8826:	4798      	blx	r3
    8828:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    882a:	68bb      	ldr	r3, [r7, #8]
    882c:	2b00      	cmp	r3, #0
    882e:	d006      	beq.n	883e <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    8830:	68bb      	ldr	r3, [r7, #8]
    8832:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8836:	b2db      	uxtb	r3, r3
    8838:	4618      	mov	r0, r3
    883a:	4b04      	ldr	r3, [pc, #16]	; (884c <_tcc_timer_set_irq+0x38>)
    883c:	4798      	blx	r3
	}
}
    883e:	bf00      	nop
    8840:	3710      	adds	r7, #16
    8842:	46bd      	mov	sp, r7
    8844:	bd80      	pop	{r7, pc}
    8846:	bf00      	nop
    8848:	000088c1 	.word	0x000088c1
    884c:	000052e1 	.word	0x000052e1

00008850 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    8850:	b580      	push	{r7, lr}
    8852:	b084      	sub	sp, #16
    8854:	af00      	add	r7, sp, #0
    8856:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8858:	687b      	ldr	r3, [r7, #4]
    885a:	68db      	ldr	r3, [r3, #12]
    885c:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    885e:	68f8      	ldr	r0, [r7, #12]
    8860:	4b07      	ldr	r3, [pc, #28]	; (8880 <tcc_interrupt_handler+0x30>)
    8862:	4798      	blx	r3
    8864:	4603      	mov	r3, r0
    8866:	2b00      	cmp	r3, #0
    8868:	d006      	beq.n	8878 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    886a:	68f8      	ldr	r0, [r7, #12]
    886c:	4b05      	ldr	r3, [pc, #20]	; (8884 <tcc_interrupt_handler+0x34>)
    886e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8870:	687b      	ldr	r3, [r7, #4]
    8872:	681b      	ldr	r3, [r3, #0]
    8874:	6878      	ldr	r0, [r7, #4]
    8876:	4798      	blx	r3
	}
}
    8878:	bf00      	nop
    887a:	3710      	adds	r7, #16
    887c:	46bd      	mov	sp, r7
    887e:	bd80      	pop	{r7, pc}
    8880:	000083b9 	.word	0x000083b9
    8884:	000083df 	.word	0x000083df

00008888 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    8888:	b580      	push	{r7, lr}
    888a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    888c:	4b03      	ldr	r3, [pc, #12]	; (889c <TCC0_0_Handler+0x14>)
    888e:	681b      	ldr	r3, [r3, #0]
    8890:	4618      	mov	r0, r3
    8892:	4b03      	ldr	r3, [pc, #12]	; (88a0 <TCC0_0_Handler+0x18>)
    8894:	4798      	blx	r3
}
    8896:	bf00      	nop
    8898:	bd80      	pop	{r7, pc}
    889a:	bf00      	nop
    889c:	200009d8 	.word	0x200009d8
    88a0:	00008851 	.word	0x00008851

000088a4 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    88a4:	b580      	push	{r7, lr}
    88a6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    88a8:	4b03      	ldr	r3, [pc, #12]	; (88b8 <TCC1_0_Handler+0x14>)
    88aa:	681b      	ldr	r3, [r3, #0]
    88ac:	4618      	mov	r0, r3
    88ae:	4b03      	ldr	r3, [pc, #12]	; (88bc <TCC1_0_Handler+0x18>)
    88b0:	4798      	blx	r3
}
    88b2:	bf00      	nop
    88b4:	bd80      	pop	{r7, pc}
    88b6:	bf00      	nop
    88b8:	200009dc 	.word	0x200009dc
    88bc:	00008851 	.word	0x00008851

000088c0 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    88c0:	b480      	push	{r7}
    88c2:	b085      	sub	sp, #20
    88c4:	af00      	add	r7, sp, #0
    88c6:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    88c8:	2300      	movs	r3, #0
    88ca:	73fb      	strb	r3, [r7, #15]
    88cc:	e015      	b.n	88fa <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    88ce:	7bfa      	ldrb	r2, [r7, #15]
    88d0:	490f      	ldr	r1, [pc, #60]	; (8910 <_get_tcc_cfg+0x50>)
    88d2:	4613      	mov	r3, r2
    88d4:	005b      	lsls	r3, r3, #1
    88d6:	4413      	add	r3, r2
    88d8:	011b      	lsls	r3, r3, #4
    88da:	440b      	add	r3, r1
    88dc:	681a      	ldr	r2, [r3, #0]
    88de:	687b      	ldr	r3, [r7, #4]
    88e0:	429a      	cmp	r2, r3
    88e2:	d107      	bne.n	88f4 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    88e4:	7bfa      	ldrb	r2, [r7, #15]
    88e6:	4613      	mov	r3, r2
    88e8:	005b      	lsls	r3, r3, #1
    88ea:	4413      	add	r3, r2
    88ec:	011b      	lsls	r3, r3, #4
    88ee:	4a08      	ldr	r2, [pc, #32]	; (8910 <_get_tcc_cfg+0x50>)
    88f0:	4413      	add	r3, r2
    88f2:	e006      	b.n	8902 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    88f4:	7bfb      	ldrb	r3, [r7, #15]
    88f6:	3301      	adds	r3, #1
    88f8:	73fb      	strb	r3, [r7, #15]
    88fa:	7bfb      	ldrb	r3, [r7, #15]
    88fc:	2b01      	cmp	r3, #1
    88fe:	d9e6      	bls.n	88ce <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    8900:	2300      	movs	r3, #0
}
    8902:	4618      	mov	r0, r3
    8904:	3714      	adds	r7, #20
    8906:	46bd      	mov	sp, r7
    8908:	f85d 7b04 	ldr.w	r7, [sp], #4
    890c:	4770      	bx	lr
    890e:	bf00      	nop
    8910:	20000060 	.word	0x20000060

00008914 <__NVIC_EnableIRQ>:
{
    8914:	b480      	push	{r7}
    8916:	b083      	sub	sp, #12
    8918:	af00      	add	r7, sp, #0
    891a:	4603      	mov	r3, r0
    891c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    891e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8922:	2b00      	cmp	r3, #0
    8924:	db0b      	blt.n	893e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8926:	4909      	ldr	r1, [pc, #36]	; (894c <__NVIC_EnableIRQ+0x38>)
    8928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    892c:	095b      	lsrs	r3, r3, #5
    892e:	88fa      	ldrh	r2, [r7, #6]
    8930:	f002 021f 	and.w	r2, r2, #31
    8934:	2001      	movs	r0, #1
    8936:	fa00 f202 	lsl.w	r2, r0, r2
    893a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    893e:	bf00      	nop
    8940:	370c      	adds	r7, #12
    8942:	46bd      	mov	sp, r7
    8944:	f85d 7b04 	ldr.w	r7, [sp], #4
    8948:	4770      	bx	lr
    894a:	bf00      	nop
    894c:	e000e100 	.word	0xe000e100

00008950 <__NVIC_DisableIRQ>:
{
    8950:	b480      	push	{r7}
    8952:	b083      	sub	sp, #12
    8954:	af00      	add	r7, sp, #0
    8956:	4603      	mov	r3, r0
    8958:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    895a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    895e:	2b00      	cmp	r3, #0
    8960:	db10      	blt.n	8984 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8962:	490b      	ldr	r1, [pc, #44]	; (8990 <__NVIC_DisableIRQ+0x40>)
    8964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8968:	095b      	lsrs	r3, r3, #5
    896a:	88fa      	ldrh	r2, [r7, #6]
    896c:	f002 021f 	and.w	r2, r2, #31
    8970:	2001      	movs	r0, #1
    8972:	fa00 f202 	lsl.w	r2, r0, r2
    8976:	3320      	adds	r3, #32
    8978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    897c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8980:	f3bf 8f6f 	isb	sy
}
    8984:	bf00      	nop
    8986:	370c      	adds	r7, #12
    8988:	46bd      	mov	sp, r7
    898a:	f85d 7b04 	ldr.w	r7, [sp], #4
    898e:	4770      	bx	lr
    8990:	e000e100 	.word	0xe000e100

00008994 <__NVIC_ClearPendingIRQ>:
{
    8994:	b480      	push	{r7}
    8996:	b083      	sub	sp, #12
    8998:	af00      	add	r7, sp, #0
    899a:	4603      	mov	r3, r0
    899c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    899e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    89a2:	2b00      	cmp	r3, #0
    89a4:	db0c      	blt.n	89c0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    89a6:	4909      	ldr	r1, [pc, #36]	; (89cc <__NVIC_ClearPendingIRQ+0x38>)
    89a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    89ac:	095b      	lsrs	r3, r3, #5
    89ae:	88fa      	ldrh	r2, [r7, #6]
    89b0:	f002 021f 	and.w	r2, r2, #31
    89b4:	2001      	movs	r0, #1
    89b6:	fa00 f202 	lsl.w	r2, r0, r2
    89ba:	3360      	adds	r3, #96	; 0x60
    89bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    89c0:	bf00      	nop
    89c2:	370c      	adds	r7, #12
    89c4:	46bd      	mov	sp, r7
    89c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    89ca:	4770      	bx	lr
    89cc:	e000e100 	.word	0xe000e100

000089d0 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    89d0:	b480      	push	{r7}
    89d2:	b083      	sub	sp, #12
    89d4:	af00      	add	r7, sp, #0
    89d6:	6078      	str	r0, [r7, #4]
    89d8:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    89da:	bf00      	nop
    89dc:	687b      	ldr	r3, [r7, #4]
    89de:	691a      	ldr	r2, [r3, #16]
    89e0:	683b      	ldr	r3, [r7, #0]
    89e2:	4013      	ands	r3, r2
    89e4:	2b00      	cmp	r3, #0
    89e6:	d1f9      	bne.n	89dc <hri_tc_wait_for_sync+0xc>
	};
}
    89e8:	bf00      	nop
    89ea:	370c      	adds	r7, #12
    89ec:	46bd      	mov	sp, r7
    89ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    89f2:	4770      	bx	lr

000089f4 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    89f4:	b480      	push	{r7}
    89f6:	b083      	sub	sp, #12
    89f8:	af00      	add	r7, sp, #0
    89fa:	6078      	str	r0, [r7, #4]
    89fc:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    89fe:	687b      	ldr	r3, [r7, #4]
    8a00:	691a      	ldr	r2, [r3, #16]
    8a02:	683b      	ldr	r3, [r7, #0]
    8a04:	4013      	ands	r3, r2
    8a06:	2b00      	cmp	r3, #0
    8a08:	bf14      	ite	ne
    8a0a:	2301      	movne	r3, #1
    8a0c:	2300      	moveq	r3, #0
    8a0e:	b2db      	uxtb	r3, r3
}
    8a10:	4618      	mov	r0, r3
    8a12:	370c      	adds	r7, #12
    8a14:	46bd      	mov	sp, r7
    8a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a1a:	4770      	bx	lr

00008a1c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    8a1c:	b480      	push	{r7}
    8a1e:	b083      	sub	sp, #12
    8a20:	af00      	add	r7, sp, #0
    8a22:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    8a24:	687b      	ldr	r3, [r7, #4]
    8a26:	7a9b      	ldrb	r3, [r3, #10]
    8a28:	b2db      	uxtb	r3, r3
    8a2a:	f003 0301 	and.w	r3, r3, #1
    8a2e:	2b00      	cmp	r3, #0
    8a30:	bf14      	ite	ne
    8a32:	2301      	movne	r3, #1
    8a34:	2300      	moveq	r3, #0
    8a36:	b2db      	uxtb	r3, r3
}
    8a38:	4618      	mov	r0, r3
    8a3a:	370c      	adds	r7, #12
    8a3c:	46bd      	mov	sp, r7
    8a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a42:	4770      	bx	lr

00008a44 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    8a44:	b480      	push	{r7}
    8a46:	b083      	sub	sp, #12
    8a48:	af00      	add	r7, sp, #0
    8a4a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8a4c:	687b      	ldr	r3, [r7, #4]
    8a4e:	2201      	movs	r2, #1
    8a50:	729a      	strb	r2, [r3, #10]
}
    8a52:	bf00      	nop
    8a54:	370c      	adds	r7, #12
    8a56:	46bd      	mov	sp, r7
    8a58:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a5c:	4770      	bx	lr

00008a5e <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    8a5e:	b480      	push	{r7}
    8a60:	b083      	sub	sp, #12
    8a62:	af00      	add	r7, sp, #0
    8a64:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    8a66:	687b      	ldr	r3, [r7, #4]
    8a68:	2202      	movs	r2, #2
    8a6a:	729a      	strb	r2, [r3, #10]
}
    8a6c:	bf00      	nop
    8a6e:	370c      	adds	r7, #12
    8a70:	46bd      	mov	sp, r7
    8a72:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a76:	4770      	bx	lr

00008a78 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    8a78:	b480      	push	{r7}
    8a7a:	b083      	sub	sp, #12
    8a7c:	af00      	add	r7, sp, #0
    8a7e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    8a80:	687b      	ldr	r3, [r7, #4]
    8a82:	2201      	movs	r2, #1
    8a84:	725a      	strb	r2, [r3, #9]
}
    8a86:	bf00      	nop
    8a88:	370c      	adds	r7, #12
    8a8a:	46bd      	mov	sp, r7
    8a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a90:	4770      	bx	lr

00008a92 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    8a92:	b480      	push	{r7}
    8a94:	b083      	sub	sp, #12
    8a96:	af00      	add	r7, sp, #0
    8a98:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    8a9a:	687b      	ldr	r3, [r7, #4]
    8a9c:	7a5b      	ldrb	r3, [r3, #9]
    8a9e:	b2db      	uxtb	r3, r3
    8aa0:	085b      	lsrs	r3, r3, #1
    8aa2:	f003 0301 	and.w	r3, r3, #1
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	bf14      	ite	ne
    8aaa:	2301      	movne	r3, #1
    8aac:	2300      	moveq	r3, #0
    8aae:	b2db      	uxtb	r3, r3
}
    8ab0:	4618      	mov	r0, r3
    8ab2:	370c      	adds	r7, #12
    8ab4:	46bd      	mov	sp, r7
    8ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aba:	4770      	bx	lr

00008abc <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8abc:	b580      	push	{r7, lr}
    8abe:	b082      	sub	sp, #8
    8ac0:	af00      	add	r7, sp, #0
    8ac2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8ac4:	687b      	ldr	r3, [r7, #4]
    8ac6:	681b      	ldr	r3, [r3, #0]
    8ac8:	f043 0201 	orr.w	r2, r3, #1
    8acc:	687b      	ldr	r3, [r7, #4]
    8ace:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8ad0:	2101      	movs	r1, #1
    8ad2:	6878      	ldr	r0, [r7, #4]
    8ad4:	4b02      	ldr	r3, [pc, #8]	; (8ae0 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    8ad6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8ad8:	bf00      	nop
    8ada:	3708      	adds	r7, #8
    8adc:	46bd      	mov	sp, r7
    8ade:	bd80      	pop	{r7, pc}
    8ae0:	000089d1 	.word	0x000089d1

00008ae4 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8ae4:	b580      	push	{r7, lr}
    8ae6:	b082      	sub	sp, #8
    8ae8:	af00      	add	r7, sp, #0
    8aea:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8aec:	687b      	ldr	r3, [r7, #4]
    8aee:	681b      	ldr	r3, [r3, #0]
    8af0:	f043 0202 	orr.w	r2, r3, #2
    8af4:	687b      	ldr	r3, [r7, #4]
    8af6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8af8:	2103      	movs	r1, #3
    8afa:	6878      	ldr	r0, [r7, #4]
    8afc:	4b02      	ldr	r3, [pc, #8]	; (8b08 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    8afe:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8b00:	bf00      	nop
    8b02:	3708      	adds	r7, #8
    8b04:	46bd      	mov	sp, r7
    8b06:	bd80      	pop	{r7, pc}
    8b08:	000089d1 	.word	0x000089d1

00008b0c <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8b0c:	b580      	push	{r7, lr}
    8b0e:	b084      	sub	sp, #16
    8b10:	af00      	add	r7, sp, #0
    8b12:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8b14:	2103      	movs	r1, #3
    8b16:	6878      	ldr	r0, [r7, #4]
    8b18:	4b09      	ldr	r3, [pc, #36]	; (8b40 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    8b1a:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8b1c:	687b      	ldr	r3, [r7, #4]
    8b1e:	681b      	ldr	r3, [r3, #0]
    8b20:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    8b22:	68fb      	ldr	r3, [r7, #12]
    8b24:	085b      	lsrs	r3, r3, #1
    8b26:	f003 0301 	and.w	r3, r3, #1
    8b2a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8b2c:	68fb      	ldr	r3, [r7, #12]
    8b2e:	2b00      	cmp	r3, #0
    8b30:	bf14      	ite	ne
    8b32:	2301      	movne	r3, #1
    8b34:	2300      	moveq	r3, #0
    8b36:	b2db      	uxtb	r3, r3
}
    8b38:	4618      	mov	r0, r3
    8b3a:	3710      	adds	r7, #16
    8b3c:	46bd      	mov	sp, r7
    8b3e:	bd80      	pop	{r7, pc}
    8b40:	000089d1 	.word	0x000089d1

00008b44 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8b44:	b580      	push	{r7, lr}
    8b46:	b082      	sub	sp, #8
    8b48:	af00      	add	r7, sp, #0
    8b4a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8b4c:	687b      	ldr	r3, [r7, #4]
    8b4e:	681b      	ldr	r3, [r3, #0]
    8b50:	f023 0202 	bic.w	r2, r3, #2
    8b54:	687b      	ldr	r3, [r7, #4]
    8b56:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8b58:	2103      	movs	r1, #3
    8b5a:	6878      	ldr	r0, [r7, #4]
    8b5c:	4b02      	ldr	r3, [pc, #8]	; (8b68 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    8b5e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8b60:	bf00      	nop
    8b62:	3708      	adds	r7, #8
    8b64:	46bd      	mov	sp, r7
    8b66:	bd80      	pop	{r7, pc}
    8b68:	000089d1 	.word	0x000089d1

00008b6c <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    8b6c:	b480      	push	{r7}
    8b6e:	b085      	sub	sp, #20
    8b70:	af00      	add	r7, sp, #0
    8b72:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8b74:	687b      	ldr	r3, [r7, #4]
    8b76:	681b      	ldr	r3, [r3, #0]
    8b78:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8b7a:	68fb      	ldr	r3, [r7, #12]
    8b7c:	089b      	lsrs	r3, r3, #2
    8b7e:	f003 0303 	and.w	r3, r3, #3
    8b82:	60fb      	str	r3, [r7, #12]
	return tmp;
    8b84:	68fb      	ldr	r3, [r7, #12]
}
    8b86:	4618      	mov	r0, r3
    8b88:	3714      	adds	r7, #20
    8b8a:	46bd      	mov	sp, r7
    8b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b90:	4770      	bx	lr
	...

00008b94 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    8b94:	b580      	push	{r7, lr}
    8b96:	b084      	sub	sp, #16
    8b98:	af00      	add	r7, sp, #0
    8b9a:	6078      	str	r0, [r7, #4]
    8b9c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8b9e:	2103      	movs	r1, #3
    8ba0:	6878      	ldr	r0, [r7, #4]
    8ba2:	4b07      	ldr	r3, [pc, #28]	; (8bc0 <hri_tc_get_CTRLA_reg+0x2c>)
    8ba4:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8ba6:	687b      	ldr	r3, [r7, #4]
    8ba8:	681b      	ldr	r3, [r3, #0]
    8baa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8bac:	68fa      	ldr	r2, [r7, #12]
    8bae:	683b      	ldr	r3, [r7, #0]
    8bb0:	4013      	ands	r3, r2
    8bb2:	60fb      	str	r3, [r7, #12]
	return tmp;
    8bb4:	68fb      	ldr	r3, [r7, #12]
}
    8bb6:	4618      	mov	r0, r3
    8bb8:	3710      	adds	r7, #16
    8bba:	46bd      	mov	sp, r7
    8bbc:	bd80      	pop	{r7, pc}
    8bbe:	bf00      	nop
    8bc0:	000089d1 	.word	0x000089d1

00008bc4 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8bc4:	b580      	push	{r7, lr}
    8bc6:	b082      	sub	sp, #8
    8bc8:	af00      	add	r7, sp, #0
    8bca:	6078      	str	r0, [r7, #4]
    8bcc:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    8bce:	687b      	ldr	r3, [r7, #4]
    8bd0:	683a      	ldr	r2, [r7, #0]
    8bd2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8bd4:	2103      	movs	r1, #3
    8bd6:	6878      	ldr	r0, [r7, #4]
    8bd8:	4b02      	ldr	r3, [pc, #8]	; (8be4 <hri_tc_write_CTRLA_reg+0x20>)
    8bda:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8bdc:	bf00      	nop
    8bde:	3708      	adds	r7, #8
    8be0:	46bd      	mov	sp, r7
    8be2:	bd80      	pop	{r7, pc}
    8be4:	000089d1 	.word	0x000089d1

00008be8 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8be8:	b480      	push	{r7}
    8bea:	b083      	sub	sp, #12
    8bec:	af00      	add	r7, sp, #0
    8bee:	6078      	str	r0, [r7, #4]
    8bf0:	460b      	mov	r3, r1
    8bf2:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	887a      	ldrh	r2, [r7, #2]
    8bf8:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    8bfa:	bf00      	nop
    8bfc:	370c      	adds	r7, #12
    8bfe:	46bd      	mov	sp, r7
    8c00:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c04:	4770      	bx	lr

00008c06 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    8c06:	b480      	push	{r7}
    8c08:	b083      	sub	sp, #12
    8c0a:	af00      	add	r7, sp, #0
    8c0c:	6078      	str	r0, [r7, #4]
    8c0e:	460b      	mov	r3, r1
    8c10:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    8c12:	687b      	ldr	r3, [r7, #4]
    8c14:	78fa      	ldrb	r2, [r7, #3]
    8c16:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    8c18:	bf00      	nop
    8c1a:	370c      	adds	r7, #12
    8c1c:	46bd      	mov	sp, r7
    8c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c22:	4770      	bx	lr

00008c24 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    8c24:	b480      	push	{r7}
    8c26:	b083      	sub	sp, #12
    8c28:	af00      	add	r7, sp, #0
    8c2a:	6078      	str	r0, [r7, #4]
    8c2c:	460b      	mov	r3, r1
    8c2e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    8c30:	687b      	ldr	r3, [r7, #4]
    8c32:	78fa      	ldrb	r2, [r7, #3]
    8c34:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    8c36:	bf00      	nop
    8c38:	370c      	adds	r7, #12
    8c3a:	46bd      	mov	sp, r7
    8c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c40:	4770      	bx	lr
	...

00008c44 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    8c44:	b580      	push	{r7, lr}
    8c46:	b082      	sub	sp, #8
    8c48:	af00      	add	r7, sp, #0
    8c4a:	6078      	str	r0, [r7, #4]
    8c4c:	460b      	mov	r3, r1
    8c4e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    8c50:	687b      	ldr	r3, [r7, #4]
    8c52:	78fa      	ldrb	r2, [r7, #3]
    8c54:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    8c56:	2120      	movs	r1, #32
    8c58:	6878      	ldr	r0, [r7, #4]
    8c5a:	4b03      	ldr	r3, [pc, #12]	; (8c68 <hri_tccount8_write_PER_reg+0x24>)
    8c5c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8c5e:	bf00      	nop
    8c60:	3708      	adds	r7, #8
    8c62:	46bd      	mov	sp, r7
    8c64:	bd80      	pop	{r7, pc}
    8c66:	bf00      	nop
    8c68:	000089d1 	.word	0x000089d1

00008c6c <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    8c6c:	b580      	push	{r7, lr}
    8c6e:	b082      	sub	sp, #8
    8c70:	af00      	add	r7, sp, #0
    8c72:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    8c74:	2120      	movs	r1, #32
    8c76:	6878      	ldr	r0, [r7, #4]
    8c78:	4b04      	ldr	r3, [pc, #16]	; (8c8c <hri_tccount8_read_PER_reg+0x20>)
    8c7a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    8c7c:	687b      	ldr	r3, [r7, #4]
    8c7e:	7edb      	ldrb	r3, [r3, #27]
    8c80:	b2db      	uxtb	r3, r3
}
    8c82:	4618      	mov	r0, r3
    8c84:	3708      	adds	r7, #8
    8c86:	46bd      	mov	sp, r7
    8c88:	bd80      	pop	{r7, pc}
    8c8a:	bf00      	nop
    8c8c:	000089d1 	.word	0x000089d1

00008c90 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    8c90:	b580      	push	{r7, lr}
    8c92:	b082      	sub	sp, #8
    8c94:	af00      	add	r7, sp, #0
    8c96:	6078      	str	r0, [r7, #4]
    8c98:	460b      	mov	r3, r1
    8c9a:	70fb      	strb	r3, [r7, #3]
    8c9c:	4613      	mov	r3, r2
    8c9e:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    8ca0:	78fb      	ldrb	r3, [r7, #3]
    8ca2:	687a      	ldr	r2, [r7, #4]
    8ca4:	4413      	add	r3, r2
    8ca6:	78ba      	ldrb	r2, [r7, #2]
    8ca8:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8caa:	21c0      	movs	r1, #192	; 0xc0
    8cac:	6878      	ldr	r0, [r7, #4]
    8cae:	4b03      	ldr	r3, [pc, #12]	; (8cbc <hri_tccount8_write_CC_reg+0x2c>)
    8cb0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8cb2:	bf00      	nop
    8cb4:	3708      	adds	r7, #8
    8cb6:	46bd      	mov	sp, r7
    8cb8:	bd80      	pop	{r7, pc}
    8cba:	bf00      	nop
    8cbc:	000089d1 	.word	0x000089d1

00008cc0 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    8cc0:	b580      	push	{r7, lr}
    8cc2:	b082      	sub	sp, #8
    8cc4:	af00      	add	r7, sp, #0
    8cc6:	6078      	str	r0, [r7, #4]
    8cc8:	460b      	mov	r3, r1
    8cca:	70fb      	strb	r3, [r7, #3]
    8ccc:	4613      	mov	r3, r2
    8cce:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8cd0:	78fb      	ldrb	r3, [r7, #3]
    8cd2:	687a      	ldr	r2, [r7, #4]
    8cd4:	330c      	adds	r3, #12
    8cd6:	005b      	lsls	r3, r3, #1
    8cd8:	4413      	add	r3, r2
    8cda:	883a      	ldrh	r2, [r7, #0]
    8cdc:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8cde:	21c0      	movs	r1, #192	; 0xc0
    8ce0:	6878      	ldr	r0, [r7, #4]
    8ce2:	4b03      	ldr	r3, [pc, #12]	; (8cf0 <hri_tccount16_write_CC_reg+0x30>)
    8ce4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8ce6:	bf00      	nop
    8ce8:	3708      	adds	r7, #8
    8cea:	46bd      	mov	sp, r7
    8cec:	bd80      	pop	{r7, pc}
    8cee:	bf00      	nop
    8cf0:	000089d1 	.word	0x000089d1

00008cf4 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8cf4:	b580      	push	{r7, lr}
    8cf6:	b082      	sub	sp, #8
    8cf8:	af00      	add	r7, sp, #0
    8cfa:	6078      	str	r0, [r7, #4]
    8cfc:	460b      	mov	r3, r1
    8cfe:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8d00:	21c0      	movs	r1, #192	; 0xc0
    8d02:	6878      	ldr	r0, [r7, #4]
    8d04:	4b06      	ldr	r3, [pc, #24]	; (8d20 <hri_tccount16_read_CC_reg+0x2c>)
    8d06:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8d08:	78fb      	ldrb	r3, [r7, #3]
    8d0a:	687a      	ldr	r2, [r7, #4]
    8d0c:	330c      	adds	r3, #12
    8d0e:	005b      	lsls	r3, r3, #1
    8d10:	4413      	add	r3, r2
    8d12:	889b      	ldrh	r3, [r3, #4]
    8d14:	b29b      	uxth	r3, r3
}
    8d16:	4618      	mov	r0, r3
    8d18:	3708      	adds	r7, #8
    8d1a:	46bd      	mov	sp, r7
    8d1c:	bd80      	pop	{r7, pc}
    8d1e:	bf00      	nop
    8d20:	000089d1 	.word	0x000089d1

00008d24 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    8d24:	b580      	push	{r7, lr}
    8d26:	b084      	sub	sp, #16
    8d28:	af00      	add	r7, sp, #0
    8d2a:	60f8      	str	r0, [r7, #12]
    8d2c:	460b      	mov	r3, r1
    8d2e:	607a      	str	r2, [r7, #4]
    8d30:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8d32:	7afb      	ldrb	r3, [r7, #11]
    8d34:	68fa      	ldr	r2, [r7, #12]
    8d36:	3306      	adds	r3, #6
    8d38:	009b      	lsls	r3, r3, #2
    8d3a:	4413      	add	r3, r2
    8d3c:	687a      	ldr	r2, [r7, #4]
    8d3e:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8d40:	21c0      	movs	r1, #192	; 0xc0
    8d42:	68f8      	ldr	r0, [r7, #12]
    8d44:	4b02      	ldr	r3, [pc, #8]	; (8d50 <hri_tccount32_write_CC_reg+0x2c>)
    8d46:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8d48:	bf00      	nop
    8d4a:	3710      	adds	r7, #16
    8d4c:	46bd      	mov	sp, r7
    8d4e:	bd80      	pop	{r7, pc}
    8d50:	000089d1 	.word	0x000089d1

00008d54 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    8d54:	b580      	push	{r7, lr}
    8d56:	b082      	sub	sp, #8
    8d58:	af00      	add	r7, sp, #0
    8d5a:	6078      	str	r0, [r7, #4]
    8d5c:	460b      	mov	r3, r1
    8d5e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8d60:	21c0      	movs	r1, #192	; 0xc0
    8d62:	6878      	ldr	r0, [r7, #4]
    8d64:	4b05      	ldr	r3, [pc, #20]	; (8d7c <hri_tccount32_read_CC_reg+0x28>)
    8d66:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    8d68:	78fb      	ldrb	r3, [r7, #3]
    8d6a:	687a      	ldr	r2, [r7, #4]
    8d6c:	3306      	adds	r3, #6
    8d6e:	009b      	lsls	r3, r3, #2
    8d70:	4413      	add	r3, r2
    8d72:	685b      	ldr	r3, [r3, #4]
}
    8d74:	4618      	mov	r0, r3
    8d76:	3708      	adds	r7, #8
    8d78:	46bd      	mov	sp, r7
    8d7a:	bd80      	pop	{r7, pc}
    8d7c:	000089d1 	.word	0x000089d1

00008d80 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    8d80:	b580      	push	{r7, lr}
    8d82:	b084      	sub	sp, #16
    8d84:	af00      	add	r7, sp, #0
    8d86:	6078      	str	r0, [r7, #4]
    8d88:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    8d8a:	6838      	ldr	r0, [r7, #0]
    8d8c:	4b93      	ldr	r3, [pc, #588]	; (8fdc <_tc_timer_init+0x25c>)
    8d8e:	4798      	blx	r3
    8d90:	4603      	mov	r3, r0
    8d92:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    8d94:	687b      	ldr	r3, [r7, #4]
    8d96:	683a      	ldr	r2, [r7, #0]
    8d98:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    8d9a:	22a4      	movs	r2, #164	; 0xa4
    8d9c:	4990      	ldr	r1, [pc, #576]	; (8fe0 <_tc_timer_init+0x260>)
    8d9e:	2001      	movs	r0, #1
    8da0:	4b90      	ldr	r3, [pc, #576]	; (8fe4 <_tc_timer_init+0x264>)
    8da2:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8da4:	2101      	movs	r1, #1
    8da6:	6838      	ldr	r0, [r7, #0]
    8da8:	4b8f      	ldr	r3, [pc, #572]	; (8fe8 <_tc_timer_init+0x268>)
    8daa:	4798      	blx	r3
    8dac:	4603      	mov	r3, r0
    8dae:	f083 0301 	eor.w	r3, r3, #1
    8db2:	b2db      	uxtb	r3, r3
    8db4:	2b00      	cmp	r3, #0
    8db6:	d011      	beq.n	8ddc <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8db8:	2102      	movs	r1, #2
    8dba:	6838      	ldr	r0, [r7, #0]
    8dbc:	4b8b      	ldr	r3, [pc, #556]	; (8fec <_tc_timer_init+0x26c>)
    8dbe:	4798      	blx	r3
    8dc0:	4603      	mov	r3, r0
    8dc2:	2b00      	cmp	r3, #0
    8dc4:	d006      	beq.n	8dd4 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8dc6:	6838      	ldr	r0, [r7, #0]
    8dc8:	4b89      	ldr	r3, [pc, #548]	; (8ff0 <_tc_timer_init+0x270>)
    8dca:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8dcc:	2102      	movs	r1, #2
    8dce:	6838      	ldr	r0, [r7, #0]
    8dd0:	4b88      	ldr	r3, [pc, #544]	; (8ff4 <_tc_timer_init+0x274>)
    8dd2:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8dd4:	2101      	movs	r1, #1
    8dd6:	6838      	ldr	r0, [r7, #0]
    8dd8:	4b87      	ldr	r3, [pc, #540]	; (8ff8 <_tc_timer_init+0x278>)
    8dda:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8ddc:	2101      	movs	r1, #1
    8dde:	6838      	ldr	r0, [r7, #0]
    8de0:	4b84      	ldr	r3, [pc, #528]	; (8ff4 <_tc_timer_init+0x274>)
    8de2:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8de4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8de8:	4984      	ldr	r1, [pc, #528]	; (8ffc <_tc_timer_init+0x27c>)
    8dea:	4613      	mov	r3, r2
    8dec:	009b      	lsls	r3, r3, #2
    8dee:	4413      	add	r3, r2
    8df0:	009b      	lsls	r3, r3, #2
    8df2:	440b      	add	r3, r1
    8df4:	3304      	adds	r3, #4
    8df6:	681b      	ldr	r3, [r3, #0]
    8df8:	4619      	mov	r1, r3
    8dfa:	6838      	ldr	r0, [r7, #0]
    8dfc:	4b7e      	ldr	r3, [pc, #504]	; (8ff8 <_tc_timer_init+0x278>)
    8dfe:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8e00:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8e04:	497d      	ldr	r1, [pc, #500]	; (8ffc <_tc_timer_init+0x27c>)
    8e06:	4613      	mov	r3, r2
    8e08:	009b      	lsls	r3, r3, #2
    8e0a:	4413      	add	r3, r2
    8e0c:	009b      	lsls	r3, r3, #2
    8e0e:	440b      	add	r3, r1
    8e10:	330a      	adds	r3, #10
    8e12:	781b      	ldrb	r3, [r3, #0]
    8e14:	4619      	mov	r1, r3
    8e16:	6838      	ldr	r0, [r7, #0]
    8e18:	4b79      	ldr	r3, [pc, #484]	; (9000 <_tc_timer_init+0x280>)
    8e1a:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8e1c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8e20:	4976      	ldr	r1, [pc, #472]	; (8ffc <_tc_timer_init+0x27c>)
    8e22:	4613      	mov	r3, r2
    8e24:	009b      	lsls	r3, r3, #2
    8e26:	4413      	add	r3, r2
    8e28:	009b      	lsls	r3, r3, #2
    8e2a:	440b      	add	r3, r1
    8e2c:	3308      	adds	r3, #8
    8e2e:	881b      	ldrh	r3, [r3, #0]
    8e30:	4619      	mov	r1, r3
    8e32:	6838      	ldr	r0, [r7, #0]
    8e34:	4b73      	ldr	r3, [pc, #460]	; (9004 <_tc_timer_init+0x284>)
    8e36:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    8e38:	2101      	movs	r1, #1
    8e3a:	6838      	ldr	r0, [r7, #0]
    8e3c:	4b72      	ldr	r3, [pc, #456]	; (9008 <_tc_timer_init+0x288>)
    8e3e:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8e40:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8e44:	496d      	ldr	r1, [pc, #436]	; (8ffc <_tc_timer_init+0x27c>)
    8e46:	4613      	mov	r3, r2
    8e48:	009b      	lsls	r3, r3, #2
    8e4a:	4413      	add	r3, r2
    8e4c:	009b      	lsls	r3, r3, #2
    8e4e:	440b      	add	r3, r1
    8e50:	3304      	adds	r3, #4
    8e52:	681b      	ldr	r3, [r3, #0]
    8e54:	f003 030c 	and.w	r3, r3, #12
    8e58:	2b08      	cmp	r3, #8
    8e5a:	d11e      	bne.n	8e9a <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8e5c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8e60:	4966      	ldr	r1, [pc, #408]	; (8ffc <_tc_timer_init+0x27c>)
    8e62:	4613      	mov	r3, r2
    8e64:	009b      	lsls	r3, r3, #2
    8e66:	4413      	add	r3, r2
    8e68:	009b      	lsls	r3, r3, #2
    8e6a:	440b      	add	r3, r1
    8e6c:	330c      	adds	r3, #12
    8e6e:	681b      	ldr	r3, [r3, #0]
    8e70:	461a      	mov	r2, r3
    8e72:	2100      	movs	r1, #0
    8e74:	6838      	ldr	r0, [r7, #0]
    8e76:	4b65      	ldr	r3, [pc, #404]	; (900c <_tc_timer_init+0x28c>)
    8e78:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8e7a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8e7e:	495f      	ldr	r1, [pc, #380]	; (8ffc <_tc_timer_init+0x27c>)
    8e80:	4613      	mov	r3, r2
    8e82:	009b      	lsls	r3, r3, #2
    8e84:	4413      	add	r3, r2
    8e86:	009b      	lsls	r3, r3, #2
    8e88:	440b      	add	r3, r1
    8e8a:	3310      	adds	r3, #16
    8e8c:	681b      	ldr	r3, [r3, #0]
    8e8e:	461a      	mov	r2, r3
    8e90:	2101      	movs	r1, #1
    8e92:	6838      	ldr	r0, [r7, #0]
    8e94:	4b5d      	ldr	r3, [pc, #372]	; (900c <_tc_timer_init+0x28c>)
    8e96:	4798      	blx	r3
    8e98:	e06a      	b.n	8f70 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8e9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8e9e:	4957      	ldr	r1, [pc, #348]	; (8ffc <_tc_timer_init+0x27c>)
    8ea0:	4613      	mov	r3, r2
    8ea2:	009b      	lsls	r3, r3, #2
    8ea4:	4413      	add	r3, r2
    8ea6:	009b      	lsls	r3, r3, #2
    8ea8:	440b      	add	r3, r1
    8eaa:	3304      	adds	r3, #4
    8eac:	681b      	ldr	r3, [r3, #0]
    8eae:	f003 030c 	and.w	r3, r3, #12
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	d120      	bne.n	8ef8 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8eb6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8eba:	4950      	ldr	r1, [pc, #320]	; (8ffc <_tc_timer_init+0x27c>)
    8ebc:	4613      	mov	r3, r2
    8ebe:	009b      	lsls	r3, r3, #2
    8ec0:	4413      	add	r3, r2
    8ec2:	009b      	lsls	r3, r3, #2
    8ec4:	440b      	add	r3, r1
    8ec6:	330c      	adds	r3, #12
    8ec8:	681b      	ldr	r3, [r3, #0]
    8eca:	b29b      	uxth	r3, r3
    8ecc:	461a      	mov	r2, r3
    8ece:	2100      	movs	r1, #0
    8ed0:	6838      	ldr	r0, [r7, #0]
    8ed2:	4b4f      	ldr	r3, [pc, #316]	; (9010 <_tc_timer_init+0x290>)
    8ed4:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8ed6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8eda:	4948      	ldr	r1, [pc, #288]	; (8ffc <_tc_timer_init+0x27c>)
    8edc:	4613      	mov	r3, r2
    8ede:	009b      	lsls	r3, r3, #2
    8ee0:	4413      	add	r3, r2
    8ee2:	009b      	lsls	r3, r3, #2
    8ee4:	440b      	add	r3, r1
    8ee6:	3310      	adds	r3, #16
    8ee8:	681b      	ldr	r3, [r3, #0]
    8eea:	b29b      	uxth	r3, r3
    8eec:	461a      	mov	r2, r3
    8eee:	2101      	movs	r1, #1
    8ef0:	6838      	ldr	r0, [r7, #0]
    8ef2:	4b47      	ldr	r3, [pc, #284]	; (9010 <_tc_timer_init+0x290>)
    8ef4:	4798      	blx	r3
    8ef6:	e03b      	b.n	8f70 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8ef8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8efc:	493f      	ldr	r1, [pc, #252]	; (8ffc <_tc_timer_init+0x27c>)
    8efe:	4613      	mov	r3, r2
    8f00:	009b      	lsls	r3, r3, #2
    8f02:	4413      	add	r3, r2
    8f04:	009b      	lsls	r3, r3, #2
    8f06:	440b      	add	r3, r1
    8f08:	3304      	adds	r3, #4
    8f0a:	681b      	ldr	r3, [r3, #0]
    8f0c:	f003 030c 	and.w	r3, r3, #12
    8f10:	2b04      	cmp	r3, #4
    8f12:	d12d      	bne.n	8f70 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8f14:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8f18:	4938      	ldr	r1, [pc, #224]	; (8ffc <_tc_timer_init+0x27c>)
    8f1a:	4613      	mov	r3, r2
    8f1c:	009b      	lsls	r3, r3, #2
    8f1e:	4413      	add	r3, r2
    8f20:	009b      	lsls	r3, r3, #2
    8f22:	440b      	add	r3, r1
    8f24:	330c      	adds	r3, #12
    8f26:	681b      	ldr	r3, [r3, #0]
    8f28:	b2db      	uxtb	r3, r3
    8f2a:	461a      	mov	r2, r3
    8f2c:	2100      	movs	r1, #0
    8f2e:	6838      	ldr	r0, [r7, #0]
    8f30:	4b38      	ldr	r3, [pc, #224]	; (9014 <_tc_timer_init+0x294>)
    8f32:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    8f34:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8f38:	4930      	ldr	r1, [pc, #192]	; (8ffc <_tc_timer_init+0x27c>)
    8f3a:	4613      	mov	r3, r2
    8f3c:	009b      	lsls	r3, r3, #2
    8f3e:	4413      	add	r3, r2
    8f40:	009b      	lsls	r3, r3, #2
    8f42:	440b      	add	r3, r1
    8f44:	3310      	adds	r3, #16
    8f46:	681b      	ldr	r3, [r3, #0]
    8f48:	b2db      	uxtb	r3, r3
    8f4a:	461a      	mov	r2, r3
    8f4c:	2101      	movs	r1, #1
    8f4e:	6838      	ldr	r0, [r7, #0]
    8f50:	4b30      	ldr	r3, [pc, #192]	; (9014 <_tc_timer_init+0x294>)
    8f52:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    8f54:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8f58:	4928      	ldr	r1, [pc, #160]	; (8ffc <_tc_timer_init+0x27c>)
    8f5a:	4613      	mov	r3, r2
    8f5c:	009b      	lsls	r3, r3, #2
    8f5e:	4413      	add	r3, r2
    8f60:	009b      	lsls	r3, r3, #2
    8f62:	440b      	add	r3, r1
    8f64:	330b      	adds	r3, #11
    8f66:	781b      	ldrb	r3, [r3, #0]
    8f68:	4619      	mov	r1, r3
    8f6a:	6838      	ldr	r0, [r7, #0]
    8f6c:	4b2a      	ldr	r3, [pc, #168]	; (9018 <_tc_timer_init+0x298>)
    8f6e:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    8f70:	6838      	ldr	r0, [r7, #0]
    8f72:	4b2a      	ldr	r3, [pc, #168]	; (901c <_tc_timer_init+0x29c>)
    8f74:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    8f76:	6879      	ldr	r1, [r7, #4]
    8f78:	6838      	ldr	r0, [r7, #0]
    8f7a:	4b29      	ldr	r3, [pc, #164]	; (9020 <_tc_timer_init+0x2a0>)
    8f7c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8f7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8f82:	491e      	ldr	r1, [pc, #120]	; (8ffc <_tc_timer_init+0x27c>)
    8f84:	4613      	mov	r3, r2
    8f86:	009b      	lsls	r3, r3, #2
    8f88:	4413      	add	r3, r2
    8f8a:	009b      	lsls	r3, r3, #2
    8f8c:	440b      	add	r3, r1
    8f8e:	3302      	adds	r3, #2
    8f90:	f9b3 3000 	ldrsh.w	r3, [r3]
    8f94:	4618      	mov	r0, r3
    8f96:	4b23      	ldr	r3, [pc, #140]	; (9024 <_tc_timer_init+0x2a4>)
    8f98:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8f9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8f9e:	4917      	ldr	r1, [pc, #92]	; (8ffc <_tc_timer_init+0x27c>)
    8fa0:	4613      	mov	r3, r2
    8fa2:	009b      	lsls	r3, r3, #2
    8fa4:	4413      	add	r3, r2
    8fa6:	009b      	lsls	r3, r3, #2
    8fa8:	440b      	add	r3, r1
    8faa:	3302      	adds	r3, #2
    8fac:	f9b3 3000 	ldrsh.w	r3, [r3]
    8fb0:	4618      	mov	r0, r3
    8fb2:	4b1d      	ldr	r3, [pc, #116]	; (9028 <_tc_timer_init+0x2a8>)
    8fb4:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8fb6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8fba:	4910      	ldr	r1, [pc, #64]	; (8ffc <_tc_timer_init+0x27c>)
    8fbc:	4613      	mov	r3, r2
    8fbe:	009b      	lsls	r3, r3, #2
    8fc0:	4413      	add	r3, r2
    8fc2:	009b      	lsls	r3, r3, #2
    8fc4:	440b      	add	r3, r1
    8fc6:	3302      	adds	r3, #2
    8fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
    8fcc:	4618      	mov	r0, r3
    8fce:	4b17      	ldr	r3, [pc, #92]	; (902c <_tc_timer_init+0x2ac>)
    8fd0:	4798      	blx	r3

	return ERR_NONE;
    8fd2:	2300      	movs	r3, #0
}
    8fd4:	4618      	mov	r0, r3
    8fd6:	3710      	adds	r7, #16
    8fd8:	46bd      	mov	sp, r7
    8fda:	bd80      	pop	{r7, pc}
    8fdc:	00009611 	.word	0x00009611
    8fe0:	00010ee0 	.word	0x00010ee0
    8fe4:	00004a95 	.word	0x00004a95
    8fe8:	000089f5 	.word	0x000089f5
    8fec:	00008b95 	.word	0x00008b95
    8ff0:	00008b45 	.word	0x00008b45
    8ff4:	000089d1 	.word	0x000089d1
    8ff8:	00008bc5 	.word	0x00008bc5
    8ffc:	200000e0 	.word	0x200000e0
    9000:	00008c25 	.word	0x00008c25
    9004:	00008be9 	.word	0x00008be9
    9008:	00008c07 	.word	0x00008c07
    900c:	00008d25 	.word	0x00008d25
    9010:	00008cc1 	.word	0x00008cc1
    9014:	00008c91 	.word	0x00008c91
    9018:	00008c45 	.word	0x00008c45
    901c:	00008a79 	.word	0x00008a79
    9020:	00009679 	.word	0x00009679
    9024:	00008951 	.word	0x00008951
    9028:	00008995 	.word	0x00008995
    902c:	00008915 	.word	0x00008915

00009030 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    9030:	b580      	push	{r7, lr}
    9032:	b084      	sub	sp, #16
    9034:	af00      	add	r7, sp, #0
    9036:	6078      	str	r0, [r7, #4]
    9038:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    903a:	6838      	ldr	r0, [r7, #0]
    903c:	4b73      	ldr	r3, [pc, #460]	; (920c <_pwm_init+0x1dc>)
    903e:	4798      	blx	r3
    9040:	4603      	mov	r3, r0
    9042:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    9044:	687b      	ldr	r3, [r7, #4]
    9046:	683a      	ldr	r2, [r7, #0]
    9048:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    904a:	2101      	movs	r1, #1
    904c:	6838      	ldr	r0, [r7, #0]
    904e:	4b70      	ldr	r3, [pc, #448]	; (9210 <_pwm_init+0x1e0>)
    9050:	4798      	blx	r3
    9052:	4603      	mov	r3, r0
    9054:	f083 0301 	eor.w	r3, r3, #1
    9058:	b2db      	uxtb	r3, r3
    905a:	2b00      	cmp	r3, #0
    905c:	d011      	beq.n	9082 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    905e:	2102      	movs	r1, #2
    9060:	6838      	ldr	r0, [r7, #0]
    9062:	4b6c      	ldr	r3, [pc, #432]	; (9214 <_pwm_init+0x1e4>)
    9064:	4798      	blx	r3
    9066:	4603      	mov	r3, r0
    9068:	2b00      	cmp	r3, #0
    906a:	d006      	beq.n	907a <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    906c:	6838      	ldr	r0, [r7, #0]
    906e:	4b6a      	ldr	r3, [pc, #424]	; (9218 <_pwm_init+0x1e8>)
    9070:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9072:	2102      	movs	r1, #2
    9074:	6838      	ldr	r0, [r7, #0]
    9076:	4b69      	ldr	r3, [pc, #420]	; (921c <_pwm_init+0x1ec>)
    9078:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    907a:	2101      	movs	r1, #1
    907c:	6838      	ldr	r0, [r7, #0]
    907e:	4b68      	ldr	r3, [pc, #416]	; (9220 <_pwm_init+0x1f0>)
    9080:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9082:	2101      	movs	r1, #1
    9084:	6838      	ldr	r0, [r7, #0]
    9086:	4b65      	ldr	r3, [pc, #404]	; (921c <_pwm_init+0x1ec>)
    9088:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    908a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    908e:	4965      	ldr	r1, [pc, #404]	; (9224 <_pwm_init+0x1f4>)
    9090:	4613      	mov	r3, r2
    9092:	009b      	lsls	r3, r3, #2
    9094:	4413      	add	r3, r2
    9096:	009b      	lsls	r3, r3, #2
    9098:	440b      	add	r3, r1
    909a:	3304      	adds	r3, #4
    909c:	681b      	ldr	r3, [r3, #0]
    909e:	4619      	mov	r1, r3
    90a0:	6838      	ldr	r0, [r7, #0]
    90a2:	4b5f      	ldr	r3, [pc, #380]	; (9220 <_pwm_init+0x1f0>)
    90a4:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    90a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    90aa:	495e      	ldr	r1, [pc, #376]	; (9224 <_pwm_init+0x1f4>)
    90ac:	4613      	mov	r3, r2
    90ae:	009b      	lsls	r3, r3, #2
    90b0:	4413      	add	r3, r2
    90b2:	009b      	lsls	r3, r3, #2
    90b4:	440b      	add	r3, r1
    90b6:	330a      	adds	r3, #10
    90b8:	781b      	ldrb	r3, [r3, #0]
    90ba:	4619      	mov	r1, r3
    90bc:	6838      	ldr	r0, [r7, #0]
    90be:	4b5a      	ldr	r3, [pc, #360]	; (9228 <_pwm_init+0x1f8>)
    90c0:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    90c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    90c6:	4957      	ldr	r1, [pc, #348]	; (9224 <_pwm_init+0x1f4>)
    90c8:	4613      	mov	r3, r2
    90ca:	009b      	lsls	r3, r3, #2
    90cc:	4413      	add	r3, r2
    90ce:	009b      	lsls	r3, r3, #2
    90d0:	440b      	add	r3, r1
    90d2:	3308      	adds	r3, #8
    90d4:	881b      	ldrh	r3, [r3, #0]
    90d6:	4619      	mov	r1, r3
    90d8:	6838      	ldr	r0, [r7, #0]
    90da:	4b54      	ldr	r3, [pc, #336]	; (922c <_pwm_init+0x1fc>)
    90dc:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    90de:	2103      	movs	r1, #3
    90e0:	6838      	ldr	r0, [r7, #0]
    90e2:	4b53      	ldr	r3, [pc, #332]	; (9230 <_pwm_init+0x200>)
    90e4:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    90e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    90ea:	494e      	ldr	r1, [pc, #312]	; (9224 <_pwm_init+0x1f4>)
    90ec:	4613      	mov	r3, r2
    90ee:	009b      	lsls	r3, r3, #2
    90f0:	4413      	add	r3, r2
    90f2:	009b      	lsls	r3, r3, #2
    90f4:	440b      	add	r3, r1
    90f6:	3304      	adds	r3, #4
    90f8:	681b      	ldr	r3, [r3, #0]
    90fa:	f003 030c 	and.w	r3, r3, #12
    90fe:	2b08      	cmp	r3, #8
    9100:	d11e      	bne.n	9140 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9102:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9106:	4947      	ldr	r1, [pc, #284]	; (9224 <_pwm_init+0x1f4>)
    9108:	4613      	mov	r3, r2
    910a:	009b      	lsls	r3, r3, #2
    910c:	4413      	add	r3, r2
    910e:	009b      	lsls	r3, r3, #2
    9110:	440b      	add	r3, r1
    9112:	330c      	adds	r3, #12
    9114:	681b      	ldr	r3, [r3, #0]
    9116:	461a      	mov	r2, r3
    9118:	2100      	movs	r1, #0
    911a:	6838      	ldr	r0, [r7, #0]
    911c:	4b45      	ldr	r3, [pc, #276]	; (9234 <_pwm_init+0x204>)
    911e:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9120:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9124:	493f      	ldr	r1, [pc, #252]	; (9224 <_pwm_init+0x1f4>)
    9126:	4613      	mov	r3, r2
    9128:	009b      	lsls	r3, r3, #2
    912a:	4413      	add	r3, r2
    912c:	009b      	lsls	r3, r3, #2
    912e:	440b      	add	r3, r1
    9130:	3310      	adds	r3, #16
    9132:	681b      	ldr	r3, [r3, #0]
    9134:	461a      	mov	r2, r3
    9136:	2101      	movs	r1, #1
    9138:	6838      	ldr	r0, [r7, #0]
    913a:	4b3e      	ldr	r3, [pc, #248]	; (9234 <_pwm_init+0x204>)
    913c:	4798      	blx	r3
    913e:	e031      	b.n	91a4 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9140:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9144:	4937      	ldr	r1, [pc, #220]	; (9224 <_pwm_init+0x1f4>)
    9146:	4613      	mov	r3, r2
    9148:	009b      	lsls	r3, r3, #2
    914a:	4413      	add	r3, r2
    914c:	009b      	lsls	r3, r3, #2
    914e:	440b      	add	r3, r1
    9150:	3304      	adds	r3, #4
    9152:	681b      	ldr	r3, [r3, #0]
    9154:	f003 030c 	and.w	r3, r3, #12
    9158:	2b00      	cmp	r3, #0
    915a:	d120      	bne.n	919e <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    915c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9160:	4930      	ldr	r1, [pc, #192]	; (9224 <_pwm_init+0x1f4>)
    9162:	4613      	mov	r3, r2
    9164:	009b      	lsls	r3, r3, #2
    9166:	4413      	add	r3, r2
    9168:	009b      	lsls	r3, r3, #2
    916a:	440b      	add	r3, r1
    916c:	330c      	adds	r3, #12
    916e:	681b      	ldr	r3, [r3, #0]
    9170:	b29b      	uxth	r3, r3
    9172:	461a      	mov	r2, r3
    9174:	2100      	movs	r1, #0
    9176:	6838      	ldr	r0, [r7, #0]
    9178:	4b2f      	ldr	r3, [pc, #188]	; (9238 <_pwm_init+0x208>)
    917a:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    917c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9180:	4928      	ldr	r1, [pc, #160]	; (9224 <_pwm_init+0x1f4>)
    9182:	4613      	mov	r3, r2
    9184:	009b      	lsls	r3, r3, #2
    9186:	4413      	add	r3, r2
    9188:	009b      	lsls	r3, r3, #2
    918a:	440b      	add	r3, r1
    918c:	3310      	adds	r3, #16
    918e:	681b      	ldr	r3, [r3, #0]
    9190:	b29b      	uxth	r3, r3
    9192:	461a      	mov	r2, r3
    9194:	2101      	movs	r1, #1
    9196:	6838      	ldr	r0, [r7, #0]
    9198:	4b27      	ldr	r3, [pc, #156]	; (9238 <_pwm_init+0x208>)
    919a:	4798      	blx	r3
    919c:	e002      	b.n	91a4 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    919e:	f04f 33ff 	mov.w	r3, #4294967295
    91a2:	e02e      	b.n	9202 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    91a4:	6879      	ldr	r1, [r7, #4]
    91a6:	6838      	ldr	r0, [r7, #0]
    91a8:	4b24      	ldr	r3, [pc, #144]	; (923c <_pwm_init+0x20c>)
    91aa:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    91ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    91b0:	491c      	ldr	r1, [pc, #112]	; (9224 <_pwm_init+0x1f4>)
    91b2:	4613      	mov	r3, r2
    91b4:	009b      	lsls	r3, r3, #2
    91b6:	4413      	add	r3, r2
    91b8:	009b      	lsls	r3, r3, #2
    91ba:	440b      	add	r3, r1
    91bc:	3302      	adds	r3, #2
    91be:	f9b3 3000 	ldrsh.w	r3, [r3]
    91c2:	4618      	mov	r0, r3
    91c4:	4b1e      	ldr	r3, [pc, #120]	; (9240 <_pwm_init+0x210>)
    91c6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    91c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    91cc:	4915      	ldr	r1, [pc, #84]	; (9224 <_pwm_init+0x1f4>)
    91ce:	4613      	mov	r3, r2
    91d0:	009b      	lsls	r3, r3, #2
    91d2:	4413      	add	r3, r2
    91d4:	009b      	lsls	r3, r3, #2
    91d6:	440b      	add	r3, r1
    91d8:	3302      	adds	r3, #2
    91da:	f9b3 3000 	ldrsh.w	r3, [r3]
    91de:	4618      	mov	r0, r3
    91e0:	4b18      	ldr	r3, [pc, #96]	; (9244 <_pwm_init+0x214>)
    91e2:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    91e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    91e8:	490e      	ldr	r1, [pc, #56]	; (9224 <_pwm_init+0x1f4>)
    91ea:	4613      	mov	r3, r2
    91ec:	009b      	lsls	r3, r3, #2
    91ee:	4413      	add	r3, r2
    91f0:	009b      	lsls	r3, r3, #2
    91f2:	440b      	add	r3, r1
    91f4:	3302      	adds	r3, #2
    91f6:	f9b3 3000 	ldrsh.w	r3, [r3]
    91fa:	4618      	mov	r0, r3
    91fc:	4b12      	ldr	r3, [pc, #72]	; (9248 <_pwm_init+0x218>)
    91fe:	4798      	blx	r3

	return 0;
    9200:	2300      	movs	r3, #0
}
    9202:	4618      	mov	r0, r3
    9204:	3710      	adds	r7, #16
    9206:	46bd      	mov	sp, r7
    9208:	bd80      	pop	{r7, pc}
    920a:	bf00      	nop
    920c:	00009611 	.word	0x00009611
    9210:	000089f5 	.word	0x000089f5
    9214:	00008b95 	.word	0x00008b95
    9218:	00008b45 	.word	0x00008b45
    921c:	000089d1 	.word	0x000089d1
    9220:	00008bc5 	.word	0x00008bc5
    9224:	200000e0 	.word	0x200000e0
    9228:	00008c25 	.word	0x00008c25
    922c:	00008be9 	.word	0x00008be9
    9230:	00008c07 	.word	0x00008c07
    9234:	00008d25 	.word	0x00008d25
    9238:	00008cc1 	.word	0x00008cc1
    923c:	00009679 	.word	0x00009679
    9240:	00008951 	.word	0x00008951
    9244:	00008995 	.word	0x00008995
    9248:	00008915 	.word	0x00008915

0000924c <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    924c:	b580      	push	{r7, lr}
    924e:	b084      	sub	sp, #16
    9250:	af00      	add	r7, sp, #0
    9252:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9254:	687b      	ldr	r3, [r7, #4]
    9256:	68db      	ldr	r3, [r3, #12]
    9258:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    925a:	68f8      	ldr	r0, [r7, #12]
    925c:	4b10      	ldr	r3, [pc, #64]	; (92a0 <_tc_timer_deinit+0x54>)
    925e:	4798      	blx	r3
    9260:	4603      	mov	r3, r0
    9262:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9264:	22f9      	movs	r2, #249	; 0xf9
    9266:	490f      	ldr	r1, [pc, #60]	; (92a4 <_tc_timer_deinit+0x58>)
    9268:	2001      	movs	r0, #1
    926a:	4b0f      	ldr	r3, [pc, #60]	; (92a8 <_tc_timer_deinit+0x5c>)
    926c:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    926e:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9272:	490e      	ldr	r1, [pc, #56]	; (92ac <_tc_timer_deinit+0x60>)
    9274:	4613      	mov	r3, r2
    9276:	009b      	lsls	r3, r3, #2
    9278:	4413      	add	r3, r2
    927a:	009b      	lsls	r3, r3, #2
    927c:	440b      	add	r3, r1
    927e:	3302      	adds	r3, #2
    9280:	f9b3 3000 	ldrsh.w	r3, [r3]
    9284:	4618      	mov	r0, r3
    9286:	4b0a      	ldr	r3, [pc, #40]	; (92b0 <_tc_timer_deinit+0x64>)
    9288:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    928a:	68f8      	ldr	r0, [r7, #12]
    928c:	4b09      	ldr	r3, [pc, #36]	; (92b4 <_tc_timer_deinit+0x68>)
    928e:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    9290:	68f8      	ldr	r0, [r7, #12]
    9292:	4b09      	ldr	r3, [pc, #36]	; (92b8 <_tc_timer_deinit+0x6c>)
    9294:	4798      	blx	r3
}
    9296:	bf00      	nop
    9298:	3710      	adds	r7, #16
    929a:	46bd      	mov	sp, r7
    929c:	bd80      	pop	{r7, pc}
    929e:	bf00      	nop
    92a0:	00009611 	.word	0x00009611
    92a4:	00010ee0 	.word	0x00010ee0
    92a8:	00004a95 	.word	0x00004a95
    92ac:	200000e0 	.word	0x200000e0
    92b0:	00008951 	.word	0x00008951
    92b4:	00008b45 	.word	0x00008b45
    92b8:	00008abd 	.word	0x00008abd

000092bc <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    92bc:	b580      	push	{r7, lr}
    92be:	b082      	sub	sp, #8
    92c0:	af00      	add	r7, sp, #0
    92c2:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	68db      	ldr	r3, [r3, #12]
    92c8:	4618      	mov	r0, r3
    92ca:	4b03      	ldr	r3, [pc, #12]	; (92d8 <_tc_timer_start+0x1c>)
    92cc:	4798      	blx	r3
}
    92ce:	bf00      	nop
    92d0:	3708      	adds	r7, #8
    92d2:	46bd      	mov	sp, r7
    92d4:	bd80      	pop	{r7, pc}
    92d6:	bf00      	nop
    92d8:	00008ae5 	.word	0x00008ae5

000092dc <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    92dc:	b580      	push	{r7, lr}
    92de:	b082      	sub	sp, #8
    92e0:	af00      	add	r7, sp, #0
    92e2:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    92e4:	687b      	ldr	r3, [r7, #4]
    92e6:	691b      	ldr	r3, [r3, #16]
    92e8:	4618      	mov	r0, r3
    92ea:	4b03      	ldr	r3, [pc, #12]	; (92f8 <_pwm_enable+0x1c>)
    92ec:	4798      	blx	r3
}
    92ee:	bf00      	nop
    92f0:	3708      	adds	r7, #8
    92f2:	46bd      	mov	sp, r7
    92f4:	bd80      	pop	{r7, pc}
    92f6:	bf00      	nop
    92f8:	00008ae5 	.word	0x00008ae5

000092fc <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    92fc:	b580      	push	{r7, lr}
    92fe:	b082      	sub	sp, #8
    9300:	af00      	add	r7, sp, #0
    9302:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    9304:	687b      	ldr	r3, [r7, #4]
    9306:	68db      	ldr	r3, [r3, #12]
    9308:	4618      	mov	r0, r3
    930a:	4b03      	ldr	r3, [pc, #12]	; (9318 <_tc_timer_stop+0x1c>)
    930c:	4798      	blx	r3
}
    930e:	bf00      	nop
    9310:	3708      	adds	r7, #8
    9312:	46bd      	mov	sp, r7
    9314:	bd80      	pop	{r7, pc}
    9316:	bf00      	nop
    9318:	00008b45 	.word	0x00008b45

0000931c <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    931c:	b580      	push	{r7, lr}
    931e:	b084      	sub	sp, #16
    9320:	af00      	add	r7, sp, #0
    9322:	6078      	str	r0, [r7, #4]
    9324:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    9326:	687b      	ldr	r3, [r7, #4]
    9328:	68db      	ldr	r3, [r3, #12]
    932a:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    932c:	68f8      	ldr	r0, [r7, #12]
    932e:	4b14      	ldr	r3, [pc, #80]	; (9380 <_tc_timer_set_period+0x64>)
    9330:	4798      	blx	r3
    9332:	4603      	mov	r3, r0
    9334:	2b02      	cmp	r3, #2
    9336:	d105      	bne.n	9344 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    9338:	683a      	ldr	r2, [r7, #0]
    933a:	2100      	movs	r1, #0
    933c:	68f8      	ldr	r0, [r7, #12]
    933e:	4b11      	ldr	r3, [pc, #68]	; (9384 <_tc_timer_set_period+0x68>)
    9340:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    9342:	e019      	b.n	9378 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9344:	68f8      	ldr	r0, [r7, #12]
    9346:	4b0e      	ldr	r3, [pc, #56]	; (9380 <_tc_timer_set_period+0x64>)
    9348:	4798      	blx	r3
    934a:	4603      	mov	r3, r0
    934c:	2b00      	cmp	r3, #0
    934e:	d107      	bne.n	9360 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    9350:	683b      	ldr	r3, [r7, #0]
    9352:	b29b      	uxth	r3, r3
    9354:	461a      	mov	r2, r3
    9356:	2100      	movs	r1, #0
    9358:	68f8      	ldr	r0, [r7, #12]
    935a:	4b0b      	ldr	r3, [pc, #44]	; (9388 <_tc_timer_set_period+0x6c>)
    935c:	4798      	blx	r3
}
    935e:	e00b      	b.n	9378 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9360:	68f8      	ldr	r0, [r7, #12]
    9362:	4b07      	ldr	r3, [pc, #28]	; (9380 <_tc_timer_set_period+0x64>)
    9364:	4798      	blx	r3
    9366:	4603      	mov	r3, r0
    9368:	2b01      	cmp	r3, #1
    936a:	d105      	bne.n	9378 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    936c:	683b      	ldr	r3, [r7, #0]
    936e:	b2db      	uxtb	r3, r3
    9370:	4619      	mov	r1, r3
    9372:	68f8      	ldr	r0, [r7, #12]
    9374:	4b05      	ldr	r3, [pc, #20]	; (938c <_tc_timer_set_period+0x70>)
    9376:	4798      	blx	r3
}
    9378:	bf00      	nop
    937a:	3710      	adds	r7, #16
    937c:	46bd      	mov	sp, r7
    937e:	bd80      	pop	{r7, pc}
    9380:	00008b6d 	.word	0x00008b6d
    9384:	00008d25 	.word	0x00008d25
    9388:	00008cc1 	.word	0x00008cc1
    938c:	00008c45 	.word	0x00008c45

00009390 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    9390:	b580      	push	{r7, lr}
    9392:	b084      	sub	sp, #16
    9394:	af00      	add	r7, sp, #0
    9396:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9398:	687b      	ldr	r3, [r7, #4]
    939a:	68db      	ldr	r3, [r3, #12]
    939c:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    939e:	68f8      	ldr	r0, [r7, #12]
    93a0:	4b13      	ldr	r3, [pc, #76]	; (93f0 <_tc_timer_get_period+0x60>)
    93a2:	4798      	blx	r3
    93a4:	4603      	mov	r3, r0
    93a6:	2b02      	cmp	r3, #2
    93a8:	d105      	bne.n	93b6 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    93aa:	2100      	movs	r1, #0
    93ac:	68f8      	ldr	r0, [r7, #12]
    93ae:	4b11      	ldr	r3, [pc, #68]	; (93f4 <_tc_timer_get_period+0x64>)
    93b0:	4798      	blx	r3
    93b2:	4603      	mov	r3, r0
    93b4:	e017      	b.n	93e6 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    93b6:	68f8      	ldr	r0, [r7, #12]
    93b8:	4b0d      	ldr	r3, [pc, #52]	; (93f0 <_tc_timer_get_period+0x60>)
    93ba:	4798      	blx	r3
    93bc:	4603      	mov	r3, r0
    93be:	2b00      	cmp	r3, #0
    93c0:	d105      	bne.n	93ce <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    93c2:	2100      	movs	r1, #0
    93c4:	68f8      	ldr	r0, [r7, #12]
    93c6:	4b0c      	ldr	r3, [pc, #48]	; (93f8 <_tc_timer_get_period+0x68>)
    93c8:	4798      	blx	r3
    93ca:	4603      	mov	r3, r0
    93cc:	e00b      	b.n	93e6 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    93ce:	68f8      	ldr	r0, [r7, #12]
    93d0:	4b07      	ldr	r3, [pc, #28]	; (93f0 <_tc_timer_get_period+0x60>)
    93d2:	4798      	blx	r3
    93d4:	4603      	mov	r3, r0
    93d6:	2b01      	cmp	r3, #1
    93d8:	d104      	bne.n	93e4 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    93da:	68f8      	ldr	r0, [r7, #12]
    93dc:	4b07      	ldr	r3, [pc, #28]	; (93fc <_tc_timer_get_period+0x6c>)
    93de:	4798      	blx	r3
    93e0:	4603      	mov	r3, r0
    93e2:	e000      	b.n	93e6 <_tc_timer_get_period+0x56>
	}

	return 0;
    93e4:	2300      	movs	r3, #0
}
    93e6:	4618      	mov	r0, r3
    93e8:	3710      	adds	r7, #16
    93ea:	46bd      	mov	sp, r7
    93ec:	bd80      	pop	{r7, pc}
    93ee:	bf00      	nop
    93f0:	00008b6d 	.word	0x00008b6d
    93f4:	00008d55 	.word	0x00008d55
    93f8:	00008cf5 	.word	0x00008cf5
    93fc:	00008c6d 	.word	0x00008c6d

00009400 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    9400:	b580      	push	{r7, lr}
    9402:	b082      	sub	sp, #8
    9404:	af00      	add	r7, sp, #0
    9406:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    9408:	687b      	ldr	r3, [r7, #4]
    940a:	68db      	ldr	r3, [r3, #12]
    940c:	4618      	mov	r0, r3
    940e:	4b03      	ldr	r3, [pc, #12]	; (941c <_tc_timer_is_started+0x1c>)
    9410:	4798      	blx	r3
    9412:	4603      	mov	r3, r0
}
    9414:	4618      	mov	r0, r3
    9416:	3708      	adds	r7, #8
    9418:	46bd      	mov	sp, r7
    941a:	bd80      	pop	{r7, pc}
    941c:	00008b0d 	.word	0x00008b0d

00009420 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    9420:	b580      	push	{r7, lr}
    9422:	b082      	sub	sp, #8
    9424:	af00      	add	r7, sp, #0
    9426:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    9428:	687b      	ldr	r3, [r7, #4]
    942a:	691b      	ldr	r3, [r3, #16]
    942c:	4618      	mov	r0, r3
    942e:	4b03      	ldr	r3, [pc, #12]	; (943c <_pwm_is_enabled+0x1c>)
    9430:	4798      	blx	r3
    9432:	4603      	mov	r3, r0
}
    9434:	4618      	mov	r0, r3
    9436:	3708      	adds	r7, #8
    9438:	46bd      	mov	sp, r7
    943a:	bd80      	pop	{r7, pc}
    943c:	00008b0d 	.word	0x00008b0d

00009440 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    9440:	b480      	push	{r7}
    9442:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    9444:	4b02      	ldr	r3, [pc, #8]	; (9450 <_tc_get_timer+0x10>)
}
    9446:	4618      	mov	r0, r3
    9448:	46bd      	mov	sp, r7
    944a:	f85d 7b04 	ldr.w	r7, [sp], #4
    944e:	4770      	bx	lr
    9450:	20000158 	.word	0x20000158

00009454 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    9454:	b480      	push	{r7}
    9456:	af00      	add	r7, sp, #0
	return NULL;
    9458:	2300      	movs	r3, #0
}
    945a:	4618      	mov	r0, r3
    945c:	46bd      	mov	sp, r7
    945e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9462:	4770      	bx	lr

00009464 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    9464:	b580      	push	{r7, lr}
    9466:	b084      	sub	sp, #16
    9468:	af00      	add	r7, sp, #0
    946a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    946c:	687b      	ldr	r3, [r7, #4]
    946e:	68db      	ldr	r3, [r3, #12]
    9470:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9472:	68f8      	ldr	r0, [r7, #12]
    9474:	4b0e      	ldr	r3, [pc, #56]	; (94b0 <_tc_timer_set_irq+0x4c>)
    9476:	4798      	blx	r3
    9478:	4603      	mov	r3, r0
    947a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    947c:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    9480:	490c      	ldr	r1, [pc, #48]	; (94b4 <_tc_timer_set_irq+0x50>)
    9482:	2001      	movs	r0, #1
    9484:	4b0c      	ldr	r3, [pc, #48]	; (94b8 <_tc_timer_set_irq+0x54>)
    9486:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    9488:	f997 200b 	ldrsb.w	r2, [r7, #11]
    948c:	490b      	ldr	r1, [pc, #44]	; (94bc <_tc_timer_set_irq+0x58>)
    948e:	4613      	mov	r3, r2
    9490:	009b      	lsls	r3, r3, #2
    9492:	4413      	add	r3, r2
    9494:	009b      	lsls	r3, r3, #2
    9496:	440b      	add	r3, r1
    9498:	3302      	adds	r3, #2
    949a:	f9b3 3000 	ldrsh.w	r3, [r3]
    949e:	b2db      	uxtb	r3, r3
    94a0:	4618      	mov	r0, r3
    94a2:	4b07      	ldr	r3, [pc, #28]	; (94c0 <_tc_timer_set_irq+0x5c>)
    94a4:	4798      	blx	r3
}
    94a6:	bf00      	nop
    94a8:	3710      	adds	r7, #16
    94aa:	46bd      	mov	sp, r7
    94ac:	bd80      	pop	{r7, pc}
    94ae:	bf00      	nop
    94b0:	00009611 	.word	0x00009611
    94b4:	00010ee0 	.word	0x00010ee0
    94b8:	00004a95 	.word	0x00004a95
    94bc:	200000e0 	.word	0x200000e0
    94c0:	000052e1 	.word	0x000052e1

000094c4 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    94c4:	b580      	push	{r7, lr}
    94c6:	b084      	sub	sp, #16
    94c8:	af00      	add	r7, sp, #0
    94ca:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    94cc:	687b      	ldr	r3, [r7, #4]
    94ce:	68db      	ldr	r3, [r3, #12]
    94d0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    94d2:	68f8      	ldr	r0, [r7, #12]
    94d4:	4b07      	ldr	r3, [pc, #28]	; (94f4 <tc_interrupt_handler+0x30>)
    94d6:	4798      	blx	r3
    94d8:	4603      	mov	r3, r0
    94da:	2b00      	cmp	r3, #0
    94dc:	d006      	beq.n	94ec <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    94de:	68f8      	ldr	r0, [r7, #12]
    94e0:	4b05      	ldr	r3, [pc, #20]	; (94f8 <tc_interrupt_handler+0x34>)
    94e2:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    94e4:	687b      	ldr	r3, [r7, #4]
    94e6:	681b      	ldr	r3, [r3, #0]
    94e8:	6878      	ldr	r0, [r7, #4]
    94ea:	4798      	blx	r3
	}
}
    94ec:	bf00      	nop
    94ee:	3710      	adds	r7, #16
    94f0:	46bd      	mov	sp, r7
    94f2:	bd80      	pop	{r7, pc}
    94f4:	00008a1d 	.word	0x00008a1d
    94f8:	00008a45 	.word	0x00008a45

000094fc <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    94fc:	b580      	push	{r7, lr}
    94fe:	b084      	sub	sp, #16
    9500:	af00      	add	r7, sp, #0
    9502:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9504:	687b      	ldr	r3, [r7, #4]
    9506:	691b      	ldr	r3, [r3, #16]
    9508:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    950a:	68f8      	ldr	r0, [r7, #12]
    950c:	4b12      	ldr	r3, [pc, #72]	; (9558 <tc_pwm_interrupt_handler+0x5c>)
    950e:	4798      	blx	r3
    9510:	4603      	mov	r3, r0
    9512:	2b00      	cmp	r3, #0
    9514:	d00a      	beq.n	952c <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    9516:	68f8      	ldr	r0, [r7, #12]
    9518:	4b10      	ldr	r3, [pc, #64]	; (955c <tc_pwm_interrupt_handler+0x60>)
    951a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    951c:	687b      	ldr	r3, [r7, #4]
    951e:	681b      	ldr	r3, [r3, #0]
    9520:	2b00      	cmp	r3, #0
    9522:	d003      	beq.n	952c <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    9524:	687b      	ldr	r3, [r7, #4]
    9526:	681b      	ldr	r3, [r3, #0]
    9528:	6878      	ldr	r0, [r7, #4]
    952a:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    952c:	68f8      	ldr	r0, [r7, #12]
    952e:	4b0c      	ldr	r3, [pc, #48]	; (9560 <tc_pwm_interrupt_handler+0x64>)
    9530:	4798      	blx	r3
    9532:	4603      	mov	r3, r0
    9534:	2b00      	cmp	r3, #0
    9536:	d00a      	beq.n	954e <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    9538:	68f8      	ldr	r0, [r7, #12]
    953a:	4b0a      	ldr	r3, [pc, #40]	; (9564 <tc_pwm_interrupt_handler+0x68>)
    953c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    953e:	687b      	ldr	r3, [r7, #4]
    9540:	685b      	ldr	r3, [r3, #4]
    9542:	2b00      	cmp	r3, #0
    9544:	d003      	beq.n	954e <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    9546:	687b      	ldr	r3, [r7, #4]
    9548:	685b      	ldr	r3, [r3, #4]
    954a:	6878      	ldr	r0, [r7, #4]
    954c:	4798      	blx	r3
		}
	}
}
    954e:	bf00      	nop
    9550:	3710      	adds	r7, #16
    9552:	46bd      	mov	sp, r7
    9554:	bd80      	pop	{r7, pc}
    9556:	bf00      	nop
    9558:	00008a1d 	.word	0x00008a1d
    955c:	00008a45 	.word	0x00008a45
    9560:	00008a93 	.word	0x00008a93
    9564:	00008a5f 	.word	0x00008a5f

00009568 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    9568:	b580      	push	{r7, lr}
    956a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    956c:	4b03      	ldr	r3, [pc, #12]	; (957c <TC0_Handler+0x14>)
    956e:	681b      	ldr	r3, [r3, #0]
    9570:	4618      	mov	r0, r3
    9572:	4b03      	ldr	r3, [pc, #12]	; (9580 <TC0_Handler+0x18>)
    9574:	4798      	blx	r3
}
    9576:	bf00      	nop
    9578:	bd80      	pop	{r7, pc}
    957a:	bf00      	nop
    957c:	200009e0 	.word	0x200009e0
    9580:	000094c5 	.word	0x000094c5

00009584 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    9584:	b580      	push	{r7, lr}
    9586:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    9588:	4b03      	ldr	r3, [pc, #12]	; (9598 <TC2_Handler+0x14>)
    958a:	681b      	ldr	r3, [r3, #0]
    958c:	4618      	mov	r0, r3
    958e:	4b03      	ldr	r3, [pc, #12]	; (959c <TC2_Handler+0x18>)
    9590:	4798      	blx	r3
}
    9592:	bf00      	nop
    9594:	bd80      	pop	{r7, pc}
    9596:	bf00      	nop
    9598:	200009e4 	.word	0x200009e4
    959c:	000094c5 	.word	0x000094c5

000095a0 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    95a0:	b580      	push	{r7, lr}
    95a2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    95a4:	4b03      	ldr	r3, [pc, #12]	; (95b4 <TC4_Handler+0x14>)
    95a6:	681b      	ldr	r3, [r3, #0]
    95a8:	4618      	mov	r0, r3
    95aa:	4b03      	ldr	r3, [pc, #12]	; (95b8 <TC4_Handler+0x18>)
    95ac:	4798      	blx	r3
}
    95ae:	bf00      	nop
    95b0:	bd80      	pop	{r7, pc}
    95b2:	bf00      	nop
    95b4:	200009e8 	.word	0x200009e8
    95b8:	000094c5 	.word	0x000094c5

000095bc <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    95bc:	b580      	push	{r7, lr}
    95be:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    95c0:	4b03      	ldr	r3, [pc, #12]	; (95d0 <TC5_Handler+0x14>)
    95c2:	681b      	ldr	r3, [r3, #0]
    95c4:	4618      	mov	r0, r3
    95c6:	4b03      	ldr	r3, [pc, #12]	; (95d4 <TC5_Handler+0x18>)
    95c8:	4798      	blx	r3
}
    95ca:	bf00      	nop
    95cc:	bd80      	pop	{r7, pc}
    95ce:	bf00      	nop
    95d0:	200009ec 	.word	0x200009ec
    95d4:	000094c5 	.word	0x000094c5

000095d8 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    95d8:	b580      	push	{r7, lr}
    95da:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    95dc:	4b03      	ldr	r3, [pc, #12]	; (95ec <TC6_Handler+0x14>)
    95de:	681b      	ldr	r3, [r3, #0]
    95e0:	4618      	mov	r0, r3
    95e2:	4b03      	ldr	r3, [pc, #12]	; (95f0 <TC6_Handler+0x18>)
    95e4:	4798      	blx	r3
}
    95e6:	bf00      	nop
    95e8:	bd80      	pop	{r7, pc}
    95ea:	bf00      	nop
    95ec:	200009f0 	.word	0x200009f0
    95f0:	000094c5 	.word	0x000094c5

000095f4 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    95f4:	b580      	push	{r7, lr}
    95f6:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    95f8:	4b03      	ldr	r3, [pc, #12]	; (9608 <TC7_Handler+0x14>)
    95fa:	681b      	ldr	r3, [r3, #0]
    95fc:	4618      	mov	r0, r3
    95fe:	4b03      	ldr	r3, [pc, #12]	; (960c <TC7_Handler+0x18>)
    9600:	4798      	blx	r3
}
    9602:	bf00      	nop
    9604:	bd80      	pop	{r7, pc}
    9606:	bf00      	nop
    9608:	200009f4 	.word	0x200009f4
    960c:	000094fd 	.word	0x000094fd

00009610 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    9610:	b580      	push	{r7, lr}
    9612:	b084      	sub	sp, #16
    9614:	af00      	add	r7, sp, #0
    9616:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    9618:	6878      	ldr	r0, [r7, #4]
    961a:	4b13      	ldr	r3, [pc, #76]	; (9668 <get_tc_index+0x58>)
    961c:	4798      	blx	r3
    961e:	4603      	mov	r3, r0
    9620:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9622:	2300      	movs	r3, #0
    9624:	73fb      	strb	r3, [r7, #15]
    9626:	e010      	b.n	964a <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    9628:	7bfa      	ldrb	r2, [r7, #15]
    962a:	4910      	ldr	r1, [pc, #64]	; (966c <get_tc_index+0x5c>)
    962c:	4613      	mov	r3, r2
    962e:	009b      	lsls	r3, r3, #2
    9630:	4413      	add	r3, r2
    9632:	009b      	lsls	r3, r3, #2
    9634:	440b      	add	r3, r1
    9636:	781b      	ldrb	r3, [r3, #0]
    9638:	7bba      	ldrb	r2, [r7, #14]
    963a:	429a      	cmp	r2, r3
    963c:	d102      	bne.n	9644 <get_tc_index+0x34>
			return i;
    963e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9642:	e00d      	b.n	9660 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9644:	7bfb      	ldrb	r3, [r7, #15]
    9646:	3301      	adds	r3, #1
    9648:	73fb      	strb	r3, [r7, #15]
    964a:	7bfb      	ldrb	r3, [r7, #15]
    964c:	2b05      	cmp	r3, #5
    964e:	d9eb      	bls.n	9628 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    9650:	f240 221d 	movw	r2, #541	; 0x21d
    9654:	4906      	ldr	r1, [pc, #24]	; (9670 <get_tc_index+0x60>)
    9656:	2000      	movs	r0, #0
    9658:	4b06      	ldr	r3, [pc, #24]	; (9674 <get_tc_index+0x64>)
    965a:	4798      	blx	r3
	return -1;
    965c:	f04f 33ff 	mov.w	r3, #4294967295
}
    9660:	4618      	mov	r0, r3
    9662:	3710      	adds	r7, #16
    9664:	46bd      	mov	sp, r7
    9666:	bd80      	pop	{r7, pc}
    9668:	00009715 	.word	0x00009715
    966c:	200000e0 	.word	0x200000e0
    9670:	00010ee0 	.word	0x00010ee0
    9674:	00004a95 	.word	0x00004a95

00009678 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    9678:	b480      	push	{r7}
    967a:	b083      	sub	sp, #12
    967c:	af00      	add	r7, sp, #0
    967e:	6078      	str	r0, [r7, #4]
    9680:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    9682:	687b      	ldr	r3, [r7, #4]
    9684:	4a17      	ldr	r2, [pc, #92]	; (96e4 <_tc_init_irq_param+0x6c>)
    9686:	4293      	cmp	r3, r2
    9688:	d102      	bne.n	9690 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    968a:	4a17      	ldr	r2, [pc, #92]	; (96e8 <_tc_init_irq_param+0x70>)
    968c:	683b      	ldr	r3, [r7, #0]
    968e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    9690:	687b      	ldr	r3, [r7, #4]
    9692:	4a16      	ldr	r2, [pc, #88]	; (96ec <_tc_init_irq_param+0x74>)
    9694:	4293      	cmp	r3, r2
    9696:	d102      	bne.n	969e <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    9698:	4a15      	ldr	r2, [pc, #84]	; (96f0 <_tc_init_irq_param+0x78>)
    969a:	683b      	ldr	r3, [r7, #0]
    969c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    969e:	687b      	ldr	r3, [r7, #4]
    96a0:	4a14      	ldr	r2, [pc, #80]	; (96f4 <_tc_init_irq_param+0x7c>)
    96a2:	4293      	cmp	r3, r2
    96a4:	d102      	bne.n	96ac <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    96a6:	4a14      	ldr	r2, [pc, #80]	; (96f8 <_tc_init_irq_param+0x80>)
    96a8:	683b      	ldr	r3, [r7, #0]
    96aa:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    96ac:	687b      	ldr	r3, [r7, #4]
    96ae:	4a13      	ldr	r2, [pc, #76]	; (96fc <_tc_init_irq_param+0x84>)
    96b0:	4293      	cmp	r3, r2
    96b2:	d102      	bne.n	96ba <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    96b4:	4a12      	ldr	r2, [pc, #72]	; (9700 <_tc_init_irq_param+0x88>)
    96b6:	683b      	ldr	r3, [r7, #0]
    96b8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    96ba:	687b      	ldr	r3, [r7, #4]
    96bc:	4a11      	ldr	r2, [pc, #68]	; (9704 <_tc_init_irq_param+0x8c>)
    96be:	4293      	cmp	r3, r2
    96c0:	d102      	bne.n	96c8 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    96c2:	4a11      	ldr	r2, [pc, #68]	; (9708 <_tc_init_irq_param+0x90>)
    96c4:	683b      	ldr	r3, [r7, #0]
    96c6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    96c8:	687b      	ldr	r3, [r7, #4]
    96ca:	4a10      	ldr	r2, [pc, #64]	; (970c <_tc_init_irq_param+0x94>)
    96cc:	4293      	cmp	r3, r2
    96ce:	d102      	bne.n	96d6 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    96d0:	4a0f      	ldr	r2, [pc, #60]	; (9710 <_tc_init_irq_param+0x98>)
    96d2:	683b      	ldr	r3, [r7, #0]
    96d4:	6013      	str	r3, [r2, #0]
	}
}
    96d6:	bf00      	nop
    96d8:	370c      	adds	r7, #12
    96da:	46bd      	mov	sp, r7
    96dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    96e0:	4770      	bx	lr
    96e2:	bf00      	nop
    96e4:	40003800 	.word	0x40003800
    96e8:	200009e0 	.word	0x200009e0
    96ec:	4101a000 	.word	0x4101a000
    96f0:	200009e4 	.word	0x200009e4
    96f4:	42001400 	.word	0x42001400
    96f8:	200009e8 	.word	0x200009e8
    96fc:	42001800 	.word	0x42001800
    9700:	200009ec 	.word	0x200009ec
    9704:	43001400 	.word	0x43001400
    9708:	200009f0 	.word	0x200009f0
    970c:	43001800 	.word	0x43001800
    9710:	200009f4 	.word	0x200009f4

00009714 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    9714:	b4b0      	push	{r4, r5, r7}
    9716:	b08d      	sub	sp, #52	; 0x34
    9718:	af00      	add	r7, sp, #0
    971a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    971c:	4b13      	ldr	r3, [pc, #76]	; (976c <_get_hardware_offset+0x58>)
    971e:	f107 040c 	add.w	r4, r7, #12
    9722:	461d      	mov	r5, r3
    9724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9728:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    972c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9730:	2300      	movs	r3, #0
    9732:	62fb      	str	r3, [r7, #44]	; 0x2c
    9734:	e010      	b.n	9758 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    9736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9738:	009b      	lsls	r3, r3, #2
    973a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    973e:	4413      	add	r3, r2
    9740:	f853 3c24 	ldr.w	r3, [r3, #-36]
    9744:	461a      	mov	r2, r3
    9746:	687b      	ldr	r3, [r7, #4]
    9748:	429a      	cmp	r2, r3
    974a:	d102      	bne.n	9752 <_get_hardware_offset+0x3e>
			return i;
    974c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    974e:	b2db      	uxtb	r3, r3
    9750:	e006      	b.n	9760 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9754:	3301      	adds	r3, #1
    9756:	62fb      	str	r3, [r7, #44]	; 0x2c
    9758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    975a:	2b07      	cmp	r3, #7
    975c:	d9eb      	bls.n	9736 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    975e:	2300      	movs	r3, #0
}
    9760:	4618      	mov	r0, r3
    9762:	3734      	adds	r7, #52	; 0x34
    9764:	46bd      	mov	sp, r7
    9766:	bcb0      	pop	{r4, r5, r7}
    9768:	4770      	bx	lr
    976a:	bf00      	nop
    976c:	00010ef4 	.word	0x00010ef4

00009770 <__NVIC_EnableIRQ>:
{
    9770:	b480      	push	{r7}
    9772:	b083      	sub	sp, #12
    9774:	af00      	add	r7, sp, #0
    9776:	4603      	mov	r3, r0
    9778:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    977a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    977e:	2b00      	cmp	r3, #0
    9780:	db0b      	blt.n	979a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9782:	4909      	ldr	r1, [pc, #36]	; (97a8 <__NVIC_EnableIRQ+0x38>)
    9784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9788:	095b      	lsrs	r3, r3, #5
    978a:	88fa      	ldrh	r2, [r7, #6]
    978c:	f002 021f 	and.w	r2, r2, #31
    9790:	2001      	movs	r0, #1
    9792:	fa00 f202 	lsl.w	r2, r0, r2
    9796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    979a:	bf00      	nop
    979c:	370c      	adds	r7, #12
    979e:	46bd      	mov	sp, r7
    97a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    97a4:	4770      	bx	lr
    97a6:	bf00      	nop
    97a8:	e000e100 	.word	0xe000e100

000097ac <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    97ac:	b480      	push	{r7}
    97ae:	b087      	sub	sp, #28
    97b0:	af00      	add	r7, sp, #0
    97b2:	60f8      	str	r0, [r7, #12]
    97b4:	460b      	mov	r3, r1
    97b6:	607a      	str	r2, [r7, #4]
    97b8:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    97ba:	7afa      	ldrb	r2, [r7, #11]
    97bc:	68f9      	ldr	r1, [r7, #12]
    97be:	4613      	mov	r3, r2
    97c0:	009b      	lsls	r3, r3, #2
    97c2:	4413      	add	r3, r2
    97c4:	009b      	lsls	r3, r3, #2
    97c6:	440b      	add	r3, r1
    97c8:	3340      	adds	r3, #64	; 0x40
    97ca:	681b      	ldr	r3, [r3, #0]
    97cc:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    97ce:	697a      	ldr	r2, [r7, #20]
    97d0:	687b      	ldr	r3, [r7, #4]
    97d2:	4013      	ands	r3, r2
    97d4:	617b      	str	r3, [r7, #20]
	return tmp;
    97d6:	697b      	ldr	r3, [r7, #20]
}
    97d8:	4618      	mov	r0, r3
    97da:	371c      	adds	r7, #28
    97dc:	46bd      	mov	sp, r7
    97de:	f85d 7b04 	ldr.w	r7, [sp], #4
    97e2:	4770      	bx	lr

000097e4 <hri_oscctrl_get_STATUS_reg>:
{
    97e4:	b480      	push	{r7}
    97e6:	b085      	sub	sp, #20
    97e8:	af00      	add	r7, sp, #0
    97ea:	6078      	str	r0, [r7, #4]
    97ec:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    97ee:	687b      	ldr	r3, [r7, #4]
    97f0:	691b      	ldr	r3, [r3, #16]
    97f2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    97f4:	68fa      	ldr	r2, [r7, #12]
    97f6:	683b      	ldr	r3, [r7, #0]
    97f8:	4013      	ands	r3, r2
    97fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    97fc:	68fb      	ldr	r3, [r7, #12]
}
    97fe:	4618      	mov	r0, r3
    9800:	3714      	adds	r7, #20
    9802:	46bd      	mov	sp, r7
    9804:	f85d 7b04 	ldr.w	r7, [sp], #4
    9808:	4770      	bx	lr

0000980a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    980a:	b480      	push	{r7}
    980c:	b085      	sub	sp, #20
    980e:	af00      	add	r7, sp, #0
    9810:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    9812:	687b      	ldr	r3, [r7, #4]
    9814:	f893 3020 	ldrb.w	r3, [r3, #32]
    9818:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    981a:	7bfb      	ldrb	r3, [r7, #15]
    981c:	f003 0301 	and.w	r3, r3, #1
    9820:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9822:	7bfb      	ldrb	r3, [r7, #15]
    9824:	2b00      	cmp	r3, #0
    9826:	bf14      	ite	ne
    9828:	2301      	movne	r3, #1
    982a:	2300      	moveq	r3, #0
    982c:	b2db      	uxtb	r3, r3
}
    982e:	4618      	mov	r0, r3
    9830:	3714      	adds	r7, #20
    9832:	46bd      	mov	sp, r7
    9834:	f85d 7b04 	ldr.w	r7, [sp], #4
    9838:	4770      	bx	lr

0000983a <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    983a:	b480      	push	{r7}
    983c:	b083      	sub	sp, #12
    983e:	af00      	add	r7, sp, #0
    9840:	6078      	str	r0, [r7, #4]
    9842:	460b      	mov	r3, r1
    9844:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9846:	bf00      	nop
    9848:	687b      	ldr	r3, [r7, #4]
    984a:	789b      	ldrb	r3, [r3, #2]
    984c:	b2da      	uxtb	r2, r3
    984e:	78fb      	ldrb	r3, [r7, #3]
    9850:	4013      	ands	r3, r2
    9852:	b2db      	uxtb	r3, r3
    9854:	2b00      	cmp	r3, #0
    9856:	d1f7      	bne.n	9848 <hri_usb_wait_for_sync+0xe>
	};
}
    9858:	bf00      	nop
    985a:	370c      	adds	r7, #12
    985c:	46bd      	mov	sp, r7
    985e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9862:	4770      	bx	lr

00009864 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9864:	b480      	push	{r7}
    9866:	b083      	sub	sp, #12
    9868:	af00      	add	r7, sp, #0
    986a:	6078      	str	r0, [r7, #4]
    986c:	460b      	mov	r3, r1
    986e:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    9870:	687b      	ldr	r3, [r7, #4]
    9872:	789b      	ldrb	r3, [r3, #2]
    9874:	b2da      	uxtb	r2, r3
    9876:	78fb      	ldrb	r3, [r7, #3]
    9878:	4013      	ands	r3, r2
    987a:	b2db      	uxtb	r3, r3
    987c:	2b00      	cmp	r3, #0
    987e:	bf14      	ite	ne
    9880:	2301      	movne	r3, #1
    9882:	2300      	moveq	r3, #0
    9884:	b2db      	uxtb	r3, r3
}
    9886:	4618      	mov	r0, r3
    9888:	370c      	adds	r7, #12
    988a:	46bd      	mov	sp, r7
    988c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9890:	4770      	bx	lr

00009892 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    9892:	b480      	push	{r7}
    9894:	b085      	sub	sp, #20
    9896:	af00      	add	r7, sp, #0
    9898:	6078      	str	r0, [r7, #4]
    989a:	460b      	mov	r3, r1
    989c:	70fb      	strb	r3, [r7, #3]
    989e:	4613      	mov	r3, r2
    98a0:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    98a2:	78fb      	ldrb	r3, [r7, #3]
    98a4:	687a      	ldr	r2, [r7, #4]
    98a6:	3308      	adds	r3, #8
    98a8:	015b      	lsls	r3, r3, #5
    98aa:	4413      	add	r3, r2
    98ac:	3307      	adds	r3, #7
    98ae:	781b      	ldrb	r3, [r3, #0]
    98b0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    98b2:	7bfa      	ldrb	r2, [r7, #15]
    98b4:	78bb      	ldrb	r3, [r7, #2]
    98b6:	4013      	ands	r3, r2
    98b8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    98ba:	7bfb      	ldrb	r3, [r7, #15]
}
    98bc:	4618      	mov	r0, r3
    98be:	3714      	adds	r7, #20
    98c0:	46bd      	mov	sp, r7
    98c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    98c6:	4770      	bx	lr

000098c8 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    98c8:	b480      	push	{r7}
    98ca:	b083      	sub	sp, #12
    98cc:	af00      	add	r7, sp, #0
    98ce:	6078      	str	r0, [r7, #4]
    98d0:	460b      	mov	r3, r1
    98d2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    98d4:	78fb      	ldrb	r3, [r7, #3]
    98d6:	687a      	ldr	r2, [r7, #4]
    98d8:	3308      	adds	r3, #8
    98da:	015b      	lsls	r3, r3, #5
    98dc:	4413      	add	r3, r2
    98de:	3307      	adds	r3, #7
    98e0:	781b      	ldrb	r3, [r3, #0]
    98e2:	b2db      	uxtb	r3, r3
}
    98e4:	4618      	mov	r0, r3
    98e6:	370c      	adds	r7, #12
    98e8:	46bd      	mov	sp, r7
    98ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    98ee:	4770      	bx	lr

000098f0 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    98f0:	b480      	push	{r7}
    98f2:	b083      	sub	sp, #12
    98f4:	af00      	add	r7, sp, #0
    98f6:	6078      	str	r0, [r7, #4]
    98f8:	460b      	mov	r3, r1
    98fa:	70fb      	strb	r3, [r7, #3]
    98fc:	4613      	mov	r3, r2
    98fe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9900:	78fb      	ldrb	r3, [r7, #3]
    9902:	687a      	ldr	r2, [r7, #4]
    9904:	3308      	adds	r3, #8
    9906:	015b      	lsls	r3, r3, #5
    9908:	4413      	add	r3, r2
    990a:	3307      	adds	r3, #7
    990c:	78ba      	ldrb	r2, [r7, #2]
    990e:	701a      	strb	r2, [r3, #0]
}
    9910:	bf00      	nop
    9912:	370c      	adds	r7, #12
    9914:	46bd      	mov	sp, r7
    9916:	f85d 7b04 	ldr.w	r7, [sp], #4
    991a:	4770      	bx	lr

0000991c <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    991c:	b480      	push	{r7}
    991e:	b083      	sub	sp, #12
    9920:	af00      	add	r7, sp, #0
    9922:	6078      	str	r0, [r7, #4]
    9924:	460b      	mov	r3, r1
    9926:	70fb      	strb	r3, [r7, #3]
    9928:	4613      	mov	r3, r2
    992a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    992c:	78fb      	ldrb	r3, [r7, #3]
    992e:	687a      	ldr	r2, [r7, #4]
    9930:	3308      	adds	r3, #8
    9932:	015b      	lsls	r3, r3, #5
    9934:	4413      	add	r3, r2
    9936:	3305      	adds	r3, #5
    9938:	78ba      	ldrb	r2, [r7, #2]
    993a:	701a      	strb	r2, [r3, #0]
}
    993c:	bf00      	nop
    993e:	370c      	adds	r7, #12
    9940:	46bd      	mov	sp, r7
    9942:	f85d 7b04 	ldr.w	r7, [sp], #4
    9946:	4770      	bx	lr

00009948 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    9948:	b480      	push	{r7}
    994a:	b083      	sub	sp, #12
    994c:	af00      	add	r7, sp, #0
    994e:	6078      	str	r0, [r7, #4]
    9950:	460b      	mov	r3, r1
    9952:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9954:	78fb      	ldrb	r3, [r7, #3]
    9956:	687a      	ldr	r2, [r7, #4]
    9958:	3308      	adds	r3, #8
    995a:	015b      	lsls	r3, r3, #5
    995c:	4413      	add	r3, r2
    995e:	3306      	adds	r3, #6
    9960:	781b      	ldrb	r3, [r3, #0]
    9962:	b2db      	uxtb	r3, r3
}
    9964:	4618      	mov	r0, r3
    9966:	370c      	adds	r7, #12
    9968:	46bd      	mov	sp, r7
    996a:	f85d 7b04 	ldr.w	r7, [sp], #4
    996e:	4770      	bx	lr

00009970 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    9970:	b480      	push	{r7}
    9972:	b083      	sub	sp, #12
    9974:	af00      	add	r7, sp, #0
    9976:	6078      	str	r0, [r7, #4]
    9978:	460b      	mov	r3, r1
    997a:	70fb      	strb	r3, [r7, #3]
    997c:	4613      	mov	r3, r2
    997e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9980:	78fb      	ldrb	r3, [r7, #3]
    9982:	687a      	ldr	r2, [r7, #4]
    9984:	3308      	adds	r3, #8
    9986:	015b      	lsls	r3, r3, #5
    9988:	4413      	add	r3, r2
    998a:	3304      	adds	r3, #4
    998c:	78ba      	ldrb	r2, [r7, #2]
    998e:	701a      	strb	r2, [r3, #0]
}
    9990:	bf00      	nop
    9992:	370c      	adds	r7, #12
    9994:	46bd      	mov	sp, r7
    9996:	f85d 7b04 	ldr.w	r7, [sp], #4
    999a:	4770      	bx	lr

0000999c <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    999c:	b480      	push	{r7}
    999e:	b083      	sub	sp, #12
    99a0:	af00      	add	r7, sp, #0
    99a2:	6078      	str	r0, [r7, #4]
    99a4:	460b      	mov	r3, r1
    99a6:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    99a8:	78fb      	ldrb	r3, [r7, #3]
    99aa:	687a      	ldr	r2, [r7, #4]
    99ac:	015b      	lsls	r3, r3, #5
    99ae:	4413      	add	r3, r2
    99b0:	f503 7384 	add.w	r3, r3, #264	; 0x108
    99b4:	2210      	movs	r2, #16
    99b6:	701a      	strb	r2, [r3, #0]
}
    99b8:	bf00      	nop
    99ba:	370c      	adds	r7, #12
    99bc:	46bd      	mov	sp, r7
    99be:	f85d 7b04 	ldr.w	r7, [sp], #4
    99c2:	4770      	bx	lr

000099c4 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    99c4:	b480      	push	{r7}
    99c6:	b083      	sub	sp, #12
    99c8:	af00      	add	r7, sp, #0
    99ca:	6078      	str	r0, [r7, #4]
    99cc:	460b      	mov	r3, r1
    99ce:	70fb      	strb	r3, [r7, #3]
    99d0:	4613      	mov	r3, r2
    99d2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    99d4:	78fb      	ldrb	r3, [r7, #3]
    99d6:	687a      	ldr	r2, [r7, #4]
    99d8:	015b      	lsls	r3, r3, #5
    99da:	4413      	add	r3, r2
    99dc:	f203 1309 	addw	r3, r3, #265	; 0x109
    99e0:	78ba      	ldrb	r2, [r7, #2]
    99e2:	701a      	strb	r2, [r3, #0]
}
    99e4:	bf00      	nop
    99e6:	370c      	adds	r7, #12
    99e8:	46bd      	mov	sp, r7
    99ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    99ee:	4770      	bx	lr

000099f0 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    99f0:	b480      	push	{r7}
    99f2:	b083      	sub	sp, #12
    99f4:	af00      	add	r7, sp, #0
    99f6:	6078      	str	r0, [r7, #4]
    99f8:	460b      	mov	r3, r1
    99fa:	70fb      	strb	r3, [r7, #3]
    99fc:	4613      	mov	r3, r2
    99fe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9a00:	78fb      	ldrb	r3, [r7, #3]
    9a02:	687a      	ldr	r2, [r7, #4]
    9a04:	015b      	lsls	r3, r3, #5
    9a06:	4413      	add	r3, r2
    9a08:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9a0c:	78ba      	ldrb	r2, [r7, #2]
    9a0e:	701a      	strb	r2, [r3, #0]
}
    9a10:	bf00      	nop
    9a12:	370c      	adds	r7, #12
    9a14:	46bd      	mov	sp, r7
    9a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a1a:	4770      	bx	lr

00009a1c <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9a1c:	b480      	push	{r7}
    9a1e:	b085      	sub	sp, #20
    9a20:	af00      	add	r7, sp, #0
    9a22:	6078      	str	r0, [r7, #4]
    9a24:	460b      	mov	r3, r1
    9a26:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9a28:	78fb      	ldrb	r3, [r7, #3]
    9a2a:	687a      	ldr	r2, [r7, #4]
    9a2c:	3308      	adds	r3, #8
    9a2e:	015b      	lsls	r3, r3, #5
    9a30:	4413      	add	r3, r2
    9a32:	781b      	ldrb	r3, [r3, #0]
    9a34:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    9a36:	7bfb      	ldrb	r3, [r7, #15]
    9a38:	f003 0307 	and.w	r3, r3, #7
    9a3c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9a3e:	7bfb      	ldrb	r3, [r7, #15]
}
    9a40:	4618      	mov	r0, r3
    9a42:	3714      	adds	r7, #20
    9a44:	46bd      	mov	sp, r7
    9a46:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a4a:	4770      	bx	lr

00009a4c <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9a4c:	b480      	push	{r7}
    9a4e:	b085      	sub	sp, #20
    9a50:	af00      	add	r7, sp, #0
    9a52:	6078      	str	r0, [r7, #4]
    9a54:	460b      	mov	r3, r1
    9a56:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9a58:	78fb      	ldrb	r3, [r7, #3]
    9a5a:	687a      	ldr	r2, [r7, #4]
    9a5c:	3308      	adds	r3, #8
    9a5e:	015b      	lsls	r3, r3, #5
    9a60:	4413      	add	r3, r2
    9a62:	781b      	ldrb	r3, [r3, #0]
    9a64:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    9a66:	7bfb      	ldrb	r3, [r7, #15]
    9a68:	091b      	lsrs	r3, r3, #4
    9a6a:	b2db      	uxtb	r3, r3
    9a6c:	f003 0307 	and.w	r3, r3, #7
    9a70:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9a72:	7bfb      	ldrb	r3, [r7, #15]
}
    9a74:	4618      	mov	r0, r3
    9a76:	3714      	adds	r7, #20
    9a78:	46bd      	mov	sp, r7
    9a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a7e:	4770      	bx	lr

00009a80 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    9a80:	b480      	push	{r7}
    9a82:	b083      	sub	sp, #12
    9a84:	af00      	add	r7, sp, #0
    9a86:	6078      	str	r0, [r7, #4]
    9a88:	460b      	mov	r3, r1
    9a8a:	70fb      	strb	r3, [r7, #3]
    9a8c:	4613      	mov	r3, r2
    9a8e:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    9a90:	78fb      	ldrb	r3, [r7, #3]
    9a92:	687a      	ldr	r2, [r7, #4]
    9a94:	3308      	adds	r3, #8
    9a96:	015b      	lsls	r3, r3, #5
    9a98:	4413      	add	r3, r2
    9a9a:	78ba      	ldrb	r2, [r7, #2]
    9a9c:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    9a9e:	bf00      	nop
    9aa0:	370c      	adds	r7, #12
    9aa2:	46bd      	mov	sp, r7
    9aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9aa8:	4770      	bx	lr

00009aaa <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    9aaa:	b480      	push	{r7}
    9aac:	b083      	sub	sp, #12
    9aae:	af00      	add	r7, sp, #0
    9ab0:	6078      	str	r0, [r7, #4]
    9ab2:	460b      	mov	r3, r1
    9ab4:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9ab6:	78fb      	ldrb	r3, [r7, #3]
    9ab8:	687a      	ldr	r2, [r7, #4]
    9aba:	3308      	adds	r3, #8
    9abc:	015b      	lsls	r3, r3, #5
    9abe:	4413      	add	r3, r2
    9ac0:	781b      	ldrb	r3, [r3, #0]
    9ac2:	b2db      	uxtb	r3, r3
}
    9ac4:	4618      	mov	r0, r3
    9ac6:	370c      	adds	r7, #12
    9ac8:	46bd      	mov	sp, r7
    9aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ace:	4770      	bx	lr

00009ad0 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    9ad0:	b480      	push	{r7}
    9ad2:	b083      	sub	sp, #12
    9ad4:	af00      	add	r7, sp, #0
    9ad6:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    9ad8:	687b      	ldr	r3, [r7, #4]
    9ada:	8b9b      	ldrh	r3, [r3, #28]
    9adc:	b29b      	uxth	r3, r3
}
    9ade:	4618      	mov	r0, r3
    9ae0:	370c      	adds	r7, #12
    9ae2:	46bd      	mov	sp, r7
    9ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ae8:	4770      	bx	lr

00009aea <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    9aea:	b480      	push	{r7}
    9aec:	b083      	sub	sp, #12
    9aee:	af00      	add	r7, sp, #0
    9af0:	6078      	str	r0, [r7, #4]
    9af2:	460b      	mov	r3, r1
    9af4:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9af6:	687b      	ldr	r3, [r7, #4]
    9af8:	887a      	ldrh	r2, [r7, #2]
    9afa:	839a      	strh	r2, [r3, #28]
}
    9afc:	bf00      	nop
    9afe:	370c      	adds	r7, #12
    9b00:	46bd      	mov	sp, r7
    9b02:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b06:	4770      	bx	lr

00009b08 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9b08:	b480      	push	{r7}
    9b0a:	b083      	sub	sp, #12
    9b0c:	af00      	add	r7, sp, #0
    9b0e:	6078      	str	r0, [r7, #4]
    9b10:	460b      	mov	r3, r1
    9b12:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9b14:	687b      	ldr	r3, [r7, #4]
    9b16:	887a      	ldrh	r2, [r7, #2]
    9b18:	831a      	strh	r2, [r3, #24]
}
    9b1a:	bf00      	nop
    9b1c:	370c      	adds	r7, #12
    9b1e:	46bd      	mov	sp, r7
    9b20:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b24:	4770      	bx	lr

00009b26 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    9b26:	b480      	push	{r7}
    9b28:	b083      	sub	sp, #12
    9b2a:	af00      	add	r7, sp, #0
    9b2c:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    9b2e:	687b      	ldr	r3, [r7, #4]
    9b30:	8b1b      	ldrh	r3, [r3, #24]
    9b32:	b29b      	uxth	r3, r3
}
    9b34:	4618      	mov	r0, r3
    9b36:	370c      	adds	r7, #12
    9b38:	46bd      	mov	sp, r7
    9b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b3e:	4770      	bx	lr

00009b40 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9b40:	b480      	push	{r7}
    9b42:	b083      	sub	sp, #12
    9b44:	af00      	add	r7, sp, #0
    9b46:	6078      	str	r0, [r7, #4]
    9b48:	460b      	mov	r3, r1
    9b4a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9b4c:	687b      	ldr	r3, [r7, #4]
    9b4e:	887a      	ldrh	r2, [r7, #2]
    9b50:	829a      	strh	r2, [r3, #20]
}
    9b52:	bf00      	nop
    9b54:	370c      	adds	r7, #12
    9b56:	46bd      	mov	sp, r7
    9b58:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b5c:	4770      	bx	lr

00009b5e <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    9b5e:	b480      	push	{r7}
    9b60:	b085      	sub	sp, #20
    9b62:	af00      	add	r7, sp, #0
    9b64:	6078      	str	r0, [r7, #4]
    9b66:	460b      	mov	r3, r1
    9b68:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    9b6a:	687b      	ldr	r3, [r7, #4]
    9b6c:	789b      	ldrb	r3, [r3, #2]
    9b6e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9b70:	7bfa      	ldrb	r2, [r7, #15]
    9b72:	78fb      	ldrb	r3, [r7, #3]
    9b74:	4013      	ands	r3, r2
    9b76:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9b78:	7bfb      	ldrb	r3, [r7, #15]
}
    9b7a:	4618      	mov	r0, r3
    9b7c:	3714      	adds	r7, #20
    9b7e:	46bd      	mov	sp, r7
    9b80:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b84:	4770      	bx	lr
	...

00009b88 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9b88:	b580      	push	{r7, lr}
    9b8a:	b082      	sub	sp, #8
    9b8c:	af00      	add	r7, sp, #0
    9b8e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	781b      	ldrb	r3, [r3, #0]
    9b94:	b2db      	uxtb	r3, r3
    9b96:	f023 0302 	bic.w	r3, r3, #2
    9b9a:	b2da      	uxtb	r2, r3
    9b9c:	687b      	ldr	r3, [r7, #4]
    9b9e:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    9ba0:	2103      	movs	r1, #3
    9ba2:	6878      	ldr	r0, [r7, #4]
    9ba4:	4b02      	ldr	r3, [pc, #8]	; (9bb0 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    9ba6:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    9ba8:	bf00      	nop
    9baa:	3708      	adds	r7, #8
    9bac:	46bd      	mov	sp, r7
    9bae:	bd80      	pop	{r7, pc}
    9bb0:	0000983b 	.word	0x0000983b

00009bb4 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    9bb4:	b580      	push	{r7, lr}
    9bb6:	b084      	sub	sp, #16
    9bb8:	af00      	add	r7, sp, #0
    9bba:	6078      	str	r0, [r7, #4]
    9bbc:	460b      	mov	r3, r1
    9bbe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9bc0:	2103      	movs	r1, #3
    9bc2:	6878      	ldr	r0, [r7, #4]
    9bc4:	4b06      	ldr	r3, [pc, #24]	; (9be0 <hri_usb_get_CTRLA_reg+0x2c>)
    9bc6:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    9bc8:	687b      	ldr	r3, [r7, #4]
    9bca:	781b      	ldrb	r3, [r3, #0]
    9bcc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9bce:	7bfa      	ldrb	r2, [r7, #15]
    9bd0:	78fb      	ldrb	r3, [r7, #3]
    9bd2:	4013      	ands	r3, r2
    9bd4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9bd6:	7bfb      	ldrb	r3, [r7, #15]
}
    9bd8:	4618      	mov	r0, r3
    9bda:	3710      	adds	r7, #16
    9bdc:	46bd      	mov	sp, r7
    9bde:	bd80      	pop	{r7, pc}
    9be0:	0000983b 	.word	0x0000983b

00009be4 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    9be4:	b580      	push	{r7, lr}
    9be6:	b082      	sub	sp, #8
    9be8:	af00      	add	r7, sp, #0
    9bea:	6078      	str	r0, [r7, #4]
    9bec:	460b      	mov	r3, r1
    9bee:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    9bf0:	687b      	ldr	r3, [r7, #4]
    9bf2:	78fa      	ldrb	r2, [r7, #3]
    9bf4:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9bf6:	2103      	movs	r1, #3
    9bf8:	6878      	ldr	r0, [r7, #4]
    9bfa:	4b03      	ldr	r3, [pc, #12]	; (9c08 <hri_usb_write_CTRLA_reg+0x24>)
    9bfc:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    9bfe:	bf00      	nop
    9c00:	3708      	adds	r7, #8
    9c02:	46bd      	mov	sp, r7
    9c04:	bd80      	pop	{r7, pc}
    9c06:	bf00      	nop
    9c08:	0000983b 	.word	0x0000983b

00009c0c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    9c0c:	b580      	push	{r7, lr}
    9c0e:	b082      	sub	sp, #8
    9c10:	af00      	add	r7, sp, #0
    9c12:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9c14:	2103      	movs	r1, #3
    9c16:	6878      	ldr	r0, [r7, #4]
    9c18:	4b04      	ldr	r3, [pc, #16]	; (9c2c <hri_usb_read_CTRLA_reg+0x20>)
    9c1a:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    9c1c:	687b      	ldr	r3, [r7, #4]
    9c1e:	781b      	ldrb	r3, [r3, #0]
    9c20:	b2db      	uxtb	r3, r3
}
    9c22:	4618      	mov	r0, r3
    9c24:	3708      	adds	r7, #8
    9c26:	46bd      	mov	sp, r7
    9c28:	bd80      	pop	{r7, pc}
    9c2a:	bf00      	nop
    9c2c:	0000983b 	.word	0x0000983b

00009c30 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    9c30:	b480      	push	{r7}
    9c32:	b083      	sub	sp, #12
    9c34:	af00      	add	r7, sp, #0
    9c36:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9c38:	687b      	ldr	r3, [r7, #4]
    9c3a:	891b      	ldrh	r3, [r3, #8]
    9c3c:	b29b      	uxth	r3, r3
    9c3e:	f023 0301 	bic.w	r3, r3, #1
    9c42:	b29a      	uxth	r2, r3
    9c44:	687b      	ldr	r3, [r7, #4]
    9c46:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9c48:	bf00      	nop
    9c4a:	370c      	adds	r7, #12
    9c4c:	46bd      	mov	sp, r7
    9c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c52:	4770      	bx	lr

00009c54 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    9c54:	b480      	push	{r7}
    9c56:	b083      	sub	sp, #12
    9c58:	af00      	add	r7, sp, #0
    9c5a:	6078      	str	r0, [r7, #4]
    9c5c:	460b      	mov	r3, r1
    9c5e:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    9c60:	687b      	ldr	r3, [r7, #4]
    9c62:	887a      	ldrh	r2, [r7, #2]
    9c64:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9c66:	bf00      	nop
    9c68:	370c      	adds	r7, #12
    9c6a:	46bd      	mov	sp, r7
    9c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c70:	4770      	bx	lr

00009c72 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    9c72:	b480      	push	{r7}
    9c74:	b083      	sub	sp, #12
    9c76:	af00      	add	r7, sp, #0
    9c78:	6078      	str	r0, [r7, #4]
    9c7a:	460b      	mov	r3, r1
    9c7c:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    9c7e:	687b      	ldr	r3, [r7, #4]
    9c80:	78fa      	ldrb	r2, [r7, #3]
    9c82:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    9c84:	bf00      	nop
    9c86:	370c      	adds	r7, #12
    9c88:	46bd      	mov	sp, r7
    9c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c8e:	4770      	bx	lr

00009c90 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    9c90:	b480      	push	{r7}
    9c92:	b083      	sub	sp, #12
    9c94:	af00      	add	r7, sp, #0
    9c96:	6078      	str	r0, [r7, #4]
    9c98:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    9c9a:	687b      	ldr	r3, [r7, #4]
    9c9c:	683a      	ldr	r2, [r7, #0]
    9c9e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    9ca0:	bf00      	nop
    9ca2:	370c      	adds	r7, #12
    9ca4:	46bd      	mov	sp, r7
    9ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9caa:	4770      	bx	lr

00009cac <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    9cac:	b480      	push	{r7}
    9cae:	b083      	sub	sp, #12
    9cb0:	af00      	add	r7, sp, #0
    9cb2:	6078      	str	r0, [r7, #4]
    9cb4:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    9cb6:	2300      	movs	r3, #0
}
    9cb8:	4618      	mov	r0, r3
    9cba:	370c      	adds	r7, #12
    9cbc:	46bd      	mov	sp, r7
    9cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cc2:	4770      	bx	lr

00009cc4 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9cc4:	b480      	push	{r7}
    9cc6:	b085      	sub	sp, #20
    9cc8:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    9cca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9cce:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    9cd0:	4b28      	ldr	r3, [pc, #160]	; (9d74 <_usb_load_calib+0xb0>)
    9cd2:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    9cd4:	f003 031f 	and.w	r3, r3, #31
    9cd8:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    9cda:	4b26      	ldr	r3, [pc, #152]	; (9d74 <_usb_load_calib+0xb0>)
    9cdc:	681b      	ldr	r3, [r3, #0]
    9cde:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    9ce0:	f003 031f 	and.w	r3, r3, #31
    9ce4:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9ce6:	4b23      	ldr	r3, [pc, #140]	; (9d74 <_usb_load_calib+0xb0>)
    9ce8:	681b      	ldr	r3, [r3, #0]
    9cea:	0a9b      	lsrs	r3, r3, #10
    9cec:	f003 0307 	and.w	r3, r3, #7
    9cf0:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    9cf2:	68fb      	ldr	r3, [r7, #12]
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d002      	beq.n	9cfe <_usb_load_calib+0x3a>
    9cf8:	68fb      	ldr	r3, [r7, #12]
    9cfa:	2b1f      	cmp	r3, #31
    9cfc:	d101      	bne.n	9d02 <_usb_load_calib+0x3e>
		pad_transn = 9;
    9cfe:	2309      	movs	r3, #9
    9d00:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    9d02:	68bb      	ldr	r3, [r7, #8]
    9d04:	2b00      	cmp	r3, #0
    9d06:	d002      	beq.n	9d0e <_usb_load_calib+0x4a>
    9d08:	68bb      	ldr	r3, [r7, #8]
    9d0a:	2b1f      	cmp	r3, #31
    9d0c:	d101      	bne.n	9d12 <_usb_load_calib+0x4e>
		pad_transp = 25;
    9d0e:	2319      	movs	r3, #25
    9d10:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    9d12:	687b      	ldr	r3, [r7, #4]
    9d14:	2b00      	cmp	r3, #0
    9d16:	d002      	beq.n	9d1e <_usb_load_calib+0x5a>
    9d18:	687b      	ldr	r3, [r7, #4]
    9d1a:	2b07      	cmp	r3, #7
    9d1c:	d101      	bne.n	9d22 <_usb_load_calib+0x5e>
		pad_trim = 6;
    9d1e:	2306      	movs	r3, #6
    9d20:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    9d22:	68fb      	ldr	r3, [r7, #12]
    9d24:	b29b      	uxth	r3, r3
    9d26:	019b      	lsls	r3, r3, #6
    9d28:	b29b      	uxth	r3, r3
    9d2a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    9d2e:	b29a      	uxth	r2, r3
    9d30:	68bb      	ldr	r3, [r7, #8]
    9d32:	b29b      	uxth	r3, r3
    9d34:	f003 031f 	and.w	r3, r3, #31
    9d38:	b29b      	uxth	r3, r3
    9d3a:	4313      	orrs	r3, r2
    9d3c:	b29a      	uxth	r2, r3
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	b29b      	uxth	r3, r3
    9d42:	031b      	lsls	r3, r3, #12
    9d44:	b29b      	uxth	r3, r3
    9d46:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    9d4a:	b29b      	uxth	r3, r3
    9d4c:	4313      	orrs	r3, r2
    9d4e:	b29a      	uxth	r2, r3
    9d50:	683b      	ldr	r3, [r7, #0]
    9d52:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    9d54:	683a      	ldr	r2, [r7, #0]
    9d56:	78d3      	ldrb	r3, [r2, #3]
    9d58:	f043 0303 	orr.w	r3, r3, #3
    9d5c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    9d5e:	683a      	ldr	r2, [r7, #0]
    9d60:	78d3      	ldrb	r3, [r2, #3]
    9d62:	f043 030c 	orr.w	r3, r3, #12
    9d66:	70d3      	strb	r3, [r2, #3]
}
    9d68:	bf00      	nop
    9d6a:	3714      	adds	r7, #20
    9d6c:	46bd      	mov	sp, r7
    9d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d72:	4770      	bx	lr
    9d74:	00800084 	.word	0x00800084

00009d78 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    9d78:	b580      	push	{r7, lr}
    9d7a:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    9d7c:	bf00      	nop
    9d7e:	2203      	movs	r2, #3
    9d80:	2100      	movs	r1, #0
    9d82:	4804      	ldr	r0, [pc, #16]	; (9d94 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    9d84:	4b04      	ldr	r3, [pc, #16]	; (9d98 <_usb_d_dev_wait_dpll_rdy+0x20>)
    9d86:	4798      	blx	r3
    9d88:	4603      	mov	r3, r0
    9d8a:	2b03      	cmp	r3, #3
    9d8c:	d1f7      	bne.n	9d7e <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    9d8e:	bf00      	nop
    9d90:	bd80      	pop	{r7, pc}
    9d92:	bf00      	nop
    9d94:	40001000 	.word	0x40001000
    9d98:	000097ad 	.word	0x000097ad

00009d9c <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    9d9c:	b580      	push	{r7, lr}
    9d9e:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    9da0:	480e      	ldr	r0, [pc, #56]	; (9ddc <_usb_d_dev_wait_dfll_rdy+0x40>)
    9da2:	4b0f      	ldr	r3, [pc, #60]	; (9de0 <_usb_d_dev_wait_dfll_rdy+0x44>)
    9da4:	4798      	blx	r3
    9da6:	4603      	mov	r3, r0
    9da8:	2b00      	cmp	r3, #0
    9daa:	d00a      	beq.n	9dc2 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    9dac:	bf00      	nop
    9dae:	f44f 6110 	mov.w	r1, #2304	; 0x900
    9db2:	480a      	ldr	r0, [pc, #40]	; (9ddc <_usb_d_dev_wait_dfll_rdy+0x40>)
    9db4:	4b0b      	ldr	r3, [pc, #44]	; (9de4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9db6:	4798      	blx	r3
    9db8:	4603      	mov	r3, r0
    9dba:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    9dbe:	d1f6      	bne.n	9dae <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    9dc0:	e009      	b.n	9dd6 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    9dc2:	bf00      	nop
    9dc4:	f44f 7180 	mov.w	r1, #256	; 0x100
    9dc8:	4804      	ldr	r0, [pc, #16]	; (9ddc <_usb_d_dev_wait_dfll_rdy+0x40>)
    9dca:	4b06      	ldr	r3, [pc, #24]	; (9de4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9dcc:	4798      	blx	r3
    9dce:	4603      	mov	r3, r0
    9dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9dd4:	d1f6      	bne.n	9dc4 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    9dd6:	bf00      	nop
    9dd8:	bd80      	pop	{r7, pc}
    9dda:	bf00      	nop
    9ddc:	40001000 	.word	0x40001000
    9de0:	0000980b 	.word	0x0000980b
    9de4:	000097e5 	.word	0x000097e5

00009de8 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    9de8:	b580      	push	{r7, lr}
    9dea:	b082      	sub	sp, #8
    9dec:	af00      	add	r7, sp, #0
    9dee:	4603      	mov	r3, r0
    9df0:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    9df2:	79fb      	ldrb	r3, [r7, #7]
    9df4:	2b00      	cmp	r3, #0
    9df6:	d102      	bne.n	9dfe <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    9df8:	4b05      	ldr	r3, [pc, #20]	; (9e10 <_usb_d_dev_wait_clk_rdy+0x28>)
    9dfa:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    9dfc:	e004      	b.n	9e08 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    9dfe:	79fb      	ldrb	r3, [r7, #7]
    9e00:	2b01      	cmp	r3, #1
    9e02:	d101      	bne.n	9e08 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9e04:	4b03      	ldr	r3, [pc, #12]	; (9e14 <_usb_d_dev_wait_clk_rdy+0x2c>)
    9e06:	4798      	blx	r3
}
    9e08:	bf00      	nop
    9e0a:	3708      	adds	r7, #8
    9e0c:	46bd      	mov	sp, r7
    9e0e:	bd80      	pop	{r7, pc}
    9e10:	00009d9d 	.word	0x00009d9d
    9e14:	00009d79 	.word	0x00009d79

00009e18 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9e18:	b580      	push	{r7, lr}
    9e1a:	b082      	sub	sp, #8
    9e1c:	af00      	add	r7, sp, #0
    9e1e:	4603      	mov	r3, r0
    9e20:	6039      	str	r1, [r7, #0]
    9e22:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    9e24:	683b      	ldr	r3, [r7, #0]
    9e26:	b2da      	uxtb	r2, r3
    9e28:	79fb      	ldrb	r3, [r7, #7]
    9e2a:	4619      	mov	r1, r3
    9e2c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e30:	4b02      	ldr	r3, [pc, #8]	; (9e3c <_usbd_ep_int_ack+0x24>)
    9e32:	4798      	blx	r3
}
    9e34:	bf00      	nop
    9e36:	3708      	adds	r7, #8
    9e38:	46bd      	mov	sp, r7
    9e3a:	bd80      	pop	{r7, pc}
    9e3c:	000098f1 	.word	0x000098f1

00009e40 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    9e40:	b580      	push	{r7, lr}
    9e42:	b082      	sub	sp, #8
    9e44:	af00      	add	r7, sp, #0
    9e46:	4603      	mov	r3, r0
    9e48:	6039      	str	r1, [r7, #0]
    9e4a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9e4c:	683b      	ldr	r3, [r7, #0]
    9e4e:	b2da      	uxtb	r2, r3
    9e50:	79fb      	ldrb	r3, [r7, #7]
    9e52:	4619      	mov	r1, r3
    9e54:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e58:	4b02      	ldr	r3, [pc, #8]	; (9e64 <_usbd_ep_int_en+0x24>)
    9e5a:	4798      	blx	r3
}
    9e5c:	bf00      	nop
    9e5e:	3708      	adds	r7, #8
    9e60:	46bd      	mov	sp, r7
    9e62:	bd80      	pop	{r7, pc}
    9e64:	000099c5 	.word	0x000099c5

00009e68 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    9e68:	b580      	push	{r7, lr}
    9e6a:	b082      	sub	sp, #8
    9e6c:	af00      	add	r7, sp, #0
    9e6e:	4603      	mov	r3, r0
    9e70:	6039      	str	r1, [r7, #0]
    9e72:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    9e74:	683b      	ldr	r3, [r7, #0]
    9e76:	b2da      	uxtb	r2, r3
    9e78:	79fb      	ldrb	r3, [r7, #7]
    9e7a:	4619      	mov	r1, r3
    9e7c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e80:	4b02      	ldr	r3, [pc, #8]	; (9e8c <_usbd_ep_int_dis+0x24>)
    9e82:	4798      	blx	r3
}
    9e84:	bf00      	nop
    9e86:	3708      	adds	r7, #8
    9e88:	46bd      	mov	sp, r7
    9e8a:	bd80      	pop	{r7, pc}
    9e8c:	000099f1 	.word	0x000099f1

00009e90 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    9e90:	b580      	push	{r7, lr}
    9e92:	b082      	sub	sp, #8
    9e94:	af00      	add	r7, sp, #0
    9e96:	4603      	mov	r3, r0
    9e98:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    9e9a:	79fb      	ldrb	r3, [r7, #7]
    9e9c:	4619      	mov	r1, r3
    9e9e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ea2:	4b06      	ldr	r3, [pc, #24]	; (9ebc <_usbd_ep_is_ctrl+0x2c>)
    9ea4:	4798      	blx	r3
    9ea6:	4603      	mov	r3, r0
    9ea8:	2b11      	cmp	r3, #17
    9eaa:	bf0c      	ite	eq
    9eac:	2301      	moveq	r3, #1
    9eae:	2300      	movne	r3, #0
    9eb0:	b2db      	uxtb	r3, r3
}
    9eb2:	4618      	mov	r0, r3
    9eb4:	3708      	adds	r7, #8
    9eb6:	46bd      	mov	sp, r7
    9eb8:	bd80      	pop	{r7, pc}
    9eba:	bf00      	nop
    9ebc:	00009aab 	.word	0x00009aab

00009ec0 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    9ec0:	b580      	push	{r7, lr}
    9ec2:	b082      	sub	sp, #8
    9ec4:	af00      	add	r7, sp, #0
    9ec6:	4603      	mov	r3, r0
    9ec8:	71fb      	strb	r3, [r7, #7]
    9eca:	460b      	mov	r3, r1
    9ecc:	71bb      	strb	r3, [r7, #6]
    9ece:	4613      	mov	r3, r2
    9ed0:	717b      	strb	r3, [r7, #5]
	if (st) {
    9ed2:	797b      	ldrb	r3, [r7, #5]
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	d00b      	beq.n	9ef0 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9ed8:	79bb      	ldrb	r3, [r7, #6]
    9eda:	2210      	movs	r2, #16
    9edc:	fa02 f303 	lsl.w	r3, r2, r3
    9ee0:	b2da      	uxtb	r2, r3
    9ee2:	79fb      	ldrb	r3, [r7, #7]
    9ee4:	4619      	mov	r1, r3
    9ee6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9eea:	4b09      	ldr	r3, [pc, #36]	; (9f10 <_usbd_ep_set_stall+0x50>)
    9eec:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    9eee:	e00a      	b.n	9f06 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9ef0:	79bb      	ldrb	r3, [r7, #6]
    9ef2:	2210      	movs	r2, #16
    9ef4:	fa02 f303 	lsl.w	r3, r2, r3
    9ef8:	b2da      	uxtb	r2, r3
    9efa:	79fb      	ldrb	r3, [r7, #7]
    9efc:	4619      	mov	r1, r3
    9efe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f02:	4b04      	ldr	r3, [pc, #16]	; (9f14 <_usbd_ep_set_stall+0x54>)
    9f04:	4798      	blx	r3
}
    9f06:	bf00      	nop
    9f08:	3708      	adds	r7, #8
    9f0a:	46bd      	mov	sp, r7
    9f0c:	bd80      	pop	{r7, pc}
    9f0e:	bf00      	nop
    9f10:	0000991d 	.word	0x0000991d
    9f14:	00009971 	.word	0x00009971

00009f18 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9f18:	b580      	push	{r7, lr}
    9f1a:	b084      	sub	sp, #16
    9f1c:	af00      	add	r7, sp, #0
    9f1e:	4603      	mov	r3, r0
    9f20:	460a      	mov	r2, r1
    9f22:	71fb      	strb	r3, [r7, #7]
    9f24:	4613      	mov	r3, r2
    9f26:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9f28:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f2c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9f2e:	79fb      	ldrb	r3, [r7, #7]
    9f30:	4619      	mov	r1, r3
    9f32:	68f8      	ldr	r0, [r7, #12]
    9f34:	4b08      	ldr	r3, [pc, #32]	; (9f58 <_usbd_ep_is_stalled+0x40>)
    9f36:	4798      	blx	r3
    9f38:	4603      	mov	r3, r0
    9f3a:	4619      	mov	r1, r3
    9f3c:	79bb      	ldrb	r3, [r7, #6]
    9f3e:	2210      	movs	r2, #16
    9f40:	fa02 f303 	lsl.w	r3, r2, r3
    9f44:	400b      	ands	r3, r1
    9f46:	2b00      	cmp	r3, #0
    9f48:	bf14      	ite	ne
    9f4a:	2301      	movne	r3, #1
    9f4c:	2300      	moveq	r3, #0
    9f4e:	b2db      	uxtb	r3, r3
}
    9f50:	4618      	mov	r0, r3
    9f52:	3710      	adds	r7, #16
    9f54:	46bd      	mov	sp, r7
    9f56:	bd80      	pop	{r7, pc}
    9f58:	00009949 	.word	0x00009949

00009f5c <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    9f5c:	b580      	push	{r7, lr}
    9f5e:	b084      	sub	sp, #16
    9f60:	af00      	add	r7, sp, #0
    9f62:	4603      	mov	r3, r0
    9f64:	460a      	mov	r2, r1
    9f66:	71fb      	strb	r3, [r7, #7]
    9f68:	4613      	mov	r3, r2
    9f6a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9f6c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f70:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9f72:	79fb      	ldrb	r3, [r7, #7]
    9f74:	4619      	mov	r1, r3
    9f76:	68f8      	ldr	r0, [r7, #12]
    9f78:	4b08      	ldr	r3, [pc, #32]	; (9f9c <_usbd_ep_is_stall_sent+0x40>)
    9f7a:	4798      	blx	r3
    9f7c:	4603      	mov	r3, r0
    9f7e:	4619      	mov	r1, r3
    9f80:	79bb      	ldrb	r3, [r7, #6]
    9f82:	2220      	movs	r2, #32
    9f84:	fa02 f303 	lsl.w	r3, r2, r3
    9f88:	400b      	ands	r3, r1
    9f8a:	2b00      	cmp	r3, #0
    9f8c:	bf14      	ite	ne
    9f8e:	2301      	movne	r3, #1
    9f90:	2300      	moveq	r3, #0
    9f92:	b2db      	uxtb	r3, r3
}
    9f94:	4618      	mov	r0, r3
    9f96:	3710      	adds	r7, #16
    9f98:	46bd      	mov	sp, r7
    9f9a:	bd80      	pop	{r7, pc}
    9f9c:	000098c9 	.word	0x000098c9

00009fa0 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    9fa0:	b580      	push	{r7, lr}
    9fa2:	b082      	sub	sp, #8
    9fa4:	af00      	add	r7, sp, #0
    9fa6:	4603      	mov	r3, r0
    9fa8:	460a      	mov	r2, r1
    9faa:	71fb      	strb	r3, [r7, #7]
    9fac:	4613      	mov	r3, r2
    9fae:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9fb0:	79bb      	ldrb	r3, [r7, #6]
    9fb2:	2220      	movs	r2, #32
    9fb4:	409a      	lsls	r2, r3
    9fb6:	79fb      	ldrb	r3, [r7, #7]
    9fb8:	4611      	mov	r1, r2
    9fba:	4618      	mov	r0, r3
    9fbc:	4b02      	ldr	r3, [pc, #8]	; (9fc8 <_usbd_ep_ack_stall+0x28>)
    9fbe:	4798      	blx	r3
}
    9fc0:	bf00      	nop
    9fc2:	3708      	adds	r7, #8
    9fc4:	46bd      	mov	sp, r7
    9fc6:	bd80      	pop	{r7, pc}
    9fc8:	00009e19 	.word	0x00009e19

00009fcc <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    9fcc:	b580      	push	{r7, lr}
    9fce:	b082      	sub	sp, #8
    9fd0:	af00      	add	r7, sp, #0
    9fd2:	4603      	mov	r3, r0
    9fd4:	71fb      	strb	r3, [r7, #7]
    9fd6:	460b      	mov	r3, r1
    9fd8:	71bb      	strb	r3, [r7, #6]
    9fda:	4613      	mov	r3, r2
    9fdc:	717b      	strb	r3, [r7, #5]
	if (en) {
    9fde:	797b      	ldrb	r3, [r7, #5]
    9fe0:	2b00      	cmp	r3, #0
    9fe2:	d008      	beq.n	9ff6 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9fe4:	79bb      	ldrb	r3, [r7, #6]
    9fe6:	2220      	movs	r2, #32
    9fe8:	409a      	lsls	r2, r3
    9fea:	79fb      	ldrb	r3, [r7, #7]
    9fec:	4611      	mov	r1, r2
    9fee:	4618      	mov	r0, r3
    9ff0:	4b07      	ldr	r3, [pc, #28]	; (a010 <_usbd_ep_int_stall_en+0x44>)
    9ff2:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9ff4:	e007      	b.n	a006 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9ff6:	79bb      	ldrb	r3, [r7, #6]
    9ff8:	2220      	movs	r2, #32
    9ffa:	409a      	lsls	r2, r3
    9ffc:	79fb      	ldrb	r3, [r7, #7]
    9ffe:	4611      	mov	r1, r2
    a000:	4618      	mov	r0, r3
    a002:	4b04      	ldr	r3, [pc, #16]	; (a014 <_usbd_ep_int_stall_en+0x48>)
    a004:	4798      	blx	r3
}
    a006:	bf00      	nop
    a008:	3708      	adds	r7, #8
    a00a:	46bd      	mov	sp, r7
    a00c:	bd80      	pop	{r7, pc}
    a00e:	bf00      	nop
    a010:	00009e41 	.word	0x00009e41
    a014:	00009e69 	.word	0x00009e69

0000a018 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    a018:	b580      	push	{r7, lr}
    a01a:	b082      	sub	sp, #8
    a01c:	af00      	add	r7, sp, #0
    a01e:	4603      	mov	r3, r0
    a020:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    a022:	79fb      	ldrb	r3, [r7, #7]
    a024:	4619      	mov	r1, r3
    a026:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a02a:	4b03      	ldr	r3, [pc, #12]	; (a038 <_usbd_ep_stop_setup+0x20>)
    a02c:	4798      	blx	r3
}
    a02e:	bf00      	nop
    a030:	3708      	adds	r7, #8
    a032:	46bd      	mov	sp, r7
    a034:	bd80      	pop	{r7, pc}
    a036:	bf00      	nop
    a038:	0000999d 	.word	0x0000999d

0000a03c <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    a03c:	b580      	push	{r7, lr}
    a03e:	b082      	sub	sp, #8
    a040:	af00      	add	r7, sp, #0
    a042:	4603      	mov	r3, r0
    a044:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    a046:	79fb      	ldrb	r3, [r7, #7]
    a048:	2210      	movs	r2, #16
    a04a:	4619      	mov	r1, r3
    a04c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a050:	4b05      	ldr	r3, [pc, #20]	; (a068 <_usbd_ep_is_setup+0x2c>)
    a052:	4798      	blx	r3
    a054:	4603      	mov	r3, r0
    a056:	2b00      	cmp	r3, #0
    a058:	bf14      	ite	ne
    a05a:	2301      	movne	r3, #1
    a05c:	2300      	moveq	r3, #0
    a05e:	b2db      	uxtb	r3, r3
}
    a060:	4618      	mov	r0, r3
    a062:	3708      	adds	r7, #8
    a064:	46bd      	mov	sp, r7
    a066:	bd80      	pop	{r7, pc}
    a068:	00009893 	.word	0x00009893

0000a06c <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    a06c:	b580      	push	{r7, lr}
    a06e:	b082      	sub	sp, #8
    a070:	af00      	add	r7, sp, #0
    a072:	4603      	mov	r3, r0
    a074:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    a076:	79fb      	ldrb	r3, [r7, #7]
    a078:	2110      	movs	r1, #16
    a07a:	4618      	mov	r0, r3
    a07c:	4b02      	ldr	r3, [pc, #8]	; (a088 <_usbd_ep_ack_setup+0x1c>)
    a07e:	4798      	blx	r3
}
    a080:	bf00      	nop
    a082:	3708      	adds	r7, #8
    a084:	46bd      	mov	sp, r7
    a086:	bd80      	pop	{r7, pc}
    a088:	00009e19 	.word	0x00009e19

0000a08c <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    a08c:	b580      	push	{r7, lr}
    a08e:	b082      	sub	sp, #8
    a090:	af00      	add	r7, sp, #0
    a092:	4603      	mov	r3, r0
    a094:	71fb      	strb	r3, [r7, #7]
    a096:	460b      	mov	r3, r1
    a098:	71bb      	strb	r3, [r7, #6]
    a09a:	4613      	mov	r3, r2
    a09c:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    a09e:	797b      	ldrb	r3, [r7, #5]
    a0a0:	2b00      	cmp	r3, #0
    a0a2:	d00b      	beq.n	a0bc <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    a0a4:	79bb      	ldrb	r3, [r7, #6]
    a0a6:	2201      	movs	r2, #1
    a0a8:	fa02 f303 	lsl.w	r3, r2, r3
    a0ac:	b2da      	uxtb	r2, r3
    a0ae:	79fb      	ldrb	r3, [r7, #7]
    a0b0:	4619      	mov	r1, r3
    a0b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a0b6:	4b09      	ldr	r3, [pc, #36]	; (a0dc <_usbd_ep_set_toggle+0x50>)
    a0b8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    a0ba:	e00a      	b.n	a0d2 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    a0bc:	79bb      	ldrb	r3, [r7, #6]
    a0be:	2201      	movs	r2, #1
    a0c0:	fa02 f303 	lsl.w	r3, r2, r3
    a0c4:	b2da      	uxtb	r2, r3
    a0c6:	79fb      	ldrb	r3, [r7, #7]
    a0c8:	4619      	mov	r1, r3
    a0ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a0ce:	4b04      	ldr	r3, [pc, #16]	; (a0e0 <_usbd_ep_set_toggle+0x54>)
    a0d0:	4798      	blx	r3
}
    a0d2:	bf00      	nop
    a0d4:	3708      	adds	r7, #8
    a0d6:	46bd      	mov	sp, r7
    a0d8:	bd80      	pop	{r7, pc}
    a0da:	bf00      	nop
    a0dc:	0000991d 	.word	0x0000991d
    a0e0:	00009971 	.word	0x00009971

0000a0e4 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    a0e4:	b580      	push	{r7, lr}
    a0e6:	b082      	sub	sp, #8
    a0e8:	af00      	add	r7, sp, #0
    a0ea:	4603      	mov	r3, r0
    a0ec:	460a      	mov	r2, r1
    a0ee:	71fb      	strb	r3, [r7, #7]
    a0f0:	4613      	mov	r3, r2
    a0f2:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    a0f4:	79bb      	ldrb	r3, [r7, #6]
    a0f6:	2201      	movs	r2, #1
    a0f8:	409a      	lsls	r2, r3
    a0fa:	79fb      	ldrb	r3, [r7, #7]
    a0fc:	4611      	mov	r1, r2
    a0fe:	4618      	mov	r0, r3
    a100:	4b02      	ldr	r3, [pc, #8]	; (a10c <_usbd_ep_ack_io_cpt+0x28>)
    a102:	4798      	blx	r3
}
    a104:	bf00      	nop
    a106:	3708      	adds	r7, #8
    a108:	46bd      	mov	sp, r7
    a10a:	bd80      	pop	{r7, pc}
    a10c:	00009e19 	.word	0x00009e19

0000a110 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    a110:	b480      	push	{r7}
    a112:	b085      	sub	sp, #20
    a114:	af00      	add	r7, sp, #0
    a116:	4603      	mov	r3, r0
    a118:	603a      	str	r2, [r7, #0]
    a11a:	71fb      	strb	r3, [r7, #7]
    a11c:	460b      	mov	r3, r1
    a11e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a120:	79fa      	ldrb	r2, [r7, #7]
    a122:	79bb      	ldrb	r3, [r7, #6]
    a124:	0052      	lsls	r2, r2, #1
    a126:	4413      	add	r3, r2
    a128:	011b      	lsls	r3, r3, #4
    a12a:	4a06      	ldr	r2, [pc, #24]	; (a144 <_usbd_ep_set_buf+0x34>)
    a12c:	4413      	add	r3, r2
    a12e:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    a130:	68fb      	ldr	r3, [r7, #12]
    a132:	683a      	ldr	r2, [r7, #0]
    a134:	601a      	str	r2, [r3, #0]
}
    a136:	bf00      	nop
    a138:	3714      	adds	r7, #20
    a13a:	46bd      	mov	sp, r7
    a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a140:	4770      	bx	lr
    a142:	bf00      	nop
    a144:	20000d00 	.word	0x20000d00

0000a148 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    a148:	b480      	push	{r7}
    a14a:	b085      	sub	sp, #20
    a14c:	af00      	add	r7, sp, #0
    a14e:	4603      	mov	r3, r0
    a150:	71fb      	strb	r3, [r7, #7]
    a152:	460b      	mov	r3, r1
    a154:	71bb      	strb	r3, [r7, #6]
    a156:	4613      	mov	r3, r2
    a158:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a15a:	79fa      	ldrb	r2, [r7, #7]
    a15c:	79bb      	ldrb	r3, [r7, #6]
    a15e:	0052      	lsls	r2, r2, #1
    a160:	4413      	add	r3, r2
    a162:	011b      	lsls	r3, r3, #4
    a164:	4a08      	ldr	r2, [pc, #32]	; (a188 <_usbd_ep_set_in_count+0x40>)
    a166:	4413      	add	r3, r2
    a168:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    a16a:	88bb      	ldrh	r3, [r7, #4]
    a16c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a170:	b299      	uxth	r1, r3
    a172:	68fa      	ldr	r2, [r7, #12]
    a174:	6853      	ldr	r3, [r2, #4]
    a176:	f361 339b 	bfi	r3, r1, #14, #14
    a17a:	6053      	str	r3, [r2, #4]
}
    a17c:	bf00      	nop
    a17e:	3714      	adds	r7, #20
    a180:	46bd      	mov	sp, r7
    a182:	f85d 7b04 	ldr.w	r7, [sp], #4
    a186:	4770      	bx	lr
    a188:	20000d00 	.word	0x20000d00

0000a18c <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    a18c:	b480      	push	{r7}
    a18e:	b085      	sub	sp, #20
    a190:	af00      	add	r7, sp, #0
    a192:	4603      	mov	r3, r0
    a194:	71fb      	strb	r3, [r7, #7]
    a196:	460b      	mov	r3, r1
    a198:	71bb      	strb	r3, [r7, #6]
    a19a:	4613      	mov	r3, r2
    a19c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a19e:	79fa      	ldrb	r2, [r7, #7]
    a1a0:	79bb      	ldrb	r3, [r7, #6]
    a1a2:	0052      	lsls	r2, r2, #1
    a1a4:	4413      	add	r3, r2
    a1a6:	011b      	lsls	r3, r3, #4
    a1a8:	4a08      	ldr	r2, [pc, #32]	; (a1cc <_usbd_ep_set_in_size+0x40>)
    a1aa:	4413      	add	r3, r2
    a1ac:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    a1ae:	88bb      	ldrh	r3, [r7, #4]
    a1b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a1b4:	b299      	uxth	r1, r3
    a1b6:	68fa      	ldr	r2, [r7, #12]
    a1b8:	6853      	ldr	r3, [r2, #4]
    a1ba:	f361 030d 	bfi	r3, r1, #0, #14
    a1be:	6053      	str	r3, [r2, #4]
}
    a1c0:	bf00      	nop
    a1c2:	3714      	adds	r7, #20
    a1c4:	46bd      	mov	sp, r7
    a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1ca:	4770      	bx	lr
    a1cc:	20000d00 	.word	0x20000d00

0000a1d0 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    a1d0:	b480      	push	{r7}
    a1d2:	b085      	sub	sp, #20
    a1d4:	af00      	add	r7, sp, #0
    a1d6:	4603      	mov	r3, r0
    a1d8:	71fb      	strb	r3, [r7, #7]
    a1da:	460b      	mov	r3, r1
    a1dc:	71bb      	strb	r3, [r7, #6]
    a1de:	4613      	mov	r3, r2
    a1e0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a1e2:	79fa      	ldrb	r2, [r7, #7]
    a1e4:	79bb      	ldrb	r3, [r7, #6]
    a1e6:	0052      	lsls	r2, r2, #1
    a1e8:	4413      	add	r3, r2
    a1ea:	011b      	lsls	r3, r3, #4
    a1ec:	4a08      	ldr	r2, [pc, #32]	; (a210 <_usbd_ep_set_out_count+0x40>)
    a1ee:	4413      	add	r3, r2
    a1f0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    a1f2:	88bb      	ldrh	r3, [r7, #4]
    a1f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a1f8:	b299      	uxth	r1, r3
    a1fa:	68fa      	ldr	r2, [r7, #12]
    a1fc:	6853      	ldr	r3, [r2, #4]
    a1fe:	f361 030d 	bfi	r3, r1, #0, #14
    a202:	6053      	str	r3, [r2, #4]
}
    a204:	bf00      	nop
    a206:	3714      	adds	r7, #20
    a208:	46bd      	mov	sp, r7
    a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a20e:	4770      	bx	lr
    a210:	20000d00 	.word	0x20000d00

0000a214 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    a214:	b480      	push	{r7}
    a216:	b085      	sub	sp, #20
    a218:	af00      	add	r7, sp, #0
    a21a:	4603      	mov	r3, r0
    a21c:	71fb      	strb	r3, [r7, #7]
    a21e:	460b      	mov	r3, r1
    a220:	71bb      	strb	r3, [r7, #6]
    a222:	4613      	mov	r3, r2
    a224:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a226:	79fa      	ldrb	r2, [r7, #7]
    a228:	79bb      	ldrb	r3, [r7, #6]
    a22a:	0052      	lsls	r2, r2, #1
    a22c:	4413      	add	r3, r2
    a22e:	011b      	lsls	r3, r3, #4
    a230:	4a08      	ldr	r2, [pc, #32]	; (a254 <_usbd_ep_set_out_size+0x40>)
    a232:	4413      	add	r3, r2
    a234:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    a236:	88bb      	ldrh	r3, [r7, #4]
    a238:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a23c:	b299      	uxth	r1, r3
    a23e:	68fa      	ldr	r2, [r7, #12]
    a240:	6853      	ldr	r3, [r2, #4]
    a242:	f361 339b 	bfi	r3, r1, #14, #14
    a246:	6053      	str	r3, [r2, #4]
}
    a248:	bf00      	nop
    a24a:	3714      	adds	r7, #20
    a24c:	46bd      	mov	sp, r7
    a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a252:	4770      	bx	lr
    a254:	20000d00 	.word	0x20000d00

0000a258 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    a258:	b580      	push	{r7, lr}
    a25a:	b084      	sub	sp, #16
    a25c:	af00      	add	r7, sp, #0
    a25e:	60ba      	str	r2, [r7, #8]
    a260:	607b      	str	r3, [r7, #4]
    a262:	4603      	mov	r3, r0
    a264:	73fb      	strb	r3, [r7, #15]
    a266:	460b      	mov	r3, r1
    a268:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    a26a:	68bb      	ldr	r3, [r7, #8]
    a26c:	b29a      	uxth	r2, r3
    a26e:	7bb9      	ldrb	r1, [r7, #14]
    a270:	7bfb      	ldrb	r3, [r7, #15]
    a272:	4618      	mov	r0, r3
    a274:	4b06      	ldr	r3, [pc, #24]	; (a290 <_usbd_ep_set_in_trans+0x38>)
    a276:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    a278:	687b      	ldr	r3, [r7, #4]
    a27a:	b29a      	uxth	r2, r3
    a27c:	7bb9      	ldrb	r1, [r7, #14]
    a27e:	7bfb      	ldrb	r3, [r7, #15]
    a280:	4618      	mov	r0, r3
    a282:	4b04      	ldr	r3, [pc, #16]	; (a294 <_usbd_ep_set_in_trans+0x3c>)
    a284:	4798      	blx	r3
}
    a286:	bf00      	nop
    a288:	3710      	adds	r7, #16
    a28a:	46bd      	mov	sp, r7
    a28c:	bd80      	pop	{r7, pc}
    a28e:	bf00      	nop
    a290:	0000a18d 	.word	0x0000a18d
    a294:	0000a149 	.word	0x0000a149

0000a298 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    a298:	b580      	push	{r7, lr}
    a29a:	b084      	sub	sp, #16
    a29c:	af00      	add	r7, sp, #0
    a29e:	60ba      	str	r2, [r7, #8]
    a2a0:	607b      	str	r3, [r7, #4]
    a2a2:	4603      	mov	r3, r0
    a2a4:	73fb      	strb	r3, [r7, #15]
    a2a6:	460b      	mov	r3, r1
    a2a8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    a2aa:	68bb      	ldr	r3, [r7, #8]
    a2ac:	b29a      	uxth	r2, r3
    a2ae:	7bb9      	ldrb	r1, [r7, #14]
    a2b0:	7bfb      	ldrb	r3, [r7, #15]
    a2b2:	4618      	mov	r0, r3
    a2b4:	4b06      	ldr	r3, [pc, #24]	; (a2d0 <_usbd_ep_set_out_trans+0x38>)
    a2b6:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    a2b8:	687b      	ldr	r3, [r7, #4]
    a2ba:	b29a      	uxth	r2, r3
    a2bc:	7bb9      	ldrb	r1, [r7, #14]
    a2be:	7bfb      	ldrb	r3, [r7, #15]
    a2c0:	4618      	mov	r0, r3
    a2c2:	4b04      	ldr	r3, [pc, #16]	; (a2d4 <_usbd_ep_set_out_trans+0x3c>)
    a2c4:	4798      	blx	r3
}
    a2c6:	bf00      	nop
    a2c8:	3710      	adds	r7, #16
    a2ca:	46bd      	mov	sp, r7
    a2cc:	bd80      	pop	{r7, pc}
    a2ce:	bf00      	nop
    a2d0:	0000a215 	.word	0x0000a215
    a2d4:	0000a1d1 	.word	0x0000a1d1

0000a2d8 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    a2d8:	b480      	push	{r7}
    a2da:	b085      	sub	sp, #20
    a2dc:	af00      	add	r7, sp, #0
    a2de:	4603      	mov	r3, r0
    a2e0:	460a      	mov	r2, r1
    a2e2:	71fb      	strb	r3, [r7, #7]
    a2e4:	4613      	mov	r3, r2
    a2e6:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a2e8:	79fa      	ldrb	r2, [r7, #7]
    a2ea:	79bb      	ldrb	r3, [r7, #6]
    a2ec:	0052      	lsls	r2, r2, #1
    a2ee:	4413      	add	r3, r2
    a2f0:	011b      	lsls	r3, r3, #4
    a2f2:	4a06      	ldr	r2, [pc, #24]	; (a30c <_usbd_ep_clear_bank_status+0x34>)
    a2f4:	4413      	add	r3, r2
    a2f6:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    a2f8:	68fb      	ldr	r3, [r7, #12]
    a2fa:	2200      	movs	r2, #0
    a2fc:	729a      	strb	r2, [r3, #10]
}
    a2fe:	bf00      	nop
    a300:	3714      	adds	r7, #20
    a302:	46bd      	mov	sp, r7
    a304:	f85d 7b04 	ldr.w	r7, [sp], #4
    a308:	4770      	bx	lr
    a30a:	bf00      	nop
    a30c:	20000d00 	.word	0x20000d00

0000a310 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    a310:	b580      	push	{r7, lr}
    a312:	b082      	sub	sp, #8
    a314:	af00      	add	r7, sp, #0
    a316:	4603      	mov	r3, r0
    a318:	71fb      	strb	r3, [r7, #7]
    a31a:	460b      	mov	r3, r1
    a31c:	71bb      	strb	r3, [r7, #6]
    a31e:	4613      	mov	r3, r2
    a320:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    a322:	797b      	ldrb	r3, [r7, #5]
    a324:	2b00      	cmp	r3, #0
    a326:	d00b      	beq.n	a340 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    a328:	79bb      	ldrb	r3, [r7, #6]
    a32a:	2240      	movs	r2, #64	; 0x40
    a32c:	fa02 f303 	lsl.w	r3, r2, r3
    a330:	b2da      	uxtb	r2, r3
    a332:	79fb      	ldrb	r3, [r7, #7]
    a334:	4619      	mov	r1, r3
    a336:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a33a:	4b09      	ldr	r3, [pc, #36]	; (a360 <_usbd_ep_set_in_rdy+0x50>)
    a33c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    a33e:	e00a      	b.n	a356 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    a340:	79bb      	ldrb	r3, [r7, #6]
    a342:	2240      	movs	r2, #64	; 0x40
    a344:	fa02 f303 	lsl.w	r3, r2, r3
    a348:	b2da      	uxtb	r2, r3
    a34a:	79fb      	ldrb	r3, [r7, #7]
    a34c:	4619      	mov	r1, r3
    a34e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a352:	4b04      	ldr	r3, [pc, #16]	; (a364 <_usbd_ep_set_in_rdy+0x54>)
    a354:	4798      	blx	r3
}
    a356:	bf00      	nop
    a358:	3708      	adds	r7, #8
    a35a:	46bd      	mov	sp, r7
    a35c:	bd80      	pop	{r7, pc}
    a35e:	bf00      	nop
    a360:	0000991d 	.word	0x0000991d
    a364:	00009971 	.word	0x00009971

0000a368 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    a368:	b580      	push	{r7, lr}
    a36a:	b082      	sub	sp, #8
    a36c:	af00      	add	r7, sp, #0
    a36e:	4603      	mov	r3, r0
    a370:	71fb      	strb	r3, [r7, #7]
    a372:	460b      	mov	r3, r1
    a374:	71bb      	strb	r3, [r7, #6]
    a376:	4613      	mov	r3, r2
    a378:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    a37a:	797b      	ldrb	r3, [r7, #5]
    a37c:	2b00      	cmp	r3, #0
    a37e:	d00b      	beq.n	a398 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    a380:	79bb      	ldrb	r3, [r7, #6]
    a382:	2240      	movs	r2, #64	; 0x40
    a384:	fa02 f303 	lsl.w	r3, r2, r3
    a388:	b2da      	uxtb	r2, r3
    a38a:	79fb      	ldrb	r3, [r7, #7]
    a38c:	4619      	mov	r1, r3
    a38e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a392:	4b09      	ldr	r3, [pc, #36]	; (a3b8 <_usbd_ep_set_out_rdy+0x50>)
    a394:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    a396:	e00a      	b.n	a3ae <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    a398:	79bb      	ldrb	r3, [r7, #6]
    a39a:	2240      	movs	r2, #64	; 0x40
    a39c:	fa02 f303 	lsl.w	r3, r2, r3
    a3a0:	b2da      	uxtb	r2, r3
    a3a2:	79fb      	ldrb	r3, [r7, #7]
    a3a4:	4619      	mov	r1, r3
    a3a6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a3aa:	4b04      	ldr	r3, [pc, #16]	; (a3bc <_usbd_ep_set_out_rdy+0x54>)
    a3ac:	4798      	blx	r3
}
    a3ae:	bf00      	nop
    a3b0:	3708      	adds	r7, #8
    a3b2:	46bd      	mov	sp, r7
    a3b4:	bd80      	pop	{r7, pc}
    a3b6:	bf00      	nop
    a3b8:	00009971 	.word	0x00009971
    a3bc:	0000991d 	.word	0x0000991d

0000a3c0 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    a3c0:	b480      	push	{r7}
    a3c2:	b083      	sub	sp, #12
    a3c4:	af00      	add	r7, sp, #0
    a3c6:	4603      	mov	r3, r0
    a3c8:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a3ca:	88fb      	ldrh	r3, [r7, #6]
    a3cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a3d0:	d820      	bhi.n	a414 <_usbd_ep_pcksize_size+0x54>
    a3d2:	88fb      	ldrh	r3, [r7, #6]
    a3d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a3d8:	d81a      	bhi.n	a410 <_usbd_ep_pcksize_size+0x50>
    a3da:	88fb      	ldrh	r3, [r7, #6]
    a3dc:	2b80      	cmp	r3, #128	; 0x80
    a3de:	d815      	bhi.n	a40c <_usbd_ep_pcksize_size+0x4c>
    a3e0:	88fb      	ldrh	r3, [r7, #6]
    a3e2:	2b40      	cmp	r3, #64	; 0x40
    a3e4:	d810      	bhi.n	a408 <_usbd_ep_pcksize_size+0x48>
    a3e6:	88fb      	ldrh	r3, [r7, #6]
    a3e8:	2b20      	cmp	r3, #32
    a3ea:	d80b      	bhi.n	a404 <_usbd_ep_pcksize_size+0x44>
    a3ec:	88fb      	ldrh	r3, [r7, #6]
    a3ee:	2b10      	cmp	r3, #16
    a3f0:	d806      	bhi.n	a400 <_usbd_ep_pcksize_size+0x40>
    a3f2:	88fb      	ldrh	r3, [r7, #6]
    a3f4:	2b08      	cmp	r3, #8
    a3f6:	bf8c      	ite	hi
    a3f8:	2301      	movhi	r3, #1
    a3fa:	2300      	movls	r3, #0
    a3fc:	b2db      	uxtb	r3, r3
    a3fe:	e00a      	b.n	a416 <_usbd_ep_pcksize_size+0x56>
    a400:	2302      	movs	r3, #2
    a402:	e008      	b.n	a416 <_usbd_ep_pcksize_size+0x56>
    a404:	2303      	movs	r3, #3
    a406:	e006      	b.n	a416 <_usbd_ep_pcksize_size+0x56>
    a408:	2304      	movs	r3, #4
    a40a:	e004      	b.n	a416 <_usbd_ep_pcksize_size+0x56>
    a40c:	2305      	movs	r3, #5
    a40e:	e002      	b.n	a416 <_usbd_ep_pcksize_size+0x56>
    a410:	2306      	movs	r3, #6
    a412:	e000      	b.n	a416 <_usbd_ep_pcksize_size+0x56>
    a414:	2307      	movs	r3, #7
}
    a416:	4618      	mov	r0, r3
    a418:	370c      	adds	r7, #12
    a41a:	46bd      	mov	sp, r7
    a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a420:	4770      	bx	lr
	...

0000a424 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    a424:	b480      	push	{r7}
    a426:	b085      	sub	sp, #20
    a428:	af00      	add	r7, sp, #0
    a42a:	4603      	mov	r3, r0
    a42c:	460a      	mov	r2, r1
    a42e:	71fb      	strb	r3, [r7, #7]
    a430:	4613      	mov	r3, r2
    a432:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a434:	79fb      	ldrb	r3, [r7, #7]
    a436:	2b00      	cmp	r3, #0
    a438:	d008      	beq.n	a44c <_usb_d_dev_ept+0x28>
    a43a:	79bb      	ldrb	r3, [r7, #6]
    a43c:	2b00      	cmp	r3, #0
    a43e:	d003      	beq.n	a448 <_usb_d_dev_ept+0x24>
    a440:	79fb      	ldrb	r3, [r7, #7]
    a442:	3304      	adds	r3, #4
    a444:	b2db      	uxtb	r3, r3
    a446:	e002      	b.n	a44e <_usb_d_dev_ept+0x2a>
    a448:	79fb      	ldrb	r3, [r7, #7]
    a44a:	e000      	b.n	a44e <_usb_d_dev_ept+0x2a>
    a44c:	2300      	movs	r3, #0
    a44e:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    a450:	7bfa      	ldrb	r2, [r7, #15]
    a452:	4613      	mov	r3, r2
    a454:	009b      	lsls	r3, r3, #2
    a456:	4413      	add	r3, r2
    a458:	009b      	lsls	r3, r3, #2
    a45a:	3310      	adds	r3, #16
    a45c:	4a04      	ldr	r2, [pc, #16]	; (a470 <_usb_d_dev_ept+0x4c>)
    a45e:	4413      	add	r3, r2
    a460:	3304      	adds	r3, #4
}
    a462:	4618      	mov	r0, r3
    a464:	3714      	adds	r7, #20
    a466:	46bd      	mov	sp, r7
    a468:	f85d 7b04 	ldr.w	r7, [sp], #4
    a46c:	4770      	bx	lr
    a46e:	bf00      	nop
    a470:	20000c38 	.word	0x20000c38

0000a474 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    a474:	b580      	push	{r7, lr}
    a476:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    a478:	2104      	movs	r1, #4
    a47a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a47e:	4b03      	ldr	r3, [pc, #12]	; (a48c <_usb_d_dev_sof+0x18>)
    a480:	4798      	blx	r3
	dev_inst.callbacks.sof();
    a482:	4b03      	ldr	r3, [pc, #12]	; (a490 <_usb_d_dev_sof+0x1c>)
    a484:	681b      	ldr	r3, [r3, #0]
    a486:	4798      	blx	r3
}
    a488:	bf00      	nop
    a48a:	bd80      	pop	{r7, pc}
    a48c:	00009aeb 	.word	0x00009aeb
    a490:	20000c38 	.word	0x20000c38

0000a494 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    a494:	b580      	push	{r7, lr}
    a496:	b084      	sub	sp, #16
    a498:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    a49a:	2300      	movs	r3, #0
    a49c:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a49e:	f240 2101 	movw	r1, #513	; 0x201
    a4a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a4a6:	4b1a      	ldr	r3, [pc, #104]	; (a510 <_usb_d_dev_lpmsusp+0x7c>)
    a4a8:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a4aa:	f240 2101 	movw	r1, #513	; 0x201
    a4ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a4b2:	4b18      	ldr	r3, [pc, #96]	; (a514 <_usb_d_dev_lpmsusp+0x80>)
    a4b4:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a4b6:	2170      	movs	r1, #112	; 0x70
    a4b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a4bc:	4b16      	ldr	r3, [pc, #88]	; (a518 <_usb_d_dev_lpmsusp+0x84>)
    a4be:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    a4c0:	2300      	movs	r3, #0
    a4c2:	73fb      	strb	r3, [r7, #15]
    a4c4:	e018      	b.n	a4f8 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    a4c6:	7bfb      	ldrb	r3, [r7, #15]
    a4c8:	015b      	lsls	r3, r3, #5
    a4ca:	4a14      	ldr	r2, [pc, #80]	; (a51c <_usb_d_dev_lpmsusp+0x88>)
    a4cc:	4413      	add	r3, r2
    a4ce:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    a4d0:	687b      	ldr	r3, [r7, #4]
    a4d2:	891b      	ldrh	r3, [r3, #8]
    a4d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    a4d8:	b2db      	uxtb	r3, r3
    a4da:	2b03      	cmp	r3, #3
    a4dc:	d109      	bne.n	a4f2 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    a4de:	687b      	ldr	r3, [r7, #4]
    a4e0:	891b      	ldrh	r3, [r3, #8]
    a4e2:	f3c3 130a 	ubfx	r3, r3, #4, #11
    a4e6:	b29b      	uxth	r3, r3
    a4e8:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    a4ea:	687b      	ldr	r3, [r7, #4]
    a4ec:	2200      	movs	r2, #0
    a4ee:	811a      	strh	r2, [r3, #8]
			break;
    a4f0:	e005      	b.n	a4fe <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    a4f2:	7bfb      	ldrb	r3, [r7, #15]
    a4f4:	3301      	adds	r3, #1
    a4f6:	73fb      	strb	r3, [r7, #15]
    a4f8:	7bfb      	ldrb	r3, [r7, #15]
    a4fa:	2b03      	cmp	r3, #3
    a4fc:	d9e3      	bls.n	a4c6 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    a4fe:	4b08      	ldr	r3, [pc, #32]	; (a520 <_usb_d_dev_lpmsusp+0x8c>)
    a500:	685b      	ldr	r3, [r3, #4]
    a502:	68b9      	ldr	r1, [r7, #8]
    a504:	2003      	movs	r0, #3
    a506:	4798      	blx	r3
}
    a508:	bf00      	nop
    a50a:	3710      	adds	r7, #16
    a50c:	46bd      	mov	sp, r7
    a50e:	bd80      	pop	{r7, pc}
    a510:	00009aeb 	.word	0x00009aeb
    a514:	00009b41 	.word	0x00009b41
    a518:	00009b09 	.word	0x00009b09
    a51c:	20000d00 	.word	0x20000d00
    a520:	20000c38 	.word	0x20000c38

0000a524 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    a524:	b580      	push	{r7, lr}
    a526:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    a528:	2180      	movs	r1, #128	; 0x80
    a52a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a52e:	4b04      	ldr	r3, [pc, #16]	; (a540 <_usb_d_dev_ramerr+0x1c>)
    a530:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    a532:	4b04      	ldr	r3, [pc, #16]	; (a544 <_usb_d_dev_ramerr+0x20>)
    a534:	685b      	ldr	r3, [r3, #4]
    a536:	2100      	movs	r1, #0
    a538:	2005      	movs	r0, #5
    a53a:	4798      	blx	r3
}
    a53c:	bf00      	nop
    a53e:	bd80      	pop	{r7, pc}
    a540:	00009aeb 	.word	0x00009aeb
    a544:	20000c38 	.word	0x20000c38

0000a548 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    a548:	b580      	push	{r7, lr}
    a54a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a54c:	2170      	movs	r1, #112	; 0x70
    a54e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a552:	4b0b      	ldr	r3, [pc, #44]	; (a580 <_usb_d_dev_wakeup+0x38>)
    a554:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a556:	2170      	movs	r1, #112	; 0x70
    a558:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a55c:	4b09      	ldr	r3, [pc, #36]	; (a584 <_usb_d_dev_wakeup+0x3c>)
    a55e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a560:	f240 2101 	movw	r1, #513	; 0x201
    a564:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a568:	4b07      	ldr	r3, [pc, #28]	; (a588 <_usb_d_dev_wakeup+0x40>)
    a56a:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    a56c:	2000      	movs	r0, #0
    a56e:	4b07      	ldr	r3, [pc, #28]	; (a58c <_usb_d_dev_wakeup+0x44>)
    a570:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    a572:	4b07      	ldr	r3, [pc, #28]	; (a590 <_usb_d_dev_wakeup+0x48>)
    a574:	685b      	ldr	r3, [r3, #4]
    a576:	2100      	movs	r1, #0
    a578:	2002      	movs	r0, #2
    a57a:	4798      	blx	r3
}
    a57c:	bf00      	nop
    a57e:	bd80      	pop	{r7, pc}
    a580:	00009aeb 	.word	0x00009aeb
    a584:	00009b41 	.word	0x00009b41
    a588:	00009b09 	.word	0x00009b09
    a58c:	00009de9 	.word	0x00009de9
    a590:	20000c38 	.word	0x20000c38

0000a594 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    a594:	b580      	push	{r7, lr}
    a596:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    a598:	2200      	movs	r2, #0
    a59a:	2100      	movs	r1, #0
    a59c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a5a0:	4b0d      	ldr	r3, [pc, #52]	; (a5d8 <_usb_d_dev_reset+0x44>)
    a5a2:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    a5a4:	2108      	movs	r1, #8
    a5a6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a5aa:	4b0c      	ldr	r3, [pc, #48]	; (a5dc <_usb_d_dev_reset+0x48>)
    a5ac:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a5ae:	2170      	movs	r1, #112	; 0x70
    a5b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a5b4:	4b0a      	ldr	r3, [pc, #40]	; (a5e0 <_usb_d_dev_reset+0x4c>)
    a5b6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a5b8:	f240 2101 	movw	r1, #513	; 0x201
    a5bc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a5c0:	4b08      	ldr	r3, [pc, #32]	; (a5e4 <_usb_d_dev_reset+0x50>)
    a5c2:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    a5c4:	4b08      	ldr	r3, [pc, #32]	; (a5e8 <_usb_d_dev_reset+0x54>)
    a5c6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    a5c8:	4b08      	ldr	r3, [pc, #32]	; (a5ec <_usb_d_dev_reset+0x58>)
    a5ca:	685b      	ldr	r3, [r3, #4]
    a5cc:	2100      	movs	r1, #0
    a5ce:	2001      	movs	r0, #1
    a5d0:	4798      	blx	r3
}
    a5d2:	bf00      	nop
    a5d4:	bd80      	pop	{r7, pc}
    a5d6:	bf00      	nop
    a5d8:	00009a81 	.word	0x00009a81
    a5dc:	00009aeb 	.word	0x00009aeb
    a5e0:	00009b41 	.word	0x00009b41
    a5e4:	00009b09 	.word	0x00009b09
    a5e8:	0000b151 	.word	0x0000b151
    a5ec:	20000c38 	.word	0x20000c38

0000a5f0 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    a5f0:	b580      	push	{r7, lr}
    a5f2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a5f4:	f240 2101 	movw	r1, #513	; 0x201
    a5f8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a5fc:	4b09      	ldr	r3, [pc, #36]	; (a624 <_usb_d_dev_suspend+0x34>)
    a5fe:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a600:	f240 2101 	movw	r1, #513	; 0x201
    a604:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a608:	4b07      	ldr	r3, [pc, #28]	; (a628 <_usb_d_dev_suspend+0x38>)
    a60a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a60c:	2170      	movs	r1, #112	; 0x70
    a60e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a612:	4b06      	ldr	r3, [pc, #24]	; (a62c <_usb_d_dev_suspend+0x3c>)
    a614:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    a616:	4b06      	ldr	r3, [pc, #24]	; (a630 <_usb_d_dev_suspend+0x40>)
    a618:	685b      	ldr	r3, [r3, #4]
    a61a:	2100      	movs	r1, #0
    a61c:	2004      	movs	r0, #4
    a61e:	4798      	blx	r3
}
    a620:	bf00      	nop
    a622:	bd80      	pop	{r7, pc}
    a624:	00009aeb 	.word	0x00009aeb
    a628:	00009b41 	.word	0x00009b41
    a62c:	00009b09 	.word	0x00009b09
    a630:	20000c38 	.word	0x20000c38

0000a634 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    a634:	b580      	push	{r7, lr}
    a636:	b082      	sub	sp, #8
    a638:	af00      	add	r7, sp, #0
	bool     rc    = true;
    a63a:	2301      	movs	r3, #1
    a63c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    a63e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a642:	4b22      	ldr	r3, [pc, #136]	; (a6cc <_usb_d_dev_handle_nep+0x98>)
    a644:	4798      	blx	r3
    a646:	4603      	mov	r3, r0
    a648:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    a64a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a64e:	4b20      	ldr	r3, [pc, #128]	; (a6d0 <_usb_d_dev_handle_nep+0x9c>)
    a650:	4798      	blx	r3
    a652:	4603      	mov	r3, r0
    a654:	461a      	mov	r2, r3
    a656:	88bb      	ldrh	r3, [r7, #4]
    a658:	4013      	ands	r3, r2
    a65a:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    a65c:	88bb      	ldrh	r3, [r7, #4]
    a65e:	f003 0304 	and.w	r3, r3, #4
    a662:	2b00      	cmp	r3, #0
    a664:	d003      	beq.n	a66e <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    a666:	4b1b      	ldr	r3, [pc, #108]	; (a6d4 <_usb_d_dev_handle_nep+0xa0>)
    a668:	4798      	blx	r3
		return true;
    a66a:	2301      	movs	r3, #1
    a66c:	e02a      	b.n	a6c4 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    a66e:	88bb      	ldrh	r3, [r7, #4]
    a670:	f403 7300 	and.w	r3, r3, #512	; 0x200
    a674:	2b00      	cmp	r3, #0
    a676:	d002      	beq.n	a67e <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    a678:	4b17      	ldr	r3, [pc, #92]	; (a6d8 <_usb_d_dev_handle_nep+0xa4>)
    a67a:	4798      	blx	r3
    a67c:	e021      	b.n	a6c2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    a67e:	88bb      	ldrh	r3, [r7, #4]
    a680:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a684:	2b00      	cmp	r3, #0
    a686:	d002      	beq.n	a68e <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    a688:	4b14      	ldr	r3, [pc, #80]	; (a6dc <_usb_d_dev_handle_nep+0xa8>)
    a68a:	4798      	blx	r3
    a68c:	e019      	b.n	a6c2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    a68e:	88bb      	ldrh	r3, [r7, #4]
    a690:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a694:	2b00      	cmp	r3, #0
    a696:	d002      	beq.n	a69e <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    a698:	4b11      	ldr	r3, [pc, #68]	; (a6e0 <_usb_d_dev_handle_nep+0xac>)
    a69a:	4798      	blx	r3
    a69c:	e011      	b.n	a6c2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    a69e:	88bb      	ldrh	r3, [r7, #4]
    a6a0:	f003 0308 	and.w	r3, r3, #8
    a6a4:	2b00      	cmp	r3, #0
    a6a6:	d002      	beq.n	a6ae <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    a6a8:	4b0e      	ldr	r3, [pc, #56]	; (a6e4 <_usb_d_dev_handle_nep+0xb0>)
    a6aa:	4798      	blx	r3
    a6ac:	e009      	b.n	a6c2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    a6ae:	88bb      	ldrh	r3, [r7, #4]
    a6b0:	f003 0301 	and.w	r3, r3, #1
    a6b4:	2b00      	cmp	r3, #0
    a6b6:	d002      	beq.n	a6be <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    a6b8:	4b0b      	ldr	r3, [pc, #44]	; (a6e8 <_usb_d_dev_handle_nep+0xb4>)
    a6ba:	4798      	blx	r3
    a6bc:	e001      	b.n	a6c2 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    a6be:	2300      	movs	r3, #0
    a6c0:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    a6c2:	79fb      	ldrb	r3, [r7, #7]
}
    a6c4:	4618      	mov	r0, r3
    a6c6:	3708      	adds	r7, #8
    a6c8:	46bd      	mov	sp, r7
    a6ca:	bd80      	pop	{r7, pc}
    a6cc:	00009ad1 	.word	0x00009ad1
    a6d0:	00009b27 	.word	0x00009b27
    a6d4:	0000a475 	.word	0x0000a475
    a6d8:	0000a495 	.word	0x0000a495
    a6dc:	0000a525 	.word	0x0000a525
    a6e0:	0000a549 	.word	0x0000a549
    a6e4:	0000a595 	.word	0x0000a595
    a6e8:	0000a5f1 	.word	0x0000a5f1

0000a6ec <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a6ec:	b590      	push	{r4, r7, lr}
    a6ee:	b089      	sub	sp, #36	; 0x24
    a6f0:	af00      	add	r7, sp, #0
    a6f2:	6078      	str	r0, [r7, #4]
    a6f4:	460b      	mov	r3, r1
    a6f6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    a6f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a6fc:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    a6fe:	687b      	ldr	r3, [r7, #4]
    a700:	7c9b      	ldrb	r3, [r3, #18]
    a702:	f003 030f 	and.w	r3, r3, #15
    a706:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a708:	7dfb      	ldrb	r3, [r7, #23]
    a70a:	015b      	lsls	r3, r3, #5
    a70c:	4a73      	ldr	r2, [pc, #460]	; (a8dc <_usb_d_dev_in_next+0x1f0>)
    a70e:	4413      	add	r3, r2
    a710:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    a712:	78fb      	ldrb	r3, [r7, #3]
    a714:	2b00      	cmp	r3, #0
    a716:	d006      	beq.n	a726 <_usb_d_dev_in_next+0x3a>
    a718:	693b      	ldr	r3, [r7, #16]
    a71a:	3310      	adds	r3, #16
    a71c:	685b      	ldr	r3, [r3, #4]
    a71e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a722:	b29b      	uxth	r3, r3
    a724:	e000      	b.n	a728 <_usb_d_dev_in_next+0x3c>
    a726:	2300      	movs	r3, #0
    a728:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    a72a:	687b      	ldr	r3, [r7, #4]
    a72c:	8a1b      	ldrh	r3, [r3, #16]
    a72e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a732:	4293      	cmp	r3, r2
    a734:	d103      	bne.n	a73e <_usb_d_dev_in_next+0x52>
    a736:	687b      	ldr	r3, [r7, #4]
    a738:	8a1b      	ldrh	r3, [r3, #16]
    a73a:	b21b      	sxth	r3, r3
    a73c:	e004      	b.n	a748 <_usb_d_dev_in_next+0x5c>
    a73e:	687b      	ldr	r3, [r7, #4]
    a740:	8a1b      	ldrh	r3, [r3, #16]
    a742:	3b01      	subs	r3, #1
    a744:	b29b      	uxth	r3, r3
    a746:	b21b      	sxth	r3, r3
    a748:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    a74c:	4013      	ands	r3, r2
    a74e:	b21b      	sxth	r3, r3
    a750:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    a752:	2300      	movs	r3, #0
    a754:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    a756:	687b      	ldr	r3, [r7, #4]
    a758:	7cdb      	ldrb	r3, [r3, #19]
    a75a:	f003 0307 	and.w	r3, r3, #7
    a75e:	b2db      	uxtb	r3, r3
    a760:	2b01      	cmp	r3, #1
    a762:	bf0c      	ite	eq
    a764:	2301      	moveq	r3, #1
    a766:	2300      	movne	r3, #0
    a768:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    a76a:	78fb      	ldrb	r3, [r7, #3]
    a76c:	2b00      	cmp	r3, #0
    a76e:	d004      	beq.n	a77a <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    a770:	7dfb      	ldrb	r3, [r7, #23]
    a772:	2101      	movs	r1, #1
    a774:	4618      	mov	r0, r3
    a776:	4b5a      	ldr	r3, [pc, #360]	; (a8e0 <_usb_d_dev_in_next+0x1f4>)
    a778:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    a77a:	687b      	ldr	r3, [r7, #4]
    a77c:	689a      	ldr	r2, [r3, #8]
    a77e:	89fb      	ldrh	r3, [r7, #14]
    a780:	441a      	add	r2, r3
    a782:	687b      	ldr	r3, [r7, #4]
    a784:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    a786:	687b      	ldr	r3, [r7, #4]
    a788:	689a      	ldr	r2, [r3, #8]
    a78a:	687b      	ldr	r3, [r7, #4]
    a78c:	685b      	ldr	r3, [r3, #4]
    a78e:	429a      	cmp	r2, r3
    a790:	d243      	bcs.n	a81a <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    a792:	687b      	ldr	r3, [r7, #4]
    a794:	685b      	ldr	r3, [r3, #4]
    a796:	b29a      	uxth	r2, r3
    a798:	687b      	ldr	r3, [r7, #4]
    a79a:	689b      	ldr	r3, [r3, #8]
    a79c:	b29b      	uxth	r3, r3
    a79e:	1ad3      	subs	r3, r2, r3
    a7a0:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    a7a2:	687b      	ldr	r3, [r7, #4]
    a7a4:	7cdb      	ldrb	r3, [r3, #19]
    a7a6:	f003 0320 	and.w	r3, r3, #32
    a7aa:	b2db      	uxtb	r3, r3
    a7ac:	2b00      	cmp	r3, #0
    a7ae:	d01b      	beq.n	a7e8 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    a7b0:	687b      	ldr	r3, [r7, #4]
    a7b2:	8a1b      	ldrh	r3, [r3, #16]
    a7b4:	8bfa      	ldrh	r2, [r7, #30]
    a7b6:	429a      	cmp	r2, r3
    a7b8:	d902      	bls.n	a7c0 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    a7ba:	687b      	ldr	r3, [r7, #4]
    a7bc:	8a1b      	ldrh	r3, [r3, #16]
    a7be:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    a7c0:	687b      	ldr	r3, [r7, #4]
    a7c2:	68d8      	ldr	r0, [r3, #12]
    a7c4:	687b      	ldr	r3, [r7, #4]
    a7c6:	681a      	ldr	r2, [r3, #0]
    a7c8:	687b      	ldr	r3, [r7, #4]
    a7ca:	689b      	ldr	r3, [r3, #8]
    a7cc:	4413      	add	r3, r2
    a7ce:	8bfa      	ldrh	r2, [r7, #30]
    a7d0:	4619      	mov	r1, r3
    a7d2:	4b44      	ldr	r3, [pc, #272]	; (a8e4 <_usb_d_dev_in_next+0x1f8>)
    a7d4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    a7d6:	687b      	ldr	r3, [r7, #4]
    a7d8:	68db      	ldr	r3, [r3, #12]
    a7da:	461a      	mov	r2, r3
    a7dc:	7dfb      	ldrb	r3, [r7, #23]
    a7de:	2101      	movs	r1, #1
    a7e0:	4618      	mov	r0, r3
    a7e2:	4b41      	ldr	r3, [pc, #260]	; (a8e8 <_usb_d_dev_in_next+0x1fc>)
    a7e4:	4798      	blx	r3
    a7e6:	e011      	b.n	a80c <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    a7e8:	8bfb      	ldrh	r3, [r7, #30]
    a7ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a7ee:	d902      	bls.n	a7f6 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    a7f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a7f4:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a7f6:	687b      	ldr	r3, [r7, #4]
    a7f8:	681a      	ldr	r2, [r3, #0]
    a7fa:	687b      	ldr	r3, [r7, #4]
    a7fc:	689b      	ldr	r3, [r3, #8]
    a7fe:	4413      	add	r3, r2
    a800:	461a      	mov	r2, r3
    a802:	7dfb      	ldrb	r3, [r7, #23]
    a804:	2101      	movs	r1, #1
    a806:	4618      	mov	r0, r3
    a808:	4b37      	ldr	r3, [pc, #220]	; (a8e8 <_usb_d_dev_in_next+0x1fc>)
    a80a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    a80c:	8bfa      	ldrh	r2, [r7, #30]
    a80e:	7df8      	ldrb	r0, [r7, #23]
    a810:	2300      	movs	r3, #0
    a812:	2101      	movs	r1, #1
    a814:	4c35      	ldr	r4, [pc, #212]	; (a8ec <_usb_d_dev_in_next+0x200>)
    a816:	47a0      	blx	r4
		goto _in_tx_exec;
    a818:	e041      	b.n	a89e <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    a81a:	687b      	ldr	r3, [r7, #4]
    a81c:	7cdb      	ldrb	r3, [r3, #19]
    a81e:	f003 0310 	and.w	r3, r3, #16
    a822:	b2db      	uxtb	r3, r3
    a824:	2b00      	cmp	r3, #0
    a826:	d00b      	beq.n	a840 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    a828:	687a      	ldr	r2, [r7, #4]
    a82a:	7cd3      	ldrb	r3, [r2, #19]
    a82c:	f36f 1304 	bfc	r3, #4, #1
    a830:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    a832:	7df8      	ldrb	r0, [r7, #23]
    a834:	2300      	movs	r3, #0
    a836:	2200      	movs	r2, #0
    a838:	2101      	movs	r1, #1
    a83a:	4c2c      	ldr	r4, [pc, #176]	; (a8ec <_usb_d_dev_in_next+0x200>)
    a83c:	47a0      	blx	r4
		goto _in_tx_exec;
    a83e:	e02e      	b.n	a89e <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    a840:	7afb      	ldrb	r3, [r7, #11]
    a842:	2b00      	cmp	r3, #0
    a844:	d006      	beq.n	a854 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    a846:	7dfb      	ldrb	r3, [r7, #23]
    a848:	224b      	movs	r2, #75	; 0x4b
    a84a:	4619      	mov	r1, r3
    a84c:	69b8      	ldr	r0, [r7, #24]
    a84e:	4b28      	ldr	r3, [pc, #160]	; (a8f0 <_usb_d_dev_in_next+0x204>)
    a850:	4798      	blx	r3
    a852:	e005      	b.n	a860 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    a854:	7dfb      	ldrb	r3, [r7, #23]
    a856:	224a      	movs	r2, #74	; 0x4a
    a858:	4619      	mov	r1, r3
    a85a:	69b8      	ldr	r0, [r7, #24]
    a85c:	4b24      	ldr	r3, [pc, #144]	; (a8f0 <_usb_d_dev_in_next+0x204>)
    a85e:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    a860:	687b      	ldr	r3, [r7, #4]
    a862:	8a1b      	ldrh	r3, [r3, #16]
    a864:	89ba      	ldrh	r2, [r7, #12]
    a866:	429a      	cmp	r2, r3
    a868:	d114      	bne.n	a894 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    a86a:	687a      	ldr	r2, [r7, #4]
    a86c:	7cd3      	ldrb	r3, [r2, #19]
    a86e:	f36f 1386 	bfc	r3, #6, #1
    a872:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    a874:	4b1f      	ldr	r3, [pc, #124]	; (a8f4 <_usb_d_dev_in_next+0x208>)
    a876:	68db      	ldr	r3, [r3, #12]
    a878:	687a      	ldr	r2, [r7, #4]
    a87a:	7c90      	ldrb	r0, [r2, #18]
    a87c:	687a      	ldr	r2, [r7, #4]
    a87e:	6892      	ldr	r2, [r2, #8]
    a880:	4611      	mov	r1, r2
    a882:	4798      	blx	r3
    a884:	4603      	mov	r3, r0
    a886:	2b00      	cmp	r3, #0
    a888:	d124      	bne.n	a8d4 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    a88a:	687a      	ldr	r2, [r7, #4]
    a88c:	7cd3      	ldrb	r3, [r2, #19]
    a88e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a892:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a894:	2100      	movs	r1, #0
    a896:	6878      	ldr	r0, [r7, #4]
    a898:	4b17      	ldr	r3, [pc, #92]	; (a8f8 <_usb_d_dev_in_next+0x20c>)
    a89a:	4798      	blx	r3
	return;
    a89c:	e01b      	b.n	a8d6 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    a89e:	78fb      	ldrb	r3, [r7, #3]
    a8a0:	f083 0301 	eor.w	r3, r3, #1
    a8a4:	b2db      	uxtb	r3, r3
    a8a6:	2b00      	cmp	r3, #0
    a8a8:	d00d      	beq.n	a8c6 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    a8aa:	7afb      	ldrb	r3, [r7, #11]
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	d002      	beq.n	a8b6 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    a8b0:	234e      	movs	r3, #78	; 0x4e
    a8b2:	777b      	strb	r3, [r7, #29]
    a8b4:	e001      	b.n	a8ba <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    a8b6:	234a      	movs	r3, #74	; 0x4a
    a8b8:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a8ba:	7f7a      	ldrb	r2, [r7, #29]
    a8bc:	7dfb      	ldrb	r3, [r7, #23]
    a8be:	4619      	mov	r1, r3
    a8c0:	69b8      	ldr	r0, [r7, #24]
    a8c2:	4b0e      	ldr	r3, [pc, #56]	; (a8fc <_usb_d_dev_in_next+0x210>)
    a8c4:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    a8c6:	7dfb      	ldrb	r3, [r7, #23]
    a8c8:	2201      	movs	r2, #1
    a8ca:	2101      	movs	r1, #1
    a8cc:	4618      	mov	r0, r3
    a8ce:	4b0c      	ldr	r3, [pc, #48]	; (a900 <_usb_d_dev_in_next+0x214>)
    a8d0:	4798      	blx	r3
    a8d2:	e000      	b.n	a8d6 <_usb_d_dev_in_next+0x1ea>
			return;
    a8d4:	bf00      	nop
}
    a8d6:	3724      	adds	r7, #36	; 0x24
    a8d8:	46bd      	mov	sp, r7
    a8da:	bd90      	pop	{r4, r7, pc}
    a8dc:	20000d00 	.word	0x20000d00
    a8e0:	0000a0e5 	.word	0x0000a0e5
    a8e4:	000107c9 	.word	0x000107c9
    a8e8:	0000a111 	.word	0x0000a111
    a8ec:	0000a259 	.word	0x0000a259
    a8f0:	000099f1 	.word	0x000099f1
    a8f4:	20000c38 	.word	0x20000c38
    a8f8:	0000ba15 	.word	0x0000ba15
    a8fc:	000099c5 	.word	0x000099c5
    a900:	0000a311 	.word	0x0000a311

0000a904 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a904:	b590      	push	{r4, r7, lr}
    a906:	b08b      	sub	sp, #44	; 0x2c
    a908:	af00      	add	r7, sp, #0
    a90a:	6078      	str	r0, [r7, #4]
    a90c:	460b      	mov	r3, r1
    a90e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a910:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a914:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a916:	687b      	ldr	r3, [r7, #4]
    a918:	7c9b      	ldrb	r3, [r3, #18]
    a91a:	f003 030f 	and.w	r3, r3, #15
    a91e:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a920:	7ffb      	ldrb	r3, [r7, #31]
    a922:	015b      	lsls	r3, r3, #5
    a924:	4a94      	ldr	r2, [pc, #592]	; (ab78 <_usb_d_dev_out_next+0x274>)
    a926:	4413      	add	r3, r2
    a928:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a92a:	78fb      	ldrb	r3, [r7, #3]
    a92c:	2b00      	cmp	r3, #0
    a92e:	d005      	beq.n	a93c <_usb_d_dev_out_next+0x38>
    a930:	69bb      	ldr	r3, [r7, #24]
    a932:	685b      	ldr	r3, [r3, #4]
    a934:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a938:	b29b      	uxth	r3, r3
    a93a:	e000      	b.n	a93e <_usb_d_dev_out_next+0x3a>
    a93c:	2300      	movs	r3, #0
    a93e:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a940:	78fb      	ldrb	r3, [r7, #3]
    a942:	2b00      	cmp	r3, #0
    a944:	d005      	beq.n	a952 <_usb_d_dev_out_next+0x4e>
    a946:	69bb      	ldr	r3, [r7, #24]
    a948:	685b      	ldr	r3, [r3, #4]
    a94a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a94e:	b29b      	uxth	r3, r3
    a950:	e000      	b.n	a954 <_usb_d_dev_out_next+0x50>
    a952:	2300      	movs	r3, #0
    a954:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a956:	687b      	ldr	r3, [r7, #4]
    a958:	8a1b      	ldrh	r3, [r3, #16]
    a95a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a95e:	4293      	cmp	r3, r2
    a960:	d004      	beq.n	a96c <_usb_d_dev_out_next+0x68>
    a962:	687b      	ldr	r3, [r7, #4]
    a964:	8a1b      	ldrh	r3, [r3, #16]
    a966:	3b01      	subs	r3, #1
    a968:	b29b      	uxth	r3, r3
    a96a:	e001      	b.n	a970 <_usb_d_dev_out_next+0x6c>
    a96c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a970:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a972:	8aba      	ldrh	r2, [r7, #20]
    a974:	8a7b      	ldrh	r3, [r7, #18]
    a976:	4013      	ands	r3, r2
    a978:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a97a:	687b      	ldr	r3, [r7, #4]
    a97c:	7cdb      	ldrb	r3, [r3, #19]
    a97e:	f003 0307 	and.w	r3, r3, #7
    a982:	b2db      	uxtb	r3, r3
    a984:	2b01      	cmp	r3, #1
    a986:	bf0c      	ite	eq
    a988:	2301      	moveq	r3, #1
    a98a:	2300      	movne	r3, #0
    a98c:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a98e:	78fb      	ldrb	r3, [r7, #3]
    a990:	2b00      	cmp	r3, #0
    a992:	d004      	beq.n	a99e <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a994:	7ffb      	ldrb	r3, [r7, #31]
    a996:	2100      	movs	r1, #0
    a998:	4618      	mov	r0, r3
    a99a:	4b78      	ldr	r3, [pc, #480]	; (ab7c <_usb_d_dev_out_next+0x278>)
    a99c:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a99e:	687b      	ldr	r3, [r7, #4]
    a9a0:	7cdb      	ldrb	r3, [r3, #19]
    a9a2:	f003 0320 	and.w	r3, r3, #32
    a9a6:	b2db      	uxtb	r3, r3
    a9a8:	2b00      	cmp	r3, #0
    a9aa:	d01c      	beq.n	a9e6 <_usb_d_dev_out_next+0xe2>
    a9ac:	687b      	ldr	r3, [r7, #4]
    a9ae:	685b      	ldr	r3, [r3, #4]
    a9b0:	2b00      	cmp	r3, #0
    a9b2:	d018      	beq.n	a9e6 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a9b4:	687b      	ldr	r3, [r7, #4]
    a9b6:	685b      	ldr	r3, [r3, #4]
    a9b8:	b29a      	uxth	r2, r3
    a9ba:	687b      	ldr	r3, [r7, #4]
    a9bc:	689b      	ldr	r3, [r3, #8]
    a9be:	b29b      	uxth	r3, r3
    a9c0:	1ad3      	subs	r3, r2, r3
    a9c2:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a9c4:	687b      	ldr	r3, [r7, #4]
    a9c6:	681a      	ldr	r2, [r3, #0]
    a9c8:	687b      	ldr	r3, [r7, #4]
    a9ca:	689b      	ldr	r3, [r3, #8]
    a9cc:	18d0      	adds	r0, r2, r3
    a9ce:	687b      	ldr	r3, [r7, #4]
    a9d0:	68d9      	ldr	r1, [r3, #12]
    a9d2:	89ba      	ldrh	r2, [r7, #12]
    a9d4:	8a3b      	ldrh	r3, [r7, #16]
    a9d6:	429a      	cmp	r2, r3
    a9d8:	d901      	bls.n	a9de <_usb_d_dev_out_next+0xda>
    a9da:	8a3b      	ldrh	r3, [r7, #16]
    a9dc:	e000      	b.n	a9e0 <_usb_d_dev_out_next+0xdc>
    a9de:	89bb      	ldrh	r3, [r7, #12]
    a9e0:	461a      	mov	r2, r3
    a9e2:	4b67      	ldr	r3, [pc, #412]	; (ab80 <_usb_d_dev_out_next+0x27c>)
    a9e4:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a9e6:	687b      	ldr	r3, [r7, #4]
    a9e8:	685b      	ldr	r3, [r3, #4]
    a9ea:	2b00      	cmp	r3, #0
    a9ec:	d121      	bne.n	aa32 <_usb_d_dev_out_next+0x12e>
    a9ee:	687b      	ldr	r3, [r7, #4]
    a9f0:	7cdb      	ldrb	r3, [r3, #19]
    a9f2:	f003 0310 	and.w	r3, r3, #16
    a9f6:	b2db      	uxtb	r3, r3
    a9f8:	2b00      	cmp	r3, #0
    a9fa:	d01a      	beq.n	aa32 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a9fc:	687a      	ldr	r2, [r7, #4]
    a9fe:	7cd3      	ldrb	r3, [r2, #19]
    aa00:	f36f 1304 	bfc	r3, #4, #1
    aa04:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    aa06:	687a      	ldr	r2, [r7, #4]
    aa08:	7cd3      	ldrb	r3, [r2, #19]
    aa0a:	f043 0320 	orr.w	r3, r3, #32
    aa0e:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    aa10:	687b      	ldr	r3, [r7, #4]
    aa12:	68db      	ldr	r3, [r3, #12]
    aa14:	461a      	mov	r2, r3
    aa16:	7ffb      	ldrb	r3, [r7, #31]
    aa18:	2100      	movs	r1, #0
    aa1a:	4618      	mov	r0, r3
    aa1c:	4b59      	ldr	r3, [pc, #356]	; (ab84 <_usb_d_dev_out_next+0x280>)
    aa1e:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    aa20:	687b      	ldr	r3, [r7, #4]
    aa22:	8a1b      	ldrh	r3, [r3, #16]
    aa24:	461a      	mov	r2, r3
    aa26:	7ff8      	ldrb	r0, [r7, #31]
    aa28:	2300      	movs	r3, #0
    aa2a:	2100      	movs	r1, #0
    aa2c:	4c56      	ldr	r4, [pc, #344]	; (ab88 <_usb_d_dev_out_next+0x284>)
    aa2e:	47a0      	blx	r4
		goto _out_rx_exec;
    aa30:	e090      	b.n	ab54 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    aa32:	78fb      	ldrb	r3, [r7, #3]
    aa34:	2b00      	cmp	r3, #0
    aa36:	d010      	beq.n	aa5a <_usb_d_dev_out_next+0x156>
    aa38:	687b      	ldr	r3, [r7, #4]
    aa3a:	8a1b      	ldrh	r3, [r3, #16]
    aa3c:	8a3a      	ldrh	r2, [r7, #16]
    aa3e:	429a      	cmp	r2, r3
    aa40:	d20b      	bcs.n	aa5a <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    aa42:	687a      	ldr	r2, [r7, #4]
    aa44:	7cd3      	ldrb	r3, [r2, #19]
    aa46:	f36f 1304 	bfc	r3, #4, #1
    aa4a:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    aa4c:	687b      	ldr	r3, [r7, #4]
    aa4e:	689a      	ldr	r2, [r3, #8]
    aa50:	8abb      	ldrh	r3, [r7, #20]
    aa52:	441a      	add	r2, r3
    aa54:	687b      	ldr	r3, [r7, #4]
    aa56:	609a      	str	r2, [r3, #8]
    aa58:	e05c      	b.n	ab14 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    aa5a:	687b      	ldr	r3, [r7, #4]
    aa5c:	689a      	ldr	r2, [r3, #8]
    aa5e:	8afb      	ldrh	r3, [r7, #22]
    aa60:	441a      	add	r2, r3
    aa62:	687b      	ldr	r3, [r7, #4]
    aa64:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    aa66:	687b      	ldr	r3, [r7, #4]
    aa68:	689a      	ldr	r2, [r3, #8]
    aa6a:	687b      	ldr	r3, [r7, #4]
    aa6c:	685b      	ldr	r3, [r3, #4]
    aa6e:	429a      	cmp	r2, r3
    aa70:	d250      	bcs.n	ab14 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    aa72:	687b      	ldr	r3, [r7, #4]
    aa74:	685b      	ldr	r3, [r3, #4]
    aa76:	b29a      	uxth	r2, r3
    aa78:	687b      	ldr	r3, [r7, #4]
    aa7a:	689b      	ldr	r3, [r3, #8]
    aa7c:	b29b      	uxth	r3, r3
    aa7e:	1ad3      	subs	r3, r2, r3
    aa80:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    aa82:	687b      	ldr	r3, [r7, #4]
    aa84:	7cdb      	ldrb	r3, [r3, #19]
    aa86:	f003 0320 	and.w	r3, r3, #32
    aa8a:	b2db      	uxtb	r3, r3
    aa8c:	2b00      	cmp	r3, #0
    aa8e:	d010      	beq.n	aab2 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    aa90:	687b      	ldr	r3, [r7, #4]
    aa92:	8a1b      	ldrh	r3, [r3, #16]
    aa94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    aa96:	429a      	cmp	r2, r3
    aa98:	d902      	bls.n	aaa0 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    aa9a:	687b      	ldr	r3, [r7, #4]
    aa9c:	8a1b      	ldrh	r3, [r3, #16]
    aa9e:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    aaa0:	687b      	ldr	r3, [r7, #4]
    aaa2:	68db      	ldr	r3, [r3, #12]
    aaa4:	461a      	mov	r2, r3
    aaa6:	7ffb      	ldrb	r3, [r7, #31]
    aaa8:	2100      	movs	r1, #0
    aaaa:	4618      	mov	r0, r3
    aaac:	4b35      	ldr	r3, [pc, #212]	; (ab84 <_usb_d_dev_out_next+0x280>)
    aaae:	4798      	blx	r3
    aab0:	e029      	b.n	ab06 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    aab2:	687b      	ldr	r3, [r7, #4]
    aab4:	8a1b      	ldrh	r3, [r3, #16]
    aab6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    aab8:	429a      	cmp	r2, r3
    aaba:	d90f      	bls.n	aadc <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    aabc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    aabe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    aac2:	d903      	bls.n	aacc <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    aac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    aac8:	84fb      	strh	r3, [r7, #38]	; 0x26
    aaca:	e011      	b.n	aaf0 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    aacc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    aace:	8a7b      	ldrh	r3, [r7, #18]
    aad0:	4013      	ands	r3, r2
    aad2:	b29b      	uxth	r3, r3
    aad4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    aad6:	1ad3      	subs	r3, r2, r3
    aad8:	84fb      	strh	r3, [r7, #38]	; 0x26
    aada:	e009      	b.n	aaf0 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    aadc:	687b      	ldr	r3, [r7, #4]
    aade:	8a1b      	ldrh	r3, [r3, #16]
    aae0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    aae2:	429a      	cmp	r2, r3
    aae4:	d204      	bcs.n	aaf0 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    aae6:	687a      	ldr	r2, [r7, #4]
    aae8:	7cd3      	ldrb	r3, [r2, #19]
    aaea:	f043 0320 	orr.w	r3, r3, #32
    aaee:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    aaf0:	687b      	ldr	r3, [r7, #4]
    aaf2:	681a      	ldr	r2, [r3, #0]
    aaf4:	687b      	ldr	r3, [r7, #4]
    aaf6:	689b      	ldr	r3, [r3, #8]
    aaf8:	4413      	add	r3, r2
    aafa:	461a      	mov	r2, r3
    aafc:	7ffb      	ldrb	r3, [r7, #31]
    aafe:	2100      	movs	r1, #0
    ab00:	4618      	mov	r0, r3
    ab02:	4b20      	ldr	r3, [pc, #128]	; (ab84 <_usb_d_dev_out_next+0x280>)
    ab04:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    ab06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ab08:	7ff8      	ldrb	r0, [r7, #31]
    ab0a:	2300      	movs	r3, #0
    ab0c:	2100      	movs	r1, #0
    ab0e:	4c1e      	ldr	r4, [pc, #120]	; (ab88 <_usb_d_dev_out_next+0x284>)
    ab10:	47a0      	blx	r4
			goto _out_rx_exec;
    ab12:	e01f      	b.n	ab54 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    ab14:	7bfb      	ldrb	r3, [r7, #15]
    ab16:	2b00      	cmp	r3, #0
    ab18:	d006      	beq.n	ab28 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    ab1a:	7ffb      	ldrb	r3, [r7, #31]
    ab1c:	222d      	movs	r2, #45	; 0x2d
    ab1e:	4619      	mov	r1, r3
    ab20:	6a38      	ldr	r0, [r7, #32]
    ab22:	4b1a      	ldr	r3, [pc, #104]	; (ab8c <_usb_d_dev_out_next+0x288>)
    ab24:	4798      	blx	r3
    ab26:	e005      	b.n	ab34 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    ab28:	7ffb      	ldrb	r3, [r7, #31]
    ab2a:	2225      	movs	r2, #37	; 0x25
    ab2c:	4619      	mov	r1, r3
    ab2e:	6a38      	ldr	r0, [r7, #32]
    ab30:	4b16      	ldr	r3, [pc, #88]	; (ab8c <_usb_d_dev_out_next+0x288>)
    ab32:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    ab34:	7ffb      	ldrb	r3, [r7, #31]
    ab36:	2b00      	cmp	r3, #0
    ab38:	d107      	bne.n	ab4a <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ab3a:	687b      	ldr	r3, [r7, #4]
    ab3c:	68db      	ldr	r3, [r3, #12]
    ab3e:	461a      	mov	r2, r3
    ab40:	7ffb      	ldrb	r3, [r7, #31]
    ab42:	2100      	movs	r1, #0
    ab44:	4618      	mov	r0, r3
    ab46:	4b0f      	ldr	r3, [pc, #60]	; (ab84 <_usb_d_dev_out_next+0x280>)
    ab48:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    ab4a:	2100      	movs	r1, #0
    ab4c:	6878      	ldr	r0, [r7, #4]
    ab4e:	4b10      	ldr	r3, [pc, #64]	; (ab90 <_usb_d_dev_out_next+0x28c>)
    ab50:	4798      	blx	r3
	return;
    ab52:	e031      	b.n	abb8 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    ab54:	78fb      	ldrb	r3, [r7, #3]
    ab56:	f083 0301 	eor.w	r3, r3, #1
    ab5a:	b2db      	uxtb	r3, r3
    ab5c:	2b00      	cmp	r3, #0
    ab5e:	d025      	beq.n	abac <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    ab60:	7bfb      	ldrb	r3, [r7, #15]
    ab62:	2b00      	cmp	r3, #0
    ab64:	d018      	beq.n	ab98 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    ab66:	7ffb      	ldrb	r3, [r7, #31]
    ab68:	2101      	movs	r1, #1
    ab6a:	4618      	mov	r0, r3
    ab6c:	4b09      	ldr	r3, [pc, #36]	; (ab94 <_usb_d_dev_out_next+0x290>)
    ab6e:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    ab70:	232d      	movs	r3, #45	; 0x2d
    ab72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    ab76:	e012      	b.n	ab9e <_usb_d_dev_out_next+0x29a>
    ab78:	20000d00 	.word	0x20000d00
    ab7c:	0000a0e5 	.word	0x0000a0e5
    ab80:	000107c9 	.word	0x000107c9
    ab84:	0000a111 	.word	0x0000a111
    ab88:	0000a299 	.word	0x0000a299
    ab8c:	000099f1 	.word	0x000099f1
    ab90:	0000ba15 	.word	0x0000ba15
    ab94:	0000a2d9 	.word	0x0000a2d9
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    ab98:	2325      	movs	r3, #37	; 0x25
    ab9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    ab9e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    aba2:	7ffb      	ldrb	r3, [r7, #31]
    aba4:	4619      	mov	r1, r3
    aba6:	6a38      	ldr	r0, [r7, #32]
    aba8:	4b05      	ldr	r3, [pc, #20]	; (abc0 <_usb_d_dev_out_next+0x2bc>)
    abaa:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    abac:	7ffb      	ldrb	r3, [r7, #31]
    abae:	2201      	movs	r2, #1
    abb0:	2100      	movs	r1, #0
    abb2:	4618      	mov	r0, r3
    abb4:	4b03      	ldr	r3, [pc, #12]	; (abc4 <_usb_d_dev_out_next+0x2c0>)
    abb6:	4798      	blx	r3
}
    abb8:	372c      	adds	r7, #44	; 0x2c
    abba:	46bd      	mov	sp, r7
    abbc:	bd90      	pop	{r4, r7, pc}
    abbe:	bf00      	nop
    abc0:	000099c5 	.word	0x000099c5
    abc4:	0000a369 	.word	0x0000a369

0000abc8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    abc8:	b580      	push	{r7, lr}
    abca:	b084      	sub	sp, #16
    abcc:	af00      	add	r7, sp, #0
    abce:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    abd0:	687b      	ldr	r3, [r7, #4]
    abd2:	7c9b      	ldrb	r3, [r3, #18]
    abd4:	f003 030f 	and.w	r3, r3, #15
    abd8:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    abda:	687b      	ldr	r3, [r7, #4]
    abdc:	7cdb      	ldrb	r3, [r3, #19]
    abde:	f003 0307 	and.w	r3, r3, #7
    abe2:	b2db      	uxtb	r3, r3
    abe4:	2b01      	cmp	r3, #1
    abe6:	bf0c      	ite	eq
    abe8:	2301      	moveq	r3, #1
    abea:	2300      	movne	r3, #0
    abec:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    abee:	7bbb      	ldrb	r3, [r7, #14]
    abf0:	f083 0301 	eor.w	r3, r3, #1
    abf4:	b2db      	uxtb	r3, r3
    abf6:	2b00      	cmp	r3, #0
    abf8:	d008      	beq.n	ac0c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    abfa:	7bfb      	ldrb	r3, [r7, #15]
    abfc:	4618      	mov	r0, r3
    abfe:	4b20      	ldr	r3, [pc, #128]	; (ac80 <_usb_d_dev_handle_setup+0xb8>)
    ac00:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    ac02:	7bfb      	ldrb	r3, [r7, #15]
    ac04:	4618      	mov	r0, r3
    ac06:	4b1f      	ldr	r3, [pc, #124]	; (ac84 <_usb_d_dev_handle_setup+0xbc>)
    ac08:	4798      	blx	r3
		return;
    ac0a:	e036      	b.n	ac7a <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    ac0c:	687b      	ldr	r3, [r7, #4]
    ac0e:	7cdb      	ldrb	r3, [r3, #19]
    ac10:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ac14:	b2db      	uxtb	r3, r3
    ac16:	2b00      	cmp	r3, #0
    ac18:	d010      	beq.n	ac3c <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    ac1a:	687a      	ldr	r2, [r7, #4]
    ac1c:	7cd3      	ldrb	r3, [r2, #19]
    ac1e:	f36f 1386 	bfc	r3, #6, #1
    ac22:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    ac24:	7bfb      	ldrb	r3, [r7, #15]
    ac26:	2200      	movs	r2, #0
    ac28:	2101      	movs	r1, #1
    ac2a:	4618      	mov	r0, r3
    ac2c:	4b16      	ldr	r3, [pc, #88]	; (ac88 <_usb_d_dev_handle_setup+0xc0>)
    ac2e:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    ac30:	7bfb      	ldrb	r3, [r7, #15]
    ac32:	2200      	movs	r2, #0
    ac34:	2100      	movs	r1, #0
    ac36:	4618      	mov	r0, r3
    ac38:	4b14      	ldr	r3, [pc, #80]	; (ac8c <_usb_d_dev_handle_setup+0xc4>)
    ac3a:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    ac3c:	687a      	ldr	r2, [r7, #4]
    ac3e:	7cd3      	ldrb	r3, [r2, #19]
    ac40:	f36f 03c3 	bfc	r3, #3, #1
    ac44:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    ac46:	7bfb      	ldrb	r3, [r7, #15]
    ac48:	2100      	movs	r1, #0
    ac4a:	4618      	mov	r0, r3
    ac4c:	4b10      	ldr	r3, [pc, #64]	; (ac90 <_usb_d_dev_handle_setup+0xc8>)
    ac4e:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    ac50:	7bfb      	ldrb	r3, [r7, #15]
    ac52:	2101      	movs	r1, #1
    ac54:	4618      	mov	r0, r3
    ac56:	4b0e      	ldr	r3, [pc, #56]	; (ac90 <_usb_d_dev_handle_setup+0xc8>)
    ac58:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    ac5a:	7bfb      	ldrb	r3, [r7, #15]
    ac5c:	216f      	movs	r1, #111	; 0x6f
    ac5e:	4618      	mov	r0, r3
    ac60:	4b0c      	ldr	r3, [pc, #48]	; (ac94 <_usb_d_dev_handle_setup+0xcc>)
    ac62:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    ac64:	7bfb      	ldrb	r3, [r7, #15]
    ac66:	216f      	movs	r1, #111	; 0x6f
    ac68:	4618      	mov	r0, r3
    ac6a:	4b0b      	ldr	r3, [pc, #44]	; (ac98 <_usb_d_dev_handle_setup+0xd0>)
    ac6c:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    ac6e:	4b0b      	ldr	r3, [pc, #44]	; (ac9c <_usb_d_dev_handle_setup+0xd4>)
    ac70:	689b      	ldr	r3, [r3, #8]
    ac72:	687a      	ldr	r2, [r7, #4]
    ac74:	7c92      	ldrb	r2, [r2, #18]
    ac76:	4610      	mov	r0, r2
    ac78:	4798      	blx	r3
}
    ac7a:	3710      	adds	r7, #16
    ac7c:	46bd      	mov	sp, r7
    ac7e:	bd80      	pop	{r7, pc}
    ac80:	0000a06d 	.word	0x0000a06d
    ac84:	0000a019 	.word	0x0000a019
    ac88:	0000a311 	.word	0x0000a311
    ac8c:	0000a369 	.word	0x0000a369
    ac90:	0000a2d9 	.word	0x0000a2d9
    ac94:	00009e19 	.word	0x00009e19
    ac98:	00009e69 	.word	0x00009e69
    ac9c:	20000c38 	.word	0x20000c38

0000aca0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    aca0:	b580      	push	{r7, lr}
    aca2:	b084      	sub	sp, #16
    aca4:	af00      	add	r7, sp, #0
    aca6:	6078      	str	r0, [r7, #4]
    aca8:	460b      	mov	r3, r1
    acaa:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    acac:	687b      	ldr	r3, [r7, #4]
    acae:	7c9b      	ldrb	r3, [r3, #18]
    acb0:	f003 030f 	and.w	r3, r3, #15
    acb4:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    acb6:	78f9      	ldrb	r1, [r7, #3]
    acb8:	7bfb      	ldrb	r3, [r7, #15]
    acba:	2200      	movs	r2, #0
    acbc:	4618      	mov	r0, r3
    acbe:	4b07      	ldr	r3, [pc, #28]	; (acdc <_usb_d_dev_handle_stall+0x3c>)
    acc0:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    acc2:	4b07      	ldr	r3, [pc, #28]	; (ace0 <_usb_d_dev_handle_stall+0x40>)
    acc4:	691b      	ldr	r3, [r3, #16]
    acc6:	687a      	ldr	r2, [r7, #4]
    acc8:	7c90      	ldrb	r0, [r2, #18]
    acca:	687a      	ldr	r2, [r7, #4]
    accc:	6892      	ldr	r2, [r2, #8]
    acce:	2101      	movs	r1, #1
    acd0:	4798      	blx	r3
}
    acd2:	bf00      	nop
    acd4:	3710      	adds	r7, #16
    acd6:	46bd      	mov	sp, r7
    acd8:	bd80      	pop	{r7, pc}
    acda:	bf00      	nop
    acdc:	00009fcd 	.word	0x00009fcd
    ace0:	20000c38 	.word	0x20000c38

0000ace4 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    ace4:	b580      	push	{r7, lr}
    ace6:	b088      	sub	sp, #32
    ace8:	af00      	add	r7, sp, #0
    acea:	6078      	str	r0, [r7, #4]
    acec:	460b      	mov	r3, r1
    acee:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    acf0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    acf4:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    acf6:	687b      	ldr	r3, [r7, #4]
    acf8:	7c9b      	ldrb	r3, [r3, #18]
    acfa:	f003 030f 	and.w	r3, r3, #15
    acfe:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    ad00:	4b61      	ldr	r3, [pc, #388]	; (ae88 <_usb_d_dev_handle_trfail+0x1a4>)
    ad02:	881b      	ldrh	r3, [r3, #0]
    ad04:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    ad06:	7efb      	ldrb	r3, [r7, #27]
    ad08:	015b      	lsls	r3, r3, #5
    ad0a:	4a60      	ldr	r2, [pc, #384]	; (ae8c <_usb_d_dev_handle_trfail+0x1a8>)
    ad0c:	4413      	add	r3, r2
    ad0e:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    ad10:	78fb      	ldrb	r3, [r7, #3]
    ad12:	2b00      	cmp	r3, #0
    ad14:	d006      	beq.n	ad24 <_usb_d_dev_handle_trfail+0x40>
    ad16:	7efb      	ldrb	r3, [r7, #27]
    ad18:	4619      	mov	r1, r3
    ad1a:	69f8      	ldr	r0, [r7, #28]
    ad1c:	4b5c      	ldr	r3, [pc, #368]	; (ae90 <_usb_d_dev_handle_trfail+0x1ac>)
    ad1e:	4798      	blx	r3
    ad20:	4603      	mov	r3, r0
    ad22:	e005      	b.n	ad30 <_usb_d_dev_handle_trfail+0x4c>
    ad24:	7efb      	ldrb	r3, [r7, #27]
    ad26:	4619      	mov	r1, r3
    ad28:	69f8      	ldr	r0, [r7, #28]
    ad2a:	4b5a      	ldr	r3, [pc, #360]	; (ae94 <_usb_d_dev_handle_trfail+0x1b0>)
    ad2c:	4798      	blx	r3
    ad2e:	4603      	mov	r3, r0
    ad30:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    ad32:	687b      	ldr	r3, [r7, #4]
    ad34:	7cdb      	ldrb	r3, [r3, #19]
    ad36:	f003 0307 	and.w	r3, r3, #7
    ad3a:	b2db      	uxtb	r3, r3
    ad3c:	2b01      	cmp	r3, #1
    ad3e:	bf0c      	ite	eq
    ad40:	2301      	moveq	r3, #1
    ad42:	2300      	movne	r3, #0
    ad44:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    ad46:	78fb      	ldrb	r3, [r7, #3]
    ad48:	011b      	lsls	r3, r3, #4
    ad4a:	697a      	ldr	r2, [r7, #20]
    ad4c:	4413      	add	r3, r2
    ad4e:	7a9b      	ldrb	r3, [r3, #10]
    ad50:	b2db      	uxtb	r3, r3
    ad52:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    ad54:	7cfb      	ldrb	r3, [r7, #19]
    ad56:	2b02      	cmp	r3, #2
    ad58:	d12f      	bne.n	adba <_usb_d_dev_handle_trfail+0xd6>
    ad5a:	7b3b      	ldrb	r3, [r7, #12]
    ad5c:	f003 0301 	and.w	r3, r3, #1
    ad60:	b2db      	uxtb	r3, r3
    ad62:	2b00      	cmp	r3, #0
    ad64:	d029      	beq.n	adba <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    ad66:	78fb      	ldrb	r3, [r7, #3]
    ad68:	011b      	lsls	r3, r3, #4
    ad6a:	697a      	ldr	r2, [r7, #20]
    ad6c:	441a      	add	r2, r3
    ad6e:	7a93      	ldrb	r3, [r2, #10]
    ad70:	f36f 0300 	bfc	r3, #0, #1
    ad74:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    ad76:	78fb      	ldrb	r3, [r7, #3]
    ad78:	f107 0220 	add.w	r2, r7, #32
    ad7c:	4413      	add	r3, r2
    ad7e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ad82:	7efb      	ldrb	r3, [r7, #27]
    ad84:	4619      	mov	r1, r3
    ad86:	69f8      	ldr	r0, [r7, #28]
    ad88:	4b43      	ldr	r3, [pc, #268]	; (ae98 <_usb_d_dev_handle_trfail+0x1b4>)
    ad8a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ad8c:	78fb      	ldrb	r3, [r7, #3]
    ad8e:	f107 0220 	add.w	r2, r7, #32
    ad92:	4413      	add	r3, r2
    ad94:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ad98:	7efb      	ldrb	r3, [r7, #27]
    ad9a:	4619      	mov	r1, r3
    ad9c:	69f8      	ldr	r0, [r7, #28]
    ad9e:	4b3f      	ldr	r3, [pc, #252]	; (ae9c <_usb_d_dev_handle_trfail+0x1b8>)
    ada0:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    ada2:	78fb      	ldrb	r3, [r7, #3]
    ada4:	2b00      	cmp	r3, #0
    ada6:	bf14      	ite	ne
    ada8:	2301      	movne	r3, #1
    adaa:	2300      	moveq	r3, #0
    adac:	b2db      	uxtb	r3, r3
    adae:	2204      	movs	r2, #4
    adb0:	4619      	mov	r1, r3
    adb2:	6878      	ldr	r0, [r7, #4]
    adb4:	4b3a      	ldr	r3, [pc, #232]	; (aea0 <_usb_d_dev_handle_trfail+0x1bc>)
    adb6:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    adb8:	e062      	b.n	ae80 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    adba:	7b3b      	ldrb	r3, [r7, #12]
    adbc:	f003 0302 	and.w	r3, r3, #2
    adc0:	b2db      	uxtb	r3, r3
    adc2:	2b00      	cmp	r3, #0
    adc4:	d040      	beq.n	ae48 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    adc6:	78fb      	ldrb	r3, [r7, #3]
    adc8:	011b      	lsls	r3, r3, #4
    adca:	697a      	ldr	r2, [r7, #20]
    adcc:	441a      	add	r2, r3
    adce:	7a93      	ldrb	r3, [r2, #10]
    add0:	f36f 0341 	bfc	r3, #1, #1
    add4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    add6:	78fb      	ldrb	r3, [r7, #3]
    add8:	f107 0220 	add.w	r2, r7, #32
    addc:	4413      	add	r3, r2
    adde:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ade2:	7efb      	ldrb	r3, [r7, #27]
    ade4:	4619      	mov	r1, r3
    ade6:	69f8      	ldr	r0, [r7, #28]
    ade8:	4b2b      	ldr	r3, [pc, #172]	; (ae98 <_usb_d_dev_handle_trfail+0x1b4>)
    adea:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    adec:	78fb      	ldrb	r3, [r7, #3]
    adee:	f107 0220 	add.w	r2, r7, #32
    adf2:	4413      	add	r3, r2
    adf4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    adf8:	7efb      	ldrb	r3, [r7, #27]
    adfa:	4619      	mov	r1, r3
    adfc:	69f8      	ldr	r0, [r7, #28]
    adfe:	4b27      	ldr	r3, [pc, #156]	; (ae9c <_usb_d_dev_handle_trfail+0x1b8>)
    ae00:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    ae02:	7cbb      	ldrb	r3, [r7, #18]
    ae04:	2b00      	cmp	r3, #0
    ae06:	d03b      	beq.n	ae80 <_usb_d_dev_handle_trfail+0x19c>
    ae08:	687b      	ldr	r3, [r7, #4]
    ae0a:	7cdb      	ldrb	r3, [r3, #19]
    ae0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ae10:	b2db      	uxtb	r3, r3
    ae12:	2b00      	cmp	r3, #0
    ae14:	d034      	beq.n	ae80 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    ae16:	687b      	ldr	r3, [r7, #4]
    ae18:	7cdb      	ldrb	r3, [r3, #19]
    ae1a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ae1e:	b2db      	uxtb	r3, r3
    ae20:	461a      	mov	r2, r3
    ae22:	78fb      	ldrb	r3, [r7, #3]
    ae24:	4293      	cmp	r3, r2
    ae26:	d02b      	beq.n	ae80 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    ae28:	687b      	ldr	r3, [r7, #4]
    ae2a:	7cdb      	ldrb	r3, [r3, #19]
    ae2c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ae30:	b2db      	uxtb	r3, r3
    ae32:	2b00      	cmp	r3, #0
    ae34:	bf14      	ite	ne
    ae36:	2301      	movne	r3, #1
    ae38:	2300      	moveq	r3, #0
    ae3a:	b2db      	uxtb	r3, r3
    ae3c:	2200      	movs	r2, #0
    ae3e:	4619      	mov	r1, r3
    ae40:	6878      	ldr	r0, [r7, #4]
    ae42:	4b17      	ldr	r3, [pc, #92]	; (aea0 <_usb_d_dev_handle_trfail+0x1bc>)
    ae44:	4798      	blx	r3
}
    ae46:	e01b      	b.n	ae80 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    ae48:	78fa      	ldrb	r2, [r7, #3]
    ae4a:	7efb      	ldrb	r3, [r7, #27]
    ae4c:	4611      	mov	r1, r2
    ae4e:	4618      	mov	r0, r3
    ae50:	4b14      	ldr	r3, [pc, #80]	; (aea4 <_usb_d_dev_handle_trfail+0x1c0>)
    ae52:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    ae54:	78fb      	ldrb	r3, [r7, #3]
    ae56:	f107 0220 	add.w	r2, r7, #32
    ae5a:	4413      	add	r3, r2
    ae5c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ae60:	7efb      	ldrb	r3, [r7, #27]
    ae62:	4619      	mov	r1, r3
    ae64:	69f8      	ldr	r0, [r7, #28]
    ae66:	4b0c      	ldr	r3, [pc, #48]	; (ae98 <_usb_d_dev_handle_trfail+0x1b4>)
    ae68:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ae6a:	78fb      	ldrb	r3, [r7, #3]
    ae6c:	f107 0220 	add.w	r2, r7, #32
    ae70:	4413      	add	r3, r2
    ae72:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ae76:	7efb      	ldrb	r3, [r7, #27]
    ae78:	4619      	mov	r1, r3
    ae7a:	69f8      	ldr	r0, [r7, #28]
    ae7c:	4b07      	ldr	r3, [pc, #28]	; (ae9c <_usb_d_dev_handle_trfail+0x1b8>)
    ae7e:	4798      	blx	r3
}
    ae80:	bf00      	nop
    ae82:	3720      	adds	r7, #32
    ae84:	46bd      	mov	sp, r7
    ae86:	bd80      	pop	{r7, pc}
    ae88:	00010f50 	.word	0x00010f50
    ae8c:	20000d00 	.word	0x20000d00
    ae90:	00009a4d 	.word	0x00009a4d
    ae94:	00009a1d 	.word	0x00009a1d
    ae98:	000098f1 	.word	0x000098f1
    ae9c:	000099f1 	.word	0x000099f1
    aea0:	0000ba5d 	.word	0x0000ba5d
    aea4:	0000a2d9 	.word	0x0000a2d9

0000aea8 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    aea8:	b580      	push	{r7, lr}
    aeaa:	b082      	sub	sp, #8
    aeac:	af00      	add	r7, sp, #0
    aeae:	6078      	str	r0, [r7, #4]
    aeb0:	460b      	mov	r3, r1
    aeb2:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    aeb4:	78fb      	ldrb	r3, [r7, #3]
    aeb6:	f003 0310 	and.w	r3, r3, #16
    aeba:	2b00      	cmp	r3, #0
    aebc:	d003      	beq.n	aec6 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    aebe:	6878      	ldr	r0, [r7, #4]
    aec0:	4b0c      	ldr	r3, [pc, #48]	; (aef4 <_usb_d_dev_trans_setup_isr+0x4c>)
    aec2:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    aec4:	e012      	b.n	aeec <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    aec6:	78fb      	ldrb	r3, [r7, #3]
    aec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aecc:	2b00      	cmp	r3, #0
    aece:	d004      	beq.n	aeda <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    aed0:	2101      	movs	r1, #1
    aed2:	6878      	ldr	r0, [r7, #4]
    aed4:	4b08      	ldr	r3, [pc, #32]	; (aef8 <_usb_d_dev_trans_setup_isr+0x50>)
    aed6:	4798      	blx	r3
}
    aed8:	e008      	b.n	aeec <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    aeda:	78fb      	ldrb	r3, [r7, #3]
    aedc:	f003 0320 	and.w	r3, r3, #32
    aee0:	2b00      	cmp	r3, #0
    aee2:	d003      	beq.n	aeec <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    aee4:	2100      	movs	r1, #0
    aee6:	6878      	ldr	r0, [r7, #4]
    aee8:	4b03      	ldr	r3, [pc, #12]	; (aef8 <_usb_d_dev_trans_setup_isr+0x50>)
    aeea:	4798      	blx	r3
}
    aeec:	bf00      	nop
    aeee:	3708      	adds	r7, #8
    aef0:	46bd      	mov	sp, r7
    aef2:	bd80      	pop	{r7, pc}
    aef4:	0000abc9 	.word	0x0000abc9
    aef8:	0000aca1 	.word	0x0000aca1

0000aefc <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    aefc:	b580      	push	{r7, lr}
    aefe:	b082      	sub	sp, #8
    af00:	af00      	add	r7, sp, #0
    af02:	6078      	str	r0, [r7, #4]
    af04:	460b      	mov	r3, r1
    af06:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    af08:	78fb      	ldrb	r3, [r7, #3]
    af0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    af0e:	2b00      	cmp	r3, #0
    af10:	d004      	beq.n	af1c <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    af12:	2101      	movs	r1, #1
    af14:	6878      	ldr	r0, [r7, #4]
    af16:	4b1a      	ldr	r3, [pc, #104]	; (af80 <_usb_d_dev_trans_in_isr+0x84>)
    af18:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    af1a:	e02c      	b.n	af76 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    af1c:	78fb      	ldrb	r3, [r7, #3]
    af1e:	f003 0308 	and.w	r3, r3, #8
    af22:	2b00      	cmp	r3, #0
    af24:	d004      	beq.n	af30 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    af26:	2101      	movs	r1, #1
    af28:	6878      	ldr	r0, [r7, #4]
    af2a:	4b16      	ldr	r3, [pc, #88]	; (af84 <_usb_d_dev_trans_in_isr+0x88>)
    af2c:	4798      	blx	r3
}
    af2e:	e022      	b.n	af76 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    af30:	78fb      	ldrb	r3, [r7, #3]
    af32:	f003 0302 	and.w	r3, r3, #2
    af36:	2b00      	cmp	r3, #0
    af38:	d004      	beq.n	af44 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    af3a:	2101      	movs	r1, #1
    af3c:	6878      	ldr	r0, [r7, #4]
    af3e:	4b12      	ldr	r3, [pc, #72]	; (af88 <_usb_d_dev_trans_in_isr+0x8c>)
    af40:	4798      	blx	r3
}
    af42:	e018      	b.n	af76 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    af44:	687b      	ldr	r3, [r7, #4]
    af46:	7cdb      	ldrb	r3, [r3, #19]
    af48:	f003 0307 	and.w	r3, r3, #7
    af4c:	b2db      	uxtb	r3, r3
    af4e:	2b01      	cmp	r3, #1
    af50:	d111      	bne.n	af76 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    af52:	78fb      	ldrb	r3, [r7, #3]
    af54:	f003 0304 	and.w	r3, r3, #4
    af58:	2b00      	cmp	r3, #0
    af5a:	d004      	beq.n	af66 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    af5c:	2100      	movs	r1, #0
    af5e:	6878      	ldr	r0, [r7, #4]
    af60:	4b08      	ldr	r3, [pc, #32]	; (af84 <_usb_d_dev_trans_in_isr+0x88>)
    af62:	4798      	blx	r3
}
    af64:	e007      	b.n	af76 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    af66:	78fb      	ldrb	r3, [r7, #3]
    af68:	f003 0310 	and.w	r3, r3, #16
    af6c:	2b00      	cmp	r3, #0
    af6e:	d002      	beq.n	af76 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    af70:	6878      	ldr	r0, [r7, #4]
    af72:	4b06      	ldr	r3, [pc, #24]	; (af8c <_usb_d_dev_trans_in_isr+0x90>)
    af74:	4798      	blx	r3
}
    af76:	bf00      	nop
    af78:	3708      	adds	r7, #8
    af7a:	46bd      	mov	sp, r7
    af7c:	bd80      	pop	{r7, pc}
    af7e:	bf00      	nop
    af80:	0000aca1 	.word	0x0000aca1
    af84:	0000ace5 	.word	0x0000ace5
    af88:	0000a6ed 	.word	0x0000a6ed
    af8c:	0000abc9 	.word	0x0000abc9

0000af90 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    af90:	b580      	push	{r7, lr}
    af92:	b082      	sub	sp, #8
    af94:	af00      	add	r7, sp, #0
    af96:	6078      	str	r0, [r7, #4]
    af98:	460b      	mov	r3, r1
    af9a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    af9c:	78fb      	ldrb	r3, [r7, #3]
    af9e:	f003 0320 	and.w	r3, r3, #32
    afa2:	2b00      	cmp	r3, #0
    afa4:	d004      	beq.n	afb0 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    afa6:	2100      	movs	r1, #0
    afa8:	6878      	ldr	r0, [r7, #4]
    afaa:	4b1a      	ldr	r3, [pc, #104]	; (b014 <_usb_d_dev_trans_out_isr+0x84>)
    afac:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    afae:	e02c      	b.n	b00a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    afb0:	78fb      	ldrb	r3, [r7, #3]
    afb2:	f003 0304 	and.w	r3, r3, #4
    afb6:	2b00      	cmp	r3, #0
    afb8:	d004      	beq.n	afc4 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    afba:	2100      	movs	r1, #0
    afbc:	6878      	ldr	r0, [r7, #4]
    afbe:	4b16      	ldr	r3, [pc, #88]	; (b018 <_usb_d_dev_trans_out_isr+0x88>)
    afc0:	4798      	blx	r3
}
    afc2:	e022      	b.n	b00a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    afc4:	78fb      	ldrb	r3, [r7, #3]
    afc6:	f003 0301 	and.w	r3, r3, #1
    afca:	2b00      	cmp	r3, #0
    afcc:	d004      	beq.n	afd8 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    afce:	2101      	movs	r1, #1
    afd0:	6878      	ldr	r0, [r7, #4]
    afd2:	4b12      	ldr	r3, [pc, #72]	; (b01c <_usb_d_dev_trans_out_isr+0x8c>)
    afd4:	4798      	blx	r3
}
    afd6:	e018      	b.n	b00a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    afd8:	687b      	ldr	r3, [r7, #4]
    afda:	7cdb      	ldrb	r3, [r3, #19]
    afdc:	f003 0307 	and.w	r3, r3, #7
    afe0:	b2db      	uxtb	r3, r3
    afe2:	2b01      	cmp	r3, #1
    afe4:	d111      	bne.n	b00a <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    afe6:	78fb      	ldrb	r3, [r7, #3]
    afe8:	f003 0308 	and.w	r3, r3, #8
    afec:	2b00      	cmp	r3, #0
    afee:	d004      	beq.n	affa <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    aff0:	2101      	movs	r1, #1
    aff2:	6878      	ldr	r0, [r7, #4]
    aff4:	4b08      	ldr	r3, [pc, #32]	; (b018 <_usb_d_dev_trans_out_isr+0x88>)
    aff6:	4798      	blx	r3
}
    aff8:	e007      	b.n	b00a <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    affa:	78fb      	ldrb	r3, [r7, #3]
    affc:	f003 0310 	and.w	r3, r3, #16
    b000:	2b00      	cmp	r3, #0
    b002:	d002      	beq.n	b00a <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    b004:	6878      	ldr	r0, [r7, #4]
    b006:	4b06      	ldr	r3, [pc, #24]	; (b020 <_usb_d_dev_trans_out_isr+0x90>)
    b008:	4798      	blx	r3
}
    b00a:	bf00      	nop
    b00c:	3708      	adds	r7, #8
    b00e:	46bd      	mov	sp, r7
    b010:	bd80      	pop	{r7, pc}
    b012:	bf00      	nop
    b014:	0000aca1 	.word	0x0000aca1
    b018:	0000ace5 	.word	0x0000ace5
    b01c:	0000a905 	.word	0x0000a905
    b020:	0000abc9 	.word	0x0000abc9

0000b024 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    b024:	b580      	push	{r7, lr}
    b026:	b084      	sub	sp, #16
    b028:	af00      	add	r7, sp, #0
    b02a:	6078      	str	r0, [r7, #4]
    b02c:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    b02e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b032:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b034:	683b      	ldr	r3, [r7, #0]
    b036:	7c9b      	ldrb	r3, [r3, #18]
    b038:	f003 030f 	and.w	r3, r3, #15
    b03c:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    b03e:	7afb      	ldrb	r3, [r7, #11]
    b040:	2201      	movs	r2, #1
    b042:	409a      	lsls	r2, r3
    b044:	687b      	ldr	r3, [r7, #4]
    b046:	4013      	ands	r3, r2
    b048:	2b00      	cmp	r3, #0
    b04a:	d03d      	beq.n	b0c8 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    b04c:	7afb      	ldrb	r3, [r7, #11]
    b04e:	68fa      	ldr	r2, [r7, #12]
    b050:	3308      	adds	r3, #8
    b052:	015b      	lsls	r3, r3, #5
    b054:	4413      	add	r3, r2
    b056:	3307      	adds	r3, #7
    b058:	781b      	ldrb	r3, [r3, #0]
    b05a:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    b05c:	7afb      	ldrb	r3, [r7, #11]
    b05e:	68fa      	ldr	r2, [r7, #12]
    b060:	015b      	lsls	r3, r3, #5
    b062:	4413      	add	r3, r2
    b064:	f203 1309 	addw	r3, r3, #265	; 0x109
    b068:	781b      	ldrb	r3, [r3, #0]
    b06a:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    b06c:	7aba      	ldrb	r2, [r7, #10]
    b06e:	7a7b      	ldrb	r3, [r7, #9]
    b070:	4013      	ands	r3, r2
    b072:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    b074:	7abb      	ldrb	r3, [r7, #10]
    b076:	2b00      	cmp	r3, #0
    b078:	d027      	beq.n	b0ca <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    b07a:	683b      	ldr	r3, [r7, #0]
    b07c:	7cdb      	ldrb	r3, [r3, #19]
    b07e:	f003 0307 	and.w	r3, r3, #7
    b082:	b2db      	uxtb	r3, r3
    b084:	2b01      	cmp	r3, #1
    b086:	d10c      	bne.n	b0a2 <_usb_d_dev_handle_eps+0x7e>
    b088:	683b      	ldr	r3, [r7, #0]
    b08a:	7cdb      	ldrb	r3, [r3, #19]
    b08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b090:	b2db      	uxtb	r3, r3
    b092:	2b00      	cmp	r3, #0
    b094:	d105      	bne.n	b0a2 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    b096:	7abb      	ldrb	r3, [r7, #10]
    b098:	4619      	mov	r1, r3
    b09a:	6838      	ldr	r0, [r7, #0]
    b09c:	4b0c      	ldr	r3, [pc, #48]	; (b0d0 <_usb_d_dev_handle_eps+0xac>)
    b09e:	4798      	blx	r3
    b0a0:	e013      	b.n	b0ca <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    b0a2:	683b      	ldr	r3, [r7, #0]
    b0a4:	7cdb      	ldrb	r3, [r3, #19]
    b0a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    b0aa:	b2db      	uxtb	r3, r3
    b0ac:	2b00      	cmp	r3, #0
    b0ae:	d005      	beq.n	b0bc <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    b0b0:	7abb      	ldrb	r3, [r7, #10]
    b0b2:	4619      	mov	r1, r3
    b0b4:	6838      	ldr	r0, [r7, #0]
    b0b6:	4b07      	ldr	r3, [pc, #28]	; (b0d4 <_usb_d_dev_handle_eps+0xb0>)
    b0b8:	4798      	blx	r3
    b0ba:	e006      	b.n	b0ca <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    b0bc:	7abb      	ldrb	r3, [r7, #10]
    b0be:	4619      	mov	r1, r3
    b0c0:	6838      	ldr	r0, [r7, #0]
    b0c2:	4b05      	ldr	r3, [pc, #20]	; (b0d8 <_usb_d_dev_handle_eps+0xb4>)
    b0c4:	4798      	blx	r3
    b0c6:	e000      	b.n	b0ca <_usb_d_dev_handle_eps+0xa6>
		return;
    b0c8:	bf00      	nop
		}
	}
}
    b0ca:	3710      	adds	r7, #16
    b0cc:	46bd      	mov	sp, r7
    b0ce:	bd80      	pop	{r7, pc}
    b0d0:	0000aea9 	.word	0x0000aea9
    b0d4:	0000aefd 	.word	0x0000aefd
    b0d8:	0000af91 	.word	0x0000af91

0000b0dc <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    b0dc:	b580      	push	{r7, lr}
    b0de:	b084      	sub	sp, #16
    b0e0:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    b0e2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b0e6:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    b0e8:	68bb      	ldr	r3, [r7, #8]
    b0ea:	8c1b      	ldrh	r3, [r3, #32]
    b0ec:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    b0ee:	88fb      	ldrh	r3, [r7, #6]
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	d104      	bne.n	b0fe <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    b0f4:	4b13      	ldr	r3, [pc, #76]	; (b144 <_usb_d_dev_handler+0x68>)
    b0f6:	4798      	blx	r3
    b0f8:	4603      	mov	r3, r0
    b0fa:	2b00      	cmp	r3, #0
    b0fc:	d11e      	bne.n	b13c <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    b0fe:	2300      	movs	r3, #0
    b100:	73fb      	strb	r3, [r7, #15]
    b102:	e017      	b.n	b134 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    b104:	7bfa      	ldrb	r2, [r7, #15]
    b106:	4613      	mov	r3, r2
    b108:	009b      	lsls	r3, r3, #2
    b10a:	4413      	add	r3, r2
    b10c:	009b      	lsls	r3, r3, #2
    b10e:	3310      	adds	r3, #16
    b110:	4a0d      	ldr	r2, [pc, #52]	; (b148 <_usb_d_dev_handler+0x6c>)
    b112:	4413      	add	r3, r2
    b114:	3304      	adds	r3, #4
    b116:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    b118:	683b      	ldr	r3, [r7, #0]
    b11a:	7c9b      	ldrb	r3, [r3, #18]
    b11c:	2bff      	cmp	r3, #255	; 0xff
    b11e:	d005      	beq.n	b12c <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    b120:	88fb      	ldrh	r3, [r7, #6]
    b122:	6839      	ldr	r1, [r7, #0]
    b124:	4618      	mov	r0, r3
    b126:	4b09      	ldr	r3, [pc, #36]	; (b14c <_usb_d_dev_handler+0x70>)
    b128:	4798      	blx	r3
    b12a:	e000      	b.n	b12e <_usb_d_dev_handler+0x52>
			continue;
    b12c:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    b12e:	7bfb      	ldrb	r3, [r7, #15]
    b130:	3301      	adds	r3, #1
    b132:	73fb      	strb	r3, [r7, #15]
    b134:	7bfb      	ldrb	r3, [r7, #15]
    b136:	2b08      	cmp	r3, #8
    b138:	d9e4      	bls.n	b104 <_usb_d_dev_handler+0x28>
    b13a:	e000      	b.n	b13e <_usb_d_dev_handler+0x62>
			return;
    b13c:	bf00      	nop
	}
}
    b13e:	3710      	adds	r7, #16
    b140:	46bd      	mov	sp, r7
    b142:	bd80      	pop	{r7, pc}
    b144:	0000a635 	.word	0x0000a635
    b148:	20000c38 	.word	0x20000c38
    b14c:	0000b025 	.word	0x0000b025

0000b150 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    b150:	b580      	push	{r7, lr}
    b152:	b082      	sub	sp, #8
    b154:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    b156:	2300      	movs	r3, #0
    b158:	71fb      	strb	r3, [r7, #7]
    b15a:	e023      	b.n	b1a4 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    b15c:	79fa      	ldrb	r2, [r7, #7]
    b15e:	4613      	mov	r3, r2
    b160:	009b      	lsls	r3, r3, #2
    b162:	4413      	add	r3, r2
    b164:	009b      	lsls	r3, r3, #2
    b166:	3310      	adds	r3, #16
    b168:	4a14      	ldr	r2, [pc, #80]	; (b1bc <_usb_d_dev_reset_epts+0x6c>)
    b16a:	4413      	add	r3, r2
    b16c:	3304      	adds	r3, #4
    b16e:	2103      	movs	r1, #3
    b170:	4618      	mov	r0, r3
    b172:	4b13      	ldr	r3, [pc, #76]	; (b1c0 <_usb_d_dev_reset_epts+0x70>)
    b174:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    b176:	79fa      	ldrb	r2, [r7, #7]
    b178:	4910      	ldr	r1, [pc, #64]	; (b1bc <_usb_d_dev_reset_epts+0x6c>)
    b17a:	4613      	mov	r3, r2
    b17c:	009b      	lsls	r3, r3, #2
    b17e:	4413      	add	r3, r2
    b180:	009b      	lsls	r3, r3, #2
    b182:	440b      	add	r3, r1
    b184:	3326      	adds	r3, #38	; 0x26
    b186:	22ff      	movs	r2, #255	; 0xff
    b188:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    b18a:	79fa      	ldrb	r2, [r7, #7]
    b18c:	490b      	ldr	r1, [pc, #44]	; (b1bc <_usb_d_dev_reset_epts+0x6c>)
    b18e:	4613      	mov	r3, r2
    b190:	009b      	lsls	r3, r3, #2
    b192:	4413      	add	r3, r2
    b194:	009b      	lsls	r3, r3, #2
    b196:	440b      	add	r3, r1
    b198:	3327      	adds	r3, #39	; 0x27
    b19a:	2200      	movs	r2, #0
    b19c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    b19e:	79fb      	ldrb	r3, [r7, #7]
    b1a0:	3301      	adds	r3, #1
    b1a2:	71fb      	strb	r3, [r7, #7]
    b1a4:	79fb      	ldrb	r3, [r7, #7]
    b1a6:	2b08      	cmp	r3, #8
    b1a8:	d9d8      	bls.n	b15c <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    b1aa:	22a0      	movs	r2, #160	; 0xa0
    b1ac:	2100      	movs	r1, #0
    b1ae:	4805      	ldr	r0, [pc, #20]	; (b1c4 <_usb_d_dev_reset_epts+0x74>)
    b1b0:	4b05      	ldr	r3, [pc, #20]	; (b1c8 <_usb_d_dev_reset_epts+0x78>)
    b1b2:	4798      	blx	r3
}
    b1b4:	bf00      	nop
    b1b6:	3708      	adds	r7, #8
    b1b8:	46bd      	mov	sp, r7
    b1ba:	bd80      	pop	{r7, pc}
    b1bc:	20000c38 	.word	0x20000c38
    b1c0:	0000ba15 	.word	0x0000ba15
    b1c4:	20000d00 	.word	0x20000d00
    b1c8:	000108fd 	.word	0x000108fd

0000b1cc <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    b1cc:	b580      	push	{r7, lr}
    b1ce:	b084      	sub	sp, #16
    b1d0:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    b1d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b1d6:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    b1d8:	2301      	movs	r3, #1
    b1da:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    b1dc:	2304      	movs	r3, #4
    b1de:	713b      	strb	r3, [r7, #4]
    b1e0:	2300      	movs	r3, #0
    b1e2:	717b      	strb	r3, [r7, #5]
    b1e4:	2300      	movs	r3, #0
    b1e6:	71bb      	strb	r3, [r7, #6]
    b1e8:	2300      	movs	r3, #0
    b1ea:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    b1ec:	2101      	movs	r1, #1
    b1ee:	68f8      	ldr	r0, [r7, #12]
    b1f0:	4b26      	ldr	r3, [pc, #152]	; (b28c <_usb_d_dev_init+0xc0>)
    b1f2:	4798      	blx	r3
    b1f4:	4603      	mov	r3, r0
    b1f6:	f083 0301 	eor.w	r3, r3, #1
    b1fa:	b2db      	uxtb	r3, r3
    b1fc:	2b00      	cmp	r3, #0
    b1fe:	d011      	beq.n	b224 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    b200:	2102      	movs	r1, #2
    b202:	68f8      	ldr	r0, [r7, #12]
    b204:	4b22      	ldr	r3, [pc, #136]	; (b290 <_usb_d_dev_init+0xc4>)
    b206:	4798      	blx	r3
    b208:	4603      	mov	r3, r0
    b20a:	2b00      	cmp	r3, #0
    b20c:	d006      	beq.n	b21c <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    b20e:	68f8      	ldr	r0, [r7, #12]
    b210:	4b20      	ldr	r3, [pc, #128]	; (b294 <_usb_d_dev_init+0xc8>)
    b212:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    b214:	2102      	movs	r1, #2
    b216:	68f8      	ldr	r0, [r7, #12]
    b218:	4b1f      	ldr	r3, [pc, #124]	; (b298 <_usb_d_dev_init+0xcc>)
    b21a:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    b21c:	2101      	movs	r1, #1
    b21e:	68f8      	ldr	r0, [r7, #12]
    b220:	4b1e      	ldr	r3, [pc, #120]	; (b29c <_usb_d_dev_init+0xd0>)
    b222:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    b224:	2101      	movs	r1, #1
    b226:	68f8      	ldr	r0, [r7, #12]
    b228:	4b1b      	ldr	r3, [pc, #108]	; (b298 <_usb_d_dev_init+0xcc>)
    b22a:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    b22c:	4b1c      	ldr	r3, [pc, #112]	; (b2a0 <_usb_d_dev_init+0xd4>)
    b22e:	4a1d      	ldr	r2, [pc, #116]	; (b2a4 <_usb_d_dev_init+0xd8>)
    b230:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    b232:	4b1b      	ldr	r3, [pc, #108]	; (b2a0 <_usb_d_dev_init+0xd4>)
    b234:	4a1b      	ldr	r2, [pc, #108]	; (b2a4 <_usb_d_dev_init+0xd8>)
    b236:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    b238:	4b19      	ldr	r3, [pc, #100]	; (b2a0 <_usb_d_dev_init+0xd4>)
    b23a:	4a1a      	ldr	r2, [pc, #104]	; (b2a4 <_usb_d_dev_init+0xd8>)
    b23c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    b23e:	4b18      	ldr	r3, [pc, #96]	; (b2a0 <_usb_d_dev_init+0xd4>)
    b240:	4a18      	ldr	r2, [pc, #96]	; (b2a4 <_usb_d_dev_init+0xd8>)
    b242:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    b244:	4b16      	ldr	r3, [pc, #88]	; (b2a0 <_usb_d_dev_init+0xd4>)
    b246:	4a17      	ldr	r2, [pc, #92]	; (b2a4 <_usb_d_dev_init+0xd8>)
    b248:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    b24a:	4b17      	ldr	r3, [pc, #92]	; (b2a8 <_usb_d_dev_init+0xdc>)
    b24c:	4798      	blx	r3

	_usb_load_calib();
    b24e:	4b17      	ldr	r3, [pc, #92]	; (b2ac <_usb_d_dev_init+0xe0>)
    b250:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    b252:	2104      	movs	r1, #4
    b254:	68f8      	ldr	r0, [r7, #12]
    b256:	4b11      	ldr	r3, [pc, #68]	; (b29c <_usb_d_dev_init+0xd0>)
    b258:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    b25a:	4b15      	ldr	r3, [pc, #84]	; (b2b0 <_usb_d_dev_init+0xe4>)
    b25c:	4619      	mov	r1, r3
    b25e:	68f8      	ldr	r0, [r7, #12]
    b260:	4b14      	ldr	r3, [pc, #80]	; (b2b4 <_usb_d_dev_init+0xe8>)
    b262:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    b264:	7afb      	ldrb	r3, [r7, #11]
    b266:	f107 0210 	add.w	r2, r7, #16
    b26a:	4413      	add	r3, r2
    b26c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    b270:	f043 0301 	orr.w	r3, r3, #1
    b274:	b2db      	uxtb	r3, r3
    b276:	b29b      	uxth	r3, r3
    b278:	4619      	mov	r1, r3
    b27a:	68f8      	ldr	r0, [r7, #12]
    b27c:	4b0e      	ldr	r3, [pc, #56]	; (b2b8 <_usb_d_dev_init+0xec>)
    b27e:	4798      	blx	r3

	return ERR_NONE;
    b280:	2300      	movs	r3, #0
}
    b282:	4618      	mov	r0, r3
    b284:	3710      	adds	r7, #16
    b286:	46bd      	mov	sp, r7
    b288:	bd80      	pop	{r7, pc}
    b28a:	bf00      	nop
    b28c:	00009865 	.word	0x00009865
    b290:	00009bb5 	.word	0x00009bb5
    b294:	00009b89 	.word	0x00009b89
    b298:	0000983b 	.word	0x0000983b
    b29c:	00009be5 	.word	0x00009be5
    b2a0:	20000c38 	.word	0x20000c38
    b2a4:	00009cad 	.word	0x00009cad
    b2a8:	0000b151 	.word	0x0000b151
    b2ac:	00009cc5 	.word	0x00009cc5
    b2b0:	20000d00 	.word	0x20000d00
    b2b4:	00009c91 	.word	0x00009c91
    b2b8:	00009c55 	.word	0x00009c55

0000b2bc <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    b2bc:	b580      	push	{r7, lr}
    b2be:	b082      	sub	sp, #8
    b2c0:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    b2c2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b2c6:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    b2c8:	2103      	movs	r1, #3
    b2ca:	6878      	ldr	r0, [r7, #4]
    b2cc:	4b17      	ldr	r3, [pc, #92]	; (b32c <_usb_d_dev_enable+0x70>)
    b2ce:	4798      	blx	r3
    b2d0:	4603      	mov	r3, r0
    b2d2:	2b00      	cmp	r3, #0
    b2d4:	d002      	beq.n	b2dc <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    b2d6:	f06f 0310 	mvn.w	r3, #16
    b2da:	e023      	b.n	b324 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    b2dc:	6878      	ldr	r0, [r7, #4]
    b2de:	4b14      	ldr	r3, [pc, #80]	; (b330 <_usb_d_dev_enable+0x74>)
    b2e0:	4798      	blx	r3
    b2e2:	4603      	mov	r3, r0
    b2e4:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    b2e6:	78fb      	ldrb	r3, [r7, #3]
    b2e8:	f003 0302 	and.w	r3, r3, #2
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	d107      	bne.n	b300 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    b2f0:	78fb      	ldrb	r3, [r7, #3]
    b2f2:	f043 0302 	orr.w	r3, r3, #2
    b2f6:	b2db      	uxtb	r3, r3
    b2f8:	4619      	mov	r1, r3
    b2fa:	6878      	ldr	r0, [r7, #4]
    b2fc:	4b0d      	ldr	r3, [pc, #52]	; (b334 <_usb_d_dev_enable+0x78>)
    b2fe:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    b300:	2050      	movs	r0, #80	; 0x50
    b302:	4b0d      	ldr	r3, [pc, #52]	; (b338 <_usb_d_dev_enable+0x7c>)
    b304:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    b306:	2051      	movs	r0, #81	; 0x51
    b308:	4b0b      	ldr	r3, [pc, #44]	; (b338 <_usb_d_dev_enable+0x7c>)
    b30a:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    b30c:	2052      	movs	r0, #82	; 0x52
    b30e:	4b0a      	ldr	r3, [pc, #40]	; (b338 <_usb_d_dev_enable+0x7c>)
    b310:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    b312:	2053      	movs	r0, #83	; 0x53
    b314:	4b08      	ldr	r3, [pc, #32]	; (b338 <_usb_d_dev_enable+0x7c>)
    b316:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    b318:	f240 218d 	movw	r1, #653	; 0x28d
    b31c:	6878      	ldr	r0, [r7, #4]
    b31e:	4b07      	ldr	r3, [pc, #28]	; (b33c <_usb_d_dev_enable+0x80>)
    b320:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    b322:	2300      	movs	r3, #0
}
    b324:	4618      	mov	r0, r3
    b326:	3708      	adds	r7, #8
    b328:	46bd      	mov	sp, r7
    b32a:	bd80      	pop	{r7, pc}
    b32c:	00009b5f 	.word	0x00009b5f
    b330:	00009c0d 	.word	0x00009c0d
    b334:	00009be5 	.word	0x00009be5
    b338:	00009771 	.word	0x00009771
    b33c:	00009b09 	.word	0x00009b09

0000b340 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    b340:	b580      	push	{r7, lr}
    b342:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    b344:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b348:	4b01      	ldr	r3, [pc, #4]	; (b350 <_usb_d_dev_attach+0x10>)
    b34a:	4798      	blx	r3
}
    b34c:	bf00      	nop
    b34e:	bd80      	pop	{r7, pc}
    b350:	00009c31 	.word	0x00009c31

0000b354 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    b354:	b580      	push	{r7, lr}
    b356:	b082      	sub	sp, #8
    b358:	af00      	add	r7, sp, #0
    b35a:	4603      	mov	r3, r0
    b35c:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    b35e:	79fb      	ldrb	r3, [r7, #7]
    b360:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b364:	b2db      	uxtb	r3, r3
    b366:	4619      	mov	r1, r3
    b368:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b36c:	4b02      	ldr	r3, [pc, #8]	; (b378 <_usb_d_dev_set_address+0x24>)
    b36e:	4798      	blx	r3
}
    b370:	bf00      	nop
    b372:	3708      	adds	r7, #8
    b374:	46bd      	mov	sp, r7
    b376:	bd80      	pop	{r7, pc}
    b378:	00009c73 	.word	0x00009c73

0000b37c <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    b37c:	b590      	push	{r4, r7, lr}
    b37e:	b085      	sub	sp, #20
    b380:	af00      	add	r7, sp, #0
    b382:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    b384:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b388:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b38a:	687b      	ldr	r3, [r7, #4]
    b38c:	7c9b      	ldrb	r3, [r3, #18]
    b38e:	f003 030f 	and.w	r3, r3, #15
    b392:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b394:	687b      	ldr	r3, [r7, #4]
    b396:	68db      	ldr	r3, [r3, #12]
    b398:	461a      	mov	r2, r3
    b39a:	7afb      	ldrb	r3, [r7, #11]
    b39c:	2100      	movs	r1, #0
    b39e:	4618      	mov	r0, r3
    b3a0:	4b0f      	ldr	r3, [pc, #60]	; (b3e0 <_usb_d_dev_trans_setup+0x64>)
    b3a2:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    b3a4:	687b      	ldr	r3, [r7, #4]
    b3a6:	8a1b      	ldrh	r3, [r3, #16]
    b3a8:	461a      	mov	r2, r3
    b3aa:	7af8      	ldrb	r0, [r7, #11]
    b3ac:	2300      	movs	r3, #0
    b3ae:	2100      	movs	r1, #0
    b3b0:	4c0c      	ldr	r4, [pc, #48]	; (b3e4 <_usb_d_dev_trans_setup+0x68>)
    b3b2:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    b3b4:	7afb      	ldrb	r3, [r7, #11]
    b3b6:	22b0      	movs	r2, #176	; 0xb0
    b3b8:	4619      	mov	r1, r3
    b3ba:	68f8      	ldr	r0, [r7, #12]
    b3bc:	4b0a      	ldr	r3, [pc, #40]	; (b3e8 <_usb_d_dev_trans_setup+0x6c>)
    b3be:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    b3c0:	7afb      	ldrb	r3, [r7, #11]
    b3c2:	2200      	movs	r2, #0
    b3c4:	2100      	movs	r1, #0
    b3c6:	4618      	mov	r0, r3
    b3c8:	4b08      	ldr	r3, [pc, #32]	; (b3ec <_usb_d_dev_trans_setup+0x70>)
    b3ca:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    b3cc:	7afb      	ldrb	r3, [r7, #11]
    b3ce:	2210      	movs	r2, #16
    b3d0:	4619      	mov	r1, r3
    b3d2:	68f8      	ldr	r0, [r7, #12]
    b3d4:	4b06      	ldr	r3, [pc, #24]	; (b3f0 <_usb_d_dev_trans_setup+0x74>)
    b3d6:	4798      	blx	r3
}
    b3d8:	bf00      	nop
    b3da:	3714      	adds	r7, #20
    b3dc:	46bd      	mov	sp, r7
    b3de:	bd90      	pop	{r4, r7, pc}
    b3e0:	0000a111 	.word	0x0000a111
    b3e4:	0000a299 	.word	0x0000a299
    b3e8:	00009971 	.word	0x00009971
    b3ec:	0000a369 	.word	0x0000a369
    b3f0:	000099c5 	.word	0x000099c5

0000b3f4 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    b3f4:	b580      	push	{r7, lr}
    b3f6:	b088      	sub	sp, #32
    b3f8:	af00      	add	r7, sp, #0
    b3fa:	4603      	mov	r3, r0
    b3fc:	71fb      	strb	r3, [r7, #7]
    b3fe:	460b      	mov	r3, r1
    b400:	71bb      	strb	r3, [r7, #6]
    b402:	4613      	mov	r3, r2
    b404:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    b406:	79fb      	ldrb	r3, [r7, #7]
    b408:	f003 030f 	and.w	r3, r3, #15
    b40c:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    b40e:	79fb      	ldrb	r3, [r7, #7]
    b410:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b414:	2b00      	cmp	r3, #0
    b416:	bf14      	ite	ne
    b418:	2301      	movne	r3, #1
    b41a:	2300      	moveq	r3, #0
    b41c:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b41e:	7fba      	ldrb	r2, [r7, #30]
    b420:	7ffb      	ldrb	r3, [r7, #31]
    b422:	4611      	mov	r1, r2
    b424:	4618      	mov	r0, r3
    b426:	4b3e      	ldr	r3, [pc, #248]	; (b520 <_usb_d_dev_ep_init+0x12c>)
    b428:	4798      	blx	r3
    b42a:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    b42c:	79bb      	ldrb	r3, [r7, #6]
    b42e:	f003 0303 	and.w	r3, r3, #3
    b432:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    b434:	7ffa      	ldrb	r2, [r7, #31]
    b436:	4613      	mov	r3, r2
    b438:	005b      	lsls	r3, r3, #1
    b43a:	4413      	add	r3, r2
    b43c:	009b      	lsls	r3, r3, #2
    b43e:	4a39      	ldr	r2, [pc, #228]	; (b524 <_usb_d_dev_ep_init+0x130>)
    b440:	4413      	add	r3, r2
    b442:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    b444:	7ffb      	ldrb	r3, [r7, #31]
    b446:	2b04      	cmp	r3, #4
    b448:	d902      	bls.n	b450 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    b44a:	f06f 0311 	mvn.w	r3, #17
    b44e:	e063      	b.n	b518 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    b450:	69bb      	ldr	r3, [r7, #24]
    b452:	7c9b      	ldrb	r3, [r3, #18]
    b454:	2bff      	cmp	r3, #255	; 0xff
    b456:	d002      	beq.n	b45e <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    b458:	f06f 0313 	mvn.w	r3, #19
    b45c:	e05c      	b.n	b518 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    b45e:	7dfb      	ldrb	r3, [r7, #23]
    b460:	2b00      	cmp	r3, #0
    b462:	d11f      	bne.n	b4a4 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    b464:	7fbb      	ldrb	r3, [r7, #30]
    b466:	2b00      	cmp	r3, #0
    b468:	bf14      	ite	ne
    b46a:	2301      	movne	r3, #1
    b46c:	2300      	moveq	r3, #0
    b46e:	b2db      	uxtb	r3, r3
    b470:	f083 0301 	eor.w	r3, r3, #1
    b474:	b2db      	uxtb	r3, r3
    b476:	f003 0301 	and.w	r3, r3, #1
    b47a:	b2da      	uxtb	r2, r3
    b47c:	7ffb      	ldrb	r3, [r7, #31]
    b47e:	4611      	mov	r1, r2
    b480:	4618      	mov	r0, r3
    b482:	4b27      	ldr	r3, [pc, #156]	; (b520 <_usb_d_dev_ep_init+0x12c>)
    b484:	4798      	blx	r3
    b486:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    b488:	68fb      	ldr	r3, [r7, #12]
    b48a:	7c9b      	ldrb	r3, [r3, #18]
    b48c:	2bff      	cmp	r3, #255	; 0xff
    b48e:	d002      	beq.n	b496 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    b490:	f06f 0313 	mvn.w	r3, #19
    b494:	e040      	b.n	b518 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    b496:	693b      	ldr	r3, [r7, #16]
    b498:	681b      	ldr	r3, [r3, #0]
    b49a:	2b00      	cmp	r3, #0
    b49c:	d102      	bne.n	b4a4 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    b49e:	f06f 0312 	mvn.w	r3, #18
    b4a2:	e039      	b.n	b518 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    b4a4:	7fbb      	ldrb	r3, [r7, #30]
    b4a6:	2b00      	cmp	r3, #0
    b4a8:	d007      	beq.n	b4ba <_usb_d_dev_ep_init+0xc6>
    b4aa:	693b      	ldr	r3, [r7, #16]
    b4ac:	685b      	ldr	r3, [r3, #4]
    b4ae:	2b00      	cmp	r3, #0
    b4b0:	bf14      	ite	ne
    b4b2:	2301      	movne	r3, #1
    b4b4:	2300      	moveq	r3, #0
    b4b6:	b2db      	uxtb	r3, r3
    b4b8:	e006      	b.n	b4c8 <_usb_d_dev_ep_init+0xd4>
    b4ba:	693b      	ldr	r3, [r7, #16]
    b4bc:	681b      	ldr	r3, [r3, #0]
    b4be:	2b00      	cmp	r3, #0
    b4c0:	bf14      	ite	ne
    b4c2:	2301      	movne	r3, #1
    b4c4:	2300      	moveq	r3, #0
    b4c6:	b2db      	uxtb	r3, r3
    b4c8:	2b00      	cmp	r3, #0
    b4ca:	d00f      	beq.n	b4ec <_usb_d_dev_ep_init+0xf8>
    b4cc:	7fbb      	ldrb	r3, [r7, #30]
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d003      	beq.n	b4da <_usb_d_dev_ep_init+0xe6>
    b4d2:	693b      	ldr	r3, [r7, #16]
    b4d4:	895b      	ldrh	r3, [r3, #10]
    b4d6:	461a      	mov	r2, r3
    b4d8:	e002      	b.n	b4e0 <_usb_d_dev_ep_init+0xec>
    b4da:	693b      	ldr	r3, [r7, #16]
    b4dc:	891b      	ldrh	r3, [r3, #8]
    b4de:	461a      	mov	r2, r3
    b4e0:	88bb      	ldrh	r3, [r7, #4]
    b4e2:	429a      	cmp	r2, r3
    b4e4:	da02      	bge.n	b4ec <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    b4e6:	f06f 0312 	mvn.w	r3, #18
    b4ea:	e015      	b.n	b518 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    b4ec:	7fbb      	ldrb	r3, [r7, #30]
    b4ee:	2b00      	cmp	r3, #0
    b4f0:	d002      	beq.n	b4f8 <_usb_d_dev_ep_init+0x104>
    b4f2:	693b      	ldr	r3, [r7, #16]
    b4f4:	685b      	ldr	r3, [r3, #4]
    b4f6:	e001      	b.n	b4fc <_usb_d_dev_ep_init+0x108>
    b4f8:	693b      	ldr	r3, [r7, #16]
    b4fa:	681b      	ldr	r3, [r3, #0]
    b4fc:	69ba      	ldr	r2, [r7, #24]
    b4fe:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    b500:	69bb      	ldr	r3, [r7, #24]
    b502:	88ba      	ldrh	r2, [r7, #4]
    b504:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    b506:	7dfb      	ldrb	r3, [r7, #23]
    b508:	3301      	adds	r3, #1
    b50a:	b2da      	uxtb	r2, r3
    b50c:	69bb      	ldr	r3, [r7, #24]
    b50e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    b510:	69bb      	ldr	r3, [r7, #24]
    b512:	79fa      	ldrb	r2, [r7, #7]
    b514:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    b516:	2300      	movs	r3, #0
}
    b518:	4618      	mov	r0, r3
    b51a:	3720      	adds	r7, #32
    b51c:	46bd      	mov	sp, r7
    b51e:	bd80      	pop	{r7, pc}
    b520:	0000a425 	.word	0x0000a425
    b524:	00010f14 	.word	0x00010f14

0000b528 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    b528:	b580      	push	{r7, lr}
    b52a:	b086      	sub	sp, #24
    b52c:	af00      	add	r7, sp, #0
    b52e:	4603      	mov	r3, r0
    b530:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    b532:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b536:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    b538:	79fb      	ldrb	r3, [r7, #7]
    b53a:	f003 030f 	and.w	r3, r3, #15
    b53e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b540:	79fb      	ldrb	r3, [r7, #7]
    b542:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b546:	2b00      	cmp	r3, #0
    b548:	bf14      	ite	ne
    b54a:	2301      	movne	r3, #1
    b54c:	2300      	moveq	r3, #0
    b54e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b550:	7cba      	ldrb	r2, [r7, #18]
    b552:	7cfb      	ldrb	r3, [r7, #19]
    b554:	4611      	mov	r1, r2
    b556:	4618      	mov	r0, r3
    b558:	4b2a      	ldr	r3, [pc, #168]	; (b604 <_usb_d_dev_ep_deinit+0xdc>)
    b55a:	4798      	blx	r3
    b55c:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b55e:	7cfb      	ldrb	r3, [r7, #19]
    b560:	2b04      	cmp	r3, #4
    b562:	d84a      	bhi.n	b5fa <_usb_d_dev_ep_deinit+0xd2>
    b564:	68fb      	ldr	r3, [r7, #12]
    b566:	7c9b      	ldrb	r3, [r3, #18]
    b568:	2bff      	cmp	r3, #255	; 0xff
    b56a:	d046      	beq.n	b5fa <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    b56c:	7cbb      	ldrb	r3, [r7, #18]
    b56e:	2203      	movs	r2, #3
    b570:	4619      	mov	r1, r3
    b572:	68f8      	ldr	r0, [r7, #12]
    b574:	4b24      	ldr	r3, [pc, #144]	; (b608 <_usb_d_dev_ep_deinit+0xe0>)
    b576:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b578:	68fb      	ldr	r3, [r7, #12]
    b57a:	7cdb      	ldrb	r3, [r3, #19]
    b57c:	f003 0307 	and.w	r3, r3, #7
    b580:	b2db      	uxtb	r3, r3
    b582:	2b01      	cmp	r3, #1
    b584:	d107      	bne.n	b596 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    b586:	79fb      	ldrb	r3, [r7, #7]
    b588:	697a      	ldr	r2, [r7, #20]
    b58a:	3308      	adds	r3, #8
    b58c:	015b      	lsls	r3, r3, #5
    b58e:	4413      	add	r3, r2
    b590:	2200      	movs	r2, #0
    b592:	701a      	strb	r2, [r3, #0]
    b594:	e02a      	b.n	b5ec <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    b596:	f997 3007 	ldrsb.w	r3, [r7, #7]
    b59a:	2b00      	cmp	r3, #0
    b59c:	da15      	bge.n	b5ca <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    b59e:	79fb      	ldrb	r3, [r7, #7]
    b5a0:	f003 030f 	and.w	r3, r3, #15
    b5a4:	79fa      	ldrb	r2, [r7, #7]
    b5a6:	f002 020f 	and.w	r2, r2, #15
    b5aa:	6979      	ldr	r1, [r7, #20]
    b5ac:	3208      	adds	r2, #8
    b5ae:	0152      	lsls	r2, r2, #5
    b5b0:	440a      	add	r2, r1
    b5b2:	7812      	ldrb	r2, [r2, #0]
    b5b4:	b2d2      	uxtb	r2, r2
    b5b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    b5ba:	b2d1      	uxtb	r1, r2
    b5bc:	697a      	ldr	r2, [r7, #20]
    b5be:	3308      	adds	r3, #8
    b5c0:	015b      	lsls	r3, r3, #5
    b5c2:	4413      	add	r3, r2
    b5c4:	460a      	mov	r2, r1
    b5c6:	701a      	strb	r2, [r3, #0]
    b5c8:	e010      	b.n	b5ec <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    b5ca:	79fb      	ldrb	r3, [r7, #7]
    b5cc:	79fa      	ldrb	r2, [r7, #7]
    b5ce:	6979      	ldr	r1, [r7, #20]
    b5d0:	3208      	adds	r2, #8
    b5d2:	0152      	lsls	r2, r2, #5
    b5d4:	440a      	add	r2, r1
    b5d6:	7812      	ldrb	r2, [r2, #0]
    b5d8:	b2d2      	uxtb	r2, r2
    b5da:	f022 0207 	bic.w	r2, r2, #7
    b5de:	b2d1      	uxtb	r1, r2
    b5e0:	697a      	ldr	r2, [r7, #20]
    b5e2:	3308      	adds	r3, #8
    b5e4:	015b      	lsls	r3, r3, #5
    b5e6:	4413      	add	r3, r2
    b5e8:	460a      	mov	r2, r1
    b5ea:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    b5ec:	68fb      	ldr	r3, [r7, #12]
    b5ee:	2200      	movs	r2, #0
    b5f0:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    b5f2:	68fb      	ldr	r3, [r7, #12]
    b5f4:	22ff      	movs	r2, #255	; 0xff
    b5f6:	749a      	strb	r2, [r3, #18]
    b5f8:	e000      	b.n	b5fc <_usb_d_dev_ep_deinit+0xd4>
		return;
    b5fa:	bf00      	nop
}
    b5fc:	3718      	adds	r7, #24
    b5fe:	46bd      	mov	sp, r7
    b600:	bd80      	pop	{r7, pc}
    b602:	bf00      	nop
    b604:	0000a425 	.word	0x0000a425
    b608:	0000ba5d 	.word	0x0000ba5d

0000b60c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    b60c:	b5b0      	push	{r4, r5, r7, lr}
    b60e:	b088      	sub	sp, #32
    b610:	af00      	add	r7, sp, #0
    b612:	4603      	mov	r3, r0
    b614:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    b616:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b61a:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    b61c:	79fb      	ldrb	r3, [r7, #7]
    b61e:	f003 030f 	and.w	r3, r3, #15
    b622:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    b624:	79fb      	ldrb	r3, [r7, #7]
    b626:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b62a:	2b00      	cmp	r3, #0
    b62c:	bf14      	ite	ne
    b62e:	2301      	movne	r3, #1
    b630:	2300      	moveq	r3, #0
    b632:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    b634:	7eba      	ldrb	r2, [r7, #26]
    b636:	7efb      	ldrb	r3, [r7, #27]
    b638:	4611      	mov	r1, r2
    b63a:	4618      	mov	r0, r3
    b63c:	4b70      	ldr	r3, [pc, #448]	; (b800 <_usb_d_dev_ep_enable+0x1f4>)
    b63e:	4798      	blx	r3
    b640:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    b642:	7efb      	ldrb	r3, [r7, #27]
    b644:	4619      	mov	r1, r3
    b646:	69f8      	ldr	r0, [r7, #28]
    b648:	4b6e      	ldr	r3, [pc, #440]	; (b804 <_usb_d_dev_ep_enable+0x1f8>)
    b64a:	4798      	blx	r3
    b64c:	4603      	mov	r3, r0
    b64e:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b650:	7efb      	ldrb	r3, [r7, #27]
    b652:	2b04      	cmp	r3, #4
    b654:	d803      	bhi.n	b65e <_usb_d_dev_ep_enable+0x52>
    b656:	697b      	ldr	r3, [r7, #20]
    b658:	7c9b      	ldrb	r3, [r3, #18]
    b65a:	2bff      	cmp	r3, #255	; 0xff
    b65c:	d102      	bne.n	b664 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    b65e:	f06f 0311 	mvn.w	r3, #17
    b662:	e0c8      	b.n	b7f6 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    b664:	7efb      	ldrb	r3, [r7, #27]
    b666:	015b      	lsls	r3, r3, #5
    b668:	4a67      	ldr	r2, [pc, #412]	; (b808 <_usb_d_dev_ep_enable+0x1fc>)
    b66a:	4413      	add	r3, r2
    b66c:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    b66e:	697b      	ldr	r3, [r7, #20]
    b670:	7cdb      	ldrb	r3, [r3, #19]
    b672:	f003 0307 	and.w	r3, r3, #7
    b676:	b2db      	uxtb	r3, r3
    b678:	2b01      	cmp	r3, #1
    b67a:	d14b      	bne.n	b714 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    b67c:	7cfb      	ldrb	r3, [r7, #19]
    b67e:	f003 0377 	and.w	r3, r3, #119	; 0x77
    b682:	2b00      	cmp	r3, #0
    b684:	d002      	beq.n	b68c <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    b686:	f06f 0313 	mvn.w	r3, #19
    b68a:	e0b4      	b.n	b7f6 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    b68c:	7efb      	ldrb	r3, [r7, #27]
    b68e:	2211      	movs	r2, #17
    b690:	4619      	mov	r1, r3
    b692:	69f8      	ldr	r0, [r7, #28]
    b694:	4b5d      	ldr	r3, [pc, #372]	; (b80c <_usb_d_dev_ep_enable+0x200>)
    b696:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b698:	697b      	ldr	r3, [r7, #20]
    b69a:	8a1b      	ldrh	r3, [r3, #16]
    b69c:	039b      	lsls	r3, r3, #14
    b69e:	4c5c      	ldr	r4, [pc, #368]	; (b810 <_usb_d_dev_ep_enable+0x204>)
    b6a0:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b6a2:	697b      	ldr	r3, [r7, #20]
    b6a4:	8a1b      	ldrh	r3, [r3, #16]
    b6a6:	4618      	mov	r0, r3
    b6a8:	4b5a      	ldr	r3, [pc, #360]	; (b814 <_usb_d_dev_ep_enable+0x208>)
    b6aa:	4798      	blx	r3
    b6ac:	4603      	mov	r3, r0
    b6ae:	071b      	lsls	r3, r3, #28
    b6b0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b6b4:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b6b8:	68fb      	ldr	r3, [r7, #12]
    b6ba:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    b6bc:	68fb      	ldr	r3, [r7, #12]
    b6be:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b6c2:	697b      	ldr	r3, [r7, #20]
    b6c4:	8a1b      	ldrh	r3, [r3, #16]
    b6c6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b6ca:	697b      	ldr	r3, [r7, #20]
    b6cc:	8a1b      	ldrh	r3, [r3, #16]
    b6ce:	4618      	mov	r0, r3
    b6d0:	4b50      	ldr	r3, [pc, #320]	; (b814 <_usb_d_dev_ep_enable+0x208>)
    b6d2:	4798      	blx	r3
    b6d4:	4603      	mov	r3, r0
    b6d6:	071b      	lsls	r3, r3, #28
    b6d8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b6dc:	432b      	orrs	r3, r5
    b6de:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b6e0:	7efb      	ldrb	r3, [r7, #27]
    b6e2:	2200      	movs	r2, #0
    b6e4:	2100      	movs	r1, #0
    b6e6:	4618      	mov	r0, r3
    b6e8:	4b4b      	ldr	r3, [pc, #300]	; (b818 <_usb_d_dev_ep_enable+0x20c>)
    b6ea:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    b6ec:	7efb      	ldrb	r3, [r7, #27]
    b6ee:	2200      	movs	r2, #0
    b6f0:	2101      	movs	r1, #1
    b6f2:	4618      	mov	r0, r3
    b6f4:	4b49      	ldr	r3, [pc, #292]	; (b81c <_usb_d_dev_ep_enable+0x210>)
    b6f6:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    b6f8:	7efb      	ldrb	r3, [r7, #27]
    b6fa:	2100      	movs	r1, #0
    b6fc:	4618      	mov	r0, r3
    b6fe:	4b48      	ldr	r3, [pc, #288]	; (b820 <_usb_d_dev_ep_enable+0x214>)
    b700:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b702:	7efb      	ldrb	r3, [r7, #27]
    b704:	2101      	movs	r1, #1
    b706:	4618      	mov	r0, r3
    b708:	4b45      	ldr	r3, [pc, #276]	; (b820 <_usb_d_dev_ep_enable+0x214>)
    b70a:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    b70c:	6978      	ldr	r0, [r7, #20]
    b70e:	4b45      	ldr	r3, [pc, #276]	; (b824 <_usb_d_dev_ep_enable+0x218>)
    b710:	4798      	blx	r3
    b712:	e06f      	b.n	b7f4 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    b714:	7ebb      	ldrb	r3, [r7, #26]
    b716:	2b00      	cmp	r3, #0
    b718:	d038      	beq.n	b78c <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    b71a:	7cfb      	ldrb	r3, [r7, #19]
    b71c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b720:	2b00      	cmp	r3, #0
    b722:	d002      	beq.n	b72a <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    b724:	f06f 0313 	mvn.w	r3, #19
    b728:	e065      	b.n	b7f6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    b72a:	697b      	ldr	r3, [r7, #20]
    b72c:	7cdb      	ldrb	r3, [r3, #19]
    b72e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b732:	b2db      	uxtb	r3, r3
    b734:	011b      	lsls	r3, r3, #4
    b736:	b2db      	uxtb	r3, r3
    b738:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b73c:	b2da      	uxtb	r2, r3
    b73e:	7cfb      	ldrb	r3, [r7, #19]
    b740:	4313      	orrs	r3, r2
    b742:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b744:	7cfa      	ldrb	r2, [r7, #19]
    b746:	7efb      	ldrb	r3, [r7, #27]
    b748:	4619      	mov	r1, r3
    b74a:	69f8      	ldr	r0, [r7, #28]
    b74c:	4b2f      	ldr	r3, [pc, #188]	; (b80c <_usb_d_dev_ep_enable+0x200>)
    b74e:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    b750:	68fb      	ldr	r3, [r7, #12]
    b752:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b756:	697b      	ldr	r3, [r7, #20]
    b758:	8a1b      	ldrh	r3, [r3, #16]
    b75a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b75e:	697b      	ldr	r3, [r7, #20]
    b760:	8a1b      	ldrh	r3, [r3, #16]
    b762:	4618      	mov	r0, r3
    b764:	4b2b      	ldr	r3, [pc, #172]	; (b814 <_usb_d_dev_ep_enable+0x208>)
    b766:	4798      	blx	r3
    b768:	4603      	mov	r3, r0
    b76a:	071b      	lsls	r3, r3, #28
    b76c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b770:	432b      	orrs	r3, r5
    b772:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b774:	7efb      	ldrb	r3, [r7, #27]
    b776:	2200      	movs	r2, #0
    b778:	2101      	movs	r1, #1
    b77a:	4618      	mov	r0, r3
    b77c:	4b27      	ldr	r3, [pc, #156]	; (b81c <_usb_d_dev_ep_enable+0x210>)
    b77e:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b780:	7efb      	ldrb	r3, [r7, #27]
    b782:	2101      	movs	r1, #1
    b784:	4618      	mov	r0, r3
    b786:	4b26      	ldr	r3, [pc, #152]	; (b820 <_usb_d_dev_ep_enable+0x214>)
    b788:	4798      	blx	r3
    b78a:	e033      	b.n	b7f4 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    b78c:	7cfb      	ldrb	r3, [r7, #19]
    b78e:	f003 0307 	and.w	r3, r3, #7
    b792:	2b00      	cmp	r3, #0
    b794:	d002      	beq.n	b79c <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    b796:	f06f 0313 	mvn.w	r3, #19
    b79a:	e02c      	b.n	b7f6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    b79c:	697b      	ldr	r3, [r7, #20]
    b79e:	7cdb      	ldrb	r3, [r3, #19]
    b7a0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b7a4:	b2db      	uxtb	r3, r3
    b7a6:	461a      	mov	r2, r3
    b7a8:	7cfb      	ldrb	r3, [r7, #19]
    b7aa:	4313      	orrs	r3, r2
    b7ac:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b7ae:	7cfa      	ldrb	r2, [r7, #19]
    b7b0:	7efb      	ldrb	r3, [r7, #27]
    b7b2:	4619      	mov	r1, r3
    b7b4:	69f8      	ldr	r0, [r7, #28]
    b7b6:	4b15      	ldr	r3, [pc, #84]	; (b80c <_usb_d_dev_ep_enable+0x200>)
    b7b8:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b7ba:	697b      	ldr	r3, [r7, #20]
    b7bc:	8a1b      	ldrh	r3, [r3, #16]
    b7be:	039b      	lsls	r3, r3, #14
    b7c0:	4c13      	ldr	r4, [pc, #76]	; (b810 <_usb_d_dev_ep_enable+0x204>)
    b7c2:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b7c4:	697b      	ldr	r3, [r7, #20]
    b7c6:	8a1b      	ldrh	r3, [r3, #16]
    b7c8:	4618      	mov	r0, r3
    b7ca:	4b12      	ldr	r3, [pc, #72]	; (b814 <_usb_d_dev_ep_enable+0x208>)
    b7cc:	4798      	blx	r3
    b7ce:	4603      	mov	r3, r0
    b7d0:	071b      	lsls	r3, r3, #28
    b7d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b7d6:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b7da:	68fb      	ldr	r3, [r7, #12]
    b7dc:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b7de:	7efb      	ldrb	r3, [r7, #27]
    b7e0:	2200      	movs	r2, #0
    b7e2:	2100      	movs	r1, #0
    b7e4:	4618      	mov	r0, r3
    b7e6:	4b0c      	ldr	r3, [pc, #48]	; (b818 <_usb_d_dev_ep_enable+0x20c>)
    b7e8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    b7ea:	7efb      	ldrb	r3, [r7, #27]
    b7ec:	2100      	movs	r1, #0
    b7ee:	4618      	mov	r0, r3
    b7f0:	4b0b      	ldr	r3, [pc, #44]	; (b820 <_usb_d_dev_ep_enable+0x214>)
    b7f2:	4798      	blx	r3
	}

	return USB_OK;
    b7f4:	2300      	movs	r3, #0
}
    b7f6:	4618      	mov	r0, r3
    b7f8:	3720      	adds	r7, #32
    b7fa:	46bd      	mov	sp, r7
    b7fc:	bdb0      	pop	{r4, r5, r7, pc}
    b7fe:	bf00      	nop
    b800:	0000a425 	.word	0x0000a425
    b804:	00009aab 	.word	0x00009aab
    b808:	20000d00 	.word	0x20000d00
    b80c:	00009a81 	.word	0x00009a81
    b810:	0fffc000 	.word	0x0fffc000
    b814:	0000a3c1 	.word	0x0000a3c1
    b818:	0000a369 	.word	0x0000a369
    b81c:	0000a311 	.word	0x0000a311
    b820:	0000a2d9 	.word	0x0000a2d9
    b824:	0000b37d 	.word	0x0000b37d

0000b828 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    b828:	b580      	push	{r7, lr}
    b82a:	b084      	sub	sp, #16
    b82c:	af00      	add	r7, sp, #0
    b82e:	6078      	str	r0, [r7, #4]
    b830:	460b      	mov	r3, r1
    b832:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b834:	687b      	ldr	r3, [r7, #4]
    b836:	7c9b      	ldrb	r3, [r3, #18]
    b838:	f003 030f 	and.w	r3, r3, #15
    b83c:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    b83e:	78fa      	ldrb	r2, [r7, #3]
    b840:	7bfb      	ldrb	r3, [r7, #15]
    b842:	4611      	mov	r1, r2
    b844:	4618      	mov	r0, r3
    b846:	4b03      	ldr	r3, [pc, #12]	; (b854 <_usb_d_dev_ep_stall_get+0x2c>)
    b848:	4798      	blx	r3
    b84a:	4603      	mov	r3, r0
}
    b84c:	4618      	mov	r0, r3
    b84e:	3710      	adds	r7, #16
    b850:	46bd      	mov	sp, r7
    b852:	bd80      	pop	{r7, pc}
    b854:	00009f19 	.word	0x00009f19

0000b858 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    b858:	b580      	push	{r7, lr}
    b85a:	b084      	sub	sp, #16
    b85c:	af00      	add	r7, sp, #0
    b85e:	6078      	str	r0, [r7, #4]
    b860:	460b      	mov	r3, r1
    b862:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b864:	687b      	ldr	r3, [r7, #4]
    b866:	7c9b      	ldrb	r3, [r3, #18]
    b868:	f003 030f 	and.w	r3, r3, #15
    b86c:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    b86e:	78f9      	ldrb	r1, [r7, #3]
    b870:	7bfb      	ldrb	r3, [r7, #15]
    b872:	2201      	movs	r2, #1
    b874:	4618      	mov	r0, r3
    b876:	4b0a      	ldr	r3, [pc, #40]	; (b8a0 <_usb_d_dev_ep_stall_set+0x48>)
    b878:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b87a:	78fb      	ldrb	r3, [r7, #3]
    b87c:	2220      	movs	r2, #32
    b87e:	409a      	lsls	r2, r3
    b880:	7bfb      	ldrb	r3, [r7, #15]
    b882:	4611      	mov	r1, r2
    b884:	4618      	mov	r0, r3
    b886:	4b07      	ldr	r3, [pc, #28]	; (b8a4 <_usb_d_dev_ep_stall_set+0x4c>)
    b888:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    b88a:	687a      	ldr	r2, [r7, #4]
    b88c:	7cd3      	ldrb	r3, [r2, #19]
    b88e:	f043 0308 	orr.w	r3, r3, #8
    b892:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    b894:	2300      	movs	r3, #0
}
    b896:	4618      	mov	r0, r3
    b898:	3710      	adds	r7, #16
    b89a:	46bd      	mov	sp, r7
    b89c:	bd80      	pop	{r7, pc}
    b89e:	bf00      	nop
    b8a0:	00009ec1 	.word	0x00009ec1
    b8a4:	00009e41 	.word	0x00009e41

0000b8a8 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    b8a8:	b580      	push	{r7, lr}
    b8aa:	b084      	sub	sp, #16
    b8ac:	af00      	add	r7, sp, #0
    b8ae:	6078      	str	r0, [r7, #4]
    b8b0:	460b      	mov	r3, r1
    b8b2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    b8b4:	687b      	ldr	r3, [r7, #4]
    b8b6:	7c9b      	ldrb	r3, [r3, #18]
    b8b8:	f003 030f 	and.w	r3, r3, #15
    b8bc:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    b8be:	78fa      	ldrb	r2, [r7, #3]
    b8c0:	7bfb      	ldrb	r3, [r7, #15]
    b8c2:	4611      	mov	r1, r2
    b8c4:	4618      	mov	r0, r3
    b8c6:	4b28      	ldr	r3, [pc, #160]	; (b968 <_usb_d_dev_ep_stall_clr+0xc0>)
    b8c8:	4798      	blx	r3
    b8ca:	4603      	mov	r3, r0
    b8cc:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    b8ce:	7bbb      	ldrb	r3, [r7, #14]
    b8d0:	f083 0301 	eor.w	r3, r3, #1
    b8d4:	b2db      	uxtb	r3, r3
    b8d6:	2b00      	cmp	r3, #0
    b8d8:	d001      	beq.n	b8de <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    b8da:	2300      	movs	r3, #0
    b8dc:	e040      	b.n	b960 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    b8de:	78f9      	ldrb	r1, [r7, #3]
    b8e0:	7bfb      	ldrb	r3, [r7, #15]
    b8e2:	2200      	movs	r2, #0
    b8e4:	4618      	mov	r0, r3
    b8e6:	4b21      	ldr	r3, [pc, #132]	; (b96c <_usb_d_dev_ep_stall_clr+0xc4>)
    b8e8:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b8ea:	78fb      	ldrb	r3, [r7, #3]
    b8ec:	2220      	movs	r2, #32
    b8ee:	409a      	lsls	r2, r3
    b8f0:	7bfb      	ldrb	r3, [r7, #15]
    b8f2:	4611      	mov	r1, r2
    b8f4:	4618      	mov	r0, r3
    b8f6:	4b1e      	ldr	r3, [pc, #120]	; (b970 <_usb_d_dev_ep_stall_clr+0xc8>)
    b8f8:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b8fa:	78fa      	ldrb	r2, [r7, #3]
    b8fc:	7bfb      	ldrb	r3, [r7, #15]
    b8fe:	4611      	mov	r1, r2
    b900:	4618      	mov	r0, r3
    b902:	4b1c      	ldr	r3, [pc, #112]	; (b974 <_usb_d_dev_ep_stall_clr+0xcc>)
    b904:	4798      	blx	r3
    b906:	4603      	mov	r3, r0
    b908:	2b00      	cmp	r3, #0
    b90a:	d00b      	beq.n	b924 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b90c:	78fa      	ldrb	r2, [r7, #3]
    b90e:	7bfb      	ldrb	r3, [r7, #15]
    b910:	4611      	mov	r1, r2
    b912:	4618      	mov	r0, r3
    b914:	4b18      	ldr	r3, [pc, #96]	; (b978 <_usb_d_dev_ep_stall_clr+0xd0>)
    b916:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b918:	78f9      	ldrb	r1, [r7, #3]
    b91a:	7bfb      	ldrb	r3, [r7, #15]
    b91c:	2200      	movs	r2, #0
    b91e:	4618      	mov	r0, r3
    b920:	4b16      	ldr	r3, [pc, #88]	; (b97c <_usb_d_dev_ep_stall_clr+0xd4>)
    b922:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b924:	687b      	ldr	r3, [r7, #4]
    b926:	7cdb      	ldrb	r3, [r3, #19]
    b928:	f003 0307 	and.w	r3, r3, #7
    b92c:	b2db      	uxtb	r3, r3
    b92e:	2b01      	cmp	r3, #1
    b930:	d110      	bne.n	b954 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b932:	7bfb      	ldrb	r3, [r7, #15]
    b934:	4619      	mov	r1, r3
    b936:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b93a:	4b11      	ldr	r3, [pc, #68]	; (b980 <_usb_d_dev_ep_stall_clr+0xd8>)
    b93c:	4798      	blx	r3
    b93e:	4603      	mov	r3, r0
    b940:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b944:	2b00      	cmp	r3, #0
    b946:	d10a      	bne.n	b95e <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b948:	687a      	ldr	r2, [r7, #4]
    b94a:	7cd3      	ldrb	r3, [r2, #19]
    b94c:	f36f 03c3 	bfc	r3, #3, #1
    b950:	74d3      	strb	r3, [r2, #19]
    b952:	e004      	b.n	b95e <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b954:	687a      	ldr	r2, [r7, #4]
    b956:	7cd3      	ldrb	r3, [r2, #19]
    b958:	f36f 03c3 	bfc	r3, #3, #1
    b95c:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b95e:	2300      	movs	r3, #0
}
    b960:	4618      	mov	r0, r3
    b962:	3710      	adds	r7, #16
    b964:	46bd      	mov	sp, r7
    b966:	bd80      	pop	{r7, pc}
    b968:	00009f19 	.word	0x00009f19
    b96c:	00009ec1 	.word	0x00009ec1
    b970:	00009e69 	.word	0x00009e69
    b974:	00009f5d 	.word	0x00009f5d
    b978:	00009fa1 	.word	0x00009fa1
    b97c:	0000a08d 	.word	0x0000a08d
    b980:	00009949 	.word	0x00009949

0000b984 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b984:	b580      	push	{r7, lr}
    b986:	b086      	sub	sp, #24
    b988:	af00      	add	r7, sp, #0
    b98a:	4603      	mov	r3, r0
    b98c:	460a      	mov	r2, r1
    b98e:	71fb      	strb	r3, [r7, #7]
    b990:	4613      	mov	r3, r2
    b992:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b994:	79fb      	ldrb	r3, [r7, #7]
    b996:	f003 030f 	and.w	r3, r3, #15
    b99a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b99c:	79fb      	ldrb	r3, [r7, #7]
    b99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b9a2:	2b00      	cmp	r3, #0
    b9a4:	bf14      	ite	ne
    b9a6:	2301      	movne	r3, #1
    b9a8:	2300      	moveq	r3, #0
    b9aa:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b9ac:	7cba      	ldrb	r2, [r7, #18]
    b9ae:	7cfb      	ldrb	r3, [r7, #19]
    b9b0:	4611      	mov	r1, r2
    b9b2:	4618      	mov	r0, r3
    b9b4:	4b13      	ldr	r3, [pc, #76]	; (ba04 <_usb_d_dev_ep_stall+0x80>)
    b9b6:	4798      	blx	r3
    b9b8:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b9ba:	7cfb      	ldrb	r3, [r7, #19]
    b9bc:	2b04      	cmp	r3, #4
    b9be:	d902      	bls.n	b9c6 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b9c0:	f06f 0311 	mvn.w	r3, #17
    b9c4:	e01a      	b.n	b9fc <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b9c6:	79bb      	ldrb	r3, [r7, #6]
    b9c8:	2b01      	cmp	r3, #1
    b9ca:	d106      	bne.n	b9da <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b9cc:	7cbb      	ldrb	r3, [r7, #18]
    b9ce:	4619      	mov	r1, r3
    b9d0:	68f8      	ldr	r0, [r7, #12]
    b9d2:	4b0d      	ldr	r3, [pc, #52]	; (ba08 <_usb_d_dev_ep_stall+0x84>)
    b9d4:	4798      	blx	r3
    b9d6:	6178      	str	r0, [r7, #20]
    b9d8:	e00f      	b.n	b9fa <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b9da:	79bb      	ldrb	r3, [r7, #6]
    b9dc:	2b00      	cmp	r3, #0
    b9de:	d106      	bne.n	b9ee <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b9e0:	7cbb      	ldrb	r3, [r7, #18]
    b9e2:	4619      	mov	r1, r3
    b9e4:	68f8      	ldr	r0, [r7, #12]
    b9e6:	4b09      	ldr	r3, [pc, #36]	; (ba0c <_usb_d_dev_ep_stall+0x88>)
    b9e8:	4798      	blx	r3
    b9ea:	6178      	str	r0, [r7, #20]
    b9ec:	e005      	b.n	b9fa <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b9ee:	7cbb      	ldrb	r3, [r7, #18]
    b9f0:	4619      	mov	r1, r3
    b9f2:	68f8      	ldr	r0, [r7, #12]
    b9f4:	4b06      	ldr	r3, [pc, #24]	; (ba10 <_usb_d_dev_ep_stall+0x8c>)
    b9f6:	4798      	blx	r3
    b9f8:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b9fa:	697b      	ldr	r3, [r7, #20]
}
    b9fc:	4618      	mov	r0, r3
    b9fe:	3718      	adds	r7, #24
    ba00:	46bd      	mov	sp, r7
    ba02:	bd80      	pop	{r7, pc}
    ba04:	0000a425 	.word	0x0000a425
    ba08:	0000b859 	.word	0x0000b859
    ba0c:	0000b8a9 	.word	0x0000b8a9
    ba10:	0000b829 	.word	0x0000b829

0000ba14 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    ba14:	b580      	push	{r7, lr}
    ba16:	b082      	sub	sp, #8
    ba18:	af00      	add	r7, sp, #0
    ba1a:	6078      	str	r0, [r7, #4]
    ba1c:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    ba1e:	687b      	ldr	r3, [r7, #4]
    ba20:	7c9b      	ldrb	r3, [r3, #18]
    ba22:	2bff      	cmp	r3, #255	; 0xff
    ba24:	d014      	beq.n	ba50 <_usb_d_dev_trans_done+0x3c>
    ba26:	687b      	ldr	r3, [r7, #4]
    ba28:	7cdb      	ldrb	r3, [r3, #19]
    ba2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ba2e:	b2db      	uxtb	r3, r3
    ba30:	2b00      	cmp	r3, #0
    ba32:	d00d      	beq.n	ba50 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    ba34:	687a      	ldr	r2, [r7, #4]
    ba36:	7cd3      	ldrb	r3, [r2, #19]
    ba38:	f36f 1386 	bfc	r3, #6, #1
    ba3c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    ba3e:	4b06      	ldr	r3, [pc, #24]	; (ba58 <_usb_d_dev_trans_done+0x44>)
    ba40:	691b      	ldr	r3, [r3, #16]
    ba42:	687a      	ldr	r2, [r7, #4]
    ba44:	7c90      	ldrb	r0, [r2, #18]
    ba46:	687a      	ldr	r2, [r7, #4]
    ba48:	6892      	ldr	r2, [r2, #8]
    ba4a:	6839      	ldr	r1, [r7, #0]
    ba4c:	4798      	blx	r3
    ba4e:	e000      	b.n	ba52 <_usb_d_dev_trans_done+0x3e>
		return;
    ba50:	bf00      	nop
}
    ba52:	3708      	adds	r7, #8
    ba54:	46bd      	mov	sp, r7
    ba56:	bd80      	pop	{r7, pc}
    ba58:	20000c38 	.word	0x20000c38

0000ba5c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    ba5c:	b580      	push	{r7, lr}
    ba5e:	b086      	sub	sp, #24
    ba60:	af00      	add	r7, sp, #0
    ba62:	60f8      	str	r0, [r7, #12]
    ba64:	460b      	mov	r3, r1
    ba66:	607a      	str	r2, [r7, #4]
    ba68:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ba6a:	68fb      	ldr	r3, [r7, #12]
    ba6c:	7c9b      	ldrb	r3, [r3, #18]
    ba6e:	f003 030f 	and.w	r3, r3, #15
    ba72:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    ba74:	4b1f      	ldr	r3, [pc, #124]	; (baf4 <_usb_d_dev_trans_stop+0x98>)
    ba76:	881b      	ldrh	r3, [r3, #0]
    ba78:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    ba7a:	68fb      	ldr	r3, [r7, #12]
    ba7c:	7c9b      	ldrb	r3, [r3, #18]
    ba7e:	2bff      	cmp	r3, #255	; 0xff
    ba80:	d033      	beq.n	baea <_usb_d_dev_trans_stop+0x8e>
    ba82:	68fb      	ldr	r3, [r7, #12]
    ba84:	7cdb      	ldrb	r3, [r3, #19]
    ba86:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ba8a:	b2db      	uxtb	r3, r3
    ba8c:	2b00      	cmp	r3, #0
    ba8e:	d02c      	beq.n	baea <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    ba90:	7afb      	ldrb	r3, [r7, #11]
    ba92:	2b00      	cmp	r3, #0
    ba94:	d006      	beq.n	baa4 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    ba96:	7dfb      	ldrb	r3, [r7, #23]
    ba98:	2200      	movs	r2, #0
    ba9a:	2101      	movs	r1, #1
    ba9c:	4618      	mov	r0, r3
    ba9e:	4b16      	ldr	r3, [pc, #88]	; (baf8 <_usb_d_dev_trans_stop+0x9c>)
    baa0:	4798      	blx	r3
    baa2:	e005      	b.n	bab0 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    baa4:	7dfb      	ldrb	r3, [r7, #23]
    baa6:	2200      	movs	r2, #0
    baa8:	2100      	movs	r1, #0
    baaa:	4618      	mov	r0, r3
    baac:	4b13      	ldr	r3, [pc, #76]	; (bafc <_usb_d_dev_trans_stop+0xa0>)
    baae:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    bab0:	7afb      	ldrb	r3, [r7, #11]
    bab2:	f107 0218 	add.w	r2, r7, #24
    bab6:	4413      	add	r3, r2
    bab8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    babc:	461a      	mov	r2, r3
    babe:	7dfb      	ldrb	r3, [r7, #23]
    bac0:	4611      	mov	r1, r2
    bac2:	4618      	mov	r0, r3
    bac4:	4b0e      	ldr	r3, [pc, #56]	; (bb00 <_usb_d_dev_trans_stop+0xa4>)
    bac6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    bac8:	7afb      	ldrb	r3, [r7, #11]
    baca:	f107 0218 	add.w	r2, r7, #24
    bace:	4413      	add	r3, r2
    bad0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    bad4:	461a      	mov	r2, r3
    bad6:	7dfb      	ldrb	r3, [r7, #23]
    bad8:	4611      	mov	r1, r2
    bada:	4618      	mov	r0, r3
    badc:	4b09      	ldr	r3, [pc, #36]	; (bb04 <_usb_d_dev_trans_stop+0xa8>)
    bade:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    bae0:	6879      	ldr	r1, [r7, #4]
    bae2:	68f8      	ldr	r0, [r7, #12]
    bae4:	4b08      	ldr	r3, [pc, #32]	; (bb08 <_usb_d_dev_trans_stop+0xac>)
    bae6:	4798      	blx	r3
    bae8:	e000      	b.n	baec <_usb_d_dev_trans_stop+0x90>
		return;
    baea:	bf00      	nop
}
    baec:	3718      	adds	r7, #24
    baee:	46bd      	mov	sp, r7
    baf0:	bd80      	pop	{r7, pc}
    baf2:	bf00      	nop
    baf4:	00010f54 	.word	0x00010f54
    baf8:	0000a311 	.word	0x0000a311
    bafc:	0000a369 	.word	0x0000a369
    bb00:	00009e19 	.word	0x00009e19
    bb04:	00009e69 	.word	0x00009e69
    bb08:	0000ba15 	.word	0x0000ba15

0000bb0c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    bb0c:	b580      	push	{r7, lr}
    bb0e:	b086      	sub	sp, #24
    bb10:	af00      	add	r7, sp, #0
    bb12:	4603      	mov	r3, r0
    bb14:	6039      	str	r1, [r7, #0]
    bb16:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    bb18:	79fb      	ldrb	r3, [r7, #7]
    bb1a:	f003 030f 	and.w	r3, r3, #15
    bb1e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    bb20:	7dfb      	ldrb	r3, [r7, #23]
    bb22:	015b      	lsls	r3, r3, #5
    bb24:	4a1e      	ldr	r2, [pc, #120]	; (bba0 <_usb_d_dev_ep_read_req+0x94>)
    bb26:	4413      	add	r3, r2
    bb28:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    bb2a:	693b      	ldr	r3, [r7, #16]
    bb2c:	681b      	ldr	r3, [r3, #0]
    bb2e:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    bb30:	693b      	ldr	r3, [r7, #16]
    bb32:	685b      	ldr	r3, [r3, #4]
    bb34:	f3c3 030d 	ubfx	r3, r3, #0, #14
    bb38:	b29b      	uxth	r3, r3
    bb3a:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    bb3c:	7dfb      	ldrb	r3, [r7, #23]
    bb3e:	2b04      	cmp	r3, #4
    bb40:	d802      	bhi.n	bb48 <_usb_d_dev_ep_read_req+0x3c>
    bb42:	683b      	ldr	r3, [r7, #0]
    bb44:	2b00      	cmp	r3, #0
    bb46:	d102      	bne.n	bb4e <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    bb48:	f06f 0311 	mvn.w	r3, #17
    bb4c:	e023      	b.n	bb96 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    bb4e:	7dfb      	ldrb	r3, [r7, #23]
    bb50:	4618      	mov	r0, r3
    bb52:	4b14      	ldr	r3, [pc, #80]	; (bba4 <_usb_d_dev_ep_read_req+0x98>)
    bb54:	4798      	blx	r3
    bb56:	4603      	mov	r3, r0
    bb58:	f083 0301 	eor.w	r3, r3, #1
    bb5c:	b2db      	uxtb	r3, r3
    bb5e:	2b00      	cmp	r3, #0
    bb60:	d002      	beq.n	bb68 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    bb62:	f06f 0312 	mvn.w	r3, #18
    bb66:	e016      	b.n	bb96 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    bb68:	7dfb      	ldrb	r3, [r7, #23]
    bb6a:	4618      	mov	r0, r3
    bb6c:	4b0e      	ldr	r3, [pc, #56]	; (bba8 <_usb_d_dev_ep_read_req+0x9c>)
    bb6e:	4798      	blx	r3
    bb70:	4603      	mov	r3, r0
    bb72:	f083 0301 	eor.w	r3, r3, #1
    bb76:	b2db      	uxtb	r3, r3
    bb78:	2b00      	cmp	r3, #0
    bb7a:	d001      	beq.n	bb80 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    bb7c:	2300      	movs	r3, #0
    bb7e:	e00a      	b.n	bb96 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    bb80:	68fb      	ldr	r3, [r7, #12]
    bb82:	2208      	movs	r2, #8
    bb84:	4619      	mov	r1, r3
    bb86:	6838      	ldr	r0, [r7, #0]
    bb88:	4b08      	ldr	r3, [pc, #32]	; (bbac <_usb_d_dev_ep_read_req+0xa0>)
    bb8a:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    bb8c:	7dfb      	ldrb	r3, [r7, #23]
    bb8e:	4618      	mov	r0, r3
    bb90:	4b07      	ldr	r3, [pc, #28]	; (bbb0 <_usb_d_dev_ep_read_req+0xa4>)
    bb92:	4798      	blx	r3

	return bytes;
    bb94:	897b      	ldrh	r3, [r7, #10]
}
    bb96:	4618      	mov	r0, r3
    bb98:	3718      	adds	r7, #24
    bb9a:	46bd      	mov	sp, r7
    bb9c:	bd80      	pop	{r7, pc}
    bb9e:	bf00      	nop
    bba0:	20000d00 	.word	0x20000d00
    bba4:	00009e91 	.word	0x00009e91
    bba8:	0000a03d 	.word	0x0000a03d
    bbac:	000107c9 	.word	0x000107c9
    bbb0:	0000a06d 	.word	0x0000a06d

0000bbb4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    bbb4:	b580      	push	{r7, lr}
    bbb6:	b086      	sub	sp, #24
    bbb8:	af00      	add	r7, sp, #0
    bbba:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    bbbc:	687b      	ldr	r3, [r7, #4]
    bbbe:	7a1b      	ldrb	r3, [r3, #8]
    bbc0:	f003 030f 	and.w	r3, r3, #15
    bbc4:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    bbc6:	687b      	ldr	r3, [r7, #4]
    bbc8:	7a1b      	ldrb	r3, [r3, #8]
    bbca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bbce:	2b00      	cmp	r3, #0
    bbd0:	bf14      	ite	ne
    bbd2:	2301      	movne	r3, #1
    bbd4:	2300      	moveq	r3, #0
    bbd6:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    bbd8:	7d7a      	ldrb	r2, [r7, #21]
    bbda:	7dbb      	ldrb	r3, [r7, #22]
    bbdc:	4611      	mov	r1, r2
    bbde:	4618      	mov	r0, r3
    bbe0:	4b5f      	ldr	r3, [pc, #380]	; (bd60 <_usb_d_dev_ep_trans+0x1ac>)
    bbe2:	4798      	blx	r3
    bbe4:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    bbe6:	693b      	ldr	r3, [r7, #16]
    bbe8:	8a1b      	ldrh	r3, [r3, #16]
    bbea:	f240 32ff 	movw	r2, #1023	; 0x3ff
    bbee:	4293      	cmp	r3, r2
    bbf0:	d004      	beq.n	bbfc <_usb_d_dev_ep_trans+0x48>
    bbf2:	693b      	ldr	r3, [r7, #16]
    bbf4:	8a1b      	ldrh	r3, [r3, #16]
    bbf6:	3b01      	subs	r3, #1
    bbf8:	b29b      	uxth	r3, r3
    bbfa:	e001      	b.n	bc00 <_usb_d_dev_ep_trans+0x4c>
    bbfc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    bc00:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    bc02:	687b      	ldr	r3, [r7, #4]
    bc04:	685a      	ldr	r2, [r3, #4]
    bc06:	89fb      	ldrh	r3, [r7, #14]
    bc08:	4013      	ands	r3, r2
    bc0a:	2b00      	cmp	r3, #0
    bc0c:	bf14      	ite	ne
    bc0e:	2301      	movne	r3, #1
    bc10:	2300      	moveq	r3, #0
    bc12:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    bc14:	2300      	movs	r3, #0
    bc16:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    bc18:	7dbb      	ldrb	r3, [r7, #22]
    bc1a:	2b04      	cmp	r3, #4
    bc1c:	d902      	bls.n	bc24 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    bc1e:	f06f 0311 	mvn.w	r3, #17
    bc22:	e098      	b.n	bd56 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    bc24:	687b      	ldr	r3, [r7, #4]
    bc26:	681b      	ldr	r3, [r3, #0]
    bc28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    bc2c:	d31a      	bcc.n	bc64 <_usb_d_dev_ep_trans+0xb0>
    bc2e:	687b      	ldr	r3, [r7, #4]
    bc30:	681b      	ldr	r3, [r3, #0]
    bc32:	461a      	mov	r2, r3
    bc34:	687b      	ldr	r3, [r7, #4]
    bc36:	685b      	ldr	r3, [r3, #4]
    bc38:	4413      	add	r3, r2
    bc3a:	4a4a      	ldr	r2, [pc, #296]	; (bd64 <_usb_d_dev_ep_trans+0x1b0>)
    bc3c:	4293      	cmp	r3, r2
    bc3e:	d811      	bhi.n	bc64 <_usb_d_dev_ep_trans+0xb0>
    bc40:	687b      	ldr	r3, [r7, #4]
    bc42:	681b      	ldr	r3, [r3, #0]
    bc44:	f003 0303 	and.w	r3, r3, #3
    bc48:	2b00      	cmp	r3, #0
    bc4a:	d10b      	bne.n	bc64 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    bc4c:	7d7b      	ldrb	r3, [r7, #21]
    bc4e:	f083 0301 	eor.w	r3, r3, #1
    bc52:	b2db      	uxtb	r3, r3
    bc54:	2b00      	cmp	r3, #0
    bc56:	d00e      	beq.n	bc76 <_usb_d_dev_ep_trans+0xc2>
    bc58:	687b      	ldr	r3, [r7, #4]
    bc5a:	685b      	ldr	r3, [r3, #4]
    bc5c:	693a      	ldr	r2, [r7, #16]
    bc5e:	8a12      	ldrh	r2, [r2, #16]
    bc60:	4293      	cmp	r3, r2
    bc62:	d208      	bcs.n	bc76 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    bc64:	693b      	ldr	r3, [r7, #16]
    bc66:	68db      	ldr	r3, [r3, #12]
    bc68:	2b00      	cmp	r3, #0
    bc6a:	d102      	bne.n	bc72 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    bc6c:	f06f 0312 	mvn.w	r3, #18
    bc70:	e071      	b.n	bd56 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    bc72:	2301      	movs	r3, #1
    bc74:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    bc76:	7d7b      	ldrb	r3, [r7, #21]
    bc78:	f083 0301 	eor.w	r3, r3, #1
    bc7c:	b2db      	uxtb	r3, r3
    bc7e:	2b00      	cmp	r3, #0
    bc80:	d009      	beq.n	bc96 <_usb_d_dev_ep_trans+0xe2>
    bc82:	7b7b      	ldrb	r3, [r7, #13]
    bc84:	2b00      	cmp	r3, #0
    bc86:	d006      	beq.n	bc96 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    bc88:	693b      	ldr	r3, [r7, #16]
    bc8a:	68db      	ldr	r3, [r3, #12]
    bc8c:	2b00      	cmp	r3, #0
    bc8e:	d102      	bne.n	bc96 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    bc90:	f06f 0311 	mvn.w	r3, #17
    bc94:	e05f      	b.n	bd56 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    bc96:	693b      	ldr	r3, [r7, #16]
    bc98:	7cdb      	ldrb	r3, [r3, #19]
    bc9a:	f003 0308 	and.w	r3, r3, #8
    bc9e:	b2db      	uxtb	r3, r3
    bca0:	2b00      	cmp	r3, #0
    bca2:	d001      	beq.n	bca8 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    bca4:	2302      	movs	r3, #2
    bca6:	e056      	b.n	bd56 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    bca8:	f107 0308 	add.w	r3, r7, #8
    bcac:	4618      	mov	r0, r3
    bcae:	4b2e      	ldr	r3, [pc, #184]	; (bd68 <_usb_d_dev_ep_trans+0x1b4>)
    bcb0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    bcb2:	693b      	ldr	r3, [r7, #16]
    bcb4:	7cdb      	ldrb	r3, [r3, #19]
    bcb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bcba:	b2db      	uxtb	r3, r3
    bcbc:	2b00      	cmp	r3, #0
    bcbe:	d006      	beq.n	bcce <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    bcc0:	f107 0308 	add.w	r3, r7, #8
    bcc4:	4618      	mov	r0, r3
    bcc6:	4b29      	ldr	r3, [pc, #164]	; (bd6c <_usb_d_dev_ep_trans+0x1b8>)
    bcc8:	4798      	blx	r3
		return USB_BUSY;
    bcca:	2301      	movs	r3, #1
    bccc:	e043      	b.n	bd56 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    bcce:	693a      	ldr	r2, [r7, #16]
    bcd0:	7cd3      	ldrb	r3, [r2, #19]
    bcd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bcd6:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    bcd8:	f107 0308 	add.w	r3, r7, #8
    bcdc:	4618      	mov	r0, r3
    bcde:	4b23      	ldr	r3, [pc, #140]	; (bd6c <_usb_d_dev_ep_trans+0x1b8>)
    bce0:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    bce2:	687b      	ldr	r3, [r7, #4]
    bce4:	681a      	ldr	r2, [r3, #0]
    bce6:	693b      	ldr	r3, [r7, #16]
    bce8:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    bcea:	687b      	ldr	r3, [r7, #4]
    bcec:	685a      	ldr	r2, [r3, #4]
    bcee:	693b      	ldr	r3, [r7, #16]
    bcf0:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    bcf2:	693b      	ldr	r3, [r7, #16]
    bcf4:	2200      	movs	r2, #0
    bcf6:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    bcf8:	693a      	ldr	r2, [r7, #16]
    bcfa:	7cd3      	ldrb	r3, [r2, #19]
    bcfc:	7d79      	ldrb	r1, [r7, #21]
    bcfe:	f361 13c7 	bfi	r3, r1, #7, #1
    bd02:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    bd04:	693a      	ldr	r2, [r7, #16]
    bd06:	7cd3      	ldrb	r3, [r2, #19]
    bd08:	7df9      	ldrb	r1, [r7, #23]
    bd0a:	f361 1345 	bfi	r3, r1, #5, #1
    bd0e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    bd10:	687b      	ldr	r3, [r7, #4]
    bd12:	7a5b      	ldrb	r3, [r3, #9]
    bd14:	2b00      	cmp	r3, #0
    bd16:	d007      	beq.n	bd28 <_usb_d_dev_ep_trans+0x174>
    bd18:	7b7b      	ldrb	r3, [r7, #13]
    bd1a:	f083 0301 	eor.w	r3, r3, #1
    bd1e:	b2db      	uxtb	r3, r3
    bd20:	2b00      	cmp	r3, #0
    bd22:	d001      	beq.n	bd28 <_usb_d_dev_ep_trans+0x174>
    bd24:	2301      	movs	r3, #1
    bd26:	e000      	b.n	bd2a <_usb_d_dev_ep_trans+0x176>
    bd28:	2300      	movs	r3, #0
    bd2a:	b2db      	uxtb	r3, r3
    bd2c:	f003 0301 	and.w	r3, r3, #1
    bd30:	b2d9      	uxtb	r1, r3
    bd32:	693a      	ldr	r2, [r7, #16]
    bd34:	7cd3      	ldrb	r3, [r2, #19]
    bd36:	f361 1304 	bfi	r3, r1, #4, #1
    bd3a:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    bd3c:	7d7b      	ldrb	r3, [r7, #21]
    bd3e:	2b00      	cmp	r3, #0
    bd40:	d004      	beq.n	bd4c <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    bd42:	2100      	movs	r1, #0
    bd44:	6938      	ldr	r0, [r7, #16]
    bd46:	4b0a      	ldr	r3, [pc, #40]	; (bd70 <_usb_d_dev_ep_trans+0x1bc>)
    bd48:	4798      	blx	r3
    bd4a:	e003      	b.n	bd54 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    bd4c:	2100      	movs	r1, #0
    bd4e:	6938      	ldr	r0, [r7, #16]
    bd50:	4b08      	ldr	r3, [pc, #32]	; (bd74 <_usb_d_dev_ep_trans+0x1c0>)
    bd52:	4798      	blx	r3
	}

	return ERR_NONE;
    bd54:	2300      	movs	r3, #0
}
    bd56:	4618      	mov	r0, r3
    bd58:	3718      	adds	r7, #24
    bd5a:	46bd      	mov	sp, r7
    bd5c:	bd80      	pop	{r7, pc}
    bd5e:	bf00      	nop
    bd60:	0000a425 	.word	0x0000a425
    bd64:	20041fff 	.word	0x20041fff
    bd68:	0000329d 	.word	0x0000329d
    bd6c:	000032c3 	.word	0x000032c3
    bd70:	0000a6ed 	.word	0x0000a6ed
    bd74:	0000a905 	.word	0x0000a905

0000bd78 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    bd78:	b580      	push	{r7, lr}
    bd7a:	b084      	sub	sp, #16
    bd7c:	af00      	add	r7, sp, #0
    bd7e:	4603      	mov	r3, r0
    bd80:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    bd82:	79fb      	ldrb	r3, [r7, #7]
    bd84:	f003 030f 	and.w	r3, r3, #15
    bd88:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    bd8a:	79fb      	ldrb	r3, [r7, #7]
    bd8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bd90:	2b00      	cmp	r3, #0
    bd92:	bf14      	ite	ne
    bd94:	2301      	movne	r3, #1
    bd96:	2300      	moveq	r3, #0
    bd98:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    bd9a:	7bba      	ldrb	r2, [r7, #14]
    bd9c:	7bfb      	ldrb	r3, [r7, #15]
    bd9e:	4611      	mov	r1, r2
    bda0:	4618      	mov	r0, r3
    bda2:	4b08      	ldr	r3, [pc, #32]	; (bdc4 <_usb_d_dev_ep_abort+0x4c>)
    bda4:	4798      	blx	r3
    bda6:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    bda8:	7bfb      	ldrb	r3, [r7, #15]
    bdaa:	2b04      	cmp	r3, #4
    bdac:	d806      	bhi.n	bdbc <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    bdae:	7bbb      	ldrb	r3, [r7, #14]
    bdb0:	2202      	movs	r2, #2
    bdb2:	4619      	mov	r1, r3
    bdb4:	68b8      	ldr	r0, [r7, #8]
    bdb6:	4b04      	ldr	r3, [pc, #16]	; (bdc8 <_usb_d_dev_ep_abort+0x50>)
    bdb8:	4798      	blx	r3
    bdba:	e000      	b.n	bdbe <_usb_d_dev_ep_abort+0x46>
		return;
    bdbc:	bf00      	nop
}
    bdbe:	3710      	adds	r7, #16
    bdc0:	46bd      	mov	sp, r7
    bdc2:	bd80      	pop	{r7, pc}
    bdc4:	0000a425 	.word	0x0000a425
    bdc8:	0000ba5d 	.word	0x0000ba5d

0000bdcc <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    bdcc:	b480      	push	{r7}
    bdce:	b085      	sub	sp, #20
    bdd0:	af00      	add	r7, sp, #0
    bdd2:	4603      	mov	r3, r0
    bdd4:	6039      	str	r1, [r7, #0]
    bdd6:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    bdd8:	683b      	ldr	r3, [r7, #0]
    bdda:	2b00      	cmp	r3, #0
    bddc:	d001      	beq.n	bde2 <_usb_d_dev_register_callback+0x16>
    bdde:	683b      	ldr	r3, [r7, #0]
    bde0:	e000      	b.n	bde4 <_usb_d_dev_register_callback+0x18>
    bde2:	4b0a      	ldr	r3, [pc, #40]	; (be0c <_usb_d_dev_register_callback+0x40>)
    bde4:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    bde6:	79fb      	ldrb	r3, [r7, #7]
    bde8:	2b01      	cmp	r3, #1
    bdea:	d103      	bne.n	bdf4 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    bdec:	4a08      	ldr	r2, [pc, #32]	; (be10 <_usb_d_dev_register_callback+0x44>)
    bdee:	68fb      	ldr	r3, [r7, #12]
    bdf0:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    bdf2:	e005      	b.n	be00 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    bdf4:	79fb      	ldrb	r3, [r7, #7]
    bdf6:	2b00      	cmp	r3, #0
    bdf8:	d102      	bne.n	be00 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    bdfa:	4a05      	ldr	r2, [pc, #20]	; (be10 <_usb_d_dev_register_callback+0x44>)
    bdfc:	68fb      	ldr	r3, [r7, #12]
    bdfe:	6013      	str	r3, [r2, #0]
}
    be00:	bf00      	nop
    be02:	3714      	adds	r7, #20
    be04:	46bd      	mov	sp, r7
    be06:	f85d 7b04 	ldr.w	r7, [sp], #4
    be0a:	4770      	bx	lr
    be0c:	00009cad 	.word	0x00009cad
    be10:	20000c38 	.word	0x20000c38

0000be14 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    be14:	b480      	push	{r7}
    be16:	b085      	sub	sp, #20
    be18:	af00      	add	r7, sp, #0
    be1a:	4603      	mov	r3, r0
    be1c:	6039      	str	r1, [r7, #0]
    be1e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    be20:	683b      	ldr	r3, [r7, #0]
    be22:	2b00      	cmp	r3, #0
    be24:	d001      	beq.n	be2a <_usb_d_dev_register_ep_callback+0x16>
    be26:	683b      	ldr	r3, [r7, #0]
    be28:	e000      	b.n	be2c <_usb_d_dev_register_ep_callback+0x18>
    be2a:	4b0e      	ldr	r3, [pc, #56]	; (be64 <_usb_d_dev_register_ep_callback+0x50>)
    be2c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    be2e:	79fb      	ldrb	r3, [r7, #7]
    be30:	2b00      	cmp	r3, #0
    be32:	d103      	bne.n	be3c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    be34:	4a0c      	ldr	r2, [pc, #48]	; (be68 <_usb_d_dev_register_ep_callback+0x54>)
    be36:	68fb      	ldr	r3, [r7, #12]
    be38:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    be3a:	e00c      	b.n	be56 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    be3c:	79fb      	ldrb	r3, [r7, #7]
    be3e:	2b01      	cmp	r3, #1
    be40:	d103      	bne.n	be4a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    be42:	4a09      	ldr	r2, [pc, #36]	; (be68 <_usb_d_dev_register_ep_callback+0x54>)
    be44:	68fb      	ldr	r3, [r7, #12]
    be46:	60d3      	str	r3, [r2, #12]
}
    be48:	e005      	b.n	be56 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    be4a:	79fb      	ldrb	r3, [r7, #7]
    be4c:	2b02      	cmp	r3, #2
    be4e:	d102      	bne.n	be56 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    be50:	4a05      	ldr	r2, [pc, #20]	; (be68 <_usb_d_dev_register_ep_callback+0x54>)
    be52:	68fb      	ldr	r3, [r7, #12]
    be54:	6113      	str	r3, [r2, #16]
}
    be56:	bf00      	nop
    be58:	3714      	adds	r7, #20
    be5a:	46bd      	mov	sp, r7
    be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    be60:	4770      	bx	lr
    be62:	bf00      	nop
    be64:	00009cad 	.word	0x00009cad
    be68:	20000c38 	.word	0x20000c38

0000be6c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    be6c:	b580      	push	{r7, lr}
    be6e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    be70:	4b01      	ldr	r3, [pc, #4]	; (be78 <USB_0_Handler+0xc>)
    be72:	4798      	blx	r3
}
    be74:	bf00      	nop
    be76:	bd80      	pop	{r7, pc}
    be78:	0000b0dd 	.word	0x0000b0dd

0000be7c <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    be7c:	b580      	push	{r7, lr}
    be7e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    be80:	4b01      	ldr	r3, [pc, #4]	; (be88 <USB_1_Handler+0xc>)
    be82:	4798      	blx	r3
}
    be84:	bf00      	nop
    be86:	bd80      	pop	{r7, pc}
    be88:	0000b0dd 	.word	0x0000b0dd

0000be8c <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    be8c:	b580      	push	{r7, lr}
    be8e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    be90:	4b01      	ldr	r3, [pc, #4]	; (be98 <USB_2_Handler+0xc>)
    be92:	4798      	blx	r3
}
    be94:	bf00      	nop
    be96:	bd80      	pop	{r7, pc}
    be98:	0000b0dd 	.word	0x0000b0dd

0000be9c <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    be9c:	b580      	push	{r7, lr}
    be9e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    bea0:	4b01      	ldr	r3, [pc, #4]	; (bea8 <USB_3_Handler+0xc>)
    bea2:	4798      	blx	r3
}
    bea4:	bf00      	nop
    bea6:	bd80      	pop	{r7, pc}
    bea8:	0000b0dd 	.word	0x0000b0dd

0000beac <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    beac:	b480      	push	{r7}
    beae:	b083      	sub	sp, #12
    beb0:	af00      	add	r7, sp, #0
    beb2:	6078      	str	r0, [r7, #4]
    beb4:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    beb6:	bf00      	nop
    beb8:	687b      	ldr	r3, [r7, #4]
    beba:	689a      	ldr	r2, [r3, #8]
    bebc:	683b      	ldr	r3, [r7, #0]
    bebe:	4013      	ands	r3, r2
    bec0:	2b00      	cmp	r3, #0
    bec2:	d1f9      	bne.n	beb8 <hri_wdt_wait_for_sync+0xc>
	};
}
    bec4:	bf00      	nop
    bec6:	370c      	adds	r7, #12
    bec8:	46bd      	mov	sp, r7
    beca:	f85d 7b04 	ldr.w	r7, [sp], #4
    bece:	4770      	bx	lr

0000bed0 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    bed0:	b580      	push	{r7, lr}
    bed2:	b084      	sub	sp, #16
    bed4:	af00      	add	r7, sp, #0
    bed6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    bed8:	210e      	movs	r1, #14
    beda:	6878      	ldr	r0, [r7, #4]
    bedc:	4b0a      	ldr	r3, [pc, #40]	; (bf08 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    bede:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    bee0:	687b      	ldr	r3, [r7, #4]
    bee2:	781b      	ldrb	r3, [r3, #0]
    bee4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    bee6:	7bfb      	ldrb	r3, [r7, #15]
    bee8:	085b      	lsrs	r3, r3, #1
    beea:	b2db      	uxtb	r3, r3
    beec:	f003 0301 	and.w	r3, r3, #1
    bef0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    bef2:	7bfb      	ldrb	r3, [r7, #15]
    bef4:	2b00      	cmp	r3, #0
    bef6:	bf14      	ite	ne
    bef8:	2301      	movne	r3, #1
    befa:	2300      	moveq	r3, #0
    befc:	b2db      	uxtb	r3, r3
}
    befe:	4618      	mov	r0, r3
    bf00:	3710      	adds	r7, #16
    bf02:	46bd      	mov	sp, r7
    bf04:	bd80      	pop	{r7, pc}
    bf06:	bf00      	nop
    bf08:	0000bead 	.word	0x0000bead

0000bf0c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    bf0c:	b580      	push	{r7, lr}
    bf0e:	b082      	sub	sp, #8
    bf10:	af00      	add	r7, sp, #0
    bf12:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    bf14:	687b      	ldr	r3, [r7, #4]
    bf16:	781b      	ldrb	r3, [r3, #0]
    bf18:	b2db      	uxtb	r3, r3
    bf1a:	f023 0304 	bic.w	r3, r3, #4
    bf1e:	b2da      	uxtb	r2, r3
    bf20:	687b      	ldr	r3, [r7, #4]
    bf22:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    bf24:	210e      	movs	r1, #14
    bf26:	6878      	ldr	r0, [r7, #4]
    bf28:	4b02      	ldr	r3, [pc, #8]	; (bf34 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    bf2a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    bf2c:	bf00      	nop
    bf2e:	3708      	adds	r7, #8
    bf30:	46bd      	mov	sp, r7
    bf32:	bd80      	pop	{r7, pc}
    bf34:	0000bead 	.word	0x0000bead

0000bf38 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    bf38:	b580      	push	{r7, lr}
    bf3a:	b084      	sub	sp, #16
    bf3c:	af00      	add	r7, sp, #0
    bf3e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    bf40:	210e      	movs	r1, #14
    bf42:	6878      	ldr	r0, [r7, #4]
    bf44:	4b08      	ldr	r3, [pc, #32]	; (bf68 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    bf46:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    bf48:	687b      	ldr	r3, [r7, #4]
    bf4a:	781b      	ldrb	r3, [r3, #0]
    bf4c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    bf4e:	7bfb      	ldrb	r3, [r7, #15]
    bf50:	09db      	lsrs	r3, r3, #7
    bf52:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    bf54:	7bfb      	ldrb	r3, [r7, #15]
    bf56:	2b00      	cmp	r3, #0
    bf58:	bf14      	ite	ne
    bf5a:	2301      	movne	r3, #1
    bf5c:	2300      	moveq	r3, #0
    bf5e:	b2db      	uxtb	r3, r3
}
    bf60:	4618      	mov	r0, r3
    bf62:	3710      	adds	r7, #16
    bf64:	46bd      	mov	sp, r7
    bf66:	bd80      	pop	{r7, pc}
    bf68:	0000bead 	.word	0x0000bead

0000bf6c <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    bf6c:	b480      	push	{r7}
    bf6e:	b085      	sub	sp, #20
    bf70:	af00      	add	r7, sp, #0
    bf72:	6078      	str	r0, [r7, #4]
    bf74:	460b      	mov	r3, r1
    bf76:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    bf78:	687b      	ldr	r3, [r7, #4]
    bf7a:	785b      	ldrb	r3, [r3, #1]
    bf7c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    bf7e:	7bfb      	ldrb	r3, [r7, #15]
    bf80:	f023 030f 	bic.w	r3, r3, #15
    bf84:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    bf86:	78fb      	ldrb	r3, [r7, #3]
    bf88:	f003 030f 	and.w	r3, r3, #15
    bf8c:	b2da      	uxtb	r2, r3
    bf8e:	7bfb      	ldrb	r3, [r7, #15]
    bf90:	4313      	orrs	r3, r2
    bf92:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    bf94:	687b      	ldr	r3, [r7, #4]
    bf96:	7bfa      	ldrb	r2, [r7, #15]
    bf98:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    bf9a:	bf00      	nop
    bf9c:	3714      	adds	r7, #20
    bf9e:	46bd      	mov	sp, r7
    bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bfa4:	4770      	bx	lr
	...

0000bfa8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    bfa8:	b580      	push	{r7, lr}
    bfaa:	b082      	sub	sp, #8
    bfac:	af00      	add	r7, sp, #0
    bfae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    bfb0:	687b      	ldr	r3, [r7, #4]
    bfb2:	2b00      	cmp	r3, #0
    bfb4:	d005      	beq.n	bfc2 <_wdt_init+0x1a>
    bfb6:	687b      	ldr	r3, [r7, #4]
    bfb8:	681b      	ldr	r3, [r3, #0]
    bfba:	2b00      	cmp	r3, #0
    bfbc:	d001      	beq.n	bfc2 <_wdt_init+0x1a>
    bfbe:	2301      	movs	r3, #1
    bfc0:	e000      	b.n	bfc4 <_wdt_init+0x1c>
    bfc2:	2300      	movs	r3, #0
    bfc4:	f003 0301 	and.w	r3, r3, #1
    bfc8:	b2db      	uxtb	r3, r3
    bfca:	2250      	movs	r2, #80	; 0x50
    bfcc:	4913      	ldr	r1, [pc, #76]	; (c01c <_wdt_init+0x74>)
    bfce:	4618      	mov	r0, r3
    bfd0:	4b13      	ldr	r3, [pc, #76]	; (c020 <_wdt_init+0x78>)
    bfd2:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    bfd4:	687b      	ldr	r3, [r7, #4]
    bfd6:	681b      	ldr	r3, [r3, #0]
    bfd8:	4618      	mov	r0, r3
    bfda:	4b12      	ldr	r3, [pc, #72]	; (c024 <_wdt_init+0x7c>)
    bfdc:	4798      	blx	r3
    bfde:	4603      	mov	r3, r0
    bfe0:	2b00      	cmp	r3, #0
    bfe2:	d107      	bne.n	bff4 <_wdt_init+0x4c>
    bfe4:	687b      	ldr	r3, [r7, #4]
    bfe6:	681b      	ldr	r3, [r3, #0]
    bfe8:	4618      	mov	r0, r3
    bfea:	4b0f      	ldr	r3, [pc, #60]	; (c028 <_wdt_init+0x80>)
    bfec:	4798      	blx	r3
    bfee:	4603      	mov	r3, r0
    bff0:	2b00      	cmp	r3, #0
    bff2:	d002      	beq.n	bffa <_wdt_init+0x52>
		return ERR_DENIED;
    bff4:	f06f 0310 	mvn.w	r3, #16
    bff8:	e00b      	b.n	c012 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    bffa:	687b      	ldr	r3, [r7, #4]
    bffc:	681b      	ldr	r3, [r3, #0]
    bffe:	4618      	mov	r0, r3
    c000:	4b0a      	ldr	r3, [pc, #40]	; (c02c <_wdt_init+0x84>)
    c002:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    c004:	687b      	ldr	r3, [r7, #4]
    c006:	681b      	ldr	r3, [r3, #0]
    c008:	210b      	movs	r1, #11
    c00a:	4618      	mov	r0, r3
    c00c:	4b08      	ldr	r3, [pc, #32]	; (c030 <_wdt_init+0x88>)
    c00e:	4798      	blx	r3
	}

	return ERR_NONE;
    c010:	2300      	movs	r3, #0
}
    c012:	4618      	mov	r0, r3
    c014:	3708      	adds	r7, #8
    c016:	46bd      	mov	sp, r7
    c018:	bd80      	pop	{r7, pc}
    c01a:	bf00      	nop
    c01c:	00010f58 	.word	0x00010f58
    c020:	00004a95 	.word	0x00004a95
    c024:	0000bf39 	.word	0x0000bf39
    c028:	0000bed1 	.word	0x0000bed1
    c02c:	0000bf0d 	.word	0x0000bf0d
    c030:	0000bf6d 	.word	0x0000bf6d

0000c034 <hri_port_set_DIR_reg>:
{
    c034:	b480      	push	{r7}
    c036:	b085      	sub	sp, #20
    c038:	af00      	add	r7, sp, #0
    c03a:	60f8      	str	r0, [r7, #12]
    c03c:	460b      	mov	r3, r1
    c03e:	607a      	str	r2, [r7, #4]
    c040:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    c042:	7afb      	ldrb	r3, [r7, #11]
    c044:	68fa      	ldr	r2, [r7, #12]
    c046:	01db      	lsls	r3, r3, #7
    c048:	4413      	add	r3, r2
    c04a:	3308      	adds	r3, #8
    c04c:	687a      	ldr	r2, [r7, #4]
    c04e:	601a      	str	r2, [r3, #0]
}
    c050:	bf00      	nop
    c052:	3714      	adds	r7, #20
    c054:	46bd      	mov	sp, r7
    c056:	f85d 7b04 	ldr.w	r7, [sp], #4
    c05a:	4770      	bx	lr

0000c05c <hri_port_clear_DIR_reg>:
{
    c05c:	b480      	push	{r7}
    c05e:	b085      	sub	sp, #20
    c060:	af00      	add	r7, sp, #0
    c062:	60f8      	str	r0, [r7, #12]
    c064:	460b      	mov	r3, r1
    c066:	607a      	str	r2, [r7, #4]
    c068:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    c06a:	7afb      	ldrb	r3, [r7, #11]
    c06c:	68fa      	ldr	r2, [r7, #12]
    c06e:	01db      	lsls	r3, r3, #7
    c070:	4413      	add	r3, r2
    c072:	3304      	adds	r3, #4
    c074:	687a      	ldr	r2, [r7, #4]
    c076:	601a      	str	r2, [r3, #0]
}
    c078:	bf00      	nop
    c07a:	3714      	adds	r7, #20
    c07c:	46bd      	mov	sp, r7
    c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c082:	4770      	bx	lr

0000c084 <hri_port_set_OUT_reg>:
{
    c084:	b480      	push	{r7}
    c086:	b085      	sub	sp, #20
    c088:	af00      	add	r7, sp, #0
    c08a:	60f8      	str	r0, [r7, #12]
    c08c:	460b      	mov	r3, r1
    c08e:	607a      	str	r2, [r7, #4]
    c090:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    c092:	7afb      	ldrb	r3, [r7, #11]
    c094:	68fa      	ldr	r2, [r7, #12]
    c096:	01db      	lsls	r3, r3, #7
    c098:	4413      	add	r3, r2
    c09a:	3318      	adds	r3, #24
    c09c:	687a      	ldr	r2, [r7, #4]
    c09e:	601a      	str	r2, [r3, #0]
}
    c0a0:	bf00      	nop
    c0a2:	3714      	adds	r7, #20
    c0a4:	46bd      	mov	sp, r7
    c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0aa:	4770      	bx	lr

0000c0ac <hri_port_clear_OUT_reg>:
{
    c0ac:	b480      	push	{r7}
    c0ae:	b085      	sub	sp, #20
    c0b0:	af00      	add	r7, sp, #0
    c0b2:	60f8      	str	r0, [r7, #12]
    c0b4:	460b      	mov	r3, r1
    c0b6:	607a      	str	r2, [r7, #4]
    c0b8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    c0ba:	7afb      	ldrb	r3, [r7, #11]
    c0bc:	68fa      	ldr	r2, [r7, #12]
    c0be:	01db      	lsls	r3, r3, #7
    c0c0:	4413      	add	r3, r2
    c0c2:	3314      	adds	r3, #20
    c0c4:	687a      	ldr	r2, [r7, #4]
    c0c6:	601a      	str	r2, [r3, #0]
}
    c0c8:	bf00      	nop
    c0ca:	3714      	adds	r7, #20
    c0cc:	46bd      	mov	sp, r7
    c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0d2:	4770      	bx	lr

0000c0d4 <hri_port_write_PMUX_PMUXE_bf>:
{
    c0d4:	b480      	push	{r7}
    c0d6:	b085      	sub	sp, #20
    c0d8:	af00      	add	r7, sp, #0
    c0da:	6078      	str	r0, [r7, #4]
    c0dc:	4608      	mov	r0, r1
    c0de:	4611      	mov	r1, r2
    c0e0:	461a      	mov	r2, r3
    c0e2:	4603      	mov	r3, r0
    c0e4:	70fb      	strb	r3, [r7, #3]
    c0e6:	460b      	mov	r3, r1
    c0e8:	70bb      	strb	r3, [r7, #2]
    c0ea:	4613      	mov	r3, r2
    c0ec:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    c0ee:	78fa      	ldrb	r2, [r7, #3]
    c0f0:	78bb      	ldrb	r3, [r7, #2]
    c0f2:	6879      	ldr	r1, [r7, #4]
    c0f4:	01d2      	lsls	r2, r2, #7
    c0f6:	440a      	add	r2, r1
    c0f8:	4413      	add	r3, r2
    c0fa:	3330      	adds	r3, #48	; 0x30
    c0fc:	781b      	ldrb	r3, [r3, #0]
    c0fe:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    c100:	7bfb      	ldrb	r3, [r7, #15]
    c102:	f023 030f 	bic.w	r3, r3, #15
    c106:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    c108:	787b      	ldrb	r3, [r7, #1]
    c10a:	f003 030f 	and.w	r3, r3, #15
    c10e:	b2da      	uxtb	r2, r3
    c110:	7bfb      	ldrb	r3, [r7, #15]
    c112:	4313      	orrs	r3, r2
    c114:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    c116:	78fa      	ldrb	r2, [r7, #3]
    c118:	78bb      	ldrb	r3, [r7, #2]
    c11a:	6879      	ldr	r1, [r7, #4]
    c11c:	01d2      	lsls	r2, r2, #7
    c11e:	440a      	add	r2, r1
    c120:	4413      	add	r3, r2
    c122:	3330      	adds	r3, #48	; 0x30
    c124:	7bfa      	ldrb	r2, [r7, #15]
    c126:	701a      	strb	r2, [r3, #0]
}
    c128:	bf00      	nop
    c12a:	3714      	adds	r7, #20
    c12c:	46bd      	mov	sp, r7
    c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c132:	4770      	bx	lr

0000c134 <hri_port_write_PMUX_PMUXO_bf>:
{
    c134:	b480      	push	{r7}
    c136:	b085      	sub	sp, #20
    c138:	af00      	add	r7, sp, #0
    c13a:	6078      	str	r0, [r7, #4]
    c13c:	4608      	mov	r0, r1
    c13e:	4611      	mov	r1, r2
    c140:	461a      	mov	r2, r3
    c142:	4603      	mov	r3, r0
    c144:	70fb      	strb	r3, [r7, #3]
    c146:	460b      	mov	r3, r1
    c148:	70bb      	strb	r3, [r7, #2]
    c14a:	4613      	mov	r3, r2
    c14c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    c14e:	78fa      	ldrb	r2, [r7, #3]
    c150:	78bb      	ldrb	r3, [r7, #2]
    c152:	6879      	ldr	r1, [r7, #4]
    c154:	01d2      	lsls	r2, r2, #7
    c156:	440a      	add	r2, r1
    c158:	4413      	add	r3, r2
    c15a:	3330      	adds	r3, #48	; 0x30
    c15c:	781b      	ldrb	r3, [r3, #0]
    c15e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    c160:	7bfb      	ldrb	r3, [r7, #15]
    c162:	f003 030f 	and.w	r3, r3, #15
    c166:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    c168:	787b      	ldrb	r3, [r7, #1]
    c16a:	011b      	lsls	r3, r3, #4
    c16c:	b2da      	uxtb	r2, r3
    c16e:	7bfb      	ldrb	r3, [r7, #15]
    c170:	4313      	orrs	r3, r2
    c172:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    c174:	78fa      	ldrb	r2, [r7, #3]
    c176:	78bb      	ldrb	r3, [r7, #2]
    c178:	6879      	ldr	r1, [r7, #4]
    c17a:	01d2      	lsls	r2, r2, #7
    c17c:	440a      	add	r2, r1
    c17e:	4413      	add	r3, r2
    c180:	3330      	adds	r3, #48	; 0x30
    c182:	7bfa      	ldrb	r2, [r7, #15]
    c184:	701a      	strb	r2, [r3, #0]
}
    c186:	bf00      	nop
    c188:	3714      	adds	r7, #20
    c18a:	46bd      	mov	sp, r7
    c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c190:	4770      	bx	lr

0000c192 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    c192:	b480      	push	{r7}
    c194:	b085      	sub	sp, #20
    c196:	af00      	add	r7, sp, #0
    c198:	6078      	str	r0, [r7, #4]
    c19a:	4608      	mov	r0, r1
    c19c:	4611      	mov	r1, r2
    c19e:	461a      	mov	r2, r3
    c1a0:	4603      	mov	r3, r0
    c1a2:	70fb      	strb	r3, [r7, #3]
    c1a4:	460b      	mov	r3, r1
    c1a6:	70bb      	strb	r3, [r7, #2]
    c1a8:	4613      	mov	r3, r2
    c1aa:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    c1ac:	78fa      	ldrb	r2, [r7, #3]
    c1ae:	78bb      	ldrb	r3, [r7, #2]
    c1b0:	6879      	ldr	r1, [r7, #4]
    c1b2:	01d2      	lsls	r2, r2, #7
    c1b4:	440a      	add	r2, r1
    c1b6:	4413      	add	r3, r2
    c1b8:	3340      	adds	r3, #64	; 0x40
    c1ba:	781b      	ldrb	r3, [r3, #0]
    c1bc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    c1be:	7bfb      	ldrb	r3, [r7, #15]
    c1c0:	f023 0301 	bic.w	r3, r3, #1
    c1c4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    c1c6:	787a      	ldrb	r2, [r7, #1]
    c1c8:	7bfb      	ldrb	r3, [r7, #15]
    c1ca:	4313      	orrs	r3, r2
    c1cc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    c1ce:	78fa      	ldrb	r2, [r7, #3]
    c1d0:	78bb      	ldrb	r3, [r7, #2]
    c1d2:	6879      	ldr	r1, [r7, #4]
    c1d4:	01d2      	lsls	r2, r2, #7
    c1d6:	440a      	add	r2, r1
    c1d8:	4413      	add	r3, r2
    c1da:	3340      	adds	r3, #64	; 0x40
    c1dc:	7bfa      	ldrb	r2, [r7, #15]
    c1de:	701a      	strb	r2, [r3, #0]
}
    c1e0:	bf00      	nop
    c1e2:	3714      	adds	r7, #20
    c1e4:	46bd      	mov	sp, r7
    c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1ea:	4770      	bx	lr

0000c1ec <hri_port_write_WRCONFIG_reg>:
{
    c1ec:	b480      	push	{r7}
    c1ee:	b085      	sub	sp, #20
    c1f0:	af00      	add	r7, sp, #0
    c1f2:	60f8      	str	r0, [r7, #12]
    c1f4:	460b      	mov	r3, r1
    c1f6:	607a      	str	r2, [r7, #4]
    c1f8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    c1fa:	7afb      	ldrb	r3, [r7, #11]
    c1fc:	68fa      	ldr	r2, [r7, #12]
    c1fe:	01db      	lsls	r3, r3, #7
    c200:	4413      	add	r3, r2
    c202:	3328      	adds	r3, #40	; 0x28
    c204:	687a      	ldr	r2, [r7, #4]
    c206:	601a      	str	r2, [r3, #0]
}
    c208:	bf00      	nop
    c20a:	3714      	adds	r7, #20
    c20c:	46bd      	mov	sp, r7
    c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c212:	4770      	bx	lr

0000c214 <_gpio_set_direction>:
{
    c214:	b580      	push	{r7, lr}
    c216:	b082      	sub	sp, #8
    c218:	af00      	add	r7, sp, #0
    c21a:	4603      	mov	r3, r0
    c21c:	6039      	str	r1, [r7, #0]
    c21e:	71fb      	strb	r3, [r7, #7]
    c220:	4613      	mov	r3, r2
    c222:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    c224:	79bb      	ldrb	r3, [r7, #6]
    c226:	2b01      	cmp	r3, #1
    c228:	d01c      	beq.n	c264 <_gpio_set_direction+0x50>
    c22a:	2b02      	cmp	r3, #2
    c22c:	d037      	beq.n	c29e <_gpio_set_direction+0x8a>
    c22e:	2b00      	cmp	r3, #0
    c230:	d14e      	bne.n	c2d0 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    c232:	79fb      	ldrb	r3, [r7, #7]
    c234:	683a      	ldr	r2, [r7, #0]
    c236:	4619      	mov	r1, r3
    c238:	482a      	ldr	r0, [pc, #168]	; (c2e4 <_gpio_set_direction+0xd0>)
    c23a:	4b2b      	ldr	r3, [pc, #172]	; (c2e8 <_gpio_set_direction+0xd4>)
    c23c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    c23e:	683b      	ldr	r3, [r7, #0]
    c240:	b29b      	uxth	r3, r3
    c242:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    c246:	79fb      	ldrb	r3, [r7, #7]
    c248:	4619      	mov	r1, r3
    c24a:	4826      	ldr	r0, [pc, #152]	; (c2e4 <_gpio_set_direction+0xd0>)
    c24c:	4b27      	ldr	r3, [pc, #156]	; (c2ec <_gpio_set_direction+0xd8>)
    c24e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    c250:	683b      	ldr	r3, [r7, #0]
    c252:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    c254:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    c258:	79fb      	ldrb	r3, [r7, #7]
    c25a:	4619      	mov	r1, r3
    c25c:	4821      	ldr	r0, [pc, #132]	; (c2e4 <_gpio_set_direction+0xd0>)
    c25e:	4b23      	ldr	r3, [pc, #140]	; (c2ec <_gpio_set_direction+0xd8>)
    c260:	4798      	blx	r3
		break;
    c262:	e03a      	b.n	c2da <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    c264:	79fb      	ldrb	r3, [r7, #7]
    c266:	683a      	ldr	r2, [r7, #0]
    c268:	4619      	mov	r1, r3
    c26a:	481e      	ldr	r0, [pc, #120]	; (c2e4 <_gpio_set_direction+0xd0>)
    c26c:	4b1e      	ldr	r3, [pc, #120]	; (c2e8 <_gpio_set_direction+0xd4>)
    c26e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    c270:	683b      	ldr	r3, [r7, #0]
    c272:	b29b      	uxth	r3, r3
    c274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    c27c:	79f9      	ldrb	r1, [r7, #7]
    c27e:	461a      	mov	r2, r3
    c280:	4818      	ldr	r0, [pc, #96]	; (c2e4 <_gpio_set_direction+0xd0>)
    c282:	4b1a      	ldr	r3, [pc, #104]	; (c2ec <_gpio_set_direction+0xd8>)
    c284:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    c286:	683b      	ldr	r3, [r7, #0]
    c288:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    c28a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    c28e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    c292:	79f9      	ldrb	r1, [r7, #7]
    c294:	461a      	mov	r2, r3
    c296:	4813      	ldr	r0, [pc, #76]	; (c2e4 <_gpio_set_direction+0xd0>)
    c298:	4b14      	ldr	r3, [pc, #80]	; (c2ec <_gpio_set_direction+0xd8>)
    c29a:	4798      	blx	r3
		break;
    c29c:	e01d      	b.n	c2da <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    c29e:	79fb      	ldrb	r3, [r7, #7]
    c2a0:	683a      	ldr	r2, [r7, #0]
    c2a2:	4619      	mov	r1, r3
    c2a4:	480f      	ldr	r0, [pc, #60]	; (c2e4 <_gpio_set_direction+0xd0>)
    c2a6:	4b12      	ldr	r3, [pc, #72]	; (c2f0 <_gpio_set_direction+0xdc>)
    c2a8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    c2aa:	683b      	ldr	r3, [r7, #0]
    c2ac:	b29b      	uxth	r3, r3
    c2ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    c2b2:	79fb      	ldrb	r3, [r7, #7]
    c2b4:	4619      	mov	r1, r3
    c2b6:	480b      	ldr	r0, [pc, #44]	; (c2e4 <_gpio_set_direction+0xd0>)
    c2b8:	4b0c      	ldr	r3, [pc, #48]	; (c2ec <_gpio_set_direction+0xd8>)
    c2ba:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    c2bc:	683b      	ldr	r3, [r7, #0]
    c2be:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    c2c0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    c2c4:	79fb      	ldrb	r3, [r7, #7]
    c2c6:	4619      	mov	r1, r3
    c2c8:	4806      	ldr	r0, [pc, #24]	; (c2e4 <_gpio_set_direction+0xd0>)
    c2ca:	4b08      	ldr	r3, [pc, #32]	; (c2ec <_gpio_set_direction+0xd8>)
    c2cc:	4798      	blx	r3
		break;
    c2ce:	e004      	b.n	c2da <_gpio_set_direction+0xc6>
		ASSERT(false);
    c2d0:	2246      	movs	r2, #70	; 0x46
    c2d2:	4908      	ldr	r1, [pc, #32]	; (c2f4 <_gpio_set_direction+0xe0>)
    c2d4:	2000      	movs	r0, #0
    c2d6:	4b08      	ldr	r3, [pc, #32]	; (c2f8 <_gpio_set_direction+0xe4>)
    c2d8:	4798      	blx	r3
}
    c2da:	bf00      	nop
    c2dc:	3708      	adds	r7, #8
    c2de:	46bd      	mov	sp, r7
    c2e0:	bd80      	pop	{r7, pc}
    c2e2:	bf00      	nop
    c2e4:	41008000 	.word	0x41008000
    c2e8:	0000c05d 	.word	0x0000c05d
    c2ec:	0000c1ed 	.word	0x0000c1ed
    c2f0:	0000c035 	.word	0x0000c035
    c2f4:	00010f70 	.word	0x00010f70
    c2f8:	00004a95 	.word	0x00004a95

0000c2fc <_gpio_set_level>:
{
    c2fc:	b580      	push	{r7, lr}
    c2fe:	b082      	sub	sp, #8
    c300:	af00      	add	r7, sp, #0
    c302:	4603      	mov	r3, r0
    c304:	6039      	str	r1, [r7, #0]
    c306:	71fb      	strb	r3, [r7, #7]
    c308:	4613      	mov	r3, r2
    c30a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    c30c:	79bb      	ldrb	r3, [r7, #6]
    c30e:	2b00      	cmp	r3, #0
    c310:	d006      	beq.n	c320 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    c312:	79fb      	ldrb	r3, [r7, #7]
    c314:	683a      	ldr	r2, [r7, #0]
    c316:	4619      	mov	r1, r3
    c318:	4806      	ldr	r0, [pc, #24]	; (c334 <_gpio_set_level+0x38>)
    c31a:	4b07      	ldr	r3, [pc, #28]	; (c338 <_gpio_set_level+0x3c>)
    c31c:	4798      	blx	r3
}
    c31e:	e005      	b.n	c32c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    c320:	79fb      	ldrb	r3, [r7, #7]
    c322:	683a      	ldr	r2, [r7, #0]
    c324:	4619      	mov	r1, r3
    c326:	4803      	ldr	r0, [pc, #12]	; (c334 <_gpio_set_level+0x38>)
    c328:	4b04      	ldr	r3, [pc, #16]	; (c33c <_gpio_set_level+0x40>)
    c32a:	4798      	blx	r3
}
    c32c:	bf00      	nop
    c32e:	3708      	adds	r7, #8
    c330:	46bd      	mov	sp, r7
    c332:	bd80      	pop	{r7, pc}
    c334:	41008000 	.word	0x41008000
    c338:	0000c085 	.word	0x0000c085
    c33c:	0000c0ad 	.word	0x0000c0ad

0000c340 <_gpio_set_pin_function>:
{
    c340:	b590      	push	{r4, r7, lr}
    c342:	b085      	sub	sp, #20
    c344:	af00      	add	r7, sp, #0
    c346:	6078      	str	r0, [r7, #4]
    c348:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    c34a:	687b      	ldr	r3, [r7, #4]
    c34c:	095b      	lsrs	r3, r3, #5
    c34e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    c350:	687b      	ldr	r3, [r7, #4]
    c352:	b2db      	uxtb	r3, r3
    c354:	f003 031f 	and.w	r3, r3, #31
    c358:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    c35a:	683b      	ldr	r3, [r7, #0]
    c35c:	f1b3 3fff 	cmp.w	r3, #4294967295
    c360:	d106      	bne.n	c370 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    c362:	7bba      	ldrb	r2, [r7, #14]
    c364:	7bf9      	ldrb	r1, [r7, #15]
    c366:	2300      	movs	r3, #0
    c368:	4812      	ldr	r0, [pc, #72]	; (c3b4 <_gpio_set_pin_function+0x74>)
    c36a:	4c13      	ldr	r4, [pc, #76]	; (c3b8 <_gpio_set_pin_function+0x78>)
    c36c:	47a0      	blx	r4
}
    c36e:	e01d      	b.n	c3ac <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    c370:	7bba      	ldrb	r2, [r7, #14]
    c372:	7bf9      	ldrb	r1, [r7, #15]
    c374:	2301      	movs	r3, #1
    c376:	480f      	ldr	r0, [pc, #60]	; (c3b4 <_gpio_set_pin_function+0x74>)
    c378:	4c0f      	ldr	r4, [pc, #60]	; (c3b8 <_gpio_set_pin_function+0x78>)
    c37a:	47a0      	blx	r4
		if (pin & 1) {
    c37c:	7bbb      	ldrb	r3, [r7, #14]
    c37e:	f003 0301 	and.w	r3, r3, #1
    c382:	2b00      	cmp	r3, #0
    c384:	d009      	beq.n	c39a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    c386:	7bbb      	ldrb	r3, [r7, #14]
    c388:	085b      	lsrs	r3, r3, #1
    c38a:	b2da      	uxtb	r2, r3
    c38c:	683b      	ldr	r3, [r7, #0]
    c38e:	b2db      	uxtb	r3, r3
    c390:	7bf9      	ldrb	r1, [r7, #15]
    c392:	4808      	ldr	r0, [pc, #32]	; (c3b4 <_gpio_set_pin_function+0x74>)
    c394:	4c09      	ldr	r4, [pc, #36]	; (c3bc <_gpio_set_pin_function+0x7c>)
    c396:	47a0      	blx	r4
}
    c398:	e008      	b.n	c3ac <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    c39a:	7bbb      	ldrb	r3, [r7, #14]
    c39c:	085b      	lsrs	r3, r3, #1
    c39e:	b2da      	uxtb	r2, r3
    c3a0:	683b      	ldr	r3, [r7, #0]
    c3a2:	b2db      	uxtb	r3, r3
    c3a4:	7bf9      	ldrb	r1, [r7, #15]
    c3a6:	4803      	ldr	r0, [pc, #12]	; (c3b4 <_gpio_set_pin_function+0x74>)
    c3a8:	4c05      	ldr	r4, [pc, #20]	; (c3c0 <_gpio_set_pin_function+0x80>)
    c3aa:	47a0      	blx	r4
}
    c3ac:	bf00      	nop
    c3ae:	3714      	adds	r7, #20
    c3b0:	46bd      	mov	sp, r7
    c3b2:	bd90      	pop	{r4, r7, pc}
    c3b4:	41008000 	.word	0x41008000
    c3b8:	0000c193 	.word	0x0000c193
    c3bc:	0000c135 	.word	0x0000c135
    c3c0:	0000c0d5 	.word	0x0000c0d5

0000c3c4 <gpio_set_pin_function>:
{
    c3c4:	b580      	push	{r7, lr}
    c3c6:	b082      	sub	sp, #8
    c3c8:	af00      	add	r7, sp, #0
    c3ca:	6078      	str	r0, [r7, #4]
    c3cc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    c3ce:	6839      	ldr	r1, [r7, #0]
    c3d0:	6878      	ldr	r0, [r7, #4]
    c3d2:	4b03      	ldr	r3, [pc, #12]	; (c3e0 <gpio_set_pin_function+0x1c>)
    c3d4:	4798      	blx	r3
}
    c3d6:	bf00      	nop
    c3d8:	3708      	adds	r7, #8
    c3da:	46bd      	mov	sp, r7
    c3dc:	bd80      	pop	{r7, pc}
    c3de:	bf00      	nop
    c3e0:	0000c341 	.word	0x0000c341

0000c3e4 <gpio_set_pin_direction>:
{
    c3e4:	b580      	push	{r7, lr}
    c3e6:	b082      	sub	sp, #8
    c3e8:	af00      	add	r7, sp, #0
    c3ea:	4603      	mov	r3, r0
    c3ec:	460a      	mov	r2, r1
    c3ee:	71fb      	strb	r3, [r7, #7]
    c3f0:	4613      	mov	r3, r2
    c3f2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    c3f4:	79fb      	ldrb	r3, [r7, #7]
    c3f6:	095b      	lsrs	r3, r3, #5
    c3f8:	b2d8      	uxtb	r0, r3
    c3fa:	79fb      	ldrb	r3, [r7, #7]
    c3fc:	f003 031f 	and.w	r3, r3, #31
    c400:	2201      	movs	r2, #1
    c402:	fa02 f303 	lsl.w	r3, r2, r3
    c406:	79ba      	ldrb	r2, [r7, #6]
    c408:	4619      	mov	r1, r3
    c40a:	4b03      	ldr	r3, [pc, #12]	; (c418 <gpio_set_pin_direction+0x34>)
    c40c:	4798      	blx	r3
}
    c40e:	bf00      	nop
    c410:	3708      	adds	r7, #8
    c412:	46bd      	mov	sp, r7
    c414:	bd80      	pop	{r7, pc}
    c416:	bf00      	nop
    c418:	0000c215 	.word	0x0000c215

0000c41c <gpio_set_pin_level>:
{
    c41c:	b580      	push	{r7, lr}
    c41e:	b082      	sub	sp, #8
    c420:	af00      	add	r7, sp, #0
    c422:	4603      	mov	r3, r0
    c424:	460a      	mov	r2, r1
    c426:	71fb      	strb	r3, [r7, #7]
    c428:	4613      	mov	r3, r2
    c42a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    c42c:	79fb      	ldrb	r3, [r7, #7]
    c42e:	095b      	lsrs	r3, r3, #5
    c430:	b2d8      	uxtb	r0, r3
    c432:	79fb      	ldrb	r3, [r7, #7]
    c434:	f003 031f 	and.w	r3, r3, #31
    c438:	2201      	movs	r2, #1
    c43a:	fa02 f303 	lsl.w	r3, r2, r3
    c43e:	79ba      	ldrb	r2, [r7, #6]
    c440:	4619      	mov	r1, r3
    c442:	4b03      	ldr	r3, [pc, #12]	; (c450 <gpio_set_pin_level+0x34>)
    c444:	4798      	blx	r3
}
    c446:	bf00      	nop
    c448:	3708      	adds	r7, #8
    c44a:	46bd      	mov	sp, r7
    c44c:	bd80      	pop	{r7, pc}
    c44e:	bf00      	nop
    c450:	0000c2fd 	.word	0x0000c2fd

0000c454 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    c454:	b580      	push	{r7, lr}
    c456:	b082      	sub	sp, #8
    c458:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    c45a:	2100      	movs	r1, #0
    c45c:	2008      	movs	r0, #8
    c45e:	4b24      	ldr	r3, [pc, #144]	; (c4f0 <QSPI_N25Q256_exit_xip+0x9c>)
    c460:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    c462:	2100      	movs	r1, #0
    c464:	202b      	movs	r0, #43	; 0x2b
    c466:	4b22      	ldr	r3, [pc, #136]	; (c4f0 <QSPI_N25Q256_exit_xip+0x9c>)
    c468:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    c46a:	2100      	movs	r1, #0
    c46c:	202a      	movs	r0, #42	; 0x2a
    c46e:	4b20      	ldr	r3, [pc, #128]	; (c4f0 <QSPI_N25Q256_exit_xip+0x9c>)
    c470:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    c472:	2102      	movs	r1, #2
    c474:	2008      	movs	r0, #8
    c476:	4b1f      	ldr	r3, [pc, #124]	; (c4f4 <QSPI_N25Q256_exit_xip+0xa0>)
    c478:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    c47a:	2102      	movs	r1, #2
    c47c:	202b      	movs	r0, #43	; 0x2b
    c47e:	4b1d      	ldr	r3, [pc, #116]	; (c4f4 <QSPI_N25Q256_exit_xip+0xa0>)
    c480:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    c482:	2102      	movs	r1, #2
    c484:	202a      	movs	r0, #42	; 0x2a
    c486:	4b1b      	ldr	r3, [pc, #108]	; (c4f4 <QSPI_N25Q256_exit_xip+0xa0>)
    c488:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    c48a:	2101      	movs	r1, #1
    c48c:	2008      	movs	r0, #8
    c48e:	4b1a      	ldr	r3, [pc, #104]	; (c4f8 <QSPI_N25Q256_exit_xip+0xa4>)
    c490:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    c492:	2100      	movs	r1, #0
    c494:	202b      	movs	r0, #43	; 0x2b
    c496:	4b18      	ldr	r3, [pc, #96]	; (c4f8 <QSPI_N25Q256_exit_xip+0xa4>)
    c498:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    c49a:	2100      	movs	r1, #0
    c49c:	202a      	movs	r0, #42	; 0x2a
    c49e:	4b16      	ldr	r3, [pc, #88]	; (c4f8 <QSPI_N25Q256_exit_xip+0xa4>)
    c4a0:	4798      	blx	r3

	delay_us(1);
    c4a2:	2001      	movs	r0, #1
    c4a4:	4b15      	ldr	r3, [pc, #84]	; (c4fc <QSPI_N25Q256_exit_xip+0xa8>)
    c4a6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    c4a8:	2300      	movs	r3, #0
    c4aa:	607b      	str	r3, [r7, #4]
    c4ac:	e010      	b.n	c4d0 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    c4ae:	2101      	movs	r1, #1
    c4b0:	202a      	movs	r0, #42	; 0x2a
    c4b2:	4b11      	ldr	r3, [pc, #68]	; (c4f8 <QSPI_N25Q256_exit_xip+0xa4>)
    c4b4:	4798      	blx	r3
		delay_us(1);
    c4b6:	2001      	movs	r0, #1
    c4b8:	4b10      	ldr	r3, [pc, #64]	; (c4fc <QSPI_N25Q256_exit_xip+0xa8>)
    c4ba:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    c4bc:	2100      	movs	r1, #0
    c4be:	202a      	movs	r0, #42	; 0x2a
    c4c0:	4b0d      	ldr	r3, [pc, #52]	; (c4f8 <QSPI_N25Q256_exit_xip+0xa4>)
    c4c2:	4798      	blx	r3
		delay_us(1);
    c4c4:	2001      	movs	r0, #1
    c4c6:	4b0d      	ldr	r3, [pc, #52]	; (c4fc <QSPI_N25Q256_exit_xip+0xa8>)
    c4c8:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    c4ca:	687b      	ldr	r3, [r7, #4]
    c4cc:	3301      	adds	r3, #1
    c4ce:	607b      	str	r3, [r7, #4]
    c4d0:	687b      	ldr	r3, [r7, #4]
    c4d2:	2b06      	cmp	r3, #6
    c4d4:	ddeb      	ble.n	c4ae <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    c4d6:	2101      	movs	r1, #1
    c4d8:	202b      	movs	r0, #43	; 0x2b
    c4da:	4b07      	ldr	r3, [pc, #28]	; (c4f8 <QSPI_N25Q256_exit_xip+0xa4>)
    c4dc:	4798      	blx	r3
	delay_us(1);
    c4de:	2001      	movs	r0, #1
    c4e0:	4b06      	ldr	r3, [pc, #24]	; (c4fc <QSPI_N25Q256_exit_xip+0xa8>)
    c4e2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    c4e4:	4b06      	ldr	r3, [pc, #24]	; (c500 <QSPI_N25Q256_exit_xip+0xac>)
    c4e6:	4798      	blx	r3
}
    c4e8:	bf00      	nop
    c4ea:	3708      	adds	r7, #8
    c4ec:	46bd      	mov	sp, r7
    c4ee:	bd80      	pop	{r7, pc}
    c4f0:	0000c3c5 	.word	0x0000c3c5
    c4f4:	0000c3e5 	.word	0x0000c3e5
    c4f8:	0000c41d 	.word	0x0000c41d
    c4fc:	00003491 	.word	0x00003491
    c500:	00002801 	.word	0x00002801

0000c504 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    c504:	b598      	push	{r3, r4, r7, lr}
    c506:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    c508:	4806      	ldr	r0, [pc, #24]	; (c524 <spi_nor_flash_init+0x20>)
    c50a:	4b07      	ldr	r3, [pc, #28]	; (c528 <spi_nor_flash_init+0x24>)
    c50c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    c50e:	2300      	movs	r3, #0
    c510:	4a06      	ldr	r2, [pc, #24]	; (c52c <spi_nor_flash_init+0x28>)
    c512:	4904      	ldr	r1, [pc, #16]	; (c524 <spi_nor_flash_init+0x20>)
    c514:	4806      	ldr	r0, [pc, #24]	; (c530 <spi_nor_flash_init+0x2c>)
    c516:	4c07      	ldr	r4, [pc, #28]	; (c534 <spi_nor_flash_init+0x30>)
    c518:	47a0      	blx	r4
    c51a:	4602      	mov	r2, r0
    c51c:	4b06      	ldr	r3, [pc, #24]	; (c538 <spi_nor_flash_init+0x34>)
    c51e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    c520:	bf00      	nop
    c522:	bd98      	pop	{r3, r4, r7, pc}
    c524:	20007854 	.word	0x20007854
    c528:	000039fd 	.word	0x000039fd
    c52c:	0000c455 	.word	0x0000c455
    c530:	20000da0 	.word	0x20000da0
    c534:	0000c925 	.word	0x0000c925
    c538:	20007a34 	.word	0x20007a34

0000c53c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    c53c:	b580      	push	{r7, lr}
    c53e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    c540:	4805      	ldr	r0, [pc, #20]	; (c558 <cdc_device_acm_init+0x1c>)
    c542:	4b06      	ldr	r3, [pc, #24]	; (c55c <cdc_device_acm_init+0x20>)
    c544:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    c546:	4b06      	ldr	r3, [pc, #24]	; (c560 <cdc_device_acm_init+0x24>)
    c548:	4798      	blx	r3

	usbdc_start(single_desc);
    c54a:	4806      	ldr	r0, [pc, #24]	; (c564 <cdc_device_acm_init+0x28>)
    c54c:	4b06      	ldr	r3, [pc, #24]	; (c568 <cdc_device_acm_init+0x2c>)
    c54e:	4798      	blx	r3
	usbdc_attach();
    c550:	4b06      	ldr	r3, [pc, #24]	; (c56c <cdc_device_acm_init+0x30>)
    c552:	4798      	blx	r3
}
    c554:	bf00      	nop
    c556:	bd80      	pop	{r7, pc}
    c558:	20000df0 	.word	0x20000df0
    c55c:	0000e04d 	.word	0x0000e04d
    c560:	0000d2c5 	.word	0x0000d2c5
    c564:	200001d0 	.word	0x200001d0
    c568:	0000e0e9 	.word	0x0000e0e9
    c56c:	0000e139 	.word	0x0000e139

0000c570 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    c570:	b580      	push	{r7, lr}
    c572:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    c574:	4b01      	ldr	r3, [pc, #4]	; (c57c <usb_init+0xc>)
    c576:	4798      	blx	r3
}
    c578:	bf00      	nop
    c57a:	bd80      	pop	{r7, pc}
    c57c:	0000c53d 	.word	0x0000c53d

0000c580 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    c580:	b580      	push	{r7, lr}
    c582:	b08c      	sub	sp, #48	; 0x30
    c584:	af00      	add	r7, sp, #0
    c586:	6078      	str	r0, [r7, #4]
    c588:	460b      	mov	r3, r1
    c58a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c58c:	687b      	ldr	r3, [r7, #4]
    c58e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c590:	687b      	ldr	r3, [r7, #4]
    c592:	681b      	ldr	r3, [r3, #0]
    c594:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    c596:	f107 030c 	add.w	r3, r7, #12
    c59a:	2200      	movs	r2, #0
    c59c:	601a      	str	r2, [r3, #0]
    c59e:	605a      	str	r2, [r3, #4]
    c5a0:	609a      	str	r2, [r3, #8]
    c5a2:	60da      	str	r2, [r3, #12]
    c5a4:	611a      	str	r2, [r3, #16]
    c5a6:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5aa:	7b1b      	ldrb	r3, [r3, #12]
    c5ac:	2b00      	cmp	r3, #0
    c5ae:	d001      	beq.n	c5b4 <n25q256a_xip_confirm+0x34>
    c5b0:	2206      	movs	r2, #6
    c5b2:	e000      	b.n	c5b6 <n25q256a_xip_confirm+0x36>
    c5b4:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c5b6:	7b3b      	ldrb	r3, [r7, #12]
    c5b8:	f362 0302 	bfi	r3, r2, #0, #3
    c5bc:	733b      	strb	r3, [r7, #12]
    c5be:	7b3b      	ldrb	r3, [r7, #12]
    c5c0:	f043 0310 	orr.w	r3, r3, #16
    c5c4:	733b      	strb	r3, [r7, #12]
    c5c6:	7b3b      	ldrb	r3, [r7, #12]
    c5c8:	f043 0320 	orr.w	r3, r3, #32
    c5cc:	733b      	strb	r3, [r7, #12]
    c5ce:	7b3b      	ldrb	r3, [r7, #12]
    c5d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c5d4:	733b      	strb	r3, [r7, #12]
    c5d6:	7b3b      	ldrb	r3, [r7, #12]
    c5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c5dc:	733b      	strb	r3, [r7, #12]
    c5de:	7b7b      	ldrb	r3, [r7, #13]
    c5e0:	f043 0303 	orr.w	r3, r3, #3
    c5e4:	737b      	strb	r3, [r7, #13]
    c5e6:	7b7b      	ldrb	r3, [r7, #13]
    c5e8:	2201      	movs	r2, #1
    c5ea:	f362 1305 	bfi	r3, r2, #4, #2
    c5ee:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    c5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5f2:	7b1b      	ldrb	r3, [r3, #12]
    c5f4:	2b00      	cmp	r3, #0
    c5f6:	d001      	beq.n	c5fc <n25q256a_xip_confirm+0x7c>
    c5f8:	2208      	movs	r2, #8
    c5fa:	e000      	b.n	c5fe <n25q256a_xip_confirm+0x7e>
    c5fc:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c5fe:	7bbb      	ldrb	r3, [r7, #14]
    c600:	f362 0304 	bfi	r3, r2, #0, #5
    c604:	73bb      	strb	r3, [r7, #14]
    c606:	230b      	movs	r3, #11
    c608:	743b      	strb	r3, [r7, #16]
    c60a:	78fb      	ldrb	r3, [r7, #3]
    c60c:	2b00      	cmp	r3, #0
    c60e:	d001      	beq.n	c614 <n25q256a_xip_confirm+0x94>
    c610:	2300      	movs	r3, #0
    c612:	e000      	b.n	c616 <n25q256a_xip_confirm+0x96>
    c614:	23ff      	movs	r3, #255	; 0xff
    c616:	747b      	strb	r3, [r7, #17]
    c618:	2301      	movs	r3, #1
    c61a:	61bb      	str	r3, [r7, #24]
    c61c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    c620:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    c622:	f107 030c 	add.w	r3, r7, #12
    c626:	4619      	mov	r1, r3
    c628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c62a:	4b07      	ldr	r3, [pc, #28]	; (c648 <n25q256a_xip_confirm+0xc8>)
    c62c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    c62e:	78fb      	ldrb	r3, [r7, #3]
    c630:	2b00      	cmp	r3, #0
    c632:	d001      	beq.n	c638 <n25q256a_xip_confirm+0xb8>
    c634:	2202      	movs	r2, #2
    c636:	e000      	b.n	c63a <n25q256a_xip_confirm+0xba>
    c638:	2201      	movs	r2, #1
    c63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c63c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c63e:	2300      	movs	r3, #0
}
    c640:	4618      	mov	r0, r3
    c642:	3730      	adds	r7, #48	; 0x30
    c644:	46bd      	mov	sp, r7
    c646:	bd80      	pop	{r7, pc}
    c648:	00003a75 	.word	0x00003a75

0000c64c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    c64c:	b580      	push	{r7, lr}
    c64e:	b08c      	sub	sp, #48	; 0x30
    c650:	af00      	add	r7, sp, #0
    c652:	6078      	str	r0, [r7, #4]
    c654:	460b      	mov	r3, r1
    c656:	70fb      	strb	r3, [r7, #3]
    c658:	4613      	mov	r3, r2
    c65a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    c65c:	2300      	movs	r3, #0
    c65e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    c660:	687b      	ldr	r3, [r7, #4]
    c662:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    c664:	687b      	ldr	r3, [r7, #4]
    c666:	681b      	ldr	r3, [r3, #0]
    c668:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    c66a:	f107 030c 	add.w	r3, r7, #12
    c66e:	2200      	movs	r2, #0
    c670:	601a      	str	r2, [r3, #0]
    c672:	605a      	str	r2, [r3, #4]
    c674:	609a      	str	r2, [r3, #8]
    c676:	60da      	str	r2, [r3, #12]
    c678:	611a      	str	r2, [r3, #16]
    c67a:	615a      	str	r2, [r3, #20]
    c67c:	78fb      	ldrb	r3, [r7, #3]
    c67e:	f003 0307 	and.w	r3, r3, #7
    c682:	b2da      	uxtb	r2, r3
    c684:	7b3b      	ldrb	r3, [r7, #12]
    c686:	f362 0302 	bfi	r3, r2, #0, #3
    c68a:	733b      	strb	r3, [r7, #12]
    c68c:	7b3b      	ldrb	r3, [r7, #12]
    c68e:	f043 0310 	orr.w	r3, r3, #16
    c692:	733b      	strb	r3, [r7, #12]
    c694:	7b3b      	ldrb	r3, [r7, #12]
    c696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c69a:	733b      	strb	r3, [r7, #12]
    c69c:	78bb      	ldrb	r3, [r7, #2]
    c69e:	743b      	strb	r3, [r7, #16]
    c6a0:	2301      	movs	r3, #1
    c6a2:	61bb      	str	r3, [r7, #24]
    c6a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    c6a8:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    c6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c6ac:	7b5b      	ldrb	r3, [r3, #13]
    c6ae:	2b00      	cmp	r3, #0
    c6b0:	d003      	beq.n	c6ba <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    c6b2:	2100      	movs	r1, #0
    c6b4:	6878      	ldr	r0, [r7, #4]
    c6b6:	4b0a      	ldr	r3, [pc, #40]	; (c6e0 <n25q256a_read_reg+0x94>)
    c6b8:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c6ba:	f107 030c 	add.w	r3, r7, #12
    c6be:	4619      	mov	r1, r3
    c6c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c6c2:	4b08      	ldr	r3, [pc, #32]	; (c6e4 <n25q256a_read_reg+0x98>)
    c6c4:	4798      	blx	r3
	if (n25q->xip_mode) {
    c6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c6c8:	7b5b      	ldrb	r3, [r3, #13]
    c6ca:	2b00      	cmp	r3, #0
    c6cc:	d003      	beq.n	c6d6 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    c6ce:	2101      	movs	r1, #1
    c6d0:	6878      	ldr	r0, [r7, #4]
    c6d2:	4b03      	ldr	r3, [pc, #12]	; (c6e0 <n25q256a_read_reg+0x94>)
    c6d4:	4798      	blx	r3
	}
	return status;
    c6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c6d8:	4618      	mov	r0, r3
    c6da:	3730      	adds	r7, #48	; 0x30
    c6dc:	46bd      	mov	sp, r7
    c6de:	bd80      	pop	{r7, pc}
    c6e0:	0000c581 	.word	0x0000c581
    c6e4:	00003a75 	.word	0x00003a75

0000c6e8 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    c6e8:	b580      	push	{r7, lr}
    c6ea:	b08c      	sub	sp, #48	; 0x30
    c6ec:	af00      	add	r7, sp, #0
    c6ee:	60f8      	str	r0, [r7, #12]
    c6f0:	607b      	str	r3, [r7, #4]
    c6f2:	460b      	mov	r3, r1
    c6f4:	72fb      	strb	r3, [r7, #11]
    c6f6:	4613      	mov	r3, r2
    c6f8:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c6fa:	68fb      	ldr	r3, [r7, #12]
    c6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c6fe:	68fb      	ldr	r3, [r7, #12]
    c700:	681b      	ldr	r3, [r3, #0]
    c702:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    c704:	f107 0310 	add.w	r3, r7, #16
    c708:	2200      	movs	r2, #0
    c70a:	601a      	str	r2, [r3, #0]
    c70c:	605a      	str	r2, [r3, #4]
    c70e:	609a      	str	r2, [r3, #8]
    c710:	60da      	str	r2, [r3, #12]
    c712:	611a      	str	r2, [r3, #16]
    c714:	615a      	str	r2, [r3, #20]
    c716:	7afb      	ldrb	r3, [r7, #11]
    c718:	f003 0307 	and.w	r3, r3, #7
    c71c:	b2da      	uxtb	r2, r3
    c71e:	7c3b      	ldrb	r3, [r7, #16]
    c720:	f362 0302 	bfi	r3, r2, #0, #3
    c724:	743b      	strb	r3, [r7, #16]
    c726:	7c3b      	ldrb	r3, [r7, #16]
    c728:	f043 0310 	orr.w	r3, r3, #16
    c72c:	743b      	strb	r3, [r7, #16]
    c72e:	7c3b      	ldrb	r3, [r7, #16]
    c730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c734:	743b      	strb	r3, [r7, #16]
    c736:	7c7b      	ldrb	r3, [r7, #17]
    c738:	2202      	movs	r2, #2
    c73a:	f362 1305 	bfi	r3, r2, #4, #2
    c73e:	747b      	strb	r3, [r7, #17]
    c740:	7abb      	ldrb	r3, [r7, #10]
    c742:	753b      	strb	r3, [r7, #20]
    c744:	2301      	movs	r3, #1
    c746:	61fb      	str	r3, [r7, #28]
    c748:	1d3b      	adds	r3, r7, #4
    c74a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    c74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c74e:	7b5b      	ldrb	r3, [r3, #13]
    c750:	2b00      	cmp	r3, #0
    c752:	d003      	beq.n	c75c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    c754:	2100      	movs	r1, #0
    c756:	68f8      	ldr	r0, [r7, #12]
    c758:	4b09      	ldr	r3, [pc, #36]	; (c780 <n25q256a_write_reg+0x98>)
    c75a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c75c:	f107 0310 	add.w	r3, r7, #16
    c760:	4619      	mov	r1, r3
    c762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c764:	4b07      	ldr	r3, [pc, #28]	; (c784 <n25q256a_write_reg+0x9c>)
    c766:	4798      	blx	r3
	if (n25q->xip_mode) {
    c768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c76a:	7b5b      	ldrb	r3, [r3, #13]
    c76c:	2b00      	cmp	r3, #0
    c76e:	d003      	beq.n	c778 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    c770:	2101      	movs	r1, #1
    c772:	68f8      	ldr	r0, [r7, #12]
    c774:	4b02      	ldr	r3, [pc, #8]	; (c780 <n25q256a_write_reg+0x98>)
    c776:	4798      	blx	r3
	}
}
    c778:	bf00      	nop
    c77a:	3730      	adds	r7, #48	; 0x30
    c77c:	46bd      	mov	sp, r7
    c77e:	bd80      	pop	{r7, pc}
    c780:	0000c581 	.word	0x0000c581
    c784:	00003a75 	.word	0x00003a75

0000c788 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    c788:	b580      	push	{r7, lr}
    c78a:	b090      	sub	sp, #64	; 0x40
    c78c:	af00      	add	r7, sp, #0
    c78e:	6078      	str	r0, [r7, #4]
    c790:	460b      	mov	r3, r1
    c792:	70fb      	strb	r3, [r7, #3]
    c794:	4613      	mov	r3, r2
    c796:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c798:	687b      	ldr	r3, [r7, #4]
    c79a:	681b      	ldr	r3, [r3, #0]
    c79c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    c79e:	78bb      	ldrb	r3, [r7, #2]
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	d001      	beq.n	c7a8 <n25q256a_write_enable+0x20>
    c7a4:	2306      	movs	r3, #6
    c7a6:	e000      	b.n	c7aa <n25q256a_write_enable+0x22>
    c7a8:	2304      	movs	r3, #4
    c7aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    c7ae:	f107 0320 	add.w	r3, r7, #32
    c7b2:	2200      	movs	r2, #0
    c7b4:	601a      	str	r2, [r3, #0]
    c7b6:	605a      	str	r2, [r3, #4]
    c7b8:	609a      	str	r2, [r3, #8]
    c7ba:	60da      	str	r2, [r3, #12]
    c7bc:	611a      	str	r2, [r3, #16]
    c7be:	615a      	str	r2, [r3, #20]
    c7c0:	78fb      	ldrb	r3, [r7, #3]
    c7c2:	f003 0307 	and.w	r3, r3, #7
    c7c6:	b2da      	uxtb	r2, r3
    c7c8:	f897 3020 	ldrb.w	r3, [r7, #32]
    c7cc:	f362 0302 	bfi	r3, r2, #0, #3
    c7d0:	f887 3020 	strb.w	r3, [r7, #32]
    c7d4:	f897 3020 	ldrb.w	r3, [r7, #32]
    c7d8:	f043 0310 	orr.w	r3, r3, #16
    c7dc:	f887 3020 	strb.w	r3, [r7, #32]
    c7e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    c7e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    c7e8:	f107 0308 	add.w	r3, r7, #8
    c7ec:	2200      	movs	r2, #0
    c7ee:	601a      	str	r2, [r3, #0]
    c7f0:	605a      	str	r2, [r3, #4]
    c7f2:	609a      	str	r2, [r3, #8]
    c7f4:	60da      	str	r2, [r3, #12]
    c7f6:	611a      	str	r2, [r3, #16]
    c7f8:	615a      	str	r2, [r3, #20]
    c7fa:	78fb      	ldrb	r3, [r7, #3]
    c7fc:	f003 0307 	and.w	r3, r3, #7
    c800:	b2da      	uxtb	r2, r3
    c802:	7a3b      	ldrb	r3, [r7, #8]
    c804:	f362 0302 	bfi	r3, r2, #0, #3
    c808:	723b      	strb	r3, [r7, #8]
    c80a:	7a3b      	ldrb	r3, [r7, #8]
    c80c:	f043 0310 	orr.w	r3, r3, #16
    c810:	723b      	strb	r3, [r7, #8]
    c812:	7a3b      	ldrb	r3, [r7, #8]
    c814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c818:	723b      	strb	r3, [r7, #8]
    c81a:	2305      	movs	r3, #5
    c81c:	733b      	strb	r3, [r7, #12]
    c81e:	2301      	movs	r3, #1
    c820:	617b      	str	r3, [r7, #20]
    c822:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    c826:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    c828:	f107 0320 	add.w	r3, r7, #32
    c82c:	4619      	mov	r1, r3
    c82e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c830:	4b08      	ldr	r3, [pc, #32]	; (c854 <n25q256a_write_enable+0xcc>)
    c832:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    c834:	f107 0308 	add.w	r3, r7, #8
    c838:	4619      	mov	r1, r3
    c83a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c83c:	4b05      	ldr	r3, [pc, #20]	; (c854 <n25q256a_write_enable+0xcc>)
    c83e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    c840:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    c844:	f003 0302 	and.w	r3, r3, #2
    c848:	2b00      	cmp	r3, #0
    c84a:	d0ed      	beq.n	c828 <n25q256a_write_enable+0xa0>
}
    c84c:	bf00      	nop
    c84e:	3740      	adds	r7, #64	; 0x40
    c850:	46bd      	mov	sp, r7
    c852:	bd80      	pop	{r7, pc}
    c854:	00003a75 	.word	0x00003a75

0000c858 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    c858:	b590      	push	{r4, r7, lr}
    c85a:	b087      	sub	sp, #28
    c85c:	af00      	add	r7, sp, #0
    c85e:	6078      	str	r0, [r7, #4]
    c860:	460b      	mov	r3, r1
    c862:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    c864:	687b      	ldr	r3, [r7, #4]
    c866:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c868:	68fb      	ldr	r3, [r7, #12]
    c86a:	7b1b      	ldrb	r3, [r3, #12]
    c86c:	2b00      	cmp	r3, #0
    c86e:	d001      	beq.n	c874 <n25q256a_switch_mode+0x1c>
    c870:	2306      	movs	r3, #6
    c872:	e000      	b.n	c876 <n25q256a_switch_mode+0x1e>
    c874:	2300      	movs	r3, #0
    c876:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c878:	7afb      	ldrb	r3, [r7, #11]
    c87a:	2265      	movs	r2, #101	; 0x65
    c87c:	4619      	mov	r1, r3
    c87e:	6878      	ldr	r0, [r7, #4]
    c880:	4b25      	ldr	r3, [pc, #148]	; (c918 <n25q256a_switch_mode+0xc0>)
    c882:	4798      	blx	r3
    c884:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c886:	2300      	movs	r3, #0
    c888:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c88a:	68fb      	ldr	r3, [r7, #12]
    c88c:	7b1b      	ldrb	r3, [r3, #12]
    c88e:	78fa      	ldrb	r2, [r7, #3]
    c890:	429a      	cmp	r2, r3
    c892:	d03d      	beq.n	c910 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c894:	78fb      	ldrb	r3, [r7, #3]
    c896:	2b00      	cmp	r3, #0
    c898:	d00b      	beq.n	c8b2 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c89a:	697b      	ldr	r3, [r7, #20]
    c89c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c8a0:	2b00      	cmp	r3, #0
    c8a2:	d011      	beq.n	c8c8 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c8a4:	697b      	ldr	r3, [r7, #20]
    c8a6:	f003 031f 	and.w	r3, r3, #31
    c8aa:	617b      	str	r3, [r7, #20]
			modify = 1;
    c8ac:	2301      	movs	r3, #1
    c8ae:	74fb      	strb	r3, [r7, #19]
    c8b0:	e00a      	b.n	c8c8 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c8b2:	697b      	ldr	r3, [r7, #20]
    c8b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c8b8:	2b00      	cmp	r3, #0
    c8ba:	d105      	bne.n	c8c8 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c8bc:	697b      	ldr	r3, [r7, #20]
    c8be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c8c2:	617b      	str	r3, [r7, #20]
			modify = 1;
    c8c4:	2301      	movs	r3, #1
    c8c6:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c8c8:	7cfb      	ldrb	r3, [r7, #19]
    c8ca:	2b00      	cmp	r3, #0
    c8cc:	d021      	beq.n	c912 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c8ce:	68fb      	ldr	r3, [r7, #12]
    c8d0:	78fa      	ldrb	r2, [r7, #3]
    c8d2:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c8d4:	7afb      	ldrb	r3, [r7, #11]
    c8d6:	2201      	movs	r2, #1
    c8d8:	4619      	mov	r1, r3
    c8da:	6878      	ldr	r0, [r7, #4]
    c8dc:	4b0f      	ldr	r3, [pc, #60]	; (c91c <n25q256a_switch_mode+0xc4>)
    c8de:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c8e0:	7af9      	ldrb	r1, [r7, #11]
    c8e2:	697b      	ldr	r3, [r7, #20]
    c8e4:	2261      	movs	r2, #97	; 0x61
    c8e6:	6878      	ldr	r0, [r7, #4]
    c8e8:	4c0d      	ldr	r4, [pc, #52]	; (c920 <n25q256a_switch_mode+0xc8>)
    c8ea:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c8ec:	78fb      	ldrb	r3, [r7, #3]
    c8ee:	2b00      	cmp	r3, #0
    c8f0:	d001      	beq.n	c8f6 <n25q256a_switch_mode+0x9e>
    c8f2:	2306      	movs	r3, #6
    c8f4:	e000      	b.n	c8f8 <n25q256a_switch_mode+0xa0>
    c8f6:	2300      	movs	r3, #0
    c8f8:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c8fa:	7afb      	ldrb	r3, [r7, #11]
    c8fc:	2265      	movs	r2, #101	; 0x65
    c8fe:	4619      	mov	r1, r3
    c900:	6878      	ldr	r0, [r7, #4]
    c902:	4b05      	ldr	r3, [pc, #20]	; (c918 <n25q256a_switch_mode+0xc0>)
    c904:	4798      	blx	r3
    c906:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c908:	68fb      	ldr	r3, [r7, #12]
    c90a:	78fa      	ldrb	r2, [r7, #3]
    c90c:	731a      	strb	r2, [r3, #12]
    c90e:	e000      	b.n	c912 <n25q256a_switch_mode+0xba>
		return;
    c910:	bf00      	nop
	}
}
    c912:	371c      	adds	r7, #28
    c914:	46bd      	mov	sp, r7
    c916:	bd90      	pop	{r4, r7, pc}
    c918:	0000c64d 	.word	0x0000c64d
    c91c:	0000c789 	.word	0x0000c789
    c920:	0000c6e9 	.word	0x0000c6e9

0000c924 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c924:	b580      	push	{r7, lr}
    c926:	b086      	sub	sp, #24
    c928:	af00      	add	r7, sp, #0
    c92a:	60f8      	str	r0, [r7, #12]
    c92c:	60b9      	str	r1, [r7, #8]
    c92e:	607a      	str	r2, [r7, #4]
    c930:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c932:	68fb      	ldr	r3, [r7, #12]
    c934:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c936:	4a0c      	ldr	r2, [pc, #48]	; (c968 <n25q256a_construct+0x44>)
    c938:	68b9      	ldr	r1, [r7, #8]
    c93a:	68f8      	ldr	r0, [r7, #12]
    c93c:	4b0b      	ldr	r3, [pc, #44]	; (c96c <n25q256a_construct+0x48>)
    c93e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c940:	697b      	ldr	r3, [r7, #20]
    c942:	2200      	movs	r2, #0
    c944:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c946:	697b      	ldr	r3, [r7, #20]
    c948:	2200      	movs	r2, #0
    c94a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c94c:	697b      	ldr	r3, [r7, #20]
    c94e:	687a      	ldr	r2, [r7, #4]
    c950:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c952:	78fb      	ldrb	r3, [r7, #3]
    c954:	4619      	mov	r1, r3
    c956:	68f8      	ldr	r0, [r7, #12]
    c958:	4b05      	ldr	r3, [pc, #20]	; (c970 <n25q256a_construct+0x4c>)
    c95a:	4798      	blx	r3
	return me;
    c95c:	68fb      	ldr	r3, [r7, #12]
}
    c95e:	4618      	mov	r0, r3
    c960:	3718      	adds	r7, #24
    c962:	46bd      	mov	sp, r7
    c964:	bd80      	pop	{r7, pc}
    c966:	bf00      	nop
    c968:	00010f8c 	.word	0x00010f8c
    c96c:	0000ce01 	.word	0x0000ce01
    c970:	0000c859 	.word	0x0000c859

0000c974 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c974:	b580      	push	{r7, lr}
    c976:	b08c      	sub	sp, #48	; 0x30
    c978:	af00      	add	r7, sp, #0
    c97a:	60f8      	str	r0, [r7, #12]
    c97c:	60b9      	str	r1, [r7, #8]
    c97e:	607a      	str	r2, [r7, #4]
    c980:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c982:	68fb      	ldr	r3, [r7, #12]
    c984:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c986:	68fb      	ldr	r3, [r7, #12]
    c988:	681b      	ldr	r3, [r3, #0]
    c98a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c98c:	f107 0310 	add.w	r3, r7, #16
    c990:	2200      	movs	r2, #0
    c992:	601a      	str	r2, [r3, #0]
    c994:	605a      	str	r2, [r3, #4]
    c996:	609a      	str	r2, [r3, #8]
    c998:	60da      	str	r2, [r3, #12]
    c99a:	611a      	str	r2, [r3, #16]
    c99c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9a0:	7b1b      	ldrb	r3, [r3, #12]
    c9a2:	2b00      	cmp	r3, #0
    c9a4:	d001      	beq.n	c9aa <n25q256a_read+0x36>
    c9a6:	2206      	movs	r2, #6
    c9a8:	e000      	b.n	c9ac <n25q256a_read+0x38>
    c9aa:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c9ac:	7c3b      	ldrb	r3, [r7, #16]
    c9ae:	f362 0302 	bfi	r3, r2, #0, #3
    c9b2:	743b      	strb	r3, [r7, #16]
    c9b4:	7c3b      	ldrb	r3, [r7, #16]
    c9b6:	f043 0310 	orr.w	r3, r3, #16
    c9ba:	743b      	strb	r3, [r7, #16]
    c9bc:	7c3b      	ldrb	r3, [r7, #16]
    c9be:	f043 0320 	orr.w	r3, r3, #32
    c9c2:	743b      	strb	r3, [r7, #16]
    c9c4:	7c3b      	ldrb	r3, [r7, #16]
    c9c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c9ca:	743b      	strb	r3, [r7, #16]
    c9cc:	7c7b      	ldrb	r3, [r7, #17]
    c9ce:	2201      	movs	r2, #1
    c9d0:	f362 1305 	bfi	r3, r2, #4, #2
    c9d4:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9d8:	7b1b      	ldrb	r3, [r3, #12]
    c9da:	2b00      	cmp	r3, #0
    c9dc:	d001      	beq.n	c9e2 <n25q256a_read+0x6e>
    c9de:	220a      	movs	r2, #10
    c9e0:	e000      	b.n	c9e4 <n25q256a_read+0x70>
    c9e2:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c9e4:	7cbb      	ldrb	r3, [r7, #18]
    c9e6:	f362 0304 	bfi	r3, r2, #0, #5
    c9ea:	74bb      	strb	r3, [r7, #18]
    c9ec:	230b      	movs	r3, #11
    c9ee:	753b      	strb	r3, [r7, #20]
    c9f0:	687b      	ldr	r3, [r7, #4]
    c9f2:	61bb      	str	r3, [r7, #24]
    c9f4:	683b      	ldr	r3, [r7, #0]
    c9f6:	61fb      	str	r3, [r7, #28]
    c9f8:	68bb      	ldr	r3, [r7, #8]
    c9fa:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c9fc:	f107 0310 	add.w	r3, r7, #16
    ca00:	4619      	mov	r1, r3
    ca02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ca04:	4b03      	ldr	r3, [pc, #12]	; (ca14 <n25q256a_read+0xa0>)
    ca06:	4798      	blx	r3
	return ERR_NONE;
    ca08:	2300      	movs	r3, #0
}
    ca0a:	4618      	mov	r0, r3
    ca0c:	3730      	adds	r7, #48	; 0x30
    ca0e:	46bd      	mov	sp, r7
    ca10:	bd80      	pop	{r7, pc}
    ca12:	bf00      	nop
    ca14:	00003a75 	.word	0x00003a75

0000ca18 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ca18:	b580      	push	{r7, lr}
    ca1a:	b08c      	sub	sp, #48	; 0x30
    ca1c:	af00      	add	r7, sp, #0
    ca1e:	60f8      	str	r0, [r7, #12]
    ca20:	60b9      	str	r1, [r7, #8]
    ca22:	607a      	str	r2, [r7, #4]
    ca24:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ca26:	68fb      	ldr	r3, [r7, #12]
    ca28:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ca2a:	68fb      	ldr	r3, [r7, #12]
    ca2c:	681b      	ldr	r3, [r3, #0]
    ca2e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ca30:	f107 0310 	add.w	r3, r7, #16
    ca34:	2200      	movs	r2, #0
    ca36:	601a      	str	r2, [r3, #0]
    ca38:	605a      	str	r2, [r3, #4]
    ca3a:	609a      	str	r2, [r3, #8]
    ca3c:	60da      	str	r2, [r3, #12]
    ca3e:	611a      	str	r2, [r3, #16]
    ca40:	615a      	str	r2, [r3, #20]
    ca42:	7c3b      	ldrb	r3, [r7, #16]
    ca44:	f043 0310 	orr.w	r3, r3, #16
    ca48:	743b      	strb	r3, [r7, #16]
    ca4a:	7c3b      	ldrb	r3, [r7, #16]
    ca4c:	f043 0320 	orr.w	r3, r3, #32
    ca50:	743b      	strb	r3, [r7, #16]
    ca52:	7c3b      	ldrb	r3, [r7, #16]
    ca54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ca58:	743b      	strb	r3, [r7, #16]
    ca5a:	7c7b      	ldrb	r3, [r7, #17]
    ca5c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ca60:	747b      	strb	r3, [r7, #17]
    ca62:	2302      	movs	r3, #2
    ca64:	753b      	strb	r3, [r7, #20]
    ca66:	687b      	ldr	r3, [r7, #4]
    ca68:	61bb      	str	r3, [r7, #24]
    ca6a:	683b      	ldr	r3, [r7, #0]
    ca6c:	61fb      	str	r3, [r7, #28]
    ca6e:	68bb      	ldr	r3, [r7, #8]
    ca70:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ca72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca74:	7b1b      	ldrb	r3, [r3, #12]
    ca76:	2b00      	cmp	r3, #0
    ca78:	d001      	beq.n	ca7e <n25q256a_write+0x66>
    ca7a:	2206      	movs	r2, #6
    ca7c:	e000      	b.n	ca80 <n25q256a_write+0x68>
    ca7e:	2200      	movs	r2, #0
    ca80:	7c3b      	ldrb	r3, [r7, #16]
    ca82:	f362 0302 	bfi	r3, r2, #0, #3
    ca86:	743b      	strb	r3, [r7, #16]
	while (length) {
    ca88:	e035      	b.n	caf6 <n25q256a_write+0xde>
		cmd.address = address;
    ca8a:	687b      	ldr	r3, [r7, #4]
    ca8c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    ca8e:	683b      	ldr	r3, [r7, #0]
    ca90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ca94:	d802      	bhi.n	ca9c <n25q256a_write+0x84>
			cmd.buf_len = length;
    ca96:	683b      	ldr	r3, [r7, #0]
    ca98:	61fb      	str	r3, [r7, #28]
    ca9a:	e002      	b.n	caa2 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    ca9c:	f44f 7380 	mov.w	r3, #256	; 0x100
    caa0:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    caa2:	7c3b      	ldrb	r3, [r7, #16]
    caa4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    caa8:	b2db      	uxtb	r3, r3
    caaa:	2201      	movs	r2, #1
    caac:	4619      	mov	r1, r3
    caae:	68f8      	ldr	r0, [r7, #12]
    cab0:	4b19      	ldr	r3, [pc, #100]	; (cb18 <n25q256a_write+0x100>)
    cab2:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    cab4:	f107 0310 	add.w	r3, r7, #16
    cab8:	4619      	mov	r1, r3
    caba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cabc:	4b17      	ldr	r3, [pc, #92]	; (cb1c <n25q256a_write+0x104>)
    cabe:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    cac0:	bf00      	nop
    cac2:	7c3b      	ldrb	r3, [r7, #16]
    cac4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cac8:	b2db      	uxtb	r3, r3
    caca:	2270      	movs	r2, #112	; 0x70
    cacc:	4619      	mov	r1, r3
    cace:	68f8      	ldr	r0, [r7, #12]
    cad0:	4b13      	ldr	r3, [pc, #76]	; (cb20 <n25q256a_write+0x108>)
    cad2:	4798      	blx	r3
    cad4:	4603      	mov	r3, r0
    cad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cada:	2b00      	cmp	r3, #0
    cadc:	d0f1      	beq.n	cac2 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    cade:	6a3a      	ldr	r2, [r7, #32]
    cae0:	69fb      	ldr	r3, [r7, #28]
    cae2:	4413      	add	r3, r2
    cae4:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    cae6:	69fb      	ldr	r3, [r7, #28]
    cae8:	683a      	ldr	r2, [r7, #0]
    caea:	1ad3      	subs	r3, r2, r3
    caec:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    caee:	69fb      	ldr	r3, [r7, #28]
    caf0:	687a      	ldr	r2, [r7, #4]
    caf2:	4413      	add	r3, r2
    caf4:	607b      	str	r3, [r7, #4]
	while (length) {
    caf6:	683b      	ldr	r3, [r7, #0]
    caf8:	2b00      	cmp	r3, #0
    cafa:	d1c6      	bne.n	ca8a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    cafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cafe:	7b5b      	ldrb	r3, [r3, #13]
    cb00:	2b00      	cmp	r3, #0
    cb02:	d003      	beq.n	cb0c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    cb04:	2101      	movs	r1, #1
    cb06:	68f8      	ldr	r0, [r7, #12]
    cb08:	4b06      	ldr	r3, [pc, #24]	; (cb24 <n25q256a_write+0x10c>)
    cb0a:	4798      	blx	r3
	}
	return ERR_NONE;
    cb0c:	2300      	movs	r3, #0
}
    cb0e:	4618      	mov	r0, r3
    cb10:	3730      	adds	r7, #48	; 0x30
    cb12:	46bd      	mov	sp, r7
    cb14:	bd80      	pop	{r7, pc}
    cb16:	bf00      	nop
    cb18:	0000c789 	.word	0x0000c789
    cb1c:	00003a75 	.word	0x00003a75
    cb20:	0000c64d 	.word	0x0000c64d
    cb24:	0000c581 	.word	0x0000c581

0000cb28 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    cb28:	b580      	push	{r7, lr}
    cb2a:	b090      	sub	sp, #64	; 0x40
    cb2c:	af00      	add	r7, sp, #0
    cb2e:	60f8      	str	r0, [r7, #12]
    cb30:	60b9      	str	r1, [r7, #8]
    cb32:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    cb34:	68fb      	ldr	r3, [r7, #12]
    cb36:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    cb38:	68fb      	ldr	r3, [r7, #12]
    cb3a:	681b      	ldr	r3, [r3, #0]
    cb3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    cb3e:	f107 0314 	add.w	r3, r7, #20
    cb42:	2200      	movs	r2, #0
    cb44:	601a      	str	r2, [r3, #0]
    cb46:	605a      	str	r2, [r3, #4]
    cb48:	609a      	str	r2, [r3, #8]
    cb4a:	60da      	str	r2, [r3, #12]
    cb4c:	611a      	str	r2, [r3, #16]
    cb4e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    cb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cb52:	7b1b      	ldrb	r3, [r3, #12]
    cb54:	2b00      	cmp	r3, #0
    cb56:	d001      	beq.n	cb5c <n25q256a_erase+0x34>
    cb58:	2206      	movs	r2, #6
    cb5a:	e000      	b.n	cb5e <n25q256a_erase+0x36>
    cb5c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    cb5e:	7d3b      	ldrb	r3, [r7, #20]
    cb60:	f362 0302 	bfi	r3, r2, #0, #3
    cb64:	753b      	strb	r3, [r7, #20]
    cb66:	7d3b      	ldrb	r3, [r7, #20]
    cb68:	f043 0310 	orr.w	r3, r3, #16
    cb6c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    cb6e:	687b      	ldr	r3, [r7, #4]
    cb70:	4a56      	ldr	r2, [pc, #344]	; (cccc <n25q256a_erase+0x1a4>)
    cb72:	4293      	cmp	r3, r2
    cb74:	bf94      	ite	ls
    cb76:	2301      	movls	r3, #1
    cb78:	2300      	movhi	r3, #0
    cb7a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    cb7c:	7d3b      	ldrb	r3, [r7, #20]
    cb7e:	f362 1345 	bfi	r3, r2, #5, #1
    cb82:	753b      	strb	r3, [r7, #20]
    cb84:	7d7b      	ldrb	r3, [r7, #21]
    cb86:	2202      	movs	r2, #2
    cb88:	f362 1305 	bfi	r3, r2, #4, #2
    cb8c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    cb8e:	68bb      	ldr	r3, [r7, #8]
    cb90:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    cb92:	687b      	ldr	r3, [r7, #4]
    cb94:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    cb96:	2300      	movs	r3, #0
    cb98:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    cb9a:	687b      	ldr	r3, [r7, #4]
    cb9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    cba0:	2b00      	cmp	r3, #0
    cba2:	d104      	bne.n	cbae <n25q256a_erase+0x86>
    cba4:	68bb      	ldr	r3, [r7, #8]
    cba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    cbaa:	2b00      	cmp	r3, #0
    cbac:	d002      	beq.n	cbb4 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    cbae:	f06f 030c 	mvn.w	r3, #12
    cbb2:	e087      	b.n	ccc4 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    cbb4:	687b      	ldr	r3, [r7, #4]
    cbb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    cbba:	d368      	bcc.n	cc8e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    cbbc:	23c7      	movs	r3, #199	; 0xc7
    cbbe:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    cbc0:	7d3b      	ldrb	r3, [r7, #20]
    cbc2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cbc6:	b2db      	uxtb	r3, r3
    cbc8:	2201      	movs	r2, #1
    cbca:	4619      	mov	r1, r3
    cbcc:	68f8      	ldr	r0, [r7, #12]
    cbce:	4b40      	ldr	r3, [pc, #256]	; (ccd0 <n25q256a_erase+0x1a8>)
    cbd0:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    cbd2:	f107 0314 	add.w	r3, r7, #20
    cbd6:	4619      	mov	r1, r3
    cbd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cbda:	4b3e      	ldr	r3, [pc, #248]	; (ccd4 <n25q256a_erase+0x1ac>)
    cbdc:	4798      	blx	r3
    cbde:	e059      	b.n	cc94 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    cbe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbe2:	b29b      	uxth	r3, r3
    cbe4:	2b00      	cmp	r3, #0
    cbe6:	d11f      	bne.n	cc28 <n25q256a_erase+0x100>
    cbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cbea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    cbee:	d31b      	bcc.n	cc28 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    cbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbf2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    cbf4:	23d8      	movs	r3, #216	; 0xd8
    cbf6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    cbf8:	7d3b      	ldrb	r3, [r7, #20]
    cbfa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cbfe:	b2db      	uxtb	r3, r3
    cc00:	2201      	movs	r2, #1
    cc02:	4619      	mov	r1, r3
    cc04:	68f8      	ldr	r0, [r7, #12]
    cc06:	4b32      	ldr	r3, [pc, #200]	; (ccd0 <n25q256a_erase+0x1a8>)
    cc08:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    cc0a:	f107 0314 	add.w	r3, r7, #20
    cc0e:	4619      	mov	r1, r3
    cc10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cc12:	4b30      	ldr	r3, [pc, #192]	; (ccd4 <n25q256a_erase+0x1ac>)
    cc14:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    cc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cc18:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    cc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc20:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    cc24:	63bb      	str	r3, [r7, #56]	; 0x38
    cc26:	e023      	b.n	cc70 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    cc2e:	d31b      	bcc.n	cc68 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    cc30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cc32:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    cc34:	2320      	movs	r3, #32
    cc36:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    cc38:	7d3b      	ldrb	r3, [r7, #20]
    cc3a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cc3e:	b2db      	uxtb	r3, r3
    cc40:	2201      	movs	r2, #1
    cc42:	4619      	mov	r1, r3
    cc44:	68f8      	ldr	r0, [r7, #12]
    cc46:	4b22      	ldr	r3, [pc, #136]	; (ccd0 <n25q256a_erase+0x1a8>)
    cc48:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    cc4a:	f107 0314 	add.w	r3, r7, #20
    cc4e:	4619      	mov	r1, r3
    cc50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cc52:	4b20      	ldr	r3, [pc, #128]	; (ccd4 <n25q256a_erase+0x1ac>)
    cc54:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    cc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cc58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    cc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    cc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc60:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    cc64:	63bb      	str	r3, [r7, #56]	; 0x38
    cc66:	e003      	b.n	cc70 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    cc68:	f06f 030c 	mvn.w	r3, #12
    cc6c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    cc6e:	e011      	b.n	cc94 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    cc70:	bf00      	nop
    cc72:	7d3b      	ldrb	r3, [r7, #20]
    cc74:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cc78:	b2db      	uxtb	r3, r3
    cc7a:	2270      	movs	r2, #112	; 0x70
    cc7c:	4619      	mov	r1, r3
    cc7e:	68f8      	ldr	r0, [r7, #12]
    cc80:	4b15      	ldr	r3, [pc, #84]	; (ccd8 <n25q256a_erase+0x1b0>)
    cc82:	4798      	blx	r3
    cc84:	4603      	mov	r3, r0
    cc86:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cc8a:	2b00      	cmp	r3, #0
    cc8c:	d0f1      	beq.n	cc72 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc90:	2b00      	cmp	r3, #0
    cc92:	d1a5      	bne.n	cbe0 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    cc94:	bf00      	nop
    cc96:	7d3b      	ldrb	r3, [r7, #20]
    cc98:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cc9c:	b2db      	uxtb	r3, r3
    cc9e:	2270      	movs	r2, #112	; 0x70
    cca0:	4619      	mov	r1, r3
    cca2:	68f8      	ldr	r0, [r7, #12]
    cca4:	4b0c      	ldr	r3, [pc, #48]	; (ccd8 <n25q256a_erase+0x1b0>)
    cca6:	4798      	blx	r3
    cca8:	4603      	mov	r3, r0
    ccaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ccae:	2b00      	cmp	r3, #0
    ccb0:	d0f1      	beq.n	cc96 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ccb4:	7b5b      	ldrb	r3, [r3, #13]
    ccb6:	2b00      	cmp	r3, #0
    ccb8:	d003      	beq.n	ccc2 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    ccba:	2101      	movs	r1, #1
    ccbc:	68f8      	ldr	r0, [r7, #12]
    ccbe:	4b07      	ldr	r3, [pc, #28]	; (ccdc <n25q256a_erase+0x1b4>)
    ccc0:	4798      	blx	r3
	}
	return rc;
    ccc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    ccc4:	4618      	mov	r0, r3
    ccc6:	3740      	adds	r7, #64	; 0x40
    ccc8:	46bd      	mov	sp, r7
    ccca:	bd80      	pop	{r7, pc}
    cccc:	001fffff 	.word	0x001fffff
    ccd0:	0000c789 	.word	0x0000c789
    ccd4:	00003a75 	.word	0x00003a75
    ccd8:	0000c64d 	.word	0x0000c64d
    ccdc:	0000c581 	.word	0x0000c581

0000cce0 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    cce0:	b590      	push	{r4, r7, lr}
    cce2:	b085      	sub	sp, #20
    cce4:	af00      	add	r7, sp, #0
    cce6:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    cce8:	687b      	ldr	r3, [r7, #4]
    ccea:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ccec:	68fb      	ldr	r3, [r7, #12]
    ccee:	7b1b      	ldrb	r3, [r3, #12]
    ccf0:	2b00      	cmp	r3, #0
    ccf2:	d001      	beq.n	ccf8 <n25q256a_enable_xip+0x18>
    ccf4:	2306      	movs	r3, #6
    ccf6:	e000      	b.n	ccfa <n25q256a_enable_xip+0x1a>
    ccf8:	2300      	movs	r3, #0
    ccfa:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    ccfc:	68fb      	ldr	r3, [r7, #12]
    ccfe:	7b5b      	ldrb	r3, [r3, #13]
    cd00:	2b00      	cmp	r3, #0
    cd02:	d129      	bne.n	cd58 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    cd04:	7afb      	ldrb	r3, [r7, #11]
    cd06:	2285      	movs	r2, #133	; 0x85
    cd08:	4619      	mov	r1, r3
    cd0a:	6878      	ldr	r0, [r7, #4]
    cd0c:	4b15      	ldr	r3, [pc, #84]	; (cd64 <n25q256a_enable_xip+0x84>)
    cd0e:	4798      	blx	r3
    cd10:	4603      	mov	r3, r0
    cd12:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    cd14:	7abb      	ldrb	r3, [r7, #10]
    cd16:	f003 0308 	and.w	r3, r3, #8
    cd1a:	2b00      	cmp	r3, #0
    cd1c:	d015      	beq.n	cd4a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    cd1e:	7abb      	ldrb	r3, [r7, #10]
    cd20:	f023 0308 	bic.w	r3, r3, #8
    cd24:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    cd26:	7abb      	ldrb	r3, [r7, #10]
    cd28:	7af9      	ldrb	r1, [r7, #11]
    cd2a:	2281      	movs	r2, #129	; 0x81
    cd2c:	6878      	ldr	r0, [r7, #4]
    cd2e:	4c0e      	ldr	r4, [pc, #56]	; (cd68 <n25q256a_enable_xip+0x88>)
    cd30:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    cd32:	bf00      	nop
    cd34:	7afb      	ldrb	r3, [r7, #11]
    cd36:	2270      	movs	r2, #112	; 0x70
    cd38:	4619      	mov	r1, r3
    cd3a:	6878      	ldr	r0, [r7, #4]
    cd3c:	4b09      	ldr	r3, [pc, #36]	; (cd64 <n25q256a_enable_xip+0x84>)
    cd3e:	4798      	blx	r3
    cd40:	4603      	mov	r3, r0
    cd42:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cd46:	2b00      	cmp	r3, #0
    cd48:	d0f4      	beq.n	cd34 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    cd4a:	68fb      	ldr	r3, [r7, #12]
    cd4c:	2201      	movs	r2, #1
    cd4e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    cd50:	2101      	movs	r1, #1
    cd52:	6878      	ldr	r0, [r7, #4]
    cd54:	4b05      	ldr	r3, [pc, #20]	; (cd6c <n25q256a_enable_xip+0x8c>)
    cd56:	4798      	blx	r3
	}
	return ERR_NONE;
    cd58:	2300      	movs	r3, #0
}
    cd5a:	4618      	mov	r0, r3
    cd5c:	3714      	adds	r7, #20
    cd5e:	46bd      	mov	sp, r7
    cd60:	bd90      	pop	{r4, r7, pc}
    cd62:	bf00      	nop
    cd64:	0000c64d 	.word	0x0000c64d
    cd68:	0000c6e9 	.word	0x0000c6e9
    cd6c:	0000c581 	.word	0x0000c581

0000cd70 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    cd70:	b580      	push	{r7, lr}
    cd72:	b086      	sub	sp, #24
    cd74:	af00      	add	r7, sp, #0
    cd76:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    cd78:	687b      	ldr	r3, [r7, #4]
    cd7a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    cd7c:	687b      	ldr	r3, [r7, #4]
    cd7e:	681b      	ldr	r3, [r3, #0]
    cd80:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    cd82:	697b      	ldr	r3, [r7, #20]
    cd84:	7b1b      	ldrb	r3, [r3, #12]
    cd86:	2b00      	cmp	r3, #0
    cd88:	d001      	beq.n	cd8e <n25q256a_disable_xip+0x1e>
    cd8a:	2306      	movs	r3, #6
    cd8c:	e000      	b.n	cd90 <n25q256a_disable_xip+0x20>
    cd8e:	2300      	movs	r3, #0
    cd90:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    cd92:	2100      	movs	r1, #0
    cd94:	6878      	ldr	r0, [r7, #4]
    cd96:	4b15      	ldr	r3, [pc, #84]	; (cdec <n25q256a_disable_xip+0x7c>)
    cd98:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    cd9a:	7bfb      	ldrb	r3, [r7, #15]
    cd9c:	2285      	movs	r2, #133	; 0x85
    cd9e:	4619      	mov	r1, r3
    cda0:	6878      	ldr	r0, [r7, #4]
    cda2:	4b13      	ldr	r3, [pc, #76]	; (cdf0 <n25q256a_disable_xip+0x80>)
    cda4:	4798      	blx	r3
    cda6:	4603      	mov	r3, r0
    cda8:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    cdaa:	7bbb      	ldrb	r3, [r7, #14]
    cdac:	f003 0308 	and.w	r3, r3, #8
    cdb0:	2b00      	cmp	r3, #0
    cdb2:	d113      	bne.n	cddc <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    cdb4:	697b      	ldr	r3, [r7, #20]
    cdb6:	689b      	ldr	r3, [r3, #8]
    cdb8:	2b00      	cmp	r3, #0
    cdba:	d00f      	beq.n	cddc <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    cdbc:	693b      	ldr	r3, [r7, #16]
    cdbe:	681b      	ldr	r3, [r3, #0]
    cdc0:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    cdc2:	6938      	ldr	r0, [r7, #16]
    cdc4:	4b0b      	ldr	r3, [pc, #44]	; (cdf4 <n25q256a_disable_xip+0x84>)
    cdc6:	4798      	blx	r3
			n25q->pin_exit_xip();
    cdc8:	697b      	ldr	r3, [r7, #20]
    cdca:	689b      	ldr	r3, [r3, #8]
    cdcc:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    cdce:	68b9      	ldr	r1, [r7, #8]
    cdd0:	6938      	ldr	r0, [r7, #16]
    cdd2:	4b09      	ldr	r3, [pc, #36]	; (cdf8 <n25q256a_disable_xip+0x88>)
    cdd4:	4798      	blx	r3
			qspi_sync_enable(descr);
    cdd6:	6938      	ldr	r0, [r7, #16]
    cdd8:	4b08      	ldr	r3, [pc, #32]	; (cdfc <n25q256a_disable_xip+0x8c>)
    cdda:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    cddc:	697b      	ldr	r3, [r7, #20]
    cdde:	2200      	movs	r2, #0
    cde0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    cde2:	2300      	movs	r3, #0
}
    cde4:	4618      	mov	r0, r3
    cde6:	3718      	adds	r7, #24
    cde8:	46bd      	mov	sp, r7
    cdea:	bd80      	pop	{r7, pc}
    cdec:	0000c581 	.word	0x0000c581
    cdf0:	0000c64d 	.word	0x0000c64d
    cdf4:	00003a39 	.word	0x00003a39
    cdf8:	000039b1 	.word	0x000039b1
    cdfc:	000039fd 	.word	0x000039fd

0000ce00 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    ce00:	b480      	push	{r7}
    ce02:	b085      	sub	sp, #20
    ce04:	af00      	add	r7, sp, #0
    ce06:	60f8      	str	r0, [r7, #12]
    ce08:	60b9      	str	r1, [r7, #8]
    ce0a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    ce0c:	68fb      	ldr	r3, [r7, #12]
    ce0e:	68ba      	ldr	r2, [r7, #8]
    ce10:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    ce12:	68fb      	ldr	r3, [r7, #12]
    ce14:	687a      	ldr	r2, [r7, #4]
    ce16:	605a      	str	r2, [r3, #4]

	return me;
    ce18:	68fb      	ldr	r3, [r7, #12]
}
    ce1a:	4618      	mov	r0, r3
    ce1c:	3714      	adds	r7, #20
    ce1e:	46bd      	mov	sp, r7
    ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce24:	4770      	bx	lr

0000ce26 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    ce26:	b480      	push	{r7}
    ce28:	b083      	sub	sp, #12
    ce2a:	af00      	add	r7, sp, #0
    ce2c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ce2e:	687b      	ldr	r3, [r7, #4]
    ce30:	781b      	ldrb	r3, [r3, #0]
    ce32:	b29a      	uxth	r2, r3
    ce34:	687b      	ldr	r3, [r7, #4]
    ce36:	3301      	adds	r3, #1
    ce38:	781b      	ldrb	r3, [r3, #0]
    ce3a:	b29b      	uxth	r3, r3
    ce3c:	021b      	lsls	r3, r3, #8
    ce3e:	b29b      	uxth	r3, r3
    ce40:	4413      	add	r3, r2
    ce42:	b29b      	uxth	r3, r3
}
    ce44:	4618      	mov	r0, r3
    ce46:	370c      	adds	r7, #12
    ce48:	46bd      	mov	sp, r7
    ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce4e:	4770      	bx	lr

0000ce50 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    ce50:	b480      	push	{r7}
    ce52:	b083      	sub	sp, #12
    ce54:	af00      	add	r7, sp, #0
    ce56:	6078      	str	r0, [r7, #4]
	return desc[0];
    ce58:	687b      	ldr	r3, [r7, #4]
    ce5a:	781b      	ldrb	r3, [r3, #0]
}
    ce5c:	4618      	mov	r0, r3
    ce5e:	370c      	adds	r7, #12
    ce60:	46bd      	mov	sp, r7
    ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce66:	4770      	bx	lr

0000ce68 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    ce68:	b580      	push	{r7, lr}
    ce6a:	b082      	sub	sp, #8
    ce6c:	af00      	add	r7, sp, #0
    ce6e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ce70:	6878      	ldr	r0, [r7, #4]
    ce72:	4b05      	ldr	r3, [pc, #20]	; (ce88 <usb_desc_next+0x20>)
    ce74:	4798      	blx	r3
    ce76:	4603      	mov	r3, r0
    ce78:	461a      	mov	r2, r3
    ce7a:	687b      	ldr	r3, [r7, #4]
    ce7c:	4413      	add	r3, r2
}
    ce7e:	4618      	mov	r0, r3
    ce80:	3708      	adds	r7, #8
    ce82:	46bd      	mov	sp, r7
    ce84:	bd80      	pop	{r7, pc}
    ce86:	bf00      	nop
    ce88:	0000ce51 	.word	0x0000ce51

0000ce8c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    ce8c:	b580      	push	{r7, lr}
    ce8e:	b08c      	sub	sp, #48	; 0x30
    ce90:	af00      	add	r7, sp, #0
    ce92:	6078      	str	r0, [r7, #4]
    ce94:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    ce96:	687b      	ldr	r3, [r7, #4]
    ce98:	689b      	ldr	r3, [r3, #8]
    ce9a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    ce9c:	683b      	ldr	r3, [r7, #0]
    ce9e:	681b      	ldr	r3, [r3, #0]
    cea0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    cea2:	2300      	movs	r3, #0
    cea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cea8:	e08f      	b.n	cfca <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    ceaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ceac:	2b00      	cmp	r3, #0
    ceae:	d102      	bne.n	ceb6 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    ceb0:	f06f 0309 	mvn.w	r3, #9
    ceb4:	e092      	b.n	cfdc <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    ceb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ceb8:	789b      	ldrb	r3, [r3, #2]
    ceba:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cebe:	795b      	ldrb	r3, [r3, #5]
    cec0:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    cec2:	7c7b      	ldrb	r3, [r7, #17]
    cec4:	2b02      	cmp	r3, #2
    cec6:	d002      	beq.n	cece <cdcdf_acm_enable+0x42>
    cec8:	7c7b      	ldrb	r3, [r7, #17]
    ceca:	2b0a      	cmp	r3, #10
    cecc:	d121      	bne.n	cf12 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    cece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ced2:	6a3a      	ldr	r2, [r7, #32]
    ced4:	5cd2      	ldrb	r2, [r2, r3]
    ced6:	7bbb      	ldrb	r3, [r7, #14]
    ced8:	429a      	cmp	r2, r3
    ceda:	d102      	bne.n	cee2 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    cedc:	f06f 0311 	mvn.w	r3, #17
    cee0:	e07c      	b.n	cfdc <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    cee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    cee6:	6a3a      	ldr	r2, [r7, #32]
    cee8:	5cd3      	ldrb	r3, [r2, r3]
    ceea:	2bff      	cmp	r3, #255	; 0xff
    ceec:	d002      	beq.n	cef4 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    ceee:	f06f 031b 	mvn.w	r3, #27
    cef2:	e073      	b.n	cfdc <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    cef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    cef8:	7bb9      	ldrb	r1, [r7, #14]
    cefa:	6a3a      	ldr	r2, [r7, #32]
    cefc:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    cefe:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    cf00:	683b      	ldr	r3, [r7, #0]
    cf02:	685b      	ldr	r3, [r3, #4]
    cf04:	2205      	movs	r2, #5
    cf06:	4619      	mov	r1, r3
    cf08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cf0a:	4b36      	ldr	r3, [pc, #216]	; (cfe4 <cdcdf_acm_enable+0x158>)
    cf0c:	4798      	blx	r3
    cf0e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    cf10:	e047      	b.n	cfa2 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    cf12:	f06f 0309 	mvn.w	r3, #9
    cf16:	e061      	b.n	cfdc <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    cf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cf1a:	789b      	ldrb	r3, [r3, #2]
    cf1c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    cf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cf20:	78db      	ldrb	r3, [r3, #3]
    cf22:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    cf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cf26:	3304      	adds	r3, #4
    cf28:	4618      	mov	r0, r3
    cf2a:	4b2f      	ldr	r3, [pc, #188]	; (cfe8 <cdcdf_acm_enable+0x15c>)
    cf2c:	4798      	blx	r3
    cf2e:	4603      	mov	r3, r0
    cf30:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    cf32:	7ebb      	ldrb	r3, [r7, #26]
    cf34:	7ef9      	ldrb	r1, [r7, #27]
    cf36:	8bba      	ldrh	r2, [r7, #28]
    cf38:	4618      	mov	r0, r3
    cf3a:	4b2c      	ldr	r3, [pc, #176]	; (cfec <cdcdf_acm_enable+0x160>)
    cf3c:	4798      	blx	r3
    cf3e:	4603      	mov	r3, r0
    cf40:	2b00      	cmp	r3, #0
    cf42:	d002      	beq.n	cf4a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    cf44:	f06f 0313 	mvn.w	r3, #19
    cf48:	e048      	b.n	cfdc <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    cf4a:	7ebb      	ldrb	r3, [r7, #26]
    cf4c:	b25b      	sxtb	r3, r3
    cf4e:	2b00      	cmp	r3, #0
    cf50:	da0f      	bge.n	cf72 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    cf52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    cf56:	7eb9      	ldrb	r1, [r7, #26]
    cf58:	6a3a      	ldr	r2, [r7, #32]
    cf5a:	4413      	add	r3, r2
    cf5c:	460a      	mov	r2, r1
    cf5e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    cf60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    cf64:	6a3a      	ldr	r2, [r7, #32]
    cf66:	4413      	add	r3, r2
    cf68:	789b      	ldrb	r3, [r3, #2]
    cf6a:	4618      	mov	r0, r3
    cf6c:	4b20      	ldr	r3, [pc, #128]	; (cff0 <cdcdf_acm_enable+0x164>)
    cf6e:	4798      	blx	r3
    cf70:	e007      	b.n	cf82 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    cf72:	7eba      	ldrb	r2, [r7, #26]
    cf74:	6a3b      	ldr	r3, [r7, #32]
    cf76:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    cf78:	6a3b      	ldr	r3, [r7, #32]
    cf7a:	791b      	ldrb	r3, [r3, #4]
    cf7c:	4618      	mov	r0, r3
    cf7e:	4b1c      	ldr	r3, [pc, #112]	; (cff0 <cdcdf_acm_enable+0x164>)
    cf80:	4798      	blx	r3
			}
			desc->sod = ep;
    cf82:	683b      	ldr	r3, [r7, #0]
    cf84:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cf86:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    cf88:	683b      	ldr	r3, [r7, #0]
    cf8a:	681b      	ldr	r3, [r3, #0]
    cf8c:	4618      	mov	r0, r3
    cf8e:	4b19      	ldr	r3, [pc, #100]	; (cff4 <cdcdf_acm_enable+0x168>)
    cf90:	4798      	blx	r3
    cf92:	4602      	mov	r2, r0
    cf94:	683b      	ldr	r3, [r7, #0]
    cf96:	685b      	ldr	r3, [r3, #4]
    cf98:	4619      	mov	r1, r3
    cf9a:	4610      	mov	r0, r2
    cf9c:	4b16      	ldr	r3, [pc, #88]	; (cff8 <cdcdf_acm_enable+0x16c>)
    cf9e:	4798      	blx	r3
    cfa0:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    cfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	d1b7      	bne.n	cf18 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    cfa8:	683b      	ldr	r3, [r7, #0]
    cfaa:	681b      	ldr	r3, [r3, #0]
    cfac:	4618      	mov	r0, r3
    cfae:	4b11      	ldr	r3, [pc, #68]	; (cff4 <cdcdf_acm_enable+0x168>)
    cfb0:	4798      	blx	r3
    cfb2:	683b      	ldr	r3, [r7, #0]
    cfb4:	685b      	ldr	r3, [r3, #4]
    cfb6:	2204      	movs	r2, #4
    cfb8:	4619      	mov	r1, r3
    cfba:	4b0a      	ldr	r3, [pc, #40]	; (cfe4 <cdcdf_acm_enable+0x158>)
    cfbc:	4798      	blx	r3
    cfbe:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    cfc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    cfc4:	3301      	adds	r3, #1
    cfc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cfca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    cfce:	2b01      	cmp	r3, #1
    cfd0:	f67f af6b 	bls.w	ceaa <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    cfd4:	4b09      	ldr	r3, [pc, #36]	; (cffc <cdcdf_acm_enable+0x170>)
    cfd6:	2201      	movs	r2, #1
    cfd8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    cfda:	2300      	movs	r3, #0
}
    cfdc:	4618      	mov	r0, r3
    cfde:	3730      	adds	r7, #48	; 0x30
    cfe0:	46bd      	mov	sp, r7
    cfe2:	bd80      	pop	{r7, pc}
    cfe4:	0000e24d 	.word	0x0000e24d
    cfe8:	0000ce27 	.word	0x0000ce27
    cfec:	00004629 	.word	0x00004629
    cff0:	00004715 	.word	0x00004715
    cff4:	0000ce69 	.word	0x0000ce69
    cff8:	0000e2a9 	.word	0x0000e2a9
    cffc:	20000e3c 	.word	0x20000e3c

0000d000 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    d000:	b580      	push	{r7, lr}
    d002:	b088      	sub	sp, #32
    d004:	af00      	add	r7, sp, #0
    d006:	6078      	str	r0, [r7, #4]
    d008:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    d00a:	687b      	ldr	r3, [r7, #4]
    d00c:	689b      	ldr	r3, [r3, #8]
    d00e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    d010:	683b      	ldr	r3, [r7, #0]
    d012:	2b00      	cmp	r3, #0
    d014:	d00c      	beq.n	d030 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    d016:	683b      	ldr	r3, [r7, #0]
    d018:	681b      	ldr	r3, [r3, #0]
    d01a:	795b      	ldrb	r3, [r3, #5]
    d01c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    d01e:	7c7b      	ldrb	r3, [r7, #17]
    d020:	2b02      	cmp	r3, #2
    d022:	d005      	beq.n	d030 <cdcdf_acm_disable+0x30>
    d024:	7c7b      	ldrb	r3, [r7, #17]
    d026:	2b0a      	cmp	r3, #10
    d028:	d002      	beq.n	d030 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    d02a:	f06f 0309 	mvn.w	r3, #9
    d02e:	e035      	b.n	d09c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    d030:	2300      	movs	r3, #0
    d032:	77fb      	strb	r3, [r7, #31]
    d034:	e01f      	b.n	d076 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    d036:	7ffb      	ldrb	r3, [r7, #31]
    d038:	69ba      	ldr	r2, [r7, #24]
    d03a:	5cd3      	ldrb	r3, [r2, r3]
    d03c:	2bff      	cmp	r3, #255	; 0xff
    d03e:	d016      	beq.n	d06e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    d040:	7ffb      	ldrb	r3, [r7, #31]
    d042:	69ba      	ldr	r2, [r7, #24]
    d044:	21ff      	movs	r1, #255	; 0xff
    d046:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    d048:	7ffb      	ldrb	r3, [r7, #31]
    d04a:	69ba      	ldr	r2, [r7, #24]
    d04c:	4413      	add	r3, r2
    d04e:	789b      	ldrb	r3, [r3, #2]
    d050:	2bff      	cmp	r3, #255	; 0xff
    d052:	d00d      	beq.n	d070 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    d054:	7ffb      	ldrb	r3, [r7, #31]
    d056:	69ba      	ldr	r2, [r7, #24]
    d058:	4413      	add	r3, r2
    d05a:	789b      	ldrb	r3, [r3, #2]
    d05c:	4618      	mov	r0, r3
    d05e:	4b11      	ldr	r3, [pc, #68]	; (d0a4 <cdcdf_acm_disable+0xa4>)
    d060:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    d062:	7ffb      	ldrb	r3, [r7, #31]
    d064:	69ba      	ldr	r2, [r7, #24]
    d066:	4413      	add	r3, r2
    d068:	22ff      	movs	r2, #255	; 0xff
    d06a:	709a      	strb	r2, [r3, #2]
    d06c:	e000      	b.n	d070 <cdcdf_acm_disable+0x70>
			continue;
    d06e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    d070:	7ffb      	ldrb	r3, [r7, #31]
    d072:	3301      	adds	r3, #1
    d074:	77fb      	strb	r3, [r7, #31]
    d076:	7ffb      	ldrb	r3, [r7, #31]
    d078:	2b01      	cmp	r3, #1
    d07a:	d9dc      	bls.n	d036 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    d07c:	69bb      	ldr	r3, [r7, #24]
    d07e:	791b      	ldrb	r3, [r3, #4]
    d080:	2bff      	cmp	r3, #255	; 0xff
    d082:	d007      	beq.n	d094 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    d084:	69bb      	ldr	r3, [r7, #24]
    d086:	791b      	ldrb	r3, [r3, #4]
    d088:	4618      	mov	r0, r3
    d08a:	4b06      	ldr	r3, [pc, #24]	; (d0a4 <cdcdf_acm_disable+0xa4>)
    d08c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    d08e:	69bb      	ldr	r3, [r7, #24]
    d090:	22ff      	movs	r2, #255	; 0xff
    d092:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    d094:	4b04      	ldr	r3, [pc, #16]	; (d0a8 <cdcdf_acm_disable+0xa8>)
    d096:	2200      	movs	r2, #0
    d098:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    d09a:	2300      	movs	r3, #0
}
    d09c:	4618      	mov	r0, r3
    d09e:	3720      	adds	r7, #32
    d0a0:	46bd      	mov	sp, r7
    d0a2:	bd80      	pop	{r7, pc}
    d0a4:	000046c5 	.word	0x000046c5
    d0a8:	20000e3c 	.word	0x20000e3c

0000d0ac <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    d0ac:	b580      	push	{r7, lr}
    d0ae:	b084      	sub	sp, #16
    d0b0:	af00      	add	r7, sp, #0
    d0b2:	60f8      	str	r0, [r7, #12]
    d0b4:	460b      	mov	r3, r1
    d0b6:	607a      	str	r2, [r7, #4]
    d0b8:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    d0ba:	7afb      	ldrb	r3, [r7, #11]
    d0bc:	2b01      	cmp	r3, #1
    d0be:	d009      	beq.n	d0d4 <cdcdf_acm_ctrl+0x28>
    d0c0:	2b02      	cmp	r3, #2
    d0c2:	d00d      	beq.n	d0e0 <cdcdf_acm_ctrl+0x34>
    d0c4:	2b00      	cmp	r3, #0
    d0c6:	d10e      	bne.n	d0e6 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    d0c8:	6879      	ldr	r1, [r7, #4]
    d0ca:	68f8      	ldr	r0, [r7, #12]
    d0cc:	4b09      	ldr	r3, [pc, #36]	; (d0f4 <cdcdf_acm_ctrl+0x48>)
    d0ce:	4798      	blx	r3
    d0d0:	4603      	mov	r3, r0
    d0d2:	e00a      	b.n	d0ea <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    d0d4:	6879      	ldr	r1, [r7, #4]
    d0d6:	68f8      	ldr	r0, [r7, #12]
    d0d8:	4b07      	ldr	r3, [pc, #28]	; (d0f8 <cdcdf_acm_ctrl+0x4c>)
    d0da:	4798      	blx	r3
    d0dc:	4603      	mov	r3, r0
    d0de:	e004      	b.n	d0ea <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    d0e0:	f06f 031a 	mvn.w	r3, #26
    d0e4:	e001      	b.n	d0ea <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    d0e6:	f06f 030c 	mvn.w	r3, #12
	}
}
    d0ea:	4618      	mov	r0, r3
    d0ec:	3710      	adds	r7, #16
    d0ee:	46bd      	mov	sp, r7
    d0f0:	bd80      	pop	{r7, pc}
    d0f2:	bf00      	nop
    d0f4:	0000ce8d 	.word	0x0000ce8d
    d0f8:	0000d001 	.word	0x0000d001

0000d0fc <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d0fc:	b590      	push	{r4, r7, lr}
    d0fe:	b087      	sub	sp, #28
    d100:	af00      	add	r7, sp, #0
    d102:	4603      	mov	r3, r0
    d104:	6039      	str	r1, [r7, #0]
    d106:	71fb      	strb	r3, [r7, #7]
    d108:	4613      	mov	r3, r2
    d10a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    d10c:	683b      	ldr	r3, [r7, #0]
    d10e:	799a      	ldrb	r2, [r3, #6]
    d110:	79db      	ldrb	r3, [r3, #7]
    d112:	021b      	lsls	r3, r3, #8
    d114:	4313      	orrs	r3, r2
    d116:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    d118:	4b2b      	ldr	r3, [pc, #172]	; (d1c8 <cdcdf_acm_set_req+0xcc>)
    d11a:	4798      	blx	r3
    d11c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    d11e:	683b      	ldr	r3, [r7, #0]
    d120:	785b      	ldrb	r3, [r3, #1]
    d122:	2b20      	cmp	r3, #32
    d124:	d002      	beq.n	d12c <cdcdf_acm_set_req+0x30>
    d126:	2b22      	cmp	r3, #34	; 0x22
    d128:	d034      	beq.n	d194 <cdcdf_acm_set_req+0x98>
    d12a:	e046      	b.n	d1ba <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    d12c:	8afb      	ldrh	r3, [r7, #22]
    d12e:	2b07      	cmp	r3, #7
    d130:	d002      	beq.n	d138 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    d132:	f04f 33ff 	mov.w	r3, #4294967295
    d136:	e042      	b.n	d1be <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    d138:	79bb      	ldrb	r3, [r7, #6]
    d13a:	2b00      	cmp	r3, #0
    d13c:	d107      	bne.n	d14e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    d13e:	8afa      	ldrh	r2, [r7, #22]
    d140:	79f8      	ldrb	r0, [r7, #7]
    d142:	2300      	movs	r3, #0
    d144:	6939      	ldr	r1, [r7, #16]
    d146:	4c21      	ldr	r4, [pc, #132]	; (d1cc <cdcdf_acm_set_req+0xd0>)
    d148:	47a0      	blx	r4
    d14a:	4603      	mov	r3, r0
    d14c:	e037      	b.n	d1be <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    d14e:	693a      	ldr	r2, [r7, #16]
    d150:	f107 0308 	add.w	r3, r7, #8
    d154:	6810      	ldr	r0, [r2, #0]
    d156:	6018      	str	r0, [r3, #0]
    d158:	8891      	ldrh	r1, [r2, #4]
    d15a:	7992      	ldrb	r2, [r2, #6]
    d15c:	8099      	strh	r1, [r3, #4]
    d15e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    d160:	4b1b      	ldr	r3, [pc, #108]	; (d1d0 <cdcdf_acm_set_req+0xd4>)
    d162:	681b      	ldr	r3, [r3, #0]
    d164:	2b00      	cmp	r3, #0
    d166:	d008      	beq.n	d17a <cdcdf_acm_set_req+0x7e>
    d168:	4b19      	ldr	r3, [pc, #100]	; (d1d0 <cdcdf_acm_set_req+0xd4>)
    d16a:	681b      	ldr	r3, [r3, #0]
    d16c:	f107 0208 	add.w	r2, r7, #8
    d170:	4610      	mov	r0, r2
    d172:	4798      	blx	r3
    d174:	4603      	mov	r3, r0
    d176:	2b00      	cmp	r3, #0
    d178:	d00a      	beq.n	d190 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    d17a:	4b16      	ldr	r3, [pc, #88]	; (d1d4 <cdcdf_acm_set_req+0xd8>)
    d17c:	f107 0208 	add.w	r2, r7, #8
    d180:	e892 0003 	ldmia.w	r2, {r0, r1}
    d184:	6018      	str	r0, [r3, #0]
    d186:	3304      	adds	r3, #4
    d188:	8019      	strh	r1, [r3, #0]
    d18a:	3302      	adds	r3, #2
    d18c:	0c0a      	lsrs	r2, r1, #16
    d18e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    d190:	2300      	movs	r3, #0
    d192:	e014      	b.n	d1be <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    d194:	2300      	movs	r3, #0
    d196:	2200      	movs	r2, #0
    d198:	2100      	movs	r1, #0
    d19a:	2000      	movs	r0, #0
    d19c:	4c0b      	ldr	r4, [pc, #44]	; (d1cc <cdcdf_acm_set_req+0xd0>)
    d19e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    d1a0:	4b0d      	ldr	r3, [pc, #52]	; (d1d8 <cdcdf_acm_set_req+0xdc>)
    d1a2:	681b      	ldr	r3, [r3, #0]
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	d006      	beq.n	d1b6 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    d1a8:	4b0b      	ldr	r3, [pc, #44]	; (d1d8 <cdcdf_acm_set_req+0xdc>)
    d1aa:	681b      	ldr	r3, [r3, #0]
    d1ac:	683a      	ldr	r2, [r7, #0]
    d1ae:	8852      	ldrh	r2, [r2, #2]
    d1b0:	b292      	uxth	r2, r2
    d1b2:	4610      	mov	r0, r2
    d1b4:	4798      	blx	r3
		}
		return ERR_NONE;
    d1b6:	2300      	movs	r3, #0
    d1b8:	e001      	b.n	d1be <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    d1ba:	f06f 030c 	mvn.w	r3, #12
	}
}
    d1be:	4618      	mov	r0, r3
    d1c0:	371c      	adds	r7, #28
    d1c2:	46bd      	mov	sp, r7
    d1c4:	bd90      	pop	{r4, r7, pc}
    d1c6:	bf00      	nop
    d1c8:	0000e149 	.word	0x0000e149
    d1cc:	0000dfbd 	.word	0x0000dfbd
    d1d0:	20000e50 	.word	0x20000e50
    d1d4:	20000e44 	.word	0x20000e44
    d1d8:	20000e4c 	.word	0x20000e4c

0000d1dc <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d1dc:	b590      	push	{r4, r7, lr}
    d1de:	b085      	sub	sp, #20
    d1e0:	af00      	add	r7, sp, #0
    d1e2:	4603      	mov	r3, r0
    d1e4:	6039      	str	r1, [r7, #0]
    d1e6:	71fb      	strb	r3, [r7, #7]
    d1e8:	4613      	mov	r3, r2
    d1ea:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    d1ec:	683b      	ldr	r3, [r7, #0]
    d1ee:	799a      	ldrb	r2, [r3, #6]
    d1f0:	79db      	ldrb	r3, [r3, #7]
    d1f2:	021b      	lsls	r3, r3, #8
    d1f4:	4313      	orrs	r3, r2
    d1f6:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    d1f8:	79bb      	ldrb	r3, [r7, #6]
    d1fa:	2b01      	cmp	r3, #1
    d1fc:	d101      	bne.n	d202 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    d1fe:	2300      	movs	r3, #0
    d200:	e013      	b.n	d22a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    d202:	683b      	ldr	r3, [r7, #0]
    d204:	785b      	ldrb	r3, [r3, #1]
    d206:	2b21      	cmp	r3, #33	; 0x21
    d208:	d10d      	bne.n	d226 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    d20a:	89fb      	ldrh	r3, [r7, #14]
    d20c:	2b07      	cmp	r3, #7
    d20e:	d002      	beq.n	d216 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    d210:	f04f 33ff 	mov.w	r3, #4294967295
    d214:	e009      	b.n	d22a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    d216:	89fa      	ldrh	r2, [r7, #14]
    d218:	79f8      	ldrb	r0, [r7, #7]
    d21a:	2300      	movs	r3, #0
    d21c:	4905      	ldr	r1, [pc, #20]	; (d234 <cdcdf_acm_get_req+0x58>)
    d21e:	4c06      	ldr	r4, [pc, #24]	; (d238 <cdcdf_acm_get_req+0x5c>)
    d220:	47a0      	blx	r4
    d222:	4603      	mov	r3, r0
    d224:	e001      	b.n	d22a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    d226:	f06f 030c 	mvn.w	r3, #12
	}
}
    d22a:	4618      	mov	r0, r3
    d22c:	3714      	adds	r7, #20
    d22e:	46bd      	mov	sp, r7
    d230:	bd90      	pop	{r4, r7, pc}
    d232:	bf00      	nop
    d234:	20000e44 	.word	0x20000e44
    d238:	0000dfbd 	.word	0x0000dfbd

0000d23c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d23c:	b580      	push	{r7, lr}
    d23e:	b082      	sub	sp, #8
    d240:	af00      	add	r7, sp, #0
    d242:	4603      	mov	r3, r0
    d244:	6039      	str	r1, [r7, #0]
    d246:	71fb      	strb	r3, [r7, #7]
    d248:	4613      	mov	r3, r2
    d24a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    d24c:	683b      	ldr	r3, [r7, #0]
    d24e:	781b      	ldrb	r3, [r3, #0]
    d250:	095b      	lsrs	r3, r3, #5
    d252:	b2db      	uxtb	r3, r3
    d254:	f003 0303 	and.w	r3, r3, #3
    d258:	2b01      	cmp	r3, #1
    d25a:	d002      	beq.n	d262 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    d25c:	f06f 0309 	mvn.w	r3, #9
    d260:	e026      	b.n	d2b0 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    d262:	683b      	ldr	r3, [r7, #0]
    d264:	889b      	ldrh	r3, [r3, #4]
    d266:	b29a      	uxth	r2, r3
    d268:	4b13      	ldr	r3, [pc, #76]	; (d2b8 <cdcdf_acm_req+0x7c>)
    d26a:	781b      	ldrb	r3, [r3, #0]
    d26c:	b29b      	uxth	r3, r3
    d26e:	429a      	cmp	r2, r3
    d270:	d007      	beq.n	d282 <cdcdf_acm_req+0x46>
    d272:	683b      	ldr	r3, [r7, #0]
    d274:	889b      	ldrh	r3, [r3, #4]
    d276:	b29a      	uxth	r2, r3
    d278:	4b0f      	ldr	r3, [pc, #60]	; (d2b8 <cdcdf_acm_req+0x7c>)
    d27a:	785b      	ldrb	r3, [r3, #1]
    d27c:	b29b      	uxth	r3, r3
    d27e:	429a      	cmp	r2, r3
    d280:	d114      	bne.n	d2ac <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    d282:	683b      	ldr	r3, [r7, #0]
    d284:	781b      	ldrb	r3, [r3, #0]
    d286:	b25b      	sxtb	r3, r3
    d288:	2b00      	cmp	r3, #0
    d28a:	da07      	bge.n	d29c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    d28c:	79ba      	ldrb	r2, [r7, #6]
    d28e:	79fb      	ldrb	r3, [r7, #7]
    d290:	6839      	ldr	r1, [r7, #0]
    d292:	4618      	mov	r0, r3
    d294:	4b09      	ldr	r3, [pc, #36]	; (d2bc <cdcdf_acm_req+0x80>)
    d296:	4798      	blx	r3
    d298:	4603      	mov	r3, r0
    d29a:	e009      	b.n	d2b0 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    d29c:	79ba      	ldrb	r2, [r7, #6]
    d29e:	79fb      	ldrb	r3, [r7, #7]
    d2a0:	6839      	ldr	r1, [r7, #0]
    d2a2:	4618      	mov	r0, r3
    d2a4:	4b06      	ldr	r3, [pc, #24]	; (d2c0 <cdcdf_acm_req+0x84>)
    d2a6:	4798      	blx	r3
    d2a8:	4603      	mov	r3, r0
    d2aa:	e001      	b.n	d2b0 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    d2ac:	f06f 0309 	mvn.w	r3, #9
	}
}
    d2b0:	4618      	mov	r0, r3
    d2b2:	3708      	adds	r7, #8
    d2b4:	46bd      	mov	sp, r7
    d2b6:	bd80      	pop	{r7, pc}
    d2b8:	20000e3c 	.word	0x20000e3c
    d2bc:	0000d1dd 	.word	0x0000d1dd
    d2c0:	0000d0fd 	.word	0x0000d0fd

0000d2c4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    d2c4:	b580      	push	{r7, lr}
    d2c6:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    d2c8:	4b0b      	ldr	r3, [pc, #44]	; (d2f8 <cdcdf_acm_init+0x34>)
    d2ca:	4798      	blx	r3
    d2cc:	4603      	mov	r3, r0
    d2ce:	2b01      	cmp	r3, #1
    d2d0:	d902      	bls.n	d2d8 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    d2d2:	f06f 0310 	mvn.w	r3, #16
    d2d6:	e00d      	b.n	d2f4 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    d2d8:	4b08      	ldr	r3, [pc, #32]	; (d2fc <cdcdf_acm_init+0x38>)
    d2da:	4a09      	ldr	r2, [pc, #36]	; (d300 <cdcdf_acm_init+0x3c>)
    d2dc:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    d2de:	4b07      	ldr	r3, [pc, #28]	; (d2fc <cdcdf_acm_init+0x38>)
    d2e0:	4a08      	ldr	r2, [pc, #32]	; (d304 <cdcdf_acm_init+0x40>)
    d2e2:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    d2e4:	4805      	ldr	r0, [pc, #20]	; (d2fc <cdcdf_acm_init+0x38>)
    d2e6:	4b08      	ldr	r3, [pc, #32]	; (d308 <cdcdf_acm_init+0x44>)
    d2e8:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    d2ea:	4908      	ldr	r1, [pc, #32]	; (d30c <cdcdf_acm_init+0x48>)
    d2ec:	2001      	movs	r0, #1
    d2ee:	4b08      	ldr	r3, [pc, #32]	; (d310 <cdcdf_acm_init+0x4c>)
    d2f0:	4798      	blx	r3
	return ERR_NONE;
    d2f2:	2300      	movs	r3, #0
}
    d2f4:	4618      	mov	r0, r3
    d2f6:	bd80      	pop	{r7, pc}
    d2f8:	0000e161 	.word	0x0000e161
    d2fc:	20000e30 	.word	0x20000e30
    d300:	0000d0ad 	.word	0x0000d0ad
    d304:	20000e3c 	.word	0x20000e3c
    d308:	0000e0c9 	.word	0x0000e0c9
    d30c:	200001d8 	.word	0x200001d8
    d310:	0000dff9 	.word	0x0000dff9

0000d314 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    d314:	b590      	push	{r4, r7, lr}
    d316:	b083      	sub	sp, #12
    d318:	af00      	add	r7, sp, #0
    d31a:	6078      	str	r0, [r7, #4]
    d31c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    d31e:	4b0b      	ldr	r3, [pc, #44]	; (d34c <cdcdf_acm_read+0x38>)
    d320:	4798      	blx	r3
    d322:	4603      	mov	r3, r0
    d324:	f083 0301 	eor.w	r3, r3, #1
    d328:	b2db      	uxtb	r3, r3
    d32a:	2b00      	cmp	r3, #0
    d32c:	d002      	beq.n	d334 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    d32e:	f06f 0310 	mvn.w	r3, #16
    d332:	e007      	b.n	d344 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    d334:	4b06      	ldr	r3, [pc, #24]	; (d350 <cdcdf_acm_read+0x3c>)
    d336:	7918      	ldrb	r0, [r3, #4]
    d338:	2300      	movs	r3, #0
    d33a:	683a      	ldr	r2, [r7, #0]
    d33c:	6879      	ldr	r1, [r7, #4]
    d33e:	4c05      	ldr	r4, [pc, #20]	; (d354 <cdcdf_acm_read+0x40>)
    d340:	47a0      	blx	r4
    d342:	4603      	mov	r3, r0
}
    d344:	4618      	mov	r0, r3
    d346:	370c      	adds	r7, #12
    d348:	46bd      	mov	sp, r7
    d34a:	bd90      	pop	{r4, r7, pc}
    d34c:	0000d439 	.word	0x0000d439
    d350:	20000e3c 	.word	0x20000e3c
    d354:	0000dfbd 	.word	0x0000dfbd

0000d358 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    d358:	b590      	push	{r4, r7, lr}
    d35a:	b083      	sub	sp, #12
    d35c:	af00      	add	r7, sp, #0
    d35e:	6078      	str	r0, [r7, #4]
    d360:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    d362:	4b0b      	ldr	r3, [pc, #44]	; (d390 <cdcdf_acm_write+0x38>)
    d364:	4798      	blx	r3
    d366:	4603      	mov	r3, r0
    d368:	f083 0301 	eor.w	r3, r3, #1
    d36c:	b2db      	uxtb	r3, r3
    d36e:	2b00      	cmp	r3, #0
    d370:	d002      	beq.n	d378 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    d372:	f06f 0310 	mvn.w	r3, #16
    d376:	e007      	b.n	d388 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    d378:	4b06      	ldr	r3, [pc, #24]	; (d394 <cdcdf_acm_write+0x3c>)
    d37a:	78d8      	ldrb	r0, [r3, #3]
    d37c:	2301      	movs	r3, #1
    d37e:	683a      	ldr	r2, [r7, #0]
    d380:	6879      	ldr	r1, [r7, #4]
    d382:	4c05      	ldr	r4, [pc, #20]	; (d398 <cdcdf_acm_write+0x40>)
    d384:	47a0      	blx	r4
    d386:	4603      	mov	r3, r0
}
    d388:	4618      	mov	r0, r3
    d38a:	370c      	adds	r7, #12
    d38c:	46bd      	mov	sp, r7
    d38e:	bd90      	pop	{r4, r7, pc}
    d390:	0000d439 	.word	0x0000d439
    d394:	20000e3c 	.word	0x20000e3c
    d398:	0000dfbd 	.word	0x0000dfbd

0000d39c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    d39c:	b580      	push	{r7, lr}
    d39e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    d3a0:	4b05      	ldr	r3, [pc, #20]	; (d3b8 <cdcdf_acm_stop_xfer+0x1c>)
    d3a2:	78db      	ldrb	r3, [r3, #3]
    d3a4:	4618      	mov	r0, r3
    d3a6:	4b05      	ldr	r3, [pc, #20]	; (d3bc <cdcdf_acm_stop_xfer+0x20>)
    d3a8:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    d3aa:	4b03      	ldr	r3, [pc, #12]	; (d3b8 <cdcdf_acm_stop_xfer+0x1c>)
    d3ac:	791b      	ldrb	r3, [r3, #4]
    d3ae:	4618      	mov	r0, r3
    d3b0:	4b02      	ldr	r3, [pc, #8]	; (d3bc <cdcdf_acm_stop_xfer+0x20>)
    d3b2:	4798      	blx	r3
}
    d3b4:	bf00      	nop
    d3b6:	bd80      	pop	{r7, pc}
    d3b8:	20000e3c 	.word	0x20000e3c
    d3bc:	000048ed 	.word	0x000048ed

0000d3c0 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    d3c0:	b580      	push	{r7, lr}
    d3c2:	b082      	sub	sp, #8
    d3c4:	af00      	add	r7, sp, #0
    d3c6:	4603      	mov	r3, r0
    d3c8:	6039      	str	r1, [r7, #0]
    d3ca:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    d3cc:	79fb      	ldrb	r3, [r7, #7]
    d3ce:	2b03      	cmp	r3, #3
    d3d0:	d822      	bhi.n	d418 <cdcdf_acm_register_callback+0x58>
    d3d2:	a201      	add	r2, pc, #4	; (adr r2, d3d8 <cdcdf_acm_register_callback+0x18>)
    d3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d3d8:	0000d3e9 	.word	0x0000d3e9
    d3dc:	0000d3f9 	.word	0x0000d3f9
    d3e0:	0000d409 	.word	0x0000d409
    d3e4:	0000d411 	.word	0x0000d411
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    d3e8:	4b0f      	ldr	r3, [pc, #60]	; (d428 <cdcdf_acm_register_callback+0x68>)
    d3ea:	791b      	ldrb	r3, [r3, #4]
    d3ec:	683a      	ldr	r2, [r7, #0]
    d3ee:	2102      	movs	r1, #2
    d3f0:	4618      	mov	r0, r3
    d3f2:	4b0e      	ldr	r3, [pc, #56]	; (d42c <cdcdf_acm_register_callback+0x6c>)
    d3f4:	4798      	blx	r3
		break;
    d3f6:	e012      	b.n	d41e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    d3f8:	4b0b      	ldr	r3, [pc, #44]	; (d428 <cdcdf_acm_register_callback+0x68>)
    d3fa:	78db      	ldrb	r3, [r3, #3]
    d3fc:	683a      	ldr	r2, [r7, #0]
    d3fe:	2102      	movs	r1, #2
    d400:	4618      	mov	r0, r3
    d402:	4b0a      	ldr	r3, [pc, #40]	; (d42c <cdcdf_acm_register_callback+0x6c>)
    d404:	4798      	blx	r3
		break;
    d406:	e00a      	b.n	d41e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    d408:	4a09      	ldr	r2, [pc, #36]	; (d430 <cdcdf_acm_register_callback+0x70>)
    d40a:	683b      	ldr	r3, [r7, #0]
    d40c:	6013      	str	r3, [r2, #0]
		break;
    d40e:	e006      	b.n	d41e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    d410:	4a08      	ldr	r2, [pc, #32]	; (d434 <cdcdf_acm_register_callback+0x74>)
    d412:	683b      	ldr	r3, [r7, #0]
    d414:	6013      	str	r3, [r2, #0]
		break;
    d416:	e002      	b.n	d41e <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    d418:	f06f 030c 	mvn.w	r3, #12
    d41c:	e000      	b.n	d420 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    d41e:	2300      	movs	r3, #0
}
    d420:	4618      	mov	r0, r3
    d422:	3708      	adds	r7, #8
    d424:	46bd      	mov	sp, r7
    d426:	bd80      	pop	{r7, pc}
    d428:	20000e3c 	.word	0x20000e3c
    d42c:	00004a19 	.word	0x00004a19
    d430:	20000e50 	.word	0x20000e50
    d434:	20000e4c 	.word	0x20000e4c

0000d438 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    d438:	b480      	push	{r7}
    d43a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    d43c:	4b03      	ldr	r3, [pc, #12]	; (d44c <cdcdf_acm_is_enabled+0x14>)
    d43e:	795b      	ldrb	r3, [r3, #5]
}
    d440:	4618      	mov	r0, r3
    d442:	46bd      	mov	sp, r7
    d444:	f85d 7b04 	ldr.w	r7, [sp], #4
    d448:	4770      	bx	lr
    d44a:	bf00      	nop
    d44c:	20000e3c 	.word	0x20000e3c

0000d450 <usb_get_u16>:
{
    d450:	b480      	push	{r7}
    d452:	b083      	sub	sp, #12
    d454:	af00      	add	r7, sp, #0
    d456:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d458:	687b      	ldr	r3, [r7, #4]
    d45a:	781b      	ldrb	r3, [r3, #0]
    d45c:	b29a      	uxth	r2, r3
    d45e:	687b      	ldr	r3, [r7, #4]
    d460:	3301      	adds	r3, #1
    d462:	781b      	ldrb	r3, [r3, #0]
    d464:	b29b      	uxth	r3, r3
    d466:	021b      	lsls	r3, r3, #8
    d468:	b29b      	uxth	r3, r3
    d46a:	4413      	add	r3, r2
    d46c:	b29b      	uxth	r3, r3
}
    d46e:	4618      	mov	r0, r3
    d470:	370c      	adds	r7, #12
    d472:	46bd      	mov	sp, r7
    d474:	f85d 7b04 	ldr.w	r7, [sp], #4
    d478:	4770      	bx	lr

0000d47a <usb_desc_len>:
{
    d47a:	b480      	push	{r7}
    d47c:	b083      	sub	sp, #12
    d47e:	af00      	add	r7, sp, #0
    d480:	6078      	str	r0, [r7, #4]
	return desc[0];
    d482:	687b      	ldr	r3, [r7, #4]
    d484:	781b      	ldrb	r3, [r3, #0]
}
    d486:	4618      	mov	r0, r3
    d488:	370c      	adds	r7, #12
    d48a:	46bd      	mov	sp, r7
    d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d490:	4770      	bx	lr
	...

0000d494 <usb_desc_next>:
{
    d494:	b580      	push	{r7, lr}
    d496:	b082      	sub	sp, #8
    d498:	af00      	add	r7, sp, #0
    d49a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d49c:	6878      	ldr	r0, [r7, #4]
    d49e:	4b05      	ldr	r3, [pc, #20]	; (d4b4 <usb_desc_next+0x20>)
    d4a0:	4798      	blx	r3
    d4a2:	4603      	mov	r3, r0
    d4a4:	461a      	mov	r2, r3
    d4a6:	687b      	ldr	r3, [r7, #4]
    d4a8:	4413      	add	r3, r2
}
    d4aa:	4618      	mov	r0, r3
    d4ac:	3708      	adds	r7, #8
    d4ae:	46bd      	mov	sp, r7
    d4b0:	bd80      	pop	{r7, pc}
    d4b2:	bf00      	nop
    d4b4:	0000d47b 	.word	0x0000d47b

0000d4b8 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    d4b8:	b580      	push	{r7, lr}
    d4ba:	b082      	sub	sp, #8
    d4bc:	af00      	add	r7, sp, #0
    d4be:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d4c0:	687b      	ldr	r3, [r7, #4]
    d4c2:	3302      	adds	r3, #2
    d4c4:	4618      	mov	r0, r3
    d4c6:	4b03      	ldr	r3, [pc, #12]	; (d4d4 <usb_cfg_desc_total_len+0x1c>)
    d4c8:	4798      	blx	r3
    d4ca:	4603      	mov	r3, r0
}
    d4cc:	4618      	mov	r0, r3
    d4ce:	3708      	adds	r7, #8
    d4d0:	46bd      	mov	sp, r7
    d4d2:	bd80      	pop	{r7, pc}
    d4d4:	0000d451 	.word	0x0000d451

0000d4d8 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    d4d8:	b590      	push	{r4, r7, lr}
    d4da:	b085      	sub	sp, #20
    d4dc:	af00      	add	r7, sp, #0
    d4de:	4603      	mov	r3, r0
    d4e0:	6039      	str	r1, [r7, #0]
    d4e2:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    d4e4:	2300      	movs	r3, #0
    d4e6:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    d4e8:	683b      	ldr	r3, [r7, #0]
    d4ea:	799a      	ldrb	r2, [r3, #6]
    d4ec:	79db      	ldrb	r3, [r3, #7]
    d4ee:	021b      	lsls	r3, r3, #8
    d4f0:	4313      	orrs	r3, r2
    d4f2:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    d4f4:	897b      	ldrh	r3, [r7, #10]
    d4f6:	2b12      	cmp	r3, #18
    d4f8:	d901      	bls.n	d4fe <usbdc_get_dev_desc+0x26>
		length = 0x12;
    d4fa:	2312      	movs	r3, #18
    d4fc:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    d4fe:	68fb      	ldr	r3, [r7, #12]
    d500:	2b00      	cmp	r3, #0
    d502:	d10a      	bne.n	d51a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    d504:	4b0f      	ldr	r3, [pc, #60]	; (d544 <usbdc_get_dev_desc+0x6c>)
    d506:	681b      	ldr	r3, [r3, #0]
    d508:	6818      	ldr	r0, [r3, #0]
    d50a:	4b0e      	ldr	r3, [pc, #56]	; (d544 <usbdc_get_dev_desc+0x6c>)
    d50c:	681b      	ldr	r3, [r3, #0]
    d50e:	685b      	ldr	r3, [r3, #4]
    d510:	2201      	movs	r2, #1
    d512:	4619      	mov	r1, r3
    d514:	4b0c      	ldr	r3, [pc, #48]	; (d548 <usbdc_get_dev_desc+0x70>)
    d516:	4798      	blx	r3
    d518:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    d51a:	68fb      	ldr	r3, [r7, #12]
    d51c:	2b00      	cmp	r3, #0
    d51e:	d101      	bne.n	d524 <usbdc_get_dev_desc+0x4c>
		return false;
    d520:	2300      	movs	r3, #0
    d522:	e00b      	b.n	d53c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    d524:	897a      	ldrh	r2, [r7, #10]
    d526:	79f8      	ldrb	r0, [r7, #7]
    d528:	2300      	movs	r3, #0
    d52a:	68f9      	ldr	r1, [r7, #12]
    d52c:	4c07      	ldr	r4, [pc, #28]	; (d54c <usbdc_get_dev_desc+0x74>)
    d52e:	47a0      	blx	r4
    d530:	4603      	mov	r3, r0
    d532:	2b00      	cmp	r3, #0
    d534:	d001      	beq.n	d53a <usbdc_get_dev_desc+0x62>
		return false;
    d536:	2300      	movs	r3, #0
    d538:	e000      	b.n	d53c <usbdc_get_dev_desc+0x64>
	}
	return true;
    d53a:	2301      	movs	r3, #1
}
    d53c:	4618      	mov	r0, r3
    d53e:	3714      	adds	r7, #20
    d540:	46bd      	mov	sp, r7
    d542:	bd90      	pop	{r4, r7, pc}
    d544:	20000e54 	.word	0x20000e54
    d548:	0000e24d 	.word	0x0000e24d
    d54c:	0000dfbd 	.word	0x0000dfbd

0000d550 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    d550:	b590      	push	{r4, r7, lr}
    d552:	b087      	sub	sp, #28
    d554:	af00      	add	r7, sp, #0
    d556:	4603      	mov	r3, r0
    d558:	6039      	str	r1, [r7, #0]
    d55a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    d55c:	2300      	movs	r3, #0
    d55e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    d560:	683b      	ldr	r3, [r7, #0]
    d562:	799a      	ldrb	r2, [r3, #6]
    d564:	79db      	ldrb	r3, [r3, #7]
    d566:	021b      	lsls	r3, r3, #8
    d568:	4313      	orrs	r3, r2
    d56a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    d56c:	683b      	ldr	r3, [r7, #0]
    d56e:	885b      	ldrh	r3, [r3, #2]
    d570:	b29b      	uxth	r3, r3
    d572:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d574:	8a7a      	ldrh	r2, [r7, #18]
    d576:	4b1e      	ldr	r3, [pc, #120]	; (d5f0 <usbdc_get_cfg_desc+0xa0>)
    d578:	7f1b      	ldrb	r3, [r3, #28]
    d57a:	3b01      	subs	r3, #1
    d57c:	4013      	ands	r3, r2
    d57e:	2b00      	cmp	r3, #0
    d580:	bf0c      	ite	eq
    d582:	2301      	moveq	r3, #1
    d584:	2300      	movne	r3, #0
    d586:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d588:	697b      	ldr	r3, [r7, #20]
    d58a:	2b00      	cmp	r3, #0
    d58c:	d10c      	bne.n	d5a8 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    d58e:	4b18      	ldr	r3, [pc, #96]	; (d5f0 <usbdc_get_cfg_desc+0xa0>)
    d590:	681b      	ldr	r3, [r3, #0]
    d592:	6818      	ldr	r0, [r3, #0]
    d594:	4b16      	ldr	r3, [pc, #88]	; (d5f0 <usbdc_get_cfg_desc+0xa0>)
    d596:	681b      	ldr	r3, [r3, #0]
    d598:	6859      	ldr	r1, [r3, #4]
    d59a:	7c3b      	ldrb	r3, [r7, #16]
    d59c:	3301      	adds	r3, #1
    d59e:	b2db      	uxtb	r3, r3
    d5a0:	461a      	mov	r2, r3
    d5a2:	4b14      	ldr	r3, [pc, #80]	; (d5f4 <usbdc_get_cfg_desc+0xa4>)
    d5a4:	4798      	blx	r3
    d5a6:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    d5a8:	697b      	ldr	r3, [r7, #20]
    d5aa:	2b00      	cmp	r3, #0
    d5ac:	d101      	bne.n	d5b2 <usbdc_get_cfg_desc+0x62>
		return false;
    d5ae:	2300      	movs	r3, #0
    d5b0:	e019      	b.n	d5e6 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    d5b2:	6978      	ldr	r0, [r7, #20]
    d5b4:	4b10      	ldr	r3, [pc, #64]	; (d5f8 <usbdc_get_cfg_desc+0xa8>)
    d5b6:	4798      	blx	r3
    d5b8:	4603      	mov	r3, r0
    d5ba:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    d5bc:	8a7a      	ldrh	r2, [r7, #18]
    d5be:	89fb      	ldrh	r3, [r7, #14]
    d5c0:	429a      	cmp	r2, r3
    d5c2:	d802      	bhi.n	d5ca <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    d5c4:	2300      	movs	r3, #0
    d5c6:	747b      	strb	r3, [r7, #17]
    d5c8:	e001      	b.n	d5ce <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    d5ca:	89fb      	ldrh	r3, [r7, #14]
    d5cc:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    d5ce:	8a7a      	ldrh	r2, [r7, #18]
    d5d0:	7c7b      	ldrb	r3, [r7, #17]
    d5d2:	79f8      	ldrb	r0, [r7, #7]
    d5d4:	6979      	ldr	r1, [r7, #20]
    d5d6:	4c09      	ldr	r4, [pc, #36]	; (d5fc <usbdc_get_cfg_desc+0xac>)
    d5d8:	47a0      	blx	r4
    d5da:	4603      	mov	r3, r0
    d5dc:	2b00      	cmp	r3, #0
    d5de:	d001      	beq.n	d5e4 <usbdc_get_cfg_desc+0x94>
		return false;
    d5e0:	2300      	movs	r3, #0
    d5e2:	e000      	b.n	d5e6 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    d5e4:	2301      	movs	r3, #1
}
    d5e6:	4618      	mov	r0, r3
    d5e8:	371c      	adds	r7, #28
    d5ea:	46bd      	mov	sp, r7
    d5ec:	bd90      	pop	{r4, r7, pc}
    d5ee:	bf00      	nop
    d5f0:	20000e54 	.word	0x20000e54
    d5f4:	0000e30d 	.word	0x0000e30d
    d5f8:	0000d4b9 	.word	0x0000d4b9
    d5fc:	0000dfbd 	.word	0x0000dfbd

0000d600 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    d600:	b590      	push	{r4, r7, lr}
    d602:	b085      	sub	sp, #20
    d604:	af00      	add	r7, sp, #0
    d606:	4603      	mov	r3, r0
    d608:	6039      	str	r1, [r7, #0]
    d60a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    d60c:	683b      	ldr	r3, [r7, #0]
    d60e:	799a      	ldrb	r2, [r3, #6]
    d610:	79db      	ldrb	r3, [r3, #7]
    d612:	021b      	lsls	r3, r3, #8
    d614:	4313      	orrs	r3, r2
    d616:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    d618:	683b      	ldr	r3, [r7, #0]
    d61a:	885b      	ldrh	r3, [r3, #2]
    d61c:	b29b      	uxth	r3, r3
    d61e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d620:	89fa      	ldrh	r2, [r7, #14]
    d622:	4b1a      	ldr	r3, [pc, #104]	; (d68c <usbdc_get_str_desc+0x8c>)
    d624:	7f1b      	ldrb	r3, [r3, #28]
    d626:	3b01      	subs	r3, #1
    d628:	4013      	ands	r3, r2
    d62a:	2b00      	cmp	r3, #0
    d62c:	bf0c      	ite	eq
    d62e:	2301      	moveq	r3, #1
    d630:	2300      	movne	r3, #0
    d632:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    d634:	4b15      	ldr	r3, [pc, #84]	; (d68c <usbdc_get_str_desc+0x8c>)
    d636:	681b      	ldr	r3, [r3, #0]
    d638:	6818      	ldr	r0, [r3, #0]
    d63a:	4b14      	ldr	r3, [pc, #80]	; (d68c <usbdc_get_str_desc+0x8c>)
    d63c:	681b      	ldr	r3, [r3, #0]
    d63e:	685b      	ldr	r3, [r3, #4]
    d640:	7b3a      	ldrb	r2, [r7, #12]
    d642:	4619      	mov	r1, r3
    d644:	4b12      	ldr	r3, [pc, #72]	; (d690 <usbdc_get_str_desc+0x90>)
    d646:	4798      	blx	r3
    d648:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    d64a:	68bb      	ldr	r3, [r7, #8]
    d64c:	2b00      	cmp	r3, #0
    d64e:	d101      	bne.n	d654 <usbdc_get_str_desc+0x54>
		return false;
    d650:	2300      	movs	r3, #0
    d652:	e017      	b.n	d684 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    d654:	68bb      	ldr	r3, [r7, #8]
    d656:	781b      	ldrb	r3, [r3, #0]
    d658:	b29b      	uxth	r3, r3
    d65a:	89fa      	ldrh	r2, [r7, #14]
    d65c:	429a      	cmp	r2, r3
    d65e:	d802      	bhi.n	d666 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    d660:	2300      	movs	r3, #0
    d662:	737b      	strb	r3, [r7, #13]
    d664:	e002      	b.n	d66c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    d666:	68bb      	ldr	r3, [r7, #8]
    d668:	781b      	ldrb	r3, [r3, #0]
    d66a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    d66c:	89fa      	ldrh	r2, [r7, #14]
    d66e:	7b7b      	ldrb	r3, [r7, #13]
    d670:	79f8      	ldrb	r0, [r7, #7]
    d672:	68b9      	ldr	r1, [r7, #8]
    d674:	4c07      	ldr	r4, [pc, #28]	; (d694 <usbdc_get_str_desc+0x94>)
    d676:	47a0      	blx	r4
    d678:	4603      	mov	r3, r0
    d67a:	2b00      	cmp	r3, #0
    d67c:	d001      	beq.n	d682 <usbdc_get_str_desc+0x82>
		return false;
    d67e:	2300      	movs	r3, #0
    d680:	e000      	b.n	d684 <usbdc_get_str_desc+0x84>
	}
	return true;
    d682:	2301      	movs	r3, #1
}
    d684:	4618      	mov	r0, r3
    d686:	3714      	adds	r7, #20
    d688:	46bd      	mov	sp, r7
    d68a:	bd90      	pop	{r4, r7, pc}
    d68c:	20000e54 	.word	0x20000e54
    d690:	0000e385 	.word	0x0000e385
    d694:	0000dfbd 	.word	0x0000dfbd

0000d698 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    d698:	b580      	push	{r7, lr}
    d69a:	b084      	sub	sp, #16
    d69c:	af00      	add	r7, sp, #0
    d69e:	4603      	mov	r3, r0
    d6a0:	6039      	str	r1, [r7, #0]
    d6a2:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    d6a4:	683b      	ldr	r3, [r7, #0]
    d6a6:	885b      	ldrh	r3, [r3, #2]
    d6a8:	b29b      	uxth	r3, r3
    d6aa:	0a1b      	lsrs	r3, r3, #8
    d6ac:	b29b      	uxth	r3, r3
    d6ae:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    d6b0:	7bfb      	ldrb	r3, [r7, #15]
    d6b2:	2b02      	cmp	r3, #2
    d6b4:	d00d      	beq.n	d6d2 <usbdc_get_desc_req+0x3a>
    d6b6:	2b03      	cmp	r3, #3
    d6b8:	d012      	beq.n	d6e0 <usbdc_get_desc_req+0x48>
    d6ba:	2b01      	cmp	r3, #1
    d6bc:	d002      	beq.n	d6c4 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    d6be:	bf00      	nop
	}
	return false;
    d6c0:	2300      	movs	r3, #0
    d6c2:	e013      	b.n	d6ec <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    d6c4:	79fb      	ldrb	r3, [r7, #7]
    d6c6:	6839      	ldr	r1, [r7, #0]
    d6c8:	4618      	mov	r0, r3
    d6ca:	4b0a      	ldr	r3, [pc, #40]	; (d6f4 <usbdc_get_desc_req+0x5c>)
    d6cc:	4798      	blx	r3
    d6ce:	4603      	mov	r3, r0
    d6d0:	e00c      	b.n	d6ec <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    d6d2:	79fb      	ldrb	r3, [r7, #7]
    d6d4:	6839      	ldr	r1, [r7, #0]
    d6d6:	4618      	mov	r0, r3
    d6d8:	4b07      	ldr	r3, [pc, #28]	; (d6f8 <usbdc_get_desc_req+0x60>)
    d6da:	4798      	blx	r3
    d6dc:	4603      	mov	r3, r0
    d6de:	e005      	b.n	d6ec <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    d6e0:	79fb      	ldrb	r3, [r7, #7]
    d6e2:	6839      	ldr	r1, [r7, #0]
    d6e4:	4618      	mov	r0, r3
    d6e6:	4b05      	ldr	r3, [pc, #20]	; (d6fc <usbdc_get_desc_req+0x64>)
    d6e8:	4798      	blx	r3
    d6ea:	4603      	mov	r3, r0
}
    d6ec:	4618      	mov	r0, r3
    d6ee:	3710      	adds	r7, #16
    d6f0:	46bd      	mov	sp, r7
    d6f2:	bd80      	pop	{r7, pc}
    d6f4:	0000d4d9 	.word	0x0000d4d9
    d6f8:	0000d551 	.word	0x0000d551
    d6fc:	0000d601 	.word	0x0000d601

0000d700 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    d700:	b590      	push	{r4, r7, lr}
    d702:	b085      	sub	sp, #20
    d704:	af00      	add	r7, sp, #0
    d706:	4603      	mov	r3, r0
    d708:	6039      	str	r1, [r7, #0]
    d70a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d70c:	683b      	ldr	r3, [r7, #0]
    d70e:	781b      	ldrb	r3, [r3, #0]
    d710:	f003 031f 	and.w	r3, r3, #31
    d714:	2b00      	cmp	r3, #0
    d716:	db1b      	blt.n	d750 <usbdc_get_status_req+0x50>
    d718:	2b01      	cmp	r3, #1
    d71a:	dd02      	ble.n	d722 <usbdc_get_status_req+0x22>
    d71c:	2b02      	cmp	r3, #2
    d71e:	d003      	beq.n	d728 <usbdc_get_status_req+0x28>
    d720:	e016      	b.n	d750 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    d722:	2300      	movs	r3, #0
    d724:	60fb      	str	r3, [r7, #12]
		break;
    d726:	e015      	b.n	d754 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    d728:	683b      	ldr	r3, [r7, #0]
    d72a:	889b      	ldrh	r3, [r3, #4]
    d72c:	b29b      	uxth	r3, r3
    d72e:	b2db      	uxtb	r3, r3
    d730:	2102      	movs	r1, #2
    d732:	4618      	mov	r0, r3
    d734:	4b0f      	ldr	r3, [pc, #60]	; (d774 <usbdc_get_status_req+0x74>)
    d736:	4798      	blx	r3
    d738:	4603      	mov	r3, r0
    d73a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    d73c:	68fb      	ldr	r3, [r7, #12]
    d73e:	2b00      	cmp	r3, #0
    d740:	da01      	bge.n	d746 <usbdc_get_status_req+0x46>
			return false;
    d742:	2300      	movs	r3, #0
    d744:	e012      	b.n	d76c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    d746:	68fb      	ldr	r3, [r7, #12]
    d748:	f003 0301 	and.w	r3, r3, #1
    d74c:	60fb      	str	r3, [r7, #12]
		break;
    d74e:	e001      	b.n	d754 <usbdc_get_status_req+0x54>
	default:
		return false;
    d750:	2300      	movs	r3, #0
    d752:	e00b      	b.n	d76c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    d754:	4b08      	ldr	r3, [pc, #32]	; (d778 <usbdc_get_status_req+0x78>)
    d756:	695b      	ldr	r3, [r3, #20]
    d758:	89ba      	ldrh	r2, [r7, #12]
    d75a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    d75c:	4b06      	ldr	r3, [pc, #24]	; (d778 <usbdc_get_status_req+0x78>)
    d75e:	6959      	ldr	r1, [r3, #20]
    d760:	79f8      	ldrb	r0, [r7, #7]
    d762:	2300      	movs	r3, #0
    d764:	2202      	movs	r2, #2
    d766:	4c05      	ldr	r4, [pc, #20]	; (d77c <usbdc_get_status_req+0x7c>)
    d768:	47a0      	blx	r4
	return true;
    d76a:	2301      	movs	r3, #1
}
    d76c:	4618      	mov	r0, r3
    d76e:	3714      	adds	r7, #20
    d770:	46bd      	mov	sp, r7
    d772:	bd90      	pop	{r4, r7, pc}
    d774:	000049c5 	.word	0x000049c5
    d778:	20000e54 	.word	0x20000e54
    d77c:	0000dfbd 	.word	0x0000dfbd

0000d780 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    d780:	b590      	push	{r4, r7, lr}
    d782:	b085      	sub	sp, #20
    d784:	af00      	add	r7, sp, #0
    d786:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d788:	4b1f      	ldr	r3, [pc, #124]	; (d808 <usbdc_get_interface+0x88>)
    d78a:	691b      	ldr	r3, [r3, #16]
    d78c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    d78e:	4b1e      	ldr	r3, [pc, #120]	; (d808 <usbdc_get_interface+0x88>)
    d790:	7f5b      	ldrb	r3, [r3, #29]
    d792:	461a      	mov	r2, r3
    d794:	687b      	ldr	r3, [r7, #4]
    d796:	889b      	ldrh	r3, [r3, #4]
    d798:	b29b      	uxth	r3, r3
    d79a:	fa42 f303 	asr.w	r3, r2, r3
    d79e:	f003 0301 	and.w	r3, r3, #1
    d7a2:	2b00      	cmp	r3, #0
    d7a4:	d128      	bne.n	d7f8 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    d7a6:	4b18      	ldr	r3, [pc, #96]	; (d808 <usbdc_get_interface+0x88>)
    d7a8:	695b      	ldr	r3, [r3, #20]
    d7aa:	2200      	movs	r2, #0
    d7ac:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d7ae:	4b16      	ldr	r3, [pc, #88]	; (d808 <usbdc_get_interface+0x88>)
    d7b0:	6959      	ldr	r1, [r3, #20]
    d7b2:	2300      	movs	r3, #0
    d7b4:	2201      	movs	r2, #1
    d7b6:	2000      	movs	r0, #0
    d7b8:	4c14      	ldr	r4, [pc, #80]	; (d80c <usbdc_get_interface+0x8c>)
    d7ba:	47a0      	blx	r4
		return true;
    d7bc:	2301      	movs	r3, #1
    d7be:	e01f      	b.n	d800 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    d7c0:	68fb      	ldr	r3, [r7, #12]
    d7c2:	685b      	ldr	r3, [r3, #4]
    d7c4:	687a      	ldr	r2, [r7, #4]
    d7c6:	2102      	movs	r1, #2
    d7c8:	68f8      	ldr	r0, [r7, #12]
    d7ca:	4798      	blx	r3
    d7cc:	60b8      	str	r0, [r7, #8]
    d7ce:	68bb      	ldr	r3, [r7, #8]
    d7d0:	2b00      	cmp	r3, #0
    d7d2:	da03      	bge.n	d7dc <usbdc_get_interface+0x5c>
			func = func->next;
    d7d4:	68fb      	ldr	r3, [r7, #12]
    d7d6:	681b      	ldr	r3, [r3, #0]
    d7d8:	60fb      	str	r3, [r7, #12]
    d7da:	e00d      	b.n	d7f8 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    d7dc:	4b0a      	ldr	r3, [pc, #40]	; (d808 <usbdc_get_interface+0x88>)
    d7de:	695b      	ldr	r3, [r3, #20]
    d7e0:	68ba      	ldr	r2, [r7, #8]
    d7e2:	b2d2      	uxtb	r2, r2
    d7e4:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d7e6:	4b08      	ldr	r3, [pc, #32]	; (d808 <usbdc_get_interface+0x88>)
    d7e8:	6959      	ldr	r1, [r3, #20]
    d7ea:	2300      	movs	r3, #0
    d7ec:	2201      	movs	r2, #1
    d7ee:	2000      	movs	r0, #0
    d7f0:	4c06      	ldr	r4, [pc, #24]	; (d80c <usbdc_get_interface+0x8c>)
    d7f2:	47a0      	blx	r4
			return true;
    d7f4:	2301      	movs	r3, #1
    d7f6:	e003      	b.n	d800 <usbdc_get_interface+0x80>
	while (NULL != func) {
    d7f8:	68fb      	ldr	r3, [r7, #12]
    d7fa:	2b00      	cmp	r3, #0
    d7fc:	d1e0      	bne.n	d7c0 <usbdc_get_interface+0x40>
		}
	}
	return false;
    d7fe:	2300      	movs	r3, #0
}
    d800:	4618      	mov	r0, r3
    d802:	3714      	adds	r7, #20
    d804:	46bd      	mov	sp, r7
    d806:	bd90      	pop	{r4, r7, pc}
    d808:	20000e54 	.word	0x20000e54
    d80c:	0000dfbd 	.word	0x0000dfbd

0000d810 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    d810:	b590      	push	{r4, r7, lr}
    d812:	b083      	sub	sp, #12
    d814:	af00      	add	r7, sp, #0
    d816:	4603      	mov	r3, r0
    d818:	6039      	str	r1, [r7, #0]
    d81a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d81c:	683b      	ldr	r3, [r7, #0]
    d81e:	785b      	ldrb	r3, [r3, #1]
    d820:	2b0a      	cmp	r3, #10
    d822:	d83a      	bhi.n	d89a <usbdc_get_req+0x8a>
    d824:	a201      	add	r2, pc, #4	; (adr r2, d82c <usbdc_get_req+0x1c>)
    d826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d82a:	bf00      	nop
    d82c:	0000d883 	.word	0x0000d883
    d830:	0000d89b 	.word	0x0000d89b
    d834:	0000d89b 	.word	0x0000d89b
    d838:	0000d89b 	.word	0x0000d89b
    d83c:	0000d89b 	.word	0x0000d89b
    d840:	0000d89b 	.word	0x0000d89b
    d844:	0000d859 	.word	0x0000d859
    d848:	0000d89b 	.word	0x0000d89b
    d84c:	0000d867 	.word	0x0000d867
    d850:	0000d89b 	.word	0x0000d89b
    d854:	0000d891 	.word	0x0000d891
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    d858:	79fb      	ldrb	r3, [r7, #7]
    d85a:	6839      	ldr	r1, [r7, #0]
    d85c:	4618      	mov	r0, r3
    d85e:	4b11      	ldr	r3, [pc, #68]	; (d8a4 <usbdc_get_req+0x94>)
    d860:	4798      	blx	r3
    d862:	4603      	mov	r3, r0
    d864:	e01a      	b.n	d89c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d866:	4b10      	ldr	r3, [pc, #64]	; (d8a8 <usbdc_get_req+0x98>)
    d868:	695b      	ldr	r3, [r3, #20]
    d86a:	4a0f      	ldr	r2, [pc, #60]	; (d8a8 <usbdc_get_req+0x98>)
    d86c:	7ed2      	ldrb	r2, [r2, #27]
    d86e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d870:	4b0d      	ldr	r3, [pc, #52]	; (d8a8 <usbdc_get_req+0x98>)
    d872:	6959      	ldr	r1, [r3, #20]
    d874:	79f8      	ldrb	r0, [r7, #7]
    d876:	2300      	movs	r3, #0
    d878:	2201      	movs	r2, #1
    d87a:	4c0c      	ldr	r4, [pc, #48]	; (d8ac <usbdc_get_req+0x9c>)
    d87c:	47a0      	blx	r4
		return true;
    d87e:	2301      	movs	r3, #1
    d880:	e00c      	b.n	d89c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    d882:	79fb      	ldrb	r3, [r7, #7]
    d884:	6839      	ldr	r1, [r7, #0]
    d886:	4618      	mov	r0, r3
    d888:	4b09      	ldr	r3, [pc, #36]	; (d8b0 <usbdc_get_req+0xa0>)
    d88a:	4798      	blx	r3
    d88c:	4603      	mov	r3, r0
    d88e:	e005      	b.n	d89c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    d890:	6838      	ldr	r0, [r7, #0]
    d892:	4b08      	ldr	r3, [pc, #32]	; (d8b4 <usbdc_get_req+0xa4>)
    d894:	4798      	blx	r3
    d896:	4603      	mov	r3, r0
    d898:	e000      	b.n	d89c <usbdc_get_req+0x8c>
	default:
		return false;
    d89a:	2300      	movs	r3, #0
	}
}
    d89c:	4618      	mov	r0, r3
    d89e:	370c      	adds	r7, #12
    d8a0:	46bd      	mov	sp, r7
    d8a2:	bd90      	pop	{r4, r7, pc}
    d8a4:	0000d699 	.word	0x0000d699
    d8a8:	20000e54 	.word	0x20000e54
    d8ac:	0000dfbd 	.word	0x0000dfbd
    d8b0:	0000d701 	.word	0x0000d701
    d8b4:	0000d781 	.word	0x0000d781

0000d8b8 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d8b8:	b590      	push	{r4, r7, lr}
    d8ba:	b083      	sub	sp, #12
    d8bc:	af00      	add	r7, sp, #0
    d8be:	4603      	mov	r3, r0
    d8c0:	6039      	str	r1, [r7, #0]
    d8c2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d8c4:	683b      	ldr	r3, [r7, #0]
    d8c6:	781b      	ldrb	r3, [r3, #0]
    d8c8:	f003 031f 	and.w	r3, r3, #31
    d8cc:	2b02      	cmp	r3, #2
    d8ce:	d116      	bne.n	d8fe <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d8d0:	683b      	ldr	r3, [r7, #0]
    d8d2:	88db      	ldrh	r3, [r3, #6]
    d8d4:	b29b      	uxth	r3, r3
    d8d6:	2b00      	cmp	r3, #0
    d8d8:	d001      	beq.n	d8de <usbdc_clear_ftr_req+0x26>
			return false;
    d8da:	2300      	movs	r3, #0
    d8dc:	e010      	b.n	d900 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d8de:	683b      	ldr	r3, [r7, #0]
    d8e0:	889b      	ldrh	r3, [r3, #4]
    d8e2:	b29b      	uxth	r3, r3
    d8e4:	b2db      	uxtb	r3, r3
    d8e6:	2100      	movs	r1, #0
    d8e8:	4618      	mov	r0, r3
    d8ea:	4b07      	ldr	r3, [pc, #28]	; (d908 <usbdc_clear_ftr_req+0x50>)
    d8ec:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d8ee:	79f8      	ldrb	r0, [r7, #7]
    d8f0:	2301      	movs	r3, #1
    d8f2:	2200      	movs	r2, #0
    d8f4:	2100      	movs	r1, #0
    d8f6:	4c05      	ldr	r4, [pc, #20]	; (d90c <usbdc_clear_ftr_req+0x54>)
    d8f8:	47a0      	blx	r4
		return true;
    d8fa:	2301      	movs	r3, #1
    d8fc:	e000      	b.n	d900 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d8fe:	2300      	movs	r3, #0
	}
}
    d900:	4618      	mov	r0, r3
    d902:	370c      	adds	r7, #12
    d904:	46bd      	mov	sp, r7
    d906:	bd90      	pop	{r4, r7, pc}
    d908:	000049c5 	.word	0x000049c5
    d90c:	0000dfbd 	.word	0x0000dfbd

0000d910 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d910:	b590      	push	{r4, r7, lr}
    d912:	b083      	sub	sp, #12
    d914:	af00      	add	r7, sp, #0
    d916:	4603      	mov	r3, r0
    d918:	6039      	str	r1, [r7, #0]
    d91a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d91c:	683b      	ldr	r3, [r7, #0]
    d91e:	781b      	ldrb	r3, [r3, #0]
    d920:	f003 031f 	and.w	r3, r3, #31
    d924:	2b02      	cmp	r3, #2
    d926:	d116      	bne.n	d956 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d928:	683b      	ldr	r3, [r7, #0]
    d92a:	88db      	ldrh	r3, [r3, #6]
    d92c:	b29b      	uxth	r3, r3
    d92e:	2b00      	cmp	r3, #0
    d930:	d001      	beq.n	d936 <usbdc_set_ftr_req+0x26>
			return false;
    d932:	2300      	movs	r3, #0
    d934:	e010      	b.n	d958 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d936:	683b      	ldr	r3, [r7, #0]
    d938:	889b      	ldrh	r3, [r3, #4]
    d93a:	b29b      	uxth	r3, r3
    d93c:	b2db      	uxtb	r3, r3
    d93e:	2101      	movs	r1, #1
    d940:	4618      	mov	r0, r3
    d942:	4b07      	ldr	r3, [pc, #28]	; (d960 <usbdc_set_ftr_req+0x50>)
    d944:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d946:	79f8      	ldrb	r0, [r7, #7]
    d948:	2301      	movs	r3, #1
    d94a:	2200      	movs	r2, #0
    d94c:	2100      	movs	r1, #0
    d94e:	4c05      	ldr	r4, [pc, #20]	; (d964 <usbdc_set_ftr_req+0x54>)
    d950:	47a0      	blx	r4
		return true;
    d952:	2301      	movs	r3, #1
    d954:	e000      	b.n	d958 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d956:	2300      	movs	r3, #0
	}
}
    d958:	4618      	mov	r0, r3
    d95a:	370c      	adds	r7, #12
    d95c:	46bd      	mov	sp, r7
    d95e:	bd90      	pop	{r4, r7, pc}
    d960:	000049c5 	.word	0x000049c5
    d964:	0000dfbd 	.word	0x0000dfbd

0000d968 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d968:	b580      	push	{r7, lr}
    d96a:	b082      	sub	sp, #8
    d96c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d96e:	4b0a      	ldr	r3, [pc, #40]	; (d998 <usbdc_unconfig+0x30>)
    d970:	691b      	ldr	r3, [r3, #16]
    d972:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d974:	e008      	b.n	d988 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d976:	687b      	ldr	r3, [r7, #4]
    d978:	685b      	ldr	r3, [r3, #4]
    d97a:	2200      	movs	r2, #0
    d97c:	2101      	movs	r1, #1
    d97e:	6878      	ldr	r0, [r7, #4]
    d980:	4798      	blx	r3
		func = func->next;
    d982:	687b      	ldr	r3, [r7, #4]
    d984:	681b      	ldr	r3, [r3, #0]
    d986:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d988:	687b      	ldr	r3, [r7, #4]
    d98a:	2b00      	cmp	r3, #0
    d98c:	d1f3      	bne.n	d976 <usbdc_unconfig+0xe>
	}
}
    d98e:	bf00      	nop
    d990:	3708      	adds	r7, #8
    d992:	46bd      	mov	sp, r7
    d994:	bd80      	pop	{r7, pc}
    d996:	bf00      	nop
    d998:	20000e54 	.word	0x20000e54

0000d99c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d99c:	b580      	push	{r7, lr}
    d99e:	b088      	sub	sp, #32
    d9a0:	af00      	add	r7, sp, #0
    d9a2:	4603      	mov	r3, r0
    d9a4:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d9a6:	2300      	movs	r3, #0
    d9a8:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d9aa:	23ff      	movs	r3, #255	; 0xff
    d9ac:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d9ae:	79fb      	ldrb	r3, [r7, #7]
    d9b0:	2b00      	cmp	r3, #0
    d9b2:	d103      	bne.n	d9bc <usbdc_set_config+0x20>
		usbdc_unconfig();
    d9b4:	4b2e      	ldr	r3, [pc, #184]	; (da70 <usbdc_set_config+0xd4>)
    d9b6:	4798      	blx	r3
		return true;
    d9b8:	2301      	movs	r3, #1
    d9ba:	e055      	b.n	da68 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d9bc:	69bb      	ldr	r3, [r7, #24]
    d9be:	2b00      	cmp	r3, #0
    d9c0:	d10a      	bne.n	d9d8 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d9c2:	4b2c      	ldr	r3, [pc, #176]	; (da74 <usbdc_set_config+0xd8>)
    d9c4:	681b      	ldr	r3, [r3, #0]
    d9c6:	6818      	ldr	r0, [r3, #0]
    d9c8:	4b2a      	ldr	r3, [pc, #168]	; (da74 <usbdc_set_config+0xd8>)
    d9ca:	681b      	ldr	r3, [r3, #0]
    d9cc:	685b      	ldr	r3, [r3, #4]
    d9ce:	79fa      	ldrb	r2, [r7, #7]
    d9d0:	4619      	mov	r1, r3
    d9d2:	4b29      	ldr	r3, [pc, #164]	; (da78 <usbdc_set_config+0xdc>)
    d9d4:	4798      	blx	r3
    d9d6:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d9d8:	69bb      	ldr	r3, [r7, #24]
    d9da:	2b00      	cmp	r3, #0
    d9dc:	d101      	bne.n	d9e2 <usbdc_set_config+0x46>
		return false;
    d9de:	2300      	movs	r3, #0
    d9e0:	e042      	b.n	da68 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d9e2:	69b8      	ldr	r0, [r7, #24]
    d9e4:	4b25      	ldr	r3, [pc, #148]	; (da7c <usbdc_set_config+0xe0>)
    d9e6:	4798      	blx	r3
    d9e8:	4603      	mov	r3, r0
    d9ea:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d9ec:	8abb      	ldrh	r3, [r7, #20]
    d9ee:	69ba      	ldr	r2, [r7, #24]
    d9f0:	4413      	add	r3, r2
    d9f2:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d9f4:	693b      	ldr	r3, [r7, #16]
    d9f6:	2204      	movs	r2, #4
    d9f8:	4619      	mov	r1, r3
    d9fa:	69b8      	ldr	r0, [r7, #24]
    d9fc:	4b20      	ldr	r3, [pc, #128]	; (da80 <usbdc_set_config+0xe4>)
    d9fe:	4798      	blx	r3
    da00:	4603      	mov	r3, r0
    da02:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    da04:	e02c      	b.n	da60 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    da06:	68fb      	ldr	r3, [r7, #12]
    da08:	3302      	adds	r3, #2
    da0a:	781b      	ldrb	r3, [r3, #0]
    da0c:	7dfa      	ldrb	r2, [r7, #23]
    da0e:	429a      	cmp	r2, r3
    da10:	d018      	beq.n	da44 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    da12:	68fb      	ldr	r3, [r7, #12]
    da14:	789b      	ldrb	r3, [r3, #2]
    da16:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    da18:	4b16      	ldr	r3, [pc, #88]	; (da74 <usbdc_set_config+0xd8>)
    da1a:	691b      	ldr	r3, [r3, #16]
    da1c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    da1e:	e00c      	b.n	da3a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    da20:	69fb      	ldr	r3, [r7, #28]
    da22:	685b      	ldr	r3, [r3, #4]
    da24:	f107 020c 	add.w	r2, r7, #12
    da28:	2100      	movs	r1, #0
    da2a:	69f8      	ldr	r0, [r7, #28]
    da2c:	4798      	blx	r3
    da2e:	4603      	mov	r3, r0
    da30:	2b00      	cmp	r3, #0
    da32:	d006      	beq.n	da42 <usbdc_set_config+0xa6>
					func = func->next;
    da34:	69fb      	ldr	r3, [r7, #28]
    da36:	681b      	ldr	r3, [r3, #0]
    da38:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    da3a:	69fb      	ldr	r3, [r7, #28]
    da3c:	2b00      	cmp	r3, #0
    da3e:	d1ef      	bne.n	da20 <usbdc_set_config+0x84>
    da40:	e000      	b.n	da44 <usbdc_set_config+0xa8>
				} else {
					break;
    da42:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    da44:	68fb      	ldr	r3, [r7, #12]
    da46:	4618      	mov	r0, r3
    da48:	4b0e      	ldr	r3, [pc, #56]	; (da84 <usbdc_set_config+0xe8>)
    da4a:	4798      	blx	r3
    da4c:	4603      	mov	r3, r0
    da4e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    da50:	68fb      	ldr	r3, [r7, #12]
    da52:	6939      	ldr	r1, [r7, #16]
    da54:	2204      	movs	r2, #4
    da56:	4618      	mov	r0, r3
    da58:	4b09      	ldr	r3, [pc, #36]	; (da80 <usbdc_set_config+0xe4>)
    da5a:	4798      	blx	r3
    da5c:	4603      	mov	r3, r0
    da5e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    da60:	68fb      	ldr	r3, [r7, #12]
    da62:	2b00      	cmp	r3, #0
    da64:	d1cf      	bne.n	da06 <usbdc_set_config+0x6a>
	}
	return true;
    da66:	2301      	movs	r3, #1
}
    da68:	4618      	mov	r0, r3
    da6a:	3720      	adds	r7, #32
    da6c:	46bd      	mov	sp, r7
    da6e:	bd80      	pop	{r7, pc}
    da70:	0000d969 	.word	0x0000d969
    da74:	20000e54 	.word	0x20000e54
    da78:	0000e30d 	.word	0x0000e30d
    da7c:	0000d4b9 	.word	0x0000d4b9
    da80:	0000e24d 	.word	0x0000e24d
    da84:	0000d495 	.word	0x0000d495

0000da88 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    da88:	b580      	push	{r7, lr}
    da8a:	b082      	sub	sp, #8
    da8c:	af00      	add	r7, sp, #0
    da8e:	4603      	mov	r3, r0
    da90:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    da92:	79fb      	ldrb	r3, [r7, #7]
    da94:	4618      	mov	r0, r3
    da96:	4b03      	ldr	r3, [pc, #12]	; (daa4 <usbdc_set_address+0x1c>)
    da98:	4798      	blx	r3
}
    da9a:	bf00      	nop
    da9c:	3708      	adds	r7, #8
    da9e:	46bd      	mov	sp, r7
    daa0:	bd80      	pop	{r7, pc}
    daa2:	bf00      	nop
    daa4:	000045e1 	.word	0x000045e1

0000daa8 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    daa8:	b590      	push	{r4, r7, lr}
    daaa:	b087      	sub	sp, #28
    daac:	af00      	add	r7, sp, #0
    daae:	4603      	mov	r3, r0
    dab0:	460a      	mov	r2, r1
    dab2:	80fb      	strh	r3, [r7, #6]
    dab4:	4613      	mov	r3, r2
    dab6:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    dab8:	2300      	movs	r3, #0
    daba:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    dabc:	693b      	ldr	r3, [r7, #16]
    dabe:	2b00      	cmp	r3, #0
    dac0:	d10b      	bne.n	dada <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    dac2:	4b43      	ldr	r3, [pc, #268]	; (dbd0 <usbdc_set_interface+0x128>)
    dac4:	681b      	ldr	r3, [r3, #0]
    dac6:	6818      	ldr	r0, [r3, #0]
    dac8:	4b41      	ldr	r3, [pc, #260]	; (dbd0 <usbdc_set_interface+0x128>)
    daca:	681b      	ldr	r3, [r3, #0]
    dacc:	6859      	ldr	r1, [r3, #4]
    dace:	4b40      	ldr	r3, [pc, #256]	; (dbd0 <usbdc_set_interface+0x128>)
    dad0:	7edb      	ldrb	r3, [r3, #27]
    dad2:	461a      	mov	r2, r3
    dad4:	4b3f      	ldr	r3, [pc, #252]	; (dbd4 <usbdc_set_interface+0x12c>)
    dad6:	4798      	blx	r3
    dad8:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    dada:	693b      	ldr	r3, [r7, #16]
    dadc:	2b00      	cmp	r3, #0
    dade:	d101      	bne.n	dae4 <usbdc_set_interface+0x3c>
		return false;
    dae0:	2300      	movs	r3, #0
    dae2:	e071      	b.n	dbc8 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    dae4:	693b      	ldr	r3, [r7, #16]
    dae6:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    dae8:	6938      	ldr	r0, [r7, #16]
    daea:	4b3b      	ldr	r3, [pc, #236]	; (dbd8 <usbdc_set_interface+0x130>)
    daec:	4798      	blx	r3
    daee:	4603      	mov	r3, r0
    daf0:	461a      	mov	r2, r3
    daf2:	693b      	ldr	r3, [r7, #16]
    daf4:	4413      	add	r3, r2
    daf6:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    daf8:	68bb      	ldr	r3, [r7, #8]
    dafa:	68f9      	ldr	r1, [r7, #12]
    dafc:	2204      	movs	r2, #4
    dafe:	4618      	mov	r0, r3
    db00:	4b36      	ldr	r3, [pc, #216]	; (dbdc <usbdc_set_interface+0x134>)
    db02:	4798      	blx	r3
    db04:	6138      	str	r0, [r7, #16]
    db06:	693b      	ldr	r3, [r7, #16]
    db08:	2b00      	cmp	r3, #0
    db0a:	d113      	bne.n	db34 <usbdc_set_interface+0x8c>
		return false;
    db0c:	2300      	movs	r3, #0
    db0e:	e05b      	b.n	dbc8 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    db10:	68bb      	ldr	r3, [r7, #8]
    db12:	4618      	mov	r0, r3
    db14:	4b32      	ldr	r3, [pc, #200]	; (dbe0 <usbdc_set_interface+0x138>)
    db16:	4798      	blx	r3
    db18:	4603      	mov	r3, r0
    db1a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    db1c:	68bb      	ldr	r3, [r7, #8]
    db1e:	68f9      	ldr	r1, [r7, #12]
    db20:	2204      	movs	r2, #4
    db22:	4618      	mov	r0, r3
    db24:	4b2d      	ldr	r3, [pc, #180]	; (dbdc <usbdc_set_interface+0x134>)
    db26:	4798      	blx	r3
    db28:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    db2a:	693b      	ldr	r3, [r7, #16]
    db2c:	2b00      	cmp	r3, #0
    db2e:	d101      	bne.n	db34 <usbdc_set_interface+0x8c>
			return false;
    db30:	2300      	movs	r3, #0
    db32:	e049      	b.n	dbc8 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    db34:	693b      	ldr	r3, [r7, #16]
    db36:	3302      	adds	r3, #2
    db38:	781b      	ldrb	r3, [r3, #0]
    db3a:	b29b      	uxth	r3, r3
    db3c:	88ba      	ldrh	r2, [r7, #4]
    db3e:	429a      	cmp	r2, r3
    db40:	d1e6      	bne.n	db10 <usbdc_set_interface+0x68>
    db42:	693b      	ldr	r3, [r7, #16]
    db44:	3303      	adds	r3, #3
    db46:	781b      	ldrb	r3, [r3, #0]
    db48:	b29b      	uxth	r3, r3
    db4a:	88fa      	ldrh	r2, [r7, #6]
    db4c:	429a      	cmp	r2, r3
    db4e:	d1df      	bne.n	db10 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    db50:	693b      	ldr	r3, [r7, #16]
    db52:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    db54:	4b1e      	ldr	r3, [pc, #120]	; (dbd0 <usbdc_set_interface+0x128>)
    db56:	691b      	ldr	r3, [r3, #16]
    db58:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    db5a:	e031      	b.n	dbc0 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    db5c:	697b      	ldr	r3, [r7, #20]
    db5e:	685b      	ldr	r3, [r3, #4]
    db60:	f107 0208 	add.w	r2, r7, #8
    db64:	2101      	movs	r1, #1
    db66:	6978      	ldr	r0, [r7, #20]
    db68:	4798      	blx	r3
    db6a:	4603      	mov	r3, r0
    db6c:	2b00      	cmp	r3, #0
    db6e:	d003      	beq.n	db78 <usbdc_set_interface+0xd0>
			func = func->next;
    db70:	697b      	ldr	r3, [r7, #20]
    db72:	681b      	ldr	r3, [r3, #0]
    db74:	617b      	str	r3, [r7, #20]
    db76:	e023      	b.n	dbc0 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    db78:	697b      	ldr	r3, [r7, #20]
    db7a:	685b      	ldr	r3, [r3, #4]
    db7c:	f107 0208 	add.w	r2, r7, #8
    db80:	2100      	movs	r1, #0
    db82:	6978      	ldr	r0, [r7, #20]
    db84:	4798      	blx	r3
    db86:	4603      	mov	r3, r0
    db88:	2b00      	cmp	r3, #0
    db8a:	d117      	bne.n	dbbc <usbdc_set_interface+0x114>
			if (alt_set) {
    db8c:	88fb      	ldrh	r3, [r7, #6]
    db8e:	2b00      	cmp	r3, #0
    db90:	d00c      	beq.n	dbac <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    db92:	4b0f      	ldr	r3, [pc, #60]	; (dbd0 <usbdc_set_interface+0x128>)
    db94:	7f5b      	ldrb	r3, [r3, #29]
    db96:	b25a      	sxtb	r2, r3
    db98:	88bb      	ldrh	r3, [r7, #4]
    db9a:	2101      	movs	r1, #1
    db9c:	fa01 f303 	lsl.w	r3, r1, r3
    dba0:	b25b      	sxtb	r3, r3
    dba2:	4313      	orrs	r3, r2
    dba4:	b25b      	sxtb	r3, r3
    dba6:	b2da      	uxtb	r2, r3
    dba8:	4b09      	ldr	r3, [pc, #36]	; (dbd0 <usbdc_set_interface+0x128>)
    dbaa:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    dbac:	2300      	movs	r3, #0
    dbae:	2200      	movs	r2, #0
    dbb0:	2100      	movs	r1, #0
    dbb2:	2000      	movs	r0, #0
    dbb4:	4c0b      	ldr	r4, [pc, #44]	; (dbe4 <usbdc_set_interface+0x13c>)
    dbb6:	47a0      	blx	r4
			return true;
    dbb8:	2301      	movs	r3, #1
    dbba:	e005      	b.n	dbc8 <usbdc_set_interface+0x120>
		} else {
			return false;
    dbbc:	2300      	movs	r3, #0
    dbbe:	e003      	b.n	dbc8 <usbdc_set_interface+0x120>
	while (NULL != func) {
    dbc0:	697b      	ldr	r3, [r7, #20]
    dbc2:	2b00      	cmp	r3, #0
    dbc4:	d1ca      	bne.n	db5c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    dbc6:	2300      	movs	r3, #0
}
    dbc8:	4618      	mov	r0, r3
    dbca:	371c      	adds	r7, #28
    dbcc:	46bd      	mov	sp, r7
    dbce:	bd90      	pop	{r4, r7, pc}
    dbd0:	20000e54 	.word	0x20000e54
    dbd4:	0000e30d 	.word	0x0000e30d
    dbd8:	0000d4b9 	.word	0x0000d4b9
    dbdc:	0000e24d 	.word	0x0000e24d
    dbe0:	0000d495 	.word	0x0000d495
    dbe4:	0000dfbd 	.word	0x0000dfbd

0000dbe8 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    dbe8:	b590      	push	{r4, r7, lr}
    dbea:	b083      	sub	sp, #12
    dbec:	af00      	add	r7, sp, #0
    dbee:	4603      	mov	r3, r0
    dbf0:	6039      	str	r1, [r7, #0]
    dbf2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    dbf4:	683b      	ldr	r3, [r7, #0]
    dbf6:	785b      	ldrb	r3, [r3, #1]
    dbf8:	3b01      	subs	r3, #1
    dbfa:	2b0a      	cmp	r3, #10
    dbfc:	d85b      	bhi.n	dcb6 <usbdc_set_req+0xce>
    dbfe:	a201      	add	r2, pc, #4	; (adr r2, dc04 <usbdc_set_req+0x1c>)
    dc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dc04:	0000dc83 	.word	0x0000dc83
    dc08:	0000dcb7 	.word	0x0000dcb7
    dc0c:	0000dc91 	.word	0x0000dc91
    dc10:	0000dcb7 	.word	0x0000dcb7
    dc14:	0000dc31 	.word	0x0000dc31
    dc18:	0000dcb7 	.word	0x0000dcb7
    dc1c:	0000dcb7 	.word	0x0000dcb7
    dc20:	0000dcb7 	.word	0x0000dcb7
    dc24:	0000dc4b 	.word	0x0000dc4b
    dc28:	0000dcb7 	.word	0x0000dcb7
    dc2c:	0000dc9f 	.word	0x0000dc9f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    dc30:	79f8      	ldrb	r0, [r7, #7]
    dc32:	2301      	movs	r3, #1
    dc34:	2200      	movs	r2, #0
    dc36:	2100      	movs	r1, #0
    dc38:	4c21      	ldr	r4, [pc, #132]	; (dcc0 <usbdc_set_req+0xd8>)
    dc3a:	47a0      	blx	r4
    dc3c:	4603      	mov	r3, r0
    dc3e:	2b00      	cmp	r3, #0
    dc40:	bf0c      	ite	eq
    dc42:	2301      	moveq	r3, #1
    dc44:	2300      	movne	r3, #0
    dc46:	b2db      	uxtb	r3, r3
    dc48:	e036      	b.n	dcb8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    dc4a:	683b      	ldr	r3, [r7, #0]
    dc4c:	885b      	ldrh	r3, [r3, #2]
    dc4e:	b29b      	uxth	r3, r3
    dc50:	b2db      	uxtb	r3, r3
    dc52:	4618      	mov	r0, r3
    dc54:	4b1b      	ldr	r3, [pc, #108]	; (dcc4 <usbdc_set_req+0xdc>)
    dc56:	4798      	blx	r3
    dc58:	4603      	mov	r3, r0
    dc5a:	f083 0301 	eor.w	r3, r3, #1
    dc5e:	b2db      	uxtb	r3, r3
    dc60:	2b00      	cmp	r3, #0
    dc62:	d001      	beq.n	dc68 <usbdc_set_req+0x80>
			return false;
    dc64:	2300      	movs	r3, #0
    dc66:	e027      	b.n	dcb8 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    dc68:	79f8      	ldrb	r0, [r7, #7]
    dc6a:	2301      	movs	r3, #1
    dc6c:	2200      	movs	r2, #0
    dc6e:	2100      	movs	r1, #0
    dc70:	4c13      	ldr	r4, [pc, #76]	; (dcc0 <usbdc_set_req+0xd8>)
    dc72:	47a0      	blx	r4
    dc74:	4603      	mov	r3, r0
    dc76:	2b00      	cmp	r3, #0
    dc78:	bf0c      	ite	eq
    dc7a:	2301      	moveq	r3, #1
    dc7c:	2300      	movne	r3, #0
    dc7e:	b2db      	uxtb	r3, r3
    dc80:	e01a      	b.n	dcb8 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    dc82:	79fb      	ldrb	r3, [r7, #7]
    dc84:	6839      	ldr	r1, [r7, #0]
    dc86:	4618      	mov	r0, r3
    dc88:	4b0f      	ldr	r3, [pc, #60]	; (dcc8 <usbdc_set_req+0xe0>)
    dc8a:	4798      	blx	r3
    dc8c:	4603      	mov	r3, r0
    dc8e:	e013      	b.n	dcb8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    dc90:	79fb      	ldrb	r3, [r7, #7]
    dc92:	6839      	ldr	r1, [r7, #0]
    dc94:	4618      	mov	r0, r3
    dc96:	4b0d      	ldr	r3, [pc, #52]	; (dccc <usbdc_set_req+0xe4>)
    dc98:	4798      	blx	r3
    dc9a:	4603      	mov	r3, r0
    dc9c:	e00c      	b.n	dcb8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    dc9e:	683b      	ldr	r3, [r7, #0]
    dca0:	885b      	ldrh	r3, [r3, #2]
    dca2:	b29a      	uxth	r2, r3
    dca4:	683b      	ldr	r3, [r7, #0]
    dca6:	889b      	ldrh	r3, [r3, #4]
    dca8:	b29b      	uxth	r3, r3
    dcaa:	4619      	mov	r1, r3
    dcac:	4610      	mov	r0, r2
    dcae:	4b08      	ldr	r3, [pc, #32]	; (dcd0 <usbdc_set_req+0xe8>)
    dcb0:	4798      	blx	r3
    dcb2:	4603      	mov	r3, r0
    dcb4:	e000      	b.n	dcb8 <usbdc_set_req+0xd0>
	default:
		return false;
    dcb6:	2300      	movs	r3, #0
	}
}
    dcb8:	4618      	mov	r0, r3
    dcba:	370c      	adds	r7, #12
    dcbc:	46bd      	mov	sp, r7
    dcbe:	bd90      	pop	{r4, r7, pc}
    dcc0:	0000dfbd 	.word	0x0000dfbd
    dcc4:	0000d99d 	.word	0x0000d99d
    dcc8:	0000d8b9 	.word	0x0000d8b9
    dccc:	0000d911 	.word	0x0000d911
    dcd0:	0000daa9 	.word	0x0000daa9

0000dcd4 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    dcd4:	b580      	push	{r7, lr}
    dcd6:	b082      	sub	sp, #8
    dcd8:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    dcda:	4b0a      	ldr	r3, [pc, #40]	; (dd04 <usbdc_sof_notify+0x30>)
    dcdc:	685b      	ldr	r3, [r3, #4]
    dcde:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    dce0:	e009      	b.n	dcf6 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    dce2:	687b      	ldr	r3, [r7, #4]
    dce4:	685b      	ldr	r3, [r3, #4]
    dce6:	2b00      	cmp	r3, #0
    dce8:	d002      	beq.n	dcf0 <usbdc_sof_notify+0x1c>
			sof->cb();
    dcea:	687b      	ldr	r3, [r7, #4]
    dcec:	685b      	ldr	r3, [r3, #4]
    dcee:	4798      	blx	r3
		}
		sof = sof->next;
    dcf0:	687b      	ldr	r3, [r7, #4]
    dcf2:	681b      	ldr	r3, [r3, #0]
    dcf4:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    dcf6:	687b      	ldr	r3, [r7, #4]
    dcf8:	2b00      	cmp	r3, #0
    dcfa:	d1f2      	bne.n	dce2 <usbdc_sof_notify+0xe>
	}
}
    dcfc:	bf00      	nop
    dcfe:	3708      	adds	r7, #8
    dd00:	46bd      	mov	sp, r7
    dd02:	bd80      	pop	{r7, pc}
    dd04:	20000e54 	.word	0x20000e54

0000dd08 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    dd08:	b580      	push	{r7, lr}
    dd0a:	b084      	sub	sp, #16
    dd0c:	af00      	add	r7, sp, #0
    dd0e:	4603      	mov	r3, r0
    dd10:	6039      	str	r1, [r7, #0]
    dd12:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    dd14:	4b0b      	ldr	r3, [pc, #44]	; (dd44 <usbdc_change_notify+0x3c>)
    dd16:	68db      	ldr	r3, [r3, #12]
    dd18:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    dd1a:	e00c      	b.n	dd36 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    dd1c:	68fb      	ldr	r3, [r7, #12]
    dd1e:	685b      	ldr	r3, [r3, #4]
    dd20:	2b00      	cmp	r3, #0
    dd22:	d005      	beq.n	dd30 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    dd24:	68fb      	ldr	r3, [r7, #12]
    dd26:	685b      	ldr	r3, [r3, #4]
    dd28:	79fa      	ldrb	r2, [r7, #7]
    dd2a:	6839      	ldr	r1, [r7, #0]
    dd2c:	4610      	mov	r0, r2
    dd2e:	4798      	blx	r3
		}
		cg = cg->next;
    dd30:	68fb      	ldr	r3, [r7, #12]
    dd32:	681b      	ldr	r3, [r3, #0]
    dd34:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    dd36:	68fb      	ldr	r3, [r7, #12]
    dd38:	2b00      	cmp	r3, #0
    dd3a:	d1ef      	bne.n	dd1c <usbdc_change_notify+0x14>
	}
}
    dd3c:	bf00      	nop
    dd3e:	3710      	adds	r7, #16
    dd40:	46bd      	mov	sp, r7
    dd42:	bd80      	pop	{r7, pc}
    dd44:	20000e54 	.word	0x20000e54

0000dd48 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    dd48:	b580      	push	{r7, lr}
    dd4a:	b084      	sub	sp, #16
    dd4c:	af00      	add	r7, sp, #0
    dd4e:	4603      	mov	r3, r0
    dd50:	6039      	str	r1, [r7, #0]
    dd52:	71fb      	strb	r3, [r7, #7]
    dd54:	4613      	mov	r3, r2
    dd56:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    dd58:	4b12      	ldr	r3, [pc, #72]	; (dda4 <usbdc_request_handler+0x5c>)
    dd5a:	689b      	ldr	r3, [r3, #8]
    dd5c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    dd5e:	e019      	b.n	dd94 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    dd60:	68fb      	ldr	r3, [r7, #12]
    dd62:	685b      	ldr	r3, [r3, #4]
    dd64:	2b00      	cmp	r3, #0
    dd66:	d012      	beq.n	dd8e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    dd68:	68fb      	ldr	r3, [r7, #12]
    dd6a:	685b      	ldr	r3, [r3, #4]
    dd6c:	79ba      	ldrb	r2, [r7, #6]
    dd6e:	79f8      	ldrb	r0, [r7, #7]
    dd70:	6839      	ldr	r1, [r7, #0]
    dd72:	4798      	blx	r3
    dd74:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    dd76:	68bb      	ldr	r3, [r7, #8]
    dd78:	2b00      	cmp	r3, #0
    dd7a:	d101      	bne.n	dd80 <usbdc_request_handler+0x38>
				return true;
    dd7c:	2301      	movs	r3, #1
    dd7e:	e00d      	b.n	dd9c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    dd80:	68bb      	ldr	r3, [r7, #8]
    dd82:	f113 0f0a 	cmn.w	r3, #10
    dd86:	d002      	beq.n	dd8e <usbdc_request_handler+0x46>
				return -1;
    dd88:	f04f 33ff 	mov.w	r3, #4294967295
    dd8c:	e006      	b.n	dd9c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    dd8e:	68fb      	ldr	r3, [r7, #12]
    dd90:	681b      	ldr	r3, [r3, #0]
    dd92:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    dd94:	68fb      	ldr	r3, [r7, #12]
    dd96:	2b00      	cmp	r3, #0
    dd98:	d1e2      	bne.n	dd60 <usbdc_request_handler+0x18>
	}
	return false;
    dd9a:	2300      	movs	r3, #0
}
    dd9c:	4618      	mov	r0, r3
    dd9e:	3710      	adds	r7, #16
    dda0:	46bd      	mov	sp, r7
    dda2:	bd80      	pop	{r7, pc}
    dda4:	20000e54 	.word	0x20000e54

0000dda8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    dda8:	b580      	push	{r7, lr}
    ddaa:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    ddac:	4b01      	ldr	r3, [pc, #4]	; (ddb4 <usbd_sof_cb+0xc>)
    ddae:	4798      	blx	r3
}
    ddb0:	bf00      	nop
    ddb2:	bd80      	pop	{r7, pc}
    ddb4:	0000dcd5 	.word	0x0000dcd5

0000ddb8 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    ddb8:	b580      	push	{r7, lr}
    ddba:	b082      	sub	sp, #8
    ddbc:	af00      	add	r7, sp, #0
    ddbe:	4603      	mov	r3, r0
    ddc0:	6039      	str	r1, [r7, #0]
    ddc2:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    ddc4:	79fb      	ldrb	r3, [r7, #7]
    ddc6:	2200      	movs	r2, #0
    ddc8:	6839      	ldr	r1, [r7, #0]
    ddca:	4618      	mov	r0, r3
    ddcc:	4b14      	ldr	r3, [pc, #80]	; (de20 <usbdc_cb_ctl_req+0x68>)
    ddce:	4798      	blx	r3
    ddd0:	4603      	mov	r3, r0
    ddd2:	f1b3 3fff 	cmp.w	r3, #4294967295
    ddd6:	d00b      	beq.n	ddf0 <usbdc_cb_ctl_req+0x38>
    ddd8:	2b01      	cmp	r3, #1
    ddda:	d007      	beq.n	ddec <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    dddc:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ddde:	683b      	ldr	r3, [r7, #0]
    dde0:	781b      	ldrb	r3, [r3, #0]
    dde2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    dde6:	2b00      	cmp	r3, #0
    dde8:	d007      	beq.n	ddfa <usbdc_cb_ctl_req+0x42>
    ddea:	e003      	b.n	ddf4 <usbdc_cb_ctl_req+0x3c>
		return true;
    ddec:	2301      	movs	r3, #1
    ddee:	e013      	b.n	de18 <usbdc_cb_ctl_req+0x60>
		return false;
    ddf0:	2300      	movs	r3, #0
    ddf2:	e011      	b.n	de18 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ddf4:	2b80      	cmp	r3, #128	; 0x80
    ddf6:	d007      	beq.n	de08 <usbdc_cb_ctl_req+0x50>
    ddf8:	e00d      	b.n	de16 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    ddfa:	79fb      	ldrb	r3, [r7, #7]
    ddfc:	6839      	ldr	r1, [r7, #0]
    ddfe:	4618      	mov	r0, r3
    de00:	4b08      	ldr	r3, [pc, #32]	; (de24 <usbdc_cb_ctl_req+0x6c>)
    de02:	4798      	blx	r3
    de04:	4603      	mov	r3, r0
    de06:	e007      	b.n	de18 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    de08:	79fb      	ldrb	r3, [r7, #7]
    de0a:	6839      	ldr	r1, [r7, #0]
    de0c:	4618      	mov	r0, r3
    de0e:	4b06      	ldr	r3, [pc, #24]	; (de28 <usbdc_cb_ctl_req+0x70>)
    de10:	4798      	blx	r3
    de12:	4603      	mov	r3, r0
    de14:	e000      	b.n	de18 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    de16:	2300      	movs	r3, #0
	}
}
    de18:	4618      	mov	r0, r3
    de1a:	3708      	adds	r7, #8
    de1c:	46bd      	mov	sp, r7
    de1e:	bd80      	pop	{r7, pc}
    de20:	0000dd49 	.word	0x0000dd49
    de24:	0000dbe9 	.word	0x0000dbe9
    de28:	0000d811 	.word	0x0000d811

0000de2c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    de2c:	b580      	push	{r7, lr}
    de2e:	b082      	sub	sp, #8
    de30:	af00      	add	r7, sp, #0
    de32:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    de34:	687b      	ldr	r3, [r7, #4]
    de36:	781b      	ldrb	r3, [r3, #0]
    de38:	2b00      	cmp	r3, #0
    de3a:	d135      	bne.n	dea8 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    de3c:	687b      	ldr	r3, [r7, #4]
    de3e:	785b      	ldrb	r3, [r3, #1]
    de40:	2b05      	cmp	r3, #5
    de42:	d019      	beq.n	de78 <usbdc_ctrl_status_end+0x4c>
    de44:	2b09      	cmp	r3, #9
    de46:	d000      	beq.n	de4a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    de48:	e02f      	b.n	deaa <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    de4a:	687b      	ldr	r3, [r7, #4]
    de4c:	885b      	ldrh	r3, [r3, #2]
    de4e:	b29b      	uxth	r3, r3
    de50:	b2da      	uxtb	r2, r3
    de52:	4b17      	ldr	r3, [pc, #92]	; (deb0 <usbdc_ctrl_status_end+0x84>)
    de54:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    de56:	687b      	ldr	r3, [r7, #4]
    de58:	885b      	ldrh	r3, [r3, #2]
    de5a:	b29b      	uxth	r3, r3
    de5c:	2b00      	cmp	r3, #0
    de5e:	d001      	beq.n	de64 <usbdc_ctrl_status_end+0x38>
    de60:	2204      	movs	r2, #4
    de62:	e000      	b.n	de66 <usbdc_ctrl_status_end+0x3a>
    de64:	2203      	movs	r2, #3
    de66:	4b12      	ldr	r3, [pc, #72]	; (deb0 <usbdc_ctrl_status_end+0x84>)
    de68:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    de6a:	4b11      	ldr	r3, [pc, #68]	; (deb0 <usbdc_ctrl_status_end+0x84>)
    de6c:	7e9b      	ldrb	r3, [r3, #26]
    de6e:	4619      	mov	r1, r3
    de70:	2001      	movs	r0, #1
    de72:	4b10      	ldr	r3, [pc, #64]	; (deb4 <usbdc_ctrl_status_end+0x88>)
    de74:	4798      	blx	r3
		break;
    de76:	e018      	b.n	deaa <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    de78:	687b      	ldr	r3, [r7, #4]
    de7a:	885b      	ldrh	r3, [r3, #2]
    de7c:	b29b      	uxth	r3, r3
    de7e:	b2db      	uxtb	r3, r3
    de80:	4618      	mov	r0, r3
    de82:	4b0d      	ldr	r3, [pc, #52]	; (deb8 <usbdc_ctrl_status_end+0x8c>)
    de84:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    de86:	687b      	ldr	r3, [r7, #4]
    de88:	885b      	ldrh	r3, [r3, #2]
    de8a:	b29b      	uxth	r3, r3
    de8c:	2b00      	cmp	r3, #0
    de8e:	d001      	beq.n	de94 <usbdc_ctrl_status_end+0x68>
    de90:	2203      	movs	r2, #3
    de92:	e000      	b.n	de96 <usbdc_ctrl_status_end+0x6a>
    de94:	2202      	movs	r2, #2
    de96:	4b06      	ldr	r3, [pc, #24]	; (deb0 <usbdc_ctrl_status_end+0x84>)
    de98:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    de9a:	4b05      	ldr	r3, [pc, #20]	; (deb0 <usbdc_ctrl_status_end+0x84>)
    de9c:	7e9b      	ldrb	r3, [r3, #26]
    de9e:	4619      	mov	r1, r3
    dea0:	2001      	movs	r0, #1
    dea2:	4b04      	ldr	r3, [pc, #16]	; (deb4 <usbdc_ctrl_status_end+0x88>)
    dea4:	4798      	blx	r3
		break;
    dea6:	e000      	b.n	deaa <usbdc_ctrl_status_end+0x7e>
		return;
    dea8:	bf00      	nop
	}
}
    deaa:	3708      	adds	r7, #8
    deac:	46bd      	mov	sp, r7
    deae:	bd80      	pop	{r7, pc}
    deb0:	20000e54 	.word	0x20000e54
    deb4:	0000dd09 	.word	0x0000dd09
    deb8:	0000da89 	.word	0x0000da89

0000debc <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    debc:	b580      	push	{r7, lr}
    debe:	b082      	sub	sp, #8
    dec0:	af00      	add	r7, sp, #0
    dec2:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    dec4:	2201      	movs	r2, #1
    dec6:	6879      	ldr	r1, [r7, #4]
    dec8:	2000      	movs	r0, #0
    deca:	4b03      	ldr	r3, [pc, #12]	; (ded8 <usbdc_ctrl_data_end+0x1c>)
    decc:	4798      	blx	r3
	return false;
    dece:	2300      	movs	r3, #0
}
    ded0:	4618      	mov	r0, r3
    ded2:	3708      	adds	r7, #8
    ded4:	46bd      	mov	sp, r7
    ded6:	bd80      	pop	{r7, pc}
    ded8:	0000dd49 	.word	0x0000dd49

0000dedc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    dedc:	b580      	push	{r7, lr}
    dede:	b082      	sub	sp, #8
    dee0:	af00      	add	r7, sp, #0
    dee2:	4603      	mov	r3, r0
    dee4:	603a      	str	r2, [r7, #0]
    dee6:	71fb      	strb	r3, [r7, #7]
    dee8:	460b      	mov	r3, r1
    deea:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    deec:	79bb      	ldrb	r3, [r7, #6]
    deee:	2b00      	cmp	r3, #0
    def0:	d002      	beq.n	def8 <usbdc_cb_ctl_done+0x1c>
    def2:	2b01      	cmp	r3, #1
    def4:	d004      	beq.n	df00 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    def6:	e008      	b.n	df0a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    def8:	6838      	ldr	r0, [r7, #0]
    defa:	4b06      	ldr	r3, [pc, #24]	; (df14 <usbdc_cb_ctl_done+0x38>)
    defc:	4798      	blx	r3
		break;
    defe:	e004      	b.n	df0a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    df00:	6838      	ldr	r0, [r7, #0]
    df02:	4b05      	ldr	r3, [pc, #20]	; (df18 <usbdc_cb_ctl_done+0x3c>)
    df04:	4798      	blx	r3
    df06:	4603      	mov	r3, r0
    df08:	e000      	b.n	df0c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    df0a:	2300      	movs	r3, #0
}
    df0c:	4618      	mov	r0, r3
    df0e:	3708      	adds	r7, #8
    df10:	46bd      	mov	sp, r7
    df12:	bd80      	pop	{r7, pc}
    df14:	0000de2d 	.word	0x0000de2d
    df18:	0000debd 	.word	0x0000debd

0000df1c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    df1c:	b580      	push	{r7, lr}
    df1e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    df20:	4b10      	ldr	r3, [pc, #64]	; (df64 <usbdc_reset+0x48>)
    df22:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    df24:	4b10      	ldr	r3, [pc, #64]	; (df68 <usbdc_reset+0x4c>)
    df26:	2202      	movs	r2, #2
    df28:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    df2a:	4b0f      	ldr	r3, [pc, #60]	; (df68 <usbdc_reset+0x4c>)
    df2c:	2200      	movs	r2, #0
    df2e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    df30:	4b0d      	ldr	r3, [pc, #52]	; (df68 <usbdc_reset+0x4c>)
    df32:	2200      	movs	r2, #0
    df34:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    df36:	2000      	movs	r0, #0
    df38:	4b0c      	ldr	r3, [pc, #48]	; (df6c <usbdc_reset+0x50>)
    df3a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    df3c:	4b0a      	ldr	r3, [pc, #40]	; (df68 <usbdc_reset+0x4c>)
    df3e:	7f1b      	ldrb	r3, [r3, #28]
    df40:	4618      	mov	r0, r3
    df42:	4b0b      	ldr	r3, [pc, #44]	; (df70 <usbdc_reset+0x54>)
    df44:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    df46:	4a0b      	ldr	r2, [pc, #44]	; (df74 <usbdc_reset+0x58>)
    df48:	2100      	movs	r1, #0
    df4a:	2000      	movs	r0, #0
    df4c:	4b0a      	ldr	r3, [pc, #40]	; (df78 <usbdc_reset+0x5c>)
    df4e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    df50:	4a0a      	ldr	r2, [pc, #40]	; (df7c <usbdc_reset+0x60>)
    df52:	2102      	movs	r1, #2
    df54:	2000      	movs	r0, #0
    df56:	4b08      	ldr	r3, [pc, #32]	; (df78 <usbdc_reset+0x5c>)
    df58:	4798      	blx	r3
	usb_d_ep_enable(0);
    df5a:	2000      	movs	r0, #0
    df5c:	4b08      	ldr	r3, [pc, #32]	; (df80 <usbdc_reset+0x64>)
    df5e:	4798      	blx	r3
}
    df60:	bf00      	nop
    df62:	bd80      	pop	{r7, pc}
    df64:	0000d969 	.word	0x0000d969
    df68:	20000e54 	.word	0x20000e54
    df6c:	000046c5 	.word	0x000046c5
    df70:	00004601 	.word	0x00004601
    df74:	0000ddb9 	.word	0x0000ddb9
    df78:	00004a19 	.word	0x00004a19
    df7c:	0000dedd 	.word	0x0000dedd
    df80:	00004715 	.word	0x00004715

0000df84 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    df84:	b580      	push	{r7, lr}
    df86:	b082      	sub	sp, #8
    df88:	af00      	add	r7, sp, #0
    df8a:	4603      	mov	r3, r0
    df8c:	6039      	str	r1, [r7, #0]
    df8e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    df90:	79fb      	ldrb	r3, [r7, #7]
    df92:	2b00      	cmp	r3, #0
    df94:	d002      	beq.n	df9c <usbd_event_cb+0x18>
    df96:	2b01      	cmp	r3, #1
    df98:	d005      	beq.n	dfa6 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    df9a:	e007      	b.n	dfac <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    df9c:	6839      	ldr	r1, [r7, #0]
    df9e:	2000      	movs	r0, #0
    dfa0:	4b04      	ldr	r3, [pc, #16]	; (dfb4 <usbd_event_cb+0x30>)
    dfa2:	4798      	blx	r3
		break;
    dfa4:	e002      	b.n	dfac <usbd_event_cb+0x28>
		usbdc_reset();
    dfa6:	4b04      	ldr	r3, [pc, #16]	; (dfb8 <usbd_event_cb+0x34>)
    dfa8:	4798      	blx	r3
		break;
    dfaa:	bf00      	nop
	}
}
    dfac:	bf00      	nop
    dfae:	3708      	adds	r7, #8
    dfb0:	46bd      	mov	sp, r7
    dfb2:	bd80      	pop	{r7, pc}
    dfb4:	0000dd09 	.word	0x0000dd09
    dfb8:	0000df1d 	.word	0x0000df1d

0000dfbc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    dfbc:	b580      	push	{r7, lr}
    dfbe:	b088      	sub	sp, #32
    dfc0:	af00      	add	r7, sp, #0
    dfc2:	60b9      	str	r1, [r7, #8]
    dfc4:	607a      	str	r2, [r7, #4]
    dfc6:	461a      	mov	r2, r3
    dfc8:	4603      	mov	r3, r0
    dfca:	73fb      	strb	r3, [r7, #15]
    dfcc:	4613      	mov	r3, r2
    dfce:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    dfd0:	68bb      	ldr	r3, [r7, #8]
    dfd2:	617b      	str	r3, [r7, #20]
    dfd4:	687b      	ldr	r3, [r7, #4]
    dfd6:	61bb      	str	r3, [r7, #24]
    dfd8:	7bfb      	ldrb	r3, [r7, #15]
    dfda:	773b      	strb	r3, [r7, #28]
    dfdc:	7bbb      	ldrb	r3, [r7, #14]
    dfde:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    dfe0:	f107 0314 	add.w	r3, r7, #20
    dfe4:	4618      	mov	r0, r3
    dfe6:	4b03      	ldr	r3, [pc, #12]	; (dff4 <usbdc_xfer+0x38>)
    dfe8:	4798      	blx	r3
    dfea:	4603      	mov	r3, r0
}
    dfec:	4618      	mov	r0, r3
    dfee:	3720      	adds	r7, #32
    dff0:	46bd      	mov	sp, r7
    dff2:	bd80      	pop	{r7, pc}
    dff4:	00004785 	.word	0x00004785

0000dff8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    dff8:	b580      	push	{r7, lr}
    dffa:	b082      	sub	sp, #8
    dffc:	af00      	add	r7, sp, #0
    dffe:	4603      	mov	r3, r0
    e000:	6039      	str	r1, [r7, #0]
    e002:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    e004:	79fb      	ldrb	r3, [r7, #7]
    e006:	2b01      	cmp	r3, #1
    e008:	d009      	beq.n	e01e <usbdc_register_handler+0x26>
    e00a:	2b02      	cmp	r3, #2
    e00c:	d00c      	beq.n	e028 <usbdc_register_handler+0x30>
    e00e:	2b00      	cmp	r3, #0
    e010:	d000      	beq.n	e014 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    e012:	e00e      	b.n	e032 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    e014:	6839      	ldr	r1, [r7, #0]
    e016:	4809      	ldr	r0, [pc, #36]	; (e03c <usbdc_register_handler+0x44>)
    e018:	4b09      	ldr	r3, [pc, #36]	; (e040 <usbdc_register_handler+0x48>)
    e01a:	4798      	blx	r3
		break;
    e01c:	e009      	b.n	e032 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    e01e:	6839      	ldr	r1, [r7, #0]
    e020:	4808      	ldr	r0, [pc, #32]	; (e044 <usbdc_register_handler+0x4c>)
    e022:	4b07      	ldr	r3, [pc, #28]	; (e040 <usbdc_register_handler+0x48>)
    e024:	4798      	blx	r3
		break;
    e026:	e004      	b.n	e032 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    e028:	6839      	ldr	r1, [r7, #0]
    e02a:	4807      	ldr	r0, [pc, #28]	; (e048 <usbdc_register_handler+0x50>)
    e02c:	4b04      	ldr	r3, [pc, #16]	; (e040 <usbdc_register_handler+0x48>)
    e02e:	4798      	blx	r3
		break;
    e030:	bf00      	nop
	}
}
    e032:	bf00      	nop
    e034:	3708      	adds	r7, #8
    e036:	46bd      	mov	sp, r7
    e038:	bd80      	pop	{r7, pc}
    e03a:	bf00      	nop
    e03c:	20000e58 	.word	0x20000e58
    e040:	00004b71 	.word	0x00004b71
    e044:	20000e5c 	.word	0x20000e5c
    e048:	20000e60 	.word	0x20000e60

0000e04c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    e04c:	b580      	push	{r7, lr}
    e04e:	b084      	sub	sp, #16
    e050:	af00      	add	r7, sp, #0
    e052:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    e054:	687b      	ldr	r3, [r7, #4]
    e056:	2b00      	cmp	r3, #0
    e058:	bf14      	ite	ne
    e05a:	2301      	movne	r3, #1
    e05c:	2300      	moveq	r3, #0
    e05e:	b2db      	uxtb	r3, r3
    e060:	f240 3255 	movw	r2, #853	; 0x355
    e064:	4910      	ldr	r1, [pc, #64]	; (e0a8 <usbdc_init+0x5c>)
    e066:	4618      	mov	r0, r3
    e068:	4b10      	ldr	r3, [pc, #64]	; (e0ac <usbdc_init+0x60>)
    e06a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    e06c:	4b10      	ldr	r3, [pc, #64]	; (e0b0 <usbdc_init+0x64>)
    e06e:	4798      	blx	r3
    e070:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    e072:	68fb      	ldr	r3, [r7, #12]
    e074:	2b00      	cmp	r3, #0
    e076:	da01      	bge.n	e07c <usbdc_init+0x30>
		return rc;
    e078:	68fb      	ldr	r3, [r7, #12]
    e07a:	e010      	b.n	e09e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    e07c:	2220      	movs	r2, #32
    e07e:	2100      	movs	r1, #0
    e080:	480c      	ldr	r0, [pc, #48]	; (e0b4 <usbdc_init+0x68>)
    e082:	4b0d      	ldr	r3, [pc, #52]	; (e0b8 <usbdc_init+0x6c>)
    e084:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    e086:	4a0b      	ldr	r2, [pc, #44]	; (e0b4 <usbdc_init+0x68>)
    e088:	687b      	ldr	r3, [r7, #4]
    e08a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    e08c:	490b      	ldr	r1, [pc, #44]	; (e0bc <usbdc_init+0x70>)
    e08e:	2000      	movs	r0, #0
    e090:	4b0b      	ldr	r3, [pc, #44]	; (e0c0 <usbdc_init+0x74>)
    e092:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    e094:	490b      	ldr	r1, [pc, #44]	; (e0c4 <usbdc_init+0x78>)
    e096:	2001      	movs	r0, #1
    e098:	4b09      	ldr	r3, [pc, #36]	; (e0c0 <usbdc_init+0x74>)
    e09a:	4798      	blx	r3

	return 0;
    e09c:	2300      	movs	r3, #0
}
    e09e:	4618      	mov	r0, r3
    e0a0:	3710      	adds	r7, #16
    e0a2:	46bd      	mov	sp, r7
    e0a4:	bd80      	pop	{r7, pc}
    e0a6:	bf00      	nop
    e0a8:	00010fa0 	.word	0x00010fa0
    e0ac:	00004a95 	.word	0x00004a95
    e0b0:	000044ed 	.word	0x000044ed
    e0b4:	20000e54 	.word	0x20000e54
    e0b8:	000108fd 	.word	0x000108fd
    e0bc:	0000dda9 	.word	0x0000dda9
    e0c0:	00004599 	.word	0x00004599
    e0c4:	0000df85 	.word	0x0000df85

0000e0c8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    e0c8:	b580      	push	{r7, lr}
    e0ca:	b082      	sub	sp, #8
    e0cc:	af00      	add	r7, sp, #0
    e0ce:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    e0d0:	6879      	ldr	r1, [r7, #4]
    e0d2:	4803      	ldr	r0, [pc, #12]	; (e0e0 <usbdc_register_function+0x18>)
    e0d4:	4b03      	ldr	r3, [pc, #12]	; (e0e4 <usbdc_register_function+0x1c>)
    e0d6:	4798      	blx	r3
}
    e0d8:	bf00      	nop
    e0da:	3708      	adds	r7, #8
    e0dc:	46bd      	mov	sp, r7
    e0de:	bd80      	pop	{r7, pc}
    e0e0:	20000e64 	.word	0x20000e64
    e0e4:	00004b71 	.word	0x00004b71

0000e0e8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    e0e8:	b580      	push	{r7, lr}
    e0ea:	b082      	sub	sp, #8
    e0ec:	af00      	add	r7, sp, #0
    e0ee:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    e0f0:	4b0f      	ldr	r3, [pc, #60]	; (e130 <usbdc_start+0x48>)
    e0f2:	7e9b      	ldrb	r3, [r3, #26]
    e0f4:	2b00      	cmp	r3, #0
    e0f6:	d002      	beq.n	e0fe <usbdc_start+0x16>
		return ERR_BUSY;
    e0f8:	f06f 0303 	mvn.w	r3, #3
    e0fc:	e013      	b.n	e126 <usbdc_start+0x3e>
	}

	if (desces) {
    e0fe:	687b      	ldr	r3, [r7, #4]
    e100:	2b00      	cmp	r3, #0
    e102:	d00e      	beq.n	e122 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    e104:	4a0a      	ldr	r2, [pc, #40]	; (e130 <usbdc_start+0x48>)
    e106:	687b      	ldr	r3, [r7, #4]
    e108:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    e10a:	687b      	ldr	r3, [r7, #4]
    e10c:	681b      	ldr	r3, [r3, #0]
    e10e:	79da      	ldrb	r2, [r3, #7]
    e110:	4b07      	ldr	r3, [pc, #28]	; (e130 <usbdc_start+0x48>)
    e112:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    e114:	4b06      	ldr	r3, [pc, #24]	; (e130 <usbdc_start+0x48>)
    e116:	2201      	movs	r2, #1
    e118:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    e11a:	4b06      	ldr	r3, [pc, #24]	; (e134 <usbdc_start+0x4c>)
    e11c:	4798      	blx	r3
	return ERR_NONE;
    e11e:	2300      	movs	r3, #0
    e120:	e001      	b.n	e126 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    e122:	f06f 0308 	mvn.w	r3, #8
}
    e126:	4618      	mov	r0, r3
    e128:	3708      	adds	r7, #8
    e12a:	46bd      	mov	sp, r7
    e12c:	bd80      	pop	{r7, pc}
    e12e:	bf00      	nop
    e130:	20000e54 	.word	0x20000e54
    e134:	000045bd 	.word	0x000045bd

0000e138 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    e138:	b580      	push	{r7, lr}
    e13a:	af00      	add	r7, sp, #0
	usb_d_attach();
    e13c:	4b01      	ldr	r3, [pc, #4]	; (e144 <usbdc_attach+0xc>)
    e13e:	4798      	blx	r3
}
    e140:	bf00      	nop
    e142:	bd80      	pop	{r7, pc}
    e144:	000045d1 	.word	0x000045d1

0000e148 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    e148:	b480      	push	{r7}
    e14a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    e14c:	4b03      	ldr	r3, [pc, #12]	; (e15c <usbdc_get_ctrl_buffer+0x14>)
    e14e:	695b      	ldr	r3, [r3, #20]
}
    e150:	4618      	mov	r0, r3
    e152:	46bd      	mov	sp, r7
    e154:	f85d 7b04 	ldr.w	r7, [sp], #4
    e158:	4770      	bx	lr
    e15a:	bf00      	nop
    e15c:	20000e54 	.word	0x20000e54

0000e160 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    e160:	b480      	push	{r7}
    e162:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    e164:	4b07      	ldr	r3, [pc, #28]	; (e184 <usbdc_get_state+0x24>)
    e166:	7e9b      	ldrb	r3, [r3, #26]
    e168:	f003 0310 	and.w	r3, r3, #16
    e16c:	2b00      	cmp	r3, #0
    e16e:	d001      	beq.n	e174 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    e170:	2310      	movs	r3, #16
    e172:	e001      	b.n	e178 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    e174:	4b03      	ldr	r3, [pc, #12]	; (e184 <usbdc_get_state+0x24>)
    e176:	7e9b      	ldrb	r3, [r3, #26]
}
    e178:	4618      	mov	r0, r3
    e17a:	46bd      	mov	sp, r7
    e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e180:	4770      	bx	lr
    e182:	bf00      	nop
    e184:	20000e54 	.word	0x20000e54

0000e188 <usb_get_u16>:
{
    e188:	b480      	push	{r7}
    e18a:	b083      	sub	sp, #12
    e18c:	af00      	add	r7, sp, #0
    e18e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    e190:	687b      	ldr	r3, [r7, #4]
    e192:	781b      	ldrb	r3, [r3, #0]
    e194:	b29a      	uxth	r2, r3
    e196:	687b      	ldr	r3, [r7, #4]
    e198:	3301      	adds	r3, #1
    e19a:	781b      	ldrb	r3, [r3, #0]
    e19c:	b29b      	uxth	r3, r3
    e19e:	021b      	lsls	r3, r3, #8
    e1a0:	b29b      	uxth	r3, r3
    e1a2:	4413      	add	r3, r2
    e1a4:	b29b      	uxth	r3, r3
}
    e1a6:	4618      	mov	r0, r3
    e1a8:	370c      	adds	r7, #12
    e1aa:	46bd      	mov	sp, r7
    e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1b0:	4770      	bx	lr

0000e1b2 <usb_desc_len>:
{
    e1b2:	b480      	push	{r7}
    e1b4:	b083      	sub	sp, #12
    e1b6:	af00      	add	r7, sp, #0
    e1b8:	6078      	str	r0, [r7, #4]
	return desc[0];
    e1ba:	687b      	ldr	r3, [r7, #4]
    e1bc:	781b      	ldrb	r3, [r3, #0]
}
    e1be:	4618      	mov	r0, r3
    e1c0:	370c      	adds	r7, #12
    e1c2:	46bd      	mov	sp, r7
    e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1c8:	4770      	bx	lr

0000e1ca <usb_desc_type>:
{
    e1ca:	b480      	push	{r7}
    e1cc:	b083      	sub	sp, #12
    e1ce:	af00      	add	r7, sp, #0
    e1d0:	6078      	str	r0, [r7, #4]
	return desc[1];
    e1d2:	687b      	ldr	r3, [r7, #4]
    e1d4:	3301      	adds	r3, #1
    e1d6:	781b      	ldrb	r3, [r3, #0]
}
    e1d8:	4618      	mov	r0, r3
    e1da:	370c      	adds	r7, #12
    e1dc:	46bd      	mov	sp, r7
    e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1e2:	4770      	bx	lr

0000e1e4 <usb_desc_next>:
{
    e1e4:	b580      	push	{r7, lr}
    e1e6:	b082      	sub	sp, #8
    e1e8:	af00      	add	r7, sp, #0
    e1ea:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    e1ec:	6878      	ldr	r0, [r7, #4]
    e1ee:	4b05      	ldr	r3, [pc, #20]	; (e204 <usb_desc_next+0x20>)
    e1f0:	4798      	blx	r3
    e1f2:	4603      	mov	r3, r0
    e1f4:	461a      	mov	r2, r3
    e1f6:	687b      	ldr	r3, [r7, #4]
    e1f8:	4413      	add	r3, r2
}
    e1fa:	4618      	mov	r0, r3
    e1fc:	3708      	adds	r7, #8
    e1fe:	46bd      	mov	sp, r7
    e200:	bd80      	pop	{r7, pc}
    e202:	bf00      	nop
    e204:	0000e1b3 	.word	0x0000e1b3

0000e208 <usb_cfg_desc_total_len>:
{
    e208:	b580      	push	{r7, lr}
    e20a:	b082      	sub	sp, #8
    e20c:	af00      	add	r7, sp, #0
    e20e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    e210:	687b      	ldr	r3, [r7, #4]
    e212:	3302      	adds	r3, #2
    e214:	4618      	mov	r0, r3
    e216:	4b03      	ldr	r3, [pc, #12]	; (e224 <usb_cfg_desc_total_len+0x1c>)
    e218:	4798      	blx	r3
    e21a:	4603      	mov	r3, r0
}
    e21c:	4618      	mov	r0, r3
    e21e:	3708      	adds	r7, #8
    e220:	46bd      	mov	sp, r7
    e222:	bd80      	pop	{r7, pc}
    e224:	0000e189 	.word	0x0000e189

0000e228 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    e228:	b580      	push	{r7, lr}
    e22a:	b082      	sub	sp, #8
    e22c:	af00      	add	r7, sp, #0
    e22e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    e230:	6878      	ldr	r0, [r7, #4]
    e232:	4b05      	ldr	r3, [pc, #20]	; (e248 <usb_cfg_desc_next+0x20>)
    e234:	4798      	blx	r3
    e236:	4603      	mov	r3, r0
    e238:	461a      	mov	r2, r3
    e23a:	687b      	ldr	r3, [r7, #4]
    e23c:	4413      	add	r3, r2
}
    e23e:	4618      	mov	r0, r3
    e240:	3708      	adds	r7, #8
    e242:	46bd      	mov	sp, r7
    e244:	bd80      	pop	{r7, pc}
    e246:	bf00      	nop
    e248:	0000e209 	.word	0x0000e209

0000e24c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    e24c:	b580      	push	{r7, lr}
    e24e:	b084      	sub	sp, #16
    e250:	af00      	add	r7, sp, #0
    e252:	60f8      	str	r0, [r7, #12]
    e254:	60b9      	str	r1, [r7, #8]
    e256:	4613      	mov	r3, r2
    e258:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    e25a:	e015      	b.n	e288 <usb_find_desc+0x3c>
		_desc_len_check();
    e25c:	68f8      	ldr	r0, [r7, #12]
    e25e:	4b0f      	ldr	r3, [pc, #60]	; (e29c <usb_find_desc+0x50>)
    e260:	4798      	blx	r3
    e262:	4603      	mov	r3, r0
    e264:	2b01      	cmp	r3, #1
    e266:	d801      	bhi.n	e26c <usb_find_desc+0x20>
    e268:	2300      	movs	r3, #0
    e26a:	e012      	b.n	e292 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    e26c:	68f8      	ldr	r0, [r7, #12]
    e26e:	4b0c      	ldr	r3, [pc, #48]	; (e2a0 <usb_find_desc+0x54>)
    e270:	4798      	blx	r3
    e272:	4603      	mov	r3, r0
    e274:	461a      	mov	r2, r3
    e276:	79fb      	ldrb	r3, [r7, #7]
    e278:	4293      	cmp	r3, r2
    e27a:	d101      	bne.n	e280 <usb_find_desc+0x34>
			return desc;
    e27c:	68fb      	ldr	r3, [r7, #12]
    e27e:	e008      	b.n	e292 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    e280:	68f8      	ldr	r0, [r7, #12]
    e282:	4b08      	ldr	r3, [pc, #32]	; (e2a4 <usb_find_desc+0x58>)
    e284:	4798      	blx	r3
    e286:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    e288:	68fa      	ldr	r2, [r7, #12]
    e28a:	68bb      	ldr	r3, [r7, #8]
    e28c:	429a      	cmp	r2, r3
    e28e:	d3e5      	bcc.n	e25c <usb_find_desc+0x10>
	}
	return NULL;
    e290:	2300      	movs	r3, #0
}
    e292:	4618      	mov	r0, r3
    e294:	3710      	adds	r7, #16
    e296:	46bd      	mov	sp, r7
    e298:	bd80      	pop	{r7, pc}
    e29a:	bf00      	nop
    e29c:	0000e1b3 	.word	0x0000e1b3
    e2a0:	0000e1cb 	.word	0x0000e1cb
    e2a4:	0000e1e5 	.word	0x0000e1e5

0000e2a8 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    e2a8:	b580      	push	{r7, lr}
    e2aa:	b082      	sub	sp, #8
    e2ac:	af00      	add	r7, sp, #0
    e2ae:	6078      	str	r0, [r7, #4]
    e2b0:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    e2b2:	e019      	b.n	e2e8 <usb_find_ep_desc+0x40>
		_desc_len_check();
    e2b4:	6878      	ldr	r0, [r7, #4]
    e2b6:	4b12      	ldr	r3, [pc, #72]	; (e300 <usb_find_ep_desc+0x58>)
    e2b8:	4798      	blx	r3
    e2ba:	4603      	mov	r3, r0
    e2bc:	2b01      	cmp	r3, #1
    e2be:	d801      	bhi.n	e2c4 <usb_find_ep_desc+0x1c>
    e2c0:	2300      	movs	r3, #0
    e2c2:	e018      	b.n	e2f6 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    e2c4:	6878      	ldr	r0, [r7, #4]
    e2c6:	4b0f      	ldr	r3, [pc, #60]	; (e304 <usb_find_ep_desc+0x5c>)
    e2c8:	4798      	blx	r3
    e2ca:	4603      	mov	r3, r0
    e2cc:	2b04      	cmp	r3, #4
    e2ce:	d010      	beq.n	e2f2 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    e2d0:	6878      	ldr	r0, [r7, #4]
    e2d2:	4b0c      	ldr	r3, [pc, #48]	; (e304 <usb_find_ep_desc+0x5c>)
    e2d4:	4798      	blx	r3
    e2d6:	4603      	mov	r3, r0
    e2d8:	2b05      	cmp	r3, #5
    e2da:	d101      	bne.n	e2e0 <usb_find_ep_desc+0x38>
			return desc;
    e2dc:	687b      	ldr	r3, [r7, #4]
    e2de:	e00a      	b.n	e2f6 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    e2e0:	6878      	ldr	r0, [r7, #4]
    e2e2:	4b09      	ldr	r3, [pc, #36]	; (e308 <usb_find_ep_desc+0x60>)
    e2e4:	4798      	blx	r3
    e2e6:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    e2e8:	687a      	ldr	r2, [r7, #4]
    e2ea:	683b      	ldr	r3, [r7, #0]
    e2ec:	429a      	cmp	r2, r3
    e2ee:	d3e1      	bcc.n	e2b4 <usb_find_ep_desc+0xc>
    e2f0:	e000      	b.n	e2f4 <usb_find_ep_desc+0x4c>
			break;
    e2f2:	bf00      	nop
	}
	return NULL;
    e2f4:	2300      	movs	r3, #0
}
    e2f6:	4618      	mov	r0, r3
    e2f8:	3708      	adds	r7, #8
    e2fa:	46bd      	mov	sp, r7
    e2fc:	bd80      	pop	{r7, pc}
    e2fe:	bf00      	nop
    e300:	0000e1b3 	.word	0x0000e1b3
    e304:	0000e1cb 	.word	0x0000e1cb
    e308:	0000e1e5 	.word	0x0000e1e5

0000e30c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    e30c:	b580      	push	{r7, lr}
    e30e:	b084      	sub	sp, #16
    e310:	af00      	add	r7, sp, #0
    e312:	60f8      	str	r0, [r7, #12]
    e314:	60b9      	str	r1, [r7, #8]
    e316:	4613      	mov	r3, r2
    e318:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    e31a:	2202      	movs	r2, #2
    e31c:	68b9      	ldr	r1, [r7, #8]
    e31e:	68f8      	ldr	r0, [r7, #12]
    e320:	4b15      	ldr	r3, [pc, #84]	; (e378 <usb_find_cfg_desc+0x6c>)
    e322:	4798      	blx	r3
    e324:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    e326:	68fb      	ldr	r3, [r7, #12]
    e328:	2b00      	cmp	r3, #0
    e32a:	d11a      	bne.n	e362 <usb_find_cfg_desc+0x56>
		return NULL;
    e32c:	2300      	movs	r3, #0
    e32e:	e01f      	b.n	e370 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    e330:	68f8      	ldr	r0, [r7, #12]
    e332:	4b12      	ldr	r3, [pc, #72]	; (e37c <usb_find_cfg_desc+0x70>)
    e334:	4798      	blx	r3
    e336:	4603      	mov	r3, r0
    e338:	2b01      	cmp	r3, #1
    e33a:	d801      	bhi.n	e340 <usb_find_cfg_desc+0x34>
    e33c:	2300      	movs	r3, #0
    e33e:	e017      	b.n	e370 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    e340:	68fb      	ldr	r3, [r7, #12]
    e342:	3301      	adds	r3, #1
    e344:	781b      	ldrb	r3, [r3, #0]
    e346:	2b02      	cmp	r3, #2
    e348:	d110      	bne.n	e36c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    e34a:	68fb      	ldr	r3, [r7, #12]
    e34c:	3305      	adds	r3, #5
    e34e:	781b      	ldrb	r3, [r3, #0]
    e350:	79fa      	ldrb	r2, [r7, #7]
    e352:	429a      	cmp	r2, r3
    e354:	d101      	bne.n	e35a <usb_find_cfg_desc+0x4e>
			return desc;
    e356:	68fb      	ldr	r3, [r7, #12]
    e358:	e00a      	b.n	e370 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    e35a:	68f8      	ldr	r0, [r7, #12]
    e35c:	4b08      	ldr	r3, [pc, #32]	; (e380 <usb_find_cfg_desc+0x74>)
    e35e:	4798      	blx	r3
    e360:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    e362:	68fa      	ldr	r2, [r7, #12]
    e364:	68bb      	ldr	r3, [r7, #8]
    e366:	429a      	cmp	r2, r3
    e368:	d3e2      	bcc.n	e330 <usb_find_cfg_desc+0x24>
    e36a:	e000      	b.n	e36e <usb_find_cfg_desc+0x62>
			break;
    e36c:	bf00      	nop
	}
	return NULL;
    e36e:	2300      	movs	r3, #0
}
    e370:	4618      	mov	r0, r3
    e372:	3710      	adds	r7, #16
    e374:	46bd      	mov	sp, r7
    e376:	bd80      	pop	{r7, pc}
    e378:	0000e24d 	.word	0x0000e24d
    e37c:	0000e1b3 	.word	0x0000e1b3
    e380:	0000e229 	.word	0x0000e229

0000e384 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    e384:	b580      	push	{r7, lr}
    e386:	b086      	sub	sp, #24
    e388:	af00      	add	r7, sp, #0
    e38a:	60f8      	str	r0, [r7, #12]
    e38c:	60b9      	str	r1, [r7, #8]
    e38e:	4613      	mov	r3, r2
    e390:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    e392:	2300      	movs	r3, #0
    e394:	75fb      	strb	r3, [r7, #23]
    e396:	e020      	b.n	e3da <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    e398:	2203      	movs	r2, #3
    e39a:	68b9      	ldr	r1, [r7, #8]
    e39c:	68f8      	ldr	r0, [r7, #12]
    e39e:	4b13      	ldr	r3, [pc, #76]	; (e3ec <usb_find_str_desc+0x68>)
    e3a0:	4798      	blx	r3
    e3a2:	60f8      	str	r0, [r7, #12]
		if (desc) {
    e3a4:	68fb      	ldr	r3, [r7, #12]
    e3a6:	2b00      	cmp	r3, #0
    e3a8:	d015      	beq.n	e3d6 <usb_find_str_desc+0x52>
			_desc_len_check();
    e3aa:	68f8      	ldr	r0, [r7, #12]
    e3ac:	4b10      	ldr	r3, [pc, #64]	; (e3f0 <usb_find_str_desc+0x6c>)
    e3ae:	4798      	blx	r3
    e3b0:	4603      	mov	r3, r0
    e3b2:	2b01      	cmp	r3, #1
    e3b4:	d801      	bhi.n	e3ba <usb_find_str_desc+0x36>
    e3b6:	2300      	movs	r3, #0
    e3b8:	e014      	b.n	e3e4 <usb_find_str_desc+0x60>
			if (i == str_index) {
    e3ba:	7dfa      	ldrb	r2, [r7, #23]
    e3bc:	79fb      	ldrb	r3, [r7, #7]
    e3be:	429a      	cmp	r2, r3
    e3c0:	d101      	bne.n	e3c6 <usb_find_str_desc+0x42>
				return desc;
    e3c2:	68fb      	ldr	r3, [r7, #12]
    e3c4:	e00e      	b.n	e3e4 <usb_find_str_desc+0x60>
			}
			i++;
    e3c6:	7dfb      	ldrb	r3, [r7, #23]
    e3c8:	3301      	adds	r3, #1
    e3ca:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    e3cc:	68f8      	ldr	r0, [r7, #12]
    e3ce:	4b09      	ldr	r3, [pc, #36]	; (e3f4 <usb_find_str_desc+0x70>)
    e3d0:	4798      	blx	r3
    e3d2:	60f8      	str	r0, [r7, #12]
    e3d4:	e001      	b.n	e3da <usb_find_str_desc+0x56>
		} else {
			return NULL;
    e3d6:	2300      	movs	r3, #0
    e3d8:	e004      	b.n	e3e4 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    e3da:	68fa      	ldr	r2, [r7, #12]
    e3dc:	68bb      	ldr	r3, [r7, #8]
    e3de:	429a      	cmp	r2, r3
    e3e0:	d3da      	bcc.n	e398 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    e3e2:	2300      	movs	r3, #0
}
    e3e4:	4618      	mov	r0, r3
    e3e6:	3718      	adds	r7, #24
    e3e8:	46bd      	mov	sp, r7
    e3ea:	bd80      	pop	{r7, pc}
    e3ec:	0000e24d 	.word	0x0000e24d
    e3f0:	0000e1b3 	.word	0x0000e1b3
    e3f4:	0000e1e5 	.word	0x0000e1e5

0000e3f8 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    e3f8:	b480      	push	{r7}
    e3fa:	b083      	sub	sp, #12
    e3fc:	af00      	add	r7, sp, #0
    e3fe:	6078      	str	r0, [r7, #4]
    e400:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    e402:	687b      	ldr	r3, [r7, #4]
    e404:	683a      	ldr	r2, [r7, #0]
    e406:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    e408:	687b      	ldr	r3, [r7, #4]
    e40a:	4618      	mov	r0, r3
    e40c:	370c      	adds	r7, #12
    e40e:	46bd      	mov	sp, r7
    e410:	bc80      	pop	{r7}
    e412:	4770      	bx	lr

0000e414 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    e414:	b480      	push	{r7}
    e416:	b083      	sub	sp, #12
    e418:	af00      	add	r7, sp, #0
    e41a:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    e41c:	687b      	ldr	r3, [r7, #4]
    e41e:	4618      	mov	r0, r3
    e420:	370c      	adds	r7, #12
    e422:	46bd      	mov	sp, r7
    e424:	bc80      	pop	{r7}
    e426:	4770      	bx	lr

0000e428 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    e428:	b580      	push	{r7, lr}
    e42a:	b084      	sub	sp, #16
    e42c:	af00      	add	r7, sp, #0
    e42e:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    e430:	687b      	ldr	r3, [r7, #4]
    e432:	4a14      	ldr	r2, [pc, #80]	; (e484 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    e434:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    e436:	687b      	ldr	r3, [r7, #4]
    e438:	4a12      	ldr	r2, [pc, #72]	; (e484 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    e43a:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    e43c:	687b      	ldr	r3, [r7, #4]
    e43e:	691a      	ldr	r2, [r3, #16]
    e440:	687b      	ldr	r3, [r7, #4]
    e442:	330c      	adds	r3, #12
    e444:	4619      	mov	r1, r3
    e446:	4610      	mov	r0, r2
    e448:	4b0f      	ldr	r3, [pc, #60]	; (e488 <_ZN14I2C_Sync_Class4InitEv+0x60>)
    e44a:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    e44c:	687b      	ldr	r3, [r7, #4]
    e44e:	691b      	ldr	r3, [r3, #16]
    e450:	4618      	mov	r0, r3
    e452:	4b0e      	ldr	r3, [pc, #56]	; (e48c <_ZN14I2C_Sync_Class4InitEv+0x64>)
    e454:	4798      	blx	r3
    e456:	4603      	mov	r3, r0
    e458:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    e45a:	7bfb      	ldrb	r3, [r7, #15]
    e45c:	2b00      	cmp	r3, #0
    e45e:	bf0c      	ite	eq
    e460:	2301      	moveq	r3, #1
    e462:	2300      	movne	r3, #0
    e464:	b2da      	uxtb	r2, r3
    e466:	687b      	ldr	r3, [r7, #4]
    e468:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
    e46a:	687b      	ldr	r3, [r7, #4]
    e46c:	7a5b      	ldrb	r3, [r3, #9]
    e46e:	b2da      	uxtb	r2, r3
    e470:	687b      	ldr	r3, [r7, #4]
    e472:	721a      	strb	r2, [r3, #8]
	return isOK;
    e474:	687b      	ldr	r3, [r7, #4]
    e476:	7a5b      	ldrb	r3, [r3, #9]
    e478:	b2db      	uxtb	r3, r3
	
}
    e47a:	4618      	mov	r0, r3
    e47c:	3710      	adds	r7, #16
    e47e:	46bd      	mov	sp, r7
    e480:	bd80      	pop	{r7, pc}
    e482:	bf00      	nop
    e484:	20000e74 	.word	0x20000e74
    e488:	0000388f 	.word	0x0000388f
    e48c:	00003835 	.word	0x00003835

0000e490 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    e490:	b580      	push	{r7, lr}
    e492:	b082      	sub	sp, #8
    e494:	af00      	add	r7, sp, #0
    e496:	6078      	str	r0, [r7, #4]
    e498:	460b      	mov	r3, r1
    e49a:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    e49c:	687b      	ldr	r3, [r7, #4]
    e49e:	691b      	ldr	r3, [r3, #16]
    e4a0:	78fa      	ldrb	r2, [r7, #3]
    e4a2:	b211      	sxth	r1, r2
    e4a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e4a8:	4618      	mov	r0, r3
    e4aa:	4b03      	ldr	r3, [pc, #12]	; (e4b8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    e4ac:	4798      	blx	r3
    e4ae:	4603      	mov	r3, r0
}
    e4b0:	4618      	mov	r0, r3
    e4b2:	3708      	adds	r7, #8
    e4b4:	46bd      	mov	sp, r7
    e4b6:	bd80      	pop	{r7, pc}
    e4b8:	00003855 	.word	0x00003855

0000e4bc <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    e4bc:	b580      	push	{r7, lr}
    e4be:	b086      	sub	sp, #24
    e4c0:	af00      	add	r7, sp, #0
    e4c2:	60f8      	str	r0, [r7, #12]
    e4c4:	60b9      	str	r1, [r7, #8]
    e4c6:	4613      	mov	r3, r2
    e4c8:	80fb      	strh	r3, [r7, #6]
	Irq_Disable();
    e4ca:	68f8      	ldr	r0, [r7, #12]
    e4cc:	4b08      	ldr	r3, [pc, #32]	; (e4f0 <_ZN14I2C_Sync_Class5WriteEPht+0x34>)
    e4ce:	4798      	blx	r3
	int32_t w= io_write(I2C_io, buffer, lenght);
    e4d0:	68fb      	ldr	r3, [r7, #12]
    e4d2:	68db      	ldr	r3, [r3, #12]
    e4d4:	88fa      	ldrh	r2, [r7, #6]
    e4d6:	68b9      	ldr	r1, [r7, #8]
    e4d8:	4618      	mov	r0, r3
    e4da:	4b06      	ldr	r3, [pc, #24]	; (e4f4 <_ZN14I2C_Sync_Class5WriteEPht+0x38>)
    e4dc:	4798      	blx	r3
    e4de:	6178      	str	r0, [r7, #20]
	Irq_Enable();
    e4e0:	68f8      	ldr	r0, [r7, #12]
    e4e2:	4b05      	ldr	r3, [pc, #20]	; (e4f8 <_ZN14I2C_Sync_Class5WriteEPht+0x3c>)
    e4e4:	4798      	blx	r3
	return w;
    e4e6:	697b      	ldr	r3, [r7, #20]
}
    e4e8:	4618      	mov	r0, r3
    e4ea:	3718      	adds	r7, #24
    e4ec:	46bd      	mov	sp, r7
    e4ee:	bd80      	pop	{r7, pc}
    e4f0:	0000e555 	.word	0x0000e555
    e4f4:	0000fba5 	.word	0x0000fba5
    e4f8:	0000e53d 	.word	0x0000e53d

0000e4fc <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    e4fc:	b580      	push	{r7, lr}
    e4fe:	b086      	sub	sp, #24
    e500:	af00      	add	r7, sp, #0
    e502:	60f8      	str	r0, [r7, #12]
    e504:	60b9      	str	r1, [r7, #8]
    e506:	4613      	mov	r3, r2
    e508:	80fb      	strh	r3, [r7, #6]
	Irq_Disable();
    e50a:	68f8      	ldr	r0, [r7, #12]
    e50c:	4b08      	ldr	r3, [pc, #32]	; (e530 <_ZN14I2C_Sync_Class4ReadEPht+0x34>)
    e50e:	4798      	blx	r3
	int32_t r= io_read(I2C_io, buffer, lenght);
    e510:	68fb      	ldr	r3, [r7, #12]
    e512:	68db      	ldr	r3, [r3, #12]
    e514:	88fa      	ldrh	r2, [r7, #6]
    e516:	68b9      	ldr	r1, [r7, #8]
    e518:	4618      	mov	r0, r3
    e51a:	4b06      	ldr	r3, [pc, #24]	; (e534 <_ZN14I2C_Sync_Class4ReadEPht+0x38>)
    e51c:	4798      	blx	r3
    e51e:	6178      	str	r0, [r7, #20]
	Irq_Enable();
    e520:	68f8      	ldr	r0, [r7, #12]
    e522:	4b05      	ldr	r3, [pc, #20]	; (e538 <_ZN14I2C_Sync_Class4ReadEPht+0x3c>)
    e524:	4798      	blx	r3
	return r;
    e526:	697b      	ldr	r3, [r7, #20]
}
    e528:	4618      	mov	r0, r3
    e52a:	3718      	adds	r7, #24
    e52c:	46bd      	mov	sp, r7
    e52e:	bd80      	pop	{r7, pc}
    e530:	0000e555 	.word	0x0000e555
    e534:	0000fbf5 	.word	0x0000fbf5
    e538:	0000e53d 	.word	0x0000e53d

0000e53c <_ZN14I2C_Sync_Class10Irq_EnableEv>:
	Irq_Disable();
	int32_t w= i2c_m_sync_cmd_write(ptrI2CDescr,cmd,buffer,lenght);
	Irq_Enable();
	return w;
}
void	I2C_Sync_Class::Irq_Enable(void){
    e53c:	b480      	push	{r7}
    e53e:	b083      	sub	sp, #12
    e540:	af00      	add	r7, sp, #0
    e542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
    e544:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e548:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
    e54a:	bf00      	nop
    e54c:	370c      	adds	r7, #12
    e54e:	46bd      	mov	sp, r7
    e550:	bc80      	pop	{r7}
    e552:	4770      	bx	lr

0000e554 <_ZN14I2C_Sync_Class11Irq_DisableEv>:
void	I2C_Sync_Class::Irq_Disable(void){
    e554:	b480      	push	{r7}
    e556:	b083      	sub	sp, #12
    e558:	af00      	add	r7, sp, #0
    e55a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
    e55c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    e560:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
    e562:	bf00      	nop
    e564:	370c      	adds	r7, #12
    e566:	46bd      	mov	sp, r7
    e568:	bc80      	pop	{r7}
    e56a:	4770      	bx	lr

0000e56c <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
    e56c:	b480      	push	{r7}
    e56e:	b083      	sub	sp, #12
    e570:	af00      	add	r7, sp, #0
    e572:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
    e574:	687b      	ldr	r3, [r7, #4]
    e576:	4618      	mov	r0, r3
    e578:	370c      	adds	r7, #12
    e57a:	46bd      	mov	sp, r7
    e57c:	bc80      	pop	{r7}
    e57e:	4770      	bx	lr

0000e580 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
    e580:	b480      	push	{r7}
    e582:	b083      	sub	sp, #12
    e584:	af00      	add	r7, sp, #0
    e586:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
    e588:	687b      	ldr	r3, [r7, #4]
    e58a:	4618      	mov	r0, r3
    e58c:	370c      	adds	r7, #12
    e58e:	46bd      	mov	sp, r7
    e590:	bc80      	pop	{r7}
    e592:	4770      	bx	lr

0000e594 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
    e594:	b480      	push	{r7}
    e596:	b085      	sub	sp, #20
    e598:	af00      	add	r7, sp, #0
    e59a:	6078      	str	r0, [r7, #4]
    e59c:	460b      	mov	r3, r1
    e59e:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
    e5a0:	2300      	movs	r3, #0
    e5a2:	73fb      	strb	r3, [r7, #15]
    e5a4:	7bfb      	ldrb	r3, [r7, #15]
    e5a6:	2b01      	cmp	r3, #1
    e5a8:	dc13      	bgt.n	e5d2 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
    e5aa:	7bfb      	ldrb	r3, [r7, #15]
    e5ac:	78f9      	ldrb	r1, [r7, #3]
    e5ae:	7bfa      	ldrb	r2, [r7, #15]
    e5b0:	2080      	movs	r0, #128	; 0x80
    e5b2:	fa40 f202 	asr.w	r2, r0, r2
    e5b6:	400a      	ands	r2, r1
    e5b8:	2a00      	cmp	r2, #0
    e5ba:	bfcc      	ite	gt
    e5bc:	2201      	movgt	r2, #1
    e5be:	2200      	movle	r2, #0
    e5c0:	b2d1      	uxtb	r1, r2
    e5c2:	687a      	ldr	r2, [r7, #4]
    e5c4:	4413      	add	r3, r2
    e5c6:	460a      	mov	r2, r1
    e5c8:	751a      	strb	r2, [r3, #20]
	for (uint8_t ii = 0; ii < 2; ii++)
    e5ca:	7bfb      	ldrb	r3, [r7, #15]
    e5cc:	3301      	adds	r3, #1
    e5ce:	73fb      	strb	r3, [r7, #15]
    e5d0:	e7e8      	b.n	e5a4 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
    e5d2:	bf00      	nop
    e5d4:	3714      	adds	r7, #20
    e5d6:	46bd      	mov	sp, r7
    e5d8:	bc80      	pop	{r7}
    e5da:	4770      	bx	lr

0000e5dc <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
    e5dc:	b480      	push	{r7}
    e5de:	b085      	sub	sp, #20
    e5e0:	af00      	add	r7, sp, #0
    e5e2:	6078      	str	r0, [r7, #4]
    e5e4:	460b      	mov	r3, r1
    e5e6:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
    e5e8:	2300      	movs	r3, #0
    e5ea:	73fb      	strb	r3, [r7, #15]
    e5ec:	7bfb      	ldrb	r3, [r7, #15]
    e5ee:	2b02      	cmp	r3, #2
    e5f0:	dc15      	bgt.n	e61e <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
    e5f2:	7bfb      	ldrb	r3, [r7, #15]
    e5f4:	f1c3 0302 	rsb	r3, r3, #2
    e5f8:	78f9      	ldrb	r1, [r7, #3]
    e5fa:	7bfa      	ldrb	r2, [r7, #15]
    e5fc:	2020      	movs	r0, #32
    e5fe:	fa40 f202 	asr.w	r2, r0, r2
    e602:	400a      	ands	r2, r1
    e604:	2a00      	cmp	r2, #0
    e606:	bfcc      	ite	gt
    e608:	2201      	movgt	r2, #1
    e60a:	2200      	movle	r2, #0
    e60c:	b2d1      	uxtb	r1, r2
    e60e:	687a      	ldr	r2, [r7, #4]
    e610:	4413      	add	r3, r2
    e612:	460a      	mov	r2, r1
    e614:	759a      	strb	r2, [r3, #22]
	for (uint8_t ii = 0; ii < 3; ii++)
    e616:	7bfb      	ldrb	r3, [r7, #15]
    e618:	3301      	adds	r3, #1
    e61a:	73fb      	strb	r3, [r7, #15]
    e61c:	e7e6      	b.n	e5ec <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
    e61e:	bf00      	nop
    e620:	3714      	adds	r7, #20
    e622:	46bd      	mov	sp, r7
    e624:	bc80      	pop	{r7}
    e626:	4770      	bx	lr

0000e628 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
    e628:	b580      	push	{r7, lr}
    e62a:	b084      	sub	sp, #16
    e62c:	af00      	add	r7, sp, #0
    e62e:	60f8      	str	r0, [r7, #12]
    e630:	60b9      	str	r1, [r7, #8]
    e632:	4613      	mov	r3, r2
    e634:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
    e636:	79fb      	ldrb	r3, [r7, #7]
    e638:	4619      	mov	r1, r3
    e63a:	68b8      	ldr	r0, [r7, #8]
    e63c:	4b0d      	ldr	r3, [pc, #52]	; (e674 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
    e63e:	4798      	blx	r3
	FillLimitSwitch(v);
    e640:	79fb      	ldrb	r3, [r7, #7]
    e642:	4619      	mov	r1, r3
    e644:	68b8      	ldr	r0, [r7, #8]
    e646:	4b0c      	ldr	r3, [pc, #48]	; (e678 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
    e648:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
    e64a:	79fb      	ldrb	r3, [r7, #7]
    e64c:	f003 0301 	and.w	r3, r3, #1
    e650:	2b00      	cmp	r3, #0
    e652:	bfcc      	ite	gt
    e654:	2301      	movgt	r3, #1
    e656:	2300      	movle	r3, #0
    e658:	b2da      	uxtb	r2, r3
    e65a:	68bb      	ldr	r3, [r7, #8]
    e65c:	765a      	strb	r2, [r3, #25]
	return controlStatus;
    e65e:	68fa      	ldr	r2, [r7, #12]
    e660:	68bb      	ldr	r3, [r7, #8]
    e662:	3314      	adds	r3, #20
    e664:	6819      	ldr	r1, [r3, #0]
    e666:	6011      	str	r1, [r2, #0]
    e668:	889b      	ldrh	r3, [r3, #4]
    e66a:	8093      	strh	r3, [r2, #4]
}
    e66c:	68f8      	ldr	r0, [r7, #12]
    e66e:	3710      	adds	r7, #16
    e670:	46bd      	mov	sp, r7
    e672:	bd80      	pop	{r7, pc}
    e674:	0000e595 	.word	0x0000e595
    e678:	0000e5dd 	.word	0x0000e5dd

0000e67c <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
    e67c:	b480      	push	{r7}
    e67e:	b085      	sub	sp, #20
    e680:	af00      	add	r7, sp, #0
    e682:	60f8      	str	r0, [r7, #12]
    e684:	60b9      	str	r1, [r7, #8]
    e686:	4613      	mov	r3, r2
    e688:	71fb      	strb	r3, [r7, #7]
	
	if ( (STANDALONE > 0 )&(!controlStatus.cabin[1]))
    e68a:	68bb      	ldr	r3, [r7, #8]
    e68c:	7d5b      	ldrb	r3, [r3, #21]
    e68e:	f083 0301 	eor.w	r3, r3, #1
    e692:	b2db      	uxtb	r3, r3
    e694:	f003 0301 	and.w	r3, r3, #1
    e698:	2b00      	cmp	r3, #0
    e69a:	d004      	beq.n	e6a6 <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x2a>
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
    e69c:	68bb      	ldr	r3, [r7, #8]
    e69e:	7d1a      	ldrb	r2, [r3, #20]
    e6a0:	68bb      	ldr	r3, [r7, #8]
    e6a2:	769a      	strb	r2, [r3, #26]
    e6a4:	e009      	b.n	e6ba <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x3e>
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
    e6a6:	79fb      	ldrb	r3, [r7, #7]
    e6a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	bfcc      	ite	gt
    e6b0:	2301      	movgt	r3, #1
    e6b2:	2300      	movle	r3, #0
    e6b4:	b2da      	uxtb	r2, r3
    e6b6:	68bb      	ldr	r3, [r7, #8]
    e6b8:	769a      	strb	r2, [r3, #26]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
    e6ba:	79fb      	ldrb	r3, [r7, #7]
    e6bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e6c0:	2b00      	cmp	r3, #0
    e6c2:	bfcc      	ite	gt
    e6c4:	2301      	movgt	r3, #1
    e6c6:	2300      	movle	r3, #0
    e6c8:	b2da      	uxtb	r2, r3
    e6ca:	68bb      	ldr	r3, [r7, #8]
    e6cc:	76da      	strb	r2, [r3, #27]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
    e6ce:	79fb      	ldrb	r3, [r7, #7]
    e6d0:	f003 0320 	and.w	r3, r3, #32
    e6d4:	2b00      	cmp	r3, #0
    e6d6:	bfcc      	ite	gt
    e6d8:	2301      	movgt	r3, #1
    e6da:	2300      	movle	r3, #0
    e6dc:	b2da      	uxtb	r2, r3
    e6de:	68bb      	ldr	r3, [r7, #8]
    e6e0:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
    e6e2:	79fb      	ldrb	r3, [r7, #7]
    e6e4:	f003 0310 	and.w	r3, r3, #16
    e6e8:	2b00      	cmp	r3, #0
    e6ea:	bfcc      	ite	gt
    e6ec:	2301      	movgt	r3, #1
    e6ee:	2300      	movle	r3, #0
    e6f0:	b2da      	uxtb	r2, r3
    e6f2:	68bb      	ldr	r3, [r7, #8]
    e6f4:	771a      	strb	r2, [r3, #28]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
    e6f6:	79fb      	ldrb	r3, [r7, #7]
    e6f8:	f003 0308 	and.w	r3, r3, #8
    e6fc:	2b00      	cmp	r3, #0
    e6fe:	bfcc      	ite	gt
    e700:	2301      	movgt	r3, #1
    e702:	2300      	movle	r3, #0
    e704:	b2da      	uxtb	r2, r3
    e706:	68bb      	ldr	r3, [r7, #8]
    e708:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
    e70a:	79fb      	ldrb	r3, [r7, #7]
    e70c:	f003 0304 	and.w	r3, r3, #4
    e710:	2b00      	cmp	r3, #0
    e712:	bfcc      	ite	gt
    e714:	2301      	movgt	r3, #1
    e716:	2300      	movle	r3, #0
    e718:	b2da      	uxtb	r2, r3
    e71a:	68bb      	ldr	r3, [r7, #8]
    e71c:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
    e71e:	79fb      	ldrb	r3, [r7, #7]
    e720:	f003 0302 	and.w	r3, r3, #2
    e724:	2b00      	cmp	r3, #0
    e726:	bfcc      	ite	gt
    e728:	2301      	movgt	r3, #1
    e72a:	2300      	movle	r3, #0
    e72c:	b2da      	uxtb	r2, r3
    e72e:	68bb      	ldr	r3, [r7, #8]
    e730:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
    e734:	79fb      	ldrb	r3, [r7, #7]
    e736:	f003 0301 	and.w	r3, r3, #1
    e73a:	2b00      	cmp	r3, #0
    e73c:	bfcc      	ite	gt
    e73e:	2301      	movgt	r3, #1
    e740:	2300      	movle	r3, #0
    e742:	b2da      	uxtb	r2, r3
    e744:	68bb      	ldr	r3, [r7, #8]
    e746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return controlOutputs;
    e74a:	68fa      	ldr	r2, [r7, #12]
    e74c:	68bb      	ldr	r3, [r7, #8]
    e74e:	331a      	adds	r3, #26
    e750:	6819      	ldr	r1, [r3, #0]
    e752:	685b      	ldr	r3, [r3, #4]
    e754:	6011      	str	r1, [r2, #0]
    e756:	6053      	str	r3, [r2, #4]
    e758:	68f8      	ldr	r0, [r7, #12]
    e75a:	3714      	adds	r7, #20
    e75c:	46bd      	mov	sp, r7
    e75e:	bc80      	pop	{r7}
    e760:	4770      	bx	lr

0000e762 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    e762:	b480      	push	{r7}
    e764:	b083      	sub	sp, #12
    e766:	af00      	add	r7, sp, #0
    e768:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    e76a:	687b      	ldr	r3, [r7, #4]
    e76c:	4618      	mov	r0, r3
    e76e:	370c      	adds	r7, #12
    e770:	46bd      	mov	sp, r7
    e772:	bc80      	pop	{r7}
    e774:	4770      	bx	lr

0000e776 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    e776:	b480      	push	{r7}
    e778:	b083      	sub	sp, #12
    e77a:	af00      	add	r7, sp, #0
    e77c:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    e77e:	687b      	ldr	r3, [r7, #4]
    e780:	4618      	mov	r0, r3
    e782:	370c      	adds	r7, #12
    e784:	46bd      	mov	sp, r7
    e786:	bc80      	pop	{r7}
    e788:	4770      	bx	lr

0000e78a <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    e78a:	b480      	push	{r7}
    e78c:	b085      	sub	sp, #20
    e78e:	af00      	add	r7, sp, #0
    e790:	60f8      	str	r0, [r7, #12]
    e792:	460b      	mov	r3, r1
    e794:	607a      	str	r2, [r7, #4]
    e796:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    e798:	687b      	ldr	r3, [r7, #4]
    e79a:	681a      	ldr	r2, [r3, #0]
    e79c:	68fb      	ldr	r3, [r7, #12]
    e79e:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    e7a0:	687b      	ldr	r3, [r7, #4]
    e7a2:	685a      	ldr	r2, [r3, #4]
    e7a4:	68fb      	ldr	r3, [r7, #12]
    e7a6:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    e7a8:	68fb      	ldr	r3, [r7, #12]
    e7aa:	7afa      	ldrb	r2, [r7, #11]
    e7ac:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    e7ae:	68fb      	ldr	r3, [r7, #12]
    e7b0:	687a      	ldr	r2, [r7, #4]
    e7b2:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    e7b4:	68fb      	ldr	r3, [r7, #12]
    e7b6:	68db      	ldr	r3, [r3, #12]
    e7b8:	7a5b      	ldrb	r3, [r3, #9]
    e7ba:	b2da      	uxtb	r2, r3
    e7bc:	68fb      	ldr	r3, [r7, #12]
    e7be:	719a      	strb	r2, [r3, #6]
	return isOK;
    e7c0:	68fb      	ldr	r3, [r7, #12]
    e7c2:	799b      	ldrb	r3, [r3, #6]
    e7c4:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    e7c6:	4618      	mov	r0, r3
    e7c8:	3714      	adds	r7, #20
    e7ca:	46bd      	mov	sp, r7
    e7cc:	bc80      	pop	{r7}
    e7ce:	4770      	bx	lr

0000e7d0 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    e7d0:	b480      	push	{r7}
    e7d2:	b083      	sub	sp, #12
    e7d4:	af00      	add	r7, sp, #0
    e7d6:	6078      	str	r0, [r7, #4]
    e7d8:	460b      	mov	r3, r1
    e7da:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    e7dc:	78fb      	ldrb	r3, [r7, #3]
    e7de:	f003 0307 	and.w	r3, r3, #7
    e7e2:	b2db      	uxtb	r3, r3
}
    e7e4:	4618      	mov	r0, r3
    e7e6:	370c      	adds	r7, #12
    e7e8:	46bd      	mov	sp, r7
    e7ea:	bc80      	pop	{r7}
    e7ec:	4770      	bx	lr
	...

0000e7f0 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    e7f0:	b580      	push	{r7, lr}
    e7f2:	b082      	sub	sp, #8
    e7f4:	af00      	add	r7, sp, #0
    e7f6:	6078      	str	r0, [r7, #4]
    e7f8:	460b      	mov	r3, r1
    e7fa:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    e7fc:	687b      	ldr	r3, [r7, #4]
    e7fe:	68da      	ldr	r2, [r3, #12]
    e800:	687b      	ldr	r3, [r7, #4]
    e802:	7a1b      	ldrb	r3, [r3, #8]
    e804:	4619      	mov	r1, r3
    e806:	4610      	mov	r0, r2
    e808:	4b0a      	ldr	r3, [pc, #40]	; (e834 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    e80a:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    e80c:	687b      	ldr	r3, [r7, #4]
    e80e:	68db      	ldr	r3, [r3, #12]
    e810:	1cf9      	adds	r1, r7, #3
    e812:	2201      	movs	r2, #1
    e814:	4618      	mov	r0, r3
    e816:	4b08      	ldr	r3, [pc, #32]	; (e838 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    e818:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    e81a:	687b      	ldr	r3, [r7, #4]
    e81c:	68db      	ldr	r3, [r3, #12]
    e81e:	6879      	ldr	r1, [r7, #4]
    e820:	2201      	movs	r2, #1
    e822:	4618      	mov	r0, r3
    e824:	4b05      	ldr	r3, [pc, #20]	; (e83c <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    e826:	4798      	blx	r3

	return registerValue;
    e828:	687b      	ldr	r3, [r7, #4]
    e82a:	781b      	ldrb	r3, [r3, #0]
}
    e82c:	4618      	mov	r0, r3
    e82e:	3708      	adds	r7, #8
    e830:	46bd      	mov	sp, r7
    e832:	bd80      	pop	{r7, pc}
    e834:	0000e491 	.word	0x0000e491
    e838:	0000e4bd 	.word	0x0000e4bd
    e83c:	0000e4fd 	.word	0x0000e4fd

0000e840 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    e840:	b580      	push	{r7, lr}
    e842:	b084      	sub	sp, #16
    e844:	af00      	add	r7, sp, #0
    e846:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    e848:	687b      	ldr	r3, [r7, #4]
    e84a:	68da      	ldr	r2, [r3, #12]
    e84c:	687b      	ldr	r3, [r7, #4]
    e84e:	7a1b      	ldrb	r3, [r3, #8]
    e850:	4619      	mov	r1, r3
    e852:	4610      	mov	r0, r2
    e854:	4b06      	ldr	r3, [pc, #24]	; (e870 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    e856:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    e858:	2109      	movs	r1, #9
    e85a:	6878      	ldr	r0, [r7, #4]
    e85c:	4b05      	ldr	r3, [pc, #20]	; (e874 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    e85e:	4798      	blx	r3
    e860:	4603      	mov	r3, r0
    e862:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    e864:	7bfb      	ldrb	r3, [r7, #15]
}
    e866:	4618      	mov	r0, r3
    e868:	3710      	adds	r7, #16
    e86a:	46bd      	mov	sp, r7
    e86c:	bd80      	pop	{r7, pc}
    e86e:	bf00      	nop
    e870:	0000e491 	.word	0x0000e491
    e874:	0000e7f1 	.word	0x0000e7f1

0000e878 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    e878:	b580      	push	{r7, lr}
    e87a:	b084      	sub	sp, #16
    e87c:	af00      	add	r7, sp, #0
    e87e:	6078      	str	r0, [r7, #4]
    e880:	460b      	mov	r3, r1
    e882:	70fb      	strb	r3, [r7, #3]
    e884:	4613      	mov	r3, r2
    e886:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    e888:	687b      	ldr	r3, [r7, #4]
    e88a:	68da      	ldr	r2, [r3, #12]
    e88c:	687b      	ldr	r3, [r7, #4]
    e88e:	7a1b      	ldrb	r3, [r3, #8]
    e890:	4619      	mov	r1, r3
    e892:	4610      	mov	r0, r2
    e894:	4b09      	ldr	r3, [pc, #36]	; (e8bc <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    e896:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    e898:	78fb      	ldrb	r3, [r7, #3]
    e89a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    e89c:	78bb      	ldrb	r3, [r7, #2]
    e89e:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    e8a0:	687b      	ldr	r3, [r7, #4]
    e8a2:	68db      	ldr	r3, [r3, #12]
    e8a4:	f107 010c 	add.w	r1, r7, #12
    e8a8:	2202      	movs	r2, #2
    e8aa:	4618      	mov	r0, r3
    e8ac:	4b04      	ldr	r3, [pc, #16]	; (e8c0 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    e8ae:	4798      	blx	r3
    e8b0:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    e8b2:	4618      	mov	r0, r3
    e8b4:	3710      	adds	r7, #16
    e8b6:	46bd      	mov	sp, r7
    e8b8:	bd80      	pop	{r7, pc}
    e8ba:	bf00      	nop
    e8bc:	0000e491 	.word	0x0000e491
    e8c0:	0000e4bd 	.word	0x0000e4bd

0000e8c4 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    e8c4:	b580      	push	{r7, lr}
    e8c6:	b082      	sub	sp, #8
    e8c8:	af00      	add	r7, sp, #0
    e8ca:	6078      	str	r0, [r7, #4]
    e8cc:	460b      	mov	r3, r1
    e8ce:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    e8d0:	687b      	ldr	r3, [r7, #4]
    e8d2:	68da      	ldr	r2, [r3, #12]
    e8d4:	687b      	ldr	r3, [r7, #4]
    e8d6:	7a1b      	ldrb	r3, [r3, #8]
    e8d8:	4619      	mov	r1, r3
    e8da:	4610      	mov	r0, r2
    e8dc:	4b06      	ldr	r3, [pc, #24]	; (e8f8 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    e8de:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    e8e0:	78fb      	ldrb	r3, [r7, #3]
    e8e2:	461a      	mov	r2, r3
    e8e4:	2109      	movs	r1, #9
    e8e6:	6878      	ldr	r0, [r7, #4]
    e8e8:	4b04      	ldr	r3, [pc, #16]	; (e8fc <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    e8ea:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
    e8ec:	78fb      	ldrb	r3, [r7, #3]
}
    e8ee:	4618      	mov	r0, r3
    e8f0:	3708      	adds	r7, #8
    e8f2:	46bd      	mov	sp, r7
    e8f4:	bd80      	pop	{r7, pc}
    e8f6:	bf00      	nop
    e8f8:	0000e491 	.word	0x0000e491
    e8fc:	0000e879 	.word	0x0000e879

0000e900 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    e900:	b580      	push	{r7, lr}
    e902:	b084      	sub	sp, #16
    e904:	af00      	add	r7, sp, #0
    e906:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e908:	2300      	movs	r3, #0
    e90a:	73fb      	strb	r3, [r7, #15]
    e90c:	7bfb      	ldrb	r3, [r7, #15]
    e90e:	2b07      	cmp	r3, #7
    e910:	dc0f      	bgt.n	e932 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    e912:	7bfb      	ldrb	r3, [r7, #15]
    e914:	2201      	movs	r2, #1
    e916:	4619      	mov	r1, r3
    e918:	6878      	ldr	r0, [r7, #4]
    e91a:	4b08      	ldr	r3, [pc, #32]	; (e93c <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    e91c:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    e91e:	7bfb      	ldrb	r3, [r7, #15]
    e920:	2201      	movs	r2, #1
    e922:	4619      	mov	r1, r3
    e924:	6878      	ldr	r0, [r7, #4]
    e926:	4b06      	ldr	r3, [pc, #24]	; (e940 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    e928:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e92a:	7bfb      	ldrb	r3, [r7, #15]
    e92c:	3301      	adds	r3, #1
    e92e:	73fb      	strb	r3, [r7, #15]
    e930:	e7ec      	b.n	e90c <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    e932:	bf00      	nop
    e934:	3710      	adds	r7, #16
    e936:	46bd      	mov	sp, r7
    e938:	bd80      	pop	{r7, pc}
    e93a:	bf00      	nop
    e93c:	0000ea79 	.word	0x0000ea79
    e940:	0000eab1 	.word	0x0000eab1

0000e944 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    e944:	b580      	push	{r7, lr}
    e946:	b084      	sub	sp, #16
    e948:	af00      	add	r7, sp, #0
    e94a:	6078      	str	r0, [r7, #4]
    e94c:	460b      	mov	r3, r1
    e94e:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    e950:	78fb      	ldrb	r3, [r7, #3]
    e952:	2b00      	cmp	r3, #0
    e954:	dd23      	ble.n	e99e <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    e956:	2300      	movs	r3, #0
    e958:	73fb      	strb	r3, [r7, #15]
    e95a:	7bfb      	ldrb	r3, [r7, #15]
    e95c:	2b07      	cmp	r3, #7
    e95e:	dc21      	bgt.n	e9a4 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    e960:	78fa      	ldrb	r2, [r7, #3]
    e962:	7bfb      	ldrb	r3, [r7, #15]
    e964:	fa42 f303 	asr.w	r3, r2, r3
    e968:	f003 0301 	and.w	r3, r3, #1
    e96c:	2b00      	cmp	r3, #0
    e96e:	d00c      	beq.n	e98a <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    e970:	7bfb      	ldrb	r3, [r7, #15]
    e972:	2201      	movs	r2, #1
    e974:	4619      	mov	r1, r3
    e976:	6878      	ldr	r0, [r7, #4]
    e978:	4b0c      	ldr	r3, [pc, #48]	; (e9ac <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    e97a:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    e97c:	7bfb      	ldrb	r3, [r7, #15]
    e97e:	2201      	movs	r2, #1
    e980:	4619      	mov	r1, r3
    e982:	6878      	ldr	r0, [r7, #4]
    e984:	4b0a      	ldr	r3, [pc, #40]	; (e9b0 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    e986:	4798      	blx	r3
    e988:	e005      	b.n	e996 <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    e98a:	7bfb      	ldrb	r3, [r7, #15]
    e98c:	2200      	movs	r2, #0
    e98e:	4619      	mov	r1, r3
    e990:	6878      	ldr	r0, [r7, #4]
    e992:	4b06      	ldr	r3, [pc, #24]	; (e9ac <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    e994:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    e996:	7bfb      	ldrb	r3, [r7, #15]
    e998:	3301      	adds	r3, #1
    e99a:	73fb      	strb	r3, [r7, #15]
    e99c:	e7dd      	b.n	e95a <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    e99e:	6878      	ldr	r0, [r7, #4]
    e9a0:	4b04      	ldr	r3, [pc, #16]	; (e9b4 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    e9a2:	4798      	blx	r3
	}
	
}
    e9a4:	bf00      	nop
    e9a6:	3710      	adds	r7, #16
    e9a8:	46bd      	mov	sp, r7
    e9aa:	bd80      	pop	{r7, pc}
    e9ac:	0000ea79 	.word	0x0000ea79
    e9b0:	0000eab1 	.word	0x0000eab1
    e9b4:	0000e9b9 	.word	0x0000e9b9

0000e9b8 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    e9b8:	b580      	push	{r7, lr}
    e9ba:	b084      	sub	sp, #16
    e9bc:	af00      	add	r7, sp, #0
    e9be:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e9c0:	2300      	movs	r3, #0
    e9c2:	73fb      	strb	r3, [r7, #15]
    e9c4:	7bfb      	ldrb	r3, [r7, #15]
    e9c6:	2b07      	cmp	r3, #7
    e9c8:	dc09      	bgt.n	e9de <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    e9ca:	7bfb      	ldrb	r3, [r7, #15]
    e9cc:	2200      	movs	r2, #0
    e9ce:	4619      	mov	r1, r3
    e9d0:	6878      	ldr	r0, [r7, #4]
    e9d2:	4b05      	ldr	r3, [pc, #20]	; (e9e8 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    e9d4:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e9d6:	7bfb      	ldrb	r3, [r7, #15]
    e9d8:	3301      	adds	r3, #1
    e9da:	73fb      	strb	r3, [r7, #15]
    e9dc:	e7f2      	b.n	e9c4 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    e9de:	bf00      	nop
    e9e0:	3710      	adds	r7, #16
    e9e2:	46bd      	mov	sp, r7
    e9e4:	bd80      	pop	{r7, pc}
    e9e6:	bf00      	nop
    e9e8:	0000ea79 	.word	0x0000ea79

0000e9ec <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    e9ec:	b580      	push	{r7, lr}
    e9ee:	b084      	sub	sp, #16
    e9f0:	af00      	add	r7, sp, #0
    e9f2:	6078      	str	r0, [r7, #4]
    e9f4:	4608      	mov	r0, r1
    e9f6:	4611      	mov	r1, r2
    e9f8:	461a      	mov	r2, r3
    e9fa:	4603      	mov	r3, r0
    e9fc:	70fb      	strb	r3, [r7, #3]
    e9fe:	460b      	mov	r3, r1
    ea00:	70bb      	strb	r3, [r7, #2]
    ea02:	4613      	mov	r3, r2
    ea04:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    ea06:	787b      	ldrb	r3, [r7, #1]
    ea08:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    ea0a:	78fb      	ldrb	r3, [r7, #3]
    ea0c:	4619      	mov	r1, r3
    ea0e:	6878      	ldr	r0, [r7, #4]
    ea10:	4b16      	ldr	r3, [pc, #88]	; (ea6c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    ea12:	4798      	blx	r3
    ea14:	4603      	mov	r3, r0
    ea16:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    ea18:	7bfb      	ldrb	r3, [r7, #15]
    ea1a:	4619      	mov	r1, r3
    ea1c:	6878      	ldr	r0, [r7, #4]
    ea1e:	4b14      	ldr	r3, [pc, #80]	; (ea70 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    ea20:	4798      	blx	r3
    ea22:	4603      	mov	r3, r0
    ea24:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    ea26:	78bb      	ldrb	r3, [r7, #2]
    ea28:	2b00      	cmp	r3, #0
    ea2a:	d009      	beq.n	ea40 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    ea2c:	7bba      	ldrb	r2, [r7, #14]
    ea2e:	7b7b      	ldrb	r3, [r7, #13]
    ea30:	4619      	mov	r1, r3
    ea32:	2301      	movs	r3, #1
    ea34:	408b      	lsls	r3, r1
    ea36:	b2db      	uxtb	r3, r3
    ea38:	4313      	orrs	r3, r2
    ea3a:	b2db      	uxtb	r3, r3
    ea3c:	73bb      	strb	r3, [r7, #14]
    ea3e:	e00a      	b.n	ea56 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    ea40:	7bba      	ldrb	r2, [r7, #14]
    ea42:	7b7b      	ldrb	r3, [r7, #13]
    ea44:	4619      	mov	r1, r3
    ea46:	2301      	movs	r3, #1
    ea48:	408b      	lsls	r3, r1
    ea4a:	b2db      	uxtb	r3, r3
    ea4c:	43db      	mvns	r3, r3
    ea4e:	b2db      	uxtb	r3, r3
    ea50:	4013      	ands	r3, r2
    ea52:	b2db      	uxtb	r3, r3
    ea54:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    ea56:	7bba      	ldrb	r2, [r7, #14]
    ea58:	7bfb      	ldrb	r3, [r7, #15]
    ea5a:	4619      	mov	r1, r3
    ea5c:	6878      	ldr	r0, [r7, #4]
    ea5e:	4b05      	ldr	r3, [pc, #20]	; (ea74 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    ea60:	4798      	blx	r3
}
    ea62:	bf00      	nop
    ea64:	3710      	adds	r7, #16
    ea66:	46bd      	mov	sp, r7
    ea68:	bd80      	pop	{r7, pc}
    ea6a:	bf00      	nop
    ea6c:	0000e7d1 	.word	0x0000e7d1
    ea70:	0000e7f1 	.word	0x0000e7f1
    ea74:	0000e879 	.word	0x0000e879

0000ea78 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    ea78:	b590      	push	{r4, r7, lr}
    ea7a:	b085      	sub	sp, #20
    ea7c:	af02      	add	r7, sp, #8
    ea7e:	6078      	str	r0, [r7, #4]
    ea80:	460b      	mov	r3, r1
    ea82:	70fb      	strb	r3, [r7, #3]
    ea84:	4613      	mov	r3, r2
    ea86:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    ea88:	78bb      	ldrb	r3, [r7, #2]
    ea8a:	2b01      	cmp	r3, #1
    ea8c:	bf0c      	ite	eq
    ea8e:	2301      	moveq	r3, #1
    ea90:	2300      	movne	r3, #0
    ea92:	b2db      	uxtb	r3, r3
    ea94:	461a      	mov	r2, r3
    ea96:	78f9      	ldrb	r1, [r7, #3]
    ea98:	2300      	movs	r3, #0
    ea9a:	9300      	str	r3, [sp, #0]
    ea9c:	2300      	movs	r3, #0
    ea9e:	6878      	ldr	r0, [r7, #4]
    eaa0:	4c02      	ldr	r4, [pc, #8]	; (eaac <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    eaa2:	47a0      	blx	r4
}
    eaa4:	bf00      	nop
    eaa6:	370c      	adds	r7, #12
    eaa8:	46bd      	mov	sp, r7
    eaaa:	bd90      	pop	{r4, r7, pc}
    eaac:	0000e9ed 	.word	0x0000e9ed

0000eab0 <_ZN14MCP23008_Class6pullUpEhh>:
	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	return	writeRegister(regAddr,gpio)==0;
}

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    eab0:	b590      	push	{r4, r7, lr}
    eab2:	b085      	sub	sp, #20
    eab4:	af02      	add	r7, sp, #8
    eab6:	6078      	str	r0, [r7, #4]
    eab8:	460b      	mov	r3, r1
    eaba:	70fb      	strb	r3, [r7, #3]
    eabc:	4613      	mov	r3, r2
    eabe:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    eac0:	78ba      	ldrb	r2, [r7, #2]
    eac2:	78f9      	ldrb	r1, [r7, #3]
    eac4:	2306      	movs	r3, #6
    eac6:	9300      	str	r3, [sp, #0]
    eac8:	2306      	movs	r3, #6
    eaca:	6878      	ldr	r0, [r7, #4]
    eacc:	4c02      	ldr	r4, [pc, #8]	; (ead8 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    eace:	47a0      	blx	r4
}
    ead0:	bf00      	nop
    ead2:	370c      	adds	r7, #12
    ead4:	46bd      	mov	sp, r7
    ead6:	bd90      	pop	{r4, r7, pc}
    ead8:	0000e9ed 	.word	0x0000e9ed

0000eadc <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    eadc:	b480      	push	{r7}
    eade:	b083      	sub	sp, #12
    eae0:	af00      	add	r7, sp, #0
    eae2:	6078      	str	r0, [r7, #4]
    eae4:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    eae6:	687b      	ldr	r3, [r7, #4]
    eae8:	683a      	ldr	r2, [r7, #0]
    eaea:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    eaec:	4a06      	ldr	r2, [pc, #24]	; (eb08 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    eaee:	687b      	ldr	r3, [r7, #4]
    eaf0:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    eaf2:	687b      	ldr	r3, [r7, #4]
    eaf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    eaf8:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    eafa:	687b      	ldr	r3, [r7, #4]
    eafc:	4618      	mov	r0, r3
    eafe:	370c      	adds	r7, #12
    eb00:	46bd      	mov	sp, r7
    eb02:	bc80      	pop	{r7}
    eb04:	4770      	bx	lr
    eb06:	bf00      	nop
    eb08:	20000ef4 	.word	0x20000ef4

0000eb0c <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    eb0c:	b480      	push	{r7}
    eb0e:	b083      	sub	sp, #12
    eb10:	af00      	add	r7, sp, #0
    eb12:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    eb14:	687b      	ldr	r3, [r7, #4]
    eb16:	2200      	movs	r2, #0
    eb18:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    eb1a:	687b      	ldr	r3, [r7, #4]
    eb1c:	4618      	mov	r0, r3
    eb1e:	370c      	adds	r7, #12
    eb20:	46bd      	mov	sp, r7
    eb22:	bc80      	pop	{r7}
    eb24:	4770      	bx	lr
	...

0000eb28 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    eb28:	b580      	push	{r7, lr}
    eb2a:	b086      	sub	sp, #24
    eb2c:	af00      	add	r7, sp, #0
    eb2e:	60f8      	str	r0, [r7, #12]
    eb30:	60b9      	str	r1, [r7, #8]
    eb32:	607a      	str	r2, [r7, #4]
    eb34:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    eb36:	68f8      	ldr	r0, [r7, #12]
    eb38:	4b0d      	ldr	r3, [pc, #52]	; (eb70 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    eb3a:	4798      	blx	r3
	task->interval = interval;
    eb3c:	68fb      	ldr	r3, [r7, #12]
    eb3e:	699b      	ldr	r3, [r3, #24]
    eb40:	687a      	ldr	r2, [r7, #4]
    eb42:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    eb44:	68fb      	ldr	r3, [r7, #12]
    eb46:	699b      	ldr	r3, [r3, #24]
    eb48:	68ba      	ldr	r2, [r7, #8]
    eb4a:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    eb4c:	68fb      	ldr	r3, [r7, #12]
    eb4e:	699b      	ldr	r3, [r3, #24]
    eb50:	78fa      	ldrb	r2, [r7, #3]
    eb52:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    eb54:	68fb      	ldr	r3, [r7, #12]
    eb56:	68da      	ldr	r2, [r3, #12]
    eb58:	68fb      	ldr	r3, [r7, #12]
    eb5a:	699b      	ldr	r3, [r3, #24]
    eb5c:	4619      	mov	r1, r3
    eb5e:	4610      	mov	r0, r2
    eb60:	4b04      	ldr	r3, [pc, #16]	; (eb74 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    eb62:	4798      	blx	r3
    eb64:	6178      	str	r0, [r7, #20]
	
	return status;
    eb66:	697b      	ldr	r3, [r7, #20]
}
    eb68:	4618      	mov	r0, r3
    eb6a:	3718      	adds	r7, #24
    eb6c:	46bd      	mov	sp, r7
    eb6e:	bd80      	pop	{r7, pc}
    eb70:	0000ec95 	.word	0x0000ec95
    eb74:	00003dd1 	.word	0x00003dd1

0000eb78 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    eb78:	b580      	push	{r7, lr}
    eb7a:	b086      	sub	sp, #24
    eb7c:	af00      	add	r7, sp, #0
    eb7e:	60f8      	str	r0, [r7, #12]
    eb80:	60b9      	str	r1, [r7, #8]
    eb82:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    eb84:	687a      	ldr	r2, [r7, #4]
    eb86:	68b9      	ldr	r1, [r7, #8]
    eb88:	68f8      	ldr	r0, [r7, #12]
    eb8a:	4b0c      	ldr	r3, [pc, #48]	; (ebbc <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    eb8c:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    eb8e:	68fb      	ldr	r3, [r7, #12]
    eb90:	68db      	ldr	r3, [r3, #12]
    eb92:	681b      	ldr	r3, [r3, #0]
    eb94:	699b      	ldr	r3, [r3, #24]
    eb96:	68fa      	ldr	r2, [r7, #12]
    eb98:	68d2      	ldr	r2, [r2, #12]
    eb9a:	3204      	adds	r2, #4
    eb9c:	4610      	mov	r0, r2
    eb9e:	4798      	blx	r3
    eba0:	4603      	mov	r3, r0
    eba2:	2b00      	cmp	r3, #0
    eba4:	d105      	bne.n	ebb2 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    eba6:	68fb      	ldr	r3, [r7, #12]
    eba8:	68db      	ldr	r3, [r3, #12]
    ebaa:	4618      	mov	r0, r3
    ebac:	4b04      	ldr	r3, [pc, #16]	; (ebc0 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    ebae:	4798      	blx	r3
    ebb0:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    ebb2:	697b      	ldr	r3, [r7, #20]
}
    ebb4:	4618      	mov	r0, r3
    ebb6:	3718      	adds	r7, #24
    ebb8:	46bd      	mov	sp, r7
    ebba:	bd80      	pop	{r7, pc}
    ebbc:	0000ebc5 	.word	0x0000ebc5
    ebc0:	00003cfd 	.word	0x00003cfd

0000ebc4 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    ebc4:	b590      	push	{r4, r7, lr}
    ebc6:	b087      	sub	sp, #28
    ebc8:	af00      	add	r7, sp, #0
    ebca:	60f8      	str	r0, [r7, #12]
    ebcc:	60b9      	str	r1, [r7, #8]
    ebce:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    ebd0:	2301      	movs	r3, #1
    ebd2:	687a      	ldr	r2, [r7, #4]
    ebd4:	68b9      	ldr	r1, [r7, #8]
    ebd6:	68f8      	ldr	r0, [r7, #12]
    ebd8:	4c03      	ldr	r4, [pc, #12]	; (ebe8 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    ebda:	47a0      	blx	r4
    ebdc:	6178      	str	r0, [r7, #20]
		return status;
    ebde:	697b      	ldr	r3, [r7, #20]
}
    ebe0:	4618      	mov	r0, r3
    ebe2:	371c      	adds	r7, #28
    ebe4:	46bd      	mov	sp, r7
    ebe6:	bd90      	pop	{r4, r7, pc}
    ebe8:	0000eb29 	.word	0x0000eb29

0000ebec <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    ebec:	b580      	push	{r7, lr}
    ebee:	b082      	sub	sp, #8
    ebf0:	af00      	add	r7, sp, #0
    ebf2:	6078      	str	r0, [r7, #4]
    ebf4:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    ebf6:	6839      	ldr	r1, [r7, #0]
    ebf8:	6878      	ldr	r0, [r7, #4]
    ebfa:	4b0f      	ldr	r3, [pc, #60]	; (ec38 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    ebfc:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    ebfe:	687b      	ldr	r3, [r7, #4]
    ec00:	68db      	ldr	r3, [r3, #12]
    ec02:	f103 0218 	add.w	r2, r3, #24
    ec06:	687b      	ldr	r3, [r7, #4]
    ec08:	699b      	ldr	r3, [r3, #24]
    ec0a:	4619      	mov	r1, r3
    ec0c:	4610      	mov	r0, r2
    ec0e:	4b0b      	ldr	r3, [pc, #44]	; (ec3c <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    ec10:	4798      	blx	r3
    ec12:	4603      	mov	r3, r0
    ec14:	2b00      	cmp	r3, #0
    ec16:	d007      	beq.n	ec28 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    ec18:	687b      	ldr	r3, [r7, #4]
    ec1a:	68da      	ldr	r2, [r3, #12]
    ec1c:	687b      	ldr	r3, [r7, #4]
    ec1e:	699b      	ldr	r3, [r3, #24]
    ec20:	4619      	mov	r1, r3
    ec22:	4610      	mov	r0, r2
    ec24:	4b06      	ldr	r3, [pc, #24]	; (ec40 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    ec26:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    ec28:	687b      	ldr	r3, [r7, #4]
    ec2a:	699b      	ldr	r3, [r3, #24]
    ec2c:	2200      	movs	r2, #0
    ec2e:	60da      	str	r2, [r3, #12]
}
    ec30:	bf00      	nop
    ec32:	3708      	adds	r7, #8
    ec34:	46bd      	mov	sp, r7
    ec36:	bd80      	pop	{r7, pc}
    ec38:	0000ecf5 	.word	0x0000ecf5
    ec3c:	00004abd 	.word	0x00004abd
    ec40:	00003ed5 	.word	0x00003ed5

0000ec44 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    ec44:	b590      	push	{r4, r7, lr}
    ec46:	b087      	sub	sp, #28
    ec48:	af00      	add	r7, sp, #0
    ec4a:	60f8      	str	r0, [r7, #12]
    ec4c:	60b9      	str	r1, [r7, #8]
    ec4e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    ec50:	2300      	movs	r3, #0
    ec52:	687a      	ldr	r2, [r7, #4]
    ec54:	68b9      	ldr	r1, [r7, #8]
    ec56:	68f8      	ldr	r0, [r7, #12]
    ec58:	4c0c      	ldr	r4, [pc, #48]	; (ec8c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    ec5a:	47a0      	blx	r4
    ec5c:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    ec5e:	68fb      	ldr	r3, [r7, #12]
    ec60:	68db      	ldr	r3, [r3, #12]
    ec62:	681b      	ldr	r3, [r3, #0]
    ec64:	699b      	ldr	r3, [r3, #24]
    ec66:	68fa      	ldr	r2, [r7, #12]
    ec68:	68d2      	ldr	r2, [r2, #12]
    ec6a:	3204      	adds	r2, #4
    ec6c:	4610      	mov	r0, r2
    ec6e:	4798      	blx	r3
    ec70:	4603      	mov	r3, r0
    ec72:	2b00      	cmp	r3, #0
    ec74:	d105      	bne.n	ec82 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    ec76:	68fb      	ldr	r3, [r7, #12]
    ec78:	68db      	ldr	r3, [r3, #12]
    ec7a:	4618      	mov	r0, r3
    ec7c:	4b04      	ldr	r3, [pc, #16]	; (ec90 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    ec7e:	4798      	blx	r3
    ec80:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    ec82:	697b      	ldr	r3, [r7, #20]
}
    ec84:	4618      	mov	r0, r3
    ec86:	371c      	adds	r7, #28
    ec88:	46bd      	mov	sp, r7
    ec8a:	bd90      	pop	{r4, r7, pc}
    ec8c:	0000eb29 	.word	0x0000eb29
    ec90:	00003cfd 	.word	0x00003cfd

0000ec94 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    ec94:	b480      	push	{r7}
    ec96:	b085      	sub	sp, #20
    ec98:	af00      	add	r7, sp, #0
    ec9a:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    ec9c:	2300      	movs	r3, #0
    ec9e:	73fb      	strb	r3, [r7, #15]
    eca0:	7bfb      	ldrb	r3, [r7, #15]
    eca2:	2b0f      	cmp	r3, #15
    eca4:	dc1c      	bgt.n	ece0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    eca6:	7bfb      	ldrb	r3, [r7, #15]
    eca8:	f003 030f 	and.w	r3, r3, #15
    ecac:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    ecae:	7bba      	ldrb	r2, [r7, #14]
    ecb0:	490f      	ldr	r1, [pc, #60]	; (ecf0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    ecb2:	4613      	mov	r3, r2
    ecb4:	009b      	lsls	r3, r3, #2
    ecb6:	4413      	add	r3, r2
    ecb8:	009b      	lsls	r3, r3, #2
    ecba:	440b      	add	r3, r1
    ecbc:	330c      	adds	r3, #12
    ecbe:	681b      	ldr	r3, [r3, #0]
    ecc0:	2b00      	cmp	r3, #0
    ecc2:	d109      	bne.n	ecd8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    ecc4:	7bba      	ldrb	r2, [r7, #14]
    ecc6:	4613      	mov	r3, r2
    ecc8:	009b      	lsls	r3, r3, #2
    ecca:	4413      	add	r3, r2
    eccc:	009b      	lsls	r3, r3, #2
    ecce:	4a08      	ldr	r2, [pc, #32]	; (ecf0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    ecd0:	441a      	add	r2, r3
    ecd2:	687b      	ldr	r3, [r7, #4]
    ecd4:	619a      	str	r2, [r3, #24]
			return;
    ecd6:	e006      	b.n	ece6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    ecd8:	7bfb      	ldrb	r3, [r7, #15]
    ecda:	3301      	adds	r3, #1
    ecdc:	73fb      	strb	r3, [r7, #15]
    ecde:	e7df      	b.n	eca0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    ece0:	687b      	ldr	r3, [r7, #4]
    ece2:	4a03      	ldr	r2, [pc, #12]	; (ecf0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    ece4:	619a      	str	r2, [r3, #24]

}
    ece6:	3714      	adds	r7, #20
    ece8:	46bd      	mov	sp, r7
    ecea:	bc80      	pop	{r7}
    ecec:	4770      	bx	lr
    ecee:	bf00      	nop
    ecf0:	20000ef8 	.word	0x20000ef8

0000ecf4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    ecf4:	b480      	push	{r7}
    ecf6:	b085      	sub	sp, #20
    ecf8:	af00      	add	r7, sp, #0
    ecfa:	6078      	str	r0, [r7, #4]
    ecfc:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    ecfe:	2300      	movs	r3, #0
    ed00:	73fb      	strb	r3, [r7, #15]
    ed02:	7bfb      	ldrb	r3, [r7, #15]
    ed04:	2b0f      	cmp	r3, #15
    ed06:	dc19      	bgt.n	ed3c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    ed08:	7bfa      	ldrb	r2, [r7, #15]
    ed0a:	490f      	ldr	r1, [pc, #60]	; (ed48 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    ed0c:	4613      	mov	r3, r2
    ed0e:	009b      	lsls	r3, r3, #2
    ed10:	4413      	add	r3, r2
    ed12:	009b      	lsls	r3, r3, #2
    ed14:	440b      	add	r3, r1
    ed16:	330c      	adds	r3, #12
    ed18:	681a      	ldr	r2, [r3, #0]
    ed1a:	683b      	ldr	r3, [r7, #0]
    ed1c:	429a      	cmp	r2, r3
    ed1e:	d109      	bne.n	ed34 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    ed20:	7bfa      	ldrb	r2, [r7, #15]
    ed22:	4613      	mov	r3, r2
    ed24:	009b      	lsls	r3, r3, #2
    ed26:	4413      	add	r3, r2
    ed28:	009b      	lsls	r3, r3, #2
    ed2a:	4a07      	ldr	r2, [pc, #28]	; (ed48 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    ed2c:	441a      	add	r2, r3
    ed2e:	687b      	ldr	r3, [r7, #4]
    ed30:	619a      	str	r2, [r3, #24]
			return;
    ed32:	e004      	b.n	ed3e <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    ed34:	7bfb      	ldrb	r3, [r7, #15]
    ed36:	3301      	adds	r3, #1
    ed38:	73fb      	strb	r3, [r7, #15]
    ed3a:	e7e2      	b.n	ed02 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    ed3c:	bf00      	nop
}
    ed3e:	3714      	adds	r7, #20
    ed40:	46bd      	mov	sp, r7
    ed42:	bc80      	pop	{r7}
    ed44:	4770      	bx	lr
    ed46:	bf00      	nop
    ed48:	20000ef8 	.word	0x20000ef8

0000ed4c <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    ed4c:	b580      	push	{r7, lr}
    ed4e:	b082      	sub	sp, #8
    ed50:	af00      	add	r7, sp, #0
    ed52:	6078      	str	r0, [r7, #4]
    ed54:	6039      	str	r1, [r7, #0]
    ed56:	687b      	ldr	r3, [r7, #4]
    ed58:	2b01      	cmp	r3, #1
    ed5a:	d131      	bne.n	edc0 <_Z41__static_initialization_and_destruction_0ii+0x74>
    ed5c:	683b      	ldr	r3, [r7, #0]
    ed5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ed62:	4293      	cmp	r3, r2
    ed64:	d12c      	bne.n	edc0 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    ed66:	4918      	ldr	r1, [pc, #96]	; (edc8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    ed68:	4818      	ldr	r0, [pc, #96]	; (edcc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    ed6a:	4b19      	ldr	r3, [pc, #100]	; (edd0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ed6c:	4798      	blx	r3
    ed6e:	4a19      	ldr	r2, [pc, #100]	; (edd4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ed70:	4919      	ldr	r1, [pc, #100]	; (edd8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ed72:	4816      	ldr	r0, [pc, #88]	; (edcc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    ed74:	4b19      	ldr	r3, [pc, #100]	; (eddc <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ed76:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    ed78:	4919      	ldr	r1, [pc, #100]	; (ede0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    ed7a:	481a      	ldr	r0, [pc, #104]	; (ede4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    ed7c:	4b14      	ldr	r3, [pc, #80]	; (edd0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ed7e:	4798      	blx	r3
    ed80:	4a14      	ldr	r2, [pc, #80]	; (edd4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ed82:	4915      	ldr	r1, [pc, #84]	; (edd8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ed84:	4817      	ldr	r0, [pc, #92]	; (ede4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    ed86:	4b15      	ldr	r3, [pc, #84]	; (eddc <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ed88:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    ed8a:	4917      	ldr	r1, [pc, #92]	; (ede8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    ed8c:	4817      	ldr	r0, [pc, #92]	; (edec <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    ed8e:	4b10      	ldr	r3, [pc, #64]	; (edd0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ed90:	4798      	blx	r3
    ed92:	4a10      	ldr	r2, [pc, #64]	; (edd4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ed94:	4910      	ldr	r1, [pc, #64]	; (edd8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ed96:	4815      	ldr	r0, [pc, #84]	; (edec <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    ed98:	4b10      	ldr	r3, [pc, #64]	; (eddc <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ed9a:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    ed9c:	4914      	ldr	r1, [pc, #80]	; (edf0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    ed9e:	4815      	ldr	r0, [pc, #84]	; (edf4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    eda0:	4b0b      	ldr	r3, [pc, #44]	; (edd0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    eda2:	4798      	blx	r3
    eda4:	4a0b      	ldr	r2, [pc, #44]	; (edd4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    eda6:	490c      	ldr	r1, [pc, #48]	; (edd8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    eda8:	4812      	ldr	r0, [pc, #72]	; (edf4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    edaa:	4b0c      	ldr	r3, [pc, #48]	; (eddc <_Z41__static_initialization_and_destruction_0ii+0x90>)
    edac:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    edae:	4912      	ldr	r1, [pc, #72]	; (edf8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    edb0:	4812      	ldr	r0, [pc, #72]	; (edfc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    edb2:	4b07      	ldr	r3, [pc, #28]	; (edd0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    edb4:	4798      	blx	r3
    edb6:	4a07      	ldr	r2, [pc, #28]	; (edd4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    edb8:	4907      	ldr	r1, [pc, #28]	; (edd8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    edba:	4810      	ldr	r0, [pc, #64]	; (edfc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    edbc:	4b07      	ldr	r3, [pc, #28]	; (eddc <_Z41__static_initialization_and_destruction_0ii+0x90>)
    edbe:	4798      	blx	r3
    edc0:	bf00      	nop
    edc2:	3708      	adds	r7, #8
    edc4:	46bd      	mov	sp, r7
    edc6:	bd80      	pop	{r7, pc}
    edc8:	200077c4 	.word	0x200077c4
    edcc:	2000103c 	.word	0x2000103c
    edd0:	0000eadd 	.word	0x0000eadd
    edd4:	20000000 	.word	0x20000000
    edd8:	0000eb0d 	.word	0x0000eb0d
    eddc:	000104e9 	.word	0x000104e9
    ede0:	20007858 	.word	0x20007858
    ede4:	20001058 	.word	0x20001058
    ede8:	2000795c 	.word	0x2000795c
    edec:	20001074 	.word	0x20001074
    edf0:	20007878 	.word	0x20007878
    edf4:	20001090 	.word	0x20001090
    edf8:	2000791c 	.word	0x2000791c
    edfc:	200010ac 	.word	0x200010ac

0000ee00 <_GLOBAL__sub_I_ptrTimerClass>:
    ee00:	b580      	push	{r7, lr}
    ee02:	af00      	add	r7, sp, #0
    ee04:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ee08:	2001      	movs	r0, #1
    ee0a:	4b01      	ldr	r3, [pc, #4]	; (ee10 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    ee0c:	4798      	blx	r3
    ee0e:	bd80      	pop	{r7, pc}
    ee10:	0000ed4d 	.word	0x0000ed4d

0000ee14 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    ee14:	b480      	push	{r7}
    ee16:	b083      	sub	sp, #12
    ee18:	af00      	add	r7, sp, #0
    ee1a:	6078      	str	r0, [r7, #4]
    ee1c:	4a05      	ldr	r2, [pc, #20]	; (ee34 <_ZN5PrintC1Ev+0x20>)
    ee1e:	687b      	ldr	r3, [r7, #4]
    ee20:	601a      	str	r2, [r3, #0]
    ee22:	687b      	ldr	r3, [r7, #4]
    ee24:	2200      	movs	r2, #0
    ee26:	605a      	str	r2, [r3, #4]
    ee28:	687b      	ldr	r3, [r7, #4]
    ee2a:	4618      	mov	r0, r3
    ee2c:	370c      	adds	r7, #12
    ee2e:	46bd      	mov	sp, r7
    ee30:	bc80      	pop	{r7}
    ee32:	4770      	bx	lr
    ee34:	00011038 	.word	0x00011038

0000ee38 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    ee38:	b480      	push	{r7}
    ee3a:	b083      	sub	sp, #12
    ee3c:	af00      	add	r7, sp, #0
    ee3e:	6078      	str	r0, [r7, #4]
    ee40:	2300      	movs	r3, #0
    ee42:	4618      	mov	r0, r3
    ee44:	370c      	adds	r7, #12
    ee46:	46bd      	mov	sp, r7
    ee48:	bc80      	pop	{r7}
    ee4a:	4770      	bx	lr

0000ee4c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    ee4c:	b480      	push	{r7}
    ee4e:	b083      	sub	sp, #12
    ee50:	af00      	add	r7, sp, #0
    ee52:	6078      	str	r0, [r7, #4]
    ee54:	bf00      	nop
    ee56:	370c      	adds	r7, #12
    ee58:	46bd      	mov	sp, r7
    ee5a:	bc80      	pop	{r7}
    ee5c:	4770      	bx	lr
	...

0000ee60 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    ee60:	b580      	push	{r7, lr}
    ee62:	b082      	sub	sp, #8
    ee64:	af00      	add	r7, sp, #0
    ee66:	6078      	str	r0, [r7, #4]
    ee68:	687b      	ldr	r3, [r7, #4]
    ee6a:	4618      	mov	r0, r3
    ee6c:	4b06      	ldr	r3, [pc, #24]	; (ee88 <_ZN6StreamC1Ev+0x28>)
    ee6e:	4798      	blx	r3
    ee70:	4a06      	ldr	r2, [pc, #24]	; (ee8c <_ZN6StreamC1Ev+0x2c>)
    ee72:	687b      	ldr	r3, [r7, #4]
    ee74:	601a      	str	r2, [r3, #0]
    ee76:	687b      	ldr	r3, [r7, #4]
    ee78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ee7c:	609a      	str	r2, [r3, #8]
    ee7e:	687b      	ldr	r3, [r7, #4]
    ee80:	4618      	mov	r0, r3
    ee82:	3708      	adds	r7, #8
    ee84:	46bd      	mov	sp, r7
    ee86:	bd80      	pop	{r7, pc}
    ee88:	0000ee15 	.word	0x0000ee15
    ee8c:	00010ffc 	.word	0x00010ffc

0000ee90 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    ee90:	b480      	push	{r7}
    ee92:	b083      	sub	sp, #12
    ee94:	af00      	add	r7, sp, #0
    ee96:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    ee98:	4b06      	ldr	r3, [pc, #24]	; (eeb4 <_ZL10USBTimeoutPK10timer_task+0x24>)
    ee9a:	681b      	ldr	r3, [r3, #0]
    ee9c:	2201      	movs	r2, #1
    ee9e:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    eea0:	4b04      	ldr	r3, [pc, #16]	; (eeb4 <_ZL10USBTimeoutPK10timer_task+0x24>)
    eea2:	681b      	ldr	r3, [r3, #0]
    eea4:	2200      	movs	r2, #0
    eea6:	741a      	strb	r2, [r3, #16]
	
}
    eea8:	bf00      	nop
    eeaa:	370c      	adds	r7, #12
    eeac:	46bd      	mov	sp, r7
    eeae:	bc80      	pop	{r7}
    eeb0:	4770      	bx	lr
    eeb2:	bf00      	nop
    eeb4:	200010c8 	.word	0x200010c8

0000eeb8 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    eeb8:	b480      	push	{r7}
    eeba:	b083      	sub	sp, #12
    eebc:	af00      	add	r7, sp, #0
    eebe:	4603      	mov	r3, r0
    eec0:	603a      	str	r2, [r7, #0]
    eec2:	71fb      	strb	r3, [r7, #7]
    eec4:	460b      	mov	r3, r1
    eec6:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    eec8:	4b08      	ldr	r3, [pc, #32]	; (eeec <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    eeca:	681b      	ldr	r3, [r3, #0]
    eecc:	2201      	movs	r2, #1
    eece:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    eed0:	4b06      	ldr	r3, [pc, #24]	; (eeec <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    eed2:	681b      	ldr	r3, [r3, #0]
    eed4:	2201      	movs	r2, #1
    eed6:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    eed8:	4b04      	ldr	r3, [pc, #16]	; (eeec <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    eeda:	681b      	ldr	r3, [r3, #0]
    eedc:	2201      	movs	r2, #1
    eede:	741a      	strb	r2, [r3, #16]


	return false;
    eee0:	2300      	movs	r3, #0
}
    eee2:	4618      	mov	r0, r3
    eee4:	370c      	adds	r7, #12
    eee6:	46bd      	mov	sp, r7
    eee8:	bc80      	pop	{r7}
    eeea:	4770      	bx	lr
    eeec:	200010c8 	.word	0x200010c8

0000eef0 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    eef0:	b480      	push	{r7}
    eef2:	b083      	sub	sp, #12
    eef4:	af00      	add	r7, sp, #0
    eef6:	4603      	mov	r3, r0
    eef8:	603a      	str	r2, [r7, #0]
    eefa:	71fb      	strb	r3, [r7, #7]
    eefc:	460b      	mov	r3, r1
    eefe:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    ef00:	4b08      	ldr	r3, [pc, #32]	; (ef24 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ef02:	681b      	ldr	r3, [r3, #0]
    ef04:	2201      	movs	r2, #1
    ef06:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    ef08:	4b06      	ldr	r3, [pc, #24]	; (ef24 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ef0a:	681b      	ldr	r3, [r3, #0]
    ef0c:	2201      	movs	r2, #1
    ef0e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ef10:	4b04      	ldr	r3, [pc, #16]	; (ef24 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ef12:	681b      	ldr	r3, [r3, #0]
    ef14:	2201      	movs	r2, #1
    ef16:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    ef18:	2300      	movs	r3, #0
}
    ef1a:	4618      	mov	r0, r3
    ef1c:	370c      	adds	r7, #12
    ef1e:	46bd      	mov	sp, r7
    ef20:	bc80      	pop	{r7}
    ef22:	4770      	bx	lr
    ef24:	200010c8 	.word	0x200010c8

0000ef28 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    ef28:	b580      	push	{r7, lr}
    ef2a:	b082      	sub	sp, #8
    ef2c:	af00      	add	r7, sp, #0
    ef2e:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    ef30:	793b      	ldrb	r3, [r7, #4]
    ef32:	f003 0301 	and.w	r3, r3, #1
    ef36:	b2db      	uxtb	r3, r3
    ef38:	2b00      	cmp	r3, #0
    ef3a:	d013      	beq.n	ef64 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    ef3c:	490c      	ldr	r1, [pc, #48]	; (ef70 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    ef3e:	2000      	movs	r0, #0
    ef40:	4b0c      	ldr	r3, [pc, #48]	; (ef74 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ef42:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    ef44:	490c      	ldr	r1, [pc, #48]	; (ef78 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    ef46:	2001      	movs	r0, #1
    ef48:	4b0a      	ldr	r3, [pc, #40]	; (ef74 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ef4a:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    ef4c:	4b0b      	ldr	r3, [pc, #44]	; (ef7c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ef4e:	681b      	ldr	r3, [r3, #0]
    ef50:	2201      	movs	r2, #1
    ef52:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    ef54:	4b09      	ldr	r3, [pc, #36]	; (ef7c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ef56:	681b      	ldr	r3, [r3, #0]
    ef58:	2201      	movs	r2, #1
    ef5a:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    ef5c:	4b07      	ldr	r3, [pc, #28]	; (ef7c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ef5e:	681b      	ldr	r3, [r3, #0]
    ef60:	2201      	movs	r2, #1
    ef62:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    ef64:	2300      	movs	r3, #0
}
    ef66:	4618      	mov	r0, r3
    ef68:	3708      	adds	r7, #8
    ef6a:	46bd      	mov	sp, r7
    ef6c:	bd80      	pop	{r7, pc}
    ef6e:	bf00      	nop
    ef70:	0000eeb9 	.word	0x0000eeb9
    ef74:	0000d3c1 	.word	0x0000d3c1
    ef78:	0000eef1 	.word	0x0000eef1
    ef7c:	200010c8 	.word	0x200010c8

0000ef80 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    ef80:	b580      	push	{r7, lr}
    ef82:	b082      	sub	sp, #8
    ef84:	af00      	add	r7, sp, #0
    ef86:	6078      	str	r0, [r7, #4]
    ef88:	687b      	ldr	r3, [r7, #4]
    ef8a:	4618      	mov	r0, r3
    ef8c:	4b0a      	ldr	r3, [pc, #40]	; (efb8 <_ZN9CDC_ClassC1Ev+0x38>)
    ef8e:	4798      	blx	r3
    ef90:	687b      	ldr	r3, [r7, #4]
    ef92:	3310      	adds	r3, #16
    ef94:	4618      	mov	r0, r3
    ef96:	4b09      	ldr	r3, [pc, #36]	; (efbc <_ZN9CDC_ClassC1Ev+0x3c>)
    ef98:	4798      	blx	r3
    ef9a:	4a09      	ldr	r2, [pc, #36]	; (efc0 <_ZN9CDC_ClassC1Ev+0x40>)
    ef9c:	687b      	ldr	r3, [r7, #4]
    ef9e:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    efa0:	687b      	ldr	r3, [r7, #4]
    efa2:	f04f 32ff 	mov.w	r2, #4294967295
    efa6:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    efa8:	4a06      	ldr	r2, [pc, #24]	; (efc4 <_ZN9CDC_ClassC1Ev+0x44>)
    efaa:	687b      	ldr	r3, [r7, #4]
    efac:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    efae:	687b      	ldr	r3, [r7, #4]
    efb0:	4618      	mov	r0, r3
    efb2:	3708      	adds	r7, #8
    efb4:	46bd      	mov	sp, r7
    efb6:	bd80      	pop	{r7, pc}
    efb8:	0000ee61 	.word	0x0000ee61
    efbc:	0000f5f1 	.word	0x0000f5f1
    efc0:	00010fcc 	.word	0x00010fcc
    efc4:	200010c8 	.word	0x200010c8

0000efc8 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    efc8:	b580      	push	{r7, lr}
    efca:	b082      	sub	sp, #8
    efcc:	af00      	add	r7, sp, #0
    efce:	6078      	str	r0, [r7, #4]
    efd0:	4a06      	ldr	r2, [pc, #24]	; (efec <_ZN9CDC_ClassD1Ev+0x24>)
    efd2:	687b      	ldr	r3, [r7, #4]
    efd4:	601a      	str	r2, [r3, #0]
    efd6:	687b      	ldr	r3, [r7, #4]
    efd8:	3310      	adds	r3, #16
    efda:	4618      	mov	r0, r3
    efdc:	4b04      	ldr	r3, [pc, #16]	; (eff0 <_ZN9CDC_ClassD1Ev+0x28>)
    efde:	4798      	blx	r3
{
} //~CDC_Class
    efe0:	687b      	ldr	r3, [r7, #4]
    efe2:	4618      	mov	r0, r3
    efe4:	3708      	adds	r7, #8
    efe6:	46bd      	mov	sp, r7
    efe8:	bd80      	pop	{r7, pc}
    efea:	bf00      	nop
    efec:	00010fcc 	.word	0x00010fcc
    eff0:	0000f611 	.word	0x0000f611

0000eff4 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    eff4:	b580      	push	{r7, lr}
    eff6:	b082      	sub	sp, #8
    eff8:	af00      	add	r7, sp, #0
    effa:	6078      	str	r0, [r7, #4]
	
	OnInit();
    effc:	687b      	ldr	r3, [r7, #4]
    effe:	3310      	adds	r3, #16
    f000:	4618      	mov	r0, r3
    f002:	4b09      	ldr	r3, [pc, #36]	; (f028 <_ZN9CDC_Class4InitEv+0x34>)
    f004:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    f006:	4909      	ldr	r1, [pc, #36]	; (f02c <_ZN9CDC_Class4InitEv+0x38>)
    f008:	2003      	movs	r0, #3
    f00a:	4b09      	ldr	r3, [pc, #36]	; (f030 <_ZN9CDC_Class4InitEv+0x3c>)
    f00c:	4798      	blx	r3
	delay_ms(100);
    f00e:	2064      	movs	r0, #100	; 0x64
    f010:	4b08      	ldr	r3, [pc, #32]	; (f034 <_ZN9CDC_Class4InitEv+0x40>)
    f012:	4798      	blx	r3
		
	if (connected)
    f014:	687b      	ldr	r3, [r7, #4]
    f016:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    f018:	2064      	movs	r0, #100	; 0x64
    f01a:	4b06      	ldr	r3, [pc, #24]	; (f034 <_ZN9CDC_Class4InitEv+0x40>)
    f01c:	4798      	blx	r3

	

}
    f01e:	bf00      	nop
    f020:	3708      	adds	r7, #8
    f022:	46bd      	mov	sp, r7
    f024:	bd80      	pop	{r7, pc}
    f026:	bf00      	nop
    f028:	0000f625 	.word	0x0000f625
    f02c:	0000ef29 	.word	0x0000ef29
    f030:	0000d3c1 	.word	0x0000d3c1
    f034:	000034c5 	.word	0x000034c5

0000f038 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    f038:	b580      	push	{r7, lr}
    f03a:	b082      	sub	sp, #8
    f03c:	af00      	add	r7, sp, #0
    f03e:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    f040:	4b03      	ldr	r3, [pc, #12]	; (f050 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    f042:	4798      	blx	r3
    f044:	4603      	mov	r3, r0
	
}
    f046:	4618      	mov	r0, r3
    f048:	3708      	adds	r7, #8
    f04a:	46bd      	mov	sp, r7
    f04c:	bd80      	pop	{r7, pc}
    f04e:	bf00      	nop
    f050:	0000d439 	.word	0x0000d439

0000f054 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    f054:	b580      	push	{r7, lr}
    f056:	b084      	sub	sp, #16
    f058:	af00      	add	r7, sp, #0
    f05a:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    f05c:	687b      	ldr	r3, [r7, #4]
    f05e:	699b      	ldr	r3, [r3, #24]
    f060:	f1b3 3fff 	cmp.w	r3, #4294967295
    f064:	bf14      	ite	ne
    f066:	2301      	movne	r3, #1
    f068:	2300      	moveq	r3, #0
    f06a:	b2db      	uxtb	r3, r3
    f06c:	2b00      	cmp	r3, #0
    f06e:	d002      	beq.n	f076 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    f070:	687b      	ldr	r3, [r7, #4]
    f072:	699b      	ldr	r3, [r3, #24]
    f074:	e011      	b.n	f09a <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    f076:	687b      	ldr	r3, [r7, #4]
    f078:	681b      	ldr	r3, [r3, #0]
    f07a:	331c      	adds	r3, #28
    f07c:	681b      	ldr	r3, [r3, #0]
    f07e:	f107 010f 	add.w	r1, r7, #15
    f082:	2201      	movs	r2, #1
    f084:	6878      	ldr	r0, [r7, #4]
    f086:	4798      	blx	r3
    f088:	4602      	mov	r2, r0
    f08a:	687b      	ldr	r3, [r7, #4]
    f08c:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    f08e:	7bfb      	ldrb	r3, [r7, #15]
    f090:	461a      	mov	r2, r3
    f092:	687b      	ldr	r3, [r7, #4]
    f094:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    f096:	687b      	ldr	r3, [r7, #4]
    f098:	699b      	ldr	r3, [r3, #24]
}
    f09a:	4618      	mov	r0, r3
    f09c:	3710      	adds	r7, #16
    f09e:	46bd      	mov	sp, r7
    f0a0:	bd80      	pop	{r7, pc}
	...

0000f0a4 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    f0a4:	b580      	push	{r7, lr}
    f0a6:	b086      	sub	sp, #24
    f0a8:	af00      	add	r7, sp, #0
    f0aa:	60f8      	str	r0, [r7, #12]
    f0ac:	60b9      	str	r1, [r7, #8]
    f0ae:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    f0b0:	68fb      	ldr	r3, [r7, #12]
    f0b2:	7c1b      	ldrb	r3, [r3, #16]
    f0b4:	b2db      	uxtb	r3, r3
    f0b6:	2b00      	cmp	r3, #0
    f0b8:	d02e      	beq.n	f118 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f0ba:	687a      	ldr	r2, [r7, #4]
    f0bc:	4613      	mov	r3, r2
    f0be:	009b      	lsls	r3, r3, #2
    f0c0:	4413      	add	r3, r2
    f0c2:	005b      	lsls	r3, r3, #1
    f0c4:	461a      	mov	r2, r3
    f0c6:	4918      	ldr	r1, [pc, #96]	; (f128 <_ZN9CDC_Class8readDataEPvl+0x84>)
    f0c8:	4818      	ldr	r0, [pc, #96]	; (f12c <_ZN9CDC_Class8readDataEPvl+0x88>)
    f0ca:	4b19      	ldr	r3, [pc, #100]	; (f130 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    f0cc:	4798      	blx	r3
		rxReady=false;
    f0ce:	68fb      	ldr	r3, [r7, #12]
    f0d0:	2200      	movs	r2, #0
    f0d2:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    f0d4:	687b      	ldr	r3, [r7, #4]
    f0d6:	4619      	mov	r1, r3
    f0d8:	68b8      	ldr	r0, [r7, #8]
    f0da:	4b16      	ldr	r3, [pc, #88]	; (f134 <_ZN9CDC_Class8readDataEPvl+0x90>)
    f0dc:	4798      	blx	r3
    f0de:	4603      	mov	r3, r0
    f0e0:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    f0e2:	68fb      	ldr	r3, [r7, #12]
    f0e4:	7d5b      	ldrb	r3, [r3, #21]
    f0e6:	b2db      	uxtb	r3, r3
    f0e8:	f083 0301 	eor.w	r3, r3, #1
    f0ec:	b2db      	uxtb	r3, r3
    f0ee:	2b00      	cmp	r3, #0
    f0f0:	d006      	beq.n	f100 <_ZN9CDC_Class8readDataEPvl+0x5c>
    f0f2:	68fb      	ldr	r3, [r7, #12]
    f0f4:	7c1b      	ldrb	r3, [r3, #16]
    f0f6:	b2db      	uxtb	r3, r3
    f0f8:	2b00      	cmp	r3, #0
    f0fa:	d001      	beq.n	f100 <_ZN9CDC_Class8readDataEPvl+0x5c>
    f0fc:	2301      	movs	r3, #1
    f0fe:	e000      	b.n	f102 <_ZN9CDC_Class8readDataEPvl+0x5e>
    f100:	2300      	movs	r3, #0
    f102:	2b00      	cmp	r3, #0
    f104:	d000      	beq.n	f108 <_ZN9CDC_Class8readDataEPvl+0x64>
    f106:	e7ec      	b.n	f0e2 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    f108:	4808      	ldr	r0, [pc, #32]	; (f12c <_ZN9CDC_Class8readDataEPvl+0x88>)
    f10a:	4b0b      	ldr	r3, [pc, #44]	; (f138 <_ZN9CDC_Class8readDataEPvl+0x94>)
    f10c:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f10e:	4906      	ldr	r1, [pc, #24]	; (f128 <_ZN9CDC_Class8readDataEPvl+0x84>)
    f110:	4806      	ldr	r0, [pc, #24]	; (f12c <_ZN9CDC_Class8readDataEPvl+0x88>)
    f112:	4b0a      	ldr	r3, [pc, #40]	; (f13c <_ZN9CDC_Class8readDataEPvl+0x98>)
    f114:	4798      	blx	r3
    f116:	e001      	b.n	f11c <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    f118:	2300      	movs	r3, #0
    f11a:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    f11c:	7dfb      	ldrb	r3, [r7, #23]
}
    f11e:	4618      	mov	r0, r3
    f120:	3718      	adds	r7, #24
    f122:	46bd      	mov	sp, r7
    f124:	bd80      	pop	{r7, pc}
    f126:	bf00      	nop
    f128:	0000ee91 	.word	0x0000ee91
    f12c:	20001184 	.word	0x20001184
    f130:	0000f869 	.word	0x0000f869
    f134:	0000d315 	.word	0x0000d315
    f138:	0000f7b1 	.word	0x0000f7b1
    f13c:	0000f8a1 	.word	0x0000f8a1

0000f140 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    f140:	b580      	push	{r7, lr}
    f142:	b084      	sub	sp, #16
    f144:	af00      	add	r7, sp, #0
    f146:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    f148:	687b      	ldr	r3, [r7, #4]
    f14a:	2200      	movs	r2, #0
    f14c:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    f14e:	f107 030f 	add.w	r3, r7, #15
    f152:	2101      	movs	r1, #1
    f154:	4618      	mov	r0, r3
    f156:	4b08      	ldr	r3, [pc, #32]	; (f178 <_ZN9CDC_Class4readEv+0x38>)
    f158:	4798      	blx	r3
	while(!rxReady);
    f15a:	687b      	ldr	r3, [r7, #4]
    f15c:	7d5b      	ldrb	r3, [r3, #21]
    f15e:	b2db      	uxtb	r3, r3
    f160:	f083 0301 	eor.w	r3, r3, #1
    f164:	b2db      	uxtb	r3, r3
    f166:	2b00      	cmp	r3, #0
    f168:	d000      	beq.n	f16c <_ZN9CDC_Class4readEv+0x2c>
    f16a:	e7f6      	b.n	f15a <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    f16c:	7bfb      	ldrb	r3, [r7, #15]
}
    f16e:	4618      	mov	r0, r3
    f170:	3710      	adds	r7, #16
    f172:	46bd      	mov	sp, r7
    f174:	bd80      	pop	{r7, pc}
    f176:	bf00      	nop
    f178:	0000d315 	.word	0x0000d315

0000f17c <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    f17c:	b580      	push	{r7, lr}
    f17e:	b082      	sub	sp, #8
    f180:	af00      	add	r7, sp, #0
    f182:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    f184:	687b      	ldr	r3, [r7, #4]
    f186:	331c      	adds	r3, #28
    f188:	2140      	movs	r1, #64	; 0x40
    f18a:	4618      	mov	r0, r3
    f18c:	4b02      	ldr	r3, [pc, #8]	; (f198 <_ZN9CDC_Class5flushEv+0x1c>)
    f18e:	4798      	blx	r3
}
    f190:	bf00      	nop
    f192:	3708      	adds	r7, #8
    f194:	46bd      	mov	sp, r7
    f196:	bd80      	pop	{r7, pc}
    f198:	0000d359 	.word	0x0000d359

0000f19c <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    f19c:	b580      	push	{r7, lr}
    f19e:	b082      	sub	sp, #8
    f1a0:	af00      	add	r7, sp, #0
    f1a2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    f1a4:	4b02      	ldr	r3, [pc, #8]	; (f1b0 <_ZN9CDC_Class5clearEv+0x14>)
    f1a6:	4798      	blx	r3
}
    f1a8:	bf00      	nop
    f1aa:	3708      	adds	r7, #8
    f1ac:	46bd      	mov	sp, r7
    f1ae:	bd80      	pop	{r7, pc}
    f1b0:	0000d39d 	.word	0x0000d39d

0000f1b4 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    f1b4:	b580      	push	{r7, lr}
    f1b6:	b082      	sub	sp, #8
    f1b8:	af00      	add	r7, sp, #0
    f1ba:	6078      	str	r0, [r7, #4]
    f1bc:	460b      	mov	r3, r1
    f1be:	70fb      	strb	r3, [r7, #3]
	if (connected){
    f1c0:	687b      	ldr	r3, [r7, #4]
    f1c2:	7c1b      	ldrb	r3, [r3, #16]
    f1c4:	b2db      	uxtb	r3, r3
    f1c6:	2b00      	cmp	r3, #0
    f1c8:	d012      	beq.n	f1f0 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    f1ca:	687b      	ldr	r3, [r7, #4]
    f1cc:	7d1b      	ldrb	r3, [r3, #20]
    f1ce:	b2db      	uxtb	r3, r3
    f1d0:	f083 0301 	eor.w	r3, r3, #1
    f1d4:	b2db      	uxtb	r3, r3
    f1d6:	2b00      	cmp	r3, #0
    f1d8:	d000      	beq.n	f1dc <_ZN9CDC_Class5writeEh+0x28>
    f1da:	e7f6      	b.n	f1ca <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    f1dc:	687b      	ldr	r3, [r7, #4]
    f1de:	681b      	ldr	r3, [r3, #0]
    f1e0:	3324      	adds	r3, #36	; 0x24
    f1e2:	681b      	ldr	r3, [r3, #0]
    f1e4:	1cf9      	adds	r1, r7, #3
    f1e6:	2201      	movs	r2, #1
    f1e8:	6878      	ldr	r0, [r7, #4]
    f1ea:	4798      	blx	r3
    f1ec:	4603      	mov	r3, r0
    f1ee:	e000      	b.n	f1f2 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    f1f0:	2300      	movs	r3, #0
	}
		
}
    f1f2:	4618      	mov	r0, r3
    f1f4:	3708      	adds	r7, #8
    f1f6:	46bd      	mov	sp, r7
    f1f8:	bd80      	pop	{r7, pc}
	...

0000f1fc <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    f1fc:	b580      	push	{r7, lr}
    f1fe:	b086      	sub	sp, #24
    f200:	af00      	add	r7, sp, #0
    f202:	60f8      	str	r0, [r7, #12]
    f204:	60b9      	str	r1, [r7, #8]
    f206:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    f208:	68fb      	ldr	r3, [r7, #12]
    f20a:	7c1b      	ldrb	r3, [r3, #16]
    f20c:	b2db      	uxtb	r3, r3
    f20e:	2b00      	cmp	r3, #0
    f210:	d02f      	beq.n	f272 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f212:	687a      	ldr	r2, [r7, #4]
    f214:	4613      	mov	r3, r2
    f216:	009b      	lsls	r3, r3, #2
    f218:	4413      	add	r3, r2
    f21a:	005b      	lsls	r3, r3, #1
    f21c:	461a      	mov	r2, r3
    f21e:	4917      	ldr	r1, [pc, #92]	; (f27c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    f220:	4817      	ldr	r0, [pc, #92]	; (f280 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f222:	4b18      	ldr	r3, [pc, #96]	; (f284 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    f224:	4798      	blx	r3
		txReady=false;
    f226:	68fb      	ldr	r3, [r7, #12]
    f228:	2200      	movs	r2, #0
    f22a:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f22c:	687b      	ldr	r3, [r7, #4]
    f22e:	4619      	mov	r1, r3
    f230:	68b8      	ldr	r0, [r7, #8]
    f232:	4b15      	ldr	r3, [pc, #84]	; (f288 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    f234:	4798      	blx	r3
    f236:	4603      	mov	r3, r0
    f238:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    f23a:	68fb      	ldr	r3, [r7, #12]
    f23c:	7d1b      	ldrb	r3, [r3, #20]
    f23e:	b2db      	uxtb	r3, r3
    f240:	f083 0301 	eor.w	r3, r3, #1
    f244:	b2db      	uxtb	r3, r3
    f246:	2b00      	cmp	r3, #0
    f248:	d006      	beq.n	f258 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    f24a:	68fb      	ldr	r3, [r7, #12]
    f24c:	7c1b      	ldrb	r3, [r3, #16]
    f24e:	b2db      	uxtb	r3, r3
    f250:	2b00      	cmp	r3, #0
    f252:	d001      	beq.n	f258 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    f254:	2301      	movs	r3, #1
    f256:	e000      	b.n	f25a <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    f258:	2300      	movs	r3, #0
    f25a:	2b00      	cmp	r3, #0
    f25c:	d000      	beq.n	f260 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    f25e:	e7ec      	b.n	f23a <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    f260:	4807      	ldr	r0, [pc, #28]	; (f280 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f262:	4b0a      	ldr	r3, [pc, #40]	; (f28c <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    f264:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f266:	4905      	ldr	r1, [pc, #20]	; (f27c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    f268:	4805      	ldr	r0, [pc, #20]	; (f280 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f26a:	4b09      	ldr	r3, [pc, #36]	; (f290 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    f26c:	4798      	blx	r3
		return r;
    f26e:	697b      	ldr	r3, [r7, #20]
    f270:	e000      	b.n	f274 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    f272:	2300      	movs	r3, #0
	}
	

}
    f274:	4618      	mov	r0, r3
    f276:	3718      	adds	r7, #24
    f278:	46bd      	mov	sp, r7
    f27a:	bd80      	pop	{r7, pc}
    f27c:	0000ee91 	.word	0x0000ee91
    f280:	20001184 	.word	0x20001184
    f284:	0000f869 	.word	0x0000f869
    f288:	0000d359 	.word	0x0000d359
    f28c:	0000f7b1 	.word	0x0000f7b1
    f290:	0000f8a1 	.word	0x0000f8a1

0000f294 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    f294:	b580      	push	{r7, lr}
    f296:	b086      	sub	sp, #24
    f298:	af00      	add	r7, sp, #0
    f29a:	60f8      	str	r0, [r7, #12]
    f29c:	60b9      	str	r1, [r7, #8]
    f29e:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    f2a0:	68fb      	ldr	r3, [r7, #12]
    f2a2:	2200      	movs	r2, #0
    f2a4:	751a      	strb	r2, [r3, #20]

 	if (connected){
    f2a6:	68fb      	ldr	r3, [r7, #12]
    f2a8:	7c1b      	ldrb	r3, [r3, #16]
    f2aa:	b2db      	uxtb	r3, r3
    f2ac:	2b00      	cmp	r3, #0
    f2ae:	d02a      	beq.n	f306 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f2b0:	687a      	ldr	r2, [r7, #4]
    f2b2:	4613      	mov	r3, r2
    f2b4:	009b      	lsls	r3, r3, #2
    f2b6:	4413      	add	r3, r2
    f2b8:	005b      	lsls	r3, r3, #1
    f2ba:	461a      	mov	r2, r3
    f2bc:	4915      	ldr	r1, [pc, #84]	; (f314 <_ZN9CDC_Class5writeEPKhj+0x80>)
    f2be:	4816      	ldr	r0, [pc, #88]	; (f318 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f2c0:	4b16      	ldr	r3, [pc, #88]	; (f31c <_ZN9CDC_Class5writeEPKhj+0x88>)
    f2c2:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f2c4:	6879      	ldr	r1, [r7, #4]
    f2c6:	68b8      	ldr	r0, [r7, #8]
    f2c8:	4b15      	ldr	r3, [pc, #84]	; (f320 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    f2ca:	4798      	blx	r3
    f2cc:	4603      	mov	r3, r0
    f2ce:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    f2d0:	68fb      	ldr	r3, [r7, #12]
    f2d2:	7d1b      	ldrb	r3, [r3, #20]
    f2d4:	b2db      	uxtb	r3, r3
    f2d6:	f083 0301 	eor.w	r3, r3, #1
    f2da:	b2db      	uxtb	r3, r3
    f2dc:	2b00      	cmp	r3, #0
    f2de:	d006      	beq.n	f2ee <_ZN9CDC_Class5writeEPKhj+0x5a>
    f2e0:	68fb      	ldr	r3, [r7, #12]
    f2e2:	7c1b      	ldrb	r3, [r3, #16]
    f2e4:	b2db      	uxtb	r3, r3
    f2e6:	2b00      	cmp	r3, #0
    f2e8:	d001      	beq.n	f2ee <_ZN9CDC_Class5writeEPKhj+0x5a>
    f2ea:	2301      	movs	r3, #1
    f2ec:	e000      	b.n	f2f0 <_ZN9CDC_Class5writeEPKhj+0x5c>
    f2ee:	2300      	movs	r3, #0
    f2f0:	2b00      	cmp	r3, #0
    f2f2:	d000      	beq.n	f2f6 <_ZN9CDC_Class5writeEPKhj+0x62>
    f2f4:	e7ec      	b.n	f2d0 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    f2f6:	4808      	ldr	r0, [pc, #32]	; (f318 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f2f8:	4b0a      	ldr	r3, [pc, #40]	; (f324 <_ZN9CDC_Class5writeEPKhj+0x90>)
    f2fa:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f2fc:	4905      	ldr	r1, [pc, #20]	; (f314 <_ZN9CDC_Class5writeEPKhj+0x80>)
    f2fe:	4806      	ldr	r0, [pc, #24]	; (f318 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f300:	4b09      	ldr	r3, [pc, #36]	; (f328 <_ZN9CDC_Class5writeEPKhj+0x94>)
    f302:	4798      	blx	r3
    f304:	e001      	b.n	f30a <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    f306:	2300      	movs	r3, #0
    f308:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    f30a:	697b      	ldr	r3, [r7, #20]
}
    f30c:	4618      	mov	r0, r3
    f30e:	3718      	adds	r7, #24
    f310:	46bd      	mov	sp, r7
    f312:	bd80      	pop	{r7, pc}
    f314:	0000ee91 	.word	0x0000ee91
    f318:	20001184 	.word	0x20001184
    f31c:	0000f869 	.word	0x0000f869
    f320:	0000d359 	.word	0x0000d359
    f324:	0000f7b1 	.word	0x0000f7b1
    f328:	0000f8a1 	.word	0x0000f8a1

0000f32c <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    f32c:	b480      	push	{r7}
    f32e:	b083      	sub	sp, #12
    f330:	af00      	add	r7, sp, #0
    f332:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    f334:	687b      	ldr	r3, [r7, #4]
    f336:	7d5b      	ldrb	r3, [r3, #21]
    f338:	b2db      	uxtb	r3, r3
    f33a:	2b00      	cmp	r3, #0
    f33c:	d006      	beq.n	f34c <_ZN9CDC_Class9availableEv+0x20>
    f33e:	687b      	ldr	r3, [r7, #4]
    f340:	7d1b      	ldrb	r3, [r3, #20]
    f342:	b2db      	uxtb	r3, r3
    f344:	2b00      	cmp	r3, #0
    f346:	d001      	beq.n	f34c <_ZN9CDC_Class9availableEv+0x20>
    f348:	2301      	movs	r3, #1
    f34a:	e000      	b.n	f34e <_ZN9CDC_Class9availableEv+0x22>
    f34c:	2300      	movs	r3, #0
    f34e:	2b00      	cmp	r3, #0
    f350:	d001      	beq.n	f356 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    f352:	2301      	movs	r3, #1
    f354:	e000      	b.n	f358 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    f356:	2300      	movs	r3, #0
	}
	
}
    f358:	4618      	mov	r0, r3
    f35a:	370c      	adds	r7, #12
    f35c:	46bd      	mov	sp, r7
    f35e:	bc80      	pop	{r7}
    f360:	4770      	bx	lr
	...

0000f364 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    f364:	b580      	push	{r7, lr}
    f366:	b082      	sub	sp, #8
    f368:	af00      	add	r7, sp, #0
    f36a:	6078      	str	r0, [r7, #4]
    f36c:	6039      	str	r1, [r7, #0]
    f36e:	687b      	ldr	r3, [r7, #4]
    f370:	2b01      	cmp	r3, #1
    f372:	d10c      	bne.n	f38e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    f374:	683b      	ldr	r3, [r7, #0]
    f376:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f37a:	4293      	cmp	r3, r2
    f37c:	d107      	bne.n	f38e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    f37e:	4806      	ldr	r0, [pc, #24]	; (f398 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f380:	4b06      	ldr	r3, [pc, #24]	; (f39c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    f382:	4798      	blx	r3
    f384:	4a06      	ldr	r2, [pc, #24]	; (f3a0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    f386:	4907      	ldr	r1, [pc, #28]	; (f3a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    f388:	4803      	ldr	r0, [pc, #12]	; (f398 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f38a:	4b07      	ldr	r3, [pc, #28]	; (f3a8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    f38c:	4798      	blx	r3
    f38e:	bf00      	nop
    f390:	3708      	adds	r7, #8
    f392:	46bd      	mov	sp, r7
    f394:	bd80      	pop	{r7, pc}
    f396:	bf00      	nop
    f398:	200010cc 	.word	0x200010cc
    f39c:	0000ef81 	.word	0x0000ef81
    f3a0:	20000000 	.word	0x20000000
    f3a4:	0000efc9 	.word	0x0000efc9
    f3a8:	000104e9 	.word	0x000104e9

0000f3ac <_GLOBAL__sub_I_ptrCDCClass>:
    f3ac:	b580      	push	{r7, lr}
    f3ae:	af00      	add	r7, sp, #0
    f3b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f3b4:	2001      	movs	r0, #1
    f3b6:	4b01      	ldr	r3, [pc, #4]	; (f3bc <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    f3b8:	4798      	blx	r3
    f3ba:	bd80      	pop	{r7, pc}
    f3bc:	0000f365 	.word	0x0000f365

0000f3c0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    f3c0:	b590      	push	{r4, r7, lr}
    f3c2:	b083      	sub	sp, #12
    f3c4:	af00      	add	r7, sp, #0
    f3c6:	6078      	str	r0, [r7, #4]
    f3c8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    f3ca:	683b      	ldr	r3, [r7, #0]
    f3cc:	2b00      	cmp	r3, #0
    f3ce:	d101      	bne.n	f3d4 <_ZN5Print5writeEPKc+0x14>
    f3d0:	2300      	movs	r3, #0
    f3d2:	e00c      	b.n	f3ee <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    f3d4:	687b      	ldr	r3, [r7, #4]
    f3d6:	681b      	ldr	r3, [r3, #0]
    f3d8:	3304      	adds	r3, #4
    f3da:	681c      	ldr	r4, [r3, #0]
    f3dc:	6838      	ldr	r0, [r7, #0]
    f3de:	4b06      	ldr	r3, [pc, #24]	; (f3f8 <_ZN5Print5writeEPKc+0x38>)
    f3e0:	4798      	blx	r3
    f3e2:	4603      	mov	r3, r0
    f3e4:	461a      	mov	r2, r3
    f3e6:	6839      	ldr	r1, [r7, #0]
    f3e8:	6878      	ldr	r0, [r7, #4]
    f3ea:	47a0      	blx	r4
    f3ec:	4603      	mov	r3, r0
    }
    f3ee:	4618      	mov	r0, r3
    f3f0:	370c      	adds	r7, #12
    f3f2:	46bd      	mov	sp, r7
    f3f4:	bd90      	pop	{r4, r7, pc}
    f3f6:	bf00      	nop
    f3f8:	000109c1 	.word	0x000109c1

0000f3fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    f3fc:	b580      	push	{r7, lr}
    f3fe:	b086      	sub	sp, #24
    f400:	af00      	add	r7, sp, #0
    f402:	60f8      	str	r0, [r7, #12]
    f404:	60b9      	str	r1, [r7, #8]
    f406:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    f408:	2300      	movs	r3, #0
    f40a:	617b      	str	r3, [r7, #20]
  while (size--) {
    f40c:	687b      	ldr	r3, [r7, #4]
    f40e:	1e5a      	subs	r2, r3, #1
    f410:	607a      	str	r2, [r7, #4]
    f412:	2b00      	cmp	r3, #0
    f414:	bf14      	ite	ne
    f416:	2301      	movne	r3, #1
    f418:	2300      	moveq	r3, #0
    f41a:	b2db      	uxtb	r3, r3
    f41c:	2b00      	cmp	r3, #0
    f41e:	d016      	beq.n	f44e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    f420:	68fb      	ldr	r3, [r7, #12]
    f422:	681b      	ldr	r3, [r3, #0]
    f424:	681a      	ldr	r2, [r3, #0]
    f426:	68bb      	ldr	r3, [r7, #8]
    f428:	1c59      	adds	r1, r3, #1
    f42a:	60b9      	str	r1, [r7, #8]
    f42c:	781b      	ldrb	r3, [r3, #0]
    f42e:	4619      	mov	r1, r3
    f430:	68f8      	ldr	r0, [r7, #12]
    f432:	4790      	blx	r2
    f434:	4603      	mov	r3, r0
    f436:	2b00      	cmp	r3, #0
    f438:	bf14      	ite	ne
    f43a:	2301      	movne	r3, #1
    f43c:	2300      	moveq	r3, #0
    f43e:	b2db      	uxtb	r3, r3
    f440:	2b00      	cmp	r3, #0
    f442:	d003      	beq.n	f44c <_ZN5Print5writeEPKhj+0x50>
    f444:	697b      	ldr	r3, [r7, #20]
    f446:	3301      	adds	r3, #1
    f448:	617b      	str	r3, [r7, #20]
  while (size--) {
    f44a:	e7df      	b.n	f40c <_ZN5Print5writeEPKhj+0x10>
    else break;
    f44c:	bf00      	nop
  }
  return n;
    f44e:	697b      	ldr	r3, [r7, #20]
}
    f450:	4618      	mov	r0, r3
    f452:	3718      	adds	r7, #24
    f454:	46bd      	mov	sp, r7
    f456:	bd80      	pop	{r7, pc}

0000f458 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    f458:	b580      	push	{r7, lr}
    f45a:	b082      	sub	sp, #8
    f45c:	af00      	add	r7, sp, #0
    f45e:	6078      	str	r0, [r7, #4]
    f460:	6039      	str	r1, [r7, #0]
  return write(str);
    f462:	6839      	ldr	r1, [r7, #0]
    f464:	6878      	ldr	r0, [r7, #4]
    f466:	4b03      	ldr	r3, [pc, #12]	; (f474 <_ZN5Print5printEPKc+0x1c>)
    f468:	4798      	blx	r3
    f46a:	4603      	mov	r3, r0
}
    f46c:	4618      	mov	r0, r3
    f46e:	3708      	adds	r7, #8
    f470:	46bd      	mov	sp, r7
    f472:	bd80      	pop	{r7, pc}
    f474:	0000f3c1 	.word	0x0000f3c1

0000f478 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    f478:	b480      	push	{r7}
    f47a:	b083      	sub	sp, #12
    f47c:	af00      	add	r7, sp, #0
    f47e:	6078      	str	r0, [r7, #4]
    f480:	460b      	mov	r3, r1
    f482:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f484:	78fb      	ldrb	r3, [r7, #3]
    f486:	687a      	ldr	r2, [r7, #4]
    f488:	01db      	lsls	r3, r3, #7
    f48a:	4413      	add	r3, r2
    f48c:	681b      	ldr	r3, [r3, #0]
}
    f48e:	4618      	mov	r0, r3
    f490:	370c      	adds	r7, #12
    f492:	46bd      	mov	sp, r7
    f494:	bc80      	pop	{r7}
    f496:	4770      	bx	lr

0000f498 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    f498:	b480      	push	{r7}
    f49a:	b083      	sub	sp, #12
    f49c:	af00      	add	r7, sp, #0
    f49e:	6078      	str	r0, [r7, #4]
    f4a0:	460b      	mov	r3, r1
    f4a2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f4a4:	78fb      	ldrb	r3, [r7, #3]
    f4a6:	687a      	ldr	r2, [r7, #4]
    f4a8:	01db      	lsls	r3, r3, #7
    f4aa:	4413      	add	r3, r2
    f4ac:	3310      	adds	r3, #16
    f4ae:	681b      	ldr	r3, [r3, #0]
}
    f4b0:	4618      	mov	r0, r3
    f4b2:	370c      	adds	r7, #12
    f4b4:	46bd      	mov	sp, r7
    f4b6:	bc80      	pop	{r7}
    f4b8:	4770      	bx	lr

0000f4ba <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f4ba:	b480      	push	{r7}
    f4bc:	b083      	sub	sp, #12
    f4be:	af00      	add	r7, sp, #0
    f4c0:	6078      	str	r0, [r7, #4]
    f4c2:	460b      	mov	r3, r1
    f4c4:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f4c6:	78fb      	ldrb	r3, [r7, #3]
    f4c8:	687a      	ldr	r2, [r7, #4]
    f4ca:	01db      	lsls	r3, r3, #7
    f4cc:	4413      	add	r3, r2
    f4ce:	3320      	adds	r3, #32
    f4d0:	681b      	ldr	r3, [r3, #0]
}
    f4d2:	4618      	mov	r0, r3
    f4d4:	370c      	adds	r7, #12
    f4d6:	46bd      	mov	sp, r7
    f4d8:	bc80      	pop	{r7}
    f4da:	4770      	bx	lr

0000f4dc <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f4dc:	b580      	push	{r7, lr}
    f4de:	b086      	sub	sp, #24
    f4e0:	af00      	add	r7, sp, #0
    f4e2:	4603      	mov	r3, r0
    f4e4:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f4e6:	f107 030c 	add.w	r3, r7, #12
    f4ea:	4618      	mov	r0, r3
    f4ec:	4b13      	ldr	r3, [pc, #76]	; (f53c <_gpio_get_level+0x60>)
    f4ee:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f4f0:	79fb      	ldrb	r3, [r7, #7]
    f4f2:	4619      	mov	r1, r3
    f4f4:	4812      	ldr	r0, [pc, #72]	; (f540 <_gpio_get_level+0x64>)
    f4f6:	4b13      	ldr	r3, [pc, #76]	; (f544 <_gpio_get_level+0x68>)
    f4f8:	4798      	blx	r3
    f4fa:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f4fc:	79fb      	ldrb	r3, [r7, #7]
    f4fe:	4619      	mov	r1, r3
    f500:	480f      	ldr	r0, [pc, #60]	; (f540 <_gpio_get_level+0x64>)
    f502:	4b11      	ldr	r3, [pc, #68]	; (f548 <_gpio_get_level+0x6c>)
    f504:	4798      	blx	r3
    f506:	4602      	mov	r2, r0
    f508:	697b      	ldr	r3, [r7, #20]
    f50a:	43db      	mvns	r3, r3
    f50c:	4013      	ands	r3, r2
    f50e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f510:	79fb      	ldrb	r3, [r7, #7]
    f512:	4619      	mov	r1, r3
    f514:	480a      	ldr	r0, [pc, #40]	; (f540 <_gpio_get_level+0x64>)
    f516:	4b0d      	ldr	r3, [pc, #52]	; (f54c <_gpio_get_level+0x70>)
    f518:	4798      	blx	r3
    f51a:	4602      	mov	r2, r0
    f51c:	697b      	ldr	r3, [r7, #20]
    f51e:	4013      	ands	r3, r2
    f520:	693a      	ldr	r2, [r7, #16]
    f522:	4313      	orrs	r3, r2
    f524:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f526:	f107 030c 	add.w	r3, r7, #12
    f52a:	4618      	mov	r0, r3
    f52c:	4b08      	ldr	r3, [pc, #32]	; (f550 <_gpio_get_level+0x74>)
    f52e:	4798      	blx	r3

	return tmp;
    f530:	693b      	ldr	r3, [r7, #16]
}
    f532:	4618      	mov	r0, r3
    f534:	3718      	adds	r7, #24
    f536:	46bd      	mov	sp, r7
    f538:	bd80      	pop	{r7, pc}
    f53a:	bf00      	nop
    f53c:	0000329d 	.word	0x0000329d
    f540:	41008000 	.word	0x41008000
    f544:	0000f479 	.word	0x0000f479
    f548:	0000f4bb 	.word	0x0000f4bb
    f54c:	0000f499 	.word	0x0000f499
    f550:	000032c3 	.word	0x000032c3

0000f554 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f554:	b580      	push	{r7, lr}
    f556:	b082      	sub	sp, #8
    f558:	af00      	add	r7, sp, #0
    f55a:	4603      	mov	r3, r0
    f55c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f55e:	79fb      	ldrb	r3, [r7, #7]
    f560:	115b      	asrs	r3, r3, #5
    f562:	b2db      	uxtb	r3, r3
    f564:	4618      	mov	r0, r3
    f566:	4b09      	ldr	r3, [pc, #36]	; (f58c <gpio_get_pin_level+0x38>)
    f568:	4798      	blx	r3
    f56a:	4601      	mov	r1, r0
    f56c:	79fb      	ldrb	r3, [r7, #7]
    f56e:	f003 031f 	and.w	r3, r3, #31
    f572:	2201      	movs	r2, #1
    f574:	fa02 f303 	lsl.w	r3, r2, r3
    f578:	400b      	ands	r3, r1
    f57a:	2b00      	cmp	r3, #0
    f57c:	bf14      	ite	ne
    f57e:	2301      	movne	r3, #1
    f580:	2300      	moveq	r3, #0
    f582:	b2db      	uxtb	r3, r3
}
    f584:	4618      	mov	r0, r3
    f586:	3708      	adds	r7, #8
    f588:	46bd      	mov	sp, r7
    f58a:	bd80      	pop	{r7, pc}
    f58c:	0000f4dd 	.word	0x0000f4dd

0000f590 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    f590:	b480      	push	{r7}
    f592:	b083      	sub	sp, #12
    f594:	af00      	add	r7, sp, #0
    f596:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    f598:	4b06      	ldr	r3, [pc, #24]	; (f5b4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f59a:	681b      	ldr	r3, [r3, #0]
    f59c:	2201      	movs	r2, #1
    f59e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    f5a0:	4b04      	ldr	r3, [pc, #16]	; (f5b4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f5a2:	681b      	ldr	r3, [r3, #0]
    f5a4:	2200      	movs	r2, #0
    f5a6:	705a      	strb	r2, [r3, #1]
}
    f5a8:	bf00      	nop
    f5aa:	370c      	adds	r7, #12
    f5ac:	46bd      	mov	sp, r7
    f5ae:	bc80      	pop	{r7}
    f5b0:	4770      	bx	lr
    f5b2:	bf00      	nop
    f5b4:	2000112c 	.word	0x2000112c

0000f5b8 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    f5b8:	b580      	push	{r7, lr}
    f5ba:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    f5bc:	2040      	movs	r0, #64	; 0x40
    f5be:	4b0a      	ldr	r3, [pc, #40]	; (f5e8 <_ZL10USBPluggedv+0x30>)
    f5c0:	4798      	blx	r3
    f5c2:	4603      	mov	r3, r0
    f5c4:	2b00      	cmp	r3, #0
    f5c6:	d004      	beq.n	f5d2 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    f5c8:	4b08      	ldr	r3, [pc, #32]	; (f5ec <_ZL10USBPluggedv+0x34>)
    f5ca:	681b      	ldr	r3, [r3, #0]
    f5cc:	2201      	movs	r2, #1
    f5ce:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    f5d0:	e007      	b.n	f5e2 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    f5d2:	4b06      	ldr	r3, [pc, #24]	; (f5ec <_ZL10USBPluggedv+0x34>)
    f5d4:	681b      	ldr	r3, [r3, #0]
    f5d6:	2200      	movs	r2, #0
    f5d8:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    f5da:	4b04      	ldr	r3, [pc, #16]	; (f5ec <_ZL10USBPluggedv+0x34>)
    f5dc:	681b      	ldr	r3, [r3, #0]
    f5de:	2200      	movs	r2, #0
    f5e0:	701a      	strb	r2, [r3, #0]
}
    f5e2:	bf00      	nop
    f5e4:	bd80      	pop	{r7, pc}
    f5e6:	bf00      	nop
    f5e8:	0000f555 	.word	0x0000f555
    f5ec:	2000112c 	.word	0x2000112c

0000f5f0 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    f5f0:	b480      	push	{r7}
    f5f2:	b083      	sub	sp, #12
    f5f4:	af00      	add	r7, sp, #0
    f5f6:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    f5f8:	4a04      	ldr	r2, [pc, #16]	; (f60c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    f5fa:	687b      	ldr	r3, [r7, #4]
    f5fc:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    f5fe:	687b      	ldr	r3, [r7, #4]
    f600:	4618      	mov	r0, r3
    f602:	370c      	adds	r7, #12
    f604:	46bd      	mov	sp, r7
    f606:	bc80      	pop	{r7}
    f608:	4770      	bx	lr
    f60a:	bf00      	nop
    f60c:	2000112c 	.word	0x2000112c

0000f610 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    f610:	b480      	push	{r7}
    f612:	b083      	sub	sp, #12
    f614:	af00      	add	r7, sp, #0
    f616:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    f618:	687b      	ldr	r3, [r7, #4]
    f61a:	4618      	mov	r0, r3
    f61c:	370c      	adds	r7, #12
    f61e:	46bd      	mov	sp, r7
    f620:	bc80      	pop	{r7}
    f622:	4770      	bx	lr

0000f624 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    f624:	b580      	push	{r7, lr}
    f626:	b082      	sub	sp, #8
    f628:	af00      	add	r7, sp, #0
    f62a:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    f62c:	491f      	ldr	r1, [pc, #124]	; (f6ac <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    f62e:	2040      	movs	r0, #64	; 0x40
    f630:	4b1f      	ldr	r3, [pc, #124]	; (f6b0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f632:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    f634:	481f      	ldr	r0, [pc, #124]	; (f6b4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f636:	4b20      	ldr	r3, [pc, #128]	; (f6b8 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    f638:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    f63a:	2040      	movs	r0, #64	; 0x40
    f63c:	4b1f      	ldr	r3, [pc, #124]	; (f6bc <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    f63e:	4798      	blx	r3
    f640:	4603      	mov	r3, r0
    f642:	461a      	mov	r2, r3
    f644:	687b      	ldr	r3, [r7, #4]
    f646:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    f648:	687b      	ldr	r3, [r7, #4]
    f64a:	78db      	ldrb	r3, [r3, #3]
    f64c:	2b00      	cmp	r3, #0
    f64e:	d024      	beq.n	f69a <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    f650:	687b      	ldr	r3, [r7, #4]
    f652:	2200      	movs	r2, #0
    f654:	709a      	strb	r2, [r3, #2]
			plugged=true;
    f656:	687b      	ldr	r3, [r7, #4]
    f658:	2201      	movs	r2, #1
    f65a:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    f65c:	f44f 7216 	mov.w	r2, #600	; 0x258
    f660:	4917      	ldr	r1, [pc, #92]	; (f6c0 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    f662:	4814      	ldr	r0, [pc, #80]	; (f6b4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f664:	4b17      	ldr	r3, [pc, #92]	; (f6c4 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    f666:	4798      	blx	r3
			usbTerminalTimer.Start();
    f668:	4812      	ldr	r0, [pc, #72]	; (f6b4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f66a:	4b17      	ldr	r3, [pc, #92]	; (f6c8 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    f66c:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    f66e:	4817      	ldr	r0, [pc, #92]	; (f6cc <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    f670:	4b17      	ldr	r3, [pc, #92]	; (f6d0 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    f672:	4798      	blx	r3
    f674:	4603      	mov	r3, r0
    f676:	f083 0301 	eor.w	r3, r3, #1
    f67a:	b2db      	uxtb	r3, r3
    f67c:	2b00      	cmp	r3, #0
    f67e:	d008      	beq.n	f692 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    f680:	687b      	ldr	r3, [r7, #4]
    f682:	789b      	ldrb	r3, [r3, #2]
    f684:	b2db      	uxtb	r3, r3
    f686:	2b00      	cmp	r3, #0
    f688:	d0f1      	beq.n	f66e <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    f68a:	687b      	ldr	r3, [r7, #4]
    f68c:	2200      	movs	r2, #0
    f68e:	701a      	strb	r2, [r3, #0]
					return;
    f690:	e009      	b.n	f6a6 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    f692:	4808      	ldr	r0, [pc, #32]	; (f6b4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f694:	4b0f      	ldr	r3, [pc, #60]	; (f6d4 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    f696:	4798      	blx	r3
    f698:	e005      	b.n	f6a6 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    f69a:	687b      	ldr	r3, [r7, #4]
    f69c:	2200      	movs	r2, #0
    f69e:	701a      	strb	r2, [r3, #0]
			plugged=false;
    f6a0:	687b      	ldr	r3, [r7, #4]
    f6a2:	2200      	movs	r2, #0
    f6a4:	705a      	strb	r2, [r3, #1]
		}
		
}
    f6a6:	3708      	adds	r7, #8
    f6a8:	46bd      	mov	sp, r7
    f6aa:	bd80      	pop	{r7, pc}
    f6ac:	0000f5b9 	.word	0x0000f5b9
    f6b0:	00003559 	.word	0x00003559
    f6b4:	20001184 	.word	0x20001184
    f6b8:	0000f755 	.word	0x0000f755
    f6bc:	0000f555 	.word	0x0000f555
    f6c0:	0000f591 	.word	0x0000f591
    f6c4:	0000f841 	.word	0x0000f841
    f6c8:	0000f78d 	.word	0x0000f78d
    f6cc:	200010cc 	.word	0x200010cc
    f6d0:	0000f039 	.word	0x0000f039
    f6d4:	0000f7b1 	.word	0x0000f7b1

0000f6d8 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    f6d8:	b580      	push	{r7, lr}
    f6da:	b082      	sub	sp, #8
    f6dc:	af00      	add	r7, sp, #0
    f6de:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    f6e0:	4b04      	ldr	r3, [pc, #16]	; (f6f4 <_ZL7task_cbPK10timer_task+0x1c>)
    f6e2:	681b      	ldr	r3, [r3, #0]
    f6e4:	4618      	mov	r0, r3
    f6e6:	4b04      	ldr	r3, [pc, #16]	; (f6f8 <_ZL7task_cbPK10timer_task+0x20>)
    f6e8:	4798      	blx	r3
}
    f6ea:	bf00      	nop
    f6ec:	3708      	adds	r7, #8
    f6ee:	46bd      	mov	sp, r7
    f6f0:	bd80      	pop	{r7, pc}
    f6f2:	bf00      	nop
    f6f4:	20001130 	.word	0x20001130
    f6f8:	0000f7d9 	.word	0x0000f7d9

0000f6fc <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    f6fc:	b480      	push	{r7}
    f6fe:	b083      	sub	sp, #12
    f700:	af00      	add	r7, sp, #0
    f702:	6078      	str	r0, [r7, #4]
    f704:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    f706:	687b      	ldr	r3, [r7, #4]
    f708:	683a      	ldr	r2, [r7, #0]
    f70a:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    f70c:	4a08      	ldr	r2, [pc, #32]	; (f730 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    f70e:	687b      	ldr	r3, [r7, #4]
    f710:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    f712:	687b      	ldr	r3, [r7, #4]
    f714:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f718:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    f71a:	687b      	ldr	r3, [r7, #4]
    f71c:	689b      	ldr	r3, [r3, #8]
    f71e:	4a05      	ldr	r2, [pc, #20]	; (f734 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    f720:	60da      	str	r2, [r3, #12]
} //Timer_Class
    f722:	687b      	ldr	r3, [r7, #4]
    f724:	4618      	mov	r0, r3
    f726:	370c      	adds	r7, #12
    f728:	46bd      	mov	sp, r7
    f72a:	bc80      	pop	{r7}
    f72c:	4770      	bx	lr
    f72e:	bf00      	nop
    f730:	20001130 	.word	0x20001130
    f734:	0000f6d9 	.word	0x0000f6d9

0000f738 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    f738:	b480      	push	{r7}
    f73a:	b083      	sub	sp, #12
    f73c:	af00      	add	r7, sp, #0
    f73e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    f740:	687b      	ldr	r3, [r7, #4]
    f742:	2200      	movs	r2, #0
    f744:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    f746:	687b      	ldr	r3, [r7, #4]
    f748:	4618      	mov	r0, r3
    f74a:	370c      	adds	r7, #12
    f74c:	46bd      	mov	sp, r7
    f74e:	bc80      	pop	{r7}
    f750:	4770      	bx	lr
	...

0000f754 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    f754:	b580      	push	{r7, lr}
    f756:	b082      	sub	sp, #8
    f758:	af00      	add	r7, sp, #0
    f75a:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    f75c:	687b      	ldr	r3, [r7, #4]
    f75e:	2200      	movs	r2, #0
    f760:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    f762:	6878      	ldr	r0, [r7, #4]
    f764:	4b08      	ldr	r3, [pc, #32]	; (f788 <_ZN17TimerSerial_Class4InitEv+0x34>)
    f766:	4798      	blx	r3
    f768:	4603      	mov	r3, r0
    f76a:	2b00      	cmp	r3, #0
    f76c:	bf0c      	ite	eq
    f76e:	2301      	moveq	r3, #1
    f770:	2300      	movne	r3, #0
    f772:	b2da      	uxtb	r2, r3
    f774:	687b      	ldr	r3, [r7, #4]
    f776:	709a      	strb	r2, [r3, #2]
	return isOK;
    f778:	687b      	ldr	r3, [r7, #4]
    f77a:	789b      	ldrb	r3, [r3, #2]
    f77c:	b2db      	uxtb	r3, r3
}
    f77e:	4618      	mov	r0, r3
    f780:	3708      	adds	r7, #8
    f782:	46bd      	mov	sp, r7
    f784:	bd80      	pop	{r7, pc}
    f786:	bf00      	nop
    f788:	0000f78d 	.word	0x0000f78d

0000f78c <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    f78c:	b580      	push	{r7, lr}
    f78e:	b084      	sub	sp, #16
    f790:	af00      	add	r7, sp, #0
    f792:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    f794:	687b      	ldr	r3, [r7, #4]
    f796:	691b      	ldr	r3, [r3, #16]
    f798:	4618      	mov	r0, r3
    f79a:	4b04      	ldr	r3, [pc, #16]	; (f7ac <_ZN17TimerSerial_Class5StartEv+0x20>)
    f79c:	4798      	blx	r3
    f79e:	60f8      	str	r0, [r7, #12]
	return status;
    f7a0:	68fb      	ldr	r3, [r7, #12]
	
}
    f7a2:	4618      	mov	r0, r3
    f7a4:	3710      	adds	r7, #16
    f7a6:	46bd      	mov	sp, r7
    f7a8:	bd80      	pop	{r7, pc}
    f7aa:	bf00      	nop
    f7ac:	00003cfd 	.word	0x00003cfd

0000f7b0 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    f7b0:	b580      	push	{r7, lr}
    f7b2:	b084      	sub	sp, #16
    f7b4:	af00      	add	r7, sp, #0
    f7b6:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    f7b8:	687b      	ldr	r3, [r7, #4]
    f7ba:	691b      	ldr	r3, [r3, #16]
    f7bc:	4618      	mov	r0, r3
    f7be:	4b05      	ldr	r3, [pc, #20]	; (f7d4 <_ZN17TimerSerial_Class4StopEv+0x24>)
    f7c0:	4798      	blx	r3
    f7c2:	60f8      	str	r0, [r7, #12]
	timeout=0;
    f7c4:	687b      	ldr	r3, [r7, #4]
    f7c6:	2200      	movs	r2, #0
    f7c8:	705a      	strb	r2, [r3, #1]
	return status;
    f7ca:	68fb      	ldr	r3, [r7, #12]
}
    f7cc:	4618      	mov	r0, r3
    f7ce:	3710      	adds	r7, #16
    f7d0:	46bd      	mov	sp, r7
    f7d2:	bd80      	pop	{r7, pc}
    f7d4:	00003d65 	.word	0x00003d65

0000f7d8 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    f7d8:	b480      	push	{r7}
    f7da:	b083      	sub	sp, #12
    f7dc:	af00      	add	r7, sp, #0
    f7de:	6078      	str	r0, [r7, #4]
	timeout=1;
    f7e0:	687b      	ldr	r3, [r7, #4]
    f7e2:	2201      	movs	r2, #1
    f7e4:	705a      	strb	r2, [r3, #1]
}
    f7e6:	bf00      	nop
    f7e8:	370c      	adds	r7, #12
    f7ea:	46bd      	mov	sp, r7
    f7ec:	bc80      	pop	{r7}
    f7ee:	4770      	bx	lr

0000f7f0 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    f7f0:	b580      	push	{r7, lr}
    f7f2:	b086      	sub	sp, #24
    f7f4:	af00      	add	r7, sp, #0
    f7f6:	60f8      	str	r0, [r7, #12]
    f7f8:	60b9      	str	r1, [r7, #8]
    f7fa:	607a      	str	r2, [r7, #4]
    f7fc:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    f7fe:	68f8      	ldr	r0, [r7, #12]
    f800:	4b0d      	ldr	r3, [pc, #52]	; (f838 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    f802:	4798      	blx	r3
	task->interval = interval;
    f804:	68fb      	ldr	r3, [r7, #12]
    f806:	689b      	ldr	r3, [r3, #8]
    f808:	687a      	ldr	r2, [r7, #4]
    f80a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    f80c:	68fb      	ldr	r3, [r7, #12]
    f80e:	689b      	ldr	r3, [r3, #8]
    f810:	68ba      	ldr	r2, [r7, #8]
    f812:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    f814:	68fb      	ldr	r3, [r7, #12]
    f816:	689b      	ldr	r3, [r3, #8]
    f818:	78fa      	ldrb	r2, [r7, #3]
    f81a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    f81c:	68fb      	ldr	r3, [r7, #12]
    f81e:	691a      	ldr	r2, [r3, #16]
    f820:	68fb      	ldr	r3, [r7, #12]
    f822:	689b      	ldr	r3, [r3, #8]
    f824:	4619      	mov	r1, r3
    f826:	4610      	mov	r0, r2
    f828:	4b04      	ldr	r3, [pc, #16]	; (f83c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    f82a:	4798      	blx	r3
    f82c:	6178      	str	r0, [r7, #20]
	
	return status;
    f82e:	697b      	ldr	r3, [r7, #20]
}
    f830:	4618      	mov	r0, r3
    f832:	3718      	adds	r7, #24
    f834:	46bd      	mov	sp, r7
    f836:	bd80      	pop	{r7, pc}
    f838:	0000f8f9 	.word	0x0000f8f9
    f83c:	00003dd1 	.word	0x00003dd1

0000f840 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    f840:	b590      	push	{r4, r7, lr}
    f842:	b087      	sub	sp, #28
    f844:	af00      	add	r7, sp, #0
    f846:	60f8      	str	r0, [r7, #12]
    f848:	60b9      	str	r1, [r7, #8]
    f84a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f84c:	2300      	movs	r3, #0
    f84e:	687a      	ldr	r2, [r7, #4]
    f850:	68b9      	ldr	r1, [r7, #8]
    f852:	68f8      	ldr	r0, [r7, #12]
    f854:	4c03      	ldr	r4, [pc, #12]	; (f864 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    f856:	47a0      	blx	r4
    f858:	6178      	str	r0, [r7, #20]
	return status;
    f85a:	697b      	ldr	r3, [r7, #20]
}
    f85c:	4618      	mov	r0, r3
    f85e:	371c      	adds	r7, #28
    f860:	46bd      	mov	sp, r7
    f862:	bd90      	pop	{r4, r7, pc}
    f864:	0000f7f1 	.word	0x0000f7f1

0000f868 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    f868:	b590      	push	{r4, r7, lr}
    f86a:	b087      	sub	sp, #28
    f86c:	af00      	add	r7, sp, #0
    f86e:	60f8      	str	r0, [r7, #12]
    f870:	60b9      	str	r1, [r7, #8]
    f872:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f874:	2300      	movs	r3, #0
    f876:	687a      	ldr	r2, [r7, #4]
    f878:	68b9      	ldr	r1, [r7, #8]
    f87a:	68f8      	ldr	r0, [r7, #12]
    f87c:	4c06      	ldr	r4, [pc, #24]	; (f898 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    f87e:	47a0      	blx	r4
    f880:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    f882:	68fb      	ldr	r3, [r7, #12]
    f884:	691b      	ldr	r3, [r3, #16]
    f886:	4618      	mov	r0, r3
    f888:	4b04      	ldr	r3, [pc, #16]	; (f89c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    f88a:	4798      	blx	r3
    f88c:	6178      	str	r0, [r7, #20]
	return status;
    f88e:	697b      	ldr	r3, [r7, #20]
}
    f890:	4618      	mov	r0, r3
    f892:	371c      	adds	r7, #28
    f894:	46bd      	mov	sp, r7
    f896:	bd90      	pop	{r4, r7, pc}
    f898:	0000f7f1 	.word	0x0000f7f1
    f89c:	00003cfd 	.word	0x00003cfd

0000f8a0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    f8a0:	b580      	push	{r7, lr}
    f8a2:	b082      	sub	sp, #8
    f8a4:	af00      	add	r7, sp, #0
    f8a6:	6078      	str	r0, [r7, #4]
    f8a8:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    f8aa:	6839      	ldr	r1, [r7, #0]
    f8ac:	6878      	ldr	r0, [r7, #4]
    f8ae:	4b0f      	ldr	r3, [pc, #60]	; (f8ec <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    f8b0:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    f8b2:	687b      	ldr	r3, [r7, #4]
    f8b4:	691b      	ldr	r3, [r3, #16]
    f8b6:	f103 0218 	add.w	r2, r3, #24
    f8ba:	687b      	ldr	r3, [r7, #4]
    f8bc:	689b      	ldr	r3, [r3, #8]
    f8be:	4619      	mov	r1, r3
    f8c0:	4610      	mov	r0, r2
    f8c2:	4b0b      	ldr	r3, [pc, #44]	; (f8f0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    f8c4:	4798      	blx	r3
    f8c6:	4603      	mov	r3, r0
    f8c8:	2b00      	cmp	r3, #0
    f8ca:	d007      	beq.n	f8dc <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    f8cc:	687b      	ldr	r3, [r7, #4]
    f8ce:	691a      	ldr	r2, [r3, #16]
    f8d0:	687b      	ldr	r3, [r7, #4]
    f8d2:	689b      	ldr	r3, [r3, #8]
    f8d4:	4619      	mov	r1, r3
    f8d6:	4610      	mov	r0, r2
    f8d8:	4b06      	ldr	r3, [pc, #24]	; (f8f4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    f8da:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    f8dc:	687b      	ldr	r3, [r7, #4]
    f8de:	689b      	ldr	r3, [r3, #8]
    f8e0:	2200      	movs	r2, #0
    f8e2:	60da      	str	r2, [r3, #12]
}
    f8e4:	bf00      	nop
    f8e6:	3708      	adds	r7, #8
    f8e8:	46bd      	mov	sp, r7
    f8ea:	bd80      	pop	{r7, pc}
    f8ec:	0000f951 	.word	0x0000f951
    f8f0:	00004abd 	.word	0x00004abd
    f8f4:	00003ed5 	.word	0x00003ed5

0000f8f8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    f8f8:	b480      	push	{r7}
    f8fa:	b085      	sub	sp, #20
    f8fc:	af00      	add	r7, sp, #0
    f8fe:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f900:	2300      	movs	r3, #0
    f902:	73fb      	strb	r3, [r7, #15]
    f904:	7bfb      	ldrb	r3, [r7, #15]
    f906:	2b03      	cmp	r3, #3
    f908:	dc18      	bgt.n	f93c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    f90a:	7bfa      	ldrb	r2, [r7, #15]
    f90c:	490f      	ldr	r1, [pc, #60]	; (f94c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f90e:	4613      	mov	r3, r2
    f910:	009b      	lsls	r3, r3, #2
    f912:	4413      	add	r3, r2
    f914:	009b      	lsls	r3, r3, #2
    f916:	440b      	add	r3, r1
    f918:	330c      	adds	r3, #12
    f91a:	681b      	ldr	r3, [r3, #0]
    f91c:	2b00      	cmp	r3, #0
    f91e:	d109      	bne.n	f934 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    f920:	7bfa      	ldrb	r2, [r7, #15]
    f922:	4613      	mov	r3, r2
    f924:	009b      	lsls	r3, r3, #2
    f926:	4413      	add	r3, r2
    f928:	009b      	lsls	r3, r3, #2
    f92a:	4a08      	ldr	r2, [pc, #32]	; (f94c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f92c:	441a      	add	r2, r3
    f92e:	687b      	ldr	r3, [r7, #4]
    f930:	609a      	str	r2, [r3, #8]
			return;
    f932:	e006      	b.n	f942 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f934:	7bfb      	ldrb	r3, [r7, #15]
    f936:	3301      	adds	r3, #1
    f938:	73fb      	strb	r3, [r7, #15]
    f93a:	e7e3      	b.n	f904 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    f93c:	687b      	ldr	r3, [r7, #4]
    f93e:	4a03      	ldr	r2, [pc, #12]	; (f94c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f940:	609a      	str	r2, [r3, #8]

}
    f942:	3714      	adds	r7, #20
    f944:	46bd      	mov	sp, r7
    f946:	bc80      	pop	{r7}
    f948:	4770      	bx	lr
    f94a:	bf00      	nop
    f94c:	20001134 	.word	0x20001134

0000f950 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    f950:	b480      	push	{r7}
    f952:	b085      	sub	sp, #20
    f954:	af00      	add	r7, sp, #0
    f956:	6078      	str	r0, [r7, #4]
    f958:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f95a:	2300      	movs	r3, #0
    f95c:	73fb      	strb	r3, [r7, #15]
    f95e:	7bfb      	ldrb	r3, [r7, #15]
    f960:	2b03      	cmp	r3, #3
    f962:	dc19      	bgt.n	f998 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    f964:	7bfa      	ldrb	r2, [r7, #15]
    f966:	490e      	ldr	r1, [pc, #56]	; (f9a0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    f968:	4613      	mov	r3, r2
    f96a:	009b      	lsls	r3, r3, #2
    f96c:	4413      	add	r3, r2
    f96e:	009b      	lsls	r3, r3, #2
    f970:	440b      	add	r3, r1
    f972:	330c      	adds	r3, #12
    f974:	681a      	ldr	r2, [r3, #0]
    f976:	683b      	ldr	r3, [r7, #0]
    f978:	429a      	cmp	r2, r3
    f97a:	d109      	bne.n	f990 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    f97c:	7bfa      	ldrb	r2, [r7, #15]
    f97e:	4613      	mov	r3, r2
    f980:	009b      	lsls	r3, r3, #2
    f982:	4413      	add	r3, r2
    f984:	009b      	lsls	r3, r3, #2
    f986:	4a06      	ldr	r2, [pc, #24]	; (f9a0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    f988:	441a      	add	r2, r3
    f98a:	687b      	ldr	r3, [r7, #4]
    f98c:	609a      	str	r2, [r3, #8]
			return;
    f98e:	e003      	b.n	f998 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f990:	7bfb      	ldrb	r3, [r7, #15]
    f992:	3301      	adds	r3, #1
    f994:	73fb      	strb	r3, [r7, #15]
    f996:	e7e2      	b.n	f95e <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    f998:	3714      	adds	r7, #20
    f99a:	46bd      	mov	sp, r7
    f99c:	bc80      	pop	{r7}
    f99e:	4770      	bx	lr
    f9a0:	20001134 	.word	0x20001134

0000f9a4 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    f9a4:	b580      	push	{r7, lr}
    f9a6:	b082      	sub	sp, #8
    f9a8:	af00      	add	r7, sp, #0
    f9aa:	6078      	str	r0, [r7, #4]
    f9ac:	6039      	str	r1, [r7, #0]
    f9ae:	687b      	ldr	r3, [r7, #4]
    f9b0:	2b01      	cmp	r3, #1
    f9b2:	d116      	bne.n	f9e2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    f9b4:	683b      	ldr	r3, [r7, #0]
    f9b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f9ba:	4293      	cmp	r3, r2
    f9bc:	d111      	bne.n	f9e2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    f9be:	490b      	ldr	r1, [pc, #44]	; (f9ec <_Z41__static_initialization_and_destruction_0ii+0x48>)
    f9c0:	480b      	ldr	r0, [pc, #44]	; (f9f0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f9c2:	4b0c      	ldr	r3, [pc, #48]	; (f9f4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f9c4:	4798      	blx	r3
    f9c6:	4a0c      	ldr	r2, [pc, #48]	; (f9f8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f9c8:	490c      	ldr	r1, [pc, #48]	; (f9fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f9ca:	4809      	ldr	r0, [pc, #36]	; (f9f0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f9cc:	4b0c      	ldr	r3, [pc, #48]	; (fa00 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f9ce:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    f9d0:	490c      	ldr	r1, [pc, #48]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f9d2:	480d      	ldr	r0, [pc, #52]	; (fa08 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f9d4:	4b07      	ldr	r3, [pc, #28]	; (f9f4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f9d6:	4798      	blx	r3
    f9d8:	4a07      	ldr	r2, [pc, #28]	; (f9f8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f9da:	4908      	ldr	r1, [pc, #32]	; (f9fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f9dc:	480a      	ldr	r0, [pc, #40]	; (fa08 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f9de:	4b08      	ldr	r3, [pc, #32]	; (fa00 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f9e0:	4798      	blx	r3
    f9e2:	bf00      	nop
    f9e4:	3708      	adds	r7, #8
    f9e6:	46bd      	mov	sp, r7
    f9e8:	bd80      	pop	{r7, pc}
    f9ea:	bf00      	nop
    f9ec:	2000793c 	.word	0x2000793c
    f9f0:	20001184 	.word	0x20001184
    f9f4:	0000f6fd 	.word	0x0000f6fd
    f9f8:	20000000 	.word	0x20000000
    f9fc:	0000f739 	.word	0x0000f739
    fa00:	000104e9 	.word	0x000104e9
    fa04:	20007834 	.word	0x20007834
    fa08:	200011a4 	.word	0x200011a4

0000fa0c <_GLOBAL__sub_I_ptrTimerSerialClass>:
    fa0c:	b580      	push	{r7, lr}
    fa0e:	af00      	add	r7, sp, #0
    fa10:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fa14:	2001      	movs	r0, #1
    fa16:	4b01      	ldr	r3, [pc, #4]	; (fa1c <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    fa18:	4798      	blx	r3
    fa1a:	bd80      	pop	{r7, pc}
    fa1c:	0000f9a5 	.word	0x0000f9a5

0000fa20 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    fa20:	b480      	push	{r7}
    fa22:	b083      	sub	sp, #12
    fa24:	af00      	add	r7, sp, #0
    fa26:	6078      	str	r0, [r7, #4]
    return (void *)0;
    fa28:	2300      	movs	r3, #0
	}
    fa2a:	4618      	mov	r0, r3
    fa2c:	370c      	adds	r7, #12
    fa2e:	46bd      	mov	sp, r7
    fa30:	bc80      	pop	{r7}
    fa32:	4770      	bx	lr

0000fa34 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    fa34:	b480      	push	{r7}
    fa36:	af00      	add	r7, sp, #0
		}
    fa38:	bf00      	nop
    fa3a:	46bd      	mov	sp, r7
    fa3c:	bc80      	pop	{r7}
    fa3e:	4770      	bx	lr

0000fa40 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
    fa40:	4770      	bx	lr

0000fa42 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
    fa42:	4770      	bx	lr

0000fa44 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
    fa44:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
    fa46:	2302      	movs	r3, #2
    fa48:	4801      	ldr	r0, [pc, #4]	; (fa50 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
    fa4a:	4c02      	ldr	r4, [pc, #8]	; (fa54 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
    fa4c:	47a0      	blx	r4
	return	r;
}
    fa4e:	bd10      	pop	{r4, pc}
    fa50:	20007594 	.word	0x20007594
    fa54:	00010211 	.word	0x00010211

0000fa58 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
    fa58:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
    fa5a:	4b03      	ldr	r3, [pc, #12]	; (fa68 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
    fa5c:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
    fa5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    fa62:	4b02      	ldr	r3, [pc, #8]	; (fa6c <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
    fa64:	4798      	blx	r3
}
    fa66:	bd08      	pop	{r3, pc}
    fa68:	200011c4 	.word	0x200011c4
    fa6c:	0000fa45 	.word	0x0000fa45

0000fa70 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    fa70:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    fa72:	2302      	movs	r3, #2
    fa74:	4801      	ldr	r0, [pc, #4]	; (fa7c <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
    fa76:	4c02      	ldr	r4, [pc, #8]	; (fa80 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
    fa78:	47a0      	blx	r4
	return	w;
}
    fa7a:	bd10      	pop	{r4, pc}
    fa7c:	20007594 	.word	0x20007594
    fa80:	000101dd 	.word	0x000101dd

0000fa84 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    fa84:	b500      	push	{lr}
    fa86:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
    fa88:	4b07      	ldr	r3, [pc, #28]	; (faa8 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
    fa8a:	881b      	ldrh	r3, [r3, #0]
    fa8c:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    fa90:	4b06      	ldr	r3, [pc, #24]	; (faac <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
    fa92:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
    fa94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    fa98:	3202      	adds	r2, #2
    fa9a:	a901      	add	r1, sp, #4
    fa9c:	4b04      	ldr	r3, [pc, #16]	; (fab0 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
    fa9e:	4798      	blx	r3
	return	w;
}
    faa0:	b003      	add	sp, #12
    faa2:	f85d fb04 	ldr.w	pc, [sp], #4
    faa6:	bf00      	nop
    faa8:	00010fb8 	.word	0x00010fb8
    faac:	200011c4 	.word	0x200011c4
    fab0:	0000fa71 	.word	0x0000fa71

0000fab4 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
    fab4:	b510      	push	{r4, lr}
    fab6:	4604      	mov	r4, r0
    fab8:	30b8      	adds	r0, #184	; 0xb8
    faba:	4b03      	ldr	r3, [pc, #12]	; (fac8 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
    fabc:	4798      	blx	r3
    fabe:	4620      	mov	r0, r4
    fac0:	4b02      	ldr	r3, [pc, #8]	; (facc <_ZN17MemoryFlash_ClassD1Ev+0x18>)
    fac2:	4798      	blx	r3
{
} //~MemoryManagment_Class
    fac4:	4620      	mov	r0, r4
    fac6:	bd10      	pop	{r4, pc}
    fac8:	0000fba3 	.word	0x0000fba3
    facc:	0000fa43 	.word	0x0000fa43

0000fad0 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
    fad0:	b538      	push	{r3, r4, r5, lr}
    fad2:	4604      	mov	r4, r0
    fad4:	4b10      	ldr	r3, [pc, #64]	; (fb18 <_ZN17MemoryFlash_ClassC1Ev+0x48>)
    fad6:	4798      	blx	r3
    fad8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fadc:	4b0f      	ldr	r3, [pc, #60]	; (fb1c <_ZN17MemoryFlash_ClassC1Ev+0x4c>)
    fade:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    fae0:	f44f 7500 	mov.w	r5, #512	; 0x200
    fae4:	462a      	mov	r2, r5
    fae6:	2100      	movs	r1, #0
    fae8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    faec:	4b0c      	ldr	r3, [pc, #48]	; (fb20 <_ZN17MemoryFlash_ClassC1Ev+0x50>)
    faee:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
    faf0:	2300      	movs	r3, #0
    faf2:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
    faf6:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
    fafa:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
	_currentAddress=0;
    fafe:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	head=512;
    fb02:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	tail=0;
    fb06:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	flashBuffer=&flashBufferStatic[0];
    fb0a:	4a06      	ldr	r2, [pc, #24]	; (fb24 <_ZN17MemoryFlash_ClassC1Ev+0x54>)
    fb0c:	f245 33b4 	movw	r3, #21428	; 0x53b4
    fb10:	50e2      	str	r2, [r4, r3]
} //MemoryManagment_Class
    fb12:	4620      	mov	r0, r4
    fb14:	bd38      	pop	{r3, r4, r5, pc}
    fb16:	bf00      	nop
    fb18:	0000fa41 	.word	0x0000fa41
    fb1c:	0000fba1 	.word	0x0000fba1
    fb20:	000108fd 	.word	0x000108fd
    fb24:	200011c8 	.word	0x200011c8

0000fb28 <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
    fb28:	b538      	push	{r3, r4, r5, lr}
		if (qspiFlash.Init())
    fb2a:	480b      	ldr	r0, [pc, #44]	; (fb58 <_ZN17MemoryFlash_Class4InitEm+0x30>)
    fb2c:	4b0b      	ldr	r3, [pc, #44]	; (fb5c <_ZN17MemoryFlash_Class4InitEm+0x34>)
    fb2e:	4798      	blx	r3
    fb30:	b948      	cbnz	r0, fb46 <_ZN17MemoryFlash_Class4InitEm+0x1e>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
    fb32:	4d0b      	ldr	r5, [pc, #44]	; (fb60 <_ZN17MemoryFlash_Class4InitEm+0x38>)
    fb34:	490b      	ldr	r1, [pc, #44]	; (fb64 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
    fb36:	4628      	mov	r0, r5
    fb38:	4c0b      	ldr	r4, [pc, #44]	; (fb68 <_ZN17MemoryFlash_Class4InitEm+0x40>)
    fb3a:	47a0      	blx	r4
    fb3c:	490b      	ldr	r1, [pc, #44]	; (fb6c <_ZN17MemoryFlash_Class4InitEm+0x44>)
    fb3e:	4628      	mov	r0, r5
    fb40:	47a0      	blx	r4
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return true;
}
    fb42:	2001      	movs	r0, #1
    fb44:	bd38      	pop	{r3, r4, r5, pc}
    fb46:	4d06      	ldr	r5, [pc, #24]	; (fb60 <_ZN17MemoryFlash_Class4InitEm+0x38>)
    fb48:	4909      	ldr	r1, [pc, #36]	; (fb70 <_ZN17MemoryFlash_Class4InitEm+0x48>)
    fb4a:	4628      	mov	r0, r5
    fb4c:	4c06      	ldr	r4, [pc, #24]	; (fb68 <_ZN17MemoryFlash_Class4InitEm+0x40>)
    fb4e:	47a0      	blx	r4
    fb50:	4906      	ldr	r1, [pc, #24]	; (fb6c <_ZN17MemoryFlash_Class4InitEm+0x44>)
    fb52:	4628      	mov	r0, r5
    fb54:	47a0      	blx	r4
    fb56:	e7f4      	b.n	fb42 <_ZN17MemoryFlash_Class4InitEm+0x1a>
    fb58:	20007594 	.word	0x20007594
    fb5c:	00010141 	.word	0x00010141
    fb60:	200010cc 	.word	0x200010cc
    fb64:	0001106c 	.word	0x0001106c
    fb68:	0000f459 	.word	0x0000f459
    fb6c:	00011068 	.word	0x00011068
    fb70:	00011048 	.word	0x00011048

0000fb74 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
    fb74:	b510      	push	{r4, lr}
    fb76:	4c05      	ldr	r4, [pc, #20]	; (fb8c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x18>)
    fb78:	4620      	mov	r0, r4
    fb7a:	4b05      	ldr	r3, [pc, #20]	; (fb90 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x1c>)
    fb7c:	4798      	blx	r3
    fb7e:	4a05      	ldr	r2, [pc, #20]	; (fb94 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x20>)
    fb80:	4905      	ldr	r1, [pc, #20]	; (fb98 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x24>)
    fb82:	4620      	mov	r0, r4
    fb84:	4b05      	ldr	r3, [pc, #20]	; (fb9c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x28>)
    fb86:	4798      	blx	r3
    fb88:	bd10      	pop	{r4, pc}
    fb8a:	bf00      	nop
    fb8c:	200021c8 	.word	0x200021c8
    fb90:	0000fad1 	.word	0x0000fad1
    fb94:	20000000 	.word	0x20000000
    fb98:	0000fab5 	.word	0x0000fab5
    fb9c:	000104e9 	.word	0x000104e9

0000fba0 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
    fba0:	4770      	bx	lr

0000fba2 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
    fba2:	4770      	bx	lr

0000fba4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    fba4:	b580      	push	{r7, lr}
    fba6:	b084      	sub	sp, #16
    fba8:	af00      	add	r7, sp, #0
    fbaa:	60f8      	str	r0, [r7, #12]
    fbac:	60b9      	str	r1, [r7, #8]
    fbae:	4613      	mov	r3, r2
    fbb0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    fbb2:	68fb      	ldr	r3, [r7, #12]
    fbb4:	2b00      	cmp	r3, #0
    fbb6:	d004      	beq.n	fbc2 <io_write+0x1e>
    fbb8:	68bb      	ldr	r3, [r7, #8]
    fbba:	2b00      	cmp	r3, #0
    fbbc:	d001      	beq.n	fbc2 <io_write+0x1e>
    fbbe:	2301      	movs	r3, #1
    fbc0:	e000      	b.n	fbc4 <io_write+0x20>
    fbc2:	2300      	movs	r3, #0
    fbc4:	f003 0301 	and.w	r3, r3, #1
    fbc8:	b2db      	uxtb	r3, r3
    fbca:	2234      	movs	r2, #52	; 0x34
    fbcc:	4907      	ldr	r1, [pc, #28]	; (fbec <io_write+0x48>)
    fbce:	4618      	mov	r0, r3
    fbd0:	4b07      	ldr	r3, [pc, #28]	; (fbf0 <io_write+0x4c>)
    fbd2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    fbd4:	68fb      	ldr	r3, [r7, #12]
    fbd6:	681b      	ldr	r3, [r3, #0]
    fbd8:	88fa      	ldrh	r2, [r7, #6]
    fbda:	68b9      	ldr	r1, [r7, #8]
    fbdc:	68f8      	ldr	r0, [r7, #12]
    fbde:	4798      	blx	r3
    fbe0:	4603      	mov	r3, r0
}
    fbe2:	4618      	mov	r0, r3
    fbe4:	3710      	adds	r7, #16
    fbe6:	46bd      	mov	sp, r7
    fbe8:	bd80      	pop	{r7, pc}
    fbea:	bf00      	nop
    fbec:	0001108c 	.word	0x0001108c
    fbf0:	00004a95 	.word	0x00004a95

0000fbf4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    fbf4:	b580      	push	{r7, lr}
    fbf6:	b084      	sub	sp, #16
    fbf8:	af00      	add	r7, sp, #0
    fbfa:	60f8      	str	r0, [r7, #12]
    fbfc:	60b9      	str	r1, [r7, #8]
    fbfe:	4613      	mov	r3, r2
    fc00:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    fc02:	68fb      	ldr	r3, [r7, #12]
    fc04:	2b00      	cmp	r3, #0
    fc06:	d004      	beq.n	fc12 <io_read+0x1e>
    fc08:	68bb      	ldr	r3, [r7, #8]
    fc0a:	2b00      	cmp	r3, #0
    fc0c:	d001      	beq.n	fc12 <io_read+0x1e>
    fc0e:	2301      	movs	r3, #1
    fc10:	e000      	b.n	fc14 <io_read+0x20>
    fc12:	2300      	movs	r3, #0
    fc14:	f003 0301 	and.w	r3, r3, #1
    fc18:	b2db      	uxtb	r3, r3
    fc1a:	223d      	movs	r2, #61	; 0x3d
    fc1c:	4907      	ldr	r1, [pc, #28]	; (fc3c <io_read+0x48>)
    fc1e:	4618      	mov	r0, r3
    fc20:	4b07      	ldr	r3, [pc, #28]	; (fc40 <io_read+0x4c>)
    fc22:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    fc24:	68fb      	ldr	r3, [r7, #12]
    fc26:	685b      	ldr	r3, [r3, #4]
    fc28:	88fa      	ldrh	r2, [r7, #6]
    fc2a:	68b9      	ldr	r1, [r7, #8]
    fc2c:	68f8      	ldr	r0, [r7, #12]
    fc2e:	4798      	blx	r3
    fc30:	4603      	mov	r3, r0
}
    fc32:	4618      	mov	r0, r3
    fc34:	3710      	adds	r7, #16
    fc36:	46bd      	mov	sp, r7
    fc38:	bd80      	pop	{r7, pc}
    fc3a:	bf00      	nop
    fc3c:	0001108c 	.word	0x0001108c
    fc40:	00004a95 	.word	0x00004a95

0000fc44 <hri_port_set_DIR_reg>:
{
    fc44:	b480      	push	{r7}
    fc46:	b085      	sub	sp, #20
    fc48:	af00      	add	r7, sp, #0
    fc4a:	60f8      	str	r0, [r7, #12]
    fc4c:	460b      	mov	r3, r1
    fc4e:	607a      	str	r2, [r7, #4]
    fc50:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    fc52:	7afb      	ldrb	r3, [r7, #11]
    fc54:	68fa      	ldr	r2, [r7, #12]
    fc56:	01db      	lsls	r3, r3, #7
    fc58:	4413      	add	r3, r2
    fc5a:	3308      	adds	r3, #8
    fc5c:	687a      	ldr	r2, [r7, #4]
    fc5e:	601a      	str	r2, [r3, #0]
}
    fc60:	bf00      	nop
    fc62:	3714      	adds	r7, #20
    fc64:	46bd      	mov	sp, r7
    fc66:	bc80      	pop	{r7}
    fc68:	4770      	bx	lr

0000fc6a <hri_port_clear_DIR_reg>:
{
    fc6a:	b480      	push	{r7}
    fc6c:	b085      	sub	sp, #20
    fc6e:	af00      	add	r7, sp, #0
    fc70:	60f8      	str	r0, [r7, #12]
    fc72:	460b      	mov	r3, r1
    fc74:	607a      	str	r2, [r7, #4]
    fc76:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    fc78:	7afb      	ldrb	r3, [r7, #11]
    fc7a:	68fa      	ldr	r2, [r7, #12]
    fc7c:	01db      	lsls	r3, r3, #7
    fc7e:	4413      	add	r3, r2
    fc80:	3304      	adds	r3, #4
    fc82:	687a      	ldr	r2, [r7, #4]
    fc84:	601a      	str	r2, [r3, #0]
}
    fc86:	bf00      	nop
    fc88:	3714      	adds	r7, #20
    fc8a:	46bd      	mov	sp, r7
    fc8c:	bc80      	pop	{r7}
    fc8e:	4770      	bx	lr

0000fc90 <hri_port_set_OUT_reg>:
{
    fc90:	b480      	push	{r7}
    fc92:	b085      	sub	sp, #20
    fc94:	af00      	add	r7, sp, #0
    fc96:	60f8      	str	r0, [r7, #12]
    fc98:	460b      	mov	r3, r1
    fc9a:	607a      	str	r2, [r7, #4]
    fc9c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    fc9e:	7afb      	ldrb	r3, [r7, #11]
    fca0:	68fa      	ldr	r2, [r7, #12]
    fca2:	01db      	lsls	r3, r3, #7
    fca4:	4413      	add	r3, r2
    fca6:	3318      	adds	r3, #24
    fca8:	687a      	ldr	r2, [r7, #4]
    fcaa:	601a      	str	r2, [r3, #0]
}
    fcac:	bf00      	nop
    fcae:	3714      	adds	r7, #20
    fcb0:	46bd      	mov	sp, r7
    fcb2:	bc80      	pop	{r7}
    fcb4:	4770      	bx	lr

0000fcb6 <hri_port_clear_OUT_reg>:
{
    fcb6:	b480      	push	{r7}
    fcb8:	b085      	sub	sp, #20
    fcba:	af00      	add	r7, sp, #0
    fcbc:	60f8      	str	r0, [r7, #12]
    fcbe:	460b      	mov	r3, r1
    fcc0:	607a      	str	r2, [r7, #4]
    fcc2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    fcc4:	7afb      	ldrb	r3, [r7, #11]
    fcc6:	68fa      	ldr	r2, [r7, #12]
    fcc8:	01db      	lsls	r3, r3, #7
    fcca:	4413      	add	r3, r2
    fccc:	3314      	adds	r3, #20
    fcce:	687a      	ldr	r2, [r7, #4]
    fcd0:	601a      	str	r2, [r3, #0]
}
    fcd2:	bf00      	nop
    fcd4:	3714      	adds	r7, #20
    fcd6:	46bd      	mov	sp, r7
    fcd8:	bc80      	pop	{r7}
    fcda:	4770      	bx	lr

0000fcdc <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    fcdc:	b480      	push	{r7}
    fcde:	b085      	sub	sp, #20
    fce0:	af00      	add	r7, sp, #0
    fce2:	6078      	str	r0, [r7, #4]
    fce4:	4608      	mov	r0, r1
    fce6:	4611      	mov	r1, r2
    fce8:	461a      	mov	r2, r3
    fcea:	4603      	mov	r3, r0
    fcec:	70fb      	strb	r3, [r7, #3]
    fcee:	460b      	mov	r3, r1
    fcf0:	70bb      	strb	r3, [r7, #2]
    fcf2:	4613      	mov	r3, r2
    fcf4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    fcf6:	78fa      	ldrb	r2, [r7, #3]
    fcf8:	78bb      	ldrb	r3, [r7, #2]
    fcfa:	6879      	ldr	r1, [r7, #4]
    fcfc:	01d2      	lsls	r2, r2, #7
    fcfe:	440a      	add	r2, r1
    fd00:	4413      	add	r3, r2
    fd02:	3330      	adds	r3, #48	; 0x30
    fd04:	781b      	ldrb	r3, [r3, #0]
    fd06:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    fd08:	7bfb      	ldrb	r3, [r7, #15]
    fd0a:	f023 030f 	bic.w	r3, r3, #15
    fd0e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    fd10:	787b      	ldrb	r3, [r7, #1]
    fd12:	f003 030f 	and.w	r3, r3, #15
    fd16:	b2da      	uxtb	r2, r3
    fd18:	7bfb      	ldrb	r3, [r7, #15]
    fd1a:	4313      	orrs	r3, r2
    fd1c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    fd1e:	78fa      	ldrb	r2, [r7, #3]
    fd20:	78bb      	ldrb	r3, [r7, #2]
    fd22:	6879      	ldr	r1, [r7, #4]
    fd24:	01d2      	lsls	r2, r2, #7
    fd26:	440a      	add	r2, r1
    fd28:	4413      	add	r3, r2
    fd2a:	3330      	adds	r3, #48	; 0x30
    fd2c:	7bfa      	ldrb	r2, [r7, #15]
    fd2e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fd30:	bf00      	nop
    fd32:	3714      	adds	r7, #20
    fd34:	46bd      	mov	sp, r7
    fd36:	bc80      	pop	{r7}
    fd38:	4770      	bx	lr

0000fd3a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    fd3a:	b480      	push	{r7}
    fd3c:	b085      	sub	sp, #20
    fd3e:	af00      	add	r7, sp, #0
    fd40:	6078      	str	r0, [r7, #4]
    fd42:	4608      	mov	r0, r1
    fd44:	4611      	mov	r1, r2
    fd46:	461a      	mov	r2, r3
    fd48:	4603      	mov	r3, r0
    fd4a:	70fb      	strb	r3, [r7, #3]
    fd4c:	460b      	mov	r3, r1
    fd4e:	70bb      	strb	r3, [r7, #2]
    fd50:	4613      	mov	r3, r2
    fd52:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    fd54:	78fa      	ldrb	r2, [r7, #3]
    fd56:	78bb      	ldrb	r3, [r7, #2]
    fd58:	6879      	ldr	r1, [r7, #4]
    fd5a:	01d2      	lsls	r2, r2, #7
    fd5c:	440a      	add	r2, r1
    fd5e:	4413      	add	r3, r2
    fd60:	3330      	adds	r3, #48	; 0x30
    fd62:	781b      	ldrb	r3, [r3, #0]
    fd64:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    fd66:	7bfb      	ldrb	r3, [r7, #15]
    fd68:	f003 030f 	and.w	r3, r3, #15
    fd6c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    fd6e:	787b      	ldrb	r3, [r7, #1]
    fd70:	011b      	lsls	r3, r3, #4
    fd72:	b2da      	uxtb	r2, r3
    fd74:	7bfb      	ldrb	r3, [r7, #15]
    fd76:	4313      	orrs	r3, r2
    fd78:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    fd7a:	78fa      	ldrb	r2, [r7, #3]
    fd7c:	78bb      	ldrb	r3, [r7, #2]
    fd7e:	6879      	ldr	r1, [r7, #4]
    fd80:	01d2      	lsls	r2, r2, #7
    fd82:	440a      	add	r2, r1
    fd84:	4413      	add	r3, r2
    fd86:	3330      	adds	r3, #48	; 0x30
    fd88:	7bfa      	ldrb	r2, [r7, #15]
    fd8a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fd8c:	bf00      	nop
    fd8e:	3714      	adds	r7, #20
    fd90:	46bd      	mov	sp, r7
    fd92:	bc80      	pop	{r7}
    fd94:	4770      	bx	lr

0000fd96 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    fd96:	b480      	push	{r7}
    fd98:	b085      	sub	sp, #20
    fd9a:	af00      	add	r7, sp, #0
    fd9c:	6078      	str	r0, [r7, #4]
    fd9e:	4608      	mov	r0, r1
    fda0:	4611      	mov	r1, r2
    fda2:	461a      	mov	r2, r3
    fda4:	4603      	mov	r3, r0
    fda6:	70fb      	strb	r3, [r7, #3]
    fda8:	460b      	mov	r3, r1
    fdaa:	70bb      	strb	r3, [r7, #2]
    fdac:	4613      	mov	r3, r2
    fdae:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fdb0:	78fa      	ldrb	r2, [r7, #3]
    fdb2:	78bb      	ldrb	r3, [r7, #2]
    fdb4:	6879      	ldr	r1, [r7, #4]
    fdb6:	01d2      	lsls	r2, r2, #7
    fdb8:	440a      	add	r2, r1
    fdba:	4413      	add	r3, r2
    fdbc:	3340      	adds	r3, #64	; 0x40
    fdbe:	781b      	ldrb	r3, [r3, #0]
    fdc0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    fdc2:	7bfb      	ldrb	r3, [r7, #15]
    fdc4:	f023 0301 	bic.w	r3, r3, #1
    fdc8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    fdca:	787a      	ldrb	r2, [r7, #1]
    fdcc:	7bfb      	ldrb	r3, [r7, #15]
    fdce:	4313      	orrs	r3, r2
    fdd0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fdd2:	78fa      	ldrb	r2, [r7, #3]
    fdd4:	78bb      	ldrb	r3, [r7, #2]
    fdd6:	6879      	ldr	r1, [r7, #4]
    fdd8:	01d2      	lsls	r2, r2, #7
    fdda:	440a      	add	r2, r1
    fddc:	4413      	add	r3, r2
    fdde:	3340      	adds	r3, #64	; 0x40
    fde0:	7bfa      	ldrb	r2, [r7, #15]
    fde2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fde4:	bf00      	nop
    fde6:	3714      	adds	r7, #20
    fde8:	46bd      	mov	sp, r7
    fdea:	bc80      	pop	{r7}
    fdec:	4770      	bx	lr

0000fdee <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    fdee:	b480      	push	{r7}
    fdf0:	b085      	sub	sp, #20
    fdf2:	af00      	add	r7, sp, #0
    fdf4:	60f8      	str	r0, [r7, #12]
    fdf6:	460b      	mov	r3, r1
    fdf8:	607a      	str	r2, [r7, #4]
    fdfa:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    fdfc:	7afb      	ldrb	r3, [r7, #11]
    fdfe:	68fa      	ldr	r2, [r7, #12]
    fe00:	01db      	lsls	r3, r3, #7
    fe02:	4413      	add	r3, r2
    fe04:	3328      	adds	r3, #40	; 0x28
    fe06:	687a      	ldr	r2, [r7, #4]
    fe08:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fe0a:	bf00      	nop
    fe0c:	3714      	adds	r7, #20
    fe0e:	46bd      	mov	sp, r7
    fe10:	bc80      	pop	{r7}
    fe12:	4770      	bx	lr

0000fe14 <_gpio_set_direction>:
{
    fe14:	b580      	push	{r7, lr}
    fe16:	b082      	sub	sp, #8
    fe18:	af00      	add	r7, sp, #0
    fe1a:	4603      	mov	r3, r0
    fe1c:	6039      	str	r1, [r7, #0]
    fe1e:	71fb      	strb	r3, [r7, #7]
    fe20:	4613      	mov	r3, r2
    fe22:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    fe24:	79bb      	ldrb	r3, [r7, #6]
    fe26:	2b01      	cmp	r3, #1
    fe28:	d01c      	beq.n	fe64 <_gpio_set_direction+0x50>
    fe2a:	2b02      	cmp	r3, #2
    fe2c:	d037      	beq.n	fe9e <_gpio_set_direction+0x8a>
    fe2e:	2b00      	cmp	r3, #0
    fe30:	d14e      	bne.n	fed0 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    fe32:	79fb      	ldrb	r3, [r7, #7]
    fe34:	683a      	ldr	r2, [r7, #0]
    fe36:	4619      	mov	r1, r3
    fe38:	482a      	ldr	r0, [pc, #168]	; (fee4 <_gpio_set_direction+0xd0>)
    fe3a:	4b2b      	ldr	r3, [pc, #172]	; (fee8 <_gpio_set_direction+0xd4>)
    fe3c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    fe3e:	683b      	ldr	r3, [r7, #0]
    fe40:	b29b      	uxth	r3, r3
    fe42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    fe46:	79fb      	ldrb	r3, [r7, #7]
    fe48:	4619      	mov	r1, r3
    fe4a:	4826      	ldr	r0, [pc, #152]	; (fee4 <_gpio_set_direction+0xd0>)
    fe4c:	4b27      	ldr	r3, [pc, #156]	; (feec <_gpio_set_direction+0xd8>)
    fe4e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fe50:	683b      	ldr	r3, [r7, #0]
    fe52:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    fe54:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fe58:	79fb      	ldrb	r3, [r7, #7]
    fe5a:	4619      	mov	r1, r3
    fe5c:	4821      	ldr	r0, [pc, #132]	; (fee4 <_gpio_set_direction+0xd0>)
    fe5e:	4b23      	ldr	r3, [pc, #140]	; (feec <_gpio_set_direction+0xd8>)
    fe60:	4798      	blx	r3
		break;
    fe62:	e03a      	b.n	feda <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    fe64:	79fb      	ldrb	r3, [r7, #7]
    fe66:	683a      	ldr	r2, [r7, #0]
    fe68:	4619      	mov	r1, r3
    fe6a:	481e      	ldr	r0, [pc, #120]	; (fee4 <_gpio_set_direction+0xd0>)
    fe6c:	4b1e      	ldr	r3, [pc, #120]	; (fee8 <_gpio_set_direction+0xd4>)
    fe6e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    fe70:	683b      	ldr	r3, [r7, #0]
    fe72:	b29b      	uxth	r3, r3
    fe74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    fe78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    fe7c:	79f9      	ldrb	r1, [r7, #7]
    fe7e:	461a      	mov	r2, r3
    fe80:	4818      	ldr	r0, [pc, #96]	; (fee4 <_gpio_set_direction+0xd0>)
    fe82:	4b1a      	ldr	r3, [pc, #104]	; (feec <_gpio_set_direction+0xd8>)
    fe84:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    fe86:	683b      	ldr	r3, [r7, #0]
    fe88:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    fe8a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    fe8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
    fe92:	79f9      	ldrb	r1, [r7, #7]
    fe94:	461a      	mov	r2, r3
    fe96:	4813      	ldr	r0, [pc, #76]	; (fee4 <_gpio_set_direction+0xd0>)
    fe98:	4b14      	ldr	r3, [pc, #80]	; (feec <_gpio_set_direction+0xd8>)
    fe9a:	4798      	blx	r3
		break;
    fe9c:	e01d      	b.n	feda <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    fe9e:	79fb      	ldrb	r3, [r7, #7]
    fea0:	683a      	ldr	r2, [r7, #0]
    fea2:	4619      	mov	r1, r3
    fea4:	480f      	ldr	r0, [pc, #60]	; (fee4 <_gpio_set_direction+0xd0>)
    fea6:	4b12      	ldr	r3, [pc, #72]	; (fef0 <_gpio_set_direction+0xdc>)
    fea8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    feaa:	683b      	ldr	r3, [r7, #0]
    feac:	b29b      	uxth	r3, r3
    feae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    feb2:	79fb      	ldrb	r3, [r7, #7]
    feb4:	4619      	mov	r1, r3
    feb6:	480b      	ldr	r0, [pc, #44]	; (fee4 <_gpio_set_direction+0xd0>)
    feb8:	4b0c      	ldr	r3, [pc, #48]	; (feec <_gpio_set_direction+0xd8>)
    feba:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    febc:	683b      	ldr	r3, [r7, #0]
    febe:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    fec0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fec4:	79fb      	ldrb	r3, [r7, #7]
    fec6:	4619      	mov	r1, r3
    fec8:	4806      	ldr	r0, [pc, #24]	; (fee4 <_gpio_set_direction+0xd0>)
    feca:	4b08      	ldr	r3, [pc, #32]	; (feec <_gpio_set_direction+0xd8>)
    fecc:	4798      	blx	r3
		break;
    fece:	e004      	b.n	feda <_gpio_set_direction+0xc6>
		ASSERT(false);
    fed0:	2246      	movs	r2, #70	; 0x46
    fed2:	4908      	ldr	r1, [pc, #32]	; (fef4 <_gpio_set_direction+0xe0>)
    fed4:	2000      	movs	r0, #0
    fed6:	4b08      	ldr	r3, [pc, #32]	; (fef8 <_gpio_set_direction+0xe4>)
    fed8:	4798      	blx	r3
}
    feda:	bf00      	nop
    fedc:	3708      	adds	r7, #8
    fede:	46bd      	mov	sp, r7
    fee0:	bd80      	pop	{r7, pc}
    fee2:	bf00      	nop
    fee4:	41008000 	.word	0x41008000
    fee8:	0000fc6b 	.word	0x0000fc6b
    feec:	0000fdef 	.word	0x0000fdef
    fef0:	0000fc45 	.word	0x0000fc45
    fef4:	000110a0 	.word	0x000110a0
    fef8:	00004a95 	.word	0x00004a95

0000fefc <_gpio_set_level>:
{
    fefc:	b580      	push	{r7, lr}
    fefe:	b082      	sub	sp, #8
    ff00:	af00      	add	r7, sp, #0
    ff02:	4603      	mov	r3, r0
    ff04:	6039      	str	r1, [r7, #0]
    ff06:	71fb      	strb	r3, [r7, #7]
    ff08:	4613      	mov	r3, r2
    ff0a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ff0c:	79bb      	ldrb	r3, [r7, #6]
    ff0e:	2b00      	cmp	r3, #0
    ff10:	d006      	beq.n	ff20 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ff12:	79fb      	ldrb	r3, [r7, #7]
    ff14:	683a      	ldr	r2, [r7, #0]
    ff16:	4619      	mov	r1, r3
    ff18:	4806      	ldr	r0, [pc, #24]	; (ff34 <_gpio_set_level+0x38>)
    ff1a:	4b07      	ldr	r3, [pc, #28]	; (ff38 <_gpio_set_level+0x3c>)
    ff1c:	4798      	blx	r3
}
    ff1e:	e005      	b.n	ff2c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ff20:	79fb      	ldrb	r3, [r7, #7]
    ff22:	683a      	ldr	r2, [r7, #0]
    ff24:	4619      	mov	r1, r3
    ff26:	4803      	ldr	r0, [pc, #12]	; (ff34 <_gpio_set_level+0x38>)
    ff28:	4b04      	ldr	r3, [pc, #16]	; (ff3c <_gpio_set_level+0x40>)
    ff2a:	4798      	blx	r3
}
    ff2c:	bf00      	nop
    ff2e:	3708      	adds	r7, #8
    ff30:	46bd      	mov	sp, r7
    ff32:	bd80      	pop	{r7, pc}
    ff34:	41008000 	.word	0x41008000
    ff38:	0000fc91 	.word	0x0000fc91
    ff3c:	0000fcb7 	.word	0x0000fcb7

0000ff40 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    ff40:	b590      	push	{r4, r7, lr}
    ff42:	b085      	sub	sp, #20
    ff44:	af00      	add	r7, sp, #0
    ff46:	6078      	str	r0, [r7, #4]
    ff48:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    ff4a:	687b      	ldr	r3, [r7, #4]
    ff4c:	095b      	lsrs	r3, r3, #5
    ff4e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    ff50:	687b      	ldr	r3, [r7, #4]
    ff52:	b2db      	uxtb	r3, r3
    ff54:	f003 031f 	and.w	r3, r3, #31
    ff58:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    ff5a:	683b      	ldr	r3, [r7, #0]
    ff5c:	f1b3 3fff 	cmp.w	r3, #4294967295
    ff60:	d106      	bne.n	ff70 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    ff62:	7bba      	ldrb	r2, [r7, #14]
    ff64:	7bf9      	ldrb	r1, [r7, #15]
    ff66:	2300      	movs	r3, #0
    ff68:	4812      	ldr	r0, [pc, #72]	; (ffb4 <_gpio_set_pin_function+0x74>)
    ff6a:	4c13      	ldr	r4, [pc, #76]	; (ffb8 <_gpio_set_pin_function+0x78>)
    ff6c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    ff6e:	e01d      	b.n	ffac <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    ff70:	7bba      	ldrb	r2, [r7, #14]
    ff72:	7bf9      	ldrb	r1, [r7, #15]
    ff74:	2301      	movs	r3, #1
    ff76:	480f      	ldr	r0, [pc, #60]	; (ffb4 <_gpio_set_pin_function+0x74>)
    ff78:	4c0f      	ldr	r4, [pc, #60]	; (ffb8 <_gpio_set_pin_function+0x78>)
    ff7a:	47a0      	blx	r4
		if (pin & 1) {
    ff7c:	7bbb      	ldrb	r3, [r7, #14]
    ff7e:	f003 0301 	and.w	r3, r3, #1
    ff82:	2b00      	cmp	r3, #0
    ff84:	d009      	beq.n	ff9a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    ff86:	7bbb      	ldrb	r3, [r7, #14]
    ff88:	105b      	asrs	r3, r3, #1
    ff8a:	b2da      	uxtb	r2, r3
    ff8c:	683b      	ldr	r3, [r7, #0]
    ff8e:	b2db      	uxtb	r3, r3
    ff90:	7bf9      	ldrb	r1, [r7, #15]
    ff92:	4808      	ldr	r0, [pc, #32]	; (ffb4 <_gpio_set_pin_function+0x74>)
    ff94:	4c09      	ldr	r4, [pc, #36]	; (ffbc <_gpio_set_pin_function+0x7c>)
    ff96:	47a0      	blx	r4
}
    ff98:	e008      	b.n	ffac <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    ff9a:	7bbb      	ldrb	r3, [r7, #14]
    ff9c:	105b      	asrs	r3, r3, #1
    ff9e:	b2da      	uxtb	r2, r3
    ffa0:	683b      	ldr	r3, [r7, #0]
    ffa2:	b2db      	uxtb	r3, r3
    ffa4:	7bf9      	ldrb	r1, [r7, #15]
    ffa6:	4803      	ldr	r0, [pc, #12]	; (ffb4 <_gpio_set_pin_function+0x74>)
    ffa8:	4c05      	ldr	r4, [pc, #20]	; (ffc0 <_gpio_set_pin_function+0x80>)
    ffaa:	47a0      	blx	r4
}
    ffac:	bf00      	nop
    ffae:	3714      	adds	r7, #20
    ffb0:	46bd      	mov	sp, r7
    ffb2:	bd90      	pop	{r4, r7, pc}
    ffb4:	41008000 	.word	0x41008000
    ffb8:	0000fd97 	.word	0x0000fd97
    ffbc:	0000fd3b 	.word	0x0000fd3b
    ffc0:	0000fcdd 	.word	0x0000fcdd

0000ffc4 <gpio_set_pin_function>:
{
    ffc4:	b580      	push	{r7, lr}
    ffc6:	b082      	sub	sp, #8
    ffc8:	af00      	add	r7, sp, #0
    ffca:	6078      	str	r0, [r7, #4]
    ffcc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    ffce:	6839      	ldr	r1, [r7, #0]
    ffd0:	6878      	ldr	r0, [r7, #4]
    ffd2:	4b03      	ldr	r3, [pc, #12]	; (ffe0 <gpio_set_pin_function+0x1c>)
    ffd4:	4798      	blx	r3
}
    ffd6:	bf00      	nop
    ffd8:	3708      	adds	r7, #8
    ffda:	46bd      	mov	sp, r7
    ffdc:	bd80      	pop	{r7, pc}
    ffde:	bf00      	nop
    ffe0:	0000ff41 	.word	0x0000ff41

0000ffe4 <gpio_set_pin_direction>:
{
    ffe4:	b580      	push	{r7, lr}
    ffe6:	b082      	sub	sp, #8
    ffe8:	af00      	add	r7, sp, #0
    ffea:	4603      	mov	r3, r0
    ffec:	460a      	mov	r2, r1
    ffee:	71fb      	strb	r3, [r7, #7]
    fff0:	4613      	mov	r3, r2
    fff2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    fff4:	79fb      	ldrb	r3, [r7, #7]
    fff6:	115b      	asrs	r3, r3, #5
    fff8:	b2d8      	uxtb	r0, r3
    fffa:	79fb      	ldrb	r3, [r7, #7]
    fffc:	f003 031f 	and.w	r3, r3, #31
   10000:	2201      	movs	r2, #1
   10002:	fa02 f303 	lsl.w	r3, r2, r3
   10006:	79ba      	ldrb	r2, [r7, #6]
   10008:	4619      	mov	r1, r3
   1000a:	4b03      	ldr	r3, [pc, #12]	; (10018 <STACK_SIZE+0x18>)
   1000c:	4798      	blx	r3
}
   1000e:	bf00      	nop
   10010:	3708      	adds	r7, #8
   10012:	46bd      	mov	sp, r7
   10014:	bd80      	pop	{r7, pc}
   10016:	bf00      	nop
   10018:	0000fe15 	.word	0x0000fe15

0001001c <gpio_set_pin_level>:
{
   1001c:	b580      	push	{r7, lr}
   1001e:	b082      	sub	sp, #8
   10020:	af00      	add	r7, sp, #0
   10022:	4603      	mov	r3, r0
   10024:	460a      	mov	r2, r1
   10026:	71fb      	strb	r3, [r7, #7]
   10028:	4613      	mov	r3, r2
   1002a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   1002c:	79fb      	ldrb	r3, [r7, #7]
   1002e:	115b      	asrs	r3, r3, #5
   10030:	b2d8      	uxtb	r0, r3
   10032:	79fb      	ldrb	r3, [r7, #7]
   10034:	f003 031f 	and.w	r3, r3, #31
   10038:	2201      	movs	r2, #1
   1003a:	fa02 f303 	lsl.w	r3, r2, r3
   1003e:	79ba      	ldrb	r2, [r7, #6]
   10040:	4619      	mov	r1, r3
   10042:	4b03      	ldr	r3, [pc, #12]	; (10050 <gpio_set_pin_level+0x34>)
   10044:	4798      	blx	r3
}
   10046:	bf00      	nop
   10048:	3708      	adds	r7, #8
   1004a:	46bd      	mov	sp, r7
   1004c:	bd80      	pop	{r7, pc}
   1004e:	bf00      	nop
   10050:	0000fefd 	.word	0x0000fefd

00010054 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   10054:	b580      	push	{r7, lr}
   10056:	b082      	sub	sp, #8
   10058:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   1005a:	2100      	movs	r1, #0
   1005c:	2008      	movs	r0, #8
   1005e:	4b24      	ldr	r3, [pc, #144]	; (100f0 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   10060:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   10062:	2100      	movs	r1, #0
   10064:	202b      	movs	r0, #43	; 0x2b
   10066:	4b22      	ldr	r3, [pc, #136]	; (100f0 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   10068:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   1006a:	2100      	movs	r1, #0
   1006c:	202a      	movs	r0, #42	; 0x2a
   1006e:	4b20      	ldr	r3, [pc, #128]	; (100f0 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   10070:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   10072:	2102      	movs	r1, #2
   10074:	2008      	movs	r0, #8
   10076:	4b1f      	ldr	r3, [pc, #124]	; (100f4 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   10078:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   1007a:	2102      	movs	r1, #2
   1007c:	202b      	movs	r0, #43	; 0x2b
   1007e:	4b1d      	ldr	r3, [pc, #116]	; (100f4 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   10080:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   10082:	2102      	movs	r1, #2
   10084:	202a      	movs	r0, #42	; 0x2a
   10086:	4b1b      	ldr	r3, [pc, #108]	; (100f4 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   10088:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   1008a:	2101      	movs	r1, #1
   1008c:	2008      	movs	r0, #8
   1008e:	4b1a      	ldr	r3, [pc, #104]	; (100f8 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10090:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   10092:	2100      	movs	r1, #0
   10094:	202b      	movs	r0, #43	; 0x2b
   10096:	4b18      	ldr	r3, [pc, #96]	; (100f8 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10098:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   1009a:	2100      	movs	r1, #0
   1009c:	202a      	movs	r0, #42	; 0x2a
   1009e:	4b16      	ldr	r3, [pc, #88]	; (100f8 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   100a0:	4798      	blx	r3

	delay_us(1);
   100a2:	2001      	movs	r0, #1
   100a4:	4b15      	ldr	r3, [pc, #84]	; (100fc <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   100a6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   100a8:	2300      	movs	r3, #0
   100aa:	607b      	str	r3, [r7, #4]
   100ac:	687b      	ldr	r3, [r7, #4]
   100ae:	2b06      	cmp	r3, #6
   100b0:	dc11      	bgt.n	100d6 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   100b2:	2101      	movs	r1, #1
   100b4:	202a      	movs	r0, #42	; 0x2a
   100b6:	4b10      	ldr	r3, [pc, #64]	; (100f8 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   100b8:	4798      	blx	r3
		delay_us(1);
   100ba:	2001      	movs	r0, #1
   100bc:	4b0f      	ldr	r3, [pc, #60]	; (100fc <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   100be:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   100c0:	2100      	movs	r1, #0
   100c2:	202a      	movs	r0, #42	; 0x2a
   100c4:	4b0c      	ldr	r3, [pc, #48]	; (100f8 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   100c6:	4798      	blx	r3
		delay_us(1);
   100c8:	2001      	movs	r0, #1
   100ca:	4b0c      	ldr	r3, [pc, #48]	; (100fc <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   100cc:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   100ce:	687b      	ldr	r3, [r7, #4]
   100d0:	3301      	adds	r3, #1
   100d2:	607b      	str	r3, [r7, #4]
   100d4:	e7ea      	b.n	100ac <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   100d6:	2101      	movs	r1, #1
   100d8:	202b      	movs	r0, #43	; 0x2b
   100da:	4b07      	ldr	r3, [pc, #28]	; (100f8 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   100dc:	4798      	blx	r3
	delay_us(1);
   100de:	2001      	movs	r0, #1
   100e0:	4b06      	ldr	r3, [pc, #24]	; (100fc <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   100e2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   100e4:	4b06      	ldr	r3, [pc, #24]	; (10100 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   100e6:	4798      	blx	r3
}
   100e8:	bf00      	nop
   100ea:	3708      	adds	r7, #8
   100ec:	46bd      	mov	sp, r7
   100ee:	bd80      	pop	{r7, pc}
   100f0:	0000ffc5 	.word	0x0000ffc5
   100f4:	0000ffe5 	.word	0x0000ffe5
   100f8:	0001001d 	.word	0x0001001d
   100fc:	00003491 	.word	0x00003491
   10100:	00002801 	.word	0x00002801

00010104 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   10104:	b480      	push	{r7}
   10106:	b083      	sub	sp, #12
   10108:	af00      	add	r7, sp, #0
   1010a:	6078      	str	r0, [r7, #4]
   1010c:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   1010e:	687b      	ldr	r3, [r7, #4]
   10110:	683a      	ldr	r2, [r7, #0]
   10112:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   10114:	687b      	ldr	r3, [r7, #4]
   10116:	4a04      	ldr	r2, [pc, #16]	; (10128 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   10118:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   1011c:	687b      	ldr	r3, [r7, #4]
   1011e:	4618      	mov	r0, r3
   10120:	370c      	adds	r7, #12
   10122:	46bd      	mov	sp, r7
   10124:	bc80      	pop	{r7}
   10126:	4770      	bx	lr
   10128:	001fff00 	.word	0x001fff00

0001012c <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   1012c:	b480      	push	{r7}
   1012e:	b083      	sub	sp, #12
   10130:	af00      	add	r7, sp, #0
   10132:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   10134:	687b      	ldr	r3, [r7, #4]
   10136:	4618      	mov	r0, r3
   10138:	370c      	adds	r7, #12
   1013a:	46bd      	mov	sp, r7
   1013c:	bc80      	pop	{r7}
   1013e:	4770      	bx	lr

00010140 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   10140:	b580      	push	{r7, lr}
   10142:	b082      	sub	sp, #8
   10144:	af00      	add	r7, sp, #0
   10146:	6078      	str	r0, [r7, #4]
	xferDone=false;
   10148:	687b      	ldr	r3, [r7, #4]
   1014a:	2200      	movs	r2, #0
   1014c:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   1014e:	6878      	ldr	r0, [r7, #4]
   10150:	4b04      	ldr	r3, [pc, #16]	; (10164 <_ZN13N25Q256_Class4InitEv+0x24>)
   10152:	4798      	blx	r3
	return SelfTest();
   10154:	6878      	ldr	r0, [r7, #4]
   10156:	4b04      	ldr	r3, [pc, #16]	; (10168 <_ZN13N25Q256_Class4InitEv+0x28>)
   10158:	4798      	blx	r3
   1015a:	4603      	mov	r3, r0
}
   1015c:	4618      	mov	r0, r3
   1015e:	3708      	adds	r7, #8
   10160:	46bd      	mov	sp, r7
   10162:	bd80      	pop	{r7, pc}
   10164:	0001016d 	.word	0x0001016d
   10168:	00010309 	.word	0x00010309

0001016c <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   1016c:	b590      	push	{r4, r7, lr}
   1016e:	b083      	sub	sp, #12
   10170:	af00      	add	r7, sp, #0
   10172:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   10174:	687b      	ldr	r3, [r7, #4]
   10176:	685b      	ldr	r3, [r3, #4]
   10178:	4618      	mov	r0, r3
   1017a:	4b08      	ldr	r3, [pc, #32]	; (1019c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   1017c:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   1017e:	687b      	ldr	r3, [r7, #4]
   10180:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   10182:	2300      	movs	r3, #0
   10184:	4a06      	ldr	r2, [pc, #24]	; (101a0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   10186:	4807      	ldr	r0, [pc, #28]	; (101a4 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   10188:	4c07      	ldr	r4, [pc, #28]	; (101a8 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   1018a:	47a0      	blx	r4
   1018c:	4602      	mov	r2, r0
   1018e:	687b      	ldr	r3, [r7, #4]
   10190:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   10194:	bf00      	nop
   10196:	370c      	adds	r7, #12
   10198:	46bd      	mov	sp, r7
   1019a:	bd90      	pop	{r4, r7, pc}
   1019c:	000039fd 	.word	0x000039fd
   101a0:	00010055 	.word	0x00010055
   101a4:	20007584 	.word	0x20007584
   101a8:	0000c925 	.word	0x0000c925

000101ac <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   101ac:	b580      	push	{r7, lr}
   101ae:	b084      	sub	sp, #16
   101b0:	af00      	add	r7, sp, #0
   101b2:	6078      	str	r0, [r7, #4]
   101b4:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   101b6:	687b      	ldr	r3, [r7, #4]
   101b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   101bc:	685b      	ldr	r3, [r3, #4]
   101be:	689b      	ldr	r3, [r3, #8]
   101c0:	687a      	ldr	r2, [r7, #4]
   101c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   101c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   101ca:	6839      	ldr	r1, [r7, #0]
   101cc:	4798      	blx	r3
   101ce:	4603      	mov	r3, r0
   101d0:	60fb      	str	r3, [r7, #12]
	return	e;
   101d2:	68fb      	ldr	r3, [r7, #12]
}
   101d4:	4618      	mov	r0, r3
   101d6:	3710      	adds	r7, #16
   101d8:	46bd      	mov	sp, r7
   101da:	bd80      	pop	{r7, pc}

000101dc <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   101dc:	b590      	push	{r4, r7, lr}
   101de:	b087      	sub	sp, #28
   101e0:	af00      	add	r7, sp, #0
   101e2:	60f8      	str	r0, [r7, #12]
   101e4:	60b9      	str	r1, [r7, #8]
   101e6:	607a      	str	r2, [r7, #4]
   101e8:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   101ea:	68fb      	ldr	r3, [r7, #12]
   101ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   101f0:	685b      	ldr	r3, [r3, #4]
   101f2:	685c      	ldr	r4, [r3, #4]
   101f4:	68fb      	ldr	r3, [r7, #12]
   101f6:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   101fa:	683b      	ldr	r3, [r7, #0]
   101fc:	687a      	ldr	r2, [r7, #4]
   101fe:	68b9      	ldr	r1, [r7, #8]
   10200:	47a0      	blx	r4
   10202:	4603      	mov	r3, r0
   10204:	617b      	str	r3, [r7, #20]
	return	w;
   10206:	697b      	ldr	r3, [r7, #20]
}
   10208:	4618      	mov	r0, r3
   1020a:	371c      	adds	r7, #28
   1020c:	46bd      	mov	sp, r7
   1020e:	bd90      	pop	{r4, r7, pc}

00010210 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   10210:	b590      	push	{r4, r7, lr}
   10212:	b087      	sub	sp, #28
   10214:	af00      	add	r7, sp, #0
   10216:	60f8      	str	r0, [r7, #12]
   10218:	60b9      	str	r1, [r7, #8]
   1021a:	607a      	str	r2, [r7, #4]
   1021c:	603b      	str	r3, [r7, #0]
	xferDone=false;
   1021e:	68fb      	ldr	r3, [r7, #12]
   10220:	2200      	movs	r2, #0
   10222:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   10224:	68fb      	ldr	r3, [r7, #12]
   10226:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1022a:	685b      	ldr	r3, [r3, #4]
   1022c:	681c      	ldr	r4, [r3, #0]
   1022e:	68fb      	ldr	r3, [r7, #12]
   10230:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   10234:	683b      	ldr	r3, [r7, #0]
   10236:	687a      	ldr	r2, [r7, #4]
   10238:	68b9      	ldr	r1, [r7, #8]
   1023a:	47a0      	blx	r4
   1023c:	4603      	mov	r3, r0
   1023e:	617b      	str	r3, [r7, #20]
	return	r;
   10240:	697b      	ldr	r3, [r7, #20]
}
   10242:	4618      	mov	r0, r3
   10244:	371c      	adds	r7, #28
   10246:	46bd      	mov	sp, r7
   10248:	bd90      	pop	{r4, r7, pc}
	...

0001024c <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   1024c:	b580      	push	{r7, lr}
   1024e:	b082      	sub	sp, #8
   10250:	af00      	add	r7, sp, #0
   10252:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   10254:	687a      	ldr	r2, [r7, #4]
   10256:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   1025a:	f043 0310 	orr.w	r3, r3, #16
   1025e:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   10262:	687a      	ldr	r2, [r7, #4]
   10264:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   10268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1026c:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   10270:	687a      	ldr	r2, [r7, #4]
   10272:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   10276:	f36f 1305 	bfc	r3, #4, #2
   1027a:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   1027e:	687b      	ldr	r3, [r7, #4]
   10280:	2205      	movs	r2, #5
   10282:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   10286:	687b      	ldr	r3, [r7, #4]
   10288:	2201      	movs	r2, #1
   1028a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   1028e:	687b      	ldr	r3, [r7, #4]
   10290:	f203 2212 	addw	r2, r3, #530	; 0x212
   10294:	687b      	ldr	r3, [r7, #4]
   10296:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   1029a:	687b      	ldr	r3, [r7, #4]
   1029c:	685a      	ldr	r2, [r3, #4]
   1029e:	687b      	ldr	r3, [r7, #4]
   102a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
   102a4:	4619      	mov	r1, r3
   102a6:	4610      	mov	r0, r2
   102a8:	4b04      	ldr	r3, [pc, #16]	; (102bc <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   102aa:	4798      	blx	r3
		return status;
   102ac:	687b      	ldr	r3, [r7, #4]
   102ae:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   102b2:	4618      	mov	r0, r3
   102b4:	3708      	adds	r7, #8
   102b6:	46bd      	mov	sp, r7
   102b8:	bd80      	pop	{r7, pc}
   102ba:	bf00      	nop
   102bc:	00003a75 	.word	0x00003a75

000102c0 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   102c0:	b580      	push	{r7, lr}
   102c2:	b082      	sub	sp, #8
   102c4:	af00      	add	r7, sp, #0
   102c6:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   102c8:	6878      	ldr	r0, [r7, #4]
   102ca:	4b0e      	ldr	r3, [pc, #56]	; (10304 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   102cc:	4798      	blx	r3
   102ce:	4603      	mov	r3, r0
   102d0:	461a      	mov	r2, r3
   102d2:	687b      	ldr	r3, [r7, #4]
   102d4:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   102d8:	687b      	ldr	r3, [r7, #4]
   102da:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   102de:	f003 0301 	and.w	r3, r3, #1
   102e2:	2b00      	cmp	r3, #0
   102e4:	d000      	beq.n	102e8 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   102e6:	e7ef      	b.n	102c8 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   102e8:	687b      	ldr	r3, [r7, #4]
   102ea:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   102ee:	f003 0301 	and.w	r3, r3, #1
   102f2:	2b00      	cmp	r3, #0
   102f4:	bf0c      	ite	eq
   102f6:	2301      	moveq	r3, #1
   102f8:	2300      	movne	r3, #0
   102fa:	b2db      	uxtb	r3, r3
}
   102fc:	4618      	mov	r0, r3
   102fe:	3708      	adds	r7, #8
   10300:	46bd      	mov	sp, r7
   10302:	bd80      	pop	{r7, pc}
   10304:	0001024d 	.word	0x0001024d

00010308 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   10308:	b590      	push	{r4, r7, lr}
   1030a:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   1030e:	b085      	sub	sp, #20
   10310:	af00      	add	r7, sp, #0
   10312:	f107 0310 	add.w	r3, r7, #16
   10316:	3b0c      	subs	r3, #12
   10318:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   1031a:	f107 0310 	add.w	r3, r7, #16
   1031e:	3b0c      	subs	r3, #12
   10320:	681b      	ldr	r3, [r3, #0]
   10322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   10326:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   1032a:	f107 0310 	add.w	r3, r7, #16
   1032e:	3b0c      	subs	r3, #12
   10330:	681b      	ldr	r3, [r3, #0]
   10332:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   10336:	f107 0110 	add.w	r1, r7, #16
   1033a:	3904      	subs	r1, #4
   1033c:	f107 0010 	add.w	r0, r7, #16
   10340:	380c      	subs	r0, #12
   10342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   10346:	6800      	ldr	r0, [r0, #0]
   10348:	4c4b      	ldr	r4, [pc, #300]	; (10478 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   1034a:	47a0      	blx	r4
	WaitOnBusy();
   1034c:	f107 0310 	add.w	r3, r7, #16
   10350:	3b0c      	subs	r3, #12
   10352:	6818      	ldr	r0, [r3, #0]
   10354:	4b49      	ldr	r3, [pc, #292]	; (1047c <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   10356:	4798      	blx	r3
	Erase(currentAddress);
   10358:	f107 0310 	add.w	r3, r7, #16
   1035c:	3b0c      	subs	r3, #12
   1035e:	681b      	ldr	r3, [r3, #0]
   10360:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   10364:	f107 0310 	add.w	r3, r7, #16
   10368:	3b0c      	subs	r3, #12
   1036a:	4611      	mov	r1, r2
   1036c:	6818      	ldr	r0, [r3, #0]
   1036e:	4b44      	ldr	r3, [pc, #272]	; (10480 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   10370:	4798      	blx	r3
	WaitOnBusy();
   10372:	f107 0310 	add.w	r3, r7, #16
   10376:	3b0c      	subs	r3, #12
   10378:	6818      	ldr	r0, [r3, #0]
   1037a:	4b40      	ldr	r3, [pc, #256]	; (1047c <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   1037c:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   1037e:	f107 0310 	add.w	r3, r7, #16
   10382:	3b0c      	subs	r3, #12
   10384:	681b      	ldr	r3, [r3, #0]
   10386:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1038a:	f107 0110 	add.w	r1, r7, #16
   1038e:	3904      	subs	r1, #4
   10390:	f107 0010 	add.w	r0, r7, #16
   10394:	380c      	subs	r0, #12
   10396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1039a:	6800      	ldr	r0, [r0, #0]
   1039c:	4c39      	ldr	r4, [pc, #228]	; (10484 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   1039e:	47a0      	blx	r4
	WaitOnBusy();
   103a0:	f107 0310 	add.w	r3, r7, #16
   103a4:	3b0c      	subs	r3, #12
   103a6:	6818      	ldr	r0, [r3, #0]
   103a8:	4b34      	ldr	r3, [pc, #208]	; (1047c <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   103aa:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   103ac:	f107 0310 	add.w	r3, r7, #16
   103b0:	3b0c      	subs	r3, #12
   103b2:	681b      	ldr	r3, [r3, #0]
   103b4:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   103b8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   103bc:	f101 0110 	add.w	r1, r1, #16
   103c0:	3904      	subs	r1, #4
   103c2:	f107 0010 	add.w	r0, r7, #16
   103c6:	380c      	subs	r0, #12
   103c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   103cc:	6800      	ldr	r0, [r0, #0]
   103ce:	4c2a      	ldr	r4, [pc, #168]	; (10478 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   103d0:	47a0      	blx	r4
	WaitOnBusy();
   103d2:	f107 0310 	add.w	r3, r7, #16
   103d6:	3b0c      	subs	r3, #12
   103d8:	6818      	ldr	r0, [r3, #0]
   103da:	4b28      	ldr	r3, [pc, #160]	; (1047c <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   103dc:	4798      	blx	r3
	isOK	 = true;
   103de:	f107 0310 	add.w	r3, r7, #16
   103e2:	3b0c      	subs	r3, #12
   103e4:	681b      	ldr	r3, [r3, #0]
   103e6:	2201      	movs	r2, #1
   103e8:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   103ec:	2300      	movs	r3, #0
   103ee:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   103f2:	f102 020c 	add.w	r2, r2, #12
   103f6:	6013      	str	r3, [r2, #0]
   103f8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   103fc:	f103 030c 	add.w	r3, r3, #12
   10400:	681b      	ldr	r3, [r3, #0]
   10402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   10406:	da2b      	bge.n	10460 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   10408:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   1040c:	f103 0310 	add.w	r3, r3, #16
   10410:	3b04      	subs	r3, #4
   10412:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10416:	f102 020c 	add.w	r2, r2, #12
   1041a:	6812      	ldr	r2, [r2, #0]
   1041c:	4413      	add	r3, r2
   1041e:	781a      	ldrb	r2, [r3, #0]
   10420:	f107 0310 	add.w	r3, r7, #16
   10424:	3b04      	subs	r3, #4
   10426:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   1042a:	f101 010c 	add.w	r1, r1, #12
   1042e:	6809      	ldr	r1, [r1, #0]
   10430:	440b      	add	r3, r1
   10432:	781b      	ldrb	r3, [r3, #0]
   10434:	429a      	cmp	r2, r3
   10436:	d007      	beq.n	10448 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   10438:	f107 0310 	add.w	r3, r7, #16
   1043c:	3b0c      	subs	r3, #12
   1043e:	681b      	ldr	r3, [r3, #0]
   10440:	2200      	movs	r2, #0
   10442:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   10446:	e00b      	b.n	10460 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   10448:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1044c:	f103 030c 	add.w	r3, r3, #12
   10450:	681b      	ldr	r3, [r3, #0]
   10452:	3301      	adds	r3, #1
   10454:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10458:	f102 020c 	add.w	r2, r2, #12
   1045c:	6013      	str	r3, [r2, #0]
   1045e:	e7cb      	b.n	103f8 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   10460:	f107 0310 	add.w	r3, r7, #16
   10464:	3b0c      	subs	r3, #12
   10466:	681b      	ldr	r3, [r3, #0]
   10468:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   1046c:	4618      	mov	r0, r3
   1046e:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   10472:	3714      	adds	r7, #20
   10474:	46bd      	mov	sp, r7
   10476:	bd90      	pop	{r4, r7, pc}
   10478:	00010211 	.word	0x00010211
   1047c:	000102c1 	.word	0x000102c1
   10480:	000101ad 	.word	0x000101ad
   10484:	000101dd 	.word	0x000101dd

00010488 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   10488:	b580      	push	{r7, lr}
   1048a:	b082      	sub	sp, #8
   1048c:	af00      	add	r7, sp, #0
   1048e:	6078      	str	r0, [r7, #4]
   10490:	6039      	str	r1, [r7, #0]
   10492:	687b      	ldr	r3, [r7, #4]
   10494:	2b01      	cmp	r3, #1
   10496:	d10d      	bne.n	104b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10498:	683b      	ldr	r3, [r7, #0]
   1049a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1049e:	4293      	cmp	r3, r2
   104a0:	d108      	bne.n	104b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   104a2:	4906      	ldr	r1, [pc, #24]	; (104bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
   104a4:	4806      	ldr	r0, [pc, #24]	; (104c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   104a6:	4b07      	ldr	r3, [pc, #28]	; (104c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   104a8:	4798      	blx	r3
   104aa:	4a07      	ldr	r2, [pc, #28]	; (104c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   104ac:	4907      	ldr	r1, [pc, #28]	; (104cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
   104ae:	4804      	ldr	r0, [pc, #16]	; (104c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   104b0:	4b07      	ldr	r3, [pc, #28]	; (104d0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   104b2:	4798      	blx	r3
   104b4:	bf00      	nop
   104b6:	3708      	adds	r7, #8
   104b8:	46bd      	mov	sp, r7
   104ba:	bd80      	pop	{r7, pc}
   104bc:	20007854 	.word	0x20007854
   104c0:	20007594 	.word	0x20007594
   104c4:	00010105 	.word	0x00010105
   104c8:	20000000 	.word	0x20000000
   104cc:	0001012d 	.word	0x0001012d
   104d0:	000104e9 	.word	0x000104e9

000104d4 <_GLOBAL__sub_I_ptrN25Q256Class>:
   104d4:	b580      	push	{r7, lr}
   104d6:	af00      	add	r7, sp, #0
   104d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   104dc:	2001      	movs	r0, #1
   104de:	4b01      	ldr	r3, [pc, #4]	; (104e4 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   104e0:	4798      	blx	r3
   104e2:	bd80      	pop	{r7, pc}
   104e4:	00010489 	.word	0x00010489

000104e8 <__aeabi_atexit>:
   104e8:	460b      	mov	r3, r1
   104ea:	4601      	mov	r1, r0
   104ec:	4618      	mov	r0, r3
   104ee:	f000 b92f 	b.w	10750 <__cxa_atexit>
   104f2:	bf00      	nop

000104f4 <__aeabi_frsub>:
   104f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   104f8:	e002      	b.n	10500 <__addsf3>
   104fa:	bf00      	nop

000104fc <__aeabi_fsub>:
   104fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00010500 <__addsf3>:
   10500:	0042      	lsls	r2, r0, #1
   10502:	bf1f      	itttt	ne
   10504:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   10508:	ea92 0f03 	teqne	r2, r3
   1050c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   10510:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10514:	d06a      	beq.n	105ec <__addsf3+0xec>
   10516:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1051a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1051e:	bfc1      	itttt	gt
   10520:	18d2      	addgt	r2, r2, r3
   10522:	4041      	eorgt	r1, r0
   10524:	4048      	eorgt	r0, r1
   10526:	4041      	eorgt	r1, r0
   10528:	bfb8      	it	lt
   1052a:	425b      	neglt	r3, r3
   1052c:	2b19      	cmp	r3, #25
   1052e:	bf88      	it	hi
   10530:	4770      	bxhi	lr
   10532:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   10536:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1053a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1053e:	bf18      	it	ne
   10540:	4240      	negne	r0, r0
   10542:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10546:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1054a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1054e:	bf18      	it	ne
   10550:	4249      	negne	r1, r1
   10552:	ea92 0f03 	teq	r2, r3
   10556:	d03f      	beq.n	105d8 <__addsf3+0xd8>
   10558:	f1a2 0201 	sub.w	r2, r2, #1
   1055c:	fa41 fc03 	asr.w	ip, r1, r3
   10560:	eb10 000c 	adds.w	r0, r0, ip
   10564:	f1c3 0320 	rsb	r3, r3, #32
   10568:	fa01 f103 	lsl.w	r1, r1, r3
   1056c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10570:	d502      	bpl.n	10578 <__addsf3+0x78>
   10572:	4249      	negs	r1, r1
   10574:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   10578:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1057c:	d313      	bcc.n	105a6 <__addsf3+0xa6>
   1057e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   10582:	d306      	bcc.n	10592 <__addsf3+0x92>
   10584:	0840      	lsrs	r0, r0, #1
   10586:	ea4f 0131 	mov.w	r1, r1, rrx
   1058a:	f102 0201 	add.w	r2, r2, #1
   1058e:	2afe      	cmp	r2, #254	; 0xfe
   10590:	d251      	bcs.n	10636 <__addsf3+0x136>
   10592:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   10596:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1059a:	bf08      	it	eq
   1059c:	f020 0001 	biceq.w	r0, r0, #1
   105a0:	ea40 0003 	orr.w	r0, r0, r3
   105a4:	4770      	bx	lr
   105a6:	0049      	lsls	r1, r1, #1
   105a8:	eb40 0000 	adc.w	r0, r0, r0
   105ac:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   105b0:	f1a2 0201 	sub.w	r2, r2, #1
   105b4:	d1ed      	bne.n	10592 <__addsf3+0x92>
   105b6:	fab0 fc80 	clz	ip, r0
   105ba:	f1ac 0c08 	sub.w	ip, ip, #8
   105be:	ebb2 020c 	subs.w	r2, r2, ip
   105c2:	fa00 f00c 	lsl.w	r0, r0, ip
   105c6:	bfaa      	itet	ge
   105c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   105cc:	4252      	neglt	r2, r2
   105ce:	4318      	orrge	r0, r3
   105d0:	bfbc      	itt	lt
   105d2:	40d0      	lsrlt	r0, r2
   105d4:	4318      	orrlt	r0, r3
   105d6:	4770      	bx	lr
   105d8:	f092 0f00 	teq	r2, #0
   105dc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   105e0:	bf06      	itte	eq
   105e2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   105e6:	3201      	addeq	r2, #1
   105e8:	3b01      	subne	r3, #1
   105ea:	e7b5      	b.n	10558 <__addsf3+0x58>
   105ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
   105f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   105f4:	bf18      	it	ne
   105f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   105fa:	d021      	beq.n	10640 <__addsf3+0x140>
   105fc:	ea92 0f03 	teq	r2, r3
   10600:	d004      	beq.n	1060c <__addsf3+0x10c>
   10602:	f092 0f00 	teq	r2, #0
   10606:	bf08      	it	eq
   10608:	4608      	moveq	r0, r1
   1060a:	4770      	bx	lr
   1060c:	ea90 0f01 	teq	r0, r1
   10610:	bf1c      	itt	ne
   10612:	2000      	movne	r0, #0
   10614:	4770      	bxne	lr
   10616:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1061a:	d104      	bne.n	10626 <__addsf3+0x126>
   1061c:	0040      	lsls	r0, r0, #1
   1061e:	bf28      	it	cs
   10620:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   10624:	4770      	bx	lr
   10626:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1062a:	bf3c      	itt	cc
   1062c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   10630:	4770      	bxcc	lr
   10632:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10636:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1063a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1063e:	4770      	bx	lr
   10640:	ea7f 6222 	mvns.w	r2, r2, asr #24
   10644:	bf16      	itet	ne
   10646:	4608      	movne	r0, r1
   10648:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1064c:	4601      	movne	r1, r0
   1064e:	0242      	lsls	r2, r0, #9
   10650:	bf06      	itte	eq
   10652:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   10656:	ea90 0f01 	teqeq	r0, r1
   1065a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1065e:	4770      	bx	lr

00010660 <__aeabi_ui2f>:
   10660:	f04f 0300 	mov.w	r3, #0
   10664:	e004      	b.n	10670 <__aeabi_i2f+0x8>
   10666:	bf00      	nop

00010668 <__aeabi_i2f>:
   10668:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1066c:	bf48      	it	mi
   1066e:	4240      	negmi	r0, r0
   10670:	ea5f 0c00 	movs.w	ip, r0
   10674:	bf08      	it	eq
   10676:	4770      	bxeq	lr
   10678:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1067c:	4601      	mov	r1, r0
   1067e:	f04f 0000 	mov.w	r0, #0
   10682:	e01c      	b.n	106be <__aeabi_l2f+0x2a>

00010684 <__aeabi_ul2f>:
   10684:	ea50 0201 	orrs.w	r2, r0, r1
   10688:	bf08      	it	eq
   1068a:	4770      	bxeq	lr
   1068c:	f04f 0300 	mov.w	r3, #0
   10690:	e00a      	b.n	106a8 <__aeabi_l2f+0x14>
   10692:	bf00      	nop

00010694 <__aeabi_l2f>:
   10694:	ea50 0201 	orrs.w	r2, r0, r1
   10698:	bf08      	it	eq
   1069a:	4770      	bxeq	lr
   1069c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   106a0:	d502      	bpl.n	106a8 <__aeabi_l2f+0x14>
   106a2:	4240      	negs	r0, r0
   106a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   106a8:	ea5f 0c01 	movs.w	ip, r1
   106ac:	bf02      	ittt	eq
   106ae:	4684      	moveq	ip, r0
   106b0:	4601      	moveq	r1, r0
   106b2:	2000      	moveq	r0, #0
   106b4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   106b8:	bf08      	it	eq
   106ba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   106be:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   106c2:	fabc f28c 	clz	r2, ip
   106c6:	3a08      	subs	r2, #8
   106c8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   106cc:	db10      	blt.n	106f0 <__aeabi_l2f+0x5c>
   106ce:	fa01 fc02 	lsl.w	ip, r1, r2
   106d2:	4463      	add	r3, ip
   106d4:	fa00 fc02 	lsl.w	ip, r0, r2
   106d8:	f1c2 0220 	rsb	r2, r2, #32
   106dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   106e0:	fa20 f202 	lsr.w	r2, r0, r2
   106e4:	eb43 0002 	adc.w	r0, r3, r2
   106e8:	bf08      	it	eq
   106ea:	f020 0001 	biceq.w	r0, r0, #1
   106ee:	4770      	bx	lr
   106f0:	f102 0220 	add.w	r2, r2, #32
   106f4:	fa01 fc02 	lsl.w	ip, r1, r2
   106f8:	f1c2 0220 	rsb	r2, r2, #32
   106fc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   10700:	fa21 f202 	lsr.w	r2, r1, r2
   10704:	eb43 0002 	adc.w	r0, r3, r2
   10708:	bf08      	it	eq
   1070a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1070e:	4770      	bx	lr

00010710 <__aeabi_f2uiz>:
   10710:	0042      	lsls	r2, r0, #1
   10712:	d20e      	bcs.n	10732 <__aeabi_f2uiz+0x22>
   10714:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   10718:	d30b      	bcc.n	10732 <__aeabi_f2uiz+0x22>
   1071a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1071e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   10722:	d409      	bmi.n	10738 <__aeabi_f2uiz+0x28>
   10724:	ea4f 2300 	mov.w	r3, r0, lsl #8
   10728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1072c:	fa23 f002 	lsr.w	r0, r3, r2
   10730:	4770      	bx	lr
   10732:	f04f 0000 	mov.w	r0, #0
   10736:	4770      	bx	lr
   10738:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1073c:	d101      	bne.n	10742 <__aeabi_f2uiz+0x32>
   1073e:	0242      	lsls	r2, r0, #9
   10740:	d102      	bne.n	10748 <__aeabi_f2uiz+0x38>
   10742:	f04f 30ff 	mov.w	r0, #4294967295
   10746:	4770      	bx	lr
   10748:	f04f 0000 	mov.w	r0, #0
   1074c:	4770      	bx	lr
   1074e:	bf00      	nop

00010750 <__cxa_atexit>:
   10750:	4613      	mov	r3, r2
   10752:	460a      	mov	r2, r1
   10754:	4601      	mov	r1, r0
   10756:	2002      	movs	r0, #2
   10758:	f000 b9a0 	b.w	10a9c <__register_exitproc>

0001075c <ffs>:
   1075c:	b140      	cbz	r0, 10770 <ffs+0x14>
   1075e:	2300      	movs	r3, #0
   10760:	fa40 f103 	asr.w	r1, r0, r3
   10764:	1c5a      	adds	r2, r3, #1
   10766:	07c9      	lsls	r1, r1, #31
   10768:	4613      	mov	r3, r2
   1076a:	d5f9      	bpl.n	10760 <ffs+0x4>
   1076c:	4610      	mov	r0, r2
   1076e:	4770      	bx	lr
   10770:	4602      	mov	r2, r0
   10772:	4610      	mov	r0, r2
   10774:	4770      	bx	lr
   10776:	bf00      	nop

00010778 <__libc_init_array>:
   10778:	b570      	push	{r4, r5, r6, lr}
   1077a:	4e0f      	ldr	r6, [pc, #60]	; (107b8 <__libc_init_array+0x40>)
   1077c:	4d0f      	ldr	r5, [pc, #60]	; (107bc <__libc_init_array+0x44>)
   1077e:	1b76      	subs	r6, r6, r5
   10780:	10b6      	asrs	r6, r6, #2
   10782:	bf18      	it	ne
   10784:	2400      	movne	r4, #0
   10786:	d005      	beq.n	10794 <__libc_init_array+0x1c>
   10788:	3401      	adds	r4, #1
   1078a:	f855 3b04 	ldr.w	r3, [r5], #4
   1078e:	4798      	blx	r3
   10790:	42a6      	cmp	r6, r4
   10792:	d1f9      	bne.n	10788 <__libc_init_array+0x10>
   10794:	4e0a      	ldr	r6, [pc, #40]	; (107c0 <__libc_init_array+0x48>)
   10796:	4d0b      	ldr	r5, [pc, #44]	; (107c4 <__libc_init_array+0x4c>)
   10798:	1b76      	subs	r6, r6, r5
   1079a:	f000 fc9f 	bl	110dc <_init>
   1079e:	10b6      	asrs	r6, r6, #2
   107a0:	bf18      	it	ne
   107a2:	2400      	movne	r4, #0
   107a4:	d006      	beq.n	107b4 <__libc_init_array+0x3c>
   107a6:	3401      	adds	r4, #1
   107a8:	f855 3b04 	ldr.w	r3, [r5], #4
   107ac:	4798      	blx	r3
   107ae:	42a6      	cmp	r6, r4
   107b0:	d1f9      	bne.n	107a6 <__libc_init_array+0x2e>
   107b2:	bd70      	pop	{r4, r5, r6, pc}
   107b4:	bd70      	pop	{r4, r5, r6, pc}
   107b6:	bf00      	nop
   107b8:	000110e8 	.word	0x000110e8
   107bc:	000110e8 	.word	0x000110e8
   107c0:	0001110c 	.word	0x0001110c
   107c4:	000110e8 	.word	0x000110e8

000107c8 <memcpy>:
   107c8:	4684      	mov	ip, r0
   107ca:	ea41 0300 	orr.w	r3, r1, r0
   107ce:	f013 0303 	ands.w	r3, r3, #3
   107d2:	d16d      	bne.n	108b0 <memcpy+0xe8>
   107d4:	3a40      	subs	r2, #64	; 0x40
   107d6:	d341      	bcc.n	1085c <memcpy+0x94>
   107d8:	f851 3b04 	ldr.w	r3, [r1], #4
   107dc:	f840 3b04 	str.w	r3, [r0], #4
   107e0:	f851 3b04 	ldr.w	r3, [r1], #4
   107e4:	f840 3b04 	str.w	r3, [r0], #4
   107e8:	f851 3b04 	ldr.w	r3, [r1], #4
   107ec:	f840 3b04 	str.w	r3, [r0], #4
   107f0:	f851 3b04 	ldr.w	r3, [r1], #4
   107f4:	f840 3b04 	str.w	r3, [r0], #4
   107f8:	f851 3b04 	ldr.w	r3, [r1], #4
   107fc:	f840 3b04 	str.w	r3, [r0], #4
   10800:	f851 3b04 	ldr.w	r3, [r1], #4
   10804:	f840 3b04 	str.w	r3, [r0], #4
   10808:	f851 3b04 	ldr.w	r3, [r1], #4
   1080c:	f840 3b04 	str.w	r3, [r0], #4
   10810:	f851 3b04 	ldr.w	r3, [r1], #4
   10814:	f840 3b04 	str.w	r3, [r0], #4
   10818:	f851 3b04 	ldr.w	r3, [r1], #4
   1081c:	f840 3b04 	str.w	r3, [r0], #4
   10820:	f851 3b04 	ldr.w	r3, [r1], #4
   10824:	f840 3b04 	str.w	r3, [r0], #4
   10828:	f851 3b04 	ldr.w	r3, [r1], #4
   1082c:	f840 3b04 	str.w	r3, [r0], #4
   10830:	f851 3b04 	ldr.w	r3, [r1], #4
   10834:	f840 3b04 	str.w	r3, [r0], #4
   10838:	f851 3b04 	ldr.w	r3, [r1], #4
   1083c:	f840 3b04 	str.w	r3, [r0], #4
   10840:	f851 3b04 	ldr.w	r3, [r1], #4
   10844:	f840 3b04 	str.w	r3, [r0], #4
   10848:	f851 3b04 	ldr.w	r3, [r1], #4
   1084c:	f840 3b04 	str.w	r3, [r0], #4
   10850:	f851 3b04 	ldr.w	r3, [r1], #4
   10854:	f840 3b04 	str.w	r3, [r0], #4
   10858:	3a40      	subs	r2, #64	; 0x40
   1085a:	d2bd      	bcs.n	107d8 <memcpy+0x10>
   1085c:	3230      	adds	r2, #48	; 0x30
   1085e:	d311      	bcc.n	10884 <memcpy+0xbc>
   10860:	f851 3b04 	ldr.w	r3, [r1], #4
   10864:	f840 3b04 	str.w	r3, [r0], #4
   10868:	f851 3b04 	ldr.w	r3, [r1], #4
   1086c:	f840 3b04 	str.w	r3, [r0], #4
   10870:	f851 3b04 	ldr.w	r3, [r1], #4
   10874:	f840 3b04 	str.w	r3, [r0], #4
   10878:	f851 3b04 	ldr.w	r3, [r1], #4
   1087c:	f840 3b04 	str.w	r3, [r0], #4
   10880:	3a10      	subs	r2, #16
   10882:	d2ed      	bcs.n	10860 <memcpy+0x98>
   10884:	320c      	adds	r2, #12
   10886:	d305      	bcc.n	10894 <memcpy+0xcc>
   10888:	f851 3b04 	ldr.w	r3, [r1], #4
   1088c:	f840 3b04 	str.w	r3, [r0], #4
   10890:	3a04      	subs	r2, #4
   10892:	d2f9      	bcs.n	10888 <memcpy+0xc0>
   10894:	3204      	adds	r2, #4
   10896:	d008      	beq.n	108aa <memcpy+0xe2>
   10898:	07d2      	lsls	r2, r2, #31
   1089a:	bf1c      	itt	ne
   1089c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   108a0:	f800 3b01 	strbne.w	r3, [r0], #1
   108a4:	d301      	bcc.n	108aa <memcpy+0xe2>
   108a6:	880b      	ldrh	r3, [r1, #0]
   108a8:	8003      	strh	r3, [r0, #0]
   108aa:	4660      	mov	r0, ip
   108ac:	4770      	bx	lr
   108ae:	bf00      	nop
   108b0:	2a08      	cmp	r2, #8
   108b2:	d313      	bcc.n	108dc <memcpy+0x114>
   108b4:	078b      	lsls	r3, r1, #30
   108b6:	d08d      	beq.n	107d4 <memcpy+0xc>
   108b8:	f010 0303 	ands.w	r3, r0, #3
   108bc:	d08a      	beq.n	107d4 <memcpy+0xc>
   108be:	f1c3 0304 	rsb	r3, r3, #4
   108c2:	1ad2      	subs	r2, r2, r3
   108c4:	07db      	lsls	r3, r3, #31
   108c6:	bf1c      	itt	ne
   108c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   108cc:	f800 3b01 	strbne.w	r3, [r0], #1
   108d0:	d380      	bcc.n	107d4 <memcpy+0xc>
   108d2:	f831 3b02 	ldrh.w	r3, [r1], #2
   108d6:	f820 3b02 	strh.w	r3, [r0], #2
   108da:	e77b      	b.n	107d4 <memcpy+0xc>
   108dc:	3a04      	subs	r2, #4
   108de:	d3d9      	bcc.n	10894 <memcpy+0xcc>
   108e0:	3a01      	subs	r2, #1
   108e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   108e6:	f800 3b01 	strb.w	r3, [r0], #1
   108ea:	d2f9      	bcs.n	108e0 <memcpy+0x118>
   108ec:	780b      	ldrb	r3, [r1, #0]
   108ee:	7003      	strb	r3, [r0, #0]
   108f0:	784b      	ldrb	r3, [r1, #1]
   108f2:	7043      	strb	r3, [r0, #1]
   108f4:	788b      	ldrb	r3, [r1, #2]
   108f6:	7083      	strb	r3, [r0, #2]
   108f8:	4660      	mov	r0, ip
   108fa:	4770      	bx	lr

000108fc <memset>:
   108fc:	b470      	push	{r4, r5, r6}
   108fe:	0786      	lsls	r6, r0, #30
   10900:	d046      	beq.n	10990 <memset+0x94>
   10902:	1e54      	subs	r4, r2, #1
   10904:	2a00      	cmp	r2, #0
   10906:	d041      	beq.n	1098c <memset+0x90>
   10908:	b2ca      	uxtb	r2, r1
   1090a:	4603      	mov	r3, r0
   1090c:	e002      	b.n	10914 <memset+0x18>
   1090e:	f114 34ff 	adds.w	r4, r4, #4294967295
   10912:	d33b      	bcc.n	1098c <memset+0x90>
   10914:	f803 2b01 	strb.w	r2, [r3], #1
   10918:	079d      	lsls	r5, r3, #30
   1091a:	d1f8      	bne.n	1090e <memset+0x12>
   1091c:	2c03      	cmp	r4, #3
   1091e:	d92e      	bls.n	1097e <memset+0x82>
   10920:	b2cd      	uxtb	r5, r1
   10922:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10926:	2c0f      	cmp	r4, #15
   10928:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1092c:	d919      	bls.n	10962 <memset+0x66>
   1092e:	f103 0210 	add.w	r2, r3, #16
   10932:	4626      	mov	r6, r4
   10934:	3e10      	subs	r6, #16
   10936:	2e0f      	cmp	r6, #15
   10938:	f842 5c10 	str.w	r5, [r2, #-16]
   1093c:	f842 5c0c 	str.w	r5, [r2, #-12]
   10940:	f842 5c08 	str.w	r5, [r2, #-8]
   10944:	f842 5c04 	str.w	r5, [r2, #-4]
   10948:	f102 0210 	add.w	r2, r2, #16
   1094c:	d8f2      	bhi.n	10934 <memset+0x38>
   1094e:	f1a4 0210 	sub.w	r2, r4, #16
   10952:	f022 020f 	bic.w	r2, r2, #15
   10956:	f004 040f 	and.w	r4, r4, #15
   1095a:	3210      	adds	r2, #16
   1095c:	2c03      	cmp	r4, #3
   1095e:	4413      	add	r3, r2
   10960:	d90d      	bls.n	1097e <memset+0x82>
   10962:	461e      	mov	r6, r3
   10964:	4622      	mov	r2, r4
   10966:	3a04      	subs	r2, #4
   10968:	2a03      	cmp	r2, #3
   1096a:	f846 5b04 	str.w	r5, [r6], #4
   1096e:	d8fa      	bhi.n	10966 <memset+0x6a>
   10970:	1f22      	subs	r2, r4, #4
   10972:	f022 0203 	bic.w	r2, r2, #3
   10976:	3204      	adds	r2, #4
   10978:	4413      	add	r3, r2
   1097a:	f004 0403 	and.w	r4, r4, #3
   1097e:	b12c      	cbz	r4, 1098c <memset+0x90>
   10980:	b2c9      	uxtb	r1, r1
   10982:	441c      	add	r4, r3
   10984:	f803 1b01 	strb.w	r1, [r3], #1
   10988:	429c      	cmp	r4, r3
   1098a:	d1fb      	bne.n	10984 <memset+0x88>
   1098c:	bc70      	pop	{r4, r5, r6}
   1098e:	4770      	bx	lr
   10990:	4614      	mov	r4, r2
   10992:	4603      	mov	r3, r0
   10994:	e7c2      	b.n	1091c <memset+0x20>
   10996:	bf00      	nop
	...

000109c0 <strlen>:
   109c0:	f890 f000 	pld	[r0]
   109c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   109c8:	f020 0107 	bic.w	r1, r0, #7
   109cc:	f06f 0c00 	mvn.w	ip, #0
   109d0:	f010 0407 	ands.w	r4, r0, #7
   109d4:	f891 f020 	pld	[r1, #32]
   109d8:	f040 8049 	bne.w	10a6e <strlen+0xae>
   109dc:	f04f 0400 	mov.w	r4, #0
   109e0:	f06f 0007 	mvn.w	r0, #7
   109e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   109e8:	f891 f040 	pld	[r1, #64]	; 0x40
   109ec:	f100 0008 	add.w	r0, r0, #8
   109f0:	fa82 f24c 	uadd8	r2, r2, ip
   109f4:	faa4 f28c 	sel	r2, r4, ip
   109f8:	fa83 f34c 	uadd8	r3, r3, ip
   109fc:	faa2 f38c 	sel	r3, r2, ip
   10a00:	bb4b      	cbnz	r3, 10a56 <strlen+0x96>
   10a02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   10a06:	fa82 f24c 	uadd8	r2, r2, ip
   10a0a:	f100 0008 	add.w	r0, r0, #8
   10a0e:	faa4 f28c 	sel	r2, r4, ip
   10a12:	fa83 f34c 	uadd8	r3, r3, ip
   10a16:	faa2 f38c 	sel	r3, r2, ip
   10a1a:	b9e3      	cbnz	r3, 10a56 <strlen+0x96>
   10a1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   10a20:	fa82 f24c 	uadd8	r2, r2, ip
   10a24:	f100 0008 	add.w	r0, r0, #8
   10a28:	faa4 f28c 	sel	r2, r4, ip
   10a2c:	fa83 f34c 	uadd8	r3, r3, ip
   10a30:	faa2 f38c 	sel	r3, r2, ip
   10a34:	b97b      	cbnz	r3, 10a56 <strlen+0x96>
   10a36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   10a3a:	f101 0120 	add.w	r1, r1, #32
   10a3e:	fa82 f24c 	uadd8	r2, r2, ip
   10a42:	f100 0008 	add.w	r0, r0, #8
   10a46:	faa4 f28c 	sel	r2, r4, ip
   10a4a:	fa83 f34c 	uadd8	r3, r3, ip
   10a4e:	faa2 f38c 	sel	r3, r2, ip
   10a52:	2b00      	cmp	r3, #0
   10a54:	d0c6      	beq.n	109e4 <strlen+0x24>
   10a56:	2a00      	cmp	r2, #0
   10a58:	bf04      	itt	eq
   10a5a:	3004      	addeq	r0, #4
   10a5c:	461a      	moveq	r2, r3
   10a5e:	ba12      	rev	r2, r2
   10a60:	fab2 f282 	clz	r2, r2
   10a64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   10a68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   10a6c:	4770      	bx	lr
   10a6e:	e9d1 2300 	ldrd	r2, r3, [r1]
   10a72:	f004 0503 	and.w	r5, r4, #3
   10a76:	f1c4 0000 	rsb	r0, r4, #0
   10a7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   10a7e:	f014 0f04 	tst.w	r4, #4
   10a82:	f891 f040 	pld	[r1, #64]	; 0x40
   10a86:	fa0c f505 	lsl.w	r5, ip, r5
   10a8a:	ea62 0205 	orn	r2, r2, r5
   10a8e:	bf1c      	itt	ne
   10a90:	ea63 0305 	ornne	r3, r3, r5
   10a94:	4662      	movne	r2, ip
   10a96:	f04f 0400 	mov.w	r4, #0
   10a9a:	e7a9      	b.n	109f0 <strlen+0x30>

00010a9c <__register_exitproc>:
   10a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10aa0:	4d2c      	ldr	r5, [pc, #176]	; (10b54 <__register_exitproc+0xb8>)
   10aa2:	4606      	mov	r6, r0
   10aa4:	6828      	ldr	r0, [r5, #0]
   10aa6:	4698      	mov	r8, r3
   10aa8:	460f      	mov	r7, r1
   10aaa:	4691      	mov	r9, r2
   10aac:	f000 f882 	bl	10bb4 <__retarget_lock_acquire_recursive>
   10ab0:	4b29      	ldr	r3, [pc, #164]	; (10b58 <__register_exitproc+0xbc>)
   10ab2:	681c      	ldr	r4, [r3, #0]
   10ab4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10ab8:	2b00      	cmp	r3, #0
   10aba:	d03e      	beq.n	10b3a <__register_exitproc+0x9e>
   10abc:	685a      	ldr	r2, [r3, #4]
   10abe:	2a1f      	cmp	r2, #31
   10ac0:	dc1c      	bgt.n	10afc <__register_exitproc+0x60>
   10ac2:	f102 0e01 	add.w	lr, r2, #1
   10ac6:	b176      	cbz	r6, 10ae6 <__register_exitproc+0x4a>
   10ac8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   10acc:	2401      	movs	r4, #1
   10ace:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10ad2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   10ad6:	4094      	lsls	r4, r2
   10ad8:	4320      	orrs	r0, r4
   10ada:	2e02      	cmp	r6, #2
   10adc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   10ae0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10ae4:	d023      	beq.n	10b2e <__register_exitproc+0x92>
   10ae6:	3202      	adds	r2, #2
   10ae8:	f8c3 e004 	str.w	lr, [r3, #4]
   10aec:	6828      	ldr	r0, [r5, #0]
   10aee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   10af2:	f000 f861 	bl	10bb8 <__retarget_lock_release_recursive>
   10af6:	2000      	movs	r0, #0
   10af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10afc:	4b17      	ldr	r3, [pc, #92]	; (10b5c <__register_exitproc+0xc0>)
   10afe:	b30b      	cbz	r3, 10b44 <__register_exitproc+0xa8>
   10b00:	f44f 70c8 	mov.w	r0, #400	; 0x190
   10b04:	f7fe ff8c 	bl	fa20 <malloc>
   10b08:	4603      	mov	r3, r0
   10b0a:	b1d8      	cbz	r0, 10b44 <__register_exitproc+0xa8>
   10b0c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   10b10:	6002      	str	r2, [r0, #0]
   10b12:	2100      	movs	r1, #0
   10b14:	6041      	str	r1, [r0, #4]
   10b16:	460a      	mov	r2, r1
   10b18:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   10b1c:	f04f 0e01 	mov.w	lr, #1
   10b20:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   10b24:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   10b28:	2e00      	cmp	r6, #0
   10b2a:	d0dc      	beq.n	10ae6 <__register_exitproc+0x4a>
   10b2c:	e7cc      	b.n	10ac8 <__register_exitproc+0x2c>
   10b2e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   10b32:	430c      	orrs	r4, r1
   10b34:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   10b38:	e7d5      	b.n	10ae6 <__register_exitproc+0x4a>
   10b3a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   10b3e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   10b42:	e7bb      	b.n	10abc <__register_exitproc+0x20>
   10b44:	6828      	ldr	r0, [r5, #0]
   10b46:	f000 f837 	bl	10bb8 <__retarget_lock_release_recursive>
   10b4a:	f04f 30ff 	mov.w	r0, #4294967295
   10b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10b52:	bf00      	nop
   10b54:	20000608 	.word	0x20000608
   10b58:	000110d8 	.word	0x000110d8
   10b5c:	0000fa21 	.word	0x0000fa21

00010b60 <register_fini>:
   10b60:	4b02      	ldr	r3, [pc, #8]	; (10b6c <register_fini+0xc>)
   10b62:	b113      	cbz	r3, 10b6a <register_fini+0xa>
   10b64:	4802      	ldr	r0, [pc, #8]	; (10b70 <register_fini+0x10>)
   10b66:	f000 b805 	b.w	10b74 <atexit>
   10b6a:	4770      	bx	lr
   10b6c:	00000000 	.word	0x00000000
   10b70:	00010b81 	.word	0x00010b81

00010b74 <atexit>:
   10b74:	2300      	movs	r3, #0
   10b76:	4601      	mov	r1, r0
   10b78:	461a      	mov	r2, r3
   10b7a:	4618      	mov	r0, r3
   10b7c:	f7ff bf8e 	b.w	10a9c <__register_exitproc>

00010b80 <__libc_fini_array>:
   10b80:	b538      	push	{r3, r4, r5, lr}
   10b82:	4c0a      	ldr	r4, [pc, #40]	; (10bac <__libc_fini_array+0x2c>)
   10b84:	4d0a      	ldr	r5, [pc, #40]	; (10bb0 <__libc_fini_array+0x30>)
   10b86:	1b64      	subs	r4, r4, r5
   10b88:	10a4      	asrs	r4, r4, #2
   10b8a:	d00a      	beq.n	10ba2 <__libc_fini_array+0x22>
   10b8c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   10b90:	3b01      	subs	r3, #1
   10b92:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10b96:	3c01      	subs	r4, #1
   10b98:	f855 3904 	ldr.w	r3, [r5], #-4
   10b9c:	4798      	blx	r3
   10b9e:	2c00      	cmp	r4, #0
   10ba0:	d1f9      	bne.n	10b96 <__libc_fini_array+0x16>
   10ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10ba6:	f000 bab1 	b.w	1110c <_fini>
   10baa:	bf00      	nop
   10bac:	0001111c 	.word	0x0001111c
   10bb0:	00011118 	.word	0x00011118

00010bb4 <__retarget_lock_acquire_recursive>:
   10bb4:	4770      	bx	lr
   10bb6:	bf00      	nop

00010bb8 <__retarget_lock_release_recursive>:
   10bb8:	4770      	bx	lr
   10bba:	bf00      	nop
   10bbc:	682f2e2e 	.word	0x682f2e2e
   10bc0:	702f6c70 	.word	0x702f6c70
   10bc4:	2f74726f 	.word	0x2f74726f
   10bc8:	5f6c7068 	.word	0x5f6c7068
   10bcc:	6f697067 	.word	0x6f697067
   10bd0:	7361625f 	.word	0x7361625f
   10bd4:	00682e65 	.word	0x00682e65
   10bd8:	682f2e2e 	.word	0x682f2e2e
   10bdc:	692f6c61 	.word	0x692f6c61
   10be0:	756c636e 	.word	0x756c636e
   10be4:	682f6564 	.word	0x682f6564
   10be8:	775f6c61 	.word	0x775f6c61
   10bec:	682e7464 	.word	0x682e7464
   10bf0:	00000000 	.word	0x00000000
   10bf4:	682f2e2e 	.word	0x682f2e2e
   10bf8:	732f6c61 	.word	0x732f6c61
   10bfc:	682f6372 	.word	0x682f6372
   10c00:	635f6c61 	.word	0x635f6c61
   10c04:	6e656c61 	.word	0x6e656c61
   10c08:	2e726164 	.word	0x2e726164
   10c0c:	00000063 	.word	0x00000063
   10c10:	682f2e2e 	.word	0x682f2e2e
   10c14:	732f6c61 	.word	0x732f6c61
   10c18:	682f6372 	.word	0x682f6372
   10c1c:	635f6c61 	.word	0x635f6c61
   10c20:	615f6e61 	.word	0x615f6e61
   10c24:	636e7973 	.word	0x636e7973
   10c28:	0000632e 	.word	0x0000632e
   10c2c:	682f2e2e 	.word	0x682f2e2e
   10c30:	732f6c61 	.word	0x732f6c61
   10c34:	682f6372 	.word	0x682f6372
   10c38:	635f6c61 	.word	0x635f6c61
   10c3c:	735f6372 	.word	0x735f6372
   10c40:	2e636e79 	.word	0x2e636e79
   10c44:	00000063 	.word	0x00000063
   10c48:	682f2e2e 	.word	0x682f2e2e
   10c4c:	732f6c61 	.word	0x732f6c61
   10c50:	682f6372 	.word	0x682f6372
   10c54:	695f6c61 	.word	0x695f6c61
   10c58:	6d5f6332 	.word	0x6d5f6332
   10c5c:	6e79735f 	.word	0x6e79735f
   10c60:	00632e63 	.word	0x00632e63
   10c64:	682f2e2e 	.word	0x682f2e2e
   10c68:	732f6c61 	.word	0x732f6c61
   10c6c:	682f6372 	.word	0x682f6372
   10c70:	705f6c61 	.word	0x705f6c61
   10c74:	632e6d77 	.word	0x632e6d77
   10c78:	00000000 	.word	0x00000000
   10c7c:	682f2e2e 	.word	0x682f2e2e
   10c80:	732f6c61 	.word	0x732f6c61
   10c84:	682f6372 	.word	0x682f6372
   10c88:	715f6c61 	.word	0x715f6c61
   10c8c:	5f697073 	.word	0x5f697073
   10c90:	636e7973 	.word	0x636e7973
   10c94:	0000632e 	.word	0x0000632e
   10c98:	682f2e2e 	.word	0x682f2e2e
   10c9c:	732f6c61 	.word	0x732f6c61
   10ca0:	682f6372 	.word	0x682f6372
   10ca4:	735f6c61 	.word	0x735f6c61
   10ca8:	6d5f6970 	.word	0x6d5f6970
   10cac:	6e79735f 	.word	0x6e79735f
   10cb0:	00632e63 	.word	0x00632e63
   10cb4:	682f2e2e 	.word	0x682f2e2e
   10cb8:	732f6c61 	.word	0x732f6c61
   10cbc:	682f6372 	.word	0x682f6372
   10cc0:	745f6c61 	.word	0x745f6c61
   10cc4:	72656d69 	.word	0x72656d69
   10cc8:	0000632e 	.word	0x0000632e
   10ccc:	682f2e2e 	.word	0x682f2e2e
   10cd0:	752f6c61 	.word	0x752f6c61
   10cd4:	736c6974 	.word	0x736c6974
   10cd8:	6372732f 	.word	0x6372732f
   10cdc:	6974752f 	.word	0x6974752f
   10ce0:	6c5f736c 	.word	0x6c5f736c
   10ce4:	2e747369 	.word	0x2e747369
   10ce8:	00000063 	.word	0x00000063

00010cec <_map>:
   10cec:	00000000 00000040 00000001 00000021     ....@.......!...
   10cfc:	00000003 00000003 00000004 00000004     ................
   10d0c:	00000005 00000005 00000006 00000056     ............V...
   10d1c:	00000007 00000057 00000008 00000028     ....W.......(...
   10d2c:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   10d3c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00010d4c <user_mux_confs>:
   10d4c:	00020100 00000000 00000000 00000000     ................
	...

00010d90 <channel_confs>:
   10d90:	0660065f 00000000 00000000 00000000     _.`.............
	...

00010dd0 <interrupt_cfg>:
	...
   10e50:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   10e60:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   10e70:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   10e80:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   10e90:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   10ea0:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   10eb0:	43000400 43000800 43000c00              ...C...C...C

00010ebc <sercomspi_regs>:
   10ebc:	0020000c 00020000 00000000 01ff0001     .. .............
   10ecc:	30000c04 02000000 00000000 ff00ef00     ...0............
   10edc:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   10eec:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   10efc:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   10f0c:	43001400 43001800                       ...C...C

00010f14 <_usb_ep_cfgs>:
   10f14:	200009f8 00000000 00000040 20000a38     ... ....@...8.. 
   10f24:	20000a78 00400040 20000ab8 20000af8     x.. @.@.... ... 
   10f34:	00400040 20000b38 20000b78 00400040     @.@.8.. x.. @.@.
   10f44:	20000bb8 20000bf8 00400040 00000804     ... ... @.@.....
   10f54:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   10f64:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   10f74:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   10f84:	7361625f 00682e65                       _base.h.

00010f8c <n25q256a_interface>:
   10f8c:	0000c975 0000ca19 0000cb29 0000cce1     u.......).......
   10f9c:	0000cd71 752f2e2e 642f6273 63697665     q...../usb/devic
   10fac:	73752f65 2e636462 00000063              e/usbdc.c...

00010fb8 <defaultParameters>:
   10fb8:	00004020                                 @..

00010fbc <defaultPreferences>:
   10fbc:	000000fa 00000032                       ....2...

00010fc4 <_ZTV9CDC_Class>:
	...
   10fcc:	0000f1b5 0000f295 0000ee39 0000f17d     ........9...}...
   10fdc:	0000f32d 0000f141 0000f055 0000f0a5     -...A...U.......
   10fec:	0000f19d 0000f1fd                       ........

00010ff4 <_ZTV6Stream>:
	...
   10ffc:	0000fa35 0000f3fd 0000ee39 0000ee4d     5.......9...M...
   1100c:	0000fa35 0000fa35 0000fa35 2e257830     5...5...5...0x%.
   1101c:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   1102c:	0066766f                                ovf.

00011030 <_ZTV5Print>:
	...
   11038:	0000fa35 0000f3fd 0000ee39 0000ee4d     5.......9...M...
   11048:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   11058:	73655466 41502074 44455353 00000000     fTest PASSED....
   11068:	00000a0d 73616c46 654d2068 79726f6d     ....Flash Memory
   11078:	6c655320 73655466 41462074 44454c49      SelfTest FAILED
   11088:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   11098:	695f6c61 00632e6f 2e2f2e2e 2e2e2f2e     al_io.c.../../..
   110a8:	554c412f 6972445f 2f726576 5f554c41     /ALU_Driver/ALU_
   110b8:	76697244 682f7265 702f6c70 2f74726f     Driver/hpl/port/
   110c8:	5f6c7068 6f697067 7361625f 00682e65     hpl_gpio_base.h.

000110d8 <_global_impure_ptr>:
   110d8:	200001e0                                ... 

000110dc <_init>:
   110dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110de:	bf00      	nop
   110e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   110e2:	bc08      	pop	{r3}
   110e4:	469e      	mov	lr, r3
   110e6:	4770      	bx	lr

000110e8 <__init_array_start>:
   110e8:	00010b61 	.word	0x00010b61

000110ec <__frame_dummy_init_array_entry>:
   110ec:	00000289 0000153d 00001b0d 0000ee01     ....=...........
   110fc:	0000f3ad 0000fa0d 0000fb75 000104d5     ........u.......

0001110c <_fini>:
   1110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1110e:	bf00      	nop
   11110:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11112:	bc08      	pop	{r3}
   11114:	469e      	mov	lr, r3
   11116:	4770      	bx	lr

00011118 <__fini_array_start>:
   11118:	00000265 	.word	0x00000265
