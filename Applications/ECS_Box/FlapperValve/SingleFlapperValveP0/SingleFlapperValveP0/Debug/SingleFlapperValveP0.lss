
SingleFlapperValveP0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000112e8  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000112e8  000112e8  000212e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000064c  20000000  000112f0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003064c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003064c  2**0
                  CONTENTS
  5 .bss          0000a750  20000650  00011940  0003064c  2**3
                  ALLOC
  6 .stack        00010000  2000ada0  0001c090  0003064c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003064c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003067a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00086e23  00000000  00000000  000306d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ba6f  00000000  00000000  000b74f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001edde  00000000  00000000  000c2f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003650  00000000  00000000  000e1d43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003278  00000000  00000000  000e5393  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000532fc  00000000  00000000  000e860b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00042e74  00000000  00000000  0013b907  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00140d21  00000000  00000000  0017e77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e0e8  00000000  00000000  002bf49c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 ad 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     ... ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	71 69 00 00 09 57 00 00 19 57 00 00 55 03 00 00     qi...W...W..U...
      7c:	29 57 00 00 39 57 00 00 49 57 00 00 59 57 00 00     )W..9W..IW..YW..
      8c:	69 57 00 00 79 57 00 00 89 57 00 00 55 03 00 00     iW..yW...W..U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     104:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     114:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     154:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     164:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     174:	55 03 00 00 55 03 00 00 4d 4b 00 00 ed b8 00 00     U...U...MK......
     184:	fd b8 00 00 0d b9 00 00 1d b9 00 00 55 03 00 00     ............U...
     194:	ed 82 00 00 55 03 00 00 55 03 00 00 55 03 00 00     ....U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 09 83 00 00     U...U...U.......
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	25 83 00 00 55 03 00 00 55 03 00 00 55 03 00 00     %...U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 e9 8f 00 00 55 03 00 00     U...U.......U...
     1f4:	05 90 00 00 55 03 00 00 21 90 00 00 3d 90 00 00     ....U...!...=...
     204:	59 90 00 00 75 90 00 00 55 03 00 00 55 03 00 00     Y...u...U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000650 	.word	0x20000650
     280:	00000000 	.word	0x00000000
     284:	000112f0 	.word	0x000112f0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000112f0 	.word	0x000112f0
     2c4:	20000654 	.word	0x20000654
     2c8:	000112f0 	.word	0x000112f0
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	000112f0 	.word	0x000112f0
     334:	20000000 	.word	0x20000000
     338:	2000064c 	.word	0x2000064c
     33c:	20000650 	.word	0x20000650
     340:	2000ada0 	.word	0x2000ada0
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	000108f9 	.word	0x000108f9
     350:	00001141 	.word	0x00001141

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>
	...

0000035c <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
     35c:	b480      	push	{r7}
     35e:	b083      	sub	sp, #12
     360:	af00      	add	r7, sp, #0
     362:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
     364:	4b07      	ldr	r3, [pc, #28]	; (384 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
     366:	681b      	ldr	r3, [r3, #0]
     368:	2201      	movs	r2, #1
     36a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
     36e:	4b05      	ldr	r3, [pc, #20]	; (384 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
     370:	681b      	ldr	r3, [r3, #0]
     372:	2201      	movs	r2, #1
     374:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
     378:	bf00      	nop
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	bc80      	pop	{r7}
     380:	4770      	bx	lr
     382:	bf00      	nop
     384:	200007a4 	.word	0x200007a4

00000388 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
     388:	b480      	push	{r7}
     38a:	b083      	sub	sp, #12
     38c:	af00      	add	r7, sp, #0
     38e:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
     390:	4b07      	ldr	r3, [pc, #28]	; (3b0 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
     392:	685b      	ldr	r3, [r3, #4]
     394:	2201      	movs	r2, #1
     396:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
     39a:	4b05      	ldr	r3, [pc, #20]	; (3b0 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
     39c:	685b      	ldr	r3, [r3, #4]
     39e:	2201      	movs	r2, #1
     3a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
     3a4:	bf00      	nop
     3a6:	370c      	adds	r7, #12
     3a8:	46bd      	mov	sp, r7
     3aa:	bc80      	pop	{r7}
     3ac:	4770      	bx	lr
     3ae:	bf00      	nop
     3b0:	200007a4 	.word	0x200007a4

000003b4 <_ZN22FlapperValveControllerC1Ev>:
	ptrFlapperValveController[1]->resetTimeout=true;
}


// default constructor
FlapperValveController::FlapperValveController()
     3b4:	b580      	push	{r7, lr}
     3b6:	b082      	sub	sp, #8
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	4618      	mov	r0, r3
     3c0:	4b1d      	ldr	r3, [pc, #116]	; (438 <_ZN22FlapperValveControllerC1Ev+0x84>)
     3c2:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	4a1d      	ldr	r2, [pc, #116]	; (43c <_ZN22FlapperValveControllerC1Ev+0x88>)
     3c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	2200      	movs	r2, #0
     3d0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	isControlling=false;
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	2200      	movs	r2, #0
     3d8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	gotSetpoint=false;
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	2200      	movs	r2, #0
     3e0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	controllerEnabled=false;
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	2200      	movs	r2, #0
     3e8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	closing=false;
     3ec:	687b      	ldr	r3, [r7, #4]
     3ee:	2200      	movs	r2, #0
     3f0:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	22da      	movs	r2, #218	; 0xda
     3f8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	NBC_Mode=false;
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	2200      	movs	r2, #0
     400:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	NBC_Activated=false;
     404:	687b      	ldr	r3, [r7, #4]
     406:	2200      	movs	r2, #0
     408:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	standAloneActivated=false;
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	2200      	movs	r2, #0
     410:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	standAloneMode=false;
     414:	687b      	ldr	r3, [r7, #4]
     416:	2200      	movs	r2, #0
     418:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	resetTimeout=false;
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	2200      	movs	r2, #0
     420:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	standAloneReturning=false;
     424:	687b      	ldr	r3, [r7, #4]
     426:	2200      	movs	r2, #0
     428:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	
	
} //FlapperValveController
     42c:	687b      	ldr	r3, [r7, #4]
     42e:	4618      	mov	r0, r3
     430:	3708      	adds	r7, #8
     432:	46bd      	mov	sp, r7
     434:	bd80      	pop	{r7, pc}
     436:	bf00      	nop
     438:	000009c5 	.word	0x000009c5
     43c:	200007ac 	.word	0x200007ac

00000440 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
     440:	b580      	push	{r7, lr}
     442:	b082      	sub	sp, #8
     444:	af00      	add	r7, sp, #0
     446:	6078      	str	r0, [r7, #4]
     448:	687b      	ldr	r3, [r7, #4]
     44a:	4618      	mov	r0, r3
     44c:	4b03      	ldr	r3, [pc, #12]	; (45c <_ZN22FlapperValveControllerD1Ev+0x1c>)
     44e:	4798      	blx	r3
{
} //~FlapperValveController
     450:	687b      	ldr	r3, [r7, #4]
     452:	4618      	mov	r0, r3
     454:	3708      	adds	r7, #8
     456:	46bd      	mov	sp, r7
     458:	bd80      	pop	{r7, pc}
     45a:	bf00      	nop
     45c:	00000a11 	.word	0x00000a11

00000460 <_ZN22FlapperValveController14InitControllerEv>:

bool FlapperValveController::InitController(void){
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]=this;
     468:	4a11      	ldr	r2, [pc, #68]	; (4b0 <_ZN22FlapperValveController14InitControllerEv+0x50>)
     46a:	687b      	ldr	r3, [r7, #4]
     46c:	6013      	str	r3, [r2, #0]
	singlefv=&fvStatic[0];
     46e:	687b      	ldr	r3, [r7, #4]
     470:	4a10      	ldr	r2, [pc, #64]	; (4b4 <_ZN22FlapperValveController14InitControllerEv+0x54>)
     472:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		positions[0]=position_array_static[0];
     476:	687b      	ldr	r3, [r7, #4]
     478:	4a0f      	ldr	r2, [pc, #60]	; (4b8 <_ZN22FlapperValveController14InitControllerEv+0x58>)
     47a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	if (singlefv->Init())
     47e:	687b      	ldr	r3, [r7, #4]
     480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     484:	4618      	mov	r0, r3
     486:	4b0d      	ldr	r3, [pc, #52]	; (4bc <_ZN22FlapperValveController14InitControllerEv+0x5c>)
     488:	4798      	blx	r3
     48a:	4603      	mov	r3, r0
     48c:	2b00      	cmp	r3, #0
     48e:	d007      	beq.n	4a0 <_ZN22FlapperValveController14InitControllerEv+0x40>
	{
		isOK=Selftest();
     490:	6878      	ldr	r0, [r7, #4]
     492:	4b0b      	ldr	r3, [pc, #44]	; (4c0 <_ZN22FlapperValveController14InitControllerEv+0x60>)
     494:	4798      	blx	r3
     496:	4603      	mov	r3, r0
     498:	461a      	mov	r2, r3
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	}
	return	isOK;	
     4a0:	687b      	ldr	r3, [r7, #4]
     4a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
     4a6:	b2db      	uxtb	r3, r3
}
     4a8:	4618      	mov	r0, r3
     4aa:	3708      	adds	r7, #8
     4ac:	46bd      	mov	sp, r7
     4ae:	bd80      	pop	{r7, pc}
     4b0:	200007a4 	.word	0x200007a4
     4b4:	200007ac 	.word	0x200007ac
     4b8:	20000784 	.word	0x20000784
     4bc:	00000a31 	.word	0x00000a31
     4c0:	00000631 	.word	0x00000631

000004c4 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

	return 0;
	
}

void	FlapperValveController::UpdateFlapperValveData(void){
     4c4:	b590      	push	{r4, r7, lr}
     4c6:	b085      	sub	sp, #20
     4c8:	af00      	add	r7, sp, #0
     4ca:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
     4cc:	68fb      	ldr	r3, [r7, #12]
     4ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     4d2:	4618      	mov	r0, r3
     4d4:	4b36      	ldr	r3, [pc, #216]	; (5b0 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xec>)
     4d6:	4798      	blx	r3
     4d8:	4603      	mov	r3, r0
     4da:	461a      	mov	r2, r3
     4dc:	68fb      	ldr	r3, [r7, #12]
     4de:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	//dataStruct.controllerStatus.position=currentPosition;
	dataStruct.actualPosition=currentPosition;
     4e2:	68fb      	ldr	r3, [r7, #12]
     4e4:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
     4e8:	68fb      	ldr	r3, [r7, #12]
     4ea:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	dataStruct.setPointPosition=setpoint;
     4ee:	68fb      	ldr	r3, [r7, #12]
     4f0:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
     4f4:	68fb      	ldr	r3, [r7, #12]
     4f6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
     4fa:	68fb      	ldr	r3, [r7, #12]
     4fc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
     500:	68fc      	ldr	r4, [r7, #12]
     502:	463b      	mov	r3, r7
     504:	4611      	mov	r1, r2
     506:	4618      	mov	r0, r3
     508:	4b2a      	ldr	r3, [pc, #168]	; (5b4 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf0>)
     50a:	4798      	blx	r3
     50c:	f104 0384 	add.w	r3, r4, #132	; 0x84
     510:	463a      	mov	r2, r7
     512:	6810      	ldr	r0, [r2, #0]
     514:	6018      	str	r0, [r3, #0]
     516:	8892      	ldrh	r2, [r2, #4]
     518:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
     51a:	68fb      	ldr	r3, [r7, #12]
     51c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
     520:	68fc      	ldr	r4, [r7, #12]
     522:	463b      	mov	r3, r7
     524:	4611      	mov	r1, r2
     526:	4618      	mov	r0, r3
     528:	4b23      	ldr	r3, [pc, #140]	; (5b8 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf4>)
     52a:	4798      	blx	r3
     52c:	f104 038a 	add.w	r3, r4, #138	; 0x8a
     530:	463a      	mov	r2, r7
     532:	6811      	ldr	r1, [r2, #0]
     534:	6852      	ldr	r2, [r2, #4]
     536:	6019      	str	r1, [r3, #0]
     538:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
     53a:	68fb      	ldr	r3, [r7, #12]
     53c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
     540:	b2da      	uxtb	r2, r3
     542:	68fb      	ldr	r3, [r7, #12]
     544:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	dataStruct.controllerStatus.isControlling=isControlling;
     548:	68fb      	ldr	r3, [r7, #12]
     54a:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
     54e:	68fb      	ldr	r3, [r7, #12]
     550:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
     554:	68fb      	ldr	r3, [r7, #12]
     556:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
     55a:	68fb      	ldr	r3, [r7, #12]
     55c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	dataStruct.controllerStatus.is_flapper_OK=isOK;
     560:	68fb      	ldr	r3, [r7, #12]
     562:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
     566:	b2da      	uxtb	r2, r3
     568:	68fb      	ldr	r3, [r7, #12]
     56a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	
	if (standAloneActivated)
     56e:	68fb      	ldr	r3, [r7, #12]
     570:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
     574:	2b00      	cmp	r3, #0
     576:	d008      	beq.n	58a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc6>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
     578:	68fb      	ldr	r3, [r7, #12]
     57a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
     57e:	43db      	mvns	r3, r3
     580:	b2da      	uxtb	r2, r3
     582:	68fb      	ldr	r3, [r7, #12]
     584:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     588:	e007      	b.n	59a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd6>
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
     58a:	68fb      	ldr	r3, [r7, #12]
     58c:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
     590:	43db      	mvns	r3, r3
     592:	b2da      	uxtb	r2, r3
     594:	68fb      	ldr	r3, [r7, #12]
     596:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	}
	FillPositionsFIFO(currentPosition);
     59a:	68fb      	ldr	r3, [r7, #12]
     59c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
     5a0:	4619      	mov	r1, r3
     5a2:	68f8      	ldr	r0, [r7, #12]
     5a4:	4b05      	ldr	r3, [pc, #20]	; (5bc <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf8>)
     5a6:	4798      	blx	r3
}
     5a8:	bf00      	nop
     5aa:	3714      	adds	r7, #20
     5ac:	46bd      	mov	sp, r7
     5ae:	bd90      	pop	{r4, r7, pc}
     5b0:	00000e1d 	.word	0x00000e1d
     5b4:	00000ba1 	.word	0x00000ba1
     5b8:	00000b49 	.word	0x00000b49
     5bc:	000005c1 	.word	0x000005c1

000005c0 <_ZN22FlapperValveController17FillPositionsFIFOEh>:
void FlapperValveController::FillPositionsFIFO(uint8_t cp){
     5c0:	b480      	push	{r7}
     5c2:	b085      	sub	sp, #20
     5c4:	af00      	add	r7, sp, #0
     5c6:	6078      	str	r0, [r7, #4]
     5c8:	460b      	mov	r3, r1
     5ca:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
     5cc:	2300      	movs	r3, #0
     5ce:	73fb      	strb	r3, [r7, #15]
     5d0:	7bfb      	ldrb	r3, [r7, #15]
     5d2:	2b0e      	cmp	r3, #14
     5d4:	dc1d      	bgt.n	612 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x52>
	{
		positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-1-i]=positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-2-i];
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
     5dc:	687a      	ldr	r2, [r7, #4]
     5de:	3332      	adds	r3, #50	; 0x32
     5e0:	009b      	lsls	r3, r3, #2
     5e2:	4413      	add	r3, r2
     5e4:	685b      	ldr	r3, [r3, #4]
     5e6:	7bfa      	ldrb	r2, [r7, #15]
     5e8:	f1c2 020f 	rsb	r2, r2, #15
     5ec:	441a      	add	r2, r3
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
     5f4:	6879      	ldr	r1, [r7, #4]
     5f6:	3332      	adds	r3, #50	; 0x32
     5f8:	009b      	lsls	r3, r3, #2
     5fa:	440b      	add	r3, r1
     5fc:	685b      	ldr	r3, [r3, #4]
     5fe:	7bf9      	ldrb	r1, [r7, #15]
     600:	f1c1 010e 	rsb	r1, r1, #14
     604:	440b      	add	r3, r1
     606:	781b      	ldrb	r3, [r3, #0]
     608:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
     60a:	7bfb      	ldrb	r3, [r7, #15]
     60c:	3301      	adds	r3, #1
     60e:	73fb      	strb	r3, [r7, #15]
     610:	e7de      	b.n	5d0 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x10>
	}
	positions[valve_ID][0]=cp;
     612:	687b      	ldr	r3, [r7, #4]
     614:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
     618:	687a      	ldr	r2, [r7, #4]
     61a:	3332      	adds	r3, #50	; 0x32
     61c:	009b      	lsls	r3, r3, #2
     61e:	4413      	add	r3, r2
     620:	685b      	ldr	r3, [r3, #4]
     622:	78fa      	ldrb	r2, [r7, #3]
     624:	701a      	strb	r2, [r3, #0]
}
     626:	bf00      	nop
     628:	3714      	adds	r7, #20
     62a:	46bd      	mov	sp, r7
     62c:	bc80      	pop	{r7}
     62e:	4770      	bx	lr

00000630 <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return singlefv->ReadActualPosition();
}

bool	FlapperValveController::Selftest(void){
     630:	b580      	push	{r7, lr}
     632:	b084      	sub	sp, #16
     634:	af00      	add	r7, sp, #0
     636:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
     638:	23b4      	movs	r3, #180	; 0xb4
     63a:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
     63c:	687b      	ldr	r3, [r7, #4]
     63e:	4a59      	ldr	r2, [pc, #356]	; (7a4 <_ZN22FlapperValveController8SelftestEv+0x174>)
     640:	33c7      	adds	r3, #199	; 0xc7
     642:	8812      	ldrh	r2, [r2, #0]
     644:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
     646:	6878      	ldr	r0, [r7, #4]
     648:	4b57      	ldr	r3, [pc, #348]	; (7a8 <_ZN22FlapperValveController8SelftestEv+0x178>)
     64a:	4798      	blx	r3
	singlefv->SetEnable(false);
     64c:	687b      	ldr	r3, [r7, #4]
     64e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     652:	2100      	movs	r1, #0
     654:	4618      	mov	r0, r3
     656:	4b55      	ldr	r3, [pc, #340]	; (7ac <_ZN22FlapperValveController8SelftestEv+0x17c>)
     658:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     660:	2100      	movs	r1, #0
     662:	4618      	mov	r0, r3
     664:	4b52      	ldr	r3, [pc, #328]	; (7b0 <_ZN22FlapperValveController8SelftestEv+0x180>)
     666:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
     668:	687b      	ldr	r3, [r7, #4]
     66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     66e:	2100      	movs	r1, #0
     670:	4618      	mov	r0, r3
     672:	4b50      	ldr	r3, [pc, #320]	; (7b4 <_ZN22FlapperValveController8SelftestEv+0x184>)
     674:	4798      	blx	r3
	delay_ms(10);
     676:	200a      	movs	r0, #10
     678:	4b4f      	ldr	r3, [pc, #316]	; (7b8 <_ZN22FlapperValveController8SelftestEv+0x188>)
     67a:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     682:	2101      	movs	r1, #1
     684:	4618      	mov	r0, r3
     686:	4b4b      	ldr	r3, [pc, #300]	; (7b4 <_ZN22FlapperValveController8SelftestEv+0x184>)
     688:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     690:	7bba      	ldrb	r2, [r7, #14]
     692:	4611      	mov	r1, r2
     694:	4618      	mov	r0, r3
     696:	4b49      	ldr	r3, [pc, #292]	; (7bc <_ZN22FlapperValveController8SelftestEv+0x18c>)
     698:	4798      	blx	r3
	singlefv->SetDirection(false);
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     6a0:	2100      	movs	r1, #0
     6a2:	4618      	mov	r0, r3
     6a4:	4b46      	ldr	r3, [pc, #280]	; (7c0 <_ZN22FlapperValveController8SelftestEv+0x190>)
     6a6:	4798      	blx	r3
	if (singlefv->ReadActualPosition()>localSetpoint)
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     6ae:	4618      	mov	r0, r3
     6b0:	4b44      	ldr	r3, [pc, #272]	; (7c4 <_ZN22FlapperValveController8SelftestEv+0x194>)
     6b2:	4798      	blx	r3
     6b4:	4603      	mov	r3, r0
     6b6:	461a      	mov	r2, r3
     6b8:	7bbb      	ldrb	r3, [r7, #14]
     6ba:	429a      	cmp	r2, r3
     6bc:	bfcc      	ite	gt
     6be:	2301      	movgt	r3, #1
     6c0:	2300      	movle	r3, #0
     6c2:	b2db      	uxtb	r3, r3
     6c4:	2b00      	cmp	r3, #0
     6c6:	d007      	beq.n	6d8 <_ZN22FlapperValveController8SelftestEv+0xa8>
	{
		singlefv->SetDirection(true);
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     6ce:	2101      	movs	r1, #1
     6d0:	4618      	mov	r0, r3
     6d2:	4b3b      	ldr	r3, [pc, #236]	; (7c0 <_ZN22FlapperValveController8SelftestEv+0x190>)
     6d4:	4798      	blx	r3
     6d6:	e006      	b.n	6e6 <_ZN22FlapperValveController8SelftestEv+0xb6>
	}
	else
	{
		singlefv->SetDirection(false);
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     6de:	2100      	movs	r1, #0
     6e0:	4618      	mov	r0, r3
     6e2:	4b37      	ldr	r3, [pc, #220]	; (7c0 <_ZN22FlapperValveController8SelftestEv+0x190>)
     6e4:	4798      	blx	r3
	}
	
		if (valve_ID==0)
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
     6ec:	2b00      	cmp	r3, #0
     6ee:	d106      	bne.n	6fe <_ZN22FlapperValveController8SelftestEv+0xce>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
     6f0:	f242 7210 	movw	r2, #10000	; 0x2710
     6f4:	4934      	ldr	r1, [pc, #208]	; (7c8 <_ZN22FlapperValveController8SelftestEv+0x198>)
     6f6:	4835      	ldr	r0, [pc, #212]	; (7cc <_ZN22FlapperValveController8SelftestEv+0x19c>)
     6f8:	4b35      	ldr	r3, [pc, #212]	; (7d0 <_ZN22FlapperValveController8SelftestEv+0x1a0>)
     6fa:	4798      	blx	r3
     6fc:	e005      	b.n	70a <_ZN22FlapperValveController8SelftestEv+0xda>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
     6fe:	f242 7210 	movw	r2, #10000	; 0x2710
     702:	4934      	ldr	r1, [pc, #208]	; (7d4 <_ZN22FlapperValveController8SelftestEv+0x1a4>)
     704:	4831      	ldr	r0, [pc, #196]	; (7cc <_ZN22FlapperValveController8SelftestEv+0x19c>)
     706:	4b32      	ldr	r3, [pc, #200]	; (7d0 <_ZN22FlapperValveController8SelftestEv+0x1a0>)
     708:	4798      	blx	r3
		}
	singlefv->SetEnable(true);
     70a:	687b      	ldr	r3, [r7, #4]
     70c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     710:	2101      	movs	r1, #1
     712:	4618      	mov	r0, r3
     714:	4b25      	ldr	r3, [pc, #148]	; (7ac <_ZN22FlapperValveController8SelftestEv+0x17c>)
     716:	4798      	blx	r3

	localPosition=singlefv->ReadActualPosition();
     718:	687b      	ldr	r3, [r7, #4]
     71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     71e:	4618      	mov	r0, r3
     720:	4b28      	ldr	r3, [pc, #160]	; (7c4 <_ZN22FlapperValveController8SelftestEv+0x194>)
     722:	4798      	blx	r3
     724:	4603      	mov	r3, r0
     726:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
     728:	687b      	ldr	r3, [r7, #4]
     72a:	2200      	movs	r2, #0
     72c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
     730:	7bfa      	ldrb	r2, [r7, #15]
     732:	7bbb      	ldrb	r3, [r7, #14]
     734:	1ad3      	subs	r3, r2, r3
     736:	2b00      	cmp	r3, #0
     738:	bfb8      	it	lt
     73a:	425b      	neglt	r3, r3
     73c:	2b0c      	cmp	r3, #12
     73e:	bfcc      	ite	gt
     740:	2301      	movgt	r3, #1
     742:	2300      	movle	r3, #0
     744:	b2db      	uxtb	r3, r3
     746:	461a      	mov	r2, r3
     748:	687b      	ldr	r3, [r7, #4]
     74a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
     74e:	b2db      	uxtb	r3, r3
     750:	f083 0301 	eor.w	r3, r3, #1
     754:	b2db      	uxtb	r3, r3
     756:	4013      	ands	r3, r2
     758:	2b00      	cmp	r3, #0
     75a:	bf14      	ite	ne
     75c:	2301      	movne	r3, #1
     75e:	2300      	moveq	r3, #0
     760:	b2db      	uxtb	r3, r3
     762:	2b00      	cmp	r3, #0
     764:	d008      	beq.n	778 <_ZN22FlapperValveController8SelftestEv+0x148>

	{

		localPosition=singlefv->ReadActualPosition();
     766:	687b      	ldr	r3, [r7, #4]
     768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     76c:	4618      	mov	r0, r3
     76e:	4b15      	ldr	r3, [pc, #84]	; (7c4 <_ZN22FlapperValveController8SelftestEv+0x194>)
     770:	4798      	blx	r3
     772:	4603      	mov	r3, r0
     774:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
     776:	e7db      	b.n	730 <_ZN22FlapperValveController8SelftestEv+0x100>

	}
	RemoveTimeoutTask();
     778:	6878      	ldr	r0, [r7, #4]
     77a:	4b17      	ldr	r3, [pc, #92]	; (7d8 <_ZN22FlapperValveController8SelftestEv+0x1a8>)
     77c:	4798      	blx	r3

	singlefv->SetEnable(false);
     77e:	687b      	ldr	r3, [r7, #4]
     780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     784:	2100      	movs	r1, #0
     786:	4618      	mov	r0, r3
     788:	4b08      	ldr	r3, [pc, #32]	; (7ac <_ZN22FlapperValveController8SelftestEv+0x17c>)
     78a:	4798      	blx	r3
	return !timeoutFlapperValveController;
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
     792:	b2db      	uxtb	r3, r3
     794:	f083 0301 	eor.w	r3, r3, #1
     798:	b2db      	uxtb	r3, r3
}
     79a:	4618      	mov	r0, r3
     79c:	3710      	adds	r7, #16
     79e:	46bd      	mov	sp, r7
     7a0:	bd80      	pop	{r7, pc}
     7a2:	bf00      	nop
     7a4:	00011138 	.word	0x00011138
     7a8:	000004c5 	.word	0x000004c5
     7ac:	00000bfd 	.word	0x00000bfd
     7b0:	00000d6d 	.word	0x00000d6d
     7b4:	00000cf5 	.word	0x00000cf5
     7b8:	00002e19 	.word	0x00002e19
     7bc:	00000de5 	.word	0x00000de5
     7c0:	00000c7d 	.word	0x00000c7d
     7c4:	00000e1d 	.word	0x00000e1d
     7c8:	0000035d 	.word	0x0000035d
     7cc:	200006c4 	.word	0x200006c4
     7d0:	0000e891 	.word	0x0000e891
     7d4:	00000389 	.word	0x00000389
     7d8:	000007dd 	.word	0x000007dd

000007dc <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:

void	FlapperValveController::RemoveTimeoutTask(void){
     7dc:	b580      	push	{r7, lr}
     7de:	b082      	sub	sp, #8
     7e0:	af00      	add	r7, sp, #0
     7e2:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
     7ea:	2b00      	cmp	r3, #0
     7ec:	d104      	bne.n	7f8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
     7ee:	4906      	ldr	r1, [pc, #24]	; (808 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
     7f0:	4806      	ldr	r0, [pc, #24]	; (80c <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
     7f2:	4b07      	ldr	r3, [pc, #28]	; (810 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
     7f4:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
     7f6:	e003      	b.n	800 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
     7f8:	4906      	ldr	r1, [pc, #24]	; (814 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
     7fa:	4804      	ldr	r0, [pc, #16]	; (80c <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
     7fc:	4b04      	ldr	r3, [pc, #16]	; (810 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
     7fe:	4798      	blx	r3
}
     800:	bf00      	nop
     802:	3708      	adds	r7, #8
     804:	46bd      	mov	sp, r7
     806:	bd80      	pop	{r7, pc}
     808:	0000035d 	.word	0x0000035d
     80c:	200006c4 	.word	0x200006c4
     810:	0000e839 	.word	0x0000e839
     814:	00000389 	.word	0x00000389

00000818 <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
     818:	b590      	push	{r4, r7, lr}
     81a:	b083      	sub	sp, #12
     81c:	af00      	add	r7, sp, #0
     81e:	6078      	str	r0, [r7, #4]
     820:	4c05      	ldr	r4, [pc, #20]	; (838 <__tcf_0+0x20>)
     822:	4b06      	ldr	r3, [pc, #24]	; (83c <__tcf_0+0x24>)
     824:	429c      	cmp	r4, r3
     826:	d004      	beq.n	832 <__tcf_0+0x1a>
     828:	3c78      	subs	r4, #120	; 0x78
     82a:	4620      	mov	r0, r4
     82c:	4b04      	ldr	r3, [pc, #16]	; (840 <__tcf_0+0x28>)
     82e:	4798      	blx	r3
     830:	e7f7      	b.n	822 <__tcf_0+0xa>
     832:	370c      	adds	r7, #12
     834:	46bd      	mov	sp, r7
     836:	bd90      	pop	{r4, r7, pc}
     838:	2000089c 	.word	0x2000089c
     83c:	200007ac 	.word	0x200007ac
     840:	00000a11 	.word	0x00000a11

00000844 <_Z41__static_initialization_and_destruction_0ii>:

     844:	b5b0      	push	{r4, r5, r7, lr}
     846:	b082      	sub	sp, #8
     848:	af00      	add	r7, sp, #0
     84a:	6078      	str	r0, [r7, #4]
     84c:	6039      	str	r1, [r7, #0]
     84e:	687b      	ldr	r3, [r7, #4]
     850:	2b01      	cmp	r3, #1
     852:	d16d      	bne.n	930 <_Z41__static_initialization_and_destruction_0ii+0xec>
     854:	683b      	ldr	r3, [r7, #0]
     856:	f64f 72ff 	movw	r2, #65535	; 0xffff
     85a:	4293      	cmp	r3, r2
     85c:	d168      	bne.n	930 <_Z41__static_initialization_and_destruction_0ii+0xec>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     85e:	4936      	ldr	r1, [pc, #216]	; (938 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     860:	4836      	ldr	r0, [pc, #216]	; (93c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     862:	4b37      	ldr	r3, [pc, #220]	; (940 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     864:	4798      	blx	r3
     866:	4a37      	ldr	r2, [pc, #220]	; (944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     868:	4937      	ldr	r1, [pc, #220]	; (948 <_Z41__static_initialization_and_destruction_0ii+0x104>)
     86a:	4834      	ldr	r0, [pc, #208]	; (93c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     86c:	4b37      	ldr	r3, [pc, #220]	; (94c <_Z41__static_initialization_and_destruction_0ii+0x108>)
     86e:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     870:	4937      	ldr	r1, [pc, #220]	; (950 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     872:	4838      	ldr	r0, [pc, #224]	; (954 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     874:	4b38      	ldr	r3, [pc, #224]	; (958 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     876:	4798      	blx	r3
     878:	4a32      	ldr	r2, [pc, #200]	; (944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     87a:	4938      	ldr	r1, [pc, #224]	; (95c <_Z41__static_initialization_and_destruction_0ii+0x118>)
     87c:	4835      	ldr	r0, [pc, #212]	; (954 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     87e:	4b33      	ldr	r3, [pc, #204]	; (94c <_Z41__static_initialization_and_destruction_0ii+0x108>)
     880:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     882:	4937      	ldr	r1, [pc, #220]	; (960 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     884:	4837      	ldr	r0, [pc, #220]	; (964 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     886:	4b34      	ldr	r3, [pc, #208]	; (958 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     888:	4798      	blx	r3
     88a:	4a2e      	ldr	r2, [pc, #184]	; (944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     88c:	4933      	ldr	r1, [pc, #204]	; (95c <_Z41__static_initialization_and_destruction_0ii+0x118>)
     88e:	4835      	ldr	r0, [pc, #212]	; (964 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     890:	4b2e      	ldr	r3, [pc, #184]	; (94c <_Z41__static_initialization_and_destruction_0ii+0x108>)
     892:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     894:	4934      	ldr	r1, [pc, #208]	; (968 <_Z41__static_initialization_and_destruction_0ii+0x124>)
     896:	4835      	ldr	r0, [pc, #212]	; (96c <_Z41__static_initialization_and_destruction_0ii+0x128>)
     898:	4b2f      	ldr	r3, [pc, #188]	; (958 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     89a:	4798      	blx	r3
     89c:	4a29      	ldr	r2, [pc, #164]	; (944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     89e:	492f      	ldr	r1, [pc, #188]	; (95c <_Z41__static_initialization_and_destruction_0ii+0x118>)
     8a0:	4832      	ldr	r0, [pc, #200]	; (96c <_Z41__static_initialization_and_destruction_0ii+0x128>)
     8a2:	4b2a      	ldr	r3, [pc, #168]	; (94c <_Z41__static_initialization_and_destruction_0ii+0x108>)
     8a4:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     8a6:	4932      	ldr	r1, [pc, #200]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     8a8:	4832      	ldr	r0, [pc, #200]	; (974 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     8aa:	4b2b      	ldr	r3, [pc, #172]	; (958 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     8ac:	4798      	blx	r3
     8ae:	4a25      	ldr	r2, [pc, #148]	; (944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     8b0:	492a      	ldr	r1, [pc, #168]	; (95c <_Z41__static_initialization_and_destruction_0ii+0x118>)
     8b2:	4830      	ldr	r0, [pc, #192]	; (974 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     8b4:	4b25      	ldr	r3, [pc, #148]	; (94c <_Z41__static_initialization_and_destruction_0ii+0x108>)
     8b6:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     8b8:	492f      	ldr	r1, [pc, #188]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x134>)
     8ba:	4830      	ldr	r0, [pc, #192]	; (97c <_Z41__static_initialization_and_destruction_0ii+0x138>)
     8bc:	4b26      	ldr	r3, [pc, #152]	; (958 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     8be:	4798      	blx	r3
     8c0:	4a20      	ldr	r2, [pc, #128]	; (944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     8c2:	4926      	ldr	r1, [pc, #152]	; (95c <_Z41__static_initialization_and_destruction_0ii+0x118>)
     8c4:	482d      	ldr	r0, [pc, #180]	; (97c <_Z41__static_initialization_and_destruction_0ii+0x138>)
     8c6:	4b21      	ldr	r3, [pc, #132]	; (94c <_Z41__static_initialization_and_destruction_0ii+0x108>)
     8c8:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     8ca:	492d      	ldr	r1, [pc, #180]	; (980 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
     8cc:	482d      	ldr	r0, [pc, #180]	; (984 <_Z41__static_initialization_and_destruction_0ii+0x140>)
     8ce:	4b22      	ldr	r3, [pc, #136]	; (958 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     8d0:	4798      	blx	r3
     8d2:	4a1c      	ldr	r2, [pc, #112]	; (944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     8d4:	4921      	ldr	r1, [pc, #132]	; (95c <_Z41__static_initialization_and_destruction_0ii+0x118>)
     8d6:	482b      	ldr	r0, [pc, #172]	; (984 <_Z41__static_initialization_and_destruction_0ii+0x140>)
     8d8:	4b1c      	ldr	r3, [pc, #112]	; (94c <_Z41__static_initialization_and_destruction_0ii+0x108>)
     8da:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     8dc:	492a      	ldr	r1, [pc, #168]	; (988 <_Z41__static_initialization_and_destruction_0ii+0x144>)
     8de:	482b      	ldr	r0, [pc, #172]	; (98c <_Z41__static_initialization_and_destruction_0ii+0x148>)
     8e0:	4b1d      	ldr	r3, [pc, #116]	; (958 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     8e2:	4798      	blx	r3
     8e4:	4a17      	ldr	r2, [pc, #92]	; (944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     8e6:	491d      	ldr	r1, [pc, #116]	; (95c <_Z41__static_initialization_and_destruction_0ii+0x118>)
     8e8:	4828      	ldr	r0, [pc, #160]	; (98c <_Z41__static_initialization_and_destruction_0ii+0x148>)
     8ea:	4b18      	ldr	r3, [pc, #96]	; (94c <_Z41__static_initialization_and_destruction_0ii+0x108>)
     8ec:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
     8ee:	4928      	ldr	r1, [pc, #160]	; (990 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
     8f0:	4828      	ldr	r0, [pc, #160]	; (994 <_Z41__static_initialization_and_destruction_0ii+0x150>)
     8f2:	4b19      	ldr	r3, [pc, #100]	; (958 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     8f4:	4798      	blx	r3
     8f6:	4a13      	ldr	r2, [pc, #76]	; (944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     8f8:	4918      	ldr	r1, [pc, #96]	; (95c <_Z41__static_initialization_and_destruction_0ii+0x118>)
     8fa:	4826      	ldr	r0, [pc, #152]	; (994 <_Z41__static_initialization_and_destruction_0ii+0x150>)
     8fc:	4b13      	ldr	r3, [pc, #76]	; (94c <_Z41__static_initialization_and_destruction_0ii+0x108>)
     8fe:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
     900:	4b25      	ldr	r3, [pc, #148]	; (998 <_Z41__static_initialization_and_destruction_0ii+0x154>)
     902:	2401      	movs	r4, #1
     904:	461d      	mov	r5, r3
     906:	2c00      	cmp	r4, #0
     908:	db05      	blt.n	916 <_Z41__static_initialization_and_destruction_0ii+0xd2>
     90a:	4628      	mov	r0, r5
     90c:	4b23      	ldr	r3, [pc, #140]	; (99c <_Z41__static_initialization_and_destruction_0ii+0x158>)
     90e:	4798      	blx	r3
     910:	3578      	adds	r5, #120	; 0x78
     912:	3c01      	subs	r4, #1
     914:	e7f7      	b.n	906 <_Z41__static_initialization_and_destruction_0ii+0xc2>
     916:	4a0b      	ldr	r2, [pc, #44]	; (944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     918:	4921      	ldr	r1, [pc, #132]	; (9a0 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
     91a:	2000      	movs	r0, #0
     91c:	4b0b      	ldr	r3, [pc, #44]	; (94c <_Z41__static_initialization_and_destruction_0ii+0x108>)
     91e:	4798      	blx	r3
     920:	4820      	ldr	r0, [pc, #128]	; (9a4 <_Z41__static_initialization_and_destruction_0ii+0x160>)
     922:	4b21      	ldr	r3, [pc, #132]	; (9a8 <_Z41__static_initialization_and_destruction_0ii+0x164>)
     924:	4798      	blx	r3
     926:	4a07      	ldr	r2, [pc, #28]	; (944 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     928:	4920      	ldr	r1, [pc, #128]	; (9ac <_Z41__static_initialization_and_destruction_0ii+0x168>)
     92a:	481e      	ldr	r0, [pc, #120]	; (9a4 <_Z41__static_initialization_and_destruction_0ii+0x160>)
     92c:	4b07      	ldr	r3, [pc, #28]	; (94c <_Z41__static_initialization_and_destruction_0ii+0x108>)
     92e:	4798      	blx	r3
     930:	bf00      	nop
     932:	3708      	adds	r7, #8
     934:	46bd      	mov	sp, r7
     936:	bdb0      	pop	{r4, r5, r7, pc}
     938:	2000ac18 	.word	0x2000ac18
     93c:	2000066c 	.word	0x2000066c
     940:	0000de79 	.word	0x0000de79
     944:	20000000 	.word	0x20000000
     948:	0000de95 	.word	0x0000de95
     94c:	000108c5 	.word	0x000108c5
     950:	2000aae8 	.word	0x2000aae8
     954:	20000684 	.word	0x20000684
     958:	0000e5e9 	.word	0x0000e5e9
     95c:	0000e621 	.word	0x0000e621
     960:	2000ab7c 	.word	0x2000ab7c
     964:	200006a4 	.word	0x200006a4
     968:	2000aca0 	.word	0x2000aca0
     96c:	200006c4 	.word	0x200006c4
     970:	2000ab9c 	.word	0x2000ab9c
     974:	200006e4 	.word	0x200006e4
     978:	2000ac60 	.word	0x2000ac60
     97c:	20000704 	.word	0x20000704
     980:	2000ac80 	.word	0x2000ac80
     984:	20000724 	.word	0x20000724
     988:	2000ab58 	.word	0x2000ab58
     98c:	20000744 	.word	0x20000744
     990:	2000abf8 	.word	0x2000abf8
     994:	20000764 	.word	0x20000764
     998:	200007ac 	.word	0x200007ac
     99c:	000009c5 	.word	0x000009c5
     9a0:	00000819 	.word	0x00000819
     9a4:	2000089c 	.word	0x2000089c
     9a8:	000003b5 	.word	0x000003b5
     9ac:	00000441 	.word	0x00000441

000009b0 <_GLOBAL__sub_I_ptrFlapperValveController>:
     9b0:	b580      	push	{r7, lr}
     9b2:	af00      	add	r7, sp, #0
     9b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     9b8:	2001      	movs	r0, #1
     9ba:	4b01      	ldr	r3, [pc, #4]	; (9c0 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
     9bc:	4798      	blx	r3
     9be:	bd80      	pop	{r7, pc}
     9c0:	00000845 	.word	0x00000845

000009c4 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
     9c4:	b580      	push	{r7, lr}
     9c6:	b082      	sub	sp, #8
     9c8:	af00      	add	r7, sp, #0
     9ca:	6078      	str	r0, [r7, #4]
     9cc:	687b      	ldr	r3, [r7, #4]
     9ce:	4618      	mov	r0, r3
     9d0:	4b0c      	ldr	r3, [pc, #48]	; (a04 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
     9d2:	4798      	blx	r3
{
	valveID=0;
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	2200      	movs	r2, #0
     9d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	i2c=&i2cStatic;
     9dc:	687b      	ldr	r3, [r7, #4]
     9de:	4a0a      	ldr	r2, [pc, #40]	; (a08 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
     9e0:	64da      	str	r2, [r3, #76]	; 0x4c
	fv1StatusChanged=false;
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	2200      	movs	r2, #0
     9e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ptrSingleFlapperValveClass=this;
     9ea:	4a08      	ldr	r2, [pc, #32]	; (a0c <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	6013      	str	r3, [r2, #0]
	isOK=false;
     9f0:	687b      	ldr	r3, [r7, #4]
     9f2:	2200      	movs	r2, #0
     9f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
} //FlapperValve_Class
     9f8:	687b      	ldr	r3, [r7, #4]
     9fa:	4618      	mov	r0, r3
     9fc:	3708      	adds	r7, #8
     9fe:	46bd      	mov	sp, r7
     a00:	bd80      	pop	{r7, pc}
     a02:	bf00      	nop
     a04:	0000e035 	.word	0x0000e035
     a08:	20000a94 	.word	0x20000a94
     a0c:	20000a90 	.word	0x20000a90

00000a10 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
     a10:	b580      	push	{r7, lr}
     a12:	b082      	sub	sp, #8
     a14:	af00      	add	r7, sp, #0
     a16:	6078      	str	r0, [r7, #4]
     a18:	687b      	ldr	r3, [r7, #4]
     a1a:	4618      	mov	r0, r3
     a1c:	4b03      	ldr	r3, [pc, #12]	; (a2c <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
     a1e:	4798      	blx	r3
{
} //~FlapperValve_Class
     a20:	687b      	ldr	r3, [r7, #4]
     a22:	4618      	mov	r0, r3
     a24:	3708      	adds	r7, #8
     a26:	46bd      	mov	sp, r7
     a28:	bd80      	pop	{r7, pc}
     a2a:	bf00      	nop
     a2c:	0000e049 	.word	0x0000e049

00000a30 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
     a30:	b580      	push	{r7, lr}
     a32:	b082      	sub	sp, #8
     a34:	af00      	add	r7, sp, #0
     a36:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
     a38:	687b      	ldr	r3, [r7, #4]
     a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     a3c:	7a1b      	ldrb	r3, [r3, #8]
     a3e:	b2db      	uxtb	r3, r3
     a40:	2b00      	cmp	r3, #0
     a42:	d104      	bne.n	a4e <_ZN24SingleFlapperValve_Class4InitEv+0x1e>
	{
	} 
	else
	{
		i2c->Init();
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     a48:	4618      	mov	r0, r3
     a4a:	4b19      	ldr	r3, [pc, #100]	; (ab0 <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
     a4c:	4798      	blx	r3
	}
		

		if (i2c->isOK)
     a4e:	687b      	ldr	r3, [r7, #4]
     a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     a52:	7a5b      	ldrb	r3, [r3, #9]
     a54:	b2db      	uxtb	r3, r3
     a56:	2b00      	cmp	r3, #0
     a58:	d01b      	beq.n	a92 <_ZN24SingleFlapperValve_Class4InitEv+0x62>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
     a60:	4619      	mov	r1, r3
     a62:	6878      	ldr	r0, [r7, #4]
     a64:	4b13      	ldr	r3, [pc, #76]	; (ab4 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
     a66:	4798      	blx	r3
			expanders[0]->SetPortInput();
     a68:	687b      	ldr	r3, [r7, #4]
     a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     a6c:	4618      	mov	r0, r3
     a6e:	4b12      	ldr	r3, [pc, #72]	; (ab8 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
     a70:	4798      	blx	r3
			expanders[1]->SetPortInput(0x82);
     a72:	687b      	ldr	r3, [r7, #4]
     a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     a76:	2182      	movs	r1, #130	; 0x82
     a78:	4618      	mov	r0, r3
     a7a:	4b10      	ldr	r3, [pc, #64]	; (abc <_ZN24SingleFlapperValve_Class4InitEv+0x8c>)
     a7c:	4798      	blx	r3
			expanders[2]->SetPortOutput();
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     a82:	4618      	mov	r0, r3
     a84:	4b0e      	ldr	r3, [pc, #56]	; (ac0 <_ZN24SingleFlapperValve_Class4InitEv+0x90>)
     a86:	4798      	blx	r3
			expanders[3]->SetPortInput();
     a88:	687b      	ldr	r3, [r7, #4]
     a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     a8c:	4618      	mov	r0, r3
     a8e:	4b0a      	ldr	r3, [pc, #40]	; (ab8 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
     a90:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
     a92:	687b      	ldr	r3, [r7, #4]
     a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     a96:	7a5b      	ldrb	r3, [r3, #9]
     a98:	b2da      	uxtb	r2, r3
     a9a:	687b      	ldr	r3, [r7, #4]
     a9c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		
		return isOK;
     aa0:	687b      	ldr	r3, [r7, #4]
     aa2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
     aa6:	b2db      	uxtb	r3, r3


}
     aa8:	4618      	mov	r0, r3
     aaa:	3708      	adds	r7, #8
     aac:	46bd      	mov	sp, r7
     aae:	bd80      	pop	{r7, pc}
     ab0:	0000dea9 	.word	0x0000dea9
     ab4:	00000ac5 	.word	0x00000ac5
     ab8:	0000e3ad 	.word	0x0000e3ad
     abc:	0000e3f1 	.word	0x0000e3f1
     ac0:	0000e465 	.word	0x0000e465

00000ac4 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
	valveID=valve_id;
	return Init();
}
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
     ac4:	b580      	push	{r7, lr}
     ac6:	b084      	sub	sp, #16
     ac8:	af00      	add	r7, sp, #0
     aca:	6078      	str	r0, [r7, #4]
     acc:	460b      	mov	r3, r1
     ace:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
     ad0:	2300      	movs	r3, #0
     ad2:	60fb      	str	r3, [r7, #12]
     ad4:	68fb      	ldr	r3, [r7, #12]
     ad6:	2b03      	cmp	r3, #3
     ad8:	dc2d      	bgt.n	b36 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x72>
	{
		currentExpander=&(expandersStatic[valveID][i]);
     ada:	687b      	ldr	r3, [r7, #4]
     adc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
     ae0:	4619      	mov	r1, r3
     ae2:	68fb      	ldr	r3, [r7, #12]
     ae4:	461a      	mov	r2, r3
     ae6:	00d2      	lsls	r2, r2, #3
     ae8:	1ad2      	subs	r2, r2, r3
     aea:	0093      	lsls	r3, r2, #2
     aec:	461a      	mov	r2, r3
     aee:	460b      	mov	r3, r1
     af0:	00db      	lsls	r3, r3, #3
     af2:	1a5b      	subs	r3, r3, r1
     af4:	011b      	lsls	r3, r3, #4
     af6:	4413      	add	r3, r2
     af8:	4a11      	ldr	r2, [pc, #68]	; (b40 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x7c>)
     afa:	441a      	add	r2, r3
     afc:	687b      	ldr	r3, [r7, #4]
     afe:	669a      	str	r2, [r3, #104]	; 0x68
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
     b00:	687b      	ldr	r3, [r7, #4]
     b02:	6e98      	ldr	r0, [r3, #104]	; 0x68
     b04:	68fb      	ldr	r3, [r7, #12]
     b06:	b2da      	uxtb	r2, r3
     b08:	78fb      	ldrb	r3, [r7, #3]
     b0a:	009b      	lsls	r3, r3, #2
     b0c:	b2db      	uxtb	r3, r3
     b0e:	4413      	add	r3, r2
     b10:	b2db      	uxtb	r3, r3
     b12:	3320      	adds	r3, #32
     b14:	b2d9      	uxtb	r1, r3
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     b1a:	461a      	mov	r2, r3
     b1c:	4b09      	ldr	r3, [pc, #36]	; (b44 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
     b1e:	4798      	blx	r3
		expanders[i]=currentExpander;
     b20:	687b      	ldr	r3, [r7, #4]
     b22:	6e99      	ldr	r1, [r3, #104]	; 0x68
     b24:	687b      	ldr	r3, [r7, #4]
     b26:	68fa      	ldr	r2, [r7, #12]
     b28:	3216      	adds	r2, #22
     b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
     b2e:	68fb      	ldr	r3, [r7, #12]
     b30:	3301      	adds	r3, #1
     b32:	60fb      	str	r3, [r7, #12]
     b34:	e7ce      	b.n	ad4 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
     b36:	2300      	movs	r3, #0
}
     b38:	4618      	mov	r0, r3
     b3a:	3710      	adds	r7, #16
     b3c:	46bd      	mov	sp, r7
     b3e:	bd80      	pop	{r7, pc}
     b40:	20000aac 	.word	0x20000aac
     b44:	0000e239 	.word	0x0000e239

00000b48 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
     b48:	b590      	push	{r4, r7, lr}
     b4a:	b085      	sub	sp, #20
     b4c:	af00      	add	r7, sp, #0
     b4e:	60f8      	str	r0, [r7, #12]
     b50:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
     b52:	68bb      	ldr	r3, [r7, #8]
     b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     b56:	4618      	mov	r0, r3
     b58:	4b0f      	ldr	r3, [pc, #60]	; (b98 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x50>)
     b5a:	4798      	blx	r3
     b5c:	4603      	mov	r3, r0
     b5e:	461a      	mov	r2, r3
     b60:	68bb      	ldr	r3, [r7, #8]
     b62:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	controlOutputs=FillControlOutputs(value);
     b66:	68b9      	ldr	r1, [r7, #8]
     b68:	68bb      	ldr	r3, [r7, #8]
     b6a:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
     b6e:	68bc      	ldr	r4, [r7, #8]
     b70:	463b      	mov	r3, r7
     b72:	4618      	mov	r0, r3
     b74:	4b09      	ldr	r3, [pc, #36]	; (b9c <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
     b76:	4798      	blx	r3
     b78:	f104 033c 	add.w	r3, r4, #60	; 0x3c
     b7c:	463a      	mov	r2, r7
     b7e:	6810      	ldr	r0, [r2, #0]
     b80:	6851      	ldr	r1, [r2, #4]
     b82:	c303      	stmia	r3!, {r0, r1}
	return controlOutputs;
     b84:	68fa      	ldr	r2, [r7, #12]
     b86:	68bb      	ldr	r3, [r7, #8]
     b88:	333c      	adds	r3, #60	; 0x3c
     b8a:	cb03      	ldmia	r3!, {r0, r1}
     b8c:	6010      	str	r0, [r2, #0]
     b8e:	6051      	str	r1, [r2, #4]
}
     b90:	68f8      	ldr	r0, [r7, #12]
     b92:	3714      	adds	r7, #20
     b94:	46bd      	mov	sp, r7
     b96:	bd90      	pop	{r4, r7, pc}
     b98:	0000e2ed 	.word	0x0000e2ed
     b9c:	0000e145 	.word	0x0000e145

00000ba0 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
     ba0:	b590      	push	{r4, r7, lr}
     ba2:	b085      	sub	sp, #20
     ba4:	af00      	add	r7, sp, #0
     ba6:	60f8      	str	r0, [r7, #12]
     ba8:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
     baa:	68bb      	ldr	r3, [r7, #8]
     bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     bae:	4618      	mov	r0, r3
     bb0:	4b10      	ldr	r3, [pc, #64]	; (bf4 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
     bb2:	4798      	blx	r3
     bb4:	4603      	mov	r3, r0
     bb6:	461a      	mov	r2, r3
     bb8:	68bb      	ldr	r3, [r7, #8]
     bba:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	statusInputs=FillInputStatus(value);
     bbe:	68b9      	ldr	r1, [r7, #8]
     bc0:	68bb      	ldr	r3, [r7, #8]
     bc2:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
     bc6:	68bc      	ldr	r4, [r7, #8]
     bc8:	463b      	mov	r3, r7
     bca:	4618      	mov	r0, r3
     bcc:	4b0a      	ldr	r3, [pc, #40]	; (bf8 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
     bce:	4798      	blx	r3
     bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
     bd4:	463a      	mov	r2, r7
     bd6:	6810      	ldr	r0, [r2, #0]
     bd8:	6018      	str	r0, [r3, #0]
     bda:	8892      	ldrh	r2, [r2, #4]
     bdc:	809a      	strh	r2, [r3, #4]
	return statusInputs;
     bde:	68fa      	ldr	r2, [r7, #12]
     be0:	68bb      	ldr	r3, [r7, #8]
     be2:	3344      	adds	r3, #68	; 0x44
     be4:	6818      	ldr	r0, [r3, #0]
     be6:	6010      	str	r0, [r2, #0]
     be8:	889b      	ldrh	r3, [r3, #4]
     bea:	8093      	strh	r3, [r2, #4]
}
     bec:	68f8      	ldr	r0, [r7, #12]
     bee:	3714      	adds	r7, #20
     bf0:	46bd      	mov	sp, r7
     bf2:	bd90      	pop	{r4, r7, pc}
     bf4:	0000e2ed 	.word	0x0000e2ed
     bf8:	0000e0f1 	.word	0x0000e0f1

00000bfc <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
     bfc:	b580      	push	{r7, lr}
     bfe:	b082      	sub	sp, #8
     c00:	af00      	add	r7, sp, #0
     c02:	6078      	str	r0, [r7, #4]
     c04:	460b      	mov	r3, r1
     c06:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
     c08:	687b      	ldr	r3, [r7, #4]
     c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     c0c:	4618      	mov	r0, r3
     c0e:	4b19      	ldr	r3, [pc, #100]	; (c74 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
     c10:	4798      	blx	r3
     c12:	4603      	mov	r3, r0
     c14:	461a      	mov	r2, r3
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x01:value&0xfe;
     c1c:	78fb      	ldrb	r3, [r7, #3]
     c1e:	2b00      	cmp	r3, #0
     c20:	d006      	beq.n	c30 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
     c22:	687b      	ldr	r3, [r7, #4]
     c24:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     c28:	f043 0301 	orr.w	r3, r3, #1
     c2c:	b2db      	uxtb	r3, r3
     c2e:	e005      	b.n	c3c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
     c30:	687b      	ldr	r3, [r7, #4]
     c32:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     c36:	f023 0301 	bic.w	r3, r3, #1
     c3a:	b2db      	uxtb	r3, r3
     c3c:	687a      	ldr	r2, [r7, #4]
     c3e:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	controlOutputs.niAlcFvMotorEnable=b;
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	78fa      	ldrb	r2, [r7, #3]
     c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	value=expanders[1]->WriteGPIORegister(value);
     c4a:	687b      	ldr	r3, [r7, #4]
     c4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     c54:	4619      	mov	r1, r3
     c56:	4610      	mov	r0, r2
     c58:	4b07      	ldr	r3, [pc, #28]	; (c78 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
     c5a:	4798      	blx	r3
     c5c:	4603      	mov	r3, r0
     c5e:	461a      	mov	r2, r3
     c60:	687b      	ldr	r3, [r7, #4]
     c62:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
     c6c:	4618      	mov	r0, r3
     c6e:	3708      	adds	r7, #8
     c70:	46bd      	mov	sp, r7
     c72:	bd80      	pop	{r7, pc}
     c74:	0000e2ed 	.word	0x0000e2ed
     c78:	0000e371 	.word	0x0000e371

00000c7c <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
     c7c:	b580      	push	{r7, lr}
     c7e:	b082      	sub	sp, #8
     c80:	af00      	add	r7, sp, #0
     c82:	6078      	str	r0, [r7, #4]
     c84:	460b      	mov	r3, r1
     c86:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
     c88:	687b      	ldr	r3, [r7, #4]
     c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     c8c:	4618      	mov	r0, r3
     c8e:	4b17      	ldr	r3, [pc, #92]	; (cec <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
     c90:	4798      	blx	r3
     c92:	4603      	mov	r3, r0
     c94:	461a      	mov	r2, r3
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x20:value&0xdf;
     c9c:	78fb      	ldrb	r3, [r7, #3]
     c9e:	2b00      	cmp	r3, #0
     ca0:	d006      	beq.n	cb0 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
     ca2:	687b      	ldr	r3, [r7, #4]
     ca4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     ca8:	f043 0320 	orr.w	r3, r3, #32
     cac:	b2db      	uxtb	r3, r3
     cae:	e005      	b.n	cbc <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
     cb0:	687b      	ldr	r3, [r7, #4]
     cb2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     cb6:	f023 0320 	bic.w	r3, r3, #32
     cba:	b2db      	uxtb	r3, r3
     cbc:	687a      	ldr	r2, [r7, #4]
     cbe:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     ccc:	4619      	mov	r1, r3
     cce:	4610      	mov	r0, r2
     cd0:	4b07      	ldr	r3, [pc, #28]	; (cf0 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
     cd2:	4798      	blx	r3
     cd4:	4603      	mov	r3, r0
     cd6:	461a      	mov	r2, r3
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
     cde:	687b      	ldr	r3, [r7, #4]
     ce0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
     ce4:	4618      	mov	r0, r3
     ce6:	3708      	adds	r7, #8
     ce8:	46bd      	mov	sp, r7
     cea:	bd80      	pop	{r7, pc}
     cec:	0000e2ed 	.word	0x0000e2ed
     cf0:	0000e371 	.word	0x0000e371

00000cf4 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
     cf4:	b580      	push	{r7, lr}
     cf6:	b082      	sub	sp, #8
     cf8:	af00      	add	r7, sp, #0
     cfa:	6078      	str	r0, [r7, #4]
     cfc:	460b      	mov	r3, r1
     cfe:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
     d00:	687b      	ldr	r3, [r7, #4]
     d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     d04:	4618      	mov	r0, r3
     d06:	4b17      	ldr	r3, [pc, #92]	; (d64 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
     d08:	4798      	blx	r3
     d0a:	4603      	mov	r3, r0
     d0c:	461a      	mov	r2, r3
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x40:value&0xbf;
     d14:	78fb      	ldrb	r3, [r7, #3]
     d16:	2b00      	cmp	r3, #0
     d18:	d006      	beq.n	d28 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
     d1a:	687b      	ldr	r3, [r7, #4]
     d1c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     d24:	b2db      	uxtb	r3, r3
     d26:	e005      	b.n	d34 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
     d32:	b2db      	uxtb	r3, r3
     d34:	687a      	ldr	r2, [r7, #4]
     d36:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     d44:	4619      	mov	r1, r3
     d46:	4610      	mov	r0, r2
     d48:	4b07      	ldr	r3, [pc, #28]	; (d68 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
     d4a:	4798      	blx	r3
     d4c:	4603      	mov	r3, r0
     d4e:	461a      	mov	r2, r3
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
     d5c:	4618      	mov	r0, r3
     d5e:	3708      	adds	r7, #8
     d60:	46bd      	mov	sp, r7
     d62:	bd80      	pop	{r7, pc}
     d64:	0000e2ed 	.word	0x0000e2ed
     d68:	0000e371 	.word	0x0000e371

00000d6c <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
     d6c:	b580      	push	{r7, lr}
     d6e:	b082      	sub	sp, #8
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
     d74:	460b      	mov	r3, r1
     d76:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     d7c:	4618      	mov	r0, r3
     d7e:	4b17      	ldr	r3, [pc, #92]	; (ddc <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
     d80:	4798      	blx	r3
     d82:	4603      	mov	r3, r0
     d84:	461a      	mov	r2, r3
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x04:value&0xfb;
     d8c:	78fb      	ldrb	r3, [r7, #3]
     d8e:	2b00      	cmp	r3, #0
     d90:	d006      	beq.n	da0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
     d92:	687b      	ldr	r3, [r7, #4]
     d94:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     d98:	f043 0304 	orr.w	r3, r3, #4
     d9c:	b2db      	uxtb	r3, r3
     d9e:	e005      	b.n	dac <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
     da0:	687b      	ldr	r3, [r7, #4]
     da2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     da6:	f023 0304 	bic.w	r3, r3, #4
     daa:	b2db      	uxtb	r3, r3
     dac:	687a      	ldr	r2, [r7, #4]
     dae:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
     db6:	687b      	ldr	r3, [r7, #4]
     db8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     dbc:	4619      	mov	r1, r3
     dbe:	4610      	mov	r0, r2
     dc0:	4b07      	ldr	r3, [pc, #28]	; (de0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
     dc2:	4798      	blx	r3
     dc4:	4603      	mov	r3, r0
     dc6:	461a      	mov	r2, r3
     dc8:	687b      	ldr	r3, [r7, #4]
     dca:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
     dd4:	4618      	mov	r0, r3
     dd6:	3708      	adds	r7, #8
     dd8:	46bd      	mov	sp, r7
     dda:	bd80      	pop	{r7, pc}
     ddc:	0000e2ed 	.word	0x0000e2ed
     de0:	0000e371 	.word	0x0000e371

00000de4 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
     de4:	b580      	push	{r7, lr}
     de6:	b082      	sub	sp, #8
     de8:	af00      	add	r7, sp, #0
     dea:	6078      	str	r0, [r7, #4]
     dec:	460b      	mov	r3, r1
     dee:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
     df0:	687b      	ldr	r3, [r7, #4]
     df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     df4:	78fa      	ldrb	r2, [r7, #3]
     df6:	4611      	mov	r1, r2
     df8:	4618      	mov	r0, r3
     dfa:	4b07      	ldr	r3, [pc, #28]	; (e18 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
     dfc:	4798      	blx	r3
     dfe:	4603      	mov	r3, r0
     e00:	461a      	mov	r2, r3
     e02:	687b      	ldr	r3, [r7, #4]
     e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
     e08:	687b      	ldr	r3, [r7, #4]
     e0a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
}
     e0e:	4618      	mov	r0, r3
     e10:	3708      	adds	r7, #8
     e12:	46bd      	mov	sp, r7
     e14:	bd80      	pop	{r7, pc}
     e16:	bf00      	nop
     e18:	0000e371 	.word	0x0000e371

00000e1c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
     e1c:	b580      	push	{r7, lr}
     e1e:	b082      	sub	sp, #8
     e20:	af00      	add	r7, sp, #0
     e22:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
     e24:	687b      	ldr	r3, [r7, #4]
     e26:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     e34:	4618      	mov	r0, r3
     e36:	4b18      	ldr	r3, [pc, #96]	; (e98 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
     e38:	4798      	blx	r3
     e3a:	4603      	mov	r3, r0
     e3c:	461a      	mov	r2, r3
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
     e44:	687b      	ldr	r3, [r7, #4]
     e46:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
     e4a:	2bda      	cmp	r3, #218	; 0xda
     e4c:	dd04      	ble.n	e58 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	2203      	movs	r2, #3
     e52:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     e56:	e017      	b.n	e88 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
     e58:	687b      	ldr	r3, [r7, #4]
     e5a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
     e5e:	2b6d      	cmp	r3, #109	; 0x6d
     e60:	dd04      	ble.n	e6c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
     e62:	687b      	ldr	r3, [r7, #4]
     e64:	2202      	movs	r2, #2
     e66:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     e6a:	e00d      	b.n	e88 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
     e6c:	687b      	ldr	r3, [r7, #4]
     e6e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
     e72:	2b36      	cmp	r3, #54	; 0x36
     e74:	dd04      	ble.n	e80 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	2201      	movs	r2, #1
     e7a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     e7e:	e003      	b.n	e88 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
     e80:	687b      	ldr	r3, [r7, #4]
     e82:	2200      	movs	r2, #0
     e84:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	}
	return actualPosition;
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
}
     e8e:	4618      	mov	r0, r3
     e90:	3708      	adds	r7, #8
     e92:	46bd      	mov	sp, r7
     e94:	bd80      	pop	{r7, pc}
     e96:	bf00      	nop
     e98:	0000e2ed 	.word	0x0000e2ed

00000e9c <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
     e9c:	b590      	push	{r4, r7, lr}
     e9e:	b083      	sub	sp, #12
     ea0:	af00      	add	r7, sp, #0
     ea2:	6078      	str	r0, [r7, #4]
     ea4:	4c05      	ldr	r4, [pc, #20]	; (ebc <__tcf_0+0x20>)
     ea6:	4b06      	ldr	r3, [pc, #24]	; (ec0 <__tcf_0+0x24>)
     ea8:	429c      	cmp	r4, r3
     eaa:	d004      	beq.n	eb6 <__tcf_0+0x1a>
     eac:	3c1c      	subs	r4, #28
     eae:	4620      	mov	r0, r4
     eb0:	4b04      	ldr	r3, [pc, #16]	; (ec4 <__tcf_0+0x28>)
     eb2:	4798      	blx	r3
     eb4:	e7f7      	b.n	ea6 <__tcf_0+0xa>
     eb6:	370c      	adds	r7, #12
     eb8:	46bd      	mov	sp, r7
     eba:	bd90      	pop	{r4, r7, pc}
     ebc:	20000b8c 	.word	0x20000b8c
     ec0:	20000aac 	.word	0x20000aac
     ec4:	0000e225 	.word	0x0000e225

00000ec8 <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
     ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ecc:	b082      	sub	sp, #8
     ece:	af00      	add	r7, sp, #0
     ed0:	6078      	str	r0, [r7, #4]
     ed2:	6039      	str	r1, [r7, #0]
     ed4:	687b      	ldr	r3, [r7, #4]
     ed6:	2b01      	cmp	r3, #1
     ed8:	d177      	bne.n	fca <_Z41__static_initialization_and_destruction_0ii+0x102>
     eda:	683b      	ldr	r3, [r7, #0]
     edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
     ee0:	4293      	cmp	r3, r2
     ee2:	d172      	bne.n	fca <_Z41__static_initialization_and_destruction_0ii+0x102>
     ee4:	493b      	ldr	r1, [pc, #236]	; (fd4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     ee6:	483c      	ldr	r0, [pc, #240]	; (fd8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     ee8:	4b3c      	ldr	r3, [pc, #240]	; (fdc <_Z41__static_initialization_and_destruction_0ii+0x114>)
     eea:	4798      	blx	r3
     eec:	4a3c      	ldr	r2, [pc, #240]	; (fe0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     eee:	493d      	ldr	r1, [pc, #244]	; (fe4 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     ef0:	4839      	ldr	r0, [pc, #228]	; (fd8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     ef2:	4b3d      	ldr	r3, [pc, #244]	; (fe8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     ef4:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     ef6:	493d      	ldr	r1, [pc, #244]	; (fec <_Z41__static_initialization_and_destruction_0ii+0x124>)
     ef8:	483d      	ldr	r0, [pc, #244]	; (ff0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     efa:	4b3e      	ldr	r3, [pc, #248]	; (ff4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     efc:	4798      	blx	r3
     efe:	4a38      	ldr	r2, [pc, #224]	; (fe0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f00:	493d      	ldr	r1, [pc, #244]	; (ff8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f02:	483b      	ldr	r0, [pc, #236]	; (ff0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     f04:	4b38      	ldr	r3, [pc, #224]	; (fe8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f06:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     f08:	493c      	ldr	r1, [pc, #240]	; (ffc <_Z41__static_initialization_and_destruction_0ii+0x134>)
     f0a:	483d      	ldr	r0, [pc, #244]	; (1000 <_Z41__static_initialization_and_destruction_0ii+0x138>)
     f0c:	4b39      	ldr	r3, [pc, #228]	; (ff4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     f0e:	4798      	blx	r3
     f10:	4a33      	ldr	r2, [pc, #204]	; (fe0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f12:	4939      	ldr	r1, [pc, #228]	; (ff8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f14:	483a      	ldr	r0, [pc, #232]	; (1000 <_Z41__static_initialization_and_destruction_0ii+0x138>)
     f16:	4b34      	ldr	r3, [pc, #208]	; (fe8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f18:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     f1a:	493a      	ldr	r1, [pc, #232]	; (1004 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
     f1c:	483a      	ldr	r0, [pc, #232]	; (1008 <_Z41__static_initialization_and_destruction_0ii+0x140>)
     f1e:	4b35      	ldr	r3, [pc, #212]	; (ff4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     f20:	4798      	blx	r3
     f22:	4a2f      	ldr	r2, [pc, #188]	; (fe0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f24:	4934      	ldr	r1, [pc, #208]	; (ff8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f26:	4838      	ldr	r0, [pc, #224]	; (1008 <_Z41__static_initialization_and_destruction_0ii+0x140>)
     f28:	4b2f      	ldr	r3, [pc, #188]	; (fe8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f2a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     f2c:	4937      	ldr	r1, [pc, #220]	; (100c <_Z41__static_initialization_and_destruction_0ii+0x144>)
     f2e:	4838      	ldr	r0, [pc, #224]	; (1010 <_Z41__static_initialization_and_destruction_0ii+0x148>)
     f30:	4b30      	ldr	r3, [pc, #192]	; (ff4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     f32:	4798      	blx	r3
     f34:	4a2a      	ldr	r2, [pc, #168]	; (fe0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f36:	4930      	ldr	r1, [pc, #192]	; (ff8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f38:	4835      	ldr	r0, [pc, #212]	; (1010 <_Z41__static_initialization_and_destruction_0ii+0x148>)
     f3a:	4b2b      	ldr	r3, [pc, #172]	; (fe8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f3c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     f3e:	4935      	ldr	r1, [pc, #212]	; (1014 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
     f40:	4835      	ldr	r0, [pc, #212]	; (1018 <_Z41__static_initialization_and_destruction_0ii+0x150>)
     f42:	4b2c      	ldr	r3, [pc, #176]	; (ff4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     f44:	4798      	blx	r3
     f46:	4a26      	ldr	r2, [pc, #152]	; (fe0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f48:	492b      	ldr	r1, [pc, #172]	; (ff8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f4a:	4833      	ldr	r0, [pc, #204]	; (1018 <_Z41__static_initialization_and_destruction_0ii+0x150>)
     f4c:	4b26      	ldr	r3, [pc, #152]	; (fe8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f4e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     f50:	4932      	ldr	r1, [pc, #200]	; (101c <_Z41__static_initialization_and_destruction_0ii+0x154>)
     f52:	4833      	ldr	r0, [pc, #204]	; (1020 <_Z41__static_initialization_and_destruction_0ii+0x158>)
     f54:	4b27      	ldr	r3, [pc, #156]	; (ff4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     f56:	4798      	blx	r3
     f58:	4a21      	ldr	r2, [pc, #132]	; (fe0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f5a:	4927      	ldr	r1, [pc, #156]	; (ff8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f5c:	4830      	ldr	r0, [pc, #192]	; (1020 <_Z41__static_initialization_and_destruction_0ii+0x158>)
     f5e:	4b22      	ldr	r3, [pc, #136]	; (fe8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f60:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     f62:	4930      	ldr	r1, [pc, #192]	; (1024 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
     f64:	4830      	ldr	r0, [pc, #192]	; (1028 <_Z41__static_initialization_and_destruction_0ii+0x160>)
     f66:	4b23      	ldr	r3, [pc, #140]	; (ff4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     f68:	4798      	blx	r3
     f6a:	4a1d      	ldr	r2, [pc, #116]	; (fe0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f6c:	4922      	ldr	r1, [pc, #136]	; (ff8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f6e:	482e      	ldr	r0, [pc, #184]	; (1028 <_Z41__static_initialization_and_destruction_0ii+0x160>)
     f70:	4b1d      	ldr	r3, [pc, #116]	; (fe8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f72:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
     f74:	492d      	ldr	r1, [pc, #180]	; (102c <_Z41__static_initialization_and_destruction_0ii+0x164>)
     f76:	482e      	ldr	r0, [pc, #184]	; (1030 <_Z41__static_initialization_and_destruction_0ii+0x168>)
     f78:	4b1e      	ldr	r3, [pc, #120]	; (ff4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     f7a:	4798      	blx	r3
     f7c:	4a18      	ldr	r2, [pc, #96]	; (fe0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f7e:	491e      	ldr	r1, [pc, #120]	; (ff8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f80:	482b      	ldr	r0, [pc, #172]	; (1030 <_Z41__static_initialization_and_destruction_0ii+0x168>)
     f82:	4b19      	ldr	r3, [pc, #100]	; (fe8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f84:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
     f86:	492b      	ldr	r1, [pc, #172]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
     f88:	482b      	ldr	r0, [pc, #172]	; (1038 <_Z41__static_initialization_and_destruction_0ii+0x170>)
     f8a:	4b14      	ldr	r3, [pc, #80]	; (fdc <_Z41__static_initialization_and_destruction_0ii+0x114>)
     f8c:	4798      	blx	r3
     f8e:	4a14      	ldr	r2, [pc, #80]	; (fe0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f90:	4914      	ldr	r1, [pc, #80]	; (fe4 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     f92:	4829      	ldr	r0, [pc, #164]	; (1038 <_Z41__static_initialization_and_destruction_0ii+0x170>)
     f94:	4b14      	ldr	r3, [pc, #80]	; (fe8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f96:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
     f98:	4b28      	ldr	r3, [pc, #160]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x174>)
     f9a:	2401      	movs	r4, #1
     f9c:	461e      	mov	r6, r3
     f9e:	2c00      	cmp	r4, #0
     fa0:	db0e      	blt.n	fc0 <_Z41__static_initialization_and_destruction_0ii+0xf8>
     fa2:	4633      	mov	r3, r6
     fa4:	2503      	movs	r5, #3
     fa6:	4698      	mov	r8, r3
     fa8:	2d00      	cmp	r5, #0
     faa:	db06      	blt.n	fba <_Z41__static_initialization_and_destruction_0ii+0xf2>
     fac:	4640      	mov	r0, r8
     fae:	4b24      	ldr	r3, [pc, #144]	; (1040 <_Z41__static_initialization_and_destruction_0ii+0x178>)
     fb0:	4798      	blx	r3
     fb2:	f108 081c 	add.w	r8, r8, #28
     fb6:	3d01      	subs	r5, #1
     fb8:	e7f6      	b.n	fa8 <_Z41__static_initialization_and_destruction_0ii+0xe0>
     fba:	3670      	adds	r6, #112	; 0x70
     fbc:	3c01      	subs	r4, #1
     fbe:	e7ee      	b.n	f9e <_Z41__static_initialization_and_destruction_0ii+0xd6>
     fc0:	4a07      	ldr	r2, [pc, #28]	; (fe0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     fc2:	4920      	ldr	r1, [pc, #128]	; (1044 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
     fc4:	2000      	movs	r0, #0
     fc6:	4b08      	ldr	r3, [pc, #32]	; (fe8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     fc8:	4798      	blx	r3
}
     fca:	bf00      	nop
     fcc:	3708      	adds	r7, #8
     fce:	46bd      	mov	sp, r7
     fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fd4:	2000ac18 	.word	0x2000ac18
     fd8:	20000978 	.word	0x20000978
     fdc:	0000de79 	.word	0x0000de79
     fe0:	20000000 	.word	0x20000000
     fe4:	0000de95 	.word	0x0000de95
     fe8:	000108c5 	.word	0x000108c5
     fec:	2000aae8 	.word	0x2000aae8
     ff0:	20000990 	.word	0x20000990
     ff4:	0000e5e9 	.word	0x0000e5e9
     ff8:	0000e621 	.word	0x0000e621
     ffc:	2000ab7c 	.word	0x2000ab7c
    1000:	200009b0 	.word	0x200009b0
    1004:	2000aca0 	.word	0x2000aca0
    1008:	200009d0 	.word	0x200009d0
    100c:	2000ab9c 	.word	0x2000ab9c
    1010:	200009f0 	.word	0x200009f0
    1014:	2000ac60 	.word	0x2000ac60
    1018:	20000a10 	.word	0x20000a10
    101c:	2000ac80 	.word	0x2000ac80
    1020:	20000a30 	.word	0x20000a30
    1024:	2000ab58 	.word	0x2000ab58
    1028:	20000a50 	.word	0x20000a50
    102c:	2000abf8 	.word	0x2000abf8
    1030:	20000a70 	.word	0x20000a70
    1034:	2000abbc 	.word	0x2000abbc
    1038:	20000a94 	.word	0x20000a94
    103c:	20000aac 	.word	0x20000aac
    1040:	0000e211 	.word	0x0000e211
    1044:	00000e9d 	.word	0x00000e9d

00001048 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
    1048:	b580      	push	{r7, lr}
    104a:	af00      	add	r7, sp, #0
    104c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1050:	2001      	movs	r0, #1
    1052:	4b01      	ldr	r3, [pc, #4]	; (1058 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
    1054:	4798      	blx	r3
    1056:	bd80      	pop	{r7, pc}
    1058:	00000ec9 	.word	0x00000ec9

0000105c <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    105c:	b480      	push	{r7}
    105e:	b085      	sub	sp, #20
    1060:	af00      	add	r7, sp, #0
    1062:	60f8      	str	r0, [r7, #12]
    1064:	460b      	mov	r3, r1
    1066:	607a      	str	r2, [r7, #4]
    1068:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    106a:	7afb      	ldrb	r3, [r7, #11]
    106c:	68fa      	ldr	r2, [r7, #12]
    106e:	01db      	lsls	r3, r3, #7
    1070:	4413      	add	r3, r2
    1072:	3318      	adds	r3, #24
    1074:	687a      	ldr	r2, [r7, #4]
    1076:	601a      	str	r2, [r3, #0]
}
    1078:	bf00      	nop
    107a:	3714      	adds	r7, #20
    107c:	46bd      	mov	sp, r7
    107e:	bc80      	pop	{r7}
    1080:	4770      	bx	lr

00001082 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1082:	b480      	push	{r7}
    1084:	b085      	sub	sp, #20
    1086:	af00      	add	r7, sp, #0
    1088:	60f8      	str	r0, [r7, #12]
    108a:	460b      	mov	r3, r1
    108c:	607a      	str	r2, [r7, #4]
    108e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1090:	7afb      	ldrb	r3, [r7, #11]
    1092:	68fa      	ldr	r2, [r7, #12]
    1094:	01db      	lsls	r3, r3, #7
    1096:	4413      	add	r3, r2
    1098:	3314      	adds	r3, #20
    109a:	687a      	ldr	r2, [r7, #4]
    109c:	601a      	str	r2, [r3, #0]
}
    109e:	bf00      	nop
    10a0:	3714      	adds	r7, #20
    10a2:	46bd      	mov	sp, r7
    10a4:	bc80      	pop	{r7}
    10a6:	4770      	bx	lr

000010a8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    10a8:	b580      	push	{r7, lr}
    10aa:	b082      	sub	sp, #8
    10ac:	af00      	add	r7, sp, #0
    10ae:	4603      	mov	r3, r0
    10b0:	6039      	str	r1, [r7, #0]
    10b2:	71fb      	strb	r3, [r7, #7]
    10b4:	4613      	mov	r3, r2
    10b6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    10b8:	79bb      	ldrb	r3, [r7, #6]
    10ba:	2b00      	cmp	r3, #0
    10bc:	d006      	beq.n	10cc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    10be:	79fb      	ldrb	r3, [r7, #7]
    10c0:	683a      	ldr	r2, [r7, #0]
    10c2:	4619      	mov	r1, r3
    10c4:	4806      	ldr	r0, [pc, #24]	; (10e0 <_gpio_set_level+0x38>)
    10c6:	4b07      	ldr	r3, [pc, #28]	; (10e4 <_gpio_set_level+0x3c>)
    10c8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    10ca:	e005      	b.n	10d8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    10cc:	79fb      	ldrb	r3, [r7, #7]
    10ce:	683a      	ldr	r2, [r7, #0]
    10d0:	4619      	mov	r1, r3
    10d2:	4803      	ldr	r0, [pc, #12]	; (10e0 <_gpio_set_level+0x38>)
    10d4:	4b04      	ldr	r3, [pc, #16]	; (10e8 <_gpio_set_level+0x40>)
    10d6:	4798      	blx	r3
}
    10d8:	bf00      	nop
    10da:	3708      	adds	r7, #8
    10dc:	46bd      	mov	sp, r7
    10de:	bd80      	pop	{r7, pc}
    10e0:	41008000 	.word	0x41008000
    10e4:	0000105d 	.word	0x0000105d
    10e8:	00001083 	.word	0x00001083

000010ec <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    10ec:	b580      	push	{r7, lr}
    10ee:	b082      	sub	sp, #8
    10f0:	af00      	add	r7, sp, #0
    10f2:	4603      	mov	r3, r0
    10f4:	460a      	mov	r2, r1
    10f6:	71fb      	strb	r3, [r7, #7]
    10f8:	4613      	mov	r3, r2
    10fa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    10fc:	79fb      	ldrb	r3, [r7, #7]
    10fe:	115b      	asrs	r3, r3, #5
    1100:	b2d8      	uxtb	r0, r3
    1102:	79fb      	ldrb	r3, [r7, #7]
    1104:	f003 031f 	and.w	r3, r3, #31
    1108:	2201      	movs	r2, #1
    110a:	fa02 f303 	lsl.w	r3, r2, r3
    110e:	79ba      	ldrb	r2, [r7, #6]
    1110:	4619      	mov	r1, r3
    1112:	4b03      	ldr	r3, [pc, #12]	; (1120 <gpio_set_pin_level+0x34>)
    1114:	4798      	blx	r3
}
    1116:	bf00      	nop
    1118:	3708      	adds	r7, #8
    111a:	46bd      	mov	sp, r7
    111c:	bd80      	pop	{r7, pc}
    111e:	bf00      	nop
    1120:	000010a9 	.word	0x000010a9

00001124 <_ZL13FirmwareAlivePK10timer_task>:
//static EvaporatorAndCondesatorFans_Class fans;
//static SingleFlapperValve_Class fv(0);


static void FirmwareAlive(const struct timer_task *const timer_task)
{
    1124:	b580      	push	{r7, lr}
    1126:	b082      	sub	sp, #8
    1128:	af00      	add	r7, sp, #0
    112a:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(iAlcFwIsAlive,true);
    112c:	2101      	movs	r1, #1
    112e:	2007      	movs	r0, #7
    1130:	4b02      	ldr	r3, [pc, #8]	; (113c <_ZL13FirmwareAlivePK10timer_task+0x18>)
    1132:	4798      	blx	r3
}
    1134:	bf00      	nop
    1136:	3708      	adds	r7, #8
    1138:	46bd      	mov	sp, r7
    113a:	bd80      	pop	{r7, pc}
    113c:	000010ed 	.word	0x000010ed

00001140 <main>:


int main(void)
{
    1140:	b580      	push	{r7, lr}
    1142:	af00      	add	r7, sp, #0
	atmel_start_init();
    1144:	4b33      	ldr	r3, [pc, #204]	; (1214 <main+0xd4>)
    1146:	4798      	blx	r3
	uint8_t position;

	usb.Init();
    1148:	4833      	ldr	r0, [pc, #204]	; (1218 <main+0xd8>)
    114a:	4b34      	ldr	r3, [pc, #208]	; (121c <main+0xdc>)
    114c:	4798      	blx	r3
	delay_ms(100);
    114e:	2064      	movs	r0, #100	; 0x64
    1150:	4b33      	ldr	r3, [pc, #204]	; (1220 <main+0xe0>)
    1152:	4798      	blx	r3
	//	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	//	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	pwm_enable(&LIVE_PULSE);
    1154:	4833      	ldr	r0, [pc, #204]	; (1224 <main+0xe4>)
    1156:	4b34      	ldr	r3, [pc, #208]	; (1228 <main+0xe8>)
    1158:	4798      	blx	r3
	delay_ms(200);
    115a:	20c8      	movs	r0, #200	; 0xc8
    115c:	4b30      	ldr	r3, [pc, #192]	; (1220 <main+0xe0>)
    115e:	4798      	blx	r3
	memory.Init();
    1160:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    1164:	4831      	ldr	r0, [pc, #196]	; (122c <main+0xec>)
    1166:	4b32      	ldr	r3, [pc, #200]	; (1230 <main+0xf0>)
    1168:	4798      	blx	r3
	memory.WriteDefaultParameters();
    116a:	4830      	ldr	r0, [pc, #192]	; (122c <main+0xec>)
    116c:	4b31      	ldr	r3, [pc, #196]	; (1234 <main+0xf4>)
    116e:	4798      	blx	r3
	fvc.InitController();
    1170:	4831      	ldr	r0, [pc, #196]	; (1238 <main+0xf8>)
    1172:	4b32      	ldr	r3, [pc, #200]	; (123c <main+0xfc>)
    1174:	4798      	blx	r3

	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
    1176:	22fa      	movs	r2, #250	; 0xfa
    1178:	4931      	ldr	r1, [pc, #196]	; (1240 <main+0x100>)
    117a:	4832      	ldr	r0, [pc, #200]	; (1244 <main+0x104>)
    117c:	4b32      	ldr	r3, [pc, #200]	; (1248 <main+0x108>)
    117e:	4798      	blx	r3
// 				fvc.Control_NBC_StandAlone_Reset();
// 				}
// 				delay_ms(100);
// 				fvc.StopControlling();
// 			}
fvc.singlefv->SetDirection(dir);
    1180:	4b2d      	ldr	r3, [pc, #180]	; (1238 <main+0xf8>)
    1182:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    1186:	4b31      	ldr	r3, [pc, #196]	; (124c <main+0x10c>)
    1188:	781b      	ldrb	r3, [r3, #0]
    118a:	4619      	mov	r1, r3
    118c:	4610      	mov	r0, r2
    118e:	4b30      	ldr	r3, [pc, #192]	; (1250 <main+0x110>)
    1190:	4798      	blx	r3
fvc.singlefv->SetEnable(true);
    1192:	4b29      	ldr	r3, [pc, #164]	; (1238 <main+0xf8>)
    1194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1198:	2101      	movs	r1, #1
    119a:	4618      	mov	r0, r3
    119c:	4b2d      	ldr	r3, [pc, #180]	; (1254 <main+0x114>)
    119e:	4798      	blx	r3
while(counter<0x8fff){
    11a0:	4b2d      	ldr	r3, [pc, #180]	; (1258 <main+0x118>)
    11a2:	681b      	ldr	r3, [r3, #0]
    11a4:	f648 72fe 	movw	r2, #36862	; 0x8ffe
    11a8:	4293      	cmp	r3, r2
    11aa:	d80b      	bhi.n	11c4 <main+0x84>
	fvc.singlefv->ReadActualPosition();
    11ac:	4b22      	ldr	r3, [pc, #136]	; (1238 <main+0xf8>)
    11ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    11b2:	4618      	mov	r0, r3
    11b4:	4b29      	ldr	r3, [pc, #164]	; (125c <main+0x11c>)
    11b6:	4798      	blx	r3
	counter++;
    11b8:	4b27      	ldr	r3, [pc, #156]	; (1258 <main+0x118>)
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	3301      	adds	r3, #1
    11be:	4a26      	ldr	r2, [pc, #152]	; (1258 <main+0x118>)
    11c0:	6013      	str	r3, [r2, #0]
while(counter<0x8fff){
    11c2:	e7ed      	b.n	11a0 <main+0x60>
}
counter=0;
    11c4:	4b24      	ldr	r3, [pc, #144]	; (1258 <main+0x118>)
    11c6:	2200      	movs	r2, #0
    11c8:	601a      	str	r2, [r3, #0]
fvc.singlefv->SetEnable(false);
    11ca:	4b1b      	ldr	r3, [pc, #108]	; (1238 <main+0xf8>)
    11cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    11d0:	2100      	movs	r1, #0
    11d2:	4618      	mov	r0, r3
    11d4:	4b1f      	ldr	r3, [pc, #124]	; (1254 <main+0x114>)
    11d6:	4798      	blx	r3
while(counter<0x4ff){
    11d8:	4b1f      	ldr	r3, [pc, #124]	; (1258 <main+0x118>)
    11da:	681b      	ldr	r3, [r3, #0]
    11dc:	f240 42fe 	movw	r2, #1278	; 0x4fe
    11e0:	4293      	cmp	r3, r2
    11e2:	d80b      	bhi.n	11fc <main+0xbc>
	fvc.singlefv->ReadActualPosition();
    11e4:	4b14      	ldr	r3, [pc, #80]	; (1238 <main+0xf8>)
    11e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    11ea:	4618      	mov	r0, r3
    11ec:	4b1b      	ldr	r3, [pc, #108]	; (125c <main+0x11c>)
    11ee:	4798      	blx	r3
	counter++;
    11f0:	4b19      	ldr	r3, [pc, #100]	; (1258 <main+0x118>)
    11f2:	681b      	ldr	r3, [r3, #0]
    11f4:	3301      	adds	r3, #1
    11f6:	4a18      	ldr	r2, [pc, #96]	; (1258 <main+0x118>)
    11f8:	6013      	str	r3, [r2, #0]
while(counter<0x4ff){
    11fa:	e7ed      	b.n	11d8 <main+0x98>
}
counter=0;
    11fc:	4b16      	ldr	r3, [pc, #88]	; (1258 <main+0x118>)
    11fe:	2200      	movs	r2, #0
    1200:	601a      	str	r2, [r3, #0]
dir=!dir;
    1202:	4b12      	ldr	r3, [pc, #72]	; (124c <main+0x10c>)
    1204:	781b      	ldrb	r3, [r3, #0]
    1206:	f083 0301 	eor.w	r3, r3, #1
    120a:	b2da      	uxtb	r2, r3
    120c:	4b0f      	ldr	r3, [pc, #60]	; (124c <main+0x10c>)
    120e:	701a      	strb	r2, [r3, #0]
fvc.singlefv->SetDirection(dir);
    1210:	e7b6      	b.n	1180 <main+0x40>
    1212:	bf00      	nop
    1214:	00001399 	.word	0x00001399
    1218:	20001880 	.word	0x20001880
    121c:	0000ed1d 	.word	0x0000ed1d
    1220:	00002e19 	.word	0x00002e19
    1224:	2000abdc 	.word	0x2000abdc
    1228:	00003289 	.word	0x00003289
    122c:	20002ae8 	.word	0x20002ae8
    1230:	0000f681 	.word	0x0000f681
    1234:	0000f5c5 	.word	0x0000f5c5
    1238:	2000089c 	.word	0x2000089c
    123c:	00000461 	.word	0x00000461
    1240:	00001125 	.word	0x00001125
    1244:	20000bcc 	.word	0x20000bcc
    1248:	0000e7c5 	.word	0x0000e7c5
    124c:	20000ca4 	.word	0x20000ca4
    1250:	00000c7d 	.word	0x00000c7d
    1254:	00000bfd 	.word	0x00000bfd
    1258:	20000ca8 	.word	0x20000ca8
    125c:	00000e1d 	.word	0x00000e1d

00001260 <_Z41__static_initialization_and_destruction_0ii>:
// 		delay_ms(500);

		

	}
}
    1260:	b580      	push	{r7, lr}
    1262:	b082      	sub	sp, #8
    1264:	af00      	add	r7, sp, #0
    1266:	6078      	str	r0, [r7, #4]
    1268:	6039      	str	r1, [r7, #0]
    126a:	687b      	ldr	r3, [r7, #4]
    126c:	2b01      	cmp	r3, #1
    126e:	d155      	bne.n	131c <_Z41__static_initialization_and_destruction_0ii+0xbc>
    1270:	683b      	ldr	r3, [r7, #0]
    1272:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1276:	4293      	cmp	r3, r2
    1278:	d150      	bne.n	131c <_Z41__static_initialization_and_destruction_0ii+0xbc>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    127a:	492a      	ldr	r1, [pc, #168]	; (1324 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    127c:	482a      	ldr	r0, [pc, #168]	; (1328 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    127e:	4b2b      	ldr	r3, [pc, #172]	; (132c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    1280:	4798      	blx	r3
    1282:	4a2b      	ldr	r2, [pc, #172]	; (1330 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1284:	492b      	ldr	r1, [pc, #172]	; (1334 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1286:	4828      	ldr	r0, [pc, #160]	; (1328 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    1288:	4b2b      	ldr	r3, [pc, #172]	; (1338 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    128a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    128c:	492b      	ldr	r1, [pc, #172]	; (133c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    128e:	482c      	ldr	r0, [pc, #176]	; (1340 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    1290:	4b26      	ldr	r3, [pc, #152]	; (132c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    1292:	4798      	blx	r3
    1294:	4a26      	ldr	r2, [pc, #152]	; (1330 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1296:	4927      	ldr	r1, [pc, #156]	; (1334 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1298:	4829      	ldr	r0, [pc, #164]	; (1340 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    129a:	4b27      	ldr	r3, [pc, #156]	; (1338 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    129c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    129e:	4929      	ldr	r1, [pc, #164]	; (1344 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    12a0:	4829      	ldr	r0, [pc, #164]	; (1348 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    12a2:	4b22      	ldr	r3, [pc, #136]	; (132c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    12a4:	4798      	blx	r3
    12a6:	4a22      	ldr	r2, [pc, #136]	; (1330 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    12a8:	4922      	ldr	r1, [pc, #136]	; (1334 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    12aa:	4827      	ldr	r0, [pc, #156]	; (1348 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    12ac:	4b22      	ldr	r3, [pc, #136]	; (1338 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    12ae:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    12b0:	4926      	ldr	r1, [pc, #152]	; (134c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    12b2:	4827      	ldr	r0, [pc, #156]	; (1350 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    12b4:	4b1d      	ldr	r3, [pc, #116]	; (132c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    12b6:	4798      	blx	r3
    12b8:	4a1d      	ldr	r2, [pc, #116]	; (1330 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    12ba:	491e      	ldr	r1, [pc, #120]	; (1334 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    12bc:	4824      	ldr	r0, [pc, #144]	; (1350 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    12be:	4b1e      	ldr	r3, [pc, #120]	; (1338 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    12c0:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    12c2:	4924      	ldr	r1, [pc, #144]	; (1354 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    12c4:	4824      	ldr	r0, [pc, #144]	; (1358 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    12c6:	4b19      	ldr	r3, [pc, #100]	; (132c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    12c8:	4798      	blx	r3
    12ca:	4a19      	ldr	r2, [pc, #100]	; (1330 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    12cc:	4919      	ldr	r1, [pc, #100]	; (1334 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    12ce:	4822      	ldr	r0, [pc, #136]	; (1358 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    12d0:	4b19      	ldr	r3, [pc, #100]	; (1338 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    12d2:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    12d4:	4921      	ldr	r1, [pc, #132]	; (135c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    12d6:	4822      	ldr	r0, [pc, #136]	; (1360 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    12d8:	4b14      	ldr	r3, [pc, #80]	; (132c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    12da:	4798      	blx	r3
    12dc:	4a14      	ldr	r2, [pc, #80]	; (1330 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    12de:	4915      	ldr	r1, [pc, #84]	; (1334 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    12e0:	481f      	ldr	r0, [pc, #124]	; (1360 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    12e2:	4b15      	ldr	r3, [pc, #84]	; (1338 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    12e4:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    12e6:	491f      	ldr	r1, [pc, #124]	; (1364 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    12e8:	481f      	ldr	r0, [pc, #124]	; (1368 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    12ea:	4b10      	ldr	r3, [pc, #64]	; (132c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    12ec:	4798      	blx	r3
    12ee:	4a10      	ldr	r2, [pc, #64]	; (1330 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    12f0:	4910      	ldr	r1, [pc, #64]	; (1334 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    12f2:	481d      	ldr	r0, [pc, #116]	; (1368 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    12f4:	4b10      	ldr	r3, [pc, #64]	; (1338 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    12f6:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    12f8:	491c      	ldr	r1, [pc, #112]	; (136c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    12fa:	481d      	ldr	r0, [pc, #116]	; (1370 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    12fc:	4b0b      	ldr	r3, [pc, #44]	; (132c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    12fe:	4798      	blx	r3
    1300:	4a0b      	ldr	r2, [pc, #44]	; (1330 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1302:	490c      	ldr	r1, [pc, #48]	; (1334 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1304:	481a      	ldr	r0, [pc, #104]	; (1370 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    1306:	4b0c      	ldr	r3, [pc, #48]	; (1338 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1308:	4798      	blx	r3
    130a:	491a      	ldr	r1, [pc, #104]	; (1374 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    130c:	481a      	ldr	r0, [pc, #104]	; (1378 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    130e:	4b1b      	ldr	r3, [pc, #108]	; (137c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    1310:	4798      	blx	r3
    1312:	4a07      	ldr	r2, [pc, #28]	; (1330 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1314:	491a      	ldr	r1, [pc, #104]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1316:	4818      	ldr	r0, [pc, #96]	; (1378 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1318:	4b07      	ldr	r3, [pc, #28]	; (1338 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    131a:	4798      	blx	r3
    131c:	bf00      	nop
    131e:	3708      	adds	r7, #8
    1320:	46bd      	mov	sp, r7
    1322:	bd80      	pop	{r7, pc}
    1324:	2000aae8 	.word	0x2000aae8
    1328:	20000b8c 	.word	0x20000b8c
    132c:	0000e5e9 	.word	0x0000e5e9
    1330:	20000000 	.word	0x20000000
    1334:	0000e621 	.word	0x0000e621
    1338:	000108c5 	.word	0x000108c5
    133c:	2000ab7c 	.word	0x2000ab7c
    1340:	20000bac 	.word	0x20000bac
    1344:	2000aca0 	.word	0x2000aca0
    1348:	20000bcc 	.word	0x20000bcc
    134c:	2000ab9c 	.word	0x2000ab9c
    1350:	20000bec 	.word	0x20000bec
    1354:	2000ac60 	.word	0x2000ac60
    1358:	20000c0c 	.word	0x20000c0c
    135c:	2000ac80 	.word	0x2000ac80
    1360:	20000c2c 	.word	0x20000c2c
    1364:	2000ab58 	.word	0x2000ab58
    1368:	20000c4c 	.word	0x20000c4c
    136c:	2000abf8 	.word	0x2000abf8
    1370:	20000c6c 	.word	0x20000c6c
    1374:	2000ac18 	.word	0x2000ac18
    1378:	20000c8c 	.word	0x20000c8c
    137c:	0000de79 	.word	0x0000de79
    1380:	0000de95 	.word	0x0000de95

00001384 <_GLOBAL__sub_I_dir>:
    1384:	b580      	push	{r7, lr}
    1386:	af00      	add	r7, sp, #0
    1388:	f64f 71ff 	movw	r1, #65535	; 0xffff
    138c:	2001      	movs	r0, #1
    138e:	4b01      	ldr	r3, [pc, #4]	; (1394 <_GLOBAL__sub_I_dir+0x10>)
    1390:	4798      	blx	r3
    1392:	bd80      	pop	{r7, pc}
    1394:	00001261 	.word	0x00001261

00001398 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1398:	b580      	push	{r7, lr}
    139a:	af00      	add	r7, sp, #0
	system_init();
    139c:	4b03      	ldr	r3, [pc, #12]	; (13ac <atmel_start_init+0x14>)
    139e:	4798      	blx	r3
	usb_init();
    13a0:	4b03      	ldr	r3, [pc, #12]	; (13b0 <atmel_start_init+0x18>)
    13a2:	4798      	blx	r3
	spi_nor_flash_init();
    13a4:	4b03      	ldr	r3, [pc, #12]	; (13b4 <atmel_start_init+0x1c>)
    13a6:	4798      	blx	r3
}
    13a8:	bf00      	nop
    13aa:	bd80      	pop	{r7, pc}
    13ac:	00002799 	.word	0x00002799
    13b0:	0000bff1 	.word	0x0000bff1
    13b4:	0000bf85 	.word	0x0000bf85

000013b8 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    13b8:	b480      	push	{r7}
    13ba:	b085      	sub	sp, #20
    13bc:	af00      	add	r7, sp, #0
    13be:	60f8      	str	r0, [r7, #12]
    13c0:	460b      	mov	r3, r1
    13c2:	607a      	str	r2, [r7, #4]
    13c4:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    13c6:	7afa      	ldrb	r2, [r7, #11]
    13c8:	68fb      	ldr	r3, [r7, #12]
    13ca:	3220      	adds	r2, #32
    13cc:	6879      	ldr	r1, [r7, #4]
    13ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    13d2:	bf00      	nop
    13d4:	3714      	adds	r7, #20
    13d6:	46bd      	mov	sp, r7
    13d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    13dc:	4770      	bx	lr

000013de <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    13de:	b480      	push	{r7}
    13e0:	b083      	sub	sp, #12
    13e2:	af00      	add	r7, sp, #0
    13e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    13e6:	687b      	ldr	r3, [r7, #4]
    13e8:	691b      	ldr	r3, [r3, #16]
    13ea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    13ee:	687b      	ldr	r3, [r7, #4]
    13f0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    13f2:	bf00      	nop
    13f4:	370c      	adds	r7, #12
    13f6:	46bd      	mov	sp, r7
    13f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    13fc:	4770      	bx	lr

000013fe <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    13fe:	b480      	push	{r7}
    1400:	b083      	sub	sp, #12
    1402:	af00      	add	r7, sp, #0
    1404:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	691b      	ldr	r3, [r3, #16]
    140a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    140e:	687b      	ldr	r3, [r7, #4]
    1410:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1412:	bf00      	nop
    1414:	370c      	adds	r7, #12
    1416:	46bd      	mov	sp, r7
    1418:	f85d 7b04 	ldr.w	r7, [sp], #4
    141c:	4770      	bx	lr

0000141e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    141e:	b480      	push	{r7}
    1420:	b083      	sub	sp, #12
    1422:	af00      	add	r7, sp, #0
    1424:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    1426:	687b      	ldr	r3, [r7, #4]
    1428:	691b      	ldr	r3, [r3, #16]
    142a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1432:	bf00      	nop
    1434:	370c      	adds	r7, #12
    1436:	46bd      	mov	sp, r7
    1438:	f85d 7b04 	ldr.w	r7, [sp], #4
    143c:	4770      	bx	lr

0000143e <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    143e:	b480      	push	{r7}
    1440:	b083      	sub	sp, #12
    1442:	af00      	add	r7, sp, #0
    1444:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	691b      	ldr	r3, [r3, #16]
    144a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1452:	bf00      	nop
    1454:	370c      	adds	r7, #12
    1456:	46bd      	mov	sp, r7
    1458:	f85d 7b04 	ldr.w	r7, [sp], #4
    145c:	4770      	bx	lr

0000145e <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    145e:	b480      	push	{r7}
    1460:	b083      	sub	sp, #12
    1462:	af00      	add	r7, sp, #0
    1464:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	695b      	ldr	r3, [r3, #20]
    146a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    146e:	687b      	ldr	r3, [r7, #4]
    1470:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1472:	bf00      	nop
    1474:	370c      	adds	r7, #12
    1476:	46bd      	mov	sp, r7
    1478:	f85d 7b04 	ldr.w	r7, [sp], #4
    147c:	4770      	bx	lr

0000147e <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    147e:	b480      	push	{r7}
    1480:	b083      	sub	sp, #12
    1482:	af00      	add	r7, sp, #0
    1484:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    1486:	687b      	ldr	r3, [r7, #4]
    1488:	695b      	ldr	r3, [r3, #20]
    148a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1492:	bf00      	nop
    1494:	370c      	adds	r7, #12
    1496:	46bd      	mov	sp, r7
    1498:	f85d 7b04 	ldr.w	r7, [sp], #4
    149c:	4770      	bx	lr

0000149e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    149e:	b480      	push	{r7}
    14a0:	b083      	sub	sp, #12
    14a2:	af00      	add	r7, sp, #0
    14a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    14a6:	687b      	ldr	r3, [r7, #4]
    14a8:	695b      	ldr	r3, [r3, #20]
    14aa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    14ae:	687b      	ldr	r3, [r7, #4]
    14b0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14b2:	bf00      	nop
    14b4:	370c      	adds	r7, #12
    14b6:	46bd      	mov	sp, r7
    14b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    14bc:	4770      	bx	lr

000014be <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    14be:	b480      	push	{r7}
    14c0:	b083      	sub	sp, #12
    14c2:	af00      	add	r7, sp, #0
    14c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    14c6:	687b      	ldr	r3, [r7, #4]
    14c8:	695b      	ldr	r3, [r3, #20]
    14ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    14ce:	687b      	ldr	r3, [r7, #4]
    14d0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14d2:	bf00      	nop
    14d4:	370c      	adds	r7, #12
    14d6:	46bd      	mov	sp, r7
    14d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    14dc:	4770      	bx	lr

000014de <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    14de:	b480      	push	{r7}
    14e0:	b083      	sub	sp, #12
    14e2:	af00      	add	r7, sp, #0
    14e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    14e6:	687b      	ldr	r3, [r7, #4]
    14e8:	695b      	ldr	r3, [r3, #20]
    14ea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    14ee:	687b      	ldr	r3, [r7, #4]
    14f0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14f2:	bf00      	nop
    14f4:	370c      	adds	r7, #12
    14f6:	46bd      	mov	sp, r7
    14f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    14fc:	4770      	bx	lr

000014fe <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    14fe:	b480      	push	{r7}
    1500:	b083      	sub	sp, #12
    1502:	af00      	add	r7, sp, #0
    1504:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    1506:	687b      	ldr	r3, [r7, #4]
    1508:	699b      	ldr	r3, [r3, #24]
    150a:	f043 0201 	orr.w	r2, r3, #1
    150e:	687b      	ldr	r3, [r7, #4]
    1510:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1512:	bf00      	nop
    1514:	370c      	adds	r7, #12
    1516:	46bd      	mov	sp, r7
    1518:	f85d 7b04 	ldr.w	r7, [sp], #4
    151c:	4770      	bx	lr

0000151e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    151e:	b480      	push	{r7}
    1520:	b083      	sub	sp, #12
    1522:	af00      	add	r7, sp, #0
    1524:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    1526:	687b      	ldr	r3, [r7, #4]
    1528:	699b      	ldr	r3, [r3, #24]
    152a:	f043 0202 	orr.w	r2, r3, #2
    152e:	687b      	ldr	r3, [r7, #4]
    1530:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1532:	bf00      	nop
    1534:	370c      	adds	r7, #12
    1536:	46bd      	mov	sp, r7
    1538:	f85d 7b04 	ldr.w	r7, [sp], #4
    153c:	4770      	bx	lr

0000153e <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    153e:	b480      	push	{r7}
    1540:	b083      	sub	sp, #12
    1542:	af00      	add	r7, sp, #0
    1544:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    1546:	687b      	ldr	r3, [r7, #4]
    1548:	699b      	ldr	r3, [r3, #24]
    154a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1552:	bf00      	nop
    1554:	370c      	adds	r7, #12
    1556:	46bd      	mov	sp, r7
    1558:	f85d 7b04 	ldr.w	r7, [sp], #4
    155c:	4770      	bx	lr

0000155e <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    155e:	b480      	push	{r7}
    1560:	b083      	sub	sp, #12
    1562:	af00      	add	r7, sp, #0
    1564:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    1566:	687b      	ldr	r3, [r7, #4]
    1568:	699b      	ldr	r3, [r3, #24]
    156a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    156e:	687b      	ldr	r3, [r7, #4]
    1570:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1572:	bf00      	nop
    1574:	370c      	adds	r7, #12
    1576:	46bd      	mov	sp, r7
    1578:	f85d 7b04 	ldr.w	r7, [sp], #4
    157c:	4770      	bx	lr

0000157e <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    157e:	b480      	push	{r7}
    1580:	b083      	sub	sp, #12
    1582:	af00      	add	r7, sp, #0
    1584:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    1586:	687b      	ldr	r3, [r7, #4]
    1588:	699b      	ldr	r3, [r3, #24]
    158a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    158e:	687b      	ldr	r3, [r7, #4]
    1590:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1592:	bf00      	nop
    1594:	370c      	adds	r7, #12
    1596:	46bd      	mov	sp, r7
    1598:	f85d 7b04 	ldr.w	r7, [sp], #4
    159c:	4770      	bx	lr

0000159e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    159e:	b480      	push	{r7}
    15a0:	b083      	sub	sp, #12
    15a2:	af00      	add	r7, sp, #0
    15a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    15a6:	687b      	ldr	r3, [r7, #4]
    15a8:	699b      	ldr	r3, [r3, #24]
    15aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    15ae:	687b      	ldr	r3, [r7, #4]
    15b0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15b2:	bf00      	nop
    15b4:	370c      	adds	r7, #12
    15b6:	46bd      	mov	sp, r7
    15b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    15bc:	4770      	bx	lr

000015be <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    15be:	b480      	push	{r7}
    15c0:	b083      	sub	sp, #12
    15c2:	af00      	add	r7, sp, #0
    15c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    15c6:	687b      	ldr	r3, [r7, #4]
    15c8:	69db      	ldr	r3, [r3, #28]
    15ca:	f043 0208 	orr.w	r2, r3, #8
    15ce:	687b      	ldr	r3, [r7, #4]
    15d0:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15d2:	bf00      	nop
    15d4:	370c      	adds	r7, #12
    15d6:	46bd      	mov	sp, r7
    15d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    15dc:	4770      	bx	lr

000015de <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    15de:	b480      	push	{r7}
    15e0:	b083      	sub	sp, #12
    15e2:	af00      	add	r7, sp, #0
    15e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    15e6:	687b      	ldr	r3, [r7, #4]
    15e8:	69db      	ldr	r3, [r3, #28]
    15ea:	f043 0220 	orr.w	r2, r3, #32
    15ee:	687b      	ldr	r3, [r7, #4]
    15f0:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15f2:	bf00      	nop
    15f4:	370c      	adds	r7, #12
    15f6:	46bd      	mov	sp, r7
    15f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    15fc:	4770      	bx	lr

000015fe <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    15fe:	b480      	push	{r7}
    1600:	b083      	sub	sp, #12
    1602:	af00      	add	r7, sp, #0
    1604:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1606:	687b      	ldr	r3, [r7, #4]
    1608:	69db      	ldr	r3, [r3, #28]
    160a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    160e:	687b      	ldr	r3, [r7, #4]
    1610:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1612:	bf00      	nop
    1614:	370c      	adds	r7, #12
    1616:	46bd      	mov	sp, r7
    1618:	f85d 7b04 	ldr.w	r7, [sp], #4
    161c:	4770      	bx	lr

0000161e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    161e:	b480      	push	{r7}
    1620:	b083      	sub	sp, #12
    1622:	af00      	add	r7, sp, #0
    1624:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    1626:	687b      	ldr	r3, [r7, #4]
    1628:	69db      	ldr	r3, [r3, #28]
    162a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    162e:	687b      	ldr	r3, [r7, #4]
    1630:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1632:	bf00      	nop
    1634:	370c      	adds	r7, #12
    1636:	46bd      	mov	sp, r7
    1638:	f85d 7b04 	ldr.w	r7, [sp], #4
    163c:	4770      	bx	lr

0000163e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    163e:	b480      	push	{r7}
    1640:	b083      	sub	sp, #12
    1642:	af00      	add	r7, sp, #0
    1644:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    1646:	687b      	ldr	r3, [r7, #4]
    1648:	6a1b      	ldr	r3, [r3, #32]
    164a:	f043 0201 	orr.w	r2, r3, #1
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1652:	bf00      	nop
    1654:	370c      	adds	r7, #12
    1656:	46bd      	mov	sp, r7
    1658:	f85d 7b04 	ldr.w	r7, [sp], #4
    165c:	4770      	bx	lr

0000165e <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    165e:	b480      	push	{r7}
    1660:	b083      	sub	sp, #12
    1662:	af00      	add	r7, sp, #0
    1664:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1666:	687b      	ldr	r3, [r7, #4]
    1668:	6a1b      	ldr	r3, [r3, #32]
    166a:	f043 0202 	orr.w	r2, r3, #2
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1672:	bf00      	nop
    1674:	370c      	adds	r7, #12
    1676:	46bd      	mov	sp, r7
    1678:	f85d 7b04 	ldr.w	r7, [sp], #4
    167c:	4770      	bx	lr

0000167e <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    167e:	b480      	push	{r7}
    1680:	b083      	sub	sp, #12
    1682:	af00      	add	r7, sp, #0
    1684:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    1686:	687b      	ldr	r3, [r7, #4]
    1688:	6a1b      	ldr	r3, [r3, #32]
    168a:	f043 0204 	orr.w	r2, r3, #4
    168e:	687b      	ldr	r3, [r7, #4]
    1690:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1692:	bf00      	nop
    1694:	370c      	adds	r7, #12
    1696:	46bd      	mov	sp, r7
    1698:	f85d 7b04 	ldr.w	r7, [sp], #4
    169c:	4770      	bx	lr

0000169e <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    169e:	b480      	push	{r7}
    16a0:	b083      	sub	sp, #12
    16a2:	af00      	add	r7, sp, #0
    16a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    16a6:	687b      	ldr	r3, [r7, #4]
    16a8:	6a1b      	ldr	r3, [r3, #32]
    16aa:	f043 0208 	orr.w	r2, r3, #8
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    16b2:	bf00      	nop
    16b4:	370c      	adds	r7, #12
    16b6:	46bd      	mov	sp, r7
    16b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    16bc:	4770      	bx	lr

000016be <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    16be:	b480      	push	{r7}
    16c0:	b083      	sub	sp, #12
    16c2:	af00      	add	r7, sp, #0
    16c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    16c6:	687b      	ldr	r3, [r7, #4]
    16c8:	6a1b      	ldr	r3, [r3, #32]
    16ca:	f043 0220 	orr.w	r2, r3, #32
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    16d2:	bf00      	nop
    16d4:	370c      	adds	r7, #12
    16d6:	46bd      	mov	sp, r7
    16d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    16dc:	4770      	bx	lr

000016de <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    16de:	b480      	push	{r7}
    16e0:	b083      	sub	sp, #12
    16e2:	af00      	add	r7, sp, #0
    16e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    16e6:	687b      	ldr	r3, [r7, #4]
    16e8:	6a1b      	ldr	r3, [r3, #32]
    16ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    16ee:	687b      	ldr	r3, [r7, #4]
    16f0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    16f2:	bf00      	nop
    16f4:	370c      	adds	r7, #12
    16f6:	46bd      	mov	sp, r7
    16f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    16fc:	4770      	bx	lr

000016fe <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    16fe:	b480      	push	{r7}
    1700:	b085      	sub	sp, #20
    1702:	af00      	add	r7, sp, #0
    1704:	60f8      	str	r0, [r7, #12]
    1706:	460b      	mov	r3, r1
    1708:	607a      	str	r2, [r7, #4]
    170a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    170c:	7afb      	ldrb	r3, [r7, #11]
    170e:	68fa      	ldr	r2, [r7, #12]
    1710:	01db      	lsls	r3, r3, #7
    1712:	4413      	add	r3, r2
    1714:	3308      	adds	r3, #8
    1716:	687a      	ldr	r2, [r7, #4]
    1718:	601a      	str	r2, [r3, #0]
}
    171a:	bf00      	nop
    171c:	3714      	adds	r7, #20
    171e:	46bd      	mov	sp, r7
    1720:	f85d 7b04 	ldr.w	r7, [sp], #4
    1724:	4770      	bx	lr

00001726 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1726:	b480      	push	{r7}
    1728:	b085      	sub	sp, #20
    172a:	af00      	add	r7, sp, #0
    172c:	60f8      	str	r0, [r7, #12]
    172e:	460b      	mov	r3, r1
    1730:	607a      	str	r2, [r7, #4]
    1732:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1734:	7afb      	ldrb	r3, [r7, #11]
    1736:	68fa      	ldr	r2, [r7, #12]
    1738:	01db      	lsls	r3, r3, #7
    173a:	4413      	add	r3, r2
    173c:	3304      	adds	r3, #4
    173e:	687a      	ldr	r2, [r7, #4]
    1740:	601a      	str	r2, [r3, #0]
}
    1742:	bf00      	nop
    1744:	3714      	adds	r7, #20
    1746:	46bd      	mov	sp, r7
    1748:	f85d 7b04 	ldr.w	r7, [sp], #4
    174c:	4770      	bx	lr

0000174e <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    174e:	b480      	push	{r7}
    1750:	b085      	sub	sp, #20
    1752:	af00      	add	r7, sp, #0
    1754:	60f8      	str	r0, [r7, #12]
    1756:	460b      	mov	r3, r1
    1758:	607a      	str	r2, [r7, #4]
    175a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    175c:	7afb      	ldrb	r3, [r7, #11]
    175e:	68fa      	ldr	r2, [r7, #12]
    1760:	01db      	lsls	r3, r3, #7
    1762:	4413      	add	r3, r2
    1764:	3318      	adds	r3, #24
    1766:	687a      	ldr	r2, [r7, #4]
    1768:	601a      	str	r2, [r3, #0]
}
    176a:	bf00      	nop
    176c:	3714      	adds	r7, #20
    176e:	46bd      	mov	sp, r7
    1770:	f85d 7b04 	ldr.w	r7, [sp], #4
    1774:	4770      	bx	lr

00001776 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1776:	b480      	push	{r7}
    1778:	b085      	sub	sp, #20
    177a:	af00      	add	r7, sp, #0
    177c:	60f8      	str	r0, [r7, #12]
    177e:	460b      	mov	r3, r1
    1780:	607a      	str	r2, [r7, #4]
    1782:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1784:	7afb      	ldrb	r3, [r7, #11]
    1786:	68fa      	ldr	r2, [r7, #12]
    1788:	01db      	lsls	r3, r3, #7
    178a:	4413      	add	r3, r2
    178c:	3314      	adds	r3, #20
    178e:	687a      	ldr	r2, [r7, #4]
    1790:	601a      	str	r2, [r3, #0]
}
    1792:	bf00      	nop
    1794:	3714      	adds	r7, #20
    1796:	46bd      	mov	sp, r7
    1798:	f85d 7b04 	ldr.w	r7, [sp], #4
    179c:	4770      	bx	lr

0000179e <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    179e:	b480      	push	{r7}
    17a0:	b085      	sub	sp, #20
    17a2:	af00      	add	r7, sp, #0
    17a4:	6078      	str	r0, [r7, #4]
    17a6:	4608      	mov	r0, r1
    17a8:	4611      	mov	r1, r2
    17aa:	461a      	mov	r2, r3
    17ac:	4603      	mov	r3, r0
    17ae:	70fb      	strb	r3, [r7, #3]
    17b0:	460b      	mov	r3, r1
    17b2:	70bb      	strb	r3, [r7, #2]
    17b4:	4613      	mov	r3, r2
    17b6:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    17b8:	78fa      	ldrb	r2, [r7, #3]
    17ba:	78bb      	ldrb	r3, [r7, #2]
    17bc:	6879      	ldr	r1, [r7, #4]
    17be:	01d2      	lsls	r2, r2, #7
    17c0:	440a      	add	r2, r1
    17c2:	4413      	add	r3, r2
    17c4:	3330      	adds	r3, #48	; 0x30
    17c6:	781b      	ldrb	r3, [r3, #0]
    17c8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    17ca:	7bfb      	ldrb	r3, [r7, #15]
    17cc:	f023 030f 	bic.w	r3, r3, #15
    17d0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    17d2:	787b      	ldrb	r3, [r7, #1]
    17d4:	f003 030f 	and.w	r3, r3, #15
    17d8:	b2da      	uxtb	r2, r3
    17da:	7bfb      	ldrb	r3, [r7, #15]
    17dc:	4313      	orrs	r3, r2
    17de:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    17e0:	78fa      	ldrb	r2, [r7, #3]
    17e2:	78bb      	ldrb	r3, [r7, #2]
    17e4:	6879      	ldr	r1, [r7, #4]
    17e6:	01d2      	lsls	r2, r2, #7
    17e8:	440a      	add	r2, r1
    17ea:	4413      	add	r3, r2
    17ec:	3330      	adds	r3, #48	; 0x30
    17ee:	7bfa      	ldrb	r2, [r7, #15]
    17f0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    17f2:	bf00      	nop
    17f4:	3714      	adds	r7, #20
    17f6:	46bd      	mov	sp, r7
    17f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    17fc:	4770      	bx	lr

000017fe <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    17fe:	b480      	push	{r7}
    1800:	b085      	sub	sp, #20
    1802:	af00      	add	r7, sp, #0
    1804:	6078      	str	r0, [r7, #4]
    1806:	4608      	mov	r0, r1
    1808:	4611      	mov	r1, r2
    180a:	461a      	mov	r2, r3
    180c:	4603      	mov	r3, r0
    180e:	70fb      	strb	r3, [r7, #3]
    1810:	460b      	mov	r3, r1
    1812:	70bb      	strb	r3, [r7, #2]
    1814:	4613      	mov	r3, r2
    1816:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1818:	78fa      	ldrb	r2, [r7, #3]
    181a:	78bb      	ldrb	r3, [r7, #2]
    181c:	6879      	ldr	r1, [r7, #4]
    181e:	01d2      	lsls	r2, r2, #7
    1820:	440a      	add	r2, r1
    1822:	4413      	add	r3, r2
    1824:	3330      	adds	r3, #48	; 0x30
    1826:	781b      	ldrb	r3, [r3, #0]
    1828:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    182a:	7bfb      	ldrb	r3, [r7, #15]
    182c:	f003 030f 	and.w	r3, r3, #15
    1830:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    1832:	787b      	ldrb	r3, [r7, #1]
    1834:	011b      	lsls	r3, r3, #4
    1836:	b2da      	uxtb	r2, r3
    1838:	7bfb      	ldrb	r3, [r7, #15]
    183a:	4313      	orrs	r3, r2
    183c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    183e:	78fa      	ldrb	r2, [r7, #3]
    1840:	78bb      	ldrb	r3, [r7, #2]
    1842:	6879      	ldr	r1, [r7, #4]
    1844:	01d2      	lsls	r2, r2, #7
    1846:	440a      	add	r2, r1
    1848:	4413      	add	r3, r2
    184a:	3330      	adds	r3, #48	; 0x30
    184c:	7bfa      	ldrb	r2, [r7, #15]
    184e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1850:	bf00      	nop
    1852:	3714      	adds	r7, #20
    1854:	46bd      	mov	sp, r7
    1856:	f85d 7b04 	ldr.w	r7, [sp], #4
    185a:	4770      	bx	lr

0000185c <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    185c:	b480      	push	{r7}
    185e:	b085      	sub	sp, #20
    1860:	af00      	add	r7, sp, #0
    1862:	6078      	str	r0, [r7, #4]
    1864:	4608      	mov	r0, r1
    1866:	4611      	mov	r1, r2
    1868:	461a      	mov	r2, r3
    186a:	4603      	mov	r3, r0
    186c:	70fb      	strb	r3, [r7, #3]
    186e:	460b      	mov	r3, r1
    1870:	70bb      	strb	r3, [r7, #2]
    1872:	4613      	mov	r3, r2
    1874:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1876:	78fa      	ldrb	r2, [r7, #3]
    1878:	78bb      	ldrb	r3, [r7, #2]
    187a:	6879      	ldr	r1, [r7, #4]
    187c:	01d2      	lsls	r2, r2, #7
    187e:	440a      	add	r2, r1
    1880:	4413      	add	r3, r2
    1882:	3340      	adds	r3, #64	; 0x40
    1884:	781b      	ldrb	r3, [r3, #0]
    1886:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1888:	7bfb      	ldrb	r3, [r7, #15]
    188a:	f023 0301 	bic.w	r3, r3, #1
    188e:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1890:	787a      	ldrb	r2, [r7, #1]
    1892:	7bfb      	ldrb	r3, [r7, #15]
    1894:	4313      	orrs	r3, r2
    1896:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1898:	78fa      	ldrb	r2, [r7, #3]
    189a:	78bb      	ldrb	r3, [r7, #2]
    189c:	6879      	ldr	r1, [r7, #4]
    189e:	01d2      	lsls	r2, r2, #7
    18a0:	440a      	add	r2, r1
    18a2:	4413      	add	r3, r2
    18a4:	3340      	adds	r3, #64	; 0x40
    18a6:	7bfa      	ldrb	r2, [r7, #15]
    18a8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    18aa:	bf00      	nop
    18ac:	3714      	adds	r7, #20
    18ae:	46bd      	mov	sp, r7
    18b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    18b4:	4770      	bx	lr

000018b6 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    18b6:	b490      	push	{r4, r7}
    18b8:	b082      	sub	sp, #8
    18ba:	af00      	add	r7, sp, #0
    18bc:	6078      	str	r0, [r7, #4]
    18be:	460b      	mov	r3, r1
    18c0:	70fb      	strb	r3, [r7, #3]
    18c2:	4613      	mov	r3, r2
    18c4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    18c6:	78fa      	ldrb	r2, [r7, #3]
    18c8:	78bb      	ldrb	r3, [r7, #2]
    18ca:	78f8      	ldrb	r0, [r7, #3]
    18cc:	78b9      	ldrb	r1, [r7, #2]
    18ce:	687c      	ldr	r4, [r7, #4]
    18d0:	01c0      	lsls	r0, r0, #7
    18d2:	4420      	add	r0, r4
    18d4:	4401      	add	r1, r0
    18d6:	3140      	adds	r1, #64	; 0x40
    18d8:	7809      	ldrb	r1, [r1, #0]
    18da:	b2c9      	uxtb	r1, r1
    18dc:	f041 0104 	orr.w	r1, r1, #4
    18e0:	b2c8      	uxtb	r0, r1
    18e2:	6879      	ldr	r1, [r7, #4]
    18e4:	01d2      	lsls	r2, r2, #7
    18e6:	440a      	add	r2, r1
    18e8:	4413      	add	r3, r2
    18ea:	3340      	adds	r3, #64	; 0x40
    18ec:	4602      	mov	r2, r0
    18ee:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    18f0:	bf00      	nop
    18f2:	3708      	adds	r7, #8
    18f4:	46bd      	mov	sp, r7
    18f6:	bc90      	pop	{r4, r7}
    18f8:	4770      	bx	lr

000018fa <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    18fa:	b490      	push	{r4, r7}
    18fc:	b082      	sub	sp, #8
    18fe:	af00      	add	r7, sp, #0
    1900:	6078      	str	r0, [r7, #4]
    1902:	460b      	mov	r3, r1
    1904:	70fb      	strb	r3, [r7, #3]
    1906:	4613      	mov	r3, r2
    1908:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    190a:	78fa      	ldrb	r2, [r7, #3]
    190c:	78bb      	ldrb	r3, [r7, #2]
    190e:	78f8      	ldrb	r0, [r7, #3]
    1910:	78b9      	ldrb	r1, [r7, #2]
    1912:	687c      	ldr	r4, [r7, #4]
    1914:	01c0      	lsls	r0, r0, #7
    1916:	4420      	add	r0, r4
    1918:	4401      	add	r1, r0
    191a:	3140      	adds	r1, #64	; 0x40
    191c:	7809      	ldrb	r1, [r1, #0]
    191e:	b2c9      	uxtb	r1, r1
    1920:	f021 0104 	bic.w	r1, r1, #4
    1924:	b2c8      	uxtb	r0, r1
    1926:	6879      	ldr	r1, [r7, #4]
    1928:	01d2      	lsls	r2, r2, #7
    192a:	440a      	add	r2, r1
    192c:	4413      	add	r3, r2
    192e:	3340      	adds	r3, #64	; 0x40
    1930:	4602      	mov	r2, r0
    1932:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1934:	bf00      	nop
    1936:	3708      	adds	r7, #8
    1938:	46bd      	mov	sp, r7
    193a:	bc90      	pop	{r4, r7}
    193c:	4770      	bx	lr

0000193e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    193e:	b480      	push	{r7}
    1940:	b085      	sub	sp, #20
    1942:	af00      	add	r7, sp, #0
    1944:	60f8      	str	r0, [r7, #12]
    1946:	460b      	mov	r3, r1
    1948:	607a      	str	r2, [r7, #4]
    194a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    194c:	7afb      	ldrb	r3, [r7, #11]
    194e:	68fa      	ldr	r2, [r7, #12]
    1950:	01db      	lsls	r3, r3, #7
    1952:	4413      	add	r3, r2
    1954:	3328      	adds	r3, #40	; 0x28
    1956:	687a      	ldr	r2, [r7, #4]
    1958:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    195a:	bf00      	nop
    195c:	3714      	adds	r7, #20
    195e:	46bd      	mov	sp, r7
    1960:	f85d 7b04 	ldr.w	r7, [sp], #4
    1964:	4770      	bx	lr
	...

00001968 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1968:	b580      	push	{r7, lr}
    196a:	b082      	sub	sp, #8
    196c:	af00      	add	r7, sp, #0
    196e:	4603      	mov	r3, r0
    1970:	6039      	str	r1, [r7, #0]
    1972:	71fb      	strb	r3, [r7, #7]
    1974:	4613      	mov	r3, r2
    1976:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1978:	79bb      	ldrb	r3, [r7, #6]
    197a:	2b01      	cmp	r3, #1
    197c:	d01c      	beq.n	19b8 <_gpio_set_direction+0x50>
    197e:	2b02      	cmp	r3, #2
    1980:	d037      	beq.n	19f2 <_gpio_set_direction+0x8a>
    1982:	2b00      	cmp	r3, #0
    1984:	d14e      	bne.n	1a24 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1986:	79fb      	ldrb	r3, [r7, #7]
    1988:	683a      	ldr	r2, [r7, #0]
    198a:	4619      	mov	r1, r3
    198c:	482a      	ldr	r0, [pc, #168]	; (1a38 <_gpio_set_direction+0xd0>)
    198e:	4b2b      	ldr	r3, [pc, #172]	; (1a3c <_gpio_set_direction+0xd4>)
    1990:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1992:	683b      	ldr	r3, [r7, #0]
    1994:	b29b      	uxth	r3, r3
    1996:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    199a:	79fb      	ldrb	r3, [r7, #7]
    199c:	4619      	mov	r1, r3
    199e:	4826      	ldr	r0, [pc, #152]	; (1a38 <_gpio_set_direction+0xd0>)
    19a0:	4b27      	ldr	r3, [pc, #156]	; (1a40 <_gpio_set_direction+0xd8>)
    19a2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    19a4:	683b      	ldr	r3, [r7, #0]
    19a6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    19a8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    19ac:	79fb      	ldrb	r3, [r7, #7]
    19ae:	4619      	mov	r1, r3
    19b0:	4821      	ldr	r0, [pc, #132]	; (1a38 <_gpio_set_direction+0xd0>)
    19b2:	4b23      	ldr	r3, [pc, #140]	; (1a40 <_gpio_set_direction+0xd8>)
    19b4:	4798      	blx	r3
		break;
    19b6:	e03a      	b.n	1a2e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    19b8:	79fb      	ldrb	r3, [r7, #7]
    19ba:	683a      	ldr	r2, [r7, #0]
    19bc:	4619      	mov	r1, r3
    19be:	481e      	ldr	r0, [pc, #120]	; (1a38 <_gpio_set_direction+0xd0>)
    19c0:	4b1e      	ldr	r3, [pc, #120]	; (1a3c <_gpio_set_direction+0xd4>)
    19c2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    19c4:	683b      	ldr	r3, [r7, #0]
    19c6:	b29b      	uxth	r3, r3
    19c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    19cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    19d0:	79f9      	ldrb	r1, [r7, #7]
    19d2:	461a      	mov	r2, r3
    19d4:	4818      	ldr	r0, [pc, #96]	; (1a38 <_gpio_set_direction+0xd0>)
    19d6:	4b1a      	ldr	r3, [pc, #104]	; (1a40 <_gpio_set_direction+0xd8>)
    19d8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    19da:	683b      	ldr	r3, [r7, #0]
    19dc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    19de:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    19e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    19e6:	79f9      	ldrb	r1, [r7, #7]
    19e8:	461a      	mov	r2, r3
    19ea:	4813      	ldr	r0, [pc, #76]	; (1a38 <_gpio_set_direction+0xd0>)
    19ec:	4b14      	ldr	r3, [pc, #80]	; (1a40 <_gpio_set_direction+0xd8>)
    19ee:	4798      	blx	r3
		break;
    19f0:	e01d      	b.n	1a2e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    19f2:	79fb      	ldrb	r3, [r7, #7]
    19f4:	683a      	ldr	r2, [r7, #0]
    19f6:	4619      	mov	r1, r3
    19f8:	480f      	ldr	r0, [pc, #60]	; (1a38 <_gpio_set_direction+0xd0>)
    19fa:	4b12      	ldr	r3, [pc, #72]	; (1a44 <_gpio_set_direction+0xdc>)
    19fc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    19fe:	683b      	ldr	r3, [r7, #0]
    1a00:	b29b      	uxth	r3, r3
    1a02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1a06:	79fb      	ldrb	r3, [r7, #7]
    1a08:	4619      	mov	r1, r3
    1a0a:	480b      	ldr	r0, [pc, #44]	; (1a38 <_gpio_set_direction+0xd0>)
    1a0c:	4b0c      	ldr	r3, [pc, #48]	; (1a40 <_gpio_set_direction+0xd8>)
    1a0e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1a10:	683b      	ldr	r3, [r7, #0]
    1a12:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1a14:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1a18:	79fb      	ldrb	r3, [r7, #7]
    1a1a:	4619      	mov	r1, r3
    1a1c:	4806      	ldr	r0, [pc, #24]	; (1a38 <_gpio_set_direction+0xd0>)
    1a1e:	4b08      	ldr	r3, [pc, #32]	; (1a40 <_gpio_set_direction+0xd8>)
    1a20:	4798      	blx	r3
		break;
    1a22:	e004      	b.n	1a2e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1a24:	2246      	movs	r2, #70	; 0x46
    1a26:	4908      	ldr	r1, [pc, #32]	; (1a48 <_gpio_set_direction+0xe0>)
    1a28:	2000      	movs	r0, #0
    1a2a:	4b08      	ldr	r3, [pc, #32]	; (1a4c <_gpio_set_direction+0xe4>)
    1a2c:	4798      	blx	r3
	}
}
    1a2e:	bf00      	nop
    1a30:	3708      	adds	r7, #8
    1a32:	46bd      	mov	sp, r7
    1a34:	bd80      	pop	{r7, pc}
    1a36:	bf00      	nop
    1a38:	41008000 	.word	0x41008000
    1a3c:	00001727 	.word	0x00001727
    1a40:	0000193f 	.word	0x0000193f
    1a44:	000016ff 	.word	0x000016ff
    1a48:	00010d3c 	.word	0x00010d3c
    1a4c:	00004409 	.word	0x00004409

00001a50 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1a50:	b580      	push	{r7, lr}
    1a52:	b082      	sub	sp, #8
    1a54:	af00      	add	r7, sp, #0
    1a56:	4603      	mov	r3, r0
    1a58:	6039      	str	r1, [r7, #0]
    1a5a:	71fb      	strb	r3, [r7, #7]
    1a5c:	4613      	mov	r3, r2
    1a5e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1a60:	79bb      	ldrb	r3, [r7, #6]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d006      	beq.n	1a74 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1a66:	79fb      	ldrb	r3, [r7, #7]
    1a68:	683a      	ldr	r2, [r7, #0]
    1a6a:	4619      	mov	r1, r3
    1a6c:	4806      	ldr	r0, [pc, #24]	; (1a88 <_gpio_set_level+0x38>)
    1a6e:	4b07      	ldr	r3, [pc, #28]	; (1a8c <_gpio_set_level+0x3c>)
    1a70:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1a72:	e005      	b.n	1a80 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1a74:	79fb      	ldrb	r3, [r7, #7]
    1a76:	683a      	ldr	r2, [r7, #0]
    1a78:	4619      	mov	r1, r3
    1a7a:	4803      	ldr	r0, [pc, #12]	; (1a88 <_gpio_set_level+0x38>)
    1a7c:	4b04      	ldr	r3, [pc, #16]	; (1a90 <_gpio_set_level+0x40>)
    1a7e:	4798      	blx	r3
}
    1a80:	bf00      	nop
    1a82:	3708      	adds	r7, #8
    1a84:	46bd      	mov	sp, r7
    1a86:	bd80      	pop	{r7, pc}
    1a88:	41008000 	.word	0x41008000
    1a8c:	0000174f 	.word	0x0000174f
    1a90:	00001777 	.word	0x00001777

00001a94 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1a94:	b580      	push	{r7, lr}
    1a96:	b082      	sub	sp, #8
    1a98:	af00      	add	r7, sp, #0
    1a9a:	4603      	mov	r3, r0
    1a9c:	71fb      	strb	r3, [r7, #7]
    1a9e:	460b      	mov	r3, r1
    1aa0:	71bb      	strb	r3, [r7, #6]
    1aa2:	4613      	mov	r3, r2
    1aa4:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1aa6:	797b      	ldrb	r3, [r7, #5]
    1aa8:	2b01      	cmp	r3, #1
    1aaa:	d00a      	beq.n	1ac2 <_gpio_set_pin_pull_mode+0x2e>
    1aac:	2b02      	cmp	r3, #2
    1aae:	d01f      	beq.n	1af0 <_gpio_set_pin_pull_mode+0x5c>
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d134      	bne.n	1b1e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1ab4:	79ba      	ldrb	r2, [r7, #6]
    1ab6:	79fb      	ldrb	r3, [r7, #7]
    1ab8:	4619      	mov	r1, r3
    1aba:	481e      	ldr	r0, [pc, #120]	; (1b34 <_gpio_set_pin_pull_mode+0xa0>)
    1abc:	4b1e      	ldr	r3, [pc, #120]	; (1b38 <_gpio_set_pin_pull_mode+0xa4>)
    1abe:	4798      	blx	r3
		break;
    1ac0:	e033      	b.n	1b2a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1ac2:	79bb      	ldrb	r3, [r7, #6]
    1ac4:	2201      	movs	r2, #1
    1ac6:	409a      	lsls	r2, r3
    1ac8:	79fb      	ldrb	r3, [r7, #7]
    1aca:	4619      	mov	r1, r3
    1acc:	4819      	ldr	r0, [pc, #100]	; (1b34 <_gpio_set_pin_pull_mode+0xa0>)
    1ace:	4b1b      	ldr	r3, [pc, #108]	; (1b3c <_gpio_set_pin_pull_mode+0xa8>)
    1ad0:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1ad2:	79ba      	ldrb	r2, [r7, #6]
    1ad4:	79fb      	ldrb	r3, [r7, #7]
    1ad6:	4619      	mov	r1, r3
    1ad8:	4816      	ldr	r0, [pc, #88]	; (1b34 <_gpio_set_pin_pull_mode+0xa0>)
    1ada:	4b19      	ldr	r3, [pc, #100]	; (1b40 <_gpio_set_pin_pull_mode+0xac>)
    1adc:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1ade:	79bb      	ldrb	r3, [r7, #6]
    1ae0:	2201      	movs	r2, #1
    1ae2:	409a      	lsls	r2, r3
    1ae4:	79fb      	ldrb	r3, [r7, #7]
    1ae6:	4619      	mov	r1, r3
    1ae8:	4812      	ldr	r0, [pc, #72]	; (1b34 <_gpio_set_pin_pull_mode+0xa0>)
    1aea:	4b16      	ldr	r3, [pc, #88]	; (1b44 <_gpio_set_pin_pull_mode+0xb0>)
    1aec:	4798      	blx	r3
		break;
    1aee:	e01c      	b.n	1b2a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1af0:	79bb      	ldrb	r3, [r7, #6]
    1af2:	2201      	movs	r2, #1
    1af4:	409a      	lsls	r2, r3
    1af6:	79fb      	ldrb	r3, [r7, #7]
    1af8:	4619      	mov	r1, r3
    1afa:	480e      	ldr	r0, [pc, #56]	; (1b34 <_gpio_set_pin_pull_mode+0xa0>)
    1afc:	4b0f      	ldr	r3, [pc, #60]	; (1b3c <_gpio_set_pin_pull_mode+0xa8>)
    1afe:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1b00:	79ba      	ldrb	r2, [r7, #6]
    1b02:	79fb      	ldrb	r3, [r7, #7]
    1b04:	4619      	mov	r1, r3
    1b06:	480b      	ldr	r0, [pc, #44]	; (1b34 <_gpio_set_pin_pull_mode+0xa0>)
    1b08:	4b0d      	ldr	r3, [pc, #52]	; (1b40 <_gpio_set_pin_pull_mode+0xac>)
    1b0a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1b0c:	79bb      	ldrb	r3, [r7, #6]
    1b0e:	2201      	movs	r2, #1
    1b10:	409a      	lsls	r2, r3
    1b12:	79fb      	ldrb	r3, [r7, #7]
    1b14:	4619      	mov	r1, r3
    1b16:	4807      	ldr	r0, [pc, #28]	; (1b34 <_gpio_set_pin_pull_mode+0xa0>)
    1b18:	4b0b      	ldr	r3, [pc, #44]	; (1b48 <_gpio_set_pin_pull_mode+0xb4>)
    1b1a:	4798      	blx	r3
		break;
    1b1c:	e005      	b.n	1b2a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1b1e:	2289      	movs	r2, #137	; 0x89
    1b20:	490a      	ldr	r1, [pc, #40]	; (1b4c <_gpio_set_pin_pull_mode+0xb8>)
    1b22:	2000      	movs	r0, #0
    1b24:	4b0a      	ldr	r3, [pc, #40]	; (1b50 <_gpio_set_pin_pull_mode+0xbc>)
    1b26:	4798      	blx	r3
		break;
    1b28:	bf00      	nop
	}
}
    1b2a:	bf00      	nop
    1b2c:	3708      	adds	r7, #8
    1b2e:	46bd      	mov	sp, r7
    1b30:	bd80      	pop	{r7, pc}
    1b32:	bf00      	nop
    1b34:	41008000 	.word	0x41008000
    1b38:	000018fb 	.word	0x000018fb
    1b3c:	00001727 	.word	0x00001727
    1b40:	000018b7 	.word	0x000018b7
    1b44:	0000174f 	.word	0x0000174f
    1b48:	00001777 	.word	0x00001777
    1b4c:	00010d3c 	.word	0x00010d3c
    1b50:	00004409 	.word	0x00004409

00001b54 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1b54:	b590      	push	{r4, r7, lr}
    1b56:	b085      	sub	sp, #20
    1b58:	af00      	add	r7, sp, #0
    1b5a:	6078      	str	r0, [r7, #4]
    1b5c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1b5e:	687b      	ldr	r3, [r7, #4]
    1b60:	095b      	lsrs	r3, r3, #5
    1b62:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	b2db      	uxtb	r3, r3
    1b68:	f003 031f 	and.w	r3, r3, #31
    1b6c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1b6e:	683b      	ldr	r3, [r7, #0]
    1b70:	f1b3 3fff 	cmp.w	r3, #4294967295
    1b74:	d106      	bne.n	1b84 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1b76:	7bba      	ldrb	r2, [r7, #14]
    1b78:	7bf9      	ldrb	r1, [r7, #15]
    1b7a:	2300      	movs	r3, #0
    1b7c:	4812      	ldr	r0, [pc, #72]	; (1bc8 <_gpio_set_pin_function+0x74>)
    1b7e:	4c13      	ldr	r4, [pc, #76]	; (1bcc <_gpio_set_pin_function+0x78>)
    1b80:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1b82:	e01d      	b.n	1bc0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1b84:	7bba      	ldrb	r2, [r7, #14]
    1b86:	7bf9      	ldrb	r1, [r7, #15]
    1b88:	2301      	movs	r3, #1
    1b8a:	480f      	ldr	r0, [pc, #60]	; (1bc8 <_gpio_set_pin_function+0x74>)
    1b8c:	4c0f      	ldr	r4, [pc, #60]	; (1bcc <_gpio_set_pin_function+0x78>)
    1b8e:	47a0      	blx	r4
		if (pin & 1) {
    1b90:	7bbb      	ldrb	r3, [r7, #14]
    1b92:	f003 0301 	and.w	r3, r3, #1
    1b96:	2b00      	cmp	r3, #0
    1b98:	d009      	beq.n	1bae <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1b9a:	7bbb      	ldrb	r3, [r7, #14]
    1b9c:	085b      	lsrs	r3, r3, #1
    1b9e:	b2da      	uxtb	r2, r3
    1ba0:	683b      	ldr	r3, [r7, #0]
    1ba2:	b2db      	uxtb	r3, r3
    1ba4:	7bf9      	ldrb	r1, [r7, #15]
    1ba6:	4808      	ldr	r0, [pc, #32]	; (1bc8 <_gpio_set_pin_function+0x74>)
    1ba8:	4c09      	ldr	r4, [pc, #36]	; (1bd0 <_gpio_set_pin_function+0x7c>)
    1baa:	47a0      	blx	r4
}
    1bac:	e008      	b.n	1bc0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1bae:	7bbb      	ldrb	r3, [r7, #14]
    1bb0:	085b      	lsrs	r3, r3, #1
    1bb2:	b2da      	uxtb	r2, r3
    1bb4:	683b      	ldr	r3, [r7, #0]
    1bb6:	b2db      	uxtb	r3, r3
    1bb8:	7bf9      	ldrb	r1, [r7, #15]
    1bba:	4803      	ldr	r0, [pc, #12]	; (1bc8 <_gpio_set_pin_function+0x74>)
    1bbc:	4c05      	ldr	r4, [pc, #20]	; (1bd4 <_gpio_set_pin_function+0x80>)
    1bbe:	47a0      	blx	r4
}
    1bc0:	bf00      	nop
    1bc2:	3714      	adds	r7, #20
    1bc4:	46bd      	mov	sp, r7
    1bc6:	bd90      	pop	{r4, r7, pc}
    1bc8:	41008000 	.word	0x41008000
    1bcc:	0000185d 	.word	0x0000185d
    1bd0:	000017ff 	.word	0x000017ff
    1bd4:	0000179f 	.word	0x0000179f

00001bd8 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1bd8:	b580      	push	{r7, lr}
    1bda:	b082      	sub	sp, #8
    1bdc:	af00      	add	r7, sp, #0
    1bde:	4603      	mov	r3, r0
    1be0:	460a      	mov	r2, r1
    1be2:	71fb      	strb	r3, [r7, #7]
    1be4:	4613      	mov	r3, r2
    1be6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1be8:	79fb      	ldrb	r3, [r7, #7]
    1bea:	095b      	lsrs	r3, r3, #5
    1bec:	b2d8      	uxtb	r0, r3
    1bee:	79fb      	ldrb	r3, [r7, #7]
    1bf0:	f003 031f 	and.w	r3, r3, #31
    1bf4:	b2db      	uxtb	r3, r3
    1bf6:	79ba      	ldrb	r2, [r7, #6]
    1bf8:	4619      	mov	r1, r3
    1bfa:	4b03      	ldr	r3, [pc, #12]	; (1c08 <gpio_set_pin_pull_mode+0x30>)
    1bfc:	4798      	blx	r3
}
    1bfe:	bf00      	nop
    1c00:	3708      	adds	r7, #8
    1c02:	46bd      	mov	sp, r7
    1c04:	bd80      	pop	{r7, pc}
    1c06:	bf00      	nop
    1c08:	00001a95 	.word	0x00001a95

00001c0c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1c0c:	b580      	push	{r7, lr}
    1c0e:	b082      	sub	sp, #8
    1c10:	af00      	add	r7, sp, #0
    1c12:	6078      	str	r0, [r7, #4]
    1c14:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1c16:	6839      	ldr	r1, [r7, #0]
    1c18:	6878      	ldr	r0, [r7, #4]
    1c1a:	4b03      	ldr	r3, [pc, #12]	; (1c28 <gpio_set_pin_function+0x1c>)
    1c1c:	4798      	blx	r3
}
    1c1e:	bf00      	nop
    1c20:	3708      	adds	r7, #8
    1c22:	46bd      	mov	sp, r7
    1c24:	bd80      	pop	{r7, pc}
    1c26:	bf00      	nop
    1c28:	00001b55 	.word	0x00001b55

00001c2c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	b082      	sub	sp, #8
    1c30:	af00      	add	r7, sp, #0
    1c32:	4603      	mov	r3, r0
    1c34:	460a      	mov	r2, r1
    1c36:	71fb      	strb	r3, [r7, #7]
    1c38:	4613      	mov	r3, r2
    1c3a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1c3c:	79fb      	ldrb	r3, [r7, #7]
    1c3e:	095b      	lsrs	r3, r3, #5
    1c40:	b2d8      	uxtb	r0, r3
    1c42:	79fb      	ldrb	r3, [r7, #7]
    1c44:	f003 031f 	and.w	r3, r3, #31
    1c48:	2201      	movs	r2, #1
    1c4a:	fa02 f303 	lsl.w	r3, r2, r3
    1c4e:	79ba      	ldrb	r2, [r7, #6]
    1c50:	4619      	mov	r1, r3
    1c52:	4b03      	ldr	r3, [pc, #12]	; (1c60 <gpio_set_pin_direction+0x34>)
    1c54:	4798      	blx	r3
}
    1c56:	bf00      	nop
    1c58:	3708      	adds	r7, #8
    1c5a:	46bd      	mov	sp, r7
    1c5c:	bd80      	pop	{r7, pc}
    1c5e:	bf00      	nop
    1c60:	00001969 	.word	0x00001969

00001c64 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1c64:	b580      	push	{r7, lr}
    1c66:	b082      	sub	sp, #8
    1c68:	af00      	add	r7, sp, #0
    1c6a:	4603      	mov	r3, r0
    1c6c:	460a      	mov	r2, r1
    1c6e:	71fb      	strb	r3, [r7, #7]
    1c70:	4613      	mov	r3, r2
    1c72:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1c74:	79fb      	ldrb	r3, [r7, #7]
    1c76:	095b      	lsrs	r3, r3, #5
    1c78:	b2d8      	uxtb	r0, r3
    1c7a:	79fb      	ldrb	r3, [r7, #7]
    1c7c:	f003 031f 	and.w	r3, r3, #31
    1c80:	2201      	movs	r2, #1
    1c82:	fa02 f303 	lsl.w	r3, r2, r3
    1c86:	79ba      	ldrb	r2, [r7, #6]
    1c88:	4619      	mov	r1, r3
    1c8a:	4b03      	ldr	r3, [pc, #12]	; (1c98 <gpio_set_pin_level+0x34>)
    1c8c:	4798      	blx	r3
}
    1c8e:	bf00      	nop
    1c90:	3708      	adds	r7, #8
    1c92:	46bd      	mov	sp, r7
    1c94:	bd80      	pop	{r7, pc}
    1c96:	bf00      	nop
    1c98:	00001a51 	.word	0x00001a51

00001c9c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1c9c:	b580      	push	{r7, lr}
    1c9e:	af00      	add	r7, sp, #0
	_init_chip();
    1ca0:	4b01      	ldr	r3, [pc, #4]	; (1ca8 <init_mcu+0xc>)
    1ca2:	4798      	blx	r3
}
    1ca4:	bf00      	nop
    1ca6:	bd80      	pop	{r7, pc}
    1ca8:	00005015 	.word	0x00005015

00001cac <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1cac:	b580      	push	{r7, lr}
    1cae:	b082      	sub	sp, #8
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	6078      	str	r0, [r7, #4]
    1cb4:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1cb6:	687b      	ldr	r3, [r7, #4]
    1cb8:	2b00      	cmp	r3, #0
    1cba:	d004      	beq.n	1cc6 <wdt_init+0x1a>
    1cbc:	683b      	ldr	r3, [r7, #0]
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d001      	beq.n	1cc6 <wdt_init+0x1a>
    1cc2:	2301      	movs	r3, #1
    1cc4:	e000      	b.n	1cc8 <wdt_init+0x1c>
    1cc6:	2300      	movs	r3, #0
    1cc8:	f003 0301 	and.w	r3, r3, #1
    1ccc:	b2db      	uxtb	r3, r3
    1cce:	2248      	movs	r2, #72	; 0x48
    1cd0:	4907      	ldr	r1, [pc, #28]	; (1cf0 <wdt_init+0x44>)
    1cd2:	4618      	mov	r0, r3
    1cd4:	4b07      	ldr	r3, [pc, #28]	; (1cf4 <wdt_init+0x48>)
    1cd6:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1cd8:	687b      	ldr	r3, [r7, #4]
    1cda:	683a      	ldr	r2, [r7, #0]
    1cdc:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1cde:	687b      	ldr	r3, [r7, #4]
    1ce0:	4618      	mov	r0, r3
    1ce2:	4b05      	ldr	r3, [pc, #20]	; (1cf8 <wdt_init+0x4c>)
    1ce4:	4798      	blx	r3
    1ce6:	4603      	mov	r3, r0
}
    1ce8:	4618      	mov	r0, r3
    1cea:	3708      	adds	r7, #8
    1cec:	46bd      	mov	sp, r7
    1cee:	bd80      	pop	{r7, pc}
    1cf0:	00010d58 	.word	0x00010d58
    1cf4:	00004409 	.word	0x00004409
    1cf8:	0000ba29 	.word	0x0000ba29

00001cfc <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1cfc:	b580      	push	{r7, lr}
    1cfe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1d00:	4804      	ldr	r0, [pc, #16]	; (1d14 <CRC_CALC_init+0x18>)
    1d02:	4b05      	ldr	r3, [pc, #20]	; (1d18 <CRC_CALC_init+0x1c>)
    1d04:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1d06:	4905      	ldr	r1, [pc, #20]	; (1d1c <CRC_CALC_init+0x20>)
    1d08:	4805      	ldr	r0, [pc, #20]	; (1d20 <CRC_CALC_init+0x24>)
    1d0a:	4b06      	ldr	r3, [pc, #24]	; (1d24 <CRC_CALC_init+0x28>)
    1d0c:	4798      	blx	r3
}
    1d0e:	bf00      	nop
    1d10:	bd80      	pop	{r7, pc}
    1d12:	bf00      	nop
    1d14:	40000800 	.word	0x40000800
    1d18:	0000151f 	.word	0x0000151f
    1d1c:	41002000 	.word	0x41002000
    1d20:	2000ace4 	.word	0x2000ace4
    1d24:	00002d99 	.word	0x00002d99

00001d28 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1d28:	b580      	push	{r7, lr}
    1d2a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d2c:	2244      	movs	r2, #68	; 0x44
    1d2e:	2104      	movs	r1, #4
    1d30:	483f      	ldr	r0, [pc, #252]	; (1e30 <EXTERNAL_IRQ_0_init+0x108>)
    1d32:	4b40      	ldr	r3, [pc, #256]	; (1e34 <EXTERNAL_IRQ_0_init+0x10c>)
    1d34:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1d36:	4840      	ldr	r0, [pc, #256]	; (1e38 <EXTERNAL_IRQ_0_init+0x110>)
    1d38:	4b40      	ldr	r3, [pc, #256]	; (1e3c <EXTERNAL_IRQ_0_init+0x114>)
    1d3a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1d3c:	2101      	movs	r1, #1
    1d3e:	2040      	movs	r0, #64	; 0x40
    1d40:	4b3f      	ldr	r3, [pc, #252]	; (1e40 <EXTERNAL_IRQ_0_init+0x118>)
    1d42:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1d44:	2100      	movs	r1, #0
    1d46:	2040      	movs	r0, #64	; 0x40
    1d48:	4b3e      	ldr	r3, [pc, #248]	; (1e44 <EXTERNAL_IRQ_0_init+0x11c>)
    1d4a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1d4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1d50:	2040      	movs	r0, #64	; 0x40
    1d52:	4b3d      	ldr	r3, [pc, #244]	; (1e48 <EXTERNAL_IRQ_0_init+0x120>)
    1d54:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    1d56:	2101      	movs	r1, #1
    1d58:	2021      	movs	r0, #33	; 0x21
    1d5a:	4b39      	ldr	r3, [pc, #228]	; (1e40 <EXTERNAL_IRQ_0_init+0x118>)
    1d5c:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1d5e:	2100      	movs	r1, #0
    1d60:	2021      	movs	r0, #33	; 0x21
    1d62:	4b38      	ldr	r3, [pc, #224]	; (1e44 <EXTERNAL_IRQ_0_init+0x11c>)
    1d64:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    1d66:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1d6a:	2021      	movs	r0, #33	; 0x21
    1d6c:	4b36      	ldr	r3, [pc, #216]	; (1e48 <EXTERNAL_IRQ_0_init+0x120>)
    1d6e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1d70:	2101      	movs	r1, #1
    1d72:	2003      	movs	r0, #3
    1d74:	4b32      	ldr	r3, [pc, #200]	; (1e40 <EXTERNAL_IRQ_0_init+0x118>)
    1d76:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1d78:	2102      	movs	r1, #2
    1d7a:	2003      	movs	r0, #3
    1d7c:	4b31      	ldr	r3, [pc, #196]	; (1e44 <EXTERNAL_IRQ_0_init+0x11c>)
    1d7e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1d80:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1d84:	2003      	movs	r0, #3
    1d86:	4b30      	ldr	r3, [pc, #192]	; (1e48 <EXTERNAL_IRQ_0_init+0x120>)
    1d88:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1d8a:	2101      	movs	r1, #1
    1d8c:	2004      	movs	r0, #4
    1d8e:	4b2c      	ldr	r3, [pc, #176]	; (1e40 <EXTERNAL_IRQ_0_init+0x118>)
    1d90:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1d92:	2102      	movs	r1, #2
    1d94:	2004      	movs	r0, #4
    1d96:	4b2b      	ldr	r3, [pc, #172]	; (1e44 <EXTERNAL_IRQ_0_init+0x11c>)
    1d98:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1d9a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1d9e:	2004      	movs	r0, #4
    1da0:	4b29      	ldr	r3, [pc, #164]	; (1e48 <EXTERNAL_IRQ_0_init+0x120>)
    1da2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1da4:	2101      	movs	r1, #1
    1da6:	2005      	movs	r0, #5
    1da8:	4b25      	ldr	r3, [pc, #148]	; (1e40 <EXTERNAL_IRQ_0_init+0x118>)
    1daa:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1dac:	2102      	movs	r1, #2
    1dae:	2005      	movs	r0, #5
    1db0:	4b24      	ldr	r3, [pc, #144]	; (1e44 <EXTERNAL_IRQ_0_init+0x11c>)
    1db2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1db4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1db8:	2005      	movs	r0, #5
    1dba:	4b23      	ldr	r3, [pc, #140]	; (1e48 <EXTERNAL_IRQ_0_init+0x120>)
    1dbc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1dbe:	2101      	movs	r1, #1
    1dc0:	2056      	movs	r0, #86	; 0x56
    1dc2:	4b1f      	ldr	r3, [pc, #124]	; (1e40 <EXTERNAL_IRQ_0_init+0x118>)
    1dc4:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1dc6:	2102      	movs	r1, #2
    1dc8:	2056      	movs	r0, #86	; 0x56
    1dca:	4b1e      	ldr	r3, [pc, #120]	; (1e44 <EXTERNAL_IRQ_0_init+0x11c>)
    1dcc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1dce:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1dd2:	2056      	movs	r0, #86	; 0x56
    1dd4:	4b1c      	ldr	r3, [pc, #112]	; (1e48 <EXTERNAL_IRQ_0_init+0x120>)
    1dd6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1dd8:	2101      	movs	r1, #1
    1dda:	2057      	movs	r0, #87	; 0x57
    1ddc:	4b18      	ldr	r3, [pc, #96]	; (1e40 <EXTERNAL_IRQ_0_init+0x118>)
    1dde:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1de0:	2102      	movs	r1, #2
    1de2:	2057      	movs	r0, #87	; 0x57
    1de4:	4b17      	ldr	r3, [pc, #92]	; (1e44 <EXTERNAL_IRQ_0_init+0x11c>)
    1de6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1de8:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1dec:	2057      	movs	r0, #87	; 0x57
    1dee:	4b16      	ldr	r3, [pc, #88]	; (1e48 <EXTERNAL_IRQ_0_init+0x120>)
    1df0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1df2:	2101      	movs	r1, #1
    1df4:	2028      	movs	r0, #40	; 0x28
    1df6:	4b12      	ldr	r3, [pc, #72]	; (1e40 <EXTERNAL_IRQ_0_init+0x118>)
    1df8:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1dfa:	2100      	movs	r1, #0
    1dfc:	2028      	movs	r0, #40	; 0x28
    1dfe:	4b11      	ldr	r3, [pc, #68]	; (1e44 <EXTERNAL_IRQ_0_init+0x11c>)
    1e00:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1e02:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1e06:	2028      	movs	r0, #40	; 0x28
    1e08:	4b0f      	ldr	r3, [pc, #60]	; (1e48 <EXTERNAL_IRQ_0_init+0x120>)
    1e0a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1e0c:	2101      	movs	r1, #1
    1e0e:	2029      	movs	r0, #41	; 0x29
    1e10:	4b0b      	ldr	r3, [pc, #44]	; (1e40 <EXTERNAL_IRQ_0_init+0x118>)
    1e12:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1e14:	2100      	movs	r1, #0
    1e16:	2029      	movs	r0, #41	; 0x29
    1e18:	4b0a      	ldr	r3, [pc, #40]	; (1e44 <EXTERNAL_IRQ_0_init+0x11c>)
    1e1a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1e1c:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1e20:	2029      	movs	r0, #41	; 0x29
    1e22:	4b09      	ldr	r3, [pc, #36]	; (1e48 <EXTERNAL_IRQ_0_init+0x120>)
    1e24:	4798      	blx	r3

	ext_irq_init();
    1e26:	4b09      	ldr	r3, [pc, #36]	; (1e4c <EXTERNAL_IRQ_0_init+0x124>)
    1e28:	4798      	blx	r3
}
    1e2a:	bf00      	nop
    1e2c:	bd80      	pop	{r7, pc}
    1e2e:	bf00      	nop
    1e30:	40001c00 	.word	0x40001c00
    1e34:	000013b9 	.word	0x000013b9
    1e38:	40000800 	.word	0x40000800
    1e3c:	0000149f 	.word	0x0000149f
    1e40:	00001c2d 	.word	0x00001c2d
    1e44:	00001bd9 	.word	0x00001bd9
    1e48:	00001c0d 	.word	0x00001c0d
    1e4c:	00002e61 	.word	0x00002e61

00001e50 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1e50:	b580      	push	{r7, lr}
    1e52:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e54:	2244      	movs	r2, #68	; 0x44
    1e56:	210b      	movs	r1, #11
    1e58:	4807      	ldr	r0, [pc, #28]	; (1e78 <EVENT_SYSTEM_0_init+0x28>)
    1e5a:	4b08      	ldr	r3, [pc, #32]	; (1e7c <EVENT_SYSTEM_0_init+0x2c>)
    1e5c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e5e:	2244      	movs	r2, #68	; 0x44
    1e60:	210c      	movs	r1, #12
    1e62:	4805      	ldr	r0, [pc, #20]	; (1e78 <EVENT_SYSTEM_0_init+0x28>)
    1e64:	4b05      	ldr	r3, [pc, #20]	; (1e7c <EVENT_SYSTEM_0_init+0x2c>)
    1e66:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1e68:	4805      	ldr	r0, [pc, #20]	; (1e80 <EVENT_SYSTEM_0_init+0x30>)
    1e6a:	4b06      	ldr	r3, [pc, #24]	; (1e84 <EVENT_SYSTEM_0_init+0x34>)
    1e6c:	4798      	blx	r3

	event_system_init();
    1e6e:	4b06      	ldr	r3, [pc, #24]	; (1e88 <EVENT_SYSTEM_0_init+0x38>)
    1e70:	4798      	blx	r3
}
    1e72:	bf00      	nop
    1e74:	bd80      	pop	{r7, pc}
    1e76:	bf00      	nop
    1e78:	40001c00 	.word	0x40001c00
    1e7c:	000013b9 	.word	0x000013b9
    1e80:	40000800 	.word	0x40000800
    1e84:	0000153f 	.word	0x0000153f
    1e88:	00002e4d 	.word	0x00002e4d

00001e8c <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1e8c:	b580      	push	{r7, lr}
    1e8e:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1e90:	2101      	movs	r1, #1
    1e92:	202b      	movs	r0, #43	; 0x2b
    1e94:	4b2b      	ldr	r3, [pc, #172]	; (1f44 <QSPI_N25Q256_PORT_init+0xb8>)
    1e96:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1e98:	2100      	movs	r1, #0
    1e9a:	202b      	movs	r0, #43	; 0x2b
    1e9c:	4b2a      	ldr	r3, [pc, #168]	; (1f48 <QSPI_N25Q256_PORT_init+0xbc>)
    1e9e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1ea0:	492a      	ldr	r1, [pc, #168]	; (1f4c <QSPI_N25Q256_PORT_init+0xc0>)
    1ea2:	202b      	movs	r0, #43	; 0x2b
    1ea4:	4b2a      	ldr	r3, [pc, #168]	; (1f50 <QSPI_N25Q256_PORT_init+0xc4>)
    1ea6:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1ea8:	2102      	movs	r1, #2
    1eaa:	2008      	movs	r0, #8
    1eac:	4b25      	ldr	r3, [pc, #148]	; (1f44 <QSPI_N25Q256_PORT_init+0xb8>)
    1eae:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1eb0:	2100      	movs	r1, #0
    1eb2:	2008      	movs	r0, #8
    1eb4:	4b27      	ldr	r3, [pc, #156]	; (1f54 <QSPI_N25Q256_PORT_init+0xc8>)
    1eb6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1eb8:	2100      	movs	r1, #0
    1eba:	2008      	movs	r0, #8
    1ebc:	4b22      	ldr	r3, [pc, #136]	; (1f48 <QSPI_N25Q256_PORT_init+0xbc>)
    1ebe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1ec0:	4925      	ldr	r1, [pc, #148]	; (1f58 <QSPI_N25Q256_PORT_init+0xcc>)
    1ec2:	2008      	movs	r0, #8
    1ec4:	4b22      	ldr	r3, [pc, #136]	; (1f50 <QSPI_N25Q256_PORT_init+0xc4>)
    1ec6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1ec8:	2102      	movs	r1, #2
    1eca:	2009      	movs	r0, #9
    1ecc:	4b1d      	ldr	r3, [pc, #116]	; (1f44 <QSPI_N25Q256_PORT_init+0xb8>)
    1ece:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1ed0:	2100      	movs	r1, #0
    1ed2:	2009      	movs	r0, #9
    1ed4:	4b1f      	ldr	r3, [pc, #124]	; (1f54 <QSPI_N25Q256_PORT_init+0xc8>)
    1ed6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1ed8:	2100      	movs	r1, #0
    1eda:	2009      	movs	r0, #9
    1edc:	4b1a      	ldr	r3, [pc, #104]	; (1f48 <QSPI_N25Q256_PORT_init+0xbc>)
    1ede:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1ee0:	491e      	ldr	r1, [pc, #120]	; (1f5c <QSPI_N25Q256_PORT_init+0xd0>)
    1ee2:	2009      	movs	r0, #9
    1ee4:	4b1a      	ldr	r3, [pc, #104]	; (1f50 <QSPI_N25Q256_PORT_init+0xc4>)
    1ee6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1ee8:	2102      	movs	r1, #2
    1eea:	200a      	movs	r0, #10
    1eec:	4b15      	ldr	r3, [pc, #84]	; (1f44 <QSPI_N25Q256_PORT_init+0xb8>)
    1eee:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1ef0:	2100      	movs	r1, #0
    1ef2:	200a      	movs	r0, #10
    1ef4:	4b17      	ldr	r3, [pc, #92]	; (1f54 <QSPI_N25Q256_PORT_init+0xc8>)
    1ef6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1ef8:	2100      	movs	r1, #0
    1efa:	200a      	movs	r0, #10
    1efc:	4b12      	ldr	r3, [pc, #72]	; (1f48 <QSPI_N25Q256_PORT_init+0xbc>)
    1efe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1f00:	4917      	ldr	r1, [pc, #92]	; (1f60 <QSPI_N25Q256_PORT_init+0xd4>)
    1f02:	200a      	movs	r0, #10
    1f04:	4b12      	ldr	r3, [pc, #72]	; (1f50 <QSPI_N25Q256_PORT_init+0xc4>)
    1f06:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1f08:	2102      	movs	r1, #2
    1f0a:	200b      	movs	r0, #11
    1f0c:	4b0d      	ldr	r3, [pc, #52]	; (1f44 <QSPI_N25Q256_PORT_init+0xb8>)
    1f0e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1f10:	2100      	movs	r1, #0
    1f12:	200b      	movs	r0, #11
    1f14:	4b0f      	ldr	r3, [pc, #60]	; (1f54 <QSPI_N25Q256_PORT_init+0xc8>)
    1f16:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1f18:	2100      	movs	r1, #0
    1f1a:	200b      	movs	r0, #11
    1f1c:	4b0a      	ldr	r3, [pc, #40]	; (1f48 <QSPI_N25Q256_PORT_init+0xbc>)
    1f1e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1f20:	4910      	ldr	r1, [pc, #64]	; (1f64 <QSPI_N25Q256_PORT_init+0xd8>)
    1f22:	200b      	movs	r0, #11
    1f24:	4b0a      	ldr	r3, [pc, #40]	; (1f50 <QSPI_N25Q256_PORT_init+0xc4>)
    1f26:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1f28:	2101      	movs	r1, #1
    1f2a:	202a      	movs	r0, #42	; 0x2a
    1f2c:	4b05      	ldr	r3, [pc, #20]	; (1f44 <QSPI_N25Q256_PORT_init+0xb8>)
    1f2e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1f30:	2100      	movs	r1, #0
    1f32:	202a      	movs	r0, #42	; 0x2a
    1f34:	4b04      	ldr	r3, [pc, #16]	; (1f48 <QSPI_N25Q256_PORT_init+0xbc>)
    1f36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1f38:	490b      	ldr	r1, [pc, #44]	; (1f68 <QSPI_N25Q256_PORT_init+0xdc>)
    1f3a:	202a      	movs	r0, #42	; 0x2a
    1f3c:	4b04      	ldr	r3, [pc, #16]	; (1f50 <QSPI_N25Q256_PORT_init+0xc4>)
    1f3e:	4798      	blx	r3
}
    1f40:	bf00      	nop
    1f42:	bd80      	pop	{r7, pc}
    1f44:	00001c2d 	.word	0x00001c2d
    1f48:	00001bd9 	.word	0x00001bd9
    1f4c:	002b0007 	.word	0x002b0007
    1f50:	00001c0d 	.word	0x00001c0d
    1f54:	00001c65 	.word	0x00001c65
    1f58:	00080007 	.word	0x00080007
    1f5c:	00090007 	.word	0x00090007
    1f60:	000a0007 	.word	0x000a0007
    1f64:	000b0007 	.word	0x000b0007
    1f68:	002a0007 	.word	0x002a0007

00001f6c <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1f6c:	b580      	push	{r7, lr}
    1f6e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1f70:	4805      	ldr	r0, [pc, #20]	; (1f88 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1f72:	4b06      	ldr	r3, [pc, #24]	; (1f8c <QSPI_N25Q256_CLOCK_init+0x20>)
    1f74:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1f76:	4804      	ldr	r0, [pc, #16]	; (1f88 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1f78:	4b05      	ldr	r3, [pc, #20]	; (1f90 <QSPI_N25Q256_CLOCK_init+0x24>)
    1f7a:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1f7c:	4802      	ldr	r0, [pc, #8]	; (1f88 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1f7e:	4b05      	ldr	r3, [pc, #20]	; (1f94 <QSPI_N25Q256_CLOCK_init+0x28>)
    1f80:	4798      	blx	r3
}
    1f82:	bf00      	nop
    1f84:	bd80      	pop	{r7, pc}
    1f86:	bf00      	nop
    1f88:	40000800 	.word	0x40000800
    1f8c:	000013ff 	.word	0x000013ff
    1f90:	0000143f 	.word	0x0000143f
    1f94:	0000161f 	.word	0x0000161f

00001f98 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1f98:	b580      	push	{r7, lr}
    1f9a:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1f9c:	4b04      	ldr	r3, [pc, #16]	; (1fb0 <QSPI_N25Q256_init+0x18>)
    1f9e:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1fa0:	4904      	ldr	r1, [pc, #16]	; (1fb4 <QSPI_N25Q256_init+0x1c>)
    1fa2:	4805      	ldr	r0, [pc, #20]	; (1fb8 <QSPI_N25Q256_init+0x20>)
    1fa4:	4b05      	ldr	r3, [pc, #20]	; (1fbc <QSPI_N25Q256_init+0x24>)
    1fa6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1fa8:	4b05      	ldr	r3, [pc, #20]	; (1fc0 <QSPI_N25Q256_init+0x28>)
    1faa:	4798      	blx	r3
}
    1fac:	bf00      	nop
    1fae:	bd80      	pop	{r7, pc}
    1fb0:	00001f6d 	.word	0x00001f6d
    1fb4:	42003400 	.word	0x42003400
    1fb8:	2000ab78 	.word	0x2000ab78
    1fbc:	00003325 	.word	0x00003325
    1fc0:	00001e8d 	.word	0x00001e8d

00001fc4 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1fc4:	b580      	push	{r7, lr}
    1fc6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1fc8:	4802      	ldr	r0, [pc, #8]	; (1fd4 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1fca:	4b03      	ldr	r3, [pc, #12]	; (1fd8 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1fcc:	4798      	blx	r3
}
    1fce:	bf00      	nop
    1fd0:	bd80      	pop	{r7, pc}
    1fd2:	bf00      	nop
    1fd4:	40000800 	.word	0x40000800
    1fd8:	0000147f 	.word	0x0000147f

00001fdc <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1fdc:	b580      	push	{r7, lr}
    1fde:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1fe0:	4b03      	ldr	r3, [pc, #12]	; (1ff0 <DATETIME_CLOCK_init+0x14>)
    1fe2:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1fe4:	4903      	ldr	r1, [pc, #12]	; (1ff4 <DATETIME_CLOCK_init+0x18>)
    1fe6:	4804      	ldr	r0, [pc, #16]	; (1ff8 <DATETIME_CLOCK_init+0x1c>)
    1fe8:	4b04      	ldr	r3, [pc, #16]	; (1ffc <DATETIME_CLOCK_init+0x20>)
    1fea:	4798      	blx	r3
}
    1fec:	bf00      	nop
    1fee:	bd80      	pop	{r7, pc}
    1ff0:	00001fc5 	.word	0x00001fc5
    1ff4:	40002400 	.word	0x40002400
    1ff8:	2000acc0 	.word	0x2000acc0
    1ffc:	00002bed 	.word	0x00002bed

00002000 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    2000:	b580      	push	{r7, lr}
    2002:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    2004:	2101      	movs	r1, #1
    2006:	2010      	movs	r0, #16
    2008:	4b07      	ldr	r3, [pc, #28]	; (2028 <I2C_HEATERS_PORT_init+0x28>)
    200a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    200c:	4907      	ldr	r1, [pc, #28]	; (202c <I2C_HEATERS_PORT_init+0x2c>)
    200e:	2010      	movs	r0, #16
    2010:	4b07      	ldr	r3, [pc, #28]	; (2030 <I2C_HEATERS_PORT_init+0x30>)
    2012:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    2014:	2101      	movs	r1, #1
    2016:	2011      	movs	r0, #17
    2018:	4b03      	ldr	r3, [pc, #12]	; (2028 <I2C_HEATERS_PORT_init+0x28>)
    201a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    201c:	4905      	ldr	r1, [pc, #20]	; (2034 <I2C_HEATERS_PORT_init+0x34>)
    201e:	2011      	movs	r0, #17
    2020:	4b03      	ldr	r3, [pc, #12]	; (2030 <I2C_HEATERS_PORT_init+0x30>)
    2022:	4798      	blx	r3
}
    2024:	bf00      	nop
    2026:	bd80      	pop	{r7, pc}
    2028:	00001bd9 	.word	0x00001bd9
    202c:	00100002 	.word	0x00100002
    2030:	00001c0d 	.word	0x00001c0d
    2034:	00110002 	.word	0x00110002

00002038 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    2038:	b580      	push	{r7, lr}
    203a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    203c:	2242      	movs	r2, #66	; 0x42
    203e:	2108      	movs	r1, #8
    2040:	4806      	ldr	r0, [pc, #24]	; (205c <I2C_HEATERS_CLOCK_init+0x24>)
    2042:	4b07      	ldr	r3, [pc, #28]	; (2060 <I2C_HEATERS_CLOCK_init+0x28>)
    2044:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2046:	224a      	movs	r2, #74	; 0x4a
    2048:	2103      	movs	r1, #3
    204a:	4804      	ldr	r0, [pc, #16]	; (205c <I2C_HEATERS_CLOCK_init+0x24>)
    204c:	4b04      	ldr	r3, [pc, #16]	; (2060 <I2C_HEATERS_CLOCK_init+0x28>)
    204e:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    2050:	4804      	ldr	r0, [pc, #16]	; (2064 <I2C_HEATERS_CLOCK_init+0x2c>)
    2052:	4b05      	ldr	r3, [pc, #20]	; (2068 <I2C_HEATERS_CLOCK_init+0x30>)
    2054:	4798      	blx	r3
}
    2056:	bf00      	nop
    2058:	bd80      	pop	{r7, pc}
    205a:	bf00      	nop
    205c:	40001c00 	.word	0x40001c00
    2060:	000013b9 	.word	0x000013b9
    2064:	40000800 	.word	0x40000800
    2068:	000014bf 	.word	0x000014bf

0000206c <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    206c:	b580      	push	{r7, lr}
    206e:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    2070:	4b04      	ldr	r3, [pc, #16]	; (2084 <I2C_HEATERS_init+0x18>)
    2072:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    2074:	4904      	ldr	r1, [pc, #16]	; (2088 <I2C_HEATERS_init+0x1c>)
    2076:	4805      	ldr	r0, [pc, #20]	; (208c <I2C_HEATERS_init+0x20>)
    2078:	4b05      	ldr	r3, [pc, #20]	; (2090 <I2C_HEATERS_init+0x24>)
    207a:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    207c:	4b05      	ldr	r3, [pc, #20]	; (2094 <I2C_HEATERS_init+0x28>)
    207e:	4798      	blx	r3
}
    2080:	bf00      	nop
    2082:	bd80      	pop	{r7, pc}
    2084:	00002039 	.word	0x00002039
    2088:	40003400 	.word	0x40003400
    208c:	2000ac18 	.word	0x2000ac18
    2090:	00003129 	.word	0x00003129
    2094:	00002001 	.word	0x00002001

00002098 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    2098:	b580      	push	{r7, lr}
    209a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    209c:	2100      	movs	r1, #0
    209e:	203b      	movs	r0, #59	; 0x3b
    20a0:	4b11      	ldr	r3, [pc, #68]	; (20e8 <SPI_TEMP_PORT_init+0x50>)
    20a2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    20a4:	2102      	movs	r1, #2
    20a6:	203b      	movs	r0, #59	; 0x3b
    20a8:	4b10      	ldr	r3, [pc, #64]	; (20ec <SPI_TEMP_PORT_init+0x54>)
    20aa:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    20ac:	4910      	ldr	r1, [pc, #64]	; (20f0 <SPI_TEMP_PORT_init+0x58>)
    20ae:	203b      	movs	r0, #59	; 0x3b
    20b0:	4b10      	ldr	r3, [pc, #64]	; (20f4 <SPI_TEMP_PORT_init+0x5c>)
    20b2:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    20b4:	2100      	movs	r1, #0
    20b6:	203a      	movs	r0, #58	; 0x3a
    20b8:	4b0b      	ldr	r3, [pc, #44]	; (20e8 <SPI_TEMP_PORT_init+0x50>)
    20ba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    20bc:	2102      	movs	r1, #2
    20be:	203a      	movs	r0, #58	; 0x3a
    20c0:	4b0a      	ldr	r3, [pc, #40]	; (20ec <SPI_TEMP_PORT_init+0x54>)
    20c2:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    20c4:	490c      	ldr	r1, [pc, #48]	; (20f8 <SPI_TEMP_PORT_init+0x60>)
    20c6:	203a      	movs	r0, #58	; 0x3a
    20c8:	4b0a      	ldr	r3, [pc, #40]	; (20f4 <SPI_TEMP_PORT_init+0x5c>)
    20ca:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    20cc:	2101      	movs	r1, #1
    20ce:	203c      	movs	r0, #60	; 0x3c
    20d0:	4b06      	ldr	r3, [pc, #24]	; (20ec <SPI_TEMP_PORT_init+0x54>)
    20d2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    20d4:	2100      	movs	r1, #0
    20d6:	203c      	movs	r0, #60	; 0x3c
    20d8:	4b08      	ldr	r3, [pc, #32]	; (20fc <SPI_TEMP_PORT_init+0x64>)
    20da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    20dc:	4908      	ldr	r1, [pc, #32]	; (2100 <SPI_TEMP_PORT_init+0x68>)
    20de:	203c      	movs	r0, #60	; 0x3c
    20e0:	4b04      	ldr	r3, [pc, #16]	; (20f4 <SPI_TEMP_PORT_init+0x5c>)
    20e2:	4798      	blx	r3
}
    20e4:	bf00      	nop
    20e6:	bd80      	pop	{r7, pc}
    20e8:	00001c65 	.word	0x00001c65
    20ec:	00001c2d 	.word	0x00001c2d
    20f0:	003b0003 	.word	0x003b0003
    20f4:	00001c0d 	.word	0x00001c0d
    20f8:	003a0003 	.word	0x003a0003
    20fc:	00001bd9 	.word	0x00001bd9
    2100:	003c0003 	.word	0x003c0003

00002104 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    2104:	b580      	push	{r7, lr}
    2106:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2108:	2245      	movs	r2, #69	; 0x45
    210a:	2122      	movs	r1, #34	; 0x22
    210c:	4806      	ldr	r0, [pc, #24]	; (2128 <SPI_TEMP_CLOCK_init+0x24>)
    210e:	4b07      	ldr	r3, [pc, #28]	; (212c <SPI_TEMP_CLOCK_init+0x28>)
    2110:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2112:	224a      	movs	r2, #74	; 0x4a
    2114:	2103      	movs	r1, #3
    2116:	4804      	ldr	r0, [pc, #16]	; (2128 <SPI_TEMP_CLOCK_init+0x24>)
    2118:	4b04      	ldr	r3, [pc, #16]	; (212c <SPI_TEMP_CLOCK_init+0x28>)
    211a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    211c:	4804      	ldr	r0, [pc, #16]	; (2130 <SPI_TEMP_CLOCK_init+0x2c>)
    211e:	4b05      	ldr	r3, [pc, #20]	; (2134 <SPI_TEMP_CLOCK_init+0x30>)
    2120:	4798      	blx	r3
}
    2122:	bf00      	nop
    2124:	bd80      	pop	{r7, pc}
    2126:	bf00      	nop
    2128:	40001c00 	.word	0x40001c00
    212c:	000013b9 	.word	0x000013b9
    2130:	40000800 	.word	0x40000800
    2134:	0000163f 	.word	0x0000163f

00002138 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    2138:	b580      	push	{r7, lr}
    213a:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    213c:	4b05      	ldr	r3, [pc, #20]	; (2154 <SPI_TEMP_init+0x1c>)
    213e:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    2140:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2144:	4804      	ldr	r0, [pc, #16]	; (2158 <SPI_TEMP_init+0x20>)
    2146:	4b05      	ldr	r3, [pc, #20]	; (215c <SPI_TEMP_init+0x24>)
    2148:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    214a:	4b05      	ldr	r3, [pc, #20]	; (2160 <SPI_TEMP_init+0x28>)
    214c:	4798      	blx	r3
}
    214e:	bf00      	nop
    2150:	bd80      	pop	{r7, pc}
    2152:	bf00      	nop
    2154:	00002105 	.word	0x00002105
    2158:	2000ab20 	.word	0x2000ab20
    215c:	00003435 	.word	0x00003435
    2160:	00002099 	.word	0x00002099

00002164 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    2164:	b580      	push	{r7, lr}
    2166:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    2168:	2100      	movs	r1, #0
    216a:	2017      	movs	r0, #23
    216c:	4b07      	ldr	r3, [pc, #28]	; (218c <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    216e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    2170:	4907      	ldr	r1, [pc, #28]	; (2190 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    2172:	2017      	movs	r0, #23
    2174:	4b07      	ldr	r3, [pc, #28]	; (2194 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    2176:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    2178:	2100      	movs	r1, #0
    217a:	2016      	movs	r0, #22
    217c:	4b03      	ldr	r3, [pc, #12]	; (218c <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    217e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    2180:	4905      	ldr	r1, [pc, #20]	; (2198 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    2182:	2016      	movs	r0, #22
    2184:	4b03      	ldr	r3, [pc, #12]	; (2194 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    2186:	4798      	blx	r3
}
    2188:	bf00      	nop
    218a:	bd80      	pop	{r7, pc}
    218c:	00001bd9 	.word	0x00001bd9
    2190:	00170003 	.word	0x00170003
    2194:	00001c0d 	.word	0x00001c0d
    2198:	00160003 	.word	0x00160003

0000219c <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    219c:	b580      	push	{r7, lr}
    219e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21a0:	2244      	movs	r2, #68	; 0x44
    21a2:	2123      	movs	r1, #35	; 0x23
    21a4:	4806      	ldr	r0, [pc, #24]	; (21c0 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    21a6:	4b07      	ldr	r3, [pc, #28]	; (21c4 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    21a8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21aa:	224a      	movs	r2, #74	; 0x4a
    21ac:	2103      	movs	r1, #3
    21ae:	4804      	ldr	r0, [pc, #16]	; (21c0 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    21b0:	4b04      	ldr	r3, [pc, #16]	; (21c4 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    21b2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    21b4:	4804      	ldr	r0, [pc, #16]	; (21c8 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    21b6:	4b05      	ldr	r3, [pc, #20]	; (21cc <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    21b8:	4798      	blx	r3
}
    21ba:	bf00      	nop
    21bc:	bd80      	pop	{r7, pc}
    21be:	bf00      	nop
    21c0:	40001c00 	.word	0x40001c00
    21c4:	000013b9 	.word	0x000013b9
    21c8:	40000800 	.word	0x40000800
    21cc:	0000165f 	.word	0x0000165f

000021d0 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    21d4:	4b04      	ldr	r3, [pc, #16]	; (21e8 <I2C_FLAPPER_VALVE_init+0x18>)
    21d6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    21d8:	4904      	ldr	r1, [pc, #16]	; (21ec <I2C_FLAPPER_VALVE_init+0x1c>)
    21da:	4805      	ldr	r0, [pc, #20]	; (21f0 <I2C_FLAPPER_VALVE_init+0x20>)
    21dc:	4b05      	ldr	r3, [pc, #20]	; (21f4 <I2C_FLAPPER_VALVE_init+0x24>)
    21de:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    21e0:	4b05      	ldr	r3, [pc, #20]	; (21f8 <I2C_FLAPPER_VALVE_init+0x28>)
    21e2:	4798      	blx	r3
}
    21e4:	bf00      	nop
    21e6:	bd80      	pop	{r7, pc}
    21e8:	0000219d 	.word	0x0000219d
    21ec:	43000400 	.word	0x43000400
    21f0:	2000abbc 	.word	0x2000abbc
    21f4:	00003129 	.word	0x00003129
    21f8:	00002165 	.word	0x00002165

000021fc <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    21fc:	b580      	push	{r7, lr}
    21fe:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    2200:	2100      	movs	r1, #0
    2202:	2044      	movs	r0, #68	; 0x44
    2204:	4b11      	ldr	r3, [pc, #68]	; (224c <SPI_HI3593_PORT_init+0x50>)
    2206:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    2208:	2102      	movs	r1, #2
    220a:	2044      	movs	r0, #68	; 0x44
    220c:	4b10      	ldr	r3, [pc, #64]	; (2250 <SPI_HI3593_PORT_init+0x54>)
    220e:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    2210:	4910      	ldr	r1, [pc, #64]	; (2254 <SPI_HI3593_PORT_init+0x58>)
    2212:	2044      	movs	r0, #68	; 0x44
    2214:	4b10      	ldr	r3, [pc, #64]	; (2258 <SPI_HI3593_PORT_init+0x5c>)
    2216:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    2218:	2100      	movs	r1, #0
    221a:	2045      	movs	r0, #69	; 0x45
    221c:	4b0b      	ldr	r3, [pc, #44]	; (224c <SPI_HI3593_PORT_init+0x50>)
    221e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    2220:	2102      	movs	r1, #2
    2222:	2045      	movs	r0, #69	; 0x45
    2224:	4b0a      	ldr	r3, [pc, #40]	; (2250 <SPI_HI3593_PORT_init+0x54>)
    2226:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    2228:	490c      	ldr	r1, [pc, #48]	; (225c <SPI_HI3593_PORT_init+0x60>)
    222a:	2045      	movs	r0, #69	; 0x45
    222c:	4b0a      	ldr	r3, [pc, #40]	; (2258 <SPI_HI3593_PORT_init+0x5c>)
    222e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    2230:	2101      	movs	r1, #1
    2232:	2047      	movs	r0, #71	; 0x47
    2234:	4b06      	ldr	r3, [pc, #24]	; (2250 <SPI_HI3593_PORT_init+0x54>)
    2236:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    2238:	2100      	movs	r1, #0
    223a:	2047      	movs	r0, #71	; 0x47
    223c:	4b08      	ldr	r3, [pc, #32]	; (2260 <SPI_HI3593_PORT_init+0x64>)
    223e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    2240:	4908      	ldr	r1, [pc, #32]	; (2264 <SPI_HI3593_PORT_init+0x68>)
    2242:	2047      	movs	r0, #71	; 0x47
    2244:	4b04      	ldr	r3, [pc, #16]	; (2258 <SPI_HI3593_PORT_init+0x5c>)
    2246:	4798      	blx	r3
}
    2248:	bf00      	nop
    224a:	bd80      	pop	{r7, pc}
    224c:	00001c65 	.word	0x00001c65
    2250:	00001c2d 	.word	0x00001c2d
    2254:	00440002 	.word	0x00440002
    2258:	00001c0d 	.word	0x00001c0d
    225c:	00450002 	.word	0x00450002
    2260:	00001bd9 	.word	0x00001bd9
    2264:	00470002 	.word	0x00470002

00002268 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    2268:	b580      	push	{r7, lr}
    226a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    226c:	2242      	movs	r2, #66	; 0x42
    226e:	2124      	movs	r1, #36	; 0x24
    2270:	4806      	ldr	r0, [pc, #24]	; (228c <SPI_HI3593_CLOCK_init+0x24>)
    2272:	4b07      	ldr	r3, [pc, #28]	; (2290 <SPI_HI3593_CLOCK_init+0x28>)
    2274:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2276:	224a      	movs	r2, #74	; 0x4a
    2278:	2103      	movs	r1, #3
    227a:	4804      	ldr	r0, [pc, #16]	; (228c <SPI_HI3593_CLOCK_init+0x24>)
    227c:	4b04      	ldr	r3, [pc, #16]	; (2290 <SPI_HI3593_CLOCK_init+0x28>)
    227e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    2280:	4804      	ldr	r0, [pc, #16]	; (2294 <SPI_HI3593_CLOCK_init+0x2c>)
    2282:	4b05      	ldr	r3, [pc, #20]	; (2298 <SPI_HI3593_CLOCK_init+0x30>)
    2284:	4798      	blx	r3
}
    2286:	bf00      	nop
    2288:	bd80      	pop	{r7, pc}
    228a:	bf00      	nop
    228c:	40001c00 	.word	0x40001c00
    2290:	000013b9 	.word	0x000013b9
    2294:	40000800 	.word	0x40000800
    2298:	0000167f 	.word	0x0000167f

0000229c <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    229c:	b580      	push	{r7, lr}
    229e:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    22a0:	4b04      	ldr	r3, [pc, #16]	; (22b4 <SPI_HI3593_init+0x18>)
    22a2:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    22a4:	4904      	ldr	r1, [pc, #16]	; (22b8 <SPI_HI3593_init+0x1c>)
    22a6:	4805      	ldr	r0, [pc, #20]	; (22bc <SPI_HI3593_init+0x20>)
    22a8:	4b05      	ldr	r3, [pc, #20]	; (22c0 <SPI_HI3593_init+0x24>)
    22aa:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    22ac:	4b05      	ldr	r3, [pc, #20]	; (22c4 <SPI_HI3593_init+0x28>)
    22ae:	4798      	blx	r3
}
    22b0:	bf00      	nop
    22b2:	bd80      	pop	{r7, pc}
    22b4:	00002269 	.word	0x00002269
    22b8:	43000800 	.word	0x43000800
    22bc:	2000ab08 	.word	0x2000ab08
    22c0:	00003435 	.word	0x00003435
    22c4:	000021fd 	.word	0x000021fd

000022c8 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    22c8:	b580      	push	{r7, lr}
    22ca:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    22cc:	2100      	movs	r1, #0
    22ce:	2068      	movs	r0, #104	; 0x68
    22d0:	4b07      	ldr	r3, [pc, #28]	; (22f0 <I2C_FANS_PORT_init+0x28>)
    22d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    22d4:	4907      	ldr	r1, [pc, #28]	; (22f4 <I2C_FANS_PORT_init+0x2c>)
    22d6:	2068      	movs	r0, #104	; 0x68
    22d8:	4b07      	ldr	r3, [pc, #28]	; (22f8 <I2C_FANS_PORT_init+0x30>)
    22da:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    22dc:	2100      	movs	r1, #0
    22de:	2069      	movs	r0, #105	; 0x69
    22e0:	4b03      	ldr	r3, [pc, #12]	; (22f0 <I2C_FANS_PORT_init+0x28>)
    22e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    22e4:	4905      	ldr	r1, [pc, #20]	; (22fc <I2C_FANS_PORT_init+0x34>)
    22e6:	2069      	movs	r0, #105	; 0x69
    22e8:	4b03      	ldr	r3, [pc, #12]	; (22f8 <I2C_FANS_PORT_init+0x30>)
    22ea:	4798      	blx	r3
}
    22ec:	bf00      	nop
    22ee:	bd80      	pop	{r7, pc}
    22f0:	00001bd9 	.word	0x00001bd9
    22f4:	00680002 	.word	0x00680002
    22f8:	00001c0d 	.word	0x00001c0d
    22fc:	00690002 	.word	0x00690002

00002300 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    2300:	b580      	push	{r7, lr}
    2302:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2304:	2244      	movs	r2, #68	; 0x44
    2306:	2125      	movs	r1, #37	; 0x25
    2308:	4806      	ldr	r0, [pc, #24]	; (2324 <I2C_FANS_CLOCK_init+0x24>)
    230a:	4b07      	ldr	r3, [pc, #28]	; (2328 <I2C_FANS_CLOCK_init+0x28>)
    230c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    230e:	224a      	movs	r2, #74	; 0x4a
    2310:	2103      	movs	r1, #3
    2312:	4804      	ldr	r0, [pc, #16]	; (2324 <I2C_FANS_CLOCK_init+0x24>)
    2314:	4b04      	ldr	r3, [pc, #16]	; (2328 <I2C_FANS_CLOCK_init+0x28>)
    2316:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    2318:	4804      	ldr	r0, [pc, #16]	; (232c <I2C_FANS_CLOCK_init+0x2c>)
    231a:	4b05      	ldr	r3, [pc, #20]	; (2330 <I2C_FANS_CLOCK_init+0x30>)
    231c:	4798      	blx	r3
}
    231e:	bf00      	nop
    2320:	bd80      	pop	{r7, pc}
    2322:	bf00      	nop
    2324:	40001c00 	.word	0x40001c00
    2328:	000013b9 	.word	0x000013b9
    232c:	40000800 	.word	0x40000800
    2330:	0000169f 	.word	0x0000169f

00002334 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    2334:	b580      	push	{r7, lr}
    2336:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    2338:	4b04      	ldr	r3, [pc, #16]	; (234c <I2C_FANS_init+0x18>)
    233a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    233c:	4904      	ldr	r1, [pc, #16]	; (2350 <I2C_FANS_init+0x1c>)
    233e:	4805      	ldr	r0, [pc, #20]	; (2354 <I2C_FANS_init+0x20>)
    2340:	4b05      	ldr	r3, [pc, #20]	; (2358 <I2C_FANS_init+0x24>)
    2342:	4798      	blx	r3
	I2C_FANS_PORT_init();
    2344:	4b05      	ldr	r3, [pc, #20]	; (235c <I2C_FANS_init+0x28>)
    2346:	4798      	blx	r3
}
    2348:	bf00      	nop
    234a:	bd80      	pop	{r7, pc}
    234c:	00002301 	.word	0x00002301
    2350:	43000c00 	.word	0x43000c00
    2354:	2000ab38 	.word	0x2000ab38
    2358:	00003129 	.word	0x00003129
    235c:	000022c9 	.word	0x000022c9

00002360 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    2360:	b580      	push	{r7, lr}
    2362:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    2364:	4808      	ldr	r0, [pc, #32]	; (2388 <TIMER_USB_init+0x28>)
    2366:	4b09      	ldr	r3, [pc, #36]	; (238c <TIMER_USB_init+0x2c>)
    2368:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    236a:	2243      	movs	r2, #67	; 0x43
    236c:	2109      	movs	r1, #9
    236e:	4808      	ldr	r0, [pc, #32]	; (2390 <TIMER_USB_init+0x30>)
    2370:	4b08      	ldr	r3, [pc, #32]	; (2394 <TIMER_USB_init+0x34>)
    2372:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    2374:	4b08      	ldr	r3, [pc, #32]	; (2398 <TIMER_USB_init+0x38>)
    2376:	4798      	blx	r3
    2378:	4603      	mov	r3, r0
    237a:	461a      	mov	r2, r3
    237c:	4907      	ldr	r1, [pc, #28]	; (239c <TIMER_USB_init+0x3c>)
    237e:	4808      	ldr	r0, [pc, #32]	; (23a0 <TIMER_USB_init+0x40>)
    2380:	4b08      	ldr	r3, [pc, #32]	; (23a4 <TIMER_USB_init+0x44>)
    2382:	4798      	blx	r3
}
    2384:	bf00      	nop
    2386:	bd80      	pop	{r7, pc}
    2388:	40000800 	.word	0x40000800
    238c:	000014df 	.word	0x000014df
    2390:	40001c00 	.word	0x40001c00
    2394:	000013b9 	.word	0x000013b9
    2398:	00008ec1 	.word	0x00008ec1
    239c:	40003800 	.word	0x40003800
    23a0:	2000ac80 	.word	0x2000ac80
    23a4:	00003605 	.word	0x00003605

000023a8 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    23a8:	b580      	push	{r7, lr}
    23aa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    23ac:	4808      	ldr	r0, [pc, #32]	; (23d0 <TIMER_ARINC_init+0x28>)
    23ae:	4b09      	ldr	r3, [pc, #36]	; (23d4 <TIMER_ARINC_init+0x2c>)
    23b0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    23b2:	2244      	movs	r2, #68	; 0x44
    23b4:	211a      	movs	r1, #26
    23b6:	4808      	ldr	r0, [pc, #32]	; (23d8 <TIMER_ARINC_init+0x30>)
    23b8:	4b08      	ldr	r3, [pc, #32]	; (23dc <TIMER_ARINC_init+0x34>)
    23ba:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    23bc:	4b08      	ldr	r3, [pc, #32]	; (23e0 <TIMER_ARINC_init+0x38>)
    23be:	4798      	blx	r3
    23c0:	4603      	mov	r3, r0
    23c2:	461a      	mov	r2, r3
    23c4:	4907      	ldr	r1, [pc, #28]	; (23e4 <TIMER_ARINC_init+0x3c>)
    23c6:	4808      	ldr	r0, [pc, #32]	; (23e8 <TIMER_ARINC_init+0x40>)
    23c8:	4b08      	ldr	r3, [pc, #32]	; (23ec <TIMER_ARINC_init+0x44>)
    23ca:	4798      	blx	r3
}
    23cc:	bf00      	nop
    23ce:	bd80      	pop	{r7, pc}
    23d0:	40000800 	.word	0x40000800
    23d4:	0000159f 	.word	0x0000159f
    23d8:	40001c00 	.word	0x40001c00
    23dc:	000013b9 	.word	0x000013b9
    23e0:	00008ec1 	.word	0x00008ec1
    23e4:	4101a000 	.word	0x4101a000
    23e8:	2000ac60 	.word	0x2000ac60
    23ec:	00003605 	.word	0x00003605

000023f0 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    23f0:	b580      	push	{r7, lr}
    23f2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    23f4:	4808      	ldr	r0, [pc, #32]	; (2418 <TIMER_MAINTENANCE_init+0x28>)
    23f6:	4b09      	ldr	r3, [pc, #36]	; (241c <TIMER_MAINTENANCE_init+0x2c>)
    23f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    23fa:	2246      	movs	r2, #70	; 0x46
    23fc:	211e      	movs	r1, #30
    23fe:	4808      	ldr	r0, [pc, #32]	; (2420 <TIMER_MAINTENANCE_init+0x30>)
    2400:	4b08      	ldr	r3, [pc, #32]	; (2424 <TIMER_MAINTENANCE_init+0x34>)
    2402:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    2404:	4b08      	ldr	r3, [pc, #32]	; (2428 <TIMER_MAINTENANCE_init+0x38>)
    2406:	4798      	blx	r3
    2408:	4603      	mov	r3, r0
    240a:	461a      	mov	r2, r3
    240c:	4907      	ldr	r1, [pc, #28]	; (242c <TIMER_MAINTENANCE_init+0x3c>)
    240e:	4808      	ldr	r0, [pc, #32]	; (2430 <TIMER_MAINTENANCE_init+0x40>)
    2410:	4b08      	ldr	r3, [pc, #32]	; (2434 <TIMER_MAINTENANCE_init+0x44>)
    2412:	4798      	blx	r3
}
    2414:	bf00      	nop
    2416:	bd80      	pop	{r7, pc}
    2418:	40000800 	.word	0x40000800
    241c:	000015df 	.word	0x000015df
    2420:	40001c00 	.word	0x40001c00
    2424:	000013b9 	.word	0x000013b9
    2428:	00008ec1 	.word	0x00008ec1
    242c:	42001400 	.word	0x42001400
    2430:	2000ab58 	.word	0x2000ab58
    2434:	00003605 	.word	0x00003605

00002438 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    2438:	b580      	push	{r7, lr}
    243a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    243c:	4808      	ldr	r0, [pc, #32]	; (2460 <TIMER_INTERFACE_init+0x28>)
    243e:	4b09      	ldr	r3, [pc, #36]	; (2464 <TIMER_INTERFACE_init+0x2c>)
    2440:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2442:	2246      	movs	r2, #70	; 0x46
    2444:	211e      	movs	r1, #30
    2446:	4808      	ldr	r0, [pc, #32]	; (2468 <TIMER_INTERFACE_init+0x30>)
    2448:	4b08      	ldr	r3, [pc, #32]	; (246c <TIMER_INTERFACE_init+0x34>)
    244a:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    244c:	4b08      	ldr	r3, [pc, #32]	; (2470 <TIMER_INTERFACE_init+0x38>)
    244e:	4798      	blx	r3
    2450:	4603      	mov	r3, r0
    2452:	461a      	mov	r2, r3
    2454:	4907      	ldr	r1, [pc, #28]	; (2474 <TIMER_INTERFACE_init+0x3c>)
    2456:	4808      	ldr	r0, [pc, #32]	; (2478 <TIMER_INTERFACE_init+0x40>)
    2458:	4b08      	ldr	r3, [pc, #32]	; (247c <TIMER_INTERFACE_init+0x44>)
    245a:	4798      	blx	r3
}
    245c:	bf00      	nop
    245e:	bd80      	pop	{r7, pc}
    2460:	40000800 	.word	0x40000800
    2464:	000015ff 	.word	0x000015ff
    2468:	40001c00 	.word	0x40001c00
    246c:	000013b9 	.word	0x000013b9
    2470:	00008ec1 	.word	0x00008ec1
    2474:	42001800 	.word	0x42001800
    2478:	2000ab9c 	.word	0x2000ab9c
    247c:	00003605 	.word	0x00003605

00002480 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    2480:	b580      	push	{r7, lr}
    2482:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    2484:	4808      	ldr	r0, [pc, #32]	; (24a8 <TIMER_EVENT_init+0x28>)
    2486:	4b09      	ldr	r3, [pc, #36]	; (24ac <TIMER_EVENT_init+0x2c>)
    2488:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    248a:	2246      	movs	r2, #70	; 0x46
    248c:	2127      	movs	r1, #39	; 0x27
    248e:	4808      	ldr	r0, [pc, #32]	; (24b0 <TIMER_EVENT_init+0x30>)
    2490:	4b08      	ldr	r3, [pc, #32]	; (24b4 <TIMER_EVENT_init+0x34>)
    2492:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    2494:	4b08      	ldr	r3, [pc, #32]	; (24b8 <TIMER_EVENT_init+0x38>)
    2496:	4798      	blx	r3
    2498:	4603      	mov	r3, r0
    249a:	461a      	mov	r2, r3
    249c:	4907      	ldr	r1, [pc, #28]	; (24bc <TIMER_EVENT_init+0x3c>)
    249e:	4808      	ldr	r0, [pc, #32]	; (24c0 <TIMER_EVENT_init+0x40>)
    24a0:	4b08      	ldr	r3, [pc, #32]	; (24c4 <TIMER_EVENT_init+0x44>)
    24a2:	4798      	blx	r3
}
    24a4:	bf00      	nop
    24a6:	bd80      	pop	{r7, pc}
    24a8:	40000800 	.word	0x40000800
    24ac:	000016bf 	.word	0x000016bf
    24b0:	40001c00 	.word	0x40001c00
    24b4:	000013b9 	.word	0x000013b9
    24b8:	00008ec1 	.word	0x00008ec1
    24bc:	43001400 	.word	0x43001400
    24c0:	2000ab7c 	.word	0x2000ab7c
    24c4:	00003605 	.word	0x00003605

000024c8 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    24c8:	b480      	push	{r7}
    24ca:	af00      	add	r7, sp, #0
}
    24cc:	bf00      	nop
    24ce:	46bd      	mov	sp, r7
    24d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    24d4:	4770      	bx	lr
	...

000024d8 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    24d8:	b580      	push	{r7, lr}
    24da:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    24dc:	4804      	ldr	r0, [pc, #16]	; (24f0 <LIVE_PULSE_CLOCK_init+0x18>)
    24de:	4b05      	ldr	r3, [pc, #20]	; (24f4 <LIVE_PULSE_CLOCK_init+0x1c>)
    24e0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    24e2:	2240      	movs	r2, #64	; 0x40
    24e4:	2127      	movs	r1, #39	; 0x27
    24e6:	4804      	ldr	r0, [pc, #16]	; (24f8 <LIVE_PULSE_CLOCK_init+0x20>)
    24e8:	4b04      	ldr	r3, [pc, #16]	; (24fc <LIVE_PULSE_CLOCK_init+0x24>)
    24ea:	4798      	blx	r3
}
    24ec:	bf00      	nop
    24ee:	bd80      	pop	{r7, pc}
    24f0:	40000800 	.word	0x40000800
    24f4:	000016df 	.word	0x000016df
    24f8:	40001c00 	.word	0x40001c00
    24fc:	000013b9 	.word	0x000013b9

00002500 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    2500:	b580      	push	{r7, lr}
    2502:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    2504:	4b06      	ldr	r3, [pc, #24]	; (2520 <LIVE_PULSE_init+0x20>)
    2506:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    2508:	4b06      	ldr	r3, [pc, #24]	; (2524 <LIVE_PULSE_init+0x24>)
    250a:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    250c:	4b06      	ldr	r3, [pc, #24]	; (2528 <LIVE_PULSE_init+0x28>)
    250e:	4798      	blx	r3
    2510:	4603      	mov	r3, r0
    2512:	461a      	mov	r2, r3
    2514:	4905      	ldr	r1, [pc, #20]	; (252c <LIVE_PULSE_init+0x2c>)
    2516:	4806      	ldr	r0, [pc, #24]	; (2530 <LIVE_PULSE_init+0x30>)
    2518:	4b06      	ldr	r3, [pc, #24]	; (2534 <LIVE_PULSE_init+0x34>)
    251a:	4798      	blx	r3
}
    251c:	bf00      	nop
    251e:	bd80      	pop	{r7, pc}
    2520:	000024d9 	.word	0x000024d9
    2524:	000024c9 	.word	0x000024c9
    2528:	00008ed5 	.word	0x00008ed5
    252c:	43001800 	.word	0x43001800
    2530:	2000abdc 	.word	0x2000abdc
    2534:	00003225 	.word	0x00003225

00002538 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    2538:	b580      	push	{r7, lr}
    253a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    253c:	4804      	ldr	r0, [pc, #16]	; (2550 <TIMER_HVAC_CLOCK_init+0x18>)
    253e:	4b05      	ldr	r3, [pc, #20]	; (2554 <TIMER_HVAC_CLOCK_init+0x1c>)
    2540:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2542:	2244      	movs	r2, #68	; 0x44
    2544:	2119      	movs	r1, #25
    2546:	4804      	ldr	r0, [pc, #16]	; (2558 <TIMER_HVAC_CLOCK_init+0x20>)
    2548:	4b04      	ldr	r3, [pc, #16]	; (255c <TIMER_HVAC_CLOCK_init+0x24>)
    254a:	4798      	blx	r3
}
    254c:	bf00      	nop
    254e:	bd80      	pop	{r7, pc}
    2550:	40000800 	.word	0x40000800
    2554:	0000155f 	.word	0x0000155f
    2558:	40001c00 	.word	0x40001c00
    255c:	000013b9 	.word	0x000013b9

00002560 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    2560:	b580      	push	{r7, lr}
    2562:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    2564:	4b05      	ldr	r3, [pc, #20]	; (257c <TIMER_HVAC_init+0x1c>)
    2566:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    2568:	4b05      	ldr	r3, [pc, #20]	; (2580 <TIMER_HVAC_init+0x20>)
    256a:	4798      	blx	r3
    256c:	4603      	mov	r3, r0
    256e:	461a      	mov	r2, r3
    2570:	4904      	ldr	r1, [pc, #16]	; (2584 <TIMER_HVAC_init+0x24>)
    2572:	4805      	ldr	r0, [pc, #20]	; (2588 <TIMER_HVAC_init+0x28>)
    2574:	4b05      	ldr	r3, [pc, #20]	; (258c <TIMER_HVAC_init+0x2c>)
    2576:	4798      	blx	r3
}
    2578:	bf00      	nop
    257a:	bd80      	pop	{r7, pc}
    257c:	00002539 	.word	0x00002539
    2580:	00008265 	.word	0x00008265
    2584:	41016000 	.word	0x41016000
    2588:	2000aca0 	.word	0x2000aca0
    258c:	00003605 	.word	0x00003605

00002590 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    2590:	b580      	push	{r7, lr}
    2592:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    2594:	4804      	ldr	r0, [pc, #16]	; (25a8 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    2596:	4b05      	ldr	r3, [pc, #20]	; (25ac <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    2598:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    259a:	2244      	movs	r2, #68	; 0x44
    259c:	2119      	movs	r1, #25
    259e:	4804      	ldr	r0, [pc, #16]	; (25b0 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    25a0:	4b04      	ldr	r3, [pc, #16]	; (25b4 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    25a2:	4798      	blx	r3
}
    25a4:	bf00      	nop
    25a6:	bd80      	pop	{r7, pc}
    25a8:	40000800 	.word	0x40000800
    25ac:	0000157f 	.word	0x0000157f
    25b0:	40001c00 	.word	0x40001c00
    25b4:	000013b9 	.word	0x000013b9

000025b8 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    25b8:	b580      	push	{r7, lr}
    25ba:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    25bc:	4b05      	ldr	r3, [pc, #20]	; (25d4 <TIMER_TEMPERATURES_init+0x1c>)
    25be:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    25c0:	4b05      	ldr	r3, [pc, #20]	; (25d8 <TIMER_TEMPERATURES_init+0x20>)
    25c2:	4798      	blx	r3
    25c4:	4603      	mov	r3, r0
    25c6:	461a      	mov	r2, r3
    25c8:	4904      	ldr	r1, [pc, #16]	; (25dc <TIMER_TEMPERATURES_init+0x24>)
    25ca:	4805      	ldr	r0, [pc, #20]	; (25e0 <TIMER_TEMPERATURES_init+0x28>)
    25cc:	4b05      	ldr	r3, [pc, #20]	; (25e4 <TIMER_TEMPERATURES_init+0x2c>)
    25ce:	4798      	blx	r3
}
    25d0:	bf00      	nop
    25d2:	bd80      	pop	{r7, pc}
    25d4:	00002591 	.word	0x00002591
    25d8:	00008265 	.word	0x00008265
    25dc:	41018000 	.word	0x41018000
    25e0:	2000aae8 	.word	0x2000aae8
    25e4:	00003605 	.word	0x00003605

000025e8 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    25e8:	b580      	push	{r7, lr}
    25ea:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    25ec:	4804      	ldr	r0, [pc, #16]	; (2600 <TIMER_CCU_CLOCK_init+0x18>)
    25ee:	4b05      	ldr	r3, [pc, #20]	; (2604 <TIMER_CCU_CLOCK_init+0x1c>)
    25f0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    25f2:	2240      	movs	r2, #64	; 0x40
    25f4:	211d      	movs	r1, #29
    25f6:	4804      	ldr	r0, [pc, #16]	; (2608 <TIMER_CCU_CLOCK_init+0x20>)
    25f8:	4b04      	ldr	r3, [pc, #16]	; (260c <TIMER_CCU_CLOCK_init+0x24>)
    25fa:	4798      	blx	r3
}
    25fc:	bf00      	nop
    25fe:	bd80      	pop	{r7, pc}
    2600:	40000800 	.word	0x40000800
    2604:	000015bf 	.word	0x000015bf
    2608:	40001c00 	.word	0x40001c00
    260c:	000013b9 	.word	0x000013b9

00002610 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    2610:	b580      	push	{r7, lr}
    2612:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    2614:	4b05      	ldr	r3, [pc, #20]	; (262c <TIMER_CCU_init+0x1c>)
    2616:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    2618:	4b05      	ldr	r3, [pc, #20]	; (2630 <TIMER_CCU_init+0x20>)
    261a:	4798      	blx	r3
    261c:	4603      	mov	r3, r0
    261e:	461a      	mov	r2, r3
    2620:	4904      	ldr	r1, [pc, #16]	; (2634 <TIMER_CCU_init+0x24>)
    2622:	4805      	ldr	r0, [pc, #20]	; (2638 <TIMER_CCU_init+0x28>)
    2624:	4b05      	ldr	r3, [pc, #20]	; (263c <TIMER_CCU_init+0x2c>)
    2626:	4798      	blx	r3
}
    2628:	bf00      	nop
    262a:	bd80      	pop	{r7, pc}
    262c:	000025e9 	.word	0x000025e9
    2630:	00008265 	.word	0x00008265
    2634:	42000c00 	.word	0x42000c00
    2638:	2000abf8 	.word	0x2000abf8
    263c:	00003605 	.word	0x00003605

00002640 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    2640:	b580      	push	{r7, lr}
    2642:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    2644:	2102      	movs	r1, #2
    2646:	2018      	movs	r0, #24
    2648:	4b0f      	ldr	r3, [pc, #60]	; (2688 <CDCUSB_PORT_init+0x48>)
    264a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    264c:	2100      	movs	r1, #0
    264e:	2018      	movs	r0, #24
    2650:	4b0e      	ldr	r3, [pc, #56]	; (268c <CDCUSB_PORT_init+0x4c>)
    2652:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    2654:	2100      	movs	r1, #0
    2656:	2018      	movs	r0, #24
    2658:	4b0d      	ldr	r3, [pc, #52]	; (2690 <CDCUSB_PORT_init+0x50>)
    265a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    265c:	490d      	ldr	r1, [pc, #52]	; (2694 <CDCUSB_PORT_init+0x54>)
    265e:	2018      	movs	r0, #24
    2660:	4b0d      	ldr	r3, [pc, #52]	; (2698 <CDCUSB_PORT_init+0x58>)
    2662:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2664:	2102      	movs	r1, #2
    2666:	2019      	movs	r0, #25
    2668:	4b07      	ldr	r3, [pc, #28]	; (2688 <CDCUSB_PORT_init+0x48>)
    266a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    266c:	2100      	movs	r1, #0
    266e:	2019      	movs	r0, #25
    2670:	4b06      	ldr	r3, [pc, #24]	; (268c <CDCUSB_PORT_init+0x4c>)
    2672:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2674:	2100      	movs	r1, #0
    2676:	2019      	movs	r0, #25
    2678:	4b05      	ldr	r3, [pc, #20]	; (2690 <CDCUSB_PORT_init+0x50>)
    267a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    267c:	4907      	ldr	r1, [pc, #28]	; (269c <CDCUSB_PORT_init+0x5c>)
    267e:	2019      	movs	r0, #25
    2680:	4b05      	ldr	r3, [pc, #20]	; (2698 <CDCUSB_PORT_init+0x58>)
    2682:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    2684:	bf00      	nop
    2686:	bd80      	pop	{r7, pc}
    2688:	00001c2d 	.word	0x00001c2d
    268c:	00001c65 	.word	0x00001c65
    2690:	00001bd9 	.word	0x00001bd9
    2694:	00180007 	.word	0x00180007
    2698:	00001c0d 	.word	0x00001c0d
    269c:	00190007 	.word	0x00190007

000026a0 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    26a0:	b580      	push	{r7, lr}
    26a2:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    26a4:	2242      	movs	r2, #66	; 0x42
    26a6:	210a      	movs	r1, #10
    26a8:	4805      	ldr	r0, [pc, #20]	; (26c0 <CDCUSB_CLOCK_init+0x20>)
    26aa:	4b06      	ldr	r3, [pc, #24]	; (26c4 <CDCUSB_CLOCK_init+0x24>)
    26ac:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    26ae:	4806      	ldr	r0, [pc, #24]	; (26c8 <CDCUSB_CLOCK_init+0x28>)
    26b0:	4b06      	ldr	r3, [pc, #24]	; (26cc <CDCUSB_CLOCK_init+0x2c>)
    26b2:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    26b4:	4804      	ldr	r0, [pc, #16]	; (26c8 <CDCUSB_CLOCK_init+0x28>)
    26b6:	4b06      	ldr	r3, [pc, #24]	; (26d0 <CDCUSB_CLOCK_init+0x30>)
    26b8:	4798      	blx	r3
}
    26ba:	bf00      	nop
    26bc:	bd80      	pop	{r7, pc}
    26be:	bf00      	nop
    26c0:	40001c00 	.word	0x40001c00
    26c4:	000013b9 	.word	0x000013b9
    26c8:	40000800 	.word	0x40000800
    26cc:	000013df 	.word	0x000013df
    26d0:	000014ff 	.word	0x000014ff

000026d4 <CDCUSB_init>:

void CDCUSB_init(void)
{
    26d4:	b580      	push	{r7, lr}
    26d6:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    26d8:	4b03      	ldr	r3, [pc, #12]	; (26e8 <CDCUSB_init+0x14>)
    26da:	4798      	blx	r3
	usb_d_init();
    26dc:	4b03      	ldr	r3, [pc, #12]	; (26ec <CDCUSB_init+0x18>)
    26de:	4798      	blx	r3
	CDCUSB_PORT_init();
    26e0:	4b03      	ldr	r3, [pc, #12]	; (26f0 <CDCUSB_init+0x1c>)
    26e2:	4798      	blx	r3
}
    26e4:	bf00      	nop
    26e6:	bd80      	pop	{r7, pc}
    26e8:	000026a1 	.word	0x000026a1
    26ec:	00003e61 	.word	0x00003e61
    26f0:	00002641 	.word	0x00002641

000026f4 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    26f4:	b580      	push	{r7, lr}
    26f6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    26f8:	4802      	ldr	r0, [pc, #8]	; (2704 <WATCHDOG_CLOCK_init+0x10>)
    26fa:	4b03      	ldr	r3, [pc, #12]	; (2708 <WATCHDOG_CLOCK_init+0x14>)
    26fc:	4798      	blx	r3
}
    26fe:	bf00      	nop
    2700:	bd80      	pop	{r7, pc}
    2702:	bf00      	nop
    2704:	40000800 	.word	0x40000800
    2708:	0000145f 	.word	0x0000145f

0000270c <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    270c:	b580      	push	{r7, lr}
    270e:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    2710:	4b03      	ldr	r3, [pc, #12]	; (2720 <WATCHDOG_init+0x14>)
    2712:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2714:	4903      	ldr	r1, [pc, #12]	; (2724 <WATCHDOG_init+0x18>)
    2716:	4804      	ldr	r0, [pc, #16]	; (2728 <WATCHDOG_init+0x1c>)
    2718:	4b04      	ldr	r3, [pc, #16]	; (272c <WATCHDOG_init+0x20>)
    271a:	4798      	blx	r3
}
    271c:	bf00      	nop
    271e:	bd80      	pop	{r7, pc}
    2720:	000026f5 	.word	0x000026f5
    2724:	40002000 	.word	0x40002000
    2728:	2000ace0 	.word	0x2000ace0
    272c:	00001cad 	.word	0x00001cad

00002730 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    2730:	b580      	push	{r7, lr}
    2732:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    2734:	4904      	ldr	r1, [pc, #16]	; (2748 <CAN_CCU_PORT_init+0x18>)
    2736:	202d      	movs	r0, #45	; 0x2d
    2738:	4b04      	ldr	r3, [pc, #16]	; (274c <CAN_CCU_PORT_init+0x1c>)
    273a:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    273c:	4904      	ldr	r1, [pc, #16]	; (2750 <CAN_CCU_PORT_init+0x20>)
    273e:	202c      	movs	r0, #44	; 0x2c
    2740:	4b02      	ldr	r3, [pc, #8]	; (274c <CAN_CCU_PORT_init+0x1c>)
    2742:	4798      	blx	r3
}
    2744:	bf00      	nop
    2746:	bd80      	pop	{r7, pc}
    2748:	002d0007 	.word	0x002d0007
    274c:	00001c0d 	.word	0x00001c0d
    2750:	002c0007 	.word	0x002c0007

00002754 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    2754:	b580      	push	{r7, lr}
    2756:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    2758:	4807      	ldr	r0, [pc, #28]	; (2778 <CAN_CCU_init+0x24>)
    275a:	4b08      	ldr	r3, [pc, #32]	; (277c <CAN_CCU_init+0x28>)
    275c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    275e:	2249      	movs	r2, #73	; 0x49
    2760:	211c      	movs	r1, #28
    2762:	4807      	ldr	r0, [pc, #28]	; (2780 <CAN_CCU_init+0x2c>)
    2764:	4b07      	ldr	r3, [pc, #28]	; (2784 <CAN_CCU_init+0x30>)
    2766:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    2768:	4907      	ldr	r1, [pc, #28]	; (2788 <CAN_CCU_init+0x34>)
    276a:	4808      	ldr	r0, [pc, #32]	; (278c <CAN_CCU_init+0x38>)
    276c:	4b08      	ldr	r3, [pc, #32]	; (2790 <CAN_CCU_init+0x3c>)
    276e:	4798      	blx	r3
	CAN_CCU_PORT_init();
    2770:	4b08      	ldr	r3, [pc, #32]	; (2794 <CAN_CCU_init+0x40>)
    2772:	4798      	blx	r3
}
    2774:	bf00      	nop
    2776:	bd80      	pop	{r7, pc}
    2778:	40000800 	.word	0x40000800
    277c:	0000141f 	.word	0x0000141f
    2780:	40001c00 	.word	0x40001c00
    2784:	000013b9 	.word	0x000013b9
    2788:	42000400 	.word	0x42000400
    278c:	2000ac38 	.word	0x2000ac38
    2790:	00002cad 	.word	0x00002cad
    2794:	00002731 	.word	0x00002731

00002798 <system_init>:

void system_init(void)
{
    2798:	b580      	push	{r7, lr}
    279a:	af00      	add	r7, sp, #0
	init_mcu();
    279c:	4b5f      	ldr	r3, [pc, #380]	; (291c <system_init+0x184>)
    279e:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    27a0:	2100      	movs	r1, #0
    27a2:	2007      	movs	r0, #7
    27a4:	4b5e      	ldr	r3, [pc, #376]	; (2920 <system_init+0x188>)
    27a6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    27a8:	2102      	movs	r1, #2
    27aa:	2007      	movs	r0, #7
    27ac:	4b5d      	ldr	r3, [pc, #372]	; (2924 <system_init+0x18c>)
    27ae:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    27b0:	f04f 31ff 	mov.w	r1, #4294967295
    27b4:	2007      	movs	r0, #7
    27b6:	4b5c      	ldr	r3, [pc, #368]	; (2928 <system_init+0x190>)
    27b8:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    27ba:	2101      	movs	r1, #1
    27bc:	200f      	movs	r0, #15
    27be:	4b58      	ldr	r3, [pc, #352]	; (2920 <system_init+0x188>)
    27c0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    27c2:	2102      	movs	r1, #2
    27c4:	200f      	movs	r0, #15
    27c6:	4b57      	ldr	r3, [pc, #348]	; (2924 <system_init+0x18c>)
    27c8:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    27ca:	f04f 31ff 	mov.w	r1, #4294967295
    27ce:	200f      	movs	r0, #15
    27d0:	4b55      	ldr	r3, [pc, #340]	; (2928 <system_init+0x190>)
    27d2:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    27d4:	2101      	movs	r1, #1
    27d6:	2013      	movs	r0, #19
    27d8:	4b51      	ldr	r3, [pc, #324]	; (2920 <system_init+0x188>)
    27da:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    27dc:	2102      	movs	r1, #2
    27de:	2013      	movs	r0, #19
    27e0:	4b50      	ldr	r3, [pc, #320]	; (2924 <system_init+0x18c>)
    27e2:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    27e4:	f04f 31ff 	mov.w	r1, #4294967295
    27e8:	2013      	movs	r0, #19
    27ea:	4b4f      	ldr	r3, [pc, #316]	; (2928 <system_init+0x190>)
    27ec:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    27ee:	2101      	movs	r1, #1
    27f0:	201b      	movs	r0, #27
    27f2:	4b4b      	ldr	r3, [pc, #300]	; (2920 <system_init+0x188>)
    27f4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    27f6:	2102      	movs	r1, #2
    27f8:	201b      	movs	r0, #27
    27fa:	4b4a      	ldr	r3, [pc, #296]	; (2924 <system_init+0x18c>)
    27fc:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    27fe:	f04f 31ff 	mov.w	r1, #4294967295
    2802:	201b      	movs	r0, #27
    2804:	4b48      	ldr	r3, [pc, #288]	; (2928 <system_init+0x190>)
    2806:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2808:	2101      	movs	r1, #1
    280a:	2027      	movs	r0, #39	; 0x27
    280c:	4b44      	ldr	r3, [pc, #272]	; (2920 <system_init+0x188>)
    280e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2810:	2102      	movs	r1, #2
    2812:	2027      	movs	r0, #39	; 0x27
    2814:	4b43      	ldr	r3, [pc, #268]	; (2924 <system_init+0x18c>)
    2816:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2818:	f04f 31ff 	mov.w	r1, #4294967295
    281c:	2027      	movs	r0, #39	; 0x27
    281e:	4b42      	ldr	r3, [pc, #264]	; (2928 <system_init+0x190>)
    2820:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    2822:	2101      	movs	r1, #1
    2824:	203d      	movs	r0, #61	; 0x3d
    2826:	4b3e      	ldr	r3, [pc, #248]	; (2920 <system_init+0x188>)
    2828:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    282a:	2102      	movs	r1, #2
    282c:	203d      	movs	r0, #61	; 0x3d
    282e:	4b3d      	ldr	r3, [pc, #244]	; (2924 <system_init+0x18c>)
    2830:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    2832:	f04f 31ff 	mov.w	r1, #4294967295
    2836:	203d      	movs	r0, #61	; 0x3d
    2838:	4b3b      	ldr	r3, [pc, #236]	; (2928 <system_init+0x190>)
    283a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    283c:	2101      	movs	r1, #1
    283e:	203f      	movs	r0, #63	; 0x3f
    2840:	4b38      	ldr	r3, [pc, #224]	; (2924 <system_init+0x18c>)
    2842:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    2844:	2101      	movs	r1, #1
    2846:	203f      	movs	r0, #63	; 0x3f
    2848:	4b38      	ldr	r3, [pc, #224]	; (292c <system_init+0x194>)
    284a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    284c:	f04f 31ff 	mov.w	r1, #4294967295
    2850:	203f      	movs	r0, #63	; 0x3f
    2852:	4b35      	ldr	r3, [pc, #212]	; (2928 <system_init+0x190>)
    2854:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    2856:	2100      	movs	r1, #0
    2858:	204d      	movs	r0, #77	; 0x4d
    285a:	4b31      	ldr	r3, [pc, #196]	; (2920 <system_init+0x188>)
    285c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    285e:	2102      	movs	r1, #2
    2860:	204d      	movs	r0, #77	; 0x4d
    2862:	4b30      	ldr	r3, [pc, #192]	; (2924 <system_init+0x18c>)
    2864:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    2866:	f04f 31ff 	mov.w	r1, #4294967295
    286a:	204d      	movs	r0, #77	; 0x4d
    286c:	4b2e      	ldr	r3, [pc, #184]	; (2928 <system_init+0x190>)
    286e:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    2870:	2101      	movs	r1, #1
    2872:	204e      	movs	r0, #78	; 0x4e
    2874:	4b2a      	ldr	r3, [pc, #168]	; (2920 <system_init+0x188>)
    2876:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    2878:	2102      	movs	r1, #2
    287a:	204e      	movs	r0, #78	; 0x4e
    287c:	4b29      	ldr	r3, [pc, #164]	; (2924 <system_init+0x18c>)
    287e:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    2880:	f04f 31ff 	mov.w	r1, #4294967295
    2884:	204e      	movs	r0, #78	; 0x4e
    2886:	4b28      	ldr	r3, [pc, #160]	; (2928 <system_init+0x190>)
    2888:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    288a:	2100      	movs	r1, #0
    288c:	204f      	movs	r0, #79	; 0x4f
    288e:	4b24      	ldr	r3, [pc, #144]	; (2920 <system_init+0x188>)
    2890:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    2892:	2102      	movs	r1, #2
    2894:	204f      	movs	r0, #79	; 0x4f
    2896:	4b23      	ldr	r3, [pc, #140]	; (2924 <system_init+0x18c>)
    2898:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    289a:	f04f 31ff 	mov.w	r1, #4294967295
    289e:	204f      	movs	r0, #79	; 0x4f
    28a0:	4b21      	ldr	r3, [pc, #132]	; (2928 <system_init+0x190>)
    28a2:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    28a4:	2100      	movs	r1, #0
    28a6:	2052      	movs	r0, #82	; 0x52
    28a8:	4b1d      	ldr	r3, [pc, #116]	; (2920 <system_init+0x188>)
    28aa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    28ac:	2102      	movs	r1, #2
    28ae:	2052      	movs	r0, #82	; 0x52
    28b0:	4b1c      	ldr	r3, [pc, #112]	; (2924 <system_init+0x18c>)
    28b2:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    28b4:	f04f 31ff 	mov.w	r1, #4294967295
    28b8:	2052      	movs	r0, #82	; 0x52
    28ba:	4b1b      	ldr	r3, [pc, #108]	; (2928 <system_init+0x190>)
    28bc:	4798      	blx	r3

	CRC_CALC_init();
    28be:	4b1c      	ldr	r3, [pc, #112]	; (2930 <system_init+0x198>)
    28c0:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    28c2:	4b1c      	ldr	r3, [pc, #112]	; (2934 <system_init+0x19c>)
    28c4:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    28c6:	4b1c      	ldr	r3, [pc, #112]	; (2938 <system_init+0x1a0>)
    28c8:	4798      	blx	r3

	QSPI_N25Q256_init();
    28ca:	4b1c      	ldr	r3, [pc, #112]	; (293c <system_init+0x1a4>)
    28cc:	4798      	blx	r3

	DATETIME_CLOCK_init();
    28ce:	4b1c      	ldr	r3, [pc, #112]	; (2940 <system_init+0x1a8>)
    28d0:	4798      	blx	r3

	I2C_HEATERS_init();
    28d2:	4b1c      	ldr	r3, [pc, #112]	; (2944 <system_init+0x1ac>)
    28d4:	4798      	blx	r3

	SPI_TEMP_init();
    28d6:	4b1c      	ldr	r3, [pc, #112]	; (2948 <system_init+0x1b0>)
    28d8:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    28da:	4b1c      	ldr	r3, [pc, #112]	; (294c <system_init+0x1b4>)
    28dc:	4798      	blx	r3

	SPI_HI3593_init();
    28de:	4b1c      	ldr	r3, [pc, #112]	; (2950 <system_init+0x1b8>)
    28e0:	4798      	blx	r3

	I2C_FANS_init();
    28e2:	4b1c      	ldr	r3, [pc, #112]	; (2954 <system_init+0x1bc>)
    28e4:	4798      	blx	r3

	TIMER_USB_init();
    28e6:	4b1c      	ldr	r3, [pc, #112]	; (2958 <system_init+0x1c0>)
    28e8:	4798      	blx	r3
	TIMER_ARINC_init();
    28ea:	4b1c      	ldr	r3, [pc, #112]	; (295c <system_init+0x1c4>)
    28ec:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    28ee:	4b1c      	ldr	r3, [pc, #112]	; (2960 <system_init+0x1c8>)
    28f0:	4798      	blx	r3
	TIMER_INTERFACE_init();
    28f2:	4b1c      	ldr	r3, [pc, #112]	; (2964 <system_init+0x1cc>)
    28f4:	4798      	blx	r3
	TIMER_EVENT_init();
    28f6:	4b1c      	ldr	r3, [pc, #112]	; (2968 <system_init+0x1d0>)
    28f8:	4798      	blx	r3
	LIVE_PULSE_init();
    28fa:	4b1c      	ldr	r3, [pc, #112]	; (296c <system_init+0x1d4>)
    28fc:	4798      	blx	r3

	TIMER_HVAC_init();
    28fe:	4b1c      	ldr	r3, [pc, #112]	; (2970 <system_init+0x1d8>)
    2900:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    2902:	4b1c      	ldr	r3, [pc, #112]	; (2974 <system_init+0x1dc>)
    2904:	4798      	blx	r3

	TIMER_CCU_init();
    2906:	4b1c      	ldr	r3, [pc, #112]	; (2978 <system_init+0x1e0>)
    2908:	4798      	blx	r3

	CDCUSB_init();
    290a:	4b1c      	ldr	r3, [pc, #112]	; (297c <system_init+0x1e4>)
    290c:	4798      	blx	r3

	WATCHDOG_init();
    290e:	4b1c      	ldr	r3, [pc, #112]	; (2980 <system_init+0x1e8>)
    2910:	4798      	blx	r3
	CAN_CCU_init();
    2912:	4b1c      	ldr	r3, [pc, #112]	; (2984 <system_init+0x1ec>)
    2914:	4798      	blx	r3
}
    2916:	bf00      	nop
    2918:	bd80      	pop	{r7, pc}
    291a:	bf00      	nop
    291c:	00001c9d 	.word	0x00001c9d
    2920:	00001c65 	.word	0x00001c65
    2924:	00001c2d 	.word	0x00001c2d
    2928:	00001c0d 	.word	0x00001c0d
    292c:	00001bd9 	.word	0x00001bd9
    2930:	00001cfd 	.word	0x00001cfd
    2934:	00001d29 	.word	0x00001d29
    2938:	00001e51 	.word	0x00001e51
    293c:	00001f99 	.word	0x00001f99
    2940:	00001fdd 	.word	0x00001fdd
    2944:	0000206d 	.word	0x0000206d
    2948:	00002139 	.word	0x00002139
    294c:	000021d1 	.word	0x000021d1
    2950:	0000229d 	.word	0x0000229d
    2954:	00002335 	.word	0x00002335
    2958:	00002361 	.word	0x00002361
    295c:	000023a9 	.word	0x000023a9
    2960:	000023f1 	.word	0x000023f1
    2964:	00002439 	.word	0x00002439
    2968:	00002481 	.word	0x00002481
    296c:	00002501 	.word	0x00002501
    2970:	00002561 	.word	0x00002561
    2974:	000025b9 	.word	0x000025b9
    2978:	00002611 	.word	0x00002611
    297c:	000026d5 	.word	0x000026d5
    2980:	0000270d 	.word	0x0000270d
    2984:	00002755 	.word	0x00002755

00002988 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    2988:	b480      	push	{r7}
    298a:	b085      	sub	sp, #20
    298c:	af00      	add	r7, sp, #0
    298e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2990:	f3ef 8310 	mrs	r3, PRIMASK
    2994:	60fb      	str	r3, [r7, #12]
  return(result);
    2996:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    2998:	687b      	ldr	r3, [r7, #4]
    299a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    299c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    299e:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    29a2:	bf00      	nop
    29a4:	3714      	adds	r7, #20
    29a6:	46bd      	mov	sp, r7
    29a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ac:	4770      	bx	lr

000029ae <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    29ae:	b480      	push	{r7}
    29b0:	b085      	sub	sp, #20
    29b2:	af00      	add	r7, sp, #0
    29b4:	6078      	str	r0, [r7, #4]
    29b6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    29ba:	687b      	ldr	r3, [r7, #4]
    29bc:	681b      	ldr	r3, [r3, #0]
    29be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    29c0:	68fb      	ldr	r3, [r7, #12]
    29c2:	f383 8810 	msr	PRIMASK, r3
}
    29c6:	bf00      	nop
    29c8:	3714      	adds	r7, #20
    29ca:	46bd      	mov	sp, r7
    29cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    29d0:	4770      	bx	lr

000029d2 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    29d2:	b480      	push	{r7}
    29d4:	b083      	sub	sp, #12
    29d6:	af00      	add	r7, sp, #0
    29d8:	4603      	mov	r3, r0
    29da:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    29dc:	88fb      	ldrh	r3, [r7, #6]
    29de:	f003 0303 	and.w	r3, r3, #3
    29e2:	2b00      	cmp	r3, #0
    29e4:	d001      	beq.n	29ea <leap_year+0x18>
		return false;
    29e6:	2300      	movs	r3, #0
    29e8:	e000      	b.n	29ec <leap_year+0x1a>
	} else {
		return true;
    29ea:	2301      	movs	r3, #1
	}
}
    29ec:	4618      	mov	r0, r3
    29ee:	370c      	adds	r7, #12
    29f0:	46bd      	mov	sp, r7
    29f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    29f6:	4770      	bx	lr

000029f8 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    29f8:	b580      	push	{r7, lr}
    29fa:	b084      	sub	sp, #16
    29fc:	af00      	add	r7, sp, #0
    29fe:	6078      	str	r0, [r7, #4]
    2a00:	460b      	mov	r3, r1
    2a02:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    2a04:	2300      	movs	r3, #0
    2a06:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	b29b      	uxth	r3, r3
    2a0c:	4618      	mov	r0, r3
    2a0e:	4b2f      	ldr	r3, [pc, #188]	; (2acc <get_secs_in_month+0xd4>)
    2a10:	4798      	blx	r3
    2a12:	4603      	mov	r3, r0
    2a14:	2b00      	cmp	r3, #0
    2a16:	d028      	beq.n	2a6a <get_secs_in_month+0x72>
		switch (month) {
    2a18:	78fb      	ldrb	r3, [r7, #3]
    2a1a:	3b01      	subs	r3, #1
    2a1c:	2b0b      	cmp	r3, #11
    2a1e:	d84c      	bhi.n	2aba <get_secs_in_month+0xc2>
    2a20:	a201      	add	r2, pc, #4	; (adr r2, 2a28 <get_secs_in_month+0x30>)
    2a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2a26:	bf00      	nop
    2a28:	00002a59 	.word	0x00002a59
    2a2c:	00002a5f 	.word	0x00002a5f
    2a30:	00002a59 	.word	0x00002a59
    2a34:	00002a65 	.word	0x00002a65
    2a38:	00002a59 	.word	0x00002a59
    2a3c:	00002a65 	.word	0x00002a65
    2a40:	00002a59 	.word	0x00002a59
    2a44:	00002a59 	.word	0x00002a59
    2a48:	00002a65 	.word	0x00002a65
    2a4c:	00002a59 	.word	0x00002a59
    2a50:	00002a65 	.word	0x00002a65
    2a54:	00002a59 	.word	0x00002a59
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2a58:	4b1d      	ldr	r3, [pc, #116]	; (2ad0 <get_secs_in_month+0xd8>)
    2a5a:	60fb      	str	r3, [r7, #12]
			break;
    2a5c:	e030      	b.n	2ac0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    2a5e:	4b1d      	ldr	r3, [pc, #116]	; (2ad4 <get_secs_in_month+0xdc>)
    2a60:	60fb      	str	r3, [r7, #12]
			break;
    2a62:	e02d      	b.n	2ac0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2a64:	4b1c      	ldr	r3, [pc, #112]	; (2ad8 <get_secs_in_month+0xe0>)
    2a66:	60fb      	str	r3, [r7, #12]
			break;
    2a68:	e02a      	b.n	2ac0 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    2a6a:	78fb      	ldrb	r3, [r7, #3]
    2a6c:	3b01      	subs	r3, #1
    2a6e:	2b0b      	cmp	r3, #11
    2a70:	d825      	bhi.n	2abe <get_secs_in_month+0xc6>
    2a72:	a201      	add	r2, pc, #4	; (adr r2, 2a78 <get_secs_in_month+0x80>)
    2a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2a78:	00002aa9 	.word	0x00002aa9
    2a7c:	00002aaf 	.word	0x00002aaf
    2a80:	00002aa9 	.word	0x00002aa9
    2a84:	00002ab5 	.word	0x00002ab5
    2a88:	00002aa9 	.word	0x00002aa9
    2a8c:	00002ab5 	.word	0x00002ab5
    2a90:	00002aa9 	.word	0x00002aa9
    2a94:	00002aa9 	.word	0x00002aa9
    2a98:	00002ab5 	.word	0x00002ab5
    2a9c:	00002aa9 	.word	0x00002aa9
    2aa0:	00002ab5 	.word	0x00002ab5
    2aa4:	00002aa9 	.word	0x00002aa9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2aa8:	4b09      	ldr	r3, [pc, #36]	; (2ad0 <get_secs_in_month+0xd8>)
    2aaa:	60fb      	str	r3, [r7, #12]
			break;
    2aac:	e008      	b.n	2ac0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    2aae:	4b0b      	ldr	r3, [pc, #44]	; (2adc <get_secs_in_month+0xe4>)
    2ab0:	60fb      	str	r3, [r7, #12]
			break;
    2ab2:	e005      	b.n	2ac0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2ab4:	4b08      	ldr	r3, [pc, #32]	; (2ad8 <get_secs_in_month+0xe0>)
    2ab6:	60fb      	str	r3, [r7, #12]
			break;
    2ab8:	e002      	b.n	2ac0 <get_secs_in_month+0xc8>
			break;
    2aba:	bf00      	nop
    2abc:	e000      	b.n	2ac0 <get_secs_in_month+0xc8>
		default:
			break;
    2abe:	bf00      	nop
		}
	}

	return sec_in_month;
    2ac0:	68fb      	ldr	r3, [r7, #12]
}
    2ac2:	4618      	mov	r0, r3
    2ac4:	3710      	adds	r7, #16
    2ac6:	46bd      	mov	sp, r7
    2ac8:	bd80      	pop	{r7, pc}
    2aca:	bf00      	nop
    2acc:	000029d3 	.word	0x000029d3
    2ad0:	0028de80 	.word	0x0028de80
    2ad4:	00263b80 	.word	0x00263b80
    2ad8:	00278d00 	.word	0x00278d00
    2adc:	0024ea00 	.word	0x0024ea00

00002ae0 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	b08a      	sub	sp, #40	; 0x28
    2ae4:	af00      	add	r7, sp, #0
    2ae6:	60f8      	str	r0, [r7, #12]
    2ae8:	60b9      	str	r1, [r7, #8]
    2aea:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    2aec:	68fb      	ldr	r3, [r7, #12]
    2aee:	699b      	ldr	r3, [r3, #24]
    2af0:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    2af2:	2301      	movs	r3, #1
    2af4:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    2af6:	2301      	movs	r3, #1
    2af8:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    2afa:	2300      	movs	r3, #0
    2afc:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    2afe:	2300      	movs	r3, #0
    2b00:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    2b02:	68bb      	ldr	r3, [r7, #8]
    2b04:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2b06:	6a3b      	ldr	r3, [r7, #32]
    2b08:	b29b      	uxth	r3, r3
    2b0a:	4618      	mov	r0, r3
    2b0c:	4b32      	ldr	r3, [pc, #200]	; (2bd8 <convert_timestamp_to_datetime+0xf8>)
    2b0e:	4798      	blx	r3
    2b10:	4603      	mov	r3, r0
    2b12:	2b00      	cmp	r3, #0
    2b14:	d001      	beq.n	2b1a <convert_timestamp_to_datetime+0x3a>
    2b16:	4b31      	ldr	r3, [pc, #196]	; (2bdc <convert_timestamp_to_datetime+0xfc>)
    2b18:	e000      	b.n	2b1c <convert_timestamp_to_datetime+0x3c>
    2b1a:	4b31      	ldr	r3, [pc, #196]	; (2be0 <convert_timestamp_to_datetime+0x100>)
    2b1c:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    2b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2b20:	69bb      	ldr	r3, [r7, #24]
    2b22:	429a      	cmp	r2, r3
    2b24:	d307      	bcc.n	2b36 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    2b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2b28:	69bb      	ldr	r3, [r7, #24]
    2b2a:	1ad3      	subs	r3, r2, r3
    2b2c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    2b2e:	6a3b      	ldr	r3, [r7, #32]
    2b30:	3301      	adds	r3, #1
    2b32:	623b      	str	r3, [r7, #32]
    2b34:	e7e7      	b.n	2b06 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2b36:	7ffb      	ldrb	r3, [r7, #31]
    2b38:	4619      	mov	r1, r3
    2b3a:	6a38      	ldr	r0, [r7, #32]
    2b3c:	4b29      	ldr	r3, [pc, #164]	; (2be4 <convert_timestamp_to_datetime+0x104>)
    2b3e:	4798      	blx	r3
    2b40:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    2b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2b44:	697b      	ldr	r3, [r7, #20]
    2b46:	429a      	cmp	r2, r3
    2b48:	d307      	bcc.n	2b5a <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    2b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2b4c:	697b      	ldr	r3, [r7, #20]
    2b4e:	1ad3      	subs	r3, r2, r3
    2b50:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    2b52:	7ffb      	ldrb	r3, [r7, #31]
    2b54:	3301      	adds	r3, #1
    2b56:	77fb      	strb	r3, [r7, #31]
    2b58:	e7ed      	b.n	2b36 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    2b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b5c:	4a22      	ldr	r2, [pc, #136]	; (2be8 <convert_timestamp_to_datetime+0x108>)
    2b5e:	4293      	cmp	r3, r2
    2b60:	d909      	bls.n	2b76 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    2b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b64:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    2b68:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    2b6c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    2b6e:	7fbb      	ldrb	r3, [r7, #30]
    2b70:	3301      	adds	r3, #1
    2b72:	77bb      	strb	r3, [r7, #30]
    2b74:	e7f1      	b.n	2b5a <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    2b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b78:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    2b7c:	d307      	bcc.n	2b8e <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    2b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b80:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    2b84:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    2b86:	7f7b      	ldrb	r3, [r7, #29]
    2b88:	3301      	adds	r3, #1
    2b8a:	777b      	strb	r3, [r7, #29]
    2b8c:	e7f3      	b.n	2b76 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    2b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b90:	2b3b      	cmp	r3, #59	; 0x3b
    2b92:	d906      	bls.n	2ba2 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    2b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b96:	3b3c      	subs	r3, #60	; 0x3c
    2b98:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    2b9a:	7f3b      	ldrb	r3, [r7, #28]
    2b9c:	3301      	adds	r3, #1
    2b9e:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    2ba0:	e7f5      	b.n	2b8e <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    2ba2:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    2ba4:	6a3b      	ldr	r3, [r7, #32]
    2ba6:	b29a      	uxth	r2, r3
    2ba8:	687b      	ldr	r3, [r7, #4]
    2baa:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	7ffa      	ldrb	r2, [r7, #31]
    2bb0:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    2bb2:	687b      	ldr	r3, [r7, #4]
    2bb4:	7fba      	ldrb	r2, [r7, #30]
    2bb6:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	7f7a      	ldrb	r2, [r7, #29]
    2bbc:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	7f3a      	ldrb	r2, [r7, #28]
    2bc2:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    2bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bc6:	b2da      	uxtb	r2, r3
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    2bcc:	2300      	movs	r3, #0
}
    2bce:	4618      	mov	r0, r3
    2bd0:	3728      	adds	r7, #40	; 0x28
    2bd2:	46bd      	mov	sp, r7
    2bd4:	bd80      	pop	{r7, pc}
    2bd6:	bf00      	nop
    2bd8:	000029d3 	.word	0x000029d3
    2bdc:	01e28500 	.word	0x01e28500
    2be0:	01e13380 	.word	0x01e13380
    2be4:	000029f9 	.word	0x000029f9
    2be8:	0001517f 	.word	0x0001517f

00002bec <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    2bec:	b580      	push	{r7, lr}
    2bee:	b084      	sub	sp, #16
    2bf0:	af00      	add	r7, sp, #0
    2bf2:	6078      	str	r0, [r7, #4]
    2bf4:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    2bf6:	2300      	movs	r3, #0
    2bf8:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    2bfa:	687b      	ldr	r3, [r7, #4]
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	bf14      	ite	ne
    2c00:	2301      	movne	r3, #1
    2c02:	2300      	moveq	r3, #0
    2c04:	b2db      	uxtb	r3, r3
    2c06:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    2c0a:	4911      	ldr	r1, [pc, #68]	; (2c50 <calendar_init+0x64>)
    2c0c:	4618      	mov	r0, r3
    2c0e:	4b11      	ldr	r3, [pc, #68]	; (2c54 <calendar_init+0x68>)
    2c10:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    2c12:	687b      	ldr	r3, [r7, #4]
    2c14:	681a      	ldr	r2, [r3, #0]
    2c16:	683b      	ldr	r3, [r7, #0]
    2c18:	429a      	cmp	r2, r3
    2c1a:	d101      	bne.n	2c20 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    2c1c:	2300      	movs	r3, #0
    2c1e:	e013      	b.n	2c48 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	681b      	ldr	r3, [r3, #0]
    2c24:	2b00      	cmp	r3, #0
    2c26:	d002      	beq.n	2c2e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2c28:	f06f 0311 	mvn.w	r3, #17
    2c2c:	e00c      	b.n	2c48 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    2c2e:	687b      	ldr	r3, [r7, #4]
    2c30:	683a      	ldr	r2, [r7, #0]
    2c32:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2c34:	687b      	ldr	r3, [r7, #4]
    2c36:	4618      	mov	r0, r3
    2c38:	4b07      	ldr	r3, [pc, #28]	; (2c58 <calendar_init+0x6c>)
    2c3a:	4798      	blx	r3
    2c3c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2c44:	619a      	str	r2, [r3, #24]

	return ret;
    2c46:	68fb      	ldr	r3, [r7, #12]
}
    2c48:	4618      	mov	r0, r3
    2c4a:	3710      	adds	r7, #16
    2c4c:	46bd      	mov	sp, r7
    2c4e:	bd80      	pop	{r7, pc}
    2c50:	00010d74 	.word	0x00010d74
    2c54:	00004409 	.word	0x00004409
    2c58:	000067e9 	.word	0x000067e9

00002c5c <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    2c5c:	b580      	push	{r7, lr}
    2c5e:	b084      	sub	sp, #16
    2c60:	af00      	add	r7, sp, #0
    2c62:	6078      	str	r0, [r7, #4]
    2c64:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	2b00      	cmp	r3, #0
    2c6a:	bf14      	ite	ne
    2c6c:	2301      	movne	r3, #1
    2c6e:	2300      	moveq	r3, #0
    2c70:	b2db      	uxtb	r3, r3
    2c72:	f240 223b 	movw	r2, #571	; 0x23b
    2c76:	4909      	ldr	r1, [pc, #36]	; (2c9c <calendar_get_date_time+0x40>)
    2c78:	4618      	mov	r0, r3
    2c7a:	4b09      	ldr	r3, [pc, #36]	; (2ca0 <calendar_get_date_time+0x44>)
    2c7c:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	4618      	mov	r0, r3
    2c82:	4b08      	ldr	r3, [pc, #32]	; (2ca4 <calendar_get_date_time+0x48>)
    2c84:	4798      	blx	r3
    2c86:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    2c88:	683a      	ldr	r2, [r7, #0]
    2c8a:	68f9      	ldr	r1, [r7, #12]
    2c8c:	6878      	ldr	r0, [r7, #4]
    2c8e:	4b06      	ldr	r3, [pc, #24]	; (2ca8 <calendar_get_date_time+0x4c>)
    2c90:	4798      	blx	r3

	return ERR_NONE;
    2c92:	2300      	movs	r3, #0
}
    2c94:	4618      	mov	r0, r3
    2c96:	3710      	adds	r7, #16
    2c98:	46bd      	mov	sp, r7
    2c9a:	bd80      	pop	{r7, pc}
    2c9c:	00010d74 	.word	0x00010d74
    2ca0:	00004409 	.word	0x00004409
    2ca4:	000068a1 	.word	0x000068a1
    2ca8:	00002ae1 	.word	0x00002ae1

00002cac <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    2cac:	b580      	push	{r7, lr}
    2cae:	b084      	sub	sp, #16
    2cb0:	af00      	add	r7, sp, #0
    2cb2:	6078      	str	r0, [r7, #4]
    2cb4:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d004      	beq.n	2cc6 <can_async_init+0x1a>
    2cbc:	683b      	ldr	r3, [r7, #0]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d001      	beq.n	2cc6 <can_async_init+0x1a>
    2cc2:	2301      	movs	r3, #1
    2cc4:	e000      	b.n	2cc8 <can_async_init+0x1c>
    2cc6:	2300      	movs	r3, #0
    2cc8:	f003 0301 	and.w	r3, r3, #1
    2ccc:	b2db      	uxtb	r3, r3
    2cce:	2241      	movs	r2, #65	; 0x41
    2cd0:	490e      	ldr	r1, [pc, #56]	; (2d0c <can_async_init+0x60>)
    2cd2:	4618      	mov	r0, r3
    2cd4:	4b0e      	ldr	r3, [pc, #56]	; (2d10 <can_async_init+0x64>)
    2cd6:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	6839      	ldr	r1, [r7, #0]
    2cdc:	4618      	mov	r0, r3
    2cde:	4b0d      	ldr	r3, [pc, #52]	; (2d14 <can_async_init+0x68>)
    2ce0:	4798      	blx	r3
    2ce2:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2ce4:	68fb      	ldr	r3, [r7, #12]
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	d001      	beq.n	2cee <can_async_init+0x42>
		return rc;
    2cea:	68fb      	ldr	r3, [r7, #12]
    2cec:	e009      	b.n	2d02 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    2cee:	687b      	ldr	r3, [r7, #4]
    2cf0:	4a09      	ldr	r2, [pc, #36]	; (2d18 <can_async_init+0x6c>)
    2cf2:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2cf4:	687b      	ldr	r3, [r7, #4]
    2cf6:	4a09      	ldr	r2, [pc, #36]	; (2d1c <can_async_init+0x70>)
    2cf8:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	4a08      	ldr	r2, [pc, #32]	; (2d20 <can_async_init+0x74>)
    2cfe:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2d00:	2300      	movs	r3, #0
}
    2d02:	4618      	mov	r0, r3
    2d04:	3710      	adds	r7, #16
    2d06:	46bd      	mov	sp, r7
    2d08:	bd80      	pop	{r7, pc}
    2d0a:	bf00      	nop
    2d0c:	00010d90 	.word	0x00010d90
    2d10:	00004409 	.word	0x00004409
    2d14:	00004965 	.word	0x00004965
    2d18:	00002d25 	.word	0x00002d25
    2d1c:	00002d49 	.word	0x00002d49
    2d20:	00002d6d 	.word	0x00002d6d

00002d24 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2d24:	b580      	push	{r7, lr}
    2d26:	b084      	sub	sp, #16
    2d28:	af00      	add	r7, sp, #0
    2d2a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2d30:	68fb      	ldr	r3, [r7, #12]
    2d32:	69db      	ldr	r3, [r3, #28]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d003      	beq.n	2d40 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	69db      	ldr	r3, [r3, #28]
    2d3c:	68f8      	ldr	r0, [r7, #12]
    2d3e:	4798      	blx	r3
	}
}
    2d40:	bf00      	nop
    2d42:	3710      	adds	r7, #16
    2d44:	46bd      	mov	sp, r7
    2d46:	bd80      	pop	{r7, pc}

00002d48 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b084      	sub	sp, #16
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2d50:	687b      	ldr	r3, [r7, #4]
    2d52:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2d54:	68fb      	ldr	r3, [r7, #12]
    2d56:	6a1b      	ldr	r3, [r3, #32]
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d003      	beq.n	2d64 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2d5c:	68fb      	ldr	r3, [r7, #12]
    2d5e:	6a1b      	ldr	r3, [r3, #32]
    2d60:	68f8      	ldr	r0, [r7, #12]
    2d62:	4798      	blx	r3
	}
}
    2d64:	bf00      	nop
    2d66:	3710      	adds	r7, #16
    2d68:	46bd      	mov	sp, r7
    2d6a:	bd80      	pop	{r7, pc}

00002d6c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    2d6c:	b580      	push	{r7, lr}
    2d6e:	b084      	sub	sp, #16
    2d70:	af00      	add	r7, sp, #0
    2d72:	6078      	str	r0, [r7, #4]
    2d74:	460b      	mov	r3, r1
    2d76:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2d78:	687b      	ldr	r3, [r7, #4]
    2d7a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    2d7c:	68fb      	ldr	r3, [r7, #12]
    2d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d80:	2b00      	cmp	r3, #0
    2d82:	d005      	beq.n	2d90 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2d84:	68fb      	ldr	r3, [r7, #12]
    2d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d88:	78fa      	ldrb	r2, [r7, #3]
    2d8a:	4611      	mov	r1, r2
    2d8c:	68f8      	ldr	r0, [r7, #12]
    2d8e:	4798      	blx	r3
	}
}
    2d90:	bf00      	nop
    2d92:	3710      	adds	r7, #16
    2d94:	46bd      	mov	sp, r7
    2d96:	bd80      	pop	{r7, pc}

00002d98 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2d98:	b580      	push	{r7, lr}
    2d9a:	b082      	sub	sp, #8
    2d9c:	af00      	add	r7, sp, #0
    2d9e:	6078      	str	r0, [r7, #4]
    2da0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2da2:	687b      	ldr	r3, [r7, #4]
    2da4:	2b00      	cmp	r3, #0
    2da6:	d004      	beq.n	2db2 <crc_sync_init+0x1a>
    2da8:	683b      	ldr	r3, [r7, #0]
    2daa:	2b00      	cmp	r3, #0
    2dac:	d001      	beq.n	2db2 <crc_sync_init+0x1a>
    2dae:	2301      	movs	r3, #1
    2db0:	e000      	b.n	2db4 <crc_sync_init+0x1c>
    2db2:	2300      	movs	r3, #0
    2db4:	f003 0301 	and.w	r3, r3, #1
    2db8:	b2db      	uxtb	r3, r3
    2dba:	222b      	movs	r2, #43	; 0x2b
    2dbc:	4906      	ldr	r1, [pc, #24]	; (2dd8 <crc_sync_init+0x40>)
    2dbe:	4618      	mov	r0, r3
    2dc0:	4b06      	ldr	r3, [pc, #24]	; (2ddc <crc_sync_init+0x44>)
    2dc2:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2dc4:	687b      	ldr	r3, [r7, #4]
    2dc6:	6839      	ldr	r1, [r7, #0]
    2dc8:	4618      	mov	r0, r3
    2dca:	4b05      	ldr	r3, [pc, #20]	; (2de0 <crc_sync_init+0x48>)
    2dcc:	4798      	blx	r3
    2dce:	4603      	mov	r3, r0
}
    2dd0:	4618      	mov	r0, r3
    2dd2:	3708      	adds	r7, #8
    2dd4:	46bd      	mov	sp, r7
    2dd6:	bd80      	pop	{r7, pc}
    2dd8:	00010dac 	.word	0x00010dac
    2ddc:	00004409 	.word	0x00004409
    2de0:	00005069 	.word	0x00005069

00002de4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2de4:	b590      	push	{r4, r7, lr}
    2de6:	b083      	sub	sp, #12
    2de8:	af00      	add	r7, sp, #0
    2dea:	4603      	mov	r3, r0
    2dec:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2dee:	4b07      	ldr	r3, [pc, #28]	; (2e0c <delay_us+0x28>)
    2df0:	681c      	ldr	r4, [r3, #0]
    2df2:	88fb      	ldrh	r3, [r7, #6]
    2df4:	4618      	mov	r0, r3
    2df6:	4b06      	ldr	r3, [pc, #24]	; (2e10 <delay_us+0x2c>)
    2df8:	4798      	blx	r3
    2dfa:	4603      	mov	r3, r0
    2dfc:	4619      	mov	r1, r3
    2dfe:	4620      	mov	r0, r4
    2e00:	4b04      	ldr	r3, [pc, #16]	; (2e14 <delay_us+0x30>)
    2e02:	4798      	blx	r3
}
    2e04:	bf00      	nop
    2e06:	370c      	adds	r7, #12
    2e08:	46bd      	mov	sp, r7
    2e0a:	bd90      	pop	{r4, r7, pc}
    2e0c:	20000cac 	.word	0x20000cac
    2e10:	00004db9 	.word	0x00004db9
    2e14:	00004f51 	.word	0x00004f51

00002e18 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2e18:	b590      	push	{r4, r7, lr}
    2e1a:	b083      	sub	sp, #12
    2e1c:	af00      	add	r7, sp, #0
    2e1e:	4603      	mov	r3, r0
    2e20:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2e22:	4b07      	ldr	r3, [pc, #28]	; (2e40 <delay_ms+0x28>)
    2e24:	681c      	ldr	r4, [r3, #0]
    2e26:	88fb      	ldrh	r3, [r7, #6]
    2e28:	4618      	mov	r0, r3
    2e2a:	4b06      	ldr	r3, [pc, #24]	; (2e44 <delay_ms+0x2c>)
    2e2c:	4798      	blx	r3
    2e2e:	4603      	mov	r3, r0
    2e30:	4619      	mov	r1, r3
    2e32:	4620      	mov	r0, r4
    2e34:	4b04      	ldr	r3, [pc, #16]	; (2e48 <delay_ms+0x30>)
    2e36:	4798      	blx	r3
}
    2e38:	bf00      	nop
    2e3a:	370c      	adds	r7, #12
    2e3c:	46bd      	mov	sp, r7
    2e3e:	bd90      	pop	{r4, r7, pc}
    2e40:	20000cac 	.word	0x20000cac
    2e44:	00004f25 	.word	0x00004f25
    2e48:	00004f51 	.word	0x00004f51

00002e4c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2e4c:	b580      	push	{r7, lr}
    2e4e:	af00      	add	r7, sp, #0
	return _event_system_init();
    2e50:	4b02      	ldr	r3, [pc, #8]	; (2e5c <event_system_init+0x10>)
    2e52:	4798      	blx	r3
    2e54:	4603      	mov	r3, r0
}
    2e56:	4618      	mov	r0, r3
    2e58:	bd80      	pop	{r7, pc}
    2e5a:	bf00      	nop
    2e5c:	00005825 	.word	0x00005825

00002e60 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2e60:	b580      	push	{r7, lr}
    2e62:	b082      	sub	sp, #8
    2e64:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2e66:	2300      	movs	r3, #0
    2e68:	80fb      	strh	r3, [r7, #6]
    2e6a:	e00e      	b.n	2e8a <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2e6c:	88fb      	ldrh	r3, [r7, #6]
    2e6e:	4a0c      	ldr	r2, [pc, #48]	; (2ea0 <ext_irq_init+0x40>)
    2e70:	00db      	lsls	r3, r3, #3
    2e72:	4413      	add	r3, r2
    2e74:	f04f 32ff 	mov.w	r2, #4294967295
    2e78:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2e7a:	88fb      	ldrh	r3, [r7, #6]
    2e7c:	4a08      	ldr	r2, [pc, #32]	; (2ea0 <ext_irq_init+0x40>)
    2e7e:	2100      	movs	r1, #0
    2e80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2e84:	88fb      	ldrh	r3, [r7, #6]
    2e86:	3301      	adds	r3, #1
    2e88:	80fb      	strh	r3, [r7, #6]
    2e8a:	88fb      	ldrh	r3, [r7, #6]
    2e8c:	2b08      	cmp	r3, #8
    2e8e:	d9ed      	bls.n	2e6c <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2e90:	4804      	ldr	r0, [pc, #16]	; (2ea4 <ext_irq_init+0x44>)
    2e92:	4b05      	ldr	r3, [pc, #20]	; (2ea8 <ext_irq_init+0x48>)
    2e94:	4798      	blx	r3
    2e96:	4603      	mov	r3, r0
}
    2e98:	4618      	mov	r0, r3
    2e9a:	3708      	adds	r7, #8
    2e9c:	46bd      	mov	sp, r7
    2e9e:	bd80      	pop	{r7, pc}
    2ea0:	20000cb0 	.word	0x20000cb0
    2ea4:	00003005 	.word	0x00003005
    2ea8:	000053a9 	.word	0x000053a9

00002eac <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2eac:	b580      	push	{r7, lr}
    2eae:	b086      	sub	sp, #24
    2eb0:	af00      	add	r7, sp, #0
    2eb2:	6078      	str	r0, [r7, #4]
    2eb4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2eb6:	2300      	movs	r3, #0
    2eb8:	75fb      	strb	r3, [r7, #23]
    2eba:	2300      	movs	r3, #0
    2ebc:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    2ebe:	2300      	movs	r3, #0
    2ec0:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    2ec2:	e012      	b.n	2eea <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2ec4:	7dfb      	ldrb	r3, [r7, #23]
    2ec6:	4a4d      	ldr	r2, [pc, #308]	; (2ffc <ext_irq_register+0x150>)
    2ec8:	00db      	lsls	r3, r3, #3
    2eca:	4413      	add	r3, r2
    2ecc:	685a      	ldr	r2, [r3, #4]
    2ece:	687b      	ldr	r3, [r7, #4]
    2ed0:	429a      	cmp	r2, r3
    2ed2:	d107      	bne.n	2ee4 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2ed4:	7dfb      	ldrb	r3, [r7, #23]
    2ed6:	4949      	ldr	r1, [pc, #292]	; (2ffc <ext_irq_register+0x150>)
    2ed8:	683a      	ldr	r2, [r7, #0]
    2eda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    2ede:	2301      	movs	r3, #1
    2ee0:	757b      	strb	r3, [r7, #21]
			break;
    2ee2:	e005      	b.n	2ef0 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2ee4:	7dfb      	ldrb	r3, [r7, #23]
    2ee6:	3301      	adds	r3, #1
    2ee8:	75fb      	strb	r3, [r7, #23]
    2eea:	7dfb      	ldrb	r3, [r7, #23]
    2eec:	2b08      	cmp	r3, #8
    2eee:	d9e9      	bls.n	2ec4 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2ef0:	683b      	ldr	r3, [r7, #0]
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d10e      	bne.n	2f14 <ext_irq_register+0x68>
		if (!found) {
    2ef6:	7d7b      	ldrb	r3, [r7, #21]
    2ef8:	f083 0301 	eor.w	r3, r3, #1
    2efc:	b2db      	uxtb	r3, r3
    2efe:	2b00      	cmp	r3, #0
    2f00:	d002      	beq.n	2f08 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    2f02:	f06f 030c 	mvn.w	r3, #12
    2f06:	e074      	b.n	2ff2 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2f08:	2100      	movs	r1, #0
    2f0a:	6878      	ldr	r0, [r7, #4]
    2f0c:	4b3c      	ldr	r3, [pc, #240]	; (3000 <ext_irq_register+0x154>)
    2f0e:	4798      	blx	r3
    2f10:	4603      	mov	r3, r0
    2f12:	e06e      	b.n	2ff2 <ext_irq_register+0x146>
	}

	if (!found) {
    2f14:	7d7b      	ldrb	r3, [r7, #21]
    2f16:	f083 0301 	eor.w	r3, r3, #1
    2f1a:	b2db      	uxtb	r3, r3
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d05a      	beq.n	2fd6 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2f20:	2300      	movs	r3, #0
    2f22:	75fb      	strb	r3, [r7, #23]
    2f24:	e016      	b.n	2f54 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2f26:	7dfb      	ldrb	r3, [r7, #23]
    2f28:	4a34      	ldr	r2, [pc, #208]	; (2ffc <ext_irq_register+0x150>)
    2f2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d10d      	bne.n	2f4e <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2f32:	7dfb      	ldrb	r3, [r7, #23]
    2f34:	4931      	ldr	r1, [pc, #196]	; (2ffc <ext_irq_register+0x150>)
    2f36:	683a      	ldr	r2, [r7, #0]
    2f38:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2f3c:	7dfb      	ldrb	r3, [r7, #23]
    2f3e:	4a2f      	ldr	r2, [pc, #188]	; (2ffc <ext_irq_register+0x150>)
    2f40:	00db      	lsls	r3, r3, #3
    2f42:	4413      	add	r3, r2
    2f44:	687a      	ldr	r2, [r7, #4]
    2f46:	605a      	str	r2, [r3, #4]
				found           = true;
    2f48:	2301      	movs	r3, #1
    2f4a:	757b      	strb	r3, [r7, #21]
				break;
    2f4c:	e005      	b.n	2f5a <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2f4e:	7dfb      	ldrb	r3, [r7, #23]
    2f50:	3301      	adds	r3, #1
    2f52:	75fb      	strb	r3, [r7, #23]
    2f54:	7dfb      	ldrb	r3, [r7, #23]
    2f56:	2b08      	cmp	r3, #8
    2f58:	d9e5      	bls.n	2f26 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2f5a:	e036      	b.n	2fca <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2f5c:	7dfb      	ldrb	r3, [r7, #23]
    2f5e:	4a27      	ldr	r2, [pc, #156]	; (2ffc <ext_irq_register+0x150>)
    2f60:	00db      	lsls	r3, r3, #3
    2f62:	4413      	add	r3, r2
    2f64:	685a      	ldr	r2, [r3, #4]
    2f66:	7dbb      	ldrb	r3, [r7, #22]
    2f68:	4924      	ldr	r1, [pc, #144]	; (2ffc <ext_irq_register+0x150>)
    2f6a:	00db      	lsls	r3, r3, #3
    2f6c:	440b      	add	r3, r1
    2f6e:	685b      	ldr	r3, [r3, #4]
    2f70:	429a      	cmp	r2, r3
    2f72:	d227      	bcs.n	2fc4 <ext_irq_register+0x118>
    2f74:	7dbb      	ldrb	r3, [r7, #22]
    2f76:	4a21      	ldr	r2, [pc, #132]	; (2ffc <ext_irq_register+0x150>)
    2f78:	00db      	lsls	r3, r3, #3
    2f7a:	4413      	add	r3, r2
    2f7c:	685b      	ldr	r3, [r3, #4]
    2f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f82:	d01f      	beq.n	2fc4 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2f84:	7dbb      	ldrb	r3, [r7, #22]
    2f86:	491d      	ldr	r1, [pc, #116]	; (2ffc <ext_irq_register+0x150>)
    2f88:	f107 020c 	add.w	r2, r7, #12
    2f8c:	00db      	lsls	r3, r3, #3
    2f8e:	440b      	add	r3, r1
    2f90:	e893 0003 	ldmia.w	r3, {r0, r1}
    2f94:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2f98:	7dbb      	ldrb	r3, [r7, #22]
    2f9a:	7dfa      	ldrb	r2, [r7, #23]
    2f9c:	4817      	ldr	r0, [pc, #92]	; (2ffc <ext_irq_register+0x150>)
    2f9e:	4917      	ldr	r1, [pc, #92]	; (2ffc <ext_irq_register+0x150>)
    2fa0:	00db      	lsls	r3, r3, #3
    2fa2:	4403      	add	r3, r0
    2fa4:	00d2      	lsls	r2, r2, #3
    2fa6:	440a      	add	r2, r1
    2fa8:	e892 0003 	ldmia.w	r2, {r0, r1}
    2fac:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2fb0:	7dfb      	ldrb	r3, [r7, #23]
    2fb2:	4a12      	ldr	r2, [pc, #72]	; (2ffc <ext_irq_register+0x150>)
    2fb4:	00db      	lsls	r3, r3, #3
    2fb6:	4413      	add	r3, r2
    2fb8:	f107 020c 	add.w	r2, r7, #12
    2fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
    2fc0:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2fc4:	7dbb      	ldrb	r3, [r7, #22]
    2fc6:	3301      	adds	r3, #1
    2fc8:	75bb      	strb	r3, [r7, #22]
    2fca:	7dbb      	ldrb	r3, [r7, #22]
    2fcc:	2b08      	cmp	r3, #8
    2fce:	d802      	bhi.n	2fd6 <ext_irq_register+0x12a>
    2fd0:	7dfb      	ldrb	r3, [r7, #23]
    2fd2:	2b08      	cmp	r3, #8
    2fd4:	d9c2      	bls.n	2f5c <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    2fd6:	7d7b      	ldrb	r3, [r7, #21]
    2fd8:	f083 0301 	eor.w	r3, r3, #1
    2fdc:	b2db      	uxtb	r3, r3
    2fde:	2b00      	cmp	r3, #0
    2fe0:	d002      	beq.n	2fe8 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    2fe2:	f06f 030c 	mvn.w	r3, #12
    2fe6:	e004      	b.n	2ff2 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2fe8:	2101      	movs	r1, #1
    2fea:	6878      	ldr	r0, [r7, #4]
    2fec:	4b04      	ldr	r3, [pc, #16]	; (3000 <ext_irq_register+0x154>)
    2fee:	4798      	blx	r3
    2ff0:	4603      	mov	r3, r0
}
    2ff2:	4618      	mov	r0, r3
    2ff4:	3718      	adds	r7, #24
    2ff6:	46bd      	mov	sp, r7
    2ff8:	bd80      	pop	{r7, pc}
    2ffa:	bf00      	nop
    2ffc:	20000cb0 	.word	0x20000cb0
    3000:	0000553d 	.word	0x0000553d

00003004 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    3004:	b580      	push	{r7, lr}
    3006:	b084      	sub	sp, #16
    3008:	af00      	add	r7, sp, #0
    300a:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    300c:	2300      	movs	r3, #0
    300e:	73fb      	strb	r3, [r7, #15]
    3010:	2309      	movs	r3, #9
    3012:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    3014:	e02a      	b.n	306c <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    3016:	7bba      	ldrb	r2, [r7, #14]
    3018:	7bfb      	ldrb	r3, [r7, #15]
    301a:	4413      	add	r3, r2
    301c:	105b      	asrs	r3, r3, #1
    301e:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    3020:	7b7b      	ldrb	r3, [r7, #13]
    3022:	2b08      	cmp	r3, #8
    3024:	d827      	bhi.n	3076 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    3026:	7b7b      	ldrb	r3, [r7, #13]
    3028:	4a16      	ldr	r2, [pc, #88]	; (3084 <process_ext_irq+0x80>)
    302a:	00db      	lsls	r3, r3, #3
    302c:	4413      	add	r3, r2
    302e:	685a      	ldr	r2, [r3, #4]
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	429a      	cmp	r2, r3
    3034:	d10b      	bne.n	304e <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    3036:	7b7b      	ldrb	r3, [r7, #13]
    3038:	4a12      	ldr	r2, [pc, #72]	; (3084 <process_ext_irq+0x80>)
    303a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    303e:	2b00      	cmp	r3, #0
    3040:	d01b      	beq.n	307a <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    3042:	7b7b      	ldrb	r3, [r7, #13]
    3044:	4a0f      	ldr	r2, [pc, #60]	; (3084 <process_ext_irq+0x80>)
    3046:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    304a:	4798      	blx	r3
			}
			return;
    304c:	e015      	b.n	307a <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    304e:	7b7b      	ldrb	r3, [r7, #13]
    3050:	4a0c      	ldr	r2, [pc, #48]	; (3084 <process_ext_irq+0x80>)
    3052:	00db      	lsls	r3, r3, #3
    3054:	4413      	add	r3, r2
    3056:	685a      	ldr	r2, [r3, #4]
    3058:	687b      	ldr	r3, [r7, #4]
    305a:	429a      	cmp	r2, r3
    305c:	d203      	bcs.n	3066 <process_ext_irq+0x62>
			lower = middle + 1;
    305e:	7b7b      	ldrb	r3, [r7, #13]
    3060:	3301      	adds	r3, #1
    3062:	73fb      	strb	r3, [r7, #15]
    3064:	e002      	b.n	306c <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    3066:	7b7b      	ldrb	r3, [r7, #13]
    3068:	3b01      	subs	r3, #1
    306a:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    306c:	7bba      	ldrb	r2, [r7, #14]
    306e:	7bfb      	ldrb	r3, [r7, #15]
    3070:	429a      	cmp	r2, r3
    3072:	d2d0      	bcs.n	3016 <process_ext_irq+0x12>
    3074:	e002      	b.n	307c <process_ext_irq+0x78>
			return;
    3076:	bf00      	nop
    3078:	e000      	b.n	307c <process_ext_irq+0x78>
			return;
    307a:	bf00      	nop
		}
	}
}
    307c:	3710      	adds	r7, #16
    307e:	46bd      	mov	sp, r7
    3080:	bd80      	pop	{r7, pc}
    3082:	bf00      	nop
    3084:	20000cb0 	.word	0x20000cb0

00003088 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    3088:	b580      	push	{r7, lr}
    308a:	b08a      	sub	sp, #40	; 0x28
    308c:	af00      	add	r7, sp, #0
    308e:	60f8      	str	r0, [r7, #12]
    3090:	60b9      	str	r1, [r7, #8]
    3092:	4613      	mov	r3, r2
    3094:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    3096:	68fb      	ldr	r3, [r7, #12]
    3098:	3b14      	subs	r3, #20
    309a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    309e:	8b9b      	ldrh	r3, [r3, #28]
    30a0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    30a2:	88fb      	ldrh	r3, [r7, #6]
    30a4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    30a6:	f248 0301 	movw	r3, #32769	; 0x8001
    30aa:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    30ac:	68bb      	ldr	r3, [r7, #8]
    30ae:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    30b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30b2:	f107 0214 	add.w	r2, r7, #20
    30b6:	4611      	mov	r1, r2
    30b8:	4618      	mov	r0, r3
    30ba:	4b06      	ldr	r3, [pc, #24]	; (30d4 <i2c_m_sync_read+0x4c>)
    30bc:	4798      	blx	r3
    30be:	6238      	str	r0, [r7, #32]

	if (ret) {
    30c0:	6a3b      	ldr	r3, [r7, #32]
    30c2:	2b00      	cmp	r3, #0
    30c4:	d001      	beq.n	30ca <i2c_m_sync_read+0x42>
		return ret;
    30c6:	6a3b      	ldr	r3, [r7, #32]
    30c8:	e000      	b.n	30cc <i2c_m_sync_read+0x44>
	}

	return n;
    30ca:	88fb      	ldrh	r3, [r7, #6]
}
    30cc:	4618      	mov	r0, r3
    30ce:	3728      	adds	r7, #40	; 0x28
    30d0:	46bd      	mov	sp, r7
    30d2:	bd80      	pop	{r7, pc}
    30d4:	000074f1 	.word	0x000074f1

000030d8 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    30d8:	b580      	push	{r7, lr}
    30da:	b08a      	sub	sp, #40	; 0x28
    30dc:	af00      	add	r7, sp, #0
    30de:	60f8      	str	r0, [r7, #12]
    30e0:	60b9      	str	r1, [r7, #8]
    30e2:	4613      	mov	r3, r2
    30e4:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    30e6:	68fb      	ldr	r3, [r7, #12]
    30e8:	3b14      	subs	r3, #20
    30ea:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    30ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30ee:	8b9b      	ldrh	r3, [r3, #28]
    30f0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    30f2:	88fb      	ldrh	r3, [r7, #6]
    30f4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    30f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    30fa:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    30fc:	68bb      	ldr	r3, [r7, #8]
    30fe:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    3100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3102:	f107 0214 	add.w	r2, r7, #20
    3106:	4611      	mov	r1, r2
    3108:	4618      	mov	r0, r3
    310a:	4b06      	ldr	r3, [pc, #24]	; (3124 <i2c_m_sync_write+0x4c>)
    310c:	4798      	blx	r3
    310e:	6238      	str	r0, [r7, #32]

	if (ret) {
    3110:	6a3b      	ldr	r3, [r7, #32]
    3112:	2b00      	cmp	r3, #0
    3114:	d001      	beq.n	311a <i2c_m_sync_write+0x42>
		return ret;
    3116:	6a3b      	ldr	r3, [r7, #32]
    3118:	e000      	b.n	311c <i2c_m_sync_write+0x44>
	}

	return n;
    311a:	88fb      	ldrh	r3, [r7, #6]
}
    311c:	4618      	mov	r0, r3
    311e:	3728      	adds	r7, #40	; 0x28
    3120:	46bd      	mov	sp, r7
    3122:	bd80      	pop	{r7, pc}
    3124:	000074f1 	.word	0x000074f1

00003128 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    3128:	b580      	push	{r7, lr}
    312a:	b084      	sub	sp, #16
    312c:	af00      	add	r7, sp, #0
    312e:	6078      	str	r0, [r7, #4]
    3130:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    3132:	687b      	ldr	r3, [r7, #4]
    3134:	2b00      	cmp	r3, #0
    3136:	bf14      	ite	ne
    3138:	2301      	movne	r3, #1
    313a:	2300      	moveq	r3, #0
    313c:	b2db      	uxtb	r3, r3
    313e:	225e      	movs	r2, #94	; 0x5e
    3140:	490c      	ldr	r1, [pc, #48]	; (3174 <i2c_m_sync_init+0x4c>)
    3142:	4618      	mov	r0, r3
    3144:	4b0c      	ldr	r3, [pc, #48]	; (3178 <i2c_m_sync_init+0x50>)
    3146:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    3148:	687b      	ldr	r3, [r7, #4]
    314a:	6839      	ldr	r1, [r7, #0]
    314c:	4618      	mov	r0, r3
    314e:	4b0b      	ldr	r3, [pc, #44]	; (317c <i2c_m_sync_init+0x54>)
    3150:	4798      	blx	r3
    3152:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    3154:	68fb      	ldr	r3, [r7, #12]
    3156:	2b00      	cmp	r3, #0
    3158:	d001      	beq.n	315e <i2c_m_sync_init+0x36>
		return init_status;
    315a:	68fb      	ldr	r3, [r7, #12]
    315c:	e006      	b.n	316c <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    315e:	687b      	ldr	r3, [r7, #4]
    3160:	4a07      	ldr	r2, [pc, #28]	; (3180 <i2c_m_sync_init+0x58>)
    3162:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	4a07      	ldr	r2, [pc, #28]	; (3184 <i2c_m_sync_init+0x5c>)
    3168:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    316a:	2300      	movs	r3, #0
}
    316c:	4618      	mov	r0, r3
    316e:	3710      	adds	r7, #16
    3170:	46bd      	mov	sp, r7
    3172:	bd80      	pop	{r7, pc}
    3174:	00010dc8 	.word	0x00010dc8
    3178:	00004409 	.word	0x00004409
    317c:	00007291 	.word	0x00007291
    3180:	00003089 	.word	0x00003089
    3184:	000030d9 	.word	0x000030d9

00003188 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    3188:	b580      	push	{r7, lr}
    318a:	b082      	sub	sp, #8
    318c:	af00      	add	r7, sp, #0
    318e:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    3190:	687b      	ldr	r3, [r7, #4]
    3192:	4618      	mov	r0, r3
    3194:	4b03      	ldr	r3, [pc, #12]	; (31a4 <i2c_m_sync_enable+0x1c>)
    3196:	4798      	blx	r3
    3198:	4603      	mov	r3, r0
}
    319a:	4618      	mov	r0, r3
    319c:	3708      	adds	r7, #8
    319e:	46bd      	mov	sp, r7
    31a0:	bd80      	pop	{r7, pc}
    31a2:	bf00      	nop
    31a4:	000072d9 	.word	0x000072d9

000031a8 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    31a8:	b580      	push	{r7, lr}
    31aa:	b082      	sub	sp, #8
    31ac:	af00      	add	r7, sp, #0
    31ae:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    31b0:	687b      	ldr	r3, [r7, #4]
    31b2:	4618      	mov	r0, r3
    31b4:	4b03      	ldr	r3, [pc, #12]	; (31c4 <i2c_m_sync_disable+0x1c>)
    31b6:	4798      	blx	r3
    31b8:	4603      	mov	r3, r0
}
    31ba:	4618      	mov	r0, r3
    31bc:	3708      	adds	r7, #8
    31be:	46bd      	mov	sp, r7
    31c0:	bd80      	pop	{r7, pc}
    31c2:	bf00      	nop
    31c4:	00007319 	.word	0x00007319

000031c8 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    31c8:	b480      	push	{r7}
    31ca:	b085      	sub	sp, #20
    31cc:	af00      	add	r7, sp, #0
    31ce:	60f8      	str	r0, [r7, #12]
    31d0:	460b      	mov	r3, r1
    31d2:	607a      	str	r2, [r7, #4]
    31d4:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    31d6:	897b      	ldrh	r3, [r7, #10]
    31d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    31dc:	b21a      	sxth	r2, r3
    31de:	687b      	ldr	r3, [r7, #4]
    31e0:	b21b      	sxth	r3, r3
    31e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    31e6:	b21b      	sxth	r3, r3
    31e8:	4313      	orrs	r3, r2
    31ea:	b21b      	sxth	r3, r3
    31ec:	b29a      	uxth	r2, r3
    31ee:	68fb      	ldr	r3, [r7, #12]
    31f0:	839a      	strh	r2, [r3, #28]
    31f2:	68fb      	ldr	r3, [r7, #12]
    31f4:	8b9b      	ldrh	r3, [r3, #28]
}
    31f6:	4618      	mov	r0, r3
    31f8:	3714      	adds	r7, #20
    31fa:	46bd      	mov	sp, r7
    31fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3200:	4770      	bx	lr

00003202 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    3202:	b480      	push	{r7}
    3204:	b083      	sub	sp, #12
    3206:	af00      	add	r7, sp, #0
    3208:	6078      	str	r0, [r7, #4]
    320a:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    320c:	687b      	ldr	r3, [r7, #4]
    320e:	f103 0214 	add.w	r2, r3, #20
    3212:	683b      	ldr	r3, [r7, #0]
    3214:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    3216:	2300      	movs	r3, #0
}
    3218:	4618      	mov	r0, r3
    321a:	370c      	adds	r7, #12
    321c:	46bd      	mov	sp, r7
    321e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3222:	4770      	bx	lr

00003224 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    3224:	b580      	push	{r7, lr}
    3226:	b084      	sub	sp, #16
    3228:	af00      	add	r7, sp, #0
    322a:	60f8      	str	r0, [r7, #12]
    322c:	60b9      	str	r1, [r7, #8]
    322e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    3230:	68fb      	ldr	r3, [r7, #12]
    3232:	2b00      	cmp	r3, #0
    3234:	d004      	beq.n	3240 <pwm_init+0x1c>
    3236:	68bb      	ldr	r3, [r7, #8]
    3238:	2b00      	cmp	r3, #0
    323a:	d001      	beq.n	3240 <pwm_init+0x1c>
    323c:	2301      	movs	r3, #1
    323e:	e000      	b.n	3242 <pwm_init+0x1e>
    3240:	2300      	movs	r3, #0
    3242:	f003 0301 	and.w	r3, r3, #1
    3246:	b2db      	uxtb	r3, r3
    3248:	2233      	movs	r2, #51	; 0x33
    324a:	490a      	ldr	r1, [pc, #40]	; (3274 <pwm_init+0x50>)
    324c:	4618      	mov	r0, r3
    324e:	4b0a      	ldr	r3, [pc, #40]	; (3278 <pwm_init+0x54>)
    3250:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    3252:	68fb      	ldr	r3, [r7, #12]
    3254:	68b9      	ldr	r1, [r7, #8]
    3256:	4618      	mov	r0, r3
    3258:	4b08      	ldr	r3, [pc, #32]	; (327c <pwm_init+0x58>)
    325a:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    325c:	68fb      	ldr	r3, [r7, #12]
    325e:	4a08      	ldr	r2, [pc, #32]	; (3280 <pwm_init+0x5c>)
    3260:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    3262:	68fb      	ldr	r3, [r7, #12]
    3264:	4a07      	ldr	r2, [pc, #28]	; (3284 <pwm_init+0x60>)
    3266:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    3268:	2300      	movs	r3, #0
}
    326a:	4618      	mov	r0, r3
    326c:	3710      	adds	r7, #16
    326e:	46bd      	mov	sp, r7
    3270:	bd80      	pop	{r7, pc}
    3272:	bf00      	nop
    3274:	00010de4 	.word	0x00010de4
    3278:	00004409 	.word	0x00004409
    327c:	00008ab1 	.word	0x00008ab1
    3280:	000032dd 	.word	0x000032dd
    3284:	00003301 	.word	0x00003301

00003288 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    3288:	b580      	push	{r7, lr}
    328a:	b082      	sub	sp, #8
    328c:	af00      	add	r7, sp, #0
    328e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	2b00      	cmp	r3, #0
    3294:	bf14      	ite	ne
    3296:	2301      	movne	r3, #1
    3298:	2300      	moveq	r3, #0
    329a:	b2db      	uxtb	r3, r3
    329c:	224a      	movs	r2, #74	; 0x4a
    329e:	490b      	ldr	r1, [pc, #44]	; (32cc <pwm_enable+0x44>)
    32a0:	4618      	mov	r0, r3
    32a2:	4b0b      	ldr	r3, [pc, #44]	; (32d0 <pwm_enable+0x48>)
    32a4:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    32a6:	687b      	ldr	r3, [r7, #4]
    32a8:	4618      	mov	r0, r3
    32aa:	4b0a      	ldr	r3, [pc, #40]	; (32d4 <pwm_enable+0x4c>)
    32ac:	4798      	blx	r3
    32ae:	4603      	mov	r3, r0
    32b0:	2b00      	cmp	r3, #0
    32b2:	d002      	beq.n	32ba <pwm_enable+0x32>
		return ERR_DENIED;
    32b4:	f06f 0310 	mvn.w	r3, #16
    32b8:	e004      	b.n	32c4 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    32ba:	687b      	ldr	r3, [r7, #4]
    32bc:	4618      	mov	r0, r3
    32be:	4b06      	ldr	r3, [pc, #24]	; (32d8 <pwm_enable+0x50>)
    32c0:	4798      	blx	r3

	return ERR_NONE;
    32c2:	2300      	movs	r3, #0
}
    32c4:	4618      	mov	r0, r3
    32c6:	3708      	adds	r7, #8
    32c8:	46bd      	mov	sp, r7
    32ca:	bd80      	pop	{r7, pc}
    32cc:	00010de4 	.word	0x00010de4
    32d0:	00004409 	.word	0x00004409
    32d4:	00008ea1 	.word	0x00008ea1
    32d8:	00008d5d 	.word	0x00008d5d

000032dc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    32dc:	b580      	push	{r7, lr}
    32de:	b084      	sub	sp, #16
    32e0:	af00      	add	r7, sp, #0
    32e2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    32e8:	68fb      	ldr	r3, [r7, #12]
    32ea:	695b      	ldr	r3, [r3, #20]
    32ec:	2b00      	cmp	r3, #0
    32ee:	d003      	beq.n	32f8 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    32f0:	68fb      	ldr	r3, [r7, #12]
    32f2:	695b      	ldr	r3, [r3, #20]
    32f4:	68f8      	ldr	r0, [r7, #12]
    32f6:	4798      	blx	r3
	}
}
    32f8:	bf00      	nop
    32fa:	3710      	adds	r7, #16
    32fc:	46bd      	mov	sp, r7
    32fe:	bd80      	pop	{r7, pc}

00003300 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    3300:	b580      	push	{r7, lr}
    3302:	b084      	sub	sp, #16
    3304:	af00      	add	r7, sp, #0
    3306:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3308:	687b      	ldr	r3, [r7, #4]
    330a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    330c:	68fb      	ldr	r3, [r7, #12]
    330e:	699b      	ldr	r3, [r3, #24]
    3310:	2b00      	cmp	r3, #0
    3312:	d003      	beq.n	331c <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    3314:	68fb      	ldr	r3, [r7, #12]
    3316:	699b      	ldr	r3, [r3, #24]
    3318:	68f8      	ldr	r0, [r7, #12]
    331a:	4798      	blx	r3
	}
}
    331c:	bf00      	nop
    331e:	3710      	adds	r7, #16
    3320:	46bd      	mov	sp, r7
    3322:	bd80      	pop	{r7, pc}

00003324 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    3324:	b580      	push	{r7, lr}
    3326:	b082      	sub	sp, #8
    3328:	af00      	add	r7, sp, #0
    332a:	6078      	str	r0, [r7, #4]
    332c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	2b00      	cmp	r3, #0
    3332:	d004      	beq.n	333e <qspi_sync_init+0x1a>
    3334:	683b      	ldr	r3, [r7, #0]
    3336:	2b00      	cmp	r3, #0
    3338:	d001      	beq.n	333e <qspi_sync_init+0x1a>
    333a:	2301      	movs	r3, #1
    333c:	e000      	b.n	3340 <qspi_sync_init+0x1c>
    333e:	2300      	movs	r3, #0
    3340:	f003 0301 	and.w	r3, r3, #1
    3344:	b2db      	uxtb	r3, r3
    3346:	2231      	movs	r2, #49	; 0x31
    3348:	4906      	ldr	r1, [pc, #24]	; (3364 <qspi_sync_init+0x40>)
    334a:	4618      	mov	r0, r3
    334c:	4b06      	ldr	r3, [pc, #24]	; (3368 <qspi_sync_init+0x44>)
    334e:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    3350:	687b      	ldr	r3, [r7, #4]
    3352:	6839      	ldr	r1, [r7, #0]
    3354:	4618      	mov	r0, r3
    3356:	4b05      	ldr	r3, [pc, #20]	; (336c <qspi_sync_init+0x48>)
    3358:	4798      	blx	r3
    335a:	4603      	mov	r3, r0
}
    335c:	4618      	mov	r0, r3
    335e:	3708      	adds	r7, #8
    3360:	46bd      	mov	sp, r7
    3362:	bd80      	pop	{r7, pc}
    3364:	00010dfc 	.word	0x00010dfc
    3368:	00004409 	.word	0x00004409
    336c:	00006405 	.word	0x00006405

00003370 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    3370:	b580      	push	{r7, lr}
    3372:	b082      	sub	sp, #8
    3374:	af00      	add	r7, sp, #0
    3376:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	2b00      	cmp	r3, #0
    337c:	bf14      	ite	ne
    337e:	2301      	movne	r3, #1
    3380:	2300      	moveq	r3, #0
    3382:	b2db      	uxtb	r3, r3
    3384:	223f      	movs	r2, #63	; 0x3f
    3386:	4906      	ldr	r1, [pc, #24]	; (33a0 <qspi_sync_enable+0x30>)
    3388:	4618      	mov	r0, r3
    338a:	4b06      	ldr	r3, [pc, #24]	; (33a4 <qspi_sync_enable+0x34>)
    338c:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    338e:	687b      	ldr	r3, [r7, #4]
    3390:	4618      	mov	r0, r3
    3392:	4b05      	ldr	r3, [pc, #20]	; (33a8 <qspi_sync_enable+0x38>)
    3394:	4798      	blx	r3
    3396:	4603      	mov	r3, r0
}
    3398:	4618      	mov	r0, r3
    339a:	3708      	adds	r7, #8
    339c:	46bd      	mov	sp, r7
    339e:	bd80      	pop	{r7, pc}
    33a0:	00010dfc 	.word	0x00010dfc
    33a4:	00004409 	.word	0x00004409
    33a8:	00006479 	.word	0x00006479

000033ac <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    33ac:	b580      	push	{r7, lr}
    33ae:	b082      	sub	sp, #8
    33b0:	af00      	add	r7, sp, #0
    33b2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    33b4:	687b      	ldr	r3, [r7, #4]
    33b6:	2b00      	cmp	r3, #0
    33b8:	bf14      	ite	ne
    33ba:	2301      	movne	r3, #1
    33bc:	2300      	moveq	r3, #0
    33be:	b2db      	uxtb	r3, r3
    33c0:	2246      	movs	r2, #70	; 0x46
    33c2:	4906      	ldr	r1, [pc, #24]	; (33dc <qspi_sync_disable+0x30>)
    33c4:	4618      	mov	r0, r3
    33c6:	4b06      	ldr	r3, [pc, #24]	; (33e0 <qspi_sync_disable+0x34>)
    33c8:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    33ca:	687b      	ldr	r3, [r7, #4]
    33cc:	4618      	mov	r0, r3
    33ce:	4b05      	ldr	r3, [pc, #20]	; (33e4 <qspi_sync_disable+0x38>)
    33d0:	4798      	blx	r3
    33d2:	4603      	mov	r3, r0
}
    33d4:	4618      	mov	r0, r3
    33d6:	3708      	adds	r7, #8
    33d8:	46bd      	mov	sp, r7
    33da:	bd80      	pop	{r7, pc}
    33dc:	00010dfc 	.word	0x00010dfc
    33e0:	00004409 	.word	0x00004409
    33e4:	0000649d 	.word	0x0000649d

000033e8 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    33e8:	b580      	push	{r7, lr}
    33ea:	b082      	sub	sp, #8
    33ec:	af00      	add	r7, sp, #0
    33ee:	6078      	str	r0, [r7, #4]
    33f0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    33f2:	687b      	ldr	r3, [r7, #4]
    33f4:	2b00      	cmp	r3, #0
    33f6:	d004      	beq.n	3402 <qspi_sync_serial_run_command+0x1a>
    33f8:	683b      	ldr	r3, [r7, #0]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d001      	beq.n	3402 <qspi_sync_serial_run_command+0x1a>
    33fe:	2301      	movs	r3, #1
    3400:	e000      	b.n	3404 <qspi_sync_serial_run_command+0x1c>
    3402:	2300      	movs	r3, #0
    3404:	f003 0301 	and.w	r3, r3, #1
    3408:	b2db      	uxtb	r3, r3
    340a:	224d      	movs	r2, #77	; 0x4d
    340c:	4906      	ldr	r1, [pc, #24]	; (3428 <qspi_sync_serial_run_command+0x40>)
    340e:	4618      	mov	r0, r3
    3410:	4b06      	ldr	r3, [pc, #24]	; (342c <qspi_sync_serial_run_command+0x44>)
    3412:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    3414:	687b      	ldr	r3, [r7, #4]
    3416:	6839      	ldr	r1, [r7, #0]
    3418:	4618      	mov	r0, r3
    341a:	4b05      	ldr	r3, [pc, #20]	; (3430 <qspi_sync_serial_run_command+0x48>)
    341c:	4798      	blx	r3
    341e:	4603      	mov	r3, r0
}
    3420:	4618      	mov	r0, r3
    3422:	3708      	adds	r7, #8
    3424:	46bd      	mov	sp, r7
    3426:	bd80      	pop	{r7, pc}
    3428:	00010dfc 	.word	0x00010dfc
    342c:	00004409 	.word	0x00004409
    3430:	000065e9 	.word	0x000065e9

00003434 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    3434:	b580      	push	{r7, lr}
    3436:	b084      	sub	sp, #16
    3438:	af00      	add	r7, sp, #0
    343a:	6078      	str	r0, [r7, #4]
    343c:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    343e:	2300      	movs	r3, #0
    3440:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    3442:	687b      	ldr	r3, [r7, #4]
    3444:	2b00      	cmp	r3, #0
    3446:	d004      	beq.n	3452 <spi_m_sync_init+0x1e>
    3448:	683b      	ldr	r3, [r7, #0]
    344a:	2b00      	cmp	r3, #0
    344c:	d001      	beq.n	3452 <spi_m_sync_init+0x1e>
    344e:	2301      	movs	r3, #1
    3450:	e000      	b.n	3454 <spi_m_sync_init+0x20>
    3452:	2300      	movs	r3, #0
    3454:	f003 0301 	and.w	r3, r3, #1
    3458:	b2db      	uxtb	r3, r3
    345a:	2240      	movs	r2, #64	; 0x40
    345c:	4910      	ldr	r1, [pc, #64]	; (34a0 <spi_m_sync_init+0x6c>)
    345e:	4618      	mov	r0, r3
    3460:	4b10      	ldr	r3, [pc, #64]	; (34a4 <spi_m_sync_init+0x70>)
    3462:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    3464:	687b      	ldr	r3, [r7, #4]
    3466:	683a      	ldr	r2, [r7, #0]
    3468:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    346a:	687b      	ldr	r3, [r7, #4]
    346c:	3304      	adds	r3, #4
    346e:	6839      	ldr	r1, [r7, #0]
    3470:	4618      	mov	r0, r3
    3472:	4b0d      	ldr	r3, [pc, #52]	; (34a8 <spi_m_sync_init+0x74>)
    3474:	4798      	blx	r3
    3476:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    3478:	68fb      	ldr	r3, [r7, #12]
    347a:	2b00      	cmp	r3, #0
    347c:	da01      	bge.n	3482 <spi_m_sync_init+0x4e>
		return rc;
    347e:	68fb      	ldr	r3, [r7, #12]
    3480:	e00a      	b.n	3498 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    3482:	687b      	ldr	r3, [r7, #4]
    3484:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3488:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    348a:	687b      	ldr	r3, [r7, #4]
    348c:	4a07      	ldr	r2, [pc, #28]	; (34ac <spi_m_sync_init+0x78>)
    348e:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	4a07      	ldr	r2, [pc, #28]	; (34b0 <spi_m_sync_init+0x7c>)
    3494:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3496:	2300      	movs	r3, #0
}
    3498:	4618      	mov	r0, r3
    349a:	3710      	adds	r7, #16
    349c:	46bd      	mov	sp, r7
    349e:	bd80      	pop	{r7, pc}
    34a0:	00010e18 	.word	0x00010e18
    34a4:	00004409 	.word	0x00004409
    34a8:	00007985 	.word	0x00007985
    34ac:	000034b5 	.word	0x000034b5
    34b0:	0000350d 	.word	0x0000350d

000034b4 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    34b4:	b580      	push	{r7, lr}
    34b6:	b088      	sub	sp, #32
    34b8:	af00      	add	r7, sp, #0
    34ba:	60f8      	str	r0, [r7, #12]
    34bc:	60b9      	str	r1, [r7, #8]
    34be:	4613      	mov	r3, r2
    34c0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    34c2:	68fb      	ldr	r3, [r7, #12]
    34c4:	2b00      	cmp	r3, #0
    34c6:	bf14      	ite	ne
    34c8:	2301      	movne	r3, #1
    34ca:	2300      	moveq	r3, #0
    34cc:	b2db      	uxtb	r3, r3
    34ce:	2287      	movs	r2, #135	; 0x87
    34d0:	490b      	ldr	r1, [pc, #44]	; (3500 <_spi_m_sync_io_read+0x4c>)
    34d2:	4618      	mov	r0, r3
    34d4:	4b0b      	ldr	r3, [pc, #44]	; (3504 <_spi_m_sync_io_read+0x50>)
    34d6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    34d8:	68fb      	ldr	r3, [r7, #12]
    34da:	3b0c      	subs	r3, #12
    34dc:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    34de:	68bb      	ldr	r3, [r7, #8]
    34e0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    34e2:	2300      	movs	r3, #0
    34e4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    34e6:	88fb      	ldrh	r3, [r7, #6]
    34e8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    34ea:	f107 0310 	add.w	r3, r7, #16
    34ee:	4619      	mov	r1, r3
    34f0:	69f8      	ldr	r0, [r7, #28]
    34f2:	4b05      	ldr	r3, [pc, #20]	; (3508 <_spi_m_sync_io_read+0x54>)
    34f4:	4798      	blx	r3
    34f6:	4603      	mov	r3, r0
}
    34f8:	4618      	mov	r0, r3
    34fa:	3720      	adds	r7, #32
    34fc:	46bd      	mov	sp, r7
    34fe:	bd80      	pop	{r7, pc}
    3500:	00010e18 	.word	0x00010e18
    3504:	00004409 	.word	0x00004409
    3508:	00003565 	.word	0x00003565

0000350c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    350c:	b580      	push	{r7, lr}
    350e:	b088      	sub	sp, #32
    3510:	af00      	add	r7, sp, #0
    3512:	60f8      	str	r0, [r7, #12]
    3514:	60b9      	str	r1, [r7, #8]
    3516:	4613      	mov	r3, r2
    3518:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    351a:	68fb      	ldr	r3, [r7, #12]
    351c:	2b00      	cmp	r3, #0
    351e:	bf14      	ite	ne
    3520:	2301      	movne	r3, #1
    3522:	2300      	moveq	r3, #0
    3524:	b2db      	uxtb	r3, r3
    3526:	22a3      	movs	r2, #163	; 0xa3
    3528:	490b      	ldr	r1, [pc, #44]	; (3558 <_spi_m_sync_io_write+0x4c>)
    352a:	4618      	mov	r0, r3
    352c:	4b0b      	ldr	r3, [pc, #44]	; (355c <_spi_m_sync_io_write+0x50>)
    352e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3530:	68fb      	ldr	r3, [r7, #12]
    3532:	3b0c      	subs	r3, #12
    3534:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    3536:	2300      	movs	r3, #0
    3538:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    353a:	68bb      	ldr	r3, [r7, #8]
    353c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    353e:	88fb      	ldrh	r3, [r7, #6]
    3540:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3542:	f107 0310 	add.w	r3, r7, #16
    3546:	4619      	mov	r1, r3
    3548:	69f8      	ldr	r0, [r7, #28]
    354a:	4b05      	ldr	r3, [pc, #20]	; (3560 <_spi_m_sync_io_write+0x54>)
    354c:	4798      	blx	r3
    354e:	4603      	mov	r3, r0
}
    3550:	4618      	mov	r0, r3
    3552:	3720      	adds	r7, #32
    3554:	46bd      	mov	sp, r7
    3556:	bd80      	pop	{r7, pc}
    3558:	00010e18 	.word	0x00010e18
    355c:	00004409 	.word	0x00004409
    3560:	00003565 	.word	0x00003565

00003564 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    3564:	b580      	push	{r7, lr}
    3566:	b086      	sub	sp, #24
    3568:	af00      	add	r7, sp, #0
    356a:	6078      	str	r0, [r7, #4]
    356c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	2b00      	cmp	r3, #0
    3572:	d004      	beq.n	357e <spi_m_sync_transfer+0x1a>
    3574:	683b      	ldr	r3, [r7, #0]
    3576:	2b00      	cmp	r3, #0
    3578:	d001      	beq.n	357e <spi_m_sync_transfer+0x1a>
    357a:	2301      	movs	r3, #1
    357c:	e000      	b.n	3580 <spi_m_sync_transfer+0x1c>
    357e:	2300      	movs	r3, #0
    3580:	f003 0301 	and.w	r3, r3, #1
    3584:	b2db      	uxtb	r3, r3
    3586:	22b3      	movs	r2, #179	; 0xb3
    3588:	490c      	ldr	r1, [pc, #48]	; (35bc <spi_m_sync_transfer+0x58>)
    358a:	4618      	mov	r0, r3
    358c:	4b0c      	ldr	r3, [pc, #48]	; (35c0 <spi_m_sync_transfer+0x5c>)
    358e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    3590:	683b      	ldr	r3, [r7, #0]
    3592:	681b      	ldr	r3, [r3, #0]
    3594:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    3596:	683b      	ldr	r3, [r7, #0]
    3598:	685b      	ldr	r3, [r3, #4]
    359a:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    359c:	683b      	ldr	r3, [r7, #0]
    359e:	689b      	ldr	r3, [r3, #8]
    35a0:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    35a2:	687b      	ldr	r3, [r7, #4]
    35a4:	3304      	adds	r3, #4
    35a6:	f107 020c 	add.w	r2, r7, #12
    35aa:	4611      	mov	r1, r2
    35ac:	4618      	mov	r0, r3
    35ae:	4b05      	ldr	r3, [pc, #20]	; (35c4 <spi_m_sync_transfer+0x60>)
    35b0:	4798      	blx	r3
    35b2:	4603      	mov	r3, r0
}
    35b4:	4618      	mov	r0, r3
    35b6:	3718      	adds	r7, #24
    35b8:	46bd      	mov	sp, r7
    35ba:	bd80      	pop	{r7, pc}
    35bc:	00010e18 	.word	0x00010e18
    35c0:	00004409 	.word	0x00004409
    35c4:	00007be5 	.word	0x00007be5

000035c8 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    35c8:	b480      	push	{r7}
    35ca:	b083      	sub	sp, #12
    35cc:	af00      	add	r7, sp, #0
    35ce:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    35d0:	687b      	ldr	r3, [r7, #4]
    35d2:	681b      	ldr	r3, [r3, #0]
}
    35d4:	4618      	mov	r0, r3
    35d6:	370c      	adds	r7, #12
    35d8:	46bd      	mov	sp, r7
    35da:	f85d 7b04 	ldr.w	r7, [sp], #4
    35de:	4770      	bx	lr

000035e0 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    35e0:	b480      	push	{r7}
    35e2:	b083      	sub	sp, #12
    35e4:	af00      	add	r7, sp, #0
    35e6:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	2b00      	cmp	r3, #0
    35ec:	d002      	beq.n	35f4 <list_get_next_element+0x14>
    35ee:	687b      	ldr	r3, [r7, #4]
    35f0:	681b      	ldr	r3, [r3, #0]
    35f2:	e000      	b.n	35f6 <list_get_next_element+0x16>
    35f4:	2300      	movs	r3, #0
}
    35f6:	4618      	mov	r0, r3
    35f8:	370c      	adds	r7, #12
    35fa:	46bd      	mov	sp, r7
    35fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3600:	4770      	bx	lr
	...

00003604 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    3604:	b580      	push	{r7, lr}
    3606:	b084      	sub	sp, #16
    3608:	af00      	add	r7, sp, #0
    360a:	60f8      	str	r0, [r7, #12]
    360c:	60b9      	str	r1, [r7, #8]
    360e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    3610:	68fb      	ldr	r3, [r7, #12]
    3612:	2b00      	cmp	r3, #0
    3614:	d007      	beq.n	3626 <timer_init+0x22>
    3616:	68bb      	ldr	r3, [r7, #8]
    3618:	2b00      	cmp	r3, #0
    361a:	d004      	beq.n	3626 <timer_init+0x22>
    361c:	687b      	ldr	r3, [r7, #4]
    361e:	2b00      	cmp	r3, #0
    3620:	d001      	beq.n	3626 <timer_init+0x22>
    3622:	2301      	movs	r3, #1
    3624:	e000      	b.n	3628 <timer_init+0x24>
    3626:	2300      	movs	r3, #0
    3628:	f003 0301 	and.w	r3, r3, #1
    362c:	b2db      	uxtb	r3, r3
    362e:	223b      	movs	r2, #59	; 0x3b
    3630:	490c      	ldr	r1, [pc, #48]	; (3664 <timer_init+0x60>)
    3632:	4618      	mov	r0, r3
    3634:	4b0c      	ldr	r3, [pc, #48]	; (3668 <timer_init+0x64>)
    3636:	4798      	blx	r3
	descr->func = func;
    3638:	68fb      	ldr	r3, [r7, #12]
    363a:	687a      	ldr	r2, [r7, #4]
    363c:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    363e:	68fb      	ldr	r3, [r7, #12]
    3640:	681b      	ldr	r3, [r3, #0]
    3642:	681b      	ldr	r3, [r3, #0]
    3644:	68fa      	ldr	r2, [r7, #12]
    3646:	3204      	adds	r2, #4
    3648:	68b9      	ldr	r1, [r7, #8]
    364a:	4610      	mov	r0, r2
    364c:	4798      	blx	r3
	descr->time                           = 0;
    364e:	68fb      	ldr	r3, [r7, #12]
    3650:	2200      	movs	r2, #0
    3652:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    3654:	68fb      	ldr	r3, [r7, #12]
    3656:	4a05      	ldr	r2, [pc, #20]	; (366c <timer_init+0x68>)
    3658:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    365a:	2300      	movs	r3, #0
}
    365c:	4618      	mov	r0, r3
    365e:	3710      	adds	r7, #16
    3660:	46bd      	mov	sp, r7
    3662:	bd80      	pop	{r7, pc}
    3664:	00010e34 	.word	0x00010e34
    3668:	00004409 	.word	0x00004409
    366c:	000039f5 	.word	0x000039f5

00003670 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    3670:	b580      	push	{r7, lr}
    3672:	b082      	sub	sp, #8
    3674:	af00      	add	r7, sp, #0
    3676:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3678:	687b      	ldr	r3, [r7, #4]
    367a:	2b00      	cmp	r3, #0
    367c:	d005      	beq.n	368a <timer_start+0x1a>
    367e:	687b      	ldr	r3, [r7, #4]
    3680:	681b      	ldr	r3, [r3, #0]
    3682:	2b00      	cmp	r3, #0
    3684:	d001      	beq.n	368a <timer_start+0x1a>
    3686:	2301      	movs	r3, #1
    3688:	e000      	b.n	368c <timer_start+0x1c>
    368a:	2300      	movs	r3, #0
    368c:	f003 0301 	and.w	r3, r3, #1
    3690:	b2db      	uxtb	r3, r3
    3692:	2254      	movs	r2, #84	; 0x54
    3694:	490e      	ldr	r1, [pc, #56]	; (36d0 <timer_start+0x60>)
    3696:	4618      	mov	r0, r3
    3698:	4b0e      	ldr	r3, [pc, #56]	; (36d4 <timer_start+0x64>)
    369a:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    369c:	687b      	ldr	r3, [r7, #4]
    369e:	681b      	ldr	r3, [r3, #0]
    36a0:	699b      	ldr	r3, [r3, #24]
    36a2:	687a      	ldr	r2, [r7, #4]
    36a4:	3204      	adds	r2, #4
    36a6:	4610      	mov	r0, r2
    36a8:	4798      	blx	r3
    36aa:	4603      	mov	r3, r0
    36ac:	2b00      	cmp	r3, #0
    36ae:	d002      	beq.n	36b6 <timer_start+0x46>
		return ERR_DENIED;
    36b0:	f06f 0310 	mvn.w	r3, #16
    36b4:	e007      	b.n	36c6 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    36b6:	687b      	ldr	r3, [r7, #4]
    36b8:	681b      	ldr	r3, [r3, #0]
    36ba:	689b      	ldr	r3, [r3, #8]
    36bc:	687a      	ldr	r2, [r7, #4]
    36be:	3204      	adds	r2, #4
    36c0:	4610      	mov	r0, r2
    36c2:	4798      	blx	r3

	return ERR_NONE;
    36c4:	2300      	movs	r3, #0
}
    36c6:	4618      	mov	r0, r3
    36c8:	3708      	adds	r7, #8
    36ca:	46bd      	mov	sp, r7
    36cc:	bd80      	pop	{r7, pc}
    36ce:	bf00      	nop
    36d0:	00010e34 	.word	0x00010e34
    36d4:	00004409 	.word	0x00004409

000036d8 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    36d8:	b580      	push	{r7, lr}
    36da:	b082      	sub	sp, #8
    36dc:	af00      	add	r7, sp, #0
    36de:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    36e0:	687b      	ldr	r3, [r7, #4]
    36e2:	2b00      	cmp	r3, #0
    36e4:	d005      	beq.n	36f2 <timer_stop+0x1a>
    36e6:	687b      	ldr	r3, [r7, #4]
    36e8:	681b      	ldr	r3, [r3, #0]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d001      	beq.n	36f2 <timer_stop+0x1a>
    36ee:	2301      	movs	r3, #1
    36f0:	e000      	b.n	36f4 <timer_stop+0x1c>
    36f2:	2300      	movs	r3, #0
    36f4:	f003 0301 	and.w	r3, r3, #1
    36f8:	b2db      	uxtb	r3, r3
    36fa:	2262      	movs	r2, #98	; 0x62
    36fc:	490f      	ldr	r1, [pc, #60]	; (373c <timer_stop+0x64>)
    36fe:	4618      	mov	r0, r3
    3700:	4b0f      	ldr	r3, [pc, #60]	; (3740 <timer_stop+0x68>)
    3702:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    3704:	687b      	ldr	r3, [r7, #4]
    3706:	681b      	ldr	r3, [r3, #0]
    3708:	699b      	ldr	r3, [r3, #24]
    370a:	687a      	ldr	r2, [r7, #4]
    370c:	3204      	adds	r2, #4
    370e:	4610      	mov	r0, r2
    3710:	4798      	blx	r3
    3712:	4603      	mov	r3, r0
    3714:	f083 0301 	eor.w	r3, r3, #1
    3718:	b2db      	uxtb	r3, r3
    371a:	2b00      	cmp	r3, #0
    371c:	d002      	beq.n	3724 <timer_stop+0x4c>
		return ERR_DENIED;
    371e:	f06f 0310 	mvn.w	r3, #16
    3722:	e007      	b.n	3734 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    3724:	687b      	ldr	r3, [r7, #4]
    3726:	681b      	ldr	r3, [r3, #0]
    3728:	68db      	ldr	r3, [r3, #12]
    372a:	687a      	ldr	r2, [r7, #4]
    372c:	3204      	adds	r2, #4
    372e:	4610      	mov	r0, r2
    3730:	4798      	blx	r3

	return ERR_NONE;
    3732:	2300      	movs	r3, #0
}
    3734:	4618      	mov	r0, r3
    3736:	3708      	adds	r7, #8
    3738:	46bd      	mov	sp, r7
    373a:	bd80      	pop	{r7, pc}
    373c:	00010e34 	.word	0x00010e34
    3740:	00004409 	.word	0x00004409

00003744 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    3744:	b580      	push	{r7, lr}
    3746:	b084      	sub	sp, #16
    3748:	af00      	add	r7, sp, #0
    374a:	6078      	str	r0, [r7, #4]
    374c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    374e:	687b      	ldr	r3, [r7, #4]
    3750:	2b00      	cmp	r3, #0
    3752:	d008      	beq.n	3766 <timer_add_task+0x22>
    3754:	683b      	ldr	r3, [r7, #0]
    3756:	2b00      	cmp	r3, #0
    3758:	d005      	beq.n	3766 <timer_add_task+0x22>
    375a:	687b      	ldr	r3, [r7, #4]
    375c:	681b      	ldr	r3, [r3, #0]
    375e:	2b00      	cmp	r3, #0
    3760:	d001      	beq.n	3766 <timer_add_task+0x22>
    3762:	2301      	movs	r3, #1
    3764:	e000      	b.n	3768 <timer_add_task+0x24>
    3766:	2300      	movs	r3, #0
    3768:	f003 0301 	and.w	r3, r3, #1
    376c:	b2db      	uxtb	r3, r3
    376e:	227b      	movs	r2, #123	; 0x7b
    3770:	492f      	ldr	r1, [pc, #188]	; (3830 <timer_add_task+0xec>)
    3772:	4618      	mov	r0, r3
    3774:	4b2f      	ldr	r3, [pc, #188]	; (3834 <timer_add_task+0xf0>)
    3776:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	7f1b      	ldrb	r3, [r3, #28]
    377c:	b2db      	uxtb	r3, r3
    377e:	f043 0301 	orr.w	r3, r3, #1
    3782:	b2da      	uxtb	r2, r3
    3784:	687b      	ldr	r3, [r7, #4]
    3786:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	3318      	adds	r3, #24
    378c:	6839      	ldr	r1, [r7, #0]
    378e:	4618      	mov	r0, r3
    3790:	4b29      	ldr	r3, [pc, #164]	; (3838 <timer_add_task+0xf4>)
    3792:	4798      	blx	r3
    3794:	4603      	mov	r3, r0
    3796:	2b00      	cmp	r3, #0
    3798:	d00f      	beq.n	37ba <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    379a:	687b      	ldr	r3, [r7, #4]
    379c:	7f1b      	ldrb	r3, [r3, #28]
    379e:	b2db      	uxtb	r3, r3
    37a0:	f023 0301 	bic.w	r3, r3, #1
    37a4:	b2da      	uxtb	r2, r3
    37a6:	687b      	ldr	r3, [r7, #4]
    37a8:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    37aa:	2280      	movs	r2, #128	; 0x80
    37ac:	4920      	ldr	r1, [pc, #128]	; (3830 <timer_add_task+0xec>)
    37ae:	2000      	movs	r0, #0
    37b0:	4b20      	ldr	r3, [pc, #128]	; (3834 <timer_add_task+0xf0>)
    37b2:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    37b4:	f06f 0311 	mvn.w	r3, #17
    37b8:	e035      	b.n	3826 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    37ba:	687b      	ldr	r3, [r7, #4]
    37bc:	695a      	ldr	r2, [r3, #20]
    37be:	683b      	ldr	r3, [r7, #0]
    37c0:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    37c2:	687b      	ldr	r3, [r7, #4]
    37c4:	f103 0018 	add.w	r0, r3, #24
    37c8:	687b      	ldr	r3, [r7, #4]
    37ca:	695b      	ldr	r3, [r3, #20]
    37cc:	461a      	mov	r2, r3
    37ce:	6839      	ldr	r1, [r7, #0]
    37d0:	4b1a      	ldr	r3, [pc, #104]	; (383c <timer_add_task+0xf8>)
    37d2:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    37d4:	687b      	ldr	r3, [r7, #4]
    37d6:	7f1b      	ldrb	r3, [r3, #28]
    37d8:	b2db      	uxtb	r3, r3
    37da:	f023 0301 	bic.w	r3, r3, #1
    37de:	b2da      	uxtb	r2, r3
    37e0:	687b      	ldr	r3, [r7, #4]
    37e2:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	7f1b      	ldrb	r3, [r3, #28]
    37e8:	b2db      	uxtb	r3, r3
    37ea:	f003 0302 	and.w	r3, r3, #2
    37ee:	2b00      	cmp	r3, #0
    37f0:	d018      	beq.n	3824 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    37f2:	f107 030c 	add.w	r3, r7, #12
    37f6:	4618      	mov	r0, r3
    37f8:	4b11      	ldr	r3, [pc, #68]	; (3840 <timer_add_task+0xfc>)
    37fa:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    37fc:	687b      	ldr	r3, [r7, #4]
    37fe:	7f1b      	ldrb	r3, [r3, #28]
    3800:	b2db      	uxtb	r3, r3
    3802:	f023 0302 	bic.w	r3, r3, #2
    3806:	b2da      	uxtb	r2, r3
    3808:	687b      	ldr	r3, [r7, #4]
    380a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    380c:	687b      	ldr	r3, [r7, #4]
    380e:	681b      	ldr	r3, [r3, #0]
    3810:	69db      	ldr	r3, [r3, #28]
    3812:	687a      	ldr	r2, [r7, #4]
    3814:	3204      	adds	r2, #4
    3816:	4610      	mov	r0, r2
    3818:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    381a:	f107 030c 	add.w	r3, r7, #12
    381e:	4618      	mov	r0, r3
    3820:	4b08      	ldr	r3, [pc, #32]	; (3844 <timer_add_task+0x100>)
    3822:	4798      	blx	r3
	}

	return ERR_NONE;
    3824:	2300      	movs	r3, #0
}
    3826:	4618      	mov	r0, r3
    3828:	3710      	adds	r7, #16
    382a:	46bd      	mov	sp, r7
    382c:	bd80      	pop	{r7, pc}
    382e:	bf00      	nop
    3830:	00010e34 	.word	0x00010e34
    3834:	00004409 	.word	0x00004409
    3838:	00004431 	.word	0x00004431
    383c:	00003945 	.word	0x00003945
    3840:	00002989 	.word	0x00002989
    3844:	000029af 	.word	0x000029af

00003848 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    3848:	b580      	push	{r7, lr}
    384a:	b084      	sub	sp, #16
    384c:	af00      	add	r7, sp, #0
    384e:	6078      	str	r0, [r7, #4]
    3850:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    3852:	687b      	ldr	r3, [r7, #4]
    3854:	2b00      	cmp	r3, #0
    3856:	d008      	beq.n	386a <timer_remove_task+0x22>
    3858:	683b      	ldr	r3, [r7, #0]
    385a:	2b00      	cmp	r3, #0
    385c:	d005      	beq.n	386a <timer_remove_task+0x22>
    385e:	687b      	ldr	r3, [r7, #4]
    3860:	681b      	ldr	r3, [r3, #0]
    3862:	2b00      	cmp	r3, #0
    3864:	d001      	beq.n	386a <timer_remove_task+0x22>
    3866:	2301      	movs	r3, #1
    3868:	e000      	b.n	386c <timer_remove_task+0x24>
    386a:	2300      	movs	r3, #0
    386c:	f003 0301 	and.w	r3, r3, #1
    3870:	b2db      	uxtb	r3, r3
    3872:	2296      	movs	r2, #150	; 0x96
    3874:	492d      	ldr	r1, [pc, #180]	; (392c <timer_remove_task+0xe4>)
    3876:	4618      	mov	r0, r3
    3878:	4b2d      	ldr	r3, [pc, #180]	; (3930 <timer_remove_task+0xe8>)
    387a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    387c:	687b      	ldr	r3, [r7, #4]
    387e:	7f1b      	ldrb	r3, [r3, #28]
    3880:	b2db      	uxtb	r3, r3
    3882:	f043 0301 	orr.w	r3, r3, #1
    3886:	b2da      	uxtb	r2, r3
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    388c:	687b      	ldr	r3, [r7, #4]
    388e:	3318      	adds	r3, #24
    3890:	6839      	ldr	r1, [r7, #0]
    3892:	4618      	mov	r0, r3
    3894:	4b27      	ldr	r3, [pc, #156]	; (3934 <timer_remove_task+0xec>)
    3896:	4798      	blx	r3
    3898:	4603      	mov	r3, r0
    389a:	f083 0301 	eor.w	r3, r3, #1
    389e:	b2db      	uxtb	r3, r3
    38a0:	2b00      	cmp	r3, #0
    38a2:	d00f      	beq.n	38c4 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	7f1b      	ldrb	r3, [r3, #28]
    38a8:	b2db      	uxtb	r3, r3
    38aa:	f023 0301 	bic.w	r3, r3, #1
    38ae:	b2da      	uxtb	r2, r3
    38b0:	687b      	ldr	r3, [r7, #4]
    38b2:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    38b4:	229b      	movs	r2, #155	; 0x9b
    38b6:	491d      	ldr	r1, [pc, #116]	; (392c <timer_remove_task+0xe4>)
    38b8:	2000      	movs	r0, #0
    38ba:	4b1d      	ldr	r3, [pc, #116]	; (3930 <timer_remove_task+0xe8>)
    38bc:	4798      	blx	r3
		return ERR_NOT_FOUND;
    38be:	f06f 0309 	mvn.w	r3, #9
    38c2:	e02e      	b.n	3922 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    38c4:	687b      	ldr	r3, [r7, #4]
    38c6:	3318      	adds	r3, #24
    38c8:	6839      	ldr	r1, [r7, #0]
    38ca:	4618      	mov	r0, r3
    38cc:	4b1a      	ldr	r3, [pc, #104]	; (3938 <timer_remove_task+0xf0>)
    38ce:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    38d0:	687b      	ldr	r3, [r7, #4]
    38d2:	7f1b      	ldrb	r3, [r3, #28]
    38d4:	b2db      	uxtb	r3, r3
    38d6:	f023 0301 	bic.w	r3, r3, #1
    38da:	b2da      	uxtb	r2, r3
    38dc:	687b      	ldr	r3, [r7, #4]
    38de:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    38e0:	687b      	ldr	r3, [r7, #4]
    38e2:	7f1b      	ldrb	r3, [r3, #28]
    38e4:	b2db      	uxtb	r3, r3
    38e6:	f003 0302 	and.w	r3, r3, #2
    38ea:	2b00      	cmp	r3, #0
    38ec:	d018      	beq.n	3920 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    38ee:	f107 030c 	add.w	r3, r7, #12
    38f2:	4618      	mov	r0, r3
    38f4:	4b11      	ldr	r3, [pc, #68]	; (393c <timer_remove_task+0xf4>)
    38f6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    38f8:	687b      	ldr	r3, [r7, #4]
    38fa:	7f1b      	ldrb	r3, [r3, #28]
    38fc:	b2db      	uxtb	r3, r3
    38fe:	f023 0302 	bic.w	r3, r3, #2
    3902:	b2da      	uxtb	r2, r3
    3904:	687b      	ldr	r3, [r7, #4]
    3906:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3908:	687b      	ldr	r3, [r7, #4]
    390a:	681b      	ldr	r3, [r3, #0]
    390c:	69db      	ldr	r3, [r3, #28]
    390e:	687a      	ldr	r2, [r7, #4]
    3910:	3204      	adds	r2, #4
    3912:	4610      	mov	r0, r2
    3914:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3916:	f107 030c 	add.w	r3, r7, #12
    391a:	4618      	mov	r0, r3
    391c:	4b08      	ldr	r3, [pc, #32]	; (3940 <timer_remove_task+0xf8>)
    391e:	4798      	blx	r3
	}

	return ERR_NONE;
    3920:	2300      	movs	r3, #0
}
    3922:	4618      	mov	r0, r3
    3924:	3710      	adds	r7, #16
    3926:	46bd      	mov	sp, r7
    3928:	bd80      	pop	{r7, pc}
    392a:	bf00      	nop
    392c:	00010e34 	.word	0x00010e34
    3930:	00004409 	.word	0x00004409
    3934:	00004431 	.word	0x00004431
    3938:	00004593 	.word	0x00004593
    393c:	00002989 	.word	0x00002989
    3940:	000029af 	.word	0x000029af

00003944 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    3944:	b580      	push	{r7, lr}
    3946:	b088      	sub	sp, #32
    3948:	af00      	add	r7, sp, #0
    394a:	60f8      	str	r0, [r7, #12]
    394c:	60b9      	str	r1, [r7, #8]
    394e:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    3950:	2300      	movs	r3, #0
    3952:	61bb      	str	r3, [r7, #24]
    3954:	68f8      	ldr	r0, [r7, #12]
    3956:	4b23      	ldr	r3, [pc, #140]	; (39e4 <timer_add_timer_task+0xa0>)
    3958:	4798      	blx	r3
    395a:	6138      	str	r0, [r7, #16]

	if (!head) {
    395c:	693b      	ldr	r3, [r7, #16]
    395e:	2b00      	cmp	r3, #0
    3960:	d104      	bne.n	396c <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    3962:	68b9      	ldr	r1, [r7, #8]
    3964:	68f8      	ldr	r0, [r7, #12]
    3966:	4b20      	ldr	r3, [pc, #128]	; (39e8 <timer_add_timer_task+0xa4>)
    3968:	4798      	blx	r3
		return;
    396a:	e037      	b.n	39dc <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    396c:	693b      	ldr	r3, [r7, #16]
    396e:	61fb      	str	r3, [r7, #28]
    3970:	e022      	b.n	39b8 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    3972:	69fb      	ldr	r3, [r7, #28]
    3974:	685a      	ldr	r2, [r3, #4]
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	429a      	cmp	r2, r3
    397a:	d808      	bhi.n	398e <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    397c:	69fb      	ldr	r3, [r7, #28]
    397e:	689a      	ldr	r2, [r3, #8]
    3980:	69fb      	ldr	r3, [r7, #28]
    3982:	6859      	ldr	r1, [r3, #4]
    3984:	687b      	ldr	r3, [r7, #4]
    3986:	1acb      	subs	r3, r1, r3
    3988:	4413      	add	r3, r2
    398a:	617b      	str	r3, [r7, #20]
    398c:	e009      	b.n	39a2 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    398e:	69fb      	ldr	r3, [r7, #28]
    3990:	689a      	ldr	r2, [r3, #8]
    3992:	69fb      	ldr	r3, [r7, #28]
    3994:	685b      	ldr	r3, [r3, #4]
    3996:	441a      	add	r2, r3
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	425b      	negs	r3, r3
    399c:	4413      	add	r3, r2
    399e:	3301      	adds	r3, #1
    39a0:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    39a2:	68bb      	ldr	r3, [r7, #8]
    39a4:	689a      	ldr	r2, [r3, #8]
    39a6:	697b      	ldr	r3, [r7, #20]
    39a8:	429a      	cmp	r2, r3
    39aa:	d909      	bls.n	39c0 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    39ac:	69fb      	ldr	r3, [r7, #28]
    39ae:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    39b0:	69f8      	ldr	r0, [r7, #28]
    39b2:	4b0e      	ldr	r3, [pc, #56]	; (39ec <timer_add_timer_task+0xa8>)
    39b4:	4798      	blx	r3
    39b6:	61f8      	str	r0, [r7, #28]
    39b8:	69fb      	ldr	r3, [r7, #28]
    39ba:	2b00      	cmp	r3, #0
    39bc:	d1d9      	bne.n	3972 <timer_add_timer_task+0x2e>
    39be:	e000      	b.n	39c2 <timer_add_timer_task+0x7e>
			break;
    39c0:	bf00      	nop
	}

	if (it == head) {
    39c2:	69fa      	ldr	r2, [r7, #28]
    39c4:	693b      	ldr	r3, [r7, #16]
    39c6:	429a      	cmp	r2, r3
    39c8:	d104      	bne.n	39d4 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    39ca:	68b9      	ldr	r1, [r7, #8]
    39cc:	68f8      	ldr	r0, [r7, #12]
    39ce:	4b06      	ldr	r3, [pc, #24]	; (39e8 <timer_add_timer_task+0xa4>)
    39d0:	4798      	blx	r3
    39d2:	e003      	b.n	39dc <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    39d4:	68b9      	ldr	r1, [r7, #8]
    39d6:	69b8      	ldr	r0, [r7, #24]
    39d8:	4b05      	ldr	r3, [pc, #20]	; (39f0 <timer_add_timer_task+0xac>)
    39da:	4798      	blx	r3
	}
}
    39dc:	3720      	adds	r7, #32
    39de:	46bd      	mov	sp, r7
    39e0:	bd80      	pop	{r7, pc}
    39e2:	bf00      	nop
    39e4:	000035c9 	.word	0x000035c9
    39e8:	00004469 	.word	0x00004469
    39ec:	000035e1 	.word	0x000035e1
    39f0:	000044c1 	.word	0x000044c1

000039f4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    39f4:	b580      	push	{r7, lr}
    39f6:	b086      	sub	sp, #24
    39f8:	af00      	add	r7, sp, #0
    39fa:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	3b04      	subs	r3, #4
    3a00:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    3a02:	693b      	ldr	r3, [r7, #16]
    3a04:	3318      	adds	r3, #24
    3a06:	4618      	mov	r0, r3
    3a08:	4b27      	ldr	r3, [pc, #156]	; (3aa8 <timer_process_counted+0xb4>)
    3a0a:	4798      	blx	r3
    3a0c:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    3a0e:	693b      	ldr	r3, [r7, #16]
    3a10:	695b      	ldr	r3, [r3, #20]
    3a12:	1c5a      	adds	r2, r3, #1
    3a14:	693b      	ldr	r3, [r7, #16]
    3a16:	615a      	str	r2, [r3, #20]
    3a18:	693b      	ldr	r3, [r7, #16]
    3a1a:	695b      	ldr	r3, [r3, #20]
    3a1c:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    3a1e:	693b      	ldr	r3, [r7, #16]
    3a20:	7f1b      	ldrb	r3, [r3, #28]
    3a22:	b2db      	uxtb	r3, r3
    3a24:	f003 0301 	and.w	r3, r3, #1
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d106      	bne.n	3a3a <timer_process_counted+0x46>
    3a2c:	693b      	ldr	r3, [r7, #16]
    3a2e:	7f1b      	ldrb	r3, [r3, #28]
    3a30:	b2db      	uxtb	r3, r3
    3a32:	f003 0302 	and.w	r3, r3, #2
    3a36:	2b00      	cmp	r3, #0
    3a38:	d027      	beq.n	3a8a <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3a3a:	693b      	ldr	r3, [r7, #16]
    3a3c:	7f1b      	ldrb	r3, [r3, #28]
    3a3e:	b2db      	uxtb	r3, r3
    3a40:	f043 0302 	orr.w	r3, r3, #2
    3a44:	b2da      	uxtb	r2, r3
    3a46:	693b      	ldr	r3, [r7, #16]
    3a48:	771a      	strb	r2, [r3, #28]
		return;
    3a4a:	e029      	b.n	3aa0 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    3a4c:	697b      	ldr	r3, [r7, #20]
    3a4e:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    3a50:	693b      	ldr	r3, [r7, #16]
    3a52:	3318      	adds	r3, #24
    3a54:	4618      	mov	r0, r3
    3a56:	4b15      	ldr	r3, [pc, #84]	; (3aac <timer_process_counted+0xb8>)
    3a58:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3a5a:	68bb      	ldr	r3, [r7, #8]
    3a5c:	7c1b      	ldrb	r3, [r3, #16]
    3a5e:	2b01      	cmp	r3, #1
    3a60:	d109      	bne.n	3a76 <timer_process_counted+0x82>
			tmp->time_label = time;
    3a62:	68bb      	ldr	r3, [r7, #8]
    3a64:	68fa      	ldr	r2, [r7, #12]
    3a66:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    3a68:	693b      	ldr	r3, [r7, #16]
    3a6a:	3318      	adds	r3, #24
    3a6c:	68fa      	ldr	r2, [r7, #12]
    3a6e:	68b9      	ldr	r1, [r7, #8]
    3a70:	4618      	mov	r0, r3
    3a72:	4b0f      	ldr	r3, [pc, #60]	; (3ab0 <timer_process_counted+0xbc>)
    3a74:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    3a76:	693b      	ldr	r3, [r7, #16]
    3a78:	3318      	adds	r3, #24
    3a7a:	4618      	mov	r0, r3
    3a7c:	4b0a      	ldr	r3, [pc, #40]	; (3aa8 <timer_process_counted+0xb4>)
    3a7e:	4798      	blx	r3
    3a80:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    3a82:	68bb      	ldr	r3, [r7, #8]
    3a84:	68db      	ldr	r3, [r3, #12]
    3a86:	68b8      	ldr	r0, [r7, #8]
    3a88:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3a8a:	697b      	ldr	r3, [r7, #20]
    3a8c:	2b00      	cmp	r3, #0
    3a8e:	d007      	beq.n	3aa0 <timer_process_counted+0xac>
    3a90:	697b      	ldr	r3, [r7, #20]
    3a92:	685b      	ldr	r3, [r3, #4]
    3a94:	68fa      	ldr	r2, [r7, #12]
    3a96:	1ad2      	subs	r2, r2, r3
    3a98:	697b      	ldr	r3, [r7, #20]
    3a9a:	689b      	ldr	r3, [r3, #8]
    3a9c:	429a      	cmp	r2, r3
    3a9e:	d2d5      	bcs.n	3a4c <timer_process_counted+0x58>
	}
}
    3aa0:	3718      	adds	r7, #24
    3aa2:	46bd      	mov	sp, r7
    3aa4:	bd80      	pop	{r7, pc}
    3aa6:	bf00      	nop
    3aa8:	000035c9 	.word	0x000035c9
    3aac:	00004561 	.word	0x00004561
    3ab0:	00003945 	.word	0x00003945

00003ab4 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    3ab4:	b480      	push	{r7}
    3ab6:	b085      	sub	sp, #20
    3ab8:	af00      	add	r7, sp, #0
    3aba:	4603      	mov	r3, r0
    3abc:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3abe:	2300      	movs	r3, #0
    3ac0:	73fb      	strb	r3, [r7, #15]
    3ac2:	e029      	b.n	3b18 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ac8:	4a19      	ldr	r2, [pc, #100]	; (3b30 <_usb_d_find_ep+0x7c>)
    3aca:	015b      	lsls	r3, r3, #5
    3acc:	4413      	add	r3, r2
    3ace:	3301      	adds	r3, #1
    3ad0:	781b      	ldrb	r3, [r3, #0]
    3ad2:	79fa      	ldrb	r2, [r7, #7]
    3ad4:	429a      	cmp	r2, r3
    3ad6:	d102      	bne.n	3ade <_usb_d_find_ep+0x2a>
			return i;
    3ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3adc:	e022      	b.n	3b24 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    3ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ae2:	4a13      	ldr	r2, [pc, #76]	; (3b30 <_usb_d_find_ep+0x7c>)
    3ae4:	015b      	lsls	r3, r3, #5
    3ae6:	4413      	add	r3, r2
    3ae8:	781b      	ldrb	r3, [r3, #0]
    3aea:	2b00      	cmp	r3, #0
    3aec:	d10e      	bne.n	3b0c <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3aee:	79fb      	ldrb	r3, [r7, #7]
    3af0:	f003 030f 	and.w	r3, r3, #15
    3af4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3af8:	490d      	ldr	r1, [pc, #52]	; (3b30 <_usb_d_find_ep+0x7c>)
    3afa:	0152      	lsls	r2, r2, #5
    3afc:	440a      	add	r2, r1
    3afe:	3201      	adds	r2, #1
    3b00:	7812      	ldrb	r2, [r2, #0]
    3b02:	4293      	cmp	r3, r2
    3b04:	d102      	bne.n	3b0c <_usb_d_find_ep+0x58>
			return i;
    3b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b0a:	e00b      	b.n	3b24 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b10:	b2db      	uxtb	r3, r3
    3b12:	3301      	adds	r3, #1
    3b14:	b2db      	uxtb	r3, r3
    3b16:	73fb      	strb	r3, [r7, #15]
    3b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b1c:	2b03      	cmp	r3, #3
    3b1e:	ddd1      	ble.n	3ac4 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3b20:	f04f 33ff 	mov.w	r3, #4294967295
}
    3b24:	4618      	mov	r0, r3
    3b26:	3714      	adds	r7, #20
    3b28:	46bd      	mov	sp, r7
    3b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b2e:	4770      	bx	lr
    3b30:	20000cf8 	.word	0x20000cf8

00003b34 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    3b34:	b580      	push	{r7, lr}
    3b36:	b088      	sub	sp, #32
    3b38:	af00      	add	r7, sp, #0
    3b3a:	60ba      	str	r2, [r7, #8]
    3b3c:	607b      	str	r3, [r7, #4]
    3b3e:	4603      	mov	r3, r0
    3b40:	73fb      	strb	r3, [r7, #15]
    3b42:	460b      	mov	r3, r1
    3b44:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    3b46:	68bb      	ldr	r3, [r7, #8]
    3b48:	617b      	str	r3, [r7, #20]
    3b4a:	687b      	ldr	r3, [r7, #4]
    3b4c:	61bb      	str	r3, [r7, #24]
    3b4e:	7bbb      	ldrb	r3, [r7, #14]
    3b50:	2b00      	cmp	r3, #0
    3b52:	d004      	beq.n	3b5e <_usb_d_trans+0x2a>
    3b54:	7bfb      	ldrb	r3, [r7, #15]
    3b56:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3b5a:	b2db      	uxtb	r3, r3
    3b5c:	e003      	b.n	3b66 <_usb_d_trans+0x32>
    3b5e:	7bfb      	ldrb	r3, [r7, #15]
    3b60:	f003 030f 	and.w	r3, r3, #15
    3b64:	b2db      	uxtb	r3, r3
    3b66:	773b      	strb	r3, [r7, #28]
    3b68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3b6c:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3b6e:	f107 0314 	add.w	r3, r7, #20
    3b72:	4618      	mov	r0, r3
    3b74:	4b03      	ldr	r3, [pc, #12]	; (3b84 <_usb_d_trans+0x50>)
    3b76:	4798      	blx	r3
    3b78:	4603      	mov	r3, r0
}
    3b7a:	4618      	mov	r0, r3
    3b7c:	3720      	adds	r7, #32
    3b7e:	46bd      	mov	sp, r7
    3b80:	bd80      	pop	{r7, pc}
    3b82:	bf00      	nop
    3b84:	0000b635 	.word	0x0000b635

00003b88 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3b88:	b480      	push	{r7}
    3b8a:	b085      	sub	sp, #20
    3b8c:	af00      	add	r7, sp, #0
    3b8e:	60f8      	str	r0, [r7, #12]
    3b90:	60b9      	str	r1, [r7, #8]
    3b92:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3b94:	2300      	movs	r3, #0
}
    3b96:	4618      	mov	r0, r3
    3b98:	3714      	adds	r7, #20
    3b9a:	46bd      	mov	sp, r7
    3b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ba0:	4770      	bx	lr
	...

00003ba4 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3ba4:	b580      	push	{r7, lr}
    3ba6:	b086      	sub	sp, #24
    3ba8:	af00      	add	r7, sp, #0
    3baa:	4603      	mov	r3, r0
    3bac:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3bae:	79fb      	ldrb	r3, [r7, #7]
    3bb0:	4618      	mov	r0, r3
    3bb2:	4b2a      	ldr	r3, [pc, #168]	; (3c5c <usb_d_cb_trans_setup+0xb8>)
    3bb4:	4798      	blx	r3
    3bb6:	4603      	mov	r3, r0
    3bb8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3bba:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3bbe:	015b      	lsls	r3, r3, #5
    3bc0:	4a27      	ldr	r2, [pc, #156]	; (3c60 <usb_d_cb_trans_setup+0xbc>)
    3bc2:	4413      	add	r3, r2
    3bc4:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    3bc6:	693b      	ldr	r3, [r7, #16]
    3bc8:	330c      	adds	r3, #12
    3bca:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3bcc:	79fb      	ldrb	r3, [r7, #7]
    3bce:	68f9      	ldr	r1, [r7, #12]
    3bd0:	4618      	mov	r0, r3
    3bd2:	4b24      	ldr	r3, [pc, #144]	; (3c64 <usb_d_cb_trans_setup+0xc0>)
    3bd4:	4798      	blx	r3
    3bd6:	4603      	mov	r3, r0
    3bd8:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    3bda:	7afb      	ldrb	r3, [r7, #11]
    3bdc:	2b08      	cmp	r3, #8
    3bde:	d00d      	beq.n	3bfc <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3be0:	79fb      	ldrb	r3, [r7, #7]
    3be2:	2101      	movs	r1, #1
    3be4:	4618      	mov	r0, r3
    3be6:	4b20      	ldr	r3, [pc, #128]	; (3c68 <usb_d_cb_trans_setup+0xc4>)
    3be8:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3bea:	79fb      	ldrb	r3, [r7, #7]
    3bec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3bf0:	b2db      	uxtb	r3, r3
    3bf2:	2101      	movs	r1, #1
    3bf4:	4618      	mov	r0, r3
    3bf6:	4b1c      	ldr	r3, [pc, #112]	; (3c68 <usb_d_cb_trans_setup+0xc4>)
    3bf8:	4798      	blx	r3
		return;
    3bfa:	e02b      	b.n	3c54 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3bfc:	79fb      	ldrb	r3, [r7, #7]
    3bfe:	2100      	movs	r1, #0
    3c00:	4618      	mov	r0, r3
    3c02:	4b19      	ldr	r3, [pc, #100]	; (3c68 <usb_d_cb_trans_setup+0xc4>)
    3c04:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    3c06:	79fb      	ldrb	r3, [r7, #7]
    3c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3c0c:	b2db      	uxtb	r3, r3
    3c0e:	2100      	movs	r1, #0
    3c10:	4618      	mov	r0, r3
    3c12:	4b15      	ldr	r3, [pc, #84]	; (3c68 <usb_d_cb_trans_setup+0xc4>)
    3c14:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    3c16:	693b      	ldr	r3, [r7, #16]
    3c18:	2201      	movs	r2, #1
    3c1a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3c1c:	693b      	ldr	r3, [r7, #16]
    3c1e:	695b      	ldr	r3, [r3, #20]
    3c20:	79fa      	ldrb	r2, [r7, #7]
    3c22:	68f9      	ldr	r1, [r7, #12]
    3c24:	4610      	mov	r0, r2
    3c26:	4798      	blx	r3
    3c28:	4603      	mov	r3, r0
    3c2a:	f083 0301 	eor.w	r3, r3, #1
    3c2e:	b2db      	uxtb	r3, r3
    3c30:	2b00      	cmp	r3, #0
    3c32:	d00f      	beq.n	3c54 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3c34:	693b      	ldr	r3, [r7, #16]
    3c36:	2205      	movs	r2, #5
    3c38:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3c3a:	79fb      	ldrb	r3, [r7, #7]
    3c3c:	2101      	movs	r1, #1
    3c3e:	4618      	mov	r0, r3
    3c40:	4b09      	ldr	r3, [pc, #36]	; (3c68 <usb_d_cb_trans_setup+0xc4>)
    3c42:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3c44:	79fb      	ldrb	r3, [r7, #7]
    3c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3c4a:	b2db      	uxtb	r3, r3
    3c4c:	2101      	movs	r1, #1
    3c4e:	4618      	mov	r0, r3
    3c50:	4b05      	ldr	r3, [pc, #20]	; (3c68 <usb_d_cb_trans_setup+0xc4>)
    3c52:	4798      	blx	r3
	}
}
    3c54:	3718      	adds	r7, #24
    3c56:	46bd      	mov	sp, r7
    3c58:	bd80      	pop	{r7, pc}
    3c5a:	bf00      	nop
    3c5c:	00003ab5 	.word	0x00003ab5
    3c60:	20000cf8 	.word	0x20000cf8
    3c64:	0000b58d 	.word	0x0000b58d
    3c68:	0000b405 	.word	0x0000b405

00003c6c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3c6c:	b580      	push	{r7, lr}
    3c6e:	b084      	sub	sp, #16
    3c70:	af00      	add	r7, sp, #0
    3c72:	4603      	mov	r3, r0
    3c74:	6039      	str	r1, [r7, #0]
    3c76:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c78:	79fb      	ldrb	r3, [r7, #7]
    3c7a:	4618      	mov	r0, r3
    3c7c:	4b0d      	ldr	r3, [pc, #52]	; (3cb4 <usb_d_cb_trans_more+0x48>)
    3c7e:	4798      	blx	r3
    3c80:	4603      	mov	r3, r0
    3c82:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3c88:	015b      	lsls	r3, r3, #5
    3c8a:	4a0b      	ldr	r2, [pc, #44]	; (3cb8 <usb_d_cb_trans_more+0x4c>)
    3c8c:	4413      	add	r3, r2
    3c8e:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3c90:	68bb      	ldr	r3, [r7, #8]
    3c92:	789b      	ldrb	r3, [r3, #2]
    3c94:	2b03      	cmp	r3, #3
    3c96:	d107      	bne.n	3ca8 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3c98:	68bb      	ldr	r3, [r7, #8]
    3c9a:	699b      	ldr	r3, [r3, #24]
    3c9c:	79fa      	ldrb	r2, [r7, #7]
    3c9e:	6839      	ldr	r1, [r7, #0]
    3ca0:	4610      	mov	r0, r2
    3ca2:	4798      	blx	r3
    3ca4:	4603      	mov	r3, r0
    3ca6:	e000      	b.n	3caa <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3ca8:	2300      	movs	r3, #0
}
    3caa:	4618      	mov	r0, r3
    3cac:	3710      	adds	r7, #16
    3cae:	46bd      	mov	sp, r7
    3cb0:	bd80      	pop	{r7, pc}
    3cb2:	bf00      	nop
    3cb4:	00003ab5 	.word	0x00003ab5
    3cb8:	20000cf8 	.word	0x20000cf8

00003cbc <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3cbc:	b590      	push	{r4, r7, lr}
    3cbe:	b087      	sub	sp, #28
    3cc0:	af02      	add	r7, sp, #8
    3cc2:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	789b      	ldrb	r3, [r3, #2]
    3cc8:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	7b1b      	ldrb	r3, [r3, #12]
    3cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	bf14      	ite	ne
    3cd6:	2301      	movne	r3, #1
    3cd8:	2300      	moveq	r3, #0
    3cda:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3cdc:	7bfb      	ldrb	r3, [r7, #15]
    3cde:	2b03      	cmp	r3, #3
    3ce0:	d13a      	bne.n	3d58 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    3ce2:	687b      	ldr	r3, [r7, #4]
    3ce4:	69db      	ldr	r3, [r3, #28]
    3ce6:	687a      	ldr	r2, [r7, #4]
    3ce8:	7850      	ldrb	r0, [r2, #1]
    3cea:	687a      	ldr	r2, [r7, #4]
    3cec:	320c      	adds	r2, #12
    3cee:	2101      	movs	r1, #1
    3cf0:	4798      	blx	r3
    3cf2:	4603      	mov	r3, r0
    3cf4:	737b      	strb	r3, [r7, #13]
		if (err) {
    3cf6:	7b7b      	ldrb	r3, [r7, #13]
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d015      	beq.n	3d28 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3cfc:	687b      	ldr	r3, [r7, #4]
    3cfe:	2205      	movs	r2, #5
    3d00:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    3d02:	687b      	ldr	r3, [r7, #4]
    3d04:	2202      	movs	r2, #2
    3d06:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3d08:	7bbb      	ldrb	r3, [r7, #14]
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	d002      	beq.n	3d14 <usb_d_ctrl_trans_done+0x58>
    3d0e:	687b      	ldr	r3, [r7, #4]
    3d10:	785b      	ldrb	r3, [r3, #1]
    3d12:	e004      	b.n	3d1e <usb_d_ctrl_trans_done+0x62>
    3d14:	687b      	ldr	r3, [r7, #4]
    3d16:	785b      	ldrb	r3, [r3, #1]
    3d18:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3d1c:	b2db      	uxtb	r3, r3
    3d1e:	2101      	movs	r1, #1
    3d20:	4618      	mov	r0, r3
    3d22:	4b15      	ldr	r3, [pc, #84]	; (3d78 <usb_d_ctrl_trans_done+0xbc>)
    3d24:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    3d26:	e022      	b.n	3d6e <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3d28:	687b      	ldr	r3, [r7, #4]
    3d2a:	2204      	movs	r2, #4
    3d2c:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3d2e:	687b      	ldr	r3, [r7, #4]
    3d30:	7858      	ldrb	r0, [r3, #1]
    3d32:	7bbb      	ldrb	r3, [r7, #14]
    3d34:	2b00      	cmp	r3, #0
    3d36:	bf14      	ite	ne
    3d38:	2301      	movne	r3, #1
    3d3a:	2300      	moveq	r3, #0
    3d3c:	b2db      	uxtb	r3, r3
    3d3e:	f083 0301 	eor.w	r3, r3, #1
    3d42:	b2db      	uxtb	r3, r3
    3d44:	f003 0301 	and.w	r3, r3, #1
    3d48:	b2d9      	uxtb	r1, r3
    3d4a:	2301      	movs	r3, #1
    3d4c:	9300      	str	r3, [sp, #0]
    3d4e:	2300      	movs	r3, #0
    3d50:	2200      	movs	r2, #0
    3d52:	4c0a      	ldr	r4, [pc, #40]	; (3d7c <usb_d_ctrl_trans_done+0xc0>)
    3d54:	47a0      	blx	r4
}
    3d56:	e00a      	b.n	3d6e <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3d58:	687b      	ldr	r3, [r7, #4]
    3d5a:	69db      	ldr	r3, [r3, #28]
    3d5c:	687a      	ldr	r2, [r7, #4]
    3d5e:	7850      	ldrb	r0, [r2, #1]
    3d60:	687a      	ldr	r2, [r7, #4]
    3d62:	320c      	adds	r2, #12
    3d64:	2100      	movs	r1, #0
    3d66:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3d68:	687b      	ldr	r3, [r7, #4]
    3d6a:	2202      	movs	r2, #2
    3d6c:	709a      	strb	r2, [r3, #2]
}
    3d6e:	bf00      	nop
    3d70:	3714      	adds	r7, #20
    3d72:	46bd      	mov	sp, r7
    3d74:	bd90      	pop	{r4, r7, pc}
    3d76:	bf00      	nop
    3d78:	0000b405 	.word	0x0000b405
    3d7c:	00003b35 	.word	0x00003b35

00003d80 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3d80:	b580      	push	{r7, lr}
    3d82:	b086      	sub	sp, #24
    3d84:	af00      	add	r7, sp, #0
    3d86:	4603      	mov	r3, r0
    3d88:	60b9      	str	r1, [r7, #8]
    3d8a:	607a      	str	r2, [r7, #4]
    3d8c:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3d8e:	7bfb      	ldrb	r3, [r7, #15]
    3d90:	4618      	mov	r0, r3
    3d92:	4b2f      	ldr	r3, [pc, #188]	; (3e50 <_usb_d_cb_trans_done+0xd0>)
    3d94:	4798      	blx	r3
    3d96:	4603      	mov	r3, r0
    3d98:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3d9e:	015b      	lsls	r3, r3, #5
    3da0:	4a2c      	ldr	r2, [pc, #176]	; (3e54 <_usb_d_cb_trans_done+0xd4>)
    3da2:	4413      	add	r3, r2
    3da4:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    3da6:	68bb      	ldr	r3, [r7, #8]
    3da8:	2b00      	cmp	r3, #0
    3daa:	d10e      	bne.n	3dca <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3dac:	693b      	ldr	r3, [r7, #16]
    3dae:	2200      	movs	r2, #0
    3db0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3db2:	693b      	ldr	r3, [r7, #16]
    3db4:	781b      	ldrb	r3, [r3, #0]
    3db6:	2b00      	cmp	r3, #0
    3db8:	d103      	bne.n	3dc2 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3dba:	6938      	ldr	r0, [r7, #16]
    3dbc:	4b26      	ldr	r3, [pc, #152]	; (3e58 <_usb_d_cb_trans_done+0xd8>)
    3dbe:	4798      	blx	r3
			return;
    3dc0:	e043      	b.n	3e4a <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3dc2:	693b      	ldr	r3, [r7, #16]
    3dc4:	2201      	movs	r2, #1
    3dc6:	709a      	strb	r2, [r3, #2]
    3dc8:	e038      	b.n	3e3c <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3dca:	68bb      	ldr	r3, [r7, #8]
    3dcc:	2b01      	cmp	r3, #1
    3dce:	d113      	bne.n	3df8 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3dd0:	693b      	ldr	r3, [r7, #16]
    3dd2:	2202      	movs	r2, #2
    3dd4:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3dd6:	693b      	ldr	r3, [r7, #16]
    3dd8:	781b      	ldrb	r3, [r3, #0]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d108      	bne.n	3df0 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3dde:	693b      	ldr	r3, [r7, #16]
    3de0:	2202      	movs	r2, #2
    3de2:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3de4:	7bfb      	ldrb	r3, [r7, #15]
    3de6:	2100      	movs	r1, #0
    3de8:	4618      	mov	r0, r3
    3dea:	4b1c      	ldr	r3, [pc, #112]	; (3e5c <_usb_d_cb_trans_done+0xdc>)
    3dec:	4798      	blx	r3
    3dee:	e025      	b.n	3e3c <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3df0:	693b      	ldr	r3, [r7, #16]
    3df2:	2205      	movs	r2, #5
    3df4:	709a      	strb	r2, [r3, #2]
    3df6:	e021      	b.n	3e3c <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3df8:	68bb      	ldr	r3, [r7, #8]
    3dfa:	2b02      	cmp	r3, #2
    3dfc:	d10e      	bne.n	3e1c <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3dfe:	693b      	ldr	r3, [r7, #16]
    3e00:	2204      	movs	r2, #4
    3e02:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3e04:	693b      	ldr	r3, [r7, #16]
    3e06:	781b      	ldrb	r3, [r3, #0]
    3e08:	2b00      	cmp	r3, #0
    3e0a:	d103      	bne.n	3e14 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3e0c:	693b      	ldr	r3, [r7, #16]
    3e0e:	2202      	movs	r2, #2
    3e10:	709a      	strb	r2, [r3, #2]
			return;
    3e12:	e01a      	b.n	3e4a <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3e14:	693b      	ldr	r3, [r7, #16]
    3e16:	2201      	movs	r2, #1
    3e18:	709a      	strb	r2, [r3, #2]
    3e1a:	e00f      	b.n	3e3c <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3e1c:	68bb      	ldr	r3, [r7, #8]
    3e1e:	2b03      	cmp	r3, #3
    3e20:	d106      	bne.n	3e30 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3e22:	693b      	ldr	r3, [r7, #16]
    3e24:	2200      	movs	r2, #0
    3e26:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3e28:	693b      	ldr	r3, [r7, #16]
    3e2a:	2205      	movs	r2, #5
    3e2c:	70da      	strb	r2, [r3, #3]
    3e2e:	e005      	b.n	3e3c <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3e30:	693b      	ldr	r3, [r7, #16]
    3e32:	2206      	movs	r2, #6
    3e34:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3e36:	693b      	ldr	r3, [r7, #16]
    3e38:	2206      	movs	r2, #6
    3e3a:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3e3c:	693b      	ldr	r3, [r7, #16]
    3e3e:	69db      	ldr	r3, [r3, #28]
    3e40:	693a      	ldr	r2, [r7, #16]
    3e42:	78d1      	ldrb	r1, [r2, #3]
    3e44:	687a      	ldr	r2, [r7, #4]
    3e46:	7bf8      	ldrb	r0, [r7, #15]
    3e48:	4798      	blx	r3
}
    3e4a:	3718      	adds	r7, #24
    3e4c:	46bd      	mov	sp, r7
    3e4e:	bd80      	pop	{r7, pc}
    3e50:	00003ab5 	.word	0x00003ab5
    3e54:	20000cf8 	.word	0x20000cf8
    3e58:	00003cbd 	.word	0x00003cbd
    3e5c:	0000b405 	.word	0x0000b405

00003e60 <usb_d_init>:

int32_t usb_d_init(void)
{
    3e60:	b580      	push	{r7, lr}
    3e62:	b082      	sub	sp, #8
    3e64:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3e66:	4b21      	ldr	r3, [pc, #132]	; (3eec <usb_d_init+0x8c>)
    3e68:	4798      	blx	r3
    3e6a:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3e6c:	683b      	ldr	r3, [r7, #0]
    3e6e:	2b00      	cmp	r3, #0
    3e70:	da01      	bge.n	3e76 <usb_d_init+0x16>
		return rc;
    3e72:	683b      	ldr	r3, [r7, #0]
    3e74:	e036      	b.n	3ee4 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3e76:	2280      	movs	r2, #128	; 0x80
    3e78:	2100      	movs	r1, #0
    3e7a:	481d      	ldr	r0, [pc, #116]	; (3ef0 <usb_d_init+0x90>)
    3e7c:	4b1d      	ldr	r3, [pc, #116]	; (3ef4 <usb_d_init+0x94>)
    3e7e:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3e80:	2300      	movs	r3, #0
    3e82:	71fb      	strb	r3, [r7, #7]
    3e84:	e01e      	b.n	3ec4 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3e86:	79fb      	ldrb	r3, [r7, #7]
    3e88:	4a19      	ldr	r2, [pc, #100]	; (3ef0 <usb_d_init+0x90>)
    3e8a:	015b      	lsls	r3, r3, #5
    3e8c:	4413      	add	r3, r2
    3e8e:	3301      	adds	r3, #1
    3e90:	22ff      	movs	r2, #255	; 0xff
    3e92:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3e94:	79fb      	ldrb	r3, [r7, #7]
    3e96:	4a16      	ldr	r2, [pc, #88]	; (3ef0 <usb_d_init+0x90>)
    3e98:	015b      	lsls	r3, r3, #5
    3e9a:	4413      	add	r3, r2
    3e9c:	3314      	adds	r3, #20
    3e9e:	4a16      	ldr	r2, [pc, #88]	; (3ef8 <usb_d_init+0x98>)
    3ea0:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3ea2:	79fb      	ldrb	r3, [r7, #7]
    3ea4:	4a12      	ldr	r2, [pc, #72]	; (3ef0 <usb_d_init+0x90>)
    3ea6:	015b      	lsls	r3, r3, #5
    3ea8:	4413      	add	r3, r2
    3eaa:	3318      	adds	r3, #24
    3eac:	4a12      	ldr	r2, [pc, #72]	; (3ef8 <usb_d_init+0x98>)
    3eae:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3eb0:	79fb      	ldrb	r3, [r7, #7]
    3eb2:	4a0f      	ldr	r2, [pc, #60]	; (3ef0 <usb_d_init+0x90>)
    3eb4:	015b      	lsls	r3, r3, #5
    3eb6:	4413      	add	r3, r2
    3eb8:	331c      	adds	r3, #28
    3eba:	4a0f      	ldr	r2, [pc, #60]	; (3ef8 <usb_d_init+0x98>)
    3ebc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3ebe:	79fb      	ldrb	r3, [r7, #7]
    3ec0:	3301      	adds	r3, #1
    3ec2:	71fb      	strb	r3, [r7, #7]
    3ec4:	79fb      	ldrb	r3, [r7, #7]
    3ec6:	2b03      	cmp	r3, #3
    3ec8:	d9dd      	bls.n	3e86 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3eca:	490c      	ldr	r1, [pc, #48]	; (3efc <usb_d_init+0x9c>)
    3ecc:	2000      	movs	r0, #0
    3ece:	4b0c      	ldr	r3, [pc, #48]	; (3f00 <usb_d_init+0xa0>)
    3ed0:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3ed2:	490c      	ldr	r1, [pc, #48]	; (3f04 <usb_d_init+0xa4>)
    3ed4:	2001      	movs	r0, #1
    3ed6:	4b0a      	ldr	r3, [pc, #40]	; (3f00 <usb_d_init+0xa0>)
    3ed8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3eda:	490b      	ldr	r1, [pc, #44]	; (3f08 <usb_d_init+0xa8>)
    3edc:	2002      	movs	r0, #2
    3ede:	4b08      	ldr	r3, [pc, #32]	; (3f00 <usb_d_init+0xa0>)
    3ee0:	4798      	blx	r3
	return ERR_NONE;
    3ee2:	2300      	movs	r3, #0
}
    3ee4:	4618      	mov	r0, r3
    3ee6:	3708      	adds	r7, #8
    3ee8:	46bd      	mov	sp, r7
    3eea:	bd80      	pop	{r7, pc}
    3eec:	0000ac4d 	.word	0x0000ac4d
    3ef0:	20000cf8 	.word	0x20000cf8
    3ef4:	00010a7d 	.word	0x00010a7d
    3ef8:	00003b89 	.word	0x00003b89
    3efc:	00003ba5 	.word	0x00003ba5
    3f00:	0000b895 	.word	0x0000b895
    3f04:	00003c6d 	.word	0x00003c6d
    3f08:	00003d81 	.word	0x00003d81

00003f0c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3f0c:	b580      	push	{r7, lr}
    3f0e:	b082      	sub	sp, #8
    3f10:	af00      	add	r7, sp, #0
    3f12:	4603      	mov	r3, r0
    3f14:	6039      	str	r1, [r7, #0]
    3f16:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3f18:	79fb      	ldrb	r3, [r7, #7]
    3f1a:	6839      	ldr	r1, [r7, #0]
    3f1c:	4618      	mov	r0, r3
    3f1e:	4b03      	ldr	r3, [pc, #12]	; (3f2c <usb_d_register_callback+0x20>)
    3f20:	4798      	blx	r3
}
    3f22:	bf00      	nop
    3f24:	3708      	adds	r7, #8
    3f26:	46bd      	mov	sp, r7
    3f28:	bd80      	pop	{r7, pc}
    3f2a:	bf00      	nop
    3f2c:	0000b84d 	.word	0x0000b84d

00003f30 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3f30:	b580      	push	{r7, lr}
    3f32:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3f34:	4b02      	ldr	r3, [pc, #8]	; (3f40 <usb_d_enable+0x10>)
    3f36:	4798      	blx	r3
    3f38:	4603      	mov	r3, r0
}
    3f3a:	4618      	mov	r0, r3
    3f3c:	bd80      	pop	{r7, pc}
    3f3e:	bf00      	nop
    3f40:	0000ad3d 	.word	0x0000ad3d

00003f44 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3f44:	b580      	push	{r7, lr}
    3f46:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3f48:	4b01      	ldr	r3, [pc, #4]	; (3f50 <usb_d_attach+0xc>)
    3f4a:	4798      	blx	r3
}
    3f4c:	bf00      	nop
    3f4e:	bd80      	pop	{r7, pc}
    3f50:	0000adc1 	.word	0x0000adc1

00003f54 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3f54:	b580      	push	{r7, lr}
    3f56:	b082      	sub	sp, #8
    3f58:	af00      	add	r7, sp, #0
    3f5a:	4603      	mov	r3, r0
    3f5c:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3f5e:	79fb      	ldrb	r3, [r7, #7]
    3f60:	4618      	mov	r0, r3
    3f62:	4b03      	ldr	r3, [pc, #12]	; (3f70 <usb_d_set_address+0x1c>)
    3f64:	4798      	blx	r3
}
    3f66:	bf00      	nop
    3f68:	3708      	adds	r7, #8
    3f6a:	46bd      	mov	sp, r7
    3f6c:	bd80      	pop	{r7, pc}
    3f6e:	bf00      	nop
    3f70:	0000add5 	.word	0x0000add5

00003f74 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3f74:	b580      	push	{r7, lr}
    3f76:	b082      	sub	sp, #8
    3f78:	af00      	add	r7, sp, #0
    3f7a:	4603      	mov	r3, r0
    3f7c:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3f7e:	79fb      	ldrb	r3, [r7, #7]
    3f80:	b29b      	uxth	r3, r3
    3f82:	461a      	mov	r2, r3
    3f84:	2100      	movs	r1, #0
    3f86:	2000      	movs	r0, #0
    3f88:	4b03      	ldr	r3, [pc, #12]	; (3f98 <usb_d_ep0_init+0x24>)
    3f8a:	4798      	blx	r3
    3f8c:	4603      	mov	r3, r0
}
    3f8e:	4618      	mov	r0, r3
    3f90:	3708      	adds	r7, #8
    3f92:	46bd      	mov	sp, r7
    3f94:	bd80      	pop	{r7, pc}
    3f96:	bf00      	nop
    3f98:	00003f9d 	.word	0x00003f9d

00003f9c <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3f9c:	b580      	push	{r7, lr}
    3f9e:	b086      	sub	sp, #24
    3fa0:	af00      	add	r7, sp, #0
    3fa2:	4603      	mov	r3, r0
    3fa4:	71fb      	strb	r3, [r7, #7]
    3fa6:	460b      	mov	r3, r1
    3fa8:	71bb      	strb	r3, [r7, #6]
    3faa:	4613      	mov	r3, r2
    3fac:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3fae:	79fb      	ldrb	r3, [r7, #7]
    3fb0:	4618      	mov	r0, r3
    3fb2:	4b1e      	ldr	r3, [pc, #120]	; (402c <usb_d_ep_init+0x90>)
    3fb4:	4798      	blx	r3
    3fb6:	4603      	mov	r3, r0
    3fb8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3fbe:	015b      	lsls	r3, r3, #5
    3fc0:	4a1b      	ldr	r2, [pc, #108]	; (4030 <usb_d_ep_init+0x94>)
    3fc2:	4413      	add	r3, r2
    3fc4:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    3fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3fca:	2b00      	cmp	r3, #0
    3fcc:	db02      	blt.n	3fd4 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3fce:	f06f 0313 	mvn.w	r3, #19
    3fd2:	e027      	b.n	4024 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3fd4:	20ff      	movs	r0, #255	; 0xff
    3fd6:	4b15      	ldr	r3, [pc, #84]	; (402c <usb_d_ep_init+0x90>)
    3fd8:	4798      	blx	r3
    3fda:	4603      	mov	r3, r0
    3fdc:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3fe2:	2b00      	cmp	r3, #0
    3fe4:	da02      	bge.n	3fec <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    3fe6:	f06f 0314 	mvn.w	r3, #20
    3fea:	e01b      	b.n	4024 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3ff0:	015b      	lsls	r3, r3, #5
    3ff2:	4a0f      	ldr	r2, [pc, #60]	; (4030 <usb_d_ep_init+0x94>)
    3ff4:	4413      	add	r3, r2
    3ff6:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3ff8:	88ba      	ldrh	r2, [r7, #4]
    3ffa:	79b9      	ldrb	r1, [r7, #6]
    3ffc:	79fb      	ldrb	r3, [r7, #7]
    3ffe:	4618      	mov	r0, r3
    4000:	4b0c      	ldr	r3, [pc, #48]	; (4034 <usb_d_ep_init+0x98>)
    4002:	4798      	blx	r3
    4004:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    4006:	68fb      	ldr	r3, [r7, #12]
    4008:	2b00      	cmp	r3, #0
    400a:	da01      	bge.n	4010 <usb_d_ep_init+0x74>
		return rc;
    400c:	68fb      	ldr	r3, [r7, #12]
    400e:	e009      	b.n	4024 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    4010:	693b      	ldr	r3, [r7, #16]
    4012:	79fa      	ldrb	r2, [r7, #7]
    4014:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    4016:	79bb      	ldrb	r3, [r7, #6]
    4018:	f003 0303 	and.w	r3, r3, #3
    401c:	b2da      	uxtb	r2, r3
    401e:	693b      	ldr	r3, [r7, #16]
    4020:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    4022:	2300      	movs	r3, #0
}
    4024:	4618      	mov	r0, r3
    4026:	3718      	adds	r7, #24
    4028:	46bd      	mov	sp, r7
    402a:	bd80      	pop	{r7, pc}
    402c:	00003ab5 	.word	0x00003ab5
    4030:	20000cf8 	.word	0x20000cf8
    4034:	0000ae75 	.word	0x0000ae75

00004038 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    4038:	b580      	push	{r7, lr}
    403a:	b084      	sub	sp, #16
    403c:	af00      	add	r7, sp, #0
    403e:	4603      	mov	r3, r0
    4040:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4042:	79fb      	ldrb	r3, [r7, #7]
    4044:	4618      	mov	r0, r3
    4046:	4b0d      	ldr	r3, [pc, #52]	; (407c <usb_d_ep_deinit+0x44>)
    4048:	4798      	blx	r3
    404a:	4603      	mov	r3, r0
    404c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    404e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4052:	015b      	lsls	r3, r3, #5
    4054:	4a0a      	ldr	r2, [pc, #40]	; (4080 <usb_d_ep_deinit+0x48>)
    4056:	4413      	add	r3, r2
    4058:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    405a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    405e:	2b00      	cmp	r3, #0
    4060:	db07      	blt.n	4072 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    4062:	79fb      	ldrb	r3, [r7, #7]
    4064:	4618      	mov	r0, r3
    4066:	4b07      	ldr	r3, [pc, #28]	; (4084 <usb_d_ep_deinit+0x4c>)
    4068:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    406a:	68bb      	ldr	r3, [r7, #8]
    406c:	22ff      	movs	r2, #255	; 0xff
    406e:	705a      	strb	r2, [r3, #1]
    4070:	e000      	b.n	4074 <usb_d_ep_deinit+0x3c>
		return;
    4072:	bf00      	nop
}
    4074:	3710      	adds	r7, #16
    4076:	46bd      	mov	sp, r7
    4078:	bd80      	pop	{r7, pc}
    407a:	bf00      	nop
    407c:	00003ab5 	.word	0x00003ab5
    4080:	20000cf8 	.word	0x20000cf8
    4084:	0000afa9 	.word	0x0000afa9

00004088 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    4088:	b580      	push	{r7, lr}
    408a:	b086      	sub	sp, #24
    408c:	af00      	add	r7, sp, #0
    408e:	4603      	mov	r3, r0
    4090:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4092:	79fb      	ldrb	r3, [r7, #7]
    4094:	4618      	mov	r0, r3
    4096:	4b15      	ldr	r3, [pc, #84]	; (40ec <usb_d_ep_enable+0x64>)
    4098:	4798      	blx	r3
    409a:	4603      	mov	r3, r0
    409c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    409e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    40a2:	015b      	lsls	r3, r3, #5
    40a4:	4a12      	ldr	r2, [pc, #72]	; (40f0 <usb_d_ep_enable+0x68>)
    40a6:	4413      	add	r3, r2
    40a8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    40aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    40ae:	2b00      	cmp	r3, #0
    40b0:	da02      	bge.n	40b8 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    40b2:	f06f 0311 	mvn.w	r3, #17
    40b6:	e014      	b.n	40e2 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    40b8:	693b      	ldr	r3, [r7, #16]
    40ba:	781b      	ldrb	r3, [r3, #0]
    40bc:	2b00      	cmp	r3, #0
    40be:	d101      	bne.n	40c4 <usb_d_ep_enable+0x3c>
    40c0:	2202      	movs	r2, #2
    40c2:	e000      	b.n	40c6 <usb_d_ep_enable+0x3e>
    40c4:	2201      	movs	r2, #1
    40c6:	693b      	ldr	r3, [r7, #16]
    40c8:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    40ca:	79fb      	ldrb	r3, [r7, #7]
    40cc:	4618      	mov	r0, r3
    40ce:	4b09      	ldr	r3, [pc, #36]	; (40f4 <usb_d_ep_enable+0x6c>)
    40d0:	4798      	blx	r3
    40d2:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    40d4:	68fb      	ldr	r3, [r7, #12]
    40d6:	2b00      	cmp	r3, #0
    40d8:	da02      	bge.n	40e0 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    40da:	693b      	ldr	r3, [r7, #16]
    40dc:	2200      	movs	r2, #0
    40de:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    40e0:	68fb      	ldr	r3, [r7, #12]
}
    40e2:	4618      	mov	r0, r3
    40e4:	3718      	adds	r7, #24
    40e6:	46bd      	mov	sp, r7
    40e8:	bd80      	pop	{r7, pc}
    40ea:	bf00      	nop
    40ec:	00003ab5 	.word	0x00003ab5
    40f0:	20000cf8 	.word	0x20000cf8
    40f4:	0000b08d 	.word	0x0000b08d

000040f8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    40f8:	b590      	push	{r4, r7, lr}
    40fa:	b08d      	sub	sp, #52	; 0x34
    40fc:	af02      	add	r7, sp, #8
    40fe:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    4100:	687b      	ldr	r3, [r7, #4]
    4102:	7a1b      	ldrb	r3, [r3, #8]
    4104:	4618      	mov	r0, r3
    4106:	4b51      	ldr	r3, [pc, #324]	; (424c <usb_d_ep_transfer+0x154>)
    4108:	4798      	blx	r3
    410a:	4603      	mov	r3, r0
    410c:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    410e:	f997 301f 	ldrsb.w	r3, [r7, #31]
    4112:	015b      	lsls	r3, r3, #5
    4114:	4a4e      	ldr	r2, [pc, #312]	; (4250 <usb_d_ep_transfer+0x158>)
    4116:	4413      	add	r3, r2
    4118:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    411a:	687b      	ldr	r3, [r7, #4]
    411c:	7a1b      	ldrb	r3, [r3, #8]
    411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4122:	2b00      	cmp	r3, #0
    4124:	bf14      	ite	ne
    4126:	2301      	movne	r3, #1
    4128:	2300      	moveq	r3, #0
    412a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    412e:	687b      	ldr	r3, [r7, #4]
    4130:	7a5b      	ldrb	r3, [r3, #9]
    4132:	2b00      	cmp	r3, #0
    4134:	bf14      	ite	ne
    4136:	2301      	movne	r3, #1
    4138:	2300      	moveq	r3, #0
    413a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    413e:	687b      	ldr	r3, [r7, #4]
    4140:	685b      	ldr	r3, [r3, #4]
    4142:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    4144:	f997 301f 	ldrsb.w	r3, [r7, #31]
    4148:	2b00      	cmp	r3, #0
    414a:	da02      	bge.n	4152 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    414c:	f06f 0311 	mvn.w	r3, #17
    4150:	e077      	b.n	4242 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    4152:	f107 0308 	add.w	r3, r7, #8
    4156:	4618      	mov	r0, r3
    4158:	4b3e      	ldr	r3, [pc, #248]	; (4254 <usb_d_ep_transfer+0x15c>)
    415a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    415c:	69bb      	ldr	r3, [r7, #24]
    415e:	789b      	ldrb	r3, [r3, #2]
    4160:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    4162:	7bfb      	ldrb	r3, [r7, #15]
    4164:	b2db      	uxtb	r3, r3
    4166:	2b01      	cmp	r3, #1
    4168:	d10c      	bne.n	4184 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    416a:	69bb      	ldr	r3, [r7, #24]
    416c:	2203      	movs	r2, #3
    416e:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    4170:	f107 0308 	add.w	r3, r7, #8
    4174:	4618      	mov	r0, r3
    4176:	4b38      	ldr	r3, [pc, #224]	; (4258 <usb_d_ep_transfer+0x160>)
    4178:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    417a:	69bb      	ldr	r3, [r7, #24]
    417c:	781b      	ldrb	r3, [r3, #0]
    417e:	2b00      	cmp	r3, #0
    4180:	d151      	bne.n	4226 <usb_d_ep_transfer+0x12e>
    4182:	e017      	b.n	41b4 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    4184:	f107 0308 	add.w	r3, r7, #8
    4188:	4618      	mov	r0, r3
    418a:	4b33      	ldr	r3, [pc, #204]	; (4258 <usb_d_ep_transfer+0x160>)
    418c:	4798      	blx	r3
		switch (state) {
    418e:	7bfb      	ldrb	r3, [r7, #15]
    4190:	b2db      	uxtb	r3, r3
    4192:	2b05      	cmp	r3, #5
    4194:	d004      	beq.n	41a0 <usb_d_ep_transfer+0xa8>
    4196:	2b06      	cmp	r3, #6
    4198:	d004      	beq.n	41a4 <usb_d_ep_transfer+0xac>
    419a:	2b00      	cmp	r3, #0
    419c:	d005      	beq.n	41aa <usb_d_ep_transfer+0xb2>
    419e:	e007      	b.n	41b0 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    41a0:	2302      	movs	r3, #2
    41a2:	e04e      	b.n	4242 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    41a4:	f06f 030f 	mvn.w	r3, #15
    41a8:	e04b      	b.n	4242 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    41aa:	f06f 0312 	mvn.w	r3, #18
    41ae:	e048      	b.n	4242 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    41b0:	2301      	movs	r3, #1
    41b2:	e046      	b.n	4242 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    41b4:	69bb      	ldr	r3, [r7, #24]
    41b6:	7c9b      	ldrb	r3, [r3, #18]
    41b8:	b29a      	uxth	r2, r3
    41ba:	69bb      	ldr	r3, [r7, #24]
    41bc:	7cdb      	ldrb	r3, [r3, #19]
    41be:	b29b      	uxth	r3, r3
    41c0:	021b      	lsls	r3, r3, #8
    41c2:	b29b      	uxth	r3, r3
    41c4:	4413      	add	r3, r2
    41c6:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    41c8:	8afb      	ldrh	r3, [r7, #22]
    41ca:	2b00      	cmp	r3, #0
    41cc:	d10b      	bne.n	41e6 <usb_d_ep_transfer+0xee>
			dir                 = true;
    41ce:	2301      	movs	r3, #1
    41d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    41d4:	2300      	movs	r3, #0
    41d6:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    41d8:	2301      	movs	r3, #1
    41da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    41de:	69bb      	ldr	r3, [r7, #24]
    41e0:	2204      	movs	r2, #4
    41e2:	709a      	strb	r2, [r3, #2]
    41e4:	e01f      	b.n	4226 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    41e6:	69bb      	ldr	r3, [r7, #24]
    41e8:	7b1b      	ldrb	r3, [r3, #12]
    41ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    41ee:	2b00      	cmp	r3, #0
    41f0:	bf14      	ite	ne
    41f2:	2301      	movne	r3, #1
    41f4:	2300      	moveq	r3, #0
    41f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    41fa:	8afa      	ldrh	r2, [r7, #22]
    41fc:	6a3b      	ldr	r3, [r7, #32]
    41fe:	429a      	cmp	r2, r3
    4200:	d201      	bcs.n	4206 <usb_d_ep_transfer+0x10e>
				len = req_len;
    4202:	8afb      	ldrh	r3, [r7, #22]
    4204:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    4206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    420a:	2b00      	cmp	r3, #0
    420c:	d008      	beq.n	4220 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    420e:	8afa      	ldrh	r2, [r7, #22]
    4210:	6a3b      	ldr	r3, [r7, #32]
    4212:	429a      	cmp	r2, r3
    4214:	bf8c      	ite	hi
    4216:	2301      	movhi	r3, #1
    4218:	2300      	movls	r3, #0
    421a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    421e:	e002      	b.n	4226 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    4220:	2300      	movs	r3, #0
    4222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    4226:	687b      	ldr	r3, [r7, #4]
    4228:	7a18      	ldrb	r0, [r3, #8]
    422a:	687b      	ldr	r3, [r7, #4]
    422c:	681a      	ldr	r2, [r3, #0]
    422e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    4232:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    4236:	9300      	str	r3, [sp, #0]
    4238:	6a3b      	ldr	r3, [r7, #32]
    423a:	4c08      	ldr	r4, [pc, #32]	; (425c <usb_d_ep_transfer+0x164>)
    423c:	47a0      	blx	r4
    423e:	6138      	str	r0, [r7, #16]
	return rc;
    4240:	693b      	ldr	r3, [r7, #16]
}
    4242:	4618      	mov	r0, r3
    4244:	372c      	adds	r7, #44	; 0x2c
    4246:	46bd      	mov	sp, r7
    4248:	bd90      	pop	{r4, r7, pc}
    424a:	bf00      	nop
    424c:	00003ab5 	.word	0x00003ab5
    4250:	20000cf8 	.word	0x20000cf8
    4254:	00002989 	.word	0x00002989
    4258:	000029af 	.word	0x000029af
    425c:	00003b35 	.word	0x00003b35

00004260 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    4260:	b580      	push	{r7, lr}
    4262:	b084      	sub	sp, #16
    4264:	af00      	add	r7, sp, #0
    4266:	4603      	mov	r3, r0
    4268:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    426a:	79fb      	ldrb	r3, [r7, #7]
    426c:	4618      	mov	r0, r3
    426e:	4b0e      	ldr	r3, [pc, #56]	; (42a8 <usb_d_ep_abort+0x48>)
    4270:	4798      	blx	r3
    4272:	4603      	mov	r3, r0
    4274:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4276:	f997 300f 	ldrsb.w	r3, [r7, #15]
    427a:	015b      	lsls	r3, r3, #5
    427c:	4a0b      	ldr	r2, [pc, #44]	; (42ac <usb_d_ep_abort+0x4c>)
    427e:	4413      	add	r3, r2
    4280:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    4282:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4286:	2b00      	cmp	r3, #0
    4288:	db0a      	blt.n	42a0 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    428a:	79fb      	ldrb	r3, [r7, #7]
    428c:	4618      	mov	r0, r3
    428e:	4b08      	ldr	r3, [pc, #32]	; (42b0 <usb_d_ep_abort+0x50>)
    4290:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4292:	68bb      	ldr	r3, [r7, #8]
    4294:	2201      	movs	r2, #1
    4296:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    4298:	68bb      	ldr	r3, [r7, #8]
    429a:	2204      	movs	r2, #4
    429c:	70da      	strb	r2, [r3, #3]
    429e:	e000      	b.n	42a2 <usb_d_ep_abort+0x42>
		return;
    42a0:	bf00      	nop
}
    42a2:	3710      	adds	r7, #16
    42a4:	46bd      	mov	sp, r7
    42a6:	bd80      	pop	{r7, pc}
    42a8:	00003ab5 	.word	0x00003ab5
    42ac:	20000cf8 	.word	0x20000cf8
    42b0:	0000b7f9 	.word	0x0000b7f9

000042b4 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    42b4:	b580      	push	{r7, lr}
    42b6:	b086      	sub	sp, #24
    42b8:	af00      	add	r7, sp, #0
    42ba:	4603      	mov	r3, r0
    42bc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    42be:	79fb      	ldrb	r3, [r7, #7]
    42c0:	4618      	mov	r0, r3
    42c2:	4b1a      	ldr	r3, [pc, #104]	; (432c <_usb_d_ep_halt_clr+0x78>)
    42c4:	4798      	blx	r3
    42c6:	4603      	mov	r3, r0
    42c8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    42ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    42ce:	015b      	lsls	r3, r3, #5
    42d0:	4a17      	ldr	r2, [pc, #92]	; (4330 <_usb_d_ep_halt_clr+0x7c>)
    42d2:	4413      	add	r3, r2
    42d4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    42d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    42da:	2b00      	cmp	r3, #0
    42dc:	da02      	bge.n	42e4 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    42de:	f06f 0311 	mvn.w	r3, #17
    42e2:	e01f      	b.n	4324 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    42e4:	79fb      	ldrb	r3, [r7, #7]
    42e6:	2102      	movs	r1, #2
    42e8:	4618      	mov	r0, r3
    42ea:	4b12      	ldr	r3, [pc, #72]	; (4334 <_usb_d_ep_halt_clr+0x80>)
    42ec:	4798      	blx	r3
    42ee:	4603      	mov	r3, r0
    42f0:	2b00      	cmp	r3, #0
    42f2:	d016      	beq.n	4322 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    42f4:	79fb      	ldrb	r3, [r7, #7]
    42f6:	2100      	movs	r1, #0
    42f8:	4618      	mov	r0, r3
    42fa:	4b0e      	ldr	r3, [pc, #56]	; (4334 <_usb_d_ep_halt_clr+0x80>)
    42fc:	4798      	blx	r3
    42fe:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    4300:	68fb      	ldr	r3, [r7, #12]
    4302:	2b00      	cmp	r3, #0
    4304:	da01      	bge.n	430a <_usb_d_ep_halt_clr+0x56>
			return rc;
    4306:	68fb      	ldr	r3, [r7, #12]
    4308:	e00c      	b.n	4324 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    430a:	693b      	ldr	r3, [r7, #16]
    430c:	2201      	movs	r2, #1
    430e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    4310:	693b      	ldr	r3, [r7, #16]
    4312:	2203      	movs	r2, #3
    4314:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    4316:	693b      	ldr	r3, [r7, #16]
    4318:	69db      	ldr	r3, [r3, #28]
    431a:	79f8      	ldrb	r0, [r7, #7]
    431c:	2200      	movs	r2, #0
    431e:	2103      	movs	r1, #3
    4320:	4798      	blx	r3
	}
	return ERR_NONE;
    4322:	2300      	movs	r3, #0
}
    4324:	4618      	mov	r0, r3
    4326:	3718      	adds	r7, #24
    4328:	46bd      	mov	sp, r7
    432a:	bd80      	pop	{r7, pc}
    432c:	00003ab5 	.word	0x00003ab5
    4330:	20000cf8 	.word	0x20000cf8
    4334:	0000b405 	.word	0x0000b405

00004338 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    4338:	b580      	push	{r7, lr}
    433a:	b082      	sub	sp, #8
    433c:	af00      	add	r7, sp, #0
    433e:	4603      	mov	r3, r0
    4340:	460a      	mov	r2, r1
    4342:	71fb      	strb	r3, [r7, #7]
    4344:	4613      	mov	r3, r2
    4346:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    4348:	79bb      	ldrb	r3, [r7, #6]
    434a:	2b00      	cmp	r3, #0
    434c:	d105      	bne.n	435a <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    434e:	79fb      	ldrb	r3, [r7, #7]
    4350:	4618      	mov	r0, r3
    4352:	4b0c      	ldr	r3, [pc, #48]	; (4384 <usb_d_ep_halt+0x4c>)
    4354:	4798      	blx	r3
    4356:	4603      	mov	r3, r0
    4358:	e00f      	b.n	437a <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    435a:	79bb      	ldrb	r3, [r7, #6]
    435c:	2b01      	cmp	r3, #1
    435e:	d106      	bne.n	436e <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4360:	79fb      	ldrb	r3, [r7, #7]
    4362:	2101      	movs	r1, #1
    4364:	4618      	mov	r0, r3
    4366:	4b08      	ldr	r3, [pc, #32]	; (4388 <usb_d_ep_halt+0x50>)
    4368:	4798      	blx	r3
    436a:	4603      	mov	r3, r0
    436c:	e005      	b.n	437a <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    436e:	79fb      	ldrb	r3, [r7, #7]
    4370:	2102      	movs	r1, #2
    4372:	4618      	mov	r0, r3
    4374:	4b04      	ldr	r3, [pc, #16]	; (4388 <usb_d_ep_halt+0x50>)
    4376:	4798      	blx	r3
    4378:	4603      	mov	r3, r0
	}
}
    437a:	4618      	mov	r0, r3
    437c:	3708      	adds	r7, #8
    437e:	46bd      	mov	sp, r7
    4380:	bd80      	pop	{r7, pc}
    4382:	bf00      	nop
    4384:	000042b5 	.word	0x000042b5
    4388:	0000b405 	.word	0x0000b405

0000438c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    438c:	b580      	push	{r7, lr}
    438e:	b086      	sub	sp, #24
    4390:	af00      	add	r7, sp, #0
    4392:	4603      	mov	r3, r0
    4394:	603a      	str	r2, [r7, #0]
    4396:	71fb      	strb	r3, [r7, #7]
    4398:	460b      	mov	r3, r1
    439a:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    439c:	79fb      	ldrb	r3, [r7, #7]
    439e:	4618      	mov	r0, r3
    43a0:	4b16      	ldr	r3, [pc, #88]	; (43fc <usb_d_ep_register_callback+0x70>)
    43a2:	4798      	blx	r3
    43a4:	4603      	mov	r3, r0
    43a6:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    43a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    43ac:	015b      	lsls	r3, r3, #5
    43ae:	4a14      	ldr	r2, [pc, #80]	; (4400 <usb_d_ep_register_callback+0x74>)
    43b0:	4413      	add	r3, r2
    43b2:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    43b4:	683b      	ldr	r3, [r7, #0]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d001      	beq.n	43be <usb_d_ep_register_callback+0x32>
    43ba:	683b      	ldr	r3, [r7, #0]
    43bc:	e000      	b.n	43c0 <usb_d_ep_register_callback+0x34>
    43be:	4b11      	ldr	r3, [pc, #68]	; (4404 <usb_d_ep_register_callback+0x78>)
    43c0:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    43c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    43c6:	2b00      	cmp	r3, #0
    43c8:	db13      	blt.n	43f2 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    43ca:	79bb      	ldrb	r3, [r7, #6]
    43cc:	2b01      	cmp	r3, #1
    43ce:	d008      	beq.n	43e2 <usb_d_ep_register_callback+0x56>
    43d0:	2b02      	cmp	r3, #2
    43d2:	d00a      	beq.n	43ea <usb_d_ep_register_callback+0x5e>
    43d4:	2b00      	cmp	r3, #0
    43d6:	d000      	beq.n	43da <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    43d8:	e00c      	b.n	43f4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    43da:	693b      	ldr	r3, [r7, #16]
    43dc:	68fa      	ldr	r2, [r7, #12]
    43de:	615a      	str	r2, [r3, #20]
		break;
    43e0:	e008      	b.n	43f4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    43e2:	693b      	ldr	r3, [r7, #16]
    43e4:	68fa      	ldr	r2, [r7, #12]
    43e6:	619a      	str	r2, [r3, #24]
		break;
    43e8:	e004      	b.n	43f4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    43ea:	693b      	ldr	r3, [r7, #16]
    43ec:	68fa      	ldr	r2, [r7, #12]
    43ee:	61da      	str	r2, [r3, #28]
		break;
    43f0:	e000      	b.n	43f4 <usb_d_ep_register_callback+0x68>
		return;
    43f2:	bf00      	nop
	}
}
    43f4:	3718      	adds	r7, #24
    43f6:	46bd      	mov	sp, r7
    43f8:	bd80      	pop	{r7, pc}
    43fa:	bf00      	nop
    43fc:	00003ab5 	.word	0x00003ab5
    4400:	20000cf8 	.word	0x20000cf8
    4404:	00003b89 	.word	0x00003b89

00004408 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    4408:	b480      	push	{r7}
    440a:	b085      	sub	sp, #20
    440c:	af00      	add	r7, sp, #0
    440e:	4603      	mov	r3, r0
    4410:	60b9      	str	r1, [r7, #8]
    4412:	607a      	str	r2, [r7, #4]
    4414:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    4416:	7bfb      	ldrb	r3, [r7, #15]
    4418:	f083 0301 	eor.w	r3, r3, #1
    441c:	b2db      	uxtb	r3, r3
    441e:	2b00      	cmp	r3, #0
    4420:	d000      	beq.n	4424 <assert+0x1c>
		__asm("BKPT #0");
    4422:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    4424:	bf00      	nop
    4426:	3714      	adds	r7, #20
    4428:	46bd      	mov	sp, r7
    442a:	f85d 7b04 	ldr.w	r7, [sp], #4
    442e:	4770      	bx	lr

00004430 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    4430:	b480      	push	{r7}
    4432:	b085      	sub	sp, #20
    4434:	af00      	add	r7, sp, #0
    4436:	6078      	str	r0, [r7, #4]
    4438:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	681b      	ldr	r3, [r3, #0]
    443e:	60fb      	str	r3, [r7, #12]
    4440:	e008      	b.n	4454 <is_list_element+0x24>
		if (it == element) {
    4442:	68fa      	ldr	r2, [r7, #12]
    4444:	683b      	ldr	r3, [r7, #0]
    4446:	429a      	cmp	r2, r3
    4448:	d101      	bne.n	444e <is_list_element+0x1e>
			return true;
    444a:	2301      	movs	r3, #1
    444c:	e006      	b.n	445c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    444e:	68fb      	ldr	r3, [r7, #12]
    4450:	681b      	ldr	r3, [r3, #0]
    4452:	60fb      	str	r3, [r7, #12]
    4454:	68fb      	ldr	r3, [r7, #12]
    4456:	2b00      	cmp	r3, #0
    4458:	d1f3      	bne.n	4442 <is_list_element+0x12>
		}
	}

	return false;
    445a:	2300      	movs	r3, #0
}
    445c:	4618      	mov	r0, r3
    445e:	3714      	adds	r7, #20
    4460:	46bd      	mov	sp, r7
    4462:	f85d 7b04 	ldr.w	r7, [sp], #4
    4466:	4770      	bx	lr

00004468 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    4468:	b580      	push	{r7, lr}
    446a:	b082      	sub	sp, #8
    446c:	af00      	add	r7, sp, #0
    446e:	6078      	str	r0, [r7, #4]
    4470:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    4472:	6839      	ldr	r1, [r7, #0]
    4474:	6878      	ldr	r0, [r7, #4]
    4476:	4b0f      	ldr	r3, [pc, #60]	; (44b4 <list_insert_as_head+0x4c>)
    4478:	4798      	blx	r3
    447a:	4603      	mov	r3, r0
    447c:	2b00      	cmp	r3, #0
    447e:	bf14      	ite	ne
    4480:	2301      	movne	r3, #1
    4482:	2300      	moveq	r3, #0
    4484:	b2db      	uxtb	r3, r3
    4486:	f083 0301 	eor.w	r3, r3, #1
    448a:	b2db      	uxtb	r3, r3
    448c:	f003 0301 	and.w	r3, r3, #1
    4490:	b2db      	uxtb	r3, r3
    4492:	2239      	movs	r2, #57	; 0x39
    4494:	4908      	ldr	r1, [pc, #32]	; (44b8 <list_insert_as_head+0x50>)
    4496:	4618      	mov	r0, r3
    4498:	4b08      	ldr	r3, [pc, #32]	; (44bc <list_insert_as_head+0x54>)
    449a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	681a      	ldr	r2, [r3, #0]
    44a0:	683b      	ldr	r3, [r7, #0]
    44a2:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    44a4:	687b      	ldr	r3, [r7, #4]
    44a6:	683a      	ldr	r2, [r7, #0]
    44a8:	601a      	str	r2, [r3, #0]
}
    44aa:	bf00      	nop
    44ac:	3708      	adds	r7, #8
    44ae:	46bd      	mov	sp, r7
    44b0:	bd80      	pop	{r7, pc}
    44b2:	bf00      	nop
    44b4:	00004431 	.word	0x00004431
    44b8:	00010e4c 	.word	0x00010e4c
    44bc:	00004409 	.word	0x00004409

000044c0 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    44c0:	b480      	push	{r7}
    44c2:	b083      	sub	sp, #12
    44c4:	af00      	add	r7, sp, #0
    44c6:	6078      	str	r0, [r7, #4]
    44c8:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    44ca:	687b      	ldr	r3, [r7, #4]
    44cc:	681a      	ldr	r2, [r3, #0]
    44ce:	683b      	ldr	r3, [r7, #0]
    44d0:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    44d2:	687b      	ldr	r3, [r7, #4]
    44d4:	683a      	ldr	r2, [r7, #0]
    44d6:	601a      	str	r2, [r3, #0]
}
    44d8:	bf00      	nop
    44da:	370c      	adds	r7, #12
    44dc:	46bd      	mov	sp, r7
    44de:	f85d 7b04 	ldr.w	r7, [sp], #4
    44e2:	4770      	bx	lr

000044e4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    44e4:	b580      	push	{r7, lr}
    44e6:	b084      	sub	sp, #16
    44e8:	af00      	add	r7, sp, #0
    44ea:	6078      	str	r0, [r7, #4]
    44ec:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    44ee:	687b      	ldr	r3, [r7, #4]
    44f0:	681b      	ldr	r3, [r3, #0]
    44f2:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    44f4:	6839      	ldr	r1, [r7, #0]
    44f6:	6878      	ldr	r0, [r7, #4]
    44f8:	4b16      	ldr	r3, [pc, #88]	; (4554 <list_insert_at_end+0x70>)
    44fa:	4798      	blx	r3
    44fc:	4603      	mov	r3, r0
    44fe:	2b00      	cmp	r3, #0
    4500:	bf14      	ite	ne
    4502:	2301      	movne	r3, #1
    4504:	2300      	moveq	r3, #0
    4506:	b2db      	uxtb	r3, r3
    4508:	f083 0301 	eor.w	r3, r3, #1
    450c:	b2db      	uxtb	r3, r3
    450e:	f003 0301 	and.w	r3, r3, #1
    4512:	b2db      	uxtb	r3, r3
    4514:	224f      	movs	r2, #79	; 0x4f
    4516:	4910      	ldr	r1, [pc, #64]	; (4558 <list_insert_at_end+0x74>)
    4518:	4618      	mov	r0, r3
    451a:	4b10      	ldr	r3, [pc, #64]	; (455c <list_insert_at_end+0x78>)
    451c:	4798      	blx	r3

	if (!list->head) {
    451e:	687b      	ldr	r3, [r7, #4]
    4520:	681b      	ldr	r3, [r3, #0]
    4522:	2b00      	cmp	r3, #0
    4524:	d109      	bne.n	453a <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    4526:	687b      	ldr	r3, [r7, #4]
    4528:	683a      	ldr	r2, [r7, #0]
    452a:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    452c:	683b      	ldr	r3, [r7, #0]
    452e:	2200      	movs	r2, #0
    4530:	601a      	str	r2, [r3, #0]
		return;
    4532:	e00c      	b.n	454e <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    4534:	68fb      	ldr	r3, [r7, #12]
    4536:	681b      	ldr	r3, [r3, #0]
    4538:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    453a:	68fb      	ldr	r3, [r7, #12]
    453c:	681b      	ldr	r3, [r3, #0]
    453e:	2b00      	cmp	r3, #0
    4540:	d1f8      	bne.n	4534 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    4542:	68fb      	ldr	r3, [r7, #12]
    4544:	683a      	ldr	r2, [r7, #0]
    4546:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    4548:	683b      	ldr	r3, [r7, #0]
    454a:	2200      	movs	r2, #0
    454c:	601a      	str	r2, [r3, #0]
}
    454e:	3710      	adds	r7, #16
    4550:	46bd      	mov	sp, r7
    4552:	bd80      	pop	{r7, pc}
    4554:	00004431 	.word	0x00004431
    4558:	00010e4c 	.word	0x00010e4c
    455c:	00004409 	.word	0x00004409

00004560 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    4560:	b480      	push	{r7}
    4562:	b085      	sub	sp, #20
    4564:	af00      	add	r7, sp, #0
    4566:	6078      	str	r0, [r7, #4]
	if (list->head) {
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	681b      	ldr	r3, [r3, #0]
    456c:	2b00      	cmp	r3, #0
    456e:	d009      	beq.n	4584 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    4570:	687b      	ldr	r3, [r7, #4]
    4572:	681b      	ldr	r3, [r3, #0]
    4574:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    4576:	687b      	ldr	r3, [r7, #4]
    4578:	681b      	ldr	r3, [r3, #0]
    457a:	681a      	ldr	r2, [r3, #0]
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    4580:	68fb      	ldr	r3, [r7, #12]
    4582:	e000      	b.n	4586 <list_remove_head+0x26>
	}

	return NULL;
    4584:	2300      	movs	r3, #0
}
    4586:	4618      	mov	r0, r3
    4588:	3714      	adds	r7, #20
    458a:	46bd      	mov	sp, r7
    458c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4590:	4770      	bx	lr

00004592 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    4592:	b480      	push	{r7}
    4594:	b085      	sub	sp, #20
    4596:	af00      	add	r7, sp, #0
    4598:	6078      	str	r0, [r7, #4]
    459a:	6039      	str	r1, [r7, #0]
	if (!element) {
    459c:	683b      	ldr	r3, [r7, #0]
    459e:	2b00      	cmp	r3, #0
    45a0:	d101      	bne.n	45a6 <list_delete_element+0x14>
		return false;
    45a2:	2300      	movs	r3, #0
    45a4:	e024      	b.n	45f0 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    45a6:	687b      	ldr	r3, [r7, #4]
    45a8:	681a      	ldr	r2, [r3, #0]
    45aa:	683b      	ldr	r3, [r7, #0]
    45ac:	429a      	cmp	r2, r3
    45ae:	d106      	bne.n	45be <list_delete_element+0x2c>
		list->head = list->head->next;
    45b0:	687b      	ldr	r3, [r7, #4]
    45b2:	681b      	ldr	r3, [r3, #0]
    45b4:	681a      	ldr	r2, [r3, #0]
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	601a      	str	r2, [r3, #0]
		return true;
    45ba:	2301      	movs	r3, #1
    45bc:	e018      	b.n	45f0 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	681b      	ldr	r3, [r3, #0]
    45c2:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    45c4:	e002      	b.n	45cc <list_delete_element+0x3a>
			it = it->next;
    45c6:	68fb      	ldr	r3, [r7, #12]
    45c8:	681b      	ldr	r3, [r3, #0]
    45ca:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    45cc:	68fb      	ldr	r3, [r7, #12]
    45ce:	2b00      	cmp	r3, #0
    45d0:	d004      	beq.n	45dc <list_delete_element+0x4a>
    45d2:	68fb      	ldr	r3, [r7, #12]
    45d4:	681a      	ldr	r2, [r3, #0]
    45d6:	683b      	ldr	r3, [r7, #0]
    45d8:	429a      	cmp	r2, r3
    45da:	d1f4      	bne.n	45c6 <list_delete_element+0x34>
		}
		if (it) {
    45dc:	68fb      	ldr	r3, [r7, #12]
    45de:	2b00      	cmp	r3, #0
    45e0:	d005      	beq.n	45ee <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    45e2:	683b      	ldr	r3, [r7, #0]
    45e4:	681a      	ldr	r2, [r3, #0]
    45e6:	68fb      	ldr	r3, [r7, #12]
    45e8:	601a      	str	r2, [r3, #0]
			return true;
    45ea:	2301      	movs	r3, #1
    45ec:	e000      	b.n	45f0 <list_delete_element+0x5e>
		}
	}

	return false;
    45ee:	2300      	movs	r3, #0
}
    45f0:	4618      	mov	r0, r3
    45f2:	3714      	adds	r7, #20
    45f4:	46bd      	mov	sp, r7
    45f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    45fa:	4770      	bx	lr

000045fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    45fc:	b480      	push	{r7}
    45fe:	b083      	sub	sp, #12
    4600:	af00      	add	r7, sp, #0
    4602:	4603      	mov	r3, r0
    4604:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    460a:	2b00      	cmp	r3, #0
    460c:	db0b      	blt.n	4626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    460e:	4909      	ldr	r1, [pc, #36]	; (4634 <__NVIC_EnableIRQ+0x38>)
    4610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4614:	095b      	lsrs	r3, r3, #5
    4616:	88fa      	ldrh	r2, [r7, #6]
    4618:	f002 021f 	and.w	r2, r2, #31
    461c:	2001      	movs	r0, #1
    461e:	fa00 f202 	lsl.w	r2, r0, r2
    4622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4626:	bf00      	nop
    4628:	370c      	adds	r7, #12
    462a:	46bd      	mov	sp, r7
    462c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4630:	4770      	bx	lr
    4632:	bf00      	nop
    4634:	e000e100 	.word	0xe000e100

00004638 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4638:	b480      	push	{r7}
    463a:	b083      	sub	sp, #12
    463c:	af00      	add	r7, sp, #0
    463e:	4603      	mov	r3, r0
    4640:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4646:	2b00      	cmp	r3, #0
    4648:	db10      	blt.n	466c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    464a:	490b      	ldr	r1, [pc, #44]	; (4678 <__NVIC_DisableIRQ+0x40>)
    464c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4650:	095b      	lsrs	r3, r3, #5
    4652:	88fa      	ldrh	r2, [r7, #6]
    4654:	f002 021f 	and.w	r2, r2, #31
    4658:	2001      	movs	r0, #1
    465a:	fa00 f202 	lsl.w	r2, r0, r2
    465e:	3320      	adds	r3, #32
    4660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4668:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    466c:	bf00      	nop
    466e:	370c      	adds	r7, #12
    4670:	46bd      	mov	sp, r7
    4672:	f85d 7b04 	ldr.w	r7, [sp], #4
    4676:	4770      	bx	lr
    4678:	e000e100 	.word	0xe000e100

0000467c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    467c:	b480      	push	{r7}
    467e:	b083      	sub	sp, #12
    4680:	af00      	add	r7, sp, #0
    4682:	4603      	mov	r3, r0
    4684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    468a:	2b00      	cmp	r3, #0
    468c:	db0c      	blt.n	46a8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    468e:	4909      	ldr	r1, [pc, #36]	; (46b4 <__NVIC_ClearPendingIRQ+0x38>)
    4690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4694:	095b      	lsrs	r3, r3, #5
    4696:	88fa      	ldrh	r2, [r7, #6]
    4698:	f002 021f 	and.w	r2, r2, #31
    469c:	2001      	movs	r0, #1
    469e:	fa00 f202 	lsl.w	r2, r0, r2
    46a2:	3360      	adds	r3, #96	; 0x60
    46a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    46a8:	bf00      	nop
    46aa:	370c      	adds	r7, #12
    46ac:	46bd      	mov	sp, r7
    46ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    46b2:	4770      	bx	lr
    46b4:	e000e100 	.word	0xe000e100

000046b8 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    46b8:	b480      	push	{r7}
    46ba:	b083      	sub	sp, #12
    46bc:	af00      	add	r7, sp, #0
    46be:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    46c0:	687b      	ldr	r3, [r7, #4]
    46c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    46c4:	095b      	lsrs	r3, r3, #5
    46c6:	f003 0301 	and.w	r3, r3, #1
    46ca:	2b00      	cmp	r3, #0
    46cc:	bf14      	ite	ne
    46ce:	2301      	movne	r3, #1
    46d0:	2300      	moveq	r3, #0
    46d2:	b2db      	uxtb	r3, r3
}
    46d4:	4618      	mov	r0, r3
    46d6:	370c      	adds	r7, #12
    46d8:	46bd      	mov	sp, r7
    46da:	f85d 7b04 	ldr.w	r7, [sp], #4
    46de:	4770      	bx	lr

000046e0 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    46e0:	b480      	push	{r7}
    46e2:	b083      	sub	sp, #12
    46e4:	af00      	add	r7, sp, #0
    46e6:	6078      	str	r0, [r7, #4]
    46e8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    46ea:	687b      	ldr	r3, [r7, #4]
    46ec:	683a      	ldr	r2, [r7, #0]
    46ee:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    46f0:	bf00      	nop
    46f2:	370c      	adds	r7, #12
    46f4:	46bd      	mov	sp, r7
    46f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    46fa:	4770      	bx	lr

000046fc <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    46fc:	b480      	push	{r7}
    46fe:	b083      	sub	sp, #12
    4700:	af00      	add	r7, sp, #0
    4702:	6078      	str	r0, [r7, #4]
    4704:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    4706:	687b      	ldr	r3, [r7, #4]
    4708:	683a      	ldr	r2, [r7, #0]
    470a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    470c:	bf00      	nop
    470e:	370c      	adds	r7, #12
    4710:	46bd      	mov	sp, r7
    4712:	f85d 7b04 	ldr.w	r7, [sp], #4
    4716:	4770      	bx	lr

00004718 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    4718:	b480      	push	{r7}
    471a:	b083      	sub	sp, #12
    471c:	af00      	add	r7, sp, #0
    471e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    4720:	687b      	ldr	r3, [r7, #4]
    4722:	699b      	ldr	r3, [r3, #24]
    4724:	f043 0201 	orr.w	r2, r3, #1
    4728:	687b      	ldr	r3, [r7, #4]
    472a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    472c:	bf00      	nop
    472e:	370c      	adds	r7, #12
    4730:	46bd      	mov	sp, r7
    4732:	f85d 7b04 	ldr.w	r7, [sp], #4
    4736:	4770      	bx	lr

00004738 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    4738:	b480      	push	{r7}
    473a:	b085      	sub	sp, #20
    473c:	af00      	add	r7, sp, #0
    473e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    4740:	687b      	ldr	r3, [r7, #4]
    4742:	699b      	ldr	r3, [r3, #24]
    4744:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    4746:	68fb      	ldr	r3, [r7, #12]
    4748:	f003 0301 	and.w	r3, r3, #1
    474c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    474e:	68fb      	ldr	r3, [r7, #12]
    4750:	2b00      	cmp	r3, #0
    4752:	bf14      	ite	ne
    4754:	2301      	movne	r3, #1
    4756:	2300      	moveq	r3, #0
    4758:	b2db      	uxtb	r3, r3
}
    475a:	4618      	mov	r0, r3
    475c:	3714      	adds	r7, #20
    475e:	46bd      	mov	sp, r7
    4760:	f85d 7b04 	ldr.w	r7, [sp], #4
    4764:	4770      	bx	lr

00004766 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    4766:	b480      	push	{r7}
    4768:	b083      	sub	sp, #12
    476a:	af00      	add	r7, sp, #0
    476c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    476e:	687b      	ldr	r3, [r7, #4]
    4770:	699b      	ldr	r3, [r3, #24]
    4772:	f023 0201 	bic.w	r2, r3, #1
    4776:	687b      	ldr	r3, [r7, #4]
    4778:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    477a:	bf00      	nop
    477c:	370c      	adds	r7, #12
    477e:	46bd      	mov	sp, r7
    4780:	f85d 7b04 	ldr.w	r7, [sp], #4
    4784:	4770      	bx	lr

00004786 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    4786:	b480      	push	{r7}
    4788:	b083      	sub	sp, #12
    478a:	af00      	add	r7, sp, #0
    478c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    478e:	687b      	ldr	r3, [r7, #4]
    4790:	699b      	ldr	r3, [r3, #24]
    4792:	f043 0202 	orr.w	r2, r3, #2
    4796:	687b      	ldr	r3, [r7, #4]
    4798:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    479a:	bf00      	nop
    479c:	370c      	adds	r7, #12
    479e:	46bd      	mov	sp, r7
    47a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    47a4:	4770      	bx	lr

000047a6 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    47a6:	b480      	push	{r7}
    47a8:	b083      	sub	sp, #12
    47aa:	af00      	add	r7, sp, #0
    47ac:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    47ae:	687b      	ldr	r3, [r7, #4]
    47b0:	699b      	ldr	r3, [r3, #24]
    47b2:	f023 0202 	bic.w	r2, r3, #2
    47b6:	687b      	ldr	r3, [r7, #4]
    47b8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    47ba:	bf00      	nop
    47bc:	370c      	adds	r7, #12
    47be:	46bd      	mov	sp, r7
    47c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    47c4:	4770      	bx	lr

000047c6 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    47c6:	b480      	push	{r7}
    47c8:	b083      	sub	sp, #12
    47ca:	af00      	add	r7, sp, #0
    47cc:	6078      	str	r0, [r7, #4]
    47ce:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    47d0:	687b      	ldr	r3, [r7, #4]
    47d2:	699a      	ldr	r2, [r3, #24]
    47d4:	683b      	ldr	r3, [r7, #0]
    47d6:	431a      	orrs	r2, r3
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    47dc:	bf00      	nop
    47de:	370c      	adds	r7, #12
    47e0:	46bd      	mov	sp, r7
    47e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    47e6:	4770      	bx	lr

000047e8 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    47e8:	b480      	push	{r7}
    47ea:	b083      	sub	sp, #12
    47ec:	af00      	add	r7, sp, #0
    47ee:	6078      	str	r0, [r7, #4]
    47f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    47f2:	687b      	ldr	r3, [r7, #4]
    47f4:	683a      	ldr	r2, [r7, #0]
    47f6:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    47f8:	bf00      	nop
    47fa:	370c      	adds	r7, #12
    47fc:	46bd      	mov	sp, r7
    47fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4802:	4770      	bx	lr

00004804 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    4804:	b480      	push	{r7}
    4806:	b083      	sub	sp, #12
    4808:	af00      	add	r7, sp, #0
    480a:	6078      	str	r0, [r7, #4]
    480c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    480e:	687b      	ldr	r3, [r7, #4]
    4810:	683a      	ldr	r2, [r7, #0]
    4812:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    4814:	bf00      	nop
    4816:	370c      	adds	r7, #12
    4818:	46bd      	mov	sp, r7
    481a:	f85d 7b04 	ldr.w	r7, [sp], #4
    481e:	4770      	bx	lr

00004820 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    4820:	b480      	push	{r7}
    4822:	b083      	sub	sp, #12
    4824:	af00      	add	r7, sp, #0
    4826:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    4828:	687b      	ldr	r3, [r7, #4]
    482a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    482c:	4618      	mov	r0, r3
    482e:	370c      	adds	r7, #12
    4830:	46bd      	mov	sp, r7
    4832:	f85d 7b04 	ldr.w	r7, [sp], #4
    4836:	4770      	bx	lr

00004838 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    4838:	b480      	push	{r7}
    483a:	b083      	sub	sp, #12
    483c:	af00      	add	r7, sp, #0
    483e:	6078      	str	r0, [r7, #4]
    4840:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    4842:	687b      	ldr	r3, [r7, #4]
    4844:	683a      	ldr	r2, [r7, #0]
    4846:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    4848:	bf00      	nop
    484a:	370c      	adds	r7, #12
    484c:	46bd      	mov	sp, r7
    484e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4852:	4770      	bx	lr

00004854 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    4854:	b480      	push	{r7}
    4856:	b083      	sub	sp, #12
    4858:	af00      	add	r7, sp, #0
    485a:	6078      	str	r0, [r7, #4]
    485c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    485e:	687b      	ldr	r3, [r7, #4]
    4860:	683a      	ldr	r2, [r7, #0]
    4862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    4866:	bf00      	nop
    4868:	370c      	adds	r7, #12
    486a:	46bd      	mov	sp, r7
    486c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4870:	4770      	bx	lr

00004872 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    4872:	b480      	push	{r7}
    4874:	b083      	sub	sp, #12
    4876:	af00      	add	r7, sp, #0
    4878:	6078      	str	r0, [r7, #4]
    487a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	683a      	ldr	r2, [r7, #0]
    4880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    4884:	bf00      	nop
    4886:	370c      	adds	r7, #12
    4888:	46bd      	mov	sp, r7
    488a:	f85d 7b04 	ldr.w	r7, [sp], #4
    488e:	4770      	bx	lr

00004890 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    4890:	b480      	push	{r7}
    4892:	b083      	sub	sp, #12
    4894:	af00      	add	r7, sp, #0
    4896:	6078      	str	r0, [r7, #4]
    4898:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    489a:	687b      	ldr	r3, [r7, #4]
    489c:	683a      	ldr	r2, [r7, #0]
    489e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    48a2:	bf00      	nop
    48a4:	370c      	adds	r7, #12
    48a6:	46bd      	mov	sp, r7
    48a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    48ac:	4770      	bx	lr

000048ae <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    48ae:	b480      	push	{r7}
    48b0:	b083      	sub	sp, #12
    48b2:	af00      	add	r7, sp, #0
    48b4:	6078      	str	r0, [r7, #4]
    48b6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	683a      	ldr	r2, [r7, #0]
    48bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    48c0:	bf00      	nop
    48c2:	370c      	adds	r7, #12
    48c4:	46bd      	mov	sp, r7
    48c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    48ca:	4770      	bx	lr

000048cc <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    48cc:	b480      	push	{r7}
    48ce:	b083      	sub	sp, #12
    48d0:	af00      	add	r7, sp, #0
    48d2:	6078      	str	r0, [r7, #4]
    48d4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    48d6:	687b      	ldr	r3, [r7, #4]
    48d8:	683a      	ldr	r2, [r7, #0]
    48da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    48de:	bf00      	nop
    48e0:	370c      	adds	r7, #12
    48e2:	46bd      	mov	sp, r7
    48e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e8:	4770      	bx	lr

000048ea <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    48ea:	b480      	push	{r7}
    48ec:	b083      	sub	sp, #12
    48ee:	af00      	add	r7, sp, #0
    48f0:	6078      	str	r0, [r7, #4]
    48f2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	683a      	ldr	r2, [r7, #0]
    48f8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    48fc:	bf00      	nop
    48fe:	370c      	adds	r7, #12
    4900:	46bd      	mov	sp, r7
    4902:	f85d 7b04 	ldr.w	r7, [sp], #4
    4906:	4770      	bx	lr

00004908 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    4908:	b480      	push	{r7}
    490a:	b083      	sub	sp, #12
    490c:	af00      	add	r7, sp, #0
    490e:	6078      	str	r0, [r7, #4]
    4910:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    4912:	687b      	ldr	r3, [r7, #4]
    4914:	683a      	ldr	r2, [r7, #0]
    4916:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    491a:	bf00      	nop
    491c:	370c      	adds	r7, #12
    491e:	46bd      	mov	sp, r7
    4920:	f85d 7b04 	ldr.w	r7, [sp], #4
    4924:	4770      	bx	lr

00004926 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    4926:	b480      	push	{r7}
    4928:	b083      	sub	sp, #12
    492a:	af00      	add	r7, sp, #0
    492c:	6078      	str	r0, [r7, #4]
    492e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    4930:	687b      	ldr	r3, [r7, #4]
    4932:	683a      	ldr	r2, [r7, #0]
    4934:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    4938:	bf00      	nop
    493a:	370c      	adds	r7, #12
    493c:	46bd      	mov	sp, r7
    493e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4942:	4770      	bx	lr

00004944 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    4944:	b480      	push	{r7}
    4946:	b083      	sub	sp, #12
    4948:	af00      	add	r7, sp, #0
    494a:	6078      	str	r0, [r7, #4]
    494c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    494e:	687b      	ldr	r3, [r7, #4]
    4950:	683a      	ldr	r2, [r7, #0]
    4952:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4956:	bf00      	nop
    4958:	370c      	adds	r7, #12
    495a:	46bd      	mov	sp, r7
    495c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4960:	4770      	bx	lr
	...

00004964 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    4964:	b580      	push	{r7, lr}
    4966:	b082      	sub	sp, #8
    4968:	af00      	add	r7, sp, #0
    496a:	6078      	str	r0, [r7, #4]
    496c:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    496e:	687b      	ldr	r3, [r7, #4]
    4970:	683a      	ldr	r2, [r7, #0]
    4972:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    4974:	687b      	ldr	r3, [r7, #4]
    4976:	681b      	ldr	r3, [r3, #0]
    4978:	4618      	mov	r0, r3
    497a:	4b56      	ldr	r3, [pc, #344]	; (4ad4 <_can_async_init+0x170>)
    497c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    497e:	bf00      	nop
    4980:	687b      	ldr	r3, [r7, #4]
    4982:	681b      	ldr	r3, [r3, #0]
    4984:	4618      	mov	r0, r3
    4986:	4b54      	ldr	r3, [pc, #336]	; (4ad8 <_can_async_init+0x174>)
    4988:	4798      	blx	r3
    498a:	4603      	mov	r3, r0
    498c:	f083 0301 	eor.w	r3, r3, #1
    4990:	b2db      	uxtb	r3, r3
    4992:	2b00      	cmp	r3, #0
    4994:	d1f4      	bne.n	4980 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    4996:	687b      	ldr	r3, [r7, #4]
    4998:	681b      	ldr	r3, [r3, #0]
    499a:	4618      	mov	r0, r3
    499c:	4b4f      	ldr	r3, [pc, #316]	; (4adc <_can_async_init+0x178>)
    499e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    49a0:	683b      	ldr	r3, [r7, #0]
    49a2:	4a4f      	ldr	r2, [pc, #316]	; (4ae0 <_can_async_init+0x17c>)
    49a4:	4293      	cmp	r3, r2
    49a6:	d17c      	bne.n	4aa2 <_can_async_init+0x13e>
		_can1_dev    = dev;
    49a8:	4a4e      	ldr	r2, [pc, #312]	; (4ae4 <_can_async_init+0x180>)
    49aa:	687b      	ldr	r3, [r7, #4]
    49ac:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    49ae:	687b      	ldr	r3, [r7, #4]
    49b0:	4a4d      	ldr	r2, [pc, #308]	; (4ae8 <_can_async_init+0x184>)
    49b2:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    49b4:	687b      	ldr	r3, [r7, #4]
    49b6:	681b      	ldr	r3, [r3, #0]
    49b8:	f44f 7100 	mov.w	r1, #512	; 0x200
    49bc:	4618      	mov	r0, r3
    49be:	4b4b      	ldr	r3, [pc, #300]	; (4aec <_can_async_init+0x188>)
    49c0:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    49c2:	687b      	ldr	r3, [r7, #4]
    49c4:	681b      	ldr	r3, [r3, #0]
    49c6:	2102      	movs	r1, #2
    49c8:	4618      	mov	r0, r3
    49ca:	4b49      	ldr	r3, [pc, #292]	; (4af0 <_can_async_init+0x18c>)
    49cc:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    49ce:	687b      	ldr	r3, [r7, #4]
    49d0:	681b      	ldr	r3, [r3, #0]
    49d2:	f640 2103 	movw	r1, #2563	; 0xa03
    49d6:	4618      	mov	r0, r3
    49d8:	4b46      	ldr	r3, [pc, #280]	; (4af4 <_can_async_init+0x190>)
    49da:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	681b      	ldr	r3, [r3, #0]
    49e0:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    49e4:	4618      	mov	r0, r3
    49e6:	4b44      	ldr	r3, [pc, #272]	; (4af8 <_can_async_init+0x194>)
    49e8:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    49ea:	687b      	ldr	r3, [r7, #4]
    49ec:	681a      	ldr	r2, [r3, #0]
    49ee:	4b43      	ldr	r3, [pc, #268]	; (4afc <_can_async_init+0x198>)
    49f0:	b29b      	uxth	r3, r3
    49f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    49f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    49fa:	4619      	mov	r1, r3
    49fc:	4610      	mov	r0, r2
    49fe:	4b40      	ldr	r3, [pc, #256]	; (4b00 <_can_async_init+0x19c>)
    4a00:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    4a02:	687b      	ldr	r3, [r7, #4]
    4a04:	681b      	ldr	r3, [r3, #0]
    4a06:	2107      	movs	r1, #7
    4a08:	4618      	mov	r0, r3
    4a0a:	4b3e      	ldr	r3, [pc, #248]	; (4b04 <_can_async_init+0x1a0>)
    4a0c:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    4a0e:	687b      	ldr	r3, [r7, #4]
    4a10:	681b      	ldr	r3, [r3, #0]
    4a12:	2107      	movs	r1, #7
    4a14:	4618      	mov	r0, r3
    4a16:	4b3c      	ldr	r3, [pc, #240]	; (4b08 <_can_async_init+0x1a4>)
    4a18:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    4a1a:	687b      	ldr	r3, [r7, #4]
    4a1c:	681a      	ldr	r2, [r3, #0]
    4a1e:	4b3b      	ldr	r3, [pc, #236]	; (4b0c <_can_async_init+0x1a8>)
    4a20:	b29b      	uxth	r3, r3
    4a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    4a26:	4619      	mov	r1, r3
    4a28:	4610      	mov	r0, r2
    4a2a:	4b39      	ldr	r3, [pc, #228]	; (4b10 <_can_async_init+0x1ac>)
    4a2c:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    4a2e:	687b      	ldr	r3, [r7, #4]
    4a30:	681a      	ldr	r2, [r3, #0]
    4a32:	4b38      	ldr	r3, [pc, #224]	; (4b14 <_can_async_init+0x1b0>)
    4a34:	b29b      	uxth	r3, r3
    4a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4a3a:	4619      	mov	r1, r3
    4a3c:	4610      	mov	r0, r2
    4a3e:	4b36      	ldr	r3, [pc, #216]	; (4b18 <_can_async_init+0x1b4>)
    4a40:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    4a42:	687b      	ldr	r3, [r7, #4]
    4a44:	681b      	ldr	r3, [r3, #0]
    4a46:	2108      	movs	r1, #8
    4a48:	4618      	mov	r0, r3
    4a4a:	4b34      	ldr	r3, [pc, #208]	; (4b1c <_can_async_init+0x1b8>)
    4a4c:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    4a4e:	687b      	ldr	r3, [r7, #4]
    4a50:	681a      	ldr	r2, [r3, #0]
    4a52:	4b33      	ldr	r3, [pc, #204]	; (4b20 <_can_async_init+0x1bc>)
    4a54:	b29b      	uxth	r3, r3
    4a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    4a5a:	4619      	mov	r1, r3
    4a5c:	4610      	mov	r0, r2
    4a5e:	4b31      	ldr	r3, [pc, #196]	; (4b24 <_can_async_init+0x1c0>)
    4a60:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    4a62:	687b      	ldr	r3, [r7, #4]
    4a64:	681a      	ldr	r2, [r3, #0]
    4a66:	4b30      	ldr	r3, [pc, #192]	; (4b28 <_can_async_init+0x1c4>)
    4a68:	b29b      	uxth	r3, r3
    4a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4a6e:	4619      	mov	r1, r3
    4a70:	4610      	mov	r0, r2
    4a72:	4b2e      	ldr	r3, [pc, #184]	; (4b2c <_can_async_init+0x1c8>)
    4a74:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    4a76:	687b      	ldr	r3, [r7, #4]
    4a78:	681b      	ldr	r3, [r3, #0]
    4a7a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    4a7e:	4618      	mov	r0, r3
    4a80:	4b2b      	ldr	r3, [pc, #172]	; (4b30 <_can_async_init+0x1cc>)
    4a82:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    4a84:	204f      	movs	r0, #79	; 0x4f
    4a86:	4b2b      	ldr	r3, [pc, #172]	; (4b34 <_can_async_init+0x1d0>)
    4a88:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    4a8a:	204f      	movs	r0, #79	; 0x4f
    4a8c:	4b2a      	ldr	r3, [pc, #168]	; (4b38 <_can_async_init+0x1d4>)
    4a8e:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4a90:	204f      	movs	r0, #79	; 0x4f
    4a92:	4b2a      	ldr	r3, [pc, #168]	; (4b3c <_can_async_init+0x1d8>)
    4a94:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    4a96:	687b      	ldr	r3, [r7, #4]
    4a98:	681b      	ldr	r3, [r3, #0]
    4a9a:	2101      	movs	r1, #1
    4a9c:	4618      	mov	r0, r3
    4a9e:	4b28      	ldr	r3, [pc, #160]	; (4b40 <_can_async_init+0x1dc>)
    4aa0:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	681b      	ldr	r3, [r3, #0]
    4aa6:	4618      	mov	r0, r3
    4aa8:	4b26      	ldr	r3, [pc, #152]	; (4b44 <_can_async_init+0x1e0>)
    4aaa:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4aac:	687b      	ldr	r3, [r7, #4]
    4aae:	681b      	ldr	r3, [r3, #0]
    4ab0:	4618      	mov	r0, r3
    4ab2:	4b25      	ldr	r3, [pc, #148]	; (4b48 <_can_async_init+0x1e4>)
    4ab4:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    4ab6:	bf00      	nop
    4ab8:	687b      	ldr	r3, [r7, #4]
    4aba:	681b      	ldr	r3, [r3, #0]
    4abc:	4618      	mov	r0, r3
    4abe:	4b06      	ldr	r3, [pc, #24]	; (4ad8 <_can_async_init+0x174>)
    4ac0:	4798      	blx	r3
    4ac2:	4603      	mov	r3, r0
    4ac4:	2b00      	cmp	r3, #0
    4ac6:	d1f7      	bne.n	4ab8 <_can_async_init+0x154>
	};

	return ERR_NONE;
    4ac8:	2300      	movs	r3, #0
}
    4aca:	4618      	mov	r0, r3
    4acc:	3708      	adds	r7, #8
    4ace:	46bd      	mov	sp, r7
    4ad0:	bd80      	pop	{r7, pc}
    4ad2:	bf00      	nop
    4ad4:	00004719 	.word	0x00004719
    4ad8:	00004739 	.word	0x00004739
    4adc:	00004787 	.word	0x00004787
    4ae0:	42000400 	.word	0x42000400
    4ae4:	20000e18 	.word	0x20000e18
    4ae8:	20000004 	.word	0x20000004
    4aec:	000047c7 	.word	0x000047c7
    4af0:	000046e1 	.word	0x000046e1
    4af4:	000047e9 	.word	0x000047e9
    4af8:	000046fd 	.word	0x000046fd
    4afc:	2000ad30 	.word	0x2000ad30
    4b00:	000048cd 	.word	0x000048cd
    4b04:	000048eb 	.word	0x000048eb
    4b08:	00004927 	.word	0x00004927
    4b0c:	2000ace8 	.word	0x2000ace8
    4b10:	00004909 	.word	0x00004909
    4b14:	20000d78 	.word	0x20000d78
    4b18:	00004945 	.word	0x00004945
    4b1c:	00004855 	.word	0x00004855
    4b20:	20000d88 	.word	0x20000d88
    4b24:	00004873 	.word	0x00004873
    4b28:	20000e08 	.word	0x20000e08
    4b2c:	00004891 	.word	0x00004891
    4b30:	000048af 	.word	0x000048af
    4b34:	00004639 	.word	0x00004639
    4b38:	0000467d 	.word	0x0000467d
    4b3c:	000045fd 	.word	0x000045fd
    4b40:	00004839 	.word	0x00004839
    4b44:	000047a7 	.word	0x000047a7
    4b48:	00004767 	.word	0x00004767

00004b4c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    4b4c:	b590      	push	{r4, r7, lr}
    4b4e:	b083      	sub	sp, #12
    4b50:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    4b52:	4b2c      	ldr	r3, [pc, #176]	; (4c04 <CAN1_Handler+0xb8>)
    4b54:	681b      	ldr	r3, [r3, #0]
    4b56:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	681b      	ldr	r3, [r3, #0]
    4b5c:	4618      	mov	r0, r3
    4b5e:	4b2a      	ldr	r3, [pc, #168]	; (4c08 <CAN1_Handler+0xbc>)
    4b60:	4798      	blx	r3
    4b62:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4b64:	683b      	ldr	r3, [r7, #0]
    4b66:	f003 0301 	and.w	r3, r3, #1
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d003      	beq.n	4b76 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    4b6e:	687b      	ldr	r3, [r7, #4]
    4b70:	689b      	ldr	r3, [r3, #8]
    4b72:	6878      	ldr	r0, [r7, #4]
    4b74:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    4b76:	683b      	ldr	r3, [r7, #0]
    4b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4b7c:	2b00      	cmp	r3, #0
    4b7e:	d003      	beq.n	4b88 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4b80:	687b      	ldr	r3, [r7, #4]
    4b82:	685b      	ldr	r3, [r3, #4]
    4b84:	6878      	ldr	r0, [r7, #4]
    4b86:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4b88:	683b      	ldr	r3, [r7, #0]
    4b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d004      	beq.n	4b9c <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	68db      	ldr	r3, [r3, #12]
    4b96:	2103      	movs	r1, #3
    4b98:	6878      	ldr	r0, [r7, #4]
    4b9a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4b9c:	683b      	ldr	r3, [r7, #0]
    4b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d004      	beq.n	4bb0 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    4ba6:	687b      	ldr	r3, [r7, #4]
    4ba8:	68db      	ldr	r3, [r3, #12]
    4baa:	2100      	movs	r1, #0
    4bac:	6878      	ldr	r0, [r7, #4]
    4bae:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4bb0:	683b      	ldr	r3, [r7, #0]
    4bb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	d00f      	beq.n	4bda <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    4bba:	687b      	ldr	r3, [r7, #4]
    4bbc:	68dc      	ldr	r4, [r3, #12]
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	681b      	ldr	r3, [r3, #0]
    4bc2:	4618      	mov	r0, r3
    4bc4:	4b11      	ldr	r3, [pc, #68]	; (4c0c <CAN1_Handler+0xc0>)
    4bc6:	4798      	blx	r3
    4bc8:	4603      	mov	r3, r0
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d001      	beq.n	4bd2 <CAN1_Handler+0x86>
    4bce:	2302      	movs	r3, #2
    4bd0:	e000      	b.n	4bd4 <CAN1_Handler+0x88>
    4bd2:	2301      	movs	r3, #1
    4bd4:	4619      	mov	r1, r3
    4bd6:	6878      	ldr	r0, [r7, #4]
    4bd8:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    4bda:	683b      	ldr	r3, [r7, #0]
    4bdc:	f003 0308 	and.w	r3, r3, #8
    4be0:	2b00      	cmp	r3, #0
    4be2:	d004      	beq.n	4bee <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4be4:	687b      	ldr	r3, [r7, #4]
    4be6:	68db      	ldr	r3, [r3, #12]
    4be8:	2104      	movs	r1, #4
    4bea:	6878      	ldr	r0, [r7, #4]
    4bec:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    4bee:	687b      	ldr	r3, [r7, #4]
    4bf0:	681b      	ldr	r3, [r3, #0]
    4bf2:	6839      	ldr	r1, [r7, #0]
    4bf4:	4618      	mov	r0, r3
    4bf6:	4b06      	ldr	r3, [pc, #24]	; (4c10 <CAN1_Handler+0xc4>)
    4bf8:	4798      	blx	r3
}
    4bfa:	bf00      	nop
    4bfc:	370c      	adds	r7, #12
    4bfe:	46bd      	mov	sp, r7
    4c00:	bd90      	pop	{r4, r7, pc}
    4c02:	bf00      	nop
    4c04:	20000e18 	.word	0x20000e18
    4c08:	00004821 	.word	0x00004821
    4c0c:	000046b9 	.word	0x000046b9
    4c10:	00004805 	.word	0x00004805

00004c14 <__NVIC_SetPendingIRQ>:
{
    4c14:	b480      	push	{r7}
    4c16:	b083      	sub	sp, #12
    4c18:	af00      	add	r7, sp, #0
    4c1a:	4603      	mov	r3, r0
    4c1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c22:	2b00      	cmp	r3, #0
    4c24:	db0c      	blt.n	4c40 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c26:	4909      	ldr	r1, [pc, #36]	; (4c4c <__NVIC_SetPendingIRQ+0x38>)
    4c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c2c:	095b      	lsrs	r3, r3, #5
    4c2e:	88fa      	ldrh	r2, [r7, #6]
    4c30:	f002 021f 	and.w	r2, r2, #31
    4c34:	2001      	movs	r0, #1
    4c36:	fa00 f202 	lsl.w	r2, r0, r2
    4c3a:	3340      	adds	r3, #64	; 0x40
    4c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4c40:	bf00      	nop
    4c42:	370c      	adds	r7, #12
    4c44:	46bd      	mov	sp, r7
    4c46:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c4a:	4770      	bx	lr
    4c4c:	e000e100 	.word	0xe000e100

00004c50 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    4c50:	b580      	push	{r7, lr}
    4c52:	b082      	sub	sp, #8
    4c54:	af00      	add	r7, sp, #0
    4c56:	4603      	mov	r3, r0
    4c58:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    4c5a:	79fb      	ldrb	r3, [r7, #7]
    4c5c:	b21b      	sxth	r3, r3
    4c5e:	4618      	mov	r0, r3
    4c60:	4b02      	ldr	r3, [pc, #8]	; (4c6c <_irq_set+0x1c>)
    4c62:	4798      	blx	r3
}
    4c64:	bf00      	nop
    4c66:	3708      	adds	r7, #8
    4c68:	46bd      	mov	sp, r7
    4c6a:	bd80      	pop	{r7, pc}
    4c6c:	00004c15 	.word	0x00004c15

00004c70 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4c70:	b480      	push	{r7}
    4c72:	b083      	sub	sp, #12
    4c74:	af00      	add	r7, sp, #0
    4c76:	4603      	mov	r3, r0
    4c78:	6039      	str	r1, [r7, #0]
    4c7a:	80fb      	strh	r3, [r7, #6]
    4c7c:	4613      	mov	r3, r2
    4c7e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4c80:	797b      	ldrb	r3, [r7, #5]
    4c82:	3b04      	subs	r3, #4
    4c84:	2b05      	cmp	r3, #5
    4c86:	d86b      	bhi.n	4d60 <_get_cycles_for_us_internal+0xf0>
    4c88:	a201      	add	r2, pc, #4	; (adr r2, 4c90 <_get_cycles_for_us_internal+0x20>)
    4c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4c8e:	bf00      	nop
    4c90:	00004d3f 	.word	0x00004d3f
    4c94:	00004d1f 	.word	0x00004d1f
    4c98:	00004d01 	.word	0x00004d01
    4c9c:	00004ce3 	.word	0x00004ce3
    4ca0:	00004cc5 	.word	0x00004cc5
    4ca4:	00004ca9 	.word	0x00004ca9
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4ca8:	88fb      	ldrh	r3, [r7, #6]
    4caa:	683a      	ldr	r2, [r7, #0]
    4cac:	4935      	ldr	r1, [pc, #212]	; (4d84 <_get_cycles_for_us_internal+0x114>)
    4cae:	fba1 1202 	umull	r1, r2, r1, r2
    4cb2:	0c92      	lsrs	r2, r2, #18
    4cb4:	fb02 f303 	mul.w	r3, r2, r3
    4cb8:	3302      	adds	r3, #2
    4cba:	4a33      	ldr	r2, [pc, #204]	; (4d88 <_get_cycles_for_us_internal+0x118>)
    4cbc:	fba2 2303 	umull	r2, r3, r2, r3
    4cc0:	085b      	lsrs	r3, r3, #1
    4cc2:	e059      	b.n	4d78 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4cc4:	88fb      	ldrh	r3, [r7, #6]
    4cc6:	683a      	ldr	r2, [r7, #0]
    4cc8:	0952      	lsrs	r2, r2, #5
    4cca:	4930      	ldr	r1, [pc, #192]	; (4d8c <_get_cycles_for_us_internal+0x11c>)
    4ccc:	fba1 1202 	umull	r1, r2, r1, r2
    4cd0:	09d2      	lsrs	r2, r2, #7
    4cd2:	fb02 f303 	mul.w	r3, r2, r3
    4cd6:	331d      	adds	r3, #29
    4cd8:	4a2d      	ldr	r2, [pc, #180]	; (4d90 <_get_cycles_for_us_internal+0x120>)
    4cda:	fba2 2303 	umull	r2, r3, r2, r3
    4cde:	091b      	lsrs	r3, r3, #4
    4ce0:	e04a      	b.n	4d78 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    4ce2:	88fb      	ldrh	r3, [r7, #6]
    4ce4:	683a      	ldr	r2, [r7, #0]
    4ce6:	492b      	ldr	r1, [pc, #172]	; (4d94 <_get_cycles_for_us_internal+0x124>)
    4ce8:	fba1 1202 	umull	r1, r2, r1, r2
    4cec:	0b52      	lsrs	r2, r2, #13
    4cee:	fb02 f303 	mul.w	r3, r2, r3
    4cf2:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4cf6:	4a28      	ldr	r2, [pc, #160]	; (4d98 <_get_cycles_for_us_internal+0x128>)
    4cf8:	fba2 2303 	umull	r2, r3, r2, r3
    4cfc:	095b      	lsrs	r3, r3, #5
    4cfe:	e03b      	b.n	4d78 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4d00:	88fb      	ldrh	r3, [r7, #6]
    4d02:	683a      	ldr	r2, [r7, #0]
    4d04:	4925      	ldr	r1, [pc, #148]	; (4d9c <_get_cycles_for_us_internal+0x12c>)
    4d06:	fba1 1202 	umull	r1, r2, r1, r2
    4d0a:	0992      	lsrs	r2, r2, #6
    4d0c:	fb02 f303 	mul.w	r3, r2, r3
    4d10:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4d14:	4a22      	ldr	r2, [pc, #136]	; (4da0 <_get_cycles_for_us_internal+0x130>)
    4d16:	fba2 2303 	umull	r2, r3, r2, r3
    4d1a:	099b      	lsrs	r3, r3, #6
    4d1c:	e02c      	b.n	4d78 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4d1e:	88fb      	ldrh	r3, [r7, #6]
    4d20:	683a      	ldr	r2, [r7, #0]
    4d22:	4920      	ldr	r1, [pc, #128]	; (4da4 <_get_cycles_for_us_internal+0x134>)
    4d24:	fba1 1202 	umull	r1, r2, r1, r2
    4d28:	0952      	lsrs	r2, r2, #5
    4d2a:	fb02 f303 	mul.w	r3, r2, r3
    4d2e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4d32:	332f      	adds	r3, #47	; 0x2f
    4d34:	4a1c      	ldr	r2, [pc, #112]	; (4da8 <_get_cycles_for_us_internal+0x138>)
    4d36:	fba2 2303 	umull	r2, r3, r2, r3
    4d3a:	0b5b      	lsrs	r3, r3, #13
    4d3c:	e01c      	b.n	4d78 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    4d3e:	88fb      	ldrh	r3, [r7, #6]
    4d40:	683a      	ldr	r2, [r7, #0]
    4d42:	491a      	ldr	r1, [pc, #104]	; (4dac <_get_cycles_for_us_internal+0x13c>)
    4d44:	fba1 1202 	umull	r1, r2, r1, r2
    4d48:	08d2      	lsrs	r2, r2, #3
    4d4a:	fb02 f303 	mul.w	r3, r2, r3
    4d4e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4d52:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4d56:	4a16      	ldr	r2, [pc, #88]	; (4db0 <_get_cycles_for_us_internal+0x140>)
    4d58:	fba2 2303 	umull	r2, r3, r2, r3
    4d5c:	0c5b      	lsrs	r3, r3, #17
    4d5e:	e00b      	b.n	4d78 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4d60:	88fb      	ldrh	r3, [r7, #6]
    4d62:	683a      	ldr	r2, [r7, #0]
    4d64:	fb02 f303 	mul.w	r3, r2, r3
    4d68:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4d6c:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4d70:	4a10      	ldr	r2, [pc, #64]	; (4db4 <_get_cycles_for_us_internal+0x144>)
    4d72:	fba2 2303 	umull	r2, r3, r2, r3
    4d76:	0c9b      	lsrs	r3, r3, #18
	}
}
    4d78:	4618      	mov	r0, r3
    4d7a:	370c      	adds	r7, #12
    4d7c:	46bd      	mov	sp, r7
    4d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d82:	4770      	bx	lr
    4d84:	431bde83 	.word	0x431bde83
    4d88:	aaaaaaab 	.word	0xaaaaaaab
    4d8c:	0a7c5ac5 	.word	0x0a7c5ac5
    4d90:	88888889 	.word	0x88888889
    4d94:	d1b71759 	.word	0xd1b71759
    4d98:	1b4e81b5 	.word	0x1b4e81b5
    4d9c:	10624dd3 	.word	0x10624dd3
    4da0:	057619f1 	.word	0x057619f1
    4da4:	51eb851f 	.word	0x51eb851f
    4da8:	45e7b273 	.word	0x45e7b273
    4dac:	cccccccd 	.word	0xcccccccd
    4db0:	6fd91d85 	.word	0x6fd91d85
    4db4:	165e9f81 	.word	0x165e9f81

00004db8 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4db8:	b580      	push	{r7, lr}
    4dba:	b082      	sub	sp, #8
    4dbc:	af00      	add	r7, sp, #0
    4dbe:	4603      	mov	r3, r0
    4dc0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4dc2:	88fb      	ldrh	r3, [r7, #6]
    4dc4:	2209      	movs	r2, #9
    4dc6:	4904      	ldr	r1, [pc, #16]	; (4dd8 <_get_cycles_for_us+0x20>)
    4dc8:	4618      	mov	r0, r3
    4dca:	4b04      	ldr	r3, [pc, #16]	; (4ddc <_get_cycles_for_us+0x24>)
    4dcc:	4798      	blx	r3
    4dce:	4603      	mov	r3, r0
}
    4dd0:	4618      	mov	r0, r3
    4dd2:	3708      	adds	r7, #8
    4dd4:	46bd      	mov	sp, r7
    4dd6:	bd80      	pop	{r7, pc}
    4dd8:	07270e00 	.word	0x07270e00
    4ddc:	00004c71 	.word	0x00004c71

00004de0 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4de0:	b480      	push	{r7}
    4de2:	b083      	sub	sp, #12
    4de4:	af00      	add	r7, sp, #0
    4de6:	4603      	mov	r3, r0
    4de8:	6039      	str	r1, [r7, #0]
    4dea:	80fb      	strh	r3, [r7, #6]
    4dec:	4613      	mov	r3, r2
    4dee:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4df0:	797b      	ldrb	r3, [r7, #5]
    4df2:	3b04      	subs	r3, #4
    4df4:	2b05      	cmp	r3, #5
    4df6:	d870      	bhi.n	4eda <_get_cycles_for_ms_internal+0xfa>
    4df8:	a201      	add	r2, pc, #4	; (adr r2, 4e00 <_get_cycles_for_ms_internal+0x20>)
    4dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4dfe:	bf00      	nop
    4e00:	00004ebd 	.word	0x00004ebd
    4e04:	00004ea1 	.word	0x00004ea1
    4e08:	00004e85 	.word	0x00004e85
    4e0c:	00004e61 	.word	0x00004e61
    4e10:	00004e3d 	.word	0x00004e3d
    4e14:	00004e19 	.word	0x00004e19
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4e18:	88fb      	ldrh	r3, [r7, #6]
    4e1a:	683a      	ldr	r2, [r7, #0]
    4e1c:	4937      	ldr	r1, [pc, #220]	; (4efc <_get_cycles_for_ms_internal+0x11c>)
    4e1e:	fba1 1202 	umull	r1, r2, r1, r2
    4e22:	0c92      	lsrs	r2, r2, #18
    4e24:	fb02 f303 	mul.w	r3, r2, r3
    4e28:	3302      	adds	r3, #2
    4e2a:	4a35      	ldr	r2, [pc, #212]	; (4f00 <_get_cycles_for_ms_internal+0x120>)
    4e2c:	fba2 2303 	umull	r2, r3, r2, r3
    4e30:	085b      	lsrs	r3, r3, #1
    4e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4e36:	fb02 f303 	mul.w	r3, r2, r3
    4e3a:	e058      	b.n	4eee <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4e3c:	88fb      	ldrh	r3, [r7, #6]
    4e3e:	683a      	ldr	r2, [r7, #0]
    4e40:	0952      	lsrs	r2, r2, #5
    4e42:	4930      	ldr	r1, [pc, #192]	; (4f04 <_get_cycles_for_ms_internal+0x124>)
    4e44:	fba1 1202 	umull	r1, r2, r1, r2
    4e48:	09d2      	lsrs	r2, r2, #7
    4e4a:	fb02 f303 	mul.w	r3, r2, r3
    4e4e:	3302      	adds	r3, #2
    4e50:	4a2b      	ldr	r2, [pc, #172]	; (4f00 <_get_cycles_for_ms_internal+0x120>)
    4e52:	fba2 2303 	umull	r2, r3, r2, r3
    4e56:	085b      	lsrs	r3, r3, #1
    4e58:	2264      	movs	r2, #100	; 0x64
    4e5a:	fb02 f303 	mul.w	r3, r2, r3
    4e5e:	e046      	b.n	4eee <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4e60:	88fb      	ldrh	r3, [r7, #6]
    4e62:	683a      	ldr	r2, [r7, #0]
    4e64:	4928      	ldr	r1, [pc, #160]	; (4f08 <_get_cycles_for_ms_internal+0x128>)
    4e66:	fba1 1202 	umull	r1, r2, r1, r2
    4e6a:	0b52      	lsrs	r2, r2, #13
    4e6c:	fb02 f303 	mul.w	r3, r2, r3
    4e70:	3302      	adds	r3, #2
    4e72:	4a23      	ldr	r2, [pc, #140]	; (4f00 <_get_cycles_for_ms_internal+0x120>)
    4e74:	fba2 2303 	umull	r2, r3, r2, r3
    4e78:	085a      	lsrs	r2, r3, #1
    4e7a:	4613      	mov	r3, r2
    4e7c:	009b      	lsls	r3, r3, #2
    4e7e:	4413      	add	r3, r2
    4e80:	005b      	lsls	r3, r3, #1
    4e82:	e034      	b.n	4eee <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4e84:	88fb      	ldrh	r3, [r7, #6]
    4e86:	683a      	ldr	r2, [r7, #0]
    4e88:	4920      	ldr	r1, [pc, #128]	; (4f0c <_get_cycles_for_ms_internal+0x12c>)
    4e8a:	fba1 1202 	umull	r1, r2, r1, r2
    4e8e:	0992      	lsrs	r2, r2, #6
    4e90:	fb02 f303 	mul.w	r3, r2, r3
    4e94:	3302      	adds	r3, #2
    4e96:	4a1a      	ldr	r2, [pc, #104]	; (4f00 <_get_cycles_for_ms_internal+0x120>)
    4e98:	fba2 2303 	umull	r2, r3, r2, r3
    4e9c:	085b      	lsrs	r3, r3, #1
    4e9e:	e026      	b.n	4eee <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4ea0:	88fb      	ldrh	r3, [r7, #6]
    4ea2:	683a      	ldr	r2, [r7, #0]
    4ea4:	491a      	ldr	r1, [pc, #104]	; (4f10 <_get_cycles_for_ms_internal+0x130>)
    4ea6:	fba1 1202 	umull	r1, r2, r1, r2
    4eaa:	0952      	lsrs	r2, r2, #5
    4eac:	fb02 f303 	mul.w	r3, r2, r3
    4eb0:	331d      	adds	r3, #29
    4eb2:	4a18      	ldr	r2, [pc, #96]	; (4f14 <_get_cycles_for_ms_internal+0x134>)
    4eb4:	fba2 2303 	umull	r2, r3, r2, r3
    4eb8:	091b      	lsrs	r3, r3, #4
    4eba:	e018      	b.n	4eee <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4ebc:	88fb      	ldrh	r3, [r7, #6]
    4ebe:	683a      	ldr	r2, [r7, #0]
    4ec0:	4915      	ldr	r1, [pc, #84]	; (4f18 <_get_cycles_for_ms_internal+0x138>)
    4ec2:	fba1 1202 	umull	r1, r2, r1, r2
    4ec6:	08d2      	lsrs	r2, r2, #3
    4ec8:	fb02 f303 	mul.w	r3, r2, r3
    4ecc:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4ed0:	4a12      	ldr	r2, [pc, #72]	; (4f1c <_get_cycles_for_ms_internal+0x13c>)
    4ed2:	fba2 2303 	umull	r2, r3, r2, r3
    4ed6:	095b      	lsrs	r3, r3, #5
    4ed8:	e009      	b.n	4eee <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4eda:	88fb      	ldrh	r3, [r7, #6]
    4edc:	683a      	ldr	r2, [r7, #0]
    4ede:	fb02 f303 	mul.w	r3, r2, r3
    4ee2:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4ee6:	4a0e      	ldr	r2, [pc, #56]	; (4f20 <_get_cycles_for_ms_internal+0x140>)
    4ee8:	fba2 2303 	umull	r2, r3, r2, r3
    4eec:	099b      	lsrs	r3, r3, #6
	}
}
    4eee:	4618      	mov	r0, r3
    4ef0:	370c      	adds	r7, #12
    4ef2:	46bd      	mov	sp, r7
    4ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ef8:	4770      	bx	lr
    4efa:	bf00      	nop
    4efc:	431bde83 	.word	0x431bde83
    4f00:	aaaaaaab 	.word	0xaaaaaaab
    4f04:	0a7c5ac5 	.word	0x0a7c5ac5
    4f08:	d1b71759 	.word	0xd1b71759
    4f0c:	10624dd3 	.word	0x10624dd3
    4f10:	51eb851f 	.word	0x51eb851f
    4f14:	88888889 	.word	0x88888889
    4f18:	cccccccd 	.word	0xcccccccd
    4f1c:	1b4e81b5 	.word	0x1b4e81b5
    4f20:	057619f1 	.word	0x057619f1

00004f24 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4f24:	b580      	push	{r7, lr}
    4f26:	b082      	sub	sp, #8
    4f28:	af00      	add	r7, sp, #0
    4f2a:	4603      	mov	r3, r0
    4f2c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4f2e:	88fb      	ldrh	r3, [r7, #6]
    4f30:	2209      	movs	r2, #9
    4f32:	4904      	ldr	r1, [pc, #16]	; (4f44 <_get_cycles_for_ms+0x20>)
    4f34:	4618      	mov	r0, r3
    4f36:	4b04      	ldr	r3, [pc, #16]	; (4f48 <_get_cycles_for_ms+0x24>)
    4f38:	4798      	blx	r3
    4f3a:	4603      	mov	r3, r0
}
    4f3c:	4618      	mov	r0, r3
    4f3e:	3708      	adds	r7, #8
    4f40:	46bd      	mov	sp, r7
    4f42:	bd80      	pop	{r7, pc}
    4f44:	07270e00 	.word	0x07270e00
    4f48:	00004de1 	.word	0x00004de1
    4f4c:	00000000 	.word	0x00000000

00004f50 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4f50:	b480      	push	{r7}
    4f52:	b083      	sub	sp, #12
    4f54:	af00      	add	r7, sp, #0
    4f56:	6078      	str	r0, [r7, #4]
    4f58:	6039      	str	r1, [r7, #0]
    4f5a:	bf00      	nop
    4f5c:	f3af 8000 	nop.w

00004f60 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4f60:	3901      	subs	r1, #1
    4f62:	d8fd      	bhi.n	4f60 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4f64:	bf00      	nop
    4f66:	370c      	adds	r7, #12
    4f68:	46bd      	mov	sp, r7
    4f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f6e:	4770      	bx	lr

00004f70 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4f70:	b480      	push	{r7}
    4f72:	b083      	sub	sp, #12
    4f74:	af00      	add	r7, sp, #0
    4f76:	6078      	str	r0, [r7, #4]
    4f78:	460b      	mov	r3, r1
    4f7a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4f7c:	687b      	ldr	r3, [r7, #4]
    4f7e:	881b      	ldrh	r3, [r3, #0]
    4f80:	b29a      	uxth	r2, r3
    4f82:	887b      	ldrh	r3, [r7, #2]
    4f84:	021b      	lsls	r3, r3, #8
    4f86:	b29b      	uxth	r3, r3
    4f88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4f8c:	b29b      	uxth	r3, r3
    4f8e:	4313      	orrs	r3, r2
    4f90:	b29a      	uxth	r2, r3
    4f92:	687b      	ldr	r3, [r7, #4]
    4f94:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4f96:	bf00      	nop
    4f98:	370c      	adds	r7, #12
    4f9a:	46bd      	mov	sp, r7
    4f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fa0:	4770      	bx	lr

00004fa2 <hri_port_set_EVCTRL_reg>:
{
    4fa2:	b480      	push	{r7}
    4fa4:	b085      	sub	sp, #20
    4fa6:	af00      	add	r7, sp, #0
    4fa8:	60f8      	str	r0, [r7, #12]
    4faa:	460b      	mov	r3, r1
    4fac:	607a      	str	r2, [r7, #4]
    4fae:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4fb0:	7afb      	ldrb	r3, [r7, #11]
    4fb2:	7afa      	ldrb	r2, [r7, #11]
    4fb4:	68f9      	ldr	r1, [r7, #12]
    4fb6:	01d2      	lsls	r2, r2, #7
    4fb8:	440a      	add	r2, r1
    4fba:	322c      	adds	r2, #44	; 0x2c
    4fbc:	6811      	ldr	r1, [r2, #0]
    4fbe:	687a      	ldr	r2, [r7, #4]
    4fc0:	430a      	orrs	r2, r1
    4fc2:	68f9      	ldr	r1, [r7, #12]
    4fc4:	01db      	lsls	r3, r3, #7
    4fc6:	440b      	add	r3, r1
    4fc8:	332c      	adds	r3, #44	; 0x2c
    4fca:	601a      	str	r2, [r3, #0]
}
    4fcc:	bf00      	nop
    4fce:	3714      	adds	r7, #20
    4fd0:	46bd      	mov	sp, r7
    4fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fd6:	4770      	bx	lr

00004fd8 <_port_event_init>:

static inline void _port_event_init()
{
    4fd8:	b580      	push	{r7, lr}
    4fda:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4fdc:	2200      	movs	r2, #0
    4fde:	2100      	movs	r1, #0
    4fe0:	480a      	ldr	r0, [pc, #40]	; (500c <_port_event_init+0x34>)
    4fe2:	4b0b      	ldr	r3, [pc, #44]	; (5010 <_port_event_init+0x38>)
    4fe4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4fe6:	2200      	movs	r2, #0
    4fe8:	2101      	movs	r1, #1
    4fea:	4808      	ldr	r0, [pc, #32]	; (500c <_port_event_init+0x34>)
    4fec:	4b08      	ldr	r3, [pc, #32]	; (5010 <_port_event_init+0x38>)
    4fee:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4ff0:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4ff4:	2102      	movs	r1, #2
    4ff6:	4805      	ldr	r0, [pc, #20]	; (500c <_port_event_init+0x34>)
    4ff8:	4b05      	ldr	r3, [pc, #20]	; (5010 <_port_event_init+0x38>)
    4ffa:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4ffc:	2200      	movs	r2, #0
    4ffe:	2103      	movs	r1, #3
    5000:	4802      	ldr	r0, [pc, #8]	; (500c <_port_event_init+0x34>)
    5002:	4b03      	ldr	r3, [pc, #12]	; (5010 <_port_event_init+0x38>)
    5004:	4798      	blx	r3
}
    5006:	bf00      	nop
    5008:	bd80      	pop	{r7, pc}
    500a:	bf00      	nop
    500c:	41008000 	.word	0x41008000
    5010:	00004fa3 	.word	0x00004fa3

00005014 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5014:	b580      	push	{r7, lr}
    5016:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    5018:	2104      	movs	r1, #4
    501a:	480b      	ldr	r0, [pc, #44]	; (5048 <_init_chip+0x34>)
    501c:	4b0b      	ldr	r3, [pc, #44]	; (504c <_init_chip+0x38>)
    501e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    5020:	4b0b      	ldr	r3, [pc, #44]	; (5050 <_init_chip+0x3c>)
    5022:	4798      	blx	r3
	_oscctrl_init_sources();
    5024:	4b0b      	ldr	r3, [pc, #44]	; (5054 <_init_chip+0x40>)
    5026:	4798      	blx	r3
	_mclk_init();
    5028:	4b0b      	ldr	r3, [pc, #44]	; (5058 <_init_chip+0x44>)
    502a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    502c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    5030:	4b0a      	ldr	r3, [pc, #40]	; (505c <_init_chip+0x48>)
    5032:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    5034:	4b0a      	ldr	r3, [pc, #40]	; (5060 <_init_chip+0x4c>)
    5036:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5038:	f640 30df 	movw	r0, #3039	; 0xbdf
    503c:	4b07      	ldr	r3, [pc, #28]	; (505c <_init_chip+0x48>)
    503e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    5040:	4b08      	ldr	r3, [pc, #32]	; (5064 <_init_chip+0x50>)
    5042:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    5044:	bf00      	nop
    5046:	bd80      	pop	{r7, pc}
    5048:	41004000 	.word	0x41004000
    504c:	00004f71 	.word	0x00004f71
    5050:	00005b3d 	.word	0x00005b3d
    5054:	00006005 	.word	0x00006005
    5058:	00005a5d 	.word	0x00005a5d
    505c:	00005905 	.word	0x00005905
    5060:	00006045 	.word	0x00006045
    5064:	00004fd9 	.word	0x00004fd9

00005068 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    5068:	b480      	push	{r7}
    506a:	b083      	sub	sp, #12
    506c:	af00      	add	r7, sp, #0
    506e:	6078      	str	r0, [r7, #4]
    5070:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    5072:	687b      	ldr	r3, [r7, #4]
    5074:	683a      	ldr	r2, [r7, #0]
    5076:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5078:	2300      	movs	r3, #0
}
    507a:	4618      	mov	r0, r3
    507c:	370c      	adds	r7, #12
    507e:	46bd      	mov	sp, r7
    5080:	f85d 7b04 	ldr.w	r7, [sp], #4
    5084:	4770      	bx	lr
	...

00005088 <__NVIC_EnableIRQ>:
{
    5088:	b480      	push	{r7}
    508a:	b083      	sub	sp, #12
    508c:	af00      	add	r7, sp, #0
    508e:	4603      	mov	r3, r0
    5090:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5096:	2b00      	cmp	r3, #0
    5098:	db0b      	blt.n	50b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    509a:	4909      	ldr	r1, [pc, #36]	; (50c0 <__NVIC_EnableIRQ+0x38>)
    509c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    50a0:	095b      	lsrs	r3, r3, #5
    50a2:	88fa      	ldrh	r2, [r7, #6]
    50a4:	f002 021f 	and.w	r2, r2, #31
    50a8:	2001      	movs	r0, #1
    50aa:	fa00 f202 	lsl.w	r2, r0, r2
    50ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    50b2:	bf00      	nop
    50b4:	370c      	adds	r7, #12
    50b6:	46bd      	mov	sp, r7
    50b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    50bc:	4770      	bx	lr
    50be:	bf00      	nop
    50c0:	e000e100 	.word	0xe000e100

000050c4 <__NVIC_DisableIRQ>:
{
    50c4:	b480      	push	{r7}
    50c6:	b083      	sub	sp, #12
    50c8:	af00      	add	r7, sp, #0
    50ca:	4603      	mov	r3, r0
    50cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    50ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    50d2:	2b00      	cmp	r3, #0
    50d4:	db10      	blt.n	50f8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    50d6:	490b      	ldr	r1, [pc, #44]	; (5104 <__NVIC_DisableIRQ+0x40>)
    50d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    50dc:	095b      	lsrs	r3, r3, #5
    50de:	88fa      	ldrh	r2, [r7, #6]
    50e0:	f002 021f 	and.w	r2, r2, #31
    50e4:	2001      	movs	r0, #1
    50e6:	fa00 f202 	lsl.w	r2, r0, r2
    50ea:	3320      	adds	r3, #32
    50ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    50f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    50f4:	f3bf 8f6f 	isb	sy
}
    50f8:	bf00      	nop
    50fa:	370c      	adds	r7, #12
    50fc:	46bd      	mov	sp, r7
    50fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5102:	4770      	bx	lr
    5104:	e000e100 	.word	0xe000e100

00005108 <__NVIC_ClearPendingIRQ>:
{
    5108:	b480      	push	{r7}
    510a:	b083      	sub	sp, #12
    510c:	af00      	add	r7, sp, #0
    510e:	4603      	mov	r3, r0
    5110:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5116:	2b00      	cmp	r3, #0
    5118:	db0c      	blt.n	5134 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    511a:	4909      	ldr	r1, [pc, #36]	; (5140 <__NVIC_ClearPendingIRQ+0x38>)
    511c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5120:	095b      	lsrs	r3, r3, #5
    5122:	88fa      	ldrh	r2, [r7, #6]
    5124:	f002 021f 	and.w	r2, r2, #31
    5128:	2001      	movs	r0, #1
    512a:	fa00 f202 	lsl.w	r2, r0, r2
    512e:	3360      	adds	r3, #96	; 0x60
    5130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5134:	bf00      	nop
    5136:	370c      	adds	r7, #12
    5138:	46bd      	mov	sp, r7
    513a:	f85d 7b04 	ldr.w	r7, [sp], #4
    513e:	4770      	bx	lr
    5140:	e000e100 	.word	0xe000e100

00005144 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    5144:	b480      	push	{r7}
    5146:	b083      	sub	sp, #12
    5148:	af00      	add	r7, sp, #0
    514a:	6078      	str	r0, [r7, #4]
    514c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    514e:	bf00      	nop
    5150:	687b      	ldr	r3, [r7, #4]
    5152:	685a      	ldr	r2, [r3, #4]
    5154:	683b      	ldr	r3, [r7, #0]
    5156:	4013      	ands	r3, r2
    5158:	2b00      	cmp	r3, #0
    515a:	d1f9      	bne.n	5150 <hri_eic_wait_for_sync+0xc>
	};
}
    515c:	bf00      	nop
    515e:	370c      	adds	r7, #12
    5160:	46bd      	mov	sp, r7
    5162:	f85d 7b04 	ldr.w	r7, [sp], #4
    5166:	4770      	bx	lr

00005168 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    5168:	b480      	push	{r7}
    516a:	b083      	sub	sp, #12
    516c:	af00      	add	r7, sp, #0
    516e:	6078      	str	r0, [r7, #4]
    5170:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    5172:	687b      	ldr	r3, [r7, #4]
    5174:	685a      	ldr	r2, [r3, #4]
    5176:	683b      	ldr	r3, [r7, #0]
    5178:	4013      	ands	r3, r2
    517a:	2b00      	cmp	r3, #0
    517c:	bf14      	ite	ne
    517e:	2301      	movne	r3, #1
    5180:	2300      	moveq	r3, #0
    5182:	b2db      	uxtb	r3, r3
}
    5184:	4618      	mov	r0, r3
    5186:	370c      	adds	r7, #12
    5188:	46bd      	mov	sp, r7
    518a:	f85d 7b04 	ldr.w	r7, [sp], #4
    518e:	4770      	bx	lr

00005190 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    5190:	b480      	push	{r7}
    5192:	b083      	sub	sp, #12
    5194:	af00      	add	r7, sp, #0
    5196:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    5198:	687b      	ldr	r3, [r7, #4]
    519a:	695b      	ldr	r3, [r3, #20]
}
    519c:	4618      	mov	r0, r3
    519e:	370c      	adds	r7, #12
    51a0:	46bd      	mov	sp, r7
    51a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51a6:	4770      	bx	lr

000051a8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    51a8:	b480      	push	{r7}
    51aa:	b083      	sub	sp, #12
    51ac:	af00      	add	r7, sp, #0
    51ae:	6078      	str	r0, [r7, #4]
    51b0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    51b2:	687b      	ldr	r3, [r7, #4]
    51b4:	683a      	ldr	r2, [r7, #0]
    51b6:	615a      	str	r2, [r3, #20]
}
    51b8:	bf00      	nop
    51ba:	370c      	adds	r7, #12
    51bc:	46bd      	mov	sp, r7
    51be:	f85d 7b04 	ldr.w	r7, [sp], #4
    51c2:	4770      	bx	lr

000051c4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    51c4:	b480      	push	{r7}
    51c6:	b083      	sub	sp, #12
    51c8:	af00      	add	r7, sp, #0
    51ca:	6078      	str	r0, [r7, #4]
    51cc:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    51ce:	687b      	ldr	r3, [r7, #4]
    51d0:	683a      	ldr	r2, [r7, #0]
    51d2:	611a      	str	r2, [r3, #16]
}
    51d4:	bf00      	nop
    51d6:	370c      	adds	r7, #12
    51d8:	46bd      	mov	sp, r7
    51da:	f85d 7b04 	ldr.w	r7, [sp], #4
    51de:	4770      	bx	lr

000051e0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    51e0:	b480      	push	{r7}
    51e2:	b083      	sub	sp, #12
    51e4:	af00      	add	r7, sp, #0
    51e6:	6078      	str	r0, [r7, #4]
    51e8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    51ea:	687b      	ldr	r3, [r7, #4]
    51ec:	683a      	ldr	r2, [r7, #0]
    51ee:	60da      	str	r2, [r3, #12]
}
    51f0:	bf00      	nop
    51f2:	370c      	adds	r7, #12
    51f4:	46bd      	mov	sp, r7
    51f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    51fa:	4770      	bx	lr

000051fc <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    51fc:	b580      	push	{r7, lr}
    51fe:	b082      	sub	sp, #8
    5200:	af00      	add	r7, sp, #0
    5202:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	781b      	ldrb	r3, [r3, #0]
    5208:	b2db      	uxtb	r3, r3
    520a:	f043 0302 	orr.w	r3, r3, #2
    520e:	b2da      	uxtb	r2, r3
    5210:	687b      	ldr	r3, [r7, #4]
    5212:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    5214:	2103      	movs	r1, #3
    5216:	6878      	ldr	r0, [r7, #4]
    5218:	4b02      	ldr	r3, [pc, #8]	; (5224 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    521a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    521c:	bf00      	nop
    521e:	3708      	adds	r7, #8
    5220:	46bd      	mov	sp, r7
    5222:	bd80      	pop	{r7, pc}
    5224:	00005145 	.word	0x00005145

00005228 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5228:	b580      	push	{r7, lr}
    522a:	b082      	sub	sp, #8
    522c:	af00      	add	r7, sp, #0
    522e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	781b      	ldrb	r3, [r3, #0]
    5234:	b2db      	uxtb	r3, r3
    5236:	f023 0302 	bic.w	r3, r3, #2
    523a:	b2da      	uxtb	r2, r3
    523c:	687b      	ldr	r3, [r7, #4]
    523e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    5240:	2103      	movs	r1, #3
    5242:	6878      	ldr	r0, [r7, #4]
    5244:	4b02      	ldr	r3, [pc, #8]	; (5250 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    5246:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    5248:	bf00      	nop
    524a:	3708      	adds	r7, #8
    524c:	46bd      	mov	sp, r7
    524e:	bd80      	pop	{r7, pc}
    5250:	00005145 	.word	0x00005145

00005254 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    5254:	b580      	push	{r7, lr}
    5256:	b084      	sub	sp, #16
    5258:	af00      	add	r7, sp, #0
    525a:	6078      	str	r0, [r7, #4]
    525c:	460b      	mov	r3, r1
    525e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    5260:	687b      	ldr	r3, [r7, #4]
    5262:	781b      	ldrb	r3, [r3, #0]
    5264:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    5266:	7bfb      	ldrb	r3, [r7, #15]
    5268:	f023 0310 	bic.w	r3, r3, #16
    526c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    526e:	78fb      	ldrb	r3, [r7, #3]
    5270:	011b      	lsls	r3, r3, #4
    5272:	b25a      	sxtb	r2, r3
    5274:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5278:	4313      	orrs	r3, r2
    527a:	b25b      	sxtb	r3, r3
    527c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    527e:	687b      	ldr	r3, [r7, #4]
    5280:	7bfa      	ldrb	r2, [r7, #15]
    5282:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    5284:	2103      	movs	r1, #3
    5286:	6878      	ldr	r0, [r7, #4]
    5288:	4b02      	ldr	r3, [pc, #8]	; (5294 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    528a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    528c:	bf00      	nop
    528e:	3710      	adds	r7, #16
    5290:	46bd      	mov	sp, r7
    5292:	bd80      	pop	{r7, pc}
    5294:	00005145 	.word	0x00005145

00005298 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    5298:	b580      	push	{r7, lr}
    529a:	b084      	sub	sp, #16
    529c:	af00      	add	r7, sp, #0
    529e:	6078      	str	r0, [r7, #4]
    52a0:	460b      	mov	r3, r1
    52a2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    52a4:	2103      	movs	r1, #3
    52a6:	6878      	ldr	r0, [r7, #4]
    52a8:	4b06      	ldr	r3, [pc, #24]	; (52c4 <hri_eic_get_CTRLA_reg+0x2c>)
    52aa:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	781b      	ldrb	r3, [r3, #0]
    52b0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    52b2:	7bfa      	ldrb	r2, [r7, #15]
    52b4:	78fb      	ldrb	r3, [r7, #3]
    52b6:	4013      	ands	r3, r2
    52b8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    52ba:	7bfb      	ldrb	r3, [r7, #15]
}
    52bc:	4618      	mov	r0, r3
    52be:	3710      	adds	r7, #16
    52c0:	46bd      	mov	sp, r7
    52c2:	bd80      	pop	{r7, pc}
    52c4:	00005145 	.word	0x00005145

000052c8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    52c8:	b580      	push	{r7, lr}
    52ca:	b082      	sub	sp, #8
    52cc:	af00      	add	r7, sp, #0
    52ce:	6078      	str	r0, [r7, #4]
    52d0:	460b      	mov	r3, r1
    52d2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    52d4:	687b      	ldr	r3, [r7, #4]
    52d6:	78fa      	ldrb	r2, [r7, #3]
    52d8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    52da:	2103      	movs	r1, #3
    52dc:	6878      	ldr	r0, [r7, #4]
    52de:	4b03      	ldr	r3, [pc, #12]	; (52ec <hri_eic_write_CTRLA_reg+0x24>)
    52e0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    52e2:	bf00      	nop
    52e4:	3708      	adds	r7, #8
    52e6:	46bd      	mov	sp, r7
    52e8:	bd80      	pop	{r7, pc}
    52ea:	bf00      	nop
    52ec:	00005145 	.word	0x00005145

000052f0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    52f0:	b480      	push	{r7}
    52f2:	b083      	sub	sp, #12
    52f4:	af00      	add	r7, sp, #0
    52f6:	6078      	str	r0, [r7, #4]
    52f8:	460b      	mov	r3, r1
    52fa:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    52fc:	687b      	ldr	r3, [r7, #4]
    52fe:	78fa      	ldrb	r2, [r7, #3]
    5300:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5302:	bf00      	nop
    5304:	370c      	adds	r7, #12
    5306:	46bd      	mov	sp, r7
    5308:	f85d 7b04 	ldr.w	r7, [sp], #4
    530c:	4770      	bx	lr

0000530e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    530e:	b480      	push	{r7}
    5310:	b083      	sub	sp, #12
    5312:	af00      	add	r7, sp, #0
    5314:	6078      	str	r0, [r7, #4]
    5316:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    5318:	687b      	ldr	r3, [r7, #4]
    531a:	683a      	ldr	r2, [r7, #0]
    531c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    531e:	bf00      	nop
    5320:	370c      	adds	r7, #12
    5322:	46bd      	mov	sp, r7
    5324:	f85d 7b04 	ldr.w	r7, [sp], #4
    5328:	4770      	bx	lr

0000532a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    532a:	b480      	push	{r7}
    532c:	b083      	sub	sp, #12
    532e:	af00      	add	r7, sp, #0
    5330:	6078      	str	r0, [r7, #4]
    5332:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    5334:	687b      	ldr	r3, [r7, #4]
    5336:	683a      	ldr	r2, [r7, #0]
    5338:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    533a:	bf00      	nop
    533c:	370c      	adds	r7, #12
    533e:	46bd      	mov	sp, r7
    5340:	f85d 7b04 	ldr.w	r7, [sp], #4
    5344:	4770      	bx	lr

00005346 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    5346:	b480      	push	{r7}
    5348:	b085      	sub	sp, #20
    534a:	af00      	add	r7, sp, #0
    534c:	60f8      	str	r0, [r7, #12]
    534e:	460b      	mov	r3, r1
    5350:	607a      	str	r2, [r7, #4]
    5352:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    5354:	7afb      	ldrb	r3, [r7, #11]
    5356:	68fa      	ldr	r2, [r7, #12]
    5358:	3306      	adds	r3, #6
    535a:	009b      	lsls	r3, r3, #2
    535c:	4413      	add	r3, r2
    535e:	687a      	ldr	r2, [r7, #4]
    5360:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5362:	bf00      	nop
    5364:	3714      	adds	r7, #20
    5366:	46bd      	mov	sp, r7
    5368:	f85d 7b04 	ldr.w	r7, [sp], #4
    536c:	4770      	bx	lr

0000536e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    536e:	b480      	push	{r7}
    5370:	b083      	sub	sp, #12
    5372:	af00      	add	r7, sp, #0
    5374:	6078      	str	r0, [r7, #4]
    5376:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    5378:	687b      	ldr	r3, [r7, #4]
    537a:	683a      	ldr	r2, [r7, #0]
    537c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    537e:	bf00      	nop
    5380:	370c      	adds	r7, #12
    5382:	46bd      	mov	sp, r7
    5384:	f85d 7b04 	ldr.w	r7, [sp], #4
    5388:	4770      	bx	lr

0000538a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    538a:	b480      	push	{r7}
    538c:	b083      	sub	sp, #12
    538e:	af00      	add	r7, sp, #0
    5390:	6078      	str	r0, [r7, #4]
    5392:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    5394:	687b      	ldr	r3, [r7, #4]
    5396:	683a      	ldr	r2, [r7, #0]
    5398:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    539a:	bf00      	nop
    539c:	370c      	adds	r7, #12
    539e:	46bd      	mov	sp, r7
    53a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    53a4:	4770      	bx	lr
	...

000053a8 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    53a8:	b580      	push	{r7, lr}
    53aa:	b082      	sub	sp, #8
    53ac:	af00      	add	r7, sp, #0
    53ae:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    53b0:	2101      	movs	r1, #1
    53b2:	484f      	ldr	r0, [pc, #316]	; (54f0 <_ext_irq_init+0x148>)
    53b4:	4b4f      	ldr	r3, [pc, #316]	; (54f4 <_ext_irq_init+0x14c>)
    53b6:	4798      	blx	r3
    53b8:	4603      	mov	r3, r0
    53ba:	f083 0301 	eor.w	r3, r3, #1
    53be:	b2db      	uxtb	r3, r3
    53c0:	2b00      	cmp	r3, #0
    53c2:	d011      	beq.n	53e8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    53c4:	2102      	movs	r1, #2
    53c6:	484a      	ldr	r0, [pc, #296]	; (54f0 <_ext_irq_init+0x148>)
    53c8:	4b4b      	ldr	r3, [pc, #300]	; (54f8 <_ext_irq_init+0x150>)
    53ca:	4798      	blx	r3
    53cc:	4603      	mov	r3, r0
    53ce:	2b00      	cmp	r3, #0
    53d0:	d006      	beq.n	53e0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    53d2:	4847      	ldr	r0, [pc, #284]	; (54f0 <_ext_irq_init+0x148>)
    53d4:	4b49      	ldr	r3, [pc, #292]	; (54fc <_ext_irq_init+0x154>)
    53d6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    53d8:	2102      	movs	r1, #2
    53da:	4845      	ldr	r0, [pc, #276]	; (54f0 <_ext_irq_init+0x148>)
    53dc:	4b48      	ldr	r3, [pc, #288]	; (5500 <_ext_irq_init+0x158>)
    53de:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    53e0:	2101      	movs	r1, #1
    53e2:	4843      	ldr	r0, [pc, #268]	; (54f0 <_ext_irq_init+0x148>)
    53e4:	4b47      	ldr	r3, [pc, #284]	; (5504 <_ext_irq_init+0x15c>)
    53e6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    53e8:	2101      	movs	r1, #1
    53ea:	4841      	ldr	r0, [pc, #260]	; (54f0 <_ext_irq_init+0x148>)
    53ec:	4b44      	ldr	r3, [pc, #272]	; (5500 <_ext_irq_init+0x158>)
    53ee:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    53f0:	2100      	movs	r1, #0
    53f2:	483f      	ldr	r0, [pc, #252]	; (54f0 <_ext_irq_init+0x148>)
    53f4:	4b44      	ldr	r3, [pc, #272]	; (5508 <_ext_irq_init+0x160>)
    53f6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    53f8:	2100      	movs	r1, #0
    53fa:	483d      	ldr	r0, [pc, #244]	; (54f0 <_ext_irq_init+0x148>)
    53fc:	4b43      	ldr	r3, [pc, #268]	; (550c <_ext_irq_init+0x164>)
    53fe:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    5400:	2100      	movs	r1, #0
    5402:	483b      	ldr	r0, [pc, #236]	; (54f0 <_ext_irq_init+0x148>)
    5404:	4b42      	ldr	r3, [pc, #264]	; (5510 <_ext_irq_init+0x168>)
    5406:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    5408:	f240 31bb 	movw	r1, #955	; 0x3bb
    540c:	4838      	ldr	r0, [pc, #224]	; (54f0 <_ext_irq_init+0x148>)
    540e:	4b41      	ldr	r3, [pc, #260]	; (5514 <_ext_irq_init+0x16c>)
    5410:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    5412:	f240 313b 	movw	r1, #827	; 0x33b
    5416:	4836      	ldr	r0, [pc, #216]	; (54f0 <_ext_irq_init+0x148>)
    5418:	4b3f      	ldr	r3, [pc, #252]	; (5518 <_ext_irq_init+0x170>)
    541a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    541c:	2100      	movs	r1, #0
    541e:	4834      	ldr	r0, [pc, #208]	; (54f0 <_ext_irq_init+0x148>)
    5420:	4b3e      	ldr	r3, [pc, #248]	; (551c <_ext_irq_init+0x174>)
    5422:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    5424:	4a3e      	ldr	r2, [pc, #248]	; (5520 <_ext_irq_init+0x178>)
    5426:	2100      	movs	r1, #0
    5428:	4831      	ldr	r0, [pc, #196]	; (54f0 <_ext_irq_init+0x148>)
    542a:	4b3e      	ldr	r3, [pc, #248]	; (5524 <_ext_irq_init+0x17c>)
    542c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    542e:	2211      	movs	r2, #17
    5430:	2101      	movs	r1, #1
    5432:	482f      	ldr	r0, [pc, #188]	; (54f0 <_ext_irq_init+0x148>)
    5434:	4b3b      	ldr	r3, [pc, #236]	; (5524 <_ext_irq_init+0x17c>)
    5436:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    5438:	482d      	ldr	r0, [pc, #180]	; (54f0 <_ext_irq_init+0x148>)
    543a:	4b3b      	ldr	r3, [pc, #236]	; (5528 <_ext_irq_init+0x180>)
    543c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    543e:	200c      	movs	r0, #12
    5440:	4b3a      	ldr	r3, [pc, #232]	; (552c <_ext_irq_init+0x184>)
    5442:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    5444:	200c      	movs	r0, #12
    5446:	4b3a      	ldr	r3, [pc, #232]	; (5530 <_ext_irq_init+0x188>)
    5448:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    544a:	200c      	movs	r0, #12
    544c:	4b39      	ldr	r3, [pc, #228]	; (5534 <_ext_irq_init+0x18c>)
    544e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    5450:	200d      	movs	r0, #13
    5452:	4b36      	ldr	r3, [pc, #216]	; (552c <_ext_irq_init+0x184>)
    5454:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    5456:	200d      	movs	r0, #13
    5458:	4b35      	ldr	r3, [pc, #212]	; (5530 <_ext_irq_init+0x188>)
    545a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    545c:	200d      	movs	r0, #13
    545e:	4b35      	ldr	r3, [pc, #212]	; (5534 <_ext_irq_init+0x18c>)
    5460:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    5462:	200f      	movs	r0, #15
    5464:	4b31      	ldr	r3, [pc, #196]	; (552c <_ext_irq_init+0x184>)
    5466:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    5468:	200f      	movs	r0, #15
    546a:	4b31      	ldr	r3, [pc, #196]	; (5530 <_ext_irq_init+0x188>)
    546c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    546e:	200f      	movs	r0, #15
    5470:	4b30      	ldr	r3, [pc, #192]	; (5534 <_ext_irq_init+0x18c>)
    5472:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    5474:	2010      	movs	r0, #16
    5476:	4b2d      	ldr	r3, [pc, #180]	; (552c <_ext_irq_init+0x184>)
    5478:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    547a:	2010      	movs	r0, #16
    547c:	4b2c      	ldr	r3, [pc, #176]	; (5530 <_ext_irq_init+0x188>)
    547e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    5480:	2010      	movs	r0, #16
    5482:	4b2c      	ldr	r3, [pc, #176]	; (5534 <_ext_irq_init+0x18c>)
    5484:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    5486:	2011      	movs	r0, #17
    5488:	4b28      	ldr	r3, [pc, #160]	; (552c <_ext_irq_init+0x184>)
    548a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    548c:	2011      	movs	r0, #17
    548e:	4b28      	ldr	r3, [pc, #160]	; (5530 <_ext_irq_init+0x188>)
    5490:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    5492:	2011      	movs	r0, #17
    5494:	4b27      	ldr	r3, [pc, #156]	; (5534 <_ext_irq_init+0x18c>)
    5496:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    5498:	2012      	movs	r0, #18
    549a:	4b24      	ldr	r3, [pc, #144]	; (552c <_ext_irq_init+0x184>)
    549c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    549e:	2012      	movs	r0, #18
    54a0:	4b23      	ldr	r3, [pc, #140]	; (5530 <_ext_irq_init+0x188>)
    54a2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    54a4:	2012      	movs	r0, #18
    54a6:	4b23      	ldr	r3, [pc, #140]	; (5534 <_ext_irq_init+0x18c>)
    54a8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    54aa:	2013      	movs	r0, #19
    54ac:	4b1f      	ldr	r3, [pc, #124]	; (552c <_ext_irq_init+0x184>)
    54ae:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    54b0:	2013      	movs	r0, #19
    54b2:	4b1f      	ldr	r3, [pc, #124]	; (5530 <_ext_irq_init+0x188>)
    54b4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    54b6:	2013      	movs	r0, #19
    54b8:	4b1e      	ldr	r3, [pc, #120]	; (5534 <_ext_irq_init+0x18c>)
    54ba:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    54bc:	2014      	movs	r0, #20
    54be:	4b1b      	ldr	r3, [pc, #108]	; (552c <_ext_irq_init+0x184>)
    54c0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    54c2:	2014      	movs	r0, #20
    54c4:	4b1a      	ldr	r3, [pc, #104]	; (5530 <_ext_irq_init+0x188>)
    54c6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    54c8:	2014      	movs	r0, #20
    54ca:	4b1a      	ldr	r3, [pc, #104]	; (5534 <_ext_irq_init+0x18c>)
    54cc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    54ce:	2015      	movs	r0, #21
    54d0:	4b16      	ldr	r3, [pc, #88]	; (552c <_ext_irq_init+0x184>)
    54d2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    54d4:	2015      	movs	r0, #21
    54d6:	4b16      	ldr	r3, [pc, #88]	; (5530 <_ext_irq_init+0x188>)
    54d8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    54da:	2015      	movs	r0, #21
    54dc:	4b15      	ldr	r3, [pc, #84]	; (5534 <_ext_irq_init+0x18c>)
    54de:	4798      	blx	r3

	callback = cb;
    54e0:	4a15      	ldr	r2, [pc, #84]	; (5538 <_ext_irq_init+0x190>)
    54e2:	687b      	ldr	r3, [r7, #4]
    54e4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    54e6:	2300      	movs	r3, #0
}
    54e8:	4618      	mov	r0, r3
    54ea:	3708      	adds	r7, #8
    54ec:	46bd      	mov	sp, r7
    54ee:	bd80      	pop	{r7, pc}
    54f0:	40002800 	.word	0x40002800
    54f4:	00005169 	.word	0x00005169
    54f8:	00005299 	.word	0x00005299
    54fc:	00005229 	.word	0x00005229
    5500:	00005145 	.word	0x00005145
    5504:	000052c9 	.word	0x000052c9
    5508:	00005255 	.word	0x00005255
    550c:	000052f1 	.word	0x000052f1
    5510:	0000530f 	.word	0x0000530f
    5514:	0000532b 	.word	0x0000532b
    5518:	0000536f 	.word	0x0000536f
    551c:	0000538b 	.word	0x0000538b
    5520:	90999013 	.word	0x90999013
    5524:	00005347 	.word	0x00005347
    5528:	000051fd 	.word	0x000051fd
    552c:	000050c5 	.word	0x000050c5
    5530:	00005109 	.word	0x00005109
    5534:	00005089 	.word	0x00005089
    5538:	20000e1c 	.word	0x20000e1c

0000553c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    553c:	b580      	push	{r7, lr}
    553e:	b084      	sub	sp, #16
    5540:	af00      	add	r7, sp, #0
    5542:	6078      	str	r0, [r7, #4]
    5544:	460b      	mov	r3, r1
    5546:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    5548:	23ff      	movs	r3, #255	; 0xff
    554a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    554c:	2300      	movs	r3, #0
    554e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    5550:	e010      	b.n	5574 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    5552:	7bbb      	ldrb	r3, [r7, #14]
    5554:	4a1c      	ldr	r2, [pc, #112]	; (55c8 <_ext_irq_enable+0x8c>)
    5556:	00db      	lsls	r3, r3, #3
    5558:	4413      	add	r3, r2
    555a:	685a      	ldr	r2, [r3, #4]
    555c:	687b      	ldr	r3, [r7, #4]
    555e:	429a      	cmp	r2, r3
    5560:	d105      	bne.n	556e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    5562:	7bbb      	ldrb	r3, [r7, #14]
    5564:	4a18      	ldr	r2, [pc, #96]	; (55c8 <_ext_irq_enable+0x8c>)
    5566:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    556a:	73fb      	strb	r3, [r7, #15]
			break;
    556c:	e005      	b.n	557a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    556e:	7bbb      	ldrb	r3, [r7, #14]
    5570:	3301      	adds	r3, #1
    5572:	73bb      	strb	r3, [r7, #14]
    5574:	7bbb      	ldrb	r3, [r7, #14]
    5576:	2b08      	cmp	r3, #8
    5578:	d9eb      	bls.n	5552 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    557a:	7bfb      	ldrb	r3, [r7, #15]
    557c:	2bff      	cmp	r3, #255	; 0xff
    557e:	d102      	bne.n	5586 <_ext_irq_enable+0x4a>
		return -1;
    5580:	f04f 33ff 	mov.w	r3, #4294967295
    5584:	e01c      	b.n	55c0 <_ext_irq_enable+0x84>
	}

	if (enable) {
    5586:	78fb      	ldrb	r3, [r7, #3]
    5588:	2b00      	cmp	r3, #0
    558a:	d008      	beq.n	559e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    558c:	7bfb      	ldrb	r3, [r7, #15]
    558e:	2201      	movs	r2, #1
    5590:	fa02 f303 	lsl.w	r3, r2, r3
    5594:	4619      	mov	r1, r3
    5596:	480d      	ldr	r0, [pc, #52]	; (55cc <_ext_irq_enable+0x90>)
    5598:	4b0d      	ldr	r3, [pc, #52]	; (55d0 <_ext_irq_enable+0x94>)
    559a:	4798      	blx	r3
    559c:	e00f      	b.n	55be <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    559e:	7bfb      	ldrb	r3, [r7, #15]
    55a0:	2201      	movs	r2, #1
    55a2:	fa02 f303 	lsl.w	r3, r2, r3
    55a6:	4619      	mov	r1, r3
    55a8:	4808      	ldr	r0, [pc, #32]	; (55cc <_ext_irq_enable+0x90>)
    55aa:	4b0a      	ldr	r3, [pc, #40]	; (55d4 <_ext_irq_enable+0x98>)
    55ac:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    55ae:	7bfb      	ldrb	r3, [r7, #15]
    55b0:	2201      	movs	r2, #1
    55b2:	fa02 f303 	lsl.w	r3, r2, r3
    55b6:	4619      	mov	r1, r3
    55b8:	4804      	ldr	r0, [pc, #16]	; (55cc <_ext_irq_enable+0x90>)
    55ba:	4b07      	ldr	r3, [pc, #28]	; (55d8 <_ext_irq_enable+0x9c>)
    55bc:	4798      	blx	r3
	}

	return ERR_NONE;
    55be:	2300      	movs	r3, #0
}
    55c0:	4618      	mov	r0, r3
    55c2:	3710      	adds	r7, #16
    55c4:	46bd      	mov	sp, r7
    55c6:	bd80      	pop	{r7, pc}
    55c8:	00010e6c 	.word	0x00010e6c
    55cc:	40002800 	.word	0x40002800
    55d0:	000051c5 	.word	0x000051c5
    55d4:	000051e1 	.word	0x000051e1
    55d8:	000051a9 	.word	0x000051a9

000055dc <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    55dc:	b580      	push	{r7, lr}
    55de:	b084      	sub	sp, #16
    55e0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    55e2:	4841      	ldr	r0, [pc, #260]	; (56e8 <_ext_irq_handler+0x10c>)
    55e4:	4b41      	ldr	r3, [pc, #260]	; (56ec <_ext_irq_handler+0x110>)
    55e6:	4798      	blx	r3
    55e8:	4603      	mov	r3, r0
    55ea:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    55ec:	f04f 33ff 	mov.w	r3, #4294967295
    55f0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    55f2:	683b      	ldr	r3, [r7, #0]
    55f4:	4619      	mov	r1, r3
    55f6:	483c      	ldr	r0, [pc, #240]	; (56e8 <_ext_irq_handler+0x10c>)
    55f8:	4b3d      	ldr	r3, [pc, #244]	; (56f0 <_ext_irq_handler+0x114>)
    55fa:	4798      	blx	r3

	ASSERT(callback);
    55fc:	4b3d      	ldr	r3, [pc, #244]	; (56f4 <_ext_irq_handler+0x118>)
    55fe:	681b      	ldr	r3, [r3, #0]
    5600:	2b00      	cmp	r3, #0
    5602:	bf14      	ite	ne
    5604:	2301      	movne	r3, #1
    5606:	2300      	moveq	r3, #0
    5608:	b2db      	uxtb	r3, r3
    560a:	f44f 7284 	mov.w	r2, #264	; 0x108
    560e:	493a      	ldr	r1, [pc, #232]	; (56f8 <_ext_irq_handler+0x11c>)
    5610:	4618      	mov	r0, r3
    5612:	4b3a      	ldr	r3, [pc, #232]	; (56fc <_ext_irq_handler+0x120>)
    5614:	4798      	blx	r3

	while (flags) {
    5616:	e060      	b.n	56da <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    5618:	683b      	ldr	r3, [r7, #0]
    561a:	4618      	mov	r0, r3
    561c:	4b38      	ldr	r3, [pc, #224]	; (5700 <_ext_irq_handler+0x124>)
    561e:	4798      	blx	r3
    5620:	4603      	mov	r3, r0
    5622:	b2db      	uxtb	r3, r3
    5624:	3b01      	subs	r3, #1
    5626:	b2db      	uxtb	r3, r3
    5628:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    562a:	e047      	b.n	56bc <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    562c:	2300      	movs	r3, #0
    562e:	71fb      	strb	r3, [r7, #7]
    5630:	2309      	movs	r3, #9
    5632:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    5634:	e024      	b.n	5680 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    5636:	79ba      	ldrb	r2, [r7, #6]
    5638:	79fb      	ldrb	r3, [r7, #7]
    563a:	4413      	add	r3, r2
    563c:	105b      	asrs	r3, r3, #1
    563e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    5640:	797b      	ldrb	r3, [r7, #5]
    5642:	4a30      	ldr	r2, [pc, #192]	; (5704 <_ext_irq_handler+0x128>)
    5644:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5648:	461a      	mov	r2, r3
    564a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    564e:	429a      	cmp	r2, r3
    5650:	d106      	bne.n	5660 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    5652:	797b      	ldrb	r3, [r7, #5]
    5654:	4a2b      	ldr	r2, [pc, #172]	; (5704 <_ext_irq_handler+0x128>)
    5656:	00db      	lsls	r3, r3, #3
    5658:	4413      	add	r3, r2
    565a:	685b      	ldr	r3, [r3, #4]
    565c:	60bb      	str	r3, [r7, #8]
					break;
    565e:	e013      	b.n	5688 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    5660:	797b      	ldrb	r3, [r7, #5]
    5662:	4a28      	ldr	r2, [pc, #160]	; (5704 <_ext_irq_handler+0x128>)
    5664:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5668:	461a      	mov	r2, r3
    566a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    566e:	429a      	cmp	r2, r3
    5670:	da03      	bge.n	567a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    5672:	797b      	ldrb	r3, [r7, #5]
    5674:	3301      	adds	r3, #1
    5676:	71fb      	strb	r3, [r7, #7]
    5678:	e002      	b.n	5680 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    567a:	797b      	ldrb	r3, [r7, #5]
    567c:	3b01      	subs	r3, #1
    567e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    5680:	79ba      	ldrb	r2, [r7, #6]
    5682:	79fb      	ldrb	r3, [r7, #7]
    5684:	429a      	cmp	r2, r3
    5686:	d2d6      	bcs.n	5636 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    5688:	68bb      	ldr	r3, [r7, #8]
    568a:	f1b3 3fff 	cmp.w	r3, #4294967295
    568e:	d003      	beq.n	5698 <_ext_irq_handler+0xbc>
				callback(pin);
    5690:	4b18      	ldr	r3, [pc, #96]	; (56f4 <_ext_irq_handler+0x118>)
    5692:	681b      	ldr	r3, [r3, #0]
    5694:	68b8      	ldr	r0, [r7, #8]
    5696:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    5698:	f997 300f 	ldrsb.w	r3, [r7, #15]
    569c:	2201      	movs	r2, #1
    569e:	fa02 f303 	lsl.w	r3, r2, r3
    56a2:	43da      	mvns	r2, r3
    56a4:	683b      	ldr	r3, [r7, #0]
    56a6:	4013      	ands	r3, r2
    56a8:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    56aa:	683b      	ldr	r3, [r7, #0]
    56ac:	4618      	mov	r0, r3
    56ae:	4b14      	ldr	r3, [pc, #80]	; (5700 <_ext_irq_handler+0x124>)
    56b0:	4798      	blx	r3
    56b2:	4603      	mov	r3, r0
    56b4:	b2db      	uxtb	r3, r3
    56b6:	3b01      	subs	r3, #1
    56b8:	b2db      	uxtb	r3, r3
    56ba:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    56bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    56c0:	f1b3 3fff 	cmp.w	r3, #4294967295
    56c4:	d1b2      	bne.n	562c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    56c6:	4808      	ldr	r0, [pc, #32]	; (56e8 <_ext_irq_handler+0x10c>)
    56c8:	4b08      	ldr	r3, [pc, #32]	; (56ec <_ext_irq_handler+0x110>)
    56ca:	4798      	blx	r3
    56cc:	4603      	mov	r3, r0
    56ce:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    56d0:	683b      	ldr	r3, [r7, #0]
    56d2:	4619      	mov	r1, r3
    56d4:	4804      	ldr	r0, [pc, #16]	; (56e8 <_ext_irq_handler+0x10c>)
    56d6:	4b06      	ldr	r3, [pc, #24]	; (56f0 <_ext_irq_handler+0x114>)
    56d8:	4798      	blx	r3
	while (flags) {
    56da:	683b      	ldr	r3, [r7, #0]
    56dc:	2b00      	cmp	r3, #0
    56de:	d19b      	bne.n	5618 <_ext_irq_handler+0x3c>
	}
}
    56e0:	bf00      	nop
    56e2:	3710      	adds	r7, #16
    56e4:	46bd      	mov	sp, r7
    56e6:	bd80      	pop	{r7, pc}
    56e8:	40002800 	.word	0x40002800
    56ec:	00005191 	.word	0x00005191
    56f0:	000051a9 	.word	0x000051a9
    56f4:	20000e1c 	.word	0x20000e1c
    56f8:	00010eb4 	.word	0x00010eb4
    56fc:	00004409 	.word	0x00004409
    5700:	000108dd 	.word	0x000108dd
    5704:	00010e6c 	.word	0x00010e6c

00005708 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    5708:	b580      	push	{r7, lr}
    570a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    570c:	4b01      	ldr	r3, [pc, #4]	; (5714 <EIC_0_Handler+0xc>)
    570e:	4798      	blx	r3
} /**
    5710:	bf00      	nop
    5712:	bd80      	pop	{r7, pc}
    5714:	000055dd 	.word	0x000055dd

00005718 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    5718:	b580      	push	{r7, lr}
    571a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    571c:	4b01      	ldr	r3, [pc, #4]	; (5724 <EIC_1_Handler+0xc>)
    571e:	4798      	blx	r3
} /**
    5720:	bf00      	nop
    5722:	bd80      	pop	{r7, pc}
    5724:	000055dd 	.word	0x000055dd

00005728 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    5728:	b580      	push	{r7, lr}
    572a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    572c:	4b01      	ldr	r3, [pc, #4]	; (5734 <EIC_3_Handler+0xc>)
    572e:	4798      	blx	r3
} /**
    5730:	bf00      	nop
    5732:	bd80      	pop	{r7, pc}
    5734:	000055dd 	.word	0x000055dd

00005738 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5738:	b580      	push	{r7, lr}
    573a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    573c:	4b01      	ldr	r3, [pc, #4]	; (5744 <EIC_4_Handler+0xc>)
    573e:	4798      	blx	r3
} /**
    5740:	bf00      	nop
    5742:	bd80      	pop	{r7, pc}
    5744:	000055dd 	.word	0x000055dd

00005748 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5748:	b580      	push	{r7, lr}
    574a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    574c:	4b01      	ldr	r3, [pc, #4]	; (5754 <EIC_5_Handler+0xc>)
    574e:	4798      	blx	r3
} /**
    5750:	bf00      	nop
    5752:	bd80      	pop	{r7, pc}
    5754:	000055dd 	.word	0x000055dd

00005758 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5758:	b580      	push	{r7, lr}
    575a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    575c:	4b01      	ldr	r3, [pc, #4]	; (5764 <EIC_6_Handler+0xc>)
    575e:	4798      	blx	r3
} /**
    5760:	bf00      	nop
    5762:	bd80      	pop	{r7, pc}
    5764:	000055dd 	.word	0x000055dd

00005768 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    5768:	b580      	push	{r7, lr}
    576a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    576c:	4b01      	ldr	r3, [pc, #4]	; (5774 <EIC_7_Handler+0xc>)
    576e:	4798      	blx	r3
} /**
    5770:	bf00      	nop
    5772:	bd80      	pop	{r7, pc}
    5774:	000055dd 	.word	0x000055dd

00005778 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    5778:	b580      	push	{r7, lr}
    577a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    577c:	4b01      	ldr	r3, [pc, #4]	; (5784 <EIC_8_Handler+0xc>)
    577e:	4798      	blx	r3
} /**
    5780:	bf00      	nop
    5782:	bd80      	pop	{r7, pc}
    5784:	000055dd 	.word	0x000055dd

00005788 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    5788:	b580      	push	{r7, lr}
    578a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    578c:	4b01      	ldr	r3, [pc, #4]	; (5794 <EIC_9_Handler+0xc>)
    578e:	4798      	blx	r3
}
    5790:	bf00      	nop
    5792:	bd80      	pop	{r7, pc}
    5794:	000055dd 	.word	0x000055dd

00005798 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    5798:	b480      	push	{r7}
    579a:	b085      	sub	sp, #20
    579c:	af00      	add	r7, sp, #0
    579e:	60f8      	str	r0, [r7, #12]
    57a0:	460b      	mov	r3, r1
    57a2:	607a      	str	r2, [r7, #4]
    57a4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    57a6:	7afa      	ldrb	r2, [r7, #11]
    57a8:	68fb      	ldr	r3, [r7, #12]
    57aa:	3248      	adds	r2, #72	; 0x48
    57ac:	6879      	ldr	r1, [r7, #4]
    57ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    57b2:	bf00      	nop
    57b4:	3714      	adds	r7, #20
    57b6:	46bd      	mov	sp, r7
    57b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    57bc:	4770      	bx	lr

000057be <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    57be:	b480      	push	{r7}
    57c0:	b083      	sub	sp, #12
    57c2:	af00      	add	r7, sp, #0
    57c4:	6078      	str	r0, [r7, #4]
    57c6:	460b      	mov	r3, r1
    57c8:	70fb      	strb	r3, [r7, #3]
    57ca:	4613      	mov	r3, r2
    57cc:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    57ce:	78fb      	ldrb	r3, [r7, #3]
    57d0:	687a      	ldr	r2, [r7, #4]
    57d2:	3304      	adds	r3, #4
    57d4:	00db      	lsls	r3, r3, #3
    57d6:	4413      	add	r3, r2
    57d8:	78ba      	ldrb	r2, [r7, #2]
    57da:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    57dc:	78fb      	ldrb	r3, [r7, #3]
    57de:	78ba      	ldrb	r2, [r7, #2]
    57e0:	43d2      	mvns	r2, r2
    57e2:	b2d1      	uxtb	r1, r2
    57e4:	687a      	ldr	r2, [r7, #4]
    57e6:	3304      	adds	r3, #4
    57e8:	00db      	lsls	r3, r3, #3
    57ea:	4413      	add	r3, r2
    57ec:	460a      	mov	r2, r1
    57ee:	711a      	strb	r2, [r3, #4]
}
    57f0:	bf00      	nop
    57f2:	370c      	adds	r7, #12
    57f4:	46bd      	mov	sp, r7
    57f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57fa:	4770      	bx	lr

000057fc <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    57fc:	b480      	push	{r7}
    57fe:	b085      	sub	sp, #20
    5800:	af00      	add	r7, sp, #0
    5802:	60f8      	str	r0, [r7, #12]
    5804:	460b      	mov	r3, r1
    5806:	607a      	str	r2, [r7, #4]
    5808:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    580a:	7afa      	ldrb	r2, [r7, #11]
    580c:	68fb      	ldr	r3, [r7, #12]
    580e:	3204      	adds	r2, #4
    5810:	6879      	ldr	r1, [r7, #4]
    5812:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5816:	bf00      	nop
    5818:	3714      	adds	r7, #20
    581a:	46bd      	mov	sp, r7
    581c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5820:	4770      	bx	lr
	...

00005824 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    5824:	b580      	push	{r7, lr}
    5826:	b082      	sub	sp, #8
    5828:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    582a:	2300      	movs	r3, #0
    582c:	71fb      	strb	r3, [r7, #7]
    582e:	e00b      	b.n	5848 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5830:	79fb      	ldrb	r3, [r7, #7]
    5832:	4a18      	ldr	r2, [pc, #96]	; (5894 <_event_system_init+0x70>)
    5834:	5cd3      	ldrb	r3, [r2, r3]
    5836:	461a      	mov	r2, r3
    5838:	79fb      	ldrb	r3, [r7, #7]
    583a:	4619      	mov	r1, r3
    583c:	4816      	ldr	r0, [pc, #88]	; (5898 <_event_system_init+0x74>)
    583e:	4b17      	ldr	r3, [pc, #92]	; (589c <_event_system_init+0x78>)
    5840:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    5842:	79fb      	ldrb	r3, [r7, #7]
    5844:	3301      	adds	r3, #1
    5846:	71fb      	strb	r3, [r7, #7]
    5848:	79fb      	ldrb	r3, [r7, #7]
    584a:	2b42      	cmp	r3, #66	; 0x42
    584c:	d9f0      	bls.n	5830 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    584e:	2300      	movs	r3, #0
    5850:	71fb      	strb	r3, [r7, #7]
    5852:	e016      	b.n	5882 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5854:	79fb      	ldrb	r3, [r7, #7]
    5856:	4a12      	ldr	r2, [pc, #72]	; (58a0 <_event_system_init+0x7c>)
    5858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    585c:	461a      	mov	r2, r3
    585e:	79fb      	ldrb	r3, [r7, #7]
    5860:	4619      	mov	r1, r3
    5862:	480d      	ldr	r0, [pc, #52]	; (5898 <_event_system_init+0x74>)
    5864:	4b0f      	ldr	r3, [pc, #60]	; (58a4 <_event_system_init+0x80>)
    5866:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5868:	79fb      	ldrb	r3, [r7, #7]
    586a:	4a0f      	ldr	r2, [pc, #60]	; (58a8 <_event_system_init+0x84>)
    586c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5870:	b2da      	uxtb	r2, r3
    5872:	79fb      	ldrb	r3, [r7, #7]
    5874:	4619      	mov	r1, r3
    5876:	4808      	ldr	r0, [pc, #32]	; (5898 <_event_system_init+0x74>)
    5878:	4b0c      	ldr	r3, [pc, #48]	; (58ac <_event_system_init+0x88>)
    587a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    587c:	79fb      	ldrb	r3, [r7, #7]
    587e:	3301      	adds	r3, #1
    5880:	71fb      	strb	r3, [r7, #7]
    5882:	79fb      	ldrb	r3, [r7, #7]
    5884:	2b1f      	cmp	r3, #31
    5886:	d9e5      	bls.n	5854 <_event_system_init+0x30>
	}

	return ERR_NONE;
    5888:	2300      	movs	r3, #0
}
    588a:	4618      	mov	r0, r3
    588c:	3708      	adds	r7, #8
    588e:	46bd      	mov	sp, r7
    5890:	bd80      	pop	{r7, pc}
    5892:	bf00      	nop
    5894:	00010ecc 	.word	0x00010ecc
    5898:	4100e000 	.word	0x4100e000
    589c:	00005799 	.word	0x00005799
    58a0:	00010f10 	.word	0x00010f10
    58a4:	000057fd 	.word	0x000057fd
    58a8:	00010f50 	.word	0x00010f50
    58ac:	000057bf 	.word	0x000057bf

000058b0 <hri_gclk_wait_for_sync>:
{
    58b0:	b480      	push	{r7}
    58b2:	b083      	sub	sp, #12
    58b4:	af00      	add	r7, sp, #0
    58b6:	6078      	str	r0, [r7, #4]
    58b8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    58ba:	bf00      	nop
    58bc:	687b      	ldr	r3, [r7, #4]
    58be:	685a      	ldr	r2, [r3, #4]
    58c0:	683b      	ldr	r3, [r7, #0]
    58c2:	4013      	ands	r3, r2
    58c4:	2b00      	cmp	r3, #0
    58c6:	d1f9      	bne.n	58bc <hri_gclk_wait_for_sync+0xc>
}
    58c8:	bf00      	nop
    58ca:	370c      	adds	r7, #12
    58cc:	46bd      	mov	sp, r7
    58ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    58d2:	4770      	bx	lr

000058d4 <hri_gclk_write_GENCTRL_reg>:
{
    58d4:	b580      	push	{r7, lr}
    58d6:	b084      	sub	sp, #16
    58d8:	af00      	add	r7, sp, #0
    58da:	60f8      	str	r0, [r7, #12]
    58dc:	460b      	mov	r3, r1
    58de:	607a      	str	r2, [r7, #4]
    58e0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    58e2:	7afa      	ldrb	r2, [r7, #11]
    58e4:	68fb      	ldr	r3, [r7, #12]
    58e6:	3208      	adds	r2, #8
    58e8:	6879      	ldr	r1, [r7, #4]
    58ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    58ee:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    58f2:	68f8      	ldr	r0, [r7, #12]
    58f4:	4b02      	ldr	r3, [pc, #8]	; (5900 <hri_gclk_write_GENCTRL_reg+0x2c>)
    58f6:	4798      	blx	r3
}
    58f8:	bf00      	nop
    58fa:	3710      	adds	r7, #16
    58fc:	46bd      	mov	sp, r7
    58fe:	bd80      	pop	{r7, pc}
    5900:	000058b1 	.word	0x000058b1

00005904 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    5904:	b580      	push	{r7, lr}
    5906:	b082      	sub	sp, #8
    5908:	af00      	add	r7, sp, #0
    590a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    590c:	687b      	ldr	r3, [r7, #4]
    590e:	f003 0301 	and.w	r3, r3, #1
    5912:	2b00      	cmp	r3, #0
    5914:	d004      	beq.n	5920 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    5916:	4a3b      	ldr	r2, [pc, #236]	; (5a04 <_gclk_init_generators_by_fref+0x100>)
    5918:	2100      	movs	r1, #0
    591a:	483b      	ldr	r0, [pc, #236]	; (5a08 <_gclk_init_generators_by_fref+0x104>)
    591c:	4b3b      	ldr	r3, [pc, #236]	; (5a0c <_gclk_init_generators_by_fref+0x108>)
    591e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5920:	687b      	ldr	r3, [r7, #4]
    5922:	f003 0302 	and.w	r3, r3, #2
    5926:	2b00      	cmp	r3, #0
    5928:	d004      	beq.n	5934 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    592a:	4a39      	ldr	r2, [pc, #228]	; (5a10 <_gclk_init_generators_by_fref+0x10c>)
    592c:	2101      	movs	r1, #1
    592e:	4836      	ldr	r0, [pc, #216]	; (5a08 <_gclk_init_generators_by_fref+0x104>)
    5930:	4b36      	ldr	r3, [pc, #216]	; (5a0c <_gclk_init_generators_by_fref+0x108>)
    5932:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5934:	687b      	ldr	r3, [r7, #4]
    5936:	f003 0304 	and.w	r3, r3, #4
    593a:	2b00      	cmp	r3, #0
    593c:	d004      	beq.n	5948 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    593e:	4a35      	ldr	r2, [pc, #212]	; (5a14 <_gclk_init_generators_by_fref+0x110>)
    5940:	2102      	movs	r1, #2
    5942:	4831      	ldr	r0, [pc, #196]	; (5a08 <_gclk_init_generators_by_fref+0x104>)
    5944:	4b31      	ldr	r3, [pc, #196]	; (5a0c <_gclk_init_generators_by_fref+0x108>)
    5946:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5948:	687b      	ldr	r3, [r7, #4]
    594a:	f003 0308 	and.w	r3, r3, #8
    594e:	2b00      	cmp	r3, #0
    5950:	d004      	beq.n	595c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    5952:	4a31      	ldr	r2, [pc, #196]	; (5a18 <_gclk_init_generators_by_fref+0x114>)
    5954:	2103      	movs	r1, #3
    5956:	482c      	ldr	r0, [pc, #176]	; (5a08 <_gclk_init_generators_by_fref+0x104>)
    5958:	4b2c      	ldr	r3, [pc, #176]	; (5a0c <_gclk_init_generators_by_fref+0x108>)
    595a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    595c:	687b      	ldr	r3, [r7, #4]
    595e:	f003 0310 	and.w	r3, r3, #16
    5962:	2b00      	cmp	r3, #0
    5964:	d004      	beq.n	5970 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    5966:	4a2d      	ldr	r2, [pc, #180]	; (5a1c <_gclk_init_generators_by_fref+0x118>)
    5968:	2104      	movs	r1, #4
    596a:	4827      	ldr	r0, [pc, #156]	; (5a08 <_gclk_init_generators_by_fref+0x104>)
    596c:	4b27      	ldr	r3, [pc, #156]	; (5a0c <_gclk_init_generators_by_fref+0x108>)
    596e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    5970:	687b      	ldr	r3, [r7, #4]
    5972:	f003 0320 	and.w	r3, r3, #32
    5976:	2b00      	cmp	r3, #0
    5978:	d004      	beq.n	5984 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    597a:	4a29      	ldr	r2, [pc, #164]	; (5a20 <_gclk_init_generators_by_fref+0x11c>)
    597c:	2105      	movs	r1, #5
    597e:	4822      	ldr	r0, [pc, #136]	; (5a08 <_gclk_init_generators_by_fref+0x104>)
    5980:	4b22      	ldr	r3, [pc, #136]	; (5a0c <_gclk_init_generators_by_fref+0x108>)
    5982:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    5984:	687b      	ldr	r3, [r7, #4]
    5986:	f003 0340 	and.w	r3, r3, #64	; 0x40
    598a:	2b00      	cmp	r3, #0
    598c:	d004      	beq.n	5998 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    598e:	4a25      	ldr	r2, [pc, #148]	; (5a24 <_gclk_init_generators_by_fref+0x120>)
    5990:	2106      	movs	r1, #6
    5992:	481d      	ldr	r0, [pc, #116]	; (5a08 <_gclk_init_generators_by_fref+0x104>)
    5994:	4b1d      	ldr	r3, [pc, #116]	; (5a0c <_gclk_init_generators_by_fref+0x108>)
    5996:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    5998:	687b      	ldr	r3, [r7, #4]
    599a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    599e:	2b00      	cmp	r3, #0
    59a0:	d004      	beq.n	59ac <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    59a2:	4a21      	ldr	r2, [pc, #132]	; (5a28 <_gclk_init_generators_by_fref+0x124>)
    59a4:	2107      	movs	r1, #7
    59a6:	4818      	ldr	r0, [pc, #96]	; (5a08 <_gclk_init_generators_by_fref+0x104>)
    59a8:	4b18      	ldr	r3, [pc, #96]	; (5a0c <_gclk_init_generators_by_fref+0x108>)
    59aa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    59ac:	687b      	ldr	r3, [r7, #4]
    59ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
    59b2:	2b00      	cmp	r3, #0
    59b4:	d004      	beq.n	59c0 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    59b6:	4a1d      	ldr	r2, [pc, #116]	; (5a2c <_gclk_init_generators_by_fref+0x128>)
    59b8:	2108      	movs	r1, #8
    59ba:	4813      	ldr	r0, [pc, #76]	; (5a08 <_gclk_init_generators_by_fref+0x104>)
    59bc:	4b13      	ldr	r3, [pc, #76]	; (5a0c <_gclk_init_generators_by_fref+0x108>)
    59be:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    59c0:	687b      	ldr	r3, [r7, #4]
    59c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
    59c6:	2b00      	cmp	r3, #0
    59c8:	d004      	beq.n	59d4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    59ca:	4a19      	ldr	r2, [pc, #100]	; (5a30 <_gclk_init_generators_by_fref+0x12c>)
    59cc:	2109      	movs	r1, #9
    59ce:	480e      	ldr	r0, [pc, #56]	; (5a08 <_gclk_init_generators_by_fref+0x104>)
    59d0:	4b0e      	ldr	r3, [pc, #56]	; (5a0c <_gclk_init_generators_by_fref+0x108>)
    59d2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    59d4:	687b      	ldr	r3, [r7, #4]
    59d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    59da:	2b00      	cmp	r3, #0
    59dc:	d004      	beq.n	59e8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    59de:	4a15      	ldr	r2, [pc, #84]	; (5a34 <_gclk_init_generators_by_fref+0x130>)
    59e0:	210a      	movs	r1, #10
    59e2:	4809      	ldr	r0, [pc, #36]	; (5a08 <_gclk_init_generators_by_fref+0x104>)
    59e4:	4b09      	ldr	r3, [pc, #36]	; (5a0c <_gclk_init_generators_by_fref+0x108>)
    59e6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    59ee:	2b00      	cmp	r3, #0
    59f0:	d004      	beq.n	59fc <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    59f2:	4a11      	ldr	r2, [pc, #68]	; (5a38 <_gclk_init_generators_by_fref+0x134>)
    59f4:	210b      	movs	r1, #11
    59f6:	4804      	ldr	r0, [pc, #16]	; (5a08 <_gclk_init_generators_by_fref+0x104>)
    59f8:	4b04      	ldr	r3, [pc, #16]	; (5a0c <_gclk_init_generators_by_fref+0x108>)
    59fa:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    59fc:	bf00      	nop
    59fe:	3708      	adds	r7, #8
    5a00:	46bd      	mov	sp, r7
    5a02:	bd80      	pop	{r7, pc}
    5a04:	00010107 	.word	0x00010107
    5a08:	40001c00 	.word	0x40001c00
    5a0c:	000058d5 	.word	0x000058d5
    5a10:	00010907 	.word	0x00010907
    5a14:	00010906 	.word	0x00010906
    5a18:	00020908 	.word	0x00020908
    5a1c:	00010901 	.word	0x00010901
    5a20:	00062901 	.word	0x00062901
    5a24:	000c2901 	.word	0x000c2901
    5a28:	00082908 	.word	0x00082908
    5a2c:	00032901 	.word	0x00032901
    5a30:	00011908 	.word	0x00011908
    5a34:	00010905 	.word	0x00010905
    5a38:	00041905 	.word	0x00041905

00005a3c <hri_mclk_write_CPUDIV_reg>:
{
    5a3c:	b480      	push	{r7}
    5a3e:	b083      	sub	sp, #12
    5a40:	af00      	add	r7, sp, #0
    5a42:	6078      	str	r0, [r7, #4]
    5a44:	460b      	mov	r3, r1
    5a46:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5a48:	687b      	ldr	r3, [r7, #4]
    5a4a:	78fa      	ldrb	r2, [r7, #3]
    5a4c:	715a      	strb	r2, [r3, #5]
}
    5a4e:	bf00      	nop
    5a50:	370c      	adds	r7, #12
    5a52:	46bd      	mov	sp, r7
    5a54:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a58:	4770      	bx	lr
	...

00005a5c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    5a5c:	b580      	push	{r7, lr}
    5a5e:	b082      	sub	sp, #8
    5a60:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    5a62:	4b05      	ldr	r3, [pc, #20]	; (5a78 <_mclk_init+0x1c>)
    5a64:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    5a66:	2101      	movs	r1, #1
    5a68:	6878      	ldr	r0, [r7, #4]
    5a6a:	4b04      	ldr	r3, [pc, #16]	; (5a7c <_mclk_init+0x20>)
    5a6c:	4798      	blx	r3
}
    5a6e:	bf00      	nop
    5a70:	3708      	adds	r7, #8
    5a72:	46bd      	mov	sp, r7
    5a74:	bd80      	pop	{r7, pc}
    5a76:	bf00      	nop
    5a78:	40000800 	.word	0x40000800
    5a7c:	00005a3d 	.word	0x00005a3d

00005a80 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    5a80:	b480      	push	{r7}
    5a82:	b083      	sub	sp, #12
    5a84:	af00      	add	r7, sp, #0
    5a86:	6078      	str	r0, [r7, #4]
    5a88:	460b      	mov	r3, r1
    5a8a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5a8c:	687b      	ldr	r3, [r7, #4]
    5a8e:	78fa      	ldrb	r2, [r7, #3]
    5a90:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5a92:	bf00      	nop
    5a94:	370c      	adds	r7, #12
    5a96:	46bd      	mov	sp, r7
    5a98:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a9c:	4770      	bx	lr

00005a9e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    5a9e:	b480      	push	{r7}
    5aa0:	b083      	sub	sp, #12
    5aa2:	af00      	add	r7, sp, #0
    5aa4:	6078      	str	r0, [r7, #4]
    5aa6:	460b      	mov	r3, r1
    5aa8:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    5aaa:	687b      	ldr	r3, [r7, #4]
    5aac:	887a      	ldrh	r2, [r7, #2]
    5aae:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5ab0:	bf00      	nop
    5ab2:	370c      	adds	r7, #12
    5ab4:	46bd      	mov	sp, r7
    5ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aba:	4770      	bx	lr

00005abc <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    5abc:	b480      	push	{r7}
    5abe:	b083      	sub	sp, #12
    5ac0:	af00      	add	r7, sp, #0
    5ac2:	6078      	str	r0, [r7, #4]
    5ac4:	460b      	mov	r3, r1
    5ac6:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	78fa      	ldrb	r2, [r7, #3]
    5acc:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5ace:	bf00      	nop
    5ad0:	370c      	adds	r7, #12
    5ad2:	46bd      	mov	sp, r7
    5ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ad8:	4770      	bx	lr

00005ada <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    5ada:	b480      	push	{r7}
    5adc:	b083      	sub	sp, #12
    5ade:	af00      	add	r7, sp, #0
    5ae0:	6078      	str	r0, [r7, #4]
    5ae2:	460b      	mov	r3, r1
    5ae4:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    5ae6:	687b      	ldr	r3, [r7, #4]
    5ae8:	78fa      	ldrb	r2, [r7, #3]
    5aea:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5aec:	bf00      	nop
    5aee:	370c      	adds	r7, #12
    5af0:	46bd      	mov	sp, r7
    5af2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5af6:	4770      	bx	lr

00005af8 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5af8:	b480      	push	{r7}
    5afa:	b085      	sub	sp, #20
    5afc:	af00      	add	r7, sp, #0
    5afe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5b00:	687b      	ldr	r3, [r7, #4]
    5b02:	69db      	ldr	r3, [r3, #28]
    5b04:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    5b06:	68fb      	ldr	r3, [r7, #12]
    5b08:	0a1b      	lsrs	r3, r3, #8
    5b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5b0e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5b10:	68fb      	ldr	r3, [r7, #12]
}
    5b12:	4618      	mov	r0, r3
    5b14:	3714      	adds	r7, #20
    5b16:	46bd      	mov	sp, r7
    5b18:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b1c:	4770      	bx	lr

00005b1e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    5b1e:	b480      	push	{r7}
    5b20:	b083      	sub	sp, #12
    5b22:	af00      	add	r7, sp, #0
    5b24:	6078      	str	r0, [r7, #4]
    5b26:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5b28:	687b      	ldr	r3, [r7, #4]
    5b2a:	683a      	ldr	r2, [r7, #0]
    5b2c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5b2e:	bf00      	nop
    5b30:	370c      	adds	r7, #12
    5b32:	46bd      	mov	sp, r7
    5b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b38:	4770      	bx	lr
	...

00005b3c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    5b3c:	b580      	push	{r7, lr}
    5b3e:	b082      	sub	sp, #8
    5b40:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    5b42:	4b13      	ldr	r3, [pc, #76]	; (5b90 <_osc32kctrl_init_sources+0x54>)
    5b44:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    5b46:	2300      	movs	r3, #0
    5b48:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    5b4a:	f242 018e 	movw	r1, #8334	; 0x208e
    5b4e:	6878      	ldr	r0, [r7, #4]
    5b50:	4b10      	ldr	r3, [pc, #64]	; (5b94 <_osc32kctrl_init_sources+0x58>)
    5b52:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    5b54:	2100      	movs	r1, #0
    5b56:	6878      	ldr	r0, [r7, #4]
    5b58:	4b0f      	ldr	r3, [pc, #60]	; (5b98 <_osc32kctrl_init_sources+0x5c>)
    5b5a:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    5b5c:	2100      	movs	r1, #0
    5b5e:	6878      	ldr	r0, [r7, #4]
    5b60:	4b0e      	ldr	r3, [pc, #56]	; (5b9c <_osc32kctrl_init_sources+0x60>)
    5b62:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    5b64:	6878      	ldr	r0, [r7, #4]
    5b66:	4b0e      	ldr	r3, [pc, #56]	; (5ba0 <_osc32kctrl_init_sources+0x64>)
    5b68:	4798      	blx	r3
    5b6a:	4603      	mov	r3, r0
    5b6c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5b6e:	887b      	ldrh	r3, [r7, #2]
    5b70:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    5b72:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    5b76:	4619      	mov	r1, r3
    5b78:	6878      	ldr	r0, [r7, #4]
    5b7a:	4b0a      	ldr	r3, [pc, #40]	; (5ba4 <_osc32kctrl_init_sources+0x68>)
    5b7c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    5b7e:	2100      	movs	r1, #0
    5b80:	6878      	ldr	r0, [r7, #4]
    5b82:	4b09      	ldr	r3, [pc, #36]	; (5ba8 <_osc32kctrl_init_sources+0x6c>)
    5b84:	4798      	blx	r3
	(void)calib;
}
    5b86:	bf00      	nop
    5b88:	3708      	adds	r7, #8
    5b8a:	46bd      	mov	sp, r7
    5b8c:	bd80      	pop	{r7, pc}
    5b8e:	bf00      	nop
    5b90:	40001400 	.word	0x40001400
    5b94:	00005a9f 	.word	0x00005a9f
    5b98:	00005abd 	.word	0x00005abd
    5b9c:	00005adb 	.word	0x00005adb
    5ba0:	00005af9 	.word	0x00005af9
    5ba4:	00005b1f 	.word	0x00005b1f
    5ba8:	00005a81 	.word	0x00005a81

00005bac <hri_gclk_wait_for_sync>:
{
    5bac:	b480      	push	{r7}
    5bae:	b083      	sub	sp, #12
    5bb0:	af00      	add	r7, sp, #0
    5bb2:	6078      	str	r0, [r7, #4]
    5bb4:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5bb6:	bf00      	nop
    5bb8:	687b      	ldr	r3, [r7, #4]
    5bba:	685a      	ldr	r2, [r3, #4]
    5bbc:	683b      	ldr	r3, [r7, #0]
    5bbe:	4013      	ands	r3, r2
    5bc0:	2b00      	cmp	r3, #0
    5bc2:	d1f9      	bne.n	5bb8 <hri_gclk_wait_for_sync+0xc>
}
    5bc4:	bf00      	nop
    5bc6:	370c      	adds	r7, #12
    5bc8:	46bd      	mov	sp, r7
    5bca:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bce:	4770      	bx	lr

00005bd0 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5bd0:	b480      	push	{r7}
    5bd2:	b083      	sub	sp, #12
    5bd4:	af00      	add	r7, sp, #0
    5bd6:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	685b      	ldr	r3, [r3, #4]
    5bdc:	089b      	lsrs	r3, r3, #2
    5bde:	f003 0301 	and.w	r3, r3, #1
    5be2:	2b00      	cmp	r3, #0
    5be4:	bf14      	ite	ne
    5be6:	2301      	movne	r3, #1
    5be8:	2300      	moveq	r3, #0
    5bea:	b2db      	uxtb	r3, r3
}
    5bec:	4618      	mov	r0, r3
    5bee:	370c      	adds	r7, #12
    5bf0:	46bd      	mov	sp, r7
    5bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bf6:	4770      	bx	lr

00005bf8 <hri_gclk_read_SYNCBUSY_reg>:
{
    5bf8:	b480      	push	{r7}
    5bfa:	b083      	sub	sp, #12
    5bfc:	af00      	add	r7, sp, #0
    5bfe:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5c00:	687b      	ldr	r3, [r7, #4]
    5c02:	685b      	ldr	r3, [r3, #4]
}
    5c04:	4618      	mov	r0, r3
    5c06:	370c      	adds	r7, #12
    5c08:	46bd      	mov	sp, r7
    5c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c0e:	4770      	bx	lr

00005c10 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5c10:	b580      	push	{r7, lr}
    5c12:	b086      	sub	sp, #24
    5c14:	af00      	add	r7, sp, #0
    5c16:	60f8      	str	r0, [r7, #12]
    5c18:	460b      	mov	r3, r1
    5c1a:	607a      	str	r2, [r7, #4]
    5c1c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5c1e:	7afa      	ldrb	r2, [r7, #11]
    5c20:	68fb      	ldr	r3, [r7, #12]
    5c22:	3208      	adds	r2, #8
    5c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5c28:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5c2a:	697b      	ldr	r3, [r7, #20]
    5c2c:	f023 030f 	bic.w	r3, r3, #15
    5c30:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    5c32:	687b      	ldr	r3, [r7, #4]
    5c34:	f003 030f 	and.w	r3, r3, #15
    5c38:	697a      	ldr	r2, [r7, #20]
    5c3a:	4313      	orrs	r3, r2
    5c3c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5c3e:	7afa      	ldrb	r2, [r7, #11]
    5c40:	68fb      	ldr	r3, [r7, #12]
    5c42:	3208      	adds	r2, #8
    5c44:	6979      	ldr	r1, [r7, #20]
    5c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5c4a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5c4e:	68f8      	ldr	r0, [r7, #12]
    5c50:	4b02      	ldr	r3, [pc, #8]	; (5c5c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    5c52:	4798      	blx	r3
}
    5c54:	bf00      	nop
    5c56:	3718      	adds	r7, #24
    5c58:	46bd      	mov	sp, r7
    5c5a:	bd80      	pop	{r7, pc}
    5c5c:	00005bad 	.word	0x00005bad

00005c60 <hri_gclk_write_PCHCTRL_reg>:
{
    5c60:	b480      	push	{r7}
    5c62:	b085      	sub	sp, #20
    5c64:	af00      	add	r7, sp, #0
    5c66:	60f8      	str	r0, [r7, #12]
    5c68:	460b      	mov	r3, r1
    5c6a:	607a      	str	r2, [r7, #4]
    5c6c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5c6e:	7afa      	ldrb	r2, [r7, #11]
    5c70:	68fb      	ldr	r3, [r7, #12]
    5c72:	3220      	adds	r2, #32
    5c74:	6879      	ldr	r1, [r7, #4]
    5c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5c7a:	bf00      	nop
    5c7c:	3714      	adds	r7, #20
    5c7e:	46bd      	mov	sp, r7
    5c80:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c84:	4770      	bx	lr

00005c86 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    5c86:	b480      	push	{r7}
    5c88:	b085      	sub	sp, #20
    5c8a:	af00      	add	r7, sp, #0
    5c8c:	60f8      	str	r0, [r7, #12]
    5c8e:	460b      	mov	r3, r1
    5c90:	607a      	str	r2, [r7, #4]
    5c92:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5c94:	bf00      	nop
    5c96:	7afa      	ldrb	r2, [r7, #11]
    5c98:	68f9      	ldr	r1, [r7, #12]
    5c9a:	4613      	mov	r3, r2
    5c9c:	009b      	lsls	r3, r3, #2
    5c9e:	4413      	add	r3, r2
    5ca0:	009b      	lsls	r3, r3, #2
    5ca2:	440b      	add	r3, r1
    5ca4:	333c      	adds	r3, #60	; 0x3c
    5ca6:	681a      	ldr	r2, [r3, #0]
    5ca8:	687b      	ldr	r3, [r7, #4]
    5caa:	4013      	ands	r3, r2
    5cac:	2b00      	cmp	r3, #0
    5cae:	d1f2      	bne.n	5c96 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5cb0:	bf00      	nop
    5cb2:	3714      	adds	r7, #20
    5cb4:	46bd      	mov	sp, r7
    5cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cba:	4770      	bx	lr

00005cbc <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    5cbc:	b480      	push	{r7}
    5cbe:	b083      	sub	sp, #12
    5cc0:	af00      	add	r7, sp, #0
    5cc2:	6078      	str	r0, [r7, #4]
    5cc4:	460b      	mov	r3, r1
    5cc6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5cc8:	78fa      	ldrb	r2, [r7, #3]
    5cca:	6879      	ldr	r1, [r7, #4]
    5ccc:	4613      	mov	r3, r2
    5cce:	009b      	lsls	r3, r3, #2
    5cd0:	4413      	add	r3, r2
    5cd2:	009b      	lsls	r3, r3, #2
    5cd4:	440b      	add	r3, r1
    5cd6:	3340      	adds	r3, #64	; 0x40
    5cd8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    5cda:	f003 0301 	and.w	r3, r3, #1
    5cde:	2b00      	cmp	r3, #0
    5ce0:	bf14      	ite	ne
    5ce2:	2301      	movne	r3, #1
    5ce4:	2300      	moveq	r3, #0
    5ce6:	b2db      	uxtb	r3, r3
}
    5ce8:	4618      	mov	r0, r3
    5cea:	370c      	adds	r7, #12
    5cec:	46bd      	mov	sp, r7
    5cee:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cf2:	4770      	bx	lr

00005cf4 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5cf4:	b480      	push	{r7}
    5cf6:	b083      	sub	sp, #12
    5cf8:	af00      	add	r7, sp, #0
    5cfa:	6078      	str	r0, [r7, #4]
    5cfc:	460b      	mov	r3, r1
    5cfe:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5d00:	78fa      	ldrb	r2, [r7, #3]
    5d02:	6879      	ldr	r1, [r7, #4]
    5d04:	4613      	mov	r3, r2
    5d06:	009b      	lsls	r3, r3, #2
    5d08:	4413      	add	r3, r2
    5d0a:	009b      	lsls	r3, r3, #2
    5d0c:	440b      	add	r3, r1
    5d0e:	3340      	adds	r3, #64	; 0x40
    5d10:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5d12:	085b      	lsrs	r3, r3, #1
    5d14:	f003 0301 	and.w	r3, r3, #1
    5d18:	2b00      	cmp	r3, #0
    5d1a:	bf14      	ite	ne
    5d1c:	2301      	movne	r3, #1
    5d1e:	2300      	moveq	r3, #0
    5d20:	b2db      	uxtb	r3, r3
}
    5d22:	4618      	mov	r0, r3
    5d24:	370c      	adds	r7, #12
    5d26:	46bd      	mov	sp, r7
    5d28:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d2c:	4770      	bx	lr
	...

00005d30 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5d30:	b580      	push	{r7, lr}
    5d32:	b082      	sub	sp, #8
    5d34:	af00      	add	r7, sp, #0
    5d36:	6078      	str	r0, [r7, #4]
    5d38:	460b      	mov	r3, r1
    5d3a:	70fb      	strb	r3, [r7, #3]
    5d3c:	4613      	mov	r3, r2
    5d3e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5d40:	78fa      	ldrb	r2, [r7, #3]
    5d42:	6879      	ldr	r1, [r7, #4]
    5d44:	4613      	mov	r3, r2
    5d46:	009b      	lsls	r3, r3, #2
    5d48:	4413      	add	r3, r2
    5d4a:	009b      	lsls	r3, r3, #2
    5d4c:	440b      	add	r3, r1
    5d4e:	3330      	adds	r3, #48	; 0x30
    5d50:	78ba      	ldrb	r2, [r7, #2]
    5d52:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    5d54:	78fb      	ldrb	r3, [r7, #3]
    5d56:	2202      	movs	r2, #2
    5d58:	4619      	mov	r1, r3
    5d5a:	6878      	ldr	r0, [r7, #4]
    5d5c:	4b02      	ldr	r3, [pc, #8]	; (5d68 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5d5e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5d60:	bf00      	nop
    5d62:	3708      	adds	r7, #8
    5d64:	46bd      	mov	sp, r7
    5d66:	bd80      	pop	{r7, pc}
    5d68:	00005c87 	.word	0x00005c87

00005d6c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5d6c:	b580      	push	{r7, lr}
    5d6e:	b084      	sub	sp, #16
    5d70:	af00      	add	r7, sp, #0
    5d72:	60f8      	str	r0, [r7, #12]
    5d74:	460b      	mov	r3, r1
    5d76:	607a      	str	r2, [r7, #4]
    5d78:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5d7a:	7afa      	ldrb	r2, [r7, #11]
    5d7c:	68f9      	ldr	r1, [r7, #12]
    5d7e:	4613      	mov	r3, r2
    5d80:	009b      	lsls	r3, r3, #2
    5d82:	4413      	add	r3, r2
    5d84:	009b      	lsls	r3, r3, #2
    5d86:	440b      	add	r3, r1
    5d88:	3334      	adds	r3, #52	; 0x34
    5d8a:	687a      	ldr	r2, [r7, #4]
    5d8c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5d8e:	7afb      	ldrb	r3, [r7, #11]
    5d90:	2206      	movs	r2, #6
    5d92:	4619      	mov	r1, r3
    5d94:	68f8      	ldr	r0, [r7, #12]
    5d96:	4b03      	ldr	r3, [pc, #12]	; (5da4 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5d98:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5d9a:	bf00      	nop
    5d9c:	3710      	adds	r7, #16
    5d9e:	46bd      	mov	sp, r7
    5da0:	bd80      	pop	{r7, pc}
    5da2:	bf00      	nop
    5da4:	00005c87 	.word	0x00005c87

00005da8 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5da8:	b480      	push	{r7}
    5daa:	b085      	sub	sp, #20
    5dac:	af00      	add	r7, sp, #0
    5dae:	60f8      	str	r0, [r7, #12]
    5db0:	460b      	mov	r3, r1
    5db2:	607a      	str	r2, [r7, #4]
    5db4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5db6:	7afa      	ldrb	r2, [r7, #11]
    5db8:	68f9      	ldr	r1, [r7, #12]
    5dba:	4613      	mov	r3, r2
    5dbc:	009b      	lsls	r3, r3, #2
    5dbe:	4413      	add	r3, r2
    5dc0:	009b      	lsls	r3, r3, #2
    5dc2:	440b      	add	r3, r1
    5dc4:	3338      	adds	r3, #56	; 0x38
    5dc6:	687a      	ldr	r2, [r7, #4]
    5dc8:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5dca:	bf00      	nop
    5dcc:	3714      	adds	r7, #20
    5dce:	46bd      	mov	sp, r7
    5dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dd4:	4770      	bx	lr

00005dd6 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5dd6:	b480      	push	{r7}
    5dd8:	b083      	sub	sp, #12
    5dda:	af00      	add	r7, sp, #0
    5ddc:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5dde:	687b      	ldr	r3, [r7, #4]
    5de0:	691b      	ldr	r3, [r3, #16]
    5de2:	085b      	lsrs	r3, r3, #1
    5de4:	f003 0301 	and.w	r3, r3, #1
    5de8:	2b00      	cmp	r3, #0
    5dea:	bf14      	ite	ne
    5dec:	2301      	movne	r3, #1
    5dee:	2300      	moveq	r3, #0
    5df0:	b2db      	uxtb	r3, r3
}
    5df2:	4618      	mov	r0, r3
    5df4:	370c      	adds	r7, #12
    5df6:	46bd      	mov	sp, r7
    5df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dfc:	4770      	bx	lr

00005dfe <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5dfe:	b480      	push	{r7}
    5e00:	b083      	sub	sp, #12
    5e02:	af00      	add	r7, sp, #0
    5e04:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5e06:	687b      	ldr	r3, [r7, #4]
    5e08:	691b      	ldr	r3, [r3, #16]
    5e0a:	0a1b      	lsrs	r3, r3, #8
    5e0c:	f003 0301 	and.w	r3, r3, #1
    5e10:	2b00      	cmp	r3, #0
    5e12:	bf14      	ite	ne
    5e14:	2301      	movne	r3, #1
    5e16:	2300      	moveq	r3, #0
    5e18:	b2db      	uxtb	r3, r3
}
    5e1a:	4618      	mov	r0, r3
    5e1c:	370c      	adds	r7, #12
    5e1e:	46bd      	mov	sp, r7
    5e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e24:	4770      	bx	lr

00005e26 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5e26:	b480      	push	{r7}
    5e28:	b085      	sub	sp, #20
    5e2a:	af00      	add	r7, sp, #0
    5e2c:	6078      	str	r0, [r7, #4]
    5e2e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5e30:	687b      	ldr	r3, [r7, #4]
    5e32:	691b      	ldr	r3, [r3, #16]
    5e34:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5e36:	68fa      	ldr	r2, [r7, #12]
    5e38:	683b      	ldr	r3, [r7, #0]
    5e3a:	4013      	ands	r3, r2
    5e3c:	60fb      	str	r3, [r7, #12]
	return tmp;
    5e3e:	68fb      	ldr	r3, [r7, #12]
}
    5e40:	4618      	mov	r0, r3
    5e42:	3714      	adds	r7, #20
    5e44:	46bd      	mov	sp, r7
    5e46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e4a:	4770      	bx	lr

00005e4c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5e4c:	b480      	push	{r7}
    5e4e:	b085      	sub	sp, #20
    5e50:	af00      	add	r7, sp, #0
    5e52:	60f8      	str	r0, [r7, #12]
    5e54:	460b      	mov	r3, r1
    5e56:	607a      	str	r2, [r7, #4]
    5e58:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5e5a:	7afb      	ldrb	r3, [r7, #11]
    5e5c:	68fa      	ldr	r2, [r7, #12]
    5e5e:	3304      	adds	r3, #4
    5e60:	009b      	lsls	r3, r3, #2
    5e62:	4413      	add	r3, r2
    5e64:	687a      	ldr	r2, [r7, #4]
    5e66:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5e68:	bf00      	nop
    5e6a:	3714      	adds	r7, #20
    5e6c:	46bd      	mov	sp, r7
    5e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e72:	4770      	bx	lr

00005e74 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    5e74:	b480      	push	{r7}
    5e76:	b083      	sub	sp, #12
    5e78:	af00      	add	r7, sp, #0
    5e7a:	6078      	str	r0, [r7, #4]
    5e7c:	460b      	mov	r3, r1
    5e7e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5e80:	687b      	ldr	r3, [r7, #4]
    5e82:	78fa      	ldrb	r2, [r7, #3]
    5e84:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5e86:	bf00      	nop
    5e88:	370c      	adds	r7, #12
    5e8a:	46bd      	mov	sp, r7
    5e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e90:	4770      	bx	lr

00005e92 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    5e92:	b480      	push	{r7}
    5e94:	b085      	sub	sp, #20
    5e96:	af00      	add	r7, sp, #0
    5e98:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5e9a:	687b      	ldr	r3, [r7, #4]
    5e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
    5ea0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5ea2:	7bfb      	ldrb	r3, [r7, #15]
    5ea4:	f003 0301 	and.w	r3, r3, #1
    5ea8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5eaa:	7bfb      	ldrb	r3, [r7, #15]
    5eac:	2b00      	cmp	r3, #0
    5eae:	bf14      	ite	ne
    5eb0:	2301      	movne	r3, #1
    5eb2:	2300      	moveq	r3, #0
    5eb4:	b2db      	uxtb	r3, r3
}
    5eb6:	4618      	mov	r0, r3
    5eb8:	3714      	adds	r7, #20
    5eba:	46bd      	mov	sp, r7
    5ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ec0:	4770      	bx	lr

00005ec2 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5ec2:	b480      	push	{r7}
    5ec4:	b083      	sub	sp, #12
    5ec6:	af00      	add	r7, sp, #0
    5ec8:	6078      	str	r0, [r7, #4]
    5eca:	460b      	mov	r3, r1
    5ecc:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5ece:	687b      	ldr	r3, [r7, #4]
    5ed0:	78fa      	ldrb	r2, [r7, #3]
    5ed2:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5ed6:	bf00      	nop
    5ed8:	370c      	adds	r7, #12
    5eda:	46bd      	mov	sp, r7
    5edc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ee0:	4770      	bx	lr

00005ee2 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5ee2:	b480      	push	{r7}
    5ee4:	b083      	sub	sp, #12
    5ee6:	af00      	add	r7, sp, #0
    5ee8:	6078      	str	r0, [r7, #4]
    5eea:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5eec:	687b      	ldr	r3, [r7, #4]
    5eee:	683a      	ldr	r2, [r7, #0]
    5ef0:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5ef2:	bf00      	nop
    5ef4:	370c      	adds	r7, #12
    5ef6:	46bd      	mov	sp, r7
    5ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5efc:	4770      	bx	lr

00005efe <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5efe:	b480      	push	{r7}
    5f00:	b083      	sub	sp, #12
    5f02:	af00      	add	r7, sp, #0
    5f04:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5f06:	687b      	ldr	r3, [r7, #4]
    5f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5f0a:	4618      	mov	r0, r3
    5f0c:	370c      	adds	r7, #12
    5f0e:	46bd      	mov	sp, r7
    5f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f14:	4770      	bx	lr

00005f16 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5f16:	b480      	push	{r7}
    5f18:	b083      	sub	sp, #12
    5f1a:	af00      	add	r7, sp, #0
    5f1c:	6078      	str	r0, [r7, #4]
    5f1e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	683a      	ldr	r2, [r7, #0]
    5f24:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5f26:	bf00      	nop
    5f28:	370c      	adds	r7, #12
    5f2a:	46bd      	mov	sp, r7
    5f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f30:	4770      	bx	lr

00005f32 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5f32:	b480      	push	{r7}
    5f34:	b085      	sub	sp, #20
    5f36:	af00      	add	r7, sp, #0
    5f38:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5f3a:	687b      	ldr	r3, [r7, #4]
    5f3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5f40:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5f42:	7bfb      	ldrb	r3, [r7, #15]
    5f44:	085b      	lsrs	r3, r3, #1
    5f46:	b2db      	uxtb	r3, r3
    5f48:	f003 0301 	and.w	r3, r3, #1
    5f4c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5f4e:	7bfb      	ldrb	r3, [r7, #15]
    5f50:	2b00      	cmp	r3, #0
    5f52:	bf14      	ite	ne
    5f54:	2301      	movne	r3, #1
    5f56:	2300      	moveq	r3, #0
    5f58:	b2db      	uxtb	r3, r3
}
    5f5a:	4618      	mov	r0, r3
    5f5c:	3714      	adds	r7, #20
    5f5e:	46bd      	mov	sp, r7
    5f60:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f64:	4770      	bx	lr

00005f66 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    5f66:	b480      	push	{r7}
    5f68:	b085      	sub	sp, #20
    5f6a:	af00      	add	r7, sp, #0
    5f6c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5f6e:	687b      	ldr	r3, [r7, #4]
    5f70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5f74:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5f76:	7bfb      	ldrb	r3, [r7, #15]
    5f78:	089b      	lsrs	r3, r3, #2
    5f7a:	b2db      	uxtb	r3, r3
    5f7c:	f003 0301 	and.w	r3, r3, #1
    5f80:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5f82:	7bfb      	ldrb	r3, [r7, #15]
    5f84:	2b00      	cmp	r3, #0
    5f86:	bf14      	ite	ne
    5f88:	2301      	movne	r3, #1
    5f8a:	2300      	moveq	r3, #0
    5f8c:	b2db      	uxtb	r3, r3
}
    5f8e:	4618      	mov	r0, r3
    5f90:	3714      	adds	r7, #20
    5f92:	46bd      	mov	sp, r7
    5f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f98:	4770      	bx	lr

00005f9a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5f9a:	b480      	push	{r7}
    5f9c:	b085      	sub	sp, #20
    5f9e:	af00      	add	r7, sp, #0
    5fa0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5fa2:	687b      	ldr	r3, [r7, #4]
    5fa4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5fa8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5faa:	7bfb      	ldrb	r3, [r7, #15]
    5fac:	08db      	lsrs	r3, r3, #3
    5fae:	b2db      	uxtb	r3, r3
    5fb0:	f003 0301 	and.w	r3, r3, #1
    5fb4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5fb6:	7bfb      	ldrb	r3, [r7, #15]
    5fb8:	2b00      	cmp	r3, #0
    5fba:	bf14      	ite	ne
    5fbc:	2301      	movne	r3, #1
    5fbe:	2300      	moveq	r3, #0
    5fc0:	b2db      	uxtb	r3, r3
}
    5fc2:	4618      	mov	r0, r3
    5fc4:	3714      	adds	r7, #20
    5fc6:	46bd      	mov	sp, r7
    5fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fcc:	4770      	bx	lr

00005fce <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5fce:	b480      	push	{r7}
    5fd0:	b085      	sub	sp, #20
    5fd2:	af00      	add	r7, sp, #0
    5fd4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5fd6:	687b      	ldr	r3, [r7, #4]
    5fd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5fdc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5fde:	7bfb      	ldrb	r3, [r7, #15]
    5fe0:	091b      	lsrs	r3, r3, #4
    5fe2:	b2db      	uxtb	r3, r3
    5fe4:	f003 0301 	and.w	r3, r3, #1
    5fe8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5fea:	7bfb      	ldrb	r3, [r7, #15]
    5fec:	2b00      	cmp	r3, #0
    5fee:	bf14      	ite	ne
    5ff0:	2301      	movne	r3, #1
    5ff2:	2300      	moveq	r3, #0
    5ff4:	b2db      	uxtb	r3, r3
}
    5ff6:	4618      	mov	r0, r3
    5ff8:	3714      	adds	r7, #20
    5ffa:	46bd      	mov	sp, r7
    5ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6000:	4770      	bx	lr
	...

00006004 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6004:	b580      	push	{r7, lr}
    6006:	b082      	sub	sp, #8
    6008:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    600a:	4b0a      	ldr	r3, [pc, #40]	; (6034 <_oscctrl_init_sources+0x30>)
    600c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    600e:	4a0a      	ldr	r2, [pc, #40]	; (6038 <_oscctrl_init_sources+0x34>)
    6010:	2101      	movs	r1, #1
    6012:	6878      	ldr	r0, [r7, #4]
    6014:	4b09      	ldr	r3, [pc, #36]	; (603c <_oscctrl_init_sources+0x38>)
    6016:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    6018:	bf00      	nop
    601a:	6878      	ldr	r0, [r7, #4]
    601c:	4b08      	ldr	r3, [pc, #32]	; (6040 <_oscctrl_init_sources+0x3c>)
    601e:	4798      	blx	r3
    6020:	4603      	mov	r3, r0
    6022:	f083 0301 	eor.w	r3, r3, #1
    6026:	b2db      	uxtb	r3, r3
    6028:	2b00      	cmp	r3, #0
    602a:	d1f6      	bne.n	601a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    602c:	bf00      	nop
    602e:	3708      	adds	r7, #8
    6030:	46bd      	mov	sp, r7
    6032:	bd80      	pop	{r7, pc}
    6034:	40001000 	.word	0x40001000
    6038:	03002646 	.word	0x03002646
    603c:	00005e4d 	.word	0x00005e4d
    6040:	00005dd7 	.word	0x00005dd7

00006044 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    6044:	b580      	push	{r7, lr}
    6046:	b084      	sub	sp, #16
    6048:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    604a:	4b6b      	ldr	r3, [pc, #428]	; (61f8 <_oscctrl_init_referenced_generators+0x1b4>)
    604c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    604e:	2204      	movs	r2, #4
    6050:	2100      	movs	r1, #0
    6052:	486a      	ldr	r0, [pc, #424]	; (61fc <_oscctrl_init_referenced_generators+0x1b8>)
    6054:	4b6a      	ldr	r3, [pc, #424]	; (6200 <_oscctrl_init_referenced_generators+0x1bc>)
    6056:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6058:	bf00      	nop
    605a:	4868      	ldr	r0, [pc, #416]	; (61fc <_oscctrl_init_referenced_generators+0x1b8>)
    605c:	4b69      	ldr	r3, [pc, #420]	; (6204 <_oscctrl_init_referenced_generators+0x1c0>)
    605e:	4798      	blx	r3
    6060:	4603      	mov	r3, r0
    6062:	2b00      	cmp	r3, #0
    6064:	d1f9      	bne.n	605a <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    6066:	2100      	movs	r1, #0
    6068:	68f8      	ldr	r0, [r7, #12]
    606a:	4b67      	ldr	r3, [pc, #412]	; (6208 <_oscctrl_init_referenced_generators+0x1c4>)
    606c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    606e:	4967      	ldr	r1, [pc, #412]	; (620c <_oscctrl_init_referenced_generators+0x1c8>)
    6070:	68f8      	ldr	r0, [r7, #12]
    6072:	4b67      	ldr	r3, [pc, #412]	; (6210 <_oscctrl_init_referenced_generators+0x1cc>)
    6074:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6076:	bf00      	nop
    6078:	68f8      	ldr	r0, [r7, #12]
    607a:	4b66      	ldr	r3, [pc, #408]	; (6214 <_oscctrl_init_referenced_generators+0x1d0>)
    607c:	4798      	blx	r3
    607e:	4603      	mov	r3, r0
    6080:	2b00      	cmp	r3, #0
    6082:	d1f9      	bne.n	6078 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    6084:	2100      	movs	r1, #0
    6086:	68f8      	ldr	r0, [r7, #12]
    6088:	4b63      	ldr	r3, [pc, #396]	; (6218 <_oscctrl_init_referenced_generators+0x1d4>)
    608a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    608c:	bf00      	nop
    608e:	68f8      	ldr	r0, [r7, #12]
    6090:	4b62      	ldr	r3, [pc, #392]	; (621c <_oscctrl_init_referenced_generators+0x1d8>)
    6092:	4798      	blx	r3
    6094:	4603      	mov	r3, r0
    6096:	2b00      	cmp	r3, #0
    6098:	d1f9      	bne.n	608e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    609a:	2302      	movs	r3, #2
    609c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    609e:	7afb      	ldrb	r3, [r7, #11]
    60a0:	4619      	mov	r1, r3
    60a2:	68f8      	ldr	r0, [r7, #12]
    60a4:	4b58      	ldr	r3, [pc, #352]	; (6208 <_oscctrl_init_referenced_generators+0x1c4>)
    60a6:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    60a8:	bf00      	nop
    60aa:	68f8      	ldr	r0, [r7, #12]
    60ac:	4b5c      	ldr	r3, [pc, #368]	; (6220 <_oscctrl_init_referenced_generators+0x1dc>)
    60ae:	4798      	blx	r3
    60b0:	4603      	mov	r3, r0
    60b2:	2b00      	cmp	r3, #0
    60b4:	d1f9      	bne.n	60aa <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    60b6:	68f8      	ldr	r0, [r7, #12]
    60b8:	4b5a      	ldr	r3, [pc, #360]	; (6224 <_oscctrl_init_referenced_generators+0x1e0>)
    60ba:	4798      	blx	r3
    60bc:	4603      	mov	r3, r0
    60be:	4619      	mov	r1, r3
    60c0:	68f8      	ldr	r0, [r7, #12]
    60c2:	4b59      	ldr	r3, [pc, #356]	; (6228 <_oscctrl_init_referenced_generators+0x1e4>)
    60c4:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    60c6:	bf00      	nop
    60c8:	68f8      	ldr	r0, [r7, #12]
    60ca:	4b58      	ldr	r3, [pc, #352]	; (622c <_oscctrl_init_referenced_generators+0x1e8>)
    60cc:	4798      	blx	r3
    60ce:	4603      	mov	r3, r0
    60d0:	2b00      	cmp	r3, #0
    60d2:	d1f9      	bne.n	60c8 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    60d4:	2319      	movs	r3, #25
    60d6:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    60d8:	7afb      	ldrb	r3, [r7, #11]
    60da:	4619      	mov	r1, r3
    60dc:	68f8      	ldr	r0, [r7, #12]
    60de:	4b4e      	ldr	r3, [pc, #312]	; (6218 <_oscctrl_init_referenced_generators+0x1d4>)
    60e0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    60e2:	bf00      	nop
    60e4:	68f8      	ldr	r0, [r7, #12]
    60e6:	4b4d      	ldr	r3, [pc, #308]	; (621c <_oscctrl_init_referenced_generators+0x1d8>)
    60e8:	4798      	blx	r3
    60ea:	4603      	mov	r3, r0
    60ec:	2b00      	cmp	r3, #0
    60ee:	d1f9      	bne.n	60e4 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    60f0:	2245      	movs	r2, #69	; 0x45
    60f2:	2101      	movs	r1, #1
    60f4:	4841      	ldr	r0, [pc, #260]	; (61fc <_oscctrl_init_referenced_generators+0x1b8>)
    60f6:	4b4e      	ldr	r3, [pc, #312]	; (6230 <_oscctrl_init_referenced_generators+0x1ec>)
    60f8:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    60fa:	223b      	movs	r2, #59	; 0x3b
    60fc:	2100      	movs	r1, #0
    60fe:	68f8      	ldr	r0, [r7, #12]
    6100:	4b4c      	ldr	r3, [pc, #304]	; (6234 <_oscctrl_init_referenced_generators+0x1f0>)
    6102:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    6104:	f44f 6201 	mov.w	r2, #2064	; 0x810
    6108:	2100      	movs	r1, #0
    610a:	68f8      	ldr	r0, [r7, #12]
    610c:	4b4a      	ldr	r3, [pc, #296]	; (6238 <_oscctrl_init_referenced_generators+0x1f4>)
    610e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    6110:	2242      	movs	r2, #66	; 0x42
    6112:	2100      	movs	r1, #0
    6114:	68f8      	ldr	r0, [r7, #12]
    6116:	4b49      	ldr	r3, [pc, #292]	; (623c <_oscctrl_init_referenced_generators+0x1f8>)
    6118:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    611a:	4a49      	ldr	r2, [pc, #292]	; (6240 <_oscctrl_init_referenced_generators+0x1fc>)
    611c:	2101      	movs	r1, #1
    611e:	68f8      	ldr	r0, [r7, #12]
    6120:	4b44      	ldr	r3, [pc, #272]	; (6234 <_oscctrl_init_referenced_generators+0x1f0>)
    6122:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    6124:	f44f 6203 	mov.w	r2, #2096	; 0x830
    6128:	2101      	movs	r1, #1
    612a:	68f8      	ldr	r0, [r7, #12]
    612c:	4b42      	ldr	r3, [pc, #264]	; (6238 <_oscctrl_init_referenced_generators+0x1f4>)
    612e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    6130:	2202      	movs	r2, #2
    6132:	2101      	movs	r1, #1
    6134:	68f8      	ldr	r0, [r7, #12]
    6136:	4b41      	ldr	r3, [pc, #260]	; (623c <_oscctrl_init_referenced_generators+0x1f8>)
    6138:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    613a:	68f8      	ldr	r0, [r7, #12]
    613c:	4b41      	ldr	r3, [pc, #260]	; (6244 <_oscctrl_init_referenced_generators+0x200>)
    613e:	4798      	blx	r3
    6140:	4603      	mov	r3, r0
    6142:	2b00      	cmp	r3, #0
    6144:	d00c      	beq.n	6160 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    6146:	f44f 6310 	mov.w	r3, #2304	; 0x900
    614a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    614c:	bf00      	nop
    614e:	6879      	ldr	r1, [r7, #4]
    6150:	68f8      	ldr	r0, [r7, #12]
    6152:	4b3d      	ldr	r3, [pc, #244]	; (6248 <_oscctrl_init_referenced_generators+0x204>)
    6154:	4798      	blx	r3
    6156:	4602      	mov	r2, r0
    6158:	687b      	ldr	r3, [r7, #4]
    615a:	429a      	cmp	r2, r3
    615c:	d1f7      	bne.n	614e <_oscctrl_init_referenced_generators+0x10a>
    615e:	e009      	b.n	6174 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    6160:	bf00      	nop
    6162:	68f8      	ldr	r0, [r7, #12]
    6164:	4b39      	ldr	r3, [pc, #228]	; (624c <_oscctrl_init_referenced_generators+0x208>)
    6166:	4798      	blx	r3
    6168:	4603      	mov	r3, r0
    616a:	f083 0301 	eor.w	r3, r3, #1
    616e:	b2db      	uxtb	r3, r3
    6170:	2b00      	cmp	r3, #0
    6172:	d1f6      	bne.n	6162 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    6174:	bf00      	nop
    6176:	2100      	movs	r1, #0
    6178:	68f8      	ldr	r0, [r7, #12]
    617a:	4b35      	ldr	r3, [pc, #212]	; (6250 <_oscctrl_init_referenced_generators+0x20c>)
    617c:	4798      	blx	r3
    617e:	4603      	mov	r3, r0
    6180:	f083 0301 	eor.w	r3, r3, #1
    6184:	b2db      	uxtb	r3, r3
    6186:	2b00      	cmp	r3, #0
    6188:	d009      	beq.n	619e <_oscctrl_init_referenced_generators+0x15a>
    618a:	2100      	movs	r1, #0
    618c:	68f8      	ldr	r0, [r7, #12]
    618e:	4b31      	ldr	r3, [pc, #196]	; (6254 <_oscctrl_init_referenced_generators+0x210>)
    6190:	4798      	blx	r3
    6192:	4603      	mov	r3, r0
    6194:	f083 0301 	eor.w	r3, r3, #1
    6198:	b2db      	uxtb	r3, r3
    619a:	2b00      	cmp	r3, #0
    619c:	d1eb      	bne.n	6176 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    619e:	bf00      	nop
    61a0:	2101      	movs	r1, #1
    61a2:	68f8      	ldr	r0, [r7, #12]
    61a4:	4b2a      	ldr	r3, [pc, #168]	; (6250 <_oscctrl_init_referenced_generators+0x20c>)
    61a6:	4798      	blx	r3
    61a8:	4603      	mov	r3, r0
    61aa:	f083 0301 	eor.w	r3, r3, #1
    61ae:	b2db      	uxtb	r3, r3
    61b0:	2b00      	cmp	r3, #0
    61b2:	d009      	beq.n	61c8 <_oscctrl_init_referenced_generators+0x184>
    61b4:	2101      	movs	r1, #1
    61b6:	68f8      	ldr	r0, [r7, #12]
    61b8:	4b26      	ldr	r3, [pc, #152]	; (6254 <_oscctrl_init_referenced_generators+0x210>)
    61ba:	4798      	blx	r3
    61bc:	4603      	mov	r3, r0
    61be:	f083 0301 	eor.w	r3, r3, #1
    61c2:	b2db      	uxtb	r3, r3
    61c4:	2b00      	cmp	r3, #0
    61c6:	d1eb      	bne.n	61a0 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    61c8:	bf00      	nop
    61ca:	480c      	ldr	r0, [pc, #48]	; (61fc <_oscctrl_init_referenced_generators+0x1b8>)
    61cc:	4b22      	ldr	r3, [pc, #136]	; (6258 <_oscctrl_init_referenced_generators+0x214>)
    61ce:	4798      	blx	r3
    61d0:	4603      	mov	r3, r0
    61d2:	2b00      	cmp	r3, #0
    61d4:	d1f9      	bne.n	61ca <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    61d6:	2207      	movs	r2, #7
    61d8:	2100      	movs	r1, #0
    61da:	4808      	ldr	r0, [pc, #32]	; (61fc <_oscctrl_init_referenced_generators+0x1b8>)
    61dc:	4b08      	ldr	r3, [pc, #32]	; (6200 <_oscctrl_init_referenced_generators+0x1bc>)
    61de:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    61e0:	bf00      	nop
    61e2:	4806      	ldr	r0, [pc, #24]	; (61fc <_oscctrl_init_referenced_generators+0x1b8>)
    61e4:	4b07      	ldr	r3, [pc, #28]	; (6204 <_oscctrl_init_referenced_generators+0x1c0>)
    61e6:	4798      	blx	r3
    61e8:	4603      	mov	r3, r0
    61ea:	2b00      	cmp	r3, #0
    61ec:	d1f9      	bne.n	61e2 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    61ee:	bf00      	nop
    61f0:	3710      	adds	r7, #16
    61f2:	46bd      	mov	sp, r7
    61f4:	bd80      	pop	{r7, pc}
    61f6:	bf00      	nop
    61f8:	40001000 	.word	0x40001000
    61fc:	40001c00 	.word	0x40001c00
    6200:	00005c11 	.word	0x00005c11
    6204:	00005bd1 	.word	0x00005bd1
    6208:	00005e75 	.word	0x00005e75
    620c:	0401bb80 	.word	0x0401bb80
    6210:	00005f17 	.word	0x00005f17
    6214:	00005fcf 	.word	0x00005fcf
    6218:	00005ec3 	.word	0x00005ec3
    621c:	00005f67 	.word	0x00005f67
    6220:	00005f33 	.word	0x00005f33
    6224:	00005eff 	.word	0x00005eff
    6228:	00005ee3 	.word	0x00005ee3
    622c:	00005f9b 	.word	0x00005f9b
    6230:	00005c61 	.word	0x00005c61
    6234:	00005d6d 	.word	0x00005d6d
    6238:	00005da9 	.word	0x00005da9
    623c:	00005d31 	.word	0x00005d31
    6240:	000407a0 	.word	0x000407a0
    6244:	00005e93 	.word	0x00005e93
    6248:	00005e27 	.word	0x00005e27
    624c:	00005dff 	.word	0x00005dff
    6250:	00005cbd 	.word	0x00005cbd
    6254:	00005cf5 	.word	0x00005cf5
    6258:	00005bf9 	.word	0x00005bf9

0000625c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    625c:	b480      	push	{r7}
    625e:	b083      	sub	sp, #12
    6260:	af00      	add	r7, sp, #0
    6262:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    6264:	687b      	ldr	r3, [r7, #4]
    6266:	69db      	ldr	r3, [r3, #28]
    6268:	0a9b      	lsrs	r3, r3, #10
    626a:	f003 0301 	and.w	r3, r3, #1
    626e:	2b00      	cmp	r3, #0
    6270:	bf14      	ite	ne
    6272:	2301      	movne	r3, #1
    6274:	2300      	moveq	r3, #0
    6276:	b2db      	uxtb	r3, r3
}
    6278:	4618      	mov	r0, r3
    627a:	370c      	adds	r7, #12
    627c:	46bd      	mov	sp, r7
    627e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6282:	4770      	bx	lr

00006284 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    6284:	b480      	push	{r7}
    6286:	b083      	sub	sp, #12
    6288:	af00      	add	r7, sp, #0
    628a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    628c:	687b      	ldr	r3, [r7, #4]
    628e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6292:	61da      	str	r2, [r3, #28]
}
    6294:	bf00      	nop
    6296:	370c      	adds	r7, #12
    6298:	46bd      	mov	sp, r7
    629a:	f85d 7b04 	ldr.w	r7, [sp], #4
    629e:	4770      	bx	lr

000062a0 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    62a0:	b480      	push	{r7}
    62a2:	b083      	sub	sp, #12
    62a4:	af00      	add	r7, sp, #0
    62a6:	6078      	str	r0, [r7, #4]
    62a8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    62aa:	687b      	ldr	r3, [r7, #4]
    62ac:	683a      	ldr	r2, [r7, #0]
    62ae:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    62b0:	bf00      	nop
    62b2:	370c      	adds	r7, #12
    62b4:	46bd      	mov	sp, r7
    62b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ba:	4770      	bx	lr

000062bc <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    62bc:	b480      	push	{r7}
    62be:	b083      	sub	sp, #12
    62c0:	af00      	add	r7, sp, #0
    62c2:	6078      	str	r0, [r7, #4]
    62c4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    62c6:	687b      	ldr	r3, [r7, #4]
    62c8:	683a      	ldr	r2, [r7, #0]
    62ca:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    62cc:	bf00      	nop
    62ce:	370c      	adds	r7, #12
    62d0:	46bd      	mov	sp, r7
    62d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    62d6:	4770      	bx	lr

000062d8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    62d8:	b480      	push	{r7}
    62da:	b083      	sub	sp, #12
    62dc:	af00      	add	r7, sp, #0
    62de:	6078      	str	r0, [r7, #4]
    62e0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    62e2:	687b      	ldr	r3, [r7, #4]
    62e4:	683a      	ldr	r2, [r7, #0]
    62e6:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    62e8:	bf00      	nop
    62ea:	370c      	adds	r7, #12
    62ec:	46bd      	mov	sp, r7
    62ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    62f2:	4770      	bx	lr

000062f4 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    62f4:	b480      	push	{r7}
    62f6:	b083      	sub	sp, #12
    62f8:	af00      	add	r7, sp, #0
    62fa:	6078      	str	r0, [r7, #4]
    62fc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    62fe:	687b      	ldr	r3, [r7, #4]
    6300:	683a      	ldr	r2, [r7, #0]
    6302:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6304:	bf00      	nop
    6306:	370c      	adds	r7, #12
    6308:	46bd      	mov	sp, r7
    630a:	f85d 7b04 	ldr.w	r7, [sp], #4
    630e:	4770      	bx	lr

00006310 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    6310:	b480      	push	{r7}
    6312:	b085      	sub	sp, #20
    6314:	af00      	add	r7, sp, #0
    6316:	6078      	str	r0, [r7, #4]
    6318:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    631a:	687b      	ldr	r3, [r7, #4]
    631c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    631e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    6320:	68fb      	ldr	r3, [r7, #12]
    6322:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    6326:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    6328:	683b      	ldr	r3, [r7, #0]
    632a:	b2db      	uxtb	r3, r3
    632c:	68fa      	ldr	r2, [r7, #12]
    632e:	4313      	orrs	r3, r2
    6330:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    6332:	687b      	ldr	r3, [r7, #4]
    6334:	68fa      	ldr	r2, [r7, #12]
    6336:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6338:	bf00      	nop
    633a:	3714      	adds	r7, #20
    633c:	46bd      	mov	sp, r7
    633e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6342:	4770      	bx	lr

00006344 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    6344:	b480      	push	{r7}
    6346:	b085      	sub	sp, #20
    6348:	af00      	add	r7, sp, #0
    634a:	6078      	str	r0, [r7, #4]
    634c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6352:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    6354:	68fb      	ldr	r3, [r7, #12]
    6356:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    635a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    635c:	683b      	ldr	r3, [r7, #0]
    635e:	041b      	lsls	r3, r3, #16
    6360:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    6364:	68fa      	ldr	r2, [r7, #12]
    6366:	4313      	orrs	r3, r2
    6368:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    636a:	687b      	ldr	r3, [r7, #4]
    636c:	68fa      	ldr	r2, [r7, #12]
    636e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6370:	bf00      	nop
    6372:	3714      	adds	r7, #20
    6374:	46bd      	mov	sp, r7
    6376:	f85d 7b04 	ldr.w	r7, [sp], #4
    637a:	4770      	bx	lr

0000637c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    637c:	b480      	push	{r7}
    637e:	b083      	sub	sp, #12
    6380:	af00      	add	r7, sp, #0
    6382:	6078      	str	r0, [r7, #4]
    6384:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    6386:	687b      	ldr	r3, [r7, #4]
    6388:	683a      	ldr	r2, [r7, #0]
    638a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    638c:	bf00      	nop
    638e:	370c      	adds	r7, #12
    6390:	46bd      	mov	sp, r7
    6392:	f85d 7b04 	ldr.w	r7, [sp], #4
    6396:	4770      	bx	lr

00006398 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    6398:	b480      	push	{r7}
    639a:	b083      	sub	sp, #12
    639c:	af00      	add	r7, sp, #0
    639e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    63a0:	687b      	ldr	r3, [r7, #4]
    63a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    63a4:	4618      	mov	r0, r3
    63a6:	370c      	adds	r7, #12
    63a8:	46bd      	mov	sp, r7
    63aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ae:	4770      	bx	lr

000063b0 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    63b0:	b480      	push	{r7}
    63b2:	b085      	sub	sp, #20
    63b4:	af00      	add	r7, sp, #0
    63b6:	60f8      	str	r0, [r7, #12]
    63b8:	60b9      	str	r1, [r7, #8]
    63ba:	607a      	str	r2, [r7, #4]
	while (count--) {
    63bc:	e007      	b.n	63ce <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    63be:	68fb      	ldr	r3, [r7, #12]
    63c0:	1c5a      	adds	r2, r3, #1
    63c2:	60fa      	str	r2, [r7, #12]
    63c4:	68ba      	ldr	r2, [r7, #8]
    63c6:	1c51      	adds	r1, r2, #1
    63c8:	60b9      	str	r1, [r7, #8]
    63ca:	7812      	ldrb	r2, [r2, #0]
    63cc:	701a      	strb	r2, [r3, #0]
	while (count--) {
    63ce:	687b      	ldr	r3, [r7, #4]
    63d0:	1e5a      	subs	r2, r3, #1
    63d2:	607a      	str	r2, [r7, #4]
    63d4:	2b00      	cmp	r3, #0
    63d6:	d1f2      	bne.n	63be <_qspi_memcpy+0xe>
	}
}
    63d8:	bf00      	nop
    63da:	3714      	adds	r7, #20
    63dc:	46bd      	mov	sp, r7
    63de:	f85d 7b04 	ldr.w	r7, [sp], #4
    63e2:	4770      	bx	lr

000063e4 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    63e4:	b580      	push	{r7, lr}
    63e6:	b082      	sub	sp, #8
    63e8:	af00      	add	r7, sp, #0
    63ea:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    63ec:	4903      	ldr	r1, [pc, #12]	; (63fc <_qspi_end_transfer+0x18>)
    63ee:	6878      	ldr	r0, [r7, #4]
    63f0:	4b03      	ldr	r3, [pc, #12]	; (6400 <_qspi_end_transfer+0x1c>)
    63f2:	4798      	blx	r3
}
    63f4:	bf00      	nop
    63f6:	3708      	adds	r7, #8
    63f8:	46bd      	mov	sp, r7
    63fa:	bd80      	pop	{r7, pc}
    63fc:	01000002 	.word	0x01000002
    6400:	000062a1 	.word	0x000062a1

00006404 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    6404:	b580      	push	{r7, lr}
    6406:	b082      	sub	sp, #8
    6408:	af00      	add	r7, sp, #0
    640a:	6078      	str	r0, [r7, #4]
    640c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	2b00      	cmp	r3, #0
    6412:	d004      	beq.n	641e <_qspi_sync_init+0x1a>
    6414:	683b      	ldr	r3, [r7, #0]
    6416:	2b00      	cmp	r3, #0
    6418:	d001      	beq.n	641e <_qspi_sync_init+0x1a>
    641a:	2301      	movs	r3, #1
    641c:	e000      	b.n	6420 <_qspi_sync_init+0x1c>
    641e:	2300      	movs	r3, #0
    6420:	f003 0301 	and.w	r3, r3, #1
    6424:	b2db      	uxtb	r3, r3
    6426:	2240      	movs	r2, #64	; 0x40
    6428:	490c      	ldr	r1, [pc, #48]	; (645c <_qspi_sync_init+0x58>)
    642a:	4618      	mov	r0, r3
    642c:	4b0c      	ldr	r3, [pc, #48]	; (6460 <_qspi_sync_init+0x5c>)
    642e:	4798      	blx	r3
	dev->prvt = hw;
    6430:	687b      	ldr	r3, [r7, #4]
    6432:	683a      	ldr	r2, [r7, #0]
    6434:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    6436:	687b      	ldr	r3, [r7, #4]
    6438:	681b      	ldr	r3, [r3, #0]
    643a:	2101      	movs	r1, #1
    643c:	4618      	mov	r0, r3
    643e:	4b09      	ldr	r3, [pc, #36]	; (6464 <_qspi_sync_init+0x60>)
    6440:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    6442:	4909      	ldr	r1, [pc, #36]	; (6468 <_qspi_sync_init+0x64>)
    6444:	6838      	ldr	r0, [r7, #0]
    6446:	4b09      	ldr	r3, [pc, #36]	; (646c <_qspi_sync_init+0x68>)
    6448:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    644a:	4909      	ldr	r1, [pc, #36]	; (6470 <_qspi_sync_init+0x6c>)
    644c:	6838      	ldr	r0, [r7, #0]
    644e:	4b09      	ldr	r3, [pc, #36]	; (6474 <_qspi_sync_init+0x70>)
    6450:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    6452:	2300      	movs	r3, #0
}
    6454:	4618      	mov	r0, r3
    6456:	3708      	adds	r7, #8
    6458:	46bd      	mov	sp, r7
    645a:	bd80      	pop	{r7, pc}
    645c:	00010fd0 	.word	0x00010fd0
    6460:	00004409 	.word	0x00004409
    6464:	000062a1 	.word	0x000062a1
    6468:	06000011 	.word	0x06000011
    646c:	000062bd 	.word	0x000062bd
    6470:	00241300 	.word	0x00241300
    6474:	000062d9 	.word	0x000062d9

00006478 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    6478:	b580      	push	{r7, lr}
    647a:	b082      	sub	sp, #8
    647c:	af00      	add	r7, sp, #0
    647e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    6480:	687b      	ldr	r3, [r7, #4]
    6482:	681b      	ldr	r3, [r3, #0]
    6484:	2102      	movs	r1, #2
    6486:	4618      	mov	r0, r3
    6488:	4b03      	ldr	r3, [pc, #12]	; (6498 <_qspi_sync_enable+0x20>)
    648a:	4798      	blx	r3
	return ERR_NONE;
    648c:	2300      	movs	r3, #0
}
    648e:	4618      	mov	r0, r3
    6490:	3708      	adds	r7, #8
    6492:	46bd      	mov	sp, r7
    6494:	bd80      	pop	{r7, pc}
    6496:	bf00      	nop
    6498:	000062a1 	.word	0x000062a1

0000649c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    649c:	b580      	push	{r7, lr}
    649e:	b082      	sub	sp, #8
    64a0:	af00      	add	r7, sp, #0
    64a2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    64a4:	687b      	ldr	r3, [r7, #4]
    64a6:	681b      	ldr	r3, [r3, #0]
    64a8:	2100      	movs	r1, #0
    64aa:	4618      	mov	r0, r3
    64ac:	4b03      	ldr	r3, [pc, #12]	; (64bc <_qspi_sync_disable+0x20>)
    64ae:	4798      	blx	r3
	return ERR_NONE;
    64b0:	2300      	movs	r3, #0
}
    64b2:	4618      	mov	r0, r3
    64b4:	3708      	adds	r7, #8
    64b6:	46bd      	mov	sp, r7
    64b8:	bd80      	pop	{r7, pc}
    64ba:	bf00      	nop
    64bc:	000062a1 	.word	0x000062a1

000064c0 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    64c0:	b580      	push	{r7, lr}
    64c2:	b084      	sub	sp, #16
    64c4:	af00      	add	r7, sp, #0
    64c6:	6078      	str	r0, [r7, #4]
    64c8:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    64ca:	687b      	ldr	r3, [r7, #4]
    64cc:	681b      	ldr	r3, [r3, #0]
    64ce:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    64d0:	683b      	ldr	r3, [r7, #0]
    64d2:	781b      	ldrb	r3, [r3, #0]
    64d4:	f003 0320 	and.w	r3, r3, #32
    64d8:	b2db      	uxtb	r3, r3
    64da:	2b00      	cmp	r3, #0
    64dc:	d005      	beq.n	64ea <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    64de:	683b      	ldr	r3, [r7, #0]
    64e0:	689b      	ldr	r3, [r3, #8]
    64e2:	4619      	mov	r1, r3
    64e4:	68f8      	ldr	r0, [r7, #12]
    64e6:	4b13      	ldr	r3, [pc, #76]	; (6534 <_qspi_sync_command_set_ifr+0x74>)
    64e8:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    64ea:	683b      	ldr	r3, [r7, #0]
    64ec:	781b      	ldrb	r3, [r3, #0]
    64ee:	f003 0310 	and.w	r3, r3, #16
    64f2:	b2db      	uxtb	r3, r3
    64f4:	2b00      	cmp	r3, #0
    64f6:	d005      	beq.n	6504 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    64f8:	683b      	ldr	r3, [r7, #0]
    64fa:	791b      	ldrb	r3, [r3, #4]
    64fc:	4619      	mov	r1, r3
    64fe:	68f8      	ldr	r0, [r7, #12]
    6500:	4b0d      	ldr	r3, [pc, #52]	; (6538 <_qspi_sync_command_set_ifr+0x78>)
    6502:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    6504:	683b      	ldr	r3, [r7, #0]
    6506:	781b      	ldrb	r3, [r3, #0]
    6508:	f003 0340 	and.w	r3, r3, #64	; 0x40
    650c:	b2db      	uxtb	r3, r3
    650e:	2b00      	cmp	r3, #0
    6510:	d005      	beq.n	651e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    6512:	683b      	ldr	r3, [r7, #0]
    6514:	795b      	ldrb	r3, [r3, #5]
    6516:	4619      	mov	r1, r3
    6518:	68f8      	ldr	r0, [r7, #12]
    651a:	4b08      	ldr	r3, [pc, #32]	; (653c <_qspi_sync_command_set_ifr+0x7c>)
    651c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    651e:	683b      	ldr	r3, [r7, #0]
    6520:	681b      	ldr	r3, [r3, #0]
    6522:	4619      	mov	r1, r3
    6524:	68f8      	ldr	r0, [r7, #12]
    6526:	4b06      	ldr	r3, [pc, #24]	; (6540 <_qspi_sync_command_set_ifr+0x80>)
    6528:	4798      	blx	r3
}
    652a:	bf00      	nop
    652c:	3710      	adds	r7, #16
    652e:	46bd      	mov	sp, r7
    6530:	bd80      	pop	{r7, pc}
    6532:	bf00      	nop
    6534:	000062f5 	.word	0x000062f5
    6538:	00006311 	.word	0x00006311
    653c:	00006345 	.word	0x00006345
    6540:	0000637d 	.word	0x0000637d

00006544 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6544:	b580      	push	{r7, lr}
    6546:	b084      	sub	sp, #16
    6548:	af00      	add	r7, sp, #0
    654a:	6078      	str	r0, [r7, #4]
    654c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	681b      	ldr	r3, [r3, #0]
    6552:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    6554:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6558:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    655a:	683b      	ldr	r3, [r7, #0]
    655c:	781b      	ldrb	r3, [r3, #0]
    655e:	f003 0320 	and.w	r3, r3, #32
    6562:	b2db      	uxtb	r3, r3
    6564:	2b00      	cmp	r3, #0
    6566:	d004      	beq.n	6572 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    6568:	683b      	ldr	r3, [r7, #0]
    656a:	689b      	ldr	r3, [r3, #8]
    656c:	68fa      	ldr	r2, [r7, #12]
    656e:	4413      	add	r3, r2
    6570:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    6572:	68b8      	ldr	r0, [r7, #8]
    6574:	4b18      	ldr	r3, [pc, #96]	; (65d8 <_qspi_sync_run_transfer+0x94>)
    6576:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    6578:	683b      	ldr	r3, [r7, #0]
    657a:	691b      	ldr	r3, [r3, #16]
    657c:	2b00      	cmp	r3, #0
    657e:	d103      	bne.n	6588 <_qspi_sync_run_transfer+0x44>
    6580:	683b      	ldr	r3, [r7, #0]
    6582:	695b      	ldr	r3, [r3, #20]
    6584:	2b00      	cmp	r3, #0
    6586:	d001      	beq.n	658c <_qspi_sync_run_transfer+0x48>
    6588:	2301      	movs	r3, #1
    658a:	e000      	b.n	658e <_qspi_sync_run_transfer+0x4a>
    658c:	2300      	movs	r3, #0
    658e:	f003 0301 	and.w	r3, r3, #1
    6592:	b2db      	uxtb	r3, r3
    6594:	2282      	movs	r2, #130	; 0x82
    6596:	4911      	ldr	r1, [pc, #68]	; (65dc <_qspi_sync_run_transfer+0x98>)
    6598:	4618      	mov	r0, r3
    659a:	4b11      	ldr	r3, [pc, #68]	; (65e0 <_qspi_sync_run_transfer+0x9c>)
    659c:	4798      	blx	r3

	if (cmd->tx_buf) {
    659e:	683b      	ldr	r3, [r7, #0]
    65a0:	691b      	ldr	r3, [r3, #16]
    65a2:	2b00      	cmp	r3, #0
    65a4:	d008      	beq.n	65b8 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    65a6:	683b      	ldr	r3, [r7, #0]
    65a8:	6919      	ldr	r1, [r3, #16]
    65aa:	683b      	ldr	r3, [r7, #0]
    65ac:	68db      	ldr	r3, [r3, #12]
    65ae:	461a      	mov	r2, r3
    65b0:	68f8      	ldr	r0, [r7, #12]
    65b2:	4b0c      	ldr	r3, [pc, #48]	; (65e4 <_qspi_sync_run_transfer+0xa0>)
    65b4:	4798      	blx	r3
    65b6:	e007      	b.n	65c8 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    65b8:	683b      	ldr	r3, [r7, #0]
    65ba:	6958      	ldr	r0, [r3, #20]
    65bc:	683b      	ldr	r3, [r7, #0]
    65be:	68db      	ldr	r3, [r3, #12]
    65c0:	461a      	mov	r2, r3
    65c2:	68f9      	ldr	r1, [r7, #12]
    65c4:	4b07      	ldr	r3, [pc, #28]	; (65e4 <_qspi_sync_run_transfer+0xa0>)
    65c6:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    65c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    65cc:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    65d0:	bf00      	nop
    65d2:	3710      	adds	r7, #16
    65d4:	46bd      	mov	sp, r7
    65d6:	bd80      	pop	{r7, pc}
    65d8:	00006399 	.word	0x00006399
    65dc:	00010fd0 	.word	0x00010fd0
    65e0:	00004409 	.word	0x00004409
    65e4:	000063b1 	.word	0x000063b1

000065e8 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    65e8:	b580      	push	{r7, lr}
    65ea:	b082      	sub	sp, #8
    65ec:	af00      	add	r7, sp, #0
    65ee:	6078      	str	r0, [r7, #4]
    65f0:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    65f2:	6839      	ldr	r1, [r7, #0]
    65f4:	6878      	ldr	r0, [r7, #4]
    65f6:	4b14      	ldr	r3, [pc, #80]	; (6648 <_qspi_sync_serial_run_command+0x60>)
    65f8:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    65fa:	683b      	ldr	r3, [r7, #0]
    65fc:	781b      	ldrb	r3, [r3, #0]
    65fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    6602:	b2db      	uxtb	r3, r3
    6604:	2b00      	cmp	r3, #0
    6606:	d003      	beq.n	6610 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    6608:	6839      	ldr	r1, [r7, #0]
    660a:	6878      	ldr	r0, [r7, #4]
    660c:	4b0f      	ldr	r3, [pc, #60]	; (664c <_qspi_sync_serial_run_command+0x64>)
    660e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    6610:	687b      	ldr	r3, [r7, #4]
    6612:	681b      	ldr	r3, [r3, #0]
    6614:	4618      	mov	r0, r3
    6616:	4b0e      	ldr	r3, [pc, #56]	; (6650 <_qspi_sync_serial_run_command+0x68>)
    6618:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    661a:	bf00      	nop
    661c:	687b      	ldr	r3, [r7, #4]
    661e:	681b      	ldr	r3, [r3, #0]
    6620:	4618      	mov	r0, r3
    6622:	4b0c      	ldr	r3, [pc, #48]	; (6654 <_qspi_sync_serial_run_command+0x6c>)
    6624:	4798      	blx	r3
    6626:	4603      	mov	r3, r0
    6628:	f083 0301 	eor.w	r3, r3, #1
    662c:	b2db      	uxtb	r3, r3
    662e:	2b00      	cmp	r3, #0
    6630:	d1f4      	bne.n	661c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    6632:	687b      	ldr	r3, [r7, #4]
    6634:	681b      	ldr	r3, [r3, #0]
    6636:	4618      	mov	r0, r3
    6638:	4b07      	ldr	r3, [pc, #28]	; (6658 <_qspi_sync_serial_run_command+0x70>)
    663a:	4798      	blx	r3
	return ERR_NONE;
    663c:	2300      	movs	r3, #0
}
    663e:	4618      	mov	r0, r3
    6640:	3708      	adds	r7, #8
    6642:	46bd      	mov	sp, r7
    6644:	bd80      	pop	{r7, pc}
    6646:	bf00      	nop
    6648:	000064c1 	.word	0x000064c1
    664c:	00006545 	.word	0x00006545
    6650:	000063e5 	.word	0x000063e5
    6654:	0000625d 	.word	0x0000625d
    6658:	00006285 	.word	0x00006285

0000665c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    665c:	b480      	push	{r7}
    665e:	b083      	sub	sp, #12
    6660:	af00      	add	r7, sp, #0
    6662:	6078      	str	r0, [r7, #4]
    6664:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6666:	bf00      	nop
    6668:	687b      	ldr	r3, [r7, #4]
    666a:	691a      	ldr	r2, [r3, #16]
    666c:	683b      	ldr	r3, [r7, #0]
    666e:	4013      	ands	r3, r2
    6670:	2b00      	cmp	r3, #0
    6672:	d1f9      	bne.n	6668 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    6674:	bf00      	nop
    6676:	370c      	adds	r7, #12
    6678:	46bd      	mov	sp, r7
    667a:	f85d 7b04 	ldr.w	r7, [sp], #4
    667e:	4770      	bx	lr

00006680 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    6680:	b480      	push	{r7}
    6682:	b083      	sub	sp, #12
    6684:	af00      	add	r7, sp, #0
    6686:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6688:	687b      	ldr	r3, [r7, #4]
    668a:	f44f 7280 	mov.w	r2, #256	; 0x100
    668e:	819a      	strh	r2, [r3, #12]
}
    6690:	bf00      	nop
    6692:	370c      	adds	r7, #12
    6694:	46bd      	mov	sp, r7
    6696:	f85d 7b04 	ldr.w	r7, [sp], #4
    669a:	4770      	bx	lr

0000669c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    669c:	b480      	push	{r7}
    669e:	b083      	sub	sp, #12
    66a0:	af00      	add	r7, sp, #0
    66a2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    66a4:	687b      	ldr	r3, [r7, #4]
    66a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    66aa:	819a      	strh	r2, [r3, #12]
}
    66ac:	bf00      	nop
    66ae:	370c      	adds	r7, #12
    66b0:	46bd      	mov	sp, r7
    66b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    66b6:	4770      	bx	lr

000066b8 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    66b8:	b480      	push	{r7}
    66ba:	b083      	sub	sp, #12
    66bc:	af00      	add	r7, sp, #0
    66be:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    66c0:	687b      	ldr	r3, [r7, #4]
    66c2:	899b      	ldrh	r3, [r3, #12]
    66c4:	b29b      	uxth	r3, r3
}
    66c6:	4618      	mov	r0, r3
    66c8:	370c      	adds	r7, #12
    66ca:	46bd      	mov	sp, r7
    66cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    66d0:	4770      	bx	lr

000066d2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    66d2:	b480      	push	{r7}
    66d4:	b083      	sub	sp, #12
    66d6:	af00      	add	r7, sp, #0
    66d8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    66da:	687b      	ldr	r3, [r7, #4]
    66dc:	895b      	ldrh	r3, [r3, #10]
    66de:	b29b      	uxth	r3, r3
}
    66e0:	4618      	mov	r0, r3
    66e2:	370c      	adds	r7, #12
    66e4:	46bd      	mov	sp, r7
    66e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    66ea:	4770      	bx	lr

000066ec <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    66ec:	b580      	push	{r7, lr}
    66ee:	b082      	sub	sp, #8
    66f0:	af00      	add	r7, sp, #0
    66f2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	881b      	ldrh	r3, [r3, #0]
    66f8:	b29b      	uxth	r3, r3
    66fa:	f043 0301 	orr.w	r3, r3, #1
    66fe:	b29a      	uxth	r2, r3
    6700:	687b      	ldr	r3, [r7, #4]
    6702:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    6704:	2101      	movs	r1, #1
    6706:	6878      	ldr	r0, [r7, #4]
    6708:	4b02      	ldr	r3, [pc, #8]	; (6714 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    670a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    670c:	bf00      	nop
    670e:	3708      	adds	r7, #8
    6710:	46bd      	mov	sp, r7
    6712:	bd80      	pop	{r7, pc}
    6714:	0000665d 	.word	0x0000665d

00006718 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6718:	b580      	push	{r7, lr}
    671a:	b084      	sub	sp, #16
    671c:	af00      	add	r7, sp, #0
    671e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6720:	f248 0103 	movw	r1, #32771	; 0x8003
    6724:	6878      	ldr	r0, [r7, #4]
    6726:	4b0a      	ldr	r3, [pc, #40]	; (6750 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    6728:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    672a:	687b      	ldr	r3, [r7, #4]
    672c:	881b      	ldrh	r3, [r3, #0]
    672e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    6730:	89fb      	ldrh	r3, [r7, #14]
    6732:	085b      	lsrs	r3, r3, #1
    6734:	b29b      	uxth	r3, r3
    6736:	f003 0301 	and.w	r3, r3, #1
    673a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    673c:	89fb      	ldrh	r3, [r7, #14]
    673e:	2b00      	cmp	r3, #0
    6740:	bf14      	ite	ne
    6742:	2301      	movne	r3, #1
    6744:	2300      	moveq	r3, #0
    6746:	b2db      	uxtb	r3, r3
}
    6748:	4618      	mov	r0, r3
    674a:	3710      	adds	r7, #16
    674c:	46bd      	mov	sp, r7
    674e:	bd80      	pop	{r7, pc}
    6750:	0000665d 	.word	0x0000665d

00006754 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6754:	b580      	push	{r7, lr}
    6756:	b082      	sub	sp, #8
    6758:	af00      	add	r7, sp, #0
    675a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    675c:	687b      	ldr	r3, [r7, #4]
    675e:	881b      	ldrh	r3, [r3, #0]
    6760:	b29b      	uxth	r3, r3
    6762:	f023 0302 	bic.w	r3, r3, #2
    6766:	b29a      	uxth	r2, r3
    6768:	687b      	ldr	r3, [r7, #4]
    676a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    676c:	f248 0103 	movw	r1, #32771	; 0x8003
    6770:	6878      	ldr	r0, [r7, #4]
    6772:	4b03      	ldr	r3, [pc, #12]	; (6780 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    6774:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6776:	bf00      	nop
    6778:	3708      	adds	r7, #8
    677a:	46bd      	mov	sp, r7
    677c:	bd80      	pop	{r7, pc}
    677e:	bf00      	nop
    6780:	0000665d 	.word	0x0000665d

00006784 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    6784:	b580      	push	{r7, lr}
    6786:	b082      	sub	sp, #8
    6788:	af00      	add	r7, sp, #0
    678a:	6078      	str	r0, [r7, #4]
    678c:	460b      	mov	r3, r1
    678e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6790:	687b      	ldr	r3, [r7, #4]
    6792:	887a      	ldrh	r2, [r7, #2]
    6794:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6796:	f248 0103 	movw	r1, #32771	; 0x8003
    679a:	6878      	ldr	r0, [r7, #4]
    679c:	4b02      	ldr	r3, [pc, #8]	; (67a8 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    679e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    67a0:	bf00      	nop
    67a2:	3708      	adds	r7, #8
    67a4:	46bd      	mov	sp, r7
    67a6:	bd80      	pop	{r7, pc}
    67a8:	0000665d 	.word	0x0000665d

000067ac <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    67ac:	b580      	push	{r7, lr}
    67ae:	b082      	sub	sp, #8
    67b0:	af00      	add	r7, sp, #0
    67b2:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    67b4:	2108      	movs	r1, #8
    67b6:	6878      	ldr	r0, [r7, #4]
    67b8:	4b03      	ldr	r3, [pc, #12]	; (67c8 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    67ba:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    67bc:	687b      	ldr	r3, [r7, #4]
    67be:	699b      	ldr	r3, [r3, #24]
}
    67c0:	4618      	mov	r0, r3
    67c2:	3708      	adds	r7, #8
    67c4:	46bd      	mov	sp, r7
    67c6:	bd80      	pop	{r7, pc}
    67c8:	0000665d 	.word	0x0000665d

000067cc <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    67cc:	b480      	push	{r7}
    67ce:	b083      	sub	sp, #12
    67d0:	af00      	add	r7, sp, #0
    67d2:	6078      	str	r0, [r7, #4]
    67d4:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    67d6:	687b      	ldr	r3, [r7, #4]
    67d8:	683a      	ldr	r2, [r7, #0]
    67da:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    67dc:	bf00      	nop
    67de:	370c      	adds	r7, #12
    67e0:	46bd      	mov	sp, r7
    67e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    67e6:	4770      	bx	lr

000067e8 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    67e8:	b580      	push	{r7, lr}
    67ea:	b082      	sub	sp, #8
    67ec:	af00      	add	r7, sp, #0
    67ee:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    67f0:	687b      	ldr	r3, [r7, #4]
    67f2:	2b00      	cmp	r3, #0
    67f4:	d005      	beq.n	6802 <_calendar_init+0x1a>
    67f6:	687b      	ldr	r3, [r7, #4]
    67f8:	681b      	ldr	r3, [r3, #0]
    67fa:	2b00      	cmp	r3, #0
    67fc:	d001      	beq.n	6802 <_calendar_init+0x1a>
    67fe:	2301      	movs	r3, #1
    6800:	e000      	b.n	6804 <_calendar_init+0x1c>
    6802:	2300      	movs	r3, #0
    6804:	f003 0301 	and.w	r3, r3, #1
    6808:	b2db      	uxtb	r3, r3
    680a:	222f      	movs	r2, #47	; 0x2f
    680c:	491b      	ldr	r1, [pc, #108]	; (687c <_calendar_init+0x94>)
    680e:	4618      	mov	r0, r3
    6810:	4b1b      	ldr	r3, [pc, #108]	; (6880 <_calendar_init+0x98>)
    6812:	4798      	blx	r3

	_rtc_dev = dev;
    6814:	4a1b      	ldr	r2, [pc, #108]	; (6884 <_calendar_init+0x9c>)
    6816:	687b      	ldr	r3, [r7, #4]
    6818:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    681a:	687b      	ldr	r3, [r7, #4]
    681c:	681b      	ldr	r3, [r3, #0]
    681e:	4618      	mov	r0, r3
    6820:	4b19      	ldr	r3, [pc, #100]	; (6888 <_calendar_init+0xa0>)
    6822:	4798      	blx	r3
    6824:	4603      	mov	r3, r0
    6826:	2b00      	cmp	r3, #0
    6828:	d00a      	beq.n	6840 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    682a:	687b      	ldr	r3, [r7, #4]
    682c:	681b      	ldr	r3, [r3, #0]
    682e:	4618      	mov	r0, r3
    6830:	4b16      	ldr	r3, [pc, #88]	; (688c <_calendar_init+0xa4>)
    6832:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    6834:	687b      	ldr	r3, [r7, #4]
    6836:	681b      	ldr	r3, [r3, #0]
    6838:	2102      	movs	r1, #2
    683a:	4618      	mov	r0, r3
    683c:	4b14      	ldr	r3, [pc, #80]	; (6890 <_calendar_init+0xa8>)
    683e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    6840:	687b      	ldr	r3, [r7, #4]
    6842:	681b      	ldr	r3, [r3, #0]
    6844:	4618      	mov	r0, r3
    6846:	4b13      	ldr	r3, [pc, #76]	; (6894 <_calendar_init+0xac>)
    6848:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    684a:	687b      	ldr	r3, [r7, #4]
    684c:	681b      	ldr	r3, [r3, #0]
    684e:	2101      	movs	r1, #1
    6850:	4618      	mov	r0, r3
    6852:	4b0f      	ldr	r3, [pc, #60]	; (6890 <_calendar_init+0xa8>)
    6854:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    6856:	687b      	ldr	r3, [r7, #4]
    6858:	681b      	ldr	r3, [r3, #0]
    685a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    685e:	4618      	mov	r0, r3
    6860:	4b0d      	ldr	r3, [pc, #52]	; (6898 <_calendar_init+0xb0>)
    6862:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    6864:	687b      	ldr	r3, [r7, #4]
    6866:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6868:	2100      	movs	r1, #0
    686a:	4618      	mov	r0, r3
    686c:	4b0b      	ldr	r3, [pc, #44]	; (689c <_calendar_init+0xb4>)
    686e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6870:	2300      	movs	r3, #0
}
    6872:	4618      	mov	r0, r3
    6874:	3708      	adds	r7, #8
    6876:	46bd      	mov	sp, r7
    6878:	bd80      	pop	{r7, pc}
    687a:	bf00      	nop
    687c:	00010fe8 	.word	0x00010fe8
    6880:	00004409 	.word	0x00004409
    6884:	20000e20 	.word	0x20000e20
    6888:	00006719 	.word	0x00006719
    688c:	00006755 	.word	0x00006755
    6890:	0000665d 	.word	0x0000665d
    6894:	000066ed 	.word	0x000066ed
    6898:	00006785 	.word	0x00006785
    689c:	000067cd 	.word	0x000067cd

000068a0 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    68a0:	b580      	push	{r7, lr}
    68a2:	b082      	sub	sp, #8
    68a4:	af00      	add	r7, sp, #0
    68a6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    68a8:	687b      	ldr	r3, [r7, #4]
    68aa:	2b00      	cmp	r3, #0
    68ac:	d005      	beq.n	68ba <_calendar_get_counter+0x1a>
    68ae:	687b      	ldr	r3, [r7, #4]
    68b0:	681b      	ldr	r3, [r3, #0]
    68b2:	2b00      	cmp	r3, #0
    68b4:	d001      	beq.n	68ba <_calendar_get_counter+0x1a>
    68b6:	2301      	movs	r3, #1
    68b8:	e000      	b.n	68bc <_calendar_get_counter+0x1c>
    68ba:	2300      	movs	r3, #0
    68bc:	f003 0301 	and.w	r3, r3, #1
    68c0:	b2db      	uxtb	r3, r3
    68c2:	2299      	movs	r2, #153	; 0x99
    68c4:	4906      	ldr	r1, [pc, #24]	; (68e0 <_calendar_get_counter+0x40>)
    68c6:	4618      	mov	r0, r3
    68c8:	4b06      	ldr	r3, [pc, #24]	; (68e4 <_calendar_get_counter+0x44>)
    68ca:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    68cc:	687b      	ldr	r3, [r7, #4]
    68ce:	681b      	ldr	r3, [r3, #0]
    68d0:	4618      	mov	r0, r3
    68d2:	4b05      	ldr	r3, [pc, #20]	; (68e8 <_calendar_get_counter+0x48>)
    68d4:	4798      	blx	r3
    68d6:	4603      	mov	r3, r0
}
    68d8:	4618      	mov	r0, r3
    68da:	3708      	adds	r7, #8
    68dc:	46bd      	mov	sp, r7
    68de:	bd80      	pop	{r7, pc}
    68e0:	00010fe8 	.word	0x00010fe8
    68e4:	00004409 	.word	0x00004409
    68e8:	000067ad 	.word	0x000067ad

000068ec <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    68ec:	b580      	push	{r7, lr}
    68ee:	b084      	sub	sp, #16
    68f0:	af00      	add	r7, sp, #0
    68f2:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    68f4:	687b      	ldr	r3, [r7, #4]
    68f6:	681b      	ldr	r3, [r3, #0]
    68f8:	4618      	mov	r0, r3
    68fa:	4b19      	ldr	r3, [pc, #100]	; (6960 <_rtc_interrupt_handler+0x74>)
    68fc:	4798      	blx	r3
    68fe:	4603      	mov	r3, r0
    6900:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    6902:	687b      	ldr	r3, [r7, #4]
    6904:	681b      	ldr	r3, [r3, #0]
    6906:	4618      	mov	r0, r3
    6908:	4b16      	ldr	r3, [pc, #88]	; (6964 <_rtc_interrupt_handler+0x78>)
    690a:	4798      	blx	r3
    690c:	4603      	mov	r3, r0
    690e:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    6910:	89fa      	ldrh	r2, [r7, #14]
    6912:	89bb      	ldrh	r3, [r7, #12]
    6914:	4013      	ands	r3, r2
    6916:	b29b      	uxth	r3, r3
    6918:	f403 7380 	and.w	r3, r3, #256	; 0x100
    691c:	2b00      	cmp	r3, #0
    691e:	d009      	beq.n	6934 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    6920:	687b      	ldr	r3, [r7, #4]
    6922:	685b      	ldr	r3, [r3, #4]
    6924:	6878      	ldr	r0, [r7, #4]
    6926:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6928:	687b      	ldr	r3, [r7, #4]
    692a:	681b      	ldr	r3, [r3, #0]
    692c:	4618      	mov	r0, r3
    692e:	4b0e      	ldr	r3, [pc, #56]	; (6968 <_rtc_interrupt_handler+0x7c>)
    6930:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    6932:	e010      	b.n	6956 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    6934:	89fa      	ldrh	r2, [r7, #14]
    6936:	89bb      	ldrh	r3, [r7, #12]
    6938:	4013      	ands	r3, r2
    693a:	b29b      	uxth	r3, r3
    693c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6940:	2b00      	cmp	r3, #0
    6942:	d008      	beq.n	6956 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    6944:	687b      	ldr	r3, [r7, #4]
    6946:	689b      	ldr	r3, [r3, #8]
    6948:	6878      	ldr	r0, [r7, #4]
    694a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    694c:	687b      	ldr	r3, [r7, #4]
    694e:	681b      	ldr	r3, [r3, #0]
    6950:	4618      	mov	r0, r3
    6952:	4b06      	ldr	r3, [pc, #24]	; (696c <_rtc_interrupt_handler+0x80>)
    6954:	4798      	blx	r3
}
    6956:	bf00      	nop
    6958:	3710      	adds	r7, #16
    695a:	46bd      	mov	sp, r7
    695c:	bd80      	pop	{r7, pc}
    695e:	bf00      	nop
    6960:	000066b9 	.word	0x000066b9
    6964:	000066d3 	.word	0x000066d3
    6968:	00006681 	.word	0x00006681
    696c:	0000669d 	.word	0x0000669d

00006970 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6970:	b580      	push	{r7, lr}
    6972:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    6974:	4b03      	ldr	r3, [pc, #12]	; (6984 <RTC_Handler+0x14>)
    6976:	681b      	ldr	r3, [r3, #0]
    6978:	4618      	mov	r0, r3
    697a:	4b03      	ldr	r3, [pc, #12]	; (6988 <RTC_Handler+0x18>)
    697c:	4798      	blx	r3
}
    697e:	bf00      	nop
    6980:	bd80      	pop	{r7, pc}
    6982:	bf00      	nop
    6984:	20000e20 	.word	0x20000e20
    6988:	000068ed 	.word	0x000068ed

0000698c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    698c:	b480      	push	{r7}
    698e:	b083      	sub	sp, #12
    6990:	af00      	add	r7, sp, #0
    6992:	6078      	str	r0, [r7, #4]
    6994:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6996:	bf00      	nop
    6998:	687b      	ldr	r3, [r7, #4]
    699a:	69da      	ldr	r2, [r3, #28]
    699c:	683b      	ldr	r3, [r7, #0]
    699e:	4013      	ands	r3, r2
    69a0:	2b00      	cmp	r3, #0
    69a2:	d1f9      	bne.n	6998 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    69a4:	bf00      	nop
    69a6:	370c      	adds	r7, #12
    69a8:	46bd      	mov	sp, r7
    69aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    69ae:	4770      	bx	lr

000069b0 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    69b0:	b480      	push	{r7}
    69b2:	b083      	sub	sp, #12
    69b4:	af00      	add	r7, sp, #0
    69b6:	6078      	str	r0, [r7, #4]
    69b8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    69ba:	687b      	ldr	r3, [r7, #4]
    69bc:	69da      	ldr	r2, [r3, #28]
    69be:	683b      	ldr	r3, [r7, #0]
    69c0:	4013      	ands	r3, r2
    69c2:	2b00      	cmp	r3, #0
    69c4:	bf14      	ite	ne
    69c6:	2301      	movne	r3, #1
    69c8:	2300      	moveq	r3, #0
    69ca:	b2db      	uxtb	r3, r3
}
    69cc:	4618      	mov	r0, r3
    69ce:	370c      	adds	r7, #12
    69d0:	46bd      	mov	sp, r7
    69d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    69d6:	4770      	bx	lr

000069d8 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    69d8:	b480      	push	{r7}
    69da:	b083      	sub	sp, #12
    69dc:	af00      	add	r7, sp, #0
    69de:	6078      	str	r0, [r7, #4]
    69e0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    69e2:	bf00      	nop
    69e4:	687b      	ldr	r3, [r7, #4]
    69e6:	69da      	ldr	r2, [r3, #28]
    69e8:	683b      	ldr	r3, [r7, #0]
    69ea:	4013      	ands	r3, r2
    69ec:	2b00      	cmp	r3, #0
    69ee:	d1f9      	bne.n	69e4 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    69f0:	bf00      	nop
    69f2:	370c      	adds	r7, #12
    69f4:	46bd      	mov	sp, r7
    69f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    69fa:	4770      	bx	lr

000069fc <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    69fc:	b480      	push	{r7}
    69fe:	b083      	sub	sp, #12
    6a00:	af00      	add	r7, sp, #0
    6a02:	6078      	str	r0, [r7, #4]
    6a04:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6a06:	687b      	ldr	r3, [r7, #4]
    6a08:	69da      	ldr	r2, [r3, #28]
    6a0a:	683b      	ldr	r3, [r7, #0]
    6a0c:	4013      	ands	r3, r2
    6a0e:	2b00      	cmp	r3, #0
    6a10:	bf14      	ite	ne
    6a12:	2301      	movne	r3, #1
    6a14:	2300      	moveq	r3, #0
    6a16:	b2db      	uxtb	r3, r3
}
    6a18:	4618      	mov	r0, r3
    6a1a:	370c      	adds	r7, #12
    6a1c:	46bd      	mov	sp, r7
    6a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a22:	4770      	bx	lr

00006a24 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    6a24:	b480      	push	{r7}
    6a26:	b083      	sub	sp, #12
    6a28:	af00      	add	r7, sp, #0
    6a2a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6a2c:	687b      	ldr	r3, [r7, #4]
    6a2e:	2201      	movs	r2, #1
    6a30:	761a      	strb	r2, [r3, #24]
}
    6a32:	bf00      	nop
    6a34:	370c      	adds	r7, #12
    6a36:	46bd      	mov	sp, r7
    6a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a3c:	4770      	bx	lr

00006a3e <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    6a3e:	b480      	push	{r7}
    6a40:	b083      	sub	sp, #12
    6a42:	af00      	add	r7, sp, #0
    6a44:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	2202      	movs	r2, #2
    6a4a:	761a      	strb	r2, [r3, #24]
}
    6a4c:	bf00      	nop
    6a4e:	370c      	adds	r7, #12
    6a50:	46bd      	mov	sp, r7
    6a52:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a56:	4770      	bx	lr

00006a58 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    6a58:	b480      	push	{r7}
    6a5a:	b083      	sub	sp, #12
    6a5c:	af00      	add	r7, sp, #0
    6a5e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6a60:	687b      	ldr	r3, [r7, #4]
    6a62:	7e1b      	ldrb	r3, [r3, #24]
    6a64:	b2db      	uxtb	r3, r3
}
    6a66:	4618      	mov	r0, r3
    6a68:	370c      	adds	r7, #12
    6a6a:	46bd      	mov	sp, r7
    6a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a70:	4770      	bx	lr

00006a72 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6a72:	b480      	push	{r7}
    6a74:	b085      	sub	sp, #20
    6a76:	af00      	add	r7, sp, #0
    6a78:	6078      	str	r0, [r7, #4]
    6a7a:	460b      	mov	r3, r1
    6a7c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    6a7e:	687b      	ldr	r3, [r7, #4]
    6a80:	7e1b      	ldrb	r3, [r3, #24]
    6a82:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6a84:	7bfa      	ldrb	r2, [r7, #15]
    6a86:	78fb      	ldrb	r3, [r7, #3]
    6a88:	4013      	ands	r3, r2
    6a8a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6a8c:	7bfb      	ldrb	r3, [r7, #15]
}
    6a8e:	4618      	mov	r0, r3
    6a90:	3714      	adds	r7, #20
    6a92:	46bd      	mov	sp, r7
    6a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a98:	4770      	bx	lr

00006a9a <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6a9a:	b480      	push	{r7}
    6a9c:	b083      	sub	sp, #12
    6a9e:	af00      	add	r7, sp, #0
    6aa0:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6aa2:	687b      	ldr	r3, [r7, #4]
    6aa4:	7e1b      	ldrb	r3, [r3, #24]
    6aa6:	b2db      	uxtb	r3, r3
}
    6aa8:	4618      	mov	r0, r3
    6aaa:	370c      	adds	r7, #12
    6aac:	46bd      	mov	sp, r7
    6aae:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ab2:	4770      	bx	lr

00006ab4 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6ab4:	b480      	push	{r7}
    6ab6:	b083      	sub	sp, #12
    6ab8:	af00      	add	r7, sp, #0
    6aba:	6078      	str	r0, [r7, #4]
    6abc:	460b      	mov	r3, r1
    6abe:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	78fa      	ldrb	r2, [r7, #3]
    6ac4:	761a      	strb	r2, [r3, #24]
}
    6ac6:	bf00      	nop
    6ac8:	370c      	adds	r7, #12
    6aca:	46bd      	mov	sp, r7
    6acc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ad0:	4770      	bx	lr
	...

00006ad4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6ad4:	b580      	push	{r7, lr}
    6ad6:	b082      	sub	sp, #8
    6ad8:	af00      	add	r7, sp, #0
    6ada:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6adc:	687b      	ldr	r3, [r7, #4]
    6ade:	681b      	ldr	r3, [r3, #0]
    6ae0:	f043 0202 	orr.w	r2, r3, #2
    6ae4:	687b      	ldr	r3, [r7, #4]
    6ae6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6ae8:	2103      	movs	r1, #3
    6aea:	6878      	ldr	r0, [r7, #4]
    6aec:	4b02      	ldr	r3, [pc, #8]	; (6af8 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    6aee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6af0:	bf00      	nop
    6af2:	3708      	adds	r7, #8
    6af4:	46bd      	mov	sp, r7
    6af6:	bd80      	pop	{r7, pc}
    6af8:	0000698d 	.word	0x0000698d

00006afc <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6afc:	b580      	push	{r7, lr}
    6afe:	b082      	sub	sp, #8
    6b00:	af00      	add	r7, sp, #0
    6b02:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6b04:	687b      	ldr	r3, [r7, #4]
    6b06:	681b      	ldr	r3, [r3, #0]
    6b08:	f023 0202 	bic.w	r2, r3, #2
    6b0c:	687b      	ldr	r3, [r7, #4]
    6b0e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6b10:	2103      	movs	r1, #3
    6b12:	6878      	ldr	r0, [r7, #4]
    6b14:	4b02      	ldr	r3, [pc, #8]	; (6b20 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    6b16:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b18:	bf00      	nop
    6b1a:	3708      	adds	r7, #8
    6b1c:	46bd      	mov	sp, r7
    6b1e:	bd80      	pop	{r7, pc}
    6b20:	0000698d 	.word	0x0000698d

00006b24 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6b24:	b480      	push	{r7}
    6b26:	b085      	sub	sp, #20
    6b28:	af00      	add	r7, sp, #0
    6b2a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6b2c:	687b      	ldr	r3, [r7, #4]
    6b2e:	681b      	ldr	r3, [r3, #0]
    6b30:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6b32:	68fb      	ldr	r3, [r7, #12]
    6b34:	0edb      	lsrs	r3, r3, #27
    6b36:	f003 0301 	and.w	r3, r3, #1
    6b3a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6b3c:	68fb      	ldr	r3, [r7, #12]
    6b3e:	2b00      	cmp	r3, #0
    6b40:	bf14      	ite	ne
    6b42:	2301      	movne	r3, #1
    6b44:	2300      	moveq	r3, #0
    6b46:	b2db      	uxtb	r3, r3
}
    6b48:	4618      	mov	r0, r3
    6b4a:	3714      	adds	r7, #20
    6b4c:	46bd      	mov	sp, r7
    6b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b52:	4770      	bx	lr

00006b54 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6b54:	b580      	push	{r7, lr}
    6b56:	b084      	sub	sp, #16
    6b58:	af00      	add	r7, sp, #0
    6b5a:	6078      	str	r0, [r7, #4]
    6b5c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6b5e:	2103      	movs	r1, #3
    6b60:	6878      	ldr	r0, [r7, #4]
    6b62:	4b07      	ldr	r3, [pc, #28]	; (6b80 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6b64:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6b66:	687b      	ldr	r3, [r7, #4]
    6b68:	681b      	ldr	r3, [r3, #0]
    6b6a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6b6c:	68fa      	ldr	r2, [r7, #12]
    6b6e:	683b      	ldr	r3, [r7, #0]
    6b70:	4013      	ands	r3, r2
    6b72:	60fb      	str	r3, [r7, #12]
	return tmp;
    6b74:	68fb      	ldr	r3, [r7, #12]
}
    6b76:	4618      	mov	r0, r3
    6b78:	3710      	adds	r7, #16
    6b7a:	46bd      	mov	sp, r7
    6b7c:	bd80      	pop	{r7, pc}
    6b7e:	bf00      	nop
    6b80:	0000698d 	.word	0x0000698d

00006b84 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6b84:	b580      	push	{r7, lr}
    6b86:	b082      	sub	sp, #8
    6b88:	af00      	add	r7, sp, #0
    6b8a:	6078      	str	r0, [r7, #4]
    6b8c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6b8e:	687b      	ldr	r3, [r7, #4]
    6b90:	683a      	ldr	r2, [r7, #0]
    6b92:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6b94:	2103      	movs	r1, #3
    6b96:	6878      	ldr	r0, [r7, #4]
    6b98:	4b02      	ldr	r3, [pc, #8]	; (6ba4 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6b9a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b9c:	bf00      	nop
    6b9e:	3708      	adds	r7, #8
    6ba0:	46bd      	mov	sp, r7
    6ba2:	bd80      	pop	{r7, pc}
    6ba4:	0000698d 	.word	0x0000698d

00006ba8 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6ba8:	b580      	push	{r7, lr}
    6baa:	b084      	sub	sp, #16
    6bac:	af00      	add	r7, sp, #0
    6bae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6bb0:	2103      	movs	r1, #3
    6bb2:	6878      	ldr	r0, [r7, #4]
    6bb4:	4b09      	ldr	r3, [pc, #36]	; (6bdc <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    6bb6:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6bb8:	687b      	ldr	r3, [r7, #4]
    6bba:	681b      	ldr	r3, [r3, #0]
    6bbc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    6bbe:	68fb      	ldr	r3, [r7, #12]
    6bc0:	085b      	lsrs	r3, r3, #1
    6bc2:	f003 0301 	and.w	r3, r3, #1
    6bc6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6bc8:	68fb      	ldr	r3, [r7, #12]
    6bca:	2b00      	cmp	r3, #0
    6bcc:	bf14      	ite	ne
    6bce:	2301      	movne	r3, #1
    6bd0:	2300      	moveq	r3, #0
    6bd2:	b2db      	uxtb	r3, r3
}
    6bd4:	4618      	mov	r0, r3
    6bd6:	3710      	adds	r7, #16
    6bd8:	46bd      	mov	sp, r7
    6bda:	bd80      	pop	{r7, pc}
    6bdc:	000069d9 	.word	0x000069d9

00006be0 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6be0:	b580      	push	{r7, lr}
    6be2:	b082      	sub	sp, #8
    6be4:	af00      	add	r7, sp, #0
    6be6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6be8:	687b      	ldr	r3, [r7, #4]
    6bea:	681b      	ldr	r3, [r3, #0]
    6bec:	f023 0202 	bic.w	r2, r3, #2
    6bf0:	687b      	ldr	r3, [r7, #4]
    6bf2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6bf4:	2103      	movs	r1, #3
    6bf6:	6878      	ldr	r0, [r7, #4]
    6bf8:	4b02      	ldr	r3, [pc, #8]	; (6c04 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    6bfa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6bfc:	bf00      	nop
    6bfe:	3708      	adds	r7, #8
    6c00:	46bd      	mov	sp, r7
    6c02:	bd80      	pop	{r7, pc}
    6c04:	000069d9 	.word	0x000069d9

00006c08 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    6c08:	b580      	push	{r7, lr}
    6c0a:	b084      	sub	sp, #16
    6c0c:	af00      	add	r7, sp, #0
    6c0e:	6078      	str	r0, [r7, #4]
    6c10:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6c12:	2103      	movs	r1, #3
    6c14:	6878      	ldr	r0, [r7, #4]
    6c16:	4b07      	ldr	r3, [pc, #28]	; (6c34 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    6c18:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6c1a:	687b      	ldr	r3, [r7, #4]
    6c1c:	681b      	ldr	r3, [r3, #0]
    6c1e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6c20:	68fa      	ldr	r2, [r7, #12]
    6c22:	683b      	ldr	r3, [r7, #0]
    6c24:	4013      	ands	r3, r2
    6c26:	60fb      	str	r3, [r7, #12]
	return tmp;
    6c28:	68fb      	ldr	r3, [r7, #12]
}
    6c2a:	4618      	mov	r0, r3
    6c2c:	3710      	adds	r7, #16
    6c2e:	46bd      	mov	sp, r7
    6c30:	bd80      	pop	{r7, pc}
    6c32:	bf00      	nop
    6c34:	000069d9 	.word	0x000069d9

00006c38 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    6c38:	b580      	push	{r7, lr}
    6c3a:	b082      	sub	sp, #8
    6c3c:	af00      	add	r7, sp, #0
    6c3e:	6078      	str	r0, [r7, #4]
    6c40:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6c42:	687b      	ldr	r3, [r7, #4]
    6c44:	683a      	ldr	r2, [r7, #0]
    6c46:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6c48:	2103      	movs	r1, #3
    6c4a:	6878      	ldr	r0, [r7, #4]
    6c4c:	4b02      	ldr	r3, [pc, #8]	; (6c58 <hri_sercomspi_write_CTRLA_reg+0x20>)
    6c4e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6c50:	bf00      	nop
    6c52:	3708      	adds	r7, #8
    6c54:	46bd      	mov	sp, r7
    6c56:	bd80      	pop	{r7, pc}
    6c58:	000069d9 	.word	0x000069d9

00006c5c <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6c5c:	b580      	push	{r7, lr}
    6c5e:	b082      	sub	sp, #8
    6c60:	af00      	add	r7, sp, #0
    6c62:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6c64:	687b      	ldr	r3, [r7, #4]
    6c66:	685b      	ldr	r3, [r3, #4]
    6c68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6c6c:	687b      	ldr	r3, [r7, #4]
    6c6e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6c70:	2104      	movs	r1, #4
    6c72:	6878      	ldr	r0, [r7, #4]
    6c74:	4b02      	ldr	r3, [pc, #8]	; (6c80 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    6c76:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6c78:	bf00      	nop
    6c7a:	3708      	adds	r7, #8
    6c7c:	46bd      	mov	sp, r7
    6c7e:	bd80      	pop	{r7, pc}
    6c80:	0000698d 	.word	0x0000698d

00006c84 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6c84:	b580      	push	{r7, lr}
    6c86:	b082      	sub	sp, #8
    6c88:	af00      	add	r7, sp, #0
    6c8a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6c8c:	687b      	ldr	r3, [r7, #4]
    6c8e:	685b      	ldr	r3, [r3, #4]
    6c90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6c94:	687b      	ldr	r3, [r7, #4]
    6c96:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6c98:	2104      	movs	r1, #4
    6c9a:	6878      	ldr	r0, [r7, #4]
    6c9c:	4b02      	ldr	r3, [pc, #8]	; (6ca8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6c9e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ca0:	bf00      	nop
    6ca2:	3708      	adds	r7, #8
    6ca4:	46bd      	mov	sp, r7
    6ca6:	bd80      	pop	{r7, pc}
    6ca8:	0000698d 	.word	0x0000698d

00006cac <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6cac:	b580      	push	{r7, lr}
    6cae:	b082      	sub	sp, #8
    6cb0:	af00      	add	r7, sp, #0
    6cb2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	685b      	ldr	r3, [r3, #4]
    6cb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6cbc:	687b      	ldr	r3, [r7, #4]
    6cbe:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6cc0:	2104      	movs	r1, #4
    6cc2:	6878      	ldr	r0, [r7, #4]
    6cc4:	4b02      	ldr	r3, [pc, #8]	; (6cd0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    6cc6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6cc8:	bf00      	nop
    6cca:	3708      	adds	r7, #8
    6ccc:	46bd      	mov	sp, r7
    6cce:	bd80      	pop	{r7, pc}
    6cd0:	0000698d 	.word	0x0000698d

00006cd4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6cd4:	b580      	push	{r7, lr}
    6cd6:	b082      	sub	sp, #8
    6cd8:	af00      	add	r7, sp, #0
    6cda:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	685b      	ldr	r3, [r3, #4]
    6ce0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6ce4:	687b      	ldr	r3, [r7, #4]
    6ce6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6ce8:	2104      	movs	r1, #4
    6cea:	6878      	ldr	r0, [r7, #4]
    6cec:	4b02      	ldr	r3, [pc, #8]	; (6cf8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    6cee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6cf0:	bf00      	nop
    6cf2:	3708      	adds	r7, #8
    6cf4:	46bd      	mov	sp, r7
    6cf6:	bd80      	pop	{r7, pc}
    6cf8:	0000698d 	.word	0x0000698d

00006cfc <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6cfc:	b580      	push	{r7, lr}
    6cfe:	b082      	sub	sp, #8
    6d00:	af00      	add	r7, sp, #0
    6d02:	6078      	str	r0, [r7, #4]
    6d04:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6d06:	687b      	ldr	r3, [r7, #4]
    6d08:	685a      	ldr	r2, [r3, #4]
    6d0a:	683b      	ldr	r3, [r7, #0]
    6d0c:	041b      	lsls	r3, r3, #16
    6d0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    6d12:	431a      	orrs	r2, r3
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6d18:	2104      	movs	r1, #4
    6d1a:	6878      	ldr	r0, [r7, #4]
    6d1c:	4b02      	ldr	r3, [pc, #8]	; (6d28 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    6d1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6d20:	bf00      	nop
    6d22:	3708      	adds	r7, #8
    6d24:	46bd      	mov	sp, r7
    6d26:	bd80      	pop	{r7, pc}
    6d28:	0000698d 	.word	0x0000698d

00006d2c <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6d2c:	b580      	push	{r7, lr}
    6d2e:	b082      	sub	sp, #8
    6d30:	af00      	add	r7, sp, #0
    6d32:	6078      	str	r0, [r7, #4]
    6d34:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	683a      	ldr	r2, [r7, #0]
    6d3a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6d3c:	2104      	movs	r1, #4
    6d3e:	6878      	ldr	r0, [r7, #4]
    6d40:	4b02      	ldr	r3, [pc, #8]	; (6d4c <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    6d42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6d44:	bf00      	nop
    6d46:	3708      	adds	r7, #8
    6d48:	46bd      	mov	sp, r7
    6d4a:	bd80      	pop	{r7, pc}
    6d4c:	0000698d 	.word	0x0000698d

00006d50 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6d50:	b580      	push	{r7, lr}
    6d52:	b082      	sub	sp, #8
    6d54:	af00      	add	r7, sp, #0
    6d56:	6078      	str	r0, [r7, #4]
    6d58:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6d5a:	687b      	ldr	r3, [r7, #4]
    6d5c:	683a      	ldr	r2, [r7, #0]
    6d5e:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6d60:	2117      	movs	r1, #23
    6d62:	6878      	ldr	r0, [r7, #4]
    6d64:	4b02      	ldr	r3, [pc, #8]	; (6d70 <hri_sercomspi_write_CTRLB_reg+0x20>)
    6d66:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6d68:	bf00      	nop
    6d6a:	3708      	adds	r7, #8
    6d6c:	46bd      	mov	sp, r7
    6d6e:	bd80      	pop	{r7, pc}
    6d70:	000069d9 	.word	0x000069d9

00006d74 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6d74:	b480      	push	{r7}
    6d76:	b083      	sub	sp, #12
    6d78:	af00      	add	r7, sp, #0
    6d7a:	6078      	str	r0, [r7, #4]
    6d7c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6d7e:	687b      	ldr	r3, [r7, #4]
    6d80:	683a      	ldr	r2, [r7, #0]
    6d82:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6d84:	bf00      	nop
    6d86:	370c      	adds	r7, #12
    6d88:	46bd      	mov	sp, r7
    6d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d8e:	4770      	bx	lr

00006d90 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6d90:	b480      	push	{r7}
    6d92:	b083      	sub	sp, #12
    6d94:	af00      	add	r7, sp, #0
    6d96:	6078      	str	r0, [r7, #4]
    6d98:	460b      	mov	r3, r1
    6d9a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6d9c:	687b      	ldr	r3, [r7, #4]
    6d9e:	78fa      	ldrb	r2, [r7, #3]
    6da0:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6da2:	bf00      	nop
    6da4:	370c      	adds	r7, #12
    6da6:	46bd      	mov	sp, r7
    6da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dac:	4770      	bx	lr
	...

00006db0 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6db0:	b580      	push	{r7, lr}
    6db2:	b084      	sub	sp, #16
    6db4:	af00      	add	r7, sp, #0
    6db6:	6078      	str	r0, [r7, #4]
    6db8:	460b      	mov	r3, r1
    6dba:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6dbc:	687b      	ldr	r3, [r7, #4]
    6dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6dc0:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6dc2:	68fb      	ldr	r3, [r7, #12]
    6dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6dc8:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6dca:	78fb      	ldrb	r3, [r7, #3]
    6dcc:	039b      	lsls	r3, r3, #14
    6dce:	461a      	mov	r2, r3
    6dd0:	68fb      	ldr	r3, [r7, #12]
    6dd2:	4313      	orrs	r3, r2
    6dd4:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6dd6:	687b      	ldr	r3, [r7, #4]
    6dd8:	68fa      	ldr	r2, [r7, #12]
    6dda:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6ddc:	2104      	movs	r1, #4
    6dde:	6878      	ldr	r0, [r7, #4]
    6de0:	4b02      	ldr	r3, [pc, #8]	; (6dec <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    6de2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6de4:	bf00      	nop
    6de6:	3710      	adds	r7, #16
    6de8:	46bd      	mov	sp, r7
    6dea:	bd80      	pop	{r7, pc}
    6dec:	0000698d 	.word	0x0000698d

00006df0 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6df0:	b580      	push	{r7, lr}
    6df2:	b082      	sub	sp, #8
    6df4:	af00      	add	r7, sp, #0
    6df6:	6078      	str	r0, [r7, #4]
    6df8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6dfa:	687b      	ldr	r3, [r7, #4]
    6dfc:	683a      	ldr	r2, [r7, #0]
    6dfe:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6e00:	2104      	movs	r1, #4
    6e02:	6878      	ldr	r0, [r7, #4]
    6e04:	4b02      	ldr	r3, [pc, #8]	; (6e10 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    6e06:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6e08:	bf00      	nop
    6e0a:	3708      	adds	r7, #8
    6e0c:	46bd      	mov	sp, r7
    6e0e:	bd80      	pop	{r7, pc}
    6e10:	0000698d 	.word	0x0000698d

00006e14 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6e14:	b580      	push	{r7, lr}
    6e16:	b082      	sub	sp, #8
    6e18:	af00      	add	r7, sp, #0
    6e1a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6e1c:	2104      	movs	r1, #4
    6e1e:	6878      	ldr	r0, [r7, #4]
    6e20:	4b03      	ldr	r3, [pc, #12]	; (6e30 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6e22:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6e24:	687b      	ldr	r3, [r7, #4]
    6e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6e28:	4618      	mov	r0, r3
    6e2a:	3708      	adds	r7, #8
    6e2c:	46bd      	mov	sp, r7
    6e2e:	bd80      	pop	{r7, pc}
    6e30:	0000698d 	.word	0x0000698d

00006e34 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6e34:	b480      	push	{r7}
    6e36:	b083      	sub	sp, #12
    6e38:	af00      	add	r7, sp, #0
    6e3a:	6078      	str	r0, [r7, #4]
    6e3c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6e3e:	687b      	ldr	r3, [r7, #4]
    6e40:	683a      	ldr	r2, [r7, #0]
    6e42:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6e44:	bf00      	nop
    6e46:	370c      	adds	r7, #12
    6e48:	46bd      	mov	sp, r7
    6e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e4e:	4770      	bx	lr

00006e50 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6e50:	b580      	push	{r7, lr}
    6e52:	b082      	sub	sp, #8
    6e54:	af00      	add	r7, sp, #0
    6e56:	6078      	str	r0, [r7, #4]
    6e58:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6e5a:	687b      	ldr	r3, [r7, #4]
    6e5c:	683a      	ldr	r2, [r7, #0]
    6e5e:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6e60:	2104      	movs	r1, #4
    6e62:	6878      	ldr	r0, [r7, #4]
    6e64:	4b02      	ldr	r3, [pc, #8]	; (6e70 <hri_sercomi2cm_write_DATA_reg+0x20>)
    6e66:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6e68:	bf00      	nop
    6e6a:	3708      	adds	r7, #8
    6e6c:	46bd      	mov	sp, r7
    6e6e:	bd80      	pop	{r7, pc}
    6e70:	0000698d 	.word	0x0000698d

00006e74 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6e74:	b580      	push	{r7, lr}
    6e76:	b082      	sub	sp, #8
    6e78:	af00      	add	r7, sp, #0
    6e7a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6e7c:	2104      	movs	r1, #4
    6e7e:	6878      	ldr	r0, [r7, #4]
    6e80:	4b03      	ldr	r3, [pc, #12]	; (6e90 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6e82:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6e84:	687b      	ldr	r3, [r7, #4]
    6e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6e88:	4618      	mov	r0, r3
    6e8a:	3708      	adds	r7, #8
    6e8c:	46bd      	mov	sp, r7
    6e8e:	bd80      	pop	{r7, pc}
    6e90:	0000698d 	.word	0x0000698d

00006e94 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6e94:	b480      	push	{r7}
    6e96:	b083      	sub	sp, #12
    6e98:	af00      	add	r7, sp, #0
    6e9a:	6078      	str	r0, [r7, #4]
    6e9c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	683a      	ldr	r2, [r7, #0]
    6ea2:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ea4:	bf00      	nop
    6ea6:	370c      	adds	r7, #12
    6ea8:	46bd      	mov	sp, r7
    6eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eae:	4770      	bx	lr

00006eb0 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6eb0:	b480      	push	{r7}
    6eb2:	b083      	sub	sp, #12
    6eb4:	af00      	add	r7, sp, #0
    6eb6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6eb8:	687b      	ldr	r3, [r7, #4]
    6eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6ebc:	4618      	mov	r0, r3
    6ebe:	370c      	adds	r7, #12
    6ec0:	46bd      	mov	sp, r7
    6ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ec6:	4770      	bx	lr

00006ec8 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6ec8:	b480      	push	{r7}
    6eca:	b083      	sub	sp, #12
    6ecc:	af00      	add	r7, sp, #0
    6ece:	6078      	str	r0, [r7, #4]
    6ed0:	460b      	mov	r3, r1
    6ed2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6ed4:	687b      	ldr	r3, [r7, #4]
    6ed6:	78fa      	ldrb	r2, [r7, #3]
    6ed8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6edc:	bf00      	nop
    6ede:	370c      	adds	r7, #12
    6ee0:	46bd      	mov	sp, r7
    6ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ee6:	4770      	bx	lr

00006ee8 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6ee8:	b480      	push	{r7}
    6eea:	b083      	sub	sp, #12
    6eec:	af00      	add	r7, sp, #0
    6eee:	6078      	str	r0, [r7, #4]
    6ef0:	460b      	mov	r3, r1
    6ef2:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6ef4:	687b      	ldr	r3, [r7, #4]
    6ef6:	887a      	ldrh	r2, [r7, #2]
    6ef8:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6efa:	bf00      	nop
    6efc:	370c      	adds	r7, #12
    6efe:	46bd      	mov	sp, r7
    6f00:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f04:	4770      	bx	lr
	...

00006f08 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    6f08:	b580      	push	{r7, lr}
    6f0a:	b082      	sub	sp, #8
    6f0c:	af00      	add	r7, sp, #0
    6f0e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6f10:	2104      	movs	r1, #4
    6f12:	6878      	ldr	r0, [r7, #4]
    6f14:	4b06      	ldr	r3, [pc, #24]	; (6f30 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    6f16:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6f18:	687b      	ldr	r3, [r7, #4]
    6f1a:	8b5b      	ldrh	r3, [r3, #26]
    6f1c:	b29b      	uxth	r3, r3
    6f1e:	091b      	lsrs	r3, r3, #4
    6f20:	b29b      	uxth	r3, r3
    6f22:	f003 0303 	and.w	r3, r3, #3
    6f26:	b29b      	uxth	r3, r3
}
    6f28:	4618      	mov	r0, r3
    6f2a:	3708      	adds	r7, #8
    6f2c:	46bd      	mov	sp, r7
    6f2e:	bd80      	pop	{r7, pc}
    6f30:	0000698d 	.word	0x0000698d

00006f34 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6f34:	b580      	push	{r7, lr}
    6f36:	b082      	sub	sp, #8
    6f38:	af00      	add	r7, sp, #0
    6f3a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6f3c:	2104      	movs	r1, #4
    6f3e:	6878      	ldr	r0, [r7, #4]
    6f40:	4b04      	ldr	r3, [pc, #16]	; (6f54 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6f42:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6f44:	687b      	ldr	r3, [r7, #4]
    6f46:	8b5b      	ldrh	r3, [r3, #26]
    6f48:	b29b      	uxth	r3, r3
}
    6f4a:	4618      	mov	r0, r3
    6f4c:	3708      	adds	r7, #8
    6f4e:	46bd      	mov	sp, r7
    6f50:	bd80      	pop	{r7, pc}
    6f52:	bf00      	nop
    6f54:	0000698d 	.word	0x0000698d

00006f58 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6f58:	b580      	push	{r7, lr}
    6f5a:	b082      	sub	sp, #8
    6f5c:	af00      	add	r7, sp, #0
    6f5e:	6078      	str	r0, [r7, #4]
    6f60:	460b      	mov	r3, r1
    6f62:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6f64:	687b      	ldr	r3, [r7, #4]
    6f66:	887a      	ldrh	r2, [r7, #2]
    6f68:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6f6a:	2104      	movs	r1, #4
    6f6c:	6878      	ldr	r0, [r7, #4]
    6f6e:	4b03      	ldr	r3, [pc, #12]	; (6f7c <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6f70:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6f72:	bf00      	nop
    6f74:	3708      	adds	r7, #8
    6f76:	46bd      	mov	sp, r7
    6f78:	bd80      	pop	{r7, pc}
    6f7a:	bf00      	nop
    6f7c:	0000698d 	.word	0x0000698d

00006f80 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6f80:	b4b0      	push	{r4, r5, r7}
    6f82:	b08d      	sub	sp, #52	; 0x34
    6f84:	af00      	add	r7, sp, #0
    6f86:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6f88:	4b13      	ldr	r3, [pc, #76]	; (6fd8 <_sercom_get_hardware_index+0x58>)
    6f8a:	f107 040c 	add.w	r4, r7, #12
    6f8e:	461d      	mov	r5, r3
    6f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6f94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6f9c:	2300      	movs	r3, #0
    6f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6fa0:	e010      	b.n	6fc4 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fa4:	009b      	lsls	r3, r3, #2
    6fa6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6faa:	4413      	add	r3, r2
    6fac:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6fb0:	461a      	mov	r2, r3
    6fb2:	687b      	ldr	r3, [r7, #4]
    6fb4:	429a      	cmp	r2, r3
    6fb6:	d102      	bne.n	6fbe <_sercom_get_hardware_index+0x3e>
			return i;
    6fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fba:	b2db      	uxtb	r3, r3
    6fbc:	e006      	b.n	6fcc <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fc0:	3301      	adds	r3, #1
    6fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    6fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fc6:	2b07      	cmp	r3, #7
    6fc8:	d9eb      	bls.n	6fa2 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6fca:	2300      	movs	r3, #0
}
    6fcc:	4618      	mov	r0, r3
    6fce:	3734      	adds	r7, #52	; 0x34
    6fd0:	46bd      	mov	sp, r7
    6fd2:	bcb0      	pop	{r4, r5, r7}
    6fd4:	4770      	bx	lr
    6fd6:	bf00      	nop
    6fd8:	0001101c 	.word	0x0001101c

00006fdc <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6fdc:	b580      	push	{r7, lr}
    6fde:	b084      	sub	sp, #16
    6fe0:	af00      	add	r7, sp, #0
    6fe2:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6fe4:	6878      	ldr	r0, [r7, #4]
    6fe6:	4b13      	ldr	r3, [pc, #76]	; (7034 <_get_i2cm_index+0x58>)
    6fe8:	4798      	blx	r3
    6fea:	4603      	mov	r3, r0
    6fec:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6fee:	2300      	movs	r3, #0
    6ff0:	73fb      	strb	r3, [r7, #15]
    6ff2:	e010      	b.n	7016 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6ff4:	7bfa      	ldrb	r2, [r7, #15]
    6ff6:	4910      	ldr	r1, [pc, #64]	; (7038 <_get_i2cm_index+0x5c>)
    6ff8:	4613      	mov	r3, r2
    6ffa:	005b      	lsls	r3, r3, #1
    6ffc:	4413      	add	r3, r2
    6ffe:	00db      	lsls	r3, r3, #3
    7000:	440b      	add	r3, r1
    7002:	781b      	ldrb	r3, [r3, #0]
    7004:	7bba      	ldrb	r2, [r7, #14]
    7006:	429a      	cmp	r2, r3
    7008:	d102      	bne.n	7010 <_get_i2cm_index+0x34>
			return i;
    700a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    700e:	e00d      	b.n	702c <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    7010:	7bfb      	ldrb	r3, [r7, #15]
    7012:	3301      	adds	r3, #1
    7014:	73fb      	strb	r3, [r7, #15]
    7016:	7bfb      	ldrb	r3, [r7, #15]
    7018:	2b02      	cmp	r3, #2
    701a:	d9eb      	bls.n	6ff4 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    701c:	f240 32a6 	movw	r2, #934	; 0x3a6
    7020:	4906      	ldr	r1, [pc, #24]	; (703c <_get_i2cm_index+0x60>)
    7022:	2000      	movs	r0, #0
    7024:	4b06      	ldr	r3, [pc, #24]	; (7040 <_get_i2cm_index+0x64>)
    7026:	4798      	blx	r3
	return -1;
    7028:	f04f 33ff 	mov.w	r3, #4294967295
}
    702c:	4618      	mov	r0, r3
    702e:	3710      	adds	r7, #16
    7030:	46bd      	mov	sp, r7
    7032:	bd80      	pop	{r7, pc}
    7034:	00006f81 	.word	0x00006f81
    7038:	20000018 	.word	0x20000018
    703c:	00011000 	.word	0x00011000
    7040:	00004409 	.word	0x00004409

00007044 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    7044:	b580      	push	{r7, lr}
    7046:	b082      	sub	sp, #8
    7048:	af00      	add	r7, sp, #0
    704a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    704c:	2103      	movs	r1, #3
    704e:	6878      	ldr	r0, [r7, #4]
    7050:	4b02      	ldr	r3, [pc, #8]	; (705c <_sercom_i2c_send_stop+0x18>)
    7052:	4798      	blx	r3
}
    7054:	bf00      	nop
    7056:	3708      	adds	r7, #8
    7058:	46bd      	mov	sp, r7
    705a:	bd80      	pop	{r7, pc}
    705c:	00006cfd 	.word	0x00006cfd

00007060 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    7060:	b590      	push	{r4, r7, lr}
    7062:	b087      	sub	sp, #28
    7064:	af00      	add	r7, sp, #0
    7066:	60f8      	str	r0, [r7, #12]
    7068:	60b9      	str	r1, [r7, #8]
    706a:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    706c:	68f8      	ldr	r0, [r7, #12]
    706e:	4b7d      	ldr	r3, [pc, #500]	; (7264 <_sercom_i2c_sync_analyse_flags+0x204>)
    7070:	4798      	blx	r3
    7072:	4603      	mov	r3, r0
    7074:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    7076:	68f8      	ldr	r0, [r7, #12]
    7078:	4b7b      	ldr	r3, [pc, #492]	; (7268 <_sercom_i2c_sync_analyse_flags+0x208>)
    707a:	4798      	blx	r3
    707c:	4603      	mov	r3, r0
    707e:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    7080:	68bb      	ldr	r3, [r7, #8]
    7082:	f003 0301 	and.w	r3, r3, #1
    7086:	2b00      	cmp	r3, #0
    7088:	f000 8095 	beq.w	71b6 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    708c:	8a7b      	ldrh	r3, [r7, #18]
    708e:	f003 0302 	and.w	r3, r3, #2
    7092:	2b00      	cmp	r3, #0
    7094:	d01d      	beq.n	70d2 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    7096:	68f8      	ldr	r0, [r7, #12]
    7098:	4b74      	ldr	r3, [pc, #464]	; (726c <_sercom_i2c_sync_analyse_flags+0x20c>)
    709a:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    709c:	687b      	ldr	r3, [r7, #4]
    709e:	885b      	ldrh	r3, [r3, #2]
    70a0:	b29b      	uxth	r3, r3
    70a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    70a6:	b29a      	uxth	r2, r3
    70a8:	687b      	ldr	r3, [r7, #4]
    70aa:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    70ac:	687b      	ldr	r3, [r7, #4]
    70ae:	885b      	ldrh	r3, [r3, #2]
    70b0:	b29b      	uxth	r3, r3
    70b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    70b6:	b29a      	uxth	r2, r3
    70b8:	687b      	ldr	r3, [r7, #4]
    70ba:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    70bc:	8a7b      	ldrh	r3, [r7, #18]
    70be:	f003 0301 	and.w	r3, r3, #1
    70c2:	2b00      	cmp	r3, #0
    70c4:	d002      	beq.n	70cc <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    70c6:	f06f 0304 	mvn.w	r3, #4
    70ca:	e0c6      	b.n	725a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    70cc:	f06f 0303 	mvn.w	r3, #3
    70d0:	e0c3      	b.n	725a <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    70d2:	8a7b      	ldrh	r3, [r7, #18]
    70d4:	f003 0304 	and.w	r3, r3, #4
    70d8:	2b00      	cmp	r3, #0
    70da:	d01f      	beq.n	711c <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    70dc:	687b      	ldr	r3, [r7, #4]
    70de:	685b      	ldr	r3, [r3, #4]
    70e0:	2b00      	cmp	r3, #0
    70e2:	dd07      	ble.n	70f4 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    70e4:	687b      	ldr	r3, [r7, #4]
    70e6:	885b      	ldrh	r3, [r3, #2]
    70e8:	b29b      	uxth	r3, r3
    70ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    70ee:	b29a      	uxth	r2, r3
    70f0:	687b      	ldr	r3, [r7, #4]
    70f2:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    70f4:	687b      	ldr	r3, [r7, #4]
    70f6:	885b      	ldrh	r3, [r3, #2]
    70f8:	b29b      	uxth	r3, r3
    70fa:	b21b      	sxth	r3, r3
    70fc:	2b00      	cmp	r3, #0
    70fe:	da02      	bge.n	7106 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    7100:	68f8      	ldr	r0, [r7, #12]
    7102:	4b5b      	ldr	r3, [pc, #364]	; (7270 <_sercom_i2c_sync_analyse_flags+0x210>)
    7104:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    7106:	687b      	ldr	r3, [r7, #4]
    7108:	885b      	ldrh	r3, [r3, #2]
    710a:	b29b      	uxth	r3, r3
    710c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7110:	b29a      	uxth	r2, r3
    7112:	687b      	ldr	r3, [r7, #4]
    7114:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    7116:	f06f 0301 	mvn.w	r3, #1
    711a:	e09e      	b.n	725a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    711c:	687b      	ldr	r3, [r7, #4]
    711e:	885b      	ldrh	r3, [r3, #2]
    7120:	b29b      	uxth	r3, r3
    7122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7126:	2b00      	cmp	r3, #0
    7128:	d01c      	beq.n	7164 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    712a:	687b      	ldr	r3, [r7, #4]
    712c:	881b      	ldrh	r3, [r3, #0]
    712e:	121b      	asrs	r3, r3, #8
    7130:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7132:	f003 0406 	and.w	r4, r3, #6
    7136:	68f8      	ldr	r0, [r7, #12]
    7138:	4b4e      	ldr	r3, [pc, #312]	; (7274 <_sercom_i2c_sync_analyse_flags+0x214>)
    713a:	4798      	blx	r3
    713c:	4603      	mov	r3, r0
    713e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7142:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    7144:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    7148:	4619      	mov	r1, r3
    714a:	68f8      	ldr	r0, [r7, #12]
    714c:	4b4a      	ldr	r3, [pc, #296]	; (7278 <_sercom_i2c_sync_analyse_flags+0x218>)
    714e:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    7150:	687b      	ldr	r3, [r7, #4]
    7152:	885b      	ldrh	r3, [r3, #2]
    7154:	b29b      	uxth	r3, r3
    7156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    715a:	b29a      	uxth	r2, r3
    715c:	687b      	ldr	r3, [r7, #4]
    715e:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    7160:	2300      	movs	r3, #0
    7162:	e07a      	b.n	725a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    7164:	687b      	ldr	r3, [r7, #4]
    7166:	685b      	ldr	r3, [r3, #4]
    7168:	2b00      	cmp	r3, #0
    716a:	d111      	bne.n	7190 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    716c:	687b      	ldr	r3, [r7, #4]
    716e:	885b      	ldrh	r3, [r3, #2]
    7170:	b29b      	uxth	r3, r3
    7172:	b21b      	sxth	r3, r3
    7174:	2b00      	cmp	r3, #0
    7176:	da02      	bge.n	717e <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    7178:	68f8      	ldr	r0, [r7, #12]
    717a:	4b3d      	ldr	r3, [pc, #244]	; (7270 <_sercom_i2c_sync_analyse_flags+0x210>)
    717c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    717e:	687b      	ldr	r3, [r7, #4]
    7180:	885b      	ldrh	r3, [r3, #2]
    7182:	b29b      	uxth	r3, r3
    7184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7188:	b29a      	uxth	r2, r3
    718a:	687b      	ldr	r3, [r7, #4]
    718c:	805a      	strh	r2, [r3, #2]
    718e:	e010      	b.n	71b2 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    7190:	687b      	ldr	r3, [r7, #4]
    7192:	689b      	ldr	r3, [r3, #8]
    7194:	781b      	ldrb	r3, [r3, #0]
    7196:	4619      	mov	r1, r3
    7198:	68f8      	ldr	r0, [r7, #12]
    719a:	4b38      	ldr	r3, [pc, #224]	; (727c <_sercom_i2c_sync_analyse_flags+0x21c>)
    719c:	4798      	blx	r3
				msg->buffer++;
    719e:	687b      	ldr	r3, [r7, #4]
    71a0:	689b      	ldr	r3, [r3, #8]
    71a2:	1c5a      	adds	r2, r3, #1
    71a4:	687b      	ldr	r3, [r7, #4]
    71a6:	609a      	str	r2, [r3, #8]
				msg->len--;
    71a8:	687b      	ldr	r3, [r7, #4]
    71aa:	685b      	ldr	r3, [r3, #4]
    71ac:	1e5a      	subs	r2, r3, #1
    71ae:	687b      	ldr	r3, [r7, #4]
    71b0:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    71b2:	2300      	movs	r3, #0
    71b4:	e051      	b.n	725a <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    71b6:	68bb      	ldr	r3, [r7, #8]
    71b8:	f003 0302 	and.w	r3, r3, #2
    71bc:	2b00      	cmp	r3, #0
    71be:	d04b      	beq.n	7258 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    71c0:	687b      	ldr	r3, [r7, #4]
    71c2:	685b      	ldr	r3, [r3, #4]
    71c4:	2b00      	cmp	r3, #0
    71c6:	d041      	beq.n	724c <_sercom_i2c_sync_analyse_flags+0x1ec>
    71c8:	8a7b      	ldrh	r3, [r7, #18]
    71ca:	f003 0304 	and.w	r3, r3, #4
    71ce:	2b00      	cmp	r3, #0
    71d0:	d13c      	bne.n	724c <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    71d2:	687b      	ldr	r3, [r7, #4]
    71d4:	685b      	ldr	r3, [r3, #4]
    71d6:	1e5a      	subs	r2, r3, #1
    71d8:	687b      	ldr	r3, [r7, #4]
    71da:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    71dc:	687b      	ldr	r3, [r7, #4]
    71de:	685b      	ldr	r3, [r3, #4]
    71e0:	2b00      	cmp	r3, #0
    71e2:	d102      	bne.n	71ea <_sercom_i2c_sync_analyse_flags+0x18a>
    71e4:	697b      	ldr	r3, [r7, #20]
    71e6:	2b00      	cmp	r3, #0
    71e8:	d006      	beq.n	71f8 <_sercom_i2c_sync_analyse_flags+0x198>
    71ea:	687b      	ldr	r3, [r7, #4]
    71ec:	685b      	ldr	r3, [r3, #4]
    71ee:	2b01      	cmp	r3, #1
    71f0:	d105      	bne.n	71fe <_sercom_i2c_sync_analyse_flags+0x19e>
    71f2:	697b      	ldr	r3, [r7, #20]
    71f4:	2b00      	cmp	r3, #0
    71f6:	d002      	beq.n	71fe <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    71f8:	68f8      	ldr	r0, [r7, #12]
    71fa:	4b21      	ldr	r3, [pc, #132]	; (7280 <_sercom_i2c_sync_analyse_flags+0x220>)
    71fc:	4798      	blx	r3
			}

			if (msg->len == 0) {
    71fe:	687b      	ldr	r3, [r7, #4]
    7200:	685b      	ldr	r3, [r3, #4]
    7202:	2b00      	cmp	r3, #0
    7204:	d113      	bne.n	722e <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    7206:	687b      	ldr	r3, [r7, #4]
    7208:	885b      	ldrh	r3, [r3, #2]
    720a:	b29b      	uxth	r3, r3
    720c:	b21b      	sxth	r3, r3
    720e:	2b00      	cmp	r3, #0
    7210:	da05      	bge.n	721e <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    7212:	68f8      	ldr	r0, [r7, #12]
    7214:	4b1b      	ldr	r3, [pc, #108]	; (7284 <_sercom_i2c_sync_analyse_flags+0x224>)
    7216:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    7218:	68f8      	ldr	r0, [r7, #12]
    721a:	4b15      	ldr	r3, [pc, #84]	; (7270 <_sercom_i2c_sync_analyse_flags+0x210>)
    721c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    721e:	687b      	ldr	r3, [r7, #4]
    7220:	885b      	ldrh	r3, [r3, #2]
    7222:	b29b      	uxth	r3, r3
    7224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7228:	b29a      	uxth	r2, r3
    722a:	687b      	ldr	r3, [r7, #4]
    722c:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    722e:	687b      	ldr	r3, [r7, #4]
    7230:	689c      	ldr	r4, [r3, #8]
    7232:	1c62      	adds	r2, r4, #1
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	609a      	str	r2, [r3, #8]
    7238:	68f8      	ldr	r0, [r7, #12]
    723a:	4b13      	ldr	r3, [pc, #76]	; (7288 <_sercom_i2c_sync_analyse_flags+0x228>)
    723c:	4798      	blx	r3
    723e:	4603      	mov	r3, r0
    7240:	b2db      	uxtb	r3, r3
    7242:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    7244:	68f8      	ldr	r0, [r7, #12]
    7246:	4b11      	ldr	r3, [pc, #68]	; (728c <_sercom_i2c_sync_analyse_flags+0x22c>)
    7248:	4798      	blx	r3
    724a:	e005      	b.n	7258 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    724c:	68f8      	ldr	r0, [r7, #12]
    724e:	4b0f      	ldr	r3, [pc, #60]	; (728c <_sercom_i2c_sync_analyse_flags+0x22c>)
    7250:	4798      	blx	r3
			return I2C_NACK;
    7252:	f06f 0301 	mvn.w	r3, #1
    7256:	e000      	b.n	725a <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    7258:	2300      	movs	r3, #0
}
    725a:	4618      	mov	r0, r3
    725c:	371c      	adds	r7, #28
    725e:	46bd      	mov	sp, r7
    7260:	bd90      	pop	{r4, r7, pc}
    7262:	bf00      	nop
    7264:	00006b25 	.word	0x00006b25
    7268:	00006f35 	.word	0x00006f35
    726c:	00006a25 	.word	0x00006a25
    7270:	00007045 	.word	0x00007045
    7274:	00006e15 	.word	0x00006e15
    7278:	00006df1 	.word	0x00006df1
    727c:	00006e51 	.word	0x00006e51
    7280:	00006cad 	.word	0x00006cad
    7284:	00006c85 	.word	0x00006c85
    7288:	00006e75 	.word	0x00006e75
    728c:	00006a3f 	.word	0x00006a3f

00007290 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    7290:	b580      	push	{r7, lr}
    7292:	b082      	sub	sp, #8
    7294:	af00      	add	r7, sp, #0
    7296:	6078      	str	r0, [r7, #4]
    7298:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    729a:	687b      	ldr	r3, [r7, #4]
    729c:	2b00      	cmp	r3, #0
    729e:	bf14      	ite	ne
    72a0:	2301      	movne	r3, #1
    72a2:	2300      	moveq	r3, #0
    72a4:	b2db      	uxtb	r3, r3
    72a6:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    72aa:	4908      	ldr	r1, [pc, #32]	; (72cc <_i2c_m_sync_init+0x3c>)
    72ac:	4618      	mov	r0, r3
    72ae:	4b08      	ldr	r3, [pc, #32]	; (72d0 <_i2c_m_sync_init+0x40>)
    72b0:	4798      	blx	r3

	i2c_dev->hw = hw;
    72b2:	687b      	ldr	r3, [r7, #4]
    72b4:	683a      	ldr	r2, [r7, #0]
    72b6:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    72b8:	687b      	ldr	r3, [r7, #4]
    72ba:	6839      	ldr	r1, [r7, #0]
    72bc:	4618      	mov	r0, r3
    72be:	4b05      	ldr	r3, [pc, #20]	; (72d4 <_i2c_m_sync_init+0x44>)
    72c0:	4798      	blx	r3
    72c2:	4603      	mov	r3, r0
}
    72c4:	4618      	mov	r0, r3
    72c6:	3708      	adds	r7, #8
    72c8:	46bd      	mov	sp, r7
    72ca:	bd80      	pop	{r7, pc}
    72cc:	00011000 	.word	0x00011000
    72d0:	00004409 	.word	0x00004409
    72d4:	000076a9 	.word	0x000076a9

000072d8 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    72d8:	b580      	push	{r7, lr}
    72da:	b082      	sub	sp, #8
    72dc:	af00      	add	r7, sp, #0
    72de:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    72e0:	687b      	ldr	r3, [r7, #4]
    72e2:	2b00      	cmp	r3, #0
    72e4:	bf14      	ite	ne
    72e6:	2301      	movne	r3, #1
    72e8:	2300      	moveq	r3, #0
    72ea:	b2db      	uxtb	r3, r3
    72ec:	f240 5235 	movw	r2, #1333	; 0x535
    72f0:	4906      	ldr	r1, [pc, #24]	; (730c <_i2c_m_sync_enable+0x34>)
    72f2:	4618      	mov	r0, r3
    72f4:	4b06      	ldr	r3, [pc, #24]	; (7310 <_i2c_m_sync_enable+0x38>)
    72f6:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    72f8:	687b      	ldr	r3, [r7, #4]
    72fa:	691b      	ldr	r3, [r3, #16]
    72fc:	4618      	mov	r0, r3
    72fe:	4b05      	ldr	r3, [pc, #20]	; (7314 <_i2c_m_sync_enable+0x3c>)
    7300:	4798      	blx	r3
    7302:	4603      	mov	r3, r0
}
    7304:	4618      	mov	r0, r3
    7306:	3708      	adds	r7, #8
    7308:	46bd      	mov	sp, r7
    730a:	bd80      	pop	{r7, pc}
    730c:	00011000 	.word	0x00011000
    7310:	00004409 	.word	0x00004409
    7314:	0000761d 	.word	0x0000761d

00007318 <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    7318:	b580      	push	{r7, lr}
    731a:	b084      	sub	sp, #16
    731c:	af00      	add	r7, sp, #0
    731e:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    7320:	687b      	ldr	r3, [r7, #4]
    7322:	691b      	ldr	r3, [r3, #16]
    7324:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    7326:	687b      	ldr	r3, [r7, #4]
    7328:	2b00      	cmp	r3, #0
    732a:	bf14      	ite	ne
    732c:	2301      	movne	r3, #1
    732e:	2300      	moveq	r3, #0
    7330:	b2db      	uxtb	r3, r3
    7332:	f240 5243 	movw	r2, #1347	; 0x543
    7336:	490c      	ldr	r1, [pc, #48]	; (7368 <_i2c_m_sync_disable+0x50>)
    7338:	4618      	mov	r0, r3
    733a:	4b0c      	ldr	r3, [pc, #48]	; (736c <_i2c_m_sync_disable+0x54>)
    733c:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    733e:	687b      	ldr	r3, [r7, #4]
    7340:	691b      	ldr	r3, [r3, #16]
    7342:	2b00      	cmp	r3, #0
    7344:	bf14      	ite	ne
    7346:	2301      	movne	r3, #1
    7348:	2300      	moveq	r3, #0
    734a:	b2db      	uxtb	r3, r3
    734c:	f240 5244 	movw	r2, #1348	; 0x544
    7350:	4905      	ldr	r1, [pc, #20]	; (7368 <_i2c_m_sync_disable+0x50>)
    7352:	4618      	mov	r0, r3
    7354:	4b05      	ldr	r3, [pc, #20]	; (736c <_i2c_m_sync_disable+0x54>)
    7356:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    7358:	68f8      	ldr	r0, [r7, #12]
    735a:	4b05      	ldr	r3, [pc, #20]	; (7370 <_i2c_m_sync_disable+0x58>)
    735c:	4798      	blx	r3

	return ERR_NONE;
    735e:	2300      	movs	r3, #0
}
    7360:	4618      	mov	r0, r3
    7362:	3710      	adds	r7, #16
    7364:	46bd      	mov	sp, r7
    7366:	bd80      	pop	{r7, pc}
    7368:	00011000 	.word	0x00011000
    736c:	00004409 	.word	0x00004409
    7370:	00006afd 	.word	0x00006afd

00007374 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    7374:	b580      	push	{r7, lr}
    7376:	b084      	sub	sp, #16
    7378:	af00      	add	r7, sp, #0
    737a:	6078      	str	r0, [r7, #4]
    737c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    737e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7382:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    7384:	687b      	ldr	r3, [r7, #4]
    7386:	691b      	ldr	r3, [r3, #16]
    7388:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    738a:	68b8      	ldr	r0, [r7, #8]
    738c:	4b0f      	ldr	r3, [pc, #60]	; (73cc <_sercom_i2c_sync_wait_bus+0x58>)
    738e:	4798      	blx	r3
    7390:	4603      	mov	r3, r0
    7392:	461a      	mov	r2, r3
    7394:	683b      	ldr	r3, [r7, #0]
    7396:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    7398:	68fb      	ldr	r3, [r7, #12]
    739a:	1e5a      	subs	r2, r3, #1
    739c:	60fa      	str	r2, [r7, #12]
    739e:	2b00      	cmp	r3, #0
    73a0:	d102      	bne.n	73a8 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    73a2:	f06f 0304 	mvn.w	r3, #4
    73a6:	e00c      	b.n	73c2 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    73a8:	683b      	ldr	r3, [r7, #0]
    73aa:	681b      	ldr	r3, [r3, #0]
    73ac:	f003 0301 	and.w	r3, r3, #1
    73b0:	2b00      	cmp	r3, #0
    73b2:	d105      	bne.n	73c0 <_sercom_i2c_sync_wait_bus+0x4c>
    73b4:	683b      	ldr	r3, [r7, #0]
    73b6:	681b      	ldr	r3, [r3, #0]
    73b8:	f003 0302 	and.w	r3, r3, #2
    73bc:	2b00      	cmp	r3, #0
    73be:	d0e4      	beq.n	738a <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    73c0:	2300      	movs	r3, #0
}
    73c2:	4618      	mov	r0, r3
    73c4:	3710      	adds	r7, #16
    73c6:	46bd      	mov	sp, r7
    73c8:	bd80      	pop	{r7, pc}
    73ca:	bf00      	nop
    73cc:	00006a59 	.word	0x00006a59

000073d0 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    73d0:	b590      	push	{r4, r7, lr}
    73d2:	b087      	sub	sp, #28
    73d4:	af00      	add	r7, sp, #0
    73d6:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    73d8:	687b      	ldr	r3, [r7, #4]
    73da:	691b      	ldr	r3, [r3, #16]
    73dc:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    73de:	687b      	ldr	r3, [r7, #4]
    73e0:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    73e2:	6978      	ldr	r0, [r7, #20]
    73e4:	4b39      	ldr	r3, [pc, #228]	; (74cc <_sercom_i2c_sync_send_address+0xfc>)
    73e6:	4798      	blx	r3
    73e8:	4603      	mov	r3, r0
    73ea:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    73ec:	687b      	ldr	r3, [r7, #4]
    73ee:	2b00      	cmp	r3, #0
    73f0:	bf14      	ite	ne
    73f2:	2301      	movne	r3, #1
    73f4:	2300      	moveq	r3, #0
    73f6:	b2db      	uxtb	r3, r3
    73f8:	f240 52a5 	movw	r2, #1445	; 0x5a5
    73fc:	4934      	ldr	r1, [pc, #208]	; (74d0 <_sercom_i2c_sync_send_address+0x100>)
    73fe:	4618      	mov	r0, r3
    7400:	4b34      	ldr	r3, [pc, #208]	; (74d4 <_sercom_i2c_sync_send_address+0x104>)
    7402:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    7404:	693b      	ldr	r3, [r7, #16]
    7406:	685b      	ldr	r3, [r3, #4]
    7408:	2b01      	cmp	r3, #1
    740a:	d106      	bne.n	741a <_sercom_i2c_sync_send_address+0x4a>
    740c:	68fb      	ldr	r3, [r7, #12]
    740e:	2b00      	cmp	r3, #0
    7410:	d003      	beq.n	741a <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    7412:	6978      	ldr	r0, [r7, #20]
    7414:	4b30      	ldr	r3, [pc, #192]	; (74d8 <_sercom_i2c_sync_send_address+0x108>)
    7416:	4798      	blx	r3
    7418:	e002      	b.n	7420 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    741a:	6978      	ldr	r0, [r7, #20]
    741c:	4b2f      	ldr	r3, [pc, #188]	; (74dc <_sercom_i2c_sync_send_address+0x10c>)
    741e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    7420:	693b      	ldr	r3, [r7, #16]
    7422:	881b      	ldrh	r3, [r3, #0]
    7424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7428:	2b00      	cmp	r3, #0
    742a:	d022      	beq.n	7472 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    742c:	693b      	ldr	r3, [r7, #16]
    742e:	885b      	ldrh	r3, [r3, #2]
    7430:	b29b      	uxth	r3, r3
    7432:	f003 0301 	and.w	r3, r3, #1
    7436:	2b00      	cmp	r3, #0
    7438:	d007      	beq.n	744a <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    743a:	693b      	ldr	r3, [r7, #16]
    743c:	885b      	ldrh	r3, [r3, #2]
    743e:	b29b      	uxth	r3, r3
    7440:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    7444:	b29a      	uxth	r2, r3
    7446:	693b      	ldr	r3, [r7, #16]
    7448:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    744a:	693b      	ldr	r3, [r7, #16]
    744c:	881b      	ldrh	r3, [r3, #0]
    744e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7450:	f240 74fe 	movw	r4, #2046	; 0x7fe
    7454:	401c      	ands	r4, r3
    7456:	6978      	ldr	r0, [r7, #20]
    7458:	4b21      	ldr	r3, [pc, #132]	; (74e0 <_sercom_i2c_sync_send_address+0x110>)
    745a:	4798      	blx	r3
    745c:	4603      	mov	r3, r0
    745e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7462:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    7464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7468:	4619      	mov	r1, r3
    746a:	6978      	ldr	r0, [r7, #20]
    746c:	4b1d      	ldr	r3, [pc, #116]	; (74e4 <_sercom_i2c_sync_send_address+0x114>)
    746e:	4798      	blx	r3
    7470:	e01a      	b.n	74a8 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7472:	693b      	ldr	r3, [r7, #16]
    7474:	881b      	ldrh	r3, [r3, #0]
    7476:	005b      	lsls	r3, r3, #1
    7478:	b2db      	uxtb	r3, r3
    747a:	693a      	ldr	r2, [r7, #16]
    747c:	8852      	ldrh	r2, [r2, #2]
    747e:	b292      	uxth	r2, r2
    7480:	f002 0201 	and.w	r2, r2, #1
    7484:	2a00      	cmp	r2, #0
    7486:	bf14      	ite	ne
    7488:	2201      	movne	r2, #1
    748a:	2200      	moveq	r2, #0
    748c:	b2d2      	uxtb	r2, r2
    748e:	4313      	orrs	r3, r2
    7490:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7492:	6978      	ldr	r0, [r7, #20]
    7494:	4b12      	ldr	r3, [pc, #72]	; (74e0 <_sercom_i2c_sync_send_address+0x110>)
    7496:	4798      	blx	r3
    7498:	4603      	mov	r3, r0
    749a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    749e:	4323      	orrs	r3, r4
    74a0:	4619      	mov	r1, r3
    74a2:	6978      	ldr	r0, [r7, #20]
    74a4:	4b0f      	ldr	r3, [pc, #60]	; (74e4 <_sercom_i2c_sync_send_address+0x114>)
    74a6:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    74a8:	f107 0308 	add.w	r3, r7, #8
    74ac:	4619      	mov	r1, r3
    74ae:	6878      	ldr	r0, [r7, #4]
    74b0:	4b0d      	ldr	r3, [pc, #52]	; (74e8 <_sercom_i2c_sync_send_address+0x118>)
    74b2:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    74b4:	68bb      	ldr	r3, [r7, #8]
    74b6:	693a      	ldr	r2, [r7, #16]
    74b8:	4619      	mov	r1, r3
    74ba:	6978      	ldr	r0, [r7, #20]
    74bc:	4b0b      	ldr	r3, [pc, #44]	; (74ec <_sercom_i2c_sync_send_address+0x11c>)
    74be:	4798      	blx	r3
    74c0:	4603      	mov	r3, r0
}
    74c2:	4618      	mov	r0, r3
    74c4:	371c      	adds	r7, #28
    74c6:	46bd      	mov	sp, r7
    74c8:	bd90      	pop	{r4, r7, pc}
    74ca:	bf00      	nop
    74cc:	00006b25 	.word	0x00006b25
    74d0:	00011000 	.word	0x00011000
    74d4:	00004409 	.word	0x00004409
    74d8:	00006cad 	.word	0x00006cad
    74dc:	00006cd5 	.word	0x00006cd5
    74e0:	00006e15 	.word	0x00006e15
    74e4:	00006df1 	.word	0x00006df1
    74e8:	00007375 	.word	0x00007375
    74ec:	00007061 	.word	0x00007061

000074f0 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    74f0:	b580      	push	{r7, lr}
    74f2:	b086      	sub	sp, #24
    74f4:	af00      	add	r7, sp, #0
    74f6:	6078      	str	r0, [r7, #4]
    74f8:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    74fa:	687b      	ldr	r3, [r7, #4]
    74fc:	691b      	ldr	r3, [r3, #16]
    74fe:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    7500:	687b      	ldr	r3, [r7, #4]
    7502:	2b00      	cmp	r3, #0
    7504:	bf14      	ite	ne
    7506:	2301      	movne	r3, #1
    7508:	2300      	moveq	r3, #0
    750a:	b2db      	uxtb	r3, r3
    750c:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    7510:	493b      	ldr	r1, [pc, #236]	; (7600 <_i2c_m_sync_transfer+0x110>)
    7512:	4618      	mov	r0, r3
    7514:	4b3b      	ldr	r3, [pc, #236]	; (7604 <_i2c_m_sync_transfer+0x114>)
    7516:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    7518:	687b      	ldr	r3, [r7, #4]
    751a:	691b      	ldr	r3, [r3, #16]
    751c:	2b00      	cmp	r3, #0
    751e:	bf14      	ite	ne
    7520:	2301      	movne	r3, #1
    7522:	2300      	moveq	r3, #0
    7524:	b2db      	uxtb	r3, r3
    7526:	f240 52d1 	movw	r2, #1489	; 0x5d1
    752a:	4935      	ldr	r1, [pc, #212]	; (7600 <_i2c_m_sync_transfer+0x110>)
    752c:	4618      	mov	r0, r3
    752e:	4b35      	ldr	r3, [pc, #212]	; (7604 <_i2c_m_sync_transfer+0x114>)
    7530:	4798      	blx	r3
	ASSERT(msg);
    7532:	683b      	ldr	r3, [r7, #0]
    7534:	2b00      	cmp	r3, #0
    7536:	bf14      	ite	ne
    7538:	2301      	movne	r3, #1
    753a:	2300      	moveq	r3, #0
    753c:	b2db      	uxtb	r3, r3
    753e:	f240 52d2 	movw	r2, #1490	; 0x5d2
    7542:	492f      	ldr	r1, [pc, #188]	; (7600 <_i2c_m_sync_transfer+0x110>)
    7544:	4618      	mov	r0, r3
    7546:	4b2f      	ldr	r3, [pc, #188]	; (7604 <_i2c_m_sync_transfer+0x114>)
    7548:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    754a:	687b      	ldr	r3, [r7, #4]
    754c:	885b      	ldrh	r3, [r3, #2]
    754e:	b29b      	uxth	r3, r3
    7550:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7554:	2b00      	cmp	r3, #0
    7556:	d002      	beq.n	755e <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    7558:	f06f 0305 	mvn.w	r3, #5
    755c:	e04c      	b.n	75f8 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    755e:	683b      	ldr	r3, [r7, #0]
    7560:	885b      	ldrh	r3, [r3, #2]
    7562:	b29b      	uxth	r3, r3
    7564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7568:	b29a      	uxth	r2, r3
    756a:	683b      	ldr	r3, [r7, #0]
    756c:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    756e:	687b      	ldr	r3, [r7, #4]
    7570:	683a      	ldr	r2, [r7, #0]
    7572:	ca07      	ldmia	r2, {r0, r1, r2}
    7574:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    7578:	6938      	ldr	r0, [r7, #16]
    757a:	4b23      	ldr	r3, [pc, #140]	; (7608 <_i2c_m_sync_transfer+0x118>)
    757c:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    757e:	6878      	ldr	r0, [r7, #4]
    7580:	4b22      	ldr	r3, [pc, #136]	; (760c <_i2c_m_sync_transfer+0x11c>)
    7582:	4798      	blx	r3
    7584:	6178      	str	r0, [r7, #20]

	if (ret) {
    7586:	697b      	ldr	r3, [r7, #20]
    7588:	2b00      	cmp	r3, #0
    758a:	d02d      	beq.n	75e8 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    758c:	687b      	ldr	r3, [r7, #4]
    758e:	885b      	ldrh	r3, [r3, #2]
    7590:	b29b      	uxth	r3, r3
    7592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7596:	b29a      	uxth	r2, r3
    7598:	687b      	ldr	r3, [r7, #4]
    759a:	805a      	strh	r2, [r3, #2]

		return ret;
    759c:	697b      	ldr	r3, [r7, #20]
    759e:	e02b      	b.n	75f8 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    75a0:	f107 030c 	add.w	r3, r7, #12
    75a4:	4619      	mov	r1, r3
    75a6:	6878      	ldr	r0, [r7, #4]
    75a8:	4b19      	ldr	r3, [pc, #100]	; (7610 <_i2c_m_sync_transfer+0x120>)
    75aa:	4798      	blx	r3
    75ac:	6178      	str	r0, [r7, #20]

		if (ret) {
    75ae:	697b      	ldr	r3, [r7, #20]
    75b0:	2b00      	cmp	r3, #0
    75b2:	d012      	beq.n	75da <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    75b4:	683b      	ldr	r3, [r7, #0]
    75b6:	885b      	ldrh	r3, [r3, #2]
    75b8:	b29b      	uxth	r3, r3
    75ba:	b21b      	sxth	r3, r3
    75bc:	2b00      	cmp	r3, #0
    75be:	da02      	bge.n	75c6 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    75c0:	6938      	ldr	r0, [r7, #16]
    75c2:	4b14      	ldr	r3, [pc, #80]	; (7614 <_i2c_m_sync_transfer+0x124>)
    75c4:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    75c6:	687b      	ldr	r3, [r7, #4]
    75c8:	885b      	ldrh	r3, [r3, #2]
    75ca:	b29b      	uxth	r3, r3
    75cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    75d0:	b29a      	uxth	r2, r3
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	805a      	strh	r2, [r3, #2]

			return ret;
    75d6:	697b      	ldr	r3, [r7, #20]
    75d8:	e00e      	b.n	75f8 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    75da:	68fb      	ldr	r3, [r7, #12]
    75dc:	687a      	ldr	r2, [r7, #4]
    75de:	4619      	mov	r1, r3
    75e0:	6938      	ldr	r0, [r7, #16]
    75e2:	4b0d      	ldr	r3, [pc, #52]	; (7618 <_i2c_m_sync_transfer+0x128>)
    75e4:	4798      	blx	r3
    75e6:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    75e8:	687b      	ldr	r3, [r7, #4]
    75ea:	885b      	ldrh	r3, [r3, #2]
    75ec:	b29b      	uxth	r3, r3
    75ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
    75f2:	2b00      	cmp	r3, #0
    75f4:	d1d4      	bne.n	75a0 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    75f6:	697b      	ldr	r3, [r7, #20]
}
    75f8:	4618      	mov	r0, r3
    75fa:	3718      	adds	r7, #24
    75fc:	46bd      	mov	sp, r7
    75fe:	bd80      	pop	{r7, pc}
    7600:	00011000 	.word	0x00011000
    7604:	00004409 	.word	0x00004409
    7608:	00006c5d 	.word	0x00006c5d
    760c:	000073d1 	.word	0x000073d1
    7610:	00007375 	.word	0x00007375
    7614:	00007045 	.word	0x00007045
    7618:	00007061 	.word	0x00007061

0000761c <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    761c:	b580      	push	{r7, lr}
    761e:	b084      	sub	sp, #16
    7620:	af00      	add	r7, sp, #0
    7622:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    7624:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7628:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    762a:	2304      	movs	r3, #4
    762c:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    762e:	687b      	ldr	r3, [r7, #4]
    7630:	2b00      	cmp	r3, #0
    7632:	bf14      	ite	ne
    7634:	2301      	movne	r3, #1
    7636:	2300      	moveq	r3, #0
    7638:	b2db      	uxtb	r3, r3
    763a:	f240 6205 	movw	r2, #1541	; 0x605
    763e:	4915      	ldr	r1, [pc, #84]	; (7694 <_i2c_m_enable_implementation+0x78>)
    7640:	4618      	mov	r0, r3
    7642:	4b15      	ldr	r3, [pc, #84]	; (7698 <_i2c_m_enable_implementation+0x7c>)
    7644:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    7646:	6878      	ldr	r0, [r7, #4]
    7648:	4b14      	ldr	r3, [pc, #80]	; (769c <_i2c_m_enable_implementation+0x80>)
    764a:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    764c:	e016      	b.n	767c <_i2c_m_enable_implementation+0x60>
		timeout--;
    764e:	68fb      	ldr	r3, [r7, #12]
    7650:	3b01      	subs	r3, #1
    7652:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    7654:	68fb      	ldr	r3, [r7, #12]
    7656:	2b00      	cmp	r3, #0
    7658:	dc10      	bgt.n	767c <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    765a:	68bb      	ldr	r3, [r7, #8]
    765c:	3b01      	subs	r3, #1
    765e:	60bb      	str	r3, [r7, #8]
    7660:	68bb      	ldr	r3, [r7, #8]
    7662:	2b00      	cmp	r3, #0
    7664:	d007      	beq.n	7676 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    7666:	f64f 73ff 	movw	r3, #65535	; 0xffff
    766a:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    766c:	2110      	movs	r1, #16
    766e:	6878      	ldr	r0, [r7, #4]
    7670:	4b0b      	ldr	r3, [pc, #44]	; (76a0 <_i2c_m_enable_implementation+0x84>)
    7672:	4798      	blx	r3
    7674:	e002      	b.n	767c <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    7676:	f06f 0305 	mvn.w	r3, #5
    767a:	e006      	b.n	768a <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    767c:	6878      	ldr	r0, [r7, #4]
    767e:	4b09      	ldr	r3, [pc, #36]	; (76a4 <_i2c_m_enable_implementation+0x88>)
    7680:	4798      	blx	r3
    7682:	4603      	mov	r3, r0
    7684:	2b01      	cmp	r3, #1
    7686:	d1e2      	bne.n	764e <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    7688:	2300      	movs	r3, #0
}
    768a:	4618      	mov	r0, r3
    768c:	3710      	adds	r7, #16
    768e:	46bd      	mov	sp, r7
    7690:	bd80      	pop	{r7, pc}
    7692:	bf00      	nop
    7694:	00011000 	.word	0x00011000
    7698:	00004409 	.word	0x00004409
    769c:	00006ad5 	.word	0x00006ad5
    76a0:	00006f59 	.word	0x00006f59
    76a4:	00006f09 	.word	0x00006f09

000076a8 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    76a8:	b580      	push	{r7, lr}
    76aa:	b084      	sub	sp, #16
    76ac:	af00      	add	r7, sp, #0
    76ae:	6078      	str	r0, [r7, #4]
    76b0:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    76b2:	6838      	ldr	r0, [r7, #0]
    76b4:	4b42      	ldr	r3, [pc, #264]	; (77c0 <_i2c_m_sync_init_impl+0x118>)
    76b6:	4798      	blx	r3
    76b8:	4603      	mov	r3, r0
    76ba:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    76bc:	2101      	movs	r1, #1
    76be:	6838      	ldr	r0, [r7, #0]
    76c0:	4b40      	ldr	r3, [pc, #256]	; (77c4 <_i2c_m_sync_init_impl+0x11c>)
    76c2:	4798      	blx	r3
    76c4:	4603      	mov	r3, r0
    76c6:	f083 0301 	eor.w	r3, r3, #1
    76ca:	b2db      	uxtb	r3, r3
    76cc:	2b00      	cmp	r3, #0
    76ce:	d020      	beq.n	7712 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    76d0:	7bfa      	ldrb	r2, [r7, #15]
    76d2:	493d      	ldr	r1, [pc, #244]	; (77c8 <_i2c_m_sync_init_impl+0x120>)
    76d4:	4613      	mov	r3, r2
    76d6:	005b      	lsls	r3, r3, #1
    76d8:	4413      	add	r3, r2
    76da:	00db      	lsls	r3, r3, #3
    76dc:	440b      	add	r3, r1
    76de:	3304      	adds	r3, #4
    76e0:	681b      	ldr	r3, [r3, #0]
    76e2:	f003 031c 	and.w	r3, r3, #28
    76e6:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    76e8:	2102      	movs	r1, #2
    76ea:	6838      	ldr	r0, [r7, #0]
    76ec:	4b37      	ldr	r3, [pc, #220]	; (77cc <_i2c_m_sync_init_impl+0x124>)
    76ee:	4798      	blx	r3
    76f0:	4603      	mov	r3, r0
    76f2:	2b00      	cmp	r3, #0
    76f4:	d006      	beq.n	7704 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    76f6:	6838      	ldr	r0, [r7, #0]
    76f8:	4b35      	ldr	r3, [pc, #212]	; (77d0 <_i2c_m_sync_init_impl+0x128>)
    76fa:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    76fc:	2102      	movs	r1, #2
    76fe:	6838      	ldr	r0, [r7, #0]
    7700:	4b34      	ldr	r3, [pc, #208]	; (77d4 <_i2c_m_sync_init_impl+0x12c>)
    7702:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    7704:	68bb      	ldr	r3, [r7, #8]
    7706:	f043 0301 	orr.w	r3, r3, #1
    770a:	4619      	mov	r1, r3
    770c:	6838      	ldr	r0, [r7, #0]
    770e:	4b32      	ldr	r3, [pc, #200]	; (77d8 <_i2c_m_sync_init_impl+0x130>)
    7710:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    7712:	2101      	movs	r1, #1
    7714:	6838      	ldr	r0, [r7, #0]
    7716:	4b2f      	ldr	r3, [pc, #188]	; (77d4 <_i2c_m_sync_init_impl+0x12c>)
    7718:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    771a:	7bfa      	ldrb	r2, [r7, #15]
    771c:	492a      	ldr	r1, [pc, #168]	; (77c8 <_i2c_m_sync_init_impl+0x120>)
    771e:	4613      	mov	r3, r2
    7720:	005b      	lsls	r3, r3, #1
    7722:	4413      	add	r3, r2
    7724:	00db      	lsls	r3, r3, #3
    7726:	440b      	add	r3, r1
    7728:	3304      	adds	r3, #4
    772a:	681b      	ldr	r3, [r3, #0]
    772c:	4619      	mov	r1, r3
    772e:	6838      	ldr	r0, [r7, #0]
    7730:	4b29      	ldr	r3, [pc, #164]	; (77d8 <_i2c_m_sync_init_impl+0x130>)
    7732:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    7734:	7bfa      	ldrb	r2, [r7, #15]
    7736:	4924      	ldr	r1, [pc, #144]	; (77c8 <_i2c_m_sync_init_impl+0x120>)
    7738:	4613      	mov	r3, r2
    773a:	005b      	lsls	r3, r3, #1
    773c:	4413      	add	r3, r2
    773e:	00db      	lsls	r3, r3, #3
    7740:	440b      	add	r3, r1
    7742:	3308      	adds	r3, #8
    7744:	681b      	ldr	r3, [r3, #0]
    7746:	4619      	mov	r1, r3
    7748:	6838      	ldr	r0, [r7, #0]
    774a:	4b24      	ldr	r3, [pc, #144]	; (77dc <_i2c_m_sync_init_impl+0x134>)
    774c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    774e:	7bfa      	ldrb	r2, [r7, #15]
    7750:	491d      	ldr	r1, [pc, #116]	; (77c8 <_i2c_m_sync_init_impl+0x120>)
    7752:	4613      	mov	r3, r2
    7754:	005b      	lsls	r3, r3, #1
    7756:	4413      	add	r3, r2
    7758:	00db      	lsls	r3, r3, #3
    775a:	440b      	add	r3, r1
    775c:	330c      	adds	r3, #12
    775e:	681b      	ldr	r3, [r3, #0]
    7760:	4619      	mov	r1, r3
    7762:	6838      	ldr	r0, [r7, #0]
    7764:	4b1e      	ldr	r3, [pc, #120]	; (77e0 <_i2c_m_sync_init_impl+0x138>)
    7766:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    7768:	7bfa      	ldrb	r2, [r7, #15]
    776a:	4917      	ldr	r1, [pc, #92]	; (77c8 <_i2c_m_sync_init_impl+0x120>)
    776c:	4613      	mov	r3, r2
    776e:	005b      	lsls	r3, r3, #1
    7770:	4413      	add	r3, r2
    7772:	00db      	lsls	r3, r3, #3
    7774:	440b      	add	r3, r1
    7776:	3304      	adds	r3, #4
    7778:	681b      	ldr	r3, [r3, #0]
    777a:	0e1b      	lsrs	r3, r3, #24
    777c:	b29b      	uxth	r3, r3
    777e:	f003 0303 	and.w	r3, r3, #3
    7782:	b29a      	uxth	r2, r3
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    7788:	687b      	ldr	r3, [r7, #4]
    778a:	899b      	ldrh	r3, [r3, #12]
    778c:	2b01      	cmp	r3, #1
    778e:	bf8c      	ite	hi
    7790:	2301      	movhi	r3, #1
    7792:	2300      	movls	r3, #0
    7794:	b2db      	uxtb	r3, r3
    7796:	4619      	mov	r1, r3
    7798:	6838      	ldr	r0, [r7, #0]
    779a:	4b12      	ldr	r3, [pc, #72]	; (77e4 <_i2c_m_sync_init_impl+0x13c>)
    779c:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    779e:	7bfa      	ldrb	r2, [r7, #15]
    77a0:	4909      	ldr	r1, [pc, #36]	; (77c8 <_i2c_m_sync_init_impl+0x120>)
    77a2:	4613      	mov	r3, r2
    77a4:	005b      	lsls	r3, r3, #1
    77a6:	4413      	add	r3, r2
    77a8:	00db      	lsls	r3, r3, #3
    77aa:	440b      	add	r3, r1
    77ac:	3312      	adds	r3, #18
    77ae:	881a      	ldrh	r2, [r3, #0]
    77b0:	687b      	ldr	r3, [r7, #4]
    77b2:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    77b4:	2300      	movs	r3, #0
}
    77b6:	4618      	mov	r0, r3
    77b8:	3710      	adds	r7, #16
    77ba:	46bd      	mov	sp, r7
    77bc:	bd80      	pop	{r7, pc}
    77be:	bf00      	nop
    77c0:	00006fdd 	.word	0x00006fdd
    77c4:	000069b1 	.word	0x000069b1
    77c8:	20000018 	.word	0x20000018
    77cc:	00006b55 	.word	0x00006b55
    77d0:	00006afd 	.word	0x00006afd
    77d4:	0000698d 	.word	0x0000698d
    77d8:	00006b85 	.word	0x00006b85
    77dc:	00006d2d 	.word	0x00006d2d
    77e0:	00006d75 	.word	0x00006d75
    77e4:	00006db1 	.word	0x00006db1

000077e8 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    77e8:	b580      	push	{r7, lr}
    77ea:	b082      	sub	sp, #8
    77ec:	af00      	add	r7, sp, #0
    77ee:	6078      	str	r0, [r7, #4]
    77f0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    77f2:	687b      	ldr	r3, [r7, #4]
    77f4:	2b00      	cmp	r3, #0
    77f6:	d004      	beq.n	7802 <_spi_load_regs_master+0x1a>
    77f8:	683b      	ldr	r3, [r7, #0]
    77fa:	2b00      	cmp	r3, #0
    77fc:	d001      	beq.n	7802 <_spi_load_regs_master+0x1a>
    77fe:	2301      	movs	r3, #1
    7800:	e000      	b.n	7804 <_spi_load_regs_master+0x1c>
    7802:	2300      	movs	r3, #0
    7804:	f003 0301 	and.w	r3, r3, #1
    7808:	b2db      	uxtb	r3, r3
    780a:	f640 1209 	movw	r2, #2313	; 0x909
    780e:	4915      	ldr	r1, [pc, #84]	; (7864 <_spi_load_regs_master+0x7c>)
    7810:	4618      	mov	r0, r3
    7812:	4b15      	ldr	r3, [pc, #84]	; (7868 <_spi_load_regs_master+0x80>)
    7814:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7816:	683b      	ldr	r3, [r7, #0]
    7818:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    781a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    781e:	f023 0301 	bic.w	r3, r3, #1
    7822:	4619      	mov	r1, r3
    7824:	6878      	ldr	r0, [r7, #4]
    7826:	4b11      	ldr	r3, [pc, #68]	; (786c <_spi_load_regs_master+0x84>)
    7828:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    782a:	683b      	ldr	r3, [r7, #0]
    782c:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    782e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7832:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    783a:	4619      	mov	r1, r3
    783c:	6878      	ldr	r0, [r7, #4]
    783e:	4b0c      	ldr	r3, [pc, #48]	; (7870 <_spi_load_regs_master+0x88>)
    7840:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7842:	683b      	ldr	r3, [r7, #0]
    7844:	7b1b      	ldrb	r3, [r3, #12]
    7846:	4619      	mov	r1, r3
    7848:	6878      	ldr	r0, [r7, #4]
    784a:	4b0a      	ldr	r3, [pc, #40]	; (7874 <_spi_load_regs_master+0x8c>)
    784c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    784e:	683b      	ldr	r3, [r7, #0]
    7850:	7b5b      	ldrb	r3, [r3, #13]
    7852:	4619      	mov	r1, r3
    7854:	6878      	ldr	r0, [r7, #4]
    7856:	4b08      	ldr	r3, [pc, #32]	; (7878 <_spi_load_regs_master+0x90>)
    7858:	4798      	blx	r3
}
    785a:	bf00      	nop
    785c:	3708      	adds	r7, #8
    785e:	46bd      	mov	sp, r7
    7860:	bd80      	pop	{r7, pc}
    7862:	bf00      	nop
    7864:	00011000 	.word	0x00011000
    7868:	00004409 	.word	0x00004409
    786c:	00006c39 	.word	0x00006c39
    7870:	00006d51 	.word	0x00006d51
    7874:	00006d91 	.word	0x00006d91
    7878:	00006ec9 	.word	0x00006ec9

0000787c <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    787c:	b580      	push	{r7, lr}
    787e:	b082      	sub	sp, #8
    7880:	af00      	add	r7, sp, #0
    7882:	6078      	str	r0, [r7, #4]
    7884:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    7886:	687b      	ldr	r3, [r7, #4]
    7888:	2b00      	cmp	r3, #0
    788a:	d004      	beq.n	7896 <_spi_load_regs_slave+0x1a>
    788c:	683b      	ldr	r3, [r7, #0]
    788e:	2b00      	cmp	r3, #0
    7890:	d001      	beq.n	7896 <_spi_load_regs_slave+0x1a>
    7892:	2301      	movs	r3, #1
    7894:	e000      	b.n	7898 <_spi_load_regs_slave+0x1c>
    7896:	2300      	movs	r3, #0
    7898:	f003 0301 	and.w	r3, r3, #1
    789c:	b2db      	uxtb	r3, r3
    789e:	f640 121d 	movw	r2, #2333	; 0x91d
    78a2:	491a      	ldr	r1, [pc, #104]	; (790c <_spi_load_regs_slave+0x90>)
    78a4:	4618      	mov	r0, r3
    78a6:	4b1a      	ldr	r3, [pc, #104]	; (7910 <_spi_load_regs_slave+0x94>)
    78a8:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    78aa:	683b      	ldr	r3, [r7, #0]
    78ac:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    78ae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    78b2:	f023 0301 	bic.w	r3, r3, #1
    78b6:	4619      	mov	r1, r3
    78b8:	6878      	ldr	r0, [r7, #4]
    78ba:	4b16      	ldr	r3, [pc, #88]	; (7914 <_spi_load_regs_slave+0x98>)
    78bc:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    78be:	683b      	ldr	r3, [r7, #0]
    78c0:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    78c2:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    78c6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    78ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    78ce:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    78d2:	4619      	mov	r1, r3
    78d4:	6878      	ldr	r0, [r7, #4]
    78d6:	4b10      	ldr	r3, [pc, #64]	; (7918 <_spi_load_regs_slave+0x9c>)
    78d8:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    78da:	683b      	ldr	r3, [r7, #0]
    78dc:	689b      	ldr	r3, [r3, #8]
    78de:	4619      	mov	r1, r3
    78e0:	6878      	ldr	r0, [r7, #4]
    78e2:	4b0e      	ldr	r3, [pc, #56]	; (791c <_spi_load_regs_slave+0xa0>)
    78e4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    78e6:	683b      	ldr	r3, [r7, #0]
    78e8:	7b5b      	ldrb	r3, [r3, #13]
    78ea:	4619      	mov	r1, r3
    78ec:	6878      	ldr	r0, [r7, #4]
    78ee:	4b0c      	ldr	r3, [pc, #48]	; (7920 <_spi_load_regs_slave+0xa4>)
    78f0:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    78f2:	bf00      	nop
    78f4:	f04f 31ff 	mov.w	r1, #4294967295
    78f8:	6878      	ldr	r0, [r7, #4]
    78fa:	4b0a      	ldr	r3, [pc, #40]	; (7924 <_spi_load_regs_slave+0xa8>)
    78fc:	4798      	blx	r3
    78fe:	4603      	mov	r3, r0
    7900:	2b00      	cmp	r3, #0
    7902:	d1f7      	bne.n	78f4 <_spi_load_regs_slave+0x78>
		;
}
    7904:	bf00      	nop
    7906:	3708      	adds	r7, #8
    7908:	46bd      	mov	sp, r7
    790a:	bd80      	pop	{r7, pc}
    790c:	00011000 	.word	0x00011000
    7910:	00004409 	.word	0x00004409
    7914:	00006c39 	.word	0x00006c39
    7918:	00006d51 	.word	0x00006d51
    791c:	00006e35 	.word	0x00006e35
    7920:	00006ec9 	.word	0x00006ec9
    7924:	000069fd 	.word	0x000069fd

00007928 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    7928:	b580      	push	{r7, lr}
    792a:	b084      	sub	sp, #16
    792c:	af00      	add	r7, sp, #0
    792e:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7930:	687b      	ldr	r3, [r7, #4]
    7932:	4618      	mov	r0, r3
    7934:	4b11      	ldr	r3, [pc, #68]	; (797c <_spi_get_regs+0x54>)
    7936:	4798      	blx	r3
    7938:	4603      	mov	r3, r0
    793a:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    793c:	2300      	movs	r3, #0
    793e:	73fb      	strb	r3, [r7, #15]
    7940:	e014      	b.n	796c <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    7942:	7bfa      	ldrb	r2, [r7, #15]
    7944:	490e      	ldr	r1, [pc, #56]	; (7980 <_spi_get_regs+0x58>)
    7946:	4613      	mov	r3, r2
    7948:	011b      	lsls	r3, r3, #4
    794a:	4413      	add	r3, r2
    794c:	440b      	add	r3, r1
    794e:	3310      	adds	r3, #16
    7950:	781b      	ldrb	r3, [r3, #0]
    7952:	7bba      	ldrb	r2, [r7, #14]
    7954:	429a      	cmp	r2, r3
    7956:	d106      	bne.n	7966 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7958:	7bfa      	ldrb	r2, [r7, #15]
    795a:	4613      	mov	r3, r2
    795c:	011b      	lsls	r3, r3, #4
    795e:	4413      	add	r3, r2
    7960:	4a07      	ldr	r2, [pc, #28]	; (7980 <_spi_get_regs+0x58>)
    7962:	4413      	add	r3, r2
    7964:	e006      	b.n	7974 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7966:	7bfb      	ldrb	r3, [r7, #15]
    7968:	3301      	adds	r3, #1
    796a:	73fb      	strb	r3, [r7, #15]
    796c:	7bfb      	ldrb	r3, [r7, #15]
    796e:	2b01      	cmp	r3, #1
    7970:	d9e7      	bls.n	7942 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    7972:	2300      	movs	r3, #0
}
    7974:	4618      	mov	r0, r3
    7976:	3710      	adds	r7, #16
    7978:	46bd      	mov	sp, r7
    797a:	bd80      	pop	{r7, pc}
    797c:	00006f81 	.word	0x00006f81
    7980:	0001103c 	.word	0x0001103c

00007984 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7984:	b580      	push	{r7, lr}
    7986:	b084      	sub	sp, #16
    7988:	af00      	add	r7, sp, #0
    798a:	6078      	str	r0, [r7, #4]
    798c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    798e:	683b      	ldr	r3, [r7, #0]
    7990:	4618      	mov	r0, r3
    7992:	4b35      	ldr	r3, [pc, #212]	; (7a68 <_spi_m_sync_init+0xe4>)
    7994:	4798      	blx	r3
    7996:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7998:	687b      	ldr	r3, [r7, #4]
    799a:	2b00      	cmp	r3, #0
    799c:	d004      	beq.n	79a8 <_spi_m_sync_init+0x24>
    799e:	683b      	ldr	r3, [r7, #0]
    79a0:	2b00      	cmp	r3, #0
    79a2:	d001      	beq.n	79a8 <_spi_m_sync_init+0x24>
    79a4:	2301      	movs	r3, #1
    79a6:	e000      	b.n	79aa <_spi_m_sync_init+0x26>
    79a8:	2300      	movs	r3, #0
    79aa:	f003 0301 	and.w	r3, r3, #1
    79ae:	b2db      	uxtb	r3, r3
    79b0:	f640 123f 	movw	r2, #2367	; 0x93f
    79b4:	492d      	ldr	r1, [pc, #180]	; (7a6c <_spi_m_sync_init+0xe8>)
    79b6:	4618      	mov	r0, r3
    79b8:	4b2d      	ldr	r3, [pc, #180]	; (7a70 <_spi_m_sync_init+0xec>)
    79ba:	4798      	blx	r3

	if (regs == NULL) {
    79bc:	68fb      	ldr	r3, [r7, #12]
    79be:	2b00      	cmp	r3, #0
    79c0:	d102      	bne.n	79c8 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    79c2:	f06f 030c 	mvn.w	r3, #12
    79c6:	e04a      	b.n	7a5e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    79c8:	2101      	movs	r1, #1
    79ca:	6838      	ldr	r0, [r7, #0]
    79cc:	4b29      	ldr	r3, [pc, #164]	; (7a74 <_spi_m_sync_init+0xf0>)
    79ce:	4798      	blx	r3
    79d0:	4603      	mov	r3, r0
    79d2:	f083 0301 	eor.w	r3, r3, #1
    79d6:	b2db      	uxtb	r3, r3
    79d8:	2b00      	cmp	r3, #0
    79da:	d019      	beq.n	7a10 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    79dc:	68fb      	ldr	r3, [r7, #12]
    79de:	681b      	ldr	r3, [r3, #0]
    79e0:	f003 031c 	and.w	r3, r3, #28
    79e4:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    79e6:	2102      	movs	r1, #2
    79e8:	6838      	ldr	r0, [r7, #0]
    79ea:	4b23      	ldr	r3, [pc, #140]	; (7a78 <_spi_m_sync_init+0xf4>)
    79ec:	4798      	blx	r3
    79ee:	4603      	mov	r3, r0
    79f0:	2b00      	cmp	r3, #0
    79f2:	d006      	beq.n	7a02 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    79f4:	6838      	ldr	r0, [r7, #0]
    79f6:	4b21      	ldr	r3, [pc, #132]	; (7a7c <_spi_m_sync_init+0xf8>)
    79f8:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    79fa:	2102      	movs	r1, #2
    79fc:	6838      	ldr	r0, [r7, #0]
    79fe:	4b20      	ldr	r3, [pc, #128]	; (7a80 <_spi_m_sync_init+0xfc>)
    7a00:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7a02:	68bb      	ldr	r3, [r7, #8]
    7a04:	f043 0301 	orr.w	r3, r3, #1
    7a08:	4619      	mov	r1, r3
    7a0a:	6838      	ldr	r0, [r7, #0]
    7a0c:	4b1d      	ldr	r3, [pc, #116]	; (7a84 <_spi_m_sync_init+0x100>)
    7a0e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    7a10:	2101      	movs	r1, #1
    7a12:	6838      	ldr	r0, [r7, #0]
    7a14:	4b1a      	ldr	r3, [pc, #104]	; (7a80 <_spi_m_sync_init+0xfc>)
    7a16:	4798      	blx	r3

	dev->prvt = hw;
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	683a      	ldr	r2, [r7, #0]
    7a1c:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7a1e:	68fb      	ldr	r3, [r7, #12]
    7a20:	681b      	ldr	r3, [r3, #0]
    7a22:	f003 031c 	and.w	r3, r3, #28
    7a26:	2b08      	cmp	r3, #8
    7a28:	d104      	bne.n	7a34 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    7a2a:	68f9      	ldr	r1, [r7, #12]
    7a2c:	6838      	ldr	r0, [r7, #0]
    7a2e:	4b16      	ldr	r3, [pc, #88]	; (7a88 <_spi_m_sync_init+0x104>)
    7a30:	4798      	blx	r3
    7a32:	e003      	b.n	7a3c <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7a34:	68f9      	ldr	r1, [r7, #12]
    7a36:	6838      	ldr	r0, [r7, #0]
    7a38:	4b14      	ldr	r3, [pc, #80]	; (7a8c <_spi_m_sync_init+0x108>)
    7a3a:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7a3c:	68fb      	ldr	r3, [r7, #12]
    7a3e:	685b      	ldr	r3, [r3, #4]
    7a40:	f003 0307 	and.w	r3, r3, #7
    7a44:	2b00      	cmp	r3, #0
    7a46:	d101      	bne.n	7a4c <_spi_m_sync_init+0xc8>
    7a48:	2201      	movs	r2, #1
    7a4a:	e000      	b.n	7a4e <_spi_m_sync_init+0xca>
    7a4c:	2202      	movs	r2, #2
    7a4e:	687b      	ldr	r3, [r7, #4]
    7a50:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    7a52:	68fb      	ldr	r3, [r7, #12]
    7a54:	89db      	ldrh	r3, [r3, #14]
    7a56:	b29a      	uxth	r2, r3
    7a58:	687b      	ldr	r3, [r7, #4]
    7a5a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    7a5c:	2300      	movs	r3, #0
}
    7a5e:	4618      	mov	r0, r3
    7a60:	3710      	adds	r7, #16
    7a62:	46bd      	mov	sp, r7
    7a64:	bd80      	pop	{r7, pc}
    7a66:	bf00      	nop
    7a68:	00007929 	.word	0x00007929
    7a6c:	00011000 	.word	0x00011000
    7a70:	00004409 	.word	0x00004409
    7a74:	000069fd 	.word	0x000069fd
    7a78:	00006c09 	.word	0x00006c09
    7a7c:	00006be1 	.word	0x00006be1
    7a80:	000069d9 	.word	0x000069d9
    7a84:	00006c39 	.word	0x00006c39
    7a88:	0000787d 	.word	0x0000787d
    7a8c:	000077e9 	.word	0x000077e9

00007a90 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    7a90:	b580      	push	{r7, lr}
    7a92:	b082      	sub	sp, #8
    7a94:	af00      	add	r7, sp, #0
    7a96:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7a98:	bf00      	nop
    7a9a:	2103      	movs	r1, #3
    7a9c:	6878      	ldr	r0, [r7, #4]
    7a9e:	4b06      	ldr	r3, [pc, #24]	; (7ab8 <_spi_wait_bus_idle+0x28>)
    7aa0:	4798      	blx	r3
    7aa2:	4603      	mov	r3, r0
    7aa4:	2b00      	cmp	r3, #0
    7aa6:	d0f8      	beq.n	7a9a <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7aa8:	2103      	movs	r1, #3
    7aaa:	6878      	ldr	r0, [r7, #4]
    7aac:	4b03      	ldr	r3, [pc, #12]	; (7abc <_spi_wait_bus_idle+0x2c>)
    7aae:	4798      	blx	r3
}
    7ab0:	bf00      	nop
    7ab2:	3708      	adds	r7, #8
    7ab4:	46bd      	mov	sp, r7
    7ab6:	bd80      	pop	{r7, pc}
    7ab8:	00006a73 	.word	0x00006a73
    7abc:	00006ab5 	.word	0x00006ab5

00007ac0 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    7ac0:	b580      	push	{r7, lr}
    7ac2:	b086      	sub	sp, #24
    7ac4:	af00      	add	r7, sp, #0
    7ac6:	60f8      	str	r0, [r7, #12]
    7ac8:	60b9      	str	r1, [r7, #8]
    7aca:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    7acc:	68bb      	ldr	r3, [r7, #8]
    7ace:	f003 0304 	and.w	r3, r3, #4
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d101      	bne.n	7ada <_spi_rx_check_and_receive+0x1a>
		return false;
    7ad6:	2300      	movs	r3, #0
    7ad8:	e022      	b.n	7b20 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    7ada:	68f8      	ldr	r0, [r7, #12]
    7adc:	4b12      	ldr	r3, [pc, #72]	; (7b28 <_spi_rx_check_and_receive+0x68>)
    7ade:	4798      	blx	r3
    7ae0:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    7ae2:	687b      	ldr	r3, [r7, #4]
    7ae4:	685b      	ldr	r3, [r3, #4]
    7ae6:	2b00      	cmp	r3, #0
    7ae8:	d014      	beq.n	7b14 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    7aea:	687b      	ldr	r3, [r7, #4]
    7aec:	685b      	ldr	r3, [r3, #4]
    7aee:	1c59      	adds	r1, r3, #1
    7af0:	687a      	ldr	r2, [r7, #4]
    7af2:	6051      	str	r1, [r2, #4]
    7af4:	697a      	ldr	r2, [r7, #20]
    7af6:	b2d2      	uxtb	r2, r2
    7af8:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    7afa:	687b      	ldr	r3, [r7, #4]
    7afc:	7c1b      	ldrb	r3, [r3, #16]
    7afe:	2b01      	cmp	r3, #1
    7b00:	d908      	bls.n	7b14 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    7b02:	687b      	ldr	r3, [r7, #4]
    7b04:	685b      	ldr	r3, [r3, #4]
    7b06:	1c59      	adds	r1, r3, #1
    7b08:	687a      	ldr	r2, [r7, #4]
    7b0a:	6051      	str	r1, [r2, #4]
    7b0c:	697a      	ldr	r2, [r7, #20]
    7b0e:	0a12      	lsrs	r2, r2, #8
    7b10:	b2d2      	uxtb	r2, r2
    7b12:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7b14:	687b      	ldr	r3, [r7, #4]
    7b16:	68db      	ldr	r3, [r3, #12]
    7b18:	1c5a      	adds	r2, r3, #1
    7b1a:	687b      	ldr	r3, [r7, #4]
    7b1c:	60da      	str	r2, [r3, #12]

	return true;
    7b1e:	2301      	movs	r3, #1
}
    7b20:	4618      	mov	r0, r3
    7b22:	3718      	adds	r7, #24
    7b24:	46bd      	mov	sp, r7
    7b26:	bd80      	pop	{r7, pc}
    7b28:	00006eb1 	.word	0x00006eb1

00007b2c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7b2c:	b580      	push	{r7, lr}
    7b2e:	b086      	sub	sp, #24
    7b30:	af00      	add	r7, sp, #0
    7b32:	60f8      	str	r0, [r7, #12]
    7b34:	60b9      	str	r1, [r7, #8]
    7b36:	607a      	str	r2, [r7, #4]
    7b38:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7b3a:	68bb      	ldr	r3, [r7, #8]
    7b3c:	f003 0301 	and.w	r3, r3, #1
    7b40:	2b00      	cmp	r3, #0
    7b42:	d028      	beq.n	7b96 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7b44:	687b      	ldr	r3, [r7, #4]
    7b46:	681b      	ldr	r3, [r3, #0]
    7b48:	2b00      	cmp	r3, #0
    7b4a:	d018      	beq.n	7b7e <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	681b      	ldr	r3, [r3, #0]
    7b50:	1c59      	adds	r1, r3, #1
    7b52:	687a      	ldr	r2, [r7, #4]
    7b54:	6011      	str	r1, [r2, #0]
    7b56:	781b      	ldrb	r3, [r3, #0]
    7b58:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7b5a:	687b      	ldr	r3, [r7, #4]
    7b5c:	7c1b      	ldrb	r3, [r3, #16]
    7b5e:	2b01      	cmp	r3, #1
    7b60:	d90f      	bls.n	7b82 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    7b62:	687b      	ldr	r3, [r7, #4]
    7b64:	681b      	ldr	r3, [r3, #0]
    7b66:	781b      	ldrb	r3, [r3, #0]
    7b68:	021b      	lsls	r3, r3, #8
    7b6a:	461a      	mov	r2, r3
    7b6c:	697b      	ldr	r3, [r7, #20]
    7b6e:	4313      	orrs	r3, r2
    7b70:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7b72:	687b      	ldr	r3, [r7, #4]
    7b74:	681b      	ldr	r3, [r3, #0]
    7b76:	1c5a      	adds	r2, r3, #1
    7b78:	687b      	ldr	r3, [r7, #4]
    7b7a:	601a      	str	r2, [r3, #0]
    7b7c:	e001      	b.n	7b82 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    7b7e:	887b      	ldrh	r3, [r7, #2]
    7b80:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    7b82:	687b      	ldr	r3, [r7, #4]
    7b84:	689b      	ldr	r3, [r3, #8]
    7b86:	1c5a      	adds	r2, r3, #1
    7b88:	687b      	ldr	r3, [r7, #4]
    7b8a:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7b8c:	6979      	ldr	r1, [r7, #20]
    7b8e:	68f8      	ldr	r0, [r7, #12]
    7b90:	4b03      	ldr	r3, [pc, #12]	; (7ba0 <_spi_tx_check_and_send+0x74>)
    7b92:	4798      	blx	r3
    7b94:	e000      	b.n	7b98 <_spi_tx_check_and_send+0x6c>
		return;
    7b96:	bf00      	nop
}
    7b98:	3718      	adds	r7, #24
    7b9a:	46bd      	mov	sp, r7
    7b9c:	bd80      	pop	{r7, pc}
    7b9e:	bf00      	nop
    7ba0:	00006e95 	.word	0x00006e95

00007ba4 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7ba4:	b580      	push	{r7, lr}
    7ba6:	b082      	sub	sp, #8
    7ba8:	af00      	add	r7, sp, #0
    7baa:	6078      	str	r0, [r7, #4]
    7bac:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    7bae:	687b      	ldr	r3, [r7, #4]
    7bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7bb4:	2b00      	cmp	r3, #0
    7bb6:	d00b      	beq.n	7bd0 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7bb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7bbc:	6838      	ldr	r0, [r7, #0]
    7bbe:	4b07      	ldr	r3, [pc, #28]	; (7bdc <_spi_err_check+0x38>)
    7bc0:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7bc2:	2180      	movs	r1, #128	; 0x80
    7bc4:	6838      	ldr	r0, [r7, #0]
    7bc6:	4b06      	ldr	r3, [pc, #24]	; (7be0 <_spi_err_check+0x3c>)
    7bc8:	4798      	blx	r3
		return ERR_OVERFLOW;
    7bca:	f06f 0312 	mvn.w	r3, #18
    7bce:	e000      	b.n	7bd2 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7bd0:	2300      	movs	r3, #0
}
    7bd2:	4618      	mov	r0, r3
    7bd4:	3708      	adds	r7, #8
    7bd6:	46bd      	mov	sp, r7
    7bd8:	bd80      	pop	{r7, pc}
    7bda:	bf00      	nop
    7bdc:	00006ee9 	.word	0x00006ee9
    7be0:	00006ab5 	.word	0x00006ab5

00007be4 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7be4:	b590      	push	{r4, r7, lr}
    7be6:	b08b      	sub	sp, #44	; 0x2c
    7be8:	af00      	add	r7, sp, #0
    7bea:	6078      	str	r0, [r7, #4]
    7bec:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    7bee:	687b      	ldr	r3, [r7, #4]
    7bf0:	681b      	ldr	r3, [r3, #0]
    7bf2:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7bf4:	2300      	movs	r3, #0
    7bf6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7bf8:	683b      	ldr	r3, [r7, #0]
    7bfa:	681b      	ldr	r3, [r3, #0]
    7bfc:	60bb      	str	r3, [r7, #8]
    7bfe:	683b      	ldr	r3, [r7, #0]
    7c00:	685b      	ldr	r3, [r3, #4]
    7c02:	60fb      	str	r3, [r7, #12]
    7c04:	2300      	movs	r3, #0
    7c06:	613b      	str	r3, [r7, #16]
    7c08:	2300      	movs	r3, #0
    7c0a:	617b      	str	r3, [r7, #20]
    7c0c:	687b      	ldr	r3, [r7, #4]
    7c0e:	791b      	ldrb	r3, [r3, #4]
    7c10:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7c12:	687b      	ldr	r3, [r7, #4]
    7c14:	2b00      	cmp	r3, #0
    7c16:	d004      	beq.n	7c22 <_spi_m_sync_trans+0x3e>
    7c18:	6a3b      	ldr	r3, [r7, #32]
    7c1a:	2b00      	cmp	r3, #0
    7c1c:	d001      	beq.n	7c22 <_spi_m_sync_trans+0x3e>
    7c1e:	2301      	movs	r3, #1
    7c20:	e000      	b.n	7c24 <_spi_m_sync_trans+0x40>
    7c22:	2300      	movs	r3, #0
    7c24:	f003 0301 	and.w	r3, r3, #1
    7c28:	b2db      	uxtb	r3, r3
    7c2a:	f640 22a3 	movw	r2, #2723	; 0xaa3
    7c2e:	492b      	ldr	r1, [pc, #172]	; (7cdc <_spi_m_sync_trans+0xf8>)
    7c30:	4618      	mov	r0, r3
    7c32:	4b2b      	ldr	r3, [pc, #172]	; (7ce0 <_spi_m_sync_trans+0xfc>)
    7c34:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7c36:	2107      	movs	r1, #7
    7c38:	6a38      	ldr	r0, [r7, #32]
    7c3a:	4b2a      	ldr	r3, [pc, #168]	; (7ce4 <_spi_m_sync_trans+0x100>)
    7c3c:	4798      	blx	r3
    7c3e:	4603      	mov	r3, r0
    7c40:	2b00      	cmp	r3, #0
    7c42:	d002      	beq.n	7c4a <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7c44:	f06f 0303 	mvn.w	r3, #3
    7c48:	e043      	b.n	7cd2 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7c4a:	6a38      	ldr	r0, [r7, #32]
    7c4c:	4b26      	ldr	r3, [pc, #152]	; (7ce8 <_spi_m_sync_trans+0x104>)
    7c4e:	4798      	blx	r3
    7c50:	4603      	mov	r3, r0
    7c52:	f083 0301 	eor.w	r3, r3, #1
    7c56:	b2db      	uxtb	r3, r3
    7c58:	2b00      	cmp	r3, #0
    7c5a:	d002      	beq.n	7c62 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7c5c:	f06f 0313 	mvn.w	r3, #19
    7c60:	e037      	b.n	7cd2 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7c62:	6a38      	ldr	r0, [r7, #32]
    7c64:	4b21      	ldr	r3, [pc, #132]	; (7cec <_spi_m_sync_trans+0x108>)
    7c66:	4798      	blx	r3
    7c68:	4603      	mov	r3, r0
    7c6a:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7c6c:	f107 0308 	add.w	r3, r7, #8
    7c70:	461a      	mov	r2, r3
    7c72:	69f9      	ldr	r1, [r7, #28]
    7c74:	6a38      	ldr	r0, [r7, #32]
    7c76:	4b1e      	ldr	r3, [pc, #120]	; (7cf0 <_spi_m_sync_trans+0x10c>)
    7c78:	4798      	blx	r3
    7c7a:	4603      	mov	r3, r0
    7c7c:	f083 0301 	eor.w	r3, r3, #1
    7c80:	b2db      	uxtb	r3, r3
    7c82:	2b00      	cmp	r3, #0
    7c84:	d00b      	beq.n	7c9e <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7c86:	697a      	ldr	r2, [r7, #20]
    7c88:	693b      	ldr	r3, [r7, #16]
    7c8a:	429a      	cmp	r2, r3
    7c8c:	d307      	bcc.n	7c9e <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7c8e:	687b      	ldr	r3, [r7, #4]
    7c90:	88db      	ldrh	r3, [r3, #6]
    7c92:	f107 0208 	add.w	r2, r7, #8
    7c96:	69f9      	ldr	r1, [r7, #28]
    7c98:	6a38      	ldr	r0, [r7, #32]
    7c9a:	4c16      	ldr	r4, [pc, #88]	; (7cf4 <_spi_m_sync_trans+0x110>)
    7c9c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7c9e:	6a39      	ldr	r1, [r7, #32]
    7ca0:	69f8      	ldr	r0, [r7, #28]
    7ca2:	4b15      	ldr	r3, [pc, #84]	; (7cf8 <_spi_m_sync_trans+0x114>)
    7ca4:	4798      	blx	r3
    7ca6:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7caa:	2b00      	cmp	r3, #0
    7cac:	db0c      	blt.n	7cc8 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    7cae:	693a      	ldr	r2, [r7, #16]
    7cb0:	683b      	ldr	r3, [r7, #0]
    7cb2:	689b      	ldr	r3, [r3, #8]
    7cb4:	429a      	cmp	r2, r3
    7cb6:	d3d4      	bcc.n	7c62 <_spi_m_sync_trans+0x7e>
    7cb8:	697a      	ldr	r2, [r7, #20]
    7cba:	683b      	ldr	r3, [r7, #0]
    7cbc:	689b      	ldr	r3, [r3, #8]
    7cbe:	429a      	cmp	r2, r3
    7cc0:	d3cf      	bcc.n	7c62 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7cc2:	693b      	ldr	r3, [r7, #16]
    7cc4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7cc6:	e000      	b.n	7cca <_spi_m_sync_trans+0xe6>
			break;
    7cc8:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7cca:	6a38      	ldr	r0, [r7, #32]
    7ccc:	4b0b      	ldr	r3, [pc, #44]	; (7cfc <_spi_m_sync_trans+0x118>)
    7cce:	4798      	blx	r3

	return rc;
    7cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7cd2:	4618      	mov	r0, r3
    7cd4:	372c      	adds	r7, #44	; 0x2c
    7cd6:	46bd      	mov	sp, r7
    7cd8:	bd90      	pop	{r4, r7, pc}
    7cda:	bf00      	nop
    7cdc:	00011000 	.word	0x00011000
    7ce0:	00004409 	.word	0x00004409
    7ce4:	000069fd 	.word	0x000069fd
    7ce8:	00006ba9 	.word	0x00006ba9
    7cec:	00006a9b 	.word	0x00006a9b
    7cf0:	00007ac1 	.word	0x00007ac1
    7cf4:	00007b2d 	.word	0x00007b2d
    7cf8:	00007ba5 	.word	0x00007ba5
    7cfc:	00007a91 	.word	0x00007a91

00007d00 <__NVIC_EnableIRQ>:
{
    7d00:	b480      	push	{r7}
    7d02:	b083      	sub	sp, #12
    7d04:	af00      	add	r7, sp, #0
    7d06:	4603      	mov	r3, r0
    7d08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d0e:	2b00      	cmp	r3, #0
    7d10:	db0b      	blt.n	7d2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d12:	4909      	ldr	r1, [pc, #36]	; (7d38 <__NVIC_EnableIRQ+0x38>)
    7d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d18:	095b      	lsrs	r3, r3, #5
    7d1a:	88fa      	ldrh	r2, [r7, #6]
    7d1c:	f002 021f 	and.w	r2, r2, #31
    7d20:	2001      	movs	r0, #1
    7d22:	fa00 f202 	lsl.w	r2, r0, r2
    7d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7d2a:	bf00      	nop
    7d2c:	370c      	adds	r7, #12
    7d2e:	46bd      	mov	sp, r7
    7d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d34:	4770      	bx	lr
    7d36:	bf00      	nop
    7d38:	e000e100 	.word	0xe000e100

00007d3c <__NVIC_DisableIRQ>:
{
    7d3c:	b480      	push	{r7}
    7d3e:	b083      	sub	sp, #12
    7d40:	af00      	add	r7, sp, #0
    7d42:	4603      	mov	r3, r0
    7d44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d4a:	2b00      	cmp	r3, #0
    7d4c:	db10      	blt.n	7d70 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d4e:	490b      	ldr	r1, [pc, #44]	; (7d7c <__NVIC_DisableIRQ+0x40>)
    7d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d54:	095b      	lsrs	r3, r3, #5
    7d56:	88fa      	ldrh	r2, [r7, #6]
    7d58:	f002 021f 	and.w	r2, r2, #31
    7d5c:	2001      	movs	r0, #1
    7d5e:	fa00 f202 	lsl.w	r2, r0, r2
    7d62:	3320      	adds	r3, #32
    7d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7d68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7d6c:	f3bf 8f6f 	isb	sy
}
    7d70:	bf00      	nop
    7d72:	370c      	adds	r7, #12
    7d74:	46bd      	mov	sp, r7
    7d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d7a:	4770      	bx	lr
    7d7c:	e000e100 	.word	0xe000e100

00007d80 <__NVIC_ClearPendingIRQ>:
{
    7d80:	b480      	push	{r7}
    7d82:	b083      	sub	sp, #12
    7d84:	af00      	add	r7, sp, #0
    7d86:	4603      	mov	r3, r0
    7d88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d8e:	2b00      	cmp	r3, #0
    7d90:	db0c      	blt.n	7dac <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d92:	4909      	ldr	r1, [pc, #36]	; (7db8 <__NVIC_ClearPendingIRQ+0x38>)
    7d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d98:	095b      	lsrs	r3, r3, #5
    7d9a:	88fa      	ldrh	r2, [r7, #6]
    7d9c:	f002 021f 	and.w	r2, r2, #31
    7da0:	2001      	movs	r0, #1
    7da2:	fa00 f202 	lsl.w	r2, r0, r2
    7da6:	3360      	adds	r3, #96	; 0x60
    7da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7dac:	bf00      	nop
    7dae:	370c      	adds	r7, #12
    7db0:	46bd      	mov	sp, r7
    7db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7db6:	4770      	bx	lr
    7db8:	e000e100 	.word	0xe000e100

00007dbc <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7dbc:	b480      	push	{r7}
    7dbe:	b083      	sub	sp, #12
    7dc0:	af00      	add	r7, sp, #0
    7dc2:	6078      	str	r0, [r7, #4]
    7dc4:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7dc6:	bf00      	nop
    7dc8:	687b      	ldr	r3, [r7, #4]
    7dca:	689a      	ldr	r2, [r3, #8]
    7dcc:	683b      	ldr	r3, [r7, #0]
    7dce:	4013      	ands	r3, r2
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	d1f9      	bne.n	7dc8 <hri_tcc_wait_for_sync+0xc>
	};
}
    7dd4:	bf00      	nop
    7dd6:	370c      	adds	r7, #12
    7dd8:	46bd      	mov	sp, r7
    7dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dde:	4770      	bx	lr

00007de0 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7de0:	b480      	push	{r7}
    7de2:	b083      	sub	sp, #12
    7de4:	af00      	add	r7, sp, #0
    7de6:	6078      	str	r0, [r7, #4]
    7de8:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7dea:	687b      	ldr	r3, [r7, #4]
    7dec:	689a      	ldr	r2, [r3, #8]
    7dee:	683b      	ldr	r3, [r7, #0]
    7df0:	4013      	ands	r3, r2
    7df2:	2b00      	cmp	r3, #0
    7df4:	bf14      	ite	ne
    7df6:	2301      	movne	r3, #1
    7df8:	2300      	moveq	r3, #0
    7dfa:	b2db      	uxtb	r3, r3
}
    7dfc:	4618      	mov	r0, r3
    7dfe:	370c      	adds	r7, #12
    7e00:	46bd      	mov	sp, r7
    7e02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e06:	4770      	bx	lr

00007e08 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7e08:	b480      	push	{r7}
    7e0a:	b083      	sub	sp, #12
    7e0c:	af00      	add	r7, sp, #0
    7e0e:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7e10:	687b      	ldr	r3, [r7, #4]
    7e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7e14:	f003 0301 	and.w	r3, r3, #1
    7e18:	2b00      	cmp	r3, #0
    7e1a:	bf14      	ite	ne
    7e1c:	2301      	movne	r3, #1
    7e1e:	2300      	moveq	r3, #0
    7e20:	b2db      	uxtb	r3, r3
}
    7e22:	4618      	mov	r0, r3
    7e24:	370c      	adds	r7, #12
    7e26:	46bd      	mov	sp, r7
    7e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e2c:	4770      	bx	lr

00007e2e <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7e2e:	b480      	push	{r7}
    7e30:	b083      	sub	sp, #12
    7e32:	af00      	add	r7, sp, #0
    7e34:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7e36:	687b      	ldr	r3, [r7, #4]
    7e38:	2201      	movs	r2, #1
    7e3a:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7e3c:	bf00      	nop
    7e3e:	370c      	adds	r7, #12
    7e40:	46bd      	mov	sp, r7
    7e42:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e46:	4770      	bx	lr

00007e48 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7e48:	b480      	push	{r7}
    7e4a:	b083      	sub	sp, #12
    7e4c:	af00      	add	r7, sp, #0
    7e4e:	6078      	str	r0, [r7, #4]
    7e50:	460b      	mov	r3, r1
    7e52:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7e54:	687b      	ldr	r3, [r7, #4]
    7e56:	78fa      	ldrb	r2, [r7, #3]
    7e58:	715a      	strb	r2, [r3, #5]
}
    7e5a:	bf00      	nop
    7e5c:	370c      	adds	r7, #12
    7e5e:	46bd      	mov	sp, r7
    7e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e64:	4770      	bx	lr

00007e66 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7e66:	b480      	push	{r7}
    7e68:	b083      	sub	sp, #12
    7e6a:	af00      	add	r7, sp, #0
    7e6c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7e6e:	687b      	ldr	r3, [r7, #4]
    7e70:	2201      	movs	r2, #1
    7e72:	629a      	str	r2, [r3, #40]	; 0x28
}
    7e74:	bf00      	nop
    7e76:	370c      	adds	r7, #12
    7e78:	46bd      	mov	sp, r7
    7e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e7e:	4770      	bx	lr

00007e80 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7e80:	b580      	push	{r7, lr}
    7e82:	b082      	sub	sp, #8
    7e84:	af00      	add	r7, sp, #0
    7e86:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7e88:	687b      	ldr	r3, [r7, #4]
    7e8a:	681b      	ldr	r3, [r3, #0]
    7e8c:	f043 0201 	orr.w	r2, r3, #1
    7e90:	687b      	ldr	r3, [r7, #4]
    7e92:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7e94:	2101      	movs	r1, #1
    7e96:	6878      	ldr	r0, [r7, #4]
    7e98:	4b02      	ldr	r3, [pc, #8]	; (7ea4 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7e9a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7e9c:	bf00      	nop
    7e9e:	3708      	adds	r7, #8
    7ea0:	46bd      	mov	sp, r7
    7ea2:	bd80      	pop	{r7, pc}
    7ea4:	00007dbd 	.word	0x00007dbd

00007ea8 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7ea8:	b580      	push	{r7, lr}
    7eaa:	b082      	sub	sp, #8
    7eac:	af00      	add	r7, sp, #0
    7eae:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7eb0:	687b      	ldr	r3, [r7, #4]
    7eb2:	681b      	ldr	r3, [r3, #0]
    7eb4:	f043 0202 	orr.w	r2, r3, #2
    7eb8:	687b      	ldr	r3, [r7, #4]
    7eba:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7ebc:	2103      	movs	r1, #3
    7ebe:	6878      	ldr	r0, [r7, #4]
    7ec0:	4b02      	ldr	r3, [pc, #8]	; (7ecc <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7ec2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7ec4:	bf00      	nop
    7ec6:	3708      	adds	r7, #8
    7ec8:	46bd      	mov	sp, r7
    7eca:	bd80      	pop	{r7, pc}
    7ecc:	00007dbd 	.word	0x00007dbd

00007ed0 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7ed0:	b580      	push	{r7, lr}
    7ed2:	b084      	sub	sp, #16
    7ed4:	af00      	add	r7, sp, #0
    7ed6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7ed8:	2103      	movs	r1, #3
    7eda:	6878      	ldr	r0, [r7, #4]
    7edc:	4b09      	ldr	r3, [pc, #36]	; (7f04 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7ede:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7ee0:	687b      	ldr	r3, [r7, #4]
    7ee2:	681b      	ldr	r3, [r3, #0]
    7ee4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7ee6:	68fb      	ldr	r3, [r7, #12]
    7ee8:	085b      	lsrs	r3, r3, #1
    7eea:	f003 0301 	and.w	r3, r3, #1
    7eee:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7ef0:	68fb      	ldr	r3, [r7, #12]
    7ef2:	2b00      	cmp	r3, #0
    7ef4:	bf14      	ite	ne
    7ef6:	2301      	movne	r3, #1
    7ef8:	2300      	moveq	r3, #0
    7efa:	b2db      	uxtb	r3, r3
}
    7efc:	4618      	mov	r0, r3
    7efe:	3710      	adds	r7, #16
    7f00:	46bd      	mov	sp, r7
    7f02:	bd80      	pop	{r7, pc}
    7f04:	00007dbd 	.word	0x00007dbd

00007f08 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7f08:	b580      	push	{r7, lr}
    7f0a:	b082      	sub	sp, #8
    7f0c:	af00      	add	r7, sp, #0
    7f0e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7f10:	687b      	ldr	r3, [r7, #4]
    7f12:	681b      	ldr	r3, [r3, #0]
    7f14:	f023 0202 	bic.w	r2, r3, #2
    7f18:	687b      	ldr	r3, [r7, #4]
    7f1a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7f1c:	2103      	movs	r1, #3
    7f1e:	6878      	ldr	r0, [r7, #4]
    7f20:	4b02      	ldr	r3, [pc, #8]	; (7f2c <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7f22:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7f24:	bf00      	nop
    7f26:	3708      	adds	r7, #8
    7f28:	46bd      	mov	sp, r7
    7f2a:	bd80      	pop	{r7, pc}
    7f2c:	00007dbd 	.word	0x00007dbd

00007f30 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7f30:	b580      	push	{r7, lr}
    7f32:	b084      	sub	sp, #16
    7f34:	af00      	add	r7, sp, #0
    7f36:	6078      	str	r0, [r7, #4]
    7f38:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7f3a:	2103      	movs	r1, #3
    7f3c:	6878      	ldr	r0, [r7, #4]
    7f3e:	4b07      	ldr	r3, [pc, #28]	; (7f5c <hri_tcc_get_CTRLA_reg+0x2c>)
    7f40:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7f42:	687b      	ldr	r3, [r7, #4]
    7f44:	681b      	ldr	r3, [r3, #0]
    7f46:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7f48:	68fa      	ldr	r2, [r7, #12]
    7f4a:	683b      	ldr	r3, [r7, #0]
    7f4c:	4013      	ands	r3, r2
    7f4e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7f50:	68fb      	ldr	r3, [r7, #12]
}
    7f52:	4618      	mov	r0, r3
    7f54:	3710      	adds	r7, #16
    7f56:	46bd      	mov	sp, r7
    7f58:	bd80      	pop	{r7, pc}
    7f5a:	bf00      	nop
    7f5c:	00007dbd 	.word	0x00007dbd

00007f60 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7f60:	b580      	push	{r7, lr}
    7f62:	b082      	sub	sp, #8
    7f64:	af00      	add	r7, sp, #0
    7f66:	6078      	str	r0, [r7, #4]
    7f68:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7f6a:	687b      	ldr	r3, [r7, #4]
    7f6c:	683a      	ldr	r2, [r7, #0]
    7f6e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7f70:	2103      	movs	r1, #3
    7f72:	6878      	ldr	r0, [r7, #4]
    7f74:	4b02      	ldr	r3, [pc, #8]	; (7f80 <hri_tcc_write_CTRLA_reg+0x20>)
    7f76:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7f78:	bf00      	nop
    7f7a:	3708      	adds	r7, #8
    7f7c:	46bd      	mov	sp, r7
    7f7e:	bd80      	pop	{r7, pc}
    7f80:	00007dbd 	.word	0x00007dbd

00007f84 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7f84:	b480      	push	{r7}
    7f86:	b083      	sub	sp, #12
    7f88:	af00      	add	r7, sp, #0
    7f8a:	6078      	str	r0, [r7, #4]
    7f8c:	460b      	mov	r3, r1
    7f8e:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7f90:	687b      	ldr	r3, [r7, #4]
    7f92:	78fa      	ldrb	r2, [r7, #3]
    7f94:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7f96:	bf00      	nop
    7f98:	370c      	adds	r7, #12
    7f9a:	46bd      	mov	sp, r7
    7f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fa0:	4770      	bx	lr

00007fa2 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7fa2:	b480      	push	{r7}
    7fa4:	b083      	sub	sp, #12
    7fa6:	af00      	add	r7, sp, #0
    7fa8:	6078      	str	r0, [r7, #4]
    7faa:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7fac:	687b      	ldr	r3, [r7, #4]
    7fae:	683a      	ldr	r2, [r7, #0]
    7fb0:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7fb2:	bf00      	nop
    7fb4:	370c      	adds	r7, #12
    7fb6:	46bd      	mov	sp, r7
    7fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fbc:	4770      	bx	lr
	...

00007fc0 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7fc0:	b580      	push	{r7, lr}
    7fc2:	b082      	sub	sp, #8
    7fc4:	af00      	add	r7, sp, #0
    7fc6:	6078      	str	r0, [r7, #4]
    7fc8:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7fca:	687b      	ldr	r3, [r7, #4]
    7fcc:	683a      	ldr	r2, [r7, #0]
    7fce:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7fd0:	2180      	movs	r1, #128	; 0x80
    7fd2:	6878      	ldr	r0, [r7, #4]
    7fd4:	4b02      	ldr	r3, [pc, #8]	; (7fe0 <hri_tcc_write_PER_reg+0x20>)
    7fd6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7fd8:	bf00      	nop
    7fda:	3708      	adds	r7, #8
    7fdc:	46bd      	mov	sp, r7
    7fde:	bd80      	pop	{r7, pc}
    7fe0:	00007dbd 	.word	0x00007dbd

00007fe4 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7fe4:	b580      	push	{r7, lr}
    7fe6:	b082      	sub	sp, #8
    7fe8:	af00      	add	r7, sp, #0
    7fea:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7fec:	2180      	movs	r1, #128	; 0x80
    7fee:	6878      	ldr	r0, [r7, #4]
    7ff0:	4b03      	ldr	r3, [pc, #12]	; (8000 <hri_tcc_read_PER_reg+0x1c>)
    7ff2:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7ff4:	687b      	ldr	r3, [r7, #4]
    7ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7ff8:	4618      	mov	r0, r3
    7ffa:	3708      	adds	r7, #8
    7ffc:	46bd      	mov	sp, r7
    7ffe:	bd80      	pop	{r7, pc}
    8000:	00007dbd 	.word	0x00007dbd

00008004 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    8004:	b480      	push	{r7}
    8006:	b083      	sub	sp, #12
    8008:	af00      	add	r7, sp, #0
    800a:	6078      	str	r0, [r7, #4]
    800c:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    800e:	687b      	ldr	r3, [r7, #4]
    8010:	4a0c      	ldr	r2, [pc, #48]	; (8044 <_tcc_init_irq_param+0x40>)
    8012:	4293      	cmp	r3, r2
    8014:	d102      	bne.n	801c <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    8016:	4a0c      	ldr	r2, [pc, #48]	; (8048 <_tcc_init_irq_param+0x44>)
    8018:	683b      	ldr	r3, [r7, #0]
    801a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    801c:	687b      	ldr	r3, [r7, #4]
    801e:	4a0b      	ldr	r2, [pc, #44]	; (804c <_tcc_init_irq_param+0x48>)
    8020:	4293      	cmp	r3, r2
    8022:	d102      	bne.n	802a <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    8024:	4a0a      	ldr	r2, [pc, #40]	; (8050 <_tcc_init_irq_param+0x4c>)
    8026:	683b      	ldr	r3, [r7, #0]
    8028:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    802a:	687b      	ldr	r3, [r7, #4]
    802c:	4a09      	ldr	r2, [pc, #36]	; (8054 <_tcc_init_irq_param+0x50>)
    802e:	4293      	cmp	r3, r2
    8030:	d102      	bne.n	8038 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    8032:	4a09      	ldr	r2, [pc, #36]	; (8058 <_tcc_init_irq_param+0x54>)
    8034:	683b      	ldr	r3, [r7, #0]
    8036:	6013      	str	r3, [r2, #0]
	}
}
    8038:	bf00      	nop
    803a:	370c      	adds	r7, #12
    803c:	46bd      	mov	sp, r7
    803e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8042:	4770      	bx	lr
    8044:	41016000 	.word	0x41016000
    8048:	20000e24 	.word	0x20000e24
    804c:	41018000 	.word	0x41018000
    8050:	20000e28 	.word	0x20000e28
    8054:	42000c00 	.word	0x42000c00
    8058:	20000e2c 	.word	0x20000e2c

0000805c <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    805c:	b580      	push	{r7, lr}
    805e:	b084      	sub	sp, #16
    8060:	af00      	add	r7, sp, #0
    8062:	6078      	str	r0, [r7, #4]
    8064:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8066:	6838      	ldr	r0, [r7, #0]
    8068:	4b33      	ldr	r3, [pc, #204]	; (8138 <_tcc_timer_init+0xdc>)
    806a:	4798      	blx	r3
    806c:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    806e:	68fb      	ldr	r3, [r7, #12]
    8070:	2b00      	cmp	r3, #0
    8072:	d102      	bne.n	807a <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    8074:	f06f 0309 	mvn.w	r3, #9
    8078:	e05a      	b.n	8130 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    807a:	687b      	ldr	r3, [r7, #4]
    807c:	683a      	ldr	r2, [r7, #0]
    807e:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    8080:	2101      	movs	r1, #1
    8082:	6838      	ldr	r0, [r7, #0]
    8084:	4b2d      	ldr	r3, [pc, #180]	; (813c <_tcc_timer_init+0xe0>)
    8086:	4798      	blx	r3
    8088:	4603      	mov	r3, r0
    808a:	f083 0301 	eor.w	r3, r3, #1
    808e:	b2db      	uxtb	r3, r3
    8090:	2b00      	cmp	r3, #0
    8092:	d011      	beq.n	80b8 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    8094:	2102      	movs	r1, #2
    8096:	6838      	ldr	r0, [r7, #0]
    8098:	4b29      	ldr	r3, [pc, #164]	; (8140 <_tcc_timer_init+0xe4>)
    809a:	4798      	blx	r3
    809c:	4603      	mov	r3, r0
    809e:	2b00      	cmp	r3, #0
    80a0:	d006      	beq.n	80b0 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    80a2:	6838      	ldr	r0, [r7, #0]
    80a4:	4b27      	ldr	r3, [pc, #156]	; (8144 <_tcc_timer_init+0xe8>)
    80a6:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    80a8:	2102      	movs	r1, #2
    80aa:	6838      	ldr	r0, [r7, #0]
    80ac:	4b26      	ldr	r3, [pc, #152]	; (8148 <_tcc_timer_init+0xec>)
    80ae:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    80b0:	2101      	movs	r1, #1
    80b2:	6838      	ldr	r0, [r7, #0]
    80b4:	4b25      	ldr	r3, [pc, #148]	; (814c <_tcc_timer_init+0xf0>)
    80b6:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    80b8:	2101      	movs	r1, #1
    80ba:	6838      	ldr	r0, [r7, #0]
    80bc:	4b22      	ldr	r3, [pc, #136]	; (8148 <_tcc_timer_init+0xec>)
    80be:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    80c0:	68fb      	ldr	r3, [r7, #12]
    80c2:	689b      	ldr	r3, [r3, #8]
    80c4:	4619      	mov	r1, r3
    80c6:	6838      	ldr	r0, [r7, #0]
    80c8:	4b20      	ldr	r3, [pc, #128]	; (814c <_tcc_timer_init+0xf0>)
    80ca:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    80cc:	68fb      	ldr	r3, [r7, #12]
    80ce:	7b1b      	ldrb	r3, [r3, #12]
    80d0:	4619      	mov	r1, r3
    80d2:	6838      	ldr	r0, [r7, #0]
    80d4:	4b1e      	ldr	r3, [pc, #120]	; (8150 <_tcc_timer_init+0xf4>)
    80d6:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    80d8:	68fb      	ldr	r3, [r7, #12]
    80da:	7b5b      	ldrb	r3, [r3, #13]
    80dc:	4619      	mov	r1, r3
    80de:	6838      	ldr	r0, [r7, #0]
    80e0:	4b1c      	ldr	r3, [pc, #112]	; (8154 <_tcc_timer_init+0xf8>)
    80e2:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    80e4:	68fb      	ldr	r3, [r7, #12]
    80e6:	691b      	ldr	r3, [r3, #16]
    80e8:	4619      	mov	r1, r3
    80ea:	6838      	ldr	r0, [r7, #0]
    80ec:	4b1a      	ldr	r3, [pc, #104]	; (8158 <_tcc_timer_init+0xfc>)
    80ee:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    80f0:	68fb      	ldr	r3, [r7, #12]
    80f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    80f4:	4619      	mov	r1, r3
    80f6:	6838      	ldr	r0, [r7, #0]
    80f8:	4b18      	ldr	r3, [pc, #96]	; (815c <_tcc_timer_init+0x100>)
    80fa:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    80fc:	6838      	ldr	r0, [r7, #0]
    80fe:	4b18      	ldr	r3, [pc, #96]	; (8160 <_tcc_timer_init+0x104>)
    8100:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    8102:	6879      	ldr	r1, [r7, #4]
    8104:	6838      	ldr	r0, [r7, #0]
    8106:	4b17      	ldr	r3, [pc, #92]	; (8164 <_tcc_timer_init+0x108>)
    8108:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    810a:	68fb      	ldr	r3, [r7, #12]
    810c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8110:	4618      	mov	r0, r3
    8112:	4b15      	ldr	r3, [pc, #84]	; (8168 <_tcc_timer_init+0x10c>)
    8114:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    8116:	68fb      	ldr	r3, [r7, #12]
    8118:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    811c:	4618      	mov	r0, r3
    811e:	4b13      	ldr	r3, [pc, #76]	; (816c <_tcc_timer_init+0x110>)
    8120:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    8122:	68fb      	ldr	r3, [r7, #12]
    8124:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8128:	4618      	mov	r0, r3
    812a:	4b11      	ldr	r3, [pc, #68]	; (8170 <_tcc_timer_init+0x114>)
    812c:	4798      	blx	r3

	return ERR_NONE;
    812e:	2300      	movs	r3, #0
}
    8130:	4618      	mov	r0, r3
    8132:	3710      	adds	r7, #16
    8134:	46bd      	mov	sp, r7
    8136:	bd80      	pop	{r7, pc}
    8138:	00008341 	.word	0x00008341
    813c:	00007de1 	.word	0x00007de1
    8140:	00007f31 	.word	0x00007f31
    8144:	00007f09 	.word	0x00007f09
    8148:	00007dbd 	.word	0x00007dbd
    814c:	00007f61 	.word	0x00007f61
    8150:	00007e49 	.word	0x00007e49
    8154:	00007f85 	.word	0x00007f85
    8158:	00007fa3 	.word	0x00007fa3
    815c:	00007fc1 	.word	0x00007fc1
    8160:	00007e67 	.word	0x00007e67
    8164:	00008005 	.word	0x00008005
    8168:	00007d3d 	.word	0x00007d3d
    816c:	00007d81 	.word	0x00007d81
    8170:	00007d01 	.word	0x00007d01

00008174 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    8174:	b580      	push	{r7, lr}
    8176:	b084      	sub	sp, #16
    8178:	af00      	add	r7, sp, #0
    817a:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    817c:	687b      	ldr	r3, [r7, #4]
    817e:	68db      	ldr	r3, [r3, #12]
    8180:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8182:	68f8      	ldr	r0, [r7, #12]
    8184:	4b0a      	ldr	r3, [pc, #40]	; (81b0 <_tcc_timer_deinit+0x3c>)
    8186:	4798      	blx	r3
    8188:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    818a:	68bb      	ldr	r3, [r7, #8]
    818c:	2b00      	cmp	r3, #0
    818e:	d00b      	beq.n	81a8 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    8190:	68bb      	ldr	r3, [r7, #8]
    8192:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8196:	4618      	mov	r0, r3
    8198:	4b06      	ldr	r3, [pc, #24]	; (81b4 <_tcc_timer_deinit+0x40>)
    819a:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    819c:	68f8      	ldr	r0, [r7, #12]
    819e:	4b06      	ldr	r3, [pc, #24]	; (81b8 <_tcc_timer_deinit+0x44>)
    81a0:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    81a2:	68f8      	ldr	r0, [r7, #12]
    81a4:	4b05      	ldr	r3, [pc, #20]	; (81bc <_tcc_timer_deinit+0x48>)
    81a6:	4798      	blx	r3
	}
}
    81a8:	bf00      	nop
    81aa:	3710      	adds	r7, #16
    81ac:	46bd      	mov	sp, r7
    81ae:	bd80      	pop	{r7, pc}
    81b0:	00008341 	.word	0x00008341
    81b4:	00007d3d 	.word	0x00007d3d
    81b8:	00007f09 	.word	0x00007f09
    81bc:	00007e81 	.word	0x00007e81

000081c0 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    81c0:	b580      	push	{r7, lr}
    81c2:	b082      	sub	sp, #8
    81c4:	af00      	add	r7, sp, #0
    81c6:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    81c8:	687b      	ldr	r3, [r7, #4]
    81ca:	68db      	ldr	r3, [r3, #12]
    81cc:	4618      	mov	r0, r3
    81ce:	4b03      	ldr	r3, [pc, #12]	; (81dc <_tcc_timer_start+0x1c>)
    81d0:	4798      	blx	r3
}
    81d2:	bf00      	nop
    81d4:	3708      	adds	r7, #8
    81d6:	46bd      	mov	sp, r7
    81d8:	bd80      	pop	{r7, pc}
    81da:	bf00      	nop
    81dc:	00007ea9 	.word	0x00007ea9

000081e0 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    81e0:	b580      	push	{r7, lr}
    81e2:	b082      	sub	sp, #8
    81e4:	af00      	add	r7, sp, #0
    81e6:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    81e8:	687b      	ldr	r3, [r7, #4]
    81ea:	68db      	ldr	r3, [r3, #12]
    81ec:	4618      	mov	r0, r3
    81ee:	4b03      	ldr	r3, [pc, #12]	; (81fc <_tcc_timer_stop+0x1c>)
    81f0:	4798      	blx	r3
}
    81f2:	bf00      	nop
    81f4:	3708      	adds	r7, #8
    81f6:	46bd      	mov	sp, r7
    81f8:	bd80      	pop	{r7, pc}
    81fa:	bf00      	nop
    81fc:	00007f09 	.word	0x00007f09

00008200 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8200:	b580      	push	{r7, lr}
    8202:	b082      	sub	sp, #8
    8204:	af00      	add	r7, sp, #0
    8206:	6078      	str	r0, [r7, #4]
    8208:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    820a:	687b      	ldr	r3, [r7, #4]
    820c:	68db      	ldr	r3, [r3, #12]
    820e:	6839      	ldr	r1, [r7, #0]
    8210:	4618      	mov	r0, r3
    8212:	4b03      	ldr	r3, [pc, #12]	; (8220 <_tcc_timer_set_period+0x20>)
    8214:	4798      	blx	r3
}
    8216:	bf00      	nop
    8218:	3708      	adds	r7, #8
    821a:	46bd      	mov	sp, r7
    821c:	bd80      	pop	{r7, pc}
    821e:	bf00      	nop
    8220:	00007fc1 	.word	0x00007fc1

00008224 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    8224:	b580      	push	{r7, lr}
    8226:	b082      	sub	sp, #8
    8228:	af00      	add	r7, sp, #0
    822a:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    822c:	687b      	ldr	r3, [r7, #4]
    822e:	68db      	ldr	r3, [r3, #12]
    8230:	4618      	mov	r0, r3
    8232:	4b03      	ldr	r3, [pc, #12]	; (8240 <_tcc_timer_get_period+0x1c>)
    8234:	4798      	blx	r3
    8236:	4603      	mov	r3, r0
}
    8238:	4618      	mov	r0, r3
    823a:	3708      	adds	r7, #8
    823c:	46bd      	mov	sp, r7
    823e:	bd80      	pop	{r7, pc}
    8240:	00007fe5 	.word	0x00007fe5

00008244 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    8244:	b580      	push	{r7, lr}
    8246:	b082      	sub	sp, #8
    8248:	af00      	add	r7, sp, #0
    824a:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    824c:	687b      	ldr	r3, [r7, #4]
    824e:	68db      	ldr	r3, [r3, #12]
    8250:	4618      	mov	r0, r3
    8252:	4b03      	ldr	r3, [pc, #12]	; (8260 <_tcc_timer_is_started+0x1c>)
    8254:	4798      	blx	r3
    8256:	4603      	mov	r3, r0
}
    8258:	4618      	mov	r0, r3
    825a:	3708      	adds	r7, #8
    825c:	46bd      	mov	sp, r7
    825e:	bd80      	pop	{r7, pc}
    8260:	00007ed1 	.word	0x00007ed1

00008264 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    8264:	b480      	push	{r7}
    8266:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    8268:	4b02      	ldr	r3, [pc, #8]	; (8274 <_tcc_get_timer+0x10>)
}
    826a:	4618      	mov	r0, r3
    826c:	46bd      	mov	sp, r7
    826e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8272:	4770      	bx	lr
    8274:	200000f0 	.word	0x200000f0

00008278 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    8278:	b580      	push	{r7, lr}
    827a:	b084      	sub	sp, #16
    827c:	af00      	add	r7, sp, #0
    827e:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    8280:	687b      	ldr	r3, [r7, #4]
    8282:	68db      	ldr	r3, [r3, #12]
    8284:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8286:	68f8      	ldr	r0, [r7, #12]
    8288:	4b08      	ldr	r3, [pc, #32]	; (82ac <_tcc_timer_set_irq+0x34>)
    828a:	4798      	blx	r3
    828c:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    828e:	68bb      	ldr	r3, [r7, #8]
    8290:	2b00      	cmp	r3, #0
    8292:	d006      	beq.n	82a2 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    8294:	68bb      	ldr	r3, [r7, #8]
    8296:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    829a:	b2db      	uxtb	r3, r3
    829c:	4618      	mov	r0, r3
    829e:	4b04      	ldr	r3, [pc, #16]	; (82b0 <_tcc_timer_set_irq+0x38>)
    82a0:	4798      	blx	r3
	}
}
    82a2:	bf00      	nop
    82a4:	3710      	adds	r7, #16
    82a6:	46bd      	mov	sp, r7
    82a8:	bd80      	pop	{r7, pc}
    82aa:	bf00      	nop
    82ac:	00008341 	.word	0x00008341
    82b0:	00004c51 	.word	0x00004c51

000082b4 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    82b4:	b580      	push	{r7, lr}
    82b6:	b084      	sub	sp, #16
    82b8:	af00      	add	r7, sp, #0
    82ba:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    82bc:	687b      	ldr	r3, [r7, #4]
    82be:	68db      	ldr	r3, [r3, #12]
    82c0:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    82c2:	68f8      	ldr	r0, [r7, #12]
    82c4:	4b07      	ldr	r3, [pc, #28]	; (82e4 <tcc_interrupt_handler+0x30>)
    82c6:	4798      	blx	r3
    82c8:	4603      	mov	r3, r0
    82ca:	2b00      	cmp	r3, #0
    82cc:	d006      	beq.n	82dc <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    82ce:	68f8      	ldr	r0, [r7, #12]
    82d0:	4b05      	ldr	r3, [pc, #20]	; (82e8 <tcc_interrupt_handler+0x34>)
    82d2:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    82d4:	687b      	ldr	r3, [r7, #4]
    82d6:	681b      	ldr	r3, [r3, #0]
    82d8:	6878      	ldr	r0, [r7, #4]
    82da:	4798      	blx	r3
	}
}
    82dc:	bf00      	nop
    82de:	3710      	adds	r7, #16
    82e0:	46bd      	mov	sp, r7
    82e2:	bd80      	pop	{r7, pc}
    82e4:	00007e09 	.word	0x00007e09
    82e8:	00007e2f 	.word	0x00007e2f

000082ec <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    82ec:	b580      	push	{r7, lr}
    82ee:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    82f0:	4b03      	ldr	r3, [pc, #12]	; (8300 <TCC0_0_Handler+0x14>)
    82f2:	681b      	ldr	r3, [r3, #0]
    82f4:	4618      	mov	r0, r3
    82f6:	4b03      	ldr	r3, [pc, #12]	; (8304 <TCC0_0_Handler+0x18>)
    82f8:	4798      	blx	r3
}
    82fa:	bf00      	nop
    82fc:	bd80      	pop	{r7, pc}
    82fe:	bf00      	nop
    8300:	20000e24 	.word	0x20000e24
    8304:	000082b5 	.word	0x000082b5

00008308 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    8308:	b580      	push	{r7, lr}
    830a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    830c:	4b03      	ldr	r3, [pc, #12]	; (831c <TCC1_0_Handler+0x14>)
    830e:	681b      	ldr	r3, [r3, #0]
    8310:	4618      	mov	r0, r3
    8312:	4b03      	ldr	r3, [pc, #12]	; (8320 <TCC1_0_Handler+0x18>)
    8314:	4798      	blx	r3
}
    8316:	bf00      	nop
    8318:	bd80      	pop	{r7, pc}
    831a:	bf00      	nop
    831c:	20000e28 	.word	0x20000e28
    8320:	000082b5 	.word	0x000082b5

00008324 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    8324:	b580      	push	{r7, lr}
    8326:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    8328:	4b03      	ldr	r3, [pc, #12]	; (8338 <TCC2_0_Handler+0x14>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	4618      	mov	r0, r3
    832e:	4b03      	ldr	r3, [pc, #12]	; (833c <TCC2_0_Handler+0x18>)
    8330:	4798      	blx	r3
}
    8332:	bf00      	nop
    8334:	bd80      	pop	{r7, pc}
    8336:	bf00      	nop
    8338:	20000e2c 	.word	0x20000e2c
    833c:	000082b5 	.word	0x000082b5

00008340 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    8340:	b480      	push	{r7}
    8342:	b085      	sub	sp, #20
    8344:	af00      	add	r7, sp, #0
    8346:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8348:	2300      	movs	r3, #0
    834a:	73fb      	strb	r3, [r7, #15]
    834c:	e015      	b.n	837a <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    834e:	7bfa      	ldrb	r2, [r7, #15]
    8350:	490f      	ldr	r1, [pc, #60]	; (8390 <_get_tcc_cfg+0x50>)
    8352:	4613      	mov	r3, r2
    8354:	005b      	lsls	r3, r3, #1
    8356:	4413      	add	r3, r2
    8358:	011b      	lsls	r3, r3, #4
    835a:	440b      	add	r3, r1
    835c:	681a      	ldr	r2, [r3, #0]
    835e:	687b      	ldr	r3, [r7, #4]
    8360:	429a      	cmp	r2, r3
    8362:	d107      	bne.n	8374 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    8364:	7bfa      	ldrb	r2, [r7, #15]
    8366:	4613      	mov	r3, r2
    8368:	005b      	lsls	r3, r3, #1
    836a:	4413      	add	r3, r2
    836c:	011b      	lsls	r3, r3, #4
    836e:	4a08      	ldr	r2, [pc, #32]	; (8390 <_get_tcc_cfg+0x50>)
    8370:	4413      	add	r3, r2
    8372:	e006      	b.n	8382 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8374:	7bfb      	ldrb	r3, [r7, #15]
    8376:	3301      	adds	r3, #1
    8378:	73fb      	strb	r3, [r7, #15]
    837a:	7bfb      	ldrb	r3, [r7, #15]
    837c:	2b02      	cmp	r3, #2
    837e:	d9e6      	bls.n	834e <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    8380:	2300      	movs	r3, #0
}
    8382:	4618      	mov	r0, r3
    8384:	3714      	adds	r7, #20
    8386:	46bd      	mov	sp, r7
    8388:	f85d 7b04 	ldr.w	r7, [sp], #4
    838c:	4770      	bx	lr
    838e:	bf00      	nop
    8390:	20000060 	.word	0x20000060

00008394 <__NVIC_EnableIRQ>:
{
    8394:	b480      	push	{r7}
    8396:	b083      	sub	sp, #12
    8398:	af00      	add	r7, sp, #0
    839a:	4603      	mov	r3, r0
    839c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    839e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83a2:	2b00      	cmp	r3, #0
    83a4:	db0b      	blt.n	83be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    83a6:	4909      	ldr	r1, [pc, #36]	; (83cc <__NVIC_EnableIRQ+0x38>)
    83a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83ac:	095b      	lsrs	r3, r3, #5
    83ae:	88fa      	ldrh	r2, [r7, #6]
    83b0:	f002 021f 	and.w	r2, r2, #31
    83b4:	2001      	movs	r0, #1
    83b6:	fa00 f202 	lsl.w	r2, r0, r2
    83ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    83be:	bf00      	nop
    83c0:	370c      	adds	r7, #12
    83c2:	46bd      	mov	sp, r7
    83c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    83c8:	4770      	bx	lr
    83ca:	bf00      	nop
    83cc:	e000e100 	.word	0xe000e100

000083d0 <__NVIC_DisableIRQ>:
{
    83d0:	b480      	push	{r7}
    83d2:	b083      	sub	sp, #12
    83d4:	af00      	add	r7, sp, #0
    83d6:	4603      	mov	r3, r0
    83d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    83da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83de:	2b00      	cmp	r3, #0
    83e0:	db10      	blt.n	8404 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    83e2:	490b      	ldr	r1, [pc, #44]	; (8410 <__NVIC_DisableIRQ+0x40>)
    83e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83e8:	095b      	lsrs	r3, r3, #5
    83ea:	88fa      	ldrh	r2, [r7, #6]
    83ec:	f002 021f 	and.w	r2, r2, #31
    83f0:	2001      	movs	r0, #1
    83f2:	fa00 f202 	lsl.w	r2, r0, r2
    83f6:	3320      	adds	r3, #32
    83f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    83fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8400:	f3bf 8f6f 	isb	sy
}
    8404:	bf00      	nop
    8406:	370c      	adds	r7, #12
    8408:	46bd      	mov	sp, r7
    840a:	f85d 7b04 	ldr.w	r7, [sp], #4
    840e:	4770      	bx	lr
    8410:	e000e100 	.word	0xe000e100

00008414 <__NVIC_ClearPendingIRQ>:
{
    8414:	b480      	push	{r7}
    8416:	b083      	sub	sp, #12
    8418:	af00      	add	r7, sp, #0
    841a:	4603      	mov	r3, r0
    841c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    841e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8422:	2b00      	cmp	r3, #0
    8424:	db0c      	blt.n	8440 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8426:	4909      	ldr	r1, [pc, #36]	; (844c <__NVIC_ClearPendingIRQ+0x38>)
    8428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    842c:	095b      	lsrs	r3, r3, #5
    842e:	88fa      	ldrh	r2, [r7, #6]
    8430:	f002 021f 	and.w	r2, r2, #31
    8434:	2001      	movs	r0, #1
    8436:	fa00 f202 	lsl.w	r2, r0, r2
    843a:	3360      	adds	r3, #96	; 0x60
    843c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8440:	bf00      	nop
    8442:	370c      	adds	r7, #12
    8444:	46bd      	mov	sp, r7
    8446:	f85d 7b04 	ldr.w	r7, [sp], #4
    844a:	4770      	bx	lr
    844c:	e000e100 	.word	0xe000e100

00008450 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8450:	b480      	push	{r7}
    8452:	b083      	sub	sp, #12
    8454:	af00      	add	r7, sp, #0
    8456:	6078      	str	r0, [r7, #4]
    8458:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    845a:	bf00      	nop
    845c:	687b      	ldr	r3, [r7, #4]
    845e:	691a      	ldr	r2, [r3, #16]
    8460:	683b      	ldr	r3, [r7, #0]
    8462:	4013      	ands	r3, r2
    8464:	2b00      	cmp	r3, #0
    8466:	d1f9      	bne.n	845c <hri_tc_wait_for_sync+0xc>
	};
}
    8468:	bf00      	nop
    846a:	370c      	adds	r7, #12
    846c:	46bd      	mov	sp, r7
    846e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8472:	4770      	bx	lr

00008474 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8474:	b480      	push	{r7}
    8476:	b083      	sub	sp, #12
    8478:	af00      	add	r7, sp, #0
    847a:	6078      	str	r0, [r7, #4]
    847c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    847e:	687b      	ldr	r3, [r7, #4]
    8480:	691a      	ldr	r2, [r3, #16]
    8482:	683b      	ldr	r3, [r7, #0]
    8484:	4013      	ands	r3, r2
    8486:	2b00      	cmp	r3, #0
    8488:	bf14      	ite	ne
    848a:	2301      	movne	r3, #1
    848c:	2300      	moveq	r3, #0
    848e:	b2db      	uxtb	r3, r3
}
    8490:	4618      	mov	r0, r3
    8492:	370c      	adds	r7, #12
    8494:	46bd      	mov	sp, r7
    8496:	f85d 7b04 	ldr.w	r7, [sp], #4
    849a:	4770      	bx	lr

0000849c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    849c:	b480      	push	{r7}
    849e:	b083      	sub	sp, #12
    84a0:	af00      	add	r7, sp, #0
    84a2:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    84a4:	687b      	ldr	r3, [r7, #4]
    84a6:	7a9b      	ldrb	r3, [r3, #10]
    84a8:	b2db      	uxtb	r3, r3
    84aa:	f003 0301 	and.w	r3, r3, #1
    84ae:	2b00      	cmp	r3, #0
    84b0:	bf14      	ite	ne
    84b2:	2301      	movne	r3, #1
    84b4:	2300      	moveq	r3, #0
    84b6:	b2db      	uxtb	r3, r3
}
    84b8:	4618      	mov	r0, r3
    84ba:	370c      	adds	r7, #12
    84bc:	46bd      	mov	sp, r7
    84be:	f85d 7b04 	ldr.w	r7, [sp], #4
    84c2:	4770      	bx	lr

000084c4 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    84c4:	b480      	push	{r7}
    84c6:	b083      	sub	sp, #12
    84c8:	af00      	add	r7, sp, #0
    84ca:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    84cc:	687b      	ldr	r3, [r7, #4]
    84ce:	2201      	movs	r2, #1
    84d0:	729a      	strb	r2, [r3, #10]
}
    84d2:	bf00      	nop
    84d4:	370c      	adds	r7, #12
    84d6:	46bd      	mov	sp, r7
    84d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    84dc:	4770      	bx	lr

000084de <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    84de:	b480      	push	{r7}
    84e0:	b083      	sub	sp, #12
    84e2:	af00      	add	r7, sp, #0
    84e4:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    84e6:	687b      	ldr	r3, [r7, #4]
    84e8:	2202      	movs	r2, #2
    84ea:	729a      	strb	r2, [r3, #10]
}
    84ec:	bf00      	nop
    84ee:	370c      	adds	r7, #12
    84f0:	46bd      	mov	sp, r7
    84f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    84f6:	4770      	bx	lr

000084f8 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    84f8:	b480      	push	{r7}
    84fa:	b083      	sub	sp, #12
    84fc:	af00      	add	r7, sp, #0
    84fe:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    8500:	687b      	ldr	r3, [r7, #4]
    8502:	2201      	movs	r2, #1
    8504:	725a      	strb	r2, [r3, #9]
}
    8506:	bf00      	nop
    8508:	370c      	adds	r7, #12
    850a:	46bd      	mov	sp, r7
    850c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8510:	4770      	bx	lr

00008512 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    8512:	b480      	push	{r7}
    8514:	b083      	sub	sp, #12
    8516:	af00      	add	r7, sp, #0
    8518:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    851a:	687b      	ldr	r3, [r7, #4]
    851c:	7a5b      	ldrb	r3, [r3, #9]
    851e:	b2db      	uxtb	r3, r3
    8520:	085b      	lsrs	r3, r3, #1
    8522:	f003 0301 	and.w	r3, r3, #1
    8526:	2b00      	cmp	r3, #0
    8528:	bf14      	ite	ne
    852a:	2301      	movne	r3, #1
    852c:	2300      	moveq	r3, #0
    852e:	b2db      	uxtb	r3, r3
}
    8530:	4618      	mov	r0, r3
    8532:	370c      	adds	r7, #12
    8534:	46bd      	mov	sp, r7
    8536:	f85d 7b04 	ldr.w	r7, [sp], #4
    853a:	4770      	bx	lr

0000853c <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    853c:	b580      	push	{r7, lr}
    853e:	b082      	sub	sp, #8
    8540:	af00      	add	r7, sp, #0
    8542:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8544:	687b      	ldr	r3, [r7, #4]
    8546:	681b      	ldr	r3, [r3, #0]
    8548:	f043 0201 	orr.w	r2, r3, #1
    854c:	687b      	ldr	r3, [r7, #4]
    854e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8550:	2101      	movs	r1, #1
    8552:	6878      	ldr	r0, [r7, #4]
    8554:	4b02      	ldr	r3, [pc, #8]	; (8560 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    8556:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8558:	bf00      	nop
    855a:	3708      	adds	r7, #8
    855c:	46bd      	mov	sp, r7
    855e:	bd80      	pop	{r7, pc}
    8560:	00008451 	.word	0x00008451

00008564 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8564:	b580      	push	{r7, lr}
    8566:	b082      	sub	sp, #8
    8568:	af00      	add	r7, sp, #0
    856a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	681b      	ldr	r3, [r3, #0]
    8570:	f043 0202 	orr.w	r2, r3, #2
    8574:	687b      	ldr	r3, [r7, #4]
    8576:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8578:	2103      	movs	r1, #3
    857a:	6878      	ldr	r0, [r7, #4]
    857c:	4b02      	ldr	r3, [pc, #8]	; (8588 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    857e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8580:	bf00      	nop
    8582:	3708      	adds	r7, #8
    8584:	46bd      	mov	sp, r7
    8586:	bd80      	pop	{r7, pc}
    8588:	00008451 	.word	0x00008451

0000858c <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    858c:	b580      	push	{r7, lr}
    858e:	b084      	sub	sp, #16
    8590:	af00      	add	r7, sp, #0
    8592:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8594:	2103      	movs	r1, #3
    8596:	6878      	ldr	r0, [r7, #4]
    8598:	4b09      	ldr	r3, [pc, #36]	; (85c0 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    859a:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    859c:	687b      	ldr	r3, [r7, #4]
    859e:	681b      	ldr	r3, [r3, #0]
    85a0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    85a2:	68fb      	ldr	r3, [r7, #12]
    85a4:	085b      	lsrs	r3, r3, #1
    85a6:	f003 0301 	and.w	r3, r3, #1
    85aa:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    85ac:	68fb      	ldr	r3, [r7, #12]
    85ae:	2b00      	cmp	r3, #0
    85b0:	bf14      	ite	ne
    85b2:	2301      	movne	r3, #1
    85b4:	2300      	moveq	r3, #0
    85b6:	b2db      	uxtb	r3, r3
}
    85b8:	4618      	mov	r0, r3
    85ba:	3710      	adds	r7, #16
    85bc:	46bd      	mov	sp, r7
    85be:	bd80      	pop	{r7, pc}
    85c0:	00008451 	.word	0x00008451

000085c4 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    85c4:	b580      	push	{r7, lr}
    85c6:	b082      	sub	sp, #8
    85c8:	af00      	add	r7, sp, #0
    85ca:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    85cc:	687b      	ldr	r3, [r7, #4]
    85ce:	681b      	ldr	r3, [r3, #0]
    85d0:	f023 0202 	bic.w	r2, r3, #2
    85d4:	687b      	ldr	r3, [r7, #4]
    85d6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    85d8:	2103      	movs	r1, #3
    85da:	6878      	ldr	r0, [r7, #4]
    85dc:	4b02      	ldr	r3, [pc, #8]	; (85e8 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    85de:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    85e0:	bf00      	nop
    85e2:	3708      	adds	r7, #8
    85e4:	46bd      	mov	sp, r7
    85e6:	bd80      	pop	{r7, pc}
    85e8:	00008451 	.word	0x00008451

000085ec <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    85ec:	b480      	push	{r7}
    85ee:	b085      	sub	sp, #20
    85f0:	af00      	add	r7, sp, #0
    85f2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    85f4:	687b      	ldr	r3, [r7, #4]
    85f6:	681b      	ldr	r3, [r3, #0]
    85f8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    85fa:	68fb      	ldr	r3, [r7, #12]
    85fc:	089b      	lsrs	r3, r3, #2
    85fe:	f003 0303 	and.w	r3, r3, #3
    8602:	60fb      	str	r3, [r7, #12]
	return tmp;
    8604:	68fb      	ldr	r3, [r7, #12]
}
    8606:	4618      	mov	r0, r3
    8608:	3714      	adds	r7, #20
    860a:	46bd      	mov	sp, r7
    860c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8610:	4770      	bx	lr
	...

00008614 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    8614:	b580      	push	{r7, lr}
    8616:	b084      	sub	sp, #16
    8618:	af00      	add	r7, sp, #0
    861a:	6078      	str	r0, [r7, #4]
    861c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    861e:	2103      	movs	r1, #3
    8620:	6878      	ldr	r0, [r7, #4]
    8622:	4b07      	ldr	r3, [pc, #28]	; (8640 <hri_tc_get_CTRLA_reg+0x2c>)
    8624:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8626:	687b      	ldr	r3, [r7, #4]
    8628:	681b      	ldr	r3, [r3, #0]
    862a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    862c:	68fa      	ldr	r2, [r7, #12]
    862e:	683b      	ldr	r3, [r7, #0]
    8630:	4013      	ands	r3, r2
    8632:	60fb      	str	r3, [r7, #12]
	return tmp;
    8634:	68fb      	ldr	r3, [r7, #12]
}
    8636:	4618      	mov	r0, r3
    8638:	3710      	adds	r7, #16
    863a:	46bd      	mov	sp, r7
    863c:	bd80      	pop	{r7, pc}
    863e:	bf00      	nop
    8640:	00008451 	.word	0x00008451

00008644 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8644:	b580      	push	{r7, lr}
    8646:	b082      	sub	sp, #8
    8648:	af00      	add	r7, sp, #0
    864a:	6078      	str	r0, [r7, #4]
    864c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    864e:	687b      	ldr	r3, [r7, #4]
    8650:	683a      	ldr	r2, [r7, #0]
    8652:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8654:	2103      	movs	r1, #3
    8656:	6878      	ldr	r0, [r7, #4]
    8658:	4b02      	ldr	r3, [pc, #8]	; (8664 <hri_tc_write_CTRLA_reg+0x20>)
    865a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    865c:	bf00      	nop
    865e:	3708      	adds	r7, #8
    8660:	46bd      	mov	sp, r7
    8662:	bd80      	pop	{r7, pc}
    8664:	00008451 	.word	0x00008451

00008668 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8668:	b480      	push	{r7}
    866a:	b083      	sub	sp, #12
    866c:	af00      	add	r7, sp, #0
    866e:	6078      	str	r0, [r7, #4]
    8670:	460b      	mov	r3, r1
    8672:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8674:	687b      	ldr	r3, [r7, #4]
    8676:	887a      	ldrh	r2, [r7, #2]
    8678:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    867a:	bf00      	nop
    867c:	370c      	adds	r7, #12
    867e:	46bd      	mov	sp, r7
    8680:	f85d 7b04 	ldr.w	r7, [sp], #4
    8684:	4770      	bx	lr

00008686 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    8686:	b480      	push	{r7}
    8688:	b083      	sub	sp, #12
    868a:	af00      	add	r7, sp, #0
    868c:	6078      	str	r0, [r7, #4]
    868e:	460b      	mov	r3, r1
    8690:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    8692:	687b      	ldr	r3, [r7, #4]
    8694:	78fa      	ldrb	r2, [r7, #3]
    8696:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    8698:	bf00      	nop
    869a:	370c      	adds	r7, #12
    869c:	46bd      	mov	sp, r7
    869e:	f85d 7b04 	ldr.w	r7, [sp], #4
    86a2:	4770      	bx	lr

000086a4 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    86a4:	b480      	push	{r7}
    86a6:	b083      	sub	sp, #12
    86a8:	af00      	add	r7, sp, #0
    86aa:	6078      	str	r0, [r7, #4]
    86ac:	460b      	mov	r3, r1
    86ae:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    86b0:	687b      	ldr	r3, [r7, #4]
    86b2:	78fa      	ldrb	r2, [r7, #3]
    86b4:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    86b6:	bf00      	nop
    86b8:	370c      	adds	r7, #12
    86ba:	46bd      	mov	sp, r7
    86bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    86c0:	4770      	bx	lr
	...

000086c4 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    86c4:	b580      	push	{r7, lr}
    86c6:	b082      	sub	sp, #8
    86c8:	af00      	add	r7, sp, #0
    86ca:	6078      	str	r0, [r7, #4]
    86cc:	460b      	mov	r3, r1
    86ce:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    86d0:	687b      	ldr	r3, [r7, #4]
    86d2:	78fa      	ldrb	r2, [r7, #3]
    86d4:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    86d6:	2120      	movs	r1, #32
    86d8:	6878      	ldr	r0, [r7, #4]
    86da:	4b03      	ldr	r3, [pc, #12]	; (86e8 <hri_tccount8_write_PER_reg+0x24>)
    86dc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    86de:	bf00      	nop
    86e0:	3708      	adds	r7, #8
    86e2:	46bd      	mov	sp, r7
    86e4:	bd80      	pop	{r7, pc}
    86e6:	bf00      	nop
    86e8:	00008451 	.word	0x00008451

000086ec <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    86ec:	b580      	push	{r7, lr}
    86ee:	b082      	sub	sp, #8
    86f0:	af00      	add	r7, sp, #0
    86f2:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    86f4:	2120      	movs	r1, #32
    86f6:	6878      	ldr	r0, [r7, #4]
    86f8:	4b04      	ldr	r3, [pc, #16]	; (870c <hri_tccount8_read_PER_reg+0x20>)
    86fa:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    86fc:	687b      	ldr	r3, [r7, #4]
    86fe:	7edb      	ldrb	r3, [r3, #27]
    8700:	b2db      	uxtb	r3, r3
}
    8702:	4618      	mov	r0, r3
    8704:	3708      	adds	r7, #8
    8706:	46bd      	mov	sp, r7
    8708:	bd80      	pop	{r7, pc}
    870a:	bf00      	nop
    870c:	00008451 	.word	0x00008451

00008710 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    8710:	b580      	push	{r7, lr}
    8712:	b082      	sub	sp, #8
    8714:	af00      	add	r7, sp, #0
    8716:	6078      	str	r0, [r7, #4]
    8718:	460b      	mov	r3, r1
    871a:	70fb      	strb	r3, [r7, #3]
    871c:	4613      	mov	r3, r2
    871e:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    8720:	78fb      	ldrb	r3, [r7, #3]
    8722:	687a      	ldr	r2, [r7, #4]
    8724:	4413      	add	r3, r2
    8726:	78ba      	ldrb	r2, [r7, #2]
    8728:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    872a:	21c0      	movs	r1, #192	; 0xc0
    872c:	6878      	ldr	r0, [r7, #4]
    872e:	4b03      	ldr	r3, [pc, #12]	; (873c <hri_tccount8_write_CC_reg+0x2c>)
    8730:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8732:	bf00      	nop
    8734:	3708      	adds	r7, #8
    8736:	46bd      	mov	sp, r7
    8738:	bd80      	pop	{r7, pc}
    873a:	bf00      	nop
    873c:	00008451 	.word	0x00008451

00008740 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    8740:	b580      	push	{r7, lr}
    8742:	b082      	sub	sp, #8
    8744:	af00      	add	r7, sp, #0
    8746:	6078      	str	r0, [r7, #4]
    8748:	460b      	mov	r3, r1
    874a:	70fb      	strb	r3, [r7, #3]
    874c:	4613      	mov	r3, r2
    874e:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8750:	78fb      	ldrb	r3, [r7, #3]
    8752:	687a      	ldr	r2, [r7, #4]
    8754:	330c      	adds	r3, #12
    8756:	005b      	lsls	r3, r3, #1
    8758:	4413      	add	r3, r2
    875a:	883a      	ldrh	r2, [r7, #0]
    875c:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    875e:	21c0      	movs	r1, #192	; 0xc0
    8760:	6878      	ldr	r0, [r7, #4]
    8762:	4b03      	ldr	r3, [pc, #12]	; (8770 <hri_tccount16_write_CC_reg+0x30>)
    8764:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8766:	bf00      	nop
    8768:	3708      	adds	r7, #8
    876a:	46bd      	mov	sp, r7
    876c:	bd80      	pop	{r7, pc}
    876e:	bf00      	nop
    8770:	00008451 	.word	0x00008451

00008774 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8774:	b580      	push	{r7, lr}
    8776:	b082      	sub	sp, #8
    8778:	af00      	add	r7, sp, #0
    877a:	6078      	str	r0, [r7, #4]
    877c:	460b      	mov	r3, r1
    877e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8780:	21c0      	movs	r1, #192	; 0xc0
    8782:	6878      	ldr	r0, [r7, #4]
    8784:	4b06      	ldr	r3, [pc, #24]	; (87a0 <hri_tccount16_read_CC_reg+0x2c>)
    8786:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8788:	78fb      	ldrb	r3, [r7, #3]
    878a:	687a      	ldr	r2, [r7, #4]
    878c:	330c      	adds	r3, #12
    878e:	005b      	lsls	r3, r3, #1
    8790:	4413      	add	r3, r2
    8792:	889b      	ldrh	r3, [r3, #4]
    8794:	b29b      	uxth	r3, r3
}
    8796:	4618      	mov	r0, r3
    8798:	3708      	adds	r7, #8
    879a:	46bd      	mov	sp, r7
    879c:	bd80      	pop	{r7, pc}
    879e:	bf00      	nop
    87a0:	00008451 	.word	0x00008451

000087a4 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    87a4:	b580      	push	{r7, lr}
    87a6:	b084      	sub	sp, #16
    87a8:	af00      	add	r7, sp, #0
    87aa:	60f8      	str	r0, [r7, #12]
    87ac:	460b      	mov	r3, r1
    87ae:	607a      	str	r2, [r7, #4]
    87b0:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    87b2:	7afb      	ldrb	r3, [r7, #11]
    87b4:	68fa      	ldr	r2, [r7, #12]
    87b6:	3306      	adds	r3, #6
    87b8:	009b      	lsls	r3, r3, #2
    87ba:	4413      	add	r3, r2
    87bc:	687a      	ldr	r2, [r7, #4]
    87be:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    87c0:	21c0      	movs	r1, #192	; 0xc0
    87c2:	68f8      	ldr	r0, [r7, #12]
    87c4:	4b02      	ldr	r3, [pc, #8]	; (87d0 <hri_tccount32_write_CC_reg+0x2c>)
    87c6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    87c8:	bf00      	nop
    87ca:	3710      	adds	r7, #16
    87cc:	46bd      	mov	sp, r7
    87ce:	bd80      	pop	{r7, pc}
    87d0:	00008451 	.word	0x00008451

000087d4 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    87d4:	b580      	push	{r7, lr}
    87d6:	b082      	sub	sp, #8
    87d8:	af00      	add	r7, sp, #0
    87da:	6078      	str	r0, [r7, #4]
    87dc:	460b      	mov	r3, r1
    87de:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    87e0:	21c0      	movs	r1, #192	; 0xc0
    87e2:	6878      	ldr	r0, [r7, #4]
    87e4:	4b05      	ldr	r3, [pc, #20]	; (87fc <hri_tccount32_read_CC_reg+0x28>)
    87e6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    87e8:	78fb      	ldrb	r3, [r7, #3]
    87ea:	687a      	ldr	r2, [r7, #4]
    87ec:	3306      	adds	r3, #6
    87ee:	009b      	lsls	r3, r3, #2
    87f0:	4413      	add	r3, r2
    87f2:	685b      	ldr	r3, [r3, #4]
}
    87f4:	4618      	mov	r0, r3
    87f6:	3708      	adds	r7, #8
    87f8:	46bd      	mov	sp, r7
    87fa:	bd80      	pop	{r7, pc}
    87fc:	00008451 	.word	0x00008451

00008800 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    8800:	b580      	push	{r7, lr}
    8802:	b084      	sub	sp, #16
    8804:	af00      	add	r7, sp, #0
    8806:	6078      	str	r0, [r7, #4]
    8808:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    880a:	6838      	ldr	r0, [r7, #0]
    880c:	4b93      	ldr	r3, [pc, #588]	; (8a5c <_tc_timer_init+0x25c>)
    880e:	4798      	blx	r3
    8810:	4603      	mov	r3, r0
    8812:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    8814:	687b      	ldr	r3, [r7, #4]
    8816:	683a      	ldr	r2, [r7, #0]
    8818:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    881a:	22a4      	movs	r2, #164	; 0xa4
    881c:	4990      	ldr	r1, [pc, #576]	; (8a60 <_tc_timer_init+0x260>)
    881e:	2001      	movs	r0, #1
    8820:	4b90      	ldr	r3, [pc, #576]	; (8a64 <_tc_timer_init+0x264>)
    8822:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8824:	2101      	movs	r1, #1
    8826:	6838      	ldr	r0, [r7, #0]
    8828:	4b8f      	ldr	r3, [pc, #572]	; (8a68 <_tc_timer_init+0x268>)
    882a:	4798      	blx	r3
    882c:	4603      	mov	r3, r0
    882e:	f083 0301 	eor.w	r3, r3, #1
    8832:	b2db      	uxtb	r3, r3
    8834:	2b00      	cmp	r3, #0
    8836:	d011      	beq.n	885c <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8838:	2102      	movs	r1, #2
    883a:	6838      	ldr	r0, [r7, #0]
    883c:	4b8b      	ldr	r3, [pc, #556]	; (8a6c <_tc_timer_init+0x26c>)
    883e:	4798      	blx	r3
    8840:	4603      	mov	r3, r0
    8842:	2b00      	cmp	r3, #0
    8844:	d006      	beq.n	8854 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8846:	6838      	ldr	r0, [r7, #0]
    8848:	4b89      	ldr	r3, [pc, #548]	; (8a70 <_tc_timer_init+0x270>)
    884a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    884c:	2102      	movs	r1, #2
    884e:	6838      	ldr	r0, [r7, #0]
    8850:	4b88      	ldr	r3, [pc, #544]	; (8a74 <_tc_timer_init+0x274>)
    8852:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8854:	2101      	movs	r1, #1
    8856:	6838      	ldr	r0, [r7, #0]
    8858:	4b87      	ldr	r3, [pc, #540]	; (8a78 <_tc_timer_init+0x278>)
    885a:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    885c:	2101      	movs	r1, #1
    885e:	6838      	ldr	r0, [r7, #0]
    8860:	4b84      	ldr	r3, [pc, #528]	; (8a74 <_tc_timer_init+0x274>)
    8862:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8864:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8868:	4984      	ldr	r1, [pc, #528]	; (8a7c <_tc_timer_init+0x27c>)
    886a:	4613      	mov	r3, r2
    886c:	009b      	lsls	r3, r3, #2
    886e:	4413      	add	r3, r2
    8870:	009b      	lsls	r3, r3, #2
    8872:	440b      	add	r3, r1
    8874:	3304      	adds	r3, #4
    8876:	681b      	ldr	r3, [r3, #0]
    8878:	4619      	mov	r1, r3
    887a:	6838      	ldr	r0, [r7, #0]
    887c:	4b7e      	ldr	r3, [pc, #504]	; (8a78 <_tc_timer_init+0x278>)
    887e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8880:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8884:	497d      	ldr	r1, [pc, #500]	; (8a7c <_tc_timer_init+0x27c>)
    8886:	4613      	mov	r3, r2
    8888:	009b      	lsls	r3, r3, #2
    888a:	4413      	add	r3, r2
    888c:	009b      	lsls	r3, r3, #2
    888e:	440b      	add	r3, r1
    8890:	330a      	adds	r3, #10
    8892:	781b      	ldrb	r3, [r3, #0]
    8894:	4619      	mov	r1, r3
    8896:	6838      	ldr	r0, [r7, #0]
    8898:	4b79      	ldr	r3, [pc, #484]	; (8a80 <_tc_timer_init+0x280>)
    889a:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    889c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88a0:	4976      	ldr	r1, [pc, #472]	; (8a7c <_tc_timer_init+0x27c>)
    88a2:	4613      	mov	r3, r2
    88a4:	009b      	lsls	r3, r3, #2
    88a6:	4413      	add	r3, r2
    88a8:	009b      	lsls	r3, r3, #2
    88aa:	440b      	add	r3, r1
    88ac:	3308      	adds	r3, #8
    88ae:	881b      	ldrh	r3, [r3, #0]
    88b0:	4619      	mov	r1, r3
    88b2:	6838      	ldr	r0, [r7, #0]
    88b4:	4b73      	ldr	r3, [pc, #460]	; (8a84 <_tc_timer_init+0x284>)
    88b6:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    88b8:	2101      	movs	r1, #1
    88ba:	6838      	ldr	r0, [r7, #0]
    88bc:	4b72      	ldr	r3, [pc, #456]	; (8a88 <_tc_timer_init+0x288>)
    88be:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    88c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88c4:	496d      	ldr	r1, [pc, #436]	; (8a7c <_tc_timer_init+0x27c>)
    88c6:	4613      	mov	r3, r2
    88c8:	009b      	lsls	r3, r3, #2
    88ca:	4413      	add	r3, r2
    88cc:	009b      	lsls	r3, r3, #2
    88ce:	440b      	add	r3, r1
    88d0:	3304      	adds	r3, #4
    88d2:	681b      	ldr	r3, [r3, #0]
    88d4:	f003 030c 	and.w	r3, r3, #12
    88d8:	2b08      	cmp	r3, #8
    88da:	d11e      	bne.n	891a <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    88dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88e0:	4966      	ldr	r1, [pc, #408]	; (8a7c <_tc_timer_init+0x27c>)
    88e2:	4613      	mov	r3, r2
    88e4:	009b      	lsls	r3, r3, #2
    88e6:	4413      	add	r3, r2
    88e8:	009b      	lsls	r3, r3, #2
    88ea:	440b      	add	r3, r1
    88ec:	330c      	adds	r3, #12
    88ee:	681b      	ldr	r3, [r3, #0]
    88f0:	461a      	mov	r2, r3
    88f2:	2100      	movs	r1, #0
    88f4:	6838      	ldr	r0, [r7, #0]
    88f6:	4b65      	ldr	r3, [pc, #404]	; (8a8c <_tc_timer_init+0x28c>)
    88f8:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    88fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88fe:	495f      	ldr	r1, [pc, #380]	; (8a7c <_tc_timer_init+0x27c>)
    8900:	4613      	mov	r3, r2
    8902:	009b      	lsls	r3, r3, #2
    8904:	4413      	add	r3, r2
    8906:	009b      	lsls	r3, r3, #2
    8908:	440b      	add	r3, r1
    890a:	3310      	adds	r3, #16
    890c:	681b      	ldr	r3, [r3, #0]
    890e:	461a      	mov	r2, r3
    8910:	2101      	movs	r1, #1
    8912:	6838      	ldr	r0, [r7, #0]
    8914:	4b5d      	ldr	r3, [pc, #372]	; (8a8c <_tc_timer_init+0x28c>)
    8916:	4798      	blx	r3
    8918:	e06a      	b.n	89f0 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    891a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    891e:	4957      	ldr	r1, [pc, #348]	; (8a7c <_tc_timer_init+0x27c>)
    8920:	4613      	mov	r3, r2
    8922:	009b      	lsls	r3, r3, #2
    8924:	4413      	add	r3, r2
    8926:	009b      	lsls	r3, r3, #2
    8928:	440b      	add	r3, r1
    892a:	3304      	adds	r3, #4
    892c:	681b      	ldr	r3, [r3, #0]
    892e:	f003 030c 	and.w	r3, r3, #12
    8932:	2b00      	cmp	r3, #0
    8934:	d120      	bne.n	8978 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8936:	f997 200f 	ldrsb.w	r2, [r7, #15]
    893a:	4950      	ldr	r1, [pc, #320]	; (8a7c <_tc_timer_init+0x27c>)
    893c:	4613      	mov	r3, r2
    893e:	009b      	lsls	r3, r3, #2
    8940:	4413      	add	r3, r2
    8942:	009b      	lsls	r3, r3, #2
    8944:	440b      	add	r3, r1
    8946:	330c      	adds	r3, #12
    8948:	681b      	ldr	r3, [r3, #0]
    894a:	b29b      	uxth	r3, r3
    894c:	461a      	mov	r2, r3
    894e:	2100      	movs	r1, #0
    8950:	6838      	ldr	r0, [r7, #0]
    8952:	4b4f      	ldr	r3, [pc, #316]	; (8a90 <_tc_timer_init+0x290>)
    8954:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8956:	f997 200f 	ldrsb.w	r2, [r7, #15]
    895a:	4948      	ldr	r1, [pc, #288]	; (8a7c <_tc_timer_init+0x27c>)
    895c:	4613      	mov	r3, r2
    895e:	009b      	lsls	r3, r3, #2
    8960:	4413      	add	r3, r2
    8962:	009b      	lsls	r3, r3, #2
    8964:	440b      	add	r3, r1
    8966:	3310      	adds	r3, #16
    8968:	681b      	ldr	r3, [r3, #0]
    896a:	b29b      	uxth	r3, r3
    896c:	461a      	mov	r2, r3
    896e:	2101      	movs	r1, #1
    8970:	6838      	ldr	r0, [r7, #0]
    8972:	4b47      	ldr	r3, [pc, #284]	; (8a90 <_tc_timer_init+0x290>)
    8974:	4798      	blx	r3
    8976:	e03b      	b.n	89f0 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8978:	f997 200f 	ldrsb.w	r2, [r7, #15]
    897c:	493f      	ldr	r1, [pc, #252]	; (8a7c <_tc_timer_init+0x27c>)
    897e:	4613      	mov	r3, r2
    8980:	009b      	lsls	r3, r3, #2
    8982:	4413      	add	r3, r2
    8984:	009b      	lsls	r3, r3, #2
    8986:	440b      	add	r3, r1
    8988:	3304      	adds	r3, #4
    898a:	681b      	ldr	r3, [r3, #0]
    898c:	f003 030c 	and.w	r3, r3, #12
    8990:	2b04      	cmp	r3, #4
    8992:	d12d      	bne.n	89f0 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8994:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8998:	4938      	ldr	r1, [pc, #224]	; (8a7c <_tc_timer_init+0x27c>)
    899a:	4613      	mov	r3, r2
    899c:	009b      	lsls	r3, r3, #2
    899e:	4413      	add	r3, r2
    89a0:	009b      	lsls	r3, r3, #2
    89a2:	440b      	add	r3, r1
    89a4:	330c      	adds	r3, #12
    89a6:	681b      	ldr	r3, [r3, #0]
    89a8:	b2db      	uxtb	r3, r3
    89aa:	461a      	mov	r2, r3
    89ac:	2100      	movs	r1, #0
    89ae:	6838      	ldr	r0, [r7, #0]
    89b0:	4b38      	ldr	r3, [pc, #224]	; (8a94 <_tc_timer_init+0x294>)
    89b2:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    89b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89b8:	4930      	ldr	r1, [pc, #192]	; (8a7c <_tc_timer_init+0x27c>)
    89ba:	4613      	mov	r3, r2
    89bc:	009b      	lsls	r3, r3, #2
    89be:	4413      	add	r3, r2
    89c0:	009b      	lsls	r3, r3, #2
    89c2:	440b      	add	r3, r1
    89c4:	3310      	adds	r3, #16
    89c6:	681b      	ldr	r3, [r3, #0]
    89c8:	b2db      	uxtb	r3, r3
    89ca:	461a      	mov	r2, r3
    89cc:	2101      	movs	r1, #1
    89ce:	6838      	ldr	r0, [r7, #0]
    89d0:	4b30      	ldr	r3, [pc, #192]	; (8a94 <_tc_timer_init+0x294>)
    89d2:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    89d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89d8:	4928      	ldr	r1, [pc, #160]	; (8a7c <_tc_timer_init+0x27c>)
    89da:	4613      	mov	r3, r2
    89dc:	009b      	lsls	r3, r3, #2
    89de:	4413      	add	r3, r2
    89e0:	009b      	lsls	r3, r3, #2
    89e2:	440b      	add	r3, r1
    89e4:	330b      	adds	r3, #11
    89e6:	781b      	ldrb	r3, [r3, #0]
    89e8:	4619      	mov	r1, r3
    89ea:	6838      	ldr	r0, [r7, #0]
    89ec:	4b2a      	ldr	r3, [pc, #168]	; (8a98 <_tc_timer_init+0x298>)
    89ee:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    89f0:	6838      	ldr	r0, [r7, #0]
    89f2:	4b2a      	ldr	r3, [pc, #168]	; (8a9c <_tc_timer_init+0x29c>)
    89f4:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    89f6:	6879      	ldr	r1, [r7, #4]
    89f8:	6838      	ldr	r0, [r7, #0]
    89fa:	4b29      	ldr	r3, [pc, #164]	; (8aa0 <_tc_timer_init+0x2a0>)
    89fc:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    89fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a02:	491e      	ldr	r1, [pc, #120]	; (8a7c <_tc_timer_init+0x27c>)
    8a04:	4613      	mov	r3, r2
    8a06:	009b      	lsls	r3, r3, #2
    8a08:	4413      	add	r3, r2
    8a0a:	009b      	lsls	r3, r3, #2
    8a0c:	440b      	add	r3, r1
    8a0e:	3302      	adds	r3, #2
    8a10:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a14:	4618      	mov	r0, r3
    8a16:	4b23      	ldr	r3, [pc, #140]	; (8aa4 <_tc_timer_init+0x2a4>)
    8a18:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8a1a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a1e:	4917      	ldr	r1, [pc, #92]	; (8a7c <_tc_timer_init+0x27c>)
    8a20:	4613      	mov	r3, r2
    8a22:	009b      	lsls	r3, r3, #2
    8a24:	4413      	add	r3, r2
    8a26:	009b      	lsls	r3, r3, #2
    8a28:	440b      	add	r3, r1
    8a2a:	3302      	adds	r3, #2
    8a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a30:	4618      	mov	r0, r3
    8a32:	4b1d      	ldr	r3, [pc, #116]	; (8aa8 <_tc_timer_init+0x2a8>)
    8a34:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8a36:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a3a:	4910      	ldr	r1, [pc, #64]	; (8a7c <_tc_timer_init+0x27c>)
    8a3c:	4613      	mov	r3, r2
    8a3e:	009b      	lsls	r3, r3, #2
    8a40:	4413      	add	r3, r2
    8a42:	009b      	lsls	r3, r3, #2
    8a44:	440b      	add	r3, r1
    8a46:	3302      	adds	r3, #2
    8a48:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a4c:	4618      	mov	r0, r3
    8a4e:	4b17      	ldr	r3, [pc, #92]	; (8aac <_tc_timer_init+0x2ac>)
    8a50:	4798      	blx	r3

	return ERR_NONE;
    8a52:	2300      	movs	r3, #0
}
    8a54:	4618      	mov	r0, r3
    8a56:	3710      	adds	r7, #16
    8a58:	46bd      	mov	sp, r7
    8a5a:	bd80      	pop	{r7, pc}
    8a5c:	00009091 	.word	0x00009091
    8a60:	00011060 	.word	0x00011060
    8a64:	00004409 	.word	0x00004409
    8a68:	00008475 	.word	0x00008475
    8a6c:	00008615 	.word	0x00008615
    8a70:	000085c5 	.word	0x000085c5
    8a74:	00008451 	.word	0x00008451
    8a78:	00008645 	.word	0x00008645
    8a7c:	20000110 	.word	0x20000110
    8a80:	000086a5 	.word	0x000086a5
    8a84:	00008669 	.word	0x00008669
    8a88:	00008687 	.word	0x00008687
    8a8c:	000087a5 	.word	0x000087a5
    8a90:	00008741 	.word	0x00008741
    8a94:	00008711 	.word	0x00008711
    8a98:	000086c5 	.word	0x000086c5
    8a9c:	000084f9 	.word	0x000084f9
    8aa0:	000090f9 	.word	0x000090f9
    8aa4:	000083d1 	.word	0x000083d1
    8aa8:	00008415 	.word	0x00008415
    8aac:	00008395 	.word	0x00008395

00008ab0 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    8ab0:	b580      	push	{r7, lr}
    8ab2:	b084      	sub	sp, #16
    8ab4:	af00      	add	r7, sp, #0
    8ab6:	6078      	str	r0, [r7, #4]
    8ab8:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    8aba:	6838      	ldr	r0, [r7, #0]
    8abc:	4b73      	ldr	r3, [pc, #460]	; (8c8c <_pwm_init+0x1dc>)
    8abe:	4798      	blx	r3
    8ac0:	4603      	mov	r3, r0
    8ac2:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    8ac4:	687b      	ldr	r3, [r7, #4]
    8ac6:	683a      	ldr	r2, [r7, #0]
    8ac8:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8aca:	2101      	movs	r1, #1
    8acc:	6838      	ldr	r0, [r7, #0]
    8ace:	4b70      	ldr	r3, [pc, #448]	; (8c90 <_pwm_init+0x1e0>)
    8ad0:	4798      	blx	r3
    8ad2:	4603      	mov	r3, r0
    8ad4:	f083 0301 	eor.w	r3, r3, #1
    8ad8:	b2db      	uxtb	r3, r3
    8ada:	2b00      	cmp	r3, #0
    8adc:	d011      	beq.n	8b02 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8ade:	2102      	movs	r1, #2
    8ae0:	6838      	ldr	r0, [r7, #0]
    8ae2:	4b6c      	ldr	r3, [pc, #432]	; (8c94 <_pwm_init+0x1e4>)
    8ae4:	4798      	blx	r3
    8ae6:	4603      	mov	r3, r0
    8ae8:	2b00      	cmp	r3, #0
    8aea:	d006      	beq.n	8afa <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8aec:	6838      	ldr	r0, [r7, #0]
    8aee:	4b6a      	ldr	r3, [pc, #424]	; (8c98 <_pwm_init+0x1e8>)
    8af0:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8af2:	2102      	movs	r1, #2
    8af4:	6838      	ldr	r0, [r7, #0]
    8af6:	4b69      	ldr	r3, [pc, #420]	; (8c9c <_pwm_init+0x1ec>)
    8af8:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8afa:	2101      	movs	r1, #1
    8afc:	6838      	ldr	r0, [r7, #0]
    8afe:	4b68      	ldr	r3, [pc, #416]	; (8ca0 <_pwm_init+0x1f0>)
    8b00:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8b02:	2101      	movs	r1, #1
    8b04:	6838      	ldr	r0, [r7, #0]
    8b06:	4b65      	ldr	r3, [pc, #404]	; (8c9c <_pwm_init+0x1ec>)
    8b08:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8b0a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b0e:	4965      	ldr	r1, [pc, #404]	; (8ca4 <_pwm_init+0x1f4>)
    8b10:	4613      	mov	r3, r2
    8b12:	009b      	lsls	r3, r3, #2
    8b14:	4413      	add	r3, r2
    8b16:	009b      	lsls	r3, r3, #2
    8b18:	440b      	add	r3, r1
    8b1a:	3304      	adds	r3, #4
    8b1c:	681b      	ldr	r3, [r3, #0]
    8b1e:	4619      	mov	r1, r3
    8b20:	6838      	ldr	r0, [r7, #0]
    8b22:	4b5f      	ldr	r3, [pc, #380]	; (8ca0 <_pwm_init+0x1f0>)
    8b24:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8b26:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b2a:	495e      	ldr	r1, [pc, #376]	; (8ca4 <_pwm_init+0x1f4>)
    8b2c:	4613      	mov	r3, r2
    8b2e:	009b      	lsls	r3, r3, #2
    8b30:	4413      	add	r3, r2
    8b32:	009b      	lsls	r3, r3, #2
    8b34:	440b      	add	r3, r1
    8b36:	330a      	adds	r3, #10
    8b38:	781b      	ldrb	r3, [r3, #0]
    8b3a:	4619      	mov	r1, r3
    8b3c:	6838      	ldr	r0, [r7, #0]
    8b3e:	4b5a      	ldr	r3, [pc, #360]	; (8ca8 <_pwm_init+0x1f8>)
    8b40:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8b42:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b46:	4957      	ldr	r1, [pc, #348]	; (8ca4 <_pwm_init+0x1f4>)
    8b48:	4613      	mov	r3, r2
    8b4a:	009b      	lsls	r3, r3, #2
    8b4c:	4413      	add	r3, r2
    8b4e:	009b      	lsls	r3, r3, #2
    8b50:	440b      	add	r3, r1
    8b52:	3308      	adds	r3, #8
    8b54:	881b      	ldrh	r3, [r3, #0]
    8b56:	4619      	mov	r1, r3
    8b58:	6838      	ldr	r0, [r7, #0]
    8b5a:	4b54      	ldr	r3, [pc, #336]	; (8cac <_pwm_init+0x1fc>)
    8b5c:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    8b5e:	2103      	movs	r1, #3
    8b60:	6838      	ldr	r0, [r7, #0]
    8b62:	4b53      	ldr	r3, [pc, #332]	; (8cb0 <_pwm_init+0x200>)
    8b64:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8b66:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b6a:	494e      	ldr	r1, [pc, #312]	; (8ca4 <_pwm_init+0x1f4>)
    8b6c:	4613      	mov	r3, r2
    8b6e:	009b      	lsls	r3, r3, #2
    8b70:	4413      	add	r3, r2
    8b72:	009b      	lsls	r3, r3, #2
    8b74:	440b      	add	r3, r1
    8b76:	3304      	adds	r3, #4
    8b78:	681b      	ldr	r3, [r3, #0]
    8b7a:	f003 030c 	and.w	r3, r3, #12
    8b7e:	2b08      	cmp	r3, #8
    8b80:	d11e      	bne.n	8bc0 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8b82:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b86:	4947      	ldr	r1, [pc, #284]	; (8ca4 <_pwm_init+0x1f4>)
    8b88:	4613      	mov	r3, r2
    8b8a:	009b      	lsls	r3, r3, #2
    8b8c:	4413      	add	r3, r2
    8b8e:	009b      	lsls	r3, r3, #2
    8b90:	440b      	add	r3, r1
    8b92:	330c      	adds	r3, #12
    8b94:	681b      	ldr	r3, [r3, #0]
    8b96:	461a      	mov	r2, r3
    8b98:	2100      	movs	r1, #0
    8b9a:	6838      	ldr	r0, [r7, #0]
    8b9c:	4b45      	ldr	r3, [pc, #276]	; (8cb4 <_pwm_init+0x204>)
    8b9e:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8ba0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8ba4:	493f      	ldr	r1, [pc, #252]	; (8ca4 <_pwm_init+0x1f4>)
    8ba6:	4613      	mov	r3, r2
    8ba8:	009b      	lsls	r3, r3, #2
    8baa:	4413      	add	r3, r2
    8bac:	009b      	lsls	r3, r3, #2
    8bae:	440b      	add	r3, r1
    8bb0:	3310      	adds	r3, #16
    8bb2:	681b      	ldr	r3, [r3, #0]
    8bb4:	461a      	mov	r2, r3
    8bb6:	2101      	movs	r1, #1
    8bb8:	6838      	ldr	r0, [r7, #0]
    8bba:	4b3e      	ldr	r3, [pc, #248]	; (8cb4 <_pwm_init+0x204>)
    8bbc:	4798      	blx	r3
    8bbe:	e031      	b.n	8c24 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8bc0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8bc4:	4937      	ldr	r1, [pc, #220]	; (8ca4 <_pwm_init+0x1f4>)
    8bc6:	4613      	mov	r3, r2
    8bc8:	009b      	lsls	r3, r3, #2
    8bca:	4413      	add	r3, r2
    8bcc:	009b      	lsls	r3, r3, #2
    8bce:	440b      	add	r3, r1
    8bd0:	3304      	adds	r3, #4
    8bd2:	681b      	ldr	r3, [r3, #0]
    8bd4:	f003 030c 	and.w	r3, r3, #12
    8bd8:	2b00      	cmp	r3, #0
    8bda:	d120      	bne.n	8c1e <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8bdc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8be0:	4930      	ldr	r1, [pc, #192]	; (8ca4 <_pwm_init+0x1f4>)
    8be2:	4613      	mov	r3, r2
    8be4:	009b      	lsls	r3, r3, #2
    8be6:	4413      	add	r3, r2
    8be8:	009b      	lsls	r3, r3, #2
    8bea:	440b      	add	r3, r1
    8bec:	330c      	adds	r3, #12
    8bee:	681b      	ldr	r3, [r3, #0]
    8bf0:	b29b      	uxth	r3, r3
    8bf2:	461a      	mov	r2, r3
    8bf4:	2100      	movs	r1, #0
    8bf6:	6838      	ldr	r0, [r7, #0]
    8bf8:	4b2f      	ldr	r3, [pc, #188]	; (8cb8 <_pwm_init+0x208>)
    8bfa:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8bfc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c00:	4928      	ldr	r1, [pc, #160]	; (8ca4 <_pwm_init+0x1f4>)
    8c02:	4613      	mov	r3, r2
    8c04:	009b      	lsls	r3, r3, #2
    8c06:	4413      	add	r3, r2
    8c08:	009b      	lsls	r3, r3, #2
    8c0a:	440b      	add	r3, r1
    8c0c:	3310      	adds	r3, #16
    8c0e:	681b      	ldr	r3, [r3, #0]
    8c10:	b29b      	uxth	r3, r3
    8c12:	461a      	mov	r2, r3
    8c14:	2101      	movs	r1, #1
    8c16:	6838      	ldr	r0, [r7, #0]
    8c18:	4b27      	ldr	r3, [pc, #156]	; (8cb8 <_pwm_init+0x208>)
    8c1a:	4798      	blx	r3
    8c1c:	e002      	b.n	8c24 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    8c1e:	f04f 33ff 	mov.w	r3, #4294967295
    8c22:	e02e      	b.n	8c82 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8c24:	6879      	ldr	r1, [r7, #4]
    8c26:	6838      	ldr	r0, [r7, #0]
    8c28:	4b24      	ldr	r3, [pc, #144]	; (8cbc <_pwm_init+0x20c>)
    8c2a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8c2c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c30:	491c      	ldr	r1, [pc, #112]	; (8ca4 <_pwm_init+0x1f4>)
    8c32:	4613      	mov	r3, r2
    8c34:	009b      	lsls	r3, r3, #2
    8c36:	4413      	add	r3, r2
    8c38:	009b      	lsls	r3, r3, #2
    8c3a:	440b      	add	r3, r1
    8c3c:	3302      	adds	r3, #2
    8c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8c42:	4618      	mov	r0, r3
    8c44:	4b1e      	ldr	r3, [pc, #120]	; (8cc0 <_pwm_init+0x210>)
    8c46:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8c48:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c4c:	4915      	ldr	r1, [pc, #84]	; (8ca4 <_pwm_init+0x1f4>)
    8c4e:	4613      	mov	r3, r2
    8c50:	009b      	lsls	r3, r3, #2
    8c52:	4413      	add	r3, r2
    8c54:	009b      	lsls	r3, r3, #2
    8c56:	440b      	add	r3, r1
    8c58:	3302      	adds	r3, #2
    8c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
    8c5e:	4618      	mov	r0, r3
    8c60:	4b18      	ldr	r3, [pc, #96]	; (8cc4 <_pwm_init+0x214>)
    8c62:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8c64:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c68:	490e      	ldr	r1, [pc, #56]	; (8ca4 <_pwm_init+0x1f4>)
    8c6a:	4613      	mov	r3, r2
    8c6c:	009b      	lsls	r3, r3, #2
    8c6e:	4413      	add	r3, r2
    8c70:	009b      	lsls	r3, r3, #2
    8c72:	440b      	add	r3, r1
    8c74:	3302      	adds	r3, #2
    8c76:	f9b3 3000 	ldrsh.w	r3, [r3]
    8c7a:	4618      	mov	r0, r3
    8c7c:	4b12      	ldr	r3, [pc, #72]	; (8cc8 <_pwm_init+0x218>)
    8c7e:	4798      	blx	r3

	return 0;
    8c80:	2300      	movs	r3, #0
}
    8c82:	4618      	mov	r0, r3
    8c84:	3710      	adds	r7, #16
    8c86:	46bd      	mov	sp, r7
    8c88:	bd80      	pop	{r7, pc}
    8c8a:	bf00      	nop
    8c8c:	00009091 	.word	0x00009091
    8c90:	00008475 	.word	0x00008475
    8c94:	00008615 	.word	0x00008615
    8c98:	000085c5 	.word	0x000085c5
    8c9c:	00008451 	.word	0x00008451
    8ca0:	00008645 	.word	0x00008645
    8ca4:	20000110 	.word	0x20000110
    8ca8:	000086a5 	.word	0x000086a5
    8cac:	00008669 	.word	0x00008669
    8cb0:	00008687 	.word	0x00008687
    8cb4:	000087a5 	.word	0x000087a5
    8cb8:	00008741 	.word	0x00008741
    8cbc:	000090f9 	.word	0x000090f9
    8cc0:	000083d1 	.word	0x000083d1
    8cc4:	00008415 	.word	0x00008415
    8cc8:	00008395 	.word	0x00008395

00008ccc <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8ccc:	b580      	push	{r7, lr}
    8cce:	b084      	sub	sp, #16
    8cd0:	af00      	add	r7, sp, #0
    8cd2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8cd4:	687b      	ldr	r3, [r7, #4]
    8cd6:	68db      	ldr	r3, [r3, #12]
    8cd8:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8cda:	68f8      	ldr	r0, [r7, #12]
    8cdc:	4b10      	ldr	r3, [pc, #64]	; (8d20 <_tc_timer_deinit+0x54>)
    8cde:	4798      	blx	r3
    8ce0:	4603      	mov	r3, r0
    8ce2:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8ce4:	22f9      	movs	r2, #249	; 0xf9
    8ce6:	490f      	ldr	r1, [pc, #60]	; (8d24 <_tc_timer_deinit+0x58>)
    8ce8:	2001      	movs	r0, #1
    8cea:	4b0f      	ldr	r3, [pc, #60]	; (8d28 <_tc_timer_deinit+0x5c>)
    8cec:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    8cee:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8cf2:	490e      	ldr	r1, [pc, #56]	; (8d2c <_tc_timer_deinit+0x60>)
    8cf4:	4613      	mov	r3, r2
    8cf6:	009b      	lsls	r3, r3, #2
    8cf8:	4413      	add	r3, r2
    8cfa:	009b      	lsls	r3, r3, #2
    8cfc:	440b      	add	r3, r1
    8cfe:	3302      	adds	r3, #2
    8d00:	f9b3 3000 	ldrsh.w	r3, [r3]
    8d04:	4618      	mov	r0, r3
    8d06:	4b0a      	ldr	r3, [pc, #40]	; (8d30 <_tc_timer_deinit+0x64>)
    8d08:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8d0a:	68f8      	ldr	r0, [r7, #12]
    8d0c:	4b09      	ldr	r3, [pc, #36]	; (8d34 <_tc_timer_deinit+0x68>)
    8d0e:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8d10:	68f8      	ldr	r0, [r7, #12]
    8d12:	4b09      	ldr	r3, [pc, #36]	; (8d38 <_tc_timer_deinit+0x6c>)
    8d14:	4798      	blx	r3
}
    8d16:	bf00      	nop
    8d18:	3710      	adds	r7, #16
    8d1a:	46bd      	mov	sp, r7
    8d1c:	bd80      	pop	{r7, pc}
    8d1e:	bf00      	nop
    8d20:	00009091 	.word	0x00009091
    8d24:	00011060 	.word	0x00011060
    8d28:	00004409 	.word	0x00004409
    8d2c:	20000110 	.word	0x20000110
    8d30:	000083d1 	.word	0x000083d1
    8d34:	000085c5 	.word	0x000085c5
    8d38:	0000853d 	.word	0x0000853d

00008d3c <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8d3c:	b580      	push	{r7, lr}
    8d3e:	b082      	sub	sp, #8
    8d40:	af00      	add	r7, sp, #0
    8d42:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8d44:	687b      	ldr	r3, [r7, #4]
    8d46:	68db      	ldr	r3, [r3, #12]
    8d48:	4618      	mov	r0, r3
    8d4a:	4b03      	ldr	r3, [pc, #12]	; (8d58 <_tc_timer_start+0x1c>)
    8d4c:	4798      	blx	r3
}
    8d4e:	bf00      	nop
    8d50:	3708      	adds	r7, #8
    8d52:	46bd      	mov	sp, r7
    8d54:	bd80      	pop	{r7, pc}
    8d56:	bf00      	nop
    8d58:	00008565 	.word	0x00008565

00008d5c <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8d5c:	b580      	push	{r7, lr}
    8d5e:	b082      	sub	sp, #8
    8d60:	af00      	add	r7, sp, #0
    8d62:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8d64:	687b      	ldr	r3, [r7, #4]
    8d66:	691b      	ldr	r3, [r3, #16]
    8d68:	4618      	mov	r0, r3
    8d6a:	4b03      	ldr	r3, [pc, #12]	; (8d78 <_pwm_enable+0x1c>)
    8d6c:	4798      	blx	r3
}
    8d6e:	bf00      	nop
    8d70:	3708      	adds	r7, #8
    8d72:	46bd      	mov	sp, r7
    8d74:	bd80      	pop	{r7, pc}
    8d76:	bf00      	nop
    8d78:	00008565 	.word	0x00008565

00008d7c <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8d7c:	b580      	push	{r7, lr}
    8d7e:	b082      	sub	sp, #8
    8d80:	af00      	add	r7, sp, #0
    8d82:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8d84:	687b      	ldr	r3, [r7, #4]
    8d86:	68db      	ldr	r3, [r3, #12]
    8d88:	4618      	mov	r0, r3
    8d8a:	4b03      	ldr	r3, [pc, #12]	; (8d98 <_tc_timer_stop+0x1c>)
    8d8c:	4798      	blx	r3
}
    8d8e:	bf00      	nop
    8d90:	3708      	adds	r7, #8
    8d92:	46bd      	mov	sp, r7
    8d94:	bd80      	pop	{r7, pc}
    8d96:	bf00      	nop
    8d98:	000085c5 	.word	0x000085c5

00008d9c <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8d9c:	b580      	push	{r7, lr}
    8d9e:	b084      	sub	sp, #16
    8da0:	af00      	add	r7, sp, #0
    8da2:	6078      	str	r0, [r7, #4]
    8da4:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8da6:	687b      	ldr	r3, [r7, #4]
    8da8:	68db      	ldr	r3, [r3, #12]
    8daa:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8dac:	68f8      	ldr	r0, [r7, #12]
    8dae:	4b14      	ldr	r3, [pc, #80]	; (8e00 <_tc_timer_set_period+0x64>)
    8db0:	4798      	blx	r3
    8db2:	4603      	mov	r3, r0
    8db4:	2b02      	cmp	r3, #2
    8db6:	d105      	bne.n	8dc4 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8db8:	683a      	ldr	r2, [r7, #0]
    8dba:	2100      	movs	r1, #0
    8dbc:	68f8      	ldr	r0, [r7, #12]
    8dbe:	4b11      	ldr	r3, [pc, #68]	; (8e04 <_tc_timer_set_period+0x68>)
    8dc0:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8dc2:	e019      	b.n	8df8 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8dc4:	68f8      	ldr	r0, [r7, #12]
    8dc6:	4b0e      	ldr	r3, [pc, #56]	; (8e00 <_tc_timer_set_period+0x64>)
    8dc8:	4798      	blx	r3
    8dca:	4603      	mov	r3, r0
    8dcc:	2b00      	cmp	r3, #0
    8dce:	d107      	bne.n	8de0 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8dd0:	683b      	ldr	r3, [r7, #0]
    8dd2:	b29b      	uxth	r3, r3
    8dd4:	461a      	mov	r2, r3
    8dd6:	2100      	movs	r1, #0
    8dd8:	68f8      	ldr	r0, [r7, #12]
    8dda:	4b0b      	ldr	r3, [pc, #44]	; (8e08 <_tc_timer_set_period+0x6c>)
    8ddc:	4798      	blx	r3
}
    8dde:	e00b      	b.n	8df8 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8de0:	68f8      	ldr	r0, [r7, #12]
    8de2:	4b07      	ldr	r3, [pc, #28]	; (8e00 <_tc_timer_set_period+0x64>)
    8de4:	4798      	blx	r3
    8de6:	4603      	mov	r3, r0
    8de8:	2b01      	cmp	r3, #1
    8dea:	d105      	bne.n	8df8 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8dec:	683b      	ldr	r3, [r7, #0]
    8dee:	b2db      	uxtb	r3, r3
    8df0:	4619      	mov	r1, r3
    8df2:	68f8      	ldr	r0, [r7, #12]
    8df4:	4b05      	ldr	r3, [pc, #20]	; (8e0c <_tc_timer_set_period+0x70>)
    8df6:	4798      	blx	r3
}
    8df8:	bf00      	nop
    8dfa:	3710      	adds	r7, #16
    8dfc:	46bd      	mov	sp, r7
    8dfe:	bd80      	pop	{r7, pc}
    8e00:	000085ed 	.word	0x000085ed
    8e04:	000087a5 	.word	0x000087a5
    8e08:	00008741 	.word	0x00008741
    8e0c:	000086c5 	.word	0x000086c5

00008e10 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8e10:	b580      	push	{r7, lr}
    8e12:	b084      	sub	sp, #16
    8e14:	af00      	add	r7, sp, #0
    8e16:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8e18:	687b      	ldr	r3, [r7, #4]
    8e1a:	68db      	ldr	r3, [r3, #12]
    8e1c:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8e1e:	68f8      	ldr	r0, [r7, #12]
    8e20:	4b13      	ldr	r3, [pc, #76]	; (8e70 <_tc_timer_get_period+0x60>)
    8e22:	4798      	blx	r3
    8e24:	4603      	mov	r3, r0
    8e26:	2b02      	cmp	r3, #2
    8e28:	d105      	bne.n	8e36 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8e2a:	2100      	movs	r1, #0
    8e2c:	68f8      	ldr	r0, [r7, #12]
    8e2e:	4b11      	ldr	r3, [pc, #68]	; (8e74 <_tc_timer_get_period+0x64>)
    8e30:	4798      	blx	r3
    8e32:	4603      	mov	r3, r0
    8e34:	e017      	b.n	8e66 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8e36:	68f8      	ldr	r0, [r7, #12]
    8e38:	4b0d      	ldr	r3, [pc, #52]	; (8e70 <_tc_timer_get_period+0x60>)
    8e3a:	4798      	blx	r3
    8e3c:	4603      	mov	r3, r0
    8e3e:	2b00      	cmp	r3, #0
    8e40:	d105      	bne.n	8e4e <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8e42:	2100      	movs	r1, #0
    8e44:	68f8      	ldr	r0, [r7, #12]
    8e46:	4b0c      	ldr	r3, [pc, #48]	; (8e78 <_tc_timer_get_period+0x68>)
    8e48:	4798      	blx	r3
    8e4a:	4603      	mov	r3, r0
    8e4c:	e00b      	b.n	8e66 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8e4e:	68f8      	ldr	r0, [r7, #12]
    8e50:	4b07      	ldr	r3, [pc, #28]	; (8e70 <_tc_timer_get_period+0x60>)
    8e52:	4798      	blx	r3
    8e54:	4603      	mov	r3, r0
    8e56:	2b01      	cmp	r3, #1
    8e58:	d104      	bne.n	8e64 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8e5a:	68f8      	ldr	r0, [r7, #12]
    8e5c:	4b07      	ldr	r3, [pc, #28]	; (8e7c <_tc_timer_get_period+0x6c>)
    8e5e:	4798      	blx	r3
    8e60:	4603      	mov	r3, r0
    8e62:	e000      	b.n	8e66 <_tc_timer_get_period+0x56>
	}

	return 0;
    8e64:	2300      	movs	r3, #0
}
    8e66:	4618      	mov	r0, r3
    8e68:	3710      	adds	r7, #16
    8e6a:	46bd      	mov	sp, r7
    8e6c:	bd80      	pop	{r7, pc}
    8e6e:	bf00      	nop
    8e70:	000085ed 	.word	0x000085ed
    8e74:	000087d5 	.word	0x000087d5
    8e78:	00008775 	.word	0x00008775
    8e7c:	000086ed 	.word	0x000086ed

00008e80 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8e80:	b580      	push	{r7, lr}
    8e82:	b082      	sub	sp, #8
    8e84:	af00      	add	r7, sp, #0
    8e86:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8e88:	687b      	ldr	r3, [r7, #4]
    8e8a:	68db      	ldr	r3, [r3, #12]
    8e8c:	4618      	mov	r0, r3
    8e8e:	4b03      	ldr	r3, [pc, #12]	; (8e9c <_tc_timer_is_started+0x1c>)
    8e90:	4798      	blx	r3
    8e92:	4603      	mov	r3, r0
}
    8e94:	4618      	mov	r0, r3
    8e96:	3708      	adds	r7, #8
    8e98:	46bd      	mov	sp, r7
    8e9a:	bd80      	pop	{r7, pc}
    8e9c:	0000858d 	.word	0x0000858d

00008ea0 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    8ea0:	b580      	push	{r7, lr}
    8ea2:	b082      	sub	sp, #8
    8ea4:	af00      	add	r7, sp, #0
    8ea6:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8ea8:	687b      	ldr	r3, [r7, #4]
    8eaa:	691b      	ldr	r3, [r3, #16]
    8eac:	4618      	mov	r0, r3
    8eae:	4b03      	ldr	r3, [pc, #12]	; (8ebc <_pwm_is_enabled+0x1c>)
    8eb0:	4798      	blx	r3
    8eb2:	4603      	mov	r3, r0
}
    8eb4:	4618      	mov	r0, r3
    8eb6:	3708      	adds	r7, #8
    8eb8:	46bd      	mov	sp, r7
    8eba:	bd80      	pop	{r7, pc}
    8ebc:	0000858d 	.word	0x0000858d

00008ec0 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8ec0:	b480      	push	{r7}
    8ec2:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8ec4:	4b02      	ldr	r3, [pc, #8]	; (8ed0 <_tc_get_timer+0x10>)
}
    8ec6:	4618      	mov	r0, r3
    8ec8:	46bd      	mov	sp, r7
    8eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ece:	4770      	bx	lr
    8ed0:	20000188 	.word	0x20000188

00008ed4 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8ed4:	b480      	push	{r7}
    8ed6:	af00      	add	r7, sp, #0
	return NULL;
    8ed8:	2300      	movs	r3, #0
}
    8eda:	4618      	mov	r0, r3
    8edc:	46bd      	mov	sp, r7
    8ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ee2:	4770      	bx	lr

00008ee4 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8ee4:	b580      	push	{r7, lr}
    8ee6:	b084      	sub	sp, #16
    8ee8:	af00      	add	r7, sp, #0
    8eea:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8eec:	687b      	ldr	r3, [r7, #4]
    8eee:	68db      	ldr	r3, [r3, #12]
    8ef0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8ef2:	68f8      	ldr	r0, [r7, #12]
    8ef4:	4b0e      	ldr	r3, [pc, #56]	; (8f30 <_tc_timer_set_irq+0x4c>)
    8ef6:	4798      	blx	r3
    8ef8:	4603      	mov	r3, r0
    8efa:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8efc:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8f00:	490c      	ldr	r1, [pc, #48]	; (8f34 <_tc_timer_set_irq+0x50>)
    8f02:	2001      	movs	r0, #1
    8f04:	4b0c      	ldr	r3, [pc, #48]	; (8f38 <_tc_timer_set_irq+0x54>)
    8f06:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8f08:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8f0c:	490b      	ldr	r1, [pc, #44]	; (8f3c <_tc_timer_set_irq+0x58>)
    8f0e:	4613      	mov	r3, r2
    8f10:	009b      	lsls	r3, r3, #2
    8f12:	4413      	add	r3, r2
    8f14:	009b      	lsls	r3, r3, #2
    8f16:	440b      	add	r3, r1
    8f18:	3302      	adds	r3, #2
    8f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
    8f1e:	b2db      	uxtb	r3, r3
    8f20:	4618      	mov	r0, r3
    8f22:	4b07      	ldr	r3, [pc, #28]	; (8f40 <_tc_timer_set_irq+0x5c>)
    8f24:	4798      	blx	r3
}
    8f26:	bf00      	nop
    8f28:	3710      	adds	r7, #16
    8f2a:	46bd      	mov	sp, r7
    8f2c:	bd80      	pop	{r7, pc}
    8f2e:	bf00      	nop
    8f30:	00009091 	.word	0x00009091
    8f34:	00011060 	.word	0x00011060
    8f38:	00004409 	.word	0x00004409
    8f3c:	20000110 	.word	0x20000110
    8f40:	00004c51 	.word	0x00004c51

00008f44 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8f44:	b580      	push	{r7, lr}
    8f46:	b084      	sub	sp, #16
    8f48:	af00      	add	r7, sp, #0
    8f4a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8f4c:	687b      	ldr	r3, [r7, #4]
    8f4e:	68db      	ldr	r3, [r3, #12]
    8f50:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8f52:	68f8      	ldr	r0, [r7, #12]
    8f54:	4b07      	ldr	r3, [pc, #28]	; (8f74 <tc_interrupt_handler+0x30>)
    8f56:	4798      	blx	r3
    8f58:	4603      	mov	r3, r0
    8f5a:	2b00      	cmp	r3, #0
    8f5c:	d006      	beq.n	8f6c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8f5e:	68f8      	ldr	r0, [r7, #12]
    8f60:	4b05      	ldr	r3, [pc, #20]	; (8f78 <tc_interrupt_handler+0x34>)
    8f62:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8f64:	687b      	ldr	r3, [r7, #4]
    8f66:	681b      	ldr	r3, [r3, #0]
    8f68:	6878      	ldr	r0, [r7, #4]
    8f6a:	4798      	blx	r3
	}
}
    8f6c:	bf00      	nop
    8f6e:	3710      	adds	r7, #16
    8f70:	46bd      	mov	sp, r7
    8f72:	bd80      	pop	{r7, pc}
    8f74:	0000849d 	.word	0x0000849d
    8f78:	000084c5 	.word	0x000084c5

00008f7c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8f7c:	b580      	push	{r7, lr}
    8f7e:	b084      	sub	sp, #16
    8f80:	af00      	add	r7, sp, #0
    8f82:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8f84:	687b      	ldr	r3, [r7, #4]
    8f86:	691b      	ldr	r3, [r3, #16]
    8f88:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8f8a:	68f8      	ldr	r0, [r7, #12]
    8f8c:	4b12      	ldr	r3, [pc, #72]	; (8fd8 <tc_pwm_interrupt_handler+0x5c>)
    8f8e:	4798      	blx	r3
    8f90:	4603      	mov	r3, r0
    8f92:	2b00      	cmp	r3, #0
    8f94:	d00a      	beq.n	8fac <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8f96:	68f8      	ldr	r0, [r7, #12]
    8f98:	4b10      	ldr	r3, [pc, #64]	; (8fdc <tc_pwm_interrupt_handler+0x60>)
    8f9a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8f9c:	687b      	ldr	r3, [r7, #4]
    8f9e:	681b      	ldr	r3, [r3, #0]
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	d003      	beq.n	8fac <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8fa4:	687b      	ldr	r3, [r7, #4]
    8fa6:	681b      	ldr	r3, [r3, #0]
    8fa8:	6878      	ldr	r0, [r7, #4]
    8faa:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8fac:	68f8      	ldr	r0, [r7, #12]
    8fae:	4b0c      	ldr	r3, [pc, #48]	; (8fe0 <tc_pwm_interrupt_handler+0x64>)
    8fb0:	4798      	blx	r3
    8fb2:	4603      	mov	r3, r0
    8fb4:	2b00      	cmp	r3, #0
    8fb6:	d00a      	beq.n	8fce <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8fb8:	68f8      	ldr	r0, [r7, #12]
    8fba:	4b0a      	ldr	r3, [pc, #40]	; (8fe4 <tc_pwm_interrupt_handler+0x68>)
    8fbc:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8fbe:	687b      	ldr	r3, [r7, #4]
    8fc0:	685b      	ldr	r3, [r3, #4]
    8fc2:	2b00      	cmp	r3, #0
    8fc4:	d003      	beq.n	8fce <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8fc6:	687b      	ldr	r3, [r7, #4]
    8fc8:	685b      	ldr	r3, [r3, #4]
    8fca:	6878      	ldr	r0, [r7, #4]
    8fcc:	4798      	blx	r3
		}
	}
}
    8fce:	bf00      	nop
    8fd0:	3710      	adds	r7, #16
    8fd2:	46bd      	mov	sp, r7
    8fd4:	bd80      	pop	{r7, pc}
    8fd6:	bf00      	nop
    8fd8:	0000849d 	.word	0x0000849d
    8fdc:	000084c5 	.word	0x000084c5
    8fe0:	00008513 	.word	0x00008513
    8fe4:	000084df 	.word	0x000084df

00008fe8 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8fe8:	b580      	push	{r7, lr}
    8fea:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8fec:	4b03      	ldr	r3, [pc, #12]	; (8ffc <TC0_Handler+0x14>)
    8fee:	681b      	ldr	r3, [r3, #0]
    8ff0:	4618      	mov	r0, r3
    8ff2:	4b03      	ldr	r3, [pc, #12]	; (9000 <TC0_Handler+0x18>)
    8ff4:	4798      	blx	r3
}
    8ff6:	bf00      	nop
    8ff8:	bd80      	pop	{r7, pc}
    8ffa:	bf00      	nop
    8ffc:	20000e30 	.word	0x20000e30
    9000:	00008f45 	.word	0x00008f45

00009004 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    9004:	b580      	push	{r7, lr}
    9006:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    9008:	4b03      	ldr	r3, [pc, #12]	; (9018 <TC2_Handler+0x14>)
    900a:	681b      	ldr	r3, [r3, #0]
    900c:	4618      	mov	r0, r3
    900e:	4b03      	ldr	r3, [pc, #12]	; (901c <TC2_Handler+0x18>)
    9010:	4798      	blx	r3
}
    9012:	bf00      	nop
    9014:	bd80      	pop	{r7, pc}
    9016:	bf00      	nop
    9018:	20000e34 	.word	0x20000e34
    901c:	00008f45 	.word	0x00008f45

00009020 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    9020:	b580      	push	{r7, lr}
    9022:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    9024:	4b03      	ldr	r3, [pc, #12]	; (9034 <TC4_Handler+0x14>)
    9026:	681b      	ldr	r3, [r3, #0]
    9028:	4618      	mov	r0, r3
    902a:	4b03      	ldr	r3, [pc, #12]	; (9038 <TC4_Handler+0x18>)
    902c:	4798      	blx	r3
}
    902e:	bf00      	nop
    9030:	bd80      	pop	{r7, pc}
    9032:	bf00      	nop
    9034:	20000e38 	.word	0x20000e38
    9038:	00008f45 	.word	0x00008f45

0000903c <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    903c:	b580      	push	{r7, lr}
    903e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    9040:	4b03      	ldr	r3, [pc, #12]	; (9050 <TC5_Handler+0x14>)
    9042:	681b      	ldr	r3, [r3, #0]
    9044:	4618      	mov	r0, r3
    9046:	4b03      	ldr	r3, [pc, #12]	; (9054 <TC5_Handler+0x18>)
    9048:	4798      	blx	r3
}
    904a:	bf00      	nop
    904c:	bd80      	pop	{r7, pc}
    904e:	bf00      	nop
    9050:	20000e3c 	.word	0x20000e3c
    9054:	00008f45 	.word	0x00008f45

00009058 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    9058:	b580      	push	{r7, lr}
    905a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    905c:	4b03      	ldr	r3, [pc, #12]	; (906c <TC6_Handler+0x14>)
    905e:	681b      	ldr	r3, [r3, #0]
    9060:	4618      	mov	r0, r3
    9062:	4b03      	ldr	r3, [pc, #12]	; (9070 <TC6_Handler+0x18>)
    9064:	4798      	blx	r3
}
    9066:	bf00      	nop
    9068:	bd80      	pop	{r7, pc}
    906a:	bf00      	nop
    906c:	20000e40 	.word	0x20000e40
    9070:	00008f45 	.word	0x00008f45

00009074 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    9074:	b580      	push	{r7, lr}
    9076:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    9078:	4b03      	ldr	r3, [pc, #12]	; (9088 <TC7_Handler+0x14>)
    907a:	681b      	ldr	r3, [r3, #0]
    907c:	4618      	mov	r0, r3
    907e:	4b03      	ldr	r3, [pc, #12]	; (908c <TC7_Handler+0x18>)
    9080:	4798      	blx	r3
}
    9082:	bf00      	nop
    9084:	bd80      	pop	{r7, pc}
    9086:	bf00      	nop
    9088:	20000e44 	.word	0x20000e44
    908c:	00008f7d 	.word	0x00008f7d

00009090 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    9090:	b580      	push	{r7, lr}
    9092:	b084      	sub	sp, #16
    9094:	af00      	add	r7, sp, #0
    9096:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    9098:	6878      	ldr	r0, [r7, #4]
    909a:	4b13      	ldr	r3, [pc, #76]	; (90e8 <get_tc_index+0x58>)
    909c:	4798      	blx	r3
    909e:	4603      	mov	r3, r0
    90a0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    90a2:	2300      	movs	r3, #0
    90a4:	73fb      	strb	r3, [r7, #15]
    90a6:	e010      	b.n	90ca <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    90a8:	7bfa      	ldrb	r2, [r7, #15]
    90aa:	4910      	ldr	r1, [pc, #64]	; (90ec <get_tc_index+0x5c>)
    90ac:	4613      	mov	r3, r2
    90ae:	009b      	lsls	r3, r3, #2
    90b0:	4413      	add	r3, r2
    90b2:	009b      	lsls	r3, r3, #2
    90b4:	440b      	add	r3, r1
    90b6:	781b      	ldrb	r3, [r3, #0]
    90b8:	7bba      	ldrb	r2, [r7, #14]
    90ba:	429a      	cmp	r2, r3
    90bc:	d102      	bne.n	90c4 <get_tc_index+0x34>
			return i;
    90be:	f997 300f 	ldrsb.w	r3, [r7, #15]
    90c2:	e00d      	b.n	90e0 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    90c4:	7bfb      	ldrb	r3, [r7, #15]
    90c6:	3301      	adds	r3, #1
    90c8:	73fb      	strb	r3, [r7, #15]
    90ca:	7bfb      	ldrb	r3, [r7, #15]
    90cc:	2b05      	cmp	r3, #5
    90ce:	d9eb      	bls.n	90a8 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    90d0:	f240 221d 	movw	r2, #541	; 0x21d
    90d4:	4906      	ldr	r1, [pc, #24]	; (90f0 <get_tc_index+0x60>)
    90d6:	2000      	movs	r0, #0
    90d8:	4b06      	ldr	r3, [pc, #24]	; (90f4 <get_tc_index+0x64>)
    90da:	4798      	blx	r3
	return -1;
    90dc:	f04f 33ff 	mov.w	r3, #4294967295
}
    90e0:	4618      	mov	r0, r3
    90e2:	3710      	adds	r7, #16
    90e4:	46bd      	mov	sp, r7
    90e6:	bd80      	pop	{r7, pc}
    90e8:	00009195 	.word	0x00009195
    90ec:	20000110 	.word	0x20000110
    90f0:	00011060 	.word	0x00011060
    90f4:	00004409 	.word	0x00004409

000090f8 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    90f8:	b480      	push	{r7}
    90fa:	b083      	sub	sp, #12
    90fc:	af00      	add	r7, sp, #0
    90fe:	6078      	str	r0, [r7, #4]
    9100:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    9102:	687b      	ldr	r3, [r7, #4]
    9104:	4a17      	ldr	r2, [pc, #92]	; (9164 <_tc_init_irq_param+0x6c>)
    9106:	4293      	cmp	r3, r2
    9108:	d102      	bne.n	9110 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    910a:	4a17      	ldr	r2, [pc, #92]	; (9168 <_tc_init_irq_param+0x70>)
    910c:	683b      	ldr	r3, [r7, #0]
    910e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    9110:	687b      	ldr	r3, [r7, #4]
    9112:	4a16      	ldr	r2, [pc, #88]	; (916c <_tc_init_irq_param+0x74>)
    9114:	4293      	cmp	r3, r2
    9116:	d102      	bne.n	911e <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    9118:	4a15      	ldr	r2, [pc, #84]	; (9170 <_tc_init_irq_param+0x78>)
    911a:	683b      	ldr	r3, [r7, #0]
    911c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    911e:	687b      	ldr	r3, [r7, #4]
    9120:	4a14      	ldr	r2, [pc, #80]	; (9174 <_tc_init_irq_param+0x7c>)
    9122:	4293      	cmp	r3, r2
    9124:	d102      	bne.n	912c <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    9126:	4a14      	ldr	r2, [pc, #80]	; (9178 <_tc_init_irq_param+0x80>)
    9128:	683b      	ldr	r3, [r7, #0]
    912a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    912c:	687b      	ldr	r3, [r7, #4]
    912e:	4a13      	ldr	r2, [pc, #76]	; (917c <_tc_init_irq_param+0x84>)
    9130:	4293      	cmp	r3, r2
    9132:	d102      	bne.n	913a <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    9134:	4a12      	ldr	r2, [pc, #72]	; (9180 <_tc_init_irq_param+0x88>)
    9136:	683b      	ldr	r3, [r7, #0]
    9138:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    913a:	687b      	ldr	r3, [r7, #4]
    913c:	4a11      	ldr	r2, [pc, #68]	; (9184 <_tc_init_irq_param+0x8c>)
    913e:	4293      	cmp	r3, r2
    9140:	d102      	bne.n	9148 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    9142:	4a11      	ldr	r2, [pc, #68]	; (9188 <_tc_init_irq_param+0x90>)
    9144:	683b      	ldr	r3, [r7, #0]
    9146:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    9148:	687b      	ldr	r3, [r7, #4]
    914a:	4a10      	ldr	r2, [pc, #64]	; (918c <_tc_init_irq_param+0x94>)
    914c:	4293      	cmp	r3, r2
    914e:	d102      	bne.n	9156 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    9150:	4a0f      	ldr	r2, [pc, #60]	; (9190 <_tc_init_irq_param+0x98>)
    9152:	683b      	ldr	r3, [r7, #0]
    9154:	6013      	str	r3, [r2, #0]
	}
}
    9156:	bf00      	nop
    9158:	370c      	adds	r7, #12
    915a:	46bd      	mov	sp, r7
    915c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9160:	4770      	bx	lr
    9162:	bf00      	nop
    9164:	40003800 	.word	0x40003800
    9168:	20000e30 	.word	0x20000e30
    916c:	4101a000 	.word	0x4101a000
    9170:	20000e34 	.word	0x20000e34
    9174:	42001400 	.word	0x42001400
    9178:	20000e38 	.word	0x20000e38
    917c:	42001800 	.word	0x42001800
    9180:	20000e3c 	.word	0x20000e3c
    9184:	43001400 	.word	0x43001400
    9188:	20000e40 	.word	0x20000e40
    918c:	43001800 	.word	0x43001800
    9190:	20000e44 	.word	0x20000e44

00009194 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    9194:	b4b0      	push	{r4, r5, r7}
    9196:	b08d      	sub	sp, #52	; 0x34
    9198:	af00      	add	r7, sp, #0
    919a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    919c:	4b13      	ldr	r3, [pc, #76]	; (91ec <_get_hardware_offset+0x58>)
    919e:	f107 040c 	add.w	r4, r7, #12
    91a2:	461d      	mov	r5, r3
    91a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    91a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    91a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    91ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    91b0:	2300      	movs	r3, #0
    91b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    91b4:	e010      	b.n	91d8 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    91b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    91b8:	009b      	lsls	r3, r3, #2
    91ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
    91be:	4413      	add	r3, r2
    91c0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    91c4:	461a      	mov	r2, r3
    91c6:	687b      	ldr	r3, [r7, #4]
    91c8:	429a      	cmp	r2, r3
    91ca:	d102      	bne.n	91d2 <_get_hardware_offset+0x3e>
			return i;
    91cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    91ce:	b2db      	uxtb	r3, r3
    91d0:	e006      	b.n	91e0 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    91d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    91d4:	3301      	adds	r3, #1
    91d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    91d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    91da:	2b07      	cmp	r3, #7
    91dc:	d9eb      	bls.n	91b6 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    91de:	2300      	movs	r3, #0
}
    91e0:	4618      	mov	r0, r3
    91e2:	3734      	adds	r7, #52	; 0x34
    91e4:	46bd      	mov	sp, r7
    91e6:	bcb0      	pop	{r4, r5, r7}
    91e8:	4770      	bx	lr
    91ea:	bf00      	nop
    91ec:	00011074 	.word	0x00011074

000091f0 <__NVIC_EnableIRQ>:
{
    91f0:	b480      	push	{r7}
    91f2:	b083      	sub	sp, #12
    91f4:	af00      	add	r7, sp, #0
    91f6:	4603      	mov	r3, r0
    91f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    91fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    91fe:	2b00      	cmp	r3, #0
    9200:	db0b      	blt.n	921a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9202:	4909      	ldr	r1, [pc, #36]	; (9228 <__NVIC_EnableIRQ+0x38>)
    9204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9208:	095b      	lsrs	r3, r3, #5
    920a:	88fa      	ldrh	r2, [r7, #6]
    920c:	f002 021f 	and.w	r2, r2, #31
    9210:	2001      	movs	r0, #1
    9212:	fa00 f202 	lsl.w	r2, r0, r2
    9216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    921a:	bf00      	nop
    921c:	370c      	adds	r7, #12
    921e:	46bd      	mov	sp, r7
    9220:	f85d 7b04 	ldr.w	r7, [sp], #4
    9224:	4770      	bx	lr
    9226:	bf00      	nop
    9228:	e000e100 	.word	0xe000e100

0000922c <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    922c:	b480      	push	{r7}
    922e:	b087      	sub	sp, #28
    9230:	af00      	add	r7, sp, #0
    9232:	60f8      	str	r0, [r7, #12]
    9234:	460b      	mov	r3, r1
    9236:	607a      	str	r2, [r7, #4]
    9238:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    923a:	7afa      	ldrb	r2, [r7, #11]
    923c:	68f9      	ldr	r1, [r7, #12]
    923e:	4613      	mov	r3, r2
    9240:	009b      	lsls	r3, r3, #2
    9242:	4413      	add	r3, r2
    9244:	009b      	lsls	r3, r3, #2
    9246:	440b      	add	r3, r1
    9248:	3340      	adds	r3, #64	; 0x40
    924a:	681b      	ldr	r3, [r3, #0]
    924c:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    924e:	697a      	ldr	r2, [r7, #20]
    9250:	687b      	ldr	r3, [r7, #4]
    9252:	4013      	ands	r3, r2
    9254:	617b      	str	r3, [r7, #20]
	return tmp;
    9256:	697b      	ldr	r3, [r7, #20]
}
    9258:	4618      	mov	r0, r3
    925a:	371c      	adds	r7, #28
    925c:	46bd      	mov	sp, r7
    925e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9262:	4770      	bx	lr

00009264 <hri_oscctrl_get_STATUS_reg>:
{
    9264:	b480      	push	{r7}
    9266:	b085      	sub	sp, #20
    9268:	af00      	add	r7, sp, #0
    926a:	6078      	str	r0, [r7, #4]
    926c:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    926e:	687b      	ldr	r3, [r7, #4]
    9270:	691b      	ldr	r3, [r3, #16]
    9272:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9274:	68fa      	ldr	r2, [r7, #12]
    9276:	683b      	ldr	r3, [r7, #0]
    9278:	4013      	ands	r3, r2
    927a:	60fb      	str	r3, [r7, #12]
	return tmp;
    927c:	68fb      	ldr	r3, [r7, #12]
}
    927e:	4618      	mov	r0, r3
    9280:	3714      	adds	r7, #20
    9282:	46bd      	mov	sp, r7
    9284:	f85d 7b04 	ldr.w	r7, [sp], #4
    9288:	4770      	bx	lr

0000928a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    928a:	b480      	push	{r7}
    928c:	b085      	sub	sp, #20
    928e:	af00      	add	r7, sp, #0
    9290:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    9292:	687b      	ldr	r3, [r7, #4]
    9294:	f893 3020 	ldrb.w	r3, [r3, #32]
    9298:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    929a:	7bfb      	ldrb	r3, [r7, #15]
    929c:	f003 0301 	and.w	r3, r3, #1
    92a0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    92a2:	7bfb      	ldrb	r3, [r7, #15]
    92a4:	2b00      	cmp	r3, #0
    92a6:	bf14      	ite	ne
    92a8:	2301      	movne	r3, #1
    92aa:	2300      	moveq	r3, #0
    92ac:	b2db      	uxtb	r3, r3
}
    92ae:	4618      	mov	r0, r3
    92b0:	3714      	adds	r7, #20
    92b2:	46bd      	mov	sp, r7
    92b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    92b8:	4770      	bx	lr

000092ba <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    92ba:	b480      	push	{r7}
    92bc:	b083      	sub	sp, #12
    92be:	af00      	add	r7, sp, #0
    92c0:	6078      	str	r0, [r7, #4]
    92c2:	460b      	mov	r3, r1
    92c4:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    92c6:	bf00      	nop
    92c8:	687b      	ldr	r3, [r7, #4]
    92ca:	789b      	ldrb	r3, [r3, #2]
    92cc:	b2da      	uxtb	r2, r3
    92ce:	78fb      	ldrb	r3, [r7, #3]
    92d0:	4013      	ands	r3, r2
    92d2:	b2db      	uxtb	r3, r3
    92d4:	2b00      	cmp	r3, #0
    92d6:	d1f7      	bne.n	92c8 <hri_usb_wait_for_sync+0xe>
	};
}
    92d8:	bf00      	nop
    92da:	370c      	adds	r7, #12
    92dc:	46bd      	mov	sp, r7
    92de:	f85d 7b04 	ldr.w	r7, [sp], #4
    92e2:	4770      	bx	lr

000092e4 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    92e4:	b480      	push	{r7}
    92e6:	b083      	sub	sp, #12
    92e8:	af00      	add	r7, sp, #0
    92ea:	6078      	str	r0, [r7, #4]
    92ec:	460b      	mov	r3, r1
    92ee:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    92f0:	687b      	ldr	r3, [r7, #4]
    92f2:	789b      	ldrb	r3, [r3, #2]
    92f4:	b2da      	uxtb	r2, r3
    92f6:	78fb      	ldrb	r3, [r7, #3]
    92f8:	4013      	ands	r3, r2
    92fa:	b2db      	uxtb	r3, r3
    92fc:	2b00      	cmp	r3, #0
    92fe:	bf14      	ite	ne
    9300:	2301      	movne	r3, #1
    9302:	2300      	moveq	r3, #0
    9304:	b2db      	uxtb	r3, r3
}
    9306:	4618      	mov	r0, r3
    9308:	370c      	adds	r7, #12
    930a:	46bd      	mov	sp, r7
    930c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9310:	4770      	bx	lr

00009312 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    9312:	b480      	push	{r7}
    9314:	b085      	sub	sp, #20
    9316:	af00      	add	r7, sp, #0
    9318:	6078      	str	r0, [r7, #4]
    931a:	460b      	mov	r3, r1
    931c:	70fb      	strb	r3, [r7, #3]
    931e:	4613      	mov	r3, r2
    9320:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9322:	78fb      	ldrb	r3, [r7, #3]
    9324:	687a      	ldr	r2, [r7, #4]
    9326:	3308      	adds	r3, #8
    9328:	015b      	lsls	r3, r3, #5
    932a:	4413      	add	r3, r2
    932c:	3307      	adds	r3, #7
    932e:	781b      	ldrb	r3, [r3, #0]
    9330:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9332:	7bfa      	ldrb	r2, [r7, #15]
    9334:	78bb      	ldrb	r3, [r7, #2]
    9336:	4013      	ands	r3, r2
    9338:	73fb      	strb	r3, [r7, #15]
	return tmp;
    933a:	7bfb      	ldrb	r3, [r7, #15]
}
    933c:	4618      	mov	r0, r3
    933e:	3714      	adds	r7, #20
    9340:	46bd      	mov	sp, r7
    9342:	f85d 7b04 	ldr.w	r7, [sp], #4
    9346:	4770      	bx	lr

00009348 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    9348:	b480      	push	{r7}
    934a:	b083      	sub	sp, #12
    934c:	af00      	add	r7, sp, #0
    934e:	6078      	str	r0, [r7, #4]
    9350:	460b      	mov	r3, r1
    9352:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9354:	78fb      	ldrb	r3, [r7, #3]
    9356:	687a      	ldr	r2, [r7, #4]
    9358:	3308      	adds	r3, #8
    935a:	015b      	lsls	r3, r3, #5
    935c:	4413      	add	r3, r2
    935e:	3307      	adds	r3, #7
    9360:	781b      	ldrb	r3, [r3, #0]
    9362:	b2db      	uxtb	r3, r3
}
    9364:	4618      	mov	r0, r3
    9366:	370c      	adds	r7, #12
    9368:	46bd      	mov	sp, r7
    936a:	f85d 7b04 	ldr.w	r7, [sp], #4
    936e:	4770      	bx	lr

00009370 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    9370:	b480      	push	{r7}
    9372:	b083      	sub	sp, #12
    9374:	af00      	add	r7, sp, #0
    9376:	6078      	str	r0, [r7, #4]
    9378:	460b      	mov	r3, r1
    937a:	70fb      	strb	r3, [r7, #3]
    937c:	4613      	mov	r3, r2
    937e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9380:	78fb      	ldrb	r3, [r7, #3]
    9382:	687a      	ldr	r2, [r7, #4]
    9384:	3308      	adds	r3, #8
    9386:	015b      	lsls	r3, r3, #5
    9388:	4413      	add	r3, r2
    938a:	3307      	adds	r3, #7
    938c:	78ba      	ldrb	r2, [r7, #2]
    938e:	701a      	strb	r2, [r3, #0]
}
    9390:	bf00      	nop
    9392:	370c      	adds	r7, #12
    9394:	46bd      	mov	sp, r7
    9396:	f85d 7b04 	ldr.w	r7, [sp], #4
    939a:	4770      	bx	lr

0000939c <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    939c:	b480      	push	{r7}
    939e:	b083      	sub	sp, #12
    93a0:	af00      	add	r7, sp, #0
    93a2:	6078      	str	r0, [r7, #4]
    93a4:	460b      	mov	r3, r1
    93a6:	70fb      	strb	r3, [r7, #3]
    93a8:	4613      	mov	r3, r2
    93aa:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    93ac:	78fb      	ldrb	r3, [r7, #3]
    93ae:	687a      	ldr	r2, [r7, #4]
    93b0:	3308      	adds	r3, #8
    93b2:	015b      	lsls	r3, r3, #5
    93b4:	4413      	add	r3, r2
    93b6:	3305      	adds	r3, #5
    93b8:	78ba      	ldrb	r2, [r7, #2]
    93ba:	701a      	strb	r2, [r3, #0]
}
    93bc:	bf00      	nop
    93be:	370c      	adds	r7, #12
    93c0:	46bd      	mov	sp, r7
    93c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    93c6:	4770      	bx	lr

000093c8 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    93c8:	b480      	push	{r7}
    93ca:	b083      	sub	sp, #12
    93cc:	af00      	add	r7, sp, #0
    93ce:	6078      	str	r0, [r7, #4]
    93d0:	460b      	mov	r3, r1
    93d2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    93d4:	78fb      	ldrb	r3, [r7, #3]
    93d6:	687a      	ldr	r2, [r7, #4]
    93d8:	3308      	adds	r3, #8
    93da:	015b      	lsls	r3, r3, #5
    93dc:	4413      	add	r3, r2
    93de:	3306      	adds	r3, #6
    93e0:	781b      	ldrb	r3, [r3, #0]
    93e2:	b2db      	uxtb	r3, r3
}
    93e4:	4618      	mov	r0, r3
    93e6:	370c      	adds	r7, #12
    93e8:	46bd      	mov	sp, r7
    93ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    93ee:	4770      	bx	lr

000093f0 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    93f0:	b480      	push	{r7}
    93f2:	b083      	sub	sp, #12
    93f4:	af00      	add	r7, sp, #0
    93f6:	6078      	str	r0, [r7, #4]
    93f8:	460b      	mov	r3, r1
    93fa:	70fb      	strb	r3, [r7, #3]
    93fc:	4613      	mov	r3, r2
    93fe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9400:	78fb      	ldrb	r3, [r7, #3]
    9402:	687a      	ldr	r2, [r7, #4]
    9404:	3308      	adds	r3, #8
    9406:	015b      	lsls	r3, r3, #5
    9408:	4413      	add	r3, r2
    940a:	3304      	adds	r3, #4
    940c:	78ba      	ldrb	r2, [r7, #2]
    940e:	701a      	strb	r2, [r3, #0]
}
    9410:	bf00      	nop
    9412:	370c      	adds	r7, #12
    9414:	46bd      	mov	sp, r7
    9416:	f85d 7b04 	ldr.w	r7, [sp], #4
    941a:	4770      	bx	lr

0000941c <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    941c:	b480      	push	{r7}
    941e:	b083      	sub	sp, #12
    9420:	af00      	add	r7, sp, #0
    9422:	6078      	str	r0, [r7, #4]
    9424:	460b      	mov	r3, r1
    9426:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    9428:	78fb      	ldrb	r3, [r7, #3]
    942a:	687a      	ldr	r2, [r7, #4]
    942c:	015b      	lsls	r3, r3, #5
    942e:	4413      	add	r3, r2
    9430:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9434:	2210      	movs	r2, #16
    9436:	701a      	strb	r2, [r3, #0]
}
    9438:	bf00      	nop
    943a:	370c      	adds	r7, #12
    943c:	46bd      	mov	sp, r7
    943e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9442:	4770      	bx	lr

00009444 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    9444:	b480      	push	{r7}
    9446:	b083      	sub	sp, #12
    9448:	af00      	add	r7, sp, #0
    944a:	6078      	str	r0, [r7, #4]
    944c:	460b      	mov	r3, r1
    944e:	70fb      	strb	r3, [r7, #3]
    9450:	4613      	mov	r3, r2
    9452:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9454:	78fb      	ldrb	r3, [r7, #3]
    9456:	687a      	ldr	r2, [r7, #4]
    9458:	015b      	lsls	r3, r3, #5
    945a:	4413      	add	r3, r2
    945c:	f203 1309 	addw	r3, r3, #265	; 0x109
    9460:	78ba      	ldrb	r2, [r7, #2]
    9462:	701a      	strb	r2, [r3, #0]
}
    9464:	bf00      	nop
    9466:	370c      	adds	r7, #12
    9468:	46bd      	mov	sp, r7
    946a:	f85d 7b04 	ldr.w	r7, [sp], #4
    946e:	4770      	bx	lr

00009470 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    9470:	b480      	push	{r7}
    9472:	b083      	sub	sp, #12
    9474:	af00      	add	r7, sp, #0
    9476:	6078      	str	r0, [r7, #4]
    9478:	460b      	mov	r3, r1
    947a:	70fb      	strb	r3, [r7, #3]
    947c:	4613      	mov	r3, r2
    947e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9480:	78fb      	ldrb	r3, [r7, #3]
    9482:	687a      	ldr	r2, [r7, #4]
    9484:	015b      	lsls	r3, r3, #5
    9486:	4413      	add	r3, r2
    9488:	f503 7384 	add.w	r3, r3, #264	; 0x108
    948c:	78ba      	ldrb	r2, [r7, #2]
    948e:	701a      	strb	r2, [r3, #0]
}
    9490:	bf00      	nop
    9492:	370c      	adds	r7, #12
    9494:	46bd      	mov	sp, r7
    9496:	f85d 7b04 	ldr.w	r7, [sp], #4
    949a:	4770      	bx	lr

0000949c <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    949c:	b480      	push	{r7}
    949e:	b085      	sub	sp, #20
    94a0:	af00      	add	r7, sp, #0
    94a2:	6078      	str	r0, [r7, #4]
    94a4:	460b      	mov	r3, r1
    94a6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    94a8:	78fb      	ldrb	r3, [r7, #3]
    94aa:	687a      	ldr	r2, [r7, #4]
    94ac:	3308      	adds	r3, #8
    94ae:	015b      	lsls	r3, r3, #5
    94b0:	4413      	add	r3, r2
    94b2:	781b      	ldrb	r3, [r3, #0]
    94b4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    94b6:	7bfb      	ldrb	r3, [r7, #15]
    94b8:	f003 0307 	and.w	r3, r3, #7
    94bc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    94be:	7bfb      	ldrb	r3, [r7, #15]
}
    94c0:	4618      	mov	r0, r3
    94c2:	3714      	adds	r7, #20
    94c4:	46bd      	mov	sp, r7
    94c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    94ca:	4770      	bx	lr

000094cc <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    94cc:	b480      	push	{r7}
    94ce:	b085      	sub	sp, #20
    94d0:	af00      	add	r7, sp, #0
    94d2:	6078      	str	r0, [r7, #4]
    94d4:	460b      	mov	r3, r1
    94d6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    94d8:	78fb      	ldrb	r3, [r7, #3]
    94da:	687a      	ldr	r2, [r7, #4]
    94dc:	3308      	adds	r3, #8
    94de:	015b      	lsls	r3, r3, #5
    94e0:	4413      	add	r3, r2
    94e2:	781b      	ldrb	r3, [r3, #0]
    94e4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    94e6:	7bfb      	ldrb	r3, [r7, #15]
    94e8:	091b      	lsrs	r3, r3, #4
    94ea:	b2db      	uxtb	r3, r3
    94ec:	f003 0307 	and.w	r3, r3, #7
    94f0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    94f2:	7bfb      	ldrb	r3, [r7, #15]
}
    94f4:	4618      	mov	r0, r3
    94f6:	3714      	adds	r7, #20
    94f8:	46bd      	mov	sp, r7
    94fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    94fe:	4770      	bx	lr

00009500 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    9500:	b480      	push	{r7}
    9502:	b083      	sub	sp, #12
    9504:	af00      	add	r7, sp, #0
    9506:	6078      	str	r0, [r7, #4]
    9508:	460b      	mov	r3, r1
    950a:	70fb      	strb	r3, [r7, #3]
    950c:	4613      	mov	r3, r2
    950e:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    9510:	78fb      	ldrb	r3, [r7, #3]
    9512:	687a      	ldr	r2, [r7, #4]
    9514:	3308      	adds	r3, #8
    9516:	015b      	lsls	r3, r3, #5
    9518:	4413      	add	r3, r2
    951a:	78ba      	ldrb	r2, [r7, #2]
    951c:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    951e:	bf00      	nop
    9520:	370c      	adds	r7, #12
    9522:	46bd      	mov	sp, r7
    9524:	f85d 7b04 	ldr.w	r7, [sp], #4
    9528:	4770      	bx	lr

0000952a <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    952a:	b480      	push	{r7}
    952c:	b083      	sub	sp, #12
    952e:	af00      	add	r7, sp, #0
    9530:	6078      	str	r0, [r7, #4]
    9532:	460b      	mov	r3, r1
    9534:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9536:	78fb      	ldrb	r3, [r7, #3]
    9538:	687a      	ldr	r2, [r7, #4]
    953a:	3308      	adds	r3, #8
    953c:	015b      	lsls	r3, r3, #5
    953e:	4413      	add	r3, r2
    9540:	781b      	ldrb	r3, [r3, #0]
    9542:	b2db      	uxtb	r3, r3
}
    9544:	4618      	mov	r0, r3
    9546:	370c      	adds	r7, #12
    9548:	46bd      	mov	sp, r7
    954a:	f85d 7b04 	ldr.w	r7, [sp], #4
    954e:	4770      	bx	lr

00009550 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    9550:	b480      	push	{r7}
    9552:	b083      	sub	sp, #12
    9554:	af00      	add	r7, sp, #0
    9556:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    9558:	687b      	ldr	r3, [r7, #4]
    955a:	8b9b      	ldrh	r3, [r3, #28]
    955c:	b29b      	uxth	r3, r3
}
    955e:	4618      	mov	r0, r3
    9560:	370c      	adds	r7, #12
    9562:	46bd      	mov	sp, r7
    9564:	f85d 7b04 	ldr.w	r7, [sp], #4
    9568:	4770      	bx	lr

0000956a <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    956a:	b480      	push	{r7}
    956c:	b083      	sub	sp, #12
    956e:	af00      	add	r7, sp, #0
    9570:	6078      	str	r0, [r7, #4]
    9572:	460b      	mov	r3, r1
    9574:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9576:	687b      	ldr	r3, [r7, #4]
    9578:	887a      	ldrh	r2, [r7, #2]
    957a:	839a      	strh	r2, [r3, #28]
}
    957c:	bf00      	nop
    957e:	370c      	adds	r7, #12
    9580:	46bd      	mov	sp, r7
    9582:	f85d 7b04 	ldr.w	r7, [sp], #4
    9586:	4770      	bx	lr

00009588 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9588:	b480      	push	{r7}
    958a:	b083      	sub	sp, #12
    958c:	af00      	add	r7, sp, #0
    958e:	6078      	str	r0, [r7, #4]
    9590:	460b      	mov	r3, r1
    9592:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9594:	687b      	ldr	r3, [r7, #4]
    9596:	887a      	ldrh	r2, [r7, #2]
    9598:	831a      	strh	r2, [r3, #24]
}
    959a:	bf00      	nop
    959c:	370c      	adds	r7, #12
    959e:	46bd      	mov	sp, r7
    95a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    95a4:	4770      	bx	lr

000095a6 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    95a6:	b480      	push	{r7}
    95a8:	b083      	sub	sp, #12
    95aa:	af00      	add	r7, sp, #0
    95ac:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	8b1b      	ldrh	r3, [r3, #24]
    95b2:	b29b      	uxth	r3, r3
}
    95b4:	4618      	mov	r0, r3
    95b6:	370c      	adds	r7, #12
    95b8:	46bd      	mov	sp, r7
    95ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    95be:	4770      	bx	lr

000095c0 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    95c0:	b480      	push	{r7}
    95c2:	b083      	sub	sp, #12
    95c4:	af00      	add	r7, sp, #0
    95c6:	6078      	str	r0, [r7, #4]
    95c8:	460b      	mov	r3, r1
    95ca:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    95cc:	687b      	ldr	r3, [r7, #4]
    95ce:	887a      	ldrh	r2, [r7, #2]
    95d0:	829a      	strh	r2, [r3, #20]
}
    95d2:	bf00      	nop
    95d4:	370c      	adds	r7, #12
    95d6:	46bd      	mov	sp, r7
    95d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    95dc:	4770      	bx	lr

000095de <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    95de:	b480      	push	{r7}
    95e0:	b085      	sub	sp, #20
    95e2:	af00      	add	r7, sp, #0
    95e4:	6078      	str	r0, [r7, #4]
    95e6:	460b      	mov	r3, r1
    95e8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    95ea:	687b      	ldr	r3, [r7, #4]
    95ec:	789b      	ldrb	r3, [r3, #2]
    95ee:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    95f0:	7bfa      	ldrb	r2, [r7, #15]
    95f2:	78fb      	ldrb	r3, [r7, #3]
    95f4:	4013      	ands	r3, r2
    95f6:	73fb      	strb	r3, [r7, #15]
	return tmp;
    95f8:	7bfb      	ldrb	r3, [r7, #15]
}
    95fa:	4618      	mov	r0, r3
    95fc:	3714      	adds	r7, #20
    95fe:	46bd      	mov	sp, r7
    9600:	f85d 7b04 	ldr.w	r7, [sp], #4
    9604:	4770      	bx	lr
	...

00009608 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9608:	b580      	push	{r7, lr}
    960a:	b082      	sub	sp, #8
    960c:	af00      	add	r7, sp, #0
    960e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    9610:	687b      	ldr	r3, [r7, #4]
    9612:	781b      	ldrb	r3, [r3, #0]
    9614:	b2db      	uxtb	r3, r3
    9616:	f023 0302 	bic.w	r3, r3, #2
    961a:	b2da      	uxtb	r2, r3
    961c:	687b      	ldr	r3, [r7, #4]
    961e:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    9620:	2103      	movs	r1, #3
    9622:	6878      	ldr	r0, [r7, #4]
    9624:	4b02      	ldr	r3, [pc, #8]	; (9630 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    9626:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    9628:	bf00      	nop
    962a:	3708      	adds	r7, #8
    962c:	46bd      	mov	sp, r7
    962e:	bd80      	pop	{r7, pc}
    9630:	000092bb 	.word	0x000092bb

00009634 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    9634:	b580      	push	{r7, lr}
    9636:	b084      	sub	sp, #16
    9638:	af00      	add	r7, sp, #0
    963a:	6078      	str	r0, [r7, #4]
    963c:	460b      	mov	r3, r1
    963e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9640:	2103      	movs	r1, #3
    9642:	6878      	ldr	r0, [r7, #4]
    9644:	4b06      	ldr	r3, [pc, #24]	; (9660 <hri_usb_get_CTRLA_reg+0x2c>)
    9646:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    9648:	687b      	ldr	r3, [r7, #4]
    964a:	781b      	ldrb	r3, [r3, #0]
    964c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    964e:	7bfa      	ldrb	r2, [r7, #15]
    9650:	78fb      	ldrb	r3, [r7, #3]
    9652:	4013      	ands	r3, r2
    9654:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9656:	7bfb      	ldrb	r3, [r7, #15]
}
    9658:	4618      	mov	r0, r3
    965a:	3710      	adds	r7, #16
    965c:	46bd      	mov	sp, r7
    965e:	bd80      	pop	{r7, pc}
    9660:	000092bb 	.word	0x000092bb

00009664 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    9664:	b580      	push	{r7, lr}
    9666:	b082      	sub	sp, #8
    9668:	af00      	add	r7, sp, #0
    966a:	6078      	str	r0, [r7, #4]
    966c:	460b      	mov	r3, r1
    966e:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    9670:	687b      	ldr	r3, [r7, #4]
    9672:	78fa      	ldrb	r2, [r7, #3]
    9674:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9676:	2103      	movs	r1, #3
    9678:	6878      	ldr	r0, [r7, #4]
    967a:	4b03      	ldr	r3, [pc, #12]	; (9688 <hri_usb_write_CTRLA_reg+0x24>)
    967c:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    967e:	bf00      	nop
    9680:	3708      	adds	r7, #8
    9682:	46bd      	mov	sp, r7
    9684:	bd80      	pop	{r7, pc}
    9686:	bf00      	nop
    9688:	000092bb 	.word	0x000092bb

0000968c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    968c:	b580      	push	{r7, lr}
    968e:	b082      	sub	sp, #8
    9690:	af00      	add	r7, sp, #0
    9692:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9694:	2103      	movs	r1, #3
    9696:	6878      	ldr	r0, [r7, #4]
    9698:	4b04      	ldr	r3, [pc, #16]	; (96ac <hri_usb_read_CTRLA_reg+0x20>)
    969a:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    969c:	687b      	ldr	r3, [r7, #4]
    969e:	781b      	ldrb	r3, [r3, #0]
    96a0:	b2db      	uxtb	r3, r3
}
    96a2:	4618      	mov	r0, r3
    96a4:	3708      	adds	r7, #8
    96a6:	46bd      	mov	sp, r7
    96a8:	bd80      	pop	{r7, pc}
    96aa:	bf00      	nop
    96ac:	000092bb 	.word	0x000092bb

000096b0 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    96b0:	b480      	push	{r7}
    96b2:	b083      	sub	sp, #12
    96b4:	af00      	add	r7, sp, #0
    96b6:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    96b8:	687b      	ldr	r3, [r7, #4]
    96ba:	891b      	ldrh	r3, [r3, #8]
    96bc:	b29b      	uxth	r3, r3
    96be:	f023 0301 	bic.w	r3, r3, #1
    96c2:	b29a      	uxth	r2, r3
    96c4:	687b      	ldr	r3, [r7, #4]
    96c6:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    96c8:	bf00      	nop
    96ca:	370c      	adds	r7, #12
    96cc:	46bd      	mov	sp, r7
    96ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    96d2:	4770      	bx	lr

000096d4 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    96d4:	b480      	push	{r7}
    96d6:	b083      	sub	sp, #12
    96d8:	af00      	add	r7, sp, #0
    96da:	6078      	str	r0, [r7, #4]
    96dc:	460b      	mov	r3, r1
    96de:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    96e0:	687b      	ldr	r3, [r7, #4]
    96e2:	887a      	ldrh	r2, [r7, #2]
    96e4:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    96e6:	bf00      	nop
    96e8:	370c      	adds	r7, #12
    96ea:	46bd      	mov	sp, r7
    96ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    96f0:	4770      	bx	lr

000096f2 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    96f2:	b480      	push	{r7}
    96f4:	b083      	sub	sp, #12
    96f6:	af00      	add	r7, sp, #0
    96f8:	6078      	str	r0, [r7, #4]
    96fa:	460b      	mov	r3, r1
    96fc:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    96fe:	687b      	ldr	r3, [r7, #4]
    9700:	78fa      	ldrb	r2, [r7, #3]
    9702:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    9704:	bf00      	nop
    9706:	370c      	adds	r7, #12
    9708:	46bd      	mov	sp, r7
    970a:	f85d 7b04 	ldr.w	r7, [sp], #4
    970e:	4770      	bx	lr

00009710 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    9710:	b480      	push	{r7}
    9712:	b083      	sub	sp, #12
    9714:	af00      	add	r7, sp, #0
    9716:	6078      	str	r0, [r7, #4]
    9718:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    971a:	687b      	ldr	r3, [r7, #4]
    971c:	683a      	ldr	r2, [r7, #0]
    971e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    9720:	bf00      	nop
    9722:	370c      	adds	r7, #12
    9724:	46bd      	mov	sp, r7
    9726:	f85d 7b04 	ldr.w	r7, [sp], #4
    972a:	4770      	bx	lr

0000972c <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    972c:	b480      	push	{r7}
    972e:	b083      	sub	sp, #12
    9730:	af00      	add	r7, sp, #0
    9732:	6078      	str	r0, [r7, #4]
    9734:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    9736:	2300      	movs	r3, #0
}
    9738:	4618      	mov	r0, r3
    973a:	370c      	adds	r7, #12
    973c:	46bd      	mov	sp, r7
    973e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9742:	4770      	bx	lr

00009744 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9744:	b480      	push	{r7}
    9746:	b085      	sub	sp, #20
    9748:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    974a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    974e:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    9750:	4b28      	ldr	r3, [pc, #160]	; (97f4 <_usb_load_calib+0xb0>)
    9752:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    9754:	f003 031f 	and.w	r3, r3, #31
    9758:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    975a:	4b26      	ldr	r3, [pc, #152]	; (97f4 <_usb_load_calib+0xb0>)
    975c:	681b      	ldr	r3, [r3, #0]
    975e:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    9760:	f003 031f 	and.w	r3, r3, #31
    9764:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9766:	4b23      	ldr	r3, [pc, #140]	; (97f4 <_usb_load_calib+0xb0>)
    9768:	681b      	ldr	r3, [r3, #0]
    976a:	0a9b      	lsrs	r3, r3, #10
    976c:	f003 0307 	and.w	r3, r3, #7
    9770:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    9772:	68fb      	ldr	r3, [r7, #12]
    9774:	2b00      	cmp	r3, #0
    9776:	d002      	beq.n	977e <_usb_load_calib+0x3a>
    9778:	68fb      	ldr	r3, [r7, #12]
    977a:	2b1f      	cmp	r3, #31
    977c:	d101      	bne.n	9782 <_usb_load_calib+0x3e>
		pad_transn = 9;
    977e:	2309      	movs	r3, #9
    9780:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    9782:	68bb      	ldr	r3, [r7, #8]
    9784:	2b00      	cmp	r3, #0
    9786:	d002      	beq.n	978e <_usb_load_calib+0x4a>
    9788:	68bb      	ldr	r3, [r7, #8]
    978a:	2b1f      	cmp	r3, #31
    978c:	d101      	bne.n	9792 <_usb_load_calib+0x4e>
		pad_transp = 25;
    978e:	2319      	movs	r3, #25
    9790:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    9792:	687b      	ldr	r3, [r7, #4]
    9794:	2b00      	cmp	r3, #0
    9796:	d002      	beq.n	979e <_usb_load_calib+0x5a>
    9798:	687b      	ldr	r3, [r7, #4]
    979a:	2b07      	cmp	r3, #7
    979c:	d101      	bne.n	97a2 <_usb_load_calib+0x5e>
		pad_trim = 6;
    979e:	2306      	movs	r3, #6
    97a0:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    97a2:	68fb      	ldr	r3, [r7, #12]
    97a4:	b29b      	uxth	r3, r3
    97a6:	019b      	lsls	r3, r3, #6
    97a8:	b29b      	uxth	r3, r3
    97aa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    97ae:	b29a      	uxth	r2, r3
    97b0:	68bb      	ldr	r3, [r7, #8]
    97b2:	b29b      	uxth	r3, r3
    97b4:	f003 031f 	and.w	r3, r3, #31
    97b8:	b29b      	uxth	r3, r3
    97ba:	4313      	orrs	r3, r2
    97bc:	b29a      	uxth	r2, r3
    97be:	687b      	ldr	r3, [r7, #4]
    97c0:	b29b      	uxth	r3, r3
    97c2:	031b      	lsls	r3, r3, #12
    97c4:	b29b      	uxth	r3, r3
    97c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    97ca:	b29b      	uxth	r3, r3
    97cc:	4313      	orrs	r3, r2
    97ce:	b29a      	uxth	r2, r3
    97d0:	683b      	ldr	r3, [r7, #0]
    97d2:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    97d4:	683a      	ldr	r2, [r7, #0]
    97d6:	78d3      	ldrb	r3, [r2, #3]
    97d8:	f043 0303 	orr.w	r3, r3, #3
    97dc:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    97de:	683a      	ldr	r2, [r7, #0]
    97e0:	78d3      	ldrb	r3, [r2, #3]
    97e2:	f043 030c 	orr.w	r3, r3, #12
    97e6:	70d3      	strb	r3, [r2, #3]
}
    97e8:	bf00      	nop
    97ea:	3714      	adds	r7, #20
    97ec:	46bd      	mov	sp, r7
    97ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    97f2:	4770      	bx	lr
    97f4:	00800084 	.word	0x00800084

000097f8 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    97f8:	b580      	push	{r7, lr}
    97fa:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    97fc:	bf00      	nop
    97fe:	2203      	movs	r2, #3
    9800:	2100      	movs	r1, #0
    9802:	4804      	ldr	r0, [pc, #16]	; (9814 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    9804:	4b04      	ldr	r3, [pc, #16]	; (9818 <_usb_d_dev_wait_dpll_rdy+0x20>)
    9806:	4798      	blx	r3
    9808:	4603      	mov	r3, r0
    980a:	2b03      	cmp	r3, #3
    980c:	d1f7      	bne.n	97fe <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    980e:	bf00      	nop
    9810:	bd80      	pop	{r7, pc}
    9812:	bf00      	nop
    9814:	40001000 	.word	0x40001000
    9818:	0000922d 	.word	0x0000922d

0000981c <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    981c:	b580      	push	{r7, lr}
    981e:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    9820:	480e      	ldr	r0, [pc, #56]	; (985c <_usb_d_dev_wait_dfll_rdy+0x40>)
    9822:	4b0f      	ldr	r3, [pc, #60]	; (9860 <_usb_d_dev_wait_dfll_rdy+0x44>)
    9824:	4798      	blx	r3
    9826:	4603      	mov	r3, r0
    9828:	2b00      	cmp	r3, #0
    982a:	d00a      	beq.n	9842 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    982c:	bf00      	nop
    982e:	f44f 6110 	mov.w	r1, #2304	; 0x900
    9832:	480a      	ldr	r0, [pc, #40]	; (985c <_usb_d_dev_wait_dfll_rdy+0x40>)
    9834:	4b0b      	ldr	r3, [pc, #44]	; (9864 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9836:	4798      	blx	r3
    9838:	4603      	mov	r3, r0
    983a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    983e:	d1f6      	bne.n	982e <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    9840:	e009      	b.n	9856 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    9842:	bf00      	nop
    9844:	f44f 7180 	mov.w	r1, #256	; 0x100
    9848:	4804      	ldr	r0, [pc, #16]	; (985c <_usb_d_dev_wait_dfll_rdy+0x40>)
    984a:	4b06      	ldr	r3, [pc, #24]	; (9864 <_usb_d_dev_wait_dfll_rdy+0x48>)
    984c:	4798      	blx	r3
    984e:	4603      	mov	r3, r0
    9850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9854:	d1f6      	bne.n	9844 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    9856:	bf00      	nop
    9858:	bd80      	pop	{r7, pc}
    985a:	bf00      	nop
    985c:	40001000 	.word	0x40001000
    9860:	0000928b 	.word	0x0000928b
    9864:	00009265 	.word	0x00009265

00009868 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    9868:	b580      	push	{r7, lr}
    986a:	b082      	sub	sp, #8
    986c:	af00      	add	r7, sp, #0
    986e:	4603      	mov	r3, r0
    9870:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    9872:	79fb      	ldrb	r3, [r7, #7]
    9874:	2b00      	cmp	r3, #0
    9876:	d102      	bne.n	987e <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    9878:	4b05      	ldr	r3, [pc, #20]	; (9890 <_usb_d_dev_wait_clk_rdy+0x28>)
    987a:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    987c:	e004      	b.n	9888 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    987e:	79fb      	ldrb	r3, [r7, #7]
    9880:	2b01      	cmp	r3, #1
    9882:	d101      	bne.n	9888 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9884:	4b03      	ldr	r3, [pc, #12]	; (9894 <_usb_d_dev_wait_clk_rdy+0x2c>)
    9886:	4798      	blx	r3
}
    9888:	bf00      	nop
    988a:	3708      	adds	r7, #8
    988c:	46bd      	mov	sp, r7
    988e:	bd80      	pop	{r7, pc}
    9890:	0000981d 	.word	0x0000981d
    9894:	000097f9 	.word	0x000097f9

00009898 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9898:	b580      	push	{r7, lr}
    989a:	b082      	sub	sp, #8
    989c:	af00      	add	r7, sp, #0
    989e:	4603      	mov	r3, r0
    98a0:	6039      	str	r1, [r7, #0]
    98a2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    98a4:	683b      	ldr	r3, [r7, #0]
    98a6:	b2da      	uxtb	r2, r3
    98a8:	79fb      	ldrb	r3, [r7, #7]
    98aa:	4619      	mov	r1, r3
    98ac:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98b0:	4b02      	ldr	r3, [pc, #8]	; (98bc <_usbd_ep_int_ack+0x24>)
    98b2:	4798      	blx	r3
}
    98b4:	bf00      	nop
    98b6:	3708      	adds	r7, #8
    98b8:	46bd      	mov	sp, r7
    98ba:	bd80      	pop	{r7, pc}
    98bc:	00009371 	.word	0x00009371

000098c0 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    98c0:	b580      	push	{r7, lr}
    98c2:	b082      	sub	sp, #8
    98c4:	af00      	add	r7, sp, #0
    98c6:	4603      	mov	r3, r0
    98c8:	6039      	str	r1, [r7, #0]
    98ca:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    98cc:	683b      	ldr	r3, [r7, #0]
    98ce:	b2da      	uxtb	r2, r3
    98d0:	79fb      	ldrb	r3, [r7, #7]
    98d2:	4619      	mov	r1, r3
    98d4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98d8:	4b02      	ldr	r3, [pc, #8]	; (98e4 <_usbd_ep_int_en+0x24>)
    98da:	4798      	blx	r3
}
    98dc:	bf00      	nop
    98de:	3708      	adds	r7, #8
    98e0:	46bd      	mov	sp, r7
    98e2:	bd80      	pop	{r7, pc}
    98e4:	00009445 	.word	0x00009445

000098e8 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    98e8:	b580      	push	{r7, lr}
    98ea:	b082      	sub	sp, #8
    98ec:	af00      	add	r7, sp, #0
    98ee:	4603      	mov	r3, r0
    98f0:	6039      	str	r1, [r7, #0]
    98f2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    98f4:	683b      	ldr	r3, [r7, #0]
    98f6:	b2da      	uxtb	r2, r3
    98f8:	79fb      	ldrb	r3, [r7, #7]
    98fa:	4619      	mov	r1, r3
    98fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9900:	4b02      	ldr	r3, [pc, #8]	; (990c <_usbd_ep_int_dis+0x24>)
    9902:	4798      	blx	r3
}
    9904:	bf00      	nop
    9906:	3708      	adds	r7, #8
    9908:	46bd      	mov	sp, r7
    990a:	bd80      	pop	{r7, pc}
    990c:	00009471 	.word	0x00009471

00009910 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    9910:	b580      	push	{r7, lr}
    9912:	b082      	sub	sp, #8
    9914:	af00      	add	r7, sp, #0
    9916:	4603      	mov	r3, r0
    9918:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    991a:	79fb      	ldrb	r3, [r7, #7]
    991c:	4619      	mov	r1, r3
    991e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9922:	4b06      	ldr	r3, [pc, #24]	; (993c <_usbd_ep_is_ctrl+0x2c>)
    9924:	4798      	blx	r3
    9926:	4603      	mov	r3, r0
    9928:	2b11      	cmp	r3, #17
    992a:	bf0c      	ite	eq
    992c:	2301      	moveq	r3, #1
    992e:	2300      	movne	r3, #0
    9930:	b2db      	uxtb	r3, r3
}
    9932:	4618      	mov	r0, r3
    9934:	3708      	adds	r7, #8
    9936:	46bd      	mov	sp, r7
    9938:	bd80      	pop	{r7, pc}
    993a:	bf00      	nop
    993c:	0000952b 	.word	0x0000952b

00009940 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    9940:	b580      	push	{r7, lr}
    9942:	b082      	sub	sp, #8
    9944:	af00      	add	r7, sp, #0
    9946:	4603      	mov	r3, r0
    9948:	71fb      	strb	r3, [r7, #7]
    994a:	460b      	mov	r3, r1
    994c:	71bb      	strb	r3, [r7, #6]
    994e:	4613      	mov	r3, r2
    9950:	717b      	strb	r3, [r7, #5]
	if (st) {
    9952:	797b      	ldrb	r3, [r7, #5]
    9954:	2b00      	cmp	r3, #0
    9956:	d00b      	beq.n	9970 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9958:	79bb      	ldrb	r3, [r7, #6]
    995a:	2210      	movs	r2, #16
    995c:	fa02 f303 	lsl.w	r3, r2, r3
    9960:	b2da      	uxtb	r2, r3
    9962:	79fb      	ldrb	r3, [r7, #7]
    9964:	4619      	mov	r1, r3
    9966:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    996a:	4b09      	ldr	r3, [pc, #36]	; (9990 <_usbd_ep_set_stall+0x50>)
    996c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    996e:	e00a      	b.n	9986 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9970:	79bb      	ldrb	r3, [r7, #6]
    9972:	2210      	movs	r2, #16
    9974:	fa02 f303 	lsl.w	r3, r2, r3
    9978:	b2da      	uxtb	r2, r3
    997a:	79fb      	ldrb	r3, [r7, #7]
    997c:	4619      	mov	r1, r3
    997e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9982:	4b04      	ldr	r3, [pc, #16]	; (9994 <_usbd_ep_set_stall+0x54>)
    9984:	4798      	blx	r3
}
    9986:	bf00      	nop
    9988:	3708      	adds	r7, #8
    998a:	46bd      	mov	sp, r7
    998c:	bd80      	pop	{r7, pc}
    998e:	bf00      	nop
    9990:	0000939d 	.word	0x0000939d
    9994:	000093f1 	.word	0x000093f1

00009998 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9998:	b580      	push	{r7, lr}
    999a:	b084      	sub	sp, #16
    999c:	af00      	add	r7, sp, #0
    999e:	4603      	mov	r3, r0
    99a0:	460a      	mov	r2, r1
    99a2:	71fb      	strb	r3, [r7, #7]
    99a4:	4613      	mov	r3, r2
    99a6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    99a8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    99ac:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    99ae:	79fb      	ldrb	r3, [r7, #7]
    99b0:	4619      	mov	r1, r3
    99b2:	68f8      	ldr	r0, [r7, #12]
    99b4:	4b08      	ldr	r3, [pc, #32]	; (99d8 <_usbd_ep_is_stalled+0x40>)
    99b6:	4798      	blx	r3
    99b8:	4603      	mov	r3, r0
    99ba:	4619      	mov	r1, r3
    99bc:	79bb      	ldrb	r3, [r7, #6]
    99be:	2210      	movs	r2, #16
    99c0:	fa02 f303 	lsl.w	r3, r2, r3
    99c4:	400b      	ands	r3, r1
    99c6:	2b00      	cmp	r3, #0
    99c8:	bf14      	ite	ne
    99ca:	2301      	movne	r3, #1
    99cc:	2300      	moveq	r3, #0
    99ce:	b2db      	uxtb	r3, r3
}
    99d0:	4618      	mov	r0, r3
    99d2:	3710      	adds	r7, #16
    99d4:	46bd      	mov	sp, r7
    99d6:	bd80      	pop	{r7, pc}
    99d8:	000093c9 	.word	0x000093c9

000099dc <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    99dc:	b580      	push	{r7, lr}
    99de:	b084      	sub	sp, #16
    99e0:	af00      	add	r7, sp, #0
    99e2:	4603      	mov	r3, r0
    99e4:	460a      	mov	r2, r1
    99e6:	71fb      	strb	r3, [r7, #7]
    99e8:	4613      	mov	r3, r2
    99ea:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    99ec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    99f0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    99f2:	79fb      	ldrb	r3, [r7, #7]
    99f4:	4619      	mov	r1, r3
    99f6:	68f8      	ldr	r0, [r7, #12]
    99f8:	4b08      	ldr	r3, [pc, #32]	; (9a1c <_usbd_ep_is_stall_sent+0x40>)
    99fa:	4798      	blx	r3
    99fc:	4603      	mov	r3, r0
    99fe:	4619      	mov	r1, r3
    9a00:	79bb      	ldrb	r3, [r7, #6]
    9a02:	2220      	movs	r2, #32
    9a04:	fa02 f303 	lsl.w	r3, r2, r3
    9a08:	400b      	ands	r3, r1
    9a0a:	2b00      	cmp	r3, #0
    9a0c:	bf14      	ite	ne
    9a0e:	2301      	movne	r3, #1
    9a10:	2300      	moveq	r3, #0
    9a12:	b2db      	uxtb	r3, r3
}
    9a14:	4618      	mov	r0, r3
    9a16:	3710      	adds	r7, #16
    9a18:	46bd      	mov	sp, r7
    9a1a:	bd80      	pop	{r7, pc}
    9a1c:	00009349 	.word	0x00009349

00009a20 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    9a20:	b580      	push	{r7, lr}
    9a22:	b082      	sub	sp, #8
    9a24:	af00      	add	r7, sp, #0
    9a26:	4603      	mov	r3, r0
    9a28:	460a      	mov	r2, r1
    9a2a:	71fb      	strb	r3, [r7, #7]
    9a2c:	4613      	mov	r3, r2
    9a2e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9a30:	79bb      	ldrb	r3, [r7, #6]
    9a32:	2220      	movs	r2, #32
    9a34:	409a      	lsls	r2, r3
    9a36:	79fb      	ldrb	r3, [r7, #7]
    9a38:	4611      	mov	r1, r2
    9a3a:	4618      	mov	r0, r3
    9a3c:	4b02      	ldr	r3, [pc, #8]	; (9a48 <_usbd_ep_ack_stall+0x28>)
    9a3e:	4798      	blx	r3
}
    9a40:	bf00      	nop
    9a42:	3708      	adds	r7, #8
    9a44:	46bd      	mov	sp, r7
    9a46:	bd80      	pop	{r7, pc}
    9a48:	00009899 	.word	0x00009899

00009a4c <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    9a4c:	b580      	push	{r7, lr}
    9a4e:	b082      	sub	sp, #8
    9a50:	af00      	add	r7, sp, #0
    9a52:	4603      	mov	r3, r0
    9a54:	71fb      	strb	r3, [r7, #7]
    9a56:	460b      	mov	r3, r1
    9a58:	71bb      	strb	r3, [r7, #6]
    9a5a:	4613      	mov	r3, r2
    9a5c:	717b      	strb	r3, [r7, #5]
	if (en) {
    9a5e:	797b      	ldrb	r3, [r7, #5]
    9a60:	2b00      	cmp	r3, #0
    9a62:	d008      	beq.n	9a76 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9a64:	79bb      	ldrb	r3, [r7, #6]
    9a66:	2220      	movs	r2, #32
    9a68:	409a      	lsls	r2, r3
    9a6a:	79fb      	ldrb	r3, [r7, #7]
    9a6c:	4611      	mov	r1, r2
    9a6e:	4618      	mov	r0, r3
    9a70:	4b07      	ldr	r3, [pc, #28]	; (9a90 <_usbd_ep_int_stall_en+0x44>)
    9a72:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9a74:	e007      	b.n	9a86 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9a76:	79bb      	ldrb	r3, [r7, #6]
    9a78:	2220      	movs	r2, #32
    9a7a:	409a      	lsls	r2, r3
    9a7c:	79fb      	ldrb	r3, [r7, #7]
    9a7e:	4611      	mov	r1, r2
    9a80:	4618      	mov	r0, r3
    9a82:	4b04      	ldr	r3, [pc, #16]	; (9a94 <_usbd_ep_int_stall_en+0x48>)
    9a84:	4798      	blx	r3
}
    9a86:	bf00      	nop
    9a88:	3708      	adds	r7, #8
    9a8a:	46bd      	mov	sp, r7
    9a8c:	bd80      	pop	{r7, pc}
    9a8e:	bf00      	nop
    9a90:	000098c1 	.word	0x000098c1
    9a94:	000098e9 	.word	0x000098e9

00009a98 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9a98:	b580      	push	{r7, lr}
    9a9a:	b082      	sub	sp, #8
    9a9c:	af00      	add	r7, sp, #0
    9a9e:	4603      	mov	r3, r0
    9aa0:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    9aa2:	79fb      	ldrb	r3, [r7, #7]
    9aa4:	4619      	mov	r1, r3
    9aa6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9aaa:	4b03      	ldr	r3, [pc, #12]	; (9ab8 <_usbd_ep_stop_setup+0x20>)
    9aac:	4798      	blx	r3
}
    9aae:	bf00      	nop
    9ab0:	3708      	adds	r7, #8
    9ab2:	46bd      	mov	sp, r7
    9ab4:	bd80      	pop	{r7, pc}
    9ab6:	bf00      	nop
    9ab8:	0000941d 	.word	0x0000941d

00009abc <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9abc:	b580      	push	{r7, lr}
    9abe:	b082      	sub	sp, #8
    9ac0:	af00      	add	r7, sp, #0
    9ac2:	4603      	mov	r3, r0
    9ac4:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9ac6:	79fb      	ldrb	r3, [r7, #7]
    9ac8:	2210      	movs	r2, #16
    9aca:	4619      	mov	r1, r3
    9acc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ad0:	4b05      	ldr	r3, [pc, #20]	; (9ae8 <_usbd_ep_is_setup+0x2c>)
    9ad2:	4798      	blx	r3
    9ad4:	4603      	mov	r3, r0
    9ad6:	2b00      	cmp	r3, #0
    9ad8:	bf14      	ite	ne
    9ada:	2301      	movne	r3, #1
    9adc:	2300      	moveq	r3, #0
    9ade:	b2db      	uxtb	r3, r3
}
    9ae0:	4618      	mov	r0, r3
    9ae2:	3708      	adds	r7, #8
    9ae4:	46bd      	mov	sp, r7
    9ae6:	bd80      	pop	{r7, pc}
    9ae8:	00009313 	.word	0x00009313

00009aec <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    9aec:	b580      	push	{r7, lr}
    9aee:	b082      	sub	sp, #8
    9af0:	af00      	add	r7, sp, #0
    9af2:	4603      	mov	r3, r0
    9af4:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9af6:	79fb      	ldrb	r3, [r7, #7]
    9af8:	2110      	movs	r1, #16
    9afa:	4618      	mov	r0, r3
    9afc:	4b02      	ldr	r3, [pc, #8]	; (9b08 <_usbd_ep_ack_setup+0x1c>)
    9afe:	4798      	blx	r3
}
    9b00:	bf00      	nop
    9b02:	3708      	adds	r7, #8
    9b04:	46bd      	mov	sp, r7
    9b06:	bd80      	pop	{r7, pc}
    9b08:	00009899 	.word	0x00009899

00009b0c <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9b0c:	b580      	push	{r7, lr}
    9b0e:	b082      	sub	sp, #8
    9b10:	af00      	add	r7, sp, #0
    9b12:	4603      	mov	r3, r0
    9b14:	71fb      	strb	r3, [r7, #7]
    9b16:	460b      	mov	r3, r1
    9b18:	71bb      	strb	r3, [r7, #6]
    9b1a:	4613      	mov	r3, r2
    9b1c:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    9b1e:	797b      	ldrb	r3, [r7, #5]
    9b20:	2b00      	cmp	r3, #0
    9b22:	d00b      	beq.n	9b3c <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9b24:	79bb      	ldrb	r3, [r7, #6]
    9b26:	2201      	movs	r2, #1
    9b28:	fa02 f303 	lsl.w	r3, r2, r3
    9b2c:	b2da      	uxtb	r2, r3
    9b2e:	79fb      	ldrb	r3, [r7, #7]
    9b30:	4619      	mov	r1, r3
    9b32:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b36:	4b09      	ldr	r3, [pc, #36]	; (9b5c <_usbd_ep_set_toggle+0x50>)
    9b38:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    9b3a:	e00a      	b.n	9b52 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9b3c:	79bb      	ldrb	r3, [r7, #6]
    9b3e:	2201      	movs	r2, #1
    9b40:	fa02 f303 	lsl.w	r3, r2, r3
    9b44:	b2da      	uxtb	r2, r3
    9b46:	79fb      	ldrb	r3, [r7, #7]
    9b48:	4619      	mov	r1, r3
    9b4a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b4e:	4b04      	ldr	r3, [pc, #16]	; (9b60 <_usbd_ep_set_toggle+0x54>)
    9b50:	4798      	blx	r3
}
    9b52:	bf00      	nop
    9b54:	3708      	adds	r7, #8
    9b56:	46bd      	mov	sp, r7
    9b58:	bd80      	pop	{r7, pc}
    9b5a:	bf00      	nop
    9b5c:	0000939d 	.word	0x0000939d
    9b60:	000093f1 	.word	0x000093f1

00009b64 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9b64:	b580      	push	{r7, lr}
    9b66:	b082      	sub	sp, #8
    9b68:	af00      	add	r7, sp, #0
    9b6a:	4603      	mov	r3, r0
    9b6c:	460a      	mov	r2, r1
    9b6e:	71fb      	strb	r3, [r7, #7]
    9b70:	4613      	mov	r3, r2
    9b72:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9b74:	79bb      	ldrb	r3, [r7, #6]
    9b76:	2201      	movs	r2, #1
    9b78:	409a      	lsls	r2, r3
    9b7a:	79fb      	ldrb	r3, [r7, #7]
    9b7c:	4611      	mov	r1, r2
    9b7e:	4618      	mov	r0, r3
    9b80:	4b02      	ldr	r3, [pc, #8]	; (9b8c <_usbd_ep_ack_io_cpt+0x28>)
    9b82:	4798      	blx	r3
}
    9b84:	bf00      	nop
    9b86:	3708      	adds	r7, #8
    9b88:	46bd      	mov	sp, r7
    9b8a:	bd80      	pop	{r7, pc}
    9b8c:	00009899 	.word	0x00009899

00009b90 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9b90:	b480      	push	{r7}
    9b92:	b085      	sub	sp, #20
    9b94:	af00      	add	r7, sp, #0
    9b96:	4603      	mov	r3, r0
    9b98:	603a      	str	r2, [r7, #0]
    9b9a:	71fb      	strb	r3, [r7, #7]
    9b9c:	460b      	mov	r3, r1
    9b9e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9ba0:	79fa      	ldrb	r2, [r7, #7]
    9ba2:	79bb      	ldrb	r3, [r7, #6]
    9ba4:	0052      	lsls	r2, r2, #1
    9ba6:	4413      	add	r3, r2
    9ba8:	011b      	lsls	r3, r3, #4
    9baa:	4a06      	ldr	r2, [pc, #24]	; (9bc4 <_usbd_ep_set_buf+0x34>)
    9bac:	4413      	add	r3, r2
    9bae:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    9bb0:	68fb      	ldr	r3, [r7, #12]
    9bb2:	683a      	ldr	r2, [r7, #0]
    9bb4:	601a      	str	r2, [r3, #0]
}
    9bb6:	bf00      	nop
    9bb8:	3714      	adds	r7, #20
    9bba:	46bd      	mov	sp, r7
    9bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bc0:	4770      	bx	lr
    9bc2:	bf00      	nop
    9bc4:	20001150 	.word	0x20001150

00009bc8 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9bc8:	b480      	push	{r7}
    9bca:	b085      	sub	sp, #20
    9bcc:	af00      	add	r7, sp, #0
    9bce:	4603      	mov	r3, r0
    9bd0:	71fb      	strb	r3, [r7, #7]
    9bd2:	460b      	mov	r3, r1
    9bd4:	71bb      	strb	r3, [r7, #6]
    9bd6:	4613      	mov	r3, r2
    9bd8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9bda:	79fa      	ldrb	r2, [r7, #7]
    9bdc:	79bb      	ldrb	r3, [r7, #6]
    9bde:	0052      	lsls	r2, r2, #1
    9be0:	4413      	add	r3, r2
    9be2:	011b      	lsls	r3, r3, #4
    9be4:	4a08      	ldr	r2, [pc, #32]	; (9c08 <_usbd_ep_set_in_count+0x40>)
    9be6:	4413      	add	r3, r2
    9be8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9bea:	88bb      	ldrh	r3, [r7, #4]
    9bec:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9bf0:	b299      	uxth	r1, r3
    9bf2:	68fa      	ldr	r2, [r7, #12]
    9bf4:	6853      	ldr	r3, [r2, #4]
    9bf6:	f361 339b 	bfi	r3, r1, #14, #14
    9bfa:	6053      	str	r3, [r2, #4]
}
    9bfc:	bf00      	nop
    9bfe:	3714      	adds	r7, #20
    9c00:	46bd      	mov	sp, r7
    9c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c06:	4770      	bx	lr
    9c08:	20001150 	.word	0x20001150

00009c0c <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9c0c:	b480      	push	{r7}
    9c0e:	b085      	sub	sp, #20
    9c10:	af00      	add	r7, sp, #0
    9c12:	4603      	mov	r3, r0
    9c14:	71fb      	strb	r3, [r7, #7]
    9c16:	460b      	mov	r3, r1
    9c18:	71bb      	strb	r3, [r7, #6]
    9c1a:	4613      	mov	r3, r2
    9c1c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9c1e:	79fa      	ldrb	r2, [r7, #7]
    9c20:	79bb      	ldrb	r3, [r7, #6]
    9c22:	0052      	lsls	r2, r2, #1
    9c24:	4413      	add	r3, r2
    9c26:	011b      	lsls	r3, r3, #4
    9c28:	4a08      	ldr	r2, [pc, #32]	; (9c4c <_usbd_ep_set_in_size+0x40>)
    9c2a:	4413      	add	r3, r2
    9c2c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9c2e:	88bb      	ldrh	r3, [r7, #4]
    9c30:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9c34:	b299      	uxth	r1, r3
    9c36:	68fa      	ldr	r2, [r7, #12]
    9c38:	6853      	ldr	r3, [r2, #4]
    9c3a:	f361 030d 	bfi	r3, r1, #0, #14
    9c3e:	6053      	str	r3, [r2, #4]
}
    9c40:	bf00      	nop
    9c42:	3714      	adds	r7, #20
    9c44:	46bd      	mov	sp, r7
    9c46:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c4a:	4770      	bx	lr
    9c4c:	20001150 	.word	0x20001150

00009c50 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9c50:	b480      	push	{r7}
    9c52:	b085      	sub	sp, #20
    9c54:	af00      	add	r7, sp, #0
    9c56:	4603      	mov	r3, r0
    9c58:	71fb      	strb	r3, [r7, #7]
    9c5a:	460b      	mov	r3, r1
    9c5c:	71bb      	strb	r3, [r7, #6]
    9c5e:	4613      	mov	r3, r2
    9c60:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9c62:	79fa      	ldrb	r2, [r7, #7]
    9c64:	79bb      	ldrb	r3, [r7, #6]
    9c66:	0052      	lsls	r2, r2, #1
    9c68:	4413      	add	r3, r2
    9c6a:	011b      	lsls	r3, r3, #4
    9c6c:	4a08      	ldr	r2, [pc, #32]	; (9c90 <_usbd_ep_set_out_count+0x40>)
    9c6e:	4413      	add	r3, r2
    9c70:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9c72:	88bb      	ldrh	r3, [r7, #4]
    9c74:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9c78:	b299      	uxth	r1, r3
    9c7a:	68fa      	ldr	r2, [r7, #12]
    9c7c:	6853      	ldr	r3, [r2, #4]
    9c7e:	f361 030d 	bfi	r3, r1, #0, #14
    9c82:	6053      	str	r3, [r2, #4]
}
    9c84:	bf00      	nop
    9c86:	3714      	adds	r7, #20
    9c88:	46bd      	mov	sp, r7
    9c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c8e:	4770      	bx	lr
    9c90:	20001150 	.word	0x20001150

00009c94 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9c94:	b480      	push	{r7}
    9c96:	b085      	sub	sp, #20
    9c98:	af00      	add	r7, sp, #0
    9c9a:	4603      	mov	r3, r0
    9c9c:	71fb      	strb	r3, [r7, #7]
    9c9e:	460b      	mov	r3, r1
    9ca0:	71bb      	strb	r3, [r7, #6]
    9ca2:	4613      	mov	r3, r2
    9ca4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9ca6:	79fa      	ldrb	r2, [r7, #7]
    9ca8:	79bb      	ldrb	r3, [r7, #6]
    9caa:	0052      	lsls	r2, r2, #1
    9cac:	4413      	add	r3, r2
    9cae:	011b      	lsls	r3, r3, #4
    9cb0:	4a08      	ldr	r2, [pc, #32]	; (9cd4 <_usbd_ep_set_out_size+0x40>)
    9cb2:	4413      	add	r3, r2
    9cb4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9cb6:	88bb      	ldrh	r3, [r7, #4]
    9cb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9cbc:	b299      	uxth	r1, r3
    9cbe:	68fa      	ldr	r2, [r7, #12]
    9cc0:	6853      	ldr	r3, [r2, #4]
    9cc2:	f361 339b 	bfi	r3, r1, #14, #14
    9cc6:	6053      	str	r3, [r2, #4]
}
    9cc8:	bf00      	nop
    9cca:	3714      	adds	r7, #20
    9ccc:	46bd      	mov	sp, r7
    9cce:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cd2:	4770      	bx	lr
    9cd4:	20001150 	.word	0x20001150

00009cd8 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9cd8:	b580      	push	{r7, lr}
    9cda:	b084      	sub	sp, #16
    9cdc:	af00      	add	r7, sp, #0
    9cde:	60ba      	str	r2, [r7, #8]
    9ce0:	607b      	str	r3, [r7, #4]
    9ce2:	4603      	mov	r3, r0
    9ce4:	73fb      	strb	r3, [r7, #15]
    9ce6:	460b      	mov	r3, r1
    9ce8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    9cea:	68bb      	ldr	r3, [r7, #8]
    9cec:	b29a      	uxth	r2, r3
    9cee:	7bb9      	ldrb	r1, [r7, #14]
    9cf0:	7bfb      	ldrb	r3, [r7, #15]
    9cf2:	4618      	mov	r0, r3
    9cf4:	4b06      	ldr	r3, [pc, #24]	; (9d10 <_usbd_ep_set_in_trans+0x38>)
    9cf6:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    9cf8:	687b      	ldr	r3, [r7, #4]
    9cfa:	b29a      	uxth	r2, r3
    9cfc:	7bb9      	ldrb	r1, [r7, #14]
    9cfe:	7bfb      	ldrb	r3, [r7, #15]
    9d00:	4618      	mov	r0, r3
    9d02:	4b04      	ldr	r3, [pc, #16]	; (9d14 <_usbd_ep_set_in_trans+0x3c>)
    9d04:	4798      	blx	r3
}
    9d06:	bf00      	nop
    9d08:	3710      	adds	r7, #16
    9d0a:	46bd      	mov	sp, r7
    9d0c:	bd80      	pop	{r7, pc}
    9d0e:	bf00      	nop
    9d10:	00009c0d 	.word	0x00009c0d
    9d14:	00009bc9 	.word	0x00009bc9

00009d18 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9d18:	b580      	push	{r7, lr}
    9d1a:	b084      	sub	sp, #16
    9d1c:	af00      	add	r7, sp, #0
    9d1e:	60ba      	str	r2, [r7, #8]
    9d20:	607b      	str	r3, [r7, #4]
    9d22:	4603      	mov	r3, r0
    9d24:	73fb      	strb	r3, [r7, #15]
    9d26:	460b      	mov	r3, r1
    9d28:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    9d2a:	68bb      	ldr	r3, [r7, #8]
    9d2c:	b29a      	uxth	r2, r3
    9d2e:	7bb9      	ldrb	r1, [r7, #14]
    9d30:	7bfb      	ldrb	r3, [r7, #15]
    9d32:	4618      	mov	r0, r3
    9d34:	4b06      	ldr	r3, [pc, #24]	; (9d50 <_usbd_ep_set_out_trans+0x38>)
    9d36:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9d38:	687b      	ldr	r3, [r7, #4]
    9d3a:	b29a      	uxth	r2, r3
    9d3c:	7bb9      	ldrb	r1, [r7, #14]
    9d3e:	7bfb      	ldrb	r3, [r7, #15]
    9d40:	4618      	mov	r0, r3
    9d42:	4b04      	ldr	r3, [pc, #16]	; (9d54 <_usbd_ep_set_out_trans+0x3c>)
    9d44:	4798      	blx	r3
}
    9d46:	bf00      	nop
    9d48:	3710      	adds	r7, #16
    9d4a:	46bd      	mov	sp, r7
    9d4c:	bd80      	pop	{r7, pc}
    9d4e:	bf00      	nop
    9d50:	00009c95 	.word	0x00009c95
    9d54:	00009c51 	.word	0x00009c51

00009d58 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9d58:	b480      	push	{r7}
    9d5a:	b085      	sub	sp, #20
    9d5c:	af00      	add	r7, sp, #0
    9d5e:	4603      	mov	r3, r0
    9d60:	460a      	mov	r2, r1
    9d62:	71fb      	strb	r3, [r7, #7]
    9d64:	4613      	mov	r3, r2
    9d66:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9d68:	79fa      	ldrb	r2, [r7, #7]
    9d6a:	79bb      	ldrb	r3, [r7, #6]
    9d6c:	0052      	lsls	r2, r2, #1
    9d6e:	4413      	add	r3, r2
    9d70:	011b      	lsls	r3, r3, #4
    9d72:	4a06      	ldr	r2, [pc, #24]	; (9d8c <_usbd_ep_clear_bank_status+0x34>)
    9d74:	4413      	add	r3, r2
    9d76:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9d78:	68fb      	ldr	r3, [r7, #12]
    9d7a:	2200      	movs	r2, #0
    9d7c:	729a      	strb	r2, [r3, #10]
}
    9d7e:	bf00      	nop
    9d80:	3714      	adds	r7, #20
    9d82:	46bd      	mov	sp, r7
    9d84:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d88:	4770      	bx	lr
    9d8a:	bf00      	nop
    9d8c:	20001150 	.word	0x20001150

00009d90 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9d90:	b580      	push	{r7, lr}
    9d92:	b082      	sub	sp, #8
    9d94:	af00      	add	r7, sp, #0
    9d96:	4603      	mov	r3, r0
    9d98:	71fb      	strb	r3, [r7, #7]
    9d9a:	460b      	mov	r3, r1
    9d9c:	71bb      	strb	r3, [r7, #6]
    9d9e:	4613      	mov	r3, r2
    9da0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9da2:	797b      	ldrb	r3, [r7, #5]
    9da4:	2b00      	cmp	r3, #0
    9da6:	d00b      	beq.n	9dc0 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9da8:	79bb      	ldrb	r3, [r7, #6]
    9daa:	2240      	movs	r2, #64	; 0x40
    9dac:	fa02 f303 	lsl.w	r3, r2, r3
    9db0:	b2da      	uxtb	r2, r3
    9db2:	79fb      	ldrb	r3, [r7, #7]
    9db4:	4619      	mov	r1, r3
    9db6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dba:	4b09      	ldr	r3, [pc, #36]	; (9de0 <_usbd_ep_set_in_rdy+0x50>)
    9dbc:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9dbe:	e00a      	b.n	9dd6 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9dc0:	79bb      	ldrb	r3, [r7, #6]
    9dc2:	2240      	movs	r2, #64	; 0x40
    9dc4:	fa02 f303 	lsl.w	r3, r2, r3
    9dc8:	b2da      	uxtb	r2, r3
    9dca:	79fb      	ldrb	r3, [r7, #7]
    9dcc:	4619      	mov	r1, r3
    9dce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dd2:	4b04      	ldr	r3, [pc, #16]	; (9de4 <_usbd_ep_set_in_rdy+0x54>)
    9dd4:	4798      	blx	r3
}
    9dd6:	bf00      	nop
    9dd8:	3708      	adds	r7, #8
    9dda:	46bd      	mov	sp, r7
    9ddc:	bd80      	pop	{r7, pc}
    9dde:	bf00      	nop
    9de0:	0000939d 	.word	0x0000939d
    9de4:	000093f1 	.word	0x000093f1

00009de8 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9de8:	b580      	push	{r7, lr}
    9dea:	b082      	sub	sp, #8
    9dec:	af00      	add	r7, sp, #0
    9dee:	4603      	mov	r3, r0
    9df0:	71fb      	strb	r3, [r7, #7]
    9df2:	460b      	mov	r3, r1
    9df4:	71bb      	strb	r3, [r7, #6]
    9df6:	4613      	mov	r3, r2
    9df8:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9dfa:	797b      	ldrb	r3, [r7, #5]
    9dfc:	2b00      	cmp	r3, #0
    9dfe:	d00b      	beq.n	9e18 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9e00:	79bb      	ldrb	r3, [r7, #6]
    9e02:	2240      	movs	r2, #64	; 0x40
    9e04:	fa02 f303 	lsl.w	r3, r2, r3
    9e08:	b2da      	uxtb	r2, r3
    9e0a:	79fb      	ldrb	r3, [r7, #7]
    9e0c:	4619      	mov	r1, r3
    9e0e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e12:	4b09      	ldr	r3, [pc, #36]	; (9e38 <_usbd_ep_set_out_rdy+0x50>)
    9e14:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9e16:	e00a      	b.n	9e2e <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9e18:	79bb      	ldrb	r3, [r7, #6]
    9e1a:	2240      	movs	r2, #64	; 0x40
    9e1c:	fa02 f303 	lsl.w	r3, r2, r3
    9e20:	b2da      	uxtb	r2, r3
    9e22:	79fb      	ldrb	r3, [r7, #7]
    9e24:	4619      	mov	r1, r3
    9e26:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e2a:	4b04      	ldr	r3, [pc, #16]	; (9e3c <_usbd_ep_set_out_rdy+0x54>)
    9e2c:	4798      	blx	r3
}
    9e2e:	bf00      	nop
    9e30:	3708      	adds	r7, #8
    9e32:	46bd      	mov	sp, r7
    9e34:	bd80      	pop	{r7, pc}
    9e36:	bf00      	nop
    9e38:	000093f1 	.word	0x000093f1
    9e3c:	0000939d 	.word	0x0000939d

00009e40 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9e40:	b480      	push	{r7}
    9e42:	b083      	sub	sp, #12
    9e44:	af00      	add	r7, sp, #0
    9e46:	4603      	mov	r3, r0
    9e48:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9e4a:	88fb      	ldrh	r3, [r7, #6]
    9e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9e50:	d820      	bhi.n	9e94 <_usbd_ep_pcksize_size+0x54>
    9e52:	88fb      	ldrh	r3, [r7, #6]
    9e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9e58:	d81a      	bhi.n	9e90 <_usbd_ep_pcksize_size+0x50>
    9e5a:	88fb      	ldrh	r3, [r7, #6]
    9e5c:	2b80      	cmp	r3, #128	; 0x80
    9e5e:	d815      	bhi.n	9e8c <_usbd_ep_pcksize_size+0x4c>
    9e60:	88fb      	ldrh	r3, [r7, #6]
    9e62:	2b40      	cmp	r3, #64	; 0x40
    9e64:	d810      	bhi.n	9e88 <_usbd_ep_pcksize_size+0x48>
    9e66:	88fb      	ldrh	r3, [r7, #6]
    9e68:	2b20      	cmp	r3, #32
    9e6a:	d80b      	bhi.n	9e84 <_usbd_ep_pcksize_size+0x44>
    9e6c:	88fb      	ldrh	r3, [r7, #6]
    9e6e:	2b10      	cmp	r3, #16
    9e70:	d806      	bhi.n	9e80 <_usbd_ep_pcksize_size+0x40>
    9e72:	88fb      	ldrh	r3, [r7, #6]
    9e74:	2b08      	cmp	r3, #8
    9e76:	bf8c      	ite	hi
    9e78:	2301      	movhi	r3, #1
    9e7a:	2300      	movls	r3, #0
    9e7c:	b2db      	uxtb	r3, r3
    9e7e:	e00a      	b.n	9e96 <_usbd_ep_pcksize_size+0x56>
    9e80:	2302      	movs	r3, #2
    9e82:	e008      	b.n	9e96 <_usbd_ep_pcksize_size+0x56>
    9e84:	2303      	movs	r3, #3
    9e86:	e006      	b.n	9e96 <_usbd_ep_pcksize_size+0x56>
    9e88:	2304      	movs	r3, #4
    9e8a:	e004      	b.n	9e96 <_usbd_ep_pcksize_size+0x56>
    9e8c:	2305      	movs	r3, #5
    9e8e:	e002      	b.n	9e96 <_usbd_ep_pcksize_size+0x56>
    9e90:	2306      	movs	r3, #6
    9e92:	e000      	b.n	9e96 <_usbd_ep_pcksize_size+0x56>
    9e94:	2307      	movs	r3, #7
}
    9e96:	4618      	mov	r0, r3
    9e98:	370c      	adds	r7, #12
    9e9a:	46bd      	mov	sp, r7
    9e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ea0:	4770      	bx	lr
	...

00009ea4 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9ea4:	b480      	push	{r7}
    9ea6:	b085      	sub	sp, #20
    9ea8:	af00      	add	r7, sp, #0
    9eaa:	4603      	mov	r3, r0
    9eac:	460a      	mov	r2, r1
    9eae:	71fb      	strb	r3, [r7, #7]
    9eb0:	4613      	mov	r3, r2
    9eb2:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9eb4:	79fb      	ldrb	r3, [r7, #7]
    9eb6:	2b00      	cmp	r3, #0
    9eb8:	d008      	beq.n	9ecc <_usb_d_dev_ept+0x28>
    9eba:	79bb      	ldrb	r3, [r7, #6]
    9ebc:	2b00      	cmp	r3, #0
    9ebe:	d003      	beq.n	9ec8 <_usb_d_dev_ept+0x24>
    9ec0:	79fb      	ldrb	r3, [r7, #7]
    9ec2:	3304      	adds	r3, #4
    9ec4:	b2db      	uxtb	r3, r3
    9ec6:	e002      	b.n	9ece <_usb_d_dev_ept+0x2a>
    9ec8:	79fb      	ldrb	r3, [r7, #7]
    9eca:	e000      	b.n	9ece <_usb_d_dev_ept+0x2a>
    9ecc:	2300      	movs	r3, #0
    9ece:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9ed0:	7bfa      	ldrb	r2, [r7, #15]
    9ed2:	4613      	mov	r3, r2
    9ed4:	009b      	lsls	r3, r3, #2
    9ed6:	4413      	add	r3, r2
    9ed8:	009b      	lsls	r3, r3, #2
    9eda:	3310      	adds	r3, #16
    9edc:	4a04      	ldr	r2, [pc, #16]	; (9ef0 <_usb_d_dev_ept+0x4c>)
    9ede:	4413      	add	r3, r2
    9ee0:	3304      	adds	r3, #4
}
    9ee2:	4618      	mov	r0, r3
    9ee4:	3714      	adds	r7, #20
    9ee6:	46bd      	mov	sp, r7
    9ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9eec:	4770      	bx	lr
    9eee:	bf00      	nop
    9ef0:	20001088 	.word	0x20001088

00009ef4 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9ef4:	b580      	push	{r7, lr}
    9ef6:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9ef8:	2104      	movs	r1, #4
    9efa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9efe:	4b03      	ldr	r3, [pc, #12]	; (9f0c <_usb_d_dev_sof+0x18>)
    9f00:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9f02:	4b03      	ldr	r3, [pc, #12]	; (9f10 <_usb_d_dev_sof+0x1c>)
    9f04:	681b      	ldr	r3, [r3, #0]
    9f06:	4798      	blx	r3
}
    9f08:	bf00      	nop
    9f0a:	bd80      	pop	{r7, pc}
    9f0c:	0000956b 	.word	0x0000956b
    9f10:	20001088 	.word	0x20001088

00009f14 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9f14:	b580      	push	{r7, lr}
    9f16:	b084      	sub	sp, #16
    9f18:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9f1a:	2300      	movs	r3, #0
    9f1c:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9f1e:	f240 2101 	movw	r1, #513	; 0x201
    9f22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f26:	4b1a      	ldr	r3, [pc, #104]	; (9f90 <_usb_d_dev_lpmsusp+0x7c>)
    9f28:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9f2a:	f240 2101 	movw	r1, #513	; 0x201
    9f2e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f32:	4b18      	ldr	r3, [pc, #96]	; (9f94 <_usb_d_dev_lpmsusp+0x80>)
    9f34:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9f36:	2170      	movs	r1, #112	; 0x70
    9f38:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f3c:	4b16      	ldr	r3, [pc, #88]	; (9f98 <_usb_d_dev_lpmsusp+0x84>)
    9f3e:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9f40:	2300      	movs	r3, #0
    9f42:	73fb      	strb	r3, [r7, #15]
    9f44:	e018      	b.n	9f78 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9f46:	7bfb      	ldrb	r3, [r7, #15]
    9f48:	015b      	lsls	r3, r3, #5
    9f4a:	4a14      	ldr	r2, [pc, #80]	; (9f9c <_usb_d_dev_lpmsusp+0x88>)
    9f4c:	4413      	add	r3, r2
    9f4e:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9f50:	687b      	ldr	r3, [r7, #4]
    9f52:	891b      	ldrh	r3, [r3, #8]
    9f54:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9f58:	b2db      	uxtb	r3, r3
    9f5a:	2b03      	cmp	r3, #3
    9f5c:	d109      	bne.n	9f72 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9f5e:	687b      	ldr	r3, [r7, #4]
    9f60:	891b      	ldrh	r3, [r3, #8]
    9f62:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9f66:	b29b      	uxth	r3, r3
    9f68:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9f6a:	687b      	ldr	r3, [r7, #4]
    9f6c:	2200      	movs	r2, #0
    9f6e:	811a      	strh	r2, [r3, #8]
			break;
    9f70:	e005      	b.n	9f7e <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9f72:	7bfb      	ldrb	r3, [r7, #15]
    9f74:	3301      	adds	r3, #1
    9f76:	73fb      	strb	r3, [r7, #15]
    9f78:	7bfb      	ldrb	r3, [r7, #15]
    9f7a:	2b03      	cmp	r3, #3
    9f7c:	d9e3      	bls.n	9f46 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9f7e:	4b08      	ldr	r3, [pc, #32]	; (9fa0 <_usb_d_dev_lpmsusp+0x8c>)
    9f80:	685b      	ldr	r3, [r3, #4]
    9f82:	68b9      	ldr	r1, [r7, #8]
    9f84:	2003      	movs	r0, #3
    9f86:	4798      	blx	r3
}
    9f88:	bf00      	nop
    9f8a:	3710      	adds	r7, #16
    9f8c:	46bd      	mov	sp, r7
    9f8e:	bd80      	pop	{r7, pc}
    9f90:	0000956b 	.word	0x0000956b
    9f94:	000095c1 	.word	0x000095c1
    9f98:	00009589 	.word	0x00009589
    9f9c:	20001150 	.word	0x20001150
    9fa0:	20001088 	.word	0x20001088

00009fa4 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9fa4:	b580      	push	{r7, lr}
    9fa6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9fa8:	2180      	movs	r1, #128	; 0x80
    9faa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9fae:	4b04      	ldr	r3, [pc, #16]	; (9fc0 <_usb_d_dev_ramerr+0x1c>)
    9fb0:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9fb2:	4b04      	ldr	r3, [pc, #16]	; (9fc4 <_usb_d_dev_ramerr+0x20>)
    9fb4:	685b      	ldr	r3, [r3, #4]
    9fb6:	2100      	movs	r1, #0
    9fb8:	2005      	movs	r0, #5
    9fba:	4798      	blx	r3
}
    9fbc:	bf00      	nop
    9fbe:	bd80      	pop	{r7, pc}
    9fc0:	0000956b 	.word	0x0000956b
    9fc4:	20001088 	.word	0x20001088

00009fc8 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9fc8:	b580      	push	{r7, lr}
    9fca:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9fcc:	2170      	movs	r1, #112	; 0x70
    9fce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9fd2:	4b0b      	ldr	r3, [pc, #44]	; (a000 <_usb_d_dev_wakeup+0x38>)
    9fd4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9fd6:	2170      	movs	r1, #112	; 0x70
    9fd8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9fdc:	4b09      	ldr	r3, [pc, #36]	; (a004 <_usb_d_dev_wakeup+0x3c>)
    9fde:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9fe0:	f240 2101 	movw	r1, #513	; 0x201
    9fe4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9fe8:	4b07      	ldr	r3, [pc, #28]	; (a008 <_usb_d_dev_wakeup+0x40>)
    9fea:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9fec:	2000      	movs	r0, #0
    9fee:	4b07      	ldr	r3, [pc, #28]	; (a00c <_usb_d_dev_wakeup+0x44>)
    9ff0:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9ff2:	4b07      	ldr	r3, [pc, #28]	; (a010 <_usb_d_dev_wakeup+0x48>)
    9ff4:	685b      	ldr	r3, [r3, #4]
    9ff6:	2100      	movs	r1, #0
    9ff8:	2002      	movs	r0, #2
    9ffa:	4798      	blx	r3
}
    9ffc:	bf00      	nop
    9ffe:	bd80      	pop	{r7, pc}
    a000:	0000956b 	.word	0x0000956b
    a004:	000095c1 	.word	0x000095c1
    a008:	00009589 	.word	0x00009589
    a00c:	00009869 	.word	0x00009869
    a010:	20001088 	.word	0x20001088

0000a014 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    a014:	b580      	push	{r7, lr}
    a016:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    a018:	2200      	movs	r2, #0
    a01a:	2100      	movs	r1, #0
    a01c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a020:	4b0d      	ldr	r3, [pc, #52]	; (a058 <_usb_d_dev_reset+0x44>)
    a022:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    a024:	2108      	movs	r1, #8
    a026:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a02a:	4b0c      	ldr	r3, [pc, #48]	; (a05c <_usb_d_dev_reset+0x48>)
    a02c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a02e:	2170      	movs	r1, #112	; 0x70
    a030:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a034:	4b0a      	ldr	r3, [pc, #40]	; (a060 <_usb_d_dev_reset+0x4c>)
    a036:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a038:	f240 2101 	movw	r1, #513	; 0x201
    a03c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a040:	4b08      	ldr	r3, [pc, #32]	; (a064 <_usb_d_dev_reset+0x50>)
    a042:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    a044:	4b08      	ldr	r3, [pc, #32]	; (a068 <_usb_d_dev_reset+0x54>)
    a046:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    a048:	4b08      	ldr	r3, [pc, #32]	; (a06c <_usb_d_dev_reset+0x58>)
    a04a:	685b      	ldr	r3, [r3, #4]
    a04c:	2100      	movs	r1, #0
    a04e:	2001      	movs	r0, #1
    a050:	4798      	blx	r3
}
    a052:	bf00      	nop
    a054:	bd80      	pop	{r7, pc}
    a056:	bf00      	nop
    a058:	00009501 	.word	0x00009501
    a05c:	0000956b 	.word	0x0000956b
    a060:	000095c1 	.word	0x000095c1
    a064:	00009589 	.word	0x00009589
    a068:	0000abd1 	.word	0x0000abd1
    a06c:	20001088 	.word	0x20001088

0000a070 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    a070:	b580      	push	{r7, lr}
    a072:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a074:	f240 2101 	movw	r1, #513	; 0x201
    a078:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a07c:	4b09      	ldr	r3, [pc, #36]	; (a0a4 <_usb_d_dev_suspend+0x34>)
    a07e:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a080:	f240 2101 	movw	r1, #513	; 0x201
    a084:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a088:	4b07      	ldr	r3, [pc, #28]	; (a0a8 <_usb_d_dev_suspend+0x38>)
    a08a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a08c:	2170      	movs	r1, #112	; 0x70
    a08e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a092:	4b06      	ldr	r3, [pc, #24]	; (a0ac <_usb_d_dev_suspend+0x3c>)
    a094:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    a096:	4b06      	ldr	r3, [pc, #24]	; (a0b0 <_usb_d_dev_suspend+0x40>)
    a098:	685b      	ldr	r3, [r3, #4]
    a09a:	2100      	movs	r1, #0
    a09c:	2004      	movs	r0, #4
    a09e:	4798      	blx	r3
}
    a0a0:	bf00      	nop
    a0a2:	bd80      	pop	{r7, pc}
    a0a4:	0000956b 	.word	0x0000956b
    a0a8:	000095c1 	.word	0x000095c1
    a0ac:	00009589 	.word	0x00009589
    a0b0:	20001088 	.word	0x20001088

0000a0b4 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    a0b4:	b580      	push	{r7, lr}
    a0b6:	b082      	sub	sp, #8
    a0b8:	af00      	add	r7, sp, #0
	bool     rc    = true;
    a0ba:	2301      	movs	r3, #1
    a0bc:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    a0be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a0c2:	4b22      	ldr	r3, [pc, #136]	; (a14c <_usb_d_dev_handle_nep+0x98>)
    a0c4:	4798      	blx	r3
    a0c6:	4603      	mov	r3, r0
    a0c8:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    a0ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a0ce:	4b20      	ldr	r3, [pc, #128]	; (a150 <_usb_d_dev_handle_nep+0x9c>)
    a0d0:	4798      	blx	r3
    a0d2:	4603      	mov	r3, r0
    a0d4:	461a      	mov	r2, r3
    a0d6:	88bb      	ldrh	r3, [r7, #4]
    a0d8:	4013      	ands	r3, r2
    a0da:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    a0dc:	88bb      	ldrh	r3, [r7, #4]
    a0de:	f003 0304 	and.w	r3, r3, #4
    a0e2:	2b00      	cmp	r3, #0
    a0e4:	d003      	beq.n	a0ee <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    a0e6:	4b1b      	ldr	r3, [pc, #108]	; (a154 <_usb_d_dev_handle_nep+0xa0>)
    a0e8:	4798      	blx	r3
		return true;
    a0ea:	2301      	movs	r3, #1
    a0ec:	e02a      	b.n	a144 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    a0ee:	88bb      	ldrh	r3, [r7, #4]
    a0f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    a0f4:	2b00      	cmp	r3, #0
    a0f6:	d002      	beq.n	a0fe <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    a0f8:	4b17      	ldr	r3, [pc, #92]	; (a158 <_usb_d_dev_handle_nep+0xa4>)
    a0fa:	4798      	blx	r3
    a0fc:	e021      	b.n	a142 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    a0fe:	88bb      	ldrh	r3, [r7, #4]
    a100:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a104:	2b00      	cmp	r3, #0
    a106:	d002      	beq.n	a10e <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    a108:	4b14      	ldr	r3, [pc, #80]	; (a15c <_usb_d_dev_handle_nep+0xa8>)
    a10a:	4798      	blx	r3
    a10c:	e019      	b.n	a142 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    a10e:	88bb      	ldrh	r3, [r7, #4]
    a110:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a114:	2b00      	cmp	r3, #0
    a116:	d002      	beq.n	a11e <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    a118:	4b11      	ldr	r3, [pc, #68]	; (a160 <_usb_d_dev_handle_nep+0xac>)
    a11a:	4798      	blx	r3
    a11c:	e011      	b.n	a142 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    a11e:	88bb      	ldrh	r3, [r7, #4]
    a120:	f003 0308 	and.w	r3, r3, #8
    a124:	2b00      	cmp	r3, #0
    a126:	d002      	beq.n	a12e <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    a128:	4b0e      	ldr	r3, [pc, #56]	; (a164 <_usb_d_dev_handle_nep+0xb0>)
    a12a:	4798      	blx	r3
    a12c:	e009      	b.n	a142 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    a12e:	88bb      	ldrh	r3, [r7, #4]
    a130:	f003 0301 	and.w	r3, r3, #1
    a134:	2b00      	cmp	r3, #0
    a136:	d002      	beq.n	a13e <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    a138:	4b0b      	ldr	r3, [pc, #44]	; (a168 <_usb_d_dev_handle_nep+0xb4>)
    a13a:	4798      	blx	r3
    a13c:	e001      	b.n	a142 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    a13e:	2300      	movs	r3, #0
    a140:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    a142:	79fb      	ldrb	r3, [r7, #7]
}
    a144:	4618      	mov	r0, r3
    a146:	3708      	adds	r7, #8
    a148:	46bd      	mov	sp, r7
    a14a:	bd80      	pop	{r7, pc}
    a14c:	00009551 	.word	0x00009551
    a150:	000095a7 	.word	0x000095a7
    a154:	00009ef5 	.word	0x00009ef5
    a158:	00009f15 	.word	0x00009f15
    a15c:	00009fa5 	.word	0x00009fa5
    a160:	00009fc9 	.word	0x00009fc9
    a164:	0000a015 	.word	0x0000a015
    a168:	0000a071 	.word	0x0000a071

0000a16c <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a16c:	b590      	push	{r4, r7, lr}
    a16e:	b089      	sub	sp, #36	; 0x24
    a170:	af00      	add	r7, sp, #0
    a172:	6078      	str	r0, [r7, #4]
    a174:	460b      	mov	r3, r1
    a176:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    a178:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a17c:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    a17e:	687b      	ldr	r3, [r7, #4]
    a180:	7c9b      	ldrb	r3, [r3, #18]
    a182:	f003 030f 	and.w	r3, r3, #15
    a186:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a188:	7dfb      	ldrb	r3, [r7, #23]
    a18a:	015b      	lsls	r3, r3, #5
    a18c:	4a73      	ldr	r2, [pc, #460]	; (a35c <_usb_d_dev_in_next+0x1f0>)
    a18e:	4413      	add	r3, r2
    a190:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    a192:	78fb      	ldrb	r3, [r7, #3]
    a194:	2b00      	cmp	r3, #0
    a196:	d006      	beq.n	a1a6 <_usb_d_dev_in_next+0x3a>
    a198:	693b      	ldr	r3, [r7, #16]
    a19a:	3310      	adds	r3, #16
    a19c:	685b      	ldr	r3, [r3, #4]
    a19e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a1a2:	b29b      	uxth	r3, r3
    a1a4:	e000      	b.n	a1a8 <_usb_d_dev_in_next+0x3c>
    a1a6:	2300      	movs	r3, #0
    a1a8:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    a1aa:	687b      	ldr	r3, [r7, #4]
    a1ac:	8a1b      	ldrh	r3, [r3, #16]
    a1ae:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a1b2:	4293      	cmp	r3, r2
    a1b4:	d103      	bne.n	a1be <_usb_d_dev_in_next+0x52>
    a1b6:	687b      	ldr	r3, [r7, #4]
    a1b8:	8a1b      	ldrh	r3, [r3, #16]
    a1ba:	b21b      	sxth	r3, r3
    a1bc:	e004      	b.n	a1c8 <_usb_d_dev_in_next+0x5c>
    a1be:	687b      	ldr	r3, [r7, #4]
    a1c0:	8a1b      	ldrh	r3, [r3, #16]
    a1c2:	3b01      	subs	r3, #1
    a1c4:	b29b      	uxth	r3, r3
    a1c6:	b21b      	sxth	r3, r3
    a1c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    a1cc:	4013      	ands	r3, r2
    a1ce:	b21b      	sxth	r3, r3
    a1d0:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    a1d2:	2300      	movs	r3, #0
    a1d4:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    a1d6:	687b      	ldr	r3, [r7, #4]
    a1d8:	7cdb      	ldrb	r3, [r3, #19]
    a1da:	f003 0307 	and.w	r3, r3, #7
    a1de:	b2db      	uxtb	r3, r3
    a1e0:	2b01      	cmp	r3, #1
    a1e2:	bf0c      	ite	eq
    a1e4:	2301      	moveq	r3, #1
    a1e6:	2300      	movne	r3, #0
    a1e8:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    a1ea:	78fb      	ldrb	r3, [r7, #3]
    a1ec:	2b00      	cmp	r3, #0
    a1ee:	d004      	beq.n	a1fa <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    a1f0:	7dfb      	ldrb	r3, [r7, #23]
    a1f2:	2101      	movs	r1, #1
    a1f4:	4618      	mov	r0, r3
    a1f6:	4b5a      	ldr	r3, [pc, #360]	; (a360 <_usb_d_dev_in_next+0x1f4>)
    a1f8:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    a1fa:	687b      	ldr	r3, [r7, #4]
    a1fc:	689a      	ldr	r2, [r3, #8]
    a1fe:	89fb      	ldrh	r3, [r7, #14]
    a200:	441a      	add	r2, r3
    a202:	687b      	ldr	r3, [r7, #4]
    a204:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    a206:	687b      	ldr	r3, [r7, #4]
    a208:	689a      	ldr	r2, [r3, #8]
    a20a:	687b      	ldr	r3, [r7, #4]
    a20c:	685b      	ldr	r3, [r3, #4]
    a20e:	429a      	cmp	r2, r3
    a210:	d243      	bcs.n	a29a <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    a212:	687b      	ldr	r3, [r7, #4]
    a214:	685b      	ldr	r3, [r3, #4]
    a216:	b29a      	uxth	r2, r3
    a218:	687b      	ldr	r3, [r7, #4]
    a21a:	689b      	ldr	r3, [r3, #8]
    a21c:	b29b      	uxth	r3, r3
    a21e:	1ad3      	subs	r3, r2, r3
    a220:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    a222:	687b      	ldr	r3, [r7, #4]
    a224:	7cdb      	ldrb	r3, [r3, #19]
    a226:	f003 0320 	and.w	r3, r3, #32
    a22a:	b2db      	uxtb	r3, r3
    a22c:	2b00      	cmp	r3, #0
    a22e:	d01b      	beq.n	a268 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    a230:	687b      	ldr	r3, [r7, #4]
    a232:	8a1b      	ldrh	r3, [r3, #16]
    a234:	8bfa      	ldrh	r2, [r7, #30]
    a236:	429a      	cmp	r2, r3
    a238:	d902      	bls.n	a240 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    a23a:	687b      	ldr	r3, [r7, #4]
    a23c:	8a1b      	ldrh	r3, [r3, #16]
    a23e:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    a240:	687b      	ldr	r3, [r7, #4]
    a242:	68d8      	ldr	r0, [r3, #12]
    a244:	687b      	ldr	r3, [r7, #4]
    a246:	681a      	ldr	r2, [r3, #0]
    a248:	687b      	ldr	r3, [r7, #4]
    a24a:	689b      	ldr	r3, [r3, #8]
    a24c:	4413      	add	r3, r2
    a24e:	8bfa      	ldrh	r2, [r7, #30]
    a250:	4619      	mov	r1, r3
    a252:	4b44      	ldr	r3, [pc, #272]	; (a364 <_usb_d_dev_in_next+0x1f8>)
    a254:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    a256:	687b      	ldr	r3, [r7, #4]
    a258:	68db      	ldr	r3, [r3, #12]
    a25a:	461a      	mov	r2, r3
    a25c:	7dfb      	ldrb	r3, [r7, #23]
    a25e:	2101      	movs	r1, #1
    a260:	4618      	mov	r0, r3
    a262:	4b41      	ldr	r3, [pc, #260]	; (a368 <_usb_d_dev_in_next+0x1fc>)
    a264:	4798      	blx	r3
    a266:	e011      	b.n	a28c <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    a268:	8bfb      	ldrh	r3, [r7, #30]
    a26a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a26e:	d902      	bls.n	a276 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    a270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a274:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a276:	687b      	ldr	r3, [r7, #4]
    a278:	681a      	ldr	r2, [r3, #0]
    a27a:	687b      	ldr	r3, [r7, #4]
    a27c:	689b      	ldr	r3, [r3, #8]
    a27e:	4413      	add	r3, r2
    a280:	461a      	mov	r2, r3
    a282:	7dfb      	ldrb	r3, [r7, #23]
    a284:	2101      	movs	r1, #1
    a286:	4618      	mov	r0, r3
    a288:	4b37      	ldr	r3, [pc, #220]	; (a368 <_usb_d_dev_in_next+0x1fc>)
    a28a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    a28c:	8bfa      	ldrh	r2, [r7, #30]
    a28e:	7df8      	ldrb	r0, [r7, #23]
    a290:	2300      	movs	r3, #0
    a292:	2101      	movs	r1, #1
    a294:	4c35      	ldr	r4, [pc, #212]	; (a36c <_usb_d_dev_in_next+0x200>)
    a296:	47a0      	blx	r4
		goto _in_tx_exec;
    a298:	e041      	b.n	a31e <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    a29a:	687b      	ldr	r3, [r7, #4]
    a29c:	7cdb      	ldrb	r3, [r3, #19]
    a29e:	f003 0310 	and.w	r3, r3, #16
    a2a2:	b2db      	uxtb	r3, r3
    a2a4:	2b00      	cmp	r3, #0
    a2a6:	d00b      	beq.n	a2c0 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    a2a8:	687a      	ldr	r2, [r7, #4]
    a2aa:	7cd3      	ldrb	r3, [r2, #19]
    a2ac:	f36f 1304 	bfc	r3, #4, #1
    a2b0:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    a2b2:	7df8      	ldrb	r0, [r7, #23]
    a2b4:	2300      	movs	r3, #0
    a2b6:	2200      	movs	r2, #0
    a2b8:	2101      	movs	r1, #1
    a2ba:	4c2c      	ldr	r4, [pc, #176]	; (a36c <_usb_d_dev_in_next+0x200>)
    a2bc:	47a0      	blx	r4
		goto _in_tx_exec;
    a2be:	e02e      	b.n	a31e <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    a2c0:	7afb      	ldrb	r3, [r7, #11]
    a2c2:	2b00      	cmp	r3, #0
    a2c4:	d006      	beq.n	a2d4 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    a2c6:	7dfb      	ldrb	r3, [r7, #23]
    a2c8:	224b      	movs	r2, #75	; 0x4b
    a2ca:	4619      	mov	r1, r3
    a2cc:	69b8      	ldr	r0, [r7, #24]
    a2ce:	4b28      	ldr	r3, [pc, #160]	; (a370 <_usb_d_dev_in_next+0x204>)
    a2d0:	4798      	blx	r3
    a2d2:	e005      	b.n	a2e0 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    a2d4:	7dfb      	ldrb	r3, [r7, #23]
    a2d6:	224a      	movs	r2, #74	; 0x4a
    a2d8:	4619      	mov	r1, r3
    a2da:	69b8      	ldr	r0, [r7, #24]
    a2dc:	4b24      	ldr	r3, [pc, #144]	; (a370 <_usb_d_dev_in_next+0x204>)
    a2de:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    a2e0:	687b      	ldr	r3, [r7, #4]
    a2e2:	8a1b      	ldrh	r3, [r3, #16]
    a2e4:	89ba      	ldrh	r2, [r7, #12]
    a2e6:	429a      	cmp	r2, r3
    a2e8:	d114      	bne.n	a314 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    a2ea:	687a      	ldr	r2, [r7, #4]
    a2ec:	7cd3      	ldrb	r3, [r2, #19]
    a2ee:	f36f 1386 	bfc	r3, #6, #1
    a2f2:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    a2f4:	4b1f      	ldr	r3, [pc, #124]	; (a374 <_usb_d_dev_in_next+0x208>)
    a2f6:	68db      	ldr	r3, [r3, #12]
    a2f8:	687a      	ldr	r2, [r7, #4]
    a2fa:	7c90      	ldrb	r0, [r2, #18]
    a2fc:	687a      	ldr	r2, [r7, #4]
    a2fe:	6892      	ldr	r2, [r2, #8]
    a300:	4611      	mov	r1, r2
    a302:	4798      	blx	r3
    a304:	4603      	mov	r3, r0
    a306:	2b00      	cmp	r3, #0
    a308:	d124      	bne.n	a354 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    a30a:	687a      	ldr	r2, [r7, #4]
    a30c:	7cd3      	ldrb	r3, [r2, #19]
    a30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a312:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a314:	2100      	movs	r1, #0
    a316:	6878      	ldr	r0, [r7, #4]
    a318:	4b17      	ldr	r3, [pc, #92]	; (a378 <_usb_d_dev_in_next+0x20c>)
    a31a:	4798      	blx	r3
	return;
    a31c:	e01b      	b.n	a356 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    a31e:	78fb      	ldrb	r3, [r7, #3]
    a320:	f083 0301 	eor.w	r3, r3, #1
    a324:	b2db      	uxtb	r3, r3
    a326:	2b00      	cmp	r3, #0
    a328:	d00d      	beq.n	a346 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    a32a:	7afb      	ldrb	r3, [r7, #11]
    a32c:	2b00      	cmp	r3, #0
    a32e:	d002      	beq.n	a336 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    a330:	234e      	movs	r3, #78	; 0x4e
    a332:	777b      	strb	r3, [r7, #29]
    a334:	e001      	b.n	a33a <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    a336:	234a      	movs	r3, #74	; 0x4a
    a338:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a33a:	7f7a      	ldrb	r2, [r7, #29]
    a33c:	7dfb      	ldrb	r3, [r7, #23]
    a33e:	4619      	mov	r1, r3
    a340:	69b8      	ldr	r0, [r7, #24]
    a342:	4b0e      	ldr	r3, [pc, #56]	; (a37c <_usb_d_dev_in_next+0x210>)
    a344:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    a346:	7dfb      	ldrb	r3, [r7, #23]
    a348:	2201      	movs	r2, #1
    a34a:	2101      	movs	r1, #1
    a34c:	4618      	mov	r0, r3
    a34e:	4b0c      	ldr	r3, [pc, #48]	; (a380 <_usb_d_dev_in_next+0x214>)
    a350:	4798      	blx	r3
    a352:	e000      	b.n	a356 <_usb_d_dev_in_next+0x1ea>
			return;
    a354:	bf00      	nop
}
    a356:	3724      	adds	r7, #36	; 0x24
    a358:	46bd      	mov	sp, r7
    a35a:	bd90      	pop	{r4, r7, pc}
    a35c:	20001150 	.word	0x20001150
    a360:	00009b65 	.word	0x00009b65
    a364:	00010949 	.word	0x00010949
    a368:	00009b91 	.word	0x00009b91
    a36c:	00009cd9 	.word	0x00009cd9
    a370:	00009471 	.word	0x00009471
    a374:	20001088 	.word	0x20001088
    a378:	0000b495 	.word	0x0000b495
    a37c:	00009445 	.word	0x00009445
    a380:	00009d91 	.word	0x00009d91

0000a384 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a384:	b590      	push	{r4, r7, lr}
    a386:	b08b      	sub	sp, #44	; 0x2c
    a388:	af00      	add	r7, sp, #0
    a38a:	6078      	str	r0, [r7, #4]
    a38c:	460b      	mov	r3, r1
    a38e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a390:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a394:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a396:	687b      	ldr	r3, [r7, #4]
    a398:	7c9b      	ldrb	r3, [r3, #18]
    a39a:	f003 030f 	and.w	r3, r3, #15
    a39e:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a3a0:	7ffb      	ldrb	r3, [r7, #31]
    a3a2:	015b      	lsls	r3, r3, #5
    a3a4:	4a94      	ldr	r2, [pc, #592]	; (a5f8 <_usb_d_dev_out_next+0x274>)
    a3a6:	4413      	add	r3, r2
    a3a8:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a3aa:	78fb      	ldrb	r3, [r7, #3]
    a3ac:	2b00      	cmp	r3, #0
    a3ae:	d005      	beq.n	a3bc <_usb_d_dev_out_next+0x38>
    a3b0:	69bb      	ldr	r3, [r7, #24]
    a3b2:	685b      	ldr	r3, [r3, #4]
    a3b4:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a3b8:	b29b      	uxth	r3, r3
    a3ba:	e000      	b.n	a3be <_usb_d_dev_out_next+0x3a>
    a3bc:	2300      	movs	r3, #0
    a3be:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a3c0:	78fb      	ldrb	r3, [r7, #3]
    a3c2:	2b00      	cmp	r3, #0
    a3c4:	d005      	beq.n	a3d2 <_usb_d_dev_out_next+0x4e>
    a3c6:	69bb      	ldr	r3, [r7, #24]
    a3c8:	685b      	ldr	r3, [r3, #4]
    a3ca:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a3ce:	b29b      	uxth	r3, r3
    a3d0:	e000      	b.n	a3d4 <_usb_d_dev_out_next+0x50>
    a3d2:	2300      	movs	r3, #0
    a3d4:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a3d6:	687b      	ldr	r3, [r7, #4]
    a3d8:	8a1b      	ldrh	r3, [r3, #16]
    a3da:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a3de:	4293      	cmp	r3, r2
    a3e0:	d004      	beq.n	a3ec <_usb_d_dev_out_next+0x68>
    a3e2:	687b      	ldr	r3, [r7, #4]
    a3e4:	8a1b      	ldrh	r3, [r3, #16]
    a3e6:	3b01      	subs	r3, #1
    a3e8:	b29b      	uxth	r3, r3
    a3ea:	e001      	b.n	a3f0 <_usb_d_dev_out_next+0x6c>
    a3ec:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a3f0:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a3f2:	8aba      	ldrh	r2, [r7, #20]
    a3f4:	8a7b      	ldrh	r3, [r7, #18]
    a3f6:	4013      	ands	r3, r2
    a3f8:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a3fa:	687b      	ldr	r3, [r7, #4]
    a3fc:	7cdb      	ldrb	r3, [r3, #19]
    a3fe:	f003 0307 	and.w	r3, r3, #7
    a402:	b2db      	uxtb	r3, r3
    a404:	2b01      	cmp	r3, #1
    a406:	bf0c      	ite	eq
    a408:	2301      	moveq	r3, #1
    a40a:	2300      	movne	r3, #0
    a40c:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a40e:	78fb      	ldrb	r3, [r7, #3]
    a410:	2b00      	cmp	r3, #0
    a412:	d004      	beq.n	a41e <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a414:	7ffb      	ldrb	r3, [r7, #31]
    a416:	2100      	movs	r1, #0
    a418:	4618      	mov	r0, r3
    a41a:	4b78      	ldr	r3, [pc, #480]	; (a5fc <_usb_d_dev_out_next+0x278>)
    a41c:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a41e:	687b      	ldr	r3, [r7, #4]
    a420:	7cdb      	ldrb	r3, [r3, #19]
    a422:	f003 0320 	and.w	r3, r3, #32
    a426:	b2db      	uxtb	r3, r3
    a428:	2b00      	cmp	r3, #0
    a42a:	d01c      	beq.n	a466 <_usb_d_dev_out_next+0xe2>
    a42c:	687b      	ldr	r3, [r7, #4]
    a42e:	685b      	ldr	r3, [r3, #4]
    a430:	2b00      	cmp	r3, #0
    a432:	d018      	beq.n	a466 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a434:	687b      	ldr	r3, [r7, #4]
    a436:	685b      	ldr	r3, [r3, #4]
    a438:	b29a      	uxth	r2, r3
    a43a:	687b      	ldr	r3, [r7, #4]
    a43c:	689b      	ldr	r3, [r3, #8]
    a43e:	b29b      	uxth	r3, r3
    a440:	1ad3      	subs	r3, r2, r3
    a442:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a444:	687b      	ldr	r3, [r7, #4]
    a446:	681a      	ldr	r2, [r3, #0]
    a448:	687b      	ldr	r3, [r7, #4]
    a44a:	689b      	ldr	r3, [r3, #8]
    a44c:	18d0      	adds	r0, r2, r3
    a44e:	687b      	ldr	r3, [r7, #4]
    a450:	68d9      	ldr	r1, [r3, #12]
    a452:	89ba      	ldrh	r2, [r7, #12]
    a454:	8a3b      	ldrh	r3, [r7, #16]
    a456:	429a      	cmp	r2, r3
    a458:	d901      	bls.n	a45e <_usb_d_dev_out_next+0xda>
    a45a:	8a3b      	ldrh	r3, [r7, #16]
    a45c:	e000      	b.n	a460 <_usb_d_dev_out_next+0xdc>
    a45e:	89bb      	ldrh	r3, [r7, #12]
    a460:	461a      	mov	r2, r3
    a462:	4b67      	ldr	r3, [pc, #412]	; (a600 <_usb_d_dev_out_next+0x27c>)
    a464:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a466:	687b      	ldr	r3, [r7, #4]
    a468:	685b      	ldr	r3, [r3, #4]
    a46a:	2b00      	cmp	r3, #0
    a46c:	d121      	bne.n	a4b2 <_usb_d_dev_out_next+0x12e>
    a46e:	687b      	ldr	r3, [r7, #4]
    a470:	7cdb      	ldrb	r3, [r3, #19]
    a472:	f003 0310 	and.w	r3, r3, #16
    a476:	b2db      	uxtb	r3, r3
    a478:	2b00      	cmp	r3, #0
    a47a:	d01a      	beq.n	a4b2 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a47c:	687a      	ldr	r2, [r7, #4]
    a47e:	7cd3      	ldrb	r3, [r2, #19]
    a480:	f36f 1304 	bfc	r3, #4, #1
    a484:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a486:	687a      	ldr	r2, [r7, #4]
    a488:	7cd3      	ldrb	r3, [r2, #19]
    a48a:	f043 0320 	orr.w	r3, r3, #32
    a48e:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a490:	687b      	ldr	r3, [r7, #4]
    a492:	68db      	ldr	r3, [r3, #12]
    a494:	461a      	mov	r2, r3
    a496:	7ffb      	ldrb	r3, [r7, #31]
    a498:	2100      	movs	r1, #0
    a49a:	4618      	mov	r0, r3
    a49c:	4b59      	ldr	r3, [pc, #356]	; (a604 <_usb_d_dev_out_next+0x280>)
    a49e:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a4a0:	687b      	ldr	r3, [r7, #4]
    a4a2:	8a1b      	ldrh	r3, [r3, #16]
    a4a4:	461a      	mov	r2, r3
    a4a6:	7ff8      	ldrb	r0, [r7, #31]
    a4a8:	2300      	movs	r3, #0
    a4aa:	2100      	movs	r1, #0
    a4ac:	4c56      	ldr	r4, [pc, #344]	; (a608 <_usb_d_dev_out_next+0x284>)
    a4ae:	47a0      	blx	r4
		goto _out_rx_exec;
    a4b0:	e090      	b.n	a5d4 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a4b2:	78fb      	ldrb	r3, [r7, #3]
    a4b4:	2b00      	cmp	r3, #0
    a4b6:	d010      	beq.n	a4da <_usb_d_dev_out_next+0x156>
    a4b8:	687b      	ldr	r3, [r7, #4]
    a4ba:	8a1b      	ldrh	r3, [r3, #16]
    a4bc:	8a3a      	ldrh	r2, [r7, #16]
    a4be:	429a      	cmp	r2, r3
    a4c0:	d20b      	bcs.n	a4da <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a4c2:	687a      	ldr	r2, [r7, #4]
    a4c4:	7cd3      	ldrb	r3, [r2, #19]
    a4c6:	f36f 1304 	bfc	r3, #4, #1
    a4ca:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a4cc:	687b      	ldr	r3, [r7, #4]
    a4ce:	689a      	ldr	r2, [r3, #8]
    a4d0:	8abb      	ldrh	r3, [r7, #20]
    a4d2:	441a      	add	r2, r3
    a4d4:	687b      	ldr	r3, [r7, #4]
    a4d6:	609a      	str	r2, [r3, #8]
    a4d8:	e05c      	b.n	a594 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a4da:	687b      	ldr	r3, [r7, #4]
    a4dc:	689a      	ldr	r2, [r3, #8]
    a4de:	8afb      	ldrh	r3, [r7, #22]
    a4e0:	441a      	add	r2, r3
    a4e2:	687b      	ldr	r3, [r7, #4]
    a4e4:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a4e6:	687b      	ldr	r3, [r7, #4]
    a4e8:	689a      	ldr	r2, [r3, #8]
    a4ea:	687b      	ldr	r3, [r7, #4]
    a4ec:	685b      	ldr	r3, [r3, #4]
    a4ee:	429a      	cmp	r2, r3
    a4f0:	d250      	bcs.n	a594 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a4f2:	687b      	ldr	r3, [r7, #4]
    a4f4:	685b      	ldr	r3, [r3, #4]
    a4f6:	b29a      	uxth	r2, r3
    a4f8:	687b      	ldr	r3, [r7, #4]
    a4fa:	689b      	ldr	r3, [r3, #8]
    a4fc:	b29b      	uxth	r3, r3
    a4fe:	1ad3      	subs	r3, r2, r3
    a500:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a502:	687b      	ldr	r3, [r7, #4]
    a504:	7cdb      	ldrb	r3, [r3, #19]
    a506:	f003 0320 	and.w	r3, r3, #32
    a50a:	b2db      	uxtb	r3, r3
    a50c:	2b00      	cmp	r3, #0
    a50e:	d010      	beq.n	a532 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a510:	687b      	ldr	r3, [r7, #4]
    a512:	8a1b      	ldrh	r3, [r3, #16]
    a514:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a516:	429a      	cmp	r2, r3
    a518:	d902      	bls.n	a520 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a51a:	687b      	ldr	r3, [r7, #4]
    a51c:	8a1b      	ldrh	r3, [r3, #16]
    a51e:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a520:	687b      	ldr	r3, [r7, #4]
    a522:	68db      	ldr	r3, [r3, #12]
    a524:	461a      	mov	r2, r3
    a526:	7ffb      	ldrb	r3, [r7, #31]
    a528:	2100      	movs	r1, #0
    a52a:	4618      	mov	r0, r3
    a52c:	4b35      	ldr	r3, [pc, #212]	; (a604 <_usb_d_dev_out_next+0x280>)
    a52e:	4798      	blx	r3
    a530:	e029      	b.n	a586 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a532:	687b      	ldr	r3, [r7, #4]
    a534:	8a1b      	ldrh	r3, [r3, #16]
    a536:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a538:	429a      	cmp	r2, r3
    a53a:	d90f      	bls.n	a55c <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a53c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a53e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a542:	d903      	bls.n	a54c <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a548:	84fb      	strh	r3, [r7, #38]	; 0x26
    a54a:	e011      	b.n	a570 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a54c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a54e:	8a7b      	ldrh	r3, [r7, #18]
    a550:	4013      	ands	r3, r2
    a552:	b29b      	uxth	r3, r3
    a554:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a556:	1ad3      	subs	r3, r2, r3
    a558:	84fb      	strh	r3, [r7, #38]	; 0x26
    a55a:	e009      	b.n	a570 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a55c:	687b      	ldr	r3, [r7, #4]
    a55e:	8a1b      	ldrh	r3, [r3, #16]
    a560:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a562:	429a      	cmp	r2, r3
    a564:	d204      	bcs.n	a570 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a566:	687a      	ldr	r2, [r7, #4]
    a568:	7cd3      	ldrb	r3, [r2, #19]
    a56a:	f043 0320 	orr.w	r3, r3, #32
    a56e:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a570:	687b      	ldr	r3, [r7, #4]
    a572:	681a      	ldr	r2, [r3, #0]
    a574:	687b      	ldr	r3, [r7, #4]
    a576:	689b      	ldr	r3, [r3, #8]
    a578:	4413      	add	r3, r2
    a57a:	461a      	mov	r2, r3
    a57c:	7ffb      	ldrb	r3, [r7, #31]
    a57e:	2100      	movs	r1, #0
    a580:	4618      	mov	r0, r3
    a582:	4b20      	ldr	r3, [pc, #128]	; (a604 <_usb_d_dev_out_next+0x280>)
    a584:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a586:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a588:	7ff8      	ldrb	r0, [r7, #31]
    a58a:	2300      	movs	r3, #0
    a58c:	2100      	movs	r1, #0
    a58e:	4c1e      	ldr	r4, [pc, #120]	; (a608 <_usb_d_dev_out_next+0x284>)
    a590:	47a0      	blx	r4
			goto _out_rx_exec;
    a592:	e01f      	b.n	a5d4 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a594:	7bfb      	ldrb	r3, [r7, #15]
    a596:	2b00      	cmp	r3, #0
    a598:	d006      	beq.n	a5a8 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a59a:	7ffb      	ldrb	r3, [r7, #31]
    a59c:	222d      	movs	r2, #45	; 0x2d
    a59e:	4619      	mov	r1, r3
    a5a0:	6a38      	ldr	r0, [r7, #32]
    a5a2:	4b1a      	ldr	r3, [pc, #104]	; (a60c <_usb_d_dev_out_next+0x288>)
    a5a4:	4798      	blx	r3
    a5a6:	e005      	b.n	a5b4 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a5a8:	7ffb      	ldrb	r3, [r7, #31]
    a5aa:	2225      	movs	r2, #37	; 0x25
    a5ac:	4619      	mov	r1, r3
    a5ae:	6a38      	ldr	r0, [r7, #32]
    a5b0:	4b16      	ldr	r3, [pc, #88]	; (a60c <_usb_d_dev_out_next+0x288>)
    a5b2:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a5b4:	7ffb      	ldrb	r3, [r7, #31]
    a5b6:	2b00      	cmp	r3, #0
    a5b8:	d107      	bne.n	a5ca <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a5ba:	687b      	ldr	r3, [r7, #4]
    a5bc:	68db      	ldr	r3, [r3, #12]
    a5be:	461a      	mov	r2, r3
    a5c0:	7ffb      	ldrb	r3, [r7, #31]
    a5c2:	2100      	movs	r1, #0
    a5c4:	4618      	mov	r0, r3
    a5c6:	4b0f      	ldr	r3, [pc, #60]	; (a604 <_usb_d_dev_out_next+0x280>)
    a5c8:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a5ca:	2100      	movs	r1, #0
    a5cc:	6878      	ldr	r0, [r7, #4]
    a5ce:	4b10      	ldr	r3, [pc, #64]	; (a610 <_usb_d_dev_out_next+0x28c>)
    a5d0:	4798      	blx	r3
	return;
    a5d2:	e031      	b.n	a638 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a5d4:	78fb      	ldrb	r3, [r7, #3]
    a5d6:	f083 0301 	eor.w	r3, r3, #1
    a5da:	b2db      	uxtb	r3, r3
    a5dc:	2b00      	cmp	r3, #0
    a5de:	d025      	beq.n	a62c <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a5e0:	7bfb      	ldrb	r3, [r7, #15]
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	d018      	beq.n	a618 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a5e6:	7ffb      	ldrb	r3, [r7, #31]
    a5e8:	2101      	movs	r1, #1
    a5ea:	4618      	mov	r0, r3
    a5ec:	4b09      	ldr	r3, [pc, #36]	; (a614 <_usb_d_dev_out_next+0x290>)
    a5ee:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a5f0:	232d      	movs	r3, #45	; 0x2d
    a5f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a5f6:	e012      	b.n	a61e <_usb_d_dev_out_next+0x29a>
    a5f8:	20001150 	.word	0x20001150
    a5fc:	00009b65 	.word	0x00009b65
    a600:	00010949 	.word	0x00010949
    a604:	00009b91 	.word	0x00009b91
    a608:	00009d19 	.word	0x00009d19
    a60c:	00009471 	.word	0x00009471
    a610:	0000b495 	.word	0x0000b495
    a614:	00009d59 	.word	0x00009d59
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a618:	2325      	movs	r3, #37	; 0x25
    a61a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a61e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a622:	7ffb      	ldrb	r3, [r7, #31]
    a624:	4619      	mov	r1, r3
    a626:	6a38      	ldr	r0, [r7, #32]
    a628:	4b05      	ldr	r3, [pc, #20]	; (a640 <_usb_d_dev_out_next+0x2bc>)
    a62a:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a62c:	7ffb      	ldrb	r3, [r7, #31]
    a62e:	2201      	movs	r2, #1
    a630:	2100      	movs	r1, #0
    a632:	4618      	mov	r0, r3
    a634:	4b03      	ldr	r3, [pc, #12]	; (a644 <_usb_d_dev_out_next+0x2c0>)
    a636:	4798      	blx	r3
}
    a638:	372c      	adds	r7, #44	; 0x2c
    a63a:	46bd      	mov	sp, r7
    a63c:	bd90      	pop	{r4, r7, pc}
    a63e:	bf00      	nop
    a640:	00009445 	.word	0x00009445
    a644:	00009de9 	.word	0x00009de9

0000a648 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a648:	b580      	push	{r7, lr}
    a64a:	b084      	sub	sp, #16
    a64c:	af00      	add	r7, sp, #0
    a64e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a650:	687b      	ldr	r3, [r7, #4]
    a652:	7c9b      	ldrb	r3, [r3, #18]
    a654:	f003 030f 	and.w	r3, r3, #15
    a658:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a65a:	687b      	ldr	r3, [r7, #4]
    a65c:	7cdb      	ldrb	r3, [r3, #19]
    a65e:	f003 0307 	and.w	r3, r3, #7
    a662:	b2db      	uxtb	r3, r3
    a664:	2b01      	cmp	r3, #1
    a666:	bf0c      	ite	eq
    a668:	2301      	moveq	r3, #1
    a66a:	2300      	movne	r3, #0
    a66c:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a66e:	7bbb      	ldrb	r3, [r7, #14]
    a670:	f083 0301 	eor.w	r3, r3, #1
    a674:	b2db      	uxtb	r3, r3
    a676:	2b00      	cmp	r3, #0
    a678:	d008      	beq.n	a68c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a67a:	7bfb      	ldrb	r3, [r7, #15]
    a67c:	4618      	mov	r0, r3
    a67e:	4b20      	ldr	r3, [pc, #128]	; (a700 <_usb_d_dev_handle_setup+0xb8>)
    a680:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a682:	7bfb      	ldrb	r3, [r7, #15]
    a684:	4618      	mov	r0, r3
    a686:	4b1f      	ldr	r3, [pc, #124]	; (a704 <_usb_d_dev_handle_setup+0xbc>)
    a688:	4798      	blx	r3
		return;
    a68a:	e036      	b.n	a6fa <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a68c:	687b      	ldr	r3, [r7, #4]
    a68e:	7cdb      	ldrb	r3, [r3, #19]
    a690:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a694:	b2db      	uxtb	r3, r3
    a696:	2b00      	cmp	r3, #0
    a698:	d010      	beq.n	a6bc <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a69a:	687a      	ldr	r2, [r7, #4]
    a69c:	7cd3      	ldrb	r3, [r2, #19]
    a69e:	f36f 1386 	bfc	r3, #6, #1
    a6a2:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a6a4:	7bfb      	ldrb	r3, [r7, #15]
    a6a6:	2200      	movs	r2, #0
    a6a8:	2101      	movs	r1, #1
    a6aa:	4618      	mov	r0, r3
    a6ac:	4b16      	ldr	r3, [pc, #88]	; (a708 <_usb_d_dev_handle_setup+0xc0>)
    a6ae:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a6b0:	7bfb      	ldrb	r3, [r7, #15]
    a6b2:	2200      	movs	r2, #0
    a6b4:	2100      	movs	r1, #0
    a6b6:	4618      	mov	r0, r3
    a6b8:	4b14      	ldr	r3, [pc, #80]	; (a70c <_usb_d_dev_handle_setup+0xc4>)
    a6ba:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a6bc:	687a      	ldr	r2, [r7, #4]
    a6be:	7cd3      	ldrb	r3, [r2, #19]
    a6c0:	f36f 03c3 	bfc	r3, #3, #1
    a6c4:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a6c6:	7bfb      	ldrb	r3, [r7, #15]
    a6c8:	2100      	movs	r1, #0
    a6ca:	4618      	mov	r0, r3
    a6cc:	4b10      	ldr	r3, [pc, #64]	; (a710 <_usb_d_dev_handle_setup+0xc8>)
    a6ce:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a6d0:	7bfb      	ldrb	r3, [r7, #15]
    a6d2:	2101      	movs	r1, #1
    a6d4:	4618      	mov	r0, r3
    a6d6:	4b0e      	ldr	r3, [pc, #56]	; (a710 <_usb_d_dev_handle_setup+0xc8>)
    a6d8:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a6da:	7bfb      	ldrb	r3, [r7, #15]
    a6dc:	216f      	movs	r1, #111	; 0x6f
    a6de:	4618      	mov	r0, r3
    a6e0:	4b0c      	ldr	r3, [pc, #48]	; (a714 <_usb_d_dev_handle_setup+0xcc>)
    a6e2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a6e4:	7bfb      	ldrb	r3, [r7, #15]
    a6e6:	216f      	movs	r1, #111	; 0x6f
    a6e8:	4618      	mov	r0, r3
    a6ea:	4b0b      	ldr	r3, [pc, #44]	; (a718 <_usb_d_dev_handle_setup+0xd0>)
    a6ec:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a6ee:	4b0b      	ldr	r3, [pc, #44]	; (a71c <_usb_d_dev_handle_setup+0xd4>)
    a6f0:	689b      	ldr	r3, [r3, #8]
    a6f2:	687a      	ldr	r2, [r7, #4]
    a6f4:	7c92      	ldrb	r2, [r2, #18]
    a6f6:	4610      	mov	r0, r2
    a6f8:	4798      	blx	r3
}
    a6fa:	3710      	adds	r7, #16
    a6fc:	46bd      	mov	sp, r7
    a6fe:	bd80      	pop	{r7, pc}
    a700:	00009aed 	.word	0x00009aed
    a704:	00009a99 	.word	0x00009a99
    a708:	00009d91 	.word	0x00009d91
    a70c:	00009de9 	.word	0x00009de9
    a710:	00009d59 	.word	0x00009d59
    a714:	00009899 	.word	0x00009899
    a718:	000098e9 	.word	0x000098e9
    a71c:	20001088 	.word	0x20001088

0000a720 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a720:	b580      	push	{r7, lr}
    a722:	b084      	sub	sp, #16
    a724:	af00      	add	r7, sp, #0
    a726:	6078      	str	r0, [r7, #4]
    a728:	460b      	mov	r3, r1
    a72a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a72c:	687b      	ldr	r3, [r7, #4]
    a72e:	7c9b      	ldrb	r3, [r3, #18]
    a730:	f003 030f 	and.w	r3, r3, #15
    a734:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a736:	78f9      	ldrb	r1, [r7, #3]
    a738:	7bfb      	ldrb	r3, [r7, #15]
    a73a:	2200      	movs	r2, #0
    a73c:	4618      	mov	r0, r3
    a73e:	4b07      	ldr	r3, [pc, #28]	; (a75c <_usb_d_dev_handle_stall+0x3c>)
    a740:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a742:	4b07      	ldr	r3, [pc, #28]	; (a760 <_usb_d_dev_handle_stall+0x40>)
    a744:	691b      	ldr	r3, [r3, #16]
    a746:	687a      	ldr	r2, [r7, #4]
    a748:	7c90      	ldrb	r0, [r2, #18]
    a74a:	687a      	ldr	r2, [r7, #4]
    a74c:	6892      	ldr	r2, [r2, #8]
    a74e:	2101      	movs	r1, #1
    a750:	4798      	blx	r3
}
    a752:	bf00      	nop
    a754:	3710      	adds	r7, #16
    a756:	46bd      	mov	sp, r7
    a758:	bd80      	pop	{r7, pc}
    a75a:	bf00      	nop
    a75c:	00009a4d 	.word	0x00009a4d
    a760:	20001088 	.word	0x20001088

0000a764 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a764:	b580      	push	{r7, lr}
    a766:	b088      	sub	sp, #32
    a768:	af00      	add	r7, sp, #0
    a76a:	6078      	str	r0, [r7, #4]
    a76c:	460b      	mov	r3, r1
    a76e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a770:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a774:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a776:	687b      	ldr	r3, [r7, #4]
    a778:	7c9b      	ldrb	r3, [r3, #18]
    a77a:	f003 030f 	and.w	r3, r3, #15
    a77e:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a780:	4b61      	ldr	r3, [pc, #388]	; (a908 <_usb_d_dev_handle_trfail+0x1a4>)
    a782:	881b      	ldrh	r3, [r3, #0]
    a784:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a786:	7efb      	ldrb	r3, [r7, #27]
    a788:	015b      	lsls	r3, r3, #5
    a78a:	4a60      	ldr	r2, [pc, #384]	; (a90c <_usb_d_dev_handle_trfail+0x1a8>)
    a78c:	4413      	add	r3, r2
    a78e:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a790:	78fb      	ldrb	r3, [r7, #3]
    a792:	2b00      	cmp	r3, #0
    a794:	d006      	beq.n	a7a4 <_usb_d_dev_handle_trfail+0x40>
    a796:	7efb      	ldrb	r3, [r7, #27]
    a798:	4619      	mov	r1, r3
    a79a:	69f8      	ldr	r0, [r7, #28]
    a79c:	4b5c      	ldr	r3, [pc, #368]	; (a910 <_usb_d_dev_handle_trfail+0x1ac>)
    a79e:	4798      	blx	r3
    a7a0:	4603      	mov	r3, r0
    a7a2:	e005      	b.n	a7b0 <_usb_d_dev_handle_trfail+0x4c>
    a7a4:	7efb      	ldrb	r3, [r7, #27]
    a7a6:	4619      	mov	r1, r3
    a7a8:	69f8      	ldr	r0, [r7, #28]
    a7aa:	4b5a      	ldr	r3, [pc, #360]	; (a914 <_usb_d_dev_handle_trfail+0x1b0>)
    a7ac:	4798      	blx	r3
    a7ae:	4603      	mov	r3, r0
    a7b0:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a7b2:	687b      	ldr	r3, [r7, #4]
    a7b4:	7cdb      	ldrb	r3, [r3, #19]
    a7b6:	f003 0307 	and.w	r3, r3, #7
    a7ba:	b2db      	uxtb	r3, r3
    a7bc:	2b01      	cmp	r3, #1
    a7be:	bf0c      	ite	eq
    a7c0:	2301      	moveq	r3, #1
    a7c2:	2300      	movne	r3, #0
    a7c4:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a7c6:	78fb      	ldrb	r3, [r7, #3]
    a7c8:	011b      	lsls	r3, r3, #4
    a7ca:	697a      	ldr	r2, [r7, #20]
    a7cc:	4413      	add	r3, r2
    a7ce:	7a9b      	ldrb	r3, [r3, #10]
    a7d0:	b2db      	uxtb	r3, r3
    a7d2:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a7d4:	7cfb      	ldrb	r3, [r7, #19]
    a7d6:	2b02      	cmp	r3, #2
    a7d8:	d12f      	bne.n	a83a <_usb_d_dev_handle_trfail+0xd6>
    a7da:	7b3b      	ldrb	r3, [r7, #12]
    a7dc:	f003 0301 	and.w	r3, r3, #1
    a7e0:	b2db      	uxtb	r3, r3
    a7e2:	2b00      	cmp	r3, #0
    a7e4:	d029      	beq.n	a83a <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a7e6:	78fb      	ldrb	r3, [r7, #3]
    a7e8:	011b      	lsls	r3, r3, #4
    a7ea:	697a      	ldr	r2, [r7, #20]
    a7ec:	441a      	add	r2, r3
    a7ee:	7a93      	ldrb	r3, [r2, #10]
    a7f0:	f36f 0300 	bfc	r3, #0, #1
    a7f4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a7f6:	78fb      	ldrb	r3, [r7, #3]
    a7f8:	f107 0220 	add.w	r2, r7, #32
    a7fc:	4413      	add	r3, r2
    a7fe:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a802:	7efb      	ldrb	r3, [r7, #27]
    a804:	4619      	mov	r1, r3
    a806:	69f8      	ldr	r0, [r7, #28]
    a808:	4b43      	ldr	r3, [pc, #268]	; (a918 <_usb_d_dev_handle_trfail+0x1b4>)
    a80a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a80c:	78fb      	ldrb	r3, [r7, #3]
    a80e:	f107 0220 	add.w	r2, r7, #32
    a812:	4413      	add	r3, r2
    a814:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a818:	7efb      	ldrb	r3, [r7, #27]
    a81a:	4619      	mov	r1, r3
    a81c:	69f8      	ldr	r0, [r7, #28]
    a81e:	4b3f      	ldr	r3, [pc, #252]	; (a91c <_usb_d_dev_handle_trfail+0x1b8>)
    a820:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a822:	78fb      	ldrb	r3, [r7, #3]
    a824:	2b00      	cmp	r3, #0
    a826:	bf14      	ite	ne
    a828:	2301      	movne	r3, #1
    a82a:	2300      	moveq	r3, #0
    a82c:	b2db      	uxtb	r3, r3
    a82e:	2204      	movs	r2, #4
    a830:	4619      	mov	r1, r3
    a832:	6878      	ldr	r0, [r7, #4]
    a834:	4b3a      	ldr	r3, [pc, #232]	; (a920 <_usb_d_dev_handle_trfail+0x1bc>)
    a836:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a838:	e062      	b.n	a900 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a83a:	7b3b      	ldrb	r3, [r7, #12]
    a83c:	f003 0302 	and.w	r3, r3, #2
    a840:	b2db      	uxtb	r3, r3
    a842:	2b00      	cmp	r3, #0
    a844:	d040      	beq.n	a8c8 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a846:	78fb      	ldrb	r3, [r7, #3]
    a848:	011b      	lsls	r3, r3, #4
    a84a:	697a      	ldr	r2, [r7, #20]
    a84c:	441a      	add	r2, r3
    a84e:	7a93      	ldrb	r3, [r2, #10]
    a850:	f36f 0341 	bfc	r3, #1, #1
    a854:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a856:	78fb      	ldrb	r3, [r7, #3]
    a858:	f107 0220 	add.w	r2, r7, #32
    a85c:	4413      	add	r3, r2
    a85e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a862:	7efb      	ldrb	r3, [r7, #27]
    a864:	4619      	mov	r1, r3
    a866:	69f8      	ldr	r0, [r7, #28]
    a868:	4b2b      	ldr	r3, [pc, #172]	; (a918 <_usb_d_dev_handle_trfail+0x1b4>)
    a86a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a86c:	78fb      	ldrb	r3, [r7, #3]
    a86e:	f107 0220 	add.w	r2, r7, #32
    a872:	4413      	add	r3, r2
    a874:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a878:	7efb      	ldrb	r3, [r7, #27]
    a87a:	4619      	mov	r1, r3
    a87c:	69f8      	ldr	r0, [r7, #28]
    a87e:	4b27      	ldr	r3, [pc, #156]	; (a91c <_usb_d_dev_handle_trfail+0x1b8>)
    a880:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a882:	7cbb      	ldrb	r3, [r7, #18]
    a884:	2b00      	cmp	r3, #0
    a886:	d03b      	beq.n	a900 <_usb_d_dev_handle_trfail+0x19c>
    a888:	687b      	ldr	r3, [r7, #4]
    a88a:	7cdb      	ldrb	r3, [r3, #19]
    a88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a890:	b2db      	uxtb	r3, r3
    a892:	2b00      	cmp	r3, #0
    a894:	d034      	beq.n	a900 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a896:	687b      	ldr	r3, [r7, #4]
    a898:	7cdb      	ldrb	r3, [r3, #19]
    a89a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a89e:	b2db      	uxtb	r3, r3
    a8a0:	461a      	mov	r2, r3
    a8a2:	78fb      	ldrb	r3, [r7, #3]
    a8a4:	4293      	cmp	r3, r2
    a8a6:	d02b      	beq.n	a900 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a8a8:	687b      	ldr	r3, [r7, #4]
    a8aa:	7cdb      	ldrb	r3, [r3, #19]
    a8ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a8b0:	b2db      	uxtb	r3, r3
    a8b2:	2b00      	cmp	r3, #0
    a8b4:	bf14      	ite	ne
    a8b6:	2301      	movne	r3, #1
    a8b8:	2300      	moveq	r3, #0
    a8ba:	b2db      	uxtb	r3, r3
    a8bc:	2200      	movs	r2, #0
    a8be:	4619      	mov	r1, r3
    a8c0:	6878      	ldr	r0, [r7, #4]
    a8c2:	4b17      	ldr	r3, [pc, #92]	; (a920 <_usb_d_dev_handle_trfail+0x1bc>)
    a8c4:	4798      	blx	r3
}
    a8c6:	e01b      	b.n	a900 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a8c8:	78fa      	ldrb	r2, [r7, #3]
    a8ca:	7efb      	ldrb	r3, [r7, #27]
    a8cc:	4611      	mov	r1, r2
    a8ce:	4618      	mov	r0, r3
    a8d0:	4b14      	ldr	r3, [pc, #80]	; (a924 <_usb_d_dev_handle_trfail+0x1c0>)
    a8d2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a8d4:	78fb      	ldrb	r3, [r7, #3]
    a8d6:	f107 0220 	add.w	r2, r7, #32
    a8da:	4413      	add	r3, r2
    a8dc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a8e0:	7efb      	ldrb	r3, [r7, #27]
    a8e2:	4619      	mov	r1, r3
    a8e4:	69f8      	ldr	r0, [r7, #28]
    a8e6:	4b0c      	ldr	r3, [pc, #48]	; (a918 <_usb_d_dev_handle_trfail+0x1b4>)
    a8e8:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a8ea:	78fb      	ldrb	r3, [r7, #3]
    a8ec:	f107 0220 	add.w	r2, r7, #32
    a8f0:	4413      	add	r3, r2
    a8f2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a8f6:	7efb      	ldrb	r3, [r7, #27]
    a8f8:	4619      	mov	r1, r3
    a8fa:	69f8      	ldr	r0, [r7, #28]
    a8fc:	4b07      	ldr	r3, [pc, #28]	; (a91c <_usb_d_dev_handle_trfail+0x1b8>)
    a8fe:	4798      	blx	r3
}
    a900:	bf00      	nop
    a902:	3720      	adds	r7, #32
    a904:	46bd      	mov	sp, r7
    a906:	bd80      	pop	{r7, pc}
    a908:	000110d0 	.word	0x000110d0
    a90c:	20001150 	.word	0x20001150
    a910:	000094cd 	.word	0x000094cd
    a914:	0000949d 	.word	0x0000949d
    a918:	00009371 	.word	0x00009371
    a91c:	00009471 	.word	0x00009471
    a920:	0000b4dd 	.word	0x0000b4dd
    a924:	00009d59 	.word	0x00009d59

0000a928 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a928:	b580      	push	{r7, lr}
    a92a:	b082      	sub	sp, #8
    a92c:	af00      	add	r7, sp, #0
    a92e:	6078      	str	r0, [r7, #4]
    a930:	460b      	mov	r3, r1
    a932:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a934:	78fb      	ldrb	r3, [r7, #3]
    a936:	f003 0310 	and.w	r3, r3, #16
    a93a:	2b00      	cmp	r3, #0
    a93c:	d003      	beq.n	a946 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a93e:	6878      	ldr	r0, [r7, #4]
    a940:	4b0c      	ldr	r3, [pc, #48]	; (a974 <_usb_d_dev_trans_setup_isr+0x4c>)
    a942:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a944:	e012      	b.n	a96c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a946:	78fb      	ldrb	r3, [r7, #3]
    a948:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a94c:	2b00      	cmp	r3, #0
    a94e:	d004      	beq.n	a95a <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a950:	2101      	movs	r1, #1
    a952:	6878      	ldr	r0, [r7, #4]
    a954:	4b08      	ldr	r3, [pc, #32]	; (a978 <_usb_d_dev_trans_setup_isr+0x50>)
    a956:	4798      	blx	r3
}
    a958:	e008      	b.n	a96c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a95a:	78fb      	ldrb	r3, [r7, #3]
    a95c:	f003 0320 	and.w	r3, r3, #32
    a960:	2b00      	cmp	r3, #0
    a962:	d003      	beq.n	a96c <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a964:	2100      	movs	r1, #0
    a966:	6878      	ldr	r0, [r7, #4]
    a968:	4b03      	ldr	r3, [pc, #12]	; (a978 <_usb_d_dev_trans_setup_isr+0x50>)
    a96a:	4798      	blx	r3
}
    a96c:	bf00      	nop
    a96e:	3708      	adds	r7, #8
    a970:	46bd      	mov	sp, r7
    a972:	bd80      	pop	{r7, pc}
    a974:	0000a649 	.word	0x0000a649
    a978:	0000a721 	.word	0x0000a721

0000a97c <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a97c:	b580      	push	{r7, lr}
    a97e:	b082      	sub	sp, #8
    a980:	af00      	add	r7, sp, #0
    a982:	6078      	str	r0, [r7, #4]
    a984:	460b      	mov	r3, r1
    a986:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a988:	78fb      	ldrb	r3, [r7, #3]
    a98a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a98e:	2b00      	cmp	r3, #0
    a990:	d004      	beq.n	a99c <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a992:	2101      	movs	r1, #1
    a994:	6878      	ldr	r0, [r7, #4]
    a996:	4b1a      	ldr	r3, [pc, #104]	; (aa00 <_usb_d_dev_trans_in_isr+0x84>)
    a998:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a99a:	e02c      	b.n	a9f6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a99c:	78fb      	ldrb	r3, [r7, #3]
    a99e:	f003 0308 	and.w	r3, r3, #8
    a9a2:	2b00      	cmp	r3, #0
    a9a4:	d004      	beq.n	a9b0 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a9a6:	2101      	movs	r1, #1
    a9a8:	6878      	ldr	r0, [r7, #4]
    a9aa:	4b16      	ldr	r3, [pc, #88]	; (aa04 <_usb_d_dev_trans_in_isr+0x88>)
    a9ac:	4798      	blx	r3
}
    a9ae:	e022      	b.n	a9f6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a9b0:	78fb      	ldrb	r3, [r7, #3]
    a9b2:	f003 0302 	and.w	r3, r3, #2
    a9b6:	2b00      	cmp	r3, #0
    a9b8:	d004      	beq.n	a9c4 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a9ba:	2101      	movs	r1, #1
    a9bc:	6878      	ldr	r0, [r7, #4]
    a9be:	4b12      	ldr	r3, [pc, #72]	; (aa08 <_usb_d_dev_trans_in_isr+0x8c>)
    a9c0:	4798      	blx	r3
}
    a9c2:	e018      	b.n	a9f6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a9c4:	687b      	ldr	r3, [r7, #4]
    a9c6:	7cdb      	ldrb	r3, [r3, #19]
    a9c8:	f003 0307 	and.w	r3, r3, #7
    a9cc:	b2db      	uxtb	r3, r3
    a9ce:	2b01      	cmp	r3, #1
    a9d0:	d111      	bne.n	a9f6 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a9d2:	78fb      	ldrb	r3, [r7, #3]
    a9d4:	f003 0304 	and.w	r3, r3, #4
    a9d8:	2b00      	cmp	r3, #0
    a9da:	d004      	beq.n	a9e6 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a9dc:	2100      	movs	r1, #0
    a9de:	6878      	ldr	r0, [r7, #4]
    a9e0:	4b08      	ldr	r3, [pc, #32]	; (aa04 <_usb_d_dev_trans_in_isr+0x88>)
    a9e2:	4798      	blx	r3
}
    a9e4:	e007      	b.n	a9f6 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a9e6:	78fb      	ldrb	r3, [r7, #3]
    a9e8:	f003 0310 	and.w	r3, r3, #16
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	d002      	beq.n	a9f6 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a9f0:	6878      	ldr	r0, [r7, #4]
    a9f2:	4b06      	ldr	r3, [pc, #24]	; (aa0c <_usb_d_dev_trans_in_isr+0x90>)
    a9f4:	4798      	blx	r3
}
    a9f6:	bf00      	nop
    a9f8:	3708      	adds	r7, #8
    a9fa:	46bd      	mov	sp, r7
    a9fc:	bd80      	pop	{r7, pc}
    a9fe:	bf00      	nop
    aa00:	0000a721 	.word	0x0000a721
    aa04:	0000a765 	.word	0x0000a765
    aa08:	0000a16d 	.word	0x0000a16d
    aa0c:	0000a649 	.word	0x0000a649

0000aa10 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    aa10:	b580      	push	{r7, lr}
    aa12:	b082      	sub	sp, #8
    aa14:	af00      	add	r7, sp, #0
    aa16:	6078      	str	r0, [r7, #4]
    aa18:	460b      	mov	r3, r1
    aa1a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    aa1c:	78fb      	ldrb	r3, [r7, #3]
    aa1e:	f003 0320 	and.w	r3, r3, #32
    aa22:	2b00      	cmp	r3, #0
    aa24:	d004      	beq.n	aa30 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    aa26:	2100      	movs	r1, #0
    aa28:	6878      	ldr	r0, [r7, #4]
    aa2a:	4b1a      	ldr	r3, [pc, #104]	; (aa94 <_usb_d_dev_trans_out_isr+0x84>)
    aa2c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    aa2e:	e02c      	b.n	aa8a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    aa30:	78fb      	ldrb	r3, [r7, #3]
    aa32:	f003 0304 	and.w	r3, r3, #4
    aa36:	2b00      	cmp	r3, #0
    aa38:	d004      	beq.n	aa44 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    aa3a:	2100      	movs	r1, #0
    aa3c:	6878      	ldr	r0, [r7, #4]
    aa3e:	4b16      	ldr	r3, [pc, #88]	; (aa98 <_usb_d_dev_trans_out_isr+0x88>)
    aa40:	4798      	blx	r3
}
    aa42:	e022      	b.n	aa8a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    aa44:	78fb      	ldrb	r3, [r7, #3]
    aa46:	f003 0301 	and.w	r3, r3, #1
    aa4a:	2b00      	cmp	r3, #0
    aa4c:	d004      	beq.n	aa58 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    aa4e:	2101      	movs	r1, #1
    aa50:	6878      	ldr	r0, [r7, #4]
    aa52:	4b12      	ldr	r3, [pc, #72]	; (aa9c <_usb_d_dev_trans_out_isr+0x8c>)
    aa54:	4798      	blx	r3
}
    aa56:	e018      	b.n	aa8a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    aa58:	687b      	ldr	r3, [r7, #4]
    aa5a:	7cdb      	ldrb	r3, [r3, #19]
    aa5c:	f003 0307 	and.w	r3, r3, #7
    aa60:	b2db      	uxtb	r3, r3
    aa62:	2b01      	cmp	r3, #1
    aa64:	d111      	bne.n	aa8a <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    aa66:	78fb      	ldrb	r3, [r7, #3]
    aa68:	f003 0308 	and.w	r3, r3, #8
    aa6c:	2b00      	cmp	r3, #0
    aa6e:	d004      	beq.n	aa7a <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    aa70:	2101      	movs	r1, #1
    aa72:	6878      	ldr	r0, [r7, #4]
    aa74:	4b08      	ldr	r3, [pc, #32]	; (aa98 <_usb_d_dev_trans_out_isr+0x88>)
    aa76:	4798      	blx	r3
}
    aa78:	e007      	b.n	aa8a <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    aa7a:	78fb      	ldrb	r3, [r7, #3]
    aa7c:	f003 0310 	and.w	r3, r3, #16
    aa80:	2b00      	cmp	r3, #0
    aa82:	d002      	beq.n	aa8a <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    aa84:	6878      	ldr	r0, [r7, #4]
    aa86:	4b06      	ldr	r3, [pc, #24]	; (aaa0 <_usb_d_dev_trans_out_isr+0x90>)
    aa88:	4798      	blx	r3
}
    aa8a:	bf00      	nop
    aa8c:	3708      	adds	r7, #8
    aa8e:	46bd      	mov	sp, r7
    aa90:	bd80      	pop	{r7, pc}
    aa92:	bf00      	nop
    aa94:	0000a721 	.word	0x0000a721
    aa98:	0000a765 	.word	0x0000a765
    aa9c:	0000a385 	.word	0x0000a385
    aaa0:	0000a649 	.word	0x0000a649

0000aaa4 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    aaa4:	b580      	push	{r7, lr}
    aaa6:	b084      	sub	sp, #16
    aaa8:	af00      	add	r7, sp, #0
    aaaa:	6078      	str	r0, [r7, #4]
    aaac:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    aaae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aab2:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aab4:	683b      	ldr	r3, [r7, #0]
    aab6:	7c9b      	ldrb	r3, [r3, #18]
    aab8:	f003 030f 	and.w	r3, r3, #15
    aabc:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    aabe:	7afb      	ldrb	r3, [r7, #11]
    aac0:	2201      	movs	r2, #1
    aac2:	409a      	lsls	r2, r3
    aac4:	687b      	ldr	r3, [r7, #4]
    aac6:	4013      	ands	r3, r2
    aac8:	2b00      	cmp	r3, #0
    aaca:	d03d      	beq.n	ab48 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    aacc:	7afb      	ldrb	r3, [r7, #11]
    aace:	68fa      	ldr	r2, [r7, #12]
    aad0:	3308      	adds	r3, #8
    aad2:	015b      	lsls	r3, r3, #5
    aad4:	4413      	add	r3, r2
    aad6:	3307      	adds	r3, #7
    aad8:	781b      	ldrb	r3, [r3, #0]
    aada:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    aadc:	7afb      	ldrb	r3, [r7, #11]
    aade:	68fa      	ldr	r2, [r7, #12]
    aae0:	015b      	lsls	r3, r3, #5
    aae2:	4413      	add	r3, r2
    aae4:	f203 1309 	addw	r3, r3, #265	; 0x109
    aae8:	781b      	ldrb	r3, [r3, #0]
    aaea:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    aaec:	7aba      	ldrb	r2, [r7, #10]
    aaee:	7a7b      	ldrb	r3, [r7, #9]
    aaf0:	4013      	ands	r3, r2
    aaf2:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    aaf4:	7abb      	ldrb	r3, [r7, #10]
    aaf6:	2b00      	cmp	r3, #0
    aaf8:	d027      	beq.n	ab4a <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    aafa:	683b      	ldr	r3, [r7, #0]
    aafc:	7cdb      	ldrb	r3, [r3, #19]
    aafe:	f003 0307 	and.w	r3, r3, #7
    ab02:	b2db      	uxtb	r3, r3
    ab04:	2b01      	cmp	r3, #1
    ab06:	d10c      	bne.n	ab22 <_usb_d_dev_handle_eps+0x7e>
    ab08:	683b      	ldr	r3, [r7, #0]
    ab0a:	7cdb      	ldrb	r3, [r3, #19]
    ab0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ab10:	b2db      	uxtb	r3, r3
    ab12:	2b00      	cmp	r3, #0
    ab14:	d105      	bne.n	ab22 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    ab16:	7abb      	ldrb	r3, [r7, #10]
    ab18:	4619      	mov	r1, r3
    ab1a:	6838      	ldr	r0, [r7, #0]
    ab1c:	4b0c      	ldr	r3, [pc, #48]	; (ab50 <_usb_d_dev_handle_eps+0xac>)
    ab1e:	4798      	blx	r3
    ab20:	e013      	b.n	ab4a <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    ab22:	683b      	ldr	r3, [r7, #0]
    ab24:	7cdb      	ldrb	r3, [r3, #19]
    ab26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    ab2a:	b2db      	uxtb	r3, r3
    ab2c:	2b00      	cmp	r3, #0
    ab2e:	d005      	beq.n	ab3c <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    ab30:	7abb      	ldrb	r3, [r7, #10]
    ab32:	4619      	mov	r1, r3
    ab34:	6838      	ldr	r0, [r7, #0]
    ab36:	4b07      	ldr	r3, [pc, #28]	; (ab54 <_usb_d_dev_handle_eps+0xb0>)
    ab38:	4798      	blx	r3
    ab3a:	e006      	b.n	ab4a <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    ab3c:	7abb      	ldrb	r3, [r7, #10]
    ab3e:	4619      	mov	r1, r3
    ab40:	6838      	ldr	r0, [r7, #0]
    ab42:	4b05      	ldr	r3, [pc, #20]	; (ab58 <_usb_d_dev_handle_eps+0xb4>)
    ab44:	4798      	blx	r3
    ab46:	e000      	b.n	ab4a <_usb_d_dev_handle_eps+0xa6>
		return;
    ab48:	bf00      	nop
		}
	}
}
    ab4a:	3710      	adds	r7, #16
    ab4c:	46bd      	mov	sp, r7
    ab4e:	bd80      	pop	{r7, pc}
    ab50:	0000a929 	.word	0x0000a929
    ab54:	0000a97d 	.word	0x0000a97d
    ab58:	0000aa11 	.word	0x0000aa11

0000ab5c <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    ab5c:	b580      	push	{r7, lr}
    ab5e:	b084      	sub	sp, #16
    ab60:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    ab62:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ab66:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    ab68:	68bb      	ldr	r3, [r7, #8]
    ab6a:	8c1b      	ldrh	r3, [r3, #32]
    ab6c:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    ab6e:	88fb      	ldrh	r3, [r7, #6]
    ab70:	2b00      	cmp	r3, #0
    ab72:	d104      	bne.n	ab7e <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    ab74:	4b13      	ldr	r3, [pc, #76]	; (abc4 <_usb_d_dev_handler+0x68>)
    ab76:	4798      	blx	r3
    ab78:	4603      	mov	r3, r0
    ab7a:	2b00      	cmp	r3, #0
    ab7c:	d11e      	bne.n	abbc <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    ab7e:	2300      	movs	r3, #0
    ab80:	73fb      	strb	r3, [r7, #15]
    ab82:	e017      	b.n	abb4 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    ab84:	7bfa      	ldrb	r2, [r7, #15]
    ab86:	4613      	mov	r3, r2
    ab88:	009b      	lsls	r3, r3, #2
    ab8a:	4413      	add	r3, r2
    ab8c:	009b      	lsls	r3, r3, #2
    ab8e:	3310      	adds	r3, #16
    ab90:	4a0d      	ldr	r2, [pc, #52]	; (abc8 <_usb_d_dev_handler+0x6c>)
    ab92:	4413      	add	r3, r2
    ab94:	3304      	adds	r3, #4
    ab96:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    ab98:	683b      	ldr	r3, [r7, #0]
    ab9a:	7c9b      	ldrb	r3, [r3, #18]
    ab9c:	2bff      	cmp	r3, #255	; 0xff
    ab9e:	d005      	beq.n	abac <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    aba0:	88fb      	ldrh	r3, [r7, #6]
    aba2:	6839      	ldr	r1, [r7, #0]
    aba4:	4618      	mov	r0, r3
    aba6:	4b09      	ldr	r3, [pc, #36]	; (abcc <_usb_d_dev_handler+0x70>)
    aba8:	4798      	blx	r3
    abaa:	e000      	b.n	abae <_usb_d_dev_handler+0x52>
			continue;
    abac:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    abae:	7bfb      	ldrb	r3, [r7, #15]
    abb0:	3301      	adds	r3, #1
    abb2:	73fb      	strb	r3, [r7, #15]
    abb4:	7bfb      	ldrb	r3, [r7, #15]
    abb6:	2b08      	cmp	r3, #8
    abb8:	d9e4      	bls.n	ab84 <_usb_d_dev_handler+0x28>
    abba:	e000      	b.n	abbe <_usb_d_dev_handler+0x62>
			return;
    abbc:	bf00      	nop
	}
}
    abbe:	3710      	adds	r7, #16
    abc0:	46bd      	mov	sp, r7
    abc2:	bd80      	pop	{r7, pc}
    abc4:	0000a0b5 	.word	0x0000a0b5
    abc8:	20001088 	.word	0x20001088
    abcc:	0000aaa5 	.word	0x0000aaa5

0000abd0 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    abd0:	b580      	push	{r7, lr}
    abd2:	b082      	sub	sp, #8
    abd4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    abd6:	2300      	movs	r3, #0
    abd8:	71fb      	strb	r3, [r7, #7]
    abda:	e023      	b.n	ac24 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    abdc:	79fa      	ldrb	r2, [r7, #7]
    abde:	4613      	mov	r3, r2
    abe0:	009b      	lsls	r3, r3, #2
    abe2:	4413      	add	r3, r2
    abe4:	009b      	lsls	r3, r3, #2
    abe6:	3310      	adds	r3, #16
    abe8:	4a14      	ldr	r2, [pc, #80]	; (ac3c <_usb_d_dev_reset_epts+0x6c>)
    abea:	4413      	add	r3, r2
    abec:	3304      	adds	r3, #4
    abee:	2103      	movs	r1, #3
    abf0:	4618      	mov	r0, r3
    abf2:	4b13      	ldr	r3, [pc, #76]	; (ac40 <_usb_d_dev_reset_epts+0x70>)
    abf4:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    abf6:	79fa      	ldrb	r2, [r7, #7]
    abf8:	4910      	ldr	r1, [pc, #64]	; (ac3c <_usb_d_dev_reset_epts+0x6c>)
    abfa:	4613      	mov	r3, r2
    abfc:	009b      	lsls	r3, r3, #2
    abfe:	4413      	add	r3, r2
    ac00:	009b      	lsls	r3, r3, #2
    ac02:	440b      	add	r3, r1
    ac04:	3326      	adds	r3, #38	; 0x26
    ac06:	22ff      	movs	r2, #255	; 0xff
    ac08:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    ac0a:	79fa      	ldrb	r2, [r7, #7]
    ac0c:	490b      	ldr	r1, [pc, #44]	; (ac3c <_usb_d_dev_reset_epts+0x6c>)
    ac0e:	4613      	mov	r3, r2
    ac10:	009b      	lsls	r3, r3, #2
    ac12:	4413      	add	r3, r2
    ac14:	009b      	lsls	r3, r3, #2
    ac16:	440b      	add	r3, r1
    ac18:	3327      	adds	r3, #39	; 0x27
    ac1a:	2200      	movs	r2, #0
    ac1c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    ac1e:	79fb      	ldrb	r3, [r7, #7]
    ac20:	3301      	adds	r3, #1
    ac22:	71fb      	strb	r3, [r7, #7]
    ac24:	79fb      	ldrb	r3, [r7, #7]
    ac26:	2b08      	cmp	r3, #8
    ac28:	d9d8      	bls.n	abdc <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    ac2a:	22a0      	movs	r2, #160	; 0xa0
    ac2c:	2100      	movs	r1, #0
    ac2e:	4805      	ldr	r0, [pc, #20]	; (ac44 <_usb_d_dev_reset_epts+0x74>)
    ac30:	4b05      	ldr	r3, [pc, #20]	; (ac48 <_usb_d_dev_reset_epts+0x78>)
    ac32:	4798      	blx	r3
}
    ac34:	bf00      	nop
    ac36:	3708      	adds	r7, #8
    ac38:	46bd      	mov	sp, r7
    ac3a:	bd80      	pop	{r7, pc}
    ac3c:	20001088 	.word	0x20001088
    ac40:	0000b495 	.word	0x0000b495
    ac44:	20001150 	.word	0x20001150
    ac48:	00010a7d 	.word	0x00010a7d

0000ac4c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    ac4c:	b580      	push	{r7, lr}
    ac4e:	b084      	sub	sp, #16
    ac50:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    ac52:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ac56:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    ac58:	2301      	movs	r3, #1
    ac5a:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    ac5c:	2304      	movs	r3, #4
    ac5e:	713b      	strb	r3, [r7, #4]
    ac60:	2300      	movs	r3, #0
    ac62:	717b      	strb	r3, [r7, #5]
    ac64:	2300      	movs	r3, #0
    ac66:	71bb      	strb	r3, [r7, #6]
    ac68:	2300      	movs	r3, #0
    ac6a:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    ac6c:	2101      	movs	r1, #1
    ac6e:	68f8      	ldr	r0, [r7, #12]
    ac70:	4b26      	ldr	r3, [pc, #152]	; (ad0c <_usb_d_dev_init+0xc0>)
    ac72:	4798      	blx	r3
    ac74:	4603      	mov	r3, r0
    ac76:	f083 0301 	eor.w	r3, r3, #1
    ac7a:	b2db      	uxtb	r3, r3
    ac7c:	2b00      	cmp	r3, #0
    ac7e:	d011      	beq.n	aca4 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    ac80:	2102      	movs	r1, #2
    ac82:	68f8      	ldr	r0, [r7, #12]
    ac84:	4b22      	ldr	r3, [pc, #136]	; (ad10 <_usb_d_dev_init+0xc4>)
    ac86:	4798      	blx	r3
    ac88:	4603      	mov	r3, r0
    ac8a:	2b00      	cmp	r3, #0
    ac8c:	d006      	beq.n	ac9c <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    ac8e:	68f8      	ldr	r0, [r7, #12]
    ac90:	4b20      	ldr	r3, [pc, #128]	; (ad14 <_usb_d_dev_init+0xc8>)
    ac92:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    ac94:	2102      	movs	r1, #2
    ac96:	68f8      	ldr	r0, [r7, #12]
    ac98:	4b1f      	ldr	r3, [pc, #124]	; (ad18 <_usb_d_dev_init+0xcc>)
    ac9a:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    ac9c:	2101      	movs	r1, #1
    ac9e:	68f8      	ldr	r0, [r7, #12]
    aca0:	4b1e      	ldr	r3, [pc, #120]	; (ad1c <_usb_d_dev_init+0xd0>)
    aca2:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    aca4:	2101      	movs	r1, #1
    aca6:	68f8      	ldr	r0, [r7, #12]
    aca8:	4b1b      	ldr	r3, [pc, #108]	; (ad18 <_usb_d_dev_init+0xcc>)
    acaa:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    acac:	4b1c      	ldr	r3, [pc, #112]	; (ad20 <_usb_d_dev_init+0xd4>)
    acae:	4a1d      	ldr	r2, [pc, #116]	; (ad24 <_usb_d_dev_init+0xd8>)
    acb0:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    acb2:	4b1b      	ldr	r3, [pc, #108]	; (ad20 <_usb_d_dev_init+0xd4>)
    acb4:	4a1b      	ldr	r2, [pc, #108]	; (ad24 <_usb_d_dev_init+0xd8>)
    acb6:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    acb8:	4b19      	ldr	r3, [pc, #100]	; (ad20 <_usb_d_dev_init+0xd4>)
    acba:	4a1a      	ldr	r2, [pc, #104]	; (ad24 <_usb_d_dev_init+0xd8>)
    acbc:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    acbe:	4b18      	ldr	r3, [pc, #96]	; (ad20 <_usb_d_dev_init+0xd4>)
    acc0:	4a18      	ldr	r2, [pc, #96]	; (ad24 <_usb_d_dev_init+0xd8>)
    acc2:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    acc4:	4b16      	ldr	r3, [pc, #88]	; (ad20 <_usb_d_dev_init+0xd4>)
    acc6:	4a17      	ldr	r2, [pc, #92]	; (ad24 <_usb_d_dev_init+0xd8>)
    acc8:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    acca:	4b17      	ldr	r3, [pc, #92]	; (ad28 <_usb_d_dev_init+0xdc>)
    accc:	4798      	blx	r3

	_usb_load_calib();
    acce:	4b17      	ldr	r3, [pc, #92]	; (ad2c <_usb_d_dev_init+0xe0>)
    acd0:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    acd2:	2104      	movs	r1, #4
    acd4:	68f8      	ldr	r0, [r7, #12]
    acd6:	4b11      	ldr	r3, [pc, #68]	; (ad1c <_usb_d_dev_init+0xd0>)
    acd8:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    acda:	4b15      	ldr	r3, [pc, #84]	; (ad30 <_usb_d_dev_init+0xe4>)
    acdc:	4619      	mov	r1, r3
    acde:	68f8      	ldr	r0, [r7, #12]
    ace0:	4b14      	ldr	r3, [pc, #80]	; (ad34 <_usb_d_dev_init+0xe8>)
    ace2:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    ace4:	7afb      	ldrb	r3, [r7, #11]
    ace6:	f107 0210 	add.w	r2, r7, #16
    acea:	4413      	add	r3, r2
    acec:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    acf0:	f043 0301 	orr.w	r3, r3, #1
    acf4:	b2db      	uxtb	r3, r3
    acf6:	b29b      	uxth	r3, r3
    acf8:	4619      	mov	r1, r3
    acfa:	68f8      	ldr	r0, [r7, #12]
    acfc:	4b0e      	ldr	r3, [pc, #56]	; (ad38 <_usb_d_dev_init+0xec>)
    acfe:	4798      	blx	r3

	return ERR_NONE;
    ad00:	2300      	movs	r3, #0
}
    ad02:	4618      	mov	r0, r3
    ad04:	3710      	adds	r7, #16
    ad06:	46bd      	mov	sp, r7
    ad08:	bd80      	pop	{r7, pc}
    ad0a:	bf00      	nop
    ad0c:	000092e5 	.word	0x000092e5
    ad10:	00009635 	.word	0x00009635
    ad14:	00009609 	.word	0x00009609
    ad18:	000092bb 	.word	0x000092bb
    ad1c:	00009665 	.word	0x00009665
    ad20:	20001088 	.word	0x20001088
    ad24:	0000972d 	.word	0x0000972d
    ad28:	0000abd1 	.word	0x0000abd1
    ad2c:	00009745 	.word	0x00009745
    ad30:	20001150 	.word	0x20001150
    ad34:	00009711 	.word	0x00009711
    ad38:	000096d5 	.word	0x000096d5

0000ad3c <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    ad3c:	b580      	push	{r7, lr}
    ad3e:	b082      	sub	sp, #8
    ad40:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    ad42:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ad46:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    ad48:	2103      	movs	r1, #3
    ad4a:	6878      	ldr	r0, [r7, #4]
    ad4c:	4b17      	ldr	r3, [pc, #92]	; (adac <_usb_d_dev_enable+0x70>)
    ad4e:	4798      	blx	r3
    ad50:	4603      	mov	r3, r0
    ad52:	2b00      	cmp	r3, #0
    ad54:	d002      	beq.n	ad5c <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    ad56:	f06f 0310 	mvn.w	r3, #16
    ad5a:	e023      	b.n	ada4 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    ad5c:	6878      	ldr	r0, [r7, #4]
    ad5e:	4b14      	ldr	r3, [pc, #80]	; (adb0 <_usb_d_dev_enable+0x74>)
    ad60:	4798      	blx	r3
    ad62:	4603      	mov	r3, r0
    ad64:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    ad66:	78fb      	ldrb	r3, [r7, #3]
    ad68:	f003 0302 	and.w	r3, r3, #2
    ad6c:	2b00      	cmp	r3, #0
    ad6e:	d107      	bne.n	ad80 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    ad70:	78fb      	ldrb	r3, [r7, #3]
    ad72:	f043 0302 	orr.w	r3, r3, #2
    ad76:	b2db      	uxtb	r3, r3
    ad78:	4619      	mov	r1, r3
    ad7a:	6878      	ldr	r0, [r7, #4]
    ad7c:	4b0d      	ldr	r3, [pc, #52]	; (adb4 <_usb_d_dev_enable+0x78>)
    ad7e:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    ad80:	2050      	movs	r0, #80	; 0x50
    ad82:	4b0d      	ldr	r3, [pc, #52]	; (adb8 <_usb_d_dev_enable+0x7c>)
    ad84:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    ad86:	2051      	movs	r0, #81	; 0x51
    ad88:	4b0b      	ldr	r3, [pc, #44]	; (adb8 <_usb_d_dev_enable+0x7c>)
    ad8a:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    ad8c:	2052      	movs	r0, #82	; 0x52
    ad8e:	4b0a      	ldr	r3, [pc, #40]	; (adb8 <_usb_d_dev_enable+0x7c>)
    ad90:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    ad92:	2053      	movs	r0, #83	; 0x53
    ad94:	4b08      	ldr	r3, [pc, #32]	; (adb8 <_usb_d_dev_enable+0x7c>)
    ad96:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    ad98:	f240 218d 	movw	r1, #653	; 0x28d
    ad9c:	6878      	ldr	r0, [r7, #4]
    ad9e:	4b07      	ldr	r3, [pc, #28]	; (adbc <_usb_d_dev_enable+0x80>)
    ada0:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    ada2:	2300      	movs	r3, #0
}
    ada4:	4618      	mov	r0, r3
    ada6:	3708      	adds	r7, #8
    ada8:	46bd      	mov	sp, r7
    adaa:	bd80      	pop	{r7, pc}
    adac:	000095df 	.word	0x000095df
    adb0:	0000968d 	.word	0x0000968d
    adb4:	00009665 	.word	0x00009665
    adb8:	000091f1 	.word	0x000091f1
    adbc:	00009589 	.word	0x00009589

0000adc0 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    adc0:	b580      	push	{r7, lr}
    adc2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    adc4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    adc8:	4b01      	ldr	r3, [pc, #4]	; (add0 <_usb_d_dev_attach+0x10>)
    adca:	4798      	blx	r3
}
    adcc:	bf00      	nop
    adce:	bd80      	pop	{r7, pc}
    add0:	000096b1 	.word	0x000096b1

0000add4 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    add4:	b580      	push	{r7, lr}
    add6:	b082      	sub	sp, #8
    add8:	af00      	add	r7, sp, #0
    adda:	4603      	mov	r3, r0
    addc:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    adde:	79fb      	ldrb	r3, [r7, #7]
    ade0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ade4:	b2db      	uxtb	r3, r3
    ade6:	4619      	mov	r1, r3
    ade8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    adec:	4b02      	ldr	r3, [pc, #8]	; (adf8 <_usb_d_dev_set_address+0x24>)
    adee:	4798      	blx	r3
}
    adf0:	bf00      	nop
    adf2:	3708      	adds	r7, #8
    adf4:	46bd      	mov	sp, r7
    adf6:	bd80      	pop	{r7, pc}
    adf8:	000096f3 	.word	0x000096f3

0000adfc <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    adfc:	b590      	push	{r4, r7, lr}
    adfe:	b085      	sub	sp, #20
    ae00:	af00      	add	r7, sp, #0
    ae02:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    ae04:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ae08:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ae0a:	687b      	ldr	r3, [r7, #4]
    ae0c:	7c9b      	ldrb	r3, [r3, #18]
    ae0e:	f003 030f 	and.w	r3, r3, #15
    ae12:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ae14:	687b      	ldr	r3, [r7, #4]
    ae16:	68db      	ldr	r3, [r3, #12]
    ae18:	461a      	mov	r2, r3
    ae1a:	7afb      	ldrb	r3, [r7, #11]
    ae1c:	2100      	movs	r1, #0
    ae1e:	4618      	mov	r0, r3
    ae20:	4b0f      	ldr	r3, [pc, #60]	; (ae60 <_usb_d_dev_trans_setup+0x64>)
    ae22:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    ae24:	687b      	ldr	r3, [r7, #4]
    ae26:	8a1b      	ldrh	r3, [r3, #16]
    ae28:	461a      	mov	r2, r3
    ae2a:	7af8      	ldrb	r0, [r7, #11]
    ae2c:	2300      	movs	r3, #0
    ae2e:	2100      	movs	r1, #0
    ae30:	4c0c      	ldr	r4, [pc, #48]	; (ae64 <_usb_d_dev_trans_setup+0x68>)
    ae32:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    ae34:	7afb      	ldrb	r3, [r7, #11]
    ae36:	22b0      	movs	r2, #176	; 0xb0
    ae38:	4619      	mov	r1, r3
    ae3a:	68f8      	ldr	r0, [r7, #12]
    ae3c:	4b0a      	ldr	r3, [pc, #40]	; (ae68 <_usb_d_dev_trans_setup+0x6c>)
    ae3e:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    ae40:	7afb      	ldrb	r3, [r7, #11]
    ae42:	2200      	movs	r2, #0
    ae44:	2100      	movs	r1, #0
    ae46:	4618      	mov	r0, r3
    ae48:	4b08      	ldr	r3, [pc, #32]	; (ae6c <_usb_d_dev_trans_setup+0x70>)
    ae4a:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    ae4c:	7afb      	ldrb	r3, [r7, #11]
    ae4e:	2210      	movs	r2, #16
    ae50:	4619      	mov	r1, r3
    ae52:	68f8      	ldr	r0, [r7, #12]
    ae54:	4b06      	ldr	r3, [pc, #24]	; (ae70 <_usb_d_dev_trans_setup+0x74>)
    ae56:	4798      	blx	r3
}
    ae58:	bf00      	nop
    ae5a:	3714      	adds	r7, #20
    ae5c:	46bd      	mov	sp, r7
    ae5e:	bd90      	pop	{r4, r7, pc}
    ae60:	00009b91 	.word	0x00009b91
    ae64:	00009d19 	.word	0x00009d19
    ae68:	000093f1 	.word	0x000093f1
    ae6c:	00009de9 	.word	0x00009de9
    ae70:	00009445 	.word	0x00009445

0000ae74 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    ae74:	b580      	push	{r7, lr}
    ae76:	b088      	sub	sp, #32
    ae78:	af00      	add	r7, sp, #0
    ae7a:	4603      	mov	r3, r0
    ae7c:	71fb      	strb	r3, [r7, #7]
    ae7e:	460b      	mov	r3, r1
    ae80:	71bb      	strb	r3, [r7, #6]
    ae82:	4613      	mov	r3, r2
    ae84:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    ae86:	79fb      	ldrb	r3, [r7, #7]
    ae88:	f003 030f 	and.w	r3, r3, #15
    ae8c:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    ae8e:	79fb      	ldrb	r3, [r7, #7]
    ae90:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ae94:	2b00      	cmp	r3, #0
    ae96:	bf14      	ite	ne
    ae98:	2301      	movne	r3, #1
    ae9a:	2300      	moveq	r3, #0
    ae9c:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ae9e:	7fba      	ldrb	r2, [r7, #30]
    aea0:	7ffb      	ldrb	r3, [r7, #31]
    aea2:	4611      	mov	r1, r2
    aea4:	4618      	mov	r0, r3
    aea6:	4b3e      	ldr	r3, [pc, #248]	; (afa0 <_usb_d_dev_ep_init+0x12c>)
    aea8:	4798      	blx	r3
    aeaa:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    aeac:	79bb      	ldrb	r3, [r7, #6]
    aeae:	f003 0303 	and.w	r3, r3, #3
    aeb2:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    aeb4:	7ffa      	ldrb	r2, [r7, #31]
    aeb6:	4613      	mov	r3, r2
    aeb8:	005b      	lsls	r3, r3, #1
    aeba:	4413      	add	r3, r2
    aebc:	009b      	lsls	r3, r3, #2
    aebe:	4a39      	ldr	r2, [pc, #228]	; (afa4 <_usb_d_dev_ep_init+0x130>)
    aec0:	4413      	add	r3, r2
    aec2:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    aec4:	7ffb      	ldrb	r3, [r7, #31]
    aec6:	2b04      	cmp	r3, #4
    aec8:	d902      	bls.n	aed0 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    aeca:	f06f 0311 	mvn.w	r3, #17
    aece:	e063      	b.n	af98 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    aed0:	69bb      	ldr	r3, [r7, #24]
    aed2:	7c9b      	ldrb	r3, [r3, #18]
    aed4:	2bff      	cmp	r3, #255	; 0xff
    aed6:	d002      	beq.n	aede <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    aed8:	f06f 0313 	mvn.w	r3, #19
    aedc:	e05c      	b.n	af98 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    aede:	7dfb      	ldrb	r3, [r7, #23]
    aee0:	2b00      	cmp	r3, #0
    aee2:	d11f      	bne.n	af24 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    aee4:	7fbb      	ldrb	r3, [r7, #30]
    aee6:	2b00      	cmp	r3, #0
    aee8:	bf14      	ite	ne
    aeea:	2301      	movne	r3, #1
    aeec:	2300      	moveq	r3, #0
    aeee:	b2db      	uxtb	r3, r3
    aef0:	f083 0301 	eor.w	r3, r3, #1
    aef4:	b2db      	uxtb	r3, r3
    aef6:	f003 0301 	and.w	r3, r3, #1
    aefa:	b2da      	uxtb	r2, r3
    aefc:	7ffb      	ldrb	r3, [r7, #31]
    aefe:	4611      	mov	r1, r2
    af00:	4618      	mov	r0, r3
    af02:	4b27      	ldr	r3, [pc, #156]	; (afa0 <_usb_d_dev_ep_init+0x12c>)
    af04:	4798      	blx	r3
    af06:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    af08:	68fb      	ldr	r3, [r7, #12]
    af0a:	7c9b      	ldrb	r3, [r3, #18]
    af0c:	2bff      	cmp	r3, #255	; 0xff
    af0e:	d002      	beq.n	af16 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    af10:	f06f 0313 	mvn.w	r3, #19
    af14:	e040      	b.n	af98 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    af16:	693b      	ldr	r3, [r7, #16]
    af18:	681b      	ldr	r3, [r3, #0]
    af1a:	2b00      	cmp	r3, #0
    af1c:	d102      	bne.n	af24 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    af1e:	f06f 0312 	mvn.w	r3, #18
    af22:	e039      	b.n	af98 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    af24:	7fbb      	ldrb	r3, [r7, #30]
    af26:	2b00      	cmp	r3, #0
    af28:	d007      	beq.n	af3a <_usb_d_dev_ep_init+0xc6>
    af2a:	693b      	ldr	r3, [r7, #16]
    af2c:	685b      	ldr	r3, [r3, #4]
    af2e:	2b00      	cmp	r3, #0
    af30:	bf14      	ite	ne
    af32:	2301      	movne	r3, #1
    af34:	2300      	moveq	r3, #0
    af36:	b2db      	uxtb	r3, r3
    af38:	e006      	b.n	af48 <_usb_d_dev_ep_init+0xd4>
    af3a:	693b      	ldr	r3, [r7, #16]
    af3c:	681b      	ldr	r3, [r3, #0]
    af3e:	2b00      	cmp	r3, #0
    af40:	bf14      	ite	ne
    af42:	2301      	movne	r3, #1
    af44:	2300      	moveq	r3, #0
    af46:	b2db      	uxtb	r3, r3
    af48:	2b00      	cmp	r3, #0
    af4a:	d00f      	beq.n	af6c <_usb_d_dev_ep_init+0xf8>
    af4c:	7fbb      	ldrb	r3, [r7, #30]
    af4e:	2b00      	cmp	r3, #0
    af50:	d003      	beq.n	af5a <_usb_d_dev_ep_init+0xe6>
    af52:	693b      	ldr	r3, [r7, #16]
    af54:	895b      	ldrh	r3, [r3, #10]
    af56:	461a      	mov	r2, r3
    af58:	e002      	b.n	af60 <_usb_d_dev_ep_init+0xec>
    af5a:	693b      	ldr	r3, [r7, #16]
    af5c:	891b      	ldrh	r3, [r3, #8]
    af5e:	461a      	mov	r2, r3
    af60:	88bb      	ldrh	r3, [r7, #4]
    af62:	429a      	cmp	r2, r3
    af64:	da02      	bge.n	af6c <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    af66:	f06f 0312 	mvn.w	r3, #18
    af6a:	e015      	b.n	af98 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    af6c:	7fbb      	ldrb	r3, [r7, #30]
    af6e:	2b00      	cmp	r3, #0
    af70:	d002      	beq.n	af78 <_usb_d_dev_ep_init+0x104>
    af72:	693b      	ldr	r3, [r7, #16]
    af74:	685b      	ldr	r3, [r3, #4]
    af76:	e001      	b.n	af7c <_usb_d_dev_ep_init+0x108>
    af78:	693b      	ldr	r3, [r7, #16]
    af7a:	681b      	ldr	r3, [r3, #0]
    af7c:	69ba      	ldr	r2, [r7, #24]
    af7e:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    af80:	69bb      	ldr	r3, [r7, #24]
    af82:	88ba      	ldrh	r2, [r7, #4]
    af84:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    af86:	7dfb      	ldrb	r3, [r7, #23]
    af88:	3301      	adds	r3, #1
    af8a:	b2da      	uxtb	r2, r3
    af8c:	69bb      	ldr	r3, [r7, #24]
    af8e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    af90:	69bb      	ldr	r3, [r7, #24]
    af92:	79fa      	ldrb	r2, [r7, #7]
    af94:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    af96:	2300      	movs	r3, #0
}
    af98:	4618      	mov	r0, r3
    af9a:	3720      	adds	r7, #32
    af9c:	46bd      	mov	sp, r7
    af9e:	bd80      	pop	{r7, pc}
    afa0:	00009ea5 	.word	0x00009ea5
    afa4:	00011094 	.word	0x00011094

0000afa8 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    afa8:	b580      	push	{r7, lr}
    afaa:	b086      	sub	sp, #24
    afac:	af00      	add	r7, sp, #0
    afae:	4603      	mov	r3, r0
    afb0:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    afb2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    afb6:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    afb8:	79fb      	ldrb	r3, [r7, #7]
    afba:	f003 030f 	and.w	r3, r3, #15
    afbe:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    afc0:	79fb      	ldrb	r3, [r7, #7]
    afc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    afc6:	2b00      	cmp	r3, #0
    afc8:	bf14      	ite	ne
    afca:	2301      	movne	r3, #1
    afcc:	2300      	moveq	r3, #0
    afce:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    afd0:	7cba      	ldrb	r2, [r7, #18]
    afd2:	7cfb      	ldrb	r3, [r7, #19]
    afd4:	4611      	mov	r1, r2
    afd6:	4618      	mov	r0, r3
    afd8:	4b2a      	ldr	r3, [pc, #168]	; (b084 <_usb_d_dev_ep_deinit+0xdc>)
    afda:	4798      	blx	r3
    afdc:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    afde:	7cfb      	ldrb	r3, [r7, #19]
    afe0:	2b04      	cmp	r3, #4
    afe2:	d84a      	bhi.n	b07a <_usb_d_dev_ep_deinit+0xd2>
    afe4:	68fb      	ldr	r3, [r7, #12]
    afe6:	7c9b      	ldrb	r3, [r3, #18]
    afe8:	2bff      	cmp	r3, #255	; 0xff
    afea:	d046      	beq.n	b07a <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    afec:	7cbb      	ldrb	r3, [r7, #18]
    afee:	2203      	movs	r2, #3
    aff0:	4619      	mov	r1, r3
    aff2:	68f8      	ldr	r0, [r7, #12]
    aff4:	4b24      	ldr	r3, [pc, #144]	; (b088 <_usb_d_dev_ep_deinit+0xe0>)
    aff6:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    aff8:	68fb      	ldr	r3, [r7, #12]
    affa:	7cdb      	ldrb	r3, [r3, #19]
    affc:	f003 0307 	and.w	r3, r3, #7
    b000:	b2db      	uxtb	r3, r3
    b002:	2b01      	cmp	r3, #1
    b004:	d107      	bne.n	b016 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    b006:	79fb      	ldrb	r3, [r7, #7]
    b008:	697a      	ldr	r2, [r7, #20]
    b00a:	3308      	adds	r3, #8
    b00c:	015b      	lsls	r3, r3, #5
    b00e:	4413      	add	r3, r2
    b010:	2200      	movs	r2, #0
    b012:	701a      	strb	r2, [r3, #0]
    b014:	e02a      	b.n	b06c <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    b016:	f997 3007 	ldrsb.w	r3, [r7, #7]
    b01a:	2b00      	cmp	r3, #0
    b01c:	da15      	bge.n	b04a <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    b01e:	79fb      	ldrb	r3, [r7, #7]
    b020:	f003 030f 	and.w	r3, r3, #15
    b024:	79fa      	ldrb	r2, [r7, #7]
    b026:	f002 020f 	and.w	r2, r2, #15
    b02a:	6979      	ldr	r1, [r7, #20]
    b02c:	3208      	adds	r2, #8
    b02e:	0152      	lsls	r2, r2, #5
    b030:	440a      	add	r2, r1
    b032:	7812      	ldrb	r2, [r2, #0]
    b034:	b2d2      	uxtb	r2, r2
    b036:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    b03a:	b2d1      	uxtb	r1, r2
    b03c:	697a      	ldr	r2, [r7, #20]
    b03e:	3308      	adds	r3, #8
    b040:	015b      	lsls	r3, r3, #5
    b042:	4413      	add	r3, r2
    b044:	460a      	mov	r2, r1
    b046:	701a      	strb	r2, [r3, #0]
    b048:	e010      	b.n	b06c <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    b04a:	79fb      	ldrb	r3, [r7, #7]
    b04c:	79fa      	ldrb	r2, [r7, #7]
    b04e:	6979      	ldr	r1, [r7, #20]
    b050:	3208      	adds	r2, #8
    b052:	0152      	lsls	r2, r2, #5
    b054:	440a      	add	r2, r1
    b056:	7812      	ldrb	r2, [r2, #0]
    b058:	b2d2      	uxtb	r2, r2
    b05a:	f022 0207 	bic.w	r2, r2, #7
    b05e:	b2d1      	uxtb	r1, r2
    b060:	697a      	ldr	r2, [r7, #20]
    b062:	3308      	adds	r3, #8
    b064:	015b      	lsls	r3, r3, #5
    b066:	4413      	add	r3, r2
    b068:	460a      	mov	r2, r1
    b06a:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    b06c:	68fb      	ldr	r3, [r7, #12]
    b06e:	2200      	movs	r2, #0
    b070:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    b072:	68fb      	ldr	r3, [r7, #12]
    b074:	22ff      	movs	r2, #255	; 0xff
    b076:	749a      	strb	r2, [r3, #18]
    b078:	e000      	b.n	b07c <_usb_d_dev_ep_deinit+0xd4>
		return;
    b07a:	bf00      	nop
}
    b07c:	3718      	adds	r7, #24
    b07e:	46bd      	mov	sp, r7
    b080:	bd80      	pop	{r7, pc}
    b082:	bf00      	nop
    b084:	00009ea5 	.word	0x00009ea5
    b088:	0000b4dd 	.word	0x0000b4dd

0000b08c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    b08c:	b5b0      	push	{r4, r5, r7, lr}
    b08e:	b088      	sub	sp, #32
    b090:	af00      	add	r7, sp, #0
    b092:	4603      	mov	r3, r0
    b094:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    b096:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b09a:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    b09c:	79fb      	ldrb	r3, [r7, #7]
    b09e:	f003 030f 	and.w	r3, r3, #15
    b0a2:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    b0a4:	79fb      	ldrb	r3, [r7, #7]
    b0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b0aa:	2b00      	cmp	r3, #0
    b0ac:	bf14      	ite	ne
    b0ae:	2301      	movne	r3, #1
    b0b0:	2300      	moveq	r3, #0
    b0b2:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    b0b4:	7eba      	ldrb	r2, [r7, #26]
    b0b6:	7efb      	ldrb	r3, [r7, #27]
    b0b8:	4611      	mov	r1, r2
    b0ba:	4618      	mov	r0, r3
    b0bc:	4b70      	ldr	r3, [pc, #448]	; (b280 <_usb_d_dev_ep_enable+0x1f4>)
    b0be:	4798      	blx	r3
    b0c0:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    b0c2:	7efb      	ldrb	r3, [r7, #27]
    b0c4:	4619      	mov	r1, r3
    b0c6:	69f8      	ldr	r0, [r7, #28]
    b0c8:	4b6e      	ldr	r3, [pc, #440]	; (b284 <_usb_d_dev_ep_enable+0x1f8>)
    b0ca:	4798      	blx	r3
    b0cc:	4603      	mov	r3, r0
    b0ce:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b0d0:	7efb      	ldrb	r3, [r7, #27]
    b0d2:	2b04      	cmp	r3, #4
    b0d4:	d803      	bhi.n	b0de <_usb_d_dev_ep_enable+0x52>
    b0d6:	697b      	ldr	r3, [r7, #20]
    b0d8:	7c9b      	ldrb	r3, [r3, #18]
    b0da:	2bff      	cmp	r3, #255	; 0xff
    b0dc:	d102      	bne.n	b0e4 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    b0de:	f06f 0311 	mvn.w	r3, #17
    b0e2:	e0c8      	b.n	b276 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    b0e4:	7efb      	ldrb	r3, [r7, #27]
    b0e6:	015b      	lsls	r3, r3, #5
    b0e8:	4a67      	ldr	r2, [pc, #412]	; (b288 <_usb_d_dev_ep_enable+0x1fc>)
    b0ea:	4413      	add	r3, r2
    b0ec:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    b0ee:	697b      	ldr	r3, [r7, #20]
    b0f0:	7cdb      	ldrb	r3, [r3, #19]
    b0f2:	f003 0307 	and.w	r3, r3, #7
    b0f6:	b2db      	uxtb	r3, r3
    b0f8:	2b01      	cmp	r3, #1
    b0fa:	d14b      	bne.n	b194 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    b0fc:	7cfb      	ldrb	r3, [r7, #19]
    b0fe:	f003 0377 	and.w	r3, r3, #119	; 0x77
    b102:	2b00      	cmp	r3, #0
    b104:	d002      	beq.n	b10c <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    b106:	f06f 0313 	mvn.w	r3, #19
    b10a:	e0b4      	b.n	b276 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    b10c:	7efb      	ldrb	r3, [r7, #27]
    b10e:	2211      	movs	r2, #17
    b110:	4619      	mov	r1, r3
    b112:	69f8      	ldr	r0, [r7, #28]
    b114:	4b5d      	ldr	r3, [pc, #372]	; (b28c <_usb_d_dev_ep_enable+0x200>)
    b116:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b118:	697b      	ldr	r3, [r7, #20]
    b11a:	8a1b      	ldrh	r3, [r3, #16]
    b11c:	039b      	lsls	r3, r3, #14
    b11e:	4c5c      	ldr	r4, [pc, #368]	; (b290 <_usb_d_dev_ep_enable+0x204>)
    b120:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b122:	697b      	ldr	r3, [r7, #20]
    b124:	8a1b      	ldrh	r3, [r3, #16]
    b126:	4618      	mov	r0, r3
    b128:	4b5a      	ldr	r3, [pc, #360]	; (b294 <_usb_d_dev_ep_enable+0x208>)
    b12a:	4798      	blx	r3
    b12c:	4603      	mov	r3, r0
    b12e:	071b      	lsls	r3, r3, #28
    b130:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b134:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b138:	68fb      	ldr	r3, [r7, #12]
    b13a:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    b13c:	68fb      	ldr	r3, [r7, #12]
    b13e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b142:	697b      	ldr	r3, [r7, #20]
    b144:	8a1b      	ldrh	r3, [r3, #16]
    b146:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b14a:	697b      	ldr	r3, [r7, #20]
    b14c:	8a1b      	ldrh	r3, [r3, #16]
    b14e:	4618      	mov	r0, r3
    b150:	4b50      	ldr	r3, [pc, #320]	; (b294 <_usb_d_dev_ep_enable+0x208>)
    b152:	4798      	blx	r3
    b154:	4603      	mov	r3, r0
    b156:	071b      	lsls	r3, r3, #28
    b158:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b15c:	432b      	orrs	r3, r5
    b15e:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b160:	7efb      	ldrb	r3, [r7, #27]
    b162:	2200      	movs	r2, #0
    b164:	2100      	movs	r1, #0
    b166:	4618      	mov	r0, r3
    b168:	4b4b      	ldr	r3, [pc, #300]	; (b298 <_usb_d_dev_ep_enable+0x20c>)
    b16a:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    b16c:	7efb      	ldrb	r3, [r7, #27]
    b16e:	2200      	movs	r2, #0
    b170:	2101      	movs	r1, #1
    b172:	4618      	mov	r0, r3
    b174:	4b49      	ldr	r3, [pc, #292]	; (b29c <_usb_d_dev_ep_enable+0x210>)
    b176:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    b178:	7efb      	ldrb	r3, [r7, #27]
    b17a:	2100      	movs	r1, #0
    b17c:	4618      	mov	r0, r3
    b17e:	4b48      	ldr	r3, [pc, #288]	; (b2a0 <_usb_d_dev_ep_enable+0x214>)
    b180:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b182:	7efb      	ldrb	r3, [r7, #27]
    b184:	2101      	movs	r1, #1
    b186:	4618      	mov	r0, r3
    b188:	4b45      	ldr	r3, [pc, #276]	; (b2a0 <_usb_d_dev_ep_enable+0x214>)
    b18a:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    b18c:	6978      	ldr	r0, [r7, #20]
    b18e:	4b45      	ldr	r3, [pc, #276]	; (b2a4 <_usb_d_dev_ep_enable+0x218>)
    b190:	4798      	blx	r3
    b192:	e06f      	b.n	b274 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    b194:	7ebb      	ldrb	r3, [r7, #26]
    b196:	2b00      	cmp	r3, #0
    b198:	d038      	beq.n	b20c <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    b19a:	7cfb      	ldrb	r3, [r7, #19]
    b19c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b1a0:	2b00      	cmp	r3, #0
    b1a2:	d002      	beq.n	b1aa <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    b1a4:	f06f 0313 	mvn.w	r3, #19
    b1a8:	e065      	b.n	b276 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    b1aa:	697b      	ldr	r3, [r7, #20]
    b1ac:	7cdb      	ldrb	r3, [r3, #19]
    b1ae:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b1b2:	b2db      	uxtb	r3, r3
    b1b4:	011b      	lsls	r3, r3, #4
    b1b6:	b2db      	uxtb	r3, r3
    b1b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b1bc:	b2da      	uxtb	r2, r3
    b1be:	7cfb      	ldrb	r3, [r7, #19]
    b1c0:	4313      	orrs	r3, r2
    b1c2:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b1c4:	7cfa      	ldrb	r2, [r7, #19]
    b1c6:	7efb      	ldrb	r3, [r7, #27]
    b1c8:	4619      	mov	r1, r3
    b1ca:	69f8      	ldr	r0, [r7, #28]
    b1cc:	4b2f      	ldr	r3, [pc, #188]	; (b28c <_usb_d_dev_ep_enable+0x200>)
    b1ce:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    b1d0:	68fb      	ldr	r3, [r7, #12]
    b1d2:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b1d6:	697b      	ldr	r3, [r7, #20]
    b1d8:	8a1b      	ldrh	r3, [r3, #16]
    b1da:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b1de:	697b      	ldr	r3, [r7, #20]
    b1e0:	8a1b      	ldrh	r3, [r3, #16]
    b1e2:	4618      	mov	r0, r3
    b1e4:	4b2b      	ldr	r3, [pc, #172]	; (b294 <_usb_d_dev_ep_enable+0x208>)
    b1e6:	4798      	blx	r3
    b1e8:	4603      	mov	r3, r0
    b1ea:	071b      	lsls	r3, r3, #28
    b1ec:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b1f0:	432b      	orrs	r3, r5
    b1f2:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b1f4:	7efb      	ldrb	r3, [r7, #27]
    b1f6:	2200      	movs	r2, #0
    b1f8:	2101      	movs	r1, #1
    b1fa:	4618      	mov	r0, r3
    b1fc:	4b27      	ldr	r3, [pc, #156]	; (b29c <_usb_d_dev_ep_enable+0x210>)
    b1fe:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b200:	7efb      	ldrb	r3, [r7, #27]
    b202:	2101      	movs	r1, #1
    b204:	4618      	mov	r0, r3
    b206:	4b26      	ldr	r3, [pc, #152]	; (b2a0 <_usb_d_dev_ep_enable+0x214>)
    b208:	4798      	blx	r3
    b20a:	e033      	b.n	b274 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    b20c:	7cfb      	ldrb	r3, [r7, #19]
    b20e:	f003 0307 	and.w	r3, r3, #7
    b212:	2b00      	cmp	r3, #0
    b214:	d002      	beq.n	b21c <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    b216:	f06f 0313 	mvn.w	r3, #19
    b21a:	e02c      	b.n	b276 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    b21c:	697b      	ldr	r3, [r7, #20]
    b21e:	7cdb      	ldrb	r3, [r3, #19]
    b220:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b224:	b2db      	uxtb	r3, r3
    b226:	461a      	mov	r2, r3
    b228:	7cfb      	ldrb	r3, [r7, #19]
    b22a:	4313      	orrs	r3, r2
    b22c:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b22e:	7cfa      	ldrb	r2, [r7, #19]
    b230:	7efb      	ldrb	r3, [r7, #27]
    b232:	4619      	mov	r1, r3
    b234:	69f8      	ldr	r0, [r7, #28]
    b236:	4b15      	ldr	r3, [pc, #84]	; (b28c <_usb_d_dev_ep_enable+0x200>)
    b238:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b23a:	697b      	ldr	r3, [r7, #20]
    b23c:	8a1b      	ldrh	r3, [r3, #16]
    b23e:	039b      	lsls	r3, r3, #14
    b240:	4c13      	ldr	r4, [pc, #76]	; (b290 <_usb_d_dev_ep_enable+0x204>)
    b242:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b244:	697b      	ldr	r3, [r7, #20]
    b246:	8a1b      	ldrh	r3, [r3, #16]
    b248:	4618      	mov	r0, r3
    b24a:	4b12      	ldr	r3, [pc, #72]	; (b294 <_usb_d_dev_ep_enable+0x208>)
    b24c:	4798      	blx	r3
    b24e:	4603      	mov	r3, r0
    b250:	071b      	lsls	r3, r3, #28
    b252:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b256:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b25a:	68fb      	ldr	r3, [r7, #12]
    b25c:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b25e:	7efb      	ldrb	r3, [r7, #27]
    b260:	2200      	movs	r2, #0
    b262:	2100      	movs	r1, #0
    b264:	4618      	mov	r0, r3
    b266:	4b0c      	ldr	r3, [pc, #48]	; (b298 <_usb_d_dev_ep_enable+0x20c>)
    b268:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    b26a:	7efb      	ldrb	r3, [r7, #27]
    b26c:	2100      	movs	r1, #0
    b26e:	4618      	mov	r0, r3
    b270:	4b0b      	ldr	r3, [pc, #44]	; (b2a0 <_usb_d_dev_ep_enable+0x214>)
    b272:	4798      	blx	r3
	}

	return USB_OK;
    b274:	2300      	movs	r3, #0
}
    b276:	4618      	mov	r0, r3
    b278:	3720      	adds	r7, #32
    b27a:	46bd      	mov	sp, r7
    b27c:	bdb0      	pop	{r4, r5, r7, pc}
    b27e:	bf00      	nop
    b280:	00009ea5 	.word	0x00009ea5
    b284:	0000952b 	.word	0x0000952b
    b288:	20001150 	.word	0x20001150
    b28c:	00009501 	.word	0x00009501
    b290:	0fffc000 	.word	0x0fffc000
    b294:	00009e41 	.word	0x00009e41
    b298:	00009de9 	.word	0x00009de9
    b29c:	00009d91 	.word	0x00009d91
    b2a0:	00009d59 	.word	0x00009d59
    b2a4:	0000adfd 	.word	0x0000adfd

0000b2a8 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    b2a8:	b580      	push	{r7, lr}
    b2aa:	b084      	sub	sp, #16
    b2ac:	af00      	add	r7, sp, #0
    b2ae:	6078      	str	r0, [r7, #4]
    b2b0:	460b      	mov	r3, r1
    b2b2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b2b4:	687b      	ldr	r3, [r7, #4]
    b2b6:	7c9b      	ldrb	r3, [r3, #18]
    b2b8:	f003 030f 	and.w	r3, r3, #15
    b2bc:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    b2be:	78fa      	ldrb	r2, [r7, #3]
    b2c0:	7bfb      	ldrb	r3, [r7, #15]
    b2c2:	4611      	mov	r1, r2
    b2c4:	4618      	mov	r0, r3
    b2c6:	4b03      	ldr	r3, [pc, #12]	; (b2d4 <_usb_d_dev_ep_stall_get+0x2c>)
    b2c8:	4798      	blx	r3
    b2ca:	4603      	mov	r3, r0
}
    b2cc:	4618      	mov	r0, r3
    b2ce:	3710      	adds	r7, #16
    b2d0:	46bd      	mov	sp, r7
    b2d2:	bd80      	pop	{r7, pc}
    b2d4:	00009999 	.word	0x00009999

0000b2d8 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    b2d8:	b580      	push	{r7, lr}
    b2da:	b084      	sub	sp, #16
    b2dc:	af00      	add	r7, sp, #0
    b2de:	6078      	str	r0, [r7, #4]
    b2e0:	460b      	mov	r3, r1
    b2e2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b2e4:	687b      	ldr	r3, [r7, #4]
    b2e6:	7c9b      	ldrb	r3, [r3, #18]
    b2e8:	f003 030f 	and.w	r3, r3, #15
    b2ec:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    b2ee:	78f9      	ldrb	r1, [r7, #3]
    b2f0:	7bfb      	ldrb	r3, [r7, #15]
    b2f2:	2201      	movs	r2, #1
    b2f4:	4618      	mov	r0, r3
    b2f6:	4b0a      	ldr	r3, [pc, #40]	; (b320 <_usb_d_dev_ep_stall_set+0x48>)
    b2f8:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b2fa:	78fb      	ldrb	r3, [r7, #3]
    b2fc:	2220      	movs	r2, #32
    b2fe:	409a      	lsls	r2, r3
    b300:	7bfb      	ldrb	r3, [r7, #15]
    b302:	4611      	mov	r1, r2
    b304:	4618      	mov	r0, r3
    b306:	4b07      	ldr	r3, [pc, #28]	; (b324 <_usb_d_dev_ep_stall_set+0x4c>)
    b308:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    b30a:	687a      	ldr	r2, [r7, #4]
    b30c:	7cd3      	ldrb	r3, [r2, #19]
    b30e:	f043 0308 	orr.w	r3, r3, #8
    b312:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    b314:	2300      	movs	r3, #0
}
    b316:	4618      	mov	r0, r3
    b318:	3710      	adds	r7, #16
    b31a:	46bd      	mov	sp, r7
    b31c:	bd80      	pop	{r7, pc}
    b31e:	bf00      	nop
    b320:	00009941 	.word	0x00009941
    b324:	000098c1 	.word	0x000098c1

0000b328 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    b328:	b580      	push	{r7, lr}
    b32a:	b084      	sub	sp, #16
    b32c:	af00      	add	r7, sp, #0
    b32e:	6078      	str	r0, [r7, #4]
    b330:	460b      	mov	r3, r1
    b332:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    b334:	687b      	ldr	r3, [r7, #4]
    b336:	7c9b      	ldrb	r3, [r3, #18]
    b338:	f003 030f 	and.w	r3, r3, #15
    b33c:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    b33e:	78fa      	ldrb	r2, [r7, #3]
    b340:	7bfb      	ldrb	r3, [r7, #15]
    b342:	4611      	mov	r1, r2
    b344:	4618      	mov	r0, r3
    b346:	4b28      	ldr	r3, [pc, #160]	; (b3e8 <_usb_d_dev_ep_stall_clr+0xc0>)
    b348:	4798      	blx	r3
    b34a:	4603      	mov	r3, r0
    b34c:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    b34e:	7bbb      	ldrb	r3, [r7, #14]
    b350:	f083 0301 	eor.w	r3, r3, #1
    b354:	b2db      	uxtb	r3, r3
    b356:	2b00      	cmp	r3, #0
    b358:	d001      	beq.n	b35e <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    b35a:	2300      	movs	r3, #0
    b35c:	e040      	b.n	b3e0 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    b35e:	78f9      	ldrb	r1, [r7, #3]
    b360:	7bfb      	ldrb	r3, [r7, #15]
    b362:	2200      	movs	r2, #0
    b364:	4618      	mov	r0, r3
    b366:	4b21      	ldr	r3, [pc, #132]	; (b3ec <_usb_d_dev_ep_stall_clr+0xc4>)
    b368:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b36a:	78fb      	ldrb	r3, [r7, #3]
    b36c:	2220      	movs	r2, #32
    b36e:	409a      	lsls	r2, r3
    b370:	7bfb      	ldrb	r3, [r7, #15]
    b372:	4611      	mov	r1, r2
    b374:	4618      	mov	r0, r3
    b376:	4b1e      	ldr	r3, [pc, #120]	; (b3f0 <_usb_d_dev_ep_stall_clr+0xc8>)
    b378:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b37a:	78fa      	ldrb	r2, [r7, #3]
    b37c:	7bfb      	ldrb	r3, [r7, #15]
    b37e:	4611      	mov	r1, r2
    b380:	4618      	mov	r0, r3
    b382:	4b1c      	ldr	r3, [pc, #112]	; (b3f4 <_usb_d_dev_ep_stall_clr+0xcc>)
    b384:	4798      	blx	r3
    b386:	4603      	mov	r3, r0
    b388:	2b00      	cmp	r3, #0
    b38a:	d00b      	beq.n	b3a4 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b38c:	78fa      	ldrb	r2, [r7, #3]
    b38e:	7bfb      	ldrb	r3, [r7, #15]
    b390:	4611      	mov	r1, r2
    b392:	4618      	mov	r0, r3
    b394:	4b18      	ldr	r3, [pc, #96]	; (b3f8 <_usb_d_dev_ep_stall_clr+0xd0>)
    b396:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b398:	78f9      	ldrb	r1, [r7, #3]
    b39a:	7bfb      	ldrb	r3, [r7, #15]
    b39c:	2200      	movs	r2, #0
    b39e:	4618      	mov	r0, r3
    b3a0:	4b16      	ldr	r3, [pc, #88]	; (b3fc <_usb_d_dev_ep_stall_clr+0xd4>)
    b3a2:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b3a4:	687b      	ldr	r3, [r7, #4]
    b3a6:	7cdb      	ldrb	r3, [r3, #19]
    b3a8:	f003 0307 	and.w	r3, r3, #7
    b3ac:	b2db      	uxtb	r3, r3
    b3ae:	2b01      	cmp	r3, #1
    b3b0:	d110      	bne.n	b3d4 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b3b2:	7bfb      	ldrb	r3, [r7, #15]
    b3b4:	4619      	mov	r1, r3
    b3b6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b3ba:	4b11      	ldr	r3, [pc, #68]	; (b400 <_usb_d_dev_ep_stall_clr+0xd8>)
    b3bc:	4798      	blx	r3
    b3be:	4603      	mov	r3, r0
    b3c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b3c4:	2b00      	cmp	r3, #0
    b3c6:	d10a      	bne.n	b3de <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b3c8:	687a      	ldr	r2, [r7, #4]
    b3ca:	7cd3      	ldrb	r3, [r2, #19]
    b3cc:	f36f 03c3 	bfc	r3, #3, #1
    b3d0:	74d3      	strb	r3, [r2, #19]
    b3d2:	e004      	b.n	b3de <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b3d4:	687a      	ldr	r2, [r7, #4]
    b3d6:	7cd3      	ldrb	r3, [r2, #19]
    b3d8:	f36f 03c3 	bfc	r3, #3, #1
    b3dc:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b3de:	2300      	movs	r3, #0
}
    b3e0:	4618      	mov	r0, r3
    b3e2:	3710      	adds	r7, #16
    b3e4:	46bd      	mov	sp, r7
    b3e6:	bd80      	pop	{r7, pc}
    b3e8:	00009999 	.word	0x00009999
    b3ec:	00009941 	.word	0x00009941
    b3f0:	000098e9 	.word	0x000098e9
    b3f4:	000099dd 	.word	0x000099dd
    b3f8:	00009a21 	.word	0x00009a21
    b3fc:	00009b0d 	.word	0x00009b0d
    b400:	000093c9 	.word	0x000093c9

0000b404 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b404:	b580      	push	{r7, lr}
    b406:	b086      	sub	sp, #24
    b408:	af00      	add	r7, sp, #0
    b40a:	4603      	mov	r3, r0
    b40c:	460a      	mov	r2, r1
    b40e:	71fb      	strb	r3, [r7, #7]
    b410:	4613      	mov	r3, r2
    b412:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b414:	79fb      	ldrb	r3, [r7, #7]
    b416:	f003 030f 	and.w	r3, r3, #15
    b41a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b41c:	79fb      	ldrb	r3, [r7, #7]
    b41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b422:	2b00      	cmp	r3, #0
    b424:	bf14      	ite	ne
    b426:	2301      	movne	r3, #1
    b428:	2300      	moveq	r3, #0
    b42a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b42c:	7cba      	ldrb	r2, [r7, #18]
    b42e:	7cfb      	ldrb	r3, [r7, #19]
    b430:	4611      	mov	r1, r2
    b432:	4618      	mov	r0, r3
    b434:	4b13      	ldr	r3, [pc, #76]	; (b484 <_usb_d_dev_ep_stall+0x80>)
    b436:	4798      	blx	r3
    b438:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b43a:	7cfb      	ldrb	r3, [r7, #19]
    b43c:	2b04      	cmp	r3, #4
    b43e:	d902      	bls.n	b446 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b440:	f06f 0311 	mvn.w	r3, #17
    b444:	e01a      	b.n	b47c <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b446:	79bb      	ldrb	r3, [r7, #6]
    b448:	2b01      	cmp	r3, #1
    b44a:	d106      	bne.n	b45a <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b44c:	7cbb      	ldrb	r3, [r7, #18]
    b44e:	4619      	mov	r1, r3
    b450:	68f8      	ldr	r0, [r7, #12]
    b452:	4b0d      	ldr	r3, [pc, #52]	; (b488 <_usb_d_dev_ep_stall+0x84>)
    b454:	4798      	blx	r3
    b456:	6178      	str	r0, [r7, #20]
    b458:	e00f      	b.n	b47a <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b45a:	79bb      	ldrb	r3, [r7, #6]
    b45c:	2b00      	cmp	r3, #0
    b45e:	d106      	bne.n	b46e <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b460:	7cbb      	ldrb	r3, [r7, #18]
    b462:	4619      	mov	r1, r3
    b464:	68f8      	ldr	r0, [r7, #12]
    b466:	4b09      	ldr	r3, [pc, #36]	; (b48c <_usb_d_dev_ep_stall+0x88>)
    b468:	4798      	blx	r3
    b46a:	6178      	str	r0, [r7, #20]
    b46c:	e005      	b.n	b47a <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b46e:	7cbb      	ldrb	r3, [r7, #18]
    b470:	4619      	mov	r1, r3
    b472:	68f8      	ldr	r0, [r7, #12]
    b474:	4b06      	ldr	r3, [pc, #24]	; (b490 <_usb_d_dev_ep_stall+0x8c>)
    b476:	4798      	blx	r3
    b478:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b47a:	697b      	ldr	r3, [r7, #20]
}
    b47c:	4618      	mov	r0, r3
    b47e:	3718      	adds	r7, #24
    b480:	46bd      	mov	sp, r7
    b482:	bd80      	pop	{r7, pc}
    b484:	00009ea5 	.word	0x00009ea5
    b488:	0000b2d9 	.word	0x0000b2d9
    b48c:	0000b329 	.word	0x0000b329
    b490:	0000b2a9 	.word	0x0000b2a9

0000b494 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b494:	b580      	push	{r7, lr}
    b496:	b082      	sub	sp, #8
    b498:	af00      	add	r7, sp, #0
    b49a:	6078      	str	r0, [r7, #4]
    b49c:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b49e:	687b      	ldr	r3, [r7, #4]
    b4a0:	7c9b      	ldrb	r3, [r3, #18]
    b4a2:	2bff      	cmp	r3, #255	; 0xff
    b4a4:	d014      	beq.n	b4d0 <_usb_d_dev_trans_done+0x3c>
    b4a6:	687b      	ldr	r3, [r7, #4]
    b4a8:	7cdb      	ldrb	r3, [r3, #19]
    b4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b4ae:	b2db      	uxtb	r3, r3
    b4b0:	2b00      	cmp	r3, #0
    b4b2:	d00d      	beq.n	b4d0 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b4b4:	687a      	ldr	r2, [r7, #4]
    b4b6:	7cd3      	ldrb	r3, [r2, #19]
    b4b8:	f36f 1386 	bfc	r3, #6, #1
    b4bc:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b4be:	4b06      	ldr	r3, [pc, #24]	; (b4d8 <_usb_d_dev_trans_done+0x44>)
    b4c0:	691b      	ldr	r3, [r3, #16]
    b4c2:	687a      	ldr	r2, [r7, #4]
    b4c4:	7c90      	ldrb	r0, [r2, #18]
    b4c6:	687a      	ldr	r2, [r7, #4]
    b4c8:	6892      	ldr	r2, [r2, #8]
    b4ca:	6839      	ldr	r1, [r7, #0]
    b4cc:	4798      	blx	r3
    b4ce:	e000      	b.n	b4d2 <_usb_d_dev_trans_done+0x3e>
		return;
    b4d0:	bf00      	nop
}
    b4d2:	3708      	adds	r7, #8
    b4d4:	46bd      	mov	sp, r7
    b4d6:	bd80      	pop	{r7, pc}
    b4d8:	20001088 	.word	0x20001088

0000b4dc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b4dc:	b580      	push	{r7, lr}
    b4de:	b086      	sub	sp, #24
    b4e0:	af00      	add	r7, sp, #0
    b4e2:	60f8      	str	r0, [r7, #12]
    b4e4:	460b      	mov	r3, r1
    b4e6:	607a      	str	r2, [r7, #4]
    b4e8:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b4ea:	68fb      	ldr	r3, [r7, #12]
    b4ec:	7c9b      	ldrb	r3, [r3, #18]
    b4ee:	f003 030f 	and.w	r3, r3, #15
    b4f2:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b4f4:	4b1f      	ldr	r3, [pc, #124]	; (b574 <_usb_d_dev_trans_stop+0x98>)
    b4f6:	881b      	ldrh	r3, [r3, #0]
    b4f8:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b4fa:	68fb      	ldr	r3, [r7, #12]
    b4fc:	7c9b      	ldrb	r3, [r3, #18]
    b4fe:	2bff      	cmp	r3, #255	; 0xff
    b500:	d033      	beq.n	b56a <_usb_d_dev_trans_stop+0x8e>
    b502:	68fb      	ldr	r3, [r7, #12]
    b504:	7cdb      	ldrb	r3, [r3, #19]
    b506:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b50a:	b2db      	uxtb	r3, r3
    b50c:	2b00      	cmp	r3, #0
    b50e:	d02c      	beq.n	b56a <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b510:	7afb      	ldrb	r3, [r7, #11]
    b512:	2b00      	cmp	r3, #0
    b514:	d006      	beq.n	b524 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b516:	7dfb      	ldrb	r3, [r7, #23]
    b518:	2200      	movs	r2, #0
    b51a:	2101      	movs	r1, #1
    b51c:	4618      	mov	r0, r3
    b51e:	4b16      	ldr	r3, [pc, #88]	; (b578 <_usb_d_dev_trans_stop+0x9c>)
    b520:	4798      	blx	r3
    b522:	e005      	b.n	b530 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b524:	7dfb      	ldrb	r3, [r7, #23]
    b526:	2200      	movs	r2, #0
    b528:	2100      	movs	r1, #0
    b52a:	4618      	mov	r0, r3
    b52c:	4b13      	ldr	r3, [pc, #76]	; (b57c <_usb_d_dev_trans_stop+0xa0>)
    b52e:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b530:	7afb      	ldrb	r3, [r7, #11]
    b532:	f107 0218 	add.w	r2, r7, #24
    b536:	4413      	add	r3, r2
    b538:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b53c:	461a      	mov	r2, r3
    b53e:	7dfb      	ldrb	r3, [r7, #23]
    b540:	4611      	mov	r1, r2
    b542:	4618      	mov	r0, r3
    b544:	4b0e      	ldr	r3, [pc, #56]	; (b580 <_usb_d_dev_trans_stop+0xa4>)
    b546:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b548:	7afb      	ldrb	r3, [r7, #11]
    b54a:	f107 0218 	add.w	r2, r7, #24
    b54e:	4413      	add	r3, r2
    b550:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b554:	461a      	mov	r2, r3
    b556:	7dfb      	ldrb	r3, [r7, #23]
    b558:	4611      	mov	r1, r2
    b55a:	4618      	mov	r0, r3
    b55c:	4b09      	ldr	r3, [pc, #36]	; (b584 <_usb_d_dev_trans_stop+0xa8>)
    b55e:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b560:	6879      	ldr	r1, [r7, #4]
    b562:	68f8      	ldr	r0, [r7, #12]
    b564:	4b08      	ldr	r3, [pc, #32]	; (b588 <_usb_d_dev_trans_stop+0xac>)
    b566:	4798      	blx	r3
    b568:	e000      	b.n	b56c <_usb_d_dev_trans_stop+0x90>
		return;
    b56a:	bf00      	nop
}
    b56c:	3718      	adds	r7, #24
    b56e:	46bd      	mov	sp, r7
    b570:	bd80      	pop	{r7, pc}
    b572:	bf00      	nop
    b574:	000110d4 	.word	0x000110d4
    b578:	00009d91 	.word	0x00009d91
    b57c:	00009de9 	.word	0x00009de9
    b580:	00009899 	.word	0x00009899
    b584:	000098e9 	.word	0x000098e9
    b588:	0000b495 	.word	0x0000b495

0000b58c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b58c:	b580      	push	{r7, lr}
    b58e:	b086      	sub	sp, #24
    b590:	af00      	add	r7, sp, #0
    b592:	4603      	mov	r3, r0
    b594:	6039      	str	r1, [r7, #0]
    b596:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b598:	79fb      	ldrb	r3, [r7, #7]
    b59a:	f003 030f 	and.w	r3, r3, #15
    b59e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b5a0:	7dfb      	ldrb	r3, [r7, #23]
    b5a2:	015b      	lsls	r3, r3, #5
    b5a4:	4a1e      	ldr	r2, [pc, #120]	; (b620 <_usb_d_dev_ep_read_req+0x94>)
    b5a6:	4413      	add	r3, r2
    b5a8:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b5aa:	693b      	ldr	r3, [r7, #16]
    b5ac:	681b      	ldr	r3, [r3, #0]
    b5ae:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b5b0:	693b      	ldr	r3, [r7, #16]
    b5b2:	685b      	ldr	r3, [r3, #4]
    b5b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b5b8:	b29b      	uxth	r3, r3
    b5ba:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b5bc:	7dfb      	ldrb	r3, [r7, #23]
    b5be:	2b04      	cmp	r3, #4
    b5c0:	d802      	bhi.n	b5c8 <_usb_d_dev_ep_read_req+0x3c>
    b5c2:	683b      	ldr	r3, [r7, #0]
    b5c4:	2b00      	cmp	r3, #0
    b5c6:	d102      	bne.n	b5ce <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b5c8:	f06f 0311 	mvn.w	r3, #17
    b5cc:	e023      	b.n	b616 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b5ce:	7dfb      	ldrb	r3, [r7, #23]
    b5d0:	4618      	mov	r0, r3
    b5d2:	4b14      	ldr	r3, [pc, #80]	; (b624 <_usb_d_dev_ep_read_req+0x98>)
    b5d4:	4798      	blx	r3
    b5d6:	4603      	mov	r3, r0
    b5d8:	f083 0301 	eor.w	r3, r3, #1
    b5dc:	b2db      	uxtb	r3, r3
    b5de:	2b00      	cmp	r3, #0
    b5e0:	d002      	beq.n	b5e8 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b5e2:	f06f 0312 	mvn.w	r3, #18
    b5e6:	e016      	b.n	b616 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b5e8:	7dfb      	ldrb	r3, [r7, #23]
    b5ea:	4618      	mov	r0, r3
    b5ec:	4b0e      	ldr	r3, [pc, #56]	; (b628 <_usb_d_dev_ep_read_req+0x9c>)
    b5ee:	4798      	blx	r3
    b5f0:	4603      	mov	r3, r0
    b5f2:	f083 0301 	eor.w	r3, r3, #1
    b5f6:	b2db      	uxtb	r3, r3
    b5f8:	2b00      	cmp	r3, #0
    b5fa:	d001      	beq.n	b600 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b5fc:	2300      	movs	r3, #0
    b5fe:	e00a      	b.n	b616 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b600:	68fb      	ldr	r3, [r7, #12]
    b602:	2208      	movs	r2, #8
    b604:	4619      	mov	r1, r3
    b606:	6838      	ldr	r0, [r7, #0]
    b608:	4b08      	ldr	r3, [pc, #32]	; (b62c <_usb_d_dev_ep_read_req+0xa0>)
    b60a:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b60c:	7dfb      	ldrb	r3, [r7, #23]
    b60e:	4618      	mov	r0, r3
    b610:	4b07      	ldr	r3, [pc, #28]	; (b630 <_usb_d_dev_ep_read_req+0xa4>)
    b612:	4798      	blx	r3

	return bytes;
    b614:	897b      	ldrh	r3, [r7, #10]
}
    b616:	4618      	mov	r0, r3
    b618:	3718      	adds	r7, #24
    b61a:	46bd      	mov	sp, r7
    b61c:	bd80      	pop	{r7, pc}
    b61e:	bf00      	nop
    b620:	20001150 	.word	0x20001150
    b624:	00009911 	.word	0x00009911
    b628:	00009abd 	.word	0x00009abd
    b62c:	00010949 	.word	0x00010949
    b630:	00009aed 	.word	0x00009aed

0000b634 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b634:	b580      	push	{r7, lr}
    b636:	b086      	sub	sp, #24
    b638:	af00      	add	r7, sp, #0
    b63a:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b63c:	687b      	ldr	r3, [r7, #4]
    b63e:	7a1b      	ldrb	r3, [r3, #8]
    b640:	f003 030f 	and.w	r3, r3, #15
    b644:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b646:	687b      	ldr	r3, [r7, #4]
    b648:	7a1b      	ldrb	r3, [r3, #8]
    b64a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b64e:	2b00      	cmp	r3, #0
    b650:	bf14      	ite	ne
    b652:	2301      	movne	r3, #1
    b654:	2300      	moveq	r3, #0
    b656:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b658:	7d7a      	ldrb	r2, [r7, #21]
    b65a:	7dbb      	ldrb	r3, [r7, #22]
    b65c:	4611      	mov	r1, r2
    b65e:	4618      	mov	r0, r3
    b660:	4b5f      	ldr	r3, [pc, #380]	; (b7e0 <_usb_d_dev_ep_trans+0x1ac>)
    b662:	4798      	blx	r3
    b664:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b666:	693b      	ldr	r3, [r7, #16]
    b668:	8a1b      	ldrh	r3, [r3, #16]
    b66a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b66e:	4293      	cmp	r3, r2
    b670:	d004      	beq.n	b67c <_usb_d_dev_ep_trans+0x48>
    b672:	693b      	ldr	r3, [r7, #16]
    b674:	8a1b      	ldrh	r3, [r3, #16]
    b676:	3b01      	subs	r3, #1
    b678:	b29b      	uxth	r3, r3
    b67a:	e001      	b.n	b680 <_usb_d_dev_ep_trans+0x4c>
    b67c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b680:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b682:	687b      	ldr	r3, [r7, #4]
    b684:	685a      	ldr	r2, [r3, #4]
    b686:	89fb      	ldrh	r3, [r7, #14]
    b688:	4013      	ands	r3, r2
    b68a:	2b00      	cmp	r3, #0
    b68c:	bf14      	ite	ne
    b68e:	2301      	movne	r3, #1
    b690:	2300      	moveq	r3, #0
    b692:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b694:	2300      	movs	r3, #0
    b696:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b698:	7dbb      	ldrb	r3, [r7, #22]
    b69a:	2b04      	cmp	r3, #4
    b69c:	d902      	bls.n	b6a4 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b69e:	f06f 0311 	mvn.w	r3, #17
    b6a2:	e098      	b.n	b7d6 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b6a4:	687b      	ldr	r3, [r7, #4]
    b6a6:	681b      	ldr	r3, [r3, #0]
    b6a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b6ac:	d31a      	bcc.n	b6e4 <_usb_d_dev_ep_trans+0xb0>
    b6ae:	687b      	ldr	r3, [r7, #4]
    b6b0:	681b      	ldr	r3, [r3, #0]
    b6b2:	461a      	mov	r2, r3
    b6b4:	687b      	ldr	r3, [r7, #4]
    b6b6:	685b      	ldr	r3, [r3, #4]
    b6b8:	4413      	add	r3, r2
    b6ba:	4a4a      	ldr	r2, [pc, #296]	; (b7e4 <_usb_d_dev_ep_trans+0x1b0>)
    b6bc:	4293      	cmp	r3, r2
    b6be:	d811      	bhi.n	b6e4 <_usb_d_dev_ep_trans+0xb0>
    b6c0:	687b      	ldr	r3, [r7, #4]
    b6c2:	681b      	ldr	r3, [r3, #0]
    b6c4:	f003 0303 	and.w	r3, r3, #3
    b6c8:	2b00      	cmp	r3, #0
    b6ca:	d10b      	bne.n	b6e4 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b6cc:	7d7b      	ldrb	r3, [r7, #21]
    b6ce:	f083 0301 	eor.w	r3, r3, #1
    b6d2:	b2db      	uxtb	r3, r3
    b6d4:	2b00      	cmp	r3, #0
    b6d6:	d00e      	beq.n	b6f6 <_usb_d_dev_ep_trans+0xc2>
    b6d8:	687b      	ldr	r3, [r7, #4]
    b6da:	685b      	ldr	r3, [r3, #4]
    b6dc:	693a      	ldr	r2, [r7, #16]
    b6de:	8a12      	ldrh	r2, [r2, #16]
    b6e0:	4293      	cmp	r3, r2
    b6e2:	d208      	bcs.n	b6f6 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b6e4:	693b      	ldr	r3, [r7, #16]
    b6e6:	68db      	ldr	r3, [r3, #12]
    b6e8:	2b00      	cmp	r3, #0
    b6ea:	d102      	bne.n	b6f2 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b6ec:	f06f 0312 	mvn.w	r3, #18
    b6f0:	e071      	b.n	b7d6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b6f2:	2301      	movs	r3, #1
    b6f4:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b6f6:	7d7b      	ldrb	r3, [r7, #21]
    b6f8:	f083 0301 	eor.w	r3, r3, #1
    b6fc:	b2db      	uxtb	r3, r3
    b6fe:	2b00      	cmp	r3, #0
    b700:	d009      	beq.n	b716 <_usb_d_dev_ep_trans+0xe2>
    b702:	7b7b      	ldrb	r3, [r7, #13]
    b704:	2b00      	cmp	r3, #0
    b706:	d006      	beq.n	b716 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b708:	693b      	ldr	r3, [r7, #16]
    b70a:	68db      	ldr	r3, [r3, #12]
    b70c:	2b00      	cmp	r3, #0
    b70e:	d102      	bne.n	b716 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b710:	f06f 0311 	mvn.w	r3, #17
    b714:	e05f      	b.n	b7d6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b716:	693b      	ldr	r3, [r7, #16]
    b718:	7cdb      	ldrb	r3, [r3, #19]
    b71a:	f003 0308 	and.w	r3, r3, #8
    b71e:	b2db      	uxtb	r3, r3
    b720:	2b00      	cmp	r3, #0
    b722:	d001      	beq.n	b728 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b724:	2302      	movs	r3, #2
    b726:	e056      	b.n	b7d6 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b728:	f107 0308 	add.w	r3, r7, #8
    b72c:	4618      	mov	r0, r3
    b72e:	4b2e      	ldr	r3, [pc, #184]	; (b7e8 <_usb_d_dev_ep_trans+0x1b4>)
    b730:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b732:	693b      	ldr	r3, [r7, #16]
    b734:	7cdb      	ldrb	r3, [r3, #19]
    b736:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b73a:	b2db      	uxtb	r3, r3
    b73c:	2b00      	cmp	r3, #0
    b73e:	d006      	beq.n	b74e <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b740:	f107 0308 	add.w	r3, r7, #8
    b744:	4618      	mov	r0, r3
    b746:	4b29      	ldr	r3, [pc, #164]	; (b7ec <_usb_d_dev_ep_trans+0x1b8>)
    b748:	4798      	blx	r3
		return USB_BUSY;
    b74a:	2301      	movs	r3, #1
    b74c:	e043      	b.n	b7d6 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b74e:	693a      	ldr	r2, [r7, #16]
    b750:	7cd3      	ldrb	r3, [r2, #19]
    b752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b756:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b758:	f107 0308 	add.w	r3, r7, #8
    b75c:	4618      	mov	r0, r3
    b75e:	4b23      	ldr	r3, [pc, #140]	; (b7ec <_usb_d_dev_ep_trans+0x1b8>)
    b760:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b762:	687b      	ldr	r3, [r7, #4]
    b764:	681a      	ldr	r2, [r3, #0]
    b766:	693b      	ldr	r3, [r7, #16]
    b768:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b76a:	687b      	ldr	r3, [r7, #4]
    b76c:	685a      	ldr	r2, [r3, #4]
    b76e:	693b      	ldr	r3, [r7, #16]
    b770:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b772:	693b      	ldr	r3, [r7, #16]
    b774:	2200      	movs	r2, #0
    b776:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b778:	693a      	ldr	r2, [r7, #16]
    b77a:	7cd3      	ldrb	r3, [r2, #19]
    b77c:	7d79      	ldrb	r1, [r7, #21]
    b77e:	f361 13c7 	bfi	r3, r1, #7, #1
    b782:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b784:	693a      	ldr	r2, [r7, #16]
    b786:	7cd3      	ldrb	r3, [r2, #19]
    b788:	7df9      	ldrb	r1, [r7, #23]
    b78a:	f361 1345 	bfi	r3, r1, #5, #1
    b78e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b790:	687b      	ldr	r3, [r7, #4]
    b792:	7a5b      	ldrb	r3, [r3, #9]
    b794:	2b00      	cmp	r3, #0
    b796:	d007      	beq.n	b7a8 <_usb_d_dev_ep_trans+0x174>
    b798:	7b7b      	ldrb	r3, [r7, #13]
    b79a:	f083 0301 	eor.w	r3, r3, #1
    b79e:	b2db      	uxtb	r3, r3
    b7a0:	2b00      	cmp	r3, #0
    b7a2:	d001      	beq.n	b7a8 <_usb_d_dev_ep_trans+0x174>
    b7a4:	2301      	movs	r3, #1
    b7a6:	e000      	b.n	b7aa <_usb_d_dev_ep_trans+0x176>
    b7a8:	2300      	movs	r3, #0
    b7aa:	b2db      	uxtb	r3, r3
    b7ac:	f003 0301 	and.w	r3, r3, #1
    b7b0:	b2d9      	uxtb	r1, r3
    b7b2:	693a      	ldr	r2, [r7, #16]
    b7b4:	7cd3      	ldrb	r3, [r2, #19]
    b7b6:	f361 1304 	bfi	r3, r1, #4, #1
    b7ba:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b7bc:	7d7b      	ldrb	r3, [r7, #21]
    b7be:	2b00      	cmp	r3, #0
    b7c0:	d004      	beq.n	b7cc <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b7c2:	2100      	movs	r1, #0
    b7c4:	6938      	ldr	r0, [r7, #16]
    b7c6:	4b0a      	ldr	r3, [pc, #40]	; (b7f0 <_usb_d_dev_ep_trans+0x1bc>)
    b7c8:	4798      	blx	r3
    b7ca:	e003      	b.n	b7d4 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b7cc:	2100      	movs	r1, #0
    b7ce:	6938      	ldr	r0, [r7, #16]
    b7d0:	4b08      	ldr	r3, [pc, #32]	; (b7f4 <_usb_d_dev_ep_trans+0x1c0>)
    b7d2:	4798      	blx	r3
	}

	return ERR_NONE;
    b7d4:	2300      	movs	r3, #0
}
    b7d6:	4618      	mov	r0, r3
    b7d8:	3718      	adds	r7, #24
    b7da:	46bd      	mov	sp, r7
    b7dc:	bd80      	pop	{r7, pc}
    b7de:	bf00      	nop
    b7e0:	00009ea5 	.word	0x00009ea5
    b7e4:	20041fff 	.word	0x20041fff
    b7e8:	00002989 	.word	0x00002989
    b7ec:	000029af 	.word	0x000029af
    b7f0:	0000a16d 	.word	0x0000a16d
    b7f4:	0000a385 	.word	0x0000a385

0000b7f8 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b7f8:	b580      	push	{r7, lr}
    b7fa:	b084      	sub	sp, #16
    b7fc:	af00      	add	r7, sp, #0
    b7fe:	4603      	mov	r3, r0
    b800:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b802:	79fb      	ldrb	r3, [r7, #7]
    b804:	f003 030f 	and.w	r3, r3, #15
    b808:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b80a:	79fb      	ldrb	r3, [r7, #7]
    b80c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b810:	2b00      	cmp	r3, #0
    b812:	bf14      	ite	ne
    b814:	2301      	movne	r3, #1
    b816:	2300      	moveq	r3, #0
    b818:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b81a:	7bba      	ldrb	r2, [r7, #14]
    b81c:	7bfb      	ldrb	r3, [r7, #15]
    b81e:	4611      	mov	r1, r2
    b820:	4618      	mov	r0, r3
    b822:	4b08      	ldr	r3, [pc, #32]	; (b844 <_usb_d_dev_ep_abort+0x4c>)
    b824:	4798      	blx	r3
    b826:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b828:	7bfb      	ldrb	r3, [r7, #15]
    b82a:	2b04      	cmp	r3, #4
    b82c:	d806      	bhi.n	b83c <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b82e:	7bbb      	ldrb	r3, [r7, #14]
    b830:	2202      	movs	r2, #2
    b832:	4619      	mov	r1, r3
    b834:	68b8      	ldr	r0, [r7, #8]
    b836:	4b04      	ldr	r3, [pc, #16]	; (b848 <_usb_d_dev_ep_abort+0x50>)
    b838:	4798      	blx	r3
    b83a:	e000      	b.n	b83e <_usb_d_dev_ep_abort+0x46>
		return;
    b83c:	bf00      	nop
}
    b83e:	3710      	adds	r7, #16
    b840:	46bd      	mov	sp, r7
    b842:	bd80      	pop	{r7, pc}
    b844:	00009ea5 	.word	0x00009ea5
    b848:	0000b4dd 	.word	0x0000b4dd

0000b84c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b84c:	b480      	push	{r7}
    b84e:	b085      	sub	sp, #20
    b850:	af00      	add	r7, sp, #0
    b852:	4603      	mov	r3, r0
    b854:	6039      	str	r1, [r7, #0]
    b856:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b858:	683b      	ldr	r3, [r7, #0]
    b85a:	2b00      	cmp	r3, #0
    b85c:	d001      	beq.n	b862 <_usb_d_dev_register_callback+0x16>
    b85e:	683b      	ldr	r3, [r7, #0]
    b860:	e000      	b.n	b864 <_usb_d_dev_register_callback+0x18>
    b862:	4b0a      	ldr	r3, [pc, #40]	; (b88c <_usb_d_dev_register_callback+0x40>)
    b864:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b866:	79fb      	ldrb	r3, [r7, #7]
    b868:	2b01      	cmp	r3, #1
    b86a:	d103      	bne.n	b874 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b86c:	4a08      	ldr	r2, [pc, #32]	; (b890 <_usb_d_dev_register_callback+0x44>)
    b86e:	68fb      	ldr	r3, [r7, #12]
    b870:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b872:	e005      	b.n	b880 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b874:	79fb      	ldrb	r3, [r7, #7]
    b876:	2b00      	cmp	r3, #0
    b878:	d102      	bne.n	b880 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b87a:	4a05      	ldr	r2, [pc, #20]	; (b890 <_usb_d_dev_register_callback+0x44>)
    b87c:	68fb      	ldr	r3, [r7, #12]
    b87e:	6013      	str	r3, [r2, #0]
}
    b880:	bf00      	nop
    b882:	3714      	adds	r7, #20
    b884:	46bd      	mov	sp, r7
    b886:	f85d 7b04 	ldr.w	r7, [sp], #4
    b88a:	4770      	bx	lr
    b88c:	0000972d 	.word	0x0000972d
    b890:	20001088 	.word	0x20001088

0000b894 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b894:	b480      	push	{r7}
    b896:	b085      	sub	sp, #20
    b898:	af00      	add	r7, sp, #0
    b89a:	4603      	mov	r3, r0
    b89c:	6039      	str	r1, [r7, #0]
    b89e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b8a0:	683b      	ldr	r3, [r7, #0]
    b8a2:	2b00      	cmp	r3, #0
    b8a4:	d001      	beq.n	b8aa <_usb_d_dev_register_ep_callback+0x16>
    b8a6:	683b      	ldr	r3, [r7, #0]
    b8a8:	e000      	b.n	b8ac <_usb_d_dev_register_ep_callback+0x18>
    b8aa:	4b0e      	ldr	r3, [pc, #56]	; (b8e4 <_usb_d_dev_register_ep_callback+0x50>)
    b8ac:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b8ae:	79fb      	ldrb	r3, [r7, #7]
    b8b0:	2b00      	cmp	r3, #0
    b8b2:	d103      	bne.n	b8bc <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b8b4:	4a0c      	ldr	r2, [pc, #48]	; (b8e8 <_usb_d_dev_register_ep_callback+0x54>)
    b8b6:	68fb      	ldr	r3, [r7, #12]
    b8b8:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b8ba:	e00c      	b.n	b8d6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b8bc:	79fb      	ldrb	r3, [r7, #7]
    b8be:	2b01      	cmp	r3, #1
    b8c0:	d103      	bne.n	b8ca <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b8c2:	4a09      	ldr	r2, [pc, #36]	; (b8e8 <_usb_d_dev_register_ep_callback+0x54>)
    b8c4:	68fb      	ldr	r3, [r7, #12]
    b8c6:	60d3      	str	r3, [r2, #12]
}
    b8c8:	e005      	b.n	b8d6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b8ca:	79fb      	ldrb	r3, [r7, #7]
    b8cc:	2b02      	cmp	r3, #2
    b8ce:	d102      	bne.n	b8d6 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b8d0:	4a05      	ldr	r2, [pc, #20]	; (b8e8 <_usb_d_dev_register_ep_callback+0x54>)
    b8d2:	68fb      	ldr	r3, [r7, #12]
    b8d4:	6113      	str	r3, [r2, #16]
}
    b8d6:	bf00      	nop
    b8d8:	3714      	adds	r7, #20
    b8da:	46bd      	mov	sp, r7
    b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8e0:	4770      	bx	lr
    b8e2:	bf00      	nop
    b8e4:	0000972d 	.word	0x0000972d
    b8e8:	20001088 	.word	0x20001088

0000b8ec <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b8ec:	b580      	push	{r7, lr}
    b8ee:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b8f0:	4b01      	ldr	r3, [pc, #4]	; (b8f8 <USB_0_Handler+0xc>)
    b8f2:	4798      	blx	r3
}
    b8f4:	bf00      	nop
    b8f6:	bd80      	pop	{r7, pc}
    b8f8:	0000ab5d 	.word	0x0000ab5d

0000b8fc <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b8fc:	b580      	push	{r7, lr}
    b8fe:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b900:	4b01      	ldr	r3, [pc, #4]	; (b908 <USB_1_Handler+0xc>)
    b902:	4798      	blx	r3
}
    b904:	bf00      	nop
    b906:	bd80      	pop	{r7, pc}
    b908:	0000ab5d 	.word	0x0000ab5d

0000b90c <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b90c:	b580      	push	{r7, lr}
    b90e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b910:	4b01      	ldr	r3, [pc, #4]	; (b918 <USB_2_Handler+0xc>)
    b912:	4798      	blx	r3
}
    b914:	bf00      	nop
    b916:	bd80      	pop	{r7, pc}
    b918:	0000ab5d 	.word	0x0000ab5d

0000b91c <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b91c:	b580      	push	{r7, lr}
    b91e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b920:	4b01      	ldr	r3, [pc, #4]	; (b928 <USB_3_Handler+0xc>)
    b922:	4798      	blx	r3
}
    b924:	bf00      	nop
    b926:	bd80      	pop	{r7, pc}
    b928:	0000ab5d 	.word	0x0000ab5d

0000b92c <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b92c:	b480      	push	{r7}
    b92e:	b083      	sub	sp, #12
    b930:	af00      	add	r7, sp, #0
    b932:	6078      	str	r0, [r7, #4]
    b934:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b936:	bf00      	nop
    b938:	687b      	ldr	r3, [r7, #4]
    b93a:	689a      	ldr	r2, [r3, #8]
    b93c:	683b      	ldr	r3, [r7, #0]
    b93e:	4013      	ands	r3, r2
    b940:	2b00      	cmp	r3, #0
    b942:	d1f9      	bne.n	b938 <hri_wdt_wait_for_sync+0xc>
	};
}
    b944:	bf00      	nop
    b946:	370c      	adds	r7, #12
    b948:	46bd      	mov	sp, r7
    b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b94e:	4770      	bx	lr

0000b950 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b950:	b580      	push	{r7, lr}
    b952:	b084      	sub	sp, #16
    b954:	af00      	add	r7, sp, #0
    b956:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b958:	210e      	movs	r1, #14
    b95a:	6878      	ldr	r0, [r7, #4]
    b95c:	4b0a      	ldr	r3, [pc, #40]	; (b988 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b95e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b960:	687b      	ldr	r3, [r7, #4]
    b962:	781b      	ldrb	r3, [r3, #0]
    b964:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b966:	7bfb      	ldrb	r3, [r7, #15]
    b968:	085b      	lsrs	r3, r3, #1
    b96a:	b2db      	uxtb	r3, r3
    b96c:	f003 0301 	and.w	r3, r3, #1
    b970:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b972:	7bfb      	ldrb	r3, [r7, #15]
    b974:	2b00      	cmp	r3, #0
    b976:	bf14      	ite	ne
    b978:	2301      	movne	r3, #1
    b97a:	2300      	moveq	r3, #0
    b97c:	b2db      	uxtb	r3, r3
}
    b97e:	4618      	mov	r0, r3
    b980:	3710      	adds	r7, #16
    b982:	46bd      	mov	sp, r7
    b984:	bd80      	pop	{r7, pc}
    b986:	bf00      	nop
    b988:	0000b92d 	.word	0x0000b92d

0000b98c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b98c:	b580      	push	{r7, lr}
    b98e:	b082      	sub	sp, #8
    b990:	af00      	add	r7, sp, #0
    b992:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b994:	687b      	ldr	r3, [r7, #4]
    b996:	781b      	ldrb	r3, [r3, #0]
    b998:	b2db      	uxtb	r3, r3
    b99a:	f023 0304 	bic.w	r3, r3, #4
    b99e:	b2da      	uxtb	r2, r3
    b9a0:	687b      	ldr	r3, [r7, #4]
    b9a2:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b9a4:	210e      	movs	r1, #14
    b9a6:	6878      	ldr	r0, [r7, #4]
    b9a8:	4b02      	ldr	r3, [pc, #8]	; (b9b4 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b9aa:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b9ac:	bf00      	nop
    b9ae:	3708      	adds	r7, #8
    b9b0:	46bd      	mov	sp, r7
    b9b2:	bd80      	pop	{r7, pc}
    b9b4:	0000b92d 	.word	0x0000b92d

0000b9b8 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b9b8:	b580      	push	{r7, lr}
    b9ba:	b084      	sub	sp, #16
    b9bc:	af00      	add	r7, sp, #0
    b9be:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b9c0:	210e      	movs	r1, #14
    b9c2:	6878      	ldr	r0, [r7, #4]
    b9c4:	4b08      	ldr	r3, [pc, #32]	; (b9e8 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b9c6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b9c8:	687b      	ldr	r3, [r7, #4]
    b9ca:	781b      	ldrb	r3, [r3, #0]
    b9cc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b9ce:	7bfb      	ldrb	r3, [r7, #15]
    b9d0:	09db      	lsrs	r3, r3, #7
    b9d2:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b9d4:	7bfb      	ldrb	r3, [r7, #15]
    b9d6:	2b00      	cmp	r3, #0
    b9d8:	bf14      	ite	ne
    b9da:	2301      	movne	r3, #1
    b9dc:	2300      	moveq	r3, #0
    b9de:	b2db      	uxtb	r3, r3
}
    b9e0:	4618      	mov	r0, r3
    b9e2:	3710      	adds	r7, #16
    b9e4:	46bd      	mov	sp, r7
    b9e6:	bd80      	pop	{r7, pc}
    b9e8:	0000b92d 	.word	0x0000b92d

0000b9ec <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b9ec:	b480      	push	{r7}
    b9ee:	b085      	sub	sp, #20
    b9f0:	af00      	add	r7, sp, #0
    b9f2:	6078      	str	r0, [r7, #4]
    b9f4:	460b      	mov	r3, r1
    b9f6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b9f8:	687b      	ldr	r3, [r7, #4]
    b9fa:	785b      	ldrb	r3, [r3, #1]
    b9fc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b9fe:	7bfb      	ldrb	r3, [r7, #15]
    ba00:	f023 030f 	bic.w	r3, r3, #15
    ba04:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    ba06:	78fb      	ldrb	r3, [r7, #3]
    ba08:	f003 030f 	and.w	r3, r3, #15
    ba0c:	b2da      	uxtb	r2, r3
    ba0e:	7bfb      	ldrb	r3, [r7, #15]
    ba10:	4313      	orrs	r3, r2
    ba12:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    ba14:	687b      	ldr	r3, [r7, #4]
    ba16:	7bfa      	ldrb	r2, [r7, #15]
    ba18:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    ba1a:	bf00      	nop
    ba1c:	3714      	adds	r7, #20
    ba1e:	46bd      	mov	sp, r7
    ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba24:	4770      	bx	lr
	...

0000ba28 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    ba28:	b580      	push	{r7, lr}
    ba2a:	b082      	sub	sp, #8
    ba2c:	af00      	add	r7, sp, #0
    ba2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ba30:	687b      	ldr	r3, [r7, #4]
    ba32:	2b00      	cmp	r3, #0
    ba34:	d005      	beq.n	ba42 <_wdt_init+0x1a>
    ba36:	687b      	ldr	r3, [r7, #4]
    ba38:	681b      	ldr	r3, [r3, #0]
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	d001      	beq.n	ba42 <_wdt_init+0x1a>
    ba3e:	2301      	movs	r3, #1
    ba40:	e000      	b.n	ba44 <_wdt_init+0x1c>
    ba42:	2300      	movs	r3, #0
    ba44:	f003 0301 	and.w	r3, r3, #1
    ba48:	b2db      	uxtb	r3, r3
    ba4a:	2250      	movs	r2, #80	; 0x50
    ba4c:	4913      	ldr	r1, [pc, #76]	; (ba9c <_wdt_init+0x74>)
    ba4e:	4618      	mov	r0, r3
    ba50:	4b13      	ldr	r3, [pc, #76]	; (baa0 <_wdt_init+0x78>)
    ba52:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ba54:	687b      	ldr	r3, [r7, #4]
    ba56:	681b      	ldr	r3, [r3, #0]
    ba58:	4618      	mov	r0, r3
    ba5a:	4b12      	ldr	r3, [pc, #72]	; (baa4 <_wdt_init+0x7c>)
    ba5c:	4798      	blx	r3
    ba5e:	4603      	mov	r3, r0
    ba60:	2b00      	cmp	r3, #0
    ba62:	d107      	bne.n	ba74 <_wdt_init+0x4c>
    ba64:	687b      	ldr	r3, [r7, #4]
    ba66:	681b      	ldr	r3, [r3, #0]
    ba68:	4618      	mov	r0, r3
    ba6a:	4b0f      	ldr	r3, [pc, #60]	; (baa8 <_wdt_init+0x80>)
    ba6c:	4798      	blx	r3
    ba6e:	4603      	mov	r3, r0
    ba70:	2b00      	cmp	r3, #0
    ba72:	d002      	beq.n	ba7a <_wdt_init+0x52>
		return ERR_DENIED;
    ba74:	f06f 0310 	mvn.w	r3, #16
    ba78:	e00b      	b.n	ba92 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    ba7a:	687b      	ldr	r3, [r7, #4]
    ba7c:	681b      	ldr	r3, [r3, #0]
    ba7e:	4618      	mov	r0, r3
    ba80:	4b0a      	ldr	r3, [pc, #40]	; (baac <_wdt_init+0x84>)
    ba82:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ba84:	687b      	ldr	r3, [r7, #4]
    ba86:	681b      	ldr	r3, [r3, #0]
    ba88:	210b      	movs	r1, #11
    ba8a:	4618      	mov	r0, r3
    ba8c:	4b08      	ldr	r3, [pc, #32]	; (bab0 <_wdt_init+0x88>)
    ba8e:	4798      	blx	r3
	}

	return ERR_NONE;
    ba90:	2300      	movs	r3, #0
}
    ba92:	4618      	mov	r0, r3
    ba94:	3708      	adds	r7, #8
    ba96:	46bd      	mov	sp, r7
    ba98:	bd80      	pop	{r7, pc}
    ba9a:	bf00      	nop
    ba9c:	000110d8 	.word	0x000110d8
    baa0:	00004409 	.word	0x00004409
    baa4:	0000b9b9 	.word	0x0000b9b9
    baa8:	0000b951 	.word	0x0000b951
    baac:	0000b98d 	.word	0x0000b98d
    bab0:	0000b9ed 	.word	0x0000b9ed

0000bab4 <hri_port_set_DIR_reg>:
{
    bab4:	b480      	push	{r7}
    bab6:	b085      	sub	sp, #20
    bab8:	af00      	add	r7, sp, #0
    baba:	60f8      	str	r0, [r7, #12]
    babc:	460b      	mov	r3, r1
    babe:	607a      	str	r2, [r7, #4]
    bac0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    bac2:	7afb      	ldrb	r3, [r7, #11]
    bac4:	68fa      	ldr	r2, [r7, #12]
    bac6:	01db      	lsls	r3, r3, #7
    bac8:	4413      	add	r3, r2
    baca:	3308      	adds	r3, #8
    bacc:	687a      	ldr	r2, [r7, #4]
    bace:	601a      	str	r2, [r3, #0]
}
    bad0:	bf00      	nop
    bad2:	3714      	adds	r7, #20
    bad4:	46bd      	mov	sp, r7
    bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
    bada:	4770      	bx	lr

0000badc <hri_port_clear_DIR_reg>:
{
    badc:	b480      	push	{r7}
    bade:	b085      	sub	sp, #20
    bae0:	af00      	add	r7, sp, #0
    bae2:	60f8      	str	r0, [r7, #12]
    bae4:	460b      	mov	r3, r1
    bae6:	607a      	str	r2, [r7, #4]
    bae8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    baea:	7afb      	ldrb	r3, [r7, #11]
    baec:	68fa      	ldr	r2, [r7, #12]
    baee:	01db      	lsls	r3, r3, #7
    baf0:	4413      	add	r3, r2
    baf2:	3304      	adds	r3, #4
    baf4:	687a      	ldr	r2, [r7, #4]
    baf6:	601a      	str	r2, [r3, #0]
}
    baf8:	bf00      	nop
    bafa:	3714      	adds	r7, #20
    bafc:	46bd      	mov	sp, r7
    bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb02:	4770      	bx	lr

0000bb04 <hri_port_set_OUT_reg>:
{
    bb04:	b480      	push	{r7}
    bb06:	b085      	sub	sp, #20
    bb08:	af00      	add	r7, sp, #0
    bb0a:	60f8      	str	r0, [r7, #12]
    bb0c:	460b      	mov	r3, r1
    bb0e:	607a      	str	r2, [r7, #4]
    bb10:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    bb12:	7afb      	ldrb	r3, [r7, #11]
    bb14:	68fa      	ldr	r2, [r7, #12]
    bb16:	01db      	lsls	r3, r3, #7
    bb18:	4413      	add	r3, r2
    bb1a:	3318      	adds	r3, #24
    bb1c:	687a      	ldr	r2, [r7, #4]
    bb1e:	601a      	str	r2, [r3, #0]
}
    bb20:	bf00      	nop
    bb22:	3714      	adds	r7, #20
    bb24:	46bd      	mov	sp, r7
    bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb2a:	4770      	bx	lr

0000bb2c <hri_port_clear_OUT_reg>:
{
    bb2c:	b480      	push	{r7}
    bb2e:	b085      	sub	sp, #20
    bb30:	af00      	add	r7, sp, #0
    bb32:	60f8      	str	r0, [r7, #12]
    bb34:	460b      	mov	r3, r1
    bb36:	607a      	str	r2, [r7, #4]
    bb38:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    bb3a:	7afb      	ldrb	r3, [r7, #11]
    bb3c:	68fa      	ldr	r2, [r7, #12]
    bb3e:	01db      	lsls	r3, r3, #7
    bb40:	4413      	add	r3, r2
    bb42:	3314      	adds	r3, #20
    bb44:	687a      	ldr	r2, [r7, #4]
    bb46:	601a      	str	r2, [r3, #0]
}
    bb48:	bf00      	nop
    bb4a:	3714      	adds	r7, #20
    bb4c:	46bd      	mov	sp, r7
    bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb52:	4770      	bx	lr

0000bb54 <hri_port_write_PMUX_PMUXE_bf>:
{
    bb54:	b480      	push	{r7}
    bb56:	b085      	sub	sp, #20
    bb58:	af00      	add	r7, sp, #0
    bb5a:	6078      	str	r0, [r7, #4]
    bb5c:	4608      	mov	r0, r1
    bb5e:	4611      	mov	r1, r2
    bb60:	461a      	mov	r2, r3
    bb62:	4603      	mov	r3, r0
    bb64:	70fb      	strb	r3, [r7, #3]
    bb66:	460b      	mov	r3, r1
    bb68:	70bb      	strb	r3, [r7, #2]
    bb6a:	4613      	mov	r3, r2
    bb6c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    bb6e:	78fa      	ldrb	r2, [r7, #3]
    bb70:	78bb      	ldrb	r3, [r7, #2]
    bb72:	6879      	ldr	r1, [r7, #4]
    bb74:	01d2      	lsls	r2, r2, #7
    bb76:	440a      	add	r2, r1
    bb78:	4413      	add	r3, r2
    bb7a:	3330      	adds	r3, #48	; 0x30
    bb7c:	781b      	ldrb	r3, [r3, #0]
    bb7e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    bb80:	7bfb      	ldrb	r3, [r7, #15]
    bb82:	f023 030f 	bic.w	r3, r3, #15
    bb86:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    bb88:	787b      	ldrb	r3, [r7, #1]
    bb8a:	f003 030f 	and.w	r3, r3, #15
    bb8e:	b2da      	uxtb	r2, r3
    bb90:	7bfb      	ldrb	r3, [r7, #15]
    bb92:	4313      	orrs	r3, r2
    bb94:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    bb96:	78fa      	ldrb	r2, [r7, #3]
    bb98:	78bb      	ldrb	r3, [r7, #2]
    bb9a:	6879      	ldr	r1, [r7, #4]
    bb9c:	01d2      	lsls	r2, r2, #7
    bb9e:	440a      	add	r2, r1
    bba0:	4413      	add	r3, r2
    bba2:	3330      	adds	r3, #48	; 0x30
    bba4:	7bfa      	ldrb	r2, [r7, #15]
    bba6:	701a      	strb	r2, [r3, #0]
}
    bba8:	bf00      	nop
    bbaa:	3714      	adds	r7, #20
    bbac:	46bd      	mov	sp, r7
    bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbb2:	4770      	bx	lr

0000bbb4 <hri_port_write_PMUX_PMUXO_bf>:
{
    bbb4:	b480      	push	{r7}
    bbb6:	b085      	sub	sp, #20
    bbb8:	af00      	add	r7, sp, #0
    bbba:	6078      	str	r0, [r7, #4]
    bbbc:	4608      	mov	r0, r1
    bbbe:	4611      	mov	r1, r2
    bbc0:	461a      	mov	r2, r3
    bbc2:	4603      	mov	r3, r0
    bbc4:	70fb      	strb	r3, [r7, #3]
    bbc6:	460b      	mov	r3, r1
    bbc8:	70bb      	strb	r3, [r7, #2]
    bbca:	4613      	mov	r3, r2
    bbcc:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    bbce:	78fa      	ldrb	r2, [r7, #3]
    bbd0:	78bb      	ldrb	r3, [r7, #2]
    bbd2:	6879      	ldr	r1, [r7, #4]
    bbd4:	01d2      	lsls	r2, r2, #7
    bbd6:	440a      	add	r2, r1
    bbd8:	4413      	add	r3, r2
    bbda:	3330      	adds	r3, #48	; 0x30
    bbdc:	781b      	ldrb	r3, [r3, #0]
    bbde:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    bbe0:	7bfb      	ldrb	r3, [r7, #15]
    bbe2:	f003 030f 	and.w	r3, r3, #15
    bbe6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    bbe8:	787b      	ldrb	r3, [r7, #1]
    bbea:	011b      	lsls	r3, r3, #4
    bbec:	b2da      	uxtb	r2, r3
    bbee:	7bfb      	ldrb	r3, [r7, #15]
    bbf0:	4313      	orrs	r3, r2
    bbf2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    bbf4:	78fa      	ldrb	r2, [r7, #3]
    bbf6:	78bb      	ldrb	r3, [r7, #2]
    bbf8:	6879      	ldr	r1, [r7, #4]
    bbfa:	01d2      	lsls	r2, r2, #7
    bbfc:	440a      	add	r2, r1
    bbfe:	4413      	add	r3, r2
    bc00:	3330      	adds	r3, #48	; 0x30
    bc02:	7bfa      	ldrb	r2, [r7, #15]
    bc04:	701a      	strb	r2, [r3, #0]
}
    bc06:	bf00      	nop
    bc08:	3714      	adds	r7, #20
    bc0a:	46bd      	mov	sp, r7
    bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc10:	4770      	bx	lr

0000bc12 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    bc12:	b480      	push	{r7}
    bc14:	b085      	sub	sp, #20
    bc16:	af00      	add	r7, sp, #0
    bc18:	6078      	str	r0, [r7, #4]
    bc1a:	4608      	mov	r0, r1
    bc1c:	4611      	mov	r1, r2
    bc1e:	461a      	mov	r2, r3
    bc20:	4603      	mov	r3, r0
    bc22:	70fb      	strb	r3, [r7, #3]
    bc24:	460b      	mov	r3, r1
    bc26:	70bb      	strb	r3, [r7, #2]
    bc28:	4613      	mov	r3, r2
    bc2a:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    bc2c:	78fa      	ldrb	r2, [r7, #3]
    bc2e:	78bb      	ldrb	r3, [r7, #2]
    bc30:	6879      	ldr	r1, [r7, #4]
    bc32:	01d2      	lsls	r2, r2, #7
    bc34:	440a      	add	r2, r1
    bc36:	4413      	add	r3, r2
    bc38:	3340      	adds	r3, #64	; 0x40
    bc3a:	781b      	ldrb	r3, [r3, #0]
    bc3c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    bc3e:	7bfb      	ldrb	r3, [r7, #15]
    bc40:	f023 0301 	bic.w	r3, r3, #1
    bc44:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    bc46:	787a      	ldrb	r2, [r7, #1]
    bc48:	7bfb      	ldrb	r3, [r7, #15]
    bc4a:	4313      	orrs	r3, r2
    bc4c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    bc4e:	78fa      	ldrb	r2, [r7, #3]
    bc50:	78bb      	ldrb	r3, [r7, #2]
    bc52:	6879      	ldr	r1, [r7, #4]
    bc54:	01d2      	lsls	r2, r2, #7
    bc56:	440a      	add	r2, r1
    bc58:	4413      	add	r3, r2
    bc5a:	3340      	adds	r3, #64	; 0x40
    bc5c:	7bfa      	ldrb	r2, [r7, #15]
    bc5e:	701a      	strb	r2, [r3, #0]
}
    bc60:	bf00      	nop
    bc62:	3714      	adds	r7, #20
    bc64:	46bd      	mov	sp, r7
    bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc6a:	4770      	bx	lr

0000bc6c <hri_port_write_WRCONFIG_reg>:
{
    bc6c:	b480      	push	{r7}
    bc6e:	b085      	sub	sp, #20
    bc70:	af00      	add	r7, sp, #0
    bc72:	60f8      	str	r0, [r7, #12]
    bc74:	460b      	mov	r3, r1
    bc76:	607a      	str	r2, [r7, #4]
    bc78:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    bc7a:	7afb      	ldrb	r3, [r7, #11]
    bc7c:	68fa      	ldr	r2, [r7, #12]
    bc7e:	01db      	lsls	r3, r3, #7
    bc80:	4413      	add	r3, r2
    bc82:	3328      	adds	r3, #40	; 0x28
    bc84:	687a      	ldr	r2, [r7, #4]
    bc86:	601a      	str	r2, [r3, #0]
}
    bc88:	bf00      	nop
    bc8a:	3714      	adds	r7, #20
    bc8c:	46bd      	mov	sp, r7
    bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc92:	4770      	bx	lr

0000bc94 <_gpio_set_direction>:
{
    bc94:	b580      	push	{r7, lr}
    bc96:	b082      	sub	sp, #8
    bc98:	af00      	add	r7, sp, #0
    bc9a:	4603      	mov	r3, r0
    bc9c:	6039      	str	r1, [r7, #0]
    bc9e:	71fb      	strb	r3, [r7, #7]
    bca0:	4613      	mov	r3, r2
    bca2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    bca4:	79bb      	ldrb	r3, [r7, #6]
    bca6:	2b01      	cmp	r3, #1
    bca8:	d01c      	beq.n	bce4 <_gpio_set_direction+0x50>
    bcaa:	2b02      	cmp	r3, #2
    bcac:	d037      	beq.n	bd1e <_gpio_set_direction+0x8a>
    bcae:	2b00      	cmp	r3, #0
    bcb0:	d14e      	bne.n	bd50 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    bcb2:	79fb      	ldrb	r3, [r7, #7]
    bcb4:	683a      	ldr	r2, [r7, #0]
    bcb6:	4619      	mov	r1, r3
    bcb8:	482a      	ldr	r0, [pc, #168]	; (bd64 <_gpio_set_direction+0xd0>)
    bcba:	4b2b      	ldr	r3, [pc, #172]	; (bd68 <_gpio_set_direction+0xd4>)
    bcbc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    bcbe:	683b      	ldr	r3, [r7, #0]
    bcc0:	b29b      	uxth	r3, r3
    bcc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bcc6:	79fb      	ldrb	r3, [r7, #7]
    bcc8:	4619      	mov	r1, r3
    bcca:	4826      	ldr	r0, [pc, #152]	; (bd64 <_gpio_set_direction+0xd0>)
    bccc:	4b27      	ldr	r3, [pc, #156]	; (bd6c <_gpio_set_direction+0xd8>)
    bcce:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    bcd0:	683b      	ldr	r3, [r7, #0]
    bcd2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    bcd4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    bcd8:	79fb      	ldrb	r3, [r7, #7]
    bcda:	4619      	mov	r1, r3
    bcdc:	4821      	ldr	r0, [pc, #132]	; (bd64 <_gpio_set_direction+0xd0>)
    bcde:	4b23      	ldr	r3, [pc, #140]	; (bd6c <_gpio_set_direction+0xd8>)
    bce0:	4798      	blx	r3
		break;
    bce2:	e03a      	b.n	bd5a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    bce4:	79fb      	ldrb	r3, [r7, #7]
    bce6:	683a      	ldr	r2, [r7, #0]
    bce8:	4619      	mov	r1, r3
    bcea:	481e      	ldr	r0, [pc, #120]	; (bd64 <_gpio_set_direction+0xd0>)
    bcec:	4b1e      	ldr	r3, [pc, #120]	; (bd68 <_gpio_set_direction+0xd4>)
    bcee:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    bcf0:	683b      	ldr	r3, [r7, #0]
    bcf2:	b29b      	uxth	r3, r3
    bcf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    bcf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bcfc:	79f9      	ldrb	r1, [r7, #7]
    bcfe:	461a      	mov	r2, r3
    bd00:	4818      	ldr	r0, [pc, #96]	; (bd64 <_gpio_set_direction+0xd0>)
    bd02:	4b1a      	ldr	r3, [pc, #104]	; (bd6c <_gpio_set_direction+0xd8>)
    bd04:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    bd06:	683b      	ldr	r3, [r7, #0]
    bd08:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    bd0a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    bd0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bd12:	79f9      	ldrb	r1, [r7, #7]
    bd14:	461a      	mov	r2, r3
    bd16:	4813      	ldr	r0, [pc, #76]	; (bd64 <_gpio_set_direction+0xd0>)
    bd18:	4b14      	ldr	r3, [pc, #80]	; (bd6c <_gpio_set_direction+0xd8>)
    bd1a:	4798      	blx	r3
		break;
    bd1c:	e01d      	b.n	bd5a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    bd1e:	79fb      	ldrb	r3, [r7, #7]
    bd20:	683a      	ldr	r2, [r7, #0]
    bd22:	4619      	mov	r1, r3
    bd24:	480f      	ldr	r0, [pc, #60]	; (bd64 <_gpio_set_direction+0xd0>)
    bd26:	4b12      	ldr	r3, [pc, #72]	; (bd70 <_gpio_set_direction+0xdc>)
    bd28:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    bd2a:	683b      	ldr	r3, [r7, #0]
    bd2c:	b29b      	uxth	r3, r3
    bd2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bd32:	79fb      	ldrb	r3, [r7, #7]
    bd34:	4619      	mov	r1, r3
    bd36:	480b      	ldr	r0, [pc, #44]	; (bd64 <_gpio_set_direction+0xd0>)
    bd38:	4b0c      	ldr	r3, [pc, #48]	; (bd6c <_gpio_set_direction+0xd8>)
    bd3a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    bd3c:	683b      	ldr	r3, [r7, #0]
    bd3e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    bd40:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    bd44:	79fb      	ldrb	r3, [r7, #7]
    bd46:	4619      	mov	r1, r3
    bd48:	4806      	ldr	r0, [pc, #24]	; (bd64 <_gpio_set_direction+0xd0>)
    bd4a:	4b08      	ldr	r3, [pc, #32]	; (bd6c <_gpio_set_direction+0xd8>)
    bd4c:	4798      	blx	r3
		break;
    bd4e:	e004      	b.n	bd5a <_gpio_set_direction+0xc6>
		ASSERT(false);
    bd50:	2246      	movs	r2, #70	; 0x46
    bd52:	4908      	ldr	r1, [pc, #32]	; (bd74 <_gpio_set_direction+0xe0>)
    bd54:	2000      	movs	r0, #0
    bd56:	4b08      	ldr	r3, [pc, #32]	; (bd78 <_gpio_set_direction+0xe4>)
    bd58:	4798      	blx	r3
}
    bd5a:	bf00      	nop
    bd5c:	3708      	adds	r7, #8
    bd5e:	46bd      	mov	sp, r7
    bd60:	bd80      	pop	{r7, pc}
    bd62:	bf00      	nop
    bd64:	41008000 	.word	0x41008000
    bd68:	0000badd 	.word	0x0000badd
    bd6c:	0000bc6d 	.word	0x0000bc6d
    bd70:	0000bab5 	.word	0x0000bab5
    bd74:	000110f0 	.word	0x000110f0
    bd78:	00004409 	.word	0x00004409

0000bd7c <_gpio_set_level>:
{
    bd7c:	b580      	push	{r7, lr}
    bd7e:	b082      	sub	sp, #8
    bd80:	af00      	add	r7, sp, #0
    bd82:	4603      	mov	r3, r0
    bd84:	6039      	str	r1, [r7, #0]
    bd86:	71fb      	strb	r3, [r7, #7]
    bd88:	4613      	mov	r3, r2
    bd8a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    bd8c:	79bb      	ldrb	r3, [r7, #6]
    bd8e:	2b00      	cmp	r3, #0
    bd90:	d006      	beq.n	bda0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    bd92:	79fb      	ldrb	r3, [r7, #7]
    bd94:	683a      	ldr	r2, [r7, #0]
    bd96:	4619      	mov	r1, r3
    bd98:	4806      	ldr	r0, [pc, #24]	; (bdb4 <_gpio_set_level+0x38>)
    bd9a:	4b07      	ldr	r3, [pc, #28]	; (bdb8 <_gpio_set_level+0x3c>)
    bd9c:	4798      	blx	r3
}
    bd9e:	e005      	b.n	bdac <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    bda0:	79fb      	ldrb	r3, [r7, #7]
    bda2:	683a      	ldr	r2, [r7, #0]
    bda4:	4619      	mov	r1, r3
    bda6:	4803      	ldr	r0, [pc, #12]	; (bdb4 <_gpio_set_level+0x38>)
    bda8:	4b04      	ldr	r3, [pc, #16]	; (bdbc <_gpio_set_level+0x40>)
    bdaa:	4798      	blx	r3
}
    bdac:	bf00      	nop
    bdae:	3708      	adds	r7, #8
    bdb0:	46bd      	mov	sp, r7
    bdb2:	bd80      	pop	{r7, pc}
    bdb4:	41008000 	.word	0x41008000
    bdb8:	0000bb05 	.word	0x0000bb05
    bdbc:	0000bb2d 	.word	0x0000bb2d

0000bdc0 <_gpio_set_pin_function>:
{
    bdc0:	b590      	push	{r4, r7, lr}
    bdc2:	b085      	sub	sp, #20
    bdc4:	af00      	add	r7, sp, #0
    bdc6:	6078      	str	r0, [r7, #4]
    bdc8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    bdca:	687b      	ldr	r3, [r7, #4]
    bdcc:	095b      	lsrs	r3, r3, #5
    bdce:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    bdd0:	687b      	ldr	r3, [r7, #4]
    bdd2:	b2db      	uxtb	r3, r3
    bdd4:	f003 031f 	and.w	r3, r3, #31
    bdd8:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    bdda:	683b      	ldr	r3, [r7, #0]
    bddc:	f1b3 3fff 	cmp.w	r3, #4294967295
    bde0:	d106      	bne.n	bdf0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    bde2:	7bba      	ldrb	r2, [r7, #14]
    bde4:	7bf9      	ldrb	r1, [r7, #15]
    bde6:	2300      	movs	r3, #0
    bde8:	4812      	ldr	r0, [pc, #72]	; (be34 <_gpio_set_pin_function+0x74>)
    bdea:	4c13      	ldr	r4, [pc, #76]	; (be38 <_gpio_set_pin_function+0x78>)
    bdec:	47a0      	blx	r4
}
    bdee:	e01d      	b.n	be2c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    bdf0:	7bba      	ldrb	r2, [r7, #14]
    bdf2:	7bf9      	ldrb	r1, [r7, #15]
    bdf4:	2301      	movs	r3, #1
    bdf6:	480f      	ldr	r0, [pc, #60]	; (be34 <_gpio_set_pin_function+0x74>)
    bdf8:	4c0f      	ldr	r4, [pc, #60]	; (be38 <_gpio_set_pin_function+0x78>)
    bdfa:	47a0      	blx	r4
		if (pin & 1) {
    bdfc:	7bbb      	ldrb	r3, [r7, #14]
    bdfe:	f003 0301 	and.w	r3, r3, #1
    be02:	2b00      	cmp	r3, #0
    be04:	d009      	beq.n	be1a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    be06:	7bbb      	ldrb	r3, [r7, #14]
    be08:	085b      	lsrs	r3, r3, #1
    be0a:	b2da      	uxtb	r2, r3
    be0c:	683b      	ldr	r3, [r7, #0]
    be0e:	b2db      	uxtb	r3, r3
    be10:	7bf9      	ldrb	r1, [r7, #15]
    be12:	4808      	ldr	r0, [pc, #32]	; (be34 <_gpio_set_pin_function+0x74>)
    be14:	4c09      	ldr	r4, [pc, #36]	; (be3c <_gpio_set_pin_function+0x7c>)
    be16:	47a0      	blx	r4
}
    be18:	e008      	b.n	be2c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    be1a:	7bbb      	ldrb	r3, [r7, #14]
    be1c:	085b      	lsrs	r3, r3, #1
    be1e:	b2da      	uxtb	r2, r3
    be20:	683b      	ldr	r3, [r7, #0]
    be22:	b2db      	uxtb	r3, r3
    be24:	7bf9      	ldrb	r1, [r7, #15]
    be26:	4803      	ldr	r0, [pc, #12]	; (be34 <_gpio_set_pin_function+0x74>)
    be28:	4c05      	ldr	r4, [pc, #20]	; (be40 <_gpio_set_pin_function+0x80>)
    be2a:	47a0      	blx	r4
}
    be2c:	bf00      	nop
    be2e:	3714      	adds	r7, #20
    be30:	46bd      	mov	sp, r7
    be32:	bd90      	pop	{r4, r7, pc}
    be34:	41008000 	.word	0x41008000
    be38:	0000bc13 	.word	0x0000bc13
    be3c:	0000bbb5 	.word	0x0000bbb5
    be40:	0000bb55 	.word	0x0000bb55

0000be44 <gpio_set_pin_function>:
{
    be44:	b580      	push	{r7, lr}
    be46:	b082      	sub	sp, #8
    be48:	af00      	add	r7, sp, #0
    be4a:	6078      	str	r0, [r7, #4]
    be4c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    be4e:	6839      	ldr	r1, [r7, #0]
    be50:	6878      	ldr	r0, [r7, #4]
    be52:	4b03      	ldr	r3, [pc, #12]	; (be60 <gpio_set_pin_function+0x1c>)
    be54:	4798      	blx	r3
}
    be56:	bf00      	nop
    be58:	3708      	adds	r7, #8
    be5a:	46bd      	mov	sp, r7
    be5c:	bd80      	pop	{r7, pc}
    be5e:	bf00      	nop
    be60:	0000bdc1 	.word	0x0000bdc1

0000be64 <gpio_set_pin_direction>:
{
    be64:	b580      	push	{r7, lr}
    be66:	b082      	sub	sp, #8
    be68:	af00      	add	r7, sp, #0
    be6a:	4603      	mov	r3, r0
    be6c:	460a      	mov	r2, r1
    be6e:	71fb      	strb	r3, [r7, #7]
    be70:	4613      	mov	r3, r2
    be72:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    be74:	79fb      	ldrb	r3, [r7, #7]
    be76:	095b      	lsrs	r3, r3, #5
    be78:	b2d8      	uxtb	r0, r3
    be7a:	79fb      	ldrb	r3, [r7, #7]
    be7c:	f003 031f 	and.w	r3, r3, #31
    be80:	2201      	movs	r2, #1
    be82:	fa02 f303 	lsl.w	r3, r2, r3
    be86:	79ba      	ldrb	r2, [r7, #6]
    be88:	4619      	mov	r1, r3
    be8a:	4b03      	ldr	r3, [pc, #12]	; (be98 <gpio_set_pin_direction+0x34>)
    be8c:	4798      	blx	r3
}
    be8e:	bf00      	nop
    be90:	3708      	adds	r7, #8
    be92:	46bd      	mov	sp, r7
    be94:	bd80      	pop	{r7, pc}
    be96:	bf00      	nop
    be98:	0000bc95 	.word	0x0000bc95

0000be9c <gpio_set_pin_level>:
{
    be9c:	b580      	push	{r7, lr}
    be9e:	b082      	sub	sp, #8
    bea0:	af00      	add	r7, sp, #0
    bea2:	4603      	mov	r3, r0
    bea4:	460a      	mov	r2, r1
    bea6:	71fb      	strb	r3, [r7, #7]
    bea8:	4613      	mov	r3, r2
    beaa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    beac:	79fb      	ldrb	r3, [r7, #7]
    beae:	095b      	lsrs	r3, r3, #5
    beb0:	b2d8      	uxtb	r0, r3
    beb2:	79fb      	ldrb	r3, [r7, #7]
    beb4:	f003 031f 	and.w	r3, r3, #31
    beb8:	2201      	movs	r2, #1
    beba:	fa02 f303 	lsl.w	r3, r2, r3
    bebe:	79ba      	ldrb	r2, [r7, #6]
    bec0:	4619      	mov	r1, r3
    bec2:	4b03      	ldr	r3, [pc, #12]	; (bed0 <gpio_set_pin_level+0x34>)
    bec4:	4798      	blx	r3
}
    bec6:	bf00      	nop
    bec8:	3708      	adds	r7, #8
    beca:	46bd      	mov	sp, r7
    becc:	bd80      	pop	{r7, pc}
    bece:	bf00      	nop
    bed0:	0000bd7d 	.word	0x0000bd7d

0000bed4 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    bed4:	b580      	push	{r7, lr}
    bed6:	b082      	sub	sp, #8
    bed8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    beda:	2100      	movs	r1, #0
    bedc:	2008      	movs	r0, #8
    bede:	4b24      	ldr	r3, [pc, #144]	; (bf70 <QSPI_N25Q256_exit_xip+0x9c>)
    bee0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    bee2:	2100      	movs	r1, #0
    bee4:	202b      	movs	r0, #43	; 0x2b
    bee6:	4b22      	ldr	r3, [pc, #136]	; (bf70 <QSPI_N25Q256_exit_xip+0x9c>)
    bee8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    beea:	2100      	movs	r1, #0
    beec:	202a      	movs	r0, #42	; 0x2a
    beee:	4b20      	ldr	r3, [pc, #128]	; (bf70 <QSPI_N25Q256_exit_xip+0x9c>)
    bef0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    bef2:	2102      	movs	r1, #2
    bef4:	2008      	movs	r0, #8
    bef6:	4b1f      	ldr	r3, [pc, #124]	; (bf74 <QSPI_N25Q256_exit_xip+0xa0>)
    bef8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    befa:	2102      	movs	r1, #2
    befc:	202b      	movs	r0, #43	; 0x2b
    befe:	4b1d      	ldr	r3, [pc, #116]	; (bf74 <QSPI_N25Q256_exit_xip+0xa0>)
    bf00:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    bf02:	2102      	movs	r1, #2
    bf04:	202a      	movs	r0, #42	; 0x2a
    bf06:	4b1b      	ldr	r3, [pc, #108]	; (bf74 <QSPI_N25Q256_exit_xip+0xa0>)
    bf08:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    bf0a:	2101      	movs	r1, #1
    bf0c:	2008      	movs	r0, #8
    bf0e:	4b1a      	ldr	r3, [pc, #104]	; (bf78 <QSPI_N25Q256_exit_xip+0xa4>)
    bf10:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    bf12:	2100      	movs	r1, #0
    bf14:	202b      	movs	r0, #43	; 0x2b
    bf16:	4b18      	ldr	r3, [pc, #96]	; (bf78 <QSPI_N25Q256_exit_xip+0xa4>)
    bf18:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    bf1a:	2100      	movs	r1, #0
    bf1c:	202a      	movs	r0, #42	; 0x2a
    bf1e:	4b16      	ldr	r3, [pc, #88]	; (bf78 <QSPI_N25Q256_exit_xip+0xa4>)
    bf20:	4798      	blx	r3

	delay_us(1);
    bf22:	2001      	movs	r0, #1
    bf24:	4b15      	ldr	r3, [pc, #84]	; (bf7c <QSPI_N25Q256_exit_xip+0xa8>)
    bf26:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    bf28:	2300      	movs	r3, #0
    bf2a:	607b      	str	r3, [r7, #4]
    bf2c:	e010      	b.n	bf50 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    bf2e:	2101      	movs	r1, #1
    bf30:	202a      	movs	r0, #42	; 0x2a
    bf32:	4b11      	ldr	r3, [pc, #68]	; (bf78 <QSPI_N25Q256_exit_xip+0xa4>)
    bf34:	4798      	blx	r3
		delay_us(1);
    bf36:	2001      	movs	r0, #1
    bf38:	4b10      	ldr	r3, [pc, #64]	; (bf7c <QSPI_N25Q256_exit_xip+0xa8>)
    bf3a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    bf3c:	2100      	movs	r1, #0
    bf3e:	202a      	movs	r0, #42	; 0x2a
    bf40:	4b0d      	ldr	r3, [pc, #52]	; (bf78 <QSPI_N25Q256_exit_xip+0xa4>)
    bf42:	4798      	blx	r3
		delay_us(1);
    bf44:	2001      	movs	r0, #1
    bf46:	4b0d      	ldr	r3, [pc, #52]	; (bf7c <QSPI_N25Q256_exit_xip+0xa8>)
    bf48:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    bf4a:	687b      	ldr	r3, [r7, #4]
    bf4c:	3301      	adds	r3, #1
    bf4e:	607b      	str	r3, [r7, #4]
    bf50:	687b      	ldr	r3, [r7, #4]
    bf52:	2b06      	cmp	r3, #6
    bf54:	ddeb      	ble.n	bf2e <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    bf56:	2101      	movs	r1, #1
    bf58:	202b      	movs	r0, #43	; 0x2b
    bf5a:	4b07      	ldr	r3, [pc, #28]	; (bf78 <QSPI_N25Q256_exit_xip+0xa4>)
    bf5c:	4798      	blx	r3
	delay_us(1);
    bf5e:	2001      	movs	r0, #1
    bf60:	4b06      	ldr	r3, [pc, #24]	; (bf7c <QSPI_N25Q256_exit_xip+0xa8>)
    bf62:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    bf64:	4b06      	ldr	r3, [pc, #24]	; (bf80 <QSPI_N25Q256_exit_xip+0xac>)
    bf66:	4798      	blx	r3
}
    bf68:	bf00      	nop
    bf6a:	3708      	adds	r7, #8
    bf6c:	46bd      	mov	sp, r7
    bf6e:	bd80      	pop	{r7, pc}
    bf70:	0000be45 	.word	0x0000be45
    bf74:	0000be65 	.word	0x0000be65
    bf78:	0000be9d 	.word	0x0000be9d
    bf7c:	00002de5 	.word	0x00002de5
    bf80:	00001e8d 	.word	0x00001e8d

0000bf84 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    bf84:	b598      	push	{r3, r4, r7, lr}
    bf86:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    bf88:	4806      	ldr	r0, [pc, #24]	; (bfa4 <spi_nor_flash_init+0x20>)
    bf8a:	4b07      	ldr	r3, [pc, #28]	; (bfa8 <spi_nor_flash_init+0x24>)
    bf8c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    bf8e:	2300      	movs	r3, #0
    bf90:	4a06      	ldr	r2, [pc, #24]	; (bfac <spi_nor_flash_init+0x28>)
    bf92:	4904      	ldr	r1, [pc, #16]	; (bfa4 <spi_nor_flash_init+0x20>)
    bf94:	4806      	ldr	r0, [pc, #24]	; (bfb0 <spi_nor_flash_init+0x2c>)
    bf96:	4c07      	ldr	r4, [pc, #28]	; (bfb4 <spi_nor_flash_init+0x30>)
    bf98:	47a0      	blx	r4
    bf9a:	4602      	mov	r2, r0
    bf9c:	4b06      	ldr	r3, [pc, #24]	; (bfb8 <spi_nor_flash_init+0x34>)
    bf9e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    bfa0:	bf00      	nop
    bfa2:	bd98      	pop	{r3, r4, r7, pc}
    bfa4:	2000ab78 	.word	0x2000ab78
    bfa8:	00003371 	.word	0x00003371
    bfac:	0000bed5 	.word	0x0000bed5
    bfb0:	200011f0 	.word	0x200011f0
    bfb4:	0000c3a5 	.word	0x0000c3a5
    bfb8:	2000ad78 	.word	0x2000ad78

0000bfbc <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    bfbc:	b580      	push	{r7, lr}
    bfbe:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    bfc0:	4805      	ldr	r0, [pc, #20]	; (bfd8 <cdc_device_acm_init+0x1c>)
    bfc2:	4b06      	ldr	r3, [pc, #24]	; (bfdc <cdc_device_acm_init+0x20>)
    bfc4:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    bfc6:	4b06      	ldr	r3, [pc, #24]	; (bfe0 <cdc_device_acm_init+0x24>)
    bfc8:	4798      	blx	r3

	usbdc_start(single_desc);
    bfca:	4806      	ldr	r0, [pc, #24]	; (bfe4 <cdc_device_acm_init+0x28>)
    bfcc:	4b06      	ldr	r3, [pc, #24]	; (bfe8 <cdc_device_acm_init+0x2c>)
    bfce:	4798      	blx	r3
	usbdc_attach();
    bfd0:	4b06      	ldr	r3, [pc, #24]	; (bfec <cdc_device_acm_init+0x30>)
    bfd2:	4798      	blx	r3
}
    bfd4:	bf00      	nop
    bfd6:	bd80      	pop	{r7, pc}
    bfd8:	20001240 	.word	0x20001240
    bfdc:	0000dacd 	.word	0x0000dacd
    bfe0:	0000cd45 	.word	0x0000cd45
    bfe4:	20000200 	.word	0x20000200
    bfe8:	0000db69 	.word	0x0000db69
    bfec:	0000dbb9 	.word	0x0000dbb9

0000bff0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    bff0:	b580      	push	{r7, lr}
    bff2:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    bff4:	4b01      	ldr	r3, [pc, #4]	; (bffc <usb_init+0xc>)
    bff6:	4798      	blx	r3
}
    bff8:	bf00      	nop
    bffa:	bd80      	pop	{r7, pc}
    bffc:	0000bfbd 	.word	0x0000bfbd

0000c000 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    c000:	b580      	push	{r7, lr}
    c002:	b08c      	sub	sp, #48	; 0x30
    c004:	af00      	add	r7, sp, #0
    c006:	6078      	str	r0, [r7, #4]
    c008:	460b      	mov	r3, r1
    c00a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c00c:	687b      	ldr	r3, [r7, #4]
    c00e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c010:	687b      	ldr	r3, [r7, #4]
    c012:	681b      	ldr	r3, [r3, #0]
    c014:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    c016:	f107 030c 	add.w	r3, r7, #12
    c01a:	2200      	movs	r2, #0
    c01c:	601a      	str	r2, [r3, #0]
    c01e:	605a      	str	r2, [r3, #4]
    c020:	609a      	str	r2, [r3, #8]
    c022:	60da      	str	r2, [r3, #12]
    c024:	611a      	str	r2, [r3, #16]
    c026:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c02a:	7b1b      	ldrb	r3, [r3, #12]
    c02c:	2b00      	cmp	r3, #0
    c02e:	d001      	beq.n	c034 <n25q256a_xip_confirm+0x34>
    c030:	2206      	movs	r2, #6
    c032:	e000      	b.n	c036 <n25q256a_xip_confirm+0x36>
    c034:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c036:	7b3b      	ldrb	r3, [r7, #12]
    c038:	f362 0302 	bfi	r3, r2, #0, #3
    c03c:	733b      	strb	r3, [r7, #12]
    c03e:	7b3b      	ldrb	r3, [r7, #12]
    c040:	f043 0310 	orr.w	r3, r3, #16
    c044:	733b      	strb	r3, [r7, #12]
    c046:	7b3b      	ldrb	r3, [r7, #12]
    c048:	f043 0320 	orr.w	r3, r3, #32
    c04c:	733b      	strb	r3, [r7, #12]
    c04e:	7b3b      	ldrb	r3, [r7, #12]
    c050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c054:	733b      	strb	r3, [r7, #12]
    c056:	7b3b      	ldrb	r3, [r7, #12]
    c058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c05c:	733b      	strb	r3, [r7, #12]
    c05e:	7b7b      	ldrb	r3, [r7, #13]
    c060:	f043 0303 	orr.w	r3, r3, #3
    c064:	737b      	strb	r3, [r7, #13]
    c066:	7b7b      	ldrb	r3, [r7, #13]
    c068:	2201      	movs	r2, #1
    c06a:	f362 1305 	bfi	r3, r2, #4, #2
    c06e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    c070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c072:	7b1b      	ldrb	r3, [r3, #12]
    c074:	2b00      	cmp	r3, #0
    c076:	d001      	beq.n	c07c <n25q256a_xip_confirm+0x7c>
    c078:	2208      	movs	r2, #8
    c07a:	e000      	b.n	c07e <n25q256a_xip_confirm+0x7e>
    c07c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c07e:	7bbb      	ldrb	r3, [r7, #14]
    c080:	f362 0304 	bfi	r3, r2, #0, #5
    c084:	73bb      	strb	r3, [r7, #14]
    c086:	230b      	movs	r3, #11
    c088:	743b      	strb	r3, [r7, #16]
    c08a:	78fb      	ldrb	r3, [r7, #3]
    c08c:	2b00      	cmp	r3, #0
    c08e:	d001      	beq.n	c094 <n25q256a_xip_confirm+0x94>
    c090:	2300      	movs	r3, #0
    c092:	e000      	b.n	c096 <n25q256a_xip_confirm+0x96>
    c094:	23ff      	movs	r3, #255	; 0xff
    c096:	747b      	strb	r3, [r7, #17]
    c098:	2301      	movs	r3, #1
    c09a:	61bb      	str	r3, [r7, #24]
    c09c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    c0a0:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    c0a2:	f107 030c 	add.w	r3, r7, #12
    c0a6:	4619      	mov	r1, r3
    c0a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c0aa:	4b07      	ldr	r3, [pc, #28]	; (c0c8 <n25q256a_xip_confirm+0xc8>)
    c0ac:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    c0ae:	78fb      	ldrb	r3, [r7, #3]
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	d001      	beq.n	c0b8 <n25q256a_xip_confirm+0xb8>
    c0b4:	2202      	movs	r2, #2
    c0b6:	e000      	b.n	c0ba <n25q256a_xip_confirm+0xba>
    c0b8:	2201      	movs	r2, #1
    c0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0bc:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c0be:	2300      	movs	r3, #0
}
    c0c0:	4618      	mov	r0, r3
    c0c2:	3730      	adds	r7, #48	; 0x30
    c0c4:	46bd      	mov	sp, r7
    c0c6:	bd80      	pop	{r7, pc}
    c0c8:	000033e9 	.word	0x000033e9

0000c0cc <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    c0cc:	b580      	push	{r7, lr}
    c0ce:	b08c      	sub	sp, #48	; 0x30
    c0d0:	af00      	add	r7, sp, #0
    c0d2:	6078      	str	r0, [r7, #4]
    c0d4:	460b      	mov	r3, r1
    c0d6:	70fb      	strb	r3, [r7, #3]
    c0d8:	4613      	mov	r3, r2
    c0da:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    c0dc:	2300      	movs	r3, #0
    c0de:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    c0e0:	687b      	ldr	r3, [r7, #4]
    c0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    c0e4:	687b      	ldr	r3, [r7, #4]
    c0e6:	681b      	ldr	r3, [r3, #0]
    c0e8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    c0ea:	f107 030c 	add.w	r3, r7, #12
    c0ee:	2200      	movs	r2, #0
    c0f0:	601a      	str	r2, [r3, #0]
    c0f2:	605a      	str	r2, [r3, #4]
    c0f4:	609a      	str	r2, [r3, #8]
    c0f6:	60da      	str	r2, [r3, #12]
    c0f8:	611a      	str	r2, [r3, #16]
    c0fa:	615a      	str	r2, [r3, #20]
    c0fc:	78fb      	ldrb	r3, [r7, #3]
    c0fe:	f003 0307 	and.w	r3, r3, #7
    c102:	b2da      	uxtb	r2, r3
    c104:	7b3b      	ldrb	r3, [r7, #12]
    c106:	f362 0302 	bfi	r3, r2, #0, #3
    c10a:	733b      	strb	r3, [r7, #12]
    c10c:	7b3b      	ldrb	r3, [r7, #12]
    c10e:	f043 0310 	orr.w	r3, r3, #16
    c112:	733b      	strb	r3, [r7, #12]
    c114:	7b3b      	ldrb	r3, [r7, #12]
    c116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c11a:	733b      	strb	r3, [r7, #12]
    c11c:	78bb      	ldrb	r3, [r7, #2]
    c11e:	743b      	strb	r3, [r7, #16]
    c120:	2301      	movs	r3, #1
    c122:	61bb      	str	r3, [r7, #24]
    c124:	f107 0324 	add.w	r3, r7, #36	; 0x24
    c128:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    c12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c12c:	7b5b      	ldrb	r3, [r3, #13]
    c12e:	2b00      	cmp	r3, #0
    c130:	d003      	beq.n	c13a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    c132:	2100      	movs	r1, #0
    c134:	6878      	ldr	r0, [r7, #4]
    c136:	4b0a      	ldr	r3, [pc, #40]	; (c160 <n25q256a_read_reg+0x94>)
    c138:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c13a:	f107 030c 	add.w	r3, r7, #12
    c13e:	4619      	mov	r1, r3
    c140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c142:	4b08      	ldr	r3, [pc, #32]	; (c164 <n25q256a_read_reg+0x98>)
    c144:	4798      	blx	r3
	if (n25q->xip_mode) {
    c146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c148:	7b5b      	ldrb	r3, [r3, #13]
    c14a:	2b00      	cmp	r3, #0
    c14c:	d003      	beq.n	c156 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    c14e:	2101      	movs	r1, #1
    c150:	6878      	ldr	r0, [r7, #4]
    c152:	4b03      	ldr	r3, [pc, #12]	; (c160 <n25q256a_read_reg+0x94>)
    c154:	4798      	blx	r3
	}
	return status;
    c156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c158:	4618      	mov	r0, r3
    c15a:	3730      	adds	r7, #48	; 0x30
    c15c:	46bd      	mov	sp, r7
    c15e:	bd80      	pop	{r7, pc}
    c160:	0000c001 	.word	0x0000c001
    c164:	000033e9 	.word	0x000033e9

0000c168 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    c168:	b580      	push	{r7, lr}
    c16a:	b08c      	sub	sp, #48	; 0x30
    c16c:	af00      	add	r7, sp, #0
    c16e:	60f8      	str	r0, [r7, #12]
    c170:	607b      	str	r3, [r7, #4]
    c172:	460b      	mov	r3, r1
    c174:	72fb      	strb	r3, [r7, #11]
    c176:	4613      	mov	r3, r2
    c178:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c17a:	68fb      	ldr	r3, [r7, #12]
    c17c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c17e:	68fb      	ldr	r3, [r7, #12]
    c180:	681b      	ldr	r3, [r3, #0]
    c182:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    c184:	f107 0310 	add.w	r3, r7, #16
    c188:	2200      	movs	r2, #0
    c18a:	601a      	str	r2, [r3, #0]
    c18c:	605a      	str	r2, [r3, #4]
    c18e:	609a      	str	r2, [r3, #8]
    c190:	60da      	str	r2, [r3, #12]
    c192:	611a      	str	r2, [r3, #16]
    c194:	615a      	str	r2, [r3, #20]
    c196:	7afb      	ldrb	r3, [r7, #11]
    c198:	f003 0307 	and.w	r3, r3, #7
    c19c:	b2da      	uxtb	r2, r3
    c19e:	7c3b      	ldrb	r3, [r7, #16]
    c1a0:	f362 0302 	bfi	r3, r2, #0, #3
    c1a4:	743b      	strb	r3, [r7, #16]
    c1a6:	7c3b      	ldrb	r3, [r7, #16]
    c1a8:	f043 0310 	orr.w	r3, r3, #16
    c1ac:	743b      	strb	r3, [r7, #16]
    c1ae:	7c3b      	ldrb	r3, [r7, #16]
    c1b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c1b4:	743b      	strb	r3, [r7, #16]
    c1b6:	7c7b      	ldrb	r3, [r7, #17]
    c1b8:	2202      	movs	r2, #2
    c1ba:	f362 1305 	bfi	r3, r2, #4, #2
    c1be:	747b      	strb	r3, [r7, #17]
    c1c0:	7abb      	ldrb	r3, [r7, #10]
    c1c2:	753b      	strb	r3, [r7, #20]
    c1c4:	2301      	movs	r3, #1
    c1c6:	61fb      	str	r3, [r7, #28]
    c1c8:	1d3b      	adds	r3, r7, #4
    c1ca:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    c1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1ce:	7b5b      	ldrb	r3, [r3, #13]
    c1d0:	2b00      	cmp	r3, #0
    c1d2:	d003      	beq.n	c1dc <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    c1d4:	2100      	movs	r1, #0
    c1d6:	68f8      	ldr	r0, [r7, #12]
    c1d8:	4b09      	ldr	r3, [pc, #36]	; (c200 <n25q256a_write_reg+0x98>)
    c1da:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c1dc:	f107 0310 	add.w	r3, r7, #16
    c1e0:	4619      	mov	r1, r3
    c1e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c1e4:	4b07      	ldr	r3, [pc, #28]	; (c204 <n25q256a_write_reg+0x9c>)
    c1e6:	4798      	blx	r3
	if (n25q->xip_mode) {
    c1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1ea:	7b5b      	ldrb	r3, [r3, #13]
    c1ec:	2b00      	cmp	r3, #0
    c1ee:	d003      	beq.n	c1f8 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    c1f0:	2101      	movs	r1, #1
    c1f2:	68f8      	ldr	r0, [r7, #12]
    c1f4:	4b02      	ldr	r3, [pc, #8]	; (c200 <n25q256a_write_reg+0x98>)
    c1f6:	4798      	blx	r3
	}
}
    c1f8:	bf00      	nop
    c1fa:	3730      	adds	r7, #48	; 0x30
    c1fc:	46bd      	mov	sp, r7
    c1fe:	bd80      	pop	{r7, pc}
    c200:	0000c001 	.word	0x0000c001
    c204:	000033e9 	.word	0x000033e9

0000c208 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    c208:	b580      	push	{r7, lr}
    c20a:	b090      	sub	sp, #64	; 0x40
    c20c:	af00      	add	r7, sp, #0
    c20e:	6078      	str	r0, [r7, #4]
    c210:	460b      	mov	r3, r1
    c212:	70fb      	strb	r3, [r7, #3]
    c214:	4613      	mov	r3, r2
    c216:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c218:	687b      	ldr	r3, [r7, #4]
    c21a:	681b      	ldr	r3, [r3, #0]
    c21c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    c21e:	78bb      	ldrb	r3, [r7, #2]
    c220:	2b00      	cmp	r3, #0
    c222:	d001      	beq.n	c228 <n25q256a_write_enable+0x20>
    c224:	2306      	movs	r3, #6
    c226:	e000      	b.n	c22a <n25q256a_write_enable+0x22>
    c228:	2304      	movs	r3, #4
    c22a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    c22e:	f107 0320 	add.w	r3, r7, #32
    c232:	2200      	movs	r2, #0
    c234:	601a      	str	r2, [r3, #0]
    c236:	605a      	str	r2, [r3, #4]
    c238:	609a      	str	r2, [r3, #8]
    c23a:	60da      	str	r2, [r3, #12]
    c23c:	611a      	str	r2, [r3, #16]
    c23e:	615a      	str	r2, [r3, #20]
    c240:	78fb      	ldrb	r3, [r7, #3]
    c242:	f003 0307 	and.w	r3, r3, #7
    c246:	b2da      	uxtb	r2, r3
    c248:	f897 3020 	ldrb.w	r3, [r7, #32]
    c24c:	f362 0302 	bfi	r3, r2, #0, #3
    c250:	f887 3020 	strb.w	r3, [r7, #32]
    c254:	f897 3020 	ldrb.w	r3, [r7, #32]
    c258:	f043 0310 	orr.w	r3, r3, #16
    c25c:	f887 3020 	strb.w	r3, [r7, #32]
    c260:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    c264:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    c268:	f107 0308 	add.w	r3, r7, #8
    c26c:	2200      	movs	r2, #0
    c26e:	601a      	str	r2, [r3, #0]
    c270:	605a      	str	r2, [r3, #4]
    c272:	609a      	str	r2, [r3, #8]
    c274:	60da      	str	r2, [r3, #12]
    c276:	611a      	str	r2, [r3, #16]
    c278:	615a      	str	r2, [r3, #20]
    c27a:	78fb      	ldrb	r3, [r7, #3]
    c27c:	f003 0307 	and.w	r3, r3, #7
    c280:	b2da      	uxtb	r2, r3
    c282:	7a3b      	ldrb	r3, [r7, #8]
    c284:	f362 0302 	bfi	r3, r2, #0, #3
    c288:	723b      	strb	r3, [r7, #8]
    c28a:	7a3b      	ldrb	r3, [r7, #8]
    c28c:	f043 0310 	orr.w	r3, r3, #16
    c290:	723b      	strb	r3, [r7, #8]
    c292:	7a3b      	ldrb	r3, [r7, #8]
    c294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c298:	723b      	strb	r3, [r7, #8]
    c29a:	2305      	movs	r3, #5
    c29c:	733b      	strb	r3, [r7, #12]
    c29e:	2301      	movs	r3, #1
    c2a0:	617b      	str	r3, [r7, #20]
    c2a2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    c2a6:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    c2a8:	f107 0320 	add.w	r3, r7, #32
    c2ac:	4619      	mov	r1, r3
    c2ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c2b0:	4b08      	ldr	r3, [pc, #32]	; (c2d4 <n25q256a_write_enable+0xcc>)
    c2b2:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    c2b4:	f107 0308 	add.w	r3, r7, #8
    c2b8:	4619      	mov	r1, r3
    c2ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c2bc:	4b05      	ldr	r3, [pc, #20]	; (c2d4 <n25q256a_write_enable+0xcc>)
    c2be:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    c2c0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    c2c4:	f003 0302 	and.w	r3, r3, #2
    c2c8:	2b00      	cmp	r3, #0
    c2ca:	d0ed      	beq.n	c2a8 <n25q256a_write_enable+0xa0>
}
    c2cc:	bf00      	nop
    c2ce:	3740      	adds	r7, #64	; 0x40
    c2d0:	46bd      	mov	sp, r7
    c2d2:	bd80      	pop	{r7, pc}
    c2d4:	000033e9 	.word	0x000033e9

0000c2d8 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    c2d8:	b590      	push	{r4, r7, lr}
    c2da:	b087      	sub	sp, #28
    c2dc:	af00      	add	r7, sp, #0
    c2de:	6078      	str	r0, [r7, #4]
    c2e0:	460b      	mov	r3, r1
    c2e2:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    c2e4:	687b      	ldr	r3, [r7, #4]
    c2e6:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c2e8:	68fb      	ldr	r3, [r7, #12]
    c2ea:	7b1b      	ldrb	r3, [r3, #12]
    c2ec:	2b00      	cmp	r3, #0
    c2ee:	d001      	beq.n	c2f4 <n25q256a_switch_mode+0x1c>
    c2f0:	2306      	movs	r3, #6
    c2f2:	e000      	b.n	c2f6 <n25q256a_switch_mode+0x1e>
    c2f4:	2300      	movs	r3, #0
    c2f6:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c2f8:	7afb      	ldrb	r3, [r7, #11]
    c2fa:	2265      	movs	r2, #101	; 0x65
    c2fc:	4619      	mov	r1, r3
    c2fe:	6878      	ldr	r0, [r7, #4]
    c300:	4b25      	ldr	r3, [pc, #148]	; (c398 <n25q256a_switch_mode+0xc0>)
    c302:	4798      	blx	r3
    c304:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c306:	2300      	movs	r3, #0
    c308:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c30a:	68fb      	ldr	r3, [r7, #12]
    c30c:	7b1b      	ldrb	r3, [r3, #12]
    c30e:	78fa      	ldrb	r2, [r7, #3]
    c310:	429a      	cmp	r2, r3
    c312:	d03d      	beq.n	c390 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c314:	78fb      	ldrb	r3, [r7, #3]
    c316:	2b00      	cmp	r3, #0
    c318:	d00b      	beq.n	c332 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c31a:	697b      	ldr	r3, [r7, #20]
    c31c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c320:	2b00      	cmp	r3, #0
    c322:	d011      	beq.n	c348 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c324:	697b      	ldr	r3, [r7, #20]
    c326:	f003 031f 	and.w	r3, r3, #31
    c32a:	617b      	str	r3, [r7, #20]
			modify = 1;
    c32c:	2301      	movs	r3, #1
    c32e:	74fb      	strb	r3, [r7, #19]
    c330:	e00a      	b.n	c348 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c332:	697b      	ldr	r3, [r7, #20]
    c334:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c338:	2b00      	cmp	r3, #0
    c33a:	d105      	bne.n	c348 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c33c:	697b      	ldr	r3, [r7, #20]
    c33e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c342:	617b      	str	r3, [r7, #20]
			modify = 1;
    c344:	2301      	movs	r3, #1
    c346:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c348:	7cfb      	ldrb	r3, [r7, #19]
    c34a:	2b00      	cmp	r3, #0
    c34c:	d021      	beq.n	c392 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c34e:	68fb      	ldr	r3, [r7, #12]
    c350:	78fa      	ldrb	r2, [r7, #3]
    c352:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c354:	7afb      	ldrb	r3, [r7, #11]
    c356:	2201      	movs	r2, #1
    c358:	4619      	mov	r1, r3
    c35a:	6878      	ldr	r0, [r7, #4]
    c35c:	4b0f      	ldr	r3, [pc, #60]	; (c39c <n25q256a_switch_mode+0xc4>)
    c35e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c360:	7af9      	ldrb	r1, [r7, #11]
    c362:	697b      	ldr	r3, [r7, #20]
    c364:	2261      	movs	r2, #97	; 0x61
    c366:	6878      	ldr	r0, [r7, #4]
    c368:	4c0d      	ldr	r4, [pc, #52]	; (c3a0 <n25q256a_switch_mode+0xc8>)
    c36a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c36c:	78fb      	ldrb	r3, [r7, #3]
    c36e:	2b00      	cmp	r3, #0
    c370:	d001      	beq.n	c376 <n25q256a_switch_mode+0x9e>
    c372:	2306      	movs	r3, #6
    c374:	e000      	b.n	c378 <n25q256a_switch_mode+0xa0>
    c376:	2300      	movs	r3, #0
    c378:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c37a:	7afb      	ldrb	r3, [r7, #11]
    c37c:	2265      	movs	r2, #101	; 0x65
    c37e:	4619      	mov	r1, r3
    c380:	6878      	ldr	r0, [r7, #4]
    c382:	4b05      	ldr	r3, [pc, #20]	; (c398 <n25q256a_switch_mode+0xc0>)
    c384:	4798      	blx	r3
    c386:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c388:	68fb      	ldr	r3, [r7, #12]
    c38a:	78fa      	ldrb	r2, [r7, #3]
    c38c:	731a      	strb	r2, [r3, #12]
    c38e:	e000      	b.n	c392 <n25q256a_switch_mode+0xba>
		return;
    c390:	bf00      	nop
	}
}
    c392:	371c      	adds	r7, #28
    c394:	46bd      	mov	sp, r7
    c396:	bd90      	pop	{r4, r7, pc}
    c398:	0000c0cd 	.word	0x0000c0cd
    c39c:	0000c209 	.word	0x0000c209
    c3a0:	0000c169 	.word	0x0000c169

0000c3a4 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c3a4:	b580      	push	{r7, lr}
    c3a6:	b086      	sub	sp, #24
    c3a8:	af00      	add	r7, sp, #0
    c3aa:	60f8      	str	r0, [r7, #12]
    c3ac:	60b9      	str	r1, [r7, #8]
    c3ae:	607a      	str	r2, [r7, #4]
    c3b0:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c3b2:	68fb      	ldr	r3, [r7, #12]
    c3b4:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c3b6:	4a0c      	ldr	r2, [pc, #48]	; (c3e8 <n25q256a_construct+0x44>)
    c3b8:	68b9      	ldr	r1, [r7, #8]
    c3ba:	68f8      	ldr	r0, [r7, #12]
    c3bc:	4b0b      	ldr	r3, [pc, #44]	; (c3ec <n25q256a_construct+0x48>)
    c3be:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c3c0:	697b      	ldr	r3, [r7, #20]
    c3c2:	2200      	movs	r2, #0
    c3c4:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c3c6:	697b      	ldr	r3, [r7, #20]
    c3c8:	2200      	movs	r2, #0
    c3ca:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c3cc:	697b      	ldr	r3, [r7, #20]
    c3ce:	687a      	ldr	r2, [r7, #4]
    c3d0:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c3d2:	78fb      	ldrb	r3, [r7, #3]
    c3d4:	4619      	mov	r1, r3
    c3d6:	68f8      	ldr	r0, [r7, #12]
    c3d8:	4b05      	ldr	r3, [pc, #20]	; (c3f0 <n25q256a_construct+0x4c>)
    c3da:	4798      	blx	r3
	return me;
    c3dc:	68fb      	ldr	r3, [r7, #12]
}
    c3de:	4618      	mov	r0, r3
    c3e0:	3718      	adds	r7, #24
    c3e2:	46bd      	mov	sp, r7
    c3e4:	bd80      	pop	{r7, pc}
    c3e6:	bf00      	nop
    c3e8:	0001110c 	.word	0x0001110c
    c3ec:	0000c881 	.word	0x0000c881
    c3f0:	0000c2d9 	.word	0x0000c2d9

0000c3f4 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c3f4:	b580      	push	{r7, lr}
    c3f6:	b08c      	sub	sp, #48	; 0x30
    c3f8:	af00      	add	r7, sp, #0
    c3fa:	60f8      	str	r0, [r7, #12]
    c3fc:	60b9      	str	r1, [r7, #8]
    c3fe:	607a      	str	r2, [r7, #4]
    c400:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c402:	68fb      	ldr	r3, [r7, #12]
    c404:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c406:	68fb      	ldr	r3, [r7, #12]
    c408:	681b      	ldr	r3, [r3, #0]
    c40a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c40c:	f107 0310 	add.w	r3, r7, #16
    c410:	2200      	movs	r2, #0
    c412:	601a      	str	r2, [r3, #0]
    c414:	605a      	str	r2, [r3, #4]
    c416:	609a      	str	r2, [r3, #8]
    c418:	60da      	str	r2, [r3, #12]
    c41a:	611a      	str	r2, [r3, #16]
    c41c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c420:	7b1b      	ldrb	r3, [r3, #12]
    c422:	2b00      	cmp	r3, #0
    c424:	d001      	beq.n	c42a <n25q256a_read+0x36>
    c426:	2206      	movs	r2, #6
    c428:	e000      	b.n	c42c <n25q256a_read+0x38>
    c42a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c42c:	7c3b      	ldrb	r3, [r7, #16]
    c42e:	f362 0302 	bfi	r3, r2, #0, #3
    c432:	743b      	strb	r3, [r7, #16]
    c434:	7c3b      	ldrb	r3, [r7, #16]
    c436:	f043 0310 	orr.w	r3, r3, #16
    c43a:	743b      	strb	r3, [r7, #16]
    c43c:	7c3b      	ldrb	r3, [r7, #16]
    c43e:	f043 0320 	orr.w	r3, r3, #32
    c442:	743b      	strb	r3, [r7, #16]
    c444:	7c3b      	ldrb	r3, [r7, #16]
    c446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c44a:	743b      	strb	r3, [r7, #16]
    c44c:	7c7b      	ldrb	r3, [r7, #17]
    c44e:	2201      	movs	r2, #1
    c450:	f362 1305 	bfi	r3, r2, #4, #2
    c454:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c458:	7b1b      	ldrb	r3, [r3, #12]
    c45a:	2b00      	cmp	r3, #0
    c45c:	d001      	beq.n	c462 <n25q256a_read+0x6e>
    c45e:	220a      	movs	r2, #10
    c460:	e000      	b.n	c464 <n25q256a_read+0x70>
    c462:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c464:	7cbb      	ldrb	r3, [r7, #18]
    c466:	f362 0304 	bfi	r3, r2, #0, #5
    c46a:	74bb      	strb	r3, [r7, #18]
    c46c:	230b      	movs	r3, #11
    c46e:	753b      	strb	r3, [r7, #20]
    c470:	687b      	ldr	r3, [r7, #4]
    c472:	61bb      	str	r3, [r7, #24]
    c474:	683b      	ldr	r3, [r7, #0]
    c476:	61fb      	str	r3, [r7, #28]
    c478:	68bb      	ldr	r3, [r7, #8]
    c47a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c47c:	f107 0310 	add.w	r3, r7, #16
    c480:	4619      	mov	r1, r3
    c482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c484:	4b03      	ldr	r3, [pc, #12]	; (c494 <n25q256a_read+0xa0>)
    c486:	4798      	blx	r3
	return ERR_NONE;
    c488:	2300      	movs	r3, #0
}
    c48a:	4618      	mov	r0, r3
    c48c:	3730      	adds	r7, #48	; 0x30
    c48e:	46bd      	mov	sp, r7
    c490:	bd80      	pop	{r7, pc}
    c492:	bf00      	nop
    c494:	000033e9 	.word	0x000033e9

0000c498 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c498:	b580      	push	{r7, lr}
    c49a:	b08c      	sub	sp, #48	; 0x30
    c49c:	af00      	add	r7, sp, #0
    c49e:	60f8      	str	r0, [r7, #12]
    c4a0:	60b9      	str	r1, [r7, #8]
    c4a2:	607a      	str	r2, [r7, #4]
    c4a4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c4a6:	68fb      	ldr	r3, [r7, #12]
    c4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c4aa:	68fb      	ldr	r3, [r7, #12]
    c4ac:	681b      	ldr	r3, [r3, #0]
    c4ae:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c4b0:	f107 0310 	add.w	r3, r7, #16
    c4b4:	2200      	movs	r2, #0
    c4b6:	601a      	str	r2, [r3, #0]
    c4b8:	605a      	str	r2, [r3, #4]
    c4ba:	609a      	str	r2, [r3, #8]
    c4bc:	60da      	str	r2, [r3, #12]
    c4be:	611a      	str	r2, [r3, #16]
    c4c0:	615a      	str	r2, [r3, #20]
    c4c2:	7c3b      	ldrb	r3, [r7, #16]
    c4c4:	f043 0310 	orr.w	r3, r3, #16
    c4c8:	743b      	strb	r3, [r7, #16]
    c4ca:	7c3b      	ldrb	r3, [r7, #16]
    c4cc:	f043 0320 	orr.w	r3, r3, #32
    c4d0:	743b      	strb	r3, [r7, #16]
    c4d2:	7c3b      	ldrb	r3, [r7, #16]
    c4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c4d8:	743b      	strb	r3, [r7, #16]
    c4da:	7c7b      	ldrb	r3, [r7, #17]
    c4dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c4e0:	747b      	strb	r3, [r7, #17]
    c4e2:	2302      	movs	r3, #2
    c4e4:	753b      	strb	r3, [r7, #20]
    c4e6:	687b      	ldr	r3, [r7, #4]
    c4e8:	61bb      	str	r3, [r7, #24]
    c4ea:	683b      	ldr	r3, [r7, #0]
    c4ec:	61fb      	str	r3, [r7, #28]
    c4ee:	68bb      	ldr	r3, [r7, #8]
    c4f0:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4f4:	7b1b      	ldrb	r3, [r3, #12]
    c4f6:	2b00      	cmp	r3, #0
    c4f8:	d001      	beq.n	c4fe <n25q256a_write+0x66>
    c4fa:	2206      	movs	r2, #6
    c4fc:	e000      	b.n	c500 <n25q256a_write+0x68>
    c4fe:	2200      	movs	r2, #0
    c500:	7c3b      	ldrb	r3, [r7, #16]
    c502:	f362 0302 	bfi	r3, r2, #0, #3
    c506:	743b      	strb	r3, [r7, #16]
	while (length) {
    c508:	e035      	b.n	c576 <n25q256a_write+0xde>
		cmd.address = address;
    c50a:	687b      	ldr	r3, [r7, #4]
    c50c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c50e:	683b      	ldr	r3, [r7, #0]
    c510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c514:	d802      	bhi.n	c51c <n25q256a_write+0x84>
			cmd.buf_len = length;
    c516:	683b      	ldr	r3, [r7, #0]
    c518:	61fb      	str	r3, [r7, #28]
    c51a:	e002      	b.n	c522 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c51c:	f44f 7380 	mov.w	r3, #256	; 0x100
    c520:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c522:	7c3b      	ldrb	r3, [r7, #16]
    c524:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c528:	b2db      	uxtb	r3, r3
    c52a:	2201      	movs	r2, #1
    c52c:	4619      	mov	r1, r3
    c52e:	68f8      	ldr	r0, [r7, #12]
    c530:	4b19      	ldr	r3, [pc, #100]	; (c598 <n25q256a_write+0x100>)
    c532:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c534:	f107 0310 	add.w	r3, r7, #16
    c538:	4619      	mov	r1, r3
    c53a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c53c:	4b17      	ldr	r3, [pc, #92]	; (c59c <n25q256a_write+0x104>)
    c53e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c540:	bf00      	nop
    c542:	7c3b      	ldrb	r3, [r7, #16]
    c544:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c548:	b2db      	uxtb	r3, r3
    c54a:	2270      	movs	r2, #112	; 0x70
    c54c:	4619      	mov	r1, r3
    c54e:	68f8      	ldr	r0, [r7, #12]
    c550:	4b13      	ldr	r3, [pc, #76]	; (c5a0 <n25q256a_write+0x108>)
    c552:	4798      	blx	r3
    c554:	4603      	mov	r3, r0
    c556:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c55a:	2b00      	cmp	r3, #0
    c55c:	d0f1      	beq.n	c542 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c55e:	6a3a      	ldr	r2, [r7, #32]
    c560:	69fb      	ldr	r3, [r7, #28]
    c562:	4413      	add	r3, r2
    c564:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c566:	69fb      	ldr	r3, [r7, #28]
    c568:	683a      	ldr	r2, [r7, #0]
    c56a:	1ad3      	subs	r3, r2, r3
    c56c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c56e:	69fb      	ldr	r3, [r7, #28]
    c570:	687a      	ldr	r2, [r7, #4]
    c572:	4413      	add	r3, r2
    c574:	607b      	str	r3, [r7, #4]
	while (length) {
    c576:	683b      	ldr	r3, [r7, #0]
    c578:	2b00      	cmp	r3, #0
    c57a:	d1c6      	bne.n	c50a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c57e:	7b5b      	ldrb	r3, [r3, #13]
    c580:	2b00      	cmp	r3, #0
    c582:	d003      	beq.n	c58c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c584:	2101      	movs	r1, #1
    c586:	68f8      	ldr	r0, [r7, #12]
    c588:	4b06      	ldr	r3, [pc, #24]	; (c5a4 <n25q256a_write+0x10c>)
    c58a:	4798      	blx	r3
	}
	return ERR_NONE;
    c58c:	2300      	movs	r3, #0
}
    c58e:	4618      	mov	r0, r3
    c590:	3730      	adds	r7, #48	; 0x30
    c592:	46bd      	mov	sp, r7
    c594:	bd80      	pop	{r7, pc}
    c596:	bf00      	nop
    c598:	0000c209 	.word	0x0000c209
    c59c:	000033e9 	.word	0x000033e9
    c5a0:	0000c0cd 	.word	0x0000c0cd
    c5a4:	0000c001 	.word	0x0000c001

0000c5a8 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c5a8:	b580      	push	{r7, lr}
    c5aa:	b090      	sub	sp, #64	; 0x40
    c5ac:	af00      	add	r7, sp, #0
    c5ae:	60f8      	str	r0, [r7, #12]
    c5b0:	60b9      	str	r1, [r7, #8]
    c5b2:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c5b4:	68fb      	ldr	r3, [r7, #12]
    c5b6:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c5b8:	68fb      	ldr	r3, [r7, #12]
    c5ba:	681b      	ldr	r3, [r3, #0]
    c5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c5be:	f107 0314 	add.w	r3, r7, #20
    c5c2:	2200      	movs	r2, #0
    c5c4:	601a      	str	r2, [r3, #0]
    c5c6:	605a      	str	r2, [r3, #4]
    c5c8:	609a      	str	r2, [r3, #8]
    c5ca:	60da      	str	r2, [r3, #12]
    c5cc:	611a      	str	r2, [r3, #16]
    c5ce:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c5d2:	7b1b      	ldrb	r3, [r3, #12]
    c5d4:	2b00      	cmp	r3, #0
    c5d6:	d001      	beq.n	c5dc <n25q256a_erase+0x34>
    c5d8:	2206      	movs	r2, #6
    c5da:	e000      	b.n	c5de <n25q256a_erase+0x36>
    c5dc:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c5de:	7d3b      	ldrb	r3, [r7, #20]
    c5e0:	f362 0302 	bfi	r3, r2, #0, #3
    c5e4:	753b      	strb	r3, [r7, #20]
    c5e6:	7d3b      	ldrb	r3, [r7, #20]
    c5e8:	f043 0310 	orr.w	r3, r3, #16
    c5ec:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c5ee:	687b      	ldr	r3, [r7, #4]
    c5f0:	4a56      	ldr	r2, [pc, #344]	; (c74c <n25q256a_erase+0x1a4>)
    c5f2:	4293      	cmp	r3, r2
    c5f4:	bf94      	ite	ls
    c5f6:	2301      	movls	r3, #1
    c5f8:	2300      	movhi	r3, #0
    c5fa:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c5fc:	7d3b      	ldrb	r3, [r7, #20]
    c5fe:	f362 1345 	bfi	r3, r2, #5, #1
    c602:	753b      	strb	r3, [r7, #20]
    c604:	7d7b      	ldrb	r3, [r7, #21]
    c606:	2202      	movs	r2, #2
    c608:	f362 1305 	bfi	r3, r2, #4, #2
    c60c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c60e:	68bb      	ldr	r3, [r7, #8]
    c610:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c612:	687b      	ldr	r3, [r7, #4]
    c614:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c616:	2300      	movs	r3, #0
    c618:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c61a:	687b      	ldr	r3, [r7, #4]
    c61c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c620:	2b00      	cmp	r3, #0
    c622:	d104      	bne.n	c62e <n25q256a_erase+0x86>
    c624:	68bb      	ldr	r3, [r7, #8]
    c626:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c62a:	2b00      	cmp	r3, #0
    c62c:	d002      	beq.n	c634 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c62e:	f06f 030c 	mvn.w	r3, #12
    c632:	e087      	b.n	c744 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c634:	687b      	ldr	r3, [r7, #4]
    c636:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c63a:	d368      	bcc.n	c70e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c63c:	23c7      	movs	r3, #199	; 0xc7
    c63e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c640:	7d3b      	ldrb	r3, [r7, #20]
    c642:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c646:	b2db      	uxtb	r3, r3
    c648:	2201      	movs	r2, #1
    c64a:	4619      	mov	r1, r3
    c64c:	68f8      	ldr	r0, [r7, #12]
    c64e:	4b40      	ldr	r3, [pc, #256]	; (c750 <n25q256a_erase+0x1a8>)
    c650:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c652:	f107 0314 	add.w	r3, r7, #20
    c656:	4619      	mov	r1, r3
    c658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c65a:	4b3e      	ldr	r3, [pc, #248]	; (c754 <n25q256a_erase+0x1ac>)
    c65c:	4798      	blx	r3
    c65e:	e059      	b.n	c714 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c662:	b29b      	uxth	r3, r3
    c664:	2b00      	cmp	r3, #0
    c666:	d11f      	bne.n	c6a8 <n25q256a_erase+0x100>
    c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c66a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c66e:	d31b      	bcc.n	c6a8 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c672:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c674:	23d8      	movs	r3, #216	; 0xd8
    c676:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c678:	7d3b      	ldrb	r3, [r7, #20]
    c67a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c67e:	b2db      	uxtb	r3, r3
    c680:	2201      	movs	r2, #1
    c682:	4619      	mov	r1, r3
    c684:	68f8      	ldr	r0, [r7, #12]
    c686:	4b32      	ldr	r3, [pc, #200]	; (c750 <n25q256a_erase+0x1a8>)
    c688:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c68a:	f107 0314 	add.w	r3, r7, #20
    c68e:	4619      	mov	r1, r3
    c690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c692:	4b30      	ldr	r3, [pc, #192]	; (c754 <n25q256a_erase+0x1ac>)
    c694:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c698:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c69c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c6a0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c6a4:	63bb      	str	r3, [r7, #56]	; 0x38
    c6a6:	e023      	b.n	c6f0 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c6aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c6ae:	d31b      	bcc.n	c6e8 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6b2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c6b4:	2320      	movs	r3, #32
    c6b6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c6b8:	7d3b      	ldrb	r3, [r7, #20]
    c6ba:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c6be:	b2db      	uxtb	r3, r3
    c6c0:	2201      	movs	r2, #1
    c6c2:	4619      	mov	r1, r3
    c6c4:	68f8      	ldr	r0, [r7, #12]
    c6c6:	4b22      	ldr	r3, [pc, #136]	; (c750 <n25q256a_erase+0x1a8>)
    c6c8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c6ca:	f107 0314 	add.w	r3, r7, #20
    c6ce:	4619      	mov	r1, r3
    c6d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c6d2:	4b20      	ldr	r3, [pc, #128]	; (c754 <n25q256a_erase+0x1ac>)
    c6d4:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c6e0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c6e4:	63bb      	str	r3, [r7, #56]	; 0x38
    c6e6:	e003      	b.n	c6f0 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c6e8:	f06f 030c 	mvn.w	r3, #12
    c6ec:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c6ee:	e011      	b.n	c714 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c6f0:	bf00      	nop
    c6f2:	7d3b      	ldrb	r3, [r7, #20]
    c6f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c6f8:	b2db      	uxtb	r3, r3
    c6fa:	2270      	movs	r2, #112	; 0x70
    c6fc:	4619      	mov	r1, r3
    c6fe:	68f8      	ldr	r0, [r7, #12]
    c700:	4b15      	ldr	r3, [pc, #84]	; (c758 <n25q256a_erase+0x1b0>)
    c702:	4798      	blx	r3
    c704:	4603      	mov	r3, r0
    c706:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c70a:	2b00      	cmp	r3, #0
    c70c:	d0f1      	beq.n	c6f2 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c710:	2b00      	cmp	r3, #0
    c712:	d1a5      	bne.n	c660 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c714:	bf00      	nop
    c716:	7d3b      	ldrb	r3, [r7, #20]
    c718:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c71c:	b2db      	uxtb	r3, r3
    c71e:	2270      	movs	r2, #112	; 0x70
    c720:	4619      	mov	r1, r3
    c722:	68f8      	ldr	r0, [r7, #12]
    c724:	4b0c      	ldr	r3, [pc, #48]	; (c758 <n25q256a_erase+0x1b0>)
    c726:	4798      	blx	r3
    c728:	4603      	mov	r3, r0
    c72a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c72e:	2b00      	cmp	r3, #0
    c730:	d0f1      	beq.n	c716 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c734:	7b5b      	ldrb	r3, [r3, #13]
    c736:	2b00      	cmp	r3, #0
    c738:	d003      	beq.n	c742 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c73a:	2101      	movs	r1, #1
    c73c:	68f8      	ldr	r0, [r7, #12]
    c73e:	4b07      	ldr	r3, [pc, #28]	; (c75c <n25q256a_erase+0x1b4>)
    c740:	4798      	blx	r3
	}
	return rc;
    c742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c744:	4618      	mov	r0, r3
    c746:	3740      	adds	r7, #64	; 0x40
    c748:	46bd      	mov	sp, r7
    c74a:	bd80      	pop	{r7, pc}
    c74c:	001fffff 	.word	0x001fffff
    c750:	0000c209 	.word	0x0000c209
    c754:	000033e9 	.word	0x000033e9
    c758:	0000c0cd 	.word	0x0000c0cd
    c75c:	0000c001 	.word	0x0000c001

0000c760 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c760:	b590      	push	{r4, r7, lr}
    c762:	b085      	sub	sp, #20
    c764:	af00      	add	r7, sp, #0
    c766:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c768:	687b      	ldr	r3, [r7, #4]
    c76a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c76c:	68fb      	ldr	r3, [r7, #12]
    c76e:	7b1b      	ldrb	r3, [r3, #12]
    c770:	2b00      	cmp	r3, #0
    c772:	d001      	beq.n	c778 <n25q256a_enable_xip+0x18>
    c774:	2306      	movs	r3, #6
    c776:	e000      	b.n	c77a <n25q256a_enable_xip+0x1a>
    c778:	2300      	movs	r3, #0
    c77a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c77c:	68fb      	ldr	r3, [r7, #12]
    c77e:	7b5b      	ldrb	r3, [r3, #13]
    c780:	2b00      	cmp	r3, #0
    c782:	d129      	bne.n	c7d8 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c784:	7afb      	ldrb	r3, [r7, #11]
    c786:	2285      	movs	r2, #133	; 0x85
    c788:	4619      	mov	r1, r3
    c78a:	6878      	ldr	r0, [r7, #4]
    c78c:	4b15      	ldr	r3, [pc, #84]	; (c7e4 <n25q256a_enable_xip+0x84>)
    c78e:	4798      	blx	r3
    c790:	4603      	mov	r3, r0
    c792:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c794:	7abb      	ldrb	r3, [r7, #10]
    c796:	f003 0308 	and.w	r3, r3, #8
    c79a:	2b00      	cmp	r3, #0
    c79c:	d015      	beq.n	c7ca <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c79e:	7abb      	ldrb	r3, [r7, #10]
    c7a0:	f023 0308 	bic.w	r3, r3, #8
    c7a4:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c7a6:	7abb      	ldrb	r3, [r7, #10]
    c7a8:	7af9      	ldrb	r1, [r7, #11]
    c7aa:	2281      	movs	r2, #129	; 0x81
    c7ac:	6878      	ldr	r0, [r7, #4]
    c7ae:	4c0e      	ldr	r4, [pc, #56]	; (c7e8 <n25q256a_enable_xip+0x88>)
    c7b0:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c7b2:	bf00      	nop
    c7b4:	7afb      	ldrb	r3, [r7, #11]
    c7b6:	2270      	movs	r2, #112	; 0x70
    c7b8:	4619      	mov	r1, r3
    c7ba:	6878      	ldr	r0, [r7, #4]
    c7bc:	4b09      	ldr	r3, [pc, #36]	; (c7e4 <n25q256a_enable_xip+0x84>)
    c7be:	4798      	blx	r3
    c7c0:	4603      	mov	r3, r0
    c7c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c7c6:	2b00      	cmp	r3, #0
    c7c8:	d0f4      	beq.n	c7b4 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c7ca:	68fb      	ldr	r3, [r7, #12]
    c7cc:	2201      	movs	r2, #1
    c7ce:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c7d0:	2101      	movs	r1, #1
    c7d2:	6878      	ldr	r0, [r7, #4]
    c7d4:	4b05      	ldr	r3, [pc, #20]	; (c7ec <n25q256a_enable_xip+0x8c>)
    c7d6:	4798      	blx	r3
	}
	return ERR_NONE;
    c7d8:	2300      	movs	r3, #0
}
    c7da:	4618      	mov	r0, r3
    c7dc:	3714      	adds	r7, #20
    c7de:	46bd      	mov	sp, r7
    c7e0:	bd90      	pop	{r4, r7, pc}
    c7e2:	bf00      	nop
    c7e4:	0000c0cd 	.word	0x0000c0cd
    c7e8:	0000c169 	.word	0x0000c169
    c7ec:	0000c001 	.word	0x0000c001

0000c7f0 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c7f0:	b580      	push	{r7, lr}
    c7f2:	b086      	sub	sp, #24
    c7f4:	af00      	add	r7, sp, #0
    c7f6:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c7f8:	687b      	ldr	r3, [r7, #4]
    c7fa:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c7fc:	687b      	ldr	r3, [r7, #4]
    c7fe:	681b      	ldr	r3, [r3, #0]
    c800:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c802:	697b      	ldr	r3, [r7, #20]
    c804:	7b1b      	ldrb	r3, [r3, #12]
    c806:	2b00      	cmp	r3, #0
    c808:	d001      	beq.n	c80e <n25q256a_disable_xip+0x1e>
    c80a:	2306      	movs	r3, #6
    c80c:	e000      	b.n	c810 <n25q256a_disable_xip+0x20>
    c80e:	2300      	movs	r3, #0
    c810:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c812:	2100      	movs	r1, #0
    c814:	6878      	ldr	r0, [r7, #4]
    c816:	4b15      	ldr	r3, [pc, #84]	; (c86c <n25q256a_disable_xip+0x7c>)
    c818:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c81a:	7bfb      	ldrb	r3, [r7, #15]
    c81c:	2285      	movs	r2, #133	; 0x85
    c81e:	4619      	mov	r1, r3
    c820:	6878      	ldr	r0, [r7, #4]
    c822:	4b13      	ldr	r3, [pc, #76]	; (c870 <n25q256a_disable_xip+0x80>)
    c824:	4798      	blx	r3
    c826:	4603      	mov	r3, r0
    c828:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c82a:	7bbb      	ldrb	r3, [r7, #14]
    c82c:	f003 0308 	and.w	r3, r3, #8
    c830:	2b00      	cmp	r3, #0
    c832:	d113      	bne.n	c85c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c834:	697b      	ldr	r3, [r7, #20]
    c836:	689b      	ldr	r3, [r3, #8]
    c838:	2b00      	cmp	r3, #0
    c83a:	d00f      	beq.n	c85c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c83c:	693b      	ldr	r3, [r7, #16]
    c83e:	681b      	ldr	r3, [r3, #0]
    c840:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c842:	6938      	ldr	r0, [r7, #16]
    c844:	4b0b      	ldr	r3, [pc, #44]	; (c874 <n25q256a_disable_xip+0x84>)
    c846:	4798      	blx	r3
			n25q->pin_exit_xip();
    c848:	697b      	ldr	r3, [r7, #20]
    c84a:	689b      	ldr	r3, [r3, #8]
    c84c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c84e:	68b9      	ldr	r1, [r7, #8]
    c850:	6938      	ldr	r0, [r7, #16]
    c852:	4b09      	ldr	r3, [pc, #36]	; (c878 <n25q256a_disable_xip+0x88>)
    c854:	4798      	blx	r3
			qspi_sync_enable(descr);
    c856:	6938      	ldr	r0, [r7, #16]
    c858:	4b08      	ldr	r3, [pc, #32]	; (c87c <n25q256a_disable_xip+0x8c>)
    c85a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c85c:	697b      	ldr	r3, [r7, #20]
    c85e:	2200      	movs	r2, #0
    c860:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c862:	2300      	movs	r3, #0
}
    c864:	4618      	mov	r0, r3
    c866:	3718      	adds	r7, #24
    c868:	46bd      	mov	sp, r7
    c86a:	bd80      	pop	{r7, pc}
    c86c:	0000c001 	.word	0x0000c001
    c870:	0000c0cd 	.word	0x0000c0cd
    c874:	000033ad 	.word	0x000033ad
    c878:	00003325 	.word	0x00003325
    c87c:	00003371 	.word	0x00003371

0000c880 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c880:	b480      	push	{r7}
    c882:	b085      	sub	sp, #20
    c884:	af00      	add	r7, sp, #0
    c886:	60f8      	str	r0, [r7, #12]
    c888:	60b9      	str	r1, [r7, #8]
    c88a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c88c:	68fb      	ldr	r3, [r7, #12]
    c88e:	68ba      	ldr	r2, [r7, #8]
    c890:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c892:	68fb      	ldr	r3, [r7, #12]
    c894:	687a      	ldr	r2, [r7, #4]
    c896:	605a      	str	r2, [r3, #4]

	return me;
    c898:	68fb      	ldr	r3, [r7, #12]
}
    c89a:	4618      	mov	r0, r3
    c89c:	3714      	adds	r7, #20
    c89e:	46bd      	mov	sp, r7
    c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8a4:	4770      	bx	lr

0000c8a6 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c8a6:	b480      	push	{r7}
    c8a8:	b083      	sub	sp, #12
    c8aa:	af00      	add	r7, sp, #0
    c8ac:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c8ae:	687b      	ldr	r3, [r7, #4]
    c8b0:	781b      	ldrb	r3, [r3, #0]
    c8b2:	b29a      	uxth	r2, r3
    c8b4:	687b      	ldr	r3, [r7, #4]
    c8b6:	3301      	adds	r3, #1
    c8b8:	781b      	ldrb	r3, [r3, #0]
    c8ba:	b29b      	uxth	r3, r3
    c8bc:	021b      	lsls	r3, r3, #8
    c8be:	b29b      	uxth	r3, r3
    c8c0:	4413      	add	r3, r2
    c8c2:	b29b      	uxth	r3, r3
}
    c8c4:	4618      	mov	r0, r3
    c8c6:	370c      	adds	r7, #12
    c8c8:	46bd      	mov	sp, r7
    c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8ce:	4770      	bx	lr

0000c8d0 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c8d0:	b480      	push	{r7}
    c8d2:	b083      	sub	sp, #12
    c8d4:	af00      	add	r7, sp, #0
    c8d6:	6078      	str	r0, [r7, #4]
	return desc[0];
    c8d8:	687b      	ldr	r3, [r7, #4]
    c8da:	781b      	ldrb	r3, [r3, #0]
}
    c8dc:	4618      	mov	r0, r3
    c8de:	370c      	adds	r7, #12
    c8e0:	46bd      	mov	sp, r7
    c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8e6:	4770      	bx	lr

0000c8e8 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c8e8:	b580      	push	{r7, lr}
    c8ea:	b082      	sub	sp, #8
    c8ec:	af00      	add	r7, sp, #0
    c8ee:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c8f0:	6878      	ldr	r0, [r7, #4]
    c8f2:	4b05      	ldr	r3, [pc, #20]	; (c908 <usb_desc_next+0x20>)
    c8f4:	4798      	blx	r3
    c8f6:	4603      	mov	r3, r0
    c8f8:	461a      	mov	r2, r3
    c8fa:	687b      	ldr	r3, [r7, #4]
    c8fc:	4413      	add	r3, r2
}
    c8fe:	4618      	mov	r0, r3
    c900:	3708      	adds	r7, #8
    c902:	46bd      	mov	sp, r7
    c904:	bd80      	pop	{r7, pc}
    c906:	bf00      	nop
    c908:	0000c8d1 	.word	0x0000c8d1

0000c90c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c90c:	b580      	push	{r7, lr}
    c90e:	b08c      	sub	sp, #48	; 0x30
    c910:	af00      	add	r7, sp, #0
    c912:	6078      	str	r0, [r7, #4]
    c914:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c916:	687b      	ldr	r3, [r7, #4]
    c918:	689b      	ldr	r3, [r3, #8]
    c91a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c91c:	683b      	ldr	r3, [r7, #0]
    c91e:	681b      	ldr	r3, [r3, #0]
    c920:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c922:	2300      	movs	r3, #0
    c924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c928:	e08f      	b.n	ca4a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c92c:	2b00      	cmp	r3, #0
    c92e:	d102      	bne.n	c936 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c930:	f06f 0309 	mvn.w	r3, #9
    c934:	e092      	b.n	ca5c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c938:	789b      	ldrb	r3, [r3, #2]
    c93a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c93e:	795b      	ldrb	r3, [r3, #5]
    c940:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c942:	7c7b      	ldrb	r3, [r7, #17]
    c944:	2b02      	cmp	r3, #2
    c946:	d002      	beq.n	c94e <cdcdf_acm_enable+0x42>
    c948:	7c7b      	ldrb	r3, [r7, #17]
    c94a:	2b0a      	cmp	r3, #10
    c94c:	d121      	bne.n	c992 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c94e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c952:	6a3a      	ldr	r2, [r7, #32]
    c954:	5cd2      	ldrb	r2, [r2, r3]
    c956:	7bbb      	ldrb	r3, [r7, #14]
    c958:	429a      	cmp	r2, r3
    c95a:	d102      	bne.n	c962 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c95c:	f06f 0311 	mvn.w	r3, #17
    c960:	e07c      	b.n	ca5c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c966:	6a3a      	ldr	r2, [r7, #32]
    c968:	5cd3      	ldrb	r3, [r2, r3]
    c96a:	2bff      	cmp	r3, #255	; 0xff
    c96c:	d002      	beq.n	c974 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c96e:	f06f 031b 	mvn.w	r3, #27
    c972:	e073      	b.n	ca5c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c978:	7bb9      	ldrb	r1, [r7, #14]
    c97a:	6a3a      	ldr	r2, [r7, #32]
    c97c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c97e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c980:	683b      	ldr	r3, [r7, #0]
    c982:	685b      	ldr	r3, [r3, #4]
    c984:	2205      	movs	r2, #5
    c986:	4619      	mov	r1, r3
    c988:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c98a:	4b36      	ldr	r3, [pc, #216]	; (ca64 <cdcdf_acm_enable+0x158>)
    c98c:	4798      	blx	r3
    c98e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c990:	e047      	b.n	ca22 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c992:	f06f 0309 	mvn.w	r3, #9
    c996:	e061      	b.n	ca5c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c99a:	789b      	ldrb	r3, [r3, #2]
    c99c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9a0:	78db      	ldrb	r3, [r3, #3]
    c9a2:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9a6:	3304      	adds	r3, #4
    c9a8:	4618      	mov	r0, r3
    c9aa:	4b2f      	ldr	r3, [pc, #188]	; (ca68 <cdcdf_acm_enable+0x15c>)
    c9ac:	4798      	blx	r3
    c9ae:	4603      	mov	r3, r0
    c9b0:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c9b2:	7ebb      	ldrb	r3, [r7, #26]
    c9b4:	7ef9      	ldrb	r1, [r7, #27]
    c9b6:	8bba      	ldrh	r2, [r7, #28]
    c9b8:	4618      	mov	r0, r3
    c9ba:	4b2c      	ldr	r3, [pc, #176]	; (ca6c <cdcdf_acm_enable+0x160>)
    c9bc:	4798      	blx	r3
    c9be:	4603      	mov	r3, r0
    c9c0:	2b00      	cmp	r3, #0
    c9c2:	d002      	beq.n	c9ca <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c9c4:	f06f 0313 	mvn.w	r3, #19
    c9c8:	e048      	b.n	ca5c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c9ca:	7ebb      	ldrb	r3, [r7, #26]
    c9cc:	b25b      	sxtb	r3, r3
    c9ce:	2b00      	cmp	r3, #0
    c9d0:	da0f      	bge.n	c9f2 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c9d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c9d6:	7eb9      	ldrb	r1, [r7, #26]
    c9d8:	6a3a      	ldr	r2, [r7, #32]
    c9da:	4413      	add	r3, r2
    c9dc:	460a      	mov	r2, r1
    c9de:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c9e4:	6a3a      	ldr	r2, [r7, #32]
    c9e6:	4413      	add	r3, r2
    c9e8:	789b      	ldrb	r3, [r3, #2]
    c9ea:	4618      	mov	r0, r3
    c9ec:	4b20      	ldr	r3, [pc, #128]	; (ca70 <cdcdf_acm_enable+0x164>)
    c9ee:	4798      	blx	r3
    c9f0:	e007      	b.n	ca02 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c9f2:	7eba      	ldrb	r2, [r7, #26]
    c9f4:	6a3b      	ldr	r3, [r7, #32]
    c9f6:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c9f8:	6a3b      	ldr	r3, [r7, #32]
    c9fa:	791b      	ldrb	r3, [r3, #4]
    c9fc:	4618      	mov	r0, r3
    c9fe:	4b1c      	ldr	r3, [pc, #112]	; (ca70 <cdcdf_acm_enable+0x164>)
    ca00:	4798      	blx	r3
			}
			desc->sod = ep;
    ca02:	683b      	ldr	r3, [r7, #0]
    ca04:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ca06:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ca08:	683b      	ldr	r3, [r7, #0]
    ca0a:	681b      	ldr	r3, [r3, #0]
    ca0c:	4618      	mov	r0, r3
    ca0e:	4b19      	ldr	r3, [pc, #100]	; (ca74 <cdcdf_acm_enable+0x168>)
    ca10:	4798      	blx	r3
    ca12:	4602      	mov	r2, r0
    ca14:	683b      	ldr	r3, [r7, #0]
    ca16:	685b      	ldr	r3, [r3, #4]
    ca18:	4619      	mov	r1, r3
    ca1a:	4610      	mov	r0, r2
    ca1c:	4b16      	ldr	r3, [pc, #88]	; (ca78 <cdcdf_acm_enable+0x16c>)
    ca1e:	4798      	blx	r3
    ca20:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    ca22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ca24:	2b00      	cmp	r3, #0
    ca26:	d1b7      	bne.n	c998 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    ca28:	683b      	ldr	r3, [r7, #0]
    ca2a:	681b      	ldr	r3, [r3, #0]
    ca2c:	4618      	mov	r0, r3
    ca2e:	4b11      	ldr	r3, [pc, #68]	; (ca74 <cdcdf_acm_enable+0x168>)
    ca30:	4798      	blx	r3
    ca32:	683b      	ldr	r3, [r7, #0]
    ca34:	685b      	ldr	r3, [r3, #4]
    ca36:	2204      	movs	r2, #4
    ca38:	4619      	mov	r1, r3
    ca3a:	4b0a      	ldr	r3, [pc, #40]	; (ca64 <cdcdf_acm_enable+0x158>)
    ca3c:	4798      	blx	r3
    ca3e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    ca40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ca44:	3301      	adds	r3, #1
    ca46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    ca4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ca4e:	2b01      	cmp	r3, #1
    ca50:	f67f af6b 	bls.w	c92a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    ca54:	4b09      	ldr	r3, [pc, #36]	; (ca7c <cdcdf_acm_enable+0x170>)
    ca56:	2201      	movs	r2, #1
    ca58:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    ca5a:	2300      	movs	r3, #0
}
    ca5c:	4618      	mov	r0, r3
    ca5e:	3730      	adds	r7, #48	; 0x30
    ca60:	46bd      	mov	sp, r7
    ca62:	bd80      	pop	{r7, pc}
    ca64:	0000dccd 	.word	0x0000dccd
    ca68:	0000c8a7 	.word	0x0000c8a7
    ca6c:	00003f9d 	.word	0x00003f9d
    ca70:	00004089 	.word	0x00004089
    ca74:	0000c8e9 	.word	0x0000c8e9
    ca78:	0000dd29 	.word	0x0000dd29
    ca7c:	2000128c 	.word	0x2000128c

0000ca80 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    ca80:	b580      	push	{r7, lr}
    ca82:	b088      	sub	sp, #32
    ca84:	af00      	add	r7, sp, #0
    ca86:	6078      	str	r0, [r7, #4]
    ca88:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    ca8a:	687b      	ldr	r3, [r7, #4]
    ca8c:	689b      	ldr	r3, [r3, #8]
    ca8e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    ca90:	683b      	ldr	r3, [r7, #0]
    ca92:	2b00      	cmp	r3, #0
    ca94:	d00c      	beq.n	cab0 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    ca96:	683b      	ldr	r3, [r7, #0]
    ca98:	681b      	ldr	r3, [r3, #0]
    ca9a:	795b      	ldrb	r3, [r3, #5]
    ca9c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    ca9e:	7c7b      	ldrb	r3, [r7, #17]
    caa0:	2b02      	cmp	r3, #2
    caa2:	d005      	beq.n	cab0 <cdcdf_acm_disable+0x30>
    caa4:	7c7b      	ldrb	r3, [r7, #17]
    caa6:	2b0a      	cmp	r3, #10
    caa8:	d002      	beq.n	cab0 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    caaa:	f06f 0309 	mvn.w	r3, #9
    caae:	e035      	b.n	cb1c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    cab0:	2300      	movs	r3, #0
    cab2:	77fb      	strb	r3, [r7, #31]
    cab4:	e01f      	b.n	caf6 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    cab6:	7ffb      	ldrb	r3, [r7, #31]
    cab8:	69ba      	ldr	r2, [r7, #24]
    caba:	5cd3      	ldrb	r3, [r2, r3]
    cabc:	2bff      	cmp	r3, #255	; 0xff
    cabe:	d016      	beq.n	caee <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    cac0:	7ffb      	ldrb	r3, [r7, #31]
    cac2:	69ba      	ldr	r2, [r7, #24]
    cac4:	21ff      	movs	r1, #255	; 0xff
    cac6:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    cac8:	7ffb      	ldrb	r3, [r7, #31]
    caca:	69ba      	ldr	r2, [r7, #24]
    cacc:	4413      	add	r3, r2
    cace:	789b      	ldrb	r3, [r3, #2]
    cad0:	2bff      	cmp	r3, #255	; 0xff
    cad2:	d00d      	beq.n	caf0 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    cad4:	7ffb      	ldrb	r3, [r7, #31]
    cad6:	69ba      	ldr	r2, [r7, #24]
    cad8:	4413      	add	r3, r2
    cada:	789b      	ldrb	r3, [r3, #2]
    cadc:	4618      	mov	r0, r3
    cade:	4b11      	ldr	r3, [pc, #68]	; (cb24 <cdcdf_acm_disable+0xa4>)
    cae0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    cae2:	7ffb      	ldrb	r3, [r7, #31]
    cae4:	69ba      	ldr	r2, [r7, #24]
    cae6:	4413      	add	r3, r2
    cae8:	22ff      	movs	r2, #255	; 0xff
    caea:	709a      	strb	r2, [r3, #2]
    caec:	e000      	b.n	caf0 <cdcdf_acm_disable+0x70>
			continue;
    caee:	bf00      	nop
	for (i = 0; i < 2; i++) {
    caf0:	7ffb      	ldrb	r3, [r7, #31]
    caf2:	3301      	adds	r3, #1
    caf4:	77fb      	strb	r3, [r7, #31]
    caf6:	7ffb      	ldrb	r3, [r7, #31]
    caf8:	2b01      	cmp	r3, #1
    cafa:	d9dc      	bls.n	cab6 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    cafc:	69bb      	ldr	r3, [r7, #24]
    cafe:	791b      	ldrb	r3, [r3, #4]
    cb00:	2bff      	cmp	r3, #255	; 0xff
    cb02:	d007      	beq.n	cb14 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    cb04:	69bb      	ldr	r3, [r7, #24]
    cb06:	791b      	ldrb	r3, [r3, #4]
    cb08:	4618      	mov	r0, r3
    cb0a:	4b06      	ldr	r3, [pc, #24]	; (cb24 <cdcdf_acm_disable+0xa4>)
    cb0c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    cb0e:	69bb      	ldr	r3, [r7, #24]
    cb10:	22ff      	movs	r2, #255	; 0xff
    cb12:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    cb14:	4b04      	ldr	r3, [pc, #16]	; (cb28 <cdcdf_acm_disable+0xa8>)
    cb16:	2200      	movs	r2, #0
    cb18:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    cb1a:	2300      	movs	r3, #0
}
    cb1c:	4618      	mov	r0, r3
    cb1e:	3720      	adds	r7, #32
    cb20:	46bd      	mov	sp, r7
    cb22:	bd80      	pop	{r7, pc}
    cb24:	00004039 	.word	0x00004039
    cb28:	2000128c 	.word	0x2000128c

0000cb2c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    cb2c:	b580      	push	{r7, lr}
    cb2e:	b084      	sub	sp, #16
    cb30:	af00      	add	r7, sp, #0
    cb32:	60f8      	str	r0, [r7, #12]
    cb34:	460b      	mov	r3, r1
    cb36:	607a      	str	r2, [r7, #4]
    cb38:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    cb3a:	7afb      	ldrb	r3, [r7, #11]
    cb3c:	2b01      	cmp	r3, #1
    cb3e:	d009      	beq.n	cb54 <cdcdf_acm_ctrl+0x28>
    cb40:	2b02      	cmp	r3, #2
    cb42:	d00d      	beq.n	cb60 <cdcdf_acm_ctrl+0x34>
    cb44:	2b00      	cmp	r3, #0
    cb46:	d10e      	bne.n	cb66 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    cb48:	6879      	ldr	r1, [r7, #4]
    cb4a:	68f8      	ldr	r0, [r7, #12]
    cb4c:	4b09      	ldr	r3, [pc, #36]	; (cb74 <cdcdf_acm_ctrl+0x48>)
    cb4e:	4798      	blx	r3
    cb50:	4603      	mov	r3, r0
    cb52:	e00a      	b.n	cb6a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    cb54:	6879      	ldr	r1, [r7, #4]
    cb56:	68f8      	ldr	r0, [r7, #12]
    cb58:	4b07      	ldr	r3, [pc, #28]	; (cb78 <cdcdf_acm_ctrl+0x4c>)
    cb5a:	4798      	blx	r3
    cb5c:	4603      	mov	r3, r0
    cb5e:	e004      	b.n	cb6a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    cb60:	f06f 031a 	mvn.w	r3, #26
    cb64:	e001      	b.n	cb6a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    cb66:	f06f 030c 	mvn.w	r3, #12
	}
}
    cb6a:	4618      	mov	r0, r3
    cb6c:	3710      	adds	r7, #16
    cb6e:	46bd      	mov	sp, r7
    cb70:	bd80      	pop	{r7, pc}
    cb72:	bf00      	nop
    cb74:	0000c90d 	.word	0x0000c90d
    cb78:	0000ca81 	.word	0x0000ca81

0000cb7c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cb7c:	b590      	push	{r4, r7, lr}
    cb7e:	b087      	sub	sp, #28
    cb80:	af00      	add	r7, sp, #0
    cb82:	4603      	mov	r3, r0
    cb84:	6039      	str	r1, [r7, #0]
    cb86:	71fb      	strb	r3, [r7, #7]
    cb88:	4613      	mov	r3, r2
    cb8a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    cb8c:	683b      	ldr	r3, [r7, #0]
    cb8e:	799a      	ldrb	r2, [r3, #6]
    cb90:	79db      	ldrb	r3, [r3, #7]
    cb92:	021b      	lsls	r3, r3, #8
    cb94:	4313      	orrs	r3, r2
    cb96:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    cb98:	4b2b      	ldr	r3, [pc, #172]	; (cc48 <cdcdf_acm_set_req+0xcc>)
    cb9a:	4798      	blx	r3
    cb9c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    cb9e:	683b      	ldr	r3, [r7, #0]
    cba0:	785b      	ldrb	r3, [r3, #1]
    cba2:	2b20      	cmp	r3, #32
    cba4:	d002      	beq.n	cbac <cdcdf_acm_set_req+0x30>
    cba6:	2b22      	cmp	r3, #34	; 0x22
    cba8:	d034      	beq.n	cc14 <cdcdf_acm_set_req+0x98>
    cbaa:	e046      	b.n	cc3a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cbac:	8afb      	ldrh	r3, [r7, #22]
    cbae:	2b07      	cmp	r3, #7
    cbb0:	d002      	beq.n	cbb8 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    cbb2:	f04f 33ff 	mov.w	r3, #4294967295
    cbb6:	e042      	b.n	cc3e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    cbb8:	79bb      	ldrb	r3, [r7, #6]
    cbba:	2b00      	cmp	r3, #0
    cbbc:	d107      	bne.n	cbce <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    cbbe:	8afa      	ldrh	r2, [r7, #22]
    cbc0:	79f8      	ldrb	r0, [r7, #7]
    cbc2:	2300      	movs	r3, #0
    cbc4:	6939      	ldr	r1, [r7, #16]
    cbc6:	4c21      	ldr	r4, [pc, #132]	; (cc4c <cdcdf_acm_set_req+0xd0>)
    cbc8:	47a0      	blx	r4
    cbca:	4603      	mov	r3, r0
    cbcc:	e037      	b.n	cc3e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    cbce:	693a      	ldr	r2, [r7, #16]
    cbd0:	f107 0308 	add.w	r3, r7, #8
    cbd4:	6810      	ldr	r0, [r2, #0]
    cbd6:	6018      	str	r0, [r3, #0]
    cbd8:	8891      	ldrh	r1, [r2, #4]
    cbda:	7992      	ldrb	r2, [r2, #6]
    cbdc:	8099      	strh	r1, [r3, #4]
    cbde:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    cbe0:	4b1b      	ldr	r3, [pc, #108]	; (cc50 <cdcdf_acm_set_req+0xd4>)
    cbe2:	681b      	ldr	r3, [r3, #0]
    cbe4:	2b00      	cmp	r3, #0
    cbe6:	d008      	beq.n	cbfa <cdcdf_acm_set_req+0x7e>
    cbe8:	4b19      	ldr	r3, [pc, #100]	; (cc50 <cdcdf_acm_set_req+0xd4>)
    cbea:	681b      	ldr	r3, [r3, #0]
    cbec:	f107 0208 	add.w	r2, r7, #8
    cbf0:	4610      	mov	r0, r2
    cbf2:	4798      	blx	r3
    cbf4:	4603      	mov	r3, r0
    cbf6:	2b00      	cmp	r3, #0
    cbf8:	d00a      	beq.n	cc10 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    cbfa:	4b16      	ldr	r3, [pc, #88]	; (cc54 <cdcdf_acm_set_req+0xd8>)
    cbfc:	f107 0208 	add.w	r2, r7, #8
    cc00:	e892 0003 	ldmia.w	r2, {r0, r1}
    cc04:	6018      	str	r0, [r3, #0]
    cc06:	3304      	adds	r3, #4
    cc08:	8019      	strh	r1, [r3, #0]
    cc0a:	3302      	adds	r3, #2
    cc0c:	0c0a      	lsrs	r2, r1, #16
    cc0e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    cc10:	2300      	movs	r3, #0
    cc12:	e014      	b.n	cc3e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    cc14:	2300      	movs	r3, #0
    cc16:	2200      	movs	r2, #0
    cc18:	2100      	movs	r1, #0
    cc1a:	2000      	movs	r0, #0
    cc1c:	4c0b      	ldr	r4, [pc, #44]	; (cc4c <cdcdf_acm_set_req+0xd0>)
    cc1e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    cc20:	4b0d      	ldr	r3, [pc, #52]	; (cc58 <cdcdf_acm_set_req+0xdc>)
    cc22:	681b      	ldr	r3, [r3, #0]
    cc24:	2b00      	cmp	r3, #0
    cc26:	d006      	beq.n	cc36 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    cc28:	4b0b      	ldr	r3, [pc, #44]	; (cc58 <cdcdf_acm_set_req+0xdc>)
    cc2a:	681b      	ldr	r3, [r3, #0]
    cc2c:	683a      	ldr	r2, [r7, #0]
    cc2e:	8852      	ldrh	r2, [r2, #2]
    cc30:	b292      	uxth	r2, r2
    cc32:	4610      	mov	r0, r2
    cc34:	4798      	blx	r3
		}
		return ERR_NONE;
    cc36:	2300      	movs	r3, #0
    cc38:	e001      	b.n	cc3e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    cc3a:	f06f 030c 	mvn.w	r3, #12
	}
}
    cc3e:	4618      	mov	r0, r3
    cc40:	371c      	adds	r7, #28
    cc42:	46bd      	mov	sp, r7
    cc44:	bd90      	pop	{r4, r7, pc}
    cc46:	bf00      	nop
    cc48:	0000dbc9 	.word	0x0000dbc9
    cc4c:	0000da3d 	.word	0x0000da3d
    cc50:	200012a0 	.word	0x200012a0
    cc54:	20001294 	.word	0x20001294
    cc58:	2000129c 	.word	0x2000129c

0000cc5c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cc5c:	b590      	push	{r4, r7, lr}
    cc5e:	b085      	sub	sp, #20
    cc60:	af00      	add	r7, sp, #0
    cc62:	4603      	mov	r3, r0
    cc64:	6039      	str	r1, [r7, #0]
    cc66:	71fb      	strb	r3, [r7, #7]
    cc68:	4613      	mov	r3, r2
    cc6a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    cc6c:	683b      	ldr	r3, [r7, #0]
    cc6e:	799a      	ldrb	r2, [r3, #6]
    cc70:	79db      	ldrb	r3, [r3, #7]
    cc72:	021b      	lsls	r3, r3, #8
    cc74:	4313      	orrs	r3, r2
    cc76:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    cc78:	79bb      	ldrb	r3, [r7, #6]
    cc7a:	2b01      	cmp	r3, #1
    cc7c:	d101      	bne.n	cc82 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    cc7e:	2300      	movs	r3, #0
    cc80:	e013      	b.n	ccaa <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    cc82:	683b      	ldr	r3, [r7, #0]
    cc84:	785b      	ldrb	r3, [r3, #1]
    cc86:	2b21      	cmp	r3, #33	; 0x21
    cc88:	d10d      	bne.n	cca6 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cc8a:	89fb      	ldrh	r3, [r7, #14]
    cc8c:	2b07      	cmp	r3, #7
    cc8e:	d002      	beq.n	cc96 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    cc90:	f04f 33ff 	mov.w	r3, #4294967295
    cc94:	e009      	b.n	ccaa <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    cc96:	89fa      	ldrh	r2, [r7, #14]
    cc98:	79f8      	ldrb	r0, [r7, #7]
    cc9a:	2300      	movs	r3, #0
    cc9c:	4905      	ldr	r1, [pc, #20]	; (ccb4 <cdcdf_acm_get_req+0x58>)
    cc9e:	4c06      	ldr	r4, [pc, #24]	; (ccb8 <cdcdf_acm_get_req+0x5c>)
    cca0:	47a0      	blx	r4
    cca2:	4603      	mov	r3, r0
    cca4:	e001      	b.n	ccaa <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    cca6:	f06f 030c 	mvn.w	r3, #12
	}
}
    ccaa:	4618      	mov	r0, r3
    ccac:	3714      	adds	r7, #20
    ccae:	46bd      	mov	sp, r7
    ccb0:	bd90      	pop	{r4, r7, pc}
    ccb2:	bf00      	nop
    ccb4:	20001294 	.word	0x20001294
    ccb8:	0000da3d 	.word	0x0000da3d

0000ccbc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ccbc:	b580      	push	{r7, lr}
    ccbe:	b082      	sub	sp, #8
    ccc0:	af00      	add	r7, sp, #0
    ccc2:	4603      	mov	r3, r0
    ccc4:	6039      	str	r1, [r7, #0]
    ccc6:	71fb      	strb	r3, [r7, #7]
    ccc8:	4613      	mov	r3, r2
    ccca:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    cccc:	683b      	ldr	r3, [r7, #0]
    ccce:	781b      	ldrb	r3, [r3, #0]
    ccd0:	095b      	lsrs	r3, r3, #5
    ccd2:	b2db      	uxtb	r3, r3
    ccd4:	f003 0303 	and.w	r3, r3, #3
    ccd8:	2b01      	cmp	r3, #1
    ccda:	d002      	beq.n	cce2 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    ccdc:	f06f 0309 	mvn.w	r3, #9
    cce0:	e026      	b.n	cd30 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    cce2:	683b      	ldr	r3, [r7, #0]
    cce4:	889b      	ldrh	r3, [r3, #4]
    cce6:	b29a      	uxth	r2, r3
    cce8:	4b13      	ldr	r3, [pc, #76]	; (cd38 <cdcdf_acm_req+0x7c>)
    ccea:	781b      	ldrb	r3, [r3, #0]
    ccec:	b29b      	uxth	r3, r3
    ccee:	429a      	cmp	r2, r3
    ccf0:	d007      	beq.n	cd02 <cdcdf_acm_req+0x46>
    ccf2:	683b      	ldr	r3, [r7, #0]
    ccf4:	889b      	ldrh	r3, [r3, #4]
    ccf6:	b29a      	uxth	r2, r3
    ccf8:	4b0f      	ldr	r3, [pc, #60]	; (cd38 <cdcdf_acm_req+0x7c>)
    ccfa:	785b      	ldrb	r3, [r3, #1]
    ccfc:	b29b      	uxth	r3, r3
    ccfe:	429a      	cmp	r2, r3
    cd00:	d114      	bne.n	cd2c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    cd02:	683b      	ldr	r3, [r7, #0]
    cd04:	781b      	ldrb	r3, [r3, #0]
    cd06:	b25b      	sxtb	r3, r3
    cd08:	2b00      	cmp	r3, #0
    cd0a:	da07      	bge.n	cd1c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    cd0c:	79ba      	ldrb	r2, [r7, #6]
    cd0e:	79fb      	ldrb	r3, [r7, #7]
    cd10:	6839      	ldr	r1, [r7, #0]
    cd12:	4618      	mov	r0, r3
    cd14:	4b09      	ldr	r3, [pc, #36]	; (cd3c <cdcdf_acm_req+0x80>)
    cd16:	4798      	blx	r3
    cd18:	4603      	mov	r3, r0
    cd1a:	e009      	b.n	cd30 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    cd1c:	79ba      	ldrb	r2, [r7, #6]
    cd1e:	79fb      	ldrb	r3, [r7, #7]
    cd20:	6839      	ldr	r1, [r7, #0]
    cd22:	4618      	mov	r0, r3
    cd24:	4b06      	ldr	r3, [pc, #24]	; (cd40 <cdcdf_acm_req+0x84>)
    cd26:	4798      	blx	r3
    cd28:	4603      	mov	r3, r0
    cd2a:	e001      	b.n	cd30 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    cd2c:	f06f 0309 	mvn.w	r3, #9
	}
}
    cd30:	4618      	mov	r0, r3
    cd32:	3708      	adds	r7, #8
    cd34:	46bd      	mov	sp, r7
    cd36:	bd80      	pop	{r7, pc}
    cd38:	2000128c 	.word	0x2000128c
    cd3c:	0000cc5d 	.word	0x0000cc5d
    cd40:	0000cb7d 	.word	0x0000cb7d

0000cd44 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    cd44:	b580      	push	{r7, lr}
    cd46:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    cd48:	4b0b      	ldr	r3, [pc, #44]	; (cd78 <cdcdf_acm_init+0x34>)
    cd4a:	4798      	blx	r3
    cd4c:	4603      	mov	r3, r0
    cd4e:	2b01      	cmp	r3, #1
    cd50:	d902      	bls.n	cd58 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    cd52:	f06f 0310 	mvn.w	r3, #16
    cd56:	e00d      	b.n	cd74 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    cd58:	4b08      	ldr	r3, [pc, #32]	; (cd7c <cdcdf_acm_init+0x38>)
    cd5a:	4a09      	ldr	r2, [pc, #36]	; (cd80 <cdcdf_acm_init+0x3c>)
    cd5c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    cd5e:	4b07      	ldr	r3, [pc, #28]	; (cd7c <cdcdf_acm_init+0x38>)
    cd60:	4a08      	ldr	r2, [pc, #32]	; (cd84 <cdcdf_acm_init+0x40>)
    cd62:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    cd64:	4805      	ldr	r0, [pc, #20]	; (cd7c <cdcdf_acm_init+0x38>)
    cd66:	4b08      	ldr	r3, [pc, #32]	; (cd88 <cdcdf_acm_init+0x44>)
    cd68:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    cd6a:	4908      	ldr	r1, [pc, #32]	; (cd8c <cdcdf_acm_init+0x48>)
    cd6c:	2001      	movs	r0, #1
    cd6e:	4b08      	ldr	r3, [pc, #32]	; (cd90 <cdcdf_acm_init+0x4c>)
    cd70:	4798      	blx	r3
	return ERR_NONE;
    cd72:	2300      	movs	r3, #0
}
    cd74:	4618      	mov	r0, r3
    cd76:	bd80      	pop	{r7, pc}
    cd78:	0000dbe1 	.word	0x0000dbe1
    cd7c:	20001280 	.word	0x20001280
    cd80:	0000cb2d 	.word	0x0000cb2d
    cd84:	2000128c 	.word	0x2000128c
    cd88:	0000db49 	.word	0x0000db49
    cd8c:	20000208 	.word	0x20000208
    cd90:	0000da79 	.word	0x0000da79

0000cd94 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    cd94:	b590      	push	{r4, r7, lr}
    cd96:	b083      	sub	sp, #12
    cd98:	af00      	add	r7, sp, #0
    cd9a:	6078      	str	r0, [r7, #4]
    cd9c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cd9e:	4b0b      	ldr	r3, [pc, #44]	; (cdcc <cdcdf_acm_read+0x38>)
    cda0:	4798      	blx	r3
    cda2:	4603      	mov	r3, r0
    cda4:	f083 0301 	eor.w	r3, r3, #1
    cda8:	b2db      	uxtb	r3, r3
    cdaa:	2b00      	cmp	r3, #0
    cdac:	d002      	beq.n	cdb4 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    cdae:	f06f 0310 	mvn.w	r3, #16
    cdb2:	e007      	b.n	cdc4 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    cdb4:	4b06      	ldr	r3, [pc, #24]	; (cdd0 <cdcdf_acm_read+0x3c>)
    cdb6:	7918      	ldrb	r0, [r3, #4]
    cdb8:	2300      	movs	r3, #0
    cdba:	683a      	ldr	r2, [r7, #0]
    cdbc:	6879      	ldr	r1, [r7, #4]
    cdbe:	4c05      	ldr	r4, [pc, #20]	; (cdd4 <cdcdf_acm_read+0x40>)
    cdc0:	47a0      	blx	r4
    cdc2:	4603      	mov	r3, r0
}
    cdc4:	4618      	mov	r0, r3
    cdc6:	370c      	adds	r7, #12
    cdc8:	46bd      	mov	sp, r7
    cdca:	bd90      	pop	{r4, r7, pc}
    cdcc:	0000ceb9 	.word	0x0000ceb9
    cdd0:	2000128c 	.word	0x2000128c
    cdd4:	0000da3d 	.word	0x0000da3d

0000cdd8 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    cdd8:	b590      	push	{r4, r7, lr}
    cdda:	b083      	sub	sp, #12
    cddc:	af00      	add	r7, sp, #0
    cdde:	6078      	str	r0, [r7, #4]
    cde0:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cde2:	4b0b      	ldr	r3, [pc, #44]	; (ce10 <cdcdf_acm_write+0x38>)
    cde4:	4798      	blx	r3
    cde6:	4603      	mov	r3, r0
    cde8:	f083 0301 	eor.w	r3, r3, #1
    cdec:	b2db      	uxtb	r3, r3
    cdee:	2b00      	cmp	r3, #0
    cdf0:	d002      	beq.n	cdf8 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    cdf2:	f06f 0310 	mvn.w	r3, #16
    cdf6:	e007      	b.n	ce08 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    cdf8:	4b06      	ldr	r3, [pc, #24]	; (ce14 <cdcdf_acm_write+0x3c>)
    cdfa:	78d8      	ldrb	r0, [r3, #3]
    cdfc:	2301      	movs	r3, #1
    cdfe:	683a      	ldr	r2, [r7, #0]
    ce00:	6879      	ldr	r1, [r7, #4]
    ce02:	4c05      	ldr	r4, [pc, #20]	; (ce18 <cdcdf_acm_write+0x40>)
    ce04:	47a0      	blx	r4
    ce06:	4603      	mov	r3, r0
}
    ce08:	4618      	mov	r0, r3
    ce0a:	370c      	adds	r7, #12
    ce0c:	46bd      	mov	sp, r7
    ce0e:	bd90      	pop	{r4, r7, pc}
    ce10:	0000ceb9 	.word	0x0000ceb9
    ce14:	2000128c 	.word	0x2000128c
    ce18:	0000da3d 	.word	0x0000da3d

0000ce1c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    ce1c:	b580      	push	{r7, lr}
    ce1e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    ce20:	4b05      	ldr	r3, [pc, #20]	; (ce38 <cdcdf_acm_stop_xfer+0x1c>)
    ce22:	78db      	ldrb	r3, [r3, #3]
    ce24:	4618      	mov	r0, r3
    ce26:	4b05      	ldr	r3, [pc, #20]	; (ce3c <cdcdf_acm_stop_xfer+0x20>)
    ce28:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    ce2a:	4b03      	ldr	r3, [pc, #12]	; (ce38 <cdcdf_acm_stop_xfer+0x1c>)
    ce2c:	791b      	ldrb	r3, [r3, #4]
    ce2e:	4618      	mov	r0, r3
    ce30:	4b02      	ldr	r3, [pc, #8]	; (ce3c <cdcdf_acm_stop_xfer+0x20>)
    ce32:	4798      	blx	r3
}
    ce34:	bf00      	nop
    ce36:	bd80      	pop	{r7, pc}
    ce38:	2000128c 	.word	0x2000128c
    ce3c:	00004261 	.word	0x00004261

0000ce40 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    ce40:	b580      	push	{r7, lr}
    ce42:	b082      	sub	sp, #8
    ce44:	af00      	add	r7, sp, #0
    ce46:	4603      	mov	r3, r0
    ce48:	6039      	str	r1, [r7, #0]
    ce4a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    ce4c:	79fb      	ldrb	r3, [r7, #7]
    ce4e:	2b03      	cmp	r3, #3
    ce50:	d822      	bhi.n	ce98 <cdcdf_acm_register_callback+0x58>
    ce52:	a201      	add	r2, pc, #4	; (adr r2, ce58 <cdcdf_acm_register_callback+0x18>)
    ce54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ce58:	0000ce69 	.word	0x0000ce69
    ce5c:	0000ce79 	.word	0x0000ce79
    ce60:	0000ce89 	.word	0x0000ce89
    ce64:	0000ce91 	.word	0x0000ce91
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    ce68:	4b0f      	ldr	r3, [pc, #60]	; (cea8 <cdcdf_acm_register_callback+0x68>)
    ce6a:	791b      	ldrb	r3, [r3, #4]
    ce6c:	683a      	ldr	r2, [r7, #0]
    ce6e:	2102      	movs	r1, #2
    ce70:	4618      	mov	r0, r3
    ce72:	4b0e      	ldr	r3, [pc, #56]	; (ceac <cdcdf_acm_register_callback+0x6c>)
    ce74:	4798      	blx	r3
		break;
    ce76:	e012      	b.n	ce9e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    ce78:	4b0b      	ldr	r3, [pc, #44]	; (cea8 <cdcdf_acm_register_callback+0x68>)
    ce7a:	78db      	ldrb	r3, [r3, #3]
    ce7c:	683a      	ldr	r2, [r7, #0]
    ce7e:	2102      	movs	r1, #2
    ce80:	4618      	mov	r0, r3
    ce82:	4b0a      	ldr	r3, [pc, #40]	; (ceac <cdcdf_acm_register_callback+0x6c>)
    ce84:	4798      	blx	r3
		break;
    ce86:	e00a      	b.n	ce9e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    ce88:	4a09      	ldr	r2, [pc, #36]	; (ceb0 <cdcdf_acm_register_callback+0x70>)
    ce8a:	683b      	ldr	r3, [r7, #0]
    ce8c:	6013      	str	r3, [r2, #0]
		break;
    ce8e:	e006      	b.n	ce9e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    ce90:	4a08      	ldr	r2, [pc, #32]	; (ceb4 <cdcdf_acm_register_callback+0x74>)
    ce92:	683b      	ldr	r3, [r7, #0]
    ce94:	6013      	str	r3, [r2, #0]
		break;
    ce96:	e002      	b.n	ce9e <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    ce98:	f06f 030c 	mvn.w	r3, #12
    ce9c:	e000      	b.n	cea0 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    ce9e:	2300      	movs	r3, #0
}
    cea0:	4618      	mov	r0, r3
    cea2:	3708      	adds	r7, #8
    cea4:	46bd      	mov	sp, r7
    cea6:	bd80      	pop	{r7, pc}
    cea8:	2000128c 	.word	0x2000128c
    ceac:	0000438d 	.word	0x0000438d
    ceb0:	200012a0 	.word	0x200012a0
    ceb4:	2000129c 	.word	0x2000129c

0000ceb8 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    ceb8:	b480      	push	{r7}
    ceba:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    cebc:	4b03      	ldr	r3, [pc, #12]	; (cecc <cdcdf_acm_is_enabled+0x14>)
    cebe:	795b      	ldrb	r3, [r3, #5]
}
    cec0:	4618      	mov	r0, r3
    cec2:	46bd      	mov	sp, r7
    cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cec8:	4770      	bx	lr
    ceca:	bf00      	nop
    cecc:	2000128c 	.word	0x2000128c

0000ced0 <usb_get_u16>:
{
    ced0:	b480      	push	{r7}
    ced2:	b083      	sub	sp, #12
    ced4:	af00      	add	r7, sp, #0
    ced6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ced8:	687b      	ldr	r3, [r7, #4]
    ceda:	781b      	ldrb	r3, [r3, #0]
    cedc:	b29a      	uxth	r2, r3
    cede:	687b      	ldr	r3, [r7, #4]
    cee0:	3301      	adds	r3, #1
    cee2:	781b      	ldrb	r3, [r3, #0]
    cee4:	b29b      	uxth	r3, r3
    cee6:	021b      	lsls	r3, r3, #8
    cee8:	b29b      	uxth	r3, r3
    ceea:	4413      	add	r3, r2
    ceec:	b29b      	uxth	r3, r3
}
    ceee:	4618      	mov	r0, r3
    cef0:	370c      	adds	r7, #12
    cef2:	46bd      	mov	sp, r7
    cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cef8:	4770      	bx	lr

0000cefa <usb_desc_len>:
{
    cefa:	b480      	push	{r7}
    cefc:	b083      	sub	sp, #12
    cefe:	af00      	add	r7, sp, #0
    cf00:	6078      	str	r0, [r7, #4]
	return desc[0];
    cf02:	687b      	ldr	r3, [r7, #4]
    cf04:	781b      	ldrb	r3, [r3, #0]
}
    cf06:	4618      	mov	r0, r3
    cf08:	370c      	adds	r7, #12
    cf0a:	46bd      	mov	sp, r7
    cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf10:	4770      	bx	lr
	...

0000cf14 <usb_desc_next>:
{
    cf14:	b580      	push	{r7, lr}
    cf16:	b082      	sub	sp, #8
    cf18:	af00      	add	r7, sp, #0
    cf1a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cf1c:	6878      	ldr	r0, [r7, #4]
    cf1e:	4b05      	ldr	r3, [pc, #20]	; (cf34 <usb_desc_next+0x20>)
    cf20:	4798      	blx	r3
    cf22:	4603      	mov	r3, r0
    cf24:	461a      	mov	r2, r3
    cf26:	687b      	ldr	r3, [r7, #4]
    cf28:	4413      	add	r3, r2
}
    cf2a:	4618      	mov	r0, r3
    cf2c:	3708      	adds	r7, #8
    cf2e:	46bd      	mov	sp, r7
    cf30:	bd80      	pop	{r7, pc}
    cf32:	bf00      	nop
    cf34:	0000cefb 	.word	0x0000cefb

0000cf38 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    cf38:	b580      	push	{r7, lr}
    cf3a:	b082      	sub	sp, #8
    cf3c:	af00      	add	r7, sp, #0
    cf3e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cf40:	687b      	ldr	r3, [r7, #4]
    cf42:	3302      	adds	r3, #2
    cf44:	4618      	mov	r0, r3
    cf46:	4b03      	ldr	r3, [pc, #12]	; (cf54 <usb_cfg_desc_total_len+0x1c>)
    cf48:	4798      	blx	r3
    cf4a:	4603      	mov	r3, r0
}
    cf4c:	4618      	mov	r0, r3
    cf4e:	3708      	adds	r7, #8
    cf50:	46bd      	mov	sp, r7
    cf52:	bd80      	pop	{r7, pc}
    cf54:	0000ced1 	.word	0x0000ced1

0000cf58 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    cf58:	b590      	push	{r4, r7, lr}
    cf5a:	b085      	sub	sp, #20
    cf5c:	af00      	add	r7, sp, #0
    cf5e:	4603      	mov	r3, r0
    cf60:	6039      	str	r1, [r7, #0]
    cf62:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    cf64:	2300      	movs	r3, #0
    cf66:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    cf68:	683b      	ldr	r3, [r7, #0]
    cf6a:	799a      	ldrb	r2, [r3, #6]
    cf6c:	79db      	ldrb	r3, [r3, #7]
    cf6e:	021b      	lsls	r3, r3, #8
    cf70:	4313      	orrs	r3, r2
    cf72:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    cf74:	897b      	ldrh	r3, [r7, #10]
    cf76:	2b12      	cmp	r3, #18
    cf78:	d901      	bls.n	cf7e <usbdc_get_dev_desc+0x26>
		length = 0x12;
    cf7a:	2312      	movs	r3, #18
    cf7c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    cf7e:	68fb      	ldr	r3, [r7, #12]
    cf80:	2b00      	cmp	r3, #0
    cf82:	d10a      	bne.n	cf9a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    cf84:	4b0f      	ldr	r3, [pc, #60]	; (cfc4 <usbdc_get_dev_desc+0x6c>)
    cf86:	681b      	ldr	r3, [r3, #0]
    cf88:	6818      	ldr	r0, [r3, #0]
    cf8a:	4b0e      	ldr	r3, [pc, #56]	; (cfc4 <usbdc_get_dev_desc+0x6c>)
    cf8c:	681b      	ldr	r3, [r3, #0]
    cf8e:	685b      	ldr	r3, [r3, #4]
    cf90:	2201      	movs	r2, #1
    cf92:	4619      	mov	r1, r3
    cf94:	4b0c      	ldr	r3, [pc, #48]	; (cfc8 <usbdc_get_dev_desc+0x70>)
    cf96:	4798      	blx	r3
    cf98:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    cf9a:	68fb      	ldr	r3, [r7, #12]
    cf9c:	2b00      	cmp	r3, #0
    cf9e:	d101      	bne.n	cfa4 <usbdc_get_dev_desc+0x4c>
		return false;
    cfa0:	2300      	movs	r3, #0
    cfa2:	e00b      	b.n	cfbc <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    cfa4:	897a      	ldrh	r2, [r7, #10]
    cfa6:	79f8      	ldrb	r0, [r7, #7]
    cfa8:	2300      	movs	r3, #0
    cfaa:	68f9      	ldr	r1, [r7, #12]
    cfac:	4c07      	ldr	r4, [pc, #28]	; (cfcc <usbdc_get_dev_desc+0x74>)
    cfae:	47a0      	blx	r4
    cfb0:	4603      	mov	r3, r0
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	d001      	beq.n	cfba <usbdc_get_dev_desc+0x62>
		return false;
    cfb6:	2300      	movs	r3, #0
    cfb8:	e000      	b.n	cfbc <usbdc_get_dev_desc+0x64>
	}
	return true;
    cfba:	2301      	movs	r3, #1
}
    cfbc:	4618      	mov	r0, r3
    cfbe:	3714      	adds	r7, #20
    cfc0:	46bd      	mov	sp, r7
    cfc2:	bd90      	pop	{r4, r7, pc}
    cfc4:	200012a4 	.word	0x200012a4
    cfc8:	0000dccd 	.word	0x0000dccd
    cfcc:	0000da3d 	.word	0x0000da3d

0000cfd0 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    cfd0:	b590      	push	{r4, r7, lr}
    cfd2:	b087      	sub	sp, #28
    cfd4:	af00      	add	r7, sp, #0
    cfd6:	4603      	mov	r3, r0
    cfd8:	6039      	str	r1, [r7, #0]
    cfda:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    cfdc:	2300      	movs	r3, #0
    cfde:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    cfe0:	683b      	ldr	r3, [r7, #0]
    cfe2:	799a      	ldrb	r2, [r3, #6]
    cfe4:	79db      	ldrb	r3, [r3, #7]
    cfe6:	021b      	lsls	r3, r3, #8
    cfe8:	4313      	orrs	r3, r2
    cfea:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    cfec:	683b      	ldr	r3, [r7, #0]
    cfee:	885b      	ldrh	r3, [r3, #2]
    cff0:	b29b      	uxth	r3, r3
    cff2:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cff4:	8a7a      	ldrh	r2, [r7, #18]
    cff6:	4b1e      	ldr	r3, [pc, #120]	; (d070 <usbdc_get_cfg_desc+0xa0>)
    cff8:	7f1b      	ldrb	r3, [r3, #28]
    cffa:	3b01      	subs	r3, #1
    cffc:	4013      	ands	r3, r2
    cffe:	2b00      	cmp	r3, #0
    d000:	bf0c      	ite	eq
    d002:	2301      	moveq	r3, #1
    d004:	2300      	movne	r3, #0
    d006:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d008:	697b      	ldr	r3, [r7, #20]
    d00a:	2b00      	cmp	r3, #0
    d00c:	d10c      	bne.n	d028 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    d00e:	4b18      	ldr	r3, [pc, #96]	; (d070 <usbdc_get_cfg_desc+0xa0>)
    d010:	681b      	ldr	r3, [r3, #0]
    d012:	6818      	ldr	r0, [r3, #0]
    d014:	4b16      	ldr	r3, [pc, #88]	; (d070 <usbdc_get_cfg_desc+0xa0>)
    d016:	681b      	ldr	r3, [r3, #0]
    d018:	6859      	ldr	r1, [r3, #4]
    d01a:	7c3b      	ldrb	r3, [r7, #16]
    d01c:	3301      	adds	r3, #1
    d01e:	b2db      	uxtb	r3, r3
    d020:	461a      	mov	r2, r3
    d022:	4b14      	ldr	r3, [pc, #80]	; (d074 <usbdc_get_cfg_desc+0xa4>)
    d024:	4798      	blx	r3
    d026:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    d028:	697b      	ldr	r3, [r7, #20]
    d02a:	2b00      	cmp	r3, #0
    d02c:	d101      	bne.n	d032 <usbdc_get_cfg_desc+0x62>
		return false;
    d02e:	2300      	movs	r3, #0
    d030:	e019      	b.n	d066 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    d032:	6978      	ldr	r0, [r7, #20]
    d034:	4b10      	ldr	r3, [pc, #64]	; (d078 <usbdc_get_cfg_desc+0xa8>)
    d036:	4798      	blx	r3
    d038:	4603      	mov	r3, r0
    d03a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    d03c:	8a7a      	ldrh	r2, [r7, #18]
    d03e:	89fb      	ldrh	r3, [r7, #14]
    d040:	429a      	cmp	r2, r3
    d042:	d802      	bhi.n	d04a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    d044:	2300      	movs	r3, #0
    d046:	747b      	strb	r3, [r7, #17]
    d048:	e001      	b.n	d04e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    d04a:	89fb      	ldrh	r3, [r7, #14]
    d04c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    d04e:	8a7a      	ldrh	r2, [r7, #18]
    d050:	7c7b      	ldrb	r3, [r7, #17]
    d052:	79f8      	ldrb	r0, [r7, #7]
    d054:	6979      	ldr	r1, [r7, #20]
    d056:	4c09      	ldr	r4, [pc, #36]	; (d07c <usbdc_get_cfg_desc+0xac>)
    d058:	47a0      	blx	r4
    d05a:	4603      	mov	r3, r0
    d05c:	2b00      	cmp	r3, #0
    d05e:	d001      	beq.n	d064 <usbdc_get_cfg_desc+0x94>
		return false;
    d060:	2300      	movs	r3, #0
    d062:	e000      	b.n	d066 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    d064:	2301      	movs	r3, #1
}
    d066:	4618      	mov	r0, r3
    d068:	371c      	adds	r7, #28
    d06a:	46bd      	mov	sp, r7
    d06c:	bd90      	pop	{r4, r7, pc}
    d06e:	bf00      	nop
    d070:	200012a4 	.word	0x200012a4
    d074:	0000dd8d 	.word	0x0000dd8d
    d078:	0000cf39 	.word	0x0000cf39
    d07c:	0000da3d 	.word	0x0000da3d

0000d080 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    d080:	b590      	push	{r4, r7, lr}
    d082:	b085      	sub	sp, #20
    d084:	af00      	add	r7, sp, #0
    d086:	4603      	mov	r3, r0
    d088:	6039      	str	r1, [r7, #0]
    d08a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    d08c:	683b      	ldr	r3, [r7, #0]
    d08e:	799a      	ldrb	r2, [r3, #6]
    d090:	79db      	ldrb	r3, [r3, #7]
    d092:	021b      	lsls	r3, r3, #8
    d094:	4313      	orrs	r3, r2
    d096:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    d098:	683b      	ldr	r3, [r7, #0]
    d09a:	885b      	ldrh	r3, [r3, #2]
    d09c:	b29b      	uxth	r3, r3
    d09e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d0a0:	89fa      	ldrh	r2, [r7, #14]
    d0a2:	4b1a      	ldr	r3, [pc, #104]	; (d10c <usbdc_get_str_desc+0x8c>)
    d0a4:	7f1b      	ldrb	r3, [r3, #28]
    d0a6:	3b01      	subs	r3, #1
    d0a8:	4013      	ands	r3, r2
    d0aa:	2b00      	cmp	r3, #0
    d0ac:	bf0c      	ite	eq
    d0ae:	2301      	moveq	r3, #1
    d0b0:	2300      	movne	r3, #0
    d0b2:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    d0b4:	4b15      	ldr	r3, [pc, #84]	; (d10c <usbdc_get_str_desc+0x8c>)
    d0b6:	681b      	ldr	r3, [r3, #0]
    d0b8:	6818      	ldr	r0, [r3, #0]
    d0ba:	4b14      	ldr	r3, [pc, #80]	; (d10c <usbdc_get_str_desc+0x8c>)
    d0bc:	681b      	ldr	r3, [r3, #0]
    d0be:	685b      	ldr	r3, [r3, #4]
    d0c0:	7b3a      	ldrb	r2, [r7, #12]
    d0c2:	4619      	mov	r1, r3
    d0c4:	4b12      	ldr	r3, [pc, #72]	; (d110 <usbdc_get_str_desc+0x90>)
    d0c6:	4798      	blx	r3
    d0c8:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    d0ca:	68bb      	ldr	r3, [r7, #8]
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	d101      	bne.n	d0d4 <usbdc_get_str_desc+0x54>
		return false;
    d0d0:	2300      	movs	r3, #0
    d0d2:	e017      	b.n	d104 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    d0d4:	68bb      	ldr	r3, [r7, #8]
    d0d6:	781b      	ldrb	r3, [r3, #0]
    d0d8:	b29b      	uxth	r3, r3
    d0da:	89fa      	ldrh	r2, [r7, #14]
    d0dc:	429a      	cmp	r2, r3
    d0de:	d802      	bhi.n	d0e6 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    d0e0:	2300      	movs	r3, #0
    d0e2:	737b      	strb	r3, [r7, #13]
    d0e4:	e002      	b.n	d0ec <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    d0e6:	68bb      	ldr	r3, [r7, #8]
    d0e8:	781b      	ldrb	r3, [r3, #0]
    d0ea:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    d0ec:	89fa      	ldrh	r2, [r7, #14]
    d0ee:	7b7b      	ldrb	r3, [r7, #13]
    d0f0:	79f8      	ldrb	r0, [r7, #7]
    d0f2:	68b9      	ldr	r1, [r7, #8]
    d0f4:	4c07      	ldr	r4, [pc, #28]	; (d114 <usbdc_get_str_desc+0x94>)
    d0f6:	47a0      	blx	r4
    d0f8:	4603      	mov	r3, r0
    d0fa:	2b00      	cmp	r3, #0
    d0fc:	d001      	beq.n	d102 <usbdc_get_str_desc+0x82>
		return false;
    d0fe:	2300      	movs	r3, #0
    d100:	e000      	b.n	d104 <usbdc_get_str_desc+0x84>
	}
	return true;
    d102:	2301      	movs	r3, #1
}
    d104:	4618      	mov	r0, r3
    d106:	3714      	adds	r7, #20
    d108:	46bd      	mov	sp, r7
    d10a:	bd90      	pop	{r4, r7, pc}
    d10c:	200012a4 	.word	0x200012a4
    d110:	0000de05 	.word	0x0000de05
    d114:	0000da3d 	.word	0x0000da3d

0000d118 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    d118:	b580      	push	{r7, lr}
    d11a:	b084      	sub	sp, #16
    d11c:	af00      	add	r7, sp, #0
    d11e:	4603      	mov	r3, r0
    d120:	6039      	str	r1, [r7, #0]
    d122:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    d124:	683b      	ldr	r3, [r7, #0]
    d126:	885b      	ldrh	r3, [r3, #2]
    d128:	b29b      	uxth	r3, r3
    d12a:	0a1b      	lsrs	r3, r3, #8
    d12c:	b29b      	uxth	r3, r3
    d12e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    d130:	7bfb      	ldrb	r3, [r7, #15]
    d132:	2b02      	cmp	r3, #2
    d134:	d00d      	beq.n	d152 <usbdc_get_desc_req+0x3a>
    d136:	2b03      	cmp	r3, #3
    d138:	d012      	beq.n	d160 <usbdc_get_desc_req+0x48>
    d13a:	2b01      	cmp	r3, #1
    d13c:	d002      	beq.n	d144 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    d13e:	bf00      	nop
	}
	return false;
    d140:	2300      	movs	r3, #0
    d142:	e013      	b.n	d16c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    d144:	79fb      	ldrb	r3, [r7, #7]
    d146:	6839      	ldr	r1, [r7, #0]
    d148:	4618      	mov	r0, r3
    d14a:	4b0a      	ldr	r3, [pc, #40]	; (d174 <usbdc_get_desc_req+0x5c>)
    d14c:	4798      	blx	r3
    d14e:	4603      	mov	r3, r0
    d150:	e00c      	b.n	d16c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    d152:	79fb      	ldrb	r3, [r7, #7]
    d154:	6839      	ldr	r1, [r7, #0]
    d156:	4618      	mov	r0, r3
    d158:	4b07      	ldr	r3, [pc, #28]	; (d178 <usbdc_get_desc_req+0x60>)
    d15a:	4798      	blx	r3
    d15c:	4603      	mov	r3, r0
    d15e:	e005      	b.n	d16c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    d160:	79fb      	ldrb	r3, [r7, #7]
    d162:	6839      	ldr	r1, [r7, #0]
    d164:	4618      	mov	r0, r3
    d166:	4b05      	ldr	r3, [pc, #20]	; (d17c <usbdc_get_desc_req+0x64>)
    d168:	4798      	blx	r3
    d16a:	4603      	mov	r3, r0
}
    d16c:	4618      	mov	r0, r3
    d16e:	3710      	adds	r7, #16
    d170:	46bd      	mov	sp, r7
    d172:	bd80      	pop	{r7, pc}
    d174:	0000cf59 	.word	0x0000cf59
    d178:	0000cfd1 	.word	0x0000cfd1
    d17c:	0000d081 	.word	0x0000d081

0000d180 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    d180:	b590      	push	{r4, r7, lr}
    d182:	b085      	sub	sp, #20
    d184:	af00      	add	r7, sp, #0
    d186:	4603      	mov	r3, r0
    d188:	6039      	str	r1, [r7, #0]
    d18a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d18c:	683b      	ldr	r3, [r7, #0]
    d18e:	781b      	ldrb	r3, [r3, #0]
    d190:	f003 031f 	and.w	r3, r3, #31
    d194:	2b00      	cmp	r3, #0
    d196:	db1b      	blt.n	d1d0 <usbdc_get_status_req+0x50>
    d198:	2b01      	cmp	r3, #1
    d19a:	dd02      	ble.n	d1a2 <usbdc_get_status_req+0x22>
    d19c:	2b02      	cmp	r3, #2
    d19e:	d003      	beq.n	d1a8 <usbdc_get_status_req+0x28>
    d1a0:	e016      	b.n	d1d0 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    d1a2:	2300      	movs	r3, #0
    d1a4:	60fb      	str	r3, [r7, #12]
		break;
    d1a6:	e015      	b.n	d1d4 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    d1a8:	683b      	ldr	r3, [r7, #0]
    d1aa:	889b      	ldrh	r3, [r3, #4]
    d1ac:	b29b      	uxth	r3, r3
    d1ae:	b2db      	uxtb	r3, r3
    d1b0:	2102      	movs	r1, #2
    d1b2:	4618      	mov	r0, r3
    d1b4:	4b0f      	ldr	r3, [pc, #60]	; (d1f4 <usbdc_get_status_req+0x74>)
    d1b6:	4798      	blx	r3
    d1b8:	4603      	mov	r3, r0
    d1ba:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    d1bc:	68fb      	ldr	r3, [r7, #12]
    d1be:	2b00      	cmp	r3, #0
    d1c0:	da01      	bge.n	d1c6 <usbdc_get_status_req+0x46>
			return false;
    d1c2:	2300      	movs	r3, #0
    d1c4:	e012      	b.n	d1ec <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    d1c6:	68fb      	ldr	r3, [r7, #12]
    d1c8:	f003 0301 	and.w	r3, r3, #1
    d1cc:	60fb      	str	r3, [r7, #12]
		break;
    d1ce:	e001      	b.n	d1d4 <usbdc_get_status_req+0x54>
	default:
		return false;
    d1d0:	2300      	movs	r3, #0
    d1d2:	e00b      	b.n	d1ec <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    d1d4:	4b08      	ldr	r3, [pc, #32]	; (d1f8 <usbdc_get_status_req+0x78>)
    d1d6:	695b      	ldr	r3, [r3, #20]
    d1d8:	89ba      	ldrh	r2, [r7, #12]
    d1da:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    d1dc:	4b06      	ldr	r3, [pc, #24]	; (d1f8 <usbdc_get_status_req+0x78>)
    d1de:	6959      	ldr	r1, [r3, #20]
    d1e0:	79f8      	ldrb	r0, [r7, #7]
    d1e2:	2300      	movs	r3, #0
    d1e4:	2202      	movs	r2, #2
    d1e6:	4c05      	ldr	r4, [pc, #20]	; (d1fc <usbdc_get_status_req+0x7c>)
    d1e8:	47a0      	blx	r4
	return true;
    d1ea:	2301      	movs	r3, #1
}
    d1ec:	4618      	mov	r0, r3
    d1ee:	3714      	adds	r7, #20
    d1f0:	46bd      	mov	sp, r7
    d1f2:	bd90      	pop	{r4, r7, pc}
    d1f4:	00004339 	.word	0x00004339
    d1f8:	200012a4 	.word	0x200012a4
    d1fc:	0000da3d 	.word	0x0000da3d

0000d200 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    d200:	b590      	push	{r4, r7, lr}
    d202:	b085      	sub	sp, #20
    d204:	af00      	add	r7, sp, #0
    d206:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d208:	4b1f      	ldr	r3, [pc, #124]	; (d288 <usbdc_get_interface+0x88>)
    d20a:	691b      	ldr	r3, [r3, #16]
    d20c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    d20e:	4b1e      	ldr	r3, [pc, #120]	; (d288 <usbdc_get_interface+0x88>)
    d210:	7f5b      	ldrb	r3, [r3, #29]
    d212:	461a      	mov	r2, r3
    d214:	687b      	ldr	r3, [r7, #4]
    d216:	889b      	ldrh	r3, [r3, #4]
    d218:	b29b      	uxth	r3, r3
    d21a:	fa42 f303 	asr.w	r3, r2, r3
    d21e:	f003 0301 	and.w	r3, r3, #1
    d222:	2b00      	cmp	r3, #0
    d224:	d128      	bne.n	d278 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    d226:	4b18      	ldr	r3, [pc, #96]	; (d288 <usbdc_get_interface+0x88>)
    d228:	695b      	ldr	r3, [r3, #20]
    d22a:	2200      	movs	r2, #0
    d22c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d22e:	4b16      	ldr	r3, [pc, #88]	; (d288 <usbdc_get_interface+0x88>)
    d230:	6959      	ldr	r1, [r3, #20]
    d232:	2300      	movs	r3, #0
    d234:	2201      	movs	r2, #1
    d236:	2000      	movs	r0, #0
    d238:	4c14      	ldr	r4, [pc, #80]	; (d28c <usbdc_get_interface+0x8c>)
    d23a:	47a0      	blx	r4
		return true;
    d23c:	2301      	movs	r3, #1
    d23e:	e01f      	b.n	d280 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    d240:	68fb      	ldr	r3, [r7, #12]
    d242:	685b      	ldr	r3, [r3, #4]
    d244:	687a      	ldr	r2, [r7, #4]
    d246:	2102      	movs	r1, #2
    d248:	68f8      	ldr	r0, [r7, #12]
    d24a:	4798      	blx	r3
    d24c:	60b8      	str	r0, [r7, #8]
    d24e:	68bb      	ldr	r3, [r7, #8]
    d250:	2b00      	cmp	r3, #0
    d252:	da03      	bge.n	d25c <usbdc_get_interface+0x5c>
			func = func->next;
    d254:	68fb      	ldr	r3, [r7, #12]
    d256:	681b      	ldr	r3, [r3, #0]
    d258:	60fb      	str	r3, [r7, #12]
    d25a:	e00d      	b.n	d278 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    d25c:	4b0a      	ldr	r3, [pc, #40]	; (d288 <usbdc_get_interface+0x88>)
    d25e:	695b      	ldr	r3, [r3, #20]
    d260:	68ba      	ldr	r2, [r7, #8]
    d262:	b2d2      	uxtb	r2, r2
    d264:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d266:	4b08      	ldr	r3, [pc, #32]	; (d288 <usbdc_get_interface+0x88>)
    d268:	6959      	ldr	r1, [r3, #20]
    d26a:	2300      	movs	r3, #0
    d26c:	2201      	movs	r2, #1
    d26e:	2000      	movs	r0, #0
    d270:	4c06      	ldr	r4, [pc, #24]	; (d28c <usbdc_get_interface+0x8c>)
    d272:	47a0      	blx	r4
			return true;
    d274:	2301      	movs	r3, #1
    d276:	e003      	b.n	d280 <usbdc_get_interface+0x80>
	while (NULL != func) {
    d278:	68fb      	ldr	r3, [r7, #12]
    d27a:	2b00      	cmp	r3, #0
    d27c:	d1e0      	bne.n	d240 <usbdc_get_interface+0x40>
		}
	}
	return false;
    d27e:	2300      	movs	r3, #0
}
    d280:	4618      	mov	r0, r3
    d282:	3714      	adds	r7, #20
    d284:	46bd      	mov	sp, r7
    d286:	bd90      	pop	{r4, r7, pc}
    d288:	200012a4 	.word	0x200012a4
    d28c:	0000da3d 	.word	0x0000da3d

0000d290 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    d290:	b590      	push	{r4, r7, lr}
    d292:	b083      	sub	sp, #12
    d294:	af00      	add	r7, sp, #0
    d296:	4603      	mov	r3, r0
    d298:	6039      	str	r1, [r7, #0]
    d29a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d29c:	683b      	ldr	r3, [r7, #0]
    d29e:	785b      	ldrb	r3, [r3, #1]
    d2a0:	2b0a      	cmp	r3, #10
    d2a2:	d83a      	bhi.n	d31a <usbdc_get_req+0x8a>
    d2a4:	a201      	add	r2, pc, #4	; (adr r2, d2ac <usbdc_get_req+0x1c>)
    d2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d2aa:	bf00      	nop
    d2ac:	0000d303 	.word	0x0000d303
    d2b0:	0000d31b 	.word	0x0000d31b
    d2b4:	0000d31b 	.word	0x0000d31b
    d2b8:	0000d31b 	.word	0x0000d31b
    d2bc:	0000d31b 	.word	0x0000d31b
    d2c0:	0000d31b 	.word	0x0000d31b
    d2c4:	0000d2d9 	.word	0x0000d2d9
    d2c8:	0000d31b 	.word	0x0000d31b
    d2cc:	0000d2e7 	.word	0x0000d2e7
    d2d0:	0000d31b 	.word	0x0000d31b
    d2d4:	0000d311 	.word	0x0000d311
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    d2d8:	79fb      	ldrb	r3, [r7, #7]
    d2da:	6839      	ldr	r1, [r7, #0]
    d2dc:	4618      	mov	r0, r3
    d2de:	4b11      	ldr	r3, [pc, #68]	; (d324 <usbdc_get_req+0x94>)
    d2e0:	4798      	blx	r3
    d2e2:	4603      	mov	r3, r0
    d2e4:	e01a      	b.n	d31c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d2e6:	4b10      	ldr	r3, [pc, #64]	; (d328 <usbdc_get_req+0x98>)
    d2e8:	695b      	ldr	r3, [r3, #20]
    d2ea:	4a0f      	ldr	r2, [pc, #60]	; (d328 <usbdc_get_req+0x98>)
    d2ec:	7ed2      	ldrb	r2, [r2, #27]
    d2ee:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d2f0:	4b0d      	ldr	r3, [pc, #52]	; (d328 <usbdc_get_req+0x98>)
    d2f2:	6959      	ldr	r1, [r3, #20]
    d2f4:	79f8      	ldrb	r0, [r7, #7]
    d2f6:	2300      	movs	r3, #0
    d2f8:	2201      	movs	r2, #1
    d2fa:	4c0c      	ldr	r4, [pc, #48]	; (d32c <usbdc_get_req+0x9c>)
    d2fc:	47a0      	blx	r4
		return true;
    d2fe:	2301      	movs	r3, #1
    d300:	e00c      	b.n	d31c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    d302:	79fb      	ldrb	r3, [r7, #7]
    d304:	6839      	ldr	r1, [r7, #0]
    d306:	4618      	mov	r0, r3
    d308:	4b09      	ldr	r3, [pc, #36]	; (d330 <usbdc_get_req+0xa0>)
    d30a:	4798      	blx	r3
    d30c:	4603      	mov	r3, r0
    d30e:	e005      	b.n	d31c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    d310:	6838      	ldr	r0, [r7, #0]
    d312:	4b08      	ldr	r3, [pc, #32]	; (d334 <usbdc_get_req+0xa4>)
    d314:	4798      	blx	r3
    d316:	4603      	mov	r3, r0
    d318:	e000      	b.n	d31c <usbdc_get_req+0x8c>
	default:
		return false;
    d31a:	2300      	movs	r3, #0
	}
}
    d31c:	4618      	mov	r0, r3
    d31e:	370c      	adds	r7, #12
    d320:	46bd      	mov	sp, r7
    d322:	bd90      	pop	{r4, r7, pc}
    d324:	0000d119 	.word	0x0000d119
    d328:	200012a4 	.word	0x200012a4
    d32c:	0000da3d 	.word	0x0000da3d
    d330:	0000d181 	.word	0x0000d181
    d334:	0000d201 	.word	0x0000d201

0000d338 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d338:	b590      	push	{r4, r7, lr}
    d33a:	b083      	sub	sp, #12
    d33c:	af00      	add	r7, sp, #0
    d33e:	4603      	mov	r3, r0
    d340:	6039      	str	r1, [r7, #0]
    d342:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d344:	683b      	ldr	r3, [r7, #0]
    d346:	781b      	ldrb	r3, [r3, #0]
    d348:	f003 031f 	and.w	r3, r3, #31
    d34c:	2b02      	cmp	r3, #2
    d34e:	d116      	bne.n	d37e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d350:	683b      	ldr	r3, [r7, #0]
    d352:	88db      	ldrh	r3, [r3, #6]
    d354:	b29b      	uxth	r3, r3
    d356:	2b00      	cmp	r3, #0
    d358:	d001      	beq.n	d35e <usbdc_clear_ftr_req+0x26>
			return false;
    d35a:	2300      	movs	r3, #0
    d35c:	e010      	b.n	d380 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d35e:	683b      	ldr	r3, [r7, #0]
    d360:	889b      	ldrh	r3, [r3, #4]
    d362:	b29b      	uxth	r3, r3
    d364:	b2db      	uxtb	r3, r3
    d366:	2100      	movs	r1, #0
    d368:	4618      	mov	r0, r3
    d36a:	4b07      	ldr	r3, [pc, #28]	; (d388 <usbdc_clear_ftr_req+0x50>)
    d36c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d36e:	79f8      	ldrb	r0, [r7, #7]
    d370:	2301      	movs	r3, #1
    d372:	2200      	movs	r2, #0
    d374:	2100      	movs	r1, #0
    d376:	4c05      	ldr	r4, [pc, #20]	; (d38c <usbdc_clear_ftr_req+0x54>)
    d378:	47a0      	blx	r4
		return true;
    d37a:	2301      	movs	r3, #1
    d37c:	e000      	b.n	d380 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d37e:	2300      	movs	r3, #0
	}
}
    d380:	4618      	mov	r0, r3
    d382:	370c      	adds	r7, #12
    d384:	46bd      	mov	sp, r7
    d386:	bd90      	pop	{r4, r7, pc}
    d388:	00004339 	.word	0x00004339
    d38c:	0000da3d 	.word	0x0000da3d

0000d390 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d390:	b590      	push	{r4, r7, lr}
    d392:	b083      	sub	sp, #12
    d394:	af00      	add	r7, sp, #0
    d396:	4603      	mov	r3, r0
    d398:	6039      	str	r1, [r7, #0]
    d39a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d39c:	683b      	ldr	r3, [r7, #0]
    d39e:	781b      	ldrb	r3, [r3, #0]
    d3a0:	f003 031f 	and.w	r3, r3, #31
    d3a4:	2b02      	cmp	r3, #2
    d3a6:	d116      	bne.n	d3d6 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d3a8:	683b      	ldr	r3, [r7, #0]
    d3aa:	88db      	ldrh	r3, [r3, #6]
    d3ac:	b29b      	uxth	r3, r3
    d3ae:	2b00      	cmp	r3, #0
    d3b0:	d001      	beq.n	d3b6 <usbdc_set_ftr_req+0x26>
			return false;
    d3b2:	2300      	movs	r3, #0
    d3b4:	e010      	b.n	d3d8 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d3b6:	683b      	ldr	r3, [r7, #0]
    d3b8:	889b      	ldrh	r3, [r3, #4]
    d3ba:	b29b      	uxth	r3, r3
    d3bc:	b2db      	uxtb	r3, r3
    d3be:	2101      	movs	r1, #1
    d3c0:	4618      	mov	r0, r3
    d3c2:	4b07      	ldr	r3, [pc, #28]	; (d3e0 <usbdc_set_ftr_req+0x50>)
    d3c4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d3c6:	79f8      	ldrb	r0, [r7, #7]
    d3c8:	2301      	movs	r3, #1
    d3ca:	2200      	movs	r2, #0
    d3cc:	2100      	movs	r1, #0
    d3ce:	4c05      	ldr	r4, [pc, #20]	; (d3e4 <usbdc_set_ftr_req+0x54>)
    d3d0:	47a0      	blx	r4
		return true;
    d3d2:	2301      	movs	r3, #1
    d3d4:	e000      	b.n	d3d8 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d3d6:	2300      	movs	r3, #0
	}
}
    d3d8:	4618      	mov	r0, r3
    d3da:	370c      	adds	r7, #12
    d3dc:	46bd      	mov	sp, r7
    d3de:	bd90      	pop	{r4, r7, pc}
    d3e0:	00004339 	.word	0x00004339
    d3e4:	0000da3d 	.word	0x0000da3d

0000d3e8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d3e8:	b580      	push	{r7, lr}
    d3ea:	b082      	sub	sp, #8
    d3ec:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d3ee:	4b0a      	ldr	r3, [pc, #40]	; (d418 <usbdc_unconfig+0x30>)
    d3f0:	691b      	ldr	r3, [r3, #16]
    d3f2:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d3f4:	e008      	b.n	d408 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d3f6:	687b      	ldr	r3, [r7, #4]
    d3f8:	685b      	ldr	r3, [r3, #4]
    d3fa:	2200      	movs	r2, #0
    d3fc:	2101      	movs	r1, #1
    d3fe:	6878      	ldr	r0, [r7, #4]
    d400:	4798      	blx	r3
		func = func->next;
    d402:	687b      	ldr	r3, [r7, #4]
    d404:	681b      	ldr	r3, [r3, #0]
    d406:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d408:	687b      	ldr	r3, [r7, #4]
    d40a:	2b00      	cmp	r3, #0
    d40c:	d1f3      	bne.n	d3f6 <usbdc_unconfig+0xe>
	}
}
    d40e:	bf00      	nop
    d410:	3708      	adds	r7, #8
    d412:	46bd      	mov	sp, r7
    d414:	bd80      	pop	{r7, pc}
    d416:	bf00      	nop
    d418:	200012a4 	.word	0x200012a4

0000d41c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d41c:	b580      	push	{r7, lr}
    d41e:	b088      	sub	sp, #32
    d420:	af00      	add	r7, sp, #0
    d422:	4603      	mov	r3, r0
    d424:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d426:	2300      	movs	r3, #0
    d428:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d42a:	23ff      	movs	r3, #255	; 0xff
    d42c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d42e:	79fb      	ldrb	r3, [r7, #7]
    d430:	2b00      	cmp	r3, #0
    d432:	d103      	bne.n	d43c <usbdc_set_config+0x20>
		usbdc_unconfig();
    d434:	4b2e      	ldr	r3, [pc, #184]	; (d4f0 <usbdc_set_config+0xd4>)
    d436:	4798      	blx	r3
		return true;
    d438:	2301      	movs	r3, #1
    d43a:	e055      	b.n	d4e8 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d43c:	69bb      	ldr	r3, [r7, #24]
    d43e:	2b00      	cmp	r3, #0
    d440:	d10a      	bne.n	d458 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d442:	4b2c      	ldr	r3, [pc, #176]	; (d4f4 <usbdc_set_config+0xd8>)
    d444:	681b      	ldr	r3, [r3, #0]
    d446:	6818      	ldr	r0, [r3, #0]
    d448:	4b2a      	ldr	r3, [pc, #168]	; (d4f4 <usbdc_set_config+0xd8>)
    d44a:	681b      	ldr	r3, [r3, #0]
    d44c:	685b      	ldr	r3, [r3, #4]
    d44e:	79fa      	ldrb	r2, [r7, #7]
    d450:	4619      	mov	r1, r3
    d452:	4b29      	ldr	r3, [pc, #164]	; (d4f8 <usbdc_set_config+0xdc>)
    d454:	4798      	blx	r3
    d456:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d458:	69bb      	ldr	r3, [r7, #24]
    d45a:	2b00      	cmp	r3, #0
    d45c:	d101      	bne.n	d462 <usbdc_set_config+0x46>
		return false;
    d45e:	2300      	movs	r3, #0
    d460:	e042      	b.n	d4e8 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d462:	69b8      	ldr	r0, [r7, #24]
    d464:	4b25      	ldr	r3, [pc, #148]	; (d4fc <usbdc_set_config+0xe0>)
    d466:	4798      	blx	r3
    d468:	4603      	mov	r3, r0
    d46a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d46c:	8abb      	ldrh	r3, [r7, #20]
    d46e:	69ba      	ldr	r2, [r7, #24]
    d470:	4413      	add	r3, r2
    d472:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d474:	693b      	ldr	r3, [r7, #16]
    d476:	2204      	movs	r2, #4
    d478:	4619      	mov	r1, r3
    d47a:	69b8      	ldr	r0, [r7, #24]
    d47c:	4b20      	ldr	r3, [pc, #128]	; (d500 <usbdc_set_config+0xe4>)
    d47e:	4798      	blx	r3
    d480:	4603      	mov	r3, r0
    d482:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d484:	e02c      	b.n	d4e0 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d486:	68fb      	ldr	r3, [r7, #12]
    d488:	3302      	adds	r3, #2
    d48a:	781b      	ldrb	r3, [r3, #0]
    d48c:	7dfa      	ldrb	r2, [r7, #23]
    d48e:	429a      	cmp	r2, r3
    d490:	d018      	beq.n	d4c4 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d492:	68fb      	ldr	r3, [r7, #12]
    d494:	789b      	ldrb	r3, [r3, #2]
    d496:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d498:	4b16      	ldr	r3, [pc, #88]	; (d4f4 <usbdc_set_config+0xd8>)
    d49a:	691b      	ldr	r3, [r3, #16]
    d49c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d49e:	e00c      	b.n	d4ba <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d4a0:	69fb      	ldr	r3, [r7, #28]
    d4a2:	685b      	ldr	r3, [r3, #4]
    d4a4:	f107 020c 	add.w	r2, r7, #12
    d4a8:	2100      	movs	r1, #0
    d4aa:	69f8      	ldr	r0, [r7, #28]
    d4ac:	4798      	blx	r3
    d4ae:	4603      	mov	r3, r0
    d4b0:	2b00      	cmp	r3, #0
    d4b2:	d006      	beq.n	d4c2 <usbdc_set_config+0xa6>
					func = func->next;
    d4b4:	69fb      	ldr	r3, [r7, #28]
    d4b6:	681b      	ldr	r3, [r3, #0]
    d4b8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d4ba:	69fb      	ldr	r3, [r7, #28]
    d4bc:	2b00      	cmp	r3, #0
    d4be:	d1ef      	bne.n	d4a0 <usbdc_set_config+0x84>
    d4c0:	e000      	b.n	d4c4 <usbdc_set_config+0xa8>
				} else {
					break;
    d4c2:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d4c4:	68fb      	ldr	r3, [r7, #12]
    d4c6:	4618      	mov	r0, r3
    d4c8:	4b0e      	ldr	r3, [pc, #56]	; (d504 <usbdc_set_config+0xe8>)
    d4ca:	4798      	blx	r3
    d4cc:	4603      	mov	r3, r0
    d4ce:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d4d0:	68fb      	ldr	r3, [r7, #12]
    d4d2:	6939      	ldr	r1, [r7, #16]
    d4d4:	2204      	movs	r2, #4
    d4d6:	4618      	mov	r0, r3
    d4d8:	4b09      	ldr	r3, [pc, #36]	; (d500 <usbdc_set_config+0xe4>)
    d4da:	4798      	blx	r3
    d4dc:	4603      	mov	r3, r0
    d4de:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d4e0:	68fb      	ldr	r3, [r7, #12]
    d4e2:	2b00      	cmp	r3, #0
    d4e4:	d1cf      	bne.n	d486 <usbdc_set_config+0x6a>
	}
	return true;
    d4e6:	2301      	movs	r3, #1
}
    d4e8:	4618      	mov	r0, r3
    d4ea:	3720      	adds	r7, #32
    d4ec:	46bd      	mov	sp, r7
    d4ee:	bd80      	pop	{r7, pc}
    d4f0:	0000d3e9 	.word	0x0000d3e9
    d4f4:	200012a4 	.word	0x200012a4
    d4f8:	0000dd8d 	.word	0x0000dd8d
    d4fc:	0000cf39 	.word	0x0000cf39
    d500:	0000dccd 	.word	0x0000dccd
    d504:	0000cf15 	.word	0x0000cf15

0000d508 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d508:	b580      	push	{r7, lr}
    d50a:	b082      	sub	sp, #8
    d50c:	af00      	add	r7, sp, #0
    d50e:	4603      	mov	r3, r0
    d510:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d512:	79fb      	ldrb	r3, [r7, #7]
    d514:	4618      	mov	r0, r3
    d516:	4b03      	ldr	r3, [pc, #12]	; (d524 <usbdc_set_address+0x1c>)
    d518:	4798      	blx	r3
}
    d51a:	bf00      	nop
    d51c:	3708      	adds	r7, #8
    d51e:	46bd      	mov	sp, r7
    d520:	bd80      	pop	{r7, pc}
    d522:	bf00      	nop
    d524:	00003f55 	.word	0x00003f55

0000d528 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d528:	b590      	push	{r4, r7, lr}
    d52a:	b087      	sub	sp, #28
    d52c:	af00      	add	r7, sp, #0
    d52e:	4603      	mov	r3, r0
    d530:	460a      	mov	r2, r1
    d532:	80fb      	strh	r3, [r7, #6]
    d534:	4613      	mov	r3, r2
    d536:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d538:	2300      	movs	r3, #0
    d53a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d53c:	693b      	ldr	r3, [r7, #16]
    d53e:	2b00      	cmp	r3, #0
    d540:	d10b      	bne.n	d55a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d542:	4b43      	ldr	r3, [pc, #268]	; (d650 <usbdc_set_interface+0x128>)
    d544:	681b      	ldr	r3, [r3, #0]
    d546:	6818      	ldr	r0, [r3, #0]
    d548:	4b41      	ldr	r3, [pc, #260]	; (d650 <usbdc_set_interface+0x128>)
    d54a:	681b      	ldr	r3, [r3, #0]
    d54c:	6859      	ldr	r1, [r3, #4]
    d54e:	4b40      	ldr	r3, [pc, #256]	; (d650 <usbdc_set_interface+0x128>)
    d550:	7edb      	ldrb	r3, [r3, #27]
    d552:	461a      	mov	r2, r3
    d554:	4b3f      	ldr	r3, [pc, #252]	; (d654 <usbdc_set_interface+0x12c>)
    d556:	4798      	blx	r3
    d558:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d55a:	693b      	ldr	r3, [r7, #16]
    d55c:	2b00      	cmp	r3, #0
    d55e:	d101      	bne.n	d564 <usbdc_set_interface+0x3c>
		return false;
    d560:	2300      	movs	r3, #0
    d562:	e071      	b.n	d648 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d564:	693b      	ldr	r3, [r7, #16]
    d566:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d568:	6938      	ldr	r0, [r7, #16]
    d56a:	4b3b      	ldr	r3, [pc, #236]	; (d658 <usbdc_set_interface+0x130>)
    d56c:	4798      	blx	r3
    d56e:	4603      	mov	r3, r0
    d570:	461a      	mov	r2, r3
    d572:	693b      	ldr	r3, [r7, #16]
    d574:	4413      	add	r3, r2
    d576:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d578:	68bb      	ldr	r3, [r7, #8]
    d57a:	68f9      	ldr	r1, [r7, #12]
    d57c:	2204      	movs	r2, #4
    d57e:	4618      	mov	r0, r3
    d580:	4b36      	ldr	r3, [pc, #216]	; (d65c <usbdc_set_interface+0x134>)
    d582:	4798      	blx	r3
    d584:	6138      	str	r0, [r7, #16]
    d586:	693b      	ldr	r3, [r7, #16]
    d588:	2b00      	cmp	r3, #0
    d58a:	d113      	bne.n	d5b4 <usbdc_set_interface+0x8c>
		return false;
    d58c:	2300      	movs	r3, #0
    d58e:	e05b      	b.n	d648 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d590:	68bb      	ldr	r3, [r7, #8]
    d592:	4618      	mov	r0, r3
    d594:	4b32      	ldr	r3, [pc, #200]	; (d660 <usbdc_set_interface+0x138>)
    d596:	4798      	blx	r3
    d598:	4603      	mov	r3, r0
    d59a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d59c:	68bb      	ldr	r3, [r7, #8]
    d59e:	68f9      	ldr	r1, [r7, #12]
    d5a0:	2204      	movs	r2, #4
    d5a2:	4618      	mov	r0, r3
    d5a4:	4b2d      	ldr	r3, [pc, #180]	; (d65c <usbdc_set_interface+0x134>)
    d5a6:	4798      	blx	r3
    d5a8:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d5aa:	693b      	ldr	r3, [r7, #16]
    d5ac:	2b00      	cmp	r3, #0
    d5ae:	d101      	bne.n	d5b4 <usbdc_set_interface+0x8c>
			return false;
    d5b0:	2300      	movs	r3, #0
    d5b2:	e049      	b.n	d648 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d5b4:	693b      	ldr	r3, [r7, #16]
    d5b6:	3302      	adds	r3, #2
    d5b8:	781b      	ldrb	r3, [r3, #0]
    d5ba:	b29b      	uxth	r3, r3
    d5bc:	88ba      	ldrh	r2, [r7, #4]
    d5be:	429a      	cmp	r2, r3
    d5c0:	d1e6      	bne.n	d590 <usbdc_set_interface+0x68>
    d5c2:	693b      	ldr	r3, [r7, #16]
    d5c4:	3303      	adds	r3, #3
    d5c6:	781b      	ldrb	r3, [r3, #0]
    d5c8:	b29b      	uxth	r3, r3
    d5ca:	88fa      	ldrh	r2, [r7, #6]
    d5cc:	429a      	cmp	r2, r3
    d5ce:	d1df      	bne.n	d590 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d5d0:	693b      	ldr	r3, [r7, #16]
    d5d2:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d5d4:	4b1e      	ldr	r3, [pc, #120]	; (d650 <usbdc_set_interface+0x128>)
    d5d6:	691b      	ldr	r3, [r3, #16]
    d5d8:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d5da:	e031      	b.n	d640 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d5dc:	697b      	ldr	r3, [r7, #20]
    d5de:	685b      	ldr	r3, [r3, #4]
    d5e0:	f107 0208 	add.w	r2, r7, #8
    d5e4:	2101      	movs	r1, #1
    d5e6:	6978      	ldr	r0, [r7, #20]
    d5e8:	4798      	blx	r3
    d5ea:	4603      	mov	r3, r0
    d5ec:	2b00      	cmp	r3, #0
    d5ee:	d003      	beq.n	d5f8 <usbdc_set_interface+0xd0>
			func = func->next;
    d5f0:	697b      	ldr	r3, [r7, #20]
    d5f2:	681b      	ldr	r3, [r3, #0]
    d5f4:	617b      	str	r3, [r7, #20]
    d5f6:	e023      	b.n	d640 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d5f8:	697b      	ldr	r3, [r7, #20]
    d5fa:	685b      	ldr	r3, [r3, #4]
    d5fc:	f107 0208 	add.w	r2, r7, #8
    d600:	2100      	movs	r1, #0
    d602:	6978      	ldr	r0, [r7, #20]
    d604:	4798      	blx	r3
    d606:	4603      	mov	r3, r0
    d608:	2b00      	cmp	r3, #0
    d60a:	d117      	bne.n	d63c <usbdc_set_interface+0x114>
			if (alt_set) {
    d60c:	88fb      	ldrh	r3, [r7, #6]
    d60e:	2b00      	cmp	r3, #0
    d610:	d00c      	beq.n	d62c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d612:	4b0f      	ldr	r3, [pc, #60]	; (d650 <usbdc_set_interface+0x128>)
    d614:	7f5b      	ldrb	r3, [r3, #29]
    d616:	b25a      	sxtb	r2, r3
    d618:	88bb      	ldrh	r3, [r7, #4]
    d61a:	2101      	movs	r1, #1
    d61c:	fa01 f303 	lsl.w	r3, r1, r3
    d620:	b25b      	sxtb	r3, r3
    d622:	4313      	orrs	r3, r2
    d624:	b25b      	sxtb	r3, r3
    d626:	b2da      	uxtb	r2, r3
    d628:	4b09      	ldr	r3, [pc, #36]	; (d650 <usbdc_set_interface+0x128>)
    d62a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d62c:	2300      	movs	r3, #0
    d62e:	2200      	movs	r2, #0
    d630:	2100      	movs	r1, #0
    d632:	2000      	movs	r0, #0
    d634:	4c0b      	ldr	r4, [pc, #44]	; (d664 <usbdc_set_interface+0x13c>)
    d636:	47a0      	blx	r4
			return true;
    d638:	2301      	movs	r3, #1
    d63a:	e005      	b.n	d648 <usbdc_set_interface+0x120>
		} else {
			return false;
    d63c:	2300      	movs	r3, #0
    d63e:	e003      	b.n	d648 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d640:	697b      	ldr	r3, [r7, #20]
    d642:	2b00      	cmp	r3, #0
    d644:	d1ca      	bne.n	d5dc <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d646:	2300      	movs	r3, #0
}
    d648:	4618      	mov	r0, r3
    d64a:	371c      	adds	r7, #28
    d64c:	46bd      	mov	sp, r7
    d64e:	bd90      	pop	{r4, r7, pc}
    d650:	200012a4 	.word	0x200012a4
    d654:	0000dd8d 	.word	0x0000dd8d
    d658:	0000cf39 	.word	0x0000cf39
    d65c:	0000dccd 	.word	0x0000dccd
    d660:	0000cf15 	.word	0x0000cf15
    d664:	0000da3d 	.word	0x0000da3d

0000d668 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d668:	b590      	push	{r4, r7, lr}
    d66a:	b083      	sub	sp, #12
    d66c:	af00      	add	r7, sp, #0
    d66e:	4603      	mov	r3, r0
    d670:	6039      	str	r1, [r7, #0]
    d672:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d674:	683b      	ldr	r3, [r7, #0]
    d676:	785b      	ldrb	r3, [r3, #1]
    d678:	3b01      	subs	r3, #1
    d67a:	2b0a      	cmp	r3, #10
    d67c:	d85b      	bhi.n	d736 <usbdc_set_req+0xce>
    d67e:	a201      	add	r2, pc, #4	; (adr r2, d684 <usbdc_set_req+0x1c>)
    d680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d684:	0000d703 	.word	0x0000d703
    d688:	0000d737 	.word	0x0000d737
    d68c:	0000d711 	.word	0x0000d711
    d690:	0000d737 	.word	0x0000d737
    d694:	0000d6b1 	.word	0x0000d6b1
    d698:	0000d737 	.word	0x0000d737
    d69c:	0000d737 	.word	0x0000d737
    d6a0:	0000d737 	.word	0x0000d737
    d6a4:	0000d6cb 	.word	0x0000d6cb
    d6a8:	0000d737 	.word	0x0000d737
    d6ac:	0000d71f 	.word	0x0000d71f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d6b0:	79f8      	ldrb	r0, [r7, #7]
    d6b2:	2301      	movs	r3, #1
    d6b4:	2200      	movs	r2, #0
    d6b6:	2100      	movs	r1, #0
    d6b8:	4c21      	ldr	r4, [pc, #132]	; (d740 <usbdc_set_req+0xd8>)
    d6ba:	47a0      	blx	r4
    d6bc:	4603      	mov	r3, r0
    d6be:	2b00      	cmp	r3, #0
    d6c0:	bf0c      	ite	eq
    d6c2:	2301      	moveq	r3, #1
    d6c4:	2300      	movne	r3, #0
    d6c6:	b2db      	uxtb	r3, r3
    d6c8:	e036      	b.n	d738 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d6ca:	683b      	ldr	r3, [r7, #0]
    d6cc:	885b      	ldrh	r3, [r3, #2]
    d6ce:	b29b      	uxth	r3, r3
    d6d0:	b2db      	uxtb	r3, r3
    d6d2:	4618      	mov	r0, r3
    d6d4:	4b1b      	ldr	r3, [pc, #108]	; (d744 <usbdc_set_req+0xdc>)
    d6d6:	4798      	blx	r3
    d6d8:	4603      	mov	r3, r0
    d6da:	f083 0301 	eor.w	r3, r3, #1
    d6de:	b2db      	uxtb	r3, r3
    d6e0:	2b00      	cmp	r3, #0
    d6e2:	d001      	beq.n	d6e8 <usbdc_set_req+0x80>
			return false;
    d6e4:	2300      	movs	r3, #0
    d6e6:	e027      	b.n	d738 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d6e8:	79f8      	ldrb	r0, [r7, #7]
    d6ea:	2301      	movs	r3, #1
    d6ec:	2200      	movs	r2, #0
    d6ee:	2100      	movs	r1, #0
    d6f0:	4c13      	ldr	r4, [pc, #76]	; (d740 <usbdc_set_req+0xd8>)
    d6f2:	47a0      	blx	r4
    d6f4:	4603      	mov	r3, r0
    d6f6:	2b00      	cmp	r3, #0
    d6f8:	bf0c      	ite	eq
    d6fa:	2301      	moveq	r3, #1
    d6fc:	2300      	movne	r3, #0
    d6fe:	b2db      	uxtb	r3, r3
    d700:	e01a      	b.n	d738 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d702:	79fb      	ldrb	r3, [r7, #7]
    d704:	6839      	ldr	r1, [r7, #0]
    d706:	4618      	mov	r0, r3
    d708:	4b0f      	ldr	r3, [pc, #60]	; (d748 <usbdc_set_req+0xe0>)
    d70a:	4798      	blx	r3
    d70c:	4603      	mov	r3, r0
    d70e:	e013      	b.n	d738 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d710:	79fb      	ldrb	r3, [r7, #7]
    d712:	6839      	ldr	r1, [r7, #0]
    d714:	4618      	mov	r0, r3
    d716:	4b0d      	ldr	r3, [pc, #52]	; (d74c <usbdc_set_req+0xe4>)
    d718:	4798      	blx	r3
    d71a:	4603      	mov	r3, r0
    d71c:	e00c      	b.n	d738 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d71e:	683b      	ldr	r3, [r7, #0]
    d720:	885b      	ldrh	r3, [r3, #2]
    d722:	b29a      	uxth	r2, r3
    d724:	683b      	ldr	r3, [r7, #0]
    d726:	889b      	ldrh	r3, [r3, #4]
    d728:	b29b      	uxth	r3, r3
    d72a:	4619      	mov	r1, r3
    d72c:	4610      	mov	r0, r2
    d72e:	4b08      	ldr	r3, [pc, #32]	; (d750 <usbdc_set_req+0xe8>)
    d730:	4798      	blx	r3
    d732:	4603      	mov	r3, r0
    d734:	e000      	b.n	d738 <usbdc_set_req+0xd0>
	default:
		return false;
    d736:	2300      	movs	r3, #0
	}
}
    d738:	4618      	mov	r0, r3
    d73a:	370c      	adds	r7, #12
    d73c:	46bd      	mov	sp, r7
    d73e:	bd90      	pop	{r4, r7, pc}
    d740:	0000da3d 	.word	0x0000da3d
    d744:	0000d41d 	.word	0x0000d41d
    d748:	0000d339 	.word	0x0000d339
    d74c:	0000d391 	.word	0x0000d391
    d750:	0000d529 	.word	0x0000d529

0000d754 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d754:	b580      	push	{r7, lr}
    d756:	b082      	sub	sp, #8
    d758:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d75a:	4b0a      	ldr	r3, [pc, #40]	; (d784 <usbdc_sof_notify+0x30>)
    d75c:	685b      	ldr	r3, [r3, #4]
    d75e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d760:	e009      	b.n	d776 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d762:	687b      	ldr	r3, [r7, #4]
    d764:	685b      	ldr	r3, [r3, #4]
    d766:	2b00      	cmp	r3, #0
    d768:	d002      	beq.n	d770 <usbdc_sof_notify+0x1c>
			sof->cb();
    d76a:	687b      	ldr	r3, [r7, #4]
    d76c:	685b      	ldr	r3, [r3, #4]
    d76e:	4798      	blx	r3
		}
		sof = sof->next;
    d770:	687b      	ldr	r3, [r7, #4]
    d772:	681b      	ldr	r3, [r3, #0]
    d774:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d776:	687b      	ldr	r3, [r7, #4]
    d778:	2b00      	cmp	r3, #0
    d77a:	d1f2      	bne.n	d762 <usbdc_sof_notify+0xe>
	}
}
    d77c:	bf00      	nop
    d77e:	3708      	adds	r7, #8
    d780:	46bd      	mov	sp, r7
    d782:	bd80      	pop	{r7, pc}
    d784:	200012a4 	.word	0x200012a4

0000d788 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d788:	b580      	push	{r7, lr}
    d78a:	b084      	sub	sp, #16
    d78c:	af00      	add	r7, sp, #0
    d78e:	4603      	mov	r3, r0
    d790:	6039      	str	r1, [r7, #0]
    d792:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d794:	4b0b      	ldr	r3, [pc, #44]	; (d7c4 <usbdc_change_notify+0x3c>)
    d796:	68db      	ldr	r3, [r3, #12]
    d798:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d79a:	e00c      	b.n	d7b6 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d79c:	68fb      	ldr	r3, [r7, #12]
    d79e:	685b      	ldr	r3, [r3, #4]
    d7a0:	2b00      	cmp	r3, #0
    d7a2:	d005      	beq.n	d7b0 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d7a4:	68fb      	ldr	r3, [r7, #12]
    d7a6:	685b      	ldr	r3, [r3, #4]
    d7a8:	79fa      	ldrb	r2, [r7, #7]
    d7aa:	6839      	ldr	r1, [r7, #0]
    d7ac:	4610      	mov	r0, r2
    d7ae:	4798      	blx	r3
		}
		cg = cg->next;
    d7b0:	68fb      	ldr	r3, [r7, #12]
    d7b2:	681b      	ldr	r3, [r3, #0]
    d7b4:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d7b6:	68fb      	ldr	r3, [r7, #12]
    d7b8:	2b00      	cmp	r3, #0
    d7ba:	d1ef      	bne.n	d79c <usbdc_change_notify+0x14>
	}
}
    d7bc:	bf00      	nop
    d7be:	3710      	adds	r7, #16
    d7c0:	46bd      	mov	sp, r7
    d7c2:	bd80      	pop	{r7, pc}
    d7c4:	200012a4 	.word	0x200012a4

0000d7c8 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d7c8:	b580      	push	{r7, lr}
    d7ca:	b084      	sub	sp, #16
    d7cc:	af00      	add	r7, sp, #0
    d7ce:	4603      	mov	r3, r0
    d7d0:	6039      	str	r1, [r7, #0]
    d7d2:	71fb      	strb	r3, [r7, #7]
    d7d4:	4613      	mov	r3, r2
    d7d6:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d7d8:	4b12      	ldr	r3, [pc, #72]	; (d824 <usbdc_request_handler+0x5c>)
    d7da:	689b      	ldr	r3, [r3, #8]
    d7dc:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d7de:	e019      	b.n	d814 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d7e0:	68fb      	ldr	r3, [r7, #12]
    d7e2:	685b      	ldr	r3, [r3, #4]
    d7e4:	2b00      	cmp	r3, #0
    d7e6:	d012      	beq.n	d80e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d7e8:	68fb      	ldr	r3, [r7, #12]
    d7ea:	685b      	ldr	r3, [r3, #4]
    d7ec:	79ba      	ldrb	r2, [r7, #6]
    d7ee:	79f8      	ldrb	r0, [r7, #7]
    d7f0:	6839      	ldr	r1, [r7, #0]
    d7f2:	4798      	blx	r3
    d7f4:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d7f6:	68bb      	ldr	r3, [r7, #8]
    d7f8:	2b00      	cmp	r3, #0
    d7fa:	d101      	bne.n	d800 <usbdc_request_handler+0x38>
				return true;
    d7fc:	2301      	movs	r3, #1
    d7fe:	e00d      	b.n	d81c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d800:	68bb      	ldr	r3, [r7, #8]
    d802:	f113 0f0a 	cmn.w	r3, #10
    d806:	d002      	beq.n	d80e <usbdc_request_handler+0x46>
				return -1;
    d808:	f04f 33ff 	mov.w	r3, #4294967295
    d80c:	e006      	b.n	d81c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d80e:	68fb      	ldr	r3, [r7, #12]
    d810:	681b      	ldr	r3, [r3, #0]
    d812:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d814:	68fb      	ldr	r3, [r7, #12]
    d816:	2b00      	cmp	r3, #0
    d818:	d1e2      	bne.n	d7e0 <usbdc_request_handler+0x18>
	}
	return false;
    d81a:	2300      	movs	r3, #0
}
    d81c:	4618      	mov	r0, r3
    d81e:	3710      	adds	r7, #16
    d820:	46bd      	mov	sp, r7
    d822:	bd80      	pop	{r7, pc}
    d824:	200012a4 	.word	0x200012a4

0000d828 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d828:	b580      	push	{r7, lr}
    d82a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d82c:	4b01      	ldr	r3, [pc, #4]	; (d834 <usbd_sof_cb+0xc>)
    d82e:	4798      	blx	r3
}
    d830:	bf00      	nop
    d832:	bd80      	pop	{r7, pc}
    d834:	0000d755 	.word	0x0000d755

0000d838 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d838:	b580      	push	{r7, lr}
    d83a:	b082      	sub	sp, #8
    d83c:	af00      	add	r7, sp, #0
    d83e:	4603      	mov	r3, r0
    d840:	6039      	str	r1, [r7, #0]
    d842:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d844:	79fb      	ldrb	r3, [r7, #7]
    d846:	2200      	movs	r2, #0
    d848:	6839      	ldr	r1, [r7, #0]
    d84a:	4618      	mov	r0, r3
    d84c:	4b14      	ldr	r3, [pc, #80]	; (d8a0 <usbdc_cb_ctl_req+0x68>)
    d84e:	4798      	blx	r3
    d850:	4603      	mov	r3, r0
    d852:	f1b3 3fff 	cmp.w	r3, #4294967295
    d856:	d00b      	beq.n	d870 <usbdc_cb_ctl_req+0x38>
    d858:	2b01      	cmp	r3, #1
    d85a:	d007      	beq.n	d86c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d85c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d85e:	683b      	ldr	r3, [r7, #0]
    d860:	781b      	ldrb	r3, [r3, #0]
    d862:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d866:	2b00      	cmp	r3, #0
    d868:	d007      	beq.n	d87a <usbdc_cb_ctl_req+0x42>
    d86a:	e003      	b.n	d874 <usbdc_cb_ctl_req+0x3c>
		return true;
    d86c:	2301      	movs	r3, #1
    d86e:	e013      	b.n	d898 <usbdc_cb_ctl_req+0x60>
		return false;
    d870:	2300      	movs	r3, #0
    d872:	e011      	b.n	d898 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d874:	2b80      	cmp	r3, #128	; 0x80
    d876:	d007      	beq.n	d888 <usbdc_cb_ctl_req+0x50>
    d878:	e00d      	b.n	d896 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d87a:	79fb      	ldrb	r3, [r7, #7]
    d87c:	6839      	ldr	r1, [r7, #0]
    d87e:	4618      	mov	r0, r3
    d880:	4b08      	ldr	r3, [pc, #32]	; (d8a4 <usbdc_cb_ctl_req+0x6c>)
    d882:	4798      	blx	r3
    d884:	4603      	mov	r3, r0
    d886:	e007      	b.n	d898 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d888:	79fb      	ldrb	r3, [r7, #7]
    d88a:	6839      	ldr	r1, [r7, #0]
    d88c:	4618      	mov	r0, r3
    d88e:	4b06      	ldr	r3, [pc, #24]	; (d8a8 <usbdc_cb_ctl_req+0x70>)
    d890:	4798      	blx	r3
    d892:	4603      	mov	r3, r0
    d894:	e000      	b.n	d898 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d896:	2300      	movs	r3, #0
	}
}
    d898:	4618      	mov	r0, r3
    d89a:	3708      	adds	r7, #8
    d89c:	46bd      	mov	sp, r7
    d89e:	bd80      	pop	{r7, pc}
    d8a0:	0000d7c9 	.word	0x0000d7c9
    d8a4:	0000d669 	.word	0x0000d669
    d8a8:	0000d291 	.word	0x0000d291

0000d8ac <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d8ac:	b580      	push	{r7, lr}
    d8ae:	b082      	sub	sp, #8
    d8b0:	af00      	add	r7, sp, #0
    d8b2:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d8b4:	687b      	ldr	r3, [r7, #4]
    d8b6:	781b      	ldrb	r3, [r3, #0]
    d8b8:	2b00      	cmp	r3, #0
    d8ba:	d135      	bne.n	d928 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d8bc:	687b      	ldr	r3, [r7, #4]
    d8be:	785b      	ldrb	r3, [r3, #1]
    d8c0:	2b05      	cmp	r3, #5
    d8c2:	d019      	beq.n	d8f8 <usbdc_ctrl_status_end+0x4c>
    d8c4:	2b09      	cmp	r3, #9
    d8c6:	d000      	beq.n	d8ca <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d8c8:	e02f      	b.n	d92a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d8ca:	687b      	ldr	r3, [r7, #4]
    d8cc:	885b      	ldrh	r3, [r3, #2]
    d8ce:	b29b      	uxth	r3, r3
    d8d0:	b2da      	uxtb	r2, r3
    d8d2:	4b17      	ldr	r3, [pc, #92]	; (d930 <usbdc_ctrl_status_end+0x84>)
    d8d4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d8d6:	687b      	ldr	r3, [r7, #4]
    d8d8:	885b      	ldrh	r3, [r3, #2]
    d8da:	b29b      	uxth	r3, r3
    d8dc:	2b00      	cmp	r3, #0
    d8de:	d001      	beq.n	d8e4 <usbdc_ctrl_status_end+0x38>
    d8e0:	2204      	movs	r2, #4
    d8e2:	e000      	b.n	d8e6 <usbdc_ctrl_status_end+0x3a>
    d8e4:	2203      	movs	r2, #3
    d8e6:	4b12      	ldr	r3, [pc, #72]	; (d930 <usbdc_ctrl_status_end+0x84>)
    d8e8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d8ea:	4b11      	ldr	r3, [pc, #68]	; (d930 <usbdc_ctrl_status_end+0x84>)
    d8ec:	7e9b      	ldrb	r3, [r3, #26]
    d8ee:	4619      	mov	r1, r3
    d8f0:	2001      	movs	r0, #1
    d8f2:	4b10      	ldr	r3, [pc, #64]	; (d934 <usbdc_ctrl_status_end+0x88>)
    d8f4:	4798      	blx	r3
		break;
    d8f6:	e018      	b.n	d92a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d8f8:	687b      	ldr	r3, [r7, #4]
    d8fa:	885b      	ldrh	r3, [r3, #2]
    d8fc:	b29b      	uxth	r3, r3
    d8fe:	b2db      	uxtb	r3, r3
    d900:	4618      	mov	r0, r3
    d902:	4b0d      	ldr	r3, [pc, #52]	; (d938 <usbdc_ctrl_status_end+0x8c>)
    d904:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d906:	687b      	ldr	r3, [r7, #4]
    d908:	885b      	ldrh	r3, [r3, #2]
    d90a:	b29b      	uxth	r3, r3
    d90c:	2b00      	cmp	r3, #0
    d90e:	d001      	beq.n	d914 <usbdc_ctrl_status_end+0x68>
    d910:	2203      	movs	r2, #3
    d912:	e000      	b.n	d916 <usbdc_ctrl_status_end+0x6a>
    d914:	2202      	movs	r2, #2
    d916:	4b06      	ldr	r3, [pc, #24]	; (d930 <usbdc_ctrl_status_end+0x84>)
    d918:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d91a:	4b05      	ldr	r3, [pc, #20]	; (d930 <usbdc_ctrl_status_end+0x84>)
    d91c:	7e9b      	ldrb	r3, [r3, #26]
    d91e:	4619      	mov	r1, r3
    d920:	2001      	movs	r0, #1
    d922:	4b04      	ldr	r3, [pc, #16]	; (d934 <usbdc_ctrl_status_end+0x88>)
    d924:	4798      	blx	r3
		break;
    d926:	e000      	b.n	d92a <usbdc_ctrl_status_end+0x7e>
		return;
    d928:	bf00      	nop
	}
}
    d92a:	3708      	adds	r7, #8
    d92c:	46bd      	mov	sp, r7
    d92e:	bd80      	pop	{r7, pc}
    d930:	200012a4 	.word	0x200012a4
    d934:	0000d789 	.word	0x0000d789
    d938:	0000d509 	.word	0x0000d509

0000d93c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d93c:	b580      	push	{r7, lr}
    d93e:	b082      	sub	sp, #8
    d940:	af00      	add	r7, sp, #0
    d942:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d944:	2201      	movs	r2, #1
    d946:	6879      	ldr	r1, [r7, #4]
    d948:	2000      	movs	r0, #0
    d94a:	4b03      	ldr	r3, [pc, #12]	; (d958 <usbdc_ctrl_data_end+0x1c>)
    d94c:	4798      	blx	r3
	return false;
    d94e:	2300      	movs	r3, #0
}
    d950:	4618      	mov	r0, r3
    d952:	3708      	adds	r7, #8
    d954:	46bd      	mov	sp, r7
    d956:	bd80      	pop	{r7, pc}
    d958:	0000d7c9 	.word	0x0000d7c9

0000d95c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d95c:	b580      	push	{r7, lr}
    d95e:	b082      	sub	sp, #8
    d960:	af00      	add	r7, sp, #0
    d962:	4603      	mov	r3, r0
    d964:	603a      	str	r2, [r7, #0]
    d966:	71fb      	strb	r3, [r7, #7]
    d968:	460b      	mov	r3, r1
    d96a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d96c:	79bb      	ldrb	r3, [r7, #6]
    d96e:	2b00      	cmp	r3, #0
    d970:	d002      	beq.n	d978 <usbdc_cb_ctl_done+0x1c>
    d972:	2b01      	cmp	r3, #1
    d974:	d004      	beq.n	d980 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d976:	e008      	b.n	d98a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d978:	6838      	ldr	r0, [r7, #0]
    d97a:	4b06      	ldr	r3, [pc, #24]	; (d994 <usbdc_cb_ctl_done+0x38>)
    d97c:	4798      	blx	r3
		break;
    d97e:	e004      	b.n	d98a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d980:	6838      	ldr	r0, [r7, #0]
    d982:	4b05      	ldr	r3, [pc, #20]	; (d998 <usbdc_cb_ctl_done+0x3c>)
    d984:	4798      	blx	r3
    d986:	4603      	mov	r3, r0
    d988:	e000      	b.n	d98c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d98a:	2300      	movs	r3, #0
}
    d98c:	4618      	mov	r0, r3
    d98e:	3708      	adds	r7, #8
    d990:	46bd      	mov	sp, r7
    d992:	bd80      	pop	{r7, pc}
    d994:	0000d8ad 	.word	0x0000d8ad
    d998:	0000d93d 	.word	0x0000d93d

0000d99c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d99c:	b580      	push	{r7, lr}
    d99e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d9a0:	4b10      	ldr	r3, [pc, #64]	; (d9e4 <usbdc_reset+0x48>)
    d9a2:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d9a4:	4b10      	ldr	r3, [pc, #64]	; (d9e8 <usbdc_reset+0x4c>)
    d9a6:	2202      	movs	r2, #2
    d9a8:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d9aa:	4b0f      	ldr	r3, [pc, #60]	; (d9e8 <usbdc_reset+0x4c>)
    d9ac:	2200      	movs	r2, #0
    d9ae:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d9b0:	4b0d      	ldr	r3, [pc, #52]	; (d9e8 <usbdc_reset+0x4c>)
    d9b2:	2200      	movs	r2, #0
    d9b4:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d9b6:	2000      	movs	r0, #0
    d9b8:	4b0c      	ldr	r3, [pc, #48]	; (d9ec <usbdc_reset+0x50>)
    d9ba:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d9bc:	4b0a      	ldr	r3, [pc, #40]	; (d9e8 <usbdc_reset+0x4c>)
    d9be:	7f1b      	ldrb	r3, [r3, #28]
    d9c0:	4618      	mov	r0, r3
    d9c2:	4b0b      	ldr	r3, [pc, #44]	; (d9f0 <usbdc_reset+0x54>)
    d9c4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d9c6:	4a0b      	ldr	r2, [pc, #44]	; (d9f4 <usbdc_reset+0x58>)
    d9c8:	2100      	movs	r1, #0
    d9ca:	2000      	movs	r0, #0
    d9cc:	4b0a      	ldr	r3, [pc, #40]	; (d9f8 <usbdc_reset+0x5c>)
    d9ce:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d9d0:	4a0a      	ldr	r2, [pc, #40]	; (d9fc <usbdc_reset+0x60>)
    d9d2:	2102      	movs	r1, #2
    d9d4:	2000      	movs	r0, #0
    d9d6:	4b08      	ldr	r3, [pc, #32]	; (d9f8 <usbdc_reset+0x5c>)
    d9d8:	4798      	blx	r3
	usb_d_ep_enable(0);
    d9da:	2000      	movs	r0, #0
    d9dc:	4b08      	ldr	r3, [pc, #32]	; (da00 <usbdc_reset+0x64>)
    d9de:	4798      	blx	r3
}
    d9e0:	bf00      	nop
    d9e2:	bd80      	pop	{r7, pc}
    d9e4:	0000d3e9 	.word	0x0000d3e9
    d9e8:	200012a4 	.word	0x200012a4
    d9ec:	00004039 	.word	0x00004039
    d9f0:	00003f75 	.word	0x00003f75
    d9f4:	0000d839 	.word	0x0000d839
    d9f8:	0000438d 	.word	0x0000438d
    d9fc:	0000d95d 	.word	0x0000d95d
    da00:	00004089 	.word	0x00004089

0000da04 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    da04:	b580      	push	{r7, lr}
    da06:	b082      	sub	sp, #8
    da08:	af00      	add	r7, sp, #0
    da0a:	4603      	mov	r3, r0
    da0c:	6039      	str	r1, [r7, #0]
    da0e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    da10:	79fb      	ldrb	r3, [r7, #7]
    da12:	2b00      	cmp	r3, #0
    da14:	d002      	beq.n	da1c <usbd_event_cb+0x18>
    da16:	2b01      	cmp	r3, #1
    da18:	d005      	beq.n	da26 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    da1a:	e007      	b.n	da2c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    da1c:	6839      	ldr	r1, [r7, #0]
    da1e:	2000      	movs	r0, #0
    da20:	4b04      	ldr	r3, [pc, #16]	; (da34 <usbd_event_cb+0x30>)
    da22:	4798      	blx	r3
		break;
    da24:	e002      	b.n	da2c <usbd_event_cb+0x28>
		usbdc_reset();
    da26:	4b04      	ldr	r3, [pc, #16]	; (da38 <usbd_event_cb+0x34>)
    da28:	4798      	blx	r3
		break;
    da2a:	bf00      	nop
	}
}
    da2c:	bf00      	nop
    da2e:	3708      	adds	r7, #8
    da30:	46bd      	mov	sp, r7
    da32:	bd80      	pop	{r7, pc}
    da34:	0000d789 	.word	0x0000d789
    da38:	0000d99d 	.word	0x0000d99d

0000da3c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    da3c:	b580      	push	{r7, lr}
    da3e:	b088      	sub	sp, #32
    da40:	af00      	add	r7, sp, #0
    da42:	60b9      	str	r1, [r7, #8]
    da44:	607a      	str	r2, [r7, #4]
    da46:	461a      	mov	r2, r3
    da48:	4603      	mov	r3, r0
    da4a:	73fb      	strb	r3, [r7, #15]
    da4c:	4613      	mov	r3, r2
    da4e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    da50:	68bb      	ldr	r3, [r7, #8]
    da52:	617b      	str	r3, [r7, #20]
    da54:	687b      	ldr	r3, [r7, #4]
    da56:	61bb      	str	r3, [r7, #24]
    da58:	7bfb      	ldrb	r3, [r7, #15]
    da5a:	773b      	strb	r3, [r7, #28]
    da5c:	7bbb      	ldrb	r3, [r7, #14]
    da5e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    da60:	f107 0314 	add.w	r3, r7, #20
    da64:	4618      	mov	r0, r3
    da66:	4b03      	ldr	r3, [pc, #12]	; (da74 <usbdc_xfer+0x38>)
    da68:	4798      	blx	r3
    da6a:	4603      	mov	r3, r0
}
    da6c:	4618      	mov	r0, r3
    da6e:	3720      	adds	r7, #32
    da70:	46bd      	mov	sp, r7
    da72:	bd80      	pop	{r7, pc}
    da74:	000040f9 	.word	0x000040f9

0000da78 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    da78:	b580      	push	{r7, lr}
    da7a:	b082      	sub	sp, #8
    da7c:	af00      	add	r7, sp, #0
    da7e:	4603      	mov	r3, r0
    da80:	6039      	str	r1, [r7, #0]
    da82:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    da84:	79fb      	ldrb	r3, [r7, #7]
    da86:	2b01      	cmp	r3, #1
    da88:	d009      	beq.n	da9e <usbdc_register_handler+0x26>
    da8a:	2b02      	cmp	r3, #2
    da8c:	d00c      	beq.n	daa8 <usbdc_register_handler+0x30>
    da8e:	2b00      	cmp	r3, #0
    da90:	d000      	beq.n	da94 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    da92:	e00e      	b.n	dab2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    da94:	6839      	ldr	r1, [r7, #0]
    da96:	4809      	ldr	r0, [pc, #36]	; (dabc <usbdc_register_handler+0x44>)
    da98:	4b09      	ldr	r3, [pc, #36]	; (dac0 <usbdc_register_handler+0x48>)
    da9a:	4798      	blx	r3
		break;
    da9c:	e009      	b.n	dab2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    da9e:	6839      	ldr	r1, [r7, #0]
    daa0:	4808      	ldr	r0, [pc, #32]	; (dac4 <usbdc_register_handler+0x4c>)
    daa2:	4b07      	ldr	r3, [pc, #28]	; (dac0 <usbdc_register_handler+0x48>)
    daa4:	4798      	blx	r3
		break;
    daa6:	e004      	b.n	dab2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    daa8:	6839      	ldr	r1, [r7, #0]
    daaa:	4807      	ldr	r0, [pc, #28]	; (dac8 <usbdc_register_handler+0x50>)
    daac:	4b04      	ldr	r3, [pc, #16]	; (dac0 <usbdc_register_handler+0x48>)
    daae:	4798      	blx	r3
		break;
    dab0:	bf00      	nop
	}
}
    dab2:	bf00      	nop
    dab4:	3708      	adds	r7, #8
    dab6:	46bd      	mov	sp, r7
    dab8:	bd80      	pop	{r7, pc}
    daba:	bf00      	nop
    dabc:	200012a8 	.word	0x200012a8
    dac0:	000044e5 	.word	0x000044e5
    dac4:	200012ac 	.word	0x200012ac
    dac8:	200012b0 	.word	0x200012b0

0000dacc <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    dacc:	b580      	push	{r7, lr}
    dace:	b084      	sub	sp, #16
    dad0:	af00      	add	r7, sp, #0
    dad2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    dad4:	687b      	ldr	r3, [r7, #4]
    dad6:	2b00      	cmp	r3, #0
    dad8:	bf14      	ite	ne
    dada:	2301      	movne	r3, #1
    dadc:	2300      	moveq	r3, #0
    dade:	b2db      	uxtb	r3, r3
    dae0:	f240 3255 	movw	r2, #853	; 0x355
    dae4:	4910      	ldr	r1, [pc, #64]	; (db28 <usbdc_init+0x5c>)
    dae6:	4618      	mov	r0, r3
    dae8:	4b10      	ldr	r3, [pc, #64]	; (db2c <usbdc_init+0x60>)
    daea:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    daec:	4b10      	ldr	r3, [pc, #64]	; (db30 <usbdc_init+0x64>)
    daee:	4798      	blx	r3
    daf0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    daf2:	68fb      	ldr	r3, [r7, #12]
    daf4:	2b00      	cmp	r3, #0
    daf6:	da01      	bge.n	dafc <usbdc_init+0x30>
		return rc;
    daf8:	68fb      	ldr	r3, [r7, #12]
    dafa:	e010      	b.n	db1e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    dafc:	2220      	movs	r2, #32
    dafe:	2100      	movs	r1, #0
    db00:	480c      	ldr	r0, [pc, #48]	; (db34 <usbdc_init+0x68>)
    db02:	4b0d      	ldr	r3, [pc, #52]	; (db38 <usbdc_init+0x6c>)
    db04:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    db06:	4a0b      	ldr	r2, [pc, #44]	; (db34 <usbdc_init+0x68>)
    db08:	687b      	ldr	r3, [r7, #4]
    db0a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    db0c:	490b      	ldr	r1, [pc, #44]	; (db3c <usbdc_init+0x70>)
    db0e:	2000      	movs	r0, #0
    db10:	4b0b      	ldr	r3, [pc, #44]	; (db40 <usbdc_init+0x74>)
    db12:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    db14:	490b      	ldr	r1, [pc, #44]	; (db44 <usbdc_init+0x78>)
    db16:	2001      	movs	r0, #1
    db18:	4b09      	ldr	r3, [pc, #36]	; (db40 <usbdc_init+0x74>)
    db1a:	4798      	blx	r3

	return 0;
    db1c:	2300      	movs	r3, #0
}
    db1e:	4618      	mov	r0, r3
    db20:	3710      	adds	r7, #16
    db22:	46bd      	mov	sp, r7
    db24:	bd80      	pop	{r7, pc}
    db26:	bf00      	nop
    db28:	00011120 	.word	0x00011120
    db2c:	00004409 	.word	0x00004409
    db30:	00003e61 	.word	0x00003e61
    db34:	200012a4 	.word	0x200012a4
    db38:	00010a7d 	.word	0x00010a7d
    db3c:	0000d829 	.word	0x0000d829
    db40:	00003f0d 	.word	0x00003f0d
    db44:	0000da05 	.word	0x0000da05

0000db48 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    db48:	b580      	push	{r7, lr}
    db4a:	b082      	sub	sp, #8
    db4c:	af00      	add	r7, sp, #0
    db4e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    db50:	6879      	ldr	r1, [r7, #4]
    db52:	4803      	ldr	r0, [pc, #12]	; (db60 <usbdc_register_function+0x18>)
    db54:	4b03      	ldr	r3, [pc, #12]	; (db64 <usbdc_register_function+0x1c>)
    db56:	4798      	blx	r3
}
    db58:	bf00      	nop
    db5a:	3708      	adds	r7, #8
    db5c:	46bd      	mov	sp, r7
    db5e:	bd80      	pop	{r7, pc}
    db60:	200012b4 	.word	0x200012b4
    db64:	000044e5 	.word	0x000044e5

0000db68 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    db68:	b580      	push	{r7, lr}
    db6a:	b082      	sub	sp, #8
    db6c:	af00      	add	r7, sp, #0
    db6e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    db70:	4b0f      	ldr	r3, [pc, #60]	; (dbb0 <usbdc_start+0x48>)
    db72:	7e9b      	ldrb	r3, [r3, #26]
    db74:	2b00      	cmp	r3, #0
    db76:	d002      	beq.n	db7e <usbdc_start+0x16>
		return ERR_BUSY;
    db78:	f06f 0303 	mvn.w	r3, #3
    db7c:	e013      	b.n	dba6 <usbdc_start+0x3e>
	}

	if (desces) {
    db7e:	687b      	ldr	r3, [r7, #4]
    db80:	2b00      	cmp	r3, #0
    db82:	d00e      	beq.n	dba2 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    db84:	4a0a      	ldr	r2, [pc, #40]	; (dbb0 <usbdc_start+0x48>)
    db86:	687b      	ldr	r3, [r7, #4]
    db88:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    db8a:	687b      	ldr	r3, [r7, #4]
    db8c:	681b      	ldr	r3, [r3, #0]
    db8e:	79da      	ldrb	r2, [r3, #7]
    db90:	4b07      	ldr	r3, [pc, #28]	; (dbb0 <usbdc_start+0x48>)
    db92:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    db94:	4b06      	ldr	r3, [pc, #24]	; (dbb0 <usbdc_start+0x48>)
    db96:	2201      	movs	r2, #1
    db98:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    db9a:	4b06      	ldr	r3, [pc, #24]	; (dbb4 <usbdc_start+0x4c>)
    db9c:	4798      	blx	r3
	return ERR_NONE;
    db9e:	2300      	movs	r3, #0
    dba0:	e001      	b.n	dba6 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    dba2:	f06f 0308 	mvn.w	r3, #8
}
    dba6:	4618      	mov	r0, r3
    dba8:	3708      	adds	r7, #8
    dbaa:	46bd      	mov	sp, r7
    dbac:	bd80      	pop	{r7, pc}
    dbae:	bf00      	nop
    dbb0:	200012a4 	.word	0x200012a4
    dbb4:	00003f31 	.word	0x00003f31

0000dbb8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    dbb8:	b580      	push	{r7, lr}
    dbba:	af00      	add	r7, sp, #0
	usb_d_attach();
    dbbc:	4b01      	ldr	r3, [pc, #4]	; (dbc4 <usbdc_attach+0xc>)
    dbbe:	4798      	blx	r3
}
    dbc0:	bf00      	nop
    dbc2:	bd80      	pop	{r7, pc}
    dbc4:	00003f45 	.word	0x00003f45

0000dbc8 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    dbc8:	b480      	push	{r7}
    dbca:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    dbcc:	4b03      	ldr	r3, [pc, #12]	; (dbdc <usbdc_get_ctrl_buffer+0x14>)
    dbce:	695b      	ldr	r3, [r3, #20]
}
    dbd0:	4618      	mov	r0, r3
    dbd2:	46bd      	mov	sp, r7
    dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    dbd8:	4770      	bx	lr
    dbda:	bf00      	nop
    dbdc:	200012a4 	.word	0x200012a4

0000dbe0 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    dbe0:	b480      	push	{r7}
    dbe2:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    dbe4:	4b07      	ldr	r3, [pc, #28]	; (dc04 <usbdc_get_state+0x24>)
    dbe6:	7e9b      	ldrb	r3, [r3, #26]
    dbe8:	f003 0310 	and.w	r3, r3, #16
    dbec:	2b00      	cmp	r3, #0
    dbee:	d001      	beq.n	dbf4 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    dbf0:	2310      	movs	r3, #16
    dbf2:	e001      	b.n	dbf8 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    dbf4:	4b03      	ldr	r3, [pc, #12]	; (dc04 <usbdc_get_state+0x24>)
    dbf6:	7e9b      	ldrb	r3, [r3, #26]
}
    dbf8:	4618      	mov	r0, r3
    dbfa:	46bd      	mov	sp, r7
    dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc00:	4770      	bx	lr
    dc02:	bf00      	nop
    dc04:	200012a4 	.word	0x200012a4

0000dc08 <usb_get_u16>:
{
    dc08:	b480      	push	{r7}
    dc0a:	b083      	sub	sp, #12
    dc0c:	af00      	add	r7, sp, #0
    dc0e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    dc10:	687b      	ldr	r3, [r7, #4]
    dc12:	781b      	ldrb	r3, [r3, #0]
    dc14:	b29a      	uxth	r2, r3
    dc16:	687b      	ldr	r3, [r7, #4]
    dc18:	3301      	adds	r3, #1
    dc1a:	781b      	ldrb	r3, [r3, #0]
    dc1c:	b29b      	uxth	r3, r3
    dc1e:	021b      	lsls	r3, r3, #8
    dc20:	b29b      	uxth	r3, r3
    dc22:	4413      	add	r3, r2
    dc24:	b29b      	uxth	r3, r3
}
    dc26:	4618      	mov	r0, r3
    dc28:	370c      	adds	r7, #12
    dc2a:	46bd      	mov	sp, r7
    dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc30:	4770      	bx	lr

0000dc32 <usb_desc_len>:
{
    dc32:	b480      	push	{r7}
    dc34:	b083      	sub	sp, #12
    dc36:	af00      	add	r7, sp, #0
    dc38:	6078      	str	r0, [r7, #4]
	return desc[0];
    dc3a:	687b      	ldr	r3, [r7, #4]
    dc3c:	781b      	ldrb	r3, [r3, #0]
}
    dc3e:	4618      	mov	r0, r3
    dc40:	370c      	adds	r7, #12
    dc42:	46bd      	mov	sp, r7
    dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc48:	4770      	bx	lr

0000dc4a <usb_desc_type>:
{
    dc4a:	b480      	push	{r7}
    dc4c:	b083      	sub	sp, #12
    dc4e:	af00      	add	r7, sp, #0
    dc50:	6078      	str	r0, [r7, #4]
	return desc[1];
    dc52:	687b      	ldr	r3, [r7, #4]
    dc54:	3301      	adds	r3, #1
    dc56:	781b      	ldrb	r3, [r3, #0]
}
    dc58:	4618      	mov	r0, r3
    dc5a:	370c      	adds	r7, #12
    dc5c:	46bd      	mov	sp, r7
    dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc62:	4770      	bx	lr

0000dc64 <usb_desc_next>:
{
    dc64:	b580      	push	{r7, lr}
    dc66:	b082      	sub	sp, #8
    dc68:	af00      	add	r7, sp, #0
    dc6a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    dc6c:	6878      	ldr	r0, [r7, #4]
    dc6e:	4b05      	ldr	r3, [pc, #20]	; (dc84 <usb_desc_next+0x20>)
    dc70:	4798      	blx	r3
    dc72:	4603      	mov	r3, r0
    dc74:	461a      	mov	r2, r3
    dc76:	687b      	ldr	r3, [r7, #4]
    dc78:	4413      	add	r3, r2
}
    dc7a:	4618      	mov	r0, r3
    dc7c:	3708      	adds	r7, #8
    dc7e:	46bd      	mov	sp, r7
    dc80:	bd80      	pop	{r7, pc}
    dc82:	bf00      	nop
    dc84:	0000dc33 	.word	0x0000dc33

0000dc88 <usb_cfg_desc_total_len>:
{
    dc88:	b580      	push	{r7, lr}
    dc8a:	b082      	sub	sp, #8
    dc8c:	af00      	add	r7, sp, #0
    dc8e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    dc90:	687b      	ldr	r3, [r7, #4]
    dc92:	3302      	adds	r3, #2
    dc94:	4618      	mov	r0, r3
    dc96:	4b03      	ldr	r3, [pc, #12]	; (dca4 <usb_cfg_desc_total_len+0x1c>)
    dc98:	4798      	blx	r3
    dc9a:	4603      	mov	r3, r0
}
    dc9c:	4618      	mov	r0, r3
    dc9e:	3708      	adds	r7, #8
    dca0:	46bd      	mov	sp, r7
    dca2:	bd80      	pop	{r7, pc}
    dca4:	0000dc09 	.word	0x0000dc09

0000dca8 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    dca8:	b580      	push	{r7, lr}
    dcaa:	b082      	sub	sp, #8
    dcac:	af00      	add	r7, sp, #0
    dcae:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    dcb0:	6878      	ldr	r0, [r7, #4]
    dcb2:	4b05      	ldr	r3, [pc, #20]	; (dcc8 <usb_cfg_desc_next+0x20>)
    dcb4:	4798      	blx	r3
    dcb6:	4603      	mov	r3, r0
    dcb8:	461a      	mov	r2, r3
    dcba:	687b      	ldr	r3, [r7, #4]
    dcbc:	4413      	add	r3, r2
}
    dcbe:	4618      	mov	r0, r3
    dcc0:	3708      	adds	r7, #8
    dcc2:	46bd      	mov	sp, r7
    dcc4:	bd80      	pop	{r7, pc}
    dcc6:	bf00      	nop
    dcc8:	0000dc89 	.word	0x0000dc89

0000dccc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    dccc:	b580      	push	{r7, lr}
    dcce:	b084      	sub	sp, #16
    dcd0:	af00      	add	r7, sp, #0
    dcd2:	60f8      	str	r0, [r7, #12]
    dcd4:	60b9      	str	r1, [r7, #8]
    dcd6:	4613      	mov	r3, r2
    dcd8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    dcda:	e015      	b.n	dd08 <usb_find_desc+0x3c>
		_desc_len_check();
    dcdc:	68f8      	ldr	r0, [r7, #12]
    dcde:	4b0f      	ldr	r3, [pc, #60]	; (dd1c <usb_find_desc+0x50>)
    dce0:	4798      	blx	r3
    dce2:	4603      	mov	r3, r0
    dce4:	2b01      	cmp	r3, #1
    dce6:	d801      	bhi.n	dcec <usb_find_desc+0x20>
    dce8:	2300      	movs	r3, #0
    dcea:	e012      	b.n	dd12 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    dcec:	68f8      	ldr	r0, [r7, #12]
    dcee:	4b0c      	ldr	r3, [pc, #48]	; (dd20 <usb_find_desc+0x54>)
    dcf0:	4798      	blx	r3
    dcf2:	4603      	mov	r3, r0
    dcf4:	461a      	mov	r2, r3
    dcf6:	79fb      	ldrb	r3, [r7, #7]
    dcf8:	4293      	cmp	r3, r2
    dcfa:	d101      	bne.n	dd00 <usb_find_desc+0x34>
			return desc;
    dcfc:	68fb      	ldr	r3, [r7, #12]
    dcfe:	e008      	b.n	dd12 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    dd00:	68f8      	ldr	r0, [r7, #12]
    dd02:	4b08      	ldr	r3, [pc, #32]	; (dd24 <usb_find_desc+0x58>)
    dd04:	4798      	blx	r3
    dd06:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    dd08:	68fa      	ldr	r2, [r7, #12]
    dd0a:	68bb      	ldr	r3, [r7, #8]
    dd0c:	429a      	cmp	r2, r3
    dd0e:	d3e5      	bcc.n	dcdc <usb_find_desc+0x10>
	}
	return NULL;
    dd10:	2300      	movs	r3, #0
}
    dd12:	4618      	mov	r0, r3
    dd14:	3710      	adds	r7, #16
    dd16:	46bd      	mov	sp, r7
    dd18:	bd80      	pop	{r7, pc}
    dd1a:	bf00      	nop
    dd1c:	0000dc33 	.word	0x0000dc33
    dd20:	0000dc4b 	.word	0x0000dc4b
    dd24:	0000dc65 	.word	0x0000dc65

0000dd28 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    dd28:	b580      	push	{r7, lr}
    dd2a:	b082      	sub	sp, #8
    dd2c:	af00      	add	r7, sp, #0
    dd2e:	6078      	str	r0, [r7, #4]
    dd30:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    dd32:	e019      	b.n	dd68 <usb_find_ep_desc+0x40>
		_desc_len_check();
    dd34:	6878      	ldr	r0, [r7, #4]
    dd36:	4b12      	ldr	r3, [pc, #72]	; (dd80 <usb_find_ep_desc+0x58>)
    dd38:	4798      	blx	r3
    dd3a:	4603      	mov	r3, r0
    dd3c:	2b01      	cmp	r3, #1
    dd3e:	d801      	bhi.n	dd44 <usb_find_ep_desc+0x1c>
    dd40:	2300      	movs	r3, #0
    dd42:	e018      	b.n	dd76 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    dd44:	6878      	ldr	r0, [r7, #4]
    dd46:	4b0f      	ldr	r3, [pc, #60]	; (dd84 <usb_find_ep_desc+0x5c>)
    dd48:	4798      	blx	r3
    dd4a:	4603      	mov	r3, r0
    dd4c:	2b04      	cmp	r3, #4
    dd4e:	d010      	beq.n	dd72 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    dd50:	6878      	ldr	r0, [r7, #4]
    dd52:	4b0c      	ldr	r3, [pc, #48]	; (dd84 <usb_find_ep_desc+0x5c>)
    dd54:	4798      	blx	r3
    dd56:	4603      	mov	r3, r0
    dd58:	2b05      	cmp	r3, #5
    dd5a:	d101      	bne.n	dd60 <usb_find_ep_desc+0x38>
			return desc;
    dd5c:	687b      	ldr	r3, [r7, #4]
    dd5e:	e00a      	b.n	dd76 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    dd60:	6878      	ldr	r0, [r7, #4]
    dd62:	4b09      	ldr	r3, [pc, #36]	; (dd88 <usb_find_ep_desc+0x60>)
    dd64:	4798      	blx	r3
    dd66:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    dd68:	687a      	ldr	r2, [r7, #4]
    dd6a:	683b      	ldr	r3, [r7, #0]
    dd6c:	429a      	cmp	r2, r3
    dd6e:	d3e1      	bcc.n	dd34 <usb_find_ep_desc+0xc>
    dd70:	e000      	b.n	dd74 <usb_find_ep_desc+0x4c>
			break;
    dd72:	bf00      	nop
	}
	return NULL;
    dd74:	2300      	movs	r3, #0
}
    dd76:	4618      	mov	r0, r3
    dd78:	3708      	adds	r7, #8
    dd7a:	46bd      	mov	sp, r7
    dd7c:	bd80      	pop	{r7, pc}
    dd7e:	bf00      	nop
    dd80:	0000dc33 	.word	0x0000dc33
    dd84:	0000dc4b 	.word	0x0000dc4b
    dd88:	0000dc65 	.word	0x0000dc65

0000dd8c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    dd8c:	b580      	push	{r7, lr}
    dd8e:	b084      	sub	sp, #16
    dd90:	af00      	add	r7, sp, #0
    dd92:	60f8      	str	r0, [r7, #12]
    dd94:	60b9      	str	r1, [r7, #8]
    dd96:	4613      	mov	r3, r2
    dd98:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    dd9a:	2202      	movs	r2, #2
    dd9c:	68b9      	ldr	r1, [r7, #8]
    dd9e:	68f8      	ldr	r0, [r7, #12]
    dda0:	4b15      	ldr	r3, [pc, #84]	; (ddf8 <usb_find_cfg_desc+0x6c>)
    dda2:	4798      	blx	r3
    dda4:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    dda6:	68fb      	ldr	r3, [r7, #12]
    dda8:	2b00      	cmp	r3, #0
    ddaa:	d11a      	bne.n	dde2 <usb_find_cfg_desc+0x56>
		return NULL;
    ddac:	2300      	movs	r3, #0
    ddae:	e01f      	b.n	ddf0 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    ddb0:	68f8      	ldr	r0, [r7, #12]
    ddb2:	4b12      	ldr	r3, [pc, #72]	; (ddfc <usb_find_cfg_desc+0x70>)
    ddb4:	4798      	blx	r3
    ddb6:	4603      	mov	r3, r0
    ddb8:	2b01      	cmp	r3, #1
    ddba:	d801      	bhi.n	ddc0 <usb_find_cfg_desc+0x34>
    ddbc:	2300      	movs	r3, #0
    ddbe:	e017      	b.n	ddf0 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    ddc0:	68fb      	ldr	r3, [r7, #12]
    ddc2:	3301      	adds	r3, #1
    ddc4:	781b      	ldrb	r3, [r3, #0]
    ddc6:	2b02      	cmp	r3, #2
    ddc8:	d110      	bne.n	ddec <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    ddca:	68fb      	ldr	r3, [r7, #12]
    ddcc:	3305      	adds	r3, #5
    ddce:	781b      	ldrb	r3, [r3, #0]
    ddd0:	79fa      	ldrb	r2, [r7, #7]
    ddd2:	429a      	cmp	r2, r3
    ddd4:	d101      	bne.n	ddda <usb_find_cfg_desc+0x4e>
			return desc;
    ddd6:	68fb      	ldr	r3, [r7, #12]
    ddd8:	e00a      	b.n	ddf0 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    ddda:	68f8      	ldr	r0, [r7, #12]
    dddc:	4b08      	ldr	r3, [pc, #32]	; (de00 <usb_find_cfg_desc+0x74>)
    ddde:	4798      	blx	r3
    dde0:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    dde2:	68fa      	ldr	r2, [r7, #12]
    dde4:	68bb      	ldr	r3, [r7, #8]
    dde6:	429a      	cmp	r2, r3
    dde8:	d3e2      	bcc.n	ddb0 <usb_find_cfg_desc+0x24>
    ddea:	e000      	b.n	ddee <usb_find_cfg_desc+0x62>
			break;
    ddec:	bf00      	nop
	}
	return NULL;
    ddee:	2300      	movs	r3, #0
}
    ddf0:	4618      	mov	r0, r3
    ddf2:	3710      	adds	r7, #16
    ddf4:	46bd      	mov	sp, r7
    ddf6:	bd80      	pop	{r7, pc}
    ddf8:	0000dccd 	.word	0x0000dccd
    ddfc:	0000dc33 	.word	0x0000dc33
    de00:	0000dca9 	.word	0x0000dca9

0000de04 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    de04:	b580      	push	{r7, lr}
    de06:	b086      	sub	sp, #24
    de08:	af00      	add	r7, sp, #0
    de0a:	60f8      	str	r0, [r7, #12]
    de0c:	60b9      	str	r1, [r7, #8]
    de0e:	4613      	mov	r3, r2
    de10:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    de12:	2300      	movs	r3, #0
    de14:	75fb      	strb	r3, [r7, #23]
    de16:	e020      	b.n	de5a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    de18:	2203      	movs	r2, #3
    de1a:	68b9      	ldr	r1, [r7, #8]
    de1c:	68f8      	ldr	r0, [r7, #12]
    de1e:	4b13      	ldr	r3, [pc, #76]	; (de6c <usb_find_str_desc+0x68>)
    de20:	4798      	blx	r3
    de22:	60f8      	str	r0, [r7, #12]
		if (desc) {
    de24:	68fb      	ldr	r3, [r7, #12]
    de26:	2b00      	cmp	r3, #0
    de28:	d015      	beq.n	de56 <usb_find_str_desc+0x52>
			_desc_len_check();
    de2a:	68f8      	ldr	r0, [r7, #12]
    de2c:	4b10      	ldr	r3, [pc, #64]	; (de70 <usb_find_str_desc+0x6c>)
    de2e:	4798      	blx	r3
    de30:	4603      	mov	r3, r0
    de32:	2b01      	cmp	r3, #1
    de34:	d801      	bhi.n	de3a <usb_find_str_desc+0x36>
    de36:	2300      	movs	r3, #0
    de38:	e014      	b.n	de64 <usb_find_str_desc+0x60>
			if (i == str_index) {
    de3a:	7dfa      	ldrb	r2, [r7, #23]
    de3c:	79fb      	ldrb	r3, [r7, #7]
    de3e:	429a      	cmp	r2, r3
    de40:	d101      	bne.n	de46 <usb_find_str_desc+0x42>
				return desc;
    de42:	68fb      	ldr	r3, [r7, #12]
    de44:	e00e      	b.n	de64 <usb_find_str_desc+0x60>
			}
			i++;
    de46:	7dfb      	ldrb	r3, [r7, #23]
    de48:	3301      	adds	r3, #1
    de4a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    de4c:	68f8      	ldr	r0, [r7, #12]
    de4e:	4b09      	ldr	r3, [pc, #36]	; (de74 <usb_find_str_desc+0x70>)
    de50:	4798      	blx	r3
    de52:	60f8      	str	r0, [r7, #12]
    de54:	e001      	b.n	de5a <usb_find_str_desc+0x56>
		} else {
			return NULL;
    de56:	2300      	movs	r3, #0
    de58:	e004      	b.n	de64 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    de5a:	68fa      	ldr	r2, [r7, #12]
    de5c:	68bb      	ldr	r3, [r7, #8]
    de5e:	429a      	cmp	r2, r3
    de60:	d3da      	bcc.n	de18 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    de62:	2300      	movs	r3, #0
}
    de64:	4618      	mov	r0, r3
    de66:	3718      	adds	r7, #24
    de68:	46bd      	mov	sp, r7
    de6a:	bd80      	pop	{r7, pc}
    de6c:	0000dccd 	.word	0x0000dccd
    de70:	0000dc33 	.word	0x0000dc33
    de74:	0000dc65 	.word	0x0000dc65

0000de78 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    de78:	b480      	push	{r7}
    de7a:	b083      	sub	sp, #12
    de7c:	af00      	add	r7, sp, #0
    de7e:	6078      	str	r0, [r7, #4]
    de80:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    de82:	687b      	ldr	r3, [r7, #4]
    de84:	683a      	ldr	r2, [r7, #0]
    de86:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    de88:	687b      	ldr	r3, [r7, #4]
    de8a:	4618      	mov	r0, r3
    de8c:	370c      	adds	r7, #12
    de8e:	46bd      	mov	sp, r7
    de90:	bc80      	pop	{r7}
    de92:	4770      	bx	lr

0000de94 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    de94:	b480      	push	{r7}
    de96:	b083      	sub	sp, #12
    de98:	af00      	add	r7, sp, #0
    de9a:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    de9c:	687b      	ldr	r3, [r7, #4]
    de9e:	4618      	mov	r0, r3
    dea0:	370c      	adds	r7, #12
    dea2:	46bd      	mov	sp, r7
    dea4:	bc80      	pop	{r7}
    dea6:	4770      	bx	lr

0000dea8 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    dea8:	b580      	push	{r7, lr}
    deaa:	b082      	sub	sp, #8
    deac:	af00      	add	r7, sp, #0
    deae:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    deb0:	687b      	ldr	r3, [r7, #4]
    deb2:	4a23      	ldr	r2, [pc, #140]	; (df40 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    deb4:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    deb6:	687b      	ldr	r3, [r7, #4]
    deb8:	4a21      	ldr	r2, [pc, #132]	; (df40 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    deba:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    debc:	687b      	ldr	r3, [r7, #4]
    debe:	691a      	ldr	r2, [r3, #16]
    dec0:	687b      	ldr	r3, [r7, #4]
    dec2:	330c      	adds	r3, #12
    dec4:	4619      	mov	r1, r3
    dec6:	4610      	mov	r0, r2
    dec8:	4b1e      	ldr	r3, [pc, #120]	; (df44 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    deca:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    decc:	687b      	ldr	r3, [r7, #4]
    dece:	691b      	ldr	r3, [r3, #16]
    ded0:	4618      	mov	r0, r3
    ded2:	4b1d      	ldr	r3, [pc, #116]	; (df48 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    ded4:	4798      	blx	r3
    ded6:	4603      	mov	r3, r0
    ded8:	b2da      	uxtb	r2, r3
    deda:	687b      	ldr	r3, [r7, #4]
    dedc:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    dede:	687b      	ldr	r3, [r7, #4]
    dee0:	7d1b      	ldrb	r3, [r3, #20]
    dee2:	2b00      	cmp	r3, #0
    dee4:	bf0c      	ite	eq
    dee6:	2301      	moveq	r3, #1
    dee8:	2300      	movne	r3, #0
    deea:	b2da      	uxtb	r2, r3
    deec:	687b      	ldr	r3, [r7, #4]
    deee:	725a      	strb	r2, [r3, #9]
	if (isOK)
    def0:	687b      	ldr	r3, [r7, #4]
    def2:	7a5b      	ldrb	r3, [r3, #9]
    def4:	b2db      	uxtb	r3, r3
    def6:	2b00      	cmp	r3, #0
    def8:	d116      	bne.n	df28 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    defa:	687b      	ldr	r3, [r7, #4]
    defc:	691b      	ldr	r3, [r3, #16]
    defe:	4618      	mov	r0, r3
    df00:	4b12      	ldr	r3, [pc, #72]	; (df4c <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    df02:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    df04:	687b      	ldr	r3, [r7, #4]
    df06:	691b      	ldr	r3, [r3, #16]
    df08:	4618      	mov	r0, r3
    df0a:	4b0f      	ldr	r3, [pc, #60]	; (df48 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    df0c:	4798      	blx	r3
    df0e:	4603      	mov	r3, r0
    df10:	b2da      	uxtb	r2, r3
    df12:	687b      	ldr	r3, [r7, #4]
    df14:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    df16:	687b      	ldr	r3, [r7, #4]
    df18:	7d1b      	ldrb	r3, [r3, #20]
    df1a:	2b00      	cmp	r3, #0
    df1c:	bf0c      	ite	eq
    df1e:	2301      	moveq	r3, #1
    df20:	2300      	movne	r3, #0
    df22:	b2da      	uxtb	r2, r3
    df24:	687b      	ldr	r3, [r7, #4]
    df26:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    df28:	687b      	ldr	r3, [r7, #4]
    df2a:	7a5b      	ldrb	r3, [r3, #9]
    df2c:	b2da      	uxtb	r2, r3
    df2e:	687b      	ldr	r3, [r7, #4]
    df30:	721a      	strb	r2, [r3, #8]
	return isOK;
    df32:	687b      	ldr	r3, [r7, #4]
    df34:	7a5b      	ldrb	r3, [r3, #9]
    df36:	b2db      	uxtb	r3, r3
	
}
    df38:	4618      	mov	r0, r3
    df3a:	3708      	adds	r7, #8
    df3c:	46bd      	mov	sp, r7
    df3e:	bd80      	pop	{r7, pc}
    df40:	200012dc 	.word	0x200012dc
    df44:	00003203 	.word	0x00003203
    df48:	00003189 	.word	0x00003189
    df4c:	000031a9 	.word	0x000031a9

0000df50 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    df50:	b580      	push	{r7, lr}
    df52:	b082      	sub	sp, #8
    df54:	af00      	add	r7, sp, #0
    df56:	6078      	str	r0, [r7, #4]
    df58:	460b      	mov	r3, r1
    df5a:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    df5c:	687b      	ldr	r3, [r7, #4]
    df5e:	691b      	ldr	r3, [r3, #16]
    df60:	78fa      	ldrb	r2, [r7, #3]
    df62:	b211      	sxth	r1, r2
    df64:	f44f 6200 	mov.w	r2, #2048	; 0x800
    df68:	4618      	mov	r0, r3
    df6a:	4b03      	ldr	r3, [pc, #12]	; (df78 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    df6c:	4798      	blx	r3
    df6e:	4603      	mov	r3, r0
}
    df70:	4618      	mov	r0, r3
    df72:	3708      	adds	r7, #8
    df74:	46bd      	mov	sp, r7
    df76:	bd80      	pop	{r7, pc}
    df78:	000031c9 	.word	0x000031c9

0000df7c <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    df7c:	b580      	push	{r7, lr}
    df7e:	b086      	sub	sp, #24
    df80:	af00      	add	r7, sp, #0
    df82:	60f8      	str	r0, [r7, #12]
    df84:	60b9      	str	r1, [r7, #8]
    df86:	4613      	mov	r3, r2
    df88:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    df8a:	68fb      	ldr	r3, [r7, #12]
    df8c:	68db      	ldr	r3, [r3, #12]
    df8e:	88fa      	ldrh	r2, [r7, #6]
    df90:	68b9      	ldr	r1, [r7, #8]
    df92:	4618      	mov	r0, r3
    df94:	4b03      	ldr	r3, [pc, #12]	; (dfa4 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    df96:	4798      	blx	r3
    df98:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    df9a:	697b      	ldr	r3, [r7, #20]
}
    df9c:	4618      	mov	r0, r3
    df9e:	3718      	adds	r7, #24
    dfa0:	46bd      	mov	sp, r7
    dfa2:	bd80      	pop	{r7, pc}
    dfa4:	0000f82d 	.word	0x0000f82d

0000dfa8 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    dfa8:	b580      	push	{r7, lr}
    dfaa:	b086      	sub	sp, #24
    dfac:	af00      	add	r7, sp, #0
    dfae:	60f8      	str	r0, [r7, #12]
    dfb0:	60b9      	str	r1, [r7, #8]
    dfb2:	4613      	mov	r3, r2
    dfb4:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    dfb6:	68fb      	ldr	r3, [r7, #12]
    dfb8:	68db      	ldr	r3, [r3, #12]
    dfba:	88fa      	ldrh	r2, [r7, #6]
    dfbc:	68b9      	ldr	r1, [r7, #8]
    dfbe:	4618      	mov	r0, r3
    dfc0:	4b03      	ldr	r3, [pc, #12]	; (dfd0 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    dfc2:	4798      	blx	r3
    dfc4:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    dfc6:	697b      	ldr	r3, [r7, #20]
}
    dfc8:	4618      	mov	r0, r3
    dfca:	3718      	adds	r7, #24
    dfcc:	46bd      	mov	sp, r7
    dfce:	bd80      	pop	{r7, pc}
    dfd0:	0000f87d 	.word	0x0000f87d

0000dfd4 <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    dfd4:	b580      	push	{r7, lr}
    dfd6:	b082      	sub	sp, #8
    dfd8:	af00      	add	r7, sp, #0
    dfda:	6078      	str	r0, [r7, #4]
    dfdc:	6039      	str	r1, [r7, #0]
    dfde:	687b      	ldr	r3, [r7, #4]
    dfe0:	2b01      	cmp	r3, #1
    dfe2:	d10d      	bne.n	e000 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    dfe4:	683b      	ldr	r3, [r7, #0]
    dfe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dfea:	4293      	cmp	r3, r2
    dfec:	d108      	bne.n	e000 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    dfee:	4906      	ldr	r1, [pc, #24]	; (e008 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dff0:	4806      	ldr	r0, [pc, #24]	; (e00c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dff2:	4b07      	ldr	r3, [pc, #28]	; (e010 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    dff4:	4798      	blx	r3
    dff6:	4a07      	ldr	r2, [pc, #28]	; (e014 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    dff8:	4907      	ldr	r1, [pc, #28]	; (e018 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    dffa:	4804      	ldr	r0, [pc, #16]	; (e00c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dffc:	4b07      	ldr	r3, [pc, #28]	; (e01c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    dffe:	4798      	blx	r3
    e000:	bf00      	nop
    e002:	3708      	adds	r7, #8
    e004:	46bd      	mov	sp, r7
    e006:	bd80      	pop	{r7, pc}
    e008:	2000ac18 	.word	0x2000ac18
    e00c:	200012c4 	.word	0x200012c4
    e010:	0000de79 	.word	0x0000de79
    e014:	20000000 	.word	0x20000000
    e018:	0000de95 	.word	0x0000de95
    e01c:	000108c5 	.word	0x000108c5

0000e020 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    e020:	b580      	push	{r7, lr}
    e022:	af00      	add	r7, sp, #0
    e024:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e028:	2001      	movs	r0, #1
    e02a:	4b01      	ldr	r3, [pc, #4]	; (e030 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    e02c:	4798      	blx	r3
    e02e:	bd80      	pop	{r7, pc}
    e030:	0000dfd5 	.word	0x0000dfd5

0000e034 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
    e034:	b480      	push	{r7}
    e036:	b083      	sub	sp, #12
    e038:	af00      	add	r7, sp, #0
    e03a:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
    e03c:	687b      	ldr	r3, [r7, #4]
    e03e:	4618      	mov	r0, r3
    e040:	370c      	adds	r7, #12
    e042:	46bd      	mov	sp, r7
    e044:	bc80      	pop	{r7}
    e046:	4770      	bx	lr

0000e048 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
    e048:	b480      	push	{r7}
    e04a:	b083      	sub	sp, #12
    e04c:	af00      	add	r7, sp, #0
    e04e:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
    e050:	687b      	ldr	r3, [r7, #4]
    e052:	4618      	mov	r0, r3
    e054:	370c      	adds	r7, #12
    e056:	46bd      	mov	sp, r7
    e058:	bc80      	pop	{r7}
    e05a:	4770      	bx	lr

0000e05c <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
    e05c:	b480      	push	{r7}
    e05e:	b085      	sub	sp, #20
    e060:	af00      	add	r7, sp, #0
    e062:	6078      	str	r0, [r7, #4]
    e064:	460b      	mov	r3, r1
    e066:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
    e068:	2300      	movs	r3, #0
    e06a:	73fb      	strb	r3, [r7, #15]
    e06c:	7bfb      	ldrb	r3, [r7, #15]
    e06e:	2b01      	cmp	r3, #1
    e070:	dc13      	bgt.n	e09a <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
    e072:	7bfb      	ldrb	r3, [r7, #15]
    e074:	78f9      	ldrb	r1, [r7, #3]
    e076:	7bfa      	ldrb	r2, [r7, #15]
    e078:	2080      	movs	r0, #128	; 0x80
    e07a:	fa40 f202 	asr.w	r2, r0, r2
    e07e:	400a      	ands	r2, r1
    e080:	2a00      	cmp	r2, #0
    e082:	bfcc      	ite	gt
    e084:	2201      	movgt	r2, #1
    e086:	2200      	movle	r2, #0
    e088:	b2d1      	uxtb	r1, r2
    e08a:	687a      	ldr	r2, [r7, #4]
    e08c:	4413      	add	r3, r2
    e08e:	460a      	mov	r2, r1
    e090:	755a      	strb	r2, [r3, #21]
	for (uint8_t ii = 0; ii < 2; ii++)
    e092:	7bfb      	ldrb	r3, [r7, #15]
    e094:	3301      	adds	r3, #1
    e096:	73fb      	strb	r3, [r7, #15]
    e098:	e7e8      	b.n	e06c <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
    e09a:	bf00      	nop
    e09c:	3714      	adds	r7, #20
    e09e:	46bd      	mov	sp, r7
    e0a0:	bc80      	pop	{r7}
    e0a2:	4770      	bx	lr

0000e0a4 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
    e0a4:	b480      	push	{r7}
    e0a6:	b085      	sub	sp, #20
    e0a8:	af00      	add	r7, sp, #0
    e0aa:	6078      	str	r0, [r7, #4]
    e0ac:	460b      	mov	r3, r1
    e0ae:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
    e0b0:	2300      	movs	r3, #0
    e0b2:	73fb      	strb	r3, [r7, #15]
    e0b4:	7bfb      	ldrb	r3, [r7, #15]
    e0b6:	2b02      	cmp	r3, #2
    e0b8:	dc15      	bgt.n	e0e6 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
    e0ba:	7bfb      	ldrb	r3, [r7, #15]
    e0bc:	f1c3 0302 	rsb	r3, r3, #2
    e0c0:	78f9      	ldrb	r1, [r7, #3]
    e0c2:	7bfa      	ldrb	r2, [r7, #15]
    e0c4:	2020      	movs	r0, #32
    e0c6:	fa40 f202 	asr.w	r2, r0, r2
    e0ca:	400a      	ands	r2, r1
    e0cc:	2a00      	cmp	r2, #0
    e0ce:	bfcc      	ite	gt
    e0d0:	2201      	movgt	r2, #1
    e0d2:	2200      	movle	r2, #0
    e0d4:	b2d1      	uxtb	r1, r2
    e0d6:	687a      	ldr	r2, [r7, #4]
    e0d8:	4413      	add	r3, r2
    e0da:	460a      	mov	r2, r1
    e0dc:	75da      	strb	r2, [r3, #23]
	for (uint8_t ii = 0; ii < 3; ii++)
    e0de:	7bfb      	ldrb	r3, [r7, #15]
    e0e0:	3301      	adds	r3, #1
    e0e2:	73fb      	strb	r3, [r7, #15]
    e0e4:	e7e6      	b.n	e0b4 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
    e0e6:	bf00      	nop
    e0e8:	3714      	adds	r7, #20
    e0ea:	46bd      	mov	sp, r7
    e0ec:	bc80      	pop	{r7}
    e0ee:	4770      	bx	lr

0000e0f0 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
    e0f0:	b580      	push	{r7, lr}
    e0f2:	b084      	sub	sp, #16
    e0f4:	af00      	add	r7, sp, #0
    e0f6:	60f8      	str	r0, [r7, #12]
    e0f8:	60b9      	str	r1, [r7, #8]
    e0fa:	4613      	mov	r3, r2
    e0fc:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
    e0fe:	79fb      	ldrb	r3, [r7, #7]
    e100:	4619      	mov	r1, r3
    e102:	68b8      	ldr	r0, [r7, #8]
    e104:	4b0d      	ldr	r3, [pc, #52]	; (e13c <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
    e106:	4798      	blx	r3
	FillLimitSwitch(v);
    e108:	79fb      	ldrb	r3, [r7, #7]
    e10a:	4619      	mov	r1, r3
    e10c:	68b8      	ldr	r0, [r7, #8]
    e10e:	4b0c      	ldr	r3, [pc, #48]	; (e140 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
    e110:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
    e112:	79fb      	ldrb	r3, [r7, #7]
    e114:	f003 0301 	and.w	r3, r3, #1
    e118:	2b00      	cmp	r3, #0
    e11a:	bfcc      	ite	gt
    e11c:	2301      	movgt	r3, #1
    e11e:	2300      	movle	r3, #0
    e120:	b2da      	uxtb	r2, r3
    e122:	68bb      	ldr	r3, [r7, #8]
    e124:	769a      	strb	r2, [r3, #26]
	return controlStatus;
    e126:	68fa      	ldr	r2, [r7, #12]
    e128:	68bb      	ldr	r3, [r7, #8]
    e12a:	3315      	adds	r3, #21
    e12c:	6819      	ldr	r1, [r3, #0]
    e12e:	6011      	str	r1, [r2, #0]
    e130:	889b      	ldrh	r3, [r3, #4]
    e132:	8093      	strh	r3, [r2, #4]
}
    e134:	68f8      	ldr	r0, [r7, #12]
    e136:	3710      	adds	r7, #16
    e138:	46bd      	mov	sp, r7
    e13a:	bd80      	pop	{r7, pc}
    e13c:	0000e05d 	.word	0x0000e05d
    e140:	0000e0a5 	.word	0x0000e0a5

0000e144 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
    e144:	b480      	push	{r7}
    e146:	b085      	sub	sp, #20
    e148:	af00      	add	r7, sp, #0
    e14a:	60f8      	str	r0, [r7, #12]
    e14c:	60b9      	str	r1, [r7, #8]
    e14e:	4613      	mov	r3, r2
    e150:	71fb      	strb	r3, [r7, #7]
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
    e152:	79fb      	ldrb	r3, [r7, #7]
    e154:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e158:	2b00      	cmp	r3, #0
    e15a:	bfcc      	ite	gt
    e15c:	2301      	movgt	r3, #1
    e15e:	2300      	movle	r3, #0
    e160:	b2da      	uxtb	r2, r3
    e162:	68bb      	ldr	r3, [r7, #8]
    e164:	76da      	strb	r2, [r3, #27]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
    e166:	79fb      	ldrb	r3, [r7, #7]
    e168:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e16c:	2b00      	cmp	r3, #0
    e16e:	bfcc      	ite	gt
    e170:	2301      	movgt	r3, #1
    e172:	2300      	movle	r3, #0
    e174:	b2da      	uxtb	r2, r3
    e176:	68bb      	ldr	r3, [r7, #8]
    e178:	771a      	strb	r2, [r3, #28]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
    e17a:	79fb      	ldrb	r3, [r7, #7]
    e17c:	f003 0320 	and.w	r3, r3, #32
    e180:	2b00      	cmp	r3, #0
    e182:	bfcc      	ite	gt
    e184:	2301      	movgt	r3, #1
    e186:	2300      	movle	r3, #0
    e188:	b2da      	uxtb	r2, r3
    e18a:	68bb      	ldr	r3, [r7, #8]
    e18c:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
    e18e:	79fb      	ldrb	r3, [r7, #7]
    e190:	f003 0310 	and.w	r3, r3, #16
    e194:	2b00      	cmp	r3, #0
    e196:	bfcc      	ite	gt
    e198:	2301      	movgt	r3, #1
    e19a:	2300      	movle	r3, #0
    e19c:	b2da      	uxtb	r2, r3
    e19e:	68bb      	ldr	r3, [r7, #8]
    e1a0:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
    e1a2:	79fb      	ldrb	r3, [r7, #7]
    e1a4:	f003 0308 	and.w	r3, r3, #8
    e1a8:	2b00      	cmp	r3, #0
    e1aa:	bfcc      	ite	gt
    e1ac:	2301      	movgt	r3, #1
    e1ae:	2300      	movle	r3, #0
    e1b0:	b2da      	uxtb	r2, r3
    e1b2:	68bb      	ldr	r3, [r7, #8]
    e1b4:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
    e1b6:	79fb      	ldrb	r3, [r7, #7]
    e1b8:	f003 0304 	and.w	r3, r3, #4
    e1bc:	2b00      	cmp	r3, #0
    e1be:	bfcc      	ite	gt
    e1c0:	2301      	movgt	r3, #1
    e1c2:	2300      	movle	r3, #0
    e1c4:	b2da      	uxtb	r2, r3
    e1c6:	68bb      	ldr	r3, [r7, #8]
    e1c8:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
    e1cc:	79fb      	ldrb	r3, [r7, #7]
    e1ce:	f003 0302 	and.w	r3, r3, #2
    e1d2:	2b00      	cmp	r3, #0
    e1d4:	bfcc      	ite	gt
    e1d6:	2301      	movgt	r3, #1
    e1d8:	2300      	movle	r3, #0
    e1da:	b2da      	uxtb	r2, r3
    e1dc:	68bb      	ldr	r3, [r7, #8]
    e1de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
    e1e2:	79fb      	ldrb	r3, [r7, #7]
    e1e4:	f003 0301 	and.w	r3, r3, #1
    e1e8:	2b00      	cmp	r3, #0
    e1ea:	bfcc      	ite	gt
    e1ec:	2301      	movgt	r3, #1
    e1ee:	2300      	movle	r3, #0
    e1f0:	b2da      	uxtb	r2, r3
    e1f2:	68bb      	ldr	r3, [r7, #8]
    e1f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	return controlOutputs;
    e1f8:	68fa      	ldr	r2, [r7, #12]
    e1fa:	68bb      	ldr	r3, [r7, #8]
    e1fc:	331b      	adds	r3, #27
    e1fe:	6819      	ldr	r1, [r3, #0]
    e200:	685b      	ldr	r3, [r3, #4]
    e202:	6011      	str	r1, [r2, #0]
    e204:	6053      	str	r3, [r2, #4]
    e206:	68f8      	ldr	r0, [r7, #12]
    e208:	3714      	adds	r7, #20
    e20a:	46bd      	mov	sp, r7
    e20c:	bc80      	pop	{r7}
    e20e:	4770      	bx	lr

0000e210 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    e210:	b480      	push	{r7}
    e212:	b083      	sub	sp, #12
    e214:	af00      	add	r7, sp, #0
    e216:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    e218:	687b      	ldr	r3, [r7, #4]
    e21a:	4618      	mov	r0, r3
    e21c:	370c      	adds	r7, #12
    e21e:	46bd      	mov	sp, r7
    e220:	bc80      	pop	{r7}
    e222:	4770      	bx	lr

0000e224 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    e224:	b480      	push	{r7}
    e226:	b083      	sub	sp, #12
    e228:	af00      	add	r7, sp, #0
    e22a:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    e22c:	687b      	ldr	r3, [r7, #4]
    e22e:	4618      	mov	r0, r3
    e230:	370c      	adds	r7, #12
    e232:	46bd      	mov	sp, r7
    e234:	bc80      	pop	{r7}
    e236:	4770      	bx	lr

0000e238 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    e238:	b480      	push	{r7}
    e23a:	b085      	sub	sp, #20
    e23c:	af00      	add	r7, sp, #0
    e23e:	60f8      	str	r0, [r7, #12]
    e240:	460b      	mov	r3, r1
    e242:	607a      	str	r2, [r7, #4]
    e244:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    e246:	687b      	ldr	r3, [r7, #4]
    e248:	681a      	ldr	r2, [r3, #0]
    e24a:	68fb      	ldr	r3, [r7, #12]
    e24c:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    e24e:	687b      	ldr	r3, [r7, #4]
    e250:	685a      	ldr	r2, [r3, #4]
    e252:	68fb      	ldr	r3, [r7, #12]
    e254:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    e256:	68fb      	ldr	r3, [r7, #12]
    e258:	7afa      	ldrb	r2, [r7, #11]
    e25a:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    e25c:	68fb      	ldr	r3, [r7, #12]
    e25e:	687a      	ldr	r2, [r7, #4]
    e260:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    e262:	68fb      	ldr	r3, [r7, #12]
    e264:	68db      	ldr	r3, [r3, #12]
    e266:	7a5b      	ldrb	r3, [r3, #9]
    e268:	b2da      	uxtb	r2, r3
    e26a:	68fb      	ldr	r3, [r7, #12]
    e26c:	719a      	strb	r2, [r3, #6]
	return isOK;
    e26e:	68fb      	ldr	r3, [r7, #12]
    e270:	799b      	ldrb	r3, [r3, #6]
    e272:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    e274:	4618      	mov	r0, r3
    e276:	3714      	adds	r7, #20
    e278:	46bd      	mov	sp, r7
    e27a:	bc80      	pop	{r7}
    e27c:	4770      	bx	lr

0000e27e <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    e27e:	b480      	push	{r7}
    e280:	b083      	sub	sp, #12
    e282:	af00      	add	r7, sp, #0
    e284:	6078      	str	r0, [r7, #4]
    e286:	460b      	mov	r3, r1
    e288:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    e28a:	78fb      	ldrb	r3, [r7, #3]
    e28c:	f003 0307 	and.w	r3, r3, #7
    e290:	b2db      	uxtb	r3, r3
}
    e292:	4618      	mov	r0, r3
    e294:	370c      	adds	r7, #12
    e296:	46bd      	mov	sp, r7
    e298:	bc80      	pop	{r7}
    e29a:	4770      	bx	lr

0000e29c <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    e29c:	b580      	push	{r7, lr}
    e29e:	b082      	sub	sp, #8
    e2a0:	af00      	add	r7, sp, #0
    e2a2:	6078      	str	r0, [r7, #4]
    e2a4:	460b      	mov	r3, r1
    e2a6:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    e2a8:	687b      	ldr	r3, [r7, #4]
    e2aa:	68da      	ldr	r2, [r3, #12]
    e2ac:	687b      	ldr	r3, [r7, #4]
    e2ae:	7a1b      	ldrb	r3, [r3, #8]
    e2b0:	4619      	mov	r1, r3
    e2b2:	4610      	mov	r0, r2
    e2b4:	4b0a      	ldr	r3, [pc, #40]	; (e2e0 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    e2b6:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    e2b8:	687b      	ldr	r3, [r7, #4]
    e2ba:	68db      	ldr	r3, [r3, #12]
    e2bc:	1cf9      	adds	r1, r7, #3
    e2be:	2201      	movs	r2, #1
    e2c0:	4618      	mov	r0, r3
    e2c2:	4b08      	ldr	r3, [pc, #32]	; (e2e4 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    e2c4:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    e2c6:	687b      	ldr	r3, [r7, #4]
    e2c8:	68db      	ldr	r3, [r3, #12]
    e2ca:	6879      	ldr	r1, [r7, #4]
    e2cc:	2201      	movs	r2, #1
    e2ce:	4618      	mov	r0, r3
    e2d0:	4b05      	ldr	r3, [pc, #20]	; (e2e8 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    e2d2:	4798      	blx	r3

	return registerValue;
    e2d4:	687b      	ldr	r3, [r7, #4]
    e2d6:	781b      	ldrb	r3, [r3, #0]
}
    e2d8:	4618      	mov	r0, r3
    e2da:	3708      	adds	r7, #8
    e2dc:	46bd      	mov	sp, r7
    e2de:	bd80      	pop	{r7, pc}
    e2e0:	0000df51 	.word	0x0000df51
    e2e4:	0000df7d 	.word	0x0000df7d
    e2e8:	0000dfa9 	.word	0x0000dfa9

0000e2ec <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    e2ec:	b580      	push	{r7, lr}
    e2ee:	b084      	sub	sp, #16
    e2f0:	af00      	add	r7, sp, #0
    e2f2:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    e2f4:	687b      	ldr	r3, [r7, #4]
    e2f6:	68da      	ldr	r2, [r3, #12]
    e2f8:	687b      	ldr	r3, [r7, #4]
    e2fa:	7a1b      	ldrb	r3, [r3, #8]
    e2fc:	4619      	mov	r1, r3
    e2fe:	4610      	mov	r0, r2
    e300:	4b06      	ldr	r3, [pc, #24]	; (e31c <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    e302:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    e304:	2109      	movs	r1, #9
    e306:	6878      	ldr	r0, [r7, #4]
    e308:	4b05      	ldr	r3, [pc, #20]	; (e320 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    e30a:	4798      	blx	r3
    e30c:	4603      	mov	r3, r0
    e30e:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    e310:	7bfb      	ldrb	r3, [r7, #15]
}
    e312:	4618      	mov	r0, r3
    e314:	3710      	adds	r7, #16
    e316:	46bd      	mov	sp, r7
    e318:	bd80      	pop	{r7, pc}
    e31a:	bf00      	nop
    e31c:	0000df51 	.word	0x0000df51
    e320:	0000e29d 	.word	0x0000e29d

0000e324 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    e324:	b580      	push	{r7, lr}
    e326:	b084      	sub	sp, #16
    e328:	af00      	add	r7, sp, #0
    e32a:	6078      	str	r0, [r7, #4]
    e32c:	460b      	mov	r3, r1
    e32e:	70fb      	strb	r3, [r7, #3]
    e330:	4613      	mov	r3, r2
    e332:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    e334:	687b      	ldr	r3, [r7, #4]
    e336:	68da      	ldr	r2, [r3, #12]
    e338:	687b      	ldr	r3, [r7, #4]
    e33a:	7a1b      	ldrb	r3, [r3, #8]
    e33c:	4619      	mov	r1, r3
    e33e:	4610      	mov	r0, r2
    e340:	4b09      	ldr	r3, [pc, #36]	; (e368 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    e342:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    e344:	78fb      	ldrb	r3, [r7, #3]
    e346:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    e348:	78bb      	ldrb	r3, [r7, #2]
    e34a:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    e34c:	687b      	ldr	r3, [r7, #4]
    e34e:	68db      	ldr	r3, [r3, #12]
    e350:	f107 010c 	add.w	r1, r7, #12
    e354:	2202      	movs	r2, #2
    e356:	4618      	mov	r0, r3
    e358:	4b04      	ldr	r3, [pc, #16]	; (e36c <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    e35a:	4798      	blx	r3
    e35c:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    e35e:	4618      	mov	r0, r3
    e360:	3710      	adds	r7, #16
    e362:	46bd      	mov	sp, r7
    e364:	bd80      	pop	{r7, pc}
    e366:	bf00      	nop
    e368:	0000df51 	.word	0x0000df51
    e36c:	0000df7d 	.word	0x0000df7d

0000e370 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    e370:	b580      	push	{r7, lr}
    e372:	b082      	sub	sp, #8
    e374:	af00      	add	r7, sp, #0
    e376:	6078      	str	r0, [r7, #4]
    e378:	460b      	mov	r3, r1
    e37a:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    e37c:	687b      	ldr	r3, [r7, #4]
    e37e:	68da      	ldr	r2, [r3, #12]
    e380:	687b      	ldr	r3, [r7, #4]
    e382:	7a1b      	ldrb	r3, [r3, #8]
    e384:	4619      	mov	r1, r3
    e386:	4610      	mov	r0, r2
    e388:	4b06      	ldr	r3, [pc, #24]	; (e3a4 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    e38a:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    e38c:	78fb      	ldrb	r3, [r7, #3]
    e38e:	461a      	mov	r2, r3
    e390:	2109      	movs	r1, #9
    e392:	6878      	ldr	r0, [r7, #4]
    e394:	4b04      	ldr	r3, [pc, #16]	; (e3a8 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    e396:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
    e398:	78fb      	ldrb	r3, [r7, #3]
}
    e39a:	4618      	mov	r0, r3
    e39c:	3708      	adds	r7, #8
    e39e:	46bd      	mov	sp, r7
    e3a0:	bd80      	pop	{r7, pc}
    e3a2:	bf00      	nop
    e3a4:	0000df51 	.word	0x0000df51
    e3a8:	0000e325 	.word	0x0000e325

0000e3ac <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    e3ac:	b580      	push	{r7, lr}
    e3ae:	b084      	sub	sp, #16
    e3b0:	af00      	add	r7, sp, #0
    e3b2:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e3b4:	2300      	movs	r3, #0
    e3b6:	73fb      	strb	r3, [r7, #15]
    e3b8:	7bfb      	ldrb	r3, [r7, #15]
    e3ba:	2b07      	cmp	r3, #7
    e3bc:	dc0f      	bgt.n	e3de <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    e3be:	7bfb      	ldrb	r3, [r7, #15]
    e3c0:	2201      	movs	r2, #1
    e3c2:	4619      	mov	r1, r3
    e3c4:	6878      	ldr	r0, [r7, #4]
    e3c6:	4b08      	ldr	r3, [pc, #32]	; (e3e8 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    e3c8:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    e3ca:	7bfb      	ldrb	r3, [r7, #15]
    e3cc:	2201      	movs	r2, #1
    e3ce:	4619      	mov	r1, r3
    e3d0:	6878      	ldr	r0, [r7, #4]
    e3d2:	4b06      	ldr	r3, [pc, #24]	; (e3ec <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    e3d4:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e3d6:	7bfb      	ldrb	r3, [r7, #15]
    e3d8:	3301      	adds	r3, #1
    e3da:	73fb      	strb	r3, [r7, #15]
    e3dc:	e7ec      	b.n	e3b8 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    e3de:	bf00      	nop
    e3e0:	3710      	adds	r7, #16
    e3e2:	46bd      	mov	sp, r7
    e3e4:	bd80      	pop	{r7, pc}
    e3e6:	bf00      	nop
    e3e8:	0000e525 	.word	0x0000e525
    e3ec:	0000e55d 	.word	0x0000e55d

0000e3f0 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    e3f0:	b580      	push	{r7, lr}
    e3f2:	b084      	sub	sp, #16
    e3f4:	af00      	add	r7, sp, #0
    e3f6:	6078      	str	r0, [r7, #4]
    e3f8:	460b      	mov	r3, r1
    e3fa:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    e3fc:	78fb      	ldrb	r3, [r7, #3]
    e3fe:	2b00      	cmp	r3, #0
    e400:	dd23      	ble.n	e44a <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    e402:	2300      	movs	r3, #0
    e404:	73fb      	strb	r3, [r7, #15]
    e406:	7bfb      	ldrb	r3, [r7, #15]
    e408:	2b07      	cmp	r3, #7
    e40a:	dc21      	bgt.n	e450 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    e40c:	78fa      	ldrb	r2, [r7, #3]
    e40e:	7bfb      	ldrb	r3, [r7, #15]
    e410:	fa42 f303 	asr.w	r3, r2, r3
    e414:	f003 0301 	and.w	r3, r3, #1
    e418:	2b00      	cmp	r3, #0
    e41a:	d00c      	beq.n	e436 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    e41c:	7bfb      	ldrb	r3, [r7, #15]
    e41e:	2201      	movs	r2, #1
    e420:	4619      	mov	r1, r3
    e422:	6878      	ldr	r0, [r7, #4]
    e424:	4b0c      	ldr	r3, [pc, #48]	; (e458 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    e426:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    e428:	7bfb      	ldrb	r3, [r7, #15]
    e42a:	2201      	movs	r2, #1
    e42c:	4619      	mov	r1, r3
    e42e:	6878      	ldr	r0, [r7, #4]
    e430:	4b0a      	ldr	r3, [pc, #40]	; (e45c <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    e432:	4798      	blx	r3
    e434:	e005      	b.n	e442 <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    e436:	7bfb      	ldrb	r3, [r7, #15]
    e438:	2200      	movs	r2, #0
    e43a:	4619      	mov	r1, r3
    e43c:	6878      	ldr	r0, [r7, #4]
    e43e:	4b06      	ldr	r3, [pc, #24]	; (e458 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    e440:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    e442:	7bfb      	ldrb	r3, [r7, #15]
    e444:	3301      	adds	r3, #1
    e446:	73fb      	strb	r3, [r7, #15]
    e448:	e7dd      	b.n	e406 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    e44a:	6878      	ldr	r0, [r7, #4]
    e44c:	4b04      	ldr	r3, [pc, #16]	; (e460 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    e44e:	4798      	blx	r3
	}
	
}
    e450:	bf00      	nop
    e452:	3710      	adds	r7, #16
    e454:	46bd      	mov	sp, r7
    e456:	bd80      	pop	{r7, pc}
    e458:	0000e525 	.word	0x0000e525
    e45c:	0000e55d 	.word	0x0000e55d
    e460:	0000e465 	.word	0x0000e465

0000e464 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    e464:	b580      	push	{r7, lr}
    e466:	b084      	sub	sp, #16
    e468:	af00      	add	r7, sp, #0
    e46a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e46c:	2300      	movs	r3, #0
    e46e:	73fb      	strb	r3, [r7, #15]
    e470:	7bfb      	ldrb	r3, [r7, #15]
    e472:	2b07      	cmp	r3, #7
    e474:	dc09      	bgt.n	e48a <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    e476:	7bfb      	ldrb	r3, [r7, #15]
    e478:	2200      	movs	r2, #0
    e47a:	4619      	mov	r1, r3
    e47c:	6878      	ldr	r0, [r7, #4]
    e47e:	4b05      	ldr	r3, [pc, #20]	; (e494 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    e480:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e482:	7bfb      	ldrb	r3, [r7, #15]
    e484:	3301      	adds	r3, #1
    e486:	73fb      	strb	r3, [r7, #15]
    e488:	e7f2      	b.n	e470 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    e48a:	bf00      	nop
    e48c:	3710      	adds	r7, #16
    e48e:	46bd      	mov	sp, r7
    e490:	bd80      	pop	{r7, pc}
    e492:	bf00      	nop
    e494:	0000e525 	.word	0x0000e525

0000e498 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    e498:	b580      	push	{r7, lr}
    e49a:	b084      	sub	sp, #16
    e49c:	af00      	add	r7, sp, #0
    e49e:	6078      	str	r0, [r7, #4]
    e4a0:	4608      	mov	r0, r1
    e4a2:	4611      	mov	r1, r2
    e4a4:	461a      	mov	r2, r3
    e4a6:	4603      	mov	r3, r0
    e4a8:	70fb      	strb	r3, [r7, #3]
    e4aa:	460b      	mov	r3, r1
    e4ac:	70bb      	strb	r3, [r7, #2]
    e4ae:	4613      	mov	r3, r2
    e4b0:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    e4b2:	787b      	ldrb	r3, [r7, #1]
    e4b4:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    e4b6:	78fb      	ldrb	r3, [r7, #3]
    e4b8:	4619      	mov	r1, r3
    e4ba:	6878      	ldr	r0, [r7, #4]
    e4bc:	4b16      	ldr	r3, [pc, #88]	; (e518 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    e4be:	4798      	blx	r3
    e4c0:	4603      	mov	r3, r0
    e4c2:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    e4c4:	7bfb      	ldrb	r3, [r7, #15]
    e4c6:	4619      	mov	r1, r3
    e4c8:	6878      	ldr	r0, [r7, #4]
    e4ca:	4b14      	ldr	r3, [pc, #80]	; (e51c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    e4cc:	4798      	blx	r3
    e4ce:	4603      	mov	r3, r0
    e4d0:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    e4d2:	78bb      	ldrb	r3, [r7, #2]
    e4d4:	2b00      	cmp	r3, #0
    e4d6:	d009      	beq.n	e4ec <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    e4d8:	7bba      	ldrb	r2, [r7, #14]
    e4da:	7b7b      	ldrb	r3, [r7, #13]
    e4dc:	4619      	mov	r1, r3
    e4de:	2301      	movs	r3, #1
    e4e0:	408b      	lsls	r3, r1
    e4e2:	b2db      	uxtb	r3, r3
    e4e4:	4313      	orrs	r3, r2
    e4e6:	b2db      	uxtb	r3, r3
    e4e8:	73bb      	strb	r3, [r7, #14]
    e4ea:	e00a      	b.n	e502 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    e4ec:	7bba      	ldrb	r2, [r7, #14]
    e4ee:	7b7b      	ldrb	r3, [r7, #13]
    e4f0:	4619      	mov	r1, r3
    e4f2:	2301      	movs	r3, #1
    e4f4:	408b      	lsls	r3, r1
    e4f6:	b2db      	uxtb	r3, r3
    e4f8:	43db      	mvns	r3, r3
    e4fa:	b2db      	uxtb	r3, r3
    e4fc:	4013      	ands	r3, r2
    e4fe:	b2db      	uxtb	r3, r3
    e500:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    e502:	7bba      	ldrb	r2, [r7, #14]
    e504:	7bfb      	ldrb	r3, [r7, #15]
    e506:	4619      	mov	r1, r3
    e508:	6878      	ldr	r0, [r7, #4]
    e50a:	4b05      	ldr	r3, [pc, #20]	; (e520 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    e50c:	4798      	blx	r3
}
    e50e:	bf00      	nop
    e510:	3710      	adds	r7, #16
    e512:	46bd      	mov	sp, r7
    e514:	bd80      	pop	{r7, pc}
    e516:	bf00      	nop
    e518:	0000e27f 	.word	0x0000e27f
    e51c:	0000e29d 	.word	0x0000e29d
    e520:	0000e325 	.word	0x0000e325

0000e524 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    e524:	b590      	push	{r4, r7, lr}
    e526:	b085      	sub	sp, #20
    e528:	af02      	add	r7, sp, #8
    e52a:	6078      	str	r0, [r7, #4]
    e52c:	460b      	mov	r3, r1
    e52e:	70fb      	strb	r3, [r7, #3]
    e530:	4613      	mov	r3, r2
    e532:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    e534:	78bb      	ldrb	r3, [r7, #2]
    e536:	2b01      	cmp	r3, #1
    e538:	bf0c      	ite	eq
    e53a:	2301      	moveq	r3, #1
    e53c:	2300      	movne	r3, #0
    e53e:	b2db      	uxtb	r3, r3
    e540:	461a      	mov	r2, r3
    e542:	78f9      	ldrb	r1, [r7, #3]
    e544:	2300      	movs	r3, #0
    e546:	9300      	str	r3, [sp, #0]
    e548:	2300      	movs	r3, #0
    e54a:	6878      	ldr	r0, [r7, #4]
    e54c:	4c02      	ldr	r4, [pc, #8]	; (e558 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    e54e:	47a0      	blx	r4
}
    e550:	bf00      	nop
    e552:	370c      	adds	r7, #12
    e554:	46bd      	mov	sp, r7
    e556:	bd90      	pop	{r4, r7, pc}
    e558:	0000e499 	.word	0x0000e499

0000e55c <_ZN14MCP23008_Class6pullUpEhh>:
	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	return	writeRegister(regAddr,gpio)==0;
}

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    e55c:	b590      	push	{r4, r7, lr}
    e55e:	b085      	sub	sp, #20
    e560:	af02      	add	r7, sp, #8
    e562:	6078      	str	r0, [r7, #4]
    e564:	460b      	mov	r3, r1
    e566:	70fb      	strb	r3, [r7, #3]
    e568:	4613      	mov	r3, r2
    e56a:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    e56c:	78ba      	ldrb	r2, [r7, #2]
    e56e:	78f9      	ldrb	r1, [r7, #3]
    e570:	2306      	movs	r3, #6
    e572:	9300      	str	r3, [sp, #0]
    e574:	2306      	movs	r3, #6
    e576:	6878      	ldr	r0, [r7, #4]
    e578:	4c02      	ldr	r4, [pc, #8]	; (e584 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    e57a:	47a0      	blx	r4
}
    e57c:	bf00      	nop
    e57e:	370c      	adds	r7, #12
    e580:	46bd      	mov	sp, r7
    e582:	bd90      	pop	{r4, r7, pc}
    e584:	0000e499 	.word	0x0000e499

0000e588 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
    e588:	b580      	push	{r7, lr}
    e58a:	b082      	sub	sp, #8
    e58c:	af00      	add	r7, sp, #0
    e58e:	6078      	str	r0, [r7, #4]
    e590:	6039      	str	r1, [r7, #0]
    e592:	687b      	ldr	r3, [r7, #4]
    e594:	2b01      	cmp	r3, #1
    e596:	d10d      	bne.n	e5b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e598:	683b      	ldr	r3, [r7, #0]
    e59a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e59e:	4293      	cmp	r3, r2
    e5a0:	d108      	bne.n	e5b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e5a2:	4906      	ldr	r1, [pc, #24]	; (e5bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e5a4:	4806      	ldr	r0, [pc, #24]	; (e5c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e5a6:	4b07      	ldr	r3, [pc, #28]	; (e5c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e5a8:	4798      	blx	r3
    e5aa:	4a07      	ldr	r2, [pc, #28]	; (e5c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e5ac:	4907      	ldr	r1, [pc, #28]	; (e5cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e5ae:	4804      	ldr	r0, [pc, #16]	; (e5c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e5b0:	4b07      	ldr	r3, [pc, #28]	; (e5d0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e5b2:	4798      	blx	r3
    e5b4:	bf00      	nop
    e5b6:	3708      	adds	r7, #8
    e5b8:	46bd      	mov	sp, r7
    e5ba:	bd80      	pop	{r7, pc}
    e5bc:	2000ac18 	.word	0x2000ac18
    e5c0:	2000135c 	.word	0x2000135c
    e5c4:	0000de79 	.word	0x0000de79
    e5c8:	20000000 	.word	0x20000000
    e5cc:	0000de95 	.word	0x0000de95
    e5d0:	000108c5 	.word	0x000108c5

0000e5d4 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
    e5d4:	b580      	push	{r7, lr}
    e5d6:	af00      	add	r7, sp, #0
    e5d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e5dc:	2001      	movs	r0, #1
    e5de:	4b01      	ldr	r3, [pc, #4]	; (e5e4 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
    e5e0:	4798      	blx	r3
    e5e2:	bd80      	pop	{r7, pc}
    e5e4:	0000e589 	.word	0x0000e589

0000e5e8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    e5e8:	b480      	push	{r7}
    e5ea:	b083      	sub	sp, #12
    e5ec:	af00      	add	r7, sp, #0
    e5ee:	6078      	str	r0, [r7, #4]
    e5f0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e5f2:	687b      	ldr	r3, [r7, #4]
    e5f4:	683a      	ldr	r2, [r7, #0]
    e5f6:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    e5f8:	687b      	ldr	r3, [r7, #4]
    e5fa:	68db      	ldr	r3, [r3, #12]
    e5fc:	2200      	movs	r2, #0
    e5fe:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    e600:	4a06      	ldr	r2, [pc, #24]	; (e61c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    e602:	687b      	ldr	r3, [r7, #4]
    e604:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e606:	687b      	ldr	r3, [r7, #4]
    e608:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e60c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    e60e:	687b      	ldr	r3, [r7, #4]
    e610:	4618      	mov	r0, r3
    e612:	370c      	adds	r7, #12
    e614:	46bd      	mov	sp, r7
    e616:	bc80      	pop	{r7}
    e618:	4770      	bx	lr
    e61a:	bf00      	nop
    e61c:	20001474 	.word	0x20001474

0000e620 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    e620:	b480      	push	{r7}
    e622:	b083      	sub	sp, #12
    e624:	af00      	add	r7, sp, #0
    e626:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e628:	687b      	ldr	r3, [r7, #4]
    e62a:	2200      	movs	r2, #0
    e62c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e62e:	687b      	ldr	r3, [r7, #4]
    e630:	4618      	mov	r0, r3
    e632:	370c      	adds	r7, #12
    e634:	46bd      	mov	sp, r7
    e636:	bc80      	pop	{r7}
    e638:	4770      	bx	lr
	...

0000e63c <_ZL9InitArrayv>:


static void InitArray(){
    e63c:	b480      	push	{r7}
    e63e:	b083      	sub	sp, #12
    e640:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    e642:	2301      	movs	r3, #1
    e644:	607b      	str	r3, [r7, #4]
    e646:	687b      	ldr	r3, [r7, #4]
    e648:	2b1f      	cmp	r3, #31
    e64a:	dc34      	bgt.n	e6b6 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    e64c:	491e      	ldr	r1, [pc, #120]	; (e6c8 <_ZL9InitArrayv+0x8c>)
    e64e:	687a      	ldr	r2, [r7, #4]
    e650:	4613      	mov	r3, r2
    e652:	009b      	lsls	r3, r3, #2
    e654:	4413      	add	r3, r2
    e656:	009b      	lsls	r3, r3, #2
    e658:	440b      	add	r3, r1
    e65a:	2200      	movs	r2, #0
    e65c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    e65e:	491a      	ldr	r1, [pc, #104]	; (e6c8 <_ZL9InitArrayv+0x8c>)
    e660:	687a      	ldr	r2, [r7, #4]
    e662:	4613      	mov	r3, r2
    e664:	009b      	lsls	r3, r3, #2
    e666:	4413      	add	r3, r2
    e668:	009b      	lsls	r3, r3, #2
    e66a:	440b      	add	r3, r1
    e66c:	330c      	adds	r3, #12
    e66e:	2200      	movs	r2, #0
    e670:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    e672:	687b      	ldr	r3, [r7, #4]
    e674:	1e5a      	subs	r2, r3, #1
    e676:	6879      	ldr	r1, [r7, #4]
    e678:	460b      	mov	r3, r1
    e67a:	009b      	lsls	r3, r3, #2
    e67c:	440b      	add	r3, r1
    e67e:	009b      	lsls	r3, r3, #2
    e680:	4911      	ldr	r1, [pc, #68]	; (e6c8 <_ZL9InitArrayv+0x8c>)
    e682:	4419      	add	r1, r3
    e684:	4810      	ldr	r0, [pc, #64]	; (e6c8 <_ZL9InitArrayv+0x8c>)
    e686:	4613      	mov	r3, r2
    e688:	009b      	lsls	r3, r3, #2
    e68a:	4413      	add	r3, r2
    e68c:	009b      	lsls	r3, r3, #2
    e68e:	4403      	add	r3, r0
    e690:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    e692:	4a0e      	ldr	r2, [pc, #56]	; (e6cc <_ZL9InitArrayv+0x90>)
    e694:	687b      	ldr	r3, [r7, #4]
    e696:	2100      	movs	r1, #0
    e698:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    e69c:	687b      	ldr	r3, [r7, #4]
    e69e:	3b01      	subs	r3, #1
    e6a0:	687a      	ldr	r2, [r7, #4]
    e6a2:	0092      	lsls	r2, r2, #2
    e6a4:	4909      	ldr	r1, [pc, #36]	; (e6cc <_ZL9InitArrayv+0x90>)
    e6a6:	440a      	add	r2, r1
    e6a8:	4908      	ldr	r1, [pc, #32]	; (e6cc <_ZL9InitArrayv+0x90>)
    e6aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    e6ae:	687b      	ldr	r3, [r7, #4]
    e6b0:	3301      	adds	r3, #1
    e6b2:	607b      	str	r3, [r7, #4]
    e6b4:	e7c7      	b.n	e646 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    e6b6:	4b06      	ldr	r3, [pc, #24]	; (e6d0 <_ZL9InitArrayv+0x94>)
    e6b8:	2201      	movs	r2, #1
    e6ba:	701a      	strb	r2, [r3, #0]
		
}
    e6bc:	bf00      	nop
    e6be:	370c      	adds	r7, #12
    e6c0:	46bd      	mov	sp, r7
    e6c2:	bc80      	pop	{r7}
    e6c4:	4770      	bx	lr
    e6c6:	bf00      	nop
    e6c8:	20001478 	.word	0x20001478
    e6cc:	200016f8 	.word	0x200016f8
    e6d0:	20001778 	.word	0x20001778

0000e6d4 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    e6d4:	b580      	push	{r7, lr}
    e6d6:	b082      	sub	sp, #8
    e6d8:	af00      	add	r7, sp, #0
    e6da:	6078      	str	r0, [r7, #4]
	ticks=0;
    e6dc:	687b      	ldr	r3, [r7, #4]
    e6de:	2200      	movs	r2, #0
    e6e0:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    e6e2:	4b0d      	ldr	r3, [pc, #52]	; (e718 <_ZN11Timer_Class4InitEv+0x44>)
    e6e4:	781b      	ldrb	r3, [r3, #0]
    e6e6:	f083 0301 	eor.w	r3, r3, #1
    e6ea:	b2db      	uxtb	r3, r3
    e6ec:	2b00      	cmp	r3, #0
    e6ee:	d001      	beq.n	e6f4 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    e6f0:	4b0a      	ldr	r3, [pc, #40]	; (e71c <_ZN11Timer_Class4InitEv+0x48>)
    e6f2:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    e6f4:	6878      	ldr	r0, [r7, #4]
    e6f6:	4b0a      	ldr	r3, [pc, #40]	; (e720 <_ZN11Timer_Class4InitEv+0x4c>)
    e6f8:	4798      	blx	r3
    e6fa:	4603      	mov	r3, r0
    e6fc:	2b00      	cmp	r3, #0
    e6fe:	bf0c      	ite	eq
    e700:	2301      	moveq	r3, #1
    e702:	2300      	movne	r3, #0
    e704:	b2da      	uxtb	r2, r3
    e706:	687b      	ldr	r3, [r7, #4]
    e708:	709a      	strb	r2, [r3, #2]
	return isOK;
    e70a:	687b      	ldr	r3, [r7, #4]
    e70c:	789b      	ldrb	r3, [r3, #2]
    e70e:	b2db      	uxtb	r3, r3
}
    e710:	4618      	mov	r0, r3
    e712:	3708      	adds	r7, #8
    e714:	46bd      	mov	sp, r7
    e716:	bd80      	pop	{r7, pc}
    e718:	20001778 	.word	0x20001778
    e71c:	0000e63d 	.word	0x0000e63d
    e720:	0000e725 	.word	0x0000e725

0000e724 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    e724:	b580      	push	{r7, lr}
    e726:	b084      	sub	sp, #16
    e728:	af00      	add	r7, sp, #0
    e72a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e72c:	687b      	ldr	r3, [r7, #4]
    e72e:	68db      	ldr	r3, [r3, #12]
    e730:	4618      	mov	r0, r3
    e732:	4b04      	ldr	r3, [pc, #16]	; (e744 <_ZN11Timer_Class5StartEv+0x20>)
    e734:	4798      	blx	r3
    e736:	60f8      	str	r0, [r7, #12]
	return status;
    e738:	68fb      	ldr	r3, [r7, #12]
	
}
    e73a:	4618      	mov	r0, r3
    e73c:	3710      	adds	r7, #16
    e73e:	46bd      	mov	sp, r7
    e740:	bd80      	pop	{r7, pc}
    e742:	bf00      	nop
    e744:	00003671 	.word	0x00003671

0000e748 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    e748:	b580      	push	{r7, lr}
    e74a:	b084      	sub	sp, #16
    e74c:	af00      	add	r7, sp, #0
    e74e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e750:	687b      	ldr	r3, [r7, #4]
    e752:	68db      	ldr	r3, [r3, #12]
    e754:	4618      	mov	r0, r3
    e756:	4b05      	ldr	r3, [pc, #20]	; (e76c <_ZN11Timer_Class4StopEv+0x24>)
    e758:	4798      	blx	r3
    e75a:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e75c:	687b      	ldr	r3, [r7, #4]
    e75e:	2200      	movs	r2, #0
    e760:	705a      	strb	r2, [r3, #1]
	return status;
    e762:	68fb      	ldr	r3, [r7, #12]
}
    e764:	4618      	mov	r0, r3
    e766:	3710      	adds	r7, #16
    e768:	46bd      	mov	sp, r7
    e76a:	bd80      	pop	{r7, pc}
    e76c:	000036d9 	.word	0x000036d9

0000e770 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e770:	b580      	push	{r7, lr}
    e772:	b086      	sub	sp, #24
    e774:	af00      	add	r7, sp, #0
    e776:	60f8      	str	r0, [r7, #12]
    e778:	60b9      	str	r1, [r7, #8]
    e77a:	607a      	str	r2, [r7, #4]
    e77c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    e77e:	68b9      	ldr	r1, [r7, #8]
    e780:	68f8      	ldr	r0, [r7, #12]
    e782:	4b0e      	ldr	r3, [pc, #56]	; (e7bc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e784:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    e786:	68fb      	ldr	r3, [r7, #12]
    e788:	699b      	ldr	r3, [r3, #24]
    e78a:	687a      	ldr	r2, [r7, #4]
    e78c:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e78e:	68fb      	ldr	r3, [r7, #12]
    e790:	699b      	ldr	r3, [r3, #24]
    e792:	68ba      	ldr	r2, [r7, #8]
    e794:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e796:	68fb      	ldr	r3, [r7, #12]
    e798:	699b      	ldr	r3, [r3, #24]
    e79a:	78fa      	ldrb	r2, [r7, #3]
    e79c:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e79e:	68fb      	ldr	r3, [r7, #12]
    e7a0:	68da      	ldr	r2, [r3, #12]
    e7a2:	68fb      	ldr	r3, [r7, #12]
    e7a4:	699b      	ldr	r3, [r3, #24]
    e7a6:	4619      	mov	r1, r3
    e7a8:	4610      	mov	r0, r2
    e7aa:	4b05      	ldr	r3, [pc, #20]	; (e7c0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    e7ac:	4798      	blx	r3
    e7ae:	6178      	str	r0, [r7, #20]
	
	return status;
    e7b0:	697b      	ldr	r3, [r7, #20]
}
    e7b2:	4618      	mov	r0, r3
    e7b4:	3718      	adds	r7, #24
    e7b6:	46bd      	mov	sp, r7
    e7b8:	bd80      	pop	{r7, pc}
    e7ba:	bf00      	nop
    e7bc:	0000e94d 	.word	0x0000e94d
    e7c0:	00003745 	.word	0x00003745

0000e7c4 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    e7c4:	b580      	push	{r7, lr}
    e7c6:	b086      	sub	sp, #24
    e7c8:	af00      	add	r7, sp, #0
    e7ca:	60f8      	str	r0, [r7, #12]
    e7cc:	60b9      	str	r1, [r7, #8]
    e7ce:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    e7d0:	687a      	ldr	r2, [r7, #4]
    e7d2:	68b9      	ldr	r1, [r7, #8]
    e7d4:	68f8      	ldr	r0, [r7, #12]
    e7d6:	4b0c      	ldr	r3, [pc, #48]	; (e808 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    e7d8:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    e7da:	68fb      	ldr	r3, [r7, #12]
    e7dc:	68db      	ldr	r3, [r3, #12]
    e7de:	681b      	ldr	r3, [r3, #0]
    e7e0:	699b      	ldr	r3, [r3, #24]
    e7e2:	68fa      	ldr	r2, [r7, #12]
    e7e4:	68d2      	ldr	r2, [r2, #12]
    e7e6:	3204      	adds	r2, #4
    e7e8:	4610      	mov	r0, r2
    e7ea:	4798      	blx	r3
    e7ec:	4603      	mov	r3, r0
    e7ee:	2b00      	cmp	r3, #0
    e7f0:	d105      	bne.n	e7fe <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    e7f2:	68fb      	ldr	r3, [r7, #12]
    e7f4:	68db      	ldr	r3, [r3, #12]
    e7f6:	4618      	mov	r0, r3
    e7f8:	4b04      	ldr	r3, [pc, #16]	; (e80c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    e7fa:	4798      	blx	r3
    e7fc:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    e7fe:	697b      	ldr	r3, [r7, #20]
}
    e800:	4618      	mov	r0, r3
    e802:	3718      	adds	r7, #24
    e804:	46bd      	mov	sp, r7
    e806:	bd80      	pop	{r7, pc}
    e808:	0000e811 	.word	0x0000e811
    e80c:	00003671 	.word	0x00003671

0000e810 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    e810:	b590      	push	{r4, r7, lr}
    e812:	b087      	sub	sp, #28
    e814:	af00      	add	r7, sp, #0
    e816:	60f8      	str	r0, [r7, #12]
    e818:	60b9      	str	r1, [r7, #8]
    e81a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    e81c:	2301      	movs	r3, #1
    e81e:	687a      	ldr	r2, [r7, #4]
    e820:	68b9      	ldr	r1, [r7, #8]
    e822:	68f8      	ldr	r0, [r7, #12]
    e824:	4c03      	ldr	r4, [pc, #12]	; (e834 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    e826:	47a0      	blx	r4
    e828:	6178      	str	r0, [r7, #20]
		return status;
    e82a:	697b      	ldr	r3, [r7, #20]
}
    e82c:	4618      	mov	r0, r3
    e82e:	371c      	adds	r7, #28
    e830:	46bd      	mov	sp, r7
    e832:	bd90      	pop	{r4, r7, pc}
    e834:	0000e771 	.word	0x0000e771

0000e838 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    e838:	b580      	push	{r7, lr}
    e83a:	b082      	sub	sp, #8
    e83c:	af00      	add	r7, sp, #0
    e83e:	6078      	str	r0, [r7, #4]
    e840:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e842:	6839      	ldr	r1, [r7, #0]
    e844:	6878      	ldr	r0, [r7, #4]
    e846:	4b0f      	ldr	r3, [pc, #60]	; (e884 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    e848:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e84a:	687b      	ldr	r3, [r7, #4]
    e84c:	68db      	ldr	r3, [r3, #12]
    e84e:	f103 0218 	add.w	r2, r3, #24
    e852:	687b      	ldr	r3, [r7, #4]
    e854:	699b      	ldr	r3, [r3, #24]
    e856:	4619      	mov	r1, r3
    e858:	4610      	mov	r0, r2
    e85a:	4b0b      	ldr	r3, [pc, #44]	; (e888 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    e85c:	4798      	blx	r3
    e85e:	4603      	mov	r3, r0
    e860:	2b00      	cmp	r3, #0
    e862:	d007      	beq.n	e874 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e864:	687b      	ldr	r3, [r7, #4]
    e866:	68da      	ldr	r2, [r3, #12]
    e868:	687b      	ldr	r3, [r7, #4]
    e86a:	699b      	ldr	r3, [r3, #24]
    e86c:	4619      	mov	r1, r3
    e86e:	4610      	mov	r0, r2
    e870:	4b06      	ldr	r3, [pc, #24]	; (e88c <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    e872:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e874:	687b      	ldr	r3, [r7, #4]
    e876:	699b      	ldr	r3, [r3, #24]
    e878:	2200      	movs	r2, #0
    e87a:	60da      	str	r2, [r3, #12]
}
    e87c:	bf00      	nop
    e87e:	3708      	adds	r7, #8
    e880:	46bd      	mov	sp, r7
    e882:	bd80      	pop	{r7, pc}
    e884:	0000e9cd 	.word	0x0000e9cd
    e888:	00004431 	.word	0x00004431
    e88c:	00003849 	.word	0x00003849

0000e890 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e890:	b590      	push	{r4, r7, lr}
    e892:	b087      	sub	sp, #28
    e894:	af00      	add	r7, sp, #0
    e896:	60f8      	str	r0, [r7, #12]
    e898:	60b9      	str	r1, [r7, #8]
    e89a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e89c:	2300      	movs	r3, #0
    e89e:	687a      	ldr	r2, [r7, #4]
    e8a0:	68b9      	ldr	r1, [r7, #8]
    e8a2:	68f8      	ldr	r0, [r7, #12]
    e8a4:	4c0c      	ldr	r4, [pc, #48]	; (e8d8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    e8a6:	47a0      	blx	r4
    e8a8:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    e8aa:	68fb      	ldr	r3, [r7, #12]
    e8ac:	68db      	ldr	r3, [r3, #12]
    e8ae:	681b      	ldr	r3, [r3, #0]
    e8b0:	699b      	ldr	r3, [r3, #24]
    e8b2:	68fa      	ldr	r2, [r7, #12]
    e8b4:	68d2      	ldr	r2, [r2, #12]
    e8b6:	3204      	adds	r2, #4
    e8b8:	4610      	mov	r0, r2
    e8ba:	4798      	blx	r3
    e8bc:	4603      	mov	r3, r0
    e8be:	2b00      	cmp	r3, #0
    e8c0:	d105      	bne.n	e8ce <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    e8c2:	68fb      	ldr	r3, [r7, #12]
    e8c4:	68db      	ldr	r3, [r3, #12]
    e8c6:	4618      	mov	r0, r3
    e8c8:	4b04      	ldr	r3, [pc, #16]	; (e8dc <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    e8ca:	4798      	blx	r3
    e8cc:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    e8ce:	697b      	ldr	r3, [r7, #20]
}
    e8d0:	4618      	mov	r0, r3
    e8d2:	371c      	adds	r7, #28
    e8d4:	46bd      	mov	sp, r7
    e8d6:	bd90      	pop	{r4, r7, pc}
    e8d8:	0000e771 	.word	0x0000e771
    e8dc:	00003671 	.word	0x00003671

0000e8e0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    e8e0:	b480      	push	{r7}
    e8e2:	b085      	sub	sp, #20
    e8e4:	af00      	add	r7, sp, #0
    e8e6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e8e8:	2300      	movs	r3, #0
    e8ea:	73fb      	strb	r3, [r7, #15]
    e8ec:	7bfb      	ldrb	r3, [r7, #15]
    e8ee:	2b1f      	cmp	r3, #31
    e8f0:	dc23      	bgt.n	e93a <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e8f2:	687b      	ldr	r3, [r7, #4]
    e8f4:	7f1a      	ldrb	r2, [r3, #28]
    e8f6:	7bfb      	ldrb	r3, [r7, #15]
    e8f8:	4413      	add	r3, r2
    e8fa:	b2db      	uxtb	r3, r3
    e8fc:	f003 031f 	and.w	r3, r3, #31
    e900:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    e902:	7bba      	ldrb	r2, [r7, #14]
    e904:	4910      	ldr	r1, [pc, #64]	; (e948 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e906:	4613      	mov	r3, r2
    e908:	009b      	lsls	r3, r3, #2
    e90a:	4413      	add	r3, r2
    e90c:	009b      	lsls	r3, r3, #2
    e90e:	440b      	add	r3, r1
    e910:	330c      	adds	r3, #12
    e912:	681b      	ldr	r3, [r3, #0]
    e914:	2b00      	cmp	r3, #0
    e916:	d10c      	bne.n	e932 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    e918:	7bba      	ldrb	r2, [r7, #14]
    e91a:	4613      	mov	r3, r2
    e91c:	009b      	lsls	r3, r3, #2
    e91e:	4413      	add	r3, r2
    e920:	009b      	lsls	r3, r3, #2
    e922:	4a09      	ldr	r2, [pc, #36]	; (e948 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e924:	441a      	add	r2, r3
    e926:	687b      	ldr	r3, [r7, #4]
    e928:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e92a:	687b      	ldr	r3, [r7, #4]
    e92c:	7bba      	ldrb	r2, [r7, #14]
    e92e:	771a      	strb	r2, [r3, #28]
			return;
    e930:	e006      	b.n	e940 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e932:	7bfb      	ldrb	r3, [r7, #15]
    e934:	3301      	adds	r3, #1
    e936:	73fb      	strb	r3, [r7, #15]
    e938:	e7d8      	b.n	e8ec <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    e93a:	687b      	ldr	r3, [r7, #4]
    e93c:	4a02      	ldr	r2, [pc, #8]	; (e948 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e93e:	619a      	str	r2, [r3, #24]

}
    e940:	3714      	adds	r7, #20
    e942:	46bd      	mov	sp, r7
    e944:	bc80      	pop	{r7}
    e946:	4770      	bx	lr
    e948:	20001478 	.word	0x20001478

0000e94c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    e94c:	b580      	push	{r7, lr}
    e94e:	b084      	sub	sp, #16
    e950:	af00      	add	r7, sp, #0
    e952:	6078      	str	r0, [r7, #4]
    e954:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e956:	2300      	movs	r3, #0
    e958:	73fb      	strb	r3, [r7, #15]
    e95a:	7bfb      	ldrb	r3, [r7, #15]
    e95c:	2b1f      	cmp	r3, #31
    e95e:	dc28      	bgt.n	e9b2 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e960:	687b      	ldr	r3, [r7, #4]
    e962:	7f1a      	ldrb	r2, [r3, #28]
    e964:	7bfb      	ldrb	r3, [r7, #15]
    e966:	4413      	add	r3, r2
    e968:	b2db      	uxtb	r3, r3
    e96a:	f003 031f 	and.w	r3, r3, #31
    e96e:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    e970:	7bba      	ldrb	r2, [r7, #14]
    e972:	4913      	ldr	r1, [pc, #76]	; (e9c0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e974:	4613      	mov	r3, r2
    e976:	009b      	lsls	r3, r3, #2
    e978:	4413      	add	r3, r2
    e97a:	009b      	lsls	r3, r3, #2
    e97c:	440b      	add	r3, r1
    e97e:	330c      	adds	r3, #12
    e980:	681a      	ldr	r2, [r3, #0]
    e982:	683b      	ldr	r3, [r7, #0]
    e984:	429a      	cmp	r2, r3
    e986:	d110      	bne.n	e9aa <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    e988:	6839      	ldr	r1, [r7, #0]
    e98a:	6878      	ldr	r0, [r7, #4]
    e98c:	4b0d      	ldr	r3, [pc, #52]	; (e9c4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    e98e:	4798      	blx	r3
			task=&taskArray[j];
    e990:	7bba      	ldrb	r2, [r7, #14]
    e992:	4613      	mov	r3, r2
    e994:	009b      	lsls	r3, r3, #2
    e996:	4413      	add	r3, r2
    e998:	009b      	lsls	r3, r3, #2
    e99a:	4a09      	ldr	r2, [pc, #36]	; (e9c0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e99c:	441a      	add	r2, r3
    e99e:	687b      	ldr	r3, [r7, #4]
    e9a0:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e9a2:	687b      	ldr	r3, [r7, #4]
    e9a4:	7bba      	ldrb	r2, [r7, #14]
    e9a6:	771a      	strb	r2, [r3, #28]
			return;
    e9a8:	e006      	b.n	e9b8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e9aa:	7bfb      	ldrb	r3, [r7, #15]
    e9ac:	3301      	adds	r3, #1
    e9ae:	73fb      	strb	r3, [r7, #15]
    e9b0:	e7d3      	b.n	e95a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    e9b2:	6878      	ldr	r0, [r7, #4]
    e9b4:	4b04      	ldr	r3, [pc, #16]	; (e9c8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    e9b6:	4798      	blx	r3
	//task=&taskArray[0];

}
    e9b8:	3710      	adds	r7, #16
    e9ba:	46bd      	mov	sp, r7
    e9bc:	bd80      	pop	{r7, pc}
    e9be:	bf00      	nop
    e9c0:	20001478 	.word	0x20001478
    e9c4:	0000e839 	.word	0x0000e839
    e9c8:	0000e8e1 	.word	0x0000e8e1

0000e9cc <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    e9cc:	b480      	push	{r7}
    e9ce:	b085      	sub	sp, #20
    e9d0:	af00      	add	r7, sp, #0
    e9d2:	6078      	str	r0, [r7, #4]
    e9d4:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e9d6:	2300      	movs	r3, #0
    e9d8:	73fb      	strb	r3, [r7, #15]
    e9da:	7bfb      	ldrb	r3, [r7, #15]
    e9dc:	2b1f      	cmp	r3, #31
    e9de:	dc19      	bgt.n	ea14 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e9e0:	7bfa      	ldrb	r2, [r7, #15]
    e9e2:	490f      	ldr	r1, [pc, #60]	; (ea20 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e9e4:	4613      	mov	r3, r2
    e9e6:	009b      	lsls	r3, r3, #2
    e9e8:	4413      	add	r3, r2
    e9ea:	009b      	lsls	r3, r3, #2
    e9ec:	440b      	add	r3, r1
    e9ee:	330c      	adds	r3, #12
    e9f0:	681a      	ldr	r2, [r3, #0]
    e9f2:	683b      	ldr	r3, [r7, #0]
    e9f4:	429a      	cmp	r2, r3
    e9f6:	d109      	bne.n	ea0c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e9f8:	7bfa      	ldrb	r2, [r7, #15]
    e9fa:	4613      	mov	r3, r2
    e9fc:	009b      	lsls	r3, r3, #2
    e9fe:	4413      	add	r3, r2
    ea00:	009b      	lsls	r3, r3, #2
    ea02:	4a07      	ldr	r2, [pc, #28]	; (ea20 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    ea04:	441a      	add	r2, r3
    ea06:	687b      	ldr	r3, [r7, #4]
    ea08:	619a      	str	r2, [r3, #24]
			return;
    ea0a:	e004      	b.n	ea16 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    ea0c:	7bfb      	ldrb	r3, [r7, #15]
    ea0e:	3301      	adds	r3, #1
    ea10:	73fb      	strb	r3, [r7, #15]
    ea12:	e7e2      	b.n	e9da <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    ea14:	bf00      	nop
}
    ea16:	3714      	adds	r7, #20
    ea18:	46bd      	mov	sp, r7
    ea1a:	bc80      	pop	{r7}
    ea1c:	4770      	bx	lr
    ea1e:	bf00      	nop
    ea20:	20001478 	.word	0x20001478

0000ea24 <_Z41__static_initialization_and_destruction_0ii>:
    ea24:	b580      	push	{r7, lr}
    ea26:	b082      	sub	sp, #8
    ea28:	af00      	add	r7, sp, #0
    ea2a:	6078      	str	r0, [r7, #4]
    ea2c:	6039      	str	r1, [r7, #0]
    ea2e:	687b      	ldr	r3, [r7, #4]
    ea30:	2b01      	cmp	r3, #1
    ea32:	d14c      	bne.n	eace <_Z41__static_initialization_and_destruction_0ii+0xaa>
    ea34:	683b      	ldr	r3, [r7, #0]
    ea36:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ea3a:	4293      	cmp	r3, r2
    ea3c:	d147      	bne.n	eace <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    ea3e:	4926      	ldr	r1, [pc, #152]	; (ead8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ea40:	4826      	ldr	r0, [pc, #152]	; (eadc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ea42:	4b27      	ldr	r3, [pc, #156]	; (eae0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea44:	4798      	blx	r3
    ea46:	4a27      	ldr	r2, [pc, #156]	; (eae4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea48:	4927      	ldr	r1, [pc, #156]	; (eae8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea4a:	4824      	ldr	r0, [pc, #144]	; (eadc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ea4c:	4b27      	ldr	r3, [pc, #156]	; (eaec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea4e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    ea50:	4927      	ldr	r1, [pc, #156]	; (eaf0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ea52:	4828      	ldr	r0, [pc, #160]	; (eaf4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ea54:	4b22      	ldr	r3, [pc, #136]	; (eae0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea56:	4798      	blx	r3
    ea58:	4a22      	ldr	r2, [pc, #136]	; (eae4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea5a:	4923      	ldr	r1, [pc, #140]	; (eae8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea5c:	4825      	ldr	r0, [pc, #148]	; (eaf4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ea5e:	4b23      	ldr	r3, [pc, #140]	; (eaec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea60:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    ea62:	4925      	ldr	r1, [pc, #148]	; (eaf8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ea64:	4825      	ldr	r0, [pc, #148]	; (eafc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ea66:	4b1e      	ldr	r3, [pc, #120]	; (eae0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea68:	4798      	blx	r3
    ea6a:	4a1e      	ldr	r2, [pc, #120]	; (eae4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea6c:	491e      	ldr	r1, [pc, #120]	; (eae8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea6e:	4823      	ldr	r0, [pc, #140]	; (eafc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ea70:	4b1e      	ldr	r3, [pc, #120]	; (eaec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea72:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    ea74:	4922      	ldr	r1, [pc, #136]	; (eb00 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    ea76:	4823      	ldr	r0, [pc, #140]	; (eb04 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ea78:	4b19      	ldr	r3, [pc, #100]	; (eae0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea7a:	4798      	blx	r3
    ea7c:	4a19      	ldr	r2, [pc, #100]	; (eae4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea7e:	491a      	ldr	r1, [pc, #104]	; (eae8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea80:	4820      	ldr	r0, [pc, #128]	; (eb04 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ea82:	4b1a      	ldr	r3, [pc, #104]	; (eaec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea84:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    ea86:	4920      	ldr	r1, [pc, #128]	; (eb08 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    ea88:	4820      	ldr	r0, [pc, #128]	; (eb0c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ea8a:	4b15      	ldr	r3, [pc, #84]	; (eae0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea8c:	4798      	blx	r3
    ea8e:	4a15      	ldr	r2, [pc, #84]	; (eae4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea90:	4915      	ldr	r1, [pc, #84]	; (eae8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea92:	481e      	ldr	r0, [pc, #120]	; (eb0c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ea94:	4b15      	ldr	r3, [pc, #84]	; (eaec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea96:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    ea98:	491d      	ldr	r1, [pc, #116]	; (eb10 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    ea9a:	481e      	ldr	r0, [pc, #120]	; (eb14 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ea9c:	4b10      	ldr	r3, [pc, #64]	; (eae0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea9e:	4798      	blx	r3
    eaa0:	4a10      	ldr	r2, [pc, #64]	; (eae4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eaa2:	4911      	ldr	r1, [pc, #68]	; (eae8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eaa4:	481b      	ldr	r0, [pc, #108]	; (eb14 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    eaa6:	4b11      	ldr	r3, [pc, #68]	; (eaec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eaa8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    eaaa:	491b      	ldr	r1, [pc, #108]	; (eb18 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    eaac:	481b      	ldr	r0, [pc, #108]	; (eb1c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    eaae:	4b0c      	ldr	r3, [pc, #48]	; (eae0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eab0:	4798      	blx	r3
    eab2:	4a0c      	ldr	r2, [pc, #48]	; (eae4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eab4:	490c      	ldr	r1, [pc, #48]	; (eae8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eab6:	4819      	ldr	r0, [pc, #100]	; (eb1c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    eab8:	4b0c      	ldr	r3, [pc, #48]	; (eaec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eaba:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    eabc:	4918      	ldr	r1, [pc, #96]	; (eb20 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    eabe:	4819      	ldr	r0, [pc, #100]	; (eb24 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    eac0:	4b07      	ldr	r3, [pc, #28]	; (eae0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eac2:	4798      	blx	r3
    eac4:	4a07      	ldr	r2, [pc, #28]	; (eae4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eac6:	4908      	ldr	r1, [pc, #32]	; (eae8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eac8:	4816      	ldr	r0, [pc, #88]	; (eb24 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    eaca:	4b08      	ldr	r3, [pc, #32]	; (eaec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eacc:	4798      	blx	r3
    eace:	bf00      	nop
    ead0:	3708      	adds	r7, #8
    ead2:	46bd      	mov	sp, r7
    ead4:	bd80      	pop	{r7, pc}
    ead6:	bf00      	nop
    ead8:	2000aae8 	.word	0x2000aae8
    eadc:	20001374 	.word	0x20001374
    eae0:	0000e5e9 	.word	0x0000e5e9
    eae4:	20000000 	.word	0x20000000
    eae8:	0000e621 	.word	0x0000e621
    eaec:	000108c5 	.word	0x000108c5
    eaf0:	2000ab7c 	.word	0x2000ab7c
    eaf4:	20001394 	.word	0x20001394
    eaf8:	2000aca0 	.word	0x2000aca0
    eafc:	200013b4 	.word	0x200013b4
    eb00:	2000ab9c 	.word	0x2000ab9c
    eb04:	200013d4 	.word	0x200013d4
    eb08:	2000ac60 	.word	0x2000ac60
    eb0c:	200013f4 	.word	0x200013f4
    eb10:	2000ac80 	.word	0x2000ac80
    eb14:	20001414 	.word	0x20001414
    eb18:	2000ab58 	.word	0x2000ab58
    eb1c:	20001434 	.word	0x20001434
    eb20:	2000abf8 	.word	0x2000abf8
    eb24:	20001454 	.word	0x20001454

0000eb28 <_GLOBAL__sub_I_ptrTimerClass>:
    eb28:	b580      	push	{r7, lr}
    eb2a:	af00      	add	r7, sp, #0
    eb2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eb30:	2001      	movs	r0, #1
    eb32:	4b01      	ldr	r3, [pc, #4]	; (eb38 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    eb34:	4798      	blx	r3
    eb36:	bd80      	pop	{r7, pc}
    eb38:	0000ea25 	.word	0x0000ea25

0000eb3c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    eb3c:	b480      	push	{r7}
    eb3e:	b083      	sub	sp, #12
    eb40:	af00      	add	r7, sp, #0
    eb42:	6078      	str	r0, [r7, #4]
    eb44:	4a05      	ldr	r2, [pc, #20]	; (eb5c <_ZN5PrintC1Ev+0x20>)
    eb46:	687b      	ldr	r3, [r7, #4]
    eb48:	601a      	str	r2, [r3, #0]
    eb4a:	687b      	ldr	r3, [r7, #4]
    eb4c:	2200      	movs	r2, #0
    eb4e:	605a      	str	r2, [r3, #4]
    eb50:	687b      	ldr	r3, [r7, #4]
    eb52:	4618      	mov	r0, r3
    eb54:	370c      	adds	r7, #12
    eb56:	46bd      	mov	sp, r7
    eb58:	bc80      	pop	{r7}
    eb5a:	4770      	bx	lr
    eb5c:	000111b8 	.word	0x000111b8

0000eb60 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    eb60:	b480      	push	{r7}
    eb62:	b083      	sub	sp, #12
    eb64:	af00      	add	r7, sp, #0
    eb66:	6078      	str	r0, [r7, #4]
    eb68:	2300      	movs	r3, #0
    eb6a:	4618      	mov	r0, r3
    eb6c:	370c      	adds	r7, #12
    eb6e:	46bd      	mov	sp, r7
    eb70:	bc80      	pop	{r7}
    eb72:	4770      	bx	lr

0000eb74 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    eb74:	b480      	push	{r7}
    eb76:	b083      	sub	sp, #12
    eb78:	af00      	add	r7, sp, #0
    eb7a:	6078      	str	r0, [r7, #4]
    eb7c:	bf00      	nop
    eb7e:	370c      	adds	r7, #12
    eb80:	46bd      	mov	sp, r7
    eb82:	bc80      	pop	{r7}
    eb84:	4770      	bx	lr
	...

0000eb88 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    eb88:	b580      	push	{r7, lr}
    eb8a:	b082      	sub	sp, #8
    eb8c:	af00      	add	r7, sp, #0
    eb8e:	6078      	str	r0, [r7, #4]
    eb90:	687b      	ldr	r3, [r7, #4]
    eb92:	4618      	mov	r0, r3
    eb94:	4b06      	ldr	r3, [pc, #24]	; (ebb0 <_ZN6StreamC1Ev+0x28>)
    eb96:	4798      	blx	r3
    eb98:	4a06      	ldr	r2, [pc, #24]	; (ebb4 <_ZN6StreamC1Ev+0x2c>)
    eb9a:	687b      	ldr	r3, [r7, #4]
    eb9c:	601a      	str	r2, [r3, #0]
    eb9e:	687b      	ldr	r3, [r7, #4]
    eba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eba4:	609a      	str	r2, [r3, #8]
    eba6:	687b      	ldr	r3, [r7, #4]
    eba8:	4618      	mov	r0, r3
    ebaa:	3708      	adds	r7, #8
    ebac:	46bd      	mov	sp, r7
    ebae:	bd80      	pop	{r7, pc}
    ebb0:	0000eb3d 	.word	0x0000eb3d
    ebb4:	0001117c 	.word	0x0001117c

0000ebb8 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    ebb8:	b480      	push	{r7}
    ebba:	b083      	sub	sp, #12
    ebbc:	af00      	add	r7, sp, #0
    ebbe:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    ebc0:	4b06      	ldr	r3, [pc, #24]	; (ebdc <_ZL10USBTimeoutPK10timer_task+0x24>)
    ebc2:	681b      	ldr	r3, [r3, #0]
    ebc4:	2201      	movs	r2, #1
    ebc6:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    ebc8:	4b04      	ldr	r3, [pc, #16]	; (ebdc <_ZL10USBTimeoutPK10timer_task+0x24>)
    ebca:	681b      	ldr	r3, [r3, #0]
    ebcc:	2200      	movs	r2, #0
    ebce:	741a      	strb	r2, [r3, #16]
	
}
    ebd0:	bf00      	nop
    ebd2:	370c      	adds	r7, #12
    ebd4:	46bd      	mov	sp, r7
    ebd6:	bc80      	pop	{r7}
    ebd8:	4770      	bx	lr
    ebda:	bf00      	nop
    ebdc:	2000187c 	.word	0x2000187c

0000ebe0 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ebe0:	b480      	push	{r7}
    ebe2:	b083      	sub	sp, #12
    ebe4:	af00      	add	r7, sp, #0
    ebe6:	4603      	mov	r3, r0
    ebe8:	603a      	str	r2, [r7, #0]
    ebea:	71fb      	strb	r3, [r7, #7]
    ebec:	460b      	mov	r3, r1
    ebee:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    ebf0:	4b08      	ldr	r3, [pc, #32]	; (ec14 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ebf2:	681b      	ldr	r3, [r3, #0]
    ebf4:	2201      	movs	r2, #1
    ebf6:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    ebf8:	4b06      	ldr	r3, [pc, #24]	; (ec14 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ebfa:	681b      	ldr	r3, [r3, #0]
    ebfc:	2201      	movs	r2, #1
    ebfe:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ec00:	4b04      	ldr	r3, [pc, #16]	; (ec14 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ec02:	681b      	ldr	r3, [r3, #0]
    ec04:	2201      	movs	r2, #1
    ec06:	741a      	strb	r2, [r3, #16]


	return false;
    ec08:	2300      	movs	r3, #0
}
    ec0a:	4618      	mov	r0, r3
    ec0c:	370c      	adds	r7, #12
    ec0e:	46bd      	mov	sp, r7
    ec10:	bc80      	pop	{r7}
    ec12:	4770      	bx	lr
    ec14:	2000187c 	.word	0x2000187c

0000ec18 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ec18:	b480      	push	{r7}
    ec1a:	b083      	sub	sp, #12
    ec1c:	af00      	add	r7, sp, #0
    ec1e:	4603      	mov	r3, r0
    ec20:	603a      	str	r2, [r7, #0]
    ec22:	71fb      	strb	r3, [r7, #7]
    ec24:	460b      	mov	r3, r1
    ec26:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    ec28:	4b08      	ldr	r3, [pc, #32]	; (ec4c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ec2a:	681b      	ldr	r3, [r3, #0]
    ec2c:	2201      	movs	r2, #1
    ec2e:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    ec30:	4b06      	ldr	r3, [pc, #24]	; (ec4c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ec32:	681b      	ldr	r3, [r3, #0]
    ec34:	2201      	movs	r2, #1
    ec36:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ec38:	4b04      	ldr	r3, [pc, #16]	; (ec4c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ec3a:	681b      	ldr	r3, [r3, #0]
    ec3c:	2201      	movs	r2, #1
    ec3e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    ec40:	2300      	movs	r3, #0
}
    ec42:	4618      	mov	r0, r3
    ec44:	370c      	adds	r7, #12
    ec46:	46bd      	mov	sp, r7
    ec48:	bc80      	pop	{r7}
    ec4a:	4770      	bx	lr
    ec4c:	2000187c 	.word	0x2000187c

0000ec50 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    ec50:	b580      	push	{r7, lr}
    ec52:	b082      	sub	sp, #8
    ec54:	af00      	add	r7, sp, #0
    ec56:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    ec58:	793b      	ldrb	r3, [r7, #4]
    ec5a:	f003 0301 	and.w	r3, r3, #1
    ec5e:	b2db      	uxtb	r3, r3
    ec60:	2b00      	cmp	r3, #0
    ec62:	d013      	beq.n	ec8c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    ec64:	490c      	ldr	r1, [pc, #48]	; (ec98 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    ec66:	2000      	movs	r0, #0
    ec68:	4b0c      	ldr	r3, [pc, #48]	; (ec9c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ec6a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    ec6c:	490c      	ldr	r1, [pc, #48]	; (eca0 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    ec6e:	2001      	movs	r0, #1
    ec70:	4b0a      	ldr	r3, [pc, #40]	; (ec9c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ec72:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    ec74:	4b0b      	ldr	r3, [pc, #44]	; (eca4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ec76:	681b      	ldr	r3, [r3, #0]
    ec78:	2201      	movs	r2, #1
    ec7a:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    ec7c:	4b09      	ldr	r3, [pc, #36]	; (eca4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ec7e:	681b      	ldr	r3, [r3, #0]
    ec80:	2201      	movs	r2, #1
    ec82:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    ec84:	4b07      	ldr	r3, [pc, #28]	; (eca4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ec86:	681b      	ldr	r3, [r3, #0]
    ec88:	2201      	movs	r2, #1
    ec8a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    ec8c:	2300      	movs	r3, #0
}
    ec8e:	4618      	mov	r0, r3
    ec90:	3708      	adds	r7, #8
    ec92:	46bd      	mov	sp, r7
    ec94:	bd80      	pop	{r7, pc}
    ec96:	bf00      	nop
    ec98:	0000ebe1 	.word	0x0000ebe1
    ec9c:	0000ce41 	.word	0x0000ce41
    eca0:	0000ec19 	.word	0x0000ec19
    eca4:	2000187c 	.word	0x2000187c

0000eca8 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    eca8:	b580      	push	{r7, lr}
    ecaa:	b082      	sub	sp, #8
    ecac:	af00      	add	r7, sp, #0
    ecae:	6078      	str	r0, [r7, #4]
    ecb0:	687b      	ldr	r3, [r7, #4]
    ecb2:	4618      	mov	r0, r3
    ecb4:	4b0a      	ldr	r3, [pc, #40]	; (ece0 <_ZN9CDC_ClassC1Ev+0x38>)
    ecb6:	4798      	blx	r3
    ecb8:	687b      	ldr	r3, [r7, #4]
    ecba:	3310      	adds	r3, #16
    ecbc:	4618      	mov	r0, r3
    ecbe:	4b09      	ldr	r3, [pc, #36]	; (ece4 <_ZN9CDC_ClassC1Ev+0x3c>)
    ecc0:	4798      	blx	r3
    ecc2:	4a09      	ldr	r2, [pc, #36]	; (ece8 <_ZN9CDC_ClassC1Ev+0x40>)
    ecc4:	687b      	ldr	r3, [r7, #4]
    ecc6:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    ecc8:	687b      	ldr	r3, [r7, #4]
    ecca:	f04f 32ff 	mov.w	r2, #4294967295
    ecce:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    ecd0:	4a06      	ldr	r2, [pc, #24]	; (ecec <_ZN9CDC_ClassC1Ev+0x44>)
    ecd2:	687b      	ldr	r3, [r7, #4]
    ecd4:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    ecd6:	687b      	ldr	r3, [r7, #4]
    ecd8:	4618      	mov	r0, r3
    ecda:	3708      	adds	r7, #8
    ecdc:	46bd      	mov	sp, r7
    ecde:	bd80      	pop	{r7, pc}
    ece0:	0000eb89 	.word	0x0000eb89
    ece4:	0000f395 	.word	0x0000f395
    ece8:	0001114c 	.word	0x0001114c
    ecec:	2000187c 	.word	0x2000187c

0000ecf0 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    ecf0:	b580      	push	{r7, lr}
    ecf2:	b082      	sub	sp, #8
    ecf4:	af00      	add	r7, sp, #0
    ecf6:	6078      	str	r0, [r7, #4]
    ecf8:	4a06      	ldr	r2, [pc, #24]	; (ed14 <_ZN9CDC_ClassD1Ev+0x24>)
    ecfa:	687b      	ldr	r3, [r7, #4]
    ecfc:	601a      	str	r2, [r3, #0]
    ecfe:	687b      	ldr	r3, [r7, #4]
    ed00:	3310      	adds	r3, #16
    ed02:	4618      	mov	r0, r3
    ed04:	4b04      	ldr	r3, [pc, #16]	; (ed18 <_ZN9CDC_ClassD1Ev+0x28>)
    ed06:	4798      	blx	r3
{
} //~CDC_Class
    ed08:	687b      	ldr	r3, [r7, #4]
    ed0a:	4618      	mov	r0, r3
    ed0c:	3708      	adds	r7, #8
    ed0e:	46bd      	mov	sp, r7
    ed10:	bd80      	pop	{r7, pc}
    ed12:	bf00      	nop
    ed14:	0001114c 	.word	0x0001114c
    ed18:	0000f3b5 	.word	0x0000f3b5

0000ed1c <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    ed1c:	b580      	push	{r7, lr}
    ed1e:	b082      	sub	sp, #8
    ed20:	af00      	add	r7, sp, #0
    ed22:	6078      	str	r0, [r7, #4]
	
	OnInit();
    ed24:	687b      	ldr	r3, [r7, #4]
    ed26:	3310      	adds	r3, #16
    ed28:	4618      	mov	r0, r3
    ed2a:	4b09      	ldr	r3, [pc, #36]	; (ed50 <_ZN9CDC_Class4InitEv+0x34>)
    ed2c:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    ed2e:	4909      	ldr	r1, [pc, #36]	; (ed54 <_ZN9CDC_Class4InitEv+0x38>)
    ed30:	2003      	movs	r0, #3
    ed32:	4b09      	ldr	r3, [pc, #36]	; (ed58 <_ZN9CDC_Class4InitEv+0x3c>)
    ed34:	4798      	blx	r3
	delay_ms(100);
    ed36:	2064      	movs	r0, #100	; 0x64
    ed38:	4b08      	ldr	r3, [pc, #32]	; (ed5c <_ZN9CDC_Class4InitEv+0x40>)
    ed3a:	4798      	blx	r3
		
	if (connected)
    ed3c:	687b      	ldr	r3, [r7, #4]
    ed3e:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    ed40:	2064      	movs	r0, #100	; 0x64
    ed42:	4b06      	ldr	r3, [pc, #24]	; (ed5c <_ZN9CDC_Class4InitEv+0x40>)
    ed44:	4798      	blx	r3

	

}
    ed46:	bf00      	nop
    ed48:	3708      	adds	r7, #8
    ed4a:	46bd      	mov	sp, r7
    ed4c:	bd80      	pop	{r7, pc}
    ed4e:	bf00      	nop
    ed50:	0000f3c9 	.word	0x0000f3c9
    ed54:	0000ec51 	.word	0x0000ec51
    ed58:	0000ce41 	.word	0x0000ce41
    ed5c:	00002e19 	.word	0x00002e19

0000ed60 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    ed60:	b580      	push	{r7, lr}
    ed62:	b082      	sub	sp, #8
    ed64:	af00      	add	r7, sp, #0
    ed66:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    ed68:	4b03      	ldr	r3, [pc, #12]	; (ed78 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    ed6a:	4798      	blx	r3
    ed6c:	4603      	mov	r3, r0
	
}
    ed6e:	4618      	mov	r0, r3
    ed70:	3708      	adds	r7, #8
    ed72:	46bd      	mov	sp, r7
    ed74:	bd80      	pop	{r7, pc}
    ed76:	bf00      	nop
    ed78:	0000ceb9 	.word	0x0000ceb9

0000ed7c <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    ed7c:	b580      	push	{r7, lr}
    ed7e:	b084      	sub	sp, #16
    ed80:	af00      	add	r7, sp, #0
    ed82:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    ed84:	687b      	ldr	r3, [r7, #4]
    ed86:	699b      	ldr	r3, [r3, #24]
    ed88:	f1b3 3fff 	cmp.w	r3, #4294967295
    ed8c:	bf14      	ite	ne
    ed8e:	2301      	movne	r3, #1
    ed90:	2300      	moveq	r3, #0
    ed92:	b2db      	uxtb	r3, r3
    ed94:	2b00      	cmp	r3, #0
    ed96:	d002      	beq.n	ed9e <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    ed98:	687b      	ldr	r3, [r7, #4]
    ed9a:	699b      	ldr	r3, [r3, #24]
    ed9c:	e011      	b.n	edc2 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    ed9e:	687b      	ldr	r3, [r7, #4]
    eda0:	681b      	ldr	r3, [r3, #0]
    eda2:	331c      	adds	r3, #28
    eda4:	681b      	ldr	r3, [r3, #0]
    eda6:	f107 010f 	add.w	r1, r7, #15
    edaa:	2201      	movs	r2, #1
    edac:	6878      	ldr	r0, [r7, #4]
    edae:	4798      	blx	r3
    edb0:	4602      	mov	r2, r0
    edb2:	687b      	ldr	r3, [r7, #4]
    edb4:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    edb6:	7bfb      	ldrb	r3, [r7, #15]
    edb8:	461a      	mov	r2, r3
    edba:	687b      	ldr	r3, [r7, #4]
    edbc:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    edbe:	687b      	ldr	r3, [r7, #4]
    edc0:	699b      	ldr	r3, [r3, #24]
}
    edc2:	4618      	mov	r0, r3
    edc4:	3710      	adds	r7, #16
    edc6:	46bd      	mov	sp, r7
    edc8:	bd80      	pop	{r7, pc}
	...

0000edcc <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    edcc:	b580      	push	{r7, lr}
    edce:	b086      	sub	sp, #24
    edd0:	af00      	add	r7, sp, #0
    edd2:	60f8      	str	r0, [r7, #12]
    edd4:	60b9      	str	r1, [r7, #8]
    edd6:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    edd8:	68fb      	ldr	r3, [r7, #12]
    edda:	7c1b      	ldrb	r3, [r3, #16]
    eddc:	b2db      	uxtb	r3, r3
    edde:	2b00      	cmp	r3, #0
    ede0:	d02e      	beq.n	ee40 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    ede2:	687a      	ldr	r2, [r7, #4]
    ede4:	4613      	mov	r3, r2
    ede6:	009b      	lsls	r3, r3, #2
    ede8:	4413      	add	r3, r2
    edea:	005b      	lsls	r3, r3, #1
    edec:	461a      	mov	r2, r3
    edee:	4918      	ldr	r1, [pc, #96]	; (ee50 <_ZN9CDC_Class8readDataEPvl+0x84>)
    edf0:	4818      	ldr	r0, [pc, #96]	; (ee54 <_ZN9CDC_Class8readDataEPvl+0x88>)
    edf2:	4b19      	ldr	r3, [pc, #100]	; (ee58 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    edf4:	4798      	blx	r3
		rxReady=false;
    edf6:	68fb      	ldr	r3, [r7, #12]
    edf8:	2200      	movs	r2, #0
    edfa:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    edfc:	687b      	ldr	r3, [r7, #4]
    edfe:	4619      	mov	r1, r3
    ee00:	68b8      	ldr	r0, [r7, #8]
    ee02:	4b16      	ldr	r3, [pc, #88]	; (ee5c <_ZN9CDC_Class8readDataEPvl+0x90>)
    ee04:	4798      	blx	r3
    ee06:	4603      	mov	r3, r0
    ee08:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    ee0a:	68fb      	ldr	r3, [r7, #12]
    ee0c:	7d5b      	ldrb	r3, [r3, #21]
    ee0e:	b2db      	uxtb	r3, r3
    ee10:	f083 0301 	eor.w	r3, r3, #1
    ee14:	b2db      	uxtb	r3, r3
    ee16:	2b00      	cmp	r3, #0
    ee18:	d006      	beq.n	ee28 <_ZN9CDC_Class8readDataEPvl+0x5c>
    ee1a:	68fb      	ldr	r3, [r7, #12]
    ee1c:	7c1b      	ldrb	r3, [r3, #16]
    ee1e:	b2db      	uxtb	r3, r3
    ee20:	2b00      	cmp	r3, #0
    ee22:	d001      	beq.n	ee28 <_ZN9CDC_Class8readDataEPvl+0x5c>
    ee24:	2301      	movs	r3, #1
    ee26:	e000      	b.n	ee2a <_ZN9CDC_Class8readDataEPvl+0x5e>
    ee28:	2300      	movs	r3, #0
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	d000      	beq.n	ee30 <_ZN9CDC_Class8readDataEPvl+0x64>
    ee2e:	e7ec      	b.n	ee0a <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    ee30:	4808      	ldr	r0, [pc, #32]	; (ee54 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ee32:	4b0b      	ldr	r3, [pc, #44]	; (ee60 <_ZN9CDC_Class8readDataEPvl+0x94>)
    ee34:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ee36:	4906      	ldr	r1, [pc, #24]	; (ee50 <_ZN9CDC_Class8readDataEPvl+0x84>)
    ee38:	4806      	ldr	r0, [pc, #24]	; (ee54 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ee3a:	4b0a      	ldr	r3, [pc, #40]	; (ee64 <_ZN9CDC_Class8readDataEPvl+0x98>)
    ee3c:	4798      	blx	r3
    ee3e:	e001      	b.n	ee44 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    ee40:	2300      	movs	r3, #0
    ee42:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    ee44:	7dfb      	ldrb	r3, [r7, #23]
}
    ee46:	4618      	mov	r0, r3
    ee48:	3718      	adds	r7, #24
    ee4a:	46bd      	mov	sp, r7
    ee4c:	bd80      	pop	{r7, pc}
    ee4e:	bf00      	nop
    ee50:	0000ebb9 	.word	0x0000ebb9
    ee54:	2000181c 	.word	0x2000181c
    ee58:	0000e891 	.word	0x0000e891
    ee5c:	0000cd95 	.word	0x0000cd95
    ee60:	0000e749 	.word	0x0000e749
    ee64:	0000e839 	.word	0x0000e839

0000ee68 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    ee68:	b580      	push	{r7, lr}
    ee6a:	b084      	sub	sp, #16
    ee6c:	af00      	add	r7, sp, #0
    ee6e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    ee70:	687b      	ldr	r3, [r7, #4]
    ee72:	2200      	movs	r2, #0
    ee74:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    ee76:	f107 030f 	add.w	r3, r7, #15
    ee7a:	2101      	movs	r1, #1
    ee7c:	4618      	mov	r0, r3
    ee7e:	4b08      	ldr	r3, [pc, #32]	; (eea0 <_ZN9CDC_Class4readEv+0x38>)
    ee80:	4798      	blx	r3
	while(!rxReady);
    ee82:	687b      	ldr	r3, [r7, #4]
    ee84:	7d5b      	ldrb	r3, [r3, #21]
    ee86:	b2db      	uxtb	r3, r3
    ee88:	f083 0301 	eor.w	r3, r3, #1
    ee8c:	b2db      	uxtb	r3, r3
    ee8e:	2b00      	cmp	r3, #0
    ee90:	d000      	beq.n	ee94 <_ZN9CDC_Class4readEv+0x2c>
    ee92:	e7f6      	b.n	ee82 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    ee94:	7bfb      	ldrb	r3, [r7, #15]
}
    ee96:	4618      	mov	r0, r3
    ee98:	3710      	adds	r7, #16
    ee9a:	46bd      	mov	sp, r7
    ee9c:	bd80      	pop	{r7, pc}
    ee9e:	bf00      	nop
    eea0:	0000cd95 	.word	0x0000cd95

0000eea4 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    eea4:	b580      	push	{r7, lr}
    eea6:	b082      	sub	sp, #8
    eea8:	af00      	add	r7, sp, #0
    eeaa:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    eeac:	687b      	ldr	r3, [r7, #4]
    eeae:	331c      	adds	r3, #28
    eeb0:	2140      	movs	r1, #64	; 0x40
    eeb2:	4618      	mov	r0, r3
    eeb4:	4b02      	ldr	r3, [pc, #8]	; (eec0 <_ZN9CDC_Class5flushEv+0x1c>)
    eeb6:	4798      	blx	r3
}
    eeb8:	bf00      	nop
    eeba:	3708      	adds	r7, #8
    eebc:	46bd      	mov	sp, r7
    eebe:	bd80      	pop	{r7, pc}
    eec0:	0000cdd9 	.word	0x0000cdd9

0000eec4 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    eec4:	b580      	push	{r7, lr}
    eec6:	b082      	sub	sp, #8
    eec8:	af00      	add	r7, sp, #0
    eeca:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    eecc:	4b02      	ldr	r3, [pc, #8]	; (eed8 <_ZN9CDC_Class5clearEv+0x14>)
    eece:	4798      	blx	r3
}
    eed0:	bf00      	nop
    eed2:	3708      	adds	r7, #8
    eed4:	46bd      	mov	sp, r7
    eed6:	bd80      	pop	{r7, pc}
    eed8:	0000ce1d 	.word	0x0000ce1d

0000eedc <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    eedc:	b580      	push	{r7, lr}
    eede:	b082      	sub	sp, #8
    eee0:	af00      	add	r7, sp, #0
    eee2:	6078      	str	r0, [r7, #4]
    eee4:	460b      	mov	r3, r1
    eee6:	70fb      	strb	r3, [r7, #3]
	if (connected){
    eee8:	687b      	ldr	r3, [r7, #4]
    eeea:	7c1b      	ldrb	r3, [r3, #16]
    eeec:	b2db      	uxtb	r3, r3
    eeee:	2b00      	cmp	r3, #0
    eef0:	d012      	beq.n	ef18 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    eef2:	687b      	ldr	r3, [r7, #4]
    eef4:	7d1b      	ldrb	r3, [r3, #20]
    eef6:	b2db      	uxtb	r3, r3
    eef8:	f083 0301 	eor.w	r3, r3, #1
    eefc:	b2db      	uxtb	r3, r3
    eefe:	2b00      	cmp	r3, #0
    ef00:	d000      	beq.n	ef04 <_ZN9CDC_Class5writeEh+0x28>
    ef02:	e7f6      	b.n	eef2 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    ef04:	687b      	ldr	r3, [r7, #4]
    ef06:	681b      	ldr	r3, [r3, #0]
    ef08:	3324      	adds	r3, #36	; 0x24
    ef0a:	681b      	ldr	r3, [r3, #0]
    ef0c:	1cf9      	adds	r1, r7, #3
    ef0e:	2201      	movs	r2, #1
    ef10:	6878      	ldr	r0, [r7, #4]
    ef12:	4798      	blx	r3
    ef14:	4603      	mov	r3, r0
    ef16:	e000      	b.n	ef1a <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    ef18:	2300      	movs	r3, #0
	}
		
}
    ef1a:	4618      	mov	r0, r3
    ef1c:	3708      	adds	r7, #8
    ef1e:	46bd      	mov	sp, r7
    ef20:	bd80      	pop	{r7, pc}
	...

0000ef24 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    ef24:	b580      	push	{r7, lr}
    ef26:	b086      	sub	sp, #24
    ef28:	af00      	add	r7, sp, #0
    ef2a:	60f8      	str	r0, [r7, #12]
    ef2c:	60b9      	str	r1, [r7, #8]
    ef2e:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    ef30:	68fb      	ldr	r3, [r7, #12]
    ef32:	7c1b      	ldrb	r3, [r3, #16]
    ef34:	b2db      	uxtb	r3, r3
    ef36:	2b00      	cmp	r3, #0
    ef38:	d02f      	beq.n	ef9a <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    ef3a:	687a      	ldr	r2, [r7, #4]
    ef3c:	4613      	mov	r3, r2
    ef3e:	009b      	lsls	r3, r3, #2
    ef40:	4413      	add	r3, r2
    ef42:	005b      	lsls	r3, r3, #1
    ef44:	461a      	mov	r2, r3
    ef46:	4917      	ldr	r1, [pc, #92]	; (efa4 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    ef48:	4817      	ldr	r0, [pc, #92]	; (efa8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ef4a:	4b18      	ldr	r3, [pc, #96]	; (efac <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    ef4c:	4798      	blx	r3
		txReady=false;
    ef4e:	68fb      	ldr	r3, [r7, #12]
    ef50:	2200      	movs	r2, #0
    ef52:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    ef54:	687b      	ldr	r3, [r7, #4]
    ef56:	4619      	mov	r1, r3
    ef58:	68b8      	ldr	r0, [r7, #8]
    ef5a:	4b15      	ldr	r3, [pc, #84]	; (efb0 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    ef5c:	4798      	blx	r3
    ef5e:	4603      	mov	r3, r0
    ef60:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    ef62:	68fb      	ldr	r3, [r7, #12]
    ef64:	7d1b      	ldrb	r3, [r3, #20]
    ef66:	b2db      	uxtb	r3, r3
    ef68:	f083 0301 	eor.w	r3, r3, #1
    ef6c:	b2db      	uxtb	r3, r3
    ef6e:	2b00      	cmp	r3, #0
    ef70:	d006      	beq.n	ef80 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    ef72:	68fb      	ldr	r3, [r7, #12]
    ef74:	7c1b      	ldrb	r3, [r3, #16]
    ef76:	b2db      	uxtb	r3, r3
    ef78:	2b00      	cmp	r3, #0
    ef7a:	d001      	beq.n	ef80 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    ef7c:	2301      	movs	r3, #1
    ef7e:	e000      	b.n	ef82 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    ef80:	2300      	movs	r3, #0
    ef82:	2b00      	cmp	r3, #0
    ef84:	d000      	beq.n	ef88 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    ef86:	e7ec      	b.n	ef62 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    ef88:	4807      	ldr	r0, [pc, #28]	; (efa8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ef8a:	4b0a      	ldr	r3, [pc, #40]	; (efb4 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    ef8c:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ef8e:	4905      	ldr	r1, [pc, #20]	; (efa4 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    ef90:	4805      	ldr	r0, [pc, #20]	; (efa8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ef92:	4b09      	ldr	r3, [pc, #36]	; (efb8 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    ef94:	4798      	blx	r3
		return r;
    ef96:	697b      	ldr	r3, [r7, #20]
    ef98:	e000      	b.n	ef9c <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    ef9a:	2300      	movs	r3, #0
	}
	

}
    ef9c:	4618      	mov	r0, r3
    ef9e:	3718      	adds	r7, #24
    efa0:	46bd      	mov	sp, r7
    efa2:	bd80      	pop	{r7, pc}
    efa4:	0000ebb9 	.word	0x0000ebb9
    efa8:	2000181c 	.word	0x2000181c
    efac:	0000e891 	.word	0x0000e891
    efb0:	0000cdd9 	.word	0x0000cdd9
    efb4:	0000e749 	.word	0x0000e749
    efb8:	0000e839 	.word	0x0000e839

0000efbc <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    efbc:	b580      	push	{r7, lr}
    efbe:	b086      	sub	sp, #24
    efc0:	af00      	add	r7, sp, #0
    efc2:	60f8      	str	r0, [r7, #12]
    efc4:	60b9      	str	r1, [r7, #8]
    efc6:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    efc8:	68fb      	ldr	r3, [r7, #12]
    efca:	2200      	movs	r2, #0
    efcc:	751a      	strb	r2, [r3, #20]

 	if (connected){
    efce:	68fb      	ldr	r3, [r7, #12]
    efd0:	7c1b      	ldrb	r3, [r3, #16]
    efd2:	b2db      	uxtb	r3, r3
    efd4:	2b00      	cmp	r3, #0
    efd6:	d02a      	beq.n	f02e <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    efd8:	687a      	ldr	r2, [r7, #4]
    efda:	4613      	mov	r3, r2
    efdc:	009b      	lsls	r3, r3, #2
    efde:	4413      	add	r3, r2
    efe0:	005b      	lsls	r3, r3, #1
    efe2:	461a      	mov	r2, r3
    efe4:	4915      	ldr	r1, [pc, #84]	; (f03c <_ZN9CDC_Class5writeEPKhj+0x80>)
    efe6:	4816      	ldr	r0, [pc, #88]	; (f040 <_ZN9CDC_Class5writeEPKhj+0x84>)
    efe8:	4b16      	ldr	r3, [pc, #88]	; (f044 <_ZN9CDC_Class5writeEPKhj+0x88>)
    efea:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    efec:	6879      	ldr	r1, [r7, #4]
    efee:	68b8      	ldr	r0, [r7, #8]
    eff0:	4b15      	ldr	r3, [pc, #84]	; (f048 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    eff2:	4798      	blx	r3
    eff4:	4603      	mov	r3, r0
    eff6:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    eff8:	68fb      	ldr	r3, [r7, #12]
    effa:	7d1b      	ldrb	r3, [r3, #20]
    effc:	b2db      	uxtb	r3, r3
    effe:	f083 0301 	eor.w	r3, r3, #1
    f002:	b2db      	uxtb	r3, r3
    f004:	2b00      	cmp	r3, #0
    f006:	d006      	beq.n	f016 <_ZN9CDC_Class5writeEPKhj+0x5a>
    f008:	68fb      	ldr	r3, [r7, #12]
    f00a:	7c1b      	ldrb	r3, [r3, #16]
    f00c:	b2db      	uxtb	r3, r3
    f00e:	2b00      	cmp	r3, #0
    f010:	d001      	beq.n	f016 <_ZN9CDC_Class5writeEPKhj+0x5a>
    f012:	2301      	movs	r3, #1
    f014:	e000      	b.n	f018 <_ZN9CDC_Class5writeEPKhj+0x5c>
    f016:	2300      	movs	r3, #0
    f018:	2b00      	cmp	r3, #0
    f01a:	d000      	beq.n	f01e <_ZN9CDC_Class5writeEPKhj+0x62>
    f01c:	e7ec      	b.n	eff8 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    f01e:	4808      	ldr	r0, [pc, #32]	; (f040 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f020:	4b0a      	ldr	r3, [pc, #40]	; (f04c <_ZN9CDC_Class5writeEPKhj+0x90>)
    f022:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f024:	4905      	ldr	r1, [pc, #20]	; (f03c <_ZN9CDC_Class5writeEPKhj+0x80>)
    f026:	4806      	ldr	r0, [pc, #24]	; (f040 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f028:	4b09      	ldr	r3, [pc, #36]	; (f050 <_ZN9CDC_Class5writeEPKhj+0x94>)
    f02a:	4798      	blx	r3
    f02c:	e001      	b.n	f032 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    f02e:	2300      	movs	r3, #0
    f030:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    f032:	697b      	ldr	r3, [r7, #20]
}
    f034:	4618      	mov	r0, r3
    f036:	3718      	adds	r7, #24
    f038:	46bd      	mov	sp, r7
    f03a:	bd80      	pop	{r7, pc}
    f03c:	0000ebb9 	.word	0x0000ebb9
    f040:	2000181c 	.word	0x2000181c
    f044:	0000e891 	.word	0x0000e891
    f048:	0000cdd9 	.word	0x0000cdd9
    f04c:	0000e749 	.word	0x0000e749
    f050:	0000e839 	.word	0x0000e839

0000f054 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    f054:	b480      	push	{r7}
    f056:	b083      	sub	sp, #12
    f058:	af00      	add	r7, sp, #0
    f05a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    f05c:	687b      	ldr	r3, [r7, #4]
    f05e:	7d5b      	ldrb	r3, [r3, #21]
    f060:	b2db      	uxtb	r3, r3
    f062:	2b00      	cmp	r3, #0
    f064:	d006      	beq.n	f074 <_ZN9CDC_Class9availableEv+0x20>
    f066:	687b      	ldr	r3, [r7, #4]
    f068:	7d1b      	ldrb	r3, [r3, #20]
    f06a:	b2db      	uxtb	r3, r3
    f06c:	2b00      	cmp	r3, #0
    f06e:	d001      	beq.n	f074 <_ZN9CDC_Class9availableEv+0x20>
    f070:	2301      	movs	r3, #1
    f072:	e000      	b.n	f076 <_ZN9CDC_Class9availableEv+0x22>
    f074:	2300      	movs	r3, #0
    f076:	2b00      	cmp	r3, #0
    f078:	d001      	beq.n	f07e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    f07a:	2301      	movs	r3, #1
    f07c:	e000      	b.n	f080 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    f07e:	2300      	movs	r3, #0
	}
	
}
    f080:	4618      	mov	r0, r3
    f082:	370c      	adds	r7, #12
    f084:	46bd      	mov	sp, r7
    f086:	bc80      	pop	{r7}
    f088:	4770      	bx	lr
	...

0000f08c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    f08c:	b580      	push	{r7, lr}
    f08e:	b082      	sub	sp, #8
    f090:	af00      	add	r7, sp, #0
    f092:	6078      	str	r0, [r7, #4]
    f094:	6039      	str	r1, [r7, #0]
    f096:	687b      	ldr	r3, [r7, #4]
    f098:	2b01      	cmp	r3, #1
    f09a:	d154      	bne.n	f146 <_Z41__static_initialization_and_destruction_0ii+0xba>
    f09c:	683b      	ldr	r3, [r7, #0]
    f09e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f0a2:	4293      	cmp	r3, r2
    f0a4:	d14f      	bne.n	f146 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f0a6:	492a      	ldr	r1, [pc, #168]	; (f150 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f0a8:	482a      	ldr	r0, [pc, #168]	; (f154 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f0aa:	4b2b      	ldr	r3, [pc, #172]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f0ac:	4798      	blx	r3
    f0ae:	4a2b      	ldr	r2, [pc, #172]	; (f15c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f0b0:	492b      	ldr	r1, [pc, #172]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f0b2:	4828      	ldr	r0, [pc, #160]	; (f154 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f0b4:	4b2b      	ldr	r3, [pc, #172]	; (f164 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f0b6:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f0b8:	492b      	ldr	r1, [pc, #172]	; (f168 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f0ba:	482c      	ldr	r0, [pc, #176]	; (f16c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f0bc:	4b26      	ldr	r3, [pc, #152]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f0be:	4798      	blx	r3
    f0c0:	4a26      	ldr	r2, [pc, #152]	; (f15c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f0c2:	4927      	ldr	r1, [pc, #156]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f0c4:	4829      	ldr	r0, [pc, #164]	; (f16c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f0c6:	4b27      	ldr	r3, [pc, #156]	; (f164 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f0c8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f0ca:	4929      	ldr	r1, [pc, #164]	; (f170 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f0cc:	4829      	ldr	r0, [pc, #164]	; (f174 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f0ce:	4b22      	ldr	r3, [pc, #136]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f0d0:	4798      	blx	r3
    f0d2:	4a22      	ldr	r2, [pc, #136]	; (f15c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f0d4:	4922      	ldr	r1, [pc, #136]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f0d6:	4827      	ldr	r0, [pc, #156]	; (f174 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f0d8:	4b22      	ldr	r3, [pc, #136]	; (f164 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f0da:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f0dc:	4926      	ldr	r1, [pc, #152]	; (f178 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f0de:	4827      	ldr	r0, [pc, #156]	; (f17c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f0e0:	4b1d      	ldr	r3, [pc, #116]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f0e2:	4798      	blx	r3
    f0e4:	4a1d      	ldr	r2, [pc, #116]	; (f15c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f0e6:	491e      	ldr	r1, [pc, #120]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f0e8:	4824      	ldr	r0, [pc, #144]	; (f17c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f0ea:	4b1e      	ldr	r3, [pc, #120]	; (f164 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f0ec:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f0ee:	4924      	ldr	r1, [pc, #144]	; (f180 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f0f0:	4824      	ldr	r0, [pc, #144]	; (f184 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f0f2:	4b19      	ldr	r3, [pc, #100]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f0f4:	4798      	blx	r3
    f0f6:	4a19      	ldr	r2, [pc, #100]	; (f15c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f0f8:	4919      	ldr	r1, [pc, #100]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f0fa:	4822      	ldr	r0, [pc, #136]	; (f184 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f0fc:	4b19      	ldr	r3, [pc, #100]	; (f164 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f0fe:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f100:	4921      	ldr	r1, [pc, #132]	; (f188 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f102:	4822      	ldr	r0, [pc, #136]	; (f18c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f104:	4b14      	ldr	r3, [pc, #80]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f106:	4798      	blx	r3
    f108:	4a14      	ldr	r2, [pc, #80]	; (f15c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f10a:	4915      	ldr	r1, [pc, #84]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f10c:	481f      	ldr	r0, [pc, #124]	; (f18c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f10e:	4b15      	ldr	r3, [pc, #84]	; (f164 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f110:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f112:	491f      	ldr	r1, [pc, #124]	; (f190 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f114:	481f      	ldr	r0, [pc, #124]	; (f194 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f116:	4b10      	ldr	r3, [pc, #64]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f118:	4798      	blx	r3
    f11a:	4a10      	ldr	r2, [pc, #64]	; (f15c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f11c:	4910      	ldr	r1, [pc, #64]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f11e:	481d      	ldr	r0, [pc, #116]	; (f194 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f120:	4b10      	ldr	r3, [pc, #64]	; (f164 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f122:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f124:	491c      	ldr	r1, [pc, #112]	; (f198 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f126:	481d      	ldr	r0, [pc, #116]	; (f19c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f128:	4b0b      	ldr	r3, [pc, #44]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f12a:	4798      	blx	r3
    f12c:	4a0b      	ldr	r2, [pc, #44]	; (f15c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f12e:	490c      	ldr	r1, [pc, #48]	; (f160 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f130:	481a      	ldr	r0, [pc, #104]	; (f19c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f132:	4b0c      	ldr	r3, [pc, #48]	; (f164 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f134:	4798      	blx	r3
    f136:	481a      	ldr	r0, [pc, #104]	; (f1a0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f138:	4b1a      	ldr	r3, [pc, #104]	; (f1a4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f13a:	4798      	blx	r3
    f13c:	4a07      	ldr	r2, [pc, #28]	; (f15c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f13e:	491a      	ldr	r1, [pc, #104]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f140:	4817      	ldr	r0, [pc, #92]	; (f1a0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f142:	4b08      	ldr	r3, [pc, #32]	; (f164 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f144:	4798      	blx	r3
    f146:	bf00      	nop
    f148:	3708      	adds	r7, #8
    f14a:	46bd      	mov	sp, r7
    f14c:	bd80      	pop	{r7, pc}
    f14e:	bf00      	nop
    f150:	2000aae8 	.word	0x2000aae8
    f154:	2000177c 	.word	0x2000177c
    f158:	0000e5e9 	.word	0x0000e5e9
    f15c:	20000000 	.word	0x20000000
    f160:	0000e621 	.word	0x0000e621
    f164:	000108c5 	.word	0x000108c5
    f168:	2000ab7c 	.word	0x2000ab7c
    f16c:	2000179c 	.word	0x2000179c
    f170:	2000aca0 	.word	0x2000aca0
    f174:	200017bc 	.word	0x200017bc
    f178:	2000ab9c 	.word	0x2000ab9c
    f17c:	200017dc 	.word	0x200017dc
    f180:	2000ac60 	.word	0x2000ac60
    f184:	200017fc 	.word	0x200017fc
    f188:	2000ac80 	.word	0x2000ac80
    f18c:	2000181c 	.word	0x2000181c
    f190:	2000ab58 	.word	0x2000ab58
    f194:	2000183c 	.word	0x2000183c
    f198:	2000abf8 	.word	0x2000abf8
    f19c:	2000185c 	.word	0x2000185c
    f1a0:	20001880 	.word	0x20001880
    f1a4:	0000eca9 	.word	0x0000eca9
    f1a8:	0000ecf1 	.word	0x0000ecf1

0000f1ac <_GLOBAL__sub_I_ptrCDCClass>:
    f1ac:	b580      	push	{r7, lr}
    f1ae:	af00      	add	r7, sp, #0
    f1b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f1b4:	2001      	movs	r0, #1
    f1b6:	4b01      	ldr	r3, [pc, #4]	; (f1bc <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    f1b8:	4798      	blx	r3
    f1ba:	bd80      	pop	{r7, pc}
    f1bc:	0000f08d 	.word	0x0000f08d

0000f1c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    f1c0:	b580      	push	{r7, lr}
    f1c2:	b086      	sub	sp, #24
    f1c4:	af00      	add	r7, sp, #0
    f1c6:	60f8      	str	r0, [r7, #12]
    f1c8:	60b9      	str	r1, [r7, #8]
    f1ca:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    f1cc:	2300      	movs	r3, #0
    f1ce:	617b      	str	r3, [r7, #20]
  while (size--) {
    f1d0:	687b      	ldr	r3, [r7, #4]
    f1d2:	1e5a      	subs	r2, r3, #1
    f1d4:	607a      	str	r2, [r7, #4]
    f1d6:	2b00      	cmp	r3, #0
    f1d8:	bf14      	ite	ne
    f1da:	2301      	movne	r3, #1
    f1dc:	2300      	moveq	r3, #0
    f1de:	b2db      	uxtb	r3, r3
    f1e0:	2b00      	cmp	r3, #0
    f1e2:	d016      	beq.n	f212 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    f1e4:	68fb      	ldr	r3, [r7, #12]
    f1e6:	681b      	ldr	r3, [r3, #0]
    f1e8:	681a      	ldr	r2, [r3, #0]
    f1ea:	68bb      	ldr	r3, [r7, #8]
    f1ec:	1c59      	adds	r1, r3, #1
    f1ee:	60b9      	str	r1, [r7, #8]
    f1f0:	781b      	ldrb	r3, [r3, #0]
    f1f2:	4619      	mov	r1, r3
    f1f4:	68f8      	ldr	r0, [r7, #12]
    f1f6:	4790      	blx	r2
    f1f8:	4603      	mov	r3, r0
    f1fa:	2b00      	cmp	r3, #0
    f1fc:	bf14      	ite	ne
    f1fe:	2301      	movne	r3, #1
    f200:	2300      	moveq	r3, #0
    f202:	b2db      	uxtb	r3, r3
    f204:	2b00      	cmp	r3, #0
    f206:	d003      	beq.n	f210 <_ZN5Print5writeEPKhj+0x50>
    f208:	697b      	ldr	r3, [r7, #20]
    f20a:	3301      	adds	r3, #1
    f20c:	617b      	str	r3, [r7, #20]
  while (size--) {
    f20e:	e7df      	b.n	f1d0 <_ZN5Print5writeEPKhj+0x10>
    else break;
    f210:	bf00      	nop
  }
  return n;
    f212:	697b      	ldr	r3, [r7, #20]
}
    f214:	4618      	mov	r0, r3
    f216:	3718      	adds	r7, #24
    f218:	46bd      	mov	sp, r7
    f21a:	bd80      	pop	{r7, pc}

0000f21c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    f21c:	b480      	push	{r7}
    f21e:	b083      	sub	sp, #12
    f220:	af00      	add	r7, sp, #0
    f222:	6078      	str	r0, [r7, #4]
    f224:	460b      	mov	r3, r1
    f226:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f228:	78fb      	ldrb	r3, [r7, #3]
    f22a:	687a      	ldr	r2, [r7, #4]
    f22c:	01db      	lsls	r3, r3, #7
    f22e:	4413      	add	r3, r2
    f230:	681b      	ldr	r3, [r3, #0]
}
    f232:	4618      	mov	r0, r3
    f234:	370c      	adds	r7, #12
    f236:	46bd      	mov	sp, r7
    f238:	bc80      	pop	{r7}
    f23a:	4770      	bx	lr

0000f23c <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    f23c:	b480      	push	{r7}
    f23e:	b083      	sub	sp, #12
    f240:	af00      	add	r7, sp, #0
    f242:	6078      	str	r0, [r7, #4]
    f244:	460b      	mov	r3, r1
    f246:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f248:	78fb      	ldrb	r3, [r7, #3]
    f24a:	687a      	ldr	r2, [r7, #4]
    f24c:	01db      	lsls	r3, r3, #7
    f24e:	4413      	add	r3, r2
    f250:	3310      	adds	r3, #16
    f252:	681b      	ldr	r3, [r3, #0]
}
    f254:	4618      	mov	r0, r3
    f256:	370c      	adds	r7, #12
    f258:	46bd      	mov	sp, r7
    f25a:	bc80      	pop	{r7}
    f25c:	4770      	bx	lr

0000f25e <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f25e:	b480      	push	{r7}
    f260:	b083      	sub	sp, #12
    f262:	af00      	add	r7, sp, #0
    f264:	6078      	str	r0, [r7, #4]
    f266:	460b      	mov	r3, r1
    f268:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f26a:	78fb      	ldrb	r3, [r7, #3]
    f26c:	687a      	ldr	r2, [r7, #4]
    f26e:	01db      	lsls	r3, r3, #7
    f270:	4413      	add	r3, r2
    f272:	3320      	adds	r3, #32
    f274:	681b      	ldr	r3, [r3, #0]
}
    f276:	4618      	mov	r0, r3
    f278:	370c      	adds	r7, #12
    f27a:	46bd      	mov	sp, r7
    f27c:	bc80      	pop	{r7}
    f27e:	4770      	bx	lr

0000f280 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f280:	b580      	push	{r7, lr}
    f282:	b086      	sub	sp, #24
    f284:	af00      	add	r7, sp, #0
    f286:	4603      	mov	r3, r0
    f288:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f28a:	f107 030c 	add.w	r3, r7, #12
    f28e:	4618      	mov	r0, r3
    f290:	4b13      	ldr	r3, [pc, #76]	; (f2e0 <_gpio_get_level+0x60>)
    f292:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f294:	79fb      	ldrb	r3, [r7, #7]
    f296:	4619      	mov	r1, r3
    f298:	4812      	ldr	r0, [pc, #72]	; (f2e4 <_gpio_get_level+0x64>)
    f29a:	4b13      	ldr	r3, [pc, #76]	; (f2e8 <_gpio_get_level+0x68>)
    f29c:	4798      	blx	r3
    f29e:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f2a0:	79fb      	ldrb	r3, [r7, #7]
    f2a2:	4619      	mov	r1, r3
    f2a4:	480f      	ldr	r0, [pc, #60]	; (f2e4 <_gpio_get_level+0x64>)
    f2a6:	4b11      	ldr	r3, [pc, #68]	; (f2ec <_gpio_get_level+0x6c>)
    f2a8:	4798      	blx	r3
    f2aa:	4602      	mov	r2, r0
    f2ac:	697b      	ldr	r3, [r7, #20]
    f2ae:	43db      	mvns	r3, r3
    f2b0:	4013      	ands	r3, r2
    f2b2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f2b4:	79fb      	ldrb	r3, [r7, #7]
    f2b6:	4619      	mov	r1, r3
    f2b8:	480a      	ldr	r0, [pc, #40]	; (f2e4 <_gpio_get_level+0x64>)
    f2ba:	4b0d      	ldr	r3, [pc, #52]	; (f2f0 <_gpio_get_level+0x70>)
    f2bc:	4798      	blx	r3
    f2be:	4602      	mov	r2, r0
    f2c0:	697b      	ldr	r3, [r7, #20]
    f2c2:	4013      	ands	r3, r2
    f2c4:	693a      	ldr	r2, [r7, #16]
    f2c6:	4313      	orrs	r3, r2
    f2c8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f2ca:	f107 030c 	add.w	r3, r7, #12
    f2ce:	4618      	mov	r0, r3
    f2d0:	4b08      	ldr	r3, [pc, #32]	; (f2f4 <_gpio_get_level+0x74>)
    f2d2:	4798      	blx	r3

	return tmp;
    f2d4:	693b      	ldr	r3, [r7, #16]
}
    f2d6:	4618      	mov	r0, r3
    f2d8:	3718      	adds	r7, #24
    f2da:	46bd      	mov	sp, r7
    f2dc:	bd80      	pop	{r7, pc}
    f2de:	bf00      	nop
    f2e0:	00002989 	.word	0x00002989
    f2e4:	41008000 	.word	0x41008000
    f2e8:	0000f21d 	.word	0x0000f21d
    f2ec:	0000f25f 	.word	0x0000f25f
    f2f0:	0000f23d 	.word	0x0000f23d
    f2f4:	000029af 	.word	0x000029af

0000f2f8 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f2f8:	b580      	push	{r7, lr}
    f2fa:	b082      	sub	sp, #8
    f2fc:	af00      	add	r7, sp, #0
    f2fe:	4603      	mov	r3, r0
    f300:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f302:	79fb      	ldrb	r3, [r7, #7]
    f304:	115b      	asrs	r3, r3, #5
    f306:	b2db      	uxtb	r3, r3
    f308:	4618      	mov	r0, r3
    f30a:	4b09      	ldr	r3, [pc, #36]	; (f330 <gpio_get_pin_level+0x38>)
    f30c:	4798      	blx	r3
    f30e:	4601      	mov	r1, r0
    f310:	79fb      	ldrb	r3, [r7, #7]
    f312:	f003 031f 	and.w	r3, r3, #31
    f316:	2201      	movs	r2, #1
    f318:	fa02 f303 	lsl.w	r3, r2, r3
    f31c:	400b      	ands	r3, r1
    f31e:	2b00      	cmp	r3, #0
    f320:	bf14      	ite	ne
    f322:	2301      	movne	r3, #1
    f324:	2300      	moveq	r3, #0
    f326:	b2db      	uxtb	r3, r3
}
    f328:	4618      	mov	r0, r3
    f32a:	3708      	adds	r7, #8
    f32c:	46bd      	mov	sp, r7
    f32e:	bd80      	pop	{r7, pc}
    f330:	0000f281 	.word	0x0000f281

0000f334 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    f334:	b480      	push	{r7}
    f336:	b083      	sub	sp, #12
    f338:	af00      	add	r7, sp, #0
    f33a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    f33c:	4b06      	ldr	r3, [pc, #24]	; (f358 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f33e:	681b      	ldr	r3, [r3, #0]
    f340:	2201      	movs	r2, #1
    f342:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    f344:	4b04      	ldr	r3, [pc, #16]	; (f358 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f346:	681b      	ldr	r3, [r3, #0]
    f348:	2200      	movs	r2, #0
    f34a:	705a      	strb	r2, [r3, #1]
}
    f34c:	bf00      	nop
    f34e:	370c      	adds	r7, #12
    f350:	46bd      	mov	sp, r7
    f352:	bc80      	pop	{r7}
    f354:	4770      	bx	lr
    f356:	bf00      	nop
    f358:	200019e0 	.word	0x200019e0

0000f35c <_ZL10USBPluggedv>:

static void USBPlugged(void){
    f35c:	b580      	push	{r7, lr}
    f35e:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    f360:	2040      	movs	r0, #64	; 0x40
    f362:	4b0a      	ldr	r3, [pc, #40]	; (f38c <_ZL10USBPluggedv+0x30>)
    f364:	4798      	blx	r3
    f366:	4603      	mov	r3, r0
    f368:	2b00      	cmp	r3, #0
    f36a:	d004      	beq.n	f376 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    f36c:	4b08      	ldr	r3, [pc, #32]	; (f390 <_ZL10USBPluggedv+0x34>)
    f36e:	681b      	ldr	r3, [r3, #0]
    f370:	2201      	movs	r2, #1
    f372:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    f374:	e007      	b.n	f386 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    f376:	4b06      	ldr	r3, [pc, #24]	; (f390 <_ZL10USBPluggedv+0x34>)
    f378:	681b      	ldr	r3, [r3, #0]
    f37a:	2200      	movs	r2, #0
    f37c:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    f37e:	4b04      	ldr	r3, [pc, #16]	; (f390 <_ZL10USBPluggedv+0x34>)
    f380:	681b      	ldr	r3, [r3, #0]
    f382:	2200      	movs	r2, #0
    f384:	701a      	strb	r2, [r3, #0]
}
    f386:	bf00      	nop
    f388:	bd80      	pop	{r7, pc}
    f38a:	bf00      	nop
    f38c:	0000f2f9 	.word	0x0000f2f9
    f390:	200019e0 	.word	0x200019e0

0000f394 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    f394:	b480      	push	{r7}
    f396:	b083      	sub	sp, #12
    f398:	af00      	add	r7, sp, #0
    f39a:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    f39c:	4a04      	ldr	r2, [pc, #16]	; (f3b0 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    f39e:	687b      	ldr	r3, [r7, #4]
    f3a0:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    f3a2:	687b      	ldr	r3, [r7, #4]
    f3a4:	4618      	mov	r0, r3
    f3a6:	370c      	adds	r7, #12
    f3a8:	46bd      	mov	sp, r7
    f3aa:	bc80      	pop	{r7}
    f3ac:	4770      	bx	lr
    f3ae:	bf00      	nop
    f3b0:	200019e0 	.word	0x200019e0

0000f3b4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    f3b4:	b480      	push	{r7}
    f3b6:	b083      	sub	sp, #12
    f3b8:	af00      	add	r7, sp, #0
    f3ba:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    f3bc:	687b      	ldr	r3, [r7, #4]
    f3be:	4618      	mov	r0, r3
    f3c0:	370c      	adds	r7, #12
    f3c2:	46bd      	mov	sp, r7
    f3c4:	bc80      	pop	{r7}
    f3c6:	4770      	bx	lr

0000f3c8 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    f3c8:	b580      	push	{r7, lr}
    f3ca:	b082      	sub	sp, #8
    f3cc:	af00      	add	r7, sp, #0
    f3ce:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    f3d0:	491e      	ldr	r1, [pc, #120]	; (f44c <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    f3d2:	2040      	movs	r0, #64	; 0x40
    f3d4:	4b1e      	ldr	r3, [pc, #120]	; (f450 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    f3d6:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    f3d8:	481e      	ldr	r0, [pc, #120]	; (f454 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f3da:	4b1f      	ldr	r3, [pc, #124]	; (f458 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f3dc:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    f3de:	2040      	movs	r0, #64	; 0x40
    f3e0:	4b1e      	ldr	r3, [pc, #120]	; (f45c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    f3e2:	4798      	blx	r3
    f3e4:	4603      	mov	r3, r0
    f3e6:	461a      	mov	r2, r3
    f3e8:	687b      	ldr	r3, [r7, #4]
    f3ea:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    f3ec:	687b      	ldr	r3, [r7, #4]
    f3ee:	78db      	ldrb	r3, [r3, #3]
    f3f0:	2b00      	cmp	r3, #0
    f3f2:	d021      	beq.n	f438 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    f3f4:	687b      	ldr	r3, [r7, #4]
    f3f6:	2200      	movs	r2, #0
    f3f8:	709a      	strb	r2, [r3, #2]
			plugged=true;
    f3fa:	687b      	ldr	r3, [r7, #4]
    f3fc:	2201      	movs	r2, #1
    f3fe:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    f400:	f44f 7216 	mov.w	r2, #600	; 0x258
    f404:	4916      	ldr	r1, [pc, #88]	; (f460 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    f406:	4813      	ldr	r0, [pc, #76]	; (f454 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f408:	4b16      	ldr	r3, [pc, #88]	; (f464 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    f40a:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    f40c:	4816      	ldr	r0, [pc, #88]	; (f468 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    f40e:	4b17      	ldr	r3, [pc, #92]	; (f46c <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    f410:	4798      	blx	r3
    f412:	4603      	mov	r3, r0
    f414:	f083 0301 	eor.w	r3, r3, #1
    f418:	b2db      	uxtb	r3, r3
    f41a:	2b00      	cmp	r3, #0
    f41c:	d008      	beq.n	f430 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    f41e:	687b      	ldr	r3, [r7, #4]
    f420:	789b      	ldrb	r3, [r3, #2]
    f422:	b2db      	uxtb	r3, r3
    f424:	2b00      	cmp	r3, #0
    f426:	d0f1      	beq.n	f40c <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    f428:	687b      	ldr	r3, [r7, #4]
    f42a:	2200      	movs	r2, #0
    f42c:	701a      	strb	r2, [r3, #0]
					return;
    f42e:	e009      	b.n	f444 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    f430:	4808      	ldr	r0, [pc, #32]	; (f454 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f432:	4b0f      	ldr	r3, [pc, #60]	; (f470 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    f434:	4798      	blx	r3
    f436:	e005      	b.n	f444 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    f438:	687b      	ldr	r3, [r7, #4]
    f43a:	2200      	movs	r2, #0
    f43c:	701a      	strb	r2, [r3, #0]
			plugged=false;
    f43e:	687b      	ldr	r3, [r7, #4]
    f440:	2200      	movs	r2, #0
    f442:	705a      	strb	r2, [r3, #1]
		}
		
}
    f444:	3708      	adds	r7, #8
    f446:	46bd      	mov	sp, r7
    f448:	bd80      	pop	{r7, pc}
    f44a:	bf00      	nop
    f44c:	0000f35d 	.word	0x0000f35d
    f450:	00002ead 	.word	0x00002ead
    f454:	20001980 	.word	0x20001980
    f458:	0000e6d5 	.word	0x0000e6d5
    f45c:	0000f2f9 	.word	0x0000f2f9
    f460:	0000f335 	.word	0x0000f335
    f464:	0000e891 	.word	0x0000e891
    f468:	20001880 	.word	0x20001880
    f46c:	0000ed61 	.word	0x0000ed61
    f470:	0000e749 	.word	0x0000e749

0000f474 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    f474:	b580      	push	{r7, lr}
    f476:	b082      	sub	sp, #8
    f478:	af00      	add	r7, sp, #0
    f47a:	6078      	str	r0, [r7, #4]
    f47c:	6039      	str	r1, [r7, #0]
    f47e:	687b      	ldr	r3, [r7, #4]
    f480:	2b01      	cmp	r3, #1
    f482:	d14c      	bne.n	f51e <_Z41__static_initialization_and_destruction_0ii+0xaa>
    f484:	683b      	ldr	r3, [r7, #0]
    f486:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f48a:	4293      	cmp	r3, r2
    f48c:	d147      	bne.n	f51e <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f48e:	4926      	ldr	r1, [pc, #152]	; (f528 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    f490:	4826      	ldr	r0, [pc, #152]	; (f52c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    f492:	4b27      	ldr	r3, [pc, #156]	; (f530 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f494:	4798      	blx	r3
    f496:	4a27      	ldr	r2, [pc, #156]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f498:	4927      	ldr	r1, [pc, #156]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f49a:	4824      	ldr	r0, [pc, #144]	; (f52c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    f49c:	4b27      	ldr	r3, [pc, #156]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f49e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f4a0:	4927      	ldr	r1, [pc, #156]	; (f540 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f4a2:	4828      	ldr	r0, [pc, #160]	; (f544 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f4a4:	4b22      	ldr	r3, [pc, #136]	; (f530 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4a6:	4798      	blx	r3
    f4a8:	4a22      	ldr	r2, [pc, #136]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4aa:	4923      	ldr	r1, [pc, #140]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4ac:	4825      	ldr	r0, [pc, #148]	; (f544 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f4ae:	4b23      	ldr	r3, [pc, #140]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4b0:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f4b2:	4925      	ldr	r1, [pc, #148]	; (f548 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f4b4:	4825      	ldr	r0, [pc, #148]	; (f54c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f4b6:	4b1e      	ldr	r3, [pc, #120]	; (f530 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4b8:	4798      	blx	r3
    f4ba:	4a1e      	ldr	r2, [pc, #120]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4bc:	491e      	ldr	r1, [pc, #120]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4be:	4823      	ldr	r0, [pc, #140]	; (f54c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f4c0:	4b1e      	ldr	r3, [pc, #120]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4c2:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f4c4:	4922      	ldr	r1, [pc, #136]	; (f550 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f4c6:	4823      	ldr	r0, [pc, #140]	; (f554 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f4c8:	4b19      	ldr	r3, [pc, #100]	; (f530 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4ca:	4798      	blx	r3
    f4cc:	4a19      	ldr	r2, [pc, #100]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4ce:	491a      	ldr	r1, [pc, #104]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4d0:	4820      	ldr	r0, [pc, #128]	; (f554 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f4d2:	4b1a      	ldr	r3, [pc, #104]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4d4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f4d6:	4920      	ldr	r1, [pc, #128]	; (f558 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f4d8:	4820      	ldr	r0, [pc, #128]	; (f55c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f4da:	4b15      	ldr	r3, [pc, #84]	; (f530 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4dc:	4798      	blx	r3
    f4de:	4a15      	ldr	r2, [pc, #84]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4e0:	4915      	ldr	r1, [pc, #84]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4e2:	481e      	ldr	r0, [pc, #120]	; (f55c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f4e4:	4b15      	ldr	r3, [pc, #84]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4e6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f4e8:	491d      	ldr	r1, [pc, #116]	; (f560 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f4ea:	481e      	ldr	r0, [pc, #120]	; (f564 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f4ec:	4b10      	ldr	r3, [pc, #64]	; (f530 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4ee:	4798      	blx	r3
    f4f0:	4a10      	ldr	r2, [pc, #64]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4f2:	4911      	ldr	r1, [pc, #68]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4f4:	481b      	ldr	r0, [pc, #108]	; (f564 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f4f6:	4b11      	ldr	r3, [pc, #68]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4f8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f4fa:	491b      	ldr	r1, [pc, #108]	; (f568 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f4fc:	481b      	ldr	r0, [pc, #108]	; (f56c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f4fe:	4b0c      	ldr	r3, [pc, #48]	; (f530 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f500:	4798      	blx	r3
    f502:	4a0c      	ldr	r2, [pc, #48]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f504:	490c      	ldr	r1, [pc, #48]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f506:	4819      	ldr	r0, [pc, #100]	; (f56c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f508:	4b0c      	ldr	r3, [pc, #48]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f50a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f50c:	4918      	ldr	r1, [pc, #96]	; (f570 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f50e:	4819      	ldr	r0, [pc, #100]	; (f574 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f510:	4b07      	ldr	r3, [pc, #28]	; (f530 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f512:	4798      	blx	r3
    f514:	4a07      	ldr	r2, [pc, #28]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f516:	4908      	ldr	r1, [pc, #32]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f518:	4816      	ldr	r0, [pc, #88]	; (f574 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f51a:	4b08      	ldr	r3, [pc, #32]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f51c:	4798      	blx	r3
    f51e:	bf00      	nop
    f520:	3708      	adds	r7, #8
    f522:	46bd      	mov	sp, r7
    f524:	bd80      	pop	{r7, pc}
    f526:	bf00      	nop
    f528:	2000aae8 	.word	0x2000aae8
    f52c:	200018e0 	.word	0x200018e0
    f530:	0000e5e9 	.word	0x0000e5e9
    f534:	20000000 	.word	0x20000000
    f538:	0000e621 	.word	0x0000e621
    f53c:	000108c5 	.word	0x000108c5
    f540:	2000ab7c 	.word	0x2000ab7c
    f544:	20001900 	.word	0x20001900
    f548:	2000aca0 	.word	0x2000aca0
    f54c:	20001920 	.word	0x20001920
    f550:	2000ab9c 	.word	0x2000ab9c
    f554:	20001940 	.word	0x20001940
    f558:	2000ac60 	.word	0x2000ac60
    f55c:	20001960 	.word	0x20001960
    f560:	2000ac80 	.word	0x2000ac80
    f564:	20001980 	.word	0x20001980
    f568:	2000ab58 	.word	0x2000ab58
    f56c:	200019a0 	.word	0x200019a0
    f570:	2000abf8 	.word	0x2000abf8
    f574:	200019c0 	.word	0x200019c0

0000f578 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    f578:	b580      	push	{r7, lr}
    f57a:	af00      	add	r7, sp, #0
    f57c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f580:	2001      	movs	r0, #1
    f582:	4b01      	ldr	r3, [pc, #4]	; (f588 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    f584:	4798      	blx	r3
    f586:	bd80      	pop	{r7, pc}
    f588:	0000f475 	.word	0x0000f475

0000f58c <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    f58c:	b480      	push	{r7}
    f58e:	b083      	sub	sp, #12
    f590:	af00      	add	r7, sp, #0
    f592:	6078      	str	r0, [r7, #4]
    return (void *)0;
    f594:	2300      	movs	r3, #0
	}
    f596:	4618      	mov	r0, r3
    f598:	370c      	adds	r7, #12
    f59a:	46bd      	mov	sp, r7
    f59c:	bc80      	pop	{r7}
    f59e:	4770      	bx	lr

0000f5a0 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    f5a0:	b480      	push	{r7}
    f5a2:	af00      	add	r7, sp, #0
		}
    f5a4:	bf00      	nop
    f5a6:	46bd      	mov	sp, r7
    f5a8:	bc80      	pop	{r7}
    f5aa:	4770      	bx	lr

0000f5ac <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
    f5ac:	4770      	bx	lr

0000f5ae <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
    f5ae:	4770      	bx	lr

0000f5b0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    f5b0:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    f5b2:	2302      	movs	r3, #2
    f5b4:	4801      	ldr	r0, [pc, #4]	; (f5bc <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
    f5b6:	4c02      	ldr	r4, [pc, #8]	; (f5c0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
    f5b8:	47a0      	blx	r4
	return	w;
}
    f5ba:	bd10      	pop	{r4, pc}
    f5bc:	20008ec4 	.word	0x20008ec4
    f5c0:	0000fe79 	.word	0x0000fe79

0000f5c4 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    f5c4:	b500      	push	{lr}
    f5c6:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
    f5c8:	4b07      	ldr	r3, [pc, #28]	; (f5e8 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
    f5ca:	881b      	ldrh	r3, [r3, #0]
    f5cc:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    f5d0:	4b06      	ldr	r3, [pc, #24]	; (f5ec <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
    f5d2:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
    f5d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    f5d8:	3202      	adds	r2, #2
    f5da:	a901      	add	r1, sp, #4
    f5dc:	4b04      	ldr	r3, [pc, #16]	; (f5f0 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
    f5de:	4798      	blx	r3
	return	w;
}
    f5e0:	b003      	add	sp, #12
    f5e2:	f85d fb04 	ldr.w	pc, [sp], #4
    f5e6:	bf00      	nop
    f5e8:	00011138 	.word	0x00011138
    f5ec:	200019e4 	.word	0x200019e4
    f5f0:	0000f5b1 	.word	0x0000f5b1

0000f5f4 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
    f5f4:	b510      	push	{r4, lr}
    f5f6:	4604      	mov	r4, r0
    f5f8:	30c0      	adds	r0, #192	; 0xc0
    f5fa:	4b03      	ldr	r3, [pc, #12]	; (f608 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
    f5fc:	4798      	blx	r3
    f5fe:	4620      	mov	r0, r4
    f600:	4b02      	ldr	r3, [pc, #8]	; (f60c <_ZN17MemoryFlash_ClassD1Ev+0x18>)
    f602:	4798      	blx	r3
{
} //~MemoryManagment_Class
    f604:	4620      	mov	r0, r4
    f606:	bd10      	pop	{r4, pc}
    f608:	0000f82b 	.word	0x0000f82b
    f60c:	0000f5af 	.word	0x0000f5af

0000f610 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
    f610:	b538      	push	{r3, r4, r5, lr}
    f612:	4604      	mov	r4, r0
    f614:	4b15      	ldr	r3, [pc, #84]	; (f66c <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
    f616:	4798      	blx	r3
    f618:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f61c:	4b14      	ldr	r3, [pc, #80]	; (f670 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
    f61e:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    f620:	f44f 7500 	mov.w	r5, #512	; 0x200
    f624:	462a      	mov	r2, r5
    f626:	2100      	movs	r1, #0
    f628:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    f62c:	4b11      	ldr	r3, [pc, #68]	; (f674 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
    f62e:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
    f630:	2300      	movs	r3, #0
    f632:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
  _iTail = 0;
    f636:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
    f63a:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	_currentAddress=0;
    f63e:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
	head=512;
    f642:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
	tail=0;
    f646:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	flashBuffer=&flashBufferStatic[0];
    f64a:	490b      	ldr	r1, [pc, #44]	; (f678 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
    f64c:	f246 32c0 	movw	r2, #25536	; 0x63c0
    f650:	50a1      	str	r1, [r4, r2]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
    f652:	4a0a      	ldr	r2, [pc, #40]	; (f67c <_ZN17MemoryFlash_ClassC1Ev+0x6c>)
    f654:	6812      	ldr	r2, [r2, #0]
    f656:	f502 42a1 	add.w	r2, r2, #20608	; 0x5080
    f65a:	322c      	adds	r2, #44	; 0x2c
    f65c:	f246 31c4 	movw	r1, #25540	; 0x63c4
    f660:	5062      	str	r2, [r4, r1]
	initiated=false;
    f662:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
} //MemoryManagment_Class
    f666:	4620      	mov	r0, r4
    f668:	bd38      	pop	{r3, r4, r5, pc}
    f66a:	bf00      	nop
    f66c:	0000f5ad 	.word	0x0000f5ad
    f670:	0000f829 	.word	0x0000f829
    f674:	00010a7d 	.word	0x00010a7d
    f678:	200019e8 	.word	0x200019e8
    f67c:	200019e4 	.word	0x200019e4

0000f680 <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
    f680:	b510      	push	{r4, lr}
    f682:	4604      	mov	r4, r0
		if (qspiFlash.Init())
    f684:	480a      	ldr	r0, [pc, #40]	; (f6b0 <_ZN17MemoryFlash_Class4InitEm+0x30>)
    f686:	4b0b      	ldr	r3, [pc, #44]	; (f6b4 <_ZN17MemoryFlash_Class4InitEm+0x34>)
    f688:	4798      	blx	r3
    f68a:	b948      	cbnz	r0, f6a0 <_ZN17MemoryFlash_Class4InitEm+0x20>
			initiated=true;
			//usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
		} 
		else
		{
			logger.SaveEvent("Flash Memory SelfTest FAILED");
    f68c:	490a      	ldr	r1, [pc, #40]	; (f6b8 <_ZN17MemoryFlash_Class4InitEm+0x38>)
    f68e:	480b      	ldr	r0, [pc, #44]	; (f6bc <_ZN17MemoryFlash_Class4InitEm+0x3c>)
    f690:	4b0b      	ldr	r3, [pc, #44]	; (f6c0 <_ZN17MemoryFlash_Class4InitEm+0x40>)
    f692:	4798      	blx	r3
			initiated=false;
    f694:	2300      	movs	r3, #0
    f696:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
			//usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return initiated;
}
    f69a:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
    f69e:	bd10      	pop	{r4, pc}
			logger.SaveEvent("Flash Memory SelfTest PASSED");
    f6a0:	4908      	ldr	r1, [pc, #32]	; (f6c4 <_ZN17MemoryFlash_Class4InitEm+0x44>)
    f6a2:	4806      	ldr	r0, [pc, #24]	; (f6bc <_ZN17MemoryFlash_Class4InitEm+0x3c>)
    f6a4:	4b06      	ldr	r3, [pc, #24]	; (f6c0 <_ZN17MemoryFlash_Class4InitEm+0x40>)
    f6a6:	4798      	blx	r3
			initiated=true;
    f6a8:	2301      	movs	r3, #1
    f6aa:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
    f6ae:	e7f4      	b.n	f69a <_ZN17MemoryFlash_Class4InitEm+0x1a>
    f6b0:	20008ec4 	.word	0x20008ec4
    f6b4:	0000fddd 	.word	0x0000fddd
    f6b8:	000111e8 	.word	0x000111e8
    f6bc:	20009310 	.word	0x20009310
    f6c0:	000102ed 	.word	0x000102ed
    f6c4:	000111c8 	.word	0x000111c8

0000f6c8 <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
		  return	w;
	  }

	  return	r;
  }
 uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
    f6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6ca:	4604      	mov	r4, r0
    f6cc:	460f      	mov	r7, r1
	  
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
    f6ce:	f246 33c4 	movw	r3, #25540	; 0x63c4
    f6d2:	58c3      	ldr	r3, [r0, r3]
    f6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    f6d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    f6dc:	d907      	bls.n	f6ee <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x26>
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
    f6de:	4b12      	ldr	r3, [pc, #72]	; (f728 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x60>)
    f6e0:	681b      	ldr	r3, [r3, #0]
    f6e2:	f503 43a1 	add.w	r3, r3, #20608	; 0x5080
    f6e6:	332c      	adds	r3, #44	; 0x2c
			   stackpointerEventloger=addRef;
    f6e8:	f246 32c4 	movw	r2, #25540	; 0x63c4
    f6ec:	5083      	str	r3, [r0, r2]
		   else
		   {
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
    f6ee:	f246 35c4 	movw	r5, #25540	; 0x63c4
    f6f2:	5961      	ldr	r1, [r4, r5]
    f6f4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    f6f8:	5161      	str	r1, [r4, r5]
		  qspiFlash.Erase(stackpointerEventloger);
    f6fa:	4e0c      	ldr	r6, [pc, #48]	; (f72c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x64>)
    f6fc:	4630      	mov	r0, r6
    f6fe:	4b0c      	ldr	r3, [pc, #48]	; (f730 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x68>)
    f700:	4798      	blx	r3
		   uint32_t w=qspiFlash.WriteAddress(evl, stackpointerEventloger,QSPI_ERBLK);
    f702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f706:	5962      	ldr	r2, [r4, r5]
    f708:	4639      	mov	r1, r7
    f70a:	4630      	mov	r0, r6
    f70c:	4d09      	ldr	r5, [pc, #36]	; (f734 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
    f70e:	47a8      	blx	r5
		   if (w==0)
    f710:	b128      	cbz	r0, f71e <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x56>
		   {
			   return stackpointerEventloger;
		   } 
		   else
		   {
			   return (uint32_t)&flashMap->EventsLogStateSector+QSPI_ERBLK;
    f712:	4b05      	ldr	r3, [pc, #20]	; (f728 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x60>)
    f714:	6818      	ldr	r0, [r3, #0]
    f716:	f500 40c1 	add.w	r0, r0, #24704	; 0x6080
    f71a:	302c      	adds	r0, #44	; 0x2c
		   }
		   return	w;

	 
   }
    f71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			   return stackpointerEventloger;
    f71e:	f246 33c4 	movw	r3, #25540	; 0x63c4
    f722:	58e0      	ldr	r0, [r4, r3]
    f724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f726:	bf00      	nop
    f728:	200019e4 	.word	0x200019e4
    f72c:	20008ec4 	.word	0x20008ec4
    f730:	0000fe49 	.word	0x0000fe49
    f734:	0000fe79 	.word	0x0000fe79

0000f738 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
    f738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f73c:	4c2b      	ldr	r4, [pc, #172]	; (f7ec <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
    f73e:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
    f742:	492b      	ldr	r1, [pc, #172]	; (f7f0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
    f744:	4628      	mov	r0, r5
    f746:	4f2b      	ldr	r7, [pc, #172]	; (f7f4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
    f748:	47b8      	blx	r7
    f74a:	4e2b      	ldr	r6, [pc, #172]	; (f7f8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
    f74c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; f824 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
    f750:	4632      	mov	r2, r6
    f752:	4641      	mov	r1, r8
    f754:	4628      	mov	r0, r5
    f756:	4d29      	ldr	r5, [pc, #164]	; (f7fc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
    f758:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    f75a:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
    f75e:	4928      	ldr	r1, [pc, #160]	; (f800 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
    f760:	4648      	mov	r0, r9
    f762:	47b8      	blx	r7
    f764:	4632      	mov	r2, r6
    f766:	4641      	mov	r1, r8
    f768:	4648      	mov	r0, r9
    f76a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    f76c:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
    f770:	4924      	ldr	r1, [pc, #144]	; (f804 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
    f772:	4648      	mov	r0, r9
    f774:	47b8      	blx	r7
    f776:	4632      	mov	r2, r6
    f778:	4641      	mov	r1, r8
    f77a:	4648      	mov	r0, r9
    f77c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f77e:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
    f782:	4921      	ldr	r1, [pc, #132]	; (f808 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
    f784:	4648      	mov	r0, r9
    f786:	47b8      	blx	r7
    f788:	4632      	mov	r2, r6
    f78a:	4641      	mov	r1, r8
    f78c:	4648      	mov	r0, r9
    f78e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    f790:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
    f794:	491d      	ldr	r1, [pc, #116]	; (f80c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
    f796:	4648      	mov	r0, r9
    f798:	47b8      	blx	r7
    f79a:	4632      	mov	r2, r6
    f79c:	4641      	mov	r1, r8
    f79e:	4648      	mov	r0, r9
    f7a0:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f7a2:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
    f7a6:	491a      	ldr	r1, [pc, #104]	; (f810 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
    f7a8:	4648      	mov	r0, r9
    f7aa:	47b8      	blx	r7
    f7ac:	4632      	mov	r2, r6
    f7ae:	4641      	mov	r1, r8
    f7b0:	4648      	mov	r0, r9
    f7b2:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f7b4:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
    f7b8:	4916      	ldr	r1, [pc, #88]	; (f814 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
    f7ba:	4648      	mov	r0, r9
    f7bc:	47b8      	blx	r7
    f7be:	4632      	mov	r2, r6
    f7c0:	4641      	mov	r1, r8
    f7c2:	4648      	mov	r0, r9
    f7c4:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    f7c6:	f1a4 0918 	sub.w	r9, r4, #24
    f7ca:	4913      	ldr	r1, [pc, #76]	; (f818 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
    f7cc:	4648      	mov	r0, r9
    f7ce:	47b8      	blx	r7
    f7d0:	4632      	mov	r2, r6
    f7d2:	4641      	mov	r1, r8
    f7d4:	4648      	mov	r0, r9
    f7d6:	47a8      	blx	r5
    f7d8:	3408      	adds	r4, #8
    f7da:	4620      	mov	r0, r4
    f7dc:	4b0f      	ldr	r3, [pc, #60]	; (f81c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
    f7de:	4798      	blx	r3
    f7e0:	4632      	mov	r2, r6
    f7e2:	490f      	ldr	r1, [pc, #60]	; (f820 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
    f7e4:	4620      	mov	r0, r4
    f7e6:	47a8      	blx	r5
    f7e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f7ec:	20002ae0 	.word	0x20002ae0
    f7f0:	2000aae8 	.word	0x2000aae8
    f7f4:	0000e5e9 	.word	0x0000e5e9
    f7f8:	20000000 	.word	0x20000000
    f7fc:	000108c5 	.word	0x000108c5
    f800:	2000ab7c 	.word	0x2000ab7c
    f804:	2000aca0 	.word	0x2000aca0
    f808:	2000ab9c 	.word	0x2000ab9c
    f80c:	2000ac60 	.word	0x2000ac60
    f810:	2000ac80 	.word	0x2000ac80
    f814:	2000ab58 	.word	0x2000ab58
    f818:	2000abf8 	.word	0x2000abf8
    f81c:	0000f611 	.word	0x0000f611
    f820:	0000f5f5 	.word	0x0000f5f5
    f824:	0000e621 	.word	0x0000e621

0000f828 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
    f828:	4770      	bx	lr

0000f82a <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
    f82a:	4770      	bx	lr

0000f82c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    f82c:	b580      	push	{r7, lr}
    f82e:	b084      	sub	sp, #16
    f830:	af00      	add	r7, sp, #0
    f832:	60f8      	str	r0, [r7, #12]
    f834:	60b9      	str	r1, [r7, #8]
    f836:	4613      	mov	r3, r2
    f838:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f83a:	68fb      	ldr	r3, [r7, #12]
    f83c:	2b00      	cmp	r3, #0
    f83e:	d004      	beq.n	f84a <io_write+0x1e>
    f840:	68bb      	ldr	r3, [r7, #8]
    f842:	2b00      	cmp	r3, #0
    f844:	d001      	beq.n	f84a <io_write+0x1e>
    f846:	2301      	movs	r3, #1
    f848:	e000      	b.n	f84c <io_write+0x20>
    f84a:	2300      	movs	r3, #0
    f84c:	f003 0301 	and.w	r3, r3, #1
    f850:	b2db      	uxtb	r3, r3
    f852:	2234      	movs	r2, #52	; 0x34
    f854:	4907      	ldr	r1, [pc, #28]	; (f874 <io_write+0x48>)
    f856:	4618      	mov	r0, r3
    f858:	4b07      	ldr	r3, [pc, #28]	; (f878 <io_write+0x4c>)
    f85a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    f85c:	68fb      	ldr	r3, [r7, #12]
    f85e:	681b      	ldr	r3, [r3, #0]
    f860:	88fa      	ldrh	r2, [r7, #6]
    f862:	68b9      	ldr	r1, [r7, #8]
    f864:	68f8      	ldr	r0, [r7, #12]
    f866:	4798      	blx	r3
    f868:	4603      	mov	r3, r0
}
    f86a:	4618      	mov	r0, r3
    f86c:	3710      	adds	r7, #16
    f86e:	46bd      	mov	sp, r7
    f870:	bd80      	pop	{r7, pc}
    f872:	bf00      	nop
    f874:	00011208 	.word	0x00011208
    f878:	00004409 	.word	0x00004409

0000f87c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    f87c:	b580      	push	{r7, lr}
    f87e:	b084      	sub	sp, #16
    f880:	af00      	add	r7, sp, #0
    f882:	60f8      	str	r0, [r7, #12]
    f884:	60b9      	str	r1, [r7, #8]
    f886:	4613      	mov	r3, r2
    f888:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f88a:	68fb      	ldr	r3, [r7, #12]
    f88c:	2b00      	cmp	r3, #0
    f88e:	d004      	beq.n	f89a <io_read+0x1e>
    f890:	68bb      	ldr	r3, [r7, #8]
    f892:	2b00      	cmp	r3, #0
    f894:	d001      	beq.n	f89a <io_read+0x1e>
    f896:	2301      	movs	r3, #1
    f898:	e000      	b.n	f89c <io_read+0x20>
    f89a:	2300      	movs	r3, #0
    f89c:	f003 0301 	and.w	r3, r3, #1
    f8a0:	b2db      	uxtb	r3, r3
    f8a2:	223d      	movs	r2, #61	; 0x3d
    f8a4:	4907      	ldr	r1, [pc, #28]	; (f8c4 <io_read+0x48>)
    f8a6:	4618      	mov	r0, r3
    f8a8:	4b07      	ldr	r3, [pc, #28]	; (f8c8 <io_read+0x4c>)
    f8aa:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    f8ac:	68fb      	ldr	r3, [r7, #12]
    f8ae:	685b      	ldr	r3, [r3, #4]
    f8b0:	88fa      	ldrh	r2, [r7, #6]
    f8b2:	68b9      	ldr	r1, [r7, #8]
    f8b4:	68f8      	ldr	r0, [r7, #12]
    f8b6:	4798      	blx	r3
    f8b8:	4603      	mov	r3, r0
}
    f8ba:	4618      	mov	r0, r3
    f8bc:	3710      	adds	r7, #16
    f8be:	46bd      	mov	sp, r7
    f8c0:	bd80      	pop	{r7, pc}
    f8c2:	bf00      	nop
    f8c4:	00011208 	.word	0x00011208
    f8c8:	00004409 	.word	0x00004409

0000f8cc <hri_port_set_DIR_reg>:
{
    f8cc:	b480      	push	{r7}
    f8ce:	b085      	sub	sp, #20
    f8d0:	af00      	add	r7, sp, #0
    f8d2:	60f8      	str	r0, [r7, #12]
    f8d4:	460b      	mov	r3, r1
    f8d6:	607a      	str	r2, [r7, #4]
    f8d8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    f8da:	7afb      	ldrb	r3, [r7, #11]
    f8dc:	68fa      	ldr	r2, [r7, #12]
    f8de:	01db      	lsls	r3, r3, #7
    f8e0:	4413      	add	r3, r2
    f8e2:	3308      	adds	r3, #8
    f8e4:	687a      	ldr	r2, [r7, #4]
    f8e6:	601a      	str	r2, [r3, #0]
}
    f8e8:	bf00      	nop
    f8ea:	3714      	adds	r7, #20
    f8ec:	46bd      	mov	sp, r7
    f8ee:	bc80      	pop	{r7}
    f8f0:	4770      	bx	lr

0000f8f2 <hri_port_clear_DIR_reg>:
{
    f8f2:	b480      	push	{r7}
    f8f4:	b085      	sub	sp, #20
    f8f6:	af00      	add	r7, sp, #0
    f8f8:	60f8      	str	r0, [r7, #12]
    f8fa:	460b      	mov	r3, r1
    f8fc:	607a      	str	r2, [r7, #4]
    f8fe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    f900:	7afb      	ldrb	r3, [r7, #11]
    f902:	68fa      	ldr	r2, [r7, #12]
    f904:	01db      	lsls	r3, r3, #7
    f906:	4413      	add	r3, r2
    f908:	3304      	adds	r3, #4
    f90a:	687a      	ldr	r2, [r7, #4]
    f90c:	601a      	str	r2, [r3, #0]
}
    f90e:	bf00      	nop
    f910:	3714      	adds	r7, #20
    f912:	46bd      	mov	sp, r7
    f914:	bc80      	pop	{r7}
    f916:	4770      	bx	lr

0000f918 <hri_port_set_OUT_reg>:
{
    f918:	b480      	push	{r7}
    f91a:	b085      	sub	sp, #20
    f91c:	af00      	add	r7, sp, #0
    f91e:	60f8      	str	r0, [r7, #12]
    f920:	460b      	mov	r3, r1
    f922:	607a      	str	r2, [r7, #4]
    f924:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    f926:	7afb      	ldrb	r3, [r7, #11]
    f928:	68fa      	ldr	r2, [r7, #12]
    f92a:	01db      	lsls	r3, r3, #7
    f92c:	4413      	add	r3, r2
    f92e:	3318      	adds	r3, #24
    f930:	687a      	ldr	r2, [r7, #4]
    f932:	601a      	str	r2, [r3, #0]
}
    f934:	bf00      	nop
    f936:	3714      	adds	r7, #20
    f938:	46bd      	mov	sp, r7
    f93a:	bc80      	pop	{r7}
    f93c:	4770      	bx	lr

0000f93e <hri_port_clear_OUT_reg>:
{
    f93e:	b480      	push	{r7}
    f940:	b085      	sub	sp, #20
    f942:	af00      	add	r7, sp, #0
    f944:	60f8      	str	r0, [r7, #12]
    f946:	460b      	mov	r3, r1
    f948:	607a      	str	r2, [r7, #4]
    f94a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f94c:	7afb      	ldrb	r3, [r7, #11]
    f94e:	68fa      	ldr	r2, [r7, #12]
    f950:	01db      	lsls	r3, r3, #7
    f952:	4413      	add	r3, r2
    f954:	3314      	adds	r3, #20
    f956:	687a      	ldr	r2, [r7, #4]
    f958:	601a      	str	r2, [r3, #0]
}
    f95a:	bf00      	nop
    f95c:	3714      	adds	r7, #20
    f95e:	46bd      	mov	sp, r7
    f960:	bc80      	pop	{r7}
    f962:	4770      	bx	lr

0000f964 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    f964:	b480      	push	{r7}
    f966:	b085      	sub	sp, #20
    f968:	af00      	add	r7, sp, #0
    f96a:	6078      	str	r0, [r7, #4]
    f96c:	4608      	mov	r0, r1
    f96e:	4611      	mov	r1, r2
    f970:	461a      	mov	r2, r3
    f972:	4603      	mov	r3, r0
    f974:	70fb      	strb	r3, [r7, #3]
    f976:	460b      	mov	r3, r1
    f978:	70bb      	strb	r3, [r7, #2]
    f97a:	4613      	mov	r3, r2
    f97c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    f97e:	78fa      	ldrb	r2, [r7, #3]
    f980:	78bb      	ldrb	r3, [r7, #2]
    f982:	6879      	ldr	r1, [r7, #4]
    f984:	01d2      	lsls	r2, r2, #7
    f986:	440a      	add	r2, r1
    f988:	4413      	add	r3, r2
    f98a:	3330      	adds	r3, #48	; 0x30
    f98c:	781b      	ldrb	r3, [r3, #0]
    f98e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    f990:	7bfb      	ldrb	r3, [r7, #15]
    f992:	f023 030f 	bic.w	r3, r3, #15
    f996:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    f998:	787b      	ldrb	r3, [r7, #1]
    f99a:	f003 030f 	and.w	r3, r3, #15
    f99e:	b2da      	uxtb	r2, r3
    f9a0:	7bfb      	ldrb	r3, [r7, #15]
    f9a2:	4313      	orrs	r3, r2
    f9a4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    f9a6:	78fa      	ldrb	r2, [r7, #3]
    f9a8:	78bb      	ldrb	r3, [r7, #2]
    f9aa:	6879      	ldr	r1, [r7, #4]
    f9ac:	01d2      	lsls	r2, r2, #7
    f9ae:	440a      	add	r2, r1
    f9b0:	4413      	add	r3, r2
    f9b2:	3330      	adds	r3, #48	; 0x30
    f9b4:	7bfa      	ldrb	r2, [r7, #15]
    f9b6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    f9b8:	bf00      	nop
    f9ba:	3714      	adds	r7, #20
    f9bc:	46bd      	mov	sp, r7
    f9be:	bc80      	pop	{r7}
    f9c0:	4770      	bx	lr

0000f9c2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    f9c2:	b480      	push	{r7}
    f9c4:	b085      	sub	sp, #20
    f9c6:	af00      	add	r7, sp, #0
    f9c8:	6078      	str	r0, [r7, #4]
    f9ca:	4608      	mov	r0, r1
    f9cc:	4611      	mov	r1, r2
    f9ce:	461a      	mov	r2, r3
    f9d0:	4603      	mov	r3, r0
    f9d2:	70fb      	strb	r3, [r7, #3]
    f9d4:	460b      	mov	r3, r1
    f9d6:	70bb      	strb	r3, [r7, #2]
    f9d8:	4613      	mov	r3, r2
    f9da:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    f9dc:	78fa      	ldrb	r2, [r7, #3]
    f9de:	78bb      	ldrb	r3, [r7, #2]
    f9e0:	6879      	ldr	r1, [r7, #4]
    f9e2:	01d2      	lsls	r2, r2, #7
    f9e4:	440a      	add	r2, r1
    f9e6:	4413      	add	r3, r2
    f9e8:	3330      	adds	r3, #48	; 0x30
    f9ea:	781b      	ldrb	r3, [r3, #0]
    f9ec:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    f9ee:	7bfb      	ldrb	r3, [r7, #15]
    f9f0:	f003 030f 	and.w	r3, r3, #15
    f9f4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    f9f6:	787b      	ldrb	r3, [r7, #1]
    f9f8:	011b      	lsls	r3, r3, #4
    f9fa:	b2da      	uxtb	r2, r3
    f9fc:	7bfb      	ldrb	r3, [r7, #15]
    f9fe:	4313      	orrs	r3, r2
    fa00:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    fa02:	78fa      	ldrb	r2, [r7, #3]
    fa04:	78bb      	ldrb	r3, [r7, #2]
    fa06:	6879      	ldr	r1, [r7, #4]
    fa08:	01d2      	lsls	r2, r2, #7
    fa0a:	440a      	add	r2, r1
    fa0c:	4413      	add	r3, r2
    fa0e:	3330      	adds	r3, #48	; 0x30
    fa10:	7bfa      	ldrb	r2, [r7, #15]
    fa12:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fa14:	bf00      	nop
    fa16:	3714      	adds	r7, #20
    fa18:	46bd      	mov	sp, r7
    fa1a:	bc80      	pop	{r7}
    fa1c:	4770      	bx	lr

0000fa1e <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    fa1e:	b480      	push	{r7}
    fa20:	b085      	sub	sp, #20
    fa22:	af00      	add	r7, sp, #0
    fa24:	6078      	str	r0, [r7, #4]
    fa26:	4608      	mov	r0, r1
    fa28:	4611      	mov	r1, r2
    fa2a:	461a      	mov	r2, r3
    fa2c:	4603      	mov	r3, r0
    fa2e:	70fb      	strb	r3, [r7, #3]
    fa30:	460b      	mov	r3, r1
    fa32:	70bb      	strb	r3, [r7, #2]
    fa34:	4613      	mov	r3, r2
    fa36:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fa38:	78fa      	ldrb	r2, [r7, #3]
    fa3a:	78bb      	ldrb	r3, [r7, #2]
    fa3c:	6879      	ldr	r1, [r7, #4]
    fa3e:	01d2      	lsls	r2, r2, #7
    fa40:	440a      	add	r2, r1
    fa42:	4413      	add	r3, r2
    fa44:	3340      	adds	r3, #64	; 0x40
    fa46:	781b      	ldrb	r3, [r3, #0]
    fa48:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    fa4a:	7bfb      	ldrb	r3, [r7, #15]
    fa4c:	f023 0301 	bic.w	r3, r3, #1
    fa50:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    fa52:	787a      	ldrb	r2, [r7, #1]
    fa54:	7bfb      	ldrb	r3, [r7, #15]
    fa56:	4313      	orrs	r3, r2
    fa58:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fa5a:	78fa      	ldrb	r2, [r7, #3]
    fa5c:	78bb      	ldrb	r3, [r7, #2]
    fa5e:	6879      	ldr	r1, [r7, #4]
    fa60:	01d2      	lsls	r2, r2, #7
    fa62:	440a      	add	r2, r1
    fa64:	4413      	add	r3, r2
    fa66:	3340      	adds	r3, #64	; 0x40
    fa68:	7bfa      	ldrb	r2, [r7, #15]
    fa6a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fa6c:	bf00      	nop
    fa6e:	3714      	adds	r7, #20
    fa70:	46bd      	mov	sp, r7
    fa72:	bc80      	pop	{r7}
    fa74:	4770      	bx	lr

0000fa76 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    fa76:	b480      	push	{r7}
    fa78:	b085      	sub	sp, #20
    fa7a:	af00      	add	r7, sp, #0
    fa7c:	60f8      	str	r0, [r7, #12]
    fa7e:	460b      	mov	r3, r1
    fa80:	607a      	str	r2, [r7, #4]
    fa82:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    fa84:	7afb      	ldrb	r3, [r7, #11]
    fa86:	68fa      	ldr	r2, [r7, #12]
    fa88:	01db      	lsls	r3, r3, #7
    fa8a:	4413      	add	r3, r2
    fa8c:	3328      	adds	r3, #40	; 0x28
    fa8e:	687a      	ldr	r2, [r7, #4]
    fa90:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fa92:	bf00      	nop
    fa94:	3714      	adds	r7, #20
    fa96:	46bd      	mov	sp, r7
    fa98:	bc80      	pop	{r7}
    fa9a:	4770      	bx	lr

0000fa9c <_gpio_set_direction>:
{
    fa9c:	b580      	push	{r7, lr}
    fa9e:	b082      	sub	sp, #8
    faa0:	af00      	add	r7, sp, #0
    faa2:	4603      	mov	r3, r0
    faa4:	6039      	str	r1, [r7, #0]
    faa6:	71fb      	strb	r3, [r7, #7]
    faa8:	4613      	mov	r3, r2
    faaa:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    faac:	79bb      	ldrb	r3, [r7, #6]
    faae:	2b01      	cmp	r3, #1
    fab0:	d01c      	beq.n	faec <_gpio_set_direction+0x50>
    fab2:	2b02      	cmp	r3, #2
    fab4:	d037      	beq.n	fb26 <_gpio_set_direction+0x8a>
    fab6:	2b00      	cmp	r3, #0
    fab8:	d14e      	bne.n	fb58 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    faba:	79fb      	ldrb	r3, [r7, #7]
    fabc:	683a      	ldr	r2, [r7, #0]
    fabe:	4619      	mov	r1, r3
    fac0:	482a      	ldr	r0, [pc, #168]	; (fb6c <_gpio_set_direction+0xd0>)
    fac2:	4b2b      	ldr	r3, [pc, #172]	; (fb70 <_gpio_set_direction+0xd4>)
    fac4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    fac6:	683b      	ldr	r3, [r7, #0]
    fac8:	b29b      	uxth	r3, r3
    faca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    face:	79fb      	ldrb	r3, [r7, #7]
    fad0:	4619      	mov	r1, r3
    fad2:	4826      	ldr	r0, [pc, #152]	; (fb6c <_gpio_set_direction+0xd0>)
    fad4:	4b27      	ldr	r3, [pc, #156]	; (fb74 <_gpio_set_direction+0xd8>)
    fad6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fad8:	683b      	ldr	r3, [r7, #0]
    fada:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    fadc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fae0:	79fb      	ldrb	r3, [r7, #7]
    fae2:	4619      	mov	r1, r3
    fae4:	4821      	ldr	r0, [pc, #132]	; (fb6c <_gpio_set_direction+0xd0>)
    fae6:	4b23      	ldr	r3, [pc, #140]	; (fb74 <_gpio_set_direction+0xd8>)
    fae8:	4798      	blx	r3
		break;
    faea:	e03a      	b.n	fb62 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    faec:	79fb      	ldrb	r3, [r7, #7]
    faee:	683a      	ldr	r2, [r7, #0]
    faf0:	4619      	mov	r1, r3
    faf2:	481e      	ldr	r0, [pc, #120]	; (fb6c <_gpio_set_direction+0xd0>)
    faf4:	4b1e      	ldr	r3, [pc, #120]	; (fb70 <_gpio_set_direction+0xd4>)
    faf6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    faf8:	683b      	ldr	r3, [r7, #0]
    fafa:	b29b      	uxth	r3, r3
    fafc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    fb00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    fb04:	79f9      	ldrb	r1, [r7, #7]
    fb06:	461a      	mov	r2, r3
    fb08:	4818      	ldr	r0, [pc, #96]	; (fb6c <_gpio_set_direction+0xd0>)
    fb0a:	4b1a      	ldr	r3, [pc, #104]	; (fb74 <_gpio_set_direction+0xd8>)
    fb0c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    fb0e:	683b      	ldr	r3, [r7, #0]
    fb10:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    fb12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    fb16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
    fb1a:	79f9      	ldrb	r1, [r7, #7]
    fb1c:	461a      	mov	r2, r3
    fb1e:	4813      	ldr	r0, [pc, #76]	; (fb6c <_gpio_set_direction+0xd0>)
    fb20:	4b14      	ldr	r3, [pc, #80]	; (fb74 <_gpio_set_direction+0xd8>)
    fb22:	4798      	blx	r3
		break;
    fb24:	e01d      	b.n	fb62 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    fb26:	79fb      	ldrb	r3, [r7, #7]
    fb28:	683a      	ldr	r2, [r7, #0]
    fb2a:	4619      	mov	r1, r3
    fb2c:	480f      	ldr	r0, [pc, #60]	; (fb6c <_gpio_set_direction+0xd0>)
    fb2e:	4b12      	ldr	r3, [pc, #72]	; (fb78 <_gpio_set_direction+0xdc>)
    fb30:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    fb32:	683b      	ldr	r3, [r7, #0]
    fb34:	b29b      	uxth	r3, r3
    fb36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    fb3a:	79fb      	ldrb	r3, [r7, #7]
    fb3c:	4619      	mov	r1, r3
    fb3e:	480b      	ldr	r0, [pc, #44]	; (fb6c <_gpio_set_direction+0xd0>)
    fb40:	4b0c      	ldr	r3, [pc, #48]	; (fb74 <_gpio_set_direction+0xd8>)
    fb42:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fb44:	683b      	ldr	r3, [r7, #0]
    fb46:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    fb48:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fb4c:	79fb      	ldrb	r3, [r7, #7]
    fb4e:	4619      	mov	r1, r3
    fb50:	4806      	ldr	r0, [pc, #24]	; (fb6c <_gpio_set_direction+0xd0>)
    fb52:	4b08      	ldr	r3, [pc, #32]	; (fb74 <_gpio_set_direction+0xd8>)
    fb54:	4798      	blx	r3
		break;
    fb56:	e004      	b.n	fb62 <_gpio_set_direction+0xc6>
		ASSERT(false);
    fb58:	2246      	movs	r2, #70	; 0x46
    fb5a:	4908      	ldr	r1, [pc, #32]	; (fb7c <_gpio_set_direction+0xe0>)
    fb5c:	2000      	movs	r0, #0
    fb5e:	4b08      	ldr	r3, [pc, #32]	; (fb80 <_gpio_set_direction+0xe4>)
    fb60:	4798      	blx	r3
}
    fb62:	bf00      	nop
    fb64:	3708      	adds	r7, #8
    fb66:	46bd      	mov	sp, r7
    fb68:	bd80      	pop	{r7, pc}
    fb6a:	bf00      	nop
    fb6c:	41008000 	.word	0x41008000
    fb70:	0000f8f3 	.word	0x0000f8f3
    fb74:	0000fa77 	.word	0x0000fa77
    fb78:	0000f8cd 	.word	0x0000f8cd
    fb7c:	0001121c 	.word	0x0001121c
    fb80:	00004409 	.word	0x00004409

0000fb84 <_gpio_set_level>:
{
    fb84:	b580      	push	{r7, lr}
    fb86:	b082      	sub	sp, #8
    fb88:	af00      	add	r7, sp, #0
    fb8a:	4603      	mov	r3, r0
    fb8c:	6039      	str	r1, [r7, #0]
    fb8e:	71fb      	strb	r3, [r7, #7]
    fb90:	4613      	mov	r3, r2
    fb92:	71bb      	strb	r3, [r7, #6]
	if (level) {
    fb94:	79bb      	ldrb	r3, [r7, #6]
    fb96:	2b00      	cmp	r3, #0
    fb98:	d006      	beq.n	fba8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    fb9a:	79fb      	ldrb	r3, [r7, #7]
    fb9c:	683a      	ldr	r2, [r7, #0]
    fb9e:	4619      	mov	r1, r3
    fba0:	4806      	ldr	r0, [pc, #24]	; (fbbc <_gpio_set_level+0x38>)
    fba2:	4b07      	ldr	r3, [pc, #28]	; (fbc0 <_gpio_set_level+0x3c>)
    fba4:	4798      	blx	r3
}
    fba6:	e005      	b.n	fbb4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    fba8:	79fb      	ldrb	r3, [r7, #7]
    fbaa:	683a      	ldr	r2, [r7, #0]
    fbac:	4619      	mov	r1, r3
    fbae:	4803      	ldr	r0, [pc, #12]	; (fbbc <_gpio_set_level+0x38>)
    fbb0:	4b04      	ldr	r3, [pc, #16]	; (fbc4 <_gpio_set_level+0x40>)
    fbb2:	4798      	blx	r3
}
    fbb4:	bf00      	nop
    fbb6:	3708      	adds	r7, #8
    fbb8:	46bd      	mov	sp, r7
    fbba:	bd80      	pop	{r7, pc}
    fbbc:	41008000 	.word	0x41008000
    fbc0:	0000f919 	.word	0x0000f919
    fbc4:	0000f93f 	.word	0x0000f93f

0000fbc8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    fbc8:	b590      	push	{r4, r7, lr}
    fbca:	b085      	sub	sp, #20
    fbcc:	af00      	add	r7, sp, #0
    fbce:	6078      	str	r0, [r7, #4]
    fbd0:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    fbd2:	687b      	ldr	r3, [r7, #4]
    fbd4:	095b      	lsrs	r3, r3, #5
    fbd6:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    fbd8:	687b      	ldr	r3, [r7, #4]
    fbda:	b2db      	uxtb	r3, r3
    fbdc:	f003 031f 	and.w	r3, r3, #31
    fbe0:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    fbe2:	683b      	ldr	r3, [r7, #0]
    fbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
    fbe8:	d106      	bne.n	fbf8 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    fbea:	7bba      	ldrb	r2, [r7, #14]
    fbec:	7bf9      	ldrb	r1, [r7, #15]
    fbee:	2300      	movs	r3, #0
    fbf0:	4812      	ldr	r0, [pc, #72]	; (fc3c <_gpio_set_pin_function+0x74>)
    fbf2:	4c13      	ldr	r4, [pc, #76]	; (fc40 <_gpio_set_pin_function+0x78>)
    fbf4:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    fbf6:	e01d      	b.n	fc34 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    fbf8:	7bba      	ldrb	r2, [r7, #14]
    fbfa:	7bf9      	ldrb	r1, [r7, #15]
    fbfc:	2301      	movs	r3, #1
    fbfe:	480f      	ldr	r0, [pc, #60]	; (fc3c <_gpio_set_pin_function+0x74>)
    fc00:	4c0f      	ldr	r4, [pc, #60]	; (fc40 <_gpio_set_pin_function+0x78>)
    fc02:	47a0      	blx	r4
		if (pin & 1) {
    fc04:	7bbb      	ldrb	r3, [r7, #14]
    fc06:	f003 0301 	and.w	r3, r3, #1
    fc0a:	2b00      	cmp	r3, #0
    fc0c:	d009      	beq.n	fc22 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    fc0e:	7bbb      	ldrb	r3, [r7, #14]
    fc10:	105b      	asrs	r3, r3, #1
    fc12:	b2da      	uxtb	r2, r3
    fc14:	683b      	ldr	r3, [r7, #0]
    fc16:	b2db      	uxtb	r3, r3
    fc18:	7bf9      	ldrb	r1, [r7, #15]
    fc1a:	4808      	ldr	r0, [pc, #32]	; (fc3c <_gpio_set_pin_function+0x74>)
    fc1c:	4c09      	ldr	r4, [pc, #36]	; (fc44 <_gpio_set_pin_function+0x7c>)
    fc1e:	47a0      	blx	r4
}
    fc20:	e008      	b.n	fc34 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    fc22:	7bbb      	ldrb	r3, [r7, #14]
    fc24:	105b      	asrs	r3, r3, #1
    fc26:	b2da      	uxtb	r2, r3
    fc28:	683b      	ldr	r3, [r7, #0]
    fc2a:	b2db      	uxtb	r3, r3
    fc2c:	7bf9      	ldrb	r1, [r7, #15]
    fc2e:	4803      	ldr	r0, [pc, #12]	; (fc3c <_gpio_set_pin_function+0x74>)
    fc30:	4c05      	ldr	r4, [pc, #20]	; (fc48 <_gpio_set_pin_function+0x80>)
    fc32:	47a0      	blx	r4
}
    fc34:	bf00      	nop
    fc36:	3714      	adds	r7, #20
    fc38:	46bd      	mov	sp, r7
    fc3a:	bd90      	pop	{r4, r7, pc}
    fc3c:	41008000 	.word	0x41008000
    fc40:	0000fa1f 	.word	0x0000fa1f
    fc44:	0000f9c3 	.word	0x0000f9c3
    fc48:	0000f965 	.word	0x0000f965

0000fc4c <gpio_set_pin_function>:
{
    fc4c:	b580      	push	{r7, lr}
    fc4e:	b082      	sub	sp, #8
    fc50:	af00      	add	r7, sp, #0
    fc52:	6078      	str	r0, [r7, #4]
    fc54:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    fc56:	6839      	ldr	r1, [r7, #0]
    fc58:	6878      	ldr	r0, [r7, #4]
    fc5a:	4b03      	ldr	r3, [pc, #12]	; (fc68 <gpio_set_pin_function+0x1c>)
    fc5c:	4798      	blx	r3
}
    fc5e:	bf00      	nop
    fc60:	3708      	adds	r7, #8
    fc62:	46bd      	mov	sp, r7
    fc64:	bd80      	pop	{r7, pc}
    fc66:	bf00      	nop
    fc68:	0000fbc9 	.word	0x0000fbc9

0000fc6c <gpio_set_pin_direction>:
{
    fc6c:	b580      	push	{r7, lr}
    fc6e:	b082      	sub	sp, #8
    fc70:	af00      	add	r7, sp, #0
    fc72:	4603      	mov	r3, r0
    fc74:	460a      	mov	r2, r1
    fc76:	71fb      	strb	r3, [r7, #7]
    fc78:	4613      	mov	r3, r2
    fc7a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    fc7c:	79fb      	ldrb	r3, [r7, #7]
    fc7e:	115b      	asrs	r3, r3, #5
    fc80:	b2d8      	uxtb	r0, r3
    fc82:	79fb      	ldrb	r3, [r7, #7]
    fc84:	f003 031f 	and.w	r3, r3, #31
    fc88:	2201      	movs	r2, #1
    fc8a:	fa02 f303 	lsl.w	r3, r2, r3
    fc8e:	79ba      	ldrb	r2, [r7, #6]
    fc90:	4619      	mov	r1, r3
    fc92:	4b03      	ldr	r3, [pc, #12]	; (fca0 <gpio_set_pin_direction+0x34>)
    fc94:	4798      	blx	r3
}
    fc96:	bf00      	nop
    fc98:	3708      	adds	r7, #8
    fc9a:	46bd      	mov	sp, r7
    fc9c:	bd80      	pop	{r7, pc}
    fc9e:	bf00      	nop
    fca0:	0000fa9d 	.word	0x0000fa9d

0000fca4 <gpio_set_pin_level>:
{
    fca4:	b580      	push	{r7, lr}
    fca6:	b082      	sub	sp, #8
    fca8:	af00      	add	r7, sp, #0
    fcaa:	4603      	mov	r3, r0
    fcac:	460a      	mov	r2, r1
    fcae:	71fb      	strb	r3, [r7, #7]
    fcb0:	4613      	mov	r3, r2
    fcb2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    fcb4:	79fb      	ldrb	r3, [r7, #7]
    fcb6:	115b      	asrs	r3, r3, #5
    fcb8:	b2d8      	uxtb	r0, r3
    fcba:	79fb      	ldrb	r3, [r7, #7]
    fcbc:	f003 031f 	and.w	r3, r3, #31
    fcc0:	2201      	movs	r2, #1
    fcc2:	fa02 f303 	lsl.w	r3, r2, r3
    fcc6:	79ba      	ldrb	r2, [r7, #6]
    fcc8:	4619      	mov	r1, r3
    fcca:	4b03      	ldr	r3, [pc, #12]	; (fcd8 <gpio_set_pin_level+0x34>)
    fccc:	4798      	blx	r3
}
    fcce:	bf00      	nop
    fcd0:	3708      	adds	r7, #8
    fcd2:	46bd      	mov	sp, r7
    fcd4:	bd80      	pop	{r7, pc}
    fcd6:	bf00      	nop
    fcd8:	0000fb85 	.word	0x0000fb85

0000fcdc <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
    fcdc:	b580      	push	{r7, lr}
    fcde:	b082      	sub	sp, #8
    fce0:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    fce2:	2100      	movs	r1, #0
    fce4:	2008      	movs	r0, #8
    fce6:	4b24      	ldr	r3, [pc, #144]	; (fd78 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    fce8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    fcea:	2100      	movs	r1, #0
    fcec:	202b      	movs	r0, #43	; 0x2b
    fcee:	4b22      	ldr	r3, [pc, #136]	; (fd78 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    fcf0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    fcf2:	2100      	movs	r1, #0
    fcf4:	202a      	movs	r0, #42	; 0x2a
    fcf6:	4b20      	ldr	r3, [pc, #128]	; (fd78 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    fcf8:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    fcfa:	2102      	movs	r1, #2
    fcfc:	2008      	movs	r0, #8
    fcfe:	4b1f      	ldr	r3, [pc, #124]	; (fd7c <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    fd00:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    fd02:	2102      	movs	r1, #2
    fd04:	202b      	movs	r0, #43	; 0x2b
    fd06:	4b1d      	ldr	r3, [pc, #116]	; (fd7c <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    fd08:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    fd0a:	2102      	movs	r1, #2
    fd0c:	202a      	movs	r0, #42	; 0x2a
    fd0e:	4b1b      	ldr	r3, [pc, #108]	; (fd7c <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    fd10:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    fd12:	2101      	movs	r1, #1
    fd14:	2008      	movs	r0, #8
    fd16:	4b1a      	ldr	r3, [pc, #104]	; (fd80 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fd18:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    fd1a:	2100      	movs	r1, #0
    fd1c:	202b      	movs	r0, #43	; 0x2b
    fd1e:	4b18      	ldr	r3, [pc, #96]	; (fd80 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fd20:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    fd22:	2100      	movs	r1, #0
    fd24:	202a      	movs	r0, #42	; 0x2a
    fd26:	4b16      	ldr	r3, [pc, #88]	; (fd80 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fd28:	4798      	blx	r3

	delay_us(1);
    fd2a:	2001      	movs	r0, #1
    fd2c:	4b15      	ldr	r3, [pc, #84]	; (fd84 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    fd2e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    fd30:	2300      	movs	r3, #0
    fd32:	607b      	str	r3, [r7, #4]
    fd34:	687b      	ldr	r3, [r7, #4]
    fd36:	2b06      	cmp	r3, #6
    fd38:	dc11      	bgt.n	fd5e <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
    fd3a:	2101      	movs	r1, #1
    fd3c:	202a      	movs	r0, #42	; 0x2a
    fd3e:	4b10      	ldr	r3, [pc, #64]	; (fd80 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fd40:	4798      	blx	r3
		delay_us(1);
    fd42:	2001      	movs	r0, #1
    fd44:	4b0f      	ldr	r3, [pc, #60]	; (fd84 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    fd46:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    fd48:	2100      	movs	r1, #0
    fd4a:	202a      	movs	r0, #42	; 0x2a
    fd4c:	4b0c      	ldr	r3, [pc, #48]	; (fd80 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fd4e:	4798      	blx	r3
		delay_us(1);
    fd50:	2001      	movs	r0, #1
    fd52:	4b0c      	ldr	r3, [pc, #48]	; (fd84 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    fd54:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    fd56:	687b      	ldr	r3, [r7, #4]
    fd58:	3301      	adds	r3, #1
    fd5a:	607b      	str	r3, [r7, #4]
    fd5c:	e7ea      	b.n	fd34 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
    fd5e:	2101      	movs	r1, #1
    fd60:	202b      	movs	r0, #43	; 0x2b
    fd62:	4b07      	ldr	r3, [pc, #28]	; (fd80 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fd64:	4798      	blx	r3
	delay_us(1);
    fd66:	2001      	movs	r0, #1
    fd68:	4b06      	ldr	r3, [pc, #24]	; (fd84 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    fd6a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    fd6c:	4b06      	ldr	r3, [pc, #24]	; (fd88 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
    fd6e:	4798      	blx	r3
}
    fd70:	bf00      	nop
    fd72:	3708      	adds	r7, #8
    fd74:	46bd      	mov	sp, r7
    fd76:	bd80      	pop	{r7, pc}
    fd78:	0000fc4d 	.word	0x0000fc4d
    fd7c:	0000fc6d 	.word	0x0000fc6d
    fd80:	0000fca5 	.word	0x0000fca5
    fd84:	00002de5 	.word	0x00002de5
    fd88:	00001e8d 	.word	0x00001e8d

0000fd8c <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
    fd8c:	b480      	push	{r7}
    fd8e:	b083      	sub	sp, #12
    fd90:	af00      	add	r7, sp, #0
    fd92:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
    fd94:	687b      	ldr	r3, [r7, #4]
    fd96:	4618      	mov	r0, r3
    fd98:	370c      	adds	r7, #12
    fd9a:	46bd      	mov	sp, r7
    fd9c:	bc80      	pop	{r7}
    fd9e:	4770      	bx	lr

0000fda0 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    fda0:	b480      	push	{r7}
    fda2:	b083      	sub	sp, #12
    fda4:	af00      	add	r7, sp, #0
    fda6:	6078      	str	r0, [r7, #4]
    fda8:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    fdaa:	687b      	ldr	r3, [r7, #4]
    fdac:	683a      	ldr	r2, [r7, #0]
    fdae:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    fdb0:	687b      	ldr	r3, [r7, #4]
    fdb2:	4a04      	ldr	r2, [pc, #16]	; (fdc4 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    fdb4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    fdb8:	687b      	ldr	r3, [r7, #4]
    fdba:	4618      	mov	r0, r3
    fdbc:	370c      	adds	r7, #12
    fdbe:	46bd      	mov	sp, r7
    fdc0:	bc80      	pop	{r7}
    fdc2:	4770      	bx	lr
    fdc4:	001fff00 	.word	0x001fff00

0000fdc8 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    fdc8:	b480      	push	{r7}
    fdca:	b083      	sub	sp, #12
    fdcc:	af00      	add	r7, sp, #0
    fdce:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    fdd0:	687b      	ldr	r3, [r7, #4]
    fdd2:	4618      	mov	r0, r3
    fdd4:	370c      	adds	r7, #12
    fdd6:	46bd      	mov	sp, r7
    fdd8:	bc80      	pop	{r7}
    fdda:	4770      	bx	lr

0000fddc <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
    fddc:	b580      	push	{r7, lr}
    fdde:	b082      	sub	sp, #8
    fde0:	af00      	add	r7, sp, #0
    fde2:	6078      	str	r0, [r7, #4]
	xferDone=false;
    fde4:	687b      	ldr	r3, [r7, #4]
    fde6:	2200      	movs	r2, #0
    fde8:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
    fdea:	6878      	ldr	r0, [r7, #4]
    fdec:	4b04      	ldr	r3, [pc, #16]	; (fe00 <_ZN13N25Q256_Class4InitEv+0x24>)
    fdee:	4798      	blx	r3
	return SelfTest();
    fdf0:	6878      	ldr	r0, [r7, #4]
    fdf2:	4b04      	ldr	r3, [pc, #16]	; (fe04 <_ZN13N25Q256_Class4InitEv+0x28>)
    fdf4:	4798      	blx	r3
    fdf6:	4603      	mov	r3, r0
}
    fdf8:	4618      	mov	r0, r3
    fdfa:	3708      	adds	r7, #8
    fdfc:	46bd      	mov	sp, r7
    fdfe:	bd80      	pop	{r7, pc}
    fe00:	0000fe09 	.word	0x0000fe09
    fe04:	0000ffa5 	.word	0x0000ffa5

0000fe08 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
    fe08:	b590      	push	{r4, r7, lr}
    fe0a:	b083      	sub	sp, #12
    fe0c:	af00      	add	r7, sp, #0
    fe0e:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
    fe10:	687b      	ldr	r3, [r7, #4]
    fe12:	685b      	ldr	r3, [r3, #4]
    fe14:	4618      	mov	r0, r3
    fe16:	4b08      	ldr	r3, [pc, #32]	; (fe38 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
    fe18:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    fe1a:	687b      	ldr	r3, [r7, #4]
    fe1c:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
    fe1e:	2300      	movs	r3, #0
    fe20:	4a06      	ldr	r2, [pc, #24]	; (fe3c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
    fe22:	4807      	ldr	r0, [pc, #28]	; (fe40 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
    fe24:	4c07      	ldr	r4, [pc, #28]	; (fe44 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
    fe26:	47a0      	blx	r4
    fe28:	4602      	mov	r2, r0
    fe2a:	687b      	ldr	r3, [r7, #4]
    fe2c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
    fe30:	bf00      	nop
    fe32:	370c      	adds	r7, #12
    fe34:	46bd      	mov	sp, r7
    fe36:	bd90      	pop	{r4, r7, pc}
    fe38:	00003371 	.word	0x00003371
    fe3c:	0000fcdd 	.word	0x0000fcdd
    fe40:	20008eb4 	.word	0x20008eb4
    fe44:	0000c3a5 	.word	0x0000c3a5

0000fe48 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
    fe48:	b580      	push	{r7, lr}
    fe4a:	b084      	sub	sp, #16
    fe4c:	af00      	add	r7, sp, #0
    fe4e:	6078      	str	r0, [r7, #4]
    fe50:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
    fe52:	687b      	ldr	r3, [r7, #4]
    fe54:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    fe58:	685b      	ldr	r3, [r3, #4]
    fe5a:	689b      	ldr	r3, [r3, #8]
    fe5c:	687a      	ldr	r2, [r7, #4]
    fe5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
    fe62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    fe66:	6839      	ldr	r1, [r7, #0]
    fe68:	4798      	blx	r3
    fe6a:	4603      	mov	r3, r0
    fe6c:	60fb      	str	r3, [r7, #12]
	return	e;
    fe6e:	68fb      	ldr	r3, [r7, #12]
}
    fe70:	4618      	mov	r0, r3
    fe72:	3710      	adds	r7, #16
    fe74:	46bd      	mov	sp, r7
    fe76:	bd80      	pop	{r7, pc}

0000fe78 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    fe78:	b590      	push	{r4, r7, lr}
    fe7a:	b087      	sub	sp, #28
    fe7c:	af00      	add	r7, sp, #0
    fe7e:	60f8      	str	r0, [r7, #12]
    fe80:	60b9      	str	r1, [r7, #8]
    fe82:	607a      	str	r2, [r7, #4]
    fe84:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
    fe86:	68fb      	ldr	r3, [r7, #12]
    fe88:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    fe8c:	685b      	ldr	r3, [r3, #4]
    fe8e:	685c      	ldr	r4, [r3, #4]
    fe90:	68fb      	ldr	r3, [r7, #12]
    fe92:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    fe96:	683b      	ldr	r3, [r7, #0]
    fe98:	687a      	ldr	r2, [r7, #4]
    fe9a:	68b9      	ldr	r1, [r7, #8]
    fe9c:	47a0      	blx	r4
    fe9e:	4603      	mov	r3, r0
    fea0:	617b      	str	r3, [r7, #20]
	return	w;
    fea2:	697b      	ldr	r3, [r7, #20]
}
    fea4:	4618      	mov	r0, r3
    fea6:	371c      	adds	r7, #28
    fea8:	46bd      	mov	sp, r7
    feaa:	bd90      	pop	{r4, r7, pc}

0000feac <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    feac:	b590      	push	{r4, r7, lr}
    feae:	b087      	sub	sp, #28
    feb0:	af00      	add	r7, sp, #0
    feb2:	60f8      	str	r0, [r7, #12]
    feb4:	60b9      	str	r1, [r7, #8]
    feb6:	607a      	str	r2, [r7, #4]
    feb8:	603b      	str	r3, [r7, #0]
	xferDone=false;
    feba:	68fb      	ldr	r3, [r7, #12]
    febc:	2200      	movs	r2, #0
    febe:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
    fec0:	68fb      	ldr	r3, [r7, #12]
    fec2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    fec6:	685b      	ldr	r3, [r3, #4]
    fec8:	681c      	ldr	r4, [r3, #0]
    feca:	68fb      	ldr	r3, [r7, #12]
    fecc:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    fed0:	683b      	ldr	r3, [r7, #0]
    fed2:	687a      	ldr	r2, [r7, #4]
    fed4:	68b9      	ldr	r1, [r7, #8]
    fed6:	47a0      	blx	r4
    fed8:	4603      	mov	r3, r0
    feda:	617b      	str	r3, [r7, #20]
	return	r;
    fedc:	697b      	ldr	r3, [r7, #20]
}
    fede:	4618      	mov	r0, r3
    fee0:	371c      	adds	r7, #28
    fee2:	46bd      	mov	sp, r7
    fee4:	bd90      	pop	{r4, r7, pc}
	...

0000fee8 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
    fee8:	b580      	push	{r7, lr}
    feea:	b082      	sub	sp, #8
    feec:	af00      	add	r7, sp, #0
    feee:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
    fef0:	687a      	ldr	r2, [r7, #4]
    fef2:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    fef6:	f043 0310 	orr.w	r3, r3, #16
    fefa:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
    fefe:	687a      	ldr	r2, [r7, #4]
    ff00:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    ff04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ff08:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
    ff0c:	687a      	ldr	r2, [r7, #4]
    ff0e:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
    ff12:	f36f 1305 	bfc	r3, #4, #2
    ff16:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
    ff1a:	687b      	ldr	r3, [r7, #4]
    ff1c:	2205      	movs	r2, #5
    ff1e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
    ff22:	687b      	ldr	r3, [r7, #4]
    ff24:	2201      	movs	r2, #1
    ff26:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
    ff2a:	687b      	ldr	r3, [r7, #4]
    ff2c:	f203 2212 	addw	r2, r3, #530	; 0x212
    ff30:	687b      	ldr	r3, [r7, #4]
    ff32:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
    ff36:	687b      	ldr	r3, [r7, #4]
    ff38:	685a      	ldr	r2, [r3, #4]
    ff3a:	687b      	ldr	r3, [r7, #4]
    ff3c:	f503 7305 	add.w	r3, r3, #532	; 0x214
    ff40:	4619      	mov	r1, r3
    ff42:	4610      	mov	r0, r2
    ff44:	4b04      	ldr	r3, [pc, #16]	; (ff58 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
    ff46:	4798      	blx	r3
		return status;
    ff48:	687b      	ldr	r3, [r7, #4]
    ff4a:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
    ff4e:	4618      	mov	r0, r3
    ff50:	3708      	adds	r7, #8
    ff52:	46bd      	mov	sp, r7
    ff54:	bd80      	pop	{r7, pc}
    ff56:	bf00      	nop
    ff58:	000033e9 	.word	0x000033e9

0000ff5c <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
    ff5c:	b580      	push	{r7, lr}
    ff5e:	b082      	sub	sp, #8
    ff60:	af00      	add	r7, sp, #0
    ff62:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
    ff64:	6878      	ldr	r0, [r7, #4]
    ff66:	4b0e      	ldr	r3, [pc, #56]	; (ffa0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
    ff68:	4798      	blx	r3
    ff6a:	4603      	mov	r3, r0
    ff6c:	461a      	mov	r2, r3
    ff6e:	687b      	ldr	r3, [r7, #4]
    ff70:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
    ff74:	687b      	ldr	r3, [r7, #4]
    ff76:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    ff7a:	f003 0301 	and.w	r3, r3, #1
    ff7e:	2b00      	cmp	r3, #0
    ff80:	d000      	beq.n	ff84 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
    ff82:	e7ef      	b.n	ff64 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
    ff84:	687b      	ldr	r3, [r7, #4]
    ff86:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    ff8a:	f003 0301 	and.w	r3, r3, #1
    ff8e:	2b00      	cmp	r3, #0
    ff90:	bf0c      	ite	eq
    ff92:	2301      	moveq	r3, #1
    ff94:	2300      	movne	r3, #0
    ff96:	b2db      	uxtb	r3, r3
}
    ff98:	4618      	mov	r0, r3
    ff9a:	3708      	adds	r7, #8
    ff9c:	46bd      	mov	sp, r7
    ff9e:	bd80      	pop	{r7, pc}
    ffa0:	0000fee9 	.word	0x0000fee9

0000ffa4 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
    ffa4:	b590      	push	{r4, r7, lr}
    ffa6:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    ffaa:	b085      	sub	sp, #20
    ffac:	af00      	add	r7, sp, #0
    ffae:	f107 0310 	add.w	r3, r7, #16
    ffb2:	3b0c      	subs	r3, #12
    ffb4:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
    ffb6:	f107 0310 	add.w	r3, r7, #16
    ffba:	3b0c      	subs	r3, #12
    ffbc:	681b      	ldr	r3, [r3, #0]
    ffbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    ffc2:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
    ffc6:	f107 0310 	add.w	r3, r7, #16
    ffca:	3b0c      	subs	r3, #12
    ffcc:	681b      	ldr	r3, [r3, #0]
    ffce:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    ffd2:	f107 0110 	add.w	r1, r7, #16
    ffd6:	3904      	subs	r1, #4
    ffd8:	f107 0010 	add.w	r0, r7, #16
    ffdc:	380c      	subs	r0, #12
    ffde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    ffe2:	6800      	ldr	r0, [r0, #0]
    ffe4:	4c4b      	ldr	r4, [pc, #300]	; (10114 <STACK_SIZE+0x114>)
    ffe6:	47a0      	blx	r4
	WaitOnBusy();
    ffe8:	f107 0310 	add.w	r3, r7, #16
    ffec:	3b0c      	subs	r3, #12
    ffee:	6818      	ldr	r0, [r3, #0]
    fff0:	4b49      	ldr	r3, [pc, #292]	; (10118 <STACK_SIZE+0x118>)
    fff2:	4798      	blx	r3
	Erase(currentAddress);
    fff4:	f107 0310 	add.w	r3, r7, #16
    fff8:	3b0c      	subs	r3, #12
    fffa:	681b      	ldr	r3, [r3, #0]
    fffc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   10000:	f107 0310 	add.w	r3, r7, #16
   10004:	3b0c      	subs	r3, #12
   10006:	4611      	mov	r1, r2
   10008:	6818      	ldr	r0, [r3, #0]
   1000a:	4b44      	ldr	r3, [pc, #272]	; (1011c <STACK_SIZE+0x11c>)
   1000c:	4798      	blx	r3
	WaitOnBusy();
   1000e:	f107 0310 	add.w	r3, r7, #16
   10012:	3b0c      	subs	r3, #12
   10014:	6818      	ldr	r0, [r3, #0]
   10016:	4b40      	ldr	r3, [pc, #256]	; (10118 <STACK_SIZE+0x118>)
   10018:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   1001a:	f107 0310 	add.w	r3, r7, #16
   1001e:	3b0c      	subs	r3, #12
   10020:	681b      	ldr	r3, [r3, #0]
   10022:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   10026:	f107 0110 	add.w	r1, r7, #16
   1002a:	3904      	subs	r1, #4
   1002c:	f107 0010 	add.w	r0, r7, #16
   10030:	380c      	subs	r0, #12
   10032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   10036:	6800      	ldr	r0, [r0, #0]
   10038:	4c39      	ldr	r4, [pc, #228]	; (10120 <STACK_SIZE+0x120>)
   1003a:	47a0      	blx	r4
	WaitOnBusy();
   1003c:	f107 0310 	add.w	r3, r7, #16
   10040:	3b0c      	subs	r3, #12
   10042:	6818      	ldr	r0, [r3, #0]
   10044:	4b34      	ldr	r3, [pc, #208]	; (10118 <STACK_SIZE+0x118>)
   10046:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   10048:	f107 0310 	add.w	r3, r7, #16
   1004c:	3b0c      	subs	r3, #12
   1004e:	681b      	ldr	r3, [r3, #0]
   10050:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   10054:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   10058:	f101 0110 	add.w	r1, r1, #16
   1005c:	3904      	subs	r1, #4
   1005e:	f107 0010 	add.w	r0, r7, #16
   10062:	380c      	subs	r0, #12
   10064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   10068:	6800      	ldr	r0, [r0, #0]
   1006a:	4c2a      	ldr	r4, [pc, #168]	; (10114 <STACK_SIZE+0x114>)
   1006c:	47a0      	blx	r4
	WaitOnBusy();
   1006e:	f107 0310 	add.w	r3, r7, #16
   10072:	3b0c      	subs	r3, #12
   10074:	6818      	ldr	r0, [r3, #0]
   10076:	4b28      	ldr	r3, [pc, #160]	; (10118 <STACK_SIZE+0x118>)
   10078:	4798      	blx	r3
	isOK	 = true;
   1007a:	f107 0310 	add.w	r3, r7, #16
   1007e:	3b0c      	subs	r3, #12
   10080:	681b      	ldr	r3, [r3, #0]
   10082:	2201      	movs	r2, #1
   10084:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   10088:	2300      	movs	r3, #0
   1008a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1008e:	f102 020c 	add.w	r2, r2, #12
   10092:	6013      	str	r3, [r2, #0]
   10094:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   10098:	f103 030c 	add.w	r3, r3, #12
   1009c:	681b      	ldr	r3, [r3, #0]
   1009e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   100a2:	da2b      	bge.n	100fc <STACK_SIZE+0xfc>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   100a4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   100a8:	f103 0310 	add.w	r3, r3, #16
   100ac:	3b04      	subs	r3, #4
   100ae:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   100b2:	f102 020c 	add.w	r2, r2, #12
   100b6:	6812      	ldr	r2, [r2, #0]
   100b8:	4413      	add	r3, r2
   100ba:	781a      	ldrb	r2, [r3, #0]
   100bc:	f107 0310 	add.w	r3, r7, #16
   100c0:	3b04      	subs	r3, #4
   100c2:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   100c6:	f101 010c 	add.w	r1, r1, #12
   100ca:	6809      	ldr	r1, [r1, #0]
   100cc:	440b      	add	r3, r1
   100ce:	781b      	ldrb	r3, [r3, #0]
   100d0:	429a      	cmp	r2, r3
   100d2:	d007      	beq.n	100e4 <STACK_SIZE+0xe4>
			isOK = false;
   100d4:	f107 0310 	add.w	r3, r7, #16
   100d8:	3b0c      	subs	r3, #12
   100da:	681b      	ldr	r3, [r3, #0]
   100dc:	2200      	movs	r2, #0
   100de:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   100e2:	e00b      	b.n	100fc <STACK_SIZE+0xfc>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   100e4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   100e8:	f103 030c 	add.w	r3, r3, #12
   100ec:	681b      	ldr	r3, [r3, #0]
   100ee:	3301      	adds	r3, #1
   100f0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   100f4:	f102 020c 	add.w	r2, r2, #12
   100f8:	6013      	str	r3, [r2, #0]
   100fa:	e7cb      	b.n	10094 <STACK_SIZE+0x94>
		}
					
	}
	return	isOK;
   100fc:	f107 0310 	add.w	r3, r7, #16
   10100:	3b0c      	subs	r3, #12
   10102:	681b      	ldr	r3, [r3, #0]
   10104:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   10108:	4618      	mov	r0, r3
   1010a:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   1010e:	3714      	adds	r7, #20
   10110:	46bd      	mov	sp, r7
   10112:	bd90      	pop	{r4, r7, pc}
   10114:	0000fead 	.word	0x0000fead
   10118:	0000ff5d 	.word	0x0000ff5d
   1011c:	0000fe49 	.word	0x0000fe49
   10120:	0000fe79 	.word	0x0000fe79

00010124 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   10124:	b580      	push	{r7, lr}
   10126:	b082      	sub	sp, #8
   10128:	af00      	add	r7, sp, #0
   1012a:	6078      	str	r0, [r7, #4]
   1012c:	6039      	str	r1, [r7, #0]
   1012e:	687b      	ldr	r3, [r7, #4]
   10130:	2b01      	cmp	r3, #1
   10132:	d10d      	bne.n	10150 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10134:	683b      	ldr	r3, [r7, #0]
   10136:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1013a:	4293      	cmp	r3, r2
   1013c:	d108      	bne.n	10150 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1013e:	4906      	ldr	r1, [pc, #24]	; (10158 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10140:	4806      	ldr	r0, [pc, #24]	; (1015c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10142:	4b07      	ldr	r3, [pc, #28]	; (10160 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   10144:	4798      	blx	r3
   10146:	4a07      	ldr	r2, [pc, #28]	; (10164 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   10148:	4907      	ldr	r1, [pc, #28]	; (10168 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1014a:	4804      	ldr	r0, [pc, #16]	; (1015c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1014c:	4b07      	ldr	r3, [pc, #28]	; (1016c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1014e:	4798      	blx	r3
   10150:	bf00      	nop
   10152:	3708      	adds	r7, #8
   10154:	46bd      	mov	sp, r7
   10156:	bd80      	pop	{r7, pc}
   10158:	2000ab78 	.word	0x2000ab78
   1015c:	20008ec4 	.word	0x20008ec4
   10160:	0000fda1 	.word	0x0000fda1
   10164:	20000000 	.word	0x20000000
   10168:	0000fdc9 	.word	0x0000fdc9
   1016c:	000108c5 	.word	0x000108c5

00010170 <_GLOBAL__sub_I_ptrN25Q256Class>:
   10170:	b580      	push	{r7, lr}
   10172:	af00      	add	r7, sp, #0
   10174:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10178:	2001      	movs	r0, #1
   1017a:	4b01      	ldr	r3, [pc, #4]	; (10180 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   1017c:	4798      	blx	r3
   1017e:	bd80      	pop	{r7, pc}
   10180:	00010125 	.word	0x00010125

00010184 <_ZN18Event_Logger_ClassD1Ev>:
	info_text=local_info_text;
	
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
   10184:	b510      	push	{r4, lr}
   10186:	4604      	mov	r4, r0
   10188:	4b06      	ldr	r3, [pc, #24]	; (101a4 <_ZN18Event_Logger_ClassD1Ev+0x20>)
   1018a:	f840 3bb4 	str.w	r3, [r0], #180
   1018e:	4b06      	ldr	r3, [pc, #24]	; (101a8 <_ZN18Event_Logger_ClassD1Ev+0x24>)
   10190:	4798      	blx	r3
   10192:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   10196:	4b05      	ldr	r3, [pc, #20]	; (101ac <_ZN18Event_Logger_ClassD1Ev+0x28>)
   10198:	4798      	blx	r3
   1019a:	4620      	mov	r0, r4
   1019c:	4b04      	ldr	r3, [pc, #16]	; (101b0 <_ZN18Event_Logger_ClassD1Ev+0x2c>)
   1019e:	4798      	blx	r3
{
} //~Event_Logger_Class
   101a0:	4620      	mov	r0, r4
   101a2:	bd10      	pop	{r4, pc}
   101a4:	0001125c 	.word	0x0001125c
   101a8:	0001049d 	.word	0x0001049d
   101ac:	0001040b 	.word	0x0001040b
   101b0:	000105ad 	.word	0x000105ad

000101b4 <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
   101b4:	b510      	push	{r4, lr}
   101b6:	4604      	mov	r4, r0
   101b8:	4b0f      	ldr	r3, [pc, #60]	; (101f8 <_ZN18Event_Logger_ClassC1Ev+0x44>)
   101ba:	4798      	blx	r3
   101bc:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   101c0:	4b0e      	ldr	r3, [pc, #56]	; (101fc <_ZN18Event_Logger_ClassC1Ev+0x48>)
   101c2:	4798      	blx	r3
   101c4:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   101c8:	4b0d      	ldr	r3, [pc, #52]	; (10200 <_ZN18Event_Logger_ClassC1Ev+0x4c>)
   101ca:	4798      	blx	r3
   101cc:	4b0d      	ldr	r3, [pc, #52]	; (10204 <_ZN18Event_Logger_ClassC1Ev+0x50>)
   101ce:	6023      	str	r3, [r4, #0]
	cal=&staticClock;
   101d0:	4b0d      	ldr	r3, [pc, #52]	; (10208 <_ZN18Event_Logger_ClassC1Ev+0x54>)
   101d2:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
	logger_text=(char*)text_buffer_local;
   101d6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
   101da:	f8c4 2708 	str.w	r2, [r4, #1800]	; 0x708
	logger_module=(char*)module_buffer_local;
   101de:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   101e2:	f8c4 270c 	str.w	r2, [r4, #1804]	; 0x70c
	logger_number=(char*)number_buffer_local;
   101e6:	f503 7388 	add.w	r3, r3, #272	; 0x110
   101ea:	f8c4 3710 	str.w	r3, [r4, #1808]	; 0x710
	info_text=local_info_text;
   101ee:	4b07      	ldr	r3, [pc, #28]	; (1020c <_ZN18Event_Logger_ClassC1Ev+0x58>)
   101f0:	f8c4 3714 	str.w	r3, [r4, #1812]	; 0x714
} //Event_Logger_Class
   101f4:	4620      	mov	r0, r4
   101f6:	bd10      	pop	{r4, pc}
   101f8:	0001053d 	.word	0x0001053d
   101fc:	00010409 	.word	0x00010409
   10200:	00010451 	.word	0x00010451
   10204:	0001125c 	.word	0x0001125c
   10208:	200090f8 	.word	0x200090f8
   1020c:	20000210 	.word	0x20000210

00010210 <_ZN18Event_Logger_Class9SaveEventEPh>:
	nullDateTime.time.hour = 0x0;
	nullDateTime.time.min  = 0x0;
	nullDateTime.time.sec  = 0x0;
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
   10210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10214:	4605      	mov	r5, r0
   10216:	460c      	mov	r4, r1
	
	cal->GetDateTime(&currentDateTime);
   10218:	f8d0 05f4 	ldr.w	r0, [r0, #1524]	; 0x5f4
   1021c:	f505 67c0 	add.w	r7, r5, #1536	; 0x600
   10220:	6803      	ldr	r3, [r0, #0]
   10222:	681b      	ldr	r3, [r3, #0]
   10224:	4639      	mov	r1, r7
   10226:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
   10228:	f205 68bc 	addw	r8, r5, #1724	; 0x6bc
   1022c:	f8d5 3714 	ldr.w	r3, [r5, #1812]	; 0x714
   10230:	681a      	ldr	r2, [r3, #0]
   10232:	685b      	ldr	r3, [r3, #4]
   10234:	f8c5 26bc 	str.w	r2, [r5, #1724]	; 0x6bc
   10238:	f8c8 3004 	str.w	r3, [r8, #4]
	semiColonPosition=FindSemiColon(text);
   1023c:	f105 06b0 	add.w	r6, r5, #176	; 0xb0
   10240:	4621      	mov	r1, r4
   10242:	4630      	mov	r0, r6
   10244:	4b23      	ldr	r3, [pc, #140]	; (102d4 <_ZN18Event_Logger_Class9SaveEventEPh+0xc4>)
   10246:	4798      	blx	r3
   10248:	f885 06f8 	strb.w	r0, [r5, #1784]	; 0x6f8
	if (semiColonPosition>0)
   1024c:	b138      	cbz	r0, 1025e <_ZN18Event_Logger_Class9SaveEventEPh+0x4e>
	{
		if (semiColonPosition<8)
   1024e:	2807      	cmp	r0, #7
   10250:	dd39      	ble.n	102c6 <_ZN18Event_Logger_Class9SaveEventEPh+0xb6>
		{
				memcpy(&entry.code,text,(uint32_t)semiColonPosition);
		} 
		else
		{
				memcpy(&entry.code,text,8);
   10252:	6822      	ldr	r2, [r4, #0]
   10254:	6863      	ldr	r3, [r4, #4]
   10256:	f8c5 26bc 	str.w	r2, [r5, #1724]	; 0x6bc
   1025a:	f8c8 3004 	str.w	r3, [r8, #4]
	}
		

	

	ChopStringDescription(text);
   1025e:	4621      	mov	r1, r4
   10260:	4630      	mov	r0, r6
   10262:	4b1d      	ldr	r3, [pc, #116]	; (102d8 <_ZN18Event_Logger_Class9SaveEventEPh+0xc8>)
   10264:	4798      	blx	r3
	memcpy(&entry.description,&text[semiColonPosition],44);
   10266:	f895 16f8 	ldrb.w	r1, [r5, #1784]	; 0x6f8
   1026a:	4421      	add	r1, r4
   1026c:	f205 63c4 	addw	r3, r5, #1732	; 0x6c4
   10270:	f101 0220 	add.w	r2, r1, #32
   10274:	f8d1 e000 	ldr.w	lr, [r1]
   10278:	684e      	ldr	r6, [r1, #4]
   1027a:	688c      	ldr	r4, [r1, #8]
   1027c:	68c8      	ldr	r0, [r1, #12]
   1027e:	f8c3 e000 	str.w	lr, [r3]
   10282:	605e      	str	r6, [r3, #4]
   10284:	609c      	str	r4, [r3, #8]
   10286:	60d8      	str	r0, [r3, #12]
   10288:	3110      	adds	r1, #16
   1028a:	3310      	adds	r3, #16
   1028c:	4291      	cmp	r1, r2
   1028e:	d1f1      	bne.n	10274 <_ZN18Event_Logger_Class9SaveEventEPh+0x64>
   10290:	680c      	ldr	r4, [r1, #0]
   10292:	6848      	ldr	r0, [r1, #4]
   10294:	688a      	ldr	r2, [r1, #8]
   10296:	601c      	str	r4, [r3, #0]
   10298:	6058      	str	r0, [r3, #4]
   1029a:	609a      	str	r2, [r3, #8]
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   1029c:	f8d5 05f4 	ldr.w	r0, [r5, #1524]	; 0x5f4
   102a0:	6803      	ldr	r3, [r0, #0]
   102a2:	685b      	ldr	r3, [r3, #4]
   102a4:	4639      	mov	r1, r7
   102a6:	4798      	blx	r3
   102a8:	f8c5 0700 	str.w	r0, [r5, #1792]	; 0x700
	entry.timestamp=currentTimestamp;
   102ac:	f8c5 06b8 	str.w	r0, [r5, #1720]	; 0x6b8
	StackEventEntry(&entry);
   102b0:	f505 61d7 	add.w	r1, r5, #1720	; 0x6b8
   102b4:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
   102b8:	4b08      	ldr	r3, [pc, #32]	; (102dc <_ZN18Event_Logger_Class9SaveEventEPh+0xcc>)
   102ba:	4798      	blx	r3
	
	if (usb.IsEnabled())
   102bc:	4808      	ldr	r0, [pc, #32]	; (102e0 <_ZN18Event_Logger_Class9SaveEventEPh+0xd0>)
   102be:	4b09      	ldr	r3, [pc, #36]	; (102e4 <_ZN18Event_Logger_Class9SaveEventEPh+0xd4>)
   102c0:	4798      	blx	r3
   102c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				memcpy(&entry.code,text,(uint32_t)semiColonPosition);
   102c6:	4602      	mov	r2, r0
   102c8:	4621      	mov	r1, r4
   102ca:	4640      	mov	r0, r8
   102cc:	4b06      	ldr	r3, [pc, #24]	; (102e8 <_ZN18Event_Logger_Class9SaveEventEPh+0xd8>)
   102ce:	4798      	blx	r3
   102d0:	e7c5      	b.n	1025e <_ZN18Event_Logger_Class9SaveEventEPh+0x4e>
   102d2:	bf00      	nop
   102d4:	0001042d 	.word	0x0001042d
   102d8:	0001040d 	.word	0x0001040d
   102dc:	000104c1 	.word	0x000104c1
   102e0:	20001880 	.word	0x20001880
   102e4:	0000ed61 	.word	0x0000ed61
   102e8:	00010949 	.word	0x00010949

000102ec <_ZN18Event_Logger_Class9SaveEventEPKc>:
	}
	SaveEvent(logger_module);
	
}

void Event_Logger_Class::SaveEvent(char const * text){
   102ec:	b508      	push	{r3, lr}
	
	SaveEvent((uint8_t*)text);
   102ee:	4b01      	ldr	r3, [pc, #4]	; (102f4 <_ZN18Event_Logger_Class9SaveEventEPKc+0x8>)
   102f0:	4798      	blx	r3
   102f2:	bd08      	pop	{r3, pc}
   102f4:	00010211 	.word	0x00010211

000102f8 <_GLOBAL__sub_I_local_info_text>:
}

 Event_Logger_Class	logger;
   102f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   102fc:	4c30      	ldr	r4, [pc, #192]	; (103c0 <_GLOBAL__sub_I_local_info_text+0xc8>)
   102fe:	f504 758c 	add.w	r5, r4, #280	; 0x118
   10302:	4930      	ldr	r1, [pc, #192]	; (103c4 <_GLOBAL__sub_I_local_info_text+0xcc>)
   10304:	4628      	mov	r0, r5
   10306:	4f30      	ldr	r7, [pc, #192]	; (103c8 <_GLOBAL__sub_I_local_info_text+0xd0>)
   10308:	47b8      	blx	r7
   1030a:	4e30      	ldr	r6, [pc, #192]	; (103cc <_GLOBAL__sub_I_local_info_text+0xd4>)
   1030c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 10404 <_GLOBAL__sub_I_local_info_text+0x10c>
   10310:	4632      	mov	r2, r6
   10312:	4641      	mov	r1, r8
   10314:	4628      	mov	r0, r5
   10316:	4d2e      	ldr	r5, [pc, #184]	; (103d0 <_GLOBAL__sub_I_local_info_text+0xd8>)
   10318:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   1031a:	f504 799c 	add.w	r9, r4, #312	; 0x138
   1031e:	492d      	ldr	r1, [pc, #180]	; (103d4 <_GLOBAL__sub_I_local_info_text+0xdc>)
   10320:	4648      	mov	r0, r9
   10322:	47b8      	blx	r7
   10324:	4632      	mov	r2, r6
   10326:	4641      	mov	r1, r8
   10328:	4648      	mov	r0, r9
   1032a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   1032c:	f504 79ac 	add.w	r9, r4, #344	; 0x158
   10330:	4929      	ldr	r1, [pc, #164]	; (103d8 <_GLOBAL__sub_I_local_info_text+0xe0>)
   10332:	4648      	mov	r0, r9
   10334:	47b8      	blx	r7
   10336:	4632      	mov	r2, r6
   10338:	4641      	mov	r1, r8
   1033a:	4648      	mov	r0, r9
   1033c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1033e:	f504 79bc 	add.w	r9, r4, #376	; 0x178
   10342:	4926      	ldr	r1, [pc, #152]	; (103dc <_GLOBAL__sub_I_local_info_text+0xe4>)
   10344:	4648      	mov	r0, r9
   10346:	47b8      	blx	r7
   10348:	4632      	mov	r2, r6
   1034a:	4641      	mov	r1, r8
   1034c:	4648      	mov	r0, r9
   1034e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   10350:	f504 79cc 	add.w	r9, r4, #408	; 0x198
   10354:	4922      	ldr	r1, [pc, #136]	; (103e0 <_GLOBAL__sub_I_local_info_text+0xe8>)
   10356:	4648      	mov	r0, r9
   10358:	47b8      	blx	r7
   1035a:	4632      	mov	r2, r6
   1035c:	4641      	mov	r1, r8
   1035e:	4648      	mov	r0, r9
   10360:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   10362:	f504 79dc 	add.w	r9, r4, #440	; 0x1b8
   10366:	491f      	ldr	r1, [pc, #124]	; (103e4 <_GLOBAL__sub_I_local_info_text+0xec>)
   10368:	4648      	mov	r0, r9
   1036a:	47b8      	blx	r7
   1036c:	4632      	mov	r2, r6
   1036e:	4641      	mov	r1, r8
   10370:	4648      	mov	r0, r9
   10372:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   10374:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
   10378:	491b      	ldr	r1, [pc, #108]	; (103e8 <_GLOBAL__sub_I_local_info_text+0xf0>)
   1037a:	4648      	mov	r0, r9
   1037c:	47b8      	blx	r7
   1037e:	4632      	mov	r2, r6
   10380:	4641      	mov	r1, r8
   10382:	4648      	mov	r0, r9
   10384:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   10386:	f504 79fc 	add.w	r9, r4, #504	; 0x1f8
   1038a:	4918      	ldr	r1, [pc, #96]	; (103ec <_GLOBAL__sub_I_local_info_text+0xf4>)
   1038c:	4648      	mov	r0, r9
   1038e:	47b8      	blx	r7
   10390:	4632      	mov	r2, r6
   10392:	4641      	mov	r1, r8
   10394:	4648      	mov	r0, r9
   10396:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
   10398:	4915      	ldr	r1, [pc, #84]	; (103f0 <_GLOBAL__sub_I_local_info_text+0xf8>)
   1039a:	4620      	mov	r0, r4
   1039c:	4b15      	ldr	r3, [pc, #84]	; (103f4 <_GLOBAL__sub_I_local_info_text+0xfc>)
   1039e:	4798      	blx	r3
   103a0:	4632      	mov	r2, r6
   103a2:	4915      	ldr	r1, [pc, #84]	; (103f8 <_GLOBAL__sub_I_local_info_text+0x100>)
   103a4:	4620      	mov	r0, r4
   103a6:	47a8      	blx	r5
 Event_Logger_Class	logger;
   103a8:	f504 7406 	add.w	r4, r4, #536	; 0x218
   103ac:	4620      	mov	r0, r4
   103ae:	4b13      	ldr	r3, [pc, #76]	; (103fc <_GLOBAL__sub_I_local_info_text+0x104>)
   103b0:	4798      	blx	r3
   103b2:	4632      	mov	r2, r6
   103b4:	4912      	ldr	r1, [pc, #72]	; (10400 <_GLOBAL__sub_I_local_info_text+0x108>)
   103b6:	4620      	mov	r0, r4
   103b8:	47a8      	blx	r5
   103ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   103be:	bf00      	nop
   103c0:	200090f8 	.word	0x200090f8
   103c4:	2000aae8 	.word	0x2000aae8
   103c8:	0000e5e9 	.word	0x0000e5e9
   103cc:	20000000 	.word	0x20000000
   103d0:	000108c5 	.word	0x000108c5
   103d4:	2000ab7c 	.word	0x2000ab7c
   103d8:	2000aca0 	.word	0x2000aca0
   103dc:	2000ab9c 	.word	0x2000ab9c
   103e0:	2000ac60 	.word	0x2000ac60
   103e4:	2000ac80 	.word	0x2000ac80
   103e8:	2000ab58 	.word	0x2000ab58
   103ec:	2000abf8 	.word	0x2000abf8
   103f0:	2000acc0 	.word	0x2000acc0
   103f4:	00010571 	.word	0x00010571
   103f8:	000105ad 	.word	0x000105ad
   103fc:	000101b5 	.word	0x000101b5
   10400:	00010185 	.word	0x00010185
   10404:	0000e621 	.word	0x0000e621

00010408 <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
   10408:	4770      	bx	lr

0001040a <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
   1040a:	4770      	bx	lr

0001040c <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:

void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
   1040c:	b538      	push	{r3, r4, r5, lr}
   1040e:	4605      	mov	r5, r0
   10410:	460c      	mov	r4, r1
	//RemoveSpaces((char *)str);
	sizeText=strlen((char *)str);
   10412:	4608      	mov	r0, r1
   10414:	4b04      	ldr	r3, [pc, #16]	; (10428 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x1c>)
   10416:	4798      	blx	r3
   10418:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
   1041a:	b2c0      	uxtb	r0, r0
   1041c:	282c      	cmp	r0, #44	; 0x2c
	{
		str[44]='\0';
   1041e:	bfc4      	itt	gt
   10420:	2300      	movgt	r3, #0
   10422:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
   10426:	bd38      	pop	{r3, r4, r5, pc}
   10428:	00010b41 	.word	0x00010b41

0001042c <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (int i = 0; strlen((char *)str); i++){
   1042c:	780b      	ldrb	r3, [r1, #0]
   1042e:	b163      	cbz	r3, 1044a <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1e>
		if (str[i] == ':'){
   10430:	2b3a      	cmp	r3, #58	; 0x3a
   10432:	bf18      	it	ne
   10434:	2000      	movne	r0, #0
   10436:	d006      	beq.n	10446 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1a>
	for (int i = 0; strlen((char *)str); i++){
   10438:	3001      	adds	r0, #1
		if (str[i] == ':'){
   1043a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1043e:	2b3a      	cmp	r3, #58	; 0x3a
   10440:	d1fa      	bne.n	10438 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xc>
			return i;
   10442:	b2c0      	uxtb	r0, r0
   10444:	4770      	bx	lr
	for (int i = 0; strlen((char *)str); i++){
   10446:	2000      	movs	r0, #0
   10448:	e7fb      	b.n	10442 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x16>
		}
	}
	
	return 0;
   1044a:	2000      	movs	r0, #0
}
   1044c:	4770      	bx	lr
	...

00010450 <_ZN15DataLoger_ClassC1Ev>:

static uint8_t staticEventLogs[QSPI_ERBLK];
static uint32_t local_memory_event_stack;

// default constructor
DataLoger_Class::DataLoger_Class()
   10450:	b510      	push	{r4, lr}
   10452:	4604      	mov	r4, r0
   10454:	4b0c      	ldr	r3, [pc, #48]	; (10488 <_ZN15DataLoger_ClassC1Ev+0x38>)
   10456:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   10458:	f44f 7200 	mov.w	r2, #512	; 0x200
   1045c:	2100      	movs	r1, #0
   1045e:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
   10462:	4b0a      	ldr	r3, [pc, #40]	; (1048c <_ZN15DataLoger_ClassC1Ev+0x3c>)
   10464:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   10466:	2300      	movs	r3, #0
   10468:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
   1046c:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
{
	stackPointer=&staticEventLogs[0];
   10470:	4a07      	ldr	r2, [pc, #28]	; (10490 <_ZN15DataLoger_ClassC1Ev+0x40>)
   10472:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
	logger.memory_event_stack=&local_memory_event_stack;
   10476:	4b07      	ldr	r3, [pc, #28]	; (10494 <_ZN15DataLoger_ClassC1Ev+0x44>)
   10478:	4907      	ldr	r1, [pc, #28]	; (10498 <_ZN15DataLoger_ClassC1Ev+0x48>)
   1047a:	f8c3 15ec 	str.w	r1, [r3, #1516]	; 0x5ec
	logger.event_buffer_arrray=staticEventLogs;
   1047e:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	
} //DataLoger_Class
   10482:	4620      	mov	r0, r4
   10484:	bd10      	pop	{r4, pc}
   10486:	bf00      	nop
   10488:	0000fd8d 	.word	0x0000fd8d
   1048c:	00010a7d 	.word	0x00010a7d
   10490:	20009a28 	.word	0x20009a28
   10494:	20009310 	.word	0x20009310
   10498:	2000aa28 	.word	0x2000aa28

0001049c <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
   1049c:	b510      	push	{r4, lr}
   1049e:	4604      	mov	r4, r0
   104a0:	4b01      	ldr	r3, [pc, #4]	; (104a8 <_ZN15DataLoger_ClassD1Ev+0xc>)
   104a2:	4798      	blx	r3
{
} //~DataLoger_Class
   104a4:	4620      	mov	r0, r4
   104a6:	bd10      	pop	{r4, pc}
   104a8:	0000fdc9 	.word	0x0000fdc9

000104ac <_ZN15DataLoger_Class11IsStackFullEv>:
	stackValue+=sizeof(Event_Log_Entry);
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if (stackValue+(sizeof(Event_Log_Entry))>QSPI_ERBLK)
   104ac:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
   104b0:	3040      	adds	r0, #64	; 0x40
	} 
	else
	{
		return false;
	}
   104b2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   104b6:	bf94      	ite	ls
   104b8:	2000      	movls	r0, #0
   104ba:	2001      	movhi	r0, #1
   104bc:	4770      	bx	lr
	...

000104c0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent){
   104c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   104c2:	4605      	mov	r5, r0
   104c4:	460c      	mov	r4, r1
	if (IsStackFull())
   104c6:	4b17      	ldr	r3, [pc, #92]	; (10524 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x64>)
   104c8:	4798      	blx	r3
   104ca:	b9c0      	cbnz	r0, 104fe <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x3e>
	memcpy(&stackPointer[stackValue],ent,sizeof(Event_Log_Entry));
   104cc:	f8d5 3534 	ldr.w	r3, [r5, #1332]	; 0x534
   104d0:	f8d5 14f0 	ldr.w	r1, [r5, #1264]	; 0x4f0
   104d4:	4622      	mov	r2, r4
   104d6:	440b      	add	r3, r1
   104d8:	3440      	adds	r4, #64	; 0x40
   104da:	6817      	ldr	r7, [r2, #0]
   104dc:	6856      	ldr	r6, [r2, #4]
   104de:	6890      	ldr	r0, [r2, #8]
   104e0:	68d1      	ldr	r1, [r2, #12]
   104e2:	601f      	str	r7, [r3, #0]
   104e4:	605e      	str	r6, [r3, #4]
   104e6:	6098      	str	r0, [r3, #8]
   104e8:	60d9      	str	r1, [r3, #12]
   104ea:	3210      	adds	r2, #16
   104ec:	3310      	adds	r3, #16
   104ee:	42a2      	cmp	r2, r4
   104f0:	d1f3      	bne.n	104da <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x1a>
	stackValue+=sizeof(Event_Log_Entry);
   104f2:	f8d5 04f0 	ldr.w	r0, [r5, #1264]	; 0x4f0
   104f6:	3040      	adds	r0, #64	; 0x40
   104f8:	f8c5 04f0 	str.w	r0, [r5, #1264]	; 0x4f0
}
   104fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   104fe:	4e0a      	ldr	r6, [pc, #40]	; (10528 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x68>)
   10500:	4631      	mov	r1, r6
   10502:	480a      	ldr	r0, [pc, #40]	; (1052c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x6c>)
   10504:	4b0a      	ldr	r3, [pc, #40]	; (10530 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x70>)
   10506:	4798      	blx	r3
   10508:	4b0a      	ldr	r3, [pc, #40]	; (10534 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x74>)
   1050a:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   1050e:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
	stackValue=stk;
   10512:	2100      	movs	r1, #0
   10514:	f8c5 14f0 	str.w	r1, [r5, #1264]	; 0x4f0
		memset(staticEventLogs,0,QSPI_ERBLK);
   10518:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1051c:	4630      	mov	r0, r6
   1051e:	4b06      	ldr	r3, [pc, #24]	; (10538 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x78>)
   10520:	4798      	blx	r3
   10522:	e7d3      	b.n	104cc <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0xc>
   10524:	000104ad 	.word	0x000104ad
   10528:	20009a28 	.word	0x20009a28
   1052c:	20002ae8 	.word	0x20002ae8
   10530:	0000f6c9 	.word	0x0000f6c9
   10534:	2000ab20 	.word	0x2000ab20
   10538:	00010a7d 	.word	0x00010a7d

0001053c <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   1053c:	b580      	push	{r7, lr}
   1053e:	b082      	sub	sp, #8
   10540:	af00      	add	r7, sp, #0
   10542:	6078      	str	r0, [r7, #4]
   10544:	687b      	ldr	r3, [r7, #4]
   10546:	4618      	mov	r0, r3
   10548:	4b06      	ldr	r3, [pc, #24]	; (10564 <_ZN14Calendar_ClassC1Ev+0x28>)
   1054a:	4798      	blx	r3
   1054c:	4a06      	ldr	r2, [pc, #24]	; (10568 <_ZN14Calendar_ClassC1Ev+0x2c>)
   1054e:	687b      	ldr	r3, [r7, #4]
   10550:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   10552:	4a06      	ldr	r2, [pc, #24]	; (1056c <_ZN14Calendar_ClassC1Ev+0x30>)
   10554:	687b      	ldr	r3, [r7, #4]
   10556:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   10558:	687b      	ldr	r3, [r7, #4]
   1055a:	4618      	mov	r0, r3
   1055c:	3708      	adds	r7, #8
   1055e:	46bd      	mov	sp, r7
   10560:	bd80      	pop	{r7, pc}
   10562:	bf00      	nop
   10564:	00010885 	.word	0x00010885
   10568:	00011278 	.word	0x00011278
   1056c:	2000aa30 	.word	0x2000aa30

00010570 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   10570:	b580      	push	{r7, lr}
   10572:	b082      	sub	sp, #8
   10574:	af00      	add	r7, sp, #0
   10576:	6078      	str	r0, [r7, #4]
   10578:	6039      	str	r1, [r7, #0]
   1057a:	687b      	ldr	r3, [r7, #4]
   1057c:	4618      	mov	r0, r3
   1057e:	4b08      	ldr	r3, [pc, #32]	; (105a0 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   10580:	4798      	blx	r3
   10582:	4a08      	ldr	r2, [pc, #32]	; (105a4 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   10584:	687b      	ldr	r3, [r7, #4]
   10586:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   10588:	687b      	ldr	r3, [r7, #4]
   1058a:	683a      	ldr	r2, [r7, #0]
   1058c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
   10590:	4a05      	ldr	r2, [pc, #20]	; (105a8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   10592:	687b      	ldr	r3, [r7, #4]
   10594:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   10596:	687b      	ldr	r3, [r7, #4]
   10598:	4618      	mov	r0, r3
   1059a:	3708      	adds	r7, #8
   1059c:	46bd      	mov	sp, r7
   1059e:	bd80      	pop	{r7, pc}
   105a0:	00010885 	.word	0x00010885
   105a4:	00011278 	.word	0x00011278
   105a8:	2000aa30 	.word	0x2000aa30

000105ac <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   105ac:	b580      	push	{r7, lr}
   105ae:	b082      	sub	sp, #8
   105b0:	af00      	add	r7, sp, #0
   105b2:	6078      	str	r0, [r7, #4]
   105b4:	4a05      	ldr	r2, [pc, #20]	; (105cc <_ZN14Calendar_ClassD1Ev+0x20>)
   105b6:	687b      	ldr	r3, [r7, #4]
   105b8:	601a      	str	r2, [r3, #0]
   105ba:	687b      	ldr	r3, [r7, #4]
   105bc:	4618      	mov	r0, r3
   105be:	4b04      	ldr	r3, [pc, #16]	; (105d0 <_ZN14Calendar_ClassD1Ev+0x24>)
   105c0:	4798      	blx	r3
{
} //~Calendar_Class
   105c2:	687b      	ldr	r3, [r7, #4]
   105c4:	4618      	mov	r0, r3
   105c6:	3708      	adds	r7, #8
   105c8:	46bd      	mov	sp, r7
   105ca:	bd80      	pop	{r7, pc}
   105cc:	00011278 	.word	0x00011278
   105d0:	000108a5 	.word	0x000108a5

000105d4 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   105d4:	b580      	push	{r7, lr}
   105d6:	b082      	sub	sp, #8
   105d8:	af00      	add	r7, sp, #0
   105da:	6078      	str	r0, [r7, #4]
   105dc:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   105de:	687b      	ldr	r3, [r7, #4]
   105e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   105e4:	6839      	ldr	r1, [r7, #0]
   105e6:	4618      	mov	r0, r3
   105e8:	4b03      	ldr	r3, [pc, #12]	; (105f8 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   105ea:	4798      	blx	r3
   105ec:	4603      	mov	r3, r0
}
   105ee:	4618      	mov	r0, r3
   105f0:	3708      	adds	r7, #8
   105f2:	46bd      	mov	sp, r7
   105f4:	bd80      	pop	{r7, pc}
   105f6:	bf00      	nop
   105f8:	00002c5d 	.word	0x00002c5d

000105fc <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   105fc:	b480      	push	{r7}
   105fe:	b083      	sub	sp, #12
   10600:	af00      	add	r7, sp, #0
   10602:	6078      	str	r0, [r7, #4]
   10604:	460b      	mov	r3, r1
   10606:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   10608:	887b      	ldrh	r3, [r7, #2]
   1060a:	f003 0303 	and.w	r3, r3, #3
   1060e:	2b00      	cmp	r3, #0
   10610:	d001      	beq.n	10616 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   10612:	2300      	movs	r3, #0
   10614:	e000      	b.n	10618 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   10616:	2301      	movs	r3, #1
	}
}
   10618:	4618      	mov	r0, r3
   1061a:	370c      	adds	r7, #12
   1061c:	46bd      	mov	sp, r7
   1061e:	bc80      	pop	{r7}
   10620:	4770      	bx	lr
	...

00010624 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   10624:	b580      	push	{r7, lr}
   10626:	b086      	sub	sp, #24
   10628:	af00      	add	r7, sp, #0
   1062a:	6078      	str	r0, [r7, #4]
   1062c:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   1062e:	2300      	movs	r3, #0
   10630:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   10632:	2300      	movs	r3, #0
   10634:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   10636:	683b      	ldr	r3, [r7, #0]
   10638:	88db      	ldrh	r3, [r3, #6]
   1063a:	b2da      	uxtb	r2, r3
   1063c:	687b      	ldr	r3, [r7, #4]
   1063e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   10642:	699b      	ldr	r3, [r3, #24]
   10644:	b2db      	uxtb	r3, r3
   10646:	1ad3      	subs	r3, r2, r3
   10648:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   1064a:	683b      	ldr	r3, [r7, #0]
   1064c:	795b      	ldrb	r3, [r3, #5]
   1064e:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   10650:	683b      	ldr	r3, [r7, #0]
   10652:	791b      	ldrb	r3, [r3, #4]
   10654:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   10656:	683b      	ldr	r3, [r7, #0]
   10658:	789b      	ldrb	r3, [r3, #2]
   1065a:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   1065c:	683b      	ldr	r3, [r7, #0]
   1065e:	785b      	ldrb	r3, [r3, #1]
   10660:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   10662:	683b      	ldr	r3, [r7, #0]
   10664:	781b      	ldrb	r3, [r3, #0]
   10666:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   10668:	2300      	movs	r3, #0
   1066a:	613b      	str	r3, [r7, #16]
   1066c:	7bfa      	ldrb	r2, [r7, #15]
   1066e:	693b      	ldr	r3, [r7, #16]
   10670:	429a      	cmp	r2, r3
   10672:	d91e      	bls.n	106b2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   10674:	687b      	ldr	r3, [r7, #4]
   10676:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1067a:	699b      	ldr	r3, [r3, #24]
   1067c:	b29a      	uxth	r2, r3
   1067e:	693b      	ldr	r3, [r7, #16]
   10680:	b29b      	uxth	r3, r3
   10682:	4413      	add	r3, r2
   10684:	b29b      	uxth	r3, r3
   10686:	4619      	mov	r1, r3
   10688:	6878      	ldr	r0, [r7, #4]
   1068a:	4b27      	ldr	r3, [pc, #156]	; (10728 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   1068c:	4798      	blx	r3
   1068e:	4603      	mov	r3, r0
   10690:	2b00      	cmp	r3, #0
   10692:	d006      	beq.n	106a2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   10694:	697b      	ldr	r3, [r7, #20]
   10696:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   1069a:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   1069e:	617b      	str	r3, [r7, #20]
   106a0:	e003      	b.n	106aa <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   106a2:	697a      	ldr	r2, [r7, #20]
   106a4:	4b21      	ldr	r3, [pc, #132]	; (1072c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   106a6:	4413      	add	r3, r2
   106a8:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   106aa:	693b      	ldr	r3, [r7, #16]
   106ac:	3301      	adds	r3, #1
   106ae:	613b      	str	r3, [r7, #16]
   106b0:	e7dc      	b.n	1066c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   106b2:	2301      	movs	r3, #1
   106b4:	613b      	str	r3, [r7, #16]
   106b6:	7bba      	ldrb	r2, [r7, #14]
   106b8:	693b      	ldr	r3, [r7, #16]
   106ba:	429a      	cmp	r2, r3
   106bc:	d910      	bls.n	106e0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   106be:	683b      	ldr	r3, [r7, #0]
   106c0:	88db      	ldrh	r3, [r3, #6]
   106c2:	4619      	mov	r1, r3
   106c4:	693b      	ldr	r3, [r7, #16]
   106c6:	b2db      	uxtb	r3, r3
   106c8:	461a      	mov	r2, r3
   106ca:	6878      	ldr	r0, [r7, #4]
   106cc:	4b18      	ldr	r3, [pc, #96]	; (10730 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   106ce:	4798      	blx	r3
   106d0:	4602      	mov	r2, r0
   106d2:	697b      	ldr	r3, [r7, #20]
   106d4:	4413      	add	r3, r2
   106d6:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   106d8:	693b      	ldr	r3, [r7, #16]
   106da:	3301      	adds	r3, #1
   106dc:	613b      	str	r3, [r7, #16]
   106de:	e7ea      	b.n	106b6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   106e0:	7b7b      	ldrb	r3, [r7, #13]
   106e2:	3b01      	subs	r3, #1
   106e4:	4a13      	ldr	r2, [pc, #76]	; (10734 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   106e6:	fb02 f303 	mul.w	r3, r2, r3
   106ea:	461a      	mov	r2, r3
   106ec:	697b      	ldr	r3, [r7, #20]
   106ee:	4413      	add	r3, r2
   106f0:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   106f2:	7b3b      	ldrb	r3, [r7, #12]
   106f4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   106f8:	fb02 f303 	mul.w	r3, r2, r3
   106fc:	461a      	mov	r2, r3
   106fe:	697b      	ldr	r3, [r7, #20]
   10700:	4413      	add	r3, r2
   10702:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   10704:	7afa      	ldrb	r2, [r7, #11]
   10706:	4613      	mov	r3, r2
   10708:	011b      	lsls	r3, r3, #4
   1070a:	1a9b      	subs	r3, r3, r2
   1070c:	009b      	lsls	r3, r3, #2
   1070e:	461a      	mov	r2, r3
   10710:	697b      	ldr	r3, [r7, #20]
   10712:	4413      	add	r3, r2
   10714:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   10716:	7abb      	ldrb	r3, [r7, #10]
   10718:	697a      	ldr	r2, [r7, #20]
   1071a:	4413      	add	r3, r2
   1071c:	617b      	str	r3, [r7, #20]

	return tmp;
   1071e:	697b      	ldr	r3, [r7, #20]
}
   10720:	4618      	mov	r0, r3
   10722:	3718      	adds	r7, #24
   10724:	46bd      	mov	sp, r7
   10726:	bd80      	pop	{r7, pc}
   10728:	000105fd 	.word	0x000105fd
   1072c:	01e13380 	.word	0x01e13380
   10730:	00010739 	.word	0x00010739
   10734:	00015180 	.word	0x00015180

00010738 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   10738:	b580      	push	{r7, lr}
   1073a:	b086      	sub	sp, #24
   1073c:	af00      	add	r7, sp, #0
   1073e:	60f8      	str	r0, [r7, #12]
   10740:	60b9      	str	r1, [r7, #8]
   10742:	4613      	mov	r3, r2
   10744:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   10746:	2300      	movs	r3, #0
   10748:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   1074a:	68bb      	ldr	r3, [r7, #8]
   1074c:	b29b      	uxth	r3, r3
   1074e:	4619      	mov	r1, r3
   10750:	68f8      	ldr	r0, [r7, #12]
   10752:	4b2f      	ldr	r3, [pc, #188]	; (10810 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   10754:	4798      	blx	r3
   10756:	4603      	mov	r3, r0
   10758:	2b00      	cmp	r3, #0
   1075a:	d028      	beq.n	107ae <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   1075c:	79fb      	ldrb	r3, [r7, #7]
   1075e:	3b01      	subs	r3, #1
   10760:	2b0b      	cmp	r3, #11
   10762:	d84c      	bhi.n	107fe <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   10764:	a201      	add	r2, pc, #4	; (adr r2, 1076c <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   10766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1076a:	bf00      	nop
   1076c:	0001079d 	.word	0x0001079d
   10770:	000107a3 	.word	0x000107a3
   10774:	0001079d 	.word	0x0001079d
   10778:	000107a9 	.word	0x000107a9
   1077c:	0001079d 	.word	0x0001079d
   10780:	000107a9 	.word	0x000107a9
   10784:	0001079d 	.word	0x0001079d
   10788:	0001079d 	.word	0x0001079d
   1078c:	000107a9 	.word	0x000107a9
   10790:	0001079d 	.word	0x0001079d
   10794:	000107a9 	.word	0x000107a9
   10798:	0001079d 	.word	0x0001079d
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   1079c:	4b1d      	ldr	r3, [pc, #116]	; (10814 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   1079e:	617b      	str	r3, [r7, #20]
			break;
   107a0:	e030      	b.n	10804 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   107a2:	4b1d      	ldr	r3, [pc, #116]	; (10818 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   107a4:	617b      	str	r3, [r7, #20]
			break;
   107a6:	e02d      	b.n	10804 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   107a8:	4b1c      	ldr	r3, [pc, #112]	; (1081c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   107aa:	617b      	str	r3, [r7, #20]
			break;
   107ac:	e02a      	b.n	10804 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   107ae:	79fb      	ldrb	r3, [r7, #7]
   107b0:	3b01      	subs	r3, #1
   107b2:	2b0b      	cmp	r3, #11
   107b4:	d825      	bhi.n	10802 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   107b6:	a201      	add	r2, pc, #4	; (adr r2, 107bc <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   107b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   107bc:	000107ed 	.word	0x000107ed
   107c0:	000107f3 	.word	0x000107f3
   107c4:	000107ed 	.word	0x000107ed
   107c8:	000107f9 	.word	0x000107f9
   107cc:	000107ed 	.word	0x000107ed
   107d0:	000107f9 	.word	0x000107f9
   107d4:	000107ed 	.word	0x000107ed
   107d8:	000107ed 	.word	0x000107ed
   107dc:	000107f9 	.word	0x000107f9
   107e0:	000107ed 	.word	0x000107ed
   107e4:	000107f9 	.word	0x000107f9
   107e8:	000107ed 	.word	0x000107ed
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   107ec:	4b09      	ldr	r3, [pc, #36]	; (10814 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   107ee:	617b      	str	r3, [r7, #20]
			break;
   107f0:	e008      	b.n	10804 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   107f2:	4b0b      	ldr	r3, [pc, #44]	; (10820 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   107f4:	617b      	str	r3, [r7, #20]
			break;
   107f6:	e005      	b.n	10804 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   107f8:	4b08      	ldr	r3, [pc, #32]	; (1081c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   107fa:	617b      	str	r3, [r7, #20]
			break;
   107fc:	e002      	b.n	10804 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   107fe:	bf00      	nop
   10800:	e000      	b.n	10804 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   10802:	bf00      	nop
		}
	}

	return sec_in_month;
   10804:	697b      	ldr	r3, [r7, #20]
}
   10806:	4618      	mov	r0, r3
   10808:	3718      	adds	r7, #24
   1080a:	46bd      	mov	sp, r7
   1080c:	bd80      	pop	{r7, pc}
   1080e:	bf00      	nop
   10810:	000105fd 	.word	0x000105fd
   10814:	0028de80 	.word	0x0028de80
   10818:	00263b80 	.word	0x00263b80
   1081c:	00278d00 	.word	0x00278d00
   10820:	0024ea00 	.word	0x0024ea00

00010824 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   10824:	b580      	push	{r7, lr}
   10826:	b082      	sub	sp, #8
   10828:	af00      	add	r7, sp, #0
   1082a:	6078      	str	r0, [r7, #4]
   1082c:	6039      	str	r1, [r7, #0]
   1082e:	687b      	ldr	r3, [r7, #4]
   10830:	2b01      	cmp	r3, #1
   10832:	d10d      	bne.n	10850 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10834:	683b      	ldr	r3, [r7, #0]
   10836:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1083a:	4293      	cmp	r3, r2
   1083c:	d108      	bne.n	10850 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1083e:	4906      	ldr	r1, [pc, #24]	; (10858 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10840:	4806      	ldr	r0, [pc, #24]	; (1085c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10842:	4b07      	ldr	r3, [pc, #28]	; (10860 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   10844:	4798      	blx	r3
   10846:	4a07      	ldr	r2, [pc, #28]	; (10864 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   10848:	4907      	ldr	r1, [pc, #28]	; (10868 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1084a:	4804      	ldr	r0, [pc, #16]	; (1085c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1084c:	4b07      	ldr	r3, [pc, #28]	; (1086c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1084e:	4798      	blx	r3
   10850:	bf00      	nop
   10852:	3708      	adds	r7, #8
   10854:	46bd      	mov	sp, r7
   10856:	bd80      	pop	{r7, pc}
   10858:	2000acc0 	.word	0x2000acc0
   1085c:	2000aa38 	.word	0x2000aa38
   10860:	00010571 	.word	0x00010571
   10864:	20000000 	.word	0x20000000
   10868:	000105ad 	.word	0x000105ad
   1086c:	000108c5 	.word	0x000108c5

00010870 <_GLOBAL__sub_I_ptrCalendarClass>:
   10870:	b580      	push	{r7, lr}
   10872:	af00      	add	r7, sp, #0
   10874:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10878:	2001      	movs	r0, #1
   1087a:	4b01      	ldr	r3, [pc, #4]	; (10880 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   1087c:	4798      	blx	r3
   1087e:	bd80      	pop	{r7, pc}
   10880:	00010825 	.word	0x00010825

00010884 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   10884:	b480      	push	{r7}
   10886:	b083      	sub	sp, #12
   10888:	af00      	add	r7, sp, #0
   1088a:	6078      	str	r0, [r7, #4]
   1088c:	4a04      	ldr	r2, [pc, #16]	; (108a0 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   1088e:	687b      	ldr	r3, [r7, #4]
   10890:	601a      	str	r2, [r3, #0]
{
} //~D
   10892:	687b      	ldr	r3, [r7, #4]
   10894:	4618      	mov	r0, r3
   10896:	370c      	adds	r7, #12
   10898:	46bd      	mov	sp, r7
   1089a:	bc80      	pop	{r7}
   1089c:	4770      	bx	lr
   1089e:	bf00      	nop
   108a0:	00011288 	.word	0x00011288

000108a4 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   108a4:	b480      	push	{r7}
   108a6:	b083      	sub	sp, #12
   108a8:	af00      	add	r7, sp, #0
   108aa:	6078      	str	r0, [r7, #4]
   108ac:	4a04      	ldr	r2, [pc, #16]	; (108c0 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   108ae:	687b      	ldr	r3, [r7, #4]
   108b0:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   108b2:	687b      	ldr	r3, [r7, #4]
   108b4:	4618      	mov	r0, r3
   108b6:	370c      	adds	r7, #12
   108b8:	46bd      	mov	sp, r7
   108ba:	bc80      	pop	{r7}
   108bc:	4770      	bx	lr
   108be:	bf00      	nop
   108c0:	00011288 	.word	0x00011288

000108c4 <__aeabi_atexit>:
   108c4:	460b      	mov	r3, r1
   108c6:	4601      	mov	r1, r0
   108c8:	4618      	mov	r0, r3
   108ca:	f000 b801 	b.w	108d0 <__cxa_atexit>
   108ce:	bf00      	nop

000108d0 <__cxa_atexit>:
   108d0:	4613      	mov	r3, r2
   108d2:	460a      	mov	r2, r1
   108d4:	4601      	mov	r1, r0
   108d6:	2002      	movs	r0, #2
   108d8:	f000 b9a0 	b.w	10c1c <__register_exitproc>

000108dc <ffs>:
   108dc:	b140      	cbz	r0, 108f0 <ffs+0x14>
   108de:	2300      	movs	r3, #0
   108e0:	fa40 f103 	asr.w	r1, r0, r3
   108e4:	1c5a      	adds	r2, r3, #1
   108e6:	07c9      	lsls	r1, r1, #31
   108e8:	4613      	mov	r3, r2
   108ea:	d5f9      	bpl.n	108e0 <ffs+0x4>
   108ec:	4610      	mov	r0, r2
   108ee:	4770      	bx	lr
   108f0:	4602      	mov	r2, r0
   108f2:	4610      	mov	r0, r2
   108f4:	4770      	bx	lr
   108f6:	bf00      	nop

000108f8 <__libc_init_array>:
   108f8:	b570      	push	{r4, r5, r6, lr}
   108fa:	4e0f      	ldr	r6, [pc, #60]	; (10938 <__libc_init_array+0x40>)
   108fc:	4d0f      	ldr	r5, [pc, #60]	; (1093c <__libc_init_array+0x44>)
   108fe:	1b76      	subs	r6, r6, r5
   10900:	10b6      	asrs	r6, r6, #2
   10902:	bf18      	it	ne
   10904:	2400      	movne	r4, #0
   10906:	d005      	beq.n	10914 <__libc_init_array+0x1c>
   10908:	3401      	adds	r4, #1
   1090a:	f855 3b04 	ldr.w	r3, [r5], #4
   1090e:	4798      	blx	r3
   10910:	42a6      	cmp	r6, r4
   10912:	d1f9      	bne.n	10908 <__libc_init_array+0x10>
   10914:	4e0a      	ldr	r6, [pc, #40]	; (10940 <__libc_init_array+0x48>)
   10916:	4d0b      	ldr	r5, [pc, #44]	; (10944 <__libc_init_array+0x4c>)
   10918:	1b76      	subs	r6, r6, r5
   1091a:	f000 fcbb 	bl	11294 <_init>
   1091e:	10b6      	asrs	r6, r6, #2
   10920:	bf18      	it	ne
   10922:	2400      	movne	r4, #0
   10924:	d006      	beq.n	10934 <__libc_init_array+0x3c>
   10926:	3401      	adds	r4, #1
   10928:	f855 3b04 	ldr.w	r3, [r5], #4
   1092c:	4798      	blx	r3
   1092e:	42a6      	cmp	r6, r4
   10930:	d1f9      	bne.n	10926 <__libc_init_array+0x2e>
   10932:	bd70      	pop	{r4, r5, r6, pc}
   10934:	bd70      	pop	{r4, r5, r6, pc}
   10936:	bf00      	nop
   10938:	000112a0 	.word	0x000112a0
   1093c:	000112a0 	.word	0x000112a0
   10940:	000112d8 	.word	0x000112d8
   10944:	000112a0 	.word	0x000112a0

00010948 <memcpy>:
   10948:	4684      	mov	ip, r0
   1094a:	ea41 0300 	orr.w	r3, r1, r0
   1094e:	f013 0303 	ands.w	r3, r3, #3
   10952:	d16d      	bne.n	10a30 <memcpy+0xe8>
   10954:	3a40      	subs	r2, #64	; 0x40
   10956:	d341      	bcc.n	109dc <memcpy+0x94>
   10958:	f851 3b04 	ldr.w	r3, [r1], #4
   1095c:	f840 3b04 	str.w	r3, [r0], #4
   10960:	f851 3b04 	ldr.w	r3, [r1], #4
   10964:	f840 3b04 	str.w	r3, [r0], #4
   10968:	f851 3b04 	ldr.w	r3, [r1], #4
   1096c:	f840 3b04 	str.w	r3, [r0], #4
   10970:	f851 3b04 	ldr.w	r3, [r1], #4
   10974:	f840 3b04 	str.w	r3, [r0], #4
   10978:	f851 3b04 	ldr.w	r3, [r1], #4
   1097c:	f840 3b04 	str.w	r3, [r0], #4
   10980:	f851 3b04 	ldr.w	r3, [r1], #4
   10984:	f840 3b04 	str.w	r3, [r0], #4
   10988:	f851 3b04 	ldr.w	r3, [r1], #4
   1098c:	f840 3b04 	str.w	r3, [r0], #4
   10990:	f851 3b04 	ldr.w	r3, [r1], #4
   10994:	f840 3b04 	str.w	r3, [r0], #4
   10998:	f851 3b04 	ldr.w	r3, [r1], #4
   1099c:	f840 3b04 	str.w	r3, [r0], #4
   109a0:	f851 3b04 	ldr.w	r3, [r1], #4
   109a4:	f840 3b04 	str.w	r3, [r0], #4
   109a8:	f851 3b04 	ldr.w	r3, [r1], #4
   109ac:	f840 3b04 	str.w	r3, [r0], #4
   109b0:	f851 3b04 	ldr.w	r3, [r1], #4
   109b4:	f840 3b04 	str.w	r3, [r0], #4
   109b8:	f851 3b04 	ldr.w	r3, [r1], #4
   109bc:	f840 3b04 	str.w	r3, [r0], #4
   109c0:	f851 3b04 	ldr.w	r3, [r1], #4
   109c4:	f840 3b04 	str.w	r3, [r0], #4
   109c8:	f851 3b04 	ldr.w	r3, [r1], #4
   109cc:	f840 3b04 	str.w	r3, [r0], #4
   109d0:	f851 3b04 	ldr.w	r3, [r1], #4
   109d4:	f840 3b04 	str.w	r3, [r0], #4
   109d8:	3a40      	subs	r2, #64	; 0x40
   109da:	d2bd      	bcs.n	10958 <memcpy+0x10>
   109dc:	3230      	adds	r2, #48	; 0x30
   109de:	d311      	bcc.n	10a04 <memcpy+0xbc>
   109e0:	f851 3b04 	ldr.w	r3, [r1], #4
   109e4:	f840 3b04 	str.w	r3, [r0], #4
   109e8:	f851 3b04 	ldr.w	r3, [r1], #4
   109ec:	f840 3b04 	str.w	r3, [r0], #4
   109f0:	f851 3b04 	ldr.w	r3, [r1], #4
   109f4:	f840 3b04 	str.w	r3, [r0], #4
   109f8:	f851 3b04 	ldr.w	r3, [r1], #4
   109fc:	f840 3b04 	str.w	r3, [r0], #4
   10a00:	3a10      	subs	r2, #16
   10a02:	d2ed      	bcs.n	109e0 <memcpy+0x98>
   10a04:	320c      	adds	r2, #12
   10a06:	d305      	bcc.n	10a14 <memcpy+0xcc>
   10a08:	f851 3b04 	ldr.w	r3, [r1], #4
   10a0c:	f840 3b04 	str.w	r3, [r0], #4
   10a10:	3a04      	subs	r2, #4
   10a12:	d2f9      	bcs.n	10a08 <memcpy+0xc0>
   10a14:	3204      	adds	r2, #4
   10a16:	d008      	beq.n	10a2a <memcpy+0xe2>
   10a18:	07d2      	lsls	r2, r2, #31
   10a1a:	bf1c      	itt	ne
   10a1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10a20:	f800 3b01 	strbne.w	r3, [r0], #1
   10a24:	d301      	bcc.n	10a2a <memcpy+0xe2>
   10a26:	880b      	ldrh	r3, [r1, #0]
   10a28:	8003      	strh	r3, [r0, #0]
   10a2a:	4660      	mov	r0, ip
   10a2c:	4770      	bx	lr
   10a2e:	bf00      	nop
   10a30:	2a08      	cmp	r2, #8
   10a32:	d313      	bcc.n	10a5c <memcpy+0x114>
   10a34:	078b      	lsls	r3, r1, #30
   10a36:	d08d      	beq.n	10954 <memcpy+0xc>
   10a38:	f010 0303 	ands.w	r3, r0, #3
   10a3c:	d08a      	beq.n	10954 <memcpy+0xc>
   10a3e:	f1c3 0304 	rsb	r3, r3, #4
   10a42:	1ad2      	subs	r2, r2, r3
   10a44:	07db      	lsls	r3, r3, #31
   10a46:	bf1c      	itt	ne
   10a48:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10a4c:	f800 3b01 	strbne.w	r3, [r0], #1
   10a50:	d380      	bcc.n	10954 <memcpy+0xc>
   10a52:	f831 3b02 	ldrh.w	r3, [r1], #2
   10a56:	f820 3b02 	strh.w	r3, [r0], #2
   10a5a:	e77b      	b.n	10954 <memcpy+0xc>
   10a5c:	3a04      	subs	r2, #4
   10a5e:	d3d9      	bcc.n	10a14 <memcpy+0xcc>
   10a60:	3a01      	subs	r2, #1
   10a62:	f811 3b01 	ldrb.w	r3, [r1], #1
   10a66:	f800 3b01 	strb.w	r3, [r0], #1
   10a6a:	d2f9      	bcs.n	10a60 <memcpy+0x118>
   10a6c:	780b      	ldrb	r3, [r1, #0]
   10a6e:	7003      	strb	r3, [r0, #0]
   10a70:	784b      	ldrb	r3, [r1, #1]
   10a72:	7043      	strb	r3, [r0, #1]
   10a74:	788b      	ldrb	r3, [r1, #2]
   10a76:	7083      	strb	r3, [r0, #2]
   10a78:	4660      	mov	r0, ip
   10a7a:	4770      	bx	lr

00010a7c <memset>:
   10a7c:	b470      	push	{r4, r5, r6}
   10a7e:	0786      	lsls	r6, r0, #30
   10a80:	d046      	beq.n	10b10 <memset+0x94>
   10a82:	1e54      	subs	r4, r2, #1
   10a84:	2a00      	cmp	r2, #0
   10a86:	d041      	beq.n	10b0c <memset+0x90>
   10a88:	b2ca      	uxtb	r2, r1
   10a8a:	4603      	mov	r3, r0
   10a8c:	e002      	b.n	10a94 <memset+0x18>
   10a8e:	f114 34ff 	adds.w	r4, r4, #4294967295
   10a92:	d33b      	bcc.n	10b0c <memset+0x90>
   10a94:	f803 2b01 	strb.w	r2, [r3], #1
   10a98:	079d      	lsls	r5, r3, #30
   10a9a:	d1f8      	bne.n	10a8e <memset+0x12>
   10a9c:	2c03      	cmp	r4, #3
   10a9e:	d92e      	bls.n	10afe <memset+0x82>
   10aa0:	b2cd      	uxtb	r5, r1
   10aa2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10aa6:	2c0f      	cmp	r4, #15
   10aa8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10aac:	d919      	bls.n	10ae2 <memset+0x66>
   10aae:	f103 0210 	add.w	r2, r3, #16
   10ab2:	4626      	mov	r6, r4
   10ab4:	3e10      	subs	r6, #16
   10ab6:	2e0f      	cmp	r6, #15
   10ab8:	f842 5c10 	str.w	r5, [r2, #-16]
   10abc:	f842 5c0c 	str.w	r5, [r2, #-12]
   10ac0:	f842 5c08 	str.w	r5, [r2, #-8]
   10ac4:	f842 5c04 	str.w	r5, [r2, #-4]
   10ac8:	f102 0210 	add.w	r2, r2, #16
   10acc:	d8f2      	bhi.n	10ab4 <memset+0x38>
   10ace:	f1a4 0210 	sub.w	r2, r4, #16
   10ad2:	f022 020f 	bic.w	r2, r2, #15
   10ad6:	f004 040f 	and.w	r4, r4, #15
   10ada:	3210      	adds	r2, #16
   10adc:	2c03      	cmp	r4, #3
   10ade:	4413      	add	r3, r2
   10ae0:	d90d      	bls.n	10afe <memset+0x82>
   10ae2:	461e      	mov	r6, r3
   10ae4:	4622      	mov	r2, r4
   10ae6:	3a04      	subs	r2, #4
   10ae8:	2a03      	cmp	r2, #3
   10aea:	f846 5b04 	str.w	r5, [r6], #4
   10aee:	d8fa      	bhi.n	10ae6 <memset+0x6a>
   10af0:	1f22      	subs	r2, r4, #4
   10af2:	f022 0203 	bic.w	r2, r2, #3
   10af6:	3204      	adds	r2, #4
   10af8:	4413      	add	r3, r2
   10afa:	f004 0403 	and.w	r4, r4, #3
   10afe:	b12c      	cbz	r4, 10b0c <memset+0x90>
   10b00:	b2c9      	uxtb	r1, r1
   10b02:	441c      	add	r4, r3
   10b04:	f803 1b01 	strb.w	r1, [r3], #1
   10b08:	429c      	cmp	r4, r3
   10b0a:	d1fb      	bne.n	10b04 <memset+0x88>
   10b0c:	bc70      	pop	{r4, r5, r6}
   10b0e:	4770      	bx	lr
   10b10:	4614      	mov	r4, r2
   10b12:	4603      	mov	r3, r0
   10b14:	e7c2      	b.n	10a9c <memset+0x20>
   10b16:	bf00      	nop
	...

00010b40 <strlen>:
   10b40:	f890 f000 	pld	[r0]
   10b44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   10b48:	f020 0107 	bic.w	r1, r0, #7
   10b4c:	f06f 0c00 	mvn.w	ip, #0
   10b50:	f010 0407 	ands.w	r4, r0, #7
   10b54:	f891 f020 	pld	[r1, #32]
   10b58:	f040 8049 	bne.w	10bee <strlen+0xae>
   10b5c:	f04f 0400 	mov.w	r4, #0
   10b60:	f06f 0007 	mvn.w	r0, #7
   10b64:	e9d1 2300 	ldrd	r2, r3, [r1]
   10b68:	f891 f040 	pld	[r1, #64]	; 0x40
   10b6c:	f100 0008 	add.w	r0, r0, #8
   10b70:	fa82 f24c 	uadd8	r2, r2, ip
   10b74:	faa4 f28c 	sel	r2, r4, ip
   10b78:	fa83 f34c 	uadd8	r3, r3, ip
   10b7c:	faa2 f38c 	sel	r3, r2, ip
   10b80:	bb4b      	cbnz	r3, 10bd6 <strlen+0x96>
   10b82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   10b86:	fa82 f24c 	uadd8	r2, r2, ip
   10b8a:	f100 0008 	add.w	r0, r0, #8
   10b8e:	faa4 f28c 	sel	r2, r4, ip
   10b92:	fa83 f34c 	uadd8	r3, r3, ip
   10b96:	faa2 f38c 	sel	r3, r2, ip
   10b9a:	b9e3      	cbnz	r3, 10bd6 <strlen+0x96>
   10b9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   10ba0:	fa82 f24c 	uadd8	r2, r2, ip
   10ba4:	f100 0008 	add.w	r0, r0, #8
   10ba8:	faa4 f28c 	sel	r2, r4, ip
   10bac:	fa83 f34c 	uadd8	r3, r3, ip
   10bb0:	faa2 f38c 	sel	r3, r2, ip
   10bb4:	b97b      	cbnz	r3, 10bd6 <strlen+0x96>
   10bb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   10bba:	f101 0120 	add.w	r1, r1, #32
   10bbe:	fa82 f24c 	uadd8	r2, r2, ip
   10bc2:	f100 0008 	add.w	r0, r0, #8
   10bc6:	faa4 f28c 	sel	r2, r4, ip
   10bca:	fa83 f34c 	uadd8	r3, r3, ip
   10bce:	faa2 f38c 	sel	r3, r2, ip
   10bd2:	2b00      	cmp	r3, #0
   10bd4:	d0c6      	beq.n	10b64 <strlen+0x24>
   10bd6:	2a00      	cmp	r2, #0
   10bd8:	bf04      	itt	eq
   10bda:	3004      	addeq	r0, #4
   10bdc:	461a      	moveq	r2, r3
   10bde:	ba12      	rev	r2, r2
   10be0:	fab2 f282 	clz	r2, r2
   10be4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   10be8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   10bec:	4770      	bx	lr
   10bee:	e9d1 2300 	ldrd	r2, r3, [r1]
   10bf2:	f004 0503 	and.w	r5, r4, #3
   10bf6:	f1c4 0000 	rsb	r0, r4, #0
   10bfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   10bfe:	f014 0f04 	tst.w	r4, #4
   10c02:	f891 f040 	pld	[r1, #64]	; 0x40
   10c06:	fa0c f505 	lsl.w	r5, ip, r5
   10c0a:	ea62 0205 	orn	r2, r2, r5
   10c0e:	bf1c      	itt	ne
   10c10:	ea63 0305 	ornne	r3, r3, r5
   10c14:	4662      	movne	r2, ip
   10c16:	f04f 0400 	mov.w	r4, #0
   10c1a:	e7a9      	b.n	10b70 <strlen+0x30>

00010c1c <__register_exitproc>:
   10c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10c20:	4d2c      	ldr	r5, [pc, #176]	; (10cd4 <__register_exitproc+0xb8>)
   10c22:	4606      	mov	r6, r0
   10c24:	6828      	ldr	r0, [r5, #0]
   10c26:	4698      	mov	r8, r3
   10c28:	460f      	mov	r7, r1
   10c2a:	4691      	mov	r9, r2
   10c2c:	f000 f882 	bl	10d34 <__retarget_lock_acquire_recursive>
   10c30:	4b29      	ldr	r3, [pc, #164]	; (10cd8 <__register_exitproc+0xbc>)
   10c32:	681c      	ldr	r4, [r3, #0]
   10c34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10c38:	2b00      	cmp	r3, #0
   10c3a:	d03e      	beq.n	10cba <__register_exitproc+0x9e>
   10c3c:	685a      	ldr	r2, [r3, #4]
   10c3e:	2a1f      	cmp	r2, #31
   10c40:	dc1c      	bgt.n	10c7c <__register_exitproc+0x60>
   10c42:	f102 0e01 	add.w	lr, r2, #1
   10c46:	b176      	cbz	r6, 10c66 <__register_exitproc+0x4a>
   10c48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   10c4c:	2401      	movs	r4, #1
   10c4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10c52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   10c56:	4094      	lsls	r4, r2
   10c58:	4320      	orrs	r0, r4
   10c5a:	2e02      	cmp	r6, #2
   10c5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   10c60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10c64:	d023      	beq.n	10cae <__register_exitproc+0x92>
   10c66:	3202      	adds	r2, #2
   10c68:	f8c3 e004 	str.w	lr, [r3, #4]
   10c6c:	6828      	ldr	r0, [r5, #0]
   10c6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   10c72:	f000 f861 	bl	10d38 <__retarget_lock_release_recursive>
   10c76:	2000      	movs	r0, #0
   10c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10c7c:	4b17      	ldr	r3, [pc, #92]	; (10cdc <__register_exitproc+0xc0>)
   10c7e:	b30b      	cbz	r3, 10cc4 <__register_exitproc+0xa8>
   10c80:	f44f 70c8 	mov.w	r0, #400	; 0x190
   10c84:	f7fe fc82 	bl	f58c <malloc>
   10c88:	4603      	mov	r3, r0
   10c8a:	b1d8      	cbz	r0, 10cc4 <__register_exitproc+0xa8>
   10c8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   10c90:	6002      	str	r2, [r0, #0]
   10c92:	2100      	movs	r1, #0
   10c94:	6041      	str	r1, [r0, #4]
   10c96:	460a      	mov	r2, r1
   10c98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   10c9c:	f04f 0e01 	mov.w	lr, #1
   10ca0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   10ca4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   10ca8:	2e00      	cmp	r6, #0
   10caa:	d0dc      	beq.n	10c66 <__register_exitproc+0x4a>
   10cac:	e7cc      	b.n	10c48 <__register_exitproc+0x2c>
   10cae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   10cb2:	430c      	orrs	r4, r1
   10cb4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   10cb8:	e7d5      	b.n	10c66 <__register_exitproc+0x4a>
   10cba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   10cbe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   10cc2:	e7bb      	b.n	10c3c <__register_exitproc+0x20>
   10cc4:	6828      	ldr	r0, [r5, #0]
   10cc6:	f000 f837 	bl	10d38 <__retarget_lock_release_recursive>
   10cca:	f04f 30ff 	mov.w	r0, #4294967295
   10cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10cd2:	bf00      	nop
   10cd4:	20000648 	.word	0x20000648
   10cd8:	00011290 	.word	0x00011290
   10cdc:	0000f58d 	.word	0x0000f58d

00010ce0 <register_fini>:
   10ce0:	4b02      	ldr	r3, [pc, #8]	; (10cec <register_fini+0xc>)
   10ce2:	b113      	cbz	r3, 10cea <register_fini+0xa>
   10ce4:	4802      	ldr	r0, [pc, #8]	; (10cf0 <register_fini+0x10>)
   10ce6:	f000 b805 	b.w	10cf4 <atexit>
   10cea:	4770      	bx	lr
   10cec:	00000000 	.word	0x00000000
   10cf0:	00010d01 	.word	0x00010d01

00010cf4 <atexit>:
   10cf4:	2300      	movs	r3, #0
   10cf6:	4601      	mov	r1, r0
   10cf8:	461a      	mov	r2, r3
   10cfa:	4618      	mov	r0, r3
   10cfc:	f7ff bf8e 	b.w	10c1c <__register_exitproc>

00010d00 <__libc_fini_array>:
   10d00:	b538      	push	{r3, r4, r5, lr}
   10d02:	4c0a      	ldr	r4, [pc, #40]	; (10d2c <__libc_fini_array+0x2c>)
   10d04:	4d0a      	ldr	r5, [pc, #40]	; (10d30 <__libc_fini_array+0x30>)
   10d06:	1b64      	subs	r4, r4, r5
   10d08:	10a4      	asrs	r4, r4, #2
   10d0a:	d00a      	beq.n	10d22 <__libc_fini_array+0x22>
   10d0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   10d10:	3b01      	subs	r3, #1
   10d12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10d16:	3c01      	subs	r4, #1
   10d18:	f855 3904 	ldr.w	r3, [r5], #-4
   10d1c:	4798      	blx	r3
   10d1e:	2c00      	cmp	r4, #0
   10d20:	d1f9      	bne.n	10d16 <__libc_fini_array+0x16>
   10d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10d26:	f000 bad7 	b.w	112d8 <_fini>
   10d2a:	bf00      	nop
   10d2c:	000112e8 	.word	0x000112e8
   10d30:	000112e4 	.word	0x000112e4

00010d34 <__retarget_lock_acquire_recursive>:
   10d34:	4770      	bx	lr
   10d36:	bf00      	nop

00010d38 <__retarget_lock_release_recursive>:
   10d38:	4770      	bx	lr
   10d3a:	bf00      	nop
   10d3c:	682f2e2e 	.word	0x682f2e2e
   10d40:	702f6c70 	.word	0x702f6c70
   10d44:	2f74726f 	.word	0x2f74726f
   10d48:	5f6c7068 	.word	0x5f6c7068
   10d4c:	6f697067 	.word	0x6f697067
   10d50:	7361625f 	.word	0x7361625f
   10d54:	00682e65 	.word	0x00682e65
   10d58:	682f2e2e 	.word	0x682f2e2e
   10d5c:	692f6c61 	.word	0x692f6c61
   10d60:	756c636e 	.word	0x756c636e
   10d64:	682f6564 	.word	0x682f6564
   10d68:	775f6c61 	.word	0x775f6c61
   10d6c:	682e7464 	.word	0x682e7464
   10d70:	00000000 	.word	0x00000000
   10d74:	682f2e2e 	.word	0x682f2e2e
   10d78:	732f6c61 	.word	0x732f6c61
   10d7c:	682f6372 	.word	0x682f6372
   10d80:	635f6c61 	.word	0x635f6c61
   10d84:	6e656c61 	.word	0x6e656c61
   10d88:	2e726164 	.word	0x2e726164
   10d8c:	00000063 	.word	0x00000063
   10d90:	682f2e2e 	.word	0x682f2e2e
   10d94:	732f6c61 	.word	0x732f6c61
   10d98:	682f6372 	.word	0x682f6372
   10d9c:	635f6c61 	.word	0x635f6c61
   10da0:	615f6e61 	.word	0x615f6e61
   10da4:	636e7973 	.word	0x636e7973
   10da8:	0000632e 	.word	0x0000632e
   10dac:	682f2e2e 	.word	0x682f2e2e
   10db0:	732f6c61 	.word	0x732f6c61
   10db4:	682f6372 	.word	0x682f6372
   10db8:	635f6c61 	.word	0x635f6c61
   10dbc:	735f6372 	.word	0x735f6372
   10dc0:	2e636e79 	.word	0x2e636e79
   10dc4:	00000063 	.word	0x00000063
   10dc8:	682f2e2e 	.word	0x682f2e2e
   10dcc:	732f6c61 	.word	0x732f6c61
   10dd0:	682f6372 	.word	0x682f6372
   10dd4:	695f6c61 	.word	0x695f6c61
   10dd8:	6d5f6332 	.word	0x6d5f6332
   10ddc:	6e79735f 	.word	0x6e79735f
   10de0:	00632e63 	.word	0x00632e63
   10de4:	682f2e2e 	.word	0x682f2e2e
   10de8:	732f6c61 	.word	0x732f6c61
   10dec:	682f6372 	.word	0x682f6372
   10df0:	705f6c61 	.word	0x705f6c61
   10df4:	632e6d77 	.word	0x632e6d77
   10df8:	00000000 	.word	0x00000000
   10dfc:	682f2e2e 	.word	0x682f2e2e
   10e00:	732f6c61 	.word	0x732f6c61
   10e04:	682f6372 	.word	0x682f6372
   10e08:	715f6c61 	.word	0x715f6c61
   10e0c:	5f697073 	.word	0x5f697073
   10e10:	636e7973 	.word	0x636e7973
   10e14:	0000632e 	.word	0x0000632e
   10e18:	682f2e2e 	.word	0x682f2e2e
   10e1c:	732f6c61 	.word	0x732f6c61
   10e20:	682f6372 	.word	0x682f6372
   10e24:	735f6c61 	.word	0x735f6c61
   10e28:	6d5f6970 	.word	0x6d5f6970
   10e2c:	6e79735f 	.word	0x6e79735f
   10e30:	00632e63 	.word	0x00632e63
   10e34:	682f2e2e 	.word	0x682f2e2e
   10e38:	732f6c61 	.word	0x732f6c61
   10e3c:	682f6372 	.word	0x682f6372
   10e40:	745f6c61 	.word	0x745f6c61
   10e44:	72656d69 	.word	0x72656d69
   10e48:	0000632e 	.word	0x0000632e
   10e4c:	682f2e2e 	.word	0x682f2e2e
   10e50:	752f6c61 	.word	0x752f6c61
   10e54:	736c6974 	.word	0x736c6974
   10e58:	6372732f 	.word	0x6372732f
   10e5c:	6974752f 	.word	0x6974752f
   10e60:	6c5f736c 	.word	0x6c5f736c
   10e64:	2e747369 	.word	0x2e747369
   10e68:	00000063 	.word	0x00000063

00010e6c <_map>:
   10e6c:	00000000 00000040 00000001 00000021     ....@.......!...
   10e7c:	00000003 00000003 00000004 00000004     ................
   10e8c:	00000005 00000005 00000006 00000056     ............V...
   10e9c:	00000007 00000057 00000008 00000028     ....W.......(...
   10eac:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   10ebc:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00010ecc <user_mux_confs>:
   10ecc:	00020100 00000000 00000000 00000000     ................
	...

00010f10 <channel_confs>:
   10f10:	0660065f 00000000 00000000 00000000     _.`.............
	...

00010f50 <interrupt_cfg>:
	...
   10fd0:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   10fe0:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   10ff0:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   11000:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   11010:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   11020:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   11030:	43000400 43000800 43000c00              ...C...C...C

0001103c <sercomspi_regs>:
   1103c:	0020000c 00020000 00000000 01ff0001     .. .............
   1104c:	30000c04 02000000 00000000 ff001700     ...0............
   1105c:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1106c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1107c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1108c:	43001400 43001800                       ...C...C

00011094 <_usb_ep_cfgs>:
   11094:	20000e48 00000000 00000040 20000e88     H.. ....@...... 
   110a4:	20000ec8 00400040 20000f08 20000f48     ... @.@.... H.. 
   110b4:	00400040 20000f88 20000fc8 00400040     @.@.... ... @.@.
   110c4:	20001008 20001048 00400040 00000804     ... H.. @.@.....
   110d4:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   110e4:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   110f4:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   11104:	7361625f 00682e65                       _base.h.

0001110c <n25q256a_interface>:
   1110c:	0000c3f5 0000c499 0000c5a9 0000c761     ............a...
   1111c:	0000c7f1 752f2e2e 642f6273 63697665     ....../usb/devic
   1112c:	73752f65 2e636462 00000063              e/usbdc.c...

00011138 <defaultParameters>:
   11138:	00004020                                 @..

0001113c <defaultPreferences>:
   1113c:	000000fa 00000032                       ....2...

00011144 <_ZTV9CDC_Class>:
	...
   1114c:	0000eedd 0000efbd 0000eb61 0000eea5     ........a.......
   1115c:	0000f055 0000ee69 0000ed7d 0000edcd     U...i...}.......
   1116c:	0000eec5 0000ef25                       ....%...

00011174 <_ZTV6Stream>:
	...
   1117c:	0000f5a1 0000f1c1 0000eb61 0000eb75     ........a...u...
   1118c:	0000f5a1 0000f5a1 0000f5a1 2e257830     ............0x%.
   1119c:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   111ac:	0066766f                                ovf.

000111b0 <_ZTV5Print>:
	...
   111b8:	0000f5a1 0000f1c1 0000eb61 0000eb75     ........a...u...
   111c8:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   111d8:	73655466 41502074 44455353 00000000     fTest PASSED....
   111e8:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   111f8:	73655466 41462074 44454c49 00000000     fTest FAILED....
   11208:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   11218:	00632e6f 2e2f2e2e 2e2e2f2e 554c412f     o.c.../../../ALU
   11228:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   11238:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   11248:	6f697067 7361625f 00682e65              gpio_base.h.

00011254 <_ZTV18Event_Logger_Class>:
	...
   1125c:	000105d5 00010625 353a3830 33323a34     ....%...08:54:23
   1126c:	00000000                                ....

00011270 <_ZTV14Calendar_Class>:
	...
   11278:	000105d5 00010625                       ....%...

00011280 <_ZTV17DateTimeLog_Class>:
	...
   11288:	0000f5a1 0000f5a1                       ........

00011290 <_global_impure_ptr>:
   11290:	20000220                                 .. 

00011294 <_init>:
   11294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11296:	bf00      	nop
   11298:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1129a:	bc08      	pop	{r3}
   1129c:	469e      	mov	lr, r3
   1129e:	4770      	bx	lr

000112a0 <__init_array_start>:
   112a0:	00010ce1 	.word	0x00010ce1

000112a4 <__frame_dummy_init_array_entry>:
   112a4:	00000289 000009b1 00001049 00001385     ........I.......
   112b4:	0000e021 0000e5d5 0000eb29 0000f1ad     !.......).......
   112c4:	0000f579 0000f739 00010171 000102f9     y...9...q.......
   112d4:	00010871                                q...

000112d8 <_fini>:
   112d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112da:	bf00      	nop
   112dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   112de:	bc08      	pop	{r3}
   112e0:	469e      	mov	lr, r3
   112e2:	4770      	bx	lr

000112e4 <__fini_array_start>:
   112e4:	00000265 	.word	0x00000265
